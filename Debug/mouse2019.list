
mouse2019.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000137d4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005d0  08013964  08013964  00023964  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08013f34  08013f34  000300ec  2**0
                  CONTENTS
  4 .ARM          00000008  08013f34  08013f34  00023f34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08013f3c  08013f3c  000300ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08013f3c  08013f3c  00023f3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08013f40  08013f40  00023f40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000ec  20000000  08013f44  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000014f0  200000ec  08014030  000300ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200015dc  08014030  000315dc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000300ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016e74  00000000  00000000  0003011c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003092  00000000  00000000  00046f90  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001400  00000000  00000000  0004a028  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000012b0  00000000  00000000  0004b428  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00022bf9  00000000  00000000  0004c6d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00010d99  00000000  00000000  0006f2d1  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c8981  00000000  00000000  0008006a  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001489eb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005d74  00000000  00000000  00148a68  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000ec 	.word	0x200000ec
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0801394c 	.word	0x0801394c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000f0 	.word	0x200000f0
 80001cc:	0801394c 	.word	0x0801394c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ae:	f1a4 0401 	sub.w	r4, r4, #1
 80003b2:	d1e9      	bne.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__gedf2>:
 8000a0c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a10:	e006      	b.n	8000a20 <__cmpdf2+0x4>
 8000a12:	bf00      	nop

08000a14 <__ledf2>:
 8000a14:	f04f 0c01 	mov.w	ip, #1
 8000a18:	e002      	b.n	8000a20 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__cmpdf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a36:	d01b      	beq.n	8000a70 <__cmpdf2+0x54>
 8000a38:	b001      	add	sp, #4
 8000a3a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a3e:	bf0c      	ite	eq
 8000a40:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a44:	ea91 0f03 	teqne	r1, r3
 8000a48:	bf02      	ittt	eq
 8000a4a:	ea90 0f02 	teqeq	r0, r2
 8000a4e:	2000      	moveq	r0, #0
 8000a50:	4770      	bxeq	lr
 8000a52:	f110 0f00 	cmn.w	r0, #0
 8000a56:	ea91 0f03 	teq	r1, r3
 8000a5a:	bf58      	it	pl
 8000a5c:	4299      	cmppl	r1, r3
 8000a5e:	bf08      	it	eq
 8000a60:	4290      	cmpeq	r0, r2
 8000a62:	bf2c      	ite	cs
 8000a64:	17d8      	asrcs	r0, r3, #31
 8000a66:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a6a:	f040 0001 	orr.w	r0, r0, #1
 8000a6e:	4770      	bx	lr
 8000a70:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a78:	d102      	bne.n	8000a80 <__cmpdf2+0x64>
 8000a7a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a7e:	d107      	bne.n	8000a90 <__cmpdf2+0x74>
 8000a80:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d1d6      	bne.n	8000a38 <__cmpdf2+0x1c>
 8000a8a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a8e:	d0d3      	beq.n	8000a38 <__cmpdf2+0x1c>
 8000a90:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop

08000a98 <__aeabi_cdrcmple>:
 8000a98:	4684      	mov	ip, r0
 8000a9a:	4610      	mov	r0, r2
 8000a9c:	4662      	mov	r2, ip
 8000a9e:	468c      	mov	ip, r1
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4663      	mov	r3, ip
 8000aa4:	e000      	b.n	8000aa8 <__aeabi_cdcmpeq>
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdcmpeq>:
 8000aa8:	b501      	push	{r0, lr}
 8000aaa:	f7ff ffb7 	bl	8000a1c <__cmpdf2>
 8000aae:	2800      	cmp	r0, #0
 8000ab0:	bf48      	it	mi
 8000ab2:	f110 0f00 	cmnmi.w	r0, #0
 8000ab6:	bd01      	pop	{r0, pc}

08000ab8 <__aeabi_dcmpeq>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff fff4 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ac0:	bf0c      	ite	eq
 8000ac2:	2001      	moveq	r0, #1
 8000ac4:	2000      	movne	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_dcmplt>:
 8000acc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad0:	f7ff ffea 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ad4:	bf34      	ite	cc
 8000ad6:	2001      	movcc	r0, #1
 8000ad8:	2000      	movcs	r0, #0
 8000ada:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ade:	bf00      	nop

08000ae0 <__aeabi_dcmple>:
 8000ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae4:	f7ff ffe0 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ae8:	bf94      	ite	ls
 8000aea:	2001      	movls	r0, #1
 8000aec:	2000      	movhi	r0, #0
 8000aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af2:	bf00      	nop

08000af4 <__aeabi_dcmpge>:
 8000af4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af8:	f7ff ffce 	bl	8000a98 <__aeabi_cdrcmple>
 8000afc:	bf94      	ite	ls
 8000afe:	2001      	movls	r0, #1
 8000b00:	2000      	movhi	r0, #0
 8000b02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b06:	bf00      	nop

08000b08 <__aeabi_dcmpgt>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff ffc4 	bl	8000a98 <__aeabi_cdrcmple>
 8000b10:	bf34      	ite	cc
 8000b12:	2001      	movcc	r0, #1
 8000b14:	2000      	movcs	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmpun>:
 8000b1c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b24:	d102      	bne.n	8000b2c <__aeabi_dcmpun+0x10>
 8000b26:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b2a:	d10a      	bne.n	8000b42 <__aeabi_dcmpun+0x26>
 8000b2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x20>
 8000b36:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b3a:	d102      	bne.n	8000b42 <__aeabi_dcmpun+0x26>
 8000b3c:	f04f 0000 	mov.w	r0, #0
 8000b40:	4770      	bx	lr
 8000b42:	f04f 0001 	mov.w	r0, #1
 8000b46:	4770      	bx	lr

08000b48 <__aeabi_d2iz>:
 8000b48:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b4c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b50:	d215      	bcs.n	8000b7e <__aeabi_d2iz+0x36>
 8000b52:	d511      	bpl.n	8000b78 <__aeabi_d2iz+0x30>
 8000b54:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b58:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b5c:	d912      	bls.n	8000b84 <__aeabi_d2iz+0x3c>
 8000b5e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b62:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b66:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b6a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b6e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	4770      	bx	lr
 8000b78:	f04f 0000 	mov.w	r0, #0
 8000b7c:	4770      	bx	lr
 8000b7e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b82:	d105      	bne.n	8000b90 <__aeabi_d2iz+0x48>
 8000b84:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b88:	bf08      	it	eq
 8000b8a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b8e:	4770      	bx	lr
 8000b90:	f04f 0000 	mov.w	r0, #0
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop

08000b98 <__aeabi_d2f>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ba0:	bf24      	itt	cs
 8000ba2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ba6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000baa:	d90d      	bls.n	8000bc8 <__aeabi_d2f+0x30>
 8000bac:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bb0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bb4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bb8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bbc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bc0:	bf08      	it	eq
 8000bc2:	f020 0001 	biceq.w	r0, r0, #1
 8000bc6:	4770      	bx	lr
 8000bc8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bcc:	d121      	bne.n	8000c12 <__aeabi_d2f+0x7a>
 8000bce:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bd2:	bfbc      	itt	lt
 8000bd4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	4770      	bxlt	lr
 8000bda:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bde:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000be2:	f1c2 0218 	rsb	r2, r2, #24
 8000be6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bea:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bee:	fa20 f002 	lsr.w	r0, r0, r2
 8000bf2:	bf18      	it	ne
 8000bf4:	f040 0001 	orrne.w	r0, r0, #1
 8000bf8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bfc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c00:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c04:	ea40 000c 	orr.w	r0, r0, ip
 8000c08:	fa23 f302 	lsr.w	r3, r3, r2
 8000c0c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c10:	e7cc      	b.n	8000bac <__aeabi_d2f+0x14>
 8000c12:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c16:	d107      	bne.n	8000c28 <__aeabi_d2f+0x90>
 8000c18:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c1c:	bf1e      	ittt	ne
 8000c1e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c22:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c26:	4770      	bxne	lr
 8000c28:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c2c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c30:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c34:	4770      	bx	lr
 8000c36:	bf00      	nop

08000c38 <__aeabi_uldivmod>:
 8000c38:	b953      	cbnz	r3, 8000c50 <__aeabi_uldivmod+0x18>
 8000c3a:	b94a      	cbnz	r2, 8000c50 <__aeabi_uldivmod+0x18>
 8000c3c:	2900      	cmp	r1, #0
 8000c3e:	bf08      	it	eq
 8000c40:	2800      	cmpeq	r0, #0
 8000c42:	bf1c      	itt	ne
 8000c44:	f04f 31ff 	movne.w	r1, #4294967295
 8000c48:	f04f 30ff 	movne.w	r0, #4294967295
 8000c4c:	f000 b972 	b.w	8000f34 <__aeabi_idiv0>
 8000c50:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c54:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c58:	f000 f806 	bl	8000c68 <__udivmoddi4>
 8000c5c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c60:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c64:	b004      	add	sp, #16
 8000c66:	4770      	bx	lr

08000c68 <__udivmoddi4>:
 8000c68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c6c:	9e08      	ldr	r6, [sp, #32]
 8000c6e:	4604      	mov	r4, r0
 8000c70:	4688      	mov	r8, r1
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d14b      	bne.n	8000d0e <__udivmoddi4+0xa6>
 8000c76:	428a      	cmp	r2, r1
 8000c78:	4615      	mov	r5, r2
 8000c7a:	d967      	bls.n	8000d4c <__udivmoddi4+0xe4>
 8000c7c:	fab2 f282 	clz	r2, r2
 8000c80:	b14a      	cbz	r2, 8000c96 <__udivmoddi4+0x2e>
 8000c82:	f1c2 0720 	rsb	r7, r2, #32
 8000c86:	fa01 f302 	lsl.w	r3, r1, r2
 8000c8a:	fa20 f707 	lsr.w	r7, r0, r7
 8000c8e:	4095      	lsls	r5, r2
 8000c90:	ea47 0803 	orr.w	r8, r7, r3
 8000c94:	4094      	lsls	r4, r2
 8000c96:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c9a:	0c23      	lsrs	r3, r4, #16
 8000c9c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000ca0:	fa1f fc85 	uxth.w	ip, r5
 8000ca4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000ca8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cac:	fb07 f10c 	mul.w	r1, r7, ip
 8000cb0:	4299      	cmp	r1, r3
 8000cb2:	d909      	bls.n	8000cc8 <__udivmoddi4+0x60>
 8000cb4:	18eb      	adds	r3, r5, r3
 8000cb6:	f107 30ff 	add.w	r0, r7, #4294967295
 8000cba:	f080 811b 	bcs.w	8000ef4 <__udivmoddi4+0x28c>
 8000cbe:	4299      	cmp	r1, r3
 8000cc0:	f240 8118 	bls.w	8000ef4 <__udivmoddi4+0x28c>
 8000cc4:	3f02      	subs	r7, #2
 8000cc6:	442b      	add	r3, r5
 8000cc8:	1a5b      	subs	r3, r3, r1
 8000cca:	b2a4      	uxth	r4, r4
 8000ccc:	fbb3 f0fe 	udiv	r0, r3, lr
 8000cd0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000cd4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cd8:	fb00 fc0c 	mul.w	ip, r0, ip
 8000cdc:	45a4      	cmp	ip, r4
 8000cde:	d909      	bls.n	8000cf4 <__udivmoddi4+0x8c>
 8000ce0:	192c      	adds	r4, r5, r4
 8000ce2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ce6:	f080 8107 	bcs.w	8000ef8 <__udivmoddi4+0x290>
 8000cea:	45a4      	cmp	ip, r4
 8000cec:	f240 8104 	bls.w	8000ef8 <__udivmoddi4+0x290>
 8000cf0:	3802      	subs	r0, #2
 8000cf2:	442c      	add	r4, r5
 8000cf4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000cf8:	eba4 040c 	sub.w	r4, r4, ip
 8000cfc:	2700      	movs	r7, #0
 8000cfe:	b11e      	cbz	r6, 8000d08 <__udivmoddi4+0xa0>
 8000d00:	40d4      	lsrs	r4, r2
 8000d02:	2300      	movs	r3, #0
 8000d04:	e9c6 4300 	strd	r4, r3, [r6]
 8000d08:	4639      	mov	r1, r7
 8000d0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d0e:	428b      	cmp	r3, r1
 8000d10:	d909      	bls.n	8000d26 <__udivmoddi4+0xbe>
 8000d12:	2e00      	cmp	r6, #0
 8000d14:	f000 80eb 	beq.w	8000eee <__udivmoddi4+0x286>
 8000d18:	2700      	movs	r7, #0
 8000d1a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d1e:	4638      	mov	r0, r7
 8000d20:	4639      	mov	r1, r7
 8000d22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d26:	fab3 f783 	clz	r7, r3
 8000d2a:	2f00      	cmp	r7, #0
 8000d2c:	d147      	bne.n	8000dbe <__udivmoddi4+0x156>
 8000d2e:	428b      	cmp	r3, r1
 8000d30:	d302      	bcc.n	8000d38 <__udivmoddi4+0xd0>
 8000d32:	4282      	cmp	r2, r0
 8000d34:	f200 80fa 	bhi.w	8000f2c <__udivmoddi4+0x2c4>
 8000d38:	1a84      	subs	r4, r0, r2
 8000d3a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d3e:	2001      	movs	r0, #1
 8000d40:	4698      	mov	r8, r3
 8000d42:	2e00      	cmp	r6, #0
 8000d44:	d0e0      	beq.n	8000d08 <__udivmoddi4+0xa0>
 8000d46:	e9c6 4800 	strd	r4, r8, [r6]
 8000d4a:	e7dd      	b.n	8000d08 <__udivmoddi4+0xa0>
 8000d4c:	b902      	cbnz	r2, 8000d50 <__udivmoddi4+0xe8>
 8000d4e:	deff      	udf	#255	; 0xff
 8000d50:	fab2 f282 	clz	r2, r2
 8000d54:	2a00      	cmp	r2, #0
 8000d56:	f040 808f 	bne.w	8000e78 <__udivmoddi4+0x210>
 8000d5a:	1b49      	subs	r1, r1, r5
 8000d5c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d60:	fa1f f885 	uxth.w	r8, r5
 8000d64:	2701      	movs	r7, #1
 8000d66:	fbb1 fcfe 	udiv	ip, r1, lr
 8000d6a:	0c23      	lsrs	r3, r4, #16
 8000d6c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000d70:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d74:	fb08 f10c 	mul.w	r1, r8, ip
 8000d78:	4299      	cmp	r1, r3
 8000d7a:	d907      	bls.n	8000d8c <__udivmoddi4+0x124>
 8000d7c:	18eb      	adds	r3, r5, r3
 8000d7e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d82:	d202      	bcs.n	8000d8a <__udivmoddi4+0x122>
 8000d84:	4299      	cmp	r1, r3
 8000d86:	f200 80cd 	bhi.w	8000f24 <__udivmoddi4+0x2bc>
 8000d8a:	4684      	mov	ip, r0
 8000d8c:	1a59      	subs	r1, r3, r1
 8000d8e:	b2a3      	uxth	r3, r4
 8000d90:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d94:	fb0e 1410 	mls	r4, lr, r0, r1
 8000d98:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d9c:	fb08 f800 	mul.w	r8, r8, r0
 8000da0:	45a0      	cmp	r8, r4
 8000da2:	d907      	bls.n	8000db4 <__udivmoddi4+0x14c>
 8000da4:	192c      	adds	r4, r5, r4
 8000da6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000daa:	d202      	bcs.n	8000db2 <__udivmoddi4+0x14a>
 8000dac:	45a0      	cmp	r8, r4
 8000dae:	f200 80b6 	bhi.w	8000f1e <__udivmoddi4+0x2b6>
 8000db2:	4618      	mov	r0, r3
 8000db4:	eba4 0408 	sub.w	r4, r4, r8
 8000db8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000dbc:	e79f      	b.n	8000cfe <__udivmoddi4+0x96>
 8000dbe:	f1c7 0c20 	rsb	ip, r7, #32
 8000dc2:	40bb      	lsls	r3, r7
 8000dc4:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000dc8:	ea4e 0e03 	orr.w	lr, lr, r3
 8000dcc:	fa01 f407 	lsl.w	r4, r1, r7
 8000dd0:	fa20 f50c 	lsr.w	r5, r0, ip
 8000dd4:	fa21 f30c 	lsr.w	r3, r1, ip
 8000dd8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000ddc:	4325      	orrs	r5, r4
 8000dde:	fbb3 f9f8 	udiv	r9, r3, r8
 8000de2:	0c2c      	lsrs	r4, r5, #16
 8000de4:	fb08 3319 	mls	r3, r8, r9, r3
 8000de8:	fa1f fa8e 	uxth.w	sl, lr
 8000dec:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000df0:	fb09 f40a 	mul.w	r4, r9, sl
 8000df4:	429c      	cmp	r4, r3
 8000df6:	fa02 f207 	lsl.w	r2, r2, r7
 8000dfa:	fa00 f107 	lsl.w	r1, r0, r7
 8000dfe:	d90b      	bls.n	8000e18 <__udivmoddi4+0x1b0>
 8000e00:	eb1e 0303 	adds.w	r3, lr, r3
 8000e04:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e08:	f080 8087 	bcs.w	8000f1a <__udivmoddi4+0x2b2>
 8000e0c:	429c      	cmp	r4, r3
 8000e0e:	f240 8084 	bls.w	8000f1a <__udivmoddi4+0x2b2>
 8000e12:	f1a9 0902 	sub.w	r9, r9, #2
 8000e16:	4473      	add	r3, lr
 8000e18:	1b1b      	subs	r3, r3, r4
 8000e1a:	b2ad      	uxth	r5, r5
 8000e1c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e20:	fb08 3310 	mls	r3, r8, r0, r3
 8000e24:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e28:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e2c:	45a2      	cmp	sl, r4
 8000e2e:	d908      	bls.n	8000e42 <__udivmoddi4+0x1da>
 8000e30:	eb1e 0404 	adds.w	r4, lr, r4
 8000e34:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e38:	d26b      	bcs.n	8000f12 <__udivmoddi4+0x2aa>
 8000e3a:	45a2      	cmp	sl, r4
 8000e3c:	d969      	bls.n	8000f12 <__udivmoddi4+0x2aa>
 8000e3e:	3802      	subs	r0, #2
 8000e40:	4474      	add	r4, lr
 8000e42:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e46:	fba0 8902 	umull	r8, r9, r0, r2
 8000e4a:	eba4 040a 	sub.w	r4, r4, sl
 8000e4e:	454c      	cmp	r4, r9
 8000e50:	46c2      	mov	sl, r8
 8000e52:	464b      	mov	r3, r9
 8000e54:	d354      	bcc.n	8000f00 <__udivmoddi4+0x298>
 8000e56:	d051      	beq.n	8000efc <__udivmoddi4+0x294>
 8000e58:	2e00      	cmp	r6, #0
 8000e5a:	d069      	beq.n	8000f30 <__udivmoddi4+0x2c8>
 8000e5c:	ebb1 050a 	subs.w	r5, r1, sl
 8000e60:	eb64 0403 	sbc.w	r4, r4, r3
 8000e64:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000e68:	40fd      	lsrs	r5, r7
 8000e6a:	40fc      	lsrs	r4, r7
 8000e6c:	ea4c 0505 	orr.w	r5, ip, r5
 8000e70:	e9c6 5400 	strd	r5, r4, [r6]
 8000e74:	2700      	movs	r7, #0
 8000e76:	e747      	b.n	8000d08 <__udivmoddi4+0xa0>
 8000e78:	f1c2 0320 	rsb	r3, r2, #32
 8000e7c:	fa20 f703 	lsr.w	r7, r0, r3
 8000e80:	4095      	lsls	r5, r2
 8000e82:	fa01 f002 	lsl.w	r0, r1, r2
 8000e86:	fa21 f303 	lsr.w	r3, r1, r3
 8000e8a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e8e:	4338      	orrs	r0, r7
 8000e90:	0c01      	lsrs	r1, r0, #16
 8000e92:	fbb3 f7fe 	udiv	r7, r3, lr
 8000e96:	fa1f f885 	uxth.w	r8, r5
 8000e9a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000e9e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ea2:	fb07 f308 	mul.w	r3, r7, r8
 8000ea6:	428b      	cmp	r3, r1
 8000ea8:	fa04 f402 	lsl.w	r4, r4, r2
 8000eac:	d907      	bls.n	8000ebe <__udivmoddi4+0x256>
 8000eae:	1869      	adds	r1, r5, r1
 8000eb0:	f107 3cff 	add.w	ip, r7, #4294967295
 8000eb4:	d22f      	bcs.n	8000f16 <__udivmoddi4+0x2ae>
 8000eb6:	428b      	cmp	r3, r1
 8000eb8:	d92d      	bls.n	8000f16 <__udivmoddi4+0x2ae>
 8000eba:	3f02      	subs	r7, #2
 8000ebc:	4429      	add	r1, r5
 8000ebe:	1acb      	subs	r3, r1, r3
 8000ec0:	b281      	uxth	r1, r0
 8000ec2:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ec6:	fb0e 3310 	mls	r3, lr, r0, r3
 8000eca:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ece:	fb00 f308 	mul.w	r3, r0, r8
 8000ed2:	428b      	cmp	r3, r1
 8000ed4:	d907      	bls.n	8000ee6 <__udivmoddi4+0x27e>
 8000ed6:	1869      	adds	r1, r5, r1
 8000ed8:	f100 3cff 	add.w	ip, r0, #4294967295
 8000edc:	d217      	bcs.n	8000f0e <__udivmoddi4+0x2a6>
 8000ede:	428b      	cmp	r3, r1
 8000ee0:	d915      	bls.n	8000f0e <__udivmoddi4+0x2a6>
 8000ee2:	3802      	subs	r0, #2
 8000ee4:	4429      	add	r1, r5
 8000ee6:	1ac9      	subs	r1, r1, r3
 8000ee8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000eec:	e73b      	b.n	8000d66 <__udivmoddi4+0xfe>
 8000eee:	4637      	mov	r7, r6
 8000ef0:	4630      	mov	r0, r6
 8000ef2:	e709      	b.n	8000d08 <__udivmoddi4+0xa0>
 8000ef4:	4607      	mov	r7, r0
 8000ef6:	e6e7      	b.n	8000cc8 <__udivmoddi4+0x60>
 8000ef8:	4618      	mov	r0, r3
 8000efa:	e6fb      	b.n	8000cf4 <__udivmoddi4+0x8c>
 8000efc:	4541      	cmp	r1, r8
 8000efe:	d2ab      	bcs.n	8000e58 <__udivmoddi4+0x1f0>
 8000f00:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f04:	eb69 020e 	sbc.w	r2, r9, lr
 8000f08:	3801      	subs	r0, #1
 8000f0a:	4613      	mov	r3, r2
 8000f0c:	e7a4      	b.n	8000e58 <__udivmoddi4+0x1f0>
 8000f0e:	4660      	mov	r0, ip
 8000f10:	e7e9      	b.n	8000ee6 <__udivmoddi4+0x27e>
 8000f12:	4618      	mov	r0, r3
 8000f14:	e795      	b.n	8000e42 <__udivmoddi4+0x1da>
 8000f16:	4667      	mov	r7, ip
 8000f18:	e7d1      	b.n	8000ebe <__udivmoddi4+0x256>
 8000f1a:	4681      	mov	r9, r0
 8000f1c:	e77c      	b.n	8000e18 <__udivmoddi4+0x1b0>
 8000f1e:	3802      	subs	r0, #2
 8000f20:	442c      	add	r4, r5
 8000f22:	e747      	b.n	8000db4 <__udivmoddi4+0x14c>
 8000f24:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f28:	442b      	add	r3, r5
 8000f2a:	e72f      	b.n	8000d8c <__udivmoddi4+0x124>
 8000f2c:	4638      	mov	r0, r7
 8000f2e:	e708      	b.n	8000d42 <__udivmoddi4+0xda>
 8000f30:	4637      	mov	r7, r6
 8000f32:	e6e9      	b.n	8000d08 <__udivmoddi4+0xa0>

08000f34 <__aeabi_idiv0>:
 8000f34:	4770      	bx	lr
 8000f36:	bf00      	nop

08000f38 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f3c:	4b0e      	ldr	r3, [pc, #56]	; (8000f78 <HAL_Init+0x40>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	4a0d      	ldr	r2, [pc, #52]	; (8000f78 <HAL_Init+0x40>)
 8000f42:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f46:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f48:	4b0b      	ldr	r3, [pc, #44]	; (8000f78 <HAL_Init+0x40>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	4a0a      	ldr	r2, [pc, #40]	; (8000f78 <HAL_Init+0x40>)
 8000f4e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f52:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f54:	4b08      	ldr	r3, [pc, #32]	; (8000f78 <HAL_Init+0x40>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	4a07      	ldr	r2, [pc, #28]	; (8000f78 <HAL_Init+0x40>)
 8000f5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f5e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f60:	2003      	movs	r0, #3
 8000f62:	f000 fd07 	bl	8001974 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f66:	2000      	movs	r0, #0
 8000f68:	f000 f808 	bl	8000f7c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f6c:	f011 f82e 	bl	8011fcc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f70:	2300      	movs	r3, #0
}
 8000f72:	4618      	mov	r0, r3
 8000f74:	bd80      	pop	{r7, pc}
 8000f76:	bf00      	nop
 8000f78:	40023c00 	.word	0x40023c00

08000f7c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b082      	sub	sp, #8
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f84:	4b12      	ldr	r3, [pc, #72]	; (8000fd0 <HAL_InitTick+0x54>)
 8000f86:	681a      	ldr	r2, [r3, #0]
 8000f88:	4b12      	ldr	r3, [pc, #72]	; (8000fd4 <HAL_InitTick+0x58>)
 8000f8a:	781b      	ldrb	r3, [r3, #0]
 8000f8c:	4619      	mov	r1, r3
 8000f8e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f92:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f96:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	f000 fd1f 	bl	80019de <HAL_SYSTICK_Config>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d001      	beq.n	8000faa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	e00e      	b.n	8000fc8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	2b0f      	cmp	r3, #15
 8000fae:	d80a      	bhi.n	8000fc6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	6879      	ldr	r1, [r7, #4]
 8000fb4:	f04f 30ff 	mov.w	r0, #4294967295
 8000fb8:	f000 fce7 	bl	800198a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fbc:	4a06      	ldr	r2, [pc, #24]	; (8000fd8 <HAL_InitTick+0x5c>)
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	e000      	b.n	8000fc8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000fc6:	2301      	movs	r3, #1
}
 8000fc8:	4618      	mov	r0, r3
 8000fca:	3708      	adds	r7, #8
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd80      	pop	{r7, pc}
 8000fd0:	20000080 	.word	0x20000080
 8000fd4:	20000004 	.word	0x20000004
 8000fd8:	20000000 	.word	0x20000000

08000fdc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fe0:	4b06      	ldr	r3, [pc, #24]	; (8000ffc <HAL_IncTick+0x20>)
 8000fe2:	781b      	ldrb	r3, [r3, #0]
 8000fe4:	461a      	mov	r2, r3
 8000fe6:	4b06      	ldr	r3, [pc, #24]	; (8001000 <HAL_IncTick+0x24>)
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	4413      	add	r3, r2
 8000fec:	4a04      	ldr	r2, [pc, #16]	; (8001000 <HAL_IncTick+0x24>)
 8000fee:	6013      	str	r3, [r2, #0]
}
 8000ff0:	bf00      	nop
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff8:	4770      	bx	lr
 8000ffa:	bf00      	nop
 8000ffc:	20000004 	.word	0x20000004
 8001000:	20000120 	.word	0x20000120

08001004 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001004:	b480      	push	{r7}
 8001006:	af00      	add	r7, sp, #0
  return uwTick;
 8001008:	4b03      	ldr	r3, [pc, #12]	; (8001018 <HAL_GetTick+0x14>)
 800100a:	681b      	ldr	r3, [r3, #0]
}
 800100c:	4618      	mov	r0, r3
 800100e:	46bd      	mov	sp, r7
 8001010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop
 8001018:	20000120 	.word	0x20000120

0800101c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b084      	sub	sp, #16
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001024:	f7ff ffee 	bl	8001004 <HAL_GetTick>
 8001028:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001034:	d005      	beq.n	8001042 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001036:	4b09      	ldr	r3, [pc, #36]	; (800105c <HAL_Delay+0x40>)
 8001038:	781b      	ldrb	r3, [r3, #0]
 800103a:	461a      	mov	r2, r3
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	4413      	add	r3, r2
 8001040:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001042:	bf00      	nop
 8001044:	f7ff ffde 	bl	8001004 <HAL_GetTick>
 8001048:	4602      	mov	r2, r0
 800104a:	68bb      	ldr	r3, [r7, #8]
 800104c:	1ad3      	subs	r3, r2, r3
 800104e:	68fa      	ldr	r2, [r7, #12]
 8001050:	429a      	cmp	r2, r3
 8001052:	d8f7      	bhi.n	8001044 <HAL_Delay+0x28>
  {
  }
}
 8001054:	bf00      	nop
 8001056:	3710      	adds	r7, #16
 8001058:	46bd      	mov	sp, r7
 800105a:	bd80      	pop	{r7, pc}
 800105c:	20000004 	.word	0x20000004

08001060 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b084      	sub	sp, #16
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001068:	2300      	movs	r3, #0
 800106a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	2b00      	cmp	r3, #0
 8001070:	d101      	bne.n	8001076 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001072:	2301      	movs	r3, #1
 8001074:	e033      	b.n	80010de <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800107a:	2b00      	cmp	r3, #0
 800107c:	d109      	bne.n	8001092 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800107e:	6878      	ldr	r0, [r7, #4]
 8001080:	f010 ffcc 	bl	801201c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	2200      	movs	r2, #0
 8001088:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	2200      	movs	r2, #0
 800108e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001096:	f003 0310 	and.w	r3, r3, #16
 800109a:	2b00      	cmp	r3, #0
 800109c:	d118      	bne.n	80010d0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010a2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80010a6:	f023 0302 	bic.w	r3, r3, #2
 80010aa:	f043 0202 	orr.w	r2, r3, #2
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80010b2:	6878      	ldr	r0, [r7, #4]
 80010b4:	f000 fa92 	bl	80015dc <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	2200      	movs	r2, #0
 80010bc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010c2:	f023 0303 	bic.w	r3, r3, #3
 80010c6:	f043 0201 	orr.w	r2, r3, #1
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	641a      	str	r2, [r3, #64]	; 0x40
 80010ce:	e001      	b.n	80010d4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80010d0:	2301      	movs	r3, #1
 80010d2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	2200      	movs	r2, #0
 80010d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80010dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80010de:	4618      	mov	r0, r3
 80010e0:	3710      	adds	r7, #16
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}
	...

080010e8 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80010e8:	b480      	push	{r7}
 80010ea:	b085      	sub	sp, #20
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80010f0:	2300      	movs	r3, #0
 80010f2:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80010fa:	2b01      	cmp	r3, #1
 80010fc:	d101      	bne.n	8001102 <HAL_ADC_Start+0x1a>
 80010fe:	2302      	movs	r3, #2
 8001100:	e0a5      	b.n	800124e <HAL_ADC_Start+0x166>
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	2201      	movs	r2, #1
 8001106:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	689b      	ldr	r3, [r3, #8]
 8001110:	f003 0301 	and.w	r3, r3, #1
 8001114:	2b01      	cmp	r3, #1
 8001116:	d018      	beq.n	800114a <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	689a      	ldr	r2, [r3, #8]
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	f042 0201 	orr.w	r2, r2, #1
 8001126:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001128:	4b4c      	ldr	r3, [pc, #304]	; (800125c <HAL_ADC_Start+0x174>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	4a4c      	ldr	r2, [pc, #304]	; (8001260 <HAL_ADC_Start+0x178>)
 800112e:	fba2 2303 	umull	r2, r3, r2, r3
 8001132:	0c9a      	lsrs	r2, r3, #18
 8001134:	4613      	mov	r3, r2
 8001136:	005b      	lsls	r3, r3, #1
 8001138:	4413      	add	r3, r2
 800113a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 800113c:	e002      	b.n	8001144 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800113e:	68bb      	ldr	r3, [r7, #8]
 8001140:	3b01      	subs	r3, #1
 8001142:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001144:	68bb      	ldr	r3, [r7, #8]
 8001146:	2b00      	cmp	r3, #0
 8001148:	d1f9      	bne.n	800113e <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	689b      	ldr	r3, [r3, #8]
 8001150:	f003 0301 	and.w	r3, r3, #1
 8001154:	2b01      	cmp	r3, #1
 8001156:	d179      	bne.n	800124c <HAL_ADC_Start+0x164>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800115c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001160:	f023 0301 	bic.w	r3, r3, #1
 8001164:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	685b      	ldr	r3, [r3, #4]
 8001172:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001176:	2b00      	cmp	r3, #0
 8001178:	d007      	beq.n	800118a <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800117e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001182:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800118e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001192:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001196:	d106      	bne.n	80011a6 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800119c:	f023 0206 	bic.w	r2, r3, #6
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	645a      	str	r2, [r3, #68]	; 0x44
 80011a4:	e002      	b.n	80011ac <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	2200      	movs	r2, #0
 80011aa:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	2200      	movs	r2, #0
 80011b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80011b4:	4b2b      	ldr	r3, [pc, #172]	; (8001264 <HAL_ADC_Start+0x17c>)
 80011b6:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80011c0:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	685b      	ldr	r3, [r3, #4]
 80011c6:	f003 031f 	and.w	r3, r3, #31
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d12a      	bne.n	8001224 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	4a25      	ldr	r2, [pc, #148]	; (8001268 <HAL_ADC_Start+0x180>)
 80011d4:	4293      	cmp	r3, r2
 80011d6:	d015      	beq.n	8001204 <HAL_ADC_Start+0x11c>
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	4a23      	ldr	r2, [pc, #140]	; (800126c <HAL_ADC_Start+0x184>)
 80011de:	4293      	cmp	r3, r2
 80011e0:	d105      	bne.n	80011ee <HAL_ADC_Start+0x106>
 80011e2:	4b20      	ldr	r3, [pc, #128]	; (8001264 <HAL_ADC_Start+0x17c>)
 80011e4:	685b      	ldr	r3, [r3, #4]
 80011e6:	f003 031f 	and.w	r3, r3, #31
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d00a      	beq.n	8001204 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	4a1f      	ldr	r2, [pc, #124]	; (8001270 <HAL_ADC_Start+0x188>)
 80011f4:	4293      	cmp	r3, r2
 80011f6:	d129      	bne.n	800124c <HAL_ADC_Start+0x164>
 80011f8:	4b1a      	ldr	r3, [pc, #104]	; (8001264 <HAL_ADC_Start+0x17c>)
 80011fa:	685b      	ldr	r3, [r3, #4]
 80011fc:	f003 031f 	and.w	r3, r3, #31
 8001200:	2b0f      	cmp	r3, #15
 8001202:	d823      	bhi.n	800124c <HAL_ADC_Start+0x164>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	689b      	ldr	r3, [r3, #8]
 800120a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800120e:	2b00      	cmp	r3, #0
 8001210:	d11c      	bne.n	800124c <HAL_ADC_Start+0x164>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	689a      	ldr	r2, [r3, #8]
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001220:	609a      	str	r2, [r3, #8]
 8001222:	e013      	b.n	800124c <HAL_ADC_Start+0x164>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	4a0f      	ldr	r2, [pc, #60]	; (8001268 <HAL_ADC_Start+0x180>)
 800122a:	4293      	cmp	r3, r2
 800122c:	d10e      	bne.n	800124c <HAL_ADC_Start+0x164>
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	689b      	ldr	r3, [r3, #8]
 8001234:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001238:	2b00      	cmp	r3, #0
 800123a:	d107      	bne.n	800124c <HAL_ADC_Start+0x164>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	689a      	ldr	r2, [r3, #8]
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800124a:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 800124c:	2300      	movs	r3, #0
}
 800124e:	4618      	mov	r0, r3
 8001250:	3714      	adds	r7, #20
 8001252:	46bd      	mov	sp, r7
 8001254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001258:	4770      	bx	lr
 800125a:	bf00      	nop
 800125c:	20000080 	.word	0x20000080
 8001260:	431bde83 	.word	0x431bde83
 8001264:	40012300 	.word	0x40012300
 8001268:	40012000 	.word	0x40012000
 800126c:	40012100 	.word	0x40012100
 8001270:	40012200 	.word	0x40012200

08001274 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b084      	sub	sp, #16
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
 800127c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800127e:	2300      	movs	r3, #0
 8001280:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	689b      	ldr	r3, [r3, #8]
 8001288:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800128c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001290:	d113      	bne.n	80012ba <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	689b      	ldr	r3, [r3, #8]
 8001298:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800129c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80012a0:	d10b      	bne.n	80012ba <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012a6:	f043 0220 	orr.w	r2, r3, #32
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	2200      	movs	r2, #0
 80012b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 80012b6:	2301      	movs	r3, #1
 80012b8:	e05c      	b.n	8001374 <HAL_ADC_PollForConversion+0x100>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 80012ba:	f7ff fea3 	bl	8001004 <HAL_GetTick>
 80012be:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80012c0:	e01a      	b.n	80012f8 <HAL_ADC_PollForConversion+0x84>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80012c2:	683b      	ldr	r3, [r7, #0]
 80012c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012c8:	d016      	beq.n	80012f8 <HAL_ADC_PollForConversion+0x84>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d007      	beq.n	80012e0 <HAL_ADC_PollForConversion+0x6c>
 80012d0:	f7ff fe98 	bl	8001004 <HAL_GetTick>
 80012d4:	4602      	mov	r2, r0
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	1ad3      	subs	r3, r2, r3
 80012da:	683a      	ldr	r2, [r7, #0]
 80012dc:	429a      	cmp	r2, r3
 80012de:	d20b      	bcs.n	80012f8 <HAL_ADC_PollForConversion+0x84>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012e4:	f043 0204 	orr.w	r2, r3, #4
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	2200      	movs	r2, #0
 80012f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 80012f4:	2303      	movs	r3, #3
 80012f6:	e03d      	b.n	8001374 <HAL_ADC_PollForConversion+0x100>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	f003 0302 	and.w	r3, r3, #2
 8001302:	2b02      	cmp	r3, #2
 8001304:	d1dd      	bne.n	80012c2 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f06f 0212 	mvn.w	r2, #18
 800130e:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001314:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	689b      	ldr	r3, [r3, #8]
 8001322:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001326:	2b00      	cmp	r3, #0
 8001328:	d123      	bne.n	8001372 <HAL_ADC_PollForConversion+0xfe>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800132e:	2b00      	cmp	r3, #0
 8001330:	d11f      	bne.n	8001372 <HAL_ADC_PollForConversion+0xfe>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001338:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800133c:	2b00      	cmp	r3, #0
 800133e:	d006      	beq.n	800134e <HAL_ADC_PollForConversion+0xda>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	689b      	ldr	r3, [r3, #8]
 8001346:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800134a:	2b00      	cmp	r3, #0
 800134c:	d111      	bne.n	8001372 <HAL_ADC_PollForConversion+0xfe>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001352:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800135e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001362:	2b00      	cmp	r3, #0
 8001364:	d105      	bne.n	8001372 <HAL_ADC_PollForConversion+0xfe>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800136a:	f043 0201 	orr.w	r2, r3, #1
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001372:	2300      	movs	r3, #0
}
 8001374:	4618      	mov	r0, r3
 8001376:	3710      	adds	r7, #16
 8001378:	46bd      	mov	sp, r7
 800137a:	bd80      	pop	{r7, pc}

0800137c <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 800137c:	b480      	push	{r7}
 800137e:	b083      	sub	sp, #12
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800138a:	4618      	mov	r0, r3
 800138c:	370c      	adds	r7, #12
 800138e:	46bd      	mov	sp, r7
 8001390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001394:	4770      	bx	lr
	...

08001398 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001398:	b480      	push	{r7}
 800139a:	b085      	sub	sp, #20
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
 80013a0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80013a2:	2300      	movs	r3, #0
 80013a4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80013ac:	2b01      	cmp	r3, #1
 80013ae:	d101      	bne.n	80013b4 <HAL_ADC_ConfigChannel+0x1c>
 80013b0:	2302      	movs	r3, #2
 80013b2:	e105      	b.n	80015c0 <HAL_ADC_ConfigChannel+0x228>
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	2201      	movs	r2, #1
 80013b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	2b09      	cmp	r3, #9
 80013c2:	d925      	bls.n	8001410 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	68d9      	ldr	r1, [r3, #12]
 80013ca:	683b      	ldr	r3, [r7, #0]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	b29b      	uxth	r3, r3
 80013d0:	461a      	mov	r2, r3
 80013d2:	4613      	mov	r3, r2
 80013d4:	005b      	lsls	r3, r3, #1
 80013d6:	4413      	add	r3, r2
 80013d8:	3b1e      	subs	r3, #30
 80013da:	2207      	movs	r2, #7
 80013dc:	fa02 f303 	lsl.w	r3, r2, r3
 80013e0:	43da      	mvns	r2, r3
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	400a      	ands	r2, r1
 80013e8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	68d9      	ldr	r1, [r3, #12]
 80013f0:	683b      	ldr	r3, [r7, #0]
 80013f2:	689a      	ldr	r2, [r3, #8]
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	b29b      	uxth	r3, r3
 80013fa:	4618      	mov	r0, r3
 80013fc:	4603      	mov	r3, r0
 80013fe:	005b      	lsls	r3, r3, #1
 8001400:	4403      	add	r3, r0
 8001402:	3b1e      	subs	r3, #30
 8001404:	409a      	lsls	r2, r3
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	430a      	orrs	r2, r1
 800140c:	60da      	str	r2, [r3, #12]
 800140e:	e022      	b.n	8001456 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	6919      	ldr	r1, [r3, #16]
 8001416:	683b      	ldr	r3, [r7, #0]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	b29b      	uxth	r3, r3
 800141c:	461a      	mov	r2, r3
 800141e:	4613      	mov	r3, r2
 8001420:	005b      	lsls	r3, r3, #1
 8001422:	4413      	add	r3, r2
 8001424:	2207      	movs	r2, #7
 8001426:	fa02 f303 	lsl.w	r3, r2, r3
 800142a:	43da      	mvns	r2, r3
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	400a      	ands	r2, r1
 8001432:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	6919      	ldr	r1, [r3, #16]
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	689a      	ldr	r2, [r3, #8]
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	b29b      	uxth	r3, r3
 8001444:	4618      	mov	r0, r3
 8001446:	4603      	mov	r3, r0
 8001448:	005b      	lsls	r3, r3, #1
 800144a:	4403      	add	r3, r0
 800144c:	409a      	lsls	r2, r3
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	430a      	orrs	r2, r1
 8001454:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	685b      	ldr	r3, [r3, #4]
 800145a:	2b06      	cmp	r3, #6
 800145c:	d824      	bhi.n	80014a8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	685a      	ldr	r2, [r3, #4]
 8001468:	4613      	mov	r3, r2
 800146a:	009b      	lsls	r3, r3, #2
 800146c:	4413      	add	r3, r2
 800146e:	3b05      	subs	r3, #5
 8001470:	221f      	movs	r2, #31
 8001472:	fa02 f303 	lsl.w	r3, r2, r3
 8001476:	43da      	mvns	r2, r3
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	400a      	ands	r2, r1
 800147e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	b29b      	uxth	r3, r3
 800148c:	4618      	mov	r0, r3
 800148e:	683b      	ldr	r3, [r7, #0]
 8001490:	685a      	ldr	r2, [r3, #4]
 8001492:	4613      	mov	r3, r2
 8001494:	009b      	lsls	r3, r3, #2
 8001496:	4413      	add	r3, r2
 8001498:	3b05      	subs	r3, #5
 800149a:	fa00 f203 	lsl.w	r2, r0, r3
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	430a      	orrs	r2, r1
 80014a4:	635a      	str	r2, [r3, #52]	; 0x34
 80014a6:	e04c      	b.n	8001542 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	685b      	ldr	r3, [r3, #4]
 80014ac:	2b0c      	cmp	r3, #12
 80014ae:	d824      	bhi.n	80014fa <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	685a      	ldr	r2, [r3, #4]
 80014ba:	4613      	mov	r3, r2
 80014bc:	009b      	lsls	r3, r3, #2
 80014be:	4413      	add	r3, r2
 80014c0:	3b23      	subs	r3, #35	; 0x23
 80014c2:	221f      	movs	r2, #31
 80014c4:	fa02 f303 	lsl.w	r3, r2, r3
 80014c8:	43da      	mvns	r2, r3
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	400a      	ands	r2, r1
 80014d0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	b29b      	uxth	r3, r3
 80014de:	4618      	mov	r0, r3
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	685a      	ldr	r2, [r3, #4]
 80014e4:	4613      	mov	r3, r2
 80014e6:	009b      	lsls	r3, r3, #2
 80014e8:	4413      	add	r3, r2
 80014ea:	3b23      	subs	r3, #35	; 0x23
 80014ec:	fa00 f203 	lsl.w	r2, r0, r3
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	430a      	orrs	r2, r1
 80014f6:	631a      	str	r2, [r3, #48]	; 0x30
 80014f8:	e023      	b.n	8001542 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	685a      	ldr	r2, [r3, #4]
 8001504:	4613      	mov	r3, r2
 8001506:	009b      	lsls	r3, r3, #2
 8001508:	4413      	add	r3, r2
 800150a:	3b41      	subs	r3, #65	; 0x41
 800150c:	221f      	movs	r2, #31
 800150e:	fa02 f303 	lsl.w	r3, r2, r3
 8001512:	43da      	mvns	r2, r3
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	400a      	ands	r2, r1
 800151a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	b29b      	uxth	r3, r3
 8001528:	4618      	mov	r0, r3
 800152a:	683b      	ldr	r3, [r7, #0]
 800152c:	685a      	ldr	r2, [r3, #4]
 800152e:	4613      	mov	r3, r2
 8001530:	009b      	lsls	r3, r3, #2
 8001532:	4413      	add	r3, r2
 8001534:	3b41      	subs	r3, #65	; 0x41
 8001536:	fa00 f203 	lsl.w	r2, r0, r3
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	430a      	orrs	r2, r1
 8001540:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001542:	4b22      	ldr	r3, [pc, #136]	; (80015cc <HAL_ADC_ConfigChannel+0x234>)
 8001544:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	4a21      	ldr	r2, [pc, #132]	; (80015d0 <HAL_ADC_ConfigChannel+0x238>)
 800154c:	4293      	cmp	r3, r2
 800154e:	d109      	bne.n	8001564 <HAL_ADC_ConfigChannel+0x1cc>
 8001550:	683b      	ldr	r3, [r7, #0]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	2b12      	cmp	r3, #18
 8001556:	d105      	bne.n	8001564 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	685b      	ldr	r3, [r3, #4]
 800155c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	4a19      	ldr	r2, [pc, #100]	; (80015d0 <HAL_ADC_ConfigChannel+0x238>)
 800156a:	4293      	cmp	r3, r2
 800156c:	d123      	bne.n	80015b6 <HAL_ADC_ConfigChannel+0x21e>
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	2b10      	cmp	r3, #16
 8001574:	d003      	beq.n	800157e <HAL_ADC_ConfigChannel+0x1e6>
 8001576:	683b      	ldr	r3, [r7, #0]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	2b11      	cmp	r3, #17
 800157c:	d11b      	bne.n	80015b6 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	685b      	ldr	r3, [r3, #4]
 8001582:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800158a:	683b      	ldr	r3, [r7, #0]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	2b10      	cmp	r3, #16
 8001590:	d111      	bne.n	80015b6 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001592:	4b10      	ldr	r3, [pc, #64]	; (80015d4 <HAL_ADC_ConfigChannel+0x23c>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	4a10      	ldr	r2, [pc, #64]	; (80015d8 <HAL_ADC_ConfigChannel+0x240>)
 8001598:	fba2 2303 	umull	r2, r3, r2, r3
 800159c:	0c9a      	lsrs	r2, r3, #18
 800159e:	4613      	mov	r3, r2
 80015a0:	009b      	lsls	r3, r3, #2
 80015a2:	4413      	add	r3, r2
 80015a4:	005b      	lsls	r3, r3, #1
 80015a6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80015a8:	e002      	b.n	80015b0 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80015aa:	68bb      	ldr	r3, [r7, #8]
 80015ac:	3b01      	subs	r3, #1
 80015ae:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80015b0:	68bb      	ldr	r3, [r7, #8]
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d1f9      	bne.n	80015aa <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	2200      	movs	r2, #0
 80015ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80015be:	2300      	movs	r3, #0
}
 80015c0:	4618      	mov	r0, r3
 80015c2:	3714      	adds	r7, #20
 80015c4:	46bd      	mov	sp, r7
 80015c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ca:	4770      	bx	lr
 80015cc:	40012300 	.word	0x40012300
 80015d0:	40012000 	.word	0x40012000
 80015d4:	20000080 	.word	0x20000080
 80015d8:	431bde83 	.word	0x431bde83

080015dc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80015dc:	b480      	push	{r7}
 80015de:	b085      	sub	sp, #20
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80015e4:	4b79      	ldr	r3, [pc, #484]	; (80017cc <ADC_Init+0x1f0>)
 80015e6:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	685b      	ldr	r3, [r3, #4]
 80015ec:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	685a      	ldr	r2, [r3, #4]
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	685b      	ldr	r3, [r3, #4]
 80015fc:	431a      	orrs	r2, r3
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	685a      	ldr	r2, [r3, #4]
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001610:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	6859      	ldr	r1, [r3, #4]
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	691b      	ldr	r3, [r3, #16]
 800161c:	021a      	lsls	r2, r3, #8
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	430a      	orrs	r2, r1
 8001624:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	685a      	ldr	r2, [r3, #4]
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001634:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	6859      	ldr	r1, [r3, #4]
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	689a      	ldr	r2, [r3, #8]
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	430a      	orrs	r2, r1
 8001646:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	689a      	ldr	r2, [r3, #8]
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001656:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	6899      	ldr	r1, [r3, #8]
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	68da      	ldr	r2, [r3, #12]
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	430a      	orrs	r2, r1
 8001668:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800166e:	4a58      	ldr	r2, [pc, #352]	; (80017d0 <ADC_Init+0x1f4>)
 8001670:	4293      	cmp	r3, r2
 8001672:	d022      	beq.n	80016ba <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	689a      	ldr	r2, [r3, #8]
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001682:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	6899      	ldr	r1, [r3, #8]
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	430a      	orrs	r2, r1
 8001694:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	689a      	ldr	r2, [r3, #8]
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80016a4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	6899      	ldr	r1, [r3, #8]
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	430a      	orrs	r2, r1
 80016b6:	609a      	str	r2, [r3, #8]
 80016b8:	e00f      	b.n	80016da <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	689a      	ldr	r2, [r3, #8]
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80016c8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	689a      	ldr	r2, [r3, #8]
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80016d8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	689a      	ldr	r2, [r3, #8]
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f022 0202 	bic.w	r2, r2, #2
 80016e8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	6899      	ldr	r1, [r3, #8]
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	7e1b      	ldrb	r3, [r3, #24]
 80016f4:	005a      	lsls	r2, r3, #1
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	430a      	orrs	r2, r1
 80016fc:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001704:	2b00      	cmp	r3, #0
 8001706:	d01b      	beq.n	8001740 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	685a      	ldr	r2, [r3, #4]
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001716:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	685a      	ldr	r2, [r3, #4]
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001726:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	6859      	ldr	r1, [r3, #4]
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001732:	3b01      	subs	r3, #1
 8001734:	035a      	lsls	r2, r3, #13
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	430a      	orrs	r2, r1
 800173c:	605a      	str	r2, [r3, #4]
 800173e:	e007      	b.n	8001750 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	685a      	ldr	r2, [r3, #4]
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800174e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800175e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	69db      	ldr	r3, [r3, #28]
 800176a:	3b01      	subs	r3, #1
 800176c:	051a      	lsls	r2, r3, #20
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	430a      	orrs	r2, r1
 8001774:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	689a      	ldr	r2, [r3, #8]
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001784:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	6899      	ldr	r1, [r3, #8]
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001792:	025a      	lsls	r2, r3, #9
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	430a      	orrs	r2, r1
 800179a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	689a      	ldr	r2, [r3, #8]
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80017aa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	6899      	ldr	r1, [r3, #8]
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	695b      	ldr	r3, [r3, #20]
 80017b6:	029a      	lsls	r2, r3, #10
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	430a      	orrs	r2, r1
 80017be:	609a      	str	r2, [r3, #8]
}
 80017c0:	bf00      	nop
 80017c2:	3714      	adds	r7, #20
 80017c4:	46bd      	mov	sp, r7
 80017c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ca:	4770      	bx	lr
 80017cc:	40012300 	.word	0x40012300
 80017d0:	0f000001 	.word	0x0f000001

080017d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017d4:	b480      	push	{r7}
 80017d6:	b085      	sub	sp, #20
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	f003 0307 	and.w	r3, r3, #7
 80017e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017e4:	4b0c      	ldr	r3, [pc, #48]	; (8001818 <__NVIC_SetPriorityGrouping+0x44>)
 80017e6:	68db      	ldr	r3, [r3, #12]
 80017e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017ea:	68ba      	ldr	r2, [r7, #8]
 80017ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017f0:	4013      	ands	r3, r2
 80017f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017f8:	68bb      	ldr	r3, [r7, #8]
 80017fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017fc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001800:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001804:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001806:	4a04      	ldr	r2, [pc, #16]	; (8001818 <__NVIC_SetPriorityGrouping+0x44>)
 8001808:	68bb      	ldr	r3, [r7, #8]
 800180a:	60d3      	str	r3, [r2, #12]
}
 800180c:	bf00      	nop
 800180e:	3714      	adds	r7, #20
 8001810:	46bd      	mov	sp, r7
 8001812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001816:	4770      	bx	lr
 8001818:	e000ed00 	.word	0xe000ed00

0800181c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800181c:	b480      	push	{r7}
 800181e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001820:	4b04      	ldr	r3, [pc, #16]	; (8001834 <__NVIC_GetPriorityGrouping+0x18>)
 8001822:	68db      	ldr	r3, [r3, #12]
 8001824:	0a1b      	lsrs	r3, r3, #8
 8001826:	f003 0307 	and.w	r3, r3, #7
}
 800182a:	4618      	mov	r0, r3
 800182c:	46bd      	mov	sp, r7
 800182e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001832:	4770      	bx	lr
 8001834:	e000ed00 	.word	0xe000ed00

08001838 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001838:	b480      	push	{r7}
 800183a:	b083      	sub	sp, #12
 800183c:	af00      	add	r7, sp, #0
 800183e:	4603      	mov	r3, r0
 8001840:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001842:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001846:	2b00      	cmp	r3, #0
 8001848:	db0b      	blt.n	8001862 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800184a:	79fb      	ldrb	r3, [r7, #7]
 800184c:	f003 021f 	and.w	r2, r3, #31
 8001850:	4907      	ldr	r1, [pc, #28]	; (8001870 <__NVIC_EnableIRQ+0x38>)
 8001852:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001856:	095b      	lsrs	r3, r3, #5
 8001858:	2001      	movs	r0, #1
 800185a:	fa00 f202 	lsl.w	r2, r0, r2
 800185e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001862:	bf00      	nop
 8001864:	370c      	adds	r7, #12
 8001866:	46bd      	mov	sp, r7
 8001868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186c:	4770      	bx	lr
 800186e:	bf00      	nop
 8001870:	e000e100 	.word	0xe000e100

08001874 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001874:	b480      	push	{r7}
 8001876:	b083      	sub	sp, #12
 8001878:	af00      	add	r7, sp, #0
 800187a:	4603      	mov	r3, r0
 800187c:	6039      	str	r1, [r7, #0]
 800187e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001880:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001884:	2b00      	cmp	r3, #0
 8001886:	db0a      	blt.n	800189e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	b2da      	uxtb	r2, r3
 800188c:	490c      	ldr	r1, [pc, #48]	; (80018c0 <__NVIC_SetPriority+0x4c>)
 800188e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001892:	0112      	lsls	r2, r2, #4
 8001894:	b2d2      	uxtb	r2, r2
 8001896:	440b      	add	r3, r1
 8001898:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800189c:	e00a      	b.n	80018b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	b2da      	uxtb	r2, r3
 80018a2:	4908      	ldr	r1, [pc, #32]	; (80018c4 <__NVIC_SetPriority+0x50>)
 80018a4:	79fb      	ldrb	r3, [r7, #7]
 80018a6:	f003 030f 	and.w	r3, r3, #15
 80018aa:	3b04      	subs	r3, #4
 80018ac:	0112      	lsls	r2, r2, #4
 80018ae:	b2d2      	uxtb	r2, r2
 80018b0:	440b      	add	r3, r1
 80018b2:	761a      	strb	r2, [r3, #24]
}
 80018b4:	bf00      	nop
 80018b6:	370c      	adds	r7, #12
 80018b8:	46bd      	mov	sp, r7
 80018ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018be:	4770      	bx	lr
 80018c0:	e000e100 	.word	0xe000e100
 80018c4:	e000ed00 	.word	0xe000ed00

080018c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018c8:	b480      	push	{r7}
 80018ca:	b089      	sub	sp, #36	; 0x24
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	60f8      	str	r0, [r7, #12]
 80018d0:	60b9      	str	r1, [r7, #8]
 80018d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	f003 0307 	and.w	r3, r3, #7
 80018da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018dc:	69fb      	ldr	r3, [r7, #28]
 80018de:	f1c3 0307 	rsb	r3, r3, #7
 80018e2:	2b04      	cmp	r3, #4
 80018e4:	bf28      	it	cs
 80018e6:	2304      	movcs	r3, #4
 80018e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018ea:	69fb      	ldr	r3, [r7, #28]
 80018ec:	3304      	adds	r3, #4
 80018ee:	2b06      	cmp	r3, #6
 80018f0:	d902      	bls.n	80018f8 <NVIC_EncodePriority+0x30>
 80018f2:	69fb      	ldr	r3, [r7, #28]
 80018f4:	3b03      	subs	r3, #3
 80018f6:	e000      	b.n	80018fa <NVIC_EncodePriority+0x32>
 80018f8:	2300      	movs	r3, #0
 80018fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018fc:	f04f 32ff 	mov.w	r2, #4294967295
 8001900:	69bb      	ldr	r3, [r7, #24]
 8001902:	fa02 f303 	lsl.w	r3, r2, r3
 8001906:	43da      	mvns	r2, r3
 8001908:	68bb      	ldr	r3, [r7, #8]
 800190a:	401a      	ands	r2, r3
 800190c:	697b      	ldr	r3, [r7, #20]
 800190e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001910:	f04f 31ff 	mov.w	r1, #4294967295
 8001914:	697b      	ldr	r3, [r7, #20]
 8001916:	fa01 f303 	lsl.w	r3, r1, r3
 800191a:	43d9      	mvns	r1, r3
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001920:	4313      	orrs	r3, r2
         );
}
 8001922:	4618      	mov	r0, r3
 8001924:	3724      	adds	r7, #36	; 0x24
 8001926:	46bd      	mov	sp, r7
 8001928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192c:	4770      	bx	lr
	...

08001930 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b082      	sub	sp, #8
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	3b01      	subs	r3, #1
 800193c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001940:	d301      	bcc.n	8001946 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001942:	2301      	movs	r3, #1
 8001944:	e00f      	b.n	8001966 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001946:	4a0a      	ldr	r2, [pc, #40]	; (8001970 <SysTick_Config+0x40>)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	3b01      	subs	r3, #1
 800194c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800194e:	210f      	movs	r1, #15
 8001950:	f04f 30ff 	mov.w	r0, #4294967295
 8001954:	f7ff ff8e 	bl	8001874 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001958:	4b05      	ldr	r3, [pc, #20]	; (8001970 <SysTick_Config+0x40>)
 800195a:	2200      	movs	r2, #0
 800195c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800195e:	4b04      	ldr	r3, [pc, #16]	; (8001970 <SysTick_Config+0x40>)
 8001960:	2207      	movs	r2, #7
 8001962:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001964:	2300      	movs	r3, #0
}
 8001966:	4618      	mov	r0, r3
 8001968:	3708      	adds	r7, #8
 800196a:	46bd      	mov	sp, r7
 800196c:	bd80      	pop	{r7, pc}
 800196e:	bf00      	nop
 8001970:	e000e010 	.word	0xe000e010

08001974 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b082      	sub	sp, #8
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800197c:	6878      	ldr	r0, [r7, #4]
 800197e:	f7ff ff29 	bl	80017d4 <__NVIC_SetPriorityGrouping>
}
 8001982:	bf00      	nop
 8001984:	3708      	adds	r7, #8
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}

0800198a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800198a:	b580      	push	{r7, lr}
 800198c:	b086      	sub	sp, #24
 800198e:	af00      	add	r7, sp, #0
 8001990:	4603      	mov	r3, r0
 8001992:	60b9      	str	r1, [r7, #8]
 8001994:	607a      	str	r2, [r7, #4]
 8001996:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001998:	2300      	movs	r3, #0
 800199a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800199c:	f7ff ff3e 	bl	800181c <__NVIC_GetPriorityGrouping>
 80019a0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019a2:	687a      	ldr	r2, [r7, #4]
 80019a4:	68b9      	ldr	r1, [r7, #8]
 80019a6:	6978      	ldr	r0, [r7, #20]
 80019a8:	f7ff ff8e 	bl	80018c8 <NVIC_EncodePriority>
 80019ac:	4602      	mov	r2, r0
 80019ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019b2:	4611      	mov	r1, r2
 80019b4:	4618      	mov	r0, r3
 80019b6:	f7ff ff5d 	bl	8001874 <__NVIC_SetPriority>
}
 80019ba:	bf00      	nop
 80019bc:	3718      	adds	r7, #24
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd80      	pop	{r7, pc}

080019c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019c2:	b580      	push	{r7, lr}
 80019c4:	b082      	sub	sp, #8
 80019c6:	af00      	add	r7, sp, #0
 80019c8:	4603      	mov	r3, r0
 80019ca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019d0:	4618      	mov	r0, r3
 80019d2:	f7ff ff31 	bl	8001838 <__NVIC_EnableIRQ>
}
 80019d6:	bf00      	nop
 80019d8:	3708      	adds	r7, #8
 80019da:	46bd      	mov	sp, r7
 80019dc:	bd80      	pop	{r7, pc}

080019de <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019de:	b580      	push	{r7, lr}
 80019e0:	b082      	sub	sp, #8
 80019e2:	af00      	add	r7, sp, #0
 80019e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019e6:	6878      	ldr	r0, [r7, #4]
 80019e8:	f7ff ffa2 	bl	8001930 <SysTick_Config>
 80019ec:	4603      	mov	r3, r0
}
 80019ee:	4618      	mov	r0, r3
 80019f0:	3708      	adds	r7, #8
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}
	...

080019f8 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b086      	sub	sp, #24
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	60f8      	str	r0, [r7, #12]
 8001a00:	60b9      	str	r1, [r7, #8]
 8001a02:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001a06:	2301      	movs	r3, #1
 8001a08:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001a0a:	4b23      	ldr	r3, [pc, #140]	; (8001a98 <HAL_FLASH_Program+0xa0>)
 8001a0c:	7e1b      	ldrb	r3, [r3, #24]
 8001a0e:	2b01      	cmp	r3, #1
 8001a10:	d101      	bne.n	8001a16 <HAL_FLASH_Program+0x1e>
 8001a12:	2302      	movs	r3, #2
 8001a14:	e03b      	b.n	8001a8e <HAL_FLASH_Program+0x96>
 8001a16:	4b20      	ldr	r3, [pc, #128]	; (8001a98 <HAL_FLASH_Program+0xa0>)
 8001a18:	2201      	movs	r2, #1
 8001a1a:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001a1c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001a20:	f000 f870 	bl	8001b04 <FLASH_WaitForLastOperation>
 8001a24:	4603      	mov	r3, r0
 8001a26:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8001a28:	7dfb      	ldrb	r3, [r7, #23]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d12b      	bne.n	8001a86 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d105      	bne.n	8001a40 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8001a34:	783b      	ldrb	r3, [r7, #0]
 8001a36:	4619      	mov	r1, r3
 8001a38:	68b8      	ldr	r0, [r7, #8]
 8001a3a:	f000 f917 	bl	8001c6c <FLASH_Program_Byte>
 8001a3e:	e016      	b.n	8001a6e <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	2b01      	cmp	r3, #1
 8001a44:	d105      	bne.n	8001a52 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8001a46:	883b      	ldrh	r3, [r7, #0]
 8001a48:	4619      	mov	r1, r3
 8001a4a:	68b8      	ldr	r0, [r7, #8]
 8001a4c:	f000 f8ea 	bl	8001c24 <FLASH_Program_HalfWord>
 8001a50:	e00d      	b.n	8001a6e <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	2b02      	cmp	r3, #2
 8001a56:	d105      	bne.n	8001a64 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	4619      	mov	r1, r3
 8001a5c:	68b8      	ldr	r0, [r7, #8]
 8001a5e:	f000 f8bf 	bl	8001be0 <FLASH_Program_Word>
 8001a62:	e004      	b.n	8001a6e <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8001a64:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001a68:	68b8      	ldr	r0, [r7, #8]
 8001a6a:	f000 f88b 	bl	8001b84 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001a6e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001a72:	f000 f847 	bl	8001b04 <FLASH_WaitForLastOperation>
 8001a76:	4603      	mov	r3, r0
 8001a78:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8001a7a:	4b08      	ldr	r3, [pc, #32]	; (8001a9c <HAL_FLASH_Program+0xa4>)
 8001a7c:	691b      	ldr	r3, [r3, #16]
 8001a7e:	4a07      	ldr	r2, [pc, #28]	; (8001a9c <HAL_FLASH_Program+0xa4>)
 8001a80:	f023 0301 	bic.w	r3, r3, #1
 8001a84:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001a86:	4b04      	ldr	r3, [pc, #16]	; (8001a98 <HAL_FLASH_Program+0xa0>)
 8001a88:	2200      	movs	r2, #0
 8001a8a:	761a      	strb	r2, [r3, #24]
  
  return status;
 8001a8c:	7dfb      	ldrb	r3, [r7, #23]
}
 8001a8e:	4618      	mov	r0, r3
 8001a90:	3718      	adds	r7, #24
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}
 8001a96:	bf00      	nop
 8001a98:	20000124 	.word	0x20000124
 8001a9c:	40023c00 	.word	0x40023c00

08001aa0 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	b083      	sub	sp, #12
 8001aa4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001aaa:	4b0b      	ldr	r3, [pc, #44]	; (8001ad8 <HAL_FLASH_Unlock+0x38>)
 8001aac:	691b      	ldr	r3, [r3, #16]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	da0b      	bge.n	8001aca <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8001ab2:	4b09      	ldr	r3, [pc, #36]	; (8001ad8 <HAL_FLASH_Unlock+0x38>)
 8001ab4:	4a09      	ldr	r2, [pc, #36]	; (8001adc <HAL_FLASH_Unlock+0x3c>)
 8001ab6:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8001ab8:	4b07      	ldr	r3, [pc, #28]	; (8001ad8 <HAL_FLASH_Unlock+0x38>)
 8001aba:	4a09      	ldr	r2, [pc, #36]	; (8001ae0 <HAL_FLASH_Unlock+0x40>)
 8001abc:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001abe:	4b06      	ldr	r3, [pc, #24]	; (8001ad8 <HAL_FLASH_Unlock+0x38>)
 8001ac0:	691b      	ldr	r3, [r3, #16]
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	da01      	bge.n	8001aca <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8001aca:	79fb      	ldrb	r3, [r7, #7]
}
 8001acc:	4618      	mov	r0, r3
 8001ace:	370c      	adds	r7, #12
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad6:	4770      	bx	lr
 8001ad8:	40023c00 	.word	0x40023c00
 8001adc:	45670123 	.word	0x45670123
 8001ae0:	cdef89ab 	.word	0xcdef89ab

08001ae4 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8001ae8:	4b05      	ldr	r3, [pc, #20]	; (8001b00 <HAL_FLASH_Lock+0x1c>)
 8001aea:	691b      	ldr	r3, [r3, #16]
 8001aec:	4a04      	ldr	r2, [pc, #16]	; (8001b00 <HAL_FLASH_Lock+0x1c>)
 8001aee:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001af2:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8001af4:	2300      	movs	r3, #0
}
 8001af6:	4618      	mov	r0, r3
 8001af8:	46bd      	mov	sp, r7
 8001afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afe:	4770      	bx	lr
 8001b00:	40023c00 	.word	0x40023c00

08001b04 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b084      	sub	sp, #16
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001b10:	4b1a      	ldr	r3, [pc, #104]	; (8001b7c <FLASH_WaitForLastOperation+0x78>)
 8001b12:	2200      	movs	r2, #0
 8001b14:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8001b16:	f7ff fa75 	bl	8001004 <HAL_GetTick>
 8001b1a:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8001b1c:	e010      	b.n	8001b40 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b24:	d00c      	beq.n	8001b40 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d007      	beq.n	8001b3c <FLASH_WaitForLastOperation+0x38>
 8001b2c:	f7ff fa6a 	bl	8001004 <HAL_GetTick>
 8001b30:	4602      	mov	r2, r0
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	1ad3      	subs	r3, r2, r3
 8001b36:	687a      	ldr	r2, [r7, #4]
 8001b38:	429a      	cmp	r2, r3
 8001b3a:	d201      	bcs.n	8001b40 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8001b3c:	2303      	movs	r3, #3
 8001b3e:	e019      	b.n	8001b74 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8001b40:	4b0f      	ldr	r3, [pc, #60]	; (8001b80 <FLASH_WaitForLastOperation+0x7c>)
 8001b42:	68db      	ldr	r3, [r3, #12]
 8001b44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d1e8      	bne.n	8001b1e <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8001b4c:	4b0c      	ldr	r3, [pc, #48]	; (8001b80 <FLASH_WaitForLastOperation+0x7c>)
 8001b4e:	68db      	ldr	r3, [r3, #12]
 8001b50:	f003 0301 	and.w	r3, r3, #1
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d002      	beq.n	8001b5e <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8001b58:	4b09      	ldr	r3, [pc, #36]	; (8001b80 <FLASH_WaitForLastOperation+0x7c>)
 8001b5a:	2201      	movs	r2, #1
 8001b5c:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8001b5e:	4b08      	ldr	r3, [pc, #32]	; (8001b80 <FLASH_WaitForLastOperation+0x7c>)
 8001b60:	68db      	ldr	r3, [r3, #12]
 8001b62:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d003      	beq.n	8001b72 <FLASH_WaitForLastOperation+0x6e>
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8001b6a:	f000 f8a1 	bl	8001cb0 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8001b6e:	2301      	movs	r3, #1
 8001b70:	e000      	b.n	8001b74 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8001b72:	2300      	movs	r3, #0
  
}  
 8001b74:	4618      	mov	r0, r3
 8001b76:	3710      	adds	r7, #16
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	bd80      	pop	{r7, pc}
 8001b7c:	20000124 	.word	0x20000124
 8001b80:	40023c00 	.word	0x40023c00

08001b84 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8001b84:	b490      	push	{r4, r7}
 8001b86:	b084      	sub	sp, #16
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	60f8      	str	r0, [r7, #12]
 8001b8c:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001b90:	4b12      	ldr	r3, [pc, #72]	; (8001bdc <FLASH_Program_DoubleWord+0x58>)
 8001b92:	691b      	ldr	r3, [r3, #16]
 8001b94:	4a11      	ldr	r2, [pc, #68]	; (8001bdc <FLASH_Program_DoubleWord+0x58>)
 8001b96:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001b9a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8001b9c:	4b0f      	ldr	r3, [pc, #60]	; (8001bdc <FLASH_Program_DoubleWord+0x58>)
 8001b9e:	691b      	ldr	r3, [r3, #16]
 8001ba0:	4a0e      	ldr	r2, [pc, #56]	; (8001bdc <FLASH_Program_DoubleWord+0x58>)
 8001ba2:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8001ba6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001ba8:	4b0c      	ldr	r3, [pc, #48]	; (8001bdc <FLASH_Program_DoubleWord+0x58>)
 8001baa:	691b      	ldr	r3, [r3, #16]
 8001bac:	4a0b      	ldr	r2, [pc, #44]	; (8001bdc <FLASH_Program_DoubleWord+0x58>)
 8001bae:	f043 0301 	orr.w	r3, r3, #1
 8001bb2:	6113      	str	r3, [r2, #16]

  /* Program the double-word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	683a      	ldr	r2, [r7, #0]
 8001bb8:	601a      	str	r2, [r3, #0]
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8001bba:	e9d7 1200 	ldrd	r1, r2, [r7]
 8001bbe:	f04f 0300 	mov.w	r3, #0
 8001bc2:	f04f 0400 	mov.w	r4, #0
 8001bc6:	0013      	movs	r3, r2
 8001bc8:	2400      	movs	r4, #0
 8001bca:	68fa      	ldr	r2, [r7, #12]
 8001bcc:	3204      	adds	r2, #4
 8001bce:	6013      	str	r3, [r2, #0]
}
 8001bd0:	bf00      	nop
 8001bd2:	3710      	adds	r7, #16
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bc90      	pop	{r4, r7}
 8001bd8:	4770      	bx	lr
 8001bda:	bf00      	nop
 8001bdc:	40023c00 	.word	0x40023c00

08001be0 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8001be0:	b480      	push	{r7}
 8001be2:	b083      	sub	sp, #12
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
 8001be8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001bea:	4b0d      	ldr	r3, [pc, #52]	; (8001c20 <FLASH_Program_Word+0x40>)
 8001bec:	691b      	ldr	r3, [r3, #16]
 8001bee:	4a0c      	ldr	r2, [pc, #48]	; (8001c20 <FLASH_Program_Word+0x40>)
 8001bf0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001bf4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8001bf6:	4b0a      	ldr	r3, [pc, #40]	; (8001c20 <FLASH_Program_Word+0x40>)
 8001bf8:	691b      	ldr	r3, [r3, #16]
 8001bfa:	4a09      	ldr	r2, [pc, #36]	; (8001c20 <FLASH_Program_Word+0x40>)
 8001bfc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c00:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001c02:	4b07      	ldr	r3, [pc, #28]	; (8001c20 <FLASH_Program_Word+0x40>)
 8001c04:	691b      	ldr	r3, [r3, #16]
 8001c06:	4a06      	ldr	r2, [pc, #24]	; (8001c20 <FLASH_Program_Word+0x40>)
 8001c08:	f043 0301 	orr.w	r3, r3, #1
 8001c0c:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	683a      	ldr	r2, [r7, #0]
 8001c12:	601a      	str	r2, [r3, #0]
}
 8001c14:	bf00      	nop
 8001c16:	370c      	adds	r7, #12
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1e:	4770      	bx	lr
 8001c20:	40023c00 	.word	0x40023c00

08001c24 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8001c24:	b480      	push	{r7}
 8001c26:	b083      	sub	sp, #12
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
 8001c2c:	460b      	mov	r3, r1
 8001c2e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001c30:	4b0d      	ldr	r3, [pc, #52]	; (8001c68 <FLASH_Program_HalfWord+0x44>)
 8001c32:	691b      	ldr	r3, [r3, #16]
 8001c34:	4a0c      	ldr	r2, [pc, #48]	; (8001c68 <FLASH_Program_HalfWord+0x44>)
 8001c36:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001c3a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8001c3c:	4b0a      	ldr	r3, [pc, #40]	; (8001c68 <FLASH_Program_HalfWord+0x44>)
 8001c3e:	691b      	ldr	r3, [r3, #16]
 8001c40:	4a09      	ldr	r2, [pc, #36]	; (8001c68 <FLASH_Program_HalfWord+0x44>)
 8001c42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c46:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001c48:	4b07      	ldr	r3, [pc, #28]	; (8001c68 <FLASH_Program_HalfWord+0x44>)
 8001c4a:	691b      	ldr	r3, [r3, #16]
 8001c4c:	4a06      	ldr	r2, [pc, #24]	; (8001c68 <FLASH_Program_HalfWord+0x44>)
 8001c4e:	f043 0301 	orr.w	r3, r3, #1
 8001c52:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	887a      	ldrh	r2, [r7, #2]
 8001c58:	801a      	strh	r2, [r3, #0]
}
 8001c5a:	bf00      	nop
 8001c5c:	370c      	adds	r7, #12
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c64:	4770      	bx	lr
 8001c66:	bf00      	nop
 8001c68:	40023c00 	.word	0x40023c00

08001c6c <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	b083      	sub	sp, #12
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
 8001c74:	460b      	mov	r3, r1
 8001c76:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001c78:	4b0c      	ldr	r3, [pc, #48]	; (8001cac <FLASH_Program_Byte+0x40>)
 8001c7a:	691b      	ldr	r3, [r3, #16]
 8001c7c:	4a0b      	ldr	r2, [pc, #44]	; (8001cac <FLASH_Program_Byte+0x40>)
 8001c7e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001c82:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8001c84:	4b09      	ldr	r3, [pc, #36]	; (8001cac <FLASH_Program_Byte+0x40>)
 8001c86:	4a09      	ldr	r2, [pc, #36]	; (8001cac <FLASH_Program_Byte+0x40>)
 8001c88:	691b      	ldr	r3, [r3, #16]
 8001c8a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001c8c:	4b07      	ldr	r3, [pc, #28]	; (8001cac <FLASH_Program_Byte+0x40>)
 8001c8e:	691b      	ldr	r3, [r3, #16]
 8001c90:	4a06      	ldr	r2, [pc, #24]	; (8001cac <FLASH_Program_Byte+0x40>)
 8001c92:	f043 0301 	orr.w	r3, r3, #1
 8001c96:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	78fa      	ldrb	r2, [r7, #3]
 8001c9c:	701a      	strb	r2, [r3, #0]
}
 8001c9e:	bf00      	nop
 8001ca0:	370c      	adds	r7, #12
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca8:	4770      	bx	lr
 8001caa:	bf00      	nop
 8001cac:	40023c00 	.word	0x40023c00

08001cb0 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8001cb0:	b480      	push	{r7}
 8001cb2:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8001cb4:	4b27      	ldr	r3, [pc, #156]	; (8001d54 <FLASH_SetErrorCode+0xa4>)
 8001cb6:	68db      	ldr	r3, [r3, #12]
 8001cb8:	f003 0310 	and.w	r3, r3, #16
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d008      	beq.n	8001cd2 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8001cc0:	4b25      	ldr	r3, [pc, #148]	; (8001d58 <FLASH_SetErrorCode+0xa8>)
 8001cc2:	69db      	ldr	r3, [r3, #28]
 8001cc4:	f043 0310 	orr.w	r3, r3, #16
 8001cc8:	4a23      	ldr	r2, [pc, #140]	; (8001d58 <FLASH_SetErrorCode+0xa8>)
 8001cca:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8001ccc:	4b21      	ldr	r3, [pc, #132]	; (8001d54 <FLASH_SetErrorCode+0xa4>)
 8001cce:	2210      	movs	r2, #16
 8001cd0:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8001cd2:	4b20      	ldr	r3, [pc, #128]	; (8001d54 <FLASH_SetErrorCode+0xa4>)
 8001cd4:	68db      	ldr	r3, [r3, #12]
 8001cd6:	f003 0320 	and.w	r3, r3, #32
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d008      	beq.n	8001cf0 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8001cde:	4b1e      	ldr	r3, [pc, #120]	; (8001d58 <FLASH_SetErrorCode+0xa8>)
 8001ce0:	69db      	ldr	r3, [r3, #28]
 8001ce2:	f043 0308 	orr.w	r3, r3, #8
 8001ce6:	4a1c      	ldr	r2, [pc, #112]	; (8001d58 <FLASH_SetErrorCode+0xa8>)
 8001ce8:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8001cea:	4b1a      	ldr	r3, [pc, #104]	; (8001d54 <FLASH_SetErrorCode+0xa4>)
 8001cec:	2220      	movs	r2, #32
 8001cee:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8001cf0:	4b18      	ldr	r3, [pc, #96]	; (8001d54 <FLASH_SetErrorCode+0xa4>)
 8001cf2:	68db      	ldr	r3, [r3, #12]
 8001cf4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d008      	beq.n	8001d0e <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8001cfc:	4b16      	ldr	r3, [pc, #88]	; (8001d58 <FLASH_SetErrorCode+0xa8>)
 8001cfe:	69db      	ldr	r3, [r3, #28]
 8001d00:	f043 0304 	orr.w	r3, r3, #4
 8001d04:	4a14      	ldr	r2, [pc, #80]	; (8001d58 <FLASH_SetErrorCode+0xa8>)
 8001d06:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8001d08:	4b12      	ldr	r3, [pc, #72]	; (8001d54 <FLASH_SetErrorCode+0xa4>)
 8001d0a:	2240      	movs	r2, #64	; 0x40
 8001d0c:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8001d0e:	4b11      	ldr	r3, [pc, #68]	; (8001d54 <FLASH_SetErrorCode+0xa4>)
 8001d10:	68db      	ldr	r3, [r3, #12]
 8001d12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d008      	beq.n	8001d2c <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8001d1a:	4b0f      	ldr	r3, [pc, #60]	; (8001d58 <FLASH_SetErrorCode+0xa8>)
 8001d1c:	69db      	ldr	r3, [r3, #28]
 8001d1e:	f043 0302 	orr.w	r3, r3, #2
 8001d22:	4a0d      	ldr	r2, [pc, #52]	; (8001d58 <FLASH_SetErrorCode+0xa8>)
 8001d24:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8001d26:	4b0b      	ldr	r3, [pc, #44]	; (8001d54 <FLASH_SetErrorCode+0xa4>)
 8001d28:	2280      	movs	r2, #128	; 0x80
 8001d2a:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8001d2c:	4b09      	ldr	r3, [pc, #36]	; (8001d54 <FLASH_SetErrorCode+0xa4>)
 8001d2e:	68db      	ldr	r3, [r3, #12]
 8001d30:	f003 0302 	and.w	r3, r3, #2
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d008      	beq.n	8001d4a <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8001d38:	4b07      	ldr	r3, [pc, #28]	; (8001d58 <FLASH_SetErrorCode+0xa8>)
 8001d3a:	69db      	ldr	r3, [r3, #28]
 8001d3c:	f043 0320 	orr.w	r3, r3, #32
 8001d40:	4a05      	ldr	r2, [pc, #20]	; (8001d58 <FLASH_SetErrorCode+0xa8>)
 8001d42:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8001d44:	4b03      	ldr	r3, [pc, #12]	; (8001d54 <FLASH_SetErrorCode+0xa4>)
 8001d46:	2202      	movs	r2, #2
 8001d48:	60da      	str	r2, [r3, #12]
  }
}
 8001d4a:	bf00      	nop
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d52:	4770      	bx	lr
 8001d54:	40023c00 	.word	0x40023c00
 8001d58:	20000124 	.word	0x20000124

08001d5c <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b084      	sub	sp, #16
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
 8001d64:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001d66:	2301      	movs	r3, #1
 8001d68:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	60bb      	str	r3, [r7, #8]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001d6e:	4b31      	ldr	r3, [pc, #196]	; (8001e34 <HAL_FLASHEx_Erase+0xd8>)
 8001d70:	7e1b      	ldrb	r3, [r3, #24]
 8001d72:	2b01      	cmp	r3, #1
 8001d74:	d101      	bne.n	8001d7a <HAL_FLASHEx_Erase+0x1e>
 8001d76:	2302      	movs	r3, #2
 8001d78:	e058      	b.n	8001e2c <HAL_FLASHEx_Erase+0xd0>
 8001d7a:	4b2e      	ldr	r3, [pc, #184]	; (8001e34 <HAL_FLASHEx_Erase+0xd8>)
 8001d7c:	2201      	movs	r2, #1
 8001d7e:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001d80:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001d84:	f7ff febe 	bl	8001b04 <FLASH_WaitForLastOperation>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 8001d8c:	7bfb      	ldrb	r3, [r7, #15]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d148      	bne.n	8001e24 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	f04f 32ff 	mov.w	r2, #4294967295
 8001d98:	601a      	str	r2, [r3, #0]
    
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	2b01      	cmp	r3, #1
 8001da0:	d115      	bne.n	8001dce <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	691b      	ldr	r3, [r3, #16]
 8001da6:	b2da      	uxtb	r2, r3
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	4619      	mov	r1, r3
 8001dae:	4610      	mov	r0, r2
 8001db0:	f000 f844 	bl	8001e3c <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001db4:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001db8:	f7ff fea4 	bl	8001b04 <FLASH_WaitForLastOperation>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	73fb      	strb	r3, [r7, #15]
      
      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8001dc0:	4b1d      	ldr	r3, [pc, #116]	; (8001e38 <HAL_FLASHEx_Erase+0xdc>)
 8001dc2:	691b      	ldr	r3, [r3, #16]
 8001dc4:	4a1c      	ldr	r2, [pc, #112]	; (8001e38 <HAL_FLASHEx_Erase+0xdc>)
 8001dc6:	f023 0304 	bic.w	r3, r3, #4
 8001dca:	6113      	str	r3, [r2, #16]
 8001dcc:	e028      	b.n	8001e20 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	689b      	ldr	r3, [r3, #8]
 8001dd2:	60bb      	str	r3, [r7, #8]
 8001dd4:	e01c      	b.n	8001e10 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	691b      	ldr	r3, [r3, #16]
 8001dda:	b2db      	uxtb	r3, r3
 8001ddc:	4619      	mov	r1, r3
 8001dde:	68b8      	ldr	r0, [r7, #8]
 8001de0:	f000 f850 	bl	8001e84 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001de4:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001de8:	f7ff fe8c 	bl	8001b04 <FLASH_WaitForLastOperation>
 8001dec:	4603      	mov	r3, r0
 8001dee:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8001df0:	4b11      	ldr	r3, [pc, #68]	; (8001e38 <HAL_FLASHEx_Erase+0xdc>)
 8001df2:	691b      	ldr	r3, [r3, #16]
 8001df4:	4a10      	ldr	r2, [pc, #64]	; (8001e38 <HAL_FLASHEx_Erase+0xdc>)
 8001df6:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 8001dfa:	6113      	str	r3, [r2, #16]

        if(status != HAL_OK) 
 8001dfc:	7bfb      	ldrb	r3, [r7, #15]
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d003      	beq.n	8001e0a <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	68ba      	ldr	r2, [r7, #8]
 8001e06:	601a      	str	r2, [r3, #0]
          break;
 8001e08:	e00a      	b.n	8001e20 <HAL_FLASHEx_Erase+0xc4>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8001e0a:	68bb      	ldr	r3, [r7, #8]
 8001e0c:	3301      	adds	r3, #1
 8001e0e:	60bb      	str	r3, [r7, #8]
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	68da      	ldr	r2, [r3, #12]
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	689b      	ldr	r3, [r3, #8]
 8001e18:	4413      	add	r3, r2
 8001e1a:	68ba      	ldr	r2, [r7, #8]
 8001e1c:	429a      	cmp	r2, r3
 8001e1e:	d3da      	bcc.n	8001dd6 <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();    
 8001e20:	f000 f878 	bl	8001f14 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001e24:	4b03      	ldr	r3, [pc, #12]	; (8001e34 <HAL_FLASHEx_Erase+0xd8>)
 8001e26:	2200      	movs	r2, #0
 8001e28:	761a      	strb	r2, [r3, #24]

  return status;
 8001e2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	3710      	adds	r7, #16
 8001e30:	46bd      	mov	sp, r7
 8001e32:	bd80      	pop	{r7, pc}
 8001e34:	20000124 	.word	0x20000124
 8001e38:	40023c00 	.word	0x40023c00

08001e3c <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	b083      	sub	sp, #12
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	4603      	mov	r3, r0
 8001e44:	6039      	str	r1, [r7, #0]
 8001e46:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));
  
  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001e48:	4b0d      	ldr	r3, [pc, #52]	; (8001e80 <FLASH_MassErase+0x44>)
 8001e4a:	691b      	ldr	r3, [r3, #16]
 8001e4c:	4a0c      	ldr	r2, [pc, #48]	; (8001e80 <FLASH_MassErase+0x44>)
 8001e4e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001e52:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 8001e54:	4b0a      	ldr	r3, [pc, #40]	; (8001e80 <FLASH_MassErase+0x44>)
 8001e56:	691b      	ldr	r3, [r3, #16]
 8001e58:	4a09      	ldr	r2, [pc, #36]	; (8001e80 <FLASH_MassErase+0x44>)
 8001e5a:	f043 0304 	orr.w	r3, r3, #4
 8001e5e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8U);
 8001e60:	4b07      	ldr	r3, [pc, #28]	; (8001e80 <FLASH_MassErase+0x44>)
 8001e62:	691a      	ldr	r2, [r3, #16]
 8001e64:	79fb      	ldrb	r3, [r7, #7]
 8001e66:	021b      	lsls	r3, r3, #8
 8001e68:	4313      	orrs	r3, r2
 8001e6a:	4a05      	ldr	r2, [pc, #20]	; (8001e80 <FLASH_MassErase+0x44>)
 8001e6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e70:	6113      	str	r3, [r2, #16]
}
 8001e72:	bf00      	nop
 8001e74:	370c      	adds	r7, #12
 8001e76:	46bd      	mov	sp, r7
 8001e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7c:	4770      	bx	lr
 8001e7e:	bf00      	nop
 8001e80:	40023c00 	.word	0x40023c00

08001e84 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8001e84:	b480      	push	{r7}
 8001e86:	b085      	sub	sp, #20
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
 8001e8c:	460b      	mov	r3, r1
 8001e8e:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8001e90:	2300      	movs	r3, #0
 8001e92:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8001e94:	78fb      	ldrb	r3, [r7, #3]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d102      	bne.n	8001ea0 <FLASH_Erase_Sector+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	60fb      	str	r3, [r7, #12]
 8001e9e:	e010      	b.n	8001ec2 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8001ea0:	78fb      	ldrb	r3, [r7, #3]
 8001ea2:	2b01      	cmp	r3, #1
 8001ea4:	d103      	bne.n	8001eae <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8001ea6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001eaa:	60fb      	str	r3, [r7, #12]
 8001eac:	e009      	b.n	8001ec2 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8001eae:	78fb      	ldrb	r3, [r7, #3]
 8001eb0:	2b02      	cmp	r3, #2
 8001eb2:	d103      	bne.n	8001ebc <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8001eb4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001eb8:	60fb      	str	r3, [r7, #12]
 8001eba:	e002      	b.n	8001ec2 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8001ebc:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001ec0:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001ec2:	4b13      	ldr	r3, [pc, #76]	; (8001f10 <FLASH_Erase_Sector+0x8c>)
 8001ec4:	691b      	ldr	r3, [r3, #16]
 8001ec6:	4a12      	ldr	r2, [pc, #72]	; (8001f10 <FLASH_Erase_Sector+0x8c>)
 8001ec8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001ecc:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8001ece:	4b10      	ldr	r3, [pc, #64]	; (8001f10 <FLASH_Erase_Sector+0x8c>)
 8001ed0:	691a      	ldr	r2, [r3, #16]
 8001ed2:	490f      	ldr	r1, [pc, #60]	; (8001f10 <FLASH_Erase_Sector+0x8c>)
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	4313      	orrs	r3, r2
 8001ed8:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8001eda:	4b0d      	ldr	r3, [pc, #52]	; (8001f10 <FLASH_Erase_Sector+0x8c>)
 8001edc:	691b      	ldr	r3, [r3, #16]
 8001ede:	4a0c      	ldr	r2, [pc, #48]	; (8001f10 <FLASH_Erase_Sector+0x8c>)
 8001ee0:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001ee4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8001ee6:	4b0a      	ldr	r3, [pc, #40]	; (8001f10 <FLASH_Erase_Sector+0x8c>)
 8001ee8:	691a      	ldr	r2, [r3, #16]
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	00db      	lsls	r3, r3, #3
 8001eee:	4313      	orrs	r3, r2
 8001ef0:	4a07      	ldr	r2, [pc, #28]	; (8001f10 <FLASH_Erase_Sector+0x8c>)
 8001ef2:	f043 0302 	orr.w	r3, r3, #2
 8001ef6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8001ef8:	4b05      	ldr	r3, [pc, #20]	; (8001f10 <FLASH_Erase_Sector+0x8c>)
 8001efa:	691b      	ldr	r3, [r3, #16]
 8001efc:	4a04      	ldr	r2, [pc, #16]	; (8001f10 <FLASH_Erase_Sector+0x8c>)
 8001efe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f02:	6113      	str	r3, [r2, #16]
}
 8001f04:	bf00      	nop
 8001f06:	3714      	adds	r7, #20
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0e:	4770      	bx	lr
 8001f10:	40023c00 	.word	0x40023c00

08001f14 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8001f14:	b480      	push	{r7}
 8001f16:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN)!= RESET)
 8001f18:	4b20      	ldr	r3, [pc, #128]	; (8001f9c <FLASH_FlushCaches+0x88>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d017      	beq.n	8001f54 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8001f24:	4b1d      	ldr	r3, [pc, #116]	; (8001f9c <FLASH_FlushCaches+0x88>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4a1c      	ldr	r2, [pc, #112]	; (8001f9c <FLASH_FlushCaches+0x88>)
 8001f2a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001f2e:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8001f30:	4b1a      	ldr	r3, [pc, #104]	; (8001f9c <FLASH_FlushCaches+0x88>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4a19      	ldr	r2, [pc, #100]	; (8001f9c <FLASH_FlushCaches+0x88>)
 8001f36:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001f3a:	6013      	str	r3, [r2, #0]
 8001f3c:	4b17      	ldr	r3, [pc, #92]	; (8001f9c <FLASH_FlushCaches+0x88>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4a16      	ldr	r2, [pc, #88]	; (8001f9c <FLASH_FlushCaches+0x88>)
 8001f42:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001f46:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001f48:	4b14      	ldr	r3, [pc, #80]	; (8001f9c <FLASH_FlushCaches+0x88>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4a13      	ldr	r2, [pc, #76]	; (8001f9c <FLASH_FlushCaches+0x88>)
 8001f4e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f52:	6013      	str	r3, [r2, #0]
  }
  
  /* Flush data cache */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8001f54:	4b11      	ldr	r3, [pc, #68]	; (8001f9c <FLASH_FlushCaches+0x88>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d017      	beq.n	8001f90 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8001f60:	4b0e      	ldr	r3, [pc, #56]	; (8001f9c <FLASH_FlushCaches+0x88>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	4a0d      	ldr	r2, [pc, #52]	; (8001f9c <FLASH_FlushCaches+0x88>)
 8001f66:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001f6a:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8001f6c:	4b0b      	ldr	r3, [pc, #44]	; (8001f9c <FLASH_FlushCaches+0x88>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	4a0a      	ldr	r2, [pc, #40]	; (8001f9c <FLASH_FlushCaches+0x88>)
 8001f72:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001f76:	6013      	str	r3, [r2, #0]
 8001f78:	4b08      	ldr	r3, [pc, #32]	; (8001f9c <FLASH_FlushCaches+0x88>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4a07      	ldr	r2, [pc, #28]	; (8001f9c <FLASH_FlushCaches+0x88>)
 8001f7e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001f82:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8001f84:	4b05      	ldr	r3, [pc, #20]	; (8001f9c <FLASH_FlushCaches+0x88>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	4a04      	ldr	r2, [pc, #16]	; (8001f9c <FLASH_FlushCaches+0x88>)
 8001f8a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001f8e:	6013      	str	r3, [r2, #0]
  }
}
 8001f90:	bf00      	nop
 8001f92:	46bd      	mov	sp, r7
 8001f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f98:	4770      	bx	lr
 8001f9a:	bf00      	nop
 8001f9c:	40023c00 	.word	0x40023c00

08001fa0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	b089      	sub	sp, #36	; 0x24
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
 8001fa8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001faa:	2300      	movs	r3, #0
 8001fac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	61fb      	str	r3, [r7, #28]
 8001fba:	e16b      	b.n	8002294 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001fbc:	2201      	movs	r2, #1
 8001fbe:	69fb      	ldr	r3, [r7, #28]
 8001fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	697a      	ldr	r2, [r7, #20]
 8001fcc:	4013      	ands	r3, r2
 8001fce:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001fd0:	693a      	ldr	r2, [r7, #16]
 8001fd2:	697b      	ldr	r3, [r7, #20]
 8001fd4:	429a      	cmp	r2, r3
 8001fd6:	f040 815a 	bne.w	800228e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	685b      	ldr	r3, [r3, #4]
 8001fde:	2b02      	cmp	r3, #2
 8001fe0:	d003      	beq.n	8001fea <HAL_GPIO_Init+0x4a>
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	685b      	ldr	r3, [r3, #4]
 8001fe6:	2b12      	cmp	r3, #18
 8001fe8:	d123      	bne.n	8002032 <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001fea:	69fb      	ldr	r3, [r7, #28]
 8001fec:	08da      	lsrs	r2, r3, #3
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	3208      	adds	r2, #8
 8001ff2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ff6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001ff8:	69fb      	ldr	r3, [r7, #28]
 8001ffa:	f003 0307 	and.w	r3, r3, #7
 8001ffe:	009b      	lsls	r3, r3, #2
 8002000:	220f      	movs	r2, #15
 8002002:	fa02 f303 	lsl.w	r3, r2, r3
 8002006:	43db      	mvns	r3, r3
 8002008:	69ba      	ldr	r2, [r7, #24]
 800200a:	4013      	ands	r3, r2
 800200c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	691a      	ldr	r2, [r3, #16]
 8002012:	69fb      	ldr	r3, [r7, #28]
 8002014:	f003 0307 	and.w	r3, r3, #7
 8002018:	009b      	lsls	r3, r3, #2
 800201a:	fa02 f303 	lsl.w	r3, r2, r3
 800201e:	69ba      	ldr	r2, [r7, #24]
 8002020:	4313      	orrs	r3, r2
 8002022:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002024:	69fb      	ldr	r3, [r7, #28]
 8002026:	08da      	lsrs	r2, r3, #3
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	3208      	adds	r2, #8
 800202c:	69b9      	ldr	r1, [r7, #24]
 800202e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002038:	69fb      	ldr	r3, [r7, #28]
 800203a:	005b      	lsls	r3, r3, #1
 800203c:	2203      	movs	r2, #3
 800203e:	fa02 f303 	lsl.w	r3, r2, r3
 8002042:	43db      	mvns	r3, r3
 8002044:	69ba      	ldr	r2, [r7, #24]
 8002046:	4013      	ands	r3, r2
 8002048:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	685b      	ldr	r3, [r3, #4]
 800204e:	f003 0203 	and.w	r2, r3, #3
 8002052:	69fb      	ldr	r3, [r7, #28]
 8002054:	005b      	lsls	r3, r3, #1
 8002056:	fa02 f303 	lsl.w	r3, r2, r3
 800205a:	69ba      	ldr	r2, [r7, #24]
 800205c:	4313      	orrs	r3, r2
 800205e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	69ba      	ldr	r2, [r7, #24]
 8002064:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	2b01      	cmp	r3, #1
 800206c:	d00b      	beq.n	8002086 <HAL_GPIO_Init+0xe6>
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	685b      	ldr	r3, [r3, #4]
 8002072:	2b02      	cmp	r3, #2
 8002074:	d007      	beq.n	8002086 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800207a:	2b11      	cmp	r3, #17
 800207c:	d003      	beq.n	8002086 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	2b12      	cmp	r3, #18
 8002084:	d130      	bne.n	80020e8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	689b      	ldr	r3, [r3, #8]
 800208a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800208c:	69fb      	ldr	r3, [r7, #28]
 800208e:	005b      	lsls	r3, r3, #1
 8002090:	2203      	movs	r2, #3
 8002092:	fa02 f303 	lsl.w	r3, r2, r3
 8002096:	43db      	mvns	r3, r3
 8002098:	69ba      	ldr	r2, [r7, #24]
 800209a:	4013      	ands	r3, r2
 800209c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	68da      	ldr	r2, [r3, #12]
 80020a2:	69fb      	ldr	r3, [r7, #28]
 80020a4:	005b      	lsls	r3, r3, #1
 80020a6:	fa02 f303 	lsl.w	r3, r2, r3
 80020aa:	69ba      	ldr	r2, [r7, #24]
 80020ac:	4313      	orrs	r3, r2
 80020ae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	69ba      	ldr	r2, [r7, #24]
 80020b4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	685b      	ldr	r3, [r3, #4]
 80020ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80020bc:	2201      	movs	r2, #1
 80020be:	69fb      	ldr	r3, [r7, #28]
 80020c0:	fa02 f303 	lsl.w	r3, r2, r3
 80020c4:	43db      	mvns	r3, r3
 80020c6:	69ba      	ldr	r2, [r7, #24]
 80020c8:	4013      	ands	r3, r2
 80020ca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	091b      	lsrs	r3, r3, #4
 80020d2:	f003 0201 	and.w	r2, r3, #1
 80020d6:	69fb      	ldr	r3, [r7, #28]
 80020d8:	fa02 f303 	lsl.w	r3, r2, r3
 80020dc:	69ba      	ldr	r2, [r7, #24]
 80020de:	4313      	orrs	r3, r2
 80020e0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	69ba      	ldr	r2, [r7, #24]
 80020e6:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	68db      	ldr	r3, [r3, #12]
 80020ec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80020ee:	69fb      	ldr	r3, [r7, #28]
 80020f0:	005b      	lsls	r3, r3, #1
 80020f2:	2203      	movs	r2, #3
 80020f4:	fa02 f303 	lsl.w	r3, r2, r3
 80020f8:	43db      	mvns	r3, r3
 80020fa:	69ba      	ldr	r2, [r7, #24]
 80020fc:	4013      	ands	r3, r2
 80020fe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	689a      	ldr	r2, [r3, #8]
 8002104:	69fb      	ldr	r3, [r7, #28]
 8002106:	005b      	lsls	r3, r3, #1
 8002108:	fa02 f303 	lsl.w	r3, r2, r3
 800210c:	69ba      	ldr	r2, [r7, #24]
 800210e:	4313      	orrs	r3, r2
 8002110:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	69ba      	ldr	r2, [r7, #24]
 8002116:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002120:	2b00      	cmp	r3, #0
 8002122:	f000 80b4 	beq.w	800228e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002126:	2300      	movs	r3, #0
 8002128:	60fb      	str	r3, [r7, #12]
 800212a:	4b5f      	ldr	r3, [pc, #380]	; (80022a8 <HAL_GPIO_Init+0x308>)
 800212c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800212e:	4a5e      	ldr	r2, [pc, #376]	; (80022a8 <HAL_GPIO_Init+0x308>)
 8002130:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002134:	6453      	str	r3, [r2, #68]	; 0x44
 8002136:	4b5c      	ldr	r3, [pc, #368]	; (80022a8 <HAL_GPIO_Init+0x308>)
 8002138:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800213a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800213e:	60fb      	str	r3, [r7, #12]
 8002140:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002142:	4a5a      	ldr	r2, [pc, #360]	; (80022ac <HAL_GPIO_Init+0x30c>)
 8002144:	69fb      	ldr	r3, [r7, #28]
 8002146:	089b      	lsrs	r3, r3, #2
 8002148:	3302      	adds	r3, #2
 800214a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800214e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002150:	69fb      	ldr	r3, [r7, #28]
 8002152:	f003 0303 	and.w	r3, r3, #3
 8002156:	009b      	lsls	r3, r3, #2
 8002158:	220f      	movs	r2, #15
 800215a:	fa02 f303 	lsl.w	r3, r2, r3
 800215e:	43db      	mvns	r3, r3
 8002160:	69ba      	ldr	r2, [r7, #24]
 8002162:	4013      	ands	r3, r2
 8002164:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	4a51      	ldr	r2, [pc, #324]	; (80022b0 <HAL_GPIO_Init+0x310>)
 800216a:	4293      	cmp	r3, r2
 800216c:	d02b      	beq.n	80021c6 <HAL_GPIO_Init+0x226>
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	4a50      	ldr	r2, [pc, #320]	; (80022b4 <HAL_GPIO_Init+0x314>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d025      	beq.n	80021c2 <HAL_GPIO_Init+0x222>
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	4a4f      	ldr	r2, [pc, #316]	; (80022b8 <HAL_GPIO_Init+0x318>)
 800217a:	4293      	cmp	r3, r2
 800217c:	d01f      	beq.n	80021be <HAL_GPIO_Init+0x21e>
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	4a4e      	ldr	r2, [pc, #312]	; (80022bc <HAL_GPIO_Init+0x31c>)
 8002182:	4293      	cmp	r3, r2
 8002184:	d019      	beq.n	80021ba <HAL_GPIO_Init+0x21a>
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	4a4d      	ldr	r2, [pc, #308]	; (80022c0 <HAL_GPIO_Init+0x320>)
 800218a:	4293      	cmp	r3, r2
 800218c:	d013      	beq.n	80021b6 <HAL_GPIO_Init+0x216>
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	4a4c      	ldr	r2, [pc, #304]	; (80022c4 <HAL_GPIO_Init+0x324>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d00d      	beq.n	80021b2 <HAL_GPIO_Init+0x212>
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	4a4b      	ldr	r2, [pc, #300]	; (80022c8 <HAL_GPIO_Init+0x328>)
 800219a:	4293      	cmp	r3, r2
 800219c:	d007      	beq.n	80021ae <HAL_GPIO_Init+0x20e>
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	4a4a      	ldr	r2, [pc, #296]	; (80022cc <HAL_GPIO_Init+0x32c>)
 80021a2:	4293      	cmp	r3, r2
 80021a4:	d101      	bne.n	80021aa <HAL_GPIO_Init+0x20a>
 80021a6:	2307      	movs	r3, #7
 80021a8:	e00e      	b.n	80021c8 <HAL_GPIO_Init+0x228>
 80021aa:	2308      	movs	r3, #8
 80021ac:	e00c      	b.n	80021c8 <HAL_GPIO_Init+0x228>
 80021ae:	2306      	movs	r3, #6
 80021b0:	e00a      	b.n	80021c8 <HAL_GPIO_Init+0x228>
 80021b2:	2305      	movs	r3, #5
 80021b4:	e008      	b.n	80021c8 <HAL_GPIO_Init+0x228>
 80021b6:	2304      	movs	r3, #4
 80021b8:	e006      	b.n	80021c8 <HAL_GPIO_Init+0x228>
 80021ba:	2303      	movs	r3, #3
 80021bc:	e004      	b.n	80021c8 <HAL_GPIO_Init+0x228>
 80021be:	2302      	movs	r3, #2
 80021c0:	e002      	b.n	80021c8 <HAL_GPIO_Init+0x228>
 80021c2:	2301      	movs	r3, #1
 80021c4:	e000      	b.n	80021c8 <HAL_GPIO_Init+0x228>
 80021c6:	2300      	movs	r3, #0
 80021c8:	69fa      	ldr	r2, [r7, #28]
 80021ca:	f002 0203 	and.w	r2, r2, #3
 80021ce:	0092      	lsls	r2, r2, #2
 80021d0:	4093      	lsls	r3, r2
 80021d2:	69ba      	ldr	r2, [r7, #24]
 80021d4:	4313      	orrs	r3, r2
 80021d6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80021d8:	4934      	ldr	r1, [pc, #208]	; (80022ac <HAL_GPIO_Init+0x30c>)
 80021da:	69fb      	ldr	r3, [r7, #28]
 80021dc:	089b      	lsrs	r3, r3, #2
 80021de:	3302      	adds	r3, #2
 80021e0:	69ba      	ldr	r2, [r7, #24]
 80021e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80021e6:	4b3a      	ldr	r3, [pc, #232]	; (80022d0 <HAL_GPIO_Init+0x330>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021ec:	693b      	ldr	r3, [r7, #16]
 80021ee:	43db      	mvns	r3, r3
 80021f0:	69ba      	ldr	r2, [r7, #24]
 80021f2:	4013      	ands	r3, r2
 80021f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	685b      	ldr	r3, [r3, #4]
 80021fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d003      	beq.n	800220a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002202:	69ba      	ldr	r2, [r7, #24]
 8002204:	693b      	ldr	r3, [r7, #16]
 8002206:	4313      	orrs	r3, r2
 8002208:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800220a:	4a31      	ldr	r2, [pc, #196]	; (80022d0 <HAL_GPIO_Init+0x330>)
 800220c:	69bb      	ldr	r3, [r7, #24]
 800220e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002210:	4b2f      	ldr	r3, [pc, #188]	; (80022d0 <HAL_GPIO_Init+0x330>)
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002216:	693b      	ldr	r3, [r7, #16]
 8002218:	43db      	mvns	r3, r3
 800221a:	69ba      	ldr	r2, [r7, #24]
 800221c:	4013      	ands	r3, r2
 800221e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	685b      	ldr	r3, [r3, #4]
 8002224:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002228:	2b00      	cmp	r3, #0
 800222a:	d003      	beq.n	8002234 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800222c:	69ba      	ldr	r2, [r7, #24]
 800222e:	693b      	ldr	r3, [r7, #16]
 8002230:	4313      	orrs	r3, r2
 8002232:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002234:	4a26      	ldr	r2, [pc, #152]	; (80022d0 <HAL_GPIO_Init+0x330>)
 8002236:	69bb      	ldr	r3, [r7, #24]
 8002238:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800223a:	4b25      	ldr	r3, [pc, #148]	; (80022d0 <HAL_GPIO_Init+0x330>)
 800223c:	689b      	ldr	r3, [r3, #8]
 800223e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002240:	693b      	ldr	r3, [r7, #16]
 8002242:	43db      	mvns	r3, r3
 8002244:	69ba      	ldr	r2, [r7, #24]
 8002246:	4013      	ands	r3, r2
 8002248:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	685b      	ldr	r3, [r3, #4]
 800224e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002252:	2b00      	cmp	r3, #0
 8002254:	d003      	beq.n	800225e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002256:	69ba      	ldr	r2, [r7, #24]
 8002258:	693b      	ldr	r3, [r7, #16]
 800225a:	4313      	orrs	r3, r2
 800225c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800225e:	4a1c      	ldr	r2, [pc, #112]	; (80022d0 <HAL_GPIO_Init+0x330>)
 8002260:	69bb      	ldr	r3, [r7, #24]
 8002262:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002264:	4b1a      	ldr	r3, [pc, #104]	; (80022d0 <HAL_GPIO_Init+0x330>)
 8002266:	68db      	ldr	r3, [r3, #12]
 8002268:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800226a:	693b      	ldr	r3, [r7, #16]
 800226c:	43db      	mvns	r3, r3
 800226e:	69ba      	ldr	r2, [r7, #24]
 8002270:	4013      	ands	r3, r2
 8002272:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	685b      	ldr	r3, [r3, #4]
 8002278:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800227c:	2b00      	cmp	r3, #0
 800227e:	d003      	beq.n	8002288 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002280:	69ba      	ldr	r2, [r7, #24]
 8002282:	693b      	ldr	r3, [r7, #16]
 8002284:	4313      	orrs	r3, r2
 8002286:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002288:	4a11      	ldr	r2, [pc, #68]	; (80022d0 <HAL_GPIO_Init+0x330>)
 800228a:	69bb      	ldr	r3, [r7, #24]
 800228c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800228e:	69fb      	ldr	r3, [r7, #28]
 8002290:	3301      	adds	r3, #1
 8002292:	61fb      	str	r3, [r7, #28]
 8002294:	69fb      	ldr	r3, [r7, #28]
 8002296:	2b0f      	cmp	r3, #15
 8002298:	f67f ae90 	bls.w	8001fbc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800229c:	bf00      	nop
 800229e:	3724      	adds	r7, #36	; 0x24
 80022a0:	46bd      	mov	sp, r7
 80022a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a6:	4770      	bx	lr
 80022a8:	40023800 	.word	0x40023800
 80022ac:	40013800 	.word	0x40013800
 80022b0:	40020000 	.word	0x40020000
 80022b4:	40020400 	.word	0x40020400
 80022b8:	40020800 	.word	0x40020800
 80022bc:	40020c00 	.word	0x40020c00
 80022c0:	40021000 	.word	0x40021000
 80022c4:	40021400 	.word	0x40021400
 80022c8:	40021800 	.word	0x40021800
 80022cc:	40021c00 	.word	0x40021c00
 80022d0:	40013c00 	.word	0x40013c00

080022d4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80022d4:	b480      	push	{r7}
 80022d6:	b085      	sub	sp, #20
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
 80022dc:	460b      	mov	r3, r1
 80022de:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	691a      	ldr	r2, [r3, #16]
 80022e4:	887b      	ldrh	r3, [r7, #2]
 80022e6:	4013      	ands	r3, r2
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d002      	beq.n	80022f2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80022ec:	2301      	movs	r3, #1
 80022ee:	73fb      	strb	r3, [r7, #15]
 80022f0:	e001      	b.n	80022f6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80022f2:	2300      	movs	r3, #0
 80022f4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80022f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80022f8:	4618      	mov	r0, r3
 80022fa:	3714      	adds	r7, #20
 80022fc:	46bd      	mov	sp, r7
 80022fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002302:	4770      	bx	lr

08002304 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002304:	b480      	push	{r7}
 8002306:	b083      	sub	sp, #12
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
 800230c:	460b      	mov	r3, r1
 800230e:	807b      	strh	r3, [r7, #2]
 8002310:	4613      	mov	r3, r2
 8002312:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002314:	787b      	ldrb	r3, [r7, #1]
 8002316:	2b00      	cmp	r3, #0
 8002318:	d003      	beq.n	8002322 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800231a:	887a      	ldrh	r2, [r7, #2]
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002320:	e003      	b.n	800232a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002322:	887b      	ldrh	r3, [r7, #2]
 8002324:	041a      	lsls	r2, r3, #16
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	619a      	str	r2, [r3, #24]
}
 800232a:	bf00      	nop
 800232c:	370c      	adds	r7, #12
 800232e:	46bd      	mov	sp, r7
 8002330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002334:	4770      	bx	lr
	...

08002338 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b086      	sub	sp, #24
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2b00      	cmp	r3, #0
 8002344:	d101      	bne.n	800234a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002346:	2301      	movs	r3, #1
 8002348:	e22d      	b.n	80027a6 <HAL_RCC_OscConfig+0x46e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f003 0301 	and.w	r3, r3, #1
 8002352:	2b00      	cmp	r3, #0
 8002354:	d075      	beq.n	8002442 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002356:	4ba3      	ldr	r3, [pc, #652]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 8002358:	689b      	ldr	r3, [r3, #8]
 800235a:	f003 030c 	and.w	r3, r3, #12
 800235e:	2b04      	cmp	r3, #4
 8002360:	d00c      	beq.n	800237c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002362:	4ba0      	ldr	r3, [pc, #640]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 8002364:	689b      	ldr	r3, [r3, #8]
 8002366:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800236a:	2b08      	cmp	r3, #8
 800236c:	d112      	bne.n	8002394 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800236e:	4b9d      	ldr	r3, [pc, #628]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002376:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800237a:	d10b      	bne.n	8002394 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800237c:	4b99      	ldr	r3, [pc, #612]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002384:	2b00      	cmp	r3, #0
 8002386:	d05b      	beq.n	8002440 <HAL_RCC_OscConfig+0x108>
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	685b      	ldr	r3, [r3, #4]
 800238c:	2b00      	cmp	r3, #0
 800238e:	d157      	bne.n	8002440 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002390:	2301      	movs	r3, #1
 8002392:	e208      	b.n	80027a6 <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800239c:	d106      	bne.n	80023ac <HAL_RCC_OscConfig+0x74>
 800239e:	4b91      	ldr	r3, [pc, #580]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	4a90      	ldr	r2, [pc, #576]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 80023a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023a8:	6013      	str	r3, [r2, #0]
 80023aa:	e01d      	b.n	80023e8 <HAL_RCC_OscConfig+0xb0>
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80023b4:	d10c      	bne.n	80023d0 <HAL_RCC_OscConfig+0x98>
 80023b6:	4b8b      	ldr	r3, [pc, #556]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	4a8a      	ldr	r2, [pc, #552]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 80023bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80023c0:	6013      	str	r3, [r2, #0]
 80023c2:	4b88      	ldr	r3, [pc, #544]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	4a87      	ldr	r2, [pc, #540]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 80023c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023cc:	6013      	str	r3, [r2, #0]
 80023ce:	e00b      	b.n	80023e8 <HAL_RCC_OscConfig+0xb0>
 80023d0:	4b84      	ldr	r3, [pc, #528]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	4a83      	ldr	r2, [pc, #524]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 80023d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023da:	6013      	str	r3, [r2, #0]
 80023dc:	4b81      	ldr	r3, [pc, #516]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	4a80      	ldr	r2, [pc, #512]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 80023e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	685b      	ldr	r3, [r3, #4]
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d013      	beq.n	8002418 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023f0:	f7fe fe08 	bl	8001004 <HAL_GetTick>
 80023f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023f6:	e008      	b.n	800240a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80023f8:	f7fe fe04 	bl	8001004 <HAL_GetTick>
 80023fc:	4602      	mov	r2, r0
 80023fe:	693b      	ldr	r3, [r7, #16]
 8002400:	1ad3      	subs	r3, r2, r3
 8002402:	2b64      	cmp	r3, #100	; 0x64
 8002404:	d901      	bls.n	800240a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002406:	2303      	movs	r3, #3
 8002408:	e1cd      	b.n	80027a6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800240a:	4b76      	ldr	r3, [pc, #472]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002412:	2b00      	cmp	r3, #0
 8002414:	d0f0      	beq.n	80023f8 <HAL_RCC_OscConfig+0xc0>
 8002416:	e014      	b.n	8002442 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002418:	f7fe fdf4 	bl	8001004 <HAL_GetTick>
 800241c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800241e:	e008      	b.n	8002432 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002420:	f7fe fdf0 	bl	8001004 <HAL_GetTick>
 8002424:	4602      	mov	r2, r0
 8002426:	693b      	ldr	r3, [r7, #16]
 8002428:	1ad3      	subs	r3, r2, r3
 800242a:	2b64      	cmp	r3, #100	; 0x64
 800242c:	d901      	bls.n	8002432 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800242e:	2303      	movs	r3, #3
 8002430:	e1b9      	b.n	80027a6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002432:	4b6c      	ldr	r3, [pc, #432]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800243a:	2b00      	cmp	r3, #0
 800243c:	d1f0      	bne.n	8002420 <HAL_RCC_OscConfig+0xe8>
 800243e:	e000      	b.n	8002442 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002440:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f003 0302 	and.w	r3, r3, #2
 800244a:	2b00      	cmp	r3, #0
 800244c:	d063      	beq.n	8002516 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800244e:	4b65      	ldr	r3, [pc, #404]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 8002450:	689b      	ldr	r3, [r3, #8]
 8002452:	f003 030c 	and.w	r3, r3, #12
 8002456:	2b00      	cmp	r3, #0
 8002458:	d00b      	beq.n	8002472 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800245a:	4b62      	ldr	r3, [pc, #392]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 800245c:	689b      	ldr	r3, [r3, #8]
 800245e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002462:	2b08      	cmp	r3, #8
 8002464:	d11c      	bne.n	80024a0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002466:	4b5f      	ldr	r3, [pc, #380]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800246e:	2b00      	cmp	r3, #0
 8002470:	d116      	bne.n	80024a0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002472:	4b5c      	ldr	r3, [pc, #368]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f003 0302 	and.w	r3, r3, #2
 800247a:	2b00      	cmp	r3, #0
 800247c:	d005      	beq.n	800248a <HAL_RCC_OscConfig+0x152>
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	68db      	ldr	r3, [r3, #12]
 8002482:	2b01      	cmp	r3, #1
 8002484:	d001      	beq.n	800248a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002486:	2301      	movs	r3, #1
 8002488:	e18d      	b.n	80027a6 <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800248a:	4b56      	ldr	r3, [pc, #344]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	691b      	ldr	r3, [r3, #16]
 8002496:	00db      	lsls	r3, r3, #3
 8002498:	4952      	ldr	r1, [pc, #328]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 800249a:	4313      	orrs	r3, r2
 800249c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800249e:	e03a      	b.n	8002516 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	68db      	ldr	r3, [r3, #12]
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d020      	beq.n	80024ea <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80024a8:	4b4f      	ldr	r3, [pc, #316]	; (80025e8 <HAL_RCC_OscConfig+0x2b0>)
 80024aa:	2201      	movs	r2, #1
 80024ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024ae:	f7fe fda9 	bl	8001004 <HAL_GetTick>
 80024b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024b4:	e008      	b.n	80024c8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80024b6:	f7fe fda5 	bl	8001004 <HAL_GetTick>
 80024ba:	4602      	mov	r2, r0
 80024bc:	693b      	ldr	r3, [r7, #16]
 80024be:	1ad3      	subs	r3, r2, r3
 80024c0:	2b02      	cmp	r3, #2
 80024c2:	d901      	bls.n	80024c8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80024c4:	2303      	movs	r3, #3
 80024c6:	e16e      	b.n	80027a6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024c8:	4b46      	ldr	r3, [pc, #280]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f003 0302 	and.w	r3, r3, #2
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d0f0      	beq.n	80024b6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024d4:	4b43      	ldr	r3, [pc, #268]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	691b      	ldr	r3, [r3, #16]
 80024e0:	00db      	lsls	r3, r3, #3
 80024e2:	4940      	ldr	r1, [pc, #256]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 80024e4:	4313      	orrs	r3, r2
 80024e6:	600b      	str	r3, [r1, #0]
 80024e8:	e015      	b.n	8002516 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80024ea:	4b3f      	ldr	r3, [pc, #252]	; (80025e8 <HAL_RCC_OscConfig+0x2b0>)
 80024ec:	2200      	movs	r2, #0
 80024ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024f0:	f7fe fd88 	bl	8001004 <HAL_GetTick>
 80024f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024f6:	e008      	b.n	800250a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80024f8:	f7fe fd84 	bl	8001004 <HAL_GetTick>
 80024fc:	4602      	mov	r2, r0
 80024fe:	693b      	ldr	r3, [r7, #16]
 8002500:	1ad3      	subs	r3, r2, r3
 8002502:	2b02      	cmp	r3, #2
 8002504:	d901      	bls.n	800250a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002506:	2303      	movs	r3, #3
 8002508:	e14d      	b.n	80027a6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800250a:	4b36      	ldr	r3, [pc, #216]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f003 0302 	and.w	r3, r3, #2
 8002512:	2b00      	cmp	r3, #0
 8002514:	d1f0      	bne.n	80024f8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f003 0308 	and.w	r3, r3, #8
 800251e:	2b00      	cmp	r3, #0
 8002520:	d030      	beq.n	8002584 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	695b      	ldr	r3, [r3, #20]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d016      	beq.n	8002558 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800252a:	4b30      	ldr	r3, [pc, #192]	; (80025ec <HAL_RCC_OscConfig+0x2b4>)
 800252c:	2201      	movs	r2, #1
 800252e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002530:	f7fe fd68 	bl	8001004 <HAL_GetTick>
 8002534:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002536:	e008      	b.n	800254a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002538:	f7fe fd64 	bl	8001004 <HAL_GetTick>
 800253c:	4602      	mov	r2, r0
 800253e:	693b      	ldr	r3, [r7, #16]
 8002540:	1ad3      	subs	r3, r2, r3
 8002542:	2b02      	cmp	r3, #2
 8002544:	d901      	bls.n	800254a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002546:	2303      	movs	r3, #3
 8002548:	e12d      	b.n	80027a6 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800254a:	4b26      	ldr	r3, [pc, #152]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 800254c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800254e:	f003 0302 	and.w	r3, r3, #2
 8002552:	2b00      	cmp	r3, #0
 8002554:	d0f0      	beq.n	8002538 <HAL_RCC_OscConfig+0x200>
 8002556:	e015      	b.n	8002584 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002558:	4b24      	ldr	r3, [pc, #144]	; (80025ec <HAL_RCC_OscConfig+0x2b4>)
 800255a:	2200      	movs	r2, #0
 800255c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800255e:	f7fe fd51 	bl	8001004 <HAL_GetTick>
 8002562:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002564:	e008      	b.n	8002578 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002566:	f7fe fd4d 	bl	8001004 <HAL_GetTick>
 800256a:	4602      	mov	r2, r0
 800256c:	693b      	ldr	r3, [r7, #16]
 800256e:	1ad3      	subs	r3, r2, r3
 8002570:	2b02      	cmp	r3, #2
 8002572:	d901      	bls.n	8002578 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002574:	2303      	movs	r3, #3
 8002576:	e116      	b.n	80027a6 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002578:	4b1a      	ldr	r3, [pc, #104]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 800257a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800257c:	f003 0302 	and.w	r3, r3, #2
 8002580:	2b00      	cmp	r3, #0
 8002582:	d1f0      	bne.n	8002566 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f003 0304 	and.w	r3, r3, #4
 800258c:	2b00      	cmp	r3, #0
 800258e:	f000 80a0 	beq.w	80026d2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002592:	2300      	movs	r3, #0
 8002594:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002596:	4b13      	ldr	r3, [pc, #76]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 8002598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800259a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d10f      	bne.n	80025c2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025a2:	2300      	movs	r3, #0
 80025a4:	60fb      	str	r3, [r7, #12]
 80025a6:	4b0f      	ldr	r3, [pc, #60]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 80025a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025aa:	4a0e      	ldr	r2, [pc, #56]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 80025ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025b0:	6413      	str	r3, [r2, #64]	; 0x40
 80025b2:	4b0c      	ldr	r3, [pc, #48]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 80025b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025ba:	60fb      	str	r3, [r7, #12]
 80025bc:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80025be:	2301      	movs	r3, #1
 80025c0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025c2:	4b0b      	ldr	r3, [pc, #44]	; (80025f0 <HAL_RCC_OscConfig+0x2b8>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d121      	bne.n	8002612 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80025ce:	4b08      	ldr	r3, [pc, #32]	; (80025f0 <HAL_RCC_OscConfig+0x2b8>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	4a07      	ldr	r2, [pc, #28]	; (80025f0 <HAL_RCC_OscConfig+0x2b8>)
 80025d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80025da:	f7fe fd13 	bl	8001004 <HAL_GetTick>
 80025de:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025e0:	e011      	b.n	8002606 <HAL_RCC_OscConfig+0x2ce>
 80025e2:	bf00      	nop
 80025e4:	40023800 	.word	0x40023800
 80025e8:	42470000 	.word	0x42470000
 80025ec:	42470e80 	.word	0x42470e80
 80025f0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025f4:	f7fe fd06 	bl	8001004 <HAL_GetTick>
 80025f8:	4602      	mov	r2, r0
 80025fa:	693b      	ldr	r3, [r7, #16]
 80025fc:	1ad3      	subs	r3, r2, r3
 80025fe:	2b02      	cmp	r3, #2
 8002600:	d901      	bls.n	8002606 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002602:	2303      	movs	r3, #3
 8002604:	e0cf      	b.n	80027a6 <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002606:	4b6a      	ldr	r3, [pc, #424]	; (80027b0 <HAL_RCC_OscConfig+0x478>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800260e:	2b00      	cmp	r3, #0
 8002610:	d0f0      	beq.n	80025f4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	689b      	ldr	r3, [r3, #8]
 8002616:	2b01      	cmp	r3, #1
 8002618:	d106      	bne.n	8002628 <HAL_RCC_OscConfig+0x2f0>
 800261a:	4b66      	ldr	r3, [pc, #408]	; (80027b4 <HAL_RCC_OscConfig+0x47c>)
 800261c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800261e:	4a65      	ldr	r2, [pc, #404]	; (80027b4 <HAL_RCC_OscConfig+0x47c>)
 8002620:	f043 0301 	orr.w	r3, r3, #1
 8002624:	6713      	str	r3, [r2, #112]	; 0x70
 8002626:	e01c      	b.n	8002662 <HAL_RCC_OscConfig+0x32a>
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	689b      	ldr	r3, [r3, #8]
 800262c:	2b05      	cmp	r3, #5
 800262e:	d10c      	bne.n	800264a <HAL_RCC_OscConfig+0x312>
 8002630:	4b60      	ldr	r3, [pc, #384]	; (80027b4 <HAL_RCC_OscConfig+0x47c>)
 8002632:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002634:	4a5f      	ldr	r2, [pc, #380]	; (80027b4 <HAL_RCC_OscConfig+0x47c>)
 8002636:	f043 0304 	orr.w	r3, r3, #4
 800263a:	6713      	str	r3, [r2, #112]	; 0x70
 800263c:	4b5d      	ldr	r3, [pc, #372]	; (80027b4 <HAL_RCC_OscConfig+0x47c>)
 800263e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002640:	4a5c      	ldr	r2, [pc, #368]	; (80027b4 <HAL_RCC_OscConfig+0x47c>)
 8002642:	f043 0301 	orr.w	r3, r3, #1
 8002646:	6713      	str	r3, [r2, #112]	; 0x70
 8002648:	e00b      	b.n	8002662 <HAL_RCC_OscConfig+0x32a>
 800264a:	4b5a      	ldr	r3, [pc, #360]	; (80027b4 <HAL_RCC_OscConfig+0x47c>)
 800264c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800264e:	4a59      	ldr	r2, [pc, #356]	; (80027b4 <HAL_RCC_OscConfig+0x47c>)
 8002650:	f023 0301 	bic.w	r3, r3, #1
 8002654:	6713      	str	r3, [r2, #112]	; 0x70
 8002656:	4b57      	ldr	r3, [pc, #348]	; (80027b4 <HAL_RCC_OscConfig+0x47c>)
 8002658:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800265a:	4a56      	ldr	r2, [pc, #344]	; (80027b4 <HAL_RCC_OscConfig+0x47c>)
 800265c:	f023 0304 	bic.w	r3, r3, #4
 8002660:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	689b      	ldr	r3, [r3, #8]
 8002666:	2b00      	cmp	r3, #0
 8002668:	d015      	beq.n	8002696 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800266a:	f7fe fccb 	bl	8001004 <HAL_GetTick>
 800266e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002670:	e00a      	b.n	8002688 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002672:	f7fe fcc7 	bl	8001004 <HAL_GetTick>
 8002676:	4602      	mov	r2, r0
 8002678:	693b      	ldr	r3, [r7, #16]
 800267a:	1ad3      	subs	r3, r2, r3
 800267c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002680:	4293      	cmp	r3, r2
 8002682:	d901      	bls.n	8002688 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002684:	2303      	movs	r3, #3
 8002686:	e08e      	b.n	80027a6 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002688:	4b4a      	ldr	r3, [pc, #296]	; (80027b4 <HAL_RCC_OscConfig+0x47c>)
 800268a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800268c:	f003 0302 	and.w	r3, r3, #2
 8002690:	2b00      	cmp	r3, #0
 8002692:	d0ee      	beq.n	8002672 <HAL_RCC_OscConfig+0x33a>
 8002694:	e014      	b.n	80026c0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002696:	f7fe fcb5 	bl	8001004 <HAL_GetTick>
 800269a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800269c:	e00a      	b.n	80026b4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800269e:	f7fe fcb1 	bl	8001004 <HAL_GetTick>
 80026a2:	4602      	mov	r2, r0
 80026a4:	693b      	ldr	r3, [r7, #16]
 80026a6:	1ad3      	subs	r3, r2, r3
 80026a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80026ac:	4293      	cmp	r3, r2
 80026ae:	d901      	bls.n	80026b4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80026b0:	2303      	movs	r3, #3
 80026b2:	e078      	b.n	80027a6 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026b4:	4b3f      	ldr	r3, [pc, #252]	; (80027b4 <HAL_RCC_OscConfig+0x47c>)
 80026b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026b8:	f003 0302 	and.w	r3, r3, #2
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d1ee      	bne.n	800269e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80026c0:	7dfb      	ldrb	r3, [r7, #23]
 80026c2:	2b01      	cmp	r3, #1
 80026c4:	d105      	bne.n	80026d2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026c6:	4b3b      	ldr	r3, [pc, #236]	; (80027b4 <HAL_RCC_OscConfig+0x47c>)
 80026c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ca:	4a3a      	ldr	r2, [pc, #232]	; (80027b4 <HAL_RCC_OscConfig+0x47c>)
 80026cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80026d0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	699b      	ldr	r3, [r3, #24]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d064      	beq.n	80027a4 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80026da:	4b36      	ldr	r3, [pc, #216]	; (80027b4 <HAL_RCC_OscConfig+0x47c>)
 80026dc:	689b      	ldr	r3, [r3, #8]
 80026de:	f003 030c 	and.w	r3, r3, #12
 80026e2:	2b08      	cmp	r3, #8
 80026e4:	d05c      	beq.n	80027a0 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	699b      	ldr	r3, [r3, #24]
 80026ea:	2b02      	cmp	r3, #2
 80026ec:	d141      	bne.n	8002772 <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026ee:	4b32      	ldr	r3, [pc, #200]	; (80027b8 <HAL_RCC_OscConfig+0x480>)
 80026f0:	2200      	movs	r2, #0
 80026f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026f4:	f7fe fc86 	bl	8001004 <HAL_GetTick>
 80026f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026fa:	e008      	b.n	800270e <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026fc:	f7fe fc82 	bl	8001004 <HAL_GetTick>
 8002700:	4602      	mov	r2, r0
 8002702:	693b      	ldr	r3, [r7, #16]
 8002704:	1ad3      	subs	r3, r2, r3
 8002706:	2b02      	cmp	r3, #2
 8002708:	d901      	bls.n	800270e <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 800270a:	2303      	movs	r3, #3
 800270c:	e04b      	b.n	80027a6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800270e:	4b29      	ldr	r3, [pc, #164]	; (80027b4 <HAL_RCC_OscConfig+0x47c>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002716:	2b00      	cmp	r3, #0
 8002718:	d1f0      	bne.n	80026fc <HAL_RCC_OscConfig+0x3c4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	69da      	ldr	r2, [r3, #28]
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6a1b      	ldr	r3, [r3, #32]
 8002722:	431a      	orrs	r2, r3
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002728:	019b      	lsls	r3, r3, #6
 800272a:	431a      	orrs	r2, r3
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002730:	085b      	lsrs	r3, r3, #1
 8002732:	3b01      	subs	r3, #1
 8002734:	041b      	lsls	r3, r3, #16
 8002736:	431a      	orrs	r2, r3
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800273c:	061b      	lsls	r3, r3, #24
 800273e:	491d      	ldr	r1, [pc, #116]	; (80027b4 <HAL_RCC_OscConfig+0x47c>)
 8002740:	4313      	orrs	r3, r2
 8002742:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002744:	4b1c      	ldr	r3, [pc, #112]	; (80027b8 <HAL_RCC_OscConfig+0x480>)
 8002746:	2201      	movs	r2, #1
 8002748:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800274a:	f7fe fc5b 	bl	8001004 <HAL_GetTick>
 800274e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002750:	e008      	b.n	8002764 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002752:	f7fe fc57 	bl	8001004 <HAL_GetTick>
 8002756:	4602      	mov	r2, r0
 8002758:	693b      	ldr	r3, [r7, #16]
 800275a:	1ad3      	subs	r3, r2, r3
 800275c:	2b02      	cmp	r3, #2
 800275e:	d901      	bls.n	8002764 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8002760:	2303      	movs	r3, #3
 8002762:	e020      	b.n	80027a6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002764:	4b13      	ldr	r3, [pc, #76]	; (80027b4 <HAL_RCC_OscConfig+0x47c>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800276c:	2b00      	cmp	r3, #0
 800276e:	d0f0      	beq.n	8002752 <HAL_RCC_OscConfig+0x41a>
 8002770:	e018      	b.n	80027a4 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002772:	4b11      	ldr	r3, [pc, #68]	; (80027b8 <HAL_RCC_OscConfig+0x480>)
 8002774:	2200      	movs	r2, #0
 8002776:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002778:	f7fe fc44 	bl	8001004 <HAL_GetTick>
 800277c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800277e:	e008      	b.n	8002792 <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002780:	f7fe fc40 	bl	8001004 <HAL_GetTick>
 8002784:	4602      	mov	r2, r0
 8002786:	693b      	ldr	r3, [r7, #16]
 8002788:	1ad3      	subs	r3, r2, r3
 800278a:	2b02      	cmp	r3, #2
 800278c:	d901      	bls.n	8002792 <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 800278e:	2303      	movs	r3, #3
 8002790:	e009      	b.n	80027a6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002792:	4b08      	ldr	r3, [pc, #32]	; (80027b4 <HAL_RCC_OscConfig+0x47c>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800279a:	2b00      	cmp	r3, #0
 800279c:	d1f0      	bne.n	8002780 <HAL_RCC_OscConfig+0x448>
 800279e:	e001      	b.n	80027a4 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80027a0:	2301      	movs	r3, #1
 80027a2:	e000      	b.n	80027a6 <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 80027a4:	2300      	movs	r3, #0
}
 80027a6:	4618      	mov	r0, r3
 80027a8:	3718      	adds	r7, #24
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bd80      	pop	{r7, pc}
 80027ae:	bf00      	nop
 80027b0:	40007000 	.word	0x40007000
 80027b4:	40023800 	.word	0x40023800
 80027b8:	42470060 	.word	0x42470060

080027bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b084      	sub	sp, #16
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
 80027c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d101      	bne.n	80027d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80027cc:	2301      	movs	r3, #1
 80027ce:	e0ca      	b.n	8002966 <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80027d0:	4b67      	ldr	r3, [pc, #412]	; (8002970 <HAL_RCC_ClockConfig+0x1b4>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f003 030f 	and.w	r3, r3, #15
 80027d8:	683a      	ldr	r2, [r7, #0]
 80027da:	429a      	cmp	r2, r3
 80027dc:	d90c      	bls.n	80027f8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027de:	4b64      	ldr	r3, [pc, #400]	; (8002970 <HAL_RCC_ClockConfig+0x1b4>)
 80027e0:	683a      	ldr	r2, [r7, #0]
 80027e2:	b2d2      	uxtb	r2, r2
 80027e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80027e6:	4b62      	ldr	r3, [pc, #392]	; (8002970 <HAL_RCC_ClockConfig+0x1b4>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f003 030f 	and.w	r3, r3, #15
 80027ee:	683a      	ldr	r2, [r7, #0]
 80027f0:	429a      	cmp	r2, r3
 80027f2:	d001      	beq.n	80027f8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80027f4:	2301      	movs	r3, #1
 80027f6:	e0b6      	b.n	8002966 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f003 0302 	and.w	r3, r3, #2
 8002800:	2b00      	cmp	r3, #0
 8002802:	d020      	beq.n	8002846 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f003 0304 	and.w	r3, r3, #4
 800280c:	2b00      	cmp	r3, #0
 800280e:	d005      	beq.n	800281c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002810:	4b58      	ldr	r3, [pc, #352]	; (8002974 <HAL_RCC_ClockConfig+0x1b8>)
 8002812:	689b      	ldr	r3, [r3, #8]
 8002814:	4a57      	ldr	r2, [pc, #348]	; (8002974 <HAL_RCC_ClockConfig+0x1b8>)
 8002816:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800281a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f003 0308 	and.w	r3, r3, #8
 8002824:	2b00      	cmp	r3, #0
 8002826:	d005      	beq.n	8002834 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002828:	4b52      	ldr	r3, [pc, #328]	; (8002974 <HAL_RCC_ClockConfig+0x1b8>)
 800282a:	689b      	ldr	r3, [r3, #8]
 800282c:	4a51      	ldr	r2, [pc, #324]	; (8002974 <HAL_RCC_ClockConfig+0x1b8>)
 800282e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002832:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002834:	4b4f      	ldr	r3, [pc, #316]	; (8002974 <HAL_RCC_ClockConfig+0x1b8>)
 8002836:	689b      	ldr	r3, [r3, #8]
 8002838:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	689b      	ldr	r3, [r3, #8]
 8002840:	494c      	ldr	r1, [pc, #304]	; (8002974 <HAL_RCC_ClockConfig+0x1b8>)
 8002842:	4313      	orrs	r3, r2
 8002844:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f003 0301 	and.w	r3, r3, #1
 800284e:	2b00      	cmp	r3, #0
 8002850:	d044      	beq.n	80028dc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	685b      	ldr	r3, [r3, #4]
 8002856:	2b01      	cmp	r3, #1
 8002858:	d107      	bne.n	800286a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800285a:	4b46      	ldr	r3, [pc, #280]	; (8002974 <HAL_RCC_ClockConfig+0x1b8>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002862:	2b00      	cmp	r3, #0
 8002864:	d119      	bne.n	800289a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002866:	2301      	movs	r3, #1
 8002868:	e07d      	b.n	8002966 <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	685b      	ldr	r3, [r3, #4]
 800286e:	2b02      	cmp	r3, #2
 8002870:	d003      	beq.n	800287a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002876:	2b03      	cmp	r3, #3
 8002878:	d107      	bne.n	800288a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800287a:	4b3e      	ldr	r3, [pc, #248]	; (8002974 <HAL_RCC_ClockConfig+0x1b8>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002882:	2b00      	cmp	r3, #0
 8002884:	d109      	bne.n	800289a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002886:	2301      	movs	r3, #1
 8002888:	e06d      	b.n	8002966 <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800288a:	4b3a      	ldr	r3, [pc, #232]	; (8002974 <HAL_RCC_ClockConfig+0x1b8>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f003 0302 	and.w	r3, r3, #2
 8002892:	2b00      	cmp	r3, #0
 8002894:	d101      	bne.n	800289a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002896:	2301      	movs	r3, #1
 8002898:	e065      	b.n	8002966 <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800289a:	4b36      	ldr	r3, [pc, #216]	; (8002974 <HAL_RCC_ClockConfig+0x1b8>)
 800289c:	689b      	ldr	r3, [r3, #8]
 800289e:	f023 0203 	bic.w	r2, r3, #3
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	4933      	ldr	r1, [pc, #204]	; (8002974 <HAL_RCC_ClockConfig+0x1b8>)
 80028a8:	4313      	orrs	r3, r2
 80028aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80028ac:	f7fe fbaa 	bl	8001004 <HAL_GetTick>
 80028b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028b2:	e00a      	b.n	80028ca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028b4:	f7fe fba6 	bl	8001004 <HAL_GetTick>
 80028b8:	4602      	mov	r2, r0
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	1ad3      	subs	r3, r2, r3
 80028be:	f241 3288 	movw	r2, #5000	; 0x1388
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d901      	bls.n	80028ca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80028c6:	2303      	movs	r3, #3
 80028c8:	e04d      	b.n	8002966 <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028ca:	4b2a      	ldr	r3, [pc, #168]	; (8002974 <HAL_RCC_ClockConfig+0x1b8>)
 80028cc:	689b      	ldr	r3, [r3, #8]
 80028ce:	f003 020c 	and.w	r2, r3, #12
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	685b      	ldr	r3, [r3, #4]
 80028d6:	009b      	lsls	r3, r3, #2
 80028d8:	429a      	cmp	r2, r3
 80028da:	d1eb      	bne.n	80028b4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80028dc:	4b24      	ldr	r3, [pc, #144]	; (8002970 <HAL_RCC_ClockConfig+0x1b4>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f003 030f 	and.w	r3, r3, #15
 80028e4:	683a      	ldr	r2, [r7, #0]
 80028e6:	429a      	cmp	r2, r3
 80028e8:	d20c      	bcs.n	8002904 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028ea:	4b21      	ldr	r3, [pc, #132]	; (8002970 <HAL_RCC_ClockConfig+0x1b4>)
 80028ec:	683a      	ldr	r2, [r7, #0]
 80028ee:	b2d2      	uxtb	r2, r2
 80028f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80028f2:	4b1f      	ldr	r3, [pc, #124]	; (8002970 <HAL_RCC_ClockConfig+0x1b4>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f003 030f 	and.w	r3, r3, #15
 80028fa:	683a      	ldr	r2, [r7, #0]
 80028fc:	429a      	cmp	r2, r3
 80028fe:	d001      	beq.n	8002904 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002900:	2301      	movs	r3, #1
 8002902:	e030      	b.n	8002966 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f003 0304 	and.w	r3, r3, #4
 800290c:	2b00      	cmp	r3, #0
 800290e:	d008      	beq.n	8002922 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002910:	4b18      	ldr	r3, [pc, #96]	; (8002974 <HAL_RCC_ClockConfig+0x1b8>)
 8002912:	689b      	ldr	r3, [r3, #8]
 8002914:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	68db      	ldr	r3, [r3, #12]
 800291c:	4915      	ldr	r1, [pc, #84]	; (8002974 <HAL_RCC_ClockConfig+0x1b8>)
 800291e:	4313      	orrs	r3, r2
 8002920:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f003 0308 	and.w	r3, r3, #8
 800292a:	2b00      	cmp	r3, #0
 800292c:	d009      	beq.n	8002942 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800292e:	4b11      	ldr	r3, [pc, #68]	; (8002974 <HAL_RCC_ClockConfig+0x1b8>)
 8002930:	689b      	ldr	r3, [r3, #8]
 8002932:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	691b      	ldr	r3, [r3, #16]
 800293a:	00db      	lsls	r3, r3, #3
 800293c:	490d      	ldr	r1, [pc, #52]	; (8002974 <HAL_RCC_ClockConfig+0x1b8>)
 800293e:	4313      	orrs	r3, r2
 8002940:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002942:	f000 f81d 	bl	8002980 <HAL_RCC_GetSysClockFreq>
 8002946:	4601      	mov	r1, r0
 8002948:	4b0a      	ldr	r3, [pc, #40]	; (8002974 <HAL_RCC_ClockConfig+0x1b8>)
 800294a:	689b      	ldr	r3, [r3, #8]
 800294c:	091b      	lsrs	r3, r3, #4
 800294e:	f003 030f 	and.w	r3, r3, #15
 8002952:	4a09      	ldr	r2, [pc, #36]	; (8002978 <HAL_RCC_ClockConfig+0x1bc>)
 8002954:	5cd3      	ldrb	r3, [r2, r3]
 8002956:	fa21 f303 	lsr.w	r3, r1, r3
 800295a:	4a08      	ldr	r2, [pc, #32]	; (800297c <HAL_RCC_ClockConfig+0x1c0>)
 800295c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 800295e:	2000      	movs	r0, #0
 8002960:	f7fe fb0c 	bl	8000f7c <HAL_InitTick>

  return HAL_OK;
 8002964:	2300      	movs	r3, #0
}
 8002966:	4618      	mov	r0, r3
 8002968:	3710      	adds	r7, #16
 800296a:	46bd      	mov	sp, r7
 800296c:	bd80      	pop	{r7, pc}
 800296e:	bf00      	nop
 8002970:	40023c00 	.word	0x40023c00
 8002974:	40023800 	.word	0x40023800
 8002978:	08013e80 	.word	0x08013e80
 800297c:	20000080 	.word	0x20000080

08002980 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002980:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002982:	b085      	sub	sp, #20
 8002984:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002986:	2300      	movs	r3, #0
 8002988:	607b      	str	r3, [r7, #4]
 800298a:	2300      	movs	r3, #0
 800298c:	60fb      	str	r3, [r7, #12]
 800298e:	2300      	movs	r3, #0
 8002990:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002992:	2300      	movs	r3, #0
 8002994:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002996:	4b50      	ldr	r3, [pc, #320]	; (8002ad8 <HAL_RCC_GetSysClockFreq+0x158>)
 8002998:	689b      	ldr	r3, [r3, #8]
 800299a:	f003 030c 	and.w	r3, r3, #12
 800299e:	2b04      	cmp	r3, #4
 80029a0:	d007      	beq.n	80029b2 <HAL_RCC_GetSysClockFreq+0x32>
 80029a2:	2b08      	cmp	r3, #8
 80029a4:	d008      	beq.n	80029b8 <HAL_RCC_GetSysClockFreq+0x38>
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	f040 808d 	bne.w	8002ac6 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80029ac:	4b4b      	ldr	r3, [pc, #300]	; (8002adc <HAL_RCC_GetSysClockFreq+0x15c>)
 80029ae:	60bb      	str	r3, [r7, #8]
       break;
 80029b0:	e08c      	b.n	8002acc <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80029b2:	4b4b      	ldr	r3, [pc, #300]	; (8002ae0 <HAL_RCC_GetSysClockFreq+0x160>)
 80029b4:	60bb      	str	r3, [r7, #8]
      break;
 80029b6:	e089      	b.n	8002acc <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80029b8:	4b47      	ldr	r3, [pc, #284]	; (8002ad8 <HAL_RCC_GetSysClockFreq+0x158>)
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80029c0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80029c2:	4b45      	ldr	r3, [pc, #276]	; (8002ad8 <HAL_RCC_GetSysClockFreq+0x158>)
 80029c4:	685b      	ldr	r3, [r3, #4]
 80029c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d023      	beq.n	8002a16 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80029ce:	4b42      	ldr	r3, [pc, #264]	; (8002ad8 <HAL_RCC_GetSysClockFreq+0x158>)
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	099b      	lsrs	r3, r3, #6
 80029d4:	f04f 0400 	mov.w	r4, #0
 80029d8:	f240 11ff 	movw	r1, #511	; 0x1ff
 80029dc:	f04f 0200 	mov.w	r2, #0
 80029e0:	ea03 0501 	and.w	r5, r3, r1
 80029e4:	ea04 0602 	and.w	r6, r4, r2
 80029e8:	4a3d      	ldr	r2, [pc, #244]	; (8002ae0 <HAL_RCC_GetSysClockFreq+0x160>)
 80029ea:	fb02 f106 	mul.w	r1, r2, r6
 80029ee:	2200      	movs	r2, #0
 80029f0:	fb02 f205 	mul.w	r2, r2, r5
 80029f4:	440a      	add	r2, r1
 80029f6:	493a      	ldr	r1, [pc, #232]	; (8002ae0 <HAL_RCC_GetSysClockFreq+0x160>)
 80029f8:	fba5 0101 	umull	r0, r1, r5, r1
 80029fc:	1853      	adds	r3, r2, r1
 80029fe:	4619      	mov	r1, r3
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	f04f 0400 	mov.w	r4, #0
 8002a06:	461a      	mov	r2, r3
 8002a08:	4623      	mov	r3, r4
 8002a0a:	f7fe f915 	bl	8000c38 <__aeabi_uldivmod>
 8002a0e:	4603      	mov	r3, r0
 8002a10:	460c      	mov	r4, r1
 8002a12:	60fb      	str	r3, [r7, #12]
 8002a14:	e049      	b.n	8002aaa <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a16:	4b30      	ldr	r3, [pc, #192]	; (8002ad8 <HAL_RCC_GetSysClockFreq+0x158>)
 8002a18:	685b      	ldr	r3, [r3, #4]
 8002a1a:	099b      	lsrs	r3, r3, #6
 8002a1c:	f04f 0400 	mov.w	r4, #0
 8002a20:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002a24:	f04f 0200 	mov.w	r2, #0
 8002a28:	ea03 0501 	and.w	r5, r3, r1
 8002a2c:	ea04 0602 	and.w	r6, r4, r2
 8002a30:	4629      	mov	r1, r5
 8002a32:	4632      	mov	r2, r6
 8002a34:	f04f 0300 	mov.w	r3, #0
 8002a38:	f04f 0400 	mov.w	r4, #0
 8002a3c:	0154      	lsls	r4, r2, #5
 8002a3e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002a42:	014b      	lsls	r3, r1, #5
 8002a44:	4619      	mov	r1, r3
 8002a46:	4622      	mov	r2, r4
 8002a48:	1b49      	subs	r1, r1, r5
 8002a4a:	eb62 0206 	sbc.w	r2, r2, r6
 8002a4e:	f04f 0300 	mov.w	r3, #0
 8002a52:	f04f 0400 	mov.w	r4, #0
 8002a56:	0194      	lsls	r4, r2, #6
 8002a58:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002a5c:	018b      	lsls	r3, r1, #6
 8002a5e:	1a5b      	subs	r3, r3, r1
 8002a60:	eb64 0402 	sbc.w	r4, r4, r2
 8002a64:	f04f 0100 	mov.w	r1, #0
 8002a68:	f04f 0200 	mov.w	r2, #0
 8002a6c:	00e2      	lsls	r2, r4, #3
 8002a6e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002a72:	00d9      	lsls	r1, r3, #3
 8002a74:	460b      	mov	r3, r1
 8002a76:	4614      	mov	r4, r2
 8002a78:	195b      	adds	r3, r3, r5
 8002a7a:	eb44 0406 	adc.w	r4, r4, r6
 8002a7e:	f04f 0100 	mov.w	r1, #0
 8002a82:	f04f 0200 	mov.w	r2, #0
 8002a86:	02a2      	lsls	r2, r4, #10
 8002a88:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002a8c:	0299      	lsls	r1, r3, #10
 8002a8e:	460b      	mov	r3, r1
 8002a90:	4614      	mov	r4, r2
 8002a92:	4618      	mov	r0, r3
 8002a94:	4621      	mov	r1, r4
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	f04f 0400 	mov.w	r4, #0
 8002a9c:	461a      	mov	r2, r3
 8002a9e:	4623      	mov	r3, r4
 8002aa0:	f7fe f8ca 	bl	8000c38 <__aeabi_uldivmod>
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	460c      	mov	r4, r1
 8002aa8:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002aaa:	4b0b      	ldr	r3, [pc, #44]	; (8002ad8 <HAL_RCC_GetSysClockFreq+0x158>)
 8002aac:	685b      	ldr	r3, [r3, #4]
 8002aae:	0c1b      	lsrs	r3, r3, #16
 8002ab0:	f003 0303 	and.w	r3, r3, #3
 8002ab4:	3301      	adds	r3, #1
 8002ab6:	005b      	lsls	r3, r3, #1
 8002ab8:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002aba:	68fa      	ldr	r2, [r7, #12]
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ac2:	60bb      	str	r3, [r7, #8]
      break;
 8002ac4:	e002      	b.n	8002acc <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002ac6:	4b05      	ldr	r3, [pc, #20]	; (8002adc <HAL_RCC_GetSysClockFreq+0x15c>)
 8002ac8:	60bb      	str	r3, [r7, #8]
      break;
 8002aca:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002acc:	68bb      	ldr	r3, [r7, #8]
}
 8002ace:	4618      	mov	r0, r3
 8002ad0:	3714      	adds	r7, #20
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002ad6:	bf00      	nop
 8002ad8:	40023800 	.word	0x40023800
 8002adc:	00f42400 	.word	0x00f42400
 8002ae0:	017d7840 	.word	0x017d7840

08002ae4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ae8:	4b03      	ldr	r3, [pc, #12]	; (8002af8 <HAL_RCC_GetHCLKFreq+0x14>)
 8002aea:	681b      	ldr	r3, [r3, #0]
}
 8002aec:	4618      	mov	r0, r3
 8002aee:	46bd      	mov	sp, r7
 8002af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af4:	4770      	bx	lr
 8002af6:	bf00      	nop
 8002af8:	20000080 	.word	0x20000080

08002afc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002b00:	f7ff fff0 	bl	8002ae4 <HAL_RCC_GetHCLKFreq>
 8002b04:	4601      	mov	r1, r0
 8002b06:	4b05      	ldr	r3, [pc, #20]	; (8002b1c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002b08:	689b      	ldr	r3, [r3, #8]
 8002b0a:	0a9b      	lsrs	r3, r3, #10
 8002b0c:	f003 0307 	and.w	r3, r3, #7
 8002b10:	4a03      	ldr	r2, [pc, #12]	; (8002b20 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002b12:	5cd3      	ldrb	r3, [r2, r3]
 8002b14:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002b18:	4618      	mov	r0, r3
 8002b1a:	bd80      	pop	{r7, pc}
 8002b1c:	40023800 	.word	0x40023800
 8002b20:	08013e90 	.word	0x08013e90

08002b24 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002b28:	f7ff ffdc 	bl	8002ae4 <HAL_RCC_GetHCLKFreq>
 8002b2c:	4601      	mov	r1, r0
 8002b2e:	4b05      	ldr	r3, [pc, #20]	; (8002b44 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002b30:	689b      	ldr	r3, [r3, #8]
 8002b32:	0b5b      	lsrs	r3, r3, #13
 8002b34:	f003 0307 	and.w	r3, r3, #7
 8002b38:	4a03      	ldr	r2, [pc, #12]	; (8002b48 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002b3a:	5cd3      	ldrb	r3, [r2, r3]
 8002b3c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002b40:	4618      	mov	r0, r3
 8002b42:	bd80      	pop	{r7, pc}
 8002b44:	40023800 	.word	0x40023800
 8002b48:	08013e90 	.word	0x08013e90

08002b4c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b082      	sub	sp, #8
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d101      	bne.n	8002b5e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	e056      	b.n	8002c0c <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	2200      	movs	r2, #0
 8002b62:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002b6a:	b2db      	uxtb	r3, r3
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d106      	bne.n	8002b7e <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2200      	movs	r2, #0
 8002b74:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002b78:	6878      	ldr	r0, [r7, #4]
 8002b7a:	f00f fa93 	bl	80120a4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	2202      	movs	r2, #2
 8002b82:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	681a      	ldr	r2, [r3, #0]
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002b94:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	685a      	ldr	r2, [r3, #4]
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	689b      	ldr	r3, [r3, #8]
 8002b9e:	431a      	orrs	r2, r3
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	68db      	ldr	r3, [r3, #12]
 8002ba4:	431a      	orrs	r2, r3
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	691b      	ldr	r3, [r3, #16]
 8002baa:	431a      	orrs	r2, r3
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	695b      	ldr	r3, [r3, #20]
 8002bb0:	431a      	orrs	r2, r3
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	699b      	ldr	r3, [r3, #24]
 8002bb6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002bba:	431a      	orrs	r2, r3
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	69db      	ldr	r3, [r3, #28]
 8002bc0:	431a      	orrs	r2, r3
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6a1b      	ldr	r3, [r3, #32]
 8002bc6:	ea42 0103 	orr.w	r1, r2, r3
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	430a      	orrs	r2, r1
 8002bd4:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	699b      	ldr	r3, [r3, #24]
 8002bda:	0c1b      	lsrs	r3, r3, #16
 8002bdc:	f003 0104 	and.w	r1, r3, #4
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	430a      	orrs	r2, r1
 8002bea:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	69da      	ldr	r2, [r3, #28]
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002bfa:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2200      	movs	r2, #0
 8002c00:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	2201      	movs	r2, #1
 8002c06:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002c0a:	2300      	movs	r3, #0
}
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	3708      	adds	r7, #8
 8002c10:	46bd      	mov	sp, r7
 8002c12:	bd80      	pop	{r7, pc}

08002c14 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b088      	sub	sp, #32
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	60f8      	str	r0, [r7, #12]
 8002c1c:	60b9      	str	r1, [r7, #8]
 8002c1e:	603b      	str	r3, [r7, #0]
 8002c20:	4613      	mov	r3, r2
 8002c22:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002c24:	2300      	movs	r3, #0
 8002c26:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002c2e:	2b01      	cmp	r3, #1
 8002c30:	d101      	bne.n	8002c36 <HAL_SPI_Transmit+0x22>
 8002c32:	2302      	movs	r3, #2
 8002c34:	e11e      	b.n	8002e74 <HAL_SPI_Transmit+0x260>
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	2201      	movs	r2, #1
 8002c3a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002c3e:	f7fe f9e1 	bl	8001004 <HAL_GetTick>
 8002c42:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002c44:	88fb      	ldrh	r3, [r7, #6]
 8002c46:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002c4e:	b2db      	uxtb	r3, r3
 8002c50:	2b01      	cmp	r3, #1
 8002c52:	d002      	beq.n	8002c5a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002c54:	2302      	movs	r3, #2
 8002c56:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002c58:	e103      	b.n	8002e62 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002c5a:	68bb      	ldr	r3, [r7, #8]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d002      	beq.n	8002c66 <HAL_SPI_Transmit+0x52>
 8002c60:	88fb      	ldrh	r3, [r7, #6]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d102      	bne.n	8002c6c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002c66:	2301      	movs	r3, #1
 8002c68:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002c6a:	e0fa      	b.n	8002e62 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	2203      	movs	r2, #3
 8002c70:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	2200      	movs	r2, #0
 8002c78:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	68ba      	ldr	r2, [r7, #8]
 8002c7e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	88fa      	ldrh	r2, [r7, #6]
 8002c84:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	88fa      	ldrh	r2, [r7, #6]
 8002c8a:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	2200      	movs	r2, #0
 8002c90:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	2200      	movs	r2, #0
 8002c96:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	689b      	ldr	r3, [r3, #8]
 8002cae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002cb2:	d107      	bne.n	8002cc4 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	681a      	ldr	r2, [r3, #0]
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002cc2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cce:	2b40      	cmp	r3, #64	; 0x40
 8002cd0:	d007      	beq.n	8002ce2 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	681a      	ldr	r2, [r3, #0]
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002ce0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	68db      	ldr	r3, [r3, #12]
 8002ce6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002cea:	d14b      	bne.n	8002d84 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	685b      	ldr	r3, [r3, #4]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d002      	beq.n	8002cfa <HAL_SPI_Transmit+0xe6>
 8002cf4:	8afb      	ldrh	r3, [r7, #22]
 8002cf6:	2b01      	cmp	r3, #1
 8002cf8:	d13e      	bne.n	8002d78 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cfe:	881a      	ldrh	r2, [r3, #0]
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d0a:	1c9a      	adds	r2, r3, #2
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d14:	b29b      	uxth	r3, r3
 8002d16:	3b01      	subs	r3, #1
 8002d18:	b29a      	uxth	r2, r3
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002d1e:	e02b      	b.n	8002d78 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	689b      	ldr	r3, [r3, #8]
 8002d26:	f003 0302 	and.w	r3, r3, #2
 8002d2a:	2b02      	cmp	r3, #2
 8002d2c:	d112      	bne.n	8002d54 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d32:	881a      	ldrh	r2, [r3, #0]
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d3e:	1c9a      	adds	r2, r3, #2
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d48:	b29b      	uxth	r3, r3
 8002d4a:	3b01      	subs	r3, #1
 8002d4c:	b29a      	uxth	r2, r3
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	86da      	strh	r2, [r3, #54]	; 0x36
 8002d52:	e011      	b.n	8002d78 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002d54:	f7fe f956 	bl	8001004 <HAL_GetTick>
 8002d58:	4602      	mov	r2, r0
 8002d5a:	69bb      	ldr	r3, [r7, #24]
 8002d5c:	1ad3      	subs	r3, r2, r3
 8002d5e:	683a      	ldr	r2, [r7, #0]
 8002d60:	429a      	cmp	r2, r3
 8002d62:	d803      	bhi.n	8002d6c <HAL_SPI_Transmit+0x158>
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d6a:	d102      	bne.n	8002d72 <HAL_SPI_Transmit+0x15e>
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d102      	bne.n	8002d78 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8002d72:	2303      	movs	r3, #3
 8002d74:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002d76:	e074      	b.n	8002e62 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d7c:	b29b      	uxth	r3, r3
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d1ce      	bne.n	8002d20 <HAL_SPI_Transmit+0x10c>
 8002d82:	e04c      	b.n	8002e1e <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	685b      	ldr	r3, [r3, #4]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d002      	beq.n	8002d92 <HAL_SPI_Transmit+0x17e>
 8002d8c:	8afb      	ldrh	r3, [r7, #22]
 8002d8e:	2b01      	cmp	r3, #1
 8002d90:	d140      	bne.n	8002e14 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	330c      	adds	r3, #12
 8002d9c:	7812      	ldrb	r2, [r2, #0]
 8002d9e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002da4:	1c5a      	adds	r2, r3, #1
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002dae:	b29b      	uxth	r3, r3
 8002db0:	3b01      	subs	r3, #1
 8002db2:	b29a      	uxth	r2, r3
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002db8:	e02c      	b.n	8002e14 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	689b      	ldr	r3, [r3, #8]
 8002dc0:	f003 0302 	and.w	r3, r3, #2
 8002dc4:	2b02      	cmp	r3, #2
 8002dc6:	d113      	bne.n	8002df0 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	330c      	adds	r3, #12
 8002dd2:	7812      	ldrb	r2, [r2, #0]
 8002dd4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dda:	1c5a      	adds	r2, r3, #1
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002de4:	b29b      	uxth	r3, r3
 8002de6:	3b01      	subs	r3, #1
 8002de8:	b29a      	uxth	r2, r3
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	86da      	strh	r2, [r3, #54]	; 0x36
 8002dee:	e011      	b.n	8002e14 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002df0:	f7fe f908 	bl	8001004 <HAL_GetTick>
 8002df4:	4602      	mov	r2, r0
 8002df6:	69bb      	ldr	r3, [r7, #24]
 8002df8:	1ad3      	subs	r3, r2, r3
 8002dfa:	683a      	ldr	r2, [r7, #0]
 8002dfc:	429a      	cmp	r2, r3
 8002dfe:	d803      	bhi.n	8002e08 <HAL_SPI_Transmit+0x1f4>
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e06:	d102      	bne.n	8002e0e <HAL_SPI_Transmit+0x1fa>
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d102      	bne.n	8002e14 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8002e0e:	2303      	movs	r3, #3
 8002e10:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002e12:	e026      	b.n	8002e62 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e18:	b29b      	uxth	r3, r3
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d1cd      	bne.n	8002dba <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002e1e:	69ba      	ldr	r2, [r7, #24]
 8002e20:	6839      	ldr	r1, [r7, #0]
 8002e22:	68f8      	ldr	r0, [r7, #12]
 8002e24:	f000 fba4 	bl	8003570 <SPI_EndRxTxTransaction>
 8002e28:	4603      	mov	r3, r0
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d002      	beq.n	8002e34 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	2220      	movs	r2, #32
 8002e32:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	689b      	ldr	r3, [r3, #8]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d10a      	bne.n	8002e52 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	613b      	str	r3, [r7, #16]
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	68db      	ldr	r3, [r3, #12]
 8002e46:	613b      	str	r3, [r7, #16]
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	689b      	ldr	r3, [r3, #8]
 8002e4e:	613b      	str	r3, [r7, #16]
 8002e50:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d002      	beq.n	8002e60 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	77fb      	strb	r3, [r7, #31]
 8002e5e:	e000      	b.n	8002e62 <HAL_SPI_Transmit+0x24e>
  }

error:
 8002e60:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	2201      	movs	r2, #1
 8002e66:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002e72:	7ffb      	ldrb	r3, [r7, #31]
}
 8002e74:	4618      	mov	r0, r3
 8002e76:	3720      	adds	r7, #32
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	bd80      	pop	{r7, pc}

08002e7c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b088      	sub	sp, #32
 8002e80:	af02      	add	r7, sp, #8
 8002e82:	60f8      	str	r0, [r7, #12]
 8002e84:	60b9      	str	r1, [r7, #8]
 8002e86:	603b      	str	r3, [r7, #0]
 8002e88:	4613      	mov	r3, r2
 8002e8a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	685b      	ldr	r3, [r3, #4]
 8002e94:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002e98:	d112      	bne.n	8002ec0 <HAL_SPI_Receive+0x44>
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	689b      	ldr	r3, [r3, #8]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d10e      	bne.n	8002ec0 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	2204      	movs	r2, #4
 8002ea6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002eaa:	88fa      	ldrh	r2, [r7, #6]
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	9300      	str	r3, [sp, #0]
 8002eb0:	4613      	mov	r3, r2
 8002eb2:	68ba      	ldr	r2, [r7, #8]
 8002eb4:	68b9      	ldr	r1, [r7, #8]
 8002eb6:	68f8      	ldr	r0, [r7, #12]
 8002eb8:	f000 f8e9 	bl	800308e <HAL_SPI_TransmitReceive>
 8002ebc:	4603      	mov	r3, r0
 8002ebe:	e0e2      	b.n	8003086 <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002ec6:	2b01      	cmp	r3, #1
 8002ec8:	d101      	bne.n	8002ece <HAL_SPI_Receive+0x52>
 8002eca:	2302      	movs	r3, #2
 8002ecc:	e0db      	b.n	8003086 <HAL_SPI_Receive+0x20a>
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	2201      	movs	r2, #1
 8002ed2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002ed6:	f7fe f895 	bl	8001004 <HAL_GetTick>
 8002eda:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002ee2:	b2db      	uxtb	r3, r3
 8002ee4:	2b01      	cmp	r3, #1
 8002ee6:	d002      	beq.n	8002eee <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8002ee8:	2302      	movs	r3, #2
 8002eea:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002eec:	e0c2      	b.n	8003074 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 8002eee:	68bb      	ldr	r3, [r7, #8]
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d002      	beq.n	8002efa <HAL_SPI_Receive+0x7e>
 8002ef4:	88fb      	ldrh	r3, [r7, #6]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d102      	bne.n	8002f00 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8002efa:	2301      	movs	r3, #1
 8002efc:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002efe:	e0b9      	b.n	8003074 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	2204      	movs	r2, #4
 8002f04:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	68ba      	ldr	r2, [r7, #8]
 8002f12:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	88fa      	ldrh	r2, [r7, #6]
 8002f18:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	88fa      	ldrh	r2, [r7, #6]
 8002f1e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	2200      	movs	r2, #0
 8002f24:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	2200      	movs	r2, #0
 8002f2a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	2200      	movs	r2, #0
 8002f30:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	2200      	movs	r2, #0
 8002f36:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	689b      	ldr	r3, [r3, #8]
 8002f42:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f46:	d107      	bne.n	8002f58 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	681a      	ldr	r2, [r3, #0]
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002f56:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f62:	2b40      	cmp	r3, #64	; 0x40
 8002f64:	d007      	beq.n	8002f76 <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	681a      	ldr	r2, [r3, #0]
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002f74:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	68db      	ldr	r3, [r3, #12]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d162      	bne.n	8003044 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002f7e:	e02e      	b.n	8002fde <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	689b      	ldr	r3, [r3, #8]
 8002f86:	f003 0301 	and.w	r3, r3, #1
 8002f8a:	2b01      	cmp	r3, #1
 8002f8c:	d115      	bne.n	8002fba <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f103 020c 	add.w	r2, r3, #12
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f9a:	7812      	ldrb	r2, [r2, #0]
 8002f9c:	b2d2      	uxtb	r2, r2
 8002f9e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fa4:	1c5a      	adds	r2, r3, #1
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002fae:	b29b      	uxth	r3, r3
 8002fb0:	3b01      	subs	r3, #1
 8002fb2:	b29a      	uxth	r2, r3
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002fb8:	e011      	b.n	8002fde <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002fba:	f7fe f823 	bl	8001004 <HAL_GetTick>
 8002fbe:	4602      	mov	r2, r0
 8002fc0:	693b      	ldr	r3, [r7, #16]
 8002fc2:	1ad3      	subs	r3, r2, r3
 8002fc4:	683a      	ldr	r2, [r7, #0]
 8002fc6:	429a      	cmp	r2, r3
 8002fc8:	d803      	bhi.n	8002fd2 <HAL_SPI_Receive+0x156>
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fd0:	d102      	bne.n	8002fd8 <HAL_SPI_Receive+0x15c>
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d102      	bne.n	8002fde <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 8002fd8:	2303      	movs	r3, #3
 8002fda:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002fdc:	e04a      	b.n	8003074 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002fe2:	b29b      	uxth	r3, r3
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d1cb      	bne.n	8002f80 <HAL_SPI_Receive+0x104>
 8002fe8:	e031      	b.n	800304e <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	689b      	ldr	r3, [r3, #8]
 8002ff0:	f003 0301 	and.w	r3, r3, #1
 8002ff4:	2b01      	cmp	r3, #1
 8002ff6:	d113      	bne.n	8003020 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	68da      	ldr	r2, [r3, #12]
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003002:	b292      	uxth	r2, r2
 8003004:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800300a:	1c9a      	adds	r2, r3, #2
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003014:	b29b      	uxth	r3, r3
 8003016:	3b01      	subs	r3, #1
 8003018:	b29a      	uxth	r2, r3
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800301e:	e011      	b.n	8003044 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003020:	f7fd fff0 	bl	8001004 <HAL_GetTick>
 8003024:	4602      	mov	r2, r0
 8003026:	693b      	ldr	r3, [r7, #16]
 8003028:	1ad3      	subs	r3, r2, r3
 800302a:	683a      	ldr	r2, [r7, #0]
 800302c:	429a      	cmp	r2, r3
 800302e:	d803      	bhi.n	8003038 <HAL_SPI_Receive+0x1bc>
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003036:	d102      	bne.n	800303e <HAL_SPI_Receive+0x1c2>
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	2b00      	cmp	r3, #0
 800303c:	d102      	bne.n	8003044 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 800303e:	2303      	movs	r3, #3
 8003040:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003042:	e017      	b.n	8003074 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003048:	b29b      	uxth	r3, r3
 800304a:	2b00      	cmp	r3, #0
 800304c:	d1cd      	bne.n	8002fea <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800304e:	693a      	ldr	r2, [r7, #16]
 8003050:	6839      	ldr	r1, [r7, #0]
 8003052:	68f8      	ldr	r0, [r7, #12]
 8003054:	f000 fa27 	bl	80034a6 <SPI_EndRxTransaction>
 8003058:	4603      	mov	r3, r0
 800305a:	2b00      	cmp	r3, #0
 800305c:	d002      	beq.n	8003064 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	2220      	movs	r2, #32
 8003062:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003068:	2b00      	cmp	r3, #0
 800306a:	d002      	beq.n	8003072 <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 800306c:	2301      	movs	r3, #1
 800306e:	75fb      	strb	r3, [r7, #23]
 8003070:	e000      	b.n	8003074 <HAL_SPI_Receive+0x1f8>
  }

error :
 8003072:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	2201      	movs	r2, #1
 8003078:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	2200      	movs	r2, #0
 8003080:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003084:	7dfb      	ldrb	r3, [r7, #23]
}
 8003086:	4618      	mov	r0, r3
 8003088:	3718      	adds	r7, #24
 800308a:	46bd      	mov	sp, r7
 800308c:	bd80      	pop	{r7, pc}

0800308e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800308e:	b580      	push	{r7, lr}
 8003090:	b08c      	sub	sp, #48	; 0x30
 8003092:	af00      	add	r7, sp, #0
 8003094:	60f8      	str	r0, [r7, #12]
 8003096:	60b9      	str	r1, [r7, #8]
 8003098:	607a      	str	r2, [r7, #4]
 800309a:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800309c:	2301      	movs	r3, #1
 800309e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80030a0:	2300      	movs	r3, #0
 80030a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80030ac:	2b01      	cmp	r3, #1
 80030ae:	d101      	bne.n	80030b4 <HAL_SPI_TransmitReceive+0x26>
 80030b0:	2302      	movs	r3, #2
 80030b2:	e18a      	b.n	80033ca <HAL_SPI_TransmitReceive+0x33c>
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	2201      	movs	r2, #1
 80030b8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80030bc:	f7fd ffa2 	bl	8001004 <HAL_GetTick>
 80030c0:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80030c8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	685b      	ldr	r3, [r3, #4]
 80030d0:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80030d2:	887b      	ldrh	r3, [r7, #2]
 80030d4:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80030d6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80030da:	2b01      	cmp	r3, #1
 80030dc:	d00f      	beq.n	80030fe <HAL_SPI_TransmitReceive+0x70>
 80030de:	69fb      	ldr	r3, [r7, #28]
 80030e0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80030e4:	d107      	bne.n	80030f6 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	689b      	ldr	r3, [r3, #8]
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d103      	bne.n	80030f6 <HAL_SPI_TransmitReceive+0x68>
 80030ee:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80030f2:	2b04      	cmp	r3, #4
 80030f4:	d003      	beq.n	80030fe <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80030f6:	2302      	movs	r3, #2
 80030f8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80030fc:	e15b      	b.n	80033b6 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80030fe:	68bb      	ldr	r3, [r7, #8]
 8003100:	2b00      	cmp	r3, #0
 8003102:	d005      	beq.n	8003110 <HAL_SPI_TransmitReceive+0x82>
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2b00      	cmp	r3, #0
 8003108:	d002      	beq.n	8003110 <HAL_SPI_TransmitReceive+0x82>
 800310a:	887b      	ldrh	r3, [r7, #2]
 800310c:	2b00      	cmp	r3, #0
 800310e:	d103      	bne.n	8003118 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003110:	2301      	movs	r3, #1
 8003112:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003116:	e14e      	b.n	80033b6 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800311e:	b2db      	uxtb	r3, r3
 8003120:	2b04      	cmp	r3, #4
 8003122:	d003      	beq.n	800312c <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	2205      	movs	r2, #5
 8003128:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	2200      	movs	r2, #0
 8003130:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	687a      	ldr	r2, [r7, #4]
 8003136:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	887a      	ldrh	r2, [r7, #2]
 800313c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	887a      	ldrh	r2, [r7, #2]
 8003142:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	68ba      	ldr	r2, [r7, #8]
 8003148:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	887a      	ldrh	r2, [r7, #2]
 800314e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	887a      	ldrh	r2, [r7, #2]
 8003154:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	2200      	movs	r2, #0
 800315a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	2200      	movs	r2, #0
 8003160:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800316c:	2b40      	cmp	r3, #64	; 0x40
 800316e:	d007      	beq.n	8003180 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	681a      	ldr	r2, [r3, #0]
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800317e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	68db      	ldr	r3, [r3, #12]
 8003184:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003188:	d178      	bne.n	800327c <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	685b      	ldr	r3, [r3, #4]
 800318e:	2b00      	cmp	r3, #0
 8003190:	d002      	beq.n	8003198 <HAL_SPI_TransmitReceive+0x10a>
 8003192:	8b7b      	ldrh	r3, [r7, #26]
 8003194:	2b01      	cmp	r3, #1
 8003196:	d166      	bne.n	8003266 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800319c:	881a      	ldrh	r2, [r3, #0]
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031a8:	1c9a      	adds	r2, r3, #2
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80031b2:	b29b      	uxth	r3, r3
 80031b4:	3b01      	subs	r3, #1
 80031b6:	b29a      	uxth	r2, r3
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80031bc:	e053      	b.n	8003266 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	689b      	ldr	r3, [r3, #8]
 80031c4:	f003 0302 	and.w	r3, r3, #2
 80031c8:	2b02      	cmp	r3, #2
 80031ca:	d11b      	bne.n	8003204 <HAL_SPI_TransmitReceive+0x176>
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80031d0:	b29b      	uxth	r3, r3
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d016      	beq.n	8003204 <HAL_SPI_TransmitReceive+0x176>
 80031d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031d8:	2b01      	cmp	r3, #1
 80031da:	d113      	bne.n	8003204 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031e0:	881a      	ldrh	r2, [r3, #0]
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ec:	1c9a      	adds	r2, r3, #2
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80031f6:	b29b      	uxth	r3, r3
 80031f8:	3b01      	subs	r3, #1
 80031fa:	b29a      	uxth	r2, r3
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003200:	2300      	movs	r3, #0
 8003202:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	689b      	ldr	r3, [r3, #8]
 800320a:	f003 0301 	and.w	r3, r3, #1
 800320e:	2b01      	cmp	r3, #1
 8003210:	d119      	bne.n	8003246 <HAL_SPI_TransmitReceive+0x1b8>
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003216:	b29b      	uxth	r3, r3
 8003218:	2b00      	cmp	r3, #0
 800321a:	d014      	beq.n	8003246 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	68da      	ldr	r2, [r3, #12]
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003226:	b292      	uxth	r2, r2
 8003228:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800322e:	1c9a      	adds	r2, r3, #2
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003238:	b29b      	uxth	r3, r3
 800323a:	3b01      	subs	r3, #1
 800323c:	b29a      	uxth	r2, r3
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003242:	2301      	movs	r3, #1
 8003244:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003246:	f7fd fedd 	bl	8001004 <HAL_GetTick>
 800324a:	4602      	mov	r2, r0
 800324c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800324e:	1ad3      	subs	r3, r2, r3
 8003250:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003252:	429a      	cmp	r2, r3
 8003254:	d807      	bhi.n	8003266 <HAL_SPI_TransmitReceive+0x1d8>
 8003256:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003258:	f1b3 3fff 	cmp.w	r3, #4294967295
 800325c:	d003      	beq.n	8003266 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800325e:	2303      	movs	r3, #3
 8003260:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003264:	e0a7      	b.n	80033b6 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800326a:	b29b      	uxth	r3, r3
 800326c:	2b00      	cmp	r3, #0
 800326e:	d1a6      	bne.n	80031be <HAL_SPI_TransmitReceive+0x130>
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003274:	b29b      	uxth	r3, r3
 8003276:	2b00      	cmp	r3, #0
 8003278:	d1a1      	bne.n	80031be <HAL_SPI_TransmitReceive+0x130>
 800327a:	e07c      	b.n	8003376 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	685b      	ldr	r3, [r3, #4]
 8003280:	2b00      	cmp	r3, #0
 8003282:	d002      	beq.n	800328a <HAL_SPI_TransmitReceive+0x1fc>
 8003284:	8b7b      	ldrh	r3, [r7, #26]
 8003286:	2b01      	cmp	r3, #1
 8003288:	d16b      	bne.n	8003362 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	330c      	adds	r3, #12
 8003294:	7812      	ldrb	r2, [r2, #0]
 8003296:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800329c:	1c5a      	adds	r2, r3, #1
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80032a6:	b29b      	uxth	r3, r3
 80032a8:	3b01      	subs	r3, #1
 80032aa:	b29a      	uxth	r2, r3
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80032b0:	e057      	b.n	8003362 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	689b      	ldr	r3, [r3, #8]
 80032b8:	f003 0302 	and.w	r3, r3, #2
 80032bc:	2b02      	cmp	r3, #2
 80032be:	d11c      	bne.n	80032fa <HAL_SPI_TransmitReceive+0x26c>
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80032c4:	b29b      	uxth	r3, r3
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d017      	beq.n	80032fa <HAL_SPI_TransmitReceive+0x26c>
 80032ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032cc:	2b01      	cmp	r3, #1
 80032ce:	d114      	bne.n	80032fa <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	330c      	adds	r3, #12
 80032da:	7812      	ldrb	r2, [r2, #0]
 80032dc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032e2:	1c5a      	adds	r2, r3, #1
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80032ec:	b29b      	uxth	r3, r3
 80032ee:	3b01      	subs	r3, #1
 80032f0:	b29a      	uxth	r2, r3
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80032f6:	2300      	movs	r3, #0
 80032f8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	689b      	ldr	r3, [r3, #8]
 8003300:	f003 0301 	and.w	r3, r3, #1
 8003304:	2b01      	cmp	r3, #1
 8003306:	d119      	bne.n	800333c <HAL_SPI_TransmitReceive+0x2ae>
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800330c:	b29b      	uxth	r3, r3
 800330e:	2b00      	cmp	r3, #0
 8003310:	d014      	beq.n	800333c <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	68da      	ldr	r2, [r3, #12]
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800331c:	b2d2      	uxtb	r2, r2
 800331e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003324:	1c5a      	adds	r2, r3, #1
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800332e:	b29b      	uxth	r3, r3
 8003330:	3b01      	subs	r3, #1
 8003332:	b29a      	uxth	r2, r3
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003338:	2301      	movs	r3, #1
 800333a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800333c:	f7fd fe62 	bl	8001004 <HAL_GetTick>
 8003340:	4602      	mov	r2, r0
 8003342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003344:	1ad3      	subs	r3, r2, r3
 8003346:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003348:	429a      	cmp	r2, r3
 800334a:	d803      	bhi.n	8003354 <HAL_SPI_TransmitReceive+0x2c6>
 800334c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800334e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003352:	d102      	bne.n	800335a <HAL_SPI_TransmitReceive+0x2cc>
 8003354:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003356:	2b00      	cmp	r3, #0
 8003358:	d103      	bne.n	8003362 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800335a:	2303      	movs	r3, #3
 800335c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003360:	e029      	b.n	80033b6 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003366:	b29b      	uxth	r3, r3
 8003368:	2b00      	cmp	r3, #0
 800336a:	d1a2      	bne.n	80032b2 <HAL_SPI_TransmitReceive+0x224>
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003370:	b29b      	uxth	r3, r3
 8003372:	2b00      	cmp	r3, #0
 8003374:	d19d      	bne.n	80032b2 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003376:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003378:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800337a:	68f8      	ldr	r0, [r7, #12]
 800337c:	f000 f8f8 	bl	8003570 <SPI_EndRxTxTransaction>
 8003380:	4603      	mov	r3, r0
 8003382:	2b00      	cmp	r3, #0
 8003384:	d006      	beq.n	8003394 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8003386:	2301      	movs	r3, #1
 8003388:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	2220      	movs	r2, #32
 8003390:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003392:	e010      	b.n	80033b6 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	689b      	ldr	r3, [r3, #8]
 8003398:	2b00      	cmp	r3, #0
 800339a:	d10b      	bne.n	80033b4 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800339c:	2300      	movs	r3, #0
 800339e:	617b      	str	r3, [r7, #20]
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	68db      	ldr	r3, [r3, #12]
 80033a6:	617b      	str	r3, [r7, #20]
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	689b      	ldr	r3, [r3, #8]
 80033ae:	617b      	str	r3, [r7, #20]
 80033b0:	697b      	ldr	r3, [r7, #20]
 80033b2:	e000      	b.n	80033b6 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80033b4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	2201      	movs	r2, #1
 80033ba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	2200      	movs	r2, #0
 80033c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80033c6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80033ca:	4618      	mov	r0, r3
 80033cc:	3730      	adds	r7, #48	; 0x30
 80033ce:	46bd      	mov	sp, r7
 80033d0:	bd80      	pop	{r7, pc}

080033d2 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80033d2:	b580      	push	{r7, lr}
 80033d4:	b084      	sub	sp, #16
 80033d6:	af00      	add	r7, sp, #0
 80033d8:	60f8      	str	r0, [r7, #12]
 80033da:	60b9      	str	r1, [r7, #8]
 80033dc:	603b      	str	r3, [r7, #0]
 80033de:	4613      	mov	r3, r2
 80033e0:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80033e2:	e04c      	b.n	800347e <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033ea:	d048      	beq.n	800347e <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80033ec:	f7fd fe0a 	bl	8001004 <HAL_GetTick>
 80033f0:	4602      	mov	r2, r0
 80033f2:	69bb      	ldr	r3, [r7, #24]
 80033f4:	1ad3      	subs	r3, r2, r3
 80033f6:	683a      	ldr	r2, [r7, #0]
 80033f8:	429a      	cmp	r2, r3
 80033fa:	d902      	bls.n	8003402 <SPI_WaitFlagStateUntilTimeout+0x30>
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d13d      	bne.n	800347e <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	685a      	ldr	r2, [r3, #4]
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003410:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	685b      	ldr	r3, [r3, #4]
 8003416:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800341a:	d111      	bne.n	8003440 <SPI_WaitFlagStateUntilTimeout+0x6e>
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	689b      	ldr	r3, [r3, #8]
 8003420:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003424:	d004      	beq.n	8003430 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	689b      	ldr	r3, [r3, #8]
 800342a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800342e:	d107      	bne.n	8003440 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	681a      	ldr	r2, [r3, #0]
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800343e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003444:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003448:	d10f      	bne.n	800346a <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	681a      	ldr	r2, [r3, #0]
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003458:	601a      	str	r2, [r3, #0]
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	681a      	ldr	r2, [r3, #0]
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003468:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	2201      	movs	r2, #1
 800346e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	2200      	movs	r2, #0
 8003476:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800347a:	2303      	movs	r3, #3
 800347c:	e00f      	b.n	800349e <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	689a      	ldr	r2, [r3, #8]
 8003484:	68bb      	ldr	r3, [r7, #8]
 8003486:	4013      	ands	r3, r2
 8003488:	68ba      	ldr	r2, [r7, #8]
 800348a:	429a      	cmp	r2, r3
 800348c:	bf0c      	ite	eq
 800348e:	2301      	moveq	r3, #1
 8003490:	2300      	movne	r3, #0
 8003492:	b2db      	uxtb	r3, r3
 8003494:	461a      	mov	r2, r3
 8003496:	79fb      	ldrb	r3, [r7, #7]
 8003498:	429a      	cmp	r2, r3
 800349a:	d1a3      	bne.n	80033e4 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800349c:	2300      	movs	r3, #0
}
 800349e:	4618      	mov	r0, r3
 80034a0:	3710      	adds	r7, #16
 80034a2:	46bd      	mov	sp, r7
 80034a4:	bd80      	pop	{r7, pc}

080034a6 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80034a6:	b580      	push	{r7, lr}
 80034a8:	b086      	sub	sp, #24
 80034aa:	af02      	add	r7, sp, #8
 80034ac:	60f8      	str	r0, [r7, #12]
 80034ae:	60b9      	str	r1, [r7, #8]
 80034b0:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	685b      	ldr	r3, [r3, #4]
 80034b6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80034ba:	d111      	bne.n	80034e0 <SPI_EndRxTransaction+0x3a>
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	689b      	ldr	r3, [r3, #8]
 80034c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80034c4:	d004      	beq.n	80034d0 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	689b      	ldr	r3, [r3, #8]
 80034ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034ce:	d107      	bne.n	80034e0 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	681a      	ldr	r2, [r3, #0]
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80034de:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	685b      	ldr	r3, [r3, #4]
 80034e4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80034e8:	d12a      	bne.n	8003540 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	689b      	ldr	r3, [r3, #8]
 80034ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034f2:	d012      	beq.n	800351a <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	9300      	str	r3, [sp, #0]
 80034f8:	68bb      	ldr	r3, [r7, #8]
 80034fa:	2200      	movs	r2, #0
 80034fc:	2180      	movs	r1, #128	; 0x80
 80034fe:	68f8      	ldr	r0, [r7, #12]
 8003500:	f7ff ff67 	bl	80033d2 <SPI_WaitFlagStateUntilTimeout>
 8003504:	4603      	mov	r3, r0
 8003506:	2b00      	cmp	r3, #0
 8003508:	d02d      	beq.n	8003566 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800350e:	f043 0220 	orr.w	r2, r3, #32
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8003516:	2303      	movs	r3, #3
 8003518:	e026      	b.n	8003568 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	9300      	str	r3, [sp, #0]
 800351e:	68bb      	ldr	r3, [r7, #8]
 8003520:	2200      	movs	r2, #0
 8003522:	2101      	movs	r1, #1
 8003524:	68f8      	ldr	r0, [r7, #12]
 8003526:	f7ff ff54 	bl	80033d2 <SPI_WaitFlagStateUntilTimeout>
 800352a:	4603      	mov	r3, r0
 800352c:	2b00      	cmp	r3, #0
 800352e:	d01a      	beq.n	8003566 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003534:	f043 0220 	orr.w	r2, r3, #32
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800353c:	2303      	movs	r3, #3
 800353e:	e013      	b.n	8003568 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	9300      	str	r3, [sp, #0]
 8003544:	68bb      	ldr	r3, [r7, #8]
 8003546:	2200      	movs	r2, #0
 8003548:	2101      	movs	r1, #1
 800354a:	68f8      	ldr	r0, [r7, #12]
 800354c:	f7ff ff41 	bl	80033d2 <SPI_WaitFlagStateUntilTimeout>
 8003550:	4603      	mov	r3, r0
 8003552:	2b00      	cmp	r3, #0
 8003554:	d007      	beq.n	8003566 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800355a:	f043 0220 	orr.w	r2, r3, #32
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003562:	2303      	movs	r3, #3
 8003564:	e000      	b.n	8003568 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8003566:	2300      	movs	r3, #0
}
 8003568:	4618      	mov	r0, r3
 800356a:	3710      	adds	r7, #16
 800356c:	46bd      	mov	sp, r7
 800356e:	bd80      	pop	{r7, pc}

08003570 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b088      	sub	sp, #32
 8003574:	af02      	add	r7, sp, #8
 8003576:	60f8      	str	r0, [r7, #12]
 8003578:	60b9      	str	r1, [r7, #8]
 800357a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800357c:	4b1b      	ldr	r3, [pc, #108]	; (80035ec <SPI_EndRxTxTransaction+0x7c>)
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4a1b      	ldr	r2, [pc, #108]	; (80035f0 <SPI_EndRxTxTransaction+0x80>)
 8003582:	fba2 2303 	umull	r2, r3, r2, r3
 8003586:	0d5b      	lsrs	r3, r3, #21
 8003588:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800358c:	fb02 f303 	mul.w	r3, r2, r3
 8003590:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	685b      	ldr	r3, [r3, #4]
 8003596:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800359a:	d112      	bne.n	80035c2 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	9300      	str	r3, [sp, #0]
 80035a0:	68bb      	ldr	r3, [r7, #8]
 80035a2:	2200      	movs	r2, #0
 80035a4:	2180      	movs	r1, #128	; 0x80
 80035a6:	68f8      	ldr	r0, [r7, #12]
 80035a8:	f7ff ff13 	bl	80033d2 <SPI_WaitFlagStateUntilTimeout>
 80035ac:	4603      	mov	r3, r0
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d016      	beq.n	80035e0 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035b6:	f043 0220 	orr.w	r2, r3, #32
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80035be:	2303      	movs	r3, #3
 80035c0:	e00f      	b.n	80035e2 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80035c2:	697b      	ldr	r3, [r7, #20]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d00a      	beq.n	80035de <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80035c8:	697b      	ldr	r3, [r7, #20]
 80035ca:	3b01      	subs	r3, #1
 80035cc:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	689b      	ldr	r3, [r3, #8]
 80035d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035d8:	2b80      	cmp	r3, #128	; 0x80
 80035da:	d0f2      	beq.n	80035c2 <SPI_EndRxTxTransaction+0x52>
 80035dc:	e000      	b.n	80035e0 <SPI_EndRxTxTransaction+0x70>
        break;
 80035de:	bf00      	nop
  }

  return HAL_OK;
 80035e0:	2300      	movs	r3, #0
}
 80035e2:	4618      	mov	r0, r3
 80035e4:	3718      	adds	r7, #24
 80035e6:	46bd      	mov	sp, r7
 80035e8:	bd80      	pop	{r7, pc}
 80035ea:	bf00      	nop
 80035ec:	20000080 	.word	0x20000080
 80035f0:	165e9f81 	.word	0x165e9f81

080035f4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b082      	sub	sp, #8
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d101      	bne.n	8003606 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003602:	2301      	movs	r3, #1
 8003604:	e01d      	b.n	8003642 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800360c:	b2db      	uxtb	r3, r3
 800360e:	2b00      	cmp	r3, #0
 8003610:	d106      	bne.n	8003620 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2200      	movs	r2, #0
 8003616:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800361a:	6878      	ldr	r0, [r7, #4]
 800361c:	f00e fd8a 	bl	8012134 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2202      	movs	r2, #2
 8003624:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681a      	ldr	r2, [r3, #0]
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	3304      	adds	r3, #4
 8003630:	4619      	mov	r1, r3
 8003632:	4610      	mov	r0, r2
 8003634:	f000 fc70 	bl	8003f18 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2201      	movs	r2, #1
 800363c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003640:	2300      	movs	r3, #0
}
 8003642:	4618      	mov	r0, r3
 8003644:	3708      	adds	r7, #8
 8003646:	46bd      	mov	sp, r7
 8003648:	bd80      	pop	{r7, pc}

0800364a <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800364a:	b480      	push	{r7}
 800364c:	b085      	sub	sp, #20
 800364e:	af00      	add	r7, sp, #0
 8003650:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	68da      	ldr	r2, [r3, #12]
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f042 0201 	orr.w	r2, r2, #1
 8003660:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	689b      	ldr	r3, [r3, #8]
 8003668:	f003 0307 	and.w	r3, r3, #7
 800366c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	2b06      	cmp	r3, #6
 8003672:	d007      	beq.n	8003684 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	681a      	ldr	r2, [r3, #0]
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f042 0201 	orr.w	r2, r2, #1
 8003682:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003684:	2300      	movs	r3, #0
}
 8003686:	4618      	mov	r0, r3
 8003688:	3714      	adds	r7, #20
 800368a:	46bd      	mov	sp, r7
 800368c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003690:	4770      	bx	lr

08003692 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003692:	b580      	push	{r7, lr}
 8003694:	b082      	sub	sp, #8
 8003696:	af00      	add	r7, sp, #0
 8003698:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2b00      	cmp	r3, #0
 800369e:	d101      	bne.n	80036a4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80036a0:	2301      	movs	r3, #1
 80036a2:	e01d      	b.n	80036e0 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036aa:	b2db      	uxtb	r3, r3
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d106      	bne.n	80036be <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2200      	movs	r2, #0
 80036b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80036b8:	6878      	ldr	r0, [r7, #4]
 80036ba:	f000 f815 	bl	80036e8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	2202      	movs	r2, #2
 80036c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681a      	ldr	r2, [r3, #0]
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	3304      	adds	r3, #4
 80036ce:	4619      	mov	r1, r3
 80036d0:	4610      	mov	r0, r2
 80036d2:	f000 fc21 	bl	8003f18 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2201      	movs	r2, #1
 80036da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80036de:	2300      	movs	r3, #0
}
 80036e0:	4618      	mov	r0, r3
 80036e2:	3708      	adds	r7, #8
 80036e4:	46bd      	mov	sp, r7
 80036e6:	bd80      	pop	{r7, pc}

080036e8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80036e8:	b480      	push	{r7}
 80036ea:	b083      	sub	sp, #12
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80036f0:	bf00      	nop
 80036f2:	370c      	adds	r7, #12
 80036f4:	46bd      	mov	sp, r7
 80036f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fa:	4770      	bx	lr

080036fc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b084      	sub	sp, #16
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
 8003704:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	2201      	movs	r2, #1
 800370c:	6839      	ldr	r1, [r7, #0]
 800370e:	4618      	mov	r0, r3
 8003710:	f000 feec 	bl	80044ec <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	4a15      	ldr	r2, [pc, #84]	; (8003770 <HAL_TIM_PWM_Start+0x74>)
 800371a:	4293      	cmp	r3, r2
 800371c:	d004      	beq.n	8003728 <HAL_TIM_PWM_Start+0x2c>
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	4a14      	ldr	r2, [pc, #80]	; (8003774 <HAL_TIM_PWM_Start+0x78>)
 8003724:	4293      	cmp	r3, r2
 8003726:	d101      	bne.n	800372c <HAL_TIM_PWM_Start+0x30>
 8003728:	2301      	movs	r3, #1
 800372a:	e000      	b.n	800372e <HAL_TIM_PWM_Start+0x32>
 800372c:	2300      	movs	r3, #0
 800372e:	2b00      	cmp	r3, #0
 8003730:	d007      	beq.n	8003742 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003740:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	689b      	ldr	r3, [r3, #8]
 8003748:	f003 0307 	and.w	r3, r3, #7
 800374c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	2b06      	cmp	r3, #6
 8003752:	d007      	beq.n	8003764 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	681a      	ldr	r2, [r3, #0]
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f042 0201 	orr.w	r2, r2, #1
 8003762:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003764:	2300      	movs	r3, #0
}
 8003766:	4618      	mov	r0, r3
 8003768:	3710      	adds	r7, #16
 800376a:	46bd      	mov	sp, r7
 800376c:	bd80      	pop	{r7, pc}
 800376e:	bf00      	nop
 8003770:	40010000 	.word	0x40010000
 8003774:	40010400 	.word	0x40010400

08003778 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	b082      	sub	sp, #8
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
 8003780:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	2200      	movs	r2, #0
 8003788:	6839      	ldr	r1, [r7, #0]
 800378a:	4618      	mov	r0, r3
 800378c:	f000 feae 	bl	80044ec <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	4a22      	ldr	r2, [pc, #136]	; (8003820 <HAL_TIM_PWM_Stop+0xa8>)
 8003796:	4293      	cmp	r3, r2
 8003798:	d004      	beq.n	80037a4 <HAL_TIM_PWM_Stop+0x2c>
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	4a21      	ldr	r2, [pc, #132]	; (8003824 <HAL_TIM_PWM_Stop+0xac>)
 80037a0:	4293      	cmp	r3, r2
 80037a2:	d101      	bne.n	80037a8 <HAL_TIM_PWM_Stop+0x30>
 80037a4:	2301      	movs	r3, #1
 80037a6:	e000      	b.n	80037aa <HAL_TIM_PWM_Stop+0x32>
 80037a8:	2300      	movs	r3, #0
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d017      	beq.n	80037de <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	6a1a      	ldr	r2, [r3, #32]
 80037b4:	f241 1311 	movw	r3, #4369	; 0x1111
 80037b8:	4013      	ands	r3, r2
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d10f      	bne.n	80037de <HAL_TIM_PWM_Stop+0x66>
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	6a1a      	ldr	r2, [r3, #32]
 80037c4:	f240 4344 	movw	r3, #1092	; 0x444
 80037c8:	4013      	ands	r3, r2
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d107      	bne.n	80037de <HAL_TIM_PWM_Stop+0x66>
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80037dc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	6a1a      	ldr	r2, [r3, #32]
 80037e4:	f241 1311 	movw	r3, #4369	; 0x1111
 80037e8:	4013      	ands	r3, r2
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d10f      	bne.n	800380e <HAL_TIM_PWM_Stop+0x96>
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	6a1a      	ldr	r2, [r3, #32]
 80037f4:	f240 4344 	movw	r3, #1092	; 0x444
 80037f8:	4013      	ands	r3, r2
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d107      	bne.n	800380e <HAL_TIM_PWM_Stop+0x96>
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	681a      	ldr	r2, [r3, #0]
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f022 0201 	bic.w	r2, r2, #1
 800380c:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	2201      	movs	r2, #1
 8003812:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8003816:	2300      	movs	r3, #0
}
 8003818:	4618      	mov	r0, r3
 800381a:	3708      	adds	r7, #8
 800381c:	46bd      	mov	sp, r7
 800381e:	bd80      	pop	{r7, pc}
 8003820:	40010000 	.word	0x40010000
 8003824:	40010400 	.word	0x40010400

08003828 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	b086      	sub	sp, #24
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
 8003830:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	2b00      	cmp	r3, #0
 8003836:	d101      	bne.n	800383c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003838:	2301      	movs	r3, #1
 800383a:	e083      	b.n	8003944 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003842:	b2db      	uxtb	r3, r3
 8003844:	2b00      	cmp	r3, #0
 8003846:	d106      	bne.n	8003856 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2200      	movs	r2, #0
 800384c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003850:	6878      	ldr	r0, [r7, #4]
 8003852:	f00e fcc1 	bl	80121d8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2202      	movs	r2, #2
 800385a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	689b      	ldr	r3, [r3, #8]
 8003864:	687a      	ldr	r2, [r7, #4]
 8003866:	6812      	ldr	r2, [r2, #0]
 8003868:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800386c:	f023 0307 	bic.w	r3, r3, #7
 8003870:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681a      	ldr	r2, [r3, #0]
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	3304      	adds	r3, #4
 800387a:	4619      	mov	r1, r3
 800387c:	4610      	mov	r0, r2
 800387e:	f000 fb4b 	bl	8003f18 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	689b      	ldr	r3, [r3, #8]
 8003888:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	699b      	ldr	r3, [r3, #24]
 8003890:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	6a1b      	ldr	r3, [r3, #32]
 8003898:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	697a      	ldr	r2, [r7, #20]
 80038a0:	4313      	orrs	r3, r2
 80038a2:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80038a4:	693b      	ldr	r3, [r7, #16]
 80038a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038aa:	f023 0303 	bic.w	r3, r3, #3
 80038ae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	689a      	ldr	r2, [r3, #8]
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	699b      	ldr	r3, [r3, #24]
 80038b8:	021b      	lsls	r3, r3, #8
 80038ba:	4313      	orrs	r3, r2
 80038bc:	693a      	ldr	r2, [r7, #16]
 80038be:	4313      	orrs	r3, r2
 80038c0:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80038c2:	693b      	ldr	r3, [r7, #16]
 80038c4:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80038c8:	f023 030c 	bic.w	r3, r3, #12
 80038cc:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80038ce:	693b      	ldr	r3, [r7, #16]
 80038d0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80038d4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80038d8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	68da      	ldr	r2, [r3, #12]
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	69db      	ldr	r3, [r3, #28]
 80038e2:	021b      	lsls	r3, r3, #8
 80038e4:	4313      	orrs	r3, r2
 80038e6:	693a      	ldr	r2, [r7, #16]
 80038e8:	4313      	orrs	r3, r2
 80038ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	691b      	ldr	r3, [r3, #16]
 80038f0:	011a      	lsls	r2, r3, #4
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	6a1b      	ldr	r3, [r3, #32]
 80038f6:	031b      	lsls	r3, r3, #12
 80038f8:	4313      	orrs	r3, r2
 80038fa:	693a      	ldr	r2, [r7, #16]
 80038fc:	4313      	orrs	r3, r2
 80038fe:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8003906:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800390e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	685a      	ldr	r2, [r3, #4]
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	695b      	ldr	r3, [r3, #20]
 8003918:	011b      	lsls	r3, r3, #4
 800391a:	4313      	orrs	r3, r2
 800391c:	68fa      	ldr	r2, [r7, #12]
 800391e:	4313      	orrs	r3, r2
 8003920:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	697a      	ldr	r2, [r7, #20]
 8003928:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	693a      	ldr	r2, [r7, #16]
 8003930:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	68fa      	ldr	r2, [r7, #12]
 8003938:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	2201      	movs	r2, #1
 800393e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003942:	2300      	movs	r3, #0
}
 8003944:	4618      	mov	r0, r3
 8003946:	3718      	adds	r7, #24
 8003948:	46bd      	mov	sp, r7
 800394a:	bd80      	pop	{r7, pc}

0800394c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800394c:	b580      	push	{r7, lr}
 800394e:	b082      	sub	sp, #8
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
 8003954:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 8003956:	683b      	ldr	r3, [r7, #0]
 8003958:	2b00      	cmp	r3, #0
 800395a:	d002      	beq.n	8003962 <HAL_TIM_Encoder_Start+0x16>
 800395c:	2b04      	cmp	r3, #4
 800395e:	d008      	beq.n	8003972 <HAL_TIM_Encoder_Start+0x26>
 8003960:	e00f      	b.n	8003982 <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	2201      	movs	r2, #1
 8003968:	2100      	movs	r1, #0
 800396a:	4618      	mov	r0, r3
 800396c:	f000 fdbe 	bl	80044ec <TIM_CCxChannelCmd>
      break;
 8003970:	e016      	b.n	80039a0 <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	2201      	movs	r2, #1
 8003978:	2104      	movs	r1, #4
 800397a:	4618      	mov	r0, r3
 800397c:	f000 fdb6 	bl	80044ec <TIM_CCxChannelCmd>
      break;
 8003980:	e00e      	b.n	80039a0 <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	2201      	movs	r2, #1
 8003988:	2100      	movs	r1, #0
 800398a:	4618      	mov	r0, r3
 800398c:	f000 fdae 	bl	80044ec <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	2201      	movs	r2, #1
 8003996:	2104      	movs	r1, #4
 8003998:	4618      	mov	r0, r3
 800399a:	f000 fda7 	bl	80044ec <TIM_CCxChannelCmd>
      break;
 800399e:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	681a      	ldr	r2, [r3, #0]
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f042 0201 	orr.w	r2, r2, #1
 80039ae:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80039b0:	2300      	movs	r3, #0
}
 80039b2:	4618      	mov	r0, r3
 80039b4:	3708      	adds	r7, #8
 80039b6:	46bd      	mov	sp, r7
 80039b8:	bd80      	pop	{r7, pc}

080039ba <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80039ba:	b580      	push	{r7, lr}
 80039bc:	b082      	sub	sp, #8
 80039be:	af00      	add	r7, sp, #0
 80039c0:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	691b      	ldr	r3, [r3, #16]
 80039c8:	f003 0302 	and.w	r3, r3, #2
 80039cc:	2b02      	cmp	r3, #2
 80039ce:	d122      	bne.n	8003a16 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	68db      	ldr	r3, [r3, #12]
 80039d6:	f003 0302 	and.w	r3, r3, #2
 80039da:	2b02      	cmp	r3, #2
 80039dc:	d11b      	bne.n	8003a16 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f06f 0202 	mvn.w	r2, #2
 80039e6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2201      	movs	r2, #1
 80039ec:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	699b      	ldr	r3, [r3, #24]
 80039f4:	f003 0303 	and.w	r3, r3, #3
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d003      	beq.n	8003a04 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80039fc:	6878      	ldr	r0, [r7, #4]
 80039fe:	f000 fa6c 	bl	8003eda <HAL_TIM_IC_CaptureCallback>
 8003a02:	e005      	b.n	8003a10 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a04:	6878      	ldr	r0, [r7, #4]
 8003a06:	f000 fa5e 	bl	8003ec6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a0a:	6878      	ldr	r0, [r7, #4]
 8003a0c:	f000 fa6f 	bl	8003eee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2200      	movs	r2, #0
 8003a14:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	691b      	ldr	r3, [r3, #16]
 8003a1c:	f003 0304 	and.w	r3, r3, #4
 8003a20:	2b04      	cmp	r3, #4
 8003a22:	d122      	bne.n	8003a6a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	68db      	ldr	r3, [r3, #12]
 8003a2a:	f003 0304 	and.w	r3, r3, #4
 8003a2e:	2b04      	cmp	r3, #4
 8003a30:	d11b      	bne.n	8003a6a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f06f 0204 	mvn.w	r2, #4
 8003a3a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2202      	movs	r2, #2
 8003a40:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	699b      	ldr	r3, [r3, #24]
 8003a48:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d003      	beq.n	8003a58 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a50:	6878      	ldr	r0, [r7, #4]
 8003a52:	f000 fa42 	bl	8003eda <HAL_TIM_IC_CaptureCallback>
 8003a56:	e005      	b.n	8003a64 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a58:	6878      	ldr	r0, [r7, #4]
 8003a5a:	f000 fa34 	bl	8003ec6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a5e:	6878      	ldr	r0, [r7, #4]
 8003a60:	f000 fa45 	bl	8003eee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2200      	movs	r2, #0
 8003a68:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	691b      	ldr	r3, [r3, #16]
 8003a70:	f003 0308 	and.w	r3, r3, #8
 8003a74:	2b08      	cmp	r3, #8
 8003a76:	d122      	bne.n	8003abe <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	68db      	ldr	r3, [r3, #12]
 8003a7e:	f003 0308 	and.w	r3, r3, #8
 8003a82:	2b08      	cmp	r3, #8
 8003a84:	d11b      	bne.n	8003abe <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f06f 0208 	mvn.w	r2, #8
 8003a8e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2204      	movs	r2, #4
 8003a94:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	69db      	ldr	r3, [r3, #28]
 8003a9c:	f003 0303 	and.w	r3, r3, #3
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d003      	beq.n	8003aac <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003aa4:	6878      	ldr	r0, [r7, #4]
 8003aa6:	f000 fa18 	bl	8003eda <HAL_TIM_IC_CaptureCallback>
 8003aaa:	e005      	b.n	8003ab8 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003aac:	6878      	ldr	r0, [r7, #4]
 8003aae:	f000 fa0a 	bl	8003ec6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ab2:	6878      	ldr	r0, [r7, #4]
 8003ab4:	f000 fa1b 	bl	8003eee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2200      	movs	r2, #0
 8003abc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	691b      	ldr	r3, [r3, #16]
 8003ac4:	f003 0310 	and.w	r3, r3, #16
 8003ac8:	2b10      	cmp	r3, #16
 8003aca:	d122      	bne.n	8003b12 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	68db      	ldr	r3, [r3, #12]
 8003ad2:	f003 0310 	and.w	r3, r3, #16
 8003ad6:	2b10      	cmp	r3, #16
 8003ad8:	d11b      	bne.n	8003b12 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f06f 0210 	mvn.w	r2, #16
 8003ae2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2208      	movs	r2, #8
 8003ae8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	69db      	ldr	r3, [r3, #28]
 8003af0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d003      	beq.n	8003b00 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003af8:	6878      	ldr	r0, [r7, #4]
 8003afa:	f000 f9ee 	bl	8003eda <HAL_TIM_IC_CaptureCallback>
 8003afe:	e005      	b.n	8003b0c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b00:	6878      	ldr	r0, [r7, #4]
 8003b02:	f000 f9e0 	bl	8003ec6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b06:	6878      	ldr	r0, [r7, #4]
 8003b08:	f000 f9f1 	bl	8003eee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2200      	movs	r2, #0
 8003b10:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	691b      	ldr	r3, [r3, #16]
 8003b18:	f003 0301 	and.w	r3, r3, #1
 8003b1c:	2b01      	cmp	r3, #1
 8003b1e:	d10e      	bne.n	8003b3e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	68db      	ldr	r3, [r3, #12]
 8003b26:	f003 0301 	and.w	r3, r3, #1
 8003b2a:	2b01      	cmp	r3, #1
 8003b2c:	d107      	bne.n	8003b3e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f06f 0201 	mvn.w	r2, #1
 8003b36:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003b38:	6878      	ldr	r0, [r7, #4]
 8003b3a:	f008 ff99 	bl	800ca70 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	691b      	ldr	r3, [r3, #16]
 8003b44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b48:	2b80      	cmp	r3, #128	; 0x80
 8003b4a:	d10e      	bne.n	8003b6a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	68db      	ldr	r3, [r3, #12]
 8003b52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b56:	2b80      	cmp	r3, #128	; 0x80
 8003b58:	d107      	bne.n	8003b6a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003b62:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003b64:	6878      	ldr	r0, [r7, #4]
 8003b66:	f000 fd35 	bl	80045d4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	691b      	ldr	r3, [r3, #16]
 8003b70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b74:	2b40      	cmp	r3, #64	; 0x40
 8003b76:	d10e      	bne.n	8003b96 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	68db      	ldr	r3, [r3, #12]
 8003b7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b82:	2b40      	cmp	r3, #64	; 0x40
 8003b84:	d107      	bne.n	8003b96 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003b8e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003b90:	6878      	ldr	r0, [r7, #4]
 8003b92:	f000 f9b6 	bl	8003f02 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	691b      	ldr	r3, [r3, #16]
 8003b9c:	f003 0320 	and.w	r3, r3, #32
 8003ba0:	2b20      	cmp	r3, #32
 8003ba2:	d10e      	bne.n	8003bc2 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	68db      	ldr	r3, [r3, #12]
 8003baa:	f003 0320 	and.w	r3, r3, #32
 8003bae:	2b20      	cmp	r3, #32
 8003bb0:	d107      	bne.n	8003bc2 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f06f 0220 	mvn.w	r2, #32
 8003bba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003bbc:	6878      	ldr	r0, [r7, #4]
 8003bbe:	f000 fcff 	bl	80045c0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003bc2:	bf00      	nop
 8003bc4:	3708      	adds	r7, #8
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	bd80      	pop	{r7, pc}
	...

08003bcc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b084      	sub	sp, #16
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	60f8      	str	r0, [r7, #12]
 8003bd4:	60b9      	str	r1, [r7, #8]
 8003bd6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003bde:	2b01      	cmp	r3, #1
 8003be0:	d101      	bne.n	8003be6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003be2:	2302      	movs	r3, #2
 8003be4:	e0b4      	b.n	8003d50 <HAL_TIM_PWM_ConfigChannel+0x184>
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	2201      	movs	r2, #1
 8003bea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	2202      	movs	r2, #2
 8003bf2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	2b0c      	cmp	r3, #12
 8003bfa:	f200 809f 	bhi.w	8003d3c <HAL_TIM_PWM_ConfigChannel+0x170>
 8003bfe:	a201      	add	r2, pc, #4	; (adr r2, 8003c04 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8003c00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c04:	08003c39 	.word	0x08003c39
 8003c08:	08003d3d 	.word	0x08003d3d
 8003c0c:	08003d3d 	.word	0x08003d3d
 8003c10:	08003d3d 	.word	0x08003d3d
 8003c14:	08003c79 	.word	0x08003c79
 8003c18:	08003d3d 	.word	0x08003d3d
 8003c1c:	08003d3d 	.word	0x08003d3d
 8003c20:	08003d3d 	.word	0x08003d3d
 8003c24:	08003cbb 	.word	0x08003cbb
 8003c28:	08003d3d 	.word	0x08003d3d
 8003c2c:	08003d3d 	.word	0x08003d3d
 8003c30:	08003d3d 	.word	0x08003d3d
 8003c34:	08003cfb 	.word	0x08003cfb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	68b9      	ldr	r1, [r7, #8]
 8003c3e:	4618      	mov	r0, r3
 8003c40:	f000 fa0a 	bl	8004058 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	699a      	ldr	r2, [r3, #24]
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f042 0208 	orr.w	r2, r2, #8
 8003c52:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	699a      	ldr	r2, [r3, #24]
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f022 0204 	bic.w	r2, r2, #4
 8003c62:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	6999      	ldr	r1, [r3, #24]
 8003c6a:	68bb      	ldr	r3, [r7, #8]
 8003c6c:	691a      	ldr	r2, [r3, #16]
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	430a      	orrs	r2, r1
 8003c74:	619a      	str	r2, [r3, #24]
      break;
 8003c76:	e062      	b.n	8003d3e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	68b9      	ldr	r1, [r7, #8]
 8003c7e:	4618      	mov	r0, r3
 8003c80:	f000 fa5a 	bl	8004138 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	699a      	ldr	r2, [r3, #24]
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003c92:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	699a      	ldr	r2, [r3, #24]
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ca2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	6999      	ldr	r1, [r3, #24]
 8003caa:	68bb      	ldr	r3, [r7, #8]
 8003cac:	691b      	ldr	r3, [r3, #16]
 8003cae:	021a      	lsls	r2, r3, #8
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	430a      	orrs	r2, r1
 8003cb6:	619a      	str	r2, [r3, #24]
      break;
 8003cb8:	e041      	b.n	8003d3e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	68b9      	ldr	r1, [r7, #8]
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	f000 faaf 	bl	8004224 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	69da      	ldr	r2, [r3, #28]
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f042 0208 	orr.w	r2, r2, #8
 8003cd4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	69da      	ldr	r2, [r3, #28]
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f022 0204 	bic.w	r2, r2, #4
 8003ce4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	69d9      	ldr	r1, [r3, #28]
 8003cec:	68bb      	ldr	r3, [r7, #8]
 8003cee:	691a      	ldr	r2, [r3, #16]
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	430a      	orrs	r2, r1
 8003cf6:	61da      	str	r2, [r3, #28]
      break;
 8003cf8:	e021      	b.n	8003d3e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	68b9      	ldr	r1, [r7, #8]
 8003d00:	4618      	mov	r0, r3
 8003d02:	f000 fb03 	bl	800430c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	69da      	ldr	r2, [r3, #28]
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003d14:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	69da      	ldr	r2, [r3, #28]
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d24:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	69d9      	ldr	r1, [r3, #28]
 8003d2c:	68bb      	ldr	r3, [r7, #8]
 8003d2e:	691b      	ldr	r3, [r3, #16]
 8003d30:	021a      	lsls	r2, r3, #8
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	430a      	orrs	r2, r1
 8003d38:	61da      	str	r2, [r3, #28]
      break;
 8003d3a:	e000      	b.n	8003d3e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8003d3c:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	2201      	movs	r2, #1
 8003d42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	2200      	movs	r2, #0
 8003d4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003d4e:	2300      	movs	r3, #0
}
 8003d50:	4618      	mov	r0, r3
 8003d52:	3710      	adds	r7, #16
 8003d54:	46bd      	mov	sp, r7
 8003d56:	bd80      	pop	{r7, pc}

08003d58 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b084      	sub	sp, #16
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
 8003d60:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d68:	2b01      	cmp	r3, #1
 8003d6a:	d101      	bne.n	8003d70 <HAL_TIM_ConfigClockSource+0x18>
 8003d6c:	2302      	movs	r3, #2
 8003d6e:	e0a6      	b.n	8003ebe <HAL_TIM_ConfigClockSource+0x166>
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2201      	movs	r2, #1
 8003d74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2202      	movs	r2, #2
 8003d7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	689b      	ldr	r3, [r3, #8]
 8003d86:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003d8e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003d96:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	68fa      	ldr	r2, [r7, #12]
 8003d9e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	2b40      	cmp	r3, #64	; 0x40
 8003da6:	d067      	beq.n	8003e78 <HAL_TIM_ConfigClockSource+0x120>
 8003da8:	2b40      	cmp	r3, #64	; 0x40
 8003daa:	d80b      	bhi.n	8003dc4 <HAL_TIM_ConfigClockSource+0x6c>
 8003dac:	2b10      	cmp	r3, #16
 8003dae:	d073      	beq.n	8003e98 <HAL_TIM_ConfigClockSource+0x140>
 8003db0:	2b10      	cmp	r3, #16
 8003db2:	d802      	bhi.n	8003dba <HAL_TIM_ConfigClockSource+0x62>
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d06f      	beq.n	8003e98 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8003db8:	e078      	b.n	8003eac <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003dba:	2b20      	cmp	r3, #32
 8003dbc:	d06c      	beq.n	8003e98 <HAL_TIM_ConfigClockSource+0x140>
 8003dbe:	2b30      	cmp	r3, #48	; 0x30
 8003dc0:	d06a      	beq.n	8003e98 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8003dc2:	e073      	b.n	8003eac <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003dc4:	2b70      	cmp	r3, #112	; 0x70
 8003dc6:	d00d      	beq.n	8003de4 <HAL_TIM_ConfigClockSource+0x8c>
 8003dc8:	2b70      	cmp	r3, #112	; 0x70
 8003dca:	d804      	bhi.n	8003dd6 <HAL_TIM_ConfigClockSource+0x7e>
 8003dcc:	2b50      	cmp	r3, #80	; 0x50
 8003dce:	d033      	beq.n	8003e38 <HAL_TIM_ConfigClockSource+0xe0>
 8003dd0:	2b60      	cmp	r3, #96	; 0x60
 8003dd2:	d041      	beq.n	8003e58 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8003dd4:	e06a      	b.n	8003eac <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003dd6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003dda:	d066      	beq.n	8003eaa <HAL_TIM_ConfigClockSource+0x152>
 8003ddc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003de0:	d017      	beq.n	8003e12 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8003de2:	e063      	b.n	8003eac <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6818      	ldr	r0, [r3, #0]
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	6899      	ldr	r1, [r3, #8]
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	685a      	ldr	r2, [r3, #4]
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	68db      	ldr	r3, [r3, #12]
 8003df4:	f000 fb5a 	bl	80044ac <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	689b      	ldr	r3, [r3, #8]
 8003dfe:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003e06:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	68fa      	ldr	r2, [r7, #12]
 8003e0e:	609a      	str	r2, [r3, #8]
      break;
 8003e10:	e04c      	b.n	8003eac <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6818      	ldr	r0, [r3, #0]
 8003e16:	683b      	ldr	r3, [r7, #0]
 8003e18:	6899      	ldr	r1, [r3, #8]
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	685a      	ldr	r2, [r3, #4]
 8003e1e:	683b      	ldr	r3, [r7, #0]
 8003e20:	68db      	ldr	r3, [r3, #12]
 8003e22:	f000 fb43 	bl	80044ac <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	689a      	ldr	r2, [r3, #8]
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003e34:	609a      	str	r2, [r3, #8]
      break;
 8003e36:	e039      	b.n	8003eac <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	6818      	ldr	r0, [r3, #0]
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	6859      	ldr	r1, [r3, #4]
 8003e40:	683b      	ldr	r3, [r7, #0]
 8003e42:	68db      	ldr	r3, [r3, #12]
 8003e44:	461a      	mov	r2, r3
 8003e46:	f000 fab7 	bl	80043b8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	2150      	movs	r1, #80	; 0x50
 8003e50:	4618      	mov	r0, r3
 8003e52:	f000 fb10 	bl	8004476 <TIM_ITRx_SetConfig>
      break;
 8003e56:	e029      	b.n	8003eac <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6818      	ldr	r0, [r3, #0]
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	6859      	ldr	r1, [r3, #4]
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	68db      	ldr	r3, [r3, #12]
 8003e64:	461a      	mov	r2, r3
 8003e66:	f000 fad6 	bl	8004416 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	2160      	movs	r1, #96	; 0x60
 8003e70:	4618      	mov	r0, r3
 8003e72:	f000 fb00 	bl	8004476 <TIM_ITRx_SetConfig>
      break;
 8003e76:	e019      	b.n	8003eac <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6818      	ldr	r0, [r3, #0]
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	6859      	ldr	r1, [r3, #4]
 8003e80:	683b      	ldr	r3, [r7, #0]
 8003e82:	68db      	ldr	r3, [r3, #12]
 8003e84:	461a      	mov	r2, r3
 8003e86:	f000 fa97 	bl	80043b8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	2140      	movs	r1, #64	; 0x40
 8003e90:	4618      	mov	r0, r3
 8003e92:	f000 faf0 	bl	8004476 <TIM_ITRx_SetConfig>
      break;
 8003e96:	e009      	b.n	8003eac <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681a      	ldr	r2, [r3, #0]
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	4619      	mov	r1, r3
 8003ea2:	4610      	mov	r0, r2
 8003ea4:	f000 fae7 	bl	8004476 <TIM_ITRx_SetConfig>
      break;
 8003ea8:	e000      	b.n	8003eac <HAL_TIM_ConfigClockSource+0x154>
      break;
 8003eaa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2201      	movs	r2, #1
 8003eb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003ebc:	2300      	movs	r3, #0
}
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	3710      	adds	r7, #16
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	bd80      	pop	{r7, pc}

08003ec6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003ec6:	b480      	push	{r7}
 8003ec8:	b083      	sub	sp, #12
 8003eca:	af00      	add	r7, sp, #0
 8003ecc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003ece:	bf00      	nop
 8003ed0:	370c      	adds	r7, #12
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed8:	4770      	bx	lr

08003eda <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003eda:	b480      	push	{r7}
 8003edc:	b083      	sub	sp, #12
 8003ede:	af00      	add	r7, sp, #0
 8003ee0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003ee2:	bf00      	nop
 8003ee4:	370c      	adds	r7, #12
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eec:	4770      	bx	lr

08003eee <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003eee:	b480      	push	{r7}
 8003ef0:	b083      	sub	sp, #12
 8003ef2:	af00      	add	r7, sp, #0
 8003ef4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003ef6:	bf00      	nop
 8003ef8:	370c      	adds	r7, #12
 8003efa:	46bd      	mov	sp, r7
 8003efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f00:	4770      	bx	lr

08003f02 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003f02:	b480      	push	{r7}
 8003f04:	b083      	sub	sp, #12
 8003f06:	af00      	add	r7, sp, #0
 8003f08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003f0a:	bf00      	nop
 8003f0c:	370c      	adds	r7, #12
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f14:	4770      	bx	lr
	...

08003f18 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003f18:	b480      	push	{r7}
 8003f1a:	b085      	sub	sp, #20
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
 8003f20:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	4a40      	ldr	r2, [pc, #256]	; (800402c <TIM_Base_SetConfig+0x114>)
 8003f2c:	4293      	cmp	r3, r2
 8003f2e:	d013      	beq.n	8003f58 <TIM_Base_SetConfig+0x40>
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f36:	d00f      	beq.n	8003f58 <TIM_Base_SetConfig+0x40>
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	4a3d      	ldr	r2, [pc, #244]	; (8004030 <TIM_Base_SetConfig+0x118>)
 8003f3c:	4293      	cmp	r3, r2
 8003f3e:	d00b      	beq.n	8003f58 <TIM_Base_SetConfig+0x40>
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	4a3c      	ldr	r2, [pc, #240]	; (8004034 <TIM_Base_SetConfig+0x11c>)
 8003f44:	4293      	cmp	r3, r2
 8003f46:	d007      	beq.n	8003f58 <TIM_Base_SetConfig+0x40>
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	4a3b      	ldr	r2, [pc, #236]	; (8004038 <TIM_Base_SetConfig+0x120>)
 8003f4c:	4293      	cmp	r3, r2
 8003f4e:	d003      	beq.n	8003f58 <TIM_Base_SetConfig+0x40>
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	4a3a      	ldr	r2, [pc, #232]	; (800403c <TIM_Base_SetConfig+0x124>)
 8003f54:	4293      	cmp	r3, r2
 8003f56:	d108      	bne.n	8003f6a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f5e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003f60:	683b      	ldr	r3, [r7, #0]
 8003f62:	685b      	ldr	r3, [r3, #4]
 8003f64:	68fa      	ldr	r2, [r7, #12]
 8003f66:	4313      	orrs	r3, r2
 8003f68:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	4a2f      	ldr	r2, [pc, #188]	; (800402c <TIM_Base_SetConfig+0x114>)
 8003f6e:	4293      	cmp	r3, r2
 8003f70:	d02b      	beq.n	8003fca <TIM_Base_SetConfig+0xb2>
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f78:	d027      	beq.n	8003fca <TIM_Base_SetConfig+0xb2>
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	4a2c      	ldr	r2, [pc, #176]	; (8004030 <TIM_Base_SetConfig+0x118>)
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	d023      	beq.n	8003fca <TIM_Base_SetConfig+0xb2>
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	4a2b      	ldr	r2, [pc, #172]	; (8004034 <TIM_Base_SetConfig+0x11c>)
 8003f86:	4293      	cmp	r3, r2
 8003f88:	d01f      	beq.n	8003fca <TIM_Base_SetConfig+0xb2>
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	4a2a      	ldr	r2, [pc, #168]	; (8004038 <TIM_Base_SetConfig+0x120>)
 8003f8e:	4293      	cmp	r3, r2
 8003f90:	d01b      	beq.n	8003fca <TIM_Base_SetConfig+0xb2>
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	4a29      	ldr	r2, [pc, #164]	; (800403c <TIM_Base_SetConfig+0x124>)
 8003f96:	4293      	cmp	r3, r2
 8003f98:	d017      	beq.n	8003fca <TIM_Base_SetConfig+0xb2>
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	4a28      	ldr	r2, [pc, #160]	; (8004040 <TIM_Base_SetConfig+0x128>)
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d013      	beq.n	8003fca <TIM_Base_SetConfig+0xb2>
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	4a27      	ldr	r2, [pc, #156]	; (8004044 <TIM_Base_SetConfig+0x12c>)
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d00f      	beq.n	8003fca <TIM_Base_SetConfig+0xb2>
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	4a26      	ldr	r2, [pc, #152]	; (8004048 <TIM_Base_SetConfig+0x130>)
 8003fae:	4293      	cmp	r3, r2
 8003fb0:	d00b      	beq.n	8003fca <TIM_Base_SetConfig+0xb2>
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	4a25      	ldr	r2, [pc, #148]	; (800404c <TIM_Base_SetConfig+0x134>)
 8003fb6:	4293      	cmp	r3, r2
 8003fb8:	d007      	beq.n	8003fca <TIM_Base_SetConfig+0xb2>
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	4a24      	ldr	r2, [pc, #144]	; (8004050 <TIM_Base_SetConfig+0x138>)
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	d003      	beq.n	8003fca <TIM_Base_SetConfig+0xb2>
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	4a23      	ldr	r2, [pc, #140]	; (8004054 <TIM_Base_SetConfig+0x13c>)
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	d108      	bne.n	8003fdc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003fd0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	68db      	ldr	r3, [r3, #12]
 8003fd6:	68fa      	ldr	r2, [r7, #12]
 8003fd8:	4313      	orrs	r3, r2
 8003fda:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003fe2:	683b      	ldr	r3, [r7, #0]
 8003fe4:	695b      	ldr	r3, [r3, #20]
 8003fe6:	4313      	orrs	r3, r2
 8003fe8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	68fa      	ldr	r2, [r7, #12]
 8003fee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	689a      	ldr	r2, [r3, #8]
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003ff8:	683b      	ldr	r3, [r7, #0]
 8003ffa:	681a      	ldr	r2, [r3, #0]
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	4a0a      	ldr	r2, [pc, #40]	; (800402c <TIM_Base_SetConfig+0x114>)
 8004004:	4293      	cmp	r3, r2
 8004006:	d003      	beq.n	8004010 <TIM_Base_SetConfig+0xf8>
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	4a0c      	ldr	r2, [pc, #48]	; (800403c <TIM_Base_SetConfig+0x124>)
 800400c:	4293      	cmp	r3, r2
 800400e:	d103      	bne.n	8004018 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	691a      	ldr	r2, [r3, #16]
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2201      	movs	r2, #1
 800401c:	615a      	str	r2, [r3, #20]
}
 800401e:	bf00      	nop
 8004020:	3714      	adds	r7, #20
 8004022:	46bd      	mov	sp, r7
 8004024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004028:	4770      	bx	lr
 800402a:	bf00      	nop
 800402c:	40010000 	.word	0x40010000
 8004030:	40000400 	.word	0x40000400
 8004034:	40000800 	.word	0x40000800
 8004038:	40000c00 	.word	0x40000c00
 800403c:	40010400 	.word	0x40010400
 8004040:	40014000 	.word	0x40014000
 8004044:	40014400 	.word	0x40014400
 8004048:	40014800 	.word	0x40014800
 800404c:	40001800 	.word	0x40001800
 8004050:	40001c00 	.word	0x40001c00
 8004054:	40002000 	.word	0x40002000

08004058 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004058:	b480      	push	{r7}
 800405a:	b087      	sub	sp, #28
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
 8004060:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6a1b      	ldr	r3, [r3, #32]
 8004066:	f023 0201 	bic.w	r2, r3, #1
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6a1b      	ldr	r3, [r3, #32]
 8004072:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	685b      	ldr	r3, [r3, #4]
 8004078:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	699b      	ldr	r3, [r3, #24]
 800407e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004086:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	f023 0303 	bic.w	r3, r3, #3
 800408e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	68fa      	ldr	r2, [r7, #12]
 8004096:	4313      	orrs	r3, r2
 8004098:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800409a:	697b      	ldr	r3, [r7, #20]
 800409c:	f023 0302 	bic.w	r3, r3, #2
 80040a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80040a2:	683b      	ldr	r3, [r7, #0]
 80040a4:	689b      	ldr	r3, [r3, #8]
 80040a6:	697a      	ldr	r2, [r7, #20]
 80040a8:	4313      	orrs	r3, r2
 80040aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	4a20      	ldr	r2, [pc, #128]	; (8004130 <TIM_OC1_SetConfig+0xd8>)
 80040b0:	4293      	cmp	r3, r2
 80040b2:	d003      	beq.n	80040bc <TIM_OC1_SetConfig+0x64>
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	4a1f      	ldr	r2, [pc, #124]	; (8004134 <TIM_OC1_SetConfig+0xdc>)
 80040b8:	4293      	cmp	r3, r2
 80040ba:	d10c      	bne.n	80040d6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80040bc:	697b      	ldr	r3, [r7, #20]
 80040be:	f023 0308 	bic.w	r3, r3, #8
 80040c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	68db      	ldr	r3, [r3, #12]
 80040c8:	697a      	ldr	r2, [r7, #20]
 80040ca:	4313      	orrs	r3, r2
 80040cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80040ce:	697b      	ldr	r3, [r7, #20]
 80040d0:	f023 0304 	bic.w	r3, r3, #4
 80040d4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	4a15      	ldr	r2, [pc, #84]	; (8004130 <TIM_OC1_SetConfig+0xd8>)
 80040da:	4293      	cmp	r3, r2
 80040dc:	d003      	beq.n	80040e6 <TIM_OC1_SetConfig+0x8e>
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	4a14      	ldr	r2, [pc, #80]	; (8004134 <TIM_OC1_SetConfig+0xdc>)
 80040e2:	4293      	cmp	r3, r2
 80040e4:	d111      	bne.n	800410a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80040e6:	693b      	ldr	r3, [r7, #16]
 80040e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80040ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80040ee:	693b      	ldr	r3, [r7, #16]
 80040f0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80040f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80040f6:	683b      	ldr	r3, [r7, #0]
 80040f8:	695b      	ldr	r3, [r3, #20]
 80040fa:	693a      	ldr	r2, [r7, #16]
 80040fc:	4313      	orrs	r3, r2
 80040fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	699b      	ldr	r3, [r3, #24]
 8004104:	693a      	ldr	r2, [r7, #16]
 8004106:	4313      	orrs	r3, r2
 8004108:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	693a      	ldr	r2, [r7, #16]
 800410e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	68fa      	ldr	r2, [r7, #12]
 8004114:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004116:	683b      	ldr	r3, [r7, #0]
 8004118:	685a      	ldr	r2, [r3, #4]
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	697a      	ldr	r2, [r7, #20]
 8004122:	621a      	str	r2, [r3, #32]
}
 8004124:	bf00      	nop
 8004126:	371c      	adds	r7, #28
 8004128:	46bd      	mov	sp, r7
 800412a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412e:	4770      	bx	lr
 8004130:	40010000 	.word	0x40010000
 8004134:	40010400 	.word	0x40010400

08004138 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004138:	b480      	push	{r7}
 800413a:	b087      	sub	sp, #28
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
 8004140:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6a1b      	ldr	r3, [r3, #32]
 8004146:	f023 0210 	bic.w	r2, r3, #16
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6a1b      	ldr	r3, [r3, #32]
 8004152:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	685b      	ldr	r3, [r3, #4]
 8004158:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	699b      	ldr	r3, [r3, #24]
 800415e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004166:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800416e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	021b      	lsls	r3, r3, #8
 8004176:	68fa      	ldr	r2, [r7, #12]
 8004178:	4313      	orrs	r3, r2
 800417a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800417c:	697b      	ldr	r3, [r7, #20]
 800417e:	f023 0320 	bic.w	r3, r3, #32
 8004182:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004184:	683b      	ldr	r3, [r7, #0]
 8004186:	689b      	ldr	r3, [r3, #8]
 8004188:	011b      	lsls	r3, r3, #4
 800418a:	697a      	ldr	r2, [r7, #20]
 800418c:	4313      	orrs	r3, r2
 800418e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	4a22      	ldr	r2, [pc, #136]	; (800421c <TIM_OC2_SetConfig+0xe4>)
 8004194:	4293      	cmp	r3, r2
 8004196:	d003      	beq.n	80041a0 <TIM_OC2_SetConfig+0x68>
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	4a21      	ldr	r2, [pc, #132]	; (8004220 <TIM_OC2_SetConfig+0xe8>)
 800419c:	4293      	cmp	r3, r2
 800419e:	d10d      	bne.n	80041bc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80041a0:	697b      	ldr	r3, [r7, #20]
 80041a2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80041a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80041a8:	683b      	ldr	r3, [r7, #0]
 80041aa:	68db      	ldr	r3, [r3, #12]
 80041ac:	011b      	lsls	r3, r3, #4
 80041ae:	697a      	ldr	r2, [r7, #20]
 80041b0:	4313      	orrs	r3, r2
 80041b2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80041b4:	697b      	ldr	r3, [r7, #20]
 80041b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80041ba:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	4a17      	ldr	r2, [pc, #92]	; (800421c <TIM_OC2_SetConfig+0xe4>)
 80041c0:	4293      	cmp	r3, r2
 80041c2:	d003      	beq.n	80041cc <TIM_OC2_SetConfig+0x94>
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	4a16      	ldr	r2, [pc, #88]	; (8004220 <TIM_OC2_SetConfig+0xe8>)
 80041c8:	4293      	cmp	r3, r2
 80041ca:	d113      	bne.n	80041f4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80041cc:	693b      	ldr	r3, [r7, #16]
 80041ce:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80041d2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80041d4:	693b      	ldr	r3, [r7, #16]
 80041d6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80041da:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	695b      	ldr	r3, [r3, #20]
 80041e0:	009b      	lsls	r3, r3, #2
 80041e2:	693a      	ldr	r2, [r7, #16]
 80041e4:	4313      	orrs	r3, r2
 80041e6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	699b      	ldr	r3, [r3, #24]
 80041ec:	009b      	lsls	r3, r3, #2
 80041ee:	693a      	ldr	r2, [r7, #16]
 80041f0:	4313      	orrs	r3, r2
 80041f2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	693a      	ldr	r2, [r7, #16]
 80041f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	68fa      	ldr	r2, [r7, #12]
 80041fe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	685a      	ldr	r2, [r3, #4]
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	697a      	ldr	r2, [r7, #20]
 800420c:	621a      	str	r2, [r3, #32]
}
 800420e:	bf00      	nop
 8004210:	371c      	adds	r7, #28
 8004212:	46bd      	mov	sp, r7
 8004214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004218:	4770      	bx	lr
 800421a:	bf00      	nop
 800421c:	40010000 	.word	0x40010000
 8004220:	40010400 	.word	0x40010400

08004224 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004224:	b480      	push	{r7}
 8004226:	b087      	sub	sp, #28
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
 800422c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6a1b      	ldr	r3, [r3, #32]
 8004232:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6a1b      	ldr	r3, [r3, #32]
 800423e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	685b      	ldr	r3, [r3, #4]
 8004244:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	69db      	ldr	r3, [r3, #28]
 800424a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004252:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	f023 0303 	bic.w	r3, r3, #3
 800425a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800425c:	683b      	ldr	r3, [r7, #0]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	68fa      	ldr	r2, [r7, #12]
 8004262:	4313      	orrs	r3, r2
 8004264:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004266:	697b      	ldr	r3, [r7, #20]
 8004268:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800426c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800426e:	683b      	ldr	r3, [r7, #0]
 8004270:	689b      	ldr	r3, [r3, #8]
 8004272:	021b      	lsls	r3, r3, #8
 8004274:	697a      	ldr	r2, [r7, #20]
 8004276:	4313      	orrs	r3, r2
 8004278:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	4a21      	ldr	r2, [pc, #132]	; (8004304 <TIM_OC3_SetConfig+0xe0>)
 800427e:	4293      	cmp	r3, r2
 8004280:	d003      	beq.n	800428a <TIM_OC3_SetConfig+0x66>
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	4a20      	ldr	r2, [pc, #128]	; (8004308 <TIM_OC3_SetConfig+0xe4>)
 8004286:	4293      	cmp	r3, r2
 8004288:	d10d      	bne.n	80042a6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800428a:	697b      	ldr	r3, [r7, #20]
 800428c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004290:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	68db      	ldr	r3, [r3, #12]
 8004296:	021b      	lsls	r3, r3, #8
 8004298:	697a      	ldr	r2, [r7, #20]
 800429a:	4313      	orrs	r3, r2
 800429c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800429e:	697b      	ldr	r3, [r7, #20]
 80042a0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80042a4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	4a16      	ldr	r2, [pc, #88]	; (8004304 <TIM_OC3_SetConfig+0xe0>)
 80042aa:	4293      	cmp	r3, r2
 80042ac:	d003      	beq.n	80042b6 <TIM_OC3_SetConfig+0x92>
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	4a15      	ldr	r2, [pc, #84]	; (8004308 <TIM_OC3_SetConfig+0xe4>)
 80042b2:	4293      	cmp	r3, r2
 80042b4:	d113      	bne.n	80042de <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80042b6:	693b      	ldr	r3, [r7, #16]
 80042b8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80042bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80042be:	693b      	ldr	r3, [r7, #16]
 80042c0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80042c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80042c6:	683b      	ldr	r3, [r7, #0]
 80042c8:	695b      	ldr	r3, [r3, #20]
 80042ca:	011b      	lsls	r3, r3, #4
 80042cc:	693a      	ldr	r2, [r7, #16]
 80042ce:	4313      	orrs	r3, r2
 80042d0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80042d2:	683b      	ldr	r3, [r7, #0]
 80042d4:	699b      	ldr	r3, [r3, #24]
 80042d6:	011b      	lsls	r3, r3, #4
 80042d8:	693a      	ldr	r2, [r7, #16]
 80042da:	4313      	orrs	r3, r2
 80042dc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	693a      	ldr	r2, [r7, #16]
 80042e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	68fa      	ldr	r2, [r7, #12]
 80042e8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80042ea:	683b      	ldr	r3, [r7, #0]
 80042ec:	685a      	ldr	r2, [r3, #4]
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	697a      	ldr	r2, [r7, #20]
 80042f6:	621a      	str	r2, [r3, #32]
}
 80042f8:	bf00      	nop
 80042fa:	371c      	adds	r7, #28
 80042fc:	46bd      	mov	sp, r7
 80042fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004302:	4770      	bx	lr
 8004304:	40010000 	.word	0x40010000
 8004308:	40010400 	.word	0x40010400

0800430c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800430c:	b480      	push	{r7}
 800430e:	b087      	sub	sp, #28
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
 8004314:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6a1b      	ldr	r3, [r3, #32]
 800431a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6a1b      	ldr	r3, [r3, #32]
 8004326:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	685b      	ldr	r3, [r3, #4]
 800432c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	69db      	ldr	r3, [r3, #28]
 8004332:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800433a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004342:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004344:	683b      	ldr	r3, [r7, #0]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	021b      	lsls	r3, r3, #8
 800434a:	68fa      	ldr	r2, [r7, #12]
 800434c:	4313      	orrs	r3, r2
 800434e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004350:	693b      	ldr	r3, [r7, #16]
 8004352:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004356:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	689b      	ldr	r3, [r3, #8]
 800435c:	031b      	lsls	r3, r3, #12
 800435e:	693a      	ldr	r2, [r7, #16]
 8004360:	4313      	orrs	r3, r2
 8004362:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	4a12      	ldr	r2, [pc, #72]	; (80043b0 <TIM_OC4_SetConfig+0xa4>)
 8004368:	4293      	cmp	r3, r2
 800436a:	d003      	beq.n	8004374 <TIM_OC4_SetConfig+0x68>
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	4a11      	ldr	r2, [pc, #68]	; (80043b4 <TIM_OC4_SetConfig+0xa8>)
 8004370:	4293      	cmp	r3, r2
 8004372:	d109      	bne.n	8004388 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004374:	697b      	ldr	r3, [r7, #20]
 8004376:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800437a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	695b      	ldr	r3, [r3, #20]
 8004380:	019b      	lsls	r3, r3, #6
 8004382:	697a      	ldr	r2, [r7, #20]
 8004384:	4313      	orrs	r3, r2
 8004386:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	697a      	ldr	r2, [r7, #20]
 800438c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	68fa      	ldr	r2, [r7, #12]
 8004392:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	685a      	ldr	r2, [r3, #4]
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	693a      	ldr	r2, [r7, #16]
 80043a0:	621a      	str	r2, [r3, #32]
}
 80043a2:	bf00      	nop
 80043a4:	371c      	adds	r7, #28
 80043a6:	46bd      	mov	sp, r7
 80043a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ac:	4770      	bx	lr
 80043ae:	bf00      	nop
 80043b0:	40010000 	.word	0x40010000
 80043b4:	40010400 	.word	0x40010400

080043b8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80043b8:	b480      	push	{r7}
 80043ba:	b087      	sub	sp, #28
 80043bc:	af00      	add	r7, sp, #0
 80043be:	60f8      	str	r0, [r7, #12]
 80043c0:	60b9      	str	r1, [r7, #8]
 80043c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	6a1b      	ldr	r3, [r3, #32]
 80043c8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	6a1b      	ldr	r3, [r3, #32]
 80043ce:	f023 0201 	bic.w	r2, r3, #1
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	699b      	ldr	r3, [r3, #24]
 80043da:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80043dc:	693b      	ldr	r3, [r7, #16]
 80043de:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80043e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	011b      	lsls	r3, r3, #4
 80043e8:	693a      	ldr	r2, [r7, #16]
 80043ea:	4313      	orrs	r3, r2
 80043ec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80043ee:	697b      	ldr	r3, [r7, #20]
 80043f0:	f023 030a 	bic.w	r3, r3, #10
 80043f4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80043f6:	697a      	ldr	r2, [r7, #20]
 80043f8:	68bb      	ldr	r3, [r7, #8]
 80043fa:	4313      	orrs	r3, r2
 80043fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	693a      	ldr	r2, [r7, #16]
 8004402:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	697a      	ldr	r2, [r7, #20]
 8004408:	621a      	str	r2, [r3, #32]
}
 800440a:	bf00      	nop
 800440c:	371c      	adds	r7, #28
 800440e:	46bd      	mov	sp, r7
 8004410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004414:	4770      	bx	lr

08004416 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004416:	b480      	push	{r7}
 8004418:	b087      	sub	sp, #28
 800441a:	af00      	add	r7, sp, #0
 800441c:	60f8      	str	r0, [r7, #12]
 800441e:	60b9      	str	r1, [r7, #8]
 8004420:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	6a1b      	ldr	r3, [r3, #32]
 8004426:	f023 0210 	bic.w	r2, r3, #16
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	699b      	ldr	r3, [r3, #24]
 8004432:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	6a1b      	ldr	r3, [r3, #32]
 8004438:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800443a:	697b      	ldr	r3, [r7, #20]
 800443c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004440:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	031b      	lsls	r3, r3, #12
 8004446:	697a      	ldr	r2, [r7, #20]
 8004448:	4313      	orrs	r3, r2
 800444a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800444c:	693b      	ldr	r3, [r7, #16]
 800444e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004452:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004454:	68bb      	ldr	r3, [r7, #8]
 8004456:	011b      	lsls	r3, r3, #4
 8004458:	693a      	ldr	r2, [r7, #16]
 800445a:	4313      	orrs	r3, r2
 800445c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	697a      	ldr	r2, [r7, #20]
 8004462:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	693a      	ldr	r2, [r7, #16]
 8004468:	621a      	str	r2, [r3, #32]
}
 800446a:	bf00      	nop
 800446c:	371c      	adds	r7, #28
 800446e:	46bd      	mov	sp, r7
 8004470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004474:	4770      	bx	lr

08004476 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004476:	b480      	push	{r7}
 8004478:	b085      	sub	sp, #20
 800447a:	af00      	add	r7, sp, #0
 800447c:	6078      	str	r0, [r7, #4]
 800447e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	689b      	ldr	r3, [r3, #8]
 8004484:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800448c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800448e:	683a      	ldr	r2, [r7, #0]
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	4313      	orrs	r3, r2
 8004494:	f043 0307 	orr.w	r3, r3, #7
 8004498:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	68fa      	ldr	r2, [r7, #12]
 800449e:	609a      	str	r2, [r3, #8]
}
 80044a0:	bf00      	nop
 80044a2:	3714      	adds	r7, #20
 80044a4:	46bd      	mov	sp, r7
 80044a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044aa:	4770      	bx	lr

080044ac <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80044ac:	b480      	push	{r7}
 80044ae:	b087      	sub	sp, #28
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	60f8      	str	r0, [r7, #12]
 80044b4:	60b9      	str	r1, [r7, #8]
 80044b6:	607a      	str	r2, [r7, #4]
 80044b8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	689b      	ldr	r3, [r3, #8]
 80044be:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80044c0:	697b      	ldr	r3, [r7, #20]
 80044c2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80044c6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80044c8:	683b      	ldr	r3, [r7, #0]
 80044ca:	021a      	lsls	r2, r3, #8
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	431a      	orrs	r2, r3
 80044d0:	68bb      	ldr	r3, [r7, #8]
 80044d2:	4313      	orrs	r3, r2
 80044d4:	697a      	ldr	r2, [r7, #20]
 80044d6:	4313      	orrs	r3, r2
 80044d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	697a      	ldr	r2, [r7, #20]
 80044de:	609a      	str	r2, [r3, #8]
}
 80044e0:	bf00      	nop
 80044e2:	371c      	adds	r7, #28
 80044e4:	46bd      	mov	sp, r7
 80044e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ea:	4770      	bx	lr

080044ec <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80044ec:	b480      	push	{r7}
 80044ee:	b087      	sub	sp, #28
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	60f8      	str	r0, [r7, #12]
 80044f4:	60b9      	str	r1, [r7, #8]
 80044f6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80044f8:	68bb      	ldr	r3, [r7, #8]
 80044fa:	f003 031f 	and.w	r3, r3, #31
 80044fe:	2201      	movs	r2, #1
 8004500:	fa02 f303 	lsl.w	r3, r2, r3
 8004504:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	6a1a      	ldr	r2, [r3, #32]
 800450a:	697b      	ldr	r3, [r7, #20]
 800450c:	43db      	mvns	r3, r3
 800450e:	401a      	ands	r2, r3
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	6a1a      	ldr	r2, [r3, #32]
 8004518:	68bb      	ldr	r3, [r7, #8]
 800451a:	f003 031f 	and.w	r3, r3, #31
 800451e:	6879      	ldr	r1, [r7, #4]
 8004520:	fa01 f303 	lsl.w	r3, r1, r3
 8004524:	431a      	orrs	r2, r3
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	621a      	str	r2, [r3, #32]
}
 800452a:	bf00      	nop
 800452c:	371c      	adds	r7, #28
 800452e:	46bd      	mov	sp, r7
 8004530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004534:	4770      	bx	lr

08004536 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004536:	b480      	push	{r7}
 8004538:	b085      	sub	sp, #20
 800453a:	af00      	add	r7, sp, #0
 800453c:	6078      	str	r0, [r7, #4]
 800453e:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004546:	2b01      	cmp	r3, #1
 8004548:	d101      	bne.n	800454e <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800454a:	2302      	movs	r3, #2
 800454c:	e032      	b.n	80045b4 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	2201      	movs	r2, #1
 8004552:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	2202      	movs	r2, #2
 800455a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	685b      	ldr	r3, [r3, #4]
 8004564:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	689b      	ldr	r3, [r3, #8]
 800456c:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004574:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004576:	683b      	ldr	r3, [r7, #0]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	68fa      	ldr	r2, [r7, #12]
 800457c:	4313      	orrs	r3, r2
 800457e:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8004580:	68bb      	ldr	r3, [r7, #8]
 8004582:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004586:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004588:	683b      	ldr	r3, [r7, #0]
 800458a:	685b      	ldr	r3, [r3, #4]
 800458c:	68ba      	ldr	r2, [r7, #8]
 800458e:	4313      	orrs	r3, r2
 8004590:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	68fa      	ldr	r2, [r7, #12]
 8004598:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	68ba      	ldr	r2, [r7, #8]
 80045a0:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	2201      	movs	r2, #1
 80045a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	2200      	movs	r2, #0
 80045ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80045b2:	2300      	movs	r3, #0
}
 80045b4:	4618      	mov	r0, r3
 80045b6:	3714      	adds	r7, #20
 80045b8:	46bd      	mov	sp, r7
 80045ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045be:	4770      	bx	lr

080045c0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80045c0:	b480      	push	{r7}
 80045c2:	b083      	sub	sp, #12
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80045c8:	bf00      	nop
 80045ca:	370c      	adds	r7, #12
 80045cc:	46bd      	mov	sp, r7
 80045ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d2:	4770      	bx	lr

080045d4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80045d4:	b480      	push	{r7}
 80045d6:	b083      	sub	sp, #12
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80045dc:	bf00      	nop
 80045de:	370c      	adds	r7, #12
 80045e0:	46bd      	mov	sp, r7
 80045e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e6:	4770      	bx	lr

080045e8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80045e8:	b580      	push	{r7, lr}
 80045ea:	b082      	sub	sp, #8
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d101      	bne.n	80045fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80045f6:	2301      	movs	r3, #1
 80045f8:	e03f      	b.n	800467a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004600:	b2db      	uxtb	r3, r3
 8004602:	2b00      	cmp	r3, #0
 8004604:	d106      	bne.n	8004614 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	2200      	movs	r2, #0
 800460a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800460e:	6878      	ldr	r0, [r7, #4]
 8004610:	f00d fede 	bl	80123d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2224      	movs	r2, #36	; 0x24
 8004618:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	68da      	ldr	r2, [r3, #12]
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800462a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800462c:	6878      	ldr	r0, [r7, #4]
 800462e:	f000 f90b 	bl	8004848 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	691a      	ldr	r2, [r3, #16]
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004640:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	695a      	ldr	r2, [r3, #20]
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004650:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	68da      	ldr	r2, [r3, #12]
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004660:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	2200      	movs	r2, #0
 8004666:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2220      	movs	r2, #32
 800466c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2220      	movs	r2, #32
 8004674:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8004678:	2300      	movs	r3, #0
}
 800467a:	4618      	mov	r0, r3
 800467c:	3708      	adds	r7, #8
 800467e:	46bd      	mov	sp, r7
 8004680:	bd80      	pop	{r7, pc}

08004682 <HAL_UART_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004682:	b580      	push	{r7, lr}
 8004684:	b088      	sub	sp, #32
 8004686:	af02      	add	r7, sp, #8
 8004688:	60f8      	str	r0, [r7, #12]
 800468a:	60b9      	str	r1, [r7, #8]
 800468c:	603b      	str	r3, [r7, #0]
 800468e:	4613      	mov	r3, r2
 8004690:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8004692:	2300      	movs	r3, #0
 8004694:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800469c:	b2db      	uxtb	r3, r3
 800469e:	2b20      	cmp	r3, #32
 80046a0:	f040 8083 	bne.w	80047aa <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 80046a4:	68bb      	ldr	r3, [r7, #8]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d002      	beq.n	80046b0 <HAL_UART_Transmit+0x2e>
 80046aa:	88fb      	ldrh	r3, [r7, #6]
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d101      	bne.n	80046b4 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80046b0:	2301      	movs	r3, #1
 80046b2:	e07b      	b.n	80047ac <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80046ba:	2b01      	cmp	r3, #1
 80046bc:	d101      	bne.n	80046c2 <HAL_UART_Transmit+0x40>
 80046be:	2302      	movs	r3, #2
 80046c0:	e074      	b.n	80047ac <HAL_UART_Transmit+0x12a>
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	2201      	movs	r2, #1
 80046c6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	2200      	movs	r2, #0
 80046ce:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	2221      	movs	r2, #33	; 0x21
 80046d4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80046d8:	f7fc fc94 	bl	8001004 <HAL_GetTick>
 80046dc:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	88fa      	ldrh	r2, [r7, #6]
 80046e2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	88fa      	ldrh	r2, [r7, #6]
 80046e8:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80046ea:	e042      	b.n	8004772 <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80046f0:	b29b      	uxth	r3, r3
 80046f2:	3b01      	subs	r3, #1
 80046f4:	b29a      	uxth	r2, r3
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	689b      	ldr	r3, [r3, #8]
 80046fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004702:	d122      	bne.n	800474a <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004704:	683b      	ldr	r3, [r7, #0]
 8004706:	9300      	str	r3, [sp, #0]
 8004708:	697b      	ldr	r3, [r7, #20]
 800470a:	2200      	movs	r2, #0
 800470c:	2180      	movs	r1, #128	; 0x80
 800470e:	68f8      	ldr	r0, [r7, #12]
 8004710:	f000 f850 	bl	80047b4 <UART_WaitOnFlagUntilTimeout>
 8004714:	4603      	mov	r3, r0
 8004716:	2b00      	cmp	r3, #0
 8004718:	d001      	beq.n	800471e <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 800471a:	2303      	movs	r3, #3
 800471c:	e046      	b.n	80047ac <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800471e:	68bb      	ldr	r3, [r7, #8]
 8004720:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8004722:	693b      	ldr	r3, [r7, #16]
 8004724:	881b      	ldrh	r3, [r3, #0]
 8004726:	461a      	mov	r2, r3
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004730:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	691b      	ldr	r3, [r3, #16]
 8004736:	2b00      	cmp	r3, #0
 8004738:	d103      	bne.n	8004742 <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 800473a:	68bb      	ldr	r3, [r7, #8]
 800473c:	3302      	adds	r3, #2
 800473e:	60bb      	str	r3, [r7, #8]
 8004740:	e017      	b.n	8004772 <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 8004742:	68bb      	ldr	r3, [r7, #8]
 8004744:	3301      	adds	r3, #1
 8004746:	60bb      	str	r3, [r7, #8]
 8004748:	e013      	b.n	8004772 <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	9300      	str	r3, [sp, #0]
 800474e:	697b      	ldr	r3, [r7, #20]
 8004750:	2200      	movs	r2, #0
 8004752:	2180      	movs	r1, #128	; 0x80
 8004754:	68f8      	ldr	r0, [r7, #12]
 8004756:	f000 f82d 	bl	80047b4 <UART_WaitOnFlagUntilTimeout>
 800475a:	4603      	mov	r3, r0
 800475c:	2b00      	cmp	r3, #0
 800475e:	d001      	beq.n	8004764 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8004760:	2303      	movs	r3, #3
 8004762:	e023      	b.n	80047ac <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8004764:	68bb      	ldr	r3, [r7, #8]
 8004766:	1c5a      	adds	r2, r3, #1
 8004768:	60ba      	str	r2, [r7, #8]
 800476a:	781a      	ldrb	r2, [r3, #0]
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004776:	b29b      	uxth	r3, r3
 8004778:	2b00      	cmp	r3, #0
 800477a:	d1b7      	bne.n	80046ec <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800477c:	683b      	ldr	r3, [r7, #0]
 800477e:	9300      	str	r3, [sp, #0]
 8004780:	697b      	ldr	r3, [r7, #20]
 8004782:	2200      	movs	r2, #0
 8004784:	2140      	movs	r1, #64	; 0x40
 8004786:	68f8      	ldr	r0, [r7, #12]
 8004788:	f000 f814 	bl	80047b4 <UART_WaitOnFlagUntilTimeout>
 800478c:	4603      	mov	r3, r0
 800478e:	2b00      	cmp	r3, #0
 8004790:	d001      	beq.n	8004796 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8004792:	2303      	movs	r3, #3
 8004794:	e00a      	b.n	80047ac <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	2220      	movs	r2, #32
 800479a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	2200      	movs	r2, #0
 80047a2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 80047a6:	2300      	movs	r3, #0
 80047a8:	e000      	b.n	80047ac <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80047aa:	2302      	movs	r3, #2
  }
}
 80047ac:	4618      	mov	r0, r3
 80047ae:	3718      	adds	r7, #24
 80047b0:	46bd      	mov	sp, r7
 80047b2:	bd80      	pop	{r7, pc}

080047b4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80047b4:	b580      	push	{r7, lr}
 80047b6:	b084      	sub	sp, #16
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	60f8      	str	r0, [r7, #12]
 80047bc:	60b9      	str	r1, [r7, #8]
 80047be:	603b      	str	r3, [r7, #0]
 80047c0:	4613      	mov	r3, r2
 80047c2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80047c4:	e02c      	b.n	8004820 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047c6:	69bb      	ldr	r3, [r7, #24]
 80047c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047cc:	d028      	beq.n	8004820 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80047ce:	69bb      	ldr	r3, [r7, #24]
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d007      	beq.n	80047e4 <UART_WaitOnFlagUntilTimeout+0x30>
 80047d4:	f7fc fc16 	bl	8001004 <HAL_GetTick>
 80047d8:	4602      	mov	r2, r0
 80047da:	683b      	ldr	r3, [r7, #0]
 80047dc:	1ad3      	subs	r3, r2, r3
 80047de:	69ba      	ldr	r2, [r7, #24]
 80047e0:	429a      	cmp	r2, r3
 80047e2:	d21d      	bcs.n	8004820 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	68da      	ldr	r2, [r3, #12]
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80047f2:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	695a      	ldr	r2, [r3, #20]
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f022 0201 	bic.w	r2, r2, #1
 8004802:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	2220      	movs	r2, #32
 8004808:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	2220      	movs	r2, #32
 8004810:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	2200      	movs	r2, #0
 8004818:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 800481c:	2303      	movs	r3, #3
 800481e:	e00f      	b.n	8004840 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	681a      	ldr	r2, [r3, #0]
 8004826:	68bb      	ldr	r3, [r7, #8]
 8004828:	4013      	ands	r3, r2
 800482a:	68ba      	ldr	r2, [r7, #8]
 800482c:	429a      	cmp	r2, r3
 800482e:	bf0c      	ite	eq
 8004830:	2301      	moveq	r3, #1
 8004832:	2300      	movne	r3, #0
 8004834:	b2db      	uxtb	r3, r3
 8004836:	461a      	mov	r2, r3
 8004838:	79fb      	ldrb	r3, [r7, #7]
 800483a:	429a      	cmp	r2, r3
 800483c:	d0c3      	beq.n	80047c6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800483e:	2300      	movs	r3, #0
}
 8004840:	4618      	mov	r0, r3
 8004842:	3710      	adds	r7, #16
 8004844:	46bd      	mov	sp, r7
 8004846:	bd80      	pop	{r7, pc}

08004848 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004848:	b5b0      	push	{r4, r5, r7, lr}
 800484a:	b084      	sub	sp, #16
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	691b      	ldr	r3, [r3, #16]
 8004856:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	68da      	ldr	r2, [r3, #12]
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	430a      	orrs	r2, r1
 8004864:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	689a      	ldr	r2, [r3, #8]
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	691b      	ldr	r3, [r3, #16]
 800486e:	431a      	orrs	r2, r3
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	695b      	ldr	r3, [r3, #20]
 8004874:	431a      	orrs	r2, r3
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	69db      	ldr	r3, [r3, #28]
 800487a:	4313      	orrs	r3, r2
 800487c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	68db      	ldr	r3, [r3, #12]
 8004884:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8004888:	f023 030c 	bic.w	r3, r3, #12
 800488c:	687a      	ldr	r2, [r7, #4]
 800488e:	6812      	ldr	r2, [r2, #0]
 8004890:	68f9      	ldr	r1, [r7, #12]
 8004892:	430b      	orrs	r3, r1
 8004894:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	695b      	ldr	r3, [r3, #20]
 800489c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	699a      	ldr	r2, [r3, #24]
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	430a      	orrs	r2, r1
 80048aa:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	69db      	ldr	r3, [r3, #28]
 80048b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80048b4:	f040 80e4 	bne.w	8004a80 <UART_SetConfig+0x238>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	4aab      	ldr	r2, [pc, #684]	; (8004b6c <UART_SetConfig+0x324>)
 80048be:	4293      	cmp	r3, r2
 80048c0:	d004      	beq.n	80048cc <UART_SetConfig+0x84>
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	4aaa      	ldr	r2, [pc, #680]	; (8004b70 <UART_SetConfig+0x328>)
 80048c8:	4293      	cmp	r3, r2
 80048ca:	d16c      	bne.n	80049a6 <UART_SetConfig+0x15e>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80048cc:	f7fe f92a 	bl	8002b24 <HAL_RCC_GetPCLK2Freq>
 80048d0:	4602      	mov	r2, r0
 80048d2:	4613      	mov	r3, r2
 80048d4:	009b      	lsls	r3, r3, #2
 80048d6:	4413      	add	r3, r2
 80048d8:	009a      	lsls	r2, r3, #2
 80048da:	441a      	add	r2, r3
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	685b      	ldr	r3, [r3, #4]
 80048e0:	005b      	lsls	r3, r3, #1
 80048e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80048e6:	4aa3      	ldr	r2, [pc, #652]	; (8004b74 <UART_SetConfig+0x32c>)
 80048e8:	fba2 2303 	umull	r2, r3, r2, r3
 80048ec:	095b      	lsrs	r3, r3, #5
 80048ee:	011c      	lsls	r4, r3, #4
 80048f0:	f7fe f918 	bl	8002b24 <HAL_RCC_GetPCLK2Freq>
 80048f4:	4602      	mov	r2, r0
 80048f6:	4613      	mov	r3, r2
 80048f8:	009b      	lsls	r3, r3, #2
 80048fa:	4413      	add	r3, r2
 80048fc:	009a      	lsls	r2, r3, #2
 80048fe:	441a      	add	r2, r3
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	685b      	ldr	r3, [r3, #4]
 8004904:	005b      	lsls	r3, r3, #1
 8004906:	fbb2 f5f3 	udiv	r5, r2, r3
 800490a:	f7fe f90b 	bl	8002b24 <HAL_RCC_GetPCLK2Freq>
 800490e:	4602      	mov	r2, r0
 8004910:	4613      	mov	r3, r2
 8004912:	009b      	lsls	r3, r3, #2
 8004914:	4413      	add	r3, r2
 8004916:	009a      	lsls	r2, r3, #2
 8004918:	441a      	add	r2, r3
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	685b      	ldr	r3, [r3, #4]
 800491e:	005b      	lsls	r3, r3, #1
 8004920:	fbb2 f3f3 	udiv	r3, r2, r3
 8004924:	4a93      	ldr	r2, [pc, #588]	; (8004b74 <UART_SetConfig+0x32c>)
 8004926:	fba2 2303 	umull	r2, r3, r2, r3
 800492a:	095b      	lsrs	r3, r3, #5
 800492c:	2264      	movs	r2, #100	; 0x64
 800492e:	fb02 f303 	mul.w	r3, r2, r3
 8004932:	1aeb      	subs	r3, r5, r3
 8004934:	00db      	lsls	r3, r3, #3
 8004936:	3332      	adds	r3, #50	; 0x32
 8004938:	4a8e      	ldr	r2, [pc, #568]	; (8004b74 <UART_SetConfig+0x32c>)
 800493a:	fba2 2303 	umull	r2, r3, r2, r3
 800493e:	095b      	lsrs	r3, r3, #5
 8004940:	005b      	lsls	r3, r3, #1
 8004942:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004946:	441c      	add	r4, r3
 8004948:	f7fe f8ec 	bl	8002b24 <HAL_RCC_GetPCLK2Freq>
 800494c:	4602      	mov	r2, r0
 800494e:	4613      	mov	r3, r2
 8004950:	009b      	lsls	r3, r3, #2
 8004952:	4413      	add	r3, r2
 8004954:	009a      	lsls	r2, r3, #2
 8004956:	441a      	add	r2, r3
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	685b      	ldr	r3, [r3, #4]
 800495c:	005b      	lsls	r3, r3, #1
 800495e:	fbb2 f5f3 	udiv	r5, r2, r3
 8004962:	f7fe f8df 	bl	8002b24 <HAL_RCC_GetPCLK2Freq>
 8004966:	4602      	mov	r2, r0
 8004968:	4613      	mov	r3, r2
 800496a:	009b      	lsls	r3, r3, #2
 800496c:	4413      	add	r3, r2
 800496e:	009a      	lsls	r2, r3, #2
 8004970:	441a      	add	r2, r3
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	685b      	ldr	r3, [r3, #4]
 8004976:	005b      	lsls	r3, r3, #1
 8004978:	fbb2 f3f3 	udiv	r3, r2, r3
 800497c:	4a7d      	ldr	r2, [pc, #500]	; (8004b74 <UART_SetConfig+0x32c>)
 800497e:	fba2 2303 	umull	r2, r3, r2, r3
 8004982:	095b      	lsrs	r3, r3, #5
 8004984:	2264      	movs	r2, #100	; 0x64
 8004986:	fb02 f303 	mul.w	r3, r2, r3
 800498a:	1aeb      	subs	r3, r5, r3
 800498c:	00db      	lsls	r3, r3, #3
 800498e:	3332      	adds	r3, #50	; 0x32
 8004990:	4a78      	ldr	r2, [pc, #480]	; (8004b74 <UART_SetConfig+0x32c>)
 8004992:	fba2 2303 	umull	r2, r3, r2, r3
 8004996:	095b      	lsrs	r3, r3, #5
 8004998:	f003 0207 	and.w	r2, r3, #7
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	4422      	add	r2, r4
 80049a2:	609a      	str	r2, [r3, #8]
 80049a4:	e154      	b.n	8004c50 <UART_SetConfig+0x408>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80049a6:	f7fe f8a9 	bl	8002afc <HAL_RCC_GetPCLK1Freq>
 80049aa:	4602      	mov	r2, r0
 80049ac:	4613      	mov	r3, r2
 80049ae:	009b      	lsls	r3, r3, #2
 80049b0:	4413      	add	r3, r2
 80049b2:	009a      	lsls	r2, r3, #2
 80049b4:	441a      	add	r2, r3
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	685b      	ldr	r3, [r3, #4]
 80049ba:	005b      	lsls	r3, r3, #1
 80049bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80049c0:	4a6c      	ldr	r2, [pc, #432]	; (8004b74 <UART_SetConfig+0x32c>)
 80049c2:	fba2 2303 	umull	r2, r3, r2, r3
 80049c6:	095b      	lsrs	r3, r3, #5
 80049c8:	011c      	lsls	r4, r3, #4
 80049ca:	f7fe f897 	bl	8002afc <HAL_RCC_GetPCLK1Freq>
 80049ce:	4602      	mov	r2, r0
 80049d0:	4613      	mov	r3, r2
 80049d2:	009b      	lsls	r3, r3, #2
 80049d4:	4413      	add	r3, r2
 80049d6:	009a      	lsls	r2, r3, #2
 80049d8:	441a      	add	r2, r3
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	685b      	ldr	r3, [r3, #4]
 80049de:	005b      	lsls	r3, r3, #1
 80049e0:	fbb2 f5f3 	udiv	r5, r2, r3
 80049e4:	f7fe f88a 	bl	8002afc <HAL_RCC_GetPCLK1Freq>
 80049e8:	4602      	mov	r2, r0
 80049ea:	4613      	mov	r3, r2
 80049ec:	009b      	lsls	r3, r3, #2
 80049ee:	4413      	add	r3, r2
 80049f0:	009a      	lsls	r2, r3, #2
 80049f2:	441a      	add	r2, r3
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	685b      	ldr	r3, [r3, #4]
 80049f8:	005b      	lsls	r3, r3, #1
 80049fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80049fe:	4a5d      	ldr	r2, [pc, #372]	; (8004b74 <UART_SetConfig+0x32c>)
 8004a00:	fba2 2303 	umull	r2, r3, r2, r3
 8004a04:	095b      	lsrs	r3, r3, #5
 8004a06:	2264      	movs	r2, #100	; 0x64
 8004a08:	fb02 f303 	mul.w	r3, r2, r3
 8004a0c:	1aeb      	subs	r3, r5, r3
 8004a0e:	00db      	lsls	r3, r3, #3
 8004a10:	3332      	adds	r3, #50	; 0x32
 8004a12:	4a58      	ldr	r2, [pc, #352]	; (8004b74 <UART_SetConfig+0x32c>)
 8004a14:	fba2 2303 	umull	r2, r3, r2, r3
 8004a18:	095b      	lsrs	r3, r3, #5
 8004a1a:	005b      	lsls	r3, r3, #1
 8004a1c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004a20:	441c      	add	r4, r3
 8004a22:	f7fe f86b 	bl	8002afc <HAL_RCC_GetPCLK1Freq>
 8004a26:	4602      	mov	r2, r0
 8004a28:	4613      	mov	r3, r2
 8004a2a:	009b      	lsls	r3, r3, #2
 8004a2c:	4413      	add	r3, r2
 8004a2e:	009a      	lsls	r2, r3, #2
 8004a30:	441a      	add	r2, r3
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	685b      	ldr	r3, [r3, #4]
 8004a36:	005b      	lsls	r3, r3, #1
 8004a38:	fbb2 f5f3 	udiv	r5, r2, r3
 8004a3c:	f7fe f85e 	bl	8002afc <HAL_RCC_GetPCLK1Freq>
 8004a40:	4602      	mov	r2, r0
 8004a42:	4613      	mov	r3, r2
 8004a44:	009b      	lsls	r3, r3, #2
 8004a46:	4413      	add	r3, r2
 8004a48:	009a      	lsls	r2, r3, #2
 8004a4a:	441a      	add	r2, r3
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	685b      	ldr	r3, [r3, #4]
 8004a50:	005b      	lsls	r3, r3, #1
 8004a52:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a56:	4a47      	ldr	r2, [pc, #284]	; (8004b74 <UART_SetConfig+0x32c>)
 8004a58:	fba2 2303 	umull	r2, r3, r2, r3
 8004a5c:	095b      	lsrs	r3, r3, #5
 8004a5e:	2264      	movs	r2, #100	; 0x64
 8004a60:	fb02 f303 	mul.w	r3, r2, r3
 8004a64:	1aeb      	subs	r3, r5, r3
 8004a66:	00db      	lsls	r3, r3, #3
 8004a68:	3332      	adds	r3, #50	; 0x32
 8004a6a:	4a42      	ldr	r2, [pc, #264]	; (8004b74 <UART_SetConfig+0x32c>)
 8004a6c:	fba2 2303 	umull	r2, r3, r2, r3
 8004a70:	095b      	lsrs	r3, r3, #5
 8004a72:	f003 0207 	and.w	r2, r3, #7
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	4422      	add	r2, r4
 8004a7c:	609a      	str	r2, [r3, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 8004a7e:	e0e7      	b.n	8004c50 <UART_SetConfig+0x408>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	4a39      	ldr	r2, [pc, #228]	; (8004b6c <UART_SetConfig+0x324>)
 8004a86:	4293      	cmp	r3, r2
 8004a88:	d004      	beq.n	8004a94 <UART_SetConfig+0x24c>
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	4a38      	ldr	r2, [pc, #224]	; (8004b70 <UART_SetConfig+0x328>)
 8004a90:	4293      	cmp	r3, r2
 8004a92:	d171      	bne.n	8004b78 <UART_SetConfig+0x330>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8004a94:	f7fe f846 	bl	8002b24 <HAL_RCC_GetPCLK2Freq>
 8004a98:	4602      	mov	r2, r0
 8004a9a:	4613      	mov	r3, r2
 8004a9c:	009b      	lsls	r3, r3, #2
 8004a9e:	4413      	add	r3, r2
 8004aa0:	009a      	lsls	r2, r3, #2
 8004aa2:	441a      	add	r2, r3
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	685b      	ldr	r3, [r3, #4]
 8004aa8:	009b      	lsls	r3, r3, #2
 8004aaa:	fbb2 f3f3 	udiv	r3, r2, r3
 8004aae:	4a31      	ldr	r2, [pc, #196]	; (8004b74 <UART_SetConfig+0x32c>)
 8004ab0:	fba2 2303 	umull	r2, r3, r2, r3
 8004ab4:	095b      	lsrs	r3, r3, #5
 8004ab6:	011c      	lsls	r4, r3, #4
 8004ab8:	f7fe f834 	bl	8002b24 <HAL_RCC_GetPCLK2Freq>
 8004abc:	4602      	mov	r2, r0
 8004abe:	4613      	mov	r3, r2
 8004ac0:	009b      	lsls	r3, r3, #2
 8004ac2:	4413      	add	r3, r2
 8004ac4:	009a      	lsls	r2, r3, #2
 8004ac6:	441a      	add	r2, r3
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	685b      	ldr	r3, [r3, #4]
 8004acc:	009b      	lsls	r3, r3, #2
 8004ace:	fbb2 f5f3 	udiv	r5, r2, r3
 8004ad2:	f7fe f827 	bl	8002b24 <HAL_RCC_GetPCLK2Freq>
 8004ad6:	4602      	mov	r2, r0
 8004ad8:	4613      	mov	r3, r2
 8004ada:	009b      	lsls	r3, r3, #2
 8004adc:	4413      	add	r3, r2
 8004ade:	009a      	lsls	r2, r3, #2
 8004ae0:	441a      	add	r2, r3
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	685b      	ldr	r3, [r3, #4]
 8004ae6:	009b      	lsls	r3, r3, #2
 8004ae8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004aec:	4a21      	ldr	r2, [pc, #132]	; (8004b74 <UART_SetConfig+0x32c>)
 8004aee:	fba2 2303 	umull	r2, r3, r2, r3
 8004af2:	095b      	lsrs	r3, r3, #5
 8004af4:	2264      	movs	r2, #100	; 0x64
 8004af6:	fb02 f303 	mul.w	r3, r2, r3
 8004afa:	1aeb      	subs	r3, r5, r3
 8004afc:	011b      	lsls	r3, r3, #4
 8004afe:	3332      	adds	r3, #50	; 0x32
 8004b00:	4a1c      	ldr	r2, [pc, #112]	; (8004b74 <UART_SetConfig+0x32c>)
 8004b02:	fba2 2303 	umull	r2, r3, r2, r3
 8004b06:	095b      	lsrs	r3, r3, #5
 8004b08:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004b0c:	441c      	add	r4, r3
 8004b0e:	f7fe f809 	bl	8002b24 <HAL_RCC_GetPCLK2Freq>
 8004b12:	4602      	mov	r2, r0
 8004b14:	4613      	mov	r3, r2
 8004b16:	009b      	lsls	r3, r3, #2
 8004b18:	4413      	add	r3, r2
 8004b1a:	009a      	lsls	r2, r3, #2
 8004b1c:	441a      	add	r2, r3
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	685b      	ldr	r3, [r3, #4]
 8004b22:	009b      	lsls	r3, r3, #2
 8004b24:	fbb2 f5f3 	udiv	r5, r2, r3
 8004b28:	f7fd fffc 	bl	8002b24 <HAL_RCC_GetPCLK2Freq>
 8004b2c:	4602      	mov	r2, r0
 8004b2e:	4613      	mov	r3, r2
 8004b30:	009b      	lsls	r3, r3, #2
 8004b32:	4413      	add	r3, r2
 8004b34:	009a      	lsls	r2, r3, #2
 8004b36:	441a      	add	r2, r3
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	685b      	ldr	r3, [r3, #4]
 8004b3c:	009b      	lsls	r3, r3, #2
 8004b3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b42:	4a0c      	ldr	r2, [pc, #48]	; (8004b74 <UART_SetConfig+0x32c>)
 8004b44:	fba2 2303 	umull	r2, r3, r2, r3
 8004b48:	095b      	lsrs	r3, r3, #5
 8004b4a:	2264      	movs	r2, #100	; 0x64
 8004b4c:	fb02 f303 	mul.w	r3, r2, r3
 8004b50:	1aeb      	subs	r3, r5, r3
 8004b52:	011b      	lsls	r3, r3, #4
 8004b54:	3332      	adds	r3, #50	; 0x32
 8004b56:	4a07      	ldr	r2, [pc, #28]	; (8004b74 <UART_SetConfig+0x32c>)
 8004b58:	fba2 2303 	umull	r2, r3, r2, r3
 8004b5c:	095b      	lsrs	r3, r3, #5
 8004b5e:	f003 020f 	and.w	r2, r3, #15
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	4422      	add	r2, r4
 8004b68:	609a      	str	r2, [r3, #8]
 8004b6a:	e071      	b.n	8004c50 <UART_SetConfig+0x408>
 8004b6c:	40011000 	.word	0x40011000
 8004b70:	40011400 	.word	0x40011400
 8004b74:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8004b78:	f7fd ffc0 	bl	8002afc <HAL_RCC_GetPCLK1Freq>
 8004b7c:	4602      	mov	r2, r0
 8004b7e:	4613      	mov	r3, r2
 8004b80:	009b      	lsls	r3, r3, #2
 8004b82:	4413      	add	r3, r2
 8004b84:	009a      	lsls	r2, r3, #2
 8004b86:	441a      	add	r2, r3
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	685b      	ldr	r3, [r3, #4]
 8004b8c:	009b      	lsls	r3, r3, #2
 8004b8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b92:	4a31      	ldr	r2, [pc, #196]	; (8004c58 <UART_SetConfig+0x410>)
 8004b94:	fba2 2303 	umull	r2, r3, r2, r3
 8004b98:	095b      	lsrs	r3, r3, #5
 8004b9a:	011c      	lsls	r4, r3, #4
 8004b9c:	f7fd ffae 	bl	8002afc <HAL_RCC_GetPCLK1Freq>
 8004ba0:	4602      	mov	r2, r0
 8004ba2:	4613      	mov	r3, r2
 8004ba4:	009b      	lsls	r3, r3, #2
 8004ba6:	4413      	add	r3, r2
 8004ba8:	009a      	lsls	r2, r3, #2
 8004baa:	441a      	add	r2, r3
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	685b      	ldr	r3, [r3, #4]
 8004bb0:	009b      	lsls	r3, r3, #2
 8004bb2:	fbb2 f5f3 	udiv	r5, r2, r3
 8004bb6:	f7fd ffa1 	bl	8002afc <HAL_RCC_GetPCLK1Freq>
 8004bba:	4602      	mov	r2, r0
 8004bbc:	4613      	mov	r3, r2
 8004bbe:	009b      	lsls	r3, r3, #2
 8004bc0:	4413      	add	r3, r2
 8004bc2:	009a      	lsls	r2, r3, #2
 8004bc4:	441a      	add	r2, r3
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	685b      	ldr	r3, [r3, #4]
 8004bca:	009b      	lsls	r3, r3, #2
 8004bcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bd0:	4a21      	ldr	r2, [pc, #132]	; (8004c58 <UART_SetConfig+0x410>)
 8004bd2:	fba2 2303 	umull	r2, r3, r2, r3
 8004bd6:	095b      	lsrs	r3, r3, #5
 8004bd8:	2264      	movs	r2, #100	; 0x64
 8004bda:	fb02 f303 	mul.w	r3, r2, r3
 8004bde:	1aeb      	subs	r3, r5, r3
 8004be0:	011b      	lsls	r3, r3, #4
 8004be2:	3332      	adds	r3, #50	; 0x32
 8004be4:	4a1c      	ldr	r2, [pc, #112]	; (8004c58 <UART_SetConfig+0x410>)
 8004be6:	fba2 2303 	umull	r2, r3, r2, r3
 8004bea:	095b      	lsrs	r3, r3, #5
 8004bec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004bf0:	441c      	add	r4, r3
 8004bf2:	f7fd ff83 	bl	8002afc <HAL_RCC_GetPCLK1Freq>
 8004bf6:	4602      	mov	r2, r0
 8004bf8:	4613      	mov	r3, r2
 8004bfa:	009b      	lsls	r3, r3, #2
 8004bfc:	4413      	add	r3, r2
 8004bfe:	009a      	lsls	r2, r3, #2
 8004c00:	441a      	add	r2, r3
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	685b      	ldr	r3, [r3, #4]
 8004c06:	009b      	lsls	r3, r3, #2
 8004c08:	fbb2 f5f3 	udiv	r5, r2, r3
 8004c0c:	f7fd ff76 	bl	8002afc <HAL_RCC_GetPCLK1Freq>
 8004c10:	4602      	mov	r2, r0
 8004c12:	4613      	mov	r3, r2
 8004c14:	009b      	lsls	r3, r3, #2
 8004c16:	4413      	add	r3, r2
 8004c18:	009a      	lsls	r2, r3, #2
 8004c1a:	441a      	add	r2, r3
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	685b      	ldr	r3, [r3, #4]
 8004c20:	009b      	lsls	r3, r3, #2
 8004c22:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c26:	4a0c      	ldr	r2, [pc, #48]	; (8004c58 <UART_SetConfig+0x410>)
 8004c28:	fba2 2303 	umull	r2, r3, r2, r3
 8004c2c:	095b      	lsrs	r3, r3, #5
 8004c2e:	2264      	movs	r2, #100	; 0x64
 8004c30:	fb02 f303 	mul.w	r3, r2, r3
 8004c34:	1aeb      	subs	r3, r5, r3
 8004c36:	011b      	lsls	r3, r3, #4
 8004c38:	3332      	adds	r3, #50	; 0x32
 8004c3a:	4a07      	ldr	r2, [pc, #28]	; (8004c58 <UART_SetConfig+0x410>)
 8004c3c:	fba2 2303 	umull	r2, r3, r2, r3
 8004c40:	095b      	lsrs	r3, r3, #5
 8004c42:	f003 020f 	and.w	r2, r3, #15
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	4422      	add	r2, r4
 8004c4c:	609a      	str	r2, [r3, #8]
}
 8004c4e:	e7ff      	b.n	8004c50 <UART_SetConfig+0x408>
 8004c50:	bf00      	nop
 8004c52:	3710      	adds	r7, #16
 8004c54:	46bd      	mov	sp, r7
 8004c56:	bdb0      	pop	{r4, r5, r7, pc}
 8004c58:	51eb851f 	.word	0x51eb851f

08004c5c <drive_init>:
//drive_init
// 走行系の変数の初期化
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void drive_init(void){
 8004c5c:	b480      	push	{r7}
 8004c5e:	af00      	add	r7, sp, #0
	MF.FLAGS = 0;
 8004c60:	4b05      	ldr	r3, [pc, #20]	; (8004c78 <drive_init+0x1c>)
 8004c62:	2200      	movs	r2, #0
 8004c64:	801a      	strh	r2, [r3, #0]
	MF2.FLAGS2 = 0;
 8004c66:	4b05      	ldr	r3, [pc, #20]	; (8004c7c <drive_init+0x20>)
 8004c68:	2200      	movs	r2, #0
 8004c6a:	801a      	strh	r2, [r3, #0]
}
 8004c6c:	bf00      	nop
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c74:	4770      	bx	lr
 8004c76:	bf00      	nop
 8004c78:	20000f68 	.word	0x20000f68
 8004c7c:	20000f64 	.word	0x20000f64

08004c80 <drive_ready>:
//drive_ready
// 走行前のLED点滅&ジャイロのドリフト計算
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void drive_ready(void){
 8004c80:	b580      	push	{r7, lr}
 8004c82:	af00      	add	r7, sp, #0
	  while(ad_fl <= WALL_BASE_FL){
 8004c84:	e00f      	b.n	8004ca6 <drive_ready+0x26>
		  led_write(1, 1, 1);
 8004c86:	2201      	movs	r2, #1
 8004c88:	2101      	movs	r1, #1
 8004c8a:	2001      	movs	r0, #1
 8004c8c:	f00c ff7e 	bl	8011b8c <led_write>
		  HAL_Delay(200);
 8004c90:	20c8      	movs	r0, #200	; 0xc8
 8004c92:	f7fc f9c3 	bl	800101c <HAL_Delay>
		  led_write(0, 0, 0);
 8004c96:	2200      	movs	r2, #0
 8004c98:	2100      	movs	r1, #0
 8004c9a:	2000      	movs	r0, #0
 8004c9c:	f00c ff76 	bl	8011b8c <led_write>
		  HAL_Delay(200);
 8004ca0:	20c8      	movs	r0, #200	; 0xc8
 8004ca2:	f7fc f9bb 	bl	800101c <HAL_Delay>
	  while(ad_fl <= WALL_BASE_FL){
 8004ca6:	4b09      	ldr	r3, [pc, #36]	; (8004ccc <drive_ready+0x4c>)
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	2bc8      	cmp	r3, #200	; 0xc8
 8004cac:	d9eb      	bls.n	8004c86 <drive_ready+0x6>
	  }
	  MF2.FLAG.GDRIFT = 1;
 8004cae:	4a08      	ldr	r2, [pc, #32]	; (8004cd0 <drive_ready+0x50>)
 8004cb0:	8813      	ldrh	r3, [r2, #0]
 8004cb2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004cb6:	8013      	strh	r3, [r2, #0]
	  HAL_Delay(2000);
 8004cb8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8004cbc:	f7fc f9ae 	bl	800101c <HAL_Delay>
	  degree_z = 0;
 8004cc0:	4b04      	ldr	r3, [pc, #16]	; (8004cd4 <drive_ready+0x54>)
 8004cc2:	f04f 0200 	mov.w	r2, #0
 8004cc6:	601a      	str	r2, [r3, #0]
}
 8004cc8:	bf00      	nop
 8004cca:	bd80      	pop	{r7, pc}
 8004ccc:	20000d54 	.word	0x20000d54
 8004cd0:	20000f64 	.word	0x20000f64
 8004cd4:	20000b5c 	.word	0x20000b5c

08004cd8 <drive_start>:
//drive_start
// 走行開始前に走行距離と機体角度を初期化
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void drive_start(void){
 8004cd8:	b480      	push	{r7}
 8004cda:	af00      	add	r7, sp, #0
	dist_l = dist_r = 0;		//走行距離の初期化
 8004cdc:	f04f 0300 	mov.w	r3, #0
 8004ce0:	4a0f      	ldr	r2, [pc, #60]	; (8004d20 <drive_start+0x48>)
 8004ce2:	6013      	str	r3, [r2, #0]
 8004ce4:	4a0f      	ldr	r2, [pc, #60]	; (8004d24 <drive_start+0x4c>)
 8004ce6:	6013      	str	r3, [r2, #0]
	if(!MF2.FLAG.HACCEL) target_speed_l = target_speed_r = 0;		//モータ出力の初期化
 8004ce8:	4b0f      	ldr	r3, [pc, #60]	; (8004d28 <drive_start+0x50>)
 8004cea:	881b      	ldrh	r3, [r3, #0]
 8004cec:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8004cf0:	b2db      	uxtb	r3, r3
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d105      	bne.n	8004d02 <drive_start+0x2a>
 8004cf6:	f04f 0300 	mov.w	r3, #0
 8004cfa:	4a0c      	ldr	r2, [pc, #48]	; (8004d2c <drive_start+0x54>)
 8004cfc:	6013      	str	r3, [r2, #0]
 8004cfe:	4a0c      	ldr	r2, [pc, #48]	; (8004d30 <drive_start+0x58>)
 8004d00:	6013      	str	r3, [r2, #0]
	MF.FLAG.DRV = 1;
 8004d02:	4a0c      	ldr	r2, [pc, #48]	; (8004d34 <drive_start+0x5c>)
 8004d04:	8813      	ldrh	r3, [r2, #0]
 8004d06:	f043 0302 	orr.w	r3, r3, #2
 8004d0a:	8013      	strh	r3, [r2, #0]
	MF.FLAG.SPD = 1;
 8004d0c:	4a09      	ldr	r2, [pc, #36]	; (8004d34 <drive_start+0x5c>)
 8004d0e:	8813      	ldrh	r3, [r2, #0]
 8004d10:	f043 0304 	orr.w	r3, r3, #4
 8004d14:	8013      	strh	r3, [r2, #0]
}
 8004d16:	bf00      	nop
 8004d18:	46bd      	mov	sp, r7
 8004d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1e:	4770      	bx	lr
 8004d20:	20000aec 	.word	0x20000aec
 8004d24:	200015c4 	.word	0x200015c4
 8004d28:	20000f64 	.word	0x20000f64
 8004d2c:	200001a0 	.word	0x200001a0
 8004d30:	20000bfc 	.word	0x20000bfc
 8004d34:	20000f68 	.word	0x20000f68

08004d38 <drive_stop>:
//drive_stop
// 走行を終了する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void drive_stop(void){
 8004d38:	b480      	push	{r7}
 8004d3a:	af00      	add	r7, sp, #0
	dist_l = dist_r = 0;		//a走行距離の初期化
 8004d3c:	f04f 0300 	mov.w	r3, #0
 8004d40:	4a0c      	ldr	r2, [pc, #48]	; (8004d74 <drive_stop+0x3c>)
 8004d42:	6013      	str	r3, [r2, #0]
 8004d44:	4a0c      	ldr	r2, [pc, #48]	; (8004d78 <drive_stop+0x40>)
 8004d46:	6013      	str	r3, [r2, #0]
	pulse_l = pulse_r = 0;		//aモータ出力の初期化
 8004d48:	f04f 0300 	mov.w	r3, #0
 8004d4c:	4a0b      	ldr	r2, [pc, #44]	; (8004d7c <drive_stop+0x44>)
 8004d4e:	6013      	str	r3, [r2, #0]
 8004d50:	4a0b      	ldr	r2, [pc, #44]	; (8004d80 <drive_stop+0x48>)
 8004d52:	6013      	str	r3, [r2, #0]
	MF.FLAG.DRV = 0;
 8004d54:	4a0b      	ldr	r2, [pc, #44]	; (8004d84 <drive_stop+0x4c>)
 8004d56:	8813      	ldrh	r3, [r2, #0]
 8004d58:	f36f 0341 	bfc	r3, #1, #1
 8004d5c:	8013      	strh	r3, [r2, #0]
	MF.FLAG.SPD = 0;
 8004d5e:	4a09      	ldr	r2, [pc, #36]	; (8004d84 <drive_stop+0x4c>)
 8004d60:	8813      	ldrh	r3, [r2, #0]
 8004d62:	f36f 0382 	bfc	r3, #2, #1
 8004d66:	8013      	strh	r3, [r2, #0]
}
 8004d68:	bf00      	nop
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d70:	4770      	bx	lr
 8004d72:	bf00      	nop
 8004d74:	20000aec 	.word	0x20000aec
 8004d78:	200015c4 	.word	0x200015c4
 8004d7c:	20000780 	.word	0x20000780
 8004d80:	20000ba8 	.word	0x20000ba8
 8004d84:	20000f68 	.word	0x20000f68

08004d88 <control_start>:
//control_start
// wallとgyroの姿勢制御を開始する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void control_start(){
 8004d88:	b480      	push	{r7}
 8004d8a:	af00      	add	r7, sp, #0
	MF.FLAG.WCTRL = 1;										//wall制御を有効にする
 8004d8c:	4a0f      	ldr	r2, [pc, #60]	; (8004dcc <control_start+0x44>)
 8004d8e:	8813      	ldrh	r3, [r2, #0]
 8004d90:	f043 0308 	orr.w	r3, r3, #8
 8004d94:	8013      	strh	r3, [r2, #0]
	if(run_mode == 5 && MF2.FLAG.TEMP)MF.FLAG.WCTRL = 0;
 8004d96:	4b0e      	ldr	r3, [pc, #56]	; (8004dd0 <control_start+0x48>)
 8004d98:	781b      	ldrb	r3, [r3, #0]
 8004d9a:	b2db      	uxtb	r3, r3
 8004d9c:	2b05      	cmp	r3, #5
 8004d9e:	d10b      	bne.n	8004db8 <control_start+0x30>
 8004da0:	4b0c      	ldr	r3, [pc, #48]	; (8004dd4 <control_start+0x4c>)
 8004da2:	881b      	ldrh	r3, [r3, #0]
 8004da4:	f3c3 2340 	ubfx	r3, r3, #9, #1
 8004da8:	b2db      	uxtb	r3, r3
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d004      	beq.n	8004db8 <control_start+0x30>
 8004dae:	4a07      	ldr	r2, [pc, #28]	; (8004dcc <control_start+0x44>)
 8004db0:	8813      	ldrh	r3, [r2, #0]
 8004db2:	f36f 03c3 	bfc	r3, #3, #1
 8004db6:	8013      	strh	r3, [r2, #0]
	MF.FLAG.GCTRL = 1;										//gyro制御を有効にする
 8004db8:	4a04      	ldr	r2, [pc, #16]	; (8004dcc <control_start+0x44>)
 8004dba:	8813      	ldrh	r3, [r2, #0]
 8004dbc:	f043 0310 	orr.w	r3, r3, #16
 8004dc0:	8013      	strh	r3, [r2, #0]
}
 8004dc2:	bf00      	nop
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dca:	4770      	bx	lr
 8004dcc:	20000f68 	.word	0x20000f68
 8004dd0:	20000456 	.word	0x20000456
 8004dd4:	20000f64 	.word	0x20000f64

08004dd8 <control_stop>:
//control_stop
// wallとgyroの姿勢制御を停止する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void control_stop(){
 8004dd8:	b480      	push	{r7}
 8004dda:	af00      	add	r7, sp, #0
	MF.FLAG.WCTRL = 0;										//wall制御を無効にする
 8004ddc:	4a07      	ldr	r2, [pc, #28]	; (8004dfc <control_stop+0x24>)
 8004dde:	8813      	ldrh	r3, [r2, #0]
 8004de0:	f36f 03c3 	bfc	r3, #3, #1
 8004de4:	8013      	strh	r3, [r2, #0]
	MF.FLAG.GCTRL = 0;										//gyro制御を無効にする
 8004de6:	4a05      	ldr	r2, [pc, #20]	; (8004dfc <control_stop+0x24>)
 8004de8:	8813      	ldrh	r3, [r2, #0]
 8004dea:	f36f 1304 	bfc	r3, #4, #1
 8004dee:	8013      	strh	r3, [r2, #0]
}
 8004df0:	bf00      	nop
 8004df2:	46bd      	mov	sp, r7
 8004df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df8:	4770      	bx	lr
 8004dfa:	bf00      	nop
 8004dfc:	20000f68 	.word	0x20000f68

08004e00 <drive_dir>:
//drive_dir
// wheel turn dir for each wheel
// 引数:1車輪選択(0=>L, 1=>R), 2回転方向選択(0=>CW, 1=>CWW, 2=>ShortBrake, 3=>free)
// 戻り値: なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void drive_dir(uint8_t wheel, uint8_t dir){
 8004e00:	b580      	push	{r7, lr}
 8004e02:	b082      	sub	sp, #8
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	4603      	mov	r3, r0
 8004e08:	460a      	mov	r2, r1
 8004e0a:	71fb      	strb	r3, [r7, #7]
 8004e0c:	4613      	mov	r3, r2
 8004e0e:	71bb      	strb	r3, [r7, #6]
	if(wheel == 0){
 8004e10:	79fb      	ldrb	r3, [r7, #7]
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d13e      	bne.n	8004e94 <drive_dir+0x94>
		if(dir == 0){
 8004e16:	79bb      	ldrb	r3, [r7, #6]
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d10f      	bne.n	8004e3c <drive_dir+0x3c>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_SET);		//L_CW
 8004e1c:	2201      	movs	r2, #1
 8004e1e:	2120      	movs	r1, #32
 8004e20:	483f      	ldr	r0, [pc, #252]	; (8004f20 <drive_dir+0x120>)
 8004e22:	f7fd fa6f 	bl	8002304 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET);	//L_CCW
 8004e26:	2200      	movs	r2, #0
 8004e28:	2110      	movs	r1, #16
 8004e2a:	483d      	ldr	r0, [pc, #244]	; (8004f20 <drive_dir+0x120>)
 8004e2c:	f7fd fa6a 	bl	8002304 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);		//STBY
 8004e30:	2201      	movs	r2, #1
 8004e32:	2101      	movs	r1, #1
 8004e34:	483b      	ldr	r0, [pc, #236]	; (8004f24 <drive_dir+0x124>)
 8004e36:	f7fd fa65 	bl	8002304 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);		//STBY
		}else{
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);	//STBY
		}
	}
}
 8004e3a:	e06c      	b.n	8004f16 <drive_dir+0x116>
		}else if(dir == 1){
 8004e3c:	79bb      	ldrb	r3, [r7, #6]
 8004e3e:	2b01      	cmp	r3, #1
 8004e40:	d10f      	bne.n	8004e62 <drive_dir+0x62>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET);	//L_CW
 8004e42:	2200      	movs	r2, #0
 8004e44:	2120      	movs	r1, #32
 8004e46:	4836      	ldr	r0, [pc, #216]	; (8004f20 <drive_dir+0x120>)
 8004e48:	f7fd fa5c 	bl	8002304 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_SET);		//L_CCW
 8004e4c:	2201      	movs	r2, #1
 8004e4e:	2110      	movs	r1, #16
 8004e50:	4833      	ldr	r0, [pc, #204]	; (8004f20 <drive_dir+0x120>)
 8004e52:	f7fd fa57 	bl	8002304 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);		//STBY
 8004e56:	2201      	movs	r2, #1
 8004e58:	2101      	movs	r1, #1
 8004e5a:	4832      	ldr	r0, [pc, #200]	; (8004f24 <drive_dir+0x124>)
 8004e5c:	f7fd fa52 	bl	8002304 <HAL_GPIO_WritePin>
}
 8004e60:	e059      	b.n	8004f16 <drive_dir+0x116>
		}else if(dir == 2){
 8004e62:	79bb      	ldrb	r3, [r7, #6]
 8004e64:	2b02      	cmp	r3, #2
 8004e66:	d10f      	bne.n	8004e88 <drive_dir+0x88>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_SET);		//L_CW
 8004e68:	2201      	movs	r2, #1
 8004e6a:	2120      	movs	r1, #32
 8004e6c:	482c      	ldr	r0, [pc, #176]	; (8004f20 <drive_dir+0x120>)
 8004e6e:	f7fd fa49 	bl	8002304 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_SET);		//L_CCW
 8004e72:	2201      	movs	r2, #1
 8004e74:	2110      	movs	r1, #16
 8004e76:	482a      	ldr	r0, [pc, #168]	; (8004f20 <drive_dir+0x120>)
 8004e78:	f7fd fa44 	bl	8002304 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);		//STBY
 8004e7c:	2201      	movs	r2, #1
 8004e7e:	2101      	movs	r1, #1
 8004e80:	4828      	ldr	r0, [pc, #160]	; (8004f24 <drive_dir+0x124>)
 8004e82:	f7fd fa3f 	bl	8002304 <HAL_GPIO_WritePin>
}
 8004e86:	e046      	b.n	8004f16 <drive_dir+0x116>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);	//STBY
 8004e88:	2200      	movs	r2, #0
 8004e8a:	2101      	movs	r1, #1
 8004e8c:	4825      	ldr	r0, [pc, #148]	; (8004f24 <drive_dir+0x124>)
 8004e8e:	f7fd fa39 	bl	8002304 <HAL_GPIO_WritePin>
}
 8004e92:	e040      	b.n	8004f16 <drive_dir+0x116>
		if(dir == 0){
 8004e94:	79bb      	ldrb	r3, [r7, #6]
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d110      	bne.n	8004ebc <drive_dir+0xbc>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);		//R_CW
 8004e9a:	2201      	movs	r2, #1
 8004e9c:	2102      	movs	r1, #2
 8004e9e:	4821      	ldr	r0, [pc, #132]	; (8004f24 <drive_dir+0x124>)
 8004ea0:	f7fd fa30 	bl	8002304 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);	//R_CCW
 8004ea4:	2200      	movs	r2, #0
 8004ea6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004eaa:	481e      	ldr	r0, [pc, #120]	; (8004f24 <drive_dir+0x124>)
 8004eac:	f7fd fa2a 	bl	8002304 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);		//STBY
 8004eb0:	2201      	movs	r2, #1
 8004eb2:	2101      	movs	r1, #1
 8004eb4:	481b      	ldr	r0, [pc, #108]	; (8004f24 <drive_dir+0x124>)
 8004eb6:	f7fd fa25 	bl	8002304 <HAL_GPIO_WritePin>
}
 8004eba:	e02c      	b.n	8004f16 <drive_dir+0x116>
		}else if(dir == 1){
 8004ebc:	79bb      	ldrb	r3, [r7, #6]
 8004ebe:	2b01      	cmp	r3, #1
 8004ec0:	d110      	bne.n	8004ee4 <drive_dir+0xe4>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);	//R_CW
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	2102      	movs	r1, #2
 8004ec6:	4817      	ldr	r0, [pc, #92]	; (8004f24 <drive_dir+0x124>)
 8004ec8:	f7fd fa1c 	bl	8002304 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);	//R_CCW
 8004ecc:	2201      	movs	r2, #1
 8004ece:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004ed2:	4814      	ldr	r0, [pc, #80]	; (8004f24 <drive_dir+0x124>)
 8004ed4:	f7fd fa16 	bl	8002304 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);		//STBY
 8004ed8:	2201      	movs	r2, #1
 8004eda:	2101      	movs	r1, #1
 8004edc:	4811      	ldr	r0, [pc, #68]	; (8004f24 <drive_dir+0x124>)
 8004ede:	f7fd fa11 	bl	8002304 <HAL_GPIO_WritePin>
}
 8004ee2:	e018      	b.n	8004f16 <drive_dir+0x116>
		}else if(dir == 2){
 8004ee4:	79bb      	ldrb	r3, [r7, #6]
 8004ee6:	2b02      	cmp	r3, #2
 8004ee8:	d110      	bne.n	8004f0c <drive_dir+0x10c>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);		//R_CW
 8004eea:	2201      	movs	r2, #1
 8004eec:	2102      	movs	r1, #2
 8004eee:	480d      	ldr	r0, [pc, #52]	; (8004f24 <drive_dir+0x124>)
 8004ef0:	f7fd fa08 	bl	8002304 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);	//R_CCW
 8004ef4:	2201      	movs	r2, #1
 8004ef6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004efa:	480a      	ldr	r0, [pc, #40]	; (8004f24 <drive_dir+0x124>)
 8004efc:	f7fd fa02 	bl	8002304 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);		//STBY
 8004f00:	2201      	movs	r2, #1
 8004f02:	2101      	movs	r1, #1
 8004f04:	4807      	ldr	r0, [pc, #28]	; (8004f24 <drive_dir+0x124>)
 8004f06:	f7fd f9fd 	bl	8002304 <HAL_GPIO_WritePin>
}
 8004f0a:	e004      	b.n	8004f16 <drive_dir+0x116>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);	//STBY
 8004f0c:	2200      	movs	r2, #0
 8004f0e:	2101      	movs	r1, #1
 8004f10:	4804      	ldr	r0, [pc, #16]	; (8004f24 <drive_dir+0x124>)
 8004f12:	f7fd f9f7 	bl	8002304 <HAL_GPIO_WritePin>
}
 8004f16:	bf00      	nop
 8004f18:	3708      	adds	r7, #8
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	bd80      	pop	{r7, pc}
 8004f1e:	bf00      	nop
 8004f20:	40020800 	.word	0x40020800
 8004f24:	40020400 	.word	0x40020400

08004f28 <run_select>:
//run_select
// a走行速度を選択する
// a引数：なし
// a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void run_select(){
 8004f28:	b580      	push	{r7, lr}
 8004f2a:	b082      	sub	sp, #8
 8004f2c:	af00      	add	r7, sp, #0
	full_led_write(YELLOW);
 8004f2e:	2006      	movs	r0, #6
 8004f30:	f00c fe66 	bl	8011c00 <full_led_write>
	int mode = 0;
 8004f34:	2300      	movs	r3, #0
 8004f36:	607b      	str	r3, [r7, #4]

	while(1){
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	b2db      	uxtb	r3, r3
 8004f3c:	f003 0301 	and.w	r3, r3, #1
 8004f40:	b2d8      	uxtb	r0, r3
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	b2db      	uxtb	r3, r3
 8004f46:	f003 0302 	and.w	r3, r3, #2
 8004f4a:	b2d9      	uxtb	r1, r3
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	b2db      	uxtb	r3, r3
 8004f50:	f003 0304 	and.w	r3, r3, #4
 8004f54:	b2db      	uxtb	r3, r3
 8004f56:	461a      	mov	r2, r3
 8004f58:	f00c fe18 	bl	8011b8c <led_write>
		if(dist_r >= 20){
 8004f5c:	4b21      	ldr	r3, [pc, #132]	; (8004fe4 <run_select+0xbc>)
 8004f5e:	edd3 7a00 	vldr	s15, [r3]
 8004f62:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8004f66:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004f6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f6e:	db0f      	blt.n	8004f90 <run_select+0x68>
			  mode++;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	3301      	adds	r3, #1
 8004f74:	607b      	str	r3, [r7, #4]
			  dist_r = 0;
 8004f76:	4b1b      	ldr	r3, [pc, #108]	; (8004fe4 <run_select+0xbc>)
 8004f78:	f04f 0200 	mov.w	r2, #0
 8004f7c:	601a      	str	r2, [r3, #0]
			  if(mode > 7){
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	2b07      	cmp	r3, #7
 8004f82:	dd01      	ble.n	8004f88 <run_select+0x60>
				  mode = 0;
 8004f84:	2300      	movs	r3, #0
 8004f86:	607b      	str	r3, [r7, #4]
			  }
			  printf("Mode : %d\n", mode);
 8004f88:	6879      	ldr	r1, [r7, #4]
 8004f8a:	4817      	ldr	r0, [pc, #92]	; (8004fe8 <run_select+0xc0>)
 8004f8c:	f00d fbcc 	bl	8012728 <iprintf>
		}
		if(dist_r <= -20){
 8004f90:	4b14      	ldr	r3, [pc, #80]	; (8004fe4 <run_select+0xbc>)
 8004f92:	edd3 7a00 	vldr	s15, [r3]
 8004f96:	eebb 7a04 	vmov.f32	s14, #180	; 0xc1a00000 -20.0
 8004f9a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004f9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004fa2:	d80f      	bhi.n	8004fc4 <run_select+0x9c>
			  mode--;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	3b01      	subs	r3, #1
 8004fa8:	607b      	str	r3, [r7, #4]
			  dist_r = 0;
 8004faa:	4b0e      	ldr	r3, [pc, #56]	; (8004fe4 <run_select+0xbc>)
 8004fac:	f04f 0200 	mov.w	r2, #0
 8004fb0:	601a      	str	r2, [r3, #0]
			  if(mode < 0){
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	da01      	bge.n	8004fbc <run_select+0x94>
				  mode = 7;
 8004fb8:	2307      	movs	r3, #7
 8004fba:	607b      	str	r3, [r7, #4]
			  }
			  printf("Mode : %d\n", mode);
 8004fbc:	6879      	ldr	r1, [r7, #4]
 8004fbe:	480a      	ldr	r0, [pc, #40]	; (8004fe8 <run_select+0xc0>)
 8004fc0:	f00d fbb2 	bl	8012728 <iprintf>
		}
		if(ad_fl >= WALL_BASE_FL){
 8004fc4:	4b09      	ldr	r3, [pc, #36]	; (8004fec <run_select+0xc4>)
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	2bc7      	cmp	r3, #199	; 0xc7
 8004fca:	d9b5      	bls.n	8004f38 <run_select+0x10>
			  run_mode = mode;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	b2da      	uxtb	r2, r3
 8004fd0:	4b07      	ldr	r3, [pc, #28]	; (8004ff0 <run_select+0xc8>)
 8004fd2:	701a      	strb	r2, [r3, #0]
			  full_led_write(BLUEGREEN);
 8004fd4:	2004      	movs	r0, #4
 8004fd6:	f00c fe13 	bl	8011c00 <full_led_write>
			  break;
 8004fda:	bf00      	nop
		}
	}
}
 8004fdc:	bf00      	nop
 8004fde:	3708      	adds	r7, #8
 8004fe0:	46bd      	mov	sp, r7
 8004fe2:	bd80      	pop	{r7, pc}
 8004fe4:	20000aec 	.word	0x20000aec
 8004fe8:	08013964 	.word	0x08013964
 8004fec:	20000d54 	.word	0x20000d54
 8004ff0:	20000456 	.word	0x20000456

08004ff4 <driveA>:
//driveA
// 指定距離、指定加速度で加速走行する
// 引数1：accel_p 加速度, 引数2：speed_min_p 最低速度, 引数3：speed_max_p 最高速度, 引数4：dist 走行距離
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void driveA(uint16_t accel_p, uint16_t speed_min_p, uint16_t speed_max_p, uint16_t dist){
 8004ff4:	b590      	push	{r4, r7, lr}
 8004ff6:	b083      	sub	sp, #12
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	4604      	mov	r4, r0
 8004ffc:	4608      	mov	r0, r1
 8004ffe:	4611      	mov	r1, r2
 8005000:	461a      	mov	r2, r3
 8005002:	4623      	mov	r3, r4
 8005004:	80fb      	strh	r3, [r7, #6]
 8005006:	4603      	mov	r3, r0
 8005008:	80bb      	strh	r3, [r7, #4]
 800500a:	460b      	mov	r3, r1
 800500c:	807b      	strh	r3, [r7, #2]
 800500e:	4613      	mov	r3, r2
 8005010:	803b      	strh	r3, [r7, #0]

	speed_min_l = speed_min_r = speed_min_p;
 8005012:	88bb      	ldrh	r3, [r7, #4]
 8005014:	ee07 3a90 	vmov	s15, r3
 8005018:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800501c:	4b27      	ldr	r3, [pc, #156]	; (80050bc <driveA+0xc8>)
 800501e:	edc3 7a00 	vstr	s15, [r3]
 8005022:	4b27      	ldr	r3, [pc, #156]	; (80050c0 <driveA+0xcc>)
 8005024:	edc3 7a00 	vstr	s15, [r3]
	speed_max_l = speed_max_r = speed_max_p;
 8005028:	887b      	ldrh	r3, [r7, #2]
 800502a:	ee07 3a90 	vmov	s15, r3
 800502e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005032:	4b24      	ldr	r3, [pc, #144]	; (80050c4 <driveA+0xd0>)
 8005034:	edc3 7a00 	vstr	s15, [r3]
 8005038:	4b23      	ldr	r3, [pc, #140]	; (80050c8 <driveA+0xd4>)
 800503a:	edc3 7a00 	vstr	s15, [r3]
	accel_l = accel_r = accel_p;							//引数の各パラメータをグローバル変数化
 800503e:	88fb      	ldrh	r3, [r7, #6]
 8005040:	ee07 3a90 	vmov	s15, r3
 8005044:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005048:	4b20      	ldr	r3, [pc, #128]	; (80050cc <driveA+0xd8>)
 800504a:	edc3 7a00 	vstr	s15, [r3]
 800504e:	4b20      	ldr	r3, [pc, #128]	; (80050d0 <driveA+0xdc>)
 8005050:	edc3 7a00 	vstr	s15, [r3]
	if(MF2.FLAG.HACCEL)target_speed_l = target_speed_r = speed_min_p;
 8005054:	4b1f      	ldr	r3, [pc, #124]	; (80050d4 <driveA+0xe0>)
 8005056:	881b      	ldrh	r3, [r3, #0]
 8005058:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800505c:	b2db      	uxtb	r3, r3
 800505e:	2b00      	cmp	r3, #0
 8005060:	d00a      	beq.n	8005078 <driveA+0x84>
 8005062:	88bb      	ldrh	r3, [r7, #4]
 8005064:	ee07 3a90 	vmov	s15, r3
 8005068:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800506c:	4b1a      	ldr	r3, [pc, #104]	; (80050d8 <driveA+0xe4>)
 800506e:	edc3 7a00 	vstr	s15, [r3]
 8005072:	4b1a      	ldr	r3, [pc, #104]	; (80050dc <driveA+0xe8>)
 8005074:	edc3 7a00 	vstr	s15, [r3]

	drive_start();											//走行開始
 8005078:	f7ff fe2e 	bl	8004cd8 <drive_start>

	//----走行----
	while((dist_l < dist) || (dist_r < dist));				//左右のモータが指定距離以上進むまで待機
 800507c:	bf00      	nop
 800507e:	883b      	ldrh	r3, [r7, #0]
 8005080:	ee07 3a90 	vmov	s15, r3
 8005084:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005088:	4b15      	ldr	r3, [pc, #84]	; (80050e0 <driveA+0xec>)
 800508a:	edd3 7a00 	vldr	s15, [r3]
 800508e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005092:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005096:	dcf2      	bgt.n	800507e <driveA+0x8a>
 8005098:	883b      	ldrh	r3, [r7, #0]
 800509a:	ee07 3a90 	vmov	s15, r3
 800509e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80050a2:	4b10      	ldr	r3, [pc, #64]	; (80050e4 <driveA+0xf0>)
 80050a4:	edd3 7a00 	vldr	s15, [r3]
 80050a8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80050ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050b0:	dce5      	bgt.n	800507e <driveA+0x8a>
}
 80050b2:	bf00      	nop
 80050b4:	370c      	adds	r7, #12
 80050b6:	46bd      	mov	sp, r7
 80050b8:	bd90      	pop	{r4, r7, pc}
 80050ba:	bf00      	nop
 80050bc:	20000f6c 	.word	0x20000f6c
 80050c0:	20000b54 	.word	0x20000b54
 80050c4:	200001a4 	.word	0x200001a4
 80050c8:	2000077c 	.word	0x2000077c
 80050cc:	20000ae4 	.word	0x20000ae4
 80050d0:	20000d58 	.word	0x20000d58
 80050d4:	20000f64 	.word	0x20000f64
 80050d8:	200001a0 	.word	0x200001a0
 80050dc:	20000bfc 	.word	0x20000bfc
 80050e0:	200015c4 	.word	0x200015c4
 80050e4:	20000aec 	.word	0x20000aec

080050e8 <driveD>:
//driveD
// 指定距離、指定減速度で減速走行する
// 引数1：accel_p 加速度, 引数2：speed_min_p 最低速度, 引数3：speed_max_p 最高速度, 引数4：dist 走行距離
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void driveD(int16_t accel_p, uint16_t speed_min_p, uint16_t speed_max_p, uint16_t dist){
 80050e8:	b590      	push	{r4, r7, lr}
 80050ea:	b085      	sub	sp, #20
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	4604      	mov	r4, r0
 80050f0:	4608      	mov	r0, r1
 80050f2:	4611      	mov	r1, r2
 80050f4:	461a      	mov	r2, r3
 80050f6:	4623      	mov	r3, r4
 80050f8:	80fb      	strh	r3, [r7, #6]
 80050fa:	4603      	mov	r3, r0
 80050fc:	80bb      	strh	r3, [r7, #4]
 80050fe:	460b      	mov	r3, r1
 8005100:	807b      	strh	r3, [r7, #2]
 8005102:	4613      	mov	r3, r2
 8005104:	803b      	strh	r3, [r7, #0]

	float speed_0 = (target_speed_l + target_speed_r) / 2;					//等速走行距離を計算するためにmain.cより参照
 8005106:	4b5a      	ldr	r3, [pc, #360]	; (8005270 <driveD+0x188>)
 8005108:	ed93 7a00 	vldr	s14, [r3]
 800510c:	4b59      	ldr	r3, [pc, #356]	; (8005274 <driveD+0x18c>)
 800510e:	edd3 7a00 	vldr	s15, [r3]
 8005112:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005116:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800511a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800511e:	edc7 7a03 	vstr	s15, [r7, #12]
	speed_min_l = speed_min_r = speed_min_p;
 8005122:	88bb      	ldrh	r3, [r7, #4]
 8005124:	ee07 3a90 	vmov	s15, r3
 8005128:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800512c:	4b52      	ldr	r3, [pc, #328]	; (8005278 <driveD+0x190>)
 800512e:	edc3 7a00 	vstr	s15, [r3]
 8005132:	4b52      	ldr	r3, [pc, #328]	; (800527c <driveD+0x194>)
 8005134:	edc3 7a00 	vstr	s15, [r3]
	speed_max_l = speed_max_r = speed_max_p;
 8005138:	887b      	ldrh	r3, [r7, #2]
 800513a:	ee07 3a90 	vmov	s15, r3
 800513e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005142:	4b4f      	ldr	r3, [pc, #316]	; (8005280 <driveD+0x198>)
 8005144:	edc3 7a00 	vstr	s15, [r3]
 8005148:	4b4e      	ldr	r3, [pc, #312]	; (8005284 <driveD+0x19c>)
 800514a:	edc3 7a00 	vstr	s15, [r3]
	accel_l = accel_r = accel_p;							//引数の各パラメータをグローバル変数化
 800514e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005152:	ee07 3a90 	vmov	s15, r3
 8005156:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800515a:	4b4b      	ldr	r3, [pc, #300]	; (8005288 <driveD+0x1a0>)
 800515c:	edc3 7a00 	vstr	s15, [r3]
 8005160:	4b4a      	ldr	r3, [pc, #296]	; (800528c <driveD+0x1a4>)
 8005162:	edc3 7a00 	vstr	s15, [r3]

	int16_t c_dist = dist - (speed_min_l*speed_min_l  - speed_0*speed_0)/(2*accel_l);			//等速走行距離 = 総距離 - 減速に必要な距離
 8005166:	883b      	ldrh	r3, [r7, #0]
 8005168:	ee07 3a90 	vmov	s15, r3
 800516c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005170:	4b42      	ldr	r3, [pc, #264]	; (800527c <driveD+0x194>)
 8005172:	edd3 6a00 	vldr	s13, [r3]
 8005176:	4b41      	ldr	r3, [pc, #260]	; (800527c <driveD+0x194>)
 8005178:	edd3 7a00 	vldr	s15, [r3]
 800517c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005180:	ed97 6a03 	vldr	s12, [r7, #12]
 8005184:	edd7 7a03 	vldr	s15, [r7, #12]
 8005188:	ee66 7a27 	vmul.f32	s15, s12, s15
 800518c:	ee36 6ae7 	vsub.f32	s12, s13, s15
 8005190:	4b3e      	ldr	r3, [pc, #248]	; (800528c <driveD+0x1a4>)
 8005192:	edd3 7a00 	vldr	s15, [r3]
 8005196:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800519a:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800519e:	ee77 7a67 	vsub.f32	s15, s14, s15
 80051a2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80051a6:	ee17 3a90 	vmov	r3, s15
 80051aa:	817b      	strh	r3, [r7, #10]

	accel_l = accel_r = 0;
 80051ac:	f04f 0300 	mov.w	r3, #0
 80051b0:	4a35      	ldr	r2, [pc, #212]	; (8005288 <driveD+0x1a0>)
 80051b2:	6013      	str	r3, [r2, #0]
 80051b4:	4a35      	ldr	r2, [pc, #212]	; (800528c <driveD+0x1a4>)
 80051b6:	6013      	str	r3, [r2, #0]
	dist_l = dist_r = 0;
 80051b8:	f04f 0300 	mov.w	r3, #0
 80051bc:	4a34      	ldr	r2, [pc, #208]	; (8005290 <driveD+0x1a8>)
 80051be:	6013      	str	r3, [r2, #0]
 80051c0:	4a34      	ldr	r2, [pc, #208]	; (8005294 <driveD+0x1ac>)
 80051c2:	6013      	str	r3, [r2, #0]
	if(c_dist > 0){
 80051c4:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	dd1c      	ble.n	8005206 <driveD+0x11e>
		//----等速走行----
		while((dist_l < c_dist) || (dist_r < c_dist));	//a左右のモータが等速分の距離以上進むまで待機
 80051cc:	bf00      	nop
 80051ce:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80051d2:	ee07 3a90 	vmov	s15, r3
 80051d6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80051da:	4b2e      	ldr	r3, [pc, #184]	; (8005294 <driveD+0x1ac>)
 80051dc:	edd3 7a00 	vldr	s15, [r3]
 80051e0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80051e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051e8:	dcf1      	bgt.n	80051ce <driveD+0xe6>
 80051ea:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80051ee:	ee07 3a90 	vmov	s15, r3
 80051f2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80051f6:	4b26      	ldr	r3, [pc, #152]	; (8005290 <driveD+0x1a8>)
 80051f8:	edd3 7a00 	vldr	s15, [r3]
 80051fc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005200:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005204:	dce3      	bgt.n	80051ce <driveD+0xe6>
	}
	accel_l = accel_r = accel_p;
 8005206:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800520a:	ee07 3a90 	vmov	s15, r3
 800520e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005212:	4b1d      	ldr	r3, [pc, #116]	; (8005288 <driveD+0x1a0>)
 8005214:	edc3 7a00 	vstr	s15, [r3]
 8005218:	4b1c      	ldr	r3, [pc, #112]	; (800528c <driveD+0x1a4>)
 800521a:	edc3 7a00 	vstr	s15, [r3]
	//----減速走行----
	while((dist_l < dist) && (dist_r < dist));			//a左右のモータが減速分の距離以上進むまで待機
 800521e:	bf00      	nop
 8005220:	883b      	ldrh	r3, [r7, #0]
 8005222:	ee07 3a90 	vmov	s15, r3
 8005226:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800522a:	4b1a      	ldr	r3, [pc, #104]	; (8005294 <driveD+0x1ac>)
 800522c:	edd3 7a00 	vldr	s15, [r3]
 8005230:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005234:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005238:	dd0c      	ble.n	8005254 <driveD+0x16c>
 800523a:	883b      	ldrh	r3, [r7, #0]
 800523c:	ee07 3a90 	vmov	s15, r3
 8005240:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005244:	4b12      	ldr	r3, [pc, #72]	; (8005290 <driveD+0x1a8>)
 8005246:	edd3 7a00 	vldr	s15, [r3]
 800524a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800524e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005252:	dce5      	bgt.n	8005220 <driveD+0x138>

	if(!MF2.FLAG.HACCEL)drive_stop();											//走行停止
 8005254:	4b10      	ldr	r3, [pc, #64]	; (8005298 <driveD+0x1b0>)
 8005256:	881b      	ldrh	r3, [r3, #0]
 8005258:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800525c:	b2db      	uxtb	r3, r3
 800525e:	2b00      	cmp	r3, #0
 8005260:	d101      	bne.n	8005266 <driveD+0x17e>
 8005262:	f7ff fd69 	bl	8004d38 <drive_stop>
}
 8005266:	bf00      	nop
 8005268:	3714      	adds	r7, #20
 800526a:	46bd      	mov	sp, r7
 800526c:	bd90      	pop	{r4, r7, pc}
 800526e:	bf00      	nop
 8005270:	20000bfc 	.word	0x20000bfc
 8005274:	200001a0 	.word	0x200001a0
 8005278:	20000f6c 	.word	0x20000f6c
 800527c:	20000b54 	.word	0x20000b54
 8005280:	200001a4 	.word	0x200001a4
 8005284:	2000077c 	.word	0x2000077c
 8005288:	20000ae4 	.word	0x20000ae4
 800528c:	20000d58 	.word	0x20000d58
 8005290:	20000aec 	.word	0x20000aec
 8005294:	200015c4 	.word	0x200015c4
 8005298:	20000f64 	.word	0x20000f64

0800529c <driveU>:
//driveU
// 指定距離分等速走行して停止する
// 引数1：dist …… 走行距離
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void driveU(uint16_t dist){
 800529c:	b480      	push	{r7}
 800529e:	b083      	sub	sp, #12
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	4603      	mov	r3, r0
 80052a4:	80fb      	strh	r3, [r7, #6]

	accel_l = accel_r = 0;									//等速走行のため加速度は0
 80052a6:	f04f 0300 	mov.w	r3, #0
 80052aa:	4a28      	ldr	r2, [pc, #160]	; (800534c <driveU+0xb0>)
 80052ac:	6013      	str	r3, [r2, #0]
 80052ae:	4a28      	ldr	r2, [pc, #160]	; (8005350 <driveU+0xb4>)
 80052b0:	6013      	str	r3, [r2, #0]
	dist_l = dist_r = 0;
 80052b2:	f04f 0300 	mov.w	r3, #0
 80052b6:	4a27      	ldr	r2, [pc, #156]	; (8005354 <driveU+0xb8>)
 80052b8:	6013      	str	r3, [r2, #0]
 80052ba:	4a27      	ldr	r2, [pc, #156]	; (8005358 <driveU+0xbc>)
 80052bc:	6013      	str	r3, [r2, #0]

	//----走行----
	while((dist_l < dist) || (dist_r < dist)){				//左右のモータが指定パルス以上進むまで待機
 80052be:	e024      	b.n	800530a <driveU+0x6e>
		if(MF.FLAG.WEDGE){
 80052c0:	4b26      	ldr	r3, [pc, #152]	; (800535c <driveU+0xc0>)
 80052c2:	881b      	ldrh	r3, [r3, #0]
 80052c4:	f3c3 23c0 	ubfx	r3, r3, #11, #1
 80052c8:	b2db      	uxtb	r3, r3
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d01d      	beq.n	800530a <driveU+0x6e>
			if(ad_l < WALL_BASE_L-40 || ad_r < WALL_BASE_R-40){
 80052ce:	4b24      	ldr	r3, [pc, #144]	; (8005360 <driveU+0xc4>)
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	2b63      	cmp	r3, #99	; 0x63
 80052d4:	d903      	bls.n	80052de <driveU+0x42>
 80052d6:	4b23      	ldr	r3, [pc, #140]	; (8005364 <driveU+0xc8>)
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	2b4f      	cmp	r3, #79	; 0x4f
 80052dc:	d815      	bhi.n	800530a <driveU+0x6e>
				while((dist_l < W_DIST) || (dist_r < W_DIST));	//左右のモータが壁切れ用指定距離以上進むまで待機
 80052de:	bf00      	nop
 80052e0:	4b1d      	ldr	r3, [pc, #116]	; (8005358 <driveU+0xbc>)
 80052e2:	edd3 7a00 	vldr	s15, [r3]
 80052e6:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8005368 <driveU+0xcc>
 80052ea:	eef4 7ac7 	vcmpe.f32	s15, s14
 80052ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80052f2:	d4f5      	bmi.n	80052e0 <driveU+0x44>
 80052f4:	4b17      	ldr	r3, [pc, #92]	; (8005354 <driveU+0xb8>)
 80052f6:	edd3 7a00 	vldr	s15, [r3]
 80052fa:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8005368 <driveU+0xcc>
 80052fe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005302:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005306:	d4eb      	bmi.n	80052e0 <driveU+0x44>
			break;
 8005308:	e019      	b.n	800533e <driveU+0xa2>
	while((dist_l < dist) || (dist_r < dist)){				//左右のモータが指定パルス以上進むまで待機
 800530a:	88fb      	ldrh	r3, [r7, #6]
 800530c:	ee07 3a90 	vmov	s15, r3
 8005310:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005314:	4b10      	ldr	r3, [pc, #64]	; (8005358 <driveU+0xbc>)
 8005316:	edd3 7a00 	vldr	s15, [r3]
 800531a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800531e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005322:	dccd      	bgt.n	80052c0 <driveU+0x24>
 8005324:	88fb      	ldrh	r3, [r7, #6]
 8005326:	ee07 3a90 	vmov	s15, r3
 800532a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800532e:	4b09      	ldr	r3, [pc, #36]	; (8005354 <driveU+0xb8>)
 8005330:	edd3 7a00 	vldr	s15, [r3]
 8005334:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005338:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800533c:	dcc0      	bgt.n	80052c0 <driveU+0x24>
			}
		}
	}
}
 800533e:	bf00      	nop
 8005340:	370c      	adds	r7, #12
 8005342:	46bd      	mov	sp, r7
 8005344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005348:	4770      	bx	lr
 800534a:	bf00      	nop
 800534c:	20000ae4 	.word	0x20000ae4
 8005350:	20000d58 	.word	0x20000d58
 8005354:	20000aec 	.word	0x20000aec
 8005358:	200015c4 	.word	0x200015c4
 800535c:	20000f68 	.word	0x20000f68
 8005360:	20000afc 	.word	0x20000afc
 8005364:	20000f60 	.word	0x20000f60
 8005368:	428c0000 	.word	0x428c0000

0800536c <driveC>:
//driveC
// 指定距離分デフォルト速度で走行して停止する
// 引数1：dist …… 走行距離
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void driveC(uint16_t dist){
 800536c:	b580      	push	{r7, lr}
 800536e:	b082      	sub	sp, #8
 8005370:	af00      	add	r7, sp, #0
 8005372:	4603      	mov	r3, r0
 8005374:	80fb      	strh	r3, [r7, #6]

	speed_min_l = speed_min_r = 150;
 8005376:	4b19      	ldr	r3, [pc, #100]	; (80053dc <driveC+0x70>)
 8005378:	4a19      	ldr	r2, [pc, #100]	; (80053e0 <driveC+0x74>)
 800537a:	6013      	str	r3, [r2, #0]
 800537c:	4a19      	ldr	r2, [pc, #100]	; (80053e4 <driveC+0x78>)
 800537e:	6013      	str	r3, [r2, #0]
	speed_max_l = speed_max_r = 150;
 8005380:	4b16      	ldr	r3, [pc, #88]	; (80053dc <driveC+0x70>)
 8005382:	4a19      	ldr	r2, [pc, #100]	; (80053e8 <driveC+0x7c>)
 8005384:	6013      	str	r3, [r2, #0]
 8005386:	4a19      	ldr	r2, [pc, #100]	; (80053ec <driveC+0x80>)
 8005388:	6013      	str	r3, [r2, #0]
	accel_l = accel_r = 0;												//等速走行のため加速度は0
 800538a:	f04f 0300 	mov.w	r3, #0
 800538e:	4a18      	ldr	r2, [pc, #96]	; (80053f0 <driveC+0x84>)
 8005390:	6013      	str	r3, [r2, #0]
 8005392:	4a18      	ldr	r2, [pc, #96]	; (80053f4 <driveC+0x88>)
 8005394:	6013      	str	r3, [r2, #0]

	drive_start();											//走行開始
 8005396:	f7ff fc9f 	bl	8004cd8 <drive_start>
	//====回転====
	while((dist_l < dist) || (dist_r < dist));			//左右のモータが定速分の距離以上進むまで待機
 800539a:	bf00      	nop
 800539c:	88fb      	ldrh	r3, [r7, #6]
 800539e:	ee07 3a90 	vmov	s15, r3
 80053a2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80053a6:	4b14      	ldr	r3, [pc, #80]	; (80053f8 <driveC+0x8c>)
 80053a8:	edd3 7a00 	vldr	s15, [r3]
 80053ac:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80053b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80053b4:	dcf2      	bgt.n	800539c <driveC+0x30>
 80053b6:	88fb      	ldrh	r3, [r7, #6]
 80053b8:	ee07 3a90 	vmov	s15, r3
 80053bc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80053c0:	4b0e      	ldr	r3, [pc, #56]	; (80053fc <driveC+0x90>)
 80053c2:	edd3 7a00 	vldr	s15, [r3]
 80053c6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80053ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80053ce:	dce5      	bgt.n	800539c <driveC+0x30>

	drive_stop();											//走行停止
 80053d0:	f7ff fcb2 	bl	8004d38 <drive_stop>
}
 80053d4:	bf00      	nop
 80053d6:	3708      	adds	r7, #8
 80053d8:	46bd      	mov	sp, r7
 80053da:	bd80      	pop	{r7, pc}
 80053dc:	43160000 	.word	0x43160000
 80053e0:	20000f6c 	.word	0x20000f6c
 80053e4:	20000b54 	.word	0x20000b54
 80053e8:	200001a4 	.word	0x200001a4
 80053ec:	2000077c 	.word	0x2000077c
 80053f0:	20000ae4 	.word	0x20000ae4
 80053f4:	20000d58 	.word	0x20000d58
 80053f8:	200015c4 	.word	0x200015c4
 80053fc:	20000aec 	.word	0x20000aec

08005400 <driveC2>:
//driveC2
//a指定距離分デフォルト逆回転速度で走行して停止する
//a引数1：dist …… 走行距離
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void driveC2(uint16_t dist){
 8005400:	b580      	push	{r7, lr}
 8005402:	b082      	sub	sp, #8
 8005404:	af00      	add	r7, sp, #0
 8005406:	4603      	mov	r3, r0
 8005408:	80fb      	strh	r3, [r7, #6]

	speed_min_l = speed_min_r = -250;
 800540a:	4b1a      	ldr	r3, [pc, #104]	; (8005474 <driveC2+0x74>)
 800540c:	4a1a      	ldr	r2, [pc, #104]	; (8005478 <driveC2+0x78>)
 800540e:	6013      	str	r3, [r2, #0]
 8005410:	4a1a      	ldr	r2, [pc, #104]	; (800547c <driveC2+0x7c>)
 8005412:	6013      	str	r3, [r2, #0]
	speed_max_l = speed_max_r = -250;
 8005414:	4b17      	ldr	r3, [pc, #92]	; (8005474 <driveC2+0x74>)
 8005416:	4a1a      	ldr	r2, [pc, #104]	; (8005480 <driveC2+0x80>)
 8005418:	6013      	str	r3, [r2, #0]
 800541a:	4a1a      	ldr	r2, [pc, #104]	; (8005484 <driveC2+0x84>)
 800541c:	6013      	str	r3, [r2, #0]
	accel_l = accel_r = 0;									//a等速走行のため加速度は0
 800541e:	f04f 0300 	mov.w	r3, #0
 8005422:	4a19      	ldr	r2, [pc, #100]	; (8005488 <driveC2+0x88>)
 8005424:	6013      	str	r3, [r2, #0]
 8005426:	4a19      	ldr	r2, [pc, #100]	; (800548c <driveC2+0x8c>)
 8005428:	6013      	str	r3, [r2, #0]

	drive_start();											//a走行開始
 800542a:	f7ff fc55 	bl	8004cd8 <drive_start>
	//====a回転====
	while((dist_l > (-1*dist)) || (dist_r > (-1*dist)));	//a左右のモータが定速分の逆走距離以上進むまで待機
 800542e:	bf00      	nop
 8005430:	88fb      	ldrh	r3, [r7, #6]
 8005432:	425b      	negs	r3, r3
 8005434:	ee07 3a90 	vmov	s15, r3
 8005438:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800543c:	4b14      	ldr	r3, [pc, #80]	; (8005490 <driveC2+0x90>)
 800543e:	edd3 7a00 	vldr	s15, [r3]
 8005442:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005446:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800544a:	d4f1      	bmi.n	8005430 <driveC2+0x30>
 800544c:	88fb      	ldrh	r3, [r7, #6]
 800544e:	425b      	negs	r3, r3
 8005450:	ee07 3a90 	vmov	s15, r3
 8005454:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005458:	4b0e      	ldr	r3, [pc, #56]	; (8005494 <driveC2+0x94>)
 800545a:	edd3 7a00 	vldr	s15, [r3]
 800545e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005462:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005466:	d4e3      	bmi.n	8005430 <driveC2+0x30>

	drive_stop();											//a走行停止
 8005468:	f7ff fc66 	bl	8004d38 <drive_stop>
}
 800546c:	bf00      	nop
 800546e:	3708      	adds	r7, #8
 8005470:	46bd      	mov	sp, r7
 8005472:	bd80      	pop	{r7, pc}
 8005474:	c37a0000 	.word	0xc37a0000
 8005478:	20000f6c 	.word	0x20000f6c
 800547c:	20000b54 	.word	0x20000b54
 8005480:	200001a4 	.word	0x200001a4
 8005484:	2000077c 	.word	0x2000077c
 8005488:	20000ae4 	.word	0x20000ae4
 800548c:	20000d58 	.word	0x20000d58
 8005490:	200015c4 	.word	0x200015c4
 8005494:	20000aec 	.word	0x20000aec

08005498 <slalomF>:
//slalomF
//aスラロームの前オフセット部分
//a引数1：
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void slalomF(int16_t accel_p, int16_t speed_p, uint8_t dist_p, uint16_t wall_fl, uint16_t wall_fr){
 8005498:	b590      	push	{r4, r7, lr}
 800549a:	b083      	sub	sp, #12
 800549c:	af00      	add	r7, sp, #0
 800549e:	4604      	mov	r4, r0
 80054a0:	4608      	mov	r0, r1
 80054a2:	4611      	mov	r1, r2
 80054a4:	461a      	mov	r2, r3
 80054a6:	4623      	mov	r3, r4
 80054a8:	80fb      	strh	r3, [r7, #6]
 80054aa:	4603      	mov	r3, r0
 80054ac:	80bb      	strh	r3, [r7, #4]
 80054ae:	460b      	mov	r3, r1
 80054b0:	70fb      	strb	r3, [r7, #3]
 80054b2:	4613      	mov	r3, r2
 80054b4:	803b      	strh	r3, [r7, #0]
	MF.FLAG.GYRO = 0;
 80054b6:	4a48      	ldr	r2, [pc, #288]	; (80055d8 <slalomF+0x140>)
 80054b8:	8813      	ldrh	r3, [r2, #0]
 80054ba:	f36f 2308 	bfc	r3, #8, #1
 80054be:	8013      	strh	r3, [r2, #0]
	MF.FLAG.SPD = 1;
 80054c0:	4a45      	ldr	r2, [pc, #276]	; (80055d8 <slalomF+0x140>)
 80054c2:	8813      	ldrh	r3, [r2, #0]
 80054c4:	f043 0304 	orr.w	r3, r3, #4
 80054c8:	8013      	strh	r3, [r2, #0]

	accel_l = accel_r = accel_p;
 80054ca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80054ce:	ee07 3a90 	vmov	s15, r3
 80054d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80054d6:	4b41      	ldr	r3, [pc, #260]	; (80055dc <slalomF+0x144>)
 80054d8:	edc3 7a00 	vstr	s15, [r3]
 80054dc:	4b40      	ldr	r3, [pc, #256]	; (80055e0 <slalomF+0x148>)
 80054de:	edc3 7a00 	vstr	s15, [r3]
	speed_max_l = speed_max_r = speed_p;
 80054e2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80054e6:	ee07 3a90 	vmov	s15, r3
 80054ea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80054ee:	4b3d      	ldr	r3, [pc, #244]	; (80055e4 <slalomF+0x14c>)
 80054f0:	edc3 7a00 	vstr	s15, [r3]
 80054f4:	4b3c      	ldr	r3, [pc, #240]	; (80055e8 <slalomF+0x150>)
 80054f6:	edc3 7a00 	vstr	s15, [r3]

	control_start();
 80054fa:	f7ff fc45 	bl	8004d88 <control_start>
	dist_l = dist_r = 0;
 80054fe:	f04f 0300 	mov.w	r3, #0
 8005502:	4a3a      	ldr	r2, [pc, #232]	; (80055ec <slalomF+0x154>)
 8005504:	6013      	str	r3, [r2, #0]
 8005506:	4a3a      	ldr	r2, [pc, #232]	; (80055f0 <slalomF+0x158>)
 8005508:	6013      	str	r3, [r2, #0]
	if(run_mode == 5 && MF2.FLAG.TEMP){
 800550a:	4b3a      	ldr	r3, [pc, #232]	; (80055f4 <slalomF+0x15c>)
 800550c:	781b      	ldrb	r3, [r3, #0]
 800550e:	b2db      	uxtb	r3, r3
 8005510:	2b05      	cmp	r3, #5
 8005512:	d13f      	bne.n	8005594 <slalomF+0xfc>
 8005514:	4b38      	ldr	r3, [pc, #224]	; (80055f8 <slalomF+0x160>)
 8005516:	881b      	ldrh	r3, [r3, #0]
 8005518:	f3c3 2340 	ubfx	r3, r3, #9, #1
 800551c:	b2db      	uxtb	r3, r3
 800551e:	2b00      	cmp	r3, #0
 8005520:	d038      	beq.n	8005594 <slalomF+0xfc>
		while(dist_l < dist_p || dist_r < dist_p){
 8005522:	e00e      	b.n	8005542 <slalomF+0xaa>
			if(ad_fl > wall_fl || ad_fr > wall_fr){
 8005524:	883a      	ldrh	r2, [r7, #0]
 8005526:	4b35      	ldr	r3, [pc, #212]	; (80055fc <slalomF+0x164>)
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	429a      	cmp	r2, r3
 800552c:	d304      	bcc.n	8005538 <slalomF+0xa0>
 800552e:	8b3a      	ldrh	r2, [r7, #24]
 8005530:	4b33      	ldr	r3, [pc, #204]	; (8005600 <slalomF+0x168>)
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	429a      	cmp	r2, r3
 8005536:	d204      	bcs.n	8005542 <slalomF+0xaa>
				full_led_write(RED);
 8005538:	2001      	movs	r0, #1
 800553a:	f00c fb61 	bl	8011c00 <full_led_write>
				break;
 800553e:	bf00      	nop
	if(run_mode == 5 && MF2.FLAG.TEMP){
 8005540:	e042      	b.n	80055c8 <slalomF+0x130>
		while(dist_l < dist_p || dist_r < dist_p){
 8005542:	78fb      	ldrb	r3, [r7, #3]
 8005544:	ee07 3a90 	vmov	s15, r3
 8005548:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800554c:	4b28      	ldr	r3, [pc, #160]	; (80055f0 <slalomF+0x158>)
 800554e:	edd3 7a00 	vldr	s15, [r3]
 8005552:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005556:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800555a:	dce3      	bgt.n	8005524 <slalomF+0x8c>
 800555c:	78fb      	ldrb	r3, [r7, #3]
 800555e:	ee07 3a90 	vmov	s15, r3
 8005562:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005566:	4b21      	ldr	r3, [pc, #132]	; (80055ec <slalomF+0x154>)
 8005568:	edd3 7a00 	vldr	s15, [r3]
 800556c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005570:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005574:	dcd6      	bgt.n	8005524 <slalomF+0x8c>
	if(run_mode == 5 && MF2.FLAG.TEMP){
 8005576:	e027      	b.n	80055c8 <slalomF+0x130>
			}
		}
	}else{
		while(dist_l < dist_p && dist_r < dist_p){
			if(ad_fl > wall_fl || ad_fr > wall_fr){
 8005578:	883a      	ldrh	r2, [r7, #0]
 800557a:	4b20      	ldr	r3, [pc, #128]	; (80055fc <slalomF+0x164>)
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	429a      	cmp	r2, r3
 8005580:	d304      	bcc.n	800558c <slalomF+0xf4>
 8005582:	8b3a      	ldrh	r2, [r7, #24]
 8005584:	4b1e      	ldr	r3, [pc, #120]	; (8005600 <slalomF+0x168>)
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	429a      	cmp	r2, r3
 800558a:	d203      	bcs.n	8005594 <slalomF+0xfc>
				full_led_write(RED);
 800558c:	2001      	movs	r0, #1
 800558e:	f00c fb37 	bl	8011c00 <full_led_write>
				break;
 8005592:	e019      	b.n	80055c8 <slalomF+0x130>
		while(dist_l < dist_p && dist_r < dist_p){
 8005594:	78fb      	ldrb	r3, [r7, #3]
 8005596:	ee07 3a90 	vmov	s15, r3
 800559a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800559e:	4b14      	ldr	r3, [pc, #80]	; (80055f0 <slalomF+0x158>)
 80055a0:	edd3 7a00 	vldr	s15, [r3]
 80055a4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80055a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80055ac:	dd0c      	ble.n	80055c8 <slalomF+0x130>
 80055ae:	78fb      	ldrb	r3, [r7, #3]
 80055b0:	ee07 3a90 	vmov	s15, r3
 80055b4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80055b8:	4b0c      	ldr	r3, [pc, #48]	; (80055ec <slalomF+0x154>)
 80055ba:	edd3 7a00 	vldr	s15, [r3]
 80055be:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80055c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80055c6:	dcd7      	bgt.n	8005578 <slalomF+0xe0>
			}
		}
	}
	drive_stop();
 80055c8:	f7ff fbb6 	bl	8004d38 <drive_stop>
	control_stop();
 80055cc:	f7ff fc04 	bl	8004dd8 <control_stop>
}
 80055d0:	bf00      	nop
 80055d2:	370c      	adds	r7, #12
 80055d4:	46bd      	mov	sp, r7
 80055d6:	bd90      	pop	{r4, r7, pc}
 80055d8:	20000f68 	.word	0x20000f68
 80055dc:	20000ae4 	.word	0x20000ae4
 80055e0:	20000d58 	.word	0x20000d58
 80055e4:	200001a4 	.word	0x200001a4
 80055e8:	2000077c 	.word	0x2000077c
 80055ec:	20000aec 	.word	0x20000aec
 80055f0:	200015c4 	.word	0x200015c4
 80055f4:	20000456 	.word	0x20000456
 80055f8:	20000f64 	.word	0x20000f64
 80055fc:	20000d54 	.word	0x20000d54
 8005600:	20000c00 	.word	0x20000c00

08005604 <slalomR>:
//slalomR
//aスラロームの旋回部分
//a引数1：
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void slalomR(int32_t degaccel_p, int16_t omega_p, int16_t degree_p, int16_t speed_p){
 8005604:	b580      	push	{r7, lr}
 8005606:	b086      	sub	sp, #24
 8005608:	af00      	add	r7, sp, #0
 800560a:	60f8      	str	r0, [r7, #12]
 800560c:	4608      	mov	r0, r1
 800560e:	4611      	mov	r1, r2
 8005610:	461a      	mov	r2, r3
 8005612:	4603      	mov	r3, r0
 8005614:	817b      	strh	r3, [r7, #10]
 8005616:	460b      	mov	r3, r1
 8005618:	813b      	strh	r3, [r7, #8]
 800561a:	4613      	mov	r3, r2
 800561c:	80fb      	strh	r3, [r7, #6]
	MF.FLAG.GYRO = 1;
 800561e:	4a82      	ldr	r2, [pc, #520]	; (8005828 <slalomR+0x224>)
 8005620:	8813      	ldrh	r3, [r2, #0]
 8005622:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005626:	8013      	strh	r3, [r2, #0]
	full_led_write(WHITE);
 8005628:	2007      	movs	r0, #7
 800562a:	f00c fae9 	bl	8011c00 <full_led_write>
	target_degaccel_z = degaccel_p;
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	ee07 3a90 	vmov	s15, r3
 8005634:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005638:	4b7c      	ldr	r3, [pc, #496]	; (800582c <slalomR+0x228>)
 800563a:	edc3 7a00 	vstr	s15, [r3]
	target_omega_z = 0;
 800563e:	4b7c      	ldr	r3, [pc, #496]	; (8005830 <slalomR+0x22c>)
 8005640:	f04f 0200 	mov.w	r2, #0
 8005644:	601a      	str	r2, [r3, #0]
	speed_G = speed_p;
 8005646:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800564a:	ee07 3a90 	vmov	s15, r3
 800564e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005652:	4b78      	ldr	r3, [pc, #480]	; (8005834 <slalomR+0x230>)
 8005654:	edc3 7a00 	vstr	s15, [r3]

	int16_t c_degree;

	if(omega_p < 0){
 8005658:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800565c:	2b00      	cmp	r3, #0
 800565e:	da1f      	bge.n	80056a0 <slalomR+0x9c>
		omega_min = omega_p;
 8005660:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8005664:	ee07 3a90 	vmov	s15, r3
 8005668:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800566c:	4b72      	ldr	r3, [pc, #456]	; (8005838 <slalomR+0x234>)
 800566e:	edc3 7a00 	vstr	s15, [r3]
		c_degree =  omega_min * omega_min / target_degaccel_z / 2;
 8005672:	4b71      	ldr	r3, [pc, #452]	; (8005838 <slalomR+0x234>)
 8005674:	ed93 7a00 	vldr	s14, [r3]
 8005678:	4b6f      	ldr	r3, [pc, #444]	; (8005838 <slalomR+0x234>)
 800567a:	edd3 7a00 	vldr	s15, [r3]
 800567e:	ee67 6a27 	vmul.f32	s13, s14, s15
 8005682:	4b6a      	ldr	r3, [pc, #424]	; (800582c <slalomR+0x228>)
 8005684:	edd3 7a00 	vldr	s15, [r3]
 8005688:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800568c:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8005690:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005694:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005698:	ee17 3a90 	vmov	r3, s15
 800569c:	82fb      	strh	r3, [r7, #22]
 800569e:	e01e      	b.n	80056de <slalomR+0xda>
	}else{
		omega_max = omega_p;
 80056a0:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80056a4:	ee07 3a90 	vmov	s15, r3
 80056a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80056ac:	4b63      	ldr	r3, [pc, #396]	; (800583c <slalomR+0x238>)
 80056ae:	edc3 7a00 	vstr	s15, [r3]
		c_degree =  omega_max * omega_max / target_degaccel_z / 2;
 80056b2:	4b62      	ldr	r3, [pc, #392]	; (800583c <slalomR+0x238>)
 80056b4:	ed93 7a00 	vldr	s14, [r3]
 80056b8:	4b60      	ldr	r3, [pc, #384]	; (800583c <slalomR+0x238>)
 80056ba:	edd3 7a00 	vldr	s15, [r3]
 80056be:	ee67 6a27 	vmul.f32	s13, s14, s15
 80056c2:	4b5a      	ldr	r3, [pc, #360]	; (800582c <slalomR+0x228>)
 80056c4:	edd3 7a00 	vldr	s15, [r3]
 80056c8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80056cc:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80056d0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80056d4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80056d8:	ee17 3a90 	vmov	r3, s15
 80056dc:	82fb      	strh	r3, [r7, #22]
	}

	MF.FLAG.DRV = 1;
 80056de:	4a52      	ldr	r2, [pc, #328]	; (8005828 <slalomR+0x224>)
 80056e0:	8813      	ldrh	r3, [r2, #0]
 80056e2:	f043 0302 	orr.w	r3, r3, #2
 80056e6:	8013      	strh	r3, [r2, #0]
	if(omega_p < 0){
 80056e8:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	da14      	bge.n	800571a <slalomR+0x116>
		while(degree_z > target_degree_z+c_degree);
 80056f0:	bf00      	nop
 80056f2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80056f6:	ee07 3a90 	vmov	s15, r3
 80056fa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80056fe:	4b50      	ldr	r3, [pc, #320]	; (8005840 <slalomR+0x23c>)
 8005700:	edd3 7a00 	vldr	s15, [r3]
 8005704:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005708:	4b4e      	ldr	r3, [pc, #312]	; (8005844 <slalomR+0x240>)
 800570a:	edd3 7a00 	vldr	s15, [r3]
 800570e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005712:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005716:	d4ec      	bmi.n	80056f2 <slalomR+0xee>
 8005718:	e013      	b.n	8005742 <slalomR+0x13e>
	}else{
		while(degree_z < target_degree_z+c_degree);
 800571a:	bf00      	nop
 800571c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8005720:	ee07 3a90 	vmov	s15, r3
 8005724:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005728:	4b45      	ldr	r3, [pc, #276]	; (8005840 <slalomR+0x23c>)
 800572a:	edd3 7a00 	vldr	s15, [r3]
 800572e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005732:	4b44      	ldr	r3, [pc, #272]	; (8005844 <slalomR+0x240>)
 8005734:	edd3 7a00 	vldr	s15, [r3]
 8005738:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800573c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005740:	dcec      	bgt.n	800571c <slalomR+0x118>
	}

	target_degaccel_z = 0;
 8005742:	4b3a      	ldr	r3, [pc, #232]	; (800582c <slalomR+0x228>)
 8005744:	f04f 0200 	mov.w	r2, #0
 8005748:	601a      	str	r2, [r3, #0]

	if(omega_p < 0){
 800574a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800574e:	2b00      	cmp	r3, #0
 8005750:	da18      	bge.n	8005784 <slalomR+0x180>
		while(degree_z > target_degree_z+(degree_p-c_degree-4));
 8005752:	bf00      	nop
 8005754:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8005758:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800575c:	1ad3      	subs	r3, r2, r3
 800575e:	3b04      	subs	r3, #4
 8005760:	ee07 3a90 	vmov	s15, r3
 8005764:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005768:	4b35      	ldr	r3, [pc, #212]	; (8005840 <slalomR+0x23c>)
 800576a:	edd3 7a00 	vldr	s15, [r3]
 800576e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005772:	4b34      	ldr	r3, [pc, #208]	; (8005844 <slalomR+0x240>)
 8005774:	edd3 7a00 	vldr	s15, [r3]
 8005778:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800577c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005780:	d4e8      	bmi.n	8005754 <slalomR+0x150>
 8005782:	e017      	b.n	80057b4 <slalomR+0x1b0>
	}else{
		while(degree_z < target_degree_z+(degree_p-c_degree+4));
 8005784:	bf00      	nop
 8005786:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800578a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800578e:	1ad3      	subs	r3, r2, r3
 8005790:	3304      	adds	r3, #4
 8005792:	ee07 3a90 	vmov	s15, r3
 8005796:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800579a:	4b29      	ldr	r3, [pc, #164]	; (8005840 <slalomR+0x23c>)
 800579c:	edd3 7a00 	vldr	s15, [r3]
 80057a0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80057a4:	4b27      	ldr	r3, [pc, #156]	; (8005844 <slalomR+0x240>)
 80057a6:	edd3 7a00 	vldr	s15, [r3]
 80057aa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80057ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80057b2:	dce8      	bgt.n	8005786 <slalomR+0x182>
	}

	target_degaccel_z = -degaccel_p;
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	425b      	negs	r3, r3
 80057b8:	ee07 3a90 	vmov	s15, r3
 80057bc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80057c0:	4b1a      	ldr	r3, [pc, #104]	; (800582c <slalomR+0x228>)
 80057c2:	edc3 7a00 	vstr	s15, [r3]

	if(omega_p < 0){
 80057c6:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	da14      	bge.n	80057f8 <slalomR+0x1f4>
		while(degree_z > target_degree_z+degree_p);
 80057ce:	bf00      	nop
 80057d0:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80057d4:	ee07 3a90 	vmov	s15, r3
 80057d8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80057dc:	4b18      	ldr	r3, [pc, #96]	; (8005840 <slalomR+0x23c>)
 80057de:	edd3 7a00 	vldr	s15, [r3]
 80057e2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80057e6:	4b17      	ldr	r3, [pc, #92]	; (8005844 <slalomR+0x240>)
 80057e8:	edd3 7a00 	vldr	s15, [r3]
 80057ec:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80057f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80057f4:	d4ec      	bmi.n	80057d0 <slalomR+0x1cc>
	}else{
		while(degree_z < target_degree_z+degree_p);
	}
}
 80057f6:	e013      	b.n	8005820 <slalomR+0x21c>
		while(degree_z < target_degree_z+degree_p);
 80057f8:	bf00      	nop
 80057fa:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80057fe:	ee07 3a90 	vmov	s15, r3
 8005802:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005806:	4b0e      	ldr	r3, [pc, #56]	; (8005840 <slalomR+0x23c>)
 8005808:	edd3 7a00 	vldr	s15, [r3]
 800580c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005810:	4b0c      	ldr	r3, [pc, #48]	; (8005844 <slalomR+0x240>)
 8005812:	edd3 7a00 	vldr	s15, [r3]
 8005816:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800581a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800581e:	dcec      	bgt.n	80057fa <slalomR+0x1f6>
}
 8005820:	bf00      	nop
 8005822:	3718      	adds	r7, #24
 8005824:	46bd      	mov	sp, r7
 8005826:	bd80      	pop	{r7, pc}
 8005828:	20000f68 	.word	0x20000f68
 800582c:	20000b58 	.word	0x20000b58
 8005830:	200001a8 	.word	0x200001a8
 8005834:	20000af4 	.word	0x20000af4
 8005838:	200002b8 	.word	0x200002b8
 800583c:	20000ae8 	.word	0x20000ae8
 8005840:	20000bf8 	.word	0x20000bf8
 8005844:	20000b5c 	.word	0x20000b5c

08005848 <slalomB>:
//slalomB
//aスラロームの後オフセット部分
//a引数1：
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void slalomB(int16_t accel_p, int16_t speed_p, uint8_t dist_p){
 8005848:	b580      	push	{r7, lr}
 800584a:	b082      	sub	sp, #8
 800584c:	af00      	add	r7, sp, #0
 800584e:	4603      	mov	r3, r0
 8005850:	80fb      	strh	r3, [r7, #6]
 8005852:	460b      	mov	r3, r1
 8005854:	80bb      	strh	r3, [r7, #4]
 8005856:	4613      	mov	r3, r2
 8005858:	70fb      	strb	r3, [r7, #3]
	MF.FLAG.GYRO = 0;
 800585a:	4a25      	ldr	r2, [pc, #148]	; (80058f0 <slalomB+0xa8>)
 800585c:	8813      	ldrh	r3, [r2, #0]
 800585e:	f36f 2308 	bfc	r3, #8, #1
 8005862:	8013      	strh	r3, [r2, #0]
	MF.FLAG.SPD = 1;
 8005864:	4a22      	ldr	r2, [pc, #136]	; (80058f0 <slalomB+0xa8>)
 8005866:	8813      	ldrh	r3, [r2, #0]
 8005868:	f043 0304 	orr.w	r3, r3, #4
 800586c:	8013      	strh	r3, [r2, #0]

	accel_l = accel_r = accel_p;
 800586e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005872:	ee07 3a90 	vmov	s15, r3
 8005876:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800587a:	4b1e      	ldr	r3, [pc, #120]	; (80058f4 <slalomB+0xac>)
 800587c:	edc3 7a00 	vstr	s15, [r3]
 8005880:	4b1d      	ldr	r3, [pc, #116]	; (80058f8 <slalomB+0xb0>)
 8005882:	edc3 7a00 	vstr	s15, [r3]
	speed_max_l = speed_max_r = speed_p;
 8005886:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800588a:	ee07 3a90 	vmov	s15, r3
 800588e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005892:	4b1a      	ldr	r3, [pc, #104]	; (80058fc <slalomB+0xb4>)
 8005894:	edc3 7a00 	vstr	s15, [r3]
 8005898:	4b19      	ldr	r3, [pc, #100]	; (8005900 <slalomB+0xb8>)
 800589a:	edc3 7a00 	vstr	s15, [r3]

	control_start();
 800589e:	f7ff fa73 	bl	8004d88 <control_start>
	dist_l = dist_r = 0;
 80058a2:	f04f 0300 	mov.w	r3, #0
 80058a6:	4a17      	ldr	r2, [pc, #92]	; (8005904 <slalomB+0xbc>)
 80058a8:	6013      	str	r3, [r2, #0]
 80058aa:	4a17      	ldr	r2, [pc, #92]	; (8005908 <slalomB+0xc0>)
 80058ac:	6013      	str	r3, [r2, #0]
	while(dist_l < dist_p && dist_r < dist_p);
 80058ae:	bf00      	nop
 80058b0:	78fb      	ldrb	r3, [r7, #3]
 80058b2:	ee07 3a90 	vmov	s15, r3
 80058b6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80058ba:	4b13      	ldr	r3, [pc, #76]	; (8005908 <slalomB+0xc0>)
 80058bc:	edd3 7a00 	vldr	s15, [r3]
 80058c0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80058c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80058c8:	dc00      	bgt.n	80058cc <slalomB+0x84>
}
 80058ca:	e00c      	b.n	80058e6 <slalomB+0x9e>
	while(dist_l < dist_p && dist_r < dist_p);
 80058cc:	78fb      	ldrb	r3, [r7, #3]
 80058ce:	ee07 3a90 	vmov	s15, r3
 80058d2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80058d6:	4b0b      	ldr	r3, [pc, #44]	; (8005904 <slalomB+0xbc>)
 80058d8:	edd3 7a00 	vldr	s15, [r3]
 80058dc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80058e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80058e4:	dce4      	bgt.n	80058b0 <slalomB+0x68>
}
 80058e6:	bf00      	nop
 80058e8:	3708      	adds	r7, #8
 80058ea:	46bd      	mov	sp, r7
 80058ec:	bd80      	pop	{r7, pc}
 80058ee:	bf00      	nop
 80058f0:	20000f68 	.word	0x20000f68
 80058f4:	20000ae4 	.word	0x20000ae4
 80058f8:	20000d58 	.word	0x20000d58
 80058fc:	200001a4 	.word	0x200001a4
 8005900:	2000077c 	.word	0x2000077c
 8005904:	20000aec 	.word	0x20000aec
 8005908:	200015c4 	.word	0x200015c4

0800590c <set_position>:
//set_position
//a機体の尻を壁に当てて場所を区画中央に合わせる
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void set_position(){
 800590c:	b580      	push	{r7, lr}
 800590e:	af00      	add	r7, sp, #0

  driveC2(SETPOS_BACK);         //a尻を当てる程度に後退。回転後に停止する
 8005910:	2064      	movs	r0, #100	; 0x64
 8005912:	f7ff fd75 	bl	8005400 <driveC2>
  degree_z = target_degree_z;
 8005916:	4b05      	ldr	r3, [pc, #20]	; (800592c <set_position+0x20>)
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	4a05      	ldr	r2, [pc, #20]	; (8005930 <set_position+0x24>)
 800591c:	6013      	str	r3, [r2, #0]
  start_mode = 0;
 800591e:	4b05      	ldr	r3, [pc, #20]	; (8005934 <set_position+0x28>)
 8005920:	2200      	movs	r2, #0
 8005922:	701a      	strb	r2, [r3, #0]
  start_sectionA();
 8005924:	f000 f826 	bl	8005974 <start_sectionA>
}
 8005928:	bf00      	nop
 800592a:	bd80      	pop	{r7, pc}
 800592c:	20000bf8 	.word	0x20000bf8
 8005930:	20000b5c 	.word	0x20000b5c
 8005934:	200015c8 	.word	0x200015c8

08005938 <set_positionF>:
//set_positionF
//a前壁との距離を測定し、場所を区画中央に合わせる
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void set_positionF(){
 8005938:	b580      	push	{r7, lr}
 800593a:	af00      	add	r7, sp, #0

	full_led_write(RED);
 800593c:	2001      	movs	r0, #1
 800593e:	f00c f95f 	bl	8011c00 <full_led_write>
	HAL_Delay(100);
 8005942:	2064      	movs	r0, #100	; 0x64
 8005944:	f7fb fb6a 	bl	800101c <HAL_Delay>

	MF.FLAG.DRV = 1;
 8005948:	4a09      	ldr	r2, [pc, #36]	; (8005970 <set_positionF+0x38>)
 800594a:	8813      	ldrh	r3, [r2, #0]
 800594c:	f043 0302 	orr.w	r3, r3, #2
 8005950:	8013      	strh	r3, [r2, #0]
//	MF.FLAG.FWALL = 1;
	MF.FLAG.GCTRL = 1;
 8005952:	4a07      	ldr	r2, [pc, #28]	; (8005970 <set_positionF+0x38>)
 8005954:	8813      	ldrh	r3, [r2, #0]
 8005956:	f043 0310 	orr.w	r3, r3, #16
 800595a:	8013      	strh	r3, [r2, #0]
//	while(MF.FLAG.FWALL);

	MF.FLAG.GCTRL = 0;
 800595c:	4a04      	ldr	r2, [pc, #16]	; (8005970 <set_positionF+0x38>)
 800595e:	8813      	ldrh	r3, [r2, #0]
 8005960:	f36f 1304 	bfc	r3, #4, #1
 8005964:	8013      	strh	r3, [r2, #0]
	drive_stop();
 8005966:	f7ff f9e7 	bl	8004d38 <drive_stop>
}
 800596a:	bf00      	nop
 800596c:	bd80      	pop	{r7, pc}
 800596e:	bf00      	nop
 8005970:	20000f68 	.word	0x20000f68

08005974 <start_sectionA>:
//start_sectionA
// スタート区画分加速しながら走行する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void start_sectionA(void){
 8005974:	b580      	push	{r7, lr}
 8005976:	af00      	add	r7, sp, #0

	control_start();
 8005978:	f7ff fa06 	bl	8004d88 <control_start>
	if(run_mode == LOW){
 800597c:	4b94      	ldr	r3, [pc, #592]	; (8005bd0 <start_sectionA+0x25c>)
 800597e:	781b      	ldrb	r3, [r3, #0]
 8005980:	b2db      	uxtb	r3, r3
 8005982:	2b01      	cmp	r3, #1
 8005984:	d12a      	bne.n	80059dc <start_sectionA+0x68>
		if(start_mode == 0){
 8005986:	4b93      	ldr	r3, [pc, #588]	; (8005bd4 <start_sectionA+0x260>)
 8005988:	781b      	ldrb	r3, [r3, #0]
 800598a:	b2db      	uxtb	r3, r3
 800598c:	2b00      	cmp	r3, #0
 800598e:	d108      	bne.n	80059a2 <start_sectionA+0x2e>
			driveA(4000, SPEED_MIN, SPEED_LOW, SEC_START);					//aスタート区画分加速しながら走行。走行後は停止しない
 8005990:	2388      	movs	r3, #136	; 0x88
 8005992:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8005996:	211e      	movs	r1, #30
 8005998:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 800599c:	f7ff fb2a 	bl	8004ff4 <driveA>
 80059a0:	e108      	b.n	8005bb4 <start_sectionA+0x240>
		}else if(start_mode == 1){
 80059a2:	4b8c      	ldr	r3, [pc, #560]	; (8005bd4 <start_sectionA+0x260>)
 80059a4:	781b      	ldrb	r3, [r3, #0]
 80059a6:	b2db      	uxtb	r3, r3
 80059a8:	2b01      	cmp	r3, #1
 80059aa:	d108      	bne.n	80059be <start_sectionA+0x4a>
			driveA(4000, SPEED_MIN, SPEED_LOW, SEC_HALF);					//a半区画分加速しながら走行。走行後は停止しない
 80059ac:	235b      	movs	r3, #91	; 0x5b
 80059ae:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80059b2:	211e      	movs	r1, #30
 80059b4:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 80059b8:	f7ff fb1c 	bl	8004ff4 <driveA>
 80059bc:	e0fa      	b.n	8005bb4 <start_sectionA+0x240>
		}else if(start_mode == 2){
 80059be:	4b85      	ldr	r3, [pc, #532]	; (8005bd4 <start_sectionA+0x260>)
 80059c0:	781b      	ldrb	r3, [r3, #0]
 80059c2:	b2db      	uxtb	r3, r3
 80059c4:	2b02      	cmp	r3, #2
 80059c6:	f040 80f5 	bne.w	8005bb4 <start_sectionA+0x240>
			driveA(4000, SPEED_MIN, SPEED_LOW, SEC_START_HALF);				//aスタート半区画分加速しながら走行。走行後は停止しない
 80059ca:	232d      	movs	r3, #45	; 0x2d
 80059cc:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80059d0:	211e      	movs	r1, #30
 80059d2:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 80059d6:	f7ff fb0d 	bl	8004ff4 <driveA>
 80059da:	e0eb      	b.n	8005bb4 <start_sectionA+0x240>
		}
	}else if(run_mode == MIDDLE){
 80059dc:	4b7c      	ldr	r3, [pc, #496]	; (8005bd0 <start_sectionA+0x25c>)
 80059de:	781b      	ldrb	r3, [r3, #0]
 80059e0:	b2db      	uxtb	r3, r3
 80059e2:	2b02      	cmp	r3, #2
 80059e4:	d12a      	bne.n	8005a3c <start_sectionA+0xc8>
		if(start_mode == 0){
 80059e6:	4b7b      	ldr	r3, [pc, #492]	; (8005bd4 <start_sectionA+0x260>)
 80059e8:	781b      	ldrb	r3, [r3, #0]
 80059ea:	b2db      	uxtb	r3, r3
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d108      	bne.n	8005a02 <start_sectionA+0x8e>
			driveA(6000, SPEED_MIN, SPEED_MIDDLE, SEC_START);				//aスタート区画分加速しながら走行。走行後は停止しない
 80059f0:	2388      	movs	r3, #136	; 0x88
 80059f2:	f44f 7216 	mov.w	r2, #600	; 0x258
 80059f6:	211e      	movs	r1, #30
 80059f8:	f241 7070 	movw	r0, #6000	; 0x1770
 80059fc:	f7ff fafa 	bl	8004ff4 <driveA>
 8005a00:	e0d8      	b.n	8005bb4 <start_sectionA+0x240>
		}else if(start_mode == 1){
 8005a02:	4b74      	ldr	r3, [pc, #464]	; (8005bd4 <start_sectionA+0x260>)
 8005a04:	781b      	ldrb	r3, [r3, #0]
 8005a06:	b2db      	uxtb	r3, r3
 8005a08:	2b01      	cmp	r3, #1
 8005a0a:	d108      	bne.n	8005a1e <start_sectionA+0xaa>
			driveA(6000, SPEED_MIN, SPEED_MIDDLE, SEC_HALF);				//a半区画分加速しながら走行。走行後は停止しない
 8005a0c:	235b      	movs	r3, #91	; 0x5b
 8005a0e:	f44f 7216 	mov.w	r2, #600	; 0x258
 8005a12:	211e      	movs	r1, #30
 8005a14:	f241 7070 	movw	r0, #6000	; 0x1770
 8005a18:	f7ff faec 	bl	8004ff4 <driveA>
 8005a1c:	e0ca      	b.n	8005bb4 <start_sectionA+0x240>
		}else if(start_mode == 2){
 8005a1e:	4b6d      	ldr	r3, [pc, #436]	; (8005bd4 <start_sectionA+0x260>)
 8005a20:	781b      	ldrb	r3, [r3, #0]
 8005a22:	b2db      	uxtb	r3, r3
 8005a24:	2b02      	cmp	r3, #2
 8005a26:	f040 80c5 	bne.w	8005bb4 <start_sectionA+0x240>
			driveA(6000, SPEED_MIN, SPEED_MIDDLE, SEC_START_HALF);			//aスタート半区画分加速しながら走行。走行後は停止しない
 8005a2a:	232d      	movs	r3, #45	; 0x2d
 8005a2c:	f44f 7216 	mov.w	r2, #600	; 0x258
 8005a30:	211e      	movs	r1, #30
 8005a32:	f241 7070 	movw	r0, #6000	; 0x1770
 8005a36:	f7ff fadd 	bl	8004ff4 <driveA>
 8005a3a:	e0bb      	b.n	8005bb4 <start_sectionA+0x240>
		}
	}else if(run_mode == HIGH){
 8005a3c:	4b64      	ldr	r3, [pc, #400]	; (8005bd0 <start_sectionA+0x25c>)
 8005a3e:	781b      	ldrb	r3, [r3, #0]
 8005a40:	b2db      	uxtb	r3, r3
 8005a42:	2b03      	cmp	r3, #3
 8005a44:	d12a      	bne.n	8005a9c <start_sectionA+0x128>
		if(start_mode == 0){
 8005a46:	4b63      	ldr	r3, [pc, #396]	; (8005bd4 <start_sectionA+0x260>)
 8005a48:	781b      	ldrb	r3, [r3, #0]
 8005a4a:	b2db      	uxtb	r3, r3
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d108      	bne.n	8005a62 <start_sectionA+0xee>
			driveA(8000, SPEED_MIN, SPEED_HIGH, SEC_START);					//aスタート区画分加速しながら走行。走行後は停止しない
 8005a50:	2388      	movs	r3, #136	; 0x88
 8005a52:	f44f 7248 	mov.w	r2, #800	; 0x320
 8005a56:	211e      	movs	r1, #30
 8005a58:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 8005a5c:	f7ff faca 	bl	8004ff4 <driveA>
 8005a60:	e0a8      	b.n	8005bb4 <start_sectionA+0x240>
		}else if(start_mode == 1){
 8005a62:	4b5c      	ldr	r3, [pc, #368]	; (8005bd4 <start_sectionA+0x260>)
 8005a64:	781b      	ldrb	r3, [r3, #0]
 8005a66:	b2db      	uxtb	r3, r3
 8005a68:	2b01      	cmp	r3, #1
 8005a6a:	d108      	bne.n	8005a7e <start_sectionA+0x10a>
			driveA(8000, SPEED_MIN, SPEED_HIGH, SEC_HALF);					//a半区画分加速しながら走行。走行後は停止しない
 8005a6c:	235b      	movs	r3, #91	; 0x5b
 8005a6e:	f44f 7248 	mov.w	r2, #800	; 0x320
 8005a72:	211e      	movs	r1, #30
 8005a74:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 8005a78:	f7ff fabc 	bl	8004ff4 <driveA>
 8005a7c:	e09a      	b.n	8005bb4 <start_sectionA+0x240>
		}else if(start_mode == 2){
 8005a7e:	4b55      	ldr	r3, [pc, #340]	; (8005bd4 <start_sectionA+0x260>)
 8005a80:	781b      	ldrb	r3, [r3, #0]
 8005a82:	b2db      	uxtb	r3, r3
 8005a84:	2b02      	cmp	r3, #2
 8005a86:	f040 8095 	bne.w	8005bb4 <start_sectionA+0x240>
			driveA(10000, SPEED_MIN, SPEED_HIGH, SEC_START_HALF);			//aスタート半区画分加速しながら走行。走行後は停止しない
 8005a8a:	232d      	movs	r3, #45	; 0x2d
 8005a8c:	f44f 7248 	mov.w	r2, #800	; 0x320
 8005a90:	211e      	movs	r1, #30
 8005a92:	f242 7010 	movw	r0, #10000	; 0x2710
 8005a96:	f7ff faad 	bl	8004ff4 <driveA>
 8005a9a:	e08b      	b.n	8005bb4 <start_sectionA+0x240>
		}
	}else if(run_mode == HIGH_HIGH){
 8005a9c:	4b4c      	ldr	r3, [pc, #304]	; (8005bd0 <start_sectionA+0x25c>)
 8005a9e:	781b      	ldrb	r3, [r3, #0]
 8005aa0:	b2db      	uxtb	r3, r3
 8005aa2:	2b04      	cmp	r3, #4
 8005aa4:	d129      	bne.n	8005afa <start_sectionA+0x186>
		if(start_mode == 0){
 8005aa6:	4b4b      	ldr	r3, [pc, #300]	; (8005bd4 <start_sectionA+0x260>)
 8005aa8:	781b      	ldrb	r3, [r3, #0]
 8005aaa:	b2db      	uxtb	r3, r3
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d108      	bne.n	8005ac2 <start_sectionA+0x14e>
			driveA(10000, SPEED_MIN, SPEED_HIGH_HIGH, SEC_START);					//aスタート区画分加速しながら走行。走行後は停止しない
 8005ab0:	2388      	movs	r3, #136	; 0x88
 8005ab2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005ab6:	211e      	movs	r1, #30
 8005ab8:	f242 7010 	movw	r0, #10000	; 0x2710
 8005abc:	f7ff fa9a 	bl	8004ff4 <driveA>
 8005ac0:	e078      	b.n	8005bb4 <start_sectionA+0x240>
		}else if(start_mode == 1){
 8005ac2:	4b44      	ldr	r3, [pc, #272]	; (8005bd4 <start_sectionA+0x260>)
 8005ac4:	781b      	ldrb	r3, [r3, #0]
 8005ac6:	b2db      	uxtb	r3, r3
 8005ac8:	2b01      	cmp	r3, #1
 8005aca:	d108      	bne.n	8005ade <start_sectionA+0x16a>
			driveA(10000, SPEED_MIN, SPEED_HIGH_HIGH, SEC_HALF);					//a半区画分加速しながら走行。走行後は停止しない
 8005acc:	235b      	movs	r3, #91	; 0x5b
 8005ace:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005ad2:	211e      	movs	r1, #30
 8005ad4:	f242 7010 	movw	r0, #10000	; 0x2710
 8005ad8:	f7ff fa8c 	bl	8004ff4 <driveA>
 8005adc:	e06a      	b.n	8005bb4 <start_sectionA+0x240>
		}else if(start_mode == 2){
 8005ade:	4b3d      	ldr	r3, [pc, #244]	; (8005bd4 <start_sectionA+0x260>)
 8005ae0:	781b      	ldrb	r3, [r3, #0]
 8005ae2:	b2db      	uxtb	r3, r3
 8005ae4:	2b02      	cmp	r3, #2
 8005ae6:	d165      	bne.n	8005bb4 <start_sectionA+0x240>
			driveA(15000, SPEED_MIN, SPEED_HIGH_HIGH, SEC_START_HALF);			//aスタート半区画分加速しながら走行。走行後は停止しない
 8005ae8:	232d      	movs	r3, #45	; 0x2d
 8005aea:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005aee:	211e      	movs	r1, #30
 8005af0:	f643 2098 	movw	r0, #15000	; 0x3a98
 8005af4:	f7ff fa7e 	bl	8004ff4 <driveA>
 8005af8:	e05c      	b.n	8005bb4 <start_sectionA+0x240>
		}
	}else if(run_mode == 5){
 8005afa:	4b35      	ldr	r3, [pc, #212]	; (8005bd0 <start_sectionA+0x25c>)
 8005afc:	781b      	ldrb	r3, [r3, #0]
 8005afe:	b2db      	uxtb	r3, r3
 8005b00:	2b05      	cmp	r3, #5
 8005b02:	d129      	bne.n	8005b58 <start_sectionA+0x1e4>
		if(start_mode == 0){
 8005b04:	4b33      	ldr	r3, [pc, #204]	; (8005bd4 <start_sectionA+0x260>)
 8005b06:	781b      	ldrb	r3, [r3, #0]
 8005b08:	b2db      	uxtb	r3, r3
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d108      	bne.n	8005b20 <start_sectionA+0x1ac>
			driveA(10000, SPEED_MIN, SPEED_5, SEC_START);					//aスタート区画分加速しながら走行。走行後は停止しない
 8005b0e:	2388      	movs	r3, #136	; 0x88
 8005b10:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8005b14:	211e      	movs	r1, #30
 8005b16:	f242 7010 	movw	r0, #10000	; 0x2710
 8005b1a:	f7ff fa6b 	bl	8004ff4 <driveA>
 8005b1e:	e049      	b.n	8005bb4 <start_sectionA+0x240>
		}else if(start_mode == 1){
 8005b20:	4b2c      	ldr	r3, [pc, #176]	; (8005bd4 <start_sectionA+0x260>)
 8005b22:	781b      	ldrb	r3, [r3, #0]
 8005b24:	b2db      	uxtb	r3, r3
 8005b26:	2b01      	cmp	r3, #1
 8005b28:	d108      	bne.n	8005b3c <start_sectionA+0x1c8>
			driveA(10000, SPEED_MIN, SPEED_5, SEC_HALF);					//a半区画分加速しながら走行。走行後は停止しない
 8005b2a:	235b      	movs	r3, #91	; 0x5b
 8005b2c:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8005b30:	211e      	movs	r1, #30
 8005b32:	f242 7010 	movw	r0, #10000	; 0x2710
 8005b36:	f7ff fa5d 	bl	8004ff4 <driveA>
 8005b3a:	e03b      	b.n	8005bb4 <start_sectionA+0x240>
		}else if(start_mode == 2){
 8005b3c:	4b25      	ldr	r3, [pc, #148]	; (8005bd4 <start_sectionA+0x260>)
 8005b3e:	781b      	ldrb	r3, [r3, #0]
 8005b40:	b2db      	uxtb	r3, r3
 8005b42:	2b02      	cmp	r3, #2
 8005b44:	d136      	bne.n	8005bb4 <start_sectionA+0x240>
			driveA(20000, SPEED_MIN, SPEED_5, SEC_START_HALF);			//aスタート半区画分加速しながら走行。走行後は停止しない
 8005b46:	232d      	movs	r3, #45	; 0x2d
 8005b48:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8005b4c:	211e      	movs	r1, #30
 8005b4e:	f644 6020 	movw	r0, #20000	; 0x4e20
 8005b52:	f7ff fa4f 	bl	8004ff4 <driveA>
 8005b56:	e02d      	b.n	8005bb4 <start_sectionA+0x240>
		}
	}else if(run_mode == 6){
 8005b58:	4b1d      	ldr	r3, [pc, #116]	; (8005bd0 <start_sectionA+0x25c>)
 8005b5a:	781b      	ldrb	r3, [r3, #0]
 8005b5c:	b2db      	uxtb	r3, r3
 8005b5e:	2b06      	cmp	r3, #6
 8005b60:	d128      	bne.n	8005bb4 <start_sectionA+0x240>
		if(start_mode == 0){
 8005b62:	4b1c      	ldr	r3, [pc, #112]	; (8005bd4 <start_sectionA+0x260>)
 8005b64:	781b      	ldrb	r3, [r3, #0]
 8005b66:	b2db      	uxtb	r3, r3
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d108      	bne.n	8005b7e <start_sectionA+0x20a>
			driveA(25000, SPEED_MIN, SPEED_5, SEC_START);					//aスタート区画分加速しながら走行。走行後は停止しない
 8005b6c:	2388      	movs	r3, #136	; 0x88
 8005b6e:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8005b72:	211e      	movs	r1, #30
 8005b74:	f246 10a8 	movw	r0, #25000	; 0x61a8
 8005b78:	f7ff fa3c 	bl	8004ff4 <driveA>
 8005b7c:	e01a      	b.n	8005bb4 <start_sectionA+0x240>
		}else if(start_mode == 1){
 8005b7e:	4b15      	ldr	r3, [pc, #84]	; (8005bd4 <start_sectionA+0x260>)
 8005b80:	781b      	ldrb	r3, [r3, #0]
 8005b82:	b2db      	uxtb	r3, r3
 8005b84:	2b01      	cmp	r3, #1
 8005b86:	d108      	bne.n	8005b9a <start_sectionA+0x226>
			driveA(25000, SPEED_MIN, SPEED_5, SEC_HALF);					//a半区画分加速しながら走行。走行後は停止しない
 8005b88:	235b      	movs	r3, #91	; 0x5b
 8005b8a:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8005b8e:	211e      	movs	r1, #30
 8005b90:	f246 10a8 	movw	r0, #25000	; 0x61a8
 8005b94:	f7ff fa2e 	bl	8004ff4 <driveA>
 8005b98:	e00c      	b.n	8005bb4 <start_sectionA+0x240>
		}else if(start_mode == 2){
 8005b9a:	4b0e      	ldr	r3, [pc, #56]	; (8005bd4 <start_sectionA+0x260>)
 8005b9c:	781b      	ldrb	r3, [r3, #0]
 8005b9e:	b2db      	uxtb	r3, r3
 8005ba0:	2b02      	cmp	r3, #2
 8005ba2:	d107      	bne.n	8005bb4 <start_sectionA+0x240>
			driveA(45000, SPEED_MIN, SPEED_5, SEC_START_HALF);			//aスタート半区画分加速しながら走行。走行後は停止しない
 8005ba4:	232d      	movs	r3, #45	; 0x2d
 8005ba6:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8005baa:	211e      	movs	r1, #30
 8005bac:	f64a 70c8 	movw	r0, #45000	; 0xafc8
 8005bb0:	f7ff fa20 	bl	8004ff4 <driveA>
		}
	}
	start_mode = 1;
 8005bb4:	4b07      	ldr	r3, [pc, #28]	; (8005bd4 <start_sectionA+0x260>)
 8005bb6:	2201      	movs	r2, #1
 8005bb8:	701a      	strb	r2, [r3, #0]
	if(!MF.FLAG.SCND)get_wall_info();								//壁情報を取得，片壁制御の有効・無効の判断
 8005bba:	4b07      	ldr	r3, [pc, #28]	; (8005bd8 <start_sectionA+0x264>)
 8005bbc:	881b      	ldrh	r3, [r3, #0]
 8005bbe:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8005bc2:	b2db      	uxtb	r3, r3
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d101      	bne.n	8005bcc <start_sectionA+0x258>
 8005bc8:	f00b ffa6 	bl	8011b18 <get_wall_info>
}
 8005bcc:	bf00      	nop
 8005bce:	bd80      	pop	{r7, pc}
 8005bd0:	20000456 	.word	0x20000456
 8005bd4:	200015c8 	.word	0x200015c8
 8005bd8:	20000f68 	.word	0x20000f68

08005bdc <half_sectionA>:
//half_sectionA
// 半区画分加速しながら走行する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void half_sectionA(void){
 8005bdc:	b580      	push	{r7, lr}
 8005bde:	af00      	add	r7, sp, #0

	control_start();
 8005be0:	f7ff f8d2 	bl	8004d88 <control_start>
	if(run_mode == LOW){
 8005be4:	4b2e      	ldr	r3, [pc, #184]	; (8005ca0 <half_sectionA+0xc4>)
 8005be6:	781b      	ldrb	r3, [r3, #0]
 8005be8:	b2db      	uxtb	r3, r3
 8005bea:	2b01      	cmp	r3, #1
 8005bec:	d108      	bne.n	8005c00 <half_sectionA+0x24>
		driveA(4000, SPEED_MIN, SPEED_LOW, SEC_HALF);						//半区画分加速しながら走行。走行後は停止しない
 8005bee:	235b      	movs	r3, #91	; 0x5b
 8005bf0:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8005bf4:	211e      	movs	r1, #30
 8005bf6:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8005bfa:	f7ff f9fb 	bl	8004ff4 <driveA>
 8005bfe:	e044      	b.n	8005c8a <half_sectionA+0xae>
	}else if(run_mode == MIDDLE){
 8005c00:	4b27      	ldr	r3, [pc, #156]	; (8005ca0 <half_sectionA+0xc4>)
 8005c02:	781b      	ldrb	r3, [r3, #0]
 8005c04:	b2db      	uxtb	r3, r3
 8005c06:	2b02      	cmp	r3, #2
 8005c08:	d108      	bne.n	8005c1c <half_sectionA+0x40>
		driveA(6000, SPEED_MIN, SPEED_MIDDLE, SEC_HALF);					//半区画分加速しながら走行。走行後は停止しない
 8005c0a:	235b      	movs	r3, #91	; 0x5b
 8005c0c:	f44f 7216 	mov.w	r2, #600	; 0x258
 8005c10:	211e      	movs	r1, #30
 8005c12:	f241 7070 	movw	r0, #6000	; 0x1770
 8005c16:	f7ff f9ed 	bl	8004ff4 <driveA>
 8005c1a:	e036      	b.n	8005c8a <half_sectionA+0xae>
	}else if(run_mode == HIGH){
 8005c1c:	4b20      	ldr	r3, [pc, #128]	; (8005ca0 <half_sectionA+0xc4>)
 8005c1e:	781b      	ldrb	r3, [r3, #0]
 8005c20:	b2db      	uxtb	r3, r3
 8005c22:	2b03      	cmp	r3, #3
 8005c24:	d108      	bne.n	8005c38 <half_sectionA+0x5c>
		driveA(8000, SPEED_MIN, SPEED_HIGH, SEC_HALF);						//半区画分加速しながら走行。走行後は停止しない
 8005c26:	235b      	movs	r3, #91	; 0x5b
 8005c28:	f44f 7248 	mov.w	r2, #800	; 0x320
 8005c2c:	211e      	movs	r1, #30
 8005c2e:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 8005c32:	f7ff f9df 	bl	8004ff4 <driveA>
 8005c36:	e028      	b.n	8005c8a <half_sectionA+0xae>
	}else if(run_mode == HIGH_HIGH){
 8005c38:	4b19      	ldr	r3, [pc, #100]	; (8005ca0 <half_sectionA+0xc4>)
 8005c3a:	781b      	ldrb	r3, [r3, #0]
 8005c3c:	b2db      	uxtb	r3, r3
 8005c3e:	2b04      	cmp	r3, #4
 8005c40:	d108      	bne.n	8005c54 <half_sectionA+0x78>
		driveA(10000, SPEED_MIN, SPEED_HIGH_HIGH, SEC_HALF);						//半区画分加速しながら走行。走行後は停止しない
 8005c42:	235b      	movs	r3, #91	; 0x5b
 8005c44:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005c48:	211e      	movs	r1, #30
 8005c4a:	f242 7010 	movw	r0, #10000	; 0x2710
 8005c4e:	f7ff f9d1 	bl	8004ff4 <driveA>
 8005c52:	e01a      	b.n	8005c8a <half_sectionA+0xae>
	}else if(run_mode == 5){
 8005c54:	4b12      	ldr	r3, [pc, #72]	; (8005ca0 <half_sectionA+0xc4>)
 8005c56:	781b      	ldrb	r3, [r3, #0]
 8005c58:	b2db      	uxtb	r3, r3
 8005c5a:	2b05      	cmp	r3, #5
 8005c5c:	d108      	bne.n	8005c70 <half_sectionA+0x94>
		driveA(10000, SPEED_MIN, SPEED_5, SEC_HALF);						//半区画分加速しながら走行。走行後は停止しない
 8005c5e:	235b      	movs	r3, #91	; 0x5b
 8005c60:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8005c64:	211e      	movs	r1, #30
 8005c66:	f242 7010 	movw	r0, #10000	; 0x2710
 8005c6a:	f7ff f9c3 	bl	8004ff4 <driveA>
 8005c6e:	e00c      	b.n	8005c8a <half_sectionA+0xae>
	}else if(run_mode == 6){
 8005c70:	4b0b      	ldr	r3, [pc, #44]	; (8005ca0 <half_sectionA+0xc4>)
 8005c72:	781b      	ldrb	r3, [r3, #0]
 8005c74:	b2db      	uxtb	r3, r3
 8005c76:	2b06      	cmp	r3, #6
 8005c78:	d107      	bne.n	8005c8a <half_sectionA+0xae>
		driveA(25000, SPEED_MIN, SPEED_6, SEC_HALF);						//半区画分加速しながら走行。走行後は停止しない
 8005c7a:	235b      	movs	r3, #91	; 0x5b
 8005c7c:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8005c80:	211e      	movs	r1, #30
 8005c82:	f246 10a8 	movw	r0, #25000	; 0x61a8
 8005c86:	f7ff f9b5 	bl	8004ff4 <driveA>
	}
	if(!MF.FLAG.SCND)get_wall_info();										//壁情報を取得，片壁制御の有効・無効の判断
 8005c8a:	4b06      	ldr	r3, [pc, #24]	; (8005ca4 <half_sectionA+0xc8>)
 8005c8c:	881b      	ldrh	r3, [r3, #0]
 8005c8e:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8005c92:	b2db      	uxtb	r3, r3
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d101      	bne.n	8005c9c <half_sectionA+0xc0>
 8005c98:	f00b ff3e 	bl	8011b18 <get_wall_info>
}
 8005c9c:	bf00      	nop
 8005c9e:	bd80      	pop	{r7, pc}
 8005ca0:	20000456 	.word	0x20000456
 8005ca4:	20000f68 	.word	0x20000f68

08005ca8 <half_sectionD>:
//half_sectionD
// 半区画分減速しながら走行し停止する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void half_sectionD(void){
 8005ca8:	b580      	push	{r7, lr}
 8005caa:	af00      	add	r7, sp, #0
	full_led_write(BLUE);
 8005cac:	2003      	movs	r0, #3
 8005cae:	f00b ffa7 	bl	8011c00 <full_led_write>

	control_start();
 8005cb2:	f7ff f869 	bl	8004d88 <control_start>
	if(run_mode == LOW){
 8005cb6:	4b27      	ldr	r3, [pc, #156]	; (8005d54 <half_sectionD+0xac>)
 8005cb8:	781b      	ldrb	r3, [r3, #0]
 8005cba:	b2db      	uxtb	r3, r3
 8005cbc:	2b01      	cmp	r3, #1
 8005cbe:	d107      	bne.n	8005cd0 <half_sectionD+0x28>
		driveD(-4000, SPEED_MIN, SPEED_LOW, SEC_HALF);						//半区画分指定減速度で減速走行。走行後は停止する
 8005cc0:	235b      	movs	r3, #91	; 0x5b
 8005cc2:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8005cc6:	211e      	movs	r1, #30
 8005cc8:	4823      	ldr	r0, [pc, #140]	; (8005d58 <half_sectionD+0xb0>)
 8005cca:	f7ff fa0d 	bl	80050e8 <driveD>
	}else if(run_mode == 5){
		driveD(-8000, SPEED_MIN, SPEED_5, SEC_HALF);				//半区画分指定減速度で減速走行。走行後は停止する
	}else if(run_mode == 6){
		driveD(-25000, SPEED_MIN, SPEED_6, SEC_HALF);				//半区画分指定減速度で減速走行。走行後は停止する
	}
}
 8005cce:	e03f      	b.n	8005d50 <half_sectionD+0xa8>
	}else if(run_mode == MIDDLE){
 8005cd0:	4b20      	ldr	r3, [pc, #128]	; (8005d54 <half_sectionD+0xac>)
 8005cd2:	781b      	ldrb	r3, [r3, #0]
 8005cd4:	b2db      	uxtb	r3, r3
 8005cd6:	2b02      	cmp	r3, #2
 8005cd8:	d107      	bne.n	8005cea <half_sectionD+0x42>
		driveD(-4000, SPEED_MIN, SPEED_MIDDLE, SEC_HALF);					//半区画分指定減速度で減速走行。走行後は停止する
 8005cda:	235b      	movs	r3, #91	; 0x5b
 8005cdc:	f44f 7216 	mov.w	r2, #600	; 0x258
 8005ce0:	211e      	movs	r1, #30
 8005ce2:	481d      	ldr	r0, [pc, #116]	; (8005d58 <half_sectionD+0xb0>)
 8005ce4:	f7ff fa00 	bl	80050e8 <driveD>
}
 8005ce8:	e032      	b.n	8005d50 <half_sectionD+0xa8>
	}else if(run_mode == HIGH){
 8005cea:	4b1a      	ldr	r3, [pc, #104]	; (8005d54 <half_sectionD+0xac>)
 8005cec:	781b      	ldrb	r3, [r3, #0]
 8005cee:	b2db      	uxtb	r3, r3
 8005cf0:	2b03      	cmp	r3, #3
 8005cf2:	d107      	bne.n	8005d04 <half_sectionD+0x5c>
		driveD(-4000, SPEED_MIN, SPEED_HIGH, SEC_HALF);						//半区画分指定減速度で減速走行。走行後は停止する
 8005cf4:	235b      	movs	r3, #91	; 0x5b
 8005cf6:	f44f 7248 	mov.w	r2, #800	; 0x320
 8005cfa:	211e      	movs	r1, #30
 8005cfc:	4816      	ldr	r0, [pc, #88]	; (8005d58 <half_sectionD+0xb0>)
 8005cfe:	f7ff f9f3 	bl	80050e8 <driveD>
}
 8005d02:	e025      	b.n	8005d50 <half_sectionD+0xa8>
	}else if(run_mode == HIGH_HIGH){
 8005d04:	4b13      	ldr	r3, [pc, #76]	; (8005d54 <half_sectionD+0xac>)
 8005d06:	781b      	ldrb	r3, [r3, #0]
 8005d08:	b2db      	uxtb	r3, r3
 8005d0a:	2b04      	cmp	r3, #4
 8005d0c:	d107      	bne.n	8005d1e <half_sectionD+0x76>
		driveD(-6000, SPEED_MIN, SPEED_HIGH_HIGH, SEC_HALF);				//半区画分指定減速度で減速走行。走行後は停止する
 8005d0e:	235b      	movs	r3, #91	; 0x5b
 8005d10:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005d14:	211e      	movs	r1, #30
 8005d16:	4811      	ldr	r0, [pc, #68]	; (8005d5c <half_sectionD+0xb4>)
 8005d18:	f7ff f9e6 	bl	80050e8 <driveD>
}
 8005d1c:	e018      	b.n	8005d50 <half_sectionD+0xa8>
	}else if(run_mode == 5){
 8005d1e:	4b0d      	ldr	r3, [pc, #52]	; (8005d54 <half_sectionD+0xac>)
 8005d20:	781b      	ldrb	r3, [r3, #0]
 8005d22:	b2db      	uxtb	r3, r3
 8005d24:	2b05      	cmp	r3, #5
 8005d26:	d107      	bne.n	8005d38 <half_sectionD+0x90>
		driveD(-8000, SPEED_MIN, SPEED_5, SEC_HALF);				//半区画分指定減速度で減速走行。走行後は停止する
 8005d28:	235b      	movs	r3, #91	; 0x5b
 8005d2a:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8005d2e:	211e      	movs	r1, #30
 8005d30:	480b      	ldr	r0, [pc, #44]	; (8005d60 <half_sectionD+0xb8>)
 8005d32:	f7ff f9d9 	bl	80050e8 <driveD>
}
 8005d36:	e00b      	b.n	8005d50 <half_sectionD+0xa8>
	}else if(run_mode == 6){
 8005d38:	4b06      	ldr	r3, [pc, #24]	; (8005d54 <half_sectionD+0xac>)
 8005d3a:	781b      	ldrb	r3, [r3, #0]
 8005d3c:	b2db      	uxtb	r3, r3
 8005d3e:	2b06      	cmp	r3, #6
 8005d40:	d106      	bne.n	8005d50 <half_sectionD+0xa8>
		driveD(-25000, SPEED_MIN, SPEED_6, SEC_HALF);				//半区画分指定減速度で減速走行。走行後は停止する
 8005d42:	235b      	movs	r3, #91	; 0x5b
 8005d44:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8005d48:	211e      	movs	r1, #30
 8005d4a:	4806      	ldr	r0, [pc, #24]	; (8005d64 <half_sectionD+0xbc>)
 8005d4c:	f7ff f9cc 	bl	80050e8 <driveD>
}
 8005d50:	bf00      	nop
 8005d52:	bd80      	pop	{r7, pc}
 8005d54:	20000456 	.word	0x20000456
 8005d58:	fffff060 	.word	0xfffff060
 8005d5c:	ffffe890 	.word	0xffffe890
 8005d60:	ffffe0c0 	.word	0xffffe0c0
 8005d64:	ffff9e58 	.word	0xffff9e58

08005d68 <half_sectionVA>:
//half_sectionVA
// 半区画分加速しながら走行する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void half_sectionVA(void){
 8005d68:	b580      	push	{r7, lr}
 8005d6a:	af00      	add	r7, sp, #0

	control_start();
 8005d6c:	f7ff f80c 	bl	8004d88 <control_start>
	if(run_mode == LOW){
 8005d70:	4b2a      	ldr	r3, [pc, #168]	; (8005e1c <half_sectionVA+0xb4>)
 8005d72:	781b      	ldrb	r3, [r3, #0]
 8005d74:	b2db      	uxtb	r3, r3
 8005d76:	2b01      	cmp	r3, #1
 8005d78:	d108      	bne.n	8005d8c <half_sectionVA+0x24>
		driveA(4000, SPEED_MIN, SPEED_LOW, SEC_HALF_V);						//半区画分加速しながら走行。走行後は停止しない
 8005d7a:	2382      	movs	r3, #130	; 0x82
 8005d7c:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8005d80:	211e      	movs	r1, #30
 8005d82:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8005d86:	f7ff f935 	bl	8004ff4 <driveA>
	}else if(run_mode == 5){
		driveA(10000, SPEED_MIN, SPEED_5, SEC_HALF_V);						//半区画分加速しながら走行。走行後は停止しない
	}else if(run_mode == 6){
		driveA(25000, SPEED_MIN, SPEED_6, SEC_HALF_V);						//半区画分加速しながら走行。走行後は停止しない
	}
}
 8005d8a:	e044      	b.n	8005e16 <half_sectionVA+0xae>
	}else if(run_mode == MIDDLE){
 8005d8c:	4b23      	ldr	r3, [pc, #140]	; (8005e1c <half_sectionVA+0xb4>)
 8005d8e:	781b      	ldrb	r3, [r3, #0]
 8005d90:	b2db      	uxtb	r3, r3
 8005d92:	2b02      	cmp	r3, #2
 8005d94:	d108      	bne.n	8005da8 <half_sectionVA+0x40>
		driveA(6000, SPEED_MIN, SPEED_MIDDLE, SEC_HALF_V);					//半区画分加速しながら走行。走行後は停止しない
 8005d96:	2382      	movs	r3, #130	; 0x82
 8005d98:	f44f 7216 	mov.w	r2, #600	; 0x258
 8005d9c:	211e      	movs	r1, #30
 8005d9e:	f241 7070 	movw	r0, #6000	; 0x1770
 8005da2:	f7ff f927 	bl	8004ff4 <driveA>
}
 8005da6:	e036      	b.n	8005e16 <half_sectionVA+0xae>
	}else if(run_mode == HIGH){
 8005da8:	4b1c      	ldr	r3, [pc, #112]	; (8005e1c <half_sectionVA+0xb4>)
 8005daa:	781b      	ldrb	r3, [r3, #0]
 8005dac:	b2db      	uxtb	r3, r3
 8005dae:	2b03      	cmp	r3, #3
 8005db0:	d108      	bne.n	8005dc4 <half_sectionVA+0x5c>
		driveA(8000, SPEED_MIN, SPEED_HIGH, SEC_HALF_V);						//半区画分加速しながら走行。走行後は停止しない
 8005db2:	2382      	movs	r3, #130	; 0x82
 8005db4:	f44f 7248 	mov.w	r2, #800	; 0x320
 8005db8:	211e      	movs	r1, #30
 8005dba:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 8005dbe:	f7ff f919 	bl	8004ff4 <driveA>
}
 8005dc2:	e028      	b.n	8005e16 <half_sectionVA+0xae>
	}else if(run_mode == HIGH_HIGH){
 8005dc4:	4b15      	ldr	r3, [pc, #84]	; (8005e1c <half_sectionVA+0xb4>)
 8005dc6:	781b      	ldrb	r3, [r3, #0]
 8005dc8:	b2db      	uxtb	r3, r3
 8005dca:	2b04      	cmp	r3, #4
 8005dcc:	d108      	bne.n	8005de0 <half_sectionVA+0x78>
		driveA(10000, SPEED_MIN, SPEED_HIGH_HIGH, SEC_HALF_V);						//半区画分加速しながら走行。走行後は停止しない
 8005dce:	2382      	movs	r3, #130	; 0x82
 8005dd0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005dd4:	211e      	movs	r1, #30
 8005dd6:	f242 7010 	movw	r0, #10000	; 0x2710
 8005dda:	f7ff f90b 	bl	8004ff4 <driveA>
}
 8005dde:	e01a      	b.n	8005e16 <half_sectionVA+0xae>
	}else if(run_mode == 5){
 8005de0:	4b0e      	ldr	r3, [pc, #56]	; (8005e1c <half_sectionVA+0xb4>)
 8005de2:	781b      	ldrb	r3, [r3, #0]
 8005de4:	b2db      	uxtb	r3, r3
 8005de6:	2b05      	cmp	r3, #5
 8005de8:	d108      	bne.n	8005dfc <half_sectionVA+0x94>
		driveA(10000, SPEED_MIN, SPEED_5, SEC_HALF_V);						//半区画分加速しながら走行。走行後は停止しない
 8005dea:	2382      	movs	r3, #130	; 0x82
 8005dec:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8005df0:	211e      	movs	r1, #30
 8005df2:	f242 7010 	movw	r0, #10000	; 0x2710
 8005df6:	f7ff f8fd 	bl	8004ff4 <driveA>
}
 8005dfa:	e00c      	b.n	8005e16 <half_sectionVA+0xae>
	}else if(run_mode == 6){
 8005dfc:	4b07      	ldr	r3, [pc, #28]	; (8005e1c <half_sectionVA+0xb4>)
 8005dfe:	781b      	ldrb	r3, [r3, #0]
 8005e00:	b2db      	uxtb	r3, r3
 8005e02:	2b06      	cmp	r3, #6
 8005e04:	d107      	bne.n	8005e16 <half_sectionVA+0xae>
		driveA(25000, SPEED_MIN, SPEED_6, SEC_HALF_V);						//半区画分加速しながら走行。走行後は停止しない
 8005e06:	2382      	movs	r3, #130	; 0x82
 8005e08:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8005e0c:	211e      	movs	r1, #30
 8005e0e:	f246 10a8 	movw	r0, #25000	; 0x61a8
 8005e12:	f7ff f8ef 	bl	8004ff4 <driveA>
}
 8005e16:	bf00      	nop
 8005e18:	bd80      	pop	{r7, pc}
 8005e1a:	bf00      	nop
 8005e1c:	20000456 	.word	0x20000456

08005e20 <half_sectionVD>:
//half_sectionVD
// 半区画分減速しながら走行し停止する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void half_sectionVD(void){
 8005e20:	b580      	push	{r7, lr}
 8005e22:	af00      	add	r7, sp, #0
	full_led_write(BLUE);
 8005e24:	2003      	movs	r0, #3
 8005e26:	f00b feeb 	bl	8011c00 <full_led_write>

	control_start();
 8005e2a:	f7fe ffad 	bl	8004d88 <control_start>
	if(run_mode == LOW){
 8005e2e:	4b27      	ldr	r3, [pc, #156]	; (8005ecc <half_sectionVD+0xac>)
 8005e30:	781b      	ldrb	r3, [r3, #0]
 8005e32:	b2db      	uxtb	r3, r3
 8005e34:	2b01      	cmp	r3, #1
 8005e36:	d107      	bne.n	8005e48 <half_sectionVD+0x28>
		driveD(-4000, SPEED_MIN, SPEED_LOW, SEC_HALF_V);						//半区画分指定減速度で減速走行。走行後は停止する
 8005e38:	2382      	movs	r3, #130	; 0x82
 8005e3a:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8005e3e:	211e      	movs	r1, #30
 8005e40:	4823      	ldr	r0, [pc, #140]	; (8005ed0 <half_sectionVD+0xb0>)
 8005e42:	f7ff f951 	bl	80050e8 <driveD>
	}else if(run_mode == 5){
		driveD(-8000, SPEED_MIN, SPEED_5, SEC_HALF_V);						//半区画分指定減速度で減速走行。走行後は停止する
	}else if(run_mode == 6){
		driveD(-25000, SPEED_MIN, SPEED_6, SEC_HALF_V);						//半区画分指定減速度で減速走行。走行後は停止する
	}
}
 8005e46:	e03f      	b.n	8005ec8 <half_sectionVD+0xa8>
	}else if(run_mode == MIDDLE){
 8005e48:	4b20      	ldr	r3, [pc, #128]	; (8005ecc <half_sectionVD+0xac>)
 8005e4a:	781b      	ldrb	r3, [r3, #0]
 8005e4c:	b2db      	uxtb	r3, r3
 8005e4e:	2b02      	cmp	r3, #2
 8005e50:	d107      	bne.n	8005e62 <half_sectionVD+0x42>
		driveD(-4000, SPEED_MIN, SPEED_MIDDLE, SEC_HALF_V);					//半区画分指定減速度で減速走行。走行後は停止する
 8005e52:	2382      	movs	r3, #130	; 0x82
 8005e54:	f44f 7216 	mov.w	r2, #600	; 0x258
 8005e58:	211e      	movs	r1, #30
 8005e5a:	481d      	ldr	r0, [pc, #116]	; (8005ed0 <half_sectionVD+0xb0>)
 8005e5c:	f7ff f944 	bl	80050e8 <driveD>
}
 8005e60:	e032      	b.n	8005ec8 <half_sectionVD+0xa8>
	}else if(run_mode == HIGH){
 8005e62:	4b1a      	ldr	r3, [pc, #104]	; (8005ecc <half_sectionVD+0xac>)
 8005e64:	781b      	ldrb	r3, [r3, #0]
 8005e66:	b2db      	uxtb	r3, r3
 8005e68:	2b03      	cmp	r3, #3
 8005e6a:	d107      	bne.n	8005e7c <half_sectionVD+0x5c>
		driveD(-4000, SPEED_MIN, SPEED_HIGH, SEC_HALF_V);						//半区画分指定減速度で減速走行。走行後は停止する
 8005e6c:	2382      	movs	r3, #130	; 0x82
 8005e6e:	f44f 7248 	mov.w	r2, #800	; 0x320
 8005e72:	211e      	movs	r1, #30
 8005e74:	4816      	ldr	r0, [pc, #88]	; (8005ed0 <half_sectionVD+0xb0>)
 8005e76:	f7ff f937 	bl	80050e8 <driveD>
}
 8005e7a:	e025      	b.n	8005ec8 <half_sectionVD+0xa8>
	}else if(run_mode == HIGH_HIGH){
 8005e7c:	4b13      	ldr	r3, [pc, #76]	; (8005ecc <half_sectionVD+0xac>)
 8005e7e:	781b      	ldrb	r3, [r3, #0]
 8005e80:	b2db      	uxtb	r3, r3
 8005e82:	2b04      	cmp	r3, #4
 8005e84:	d107      	bne.n	8005e96 <half_sectionVD+0x76>
		driveD(-6000, SPEED_MIN, SPEED_HIGH_HIGH, SEC_HALF_V);						//半区画分指定減速度で減速走行。走行後は停止する
 8005e86:	2382      	movs	r3, #130	; 0x82
 8005e88:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005e8c:	211e      	movs	r1, #30
 8005e8e:	4811      	ldr	r0, [pc, #68]	; (8005ed4 <half_sectionVD+0xb4>)
 8005e90:	f7ff f92a 	bl	80050e8 <driveD>
}
 8005e94:	e018      	b.n	8005ec8 <half_sectionVD+0xa8>
	}else if(run_mode == 5){
 8005e96:	4b0d      	ldr	r3, [pc, #52]	; (8005ecc <half_sectionVD+0xac>)
 8005e98:	781b      	ldrb	r3, [r3, #0]
 8005e9a:	b2db      	uxtb	r3, r3
 8005e9c:	2b05      	cmp	r3, #5
 8005e9e:	d107      	bne.n	8005eb0 <half_sectionVD+0x90>
		driveD(-8000, SPEED_MIN, SPEED_5, SEC_HALF_V);						//半区画分指定減速度で減速走行。走行後は停止する
 8005ea0:	2382      	movs	r3, #130	; 0x82
 8005ea2:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8005ea6:	211e      	movs	r1, #30
 8005ea8:	480b      	ldr	r0, [pc, #44]	; (8005ed8 <half_sectionVD+0xb8>)
 8005eaa:	f7ff f91d 	bl	80050e8 <driveD>
}
 8005eae:	e00b      	b.n	8005ec8 <half_sectionVD+0xa8>
	}else if(run_mode == 6){
 8005eb0:	4b06      	ldr	r3, [pc, #24]	; (8005ecc <half_sectionVD+0xac>)
 8005eb2:	781b      	ldrb	r3, [r3, #0]
 8005eb4:	b2db      	uxtb	r3, r3
 8005eb6:	2b06      	cmp	r3, #6
 8005eb8:	d106      	bne.n	8005ec8 <half_sectionVD+0xa8>
		driveD(-25000, SPEED_MIN, SPEED_6, SEC_HALF_V);						//半区画分指定減速度で減速走行。走行後は停止する
 8005eba:	2382      	movs	r3, #130	; 0x82
 8005ebc:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8005ec0:	211e      	movs	r1, #30
 8005ec2:	4806      	ldr	r0, [pc, #24]	; (8005edc <half_sectionVD+0xbc>)
 8005ec4:	f7ff f910 	bl	80050e8 <driveD>
}
 8005ec8:	bf00      	nop
 8005eca:	bd80      	pop	{r7, pc}
 8005ecc:	20000456 	.word	0x20000456
 8005ed0:	fffff060 	.word	0xfffff060
 8005ed4:	ffffe890 	.word	0xffffe890
 8005ed8:	ffffe0c0 	.word	0xffffe0c0
 8005edc:	ffff9e58 	.word	0xffff9e58

08005ee0 <half_sectionU>:
//half_sectionU
// 等速で半区画分進む
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void half_sectionU(void){
 8005ee0:	b580      	push	{r7, lr}
 8005ee2:	af00      	add	r7, sp, #0
	full_led_write(WHITE);
 8005ee4:	2007      	movs	r0, #7
 8005ee6:	f00b fe8b 	bl	8011c00 <full_led_write>
	control_start();
 8005eea:	f7fe ff4d 	bl	8004d88 <control_start>
	driveU(SEC_HALF);													//半区画分等速走行。走行後は停止しない
 8005eee:	205b      	movs	r0, #91	; 0x5b
 8005ef0:	f7ff f9d4 	bl	800529c <driveU>
}
 8005ef4:	bf00      	nop
 8005ef6:	bd80      	pop	{r7, pc}

08005ef8 <half_sectionV>:
//half_sectionV
// 等速で斜め半区画分進む
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void half_sectionV(void){
 8005ef8:	b580      	push	{r7, lr}
 8005efa:	af00      	add	r7, sp, #0
	full_led_write(WHITE);
 8005efc:	2007      	movs	r0, #7
 8005efe:	f00b fe7f 	bl	8011c00 <full_led_write>
	control_start();
 8005f02:	f7fe ff41 	bl	8004d88 <control_start>
	driveU(SEC_HALF_V);													//半区画分等速走行。走行後は停止しない
 8005f06:	2082      	movs	r0, #130	; 0x82
 8005f08:	f7ff f9c8 	bl	800529c <driveU>
}
 8005f0c:	bf00      	nop
 8005f0e:	bd80      	pop	{r7, pc}

08005f10 <one_section>:
//one_section
// 1区画分進んで停止する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void one_section(void){
 8005f10:	b580      	push	{r7, lr}
 8005f12:	af00      	add	r7, sp, #0

	half_sectionA();													//半区画分加速走行
 8005f14:	f7ff fe62 	bl	8005bdc <half_sectionA>
	half_sectionD();													//半区画分減速走行のち停止
 8005f18:	f7ff fec6 	bl	8005ca8 <half_sectionD>
}
 8005f1c:	bf00      	nop
 8005f1e:	bd80      	pop	{r7, pc}

08005f20 <one_sectionA>:
//one_sectionA
// 1区画分加速する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void one_sectionA(void){
 8005f20:	b580      	push	{r7, lr}
 8005f22:	af00      	add	r7, sp, #0
	full_led_write(BLUEGREEN);
 8005f24:	2004      	movs	r0, #4
 8005f26:	f00b fe6b 	bl	8011c00 <full_led_write>
	control_start();
 8005f2a:	f7fe ff2d 	bl	8004d88 <control_start>
	if(run_mode == LOW){
 8005f2e:	4b3e      	ldr	r3, [pc, #248]	; (8006028 <one_sectionA+0x108>)
 8005f30:	781b      	ldrb	r3, [r3, #0]
 8005f32:	b2db      	uxtb	r3, r3
 8005f34:	2b01      	cmp	r3, #1
 8005f36:	d10d      	bne.n	8005f54 <one_sectionA+0x34>
		driveA(accel_hs, SPEED_LOW, speed_max_hs, SEC_HALF*2);				//1区画分加速走行。走行後は停止しない
 8005f38:	4b3c      	ldr	r3, [pc, #240]	; (800602c <one_sectionA+0x10c>)
 8005f3a:	881b      	ldrh	r3, [r3, #0]
 8005f3c:	b21b      	sxth	r3, r3
 8005f3e:	b298      	uxth	r0, r3
 8005f40:	4b3b      	ldr	r3, [pc, #236]	; (8006030 <one_sectionA+0x110>)
 8005f42:	881b      	ldrh	r3, [r3, #0]
 8005f44:	b21b      	sxth	r3, r3
 8005f46:	b29a      	uxth	r2, r3
 8005f48:	23b6      	movs	r3, #182	; 0xb6
 8005f4a:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8005f4e:	f7ff f851 	bl	8004ff4 <driveA>
 8005f52:	e05d      	b.n	8006010 <one_sectionA+0xf0>
	}else if(run_mode == MIDDLE){
 8005f54:	4b34      	ldr	r3, [pc, #208]	; (8006028 <one_sectionA+0x108>)
 8005f56:	781b      	ldrb	r3, [r3, #0]
 8005f58:	b2db      	uxtb	r3, r3
 8005f5a:	2b02      	cmp	r3, #2
 8005f5c:	d10d      	bne.n	8005f7a <one_sectionA+0x5a>
		driveA(accel_hs, SPEED_MIDDLE, speed_max_hs, SEC_HALF*2);			//1区画分加速走行。走行後は停止しない
 8005f5e:	4b33      	ldr	r3, [pc, #204]	; (800602c <one_sectionA+0x10c>)
 8005f60:	881b      	ldrh	r3, [r3, #0]
 8005f62:	b21b      	sxth	r3, r3
 8005f64:	b298      	uxth	r0, r3
 8005f66:	4b32      	ldr	r3, [pc, #200]	; (8006030 <one_sectionA+0x110>)
 8005f68:	881b      	ldrh	r3, [r3, #0]
 8005f6a:	b21b      	sxth	r3, r3
 8005f6c:	b29a      	uxth	r2, r3
 8005f6e:	23b6      	movs	r3, #182	; 0xb6
 8005f70:	f44f 7116 	mov.w	r1, #600	; 0x258
 8005f74:	f7ff f83e 	bl	8004ff4 <driveA>
 8005f78:	e04a      	b.n	8006010 <one_sectionA+0xf0>
	}else if(run_mode == HIGH){
 8005f7a:	4b2b      	ldr	r3, [pc, #172]	; (8006028 <one_sectionA+0x108>)
 8005f7c:	781b      	ldrb	r3, [r3, #0]
 8005f7e:	b2db      	uxtb	r3, r3
 8005f80:	2b03      	cmp	r3, #3
 8005f82:	d10d      	bne.n	8005fa0 <one_sectionA+0x80>
		driveA(accel_hs, SPEED_HIGH, speed_max_hs, SEC_HALF*2);				//1区画分加速走行。走行後は停止しない
 8005f84:	4b29      	ldr	r3, [pc, #164]	; (800602c <one_sectionA+0x10c>)
 8005f86:	881b      	ldrh	r3, [r3, #0]
 8005f88:	b21b      	sxth	r3, r3
 8005f8a:	b298      	uxth	r0, r3
 8005f8c:	4b28      	ldr	r3, [pc, #160]	; (8006030 <one_sectionA+0x110>)
 8005f8e:	881b      	ldrh	r3, [r3, #0]
 8005f90:	b21b      	sxth	r3, r3
 8005f92:	b29a      	uxth	r2, r3
 8005f94:	23b6      	movs	r3, #182	; 0xb6
 8005f96:	f44f 7148 	mov.w	r1, #800	; 0x320
 8005f9a:	f7ff f82b 	bl	8004ff4 <driveA>
 8005f9e:	e037      	b.n	8006010 <one_sectionA+0xf0>
	}else if(run_mode == HIGH_HIGH){
 8005fa0:	4b21      	ldr	r3, [pc, #132]	; (8006028 <one_sectionA+0x108>)
 8005fa2:	781b      	ldrb	r3, [r3, #0]
 8005fa4:	b2db      	uxtb	r3, r3
 8005fa6:	2b04      	cmp	r3, #4
 8005fa8:	d10d      	bne.n	8005fc6 <one_sectionA+0xa6>
		driveA(accel_hs, SPEED_HIGH_HIGH, speed_max_hs, SEC_HALF*2);				//1区画分加速走行。走行後は停止しない
 8005faa:	4b20      	ldr	r3, [pc, #128]	; (800602c <one_sectionA+0x10c>)
 8005fac:	881b      	ldrh	r3, [r3, #0]
 8005fae:	b21b      	sxth	r3, r3
 8005fb0:	b298      	uxth	r0, r3
 8005fb2:	4b1f      	ldr	r3, [pc, #124]	; (8006030 <one_sectionA+0x110>)
 8005fb4:	881b      	ldrh	r3, [r3, #0]
 8005fb6:	b21b      	sxth	r3, r3
 8005fb8:	b29a      	uxth	r2, r3
 8005fba:	23b6      	movs	r3, #182	; 0xb6
 8005fbc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8005fc0:	f7ff f818 	bl	8004ff4 <driveA>
 8005fc4:	e024      	b.n	8006010 <one_sectionA+0xf0>
	}else if(run_mode == 5){
 8005fc6:	4b18      	ldr	r3, [pc, #96]	; (8006028 <one_sectionA+0x108>)
 8005fc8:	781b      	ldrb	r3, [r3, #0]
 8005fca:	b2db      	uxtb	r3, r3
 8005fcc:	2b05      	cmp	r3, #5
 8005fce:	d10d      	bne.n	8005fec <one_sectionA+0xcc>
		driveA(accel_hs, SPEED_5, speed_max_hs, SEC_HALF*2);				//1区画分加速走行。走行後は停止しない
 8005fd0:	4b16      	ldr	r3, [pc, #88]	; (800602c <one_sectionA+0x10c>)
 8005fd2:	881b      	ldrh	r3, [r3, #0]
 8005fd4:	b21b      	sxth	r3, r3
 8005fd6:	b298      	uxth	r0, r3
 8005fd8:	4b15      	ldr	r3, [pc, #84]	; (8006030 <one_sectionA+0x110>)
 8005fda:	881b      	ldrh	r3, [r3, #0]
 8005fdc:	b21b      	sxth	r3, r3
 8005fde:	b29a      	uxth	r2, r3
 8005fe0:	23b6      	movs	r3, #182	; 0xb6
 8005fe2:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 8005fe6:	f7ff f805 	bl	8004ff4 <driveA>
 8005fea:	e011      	b.n	8006010 <one_sectionA+0xf0>
	}else if(run_mode == 6){
 8005fec:	4b0e      	ldr	r3, [pc, #56]	; (8006028 <one_sectionA+0x108>)
 8005fee:	781b      	ldrb	r3, [r3, #0]
 8005ff0:	b2db      	uxtb	r3, r3
 8005ff2:	2b06      	cmp	r3, #6
 8005ff4:	d10c      	bne.n	8006010 <one_sectionA+0xf0>
		driveA(accel_hs, SPEED_6, speed_max_hs, SEC_HALF*2);				//1区画分加速走行。走行後は停止しない
 8005ff6:	4b0d      	ldr	r3, [pc, #52]	; (800602c <one_sectionA+0x10c>)
 8005ff8:	881b      	ldrh	r3, [r3, #0]
 8005ffa:	b21b      	sxth	r3, r3
 8005ffc:	b298      	uxth	r0, r3
 8005ffe:	4b0c      	ldr	r3, [pc, #48]	; (8006030 <one_sectionA+0x110>)
 8006000:	881b      	ldrh	r3, [r3, #0]
 8006002:	b21b      	sxth	r3, r3
 8006004:	b29a      	uxth	r2, r3
 8006006:	23b6      	movs	r3, #182	; 0xb6
 8006008:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 800600c:	f7fe fff2 	bl	8004ff4 <driveA>
	}
	if(!MF.FLAG.SCND)get_wall_info();								//壁情報を取得，片壁制御の有効・無効の判断
 8006010:	4b08      	ldr	r3, [pc, #32]	; (8006034 <one_sectionA+0x114>)
 8006012:	881b      	ldrh	r3, [r3, #0]
 8006014:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8006018:	b2db      	uxtb	r3, r3
 800601a:	2b00      	cmp	r3, #0
 800601c:	d101      	bne.n	8006022 <one_sectionA+0x102>
 800601e:	f00b fd7b 	bl	8011b18 <get_wall_info>
}
 8006022:	bf00      	nop
 8006024:	bd80      	pop	{r7, pc}
 8006026:	bf00      	nop
 8006028:	20000456 	.word	0x20000456
 800602c:	20000454 	.word	0x20000454
 8006030:	20000f7c 	.word	0x20000f7c
 8006034:	20000f68 	.word	0x20000f68

08006038 <one_sectionD>:
//one_sectionD
// 1区画分減速する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void one_sectionD(void){
 8006038:	b580      	push	{r7, lr}
 800603a:	af00      	add	r7, sp, #0
	full_led_write(BLUE);
 800603c:	2003      	movs	r0, #3
 800603e:	f00b fddf 	bl	8011c00 <full_led_write>
	control_start();
 8006042:	f7fe fea1 	bl	8004d88 <control_start>
	if(run_mode == LOW){
 8006046:	4b47      	ldr	r3, [pc, #284]	; (8006164 <one_sectionD+0x12c>)
 8006048:	781b      	ldrb	r3, [r3, #0]
 800604a:	b2db      	uxtb	r3, r3
 800604c:	2b01      	cmp	r3, #1
 800604e:	d110      	bne.n	8006072 <one_sectionD+0x3a>
		driveD(-accel_hs, SPEED_LOW, speed_max_hs, SEC_HALF*2);				//1区画分減速走行。走行後は停止しない
 8006050:	4b45      	ldr	r3, [pc, #276]	; (8006168 <one_sectionD+0x130>)
 8006052:	881b      	ldrh	r3, [r3, #0]
 8006054:	b21b      	sxth	r3, r3
 8006056:	b29b      	uxth	r3, r3
 8006058:	425b      	negs	r3, r3
 800605a:	b29b      	uxth	r3, r3
 800605c:	b218      	sxth	r0, r3
 800605e:	4b43      	ldr	r3, [pc, #268]	; (800616c <one_sectionD+0x134>)
 8006060:	881b      	ldrh	r3, [r3, #0]
 8006062:	b21b      	sxth	r3, r3
 8006064:	b29a      	uxth	r2, r3
 8006066:	23b6      	movs	r3, #182	; 0xb6
 8006068:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800606c:	f7ff f83c 	bl	80050e8 <driveD>
 8006070:	e06c      	b.n	800614c <one_sectionD+0x114>
	}else if(run_mode == MIDDLE){
 8006072:	4b3c      	ldr	r3, [pc, #240]	; (8006164 <one_sectionD+0x12c>)
 8006074:	781b      	ldrb	r3, [r3, #0]
 8006076:	b2db      	uxtb	r3, r3
 8006078:	2b02      	cmp	r3, #2
 800607a:	d110      	bne.n	800609e <one_sectionD+0x66>
		driveD(-accel_hs, SPEED_MIDDLE, speed_max_hs, SEC_HALF*2);			//1区画分減速走行。走行後は停止しない
 800607c:	4b3a      	ldr	r3, [pc, #232]	; (8006168 <one_sectionD+0x130>)
 800607e:	881b      	ldrh	r3, [r3, #0]
 8006080:	b21b      	sxth	r3, r3
 8006082:	b29b      	uxth	r3, r3
 8006084:	425b      	negs	r3, r3
 8006086:	b29b      	uxth	r3, r3
 8006088:	b218      	sxth	r0, r3
 800608a:	4b38      	ldr	r3, [pc, #224]	; (800616c <one_sectionD+0x134>)
 800608c:	881b      	ldrh	r3, [r3, #0]
 800608e:	b21b      	sxth	r3, r3
 8006090:	b29a      	uxth	r2, r3
 8006092:	23b6      	movs	r3, #182	; 0xb6
 8006094:	f44f 7116 	mov.w	r1, #600	; 0x258
 8006098:	f7ff f826 	bl	80050e8 <driveD>
 800609c:	e056      	b.n	800614c <one_sectionD+0x114>
	}else if(run_mode == HIGH){
 800609e:	4b31      	ldr	r3, [pc, #196]	; (8006164 <one_sectionD+0x12c>)
 80060a0:	781b      	ldrb	r3, [r3, #0]
 80060a2:	b2db      	uxtb	r3, r3
 80060a4:	2b03      	cmp	r3, #3
 80060a6:	d110      	bne.n	80060ca <one_sectionD+0x92>
		driveD(-accel_hs, SPEED_HIGH, speed_max_hs, SEC_HALF*2);			//1区画分減速走行。走行後は停止しない
 80060a8:	4b2f      	ldr	r3, [pc, #188]	; (8006168 <one_sectionD+0x130>)
 80060aa:	881b      	ldrh	r3, [r3, #0]
 80060ac:	b21b      	sxth	r3, r3
 80060ae:	b29b      	uxth	r3, r3
 80060b0:	425b      	negs	r3, r3
 80060b2:	b29b      	uxth	r3, r3
 80060b4:	b218      	sxth	r0, r3
 80060b6:	4b2d      	ldr	r3, [pc, #180]	; (800616c <one_sectionD+0x134>)
 80060b8:	881b      	ldrh	r3, [r3, #0]
 80060ba:	b21b      	sxth	r3, r3
 80060bc:	b29a      	uxth	r2, r3
 80060be:	23b6      	movs	r3, #182	; 0xb6
 80060c0:	f44f 7148 	mov.w	r1, #800	; 0x320
 80060c4:	f7ff f810 	bl	80050e8 <driveD>
 80060c8:	e040      	b.n	800614c <one_sectionD+0x114>
	}else if(run_mode == HIGH_HIGH){
 80060ca:	4b26      	ldr	r3, [pc, #152]	; (8006164 <one_sectionD+0x12c>)
 80060cc:	781b      	ldrb	r3, [r3, #0]
 80060ce:	b2db      	uxtb	r3, r3
 80060d0:	2b04      	cmp	r3, #4
 80060d2:	d110      	bne.n	80060f6 <one_sectionD+0xbe>
		driveD(-accel_hs, SPEED_HIGH_HIGH, speed_max_hs, SEC_HALF*2);			//1区画分減速走行。走行後は停止しない
 80060d4:	4b24      	ldr	r3, [pc, #144]	; (8006168 <one_sectionD+0x130>)
 80060d6:	881b      	ldrh	r3, [r3, #0]
 80060d8:	b21b      	sxth	r3, r3
 80060da:	b29b      	uxth	r3, r3
 80060dc:	425b      	negs	r3, r3
 80060de:	b29b      	uxth	r3, r3
 80060e0:	b218      	sxth	r0, r3
 80060e2:	4b22      	ldr	r3, [pc, #136]	; (800616c <one_sectionD+0x134>)
 80060e4:	881b      	ldrh	r3, [r3, #0]
 80060e6:	b21b      	sxth	r3, r3
 80060e8:	b29a      	uxth	r2, r3
 80060ea:	23b6      	movs	r3, #182	; 0xb6
 80060ec:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80060f0:	f7fe fffa 	bl	80050e8 <driveD>
 80060f4:	e02a      	b.n	800614c <one_sectionD+0x114>
	}else if(run_mode == 5){
 80060f6:	4b1b      	ldr	r3, [pc, #108]	; (8006164 <one_sectionD+0x12c>)
 80060f8:	781b      	ldrb	r3, [r3, #0]
 80060fa:	b2db      	uxtb	r3, r3
 80060fc:	2b05      	cmp	r3, #5
 80060fe:	d110      	bne.n	8006122 <one_sectionD+0xea>
		driveD(-accel_hs, SPEED_5, speed_max_hs, SEC_HALF*2);			//1区画分減速走行。走行後は停止しない
 8006100:	4b19      	ldr	r3, [pc, #100]	; (8006168 <one_sectionD+0x130>)
 8006102:	881b      	ldrh	r3, [r3, #0]
 8006104:	b21b      	sxth	r3, r3
 8006106:	b29b      	uxth	r3, r3
 8006108:	425b      	negs	r3, r3
 800610a:	b29b      	uxth	r3, r3
 800610c:	b218      	sxth	r0, r3
 800610e:	4b17      	ldr	r3, [pc, #92]	; (800616c <one_sectionD+0x134>)
 8006110:	881b      	ldrh	r3, [r3, #0]
 8006112:	b21b      	sxth	r3, r3
 8006114:	b29a      	uxth	r2, r3
 8006116:	23b6      	movs	r3, #182	; 0xb6
 8006118:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 800611c:	f7fe ffe4 	bl	80050e8 <driveD>
 8006120:	e014      	b.n	800614c <one_sectionD+0x114>
	}else if(run_mode == 6){
 8006122:	4b10      	ldr	r3, [pc, #64]	; (8006164 <one_sectionD+0x12c>)
 8006124:	781b      	ldrb	r3, [r3, #0]
 8006126:	b2db      	uxtb	r3, r3
 8006128:	2b06      	cmp	r3, #6
 800612a:	d10f      	bne.n	800614c <one_sectionD+0x114>
		driveD(-accel_hs, SPEED_6, speed_max_hs, SEC_HALF*2);			//1区画分減速走行。走行後は停止しない
 800612c:	4b0e      	ldr	r3, [pc, #56]	; (8006168 <one_sectionD+0x130>)
 800612e:	881b      	ldrh	r3, [r3, #0]
 8006130:	b21b      	sxth	r3, r3
 8006132:	b29b      	uxth	r3, r3
 8006134:	425b      	negs	r3, r3
 8006136:	b29b      	uxth	r3, r3
 8006138:	b218      	sxth	r0, r3
 800613a:	4b0c      	ldr	r3, [pc, #48]	; (800616c <one_sectionD+0x134>)
 800613c:	881b      	ldrh	r3, [r3, #0]
 800613e:	b21b      	sxth	r3, r3
 8006140:	b29a      	uxth	r2, r3
 8006142:	23b6      	movs	r3, #182	; 0xb6
 8006144:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8006148:	f7fe ffce 	bl	80050e8 <driveD>
	}
	if(!MF.FLAG.SCND)get_wall_info();								//壁情報を取得，片壁制御の有効・無効の判断
 800614c:	4b08      	ldr	r3, [pc, #32]	; (8006170 <one_sectionD+0x138>)
 800614e:	881b      	ldrh	r3, [r3, #0]
 8006150:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8006154:	b2db      	uxtb	r3, r3
 8006156:	2b00      	cmp	r3, #0
 8006158:	d101      	bne.n	800615e <one_sectionD+0x126>
 800615a:	f00b fcdd 	bl	8011b18 <get_wall_info>
}
 800615e:	bf00      	nop
 8006160:	bd80      	pop	{r7, pc}
 8006162:	bf00      	nop
 8006164:	20000456 	.word	0x20000456
 8006168:	20000454 	.word	0x20000454
 800616c:	20000f7c 	.word	0x20000f7c
 8006170:	20000f68 	.word	0x20000f68

08006174 <one_sectionVA>:
//one_sectionVA
// 等速で斜め半区画分進む
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void one_sectionVA(void){
 8006174:	b580      	push	{r7, lr}
 8006176:	af00      	add	r7, sp, #0
	full_led_write(BLUEGREEN);
 8006178:	2004      	movs	r0, #4
 800617a:	f00b fd41 	bl	8011c00 <full_led_write>
	control_start();
 800617e:	f7fe fe03 	bl	8004d88 <control_start>
	if(run_mode == LOW){
 8006182:	4b3c      	ldr	r3, [pc, #240]	; (8006274 <one_sectionVA+0x100>)
 8006184:	781b      	ldrb	r3, [r3, #0]
 8006186:	b2db      	uxtb	r3, r3
 8006188:	2b01      	cmp	r3, #1
 800618a:	d10e      	bne.n	80061aa <one_sectionVA+0x36>
		driveA(accel_hs, SPEED_LOW, speed_max_hs, SEC_HALF_V*2);				//1区画分加速走行。走行後は停止しない
 800618c:	4b3a      	ldr	r3, [pc, #232]	; (8006278 <one_sectionVA+0x104>)
 800618e:	881b      	ldrh	r3, [r3, #0]
 8006190:	b21b      	sxth	r3, r3
 8006192:	b298      	uxth	r0, r3
 8006194:	4b39      	ldr	r3, [pc, #228]	; (800627c <one_sectionVA+0x108>)
 8006196:	881b      	ldrh	r3, [r3, #0]
 8006198:	b21b      	sxth	r3, r3
 800619a:	b29a      	uxth	r2, r3
 800619c:	f44f 7382 	mov.w	r3, #260	; 0x104
 80061a0:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80061a4:	f7fe ff26 	bl	8004ff4 <driveA>
	}else if(run_mode == 5){
		driveA(accel_hs, SPEED_5, speed_max_hs, SEC_HALF_V*2);				//1区画分加速走行。走行後は停止しない
	}else if(run_mode == 6){
		driveA(accel_hs, SPEED_6, speed_max_hs, SEC_HALF_V*2);				//1区画分加速走行。走行後は停止しない
	}
}
 80061a8:	e062      	b.n	8006270 <one_sectionVA+0xfc>
	}else if(run_mode == MIDDLE){
 80061aa:	4b32      	ldr	r3, [pc, #200]	; (8006274 <one_sectionVA+0x100>)
 80061ac:	781b      	ldrb	r3, [r3, #0]
 80061ae:	b2db      	uxtb	r3, r3
 80061b0:	2b02      	cmp	r3, #2
 80061b2:	d10e      	bne.n	80061d2 <one_sectionVA+0x5e>
		driveA(accel_hs, SPEED_MIDDLE, speed_max_hs, SEC_HALF_V*2);				//1区画分加速走行。走行後は停止しない
 80061b4:	4b30      	ldr	r3, [pc, #192]	; (8006278 <one_sectionVA+0x104>)
 80061b6:	881b      	ldrh	r3, [r3, #0]
 80061b8:	b21b      	sxth	r3, r3
 80061ba:	b298      	uxth	r0, r3
 80061bc:	4b2f      	ldr	r3, [pc, #188]	; (800627c <one_sectionVA+0x108>)
 80061be:	881b      	ldrh	r3, [r3, #0]
 80061c0:	b21b      	sxth	r3, r3
 80061c2:	b29a      	uxth	r2, r3
 80061c4:	f44f 7382 	mov.w	r3, #260	; 0x104
 80061c8:	f44f 7116 	mov.w	r1, #600	; 0x258
 80061cc:	f7fe ff12 	bl	8004ff4 <driveA>
}
 80061d0:	e04e      	b.n	8006270 <one_sectionVA+0xfc>
	}else if(run_mode == HIGH){
 80061d2:	4b28      	ldr	r3, [pc, #160]	; (8006274 <one_sectionVA+0x100>)
 80061d4:	781b      	ldrb	r3, [r3, #0]
 80061d6:	b2db      	uxtb	r3, r3
 80061d8:	2b03      	cmp	r3, #3
 80061da:	d10e      	bne.n	80061fa <one_sectionVA+0x86>
		driveA(accel_hs, SPEED_HIGH, speed_max_hs, SEC_HALF_V*2);				//1区画分加速走行。走行後は停止しない
 80061dc:	4b26      	ldr	r3, [pc, #152]	; (8006278 <one_sectionVA+0x104>)
 80061de:	881b      	ldrh	r3, [r3, #0]
 80061e0:	b21b      	sxth	r3, r3
 80061e2:	b298      	uxth	r0, r3
 80061e4:	4b25      	ldr	r3, [pc, #148]	; (800627c <one_sectionVA+0x108>)
 80061e6:	881b      	ldrh	r3, [r3, #0]
 80061e8:	b21b      	sxth	r3, r3
 80061ea:	b29a      	uxth	r2, r3
 80061ec:	f44f 7382 	mov.w	r3, #260	; 0x104
 80061f0:	f44f 7148 	mov.w	r1, #800	; 0x320
 80061f4:	f7fe fefe 	bl	8004ff4 <driveA>
}
 80061f8:	e03a      	b.n	8006270 <one_sectionVA+0xfc>
	}else if(run_mode == HIGH_HIGH){
 80061fa:	4b1e      	ldr	r3, [pc, #120]	; (8006274 <one_sectionVA+0x100>)
 80061fc:	781b      	ldrb	r3, [r3, #0]
 80061fe:	b2db      	uxtb	r3, r3
 8006200:	2b04      	cmp	r3, #4
 8006202:	d10e      	bne.n	8006222 <one_sectionVA+0xae>
		driveA(accel_hs, SPEED_HIGH_HIGH, speed_max_hs, SEC_HALF_V*2);				//1区画分加速走行。走行後は停止しない
 8006204:	4b1c      	ldr	r3, [pc, #112]	; (8006278 <one_sectionVA+0x104>)
 8006206:	881b      	ldrh	r3, [r3, #0]
 8006208:	b21b      	sxth	r3, r3
 800620a:	b298      	uxth	r0, r3
 800620c:	4b1b      	ldr	r3, [pc, #108]	; (800627c <one_sectionVA+0x108>)
 800620e:	881b      	ldrh	r3, [r3, #0]
 8006210:	b21b      	sxth	r3, r3
 8006212:	b29a      	uxth	r2, r3
 8006214:	f44f 7382 	mov.w	r3, #260	; 0x104
 8006218:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800621c:	f7fe feea 	bl	8004ff4 <driveA>
}
 8006220:	e026      	b.n	8006270 <one_sectionVA+0xfc>
	}else if(run_mode == 5){
 8006222:	4b14      	ldr	r3, [pc, #80]	; (8006274 <one_sectionVA+0x100>)
 8006224:	781b      	ldrb	r3, [r3, #0]
 8006226:	b2db      	uxtb	r3, r3
 8006228:	2b05      	cmp	r3, #5
 800622a:	d10e      	bne.n	800624a <one_sectionVA+0xd6>
		driveA(accel_hs, SPEED_5, speed_max_hs, SEC_HALF_V*2);				//1区画分加速走行。走行後は停止しない
 800622c:	4b12      	ldr	r3, [pc, #72]	; (8006278 <one_sectionVA+0x104>)
 800622e:	881b      	ldrh	r3, [r3, #0]
 8006230:	b21b      	sxth	r3, r3
 8006232:	b298      	uxth	r0, r3
 8006234:	4b11      	ldr	r3, [pc, #68]	; (800627c <one_sectionVA+0x108>)
 8006236:	881b      	ldrh	r3, [r3, #0]
 8006238:	b21b      	sxth	r3, r3
 800623a:	b29a      	uxth	r2, r3
 800623c:	f44f 7382 	mov.w	r3, #260	; 0x104
 8006240:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 8006244:	f7fe fed6 	bl	8004ff4 <driveA>
}
 8006248:	e012      	b.n	8006270 <one_sectionVA+0xfc>
	}else if(run_mode == 6){
 800624a:	4b0a      	ldr	r3, [pc, #40]	; (8006274 <one_sectionVA+0x100>)
 800624c:	781b      	ldrb	r3, [r3, #0]
 800624e:	b2db      	uxtb	r3, r3
 8006250:	2b06      	cmp	r3, #6
 8006252:	d10d      	bne.n	8006270 <one_sectionVA+0xfc>
		driveA(accel_hs, SPEED_6, speed_max_hs, SEC_HALF_V*2);				//1区画分加速走行。走行後は停止しない
 8006254:	4b08      	ldr	r3, [pc, #32]	; (8006278 <one_sectionVA+0x104>)
 8006256:	881b      	ldrh	r3, [r3, #0]
 8006258:	b21b      	sxth	r3, r3
 800625a:	b298      	uxth	r0, r3
 800625c:	4b07      	ldr	r3, [pc, #28]	; (800627c <one_sectionVA+0x108>)
 800625e:	881b      	ldrh	r3, [r3, #0]
 8006260:	b21b      	sxth	r3, r3
 8006262:	b29a      	uxth	r2, r3
 8006264:	f44f 7382 	mov.w	r3, #260	; 0x104
 8006268:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 800626c:	f7fe fec2 	bl	8004ff4 <driveA>
}
 8006270:	bf00      	nop
 8006272:	bd80      	pop	{r7, pc}
 8006274:	20000456 	.word	0x20000456
 8006278:	20000454 	.word	0x20000454
 800627c:	20000f7c 	.word	0x20000f7c

08006280 <one_sectionVD>:
//one_sectionVD
// 等速で斜め半区画分進む
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void one_sectionVD(void){
 8006280:	b580      	push	{r7, lr}
 8006282:	af00      	add	r7, sp, #0
	full_led_write(BLUE);
 8006284:	2003      	movs	r0, #3
 8006286:	f00b fcbb 	bl	8011c00 <full_led_write>
	control_start();
 800628a:	f7fe fd7d 	bl	8004d88 <control_start>
	if(run_mode == LOW){
 800628e:	4b45      	ldr	r3, [pc, #276]	; (80063a4 <one_sectionVD+0x124>)
 8006290:	781b      	ldrb	r3, [r3, #0]
 8006292:	b2db      	uxtb	r3, r3
 8006294:	2b01      	cmp	r3, #1
 8006296:	d111      	bne.n	80062bc <one_sectionVD+0x3c>
		driveD(-accel_hs, SPEED_LOW, speed_max_hs, SEC_HALF_V*2);				//1区画分減速走行。走行後は停止しない
 8006298:	4b43      	ldr	r3, [pc, #268]	; (80063a8 <one_sectionVD+0x128>)
 800629a:	881b      	ldrh	r3, [r3, #0]
 800629c:	b21b      	sxth	r3, r3
 800629e:	b29b      	uxth	r3, r3
 80062a0:	425b      	negs	r3, r3
 80062a2:	b29b      	uxth	r3, r3
 80062a4:	b218      	sxth	r0, r3
 80062a6:	4b41      	ldr	r3, [pc, #260]	; (80063ac <one_sectionVD+0x12c>)
 80062a8:	881b      	ldrh	r3, [r3, #0]
 80062aa:	b21b      	sxth	r3, r3
 80062ac:	b29a      	uxth	r2, r3
 80062ae:	f44f 7382 	mov.w	r3, #260	; 0x104
 80062b2:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80062b6:	f7fe ff17 	bl	80050e8 <driveD>
	}else if(run_mode == 5){
		driveD(-accel_hs, SPEED_5, speed_max_hs, SEC_HALF_V*2);				//1区画分減速走行。走行後は停止しない
	}else if(run_mode == 6){
		driveD(-accel_hs, SPEED_6, speed_max_hs, SEC_HALF_V*2);				//1区画分減速走行。走行後は停止しない
	}
}
 80062ba:	e071      	b.n	80063a0 <one_sectionVD+0x120>
	}else if(run_mode == MIDDLE){
 80062bc:	4b39      	ldr	r3, [pc, #228]	; (80063a4 <one_sectionVD+0x124>)
 80062be:	781b      	ldrb	r3, [r3, #0]
 80062c0:	b2db      	uxtb	r3, r3
 80062c2:	2b02      	cmp	r3, #2
 80062c4:	d111      	bne.n	80062ea <one_sectionVD+0x6a>
		driveD(-accel_hs, SPEED_MIDDLE, speed_max_hs, SEC_HALF_V*2);			//1区画分減速走行。走行後は停止しない
 80062c6:	4b38      	ldr	r3, [pc, #224]	; (80063a8 <one_sectionVD+0x128>)
 80062c8:	881b      	ldrh	r3, [r3, #0]
 80062ca:	b21b      	sxth	r3, r3
 80062cc:	b29b      	uxth	r3, r3
 80062ce:	425b      	negs	r3, r3
 80062d0:	b29b      	uxth	r3, r3
 80062d2:	b218      	sxth	r0, r3
 80062d4:	4b35      	ldr	r3, [pc, #212]	; (80063ac <one_sectionVD+0x12c>)
 80062d6:	881b      	ldrh	r3, [r3, #0]
 80062d8:	b21b      	sxth	r3, r3
 80062da:	b29a      	uxth	r2, r3
 80062dc:	f44f 7382 	mov.w	r3, #260	; 0x104
 80062e0:	f44f 7116 	mov.w	r1, #600	; 0x258
 80062e4:	f7fe ff00 	bl	80050e8 <driveD>
}
 80062e8:	e05a      	b.n	80063a0 <one_sectionVD+0x120>
	}else if(run_mode == HIGH){
 80062ea:	4b2e      	ldr	r3, [pc, #184]	; (80063a4 <one_sectionVD+0x124>)
 80062ec:	781b      	ldrb	r3, [r3, #0]
 80062ee:	b2db      	uxtb	r3, r3
 80062f0:	2b03      	cmp	r3, #3
 80062f2:	d111      	bne.n	8006318 <one_sectionVD+0x98>
		driveD(-accel_hs, SPEED_HIGH, speed_max_hs, SEC_HALF_V*2);				//1区画分減速走行。走行後は停止しない
 80062f4:	4b2c      	ldr	r3, [pc, #176]	; (80063a8 <one_sectionVD+0x128>)
 80062f6:	881b      	ldrh	r3, [r3, #0]
 80062f8:	b21b      	sxth	r3, r3
 80062fa:	b29b      	uxth	r3, r3
 80062fc:	425b      	negs	r3, r3
 80062fe:	b29b      	uxth	r3, r3
 8006300:	b218      	sxth	r0, r3
 8006302:	4b2a      	ldr	r3, [pc, #168]	; (80063ac <one_sectionVD+0x12c>)
 8006304:	881b      	ldrh	r3, [r3, #0]
 8006306:	b21b      	sxth	r3, r3
 8006308:	b29a      	uxth	r2, r3
 800630a:	f44f 7382 	mov.w	r3, #260	; 0x104
 800630e:	f44f 7148 	mov.w	r1, #800	; 0x320
 8006312:	f7fe fee9 	bl	80050e8 <driveD>
}
 8006316:	e043      	b.n	80063a0 <one_sectionVD+0x120>
	}else if(run_mode == HIGH_HIGH){
 8006318:	4b22      	ldr	r3, [pc, #136]	; (80063a4 <one_sectionVD+0x124>)
 800631a:	781b      	ldrb	r3, [r3, #0]
 800631c:	b2db      	uxtb	r3, r3
 800631e:	2b04      	cmp	r3, #4
 8006320:	d111      	bne.n	8006346 <one_sectionVD+0xc6>
		driveD(-accel_hs, SPEED_HIGH_HIGH, speed_max_hs, SEC_HALF_V*2);				//1区画分減速走行。走行後は停止しない
 8006322:	4b21      	ldr	r3, [pc, #132]	; (80063a8 <one_sectionVD+0x128>)
 8006324:	881b      	ldrh	r3, [r3, #0]
 8006326:	b21b      	sxth	r3, r3
 8006328:	b29b      	uxth	r3, r3
 800632a:	425b      	negs	r3, r3
 800632c:	b29b      	uxth	r3, r3
 800632e:	b218      	sxth	r0, r3
 8006330:	4b1e      	ldr	r3, [pc, #120]	; (80063ac <one_sectionVD+0x12c>)
 8006332:	881b      	ldrh	r3, [r3, #0]
 8006334:	b21b      	sxth	r3, r3
 8006336:	b29a      	uxth	r2, r3
 8006338:	f44f 7382 	mov.w	r3, #260	; 0x104
 800633c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8006340:	f7fe fed2 	bl	80050e8 <driveD>
}
 8006344:	e02c      	b.n	80063a0 <one_sectionVD+0x120>
	}else if(run_mode == 5){
 8006346:	4b17      	ldr	r3, [pc, #92]	; (80063a4 <one_sectionVD+0x124>)
 8006348:	781b      	ldrb	r3, [r3, #0]
 800634a:	b2db      	uxtb	r3, r3
 800634c:	2b05      	cmp	r3, #5
 800634e:	d111      	bne.n	8006374 <one_sectionVD+0xf4>
		driveD(-accel_hs, SPEED_5, speed_max_hs, SEC_HALF_V*2);				//1区画分減速走行。走行後は停止しない
 8006350:	4b15      	ldr	r3, [pc, #84]	; (80063a8 <one_sectionVD+0x128>)
 8006352:	881b      	ldrh	r3, [r3, #0]
 8006354:	b21b      	sxth	r3, r3
 8006356:	b29b      	uxth	r3, r3
 8006358:	425b      	negs	r3, r3
 800635a:	b29b      	uxth	r3, r3
 800635c:	b218      	sxth	r0, r3
 800635e:	4b13      	ldr	r3, [pc, #76]	; (80063ac <one_sectionVD+0x12c>)
 8006360:	881b      	ldrh	r3, [r3, #0]
 8006362:	b21b      	sxth	r3, r3
 8006364:	b29a      	uxth	r2, r3
 8006366:	f44f 7382 	mov.w	r3, #260	; 0x104
 800636a:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 800636e:	f7fe febb 	bl	80050e8 <driveD>
}
 8006372:	e015      	b.n	80063a0 <one_sectionVD+0x120>
	}else if(run_mode == 6){
 8006374:	4b0b      	ldr	r3, [pc, #44]	; (80063a4 <one_sectionVD+0x124>)
 8006376:	781b      	ldrb	r3, [r3, #0]
 8006378:	b2db      	uxtb	r3, r3
 800637a:	2b06      	cmp	r3, #6
 800637c:	d110      	bne.n	80063a0 <one_sectionVD+0x120>
		driveD(-accel_hs, SPEED_6, speed_max_hs, SEC_HALF_V*2);				//1区画分減速走行。走行後は停止しない
 800637e:	4b0a      	ldr	r3, [pc, #40]	; (80063a8 <one_sectionVD+0x128>)
 8006380:	881b      	ldrh	r3, [r3, #0]
 8006382:	b21b      	sxth	r3, r3
 8006384:	b29b      	uxth	r3, r3
 8006386:	425b      	negs	r3, r3
 8006388:	b29b      	uxth	r3, r3
 800638a:	b218      	sxth	r0, r3
 800638c:	4b07      	ldr	r3, [pc, #28]	; (80063ac <one_sectionVD+0x12c>)
 800638e:	881b      	ldrh	r3, [r3, #0]
 8006390:	b21b      	sxth	r3, r3
 8006392:	b29a      	uxth	r2, r3
 8006394:	f44f 7382 	mov.w	r3, #260	; 0x104
 8006398:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 800639c:	f7fe fea4 	bl	80050e8 <driveD>
}
 80063a0:	bf00      	nop
 80063a2:	bd80      	pop	{r7, pc}
 80063a4:	20000456 	.word	0x20000456
 80063a8:	20000454 	.word	0x20000454
 80063ac:	20000f7c 	.word	0x20000f7c

080063b0 <one_sectionU>:
//one_sectionU
// 等速で1区画分進む
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void one_sectionU(void){
 80063b0:	b580      	push	{r7, lr}
 80063b2:	af00      	add	r7, sp, #0
	full_led_write(WHITE);
 80063b4:	2007      	movs	r0, #7
 80063b6:	f00b fc23 	bl	8011c00 <full_led_write>
	control_start();
 80063ba:	f7fe fce5 	bl	8004d88 <control_start>
	driveU(SEC_HALF*2);													//1区画分等速走行。走行後は停止しない
 80063be:	20b6      	movs	r0, #182	; 0xb6
 80063c0:	f7fe ff6c 	bl	800529c <driveU>
	if(!MF.FLAG.SCND)get_wall_info();								//壁情報を取得
 80063c4:	4b05      	ldr	r3, [pc, #20]	; (80063dc <one_sectionU+0x2c>)
 80063c6:	881b      	ldrh	r3, [r3, #0]
 80063c8:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80063cc:	b2db      	uxtb	r3, r3
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d101      	bne.n	80063d6 <one_sectionU+0x26>
 80063d2:	f00b fba1 	bl	8011b18 <get_wall_info>
}
 80063d6:	bf00      	nop
 80063d8:	bd80      	pop	{r7, pc}
 80063da:	bf00      	nop
 80063dc:	20000f68 	.word	0x20000f68

080063e0 <rotate_R90>:
//rotate_R90
// 右に90度回転する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void rotate_R90(void){
 80063e0:	b598      	push	{r3, r4, r7, lr}
 80063e2:	af00      	add	r7, sp, #0
	target_omega_z = 800;
 80063e4:	4b56      	ldr	r3, [pc, #344]	; (8006540 <rotate_R90+0x160>)
 80063e6:	4a57      	ldr	r2, [pc, #348]	; (8006544 <rotate_R90+0x164>)
 80063e8:	601a      	str	r2, [r3, #0]
	accel_l = 3000;
 80063ea:	4b57      	ldr	r3, [pc, #348]	; (8006548 <rotate_R90+0x168>)
 80063ec:	4a57      	ldr	r2, [pc, #348]	; (800654c <rotate_R90+0x16c>)
 80063ee:	601a      	str	r2, [r3, #0]
	accel_r = -3000;
 80063f0:	4b57      	ldr	r3, [pc, #348]	; (8006550 <rotate_R90+0x170>)
 80063f2:	4a58      	ldr	r2, [pc, #352]	; (8006554 <rotate_R90+0x174>)
 80063f4:	601a      	str	r2, [r3, #0]
	speed_max_l = target_omega_z/180*M_PI * TREAD/2;
 80063f6:	4b52      	ldr	r3, [pc, #328]	; (8006540 <rotate_R90+0x160>)
 80063f8:	edd3 7a00 	vldr	s15, [r3]
 80063fc:	ed9f 7a56 	vldr	s14, [pc, #344]	; 8006558 <rotate_R90+0x178>
 8006400:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8006404:	ee16 0a90 	vmov	r0, s13
 8006408:	f7fa f896 	bl	8000538 <__aeabi_f2d>
 800640c:	a34a      	add	r3, pc, #296	; (adr r3, 8006538 <rotate_R90+0x158>)
 800640e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006412:	f7fa f8e9 	bl	80005e8 <__aeabi_dmul>
 8006416:	4603      	mov	r3, r0
 8006418:	460c      	mov	r4, r1
 800641a:	4618      	mov	r0, r3
 800641c:	4621      	mov	r1, r4
 800641e:	f04f 0200 	mov.w	r2, #0
 8006422:	4b4e      	ldr	r3, [pc, #312]	; (800655c <rotate_R90+0x17c>)
 8006424:	f7fa f8e0 	bl	80005e8 <__aeabi_dmul>
 8006428:	4603      	mov	r3, r0
 800642a:	460c      	mov	r4, r1
 800642c:	4618      	mov	r0, r3
 800642e:	4621      	mov	r1, r4
 8006430:	f04f 0200 	mov.w	r2, #0
 8006434:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006438:	f7fa fa00 	bl	800083c <__aeabi_ddiv>
 800643c:	4603      	mov	r3, r0
 800643e:	460c      	mov	r4, r1
 8006440:	4618      	mov	r0, r3
 8006442:	4621      	mov	r1, r4
 8006444:	f7fa fba8 	bl	8000b98 <__aeabi_d2f>
 8006448:	4602      	mov	r2, r0
 800644a:	4b45      	ldr	r3, [pc, #276]	; (8006560 <rotate_R90+0x180>)
 800644c:	601a      	str	r2, [r3, #0]
	speed_min_r = -1*target_omega_z/180*M_PI * TREAD/2;
 800644e:	4b3c      	ldr	r3, [pc, #240]	; (8006540 <rotate_R90+0x160>)
 8006450:	edd3 7a00 	vldr	s15, [r3]
 8006454:	eef1 7a67 	vneg.f32	s15, s15
 8006458:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 8006558 <rotate_R90+0x178>
 800645c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8006460:	ee16 0a90 	vmov	r0, s13
 8006464:	f7fa f868 	bl	8000538 <__aeabi_f2d>
 8006468:	a333      	add	r3, pc, #204	; (adr r3, 8006538 <rotate_R90+0x158>)
 800646a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800646e:	f7fa f8bb 	bl	80005e8 <__aeabi_dmul>
 8006472:	4603      	mov	r3, r0
 8006474:	460c      	mov	r4, r1
 8006476:	4618      	mov	r0, r3
 8006478:	4621      	mov	r1, r4
 800647a:	f04f 0200 	mov.w	r2, #0
 800647e:	4b37      	ldr	r3, [pc, #220]	; (800655c <rotate_R90+0x17c>)
 8006480:	f7fa f8b2 	bl	80005e8 <__aeabi_dmul>
 8006484:	4603      	mov	r3, r0
 8006486:	460c      	mov	r4, r1
 8006488:	4618      	mov	r0, r3
 800648a:	4621      	mov	r1, r4
 800648c:	f04f 0200 	mov.w	r2, #0
 8006490:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006494:	f7fa f9d2 	bl	800083c <__aeabi_ddiv>
 8006498:	4603      	mov	r3, r0
 800649a:	460c      	mov	r4, r1
 800649c:	4618      	mov	r0, r3
 800649e:	4621      	mov	r1, r4
 80064a0:	f7fa fb7a 	bl	8000b98 <__aeabi_d2f>
 80064a4:	4602      	mov	r2, r0
 80064a6:	4b2f      	ldr	r3, [pc, #188]	; (8006564 <rotate_R90+0x184>)
 80064a8:	601a      	str	r2, [r3, #0]

	drive_start();											//走行開始
 80064aa:	f7fe fc15 	bl	8004cd8 <drive_start>
	control_stop();
 80064ae:	f7fe fc93 	bl	8004dd8 <control_stop>
	while(degree_z > target_degree_z-80);
 80064b2:	bf00      	nop
 80064b4:	4b2c      	ldr	r3, [pc, #176]	; (8006568 <rotate_R90+0x188>)
 80064b6:	edd3 7a00 	vldr	s15, [r3]
 80064ba:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 800656c <rotate_R90+0x18c>
 80064be:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80064c2:	4b2b      	ldr	r3, [pc, #172]	; (8006570 <rotate_R90+0x190>)
 80064c4:	edd3 7a00 	vldr	s15, [r3]
 80064c8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80064cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80064d0:	d4f0      	bmi.n	80064b4 <rotate_R90+0xd4>

	accel_l = -10000;
 80064d2:	4b1d      	ldr	r3, [pc, #116]	; (8006548 <rotate_R90+0x168>)
 80064d4:	4a27      	ldr	r2, [pc, #156]	; (8006574 <rotate_R90+0x194>)
 80064d6:	601a      	str	r2, [r3, #0]
	accel_r = 10000;
 80064d8:	4b1d      	ldr	r3, [pc, #116]	; (8006550 <rotate_R90+0x170>)
 80064da:	4a27      	ldr	r2, [pc, #156]	; (8006578 <rotate_R90+0x198>)
 80064dc:	601a      	str	r2, [r3, #0]
	speed_min_l = 100;
 80064de:	4b27      	ldr	r3, [pc, #156]	; (800657c <rotate_R90+0x19c>)
 80064e0:	4a27      	ldr	r2, [pc, #156]	; (8006580 <rotate_R90+0x1a0>)
 80064e2:	601a      	str	r2, [r3, #0]
	speed_max_r = -100;
 80064e4:	4b27      	ldr	r3, [pc, #156]	; (8006584 <rotate_R90+0x1a4>)
 80064e6:	4a28      	ldr	r2, [pc, #160]	; (8006588 <rotate_R90+0x1a8>)
 80064e8:	601a      	str	r2, [r3, #0]

	while(degree_z > target_degree_z-90);
 80064ea:	bf00      	nop
 80064ec:	4b1e      	ldr	r3, [pc, #120]	; (8006568 <rotate_R90+0x188>)
 80064ee:	edd3 7a00 	vldr	s15, [r3]
 80064f2:	ed9f 7a26 	vldr	s14, [pc, #152]	; 800658c <rotate_R90+0x1ac>
 80064f6:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80064fa:	4b1d      	ldr	r3, [pc, #116]	; (8006570 <rotate_R90+0x190>)
 80064fc:	edd3 7a00 	vldr	s15, [r3]
 8006500:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006504:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006508:	d4f0      	bmi.n	80064ec <rotate_R90+0x10c>

	if(!MF.FLAG.XDIR){
 800650a:	4b21      	ldr	r3, [pc, #132]	; (8006590 <rotate_R90+0x1b0>)
 800650c:	881b      	ldrh	r3, [r3, #0]
 800650e:	f3c3 3300 	ubfx	r3, r3, #12, #1
 8006512:	b2db      	uxtb	r3, r3
 8006514:	2b00      	cmp	r3, #0
 8006516:	d104      	bne.n	8006522 <rotate_R90+0x142>
		turn_dir(DIR_TURN_R90, 1);										//マイクロマウス内部位置情報でも左回転処理&目標角度左90度
 8006518:	2101      	movs	r1, #1
 800651a:	2001      	movs	r0, #1
 800651c:	f009 fcdc 	bl	800fed8 <turn_dir>
 8006520:	e003      	b.n	800652a <rotate_R90+0x14a>
	}else{
		turn_dir(DIR_TURN_R90_8, 3);									//マイクロマウス内部位置情報でも左回転処理&目標角度左90度
 8006522:	2103      	movs	r1, #3
 8006524:	2002      	movs	r0, #2
 8006526:	f009 fcd7 	bl	800fed8 <turn_dir>
	}
	drive_stop();
 800652a:	f7fe fc05 	bl	8004d38 <drive_stop>
}
 800652e:	bf00      	nop
 8006530:	bd98      	pop	{r3, r4, r7, pc}
 8006532:	bf00      	nop
 8006534:	f3af 8000 	nop.w
 8006538:	54442d18 	.word	0x54442d18
 800653c:	400921fb 	.word	0x400921fb
 8006540:	200001a8 	.word	0x200001a8
 8006544:	44480000 	.word	0x44480000
 8006548:	20000d58 	.word	0x20000d58
 800654c:	453b8000 	.word	0x453b8000
 8006550:	20000ae4 	.word	0x20000ae4
 8006554:	c53b8000 	.word	0xc53b8000
 8006558:	43340000 	.word	0x43340000
 800655c:	40508000 	.word	0x40508000
 8006560:	2000077c 	.word	0x2000077c
 8006564:	20000f6c 	.word	0x20000f6c
 8006568:	20000bf8 	.word	0x20000bf8
 800656c:	42a00000 	.word	0x42a00000
 8006570:	20000b5c 	.word	0x20000b5c
 8006574:	c61c4000 	.word	0xc61c4000
 8006578:	461c4000 	.word	0x461c4000
 800657c:	20000b54 	.word	0x20000b54
 8006580:	42c80000 	.word	0x42c80000
 8006584:	200001a4 	.word	0x200001a4
 8006588:	c2c80000 	.word	0xc2c80000
 800658c:	42b40000 	.word	0x42b40000
 8006590:	20000f68 	.word	0x20000f68
 8006594:	00000000 	.word	0x00000000

08006598 <rotate_L90>:
//rotate_L90
// 左に90度回転する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void rotate_L90(void){
 8006598:	b598      	push	{r3, r4, r7, lr}
 800659a:	af00      	add	r7, sp, #0
	target_omega_z = 800;
 800659c:	4b56      	ldr	r3, [pc, #344]	; (80066f8 <rotate_L90+0x160>)
 800659e:	4a57      	ldr	r2, [pc, #348]	; (80066fc <rotate_L90+0x164>)
 80065a0:	601a      	str	r2, [r3, #0]
	accel_l = -3000;
 80065a2:	4b57      	ldr	r3, [pc, #348]	; (8006700 <rotate_L90+0x168>)
 80065a4:	4a57      	ldr	r2, [pc, #348]	; (8006704 <rotate_L90+0x16c>)
 80065a6:	601a      	str	r2, [r3, #0]
	accel_r = 3000;
 80065a8:	4b57      	ldr	r3, [pc, #348]	; (8006708 <rotate_L90+0x170>)
 80065aa:	4a58      	ldr	r2, [pc, #352]	; (800670c <rotate_L90+0x174>)
 80065ac:	601a      	str	r2, [r3, #0]
	speed_min_l = -1*target_omega_z/180*M_PI * TREAD/2;
 80065ae:	4b52      	ldr	r3, [pc, #328]	; (80066f8 <rotate_L90+0x160>)
 80065b0:	edd3 7a00 	vldr	s15, [r3]
 80065b4:	eef1 7a67 	vneg.f32	s15, s15
 80065b8:	ed9f 7a55 	vldr	s14, [pc, #340]	; 8006710 <rotate_L90+0x178>
 80065bc:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80065c0:	ee16 0a90 	vmov	r0, s13
 80065c4:	f7f9 ffb8 	bl	8000538 <__aeabi_f2d>
 80065c8:	a349      	add	r3, pc, #292	; (adr r3, 80066f0 <rotate_L90+0x158>)
 80065ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065ce:	f7fa f80b 	bl	80005e8 <__aeabi_dmul>
 80065d2:	4603      	mov	r3, r0
 80065d4:	460c      	mov	r4, r1
 80065d6:	4618      	mov	r0, r3
 80065d8:	4621      	mov	r1, r4
 80065da:	f04f 0200 	mov.w	r2, #0
 80065de:	4b4d      	ldr	r3, [pc, #308]	; (8006714 <rotate_L90+0x17c>)
 80065e0:	f7fa f802 	bl	80005e8 <__aeabi_dmul>
 80065e4:	4603      	mov	r3, r0
 80065e6:	460c      	mov	r4, r1
 80065e8:	4618      	mov	r0, r3
 80065ea:	4621      	mov	r1, r4
 80065ec:	f04f 0200 	mov.w	r2, #0
 80065f0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80065f4:	f7fa f922 	bl	800083c <__aeabi_ddiv>
 80065f8:	4603      	mov	r3, r0
 80065fa:	460c      	mov	r4, r1
 80065fc:	4618      	mov	r0, r3
 80065fe:	4621      	mov	r1, r4
 8006600:	f7fa faca 	bl	8000b98 <__aeabi_d2f>
 8006604:	4602      	mov	r2, r0
 8006606:	4b44      	ldr	r3, [pc, #272]	; (8006718 <rotate_L90+0x180>)
 8006608:	601a      	str	r2, [r3, #0]
	speed_max_r = target_omega_z/180*M_PI * TREAD/2;
 800660a:	4b3b      	ldr	r3, [pc, #236]	; (80066f8 <rotate_L90+0x160>)
 800660c:	edd3 7a00 	vldr	s15, [r3]
 8006610:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 8006710 <rotate_L90+0x178>
 8006614:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8006618:	ee16 0a90 	vmov	r0, s13
 800661c:	f7f9 ff8c 	bl	8000538 <__aeabi_f2d>
 8006620:	a333      	add	r3, pc, #204	; (adr r3, 80066f0 <rotate_L90+0x158>)
 8006622:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006626:	f7f9 ffdf 	bl	80005e8 <__aeabi_dmul>
 800662a:	4603      	mov	r3, r0
 800662c:	460c      	mov	r4, r1
 800662e:	4618      	mov	r0, r3
 8006630:	4621      	mov	r1, r4
 8006632:	f04f 0200 	mov.w	r2, #0
 8006636:	4b37      	ldr	r3, [pc, #220]	; (8006714 <rotate_L90+0x17c>)
 8006638:	f7f9 ffd6 	bl	80005e8 <__aeabi_dmul>
 800663c:	4603      	mov	r3, r0
 800663e:	460c      	mov	r4, r1
 8006640:	4618      	mov	r0, r3
 8006642:	4621      	mov	r1, r4
 8006644:	f04f 0200 	mov.w	r2, #0
 8006648:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800664c:	f7fa f8f6 	bl	800083c <__aeabi_ddiv>
 8006650:	4603      	mov	r3, r0
 8006652:	460c      	mov	r4, r1
 8006654:	4618      	mov	r0, r3
 8006656:	4621      	mov	r1, r4
 8006658:	f7fa fa9e 	bl	8000b98 <__aeabi_d2f>
 800665c:	4602      	mov	r2, r0
 800665e:	4b2f      	ldr	r3, [pc, #188]	; (800671c <rotate_L90+0x184>)
 8006660:	601a      	str	r2, [r3, #0]

	drive_start();											//走行開始
 8006662:	f7fe fb39 	bl	8004cd8 <drive_start>
	control_stop();
 8006666:	f7fe fbb7 	bl	8004dd8 <control_stop>
	while(degree_z < target_degree_z+80);
 800666a:	bf00      	nop
 800666c:	4b2c      	ldr	r3, [pc, #176]	; (8006720 <rotate_L90+0x188>)
 800666e:	edd3 7a00 	vldr	s15, [r3]
 8006672:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 8006724 <rotate_L90+0x18c>
 8006676:	ee37 7a87 	vadd.f32	s14, s15, s14
 800667a:	4b2b      	ldr	r3, [pc, #172]	; (8006728 <rotate_L90+0x190>)
 800667c:	edd3 7a00 	vldr	s15, [r3]
 8006680:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006684:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006688:	dcf0      	bgt.n	800666c <rotate_L90+0xd4>

	accel_l = 10000;
 800668a:	4b1d      	ldr	r3, [pc, #116]	; (8006700 <rotate_L90+0x168>)
 800668c:	4a27      	ldr	r2, [pc, #156]	; (800672c <rotate_L90+0x194>)
 800668e:	601a      	str	r2, [r3, #0]
	accel_r = -10000;
 8006690:	4b1d      	ldr	r3, [pc, #116]	; (8006708 <rotate_L90+0x170>)
 8006692:	4a27      	ldr	r2, [pc, #156]	; (8006730 <rotate_L90+0x198>)
 8006694:	601a      	str	r2, [r3, #0]
	speed_max_l = -100;
 8006696:	4b27      	ldr	r3, [pc, #156]	; (8006734 <rotate_L90+0x19c>)
 8006698:	4a27      	ldr	r2, [pc, #156]	; (8006738 <rotate_L90+0x1a0>)
 800669a:	601a      	str	r2, [r3, #0]
	speed_min_r = 100;
 800669c:	4b27      	ldr	r3, [pc, #156]	; (800673c <rotate_L90+0x1a4>)
 800669e:	4a28      	ldr	r2, [pc, #160]	; (8006740 <rotate_L90+0x1a8>)
 80066a0:	601a      	str	r2, [r3, #0]

	while(degree_z < target_degree_z+90);
 80066a2:	bf00      	nop
 80066a4:	4b1e      	ldr	r3, [pc, #120]	; (8006720 <rotate_L90+0x188>)
 80066a6:	edd3 7a00 	vldr	s15, [r3]
 80066aa:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8006744 <rotate_L90+0x1ac>
 80066ae:	ee37 7a87 	vadd.f32	s14, s15, s14
 80066b2:	4b1d      	ldr	r3, [pc, #116]	; (8006728 <rotate_L90+0x190>)
 80066b4:	edd3 7a00 	vldr	s15, [r3]
 80066b8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80066bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80066c0:	dcf0      	bgt.n	80066a4 <rotate_L90+0x10c>

	if(!MF.FLAG.XDIR){
 80066c2:	4b21      	ldr	r3, [pc, #132]	; (8006748 <rotate_L90+0x1b0>)
 80066c4:	881b      	ldrh	r3, [r3, #0]
 80066c6:	f3c3 3300 	ubfx	r3, r3, #12, #1
 80066ca:	b2db      	uxtb	r3, r3
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d104      	bne.n	80066da <rotate_L90+0x142>
		turn_dir(DIR_TURN_L90, 1);										//マイクロマウス内部位置情報でも右回転処理&目標角度右90度
 80066d0:	2101      	movs	r1, #1
 80066d2:	20ff      	movs	r0, #255	; 0xff
 80066d4:	f009 fc00 	bl	800fed8 <turn_dir>
 80066d8:	e003      	b.n	80066e2 <rotate_L90+0x14a>
	}else{
		turn_dir(DIR_TURN_L90_8, 3);									//マイクロマウス内部位置情報でも右回転処理&目標角度右90度
 80066da:	2103      	movs	r1, #3
 80066dc:	20fe      	movs	r0, #254	; 0xfe
 80066de:	f009 fbfb 	bl	800fed8 <turn_dir>
	}
	drive_stop();
 80066e2:	f7fe fb29 	bl	8004d38 <drive_stop>
}
 80066e6:	bf00      	nop
 80066e8:	bd98      	pop	{r3, r4, r7, pc}
 80066ea:	bf00      	nop
 80066ec:	f3af 8000 	nop.w
 80066f0:	54442d18 	.word	0x54442d18
 80066f4:	400921fb 	.word	0x400921fb
 80066f8:	200001a8 	.word	0x200001a8
 80066fc:	44480000 	.word	0x44480000
 8006700:	20000d58 	.word	0x20000d58
 8006704:	c53b8000 	.word	0xc53b8000
 8006708:	20000ae4 	.word	0x20000ae4
 800670c:	453b8000 	.word	0x453b8000
 8006710:	43340000 	.word	0x43340000
 8006714:	40508000 	.word	0x40508000
 8006718:	20000b54 	.word	0x20000b54
 800671c:	200001a4 	.word	0x200001a4
 8006720:	20000bf8 	.word	0x20000bf8
 8006724:	42a00000 	.word	0x42a00000
 8006728:	20000b5c 	.word	0x20000b5c
 800672c:	461c4000 	.word	0x461c4000
 8006730:	c61c4000 	.word	0xc61c4000
 8006734:	2000077c 	.word	0x2000077c
 8006738:	c2c80000 	.word	0xc2c80000
 800673c:	20000f6c 	.word	0x20000f6c
 8006740:	42c80000 	.word	0x42c80000
 8006744:	42b40000 	.word	0x42b40000
 8006748:	20000f68 	.word	0x20000f68
 800674c:	00000000 	.word	0x00000000

08006750 <rotate_180>:
//rotate_180
// 180度回転する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void rotate_180(void){
 8006750:	b598      	push	{r3, r4, r7, lr}
 8006752:	af00      	add	r7, sp, #0

	full_led_write(GREEN);
 8006754:	2002      	movs	r0, #2
 8006756:	f00b fa53 	bl	8011c00 <full_led_write>
	target_omega_z = 800;
 800675a:	4b55      	ldr	r3, [pc, #340]	; (80068b0 <rotate_180+0x160>)
 800675c:	4a55      	ldr	r2, [pc, #340]	; (80068b4 <rotate_180+0x164>)
 800675e:	601a      	str	r2, [r3, #0]
	accel_l = 3000;
 8006760:	4b55      	ldr	r3, [pc, #340]	; (80068b8 <rotate_180+0x168>)
 8006762:	4a56      	ldr	r2, [pc, #344]	; (80068bc <rotate_180+0x16c>)
 8006764:	601a      	str	r2, [r3, #0]
	accel_r = -3000;
 8006766:	4b56      	ldr	r3, [pc, #344]	; (80068c0 <rotate_180+0x170>)
 8006768:	4a56      	ldr	r2, [pc, #344]	; (80068c4 <rotate_180+0x174>)
 800676a:	601a      	str	r2, [r3, #0]
	speed_max_l = target_omega_z/180*M_PI * TREAD/2;
 800676c:	4b50      	ldr	r3, [pc, #320]	; (80068b0 <rotate_180+0x160>)
 800676e:	edd3 7a00 	vldr	s15, [r3]
 8006772:	ed9f 7a55 	vldr	s14, [pc, #340]	; 80068c8 <rotate_180+0x178>
 8006776:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800677a:	ee16 0a90 	vmov	r0, s13
 800677e:	f7f9 fedb 	bl	8000538 <__aeabi_f2d>
 8006782:	a349      	add	r3, pc, #292	; (adr r3, 80068a8 <rotate_180+0x158>)
 8006784:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006788:	f7f9 ff2e 	bl	80005e8 <__aeabi_dmul>
 800678c:	4603      	mov	r3, r0
 800678e:	460c      	mov	r4, r1
 8006790:	4618      	mov	r0, r3
 8006792:	4621      	mov	r1, r4
 8006794:	f04f 0200 	mov.w	r2, #0
 8006798:	4b4c      	ldr	r3, [pc, #304]	; (80068cc <rotate_180+0x17c>)
 800679a:	f7f9 ff25 	bl	80005e8 <__aeabi_dmul>
 800679e:	4603      	mov	r3, r0
 80067a0:	460c      	mov	r4, r1
 80067a2:	4618      	mov	r0, r3
 80067a4:	4621      	mov	r1, r4
 80067a6:	f04f 0200 	mov.w	r2, #0
 80067aa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80067ae:	f7fa f845 	bl	800083c <__aeabi_ddiv>
 80067b2:	4603      	mov	r3, r0
 80067b4:	460c      	mov	r4, r1
 80067b6:	4618      	mov	r0, r3
 80067b8:	4621      	mov	r1, r4
 80067ba:	f7fa f9ed 	bl	8000b98 <__aeabi_d2f>
 80067be:	4602      	mov	r2, r0
 80067c0:	4b43      	ldr	r3, [pc, #268]	; (80068d0 <rotate_180+0x180>)
 80067c2:	601a      	str	r2, [r3, #0]
	speed_min_r = -1*target_omega_z/180*M_PI * TREAD/2;
 80067c4:	4b3a      	ldr	r3, [pc, #232]	; (80068b0 <rotate_180+0x160>)
 80067c6:	edd3 7a00 	vldr	s15, [r3]
 80067ca:	eef1 7a67 	vneg.f32	s15, s15
 80067ce:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 80068c8 <rotate_180+0x178>
 80067d2:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80067d6:	ee16 0a90 	vmov	r0, s13
 80067da:	f7f9 fead 	bl	8000538 <__aeabi_f2d>
 80067de:	a332      	add	r3, pc, #200	; (adr r3, 80068a8 <rotate_180+0x158>)
 80067e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067e4:	f7f9 ff00 	bl	80005e8 <__aeabi_dmul>
 80067e8:	4603      	mov	r3, r0
 80067ea:	460c      	mov	r4, r1
 80067ec:	4618      	mov	r0, r3
 80067ee:	4621      	mov	r1, r4
 80067f0:	f04f 0200 	mov.w	r2, #0
 80067f4:	4b35      	ldr	r3, [pc, #212]	; (80068cc <rotate_180+0x17c>)
 80067f6:	f7f9 fef7 	bl	80005e8 <__aeabi_dmul>
 80067fa:	4603      	mov	r3, r0
 80067fc:	460c      	mov	r4, r1
 80067fe:	4618      	mov	r0, r3
 8006800:	4621      	mov	r1, r4
 8006802:	f04f 0200 	mov.w	r2, #0
 8006806:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800680a:	f7fa f817 	bl	800083c <__aeabi_ddiv>
 800680e:	4603      	mov	r3, r0
 8006810:	460c      	mov	r4, r1
 8006812:	4618      	mov	r0, r3
 8006814:	4621      	mov	r1, r4
 8006816:	f7fa f9bf 	bl	8000b98 <__aeabi_d2f>
 800681a:	4602      	mov	r2, r0
 800681c:	4b2d      	ldr	r3, [pc, #180]	; (80068d4 <rotate_180+0x184>)
 800681e:	601a      	str	r2, [r3, #0]

	drive_start();											//走行開始
 8006820:	f7fe fa5a 	bl	8004cd8 <drive_start>
	control_stop();
 8006824:	f7fe fad8 	bl	8004dd8 <control_stop>
	while(degree_z > target_degree_z-160);
 8006828:	bf00      	nop
 800682a:	4b2b      	ldr	r3, [pc, #172]	; (80068d8 <rotate_180+0x188>)
 800682c:	edd3 7a00 	vldr	s15, [r3]
 8006830:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 80068dc <rotate_180+0x18c>
 8006834:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8006838:	4b29      	ldr	r3, [pc, #164]	; (80068e0 <rotate_180+0x190>)
 800683a:	edd3 7a00 	vldr	s15, [r3]
 800683e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006842:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006846:	d4f0      	bmi.n	800682a <rotate_180+0xda>

	accel_l = -10000;
 8006848:	4b1b      	ldr	r3, [pc, #108]	; (80068b8 <rotate_180+0x168>)
 800684a:	4a26      	ldr	r2, [pc, #152]	; (80068e4 <rotate_180+0x194>)
 800684c:	601a      	str	r2, [r3, #0]
	accel_r = 10000;
 800684e:	4b1c      	ldr	r3, [pc, #112]	; (80068c0 <rotate_180+0x170>)
 8006850:	4a25      	ldr	r2, [pc, #148]	; (80068e8 <rotate_180+0x198>)
 8006852:	601a      	str	r2, [r3, #0]
	speed_min_l = 100;
 8006854:	4b25      	ldr	r3, [pc, #148]	; (80068ec <rotate_180+0x19c>)
 8006856:	4a26      	ldr	r2, [pc, #152]	; (80068f0 <rotate_180+0x1a0>)
 8006858:	601a      	str	r2, [r3, #0]
	speed_max_r = -100;
 800685a:	4b26      	ldr	r3, [pc, #152]	; (80068f4 <rotate_180+0x1a4>)
 800685c:	4a26      	ldr	r2, [pc, #152]	; (80068f8 <rotate_180+0x1a8>)
 800685e:	601a      	str	r2, [r3, #0]

	while(degree_z > target_degree_z-180);
 8006860:	bf00      	nop
 8006862:	4b1d      	ldr	r3, [pc, #116]	; (80068d8 <rotate_180+0x188>)
 8006864:	edd3 7a00 	vldr	s15, [r3]
 8006868:	ed9f 7a17 	vldr	s14, [pc, #92]	; 80068c8 <rotate_180+0x178>
 800686c:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8006870:	4b1b      	ldr	r3, [pc, #108]	; (80068e0 <rotate_180+0x190>)
 8006872:	edd3 7a00 	vldr	s15, [r3]
 8006876:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800687a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800687e:	d4f0      	bmi.n	8006862 <rotate_180+0x112>

	if(!MF.FLAG.XDIR){
 8006880:	4b1e      	ldr	r3, [pc, #120]	; (80068fc <rotate_180+0x1ac>)
 8006882:	881b      	ldrh	r3, [r3, #0]
 8006884:	f3c3 3300 	ubfx	r3, r3, #12, #1
 8006888:	b2db      	uxtb	r3, r3
 800688a:	2b00      	cmp	r3, #0
 800688c:	d104      	bne.n	8006898 <rotate_180+0x148>
		turn_dir(DIR_TURN_180, 1);										//マイクロマウス内部位置情報でも180度回転処理&目標角度左180度
 800688e:	2101      	movs	r1, #1
 8006890:	2002      	movs	r0, #2
 8006892:	f009 fb21 	bl	800fed8 <turn_dir>
 8006896:	e003      	b.n	80068a0 <rotate_180+0x150>
	}else{
		turn_dir(DIR_TURN_R180_8, 3);									//マイクロマウス内部位置情報でも180度回転処理&目標角度左180度
 8006898:	2103      	movs	r1, #3
 800689a:	2004      	movs	r0, #4
 800689c:	f009 fb1c 	bl	800fed8 <turn_dir>
	}
	drive_stop();
 80068a0:	f7fe fa4a 	bl	8004d38 <drive_stop>

}
 80068a4:	bf00      	nop
 80068a6:	bd98      	pop	{r3, r4, r7, pc}
 80068a8:	54442d18 	.word	0x54442d18
 80068ac:	400921fb 	.word	0x400921fb
 80068b0:	200001a8 	.word	0x200001a8
 80068b4:	44480000 	.word	0x44480000
 80068b8:	20000d58 	.word	0x20000d58
 80068bc:	453b8000 	.word	0x453b8000
 80068c0:	20000ae4 	.word	0x20000ae4
 80068c4:	c53b8000 	.word	0xc53b8000
 80068c8:	43340000 	.word	0x43340000
 80068cc:	40508000 	.word	0x40508000
 80068d0:	2000077c 	.word	0x2000077c
 80068d4:	20000f6c 	.word	0x20000f6c
 80068d8:	20000bf8 	.word	0x20000bf8
 80068dc:	43200000 	.word	0x43200000
 80068e0:	20000b5c 	.word	0x20000b5c
 80068e4:	c61c4000 	.word	0xc61c4000
 80068e8:	461c4000 	.word	0x461c4000
 80068ec:	20000b54 	.word	0x20000b54
 80068f0:	42c80000 	.word	0x42c80000
 80068f4:	200001a4 	.word	0x200001a4
 80068f8:	c2c80000 	.word	0xc2c80000
 80068fc:	20000f68 	.word	0x20000f68

08006900 <slalom_R90>:
//slalom_R90
// スラロームで左に90度回転する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void slalom_R90(void){
 8006900:	b580      	push	{r7, lr}
 8006902:	b082      	sub	sp, #8
 8006904:	af02      	add	r7, sp, #8
	full_led_write(PURPLE);
 8006906:	2005      	movs	r0, #5
 8006908:	f00b f97a 	bl	8011c00 <full_led_write>
	if(run_mode == LOW){
 800690c:	4b86      	ldr	r3, [pc, #536]	; (8006b28 <slalom_R90+0x228>)
 800690e:	781b      	ldrb	r3, [r3, #0]
 8006910:	b2db      	uxtb	r3, r3
 8006912:	2b01      	cmp	r3, #1
 8006914:	d12a      	bne.n	800696c <slalom_R90+0x6c>
		slalomF(10000, SPEED_LOW, SLALOM_OFFSET_F, SLALOM_WALL_FL, SLALOM_WALL_FR);
 8006916:	23fa      	movs	r3, #250	; 0xfa
 8006918:	9300      	str	r3, [sp, #0]
 800691a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800691e:	2212      	movs	r2, #18
 8006920:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8006924:	f242 7010 	movw	r0, #10000	; 0x2710
 8006928:	f7fe fdb6 	bl	8005498 <slalomF>
		slalomR(-SLALOM_DEGACCEL, -SLALOM_OMEGA, -90, SPEED_LOW);
 800692c:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8006930:	f06f 0259 	mvn.w	r2, #89	; 0x59
 8006934:	497d      	ldr	r1, [pc, #500]	; (8006b2c <slalom_R90+0x22c>)
 8006936:	487e      	ldr	r0, [pc, #504]	; (8006b30 <slalom_R90+0x230>)
 8006938:	f7fe fe64 	bl	8005604 <slalomR>

		if(!MF.FLAG.XDIR){
 800693c:	4b7d      	ldr	r3, [pc, #500]	; (8006b34 <slalom_R90+0x234>)
 800693e:	881b      	ldrh	r3, [r3, #0]
 8006940:	f3c3 3300 	ubfx	r3, r3, #12, #1
 8006944:	b2db      	uxtb	r3, r3
 8006946:	2b00      	cmp	r3, #0
 8006948:	d104      	bne.n	8006954 <slalom_R90+0x54>
			turn_dir(DIR_TURN_R90, 1);									//マイクロマウス内部位置情報でも左回転処理&目標角度左90度
 800694a:	2101      	movs	r1, #1
 800694c:	2001      	movs	r0, #1
 800694e:	f009 fac3 	bl	800fed8 <turn_dir>
 8006952:	e003      	b.n	800695c <slalom_R90+0x5c>
		}else{
			turn_dir(DIR_TURN_R90_8, 3);								//マイクロマウス内部位置情報でも左回転処理&目標角度左90度
 8006954:	2103      	movs	r1, #3
 8006956:	2002      	movs	r0, #2
 8006958:	f009 fabe 	bl	800fed8 <turn_dir>
		}
		slalomB(10000, SPEED_LOW, SLALOM_OFFSET_B);
 800695c:	2219      	movs	r2, #25
 800695e:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8006962:	f242 7010 	movw	r0, #10000	; 0x2710
 8006966:	f7fe ff6f 	bl	8005848 <slalomB>
 800696a:	e0d1      	b.n	8006b10 <slalom_R90+0x210>
	}else if(run_mode == MIDDLE){
 800696c:	4b6e      	ldr	r3, [pc, #440]	; (8006b28 <slalom_R90+0x228>)
 800696e:	781b      	ldrb	r3, [r3, #0]
 8006970:	b2db      	uxtb	r3, r3
 8006972:	2b02      	cmp	r3, #2
 8006974:	d12a      	bne.n	80069cc <slalom_R90+0xcc>
		slalomF(10000, SPEED_MIDDLE, SLALOM_2_OFFSET_F, SLALOM_2_WALL_FL, SLALOM_2_WALL_FR);
 8006976:	23f0      	movs	r3, #240	; 0xf0
 8006978:	9300      	str	r3, [sp, #0]
 800697a:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 800697e:	2219      	movs	r2, #25
 8006980:	f44f 7116 	mov.w	r1, #600	; 0x258
 8006984:	f242 7010 	movw	r0, #10000	; 0x2710
 8006988:	f7fe fd86 	bl	8005498 <slalomF>
		slalomR(-SLALOM_2_DEGACCEL, -SLALOM_2_OMEGA, -85, SPEED_MIDDLE);
 800698c:	f44f 7316 	mov.w	r3, #600	; 0x258
 8006990:	f06f 0254 	mvn.w	r2, #84	; 0x54
 8006994:	4968      	ldr	r1, [pc, #416]	; (8006b38 <slalom_R90+0x238>)
 8006996:	4869      	ldr	r0, [pc, #420]	; (8006b3c <slalom_R90+0x23c>)
 8006998:	f7fe fe34 	bl	8005604 <slalomR>

		if(!MF.FLAG.XDIR){
 800699c:	4b65      	ldr	r3, [pc, #404]	; (8006b34 <slalom_R90+0x234>)
 800699e:	881b      	ldrh	r3, [r3, #0]
 80069a0:	f3c3 3300 	ubfx	r3, r3, #12, #1
 80069a4:	b2db      	uxtb	r3, r3
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d104      	bne.n	80069b4 <slalom_R90+0xb4>
			turn_dir(DIR_TURN_R90, 1);									//マイクロマウス内部位置情報でも左回転処理&目標角度左90度
 80069aa:	2101      	movs	r1, #1
 80069ac:	2001      	movs	r0, #1
 80069ae:	f009 fa93 	bl	800fed8 <turn_dir>
 80069b2:	e003      	b.n	80069bc <slalom_R90+0xbc>
		}else{
			turn_dir(DIR_TURN_R90_8, 3);								//マイクロマウス内部位置情報でも左回転処理&目標角度左90度
 80069b4:	2103      	movs	r1, #3
 80069b6:	2002      	movs	r0, #2
 80069b8:	f009 fa8e 	bl	800fed8 <turn_dir>
		}
		slalomB(10000, SPEED_MIDDLE, SLALOM_2_OFFSET_B);
 80069bc:	223c      	movs	r2, #60	; 0x3c
 80069be:	f44f 7116 	mov.w	r1, #600	; 0x258
 80069c2:	f242 7010 	movw	r0, #10000	; 0x2710
 80069c6:	f7fe ff3f 	bl	8005848 <slalomB>
 80069ca:	e0a1      	b.n	8006b10 <slalom_R90+0x210>
	}else if(run_mode == HIGH){
 80069cc:	4b56      	ldr	r3, [pc, #344]	; (8006b28 <slalom_R90+0x228>)
 80069ce:	781b      	ldrb	r3, [r3, #0]
 80069d0:	b2db      	uxtb	r3, r3
 80069d2:	2b03      	cmp	r3, #3
 80069d4:	d12a      	bne.n	8006a2c <slalom_R90+0x12c>
		slalomF(10000, SPEED_HIGH, SLALOM_3_OFFSET_F, SLALOM_3_WALL_FL, SLALOM_3_WALL_FR);
 80069d6:	23b4      	movs	r3, #180	; 0xb4
 80069d8:	9300      	str	r3, [sp, #0]
 80069da:	f44f 73b4 	mov.w	r3, #360	; 0x168
 80069de:	2219      	movs	r2, #25
 80069e0:	f44f 7148 	mov.w	r1, #800	; 0x320
 80069e4:	f242 7010 	movw	r0, #10000	; 0x2710
 80069e8:	f7fe fd56 	bl	8005498 <slalomF>
		slalomR(-SLALOM_3_DEGACCEL, -SLALOM_3_OMEGA, -70, SPEED_HIGH);
 80069ec:	f44f 7348 	mov.w	r3, #800	; 0x320
 80069f0:	f06f 0245 	mvn.w	r2, #69	; 0x45
 80069f4:	4952      	ldr	r1, [pc, #328]	; (8006b40 <slalom_R90+0x240>)
 80069f6:	4853      	ldr	r0, [pc, #332]	; (8006b44 <slalom_R90+0x244>)
 80069f8:	f7fe fe04 	bl	8005604 <slalomR>

		if(!MF.FLAG.XDIR){
 80069fc:	4b4d      	ldr	r3, [pc, #308]	; (8006b34 <slalom_R90+0x234>)
 80069fe:	881b      	ldrh	r3, [r3, #0]
 8006a00:	f3c3 3300 	ubfx	r3, r3, #12, #1
 8006a04:	b2db      	uxtb	r3, r3
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d104      	bne.n	8006a14 <slalom_R90+0x114>
			turn_dir(DIR_TURN_R90, 1);									//マイクロマウス内部位置情報でも左回転処理&目標角度左90度
 8006a0a:	2101      	movs	r1, #1
 8006a0c:	2001      	movs	r0, #1
 8006a0e:	f009 fa63 	bl	800fed8 <turn_dir>
 8006a12:	e003      	b.n	8006a1c <slalom_R90+0x11c>
		}else{
			turn_dir(DIR_TURN_R90_8, 3);								//マイクロマウス内部位置情報でも左回転処理&目標角度左90度
 8006a14:	2103      	movs	r1, #3
 8006a16:	2002      	movs	r0, #2
 8006a18:	f009 fa5e 	bl	800fed8 <turn_dir>
		}
		slalomB(10000, SPEED_HIGH, SLALOM_3_OFFSET_B);
 8006a1c:	225a      	movs	r2, #90	; 0x5a
 8006a1e:	f44f 7148 	mov.w	r1, #800	; 0x320
 8006a22:	f242 7010 	movw	r0, #10000	; 0x2710
 8006a26:	f7fe ff0f 	bl	8005848 <slalomB>
 8006a2a:	e071      	b.n	8006b10 <slalom_R90+0x210>
	}else if(run_mode == HIGH_HIGH){
 8006a2c:	4b3e      	ldr	r3, [pc, #248]	; (8006b28 <slalom_R90+0x228>)
 8006a2e:	781b      	ldrb	r3, [r3, #0]
 8006a30:	b2db      	uxtb	r3, r3
 8006a32:	2b04      	cmp	r3, #4
 8006a34:	d12a      	bne.n	8006a8c <slalom_R90+0x18c>
		slalomF(10000, SPEED_HIGH_HIGH, SLALOM_4_OFFSET_F, SLALOM_4_WALL_FL, SLALOM_4_WALL_FR);
 8006a36:	2396      	movs	r3, #150	; 0x96
 8006a38:	9300      	str	r3, [sp, #0]
 8006a3a:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8006a3e:	220a      	movs	r2, #10
 8006a40:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8006a44:	f242 7010 	movw	r0, #10000	; 0x2710
 8006a48:	f7fe fd26 	bl	8005498 <slalomF>
		slalomR(-SLALOM_4_DEGACCEL, -SLALOM_4_OMEGA, -50, SPEED_HIGH_HIGH);
 8006a4c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006a50:	f06f 0231 	mvn.w	r2, #49	; 0x31
 8006a54:	493a      	ldr	r1, [pc, #232]	; (8006b40 <slalom_R90+0x240>)
 8006a56:	483c      	ldr	r0, [pc, #240]	; (8006b48 <slalom_R90+0x248>)
 8006a58:	f7fe fdd4 	bl	8005604 <slalomR>

		if(!MF.FLAG.XDIR){
 8006a5c:	4b35      	ldr	r3, [pc, #212]	; (8006b34 <slalom_R90+0x234>)
 8006a5e:	881b      	ldrh	r3, [r3, #0]
 8006a60:	f3c3 3300 	ubfx	r3, r3, #12, #1
 8006a64:	b2db      	uxtb	r3, r3
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d104      	bne.n	8006a74 <slalom_R90+0x174>
			turn_dir(DIR_TURN_R90, 1);									//マイクロマウス内部位置情報でも左回転処理&目標角度左90度
 8006a6a:	2101      	movs	r1, #1
 8006a6c:	2001      	movs	r0, #1
 8006a6e:	f009 fa33 	bl	800fed8 <turn_dir>
 8006a72:	e003      	b.n	8006a7c <slalom_R90+0x17c>
		}else{
			turn_dir(DIR_TURN_R90_8, 3);								//マイクロマウス内部位置情報でも左回転処理&目標角度左90度
 8006a74:	2103      	movs	r1, #3
 8006a76:	2002      	movs	r0, #2
 8006a78:	f009 fa2e 	bl	800fed8 <turn_dir>
		}
		slalomB(10000, SPEED_HIGH_HIGH, SLALOM_4_OFFSET_B);
 8006a7c:	2273      	movs	r2, #115	; 0x73
 8006a7e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8006a82:	f242 7010 	movw	r0, #10000	; 0x2710
 8006a86:	f7fe fedf 	bl	8005848 <slalomB>
 8006a8a:	e041      	b.n	8006b10 <slalom_R90+0x210>
	}else if(run_mode == 5){
 8006a8c:	4b26      	ldr	r3, [pc, #152]	; (8006b28 <slalom_R90+0x228>)
 8006a8e:	781b      	ldrb	r3, [r3, #0]
 8006a90:	b2db      	uxtb	r3, r3
 8006a92:	2b05      	cmp	r3, #5
 8006a94:	d13c      	bne.n	8006b10 <slalom_R90+0x210>
		MF2.FLAG.TEMP = 1;
 8006a96:	4a2d      	ldr	r2, [pc, #180]	; (8006b4c <slalom_R90+0x24c>)
 8006a98:	8813      	ldrh	r3, [r2, #0]
 8006a9a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006a9e:	8013      	strh	r3, [r2, #0]
		slalomF(10000, SPEED_5, SLALOM_5_OFFSET_F, SLALOM_5_WALL_FL, SLALOM_5_WALL_FR);
 8006aa0:	2378      	movs	r3, #120	; 0x78
 8006aa2:	9300      	str	r3, [sp, #0]
 8006aa4:	23f0      	movs	r3, #240	; 0xf0
 8006aa6:	2200      	movs	r2, #0
 8006aa8:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 8006aac:	f242 7010 	movw	r0, #10000	; 0x2710
 8006ab0:	f7fe fcf2 	bl	8005498 <slalomF>
		MF2.FLAG.TEMP = 0;
 8006ab4:	4a25      	ldr	r2, [pc, #148]	; (8006b4c <slalom_R90+0x24c>)
 8006ab6:	8813      	ldrh	r3, [r2, #0]
 8006ab8:	f36f 2349 	bfc	r3, #9, #1
 8006abc:	8013      	strh	r3, [r2, #0]
		slalomR(-SLALOM_5_DEGACCEL, -SLALOM_5_OMEGA, -20, SPEED_5);
 8006abe:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
 8006ac2:	f06f 0213 	mvn.w	r2, #19
 8006ac6:	4922      	ldr	r1, [pc, #136]	; (8006b50 <slalom_R90+0x250>)
 8006ac8:	4822      	ldr	r0, [pc, #136]	; (8006b54 <slalom_R90+0x254>)
 8006aca:	f7fe fd9b 	bl	8005604 <slalomR>

		if(!MF.FLAG.XDIR){
 8006ace:	4b19      	ldr	r3, [pc, #100]	; (8006b34 <slalom_R90+0x234>)
 8006ad0:	881b      	ldrh	r3, [r3, #0]
 8006ad2:	f3c3 3300 	ubfx	r3, r3, #12, #1
 8006ad6:	b2db      	uxtb	r3, r3
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d104      	bne.n	8006ae6 <slalom_R90+0x1e6>
			turn_dir(DIR_TURN_R90, 1);									//マイクロマウス内部位置情報でも左回転処理&目標角度左90度
 8006adc:	2101      	movs	r1, #1
 8006ade:	2001      	movs	r0, #1
 8006ae0:	f009 f9fa 	bl	800fed8 <turn_dir>
 8006ae4:	e003      	b.n	8006aee <slalom_R90+0x1ee>
		}else{
			turn_dir(DIR_TURN_R90_8, 3);								//マイクロマウス内部位置情報でも左回転処理&目標角度左90度
 8006ae6:	2103      	movs	r1, #3
 8006ae8:	2002      	movs	r0, #2
 8006aea:	f009 f9f5 	bl	800fed8 <turn_dir>
		}
		MF2.FLAG.TEMP = 1;
 8006aee:	4a17      	ldr	r2, [pc, #92]	; (8006b4c <slalom_R90+0x24c>)
 8006af0:	8813      	ldrh	r3, [r2, #0]
 8006af2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006af6:	8013      	strh	r3, [r2, #0]
		slalomB(10000, SPEED_5, SLALOM_5_OFFSET_B);
 8006af8:	22a8      	movs	r2, #168	; 0xa8
 8006afa:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 8006afe:	f242 7010 	movw	r0, #10000	; 0x2710
 8006b02:	f7fe fea1 	bl	8005848 <slalomB>
		MF2.FLAG.TEMP = 0;
 8006b06:	4a11      	ldr	r2, [pc, #68]	; (8006b4c <slalom_R90+0x24c>)
 8006b08:	8813      	ldrh	r3, [r2, #0]
 8006b0a:	f36f 2349 	bfc	r3, #9, #1
 8006b0e:	8013      	strh	r3, [r2, #0]
	}
	if(!MF.FLAG.SCND)get_wall_info();					//壁情報を取得，片壁制御の有効・無効の判断
 8006b10:	4b08      	ldr	r3, [pc, #32]	; (8006b34 <slalom_R90+0x234>)
 8006b12:	881b      	ldrh	r3, [r3, #0]
 8006b14:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8006b18:	b2db      	uxtb	r3, r3
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d101      	bne.n	8006b22 <slalom_R90+0x222>
 8006b1e:	f00a fffb 	bl	8011b18 <get_wall_info>
}
 8006b22:	bf00      	nop
 8006b24:	46bd      	mov	sp, r7
 8006b26:	bd80      	pop	{r7, pc}
 8006b28:	20000456 	.word	0x20000456
 8006b2c:	fffffdda 	.word	0xfffffdda
 8006b30:	fffff060 	.word	0xfffff060
 8006b34:	20000f68 	.word	0x20000f68
 8006b38:	fffffc7c 	.word	0xfffffc7c
 8006b3c:	ffffd120 	.word	0xffffd120
 8006b40:	fffffb50 	.word	0xfffffb50
 8006b44:	ffffa240 	.word	0xffffa240
 8006b48:	ffff8300 	.word	0xffff8300
 8006b4c:	20000f64 	.word	0x20000f64
 8006b50:	fffffaec 	.word	0xfffffaec
 8006b54:	ffff3cb0 	.word	0xffff3cb0

08006b58 <slalom_L90>:
//slalom_L90
// スラロームで右に90度回転する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void slalom_L90(void){
 8006b58:	b580      	push	{r7, lr}
 8006b5a:	b082      	sub	sp, #8
 8006b5c:	af02      	add	r7, sp, #8
	full_led_write(YELLOW);
 8006b5e:	2006      	movs	r0, #6
 8006b60:	f00b f84e 	bl	8011c00 <full_led_write>
	if(run_mode == LOW){
 8006b64:	4b89      	ldr	r3, [pc, #548]	; (8006d8c <slalom_L90+0x234>)
 8006b66:	781b      	ldrb	r3, [r3, #0]
 8006b68:	b2db      	uxtb	r3, r3
 8006b6a:	2b01      	cmp	r3, #1
 8006b6c:	d12b      	bne.n	8006bc6 <slalom_L90+0x6e>
		slalomF(10000, SPEED_LOW, SLALOM_OFFSET_F, SLALOM_WALL_FL, SLALOM_WALL_FR);
 8006b6e:	23fa      	movs	r3, #250	; 0xfa
 8006b70:	9300      	str	r3, [sp, #0]
 8006b72:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8006b76:	2212      	movs	r2, #18
 8006b78:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8006b7c:	f242 7010 	movw	r0, #10000	; 0x2710
 8006b80:	f7fe fc8a 	bl	8005498 <slalomF>
		slalomR(SLALOM_DEGACCEL, SLALOM_OMEGA, 90, SPEED_LOW);
 8006b84:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8006b88:	225a      	movs	r2, #90	; 0x5a
 8006b8a:	f240 2126 	movw	r1, #550	; 0x226
 8006b8e:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8006b92:	f7fe fd37 	bl	8005604 <slalomR>

		if(!MF.FLAG.XDIR){
 8006b96:	4b7e      	ldr	r3, [pc, #504]	; (8006d90 <slalom_L90+0x238>)
 8006b98:	881b      	ldrh	r3, [r3, #0]
 8006b9a:	f3c3 3300 	ubfx	r3, r3, #12, #1
 8006b9e:	b2db      	uxtb	r3, r3
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d104      	bne.n	8006bae <slalom_L90+0x56>
			turn_dir(DIR_TURN_L90, 1);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8006ba4:	2101      	movs	r1, #1
 8006ba6:	20ff      	movs	r0, #255	; 0xff
 8006ba8:	f009 f996 	bl	800fed8 <turn_dir>
 8006bac:	e003      	b.n	8006bb6 <slalom_L90+0x5e>
		}else{
			turn_dir(DIR_TURN_L90_8, 3);								//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8006bae:	2103      	movs	r1, #3
 8006bb0:	20fe      	movs	r0, #254	; 0xfe
 8006bb2:	f009 f991 	bl	800fed8 <turn_dir>
		}
		slalomB(10000, SPEED_LOW, SLALOM_OFFSET_B);
 8006bb6:	2219      	movs	r2, #25
 8006bb8:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8006bbc:	f242 7010 	movw	r0, #10000	; 0x2710
 8006bc0:	f7fe fe42 	bl	8005848 <slalomB>
 8006bc4:	e0d5      	b.n	8006d72 <slalom_L90+0x21a>
	}else if(run_mode == MIDDLE){
 8006bc6:	4b71      	ldr	r3, [pc, #452]	; (8006d8c <slalom_L90+0x234>)
 8006bc8:	781b      	ldrb	r3, [r3, #0]
 8006bca:	b2db      	uxtb	r3, r3
 8006bcc:	2b02      	cmp	r3, #2
 8006bce:	d12b      	bne.n	8006c28 <slalom_L90+0xd0>
		slalomF(10000, SPEED_MIDDLE, SLALOM_2_OFFSET_F, SLALOM_2_WALL_FL, SLALOM_2_WALL_FR);
 8006bd0:	23f0      	movs	r3, #240	; 0xf0
 8006bd2:	9300      	str	r3, [sp, #0]
 8006bd4:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8006bd8:	2219      	movs	r2, #25
 8006bda:	f44f 7116 	mov.w	r1, #600	; 0x258
 8006bde:	f242 7010 	movw	r0, #10000	; 0x2710
 8006be2:	f7fe fc59 	bl	8005498 <slalomF>
		slalomR(SLALOM_2_DEGACCEL, SLALOM_2_OMEGA, 85, SPEED_MIDDLE);
 8006be6:	f44f 7316 	mov.w	r3, #600	; 0x258
 8006bea:	2255      	movs	r2, #85	; 0x55
 8006bec:	f44f 7161 	mov.w	r1, #900	; 0x384
 8006bf0:	f642 60e0 	movw	r0, #12000	; 0x2ee0
 8006bf4:	f7fe fd06 	bl	8005604 <slalomR>

		if(!MF.FLAG.XDIR){
 8006bf8:	4b65      	ldr	r3, [pc, #404]	; (8006d90 <slalom_L90+0x238>)
 8006bfa:	881b      	ldrh	r3, [r3, #0]
 8006bfc:	f3c3 3300 	ubfx	r3, r3, #12, #1
 8006c00:	b2db      	uxtb	r3, r3
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d104      	bne.n	8006c10 <slalom_L90+0xb8>
			turn_dir(DIR_TURN_L90, 1);									//マイクロマウス内部位置情報でも左回転処理&目標角度左90度
 8006c06:	2101      	movs	r1, #1
 8006c08:	20ff      	movs	r0, #255	; 0xff
 8006c0a:	f009 f965 	bl	800fed8 <turn_dir>
 8006c0e:	e003      	b.n	8006c18 <slalom_L90+0xc0>
		}else{
			turn_dir(DIR_TURN_L90_8, 3);								//マイクロマウス内部位置情報でも左回転処理&目標角度左90度
 8006c10:	2103      	movs	r1, #3
 8006c12:	20fe      	movs	r0, #254	; 0xfe
 8006c14:	f009 f960 	bl	800fed8 <turn_dir>
		}
		slalomB(10000, SPEED_MIDDLE, SLALOM_2_OFFSET_B);
 8006c18:	223c      	movs	r2, #60	; 0x3c
 8006c1a:	f44f 7116 	mov.w	r1, #600	; 0x258
 8006c1e:	f242 7010 	movw	r0, #10000	; 0x2710
 8006c22:	f7fe fe11 	bl	8005848 <slalomB>
 8006c26:	e0a4      	b.n	8006d72 <slalom_L90+0x21a>
	}else if(run_mode == HIGH){
 8006c28:	4b58      	ldr	r3, [pc, #352]	; (8006d8c <slalom_L90+0x234>)
 8006c2a:	781b      	ldrb	r3, [r3, #0]
 8006c2c:	b2db      	uxtb	r3, r3
 8006c2e:	2b03      	cmp	r3, #3
 8006c30:	d12b      	bne.n	8006c8a <slalom_L90+0x132>
		slalomF(10000, SPEED_HIGH, SLALOM_3_OFFSET_F, SLALOM_3_WALL_FL, SLALOM_3_WALL_FR);
 8006c32:	23b4      	movs	r3, #180	; 0xb4
 8006c34:	9300      	str	r3, [sp, #0]
 8006c36:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8006c3a:	2219      	movs	r2, #25
 8006c3c:	f44f 7148 	mov.w	r1, #800	; 0x320
 8006c40:	f242 7010 	movw	r0, #10000	; 0x2710
 8006c44:	f7fe fc28 	bl	8005498 <slalomF>
		slalomR(SLALOM_3_DEGACCEL, SLALOM_3_OMEGA, 70, SPEED_HIGH);
 8006c48:	f44f 7348 	mov.w	r3, #800	; 0x320
 8006c4c:	2246      	movs	r2, #70	; 0x46
 8006c4e:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 8006c52:	f645 50c0 	movw	r0, #24000	; 0x5dc0
 8006c56:	f7fe fcd5 	bl	8005604 <slalomR>

		if(!MF.FLAG.XDIR){
 8006c5a:	4b4d      	ldr	r3, [pc, #308]	; (8006d90 <slalom_L90+0x238>)
 8006c5c:	881b      	ldrh	r3, [r3, #0]
 8006c5e:	f3c3 3300 	ubfx	r3, r3, #12, #1
 8006c62:	b2db      	uxtb	r3, r3
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d104      	bne.n	8006c72 <slalom_L90+0x11a>
			turn_dir(DIR_TURN_L90, 1);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8006c68:	2101      	movs	r1, #1
 8006c6a:	20ff      	movs	r0, #255	; 0xff
 8006c6c:	f009 f934 	bl	800fed8 <turn_dir>
 8006c70:	e003      	b.n	8006c7a <slalom_L90+0x122>
		}else{
			turn_dir(DIR_TURN_L90_8, 3);								//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8006c72:	2103      	movs	r1, #3
 8006c74:	20fe      	movs	r0, #254	; 0xfe
 8006c76:	f009 f92f 	bl	800fed8 <turn_dir>
		}
		slalomB(10000, SPEED_HIGH, SLALOM_3_OFFSET_B);
 8006c7a:	225a      	movs	r2, #90	; 0x5a
 8006c7c:	f44f 7148 	mov.w	r1, #800	; 0x320
 8006c80:	f242 7010 	movw	r0, #10000	; 0x2710
 8006c84:	f7fe fde0 	bl	8005848 <slalomB>
 8006c88:	e073      	b.n	8006d72 <slalom_L90+0x21a>
	}else if(run_mode == HIGH_HIGH){
 8006c8a:	4b40      	ldr	r3, [pc, #256]	; (8006d8c <slalom_L90+0x234>)
 8006c8c:	781b      	ldrb	r3, [r3, #0]
 8006c8e:	b2db      	uxtb	r3, r3
 8006c90:	2b04      	cmp	r3, #4
 8006c92:	d12b      	bne.n	8006cec <slalom_L90+0x194>
		slalomF(10000, SPEED_HIGH_HIGH, SLALOM_4_OFFSET_F, SLALOM_4_WALL_FL, SLALOM_4_WALL_FR);
 8006c94:	2396      	movs	r3, #150	; 0x96
 8006c96:	9300      	str	r3, [sp, #0]
 8006c98:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8006c9c:	220a      	movs	r2, #10
 8006c9e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8006ca2:	f242 7010 	movw	r0, #10000	; 0x2710
 8006ca6:	f7fe fbf7 	bl	8005498 <slalomF>
		slalomR(SLALOM_4_DEGACCEL, SLALOM_4_OMEGA, 50, SPEED_HIGH_HIGH);
 8006caa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006cae:	2232      	movs	r2, #50	; 0x32
 8006cb0:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 8006cb4:	f44f 40fa 	mov.w	r0, #32000	; 0x7d00
 8006cb8:	f7fe fca4 	bl	8005604 <slalomR>

		if(!MF.FLAG.XDIR){
 8006cbc:	4b34      	ldr	r3, [pc, #208]	; (8006d90 <slalom_L90+0x238>)
 8006cbe:	881b      	ldrh	r3, [r3, #0]
 8006cc0:	f3c3 3300 	ubfx	r3, r3, #12, #1
 8006cc4:	b2db      	uxtb	r3, r3
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d104      	bne.n	8006cd4 <slalom_L90+0x17c>
			turn_dir(DIR_TURN_L90, 1);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8006cca:	2101      	movs	r1, #1
 8006ccc:	20ff      	movs	r0, #255	; 0xff
 8006cce:	f009 f903 	bl	800fed8 <turn_dir>
 8006cd2:	e003      	b.n	8006cdc <slalom_L90+0x184>
		}else{
			turn_dir(DIR_TURN_L90_8, 3);								//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8006cd4:	2103      	movs	r1, #3
 8006cd6:	20fe      	movs	r0, #254	; 0xfe
 8006cd8:	f009 f8fe 	bl	800fed8 <turn_dir>
		}
		slalomB(10000, SPEED_HIGH_HIGH, SLALOM_4_OFFSET_B);
 8006cdc:	2273      	movs	r2, #115	; 0x73
 8006cde:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8006ce2:	f242 7010 	movw	r0, #10000	; 0x2710
 8006ce6:	f7fe fdaf 	bl	8005848 <slalomB>
 8006cea:	e042      	b.n	8006d72 <slalom_L90+0x21a>
	}else if(run_mode == 5){
 8006cec:	4b27      	ldr	r3, [pc, #156]	; (8006d8c <slalom_L90+0x234>)
 8006cee:	781b      	ldrb	r3, [r3, #0]
 8006cf0:	b2db      	uxtb	r3, r3
 8006cf2:	2b05      	cmp	r3, #5
 8006cf4:	d13d      	bne.n	8006d72 <slalom_L90+0x21a>
		MF2.FLAG.TEMP = 1;
 8006cf6:	4a27      	ldr	r2, [pc, #156]	; (8006d94 <slalom_L90+0x23c>)
 8006cf8:	8813      	ldrh	r3, [r2, #0]
 8006cfa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006cfe:	8013      	strh	r3, [r2, #0]
		slalomF(10000, SPEED_5, SLALOM_5_OFFSET_F, SLALOM_5_WALL_FL, SLALOM_5_WALL_FR);
 8006d00:	2378      	movs	r3, #120	; 0x78
 8006d02:	9300      	str	r3, [sp, #0]
 8006d04:	23f0      	movs	r3, #240	; 0xf0
 8006d06:	2200      	movs	r2, #0
 8006d08:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 8006d0c:	f242 7010 	movw	r0, #10000	; 0x2710
 8006d10:	f7fe fbc2 	bl	8005498 <slalomF>
		MF2.FLAG.TEMP = 0;
 8006d14:	4a1f      	ldr	r2, [pc, #124]	; (8006d94 <slalom_L90+0x23c>)
 8006d16:	8813      	ldrh	r3, [r2, #0]
 8006d18:	f36f 2349 	bfc	r3, #9, #1
 8006d1c:	8013      	strh	r3, [r2, #0]
		slalomR(SLALOM_5_DEGACCEL, SLALOM_5_OMEGA, 20, SPEED_5);
 8006d1e:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
 8006d22:	2214      	movs	r2, #20
 8006d24:	f240 5114 	movw	r1, #1300	; 0x514
 8006d28:	f24c 3050 	movw	r0, #50000	; 0xc350
 8006d2c:	f7fe fc6a 	bl	8005604 <slalomR>

		if(!MF.FLAG.XDIR){
 8006d30:	4b17      	ldr	r3, [pc, #92]	; (8006d90 <slalom_L90+0x238>)
 8006d32:	881b      	ldrh	r3, [r3, #0]
 8006d34:	f3c3 3300 	ubfx	r3, r3, #12, #1
 8006d38:	b2db      	uxtb	r3, r3
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d104      	bne.n	8006d48 <slalom_L90+0x1f0>
			turn_dir(DIR_TURN_L90, 1);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8006d3e:	2101      	movs	r1, #1
 8006d40:	20ff      	movs	r0, #255	; 0xff
 8006d42:	f009 f8c9 	bl	800fed8 <turn_dir>
 8006d46:	e003      	b.n	8006d50 <slalom_L90+0x1f8>
		}else{
			turn_dir(DIR_TURN_L90_8, 3);								//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8006d48:	2103      	movs	r1, #3
 8006d4a:	20fe      	movs	r0, #254	; 0xfe
 8006d4c:	f009 f8c4 	bl	800fed8 <turn_dir>
		}
		MF2.FLAG.TEMP = 1;
 8006d50:	4a10      	ldr	r2, [pc, #64]	; (8006d94 <slalom_L90+0x23c>)
 8006d52:	8813      	ldrh	r3, [r2, #0]
 8006d54:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006d58:	8013      	strh	r3, [r2, #0]
		slalomB(10000, SPEED_5, SLALOM_5_OFFSET_B);
 8006d5a:	22a8      	movs	r2, #168	; 0xa8
 8006d5c:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 8006d60:	f242 7010 	movw	r0, #10000	; 0x2710
 8006d64:	f7fe fd70 	bl	8005848 <slalomB>
		MF2.FLAG.TEMP = 0;
 8006d68:	4a0a      	ldr	r2, [pc, #40]	; (8006d94 <slalom_L90+0x23c>)
 8006d6a:	8813      	ldrh	r3, [r2, #0]
 8006d6c:	f36f 2349 	bfc	r3, #9, #1
 8006d70:	8013      	strh	r3, [r2, #0]
	}
	if(!MF.FLAG.SCND)get_wall_info();					//壁情報を取得，片壁制御の有効・無効の判断
 8006d72:	4b07      	ldr	r3, [pc, #28]	; (8006d90 <slalom_L90+0x238>)
 8006d74:	881b      	ldrh	r3, [r3, #0]
 8006d76:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8006d7a:	b2db      	uxtb	r3, r3
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d101      	bne.n	8006d84 <slalom_L90+0x22c>
 8006d80:	f00a feca 	bl	8011b18 <get_wall_info>
}
 8006d84:	bf00      	nop
 8006d86:	46bd      	mov	sp, r7
 8006d88:	bd80      	pop	{r7, pc}
 8006d8a:	bf00      	nop
 8006d8c:	20000456 	.word	0x20000456
 8006d90:	20000f68 	.word	0x20000f68
 8006d94:	20000f64 	.word	0x20000f64

08006d98 <Lslalom_R90>:
//Lslalom_R90
// スラロームで右に90度回転する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void Lslalom_R90(void){
 8006d98:	b580      	push	{r7, lr}
 8006d9a:	b082      	sub	sp, #8
 8006d9c:	af02      	add	r7, sp, #8
	full_led_write(PURPLE);
 8006d9e:	2005      	movs	r0, #5
 8006da0:	f00a ff2e 	bl	8011c00 <full_led_write>
	if(run_mode == LOW){
 8006da4:	4b8e      	ldr	r3, [pc, #568]	; (8006fe0 <Lslalom_R90+0x248>)
 8006da6:	781b      	ldrb	r3, [r3, #0]
 8006da8:	b2db      	uxtb	r3, r3
 8006daa:	2b01      	cmp	r3, #1
 8006dac:	d12a      	bne.n	8006e04 <Lslalom_R90+0x6c>
		slalomF(10000, SPEED_LOW, LSLALOM_OFFSET_F, LSLALOM_WALL_FL, LSLALOM_WALL_FR);
 8006dae:	2364      	movs	r3, #100	; 0x64
 8006db0:	9300      	str	r3, [sp, #0]
 8006db2:	23c8      	movs	r3, #200	; 0xc8
 8006db4:	222d      	movs	r2, #45	; 0x2d
 8006db6:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8006dba:	f242 7010 	movw	r0, #10000	; 0x2710
 8006dbe:	f7fe fb6b 	bl	8005498 <slalomF>
		slalomR(-LSLALOM_DEGACCEL, -LSLALOM_OMEGA, -90, SPEED_LOW);
 8006dc2:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8006dc6:	f06f 0259 	mvn.w	r2, #89	; 0x59
 8006dca:	f06f 01c7 	mvn.w	r1, #199	; 0xc7
 8006dce:	4885      	ldr	r0, [pc, #532]	; (8006fe4 <Lslalom_R90+0x24c>)
 8006dd0:	f7fe fc18 	bl	8005604 <slalomR>

		if(!MF.FLAG.XDIR){
 8006dd4:	4b84      	ldr	r3, [pc, #528]	; (8006fe8 <Lslalom_R90+0x250>)
 8006dd6:	881b      	ldrh	r3, [r3, #0]
 8006dd8:	f3c3 3300 	ubfx	r3, r3, #12, #1
 8006ddc:	b2db      	uxtb	r3, r3
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d104      	bne.n	8006dec <Lslalom_R90+0x54>
			turn_dir(DIR_TURN_R90, 1);										//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8006de2:	2101      	movs	r1, #1
 8006de4:	2001      	movs	r0, #1
 8006de6:	f009 f877 	bl	800fed8 <turn_dir>
 8006dea:	e003      	b.n	8006df4 <Lslalom_R90+0x5c>
		}else{
			turn_dir(DIR_TURN_R90_8, 3);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8006dec:	2103      	movs	r1, #3
 8006dee:	2002      	movs	r0, #2
 8006df0:	f009 f872 	bl	800fed8 <turn_dir>
		}
		slalomB(10000, SPEED_LOW, LSLALOM_OFFSET_B);
 8006df4:	2235      	movs	r2, #53	; 0x35
 8006df6:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8006dfa:	f242 7010 	movw	r0, #10000	; 0x2710
 8006dfe:	f7fe fd23 	bl	8005848 <slalomB>
		}else{
			turn_dir(DIR_TURN_R90_8, 3);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
		}
		slalomB(10000, SPEED_6, LSLALOM_6_OFFSET_B);
	}
}
 8006e02:	e0ea      	b.n	8006fda <Lslalom_R90+0x242>
	}else if(run_mode == MIDDLE){
 8006e04:	4b76      	ldr	r3, [pc, #472]	; (8006fe0 <Lslalom_R90+0x248>)
 8006e06:	781b      	ldrb	r3, [r3, #0]
 8006e08:	b2db      	uxtb	r3, r3
 8006e0a:	2b02      	cmp	r3, #2
 8006e0c:	d129      	bne.n	8006e62 <Lslalom_R90+0xca>
		slalomF(10000, SPEED_MIDDLE, LSLALOM_2_OFFSET_F, LSLALOM_2_WALL_FL, LSLALOM_2_WALL_FR);
 8006e0e:	2378      	movs	r3, #120	; 0x78
 8006e10:	9300      	str	r3, [sp, #0]
 8006e12:	23f0      	movs	r3, #240	; 0xf0
 8006e14:	223c      	movs	r2, #60	; 0x3c
 8006e16:	f44f 7116 	mov.w	r1, #600	; 0x258
 8006e1a:	f242 7010 	movw	r0, #10000	; 0x2710
 8006e1e:	f7fe fb3b 	bl	8005498 <slalomF>
		slalomR(-LSLALOM_2_DEGACCEL, -LSLALOM_2_OMEGA, -90, SPEED_MIDDLE);
 8006e22:	f44f 7316 	mov.w	r3, #600	; 0x258
 8006e26:	f06f 0259 	mvn.w	r2, #89	; 0x59
 8006e2a:	4970      	ldr	r1, [pc, #448]	; (8006fec <Lslalom_R90+0x254>)
 8006e2c:	4870      	ldr	r0, [pc, #448]	; (8006ff0 <Lslalom_R90+0x258>)
 8006e2e:	f7fe fbe9 	bl	8005604 <slalomR>
		if(!MF.FLAG.XDIR){
 8006e32:	4b6d      	ldr	r3, [pc, #436]	; (8006fe8 <Lslalom_R90+0x250>)
 8006e34:	881b      	ldrh	r3, [r3, #0]
 8006e36:	f3c3 3300 	ubfx	r3, r3, #12, #1
 8006e3a:	b2db      	uxtb	r3, r3
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d104      	bne.n	8006e4a <Lslalom_R90+0xb2>
			turn_dir(DIR_TURN_R90, 1);										//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8006e40:	2101      	movs	r1, #1
 8006e42:	2001      	movs	r0, #1
 8006e44:	f009 f848 	bl	800fed8 <turn_dir>
 8006e48:	e003      	b.n	8006e52 <Lslalom_R90+0xba>
			turn_dir(DIR_TURN_R90_8, 3);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8006e4a:	2103      	movs	r1, #3
 8006e4c:	2002      	movs	r0, #2
 8006e4e:	f009 f843 	bl	800fed8 <turn_dir>
		slalomB(10000, SPEED_MIDDLE, LSLALOM_2_OFFSET_B);
 8006e52:	2258      	movs	r2, #88	; 0x58
 8006e54:	f44f 7116 	mov.w	r1, #600	; 0x258
 8006e58:	f242 7010 	movw	r0, #10000	; 0x2710
 8006e5c:	f7fe fcf4 	bl	8005848 <slalomB>
}
 8006e60:	e0bb      	b.n	8006fda <Lslalom_R90+0x242>
	}else if(run_mode == HIGH){
 8006e62:	4b5f      	ldr	r3, [pc, #380]	; (8006fe0 <Lslalom_R90+0x248>)
 8006e64:	781b      	ldrb	r3, [r3, #0]
 8006e66:	b2db      	uxtb	r3, r3
 8006e68:	2b03      	cmp	r3, #3
 8006e6a:	d129      	bne.n	8006ec0 <Lslalom_R90+0x128>
		slalomF(10000, SPEED_HIGH, LSLALOM_3_OFFSET_F, LSLALOM_3_WALL_FL, LSLALOM_3_WALL_FR);
 8006e6c:	2378      	movs	r3, #120	; 0x78
 8006e6e:	9300      	str	r3, [sp, #0]
 8006e70:	23f0      	movs	r3, #240	; 0xf0
 8006e72:	222b      	movs	r2, #43	; 0x2b
 8006e74:	f44f 7148 	mov.w	r1, #800	; 0x320
 8006e78:	f242 7010 	movw	r0, #10000	; 0x2710
 8006e7c:	f7fe fb0c 	bl	8005498 <slalomF>
		slalomR(-LSLALOM_3_DEGACCEL, -LSLALOM_3_OMEGA, -90, SPEED_HIGH);
 8006e80:	f44f 7348 	mov.w	r3, #800	; 0x320
 8006e84:	f06f 0259 	mvn.w	r2, #89	; 0x59
 8006e88:	495a      	ldr	r1, [pc, #360]	; (8006ff4 <Lslalom_R90+0x25c>)
 8006e8a:	485b      	ldr	r0, [pc, #364]	; (8006ff8 <Lslalom_R90+0x260>)
 8006e8c:	f7fe fbba 	bl	8005604 <slalomR>
		if(!MF.FLAG.XDIR){
 8006e90:	4b55      	ldr	r3, [pc, #340]	; (8006fe8 <Lslalom_R90+0x250>)
 8006e92:	881b      	ldrh	r3, [r3, #0]
 8006e94:	f3c3 3300 	ubfx	r3, r3, #12, #1
 8006e98:	b2db      	uxtb	r3, r3
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d104      	bne.n	8006ea8 <Lslalom_R90+0x110>
			turn_dir(DIR_TURN_R90, 1);										//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8006e9e:	2101      	movs	r1, #1
 8006ea0:	2001      	movs	r0, #1
 8006ea2:	f009 f819 	bl	800fed8 <turn_dir>
 8006ea6:	e003      	b.n	8006eb0 <Lslalom_R90+0x118>
			turn_dir(DIR_TURN_R90_8, 3);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8006ea8:	2103      	movs	r1, #3
 8006eaa:	2002      	movs	r0, #2
 8006eac:	f009 f814 	bl	800fed8 <turn_dir>
		slalomB(10000, SPEED_HIGH, LSLALOM_3_OFFSET_B);
 8006eb0:	225a      	movs	r2, #90	; 0x5a
 8006eb2:	f44f 7148 	mov.w	r1, #800	; 0x320
 8006eb6:	f242 7010 	movw	r0, #10000	; 0x2710
 8006eba:	f7fe fcc5 	bl	8005848 <slalomB>
}
 8006ebe:	e08c      	b.n	8006fda <Lslalom_R90+0x242>
	}else if(run_mode == HIGH_HIGH){
 8006ec0:	4b47      	ldr	r3, [pc, #284]	; (8006fe0 <Lslalom_R90+0x248>)
 8006ec2:	781b      	ldrb	r3, [r3, #0]
 8006ec4:	b2db      	uxtb	r3, r3
 8006ec6:	2b04      	cmp	r3, #4
 8006ec8:	d12a      	bne.n	8006f20 <Lslalom_R90+0x188>
		slalomF(10000, SPEED_HIGH_HIGH, LSLALOM_4_OFFSET_F, LSLALOM_4_WALL_FL, LSLALOM_4_WALL_FR);
 8006eca:	238c      	movs	r3, #140	; 0x8c
 8006ecc:	9300      	str	r3, [sp, #0]
 8006ece:	f44f 738c 	mov.w	r3, #280	; 0x118
 8006ed2:	2232      	movs	r2, #50	; 0x32
 8006ed4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8006ed8:	f242 7010 	movw	r0, #10000	; 0x2710
 8006edc:	f7fe fadc 	bl	8005498 <slalomF>
		slalomR(-LSLALOM_4_DEGACCEL, -LSLALOM_4_OMEGA, -85, SPEED_HIGH_HIGH);
 8006ee0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006ee4:	f06f 0254 	mvn.w	r2, #84	; 0x54
 8006ee8:	4944      	ldr	r1, [pc, #272]	; (8006ffc <Lslalom_R90+0x264>)
 8006eea:	4845      	ldr	r0, [pc, #276]	; (8007000 <Lslalom_R90+0x268>)
 8006eec:	f7fe fb8a 	bl	8005604 <slalomR>
		if(!MF.FLAG.XDIR){
 8006ef0:	4b3d      	ldr	r3, [pc, #244]	; (8006fe8 <Lslalom_R90+0x250>)
 8006ef2:	881b      	ldrh	r3, [r3, #0]
 8006ef4:	f3c3 3300 	ubfx	r3, r3, #12, #1
 8006ef8:	b2db      	uxtb	r3, r3
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d104      	bne.n	8006f08 <Lslalom_R90+0x170>
			turn_dir(DIR_TURN_R90, 1);										//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8006efe:	2101      	movs	r1, #1
 8006f00:	2001      	movs	r0, #1
 8006f02:	f008 ffe9 	bl	800fed8 <turn_dir>
 8006f06:	e003      	b.n	8006f10 <Lslalom_R90+0x178>
			turn_dir(DIR_TURN_R90_8, 3);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8006f08:	2103      	movs	r1, #3
 8006f0a:	2002      	movs	r0, #2
 8006f0c:	f008 ffe4 	bl	800fed8 <turn_dir>
		slalomB(10000, SPEED_HIGH_HIGH, LSLALOM_4_OFFSET_B);
 8006f10:	226e      	movs	r2, #110	; 0x6e
 8006f12:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8006f16:	f242 7010 	movw	r0, #10000	; 0x2710
 8006f1a:	f7fe fc95 	bl	8005848 <slalomB>
}
 8006f1e:	e05c      	b.n	8006fda <Lslalom_R90+0x242>
	}else if(run_mode == 5){
 8006f20:	4b2f      	ldr	r3, [pc, #188]	; (8006fe0 <Lslalom_R90+0x248>)
 8006f22:	781b      	ldrb	r3, [r3, #0]
 8006f24:	b2db      	uxtb	r3, r3
 8006f26:	2b05      	cmp	r3, #5
 8006f28:	d129      	bne.n	8006f7e <Lslalom_R90+0x1e6>
		slalomF(10000, SPEED_5, LSLALOM_5_OFFSET_F, LSLALOM_5_WALL_FL, LSLALOM_5_WALL_FR);
 8006f2a:	2378      	movs	r3, #120	; 0x78
 8006f2c:	9300      	str	r3, [sp, #0]
 8006f2e:	23f0      	movs	r3, #240	; 0xf0
 8006f30:	2211      	movs	r2, #17
 8006f32:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 8006f36:	f242 7010 	movw	r0, #10000	; 0x2710
 8006f3a:	f7fe faad 	bl	8005498 <slalomF>
		slalomR(-LSLALOM_5_DEGACCEL, -LSLALOM_5_OMEGA, -80, SPEED_5);
 8006f3e:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
 8006f42:	f06f 024f 	mvn.w	r2, #79	; 0x4f
 8006f46:	492d      	ldr	r1, [pc, #180]	; (8006ffc <Lslalom_R90+0x264>)
 8006f48:	482d      	ldr	r0, [pc, #180]	; (8007000 <Lslalom_R90+0x268>)
 8006f4a:	f7fe fb5b 	bl	8005604 <slalomR>
		if(!MF.FLAG.XDIR){
 8006f4e:	4b26      	ldr	r3, [pc, #152]	; (8006fe8 <Lslalom_R90+0x250>)
 8006f50:	881b      	ldrh	r3, [r3, #0]
 8006f52:	f3c3 3300 	ubfx	r3, r3, #12, #1
 8006f56:	b2db      	uxtb	r3, r3
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d104      	bne.n	8006f66 <Lslalom_R90+0x1ce>
			turn_dir(DIR_TURN_R90, 1);										//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8006f5c:	2101      	movs	r1, #1
 8006f5e:	2001      	movs	r0, #1
 8006f60:	f008 ffba 	bl	800fed8 <turn_dir>
 8006f64:	e003      	b.n	8006f6e <Lslalom_R90+0x1d6>
			turn_dir(DIR_TURN_R90_8, 3);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8006f66:	2103      	movs	r1, #3
 8006f68:	2002      	movs	r0, #2
 8006f6a:	f008 ffb5 	bl	800fed8 <turn_dir>
		slalomB(10000, SPEED_5, LSLALOM_5_OFFSET_B);
 8006f6e:	2278      	movs	r2, #120	; 0x78
 8006f70:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 8006f74:	f242 7010 	movw	r0, #10000	; 0x2710
 8006f78:	f7fe fc66 	bl	8005848 <slalomB>
}
 8006f7c:	e02d      	b.n	8006fda <Lslalom_R90+0x242>
	}else if(run_mode == 6){
 8006f7e:	4b18      	ldr	r3, [pc, #96]	; (8006fe0 <Lslalom_R90+0x248>)
 8006f80:	781b      	ldrb	r3, [r3, #0]
 8006f82:	b2db      	uxtb	r3, r3
 8006f84:	2b06      	cmp	r3, #6
 8006f86:	d128      	bne.n	8006fda <Lslalom_R90+0x242>
		slalomF(10000, SPEED_6, LSLALOM_6_OFFSET_F, LSLALOM_6_WALL_FL, LSLALOM_6_WALL_FR);
 8006f88:	2378      	movs	r3, #120	; 0x78
 8006f8a:	9300      	str	r3, [sp, #0]
 8006f8c:	23f0      	movs	r3, #240	; 0xf0
 8006f8e:	2200      	movs	r2, #0
 8006f90:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8006f94:	f242 7010 	movw	r0, #10000	; 0x2710
 8006f98:	f7fe fa7e 	bl	8005498 <slalomF>
		slalomR(-LSLALOM_6_DEGACCEL, -LSLALOM_6_OMEGA, -70, SPEED_6);
 8006f9c:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8006fa0:	f06f 0245 	mvn.w	r2, #69	; 0x45
 8006fa4:	4915      	ldr	r1, [pc, #84]	; (8006ffc <Lslalom_R90+0x264>)
 8006fa6:	4817      	ldr	r0, [pc, #92]	; (8007004 <Lslalom_R90+0x26c>)
 8006fa8:	f7fe fb2c 	bl	8005604 <slalomR>
		if(!MF.FLAG.XDIR){
 8006fac:	4b0e      	ldr	r3, [pc, #56]	; (8006fe8 <Lslalom_R90+0x250>)
 8006fae:	881b      	ldrh	r3, [r3, #0]
 8006fb0:	f3c3 3300 	ubfx	r3, r3, #12, #1
 8006fb4:	b2db      	uxtb	r3, r3
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d104      	bne.n	8006fc4 <Lslalom_R90+0x22c>
			turn_dir(DIR_TURN_R90, 1);										//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8006fba:	2101      	movs	r1, #1
 8006fbc:	2001      	movs	r0, #1
 8006fbe:	f008 ff8b 	bl	800fed8 <turn_dir>
 8006fc2:	e003      	b.n	8006fcc <Lslalom_R90+0x234>
			turn_dir(DIR_TURN_R90_8, 3);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8006fc4:	2103      	movs	r1, #3
 8006fc6:	2002      	movs	r0, #2
 8006fc8:	f008 ff86 	bl	800fed8 <turn_dir>
		slalomB(10000, SPEED_6, LSLALOM_6_OFFSET_B);
 8006fcc:	2278      	movs	r2, #120	; 0x78
 8006fce:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8006fd2:	f242 7010 	movw	r0, #10000	; 0x2710
 8006fd6:	f7fe fc37 	bl	8005848 <slalomB>
}
 8006fda:	bf00      	nop
 8006fdc:	46bd      	mov	sp, r7
 8006fde:	bd80      	pop	{r7, pc}
 8006fe0:	20000456 	.word	0x20000456
 8006fe4:	fffff830 	.word	0xfffff830
 8006fe8:	20000f68 	.word	0x20000f68
 8006fec:	fffffe70 	.word	0xfffffe70
 8006ff0:	fffff060 	.word	0xfffff060
 8006ff4:	fffffda8 	.word	0xfffffda8
 8006ff8:	ffffee6c 	.word	0xffffee6c
 8006ffc:	fffffce0 	.word	0xfffffce0
 8007000:	ffffe0c0 	.word	0xffffe0c0
 8007004:	ffff8300 	.word	0xffff8300

08007008 <Lslalom_L90>:
//Lslalom_L90
// 大回りスラロームで右に90度回転する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void Lslalom_L90(void){
 8007008:	b580      	push	{r7, lr}
 800700a:	b082      	sub	sp, #8
 800700c:	af02      	add	r7, sp, #8
	full_led_write(YELLOW);
 800700e:	2006      	movs	r0, #6
 8007010:	f00a fdf6 	bl	8011c00 <full_led_write>
	if(run_mode == LOW){
 8007014:	4b90      	ldr	r3, [pc, #576]	; (8007258 <Lslalom_L90+0x250>)
 8007016:	781b      	ldrb	r3, [r3, #0]
 8007018:	b2db      	uxtb	r3, r3
 800701a:	2b01      	cmp	r3, #1
 800701c:	d129      	bne.n	8007072 <Lslalom_L90+0x6a>
		slalomF(10000, SPEED_LOW, LSLALOM_OFFSET_F, LSLALOM_WALL_FL, LSLALOM_WALL_FR);
 800701e:	2364      	movs	r3, #100	; 0x64
 8007020:	9300      	str	r3, [sp, #0]
 8007022:	23c8      	movs	r3, #200	; 0xc8
 8007024:	222d      	movs	r2, #45	; 0x2d
 8007026:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800702a:	f242 7010 	movw	r0, #10000	; 0x2710
 800702e:	f7fe fa33 	bl	8005498 <slalomF>
		slalomR(LSLALOM_DEGACCEL, LSLALOM_OMEGA, 90, SPEED_LOW);
 8007032:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8007036:	225a      	movs	r2, #90	; 0x5a
 8007038:	21c8      	movs	r1, #200	; 0xc8
 800703a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800703e:	f7fe fae1 	bl	8005604 <slalomR>

		if(!MF.FLAG.XDIR){
 8007042:	4b86      	ldr	r3, [pc, #536]	; (800725c <Lslalom_L90+0x254>)
 8007044:	881b      	ldrh	r3, [r3, #0]
 8007046:	f3c3 3300 	ubfx	r3, r3, #12, #1
 800704a:	b2db      	uxtb	r3, r3
 800704c:	2b00      	cmp	r3, #0
 800704e:	d104      	bne.n	800705a <Lslalom_L90+0x52>
			turn_dir(DIR_TURN_L90, 1);										//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8007050:	2101      	movs	r1, #1
 8007052:	20ff      	movs	r0, #255	; 0xff
 8007054:	f008 ff40 	bl	800fed8 <turn_dir>
 8007058:	e003      	b.n	8007062 <Lslalom_L90+0x5a>
		}else{
			turn_dir(DIR_TURN_L90_8, 3);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 800705a:	2103      	movs	r1, #3
 800705c:	20fe      	movs	r0, #254	; 0xfe
 800705e:	f008 ff3b 	bl	800fed8 <turn_dir>
		}
		slalomB(10000, SPEED_LOW, LSLALOM_OFFSET_B);
 8007062:	2235      	movs	r2, #53	; 0x35
 8007064:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8007068:	f242 7010 	movw	r0, #10000	; 0x2710
 800706c:	f7fe fbec 	bl	8005848 <slalomB>
		}else{
			turn_dir(DIR_TURN_L90_8, 3);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
		}
		slalomB(10000, SPEED_6, LSLALOM_6_OFFSET_B);
	}
}
 8007070:	e0ef      	b.n	8007252 <Lslalom_L90+0x24a>
	}else if(run_mode == MIDDLE){
 8007072:	4b79      	ldr	r3, [pc, #484]	; (8007258 <Lslalom_L90+0x250>)
 8007074:	781b      	ldrb	r3, [r3, #0]
 8007076:	b2db      	uxtb	r3, r3
 8007078:	2b02      	cmp	r3, #2
 800707a:	d12a      	bne.n	80070d2 <Lslalom_L90+0xca>
		slalomF(10000, SPEED_MIDDLE, LSLALOM_2_OFFSET_F, LSLALOM_2_WALL_FL, LSLALOM_2_WALL_FR);
 800707c:	2378      	movs	r3, #120	; 0x78
 800707e:	9300      	str	r3, [sp, #0]
 8007080:	23f0      	movs	r3, #240	; 0xf0
 8007082:	223c      	movs	r2, #60	; 0x3c
 8007084:	f44f 7116 	mov.w	r1, #600	; 0x258
 8007088:	f242 7010 	movw	r0, #10000	; 0x2710
 800708c:	f7fe fa04 	bl	8005498 <slalomF>
		slalomR(LSLALOM_2_DEGACCEL, LSLALOM_2_OMEGA, 90, SPEED_MIDDLE);
 8007090:	f44f 7316 	mov.w	r3, #600	; 0x258
 8007094:	225a      	movs	r2, #90	; 0x5a
 8007096:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800709a:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 800709e:	f7fe fab1 	bl	8005604 <slalomR>
		if(!MF.FLAG.XDIR){
 80070a2:	4b6e      	ldr	r3, [pc, #440]	; (800725c <Lslalom_L90+0x254>)
 80070a4:	881b      	ldrh	r3, [r3, #0]
 80070a6:	f3c3 3300 	ubfx	r3, r3, #12, #1
 80070aa:	b2db      	uxtb	r3, r3
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d104      	bne.n	80070ba <Lslalom_L90+0xb2>
			turn_dir(DIR_TURN_L90, 1);										//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 80070b0:	2101      	movs	r1, #1
 80070b2:	20ff      	movs	r0, #255	; 0xff
 80070b4:	f008 ff10 	bl	800fed8 <turn_dir>
 80070b8:	e003      	b.n	80070c2 <Lslalom_L90+0xba>
			turn_dir(DIR_TURN_L90_8, 3);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 80070ba:	2103      	movs	r1, #3
 80070bc:	20fe      	movs	r0, #254	; 0xfe
 80070be:	f008 ff0b 	bl	800fed8 <turn_dir>
		slalomB(10000, SPEED_MIDDLE, LSLALOM_2_OFFSET_B);
 80070c2:	2258      	movs	r2, #88	; 0x58
 80070c4:	f44f 7116 	mov.w	r1, #600	; 0x258
 80070c8:	f242 7010 	movw	r0, #10000	; 0x2710
 80070cc:	f7fe fbbc 	bl	8005848 <slalomB>
}
 80070d0:	e0bf      	b.n	8007252 <Lslalom_L90+0x24a>
	}else if(run_mode == HIGH){
 80070d2:	4b61      	ldr	r3, [pc, #388]	; (8007258 <Lslalom_L90+0x250>)
 80070d4:	781b      	ldrb	r3, [r3, #0]
 80070d6:	b2db      	uxtb	r3, r3
 80070d8:	2b03      	cmp	r3, #3
 80070da:	d12a      	bne.n	8007132 <Lslalom_L90+0x12a>
		slalomF(10000, SPEED_HIGH, LSLALOM_3_OFFSET_F, LSLALOM_3_WALL_FL, LSLALOM_3_WALL_FR);
 80070dc:	2378      	movs	r3, #120	; 0x78
 80070de:	9300      	str	r3, [sp, #0]
 80070e0:	23f0      	movs	r3, #240	; 0xf0
 80070e2:	222b      	movs	r2, #43	; 0x2b
 80070e4:	f44f 7148 	mov.w	r1, #800	; 0x320
 80070e8:	f242 7010 	movw	r0, #10000	; 0x2710
 80070ec:	f7fe f9d4 	bl	8005498 <slalomF>
		slalomR(LSLALOM_3_DEGACCEL, LSLALOM_3_OMEGA, 90, SPEED_HIGH);
 80070f0:	f44f 7348 	mov.w	r3, #800	; 0x320
 80070f4:	225a      	movs	r2, #90	; 0x5a
 80070f6:	f44f 7116 	mov.w	r1, #600	; 0x258
 80070fa:	f241 1094 	movw	r0, #4500	; 0x1194
 80070fe:	f7fe fa81 	bl	8005604 <slalomR>
		if(!MF.FLAG.XDIR){
 8007102:	4b56      	ldr	r3, [pc, #344]	; (800725c <Lslalom_L90+0x254>)
 8007104:	881b      	ldrh	r3, [r3, #0]
 8007106:	f3c3 3300 	ubfx	r3, r3, #12, #1
 800710a:	b2db      	uxtb	r3, r3
 800710c:	2b00      	cmp	r3, #0
 800710e:	d104      	bne.n	800711a <Lslalom_L90+0x112>
			turn_dir(DIR_TURN_L90, 1);										//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8007110:	2101      	movs	r1, #1
 8007112:	20ff      	movs	r0, #255	; 0xff
 8007114:	f008 fee0 	bl	800fed8 <turn_dir>
 8007118:	e003      	b.n	8007122 <Lslalom_L90+0x11a>
			turn_dir(DIR_TURN_L90_8, 3);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 800711a:	2103      	movs	r1, #3
 800711c:	20fe      	movs	r0, #254	; 0xfe
 800711e:	f008 fedb 	bl	800fed8 <turn_dir>
		slalomB(10000, SPEED_HIGH, LSLALOM_3_OFFSET_B);
 8007122:	225a      	movs	r2, #90	; 0x5a
 8007124:	f44f 7148 	mov.w	r1, #800	; 0x320
 8007128:	f242 7010 	movw	r0, #10000	; 0x2710
 800712c:	f7fe fb8c 	bl	8005848 <slalomB>
}
 8007130:	e08f      	b.n	8007252 <Lslalom_L90+0x24a>
	}else if(run_mode == HIGH_HIGH){
 8007132:	4b49      	ldr	r3, [pc, #292]	; (8007258 <Lslalom_L90+0x250>)
 8007134:	781b      	ldrb	r3, [r3, #0]
 8007136:	b2db      	uxtb	r3, r3
 8007138:	2b04      	cmp	r3, #4
 800713a:	d12b      	bne.n	8007194 <Lslalom_L90+0x18c>
		slalomF(10000, SPEED_HIGH_HIGH, LSLALOM_4_OFFSET_F, LSLALOM_4_WALL_FL, LSLALOM_4_WALL_FR);
 800713c:	238c      	movs	r3, #140	; 0x8c
 800713e:	9300      	str	r3, [sp, #0]
 8007140:	f44f 738c 	mov.w	r3, #280	; 0x118
 8007144:	2232      	movs	r2, #50	; 0x32
 8007146:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800714a:	f242 7010 	movw	r0, #10000	; 0x2710
 800714e:	f7fe f9a3 	bl	8005498 <slalomF>
		slalomR(LSLALOM_4_DEGACCEL, LSLALOM_4_OMEGA, 85, SPEED_HIGH_HIGH);
 8007152:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007156:	2255      	movs	r2, #85	; 0x55
 8007158:	f44f 7148 	mov.w	r1, #800	; 0x320
 800715c:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 8007160:	f7fe fa50 	bl	8005604 <slalomR>
		if(!MF.FLAG.XDIR){
 8007164:	4b3d      	ldr	r3, [pc, #244]	; (800725c <Lslalom_L90+0x254>)
 8007166:	881b      	ldrh	r3, [r3, #0]
 8007168:	f3c3 3300 	ubfx	r3, r3, #12, #1
 800716c:	b2db      	uxtb	r3, r3
 800716e:	2b00      	cmp	r3, #0
 8007170:	d104      	bne.n	800717c <Lslalom_L90+0x174>
			turn_dir(DIR_TURN_L90, 1);										//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8007172:	2101      	movs	r1, #1
 8007174:	20ff      	movs	r0, #255	; 0xff
 8007176:	f008 feaf 	bl	800fed8 <turn_dir>
 800717a:	e003      	b.n	8007184 <Lslalom_L90+0x17c>
			turn_dir(DIR_TURN_L90_8, 3);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 800717c:	2103      	movs	r1, #3
 800717e:	20fe      	movs	r0, #254	; 0xfe
 8007180:	f008 feaa 	bl	800fed8 <turn_dir>
		slalomB(10000, SPEED_HIGH_HIGH, LSLALOM_4_OFFSET_B);
 8007184:	226e      	movs	r2, #110	; 0x6e
 8007186:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800718a:	f242 7010 	movw	r0, #10000	; 0x2710
 800718e:	f7fe fb5b 	bl	8005848 <slalomB>
}
 8007192:	e05e      	b.n	8007252 <Lslalom_L90+0x24a>
	}else if(run_mode == 5){
 8007194:	4b30      	ldr	r3, [pc, #192]	; (8007258 <Lslalom_L90+0x250>)
 8007196:	781b      	ldrb	r3, [r3, #0]
 8007198:	b2db      	uxtb	r3, r3
 800719a:	2b05      	cmp	r3, #5
 800719c:	d12a      	bne.n	80071f4 <Lslalom_L90+0x1ec>
		slalomF(10000, SPEED_5, LSLALOM_5_OFFSET_F, LSLALOM_5_WALL_FL, LSLALOM_5_WALL_FR);
 800719e:	2378      	movs	r3, #120	; 0x78
 80071a0:	9300      	str	r3, [sp, #0]
 80071a2:	23f0      	movs	r3, #240	; 0xf0
 80071a4:	2211      	movs	r2, #17
 80071a6:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 80071aa:	f242 7010 	movw	r0, #10000	; 0x2710
 80071ae:	f7fe f973 	bl	8005498 <slalomF>
		slalomR(LSLALOM_5_DEGACCEL, LSLALOM_5_OMEGA, 80, SPEED_5);
 80071b2:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
 80071b6:	2250      	movs	r2, #80	; 0x50
 80071b8:	f44f 7148 	mov.w	r1, #800	; 0x320
 80071bc:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 80071c0:	f7fe fa20 	bl	8005604 <slalomR>
		if(!MF.FLAG.XDIR){
 80071c4:	4b25      	ldr	r3, [pc, #148]	; (800725c <Lslalom_L90+0x254>)
 80071c6:	881b      	ldrh	r3, [r3, #0]
 80071c8:	f3c3 3300 	ubfx	r3, r3, #12, #1
 80071cc:	b2db      	uxtb	r3, r3
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d104      	bne.n	80071dc <Lslalom_L90+0x1d4>
			turn_dir(DIR_TURN_L90, 1);										//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 80071d2:	2101      	movs	r1, #1
 80071d4:	20ff      	movs	r0, #255	; 0xff
 80071d6:	f008 fe7f 	bl	800fed8 <turn_dir>
 80071da:	e003      	b.n	80071e4 <Lslalom_L90+0x1dc>
			turn_dir(DIR_TURN_L90_8, 3);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 80071dc:	2103      	movs	r1, #3
 80071de:	20fe      	movs	r0, #254	; 0xfe
 80071e0:	f008 fe7a 	bl	800fed8 <turn_dir>
		slalomB(10000, SPEED_5, LSLALOM_5_OFFSET_B);
 80071e4:	2278      	movs	r2, #120	; 0x78
 80071e6:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 80071ea:	f242 7010 	movw	r0, #10000	; 0x2710
 80071ee:	f7fe fb2b 	bl	8005848 <slalomB>
}
 80071f2:	e02e      	b.n	8007252 <Lslalom_L90+0x24a>
	}else if(run_mode == 6){
 80071f4:	4b18      	ldr	r3, [pc, #96]	; (8007258 <Lslalom_L90+0x250>)
 80071f6:	781b      	ldrb	r3, [r3, #0]
 80071f8:	b2db      	uxtb	r3, r3
 80071fa:	2b06      	cmp	r3, #6
 80071fc:	d129      	bne.n	8007252 <Lslalom_L90+0x24a>
		slalomF(10000, SPEED_6, LSLALOM_6_OFFSET_F, LSLALOM_6_WALL_FL, LSLALOM_6_WALL_FR);
 80071fe:	2378      	movs	r3, #120	; 0x78
 8007200:	9300      	str	r3, [sp, #0]
 8007202:	23f0      	movs	r3, #240	; 0xf0
 8007204:	2200      	movs	r2, #0
 8007206:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 800720a:	f242 7010 	movw	r0, #10000	; 0x2710
 800720e:	f7fe f943 	bl	8005498 <slalomF>
		slalomR(LSLALOM_6_DEGACCEL, LSLALOM_6_OMEGA, 70, SPEED_6);
 8007212:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8007216:	2246      	movs	r2, #70	; 0x46
 8007218:	f44f 7148 	mov.w	r1, #800	; 0x320
 800721c:	f44f 40fa 	mov.w	r0, #32000	; 0x7d00
 8007220:	f7fe f9f0 	bl	8005604 <slalomR>
		if(!MF.FLAG.XDIR){
 8007224:	4b0d      	ldr	r3, [pc, #52]	; (800725c <Lslalom_L90+0x254>)
 8007226:	881b      	ldrh	r3, [r3, #0]
 8007228:	f3c3 3300 	ubfx	r3, r3, #12, #1
 800722c:	b2db      	uxtb	r3, r3
 800722e:	2b00      	cmp	r3, #0
 8007230:	d104      	bne.n	800723c <Lslalom_L90+0x234>
			turn_dir(DIR_TURN_L90, 1);										//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8007232:	2101      	movs	r1, #1
 8007234:	20ff      	movs	r0, #255	; 0xff
 8007236:	f008 fe4f 	bl	800fed8 <turn_dir>
 800723a:	e003      	b.n	8007244 <Lslalom_L90+0x23c>
			turn_dir(DIR_TURN_L90_8, 3);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 800723c:	2103      	movs	r1, #3
 800723e:	20fe      	movs	r0, #254	; 0xfe
 8007240:	f008 fe4a 	bl	800fed8 <turn_dir>
		slalomB(10000, SPEED_6, LSLALOM_6_OFFSET_B);
 8007244:	2278      	movs	r2, #120	; 0x78
 8007246:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 800724a:	f242 7010 	movw	r0, #10000	; 0x2710
 800724e:	f7fe fafb 	bl	8005848 <slalomB>
}
 8007252:	bf00      	nop
 8007254:	46bd      	mov	sp, r7
 8007256:	bd80      	pop	{r7, pc}
 8007258:	20000456 	.word	0x20000456
 800725c:	20000f68 	.word	0x20000f68

08007260 <Lslalom_R180>:
//Lslalom_R180
// スラロームで右に180度回転する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void Lslalom_R180(void){
 8007260:	b580      	push	{r7, lr}
 8007262:	b082      	sub	sp, #8
 8007264:	af02      	add	r7, sp, #8
	full_led_write(GREEN);
 8007266:	2002      	movs	r0, #2
 8007268:	f00a fcca 	bl	8011c00 <full_led_write>
	if(run_mode == LOW){
 800726c:	4b99      	ldr	r3, [pc, #612]	; (80074d4 <Lslalom_R180+0x274>)
 800726e:	781b      	ldrb	r3, [r3, #0]
 8007270:	b2db      	uxtb	r3, r3
 8007272:	2b01      	cmp	r3, #1
 8007274:	d12d      	bne.n	80072d2 <Lslalom_R180+0x72>
		slalomF(10000, SPEED_LOW, LROTATE_OFFSET_F, LROTATE_WALL_FL, LROTATE_WALL_FR);
 8007276:	2364      	movs	r3, #100	; 0x64
 8007278:	9300      	str	r3, [sp, #0]
 800727a:	23c8      	movs	r3, #200	; 0xc8
 800727c:	223c      	movs	r2, #60	; 0x3c
 800727e:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8007282:	f242 7010 	movw	r0, #10000	; 0x2710
 8007286:	f7fe f907 	bl	8005498 <slalomF>
		slalomR(-LROTATE_DEGACCEL, -LROTATE_OMEGA, -180, SPEED_LOW);
 800728a:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800728e:	f06f 02b3 	mvn.w	r2, #179	; 0xb3
 8007292:	4991      	ldr	r1, [pc, #580]	; (80074d8 <Lslalom_R180+0x278>)
 8007294:	4891      	ldr	r0, [pc, #580]	; (80074dc <Lslalom_R180+0x27c>)
 8007296:	f7fe f9b5 	bl	8005604 <slalomR>

		if(!MF.FLAG.XDIR){
 800729a:	4b91      	ldr	r3, [pc, #580]	; (80074e0 <Lslalom_R180+0x280>)
 800729c:	881b      	ldrh	r3, [r3, #0]
 800729e:	f3c3 3300 	ubfx	r3, r3, #12, #1
 80072a2:	b2db      	uxtb	r3, r3
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d108      	bne.n	80072ba <Lslalom_R180+0x5a>
			turn_dir(DIR_TURN_R90, 1);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 80072a8:	2101      	movs	r1, #1
 80072aa:	2001      	movs	r0, #1
 80072ac:	f008 fe14 	bl	800fed8 <turn_dir>
			turn_dir(DIR_TURN_R90, 1);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 80072b0:	2101      	movs	r1, #1
 80072b2:	2001      	movs	r0, #1
 80072b4:	f008 fe10 	bl	800fed8 <turn_dir>
 80072b8:	e003      	b.n	80072c2 <Lslalom_R180+0x62>
		}else{
			turn_dir(DIR_TURN_R180_8, 3);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 80072ba:	2103      	movs	r1, #3
 80072bc:	2004      	movs	r0, #4
 80072be:	f008 fe0b 	bl	800fed8 <turn_dir>
		}
		slalomB(10000, SPEED_LOW, LROTATE_OFFSET_B);
 80072c2:	2250      	movs	r2, #80	; 0x50
 80072c4:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80072c8:	f242 7010 	movw	r0, #10000	; 0x2710
 80072cc:	f7fe fabc 	bl	8005848 <slalomB>
		}else{
			turn_dir(DIR_TURN_R180_8, 3);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
		}
		slalomB(10000, SPEED_6, LROTATE_6_OFFSET_B);
	}
}
 80072d0:	e0fd      	b.n	80074ce <Lslalom_R180+0x26e>
	}else if(run_mode == MIDDLE){
 80072d2:	4b80      	ldr	r3, [pc, #512]	; (80074d4 <Lslalom_R180+0x274>)
 80072d4:	781b      	ldrb	r3, [r3, #0]
 80072d6:	b2db      	uxtb	r3, r3
 80072d8:	2b02      	cmp	r3, #2
 80072da:	d12d      	bne.n	8007338 <Lslalom_R180+0xd8>
		slalomF(10000, SPEED_MIDDLE, LROTATE_2_OFFSET_F, LROTATE_2_WALL_FL, LROTATE_2_WALL_FR);
 80072dc:	2364      	movs	r3, #100	; 0x64
 80072de:	9300      	str	r3, [sp, #0]
 80072e0:	23c8      	movs	r3, #200	; 0xc8
 80072e2:	2232      	movs	r2, #50	; 0x32
 80072e4:	f44f 7116 	mov.w	r1, #600	; 0x258
 80072e8:	f242 7010 	movw	r0, #10000	; 0x2710
 80072ec:	f7fe f8d4 	bl	8005498 <slalomF>
		slalomR(-LROTATE_2_DEGACCEL, -LROTATE_2_OMEGA, -180, SPEED_MIDDLE);
 80072f0:	f44f 7316 	mov.w	r3, #600	; 0x258
 80072f4:	f06f 02b3 	mvn.w	r2, #179	; 0xb3
 80072f8:	497a      	ldr	r1, [pc, #488]	; (80074e4 <Lslalom_R180+0x284>)
 80072fa:	487b      	ldr	r0, [pc, #492]	; (80074e8 <Lslalom_R180+0x288>)
 80072fc:	f7fe f982 	bl	8005604 <slalomR>
		if(!MF.FLAG.XDIR){
 8007300:	4b77      	ldr	r3, [pc, #476]	; (80074e0 <Lslalom_R180+0x280>)
 8007302:	881b      	ldrh	r3, [r3, #0]
 8007304:	f3c3 3300 	ubfx	r3, r3, #12, #1
 8007308:	b2db      	uxtb	r3, r3
 800730a:	2b00      	cmp	r3, #0
 800730c:	d108      	bne.n	8007320 <Lslalom_R180+0xc0>
			turn_dir(DIR_TURN_R90, 1);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 800730e:	2101      	movs	r1, #1
 8007310:	2001      	movs	r0, #1
 8007312:	f008 fde1 	bl	800fed8 <turn_dir>
			turn_dir(DIR_TURN_R90, 1);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8007316:	2101      	movs	r1, #1
 8007318:	2001      	movs	r0, #1
 800731a:	f008 fddd 	bl	800fed8 <turn_dir>
 800731e:	e003      	b.n	8007328 <Lslalom_R180+0xc8>
			turn_dir(DIR_TURN_R180_8, 3);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8007320:	2103      	movs	r1, #3
 8007322:	2004      	movs	r0, #4
 8007324:	f008 fdd8 	bl	800fed8 <turn_dir>
		slalomB(10000, SPEED_MIDDLE, LROTATE_2_OFFSET_B);
 8007328:	224e      	movs	r2, #78	; 0x4e
 800732a:	f44f 7116 	mov.w	r1, #600	; 0x258
 800732e:	f242 7010 	movw	r0, #10000	; 0x2710
 8007332:	f7fe fa89 	bl	8005848 <slalomB>
}
 8007336:	e0ca      	b.n	80074ce <Lslalom_R180+0x26e>
	}else if(run_mode == HIGH){
 8007338:	4b66      	ldr	r3, [pc, #408]	; (80074d4 <Lslalom_R180+0x274>)
 800733a:	781b      	ldrb	r3, [r3, #0]
 800733c:	b2db      	uxtb	r3, r3
 800733e:	2b03      	cmp	r3, #3
 8007340:	d12d      	bne.n	800739e <Lslalom_R180+0x13e>
		slalomF(10000, SPEED_HIGH, LROTATE_3_OFFSET_F, LROTATE_3_WALL_FL, LROTATE_3_WALL_FR);
 8007342:	235a      	movs	r3, #90	; 0x5a
 8007344:	9300      	str	r3, [sp, #0]
 8007346:	23b4      	movs	r3, #180	; 0xb4
 8007348:	221c      	movs	r2, #28
 800734a:	f44f 7148 	mov.w	r1, #800	; 0x320
 800734e:	f242 7010 	movw	r0, #10000	; 0x2710
 8007352:	f7fe f8a1 	bl	8005498 <slalomF>
		slalomR(-LROTATE_3_DEGACCEL, -LROTATE_3_OMEGA, -170, SPEED_HIGH);
 8007356:	f44f 7348 	mov.w	r3, #800	; 0x320
 800735a:	f06f 02a9 	mvn.w	r2, #169	; 0xa9
 800735e:	4963      	ldr	r1, [pc, #396]	; (80074ec <Lslalom_R180+0x28c>)
 8007360:	4861      	ldr	r0, [pc, #388]	; (80074e8 <Lslalom_R180+0x288>)
 8007362:	f7fe f94f 	bl	8005604 <slalomR>
		if(!MF.FLAG.XDIR){
 8007366:	4b5e      	ldr	r3, [pc, #376]	; (80074e0 <Lslalom_R180+0x280>)
 8007368:	881b      	ldrh	r3, [r3, #0]
 800736a:	f3c3 3300 	ubfx	r3, r3, #12, #1
 800736e:	b2db      	uxtb	r3, r3
 8007370:	2b00      	cmp	r3, #0
 8007372:	d108      	bne.n	8007386 <Lslalom_R180+0x126>
			turn_dir(DIR_TURN_R90, 1);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8007374:	2101      	movs	r1, #1
 8007376:	2001      	movs	r0, #1
 8007378:	f008 fdae 	bl	800fed8 <turn_dir>
			turn_dir(DIR_TURN_R90, 1);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 800737c:	2101      	movs	r1, #1
 800737e:	2001      	movs	r0, #1
 8007380:	f008 fdaa 	bl	800fed8 <turn_dir>
 8007384:	e003      	b.n	800738e <Lslalom_R180+0x12e>
			turn_dir(DIR_TURN_R180_8, 3);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8007386:	2103      	movs	r1, #3
 8007388:	2004      	movs	r0, #4
 800738a:	f008 fda5 	bl	800fed8 <turn_dir>
		slalomB(10000, SPEED_HIGH, LROTATE_3_OFFSET_B);
 800738e:	225f      	movs	r2, #95	; 0x5f
 8007390:	f44f 7148 	mov.w	r1, #800	; 0x320
 8007394:	f242 7010 	movw	r0, #10000	; 0x2710
 8007398:	f7fe fa56 	bl	8005848 <slalomB>
}
 800739c:	e097      	b.n	80074ce <Lslalom_R180+0x26e>
	}else if(run_mode == HIGH_HIGH){
 800739e:	4b4d      	ldr	r3, [pc, #308]	; (80074d4 <Lslalom_R180+0x274>)
 80073a0:	781b      	ldrb	r3, [r3, #0]
 80073a2:	b2db      	uxtb	r3, r3
 80073a4:	2b04      	cmp	r3, #4
 80073a6:	d12d      	bne.n	8007404 <Lslalom_R180+0x1a4>
		slalomF(10000, SPEED_HIGH_HIGH, LROTATE_4_OFFSET_F, LROTATE_4_WALL_FL, LROTATE_4_WALL_FR);
 80073a8:	2364      	movs	r3, #100	; 0x64
 80073aa:	9300      	str	r3, [sp, #0]
 80073ac:	23c8      	movs	r3, #200	; 0xc8
 80073ae:	2232      	movs	r2, #50	; 0x32
 80073b0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80073b4:	f242 7010 	movw	r0, #10000	; 0x2710
 80073b8:	f7fe f86e 	bl	8005498 <slalomF>
		slalomR(-LROTATE_4_DEGACCEL, -LROTATE_4_OMEGA, -170, SPEED_HIGH_HIGH);
 80073bc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80073c0:	f06f 02a9 	mvn.w	r2, #169	; 0xa9
 80073c4:	494a      	ldr	r1, [pc, #296]	; (80074f0 <Lslalom_R180+0x290>)
 80073c6:	484b      	ldr	r0, [pc, #300]	; (80074f4 <Lslalom_R180+0x294>)
 80073c8:	f7fe f91c 	bl	8005604 <slalomR>
		if(!MF.FLAG.XDIR){
 80073cc:	4b44      	ldr	r3, [pc, #272]	; (80074e0 <Lslalom_R180+0x280>)
 80073ce:	881b      	ldrh	r3, [r3, #0]
 80073d0:	f3c3 3300 	ubfx	r3, r3, #12, #1
 80073d4:	b2db      	uxtb	r3, r3
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d108      	bne.n	80073ec <Lslalom_R180+0x18c>
			turn_dir(DIR_TURN_R90, 1);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 80073da:	2101      	movs	r1, #1
 80073dc:	2001      	movs	r0, #1
 80073de:	f008 fd7b 	bl	800fed8 <turn_dir>
			turn_dir(DIR_TURN_R90, 1);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 80073e2:	2101      	movs	r1, #1
 80073e4:	2001      	movs	r0, #1
 80073e6:	f008 fd77 	bl	800fed8 <turn_dir>
 80073ea:	e003      	b.n	80073f4 <Lslalom_R180+0x194>
			turn_dir(DIR_TURN_R180_8, 3);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 80073ec:	2103      	movs	r1, #3
 80073ee:	2004      	movs	r0, #4
 80073f0:	f008 fd72 	bl	800fed8 <turn_dir>
		slalomB(10000, SPEED_HIGH_HIGH, LROTATE_4_OFFSET_B);
 80073f4:	2282      	movs	r2, #130	; 0x82
 80073f6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80073fa:	f242 7010 	movw	r0, #10000	; 0x2710
 80073fe:	f7fe fa23 	bl	8005848 <slalomB>
}
 8007402:	e064      	b.n	80074ce <Lslalom_R180+0x26e>
	}else if(run_mode == 5){
 8007404:	4b33      	ldr	r3, [pc, #204]	; (80074d4 <Lslalom_R180+0x274>)
 8007406:	781b      	ldrb	r3, [r3, #0]
 8007408:	b2db      	uxtb	r3, r3
 800740a:	2b05      	cmp	r3, #5
 800740c:	d12d      	bne.n	800746a <Lslalom_R180+0x20a>
		slalomF(10000, SPEED_5, LROTATE_5_OFFSET_F, LROTATE_5_WALL_FL, LROTATE_5_WALL_FR);
 800740e:	2364      	movs	r3, #100	; 0x64
 8007410:	9300      	str	r3, [sp, #0]
 8007412:	23c8      	movs	r3, #200	; 0xc8
 8007414:	221e      	movs	r2, #30
 8007416:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 800741a:	f242 7010 	movw	r0, #10000	; 0x2710
 800741e:	f7fe f83b 	bl	8005498 <slalomF>
		slalomR(-LROTATE_5_DEGACCEL, -LROTATE_5_OMEGA, -170, SPEED_5);
 8007422:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
 8007426:	f06f 02a9 	mvn.w	r2, #169	; 0xa9
 800742a:	4933      	ldr	r1, [pc, #204]	; (80074f8 <Lslalom_R180+0x298>)
 800742c:	4831      	ldr	r0, [pc, #196]	; (80074f4 <Lslalom_R180+0x294>)
 800742e:	f7fe f8e9 	bl	8005604 <slalomR>
		if(!MF.FLAG.XDIR){
 8007432:	4b2b      	ldr	r3, [pc, #172]	; (80074e0 <Lslalom_R180+0x280>)
 8007434:	881b      	ldrh	r3, [r3, #0]
 8007436:	f3c3 3300 	ubfx	r3, r3, #12, #1
 800743a:	b2db      	uxtb	r3, r3
 800743c:	2b00      	cmp	r3, #0
 800743e:	d108      	bne.n	8007452 <Lslalom_R180+0x1f2>
			turn_dir(DIR_TURN_R90, 1);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8007440:	2101      	movs	r1, #1
 8007442:	2001      	movs	r0, #1
 8007444:	f008 fd48 	bl	800fed8 <turn_dir>
			turn_dir(DIR_TURN_R90, 1);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8007448:	2101      	movs	r1, #1
 800744a:	2001      	movs	r0, #1
 800744c:	f008 fd44 	bl	800fed8 <turn_dir>
 8007450:	e003      	b.n	800745a <Lslalom_R180+0x1fa>
			turn_dir(DIR_TURN_R180_8, 3);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8007452:	2103      	movs	r1, #3
 8007454:	2004      	movs	r0, #4
 8007456:	f008 fd3f 	bl	800fed8 <turn_dir>
		slalomB(10000, SPEED_5, LROTATE_5_OFFSET_B);
 800745a:	229b      	movs	r2, #155	; 0x9b
 800745c:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 8007460:	f242 7010 	movw	r0, #10000	; 0x2710
 8007464:	f7fe f9f0 	bl	8005848 <slalomB>
}
 8007468:	e031      	b.n	80074ce <Lslalom_R180+0x26e>
	}else if(run_mode == 6){
 800746a:	4b1a      	ldr	r3, [pc, #104]	; (80074d4 <Lslalom_R180+0x274>)
 800746c:	781b      	ldrb	r3, [r3, #0]
 800746e:	b2db      	uxtb	r3, r3
 8007470:	2b06      	cmp	r3, #6
 8007472:	d12c      	bne.n	80074ce <Lslalom_R180+0x26e>
		slalomF(10000, SPEED_6, LROTATE_6_OFFSET_F, LROTATE_6_WALL_FL, LROTATE_6_WALL_FR);
 8007474:	235a      	movs	r3, #90	; 0x5a
 8007476:	9300      	str	r3, [sp, #0]
 8007478:	23b4      	movs	r3, #180	; 0xb4
 800747a:	221e      	movs	r2, #30
 800747c:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8007480:	f242 7010 	movw	r0, #10000	; 0x2710
 8007484:	f7fe f808 	bl	8005498 <slalomF>
		slalomR(-LROTATE_6_DEGACCEL, -LROTATE_6_OMEGA, -160, SPEED_6);
 8007488:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800748c:	f06f 029f 	mvn.w	r2, #159	; 0x9f
 8007490:	491a      	ldr	r1, [pc, #104]	; (80074fc <Lslalom_R180+0x29c>)
 8007492:	481b      	ldr	r0, [pc, #108]	; (8007500 <Lslalom_R180+0x2a0>)
 8007494:	f7fe f8b6 	bl	8005604 <slalomR>
		if(!MF.FLAG.XDIR){
 8007498:	4b11      	ldr	r3, [pc, #68]	; (80074e0 <Lslalom_R180+0x280>)
 800749a:	881b      	ldrh	r3, [r3, #0]
 800749c:	f3c3 3300 	ubfx	r3, r3, #12, #1
 80074a0:	b2db      	uxtb	r3, r3
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d108      	bne.n	80074b8 <Lslalom_R180+0x258>
			turn_dir(DIR_TURN_R90, 1);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 80074a6:	2101      	movs	r1, #1
 80074a8:	2001      	movs	r0, #1
 80074aa:	f008 fd15 	bl	800fed8 <turn_dir>
			turn_dir(DIR_TURN_R90, 1);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 80074ae:	2101      	movs	r1, #1
 80074b0:	2001      	movs	r0, #1
 80074b2:	f008 fd11 	bl	800fed8 <turn_dir>
 80074b6:	e003      	b.n	80074c0 <Lslalom_R180+0x260>
			turn_dir(DIR_TURN_R180_8, 3);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 80074b8:	2103      	movs	r1, #3
 80074ba:	2004      	movs	r0, #4
 80074bc:	f008 fd0c 	bl	800fed8 <turn_dir>
		slalomB(10000, SPEED_6, LROTATE_6_OFFSET_B);
 80074c0:	229b      	movs	r2, #155	; 0x9b
 80074c2:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 80074c6:	f242 7010 	movw	r0, #10000	; 0x2710
 80074ca:	f7fe f9bd 	bl	8005848 <slalomB>
}
 80074ce:	bf00      	nop
 80074d0:	46bd      	mov	sp, r7
 80074d2:	bd80      	pop	{r7, pc}
 80074d4:	20000456 	.word	0x20000456
 80074d8:	fffffefc 	.word	0xfffffefc
 80074dc:	fffff830 	.word	0xfffff830
 80074e0:	20000f68 	.word	0x20000f68
 80074e4:	fffffe74 	.word	0xfffffe74
 80074e8:	fffff448 	.word	0xfffff448
 80074ec:	fffffdc6 	.word	0xfffffdc6
 80074f0:	fffffd94 	.word	0xfffffd94
 80074f4:	ffffe0c0 	.word	0xffffe0c0
 80074f8:	fffffd08 	.word	0xfffffd08
 80074fc:	fffffb50 	.word	0xfffffb50
 8007500:	ffff8ad0 	.word	0xffff8ad0

08007504 <Lslalom_L180>:
//Lslalom_L180
// 大回りスラロームで右に180度回転する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void Lslalom_L180(void){
 8007504:	b580      	push	{r7, lr}
 8007506:	b082      	sub	sp, #8
 8007508:	af02      	add	r7, sp, #8
	full_led_write(GREEN);
 800750a:	2002      	movs	r0, #2
 800750c:	f00a fb78 	bl	8011c00 <full_led_write>
	if(run_mode == LOW){
 8007510:	4b9c      	ldr	r3, [pc, #624]	; (8007784 <Lslalom_L180+0x280>)
 8007512:	781b      	ldrb	r3, [r3, #0]
 8007514:	b2db      	uxtb	r3, r3
 8007516:	2b01      	cmp	r3, #1
 8007518:	d12e      	bne.n	8007578 <Lslalom_L180+0x74>
		slalomF(10000, SPEED_LOW, LROTATE_OFFSET_F, LROTATE_WALL_FL, LROTATE_WALL_FR);
 800751a:	2364      	movs	r3, #100	; 0x64
 800751c:	9300      	str	r3, [sp, #0]
 800751e:	23c8      	movs	r3, #200	; 0xc8
 8007520:	223c      	movs	r2, #60	; 0x3c
 8007522:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8007526:	f242 7010 	movw	r0, #10000	; 0x2710
 800752a:	f7fd ffb5 	bl	8005498 <slalomF>
		slalomR(LROTATE_DEGACCEL, LROTATE_OMEGA, 180, SPEED_LOW);
 800752e:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8007532:	22b4      	movs	r2, #180	; 0xb4
 8007534:	f44f 7182 	mov.w	r1, #260	; 0x104
 8007538:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800753c:	f7fe f862 	bl	8005604 <slalomR>

		if(!MF.FLAG.XDIR){
 8007540:	4b91      	ldr	r3, [pc, #580]	; (8007788 <Lslalom_L180+0x284>)
 8007542:	881b      	ldrh	r3, [r3, #0]
 8007544:	f3c3 3300 	ubfx	r3, r3, #12, #1
 8007548:	b2db      	uxtb	r3, r3
 800754a:	2b00      	cmp	r3, #0
 800754c:	d108      	bne.n	8007560 <Lslalom_L180+0x5c>
			turn_dir(DIR_TURN_L90, 1);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 800754e:	2101      	movs	r1, #1
 8007550:	20ff      	movs	r0, #255	; 0xff
 8007552:	f008 fcc1 	bl	800fed8 <turn_dir>
			turn_dir(DIR_TURN_L90, 1);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8007556:	2101      	movs	r1, #1
 8007558:	20ff      	movs	r0, #255	; 0xff
 800755a:	f008 fcbd 	bl	800fed8 <turn_dir>
 800755e:	e003      	b.n	8007568 <Lslalom_L180+0x64>
		}else{
			turn_dir(DIR_TURN_L180_8, 3);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8007560:	2103      	movs	r1, #3
 8007562:	20fc      	movs	r0, #252	; 0xfc
 8007564:	f008 fcb8 	bl	800fed8 <turn_dir>
		}
		slalomB(10000, SPEED_LOW, LROTATE_OFFSET_B);
 8007568:	2250      	movs	r2, #80	; 0x50
 800756a:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800756e:	f242 7010 	movw	r0, #10000	; 0x2710
 8007572:	f7fe f969 	bl	8005848 <slalomB>
		}else{
			turn_dir(DIR_TURN_L180_8, 3);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
		}
		slalomB(10000, SPEED_6, LROTATE_6_OFFSET_B);
	}
}
 8007576:	e102      	b.n	800777e <Lslalom_L180+0x27a>
	}else if(run_mode == MIDDLE){
 8007578:	4b82      	ldr	r3, [pc, #520]	; (8007784 <Lslalom_L180+0x280>)
 800757a:	781b      	ldrb	r3, [r3, #0]
 800757c:	b2db      	uxtb	r3, r3
 800757e:	2b02      	cmp	r3, #2
 8007580:	d12e      	bne.n	80075e0 <Lslalom_L180+0xdc>
		slalomF(10000, SPEED_MIDDLE, LROTATE_2_OFFSET_F, LROTATE_2_WALL_FL, LROTATE_2_WALL_FR);
 8007582:	2364      	movs	r3, #100	; 0x64
 8007584:	9300      	str	r3, [sp, #0]
 8007586:	23c8      	movs	r3, #200	; 0xc8
 8007588:	2232      	movs	r2, #50	; 0x32
 800758a:	f44f 7116 	mov.w	r1, #600	; 0x258
 800758e:	f242 7010 	movw	r0, #10000	; 0x2710
 8007592:	f7fd ff81 	bl	8005498 <slalomF>
		slalomR(LROTATE_2_DEGACCEL, LROTATE_2_OMEGA, 180, SPEED_MIDDLE);
 8007596:	f44f 7316 	mov.w	r3, #600	; 0x258
 800759a:	22b4      	movs	r2, #180	; 0xb4
 800759c:	f44f 71c6 	mov.w	r1, #396	; 0x18c
 80075a0:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80075a4:	f7fe f82e 	bl	8005604 <slalomR>
		if(!MF.FLAG.XDIR){
 80075a8:	4b77      	ldr	r3, [pc, #476]	; (8007788 <Lslalom_L180+0x284>)
 80075aa:	881b      	ldrh	r3, [r3, #0]
 80075ac:	f3c3 3300 	ubfx	r3, r3, #12, #1
 80075b0:	b2db      	uxtb	r3, r3
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d108      	bne.n	80075c8 <Lslalom_L180+0xc4>
			turn_dir(DIR_TURN_L90, 1);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 80075b6:	2101      	movs	r1, #1
 80075b8:	20ff      	movs	r0, #255	; 0xff
 80075ba:	f008 fc8d 	bl	800fed8 <turn_dir>
			turn_dir(DIR_TURN_L90, 1);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 80075be:	2101      	movs	r1, #1
 80075c0:	20ff      	movs	r0, #255	; 0xff
 80075c2:	f008 fc89 	bl	800fed8 <turn_dir>
 80075c6:	e003      	b.n	80075d0 <Lslalom_L180+0xcc>
			turn_dir(DIR_TURN_L180_8, 3);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 80075c8:	2103      	movs	r1, #3
 80075ca:	20fc      	movs	r0, #252	; 0xfc
 80075cc:	f008 fc84 	bl	800fed8 <turn_dir>
		slalomB(10000, SPEED_MIDDLE, LROTATE_2_OFFSET_B);
 80075d0:	224e      	movs	r2, #78	; 0x4e
 80075d2:	f44f 7116 	mov.w	r1, #600	; 0x258
 80075d6:	f242 7010 	movw	r0, #10000	; 0x2710
 80075da:	f7fe f935 	bl	8005848 <slalomB>
}
 80075de:	e0ce      	b.n	800777e <Lslalom_L180+0x27a>
	}else if(run_mode == HIGH){
 80075e0:	4b68      	ldr	r3, [pc, #416]	; (8007784 <Lslalom_L180+0x280>)
 80075e2:	781b      	ldrb	r3, [r3, #0]
 80075e4:	b2db      	uxtb	r3, r3
 80075e6:	2b03      	cmp	r3, #3
 80075e8:	d12e      	bne.n	8007648 <Lslalom_L180+0x144>
		slalomF(10000, SPEED_HIGH, LROTATE_3_OFFSET_F, LROTATE_3_WALL_FL, LROTATE_3_WALL_FR);
 80075ea:	235a      	movs	r3, #90	; 0x5a
 80075ec:	9300      	str	r3, [sp, #0]
 80075ee:	23b4      	movs	r3, #180	; 0xb4
 80075f0:	221c      	movs	r2, #28
 80075f2:	f44f 7148 	mov.w	r1, #800	; 0x320
 80075f6:	f242 7010 	movw	r0, #10000	; 0x2710
 80075fa:	f7fd ff4d 	bl	8005498 <slalomF>
		slalomR(LROTATE_3_DEGACCEL, LROTATE_3_OMEGA, 170, SPEED_HIGH);
 80075fe:	f44f 7348 	mov.w	r3, #800	; 0x320
 8007602:	22aa      	movs	r2, #170	; 0xaa
 8007604:	f240 213a 	movw	r1, #570	; 0x23a
 8007608:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800760c:	f7fd fffa 	bl	8005604 <slalomR>
		if(!MF.FLAG.XDIR){
 8007610:	4b5d      	ldr	r3, [pc, #372]	; (8007788 <Lslalom_L180+0x284>)
 8007612:	881b      	ldrh	r3, [r3, #0]
 8007614:	f3c3 3300 	ubfx	r3, r3, #12, #1
 8007618:	b2db      	uxtb	r3, r3
 800761a:	2b00      	cmp	r3, #0
 800761c:	d108      	bne.n	8007630 <Lslalom_L180+0x12c>
			turn_dir(DIR_TURN_L90, 1);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 800761e:	2101      	movs	r1, #1
 8007620:	20ff      	movs	r0, #255	; 0xff
 8007622:	f008 fc59 	bl	800fed8 <turn_dir>
			turn_dir(DIR_TURN_L90, 1);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8007626:	2101      	movs	r1, #1
 8007628:	20ff      	movs	r0, #255	; 0xff
 800762a:	f008 fc55 	bl	800fed8 <turn_dir>
 800762e:	e003      	b.n	8007638 <Lslalom_L180+0x134>
			turn_dir(DIR_TURN_L180_8, 3);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8007630:	2103      	movs	r1, #3
 8007632:	20fc      	movs	r0, #252	; 0xfc
 8007634:	f008 fc50 	bl	800fed8 <turn_dir>
		slalomB(10000, SPEED_HIGH, LROTATE_3_OFFSET_B);
 8007638:	225f      	movs	r2, #95	; 0x5f
 800763a:	f44f 7148 	mov.w	r1, #800	; 0x320
 800763e:	f242 7010 	movw	r0, #10000	; 0x2710
 8007642:	f7fe f901 	bl	8005848 <slalomB>
}
 8007646:	e09a      	b.n	800777e <Lslalom_L180+0x27a>
	}else if(run_mode == HIGH_HIGH){
 8007648:	4b4e      	ldr	r3, [pc, #312]	; (8007784 <Lslalom_L180+0x280>)
 800764a:	781b      	ldrb	r3, [r3, #0]
 800764c:	b2db      	uxtb	r3, r3
 800764e:	2b04      	cmp	r3, #4
 8007650:	d12e      	bne.n	80076b0 <Lslalom_L180+0x1ac>
		slalomF(10000, SPEED_HIGH_HIGH, LROTATE_4_OFFSET_F, LROTATE_4_WALL_FL, LROTATE_4_WALL_FR);
 8007652:	2364      	movs	r3, #100	; 0x64
 8007654:	9300      	str	r3, [sp, #0]
 8007656:	23c8      	movs	r3, #200	; 0xc8
 8007658:	2232      	movs	r2, #50	; 0x32
 800765a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800765e:	f242 7010 	movw	r0, #10000	; 0x2710
 8007662:	f7fd ff19 	bl	8005498 <slalomF>
		slalomR(LROTATE_4_DEGACCEL, LROTATE_4_OMEGA, 170, SPEED_HIGH_HIGH);
 8007666:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800766a:	22aa      	movs	r2, #170	; 0xaa
 800766c:	f44f 711b 	mov.w	r1, #620	; 0x26c
 8007670:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 8007674:	f7fd ffc6 	bl	8005604 <slalomR>
		if(!MF.FLAG.XDIR){
 8007678:	4b43      	ldr	r3, [pc, #268]	; (8007788 <Lslalom_L180+0x284>)
 800767a:	881b      	ldrh	r3, [r3, #0]
 800767c:	f3c3 3300 	ubfx	r3, r3, #12, #1
 8007680:	b2db      	uxtb	r3, r3
 8007682:	2b00      	cmp	r3, #0
 8007684:	d108      	bne.n	8007698 <Lslalom_L180+0x194>
			turn_dir(DIR_TURN_L90, 1);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8007686:	2101      	movs	r1, #1
 8007688:	20ff      	movs	r0, #255	; 0xff
 800768a:	f008 fc25 	bl	800fed8 <turn_dir>
			turn_dir(DIR_TURN_L90, 1);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 800768e:	2101      	movs	r1, #1
 8007690:	20ff      	movs	r0, #255	; 0xff
 8007692:	f008 fc21 	bl	800fed8 <turn_dir>
 8007696:	e003      	b.n	80076a0 <Lslalom_L180+0x19c>
			turn_dir(DIR_TURN_L180_8, 3);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8007698:	2103      	movs	r1, #3
 800769a:	20fc      	movs	r0, #252	; 0xfc
 800769c:	f008 fc1c 	bl	800fed8 <turn_dir>
		slalomB(10000, SPEED_HIGH_HIGH, LROTATE_4_OFFSET_B);
 80076a0:	2282      	movs	r2, #130	; 0x82
 80076a2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80076a6:	f242 7010 	movw	r0, #10000	; 0x2710
 80076aa:	f7fe f8cd 	bl	8005848 <slalomB>
}
 80076ae:	e066      	b.n	800777e <Lslalom_L180+0x27a>
	}else if(run_mode == 5){
 80076b0:	4b34      	ldr	r3, [pc, #208]	; (8007784 <Lslalom_L180+0x280>)
 80076b2:	781b      	ldrb	r3, [r3, #0]
 80076b4:	b2db      	uxtb	r3, r3
 80076b6:	2b05      	cmp	r3, #5
 80076b8:	d12e      	bne.n	8007718 <Lslalom_L180+0x214>
		slalomF(10000, SPEED_5, LROTATE_5_OFFSET_F, LROTATE_5_WALL_FL, LROTATE_5_WALL_FR);
 80076ba:	2364      	movs	r3, #100	; 0x64
 80076bc:	9300      	str	r3, [sp, #0]
 80076be:	23c8      	movs	r3, #200	; 0xc8
 80076c0:	221e      	movs	r2, #30
 80076c2:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 80076c6:	f242 7010 	movw	r0, #10000	; 0x2710
 80076ca:	f7fd fee5 	bl	8005498 <slalomF>
		slalomR(LROTATE_5_DEGACCEL, LROTATE_5_OMEGA, 170, SPEED_5);
 80076ce:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
 80076d2:	22aa      	movs	r2, #170	; 0xaa
 80076d4:	f44f 713e 	mov.w	r1, #760	; 0x2f8
 80076d8:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 80076dc:	f7fd ff92 	bl	8005604 <slalomR>
		if(!MF.FLAG.XDIR){
 80076e0:	4b29      	ldr	r3, [pc, #164]	; (8007788 <Lslalom_L180+0x284>)
 80076e2:	881b      	ldrh	r3, [r3, #0]
 80076e4:	f3c3 3300 	ubfx	r3, r3, #12, #1
 80076e8:	b2db      	uxtb	r3, r3
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d108      	bne.n	8007700 <Lslalom_L180+0x1fc>
			turn_dir(DIR_TURN_L90, 1);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 80076ee:	2101      	movs	r1, #1
 80076f0:	20ff      	movs	r0, #255	; 0xff
 80076f2:	f008 fbf1 	bl	800fed8 <turn_dir>
			turn_dir(DIR_TURN_L90, 1);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 80076f6:	2101      	movs	r1, #1
 80076f8:	20ff      	movs	r0, #255	; 0xff
 80076fa:	f008 fbed 	bl	800fed8 <turn_dir>
 80076fe:	e003      	b.n	8007708 <Lslalom_L180+0x204>
			turn_dir(DIR_TURN_L180_8, 3);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8007700:	2103      	movs	r1, #3
 8007702:	20fc      	movs	r0, #252	; 0xfc
 8007704:	f008 fbe8 	bl	800fed8 <turn_dir>
		slalomB(10000, SPEED_5, LROTATE_5_OFFSET_B);
 8007708:	229b      	movs	r2, #155	; 0x9b
 800770a:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 800770e:	f242 7010 	movw	r0, #10000	; 0x2710
 8007712:	f7fe f899 	bl	8005848 <slalomB>
}
 8007716:	e032      	b.n	800777e <Lslalom_L180+0x27a>
	}else if(run_mode == 6){
 8007718:	4b1a      	ldr	r3, [pc, #104]	; (8007784 <Lslalom_L180+0x280>)
 800771a:	781b      	ldrb	r3, [r3, #0]
 800771c:	b2db      	uxtb	r3, r3
 800771e:	2b06      	cmp	r3, #6
 8007720:	d12d      	bne.n	800777e <Lslalom_L180+0x27a>
		slalomF(10000, SPEED_6, LROTATE_6_OFFSET_F, LROTATE_6_WALL_FL, LROTATE_6_WALL_FR);
 8007722:	235a      	movs	r3, #90	; 0x5a
 8007724:	9300      	str	r3, [sp, #0]
 8007726:	23b4      	movs	r3, #180	; 0xb4
 8007728:	221e      	movs	r2, #30
 800772a:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 800772e:	f242 7010 	movw	r0, #10000	; 0x2710
 8007732:	f7fd feb1 	bl	8005498 <slalomF>
		slalomR(LROTATE_6_DEGACCEL, LROTATE_6_OMEGA, 160, SPEED_6);
 8007736:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800773a:	22a0      	movs	r2, #160	; 0xa0
 800773c:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 8007740:	f247 5030 	movw	r0, #30000	; 0x7530
 8007744:	f7fd ff5e 	bl	8005604 <slalomR>
		if(!MF.FLAG.XDIR){
 8007748:	4b0f      	ldr	r3, [pc, #60]	; (8007788 <Lslalom_L180+0x284>)
 800774a:	881b      	ldrh	r3, [r3, #0]
 800774c:	f3c3 3300 	ubfx	r3, r3, #12, #1
 8007750:	b2db      	uxtb	r3, r3
 8007752:	2b00      	cmp	r3, #0
 8007754:	d108      	bne.n	8007768 <Lslalom_L180+0x264>
			turn_dir(DIR_TURN_L90, 1);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8007756:	2101      	movs	r1, #1
 8007758:	20ff      	movs	r0, #255	; 0xff
 800775a:	f008 fbbd 	bl	800fed8 <turn_dir>
			turn_dir(DIR_TURN_L90, 1);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 800775e:	2101      	movs	r1, #1
 8007760:	20ff      	movs	r0, #255	; 0xff
 8007762:	f008 fbb9 	bl	800fed8 <turn_dir>
 8007766:	e003      	b.n	8007770 <Lslalom_L180+0x26c>
			turn_dir(DIR_TURN_L180_8, 3);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8007768:	2103      	movs	r1, #3
 800776a:	20fc      	movs	r0, #252	; 0xfc
 800776c:	f008 fbb4 	bl	800fed8 <turn_dir>
		slalomB(10000, SPEED_6, LROTATE_6_OFFSET_B);
 8007770:	229b      	movs	r2, #155	; 0x9b
 8007772:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8007776:	f242 7010 	movw	r0, #10000	; 0x2710
 800777a:	f7fe f865 	bl	8005848 <slalomB>
}
 800777e:	bf00      	nop
 8007780:	46bd      	mov	sp, r7
 8007782:	bd80      	pop	{r7, pc}
 8007784:	20000456 	.word	0x20000456
 8007788:	20000f68 	.word	0x20000f68

0800778c <v_R45>:
//v_R45
// 区画中心から右に45度回転する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void v_R45(void){
 800778c:	b580      	push	{r7, lr}
 800778e:	b082      	sub	sp, #8
 8007790:	af02      	add	r7, sp, #8
	full_led_write(PURPLE);
 8007792:	2005      	movs	r0, #5
 8007794:	f00a fa34 	bl	8011c00 <full_led_write>
	if(run_mode == LOW){
 8007798:	4bc2      	ldr	r3, [pc, #776]	; (8007aa4 <v_R45+0x318>)
 800779a:	781b      	ldrb	r3, [r3, #0]
 800779c:	b2db      	uxtb	r3, r3
 800779e:	2b01      	cmp	r3, #1
 80077a0:	d155      	bne.n	800784e <v_R45+0xc2>
		if(!MF2.FLAG.V){
 80077a2:	4bc1      	ldr	r3, [pc, #772]	; (8007aa8 <v_R45+0x31c>)
 80077a4:	881b      	ldrh	r3, [r3, #0]
 80077a6:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80077aa:	b2db      	uxtb	r3, r3
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d10c      	bne.n	80077ca <v_R45+0x3e>
			slalomF(10000, SPEED_LOW, V45_OFFSET_F, NO_WALL, NO_WALL);
 80077b0:	f241 3388 	movw	r3, #5000	; 0x1388
 80077b4:	9300      	str	r3, [sp, #0]
 80077b6:	f241 3388 	movw	r3, #5000	; 0x1388
 80077ba:	2228      	movs	r2, #40	; 0x28
 80077bc:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80077c0:	f242 7010 	movw	r0, #10000	; 0x2710
 80077c4:	f7fd fe68 	bl	8005498 <slalomF>
 80077c8:	e00b      	b.n	80077e2 <v_R45+0x56>
		}else{
			slalomF(10000, SPEED_LOW, V45_OFFSET_VF, NO_WALL, NO_WALL);
 80077ca:	f241 3388 	movw	r3, #5000	; 0x1388
 80077ce:	9300      	str	r3, [sp, #0]
 80077d0:	f241 3388 	movw	r3, #5000	; 0x1388
 80077d4:	2255      	movs	r2, #85	; 0x55
 80077d6:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80077da:	f242 7010 	movw	r0, #10000	; 0x2710
 80077de:	f7fd fe5b 	bl	8005498 <slalomF>
		}
		slalomR(-V45_DEGACCEL, -V45_OMEGA, -45, SPEED_LOW);
 80077e2:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80077e6:	f06f 022c 	mvn.w	r2, #44	; 0x2c
 80077ea:	49b0      	ldr	r1, [pc, #704]	; (8007aac <v_R45+0x320>)
 80077ec:	48b0      	ldr	r0, [pc, #704]	; (8007ab0 <v_R45+0x324>)
 80077ee:	f7fd ff09 	bl	8005604 <slalomR>

		turn_dir(DIR_TURN_R45_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 80077f2:	2103      	movs	r1, #3
 80077f4:	2001      	movs	r0, #1
 80077f6:	f008 fb6f 	bl	800fed8 <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 80077fa:	4bab      	ldr	r3, [pc, #684]	; (8007aa8 <v_R45+0x31c>)
 80077fc:	881b      	ldrh	r3, [r3, #0]
 80077fe:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8007802:	b2db      	uxtb	r3, r3
 8007804:	3301      	adds	r3, #1
 8007806:	2b00      	cmp	r3, #0
 8007808:	f003 0301 	and.w	r3, r3, #1
 800780c:	bfb8      	it	lt
 800780e:	425b      	neglt	r3, r3
 8007810:	f003 0301 	and.w	r3, r3, #1
 8007814:	b2d9      	uxtb	r1, r3
 8007816:	4aa4      	ldr	r2, [pc, #656]	; (8007aa8 <v_R45+0x31c>)
 8007818:	8813      	ldrh	r3, [r2, #0]
 800781a:	f361 03c3 	bfi	r3, r1, #3, #1
 800781e:	8013      	strh	r3, [r2, #0]

		if(!MF2.FLAG.V){
 8007820:	4ba1      	ldr	r3, [pc, #644]	; (8007aa8 <v_R45+0x31c>)
 8007822:	881b      	ldrh	r3, [r3, #0]
 8007824:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8007828:	b2db      	uxtb	r3, r3
 800782a:	2b00      	cmp	r3, #0
 800782c:	d107      	bne.n	800783e <v_R45+0xb2>
			slalomB(10000, SPEED_LOW, V45_OFFSET_VB);
 800782e:	2228      	movs	r2, #40	; 0x28
 8007830:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8007834:	f242 7010 	movw	r0, #10000	; 0x2710
 8007838:	f7fe f806 	bl	8005848 <slalomB>
			slalomB(10000, SPEED_5, V45_5_OFFSET_VB);
		}else{
			slalomB(10000, SPEED_5, V45_5_OFFSET_B);
		}
	}
}
 800783c:	e183      	b.n	8007b46 <v_R45+0x3ba>
			slalomB(10000, SPEED_LOW, V45_OFFSET_B);
 800783e:	2255      	movs	r2, #85	; 0x55
 8007840:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8007844:	f242 7010 	movw	r0, #10000	; 0x2710
 8007848:	f7fd fffe 	bl	8005848 <slalomB>
}
 800784c:	e17b      	b.n	8007b46 <v_R45+0x3ba>
	}else if(run_mode == MIDDLE){
 800784e:	4b95      	ldr	r3, [pc, #596]	; (8007aa4 <v_R45+0x318>)
 8007850:	781b      	ldrb	r3, [r3, #0]
 8007852:	b2db      	uxtb	r3, r3
 8007854:	2b02      	cmp	r3, #2
 8007856:	d155      	bne.n	8007904 <v_R45+0x178>
		if(!MF2.FLAG.V){
 8007858:	4b93      	ldr	r3, [pc, #588]	; (8007aa8 <v_R45+0x31c>)
 800785a:	881b      	ldrh	r3, [r3, #0]
 800785c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8007860:	b2db      	uxtb	r3, r3
 8007862:	2b00      	cmp	r3, #0
 8007864:	d10c      	bne.n	8007880 <v_R45+0xf4>
			slalomF(10000, SPEED_MIDDLE, V45_2_OFFSET_F, NO_WALL, NO_WALL);
 8007866:	f241 3388 	movw	r3, #5000	; 0x1388
 800786a:	9300      	str	r3, [sp, #0]
 800786c:	f241 3388 	movw	r3, #5000	; 0x1388
 8007870:	2228      	movs	r2, #40	; 0x28
 8007872:	f44f 7116 	mov.w	r1, #600	; 0x258
 8007876:	f242 7010 	movw	r0, #10000	; 0x2710
 800787a:	f7fd fe0d 	bl	8005498 <slalomF>
 800787e:	e00b      	b.n	8007898 <v_R45+0x10c>
			slalomF(10000, SPEED_MIDDLE, V45_2_OFFSET_VF, NO_WALL, NO_WALL);
 8007880:	f241 3388 	movw	r3, #5000	; 0x1388
 8007884:	9300      	str	r3, [sp, #0]
 8007886:	f241 3388 	movw	r3, #5000	; 0x1388
 800788a:	2249      	movs	r2, #73	; 0x49
 800788c:	f44f 7116 	mov.w	r1, #600	; 0x258
 8007890:	f242 7010 	movw	r0, #10000	; 0x2710
 8007894:	f7fd fe00 	bl	8005498 <slalomF>
		slalomR(-V45_2_DEGACCEL, -V45_2_OMEGA, -45, SPEED_MIDDLE);
 8007898:	f44f 7316 	mov.w	r3, #600	; 0x258
 800789c:	f06f 022c 	mvn.w	r2, #44	; 0x2c
 80078a0:	4984      	ldr	r1, [pc, #528]	; (8007ab4 <v_R45+0x328>)
 80078a2:	4885      	ldr	r0, [pc, #532]	; (8007ab8 <v_R45+0x32c>)
 80078a4:	f7fd feae 	bl	8005604 <slalomR>
		turn_dir(DIR_TURN_R45_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 80078a8:	2103      	movs	r1, #3
 80078aa:	2001      	movs	r0, #1
 80078ac:	f008 fb14 	bl	800fed8 <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 80078b0:	4b7d      	ldr	r3, [pc, #500]	; (8007aa8 <v_R45+0x31c>)
 80078b2:	881b      	ldrh	r3, [r3, #0]
 80078b4:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80078b8:	b2db      	uxtb	r3, r3
 80078ba:	3301      	adds	r3, #1
 80078bc:	2b00      	cmp	r3, #0
 80078be:	f003 0301 	and.w	r3, r3, #1
 80078c2:	bfb8      	it	lt
 80078c4:	425b      	neglt	r3, r3
 80078c6:	f003 0301 	and.w	r3, r3, #1
 80078ca:	b2d9      	uxtb	r1, r3
 80078cc:	4a76      	ldr	r2, [pc, #472]	; (8007aa8 <v_R45+0x31c>)
 80078ce:	8813      	ldrh	r3, [r2, #0]
 80078d0:	f361 03c3 	bfi	r3, r1, #3, #1
 80078d4:	8013      	strh	r3, [r2, #0]
		if(!MF2.FLAG.V){
 80078d6:	4b74      	ldr	r3, [pc, #464]	; (8007aa8 <v_R45+0x31c>)
 80078d8:	881b      	ldrh	r3, [r3, #0]
 80078da:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80078de:	b2db      	uxtb	r3, r3
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d107      	bne.n	80078f4 <v_R45+0x168>
			slalomB(10000, SPEED_MIDDLE, V45_2_OFFSET_VB);
 80078e4:	2237      	movs	r2, #55	; 0x37
 80078e6:	f44f 7116 	mov.w	r1, #600	; 0x258
 80078ea:	f242 7010 	movw	r0, #10000	; 0x2710
 80078ee:	f7fd ffab 	bl	8005848 <slalomB>
}
 80078f2:	e128      	b.n	8007b46 <v_R45+0x3ba>
			slalomB(10000, SPEED_MIDDLE, V45_2_OFFSET_B);
 80078f4:	225d      	movs	r2, #93	; 0x5d
 80078f6:	f44f 7116 	mov.w	r1, #600	; 0x258
 80078fa:	f242 7010 	movw	r0, #10000	; 0x2710
 80078fe:	f7fd ffa3 	bl	8005848 <slalomB>
}
 8007902:	e120      	b.n	8007b46 <v_R45+0x3ba>
	}else if(run_mode == HIGH){
 8007904:	4b67      	ldr	r3, [pc, #412]	; (8007aa4 <v_R45+0x318>)
 8007906:	781b      	ldrb	r3, [r3, #0]
 8007908:	b2db      	uxtb	r3, r3
 800790a:	2b03      	cmp	r3, #3
 800790c:	d155      	bne.n	80079ba <v_R45+0x22e>
		if(!MF2.FLAG.V){
 800790e:	4b66      	ldr	r3, [pc, #408]	; (8007aa8 <v_R45+0x31c>)
 8007910:	881b      	ldrh	r3, [r3, #0]
 8007912:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8007916:	b2db      	uxtb	r3, r3
 8007918:	2b00      	cmp	r3, #0
 800791a:	d10c      	bne.n	8007936 <v_R45+0x1aa>
			slalomF(10000, SPEED_HIGH, V45_3_OFFSET_F, NO_WALL, NO_WALL);
 800791c:	f241 3388 	movw	r3, #5000	; 0x1388
 8007920:	9300      	str	r3, [sp, #0]
 8007922:	f241 3388 	movw	r3, #5000	; 0x1388
 8007926:	2217      	movs	r2, #23
 8007928:	f44f 7148 	mov.w	r1, #800	; 0x320
 800792c:	f242 7010 	movw	r0, #10000	; 0x2710
 8007930:	f7fd fdb2 	bl	8005498 <slalomF>
 8007934:	e00b      	b.n	800794e <v_R45+0x1c2>
			slalomF(10000, SPEED_HIGH, V45_3_OFFSET_VF, NO_WALL, NO_WALL);
 8007936:	f241 3388 	movw	r3, #5000	; 0x1388
 800793a:	9300      	str	r3, [sp, #0]
 800793c:	f241 3388 	movw	r3, #5000	; 0x1388
 8007940:	2237      	movs	r2, #55	; 0x37
 8007942:	f44f 7148 	mov.w	r1, #800	; 0x320
 8007946:	f242 7010 	movw	r0, #10000	; 0x2710
 800794a:	f7fd fda5 	bl	8005498 <slalomF>
		slalomR(-V45_3_DEGACCEL, -V45_3_OMEGA, -45, SPEED_HIGH);
 800794e:	f44f 7348 	mov.w	r3, #800	; 0x320
 8007952:	f06f 022c 	mvn.w	r2, #44	; 0x2c
 8007956:	4957      	ldr	r1, [pc, #348]	; (8007ab4 <v_R45+0x328>)
 8007958:	4857      	ldr	r0, [pc, #348]	; (8007ab8 <v_R45+0x32c>)
 800795a:	f7fd fe53 	bl	8005604 <slalomR>
		turn_dir(DIR_TURN_R45_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 800795e:	2103      	movs	r1, #3
 8007960:	2001      	movs	r0, #1
 8007962:	f008 fab9 	bl	800fed8 <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 8007966:	4b50      	ldr	r3, [pc, #320]	; (8007aa8 <v_R45+0x31c>)
 8007968:	881b      	ldrh	r3, [r3, #0]
 800796a:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800796e:	b2db      	uxtb	r3, r3
 8007970:	3301      	adds	r3, #1
 8007972:	2b00      	cmp	r3, #0
 8007974:	f003 0301 	and.w	r3, r3, #1
 8007978:	bfb8      	it	lt
 800797a:	425b      	neglt	r3, r3
 800797c:	f003 0301 	and.w	r3, r3, #1
 8007980:	b2d9      	uxtb	r1, r3
 8007982:	4a49      	ldr	r2, [pc, #292]	; (8007aa8 <v_R45+0x31c>)
 8007984:	8813      	ldrh	r3, [r2, #0]
 8007986:	f361 03c3 	bfi	r3, r1, #3, #1
 800798a:	8013      	strh	r3, [r2, #0]
		if(!MF2.FLAG.V){
 800798c:	4b46      	ldr	r3, [pc, #280]	; (8007aa8 <v_R45+0x31c>)
 800798e:	881b      	ldrh	r3, [r3, #0]
 8007990:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8007994:	b2db      	uxtb	r3, r3
 8007996:	2b00      	cmp	r3, #0
 8007998:	d107      	bne.n	80079aa <v_R45+0x21e>
			slalomB(10000, SPEED_HIGH, V45_3_OFFSET_VB);
 800799a:	2233      	movs	r2, #51	; 0x33
 800799c:	f44f 7148 	mov.w	r1, #800	; 0x320
 80079a0:	f242 7010 	movw	r0, #10000	; 0x2710
 80079a4:	f7fd ff50 	bl	8005848 <slalomB>
}
 80079a8:	e0cd      	b.n	8007b46 <v_R45+0x3ba>
			slalomB(10000, SPEED_HIGH, V45_3_OFFSET_B);
 80079aa:	224b      	movs	r2, #75	; 0x4b
 80079ac:	f44f 7148 	mov.w	r1, #800	; 0x320
 80079b0:	f242 7010 	movw	r0, #10000	; 0x2710
 80079b4:	f7fd ff48 	bl	8005848 <slalomB>
}
 80079b8:	e0c5      	b.n	8007b46 <v_R45+0x3ba>
	}else if(run_mode == HIGH_HIGH){
 80079ba:	4b3a      	ldr	r3, [pc, #232]	; (8007aa4 <v_R45+0x318>)
 80079bc:	781b      	ldrb	r3, [r3, #0]
 80079be:	b2db      	uxtb	r3, r3
 80079c0:	2b04      	cmp	r3, #4
 80079c2:	d155      	bne.n	8007a70 <v_R45+0x2e4>
		if(!MF2.FLAG.V){
 80079c4:	4b38      	ldr	r3, [pc, #224]	; (8007aa8 <v_R45+0x31c>)
 80079c6:	881b      	ldrh	r3, [r3, #0]
 80079c8:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80079cc:	b2db      	uxtb	r3, r3
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d10c      	bne.n	80079ec <v_R45+0x260>
			slalomF(10000, SPEED_HIGH_HIGH, V45_4_OFFSET_F, NO_WALL, NO_WALL);
 80079d2:	f241 3388 	movw	r3, #5000	; 0x1388
 80079d6:	9300      	str	r3, [sp, #0]
 80079d8:	f241 3388 	movw	r3, #5000	; 0x1388
 80079dc:	2214      	movs	r2, #20
 80079de:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80079e2:	f242 7010 	movw	r0, #10000	; 0x2710
 80079e6:	f7fd fd57 	bl	8005498 <slalomF>
 80079ea:	e00b      	b.n	8007a04 <v_R45+0x278>
			slalomF(10000, SPEED_HIGH_HIGH, V45_4_OFFSET_VF, NO_WALL, NO_WALL);
 80079ec:	f241 3388 	movw	r3, #5000	; 0x1388
 80079f0:	9300      	str	r3, [sp, #0]
 80079f2:	f241 3388 	movw	r3, #5000	; 0x1388
 80079f6:	2214      	movs	r2, #20
 80079f8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80079fc:	f242 7010 	movw	r0, #10000	; 0x2710
 8007a00:	f7fd fd4a 	bl	8005498 <slalomF>
		slalomR(-V45_4_DEGACCEL, -V45_4_OMEGA, -45, SPEED_HIGH_HIGH);
 8007a04:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007a08:	f06f 022c 	mvn.w	r2, #44	; 0x2c
 8007a0c:	492b      	ldr	r1, [pc, #172]	; (8007abc <v_R45+0x330>)
 8007a0e:	482c      	ldr	r0, [pc, #176]	; (8007ac0 <v_R45+0x334>)
 8007a10:	f7fd fdf8 	bl	8005604 <slalomR>
		turn_dir(DIR_TURN_R45_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 8007a14:	2103      	movs	r1, #3
 8007a16:	2001      	movs	r0, #1
 8007a18:	f008 fa5e 	bl	800fed8 <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 8007a1c:	4b22      	ldr	r3, [pc, #136]	; (8007aa8 <v_R45+0x31c>)
 8007a1e:	881b      	ldrh	r3, [r3, #0]
 8007a20:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8007a24:	b2db      	uxtb	r3, r3
 8007a26:	3301      	adds	r3, #1
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	f003 0301 	and.w	r3, r3, #1
 8007a2e:	bfb8      	it	lt
 8007a30:	425b      	neglt	r3, r3
 8007a32:	f003 0301 	and.w	r3, r3, #1
 8007a36:	b2d9      	uxtb	r1, r3
 8007a38:	4a1b      	ldr	r2, [pc, #108]	; (8007aa8 <v_R45+0x31c>)
 8007a3a:	8813      	ldrh	r3, [r2, #0]
 8007a3c:	f361 03c3 	bfi	r3, r1, #3, #1
 8007a40:	8013      	strh	r3, [r2, #0]
		if(!MF2.FLAG.V){
 8007a42:	4b19      	ldr	r3, [pc, #100]	; (8007aa8 <v_R45+0x31c>)
 8007a44:	881b      	ldrh	r3, [r3, #0]
 8007a46:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8007a4a:	b2db      	uxtb	r3, r3
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d107      	bne.n	8007a60 <v_R45+0x2d4>
			slalomB(10000, SPEED_HIGH_HIGH, V45_4_OFFSET_VB);
 8007a50:	223a      	movs	r2, #58	; 0x3a
 8007a52:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8007a56:	f242 7010 	movw	r0, #10000	; 0x2710
 8007a5a:	f7fd fef5 	bl	8005848 <slalomB>
}
 8007a5e:	e072      	b.n	8007b46 <v_R45+0x3ba>
			slalomB(10000, SPEED_HIGH_HIGH, V45_4_OFFSET_B);
 8007a60:	223a      	movs	r2, #58	; 0x3a
 8007a62:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8007a66:	f242 7010 	movw	r0, #10000	; 0x2710
 8007a6a:	f7fd feed 	bl	8005848 <slalomB>
}
 8007a6e:	e06a      	b.n	8007b46 <v_R45+0x3ba>
	}else if(run_mode == 5){
 8007a70:	4b0c      	ldr	r3, [pc, #48]	; (8007aa4 <v_R45+0x318>)
 8007a72:	781b      	ldrb	r3, [r3, #0]
 8007a74:	b2db      	uxtb	r3, r3
 8007a76:	2b05      	cmp	r3, #5
 8007a78:	d165      	bne.n	8007b46 <v_R45+0x3ba>
		if(!MF2.FLAG.V){
 8007a7a:	4b0b      	ldr	r3, [pc, #44]	; (8007aa8 <v_R45+0x31c>)
 8007a7c:	881b      	ldrh	r3, [r3, #0]
 8007a7e:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8007a82:	b2db      	uxtb	r3, r3
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d11d      	bne.n	8007ac4 <v_R45+0x338>
			slalomF(10000, SPEED_5, V45_5_OFFSET_F, NO_WALL, NO_WALL);
 8007a88:	f241 3388 	movw	r3, #5000	; 0x1388
 8007a8c:	9300      	str	r3, [sp, #0]
 8007a8e:	f241 3388 	movw	r3, #5000	; 0x1388
 8007a92:	2218      	movs	r2, #24
 8007a94:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 8007a98:	f242 7010 	movw	r0, #10000	; 0x2710
 8007a9c:	f7fd fcfc 	bl	8005498 <slalomF>
 8007aa0:	e01c      	b.n	8007adc <v_R45+0x350>
 8007aa2:	bf00      	nop
 8007aa4:	20000456 	.word	0x20000456
 8007aa8:	20000f64 	.word	0x20000f64
 8007aac:	fffffed4 	.word	0xfffffed4
 8007ab0:	fffff448 	.word	0xfffff448
 8007ab4:	fffffe70 	.word	0xfffffe70
 8007ab8:	ffffe0c0 	.word	0xffffe0c0
 8007abc:	fffffda8 	.word	0xfffffda8
 8007ac0:	ffffd8f0 	.word	0xffffd8f0
			slalomF(10000, SPEED_5, V45_5_OFFSET_VF, NO_WALL, NO_WALL);
 8007ac4:	f241 3388 	movw	r3, #5000	; 0x1388
 8007ac8:	9300      	str	r3, [sp, #0]
 8007aca:	f241 3388 	movw	r3, #5000	; 0x1388
 8007ace:	2214      	movs	r2, #20
 8007ad0:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 8007ad4:	f242 7010 	movw	r0, #10000	; 0x2710
 8007ad8:	f7fd fcde 	bl	8005498 <slalomF>
		slalomR(-V45_5_DEGACCEL, -V45_5_OMEGA, -45, SPEED_5);
 8007adc:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
 8007ae0:	f06f 022c 	mvn.w	r2, #44	; 0x2c
 8007ae4:	4919      	ldr	r1, [pc, #100]	; (8007b4c <v_R45+0x3c0>)
 8007ae6:	481a      	ldr	r0, [pc, #104]	; (8007b50 <v_R45+0x3c4>)
 8007ae8:	f7fd fd8c 	bl	8005604 <slalomR>
		turn_dir(DIR_TURN_R45_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 8007aec:	2103      	movs	r1, #3
 8007aee:	2001      	movs	r0, #1
 8007af0:	f008 f9f2 	bl	800fed8 <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 8007af4:	4b17      	ldr	r3, [pc, #92]	; (8007b54 <v_R45+0x3c8>)
 8007af6:	881b      	ldrh	r3, [r3, #0]
 8007af8:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8007afc:	b2db      	uxtb	r3, r3
 8007afe:	3301      	adds	r3, #1
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	f003 0301 	and.w	r3, r3, #1
 8007b06:	bfb8      	it	lt
 8007b08:	425b      	neglt	r3, r3
 8007b0a:	f003 0301 	and.w	r3, r3, #1
 8007b0e:	b2d9      	uxtb	r1, r3
 8007b10:	4a10      	ldr	r2, [pc, #64]	; (8007b54 <v_R45+0x3c8>)
 8007b12:	8813      	ldrh	r3, [r2, #0]
 8007b14:	f361 03c3 	bfi	r3, r1, #3, #1
 8007b18:	8013      	strh	r3, [r2, #0]
		if(!MF2.FLAG.V){
 8007b1a:	4b0e      	ldr	r3, [pc, #56]	; (8007b54 <v_R45+0x3c8>)
 8007b1c:	881b      	ldrh	r3, [r3, #0]
 8007b1e:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8007b22:	b2db      	uxtb	r3, r3
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d107      	bne.n	8007b38 <v_R45+0x3ac>
			slalomB(10000, SPEED_5, V45_5_OFFSET_VB);
 8007b28:	223a      	movs	r2, #58	; 0x3a
 8007b2a:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 8007b2e:	f242 7010 	movw	r0, #10000	; 0x2710
 8007b32:	f7fd fe89 	bl	8005848 <slalomB>
}
 8007b36:	e006      	b.n	8007b46 <v_R45+0x3ba>
			slalomB(10000, SPEED_5, V45_5_OFFSET_B);
 8007b38:	223d      	movs	r2, #61	; 0x3d
 8007b3a:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 8007b3e:	f242 7010 	movw	r0, #10000	; 0x2710
 8007b42:	f7fd fe81 	bl	8005848 <slalomB>
}
 8007b46:	bf00      	nop
 8007b48:	46bd      	mov	sp, r7
 8007b4a:	bd80      	pop	{r7, pc}
 8007b4c:	fffffce0 	.word	0xfffffce0
 8007b50:	ffffc180 	.word	0xffffc180
 8007b54:	20000f64 	.word	0x20000f64

08007b58 <v_L45>:
//v_L45
// 区画中心から左に45度回転する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void v_L45(void){
 8007b58:	b580      	push	{r7, lr}
 8007b5a:	b082      	sub	sp, #8
 8007b5c:	af02      	add	r7, sp, #8
	full_led_write(YELLOW);
 8007b5e:	2006      	movs	r0, #6
 8007b60:	f00a f84e 	bl	8011c00 <full_led_write>
	if(run_mode == LOW){
 8007b64:	4bc4      	ldr	r3, [pc, #784]	; (8007e78 <v_L45+0x320>)
 8007b66:	781b      	ldrb	r3, [r3, #0]
 8007b68:	b2db      	uxtb	r3, r3
 8007b6a:	2b01      	cmp	r3, #1
 8007b6c:	d156      	bne.n	8007c1c <v_L45+0xc4>
		if(!MF2.FLAG.V){
 8007b6e:	4bc3      	ldr	r3, [pc, #780]	; (8007e7c <v_L45+0x324>)
 8007b70:	881b      	ldrh	r3, [r3, #0]
 8007b72:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8007b76:	b2db      	uxtb	r3, r3
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d10c      	bne.n	8007b96 <v_L45+0x3e>
			slalomF(10000, SPEED_LOW, V45_OFFSET_F, NO_WALL, NO_WALL);
 8007b7c:	f241 3388 	movw	r3, #5000	; 0x1388
 8007b80:	9300      	str	r3, [sp, #0]
 8007b82:	f241 3388 	movw	r3, #5000	; 0x1388
 8007b86:	2228      	movs	r2, #40	; 0x28
 8007b88:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8007b8c:	f242 7010 	movw	r0, #10000	; 0x2710
 8007b90:	f7fd fc82 	bl	8005498 <slalomF>
 8007b94:	e00b      	b.n	8007bae <v_L45+0x56>
		}else{
			slalomF(10000, SPEED_LOW, V45_OFFSET_VF, NO_WALL, NO_WALL);
 8007b96:	f241 3388 	movw	r3, #5000	; 0x1388
 8007b9a:	9300      	str	r3, [sp, #0]
 8007b9c:	f241 3388 	movw	r3, #5000	; 0x1388
 8007ba0:	2255      	movs	r2, #85	; 0x55
 8007ba2:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8007ba6:	f242 7010 	movw	r0, #10000	; 0x2710
 8007baa:	f7fd fc75 	bl	8005498 <slalomF>
		}
		slalomR(V45_DEGACCEL, V45_OMEGA, 45, SPEED_LOW);
 8007bae:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8007bb2:	222d      	movs	r2, #45	; 0x2d
 8007bb4:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8007bb8:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8007bbc:	f7fd fd22 	bl	8005604 <slalomR>

		turn_dir(DIR_TURN_L45_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 8007bc0:	2103      	movs	r1, #3
 8007bc2:	20ff      	movs	r0, #255	; 0xff
 8007bc4:	f008 f988 	bl	800fed8 <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 8007bc8:	4bac      	ldr	r3, [pc, #688]	; (8007e7c <v_L45+0x324>)
 8007bca:	881b      	ldrh	r3, [r3, #0]
 8007bcc:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8007bd0:	b2db      	uxtb	r3, r3
 8007bd2:	3301      	adds	r3, #1
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	f003 0301 	and.w	r3, r3, #1
 8007bda:	bfb8      	it	lt
 8007bdc:	425b      	neglt	r3, r3
 8007bde:	f003 0301 	and.w	r3, r3, #1
 8007be2:	b2d9      	uxtb	r1, r3
 8007be4:	4aa5      	ldr	r2, [pc, #660]	; (8007e7c <v_L45+0x324>)
 8007be6:	8813      	ldrh	r3, [r2, #0]
 8007be8:	f361 03c3 	bfi	r3, r1, #3, #1
 8007bec:	8013      	strh	r3, [r2, #0]

		if(!MF2.FLAG.V){
 8007bee:	4ba3      	ldr	r3, [pc, #652]	; (8007e7c <v_L45+0x324>)
 8007bf0:	881b      	ldrh	r3, [r3, #0]
 8007bf2:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8007bf6:	b2db      	uxtb	r3, r3
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d107      	bne.n	8007c0c <v_L45+0xb4>
			slalomB(10000, SPEED_LOW, V45_OFFSET_VB);
 8007bfc:	2228      	movs	r2, #40	; 0x28
 8007bfe:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8007c02:	f242 7010 	movw	r0, #10000	; 0x2710
 8007c06:	f7fd fe1f 	bl	8005848 <slalomB>
			slalomB(10000, SPEED_5, V45_5_OFFSET_VB);
		}else{
			slalomB(10000, SPEED_5, V45_5_OFFSET_B);
		}
	}
}
 8007c0a:	e17b      	b.n	8007f04 <v_L45+0x3ac>
			slalomB(10000, SPEED_LOW, V45_OFFSET_B);
 8007c0c:	2255      	movs	r2, #85	; 0x55
 8007c0e:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8007c12:	f242 7010 	movw	r0, #10000	; 0x2710
 8007c16:	f7fd fe17 	bl	8005848 <slalomB>
}
 8007c1a:	e173      	b.n	8007f04 <v_L45+0x3ac>
	}else if(run_mode == MIDDLE){
 8007c1c:	4b96      	ldr	r3, [pc, #600]	; (8007e78 <v_L45+0x320>)
 8007c1e:	781b      	ldrb	r3, [r3, #0]
 8007c20:	b2db      	uxtb	r3, r3
 8007c22:	2b02      	cmp	r3, #2
 8007c24:	d156      	bne.n	8007cd4 <v_L45+0x17c>
		if(!MF2.FLAG.V){
 8007c26:	4b95      	ldr	r3, [pc, #596]	; (8007e7c <v_L45+0x324>)
 8007c28:	881b      	ldrh	r3, [r3, #0]
 8007c2a:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8007c2e:	b2db      	uxtb	r3, r3
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d10c      	bne.n	8007c4e <v_L45+0xf6>
			slalomF(10000, SPEED_MIDDLE, V45_2_OFFSET_F, NO_WALL, NO_WALL);
 8007c34:	f241 3388 	movw	r3, #5000	; 0x1388
 8007c38:	9300      	str	r3, [sp, #0]
 8007c3a:	f241 3388 	movw	r3, #5000	; 0x1388
 8007c3e:	2228      	movs	r2, #40	; 0x28
 8007c40:	f44f 7116 	mov.w	r1, #600	; 0x258
 8007c44:	f242 7010 	movw	r0, #10000	; 0x2710
 8007c48:	f7fd fc26 	bl	8005498 <slalomF>
 8007c4c:	e00b      	b.n	8007c66 <v_L45+0x10e>
			slalomF(10000, SPEED_MIDDLE, V45_2_OFFSET_VF, NO_WALL, NO_WALL);
 8007c4e:	f241 3388 	movw	r3, #5000	; 0x1388
 8007c52:	9300      	str	r3, [sp, #0]
 8007c54:	f241 3388 	movw	r3, #5000	; 0x1388
 8007c58:	2249      	movs	r2, #73	; 0x49
 8007c5a:	f44f 7116 	mov.w	r1, #600	; 0x258
 8007c5e:	f242 7010 	movw	r0, #10000	; 0x2710
 8007c62:	f7fd fc19 	bl	8005498 <slalomF>
		slalomR(V45_2_DEGACCEL, V45_2_OMEGA, 45, SPEED_MIDDLE);
 8007c66:	f44f 7316 	mov.w	r3, #600	; 0x258
 8007c6a:	222d      	movs	r2, #45	; 0x2d
 8007c6c:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8007c70:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 8007c74:	f7fd fcc6 	bl	8005604 <slalomR>
		turn_dir(DIR_TURN_L45_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 8007c78:	2103      	movs	r1, #3
 8007c7a:	20ff      	movs	r0, #255	; 0xff
 8007c7c:	f008 f92c 	bl	800fed8 <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 8007c80:	4b7e      	ldr	r3, [pc, #504]	; (8007e7c <v_L45+0x324>)
 8007c82:	881b      	ldrh	r3, [r3, #0]
 8007c84:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8007c88:	b2db      	uxtb	r3, r3
 8007c8a:	3301      	adds	r3, #1
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	f003 0301 	and.w	r3, r3, #1
 8007c92:	bfb8      	it	lt
 8007c94:	425b      	neglt	r3, r3
 8007c96:	f003 0301 	and.w	r3, r3, #1
 8007c9a:	b2d9      	uxtb	r1, r3
 8007c9c:	4a77      	ldr	r2, [pc, #476]	; (8007e7c <v_L45+0x324>)
 8007c9e:	8813      	ldrh	r3, [r2, #0]
 8007ca0:	f361 03c3 	bfi	r3, r1, #3, #1
 8007ca4:	8013      	strh	r3, [r2, #0]
		if(!MF2.FLAG.V){
 8007ca6:	4b75      	ldr	r3, [pc, #468]	; (8007e7c <v_L45+0x324>)
 8007ca8:	881b      	ldrh	r3, [r3, #0]
 8007caa:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8007cae:	b2db      	uxtb	r3, r3
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d107      	bne.n	8007cc4 <v_L45+0x16c>
			slalomB(10000, SPEED_MIDDLE, V45_2_OFFSET_VB);
 8007cb4:	2237      	movs	r2, #55	; 0x37
 8007cb6:	f44f 7116 	mov.w	r1, #600	; 0x258
 8007cba:	f242 7010 	movw	r0, #10000	; 0x2710
 8007cbe:	f7fd fdc3 	bl	8005848 <slalomB>
}
 8007cc2:	e11f      	b.n	8007f04 <v_L45+0x3ac>
			slalomB(10000, SPEED_MIDDLE, V45_2_OFFSET_B);
 8007cc4:	225d      	movs	r2, #93	; 0x5d
 8007cc6:	f44f 7116 	mov.w	r1, #600	; 0x258
 8007cca:	f242 7010 	movw	r0, #10000	; 0x2710
 8007cce:	f7fd fdbb 	bl	8005848 <slalomB>
}
 8007cd2:	e117      	b.n	8007f04 <v_L45+0x3ac>
	}else if(run_mode == HIGH){
 8007cd4:	4b68      	ldr	r3, [pc, #416]	; (8007e78 <v_L45+0x320>)
 8007cd6:	781b      	ldrb	r3, [r3, #0]
 8007cd8:	b2db      	uxtb	r3, r3
 8007cda:	2b03      	cmp	r3, #3
 8007cdc:	d156      	bne.n	8007d8c <v_L45+0x234>
		if(!MF2.FLAG.V){
 8007cde:	4b67      	ldr	r3, [pc, #412]	; (8007e7c <v_L45+0x324>)
 8007ce0:	881b      	ldrh	r3, [r3, #0]
 8007ce2:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8007ce6:	b2db      	uxtb	r3, r3
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d10c      	bne.n	8007d06 <v_L45+0x1ae>
			slalomF(10000, SPEED_HIGH, V45_3_OFFSET_F+5, NO_WALL, NO_WALL);
 8007cec:	f241 3388 	movw	r3, #5000	; 0x1388
 8007cf0:	9300      	str	r3, [sp, #0]
 8007cf2:	f241 3388 	movw	r3, #5000	; 0x1388
 8007cf6:	221c      	movs	r2, #28
 8007cf8:	f44f 7148 	mov.w	r1, #800	; 0x320
 8007cfc:	f242 7010 	movw	r0, #10000	; 0x2710
 8007d00:	f7fd fbca 	bl	8005498 <slalomF>
 8007d04:	e00b      	b.n	8007d1e <v_L45+0x1c6>
			slalomF(10000, SPEED_HIGH, V45_3_OFFSET_VF, NO_WALL, NO_WALL);
 8007d06:	f241 3388 	movw	r3, #5000	; 0x1388
 8007d0a:	9300      	str	r3, [sp, #0]
 8007d0c:	f241 3388 	movw	r3, #5000	; 0x1388
 8007d10:	2237      	movs	r2, #55	; 0x37
 8007d12:	f44f 7148 	mov.w	r1, #800	; 0x320
 8007d16:	f242 7010 	movw	r0, #10000	; 0x2710
 8007d1a:	f7fd fbbd 	bl	8005498 <slalomF>
		slalomR(V45_3_DEGACCEL, V45_3_OMEGA, 45, SPEED_HIGH);
 8007d1e:	f44f 7348 	mov.w	r3, #800	; 0x320
 8007d22:	222d      	movs	r2, #45	; 0x2d
 8007d24:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8007d28:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 8007d2c:	f7fd fc6a 	bl	8005604 <slalomR>
		turn_dir(DIR_TURN_L45_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 8007d30:	2103      	movs	r1, #3
 8007d32:	20ff      	movs	r0, #255	; 0xff
 8007d34:	f008 f8d0 	bl	800fed8 <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 8007d38:	4b50      	ldr	r3, [pc, #320]	; (8007e7c <v_L45+0x324>)
 8007d3a:	881b      	ldrh	r3, [r3, #0]
 8007d3c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8007d40:	b2db      	uxtb	r3, r3
 8007d42:	3301      	adds	r3, #1
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	f003 0301 	and.w	r3, r3, #1
 8007d4a:	bfb8      	it	lt
 8007d4c:	425b      	neglt	r3, r3
 8007d4e:	f003 0301 	and.w	r3, r3, #1
 8007d52:	b2d9      	uxtb	r1, r3
 8007d54:	4a49      	ldr	r2, [pc, #292]	; (8007e7c <v_L45+0x324>)
 8007d56:	8813      	ldrh	r3, [r2, #0]
 8007d58:	f361 03c3 	bfi	r3, r1, #3, #1
 8007d5c:	8013      	strh	r3, [r2, #0]
		if(!MF2.FLAG.V){
 8007d5e:	4b47      	ldr	r3, [pc, #284]	; (8007e7c <v_L45+0x324>)
 8007d60:	881b      	ldrh	r3, [r3, #0]
 8007d62:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8007d66:	b2db      	uxtb	r3, r3
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d107      	bne.n	8007d7c <v_L45+0x224>
			slalomB(10000, SPEED_HIGH, V45_3_OFFSET_VB);
 8007d6c:	2233      	movs	r2, #51	; 0x33
 8007d6e:	f44f 7148 	mov.w	r1, #800	; 0x320
 8007d72:	f242 7010 	movw	r0, #10000	; 0x2710
 8007d76:	f7fd fd67 	bl	8005848 <slalomB>
}
 8007d7a:	e0c3      	b.n	8007f04 <v_L45+0x3ac>
			slalomB(10000, SPEED_HIGH, V45_3_OFFSET_B);
 8007d7c:	224b      	movs	r2, #75	; 0x4b
 8007d7e:	f44f 7148 	mov.w	r1, #800	; 0x320
 8007d82:	f242 7010 	movw	r0, #10000	; 0x2710
 8007d86:	f7fd fd5f 	bl	8005848 <slalomB>
}
 8007d8a:	e0bb      	b.n	8007f04 <v_L45+0x3ac>
	}else if(run_mode == HIGH_HIGH){
 8007d8c:	4b3a      	ldr	r3, [pc, #232]	; (8007e78 <v_L45+0x320>)
 8007d8e:	781b      	ldrb	r3, [r3, #0]
 8007d90:	b2db      	uxtb	r3, r3
 8007d92:	2b04      	cmp	r3, #4
 8007d94:	d156      	bne.n	8007e44 <v_L45+0x2ec>
		if(!MF2.FLAG.V){
 8007d96:	4b39      	ldr	r3, [pc, #228]	; (8007e7c <v_L45+0x324>)
 8007d98:	881b      	ldrh	r3, [r3, #0]
 8007d9a:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8007d9e:	b2db      	uxtb	r3, r3
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d10c      	bne.n	8007dbe <v_L45+0x266>
			slalomF(10000, SPEED_HIGH_HIGH, V45_4_OFFSET_F, NO_WALL, NO_WALL);
 8007da4:	f241 3388 	movw	r3, #5000	; 0x1388
 8007da8:	9300      	str	r3, [sp, #0]
 8007daa:	f241 3388 	movw	r3, #5000	; 0x1388
 8007dae:	2214      	movs	r2, #20
 8007db0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8007db4:	f242 7010 	movw	r0, #10000	; 0x2710
 8007db8:	f7fd fb6e 	bl	8005498 <slalomF>
 8007dbc:	e00b      	b.n	8007dd6 <v_L45+0x27e>
			slalomF(10000, SPEED_HIGH_HIGH, V45_4_OFFSET_VF, NO_WALL, NO_WALL);
 8007dbe:	f241 3388 	movw	r3, #5000	; 0x1388
 8007dc2:	9300      	str	r3, [sp, #0]
 8007dc4:	f241 3388 	movw	r3, #5000	; 0x1388
 8007dc8:	2214      	movs	r2, #20
 8007dca:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8007dce:	f242 7010 	movw	r0, #10000	; 0x2710
 8007dd2:	f7fd fb61 	bl	8005498 <slalomF>
		slalomR(V45_4_DEGACCEL, V45_4_OMEGA, 45, SPEED_HIGH_HIGH);
 8007dd6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007dda:	222d      	movs	r2, #45	; 0x2d
 8007ddc:	f44f 7116 	mov.w	r1, #600	; 0x258
 8007de0:	f242 7010 	movw	r0, #10000	; 0x2710
 8007de4:	f7fd fc0e 	bl	8005604 <slalomR>
		turn_dir(DIR_TURN_L45_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 8007de8:	2103      	movs	r1, #3
 8007dea:	20ff      	movs	r0, #255	; 0xff
 8007dec:	f008 f874 	bl	800fed8 <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 8007df0:	4b22      	ldr	r3, [pc, #136]	; (8007e7c <v_L45+0x324>)
 8007df2:	881b      	ldrh	r3, [r3, #0]
 8007df4:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8007df8:	b2db      	uxtb	r3, r3
 8007dfa:	3301      	adds	r3, #1
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	f003 0301 	and.w	r3, r3, #1
 8007e02:	bfb8      	it	lt
 8007e04:	425b      	neglt	r3, r3
 8007e06:	f003 0301 	and.w	r3, r3, #1
 8007e0a:	b2d9      	uxtb	r1, r3
 8007e0c:	4a1b      	ldr	r2, [pc, #108]	; (8007e7c <v_L45+0x324>)
 8007e0e:	8813      	ldrh	r3, [r2, #0]
 8007e10:	f361 03c3 	bfi	r3, r1, #3, #1
 8007e14:	8013      	strh	r3, [r2, #0]
		if(!MF2.FLAG.V){
 8007e16:	4b19      	ldr	r3, [pc, #100]	; (8007e7c <v_L45+0x324>)
 8007e18:	881b      	ldrh	r3, [r3, #0]
 8007e1a:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8007e1e:	b2db      	uxtb	r3, r3
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d107      	bne.n	8007e34 <v_L45+0x2dc>
			slalomB(10000, SPEED_HIGH_HIGH, V45_4_OFFSET_VB);
 8007e24:	223a      	movs	r2, #58	; 0x3a
 8007e26:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8007e2a:	f242 7010 	movw	r0, #10000	; 0x2710
 8007e2e:	f7fd fd0b 	bl	8005848 <slalomB>
}
 8007e32:	e067      	b.n	8007f04 <v_L45+0x3ac>
			slalomB(10000, SPEED_HIGH_HIGH, V45_4_OFFSET_B);
 8007e34:	223a      	movs	r2, #58	; 0x3a
 8007e36:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8007e3a:	f242 7010 	movw	r0, #10000	; 0x2710
 8007e3e:	f7fd fd03 	bl	8005848 <slalomB>
}
 8007e42:	e05f      	b.n	8007f04 <v_L45+0x3ac>
	}else if(run_mode == 5){
 8007e44:	4b0c      	ldr	r3, [pc, #48]	; (8007e78 <v_L45+0x320>)
 8007e46:	781b      	ldrb	r3, [r3, #0]
 8007e48:	b2db      	uxtb	r3, r3
 8007e4a:	2b05      	cmp	r3, #5
 8007e4c:	d15a      	bne.n	8007f04 <v_L45+0x3ac>
		if(!MF2.FLAG.V){
 8007e4e:	4b0b      	ldr	r3, [pc, #44]	; (8007e7c <v_L45+0x324>)
 8007e50:	881b      	ldrh	r3, [r3, #0]
 8007e52:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8007e56:	b2db      	uxtb	r3, r3
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d111      	bne.n	8007e80 <v_L45+0x328>
			slalomF(10000, SPEED_5, V45_5_OFFSET_F, NO_WALL, NO_WALL);
 8007e5c:	f241 3388 	movw	r3, #5000	; 0x1388
 8007e60:	9300      	str	r3, [sp, #0]
 8007e62:	f241 3388 	movw	r3, #5000	; 0x1388
 8007e66:	2218      	movs	r2, #24
 8007e68:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 8007e6c:	f242 7010 	movw	r0, #10000	; 0x2710
 8007e70:	f7fd fb12 	bl	8005498 <slalomF>
 8007e74:	e010      	b.n	8007e98 <v_L45+0x340>
 8007e76:	bf00      	nop
 8007e78:	20000456 	.word	0x20000456
 8007e7c:	20000f64 	.word	0x20000f64
			slalomF(10000, SPEED_5, V45_5_OFFSET_VF, NO_WALL, NO_WALL);
 8007e80:	f241 3388 	movw	r3, #5000	; 0x1388
 8007e84:	9300      	str	r3, [sp, #0]
 8007e86:	f241 3388 	movw	r3, #5000	; 0x1388
 8007e8a:	2214      	movs	r2, #20
 8007e8c:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 8007e90:	f242 7010 	movw	r0, #10000	; 0x2710
 8007e94:	f7fd fb00 	bl	8005498 <slalomF>
		slalomR(V45_5_DEGACCEL, V45_5_OMEGA, 45, SPEED_5);
 8007e98:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
 8007e9c:	222d      	movs	r2, #45	; 0x2d
 8007e9e:	f44f 7148 	mov.w	r1, #800	; 0x320
 8007ea2:	f44f 507a 	mov.w	r0, #16000	; 0x3e80
 8007ea6:	f7fd fbad 	bl	8005604 <slalomR>
		turn_dir(DIR_TURN_L45_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 8007eaa:	2103      	movs	r1, #3
 8007eac:	20ff      	movs	r0, #255	; 0xff
 8007eae:	f008 f813 	bl	800fed8 <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 8007eb2:	4b16      	ldr	r3, [pc, #88]	; (8007f0c <v_L45+0x3b4>)
 8007eb4:	881b      	ldrh	r3, [r3, #0]
 8007eb6:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8007eba:	b2db      	uxtb	r3, r3
 8007ebc:	3301      	adds	r3, #1
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	f003 0301 	and.w	r3, r3, #1
 8007ec4:	bfb8      	it	lt
 8007ec6:	425b      	neglt	r3, r3
 8007ec8:	f003 0301 	and.w	r3, r3, #1
 8007ecc:	b2d9      	uxtb	r1, r3
 8007ece:	4a0f      	ldr	r2, [pc, #60]	; (8007f0c <v_L45+0x3b4>)
 8007ed0:	8813      	ldrh	r3, [r2, #0]
 8007ed2:	f361 03c3 	bfi	r3, r1, #3, #1
 8007ed6:	8013      	strh	r3, [r2, #0]
		if(!MF2.FLAG.V){
 8007ed8:	4b0c      	ldr	r3, [pc, #48]	; (8007f0c <v_L45+0x3b4>)
 8007eda:	881b      	ldrh	r3, [r3, #0]
 8007edc:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8007ee0:	b2db      	uxtb	r3, r3
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d107      	bne.n	8007ef6 <v_L45+0x39e>
			slalomB(10000, SPEED_5, V45_5_OFFSET_VB);
 8007ee6:	223a      	movs	r2, #58	; 0x3a
 8007ee8:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 8007eec:	f242 7010 	movw	r0, #10000	; 0x2710
 8007ef0:	f7fd fcaa 	bl	8005848 <slalomB>
}
 8007ef4:	e006      	b.n	8007f04 <v_L45+0x3ac>
			slalomB(10000, SPEED_5, V45_5_OFFSET_B);
 8007ef6:	223d      	movs	r2, #61	; 0x3d
 8007ef8:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 8007efc:	f242 7010 	movw	r0, #10000	; 0x2710
 8007f00:	f7fd fca2 	bl	8005848 <slalomB>
}
 8007f04:	bf00      	nop
 8007f06:	46bd      	mov	sp, r7
 8007f08:	bd80      	pop	{r7, pc}
 8007f0a:	bf00      	nop
 8007f0c:	20000f64 	.word	0x20000f64

08007f10 <v_R45D>:
//v_R45D
//a区画中心から右に45度回転する　ゴール用
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void v_R45D(void){
 8007f10:	b580      	push	{r7, lr}
 8007f12:	b082      	sub	sp, #8
 8007f14:	af02      	add	r7, sp, #8
	full_led_write(PURPLE);
 8007f16:	2005      	movs	r0, #5
 8007f18:	f009 fe72 	bl	8011c00 <full_led_write>
	if(run_mode == LOW){
 8007f1c:	4b9e      	ldr	r3, [pc, #632]	; (8008198 <v_R45D+0x288>)
 8007f1e:	781b      	ldrb	r3, [r3, #0]
 8007f20:	b2db      	uxtb	r3, r3
 8007f22:	2b01      	cmp	r3, #1
 8007f24:	d139      	bne.n	8007f9a <v_R45D+0x8a>
		slalomF(10000, SPEED_LOW, V45_OFFSET_VF, NO_WALL, NO_WALL);
 8007f26:	f241 3388 	movw	r3, #5000	; 0x1388
 8007f2a:	9300      	str	r3, [sp, #0]
 8007f2c:	f241 3388 	movw	r3, #5000	; 0x1388
 8007f30:	2255      	movs	r2, #85	; 0x55
 8007f32:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8007f36:	f242 7010 	movw	r0, #10000	; 0x2710
 8007f3a:	f7fd faad 	bl	8005498 <slalomF>
		slalomR(-V45_DEGACCEL, -V45_OMEGA, -45, SPEED_LOW);
 8007f3e:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8007f42:	f06f 022c 	mvn.w	r2, #44	; 0x2c
 8007f46:	4995      	ldr	r1, [pc, #596]	; (800819c <v_R45D+0x28c>)
 8007f48:	4895      	ldr	r0, [pc, #596]	; (80081a0 <v_R45D+0x290>)
 8007f4a:	f7fd fb5b 	bl	8005604 <slalomR>

		turn_dir(DIR_TURN_R45_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 8007f4e:	2103      	movs	r1, #3
 8007f50:	2001      	movs	r0, #1
 8007f52:	f007 ffc1 	bl	800fed8 <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 8007f56:	4b93      	ldr	r3, [pc, #588]	; (80081a4 <v_R45D+0x294>)
 8007f58:	881b      	ldrh	r3, [r3, #0]
 8007f5a:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8007f5e:	b2db      	uxtb	r3, r3
 8007f60:	3301      	adds	r3, #1
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	f003 0301 	and.w	r3, r3, #1
 8007f68:	bfb8      	it	lt
 8007f6a:	425b      	neglt	r3, r3
 8007f6c:	f003 0301 	and.w	r3, r3, #1
 8007f70:	b2d9      	uxtb	r1, r3
 8007f72:	4a8c      	ldr	r2, [pc, #560]	; (80081a4 <v_R45D+0x294>)
 8007f74:	8813      	ldrh	r3, [r2, #0]
 8007f76:	f361 03c3 	bfi	r3, r1, #3, #1
 8007f7a:	8013      	strh	r3, [r2, #0]

		slalomB(10000, SPEED_LOW, V45_OFFSET_VB-30);
 8007f7c:	220a      	movs	r2, #10
 8007f7e:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8007f82:	f242 7010 	movw	r0, #10000	; 0x2710
 8007f86:	f7fd fc5f 	bl	8005848 <slalomB>
		driveD(-30000, SPEED_MIN, SPEED_LOW, 30);
 8007f8a:	231e      	movs	r3, #30
 8007f8c:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8007f90:	211e      	movs	r1, #30
 8007f92:	4885      	ldr	r0, [pc, #532]	; (80081a8 <v_R45D+0x298>)
 8007f94:	f7fd f8a8 	bl	80050e8 <driveD>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;

		slalomB(10000, SPEED_5, V45_5_OFFSET_VB-30);
		driveD(-30000, SPEED_MIN, SPEED_5, 30);
	}
}
 8007f98:	e0fa      	b.n	8008190 <v_R45D+0x280>
	}else if(run_mode == MIDDLE){
 8007f9a:	4b7f      	ldr	r3, [pc, #508]	; (8008198 <v_R45D+0x288>)
 8007f9c:	781b      	ldrb	r3, [r3, #0]
 8007f9e:	b2db      	uxtb	r3, r3
 8007fa0:	2b02      	cmp	r3, #2
 8007fa2:	d139      	bne.n	8008018 <v_R45D+0x108>
		slalomF(10000, SPEED_MIDDLE, V45_2_OFFSET_VF, NO_WALL, NO_WALL);
 8007fa4:	f241 3388 	movw	r3, #5000	; 0x1388
 8007fa8:	9300      	str	r3, [sp, #0]
 8007faa:	f241 3388 	movw	r3, #5000	; 0x1388
 8007fae:	2249      	movs	r2, #73	; 0x49
 8007fb0:	f44f 7116 	mov.w	r1, #600	; 0x258
 8007fb4:	f242 7010 	movw	r0, #10000	; 0x2710
 8007fb8:	f7fd fa6e 	bl	8005498 <slalomF>
		slalomR(-V45_2_DEGACCEL, -V45_2_OMEGA, -45, SPEED_MIDDLE);
 8007fbc:	f44f 7316 	mov.w	r3, #600	; 0x258
 8007fc0:	f06f 022c 	mvn.w	r2, #44	; 0x2c
 8007fc4:	4979      	ldr	r1, [pc, #484]	; (80081ac <v_R45D+0x29c>)
 8007fc6:	487a      	ldr	r0, [pc, #488]	; (80081b0 <v_R45D+0x2a0>)
 8007fc8:	f7fd fb1c 	bl	8005604 <slalomR>
		turn_dir(DIR_TURN_R45_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 8007fcc:	2103      	movs	r1, #3
 8007fce:	2001      	movs	r0, #1
 8007fd0:	f007 ff82 	bl	800fed8 <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 8007fd4:	4b73      	ldr	r3, [pc, #460]	; (80081a4 <v_R45D+0x294>)
 8007fd6:	881b      	ldrh	r3, [r3, #0]
 8007fd8:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8007fdc:	b2db      	uxtb	r3, r3
 8007fde:	3301      	adds	r3, #1
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	f003 0301 	and.w	r3, r3, #1
 8007fe6:	bfb8      	it	lt
 8007fe8:	425b      	neglt	r3, r3
 8007fea:	f003 0301 	and.w	r3, r3, #1
 8007fee:	b2d9      	uxtb	r1, r3
 8007ff0:	4a6c      	ldr	r2, [pc, #432]	; (80081a4 <v_R45D+0x294>)
 8007ff2:	8813      	ldrh	r3, [r2, #0]
 8007ff4:	f361 03c3 	bfi	r3, r1, #3, #1
 8007ff8:	8013      	strh	r3, [r2, #0]
		slalomB(10000, SPEED_MIDDLE, V45_2_OFFSET_VB-30);
 8007ffa:	2219      	movs	r2, #25
 8007ffc:	f44f 7116 	mov.w	r1, #600	; 0x258
 8008000:	f242 7010 	movw	r0, #10000	; 0x2710
 8008004:	f7fd fc20 	bl	8005848 <slalomB>
		driveD(-30000, SPEED_MIN, SPEED_MIDDLE, 30);
 8008008:	231e      	movs	r3, #30
 800800a:	f44f 7216 	mov.w	r2, #600	; 0x258
 800800e:	211e      	movs	r1, #30
 8008010:	4865      	ldr	r0, [pc, #404]	; (80081a8 <v_R45D+0x298>)
 8008012:	f7fd f869 	bl	80050e8 <driveD>
}
 8008016:	e0bb      	b.n	8008190 <v_R45D+0x280>
	}else if(run_mode == HIGH){
 8008018:	4b5f      	ldr	r3, [pc, #380]	; (8008198 <v_R45D+0x288>)
 800801a:	781b      	ldrb	r3, [r3, #0]
 800801c:	b2db      	uxtb	r3, r3
 800801e:	2b03      	cmp	r3, #3
 8008020:	d139      	bne.n	8008096 <v_R45D+0x186>
		slalomF(10000, SPEED_HIGH, V45_3_OFFSET_VF, NO_WALL, NO_WALL);
 8008022:	f241 3388 	movw	r3, #5000	; 0x1388
 8008026:	9300      	str	r3, [sp, #0]
 8008028:	f241 3388 	movw	r3, #5000	; 0x1388
 800802c:	2237      	movs	r2, #55	; 0x37
 800802e:	f44f 7148 	mov.w	r1, #800	; 0x320
 8008032:	f242 7010 	movw	r0, #10000	; 0x2710
 8008036:	f7fd fa2f 	bl	8005498 <slalomF>
		slalomR(-V45_3_DEGACCEL, -V45_3_OMEGA, -45, SPEED_HIGH);
 800803a:	f44f 7348 	mov.w	r3, #800	; 0x320
 800803e:	f06f 022c 	mvn.w	r2, #44	; 0x2c
 8008042:	495a      	ldr	r1, [pc, #360]	; (80081ac <v_R45D+0x29c>)
 8008044:	485a      	ldr	r0, [pc, #360]	; (80081b0 <v_R45D+0x2a0>)
 8008046:	f7fd fadd 	bl	8005604 <slalomR>
		turn_dir(DIR_TURN_R45_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 800804a:	2103      	movs	r1, #3
 800804c:	2001      	movs	r0, #1
 800804e:	f007 ff43 	bl	800fed8 <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 8008052:	4b54      	ldr	r3, [pc, #336]	; (80081a4 <v_R45D+0x294>)
 8008054:	881b      	ldrh	r3, [r3, #0]
 8008056:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800805a:	b2db      	uxtb	r3, r3
 800805c:	3301      	adds	r3, #1
 800805e:	2b00      	cmp	r3, #0
 8008060:	f003 0301 	and.w	r3, r3, #1
 8008064:	bfb8      	it	lt
 8008066:	425b      	neglt	r3, r3
 8008068:	f003 0301 	and.w	r3, r3, #1
 800806c:	b2d9      	uxtb	r1, r3
 800806e:	4a4d      	ldr	r2, [pc, #308]	; (80081a4 <v_R45D+0x294>)
 8008070:	8813      	ldrh	r3, [r2, #0]
 8008072:	f361 03c3 	bfi	r3, r1, #3, #1
 8008076:	8013      	strh	r3, [r2, #0]
		slalomB(10000, SPEED_HIGH, V45_3_OFFSET_VB-30);
 8008078:	2215      	movs	r2, #21
 800807a:	f44f 7148 	mov.w	r1, #800	; 0x320
 800807e:	f242 7010 	movw	r0, #10000	; 0x2710
 8008082:	f7fd fbe1 	bl	8005848 <slalomB>
		driveD(-30000, SPEED_MIN, SPEED_HIGH, 30);
 8008086:	231e      	movs	r3, #30
 8008088:	f44f 7248 	mov.w	r2, #800	; 0x320
 800808c:	211e      	movs	r1, #30
 800808e:	4846      	ldr	r0, [pc, #280]	; (80081a8 <v_R45D+0x298>)
 8008090:	f7fd f82a 	bl	80050e8 <driveD>
}
 8008094:	e07c      	b.n	8008190 <v_R45D+0x280>
	}else if(run_mode == HIGH_HIGH){
 8008096:	4b40      	ldr	r3, [pc, #256]	; (8008198 <v_R45D+0x288>)
 8008098:	781b      	ldrb	r3, [r3, #0]
 800809a:	b2db      	uxtb	r3, r3
 800809c:	2b04      	cmp	r3, #4
 800809e:	d139      	bne.n	8008114 <v_R45D+0x204>
		slalomF(10000, SPEED_HIGH_HIGH, V45_4_OFFSET_VF, NO_WALL, NO_WALL);
 80080a0:	f241 3388 	movw	r3, #5000	; 0x1388
 80080a4:	9300      	str	r3, [sp, #0]
 80080a6:	f241 3388 	movw	r3, #5000	; 0x1388
 80080aa:	2214      	movs	r2, #20
 80080ac:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80080b0:	f242 7010 	movw	r0, #10000	; 0x2710
 80080b4:	f7fd f9f0 	bl	8005498 <slalomF>
		slalomR(-V45_4_DEGACCEL, -V45_4_OMEGA, -45, SPEED_HIGH_HIGH);
 80080b8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80080bc:	f06f 022c 	mvn.w	r2, #44	; 0x2c
 80080c0:	493c      	ldr	r1, [pc, #240]	; (80081b4 <v_R45D+0x2a4>)
 80080c2:	483d      	ldr	r0, [pc, #244]	; (80081b8 <v_R45D+0x2a8>)
 80080c4:	f7fd fa9e 	bl	8005604 <slalomR>
		turn_dir(DIR_TURN_R45_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 80080c8:	2103      	movs	r1, #3
 80080ca:	2001      	movs	r0, #1
 80080cc:	f007 ff04 	bl	800fed8 <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 80080d0:	4b34      	ldr	r3, [pc, #208]	; (80081a4 <v_R45D+0x294>)
 80080d2:	881b      	ldrh	r3, [r3, #0]
 80080d4:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80080d8:	b2db      	uxtb	r3, r3
 80080da:	3301      	adds	r3, #1
 80080dc:	2b00      	cmp	r3, #0
 80080de:	f003 0301 	and.w	r3, r3, #1
 80080e2:	bfb8      	it	lt
 80080e4:	425b      	neglt	r3, r3
 80080e6:	f003 0301 	and.w	r3, r3, #1
 80080ea:	b2d9      	uxtb	r1, r3
 80080ec:	4a2d      	ldr	r2, [pc, #180]	; (80081a4 <v_R45D+0x294>)
 80080ee:	8813      	ldrh	r3, [r2, #0]
 80080f0:	f361 03c3 	bfi	r3, r1, #3, #1
 80080f4:	8013      	strh	r3, [r2, #0]
		slalomB(10000, SPEED_HIGH_HIGH, V45_4_OFFSET_VB-30);
 80080f6:	221c      	movs	r2, #28
 80080f8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80080fc:	f242 7010 	movw	r0, #10000	; 0x2710
 8008100:	f7fd fba2 	bl	8005848 <slalomB>
		driveD(-30000, SPEED_MIN, SPEED_HIGH_HIGH, 30);
 8008104:	231e      	movs	r3, #30
 8008106:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800810a:	211e      	movs	r1, #30
 800810c:	4826      	ldr	r0, [pc, #152]	; (80081a8 <v_R45D+0x298>)
 800810e:	f7fc ffeb 	bl	80050e8 <driveD>
}
 8008112:	e03d      	b.n	8008190 <v_R45D+0x280>
	}else if(run_mode == 5){
 8008114:	4b20      	ldr	r3, [pc, #128]	; (8008198 <v_R45D+0x288>)
 8008116:	781b      	ldrb	r3, [r3, #0]
 8008118:	b2db      	uxtb	r3, r3
 800811a:	2b05      	cmp	r3, #5
 800811c:	d138      	bne.n	8008190 <v_R45D+0x280>
		slalomF(10000, SPEED_5, V45_5_OFFSET_VF, NO_WALL, NO_WALL);
 800811e:	f241 3388 	movw	r3, #5000	; 0x1388
 8008122:	9300      	str	r3, [sp, #0]
 8008124:	f241 3388 	movw	r3, #5000	; 0x1388
 8008128:	2214      	movs	r2, #20
 800812a:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 800812e:	f242 7010 	movw	r0, #10000	; 0x2710
 8008132:	f7fd f9b1 	bl	8005498 <slalomF>
		slalomR(-V45_5_DEGACCEL, -V45_5_OMEGA, -45, SPEED_5);
 8008136:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
 800813a:	f06f 022c 	mvn.w	r2, #44	; 0x2c
 800813e:	491f      	ldr	r1, [pc, #124]	; (80081bc <v_R45D+0x2ac>)
 8008140:	481f      	ldr	r0, [pc, #124]	; (80081c0 <v_R45D+0x2b0>)
 8008142:	f7fd fa5f 	bl	8005604 <slalomR>
		turn_dir(DIR_TURN_R45_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 8008146:	2103      	movs	r1, #3
 8008148:	2001      	movs	r0, #1
 800814a:	f007 fec5 	bl	800fed8 <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 800814e:	4b15      	ldr	r3, [pc, #84]	; (80081a4 <v_R45D+0x294>)
 8008150:	881b      	ldrh	r3, [r3, #0]
 8008152:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8008156:	b2db      	uxtb	r3, r3
 8008158:	3301      	adds	r3, #1
 800815a:	2b00      	cmp	r3, #0
 800815c:	f003 0301 	and.w	r3, r3, #1
 8008160:	bfb8      	it	lt
 8008162:	425b      	neglt	r3, r3
 8008164:	f003 0301 	and.w	r3, r3, #1
 8008168:	b2d9      	uxtb	r1, r3
 800816a:	4a0e      	ldr	r2, [pc, #56]	; (80081a4 <v_R45D+0x294>)
 800816c:	8813      	ldrh	r3, [r2, #0]
 800816e:	f361 03c3 	bfi	r3, r1, #3, #1
 8008172:	8013      	strh	r3, [r2, #0]
		slalomB(10000, SPEED_5, V45_5_OFFSET_VB-30);
 8008174:	221c      	movs	r2, #28
 8008176:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 800817a:	f242 7010 	movw	r0, #10000	; 0x2710
 800817e:	f7fd fb63 	bl	8005848 <slalomB>
		driveD(-30000, SPEED_MIN, SPEED_5, 30);
 8008182:	231e      	movs	r3, #30
 8008184:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8008188:	211e      	movs	r1, #30
 800818a:	4807      	ldr	r0, [pc, #28]	; (80081a8 <v_R45D+0x298>)
 800818c:	f7fc ffac 	bl	80050e8 <driveD>
}
 8008190:	bf00      	nop
 8008192:	46bd      	mov	sp, r7
 8008194:	bd80      	pop	{r7, pc}
 8008196:	bf00      	nop
 8008198:	20000456 	.word	0x20000456
 800819c:	fffffed4 	.word	0xfffffed4
 80081a0:	fffff448 	.word	0xfffff448
 80081a4:	20000f64 	.word	0x20000f64
 80081a8:	ffff8ad0 	.word	0xffff8ad0
 80081ac:	fffffe70 	.word	0xfffffe70
 80081b0:	ffffe0c0 	.word	0xffffe0c0
 80081b4:	fffffda8 	.word	0xfffffda8
 80081b8:	ffffd8f0 	.word	0xffffd8f0
 80081bc:	fffffce0 	.word	0xfffffce0
 80081c0:	ffffc180 	.word	0xffffc180

080081c4 <v_L45D>:
//v_L45D
//a区画中心から左に45度回転する　ゴール用
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void v_L45D(void){
 80081c4:	b580      	push	{r7, lr}
 80081c6:	b082      	sub	sp, #8
 80081c8:	af02      	add	r7, sp, #8
	full_led_write(YELLOW);
 80081ca:	2006      	movs	r0, #6
 80081cc:	f009 fd18 	bl	8011c00 <full_led_write>
	if(run_mode == LOW){
 80081d0:	4ba0      	ldr	r3, [pc, #640]	; (8008454 <v_L45D+0x290>)
 80081d2:	781b      	ldrb	r3, [r3, #0]
 80081d4:	b2db      	uxtb	r3, r3
 80081d6:	2b01      	cmp	r3, #1
 80081d8:	d13a      	bne.n	8008250 <v_L45D+0x8c>
		slalomF(10000, SPEED_LOW, V45_OFFSET_VF, NO_WALL, NO_WALL);
 80081da:	f241 3388 	movw	r3, #5000	; 0x1388
 80081de:	9300      	str	r3, [sp, #0]
 80081e0:	f241 3388 	movw	r3, #5000	; 0x1388
 80081e4:	2255      	movs	r2, #85	; 0x55
 80081e6:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80081ea:	f242 7010 	movw	r0, #10000	; 0x2710
 80081ee:	f7fd f953 	bl	8005498 <slalomF>
		slalomR(V45_DEGACCEL, V45_OMEGA, 55, SPEED_LOW);
 80081f2:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80081f6:	2237      	movs	r2, #55	; 0x37
 80081f8:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80081fc:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8008200:	f7fd fa00 	bl	8005604 <slalomR>

		turn_dir(DIR_TURN_L45_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 8008204:	2103      	movs	r1, #3
 8008206:	20ff      	movs	r0, #255	; 0xff
 8008208:	f007 fe66 	bl	800fed8 <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 800820c:	4b92      	ldr	r3, [pc, #584]	; (8008458 <v_L45D+0x294>)
 800820e:	881b      	ldrh	r3, [r3, #0]
 8008210:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8008214:	b2db      	uxtb	r3, r3
 8008216:	3301      	adds	r3, #1
 8008218:	2b00      	cmp	r3, #0
 800821a:	f003 0301 	and.w	r3, r3, #1
 800821e:	bfb8      	it	lt
 8008220:	425b      	neglt	r3, r3
 8008222:	f003 0301 	and.w	r3, r3, #1
 8008226:	b2d9      	uxtb	r1, r3
 8008228:	4a8b      	ldr	r2, [pc, #556]	; (8008458 <v_L45D+0x294>)
 800822a:	8813      	ldrh	r3, [r2, #0]
 800822c:	f361 03c3 	bfi	r3, r1, #3, #1
 8008230:	8013      	strh	r3, [r2, #0]

		slalomB(10000, SPEED_LOW, V45_OFFSET_VB-30);
 8008232:	220a      	movs	r2, #10
 8008234:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8008238:	f242 7010 	movw	r0, #10000	; 0x2710
 800823c:	f7fd fb04 	bl	8005848 <slalomB>
		driveD(-30000, SPEED_MIN, SPEED_LOW, 30);
 8008240:	231e      	movs	r3, #30
 8008242:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8008246:	211e      	movs	r1, #30
 8008248:	4884      	ldr	r0, [pc, #528]	; (800845c <v_L45D+0x298>)
 800824a:	f7fc ff4d 	bl	80050e8 <driveD>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;

		slalomB(10000, SPEED_5, V45_5_OFFSET_VB-30);
		driveD(-30000, SPEED_MIN, SPEED_5, 30);
	}
}
 800824e:	e0fe      	b.n	800844e <v_L45D+0x28a>
	}else if(run_mode == MIDDLE){
 8008250:	4b80      	ldr	r3, [pc, #512]	; (8008454 <v_L45D+0x290>)
 8008252:	781b      	ldrb	r3, [r3, #0]
 8008254:	b2db      	uxtb	r3, r3
 8008256:	2b02      	cmp	r3, #2
 8008258:	d13a      	bne.n	80082d0 <v_L45D+0x10c>
		slalomF(10000, SPEED_MIDDLE, V45_2_OFFSET_VF, NO_WALL, NO_WALL);
 800825a:	f241 3388 	movw	r3, #5000	; 0x1388
 800825e:	9300      	str	r3, [sp, #0]
 8008260:	f241 3388 	movw	r3, #5000	; 0x1388
 8008264:	2249      	movs	r2, #73	; 0x49
 8008266:	f44f 7116 	mov.w	r1, #600	; 0x258
 800826a:	f242 7010 	movw	r0, #10000	; 0x2710
 800826e:	f7fd f913 	bl	8005498 <slalomF>
		slalomR(V45_2_DEGACCEL, V45_2_OMEGA, 45, SPEED_MIDDLE);
 8008272:	f44f 7316 	mov.w	r3, #600	; 0x258
 8008276:	222d      	movs	r2, #45	; 0x2d
 8008278:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800827c:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 8008280:	f7fd f9c0 	bl	8005604 <slalomR>
		turn_dir(DIR_TURN_L45_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 8008284:	2103      	movs	r1, #3
 8008286:	20ff      	movs	r0, #255	; 0xff
 8008288:	f007 fe26 	bl	800fed8 <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 800828c:	4b72      	ldr	r3, [pc, #456]	; (8008458 <v_L45D+0x294>)
 800828e:	881b      	ldrh	r3, [r3, #0]
 8008290:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8008294:	b2db      	uxtb	r3, r3
 8008296:	3301      	adds	r3, #1
 8008298:	2b00      	cmp	r3, #0
 800829a:	f003 0301 	and.w	r3, r3, #1
 800829e:	bfb8      	it	lt
 80082a0:	425b      	neglt	r3, r3
 80082a2:	f003 0301 	and.w	r3, r3, #1
 80082a6:	b2d9      	uxtb	r1, r3
 80082a8:	4a6b      	ldr	r2, [pc, #428]	; (8008458 <v_L45D+0x294>)
 80082aa:	8813      	ldrh	r3, [r2, #0]
 80082ac:	f361 03c3 	bfi	r3, r1, #3, #1
 80082b0:	8013      	strh	r3, [r2, #0]
		slalomB(10000, SPEED_MIDDLE, V45_2_OFFSET_VB-30);
 80082b2:	2219      	movs	r2, #25
 80082b4:	f44f 7116 	mov.w	r1, #600	; 0x258
 80082b8:	f242 7010 	movw	r0, #10000	; 0x2710
 80082bc:	f7fd fac4 	bl	8005848 <slalomB>
		driveD(-30000, SPEED_MIN, SPEED_MIDDLE, 30);
 80082c0:	231e      	movs	r3, #30
 80082c2:	f44f 7216 	mov.w	r2, #600	; 0x258
 80082c6:	211e      	movs	r1, #30
 80082c8:	4864      	ldr	r0, [pc, #400]	; (800845c <v_L45D+0x298>)
 80082ca:	f7fc ff0d 	bl	80050e8 <driveD>
}
 80082ce:	e0be      	b.n	800844e <v_L45D+0x28a>
	}else if(run_mode == HIGH){
 80082d0:	4b60      	ldr	r3, [pc, #384]	; (8008454 <v_L45D+0x290>)
 80082d2:	781b      	ldrb	r3, [r3, #0]
 80082d4:	b2db      	uxtb	r3, r3
 80082d6:	2b03      	cmp	r3, #3
 80082d8:	d13a      	bne.n	8008350 <v_L45D+0x18c>
		slalomF(10000, SPEED_HIGH, V45_3_OFFSET_VF, NO_WALL, NO_WALL);
 80082da:	f241 3388 	movw	r3, #5000	; 0x1388
 80082de:	9300      	str	r3, [sp, #0]
 80082e0:	f241 3388 	movw	r3, #5000	; 0x1388
 80082e4:	2237      	movs	r2, #55	; 0x37
 80082e6:	f44f 7148 	mov.w	r1, #800	; 0x320
 80082ea:	f242 7010 	movw	r0, #10000	; 0x2710
 80082ee:	f7fd f8d3 	bl	8005498 <slalomF>
		slalomR(V45_3_DEGACCEL, V45_3_OMEGA, 45, SPEED_HIGH);
 80082f2:	f44f 7348 	mov.w	r3, #800	; 0x320
 80082f6:	222d      	movs	r2, #45	; 0x2d
 80082f8:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80082fc:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 8008300:	f7fd f980 	bl	8005604 <slalomR>
		turn_dir(DIR_TURN_L45_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 8008304:	2103      	movs	r1, #3
 8008306:	20ff      	movs	r0, #255	; 0xff
 8008308:	f007 fde6 	bl	800fed8 <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 800830c:	4b52      	ldr	r3, [pc, #328]	; (8008458 <v_L45D+0x294>)
 800830e:	881b      	ldrh	r3, [r3, #0]
 8008310:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8008314:	b2db      	uxtb	r3, r3
 8008316:	3301      	adds	r3, #1
 8008318:	2b00      	cmp	r3, #0
 800831a:	f003 0301 	and.w	r3, r3, #1
 800831e:	bfb8      	it	lt
 8008320:	425b      	neglt	r3, r3
 8008322:	f003 0301 	and.w	r3, r3, #1
 8008326:	b2d9      	uxtb	r1, r3
 8008328:	4a4b      	ldr	r2, [pc, #300]	; (8008458 <v_L45D+0x294>)
 800832a:	8813      	ldrh	r3, [r2, #0]
 800832c:	f361 03c3 	bfi	r3, r1, #3, #1
 8008330:	8013      	strh	r3, [r2, #0]
		slalomB(10000, SPEED_HIGH, V45_3_OFFSET_VB-30);
 8008332:	2215      	movs	r2, #21
 8008334:	f44f 7148 	mov.w	r1, #800	; 0x320
 8008338:	f242 7010 	movw	r0, #10000	; 0x2710
 800833c:	f7fd fa84 	bl	8005848 <slalomB>
		driveD(-30000, SPEED_MIN, SPEED_HIGH, 30);
 8008340:	231e      	movs	r3, #30
 8008342:	f44f 7248 	mov.w	r2, #800	; 0x320
 8008346:	211e      	movs	r1, #30
 8008348:	4844      	ldr	r0, [pc, #272]	; (800845c <v_L45D+0x298>)
 800834a:	f7fc fecd 	bl	80050e8 <driveD>
}
 800834e:	e07e      	b.n	800844e <v_L45D+0x28a>
	}else if(run_mode == HIGH_HIGH){
 8008350:	4b40      	ldr	r3, [pc, #256]	; (8008454 <v_L45D+0x290>)
 8008352:	781b      	ldrb	r3, [r3, #0]
 8008354:	b2db      	uxtb	r3, r3
 8008356:	2b04      	cmp	r3, #4
 8008358:	d13a      	bne.n	80083d0 <v_L45D+0x20c>
		slalomF(10000, SPEED_HIGH_HIGH, V45_4_OFFSET_VF, NO_WALL, NO_WALL);
 800835a:	f241 3388 	movw	r3, #5000	; 0x1388
 800835e:	9300      	str	r3, [sp, #0]
 8008360:	f241 3388 	movw	r3, #5000	; 0x1388
 8008364:	2214      	movs	r2, #20
 8008366:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800836a:	f242 7010 	movw	r0, #10000	; 0x2710
 800836e:	f7fd f893 	bl	8005498 <slalomF>
		slalomR(V45_4_DEGACCEL, V45_4_OMEGA, 45, SPEED_HIGH_HIGH);
 8008372:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008376:	222d      	movs	r2, #45	; 0x2d
 8008378:	f44f 7116 	mov.w	r1, #600	; 0x258
 800837c:	f242 7010 	movw	r0, #10000	; 0x2710
 8008380:	f7fd f940 	bl	8005604 <slalomR>
		turn_dir(DIR_TURN_L45_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 8008384:	2103      	movs	r1, #3
 8008386:	20ff      	movs	r0, #255	; 0xff
 8008388:	f007 fda6 	bl	800fed8 <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 800838c:	4b32      	ldr	r3, [pc, #200]	; (8008458 <v_L45D+0x294>)
 800838e:	881b      	ldrh	r3, [r3, #0]
 8008390:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8008394:	b2db      	uxtb	r3, r3
 8008396:	3301      	adds	r3, #1
 8008398:	2b00      	cmp	r3, #0
 800839a:	f003 0301 	and.w	r3, r3, #1
 800839e:	bfb8      	it	lt
 80083a0:	425b      	neglt	r3, r3
 80083a2:	f003 0301 	and.w	r3, r3, #1
 80083a6:	b2d9      	uxtb	r1, r3
 80083a8:	4a2b      	ldr	r2, [pc, #172]	; (8008458 <v_L45D+0x294>)
 80083aa:	8813      	ldrh	r3, [r2, #0]
 80083ac:	f361 03c3 	bfi	r3, r1, #3, #1
 80083b0:	8013      	strh	r3, [r2, #0]
		slalomB(10000, SPEED_HIGH_HIGH, V45_4_OFFSET_VB-30);
 80083b2:	221c      	movs	r2, #28
 80083b4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80083b8:	f242 7010 	movw	r0, #10000	; 0x2710
 80083bc:	f7fd fa44 	bl	8005848 <slalomB>
		driveD(-30000, SPEED_MIN, SPEED_HIGH_HIGH, 30);
 80083c0:	231e      	movs	r3, #30
 80083c2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80083c6:	211e      	movs	r1, #30
 80083c8:	4824      	ldr	r0, [pc, #144]	; (800845c <v_L45D+0x298>)
 80083ca:	f7fc fe8d 	bl	80050e8 <driveD>
}
 80083ce:	e03e      	b.n	800844e <v_L45D+0x28a>
	}else if(run_mode == 5){
 80083d0:	4b20      	ldr	r3, [pc, #128]	; (8008454 <v_L45D+0x290>)
 80083d2:	781b      	ldrb	r3, [r3, #0]
 80083d4:	b2db      	uxtb	r3, r3
 80083d6:	2b05      	cmp	r3, #5
 80083d8:	d139      	bne.n	800844e <v_L45D+0x28a>
		slalomF(10000, SPEED_5, V45_5_OFFSET_VF, NO_WALL, NO_WALL);
 80083da:	f241 3388 	movw	r3, #5000	; 0x1388
 80083de:	9300      	str	r3, [sp, #0]
 80083e0:	f241 3388 	movw	r3, #5000	; 0x1388
 80083e4:	2214      	movs	r2, #20
 80083e6:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 80083ea:	f242 7010 	movw	r0, #10000	; 0x2710
 80083ee:	f7fd f853 	bl	8005498 <slalomF>
		slalomR(V45_5_DEGACCEL, V45_5_OMEGA, 45, SPEED_5);
 80083f2:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
 80083f6:	222d      	movs	r2, #45	; 0x2d
 80083f8:	f44f 7148 	mov.w	r1, #800	; 0x320
 80083fc:	f44f 507a 	mov.w	r0, #16000	; 0x3e80
 8008400:	f7fd f900 	bl	8005604 <slalomR>
		turn_dir(DIR_TURN_L45_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 8008404:	2103      	movs	r1, #3
 8008406:	20ff      	movs	r0, #255	; 0xff
 8008408:	f007 fd66 	bl	800fed8 <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 800840c:	4b12      	ldr	r3, [pc, #72]	; (8008458 <v_L45D+0x294>)
 800840e:	881b      	ldrh	r3, [r3, #0]
 8008410:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8008414:	b2db      	uxtb	r3, r3
 8008416:	3301      	adds	r3, #1
 8008418:	2b00      	cmp	r3, #0
 800841a:	f003 0301 	and.w	r3, r3, #1
 800841e:	bfb8      	it	lt
 8008420:	425b      	neglt	r3, r3
 8008422:	f003 0301 	and.w	r3, r3, #1
 8008426:	b2d9      	uxtb	r1, r3
 8008428:	4a0b      	ldr	r2, [pc, #44]	; (8008458 <v_L45D+0x294>)
 800842a:	8813      	ldrh	r3, [r2, #0]
 800842c:	f361 03c3 	bfi	r3, r1, #3, #1
 8008430:	8013      	strh	r3, [r2, #0]
		slalomB(10000, SPEED_5, V45_5_OFFSET_VB-30);
 8008432:	221c      	movs	r2, #28
 8008434:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 8008438:	f242 7010 	movw	r0, #10000	; 0x2710
 800843c:	f7fd fa04 	bl	8005848 <slalomB>
		driveD(-30000, SPEED_MIN, SPEED_5, 30);
 8008440:	231e      	movs	r3, #30
 8008442:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8008446:	211e      	movs	r1, #30
 8008448:	4804      	ldr	r0, [pc, #16]	; (800845c <v_L45D+0x298>)
 800844a:	f7fc fe4d 	bl	80050e8 <driveD>
}
 800844e:	bf00      	nop
 8008450:	46bd      	mov	sp, r7
 8008452:	bd80      	pop	{r7, pc}
 8008454:	20000456 	.word	0x20000456
 8008458:	20000f64 	.word	0x20000f64
 800845c:	ffff8ad0 	.word	0xffff8ad0

08008460 <v_R90>:
//v_R90
// 柱中心から右に90度回転する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void v_R90(void){
 8008460:	b580      	push	{r7, lr}
 8008462:	b082      	sub	sp, #8
 8008464:	af02      	add	r7, sp, #8
	full_led_write(YELLOW);
 8008466:	2006      	movs	r0, #6
 8008468:	f009 fbca 	bl	8011c00 <full_led_write>
	if(run_mode == LOW){
 800846c:	4b5d      	ldr	r3, [pc, #372]	; (80085e4 <v_R90+0x184>)
 800846e:	781b      	ldrb	r3, [r3, #0]
 8008470:	b2db      	uxtb	r3, r3
 8008472:	2b01      	cmp	r3, #1
 8008474:	d11f      	bne.n	80084b6 <v_R90+0x56>
		slalomF(10000, SPEED_LOW, V90_OFFSET_F, NO_WALL, NO_WALL);
 8008476:	f241 3388 	movw	r3, #5000	; 0x1388
 800847a:	9300      	str	r3, [sp, #0]
 800847c:	f241 3388 	movw	r3, #5000	; 0x1388
 8008480:	222d      	movs	r2, #45	; 0x2d
 8008482:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8008486:	f242 7010 	movw	r0, #10000	; 0x2710
 800848a:	f7fd f805 	bl	8005498 <slalomF>
		slalomR(-V90_DEGACCEL, -V90_OMEGA, -90, SPEED_LOW);
 800848e:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8008492:	f06f 0259 	mvn.w	r2, #89	; 0x59
 8008496:	4954      	ldr	r1, [pc, #336]	; (80085e8 <v_R90+0x188>)
 8008498:	4854      	ldr	r0, [pc, #336]	; (80085ec <v_R90+0x18c>)
 800849a:	f7fd f8b3 	bl	8005604 <slalomR>

		turn_dir(DIR_TURN_R90_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 800849e:	2103      	movs	r1, #3
 80084a0:	2002      	movs	r0, #2
 80084a2:	f007 fd19 	bl	800fed8 <turn_dir>

		slalomB(10000, SPEED_LOW, V90_OFFSET_B);
 80084a6:	222d      	movs	r2, #45	; 0x2d
 80084a8:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80084ac:	f242 7010 	movw	r0, #10000	; 0x2710
 80084b0:	f7fd f9ca 	bl	8005848 <slalomB>

		turn_dir(DIR_TURN_R90_8, 3);									//マイクロマウス内部位置情報でも左回転処理

		slalomB(10000, SPEED_5, V90_5_OFFSET_B);
	}
}
 80084b4:	e092      	b.n	80085dc <v_R90+0x17c>
	}else if(run_mode == MIDDLE){
 80084b6:	4b4b      	ldr	r3, [pc, #300]	; (80085e4 <v_R90+0x184>)
 80084b8:	781b      	ldrb	r3, [r3, #0]
 80084ba:	b2db      	uxtb	r3, r3
 80084bc:	2b02      	cmp	r3, #2
 80084be:	d11f      	bne.n	8008500 <v_R90+0xa0>
		slalomF(10000, SPEED_MIDDLE, V90_2_OFFSET_F, NO_WALL, NO_WALL);
 80084c0:	f241 3388 	movw	r3, #5000	; 0x1388
 80084c4:	9300      	str	r3, [sp, #0]
 80084c6:	f241 3388 	movw	r3, #5000	; 0x1388
 80084ca:	223a      	movs	r2, #58	; 0x3a
 80084cc:	f44f 7116 	mov.w	r1, #600	; 0x258
 80084d0:	f242 7010 	movw	r0, #10000	; 0x2710
 80084d4:	f7fc ffe0 	bl	8005498 <slalomF>
		slalomR(-V90_2_DEGACCEL, -V90_2_OMEGA, -90, SPEED_MIDDLE);
 80084d8:	f44f 7316 	mov.w	r3, #600	; 0x258
 80084dc:	f06f 0259 	mvn.w	r2, #89	; 0x59
 80084e0:	4943      	ldr	r1, [pc, #268]	; (80085f0 <v_R90+0x190>)
 80084e2:	4844      	ldr	r0, [pc, #272]	; (80085f4 <v_R90+0x194>)
 80084e4:	f7fd f88e 	bl	8005604 <slalomR>
		turn_dir(DIR_TURN_R90_8, 3);									//マイクロマウス内部位置情報でも左回転処理
 80084e8:	2103      	movs	r1, #3
 80084ea:	2002      	movs	r0, #2
 80084ec:	f007 fcf4 	bl	800fed8 <turn_dir>
		slalomB(10000, SPEED_MIDDLE, V90_2_OFFSET_B);
 80084f0:	2252      	movs	r2, #82	; 0x52
 80084f2:	f44f 7116 	mov.w	r1, #600	; 0x258
 80084f6:	f242 7010 	movw	r0, #10000	; 0x2710
 80084fa:	f7fd f9a5 	bl	8005848 <slalomB>
}
 80084fe:	e06d      	b.n	80085dc <v_R90+0x17c>
	}else if(run_mode == HIGH){
 8008500:	4b38      	ldr	r3, [pc, #224]	; (80085e4 <v_R90+0x184>)
 8008502:	781b      	ldrb	r3, [r3, #0]
 8008504:	b2db      	uxtb	r3, r3
 8008506:	2b03      	cmp	r3, #3
 8008508:	d11f      	bne.n	800854a <v_R90+0xea>
		slalomF(10000, SPEED_HIGH, V90_3_OFFSET_F, NO_WALL, NO_WALL);
 800850a:	f241 3388 	movw	r3, #5000	; 0x1388
 800850e:	9300      	str	r3, [sp, #0]
 8008510:	f241 3388 	movw	r3, #5000	; 0x1388
 8008514:	2223      	movs	r2, #35	; 0x23
 8008516:	f44f 7148 	mov.w	r1, #800	; 0x320
 800851a:	f242 7010 	movw	r0, #10000	; 0x2710
 800851e:	f7fc ffbb 	bl	8005498 <slalomF>
		slalomR(-V90_3_DEGACCEL, -V90_3_OMEGA, -90, SPEED_HIGH);
 8008522:	f44f 7348 	mov.w	r3, #800	; 0x320
 8008526:	f06f 0259 	mvn.w	r2, #89	; 0x59
 800852a:	4931      	ldr	r1, [pc, #196]	; (80085f0 <v_R90+0x190>)
 800852c:	4831      	ldr	r0, [pc, #196]	; (80085f4 <v_R90+0x194>)
 800852e:	f7fd f869 	bl	8005604 <slalomR>
		turn_dir(DIR_TURN_R90_8, 3);									//マイクロマウス内部位置情報でも左回転処理
 8008532:	2103      	movs	r1, #3
 8008534:	2002      	movs	r0, #2
 8008536:	f007 fccf 	bl	800fed8 <turn_dir>
		slalomB(10000, SPEED_HIGH, V90_3_OFFSET_B);
 800853a:	2241      	movs	r2, #65	; 0x41
 800853c:	f44f 7148 	mov.w	r1, #800	; 0x320
 8008540:	f242 7010 	movw	r0, #10000	; 0x2710
 8008544:	f7fd f980 	bl	8005848 <slalomB>
}
 8008548:	e048      	b.n	80085dc <v_R90+0x17c>
	}else if(run_mode == HIGH_HIGH){
 800854a:	4b26      	ldr	r3, [pc, #152]	; (80085e4 <v_R90+0x184>)
 800854c:	781b      	ldrb	r3, [r3, #0]
 800854e:	b2db      	uxtb	r3, r3
 8008550:	2b04      	cmp	r3, #4
 8008552:	d11f      	bne.n	8008594 <v_R90+0x134>
		slalomF(10000, SPEED_HIGH_HIGH, V90_4_OFFSET_F, NO_WALL, NO_WALL);
 8008554:	f241 3388 	movw	r3, #5000	; 0x1388
 8008558:	9300      	str	r3, [sp, #0]
 800855a:	f241 3388 	movw	r3, #5000	; 0x1388
 800855e:	221e      	movs	r2, #30
 8008560:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8008564:	f242 7010 	movw	r0, #10000	; 0x2710
 8008568:	f7fc ff96 	bl	8005498 <slalomF>
		slalomR(-V90_4_DEGACCEL, -V90_4_OMEGA, -90, SPEED_HIGH_HIGH);
 800856c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008570:	f06f 0259 	mvn.w	r2, #89	; 0x59
 8008574:	491e      	ldr	r1, [pc, #120]	; (80085f0 <v_R90+0x190>)
 8008576:	4820      	ldr	r0, [pc, #128]	; (80085f8 <v_R90+0x198>)
 8008578:	f7fd f844 	bl	8005604 <slalomR>
		turn_dir(DIR_TURN_R90_8, 3);									//マイクロマウス内部位置情報でも左回転処理
 800857c:	2103      	movs	r1, #3
 800857e:	2002      	movs	r0, #2
 8008580:	f007 fcaa 	bl	800fed8 <turn_dir>
		slalomB(10000, SPEED_HIGH_HIGH, V90_4_OFFSET_B);
 8008584:	221e      	movs	r2, #30
 8008586:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800858a:	f242 7010 	movw	r0, #10000	; 0x2710
 800858e:	f7fd f95b 	bl	8005848 <slalomB>
}
 8008592:	e023      	b.n	80085dc <v_R90+0x17c>
	}else if(run_mode == 5){
 8008594:	4b13      	ldr	r3, [pc, #76]	; (80085e4 <v_R90+0x184>)
 8008596:	781b      	ldrb	r3, [r3, #0]
 8008598:	b2db      	uxtb	r3, r3
 800859a:	2b05      	cmp	r3, #5
 800859c:	d11e      	bne.n	80085dc <v_R90+0x17c>
		slalomF(10000, SPEED_5, V90_5_OFFSET_F, NO_WALL, NO_WALL);
 800859e:	f241 3388 	movw	r3, #5000	; 0x1388
 80085a2:	9300      	str	r3, [sp, #0]
 80085a4:	f241 3388 	movw	r3, #5000	; 0x1388
 80085a8:	2214      	movs	r2, #20
 80085aa:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 80085ae:	f242 7010 	movw	r0, #10000	; 0x2710
 80085b2:	f7fc ff71 	bl	8005498 <slalomF>
		slalomR(-V90_5_DEGACCEL, -V90_5_OMEGA, -90, SPEED_5);
 80085b6:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
 80085ba:	f06f 0259 	mvn.w	r2, #89	; 0x59
 80085be:	490f      	ldr	r1, [pc, #60]	; (80085fc <v_R90+0x19c>)
 80085c0:	480d      	ldr	r0, [pc, #52]	; (80085f8 <v_R90+0x198>)
 80085c2:	f7fd f81f 	bl	8005604 <slalomR>
		turn_dir(DIR_TURN_R90_8, 3);									//マイクロマウス内部位置情報でも左回転処理
 80085c6:	2103      	movs	r1, #3
 80085c8:	2002      	movs	r0, #2
 80085ca:	f007 fc85 	bl	800fed8 <turn_dir>
		slalomB(10000, SPEED_5, V90_5_OFFSET_B);
 80085ce:	2214      	movs	r2, #20
 80085d0:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 80085d4:	f242 7010 	movw	r0, #10000	; 0x2710
 80085d8:	f7fd f936 	bl	8005848 <slalomB>
}
 80085dc:	bf00      	nop
 80085de:	46bd      	mov	sp, r7
 80085e0:	bd80      	pop	{r7, pc}
 80085e2:	bf00      	nop
 80085e4:	20000456 	.word	0x20000456
 80085e8:	fffffea2 	.word	0xfffffea2
 80085ec:	fffff254 	.word	0xfffff254
 80085f0:	fffffce0 	.word	0xfffffce0
 80085f4:	ffffd8f0 	.word	0xffffd8f0
 80085f8:	ffffc180 	.word	0xffffc180
 80085fc:	fffffc18 	.word	0xfffffc18

08008600 <v_L90>:
//v_L90
// 柱中心から左に90度回転する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void v_L90(void){
 8008600:	b580      	push	{r7, lr}
 8008602:	b082      	sub	sp, #8
 8008604:	af02      	add	r7, sp, #8
	full_led_write(PURPLE);
 8008606:	2005      	movs	r0, #5
 8008608:	f009 fafa 	bl	8011c00 <full_led_write>
	if(run_mode == LOW){
 800860c:	4b5f      	ldr	r3, [pc, #380]	; (800878c <v_L90+0x18c>)
 800860e:	781b      	ldrb	r3, [r3, #0]
 8008610:	b2db      	uxtb	r3, r3
 8008612:	2b01      	cmp	r3, #1
 8008614:	d120      	bne.n	8008658 <v_L90+0x58>
		slalomF(10000, SPEED_LOW, V90_OFFSET_F, NO_WALL, NO_WALL);
 8008616:	f241 3388 	movw	r3, #5000	; 0x1388
 800861a:	9300      	str	r3, [sp, #0]
 800861c:	f241 3388 	movw	r3, #5000	; 0x1388
 8008620:	222d      	movs	r2, #45	; 0x2d
 8008622:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8008626:	f242 7010 	movw	r0, #10000	; 0x2710
 800862a:	f7fc ff35 	bl	8005498 <slalomF>
		slalomR(V90_DEGACCEL, V90_OMEGA, 90, SPEED_LOW);
 800862e:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8008632:	225a      	movs	r2, #90	; 0x5a
 8008634:	f44f 71af 	mov.w	r1, #350	; 0x15e
 8008638:	f640 50ac 	movw	r0, #3500	; 0xdac
 800863c:	f7fc ffe2 	bl	8005604 <slalomR>

		turn_dir(DIR_TURN_L90_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 8008640:	2103      	movs	r1, #3
 8008642:	20fe      	movs	r0, #254	; 0xfe
 8008644:	f007 fc48 	bl	800fed8 <turn_dir>

		slalomB(10000, SPEED_LOW, V90_OFFSET_B);
 8008648:	222d      	movs	r2, #45	; 0x2d
 800864a:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800864e:	f242 7010 	movw	r0, #10000	; 0x2710
 8008652:	f7fd f8f9 	bl	8005848 <slalomB>

		turn_dir(DIR_TURN_L90_8, 3);									//aマイクロマウス内部位置情報でも左回転処理

		slalomB(10000, SPEED_5, V90_5_OFFSET_B);
	}
}
 8008656:	e096      	b.n	8008786 <v_L90+0x186>
	}else if(run_mode == MIDDLE){
 8008658:	4b4c      	ldr	r3, [pc, #304]	; (800878c <v_L90+0x18c>)
 800865a:	781b      	ldrb	r3, [r3, #0]
 800865c:	b2db      	uxtb	r3, r3
 800865e:	2b02      	cmp	r3, #2
 8008660:	d120      	bne.n	80086a4 <v_L90+0xa4>
		slalomF(10000, SPEED_MIDDLE, V90_2_OFFSET_F, NO_WALL, NO_WALL);
 8008662:	f241 3388 	movw	r3, #5000	; 0x1388
 8008666:	9300      	str	r3, [sp, #0]
 8008668:	f241 3388 	movw	r3, #5000	; 0x1388
 800866c:	223a      	movs	r2, #58	; 0x3a
 800866e:	f44f 7116 	mov.w	r1, #600	; 0x258
 8008672:	f242 7010 	movw	r0, #10000	; 0x2710
 8008676:	f7fc ff0f 	bl	8005498 <slalomF>
		slalomR(V90_2_DEGACCEL, V90_2_OMEGA, 90, SPEED_MIDDLE);
 800867a:	f44f 7316 	mov.w	r3, #600	; 0x258
 800867e:	225a      	movs	r2, #90	; 0x5a
 8008680:	f44f 7148 	mov.w	r1, #800	; 0x320
 8008684:	f242 7010 	movw	r0, #10000	; 0x2710
 8008688:	f7fc ffbc 	bl	8005604 <slalomR>
		turn_dir(DIR_TURN_L90_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 800868c:	2103      	movs	r1, #3
 800868e:	20fe      	movs	r0, #254	; 0xfe
 8008690:	f007 fc22 	bl	800fed8 <turn_dir>
		slalomB(10000, SPEED_MIDDLE, V90_2_OFFSET_B);
 8008694:	2252      	movs	r2, #82	; 0x52
 8008696:	f44f 7116 	mov.w	r1, #600	; 0x258
 800869a:	f242 7010 	movw	r0, #10000	; 0x2710
 800869e:	f7fd f8d3 	bl	8005848 <slalomB>
}
 80086a2:	e070      	b.n	8008786 <v_L90+0x186>
	}else if(run_mode == HIGH){
 80086a4:	4b39      	ldr	r3, [pc, #228]	; (800878c <v_L90+0x18c>)
 80086a6:	781b      	ldrb	r3, [r3, #0]
 80086a8:	b2db      	uxtb	r3, r3
 80086aa:	2b03      	cmp	r3, #3
 80086ac:	d120      	bne.n	80086f0 <v_L90+0xf0>
		slalomF(10000, SPEED_HIGH, V90_3_OFFSET_F, NO_WALL, NO_WALL);
 80086ae:	f241 3388 	movw	r3, #5000	; 0x1388
 80086b2:	9300      	str	r3, [sp, #0]
 80086b4:	f241 3388 	movw	r3, #5000	; 0x1388
 80086b8:	2223      	movs	r2, #35	; 0x23
 80086ba:	f44f 7148 	mov.w	r1, #800	; 0x320
 80086be:	f242 7010 	movw	r0, #10000	; 0x2710
 80086c2:	f7fc fee9 	bl	8005498 <slalomF>
		slalomR(V90_3_DEGACCEL, V90_3_OMEGA, 90, SPEED_HIGH);
 80086c6:	f44f 7348 	mov.w	r3, #800	; 0x320
 80086ca:	225a      	movs	r2, #90	; 0x5a
 80086cc:	f44f 7148 	mov.w	r1, #800	; 0x320
 80086d0:	f242 7010 	movw	r0, #10000	; 0x2710
 80086d4:	f7fc ff96 	bl	8005604 <slalomR>
		turn_dir(DIR_TURN_L90_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 80086d8:	2103      	movs	r1, #3
 80086da:	20fe      	movs	r0, #254	; 0xfe
 80086dc:	f007 fbfc 	bl	800fed8 <turn_dir>
		slalomB(10000, SPEED_HIGH, V90_3_OFFSET_B);
 80086e0:	2241      	movs	r2, #65	; 0x41
 80086e2:	f44f 7148 	mov.w	r1, #800	; 0x320
 80086e6:	f242 7010 	movw	r0, #10000	; 0x2710
 80086ea:	f7fd f8ad 	bl	8005848 <slalomB>
}
 80086ee:	e04a      	b.n	8008786 <v_L90+0x186>
	}else if(run_mode == HIGH_HIGH){
 80086f0:	4b26      	ldr	r3, [pc, #152]	; (800878c <v_L90+0x18c>)
 80086f2:	781b      	ldrb	r3, [r3, #0]
 80086f4:	b2db      	uxtb	r3, r3
 80086f6:	2b04      	cmp	r3, #4
 80086f8:	d120      	bne.n	800873c <v_L90+0x13c>
		slalomF(10000, SPEED_HIGH_HIGH, V90_4_OFFSET_F, NO_WALL, NO_WALL);
 80086fa:	f241 3388 	movw	r3, #5000	; 0x1388
 80086fe:	9300      	str	r3, [sp, #0]
 8008700:	f241 3388 	movw	r3, #5000	; 0x1388
 8008704:	221e      	movs	r2, #30
 8008706:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800870a:	f242 7010 	movw	r0, #10000	; 0x2710
 800870e:	f7fc fec3 	bl	8005498 <slalomF>
		slalomR(V90_4_DEGACCEL, V90_4_OMEGA, 90, SPEED_HIGH_HIGH);
 8008712:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008716:	225a      	movs	r2, #90	; 0x5a
 8008718:	f44f 7148 	mov.w	r1, #800	; 0x320
 800871c:	f44f 507a 	mov.w	r0, #16000	; 0x3e80
 8008720:	f7fc ff70 	bl	8005604 <slalomR>
		turn_dir(DIR_TURN_L90_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 8008724:	2103      	movs	r1, #3
 8008726:	20fe      	movs	r0, #254	; 0xfe
 8008728:	f007 fbd6 	bl	800fed8 <turn_dir>
		slalomB(10000, SPEED_HIGH_HIGH, V90_4_OFFSET_B);
 800872c:	221e      	movs	r2, #30
 800872e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8008732:	f242 7010 	movw	r0, #10000	; 0x2710
 8008736:	f7fd f887 	bl	8005848 <slalomB>
}
 800873a:	e024      	b.n	8008786 <v_L90+0x186>
	}else if(run_mode == 5){
 800873c:	4b13      	ldr	r3, [pc, #76]	; (800878c <v_L90+0x18c>)
 800873e:	781b      	ldrb	r3, [r3, #0]
 8008740:	b2db      	uxtb	r3, r3
 8008742:	2b05      	cmp	r3, #5
 8008744:	d11f      	bne.n	8008786 <v_L90+0x186>
		slalomF(10000, SPEED_5, V90_5_OFFSET_F, NO_WALL, NO_WALL);
 8008746:	f241 3388 	movw	r3, #5000	; 0x1388
 800874a:	9300      	str	r3, [sp, #0]
 800874c:	f241 3388 	movw	r3, #5000	; 0x1388
 8008750:	2214      	movs	r2, #20
 8008752:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 8008756:	f242 7010 	movw	r0, #10000	; 0x2710
 800875a:	f7fc fe9d 	bl	8005498 <slalomF>
		slalomR(V90_5_DEGACCEL, V90_5_OMEGA, 90, SPEED_5);
 800875e:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
 8008762:	225a      	movs	r2, #90	; 0x5a
 8008764:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8008768:	f44f 507a 	mov.w	r0, #16000	; 0x3e80
 800876c:	f7fc ff4a 	bl	8005604 <slalomR>
		turn_dir(DIR_TURN_L90_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 8008770:	2103      	movs	r1, #3
 8008772:	20fe      	movs	r0, #254	; 0xfe
 8008774:	f007 fbb0 	bl	800fed8 <turn_dir>
		slalomB(10000, SPEED_5, V90_5_OFFSET_B);
 8008778:	2214      	movs	r2, #20
 800877a:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 800877e:	f242 7010 	movw	r0, #10000	; 0x2710
 8008782:	f7fd f861 	bl	8005848 <slalomB>
}
 8008786:	bf00      	nop
 8008788:	46bd      	mov	sp, r7
 800878a:	bd80      	pop	{r7, pc}
 800878c:	20000456 	.word	0x20000456

08008790 <v_R135>:
//v_R135
// 区画中心から右に135度回転する　ゴール用
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void v_R135(void){
 8008790:	b580      	push	{r7, lr}
 8008792:	b082      	sub	sp, #8
 8008794:	af02      	add	r7, sp, #8
	full_led_write(YELLOW);
 8008796:	2006      	movs	r0, #6
 8008798:	f009 fa32 	bl	8011c00 <full_led_write>
	if(run_mode == LOW){
 800879c:	4bc2      	ldr	r3, [pc, #776]	; (8008aa8 <v_R135+0x318>)
 800879e:	781b      	ldrb	r3, [r3, #0]
 80087a0:	b2db      	uxtb	r3, r3
 80087a2:	2b01      	cmp	r3, #1
 80087a4:	d155      	bne.n	8008852 <v_R135+0xc2>
		if(!MF2.FLAG.V){
 80087a6:	4bc1      	ldr	r3, [pc, #772]	; (8008aac <v_R135+0x31c>)
 80087a8:	881b      	ldrh	r3, [r3, #0]
 80087aa:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80087ae:	b2db      	uxtb	r3, r3
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d10c      	bne.n	80087ce <v_R135+0x3e>
			slalomF(10000, SPEED_LOW, V135_OFFSET_F, NO_WALL, NO_WALL);
 80087b4:	f241 3388 	movw	r3, #5000	; 0x1388
 80087b8:	9300      	str	r3, [sp, #0]
 80087ba:	f241 3388 	movw	r3, #5000	; 0x1388
 80087be:	2244      	movs	r2, #68	; 0x44
 80087c0:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80087c4:	f242 7010 	movw	r0, #10000	; 0x2710
 80087c8:	f7fc fe66 	bl	8005498 <slalomF>
 80087cc:	e00b      	b.n	80087e6 <v_R135+0x56>
		}else{
			slalomF(10000, SPEED_LOW, V135_OFFSET_VF, NO_WALL, NO_WALL);
 80087ce:	f241 3388 	movw	r3, #5000	; 0x1388
 80087d2:	9300      	str	r3, [sp, #0]
 80087d4:	f241 3388 	movw	r3, #5000	; 0x1388
 80087d8:	223a      	movs	r2, #58	; 0x3a
 80087da:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80087de:	f242 7010 	movw	r0, #10000	; 0x2710
 80087e2:	f7fc fe59 	bl	8005498 <slalomF>
		}
		slalomR(-V135_DEGACCEL, -V135_OMEGA, -135, SPEED_LOW);
 80087e6:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80087ea:	f06f 0286 	mvn.w	r2, #134	; 0x86
 80087ee:	49b0      	ldr	r1, [pc, #704]	; (8008ab0 <v_R135+0x320>)
 80087f0:	48b0      	ldr	r0, [pc, #704]	; (8008ab4 <v_R135+0x324>)
 80087f2:	f7fc ff07 	bl	8005604 <slalomR>

		turn_dir(DIR_TURN_R135_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 80087f6:	2103      	movs	r1, #3
 80087f8:	2003      	movs	r0, #3
 80087fa:	f007 fb6d 	bl	800fed8 <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 80087fe:	4bab      	ldr	r3, [pc, #684]	; (8008aac <v_R135+0x31c>)
 8008800:	881b      	ldrh	r3, [r3, #0]
 8008802:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8008806:	b2db      	uxtb	r3, r3
 8008808:	3301      	adds	r3, #1
 800880a:	2b00      	cmp	r3, #0
 800880c:	f003 0301 	and.w	r3, r3, #1
 8008810:	bfb8      	it	lt
 8008812:	425b      	neglt	r3, r3
 8008814:	f003 0301 	and.w	r3, r3, #1
 8008818:	b2d9      	uxtb	r1, r3
 800881a:	4aa4      	ldr	r2, [pc, #656]	; (8008aac <v_R135+0x31c>)
 800881c:	8813      	ldrh	r3, [r2, #0]
 800881e:	f361 03c3 	bfi	r3, r1, #3, #1
 8008822:	8013      	strh	r3, [r2, #0]

		if(!MF2.FLAG.V){
 8008824:	4ba1      	ldr	r3, [pc, #644]	; (8008aac <v_R135+0x31c>)
 8008826:	881b      	ldrh	r3, [r3, #0]
 8008828:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800882c:	b2db      	uxtb	r3, r3
 800882e:	2b00      	cmp	r3, #0
 8008830:	d107      	bne.n	8008842 <v_R135+0xb2>
			slalomB(10000, SPEED_LOW, V135_OFFSET_VB);
 8008832:	2244      	movs	r2, #68	; 0x44
 8008834:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8008838:	f242 7010 	movw	r0, #10000	; 0x2710
 800883c:	f7fd f804 	bl	8005848 <slalomB>
			slalomB(10000, SPEED_5, V135_5_OFFSET_VB);
		}else{
			slalomB(10000, SPEED_5, V135_5_OFFSET_B);
		}
	}
}
 8008840:	e187      	b.n	8008b52 <v_R135+0x3c2>
			slalomB(10000, SPEED_LOW, V135_OFFSET_B);
 8008842:	223a      	movs	r2, #58	; 0x3a
 8008844:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8008848:	f242 7010 	movw	r0, #10000	; 0x2710
 800884c:	f7fc fffc 	bl	8005848 <slalomB>
}
 8008850:	e17f      	b.n	8008b52 <v_R135+0x3c2>
	}else if(run_mode == MIDDLE){
 8008852:	4b95      	ldr	r3, [pc, #596]	; (8008aa8 <v_R135+0x318>)
 8008854:	781b      	ldrb	r3, [r3, #0]
 8008856:	b2db      	uxtb	r3, r3
 8008858:	2b02      	cmp	r3, #2
 800885a:	d155      	bne.n	8008908 <v_R135+0x178>
		if(!MF2.FLAG.V){
 800885c:	4b93      	ldr	r3, [pc, #588]	; (8008aac <v_R135+0x31c>)
 800885e:	881b      	ldrh	r3, [r3, #0]
 8008860:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8008864:	b2db      	uxtb	r3, r3
 8008866:	2b00      	cmp	r3, #0
 8008868:	d10c      	bne.n	8008884 <v_R135+0xf4>
			slalomF(10000, SPEED_MIDDLE, V135_2_OFFSET_F, NO_WALL, NO_WALL);
 800886a:	f241 3388 	movw	r3, #5000	; 0x1388
 800886e:	9300      	str	r3, [sp, #0]
 8008870:	f241 3388 	movw	r3, #5000	; 0x1388
 8008874:	2246      	movs	r2, #70	; 0x46
 8008876:	f44f 7116 	mov.w	r1, #600	; 0x258
 800887a:	f242 7010 	movw	r0, #10000	; 0x2710
 800887e:	f7fc fe0b 	bl	8005498 <slalomF>
 8008882:	e00b      	b.n	800889c <v_R135+0x10c>
			slalomF(10000, SPEED_MIDDLE, V135_2_OFFSET_VF, NO_WALL, NO_WALL);
 8008884:	f241 3388 	movw	r3, #5000	; 0x1388
 8008888:	9300      	str	r3, [sp, #0]
 800888a:	f241 3388 	movw	r3, #5000	; 0x1388
 800888e:	2237      	movs	r2, #55	; 0x37
 8008890:	f44f 7116 	mov.w	r1, #600	; 0x258
 8008894:	f242 7010 	movw	r0, #10000	; 0x2710
 8008898:	f7fc fdfe 	bl	8005498 <slalomF>
		slalomR(-V135_2_DEGACCEL, -V135_2_OMEGA, -135, SPEED_MIDDLE);
 800889c:	f44f 7316 	mov.w	r3, #600	; 0x258
 80088a0:	f06f 0286 	mvn.w	r2, #134	; 0x86
 80088a4:	4984      	ldr	r1, [pc, #528]	; (8008ab8 <v_R135+0x328>)
 80088a6:	4885      	ldr	r0, [pc, #532]	; (8008abc <v_R135+0x32c>)
 80088a8:	f7fc feac 	bl	8005604 <slalomR>
		turn_dir(DIR_TURN_R135_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 80088ac:	2103      	movs	r1, #3
 80088ae:	2003      	movs	r0, #3
 80088b0:	f007 fb12 	bl	800fed8 <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 80088b4:	4b7d      	ldr	r3, [pc, #500]	; (8008aac <v_R135+0x31c>)
 80088b6:	881b      	ldrh	r3, [r3, #0]
 80088b8:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80088bc:	b2db      	uxtb	r3, r3
 80088be:	3301      	adds	r3, #1
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	f003 0301 	and.w	r3, r3, #1
 80088c6:	bfb8      	it	lt
 80088c8:	425b      	neglt	r3, r3
 80088ca:	f003 0301 	and.w	r3, r3, #1
 80088ce:	b2d9      	uxtb	r1, r3
 80088d0:	4a76      	ldr	r2, [pc, #472]	; (8008aac <v_R135+0x31c>)
 80088d2:	8813      	ldrh	r3, [r2, #0]
 80088d4:	f361 03c3 	bfi	r3, r1, #3, #1
 80088d8:	8013      	strh	r3, [r2, #0]
		if(!MF2.FLAG.V){
 80088da:	4b74      	ldr	r3, [pc, #464]	; (8008aac <v_R135+0x31c>)
 80088dc:	881b      	ldrh	r3, [r3, #0]
 80088de:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80088e2:	b2db      	uxtb	r3, r3
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d107      	bne.n	80088f8 <v_R135+0x168>
			slalomB(10000, SPEED_MIDDLE, V135_2_OFFSET_VB);
 80088e8:	225f      	movs	r2, #95	; 0x5f
 80088ea:	f44f 7116 	mov.w	r1, #600	; 0x258
 80088ee:	f242 7010 	movw	r0, #10000	; 0x2710
 80088f2:	f7fc ffa9 	bl	8005848 <slalomB>
}
 80088f6:	e12c      	b.n	8008b52 <v_R135+0x3c2>
			slalomB(10000, SPEED_MIDDLE, V135_2_OFFSET_B);
 80088f8:	2250      	movs	r2, #80	; 0x50
 80088fa:	f44f 7116 	mov.w	r1, #600	; 0x258
 80088fe:	f242 7010 	movw	r0, #10000	; 0x2710
 8008902:	f7fc ffa1 	bl	8005848 <slalomB>
}
 8008906:	e124      	b.n	8008b52 <v_R135+0x3c2>
	}else if(run_mode == HIGH){
 8008908:	4b67      	ldr	r3, [pc, #412]	; (8008aa8 <v_R135+0x318>)
 800890a:	781b      	ldrb	r3, [r3, #0]
 800890c:	b2db      	uxtb	r3, r3
 800890e:	2b03      	cmp	r3, #3
 8008910:	d155      	bne.n	80089be <v_R135+0x22e>
		if(!MF2.FLAG.V){
 8008912:	4b66      	ldr	r3, [pc, #408]	; (8008aac <v_R135+0x31c>)
 8008914:	881b      	ldrh	r3, [r3, #0]
 8008916:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800891a:	b2db      	uxtb	r3, r3
 800891c:	2b00      	cmp	r3, #0
 800891e:	d10c      	bne.n	800893a <v_R135+0x1aa>
			slalomF(10000, SPEED_HIGH, V135_3_OFFSET_F, NO_WALL, NO_WALL);
 8008920:	f241 3388 	movw	r3, #5000	; 0x1388
 8008924:	9300      	str	r3, [sp, #0]
 8008926:	f241 3388 	movw	r3, #5000	; 0x1388
 800892a:	2255      	movs	r2, #85	; 0x55
 800892c:	f44f 7148 	mov.w	r1, #800	; 0x320
 8008930:	f242 7010 	movw	r0, #10000	; 0x2710
 8008934:	f7fc fdb0 	bl	8005498 <slalomF>
 8008938:	e00b      	b.n	8008952 <v_R135+0x1c2>
			slalomF(10000, SPEED_HIGH, V135_3_OFFSET_VF, NO_WALL, NO_WALL);
 800893a:	f241 3388 	movw	r3, #5000	; 0x1388
 800893e:	9300      	str	r3, [sp, #0]
 8008940:	f241 3388 	movw	r3, #5000	; 0x1388
 8008944:	224b      	movs	r2, #75	; 0x4b
 8008946:	f44f 7148 	mov.w	r1, #800	; 0x320
 800894a:	f242 7010 	movw	r0, #10000	; 0x2710
 800894e:	f7fc fda3 	bl	8005498 <slalomF>
		slalomR(-V135_3_DEGACCEL, -V135_3_OMEGA, -135, SPEED_HIGH);
 8008952:	f44f 7348 	mov.w	r3, #800	; 0x320
 8008956:	f06f 0286 	mvn.w	r2, #134	; 0x86
 800895a:	4959      	ldr	r1, [pc, #356]	; (8008ac0 <v_R135+0x330>)
 800895c:	4859      	ldr	r0, [pc, #356]	; (8008ac4 <v_R135+0x334>)
 800895e:	f7fc fe51 	bl	8005604 <slalomR>
		turn_dir(DIR_TURN_R135_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 8008962:	2103      	movs	r1, #3
 8008964:	2003      	movs	r0, #3
 8008966:	f007 fab7 	bl	800fed8 <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 800896a:	4b50      	ldr	r3, [pc, #320]	; (8008aac <v_R135+0x31c>)
 800896c:	881b      	ldrh	r3, [r3, #0]
 800896e:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8008972:	b2db      	uxtb	r3, r3
 8008974:	3301      	adds	r3, #1
 8008976:	2b00      	cmp	r3, #0
 8008978:	f003 0301 	and.w	r3, r3, #1
 800897c:	bfb8      	it	lt
 800897e:	425b      	neglt	r3, r3
 8008980:	f003 0301 	and.w	r3, r3, #1
 8008984:	b2d9      	uxtb	r1, r3
 8008986:	4a49      	ldr	r2, [pc, #292]	; (8008aac <v_R135+0x31c>)
 8008988:	8813      	ldrh	r3, [r2, #0]
 800898a:	f361 03c3 	bfi	r3, r1, #3, #1
 800898e:	8013      	strh	r3, [r2, #0]
		if(!MF2.FLAG.V){
 8008990:	4b46      	ldr	r3, [pc, #280]	; (8008aac <v_R135+0x31c>)
 8008992:	881b      	ldrh	r3, [r3, #0]
 8008994:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8008998:	b2db      	uxtb	r3, r3
 800899a:	2b00      	cmp	r3, #0
 800899c:	d107      	bne.n	80089ae <v_R135+0x21e>
			slalomB(10000, SPEED_HIGH, V135_3_OFFSET_VB);
 800899e:	2282      	movs	r2, #130	; 0x82
 80089a0:	f44f 7148 	mov.w	r1, #800	; 0x320
 80089a4:	f242 7010 	movw	r0, #10000	; 0x2710
 80089a8:	f7fc ff4e 	bl	8005848 <slalomB>
}
 80089ac:	e0d1      	b.n	8008b52 <v_R135+0x3c2>
			slalomB(10000, SPEED_HIGH, V135_3_OFFSET_B);
 80089ae:	2269      	movs	r2, #105	; 0x69
 80089b0:	f44f 7148 	mov.w	r1, #800	; 0x320
 80089b4:	f242 7010 	movw	r0, #10000	; 0x2710
 80089b8:	f7fc ff46 	bl	8005848 <slalomB>
}
 80089bc:	e0c9      	b.n	8008b52 <v_R135+0x3c2>
	}else if(run_mode == HIGH_HIGH){
 80089be:	4b3a      	ldr	r3, [pc, #232]	; (8008aa8 <v_R135+0x318>)
 80089c0:	781b      	ldrb	r3, [r3, #0]
 80089c2:	b2db      	uxtb	r3, r3
 80089c4:	2b04      	cmp	r3, #4
 80089c6:	d155      	bne.n	8008a74 <v_R135+0x2e4>
		if(!MF2.FLAG.V){
 80089c8:	4b38      	ldr	r3, [pc, #224]	; (8008aac <v_R135+0x31c>)
 80089ca:	881b      	ldrh	r3, [r3, #0]
 80089cc:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80089d0:	b2db      	uxtb	r3, r3
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d10c      	bne.n	80089f0 <v_R135+0x260>
			slalomF(10000, SPEED_HIGH_HIGH, V135_4_OFFSET_F, NO_WALL, NO_WALL);
 80089d6:	f241 3388 	movw	r3, #5000	; 0x1388
 80089da:	9300      	str	r3, [sp, #0]
 80089dc:	f241 3388 	movw	r3, #5000	; 0x1388
 80089e0:	2243      	movs	r2, #67	; 0x43
 80089e2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80089e6:	f242 7010 	movw	r0, #10000	; 0x2710
 80089ea:	f7fc fd55 	bl	8005498 <slalomF>
 80089ee:	e00b      	b.n	8008a08 <v_R135+0x278>
			slalomF(10000, SPEED_HIGH_HIGH, V135_4_OFFSET_VF, NO_WALL, NO_WALL);
 80089f0:	f241 3388 	movw	r3, #5000	; 0x1388
 80089f4:	9300      	str	r3, [sp, #0]
 80089f6:	f241 3388 	movw	r3, #5000	; 0x1388
 80089fa:	2243      	movs	r2, #67	; 0x43
 80089fc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8008a00:	f242 7010 	movw	r0, #10000	; 0x2710
 8008a04:	f7fc fd48 	bl	8005498 <slalomF>
		slalomR(-V135_4_DEGACCEL, -V135_4_OMEGA, -135, SPEED_HIGH_HIGH);
 8008a08:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008a0c:	f06f 0286 	mvn.w	r2, #134	; 0x86
 8008a10:	492d      	ldr	r1, [pc, #180]	; (8008ac8 <v_R135+0x338>)
 8008a12:	482e      	ldr	r0, [pc, #184]	; (8008acc <v_R135+0x33c>)
 8008a14:	f7fc fdf6 	bl	8005604 <slalomR>
		turn_dir(DIR_TURN_R135_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 8008a18:	2103      	movs	r1, #3
 8008a1a:	2003      	movs	r0, #3
 8008a1c:	f007 fa5c 	bl	800fed8 <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 8008a20:	4b22      	ldr	r3, [pc, #136]	; (8008aac <v_R135+0x31c>)
 8008a22:	881b      	ldrh	r3, [r3, #0]
 8008a24:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8008a28:	b2db      	uxtb	r3, r3
 8008a2a:	3301      	adds	r3, #1
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	f003 0301 	and.w	r3, r3, #1
 8008a32:	bfb8      	it	lt
 8008a34:	425b      	neglt	r3, r3
 8008a36:	f003 0301 	and.w	r3, r3, #1
 8008a3a:	b2d9      	uxtb	r1, r3
 8008a3c:	4a1b      	ldr	r2, [pc, #108]	; (8008aac <v_R135+0x31c>)
 8008a3e:	8813      	ldrh	r3, [r2, #0]
 8008a40:	f361 03c3 	bfi	r3, r1, #3, #1
 8008a44:	8013      	strh	r3, [r2, #0]
		if(!MF2.FLAG.V){
 8008a46:	4b19      	ldr	r3, [pc, #100]	; (8008aac <v_R135+0x31c>)
 8008a48:	881b      	ldrh	r3, [r3, #0]
 8008a4a:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8008a4e:	b2db      	uxtb	r3, r3
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d107      	bne.n	8008a64 <v_R135+0x2d4>
			slalomB(10000, SPEED_HIGH_HIGH, V135_4_OFFSET_VB);
 8008a54:	2232      	movs	r2, #50	; 0x32
 8008a56:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8008a5a:	f242 7010 	movw	r0, #10000	; 0x2710
 8008a5e:	f7fc fef3 	bl	8005848 <slalomB>
}
 8008a62:	e076      	b.n	8008b52 <v_R135+0x3c2>
			slalomB(10000, SPEED_HIGH_HIGH, V135_4_OFFSET_B);
 8008a64:	2232      	movs	r2, #50	; 0x32
 8008a66:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8008a6a:	f242 7010 	movw	r0, #10000	; 0x2710
 8008a6e:	f7fc feeb 	bl	8005848 <slalomB>
}
 8008a72:	e06e      	b.n	8008b52 <v_R135+0x3c2>
	}else if(run_mode == 5){
 8008a74:	4b0c      	ldr	r3, [pc, #48]	; (8008aa8 <v_R135+0x318>)
 8008a76:	781b      	ldrb	r3, [r3, #0]
 8008a78:	b2db      	uxtb	r3, r3
 8008a7a:	2b05      	cmp	r3, #5
 8008a7c:	d169      	bne.n	8008b52 <v_R135+0x3c2>
		if(!MF2.FLAG.V){
 8008a7e:	4b0b      	ldr	r3, [pc, #44]	; (8008aac <v_R135+0x31c>)
 8008a80:	881b      	ldrh	r3, [r3, #0]
 8008a82:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8008a86:	b2db      	uxtb	r3, r3
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d121      	bne.n	8008ad0 <v_R135+0x340>
			slalomF(10000, SPEED_5, V135_5_OFFSET_F, NO_WALL, NO_WALL);
 8008a8c:	f241 3388 	movw	r3, #5000	; 0x1388
 8008a90:	9300      	str	r3, [sp, #0]
 8008a92:	f241 3388 	movw	r3, #5000	; 0x1388
 8008a96:	2228      	movs	r2, #40	; 0x28
 8008a98:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 8008a9c:	f242 7010 	movw	r0, #10000	; 0x2710
 8008aa0:	f7fc fcfa 	bl	8005498 <slalomF>
 8008aa4:	e020      	b.n	8008ae8 <v_R135+0x358>
 8008aa6:	bf00      	nop
 8008aa8:	20000456 	.word	0x20000456
 8008aac:	20000f64 	.word	0x20000f64
 8008ab0:	fffffed4 	.word	0xfffffed4
 8008ab4:	fffff448 	.word	0xfffff448
 8008ab8:	fffffe0c 	.word	0xfffffe0c
 8008abc:	ffffec78 	.word	0xffffec78
 8008ac0:	fffffce0 	.word	0xfffffce0
 8008ac4:	ffffe0c0 	.word	0xffffe0c0
 8008ac8:	fffffc18 	.word	0xfffffc18
 8008acc:	ffffd8f0 	.word	0xffffd8f0
			slalomF(10000, SPEED_5, V135_5_OFFSET_VF, NO_WALL, NO_WALL);
 8008ad0:	f241 3388 	movw	r3, #5000	; 0x1388
 8008ad4:	9300      	str	r3, [sp, #0]
 8008ad6:	f241 3388 	movw	r3, #5000	; 0x1388
 8008ada:	2243      	movs	r2, #67	; 0x43
 8008adc:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 8008ae0:	f242 7010 	movw	r0, #10000	; 0x2710
 8008ae4:	f7fc fcd8 	bl	8005498 <slalomF>
		slalomR(-V135_5_DEGACCEL, -V135_5_OMEGA, -135, SPEED_5);
 8008ae8:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
 8008aec:	f06f 0286 	mvn.w	r2, #134	; 0x86
 8008af0:	4919      	ldr	r1, [pc, #100]	; (8008b58 <v_R135+0x3c8>)
 8008af2:	481a      	ldr	r0, [pc, #104]	; (8008b5c <v_R135+0x3cc>)
 8008af4:	f7fc fd86 	bl	8005604 <slalomR>
		turn_dir(DIR_TURN_R135_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 8008af8:	2103      	movs	r1, #3
 8008afa:	2003      	movs	r0, #3
 8008afc:	f007 f9ec 	bl	800fed8 <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 8008b00:	4b17      	ldr	r3, [pc, #92]	; (8008b60 <v_R135+0x3d0>)
 8008b02:	881b      	ldrh	r3, [r3, #0]
 8008b04:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8008b08:	b2db      	uxtb	r3, r3
 8008b0a:	3301      	adds	r3, #1
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	f003 0301 	and.w	r3, r3, #1
 8008b12:	bfb8      	it	lt
 8008b14:	425b      	neglt	r3, r3
 8008b16:	f003 0301 	and.w	r3, r3, #1
 8008b1a:	b2d9      	uxtb	r1, r3
 8008b1c:	4a10      	ldr	r2, [pc, #64]	; (8008b60 <v_R135+0x3d0>)
 8008b1e:	8813      	ldrh	r3, [r2, #0]
 8008b20:	f361 03c3 	bfi	r3, r1, #3, #1
 8008b24:	8013      	strh	r3, [r2, #0]
		if(!MF2.FLAG.V){
 8008b26:	4b0e      	ldr	r3, [pc, #56]	; (8008b60 <v_R135+0x3d0>)
 8008b28:	881b      	ldrh	r3, [r3, #0]
 8008b2a:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8008b2e:	b2db      	uxtb	r3, r3
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d107      	bne.n	8008b44 <v_R135+0x3b4>
			slalomB(10000, SPEED_5, V135_5_OFFSET_VB);
 8008b34:	2232      	movs	r2, #50	; 0x32
 8008b36:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 8008b3a:	f242 7010 	movw	r0, #10000	; 0x2710
 8008b3e:	f7fc fe83 	bl	8005848 <slalomB>
}
 8008b42:	e006      	b.n	8008b52 <v_R135+0x3c2>
			slalomB(10000, SPEED_5, V135_5_OFFSET_B);
 8008b44:	2219      	movs	r2, #25
 8008b46:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 8008b4a:	f242 7010 	movw	r0, #10000	; 0x2710
 8008b4e:	f7fc fe7b 	bl	8005848 <slalomB>
}
 8008b52:	bf00      	nop
 8008b54:	46bd      	mov	sp, r7
 8008b56:	bd80      	pop	{r7, pc}
 8008b58:	fffffc18 	.word	0xfffffc18
 8008b5c:	ffffd120 	.word	0xffffd120
 8008b60:	20000f64 	.word	0x20000f64

08008b64 <v_L135>:
//v_L135
// 区画中心から左に135度回転する　ゴール用
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void v_L135(void){
 8008b64:	b580      	push	{r7, lr}
 8008b66:	b082      	sub	sp, #8
 8008b68:	af02      	add	r7, sp, #8
	full_led_write(PURPLE);
 8008b6a:	2005      	movs	r0, #5
 8008b6c:	f009 f848 	bl	8011c00 <full_led_write>
	if(run_mode == LOW){
 8008b70:	4bc4      	ldr	r3, [pc, #784]	; (8008e84 <v_L135+0x320>)
 8008b72:	781b      	ldrb	r3, [r3, #0]
 8008b74:	b2db      	uxtb	r3, r3
 8008b76:	2b01      	cmp	r3, #1
 8008b78:	d156      	bne.n	8008c28 <v_L135+0xc4>
		if(!MF2.FLAG.V){
 8008b7a:	4bc3      	ldr	r3, [pc, #780]	; (8008e88 <v_L135+0x324>)
 8008b7c:	881b      	ldrh	r3, [r3, #0]
 8008b7e:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8008b82:	b2db      	uxtb	r3, r3
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d10c      	bne.n	8008ba2 <v_L135+0x3e>
			slalomF(10000, SPEED_LOW, V135_OFFSET_F, NO_WALL, NO_WALL);
 8008b88:	f241 3388 	movw	r3, #5000	; 0x1388
 8008b8c:	9300      	str	r3, [sp, #0]
 8008b8e:	f241 3388 	movw	r3, #5000	; 0x1388
 8008b92:	2244      	movs	r2, #68	; 0x44
 8008b94:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8008b98:	f242 7010 	movw	r0, #10000	; 0x2710
 8008b9c:	f7fc fc7c 	bl	8005498 <slalomF>
 8008ba0:	e00b      	b.n	8008bba <v_L135+0x56>
		}else{
			slalomF(10000, SPEED_LOW, V135_OFFSET_VF, NO_WALL, NO_WALL);
 8008ba2:	f241 3388 	movw	r3, #5000	; 0x1388
 8008ba6:	9300      	str	r3, [sp, #0]
 8008ba8:	f241 3388 	movw	r3, #5000	; 0x1388
 8008bac:	223a      	movs	r2, #58	; 0x3a
 8008bae:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8008bb2:	f242 7010 	movw	r0, #10000	; 0x2710
 8008bb6:	f7fc fc6f 	bl	8005498 <slalomF>
		}
		slalomR(V135_DEGACCEL, V135_OMEGA, 135, SPEED_LOW);
 8008bba:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8008bbe:	2287      	movs	r2, #135	; 0x87
 8008bc0:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8008bc4:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8008bc8:	f7fc fd1c 	bl	8005604 <slalomR>

		turn_dir(DIR_TURN_L135_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 8008bcc:	2103      	movs	r1, #3
 8008bce:	20fd      	movs	r0, #253	; 0xfd
 8008bd0:	f007 f982 	bl	800fed8 <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 8008bd4:	4bac      	ldr	r3, [pc, #688]	; (8008e88 <v_L135+0x324>)
 8008bd6:	881b      	ldrh	r3, [r3, #0]
 8008bd8:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8008bdc:	b2db      	uxtb	r3, r3
 8008bde:	3301      	adds	r3, #1
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	f003 0301 	and.w	r3, r3, #1
 8008be6:	bfb8      	it	lt
 8008be8:	425b      	neglt	r3, r3
 8008bea:	f003 0301 	and.w	r3, r3, #1
 8008bee:	b2d9      	uxtb	r1, r3
 8008bf0:	4aa5      	ldr	r2, [pc, #660]	; (8008e88 <v_L135+0x324>)
 8008bf2:	8813      	ldrh	r3, [r2, #0]
 8008bf4:	f361 03c3 	bfi	r3, r1, #3, #1
 8008bf8:	8013      	strh	r3, [r2, #0]

		if(!MF2.FLAG.V){
 8008bfa:	4ba3      	ldr	r3, [pc, #652]	; (8008e88 <v_L135+0x324>)
 8008bfc:	881b      	ldrh	r3, [r3, #0]
 8008bfe:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8008c02:	b2db      	uxtb	r3, r3
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d107      	bne.n	8008c18 <v_L135+0xb4>
			slalomB(10000, SPEED_LOW, V135_OFFSET_VB);
 8008c08:	2244      	movs	r2, #68	; 0x44
 8008c0a:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8008c0e:	f242 7010 	movw	r0, #10000	; 0x2710
 8008c12:	f7fc fe19 	bl	8005848 <slalomB>
			slalomB(10000, SPEED_5, V135_5_OFFSET_VB);
		}else{
			slalomB(10000, SPEED_5, V135_5_OFFSET_B);
		}
	}
}
 8008c16:	e17b      	b.n	8008f10 <v_L135+0x3ac>
			slalomB(10000, SPEED_LOW, V135_OFFSET_B);
 8008c18:	223a      	movs	r2, #58	; 0x3a
 8008c1a:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8008c1e:	f242 7010 	movw	r0, #10000	; 0x2710
 8008c22:	f7fc fe11 	bl	8005848 <slalomB>
}
 8008c26:	e173      	b.n	8008f10 <v_L135+0x3ac>
	}else if(run_mode == MIDDLE){
 8008c28:	4b96      	ldr	r3, [pc, #600]	; (8008e84 <v_L135+0x320>)
 8008c2a:	781b      	ldrb	r3, [r3, #0]
 8008c2c:	b2db      	uxtb	r3, r3
 8008c2e:	2b02      	cmp	r3, #2
 8008c30:	d156      	bne.n	8008ce0 <v_L135+0x17c>
		if(!MF2.FLAG.V){
 8008c32:	4b95      	ldr	r3, [pc, #596]	; (8008e88 <v_L135+0x324>)
 8008c34:	881b      	ldrh	r3, [r3, #0]
 8008c36:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8008c3a:	b2db      	uxtb	r3, r3
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d10c      	bne.n	8008c5a <v_L135+0xf6>
			slalomF(10000, SPEED_MIDDLE, V135_2_OFFSET_F, NO_WALL, NO_WALL);
 8008c40:	f241 3388 	movw	r3, #5000	; 0x1388
 8008c44:	9300      	str	r3, [sp, #0]
 8008c46:	f241 3388 	movw	r3, #5000	; 0x1388
 8008c4a:	2246      	movs	r2, #70	; 0x46
 8008c4c:	f44f 7116 	mov.w	r1, #600	; 0x258
 8008c50:	f242 7010 	movw	r0, #10000	; 0x2710
 8008c54:	f7fc fc20 	bl	8005498 <slalomF>
 8008c58:	e00b      	b.n	8008c72 <v_L135+0x10e>
			slalomF(10000, SPEED_MIDDLE, V135_2_OFFSET_VF, NO_WALL, NO_WALL);
 8008c5a:	f241 3388 	movw	r3, #5000	; 0x1388
 8008c5e:	9300      	str	r3, [sp, #0]
 8008c60:	f241 3388 	movw	r3, #5000	; 0x1388
 8008c64:	2237      	movs	r2, #55	; 0x37
 8008c66:	f44f 7116 	mov.w	r1, #600	; 0x258
 8008c6a:	f242 7010 	movw	r0, #10000	; 0x2710
 8008c6e:	f7fc fc13 	bl	8005498 <slalomF>
		slalomR(V135_2_DEGACCEL, V135_2_OMEGA, 135, SPEED_MIDDLE);
 8008c72:	f44f 7316 	mov.w	r3, #600	; 0x258
 8008c76:	2287      	movs	r2, #135	; 0x87
 8008c78:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8008c7c:	f241 3088 	movw	r0, #5000	; 0x1388
 8008c80:	f7fc fcc0 	bl	8005604 <slalomR>
		turn_dir(DIR_TURN_L135_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 8008c84:	2103      	movs	r1, #3
 8008c86:	20fd      	movs	r0, #253	; 0xfd
 8008c88:	f007 f926 	bl	800fed8 <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 8008c8c:	4b7e      	ldr	r3, [pc, #504]	; (8008e88 <v_L135+0x324>)
 8008c8e:	881b      	ldrh	r3, [r3, #0]
 8008c90:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8008c94:	b2db      	uxtb	r3, r3
 8008c96:	3301      	adds	r3, #1
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	f003 0301 	and.w	r3, r3, #1
 8008c9e:	bfb8      	it	lt
 8008ca0:	425b      	neglt	r3, r3
 8008ca2:	f003 0301 	and.w	r3, r3, #1
 8008ca6:	b2d9      	uxtb	r1, r3
 8008ca8:	4a77      	ldr	r2, [pc, #476]	; (8008e88 <v_L135+0x324>)
 8008caa:	8813      	ldrh	r3, [r2, #0]
 8008cac:	f361 03c3 	bfi	r3, r1, #3, #1
 8008cb0:	8013      	strh	r3, [r2, #0]
		if(!MF2.FLAG.V){
 8008cb2:	4b75      	ldr	r3, [pc, #468]	; (8008e88 <v_L135+0x324>)
 8008cb4:	881b      	ldrh	r3, [r3, #0]
 8008cb6:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8008cba:	b2db      	uxtb	r3, r3
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d107      	bne.n	8008cd0 <v_L135+0x16c>
			slalomB(10000, SPEED_MIDDLE, V135_2_OFFSET_VB);
 8008cc0:	225f      	movs	r2, #95	; 0x5f
 8008cc2:	f44f 7116 	mov.w	r1, #600	; 0x258
 8008cc6:	f242 7010 	movw	r0, #10000	; 0x2710
 8008cca:	f7fc fdbd 	bl	8005848 <slalomB>
}
 8008cce:	e11f      	b.n	8008f10 <v_L135+0x3ac>
			slalomB(10000, SPEED_MIDDLE, V135_2_OFFSET_B);
 8008cd0:	2250      	movs	r2, #80	; 0x50
 8008cd2:	f44f 7116 	mov.w	r1, #600	; 0x258
 8008cd6:	f242 7010 	movw	r0, #10000	; 0x2710
 8008cda:	f7fc fdb5 	bl	8005848 <slalomB>
}
 8008cde:	e117      	b.n	8008f10 <v_L135+0x3ac>
	}else if(run_mode == HIGH){
 8008ce0:	4b68      	ldr	r3, [pc, #416]	; (8008e84 <v_L135+0x320>)
 8008ce2:	781b      	ldrb	r3, [r3, #0]
 8008ce4:	b2db      	uxtb	r3, r3
 8008ce6:	2b03      	cmp	r3, #3
 8008ce8:	d156      	bne.n	8008d98 <v_L135+0x234>
		if(!MF2.FLAG.V){
 8008cea:	4b67      	ldr	r3, [pc, #412]	; (8008e88 <v_L135+0x324>)
 8008cec:	881b      	ldrh	r3, [r3, #0]
 8008cee:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8008cf2:	b2db      	uxtb	r3, r3
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d10c      	bne.n	8008d12 <v_L135+0x1ae>
			slalomF(10000, SPEED_HIGH, V135_3_OFFSET_F, NO_WALL, NO_WALL);
 8008cf8:	f241 3388 	movw	r3, #5000	; 0x1388
 8008cfc:	9300      	str	r3, [sp, #0]
 8008cfe:	f241 3388 	movw	r3, #5000	; 0x1388
 8008d02:	2255      	movs	r2, #85	; 0x55
 8008d04:	f44f 7148 	mov.w	r1, #800	; 0x320
 8008d08:	f242 7010 	movw	r0, #10000	; 0x2710
 8008d0c:	f7fc fbc4 	bl	8005498 <slalomF>
 8008d10:	e00b      	b.n	8008d2a <v_L135+0x1c6>
			slalomF(10000, SPEED_HIGH, V135_3_OFFSET_VF, NO_WALL, NO_WALL);
 8008d12:	f241 3388 	movw	r3, #5000	; 0x1388
 8008d16:	9300      	str	r3, [sp, #0]
 8008d18:	f241 3388 	movw	r3, #5000	; 0x1388
 8008d1c:	224b      	movs	r2, #75	; 0x4b
 8008d1e:	f44f 7148 	mov.w	r1, #800	; 0x320
 8008d22:	f242 7010 	movw	r0, #10000	; 0x2710
 8008d26:	f7fc fbb7 	bl	8005498 <slalomF>
		slalomR(V135_3_DEGACCEL, V135_3_OMEGA, 135, SPEED_HIGH);
 8008d2a:	f44f 7348 	mov.w	r3, #800	; 0x320
 8008d2e:	2287      	movs	r2, #135	; 0x87
 8008d30:	f44f 7148 	mov.w	r1, #800	; 0x320
 8008d34:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 8008d38:	f7fc fc64 	bl	8005604 <slalomR>
		turn_dir(DIR_TURN_L135_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 8008d3c:	2103      	movs	r1, #3
 8008d3e:	20fd      	movs	r0, #253	; 0xfd
 8008d40:	f007 f8ca 	bl	800fed8 <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 8008d44:	4b50      	ldr	r3, [pc, #320]	; (8008e88 <v_L135+0x324>)
 8008d46:	881b      	ldrh	r3, [r3, #0]
 8008d48:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8008d4c:	b2db      	uxtb	r3, r3
 8008d4e:	3301      	adds	r3, #1
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	f003 0301 	and.w	r3, r3, #1
 8008d56:	bfb8      	it	lt
 8008d58:	425b      	neglt	r3, r3
 8008d5a:	f003 0301 	and.w	r3, r3, #1
 8008d5e:	b2d9      	uxtb	r1, r3
 8008d60:	4a49      	ldr	r2, [pc, #292]	; (8008e88 <v_L135+0x324>)
 8008d62:	8813      	ldrh	r3, [r2, #0]
 8008d64:	f361 03c3 	bfi	r3, r1, #3, #1
 8008d68:	8013      	strh	r3, [r2, #0]
		if(!MF2.FLAG.V){
 8008d6a:	4b47      	ldr	r3, [pc, #284]	; (8008e88 <v_L135+0x324>)
 8008d6c:	881b      	ldrh	r3, [r3, #0]
 8008d6e:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8008d72:	b2db      	uxtb	r3, r3
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d107      	bne.n	8008d88 <v_L135+0x224>
			slalomB(10000, SPEED_HIGH, V135_3_OFFSET_VB);
 8008d78:	2282      	movs	r2, #130	; 0x82
 8008d7a:	f44f 7148 	mov.w	r1, #800	; 0x320
 8008d7e:	f242 7010 	movw	r0, #10000	; 0x2710
 8008d82:	f7fc fd61 	bl	8005848 <slalomB>
}
 8008d86:	e0c3      	b.n	8008f10 <v_L135+0x3ac>
			slalomB(10000, SPEED_HIGH, V135_3_OFFSET_B);
 8008d88:	2269      	movs	r2, #105	; 0x69
 8008d8a:	f44f 7148 	mov.w	r1, #800	; 0x320
 8008d8e:	f242 7010 	movw	r0, #10000	; 0x2710
 8008d92:	f7fc fd59 	bl	8005848 <slalomB>
}
 8008d96:	e0bb      	b.n	8008f10 <v_L135+0x3ac>
	}else if(run_mode == HIGH_HIGH){
 8008d98:	4b3a      	ldr	r3, [pc, #232]	; (8008e84 <v_L135+0x320>)
 8008d9a:	781b      	ldrb	r3, [r3, #0]
 8008d9c:	b2db      	uxtb	r3, r3
 8008d9e:	2b04      	cmp	r3, #4
 8008da0:	d156      	bne.n	8008e50 <v_L135+0x2ec>
		if(!MF2.FLAG.V){
 8008da2:	4b39      	ldr	r3, [pc, #228]	; (8008e88 <v_L135+0x324>)
 8008da4:	881b      	ldrh	r3, [r3, #0]
 8008da6:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8008daa:	b2db      	uxtb	r3, r3
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d10c      	bne.n	8008dca <v_L135+0x266>
			slalomF(10000, SPEED_HIGH_HIGH, V135_4_OFFSET_F, NO_WALL, NO_WALL);
 8008db0:	f241 3388 	movw	r3, #5000	; 0x1388
 8008db4:	9300      	str	r3, [sp, #0]
 8008db6:	f241 3388 	movw	r3, #5000	; 0x1388
 8008dba:	2243      	movs	r2, #67	; 0x43
 8008dbc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8008dc0:	f242 7010 	movw	r0, #10000	; 0x2710
 8008dc4:	f7fc fb68 	bl	8005498 <slalomF>
 8008dc8:	e00b      	b.n	8008de2 <v_L135+0x27e>
			slalomF(10000, SPEED_HIGH_HIGH, V135_4_OFFSET_VF, NO_WALL, NO_WALL);
 8008dca:	f241 3388 	movw	r3, #5000	; 0x1388
 8008dce:	9300      	str	r3, [sp, #0]
 8008dd0:	f241 3388 	movw	r3, #5000	; 0x1388
 8008dd4:	2243      	movs	r2, #67	; 0x43
 8008dd6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8008dda:	f242 7010 	movw	r0, #10000	; 0x2710
 8008dde:	f7fc fb5b 	bl	8005498 <slalomF>
		slalomR(V135_4_DEGACCEL, V135_4_OMEGA, 135, SPEED_HIGH_HIGH);
 8008de2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008de6:	2287      	movs	r2, #135	; 0x87
 8008de8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8008dec:	f242 7010 	movw	r0, #10000	; 0x2710
 8008df0:	f7fc fc08 	bl	8005604 <slalomR>
		turn_dir(DIR_TURN_L135_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 8008df4:	2103      	movs	r1, #3
 8008df6:	20fd      	movs	r0, #253	; 0xfd
 8008df8:	f007 f86e 	bl	800fed8 <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 8008dfc:	4b22      	ldr	r3, [pc, #136]	; (8008e88 <v_L135+0x324>)
 8008dfe:	881b      	ldrh	r3, [r3, #0]
 8008e00:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8008e04:	b2db      	uxtb	r3, r3
 8008e06:	3301      	adds	r3, #1
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	f003 0301 	and.w	r3, r3, #1
 8008e0e:	bfb8      	it	lt
 8008e10:	425b      	neglt	r3, r3
 8008e12:	f003 0301 	and.w	r3, r3, #1
 8008e16:	b2d9      	uxtb	r1, r3
 8008e18:	4a1b      	ldr	r2, [pc, #108]	; (8008e88 <v_L135+0x324>)
 8008e1a:	8813      	ldrh	r3, [r2, #0]
 8008e1c:	f361 03c3 	bfi	r3, r1, #3, #1
 8008e20:	8013      	strh	r3, [r2, #0]
		if(!MF2.FLAG.V){
 8008e22:	4b19      	ldr	r3, [pc, #100]	; (8008e88 <v_L135+0x324>)
 8008e24:	881b      	ldrh	r3, [r3, #0]
 8008e26:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8008e2a:	b2db      	uxtb	r3, r3
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d107      	bne.n	8008e40 <v_L135+0x2dc>
			slalomB(10000, SPEED_HIGH_HIGH, V135_4_OFFSET_VB);
 8008e30:	2232      	movs	r2, #50	; 0x32
 8008e32:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8008e36:	f242 7010 	movw	r0, #10000	; 0x2710
 8008e3a:	f7fc fd05 	bl	8005848 <slalomB>
}
 8008e3e:	e067      	b.n	8008f10 <v_L135+0x3ac>
			slalomB(10000, SPEED_HIGH_HIGH, V135_4_OFFSET_B);
 8008e40:	2232      	movs	r2, #50	; 0x32
 8008e42:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8008e46:	f242 7010 	movw	r0, #10000	; 0x2710
 8008e4a:	f7fc fcfd 	bl	8005848 <slalomB>
}
 8008e4e:	e05f      	b.n	8008f10 <v_L135+0x3ac>
	}else if(run_mode == 5){
 8008e50:	4b0c      	ldr	r3, [pc, #48]	; (8008e84 <v_L135+0x320>)
 8008e52:	781b      	ldrb	r3, [r3, #0]
 8008e54:	b2db      	uxtb	r3, r3
 8008e56:	2b05      	cmp	r3, #5
 8008e58:	d15a      	bne.n	8008f10 <v_L135+0x3ac>
		if(!MF2.FLAG.V){
 8008e5a:	4b0b      	ldr	r3, [pc, #44]	; (8008e88 <v_L135+0x324>)
 8008e5c:	881b      	ldrh	r3, [r3, #0]
 8008e5e:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8008e62:	b2db      	uxtb	r3, r3
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d111      	bne.n	8008e8c <v_L135+0x328>
			slalomF(10000, SPEED_5, V135_5_OFFSET_F, NO_WALL, NO_WALL);
 8008e68:	f241 3388 	movw	r3, #5000	; 0x1388
 8008e6c:	9300      	str	r3, [sp, #0]
 8008e6e:	f241 3388 	movw	r3, #5000	; 0x1388
 8008e72:	2228      	movs	r2, #40	; 0x28
 8008e74:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 8008e78:	f242 7010 	movw	r0, #10000	; 0x2710
 8008e7c:	f7fc fb0c 	bl	8005498 <slalomF>
 8008e80:	e010      	b.n	8008ea4 <v_L135+0x340>
 8008e82:	bf00      	nop
 8008e84:	20000456 	.word	0x20000456
 8008e88:	20000f64 	.word	0x20000f64
			slalomF(10000, SPEED_5, V135_5_OFFSET_VF, NO_WALL, NO_WALL);
 8008e8c:	f241 3388 	movw	r3, #5000	; 0x1388
 8008e90:	9300      	str	r3, [sp, #0]
 8008e92:	f241 3388 	movw	r3, #5000	; 0x1388
 8008e96:	2243      	movs	r2, #67	; 0x43
 8008e98:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 8008e9c:	f242 7010 	movw	r0, #10000	; 0x2710
 8008ea0:	f7fc fafa 	bl	8005498 <slalomF>
		slalomR(V135_5_DEGACCEL, V135_5_OMEGA, 135, SPEED_5);
 8008ea4:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
 8008ea8:	2287      	movs	r2, #135	; 0x87
 8008eaa:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8008eae:	f642 60e0 	movw	r0, #12000	; 0x2ee0
 8008eb2:	f7fc fba7 	bl	8005604 <slalomR>
		turn_dir(DIR_TURN_L135_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 8008eb6:	2103      	movs	r1, #3
 8008eb8:	20fd      	movs	r0, #253	; 0xfd
 8008eba:	f007 f80d 	bl	800fed8 <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 8008ebe:	4b16      	ldr	r3, [pc, #88]	; (8008f18 <v_L135+0x3b4>)
 8008ec0:	881b      	ldrh	r3, [r3, #0]
 8008ec2:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8008ec6:	b2db      	uxtb	r3, r3
 8008ec8:	3301      	adds	r3, #1
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	f003 0301 	and.w	r3, r3, #1
 8008ed0:	bfb8      	it	lt
 8008ed2:	425b      	neglt	r3, r3
 8008ed4:	f003 0301 	and.w	r3, r3, #1
 8008ed8:	b2d9      	uxtb	r1, r3
 8008eda:	4a0f      	ldr	r2, [pc, #60]	; (8008f18 <v_L135+0x3b4>)
 8008edc:	8813      	ldrh	r3, [r2, #0]
 8008ede:	f361 03c3 	bfi	r3, r1, #3, #1
 8008ee2:	8013      	strh	r3, [r2, #0]
		if(!MF2.FLAG.V){
 8008ee4:	4b0c      	ldr	r3, [pc, #48]	; (8008f18 <v_L135+0x3b4>)
 8008ee6:	881b      	ldrh	r3, [r3, #0]
 8008ee8:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8008eec:	b2db      	uxtb	r3, r3
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d107      	bne.n	8008f02 <v_L135+0x39e>
			slalomB(10000, SPEED_5, V135_5_OFFSET_VB);
 8008ef2:	2232      	movs	r2, #50	; 0x32
 8008ef4:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 8008ef8:	f242 7010 	movw	r0, #10000	; 0x2710
 8008efc:	f7fc fca4 	bl	8005848 <slalomB>
}
 8008f00:	e006      	b.n	8008f10 <v_L135+0x3ac>
			slalomB(10000, SPEED_5, V135_5_OFFSET_B);
 8008f02:	2219      	movs	r2, #25
 8008f04:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 8008f08:	f242 7010 	movw	r0, #10000	; 0x2710
 8008f0c:	f7fc fc9c 	bl	8005848 <slalomB>
}
 8008f10:	bf00      	nop
 8008f12:	46bd      	mov	sp, r7
 8008f14:	bd80      	pop	{r7, pc}
 8008f16:	bf00      	nop
 8008f18:	20000f64 	.word	0x20000f64

08008f1c <v_R135D>:
//v_R135D
// 区画中心から右に135度回転する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void v_R135D(void){
 8008f1c:	b580      	push	{r7, lr}
 8008f1e:	b082      	sub	sp, #8
 8008f20:	af02      	add	r7, sp, #8
	full_led_write(YELLOW);
 8008f22:	2006      	movs	r0, #6
 8008f24:	f008 fe6c 	bl	8011c00 <full_led_write>
	if(run_mode == LOW){
 8008f28:	4b9e      	ldr	r3, [pc, #632]	; (80091a4 <v_R135D+0x288>)
 8008f2a:	781b      	ldrb	r3, [r3, #0]
 8008f2c:	b2db      	uxtb	r3, r3
 8008f2e:	2b01      	cmp	r3, #1
 8008f30:	d139      	bne.n	8008fa6 <v_R135D+0x8a>
		slalomF(10000, SPEED_LOW, V135_OFFSET_VF, NO_WALL, NO_WALL);
 8008f32:	f241 3388 	movw	r3, #5000	; 0x1388
 8008f36:	9300      	str	r3, [sp, #0]
 8008f38:	f241 3388 	movw	r3, #5000	; 0x1388
 8008f3c:	223a      	movs	r2, #58	; 0x3a
 8008f3e:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8008f42:	f242 7010 	movw	r0, #10000	; 0x2710
 8008f46:	f7fc faa7 	bl	8005498 <slalomF>
		slalomR(-V135_DEGACCEL, -V135_OMEGA, -135, SPEED_LOW);
 8008f4a:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8008f4e:	f06f 0286 	mvn.w	r2, #134	; 0x86
 8008f52:	4995      	ldr	r1, [pc, #596]	; (80091a8 <v_R135D+0x28c>)
 8008f54:	4895      	ldr	r0, [pc, #596]	; (80091ac <v_R135D+0x290>)
 8008f56:	f7fc fb55 	bl	8005604 <slalomR>

		turn_dir(DIR_TURN_R135_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 8008f5a:	2103      	movs	r1, #3
 8008f5c:	2003      	movs	r0, #3
 8008f5e:	f006 ffbb 	bl	800fed8 <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 8008f62:	4b93      	ldr	r3, [pc, #588]	; (80091b0 <v_R135D+0x294>)
 8008f64:	881b      	ldrh	r3, [r3, #0]
 8008f66:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8008f6a:	b2db      	uxtb	r3, r3
 8008f6c:	3301      	adds	r3, #1
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	f003 0301 	and.w	r3, r3, #1
 8008f74:	bfb8      	it	lt
 8008f76:	425b      	neglt	r3, r3
 8008f78:	f003 0301 	and.w	r3, r3, #1
 8008f7c:	b2d9      	uxtb	r1, r3
 8008f7e:	4a8c      	ldr	r2, [pc, #560]	; (80091b0 <v_R135D+0x294>)
 8008f80:	8813      	ldrh	r3, [r2, #0]
 8008f82:	f361 03c3 	bfi	r3, r1, #3, #1
 8008f86:	8013      	strh	r3, [r2, #0]

		slalomB(10000, SPEED_LOW, V135_OFFSET_VB-30);
 8008f88:	2226      	movs	r2, #38	; 0x26
 8008f8a:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8008f8e:	f242 7010 	movw	r0, #10000	; 0x2710
 8008f92:	f7fc fc59 	bl	8005848 <slalomB>
		driveD(-30000, SPEED_MIN, SPEED_LOW, 30);
 8008f96:	231e      	movs	r3, #30
 8008f98:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8008f9c:	211e      	movs	r1, #30
 8008f9e:	4885      	ldr	r0, [pc, #532]	; (80091b4 <v_R135D+0x298>)
 8008fa0:	f7fc f8a2 	bl	80050e8 <driveD>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;

		slalomB(10000, SPEED_5, V135_5_OFFSET_VB-30);
		driveD(-30000, SPEED_MIN, SPEED_5, 30);
	}
}
 8008fa4:	e0fa      	b.n	800919c <v_R135D+0x280>
	}else if(run_mode == MIDDLE){
 8008fa6:	4b7f      	ldr	r3, [pc, #508]	; (80091a4 <v_R135D+0x288>)
 8008fa8:	781b      	ldrb	r3, [r3, #0]
 8008faa:	b2db      	uxtb	r3, r3
 8008fac:	2b02      	cmp	r3, #2
 8008fae:	d139      	bne.n	8009024 <v_R135D+0x108>
		slalomF(10000, SPEED_MIDDLE, V135_2_OFFSET_VF, NO_WALL, NO_WALL);
 8008fb0:	f241 3388 	movw	r3, #5000	; 0x1388
 8008fb4:	9300      	str	r3, [sp, #0]
 8008fb6:	f241 3388 	movw	r3, #5000	; 0x1388
 8008fba:	2237      	movs	r2, #55	; 0x37
 8008fbc:	f44f 7116 	mov.w	r1, #600	; 0x258
 8008fc0:	f242 7010 	movw	r0, #10000	; 0x2710
 8008fc4:	f7fc fa68 	bl	8005498 <slalomF>
		slalomR(-V135_2_DEGACCEL, -V135_2_OMEGA, -135, SPEED_MIDDLE);
 8008fc8:	f44f 7316 	mov.w	r3, #600	; 0x258
 8008fcc:	f06f 0286 	mvn.w	r2, #134	; 0x86
 8008fd0:	4979      	ldr	r1, [pc, #484]	; (80091b8 <v_R135D+0x29c>)
 8008fd2:	487a      	ldr	r0, [pc, #488]	; (80091bc <v_R135D+0x2a0>)
 8008fd4:	f7fc fb16 	bl	8005604 <slalomR>
		turn_dir(DIR_TURN_R135_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 8008fd8:	2103      	movs	r1, #3
 8008fda:	2003      	movs	r0, #3
 8008fdc:	f006 ff7c 	bl	800fed8 <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 8008fe0:	4b73      	ldr	r3, [pc, #460]	; (80091b0 <v_R135D+0x294>)
 8008fe2:	881b      	ldrh	r3, [r3, #0]
 8008fe4:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8008fe8:	b2db      	uxtb	r3, r3
 8008fea:	3301      	adds	r3, #1
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	f003 0301 	and.w	r3, r3, #1
 8008ff2:	bfb8      	it	lt
 8008ff4:	425b      	neglt	r3, r3
 8008ff6:	f003 0301 	and.w	r3, r3, #1
 8008ffa:	b2d9      	uxtb	r1, r3
 8008ffc:	4a6c      	ldr	r2, [pc, #432]	; (80091b0 <v_R135D+0x294>)
 8008ffe:	8813      	ldrh	r3, [r2, #0]
 8009000:	f361 03c3 	bfi	r3, r1, #3, #1
 8009004:	8013      	strh	r3, [r2, #0]
		slalomB(10000, SPEED_MIDDLE, V135_2_OFFSET_VB-30);
 8009006:	2241      	movs	r2, #65	; 0x41
 8009008:	f44f 7116 	mov.w	r1, #600	; 0x258
 800900c:	f242 7010 	movw	r0, #10000	; 0x2710
 8009010:	f7fc fc1a 	bl	8005848 <slalomB>
		driveD(-30000, SPEED_MIN, SPEED_MIDDLE, 30);
 8009014:	231e      	movs	r3, #30
 8009016:	f44f 7216 	mov.w	r2, #600	; 0x258
 800901a:	211e      	movs	r1, #30
 800901c:	4865      	ldr	r0, [pc, #404]	; (80091b4 <v_R135D+0x298>)
 800901e:	f7fc f863 	bl	80050e8 <driveD>
}
 8009022:	e0bb      	b.n	800919c <v_R135D+0x280>
	}else if(run_mode == HIGH){
 8009024:	4b5f      	ldr	r3, [pc, #380]	; (80091a4 <v_R135D+0x288>)
 8009026:	781b      	ldrb	r3, [r3, #0]
 8009028:	b2db      	uxtb	r3, r3
 800902a:	2b03      	cmp	r3, #3
 800902c:	d139      	bne.n	80090a2 <v_R135D+0x186>
		slalomF(10000, SPEED_HIGH, V135_3_OFFSET_VF, NO_WALL, NO_WALL);
 800902e:	f241 3388 	movw	r3, #5000	; 0x1388
 8009032:	9300      	str	r3, [sp, #0]
 8009034:	f241 3388 	movw	r3, #5000	; 0x1388
 8009038:	224b      	movs	r2, #75	; 0x4b
 800903a:	f44f 7148 	mov.w	r1, #800	; 0x320
 800903e:	f242 7010 	movw	r0, #10000	; 0x2710
 8009042:	f7fc fa29 	bl	8005498 <slalomF>
		slalomR(-V135_3_DEGACCEL, -V135_3_OMEGA, -135, SPEED_HIGH);
 8009046:	f44f 7348 	mov.w	r3, #800	; 0x320
 800904a:	f06f 0286 	mvn.w	r2, #134	; 0x86
 800904e:	495c      	ldr	r1, [pc, #368]	; (80091c0 <v_R135D+0x2a4>)
 8009050:	485c      	ldr	r0, [pc, #368]	; (80091c4 <v_R135D+0x2a8>)
 8009052:	f7fc fad7 	bl	8005604 <slalomR>
		turn_dir(DIR_TURN_R135_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 8009056:	2103      	movs	r1, #3
 8009058:	2003      	movs	r0, #3
 800905a:	f006 ff3d 	bl	800fed8 <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 800905e:	4b54      	ldr	r3, [pc, #336]	; (80091b0 <v_R135D+0x294>)
 8009060:	881b      	ldrh	r3, [r3, #0]
 8009062:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8009066:	b2db      	uxtb	r3, r3
 8009068:	3301      	adds	r3, #1
 800906a:	2b00      	cmp	r3, #0
 800906c:	f003 0301 	and.w	r3, r3, #1
 8009070:	bfb8      	it	lt
 8009072:	425b      	neglt	r3, r3
 8009074:	f003 0301 	and.w	r3, r3, #1
 8009078:	b2d9      	uxtb	r1, r3
 800907a:	4a4d      	ldr	r2, [pc, #308]	; (80091b0 <v_R135D+0x294>)
 800907c:	8813      	ldrh	r3, [r2, #0]
 800907e:	f361 03c3 	bfi	r3, r1, #3, #1
 8009082:	8013      	strh	r3, [r2, #0]
		slalomB(10000, SPEED_HIGH, V135_3_OFFSET_VB-30);
 8009084:	2264      	movs	r2, #100	; 0x64
 8009086:	f44f 7148 	mov.w	r1, #800	; 0x320
 800908a:	f242 7010 	movw	r0, #10000	; 0x2710
 800908e:	f7fc fbdb 	bl	8005848 <slalomB>
		driveD(-30000, SPEED_MIN, SPEED_HIGH, 30);
 8009092:	231e      	movs	r3, #30
 8009094:	f44f 7248 	mov.w	r2, #800	; 0x320
 8009098:	211e      	movs	r1, #30
 800909a:	4846      	ldr	r0, [pc, #280]	; (80091b4 <v_R135D+0x298>)
 800909c:	f7fc f824 	bl	80050e8 <driveD>
}
 80090a0:	e07c      	b.n	800919c <v_R135D+0x280>
	}else if(run_mode == HIGH_HIGH){
 80090a2:	4b40      	ldr	r3, [pc, #256]	; (80091a4 <v_R135D+0x288>)
 80090a4:	781b      	ldrb	r3, [r3, #0]
 80090a6:	b2db      	uxtb	r3, r3
 80090a8:	2b04      	cmp	r3, #4
 80090aa:	d139      	bne.n	8009120 <v_R135D+0x204>
		slalomF(10000, SPEED_HIGH_HIGH, V135_4_OFFSET_VF, NO_WALL, NO_WALL);
 80090ac:	f241 3388 	movw	r3, #5000	; 0x1388
 80090b0:	9300      	str	r3, [sp, #0]
 80090b2:	f241 3388 	movw	r3, #5000	; 0x1388
 80090b6:	2243      	movs	r2, #67	; 0x43
 80090b8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80090bc:	f242 7010 	movw	r0, #10000	; 0x2710
 80090c0:	f7fc f9ea 	bl	8005498 <slalomF>
		slalomR(-V135_4_DEGACCEL, -V135_4_OMEGA, -135, SPEED_HIGH);
 80090c4:	f44f 7348 	mov.w	r3, #800	; 0x320
 80090c8:	f06f 0286 	mvn.w	r2, #134	; 0x86
 80090cc:	493e      	ldr	r1, [pc, #248]	; (80091c8 <v_R135D+0x2ac>)
 80090ce:	483f      	ldr	r0, [pc, #252]	; (80091cc <v_R135D+0x2b0>)
 80090d0:	f7fc fa98 	bl	8005604 <slalomR>
		turn_dir(DIR_TURN_R135_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 80090d4:	2103      	movs	r1, #3
 80090d6:	2003      	movs	r0, #3
 80090d8:	f006 fefe 	bl	800fed8 <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 80090dc:	4b34      	ldr	r3, [pc, #208]	; (80091b0 <v_R135D+0x294>)
 80090de:	881b      	ldrh	r3, [r3, #0]
 80090e0:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80090e4:	b2db      	uxtb	r3, r3
 80090e6:	3301      	adds	r3, #1
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	f003 0301 	and.w	r3, r3, #1
 80090ee:	bfb8      	it	lt
 80090f0:	425b      	neglt	r3, r3
 80090f2:	f003 0301 	and.w	r3, r3, #1
 80090f6:	b2d9      	uxtb	r1, r3
 80090f8:	4a2d      	ldr	r2, [pc, #180]	; (80091b0 <v_R135D+0x294>)
 80090fa:	8813      	ldrh	r3, [r2, #0]
 80090fc:	f361 03c3 	bfi	r3, r1, #3, #1
 8009100:	8013      	strh	r3, [r2, #0]
		slalomB(10000, SPEED_HIGH_HIGH, V135_4_OFFSET_VB-30);
 8009102:	2214      	movs	r2, #20
 8009104:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8009108:	f242 7010 	movw	r0, #10000	; 0x2710
 800910c:	f7fc fb9c 	bl	8005848 <slalomB>
		driveD(-30000, SPEED_MIN, SPEED_HIGH_HIGH, 30);
 8009110:	231e      	movs	r3, #30
 8009112:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009116:	211e      	movs	r1, #30
 8009118:	4826      	ldr	r0, [pc, #152]	; (80091b4 <v_R135D+0x298>)
 800911a:	f7fb ffe5 	bl	80050e8 <driveD>
}
 800911e:	e03d      	b.n	800919c <v_R135D+0x280>
	}else if(run_mode == 5){
 8009120:	4b20      	ldr	r3, [pc, #128]	; (80091a4 <v_R135D+0x288>)
 8009122:	781b      	ldrb	r3, [r3, #0]
 8009124:	b2db      	uxtb	r3, r3
 8009126:	2b05      	cmp	r3, #5
 8009128:	d138      	bne.n	800919c <v_R135D+0x280>
		slalomF(10000, SPEED_5, V135_5_OFFSET_VF, NO_WALL, NO_WALL);
 800912a:	f241 3388 	movw	r3, #5000	; 0x1388
 800912e:	9300      	str	r3, [sp, #0]
 8009130:	f241 3388 	movw	r3, #5000	; 0x1388
 8009134:	2243      	movs	r2, #67	; 0x43
 8009136:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 800913a:	f242 7010 	movw	r0, #10000	; 0x2710
 800913e:	f7fc f9ab 	bl	8005498 <slalomF>
		slalomR(-V135_5_DEGACCEL, -V135_5_OMEGA, -135, SPEED_5);
 8009142:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
 8009146:	f06f 0286 	mvn.w	r2, #134	; 0x86
 800914a:	491f      	ldr	r1, [pc, #124]	; (80091c8 <v_R135D+0x2ac>)
 800914c:	4820      	ldr	r0, [pc, #128]	; (80091d0 <v_R135D+0x2b4>)
 800914e:	f7fc fa59 	bl	8005604 <slalomR>
		turn_dir(DIR_TURN_R135_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 8009152:	2103      	movs	r1, #3
 8009154:	2003      	movs	r0, #3
 8009156:	f006 febf 	bl	800fed8 <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 800915a:	4b15      	ldr	r3, [pc, #84]	; (80091b0 <v_R135D+0x294>)
 800915c:	881b      	ldrh	r3, [r3, #0]
 800915e:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8009162:	b2db      	uxtb	r3, r3
 8009164:	3301      	adds	r3, #1
 8009166:	2b00      	cmp	r3, #0
 8009168:	f003 0301 	and.w	r3, r3, #1
 800916c:	bfb8      	it	lt
 800916e:	425b      	neglt	r3, r3
 8009170:	f003 0301 	and.w	r3, r3, #1
 8009174:	b2d9      	uxtb	r1, r3
 8009176:	4a0e      	ldr	r2, [pc, #56]	; (80091b0 <v_R135D+0x294>)
 8009178:	8813      	ldrh	r3, [r2, #0]
 800917a:	f361 03c3 	bfi	r3, r1, #3, #1
 800917e:	8013      	strh	r3, [r2, #0]
		slalomB(10000, SPEED_5, V135_5_OFFSET_VB-30);
 8009180:	2214      	movs	r2, #20
 8009182:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 8009186:	f242 7010 	movw	r0, #10000	; 0x2710
 800918a:	f7fc fb5d 	bl	8005848 <slalomB>
		driveD(-30000, SPEED_MIN, SPEED_5, 30);
 800918e:	231e      	movs	r3, #30
 8009190:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8009194:	211e      	movs	r1, #30
 8009196:	4807      	ldr	r0, [pc, #28]	; (80091b4 <v_R135D+0x298>)
 8009198:	f7fb ffa6 	bl	80050e8 <driveD>
}
 800919c:	bf00      	nop
 800919e:	46bd      	mov	sp, r7
 80091a0:	bd80      	pop	{r7, pc}
 80091a2:	bf00      	nop
 80091a4:	20000456 	.word	0x20000456
 80091a8:	fffffed4 	.word	0xfffffed4
 80091ac:	fffff448 	.word	0xfffff448
 80091b0:	20000f64 	.word	0x20000f64
 80091b4:	ffff8ad0 	.word	0xffff8ad0
 80091b8:	fffffe0c 	.word	0xfffffe0c
 80091bc:	ffffec78 	.word	0xffffec78
 80091c0:	fffffce0 	.word	0xfffffce0
 80091c4:	ffffe0c0 	.word	0xffffe0c0
 80091c8:	fffffc18 	.word	0xfffffc18
 80091cc:	ffffd8f0 	.word	0xffffd8f0
 80091d0:	ffffd120 	.word	0xffffd120

080091d4 <v_L135D>:
//v_L135D
// 区画中心から左に135度回転する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void v_L135D(void){
 80091d4:	b580      	push	{r7, lr}
 80091d6:	b082      	sub	sp, #8
 80091d8:	af02      	add	r7, sp, #8
	full_led_write(PURPLE);
 80091da:	2005      	movs	r0, #5
 80091dc:	f008 fd10 	bl	8011c00 <full_led_write>
	if(run_mode == LOW){
 80091e0:	4ba0      	ldr	r3, [pc, #640]	; (8009464 <v_L135D+0x290>)
 80091e2:	781b      	ldrb	r3, [r3, #0]
 80091e4:	b2db      	uxtb	r3, r3
 80091e6:	2b01      	cmp	r3, #1
 80091e8:	d13a      	bne.n	8009260 <v_L135D+0x8c>
		slalomF(10000, SPEED_LOW, V135_OFFSET_VF, NO_WALL, NO_WALL);
 80091ea:	f241 3388 	movw	r3, #5000	; 0x1388
 80091ee:	9300      	str	r3, [sp, #0]
 80091f0:	f241 3388 	movw	r3, #5000	; 0x1388
 80091f4:	223a      	movs	r2, #58	; 0x3a
 80091f6:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80091fa:	f242 7010 	movw	r0, #10000	; 0x2710
 80091fe:	f7fc f94b 	bl	8005498 <slalomF>
		slalomR(V135_DEGACCEL, V135_OMEGA, 135, SPEED_LOW);
 8009202:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8009206:	2287      	movs	r2, #135	; 0x87
 8009208:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800920c:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8009210:	f7fc f9f8 	bl	8005604 <slalomR>

		turn_dir(DIR_TURN_L135_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 8009214:	2103      	movs	r1, #3
 8009216:	20fd      	movs	r0, #253	; 0xfd
 8009218:	f006 fe5e 	bl	800fed8 <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 800921c:	4b92      	ldr	r3, [pc, #584]	; (8009468 <v_L135D+0x294>)
 800921e:	881b      	ldrh	r3, [r3, #0]
 8009220:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8009224:	b2db      	uxtb	r3, r3
 8009226:	3301      	adds	r3, #1
 8009228:	2b00      	cmp	r3, #0
 800922a:	f003 0301 	and.w	r3, r3, #1
 800922e:	bfb8      	it	lt
 8009230:	425b      	neglt	r3, r3
 8009232:	f003 0301 	and.w	r3, r3, #1
 8009236:	b2d9      	uxtb	r1, r3
 8009238:	4a8b      	ldr	r2, [pc, #556]	; (8009468 <v_L135D+0x294>)
 800923a:	8813      	ldrh	r3, [r2, #0]
 800923c:	f361 03c3 	bfi	r3, r1, #3, #1
 8009240:	8013      	strh	r3, [r2, #0]

		slalomB(10000, SPEED_LOW, V135_OFFSET_VB-30);
 8009242:	2226      	movs	r2, #38	; 0x26
 8009244:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8009248:	f242 7010 	movw	r0, #10000	; 0x2710
 800924c:	f7fc fafc 	bl	8005848 <slalomB>
		driveD(-30000, SPEED_MIN, SPEED_LOW, 30);
 8009250:	231e      	movs	r3, #30
 8009252:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8009256:	211e      	movs	r1, #30
 8009258:	4884      	ldr	r0, [pc, #528]	; (800946c <v_L135D+0x298>)
 800925a:	f7fb ff45 	bl	80050e8 <driveD>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;

		slalomB(10000, SPEED_5, V135_5_OFFSET_VB-30);
		driveD(-30000, SPEED_MIN, SPEED_5, 30);
	}
}
 800925e:	e0fe      	b.n	800945e <v_L135D+0x28a>
	}else if(run_mode == MIDDLE){
 8009260:	4b80      	ldr	r3, [pc, #512]	; (8009464 <v_L135D+0x290>)
 8009262:	781b      	ldrb	r3, [r3, #0]
 8009264:	b2db      	uxtb	r3, r3
 8009266:	2b02      	cmp	r3, #2
 8009268:	d13a      	bne.n	80092e0 <v_L135D+0x10c>
		slalomF(10000, SPEED_MIDDLE, V135_2_OFFSET_VF, NO_WALL, NO_WALL);
 800926a:	f241 3388 	movw	r3, #5000	; 0x1388
 800926e:	9300      	str	r3, [sp, #0]
 8009270:	f241 3388 	movw	r3, #5000	; 0x1388
 8009274:	2237      	movs	r2, #55	; 0x37
 8009276:	f44f 7116 	mov.w	r1, #600	; 0x258
 800927a:	f242 7010 	movw	r0, #10000	; 0x2710
 800927e:	f7fc f90b 	bl	8005498 <slalomF>
		slalomR(V135_2_DEGACCEL, V135_2_OMEGA, 135, SPEED_MIDDLE);
 8009282:	f44f 7316 	mov.w	r3, #600	; 0x258
 8009286:	2287      	movs	r2, #135	; 0x87
 8009288:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800928c:	f241 3088 	movw	r0, #5000	; 0x1388
 8009290:	f7fc f9b8 	bl	8005604 <slalomR>
		turn_dir(DIR_TURN_L135_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 8009294:	2103      	movs	r1, #3
 8009296:	20fd      	movs	r0, #253	; 0xfd
 8009298:	f006 fe1e 	bl	800fed8 <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 800929c:	4b72      	ldr	r3, [pc, #456]	; (8009468 <v_L135D+0x294>)
 800929e:	881b      	ldrh	r3, [r3, #0]
 80092a0:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80092a4:	b2db      	uxtb	r3, r3
 80092a6:	3301      	adds	r3, #1
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	f003 0301 	and.w	r3, r3, #1
 80092ae:	bfb8      	it	lt
 80092b0:	425b      	neglt	r3, r3
 80092b2:	f003 0301 	and.w	r3, r3, #1
 80092b6:	b2d9      	uxtb	r1, r3
 80092b8:	4a6b      	ldr	r2, [pc, #428]	; (8009468 <v_L135D+0x294>)
 80092ba:	8813      	ldrh	r3, [r2, #0]
 80092bc:	f361 03c3 	bfi	r3, r1, #3, #1
 80092c0:	8013      	strh	r3, [r2, #0]
		slalomB(10000, SPEED_MIDDLE, V135_2_OFFSET_VB-30);
 80092c2:	2241      	movs	r2, #65	; 0x41
 80092c4:	f44f 7116 	mov.w	r1, #600	; 0x258
 80092c8:	f242 7010 	movw	r0, #10000	; 0x2710
 80092cc:	f7fc fabc 	bl	8005848 <slalomB>
		driveD(-30000, SPEED_MIN, SPEED_MIDDLE, 30);
 80092d0:	231e      	movs	r3, #30
 80092d2:	f44f 7216 	mov.w	r2, #600	; 0x258
 80092d6:	211e      	movs	r1, #30
 80092d8:	4864      	ldr	r0, [pc, #400]	; (800946c <v_L135D+0x298>)
 80092da:	f7fb ff05 	bl	80050e8 <driveD>
}
 80092de:	e0be      	b.n	800945e <v_L135D+0x28a>
	}else if(run_mode == HIGH){
 80092e0:	4b60      	ldr	r3, [pc, #384]	; (8009464 <v_L135D+0x290>)
 80092e2:	781b      	ldrb	r3, [r3, #0]
 80092e4:	b2db      	uxtb	r3, r3
 80092e6:	2b03      	cmp	r3, #3
 80092e8:	d13a      	bne.n	8009360 <v_L135D+0x18c>
		slalomF(10000, SPEED_HIGH, V135_3_OFFSET_VF, NO_WALL, NO_WALL);
 80092ea:	f241 3388 	movw	r3, #5000	; 0x1388
 80092ee:	9300      	str	r3, [sp, #0]
 80092f0:	f241 3388 	movw	r3, #5000	; 0x1388
 80092f4:	224b      	movs	r2, #75	; 0x4b
 80092f6:	f44f 7148 	mov.w	r1, #800	; 0x320
 80092fa:	f242 7010 	movw	r0, #10000	; 0x2710
 80092fe:	f7fc f8cb 	bl	8005498 <slalomF>
		slalomR(V135_3_DEGACCEL, V135_3_OMEGA, 135, SPEED_HIGH);
 8009302:	f44f 7348 	mov.w	r3, #800	; 0x320
 8009306:	2287      	movs	r2, #135	; 0x87
 8009308:	f44f 7148 	mov.w	r1, #800	; 0x320
 800930c:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 8009310:	f7fc f978 	bl	8005604 <slalomR>
		turn_dir(DIR_TURN_L135_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 8009314:	2103      	movs	r1, #3
 8009316:	20fd      	movs	r0, #253	; 0xfd
 8009318:	f006 fdde 	bl	800fed8 <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 800931c:	4b52      	ldr	r3, [pc, #328]	; (8009468 <v_L135D+0x294>)
 800931e:	881b      	ldrh	r3, [r3, #0]
 8009320:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8009324:	b2db      	uxtb	r3, r3
 8009326:	3301      	adds	r3, #1
 8009328:	2b00      	cmp	r3, #0
 800932a:	f003 0301 	and.w	r3, r3, #1
 800932e:	bfb8      	it	lt
 8009330:	425b      	neglt	r3, r3
 8009332:	f003 0301 	and.w	r3, r3, #1
 8009336:	b2d9      	uxtb	r1, r3
 8009338:	4a4b      	ldr	r2, [pc, #300]	; (8009468 <v_L135D+0x294>)
 800933a:	8813      	ldrh	r3, [r2, #0]
 800933c:	f361 03c3 	bfi	r3, r1, #3, #1
 8009340:	8013      	strh	r3, [r2, #0]
		slalomB(10000, SPEED_HIGH, V135_3_OFFSET_VB-30);
 8009342:	2264      	movs	r2, #100	; 0x64
 8009344:	f44f 7148 	mov.w	r1, #800	; 0x320
 8009348:	f242 7010 	movw	r0, #10000	; 0x2710
 800934c:	f7fc fa7c 	bl	8005848 <slalomB>
		driveD(-30000, SPEED_MIN, SPEED_HIGH, 30);
 8009350:	231e      	movs	r3, #30
 8009352:	f44f 7248 	mov.w	r2, #800	; 0x320
 8009356:	211e      	movs	r1, #30
 8009358:	4844      	ldr	r0, [pc, #272]	; (800946c <v_L135D+0x298>)
 800935a:	f7fb fec5 	bl	80050e8 <driveD>
}
 800935e:	e07e      	b.n	800945e <v_L135D+0x28a>
	}else if(run_mode == HIGH_HIGH){
 8009360:	4b40      	ldr	r3, [pc, #256]	; (8009464 <v_L135D+0x290>)
 8009362:	781b      	ldrb	r3, [r3, #0]
 8009364:	b2db      	uxtb	r3, r3
 8009366:	2b04      	cmp	r3, #4
 8009368:	d13a      	bne.n	80093e0 <v_L135D+0x20c>
		slalomF(10000, SPEED_HIGH_HIGH, V135_4_OFFSET_VF, NO_WALL, NO_WALL);
 800936a:	f241 3388 	movw	r3, #5000	; 0x1388
 800936e:	9300      	str	r3, [sp, #0]
 8009370:	f241 3388 	movw	r3, #5000	; 0x1388
 8009374:	2243      	movs	r2, #67	; 0x43
 8009376:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800937a:	f242 7010 	movw	r0, #10000	; 0x2710
 800937e:	f7fc f88b 	bl	8005498 <slalomF>
		slalomR(V135_4_DEGACCEL, V135_4_OMEGA, 135, SPEED_HIGH_HIGH);
 8009382:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8009386:	2287      	movs	r2, #135	; 0x87
 8009388:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800938c:	f242 7010 	movw	r0, #10000	; 0x2710
 8009390:	f7fc f938 	bl	8005604 <slalomR>
		turn_dir(DIR_TURN_L135_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 8009394:	2103      	movs	r1, #3
 8009396:	20fd      	movs	r0, #253	; 0xfd
 8009398:	f006 fd9e 	bl	800fed8 <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 800939c:	4b32      	ldr	r3, [pc, #200]	; (8009468 <v_L135D+0x294>)
 800939e:	881b      	ldrh	r3, [r3, #0]
 80093a0:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80093a4:	b2db      	uxtb	r3, r3
 80093a6:	3301      	adds	r3, #1
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	f003 0301 	and.w	r3, r3, #1
 80093ae:	bfb8      	it	lt
 80093b0:	425b      	neglt	r3, r3
 80093b2:	f003 0301 	and.w	r3, r3, #1
 80093b6:	b2d9      	uxtb	r1, r3
 80093b8:	4a2b      	ldr	r2, [pc, #172]	; (8009468 <v_L135D+0x294>)
 80093ba:	8813      	ldrh	r3, [r2, #0]
 80093bc:	f361 03c3 	bfi	r3, r1, #3, #1
 80093c0:	8013      	strh	r3, [r2, #0]
		slalomB(10000, SPEED_HIGH_HIGH, V135_4_OFFSET_VB-30);
 80093c2:	2214      	movs	r2, #20
 80093c4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80093c8:	f242 7010 	movw	r0, #10000	; 0x2710
 80093cc:	f7fc fa3c 	bl	8005848 <slalomB>
		driveD(-30000, SPEED_MIN, SPEED_HIGH, 30);
 80093d0:	231e      	movs	r3, #30
 80093d2:	f44f 7248 	mov.w	r2, #800	; 0x320
 80093d6:	211e      	movs	r1, #30
 80093d8:	4824      	ldr	r0, [pc, #144]	; (800946c <v_L135D+0x298>)
 80093da:	f7fb fe85 	bl	80050e8 <driveD>
}
 80093de:	e03e      	b.n	800945e <v_L135D+0x28a>
	}else if(run_mode == 5){
 80093e0:	4b20      	ldr	r3, [pc, #128]	; (8009464 <v_L135D+0x290>)
 80093e2:	781b      	ldrb	r3, [r3, #0]
 80093e4:	b2db      	uxtb	r3, r3
 80093e6:	2b05      	cmp	r3, #5
 80093e8:	d139      	bne.n	800945e <v_L135D+0x28a>
		slalomF(10000, SPEED_5, V135_5_OFFSET_VF, NO_WALL, NO_WALL);
 80093ea:	f241 3388 	movw	r3, #5000	; 0x1388
 80093ee:	9300      	str	r3, [sp, #0]
 80093f0:	f241 3388 	movw	r3, #5000	; 0x1388
 80093f4:	2243      	movs	r2, #67	; 0x43
 80093f6:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 80093fa:	f242 7010 	movw	r0, #10000	; 0x2710
 80093fe:	f7fc f84b 	bl	8005498 <slalomF>
		slalomR(V135_5_DEGACCEL, V135_5_OMEGA, 135, SPEED_5);
 8009402:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
 8009406:	2287      	movs	r2, #135	; 0x87
 8009408:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800940c:	f642 60e0 	movw	r0, #12000	; 0x2ee0
 8009410:	f7fc f8f8 	bl	8005604 <slalomR>
		turn_dir(DIR_TURN_L135_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 8009414:	2103      	movs	r1, #3
 8009416:	20fd      	movs	r0, #253	; 0xfd
 8009418:	f006 fd5e 	bl	800fed8 <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 800941c:	4b12      	ldr	r3, [pc, #72]	; (8009468 <v_L135D+0x294>)
 800941e:	881b      	ldrh	r3, [r3, #0]
 8009420:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8009424:	b2db      	uxtb	r3, r3
 8009426:	3301      	adds	r3, #1
 8009428:	2b00      	cmp	r3, #0
 800942a:	f003 0301 	and.w	r3, r3, #1
 800942e:	bfb8      	it	lt
 8009430:	425b      	neglt	r3, r3
 8009432:	f003 0301 	and.w	r3, r3, #1
 8009436:	b2d9      	uxtb	r1, r3
 8009438:	4a0b      	ldr	r2, [pc, #44]	; (8009468 <v_L135D+0x294>)
 800943a:	8813      	ldrh	r3, [r2, #0]
 800943c:	f361 03c3 	bfi	r3, r1, #3, #1
 8009440:	8013      	strh	r3, [r2, #0]
		slalomB(10000, SPEED_5, V135_5_OFFSET_VB-30);
 8009442:	2214      	movs	r2, #20
 8009444:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 8009448:	f242 7010 	movw	r0, #10000	; 0x2710
 800944c:	f7fc f9fc 	bl	8005848 <slalomB>
		driveD(-30000, SPEED_MIN, SPEED_5, 30);
 8009450:	231e      	movs	r3, #30
 8009452:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8009456:	211e      	movs	r1, #30
 8009458:	4804      	ldr	r0, [pc, #16]	; (800946c <v_L135D+0x298>)
 800945a:	f7fb fe45 	bl	80050e8 <driveD>
}
 800945e:	bf00      	nop
 8009460:	46bd      	mov	sp, r7
 8009462:	bd80      	pop	{r7, pc}
 8009464:	20000456 	.word	0x20000456
 8009468:	20000f64 	.word	0x20000f64
 800946c:	ffff8ad0 	.word	0xffff8ad0

08009470 <test_select>:
//test_select
// 走行系テスト選択
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void test_select(void){
 8009470:	b580      	push	{r7, lr}
 8009472:	b082      	sub	sp, #8
 8009474:	af00      	add	r7, sp, #0
	int mode = 0;
 8009476:	2300      	movs	r3, #0
 8009478:	607b      	str	r3, [r7, #4]
	printf("Test Select, Mode : %d\n", mode);
 800947a:	6879      	ldr	r1, [r7, #4]
 800947c:	483f      	ldr	r0, [pc, #252]	; (800957c <test_select+0x10c>)
 800947e:	f009 f953 	bl	8012728 <iprintf>

	while(1){
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	b2db      	uxtb	r3, r3
 8009486:	f003 0301 	and.w	r3, r3, #1
 800948a:	b2d8      	uxtb	r0, r3
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	b2db      	uxtb	r3, r3
 8009490:	f003 0302 	and.w	r3, r3, #2
 8009494:	b2d9      	uxtb	r1, r3
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	b2db      	uxtb	r3, r3
 800949a:	f003 0304 	and.w	r3, r3, #4
 800949e:	b2db      	uxtb	r3, r3
 80094a0:	461a      	mov	r2, r3
 80094a2:	f008 fb73 	bl	8011b8c <led_write>
		  if(dist_r >= 20){
 80094a6:	4b36      	ldr	r3, [pc, #216]	; (8009580 <test_select+0x110>)
 80094a8:	edd3 7a00 	vldr	s15, [r3]
 80094ac:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 80094b0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80094b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80094b8:	db0f      	blt.n	80094da <test_select+0x6a>
			  mode++;
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	3301      	adds	r3, #1
 80094be:	607b      	str	r3, [r7, #4]
			  dist_r = 0;
 80094c0:	4b2f      	ldr	r3, [pc, #188]	; (8009580 <test_select+0x110>)
 80094c2:	f04f 0200 	mov.w	r2, #0
 80094c6:	601a      	str	r2, [r3, #0]
			  if(mode > 7){
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	2b07      	cmp	r3, #7
 80094cc:	dd01      	ble.n	80094d2 <test_select+0x62>
				  mode = 0;
 80094ce:	2300      	movs	r3, #0
 80094d0:	607b      	str	r3, [r7, #4]
			  }
			  printf("Mode : %d\n", mode);
 80094d2:	6879      	ldr	r1, [r7, #4]
 80094d4:	482b      	ldr	r0, [pc, #172]	; (8009584 <test_select+0x114>)
 80094d6:	f009 f927 	bl	8012728 <iprintf>
		  }
		  if(dist_r <= -20){
 80094da:	4b29      	ldr	r3, [pc, #164]	; (8009580 <test_select+0x110>)
 80094dc:	edd3 7a00 	vldr	s15, [r3]
 80094e0:	eebb 7a04 	vmov.f32	s14, #180	; 0xc1a00000 -20.0
 80094e4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80094e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80094ec:	d80f      	bhi.n	800950e <test_select+0x9e>
			  mode--;
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	3b01      	subs	r3, #1
 80094f2:	607b      	str	r3, [r7, #4]
			  dist_r = 0;
 80094f4:	4b22      	ldr	r3, [pc, #136]	; (8009580 <test_select+0x110>)
 80094f6:	f04f 0200 	mov.w	r2, #0
 80094fa:	601a      	str	r2, [r3, #0]
			  if(mode < 0){
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	2b00      	cmp	r3, #0
 8009500:	da01      	bge.n	8009506 <test_select+0x96>
				  mode = 7;
 8009502:	2307      	movs	r3, #7
 8009504:	607b      	str	r3, [r7, #4]
			  }
			  printf("Mode : %d\n", mode);
 8009506:	6879      	ldr	r1, [r7, #4]
 8009508:	481e      	ldr	r0, [pc, #120]	; (8009584 <test_select+0x114>)
 800950a:	f009 f90d 	bl	8012728 <iprintf>
		  }
		  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET){
 800950e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8009512:	481d      	ldr	r0, [pc, #116]	; (8009588 <test_select+0x118>)
 8009514:	f7f8 fede 	bl	80022d4 <HAL_GPIO_ReadPin>
 8009518:	4603      	mov	r3, r0
 800951a:	2b00      	cmp	r3, #0
 800951c:	d1b1      	bne.n	8009482 <test_select+0x12>
			  HAL_Delay(50);
 800951e:	2032      	movs	r0, #50	; 0x32
 8009520:	f7f7 fd7c 	bl	800101c <HAL_Delay>
			  while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET);
 8009524:	bf00      	nop
 8009526:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800952a:	4817      	ldr	r0, [pc, #92]	; (8009588 <test_select+0x118>)
 800952c:	f7f8 fed2 	bl	80022d4 <HAL_GPIO_ReadPin>
 8009530:	4603      	mov	r3, r0
 8009532:	2b00      	cmp	r3, #0
 8009534:	d0f7      	beq.n	8009526 <test_select+0xb6>
			  switch(mode){
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	3b01      	subs	r3, #1
 800953a:	2b05      	cmp	r3, #5
 800953c:	d8a1      	bhi.n	8009482 <test_select+0x12>
 800953e:	a201      	add	r2, pc, #4	; (adr r2, 8009544 <test_select+0xd4>)
 8009540:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009544:	0800955d 	.word	0x0800955d
 8009548:	08009563 	.word	0x08009563
 800954c:	08009569 	.word	0x08009569
 8009550:	0800956f 	.word	0x0800956f
 8009554:	08009573 	.word	0x08009573
 8009558:	08009577 	.word	0x08009577
				case 1:
					init_test();
 800955c:	f000 f816 	bl	800958c <init_test>
					break;
 8009560:	e00b      	b.n	800957a <test_select+0x10a>

				case 2:
					slalom_test();
 8009562:	f000 f91d 	bl	80097a0 <slalom_test>
					break;
 8009566:	e008      	b.n	800957a <test_select+0x10a>

				case 3:
					v_test();
 8009568:	f000 fae2 	bl	8009b30 <v_test>
					break;
 800956c:	e005      	b.n	800957a <test_select+0x10a>

				case 4:
					pass_test();
 800956e:	f000 fd13 	bl	8009f98 <pass_test>

				case 5:
					goal_test();
 8009572:	f000 ffa7 	bl	800a4c4 <goal_test>

				case 6:
					sample_course_run();
 8009576:	f001 fa87 	bl	800aa88 <sample_course_run>
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 800957a:	e782      	b.n	8009482 <test_select+0x12>
 800957c:	08013970 	.word	0x08013970
 8009580:	20000aec 	.word	0x20000aec
 8009584:	08013964 	.word	0x08013964
 8009588:	40020000 	.word	0x40020000

0800958c <init_test>:
//init_test
// 初期基幹関数走行テスト
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void init_test(void){
 800958c:	b580      	push	{r7, lr}
 800958e:	b086      	sub	sp, #24
 8009590:	af00      	add	r7, sp, #0

	int mode = 0;
 8009592:	2300      	movs	r3, #0
 8009594:	617b      	str	r3, [r7, #20]
	printf("Test Init Run, Mode : %d\n", mode);
 8009596:	6979      	ldr	r1, [r7, #20]
 8009598:	4872      	ldr	r0, [pc, #456]	; (8009764 <init_test+0x1d8>)
 800959a:	f009 f8c5 	bl	8012728 <iprintf>

	while(1){
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 800959e:	697b      	ldr	r3, [r7, #20]
 80095a0:	b2db      	uxtb	r3, r3
 80095a2:	f003 0301 	and.w	r3, r3, #1
 80095a6:	b2d8      	uxtb	r0, r3
 80095a8:	697b      	ldr	r3, [r7, #20]
 80095aa:	b2db      	uxtb	r3, r3
 80095ac:	f003 0302 	and.w	r3, r3, #2
 80095b0:	b2d9      	uxtb	r1, r3
 80095b2:	697b      	ldr	r3, [r7, #20]
 80095b4:	b2db      	uxtb	r3, r3
 80095b6:	f003 0304 	and.w	r3, r3, #4
 80095ba:	b2db      	uxtb	r3, r3
 80095bc:	461a      	mov	r2, r3
 80095be:	f008 fae5 	bl	8011b8c <led_write>
		  if(dist_r >= 20){
 80095c2:	4b69      	ldr	r3, [pc, #420]	; (8009768 <init_test+0x1dc>)
 80095c4:	edd3 7a00 	vldr	s15, [r3]
 80095c8:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 80095cc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80095d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80095d4:	db0f      	blt.n	80095f6 <init_test+0x6a>
			  mode++;
 80095d6:	697b      	ldr	r3, [r7, #20]
 80095d8:	3301      	adds	r3, #1
 80095da:	617b      	str	r3, [r7, #20]
			  dist_r = 0;
 80095dc:	4b62      	ldr	r3, [pc, #392]	; (8009768 <init_test+0x1dc>)
 80095de:	f04f 0200 	mov.w	r2, #0
 80095e2:	601a      	str	r2, [r3, #0]
			  if(mode > 7){
 80095e4:	697b      	ldr	r3, [r7, #20]
 80095e6:	2b07      	cmp	r3, #7
 80095e8:	dd01      	ble.n	80095ee <init_test+0x62>
				  mode = 0;
 80095ea:	2300      	movs	r3, #0
 80095ec:	617b      	str	r3, [r7, #20]
			  }
			  printf("Mode : %d\n", mode);
 80095ee:	6979      	ldr	r1, [r7, #20]
 80095f0:	485e      	ldr	r0, [pc, #376]	; (800976c <init_test+0x1e0>)
 80095f2:	f009 f899 	bl	8012728 <iprintf>
		  }
		  if(dist_r <= -20){
 80095f6:	4b5c      	ldr	r3, [pc, #368]	; (8009768 <init_test+0x1dc>)
 80095f8:	edd3 7a00 	vldr	s15, [r3]
 80095fc:	eebb 7a04 	vmov.f32	s14, #180	; 0xc1a00000 -20.0
 8009600:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009604:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009608:	d80f      	bhi.n	800962a <init_test+0x9e>
			  mode--;
 800960a:	697b      	ldr	r3, [r7, #20]
 800960c:	3b01      	subs	r3, #1
 800960e:	617b      	str	r3, [r7, #20]
			  dist_r = 0;
 8009610:	4b55      	ldr	r3, [pc, #340]	; (8009768 <init_test+0x1dc>)
 8009612:	f04f 0200 	mov.w	r2, #0
 8009616:	601a      	str	r2, [r3, #0]
			  if(mode < 0){
 8009618:	697b      	ldr	r3, [r7, #20]
 800961a:	2b00      	cmp	r3, #0
 800961c:	da01      	bge.n	8009622 <init_test+0x96>
				  mode = 7;
 800961e:	2307      	movs	r3, #7
 8009620:	617b      	str	r3, [r7, #20]
			  }
			  printf("Mode : %d\n", mode);
 8009622:	6979      	ldr	r1, [r7, #20]
 8009624:	4851      	ldr	r0, [pc, #324]	; (800976c <init_test+0x1e0>)
 8009626:	f009 f87f 	bl	8012728 <iprintf>
		  }
		  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET){
 800962a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800962e:	4850      	ldr	r0, [pc, #320]	; (8009770 <init_test+0x1e4>)
 8009630:	f7f8 fe50 	bl	80022d4 <HAL_GPIO_ReadPin>
 8009634:	4603      	mov	r3, r0
 8009636:	2b00      	cmp	r3, #0
 8009638:	d1b1      	bne.n	800959e <init_test+0x12>
			  HAL_Delay(50);
 800963a:	2032      	movs	r0, #50	; 0x32
 800963c:	f7f7 fcee 	bl	800101c <HAL_Delay>
			  while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET);
 8009640:	bf00      	nop
 8009642:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8009646:	484a      	ldr	r0, [pc, #296]	; (8009770 <init_test+0x1e4>)
 8009648:	f7f8 fe44 	bl	80022d4 <HAL_GPIO_ReadPin>
 800964c:	4603      	mov	r3, r0
 800964e:	2b00      	cmp	r3, #0
 8009650:	d0f7      	beq.n	8009642 <init_test+0xb6>
			  drive_ready();
 8009652:	f7fb fb15 	bl	8004c80 <drive_ready>
			  get_base();
 8009656:	f008 fa41 	bl	8011adc <get_base>

			  switch(mode){
 800965a:	697b      	ldr	r3, [r7, #20]
 800965c:	2b07      	cmp	r3, #7
 800965e:	d89e      	bhi.n	800959e <init_test+0x12>
 8009660:	a201      	add	r2, pc, #4	; (adr r2, 8009668 <init_test+0xdc>)
 8009662:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009666:	bf00      	nop
 8009668:	08009689 	.word	0x08009689
 800966c:	0800968f 	.word	0x0800968f
 8009670:	080096af 	.word	0x080096af
 8009674:	080096cd 	.word	0x080096cd
 8009678:	080096eb 	.word	0x080096eb
 800967c:	08009709 	.word	0x08009709
 8009680:	08009733 	.word	0x08009733
 8009684:	0800974d 	.word	0x0800974d
				case 0:
					get_base();
 8009688:	f008 fa28 	bl	8011adc <get_base>
					break;
 800968c:	e069      	b.n	8009762 <init_test+0x1d6>
				case 1:
					//----4区画等速走行----
					printf("4 Section, Forward, Constant Speed.\n");
 800968e:	4839      	ldr	r0, [pc, #228]	; (8009774 <init_test+0x1e8>)
 8009690:	f009 f8be 	bl	8012810 <puts>
					for(int i = 0; i < 1; i++){
 8009694:	2300      	movs	r3, #0
 8009696:	613b      	str	r3, [r7, #16]
 8009698:	e005      	b.n	80096a6 <init_test+0x11a>
						driveC(SEC_HALF*2);	//一区画のパルス分デフォルトインターバルで走行
 800969a:	20b6      	movs	r0, #182	; 0xb6
 800969c:	f7fb fe66 	bl	800536c <driveC>
					for(int i = 0; i < 1; i++){
 80096a0:	693b      	ldr	r3, [r7, #16]
 80096a2:	3301      	adds	r3, #1
 80096a4:	613b      	str	r3, [r7, #16]
 80096a6:	693b      	ldr	r3, [r7, #16]
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	ddf6      	ble.n	800969a <init_test+0x10e>
					}
					break;
 80096ac:	e059      	b.n	8009762 <init_test+0x1d6>
				case 2:
					//----right90度回転----
					printf("Rotate R90.\n");
 80096ae:	4832      	ldr	r0, [pc, #200]	; (8009778 <init_test+0x1ec>)
 80096b0:	f009 f8ae 	bl	8012810 <puts>
					for(int i = 0; i < 32; i++){
 80096b4:	2300      	movs	r3, #0
 80096b6:	60fb      	str	r3, [r7, #12]
 80096b8:	e004      	b.n	80096c4 <init_test+0x138>
						rotate_R90();				//16回右90度回転、つまり4周回転
 80096ba:	f7fc fe91 	bl	80063e0 <rotate_R90>
					for(int i = 0; i < 32; i++){
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	3301      	adds	r3, #1
 80096c2:	60fb      	str	r3, [r7, #12]
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	2b1f      	cmp	r3, #31
 80096c8:	ddf7      	ble.n	80096ba <init_test+0x12e>
					}
					break;
 80096ca:	e04a      	b.n	8009762 <init_test+0x1d6>
				case 3:
					//----left90度回転----
					printf("Rotate L90.\n");
 80096cc:	482b      	ldr	r0, [pc, #172]	; (800977c <init_test+0x1f0>)
 80096ce:	f009 f89f 	bl	8012810 <puts>
					for(int i = 0; i < 32; i++){
 80096d2:	2300      	movs	r3, #0
 80096d4:	60bb      	str	r3, [r7, #8]
 80096d6:	e004      	b.n	80096e2 <init_test+0x156>
						rotate_L90();				//16回左90度回転、つまり4周回転
 80096d8:	f7fc ff5e 	bl	8006598 <rotate_L90>
					for(int i = 0; i < 32; i++){
 80096dc:	68bb      	ldr	r3, [r7, #8]
 80096de:	3301      	adds	r3, #1
 80096e0:	60bb      	str	r3, [r7, #8]
 80096e2:	68bb      	ldr	r3, [r7, #8]
 80096e4:	2b1f      	cmp	r3, #31
 80096e6:	ddf7      	ble.n	80096d8 <init_test+0x14c>
					}
					break;
 80096e8:	e03b      	b.n	8009762 <init_test+0x1d6>
				case 4:
					//----180度回転----
					printf("Rotate 180.\n");
 80096ea:	4825      	ldr	r0, [pc, #148]	; (8009780 <init_test+0x1f4>)
 80096ec:	f009 f890 	bl	8012810 <puts>
					for(int i = 0; i < 16; i++){
 80096f0:	2300      	movs	r3, #0
 80096f2:	607b      	str	r3, [r7, #4]
 80096f4:	e004      	b.n	8009700 <init_test+0x174>
						rotate_180();				//8回右180度回転、つまり4周回転
 80096f6:	f7fd f82b 	bl	8006750 <rotate_180>
					for(int i = 0; i < 16; i++){
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	3301      	adds	r3, #1
 80096fe:	607b      	str	r3, [r7, #4]
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	2b0f      	cmp	r3, #15
 8009704:	ddf7      	ble.n	80096f6 <init_test+0x16a>
					}
					break;
 8009706:	e02c      	b.n	8009762 <init_test+0x1d6>
				case 5:
					//----4区画連続走行----
					printf("4 Section, Forward, Continuous.\n");
 8009708:	481e      	ldr	r0, [pc, #120]	; (8009784 <init_test+0x1f8>)
 800970a:	f009 f881 	bl	8012810 <puts>
					get_base();
 800970e:	f008 f9e5 	bl	8011adc <get_base>
					half_sectionA();				//半区画のパルス分加速しながら走行
 8009712:	f7fc fa63 	bl	8005bdc <half_sectionA>
					for(int i = 0; i < 6-1; i++){
 8009716:	2300      	movs	r3, #0
 8009718:	603b      	str	r3, [r7, #0]
 800971a:	e004      	b.n	8009726 <init_test+0x19a>
						one_sectionU();			//一区画のパルス分等速走行
 800971c:	f7fc fe48 	bl	80063b0 <one_sectionU>
					for(int i = 0; i < 6-1; i++){
 8009720:	683b      	ldr	r3, [r7, #0]
 8009722:	3301      	adds	r3, #1
 8009724:	603b      	str	r3, [r7, #0]
 8009726:	683b      	ldr	r3, [r7, #0]
 8009728:	2b04      	cmp	r3, #4
 800972a:	ddf7      	ble.n	800971c <init_test+0x190>
					}
					half_sectionD();				//半区画のパルス分減速しながら走行。走行後は停止する
 800972c:	f7fc fabc 	bl	8005ca8 <half_sectionD>
					break;
 8009730:	e017      	b.n	8009762 <init_test+0x1d6>
				case 6:
					//----a宴会芸モード----
					target_degree_z = degree_z;
 8009732:	4b15      	ldr	r3, [pc, #84]	; (8009788 <init_test+0x1fc>)
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	4a15      	ldr	r2, [pc, #84]	; (800978c <init_test+0x200>)
 8009738:	6013      	str	r3, [r2, #0]
					accel_l = 5000;
 800973a:	4b15      	ldr	r3, [pc, #84]	; (8009790 <init_test+0x204>)
 800973c:	4a15      	ldr	r2, [pc, #84]	; (8009794 <init_test+0x208>)
 800973e:	601a      	str	r2, [r3, #0]

					MF2.FLAG.ENKAI = 1;
 8009740:	4a15      	ldr	r2, [pc, #84]	; (8009798 <init_test+0x20c>)
 8009742:	8813      	ldrh	r3, [r2, #0]
 8009744:	f043 0320 	orr.w	r3, r3, #32
 8009748:	8013      	strh	r3, [r2, #0]

					while(1);
 800974a:	e7fe      	b.n	800974a <init_test+0x1be>
					break;
				case 7:
					//----a停止時前壁補正モード----
					MF.FLAG.FWALL = 1;
 800974c:	4a13      	ldr	r2, [pc, #76]	; (800979c <init_test+0x210>)
 800974e:	8813      	ldrh	r3, [r2, #0]
 8009750:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009754:	8013      	strh	r3, [r2, #0]
					MF.FLAG.DRV = 1;
 8009756:	4a11      	ldr	r2, [pc, #68]	; (800979c <init_test+0x210>)
 8009758:	8813      	ldrh	r3, [r2, #0]
 800975a:	f043 0302 	orr.w	r3, r3, #2
 800975e:	8013      	strh	r3, [r2, #0]
					while(1);
 8009760:	e7fe      	b.n	8009760 <init_test+0x1d4>
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 8009762:	e71c      	b.n	800959e <init_test+0x12>
 8009764:	08013988 	.word	0x08013988
 8009768:	20000aec 	.word	0x20000aec
 800976c:	08013964 	.word	0x08013964
 8009770:	40020000 	.word	0x40020000
 8009774:	080139a4 	.word	0x080139a4
 8009778:	080139c8 	.word	0x080139c8
 800977c:	080139d4 	.word	0x080139d4
 8009780:	080139e0 	.word	0x080139e0
 8009784:	080139ec 	.word	0x080139ec
 8009788:	20000b5c 	.word	0x20000b5c
 800978c:	20000bf8 	.word	0x20000bf8
 8009790:	20000d58 	.word	0x20000d58
 8009794:	459c4000 	.word	0x459c4000
 8009798:	20000f64 	.word	0x20000f64
 800979c:	20000f68 	.word	0x20000f68

080097a0 <slalom_test>:
//slalom_test
// スラローム走行テスト
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void slalom_test(void){
 80097a0:	b580      	push	{r7, lr}
 80097a2:	b08e      	sub	sp, #56	; 0x38
 80097a4:	af00      	add	r7, sp, #0

	int mode = 0;
 80097a6:	2300      	movs	r3, #0
 80097a8:	637b      	str	r3, [r7, #52]	; 0x34
	printf("Test Slalom Run, Mode : %d\n", mode);
 80097aa:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80097ac:	48b8      	ldr	r0, [pc, #736]	; (8009a90 <slalom_test+0x2f0>)
 80097ae:	f008 ffbb 	bl	8012728 <iprintf>

	run_select();
 80097b2:	f7fb fbb9 	bl	8004f28 <run_select>

	while(1){
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 80097b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80097b8:	b2db      	uxtb	r3, r3
 80097ba:	f003 0301 	and.w	r3, r3, #1
 80097be:	b2d8      	uxtb	r0, r3
 80097c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80097c2:	b2db      	uxtb	r3, r3
 80097c4:	f003 0302 	and.w	r3, r3, #2
 80097c8:	b2d9      	uxtb	r1, r3
 80097ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80097cc:	b2db      	uxtb	r3, r3
 80097ce:	f003 0304 	and.w	r3, r3, #4
 80097d2:	b2db      	uxtb	r3, r3
 80097d4:	461a      	mov	r2, r3
 80097d6:	f008 f9d9 	bl	8011b8c <led_write>
		  if(dist_r >= 20){
 80097da:	4bae      	ldr	r3, [pc, #696]	; (8009a94 <slalom_test+0x2f4>)
 80097dc:	edd3 7a00 	vldr	s15, [r3]
 80097e0:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 80097e4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80097e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80097ec:	db20      	blt.n	8009830 <slalom_test+0x90>
			  mode++;
 80097ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80097f0:	3301      	adds	r3, #1
 80097f2:	637b      	str	r3, [r7, #52]	; 0x34
			  dist_r = 0;
 80097f4:	4ba7      	ldr	r3, [pc, #668]	; (8009a94 <slalom_test+0x2f4>)
 80097f6:	f04f 0200 	mov.w	r2, #0
 80097fa:	601a      	str	r2, [r3, #0]
			  if(mode < 8){
 80097fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80097fe:	2b07      	cmp	r3, #7
 8009800:	dc03      	bgt.n	800980a <slalom_test+0x6a>
				  full_led_write(WHITE);
 8009802:	2007      	movs	r0, #7
 8009804:	f008 f9fc 	bl	8011c00 <full_led_write>
 8009808:	e009      	b.n	800981e <slalom_test+0x7e>
			  }else if(mode < 16){
 800980a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800980c:	2b0f      	cmp	r3, #15
 800980e:	dc03      	bgt.n	8009818 <slalom_test+0x78>
				  full_led_write(BLUEGREEN);
 8009810:	2004      	movs	r0, #4
 8009812:	f008 f9f5 	bl	8011c00 <full_led_write>
 8009816:	e002      	b.n	800981e <slalom_test+0x7e>
			  }else{
				  full_led_write(PURPLE);
 8009818:	2005      	movs	r0, #5
 800981a:	f008 f9f1 	bl	8011c00 <full_led_write>
			  }
			  if(mode > 23){
 800981e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009820:	2b17      	cmp	r3, #23
 8009822:	dd01      	ble.n	8009828 <slalom_test+0x88>
				  mode = 0;
 8009824:	2300      	movs	r3, #0
 8009826:	637b      	str	r3, [r7, #52]	; 0x34
			  }
			  printf("Mode : %d\n", mode);
 8009828:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800982a:	489b      	ldr	r0, [pc, #620]	; (8009a98 <slalom_test+0x2f8>)
 800982c:	f008 ff7c 	bl	8012728 <iprintf>
		  }
		  if(dist_r <= -20){
 8009830:	4b98      	ldr	r3, [pc, #608]	; (8009a94 <slalom_test+0x2f4>)
 8009832:	edd3 7a00 	vldr	s15, [r3]
 8009836:	eebb 7a04 	vmov.f32	s14, #180	; 0xc1a00000 -20.0
 800983a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800983e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009842:	d820      	bhi.n	8009886 <slalom_test+0xe6>
			  mode--;
 8009844:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009846:	3b01      	subs	r3, #1
 8009848:	637b      	str	r3, [r7, #52]	; 0x34
			  dist_r = 0;
 800984a:	4b92      	ldr	r3, [pc, #584]	; (8009a94 <slalom_test+0x2f4>)
 800984c:	f04f 0200 	mov.w	r2, #0
 8009850:	601a      	str	r2, [r3, #0]
			  if(mode < 8){
 8009852:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009854:	2b07      	cmp	r3, #7
 8009856:	dc03      	bgt.n	8009860 <slalom_test+0xc0>
				  full_led_write(WHITE);
 8009858:	2007      	movs	r0, #7
 800985a:	f008 f9d1 	bl	8011c00 <full_led_write>
 800985e:	e009      	b.n	8009874 <slalom_test+0xd4>
			  }else if(mode < 16){
 8009860:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009862:	2b0f      	cmp	r3, #15
 8009864:	dc03      	bgt.n	800986e <slalom_test+0xce>
				  full_led_write(BLUEGREEN);
 8009866:	2004      	movs	r0, #4
 8009868:	f008 f9ca 	bl	8011c00 <full_led_write>
 800986c:	e002      	b.n	8009874 <slalom_test+0xd4>
			  }else{
				  full_led_write(PURPLE);
 800986e:	2005      	movs	r0, #5
 8009870:	f008 f9c6 	bl	8011c00 <full_led_write>
			  }
			  if(mode < 0){
 8009874:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009876:	2b00      	cmp	r3, #0
 8009878:	da01      	bge.n	800987e <slalom_test+0xde>
				  mode = 23;
 800987a:	2317      	movs	r3, #23
 800987c:	637b      	str	r3, [r7, #52]	; 0x34
			  }
			  printf("Mode : %d\n", mode);
 800987e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009880:	4885      	ldr	r0, [pc, #532]	; (8009a98 <slalom_test+0x2f8>)
 8009882:	f008 ff51 	bl	8012728 <iprintf>
		  }
		  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET){
 8009886:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800988a:	4884      	ldr	r0, [pc, #528]	; (8009a9c <slalom_test+0x2fc>)
 800988c:	f7f8 fd22 	bl	80022d4 <HAL_GPIO_ReadPin>
 8009890:	4603      	mov	r3, r0
 8009892:	2b00      	cmp	r3, #0
 8009894:	d18f      	bne.n	80097b6 <slalom_test+0x16>
			  HAL_Delay(50);
 8009896:	2032      	movs	r0, #50	; 0x32
 8009898:	f7f7 fbc0 	bl	800101c <HAL_Delay>
			  while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET);
 800989c:	bf00      	nop
 800989e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80098a2:	487e      	ldr	r0, [pc, #504]	; (8009a9c <slalom_test+0x2fc>)
 80098a4:	f7f8 fd16 	bl	80022d4 <HAL_GPIO_ReadPin>
 80098a8:	4603      	mov	r3, r0
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d0f7      	beq.n	800989e <slalom_test+0xfe>
			  drive_ready();
 80098ae:	f7fb f9e7 	bl	8004c80 <drive_ready>
			  get_base();
 80098b2:	f008 f913 	bl	8011adc <get_base>

			  switch(mode){
 80098b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80098b8:	2b10      	cmp	r3, #16
 80098ba:	f200 8130 	bhi.w	8009b1e <slalom_test+0x37e>
 80098be:	a201      	add	r2, pc, #4	; (adr r2, 80098c4 <slalom_test+0x124>)
 80098c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098c4:	08009909 	.word	0x08009909
 80098c8:	0800990f 	.word	0x0800990f
 80098cc:	08009935 	.word	0x08009935
 80098d0:	0800995b 	.word	0x0800995b
 80098d4:	08009981 	.word	0x08009981
 80098d8:	080099a7 	.word	0x080099a7
 80098dc:	080099cd 	.word	0x080099cd
 80098e0:	08009b1f 	.word	0x08009b1f
 80098e4:	08009b1f 	.word	0x08009b1f
 80098e8:	080099f3 	.word	0x080099f3
 80098ec:	08009a1d 	.word	0x08009a1d
 80098f0:	08009a5b 	.word	0x08009a5b
 80098f4:	08009a81 	.word	0x08009a81
 80098f8:	08009ad3 	.word	0x08009ad3
 80098fc:	08009af9 	.word	0x08009af9
 8009900:	08009b1f 	.word	0x08009b1f
 8009904:	08009b1f 	.word	0x08009b1f
				case 0:
					get_base();
 8009908:	f008 f8e8 	bl	8011adc <get_base>
					break;
 800990c:	e107      	b.n	8009b1e <slalom_test+0x37e>
				case 1:
					//----slalom右折----
					printf("slalom turn right .\n");
 800990e:	4864      	ldr	r0, [pc, #400]	; (8009aa0 <slalom_test+0x300>)
 8009910:	f008 ff7e 	bl	8012810 <puts>
					half_sectionA();
 8009914:	f7fc f962 	bl	8005bdc <half_sectionA>
					for(int i = 0; i < 1; i++){
 8009918:	2300      	movs	r3, #0
 800991a:	633b      	str	r3, [r7, #48]	; 0x30
 800991c:	e004      	b.n	8009928 <slalom_test+0x188>
						slalom_R90();	//一区画のパルス分デフォルトインターバルで走行
 800991e:	f7fc ffef 	bl	8006900 <slalom_R90>
					for(int i = 0; i < 1; i++){
 8009922:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009924:	3301      	adds	r3, #1
 8009926:	633b      	str	r3, [r7, #48]	; 0x30
 8009928:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800992a:	2b00      	cmp	r3, #0
 800992c:	ddf7      	ble.n	800991e <slalom_test+0x17e>
					}
					half_sectionD();
 800992e:	f7fc f9bb 	bl	8005ca8 <half_sectionD>
					break;
 8009932:	e0f4      	b.n	8009b1e <slalom_test+0x37e>
				case 2:
					//----slalom左折----
					printf("slalom turn left .\n");
 8009934:	485b      	ldr	r0, [pc, #364]	; (8009aa4 <slalom_test+0x304>)
 8009936:	f008 ff6b 	bl	8012810 <puts>
					half_sectionA();
 800993a:	f7fc f94f 	bl	8005bdc <half_sectionA>
					for(int i = 0; i < 1; i++){
 800993e:	2300      	movs	r3, #0
 8009940:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009942:	e004      	b.n	800994e <slalom_test+0x1ae>
						slalom_L90();				//16回右90度回転、つまり4周回転
 8009944:	f7fd f908 	bl	8006b58 <slalom_L90>
					for(int i = 0; i < 1; i++){
 8009948:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800994a:	3301      	adds	r3, #1
 800994c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800994e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009950:	2b00      	cmp	r3, #0
 8009952:	ddf7      	ble.n	8009944 <slalom_test+0x1a4>
					}
					half_sectionD();
 8009954:	f7fc f9a8 	bl	8005ca8 <half_sectionD>
					break;
 8009958:	e0e1      	b.n	8009b1e <slalom_test+0x37e>
				case 3:
					//----Lslalom右折----
					printf("Lslalom turn right .\n");
 800995a:	4853      	ldr	r0, [pc, #332]	; (8009aa8 <slalom_test+0x308>)
 800995c:	f008 ff58 	bl	8012810 <puts>
					half_sectionA();
 8009960:	f7fc f93c 	bl	8005bdc <half_sectionA>
					for(int i = 0; i < 1; i++){
 8009964:	2300      	movs	r3, #0
 8009966:	62bb      	str	r3, [r7, #40]	; 0x28
 8009968:	e004      	b.n	8009974 <slalom_test+0x1d4>
						Lslalom_R90();				//16回右90度回転、つまり4周回転
 800996a:	f7fd fa15 	bl	8006d98 <Lslalom_R90>
					for(int i = 0; i < 1; i++){
 800996e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009970:	3301      	adds	r3, #1
 8009972:	62bb      	str	r3, [r7, #40]	; 0x28
 8009974:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009976:	2b00      	cmp	r3, #0
 8009978:	ddf7      	ble.n	800996a <slalom_test+0x1ca>
					}
					half_sectionD();
 800997a:	f7fc f995 	bl	8005ca8 <half_sectionD>
					break;
 800997e:	e0ce      	b.n	8009b1e <slalom_test+0x37e>
				case 4:
					//----Lslalom左折----
					printf("Lslalom turn left .\n");
 8009980:	484a      	ldr	r0, [pc, #296]	; (8009aac <slalom_test+0x30c>)
 8009982:	f008 ff45 	bl	8012810 <puts>
					half_sectionA();
 8009986:	f7fc f929 	bl	8005bdc <half_sectionA>
					for(int i = 0; i < 1; i++){
 800998a:	2300      	movs	r3, #0
 800998c:	627b      	str	r3, [r7, #36]	; 0x24
 800998e:	e004      	b.n	800999a <slalom_test+0x1fa>
						Lslalom_L90();				//16回左90度回転、つまり4周回転
 8009990:	f7fd fb3a 	bl	8007008 <Lslalom_L90>
					for(int i = 0; i < 1; i++){
 8009994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009996:	3301      	adds	r3, #1
 8009998:	627b      	str	r3, [r7, #36]	; 0x24
 800999a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800999c:	2b00      	cmp	r3, #0
 800999e:	ddf7      	ble.n	8009990 <slalom_test+0x1f0>
					}
					half_sectionD();
 80099a0:	f7fc f982 	bl	8005ca8 <half_sectionD>
					break;
 80099a4:	e0bb      	b.n	8009b1e <slalom_test+0x37e>
				case 5:
					//----Lslalom右180----
					printf("Lslalom turn right & right .\n");
 80099a6:	4842      	ldr	r0, [pc, #264]	; (8009ab0 <slalom_test+0x310>)
 80099a8:	f008 ff32 	bl	8012810 <puts>
					half_sectionA();
 80099ac:	f7fc f916 	bl	8005bdc <half_sectionA>
					for(int i = 0; i < 1; i++){
 80099b0:	2300      	movs	r3, #0
 80099b2:	623b      	str	r3, [r7, #32]
 80099b4:	e004      	b.n	80099c0 <slalom_test+0x220>
						Lslalom_R180();				//16回右180度回転、つまり4周回転
 80099b6:	f7fd fc53 	bl	8007260 <Lslalom_R180>
					for(int i = 0; i < 1; i++){
 80099ba:	6a3b      	ldr	r3, [r7, #32]
 80099bc:	3301      	adds	r3, #1
 80099be:	623b      	str	r3, [r7, #32]
 80099c0:	6a3b      	ldr	r3, [r7, #32]
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	ddf7      	ble.n	80099b6 <slalom_test+0x216>
					}
					half_sectionD();
 80099c6:	f7fc f96f 	bl	8005ca8 <half_sectionD>
					break;
 80099ca:	e0a8      	b.n	8009b1e <slalom_test+0x37e>
				case 6:
					//----Lslalom左180----
					printf("Lslalom turn left & left .\n");
 80099cc:	4839      	ldr	r0, [pc, #228]	; (8009ab4 <slalom_test+0x314>)
 80099ce:	f008 ff1f 	bl	8012810 <puts>
					half_sectionA();
 80099d2:	f7fc f903 	bl	8005bdc <half_sectionA>
					for(int i = 0; i < 1; i++){
 80099d6:	2300      	movs	r3, #0
 80099d8:	61fb      	str	r3, [r7, #28]
 80099da:	e004      	b.n	80099e6 <slalom_test+0x246>
						Lslalom_L180();				//16回左180度回転、つまり4周回転
 80099dc:	f7fd fd92 	bl	8007504 <Lslalom_L180>
					for(int i = 0; i < 1; i++){
 80099e0:	69fb      	ldr	r3, [r7, #28]
 80099e2:	3301      	adds	r3, #1
 80099e4:	61fb      	str	r3, [r7, #28]
 80099e6:	69fb      	ldr	r3, [r7, #28]
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	ddf7      	ble.n	80099dc <slalom_test+0x23c>
					}
					half_sectionD();
 80099ec:	f7fc f95c 	bl	8005ca8 <half_sectionD>
					break;
 80099f0:	e095      	b.n	8009b1e <slalom_test+0x37e>
					break;
				case 8:
					break;
				case 9:
					//----slalom右折----
					printf("slalom turn right .\n");
 80099f2:	482b      	ldr	r0, [pc, #172]	; (8009aa0 <slalom_test+0x300>)
 80099f4:	f008 ff0c 	bl	8012810 <puts>
					half_sectionA();
 80099f8:	f7fc f8f0 	bl	8005bdc <half_sectionA>
					for(int i = 0; i < 8; i++){
 80099fc:	2300      	movs	r3, #0
 80099fe:	61bb      	str	r3, [r7, #24]
 8009a00:	e006      	b.n	8009a10 <slalom_test+0x270>
						slalom_R90();	//一区画のパルス分デフォルトインターバルで走行
 8009a02:	f7fc ff7d 	bl	8006900 <slalom_R90>
						one_sectionU();
 8009a06:	f7fc fcd3 	bl	80063b0 <one_sectionU>
					for(int i = 0; i < 8; i++){
 8009a0a:	69bb      	ldr	r3, [r7, #24]
 8009a0c:	3301      	adds	r3, #1
 8009a0e:	61bb      	str	r3, [r7, #24]
 8009a10:	69bb      	ldr	r3, [r7, #24]
 8009a12:	2b07      	cmp	r3, #7
 8009a14:	ddf5      	ble.n	8009a02 <slalom_test+0x262>
					}
					half_sectionD();
 8009a16:	f7fc f947 	bl	8005ca8 <half_sectionD>
					break;
 8009a1a:	e080      	b.n	8009b1e <slalom_test+0x37e>
				case 10:
					//----slalom左折----
					printf("slalom turn left .\n");
 8009a1c:	4821      	ldr	r0, [pc, #132]	; (8009aa4 <slalom_test+0x304>)
 8009a1e:	f008 fef7 	bl	8012810 <puts>
					half_sectionA();
 8009a22:	f7fc f8db 	bl	8005bdc <half_sectionA>
					MF2.FLAG.LOG = 1;
 8009a26:	4a24      	ldr	r2, [pc, #144]	; (8009ab8 <slalom_test+0x318>)
 8009a28:	8813      	ldrh	r3, [r2, #0]
 8009a2a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009a2e:	8013      	strh	r3, [r2, #0]
					for(int i = 0; i < 8; i++){
 8009a30:	2300      	movs	r3, #0
 8009a32:	617b      	str	r3, [r7, #20]
 8009a34:	e006      	b.n	8009a44 <slalom_test+0x2a4>
						slalom_L90();				//16回右90度回転、つまり4周回転
 8009a36:	f7fd f88f 	bl	8006b58 <slalom_L90>
						one_sectionU();
 8009a3a:	f7fc fcb9 	bl	80063b0 <one_sectionU>
					for(int i = 0; i < 8; i++){
 8009a3e:	697b      	ldr	r3, [r7, #20]
 8009a40:	3301      	adds	r3, #1
 8009a42:	617b      	str	r3, [r7, #20]
 8009a44:	697b      	ldr	r3, [r7, #20]
 8009a46:	2b07      	cmp	r3, #7
 8009a48:	ddf5      	ble.n	8009a36 <slalom_test+0x296>
					}
					MF2.FLAG.LOG = 0;
 8009a4a:	4a1b      	ldr	r2, [pc, #108]	; (8009ab8 <slalom_test+0x318>)
 8009a4c:	8813      	ldrh	r3, [r2, #0]
 8009a4e:	f36f 1386 	bfc	r3, #6, #1
 8009a52:	8013      	strh	r3, [r2, #0]
					half_sectionD();
 8009a54:	f7fc f928 	bl	8005ca8 <half_sectionD>
					printf("r start\n");
					for(int j = 0; j < log_allay; j++){
						printf("%d\n", get_speed_r[j]);
					}
					printf("r end\n");
*/					break;
 8009a58:	e061      	b.n	8009b1e <slalom_test+0x37e>
				case 11:
					//----Lslalom右折----
					printf("Lslalom turn right .\n");
 8009a5a:	4813      	ldr	r0, [pc, #76]	; (8009aa8 <slalom_test+0x308>)
 8009a5c:	f008 fed8 	bl	8012810 <puts>
					half_sectionA();
 8009a60:	f7fc f8bc 	bl	8005bdc <half_sectionA>
					for(int i = 0; i < 8; i++){
 8009a64:	2300      	movs	r3, #0
 8009a66:	613b      	str	r3, [r7, #16]
 8009a68:	e004      	b.n	8009a74 <slalom_test+0x2d4>
						Lslalom_R90();				//16回右90度回転、つまり4周回転
 8009a6a:	f7fd f995 	bl	8006d98 <Lslalom_R90>
					for(int i = 0; i < 8; i++){
 8009a6e:	693b      	ldr	r3, [r7, #16]
 8009a70:	3301      	adds	r3, #1
 8009a72:	613b      	str	r3, [r7, #16]
 8009a74:	693b      	ldr	r3, [r7, #16]
 8009a76:	2b07      	cmp	r3, #7
 8009a78:	ddf7      	ble.n	8009a6a <slalom_test+0x2ca>
					}
					half_sectionD();
 8009a7a:	f7fc f915 	bl	8005ca8 <half_sectionD>
					break;
 8009a7e:	e04e      	b.n	8009b1e <slalom_test+0x37e>
				case 12:
					//----Lslalom左折----
					printf("Lslalom turn left .\n");
 8009a80:	480a      	ldr	r0, [pc, #40]	; (8009aac <slalom_test+0x30c>)
 8009a82:	f008 fec5 	bl	8012810 <puts>
					half_sectionA();
 8009a86:	f7fc f8a9 	bl	8005bdc <half_sectionA>
					for(int i = 0; i < 8; i++){
 8009a8a:	2300      	movs	r3, #0
 8009a8c:	60fb      	str	r3, [r7, #12]
 8009a8e:	e01a      	b.n	8009ac6 <slalom_test+0x326>
 8009a90:	08013a0c 	.word	0x08013a0c
 8009a94:	20000aec 	.word	0x20000aec
 8009a98:	08013964 	.word	0x08013964
 8009a9c:	40020000 	.word	0x40020000
 8009aa0:	08013a28 	.word	0x08013a28
 8009aa4:	08013a3c 	.word	0x08013a3c
 8009aa8:	08013a50 	.word	0x08013a50
 8009aac:	08013a68 	.word	0x08013a68
 8009ab0:	08013a7c 	.word	0x08013a7c
 8009ab4:	08013a9c 	.word	0x08013a9c
 8009ab8:	20000f64 	.word	0x20000f64
						Lslalom_L90();				//16回左90度回転、つまり4周回転
 8009abc:	f7fd faa4 	bl	8007008 <Lslalom_L90>
					for(int i = 0; i < 8; i++){
 8009ac0:	68fb      	ldr	r3, [r7, #12]
 8009ac2:	3301      	adds	r3, #1
 8009ac4:	60fb      	str	r3, [r7, #12]
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	2b07      	cmp	r3, #7
 8009aca:	ddf7      	ble.n	8009abc <slalom_test+0x31c>
					}
					half_sectionD();
 8009acc:	f7fc f8ec 	bl	8005ca8 <half_sectionD>
					break;
 8009ad0:	e025      	b.n	8009b1e <slalom_test+0x37e>
				case 13:
					//----Lslalom右180----
					printf("Lslalom turn right & right .\n");
 8009ad2:	4815      	ldr	r0, [pc, #84]	; (8009b28 <slalom_test+0x388>)
 8009ad4:	f008 fe9c 	bl	8012810 <puts>
					half_sectionA();
 8009ad8:	f7fc f880 	bl	8005bdc <half_sectionA>
					for(int i = 0; i < 8; i++){
 8009adc:	2300      	movs	r3, #0
 8009ade:	60bb      	str	r3, [r7, #8]
 8009ae0:	e004      	b.n	8009aec <slalom_test+0x34c>
						Lslalom_R180();				//16回右180度回転、つまり4周回転
 8009ae2:	f7fd fbbd 	bl	8007260 <Lslalom_R180>
					for(int i = 0; i < 8; i++){
 8009ae6:	68bb      	ldr	r3, [r7, #8]
 8009ae8:	3301      	adds	r3, #1
 8009aea:	60bb      	str	r3, [r7, #8]
 8009aec:	68bb      	ldr	r3, [r7, #8]
 8009aee:	2b07      	cmp	r3, #7
 8009af0:	ddf7      	ble.n	8009ae2 <slalom_test+0x342>
					}
					half_sectionD();
 8009af2:	f7fc f8d9 	bl	8005ca8 <half_sectionD>
					break;
 8009af6:	e012      	b.n	8009b1e <slalom_test+0x37e>
				case 14:
					//----Lslalom左180----
					printf("Lslalom turn left & left .\n");
 8009af8:	480c      	ldr	r0, [pc, #48]	; (8009b2c <slalom_test+0x38c>)
 8009afa:	f008 fe89 	bl	8012810 <puts>
					half_sectionA();
 8009afe:	f7fc f86d 	bl	8005bdc <half_sectionA>
					for(int i = 0; i < 8; i++){
 8009b02:	2300      	movs	r3, #0
 8009b04:	607b      	str	r3, [r7, #4]
 8009b06:	e004      	b.n	8009b12 <slalom_test+0x372>
						Lslalom_L180();				//16回左180度回転、つまり4周回転
 8009b08:	f7fd fcfc 	bl	8007504 <Lslalom_L180>
					for(int i = 0; i < 8; i++){
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	3301      	adds	r3, #1
 8009b10:	607b      	str	r3, [r7, #4]
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	2b07      	cmp	r3, #7
 8009b16:	ddf7      	ble.n	8009b08 <slalom_test+0x368>
					}
					half_sectionD();
 8009b18:	f7fc f8c6 	bl	8005ca8 <half_sectionD>
					break;
 8009b1c:	bf00      	nop
					break;
				case 16:
					break;

			  }
			  full_led_write(RED);
 8009b1e:	2001      	movs	r0, #1
 8009b20:	f008 f86e 	bl	8011c00 <full_led_write>
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 8009b24:	e647      	b.n	80097b6 <slalom_test+0x16>
 8009b26:	bf00      	nop
 8009b28:	08013a7c 	.word	0x08013a7c
 8009b2c:	08013a9c 	.word	0x08013a9c

08009b30 <v_test>:
//v_test
// 斜め走行テスト
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void v_test(void){
 8009b30:	b580      	push	{r7, lr}
 8009b32:	b092      	sub	sp, #72	; 0x48
 8009b34:	af00      	add	r7, sp, #0

	int mode = 0;
 8009b36:	2300      	movs	r3, #0
 8009b38:	647b      	str	r3, [r7, #68]	; 0x44
	printf("Test V Run, Mode : %d\n", mode);
 8009b3a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009b3c:	48ba      	ldr	r0, [pc, #744]	; (8009e28 <v_test+0x2f8>)
 8009b3e:	f008 fdf3 	bl	8012728 <iprintf>

	run_select();
 8009b42:	f7fb f9f1 	bl	8004f28 <run_select>

	while(1){
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 8009b46:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009b48:	b2db      	uxtb	r3, r3
 8009b4a:	f003 0301 	and.w	r3, r3, #1
 8009b4e:	b2d8      	uxtb	r0, r3
 8009b50:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009b52:	b2db      	uxtb	r3, r3
 8009b54:	f003 0302 	and.w	r3, r3, #2
 8009b58:	b2d9      	uxtb	r1, r3
 8009b5a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009b5c:	b2db      	uxtb	r3, r3
 8009b5e:	f003 0304 	and.w	r3, r3, #4
 8009b62:	b2db      	uxtb	r3, r3
 8009b64:	461a      	mov	r2, r3
 8009b66:	f008 f811 	bl	8011b8c <led_write>
		  if(dist_r >= 20){
 8009b6a:	4bb0      	ldr	r3, [pc, #704]	; (8009e2c <v_test+0x2fc>)
 8009b6c:	edd3 7a00 	vldr	s15, [r3]
 8009b70:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8009b74:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009b78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009b7c:	db20      	blt.n	8009bc0 <v_test+0x90>
			  mode++;
 8009b7e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009b80:	3301      	adds	r3, #1
 8009b82:	647b      	str	r3, [r7, #68]	; 0x44
			  dist_r = 0;
 8009b84:	4ba9      	ldr	r3, [pc, #676]	; (8009e2c <v_test+0x2fc>)
 8009b86:	f04f 0200 	mov.w	r2, #0
 8009b8a:	601a      	str	r2, [r3, #0]
			  if(mode > 23){
 8009b8c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009b8e:	2b17      	cmp	r3, #23
 8009b90:	dd01      	ble.n	8009b96 <v_test+0x66>
				  mode = 0;
 8009b92:	2300      	movs	r3, #0
 8009b94:	647b      	str	r3, [r7, #68]	; 0x44
			  }
			  if(mode < 8){
 8009b96:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009b98:	2b07      	cmp	r3, #7
 8009b9a:	dc03      	bgt.n	8009ba4 <v_test+0x74>
				  full_led_write(WHITE);
 8009b9c:	2007      	movs	r0, #7
 8009b9e:	f008 f82f 	bl	8011c00 <full_led_write>
 8009ba2:	e009      	b.n	8009bb8 <v_test+0x88>
			  }else if(mode < 16){
 8009ba4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009ba6:	2b0f      	cmp	r3, #15
 8009ba8:	dc03      	bgt.n	8009bb2 <v_test+0x82>
				  full_led_write(BLUEGREEN);
 8009baa:	2004      	movs	r0, #4
 8009bac:	f008 f828 	bl	8011c00 <full_led_write>
 8009bb0:	e002      	b.n	8009bb8 <v_test+0x88>
			  }else{
				  full_led_write(PURPLE);
 8009bb2:	2005      	movs	r0, #5
 8009bb4:	f008 f824 	bl	8011c00 <full_led_write>
			  }
			  printf("Mode : %d\n", mode);
 8009bb8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009bba:	489d      	ldr	r0, [pc, #628]	; (8009e30 <v_test+0x300>)
 8009bbc:	f008 fdb4 	bl	8012728 <iprintf>
		  }
		  if(dist_r <= -20){
 8009bc0:	4b9a      	ldr	r3, [pc, #616]	; (8009e2c <v_test+0x2fc>)
 8009bc2:	edd3 7a00 	vldr	s15, [r3]
 8009bc6:	eebb 7a04 	vmov.f32	s14, #180	; 0xc1a00000 -20.0
 8009bca:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009bce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009bd2:	d820      	bhi.n	8009c16 <v_test+0xe6>
			  mode--;
 8009bd4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009bd6:	3b01      	subs	r3, #1
 8009bd8:	647b      	str	r3, [r7, #68]	; 0x44
			  dist_r = 0;
 8009bda:	4b94      	ldr	r3, [pc, #592]	; (8009e2c <v_test+0x2fc>)
 8009bdc:	f04f 0200 	mov.w	r2, #0
 8009be0:	601a      	str	r2, [r3, #0]
			  if(mode < 0){
 8009be2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	da01      	bge.n	8009bec <v_test+0xbc>
				  mode = 23;
 8009be8:	2317      	movs	r3, #23
 8009bea:	647b      	str	r3, [r7, #68]	; 0x44
			  }
			  if(mode < 8){
 8009bec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009bee:	2b07      	cmp	r3, #7
 8009bf0:	dc03      	bgt.n	8009bfa <v_test+0xca>
				  full_led_write(WHITE);
 8009bf2:	2007      	movs	r0, #7
 8009bf4:	f008 f804 	bl	8011c00 <full_led_write>
 8009bf8:	e009      	b.n	8009c0e <v_test+0xde>
			  }else if(mode < 16){
 8009bfa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009bfc:	2b0f      	cmp	r3, #15
 8009bfe:	dc03      	bgt.n	8009c08 <v_test+0xd8>
				  full_led_write(BLUEGREEN);
 8009c00:	2004      	movs	r0, #4
 8009c02:	f007 fffd 	bl	8011c00 <full_led_write>
 8009c06:	e002      	b.n	8009c0e <v_test+0xde>
			  }else{
				  full_led_write(PURPLE);
 8009c08:	2005      	movs	r0, #5
 8009c0a:	f007 fff9 	bl	8011c00 <full_led_write>
			  }
			  printf("Mode : %d\n", mode);
 8009c0e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009c10:	4887      	ldr	r0, [pc, #540]	; (8009e30 <v_test+0x300>)
 8009c12:	f008 fd89 	bl	8012728 <iprintf>
		  }
		  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET){
 8009c16:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8009c1a:	4886      	ldr	r0, [pc, #536]	; (8009e34 <v_test+0x304>)
 8009c1c:	f7f8 fb5a 	bl	80022d4 <HAL_GPIO_ReadPin>
 8009c20:	4603      	mov	r3, r0
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	d18f      	bne.n	8009b46 <v_test+0x16>
			  HAL_Delay(50);
 8009c26:	2032      	movs	r0, #50	; 0x32
 8009c28:	f7f7 f9f8 	bl	800101c <HAL_Delay>
			  while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET);
 8009c2c:	bf00      	nop
 8009c2e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8009c32:	4880      	ldr	r0, [pc, #512]	; (8009e34 <v_test+0x304>)
 8009c34:	f7f8 fb4e 	bl	80022d4 <HAL_GPIO_ReadPin>
 8009c38:	4603      	mov	r3, r0
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	d0f7      	beq.n	8009c2e <v_test+0xfe>
			  drive_ready();
 8009c3e:	f7fb f81f 	bl	8004c80 <drive_ready>

			  MF.FLAG.XDIR = 1;
 8009c42:	4a7d      	ldr	r2, [pc, #500]	; (8009e38 <v_test+0x308>)
 8009c44:	8813      	ldrh	r3, [r2, #0]
 8009c46:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8009c4a:	8013      	strh	r3, [r2, #0]
			  MF2.FLAG.V = 0;
 8009c4c:	4a7b      	ldr	r2, [pc, #492]	; (8009e3c <v_test+0x30c>)
 8009c4e:	8813      	ldrh	r3, [r2, #0]
 8009c50:	f36f 03c3 	bfc	r3, #3, #1
 8009c54:	8013      	strh	r3, [r2, #0]
			  get_base();
 8009c56:	f007 ff41 	bl	8011adc <get_base>

			  switch(mode){
 8009c5a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009c5c:	2b14      	cmp	r3, #20
 8009c5e:	f200 818c 	bhi.w	8009f7a <v_test+0x44a>
 8009c62:	a201      	add	r2, pc, #4	; (adr r2, 8009c68 <v_test+0x138>)
 8009c64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c68:	08009cbd 	.word	0x08009cbd
 8009c6c:	08009cc3 	.word	0x08009cc3
 8009c70:	08009ce9 	.word	0x08009ce9
 8009c74:	08009d0f 	.word	0x08009d0f
 8009c78:	08009d35 	.word	0x08009d35
 8009c7c:	08009d5b 	.word	0x08009d5b
 8009c80:	08009d81 	.word	0x08009d81
 8009c84:	08009f7b 	.word	0x08009f7b
 8009c88:	08009f7b 	.word	0x08009f7b
 8009c8c:	08009da7 	.word	0x08009da7
 8009c90:	08009dcd 	.word	0x08009dcd
 8009c94:	08009df3 	.word	0x08009df3
 8009c98:	08009e19 	.word	0x08009e19
 8009c9c:	08009e6f 	.word	0x08009e6f
 8009ca0:	08009e95 	.word	0x08009e95
 8009ca4:	08009f7b 	.word	0x08009f7b
 8009ca8:	08009f7b 	.word	0x08009f7b
 8009cac:	08009ebb 	.word	0x08009ebb
 8009cb0:	08009eeb 	.word	0x08009eeb
 8009cb4:	08009f1b 	.word	0x08009f1b
 8009cb8:	08009f4b 	.word	0x08009f4b
				case 0:
					get_base();
 8009cbc:	f007 ff0e 	bl	8011adc <get_base>
					break;
 8009cc0:	e15b      	b.n	8009f7a <v_test+0x44a>
				case 1:
					//----V右45----
					printf("V 45 right .\n");
 8009cc2:	485f      	ldr	r0, [pc, #380]	; (8009e40 <v_test+0x310>)
 8009cc4:	f008 fda4 	bl	8012810 <puts>
					half_sectionA();
 8009cc8:	f7fb ff88 	bl	8005bdc <half_sectionA>
					for(int i = 0; i < 1; i++){
 8009ccc:	2300      	movs	r3, #0
 8009cce:	643b      	str	r3, [r7, #64]	; 0x40
 8009cd0:	e004      	b.n	8009cdc <v_test+0x1ac>
						v_R45();
 8009cd2:	f7fd fd5b 	bl	800778c <v_R45>
					for(int i = 0; i < 1; i++){
 8009cd6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009cd8:	3301      	adds	r3, #1
 8009cda:	643b      	str	r3, [r7, #64]	; 0x40
 8009cdc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	ddf7      	ble.n	8009cd2 <v_test+0x1a2>
					}
					half_sectionVD();
 8009ce2:	f7fc f89d 	bl	8005e20 <half_sectionVD>
					break;
 8009ce6:	e148      	b.n	8009f7a <v_test+0x44a>
				case 2:
					//----V左45----
					printf("V 45 left .\n");
 8009ce8:	4856      	ldr	r0, [pc, #344]	; (8009e44 <v_test+0x314>)
 8009cea:	f008 fd91 	bl	8012810 <puts>
					half_sectionA();
 8009cee:	f7fb ff75 	bl	8005bdc <half_sectionA>
					for(int i = 0; i < 1; i++){
 8009cf2:	2300      	movs	r3, #0
 8009cf4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009cf6:	e004      	b.n	8009d02 <v_test+0x1d2>
						v_L45();
 8009cf8:	f7fd ff2e 	bl	8007b58 <v_L45>
					for(int i = 0; i < 1; i++){
 8009cfc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009cfe:	3301      	adds	r3, #1
 8009d00:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009d02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	ddf7      	ble.n	8009cf8 <v_test+0x1c8>
					}
					half_sectionVD();
 8009d08:	f7fc f88a 	bl	8005e20 <half_sectionVD>
					break;
 8009d0c:	e135      	b.n	8009f7a <v_test+0x44a>
				case 3:
					//----V右90----
					printf("V 90 right .\n");
 8009d0e:	484e      	ldr	r0, [pc, #312]	; (8009e48 <v_test+0x318>)
 8009d10:	f008 fd7e 	bl	8012810 <puts>
					half_sectionVA();
 8009d14:	f7fc f828 	bl	8005d68 <half_sectionVA>
//					v_R45();
					for(int i = 0; i < 1; i++){
 8009d18:	2300      	movs	r3, #0
 8009d1a:	63bb      	str	r3, [r7, #56]	; 0x38
 8009d1c:	e004      	b.n	8009d28 <v_test+0x1f8>
						v_R90();
 8009d1e:	f7fe fb9f 	bl	8008460 <v_R90>
					for(int i = 0; i < 1; i++){
 8009d22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d24:	3301      	adds	r3, #1
 8009d26:	63bb      	str	r3, [r7, #56]	; 0x38
 8009d28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	ddf7      	ble.n	8009d1e <v_test+0x1ee>
					}
//					v_R45();
					half_sectionVD();
 8009d2e:	f7fc f877 	bl	8005e20 <half_sectionVD>
					break;
 8009d32:	e122      	b.n	8009f7a <v_test+0x44a>
				case 4:
					//----V左90----
					printf("V 90 left .\n");
 8009d34:	4845      	ldr	r0, [pc, #276]	; (8009e4c <v_test+0x31c>)
 8009d36:	f008 fd6b 	bl	8012810 <puts>
					half_sectionVA();
 8009d3a:	f7fc f815 	bl	8005d68 <half_sectionVA>
//					v_L45();
					for(int i = 0; i < 1; i++){
 8009d3e:	2300      	movs	r3, #0
 8009d40:	637b      	str	r3, [r7, #52]	; 0x34
 8009d42:	e004      	b.n	8009d4e <v_test+0x21e>
						v_L90();
 8009d44:	f7fe fc5c 	bl	8008600 <v_L90>
					for(int i = 0; i < 1; i++){
 8009d48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d4a:	3301      	adds	r3, #1
 8009d4c:	637b      	str	r3, [r7, #52]	; 0x34
 8009d4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	ddf7      	ble.n	8009d44 <v_test+0x214>
					}
//					v_L45();
					half_sectionVD();
 8009d54:	f7fc f864 	bl	8005e20 <half_sectionVD>
					break;
 8009d58:	e10f      	b.n	8009f7a <v_test+0x44a>
				case 5:
					//----V右135----
					printf("V 135 right .\n");
 8009d5a:	483d      	ldr	r0, [pc, #244]	; (8009e50 <v_test+0x320>)
 8009d5c:	f008 fd58 	bl	8012810 <puts>
					half_sectionA();
 8009d60:	f7fb ff3c 	bl	8005bdc <half_sectionA>
//					v_R45();
					for(int i = 0; i < 1; i++){
 8009d64:	2300      	movs	r3, #0
 8009d66:	633b      	str	r3, [r7, #48]	; 0x30
 8009d68:	e004      	b.n	8009d74 <v_test+0x244>
						v_R135();
 8009d6a:	f7fe fd11 	bl	8008790 <v_R135>
					for(int i = 0; i < 1; i++){
 8009d6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d70:	3301      	adds	r3, #1
 8009d72:	633b      	str	r3, [r7, #48]	; 0x30
 8009d74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	ddf7      	ble.n	8009d6a <v_test+0x23a>
					}
//					v_R45();
					half_sectionVD();
 8009d7a:	f7fc f851 	bl	8005e20 <half_sectionVD>
					break;
 8009d7e:	e0fc      	b.n	8009f7a <v_test+0x44a>
				case 6:
					//----V左135----
					printf("V 135 left .\n");
 8009d80:	4834      	ldr	r0, [pc, #208]	; (8009e54 <v_test+0x324>)
 8009d82:	f008 fd45 	bl	8012810 <puts>
					half_sectionA();
 8009d86:	f7fb ff29 	bl	8005bdc <half_sectionA>
//					v_L45();
					for(int i = 0; i < 1; i++){
 8009d8a:	2300      	movs	r3, #0
 8009d8c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009d8e:	e004      	b.n	8009d9a <v_test+0x26a>
						v_L135();
 8009d90:	f7fe fee8 	bl	8008b64 <v_L135>
					for(int i = 0; i < 1; i++){
 8009d94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d96:	3301      	adds	r3, #1
 8009d98:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009d9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	ddf7      	ble.n	8009d90 <v_test+0x260>
					}
//					v_L45();
					half_sectionVD();
 8009da0:	f7fc f83e 	bl	8005e20 <half_sectionVD>
					break;
 8009da4:	e0e9      	b.n	8009f7a <v_test+0x44a>
					break;
				case 8:
					break;
				case 9:
					//----V右45----
					printf("V 45 right .\n");
 8009da6:	4826      	ldr	r0, [pc, #152]	; (8009e40 <v_test+0x310>)
 8009da8:	f008 fd32 	bl	8012810 <puts>
					half_sectionA();
 8009dac:	f7fb ff16 	bl	8005bdc <half_sectionA>
					for(int i = 0; i < 8; i++){
 8009db0:	2300      	movs	r3, #0
 8009db2:	62bb      	str	r3, [r7, #40]	; 0x28
 8009db4:	e004      	b.n	8009dc0 <v_test+0x290>
						v_R45();
 8009db6:	f7fd fce9 	bl	800778c <v_R45>
					for(int i = 0; i < 8; i++){
 8009dba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009dbc:	3301      	adds	r3, #1
 8009dbe:	62bb      	str	r3, [r7, #40]	; 0x28
 8009dc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009dc2:	2b07      	cmp	r3, #7
 8009dc4:	ddf7      	ble.n	8009db6 <v_test+0x286>
					}
					half_sectionD();
 8009dc6:	f7fb ff6f 	bl	8005ca8 <half_sectionD>
					break;
 8009dca:	e0d6      	b.n	8009f7a <v_test+0x44a>
				case 10:
					//----V左45----
					printf("V 45 left .\n");
 8009dcc:	481d      	ldr	r0, [pc, #116]	; (8009e44 <v_test+0x314>)
 8009dce:	f008 fd1f 	bl	8012810 <puts>
					half_sectionA();
 8009dd2:	f7fb ff03 	bl	8005bdc <half_sectionA>
					for(int i = 0; i < 8; i++){
 8009dd6:	2300      	movs	r3, #0
 8009dd8:	627b      	str	r3, [r7, #36]	; 0x24
 8009dda:	e004      	b.n	8009de6 <v_test+0x2b6>
						v_L45();
 8009ddc:	f7fd febc 	bl	8007b58 <v_L45>
					for(int i = 0; i < 8; i++){
 8009de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009de2:	3301      	adds	r3, #1
 8009de4:	627b      	str	r3, [r7, #36]	; 0x24
 8009de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009de8:	2b07      	cmp	r3, #7
 8009dea:	ddf7      	ble.n	8009ddc <v_test+0x2ac>
					}
					half_sectionD();
 8009dec:	f7fb ff5c 	bl	8005ca8 <half_sectionD>
					break;
 8009df0:	e0c3      	b.n	8009f7a <v_test+0x44a>
				case 11:
					//----V右90----
					printf("V 90 right .\n");
 8009df2:	4815      	ldr	r0, [pc, #84]	; (8009e48 <v_test+0x318>)
 8009df4:	f008 fd0c 	bl	8012810 <puts>
					half_sectionVA();
 8009df8:	f7fb ffb6 	bl	8005d68 <half_sectionVA>
//					v_R45();
					for(int i = 0; i < 8; i++){
 8009dfc:	2300      	movs	r3, #0
 8009dfe:	623b      	str	r3, [r7, #32]
 8009e00:	e004      	b.n	8009e0c <v_test+0x2dc>
						v_R90();
 8009e02:	f7fe fb2d 	bl	8008460 <v_R90>
					for(int i = 0; i < 8; i++){
 8009e06:	6a3b      	ldr	r3, [r7, #32]
 8009e08:	3301      	adds	r3, #1
 8009e0a:	623b      	str	r3, [r7, #32]
 8009e0c:	6a3b      	ldr	r3, [r7, #32]
 8009e0e:	2b07      	cmp	r3, #7
 8009e10:	ddf7      	ble.n	8009e02 <v_test+0x2d2>
					}
//					v_R45();
					half_sectionVD();
 8009e12:	f7fc f805 	bl	8005e20 <half_sectionVD>
					break;
 8009e16:	e0b0      	b.n	8009f7a <v_test+0x44a>
				case 12:
					//----V左90----
					printf("V 90 left .\n");
 8009e18:	480c      	ldr	r0, [pc, #48]	; (8009e4c <v_test+0x31c>)
 8009e1a:	f008 fcf9 	bl	8012810 <puts>
					half_sectionVA();
 8009e1e:	f7fb ffa3 	bl	8005d68 <half_sectionVA>
//					v_L45();
					for(int i = 0; i < 8; i++){
 8009e22:	2300      	movs	r3, #0
 8009e24:	61fb      	str	r3, [r7, #28]
 8009e26:	e01c      	b.n	8009e62 <v_test+0x332>
 8009e28:	08013ab8 	.word	0x08013ab8
 8009e2c:	20000aec 	.word	0x20000aec
 8009e30:	08013964 	.word	0x08013964
 8009e34:	40020000 	.word	0x40020000
 8009e38:	20000f68 	.word	0x20000f68
 8009e3c:	20000f64 	.word	0x20000f64
 8009e40:	08013ad0 	.word	0x08013ad0
 8009e44:	08013ae0 	.word	0x08013ae0
 8009e48:	08013aec 	.word	0x08013aec
 8009e4c:	08013afc 	.word	0x08013afc
 8009e50:	08013b08 	.word	0x08013b08
 8009e54:	08013b18 	.word	0x08013b18
						v_L90();
 8009e58:	f7fe fbd2 	bl	8008600 <v_L90>
					for(int i = 0; i < 8; i++){
 8009e5c:	69fb      	ldr	r3, [r7, #28]
 8009e5e:	3301      	adds	r3, #1
 8009e60:	61fb      	str	r3, [r7, #28]
 8009e62:	69fb      	ldr	r3, [r7, #28]
 8009e64:	2b07      	cmp	r3, #7
 8009e66:	ddf7      	ble.n	8009e58 <v_test+0x328>
					}
//					v_L45();
					half_sectionVD();
 8009e68:	f7fb ffda 	bl	8005e20 <half_sectionVD>
					break;
 8009e6c:	e085      	b.n	8009f7a <v_test+0x44a>
				case 13:
					//----V右135----
					printf("V 135 right .\n");
 8009e6e:	4845      	ldr	r0, [pc, #276]	; (8009f84 <v_test+0x454>)
 8009e70:	f008 fcce 	bl	8012810 <puts>
					half_sectionA();
 8009e74:	f7fb feb2 	bl	8005bdc <half_sectionA>
//					v_R45();
					for(int i = 0; i < 4; i++){
 8009e78:	2300      	movs	r3, #0
 8009e7a:	61bb      	str	r3, [r7, #24]
 8009e7c:	e004      	b.n	8009e88 <v_test+0x358>
						v_R135();
 8009e7e:	f7fe fc87 	bl	8008790 <v_R135>
					for(int i = 0; i < 4; i++){
 8009e82:	69bb      	ldr	r3, [r7, #24]
 8009e84:	3301      	adds	r3, #1
 8009e86:	61bb      	str	r3, [r7, #24]
 8009e88:	69bb      	ldr	r3, [r7, #24]
 8009e8a:	2b03      	cmp	r3, #3
 8009e8c:	ddf7      	ble.n	8009e7e <v_test+0x34e>
					}
//					v_R45();
					half_sectionD();
 8009e8e:	f7fb ff0b 	bl	8005ca8 <half_sectionD>
					break;
 8009e92:	e072      	b.n	8009f7a <v_test+0x44a>
				case 14:
					//----V左135----
					printf("V 135 left .\n");
 8009e94:	483c      	ldr	r0, [pc, #240]	; (8009f88 <v_test+0x458>)
 8009e96:	f008 fcbb 	bl	8012810 <puts>
					half_sectionA();
 8009e9a:	f7fb fe9f 	bl	8005bdc <half_sectionA>
//					v_L45();
					for(int i = 0; i < 4; i++){
 8009e9e:	2300      	movs	r3, #0
 8009ea0:	617b      	str	r3, [r7, #20]
 8009ea2:	e004      	b.n	8009eae <v_test+0x37e>
						v_L135();
 8009ea4:	f7fe fe5e 	bl	8008b64 <v_L135>
					for(int i = 0; i < 4; i++){
 8009ea8:	697b      	ldr	r3, [r7, #20]
 8009eaa:	3301      	adds	r3, #1
 8009eac:	617b      	str	r3, [r7, #20]
 8009eae:	697b      	ldr	r3, [r7, #20]
 8009eb0:	2b03      	cmp	r3, #3
 8009eb2:	ddf7      	ble.n	8009ea4 <v_test+0x374>
					}
//					v_L45();
					half_sectionD();
 8009eb4:	f7fb fef8 	bl	8005ca8 <half_sectionD>
					break;
 8009eb8:	e05f      	b.n	8009f7a <v_test+0x44a>
					break;
				case 16:
					break;
				case 17:
					//----V右45D----
					printf("V 45 right .\n");
 8009eba:	4834      	ldr	r0, [pc, #208]	; (8009f8c <v_test+0x45c>)
 8009ebc:	f008 fca8 	bl	8012810 <puts>
					MF2.FLAG.V = 1;
 8009ec0:	4a33      	ldr	r2, [pc, #204]	; (8009f90 <v_test+0x460>)
 8009ec2:	8813      	ldrh	r3, [r2, #0]
 8009ec4:	f043 0308 	orr.w	r3, r3, #8
 8009ec8:	8013      	strh	r3, [r2, #0]
					half_sectionVA();
 8009eca:	f7fb ff4d 	bl	8005d68 <half_sectionVA>
					for(int i = 0; i < 1; i++){
 8009ece:	2300      	movs	r3, #0
 8009ed0:	613b      	str	r3, [r7, #16]
 8009ed2:	e004      	b.n	8009ede <v_test+0x3ae>
//						v_R45D();
						v_R45();
 8009ed4:	f7fd fc5a 	bl	800778c <v_R45>
					for(int i = 0; i < 1; i++){
 8009ed8:	693b      	ldr	r3, [r7, #16]
 8009eda:	3301      	adds	r3, #1
 8009edc:	613b      	str	r3, [r7, #16]
 8009ede:	693b      	ldr	r3, [r7, #16]
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	ddf7      	ble.n	8009ed4 <v_test+0x3a4>
					}
					half_sectionD();
 8009ee4:	f7fb fee0 	bl	8005ca8 <half_sectionD>
					break;
 8009ee8:	e047      	b.n	8009f7a <v_test+0x44a>
				case 18:
					//----V左45D----
					printf("V 45 left .\n");
 8009eea:	482a      	ldr	r0, [pc, #168]	; (8009f94 <v_test+0x464>)
 8009eec:	f008 fc90 	bl	8012810 <puts>
					MF2.FLAG.V = 1;
 8009ef0:	4a27      	ldr	r2, [pc, #156]	; (8009f90 <v_test+0x460>)
 8009ef2:	8813      	ldrh	r3, [r2, #0]
 8009ef4:	f043 0308 	orr.w	r3, r3, #8
 8009ef8:	8013      	strh	r3, [r2, #0]
					half_sectionVA();
 8009efa:	f7fb ff35 	bl	8005d68 <half_sectionVA>
					for(int i = 0; i < 1; i++){
 8009efe:	2300      	movs	r3, #0
 8009f00:	60fb      	str	r3, [r7, #12]
 8009f02:	e004      	b.n	8009f0e <v_test+0x3de>
//						v_L45D();
						v_L45();
 8009f04:	f7fd fe28 	bl	8007b58 <v_L45>
					for(int i = 0; i < 1; i++){
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	3301      	adds	r3, #1
 8009f0c:	60fb      	str	r3, [r7, #12]
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	ddf7      	ble.n	8009f04 <v_test+0x3d4>
					}
					half_sectionD();
 8009f14:	f7fb fec8 	bl	8005ca8 <half_sectionD>
					break;
 8009f18:	e02f      	b.n	8009f7a <v_test+0x44a>
				case 19:
					//----V右135D----
					printf("V 135 right .\n");
 8009f1a:	481a      	ldr	r0, [pc, #104]	; (8009f84 <v_test+0x454>)
 8009f1c:	f008 fc78 	bl	8012810 <puts>
					MF2.FLAG.V = 1;
 8009f20:	4a1b      	ldr	r2, [pc, #108]	; (8009f90 <v_test+0x460>)
 8009f22:	8813      	ldrh	r3, [r2, #0]
 8009f24:	f043 0308 	orr.w	r3, r3, #8
 8009f28:	8013      	strh	r3, [r2, #0]
					half_sectionVA();
 8009f2a:	f7fb ff1d 	bl	8005d68 <half_sectionVA>
					for(int i = 0; i < 1; i++){
 8009f2e:	2300      	movs	r3, #0
 8009f30:	60bb      	str	r3, [r7, #8]
 8009f32:	e004      	b.n	8009f3e <v_test+0x40e>
//						v_R135D();
						v_R135();
 8009f34:	f7fe fc2c 	bl	8008790 <v_R135>
					for(int i = 0; i < 1; i++){
 8009f38:	68bb      	ldr	r3, [r7, #8]
 8009f3a:	3301      	adds	r3, #1
 8009f3c:	60bb      	str	r3, [r7, #8]
 8009f3e:	68bb      	ldr	r3, [r7, #8]
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	ddf7      	ble.n	8009f34 <v_test+0x404>
					}
					half_sectionD();
 8009f44:	f7fb feb0 	bl	8005ca8 <half_sectionD>
					break;
 8009f48:	e017      	b.n	8009f7a <v_test+0x44a>
				case 20:
					//----V左135D----
					printf("V 135 left .\n");
 8009f4a:	480f      	ldr	r0, [pc, #60]	; (8009f88 <v_test+0x458>)
 8009f4c:	f008 fc60 	bl	8012810 <puts>
					MF2.FLAG.V = 1;
 8009f50:	4a0f      	ldr	r2, [pc, #60]	; (8009f90 <v_test+0x460>)
 8009f52:	8813      	ldrh	r3, [r2, #0]
 8009f54:	f043 0308 	orr.w	r3, r3, #8
 8009f58:	8013      	strh	r3, [r2, #0]
					half_sectionVA();
 8009f5a:	f7fb ff05 	bl	8005d68 <half_sectionVA>
					for(int i = 0; i < 1; i++){
 8009f5e:	2300      	movs	r3, #0
 8009f60:	607b      	str	r3, [r7, #4]
 8009f62:	e004      	b.n	8009f6e <v_test+0x43e>
//						v_L135D();
						v_L135();
 8009f64:	f7fe fdfe 	bl	8008b64 <v_L135>
					for(int i = 0; i < 1; i++){
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	3301      	adds	r3, #1
 8009f6c:	607b      	str	r3, [r7, #4]
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	ddf7      	ble.n	8009f64 <v_test+0x434>
					}
					half_sectionD();
 8009f74:	f7fb fe98 	bl	8005ca8 <half_sectionD>
					break;
 8009f78:	bf00      	nop
			}
		full_led_write(RED);
 8009f7a:	2001      	movs	r0, #1
 8009f7c:	f007 fe40 	bl	8011c00 <full_led_write>
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 8009f80:	e5e1      	b.n	8009b46 <v_test+0x16>
 8009f82:	bf00      	nop
 8009f84:	08013b08 	.word	0x08013b08
 8009f88:	08013b18 	.word	0x08013b18
 8009f8c:	08013ad0 	.word	0x08013ad0
 8009f90:	20000f64 	.word	0x20000f64
 8009f94:	08013ae0 	.word	0x08013ae0

08009f98 <pass_test>:
//pass_test
// pass圧縮走行テスト
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void pass_test(void){
 8009f98:	b580      	push	{r7, lr}
 8009f9a:	b082      	sub	sp, #8
 8009f9c:	af00      	add	r7, sp, #0

	int mode = 0;
 8009f9e:	2300      	movs	r3, #0
 8009fa0:	607b      	str	r3, [r7, #4]
	printf("Test pass Run, Mode : %d\n", mode);
 8009fa2:	6879      	ldr	r1, [r7, #4]
 8009fa4:	48a2      	ldr	r0, [pc, #648]	; (800a230 <pass_test+0x298>)
 8009fa6:	f008 fbbf 	bl	8012728 <iprintf>

	while(1){
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	b2db      	uxtb	r3, r3
 8009fae:	f003 0301 	and.w	r3, r3, #1
 8009fb2:	b2d8      	uxtb	r0, r3
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	b2db      	uxtb	r3, r3
 8009fb8:	f003 0302 	and.w	r3, r3, #2
 8009fbc:	b2d9      	uxtb	r1, r3
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	b2db      	uxtb	r3, r3
 8009fc2:	f003 0304 	and.w	r3, r3, #4
 8009fc6:	b2db      	uxtb	r3, r3
 8009fc8:	461a      	mov	r2, r3
 8009fca:	f007 fddf 	bl	8011b8c <led_write>
		  if(dist_r >= 20){
 8009fce:	4b99      	ldr	r3, [pc, #612]	; (800a234 <pass_test+0x29c>)
 8009fd0:	edd3 7a00 	vldr	s15, [r3]
 8009fd4:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8009fd8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009fdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009fe0:	db0f      	blt.n	800a002 <pass_test+0x6a>
			  mode++;
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	3301      	adds	r3, #1
 8009fe6:	607b      	str	r3, [r7, #4]
			  dist_r = 0;
 8009fe8:	4b92      	ldr	r3, [pc, #584]	; (800a234 <pass_test+0x29c>)
 8009fea:	f04f 0200 	mov.w	r2, #0
 8009fee:	601a      	str	r2, [r3, #0]
			  if(mode > 7){
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	2b07      	cmp	r3, #7
 8009ff4:	dd01      	ble.n	8009ffa <pass_test+0x62>
				  mode = 0;
 8009ff6:	2300      	movs	r3, #0
 8009ff8:	607b      	str	r3, [r7, #4]
			  }
			  printf("Mode : %d\n", mode);
 8009ffa:	6879      	ldr	r1, [r7, #4]
 8009ffc:	488e      	ldr	r0, [pc, #568]	; (800a238 <pass_test+0x2a0>)
 8009ffe:	f008 fb93 	bl	8012728 <iprintf>
		  }
		  if(dist_r <= -20){
 800a002:	4b8c      	ldr	r3, [pc, #560]	; (800a234 <pass_test+0x29c>)
 800a004:	edd3 7a00 	vldr	s15, [r3]
 800a008:	eebb 7a04 	vmov.f32	s14, #180	; 0xc1a00000 -20.0
 800a00c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a010:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a014:	d80f      	bhi.n	800a036 <pass_test+0x9e>
			  mode--;
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	3b01      	subs	r3, #1
 800a01a:	607b      	str	r3, [r7, #4]
			  dist_r = 0;
 800a01c:	4b85      	ldr	r3, [pc, #532]	; (800a234 <pass_test+0x29c>)
 800a01e:	f04f 0200 	mov.w	r2, #0
 800a022:	601a      	str	r2, [r3, #0]
			  if(mode < 0){
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	2b00      	cmp	r3, #0
 800a028:	da01      	bge.n	800a02e <pass_test+0x96>
				  mode = 7;
 800a02a:	2307      	movs	r3, #7
 800a02c:	607b      	str	r3, [r7, #4]
			  }
			  printf("Mode : %d\n", mode);
 800a02e:	6879      	ldr	r1, [r7, #4]
 800a030:	4881      	ldr	r0, [pc, #516]	; (800a238 <pass_test+0x2a0>)
 800a032:	f008 fb79 	bl	8012728 <iprintf>
		  }
		  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET){
 800a036:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800a03a:	4880      	ldr	r0, [pc, #512]	; (800a23c <pass_test+0x2a4>)
 800a03c:	f7f8 f94a 	bl	80022d4 <HAL_GPIO_ReadPin>
 800a040:	4603      	mov	r3, r0
 800a042:	2b00      	cmp	r3, #0
 800a044:	d1b1      	bne.n	8009faa <pass_test+0x12>
			  HAL_Delay(50);
 800a046:	2032      	movs	r0, #50	; 0x32
 800a048:	f7f6 ffe8 	bl	800101c <HAL_Delay>
			  while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET);
 800a04c:	bf00      	nop
 800a04e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800a052:	487a      	ldr	r0, [pc, #488]	; (800a23c <pass_test+0x2a4>)
 800a054:	f7f8 f93e 	bl	80022d4 <HAL_GPIO_ReadPin>
 800a058:	4603      	mov	r3, r0
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	d0f7      	beq.n	800a04e <pass_test+0xb6>
			  drive_ready();
 800a05e:	f7fa fe0f 	bl	8004c80 <drive_ready>
			  MF2.FLAG.V = 0;
 800a062:	4a77      	ldr	r2, [pc, #476]	; (800a240 <pass_test+0x2a8>)
 800a064:	8813      	ldrh	r3, [r2, #0]
 800a066:	f36f 03c3 	bfc	r3, #3, #1
 800a06a:	8013      	strh	r3, [r2, #0]

			  switch(mode){
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	2b07      	cmp	r3, #7
 800a070:	d89b      	bhi.n	8009faa <pass_test+0x12>
 800a072:	a201      	add	r2, pc, #4	; (adr r2, 800a078 <pass_test+0xe0>)
 800a074:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a078:	0800a099 	.word	0x0800a099
 800a07c:	0800a121 	.word	0x0800a121
 800a080:	0800a1a9 	.word	0x0800a1a9
 800a084:	0800a271 	.word	0x0800a271
 800a088:	0800a2f9 	.word	0x0800a2f9
 800a08c:	0800a381 	.word	0x0800a381
 800a090:	08009fab 	.word	0x08009fab
 800a094:	0800a409 	.word	0x0800a409
				case 0:
					//----a一次探索スラローム走行----
					printf("First Run. (Slalom)\n");
 800a098:	486a      	ldr	r0, [pc, #424]	; (800a244 <pass_test+0x2ac>)
 800a09a:	f008 fbb9 	bl	8012810 <puts>

					MF.FLAG.SCND = 0;
 800a09e:	4a6a      	ldr	r2, [pc, #424]	; (800a248 <pass_test+0x2b0>)
 800a0a0:	8813      	ldrh	r3, [r2, #0]
 800a0a2:	f36f 1345 	bfc	r3, #5, #1
 800a0a6:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800a0a8:	4a67      	ldr	r2, [pc, #412]	; (800a248 <pass_test+0x2b0>)
 800a0aa:	8813      	ldrh	r3, [r2, #0]
 800a0ac:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a0b0:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 0;
 800a0b2:	4a65      	ldr	r2, [pc, #404]	; (800a248 <pass_test+0x2b0>)
 800a0b4:	8813      	ldrh	r3, [r2, #0]
 800a0b6:	f36f 238a 	bfc	r3, #10, #1
 800a0ba:	8013      	strh	r3, [r2, #0]
					run_mode = MIDDLE;
 800a0bc:	4b63      	ldr	r3, [pc, #396]	; (800a24c <pass_test+0x2b4>)
 800a0be:	2202      	movs	r2, #2
 800a0c0:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800a0c2:	4b63      	ldr	r3, [pc, #396]	; (800a250 <pass_test+0x2b8>)
 800a0c4:	2200      	movs	r2, #0
 800a0c6:	701a      	strb	r2, [r3, #0]
					goal_mode = 2;
 800a0c8:	4b62      	ldr	r3, [pc, #392]	; (800a254 <pass_test+0x2bc>)
 800a0ca:	2202      	movs	r2, #2
 800a0cc:	701a      	strb	r2, [r3, #0]
					accel_hs = 4000;
 800a0ce:	4b62      	ldr	r3, [pc, #392]	; (800a258 <pass_test+0x2c0>)
 800a0d0:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 800a0d4:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1000;
 800a0d6:	4b61      	ldr	r3, [pc, #388]	; (800a25c <pass_test+0x2c4>)
 800a0d8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800a0dc:	801a      	strh	r2, [r3, #0]
					start_mode = 0;
 800a0de:	4b5c      	ldr	r3, [pc, #368]	; (800a250 <pass_test+0x2b8>)
 800a0e0:	2200      	movs	r2, #0
 800a0e2:	701a      	strb	r2, [r3, #0]
					goal_x = GOAL_X;
 800a0e4:	4b5e      	ldr	r3, [pc, #376]	; (800a260 <pass_test+0x2c8>)
 800a0e6:	2207      	movs	r2, #7
 800a0e8:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800a0ea:	4b5e      	ldr	r3, [pc, #376]	; (800a264 <pass_test+0x2cc>)
 800a0ec:	2207      	movs	r2, #7
 800a0ee:	701a      	strb	r2, [r3, #0]

					get_base();
 800a0f0:	f007 fcf4 	bl	8011adc <get_base>

					searchC();
 800a0f4:	f004 fd1c 	bl	800eb30 <searchC>
					HAL_Delay(2000);
 800a0f8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800a0fc:	f7f6 ff8e 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800a100:	4b58      	ldr	r3, [pc, #352]	; (800a264 <pass_test+0x2cc>)
 800a102:	2200      	movs	r2, #0
 800a104:	701a      	strb	r2, [r3, #0]
 800a106:	4b57      	ldr	r3, [pc, #348]	; (800a264 <pass_test+0x2cc>)
 800a108:	781a      	ldrb	r2, [r3, #0]
 800a10a:	4b55      	ldr	r3, [pc, #340]	; (800a260 <pass_test+0x2c8>)
 800a10c:	701a      	strb	r2, [r3, #0]
					searchC();
 800a10e:	f004 fd0f 	bl	800eb30 <searchC>

					goal_x = GOAL_X;
 800a112:	4b53      	ldr	r3, [pc, #332]	; (800a260 <pass_test+0x2c8>)
 800a114:	2207      	movs	r2, #7
 800a116:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800a118:	4b52      	ldr	r3, [pc, #328]	; (800a264 <pass_test+0x2cc>)
 800a11a:	2207      	movs	r2, #7
 800a11c:	701a      	strb	r2, [r3, #0]
					break;
 800a11e:	e1b7      	b.n	800a490 <pass_test+0x4f8>
				case 1:
					//----a直線と大回り圧縮(adv_posを停止)+半区画ベース Middle Speed----
					printf("pass press 3-2.\n");
 800a120:	4851      	ldr	r0, [pc, #324]	; (800a268 <pass_test+0x2d0>)
 800a122:	f008 fb75 	bl	8012810 <puts>
					MF.FLAG.SCND = 1;
 800a126:	4a48      	ldr	r2, [pc, #288]	; (800a248 <pass_test+0x2b0>)
 800a128:	8813      	ldrh	r3, [r2, #0]
 800a12a:	f043 0320 	orr.w	r3, r3, #32
 800a12e:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800a130:	4a45      	ldr	r2, [pc, #276]	; (800a248 <pass_test+0x2b0>)
 800a132:	8813      	ldrh	r3, [r2, #0]
 800a134:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a138:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800a13a:	4a43      	ldr	r2, [pc, #268]	; (800a248 <pass_test+0x2b0>)
 800a13c:	8813      	ldrh	r3, [r2, #0]
 800a13e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800a142:	8013      	strh	r3, [r2, #0]
					run_mode = MIDDLE;
 800a144:	4b41      	ldr	r3, [pc, #260]	; (800a24c <pass_test+0x2b4>)
 800a146:	2202      	movs	r2, #2
 800a148:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800a14a:	4b41      	ldr	r3, [pc, #260]	; (800a250 <pass_test+0x2b8>)
 800a14c:	2200      	movs	r2, #0
 800a14e:	701a      	strb	r2, [r3, #0]
					goal_mode = 2;
 800a150:	4b40      	ldr	r3, [pc, #256]	; (800a254 <pass_test+0x2bc>)
 800a152:	2202      	movs	r2, #2
 800a154:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 800a156:	4b40      	ldr	r3, [pc, #256]	; (800a258 <pass_test+0x2c0>)
 800a158:	f241 3288 	movw	r2, #5000	; 0x1388
 800a15c:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1200;
 800a15e:	4b3f      	ldr	r3, [pc, #252]	; (800a25c <pass_test+0x2c4>)
 800a160:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 800a164:	801a      	strh	r2, [r3, #0]

					pass_mode = 3;						//a半区画ベースでroute配列生成
 800a166:	4b41      	ldr	r3, [pc, #260]	; (800a26c <pass_test+0x2d4>)
 800a168:	2203      	movs	r2, #3
 800a16a:	701a      	strb	r2, [r3, #0]

					goal_x = GOAL_X;
 800a16c:	4b3c      	ldr	r3, [pc, #240]	; (800a260 <pass_test+0x2c8>)
 800a16e:	2207      	movs	r2, #7
 800a170:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800a172:	4b3c      	ldr	r3, [pc, #240]	; (800a264 <pass_test+0x2cc>)
 800a174:	2207      	movs	r2, #7
 800a176:	701a      	strb	r2, [r3, #0]

					get_base();
 800a178:	f007 fcb0 	bl	8011adc <get_base>

					searchF3();
 800a17c:	f005 f952 	bl	800f424 <searchF3>
					HAL_Delay(2000);
 800a180:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800a184:	f7f6 ff4a 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800a188:	4b36      	ldr	r3, [pc, #216]	; (800a264 <pass_test+0x2cc>)
 800a18a:	2200      	movs	r2, #0
 800a18c:	701a      	strb	r2, [r3, #0]
 800a18e:	4b35      	ldr	r3, [pc, #212]	; (800a264 <pass_test+0x2cc>)
 800a190:	781a      	ldrb	r2, [r3, #0]
 800a192:	4b33      	ldr	r3, [pc, #204]	; (800a260 <pass_test+0x2c8>)
 800a194:	701a      	strb	r2, [r3, #0]
					searchF3();
 800a196:	f005 f945 	bl	800f424 <searchF3>

					goal_x = GOAL_X;
 800a19a:	4b31      	ldr	r3, [pc, #196]	; (800a260 <pass_test+0x2c8>)
 800a19c:	2207      	movs	r2, #7
 800a19e:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800a1a0:	4b30      	ldr	r3, [pc, #192]	; (800a264 <pass_test+0x2cc>)
 800a1a2:	2207      	movs	r2, #7
 800a1a4:	701a      	strb	r2, [r3, #0]
					break;
 800a1a6:	e173      	b.n	800a490 <pass_test+0x4f8>
				case 2:
					//----a直線と大回り圧縮(adv_posを停止)+半区画ベース High Speed----
					printf("pass press 3-2.\n");
 800a1a8:	482f      	ldr	r0, [pc, #188]	; (800a268 <pass_test+0x2d0>)
 800a1aa:	f008 fb31 	bl	8012810 <puts>
					MF.FLAG.SCND = 1;
 800a1ae:	4a26      	ldr	r2, [pc, #152]	; (800a248 <pass_test+0x2b0>)
 800a1b0:	8813      	ldrh	r3, [r2, #0]
 800a1b2:	f043 0320 	orr.w	r3, r3, #32
 800a1b6:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800a1b8:	4a23      	ldr	r2, [pc, #140]	; (800a248 <pass_test+0x2b0>)
 800a1ba:	8813      	ldrh	r3, [r2, #0]
 800a1bc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a1c0:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800a1c2:	4a21      	ldr	r2, [pc, #132]	; (800a248 <pass_test+0x2b0>)
 800a1c4:	8813      	ldrh	r3, [r2, #0]
 800a1c6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800a1ca:	8013      	strh	r3, [r2, #0]
					run_mode = HIGH;
 800a1cc:	4b1f      	ldr	r3, [pc, #124]	; (800a24c <pass_test+0x2b4>)
 800a1ce:	2203      	movs	r2, #3
 800a1d0:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800a1d2:	4b1f      	ldr	r3, [pc, #124]	; (800a250 <pass_test+0x2b8>)
 800a1d4:	2200      	movs	r2, #0
 800a1d6:	701a      	strb	r2, [r3, #0]
					goal_mode = 2;
 800a1d8:	4b1e      	ldr	r3, [pc, #120]	; (800a254 <pass_test+0x2bc>)
 800a1da:	2202      	movs	r2, #2
 800a1dc:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 800a1de:	4b1e      	ldr	r3, [pc, #120]	; (800a258 <pass_test+0x2c0>)
 800a1e0:	f241 3288 	movw	r2, #5000	; 0x1388
 800a1e4:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1600;
 800a1e6:	4b1d      	ldr	r3, [pc, #116]	; (800a25c <pass_test+0x2c4>)
 800a1e8:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800a1ec:	801a      	strh	r2, [r3, #0]

					pass_mode = 3;						//a半区画ベースでroute配列生成
 800a1ee:	4b1f      	ldr	r3, [pc, #124]	; (800a26c <pass_test+0x2d4>)
 800a1f0:	2203      	movs	r2, #3
 800a1f2:	701a      	strb	r2, [r3, #0]

					goal_x = GOAL_X;
 800a1f4:	4b1a      	ldr	r3, [pc, #104]	; (800a260 <pass_test+0x2c8>)
 800a1f6:	2207      	movs	r2, #7
 800a1f8:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800a1fa:	4b1a      	ldr	r3, [pc, #104]	; (800a264 <pass_test+0x2cc>)
 800a1fc:	2207      	movs	r2, #7
 800a1fe:	701a      	strb	r2, [r3, #0]

					get_base();
 800a200:	f007 fc6c 	bl	8011adc <get_base>

					searchF3();
 800a204:	f005 f90e 	bl	800f424 <searchF3>
					HAL_Delay(2000);
 800a208:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800a20c:	f7f6 ff06 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800a210:	4b14      	ldr	r3, [pc, #80]	; (800a264 <pass_test+0x2cc>)
 800a212:	2200      	movs	r2, #0
 800a214:	701a      	strb	r2, [r3, #0]
 800a216:	4b13      	ldr	r3, [pc, #76]	; (800a264 <pass_test+0x2cc>)
 800a218:	781a      	ldrb	r2, [r3, #0]
 800a21a:	4b11      	ldr	r3, [pc, #68]	; (800a260 <pass_test+0x2c8>)
 800a21c:	701a      	strb	r2, [r3, #0]
					searchF3();
 800a21e:	f005 f901 	bl	800f424 <searchF3>

					goal_x = GOAL_X;
 800a222:	4b0f      	ldr	r3, [pc, #60]	; (800a260 <pass_test+0x2c8>)
 800a224:	2207      	movs	r2, #7
 800a226:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800a228:	4b0e      	ldr	r3, [pc, #56]	; (800a264 <pass_test+0x2cc>)
 800a22a:	2207      	movs	r2, #7
 800a22c:	701a      	strb	r2, [r3, #0]
					break;
 800a22e:	e12f      	b.n	800a490 <pass_test+0x4f8>
 800a230:	08013b28 	.word	0x08013b28
 800a234:	20000aec 	.word	0x20000aec
 800a238:	08013964 	.word	0x08013964
 800a23c:	40020000 	.word	0x40020000
 800a240:	20000f64 	.word	0x20000f64
 800a244:	08013b44 	.word	0x08013b44
 800a248:	20000f68 	.word	0x20000f68
 800a24c:	20000456 	.word	0x20000456
 800a250:	200015c8 	.word	0x200015c8
 800a254:	20000bb1 	.word	0x20000bb1
 800a258:	20000454 	.word	0x20000454
 800a25c:	20000f7c 	.word	0x20000f7c
 800a260:	20000bb0 	.word	0x20000bb0
 800a264:	20000b4c 	.word	0x20000b4c
 800a268:	08013b58 	.word	0x08013b58
 800a26c:	20000457 	.word	0x20000457
				case 3:
					//----a直線と大回り圧縮(adv_posを停止)+半区画ベース High High Speed----
					printf("pass press 3-2.\n");
 800a270:	4888      	ldr	r0, [pc, #544]	; (800a494 <pass_test+0x4fc>)
 800a272:	f008 facd 	bl	8012810 <puts>
					MF.FLAG.SCND = 1;
 800a276:	4a88      	ldr	r2, [pc, #544]	; (800a498 <pass_test+0x500>)
 800a278:	8813      	ldrh	r3, [r2, #0]
 800a27a:	f043 0320 	orr.w	r3, r3, #32
 800a27e:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800a280:	4a85      	ldr	r2, [pc, #532]	; (800a498 <pass_test+0x500>)
 800a282:	8813      	ldrh	r3, [r2, #0]
 800a284:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a288:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800a28a:	4a83      	ldr	r2, [pc, #524]	; (800a498 <pass_test+0x500>)
 800a28c:	8813      	ldrh	r3, [r2, #0]
 800a28e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800a292:	8013      	strh	r3, [r2, #0]
					run_mode = HIGH_HIGH;
 800a294:	4b81      	ldr	r3, [pc, #516]	; (800a49c <pass_test+0x504>)
 800a296:	2204      	movs	r2, #4
 800a298:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800a29a:	4b81      	ldr	r3, [pc, #516]	; (800a4a0 <pass_test+0x508>)
 800a29c:	2200      	movs	r2, #0
 800a29e:	701a      	strb	r2, [r3, #0]
					goal_mode = 2;
 800a2a0:	4b80      	ldr	r3, [pc, #512]	; (800a4a4 <pass_test+0x50c>)
 800a2a2:	2202      	movs	r2, #2
 800a2a4:	701a      	strb	r2, [r3, #0]
					accel_hs = 10000;
 800a2a6:	4b80      	ldr	r3, [pc, #512]	; (800a4a8 <pass_test+0x510>)
 800a2a8:	f242 7210 	movw	r2, #10000	; 0x2710
 800a2ac:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 2000;
 800a2ae:	4b7f      	ldr	r3, [pc, #508]	; (800a4ac <pass_test+0x514>)
 800a2b0:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800a2b4:	801a      	strh	r2, [r3, #0]

					pass_mode = 3;						//a半区画ベースでroute配列生成
 800a2b6:	4b7e      	ldr	r3, [pc, #504]	; (800a4b0 <pass_test+0x518>)
 800a2b8:	2203      	movs	r2, #3
 800a2ba:	701a      	strb	r2, [r3, #0]

					goal_x = GOAL_X;
 800a2bc:	4b7d      	ldr	r3, [pc, #500]	; (800a4b4 <pass_test+0x51c>)
 800a2be:	2207      	movs	r2, #7
 800a2c0:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800a2c2:	4b7d      	ldr	r3, [pc, #500]	; (800a4b8 <pass_test+0x520>)
 800a2c4:	2207      	movs	r2, #7
 800a2c6:	701a      	strb	r2, [r3, #0]

					get_base();
 800a2c8:	f007 fc08 	bl	8011adc <get_base>

					searchF3();
 800a2cc:	f005 f8aa 	bl	800f424 <searchF3>
					HAL_Delay(2000);
 800a2d0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800a2d4:	f7f6 fea2 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800a2d8:	4b77      	ldr	r3, [pc, #476]	; (800a4b8 <pass_test+0x520>)
 800a2da:	2200      	movs	r2, #0
 800a2dc:	701a      	strb	r2, [r3, #0]
 800a2de:	4b76      	ldr	r3, [pc, #472]	; (800a4b8 <pass_test+0x520>)
 800a2e0:	781a      	ldrb	r2, [r3, #0]
 800a2e2:	4b74      	ldr	r3, [pc, #464]	; (800a4b4 <pass_test+0x51c>)
 800a2e4:	701a      	strb	r2, [r3, #0]
					searchF3();
 800a2e6:	f005 f89d 	bl	800f424 <searchF3>

					goal_x = GOAL_X;
 800a2ea:	4b72      	ldr	r3, [pc, #456]	; (800a4b4 <pass_test+0x51c>)
 800a2ec:	2207      	movs	r2, #7
 800a2ee:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800a2f0:	4b71      	ldr	r3, [pc, #452]	; (800a4b8 <pass_test+0x520>)
 800a2f2:	2207      	movs	r2, #7
 800a2f4:	701a      	strb	r2, [r3, #0]
					break;
 800a2f6:	e0cb      	b.n	800a490 <pass_test+0x4f8>
				case 4:
					//----a直線と大回り圧縮と斜め Middle Speedｰｰｰｰ
					printf("pass press 4.\n");
 800a2f8:	4870      	ldr	r0, [pc, #448]	; (800a4bc <pass_test+0x524>)
 800a2fa:	f008 fa89 	bl	8012810 <puts>
					MF.FLAG.SCND = 1;
 800a2fe:	4a66      	ldr	r2, [pc, #408]	; (800a498 <pass_test+0x500>)
 800a300:	8813      	ldrh	r3, [r2, #0]
 800a302:	f043 0320 	orr.w	r3, r3, #32
 800a306:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800a308:	4a63      	ldr	r2, [pc, #396]	; (800a498 <pass_test+0x500>)
 800a30a:	8813      	ldrh	r3, [r2, #0]
 800a30c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a310:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800a312:	4a61      	ldr	r2, [pc, #388]	; (800a498 <pass_test+0x500>)
 800a314:	8813      	ldrh	r3, [r2, #0]
 800a316:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800a31a:	8013      	strh	r3, [r2, #0]
					run_mode = MIDDLE;
 800a31c:	4b5f      	ldr	r3, [pc, #380]	; (800a49c <pass_test+0x504>)
 800a31e:	2202      	movs	r2, #2
 800a320:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800a322:	4b5f      	ldr	r3, [pc, #380]	; (800a4a0 <pass_test+0x508>)
 800a324:	2200      	movs	r2, #0
 800a326:	701a      	strb	r2, [r3, #0]
					goal_mode = 2;
 800a328:	4b5e      	ldr	r3, [pc, #376]	; (800a4a4 <pass_test+0x50c>)
 800a32a:	2202      	movs	r2, #2
 800a32c:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 800a32e:	4b5e      	ldr	r3, [pc, #376]	; (800a4a8 <pass_test+0x510>)
 800a330:	f241 3288 	movw	r2, #5000	; 0x1388
 800a334:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1200;
 800a336:	4b5d      	ldr	r3, [pc, #372]	; (800a4ac <pass_test+0x514>)
 800a338:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 800a33c:	801a      	strh	r2, [r3, #0]

					pass_mode = 4;
 800a33e:	4b5c      	ldr	r3, [pc, #368]	; (800a4b0 <pass_test+0x518>)
 800a340:	2204      	movs	r2, #4
 800a342:	701a      	strb	r2, [r3, #0]

					goal_x = GOAL_X;
 800a344:	4b5b      	ldr	r3, [pc, #364]	; (800a4b4 <pass_test+0x51c>)
 800a346:	2207      	movs	r2, #7
 800a348:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800a34a:	4b5b      	ldr	r3, [pc, #364]	; (800a4b8 <pass_test+0x520>)
 800a34c:	2207      	movs	r2, #7
 800a34e:	701a      	strb	r2, [r3, #0]

					get_base();
 800a350:	f007 fbc4 	bl	8011adc <get_base>

					searchF4();
 800a354:	f005 f942 	bl	800f5dc <searchF4>
					HAL_Delay(2000);
 800a358:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800a35c:	f7f6 fe5e 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800a360:	4b55      	ldr	r3, [pc, #340]	; (800a4b8 <pass_test+0x520>)
 800a362:	2200      	movs	r2, #0
 800a364:	701a      	strb	r2, [r3, #0]
 800a366:	4b54      	ldr	r3, [pc, #336]	; (800a4b8 <pass_test+0x520>)
 800a368:	781a      	ldrb	r2, [r3, #0]
 800a36a:	4b52      	ldr	r3, [pc, #328]	; (800a4b4 <pass_test+0x51c>)
 800a36c:	701a      	strb	r2, [r3, #0]
					searchF4();
 800a36e:	f005 f935 	bl	800f5dc <searchF4>

					goal_x = GOAL_X;
 800a372:	4b50      	ldr	r3, [pc, #320]	; (800a4b4 <pass_test+0x51c>)
 800a374:	2207      	movs	r2, #7
 800a376:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800a378:	4b4f      	ldr	r3, [pc, #316]	; (800a4b8 <pass_test+0x520>)
 800a37a:	2207      	movs	r2, #7
 800a37c:	701a      	strb	r2, [r3, #0]
					break;
 800a37e:	e087      	b.n	800a490 <pass_test+0x4f8>
				case 5:
					//----a直線と大回り圧縮と斜め High Speedｰｰｰｰ
					printf("pass press 4.\n");
 800a380:	484e      	ldr	r0, [pc, #312]	; (800a4bc <pass_test+0x524>)
 800a382:	f008 fa45 	bl	8012810 <puts>
					MF.FLAG.SCND = 1;
 800a386:	4a44      	ldr	r2, [pc, #272]	; (800a498 <pass_test+0x500>)
 800a388:	8813      	ldrh	r3, [r2, #0]
 800a38a:	f043 0320 	orr.w	r3, r3, #32
 800a38e:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800a390:	4a41      	ldr	r2, [pc, #260]	; (800a498 <pass_test+0x500>)
 800a392:	8813      	ldrh	r3, [r2, #0]
 800a394:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a398:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800a39a:	4a3f      	ldr	r2, [pc, #252]	; (800a498 <pass_test+0x500>)
 800a39c:	8813      	ldrh	r3, [r2, #0]
 800a39e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800a3a2:	8013      	strh	r3, [r2, #0]
					run_mode = HIGH;
 800a3a4:	4b3d      	ldr	r3, [pc, #244]	; (800a49c <pass_test+0x504>)
 800a3a6:	2203      	movs	r2, #3
 800a3a8:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800a3aa:	4b3d      	ldr	r3, [pc, #244]	; (800a4a0 <pass_test+0x508>)
 800a3ac:	2200      	movs	r2, #0
 800a3ae:	701a      	strb	r2, [r3, #0]
					goal_mode = 2;
 800a3b0:	4b3c      	ldr	r3, [pc, #240]	; (800a4a4 <pass_test+0x50c>)
 800a3b2:	2202      	movs	r2, #2
 800a3b4:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 800a3b6:	4b3c      	ldr	r3, [pc, #240]	; (800a4a8 <pass_test+0x510>)
 800a3b8:	f241 3288 	movw	r2, #5000	; 0x1388
 800a3bc:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1600;
 800a3be:	4b3b      	ldr	r3, [pc, #236]	; (800a4ac <pass_test+0x514>)
 800a3c0:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800a3c4:	801a      	strh	r2, [r3, #0]

					pass_mode = 4;
 800a3c6:	4b3a      	ldr	r3, [pc, #232]	; (800a4b0 <pass_test+0x518>)
 800a3c8:	2204      	movs	r2, #4
 800a3ca:	701a      	strb	r2, [r3, #0]

					goal_x = GOAL_X;
 800a3cc:	4b39      	ldr	r3, [pc, #228]	; (800a4b4 <pass_test+0x51c>)
 800a3ce:	2207      	movs	r2, #7
 800a3d0:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800a3d2:	4b39      	ldr	r3, [pc, #228]	; (800a4b8 <pass_test+0x520>)
 800a3d4:	2207      	movs	r2, #7
 800a3d6:	701a      	strb	r2, [r3, #0]

					get_base();
 800a3d8:	f007 fb80 	bl	8011adc <get_base>

					searchF4();
 800a3dc:	f005 f8fe 	bl	800f5dc <searchF4>
					HAL_Delay(2000);
 800a3e0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800a3e4:	f7f6 fe1a 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800a3e8:	4b33      	ldr	r3, [pc, #204]	; (800a4b8 <pass_test+0x520>)
 800a3ea:	2200      	movs	r2, #0
 800a3ec:	701a      	strb	r2, [r3, #0]
 800a3ee:	4b32      	ldr	r3, [pc, #200]	; (800a4b8 <pass_test+0x520>)
 800a3f0:	781a      	ldrb	r2, [r3, #0]
 800a3f2:	4b30      	ldr	r3, [pc, #192]	; (800a4b4 <pass_test+0x51c>)
 800a3f4:	701a      	strb	r2, [r3, #0]
					searchF4();
 800a3f6:	f005 f8f1 	bl	800f5dc <searchF4>

					goal_x = GOAL_X;
 800a3fa:	4b2e      	ldr	r3, [pc, #184]	; (800a4b4 <pass_test+0x51c>)
 800a3fc:	2207      	movs	r2, #7
 800a3fe:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800a400:	4b2d      	ldr	r3, [pc, #180]	; (800a4b8 <pass_test+0x520>)
 800a402:	2207      	movs	r2, #7
 800a404:	701a      	strb	r2, [r3, #0]
					break;
 800a406:	e043      	b.n	800a490 <pass_test+0x4f8>
				case 7:
					//----a直線と大回り圧縮(adv_posを停止)+半区画ベース High Speed----
					printf("pass press 3-4.\n");
 800a408:	482d      	ldr	r0, [pc, #180]	; (800a4c0 <pass_test+0x528>)
 800a40a:	f008 fa01 	bl	8012810 <puts>
					MF.FLAG.SCND = 1;
 800a40e:	4a22      	ldr	r2, [pc, #136]	; (800a498 <pass_test+0x500>)
 800a410:	8813      	ldrh	r3, [r2, #0]
 800a412:	f043 0320 	orr.w	r3, r3, #32
 800a416:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800a418:	4a1f      	ldr	r2, [pc, #124]	; (800a498 <pass_test+0x500>)
 800a41a:	8813      	ldrh	r3, [r2, #0]
 800a41c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a420:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800a422:	4a1d      	ldr	r2, [pc, #116]	; (800a498 <pass_test+0x500>)
 800a424:	8813      	ldrh	r3, [r2, #0]
 800a426:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800a42a:	8013      	strh	r3, [r2, #0]
					run_mode = 5;
 800a42c:	4b1b      	ldr	r3, [pc, #108]	; (800a49c <pass_test+0x504>)
 800a42e:	2205      	movs	r2, #5
 800a430:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800a432:	4b1b      	ldr	r3, [pc, #108]	; (800a4a0 <pass_test+0x508>)
 800a434:	2200      	movs	r2, #0
 800a436:	701a      	strb	r2, [r3, #0]
					goal_mode = 2;
 800a438:	4b1a      	ldr	r3, [pc, #104]	; (800a4a4 <pass_test+0x50c>)
 800a43a:	2202      	movs	r2, #2
 800a43c:	701a      	strb	r2, [r3, #0]
					accel_hs = 10000;
 800a43e:	4b1a      	ldr	r3, [pc, #104]	; (800a4a8 <pass_test+0x510>)
 800a440:	f242 7210 	movw	r2, #10000	; 0x2710
 800a444:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 2000;
 800a446:	4b19      	ldr	r3, [pc, #100]	; (800a4ac <pass_test+0x514>)
 800a448:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800a44c:	801a      	strh	r2, [r3, #0]

					pass_mode = 3;						//a半区画ベースでroute配列生成
 800a44e:	4b18      	ldr	r3, [pc, #96]	; (800a4b0 <pass_test+0x518>)
 800a450:	2203      	movs	r2, #3
 800a452:	701a      	strb	r2, [r3, #0]

					goal_x = GOAL_X;
 800a454:	4b17      	ldr	r3, [pc, #92]	; (800a4b4 <pass_test+0x51c>)
 800a456:	2207      	movs	r2, #7
 800a458:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800a45a:	4b17      	ldr	r3, [pc, #92]	; (800a4b8 <pass_test+0x520>)
 800a45c:	2207      	movs	r2, #7
 800a45e:	701a      	strb	r2, [r3, #0]

					get_base();
 800a460:	f007 fb3c 	bl	8011adc <get_base>

					searchF3();
 800a464:	f004 ffde 	bl	800f424 <searchF3>
					HAL_Delay(2000);
 800a468:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800a46c:	f7f6 fdd6 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800a470:	4b11      	ldr	r3, [pc, #68]	; (800a4b8 <pass_test+0x520>)
 800a472:	2200      	movs	r2, #0
 800a474:	701a      	strb	r2, [r3, #0]
 800a476:	4b10      	ldr	r3, [pc, #64]	; (800a4b8 <pass_test+0x520>)
 800a478:	781a      	ldrb	r2, [r3, #0]
 800a47a:	4b0e      	ldr	r3, [pc, #56]	; (800a4b4 <pass_test+0x51c>)
 800a47c:	701a      	strb	r2, [r3, #0]
					searchF3();
 800a47e:	f004 ffd1 	bl	800f424 <searchF3>

					goal_x = GOAL_X;
 800a482:	4b0c      	ldr	r3, [pc, #48]	; (800a4b4 <pass_test+0x51c>)
 800a484:	2207      	movs	r2, #7
 800a486:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800a488:	4b0b      	ldr	r3, [pc, #44]	; (800a4b8 <pass_test+0x520>)
 800a48a:	2207      	movs	r2, #7
 800a48c:	701a      	strb	r2, [r3, #0]
					break;
 800a48e:	bf00      	nop
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 800a490:	e58b      	b.n	8009faa <pass_test+0x12>
 800a492:	bf00      	nop
 800a494:	08013b58 	.word	0x08013b58
 800a498:	20000f68 	.word	0x20000f68
 800a49c:	20000456 	.word	0x20000456
 800a4a0:	200015c8 	.word	0x200015c8
 800a4a4:	20000bb1 	.word	0x20000bb1
 800a4a8:	20000454 	.word	0x20000454
 800a4ac:	20000f7c 	.word	0x20000f7c
 800a4b0:	20000457 	.word	0x20000457
 800a4b4:	20000bb0 	.word	0x20000bb0
 800a4b8:	20000b4c 	.word	0x20000b4c
 800a4bc:	08013b68 	.word	0x08013b68
 800a4c0:	08013b78 	.word	0x08013b78

0800a4c4 <goal_test>:
//goal_test
// a複数マスgoal走行テスト
// a引数：なし
// a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void goal_test(void){
 800a4c4:	b580      	push	{r7, lr}
 800a4c6:	b082      	sub	sp, #8
 800a4c8:	af00      	add	r7, sp, #0

	int mode = 0;
 800a4ca:	2300      	movs	r3, #0
 800a4cc:	607b      	str	r3, [r7, #4]
	printf("Test goal Run, Mode : %d\n", mode);
 800a4ce:	6879      	ldr	r1, [r7, #4]
 800a4d0:	48aa      	ldr	r0, [pc, #680]	; (800a77c <goal_test+0x2b8>)
 800a4d2:	f008 f929 	bl	8012728 <iprintf>

	while(1){
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	b2db      	uxtb	r3, r3
 800a4da:	f003 0301 	and.w	r3, r3, #1
 800a4de:	b2d8      	uxtb	r0, r3
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	b2db      	uxtb	r3, r3
 800a4e4:	f003 0302 	and.w	r3, r3, #2
 800a4e8:	b2d9      	uxtb	r1, r3
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	b2db      	uxtb	r3, r3
 800a4ee:	f003 0304 	and.w	r3, r3, #4
 800a4f2:	b2db      	uxtb	r3, r3
 800a4f4:	461a      	mov	r2, r3
 800a4f6:	f007 fb49 	bl	8011b8c <led_write>
		  if(dist_r >= 20){
 800a4fa:	4ba1      	ldr	r3, [pc, #644]	; (800a780 <goal_test+0x2bc>)
 800a4fc:	edd3 7a00 	vldr	s15, [r3]
 800a500:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 800a504:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a508:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a50c:	db0f      	blt.n	800a52e <goal_test+0x6a>
			  mode++;
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	3301      	adds	r3, #1
 800a512:	607b      	str	r3, [r7, #4]
			  dist_r = 0;
 800a514:	4b9a      	ldr	r3, [pc, #616]	; (800a780 <goal_test+0x2bc>)
 800a516:	f04f 0200 	mov.w	r2, #0
 800a51a:	601a      	str	r2, [r3, #0]
			  if(mode > 7){
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	2b07      	cmp	r3, #7
 800a520:	dd01      	ble.n	800a526 <goal_test+0x62>
				  mode = 0;
 800a522:	2300      	movs	r3, #0
 800a524:	607b      	str	r3, [r7, #4]
			  }
			  printf("Mode : %d\n", mode);
 800a526:	6879      	ldr	r1, [r7, #4]
 800a528:	4896      	ldr	r0, [pc, #600]	; (800a784 <goal_test+0x2c0>)
 800a52a:	f008 f8fd 	bl	8012728 <iprintf>
		  }
		  if(dist_r <= -20){
 800a52e:	4b94      	ldr	r3, [pc, #592]	; (800a780 <goal_test+0x2bc>)
 800a530:	edd3 7a00 	vldr	s15, [r3]
 800a534:	eebb 7a04 	vmov.f32	s14, #180	; 0xc1a00000 -20.0
 800a538:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a53c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a540:	d80f      	bhi.n	800a562 <goal_test+0x9e>
			  mode--;
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	3b01      	subs	r3, #1
 800a546:	607b      	str	r3, [r7, #4]
			  dist_r = 0;
 800a548:	4b8d      	ldr	r3, [pc, #564]	; (800a780 <goal_test+0x2bc>)
 800a54a:	f04f 0200 	mov.w	r2, #0
 800a54e:	601a      	str	r2, [r3, #0]
			  if(mode < 0){
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	2b00      	cmp	r3, #0
 800a554:	da01      	bge.n	800a55a <goal_test+0x96>
				  mode = 7;
 800a556:	2307      	movs	r3, #7
 800a558:	607b      	str	r3, [r7, #4]
			  }
			  printf("Mode : %d\n", mode);
 800a55a:	6879      	ldr	r1, [r7, #4]
 800a55c:	4889      	ldr	r0, [pc, #548]	; (800a784 <goal_test+0x2c0>)
 800a55e:	f008 f8e3 	bl	8012728 <iprintf>
		  }
		  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET){
 800a562:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800a566:	4888      	ldr	r0, [pc, #544]	; (800a788 <goal_test+0x2c4>)
 800a568:	f7f7 feb4 	bl	80022d4 <HAL_GPIO_ReadPin>
 800a56c:	4603      	mov	r3, r0
 800a56e:	2b00      	cmp	r3, #0
 800a570:	d1b1      	bne.n	800a4d6 <goal_test+0x12>
			  HAL_Delay(50);
 800a572:	2032      	movs	r0, #50	; 0x32
 800a574:	f7f6 fd52 	bl	800101c <HAL_Delay>
			  while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET);
 800a578:	bf00      	nop
 800a57a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800a57e:	4882      	ldr	r0, [pc, #520]	; (800a788 <goal_test+0x2c4>)
 800a580:	f7f7 fea8 	bl	80022d4 <HAL_GPIO_ReadPin>
 800a584:	4603      	mov	r3, r0
 800a586:	2b00      	cmp	r3, #0
 800a588:	d0f7      	beq.n	800a57a <goal_test+0xb6>
			  drive_ready();
 800a58a:	f7fa fb79 	bl	8004c80 <drive_ready>
			  MF2.FLAG.V = 0;
 800a58e:	4a7f      	ldr	r2, [pc, #508]	; (800a78c <goal_test+0x2c8>)
 800a590:	8813      	ldrh	r3, [r2, #0]
 800a592:	f36f 03c3 	bfc	r3, #3, #1
 800a596:	8013      	strh	r3, [r2, #0]

			  switch(mode){
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	2b07      	cmp	r3, #7
 800a59c:	d89b      	bhi.n	800a4d6 <goal_test+0x12>
 800a59e:	a201      	add	r2, pc, #4	; (adr r2, 800a5a4 <goal_test+0xe0>)
 800a5a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5a4:	0800a5c5 	.word	0x0800a5c5
 800a5a8:	0800a64d 	.word	0x0800a64d
 800a5ac:	0800a6fb 	.word	0x0800a6fb
 800a5b0:	0800a7c9 	.word	0x0800a7c9
 800a5b4:	0800a84b 	.word	0x0800a84b
 800a5b8:	0800a8c1 	.word	0x0800a8c1
 800a5bc:	0800a943 	.word	0x0800a943
 800a5c0:	0800a9cf 	.word	0x0800a9cf
				case 0:
					//----a一次探索スラローム走行----
					printf("First Run. (Slalom)\n");
 800a5c4:	4872      	ldr	r0, [pc, #456]	; (800a790 <goal_test+0x2cc>)
 800a5c6:	f008 f923 	bl	8012810 <puts>

					MF.FLAG.SCND = 0;
 800a5ca:	4a72      	ldr	r2, [pc, #456]	; (800a794 <goal_test+0x2d0>)
 800a5cc:	8813      	ldrh	r3, [r2, #0]
 800a5ce:	f36f 1345 	bfc	r3, #5, #1
 800a5d2:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800a5d4:	4a6f      	ldr	r2, [pc, #444]	; (800a794 <goal_test+0x2d0>)
 800a5d6:	8813      	ldrh	r3, [r2, #0]
 800a5d8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a5dc:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 0;
 800a5de:	4a6d      	ldr	r2, [pc, #436]	; (800a794 <goal_test+0x2d0>)
 800a5e0:	8813      	ldrh	r3, [r2, #0]
 800a5e2:	f36f 238a 	bfc	r3, #10, #1
 800a5e6:	8013      	strh	r3, [r2, #0]
					run_mode = MIDDLE;
 800a5e8:	4b6b      	ldr	r3, [pc, #428]	; (800a798 <goal_test+0x2d4>)
 800a5ea:	2202      	movs	r2, #2
 800a5ec:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800a5ee:	4b6b      	ldr	r3, [pc, #428]	; (800a79c <goal_test+0x2d8>)
 800a5f0:	2200      	movs	r2, #0
 800a5f2:	701a      	strb	r2, [r3, #0]
					goal_mode = 1;
 800a5f4:	4b6a      	ldr	r3, [pc, #424]	; (800a7a0 <goal_test+0x2dc>)
 800a5f6:	2201      	movs	r2, #1
 800a5f8:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 800a5fa:	4b6a      	ldr	r3, [pc, #424]	; (800a7a4 <goal_test+0x2e0>)
 800a5fc:	f241 3288 	movw	r2, #5000	; 0x1388
 800a600:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 800;
 800a602:	4b69      	ldr	r3, [pc, #420]	; (800a7a8 <goal_test+0x2e4>)
 800a604:	f44f 7248 	mov.w	r2, #800	; 0x320
 800a608:	801a      	strh	r2, [r3, #0]
					start_mode = 0;
 800a60a:	4b64      	ldr	r3, [pc, #400]	; (800a79c <goal_test+0x2d8>)
 800a60c:	2200      	movs	r2, #0
 800a60e:	701a      	strb	r2, [r3, #0]
					goal_x = GOAL_X;
 800a610:	4b66      	ldr	r3, [pc, #408]	; (800a7ac <goal_test+0x2e8>)
 800a612:	2207      	movs	r2, #7
 800a614:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800a616:	4b66      	ldr	r3, [pc, #408]	; (800a7b0 <goal_test+0x2ec>)
 800a618:	2207      	movs	r2, #7
 800a61a:	701a      	strb	r2, [r3, #0]

					get_base();
 800a61c:	f007 fa5e 	bl	8011adc <get_base>

					searchC();
 800a620:	f004 fa86 	bl	800eb30 <searchC>
					HAL_Delay(2000);
 800a624:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800a628:	f7f6 fcf8 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800a62c:	4b60      	ldr	r3, [pc, #384]	; (800a7b0 <goal_test+0x2ec>)
 800a62e:	2200      	movs	r2, #0
 800a630:	701a      	strb	r2, [r3, #0]
 800a632:	4b5f      	ldr	r3, [pc, #380]	; (800a7b0 <goal_test+0x2ec>)
 800a634:	781a      	ldrb	r2, [r3, #0]
 800a636:	4b5d      	ldr	r3, [pc, #372]	; (800a7ac <goal_test+0x2e8>)
 800a638:	701a      	strb	r2, [r3, #0]
					searchC();
 800a63a:	f004 fa79 	bl	800eb30 <searchC>

					goal_x = GOAL_X;
 800a63e:	4b5b      	ldr	r3, [pc, #364]	; (800a7ac <goal_test+0x2e8>)
 800a640:	2207      	movs	r2, #7
 800a642:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800a644:	4b5a      	ldr	r3, [pc, #360]	; (800a7b0 <goal_test+0x2ec>)
 800a646:	2207      	movs	r2, #7
 800a648:	701a      	strb	r2, [r3, #0]
					break;
 800a64a:	e206      	b.n	800aa5a <goal_test+0x596>
				case 1:
					//----a一次探索スラローム走行 4マスgoal----
					printf("First Run. (4 goal)\n");
 800a64c:	4859      	ldr	r0, [pc, #356]	; (800a7b4 <goal_test+0x2f0>)
 800a64e:	f008 f8df 	bl	8012810 <puts>

					MF.FLAG.SCND = 0;
 800a652:	4a50      	ldr	r2, [pc, #320]	; (800a794 <goal_test+0x2d0>)
 800a654:	8813      	ldrh	r3, [r2, #0]
 800a656:	f36f 1345 	bfc	r3, #5, #1
 800a65a:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800a65c:	4a4d      	ldr	r2, [pc, #308]	; (800a794 <goal_test+0x2d0>)
 800a65e:	8813      	ldrh	r3, [r2, #0]
 800a660:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a664:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 0;
 800a666:	4a4b      	ldr	r2, [pc, #300]	; (800a794 <goal_test+0x2d0>)
 800a668:	8813      	ldrh	r3, [r2, #0]
 800a66a:	f36f 238a 	bfc	r3, #10, #1
 800a66e:	8013      	strh	r3, [r2, #0]
					run_mode = MIDDLE;
 800a670:	4b49      	ldr	r3, [pc, #292]	; (800a798 <goal_test+0x2d4>)
 800a672:	2202      	movs	r2, #2
 800a674:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800a676:	4b49      	ldr	r3, [pc, #292]	; (800a79c <goal_test+0x2d8>)
 800a678:	2200      	movs	r2, #0
 800a67a:	701a      	strb	r2, [r3, #0]
					goal_mode = 2;
 800a67c:	4b48      	ldr	r3, [pc, #288]	; (800a7a0 <goal_test+0x2dc>)
 800a67e:	2202      	movs	r2, #2
 800a680:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 800a682:	4b48      	ldr	r3, [pc, #288]	; (800a7a4 <goal_test+0x2e0>)
 800a684:	f241 3288 	movw	r2, #5000	; 0x1388
 800a688:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 800;
 800a68a:	4b47      	ldr	r3, [pc, #284]	; (800a7a8 <goal_test+0x2e4>)
 800a68c:	f44f 7248 	mov.w	r2, #800	; 0x320
 800a690:	801a      	strh	r2, [r3, #0]
					start_mode = 0;
 800a692:	4b42      	ldr	r3, [pc, #264]	; (800a79c <goal_test+0x2d8>)
 800a694:	2200      	movs	r2, #0
 800a696:	701a      	strb	r2, [r3, #0]
					goal_x = GOAL_X;
 800a698:	4b44      	ldr	r3, [pc, #272]	; (800a7ac <goal_test+0x2e8>)
 800a69a:	2207      	movs	r2, #7
 800a69c:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800a69e:	4b44      	ldr	r3, [pc, #272]	; (800a7b0 <goal_test+0x2ec>)
 800a6a0:	2207      	movs	r2, #7
 800a6a2:	701a      	strb	r2, [r3, #0]

					get_base();
 800a6a4:	f007 fa1a 	bl	8011adc <get_base>

					searchC();
 800a6a8:	f004 fa42 	bl	800eb30 <searchC>
					HAL_Delay(2000);
 800a6ac:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800a6b0:	f7f6 fcb4 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800a6b4:	4b3e      	ldr	r3, [pc, #248]	; (800a7b0 <goal_test+0x2ec>)
 800a6b6:	2200      	movs	r2, #0
 800a6b8:	701a      	strb	r2, [r3, #0]
 800a6ba:	4b3d      	ldr	r3, [pc, #244]	; (800a7b0 <goal_test+0x2ec>)
 800a6bc:	781a      	ldrb	r2, [r3, #0]
 800a6be:	4b3b      	ldr	r3, [pc, #236]	; (800a7ac <goal_test+0x2e8>)
 800a6c0:	701a      	strb	r2, [r3, #0]
					searchC();
 800a6c2:	f004 fa35 	bl	800eb30 <searchC>
					while(dist_l < 30);
 800a6c6:	bf00      	nop
 800a6c8:	4b3b      	ldr	r3, [pc, #236]	; (800a7b8 <goal_test+0x2f4>)
 800a6ca:	edd3 7a00 	vldr	s15, [r3]
 800a6ce:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 800a6d2:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a6d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a6da:	d4f5      	bmi.n	800a6c8 <goal_test+0x204>
					printf("x: %d, y:%d, dir:%d\n", mouse.x, mouse.y, mouse.dir);
 800a6dc:	4b37      	ldr	r3, [pc, #220]	; (800a7bc <goal_test+0x2f8>)
 800a6de:	781b      	ldrb	r3, [r3, #0]
 800a6e0:	b2db      	uxtb	r3, r3
 800a6e2:	4619      	mov	r1, r3
 800a6e4:	4b35      	ldr	r3, [pc, #212]	; (800a7bc <goal_test+0x2f8>)
 800a6e6:	785b      	ldrb	r3, [r3, #1]
 800a6e8:	b2db      	uxtb	r3, r3
 800a6ea:	461a      	mov	r2, r3
 800a6ec:	4b33      	ldr	r3, [pc, #204]	; (800a7bc <goal_test+0x2f8>)
 800a6ee:	789b      	ldrb	r3, [r3, #2]
 800a6f0:	b2db      	uxtb	r3, r3
 800a6f2:	4833      	ldr	r0, [pc, #204]	; (800a7c0 <goal_test+0x2fc>)
 800a6f4:	f008 f818 	bl	8012728 <iprintf>

					break;
 800a6f8:	e1af      	b.n	800aa5a <goal_test+0x596>
				case 2:
					//----a直線と大回り圧縮(adv_posを停止)+半区画ベース Middle Speed----
					printf("pass press 3-2.\n");
 800a6fa:	4832      	ldr	r0, [pc, #200]	; (800a7c4 <goal_test+0x300>)
 800a6fc:	f008 f888 	bl	8012810 <puts>
					MF.FLAG.SCND = 1;
 800a700:	4a24      	ldr	r2, [pc, #144]	; (800a794 <goal_test+0x2d0>)
 800a702:	8813      	ldrh	r3, [r2, #0]
 800a704:	f043 0320 	orr.w	r3, r3, #32
 800a708:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800a70a:	4a22      	ldr	r2, [pc, #136]	; (800a794 <goal_test+0x2d0>)
 800a70c:	8813      	ldrh	r3, [r2, #0]
 800a70e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a712:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800a714:	4a1f      	ldr	r2, [pc, #124]	; (800a794 <goal_test+0x2d0>)
 800a716:	8813      	ldrh	r3, [r2, #0]
 800a718:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800a71c:	8013      	strh	r3, [r2, #0]
					run_mode = MIDDLE;
 800a71e:	4b1e      	ldr	r3, [pc, #120]	; (800a798 <goal_test+0x2d4>)
 800a720:	2202      	movs	r2, #2
 800a722:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800a724:	4b1d      	ldr	r3, [pc, #116]	; (800a79c <goal_test+0x2d8>)
 800a726:	2200      	movs	r2, #0
 800a728:	701a      	strb	r2, [r3, #0]
					goal_mode = 1;
 800a72a:	4b1d      	ldr	r3, [pc, #116]	; (800a7a0 <goal_test+0x2dc>)
 800a72c:	2201      	movs	r2, #1
 800a72e:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 800a730:	4b1c      	ldr	r3, [pc, #112]	; (800a7a4 <goal_test+0x2e0>)
 800a732:	f241 3288 	movw	r2, #5000	; 0x1388
 800a736:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1200;
 800a738:	4b1b      	ldr	r3, [pc, #108]	; (800a7a8 <goal_test+0x2e4>)
 800a73a:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 800a73e:	801a      	strh	r2, [r3, #0]

//					pass_mode = 3;						//a半区画ベースでroute配列生成

					goal_x = GOAL_X;
 800a740:	4b1a      	ldr	r3, [pc, #104]	; (800a7ac <goal_test+0x2e8>)
 800a742:	2207      	movs	r2, #7
 800a744:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800a746:	4b1a      	ldr	r3, [pc, #104]	; (800a7b0 <goal_test+0x2ec>)
 800a748:	2207      	movs	r2, #7
 800a74a:	701a      	strb	r2, [r3, #0]

					get_base();
 800a74c:	f007 f9c6 	bl	8011adc <get_base>

					searchF3();
 800a750:	f004 fe68 	bl	800f424 <searchF3>
					HAL_Delay(2000);
 800a754:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800a758:	f7f6 fc60 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800a75c:	4b14      	ldr	r3, [pc, #80]	; (800a7b0 <goal_test+0x2ec>)
 800a75e:	2200      	movs	r2, #0
 800a760:	701a      	strb	r2, [r3, #0]
 800a762:	4b13      	ldr	r3, [pc, #76]	; (800a7b0 <goal_test+0x2ec>)
 800a764:	781a      	ldrb	r2, [r3, #0]
 800a766:	4b11      	ldr	r3, [pc, #68]	; (800a7ac <goal_test+0x2e8>)
 800a768:	701a      	strb	r2, [r3, #0]
					searchF3();
 800a76a:	f004 fe5b 	bl	800f424 <searchF3>

					goal_x = GOAL_X;
 800a76e:	4b0f      	ldr	r3, [pc, #60]	; (800a7ac <goal_test+0x2e8>)
 800a770:	2207      	movs	r2, #7
 800a772:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800a774:	4b0e      	ldr	r3, [pc, #56]	; (800a7b0 <goal_test+0x2ec>)
 800a776:	2207      	movs	r2, #7
 800a778:	701a      	strb	r2, [r3, #0]
					break;
 800a77a:	e16e      	b.n	800aa5a <goal_test+0x596>
 800a77c:	08013b88 	.word	0x08013b88
 800a780:	20000aec 	.word	0x20000aec
 800a784:	08013964 	.word	0x08013964
 800a788:	40020000 	.word	0x40020000
 800a78c:	20000f64 	.word	0x20000f64
 800a790:	08013b44 	.word	0x08013b44
 800a794:	20000f68 	.word	0x20000f68
 800a798:	20000456 	.word	0x20000456
 800a79c:	200015c8 	.word	0x200015c8
 800a7a0:	20000bb1 	.word	0x20000bb1
 800a7a4:	20000454 	.word	0x20000454
 800a7a8:	20000f7c 	.word	0x20000f7c
 800a7ac:	20000bb0 	.word	0x20000bb0
 800a7b0:	20000b4c 	.word	0x20000b4c
 800a7b4:	08013ba4 	.word	0x08013ba4
 800a7b8:	200015c4 	.word	0x200015c4
 800a7bc:	20000c0c 	.word	0x20000c0c
 800a7c0:	08013bb8 	.word	0x08013bb8
 800a7c4:	08013b58 	.word	0x08013b58
				case 3:
					//----a直線と大回り圧縮(adv_posを停止)+半区画ベース Middle Speed 4マスgoal----
					printf("pass press 3-2.\n");
 800a7c8:	48a4      	ldr	r0, [pc, #656]	; (800aa5c <goal_test+0x598>)
 800a7ca:	f008 f821 	bl	8012810 <puts>
					MF.FLAG.SCND = 1;
 800a7ce:	4aa4      	ldr	r2, [pc, #656]	; (800aa60 <goal_test+0x59c>)
 800a7d0:	8813      	ldrh	r3, [r2, #0]
 800a7d2:	f043 0320 	orr.w	r3, r3, #32
 800a7d6:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800a7d8:	4aa1      	ldr	r2, [pc, #644]	; (800aa60 <goal_test+0x59c>)
 800a7da:	8813      	ldrh	r3, [r2, #0]
 800a7dc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a7e0:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800a7e2:	4a9f      	ldr	r2, [pc, #636]	; (800aa60 <goal_test+0x59c>)
 800a7e4:	8813      	ldrh	r3, [r2, #0]
 800a7e6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800a7ea:	8013      	strh	r3, [r2, #0]
					run_mode = MIDDLE;
 800a7ec:	4b9d      	ldr	r3, [pc, #628]	; (800aa64 <goal_test+0x5a0>)
 800a7ee:	2202      	movs	r2, #2
 800a7f0:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800a7f2:	4b9d      	ldr	r3, [pc, #628]	; (800aa68 <goal_test+0x5a4>)
 800a7f4:	2200      	movs	r2, #0
 800a7f6:	701a      	strb	r2, [r3, #0]
					goal_mode = 2;
 800a7f8:	4b9c      	ldr	r3, [pc, #624]	; (800aa6c <goal_test+0x5a8>)
 800a7fa:	2202      	movs	r2, #2
 800a7fc:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 800a7fe:	4b9c      	ldr	r3, [pc, #624]	; (800aa70 <goal_test+0x5ac>)
 800a800:	f241 3288 	movw	r2, #5000	; 0x1388
 800a804:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1200;
 800a806:	4b9b      	ldr	r3, [pc, #620]	; (800aa74 <goal_test+0x5b0>)
 800a808:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 800a80c:	801a      	strh	r2, [r3, #0]

//					pass_mode = 3;						//a半区画ベースでroute配列生成

					goal_x = GOAL_X;
 800a80e:	4b9a      	ldr	r3, [pc, #616]	; (800aa78 <goal_test+0x5b4>)
 800a810:	2207      	movs	r2, #7
 800a812:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800a814:	4b99      	ldr	r3, [pc, #612]	; (800aa7c <goal_test+0x5b8>)
 800a816:	2207      	movs	r2, #7
 800a818:	701a      	strb	r2, [r3, #0]

					get_base();
 800a81a:	f007 f95f 	bl	8011adc <get_base>

					searchF3();
 800a81e:	f004 fe01 	bl	800f424 <searchF3>
					HAL_Delay(2000);
 800a822:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800a826:	f7f6 fbf9 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800a82a:	4b94      	ldr	r3, [pc, #592]	; (800aa7c <goal_test+0x5b8>)
 800a82c:	2200      	movs	r2, #0
 800a82e:	701a      	strb	r2, [r3, #0]
 800a830:	4b92      	ldr	r3, [pc, #584]	; (800aa7c <goal_test+0x5b8>)
 800a832:	781a      	ldrb	r2, [r3, #0]
 800a834:	4b90      	ldr	r3, [pc, #576]	; (800aa78 <goal_test+0x5b4>)
 800a836:	701a      	strb	r2, [r3, #0]
					searchF3();
 800a838:	f004 fdf4 	bl	800f424 <searchF3>

					goal_x = GOAL_X;
 800a83c:	4b8e      	ldr	r3, [pc, #568]	; (800aa78 <goal_test+0x5b4>)
 800a83e:	2207      	movs	r2, #7
 800a840:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800a842:	4b8e      	ldr	r3, [pc, #568]	; (800aa7c <goal_test+0x5b8>)
 800a844:	2207      	movs	r2, #7
 800a846:	701a      	strb	r2, [r3, #0]
					break;
 800a848:	e107      	b.n	800aa5a <goal_test+0x596>
				case 4:
					//----a直線と大回り圧縮と斜め Middle Speedｰｰｰｰ
					printf("pass press 4.\n");
 800a84a:	488d      	ldr	r0, [pc, #564]	; (800aa80 <goal_test+0x5bc>)
 800a84c:	f007 ffe0 	bl	8012810 <puts>
					MF.FLAG.SCND = 1;
 800a850:	4a83      	ldr	r2, [pc, #524]	; (800aa60 <goal_test+0x59c>)
 800a852:	8813      	ldrh	r3, [r2, #0]
 800a854:	f043 0320 	orr.w	r3, r3, #32
 800a858:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800a85a:	4a81      	ldr	r2, [pc, #516]	; (800aa60 <goal_test+0x59c>)
 800a85c:	8813      	ldrh	r3, [r2, #0]
 800a85e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a862:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800a864:	4a7e      	ldr	r2, [pc, #504]	; (800aa60 <goal_test+0x59c>)
 800a866:	8813      	ldrh	r3, [r2, #0]
 800a868:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800a86c:	8013      	strh	r3, [r2, #0]
					run_mode = MIDDLE;
 800a86e:	4b7d      	ldr	r3, [pc, #500]	; (800aa64 <goal_test+0x5a0>)
 800a870:	2202      	movs	r2, #2
 800a872:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800a874:	4b7c      	ldr	r3, [pc, #496]	; (800aa68 <goal_test+0x5a4>)
 800a876:	2200      	movs	r2, #0
 800a878:	701a      	strb	r2, [r3, #0]
					goal_mode = 1;
 800a87a:	4b7c      	ldr	r3, [pc, #496]	; (800aa6c <goal_test+0x5a8>)
 800a87c:	2201      	movs	r2, #1
 800a87e:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 800a880:	4b7b      	ldr	r3, [pc, #492]	; (800aa70 <goal_test+0x5ac>)
 800a882:	f241 3288 	movw	r2, #5000	; 0x1388
 800a886:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1200;
 800a888:	4b7a      	ldr	r3, [pc, #488]	; (800aa74 <goal_test+0x5b0>)
 800a88a:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 800a88e:	801a      	strh	r2, [r3, #0]

//					pass_mode = 4;

					goal_x = GOAL_X;
 800a890:	4b79      	ldr	r3, [pc, #484]	; (800aa78 <goal_test+0x5b4>)
 800a892:	2207      	movs	r2, #7
 800a894:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800a896:	4b79      	ldr	r3, [pc, #484]	; (800aa7c <goal_test+0x5b8>)
 800a898:	2207      	movs	r2, #7
 800a89a:	701a      	strb	r2, [r3, #0]

					get_base();
 800a89c:	f007 f91e 	bl	8011adc <get_base>

					searchF4();
 800a8a0:	f004 fe9c 	bl	800f5dc <searchF4>
					HAL_Delay(2000);
 800a8a4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800a8a8:	f7f6 fbb8 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800a8ac:	4b73      	ldr	r3, [pc, #460]	; (800aa7c <goal_test+0x5b8>)
 800a8ae:	2200      	movs	r2, #0
 800a8b0:	701a      	strb	r2, [r3, #0]
 800a8b2:	4b72      	ldr	r3, [pc, #456]	; (800aa7c <goal_test+0x5b8>)
 800a8b4:	781a      	ldrb	r2, [r3, #0]
 800a8b6:	4b70      	ldr	r3, [pc, #448]	; (800aa78 <goal_test+0x5b4>)
 800a8b8:	701a      	strb	r2, [r3, #0]
					searchF4();
 800a8ba:	f004 fe8f 	bl	800f5dc <searchF4>
					break;
 800a8be:	e0cc      	b.n	800aa5a <goal_test+0x596>
				case 5:
					//----a直線と大回り圧縮と斜め Middle Speed 4マスgoalｰｰｰｰ
					printf("pass press 4.\n");
 800a8c0:	486f      	ldr	r0, [pc, #444]	; (800aa80 <goal_test+0x5bc>)
 800a8c2:	f007 ffa5 	bl	8012810 <puts>
					MF.FLAG.SCND = 1;
 800a8c6:	4a66      	ldr	r2, [pc, #408]	; (800aa60 <goal_test+0x59c>)
 800a8c8:	8813      	ldrh	r3, [r2, #0]
 800a8ca:	f043 0320 	orr.w	r3, r3, #32
 800a8ce:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800a8d0:	4a63      	ldr	r2, [pc, #396]	; (800aa60 <goal_test+0x59c>)
 800a8d2:	8813      	ldrh	r3, [r2, #0]
 800a8d4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a8d8:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800a8da:	4a61      	ldr	r2, [pc, #388]	; (800aa60 <goal_test+0x59c>)
 800a8dc:	8813      	ldrh	r3, [r2, #0]
 800a8de:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800a8e2:	8013      	strh	r3, [r2, #0]
					run_mode = MIDDLE;
 800a8e4:	4b5f      	ldr	r3, [pc, #380]	; (800aa64 <goal_test+0x5a0>)
 800a8e6:	2202      	movs	r2, #2
 800a8e8:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800a8ea:	4b5f      	ldr	r3, [pc, #380]	; (800aa68 <goal_test+0x5a4>)
 800a8ec:	2200      	movs	r2, #0
 800a8ee:	701a      	strb	r2, [r3, #0]
					goal_mode = 2;
 800a8f0:	4b5e      	ldr	r3, [pc, #376]	; (800aa6c <goal_test+0x5a8>)
 800a8f2:	2202      	movs	r2, #2
 800a8f4:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 800a8f6:	4b5e      	ldr	r3, [pc, #376]	; (800aa70 <goal_test+0x5ac>)
 800a8f8:	f241 3288 	movw	r2, #5000	; 0x1388
 800a8fc:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1200;
 800a8fe:	4b5d      	ldr	r3, [pc, #372]	; (800aa74 <goal_test+0x5b0>)
 800a900:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 800a904:	801a      	strh	r2, [r3, #0]

//					pass_mode = 4;

					goal_x = GOAL_X;
 800a906:	4b5c      	ldr	r3, [pc, #368]	; (800aa78 <goal_test+0x5b4>)
 800a908:	2207      	movs	r2, #7
 800a90a:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800a90c:	4b5b      	ldr	r3, [pc, #364]	; (800aa7c <goal_test+0x5b8>)
 800a90e:	2207      	movs	r2, #7
 800a910:	701a      	strb	r2, [r3, #0]

					get_base();
 800a912:	f007 f8e3 	bl	8011adc <get_base>

					searchF4();
 800a916:	f004 fe61 	bl	800f5dc <searchF4>
					HAL_Delay(2000);
 800a91a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800a91e:	f7f6 fb7d 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800a922:	4b56      	ldr	r3, [pc, #344]	; (800aa7c <goal_test+0x5b8>)
 800a924:	2200      	movs	r2, #0
 800a926:	701a      	strb	r2, [r3, #0]
 800a928:	4b54      	ldr	r3, [pc, #336]	; (800aa7c <goal_test+0x5b8>)
 800a92a:	781a      	ldrb	r2, [r3, #0]
 800a92c:	4b52      	ldr	r3, [pc, #328]	; (800aa78 <goal_test+0x5b4>)
 800a92e:	701a      	strb	r2, [r3, #0]
					searchF4();
 800a930:	f004 fe54 	bl	800f5dc <searchF4>

					goal_x = GOAL_X;
 800a934:	4b50      	ldr	r3, [pc, #320]	; (800aa78 <goal_test+0x5b4>)
 800a936:	2207      	movs	r2, #7
 800a938:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800a93a:	4b50      	ldr	r3, [pc, #320]	; (800aa7c <goal_test+0x5b8>)
 800a93c:	2207      	movs	r2, #7
 800a93e:	701a      	strb	r2, [r3, #0]
					break;
 800a940:	e08b      	b.n	800aa5a <goal_test+0x596>
				case 6:
					//----a一次探索スラローム走行　重ね探索----
					printf("First Run. (Slalom)\n");
 800a942:	4850      	ldr	r0, [pc, #320]	; (800aa84 <goal_test+0x5c0>)
 800a944:	f007 ff64 	bl	8012810 <puts>

					MF.FLAG.SCND = 0;
 800a948:	4a45      	ldr	r2, [pc, #276]	; (800aa60 <goal_test+0x59c>)
 800a94a:	8813      	ldrh	r3, [r2, #0]
 800a94c:	f36f 1345 	bfc	r3, #5, #1
 800a950:	8013      	strh	r3, [r2, #0]
					MF.FLAG.SRC2 = 1;
 800a952:	4a43      	ldr	r2, [pc, #268]	; (800aa60 <goal_test+0x59c>)
 800a954:	8813      	ldrh	r3, [r2, #0]
 800a956:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a95a:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800a95c:	4a40      	ldr	r2, [pc, #256]	; (800aa60 <goal_test+0x59c>)
 800a95e:	8813      	ldrh	r3, [r2, #0]
 800a960:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a964:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 0;
 800a966:	4a3e      	ldr	r2, [pc, #248]	; (800aa60 <goal_test+0x59c>)
 800a968:	8813      	ldrh	r3, [r2, #0]
 800a96a:	f36f 238a 	bfc	r3, #10, #1
 800a96e:	8013      	strh	r3, [r2, #0]
					run_mode = MIDDLE;
 800a970:	4b3c      	ldr	r3, [pc, #240]	; (800aa64 <goal_test+0x5a0>)
 800a972:	2202      	movs	r2, #2
 800a974:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800a976:	4b3c      	ldr	r3, [pc, #240]	; (800aa68 <goal_test+0x5a4>)
 800a978:	2200      	movs	r2, #0
 800a97a:	701a      	strb	r2, [r3, #0]
					goal_mode = 1;
 800a97c:	4b3b      	ldr	r3, [pc, #236]	; (800aa6c <goal_test+0x5a8>)
 800a97e:	2201      	movs	r2, #1
 800a980:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 800a982:	4b3b      	ldr	r3, [pc, #236]	; (800aa70 <goal_test+0x5ac>)
 800a984:	f241 3288 	movw	r2, #5000	; 0x1388
 800a988:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1200;
 800a98a:	4b3a      	ldr	r3, [pc, #232]	; (800aa74 <goal_test+0x5b0>)
 800a98c:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 800a990:	801a      	strh	r2, [r3, #0]
					goal_x = GOAL_X;
 800a992:	4b39      	ldr	r3, [pc, #228]	; (800aa78 <goal_test+0x5b4>)
 800a994:	2207      	movs	r2, #7
 800a996:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800a998:	4b38      	ldr	r3, [pc, #224]	; (800aa7c <goal_test+0x5b8>)
 800a99a:	2207      	movs	r2, #7
 800a99c:	701a      	strb	r2, [r3, #0]

					get_base();
 800a99e:	f007 f89d 	bl	8011adc <get_base>

					searchC2();
 800a9a2:	f004 fa37 	bl	800ee14 <searchC2>
					HAL_Delay(2000);
 800a9a6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800a9aa:	f7f6 fb37 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800a9ae:	4b33      	ldr	r3, [pc, #204]	; (800aa7c <goal_test+0x5b8>)
 800a9b0:	2200      	movs	r2, #0
 800a9b2:	701a      	strb	r2, [r3, #0]
 800a9b4:	4b31      	ldr	r3, [pc, #196]	; (800aa7c <goal_test+0x5b8>)
 800a9b6:	781a      	ldrb	r2, [r3, #0]
 800a9b8:	4b2f      	ldr	r3, [pc, #188]	; (800aa78 <goal_test+0x5b4>)
 800a9ba:	701a      	strb	r2, [r3, #0]
					searchC();
 800a9bc:	f004 f8b8 	bl	800eb30 <searchC>

					goal_x = GOAL_X;
 800a9c0:	4b2d      	ldr	r3, [pc, #180]	; (800aa78 <goal_test+0x5b4>)
 800a9c2:	2207      	movs	r2, #7
 800a9c4:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800a9c6:	4b2d      	ldr	r3, [pc, #180]	; (800aa7c <goal_test+0x5b8>)
 800a9c8:	2207      	movs	r2, #7
 800a9ca:	701a      	strb	r2, [r3, #0]
					break;
 800a9cc:	e045      	b.n	800aa5a <goal_test+0x596>
				case 7:
					//----a一次探索スラローム走行　重ね探索 4マスgoal----
					printf("First Run. (Slalom)\n");
 800a9ce:	482d      	ldr	r0, [pc, #180]	; (800aa84 <goal_test+0x5c0>)
 800a9d0:	f007 ff1e 	bl	8012810 <puts>

					MF.FLAG.SCND = 0;
 800a9d4:	4a22      	ldr	r2, [pc, #136]	; (800aa60 <goal_test+0x59c>)
 800a9d6:	8813      	ldrh	r3, [r2, #0]
 800a9d8:	f36f 1345 	bfc	r3, #5, #1
 800a9dc:	8013      	strh	r3, [r2, #0]
					MF.FLAG.SRC2 = 1;
 800a9de:	4a20      	ldr	r2, [pc, #128]	; (800aa60 <goal_test+0x59c>)
 800a9e0:	8813      	ldrh	r3, [r2, #0]
 800a9e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a9e6:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800a9e8:	4a1d      	ldr	r2, [pc, #116]	; (800aa60 <goal_test+0x59c>)
 800a9ea:	8813      	ldrh	r3, [r2, #0]
 800a9ec:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a9f0:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 0;
 800a9f2:	4a1b      	ldr	r2, [pc, #108]	; (800aa60 <goal_test+0x59c>)
 800a9f4:	8813      	ldrh	r3, [r2, #0]
 800a9f6:	f36f 238a 	bfc	r3, #10, #1
 800a9fa:	8013      	strh	r3, [r2, #0]
					run_mode = MIDDLE;
 800a9fc:	4b19      	ldr	r3, [pc, #100]	; (800aa64 <goal_test+0x5a0>)
 800a9fe:	2202      	movs	r2, #2
 800aa00:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800aa02:	4b19      	ldr	r3, [pc, #100]	; (800aa68 <goal_test+0x5a4>)
 800aa04:	2200      	movs	r2, #0
 800aa06:	701a      	strb	r2, [r3, #0]
					goal_mode = 2;
 800aa08:	4b18      	ldr	r3, [pc, #96]	; (800aa6c <goal_test+0x5a8>)
 800aa0a:	2202      	movs	r2, #2
 800aa0c:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 800aa0e:	4b18      	ldr	r3, [pc, #96]	; (800aa70 <goal_test+0x5ac>)
 800aa10:	f241 3288 	movw	r2, #5000	; 0x1388
 800aa14:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1200;
 800aa16:	4b17      	ldr	r3, [pc, #92]	; (800aa74 <goal_test+0x5b0>)
 800aa18:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 800aa1c:	801a      	strh	r2, [r3, #0]
					goal_x = GOAL_X;
 800aa1e:	4b16      	ldr	r3, [pc, #88]	; (800aa78 <goal_test+0x5b4>)
 800aa20:	2207      	movs	r2, #7
 800aa22:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800aa24:	4b15      	ldr	r3, [pc, #84]	; (800aa7c <goal_test+0x5b8>)
 800aa26:	2207      	movs	r2, #7
 800aa28:	701a      	strb	r2, [r3, #0]

					get_base();
 800aa2a:	f007 f857 	bl	8011adc <get_base>

					searchC2();
 800aa2e:	f004 f9f1 	bl	800ee14 <searchC2>
					HAL_Delay(2000);
 800aa32:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800aa36:	f7f6 faf1 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800aa3a:	4b10      	ldr	r3, [pc, #64]	; (800aa7c <goal_test+0x5b8>)
 800aa3c:	2200      	movs	r2, #0
 800aa3e:	701a      	strb	r2, [r3, #0]
 800aa40:	4b0e      	ldr	r3, [pc, #56]	; (800aa7c <goal_test+0x5b8>)
 800aa42:	781a      	ldrb	r2, [r3, #0]
 800aa44:	4b0c      	ldr	r3, [pc, #48]	; (800aa78 <goal_test+0x5b4>)
 800aa46:	701a      	strb	r2, [r3, #0]
					searchC();
 800aa48:	f004 f872 	bl	800eb30 <searchC>

					goal_x = GOAL_X;
 800aa4c:	4b0a      	ldr	r3, [pc, #40]	; (800aa78 <goal_test+0x5b4>)
 800aa4e:	2207      	movs	r2, #7
 800aa50:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800aa52:	4b0a      	ldr	r3, [pc, #40]	; (800aa7c <goal_test+0x5b8>)
 800aa54:	2207      	movs	r2, #7
 800aa56:	701a      	strb	r2, [r3, #0]
					break;
 800aa58:	bf00      	nop
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 800aa5a:	e53c      	b.n	800a4d6 <goal_test+0x12>
 800aa5c:	08013b58 	.word	0x08013b58
 800aa60:	20000f68 	.word	0x20000f68
 800aa64:	20000456 	.word	0x20000456
 800aa68:	200015c8 	.word	0x200015c8
 800aa6c:	20000bb1 	.word	0x20000bb1
 800aa70:	20000454 	.word	0x20000454
 800aa74:	20000f7c 	.word	0x20000f7c
 800aa78:	20000bb0 	.word	0x20000bb0
 800aa7c:	20000b4c 	.word	0x20000b4c
 800aa80:	08013b68 	.word	0x08013b68
 800aa84:	08013b44 	.word	0x08013b44

0800aa88 <sample_course_run>:
//sample_course_run
//a試験走行モード
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void sample_course_run(void){
 800aa88:	b580      	push	{r7, lr}
 800aa8a:	b082      	sub	sp, #8
 800aa8c:	af00      	add	r7, sp, #0

	int mode = 0;
 800aa8e:	2300      	movs	r3, #0
 800aa90:	607b      	str	r3, [r7, #4]
	printf("Sample Course Run, Mode : %d\n", mode);
 800aa92:	6879      	ldr	r1, [r7, #4]
 800aa94:	489a      	ldr	r0, [pc, #616]	; (800ad00 <sample_course_run+0x278>)
 800aa96:	f007 fe47 	bl	8012728 <iprintf>

	while(1){
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	b2db      	uxtb	r3, r3
 800aa9e:	f003 0301 	and.w	r3, r3, #1
 800aaa2:	b2d8      	uxtb	r0, r3
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	b2db      	uxtb	r3, r3
 800aaa8:	f003 0302 	and.w	r3, r3, #2
 800aaac:	b2d9      	uxtb	r1, r3
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	b2db      	uxtb	r3, r3
 800aab2:	f003 0304 	and.w	r3, r3, #4
 800aab6:	b2db      	uxtb	r3, r3
 800aab8:	461a      	mov	r2, r3
 800aaba:	f007 f867 	bl	8011b8c <led_write>
		  if(dist_r >= 20){
 800aabe:	4b91      	ldr	r3, [pc, #580]	; (800ad04 <sample_course_run+0x27c>)
 800aac0:	edd3 7a00 	vldr	s15, [r3]
 800aac4:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 800aac8:	eef4 7ac7 	vcmpe.f32	s15, s14
 800aacc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aad0:	db0f      	blt.n	800aaf2 <sample_course_run+0x6a>
			  mode++;
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	3301      	adds	r3, #1
 800aad6:	607b      	str	r3, [r7, #4]
			  dist_r = 0;
 800aad8:	4b8a      	ldr	r3, [pc, #552]	; (800ad04 <sample_course_run+0x27c>)
 800aada:	f04f 0200 	mov.w	r2, #0
 800aade:	601a      	str	r2, [r3, #0]
			  if(mode > 7){
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	2b07      	cmp	r3, #7
 800aae4:	dd01      	ble.n	800aaea <sample_course_run+0x62>
				  mode = 0;
 800aae6:	2300      	movs	r3, #0
 800aae8:	607b      	str	r3, [r7, #4]
			  }
			  printf("Mode : %d\n", mode);
 800aaea:	6879      	ldr	r1, [r7, #4]
 800aaec:	4886      	ldr	r0, [pc, #536]	; (800ad08 <sample_course_run+0x280>)
 800aaee:	f007 fe1b 	bl	8012728 <iprintf>
		  }
		  if(dist_r <= -20){
 800aaf2:	4b84      	ldr	r3, [pc, #528]	; (800ad04 <sample_course_run+0x27c>)
 800aaf4:	edd3 7a00 	vldr	s15, [r3]
 800aaf8:	eebb 7a04 	vmov.f32	s14, #180	; 0xc1a00000 -20.0
 800aafc:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ab00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ab04:	d80f      	bhi.n	800ab26 <sample_course_run+0x9e>
			  mode--;
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	3b01      	subs	r3, #1
 800ab0a:	607b      	str	r3, [r7, #4]
			  dist_r = 0;
 800ab0c:	4b7d      	ldr	r3, [pc, #500]	; (800ad04 <sample_course_run+0x27c>)
 800ab0e:	f04f 0200 	mov.w	r2, #0
 800ab12:	601a      	str	r2, [r3, #0]
			  if(mode < 0){
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	da01      	bge.n	800ab1e <sample_course_run+0x96>
				  mode = 7;
 800ab1a:	2307      	movs	r3, #7
 800ab1c:	607b      	str	r3, [r7, #4]
			  }
			  printf("Mode : %d\n", mode);
 800ab1e:	6879      	ldr	r1, [r7, #4]
 800ab20:	4879      	ldr	r0, [pc, #484]	; (800ad08 <sample_course_run+0x280>)
 800ab22:	f007 fe01 	bl	8012728 <iprintf>
		  }
		  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET){
 800ab26:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800ab2a:	4878      	ldr	r0, [pc, #480]	; (800ad0c <sample_course_run+0x284>)
 800ab2c:	f7f7 fbd2 	bl	80022d4 <HAL_GPIO_ReadPin>
 800ab30:	4603      	mov	r3, r0
 800ab32:	2b00      	cmp	r3, #0
 800ab34:	d1b1      	bne.n	800aa9a <sample_course_run+0x12>
			  HAL_Delay(50);
 800ab36:	2032      	movs	r0, #50	; 0x32
 800ab38:	f7f6 fa70 	bl	800101c <HAL_Delay>
			  while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET);
 800ab3c:	bf00      	nop
 800ab3e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800ab42:	4872      	ldr	r0, [pc, #456]	; (800ad0c <sample_course_run+0x284>)
 800ab44:	f7f7 fbc6 	bl	80022d4 <HAL_GPIO_ReadPin>
 800ab48:	4603      	mov	r3, r0
 800ab4a:	2b00      	cmp	r3, #0
 800ab4c:	d0f7      	beq.n	800ab3e <sample_course_run+0xb6>
			  drive_ready();
 800ab4e:	f7fa f897 	bl	8004c80 <drive_ready>

			  switch(mode){
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	2b07      	cmp	r3, #7
 800ab56:	d8a0      	bhi.n	800aa9a <sample_course_run+0x12>
 800ab58:	a201      	add	r2, pc, #4	; (adr r2, 800ab60 <sample_course_run+0xd8>)
 800ab5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab5e:	bf00      	nop
 800ab60:	0800ab81 	.word	0x0800ab81
 800ab64:	0800ab87 	.word	0x0800ab87
 800ab68:	0800abd5 	.word	0x0800abd5
 800ab6c:	0800abf9 	.word	0x0800abf9
 800ab70:	0800aa9b 	.word	0x0800aa9b
 800ab74:	0800ac0b 	.word	0x0800ac0b
 800ab78:	0800ac85 	.word	0x0800ac85
 800ab7c:	0800aa9b 	.word	0x0800aa9b
				case 0:
					get_base();
 800ab80:	f006 ffac 	bl	8011adc <get_base>
					break;
 800ab84:	e0bb      	b.n	800acfe <sample_course_run+0x276>

				case 1:
					//----サンプルコース1　爆速ターン連続----
					run_mode = 5;
 800ab86:	4b62      	ldr	r3, [pc, #392]	; (800ad10 <sample_course_run+0x288>)
 800ab88:	2205      	movs	r2, #5
 800ab8a:	701a      	strb	r2, [r3, #0]

					half_sectionA();
 800ab8c:	f7fb f826 	bl	8005bdc <half_sectionA>
					slalom_R90();
 800ab90:	f7fb feb6 	bl	8006900 <slalom_R90>
					slalom_L90();
 800ab94:	f7fb ffe0 	bl	8006b58 <slalom_L90>
					slalom_L90();
 800ab98:	f7fb ffde 	bl	8006b58 <slalom_L90>
					slalom_R90();
 800ab9c:	f7fb feb0 	bl	8006900 <slalom_R90>
					slalom_R90();
 800aba0:	f7fb feae 	bl	8006900 <slalom_R90>
					for(int k=0; k<5; k++){
 800aba4:	2300      	movs	r3, #0
 800aba6:	603b      	str	r3, [r7, #0]
 800aba8:	e00e      	b.n	800abc8 <sample_course_run+0x140>
						slalom_R90();
 800abaa:	f7fb fea9 	bl	8006900 <slalom_R90>
						slalom_R90();
 800abae:	f7fb fea7 	bl	8006900 <slalom_R90>
						slalom_L90();
 800abb2:	f7fb ffd1 	bl	8006b58 <slalom_L90>
						slalom_L90();
 800abb6:	f7fb ffcf 	bl	8006b58 <slalom_L90>
						slalom_R90();
 800abba:	f7fb fea1 	bl	8006900 <slalom_R90>
						slalom_R90();
 800abbe:	f7fb fe9f 	bl	8006900 <slalom_R90>
					for(int k=0; k<5; k++){
 800abc2:	683b      	ldr	r3, [r7, #0]
 800abc4:	3301      	adds	r3, #1
 800abc6:	603b      	str	r3, [r7, #0]
 800abc8:	683b      	ldr	r3, [r7, #0]
 800abca:	2b04      	cmp	r3, #4
 800abcc:	dded      	ble.n	800abaa <sample_course_run+0x122>
					}
					half_sectionD();
 800abce:	f7fb f86b 	bl	8005ca8 <half_sectionD>
					break;
 800abd2:	e094      	b.n	800acfe <sample_course_run+0x276>

				case 2:
					//----サンプルコース1　超信地----
					run_mode = 5;
 800abd4:	4b4e      	ldr	r3, [pc, #312]	; (800ad10 <sample_course_run+0x288>)
 800abd6:	2205      	movs	r2, #5
 800abd8:	701a      	strb	r2, [r3, #0]

					half_sectionA();
 800abda:	f7fa ffff 	bl	8005bdc <half_sectionA>
					slalom_R90();
 800abde:	f7fb fe8f 	bl	8006900 <slalom_R90>
					slalom_L90();
 800abe2:	f7fb ffb9 	bl	8006b58 <slalom_L90>
					slalom_R90();
 800abe6:	f7fb fe8b 	bl	8006900 <slalom_R90>
					slalom_L90();
 800abea:	f7fb ffb5 	bl	8006b58 <slalom_L90>
					slalom_R90();
 800abee:	f7fb fe87 	bl	8006900 <slalom_R90>
					half_sectionD();
 800abf2:	f7fb f859 	bl	8005ca8 <half_sectionD>
					break;
 800abf6:	e082      	b.n	800acfe <sample_course_run+0x276>

				case 3:
					//---サンプルコース2　スラローム----
					half_sectionA();
 800abf8:	f7fa fff0 	bl	8005bdc <half_sectionA>
					slalom_R90();
 800abfc:	f7fb fe80 	bl	8006900 <slalom_R90>
					slalom_R90();
 800ac00:	f7fb fe7e 	bl	8006900 <slalom_R90>
					half_sectionD();
 800ac04:	f7fb f850 	bl	8005ca8 <half_sectionD>
					break;
 800ac08:	e079      	b.n	800acfe <sample_course_run+0x276>
				case 4:
					break;

				case 5:
					//----スラローム走行&全面探索スラローム走行----
					printf("Slalom Run & All Map Run.\n");
 800ac0a:	4842      	ldr	r0, [pc, #264]	; (800ad14 <sample_course_run+0x28c>)
 800ac0c:	f007 fe00 	bl	8012810 <puts>

					MF.FLAG.SCND = 0;
 800ac10:	4a41      	ldr	r2, [pc, #260]	; (800ad18 <sample_course_run+0x290>)
 800ac12:	8813      	ldrh	r3, [r2, #0]
 800ac14:	f36f 1345 	bfc	r3, #5, #1
 800ac18:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800ac1a:	4a3f      	ldr	r2, [pc, #252]	; (800ad18 <sample_course_run+0x290>)
 800ac1c:	8813      	ldrh	r3, [r2, #0]
 800ac1e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800ac22:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800ac24:	4a3c      	ldr	r2, [pc, #240]	; (800ad18 <sample_course_run+0x290>)
 800ac26:	8813      	ldrh	r3, [r2, #0]
 800ac28:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800ac2c:	8013      	strh	r3, [r2, #0]
					start_mode = 0;
 800ac2e:	4b3b      	ldr	r3, [pc, #236]	; (800ad1c <sample_course_run+0x294>)
 800ac30:	2200      	movs	r2, #0
 800ac32:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 800ac34:	4b3a      	ldr	r3, [pc, #232]	; (800ad20 <sample_course_run+0x298>)
 800ac36:	f241 3288 	movw	r2, #5000	; 0x1388
 800ac3a:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 800;
 800ac3c:	4b39      	ldr	r3, [pc, #228]	; (800ad24 <sample_course_run+0x29c>)
 800ac3e:	f44f 7248 	mov.w	r2, #800	; 0x320
 800ac42:	801a      	strh	r2, [r3, #0]

					goal_x = GOAL_X;
 800ac44:	4b38      	ldr	r3, [pc, #224]	; (800ad28 <sample_course_run+0x2a0>)
 800ac46:	2207      	movs	r2, #7
 800ac48:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800ac4a:	4b38      	ldr	r3, [pc, #224]	; (800ad2c <sample_course_run+0x2a4>)
 800ac4c:	2207      	movs	r2, #7
 800ac4e:	701a      	strb	r2, [r3, #0]

					get_base();
 800ac50:	f006 ff44 	bl	8011adc <get_base>

					searchC();
 800ac54:	f003 ff6c 	bl	800eb30 <searchC>
					HAL_Delay(2000);
 800ac58:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800ac5c:	f7f6 f9de 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800ac60:	4b32      	ldr	r3, [pc, #200]	; (800ad2c <sample_course_run+0x2a4>)
 800ac62:	2200      	movs	r2, #0
 800ac64:	701a      	strb	r2, [r3, #0]
 800ac66:	4b31      	ldr	r3, [pc, #196]	; (800ad2c <sample_course_run+0x2a4>)
 800ac68:	781a      	ldrb	r2, [r3, #0]
 800ac6a:	4b2f      	ldr	r3, [pc, #188]	; (800ad28 <sample_course_run+0x2a0>)
 800ac6c:	701a      	strb	r2, [r3, #0]
					searchE();
 800ac6e:	f004 fb2d 	bl	800f2cc <searchE>

					searchC();
 800ac72:	f003 ff5d 	bl	800eb30 <searchC>
					goal_x = GOAL_X;
 800ac76:	4b2c      	ldr	r3, [pc, #176]	; (800ad28 <sample_course_run+0x2a0>)
 800ac78:	2207      	movs	r2, #7
 800ac7a:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800ac7c:	4b2b      	ldr	r3, [pc, #172]	; (800ad2c <sample_course_run+0x2a4>)
 800ac7e:	2207      	movs	r2, #7
 800ac80:	701a      	strb	r2, [r3, #0]

					break;
 800ac82:	e03c      	b.n	800acfe <sample_course_run+0x276>

				case 6:
					//----スラローム走行&全面探索スラローム走行----
					printf("Slalom Run & All Map Run.\n");
 800ac84:	4823      	ldr	r0, [pc, #140]	; (800ad14 <sample_course_run+0x28c>)
 800ac86:	f007 fdc3 	bl	8012810 <puts>

					MF.FLAG.SCND = 0;
 800ac8a:	4a23      	ldr	r2, [pc, #140]	; (800ad18 <sample_course_run+0x290>)
 800ac8c:	8813      	ldrh	r3, [r2, #0]
 800ac8e:	f36f 1345 	bfc	r3, #5, #1
 800ac92:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800ac94:	4a20      	ldr	r2, [pc, #128]	; (800ad18 <sample_course_run+0x290>)
 800ac96:	8813      	ldrh	r3, [r2, #0]
 800ac98:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800ac9c:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800ac9e:	4a1e      	ldr	r2, [pc, #120]	; (800ad18 <sample_course_run+0x290>)
 800aca0:	8813      	ldrh	r3, [r2, #0]
 800aca2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800aca6:	8013      	strh	r3, [r2, #0]
					start_mode = 0;
 800aca8:	4b1c      	ldr	r3, [pc, #112]	; (800ad1c <sample_course_run+0x294>)
 800acaa:	2200      	movs	r2, #0
 800acac:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 800acae:	4b1c      	ldr	r3, [pc, #112]	; (800ad20 <sample_course_run+0x298>)
 800acb0:	f241 3288 	movw	r2, #5000	; 0x1388
 800acb4:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 800;
 800acb6:	4b1b      	ldr	r3, [pc, #108]	; (800ad24 <sample_course_run+0x29c>)
 800acb8:	f44f 7248 	mov.w	r2, #800	; 0x320
 800acbc:	801a      	strh	r2, [r3, #0]
					goal_x = 7;
 800acbe:	4b1a      	ldr	r3, [pc, #104]	; (800ad28 <sample_course_run+0x2a0>)
 800acc0:	2207      	movs	r2, #7
 800acc2:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800acc4:	4b19      	ldr	r3, [pc, #100]	; (800ad2c <sample_course_run+0x2a4>)
 800acc6:	2207      	movs	r2, #7
 800acc8:	701a      	strb	r2, [r3, #0]

					get_base();
 800acca:	f006 ff07 	bl	8011adc <get_base>

					searchC();
 800acce:	f003 ff2f 	bl	800eb30 <searchC>
					HAL_Delay(2000);
 800acd2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800acd6:	f7f6 f9a1 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800acda:	4b14      	ldr	r3, [pc, #80]	; (800ad2c <sample_course_run+0x2a4>)
 800acdc:	2200      	movs	r2, #0
 800acde:	701a      	strb	r2, [r3, #0]
 800ace0:	4b12      	ldr	r3, [pc, #72]	; (800ad2c <sample_course_run+0x2a4>)
 800ace2:	781a      	ldrb	r2, [r3, #0]
 800ace4:	4b10      	ldr	r3, [pc, #64]	; (800ad28 <sample_course_run+0x2a0>)
 800ace6:	701a      	strb	r2, [r3, #0]
					searchE();
 800ace8:	f004 faf0 	bl	800f2cc <searchE>

					searchC();
 800acec:	f003 ff20 	bl	800eb30 <searchC>
					goal_x = 7;
 800acf0:	4b0d      	ldr	r3, [pc, #52]	; (800ad28 <sample_course_run+0x2a0>)
 800acf2:	2207      	movs	r2, #7
 800acf4:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800acf6:	4b0d      	ldr	r3, [pc, #52]	; (800ad2c <sample_course_run+0x2a4>)
 800acf8:	2207      	movs	r2, #7
 800acfa:	701a      	strb	r2, [r3, #0]

					break;
 800acfc:	bf00      	nop
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 800acfe:	e6cc      	b.n	800aa9a <sample_course_run+0x12>
 800ad00:	08013bd0 	.word	0x08013bd0
 800ad04:	20000aec 	.word	0x20000aec
 800ad08:	08013964 	.word	0x08013964
 800ad0c:	40020000 	.word	0x40020000
 800ad10:	20000456 	.word	0x20000456
 800ad14:	08013bf0 	.word	0x08013bf0
 800ad18:	20000f68 	.word	0x20000f68
 800ad1c:	200015c8 	.word	0x200015c8
 800ad20:	20000454 	.word	0x20000454
 800ad24:	20000f7c 	.word	0x20000f7c
 800ad28:	20000bb0 	.word	0x20000bb0
 800ad2c:	20000b4c 	.word	0x20000b4c

0800ad30 <slalom_run>:
//slalom_run
// スラローム走行モード
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void slalom_run(void){
 800ad30:	b580      	push	{r7, lr}
 800ad32:	b082      	sub	sp, #8
 800ad34:	af00      	add	r7, sp, #0

	int mode = 0;
 800ad36:	2300      	movs	r3, #0
 800ad38:	607b      	str	r3, [r7, #4]
	printf("Slalom Run, Mode : %d\n", mode);
 800ad3a:	6879      	ldr	r1, [r7, #4]
 800ad3c:	48a6      	ldr	r0, [pc, #664]	; (800afd8 <slalom_run+0x2a8>)
 800ad3e:	f007 fcf3 	bl	8012728 <iprintf>

	while(1){
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	b2db      	uxtb	r3, r3
 800ad46:	f003 0301 	and.w	r3, r3, #1
 800ad4a:	b2d8      	uxtb	r0, r3
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	b2db      	uxtb	r3, r3
 800ad50:	f003 0302 	and.w	r3, r3, #2
 800ad54:	b2d9      	uxtb	r1, r3
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	b2db      	uxtb	r3, r3
 800ad5a:	f003 0304 	and.w	r3, r3, #4
 800ad5e:	b2db      	uxtb	r3, r3
 800ad60:	461a      	mov	r2, r3
 800ad62:	f006 ff13 	bl	8011b8c <led_write>
		  if(dist_r >= 20){
 800ad66:	4b9d      	ldr	r3, [pc, #628]	; (800afdc <slalom_run+0x2ac>)
 800ad68:	edd3 7a00 	vldr	s15, [r3]
 800ad6c:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 800ad70:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ad74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ad78:	db0f      	blt.n	800ad9a <slalom_run+0x6a>
			  mode++;
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	3301      	adds	r3, #1
 800ad7e:	607b      	str	r3, [r7, #4]
			  dist_r = 0;
 800ad80:	4b96      	ldr	r3, [pc, #600]	; (800afdc <slalom_run+0x2ac>)
 800ad82:	f04f 0200 	mov.w	r2, #0
 800ad86:	601a      	str	r2, [r3, #0]
			  if(mode > 7){
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	2b07      	cmp	r3, #7
 800ad8c:	dd01      	ble.n	800ad92 <slalom_run+0x62>
				  mode = 0;
 800ad8e:	2300      	movs	r3, #0
 800ad90:	607b      	str	r3, [r7, #4]
			  }
			  printf("Mode : %d\n", mode);
 800ad92:	6879      	ldr	r1, [r7, #4]
 800ad94:	4892      	ldr	r0, [pc, #584]	; (800afe0 <slalom_run+0x2b0>)
 800ad96:	f007 fcc7 	bl	8012728 <iprintf>
		  }
		  if(dist_r <= -20){
 800ad9a:	4b90      	ldr	r3, [pc, #576]	; (800afdc <slalom_run+0x2ac>)
 800ad9c:	edd3 7a00 	vldr	s15, [r3]
 800ada0:	eebb 7a04 	vmov.f32	s14, #180	; 0xc1a00000 -20.0
 800ada4:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ada8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800adac:	d80f      	bhi.n	800adce <slalom_run+0x9e>
			  mode--;
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	3b01      	subs	r3, #1
 800adb2:	607b      	str	r3, [r7, #4]
			  dist_r = 0;
 800adb4:	4b89      	ldr	r3, [pc, #548]	; (800afdc <slalom_run+0x2ac>)
 800adb6:	f04f 0200 	mov.w	r2, #0
 800adba:	601a      	str	r2, [r3, #0]
			  if(mode < 0){
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	2b00      	cmp	r3, #0
 800adc0:	da01      	bge.n	800adc6 <slalom_run+0x96>
				  mode = 7;
 800adc2:	2307      	movs	r3, #7
 800adc4:	607b      	str	r3, [r7, #4]
			  }
			  printf("Mode : %d\n", mode);
 800adc6:	6879      	ldr	r1, [r7, #4]
 800adc8:	4885      	ldr	r0, [pc, #532]	; (800afe0 <slalom_run+0x2b0>)
 800adca:	f007 fcad 	bl	8012728 <iprintf>
		  }
		  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET){
 800adce:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800add2:	4884      	ldr	r0, [pc, #528]	; (800afe4 <slalom_run+0x2b4>)
 800add4:	f7f7 fa7e 	bl	80022d4 <HAL_GPIO_ReadPin>
 800add8:	4603      	mov	r3, r0
 800adda:	2b00      	cmp	r3, #0
 800addc:	d1b1      	bne.n	800ad42 <slalom_run+0x12>
			  HAL_Delay(50);
 800adde:	2032      	movs	r0, #50	; 0x32
 800ade0:	f7f6 f91c 	bl	800101c <HAL_Delay>
			  while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET);
 800ade4:	bf00      	nop
 800ade6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800adea:	487e      	ldr	r0, [pc, #504]	; (800afe4 <slalom_run+0x2b4>)
 800adec:	f7f7 fa72 	bl	80022d4 <HAL_GPIO_ReadPin>
 800adf0:	4603      	mov	r3, r0
 800adf2:	2b00      	cmp	r3, #0
 800adf4:	d0f7      	beq.n	800ade6 <slalom_run+0xb6>
			  drive_ready();
 800adf6:	f7f9 ff43 	bl	8004c80 <drive_ready>

			  switch(mode){
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	2b07      	cmp	r3, #7
 800adfe:	d8a0      	bhi.n	800ad42 <slalom_run+0x12>
 800ae00:	a201      	add	r2, pc, #4	; (adr r2, 800ae08 <slalom_run+0xd8>)
 800ae02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae06:	bf00      	nop
 800ae08:	0800ae29 	.word	0x0800ae29
 800ae0c:	0800ae9b 	.word	0x0800ae9b
 800ae10:	0800aef3 	.word	0x0800aef3
 800ae14:	0800af65 	.word	0x0800af65
 800ae18:	0800b011 	.word	0x0800b011
 800ae1c:	0800b083 	.word	0x0800b083
 800ae20:	0800b0ed 	.word	0x0800b0ed
 800ae24:	0800b171 	.word	0x0800b171

			  case 0:
					//----一次探索スラローム走行----
					printf("First Run. (Slalom)\n");
 800ae28:	486f      	ldr	r0, [pc, #444]	; (800afe8 <slalom_run+0x2b8>)
 800ae2a:	f007 fcf1 	bl	8012810 <puts>

					MF.FLAG.SCND = 0;
 800ae2e:	4a6f      	ldr	r2, [pc, #444]	; (800afec <slalom_run+0x2bc>)
 800ae30:	8813      	ldrh	r3, [r2, #0]
 800ae32:	f36f 1345 	bfc	r3, #5, #1
 800ae36:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 0;
 800ae38:	4a6c      	ldr	r2, [pc, #432]	; (800afec <slalom_run+0x2bc>)
 800ae3a:	8813      	ldrh	r3, [r2, #0]
 800ae3c:	f36f 2349 	bfc	r3, #9, #1
 800ae40:	8013      	strh	r3, [r2, #0]
					run_mode = LOW;
 800ae42:	4b6b      	ldr	r3, [pc, #428]	; (800aff0 <slalom_run+0x2c0>)
 800ae44:	2201      	movs	r2, #1
 800ae46:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800ae48:	4b6a      	ldr	r3, [pc, #424]	; (800aff4 <slalom_run+0x2c4>)
 800ae4a:	2200      	movs	r2, #0
 800ae4c:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 800ae4e:	4b6a      	ldr	r3, [pc, #424]	; (800aff8 <slalom_run+0x2c8>)
 800ae50:	f241 3288 	movw	r2, #5000	; 0x1388
 800ae54:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 800;
 800ae56:	4b69      	ldr	r3, [pc, #420]	; (800affc <slalom_run+0x2cc>)
 800ae58:	f44f 7248 	mov.w	r2, #800	; 0x320
 800ae5c:	801a      	strh	r2, [r3, #0]


					goal_x = GOAL_X;
 800ae5e:	4b68      	ldr	r3, [pc, #416]	; (800b000 <slalom_run+0x2d0>)
 800ae60:	2207      	movs	r2, #7
 800ae62:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800ae64:	4b67      	ldr	r3, [pc, #412]	; (800b004 <slalom_run+0x2d4>)
 800ae66:	2207      	movs	r2, #7
 800ae68:	701a      	strb	r2, [r3, #0]

					get_base();
 800ae6a:	f006 fe37 	bl	8011adc <get_base>

					searchC();
 800ae6e:	f003 fe5f 	bl	800eb30 <searchC>
					HAL_Delay(2000);
 800ae72:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800ae76:	f7f6 f8d1 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800ae7a:	4b62      	ldr	r3, [pc, #392]	; (800b004 <slalom_run+0x2d4>)
 800ae7c:	2200      	movs	r2, #0
 800ae7e:	701a      	strb	r2, [r3, #0]
 800ae80:	4b60      	ldr	r3, [pc, #384]	; (800b004 <slalom_run+0x2d4>)
 800ae82:	781a      	ldrb	r2, [r3, #0]
 800ae84:	4b5e      	ldr	r3, [pc, #376]	; (800b000 <slalom_run+0x2d0>)
 800ae86:	701a      	strb	r2, [r3, #0]
					searchC();
 800ae88:	f003 fe52 	bl	800eb30 <searchC>

					goal_x = GOAL_X;
 800ae8c:	4b5c      	ldr	r3, [pc, #368]	; (800b000 <slalom_run+0x2d0>)
 800ae8e:	2207      	movs	r2, #7
 800ae90:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800ae92:	4b5c      	ldr	r3, [pc, #368]	; (800b004 <slalom_run+0x2d4>)
 800ae94:	2207      	movs	r2, #7
 800ae96:	701a      	strb	r2, [r3, #0]
					break;
 800ae98:	e1ac      	b.n	800b1f4 <slalom_run+0x4c4>

				case 1:
					//----二次探索スラローム走行----
					printf("Second Run. (Slalom)\n");
 800ae9a:	485b      	ldr	r0, [pc, #364]	; (800b008 <slalom_run+0x2d8>)
 800ae9c:	f007 fcb8 	bl	8012810 <puts>

					MF.FLAG.SCND = 1;
 800aea0:	4a52      	ldr	r2, [pc, #328]	; (800afec <slalom_run+0x2bc>)
 800aea2:	8813      	ldrh	r3, [r2, #0]
 800aea4:	f043 0320 	orr.w	r3, r3, #32
 800aea8:	8013      	strh	r3, [r2, #0]
					run_mode = LOW;
 800aeaa:	4b51      	ldr	r3, [pc, #324]	; (800aff0 <slalom_run+0x2c0>)
 800aeac:	2201      	movs	r2, #1
 800aeae:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800aeb0:	4b50      	ldr	r3, [pc, #320]	; (800aff4 <slalom_run+0x2c4>)
 800aeb2:	2200      	movs	r2, #0
 800aeb4:	701a      	strb	r2, [r3, #0]
					goal_x = GOAL_X;
 800aeb6:	4b52      	ldr	r3, [pc, #328]	; (800b000 <slalom_run+0x2d0>)
 800aeb8:	2207      	movs	r2, #7
 800aeba:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800aebc:	4b51      	ldr	r3, [pc, #324]	; (800b004 <slalom_run+0x2d4>)
 800aebe:	2207      	movs	r2, #7
 800aec0:	701a      	strb	r2, [r3, #0]

					get_base();
 800aec2:	f006 fe0b 	bl	8011adc <get_base>

					searchC();
 800aec6:	f003 fe33 	bl	800eb30 <searchC>
					HAL_Delay(2000);
 800aeca:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800aece:	f7f6 f8a5 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800aed2:	4b4c      	ldr	r3, [pc, #304]	; (800b004 <slalom_run+0x2d4>)
 800aed4:	2200      	movs	r2, #0
 800aed6:	701a      	strb	r2, [r3, #0]
 800aed8:	4b4a      	ldr	r3, [pc, #296]	; (800b004 <slalom_run+0x2d4>)
 800aeda:	781a      	ldrb	r2, [r3, #0]
 800aedc:	4b48      	ldr	r3, [pc, #288]	; (800b000 <slalom_run+0x2d0>)
 800aede:	701a      	strb	r2, [r3, #0]
					searchC();
 800aee0:	f003 fe26 	bl	800eb30 <searchC>

					goal_x = GOAL_X;
 800aee4:	4b46      	ldr	r3, [pc, #280]	; (800b000 <slalom_run+0x2d0>)
 800aee6:	2207      	movs	r2, #7
 800aee8:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800aeea:	4b46      	ldr	r3, [pc, #280]	; (800b004 <slalom_run+0x2d4>)
 800aeec:	2207      	movs	r2, #7
 800aeee:	701a      	strb	r2, [r3, #0]
					break;
 800aef0:	e180      	b.n	800b1f4 <slalom_run+0x4c4>

				case 2:
					//----二次探索スラローム走行+既知区間加速----
					printf("Second Run. (Slalom+accel)\n");
 800aef2:	4846      	ldr	r0, [pc, #280]	; (800b00c <slalom_run+0x2dc>)
 800aef4:	f007 fc8c 	bl	8012810 <puts>

					MF.FLAG.SCND = 1;
 800aef8:	4a3c      	ldr	r2, [pc, #240]	; (800afec <slalom_run+0x2bc>)
 800aefa:	8813      	ldrh	r3, [r2, #0]
 800aefc:	f043 0320 	orr.w	r3, r3, #32
 800af00:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800af02:	4a3a      	ldr	r2, [pc, #232]	; (800afec <slalom_run+0x2bc>)
 800af04:	8813      	ldrh	r3, [r2, #0]
 800af06:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800af0a:	8013      	strh	r3, [r2, #0]
					run_mode = LOW;
 800af0c:	4b38      	ldr	r3, [pc, #224]	; (800aff0 <slalom_run+0x2c0>)
 800af0e:	2201      	movs	r2, #1
 800af10:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800af12:	4b38      	ldr	r3, [pc, #224]	; (800aff4 <slalom_run+0x2c4>)
 800af14:	2200      	movs	r2, #0
 800af16:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 800af18:	4b37      	ldr	r3, [pc, #220]	; (800aff8 <slalom_run+0x2c8>)
 800af1a:	f241 3288 	movw	r2, #5000	; 0x1388
 800af1e:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 600;
 800af20:	4b36      	ldr	r3, [pc, #216]	; (800affc <slalom_run+0x2cc>)
 800af22:	f44f 7216 	mov.w	r2, #600	; 0x258
 800af26:	801a      	strh	r2, [r3, #0]
					goal_x = GOAL_X;
 800af28:	4b35      	ldr	r3, [pc, #212]	; (800b000 <slalom_run+0x2d0>)
 800af2a:	2207      	movs	r2, #7
 800af2c:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800af2e:	4b35      	ldr	r3, [pc, #212]	; (800b004 <slalom_run+0x2d4>)
 800af30:	2207      	movs	r2, #7
 800af32:	701a      	strb	r2, [r3, #0]

					get_base();
 800af34:	f006 fdd2 	bl	8011adc <get_base>

					searchD();
 800af38:	f004 f8de 	bl	800f0f8 <searchD>
					HAL_Delay(2000);
 800af3c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800af40:	f7f6 f86c 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800af44:	4b2f      	ldr	r3, [pc, #188]	; (800b004 <slalom_run+0x2d4>)
 800af46:	2200      	movs	r2, #0
 800af48:	701a      	strb	r2, [r3, #0]
 800af4a:	4b2e      	ldr	r3, [pc, #184]	; (800b004 <slalom_run+0x2d4>)
 800af4c:	781a      	ldrb	r2, [r3, #0]
 800af4e:	4b2c      	ldr	r3, [pc, #176]	; (800b000 <slalom_run+0x2d0>)
 800af50:	701a      	strb	r2, [r3, #0]
					searchD();
 800af52:	f004 f8d1 	bl	800f0f8 <searchD>

					goal_x = GOAL_X;
 800af56:	4b2a      	ldr	r3, [pc, #168]	; (800b000 <slalom_run+0x2d0>)
 800af58:	2207      	movs	r2, #7
 800af5a:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800af5c:	4b29      	ldr	r3, [pc, #164]	; (800b004 <slalom_run+0x2d4>)
 800af5e:	2207      	movs	r2, #7
 800af60:	701a      	strb	r2, [r3, #0]
					break;
 800af62:	e147      	b.n	800b1f4 <slalom_run+0x4c4>

				case 3:
					//----二次探索スラローム走行+既知区間加速----
					printf("Second Run. (Slalom+accel)\n");
 800af64:	4829      	ldr	r0, [pc, #164]	; (800b00c <slalom_run+0x2dc>)
 800af66:	f007 fc53 	bl	8012810 <puts>

					MF.FLAG.SCND = 1;
 800af6a:	4a20      	ldr	r2, [pc, #128]	; (800afec <slalom_run+0x2bc>)
 800af6c:	8813      	ldrh	r3, [r2, #0]
 800af6e:	f043 0320 	orr.w	r3, r3, #32
 800af72:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800af74:	4a1d      	ldr	r2, [pc, #116]	; (800afec <slalom_run+0x2bc>)
 800af76:	8813      	ldrh	r3, [r2, #0]
 800af78:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800af7c:	8013      	strh	r3, [r2, #0]
					run_mode = LOW;
 800af7e:	4b1c      	ldr	r3, [pc, #112]	; (800aff0 <slalom_run+0x2c0>)
 800af80:	2201      	movs	r2, #1
 800af82:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800af84:	4b1b      	ldr	r3, [pc, #108]	; (800aff4 <slalom_run+0x2c4>)
 800af86:	2200      	movs	r2, #0
 800af88:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 800af8a:	4b1b      	ldr	r3, [pc, #108]	; (800aff8 <slalom_run+0x2c8>)
 800af8c:	f241 3288 	movw	r2, #5000	; 0x1388
 800af90:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1000;
 800af92:	4b1a      	ldr	r3, [pc, #104]	; (800affc <slalom_run+0x2cc>)
 800af94:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800af98:	801a      	strh	r2, [r3, #0]
					goal_x = GOAL_X;
 800af9a:	4b19      	ldr	r3, [pc, #100]	; (800b000 <slalom_run+0x2d0>)
 800af9c:	2207      	movs	r2, #7
 800af9e:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800afa0:	4b18      	ldr	r3, [pc, #96]	; (800b004 <slalom_run+0x2d4>)
 800afa2:	2207      	movs	r2, #7
 800afa4:	701a      	strb	r2, [r3, #0]

					get_base();
 800afa6:	f006 fd99 	bl	8011adc <get_base>

					searchD();
 800afaa:	f004 f8a5 	bl	800f0f8 <searchD>
					HAL_Delay(2000);
 800afae:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800afb2:	f7f6 f833 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800afb6:	4b13      	ldr	r3, [pc, #76]	; (800b004 <slalom_run+0x2d4>)
 800afb8:	2200      	movs	r2, #0
 800afba:	701a      	strb	r2, [r3, #0]
 800afbc:	4b11      	ldr	r3, [pc, #68]	; (800b004 <slalom_run+0x2d4>)
 800afbe:	781a      	ldrb	r2, [r3, #0]
 800afc0:	4b0f      	ldr	r3, [pc, #60]	; (800b000 <slalom_run+0x2d0>)
 800afc2:	701a      	strb	r2, [r3, #0]
					searchD();
 800afc4:	f004 f898 	bl	800f0f8 <searchD>

					goal_x = GOAL_X;
 800afc8:	4b0d      	ldr	r3, [pc, #52]	; (800b000 <slalom_run+0x2d0>)
 800afca:	2207      	movs	r2, #7
 800afcc:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800afce:	4b0d      	ldr	r3, [pc, #52]	; (800b004 <slalom_run+0x2d4>)
 800afd0:	2207      	movs	r2, #7
 800afd2:	701a      	strb	r2, [r3, #0]
					break;
 800afd4:	e10e      	b.n	800b1f4 <slalom_run+0x4c4>
 800afd6:	bf00      	nop
 800afd8:	08013c64 	.word	0x08013c64
 800afdc:	20000aec 	.word	0x20000aec
 800afe0:	08013964 	.word	0x08013964
 800afe4:	40020000 	.word	0x40020000
 800afe8:	08013b44 	.word	0x08013b44
 800afec:	20000f68 	.word	0x20000f68
 800aff0:	20000456 	.word	0x20000456
 800aff4:	200015c8 	.word	0x200015c8
 800aff8:	20000454 	.word	0x20000454
 800affc:	20000f7c 	.word	0x20000f7c
 800b000:	20000bb0 	.word	0x20000bb0
 800b004:	20000b4c 	.word	0x20000b4c
 800b008:	08013c7c 	.word	0x08013c7c
 800b00c:	08013c94 	.word	0x08013c94

				case 4:
					//----二次探索スラローム走行+既知区間加速----
					printf("Second Run. (Slalom+accel)\n");
 800b010:	4879      	ldr	r0, [pc, #484]	; (800b1f8 <slalom_run+0x4c8>)
 800b012:	f007 fbfd 	bl	8012810 <puts>

					MF.FLAG.SCND = 1;
 800b016:	4a79      	ldr	r2, [pc, #484]	; (800b1fc <slalom_run+0x4cc>)
 800b018:	8813      	ldrh	r3, [r2, #0]
 800b01a:	f043 0320 	orr.w	r3, r3, #32
 800b01e:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800b020:	4a76      	ldr	r2, [pc, #472]	; (800b1fc <slalom_run+0x4cc>)
 800b022:	8813      	ldrh	r3, [r2, #0]
 800b024:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b028:	8013      	strh	r3, [r2, #0]
					run_mode = LOW;
 800b02a:	4b75      	ldr	r3, [pc, #468]	; (800b200 <slalom_run+0x4d0>)
 800b02c:	2201      	movs	r2, #1
 800b02e:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800b030:	4b74      	ldr	r3, [pc, #464]	; (800b204 <slalom_run+0x4d4>)
 800b032:	2200      	movs	r2, #0
 800b034:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 800b036:	4b74      	ldr	r3, [pc, #464]	; (800b208 <slalom_run+0x4d8>)
 800b038:	f241 3288 	movw	r2, #5000	; 0x1388
 800b03c:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1500;
 800b03e:	4b73      	ldr	r3, [pc, #460]	; (800b20c <slalom_run+0x4dc>)
 800b040:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800b044:	801a      	strh	r2, [r3, #0]
					goal_x = GOAL_X;
 800b046:	4b72      	ldr	r3, [pc, #456]	; (800b210 <slalom_run+0x4e0>)
 800b048:	2207      	movs	r2, #7
 800b04a:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800b04c:	4b71      	ldr	r3, [pc, #452]	; (800b214 <slalom_run+0x4e4>)
 800b04e:	2207      	movs	r2, #7
 800b050:	701a      	strb	r2, [r3, #0]

					get_base();
 800b052:	f006 fd43 	bl	8011adc <get_base>

					searchD();
 800b056:	f004 f84f 	bl	800f0f8 <searchD>
					HAL_Delay(2000);
 800b05a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800b05e:	f7f5 ffdd 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800b062:	4b6c      	ldr	r3, [pc, #432]	; (800b214 <slalom_run+0x4e4>)
 800b064:	2200      	movs	r2, #0
 800b066:	701a      	strb	r2, [r3, #0]
 800b068:	4b6a      	ldr	r3, [pc, #424]	; (800b214 <slalom_run+0x4e4>)
 800b06a:	781a      	ldrb	r2, [r3, #0]
 800b06c:	4b68      	ldr	r3, [pc, #416]	; (800b210 <slalom_run+0x4e0>)
 800b06e:	701a      	strb	r2, [r3, #0]
					searchD();
 800b070:	f004 f842 	bl	800f0f8 <searchD>

					goal_x = GOAL_X;
 800b074:	4b66      	ldr	r3, [pc, #408]	; (800b210 <slalom_run+0x4e0>)
 800b076:	2207      	movs	r2, #7
 800b078:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800b07a:	4b66      	ldr	r3, [pc, #408]	; (800b214 <slalom_run+0x4e4>)
 800b07c:	2207      	movs	r2, #7
 800b07e:	701a      	strb	r2, [r3, #0]
					break;
 800b080:	e0b8      	b.n	800b1f4 <slalom_run+0x4c4>

				case 5:
					//----二次走行スラローム+直線優先----
					printf("High Speed Run. (Slalom)\n");
 800b082:	4865      	ldr	r0, [pc, #404]	; (800b218 <slalom_run+0x4e8>)
 800b084:	f007 fbc4 	bl	8012810 <puts>

					MF.FLAG.SCND = 1;
 800b088:	4a5c      	ldr	r2, [pc, #368]	; (800b1fc <slalom_run+0x4cc>)
 800b08a:	8813      	ldrh	r3, [r2, #0]
 800b08c:	f043 0320 	orr.w	r3, r3, #32
 800b090:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800b092:	4a5a      	ldr	r2, [pc, #360]	; (800b1fc <slalom_run+0x4cc>)
 800b094:	8813      	ldrh	r3, [r2, #0]
 800b096:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800b09a:	8013      	strh	r3, [r2, #0]
					run_mode = LOW;
 800b09c:	4b58      	ldr	r3, [pc, #352]	; (800b200 <slalom_run+0x4d0>)
 800b09e:	2201      	movs	r2, #1
 800b0a0:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800b0a2:	4b58      	ldr	r3, [pc, #352]	; (800b204 <slalom_run+0x4d4>)
 800b0a4:	2200      	movs	r2, #0
 800b0a6:	701a      	strb	r2, [r3, #0]
					goal_x = GOAL_X;
 800b0a8:	4b59      	ldr	r3, [pc, #356]	; (800b210 <slalom_run+0x4e0>)
 800b0aa:	2207      	movs	r2, #7
 800b0ac:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800b0ae:	4b59      	ldr	r3, [pc, #356]	; (800b214 <slalom_run+0x4e4>)
 800b0b0:	2207      	movs	r2, #7
 800b0b2:	701a      	strb	r2, [r3, #0]

					get_base();
 800b0b4:	f006 fd12 	bl	8011adc <get_base>

					HAL_Delay(5000);
 800b0b8:	f241 3088 	movw	r0, #5000	; 0x1388
 800b0bc:	f7f5 ffae 	bl	800101c <HAL_Delay>
					searchC();
 800b0c0:	f003 fd36 	bl	800eb30 <searchC>
					HAL_Delay(2000);
 800b0c4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800b0c8:	f7f5 ffa8 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800b0cc:	4b51      	ldr	r3, [pc, #324]	; (800b214 <slalom_run+0x4e4>)
 800b0ce:	2200      	movs	r2, #0
 800b0d0:	701a      	strb	r2, [r3, #0]
 800b0d2:	4b50      	ldr	r3, [pc, #320]	; (800b214 <slalom_run+0x4e4>)
 800b0d4:	781a      	ldrb	r2, [r3, #0]
 800b0d6:	4b4e      	ldr	r3, [pc, #312]	; (800b210 <slalom_run+0x4e0>)
 800b0d8:	701a      	strb	r2, [r3, #0]
					searchC();
 800b0da:	f003 fd29 	bl	800eb30 <searchC>

					goal_x = GOAL_X;
 800b0de:	4b4c      	ldr	r3, [pc, #304]	; (800b210 <slalom_run+0x4e0>)
 800b0e0:	2207      	movs	r2, #7
 800b0e2:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800b0e4:	4b4b      	ldr	r3, [pc, #300]	; (800b214 <slalom_run+0x4e4>)
 800b0e6:	2207      	movs	r2, #7
 800b0e8:	701a      	strb	r2, [r3, #0]
					break;
 800b0ea:	e083      	b.n	800b1f4 <slalom_run+0x4c4>

				case 6:
					//----二次走行スラロームHigh Speed+直線優先+既知区間加速----
					printf("High Speed Run. (Slalom)\n");
 800b0ec:	484a      	ldr	r0, [pc, #296]	; (800b218 <slalom_run+0x4e8>)
 800b0ee:	f007 fb8f 	bl	8012810 <puts>

					MF.FLAG.SCND = 1;
 800b0f2:	4a42      	ldr	r2, [pc, #264]	; (800b1fc <slalom_run+0x4cc>)
 800b0f4:	8813      	ldrh	r3, [r2, #0]
 800b0f6:	f043 0320 	orr.w	r3, r3, #32
 800b0fa:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800b0fc:	4a3f      	ldr	r2, [pc, #252]	; (800b1fc <slalom_run+0x4cc>)
 800b0fe:	8813      	ldrh	r3, [r2, #0]
 800b100:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800b104:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800b106:	4a3d      	ldr	r2, [pc, #244]	; (800b1fc <slalom_run+0x4cc>)
 800b108:	8813      	ldrh	r3, [r2, #0]
 800b10a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b10e:	8013      	strh	r3, [r2, #0]
					run_mode = HIGH;
 800b110:	4b3b      	ldr	r3, [pc, #236]	; (800b200 <slalom_run+0x4d0>)
 800b112:	2203      	movs	r2, #3
 800b114:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800b116:	4b3b      	ldr	r3, [pc, #236]	; (800b204 <slalom_run+0x4d4>)
 800b118:	2200      	movs	r2, #0
 800b11a:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 800b11c:	4b3a      	ldr	r3, [pc, #232]	; (800b208 <slalom_run+0x4d8>)
 800b11e:	f241 3288 	movw	r2, #5000	; 0x1388
 800b122:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1200;
 800b124:	4b39      	ldr	r3, [pc, #228]	; (800b20c <slalom_run+0x4dc>)
 800b126:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 800b12a:	801a      	strh	r2, [r3, #0]
					goal_x = GOAL_X;
 800b12c:	4b38      	ldr	r3, [pc, #224]	; (800b210 <slalom_run+0x4e0>)
 800b12e:	2207      	movs	r2, #7
 800b130:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800b132:	4b38      	ldr	r3, [pc, #224]	; (800b214 <slalom_run+0x4e4>)
 800b134:	2207      	movs	r2, #7
 800b136:	701a      	strb	r2, [r3, #0]

					get_base();
 800b138:	f006 fcd0 	bl	8011adc <get_base>

					HAL_Delay(5000);
 800b13c:	f241 3088 	movw	r0, #5000	; 0x1388
 800b140:	f7f5 ff6c 	bl	800101c <HAL_Delay>
					searchD();
 800b144:	f003 ffd8 	bl	800f0f8 <searchD>
					HAL_Delay(2000);
 800b148:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800b14c:	f7f5 ff66 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800b150:	4b30      	ldr	r3, [pc, #192]	; (800b214 <slalom_run+0x4e4>)
 800b152:	2200      	movs	r2, #0
 800b154:	701a      	strb	r2, [r3, #0]
 800b156:	4b2f      	ldr	r3, [pc, #188]	; (800b214 <slalom_run+0x4e4>)
 800b158:	781a      	ldrb	r2, [r3, #0]
 800b15a:	4b2d      	ldr	r3, [pc, #180]	; (800b210 <slalom_run+0x4e0>)
 800b15c:	701a      	strb	r2, [r3, #0]
					searchD();
 800b15e:	f003 ffcb 	bl	800f0f8 <searchD>

					goal_x = GOAL_X;
 800b162:	4b2b      	ldr	r3, [pc, #172]	; (800b210 <slalom_run+0x4e0>)
 800b164:	2207      	movs	r2, #7
 800b166:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800b168:	4b2a      	ldr	r3, [pc, #168]	; (800b214 <slalom_run+0x4e4>)
 800b16a:	2207      	movs	r2, #7
 800b16c:	701a      	strb	r2, [r3, #0]
					break;
 800b16e:	e041      	b.n	800b1f4 <slalom_run+0x4c4>

				case 7:
					//----二次走行スラロームHigh Speed+直線優先+既知区間加速----
					printf("High Speed Run. (Slalom)\n");
 800b170:	4829      	ldr	r0, [pc, #164]	; (800b218 <slalom_run+0x4e8>)
 800b172:	f007 fb4d 	bl	8012810 <puts>

					MF.FLAG.SCND = 1;
 800b176:	4a21      	ldr	r2, [pc, #132]	; (800b1fc <slalom_run+0x4cc>)
 800b178:	8813      	ldrh	r3, [r2, #0]
 800b17a:	f043 0320 	orr.w	r3, r3, #32
 800b17e:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800b180:	4a1e      	ldr	r2, [pc, #120]	; (800b1fc <slalom_run+0x4cc>)
 800b182:	8813      	ldrh	r3, [r2, #0]
 800b184:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800b188:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800b18a:	4a1c      	ldr	r2, [pc, #112]	; (800b1fc <slalom_run+0x4cc>)
 800b18c:	8813      	ldrh	r3, [r2, #0]
 800b18e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b192:	8013      	strh	r3, [r2, #0]
					run_mode = HIGH;
 800b194:	4b1a      	ldr	r3, [pc, #104]	; (800b200 <slalom_run+0x4d0>)
 800b196:	2203      	movs	r2, #3
 800b198:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800b19a:	4b1a      	ldr	r3, [pc, #104]	; (800b204 <slalom_run+0x4d4>)
 800b19c:	2200      	movs	r2, #0
 800b19e:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 800b1a0:	4b19      	ldr	r3, [pc, #100]	; (800b208 <slalom_run+0x4d8>)
 800b1a2:	f241 3288 	movw	r2, #5000	; 0x1388
 800b1a6:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1600;
 800b1a8:	4b18      	ldr	r3, [pc, #96]	; (800b20c <slalom_run+0x4dc>)
 800b1aa:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800b1ae:	801a      	strh	r2, [r3, #0]
					goal_x = GOAL_X;
 800b1b0:	4b17      	ldr	r3, [pc, #92]	; (800b210 <slalom_run+0x4e0>)
 800b1b2:	2207      	movs	r2, #7
 800b1b4:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800b1b6:	4b17      	ldr	r3, [pc, #92]	; (800b214 <slalom_run+0x4e4>)
 800b1b8:	2207      	movs	r2, #7
 800b1ba:	701a      	strb	r2, [r3, #0]

					get_base();
 800b1bc:	f006 fc8e 	bl	8011adc <get_base>

					HAL_Delay(5000);
 800b1c0:	f241 3088 	movw	r0, #5000	; 0x1388
 800b1c4:	f7f5 ff2a 	bl	800101c <HAL_Delay>
					searchD();
 800b1c8:	f003 ff96 	bl	800f0f8 <searchD>
					HAL_Delay(2000);
 800b1cc:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800b1d0:	f7f5 ff24 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800b1d4:	4b0f      	ldr	r3, [pc, #60]	; (800b214 <slalom_run+0x4e4>)
 800b1d6:	2200      	movs	r2, #0
 800b1d8:	701a      	strb	r2, [r3, #0]
 800b1da:	4b0e      	ldr	r3, [pc, #56]	; (800b214 <slalom_run+0x4e4>)
 800b1dc:	781a      	ldrb	r2, [r3, #0]
 800b1de:	4b0c      	ldr	r3, [pc, #48]	; (800b210 <slalom_run+0x4e0>)
 800b1e0:	701a      	strb	r2, [r3, #0]
					searchD();
 800b1e2:	f003 ff89 	bl	800f0f8 <searchD>

					goal_x = GOAL_X;
 800b1e6:	4b0a      	ldr	r3, [pc, #40]	; (800b210 <slalom_run+0x4e0>)
 800b1e8:	2207      	movs	r2, #7
 800b1ea:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800b1ec:	4b09      	ldr	r3, [pc, #36]	; (800b214 <slalom_run+0x4e4>)
 800b1ee:	2207      	movs	r2, #7
 800b1f0:	701a      	strb	r2, [r3, #0]
					break;
 800b1f2:	bf00      	nop
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 800b1f4:	e5a5      	b.n	800ad42 <slalom_run+0x12>
 800b1f6:	bf00      	nop
 800b1f8:	08013c94 	.word	0x08013c94
 800b1fc:	20000f68 	.word	0x20000f68
 800b200:	20000456 	.word	0x20000456
 800b204:	200015c8 	.word	0x200015c8
 800b208:	20000454 	.word	0x20000454
 800b20c:	20000f7c 	.word	0x20000f7c
 800b210:	20000bb0 	.word	0x20000bb0
 800b214:	20000b4c 	.word	0x20000b4c
 800b218:	08013cb0 	.word	0x08013cb0

0800b21c <perfect_run>:
//perfect_run
// 本番用走行モード
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void perfect_run(void){
 800b21c:	b580      	push	{r7, lr}
 800b21e:	b082      	sub	sp, #8
 800b220:	af00      	add	r7, sp, #0

	int mode = 0;
 800b222:	2300      	movs	r3, #0
 800b224:	607b      	str	r3, [r7, #4]
	printf("Perfect Run, Mode : %d\n", mode);
 800b226:	6879      	ldr	r1, [r7, #4]
 800b228:	489d      	ldr	r0, [pc, #628]	; (800b4a0 <perfect_run+0x284>)
 800b22a:	f007 fa7d 	bl	8012728 <iprintf>

	while(1){
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	b2db      	uxtb	r3, r3
 800b232:	f003 0301 	and.w	r3, r3, #1
 800b236:	b2d8      	uxtb	r0, r3
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	b2db      	uxtb	r3, r3
 800b23c:	f003 0302 	and.w	r3, r3, #2
 800b240:	b2d9      	uxtb	r1, r3
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	b2db      	uxtb	r3, r3
 800b246:	f003 0304 	and.w	r3, r3, #4
 800b24a:	b2db      	uxtb	r3, r3
 800b24c:	461a      	mov	r2, r3
 800b24e:	f006 fc9d 	bl	8011b8c <led_write>
		  if(dist_r >= 20){
 800b252:	4b94      	ldr	r3, [pc, #592]	; (800b4a4 <perfect_run+0x288>)
 800b254:	edd3 7a00 	vldr	s15, [r3]
 800b258:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 800b25c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b260:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b264:	db0f      	blt.n	800b286 <perfect_run+0x6a>
			  mode++;
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	3301      	adds	r3, #1
 800b26a:	607b      	str	r3, [r7, #4]
			  dist_r = 0;
 800b26c:	4b8d      	ldr	r3, [pc, #564]	; (800b4a4 <perfect_run+0x288>)
 800b26e:	f04f 0200 	mov.w	r2, #0
 800b272:	601a      	str	r2, [r3, #0]
			  if(mode > 7){
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	2b07      	cmp	r3, #7
 800b278:	dd01      	ble.n	800b27e <perfect_run+0x62>
				  mode = 0;
 800b27a:	2300      	movs	r3, #0
 800b27c:	607b      	str	r3, [r7, #4]
			  }
			  printf("Mode : %d\n", mode);
 800b27e:	6879      	ldr	r1, [r7, #4]
 800b280:	4889      	ldr	r0, [pc, #548]	; (800b4a8 <perfect_run+0x28c>)
 800b282:	f007 fa51 	bl	8012728 <iprintf>
		  }
		  if(dist_r <= -20){
 800b286:	4b87      	ldr	r3, [pc, #540]	; (800b4a4 <perfect_run+0x288>)
 800b288:	edd3 7a00 	vldr	s15, [r3]
 800b28c:	eebb 7a04 	vmov.f32	s14, #180	; 0xc1a00000 -20.0
 800b290:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b294:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b298:	d80f      	bhi.n	800b2ba <perfect_run+0x9e>
			  mode--;
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	3b01      	subs	r3, #1
 800b29e:	607b      	str	r3, [r7, #4]
			  dist_r = 0;
 800b2a0:	4b80      	ldr	r3, [pc, #512]	; (800b4a4 <perfect_run+0x288>)
 800b2a2:	f04f 0200 	mov.w	r2, #0
 800b2a6:	601a      	str	r2, [r3, #0]
			  if(mode < 0){
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	2b00      	cmp	r3, #0
 800b2ac:	da01      	bge.n	800b2b2 <perfect_run+0x96>
				  mode = 7;
 800b2ae:	2307      	movs	r3, #7
 800b2b0:	607b      	str	r3, [r7, #4]
			  }
			  printf("Mode : %d\n", mode);
 800b2b2:	6879      	ldr	r1, [r7, #4]
 800b2b4:	487c      	ldr	r0, [pc, #496]	; (800b4a8 <perfect_run+0x28c>)
 800b2b6:	f007 fa37 	bl	8012728 <iprintf>
		  }
		  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET){
 800b2ba:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800b2be:	487b      	ldr	r0, [pc, #492]	; (800b4ac <perfect_run+0x290>)
 800b2c0:	f7f7 f808 	bl	80022d4 <HAL_GPIO_ReadPin>
 800b2c4:	4603      	mov	r3, r0
 800b2c6:	2b00      	cmp	r3, #0
 800b2c8:	d1b1      	bne.n	800b22e <perfect_run+0x12>
			  HAL_Delay(50);
 800b2ca:	2032      	movs	r0, #50	; 0x32
 800b2cc:	f7f5 fea6 	bl	800101c <HAL_Delay>
			  while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET);
 800b2d0:	bf00      	nop
 800b2d2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800b2d6:	4875      	ldr	r0, [pc, #468]	; (800b4ac <perfect_run+0x290>)
 800b2d8:	f7f6 fffc 	bl	80022d4 <HAL_GPIO_ReadPin>
 800b2dc:	4603      	mov	r3, r0
 800b2de:	2b00      	cmp	r3, #0
 800b2e0:	d0f7      	beq.n	800b2d2 <perfect_run+0xb6>
			  drive_ready();
 800b2e2:	f7f9 fccd 	bl	8004c80 <drive_ready>
			  switch(mode){
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	2b07      	cmp	r3, #7
 800b2ea:	d8a0      	bhi.n	800b22e <perfect_run+0x12>
 800b2ec:	a201      	add	r2, pc, #4	; (adr r2, 800b2f4 <perfect_run+0xd8>)
 800b2ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b2f2:	bf00      	nop
 800b2f4:	0800b315 	.word	0x0800b315
 800b2f8:	0800b397 	.word	0x0800b397
 800b2fc:	0800b419 	.word	0x0800b419
 800b300:	0800b4dd 	.word	0x0800b4dd
 800b304:	0800b565 	.word	0x0800b565
 800b308:	0800b5ed 	.word	0x0800b5ed
 800b30c:	0800b675 	.word	0x0800b675
 800b310:	0800b6fd 	.word	0x0800b6fd

				case 0:
					//----a一次探索スラローム走行----
					printf("First Run.\n");
 800b314:	4866      	ldr	r0, [pc, #408]	; (800b4b0 <perfect_run+0x294>)
 800b316:	f007 fa7b 	bl	8012810 <puts>
					MF.FLAG.SCND = 0;
 800b31a:	4a66      	ldr	r2, [pc, #408]	; (800b4b4 <perfect_run+0x298>)
 800b31c:	8813      	ldrh	r3, [r2, #0]
 800b31e:	f36f 1345 	bfc	r3, #5, #1
 800b322:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800b324:	4a63      	ldr	r2, [pc, #396]	; (800b4b4 <perfect_run+0x298>)
 800b326:	8813      	ldrh	r3, [r2, #0]
 800b328:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b32c:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 0;
 800b32e:	4a61      	ldr	r2, [pc, #388]	; (800b4b4 <perfect_run+0x298>)
 800b330:	8813      	ldrh	r3, [r2, #0]
 800b332:	f36f 238a 	bfc	r3, #10, #1
 800b336:	8013      	strh	r3, [r2, #0]
					run_mode = MIDDLE;
 800b338:	4b5f      	ldr	r3, [pc, #380]	; (800b4b8 <perfect_run+0x29c>)
 800b33a:	2202      	movs	r2, #2
 800b33c:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800b33e:	4b5f      	ldr	r3, [pc, #380]	; (800b4bc <perfect_run+0x2a0>)
 800b340:	2200      	movs	r2, #0
 800b342:	701a      	strb	r2, [r3, #0]
					goal_mode = 2;
 800b344:	4b5e      	ldr	r3, [pc, #376]	; (800b4c0 <perfect_run+0x2a4>)
 800b346:	2202      	movs	r2, #2
 800b348:	701a      	strb	r2, [r3, #0]
					accel_hs = 4000;
 800b34a:	4b5e      	ldr	r3, [pc, #376]	; (800b4c4 <perfect_run+0x2a8>)
 800b34c:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 800b350:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1000;
 800b352:	4b5d      	ldr	r3, [pc, #372]	; (800b4c8 <perfect_run+0x2ac>)
 800b354:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800b358:	801a      	strh	r2, [r3, #0]

					goal_x = GOAL_X;
 800b35a:	4b5c      	ldr	r3, [pc, #368]	; (800b4cc <perfect_run+0x2b0>)
 800b35c:	2207      	movs	r2, #7
 800b35e:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800b360:	4b5b      	ldr	r3, [pc, #364]	; (800b4d0 <perfect_run+0x2b4>)
 800b362:	2207      	movs	r2, #7
 800b364:	701a      	strb	r2, [r3, #0]

					get_base();
 800b366:	f006 fbb9 	bl	8011adc <get_base>

					searchC();
 800b36a:	f003 fbe1 	bl	800eb30 <searchC>
					HAL_Delay(2000);
 800b36e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800b372:	f7f5 fe53 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800b376:	4b56      	ldr	r3, [pc, #344]	; (800b4d0 <perfect_run+0x2b4>)
 800b378:	2200      	movs	r2, #0
 800b37a:	701a      	strb	r2, [r3, #0]
 800b37c:	4b54      	ldr	r3, [pc, #336]	; (800b4d0 <perfect_run+0x2b4>)
 800b37e:	781a      	ldrb	r2, [r3, #0]
 800b380:	4b52      	ldr	r3, [pc, #328]	; (800b4cc <perfect_run+0x2b0>)
 800b382:	701a      	strb	r2, [r3, #0]
					searchC();
 800b384:	f003 fbd4 	bl	800eb30 <searchC>

					goal_x = GOAL_X;
 800b388:	4b50      	ldr	r3, [pc, #320]	; (800b4cc <perfect_run+0x2b0>)
 800b38a:	2207      	movs	r2, #7
 800b38c:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800b38e:	4b50      	ldr	r3, [pc, #320]	; (800b4d0 <perfect_run+0x2b4>)
 800b390:	2207      	movs	r2, #7
 800b392:	701a      	strb	r2, [r3, #0]
					break;
 800b394:	e1f6      	b.n	800b784 <perfect_run+0x568>

				case 1:
					//----a一次重ね探索スラローム走行----
					printf("First Run.\n");
 800b396:	4846      	ldr	r0, [pc, #280]	; (800b4b0 <perfect_run+0x294>)
 800b398:	f007 fa3a 	bl	8012810 <puts>
					MF.FLAG.SCND = 0;
 800b39c:	4a45      	ldr	r2, [pc, #276]	; (800b4b4 <perfect_run+0x298>)
 800b39e:	8813      	ldrh	r3, [r2, #0]
 800b3a0:	f36f 1345 	bfc	r3, #5, #1
 800b3a4:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800b3a6:	4a43      	ldr	r2, [pc, #268]	; (800b4b4 <perfect_run+0x298>)
 800b3a8:	8813      	ldrh	r3, [r2, #0]
 800b3aa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b3ae:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 0;
 800b3b0:	4a40      	ldr	r2, [pc, #256]	; (800b4b4 <perfect_run+0x298>)
 800b3b2:	8813      	ldrh	r3, [r2, #0]
 800b3b4:	f36f 238a 	bfc	r3, #10, #1
 800b3b8:	8013      	strh	r3, [r2, #0]
					run_mode = MIDDLE;
 800b3ba:	4b3f      	ldr	r3, [pc, #252]	; (800b4b8 <perfect_run+0x29c>)
 800b3bc:	2202      	movs	r2, #2
 800b3be:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800b3c0:	4b3e      	ldr	r3, [pc, #248]	; (800b4bc <perfect_run+0x2a0>)
 800b3c2:	2200      	movs	r2, #0
 800b3c4:	701a      	strb	r2, [r3, #0]
					goal_mode = 2;
 800b3c6:	4b3e      	ldr	r3, [pc, #248]	; (800b4c0 <perfect_run+0x2a4>)
 800b3c8:	2202      	movs	r2, #2
 800b3ca:	701a      	strb	r2, [r3, #0]
					accel_hs = 4000;
 800b3cc:	4b3d      	ldr	r3, [pc, #244]	; (800b4c4 <perfect_run+0x2a8>)
 800b3ce:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 800b3d2:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1000;
 800b3d4:	4b3c      	ldr	r3, [pc, #240]	; (800b4c8 <perfect_run+0x2ac>)
 800b3d6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800b3da:	801a      	strh	r2, [r3, #0]

					goal_x = GOAL_X;
 800b3dc:	4b3b      	ldr	r3, [pc, #236]	; (800b4cc <perfect_run+0x2b0>)
 800b3de:	2207      	movs	r2, #7
 800b3e0:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800b3e2:	4b3b      	ldr	r3, [pc, #236]	; (800b4d0 <perfect_run+0x2b4>)
 800b3e4:	2207      	movs	r2, #7
 800b3e6:	701a      	strb	r2, [r3, #0]

					get_base();
 800b3e8:	f006 fb78 	bl	8011adc <get_base>

					searchC2();
 800b3ec:	f003 fd12 	bl	800ee14 <searchC2>
					HAL_Delay(2000);
 800b3f0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800b3f4:	f7f5 fe12 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800b3f8:	4b35      	ldr	r3, [pc, #212]	; (800b4d0 <perfect_run+0x2b4>)
 800b3fa:	2200      	movs	r2, #0
 800b3fc:	701a      	strb	r2, [r3, #0]
 800b3fe:	4b34      	ldr	r3, [pc, #208]	; (800b4d0 <perfect_run+0x2b4>)
 800b400:	781a      	ldrb	r2, [r3, #0]
 800b402:	4b32      	ldr	r3, [pc, #200]	; (800b4cc <perfect_run+0x2b0>)
 800b404:	701a      	strb	r2, [r3, #0]
					searchC();
 800b406:	f003 fb93 	bl	800eb30 <searchC>

					goal_x = GOAL_X;
 800b40a:	4b30      	ldr	r3, [pc, #192]	; (800b4cc <perfect_run+0x2b0>)
 800b40c:	2207      	movs	r2, #7
 800b40e:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800b410:	4b2f      	ldr	r3, [pc, #188]	; (800b4d0 <perfect_run+0x2b4>)
 800b412:	2207      	movs	r2, #7
 800b414:	701a      	strb	r2, [r3, #0]
					break;
 800b416:	e1b5      	b.n	800b784 <perfect_run+0x568>

				case 2:
					//----a直線と大回り圧縮(adv_posを停止)+半区画ベース High Speed----
					printf("pass press 3-2.\n");
 800b418:	482e      	ldr	r0, [pc, #184]	; (800b4d4 <perfect_run+0x2b8>)
 800b41a:	f007 f9f9 	bl	8012810 <puts>
					MF.FLAG.SCND = 1;
 800b41e:	4a25      	ldr	r2, [pc, #148]	; (800b4b4 <perfect_run+0x298>)
 800b420:	8813      	ldrh	r3, [r2, #0]
 800b422:	f043 0320 	orr.w	r3, r3, #32
 800b426:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800b428:	4a22      	ldr	r2, [pc, #136]	; (800b4b4 <perfect_run+0x298>)
 800b42a:	8813      	ldrh	r3, [r2, #0]
 800b42c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b430:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800b432:	4a20      	ldr	r2, [pc, #128]	; (800b4b4 <perfect_run+0x298>)
 800b434:	8813      	ldrh	r3, [r2, #0]
 800b436:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800b43a:	8013      	strh	r3, [r2, #0]
					run_mode = HIGH;
 800b43c:	4b1e      	ldr	r3, [pc, #120]	; (800b4b8 <perfect_run+0x29c>)
 800b43e:	2203      	movs	r2, #3
 800b440:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800b442:	4b1e      	ldr	r3, [pc, #120]	; (800b4bc <perfect_run+0x2a0>)
 800b444:	2200      	movs	r2, #0
 800b446:	701a      	strb	r2, [r3, #0]
					goal_mode = 2;
 800b448:	4b1d      	ldr	r3, [pc, #116]	; (800b4c0 <perfect_run+0x2a4>)
 800b44a:	2202      	movs	r2, #2
 800b44c:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 800b44e:	4b1d      	ldr	r3, [pc, #116]	; (800b4c4 <perfect_run+0x2a8>)
 800b450:	f241 3288 	movw	r2, #5000	; 0x1388
 800b454:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1600;
 800b456:	4b1c      	ldr	r3, [pc, #112]	; (800b4c8 <perfect_run+0x2ac>)
 800b458:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800b45c:	801a      	strh	r2, [r3, #0]

					pass_mode = 3;						//a半区画ベースでroute配列生成
 800b45e:	4b1e      	ldr	r3, [pc, #120]	; (800b4d8 <perfect_run+0x2bc>)
 800b460:	2203      	movs	r2, #3
 800b462:	701a      	strb	r2, [r3, #0]

					goal_x = GOAL_X;
 800b464:	4b19      	ldr	r3, [pc, #100]	; (800b4cc <perfect_run+0x2b0>)
 800b466:	2207      	movs	r2, #7
 800b468:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800b46a:	4b19      	ldr	r3, [pc, #100]	; (800b4d0 <perfect_run+0x2b4>)
 800b46c:	2207      	movs	r2, #7
 800b46e:	701a      	strb	r2, [r3, #0]

					get_base();
 800b470:	f006 fb34 	bl	8011adc <get_base>

					searchF3();
 800b474:	f003 ffd6 	bl	800f424 <searchF3>
					HAL_Delay(2000);
 800b478:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800b47c:	f7f5 fdce 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800b480:	4b13      	ldr	r3, [pc, #76]	; (800b4d0 <perfect_run+0x2b4>)
 800b482:	2200      	movs	r2, #0
 800b484:	701a      	strb	r2, [r3, #0]
 800b486:	4b12      	ldr	r3, [pc, #72]	; (800b4d0 <perfect_run+0x2b4>)
 800b488:	781a      	ldrb	r2, [r3, #0]
 800b48a:	4b10      	ldr	r3, [pc, #64]	; (800b4cc <perfect_run+0x2b0>)
 800b48c:	701a      	strb	r2, [r3, #0]
					searchF3();
 800b48e:	f003 ffc9 	bl	800f424 <searchF3>

					goal_x = GOAL_X;
 800b492:	4b0e      	ldr	r3, [pc, #56]	; (800b4cc <perfect_run+0x2b0>)
 800b494:	2207      	movs	r2, #7
 800b496:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800b498:	4b0d      	ldr	r3, [pc, #52]	; (800b4d0 <perfect_run+0x2b4>)
 800b49a:	2207      	movs	r2, #7
 800b49c:	701a      	strb	r2, [r3, #0]
					break;
 800b49e:	e171      	b.n	800b784 <perfect_run+0x568>
 800b4a0:	08013ccc 	.word	0x08013ccc
 800b4a4:	20000aec 	.word	0x20000aec
 800b4a8:	08013964 	.word	0x08013964
 800b4ac:	40020000 	.word	0x40020000
 800b4b0:	08013c24 	.word	0x08013c24
 800b4b4:	20000f68 	.word	0x20000f68
 800b4b8:	20000456 	.word	0x20000456
 800b4bc:	200015c8 	.word	0x200015c8
 800b4c0:	20000bb1 	.word	0x20000bb1
 800b4c4:	20000454 	.word	0x20000454
 800b4c8:	20000f7c 	.word	0x20000f7c
 800b4cc:	20000bb0 	.word	0x20000bb0
 800b4d0:	20000b4c 	.word	0x20000b4c
 800b4d4:	08013b58 	.word	0x08013b58
 800b4d8:	20000457 	.word	0x20000457

				case 3:
					//----a直線と大回り圧縮(adv_posを停止)+半区画ベース High High Speed----
					printf("pass press 3-2.\n");
 800b4dc:	48aa      	ldr	r0, [pc, #680]	; (800b788 <perfect_run+0x56c>)
 800b4de:	f007 f997 	bl	8012810 <puts>
					MF.FLAG.SCND = 1;
 800b4e2:	4aaa      	ldr	r2, [pc, #680]	; (800b78c <perfect_run+0x570>)
 800b4e4:	8813      	ldrh	r3, [r2, #0]
 800b4e6:	f043 0320 	orr.w	r3, r3, #32
 800b4ea:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800b4ec:	4aa7      	ldr	r2, [pc, #668]	; (800b78c <perfect_run+0x570>)
 800b4ee:	8813      	ldrh	r3, [r2, #0]
 800b4f0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b4f4:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800b4f6:	4aa5      	ldr	r2, [pc, #660]	; (800b78c <perfect_run+0x570>)
 800b4f8:	8813      	ldrh	r3, [r2, #0]
 800b4fa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800b4fe:	8013      	strh	r3, [r2, #0]
					run_mode = HIGH_HIGH;
 800b500:	4ba3      	ldr	r3, [pc, #652]	; (800b790 <perfect_run+0x574>)
 800b502:	2204      	movs	r2, #4
 800b504:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800b506:	4ba3      	ldr	r3, [pc, #652]	; (800b794 <perfect_run+0x578>)
 800b508:	2200      	movs	r2, #0
 800b50a:	701a      	strb	r2, [r3, #0]
					goal_mode = 2;
 800b50c:	4ba2      	ldr	r3, [pc, #648]	; (800b798 <perfect_run+0x57c>)
 800b50e:	2202      	movs	r2, #2
 800b510:	701a      	strb	r2, [r3, #0]
					accel_hs = 10000;
 800b512:	4ba2      	ldr	r3, [pc, #648]	; (800b79c <perfect_run+0x580>)
 800b514:	f242 7210 	movw	r2, #10000	; 0x2710
 800b518:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 2000;
 800b51a:	4ba1      	ldr	r3, [pc, #644]	; (800b7a0 <perfect_run+0x584>)
 800b51c:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800b520:	801a      	strh	r2, [r3, #0]

					pass_mode = 3;						//a半区画ベースでroute配列生成
 800b522:	4ba0      	ldr	r3, [pc, #640]	; (800b7a4 <perfect_run+0x588>)
 800b524:	2203      	movs	r2, #3
 800b526:	701a      	strb	r2, [r3, #0]

					goal_x = GOAL_X;
 800b528:	4b9f      	ldr	r3, [pc, #636]	; (800b7a8 <perfect_run+0x58c>)
 800b52a:	2207      	movs	r2, #7
 800b52c:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800b52e:	4b9f      	ldr	r3, [pc, #636]	; (800b7ac <perfect_run+0x590>)
 800b530:	2207      	movs	r2, #7
 800b532:	701a      	strb	r2, [r3, #0]

					get_base();
 800b534:	f006 fad2 	bl	8011adc <get_base>

					searchF3();
 800b538:	f003 ff74 	bl	800f424 <searchF3>
					HAL_Delay(2000);
 800b53c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800b540:	f7f5 fd6c 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800b544:	4b99      	ldr	r3, [pc, #612]	; (800b7ac <perfect_run+0x590>)
 800b546:	2200      	movs	r2, #0
 800b548:	701a      	strb	r2, [r3, #0]
 800b54a:	4b98      	ldr	r3, [pc, #608]	; (800b7ac <perfect_run+0x590>)
 800b54c:	781a      	ldrb	r2, [r3, #0]
 800b54e:	4b96      	ldr	r3, [pc, #600]	; (800b7a8 <perfect_run+0x58c>)
 800b550:	701a      	strb	r2, [r3, #0]
					searchF3();
 800b552:	f003 ff67 	bl	800f424 <searchF3>

					goal_x = GOAL_X;
 800b556:	4b94      	ldr	r3, [pc, #592]	; (800b7a8 <perfect_run+0x58c>)
 800b558:	2207      	movs	r2, #7
 800b55a:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800b55c:	4b93      	ldr	r3, [pc, #588]	; (800b7ac <perfect_run+0x590>)
 800b55e:	2207      	movs	r2, #7
 800b560:	701a      	strb	r2, [r3, #0]
					break;
 800b562:	e10f      	b.n	800b784 <perfect_run+0x568>

				case 4:
					//----a直線と大回り圧縮(adv_posを停止)+半区画ベース High High Speed----
					printf("pass press 3-2.\n");
 800b564:	4888      	ldr	r0, [pc, #544]	; (800b788 <perfect_run+0x56c>)
 800b566:	f007 f953 	bl	8012810 <puts>
					MF.FLAG.SCND = 1;
 800b56a:	4a88      	ldr	r2, [pc, #544]	; (800b78c <perfect_run+0x570>)
 800b56c:	8813      	ldrh	r3, [r2, #0]
 800b56e:	f043 0320 	orr.w	r3, r3, #32
 800b572:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800b574:	4a85      	ldr	r2, [pc, #532]	; (800b78c <perfect_run+0x570>)
 800b576:	8813      	ldrh	r3, [r2, #0]
 800b578:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b57c:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800b57e:	4a83      	ldr	r2, [pc, #524]	; (800b78c <perfect_run+0x570>)
 800b580:	8813      	ldrh	r3, [r2, #0]
 800b582:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800b586:	8013      	strh	r3, [r2, #0]
					run_mode = HIGH_HIGH;
 800b588:	4b81      	ldr	r3, [pc, #516]	; (800b790 <perfect_run+0x574>)
 800b58a:	2204      	movs	r2, #4
 800b58c:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800b58e:	4b81      	ldr	r3, [pc, #516]	; (800b794 <perfect_run+0x578>)
 800b590:	2200      	movs	r2, #0
 800b592:	701a      	strb	r2, [r3, #0]
					goal_mode = 2;
 800b594:	4b80      	ldr	r3, [pc, #512]	; (800b798 <perfect_run+0x57c>)
 800b596:	2202      	movs	r2, #2
 800b598:	701a      	strb	r2, [r3, #0]
					accel_hs = 15000;
 800b59a:	4b80      	ldr	r3, [pc, #512]	; (800b79c <perfect_run+0x580>)
 800b59c:	f643 2298 	movw	r2, #15000	; 0x3a98
 800b5a0:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 2500;
 800b5a2:	4b7f      	ldr	r3, [pc, #508]	; (800b7a0 <perfect_run+0x584>)
 800b5a4:	f640 12c4 	movw	r2, #2500	; 0x9c4
 800b5a8:	801a      	strh	r2, [r3, #0]

					pass_mode = 3;						//a半区画ベースでroute配列生成
 800b5aa:	4b7e      	ldr	r3, [pc, #504]	; (800b7a4 <perfect_run+0x588>)
 800b5ac:	2203      	movs	r2, #3
 800b5ae:	701a      	strb	r2, [r3, #0]

					goal_x = GOAL_X;
 800b5b0:	4b7d      	ldr	r3, [pc, #500]	; (800b7a8 <perfect_run+0x58c>)
 800b5b2:	2207      	movs	r2, #7
 800b5b4:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800b5b6:	4b7d      	ldr	r3, [pc, #500]	; (800b7ac <perfect_run+0x590>)
 800b5b8:	2207      	movs	r2, #7
 800b5ba:	701a      	strb	r2, [r3, #0]

					get_base();
 800b5bc:	f006 fa8e 	bl	8011adc <get_base>

					searchF3();
 800b5c0:	f003 ff30 	bl	800f424 <searchF3>
					HAL_Delay(2000);
 800b5c4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800b5c8:	f7f5 fd28 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800b5cc:	4b77      	ldr	r3, [pc, #476]	; (800b7ac <perfect_run+0x590>)
 800b5ce:	2200      	movs	r2, #0
 800b5d0:	701a      	strb	r2, [r3, #0]
 800b5d2:	4b76      	ldr	r3, [pc, #472]	; (800b7ac <perfect_run+0x590>)
 800b5d4:	781a      	ldrb	r2, [r3, #0]
 800b5d6:	4b74      	ldr	r3, [pc, #464]	; (800b7a8 <perfect_run+0x58c>)
 800b5d8:	701a      	strb	r2, [r3, #0]
					searchF3();
 800b5da:	f003 ff23 	bl	800f424 <searchF3>

					goal_x = GOAL_X;
 800b5de:	4b72      	ldr	r3, [pc, #456]	; (800b7a8 <perfect_run+0x58c>)
 800b5e0:	2207      	movs	r2, #7
 800b5e2:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800b5e4:	4b71      	ldr	r3, [pc, #452]	; (800b7ac <perfect_run+0x590>)
 800b5e6:	2207      	movs	r2, #7
 800b5e8:	701a      	strb	r2, [r3, #0]
					break;
 800b5ea:	e0cb      	b.n	800b784 <perfect_run+0x568>

				case 5:
					//----a直線と大回り圧縮(adv_posを停止)+半区画ベース High Speed----
					printf("pass press 3-4.\n");
 800b5ec:	4870      	ldr	r0, [pc, #448]	; (800b7b0 <perfect_run+0x594>)
 800b5ee:	f007 f90f 	bl	8012810 <puts>
					MF.FLAG.SCND = 1;
 800b5f2:	4a66      	ldr	r2, [pc, #408]	; (800b78c <perfect_run+0x570>)
 800b5f4:	8813      	ldrh	r3, [r2, #0]
 800b5f6:	f043 0320 	orr.w	r3, r3, #32
 800b5fa:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800b5fc:	4a63      	ldr	r2, [pc, #396]	; (800b78c <perfect_run+0x570>)
 800b5fe:	8813      	ldrh	r3, [r2, #0]
 800b600:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b604:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800b606:	4a61      	ldr	r2, [pc, #388]	; (800b78c <perfect_run+0x570>)
 800b608:	8813      	ldrh	r3, [r2, #0]
 800b60a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800b60e:	8013      	strh	r3, [r2, #0]
					run_mode = 5;
 800b610:	4b5f      	ldr	r3, [pc, #380]	; (800b790 <perfect_run+0x574>)
 800b612:	2205      	movs	r2, #5
 800b614:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800b616:	4b5f      	ldr	r3, [pc, #380]	; (800b794 <perfect_run+0x578>)
 800b618:	2200      	movs	r2, #0
 800b61a:	701a      	strb	r2, [r3, #0]
					goal_mode = 2;
 800b61c:	4b5e      	ldr	r3, [pc, #376]	; (800b798 <perfect_run+0x57c>)
 800b61e:	2202      	movs	r2, #2
 800b620:	701a      	strb	r2, [r3, #0]
					accel_hs = 25000;
 800b622:	4b5e      	ldr	r3, [pc, #376]	; (800b79c <perfect_run+0x580>)
 800b624:	f246 12a8 	movw	r2, #25000	; 0x61a8
 800b628:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 3000;
 800b62a:	4b5d      	ldr	r3, [pc, #372]	; (800b7a0 <perfect_run+0x584>)
 800b62c:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800b630:	801a      	strh	r2, [r3, #0]

					pass_mode = 3;						//a半区画ベースでroute配列生成
 800b632:	4b5c      	ldr	r3, [pc, #368]	; (800b7a4 <perfect_run+0x588>)
 800b634:	2203      	movs	r2, #3
 800b636:	701a      	strb	r2, [r3, #0]

					goal_x = GOAL_X;
 800b638:	4b5b      	ldr	r3, [pc, #364]	; (800b7a8 <perfect_run+0x58c>)
 800b63a:	2207      	movs	r2, #7
 800b63c:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800b63e:	4b5b      	ldr	r3, [pc, #364]	; (800b7ac <perfect_run+0x590>)
 800b640:	2207      	movs	r2, #7
 800b642:	701a      	strb	r2, [r3, #0]

					get_base();
 800b644:	f006 fa4a 	bl	8011adc <get_base>

					searchF3();
 800b648:	f003 feec 	bl	800f424 <searchF3>
					HAL_Delay(2000);
 800b64c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800b650:	f7f5 fce4 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800b654:	4b55      	ldr	r3, [pc, #340]	; (800b7ac <perfect_run+0x590>)
 800b656:	2200      	movs	r2, #0
 800b658:	701a      	strb	r2, [r3, #0]
 800b65a:	4b54      	ldr	r3, [pc, #336]	; (800b7ac <perfect_run+0x590>)
 800b65c:	781a      	ldrb	r2, [r3, #0]
 800b65e:	4b52      	ldr	r3, [pc, #328]	; (800b7a8 <perfect_run+0x58c>)
 800b660:	701a      	strb	r2, [r3, #0]
					searchF3();
 800b662:	f003 fedf 	bl	800f424 <searchF3>

					goal_x = GOAL_X;
 800b666:	4b50      	ldr	r3, [pc, #320]	; (800b7a8 <perfect_run+0x58c>)
 800b668:	2207      	movs	r2, #7
 800b66a:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800b66c:	4b4f      	ldr	r3, [pc, #316]	; (800b7ac <perfect_run+0x590>)
 800b66e:	2207      	movs	r2, #7
 800b670:	701a      	strb	r2, [r3, #0]
					break;
 800b672:	e087      	b.n	800b784 <perfect_run+0x568>

				case 6:
					//----a直線と大回り圧縮(adv_posを停止)+半区画ベース High Speed----
					printf("pass press 3-4.\n");
 800b674:	484e      	ldr	r0, [pc, #312]	; (800b7b0 <perfect_run+0x594>)
 800b676:	f007 f8cb 	bl	8012810 <puts>
					MF.FLAG.SCND = 1;
 800b67a:	4a44      	ldr	r2, [pc, #272]	; (800b78c <perfect_run+0x570>)
 800b67c:	8813      	ldrh	r3, [r2, #0]
 800b67e:	f043 0320 	orr.w	r3, r3, #32
 800b682:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800b684:	4a41      	ldr	r2, [pc, #260]	; (800b78c <perfect_run+0x570>)
 800b686:	8813      	ldrh	r3, [r2, #0]
 800b688:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b68c:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800b68e:	4a3f      	ldr	r2, [pc, #252]	; (800b78c <perfect_run+0x570>)
 800b690:	8813      	ldrh	r3, [r2, #0]
 800b692:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800b696:	8013      	strh	r3, [r2, #0]
					run_mode = 5;
 800b698:	4b3d      	ldr	r3, [pc, #244]	; (800b790 <perfect_run+0x574>)
 800b69a:	2205      	movs	r2, #5
 800b69c:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800b69e:	4b3d      	ldr	r3, [pc, #244]	; (800b794 <perfect_run+0x578>)
 800b6a0:	2200      	movs	r2, #0
 800b6a2:	701a      	strb	r2, [r3, #0]
					goal_mode = 2;
 800b6a4:	4b3c      	ldr	r3, [pc, #240]	; (800b798 <perfect_run+0x57c>)
 800b6a6:	2202      	movs	r2, #2
 800b6a8:	701a      	strb	r2, [r3, #0]
					accel_hs = 10000;
 800b6aa:	4b3c      	ldr	r3, [pc, #240]	; (800b79c <perfect_run+0x580>)
 800b6ac:	f242 7210 	movw	r2, #10000	; 0x2710
 800b6b0:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 2000;
 800b6b2:	4b3b      	ldr	r3, [pc, #236]	; (800b7a0 <perfect_run+0x584>)
 800b6b4:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800b6b8:	801a      	strh	r2, [r3, #0]

					pass_mode = 3;						//a半区画ベースでroute配列生成
 800b6ba:	4b3a      	ldr	r3, [pc, #232]	; (800b7a4 <perfect_run+0x588>)
 800b6bc:	2203      	movs	r2, #3
 800b6be:	701a      	strb	r2, [r3, #0]

					goal_x = GOAL_X;
 800b6c0:	4b39      	ldr	r3, [pc, #228]	; (800b7a8 <perfect_run+0x58c>)
 800b6c2:	2207      	movs	r2, #7
 800b6c4:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800b6c6:	4b39      	ldr	r3, [pc, #228]	; (800b7ac <perfect_run+0x590>)
 800b6c8:	2207      	movs	r2, #7
 800b6ca:	701a      	strb	r2, [r3, #0]

					get_base();
 800b6cc:	f006 fa06 	bl	8011adc <get_base>

					searchF3();
 800b6d0:	f003 fea8 	bl	800f424 <searchF3>
					HAL_Delay(2000);
 800b6d4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800b6d8:	f7f5 fca0 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800b6dc:	4b33      	ldr	r3, [pc, #204]	; (800b7ac <perfect_run+0x590>)
 800b6de:	2200      	movs	r2, #0
 800b6e0:	701a      	strb	r2, [r3, #0]
 800b6e2:	4b32      	ldr	r3, [pc, #200]	; (800b7ac <perfect_run+0x590>)
 800b6e4:	781a      	ldrb	r2, [r3, #0]
 800b6e6:	4b30      	ldr	r3, [pc, #192]	; (800b7a8 <perfect_run+0x58c>)
 800b6e8:	701a      	strb	r2, [r3, #0]
					searchF3();
 800b6ea:	f003 fe9b 	bl	800f424 <searchF3>

					goal_x = GOAL_X;
 800b6ee:	4b2e      	ldr	r3, [pc, #184]	; (800b7a8 <perfect_run+0x58c>)
 800b6f0:	2207      	movs	r2, #7
 800b6f2:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800b6f4:	4b2d      	ldr	r3, [pc, #180]	; (800b7ac <perfect_run+0x590>)
 800b6f6:	2207      	movs	r2, #7
 800b6f8:	701a      	strb	r2, [r3, #0]
					break;
 800b6fa:	e043      	b.n	800b784 <perfect_run+0x568>
				case 7:
					//----a直線と大回り圧縮(adv_posを停止)+半区画ベース High Speed----
					printf("pass press 3-4.\n");
 800b6fc:	482c      	ldr	r0, [pc, #176]	; (800b7b0 <perfect_run+0x594>)
 800b6fe:	f007 f887 	bl	8012810 <puts>
					MF.FLAG.SCND = 1;
 800b702:	4a22      	ldr	r2, [pc, #136]	; (800b78c <perfect_run+0x570>)
 800b704:	8813      	ldrh	r3, [r2, #0]
 800b706:	f043 0320 	orr.w	r3, r3, #32
 800b70a:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800b70c:	4a1f      	ldr	r2, [pc, #124]	; (800b78c <perfect_run+0x570>)
 800b70e:	8813      	ldrh	r3, [r2, #0]
 800b710:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b714:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800b716:	4a1d      	ldr	r2, [pc, #116]	; (800b78c <perfect_run+0x570>)
 800b718:	8813      	ldrh	r3, [r2, #0]
 800b71a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800b71e:	8013      	strh	r3, [r2, #0]
					run_mode = 5;
 800b720:	4b1b      	ldr	r3, [pc, #108]	; (800b790 <perfect_run+0x574>)
 800b722:	2205      	movs	r2, #5
 800b724:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800b726:	4b1b      	ldr	r3, [pc, #108]	; (800b794 <perfect_run+0x578>)
 800b728:	2200      	movs	r2, #0
 800b72a:	701a      	strb	r2, [r3, #0]
					goal_mode = 2;
 800b72c:	4b1a      	ldr	r3, [pc, #104]	; (800b798 <perfect_run+0x57c>)
 800b72e:	2202      	movs	r2, #2
 800b730:	701a      	strb	r2, [r3, #0]
					accel_hs = 22000;
 800b732:	4b1a      	ldr	r3, [pc, #104]	; (800b79c <perfect_run+0x580>)
 800b734:	f245 52f0 	movw	r2, #22000	; 0x55f0
 800b738:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 3000;
 800b73a:	4b19      	ldr	r3, [pc, #100]	; (800b7a0 <perfect_run+0x584>)
 800b73c:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800b740:	801a      	strh	r2, [r3, #0]

					pass_mode = 3;						//a半区画ベースでroute配列生成
 800b742:	4b18      	ldr	r3, [pc, #96]	; (800b7a4 <perfect_run+0x588>)
 800b744:	2203      	movs	r2, #3
 800b746:	701a      	strb	r2, [r3, #0]

					goal_x = GOAL_X;
 800b748:	4b17      	ldr	r3, [pc, #92]	; (800b7a8 <perfect_run+0x58c>)
 800b74a:	2207      	movs	r2, #7
 800b74c:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800b74e:	4b17      	ldr	r3, [pc, #92]	; (800b7ac <perfect_run+0x590>)
 800b750:	2207      	movs	r2, #7
 800b752:	701a      	strb	r2, [r3, #0]

					get_base();
 800b754:	f006 f9c2 	bl	8011adc <get_base>

					searchF3();
 800b758:	f003 fe64 	bl	800f424 <searchF3>
					HAL_Delay(2000);
 800b75c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800b760:	f7f5 fc5c 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800b764:	4b11      	ldr	r3, [pc, #68]	; (800b7ac <perfect_run+0x590>)
 800b766:	2200      	movs	r2, #0
 800b768:	701a      	strb	r2, [r3, #0]
 800b76a:	4b10      	ldr	r3, [pc, #64]	; (800b7ac <perfect_run+0x590>)
 800b76c:	781a      	ldrb	r2, [r3, #0]
 800b76e:	4b0e      	ldr	r3, [pc, #56]	; (800b7a8 <perfect_run+0x58c>)
 800b770:	701a      	strb	r2, [r3, #0]
					searchF3();
 800b772:	f003 fe57 	bl	800f424 <searchF3>

					goal_x = GOAL_X;
 800b776:	4b0c      	ldr	r3, [pc, #48]	; (800b7a8 <perfect_run+0x58c>)
 800b778:	2207      	movs	r2, #7
 800b77a:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800b77c:	4b0b      	ldr	r3, [pc, #44]	; (800b7ac <perfect_run+0x590>)
 800b77e:	2207      	movs	r2, #7
 800b780:	701a      	strb	r2, [r3, #0]
					break;
 800b782:	bf00      	nop
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 800b784:	e553      	b.n	800b22e <perfect_run+0x12>
 800b786:	bf00      	nop
 800b788:	08013b58 	.word	0x08013b58
 800b78c:	20000f68 	.word	0x20000f68
 800b790:	20000456 	.word	0x20000456
 800b794:	200015c8 	.word	0x200015c8
 800b798:	20000bb1 	.word	0x20000bb1
 800b79c:	20000454 	.word	0x20000454
 800b7a0:	20000f7c 	.word	0x20000f7c
 800b7a4:	20000457 	.word	0x20000457
 800b7a8:	20000bb0 	.word	0x20000bb0
 800b7ac:	20000b4c 	.word	0x20000b4c
 800b7b0:	08013b78 	.word	0x08013b78

0800b7b4 <perfect_slalom>:
//perfect_slalom
// 本番用スラローム走行モード
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void perfect_slalom(void){
 800b7b4:	b580      	push	{r7, lr}
 800b7b6:	b082      	sub	sp, #8
 800b7b8:	af00      	add	r7, sp, #0

	int mode = 0;
 800b7ba:	2300      	movs	r3, #0
 800b7bc:	607b      	str	r3, [r7, #4]
	printf("Perfect Slalom, Mode : %d\n", mode);
 800b7be:	6879      	ldr	r1, [r7, #4]
 800b7c0:	4898      	ldr	r0, [pc, #608]	; (800ba24 <perfect_slalom+0x270>)
 800b7c2:	f006 ffb1 	bl	8012728 <iprintf>

	while(1){
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	b2db      	uxtb	r3, r3
 800b7ca:	f003 0301 	and.w	r3, r3, #1
 800b7ce:	b2d8      	uxtb	r0, r3
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	b2db      	uxtb	r3, r3
 800b7d4:	f003 0302 	and.w	r3, r3, #2
 800b7d8:	b2d9      	uxtb	r1, r3
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	b2db      	uxtb	r3, r3
 800b7de:	f003 0304 	and.w	r3, r3, #4
 800b7e2:	b2db      	uxtb	r3, r3
 800b7e4:	461a      	mov	r2, r3
 800b7e6:	f006 f9d1 	bl	8011b8c <led_write>
		  if(dist_r >= 20){
 800b7ea:	4b8f      	ldr	r3, [pc, #572]	; (800ba28 <perfect_slalom+0x274>)
 800b7ec:	edd3 7a00 	vldr	s15, [r3]
 800b7f0:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 800b7f4:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b7f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b7fc:	db0f      	blt.n	800b81e <perfect_slalom+0x6a>
			  mode++;
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	3301      	adds	r3, #1
 800b802:	607b      	str	r3, [r7, #4]
			  dist_r = 0;
 800b804:	4b88      	ldr	r3, [pc, #544]	; (800ba28 <perfect_slalom+0x274>)
 800b806:	f04f 0200 	mov.w	r2, #0
 800b80a:	601a      	str	r2, [r3, #0]
			  if(mode > 7){
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	2b07      	cmp	r3, #7
 800b810:	dd01      	ble.n	800b816 <perfect_slalom+0x62>
				  mode = 0;
 800b812:	2300      	movs	r3, #0
 800b814:	607b      	str	r3, [r7, #4]
			  }
			  printf("Mode : %d\n", mode);
 800b816:	6879      	ldr	r1, [r7, #4]
 800b818:	4884      	ldr	r0, [pc, #528]	; (800ba2c <perfect_slalom+0x278>)
 800b81a:	f006 ff85 	bl	8012728 <iprintf>
		  }
		  if(dist_r <= -20){
 800b81e:	4b82      	ldr	r3, [pc, #520]	; (800ba28 <perfect_slalom+0x274>)
 800b820:	edd3 7a00 	vldr	s15, [r3]
 800b824:	eebb 7a04 	vmov.f32	s14, #180	; 0xc1a00000 -20.0
 800b828:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b82c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b830:	d80f      	bhi.n	800b852 <perfect_slalom+0x9e>
			  mode--;
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	3b01      	subs	r3, #1
 800b836:	607b      	str	r3, [r7, #4]
			  dist_r = 0;
 800b838:	4b7b      	ldr	r3, [pc, #492]	; (800ba28 <perfect_slalom+0x274>)
 800b83a:	f04f 0200 	mov.w	r2, #0
 800b83e:	601a      	str	r2, [r3, #0]
			  if(mode < 0){
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	2b00      	cmp	r3, #0
 800b844:	da01      	bge.n	800b84a <perfect_slalom+0x96>
				  mode = 7;
 800b846:	2307      	movs	r3, #7
 800b848:	607b      	str	r3, [r7, #4]
			  }
			  printf("Mode : %d\n", mode);
 800b84a:	6879      	ldr	r1, [r7, #4]
 800b84c:	4877      	ldr	r0, [pc, #476]	; (800ba2c <perfect_slalom+0x278>)
 800b84e:	f006 ff6b 	bl	8012728 <iprintf>
		  }
		  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET){
 800b852:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800b856:	4876      	ldr	r0, [pc, #472]	; (800ba30 <perfect_slalom+0x27c>)
 800b858:	f7f6 fd3c 	bl	80022d4 <HAL_GPIO_ReadPin>
 800b85c:	4603      	mov	r3, r0
 800b85e:	2b00      	cmp	r3, #0
 800b860:	d1b1      	bne.n	800b7c6 <perfect_slalom+0x12>
			  HAL_Delay(50);
 800b862:	2032      	movs	r0, #50	; 0x32
 800b864:	f7f5 fbda 	bl	800101c <HAL_Delay>
			  while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET);
 800b868:	bf00      	nop
 800b86a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800b86e:	4870      	ldr	r0, [pc, #448]	; (800ba30 <perfect_slalom+0x27c>)
 800b870:	f7f6 fd30 	bl	80022d4 <HAL_GPIO_ReadPin>
 800b874:	4603      	mov	r3, r0
 800b876:	2b00      	cmp	r3, #0
 800b878:	d0f7      	beq.n	800b86a <perfect_slalom+0xb6>
			  drive_ready();
 800b87a:	f7f9 fa01 	bl	8004c80 <drive_ready>

			  switch(mode){
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	2b07      	cmp	r3, #7
 800b882:	d8a0      	bhi.n	800b7c6 <perfect_slalom+0x12>
 800b884:	a201      	add	r2, pc, #4	; (adr r2, 800b88c <perfect_slalom+0xd8>)
 800b886:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b88a:	bf00      	nop
 800b88c:	0800b7c7 	.word	0x0800b7c7
 800b890:	0800b8ad 	.word	0x0800b8ad
 800b894:	0800b92f 	.word	0x0800b92f
 800b898:	0800b9b1 	.word	0x0800b9b1
 800b89c:	0800ba61 	.word	0x0800ba61
 800b8a0:	0800bae3 	.word	0x0800bae3
 800b8a4:	0800bb65 	.word	0x0800bb65
 800b8a8:	0800bbe7 	.word	0x0800bbe7
				case 0:
					break;

				case 1:
					//----a一次探索スラローム走行----
					printf("First Run.\n");
 800b8ac:	4861      	ldr	r0, [pc, #388]	; (800ba34 <perfect_slalom+0x280>)
 800b8ae:	f006 ffaf 	bl	8012810 <puts>
					MF.FLAG.SCND = 0;
 800b8b2:	4a61      	ldr	r2, [pc, #388]	; (800ba38 <perfect_slalom+0x284>)
 800b8b4:	8813      	ldrh	r3, [r2, #0]
 800b8b6:	f36f 1345 	bfc	r3, #5, #1
 800b8ba:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800b8bc:	4a5e      	ldr	r2, [pc, #376]	; (800ba38 <perfect_slalom+0x284>)
 800b8be:	8813      	ldrh	r3, [r2, #0]
 800b8c0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b8c4:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 0;
 800b8c6:	4a5c      	ldr	r2, [pc, #368]	; (800ba38 <perfect_slalom+0x284>)
 800b8c8:	8813      	ldrh	r3, [r2, #0]
 800b8ca:	f36f 238a 	bfc	r3, #10, #1
 800b8ce:	8013      	strh	r3, [r2, #0]
					run_mode = MIDDLE;
 800b8d0:	4b5a      	ldr	r3, [pc, #360]	; (800ba3c <perfect_slalom+0x288>)
 800b8d2:	2202      	movs	r2, #2
 800b8d4:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800b8d6:	4b5a      	ldr	r3, [pc, #360]	; (800ba40 <perfect_slalom+0x28c>)
 800b8d8:	2200      	movs	r2, #0
 800b8da:	701a      	strb	r2, [r3, #0]
					goal_mode = 2;
 800b8dc:	4b59      	ldr	r3, [pc, #356]	; (800ba44 <perfect_slalom+0x290>)
 800b8de:	2202      	movs	r2, #2
 800b8e0:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 800b8e2:	4b59      	ldr	r3, [pc, #356]	; (800ba48 <perfect_slalom+0x294>)
 800b8e4:	f241 3288 	movw	r2, #5000	; 0x1388
 800b8e8:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1200;
 800b8ea:	4b58      	ldr	r3, [pc, #352]	; (800ba4c <perfect_slalom+0x298>)
 800b8ec:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 800b8f0:	801a      	strh	r2, [r3, #0]

					goal_x = 7;
 800b8f2:	4b57      	ldr	r3, [pc, #348]	; (800ba50 <perfect_slalom+0x29c>)
 800b8f4:	2207      	movs	r2, #7
 800b8f6:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800b8f8:	4b56      	ldr	r3, [pc, #344]	; (800ba54 <perfect_slalom+0x2a0>)
 800b8fa:	2207      	movs	r2, #7
 800b8fc:	701a      	strb	r2, [r3, #0]

					get_base();
 800b8fe:	f006 f8ed 	bl	8011adc <get_base>

					searchC();
 800b902:	f003 f915 	bl	800eb30 <searchC>
					HAL_Delay(2000);
 800b906:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800b90a:	f7f5 fb87 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800b90e:	4b51      	ldr	r3, [pc, #324]	; (800ba54 <perfect_slalom+0x2a0>)
 800b910:	2200      	movs	r2, #0
 800b912:	701a      	strb	r2, [r3, #0]
 800b914:	4b4f      	ldr	r3, [pc, #316]	; (800ba54 <perfect_slalom+0x2a0>)
 800b916:	781a      	ldrb	r2, [r3, #0]
 800b918:	4b4d      	ldr	r3, [pc, #308]	; (800ba50 <perfect_slalom+0x29c>)
 800b91a:	701a      	strb	r2, [r3, #0]
					searchC();
 800b91c:	f003 f908 	bl	800eb30 <searchC>

					goal_x = 7;
 800b920:	4b4b      	ldr	r3, [pc, #300]	; (800ba50 <perfect_slalom+0x29c>)
 800b922:	2207      	movs	r2, #7
 800b924:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800b926:	4b4b      	ldr	r3, [pc, #300]	; (800ba54 <perfect_slalom+0x2a0>)
 800b928:	2207      	movs	r2, #7
 800b92a:	701a      	strb	r2, [r3, #0]
					break;
 800b92c:	e15e      	b.n	800bbec <perfect_slalom+0x438>

				case 2:
					//----a二次走行スラローム+既知区間加速走行 speed1----
					printf("First Run. (Continuous)\n");
 800b92e:	484a      	ldr	r0, [pc, #296]	; (800ba58 <perfect_slalom+0x2a4>)
 800b930:	f006 ff6e 	bl	8012810 <puts>
					MF.FLAG.SCND = 1;
 800b934:	4a40      	ldr	r2, [pc, #256]	; (800ba38 <perfect_slalom+0x284>)
 800b936:	8813      	ldrh	r3, [r2, #0]
 800b938:	f043 0320 	orr.w	r3, r3, #32
 800b93c:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800b93e:	4a3e      	ldr	r2, [pc, #248]	; (800ba38 <perfect_slalom+0x284>)
 800b940:	8813      	ldrh	r3, [r2, #0]
 800b942:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b946:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800b948:	4a3b      	ldr	r2, [pc, #236]	; (800ba38 <perfect_slalom+0x284>)
 800b94a:	8813      	ldrh	r3, [r2, #0]
 800b94c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800b950:	8013      	strh	r3, [r2, #0]
					run_mode = MIDDLE;
 800b952:	4b3a      	ldr	r3, [pc, #232]	; (800ba3c <perfect_slalom+0x288>)
 800b954:	2202      	movs	r2, #2
 800b956:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800b958:	4b39      	ldr	r3, [pc, #228]	; (800ba40 <perfect_slalom+0x28c>)
 800b95a:	2200      	movs	r2, #0
 800b95c:	701a      	strb	r2, [r3, #0]
					goal_mode = 2;
 800b95e:	4b39      	ldr	r3, [pc, #228]	; (800ba44 <perfect_slalom+0x290>)
 800b960:	2202      	movs	r2, #2
 800b962:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 800b964:	4b38      	ldr	r3, [pc, #224]	; (800ba48 <perfect_slalom+0x294>)
 800b966:	f241 3288 	movw	r2, #5000	; 0x1388
 800b96a:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1200;
 800b96c:	4b37      	ldr	r3, [pc, #220]	; (800ba4c <perfect_slalom+0x298>)
 800b96e:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 800b972:	801a      	strh	r2, [r3, #0]
					goal_x = 7;
 800b974:	4b36      	ldr	r3, [pc, #216]	; (800ba50 <perfect_slalom+0x29c>)
 800b976:	2207      	movs	r2, #7
 800b978:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800b97a:	4b36      	ldr	r3, [pc, #216]	; (800ba54 <perfect_slalom+0x2a0>)
 800b97c:	2207      	movs	r2, #7
 800b97e:	701a      	strb	r2, [r3, #0]

					get_base();
 800b980:	f006 f8ac 	bl	8011adc <get_base>

					searchD();
 800b984:	f003 fbb8 	bl	800f0f8 <searchD>
					HAL_Delay(2000);
 800b988:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800b98c:	f7f5 fb46 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800b990:	4b30      	ldr	r3, [pc, #192]	; (800ba54 <perfect_slalom+0x2a0>)
 800b992:	2200      	movs	r2, #0
 800b994:	701a      	strb	r2, [r3, #0]
 800b996:	4b2f      	ldr	r3, [pc, #188]	; (800ba54 <perfect_slalom+0x2a0>)
 800b998:	781a      	ldrb	r2, [r3, #0]
 800b99a:	4b2d      	ldr	r3, [pc, #180]	; (800ba50 <perfect_slalom+0x29c>)
 800b99c:	701a      	strb	r2, [r3, #0]
					searchD();
 800b99e:	f003 fbab 	bl	800f0f8 <searchD>

					goal_x = 7;
 800b9a2:	4b2b      	ldr	r3, [pc, #172]	; (800ba50 <perfect_slalom+0x29c>)
 800b9a4:	2207      	movs	r2, #7
 800b9a6:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800b9a8:	4b2a      	ldr	r3, [pc, #168]	; (800ba54 <perfect_slalom+0x2a0>)
 800b9aa:	2207      	movs	r2, #7
 800b9ac:	701a      	strb	r2, [r3, #0]
					break;
 800b9ae:	e11d      	b.n	800bbec <perfect_slalom+0x438>

				case 3:
					//----a二次探索スラロームHigh Speed----
					printf("Second Run. (Slalom)\n");
 800b9b0:	482a      	ldr	r0, [pc, #168]	; (800ba5c <perfect_slalom+0x2a8>)
 800b9b2:	f006 ff2d 	bl	8012810 <puts>
					MF.FLAG.SCND = 1;
 800b9b6:	4a20      	ldr	r2, [pc, #128]	; (800ba38 <perfect_slalom+0x284>)
 800b9b8:	8813      	ldrh	r3, [r2, #0]
 800b9ba:	f043 0320 	orr.w	r3, r3, #32
 800b9be:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 0;
 800b9c0:	4a1d      	ldr	r2, [pc, #116]	; (800ba38 <perfect_slalom+0x284>)
 800b9c2:	8813      	ldrh	r3, [r2, #0]
 800b9c4:	f36f 2349 	bfc	r3, #9, #1
 800b9c8:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800b9ca:	4a1b      	ldr	r2, [pc, #108]	; (800ba38 <perfect_slalom+0x284>)
 800b9cc:	8813      	ldrh	r3, [r2, #0]
 800b9ce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800b9d2:	8013      	strh	r3, [r2, #0]
					run_mode = HIGH;
 800b9d4:	4b19      	ldr	r3, [pc, #100]	; (800ba3c <perfect_slalom+0x288>)
 800b9d6:	2203      	movs	r2, #3
 800b9d8:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800b9da:	4b19      	ldr	r3, [pc, #100]	; (800ba40 <perfect_slalom+0x28c>)
 800b9dc:	2200      	movs	r2, #0
 800b9de:	701a      	strb	r2, [r3, #0]
					goal_mode = 2;
 800b9e0:	4b18      	ldr	r3, [pc, #96]	; (800ba44 <perfect_slalom+0x290>)
 800b9e2:	2202      	movs	r2, #2
 800b9e4:	701a      	strb	r2, [r3, #0]
					goal_x = 7;
 800b9e6:	4b1a      	ldr	r3, [pc, #104]	; (800ba50 <perfect_slalom+0x29c>)
 800b9e8:	2207      	movs	r2, #7
 800b9ea:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800b9ec:	4b19      	ldr	r3, [pc, #100]	; (800ba54 <perfect_slalom+0x2a0>)
 800b9ee:	2207      	movs	r2, #7
 800b9f0:	701a      	strb	r2, [r3, #0]

					get_base();
 800b9f2:	f006 f873 	bl	8011adc <get_base>

					searchC();
 800b9f6:	f003 f89b 	bl	800eb30 <searchC>
					HAL_Delay(2000);
 800b9fa:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800b9fe:	f7f5 fb0d 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800ba02:	4b14      	ldr	r3, [pc, #80]	; (800ba54 <perfect_slalom+0x2a0>)
 800ba04:	2200      	movs	r2, #0
 800ba06:	701a      	strb	r2, [r3, #0]
 800ba08:	4b12      	ldr	r3, [pc, #72]	; (800ba54 <perfect_slalom+0x2a0>)
 800ba0a:	781a      	ldrb	r2, [r3, #0]
 800ba0c:	4b10      	ldr	r3, [pc, #64]	; (800ba50 <perfect_slalom+0x29c>)
 800ba0e:	701a      	strb	r2, [r3, #0]
					searchC();
 800ba10:	f003 f88e 	bl	800eb30 <searchC>
					goal_x = 7;
 800ba14:	4b0e      	ldr	r3, [pc, #56]	; (800ba50 <perfect_slalom+0x29c>)
 800ba16:	2207      	movs	r2, #7
 800ba18:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800ba1a:	4b0e      	ldr	r3, [pc, #56]	; (800ba54 <perfect_slalom+0x2a0>)
 800ba1c:	2207      	movs	r2, #7
 800ba1e:	701a      	strb	r2, [r3, #0]
					break;
 800ba20:	e0e4      	b.n	800bbec <perfect_slalom+0x438>
 800ba22:	bf00      	nop
 800ba24:	08013ce4 	.word	0x08013ce4
 800ba28:	20000aec 	.word	0x20000aec
 800ba2c:	08013964 	.word	0x08013964
 800ba30:	40020000 	.word	0x40020000
 800ba34:	08013c24 	.word	0x08013c24
 800ba38:	20000f68 	.word	0x20000f68
 800ba3c:	20000456 	.word	0x20000456
 800ba40:	200015c8 	.word	0x200015c8
 800ba44:	20000bb1 	.word	0x20000bb1
 800ba48:	20000454 	.word	0x20000454
 800ba4c:	20000f7c 	.word	0x20000f7c
 800ba50:	20000bb0 	.word	0x20000bb0
 800ba54:	20000b4c 	.word	0x20000b4c
 800ba58:	08013c30 	.word	0x08013c30
 800ba5c:	08013c7c 	.word	0x08013c7c

				case 4:
					//----a二次探索スラロームHigh Speed + 既知区間加速----
					printf("Second Run. (Slalom)\n");
 800ba60:	4863      	ldr	r0, [pc, #396]	; (800bbf0 <perfect_slalom+0x43c>)
 800ba62:	f006 fed5 	bl	8012810 <puts>
					MF.FLAG.SCND = 1;
 800ba66:	4a63      	ldr	r2, [pc, #396]	; (800bbf4 <perfect_slalom+0x440>)
 800ba68:	8813      	ldrh	r3, [r2, #0]
 800ba6a:	f043 0320 	orr.w	r3, r3, #32
 800ba6e:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800ba70:	4a60      	ldr	r2, [pc, #384]	; (800bbf4 <perfect_slalom+0x440>)
 800ba72:	8813      	ldrh	r3, [r2, #0]
 800ba74:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800ba78:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800ba7a:	4a5e      	ldr	r2, [pc, #376]	; (800bbf4 <perfect_slalom+0x440>)
 800ba7c:	8813      	ldrh	r3, [r2, #0]
 800ba7e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800ba82:	8013      	strh	r3, [r2, #0]
					run_mode = HIGH;
 800ba84:	4b5c      	ldr	r3, [pc, #368]	; (800bbf8 <perfect_slalom+0x444>)
 800ba86:	2203      	movs	r2, #3
 800ba88:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800ba8a:	4b5c      	ldr	r3, [pc, #368]	; (800bbfc <perfect_slalom+0x448>)
 800ba8c:	2200      	movs	r2, #0
 800ba8e:	701a      	strb	r2, [r3, #0]
					goal_mode = 2;
 800ba90:	4b5b      	ldr	r3, [pc, #364]	; (800bc00 <perfect_slalom+0x44c>)
 800ba92:	2202      	movs	r2, #2
 800ba94:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 800ba96:	4b5b      	ldr	r3, [pc, #364]	; (800bc04 <perfect_slalom+0x450>)
 800ba98:	f241 3288 	movw	r2, #5000	; 0x1388
 800ba9c:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1200;
 800ba9e:	4b5a      	ldr	r3, [pc, #360]	; (800bc08 <perfect_slalom+0x454>)
 800baa0:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 800baa4:	801a      	strh	r2, [r3, #0]
					goal_x = 7;
 800baa6:	4b59      	ldr	r3, [pc, #356]	; (800bc0c <perfect_slalom+0x458>)
 800baa8:	2207      	movs	r2, #7
 800baaa:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800baac:	4b58      	ldr	r3, [pc, #352]	; (800bc10 <perfect_slalom+0x45c>)
 800baae:	2207      	movs	r2, #7
 800bab0:	701a      	strb	r2, [r3, #0]

					get_base();
 800bab2:	f006 f813 	bl	8011adc <get_base>

					searchD();
 800bab6:	f003 fb1f 	bl	800f0f8 <searchD>
					HAL_Delay(2000);
 800baba:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800babe:	f7f5 faad 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800bac2:	4b53      	ldr	r3, [pc, #332]	; (800bc10 <perfect_slalom+0x45c>)
 800bac4:	2200      	movs	r2, #0
 800bac6:	701a      	strb	r2, [r3, #0]
 800bac8:	4b51      	ldr	r3, [pc, #324]	; (800bc10 <perfect_slalom+0x45c>)
 800baca:	781a      	ldrb	r2, [r3, #0]
 800bacc:	4b4f      	ldr	r3, [pc, #316]	; (800bc0c <perfect_slalom+0x458>)
 800bace:	701a      	strb	r2, [r3, #0]
					searchD();
 800bad0:	f003 fb12 	bl	800f0f8 <searchD>

					goal_x = 7;
 800bad4:	4b4d      	ldr	r3, [pc, #308]	; (800bc0c <perfect_slalom+0x458>)
 800bad6:	2207      	movs	r2, #7
 800bad8:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800bada:	4b4d      	ldr	r3, [pc, #308]	; (800bc10 <perfect_slalom+0x45c>)
 800badc:	2207      	movs	r2, #7
 800bade:	701a      	strb	r2, [r3, #0]
					break;
 800bae0:	e084      	b.n	800bbec <perfect_slalom+0x438>

				case 5:
					//----a二次探索スラロームHigh Speed + 既知区間加速----
					printf("Second Run. (Slalom)\n");
 800bae2:	4843      	ldr	r0, [pc, #268]	; (800bbf0 <perfect_slalom+0x43c>)
 800bae4:	f006 fe94 	bl	8012810 <puts>
					MF.FLAG.SCND = 1;
 800bae8:	4a42      	ldr	r2, [pc, #264]	; (800bbf4 <perfect_slalom+0x440>)
 800baea:	8813      	ldrh	r3, [r2, #0]
 800baec:	f043 0320 	orr.w	r3, r3, #32
 800baf0:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800baf2:	4a40      	ldr	r2, [pc, #256]	; (800bbf4 <perfect_slalom+0x440>)
 800baf4:	8813      	ldrh	r3, [r2, #0]
 800baf6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800bafa:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800bafc:	4a3d      	ldr	r2, [pc, #244]	; (800bbf4 <perfect_slalom+0x440>)
 800bafe:	8813      	ldrh	r3, [r2, #0]
 800bb00:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800bb04:	8013      	strh	r3, [r2, #0]
					run_mode = HIGH;
 800bb06:	4b3c      	ldr	r3, [pc, #240]	; (800bbf8 <perfect_slalom+0x444>)
 800bb08:	2203      	movs	r2, #3
 800bb0a:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800bb0c:	4b3b      	ldr	r3, [pc, #236]	; (800bbfc <perfect_slalom+0x448>)
 800bb0e:	2200      	movs	r2, #0
 800bb10:	701a      	strb	r2, [r3, #0]
					goal_mode = 2;
 800bb12:	4b3b      	ldr	r3, [pc, #236]	; (800bc00 <perfect_slalom+0x44c>)
 800bb14:	2202      	movs	r2, #2
 800bb16:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 800bb18:	4b3a      	ldr	r3, [pc, #232]	; (800bc04 <perfect_slalom+0x450>)
 800bb1a:	f241 3288 	movw	r2, #5000	; 0x1388
 800bb1e:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1600;
 800bb20:	4b39      	ldr	r3, [pc, #228]	; (800bc08 <perfect_slalom+0x454>)
 800bb22:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800bb26:	801a      	strh	r2, [r3, #0]
					goal_x = 7;
 800bb28:	4b38      	ldr	r3, [pc, #224]	; (800bc0c <perfect_slalom+0x458>)
 800bb2a:	2207      	movs	r2, #7
 800bb2c:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800bb2e:	4b38      	ldr	r3, [pc, #224]	; (800bc10 <perfect_slalom+0x45c>)
 800bb30:	2207      	movs	r2, #7
 800bb32:	701a      	strb	r2, [r3, #0]

					get_base();
 800bb34:	f005 ffd2 	bl	8011adc <get_base>

					searchD();
 800bb38:	f003 fade 	bl	800f0f8 <searchD>
					HAL_Delay(2000);
 800bb3c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800bb40:	f7f5 fa6c 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800bb44:	4b32      	ldr	r3, [pc, #200]	; (800bc10 <perfect_slalom+0x45c>)
 800bb46:	2200      	movs	r2, #0
 800bb48:	701a      	strb	r2, [r3, #0]
 800bb4a:	4b31      	ldr	r3, [pc, #196]	; (800bc10 <perfect_slalom+0x45c>)
 800bb4c:	781a      	ldrb	r2, [r3, #0]
 800bb4e:	4b2f      	ldr	r3, [pc, #188]	; (800bc0c <perfect_slalom+0x458>)
 800bb50:	701a      	strb	r2, [r3, #0]
					searchD();
 800bb52:	f003 fad1 	bl	800f0f8 <searchD>

					goal_x = 7;
 800bb56:	4b2d      	ldr	r3, [pc, #180]	; (800bc0c <perfect_slalom+0x458>)
 800bb58:	2207      	movs	r2, #7
 800bb5a:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800bb5c:	4b2c      	ldr	r3, [pc, #176]	; (800bc10 <perfect_slalom+0x45c>)
 800bb5e:	2207      	movs	r2, #7
 800bb60:	701a      	strb	r2, [r3, #0]
					break;
 800bb62:	e043      	b.n	800bbec <perfect_slalom+0x438>

				case 6:
					//----a二次探索スラロームHigh Speed + 既知区間加速----
					printf("Second Run. (Slalom)\n");
 800bb64:	4822      	ldr	r0, [pc, #136]	; (800bbf0 <perfect_slalom+0x43c>)
 800bb66:	f006 fe53 	bl	8012810 <puts>
					MF.FLAG.SCND = 1;
 800bb6a:	4a22      	ldr	r2, [pc, #136]	; (800bbf4 <perfect_slalom+0x440>)
 800bb6c:	8813      	ldrh	r3, [r2, #0]
 800bb6e:	f043 0320 	orr.w	r3, r3, #32
 800bb72:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800bb74:	4a1f      	ldr	r2, [pc, #124]	; (800bbf4 <perfect_slalom+0x440>)
 800bb76:	8813      	ldrh	r3, [r2, #0]
 800bb78:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800bb7c:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800bb7e:	4a1d      	ldr	r2, [pc, #116]	; (800bbf4 <perfect_slalom+0x440>)
 800bb80:	8813      	ldrh	r3, [r2, #0]
 800bb82:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800bb86:	8013      	strh	r3, [r2, #0]
					run_mode = HIGH;
 800bb88:	4b1b      	ldr	r3, [pc, #108]	; (800bbf8 <perfect_slalom+0x444>)
 800bb8a:	2203      	movs	r2, #3
 800bb8c:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800bb8e:	4b1b      	ldr	r3, [pc, #108]	; (800bbfc <perfect_slalom+0x448>)
 800bb90:	2200      	movs	r2, #0
 800bb92:	701a      	strb	r2, [r3, #0]
					goal_mode = 2;
 800bb94:	4b1a      	ldr	r3, [pc, #104]	; (800bc00 <perfect_slalom+0x44c>)
 800bb96:	2202      	movs	r2, #2
 800bb98:	701a      	strb	r2, [r3, #0]
					accel_hs = 10000;
 800bb9a:	4b1a      	ldr	r3, [pc, #104]	; (800bc04 <perfect_slalom+0x450>)
 800bb9c:	f242 7210 	movw	r2, #10000	; 0x2710
 800bba0:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 2000;
 800bba2:	4b19      	ldr	r3, [pc, #100]	; (800bc08 <perfect_slalom+0x454>)
 800bba4:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800bba8:	801a      	strh	r2, [r3, #0]
					goal_x = 7;
 800bbaa:	4b18      	ldr	r3, [pc, #96]	; (800bc0c <perfect_slalom+0x458>)
 800bbac:	2207      	movs	r2, #7
 800bbae:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800bbb0:	4b17      	ldr	r3, [pc, #92]	; (800bc10 <perfect_slalom+0x45c>)
 800bbb2:	2207      	movs	r2, #7
 800bbb4:	701a      	strb	r2, [r3, #0]

					get_base();
 800bbb6:	f005 ff91 	bl	8011adc <get_base>

					searchD();
 800bbba:	f003 fa9d 	bl	800f0f8 <searchD>
					HAL_Delay(2000);
 800bbbe:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800bbc2:	f7f5 fa2b 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800bbc6:	4b12      	ldr	r3, [pc, #72]	; (800bc10 <perfect_slalom+0x45c>)
 800bbc8:	2200      	movs	r2, #0
 800bbca:	701a      	strb	r2, [r3, #0]
 800bbcc:	4b10      	ldr	r3, [pc, #64]	; (800bc10 <perfect_slalom+0x45c>)
 800bbce:	781a      	ldrb	r2, [r3, #0]
 800bbd0:	4b0e      	ldr	r3, [pc, #56]	; (800bc0c <perfect_slalom+0x458>)
 800bbd2:	701a      	strb	r2, [r3, #0]
					searchD();
 800bbd4:	f003 fa90 	bl	800f0f8 <searchD>

					goal_x = 7;
 800bbd8:	4b0c      	ldr	r3, [pc, #48]	; (800bc0c <perfect_slalom+0x458>)
 800bbda:	2207      	movs	r2, #7
 800bbdc:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800bbde:	4b0c      	ldr	r3, [pc, #48]	; (800bc10 <perfect_slalom+0x45c>)
 800bbe0:	2207      	movs	r2, #7
 800bbe2:	701a      	strb	r2, [r3, #0]
					break;
 800bbe4:	e002      	b.n	800bbec <perfect_slalom+0x438>

				case 7:
					perfect_pass();
 800bbe6:	f000 f815 	bl	800bc14 <perfect_pass>
					break;
 800bbea:	bf00      	nop
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 800bbec:	e5eb      	b.n	800b7c6 <perfect_slalom+0x12>
 800bbee:	bf00      	nop
 800bbf0:	08013c7c 	.word	0x08013c7c
 800bbf4:	20000f68 	.word	0x20000f68
 800bbf8:	20000456 	.word	0x20000456
 800bbfc:	200015c8 	.word	0x200015c8
 800bc00:	20000bb1 	.word	0x20000bb1
 800bc04:	20000454 	.word	0x20000454
 800bc08:	20000f7c 	.word	0x20000f7c
 800bc0c:	20000bb0 	.word	0x20000bb0
 800bc10:	20000b4c 	.word	0x20000b4c

0800bc14 <perfect_pass>:
//perfect_pass
// a本番用pass圧縮走行モード
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void perfect_pass(void){
 800bc14:	b580      	push	{r7, lr}
 800bc16:	b082      	sub	sp, #8
 800bc18:	af00      	add	r7, sp, #0

	int mode = 0;
 800bc1a:	2300      	movs	r3, #0
 800bc1c:	607b      	str	r3, [r7, #4]
	printf("Perfect Pass Press, Mode : %d\n", mode);
 800bc1e:	6879      	ldr	r1, [r7, #4]
 800bc20:	489f      	ldr	r0, [pc, #636]	; (800bea0 <perfect_pass+0x28c>)
 800bc22:	f006 fd81 	bl	8012728 <iprintf>

	while(1){
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	b2db      	uxtb	r3, r3
 800bc2a:	f003 0301 	and.w	r3, r3, #1
 800bc2e:	b2d8      	uxtb	r0, r3
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	b2db      	uxtb	r3, r3
 800bc34:	f003 0302 	and.w	r3, r3, #2
 800bc38:	b2d9      	uxtb	r1, r3
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	b2db      	uxtb	r3, r3
 800bc3e:	f003 0304 	and.w	r3, r3, #4
 800bc42:	b2db      	uxtb	r3, r3
 800bc44:	461a      	mov	r2, r3
 800bc46:	f005 ffa1 	bl	8011b8c <led_write>
		  if(dist_r >= 20){
 800bc4a:	4b96      	ldr	r3, [pc, #600]	; (800bea4 <perfect_pass+0x290>)
 800bc4c:	edd3 7a00 	vldr	s15, [r3]
 800bc50:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 800bc54:	eef4 7ac7 	vcmpe.f32	s15, s14
 800bc58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bc5c:	db0f      	blt.n	800bc7e <perfect_pass+0x6a>
			  mode++;
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	3301      	adds	r3, #1
 800bc62:	607b      	str	r3, [r7, #4]
			  dist_r = 0;
 800bc64:	4b8f      	ldr	r3, [pc, #572]	; (800bea4 <perfect_pass+0x290>)
 800bc66:	f04f 0200 	mov.w	r2, #0
 800bc6a:	601a      	str	r2, [r3, #0]
			  if(mode > 7){
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	2b07      	cmp	r3, #7
 800bc70:	dd01      	ble.n	800bc76 <perfect_pass+0x62>
				  mode = 0;
 800bc72:	2300      	movs	r3, #0
 800bc74:	607b      	str	r3, [r7, #4]
			  }
			  printf("Mode : %d\n", mode);
 800bc76:	6879      	ldr	r1, [r7, #4]
 800bc78:	488b      	ldr	r0, [pc, #556]	; (800bea8 <perfect_pass+0x294>)
 800bc7a:	f006 fd55 	bl	8012728 <iprintf>
		  }
		  if(dist_r <= -20){
 800bc7e:	4b89      	ldr	r3, [pc, #548]	; (800bea4 <perfect_pass+0x290>)
 800bc80:	edd3 7a00 	vldr	s15, [r3]
 800bc84:	eebb 7a04 	vmov.f32	s14, #180	; 0xc1a00000 -20.0
 800bc88:	eef4 7ac7 	vcmpe.f32	s15, s14
 800bc8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bc90:	d80f      	bhi.n	800bcb2 <perfect_pass+0x9e>
			  mode--;
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	3b01      	subs	r3, #1
 800bc96:	607b      	str	r3, [r7, #4]
			  dist_r = 0;
 800bc98:	4b82      	ldr	r3, [pc, #520]	; (800bea4 <perfect_pass+0x290>)
 800bc9a:	f04f 0200 	mov.w	r2, #0
 800bc9e:	601a      	str	r2, [r3, #0]
			  if(mode < 0){
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	2b00      	cmp	r3, #0
 800bca4:	da01      	bge.n	800bcaa <perfect_pass+0x96>
				  mode = 7;
 800bca6:	2307      	movs	r3, #7
 800bca8:	607b      	str	r3, [r7, #4]
			  }
			  printf("Mode : %d\n", mode);
 800bcaa:	6879      	ldr	r1, [r7, #4]
 800bcac:	487e      	ldr	r0, [pc, #504]	; (800bea8 <perfect_pass+0x294>)
 800bcae:	f006 fd3b 	bl	8012728 <iprintf>
		  }
		  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET){
 800bcb2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800bcb6:	487d      	ldr	r0, [pc, #500]	; (800beac <perfect_pass+0x298>)
 800bcb8:	f7f6 fb0c 	bl	80022d4 <HAL_GPIO_ReadPin>
 800bcbc:	4603      	mov	r3, r0
 800bcbe:	2b00      	cmp	r3, #0
 800bcc0:	d1b1      	bne.n	800bc26 <perfect_pass+0x12>
			  HAL_Delay(50);
 800bcc2:	2032      	movs	r0, #50	; 0x32
 800bcc4:	f7f5 f9aa 	bl	800101c <HAL_Delay>
			  while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET);
 800bcc8:	bf00      	nop
 800bcca:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800bcce:	4877      	ldr	r0, [pc, #476]	; (800beac <perfect_pass+0x298>)
 800bcd0:	f7f6 fb00 	bl	80022d4 <HAL_GPIO_ReadPin>
 800bcd4:	4603      	mov	r3, r0
 800bcd6:	2b00      	cmp	r3, #0
 800bcd8:	d0f7      	beq.n	800bcca <perfect_pass+0xb6>
			  drive_ready();
 800bcda:	f7f8 ffd1 	bl	8004c80 <drive_ready>

			  switch(mode){
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	2b07      	cmp	r3, #7
 800bce2:	d8a0      	bhi.n	800bc26 <perfect_pass+0x12>
 800bce4:	a201      	add	r2, pc, #4	; (adr r2, 800bcec <perfect_pass+0xd8>)
 800bce6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bcea:	bf00      	nop
 800bcec:	0800bc27 	.word	0x0800bc27
 800bcf0:	0800bd0d 	.word	0x0800bd0d
 800bcf4:	0800bd91 	.word	0x0800bd91
 800bcf8:	0800be19 	.word	0x0800be19
 800bcfc:	0800bee1 	.word	0x0800bee1
 800bd00:	0800bf69 	.word	0x0800bf69
 800bd04:	0800c01d 	.word	0x0800c01d
 800bd08:	0800c309 	.word	0x0800c309
				case 0:
					break;

				case 1:
					//----a一次探索スラローム走行----
					printf("First Run.\n");
 800bd0c:	4868      	ldr	r0, [pc, #416]	; (800beb0 <perfect_pass+0x29c>)
 800bd0e:	f006 fd7f 	bl	8012810 <puts>
					MF.FLAG.SCND = 0;
 800bd12:	4a68      	ldr	r2, [pc, #416]	; (800beb4 <perfect_pass+0x2a0>)
 800bd14:	8813      	ldrh	r3, [r2, #0]
 800bd16:	f36f 1345 	bfc	r3, #5, #1
 800bd1a:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800bd1c:	4a65      	ldr	r2, [pc, #404]	; (800beb4 <perfect_pass+0x2a0>)
 800bd1e:	8813      	ldrh	r3, [r2, #0]
 800bd20:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800bd24:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 0;
 800bd26:	4a63      	ldr	r2, [pc, #396]	; (800beb4 <perfect_pass+0x2a0>)
 800bd28:	8813      	ldrh	r3, [r2, #0]
 800bd2a:	f36f 238a 	bfc	r3, #10, #1
 800bd2e:	8013      	strh	r3, [r2, #0]
					run_mode = MIDDLE;
 800bd30:	4b61      	ldr	r3, [pc, #388]	; (800beb8 <perfect_pass+0x2a4>)
 800bd32:	2202      	movs	r2, #2
 800bd34:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800bd36:	4b61      	ldr	r3, [pc, #388]	; (800bebc <perfect_pass+0x2a8>)
 800bd38:	2200      	movs	r2, #0
 800bd3a:	701a      	strb	r2, [r3, #0]
					goal_mode = 2;
 800bd3c:	4b60      	ldr	r3, [pc, #384]	; (800bec0 <perfect_pass+0x2ac>)
 800bd3e:	2202      	movs	r2, #2
 800bd40:	701a      	strb	r2, [r3, #0]
					accel_hs = 4000;
 800bd42:	4b60      	ldr	r3, [pc, #384]	; (800bec4 <perfect_pass+0x2b0>)
 800bd44:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 800bd48:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1000;
 800bd4a:	4b5f      	ldr	r3, [pc, #380]	; (800bec8 <perfect_pass+0x2b4>)
 800bd4c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800bd50:	801a      	strh	r2, [r3, #0]

					goal_x = 7;
 800bd52:	4b5e      	ldr	r3, [pc, #376]	; (800becc <perfect_pass+0x2b8>)
 800bd54:	2207      	movs	r2, #7
 800bd56:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800bd58:	4b5d      	ldr	r3, [pc, #372]	; (800bed0 <perfect_pass+0x2bc>)
 800bd5a:	2207      	movs	r2, #7
 800bd5c:	701a      	strb	r2, [r3, #0]

					get_base();
 800bd5e:	f005 febd 	bl	8011adc <get_base>

					searchC();
 800bd62:	f002 fee5 	bl	800eb30 <searchC>
					HAL_Delay(2000);
 800bd66:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800bd6a:	f7f5 f957 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800bd6e:	4b58      	ldr	r3, [pc, #352]	; (800bed0 <perfect_pass+0x2bc>)
 800bd70:	2200      	movs	r2, #0
 800bd72:	701a      	strb	r2, [r3, #0]
 800bd74:	4b56      	ldr	r3, [pc, #344]	; (800bed0 <perfect_pass+0x2bc>)
 800bd76:	781a      	ldrb	r2, [r3, #0]
 800bd78:	4b54      	ldr	r3, [pc, #336]	; (800becc <perfect_pass+0x2b8>)
 800bd7a:	701a      	strb	r2, [r3, #0]
					searchC();
 800bd7c:	f002 fed8 	bl	800eb30 <searchC>

					goal_x = 7;
 800bd80:	4b52      	ldr	r3, [pc, #328]	; (800becc <perfect_pass+0x2b8>)
 800bd82:	2207      	movs	r2, #7
 800bd84:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800bd86:	4b52      	ldr	r3, [pc, #328]	; (800bed0 <perfect_pass+0x2bc>)
 800bd88:	2207      	movs	r2, #7
 800bd8a:	701a      	strb	r2, [r3, #0]
					break;
 800bd8c:	f000 bc15 	b.w	800c5ba <perfect_pass+0x9a6>

				case 2:
					//----a直線と大回り圧縮----
					printf("pass press 3.\n");
 800bd90:	4850      	ldr	r0, [pc, #320]	; (800bed4 <perfect_pass+0x2c0>)
 800bd92:	f006 fd3d 	bl	8012810 <puts>
					MF.FLAG.SCND = 1;
 800bd96:	4a47      	ldr	r2, [pc, #284]	; (800beb4 <perfect_pass+0x2a0>)
 800bd98:	8813      	ldrh	r3, [r2, #0]
 800bd9a:	f043 0320 	orr.w	r3, r3, #32
 800bd9e:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800bda0:	4a44      	ldr	r2, [pc, #272]	; (800beb4 <perfect_pass+0x2a0>)
 800bda2:	8813      	ldrh	r3, [r2, #0]
 800bda4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800bda8:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800bdaa:	4a42      	ldr	r2, [pc, #264]	; (800beb4 <perfect_pass+0x2a0>)
 800bdac:	8813      	ldrh	r3, [r2, #0]
 800bdae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800bdb2:	8013      	strh	r3, [r2, #0]
					run_mode = MIDDLE;
 800bdb4:	4b40      	ldr	r3, [pc, #256]	; (800beb8 <perfect_pass+0x2a4>)
 800bdb6:	2202      	movs	r2, #2
 800bdb8:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800bdba:	4b40      	ldr	r3, [pc, #256]	; (800bebc <perfect_pass+0x2a8>)
 800bdbc:	2200      	movs	r2, #0
 800bdbe:	701a      	strb	r2, [r3, #0]
					goal_mode = 2;
 800bdc0:	4b3f      	ldr	r3, [pc, #252]	; (800bec0 <perfect_pass+0x2ac>)
 800bdc2:	2202      	movs	r2, #2
 800bdc4:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 800bdc6:	4b3f      	ldr	r3, [pc, #252]	; (800bec4 <perfect_pass+0x2b0>)
 800bdc8:	f241 3288 	movw	r2, #5000	; 0x1388
 800bdcc:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1000;
 800bdce:	4b3e      	ldr	r3, [pc, #248]	; (800bec8 <perfect_pass+0x2b4>)
 800bdd0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800bdd4:	801a      	strh	r2, [r3, #0]

					pass_mode = 3;						//a半区画ベースでroute配列生成
 800bdd6:	4b40      	ldr	r3, [pc, #256]	; (800bed8 <perfect_pass+0x2c4>)
 800bdd8:	2203      	movs	r2, #3
 800bdda:	701a      	strb	r2, [r3, #0]

					goal_x = 7;
 800bddc:	4b3b      	ldr	r3, [pc, #236]	; (800becc <perfect_pass+0x2b8>)
 800bdde:	2207      	movs	r2, #7
 800bde0:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800bde2:	4b3b      	ldr	r3, [pc, #236]	; (800bed0 <perfect_pass+0x2bc>)
 800bde4:	2207      	movs	r2, #7
 800bde6:	701a      	strb	r2, [r3, #0]

					get_base();
 800bde8:	f005 fe78 	bl	8011adc <get_base>

					searchF3();
 800bdec:	f003 fb1a 	bl	800f424 <searchF3>
					HAL_Delay(2000);
 800bdf0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800bdf4:	f7f5 f912 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800bdf8:	4b35      	ldr	r3, [pc, #212]	; (800bed0 <perfect_pass+0x2bc>)
 800bdfa:	2200      	movs	r2, #0
 800bdfc:	701a      	strb	r2, [r3, #0]
 800bdfe:	4b34      	ldr	r3, [pc, #208]	; (800bed0 <perfect_pass+0x2bc>)
 800be00:	781a      	ldrb	r2, [r3, #0]
 800be02:	4b32      	ldr	r3, [pc, #200]	; (800becc <perfect_pass+0x2b8>)
 800be04:	701a      	strb	r2, [r3, #0]
					searchF3();
 800be06:	f003 fb0d 	bl	800f424 <searchF3>

					goal_x = 7;
 800be0a:	4b30      	ldr	r3, [pc, #192]	; (800becc <perfect_pass+0x2b8>)
 800be0c:	2207      	movs	r2, #7
 800be0e:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800be10:	4b2f      	ldr	r3, [pc, #188]	; (800bed0 <perfect_pass+0x2bc>)
 800be12:	2207      	movs	r2, #7
 800be14:	701a      	strb	r2, [r3, #0]
					break;
 800be16:	e3d0      	b.n	800c5ba <perfect_pass+0x9a6>

				case 3:
					//----a直線と大回り圧縮と斜めｰｰｰｰ
					printf("pass press 4.\n");
 800be18:	4830      	ldr	r0, [pc, #192]	; (800bedc <perfect_pass+0x2c8>)
 800be1a:	f006 fcf9 	bl	8012810 <puts>
					MF.FLAG.SCND = 1;
 800be1e:	4a25      	ldr	r2, [pc, #148]	; (800beb4 <perfect_pass+0x2a0>)
 800be20:	8813      	ldrh	r3, [r2, #0]
 800be22:	f043 0320 	orr.w	r3, r3, #32
 800be26:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800be28:	4a22      	ldr	r2, [pc, #136]	; (800beb4 <perfect_pass+0x2a0>)
 800be2a:	8813      	ldrh	r3, [r2, #0]
 800be2c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800be30:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800be32:	4a20      	ldr	r2, [pc, #128]	; (800beb4 <perfect_pass+0x2a0>)
 800be34:	8813      	ldrh	r3, [r2, #0]
 800be36:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800be3a:	8013      	strh	r3, [r2, #0]
					run_mode = MIDDLE;
 800be3c:	4b1e      	ldr	r3, [pc, #120]	; (800beb8 <perfect_pass+0x2a4>)
 800be3e:	2202      	movs	r2, #2
 800be40:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800be42:	4b1e      	ldr	r3, [pc, #120]	; (800bebc <perfect_pass+0x2a8>)
 800be44:	2200      	movs	r2, #0
 800be46:	701a      	strb	r2, [r3, #0]
					goal_mode = 2;
 800be48:	4b1d      	ldr	r3, [pc, #116]	; (800bec0 <perfect_pass+0x2ac>)
 800be4a:	2202      	movs	r2, #2
 800be4c:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 800be4e:	4b1d      	ldr	r3, [pc, #116]	; (800bec4 <perfect_pass+0x2b0>)
 800be50:	f241 3288 	movw	r2, #5000	; 0x1388
 800be54:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1000;
 800be56:	4b1c      	ldr	r3, [pc, #112]	; (800bec8 <perfect_pass+0x2b4>)
 800be58:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800be5c:	801a      	strh	r2, [r3, #0]

					pass_mode = 4;
 800be5e:	4b1e      	ldr	r3, [pc, #120]	; (800bed8 <perfect_pass+0x2c4>)
 800be60:	2204      	movs	r2, #4
 800be62:	701a      	strb	r2, [r3, #0]

					goal_x = 7;
 800be64:	4b19      	ldr	r3, [pc, #100]	; (800becc <perfect_pass+0x2b8>)
 800be66:	2207      	movs	r2, #7
 800be68:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800be6a:	4b19      	ldr	r3, [pc, #100]	; (800bed0 <perfect_pass+0x2bc>)
 800be6c:	2207      	movs	r2, #7
 800be6e:	701a      	strb	r2, [r3, #0]

					get_base();
 800be70:	f005 fe34 	bl	8011adc <get_base>

					searchF4();
 800be74:	f003 fbb2 	bl	800f5dc <searchF4>
					HAL_Delay(2000);
 800be78:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800be7c:	f7f5 f8ce 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800be80:	4b13      	ldr	r3, [pc, #76]	; (800bed0 <perfect_pass+0x2bc>)
 800be82:	2200      	movs	r2, #0
 800be84:	701a      	strb	r2, [r3, #0]
 800be86:	4b12      	ldr	r3, [pc, #72]	; (800bed0 <perfect_pass+0x2bc>)
 800be88:	781a      	ldrb	r2, [r3, #0]
 800be8a:	4b10      	ldr	r3, [pc, #64]	; (800becc <perfect_pass+0x2b8>)
 800be8c:	701a      	strb	r2, [r3, #0]
					searchF4();
 800be8e:	f003 fba5 	bl	800f5dc <searchF4>

					goal_x = 7;
 800be92:	4b0e      	ldr	r3, [pc, #56]	; (800becc <perfect_pass+0x2b8>)
 800be94:	2207      	movs	r2, #7
 800be96:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800be98:	4b0d      	ldr	r3, [pc, #52]	; (800bed0 <perfect_pass+0x2bc>)
 800be9a:	2207      	movs	r2, #7
 800be9c:	701a      	strb	r2, [r3, #0]
					break;
 800be9e:	e38c      	b.n	800c5ba <perfect_pass+0x9a6>
 800bea0:	08013d00 	.word	0x08013d00
 800bea4:	20000aec 	.word	0x20000aec
 800bea8:	08013964 	.word	0x08013964
 800beac:	40020000 	.word	0x40020000
 800beb0:	08013c24 	.word	0x08013c24
 800beb4:	20000f68 	.word	0x20000f68
 800beb8:	20000456 	.word	0x20000456
 800bebc:	200015c8 	.word	0x200015c8
 800bec0:	20000bb1 	.word	0x20000bb1
 800bec4:	20000454 	.word	0x20000454
 800bec8:	20000f7c 	.word	0x20000f7c
 800becc:	20000bb0 	.word	0x20000bb0
 800bed0:	20000b4c 	.word	0x20000b4c
 800bed4:	08013d20 	.word	0x08013d20
 800bed8:	20000457 	.word	0x20000457
 800bedc:	08013b68 	.word	0x08013b68

				case 4:
					//----a直線と大回り圧縮 High Speed----
					printf("pass press 3-2.\n");
 800bee0:	4843      	ldr	r0, [pc, #268]	; (800bff0 <perfect_pass+0x3dc>)
 800bee2:	f006 fc95 	bl	8012810 <puts>
					MF.FLAG.SCND = 1;
 800bee6:	4a43      	ldr	r2, [pc, #268]	; (800bff4 <perfect_pass+0x3e0>)
 800bee8:	8813      	ldrh	r3, [r2, #0]
 800beea:	f043 0320 	orr.w	r3, r3, #32
 800beee:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800bef0:	4a40      	ldr	r2, [pc, #256]	; (800bff4 <perfect_pass+0x3e0>)
 800bef2:	8813      	ldrh	r3, [r2, #0]
 800bef4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800bef8:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800befa:	4a3e      	ldr	r2, [pc, #248]	; (800bff4 <perfect_pass+0x3e0>)
 800befc:	8813      	ldrh	r3, [r2, #0]
 800befe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800bf02:	8013      	strh	r3, [r2, #0]
					run_mode = HIGH;
 800bf04:	4b3c      	ldr	r3, [pc, #240]	; (800bff8 <perfect_pass+0x3e4>)
 800bf06:	2203      	movs	r2, #3
 800bf08:	701a      	strb	r2, [r3, #0]
					goal_mode = 2;
 800bf0a:	4b3c      	ldr	r3, [pc, #240]	; (800bffc <perfect_pass+0x3e8>)
 800bf0c:	2202      	movs	r2, #2
 800bf0e:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800bf10:	4b3b      	ldr	r3, [pc, #236]	; (800c000 <perfect_pass+0x3ec>)
 800bf12:	2200      	movs	r2, #0
 800bf14:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 800bf16:	4b3b      	ldr	r3, [pc, #236]	; (800c004 <perfect_pass+0x3f0>)
 800bf18:	f241 3288 	movw	r2, #5000	; 0x1388
 800bf1c:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1200;
 800bf1e:	4b3a      	ldr	r3, [pc, #232]	; (800c008 <perfect_pass+0x3f4>)
 800bf20:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 800bf24:	801a      	strh	r2, [r3, #0]

					pass_mode = 3;						//a半区画ベースでroute配列生成
 800bf26:	4b39      	ldr	r3, [pc, #228]	; (800c00c <perfect_pass+0x3f8>)
 800bf28:	2203      	movs	r2, #3
 800bf2a:	701a      	strb	r2, [r3, #0]

					goal_x = 7;
 800bf2c:	4b38      	ldr	r3, [pc, #224]	; (800c010 <perfect_pass+0x3fc>)
 800bf2e:	2207      	movs	r2, #7
 800bf30:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800bf32:	4b38      	ldr	r3, [pc, #224]	; (800c014 <perfect_pass+0x400>)
 800bf34:	2207      	movs	r2, #7
 800bf36:	701a      	strb	r2, [r3, #0]

					get_base();
 800bf38:	f005 fdd0 	bl	8011adc <get_base>

					searchF3();
 800bf3c:	f003 fa72 	bl	800f424 <searchF3>
					HAL_Delay(2000);
 800bf40:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800bf44:	f7f5 f86a 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800bf48:	4b32      	ldr	r3, [pc, #200]	; (800c014 <perfect_pass+0x400>)
 800bf4a:	2200      	movs	r2, #0
 800bf4c:	701a      	strb	r2, [r3, #0]
 800bf4e:	4b31      	ldr	r3, [pc, #196]	; (800c014 <perfect_pass+0x400>)
 800bf50:	781a      	ldrb	r2, [r3, #0]
 800bf52:	4b2f      	ldr	r3, [pc, #188]	; (800c010 <perfect_pass+0x3fc>)
 800bf54:	701a      	strb	r2, [r3, #0]
					searchF3();
 800bf56:	f003 fa65 	bl	800f424 <searchF3>

					goal_x = 7;
 800bf5a:	4b2d      	ldr	r3, [pc, #180]	; (800c010 <perfect_pass+0x3fc>)
 800bf5c:	2207      	movs	r2, #7
 800bf5e:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800bf60:	4b2c      	ldr	r3, [pc, #176]	; (800c014 <perfect_pass+0x400>)
 800bf62:	2207      	movs	r2, #7
 800bf64:	701a      	strb	r2, [r3, #0]
					break;
 800bf66:	e328      	b.n	800c5ba <perfect_pass+0x9a6>

				case 5:
					//----a直線と大回り圧縮と斜め High Speedｰｰｰｰ
					printf("pass press 4.\n");
 800bf68:	482b      	ldr	r0, [pc, #172]	; (800c018 <perfect_pass+0x404>)
 800bf6a:	f006 fc51 	bl	8012810 <puts>
					MF.FLAG.SCND = 1;
 800bf6e:	4a21      	ldr	r2, [pc, #132]	; (800bff4 <perfect_pass+0x3e0>)
 800bf70:	8813      	ldrh	r3, [r2, #0]
 800bf72:	f043 0320 	orr.w	r3, r3, #32
 800bf76:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800bf78:	4a1e      	ldr	r2, [pc, #120]	; (800bff4 <perfect_pass+0x3e0>)
 800bf7a:	8813      	ldrh	r3, [r2, #0]
 800bf7c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800bf80:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800bf82:	4a1c      	ldr	r2, [pc, #112]	; (800bff4 <perfect_pass+0x3e0>)
 800bf84:	8813      	ldrh	r3, [r2, #0]
 800bf86:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800bf8a:	8013      	strh	r3, [r2, #0]
					run_mode = HIGH;
 800bf8c:	4b1a      	ldr	r3, [pc, #104]	; (800bff8 <perfect_pass+0x3e4>)
 800bf8e:	2203      	movs	r2, #3
 800bf90:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800bf92:	4b1b      	ldr	r3, [pc, #108]	; (800c000 <perfect_pass+0x3ec>)
 800bf94:	2200      	movs	r2, #0
 800bf96:	701a      	strb	r2, [r3, #0]
					goal_mode = 2;
 800bf98:	4b18      	ldr	r3, [pc, #96]	; (800bffc <perfect_pass+0x3e8>)
 800bf9a:	2202      	movs	r2, #2
 800bf9c:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 800bf9e:	4b19      	ldr	r3, [pc, #100]	; (800c004 <perfect_pass+0x3f0>)
 800bfa0:	f241 3288 	movw	r2, #5000	; 0x1388
 800bfa4:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1200;
 800bfa6:	4b18      	ldr	r3, [pc, #96]	; (800c008 <perfect_pass+0x3f4>)
 800bfa8:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 800bfac:	801a      	strh	r2, [r3, #0]

					pass_mode = 4;
 800bfae:	4b17      	ldr	r3, [pc, #92]	; (800c00c <perfect_pass+0x3f8>)
 800bfb0:	2204      	movs	r2, #4
 800bfb2:	701a      	strb	r2, [r3, #0]

					goal_x = 7;
 800bfb4:	4b16      	ldr	r3, [pc, #88]	; (800c010 <perfect_pass+0x3fc>)
 800bfb6:	2207      	movs	r2, #7
 800bfb8:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800bfba:	4b16      	ldr	r3, [pc, #88]	; (800c014 <perfect_pass+0x400>)
 800bfbc:	2207      	movs	r2, #7
 800bfbe:	701a      	strb	r2, [r3, #0]

					get_base();
 800bfc0:	f005 fd8c 	bl	8011adc <get_base>

					searchF4();
 800bfc4:	f003 fb0a 	bl	800f5dc <searchF4>
					HAL_Delay(2000);
 800bfc8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800bfcc:	f7f5 f826 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800bfd0:	4b10      	ldr	r3, [pc, #64]	; (800c014 <perfect_pass+0x400>)
 800bfd2:	2200      	movs	r2, #0
 800bfd4:	701a      	strb	r2, [r3, #0]
 800bfd6:	4b0f      	ldr	r3, [pc, #60]	; (800c014 <perfect_pass+0x400>)
 800bfd8:	781a      	ldrb	r2, [r3, #0]
 800bfda:	4b0d      	ldr	r3, [pc, #52]	; (800c010 <perfect_pass+0x3fc>)
 800bfdc:	701a      	strb	r2, [r3, #0]
					searchF4();
 800bfde:	f003 fafd 	bl	800f5dc <searchF4>

					goal_x = 7;
 800bfe2:	4b0b      	ldr	r3, [pc, #44]	; (800c010 <perfect_pass+0x3fc>)
 800bfe4:	2207      	movs	r2, #7
 800bfe6:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800bfe8:	4b0a      	ldr	r3, [pc, #40]	; (800c014 <perfect_pass+0x400>)
 800bfea:	2207      	movs	r2, #7
 800bfec:	701a      	strb	r2, [r3, #0]
					break;
 800bfee:	e2e4      	b.n	800c5ba <perfect_pass+0x9a6>
 800bff0:	08013b58 	.word	0x08013b58
 800bff4:	20000f68 	.word	0x20000f68
 800bff8:	20000456 	.word	0x20000456
 800bffc:	20000bb1 	.word	0x20000bb1
 800c000:	200015c8 	.word	0x200015c8
 800c004:	20000454 	.word	0x20000454
 800c008:	20000f7c 	.word	0x20000f7c
 800c00c:	20000457 	.word	0x20000457
 800c010:	20000bb0 	.word	0x20000bb0
 800c014:	20000b4c 	.word	0x20000b4c
 800c018:	08013b68 	.word	0x08013b68

				case 6:
					//----a一次探索スラローム走行----
					printf("First Run.\n");
 800c01c:	48ac      	ldr	r0, [pc, #688]	; (800c2d0 <perfect_pass+0x6bc>)
 800c01e:	f006 fbf7 	bl	8012810 <puts>
					MF.FLAG.SCND = 0;
 800c022:	4aac      	ldr	r2, [pc, #688]	; (800c2d4 <perfect_pass+0x6c0>)
 800c024:	8813      	ldrh	r3, [r2, #0]
 800c026:	f36f 1345 	bfc	r3, #5, #1
 800c02a:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800c02c:	4aa9      	ldr	r2, [pc, #676]	; (800c2d4 <perfect_pass+0x6c0>)
 800c02e:	8813      	ldrh	r3, [r2, #0]
 800c030:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800c034:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 0;
 800c036:	4aa7      	ldr	r2, [pc, #668]	; (800c2d4 <perfect_pass+0x6c0>)
 800c038:	8813      	ldrh	r3, [r2, #0]
 800c03a:	f36f 238a 	bfc	r3, #10, #1
 800c03e:	8013      	strh	r3, [r2, #0]
					run_mode = MIDDLE;
 800c040:	4ba5      	ldr	r3, [pc, #660]	; (800c2d8 <perfect_pass+0x6c4>)
 800c042:	2202      	movs	r2, #2
 800c044:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800c046:	4ba5      	ldr	r3, [pc, #660]	; (800c2dc <perfect_pass+0x6c8>)
 800c048:	2200      	movs	r2, #0
 800c04a:	701a      	strb	r2, [r3, #0]
					goal_mode = 2;
 800c04c:	4ba4      	ldr	r3, [pc, #656]	; (800c2e0 <perfect_pass+0x6cc>)
 800c04e:	2202      	movs	r2, #2
 800c050:	701a      	strb	r2, [r3, #0]
					accel_hs = 4000;
 800c052:	4ba4      	ldr	r3, [pc, #656]	; (800c2e4 <perfect_pass+0x6d0>)
 800c054:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 800c058:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1000;
 800c05a:	4ba3      	ldr	r3, [pc, #652]	; (800c2e8 <perfect_pass+0x6d4>)
 800c05c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800c060:	801a      	strh	r2, [r3, #0]

					goal_x = GOAL_X;
 800c062:	4ba2      	ldr	r3, [pc, #648]	; (800c2ec <perfect_pass+0x6d8>)
 800c064:	2207      	movs	r2, #7
 800c066:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800c068:	4ba1      	ldr	r3, [pc, #644]	; (800c2f0 <perfect_pass+0x6dc>)
 800c06a:	2207      	movs	r2, #7
 800c06c:	701a      	strb	r2, [r3, #0]

					get_base();
 800c06e:	f005 fd35 	bl	8011adc <get_base>

					searchC();
 800c072:	f002 fd5d 	bl	800eb30 <searchC>
					HAL_Delay(2000);
 800c076:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800c07a:	f7f4 ffcf 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800c07e:	4b9c      	ldr	r3, [pc, #624]	; (800c2f0 <perfect_pass+0x6dc>)
 800c080:	2200      	movs	r2, #0
 800c082:	701a      	strb	r2, [r3, #0]
 800c084:	4b9a      	ldr	r3, [pc, #616]	; (800c2f0 <perfect_pass+0x6dc>)
 800c086:	781a      	ldrb	r2, [r3, #0]
 800c088:	4b98      	ldr	r3, [pc, #608]	; (800c2ec <perfect_pass+0x6d8>)
 800c08a:	701a      	strb	r2, [r3, #0]
					searchC();
 800c08c:	f002 fd50 	bl	800eb30 <searchC>

					degree_z = target_degree_z;
 800c090:	4b98      	ldr	r3, [pc, #608]	; (800c2f4 <perfect_pass+0x6e0>)
 800c092:	681b      	ldr	r3, [r3, #0]
 800c094:	4a98      	ldr	r2, [pc, #608]	; (800c2f8 <perfect_pass+0x6e4>)
 800c096:	6013      	str	r3, [r2, #0]
					HAL_Delay(2000);
 800c098:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800c09c:	f7f4 ffbe 	bl	800101c <HAL_Delay>
					degree_z = target_degree_z;
					HAL_Delay(2000);
*/

					//----a直線と大回り圧縮----
					printf("pass press 3.\n");
 800c0a0:	4896      	ldr	r0, [pc, #600]	; (800c2fc <perfect_pass+0x6e8>)
 800c0a2:	f006 fbb5 	bl	8012810 <puts>
					MF.FLAG.SCND = 1;
 800c0a6:	4a8b      	ldr	r2, [pc, #556]	; (800c2d4 <perfect_pass+0x6c0>)
 800c0a8:	8813      	ldrh	r3, [r2, #0]
 800c0aa:	f043 0320 	orr.w	r3, r3, #32
 800c0ae:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800c0b0:	4a88      	ldr	r2, [pc, #544]	; (800c2d4 <perfect_pass+0x6c0>)
 800c0b2:	8813      	ldrh	r3, [r2, #0]
 800c0b4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800c0b8:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800c0ba:	4a86      	ldr	r2, [pc, #536]	; (800c2d4 <perfect_pass+0x6c0>)
 800c0bc:	8813      	ldrh	r3, [r2, #0]
 800c0be:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800c0c2:	8013      	strh	r3, [r2, #0]
					run_mode = MIDDLE;
 800c0c4:	4b84      	ldr	r3, [pc, #528]	; (800c2d8 <perfect_pass+0x6c4>)
 800c0c6:	2202      	movs	r2, #2
 800c0c8:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800c0ca:	4b84      	ldr	r3, [pc, #528]	; (800c2dc <perfect_pass+0x6c8>)
 800c0cc:	2200      	movs	r2, #0
 800c0ce:	701a      	strb	r2, [r3, #0]
					goal_mode = 2;
 800c0d0:	4b83      	ldr	r3, [pc, #524]	; (800c2e0 <perfect_pass+0x6cc>)
 800c0d2:	2202      	movs	r2, #2
 800c0d4:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 800c0d6:	4b83      	ldr	r3, [pc, #524]	; (800c2e4 <perfect_pass+0x6d0>)
 800c0d8:	f241 3288 	movw	r2, #5000	; 0x1388
 800c0dc:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1200;
 800c0de:	4b82      	ldr	r3, [pc, #520]	; (800c2e8 <perfect_pass+0x6d4>)
 800c0e0:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 800c0e4:	801a      	strh	r2, [r3, #0]

					pass_mode = 3;						//a半区画ベースでroute配列生成
 800c0e6:	4b86      	ldr	r3, [pc, #536]	; (800c300 <perfect_pass+0x6ec>)
 800c0e8:	2203      	movs	r2, #3
 800c0ea:	701a      	strb	r2, [r3, #0]

					goal_x = GOAL_X;
 800c0ec:	4b7f      	ldr	r3, [pc, #508]	; (800c2ec <perfect_pass+0x6d8>)
 800c0ee:	2207      	movs	r2, #7
 800c0f0:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800c0f2:	4b7f      	ldr	r3, [pc, #508]	; (800c2f0 <perfect_pass+0x6dc>)
 800c0f4:	2207      	movs	r2, #7
 800c0f6:	701a      	strb	r2, [r3, #0]

					searchF3();
 800c0f8:	f003 f994 	bl	800f424 <searchF3>
					HAL_Delay(2000);
 800c0fc:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800c100:	f7f4 ff8c 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800c104:	4b7a      	ldr	r3, [pc, #488]	; (800c2f0 <perfect_pass+0x6dc>)
 800c106:	2200      	movs	r2, #0
 800c108:	701a      	strb	r2, [r3, #0]
 800c10a:	4b79      	ldr	r3, [pc, #484]	; (800c2f0 <perfect_pass+0x6dc>)
 800c10c:	781a      	ldrb	r2, [r3, #0]
 800c10e:	4b77      	ldr	r3, [pc, #476]	; (800c2ec <perfect_pass+0x6d8>)
 800c110:	701a      	strb	r2, [r3, #0]
					searchF3();
 800c112:	f003 f987 	bl	800f424 <searchF3>

					driveC2(SETPOS_BACK);         //a尻を当てる程度に後退。回転後に停止する
 800c116:	2064      	movs	r0, #100	; 0x64
 800c118:	f7f9 f972 	bl	8005400 <driveC2>
					degree_z = target_degree_z;
 800c11c:	4b75      	ldr	r3, [pc, #468]	; (800c2f4 <perfect_pass+0x6e0>)
 800c11e:	681b      	ldr	r3, [r3, #0]
 800c120:	4a75      	ldr	r2, [pc, #468]	; (800c2f8 <perfect_pass+0x6e4>)
 800c122:	6013      	str	r3, [r2, #0]
					start_mode = 0;
 800c124:	4b6d      	ldr	r3, [pc, #436]	; (800c2dc <perfect_pass+0x6c8>)
 800c126:	2200      	movs	r2, #0
 800c128:	701a      	strb	r2, [r3, #0]

					HAL_Delay(2000);
 800c12a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800c12e:	f7f4 ff75 	bl	800101c <HAL_Delay>


					//----a直線と大回り圧縮と斜め----
					printf("pass press 3.\n");
 800c132:	4872      	ldr	r0, [pc, #456]	; (800c2fc <perfect_pass+0x6e8>)
 800c134:	f006 fb6c 	bl	8012810 <puts>
					MF.FLAG.SCND = 1;
 800c138:	4a66      	ldr	r2, [pc, #408]	; (800c2d4 <perfect_pass+0x6c0>)
 800c13a:	8813      	ldrh	r3, [r2, #0]
 800c13c:	f043 0320 	orr.w	r3, r3, #32
 800c140:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800c142:	4a64      	ldr	r2, [pc, #400]	; (800c2d4 <perfect_pass+0x6c0>)
 800c144:	8813      	ldrh	r3, [r2, #0]
 800c146:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800c14a:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800c14c:	4a61      	ldr	r2, [pc, #388]	; (800c2d4 <perfect_pass+0x6c0>)
 800c14e:	8813      	ldrh	r3, [r2, #0]
 800c150:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800c154:	8013      	strh	r3, [r2, #0]
					run_mode = MIDDLE;
 800c156:	4b60      	ldr	r3, [pc, #384]	; (800c2d8 <perfect_pass+0x6c4>)
 800c158:	2202      	movs	r2, #2
 800c15a:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800c15c:	4b5f      	ldr	r3, [pc, #380]	; (800c2dc <perfect_pass+0x6c8>)
 800c15e:	2200      	movs	r2, #0
 800c160:	701a      	strb	r2, [r3, #0]
					goal_mode = 2;
 800c162:	4b5f      	ldr	r3, [pc, #380]	; (800c2e0 <perfect_pass+0x6cc>)
 800c164:	2202      	movs	r2, #2
 800c166:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 800c168:	4b5e      	ldr	r3, [pc, #376]	; (800c2e4 <perfect_pass+0x6d0>)
 800c16a:	f241 3288 	movw	r2, #5000	; 0x1388
 800c16e:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1200;
 800c170:	4b5d      	ldr	r3, [pc, #372]	; (800c2e8 <perfect_pass+0x6d4>)
 800c172:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 800c176:	801a      	strh	r2, [r3, #0]

					pass_mode = 4;						//a半区画ベースでroute配列生成
 800c178:	4b61      	ldr	r3, [pc, #388]	; (800c300 <perfect_pass+0x6ec>)
 800c17a:	2204      	movs	r2, #4
 800c17c:	701a      	strb	r2, [r3, #0]

					goal_x = GOAL_X;
 800c17e:	4b5b      	ldr	r3, [pc, #364]	; (800c2ec <perfect_pass+0x6d8>)
 800c180:	2207      	movs	r2, #7
 800c182:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800c184:	4b5a      	ldr	r3, [pc, #360]	; (800c2f0 <perfect_pass+0x6dc>)
 800c186:	2207      	movs	r2, #7
 800c188:	701a      	strb	r2, [r3, #0]

					searchF4();
 800c18a:	f003 fa27 	bl	800f5dc <searchF4>
					HAL_Delay(2000);
 800c18e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800c192:	f7f4 ff43 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800c196:	4b56      	ldr	r3, [pc, #344]	; (800c2f0 <perfect_pass+0x6dc>)
 800c198:	2200      	movs	r2, #0
 800c19a:	701a      	strb	r2, [r3, #0]
 800c19c:	4b54      	ldr	r3, [pc, #336]	; (800c2f0 <perfect_pass+0x6dc>)
 800c19e:	781a      	ldrb	r2, [r3, #0]
 800c1a0:	4b52      	ldr	r3, [pc, #328]	; (800c2ec <perfect_pass+0x6d8>)
 800c1a2:	701a      	strb	r2, [r3, #0]
					searchF4();
 800c1a4:	f003 fa1a 	bl	800f5dc <searchF4>

					driveC2(SETPOS_BACK);         //a尻を当てる程度に後退。回転後に停止する
 800c1a8:	2064      	movs	r0, #100	; 0x64
 800c1aa:	f7f9 f929 	bl	8005400 <driveC2>
					degree_z = target_degree_z;
 800c1ae:	4b51      	ldr	r3, [pc, #324]	; (800c2f4 <perfect_pass+0x6e0>)
 800c1b0:	681b      	ldr	r3, [r3, #0]
 800c1b2:	4a51      	ldr	r2, [pc, #324]	; (800c2f8 <perfect_pass+0x6e4>)
 800c1b4:	6013      	str	r3, [r2, #0]
					start_mode = 0;
 800c1b6:	4b49      	ldr	r3, [pc, #292]	; (800c2dc <perfect_pass+0x6c8>)
 800c1b8:	2200      	movs	r2, #0
 800c1ba:	701a      	strb	r2, [r3, #0]

					HAL_Delay(2000);
 800c1bc:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800c1c0:	f7f4 ff2c 	bl	800101c <HAL_Delay>
					goal_x = goal_y = 0;
					searchD();
*/

					//----a直線と大回り圧縮 High Speed----
					printf("pass press 3.\n");
 800c1c4:	484d      	ldr	r0, [pc, #308]	; (800c2fc <perfect_pass+0x6e8>)
 800c1c6:	f006 fb23 	bl	8012810 <puts>
					MF.FLAG.SCND = 1;
 800c1ca:	4a42      	ldr	r2, [pc, #264]	; (800c2d4 <perfect_pass+0x6c0>)
 800c1cc:	8813      	ldrh	r3, [r2, #0]
 800c1ce:	f043 0320 	orr.w	r3, r3, #32
 800c1d2:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800c1d4:	4a3f      	ldr	r2, [pc, #252]	; (800c2d4 <perfect_pass+0x6c0>)
 800c1d6:	8813      	ldrh	r3, [r2, #0]
 800c1d8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800c1dc:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800c1de:	4a3d      	ldr	r2, [pc, #244]	; (800c2d4 <perfect_pass+0x6c0>)
 800c1e0:	8813      	ldrh	r3, [r2, #0]
 800c1e2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800c1e6:	8013      	strh	r3, [r2, #0]
					run_mode = HIGH;
 800c1e8:	4b3b      	ldr	r3, [pc, #236]	; (800c2d8 <perfect_pass+0x6c4>)
 800c1ea:	2203      	movs	r2, #3
 800c1ec:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800c1ee:	4b3b      	ldr	r3, [pc, #236]	; (800c2dc <perfect_pass+0x6c8>)
 800c1f0:	2200      	movs	r2, #0
 800c1f2:	701a      	strb	r2, [r3, #0]
					goal_mode = 2;
 800c1f4:	4b3a      	ldr	r3, [pc, #232]	; (800c2e0 <perfect_pass+0x6cc>)
 800c1f6:	2202      	movs	r2, #2
 800c1f8:	701a      	strb	r2, [r3, #0]
					accel_hs = 6000;
 800c1fa:	4b3a      	ldr	r3, [pc, #232]	; (800c2e4 <perfect_pass+0x6d0>)
 800c1fc:	f241 7270 	movw	r2, #6000	; 0x1770
 800c200:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1600;
 800c202:	4b39      	ldr	r3, [pc, #228]	; (800c2e8 <perfect_pass+0x6d4>)
 800c204:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800c208:	801a      	strh	r2, [r3, #0]

					pass_mode = 3;						//a半区画ベースでroute配列生成
 800c20a:	4b3d      	ldr	r3, [pc, #244]	; (800c300 <perfect_pass+0x6ec>)
 800c20c:	2203      	movs	r2, #3
 800c20e:	701a      	strb	r2, [r3, #0]

					goal_x = GOAL_X;
 800c210:	4b36      	ldr	r3, [pc, #216]	; (800c2ec <perfect_pass+0x6d8>)
 800c212:	2207      	movs	r2, #7
 800c214:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800c216:	4b36      	ldr	r3, [pc, #216]	; (800c2f0 <perfect_pass+0x6dc>)
 800c218:	2207      	movs	r2, #7
 800c21a:	701a      	strb	r2, [r3, #0]

					searchF3();
 800c21c:	f003 f902 	bl	800f424 <searchF3>
					HAL_Delay(2000);
 800c220:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800c224:	f7f4 fefa 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800c228:	4b31      	ldr	r3, [pc, #196]	; (800c2f0 <perfect_pass+0x6dc>)
 800c22a:	2200      	movs	r2, #0
 800c22c:	701a      	strb	r2, [r3, #0]
 800c22e:	4b30      	ldr	r3, [pc, #192]	; (800c2f0 <perfect_pass+0x6dc>)
 800c230:	781a      	ldrb	r2, [r3, #0]
 800c232:	4b2e      	ldr	r3, [pc, #184]	; (800c2ec <perfect_pass+0x6d8>)
 800c234:	701a      	strb	r2, [r3, #0]
					searchF3();
 800c236:	f003 f8f5 	bl	800f424 <searchF3>

					driveC2(SETPOS_BACK);         //a尻を当てる程度に後退。回転後に停止する
 800c23a:	2064      	movs	r0, #100	; 0x64
 800c23c:	f7f9 f8e0 	bl	8005400 <driveC2>
					degree_z = target_degree_z;
 800c240:	4b2c      	ldr	r3, [pc, #176]	; (800c2f4 <perfect_pass+0x6e0>)
 800c242:	681b      	ldr	r3, [r3, #0]
 800c244:	4a2c      	ldr	r2, [pc, #176]	; (800c2f8 <perfect_pass+0x6e4>)
 800c246:	6013      	str	r3, [r2, #0]
					start_mode = 0;
 800c248:	4b24      	ldr	r3, [pc, #144]	; (800c2dc <perfect_pass+0x6c8>)
 800c24a:	2200      	movs	r2, #0
 800c24c:	701a      	strb	r2, [r3, #0]

					HAL_Delay(2000);
 800c24e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800c252:	f7f4 fee3 	bl	800101c <HAL_Delay>


					//----a直線と大回り圧縮と斜めｰｰｰｰ
					printf("pass press 4.\n");
 800c256:	482b      	ldr	r0, [pc, #172]	; (800c304 <perfect_pass+0x6f0>)
 800c258:	f006 fada 	bl	8012810 <puts>
					MF.FLAG.SCND = 1;
 800c25c:	4a1d      	ldr	r2, [pc, #116]	; (800c2d4 <perfect_pass+0x6c0>)
 800c25e:	8813      	ldrh	r3, [r2, #0]
 800c260:	f043 0320 	orr.w	r3, r3, #32
 800c264:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800c266:	4a1b      	ldr	r2, [pc, #108]	; (800c2d4 <perfect_pass+0x6c0>)
 800c268:	8813      	ldrh	r3, [r2, #0]
 800c26a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800c26e:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800c270:	4a18      	ldr	r2, [pc, #96]	; (800c2d4 <perfect_pass+0x6c0>)
 800c272:	8813      	ldrh	r3, [r2, #0]
 800c274:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800c278:	8013      	strh	r3, [r2, #0]
					run_mode = HIGH;
 800c27a:	4b17      	ldr	r3, [pc, #92]	; (800c2d8 <perfect_pass+0x6c4>)
 800c27c:	2203      	movs	r2, #3
 800c27e:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800c280:	4b16      	ldr	r3, [pc, #88]	; (800c2dc <perfect_pass+0x6c8>)
 800c282:	2200      	movs	r2, #0
 800c284:	701a      	strb	r2, [r3, #0]
					goal_mode = 2;
 800c286:	4b16      	ldr	r3, [pc, #88]	; (800c2e0 <perfect_pass+0x6cc>)
 800c288:	2202      	movs	r2, #2
 800c28a:	701a      	strb	r2, [r3, #0]
					accel_hs = 6000;
 800c28c:	4b15      	ldr	r3, [pc, #84]	; (800c2e4 <perfect_pass+0x6d0>)
 800c28e:	f241 7270 	movw	r2, #6000	; 0x1770
 800c292:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1600;
 800c294:	4b14      	ldr	r3, [pc, #80]	; (800c2e8 <perfect_pass+0x6d4>)
 800c296:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800c29a:	801a      	strh	r2, [r3, #0]

					pass_mode = 4;
 800c29c:	4b18      	ldr	r3, [pc, #96]	; (800c300 <perfect_pass+0x6ec>)
 800c29e:	2204      	movs	r2, #4
 800c2a0:	701a      	strb	r2, [r3, #0]

					goal_x = GOAL_X;
 800c2a2:	4b12      	ldr	r3, [pc, #72]	; (800c2ec <perfect_pass+0x6d8>)
 800c2a4:	2207      	movs	r2, #7
 800c2a6:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800c2a8:	4b11      	ldr	r3, [pc, #68]	; (800c2f0 <perfect_pass+0x6dc>)
 800c2aa:	2207      	movs	r2, #7
 800c2ac:	701a      	strb	r2, [r3, #0]

					searchF4();
 800c2ae:	f003 f995 	bl	800f5dc <searchF4>
					HAL_Delay(2000);
 800c2b2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800c2b6:	f7f4 feb1 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800c2ba:	4b0d      	ldr	r3, [pc, #52]	; (800c2f0 <perfect_pass+0x6dc>)
 800c2bc:	2200      	movs	r2, #0
 800c2be:	701a      	strb	r2, [r3, #0]
 800c2c0:	4b0b      	ldr	r3, [pc, #44]	; (800c2f0 <perfect_pass+0x6dc>)
 800c2c2:	781a      	ldrb	r2, [r3, #0]
 800c2c4:	4b09      	ldr	r3, [pc, #36]	; (800c2ec <perfect_pass+0x6d8>)
 800c2c6:	701a      	strb	r2, [r3, #0]
					searchF4();
 800c2c8:	f003 f988 	bl	800f5dc <searchF4>

					break;
 800c2cc:	e175      	b.n	800c5ba <perfect_pass+0x9a6>
 800c2ce:	bf00      	nop
 800c2d0:	08013c24 	.word	0x08013c24
 800c2d4:	20000f68 	.word	0x20000f68
 800c2d8:	20000456 	.word	0x20000456
 800c2dc:	200015c8 	.word	0x200015c8
 800c2e0:	20000bb1 	.word	0x20000bb1
 800c2e4:	20000454 	.word	0x20000454
 800c2e8:	20000f7c 	.word	0x20000f7c
 800c2ec:	20000bb0 	.word	0x20000bb0
 800c2f0:	20000b4c 	.word	0x20000b4c
 800c2f4:	20000bf8 	.word	0x20000bf8
 800c2f8:	20000b5c 	.word	0x20000b5c
 800c2fc:	08013d20 	.word	0x08013d20
 800c300:	20000457 	.word	0x20000457
 800c304:	08013b68 	.word	0x08013b68

				case 7:
					//----a一次探索スラローム走行----
					printf("First Run.\n");
 800c308:	48ad      	ldr	r0, [pc, #692]	; (800c5c0 <perfect_pass+0x9ac>)
 800c30a:	f006 fa81 	bl	8012810 <puts>
					MF.FLAG.SCND = 0;
 800c30e:	4aad      	ldr	r2, [pc, #692]	; (800c5c4 <perfect_pass+0x9b0>)
 800c310:	8813      	ldrh	r3, [r2, #0]
 800c312:	f36f 1345 	bfc	r3, #5, #1
 800c316:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800c318:	4aaa      	ldr	r2, [pc, #680]	; (800c5c4 <perfect_pass+0x9b0>)
 800c31a:	8813      	ldrh	r3, [r2, #0]
 800c31c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800c320:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 0;
 800c322:	4aa8      	ldr	r2, [pc, #672]	; (800c5c4 <perfect_pass+0x9b0>)
 800c324:	8813      	ldrh	r3, [r2, #0]
 800c326:	f36f 238a 	bfc	r3, #10, #1
 800c32a:	8013      	strh	r3, [r2, #0]
					run_mode = MIDDLE;
 800c32c:	4ba6      	ldr	r3, [pc, #664]	; (800c5c8 <perfect_pass+0x9b4>)
 800c32e:	2202      	movs	r2, #2
 800c330:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800c332:	4ba6      	ldr	r3, [pc, #664]	; (800c5cc <perfect_pass+0x9b8>)
 800c334:	2200      	movs	r2, #0
 800c336:	701a      	strb	r2, [r3, #0]
					goal_mode = 2;
 800c338:	4ba5      	ldr	r3, [pc, #660]	; (800c5d0 <perfect_pass+0x9bc>)
 800c33a:	2202      	movs	r2, #2
 800c33c:	701a      	strb	r2, [r3, #0]
					accel_hs = 4000;
 800c33e:	4ba5      	ldr	r3, [pc, #660]	; (800c5d4 <perfect_pass+0x9c0>)
 800c340:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 800c344:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1000;
 800c346:	4ba4      	ldr	r3, [pc, #656]	; (800c5d8 <perfect_pass+0x9c4>)
 800c348:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800c34c:	801a      	strh	r2, [r3, #0]

					goal_x = 7;
 800c34e:	4ba3      	ldr	r3, [pc, #652]	; (800c5dc <perfect_pass+0x9c8>)
 800c350:	2207      	movs	r2, #7
 800c352:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800c354:	4ba2      	ldr	r3, [pc, #648]	; (800c5e0 <perfect_pass+0x9cc>)
 800c356:	2207      	movs	r2, #7
 800c358:	701a      	strb	r2, [r3, #0]

					get_base();
 800c35a:	f005 fbbf 	bl	8011adc <get_base>

					searchC();
 800c35e:	f002 fbe7 	bl	800eb30 <searchC>
					HAL_Delay(2000);
 800c362:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800c366:	f7f4 fe59 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800c36a:	4b9d      	ldr	r3, [pc, #628]	; (800c5e0 <perfect_pass+0x9cc>)
 800c36c:	2200      	movs	r2, #0
 800c36e:	701a      	strb	r2, [r3, #0]
 800c370:	4b9b      	ldr	r3, [pc, #620]	; (800c5e0 <perfect_pass+0x9cc>)
 800c372:	781a      	ldrb	r2, [r3, #0]
 800c374:	4b99      	ldr	r3, [pc, #612]	; (800c5dc <perfect_pass+0x9c8>)
 800c376:	701a      	strb	r2, [r3, #0]
					searchC();
 800c378:	f002 fbda 	bl	800eb30 <searchC>

					degree_z = target_degree_z;
 800c37c:	4b99      	ldr	r3, [pc, #612]	; (800c5e4 <perfect_pass+0x9d0>)
 800c37e:	681b      	ldr	r3, [r3, #0]
 800c380:	4a99      	ldr	r2, [pc, #612]	; (800c5e8 <perfect_pass+0x9d4>)
 800c382:	6013      	str	r3, [r2, #0]
					HAL_Delay(2000);
 800c384:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800c388:	f7f4 fe48 	bl	800101c <HAL_Delay>
					degree_z = target_degree_z;
					HAL_Delay(2000);
*/

					//----a直線と大回り圧縮(adv_posを停止)+半区画ベース----
					printf("pass press 3.\n");
 800c38c:	4897      	ldr	r0, [pc, #604]	; (800c5ec <perfect_pass+0x9d8>)
 800c38e:	f006 fa3f 	bl	8012810 <puts>
					MF.FLAG.SCND = 1;
 800c392:	4a8c      	ldr	r2, [pc, #560]	; (800c5c4 <perfect_pass+0x9b0>)
 800c394:	8813      	ldrh	r3, [r2, #0]
 800c396:	f043 0320 	orr.w	r3, r3, #32
 800c39a:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800c39c:	4a89      	ldr	r2, [pc, #548]	; (800c5c4 <perfect_pass+0x9b0>)
 800c39e:	8813      	ldrh	r3, [r2, #0]
 800c3a0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800c3a4:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800c3a6:	4a87      	ldr	r2, [pc, #540]	; (800c5c4 <perfect_pass+0x9b0>)
 800c3a8:	8813      	ldrh	r3, [r2, #0]
 800c3aa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800c3ae:	8013      	strh	r3, [r2, #0]
					run_mode = MIDDLE;
 800c3b0:	4b85      	ldr	r3, [pc, #532]	; (800c5c8 <perfect_pass+0x9b4>)
 800c3b2:	2202      	movs	r2, #2
 800c3b4:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800c3b6:	4b85      	ldr	r3, [pc, #532]	; (800c5cc <perfect_pass+0x9b8>)
 800c3b8:	2200      	movs	r2, #0
 800c3ba:	701a      	strb	r2, [r3, #0]
					goal_mode = 2;
 800c3bc:	4b84      	ldr	r3, [pc, #528]	; (800c5d0 <perfect_pass+0x9bc>)
 800c3be:	2202      	movs	r2, #2
 800c3c0:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 800c3c2:	4b84      	ldr	r3, [pc, #528]	; (800c5d4 <perfect_pass+0x9c0>)
 800c3c4:	f241 3288 	movw	r2, #5000	; 0x1388
 800c3c8:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1200;
 800c3ca:	4b83      	ldr	r3, [pc, #524]	; (800c5d8 <perfect_pass+0x9c4>)
 800c3cc:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 800c3d0:	801a      	strh	r2, [r3, #0]

					pass_mode = 3;						//a半区画ベースでroute配列生成
 800c3d2:	4b87      	ldr	r3, [pc, #540]	; (800c5f0 <perfect_pass+0x9dc>)
 800c3d4:	2203      	movs	r2, #3
 800c3d6:	701a      	strb	r2, [r3, #0]

					goal_x = 7;
 800c3d8:	4b80      	ldr	r3, [pc, #512]	; (800c5dc <perfect_pass+0x9c8>)
 800c3da:	2207      	movs	r2, #7
 800c3dc:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800c3de:	4b80      	ldr	r3, [pc, #512]	; (800c5e0 <perfect_pass+0x9cc>)
 800c3e0:	2207      	movs	r2, #7
 800c3e2:	701a      	strb	r2, [r3, #0]

					searchF3();
 800c3e4:	f003 f81e 	bl	800f424 <searchF3>
					HAL_Delay(2000);
 800c3e8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800c3ec:	f7f4 fe16 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800c3f0:	4b7b      	ldr	r3, [pc, #492]	; (800c5e0 <perfect_pass+0x9cc>)
 800c3f2:	2200      	movs	r2, #0
 800c3f4:	701a      	strb	r2, [r3, #0]
 800c3f6:	4b7a      	ldr	r3, [pc, #488]	; (800c5e0 <perfect_pass+0x9cc>)
 800c3f8:	781a      	ldrb	r2, [r3, #0]
 800c3fa:	4b78      	ldr	r3, [pc, #480]	; (800c5dc <perfect_pass+0x9c8>)
 800c3fc:	701a      	strb	r2, [r3, #0]
					searchF3();
 800c3fe:	f003 f811 	bl	800f424 <searchF3>

					driveC2(SETPOS_BACK);         //a尻を当てる程度に後退。回転後に停止する
 800c402:	2064      	movs	r0, #100	; 0x64
 800c404:	f7f8 fffc 	bl	8005400 <driveC2>
					degree_z = target_degree_z;
 800c408:	4b76      	ldr	r3, [pc, #472]	; (800c5e4 <perfect_pass+0x9d0>)
 800c40a:	681b      	ldr	r3, [r3, #0]
 800c40c:	4a76      	ldr	r2, [pc, #472]	; (800c5e8 <perfect_pass+0x9d4>)
 800c40e:	6013      	str	r3, [r2, #0]
					start_mode = 0;
 800c410:	4b6e      	ldr	r3, [pc, #440]	; (800c5cc <perfect_pass+0x9b8>)
 800c412:	2200      	movs	r2, #0
 800c414:	701a      	strb	r2, [r3, #0]
					HAL_Delay(2000);
 800c416:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800c41a:	f7f4 fdff 	bl	800101c <HAL_Delay>


					//----a直線と大回り圧縮と斜めｰｰｰｰ
					printf("pass press 4.\n");
 800c41e:	4875      	ldr	r0, [pc, #468]	; (800c5f4 <perfect_pass+0x9e0>)
 800c420:	f006 f9f6 	bl	8012810 <puts>
					MF.FLAG.SCND = 1;
 800c424:	4a67      	ldr	r2, [pc, #412]	; (800c5c4 <perfect_pass+0x9b0>)
 800c426:	8813      	ldrh	r3, [r2, #0]
 800c428:	f043 0320 	orr.w	r3, r3, #32
 800c42c:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800c42e:	4a65      	ldr	r2, [pc, #404]	; (800c5c4 <perfect_pass+0x9b0>)
 800c430:	8813      	ldrh	r3, [r2, #0]
 800c432:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800c436:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800c438:	4a62      	ldr	r2, [pc, #392]	; (800c5c4 <perfect_pass+0x9b0>)
 800c43a:	8813      	ldrh	r3, [r2, #0]
 800c43c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800c440:	8013      	strh	r3, [r2, #0]
					run_mode = MIDDLE;
 800c442:	4b61      	ldr	r3, [pc, #388]	; (800c5c8 <perfect_pass+0x9b4>)
 800c444:	2202      	movs	r2, #2
 800c446:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800c448:	4b60      	ldr	r3, [pc, #384]	; (800c5cc <perfect_pass+0x9b8>)
 800c44a:	2200      	movs	r2, #0
 800c44c:	701a      	strb	r2, [r3, #0]
					goal_mode = 2;
 800c44e:	4b60      	ldr	r3, [pc, #384]	; (800c5d0 <perfect_pass+0x9bc>)
 800c450:	2202      	movs	r2, #2
 800c452:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 800c454:	4b5f      	ldr	r3, [pc, #380]	; (800c5d4 <perfect_pass+0x9c0>)
 800c456:	f241 3288 	movw	r2, #5000	; 0x1388
 800c45a:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1200;
 800c45c:	4b5e      	ldr	r3, [pc, #376]	; (800c5d8 <perfect_pass+0x9c4>)
 800c45e:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 800c462:	801a      	strh	r2, [r3, #0]

					pass_mode = 4;
 800c464:	4b62      	ldr	r3, [pc, #392]	; (800c5f0 <perfect_pass+0x9dc>)
 800c466:	2204      	movs	r2, #4
 800c468:	701a      	strb	r2, [r3, #0]

					goal_x = 7;
 800c46a:	4b5c      	ldr	r3, [pc, #368]	; (800c5dc <perfect_pass+0x9c8>)
 800c46c:	2207      	movs	r2, #7
 800c46e:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800c470:	4b5b      	ldr	r3, [pc, #364]	; (800c5e0 <perfect_pass+0x9cc>)
 800c472:	2207      	movs	r2, #7
 800c474:	701a      	strb	r2, [r3, #0]

					searchF4();
 800c476:	f003 f8b1 	bl	800f5dc <searchF4>
					HAL_Delay(2000);
 800c47a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800c47e:	f7f4 fdcd 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800c482:	4b57      	ldr	r3, [pc, #348]	; (800c5e0 <perfect_pass+0x9cc>)
 800c484:	2200      	movs	r2, #0
 800c486:	701a      	strb	r2, [r3, #0]
 800c488:	4b55      	ldr	r3, [pc, #340]	; (800c5e0 <perfect_pass+0x9cc>)
 800c48a:	781a      	ldrb	r2, [r3, #0]
 800c48c:	4b53      	ldr	r3, [pc, #332]	; (800c5dc <perfect_pass+0x9c8>)
 800c48e:	701a      	strb	r2, [r3, #0]
					searchF4();
 800c490:	f003 f8a4 	bl	800f5dc <searchF4>

					driveC2(SETPOS_BACK);         //a尻を当てる程度に後退。回転後に停止する
 800c494:	2064      	movs	r0, #100	; 0x64
 800c496:	f7f8 ffb3 	bl	8005400 <driveC2>
					degree_z = target_degree_z;
 800c49a:	4b52      	ldr	r3, [pc, #328]	; (800c5e4 <perfect_pass+0x9d0>)
 800c49c:	681b      	ldr	r3, [r3, #0]
 800c49e:	4a52      	ldr	r2, [pc, #328]	; (800c5e8 <perfect_pass+0x9d4>)
 800c4a0:	6013      	str	r3, [r2, #0]
					start_mode = 0;
 800c4a2:	4b4a      	ldr	r3, [pc, #296]	; (800c5cc <perfect_pass+0x9b8>)
 800c4a4:	2200      	movs	r2, #0
 800c4a6:	701a      	strb	r2, [r3, #0]

					HAL_Delay(2000);
 800c4a8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800c4ac:	f7f4 fdb6 	bl	800101c <HAL_Delay>
					goal_x = goal_y = 0;
					searchD();
*/

					//----a直線と大回り圧縮 High Speed----
					printf("pass press 3.\n");
 800c4b0:	484e      	ldr	r0, [pc, #312]	; (800c5ec <perfect_pass+0x9d8>)
 800c4b2:	f006 f9ad 	bl	8012810 <puts>
					MF.FLAG.SCND = 1;
 800c4b6:	4a43      	ldr	r2, [pc, #268]	; (800c5c4 <perfect_pass+0x9b0>)
 800c4b8:	8813      	ldrh	r3, [r2, #0]
 800c4ba:	f043 0320 	orr.w	r3, r3, #32
 800c4be:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800c4c0:	4a40      	ldr	r2, [pc, #256]	; (800c5c4 <perfect_pass+0x9b0>)
 800c4c2:	8813      	ldrh	r3, [r2, #0]
 800c4c4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800c4c8:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800c4ca:	4a3e      	ldr	r2, [pc, #248]	; (800c5c4 <perfect_pass+0x9b0>)
 800c4cc:	8813      	ldrh	r3, [r2, #0]
 800c4ce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800c4d2:	8013      	strh	r3, [r2, #0]
					run_mode = HIGH;
 800c4d4:	4b3c      	ldr	r3, [pc, #240]	; (800c5c8 <perfect_pass+0x9b4>)
 800c4d6:	2203      	movs	r2, #3
 800c4d8:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800c4da:	4b3c      	ldr	r3, [pc, #240]	; (800c5cc <perfect_pass+0x9b8>)
 800c4dc:	2200      	movs	r2, #0
 800c4de:	701a      	strb	r2, [r3, #0]
					goal_mode = 2;
 800c4e0:	4b3b      	ldr	r3, [pc, #236]	; (800c5d0 <perfect_pass+0x9bc>)
 800c4e2:	2202      	movs	r2, #2
 800c4e4:	701a      	strb	r2, [r3, #0]
					accel_hs = 6000;
 800c4e6:	4b3b      	ldr	r3, [pc, #236]	; (800c5d4 <perfect_pass+0x9c0>)
 800c4e8:	f241 7270 	movw	r2, #6000	; 0x1770
 800c4ec:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1600;
 800c4ee:	4b3a      	ldr	r3, [pc, #232]	; (800c5d8 <perfect_pass+0x9c4>)
 800c4f0:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800c4f4:	801a      	strh	r2, [r3, #0]

					pass_mode = 3;						//a半区画ベースでroute配列生成
 800c4f6:	4b3e      	ldr	r3, [pc, #248]	; (800c5f0 <perfect_pass+0x9dc>)
 800c4f8:	2203      	movs	r2, #3
 800c4fa:	701a      	strb	r2, [r3, #0]

					goal_x = 7;
 800c4fc:	4b37      	ldr	r3, [pc, #220]	; (800c5dc <perfect_pass+0x9c8>)
 800c4fe:	2207      	movs	r2, #7
 800c500:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800c502:	4b37      	ldr	r3, [pc, #220]	; (800c5e0 <perfect_pass+0x9cc>)
 800c504:	2207      	movs	r2, #7
 800c506:	701a      	strb	r2, [r3, #0]

					searchF3();
 800c508:	f002 ff8c 	bl	800f424 <searchF3>
					HAL_Delay(2000);
 800c50c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800c510:	f7f4 fd84 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800c514:	4b32      	ldr	r3, [pc, #200]	; (800c5e0 <perfect_pass+0x9cc>)
 800c516:	2200      	movs	r2, #0
 800c518:	701a      	strb	r2, [r3, #0]
 800c51a:	4b31      	ldr	r3, [pc, #196]	; (800c5e0 <perfect_pass+0x9cc>)
 800c51c:	781a      	ldrb	r2, [r3, #0]
 800c51e:	4b2f      	ldr	r3, [pc, #188]	; (800c5dc <perfect_pass+0x9c8>)
 800c520:	701a      	strb	r2, [r3, #0]
					searchF3();
 800c522:	f002 ff7f 	bl	800f424 <searchF3>

					driveC2(SETPOS_BACK);         //a尻を当てる程度に後退。回転後に停止する
 800c526:	2064      	movs	r0, #100	; 0x64
 800c528:	f7f8 ff6a 	bl	8005400 <driveC2>
					degree_z = target_degree_z;
 800c52c:	4b2d      	ldr	r3, [pc, #180]	; (800c5e4 <perfect_pass+0x9d0>)
 800c52e:	681b      	ldr	r3, [r3, #0]
 800c530:	4a2d      	ldr	r2, [pc, #180]	; (800c5e8 <perfect_pass+0x9d4>)
 800c532:	6013      	str	r3, [r2, #0]
					start_mode = 0;
 800c534:	4b25      	ldr	r3, [pc, #148]	; (800c5cc <perfect_pass+0x9b8>)
 800c536:	2200      	movs	r2, #0
 800c538:	701a      	strb	r2, [r3, #0]

					HAL_Delay(2000);
 800c53a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800c53e:	f7f4 fd6d 	bl	800101c <HAL_Delay>


					//----a直線と大回り圧縮と斜め High Speedｰｰｰｰ
					printf("pass press 4.\n");
 800c542:	482c      	ldr	r0, [pc, #176]	; (800c5f4 <perfect_pass+0x9e0>)
 800c544:	f006 f964 	bl	8012810 <puts>
					MF.FLAG.SCND = 1;
 800c548:	4a1e      	ldr	r2, [pc, #120]	; (800c5c4 <perfect_pass+0x9b0>)
 800c54a:	8813      	ldrh	r3, [r2, #0]
 800c54c:	f043 0320 	orr.w	r3, r3, #32
 800c550:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800c552:	4a1c      	ldr	r2, [pc, #112]	; (800c5c4 <perfect_pass+0x9b0>)
 800c554:	8813      	ldrh	r3, [r2, #0]
 800c556:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800c55a:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800c55c:	4a19      	ldr	r2, [pc, #100]	; (800c5c4 <perfect_pass+0x9b0>)
 800c55e:	8813      	ldrh	r3, [r2, #0]
 800c560:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800c564:	8013      	strh	r3, [r2, #0]
					run_mode = HIGH;
 800c566:	4b18      	ldr	r3, [pc, #96]	; (800c5c8 <perfect_pass+0x9b4>)
 800c568:	2203      	movs	r2, #3
 800c56a:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800c56c:	4b17      	ldr	r3, [pc, #92]	; (800c5cc <perfect_pass+0x9b8>)
 800c56e:	2200      	movs	r2, #0
 800c570:	701a      	strb	r2, [r3, #0]
					goal_mode = 2;
 800c572:	4b17      	ldr	r3, [pc, #92]	; (800c5d0 <perfect_pass+0x9bc>)
 800c574:	2202      	movs	r2, #2
 800c576:	701a      	strb	r2, [r3, #0]
					accel_hs = 6000;
 800c578:	4b16      	ldr	r3, [pc, #88]	; (800c5d4 <perfect_pass+0x9c0>)
 800c57a:	f241 7270 	movw	r2, #6000	; 0x1770
 800c57e:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1600;
 800c580:	4b15      	ldr	r3, [pc, #84]	; (800c5d8 <perfect_pass+0x9c4>)
 800c582:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800c586:	801a      	strh	r2, [r3, #0]

					pass_mode = 4;
 800c588:	4b19      	ldr	r3, [pc, #100]	; (800c5f0 <perfect_pass+0x9dc>)
 800c58a:	2204      	movs	r2, #4
 800c58c:	701a      	strb	r2, [r3, #0]

					goal_x = 7;
 800c58e:	4b13      	ldr	r3, [pc, #76]	; (800c5dc <perfect_pass+0x9c8>)
 800c590:	2207      	movs	r2, #7
 800c592:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800c594:	4b12      	ldr	r3, [pc, #72]	; (800c5e0 <perfect_pass+0x9cc>)
 800c596:	2207      	movs	r2, #7
 800c598:	701a      	strb	r2, [r3, #0]

					searchF4();
 800c59a:	f003 f81f 	bl	800f5dc <searchF4>
					HAL_Delay(2000);
 800c59e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800c5a2:	f7f4 fd3b 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800c5a6:	4b0e      	ldr	r3, [pc, #56]	; (800c5e0 <perfect_pass+0x9cc>)
 800c5a8:	2200      	movs	r2, #0
 800c5aa:	701a      	strb	r2, [r3, #0]
 800c5ac:	4b0c      	ldr	r3, [pc, #48]	; (800c5e0 <perfect_pass+0x9cc>)
 800c5ae:	781a      	ldrb	r2, [r3, #0]
 800c5b0:	4b0a      	ldr	r3, [pc, #40]	; (800c5dc <perfect_pass+0x9c8>)
 800c5b2:	701a      	strb	r2, [r3, #0]
					searchF4();
 800c5b4:	f003 f812 	bl	800f5dc <searchF4>

					break;
 800c5b8:	bf00      	nop
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 800c5ba:	f7ff bb34 	b.w	800bc26 <perfect_pass+0x12>
 800c5be:	bf00      	nop
 800c5c0:	08013c24 	.word	0x08013c24
 800c5c4:	20000f68 	.word	0x20000f68
 800c5c8:	20000456 	.word	0x20000456
 800c5cc:	200015c8 	.word	0x200015c8
 800c5d0:	20000bb1 	.word	0x20000bb1
 800c5d4:	20000454 	.word	0x20000454
 800c5d8:	20000f7c 	.word	0x20000f7c
 800c5dc:	20000bb0 	.word	0x20000bb0
 800c5e0:	20000b4c 	.word	0x20000b4c
 800c5e4:	20000bf8 	.word	0x20000bf8
 800c5e8:	20000b5c 	.word	0x20000b5c
 800c5ec:	08013d20 	.word	0x08013d20
 800c5f0:	20000457 	.word	0x20000457
 800c5f4:	08013b68 	.word	0x08013b68

0800c5f8 <eeprom_enable_write>:
//eeprom_enable_write
// eepromとして使うflashメモリ領域をeraseし，書き込みを有効にする
// 引数：なし
// 戻り値：問題が起こらなければHAL_OKを返す
//+++++++++++++++++++++++++++++++++++++++++++++++
HAL_StatusTypeDef eeprom_enable_write(void){
 800c5f8:	b580      	push	{r7, lr}
 800c5fa:	b088      	sub	sp, #32
 800c5fc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status;
  FLASH_EraseInitTypeDef EraseInitStruct;
  uint32_t PageError = 0;
 800c5fe:	2300      	movs	r3, #0
 800c600:	607b      	str	r3, [r7, #4]
  EraseInitStruct.TypeErase = FLASH_TYPEERASE_SECTORS;
 800c602:	2300      	movs	r3, #0
 800c604:	60bb      	str	r3, [r7, #8]
  //EraseInitStruct.Banks = FLASH_BANK_1;
  //EraseInitStruct.Sector = EEPROM_START_ADDRESS;
  EraseInitStruct.Sector = FLASH_SECTOR_11;
 800c606:	230b      	movs	r3, #11
 800c608:	613b      	str	r3, [r7, #16]
  EraseInitStruct.NbSectors = 1;
 800c60a:	2301      	movs	r3, #1
 800c60c:	617b      	str	r3, [r7, #20]
  EraseInitStruct.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 800c60e:	2302      	movs	r3, #2
 800c610:	61bb      	str	r3, [r7, #24]

  status = HAL_FLASH_Unlock();
 800c612:	f7f5 fa45 	bl	8001aa0 <HAL_FLASH_Unlock>
 800c616:	4603      	mov	r3, r0
 800c618:	77fb      	strb	r3, [r7, #31]
  if(status != HAL_OK) return status;
 800c61a:	7ffb      	ldrb	r3, [r7, #31]
 800c61c:	2b00      	cmp	r3, #0
 800c61e:	d001      	beq.n	800c624 <eeprom_enable_write+0x2c>
 800c620:	7ffb      	ldrb	r3, [r7, #31]
 800c622:	e009      	b.n	800c638 <eeprom_enable_write+0x40>
  status = HAL_FLASHEx_Erase(&EraseInitStruct, &PageError);
 800c624:	1d3a      	adds	r2, r7, #4
 800c626:	f107 0308 	add.w	r3, r7, #8
 800c62a:	4611      	mov	r1, r2
 800c62c:	4618      	mov	r0, r3
 800c62e:	f7f5 fb95 	bl	8001d5c <HAL_FLASHEx_Erase>
 800c632:	4603      	mov	r3, r0
 800c634:	77fb      	strb	r3, [r7, #31]
  return status;
 800c636:	7ffb      	ldrb	r3, [r7, #31]
}
 800c638:	4618      	mov	r0, r3
 800c63a:	3720      	adds	r7, #32
 800c63c:	46bd      	mov	sp, r7
 800c63e:	bd80      	pop	{r7, pc}

0800c640 <eeprom_disable_write>:
//eeprom_disable_write
// eepromとして使うflashメモリ領域への書き込みを無効にする
// 引数：なし
// 戻り値：問題が起こらなければHAL_OKを返す
//+++++++++++++++++++++++++++++++++++++++++++++++
HAL_StatusTypeDef eeprom_disable_write(void){
 800c640:	b580      	push	{r7, lr}
 800c642:	af00      	add	r7, sp, #0
  return HAL_FLASH_Lock();
 800c644:	f7f5 fa4e 	bl	8001ae4 <HAL_FLASH_Lock>
 800c648:	4603      	mov	r3, r0
}
 800c64a:	4618      	mov	r0, r3
 800c64c:	bd80      	pop	{r7, pc}

0800c64e <eeprom_write_halfword>:
//eeprom_write_halfword
// eepromとして使うflashメモリ領域へ2バイトの値を書き込む
// 引数：address …… eepromとして使うflashメモリ領域の先頭アドレスからのオフセット，data …… 書き込みたいuin16_t型データ
// 戻り値：問題が起こらなければHAL_OKを返す
//+++++++++++++++++++++++++++++++++++++++++++++++
HAL_StatusTypeDef eeprom_write_halfword(uint32_t address, uint16_t data){
 800c64e:	b590      	push	{r4, r7, lr}
 800c650:	b085      	sub	sp, #20
 800c652:	af00      	add	r7, sp, #0
 800c654:	6078      	str	r0, [r7, #4]
 800c656:	460b      	mov	r3, r1
 800c658:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status;
  address = address*2 + EEPROM_START_ADDRESS;
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	f103 6380 	add.w	r3, r3, #67108864	; 0x4000000
 800c660:	f503 23e0 	add.w	r3, r3, #458752	; 0x70000
 800c664:	005b      	lsls	r3, r3, #1
 800c666:	607b      	str	r3, [r7, #4]
  status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, address, data);
 800c668:	887b      	ldrh	r3, [r7, #2]
 800c66a:	f04f 0400 	mov.w	r4, #0
 800c66e:	461a      	mov	r2, r3
 800c670:	4623      	mov	r3, r4
 800c672:	6879      	ldr	r1, [r7, #4]
 800c674:	2001      	movs	r0, #1
 800c676:	f7f5 f9bf 	bl	80019f8 <HAL_FLASH_Program>
 800c67a:	4603      	mov	r3, r0
 800c67c:	73fb      	strb	r3, [r7, #15]
  return status;
 800c67e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c680:	4618      	mov	r0, r3
 800c682:	3714      	adds	r7, #20
 800c684:	46bd      	mov	sp, r7
 800c686:	bd90      	pop	{r4, r7, pc}

0800c688 <eeprom_read_halfword>:
//eeprom_read_halfword
// eepromとして使うflashメモリ領域から2バイトの値を読み込む
// 引数：address …… eepromとして使うflashメモリ領域の先頭アドレスからのオフセット
// 戻り値：読み込んだuin16_t型データ
//+++++++++++++++++++++++++++++++++++++++++++++++
uint16_t eeprom_read_halfword(uint32_t address){
 800c688:	b480      	push	{r7}
 800c68a:	b085      	sub	sp, #20
 800c68c:	af00      	add	r7, sp, #0
 800c68e:	6078      	str	r0, [r7, #4]
  uint16_t val = 0;
 800c690:	2300      	movs	r3, #0
 800c692:	81fb      	strh	r3, [r7, #14]
  address = address*2 + EEPROM_START_ADDRESS;
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	f103 6380 	add.w	r3, r3, #67108864	; 0x4000000
 800c69a:	f503 23e0 	add.w	r3, r3, #458752	; 0x70000
 800c69e:	005b      	lsls	r3, r3, #1
 800c6a0:	607b      	str	r3, [r7, #4]
  val = *(__IO uint16_t *)address;
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	881b      	ldrh	r3, [r3, #0]
 800c6a6:	81fb      	strh	r3, [r7, #14]
  return val;
 800c6a8:	89fb      	ldrh	r3, [r7, #14]
}
 800c6aa:	4618      	mov	r0, r3
 800c6ac:	3714      	adds	r7, #20
 800c6ae:	46bd      	mov	sp, r7
 800c6b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6b4:	4770      	bx	lr
	...

0800c6b8 <gyro_init>:
#include "global.h"

SPI_HandleTypeDef hspi3;


void gyro_init(void){
 800c6b8:	b580      	push	{r7, lr}
 800c6ba:	b082      	sub	sp, #8
 800c6bc:	af00      	add	r7, sp, #0
  uint8_t who_am_i;

  HAL_Delay(100); 					// wait start up
 800c6be:	2064      	movs	r0, #100	; 0x64
 800c6c0:	f7f4 fcac 	bl	800101c <HAL_Delay>
  who_am_i = read_byte(WHO_AM_I); 	// 1. read who am i
 800c6c4:	2075      	movs	r0, #117	; 0x75
 800c6c6:	f000 f82f 	bl	800c728 <read_byte>
 800c6ca:	4603      	mov	r3, r0
 800c6cc:	71fb      	strb	r3, [r7, #7]
  printf("0x%x\r\n",who_am_i); 		// 2. check who am i value
 800c6ce:	79fb      	ldrb	r3, [r7, #7]
 800c6d0:	4619      	mov	r1, r3
 800c6d2:	4813      	ldr	r0, [pc, #76]	; (800c720 <gyro_init+0x68>)
 800c6d4:	f006 f828 	bl	8012728 <iprintf>

  // 2. error check
  if (who_am_i != 0x98){
 800c6d8:	79fb      	ldrb	r3, [r7, #7]
 800c6da:	2b98      	cmp	r3, #152	; 0x98
 800c6dc:	d003      	beq.n	800c6e6 <gyro_init+0x2e>
    while(1){
      printf("gyro_error\r");
 800c6de:	4811      	ldr	r0, [pc, #68]	; (800c724 <gyro_init+0x6c>)
 800c6e0:	f006 f822 	bl	8012728 <iprintf>
 800c6e4:	e7fb      	b.n	800c6de <gyro_init+0x26>
    }
  }

  HAL_Delay(50); // wait
 800c6e6:	2032      	movs	r0, #50	; 0x32
 800c6e8:	f7f4 fc98 	bl	800101c <HAL_Delay>
  write_byte(PWR_MGMT_1, 0x00); 	// 3. set pwr_might
 800c6ec:	2100      	movs	r1, #0
 800c6ee:	206b      	movs	r0, #107	; 0x6b
 800c6f0:	f000 f846 	bl	800c780 <write_byte>

  HAL_Delay(50);
 800c6f4:	2032      	movs	r0, #50	; 0x32
 800c6f6:	f7f4 fc91 	bl	800101c <HAL_Delay>
  write_byte(CONFIG, 0x00); 		// 4. set config
 800c6fa:	2100      	movs	r1, #0
 800c6fc:	201a      	movs	r0, #26
 800c6fe:	f000 f83f 	bl	800c780 <write_byte>

  HAL_Delay(50);
 800c702:	2032      	movs	r0, #50	; 0x32
 800c704:	f7f4 fc8a 	bl	800101c <HAL_Delay>
  write_byte(GYRO_CONFIG, 0x18); 	// 5. set gyro config
 800c708:	2118      	movs	r1, #24
 800c70a:	201b      	movs	r0, #27
 800c70c:	f000 f838 	bl	800c780 <write_byte>

  HAL_Delay(50);
 800c710:	2032      	movs	r0, #50	; 0x32
 800c712:	f7f4 fc83 	bl	800101c <HAL_Delay>
}
 800c716:	bf00      	nop
 800c718:	3708      	adds	r7, #8
 800c71a:	46bd      	mov	sp, r7
 800c71c:	bd80      	pop	{r7, pc}
 800c71e:	bf00      	nop
 800c720:	08013d30 	.word	0x08013d30
 800c724:	08013d38 	.word	0x08013d38

0800c728 <read_byte>:


uint8_t read_byte(uint8_t reg){
 800c728:	b580      	push	{r7, lr}
 800c72a:	b084      	sub	sp, #16
 800c72c:	af00      	add	r7, sp, #0
 800c72e:	4603      	mov	r3, r0
 800c730:	71fb      	strb	r3, [r7, #7]
  uint8_t ret,val;
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET ); 	//cs = Low;
 800c732:	2200      	movs	r2, #0
 800c734:	2104      	movs	r1, #4
 800c736:	4810      	ldr	r0, [pc, #64]	; (800c778 <read_byte+0x50>)
 800c738:	f7f5 fde4 	bl	8002304 <HAL_GPIO_WritePin>
  ret = reg | 0x80;  // MSB = 1
 800c73c:	79fb      	ldrb	r3, [r7, #7]
 800c73e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800c742:	b2db      	uxtb	r3, r3
 800c744:	73fb      	strb	r3, [r7, #15]
  HAL_SPI_Transmit(&hspi3, &ret,1,100); 					// sent 1byte(address)
 800c746:	f107 010f 	add.w	r1, r7, #15
 800c74a:	2364      	movs	r3, #100	; 0x64
 800c74c:	2201      	movs	r2, #1
 800c74e:	480b      	ldr	r0, [pc, #44]	; (800c77c <read_byte+0x54>)
 800c750:	f7f6 fa60 	bl	8002c14 <HAL_SPI_Transmit>
  HAL_SPI_Receive(&hspi3,&val,1,100); 						// read 1byte(read data)
 800c754:	f107 010e 	add.w	r1, r7, #14
 800c758:	2364      	movs	r3, #100	; 0x64
 800c75a:	2201      	movs	r2, #1
 800c75c:	4807      	ldr	r0, [pc, #28]	; (800c77c <read_byte+0x54>)
 800c75e:	f7f6 fb8d 	bl	8002e7c <HAL_SPI_Receive>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_SET );  	//cs = High;
 800c762:	2201      	movs	r2, #1
 800c764:	2104      	movs	r1, #4
 800c766:	4804      	ldr	r0, [pc, #16]	; (800c778 <read_byte+0x50>)
 800c768:	f7f5 fdcc 	bl	8002304 <HAL_GPIO_WritePin>
  return val;
 800c76c:	7bbb      	ldrb	r3, [r7, #14]
}
 800c76e:	4618      	mov	r0, r3
 800c770:	3710      	adds	r7, #16
 800c772:	46bd      	mov	sp, r7
 800c774:	bd80      	pop	{r7, pc}
 800c776:	bf00      	nop
 800c778:	40020c00 	.word	0x40020c00
 800c77c:	20000144 	.word	0x20000144

0800c780 <write_byte>:


void write_byte(uint8_t reg, uint8_t val){
 800c780:	b580      	push	{r7, lr}
 800c782:	b084      	sub	sp, #16
 800c784:	af00      	add	r7, sp, #0
 800c786:	4603      	mov	r3, r0
 800c788:	460a      	mov	r2, r1
 800c78a:	71fb      	strb	r3, [r7, #7]
 800c78c:	4613      	mov	r3, r2
 800c78e:	71bb      	strb	r3, [r7, #6]
  uint8_t ret;
  ret = reg & 0x7F ; // MSB = 0
 800c790:	79fb      	ldrb	r3, [r7, #7]
 800c792:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c796:	b2db      	uxtb	r3, r3
 800c798:	73fb      	strb	r3, [r7, #15]
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET); 	// cs = Low;
 800c79a:	2200      	movs	r2, #0
 800c79c:	2104      	movs	r1, #4
 800c79e:	480c      	ldr	r0, [pc, #48]	; (800c7d0 <write_byte+0x50>)
 800c7a0:	f7f5 fdb0 	bl	8002304 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi3, &ret,1,100); 					// sent 1byte(address)
 800c7a4:	f107 010f 	add.w	r1, r7, #15
 800c7a8:	2364      	movs	r3, #100	; 0x64
 800c7aa:	2201      	movs	r2, #1
 800c7ac:	4809      	ldr	r0, [pc, #36]	; (800c7d4 <write_byte+0x54>)
 800c7ae:	f7f6 fa31 	bl	8002c14 <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi3, &val,1,100); 					// read 1byte(write data)
 800c7b2:	1db9      	adds	r1, r7, #6
 800c7b4:	2364      	movs	r3, #100	; 0x64
 800c7b6:	2201      	movs	r2, #1
 800c7b8:	4806      	ldr	r0, [pc, #24]	; (800c7d4 <write_byte+0x54>)
 800c7ba:	f7f6 fa2b 	bl	8002c14 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_SET); 		// cs = High;
 800c7be:	2201      	movs	r2, #1
 800c7c0:	2104      	movs	r1, #4
 800c7c2:	4803      	ldr	r0, [pc, #12]	; (800c7d0 <write_byte+0x50>)
 800c7c4:	f7f5 fd9e 	bl	8002304 <HAL_GPIO_WritePin>
}
 800c7c8:	bf00      	nop
 800c7ca:	3710      	adds	r7, #16
 800c7cc:	46bd      	mov	sp, r7
 800c7ce:	bd80      	pop	{r7, pc}
 800c7d0:	40020c00 	.word	0x40020c00
 800c7d4:	20000144 	.word	0x20000144

0800c7d8 <accel_read_x>:


float accel_read_x(void){
 800c7d8:	b590      	push	{r4, r7, lr}
 800c7da:	b083      	sub	sp, #12
 800c7dc:	af00      	add	r7, sp, #0
  int16_t accel_x;
  float accel;

  // H:8bit shift, Link h and l
  accel_x = (int16_t)((int16_t)(read_byte(ACCEL_XOUT_H) << 8) | read_byte(ACCEL_XOUT_L));
 800c7de:	203b      	movs	r0, #59	; 0x3b
 800c7e0:	f7ff ffa2 	bl	800c728 <read_byte>
 800c7e4:	4603      	mov	r3, r0
 800c7e6:	021b      	lsls	r3, r3, #8
 800c7e8:	b21c      	sxth	r4, r3
 800c7ea:	203c      	movs	r0, #60	; 0x3c
 800c7ec:	f7ff ff9c 	bl	800c728 <read_byte>
 800c7f0:	4603      	mov	r3, r0
 800c7f2:	b21b      	sxth	r3, r3
 800c7f4:	4323      	orrs	r3, r4
 800c7f6:	80fb      	strh	r3, [r7, #6]

  accel = (float)(accel_x / ACCEL_FACTOR); // dps to accel
 800c7f8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c7fc:	2b00      	cmp	r3, #0
 800c7fe:	da01      	bge.n	800c804 <accel_read_x+0x2c>
 800c800:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 800c804:	12db      	asrs	r3, r3, #11
 800c806:	b21b      	sxth	r3, r3
 800c808:	ee07 3a90 	vmov	s15, r3
 800c80c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c810:	edc7 7a00 	vstr	s15, [r7]
  return accel;
 800c814:	683b      	ldr	r3, [r7, #0]
 800c816:	ee07 3a90 	vmov	s15, r3
}
 800c81a:	eeb0 0a67 	vmov.f32	s0, s15
 800c81e:	370c      	adds	r7, #12
 800c820:	46bd      	mov	sp, r7
 800c822:	bd90      	pop	{r4, r7, pc}

0800c824 <accel_read_y>:


float accel_read_y(void){
 800c824:	b590      	push	{r4, r7, lr}
 800c826:	b083      	sub	sp, #12
 800c828:	af00      	add	r7, sp, #0
  int16_t accel_y;
  float accel;

  // H:8bit shift, Link h and l
  accel_y = (int16_t)((int16_t)(read_byte(ACCEL_YOUT_H) << 8) | read_byte(ACCEL_YOUT_L));
 800c82a:	203d      	movs	r0, #61	; 0x3d
 800c82c:	f7ff ff7c 	bl	800c728 <read_byte>
 800c830:	4603      	mov	r3, r0
 800c832:	021b      	lsls	r3, r3, #8
 800c834:	b21c      	sxth	r4, r3
 800c836:	203e      	movs	r0, #62	; 0x3e
 800c838:	f7ff ff76 	bl	800c728 <read_byte>
 800c83c:	4603      	mov	r3, r0
 800c83e:	b21b      	sxth	r3, r3
 800c840:	4323      	orrs	r3, r4
 800c842:	80fb      	strh	r3, [r7, #6]

  accel = (float)(accel_y / ACCEL_FACTOR); // dps to accel
 800c844:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c848:	2b00      	cmp	r3, #0
 800c84a:	da01      	bge.n	800c850 <accel_read_y+0x2c>
 800c84c:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 800c850:	12db      	asrs	r3, r3, #11
 800c852:	b21b      	sxth	r3, r3
 800c854:	ee07 3a90 	vmov	s15, r3
 800c858:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c85c:	edc7 7a00 	vstr	s15, [r7]
  return accel;
 800c860:	683b      	ldr	r3, [r7, #0]
 800c862:	ee07 3a90 	vmov	s15, r3
}
 800c866:	eeb0 0a67 	vmov.f32	s0, s15
 800c86a:	370c      	adds	r7, #12
 800c86c:	46bd      	mov	sp, r7
 800c86e:	bd90      	pop	{r4, r7, pc}

0800c870 <accel_read_z>:


float accel_read_z(void){
 800c870:	b590      	push	{r4, r7, lr}
 800c872:	b083      	sub	sp, #12
 800c874:	af00      	add	r7, sp, #0
  int16_t accel_z;
  float accel;

  // H:8bit shift, Link h and l
  accel_z = (int16_t)((int16_t)(read_byte(ACCEL_ZOUT_H) << 8) | read_byte(ACCEL_ZOUT_L));
 800c876:	203f      	movs	r0, #63	; 0x3f
 800c878:	f7ff ff56 	bl	800c728 <read_byte>
 800c87c:	4603      	mov	r3, r0
 800c87e:	021b      	lsls	r3, r3, #8
 800c880:	b21c      	sxth	r4, r3
 800c882:	2040      	movs	r0, #64	; 0x40
 800c884:	f7ff ff50 	bl	800c728 <read_byte>
 800c888:	4603      	mov	r3, r0
 800c88a:	b21b      	sxth	r3, r3
 800c88c:	4323      	orrs	r3, r4
 800c88e:	80fb      	strh	r3, [r7, #6]

  accel = (float)(accel_z / ACCEL_FACTOR-7); // dps to accel
 800c890:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c894:	2b00      	cmp	r3, #0
 800c896:	da01      	bge.n	800c89c <accel_read_z+0x2c>
 800c898:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 800c89c:	12db      	asrs	r3, r3, #11
 800c89e:	b21b      	sxth	r3, r3
 800c8a0:	3b07      	subs	r3, #7
 800c8a2:	ee07 3a90 	vmov	s15, r3
 800c8a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c8aa:	edc7 7a00 	vstr	s15, [r7]
  return accel;
 800c8ae:	683b      	ldr	r3, [r7, #0]
 800c8b0:	ee07 3a90 	vmov	s15, r3
}
 800c8b4:	eeb0 0a67 	vmov.f32	s0, s15
 800c8b8:	370c      	adds	r7, #12
 800c8ba:	46bd      	mov	sp, r7
 800c8bc:	bd90      	pop	{r4, r7, pc}
	...

0800c8c0 <gyro_read_x>:


float gyro_read_x(void){
 800c8c0:	b590      	push	{r4, r7, lr}
 800c8c2:	b083      	sub	sp, #12
 800c8c4:	af00      	add	r7, sp, #0
  int16_t gyro_x;
  float omega;

  // H:8bit shift, Link h and l
  gyro_x = (int16_t)((int16_t)(read_byte(GYRO_XOUT_H) << 8) | read_byte(GYRO_XOUT_L));
 800c8c6:	2043      	movs	r0, #67	; 0x43
 800c8c8:	f7ff ff2e 	bl	800c728 <read_byte>
 800c8cc:	4603      	mov	r3, r0
 800c8ce:	021b      	lsls	r3, r3, #8
 800c8d0:	b21c      	sxth	r4, r3
 800c8d2:	2044      	movs	r0, #68	; 0x44
 800c8d4:	f7ff ff28 	bl	800c728 <read_byte>
 800c8d8:	4603      	mov	r3, r0
 800c8da:	b21b      	sxth	r3, r3
 800c8dc:	4323      	orrs	r3, r4
 800c8de:	80fb      	strh	r3, [r7, #6]

  omega = (float)(gyro_x / GYRO_FACTOR+1.4); // dps to deg/sec
 800c8e0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c8e4:	4618      	mov	r0, r3
 800c8e6:	f7f3 fe15 	bl	8000514 <__aeabi_i2d>
 800c8ea:	a30f      	add	r3, pc, #60	; (adr r3, 800c928 <gyro_read_x+0x68>)
 800c8ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8f0:	f7f3 ffa4 	bl	800083c <__aeabi_ddiv>
 800c8f4:	4603      	mov	r3, r0
 800c8f6:	460c      	mov	r4, r1
 800c8f8:	4618      	mov	r0, r3
 800c8fa:	4621      	mov	r1, r4
 800c8fc:	a30c      	add	r3, pc, #48	; (adr r3, 800c930 <gyro_read_x+0x70>)
 800c8fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c902:	f7f3 fcbb 	bl	800027c <__adddf3>
 800c906:	4603      	mov	r3, r0
 800c908:	460c      	mov	r4, r1
 800c90a:	4618      	mov	r0, r3
 800c90c:	4621      	mov	r1, r4
 800c90e:	f7f4 f943 	bl	8000b98 <__aeabi_d2f>
 800c912:	4603      	mov	r3, r0
 800c914:	603b      	str	r3, [r7, #0]
  return omega;
 800c916:	683b      	ldr	r3, [r7, #0]
 800c918:	ee07 3a90 	vmov	s15, r3
}
 800c91c:	eeb0 0a67 	vmov.f32	s0, s15
 800c920:	370c      	adds	r7, #12
 800c922:	46bd      	mov	sp, r7
 800c924:	bd90      	pop	{r4, r7, pc}
 800c926:	bf00      	nop
 800c928:	66666666 	.word	0x66666666
 800c92c:	40306666 	.word	0x40306666
 800c930:	66666666 	.word	0x66666666
 800c934:	3ff66666 	.word	0x3ff66666

0800c938 <gyro_read_y>:


float gyro_read_y(void){
 800c938:	b590      	push	{r4, r7, lr}
 800c93a:	b083      	sub	sp, #12
 800c93c:	af00      	add	r7, sp, #0
  int16_t gyro_y;
  float omega;

  // H:8bit shift, Link h and l
  gyro_y = (int16_t)((int16_t)(read_byte(GYRO_YOUT_H) << 8) | read_byte(GYRO_YOUT_L));
 800c93e:	2045      	movs	r0, #69	; 0x45
 800c940:	f7ff fef2 	bl	800c728 <read_byte>
 800c944:	4603      	mov	r3, r0
 800c946:	021b      	lsls	r3, r3, #8
 800c948:	b21c      	sxth	r4, r3
 800c94a:	2046      	movs	r0, #70	; 0x46
 800c94c:	f7ff feec 	bl	800c728 <read_byte>
 800c950:	4603      	mov	r3, r0
 800c952:	b21b      	sxth	r3, r3
 800c954:	4323      	orrs	r3, r4
 800c956:	80fb      	strh	r3, [r7, #6]

  omega = (float)(gyro_y / GYRO_FACTOR-0.75); // dps to deg/sec
 800c958:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c95c:	4618      	mov	r0, r3
 800c95e:	f7f3 fdd9 	bl	8000514 <__aeabi_i2d>
 800c962:	a310      	add	r3, pc, #64	; (adr r3, 800c9a4 <gyro_read_y+0x6c>)
 800c964:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c968:	f7f3 ff68 	bl	800083c <__aeabi_ddiv>
 800c96c:	4603      	mov	r3, r0
 800c96e:	460c      	mov	r4, r1
 800c970:	4618      	mov	r0, r3
 800c972:	4621      	mov	r1, r4
 800c974:	f04f 0200 	mov.w	r2, #0
 800c978:	4b09      	ldr	r3, [pc, #36]	; (800c9a0 <gyro_read_y+0x68>)
 800c97a:	f7f3 fc7d 	bl	8000278 <__aeabi_dsub>
 800c97e:	4603      	mov	r3, r0
 800c980:	460c      	mov	r4, r1
 800c982:	4618      	mov	r0, r3
 800c984:	4621      	mov	r1, r4
 800c986:	f7f4 f907 	bl	8000b98 <__aeabi_d2f>
 800c98a:	4603      	mov	r3, r0
 800c98c:	603b      	str	r3, [r7, #0]
  return omega;
 800c98e:	683b      	ldr	r3, [r7, #0]
 800c990:	ee07 3a90 	vmov	s15, r3
}
 800c994:	eeb0 0a67 	vmov.f32	s0, s15
 800c998:	370c      	adds	r7, #12
 800c99a:	46bd      	mov	sp, r7
 800c99c:	bd90      	pop	{r4, r7, pc}
 800c99e:	bf00      	nop
 800c9a0:	3fe80000 	.word	0x3fe80000
 800c9a4:	66666666 	.word	0x66666666
 800c9a8:	40306666 	.word	0x40306666
 800c9ac:	00000000 	.word	0x00000000

0800c9b0 <gyro_read_z>:


float gyro_read_z(void){
 800c9b0:	b5b0      	push	{r4, r5, r7, lr}
 800c9b2:	b082      	sub	sp, #8
 800c9b4:	af00      	add	r7, sp, #0
  int16_t gyro_z;
  float omega;

  // H:8bit shift, Link h and l
  gyro_z = (int16_t)((int16_t)(read_byte(GYRO_ZOUT_H) << 8) | read_byte(GYRO_ZOUT_L));
 800c9b6:	2047      	movs	r0, #71	; 0x47
 800c9b8:	f7ff feb6 	bl	800c728 <read_byte>
 800c9bc:	4603      	mov	r3, r0
 800c9be:	021b      	lsls	r3, r3, #8
 800c9c0:	b21c      	sxth	r4, r3
 800c9c2:	2048      	movs	r0, #72	; 0x48
 800c9c4:	f7ff feb0 	bl	800c728 <read_byte>
 800c9c8:	4603      	mov	r3, r0
 800c9ca:	b21b      	sxth	r3, r3
 800c9cc:	4323      	orrs	r3, r4
 800c9ce:	80fb      	strh	r3, [r7, #6]

//  omega = (float)(gyro_z / GYRO_FACTOR+1.15); // dps to deg/sec
  omega = (float)(gyro_z / GYRO_FACTOR-gyro_drift_value); // dps to deg/sec
 800c9d0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c9d4:	4618      	mov	r0, r3
 800c9d6:	f7f3 fd9d 	bl	8000514 <__aeabi_i2d>
 800c9da:	a314      	add	r3, pc, #80	; (adr r3, 800ca2c <gyro_read_z+0x7c>)
 800c9dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9e0:	f7f3 ff2c 	bl	800083c <__aeabi_ddiv>
 800c9e4:	4603      	mov	r3, r0
 800c9e6:	460c      	mov	r4, r1
 800c9e8:	4625      	mov	r5, r4
 800c9ea:	461c      	mov	r4, r3
 800c9ec:	4b0e      	ldr	r3, [pc, #56]	; (800ca28 <gyro_read_z+0x78>)
 800c9ee:	681b      	ldr	r3, [r3, #0]
 800c9f0:	4618      	mov	r0, r3
 800c9f2:	f7f3 fda1 	bl	8000538 <__aeabi_f2d>
 800c9f6:	4602      	mov	r2, r0
 800c9f8:	460b      	mov	r3, r1
 800c9fa:	4620      	mov	r0, r4
 800c9fc:	4629      	mov	r1, r5
 800c9fe:	f7f3 fc3b 	bl	8000278 <__aeabi_dsub>
 800ca02:	4603      	mov	r3, r0
 800ca04:	460c      	mov	r4, r1
 800ca06:	4618      	mov	r0, r3
 800ca08:	4621      	mov	r1, r4
 800ca0a:	f7f4 f8c5 	bl	8000b98 <__aeabi_d2f>
 800ca0e:	4603      	mov	r3, r0
 800ca10:	603b      	str	r3, [r7, #0]
  return omega;
 800ca12:	683b      	ldr	r3, [r7, #0]
 800ca14:	ee07 3a90 	vmov	s15, r3
}
 800ca18:	eeb0 0a67 	vmov.f32	s0, s15
 800ca1c:	3708      	adds	r7, #8
 800ca1e:	46bd      	mov	sp, r7
 800ca20:	bdb0      	pop	{r4, r5, r7, pc}
 800ca22:	bf00      	nop
 800ca24:	f3af 8000 	nop.w
 800ca28:	20000bf4 	.word	0x20000bf4
 800ca2c:	66666666 	.word	0x66666666
 800ca30:	40306666 	.word	0x40306666

0800ca34 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int __io_putchar(int c) {
 800ca34:	b580      	push	{r7, lr}
 800ca36:	b084      	sub	sp, #16
 800ca38:	af00      	add	r7, sp, #0
 800ca3a:	6078      	str	r0, [r7, #4]
  if( c == '\n' ) {
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	2b0a      	cmp	r3, #10
 800ca40:	d108      	bne.n	800ca54 <__io_putchar+0x20>
    int _c = '\r';
 800ca42:	230d      	movs	r3, #13
 800ca44:	60fb      	str	r3, [r7, #12]
    HAL_UART_Transmit(&huart1, &_c, 1, 1);
 800ca46:	f107 010c 	add.w	r1, r7, #12
 800ca4a:	2301      	movs	r3, #1
 800ca4c:	2201      	movs	r2, #1
 800ca4e:	4807      	ldr	r0, [pc, #28]	; (800ca6c <__io_putchar+0x38>)
 800ca50:	f7f7 fe17 	bl	8004682 <HAL_UART_Transmit>
  }
  HAL_UART_Transmit(&huart1, &c, 1, 1);
 800ca54:	1d39      	adds	r1, r7, #4
 800ca56:	2301      	movs	r3, #1
 800ca58:	2201      	movs	r2, #1
 800ca5a:	4804      	ldr	r0, [pc, #16]	; (800ca6c <__io_putchar+0x38>)
 800ca5c:	f7f7 fe11 	bl	8004682 <HAL_UART_Transmit>
  return 0;
 800ca60:	2300      	movs	r3, #0
}
 800ca62:	4618      	mov	r0, r3
 800ca64:	3710      	adds	r7, #16
 800ca66:	46bd      	mov	sp, r7
 800ca68:	bd80      	pop	{r7, pc}
 800ca6a:	bf00      	nop
 800ca6c:	20000b64 	.word	0x20000b64

0800ca70 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ca70:	b5b0      	push	{r4, r5, r7, lr}
 800ca72:	ed2d 8b02 	vpush	{d8}
 800ca76:	b08c      	sub	sp, #48	; 0x30
 800ca78:	af00      	add	r7, sp, #0
 800ca7a:	6078      	str	r0, [r7, #4]
	TIM_OC_InitTypeDef ConfigOC;
	ConfigOC.OCMode = TIM_OCMODE_PWM1;
 800ca7c:	2360      	movs	r3, #96	; 0x60
 800ca7e:	60bb      	str	r3, [r7, #8]
	ConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800ca80:	2300      	movs	r3, #0
 800ca82:	613b      	str	r3, [r7, #16]
	ConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800ca84:	2300      	movs	r3, #0
 800ca86:	61bb      	str	r3, [r7, #24]

	if(htim == &htim6){
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	4ab5      	ldr	r2, [pc, #724]	; (800cd60 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 800ca8c:	4293      	cmp	r3, r2
 800ca8e:	f041 82c4 	bne.w	800e01a <HAL_TIM_PeriodElapsedCallback+0x15aa>
		cnt_l = TIM4 -> CNT;
 800ca92:	4bb4      	ldr	r3, [pc, #720]	; (800cd64 <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 800ca94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca96:	ee07 3a90 	vmov	s15, r3
 800ca9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ca9e:	4bb2      	ldr	r3, [pc, #712]	; (800cd68 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 800caa0:	edc3 7a00 	vstr	s15, [r3]
		cnt_r = TIM8 -> CNT;
 800caa4:	4bb1      	ldr	r3, [pc, #708]	; (800cd6c <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 800caa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800caa8:	ee07 3a90 	vmov	s15, r3
 800caac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cab0:	4baf      	ldr	r3, [pc, #700]	; (800cd70 <HAL_TIM_PeriodElapsedCallback+0x300>)
 800cab2:	edc3 7a00 	vstr	s15, [r3]
		if(cnt_l > 40000) cnt_l = cnt_l - 65535;		//0=>65505の値飛び検出用
 800cab6:	4bac      	ldr	r3, [pc, #688]	; (800cd68 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 800cab8:	edd3 7a00 	vldr	s15, [r3]
 800cabc:	ed9f 7aad 	vldr	s14, [pc, #692]	; 800cd74 <HAL_TIM_PeriodElapsedCallback+0x304>
 800cac0:	eef4 7ac7 	vcmpe.f32	s15, s14
 800cac4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cac8:	dd09      	ble.n	800cade <HAL_TIM_PeriodElapsedCallback+0x6e>
 800caca:	4ba7      	ldr	r3, [pc, #668]	; (800cd68 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 800cacc:	edd3 7a00 	vldr	s15, [r3]
 800cad0:	ed9f 7aa9 	vldr	s14, [pc, #676]	; 800cd78 <HAL_TIM_PeriodElapsedCallback+0x308>
 800cad4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800cad8:	4ba3      	ldr	r3, [pc, #652]	; (800cd68 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 800cada:	edc3 7a00 	vstr	s15, [r3]
		if(cnt_r > 40000) cnt_r = cnt_r - 65535;		//0=>65505の値飛び検出用
 800cade:	4ba4      	ldr	r3, [pc, #656]	; (800cd70 <HAL_TIM_PeriodElapsedCallback+0x300>)
 800cae0:	edd3 7a00 	vldr	s15, [r3]
 800cae4:	ed9f 7aa3 	vldr	s14, [pc, #652]	; 800cd74 <HAL_TIM_PeriodElapsedCallback+0x304>
 800cae8:	eef4 7ac7 	vcmpe.f32	s15, s14
 800caec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800caf0:	dd09      	ble.n	800cb06 <HAL_TIM_PeriodElapsedCallback+0x96>
 800caf2:	4b9f      	ldr	r3, [pc, #636]	; (800cd70 <HAL_TIM_PeriodElapsedCallback+0x300>)
 800caf4:	edd3 7a00 	vldr	s15, [r3]
 800caf8:	ed9f 7a9f 	vldr	s14, [pc, #636]	; 800cd78 <HAL_TIM_PeriodElapsedCallback+0x308>
 800cafc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800cb00:	4b9b      	ldr	r3, [pc, #620]	; (800cd70 <HAL_TIM_PeriodElapsedCallback+0x300>)
 800cb02:	edc3 7a00 	vstr	s15, [r3]
		cnt_r = cnt_r * -1;								//a回転方向合わせ
 800cb06:	4b9a      	ldr	r3, [pc, #616]	; (800cd70 <HAL_TIM_PeriodElapsedCallback+0x300>)
 800cb08:	edd3 7a00 	vldr	s15, [r3]
 800cb0c:	eef1 7a67 	vneg.f32	s15, s15
 800cb10:	4b97      	ldr	r3, [pc, #604]	; (800cd70 <HAL_TIM_PeriodElapsedCallback+0x300>)
 800cb12:	edc3 7a00 	vstr	s15, [r3]

		dist_l = dist_l + cnt_l * (DIAMETER * M_PI * 11 / 40 / 4096 / 4);
 800cb16:	4b99      	ldr	r3, [pc, #612]	; (800cd7c <HAL_TIM_PeriodElapsedCallback+0x30c>)
 800cb18:	681b      	ldr	r3, [r3, #0]
 800cb1a:	4618      	mov	r0, r3
 800cb1c:	f7f3 fd0c 	bl	8000538 <__aeabi_f2d>
 800cb20:	4604      	mov	r4, r0
 800cb22:	460d      	mov	r5, r1
 800cb24:	4b90      	ldr	r3, [pc, #576]	; (800cd68 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 800cb26:	681b      	ldr	r3, [r3, #0]
 800cb28:	4618      	mov	r0, r3
 800cb2a:	f7f3 fd05 	bl	8000538 <__aeabi_f2d>
 800cb2e:	a388      	add	r3, pc, #544	; (adr r3, 800cd50 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 800cb30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb34:	f7f3 fd58 	bl	80005e8 <__aeabi_dmul>
 800cb38:	4602      	mov	r2, r0
 800cb3a:	460b      	mov	r3, r1
 800cb3c:	4620      	mov	r0, r4
 800cb3e:	4629      	mov	r1, r5
 800cb40:	f7f3 fb9c 	bl	800027c <__adddf3>
 800cb44:	4603      	mov	r3, r0
 800cb46:	460c      	mov	r4, r1
 800cb48:	4618      	mov	r0, r3
 800cb4a:	4621      	mov	r1, r4
 800cb4c:	f7f4 f824 	bl	8000b98 <__aeabi_d2f>
 800cb50:	4602      	mov	r2, r0
 800cb52:	4b8a      	ldr	r3, [pc, #552]	; (800cd7c <HAL_TIM_PeriodElapsedCallback+0x30c>)
 800cb54:	601a      	str	r2, [r3, #0]
		dist_r = dist_r + cnt_r * (DIAMETER * M_PI * 11 / 40 / 4096 / 4);
 800cb56:	4b8a      	ldr	r3, [pc, #552]	; (800cd80 <HAL_TIM_PeriodElapsedCallback+0x310>)
 800cb58:	681b      	ldr	r3, [r3, #0]
 800cb5a:	4618      	mov	r0, r3
 800cb5c:	f7f3 fcec 	bl	8000538 <__aeabi_f2d>
 800cb60:	4604      	mov	r4, r0
 800cb62:	460d      	mov	r5, r1
 800cb64:	4b82      	ldr	r3, [pc, #520]	; (800cd70 <HAL_TIM_PeriodElapsedCallback+0x300>)
 800cb66:	681b      	ldr	r3, [r3, #0]
 800cb68:	4618      	mov	r0, r3
 800cb6a:	f7f3 fce5 	bl	8000538 <__aeabi_f2d>
 800cb6e:	a378      	add	r3, pc, #480	; (adr r3, 800cd50 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 800cb70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb74:	f7f3 fd38 	bl	80005e8 <__aeabi_dmul>
 800cb78:	4602      	mov	r2, r0
 800cb7a:	460b      	mov	r3, r1
 800cb7c:	4620      	mov	r0, r4
 800cb7e:	4629      	mov	r1, r5
 800cb80:	f7f3 fb7c 	bl	800027c <__adddf3>
 800cb84:	4603      	mov	r3, r0
 800cb86:	460c      	mov	r4, r1
 800cb88:	4618      	mov	r0, r3
 800cb8a:	4621      	mov	r1, r4
 800cb8c:	f7f4 f804 	bl	8000b98 <__aeabi_d2f>
 800cb90:	4602      	mov	r2, r0
 800cb92:	4b7b      	ldr	r3, [pc, #492]	; (800cd80 <HAL_TIM_PeriodElapsedCallback+0x310>)
 800cb94:	601a      	str	r2, [r3, #0]

		speed_l = cnt_l * (DIAMETER * M_PI * 11 / 40 / 4096 / 4) / 0.001;
 800cb96:	4b74      	ldr	r3, [pc, #464]	; (800cd68 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 800cb98:	681b      	ldr	r3, [r3, #0]
 800cb9a:	4618      	mov	r0, r3
 800cb9c:	f7f3 fccc 	bl	8000538 <__aeabi_f2d>
 800cba0:	a36b      	add	r3, pc, #428	; (adr r3, 800cd50 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 800cba2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cba6:	f7f3 fd1f 	bl	80005e8 <__aeabi_dmul>
 800cbaa:	4603      	mov	r3, r0
 800cbac:	460c      	mov	r4, r1
 800cbae:	4618      	mov	r0, r3
 800cbb0:	4621      	mov	r1, r4
 800cbb2:	a369      	add	r3, pc, #420	; (adr r3, 800cd58 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 800cbb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbb8:	f7f3 fe40 	bl	800083c <__aeabi_ddiv>
 800cbbc:	4603      	mov	r3, r0
 800cbbe:	460c      	mov	r4, r1
 800cbc0:	4618      	mov	r0, r3
 800cbc2:	4621      	mov	r1, r4
 800cbc4:	f7f3 ffe8 	bl	8000b98 <__aeabi_d2f>
 800cbc8:	4602      	mov	r2, r0
 800cbca:	4b6e      	ldr	r3, [pc, #440]	; (800cd84 <HAL_TIM_PeriodElapsedCallback+0x314>)
 800cbcc:	601a      	str	r2, [r3, #0]
		speed_r = cnt_r * (DIAMETER * M_PI * 11 / 40 / 4096 / 4) / 0.001;
 800cbce:	4b68      	ldr	r3, [pc, #416]	; (800cd70 <HAL_TIM_PeriodElapsedCallback+0x300>)
 800cbd0:	681b      	ldr	r3, [r3, #0]
 800cbd2:	4618      	mov	r0, r3
 800cbd4:	f7f3 fcb0 	bl	8000538 <__aeabi_f2d>
 800cbd8:	a35d      	add	r3, pc, #372	; (adr r3, 800cd50 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 800cbda:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbde:	f7f3 fd03 	bl	80005e8 <__aeabi_dmul>
 800cbe2:	4603      	mov	r3, r0
 800cbe4:	460c      	mov	r4, r1
 800cbe6:	4618      	mov	r0, r3
 800cbe8:	4621      	mov	r1, r4
 800cbea:	a35b      	add	r3, pc, #364	; (adr r3, 800cd58 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 800cbec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbf0:	f7f3 fe24 	bl	800083c <__aeabi_ddiv>
 800cbf4:	4603      	mov	r3, r0
 800cbf6:	460c      	mov	r4, r1
 800cbf8:	4618      	mov	r0, r3
 800cbfa:	4621      	mov	r1, r4
 800cbfc:	f7f3 ffcc 	bl	8000b98 <__aeabi_d2f>
 800cc00:	4602      	mov	r2, r0
 800cc02:	4b61      	ldr	r3, [pc, #388]	; (800cd88 <HAL_TIM_PeriodElapsedCallback+0x318>)
 800cc04:	601a      	str	r2, [r3, #0]

		TIM4 -> CNT = 0;
 800cc06:	4b57      	ldr	r3, [pc, #348]	; (800cd64 <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 800cc08:	2200      	movs	r2, #0
 800cc0a:	625a      	str	r2, [r3, #36]	; 0x24
		TIM8 -> CNT = 0;
 800cc0c:	4b57      	ldr	r3, [pc, #348]	; (800cd6c <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 800cc0e:	2200      	movs	r2, #0
 800cc10:	625a      	str	r2, [r3, #36]	; 0x24

		if(MF.FLAG.SPD){
 800cc12:	4b5e      	ldr	r3, [pc, #376]	; (800cd8c <HAL_TIM_PeriodElapsedCallback+0x31c>)
 800cc14:	881b      	ldrh	r3, [r3, #0]
 800cc16:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800cc1a:	b2db      	uxtb	r3, r3
 800cc1c:	2b00      	cmp	r3, #0
 800cc1e:	f000 80fe 	beq.w	800ce1e <HAL_TIM_PeriodElapsedCallback+0x3ae>
			target_speed_l += accel_l * 0.001;
 800cc22:	4b5b      	ldr	r3, [pc, #364]	; (800cd90 <HAL_TIM_PeriodElapsedCallback+0x320>)
 800cc24:	681b      	ldr	r3, [r3, #0]
 800cc26:	4618      	mov	r0, r3
 800cc28:	f7f3 fc86 	bl	8000538 <__aeabi_f2d>
 800cc2c:	a34a      	add	r3, pc, #296	; (adr r3, 800cd58 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 800cc2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc32:	f7f3 fcd9 	bl	80005e8 <__aeabi_dmul>
 800cc36:	4603      	mov	r3, r0
 800cc38:	460c      	mov	r4, r1
 800cc3a:	4625      	mov	r5, r4
 800cc3c:	461c      	mov	r4, r3
 800cc3e:	4b55      	ldr	r3, [pc, #340]	; (800cd94 <HAL_TIM_PeriodElapsedCallback+0x324>)
 800cc40:	681b      	ldr	r3, [r3, #0]
 800cc42:	4618      	mov	r0, r3
 800cc44:	f7f3 fc78 	bl	8000538 <__aeabi_f2d>
 800cc48:	4602      	mov	r2, r0
 800cc4a:	460b      	mov	r3, r1
 800cc4c:	4620      	mov	r0, r4
 800cc4e:	4629      	mov	r1, r5
 800cc50:	f7f3 fb14 	bl	800027c <__adddf3>
 800cc54:	4603      	mov	r3, r0
 800cc56:	460c      	mov	r4, r1
 800cc58:	4618      	mov	r0, r3
 800cc5a:	4621      	mov	r1, r4
 800cc5c:	f7f3 ff9c 	bl	8000b98 <__aeabi_d2f>
 800cc60:	4602      	mov	r2, r0
 800cc62:	4b4c      	ldr	r3, [pc, #304]	; (800cd94 <HAL_TIM_PeriodElapsedCallback+0x324>)
 800cc64:	601a      	str	r2, [r3, #0]
			target_speed_l = max(min(target_speed_l, speed_max_l), speed_min_l);
 800cc66:	4b4b      	ldr	r3, [pc, #300]	; (800cd94 <HAL_TIM_PeriodElapsedCallback+0x324>)
 800cc68:	ed93 7a00 	vldr	s14, [r3]
 800cc6c:	4b4a      	ldr	r3, [pc, #296]	; (800cd98 <HAL_TIM_PeriodElapsedCallback+0x328>)
 800cc6e:	edd3 7a00 	vldr	s15, [r3]
 800cc72:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800cc76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cc7a:	dd03      	ble.n	800cc84 <HAL_TIM_PeriodElapsedCallback+0x214>
 800cc7c:	4b46      	ldr	r3, [pc, #280]	; (800cd98 <HAL_TIM_PeriodElapsedCallback+0x328>)
 800cc7e:	edd3 7a00 	vldr	s15, [r3]
 800cc82:	e002      	b.n	800cc8a <HAL_TIM_PeriodElapsedCallback+0x21a>
 800cc84:	4b43      	ldr	r3, [pc, #268]	; (800cd94 <HAL_TIM_PeriodElapsedCallback+0x324>)
 800cc86:	edd3 7a00 	vldr	s15, [r3]
 800cc8a:	4b44      	ldr	r3, [pc, #272]	; (800cd9c <HAL_TIM_PeriodElapsedCallback+0x32c>)
 800cc8c:	ed93 7a00 	vldr	s14, [r3]
 800cc90:	eef4 7ac7 	vcmpe.f32	s15, s14
 800cc94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cc98:	dd10      	ble.n	800ccbc <HAL_TIM_PeriodElapsedCallback+0x24c>
 800cc9a:	4b3e      	ldr	r3, [pc, #248]	; (800cd94 <HAL_TIM_PeriodElapsedCallback+0x324>)
 800cc9c:	ed93 7a00 	vldr	s14, [r3]
 800cca0:	4b3d      	ldr	r3, [pc, #244]	; (800cd98 <HAL_TIM_PeriodElapsedCallback+0x328>)
 800cca2:	edd3 7a00 	vldr	s15, [r3]
 800cca6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800ccaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ccae:	dd02      	ble.n	800ccb6 <HAL_TIM_PeriodElapsedCallback+0x246>
 800ccb0:	4b39      	ldr	r3, [pc, #228]	; (800cd98 <HAL_TIM_PeriodElapsedCallback+0x328>)
 800ccb2:	681b      	ldr	r3, [r3, #0]
 800ccb4:	e004      	b.n	800ccc0 <HAL_TIM_PeriodElapsedCallback+0x250>
 800ccb6:	4b37      	ldr	r3, [pc, #220]	; (800cd94 <HAL_TIM_PeriodElapsedCallback+0x324>)
 800ccb8:	681b      	ldr	r3, [r3, #0]
 800ccba:	e001      	b.n	800ccc0 <HAL_TIM_PeriodElapsedCallback+0x250>
 800ccbc:	4b37      	ldr	r3, [pc, #220]	; (800cd9c <HAL_TIM_PeriodElapsedCallback+0x32c>)
 800ccbe:	681b      	ldr	r3, [r3, #0]
 800ccc0:	4a34      	ldr	r2, [pc, #208]	; (800cd94 <HAL_TIM_PeriodElapsedCallback+0x324>)
 800ccc2:	6013      	str	r3, [r2, #0]
			epsilon_l = target_speed_l - speed_l;
 800ccc4:	4b33      	ldr	r3, [pc, #204]	; (800cd94 <HAL_TIM_PeriodElapsedCallback+0x324>)
 800ccc6:	ed93 7a00 	vldr	s14, [r3]
 800ccca:	4b2e      	ldr	r3, [pc, #184]	; (800cd84 <HAL_TIM_PeriodElapsedCallback+0x314>)
 800cccc:	edd3 7a00 	vldr	s15, [r3]
 800ccd0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ccd4:	4b32      	ldr	r3, [pc, #200]	; (800cda0 <HAL_TIM_PeriodElapsedCallback+0x330>)
 800ccd6:	edc3 7a00 	vstr	s15, [r3]
			pulse_l = Kp * epsilon_l;
 800ccda:	4b31      	ldr	r3, [pc, #196]	; (800cda0 <HAL_TIM_PeriodElapsedCallback+0x330>)
 800ccdc:	edd3 7a00 	vldr	s15, [r3]
 800cce0:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800cce4:	ee67 7a87 	vmul.f32	s15, s15, s14
 800cce8:	4b2e      	ldr	r3, [pc, #184]	; (800cda4 <HAL_TIM_PeriodElapsedCallback+0x334>)
 800ccea:	edc3 7a00 	vstr	s15, [r3]

			target_speed_r += accel_r * 0.001;
 800ccee:	4b2e      	ldr	r3, [pc, #184]	; (800cda8 <HAL_TIM_PeriodElapsedCallback+0x338>)
 800ccf0:	681b      	ldr	r3, [r3, #0]
 800ccf2:	4618      	mov	r0, r3
 800ccf4:	f7f3 fc20 	bl	8000538 <__aeabi_f2d>
 800ccf8:	a317      	add	r3, pc, #92	; (adr r3, 800cd58 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 800ccfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccfe:	f7f3 fc73 	bl	80005e8 <__aeabi_dmul>
 800cd02:	4603      	mov	r3, r0
 800cd04:	460c      	mov	r4, r1
 800cd06:	4625      	mov	r5, r4
 800cd08:	461c      	mov	r4, r3
 800cd0a:	4b28      	ldr	r3, [pc, #160]	; (800cdac <HAL_TIM_PeriodElapsedCallback+0x33c>)
 800cd0c:	681b      	ldr	r3, [r3, #0]
 800cd0e:	4618      	mov	r0, r3
 800cd10:	f7f3 fc12 	bl	8000538 <__aeabi_f2d>
 800cd14:	4602      	mov	r2, r0
 800cd16:	460b      	mov	r3, r1
 800cd18:	4620      	mov	r0, r4
 800cd1a:	4629      	mov	r1, r5
 800cd1c:	f7f3 faae 	bl	800027c <__adddf3>
 800cd20:	4603      	mov	r3, r0
 800cd22:	460c      	mov	r4, r1
 800cd24:	4618      	mov	r0, r3
 800cd26:	4621      	mov	r1, r4
 800cd28:	f7f3 ff36 	bl	8000b98 <__aeabi_d2f>
 800cd2c:	4602      	mov	r2, r0
 800cd2e:	4b1f      	ldr	r3, [pc, #124]	; (800cdac <HAL_TIM_PeriodElapsedCallback+0x33c>)
 800cd30:	601a      	str	r2, [r3, #0]
			target_speed_r = max(min(target_speed_r, speed_max_r), speed_min_r);
 800cd32:	4b1e      	ldr	r3, [pc, #120]	; (800cdac <HAL_TIM_PeriodElapsedCallback+0x33c>)
 800cd34:	ed93 7a00 	vldr	s14, [r3]
 800cd38:	4b1d      	ldr	r3, [pc, #116]	; (800cdb0 <HAL_TIM_PeriodElapsedCallback+0x340>)
 800cd3a:	edd3 7a00 	vldr	s15, [r3]
 800cd3e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800cd42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cd46:	dd35      	ble.n	800cdb4 <HAL_TIM_PeriodElapsedCallback+0x344>
 800cd48:	4b19      	ldr	r3, [pc, #100]	; (800cdb0 <HAL_TIM_PeriodElapsedCallback+0x340>)
 800cd4a:	edd3 7a00 	vldr	s15, [r3]
 800cd4e:	e034      	b.n	800cdba <HAL_TIM_PeriodElapsedCallback+0x34a>
 800cd50:	775e3793 	.word	0x775e3793
 800cd54:	3f552a9e 	.word	0x3f552a9e
 800cd58:	d2f1a9fc 	.word	0xd2f1a9fc
 800cd5c:	3f50624d 	.word	0x3f50624d
 800cd60:	20000bb4 	.word	0x20000bb4
 800cd64:	40000800 	.word	0x40000800
 800cd68:	200002ac 	.word	0x200002ac
 800cd6c:	40010400 	.word	0x40010400
 800cd70:	20000bac 	.word	0x20000bac
 800cd74:	471c4000 	.word	0x471c4000
 800cd78:	477fff00 	.word	0x477fff00
 800cd7c:	200015c4 	.word	0x200015c4
 800cd80:	20000aec 	.word	0x20000aec
 800cd84:	20000af0 	.word	0x20000af0
 800cd88:	200002bc 	.word	0x200002bc
 800cd8c:	20000f68 	.word	0x20000f68
 800cd90:	20000d58 	.word	0x20000d58
 800cd94:	20000bfc 	.word	0x20000bfc
 800cd98:	2000077c 	.word	0x2000077c
 800cd9c:	20000b54 	.word	0x20000b54
 800cda0:	20000b60 	.word	0x20000b60
 800cda4:	20000ba8 	.word	0x20000ba8
 800cda8:	20000ae4 	.word	0x20000ae4
 800cdac:	200001a0 	.word	0x200001a0
 800cdb0:	200001a4 	.word	0x200001a4
 800cdb4:	4ba4      	ldr	r3, [pc, #656]	; (800d048 <HAL_TIM_PeriodElapsedCallback+0x5d8>)
 800cdb6:	edd3 7a00 	vldr	s15, [r3]
 800cdba:	4ba4      	ldr	r3, [pc, #656]	; (800d04c <HAL_TIM_PeriodElapsedCallback+0x5dc>)
 800cdbc:	ed93 7a00 	vldr	s14, [r3]
 800cdc0:	eef4 7ac7 	vcmpe.f32	s15, s14
 800cdc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cdc8:	dd10      	ble.n	800cdec <HAL_TIM_PeriodElapsedCallback+0x37c>
 800cdca:	4b9f      	ldr	r3, [pc, #636]	; (800d048 <HAL_TIM_PeriodElapsedCallback+0x5d8>)
 800cdcc:	ed93 7a00 	vldr	s14, [r3]
 800cdd0:	4b9f      	ldr	r3, [pc, #636]	; (800d050 <HAL_TIM_PeriodElapsedCallback+0x5e0>)
 800cdd2:	edd3 7a00 	vldr	s15, [r3]
 800cdd6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800cdda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cdde:	dd02      	ble.n	800cde6 <HAL_TIM_PeriodElapsedCallback+0x376>
 800cde0:	4b9b      	ldr	r3, [pc, #620]	; (800d050 <HAL_TIM_PeriodElapsedCallback+0x5e0>)
 800cde2:	681b      	ldr	r3, [r3, #0]
 800cde4:	e004      	b.n	800cdf0 <HAL_TIM_PeriodElapsedCallback+0x380>
 800cde6:	4b98      	ldr	r3, [pc, #608]	; (800d048 <HAL_TIM_PeriodElapsedCallback+0x5d8>)
 800cde8:	681b      	ldr	r3, [r3, #0]
 800cdea:	e001      	b.n	800cdf0 <HAL_TIM_PeriodElapsedCallback+0x380>
 800cdec:	4b97      	ldr	r3, [pc, #604]	; (800d04c <HAL_TIM_PeriodElapsedCallback+0x5dc>)
 800cdee:	681b      	ldr	r3, [r3, #0]
 800cdf0:	4a95      	ldr	r2, [pc, #596]	; (800d048 <HAL_TIM_PeriodElapsedCallback+0x5d8>)
 800cdf2:	6013      	str	r3, [r2, #0]
			epsilon_r = target_speed_r - speed_r;
 800cdf4:	4b94      	ldr	r3, [pc, #592]	; (800d048 <HAL_TIM_PeriodElapsedCallback+0x5d8>)
 800cdf6:	ed93 7a00 	vldr	s14, [r3]
 800cdfa:	4b96      	ldr	r3, [pc, #600]	; (800d054 <HAL_TIM_PeriodElapsedCallback+0x5e4>)
 800cdfc:	edd3 7a00 	vldr	s15, [r3]
 800ce00:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ce04:	4b94      	ldr	r3, [pc, #592]	; (800d058 <HAL_TIM_PeriodElapsedCallback+0x5e8>)
 800ce06:	edc3 7a00 	vstr	s15, [r3]
			pulse_r = Kp * epsilon_r;
 800ce0a:	4b93      	ldr	r3, [pc, #588]	; (800d058 <HAL_TIM_PeriodElapsedCallback+0x5e8>)
 800ce0c:	edd3 7a00 	vldr	s15, [r3]
 800ce10:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800ce14:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ce18:	4b90      	ldr	r3, [pc, #576]	; (800d05c <HAL_TIM_PeriodElapsedCallback+0x5ec>)
 800ce1a:	edc3 7a00 	vstr	s15, [r3]
		}

		log_cnt ++;
 800ce1e:	4b90      	ldr	r3, [pc, #576]	; (800d060 <HAL_TIM_PeriodElapsedCallback+0x5f0>)
 800ce20:	681b      	ldr	r3, [r3, #0]
 800ce22:	3301      	adds	r3, #1
 800ce24:	4a8e      	ldr	r2, [pc, #568]	; (800d060 <HAL_TIM_PeriodElapsedCallback+0x5f0>)
 800ce26:	6013      	str	r3, [r2, #0]

		if(log_cnt >= 5 && MF2.FLAG.LOG){
 800ce28:	4b8d      	ldr	r3, [pc, #564]	; (800d060 <HAL_TIM_PeriodElapsedCallback+0x5f0>)
 800ce2a:	681b      	ldr	r3, [r3, #0]
 800ce2c:	2b04      	cmp	r3, #4
 800ce2e:	dd37      	ble.n	800cea0 <HAL_TIM_PeriodElapsedCallback+0x430>
 800ce30:	4b8c      	ldr	r3, [pc, #560]	; (800d064 <HAL_TIM_PeriodElapsedCallback+0x5f4>)
 800ce32:	881b      	ldrh	r3, [r3, #0]
 800ce34:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800ce38:	b2db      	uxtb	r3, r3
 800ce3a:	2b00      	cmp	r3, #0
 800ce3c:	d030      	beq.n	800cea0 <HAL_TIM_PeriodElapsedCallback+0x430>
			log_cnt = 0;
 800ce3e:	4b88      	ldr	r3, [pc, #544]	; (800d060 <HAL_TIM_PeriodElapsedCallback+0x5f0>)
 800ce40:	2200      	movs	r2, #0
 800ce42:	601a      	str	r2, [r3, #0]
			if(get_cnt < log_allay){
 800ce44:	4b88      	ldr	r3, [pc, #544]	; (800d068 <HAL_TIM_PeriodElapsedCallback+0x5f8>)
 800ce46:	681b      	ldr	r3, [r3, #0]
 800ce48:	2bc7      	cmp	r3, #199	; 0xc7
 800ce4a:	dc29      	bgt.n	800cea0 <HAL_TIM_PeriodElapsedCallback+0x430>
				get_speed_l[get_cnt] = speed_l;
 800ce4c:	4b87      	ldr	r3, [pc, #540]	; (800d06c <HAL_TIM_PeriodElapsedCallback+0x5fc>)
 800ce4e:	edd3 7a00 	vldr	s15, [r3]
 800ce52:	4b85      	ldr	r3, [pc, #532]	; (800d068 <HAL_TIM_PeriodElapsedCallback+0x5f8>)
 800ce54:	681b      	ldr	r3, [r3, #0]
 800ce56:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ce5a:	ee17 1a90 	vmov	r1, s15
 800ce5e:	4a84      	ldr	r2, [pc, #528]	; (800d070 <HAL_TIM_PeriodElapsedCallback+0x600>)
 800ce60:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				get_speed_r[get_cnt] = speed_r;
 800ce64:	4b7b      	ldr	r3, [pc, #492]	; (800d054 <HAL_TIM_PeriodElapsedCallback+0x5e4>)
 800ce66:	edd3 7a00 	vldr	s15, [r3]
 800ce6a:	4b7f      	ldr	r3, [pc, #508]	; (800d068 <HAL_TIM_PeriodElapsedCallback+0x5f8>)
 800ce6c:	681b      	ldr	r3, [r3, #0]
 800ce6e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ce72:	ee17 1a90 	vmov	r1, s15
 800ce76:	4a7f      	ldr	r2, [pc, #508]	; (800d074 <HAL_TIM_PeriodElapsedCallback+0x604>)
 800ce78:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				get_omega[get_cnt] = gyro_read_z();
 800ce7c:	f7ff fd98 	bl	800c9b0 <gyro_read_z>
 800ce80:	eef0 7a40 	vmov.f32	s15, s0
 800ce84:	4b78      	ldr	r3, [pc, #480]	; (800d068 <HAL_TIM_PeriodElapsedCallback+0x5f8>)
 800ce86:	681b      	ldr	r3, [r3, #0]
 800ce88:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ce8c:	ee17 1a90 	vmov	r1, s15
 800ce90:	4a79      	ldr	r2, [pc, #484]	; (800d078 <HAL_TIM_PeriodElapsedCallback+0x608>)
 800ce92:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				get_cnt++;
 800ce96:	4b74      	ldr	r3, [pc, #464]	; (800d068 <HAL_TIM_PeriodElapsedCallback+0x5f8>)
 800ce98:	681b      	ldr	r3, [r3, #0]
 800ce9a:	3301      	adds	r3, #1
 800ce9c:	4a72      	ldr	r2, [pc, #456]	; (800d068 <HAL_TIM_PeriodElapsedCallback+0x5f8>)
 800ce9e:	6013      	str	r3, [r2, #0]
//		degree_x += accel_read_x() * 0.001;
//		degree_y += accel_read_y() * 0.001;
//		degree_z += accel_read_z() * 0.001;
//		degree_x += gyro_read_x() * 0.001;
//		degree_y += gyro_read_y() * 0.001;
		degree_z += gyro_read_z() * 0.001;
 800cea0:	f7ff fd86 	bl	800c9b0 <gyro_read_z>
 800cea4:	ee10 3a10 	vmov	r3, s0
 800cea8:	4618      	mov	r0, r3
 800ceaa:	f7f3 fb45 	bl	8000538 <__aeabi_f2d>
 800ceae:	a362      	add	r3, pc, #392	; (adr r3, 800d038 <HAL_TIM_PeriodElapsedCallback+0x5c8>)
 800ceb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ceb4:	f7f3 fb98 	bl	80005e8 <__aeabi_dmul>
 800ceb8:	4603      	mov	r3, r0
 800ceba:	460c      	mov	r4, r1
 800cebc:	4625      	mov	r5, r4
 800cebe:	461c      	mov	r4, r3
 800cec0:	4b6e      	ldr	r3, [pc, #440]	; (800d07c <HAL_TIM_PeriodElapsedCallback+0x60c>)
 800cec2:	681b      	ldr	r3, [r3, #0]
 800cec4:	4618      	mov	r0, r3
 800cec6:	f7f3 fb37 	bl	8000538 <__aeabi_f2d>
 800ceca:	4602      	mov	r2, r0
 800cecc:	460b      	mov	r3, r1
 800cece:	4620      	mov	r0, r4
 800ced0:	4629      	mov	r1, r5
 800ced2:	f7f3 f9d3 	bl	800027c <__adddf3>
 800ced6:	4603      	mov	r3, r0
 800ced8:	460c      	mov	r4, r1
 800ceda:	4618      	mov	r0, r3
 800cedc:	4621      	mov	r1, r4
 800cede:	f7f3 fe5b 	bl	8000b98 <__aeabi_d2f>
 800cee2:	4602      	mov	r2, r0
 800cee4:	4b65      	ldr	r3, [pc, #404]	; (800d07c <HAL_TIM_PeriodElapsedCallback+0x60c>)
 800cee6:	601a      	str	r2, [r3, #0]

		//gyro ドリフト量計算
		if(MF2.FLAG.GDRIFT){
 800cee8:	4b5e      	ldr	r3, [pc, #376]	; (800d064 <HAL_TIM_PeriodElapsedCallback+0x5f4>)
 800ceea:	881b      	ldrh	r3, [r3, #0]
 800ceec:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800cef0:	b2db      	uxtb	r3, r3
 800cef2:	2b00      	cmp	r3, #0
 800cef4:	d04d      	beq.n	800cf92 <HAL_TIM_PeriodElapsedCallback+0x522>
			gyro_cnt ++;
 800cef6:	4b62      	ldr	r3, [pc, #392]	; (800d080 <HAL_TIM_PeriodElapsedCallback+0x610>)
 800cef8:	681b      	ldr	r3, [r3, #0]
 800cefa:	3301      	adds	r3, #1
 800cefc:	4a60      	ldr	r2, [pc, #384]	; (800d080 <HAL_TIM_PeriodElapsedCallback+0x610>)
 800cefe:	6013      	str	r3, [r2, #0]
			if(gyro_cnt >= 2)dif_omega_z += old_omega_z - gyro_read_z();
 800cf00:	4b5f      	ldr	r3, [pc, #380]	; (800d080 <HAL_TIM_PeriodElapsedCallback+0x610>)
 800cf02:	681b      	ldr	r3, [r3, #0]
 800cf04:	2b01      	cmp	r3, #1
 800cf06:	dd10      	ble.n	800cf2a <HAL_TIM_PeriodElapsedCallback+0x4ba>
 800cf08:	4b5e      	ldr	r3, [pc, #376]	; (800d084 <HAL_TIM_PeriodElapsedCallback+0x614>)
 800cf0a:	ed93 8a00 	vldr	s16, [r3]
 800cf0e:	f7ff fd4f 	bl	800c9b0 <gyro_read_z>
 800cf12:	eef0 7a40 	vmov.f32	s15, s0
 800cf16:	ee38 7a67 	vsub.f32	s14, s16, s15
 800cf1a:	4b5b      	ldr	r3, [pc, #364]	; (800d088 <HAL_TIM_PeriodElapsedCallback+0x618>)
 800cf1c:	edd3 7a00 	vldr	s15, [r3]
 800cf20:	ee77 7a27 	vadd.f32	s15, s14, s15
 800cf24:	4b58      	ldr	r3, [pc, #352]	; (800d088 <HAL_TIM_PeriodElapsedCallback+0x618>)
 800cf26:	edc3 7a00 	vstr	s15, [r3]
			old_omega_z = gyro_read_z();
 800cf2a:	f7ff fd41 	bl	800c9b0 <gyro_read_z>
 800cf2e:	eef0 7a40 	vmov.f32	s15, s0
 800cf32:	4b54      	ldr	r3, [pc, #336]	; (800d084 <HAL_TIM_PeriodElapsedCallback+0x614>)
 800cf34:	edc3 7a00 	vstr	s15, [r3]
			full_led_write(YELLOW);
 800cf38:	2006      	movs	r0, #6
 800cf3a:	f004 fe61 	bl	8011c00 <full_led_write>
			if(gyro_cnt >= 1001) {
 800cf3e:	4b50      	ldr	r3, [pc, #320]	; (800d080 <HAL_TIM_PeriodElapsedCallback+0x610>)
 800cf40:	681b      	ldr	r3, [r3, #0]
 800cf42:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800cf46:	dd1c      	ble.n	800cf82 <HAL_TIM_PeriodElapsedCallback+0x512>
				MF2.FLAG.GDRIFT = 0;
 800cf48:	4a46      	ldr	r2, [pc, #280]	; (800d064 <HAL_TIM_PeriodElapsedCallback+0x5f4>)
 800cf4a:	8813      	ldrh	r3, [r2, #0]
 800cf4c:	f36f 13c7 	bfc	r3, #7, #1
 800cf50:	8013      	strh	r3, [r2, #0]
				gyro_drift_value = dif_omega_z / gyro_cnt-1;
 800cf52:	4b4d      	ldr	r3, [pc, #308]	; (800d088 <HAL_TIM_PeriodElapsedCallback+0x618>)
 800cf54:	edd3 6a00 	vldr	s13, [r3]
 800cf58:	4b49      	ldr	r3, [pc, #292]	; (800d080 <HAL_TIM_PeriodElapsedCallback+0x610>)
 800cf5a:	681b      	ldr	r3, [r3, #0]
 800cf5c:	ee07 3a90 	vmov	s15, r3
 800cf60:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800cf64:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cf68:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cf6c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800cf70:	4b46      	ldr	r3, [pc, #280]	; (800d08c <HAL_TIM_PeriodElapsedCallback+0x61c>)
 800cf72:	edc3 7a00 	vstr	s15, [r3]
				gyro_cnt = 0;
 800cf76:	4b42      	ldr	r3, [pc, #264]	; (800d080 <HAL_TIM_PeriodElapsedCallback+0x610>)
 800cf78:	2200      	movs	r2, #0
 800cf7a:	601a      	str	r2, [r3, #0]
				full_led_write(BLUEGREEN);
 800cf7c:	2004      	movs	r0, #4
 800cf7e:	f004 fe3f 	bl	8011c00 <full_led_write>
			}
			degree_z = 0;
 800cf82:	4b3e      	ldr	r3, [pc, #248]	; (800d07c <HAL_TIM_PeriodElapsedCallback+0x60c>)
 800cf84:	f04f 0200 	mov.w	r2, #0
 800cf88:	601a      	str	r2, [r3, #0]
			target_degree_z = 0;
 800cf8a:	4b41      	ldr	r3, [pc, #260]	; (800d090 <HAL_TIM_PeriodElapsedCallback+0x620>)
 800cf8c:	f04f 0200 	mov.w	r2, #0
 800cf90:	601a      	str	r2, [r3, #0]
		}


		if(MF2.FLAG.ENKAI){
 800cf92:	4b34      	ldr	r3, [pc, #208]	; (800d064 <HAL_TIM_PeriodElapsedCallback+0x5f4>)
 800cf94:	881b      	ldrh	r3, [r3, #0]
 800cf96:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800cf9a:	b2db      	uxtb	r3, r3
 800cf9c:	2b00      	cmp	r3, #0
 800cf9e:	f000 80d6 	beq.w	800d14e <HAL_TIM_PeriodElapsedCallback+0x6de>
			target_dist = TREAD*M_PI/360*(degree_z-target_degree_z);
 800cfa2:	4b36      	ldr	r3, [pc, #216]	; (800d07c <HAL_TIM_PeriodElapsedCallback+0x60c>)
 800cfa4:	ed93 7a00 	vldr	s14, [r3]
 800cfa8:	4b39      	ldr	r3, [pc, #228]	; (800d090 <HAL_TIM_PeriodElapsedCallback+0x620>)
 800cfaa:	edd3 7a00 	vldr	s15, [r3]
 800cfae:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cfb2:	ee17 0a90 	vmov	r0, s15
 800cfb6:	f7f3 fabf 	bl	8000538 <__aeabi_f2d>
 800cfba:	a321      	add	r3, pc, #132	; (adr r3, 800d040 <HAL_TIM_PeriodElapsedCallback+0x5d0>)
 800cfbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfc0:	f7f3 fb12 	bl	80005e8 <__aeabi_dmul>
 800cfc4:	4603      	mov	r3, r0
 800cfc6:	460c      	mov	r4, r1
 800cfc8:	4618      	mov	r0, r3
 800cfca:	4621      	mov	r1, r4
 800cfcc:	f7f3 fde4 	bl	8000b98 <__aeabi_d2f>
 800cfd0:	4602      	mov	r2, r0
 800cfd2:	4b30      	ldr	r3, [pc, #192]	; (800d094 <HAL_TIM_PeriodElapsedCallback+0x624>)
 800cfd4:	601a      	str	r2, [r3, #0]
			if(target_dist > 0){
 800cfd6:	4b2f      	ldr	r3, [pc, #188]	; (800d094 <HAL_TIM_PeriodElapsedCallback+0x624>)
 800cfd8:	edd3 7a00 	vldr	s15, [r3]
 800cfdc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800cfe0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cfe4:	dd5c      	ble.n	800d0a0 <HAL_TIM_PeriodElapsedCallback+0x630>
				target_speed_l = sqrt(2*accel_l*target_dist);
 800cfe6:	4b2c      	ldr	r3, [pc, #176]	; (800d098 <HAL_TIM_PeriodElapsedCallback+0x628>)
 800cfe8:	edd3 7a00 	vldr	s15, [r3]
 800cfec:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800cff0:	4b28      	ldr	r3, [pc, #160]	; (800d094 <HAL_TIM_PeriodElapsedCallback+0x624>)
 800cff2:	edd3 7a00 	vldr	s15, [r3]
 800cff6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cffa:	ee17 0a90 	vmov	r0, s15
 800cffe:	f7f3 fa9b 	bl	8000538 <__aeabi_f2d>
 800d002:	4603      	mov	r3, r0
 800d004:	460c      	mov	r4, r1
 800d006:	ec44 3b10 	vmov	d0, r3, r4
 800d00a:	f006 fb93 	bl	8013734 <sqrt>
 800d00e:	ec54 3b10 	vmov	r3, r4, d0
 800d012:	4618      	mov	r0, r3
 800d014:	4621      	mov	r1, r4
 800d016:	f7f3 fdbf 	bl	8000b98 <__aeabi_d2f>
 800d01a:	4602      	mov	r2, r0
 800d01c:	4b1f      	ldr	r3, [pc, #124]	; (800d09c <HAL_TIM_PeriodElapsedCallback+0x62c>)
 800d01e:	601a      	str	r2, [r3, #0]
				target_speed_r = -1 * target_speed_l;
 800d020:	4b1e      	ldr	r3, [pc, #120]	; (800d09c <HAL_TIM_PeriodElapsedCallback+0x62c>)
 800d022:	edd3 7a00 	vldr	s15, [r3]
 800d026:	eef1 7a67 	vneg.f32	s15, s15
 800d02a:	4b07      	ldr	r3, [pc, #28]	; (800d048 <HAL_TIM_PeriodElapsedCallback+0x5d8>)
 800d02c:	edc3 7a00 	vstr	s15, [r3]
 800d030:	e063      	b.n	800d0fa <HAL_TIM_PeriodElapsedCallback+0x68a>
 800d032:	bf00      	nop
 800d034:	f3af 8000 	nop.w
 800d038:	d2f1a9fc 	.word	0xd2f1a9fc
 800d03c:	3f50624d 	.word	0x3f50624d
 800d040:	d7653223 	.word	0xd7653223
 800d044:	3fe26e40 	.word	0x3fe26e40
 800d048:	200001a0 	.word	0x200001a0
 800d04c:	20000f6c 	.word	0x20000f6c
 800d050:	200001a4 	.word	0x200001a4
 800d054:	200002bc 	.word	0x200002bc
 800d058:	20000c08 	.word	0x20000c08
 800d05c:	20000780 	.word	0x20000780
 800d060:	20000108 	.word	0x20000108
 800d064:	20000f64 	.word	0x20000f64
 800d068:	20000110 	.word	0x20000110
 800d06c:	20000af0 	.word	0x20000af0
 800d070:	20000784 	.word	0x20000784
 800d074:	2000045c 	.word	0x2000045c
 800d078:	200012a4 	.word	0x200012a4
 800d07c:	20000b5c 	.word	0x20000b5c
 800d080:	2000010c 	.word	0x2000010c
 800d084:	200015cc 	.word	0x200015cc
 800d088:	20000ba4 	.word	0x20000ba4
 800d08c:	20000bf4 	.word	0x20000bf4
 800d090:	20000bf8 	.word	0x20000bf8
 800d094:	20000f78 	.word	0x20000f78
 800d098:	20000d58 	.word	0x20000d58
 800d09c:	20000bfc 	.word	0x20000bfc
			}else{
				target_speed_l = sqrt(2*accel_l*target_dist*-1)*-1;
 800d0a0:	4bac      	ldr	r3, [pc, #688]	; (800d354 <HAL_TIM_PeriodElapsedCallback+0x8e4>)
 800d0a2:	edd3 7a00 	vldr	s15, [r3]
 800d0a6:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800d0aa:	4bab      	ldr	r3, [pc, #684]	; (800d358 <HAL_TIM_PeriodElapsedCallback+0x8e8>)
 800d0ac:	edd3 7a00 	vldr	s15, [r3]
 800d0b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d0b4:	eef1 7a67 	vneg.f32	s15, s15
 800d0b8:	ee17 3a90 	vmov	r3, s15
 800d0bc:	4618      	mov	r0, r3
 800d0be:	f7f3 fa3b 	bl	8000538 <__aeabi_f2d>
 800d0c2:	4603      	mov	r3, r0
 800d0c4:	460c      	mov	r4, r1
 800d0c6:	ec44 3b10 	vmov	d0, r3, r4
 800d0ca:	f006 fb33 	bl	8013734 <sqrt>
 800d0ce:	ec54 3b10 	vmov	r3, r4, d0
 800d0d2:	4618      	mov	r0, r3
 800d0d4:	4621      	mov	r1, r4
 800d0d6:	f7f3 fd5f 	bl	8000b98 <__aeabi_d2f>
 800d0da:	4603      	mov	r3, r0
 800d0dc:	ee07 3a90 	vmov	s15, r3
 800d0e0:	eef1 7a67 	vneg.f32	s15, s15
 800d0e4:	4b9d      	ldr	r3, [pc, #628]	; (800d35c <HAL_TIM_PeriodElapsedCallback+0x8ec>)
 800d0e6:	edc3 7a00 	vstr	s15, [r3]
				target_speed_r = -1 * target_speed_l;
 800d0ea:	4b9c      	ldr	r3, [pc, #624]	; (800d35c <HAL_TIM_PeriodElapsedCallback+0x8ec>)
 800d0ec:	edd3 7a00 	vldr	s15, [r3]
 800d0f0:	eef1 7a67 	vneg.f32	s15, s15
 800d0f4:	4b9a      	ldr	r3, [pc, #616]	; (800d360 <HAL_TIM_PeriodElapsedCallback+0x8f0>)
 800d0f6:	edc3 7a00 	vstr	s15, [r3]
			}

			epsilon_l = target_speed_l - speed_l;
 800d0fa:	4b98      	ldr	r3, [pc, #608]	; (800d35c <HAL_TIM_PeriodElapsedCallback+0x8ec>)
 800d0fc:	ed93 7a00 	vldr	s14, [r3]
 800d100:	4b98      	ldr	r3, [pc, #608]	; (800d364 <HAL_TIM_PeriodElapsedCallback+0x8f4>)
 800d102:	edd3 7a00 	vldr	s15, [r3]
 800d106:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d10a:	4b97      	ldr	r3, [pc, #604]	; (800d368 <HAL_TIM_PeriodElapsedCallback+0x8f8>)
 800d10c:	edc3 7a00 	vstr	s15, [r3]
			pulse_l = Kp * epsilon_l;
 800d110:	4b95      	ldr	r3, [pc, #596]	; (800d368 <HAL_TIM_PeriodElapsedCallback+0x8f8>)
 800d112:	edd3 7a00 	vldr	s15, [r3]
 800d116:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800d11a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d11e:	4b93      	ldr	r3, [pc, #588]	; (800d36c <HAL_TIM_PeriodElapsedCallback+0x8fc>)
 800d120:	edc3 7a00 	vstr	s15, [r3]
			epsilon_r = target_speed_r - speed_r;
 800d124:	4b8e      	ldr	r3, [pc, #568]	; (800d360 <HAL_TIM_PeriodElapsedCallback+0x8f0>)
 800d126:	ed93 7a00 	vldr	s14, [r3]
 800d12a:	4b91      	ldr	r3, [pc, #580]	; (800d370 <HAL_TIM_PeriodElapsedCallback+0x900>)
 800d12c:	edd3 7a00 	vldr	s15, [r3]
 800d130:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d134:	4b8f      	ldr	r3, [pc, #572]	; (800d374 <HAL_TIM_PeriodElapsedCallback+0x904>)
 800d136:	edc3 7a00 	vstr	s15, [r3]
			pulse_r = Kp * epsilon_r;
 800d13a:	4b8e      	ldr	r3, [pc, #568]	; (800d374 <HAL_TIM_PeriodElapsedCallback+0x904>)
 800d13c:	edd3 7a00 	vldr	s15, [r3]
 800d140:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800d144:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d148:	4b8b      	ldr	r3, [pc, #556]	; (800d378 <HAL_TIM_PeriodElapsedCallback+0x908>)
 800d14a:	edc3 7a00 	vstr	s15, [r3]
		}


		if(MF.FLAG.FWALL){
 800d14e:	4b8b      	ldr	r3, [pc, #556]	; (800d37c <HAL_TIM_PeriodElapsedCallback+0x90c>)
 800d150:	881b      	ldrh	r3, [r3, #0]
 800d152:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800d156:	b2db      	uxtb	r3, r3
 800d158:	2b00      	cmp	r3, #0
 800d15a:	f000 8124 	beq.w	800d3a6 <HAL_TIM_PeriodElapsedCallback+0x936>
			target_speed_l = (int16_t)(OFFSET_FWALL_L - ad_fl)*0.5;//0.75;
 800d15e:	4b88      	ldr	r3, [pc, #544]	; (800d380 <HAL_TIM_PeriodElapsedCallback+0x910>)
 800d160:	681b      	ldr	r3, [r3, #0]
 800d162:	b29b      	uxth	r3, r3
 800d164:	f5c3 63bb 	rsb	r3, r3, #1496	; 0x5d8
 800d168:	3304      	adds	r3, #4
 800d16a:	b29b      	uxth	r3, r3
 800d16c:	b21b      	sxth	r3, r3
 800d16e:	4618      	mov	r0, r3
 800d170:	f7f3 f9d0 	bl	8000514 <__aeabi_i2d>
 800d174:	f04f 0200 	mov.w	r2, #0
 800d178:	4b82      	ldr	r3, [pc, #520]	; (800d384 <HAL_TIM_PeriodElapsedCallback+0x914>)
 800d17a:	f7f3 fa35 	bl	80005e8 <__aeabi_dmul>
 800d17e:	4603      	mov	r3, r0
 800d180:	460c      	mov	r4, r1
 800d182:	4618      	mov	r0, r3
 800d184:	4621      	mov	r1, r4
 800d186:	f7f3 fd07 	bl	8000b98 <__aeabi_d2f>
 800d18a:	4602      	mov	r2, r0
 800d18c:	4b73      	ldr	r3, [pc, #460]	; (800d35c <HAL_TIM_PeriodElapsedCallback+0x8ec>)
 800d18e:	601a      	str	r2, [r3, #0]
			target_speed_r = (int16_t)(OFFSET_FWALL_R - ad_fr);//*1.5;
 800d190:	4b7d      	ldr	r3, [pc, #500]	; (800d388 <HAL_TIM_PeriodElapsedCallback+0x918>)
 800d192:	681b      	ldr	r3, [r3, #0]
 800d194:	b29b      	uxth	r3, r3
 800d196:	f5c3 7361 	rsb	r3, r3, #900	; 0x384
 800d19a:	b29b      	uxth	r3, r3
 800d19c:	b21b      	sxth	r3, r3
 800d19e:	ee07 3a90 	vmov	s15, r3
 800d1a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d1a6:	4b6e      	ldr	r3, [pc, #440]	; (800d360 <HAL_TIM_PeriodElapsedCallback+0x8f0>)
 800d1a8:	edc3 7a00 	vstr	s15, [r3]

			if(target_speed_l*target_speed_l < 2500)target_speed_l = 0;
 800d1ac:	4b6b      	ldr	r3, [pc, #428]	; (800d35c <HAL_TIM_PeriodElapsedCallback+0x8ec>)
 800d1ae:	ed93 7a00 	vldr	s14, [r3]
 800d1b2:	4b6a      	ldr	r3, [pc, #424]	; (800d35c <HAL_TIM_PeriodElapsedCallback+0x8ec>)
 800d1b4:	edd3 7a00 	vldr	s15, [r3]
 800d1b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d1bc:	ed9f 7a73 	vldr	s14, [pc, #460]	; 800d38c <HAL_TIM_PeriodElapsedCallback+0x91c>
 800d1c0:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d1c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d1c8:	d503      	bpl.n	800d1d2 <HAL_TIM_PeriodElapsedCallback+0x762>
 800d1ca:	4b64      	ldr	r3, [pc, #400]	; (800d35c <HAL_TIM_PeriodElapsedCallback+0x8ec>)
 800d1cc:	f04f 0200 	mov.w	r2, #0
 800d1d0:	601a      	str	r2, [r3, #0]
			if(target_speed_r*target_speed_r < 2500)target_speed_r = 0;
 800d1d2:	4b63      	ldr	r3, [pc, #396]	; (800d360 <HAL_TIM_PeriodElapsedCallback+0x8f0>)
 800d1d4:	ed93 7a00 	vldr	s14, [r3]
 800d1d8:	4b61      	ldr	r3, [pc, #388]	; (800d360 <HAL_TIM_PeriodElapsedCallback+0x8f0>)
 800d1da:	edd3 7a00 	vldr	s15, [r3]
 800d1de:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d1e2:	ed9f 7a6a 	vldr	s14, [pc, #424]	; 800d38c <HAL_TIM_PeriodElapsedCallback+0x91c>
 800d1e6:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d1ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d1ee:	d503      	bpl.n	800d1f8 <HAL_TIM_PeriodElapsedCallback+0x788>
 800d1f0:	4b5b      	ldr	r3, [pc, #364]	; (800d360 <HAL_TIM_PeriodElapsedCallback+0x8f0>)
 800d1f2:	f04f 0200 	mov.w	r2, #0
 800d1f6:	601a      	str	r2, [r3, #0]
			if(target_speed_l == 0 && target_speed_r == 0){
 800d1f8:	4b58      	ldr	r3, [pc, #352]	; (800d35c <HAL_TIM_PeriodElapsedCallback+0x8ec>)
 800d1fa:	edd3 7a00 	vldr	s15, [r3]
 800d1fe:	eef5 7a40 	vcmp.f32	s15, #0.0
 800d202:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d206:	d111      	bne.n	800d22c <HAL_TIM_PeriodElapsedCallback+0x7bc>
 800d208:	4b55      	ldr	r3, [pc, #340]	; (800d360 <HAL_TIM_PeriodElapsedCallback+0x8f0>)
 800d20a:	edd3 7a00 	vldr	s15, [r3]
 800d20e:	eef5 7a40 	vcmp.f32	s15, #0.0
 800d212:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d216:	d109      	bne.n	800d22c <HAL_TIM_PeriodElapsedCallback+0x7bc>
				MF.FLAG.FWALL = 0;
 800d218:	4a58      	ldr	r2, [pc, #352]	; (800d37c <HAL_TIM_PeriodElapsedCallback+0x90c>)
 800d21a:	8813      	ldrh	r3, [r2, #0]
 800d21c:	f36f 13c7 	bfc	r3, #7, #1
 800d220:	8013      	strh	r3, [r2, #0]
				MF.FLAG.DRV = 0;
 800d222:	4a56      	ldr	r2, [pc, #344]	; (800d37c <HAL_TIM_PeriodElapsedCallback+0x90c>)
 800d224:	8813      	ldrh	r3, [r2, #0]
 800d226:	f36f 0341 	bfc	r3, #1, #1
 800d22a:	8013      	strh	r3, [r2, #0]
			}

			epsilon_l = target_speed_l - speed_l;
 800d22c:	4b4b      	ldr	r3, [pc, #300]	; (800d35c <HAL_TIM_PeriodElapsedCallback+0x8ec>)
 800d22e:	ed93 7a00 	vldr	s14, [r3]
 800d232:	4b4c      	ldr	r3, [pc, #304]	; (800d364 <HAL_TIM_PeriodElapsedCallback+0x8f4>)
 800d234:	edd3 7a00 	vldr	s15, [r3]
 800d238:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d23c:	4b4a      	ldr	r3, [pc, #296]	; (800d368 <HAL_TIM_PeriodElapsedCallback+0x8f8>)
 800d23e:	edc3 7a00 	vstr	s15, [r3]
			pulse_l = Kp * epsilon_l;
 800d242:	4b49      	ldr	r3, [pc, #292]	; (800d368 <HAL_TIM_PeriodElapsedCallback+0x8f8>)
 800d244:	edd3 7a00 	vldr	s15, [r3]
 800d248:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800d24c:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d250:	4b46      	ldr	r3, [pc, #280]	; (800d36c <HAL_TIM_PeriodElapsedCallback+0x8fc>)
 800d252:	edc3 7a00 	vstr	s15, [r3]
			epsilon_r = target_speed_r - speed_r;
 800d256:	4b42      	ldr	r3, [pc, #264]	; (800d360 <HAL_TIM_PeriodElapsedCallback+0x8f0>)
 800d258:	ed93 7a00 	vldr	s14, [r3]
 800d25c:	4b44      	ldr	r3, [pc, #272]	; (800d370 <HAL_TIM_PeriodElapsedCallback+0x900>)
 800d25e:	edd3 7a00 	vldr	s15, [r3]
 800d262:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d266:	4b43      	ldr	r3, [pc, #268]	; (800d374 <HAL_TIM_PeriodElapsedCallback+0x904>)
 800d268:	edc3 7a00 	vstr	s15, [r3]
			pulse_r = Kp * epsilon_r;
 800d26c:	4b41      	ldr	r3, [pc, #260]	; (800d374 <HAL_TIM_PeriodElapsedCallback+0x904>)
 800d26e:	edd3 7a00 	vldr	s15, [r3]
 800d272:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800d276:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d27a:	4b3f      	ldr	r3, [pc, #252]	; (800d378 <HAL_TIM_PeriodElapsedCallback+0x908>)
 800d27c:	edc3 7a00 	vstr	s15, [r3]

			pulse_l = min(max(pulse_l, -100), 100);
 800d280:	4b3a      	ldr	r3, [pc, #232]	; (800d36c <HAL_TIM_PeriodElapsedCallback+0x8fc>)
 800d282:	edd3 7a00 	vldr	s15, [r3]
 800d286:	ed9f 7a42 	vldr	s14, [pc, #264]	; 800d390 <HAL_TIM_PeriodElapsedCallback+0x920>
 800d28a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d28e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d292:	bfcc      	ite	gt
 800d294:	2301      	movgt	r3, #1
 800d296:	2300      	movle	r3, #0
 800d298:	b2db      	uxtb	r3, r3
 800d29a:	f083 0301 	eor.w	r3, r3, #1
 800d29e:	b2db      	uxtb	r3, r3
 800d2a0:	2b00      	cmp	r3, #0
 800d2a2:	d111      	bne.n	800d2c8 <HAL_TIM_PeriodElapsedCallback+0x858>
 800d2a4:	4b31      	ldr	r3, [pc, #196]	; (800d36c <HAL_TIM_PeriodElapsedCallback+0x8fc>)
 800d2a6:	edd3 7a00 	vldr	s15, [r3]
 800d2aa:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 800d394 <HAL_TIM_PeriodElapsedCallback+0x924>
 800d2ae:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d2b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d2b6:	bfcc      	ite	gt
 800d2b8:	2301      	movgt	r3, #1
 800d2ba:	2300      	movle	r3, #0
 800d2bc:	b2db      	uxtb	r3, r3
 800d2be:	f083 0301 	eor.w	r3, r3, #1
 800d2c2:	b2db      	uxtb	r3, r3
 800d2c4:	2b00      	cmp	r3, #0
 800d2c6:	d00e      	beq.n	800d2e6 <HAL_TIM_PeriodElapsedCallback+0x876>
 800d2c8:	4b28      	ldr	r3, [pc, #160]	; (800d36c <HAL_TIM_PeriodElapsedCallback+0x8fc>)
 800d2ca:	edd3 7a00 	vldr	s15, [r3]
 800d2ce:	ed9f 7a30 	vldr	s14, [pc, #192]	; 800d390 <HAL_TIM_PeriodElapsedCallback+0x920>
 800d2d2:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d2d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d2da:	dd02      	ble.n	800d2e2 <HAL_TIM_PeriodElapsedCallback+0x872>
 800d2dc:	4b23      	ldr	r3, [pc, #140]	; (800d36c <HAL_TIM_PeriodElapsedCallback+0x8fc>)
 800d2de:	681b      	ldr	r3, [r3, #0]
 800d2e0:	e002      	b.n	800d2e8 <HAL_TIM_PeriodElapsedCallback+0x878>
 800d2e2:	4b2d      	ldr	r3, [pc, #180]	; (800d398 <HAL_TIM_PeriodElapsedCallback+0x928>)
 800d2e4:	e000      	b.n	800d2e8 <HAL_TIM_PeriodElapsedCallback+0x878>
 800d2e6:	4b2d      	ldr	r3, [pc, #180]	; (800d39c <HAL_TIM_PeriodElapsedCallback+0x92c>)
 800d2e8:	4a20      	ldr	r2, [pc, #128]	; (800d36c <HAL_TIM_PeriodElapsedCallback+0x8fc>)
 800d2ea:	6013      	str	r3, [r2, #0]
			pulse_r = min(max(pulse_r, -100), 100);
 800d2ec:	4b22      	ldr	r3, [pc, #136]	; (800d378 <HAL_TIM_PeriodElapsedCallback+0x908>)
 800d2ee:	edd3 7a00 	vldr	s15, [r3]
 800d2f2:	ed9f 7a27 	vldr	s14, [pc, #156]	; 800d390 <HAL_TIM_PeriodElapsedCallback+0x920>
 800d2f6:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d2fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d2fe:	bfcc      	ite	gt
 800d300:	2301      	movgt	r3, #1
 800d302:	2300      	movle	r3, #0
 800d304:	b2db      	uxtb	r3, r3
 800d306:	f083 0301 	eor.w	r3, r3, #1
 800d30a:	b2db      	uxtb	r3, r3
 800d30c:	2b00      	cmp	r3, #0
 800d30e:	d111      	bne.n	800d334 <HAL_TIM_PeriodElapsedCallback+0x8c4>
 800d310:	4b19      	ldr	r3, [pc, #100]	; (800d378 <HAL_TIM_PeriodElapsedCallback+0x908>)
 800d312:	edd3 7a00 	vldr	s15, [r3]
 800d316:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 800d394 <HAL_TIM_PeriodElapsedCallback+0x924>
 800d31a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d31e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d322:	bfcc      	ite	gt
 800d324:	2301      	movgt	r3, #1
 800d326:	2300      	movle	r3, #0
 800d328:	b2db      	uxtb	r3, r3
 800d32a:	f083 0301 	eor.w	r3, r3, #1
 800d32e:	b2db      	uxtb	r3, r3
 800d330:	2b00      	cmp	r3, #0
 800d332:	d035      	beq.n	800d3a0 <HAL_TIM_PeriodElapsedCallback+0x930>
 800d334:	4b10      	ldr	r3, [pc, #64]	; (800d378 <HAL_TIM_PeriodElapsedCallback+0x908>)
 800d336:	edd3 7a00 	vldr	s15, [r3]
 800d33a:	ed9f 7a15 	vldr	s14, [pc, #84]	; 800d390 <HAL_TIM_PeriodElapsedCallback+0x920>
 800d33e:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d342:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d346:	dd02      	ble.n	800d34e <HAL_TIM_PeriodElapsedCallback+0x8de>
 800d348:	4b0b      	ldr	r3, [pc, #44]	; (800d378 <HAL_TIM_PeriodElapsedCallback+0x908>)
 800d34a:	681b      	ldr	r3, [r3, #0]
 800d34c:	e029      	b.n	800d3a2 <HAL_TIM_PeriodElapsedCallback+0x932>
 800d34e:	4b12      	ldr	r3, [pc, #72]	; (800d398 <HAL_TIM_PeriodElapsedCallback+0x928>)
 800d350:	e027      	b.n	800d3a2 <HAL_TIM_PeriodElapsedCallback+0x932>
 800d352:	bf00      	nop
 800d354:	20000d58 	.word	0x20000d58
 800d358:	20000f78 	.word	0x20000f78
 800d35c:	20000bfc 	.word	0x20000bfc
 800d360:	200001a0 	.word	0x200001a0
 800d364:	20000af0 	.word	0x20000af0
 800d368:	20000b60 	.word	0x20000b60
 800d36c:	20000ba8 	.word	0x20000ba8
 800d370:	200002bc 	.word	0x200002bc
 800d374:	20000c08 	.word	0x20000c08
 800d378:	20000780 	.word	0x20000780
 800d37c:	20000f68 	.word	0x20000f68
 800d380:	20000d54 	.word	0x20000d54
 800d384:	3fe00000 	.word	0x3fe00000
 800d388:	20000c00 	.word	0x20000c00
 800d38c:	451c4000 	.word	0x451c4000
 800d390:	c2c80000 	.word	0xc2c80000
 800d394:	42c80000 	.word	0x42c80000
 800d398:	c2c80000 	.word	0xc2c80000
 800d39c:	42c80000 	.word	0x42c80000
 800d3a0:	4bbf      	ldr	r3, [pc, #764]	; (800d6a0 <HAL_TIM_PeriodElapsedCallback+0xc30>)
 800d3a2:	4ac0      	ldr	r2, [pc, #768]	; (800d6a4 <HAL_TIM_PeriodElapsedCallback+0xc34>)
 800d3a4:	6013      	str	r3, [r2, #0]
		}


		if(MF.FLAG.GYRO){
 800d3a6:	4bc0      	ldr	r3, [pc, #768]	; (800d6a8 <HAL_TIM_PeriodElapsedCallback+0xc38>)
 800d3a8:	881b      	ldrh	r3, [r3, #0]
 800d3aa:	f3c3 2300 	ubfx	r3, r3, #8, #1
 800d3ae:	b2db      	uxtb	r3, r3
 800d3b0:	2b00      	cmp	r3, #0
 800d3b2:	f000 810b 	beq.w	800d5cc <HAL_TIM_PeriodElapsedCallback+0xb5c>
			target_omega_z += target_degaccel_z * 0.001;
 800d3b6:	4bbd      	ldr	r3, [pc, #756]	; (800d6ac <HAL_TIM_PeriodElapsedCallback+0xc3c>)
 800d3b8:	681b      	ldr	r3, [r3, #0]
 800d3ba:	4618      	mov	r0, r3
 800d3bc:	f7f3 f8bc 	bl	8000538 <__aeabi_f2d>
 800d3c0:	a3b3      	add	r3, pc, #716	; (adr r3, 800d690 <HAL_TIM_PeriodElapsedCallback+0xc20>)
 800d3c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3c6:	f7f3 f90f 	bl	80005e8 <__aeabi_dmul>
 800d3ca:	4603      	mov	r3, r0
 800d3cc:	460c      	mov	r4, r1
 800d3ce:	4625      	mov	r5, r4
 800d3d0:	461c      	mov	r4, r3
 800d3d2:	4bb7      	ldr	r3, [pc, #732]	; (800d6b0 <HAL_TIM_PeriodElapsedCallback+0xc40>)
 800d3d4:	681b      	ldr	r3, [r3, #0]
 800d3d6:	4618      	mov	r0, r3
 800d3d8:	f7f3 f8ae 	bl	8000538 <__aeabi_f2d>
 800d3dc:	4602      	mov	r2, r0
 800d3de:	460b      	mov	r3, r1
 800d3e0:	4620      	mov	r0, r4
 800d3e2:	4629      	mov	r1, r5
 800d3e4:	f7f2 ff4a 	bl	800027c <__adddf3>
 800d3e8:	4603      	mov	r3, r0
 800d3ea:	460c      	mov	r4, r1
 800d3ec:	4618      	mov	r0, r3
 800d3ee:	4621      	mov	r1, r4
 800d3f0:	f7f3 fbd2 	bl	8000b98 <__aeabi_d2f>
 800d3f4:	4602      	mov	r2, r0
 800d3f6:	4bae      	ldr	r3, [pc, #696]	; (800d6b0 <HAL_TIM_PeriodElapsedCallback+0xc40>)
 800d3f8:	601a      	str	r2, [r3, #0]
			target_omega_z = max(min(target_omega_z, omega_max), omega_min);
 800d3fa:	4bad      	ldr	r3, [pc, #692]	; (800d6b0 <HAL_TIM_PeriodElapsedCallback+0xc40>)
 800d3fc:	ed93 7a00 	vldr	s14, [r3]
 800d400:	4bac      	ldr	r3, [pc, #688]	; (800d6b4 <HAL_TIM_PeriodElapsedCallback+0xc44>)
 800d402:	edd3 7a00 	vldr	s15, [r3]
 800d406:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800d40a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d40e:	dd03      	ble.n	800d418 <HAL_TIM_PeriodElapsedCallback+0x9a8>
 800d410:	4ba8      	ldr	r3, [pc, #672]	; (800d6b4 <HAL_TIM_PeriodElapsedCallback+0xc44>)
 800d412:	edd3 7a00 	vldr	s15, [r3]
 800d416:	e002      	b.n	800d41e <HAL_TIM_PeriodElapsedCallback+0x9ae>
 800d418:	4ba5      	ldr	r3, [pc, #660]	; (800d6b0 <HAL_TIM_PeriodElapsedCallback+0xc40>)
 800d41a:	edd3 7a00 	vldr	s15, [r3]
 800d41e:	4ba6      	ldr	r3, [pc, #664]	; (800d6b8 <HAL_TIM_PeriodElapsedCallback+0xc48>)
 800d420:	ed93 7a00 	vldr	s14, [r3]
 800d424:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d428:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d42c:	dd10      	ble.n	800d450 <HAL_TIM_PeriodElapsedCallback+0x9e0>
 800d42e:	4ba0      	ldr	r3, [pc, #640]	; (800d6b0 <HAL_TIM_PeriodElapsedCallback+0xc40>)
 800d430:	ed93 7a00 	vldr	s14, [r3]
 800d434:	4b9f      	ldr	r3, [pc, #636]	; (800d6b4 <HAL_TIM_PeriodElapsedCallback+0xc44>)
 800d436:	edd3 7a00 	vldr	s15, [r3]
 800d43a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800d43e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d442:	dd02      	ble.n	800d44a <HAL_TIM_PeriodElapsedCallback+0x9da>
 800d444:	4b9b      	ldr	r3, [pc, #620]	; (800d6b4 <HAL_TIM_PeriodElapsedCallback+0xc44>)
 800d446:	681b      	ldr	r3, [r3, #0]
 800d448:	e004      	b.n	800d454 <HAL_TIM_PeriodElapsedCallback+0x9e4>
 800d44a:	4b99      	ldr	r3, [pc, #612]	; (800d6b0 <HAL_TIM_PeriodElapsedCallback+0xc40>)
 800d44c:	681b      	ldr	r3, [r3, #0]
 800d44e:	e001      	b.n	800d454 <HAL_TIM_PeriodElapsedCallback+0x9e4>
 800d450:	4b99      	ldr	r3, [pc, #612]	; (800d6b8 <HAL_TIM_PeriodElapsedCallback+0xc48>)
 800d452:	681b      	ldr	r3, [r3, #0]
 800d454:	4a96      	ldr	r2, [pc, #600]	; (800d6b0 <HAL_TIM_PeriodElapsedCallback+0xc40>)
 800d456:	6013      	str	r3, [r2, #0]

			epsilon_omega = target_omega_z - gyro_read_z();
 800d458:	4b95      	ldr	r3, [pc, #596]	; (800d6b0 <HAL_TIM_PeriodElapsedCallback+0xc40>)
 800d45a:	ed93 8a00 	vldr	s16, [r3]
 800d45e:	f7ff faa7 	bl	800c9b0 <gyro_read_z>
 800d462:	eef0 7a40 	vmov.f32	s15, s0
 800d466:	ee78 7a67 	vsub.f32	s15, s16, s15
 800d46a:	4b94      	ldr	r3, [pc, #592]	; (800d6bc <HAL_TIM_PeriodElapsedCallback+0xc4c>)
 800d46c:	edc3 7a00 	vstr	s15, [r3]

			target_speed_l = speed_G - (target_omega_z + Kp_o*epsilon_omega)/180*M_PI*TREAD/2;
 800d470:	4b93      	ldr	r3, [pc, #588]	; (800d6c0 <HAL_TIM_PeriodElapsedCallback+0xc50>)
 800d472:	681b      	ldr	r3, [r3, #0]
 800d474:	4618      	mov	r0, r3
 800d476:	f7f3 f85f 	bl	8000538 <__aeabi_f2d>
 800d47a:	4604      	mov	r4, r0
 800d47c:	460d      	mov	r5, r1
 800d47e:	4b8f      	ldr	r3, [pc, #572]	; (800d6bc <HAL_TIM_PeriodElapsedCallback+0xc4c>)
 800d480:	edd3 7a00 	vldr	s15, [r3]
 800d484:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800d488:	ee27 7a87 	vmul.f32	s14, s15, s14
 800d48c:	4b88      	ldr	r3, [pc, #544]	; (800d6b0 <HAL_TIM_PeriodElapsedCallback+0xc40>)
 800d48e:	edd3 7a00 	vldr	s15, [r3]
 800d492:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d496:	ed9f 7a8b 	vldr	s14, [pc, #556]	; 800d6c4 <HAL_TIM_PeriodElapsedCallback+0xc54>
 800d49a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800d49e:	ee16 0a90 	vmov	r0, s13
 800d4a2:	f7f3 f849 	bl	8000538 <__aeabi_f2d>
 800d4a6:	a37c      	add	r3, pc, #496	; (adr r3, 800d698 <HAL_TIM_PeriodElapsedCallback+0xc28>)
 800d4a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4ac:	f7f3 f89c 	bl	80005e8 <__aeabi_dmul>
 800d4b0:	4602      	mov	r2, r0
 800d4b2:	460b      	mov	r3, r1
 800d4b4:	4610      	mov	r0, r2
 800d4b6:	4619      	mov	r1, r3
 800d4b8:	f04f 0200 	mov.w	r2, #0
 800d4bc:	4b82      	ldr	r3, [pc, #520]	; (800d6c8 <HAL_TIM_PeriodElapsedCallback+0xc58>)
 800d4be:	f7f3 f893 	bl	80005e8 <__aeabi_dmul>
 800d4c2:	4602      	mov	r2, r0
 800d4c4:	460b      	mov	r3, r1
 800d4c6:	4610      	mov	r0, r2
 800d4c8:	4619      	mov	r1, r3
 800d4ca:	f04f 0200 	mov.w	r2, #0
 800d4ce:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800d4d2:	f7f3 f9b3 	bl	800083c <__aeabi_ddiv>
 800d4d6:	4602      	mov	r2, r0
 800d4d8:	460b      	mov	r3, r1
 800d4da:	4620      	mov	r0, r4
 800d4dc:	4629      	mov	r1, r5
 800d4de:	f7f2 fecb 	bl	8000278 <__aeabi_dsub>
 800d4e2:	4603      	mov	r3, r0
 800d4e4:	460c      	mov	r4, r1
 800d4e6:	4618      	mov	r0, r3
 800d4e8:	4621      	mov	r1, r4
 800d4ea:	f7f3 fb55 	bl	8000b98 <__aeabi_d2f>
 800d4ee:	4602      	mov	r2, r0
 800d4f0:	4b76      	ldr	r3, [pc, #472]	; (800d6cc <HAL_TIM_PeriodElapsedCallback+0xc5c>)
 800d4f2:	601a      	str	r2, [r3, #0]
			target_speed_r = speed_G + (target_omega_z + Kp_o*epsilon_omega)/180*M_PI*TREAD/2;
 800d4f4:	4b72      	ldr	r3, [pc, #456]	; (800d6c0 <HAL_TIM_PeriodElapsedCallback+0xc50>)
 800d4f6:	681b      	ldr	r3, [r3, #0]
 800d4f8:	4618      	mov	r0, r3
 800d4fa:	f7f3 f81d 	bl	8000538 <__aeabi_f2d>
 800d4fe:	4604      	mov	r4, r0
 800d500:	460d      	mov	r5, r1
 800d502:	4b6e      	ldr	r3, [pc, #440]	; (800d6bc <HAL_TIM_PeriodElapsedCallback+0xc4c>)
 800d504:	edd3 7a00 	vldr	s15, [r3]
 800d508:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800d50c:	ee27 7a87 	vmul.f32	s14, s15, s14
 800d510:	4b67      	ldr	r3, [pc, #412]	; (800d6b0 <HAL_TIM_PeriodElapsedCallback+0xc40>)
 800d512:	edd3 7a00 	vldr	s15, [r3]
 800d516:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d51a:	ed9f 7a6a 	vldr	s14, [pc, #424]	; 800d6c4 <HAL_TIM_PeriodElapsedCallback+0xc54>
 800d51e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800d522:	ee16 0a90 	vmov	r0, s13
 800d526:	f7f3 f807 	bl	8000538 <__aeabi_f2d>
 800d52a:	a35b      	add	r3, pc, #364	; (adr r3, 800d698 <HAL_TIM_PeriodElapsedCallback+0xc28>)
 800d52c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d530:	f7f3 f85a 	bl	80005e8 <__aeabi_dmul>
 800d534:	4602      	mov	r2, r0
 800d536:	460b      	mov	r3, r1
 800d538:	4610      	mov	r0, r2
 800d53a:	4619      	mov	r1, r3
 800d53c:	f04f 0200 	mov.w	r2, #0
 800d540:	4b61      	ldr	r3, [pc, #388]	; (800d6c8 <HAL_TIM_PeriodElapsedCallback+0xc58>)
 800d542:	f7f3 f851 	bl	80005e8 <__aeabi_dmul>
 800d546:	4602      	mov	r2, r0
 800d548:	460b      	mov	r3, r1
 800d54a:	4610      	mov	r0, r2
 800d54c:	4619      	mov	r1, r3
 800d54e:	f04f 0200 	mov.w	r2, #0
 800d552:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800d556:	f7f3 f971 	bl	800083c <__aeabi_ddiv>
 800d55a:	4602      	mov	r2, r0
 800d55c:	460b      	mov	r3, r1
 800d55e:	4620      	mov	r0, r4
 800d560:	4629      	mov	r1, r5
 800d562:	f7f2 fe8b 	bl	800027c <__adddf3>
 800d566:	4603      	mov	r3, r0
 800d568:	460c      	mov	r4, r1
 800d56a:	4618      	mov	r0, r3
 800d56c:	4621      	mov	r1, r4
 800d56e:	f7f3 fb13 	bl	8000b98 <__aeabi_d2f>
 800d572:	4602      	mov	r2, r0
 800d574:	4b56      	ldr	r3, [pc, #344]	; (800d6d0 <HAL_TIM_PeriodElapsedCallback+0xc60>)
 800d576:	601a      	str	r2, [r3, #0]

			epsilon_l = target_speed_l - speed_l;
 800d578:	4b54      	ldr	r3, [pc, #336]	; (800d6cc <HAL_TIM_PeriodElapsedCallback+0xc5c>)
 800d57a:	ed93 7a00 	vldr	s14, [r3]
 800d57e:	4b55      	ldr	r3, [pc, #340]	; (800d6d4 <HAL_TIM_PeriodElapsedCallback+0xc64>)
 800d580:	edd3 7a00 	vldr	s15, [r3]
 800d584:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d588:	4b53      	ldr	r3, [pc, #332]	; (800d6d8 <HAL_TIM_PeriodElapsedCallback+0xc68>)
 800d58a:	edc3 7a00 	vstr	s15, [r3]
			pulse_l = Kp * epsilon_l;
 800d58e:	4b52      	ldr	r3, [pc, #328]	; (800d6d8 <HAL_TIM_PeriodElapsedCallback+0xc68>)
 800d590:	edd3 7a00 	vldr	s15, [r3]
 800d594:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800d598:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d59c:	4b4f      	ldr	r3, [pc, #316]	; (800d6dc <HAL_TIM_PeriodElapsedCallback+0xc6c>)
 800d59e:	edc3 7a00 	vstr	s15, [r3]
			epsilon_r = target_speed_r - speed_r;
 800d5a2:	4b4b      	ldr	r3, [pc, #300]	; (800d6d0 <HAL_TIM_PeriodElapsedCallback+0xc60>)
 800d5a4:	ed93 7a00 	vldr	s14, [r3]
 800d5a8:	4b4d      	ldr	r3, [pc, #308]	; (800d6e0 <HAL_TIM_PeriodElapsedCallback+0xc70>)
 800d5aa:	edd3 7a00 	vldr	s15, [r3]
 800d5ae:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d5b2:	4b4c      	ldr	r3, [pc, #304]	; (800d6e4 <HAL_TIM_PeriodElapsedCallback+0xc74>)
 800d5b4:	edc3 7a00 	vstr	s15, [r3]
			pulse_r = Kp * epsilon_r;
 800d5b8:	4b4a      	ldr	r3, [pc, #296]	; (800d6e4 <HAL_TIM_PeriodElapsedCallback+0xc74>)
 800d5ba:	edd3 7a00 	vldr	s15, [r3]
 800d5be:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800d5c2:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d5c6:	4b37      	ldr	r3, [pc, #220]	; (800d6a4 <HAL_TIM_PeriodElapsedCallback+0xc34>)
 800d5c8:	edc3 7a00 	vstr	s15, [r3]
		}


		//ADchange interrupt
		uint16_t delay;
		tp = (tp+1)%3;
 800d5cc:	4b46      	ldr	r3, [pc, #280]	; (800d6e8 <HAL_TIM_PeriodElapsedCallback+0xc78>)
 800d5ce:	781b      	ldrb	r3, [r3, #0]
 800d5d0:	1c5a      	adds	r2, r3, #1
 800d5d2:	4b46      	ldr	r3, [pc, #280]	; (800d6ec <HAL_TIM_PeriodElapsedCallback+0xc7c>)
 800d5d4:	fb83 3102 	smull	r3, r1, r3, r2
 800d5d8:	17d3      	asrs	r3, r2, #31
 800d5da:	1ac9      	subs	r1, r1, r3
 800d5dc:	460b      	mov	r3, r1
 800d5de:	005b      	lsls	r3, r3, #1
 800d5e0:	440b      	add	r3, r1
 800d5e2:	1ad1      	subs	r1, r2, r3
 800d5e4:	b2ca      	uxtb	r2, r1
 800d5e6:	4b40      	ldr	r3, [pc, #256]	; (800d6e8 <HAL_TIM_PeriodElapsedCallback+0xc78>)
 800d5e8:	701a      	strb	r2, [r3, #0]

		switch(tp){
 800d5ea:	4b3f      	ldr	r3, [pc, #252]	; (800d6e8 <HAL_TIM_PeriodElapsedCallback+0xc78>)
 800d5ec:	781b      	ldrb	r3, [r3, #0]
 800d5ee:	2b01      	cmp	r3, #1
 800d5f0:	d044      	beq.n	800d67c <HAL_TIM_PeriodElapsedCallback+0xc0c>
 800d5f2:	2b02      	cmp	r3, #2
 800d5f4:	f000 80bc 	beq.w	800d770 <HAL_TIM_PeriodElapsedCallback+0xd00>
 800d5f8:	2b00      	cmp	r3, #0
 800d5fa:	f040 82da 	bne.w	800dbb2 <HAL_TIM_PeriodElapsedCallback+0x1142>
		  case 0:
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_SET); 	//L
 800d5fe:	2201      	movs	r2, #1
 800d600:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800d604:	483a      	ldr	r0, [pc, #232]	; (800d6f0 <HAL_TIM_PeriodElapsedCallback+0xc80>)
 800d606:	f7f4 fe7d 	bl	8002304 <HAL_GPIO_WritePin>
				for(delay=0; delay<sensor_wait; delay++);
 800d60a:	2300      	movs	r3, #0
 800d60c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800d60e:	e002      	b.n	800d616 <HAL_TIM_PeriodElapsedCallback+0xba6>
 800d610:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800d612:	3301      	adds	r3, #1
 800d614:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800d616:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800d618:	f640 12c3 	movw	r2, #2499	; 0x9c3
 800d61c:	4293      	cmp	r3, r2
 800d61e:	d9f7      	bls.n	800d610 <HAL_TIM_PeriodElapsedCallback+0xba0>
				ad_l = get_adc_value(&hadc1, ADC_CHANNEL_3);			//L
 800d620:	2103      	movs	r1, #3
 800d622:	4834      	ldr	r0, [pc, #208]	; (800d6f4 <HAL_TIM_PeriodElapsedCallback+0xc84>)
 800d624:	f001 fa38 	bl	800ea98 <get_adc_value>
 800d628:	4603      	mov	r3, r0
 800d62a:	461a      	mov	r2, r3
 800d62c:	4b32      	ldr	r3, [pc, #200]	; (800d6f8 <HAL_TIM_PeriodElapsedCallback+0xc88>)
 800d62e:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 800d630:	2200      	movs	r2, #0
 800d632:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800d636:	482e      	ldr	r0, [pc, #184]	; (800d6f0 <HAL_TIM_PeriodElapsedCallback+0xc80>)
 800d638:	f7f4 fe64 	bl	8002304 <HAL_GPIO_WritePin>

				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);  	//R
 800d63c:	2201      	movs	r2, #1
 800d63e:	f44f 7180 	mov.w	r1, #256	; 0x100
 800d642:	482e      	ldr	r0, [pc, #184]	; (800d6fc <HAL_TIM_PeriodElapsedCallback+0xc8c>)
 800d644:	f7f4 fe5e 	bl	8002304 <HAL_GPIO_WritePin>
				for(delay=0; delay<sensor_wait; delay++);
 800d648:	2300      	movs	r3, #0
 800d64a:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800d64c:	e002      	b.n	800d654 <HAL_TIM_PeriodElapsedCallback+0xbe4>
 800d64e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800d650:	3301      	adds	r3, #1
 800d652:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800d654:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800d656:	f640 12c3 	movw	r2, #2499	; 0x9c3
 800d65a:	4293      	cmp	r3, r2
 800d65c:	d9f7      	bls.n	800d64e <HAL_TIM_PeriodElapsedCallback+0xbde>
				ad_r = get_adc_value(&hadc1, ADC_CHANNEL_1);			//R
 800d65e:	2101      	movs	r1, #1
 800d660:	4824      	ldr	r0, [pc, #144]	; (800d6f4 <HAL_TIM_PeriodElapsedCallback+0xc84>)
 800d662:	f001 fa19 	bl	800ea98 <get_adc_value>
 800d666:	4603      	mov	r3, r0
 800d668:	461a      	mov	r2, r3
 800d66a:	4b25      	ldr	r3, [pc, #148]	; (800d700 <HAL_TIM_PeriodElapsedCallback+0xc90>)
 800d66c:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 800d66e:	2200      	movs	r2, #0
 800d670:	f44f 7180 	mov.w	r1, #256	; 0x100
 800d674:	4821      	ldr	r0, [pc, #132]	; (800d6fc <HAL_TIM_PeriodElapsedCallback+0xc8c>)
 800d676:	f7f4 fe45 	bl	8002304 <HAL_GPIO_WritePin>
			break;
 800d67a:	e29a      	b.n	800dbb2 <HAL_TIM_PeriodElapsedCallback+0x1142>

		  case 1:
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_SET); 	//FL
 800d67c:	2201      	movs	r2, #1
 800d67e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800d682:	481b      	ldr	r0, [pc, #108]	; (800d6f0 <HAL_TIM_PeriodElapsedCallback+0xc80>)
 800d684:	f7f4 fe3e 	bl	8002304 <HAL_GPIO_WritePin>
				for(delay=0; delay<sensor_wait; delay++);
 800d688:	2300      	movs	r3, #0
 800d68a:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800d68c:	e03d      	b.n	800d70a <HAL_TIM_PeriodElapsedCallback+0xc9a>
 800d68e:	bf00      	nop
 800d690:	d2f1a9fc 	.word	0xd2f1a9fc
 800d694:	3f50624d 	.word	0x3f50624d
 800d698:	54442d18 	.word	0x54442d18
 800d69c:	400921fb 	.word	0x400921fb
 800d6a0:	42c80000 	.word	0x42c80000
 800d6a4:	20000780 	.word	0x20000780
 800d6a8:	20000f68 	.word	0x20000f68
 800d6ac:	20000b58 	.word	0x20000b58
 800d6b0:	200001a8 	.word	0x200001a8
 800d6b4:	20000ae8 	.word	0x20000ae8
 800d6b8:	200002b8 	.word	0x200002b8
 800d6bc:	20000458 	.word	0x20000458
 800d6c0:	20000af4 	.word	0x20000af4
 800d6c4:	43340000 	.word	0x43340000
 800d6c8:	40508000 	.word	0x40508000
 800d6cc:	20000bfc 	.word	0x20000bfc
 800d6d0:	200001a0 	.word	0x200001a0
 800d6d4:	20000af0 	.word	0x20000af0
 800d6d8:	20000b60 	.word	0x20000b60
 800d6dc:	20000ba8 	.word	0x20000ba8
 800d6e0:	200002bc 	.word	0x200002bc
 800d6e4:	20000c08 	.word	0x20000c08
 800d6e8:	200012a0 	.word	0x200012a0
 800d6ec:	55555556 	.word	0x55555556
 800d6f0:	40020800 	.word	0x40020800
 800d6f4:	20000b00 	.word	0x20000b00
 800d6f8:	20000afc 	.word	0x20000afc
 800d6fc:	40020000 	.word	0x40020000
 800d700:	20000f60 	.word	0x20000f60
 800d704:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800d706:	3301      	adds	r3, #1
 800d708:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800d70a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800d70c:	f640 12c3 	movw	r2, #2499	; 0x9c3
 800d710:	4293      	cmp	r3, r2
 800d712:	d9f7      	bls.n	800d704 <HAL_TIM_PeriodElapsedCallback+0xc94>
				ad_fl = get_adc_value(&hadc1, ADC_CHANNEL_2);			//FL
 800d714:	2102      	movs	r1, #2
 800d716:	48b4      	ldr	r0, [pc, #720]	; (800d9e8 <HAL_TIM_PeriodElapsedCallback+0xf78>)
 800d718:	f001 f9be 	bl	800ea98 <get_adc_value>
 800d71c:	4603      	mov	r3, r0
 800d71e:	461a      	mov	r2, r3
 800d720:	4bb2      	ldr	r3, [pc, #712]	; (800d9ec <HAL_TIM_PeriodElapsedCallback+0xf7c>)
 800d722:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET);
 800d724:	2200      	movs	r2, #0
 800d726:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800d72a:	48b1      	ldr	r0, [pc, #708]	; (800d9f0 <HAL_TIM_PeriodElapsedCallback+0xf80>)
 800d72c:	f7f4 fdea 	bl	8002304 <HAL_GPIO_WritePin>

				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);   	//FR
 800d730:	2201      	movs	r2, #1
 800d732:	f44f 7100 	mov.w	r1, #512	; 0x200
 800d736:	48ae      	ldr	r0, [pc, #696]	; (800d9f0 <HAL_TIM_PeriodElapsedCallback+0xf80>)
 800d738:	f7f4 fde4 	bl	8002304 <HAL_GPIO_WritePin>
				for(delay=0; delay<sensor_wait; delay++);
 800d73c:	2300      	movs	r3, #0
 800d73e:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800d740:	e002      	b.n	800d748 <HAL_TIM_PeriodElapsedCallback+0xcd8>
 800d742:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800d744:	3301      	adds	r3, #1
 800d746:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800d748:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800d74a:	f640 12c3 	movw	r2, #2499	; 0x9c3
 800d74e:	4293      	cmp	r3, r2
 800d750:	d9f7      	bls.n	800d742 <HAL_TIM_PeriodElapsedCallback+0xcd2>
				ad_fr = get_adc_value(&hadc1, ADC_CHANNEL_0);			//FR
 800d752:	2100      	movs	r1, #0
 800d754:	48a4      	ldr	r0, [pc, #656]	; (800d9e8 <HAL_TIM_PeriodElapsedCallback+0xf78>)
 800d756:	f001 f99f 	bl	800ea98 <get_adc_value>
 800d75a:	4603      	mov	r3, r0
 800d75c:	461a      	mov	r2, r3
 800d75e:	4ba5      	ldr	r3, [pc, #660]	; (800d9f4 <HAL_TIM_PeriodElapsedCallback+0xf84>)
 800d760:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 800d762:	2200      	movs	r2, #0
 800d764:	f44f 7100 	mov.w	r1, #512	; 0x200
 800d768:	48a1      	ldr	r0, [pc, #644]	; (800d9f0 <HAL_TIM_PeriodElapsedCallback+0xf80>)
 800d76a:	f7f4 fdcb 	bl	8002304 <HAL_GPIO_WritePin>
			break;
 800d76e:	e220      	b.n	800dbb2 <HAL_TIM_PeriodElapsedCallback+0x1142>

		  case 2:
				//
				if(MF.FLAG.WCTRL){
 800d770:	4ba1      	ldr	r3, [pc, #644]	; (800d9f8 <HAL_TIM_PeriodElapsedCallback+0xf88>)
 800d772:	881b      	ldrh	r3, [r3, #0]
 800d774:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800d778:	b2db      	uxtb	r3, r3
 800d77a:	2b00      	cmp	r3, #0
 800d77c:	f000 81c5 	beq.w	800db0a <HAL_TIM_PeriodElapsedCallback+0x109a>
					if(!MF2.FLAG.V){
 800d780:	4b9e      	ldr	r3, [pc, #632]	; (800d9fc <HAL_TIM_PeriodElapsedCallback+0xf8c>)
 800d782:	881b      	ldrh	r3, [r3, #0]
 800d784:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800d788:	b2db      	uxtb	r3, r3
 800d78a:	2b00      	cmp	r3, #0
 800d78c:	f040 80bb 	bne.w	800d906 <HAL_TIM_PeriodElapsedCallback+0xe96>
						int16_t dwl_tmp = 0, dwr_tmp = 0;
 800d790:	2300      	movs	r3, #0
 800d792:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800d794:	2300      	movs	r3, #0
 800d796:	857b      	strh	r3, [r7, #42]	; 0x2a
						dif_l = (int32_t) ad_l - base_l;
 800d798:	4b99      	ldr	r3, [pc, #612]	; (800da00 <HAL_TIM_PeriodElapsedCallback+0xf90>)
 800d79a:	681b      	ldr	r3, [r3, #0]
 800d79c:	b29a      	uxth	r2, r3
 800d79e:	4b99      	ldr	r3, [pc, #612]	; (800da04 <HAL_TIM_PeriodElapsedCallback+0xf94>)
 800d7a0:	881b      	ldrh	r3, [r3, #0]
 800d7a2:	1ad3      	subs	r3, r2, r3
 800d7a4:	b29b      	uxth	r3, r3
 800d7a6:	b21a      	sxth	r2, r3
 800d7a8:	4b97      	ldr	r3, [pc, #604]	; (800da08 <HAL_TIM_PeriodElapsedCallback+0xf98>)
 800d7aa:	801a      	strh	r2, [r3, #0]
						dif_r = (int32_t) ad_r - base_r;
 800d7ac:	4b97      	ldr	r3, [pc, #604]	; (800da0c <HAL_TIM_PeriodElapsedCallback+0xf9c>)
 800d7ae:	681b      	ldr	r3, [r3, #0]
 800d7b0:	b29a      	uxth	r2, r3
 800d7b2:	4b97      	ldr	r3, [pc, #604]	; (800da10 <HAL_TIM_PeriodElapsedCallback+0xfa0>)
 800d7b4:	881b      	ldrh	r3, [r3, #0]
 800d7b6:	1ad3      	subs	r3, r2, r3
 800d7b8:	b29b      	uxth	r3, r3
 800d7ba:	b21a      	sxth	r2, r3
 800d7bc:	4b95      	ldr	r3, [pc, #596]	; (800da14 <HAL_TIM_PeriodElapsedCallback+0xfa4>)
 800d7be:	801a      	strh	r2, [r3, #0]

						if(dif_l > CTRL_BASE_L || dif_r > CTRL_BASE_R){
 800d7c0:	4b91      	ldr	r3, [pc, #580]	; (800da08 <HAL_TIM_PeriodElapsedCallback+0xf98>)
 800d7c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d7c6:	2b23      	cmp	r3, #35	; 0x23
 800d7c8:	dc04      	bgt.n	800d7d4 <HAL_TIM_PeriodElapsedCallback+0xd64>
 800d7ca:	4b92      	ldr	r3, [pc, #584]	; (800da14 <HAL_TIM_PeriodElapsedCallback+0xfa4>)
 800d7cc:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d7d0:	2b1e      	cmp	r3, #30
 800d7d2:	dd70      	ble.n	800d8b6 <HAL_TIM_PeriodElapsedCallback+0xe46>
							if(dif_l > CTRL_BASE_L){
 800d7d4:	4b8c      	ldr	r3, [pc, #560]	; (800da08 <HAL_TIM_PeriodElapsedCallback+0xf98>)
 800d7d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d7da:	2b23      	cmp	r3, #35	; 0x23
 800d7dc:	dd30      	ble.n	800d840 <HAL_TIM_PeriodElapsedCallback+0xdd0>
								dwl_tmp += CTRL_CONT_W * dif_l;					//a比例制御値を決定
 800d7de:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 800d7e2:	ee07 3a90 	vmov	s15, r3
 800d7e6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800d7ea:	4b87      	ldr	r3, [pc, #540]	; (800da08 <HAL_TIM_PeriodElapsedCallback+0xf98>)
 800d7ec:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d7f0:	ee07 3a90 	vmov	s15, r3
 800d7f4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d7f8:	eef6 6a08 	vmov.f32	s13, #104	; 0x3f400000  0.750
 800d7fc:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800d800:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d804:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d808:	ee17 3a90 	vmov	r3, s15
 800d80c:	85bb      	strh	r3, [r7, #44]	; 0x2c
								dwr_tmp += -1 * CTRL_CONT_W * dif_l;			//a比例制御値を決定
 800d80e:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800d812:	ee07 3a90 	vmov	s15, r3
 800d816:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800d81a:	4b7b      	ldr	r3, [pc, #492]	; (800da08 <HAL_TIM_PeriodElapsedCallback+0xf98>)
 800d81c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d820:	ee07 3a90 	vmov	s15, r3
 800d824:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d828:	eefe 6a08 	vmov.f32	s13, #232	; 0xbf400000 -0.750
 800d82c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800d830:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d834:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d838:	ee17 3a90 	vmov	r3, s15
 800d83c:	857b      	strh	r3, [r7, #42]	; 0x2a
 800d83e:	e034      	b.n	800d8aa <HAL_TIM_PeriodElapsedCallback+0xe3a>
							}
							else if(dif_r > CTRL_BASE_R){
 800d840:	4b74      	ldr	r3, [pc, #464]	; (800da14 <HAL_TIM_PeriodElapsedCallback+0xfa4>)
 800d842:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d846:	2b1e      	cmp	r3, #30
 800d848:	dd2f      	ble.n	800d8aa <HAL_TIM_PeriodElapsedCallback+0xe3a>
								dwl_tmp += -1 * CTRL_CONT_W * dif_r;			//a比例制御値を決定
 800d84a:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 800d84e:	ee07 3a90 	vmov	s15, r3
 800d852:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800d856:	4b6f      	ldr	r3, [pc, #444]	; (800da14 <HAL_TIM_PeriodElapsedCallback+0xfa4>)
 800d858:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d85c:	ee07 3a90 	vmov	s15, r3
 800d860:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d864:	eefe 6a08 	vmov.f32	s13, #232	; 0xbf400000 -0.750
 800d868:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800d86c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d870:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d874:	ee17 3a90 	vmov	r3, s15
 800d878:	85bb      	strh	r3, [r7, #44]	; 0x2c
								dwr_tmp += CTRL_CONT_W * dif_r;					//a比例制御値を決定
 800d87a:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800d87e:	ee07 3a90 	vmov	s15, r3
 800d882:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800d886:	4b63      	ldr	r3, [pc, #396]	; (800da14 <HAL_TIM_PeriodElapsedCallback+0xfa4>)
 800d888:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d88c:	ee07 3a90 	vmov	s15, r3
 800d890:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d894:	eef6 6a08 	vmov.f32	s13, #104	; 0x3f400000  0.750
 800d898:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800d89c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d8a0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d8a4:	ee17 3a90 	vmov	r3, s15
 800d8a8:	857b      	strh	r3, [r7, #42]	; 0x2a
							}
							MF2.FLAG.WG = 1;
 800d8aa:	4a54      	ldr	r2, [pc, #336]	; (800d9fc <HAL_TIM_PeriodElapsedCallback+0xf8c>)
 800d8ac:	8813      	ldrh	r3, [r2, #0]
 800d8ae:	f043 0310 	orr.w	r3, r3, #16
 800d8b2:	8013      	strh	r3, [r2, #0]
 800d8b4:	e004      	b.n	800d8c0 <HAL_TIM_PeriodElapsedCallback+0xe50>
						}else{
							MF2.FLAG.WG = 0;
 800d8b6:	4a51      	ldr	r2, [pc, #324]	; (800d9fc <HAL_TIM_PeriodElapsedCallback+0xf8c>)
 800d8b8:	8813      	ldrh	r3, [r2, #0]
 800d8ba:	f36f 1304 	bfc	r3, #4, #1
 800d8be:	8013      	strh	r3, [r2, #0]
						}
						dwl = max(min(CTRL_MAX_W, dwl_tmp), -1 * CTRL_MAX_W);
 800d8c0:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 800d8c4:	f513 7f7a 	cmn.w	r3, #1000	; 0x3e8
 800d8c8:	dd08      	ble.n	800d8dc <HAL_TIM_PeriodElapsedCallback+0xe6c>
 800d8ca:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 800d8ce:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d8d2:	bfa8      	it	ge
 800d8d4:	f44f 737a 	movge.w	r3, #1000	; 0x3e8
 800d8d8:	b21b      	sxth	r3, r3
 800d8da:	e000      	b.n	800d8de <HAL_TIM_PeriodElapsedCallback+0xe6e>
 800d8dc:	4b4e      	ldr	r3, [pc, #312]	; (800da18 <HAL_TIM_PeriodElapsedCallback+0xfa8>)
 800d8de:	4a4f      	ldr	r2, [pc, #316]	; (800da1c <HAL_TIM_PeriodElapsedCallback+0xfac>)
 800d8e0:	8013      	strh	r3, [r2, #0]
						dwr = max(min(CTRL_MAX_W, dwr_tmp), -1 * CTRL_MAX_W);
 800d8e2:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800d8e6:	f513 7f7a 	cmn.w	r3, #1000	; 0x3e8
 800d8ea:	dd08      	ble.n	800d8fe <HAL_TIM_PeriodElapsedCallback+0xe8e>
 800d8ec:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800d8f0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d8f4:	bfa8      	it	ge
 800d8f6:	f44f 737a 	movge.w	r3, #1000	; 0x3e8
 800d8fa:	b21b      	sxth	r3, r3
 800d8fc:	e000      	b.n	800d900 <HAL_TIM_PeriodElapsedCallback+0xe90>
 800d8fe:	4b46      	ldr	r3, [pc, #280]	; (800da18 <HAL_TIM_PeriodElapsedCallback+0xfa8>)
 800d900:	4a47      	ldr	r2, [pc, #284]	; (800da20 <HAL_TIM_PeriodElapsedCallback+0xfb0>)
 800d902:	8013      	strh	r3, [r2, #0]
 800d904:	e108      	b.n	800db18 <HAL_TIM_PeriodElapsedCallback+0x10a8>
					}else{
						int16_t dwl_tmp = 0, dwr_tmp = 0;
 800d906:	2300      	movs	r3, #0
 800d908:	853b      	strh	r3, [r7, #40]	; 0x28
 800d90a:	2300      	movs	r3, #0
 800d90c:	84fb      	strh	r3, [r7, #38]	; 0x26
						dif_l = (int32_t) ad_fl - BASE_FL;
 800d90e:	4b37      	ldr	r3, [pc, #220]	; (800d9ec <HAL_TIM_PeriodElapsedCallback+0xf7c>)
 800d910:	681b      	ldr	r3, [r3, #0]
 800d912:	b29b      	uxth	r3, r3
 800d914:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800d918:	b29b      	uxth	r3, r3
 800d91a:	b21a      	sxth	r2, r3
 800d91c:	4b3a      	ldr	r3, [pc, #232]	; (800da08 <HAL_TIM_PeriodElapsedCallback+0xf98>)
 800d91e:	801a      	strh	r2, [r3, #0]
						dif_r = (int32_t) ad_fr - BASE_FR;
 800d920:	4b34      	ldr	r3, [pc, #208]	; (800d9f4 <HAL_TIM_PeriodElapsedCallback+0xf84>)
 800d922:	681b      	ldr	r3, [r3, #0]
 800d924:	b29b      	uxth	r3, r3
 800d926:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800d92a:	b29b      	uxth	r3, r3
 800d92c:	b21a      	sxth	r2, r3
 800d92e:	4b39      	ldr	r3, [pc, #228]	; (800da14 <HAL_TIM_PeriodElapsedCallback+0xfa4>)
 800d930:	801a      	strh	r2, [r3, #0]

						if(dif_l > CTRL_BASE_FL || dif_r > CTRL_BASE_FR){
 800d932:	4b35      	ldr	r3, [pc, #212]	; (800da08 <HAL_TIM_PeriodElapsedCallback+0xf98>)
 800d934:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d938:	2bc8      	cmp	r3, #200	; 0xc8
 800d93a:	dc05      	bgt.n	800d948 <HAL_TIM_PeriodElapsedCallback+0xed8>
 800d93c:	4b35      	ldr	r3, [pc, #212]	; (800da14 <HAL_TIM_PeriodElapsedCallback+0xfa4>)
 800d93e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d942:	2b64      	cmp	r3, #100	; 0x64
 800d944:	f340 80b9 	ble.w	800daba <HAL_TIM_PeriodElapsedCallback+0x104a>
							if(dif_l > CTRL_BASE_FL){
 800d948:	4b2f      	ldr	r3, [pc, #188]	; (800da08 <HAL_TIM_PeriodElapsedCallback+0xf98>)
 800d94a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d94e:	2bc8      	cmp	r3, #200	; 0xc8
 800d950:	dd68      	ble.n	800da24 <HAL_TIM_PeriodElapsedCallback+0xfb4>
								dwl_tmp += CTRL_CONT_W * 0.1 * dif_l;				//a比例制御値を決定
 800d952:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 800d956:	4618      	mov	r0, r3
 800d958:	f7f2 fddc 	bl	8000514 <__aeabi_i2d>
 800d95c:	4604      	mov	r4, r0
 800d95e:	460d      	mov	r5, r1
 800d960:	4b29      	ldr	r3, [pc, #164]	; (800da08 <HAL_TIM_PeriodElapsedCallback+0xf98>)
 800d962:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d966:	4618      	mov	r0, r3
 800d968:	f7f2 fdd4 	bl	8000514 <__aeabi_i2d>
 800d96c:	a31a      	add	r3, pc, #104	; (adr r3, 800d9d8 <HAL_TIM_PeriodElapsedCallback+0xf68>)
 800d96e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d972:	f7f2 fe39 	bl	80005e8 <__aeabi_dmul>
 800d976:	4602      	mov	r2, r0
 800d978:	460b      	mov	r3, r1
 800d97a:	4620      	mov	r0, r4
 800d97c:	4629      	mov	r1, r5
 800d97e:	f7f2 fc7d 	bl	800027c <__adddf3>
 800d982:	4603      	mov	r3, r0
 800d984:	460c      	mov	r4, r1
 800d986:	4618      	mov	r0, r3
 800d988:	4621      	mov	r1, r4
 800d98a:	f7f3 f8dd 	bl	8000b48 <__aeabi_d2iz>
 800d98e:	4603      	mov	r3, r0
 800d990:	853b      	strh	r3, [r7, #40]	; 0x28
								dwr_tmp += -1 * CTRL_CONT_W * 0.1 * dif_l;			//a比例制御値を決定
 800d992:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800d996:	4618      	mov	r0, r3
 800d998:	f7f2 fdbc 	bl	8000514 <__aeabi_i2d>
 800d99c:	4604      	mov	r4, r0
 800d99e:	460d      	mov	r5, r1
 800d9a0:	4b19      	ldr	r3, [pc, #100]	; (800da08 <HAL_TIM_PeriodElapsedCallback+0xf98>)
 800d9a2:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d9a6:	4618      	mov	r0, r3
 800d9a8:	f7f2 fdb4 	bl	8000514 <__aeabi_i2d>
 800d9ac:	a30c      	add	r3, pc, #48	; (adr r3, 800d9e0 <HAL_TIM_PeriodElapsedCallback+0xf70>)
 800d9ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9b2:	f7f2 fe19 	bl	80005e8 <__aeabi_dmul>
 800d9b6:	4602      	mov	r2, r0
 800d9b8:	460b      	mov	r3, r1
 800d9ba:	4620      	mov	r0, r4
 800d9bc:	4629      	mov	r1, r5
 800d9be:	f7f2 fc5d 	bl	800027c <__adddf3>
 800d9c2:	4603      	mov	r3, r0
 800d9c4:	460c      	mov	r4, r1
 800d9c6:	4618      	mov	r0, r3
 800d9c8:	4621      	mov	r1, r4
 800d9ca:	f7f3 f8bd 	bl	8000b48 <__aeabi_d2iz>
 800d9ce:	4603      	mov	r3, r0
 800d9d0:	84fb      	strh	r3, [r7, #38]	; 0x26
 800d9d2:	e06c      	b.n	800daae <HAL_TIM_PeriodElapsedCallback+0x103e>
 800d9d4:	f3af 8000 	nop.w
 800d9d8:	33333334 	.word	0x33333334
 800d9dc:	3fb33333 	.word	0x3fb33333
 800d9e0:	33333334 	.word	0x33333334
 800d9e4:	bfb33333 	.word	0xbfb33333
 800d9e8:	20000b00 	.word	0x20000b00
 800d9ec:	20000d54 	.word	0x20000d54
 800d9f0:	40020800 	.word	0x40020800
 800d9f4:	20000c00 	.word	0x20000c00
 800d9f8:	20000f68 	.word	0x20000f68
 800d9fc:	20000f64 	.word	0x20000f64
 800da00:	20000afc 	.word	0x20000afc
 800da04:	2000034c 	.word	0x2000034c
 800da08:	20000b50 	.word	0x20000b50
 800da0c:	20000f60 	.word	0x20000f60
 800da10:	200002c0 	.word	0x200002c0
 800da14:	20000bb2 	.word	0x20000bb2
 800da18:	fffffc18 	.word	0xfffffc18
 800da1c:	20000af8 	.word	0x20000af8
 800da20:	20000f74 	.word	0x20000f74
							}
							else if(dif_r > CTRL_BASE_FR){
 800da24:	4bb8      	ldr	r3, [pc, #736]	; (800dd08 <HAL_TIM_PeriodElapsedCallback+0x1298>)
 800da26:	f9b3 3000 	ldrsh.w	r3, [r3]
 800da2a:	2b64      	cmp	r3, #100	; 0x64
 800da2c:	dd3f      	ble.n	800daae <HAL_TIM_PeriodElapsedCallback+0x103e>
								dwl_tmp += -1 * CTRL_CONT_W * 0.2 * dif_r;			//a比例制御値を決定
 800da2e:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 800da32:	4618      	mov	r0, r3
 800da34:	f7f2 fd6e 	bl	8000514 <__aeabi_i2d>
 800da38:	4604      	mov	r4, r0
 800da3a:	460d      	mov	r5, r1
 800da3c:	4bb2      	ldr	r3, [pc, #712]	; (800dd08 <HAL_TIM_PeriodElapsedCallback+0x1298>)
 800da3e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800da42:	4618      	mov	r0, r3
 800da44:	f7f2 fd66 	bl	8000514 <__aeabi_i2d>
 800da48:	a3ab      	add	r3, pc, #684	; (adr r3, 800dcf8 <HAL_TIM_PeriodElapsedCallback+0x1288>)
 800da4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da4e:	f7f2 fdcb 	bl	80005e8 <__aeabi_dmul>
 800da52:	4602      	mov	r2, r0
 800da54:	460b      	mov	r3, r1
 800da56:	4620      	mov	r0, r4
 800da58:	4629      	mov	r1, r5
 800da5a:	f7f2 fc0f 	bl	800027c <__adddf3>
 800da5e:	4603      	mov	r3, r0
 800da60:	460c      	mov	r4, r1
 800da62:	4618      	mov	r0, r3
 800da64:	4621      	mov	r1, r4
 800da66:	f7f3 f86f 	bl	8000b48 <__aeabi_d2iz>
 800da6a:	4603      	mov	r3, r0
 800da6c:	853b      	strh	r3, [r7, #40]	; 0x28
								dwr_tmp += CTRL_CONT_W * 0.2 * dif_r;				//a比例制御値を決定
 800da6e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800da72:	4618      	mov	r0, r3
 800da74:	f7f2 fd4e 	bl	8000514 <__aeabi_i2d>
 800da78:	4604      	mov	r4, r0
 800da7a:	460d      	mov	r5, r1
 800da7c:	4ba2      	ldr	r3, [pc, #648]	; (800dd08 <HAL_TIM_PeriodElapsedCallback+0x1298>)
 800da7e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800da82:	4618      	mov	r0, r3
 800da84:	f7f2 fd46 	bl	8000514 <__aeabi_i2d>
 800da88:	a39d      	add	r3, pc, #628	; (adr r3, 800dd00 <HAL_TIM_PeriodElapsedCallback+0x1290>)
 800da8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da8e:	f7f2 fdab 	bl	80005e8 <__aeabi_dmul>
 800da92:	4602      	mov	r2, r0
 800da94:	460b      	mov	r3, r1
 800da96:	4620      	mov	r0, r4
 800da98:	4629      	mov	r1, r5
 800da9a:	f7f2 fbef 	bl	800027c <__adddf3>
 800da9e:	4603      	mov	r3, r0
 800daa0:	460c      	mov	r4, r1
 800daa2:	4618      	mov	r0, r3
 800daa4:	4621      	mov	r1, r4
 800daa6:	f7f3 f84f 	bl	8000b48 <__aeabi_d2iz>
 800daaa:	4603      	mov	r3, r0
 800daac:	84fb      	strh	r3, [r7, #38]	; 0x26
							}
							MF2.FLAG.WG = 1;
 800daae:	4a97      	ldr	r2, [pc, #604]	; (800dd0c <HAL_TIM_PeriodElapsedCallback+0x129c>)
 800dab0:	8813      	ldrh	r3, [r2, #0]
 800dab2:	f043 0310 	orr.w	r3, r3, #16
 800dab6:	8013      	strh	r3, [r2, #0]
 800dab8:	e004      	b.n	800dac4 <HAL_TIM_PeriodElapsedCallback+0x1054>
						}else{
							MF2.FLAG.WG = 0;
 800daba:	4a94      	ldr	r2, [pc, #592]	; (800dd0c <HAL_TIM_PeriodElapsedCallback+0x129c>)
 800dabc:	8813      	ldrh	r3, [r2, #0]
 800dabe:	f36f 1304 	bfc	r3, #4, #1
 800dac2:	8013      	strh	r3, [r2, #0]
						}
						dwl = max(min(CTRL_MAX_W, dwl_tmp), -1 * CTRL_MAX_W);
 800dac4:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 800dac8:	f513 7f7a 	cmn.w	r3, #1000	; 0x3e8
 800dacc:	dd08      	ble.n	800dae0 <HAL_TIM_PeriodElapsedCallback+0x1070>
 800dace:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 800dad2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800dad6:	bfa8      	it	ge
 800dad8:	f44f 737a 	movge.w	r3, #1000	; 0x3e8
 800dadc:	b21b      	sxth	r3, r3
 800dade:	e000      	b.n	800dae2 <HAL_TIM_PeriodElapsedCallback+0x1072>
 800dae0:	4b8b      	ldr	r3, [pc, #556]	; (800dd10 <HAL_TIM_PeriodElapsedCallback+0x12a0>)
 800dae2:	4a8c      	ldr	r2, [pc, #560]	; (800dd14 <HAL_TIM_PeriodElapsedCallback+0x12a4>)
 800dae4:	8013      	strh	r3, [r2, #0]
						dwr = max(min(CTRL_MAX_W, dwr_tmp), -1 * CTRL_MAX_W);
 800dae6:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800daea:	f513 7f7a 	cmn.w	r3, #1000	; 0x3e8
 800daee:	dd08      	ble.n	800db02 <HAL_TIM_PeriodElapsedCallback+0x1092>
 800daf0:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800daf4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800daf8:	bfa8      	it	ge
 800dafa:	f44f 737a 	movge.w	r3, #1000	; 0x3e8
 800dafe:	b21b      	sxth	r3, r3
 800db00:	e000      	b.n	800db04 <HAL_TIM_PeriodElapsedCallback+0x1094>
 800db02:	4b83      	ldr	r3, [pc, #524]	; (800dd10 <HAL_TIM_PeriodElapsedCallback+0x12a0>)
 800db04:	4a84      	ldr	r2, [pc, #528]	; (800dd18 <HAL_TIM_PeriodElapsedCallback+0x12a8>)
 800db06:	8013      	strh	r3, [r2, #0]
 800db08:	e006      	b.n	800db18 <HAL_TIM_PeriodElapsedCallback+0x10a8>
					}
				}else{
					//a制御フラグがなければ壁制御値0
					dwl = dwr = 0;
 800db0a:	2100      	movs	r1, #0
 800db0c:	4b82      	ldr	r3, [pc, #520]	; (800dd18 <HAL_TIM_PeriodElapsedCallback+0x12a8>)
 800db0e:	460a      	mov	r2, r1
 800db10:	801a      	strh	r2, [r3, #0]
 800db12:	4b80      	ldr	r3, [pc, #512]	; (800dd14 <HAL_TIM_PeriodElapsedCallback+0x12a4>)
 800db14:	460a      	mov	r2, r1
 800db16:	801a      	strh	r2, [r3, #0]
				}

				if(MF.FLAG.GCTRL){
 800db18:	4b80      	ldr	r3, [pc, #512]	; (800dd1c <HAL_TIM_PeriodElapsedCallback+0x12ac>)
 800db1a:	881b      	ldrh	r3, [r3, #0]
 800db1c:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800db20:	b2db      	uxtb	r3, r3
 800db22:	2b00      	cmp	r3, #0
 800db24:	d03d      	beq.n	800dba2 <HAL_TIM_PeriodElapsedCallback+0x1132>
				}

					dg = CTRL_CONT_G * gyro_read_z();			//a角速度制御
					dg = CTRL_CONT_G * degree_z;				//a角度制御
*/
					dg = CTRL_CONT_G * (target_degree_z - degree_z);		//a角度制御(目標角度はスタートを0度とし、旋回量と対応付け)
 800db26:	4b7e      	ldr	r3, [pc, #504]	; (800dd20 <HAL_TIM_PeriodElapsedCallback+0x12b0>)
 800db28:	ed93 7a00 	vldr	s14, [r3]
 800db2c:	4b7d      	ldr	r3, [pc, #500]	; (800dd24 <HAL_TIM_PeriodElapsedCallback+0x12b4>)
 800db2e:	edd3 7a00 	vldr	s15, [r3]
 800db32:	ee77 7a67 	vsub.f32	s15, s14, s15
 800db36:	ed9f 7a7c 	vldr	s14, [pc, #496]	; 800dd28 <HAL_TIM_PeriodElapsedCallback+0x12b8>
 800db3a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800db3e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800db42:	ee17 3a90 	vmov	r3, s15
 800db46:	b21a      	sxth	r2, r3
 800db48:	4b78      	ldr	r3, [pc, #480]	; (800dd2c <HAL_TIM_PeriodElapsedCallback+0x12bc>)
 800db4a:	801a      	strh	r2, [r3, #0]

					dg = max(min(CTRL_MAX_G, dg), -1 * CTRL_MAX_G);
 800db4c:	4b77      	ldr	r3, [pc, #476]	; (800dd2c <HAL_TIM_PeriodElapsedCallback+0x12bc>)
 800db4e:	881b      	ldrh	r3, [r3, #0]
 800db50:	b21b      	sxth	r3, r3
 800db52:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800db56:	da05      	bge.n	800db64 <HAL_TIM_PeriodElapsedCallback+0x10f4>
 800db58:	4b74      	ldr	r3, [pc, #464]	; (800dd2c <HAL_TIM_PeriodElapsedCallback+0x12bc>)
 800db5a:	881b      	ldrh	r3, [r3, #0]
 800db5c:	b21b      	sxth	r3, r3
 800db5e:	f513 7f7a 	cmn.w	r3, #1000	; 0x3e8
 800db62:	dd0c      	ble.n	800db7e <HAL_TIM_PeriodElapsedCallback+0x110e>
 800db64:	4b71      	ldr	r3, [pc, #452]	; (800dd2c <HAL_TIM_PeriodElapsedCallback+0x12bc>)
 800db66:	881b      	ldrh	r3, [r3, #0]
 800db68:	b21b      	sxth	r3, r3
 800db6a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800db6e:	da03      	bge.n	800db78 <HAL_TIM_PeriodElapsedCallback+0x1108>
 800db70:	4b6e      	ldr	r3, [pc, #440]	; (800dd2c <HAL_TIM_PeriodElapsedCallback+0x12bc>)
 800db72:	881b      	ldrh	r3, [r3, #0]
 800db74:	b21b      	sxth	r3, r3
 800db76:	e003      	b.n	800db80 <HAL_TIM_PeriodElapsedCallback+0x1110>
 800db78:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800db7c:	e000      	b.n	800db80 <HAL_TIM_PeriodElapsedCallback+0x1110>
 800db7e:	4b64      	ldr	r3, [pc, #400]	; (800dd10 <HAL_TIM_PeriodElapsedCallback+0x12a0>)
 800db80:	4a6a      	ldr	r2, [pc, #424]	; (800dd2c <HAL_TIM_PeriodElapsedCallback+0x12bc>)
 800db82:	8013      	strh	r3, [r2, #0]
					dgl = -1*dg;
 800db84:	4b69      	ldr	r3, [pc, #420]	; (800dd2c <HAL_TIM_PeriodElapsedCallback+0x12bc>)
 800db86:	881b      	ldrh	r3, [r3, #0]
 800db88:	b21b      	sxth	r3, r3
 800db8a:	b29b      	uxth	r3, r3
 800db8c:	425b      	negs	r3, r3
 800db8e:	b29b      	uxth	r3, r3
 800db90:	b21a      	sxth	r2, r3
 800db92:	4b67      	ldr	r3, [pc, #412]	; (800dd30 <HAL_TIM_PeriodElapsedCallback+0x12c0>)
 800db94:	801a      	strh	r2, [r3, #0]
					dgr = dg;
 800db96:	4b65      	ldr	r3, [pc, #404]	; (800dd2c <HAL_TIM_PeriodElapsedCallback+0x12bc>)
 800db98:	881b      	ldrh	r3, [r3, #0]
 800db9a:	b21a      	sxth	r2, r3
 800db9c:	4b65      	ldr	r3, [pc, #404]	; (800dd34 <HAL_TIM_PeriodElapsedCallback+0x12c4>)
 800db9e:	801a      	strh	r2, [r3, #0]
				}else{
					//a制御フラグがなければ壁制御値0
					dgl = dgr = 0;
				}
				break;
 800dba0:	e006      	b.n	800dbb0 <HAL_TIM_PeriodElapsedCallback+0x1140>
					dgl = dgr = 0;
 800dba2:	2100      	movs	r1, #0
 800dba4:	4b63      	ldr	r3, [pc, #396]	; (800dd34 <HAL_TIM_PeriodElapsedCallback+0x12c4>)
 800dba6:	460a      	mov	r2, r1
 800dba8:	801a      	strh	r2, [r3, #0]
 800dbaa:	4b61      	ldr	r3, [pc, #388]	; (800dd30 <HAL_TIM_PeriodElapsedCallback+0x12c0>)
 800dbac:	460a      	mov	r2, r1
 800dbae:	801a      	strh	r2, [r3, #0]
				break;
 800dbb0:	bf00      	nop
		}


		if(MF.FLAG.DRV){
 800dbb2:	4b5a      	ldr	r3, [pc, #360]	; (800dd1c <HAL_TIM_PeriodElapsedCallback+0x12ac>)
 800dbb4:	881b      	ldrh	r3, [r3, #0]
 800dbb6:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800dbba:	b2db      	uxtb	r3, r3
 800dbbc:	2b00      	cmp	r3, #0
 800dbbe:	f000 81b2 	beq.w	800df26 <HAL_TIM_PeriodElapsedCallback+0x14b6>
			if(!MF2.FLAG.WG){
 800dbc2:	4b52      	ldr	r3, [pc, #328]	; (800dd0c <HAL_TIM_PeriodElapsedCallback+0x129c>)
 800dbc4:	881b      	ldrh	r3, [r3, #0]
 800dbc6:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800dbca:	b2db      	uxtb	r3, r3
 800dbcc:	2b00      	cmp	r3, #0
 800dbce:	d130      	bne.n	800dc32 <HAL_TIM_PeriodElapsedCallback+0x11c2>
				pulse_l = pulse_l + dgl + dwl;
 800dbd0:	4b57      	ldr	r3, [pc, #348]	; (800dd30 <HAL_TIM_PeriodElapsedCallback+0x12c0>)
 800dbd2:	881b      	ldrh	r3, [r3, #0]
 800dbd4:	b21b      	sxth	r3, r3
 800dbd6:	ee07 3a90 	vmov	s15, r3
 800dbda:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800dbde:	4b56      	ldr	r3, [pc, #344]	; (800dd38 <HAL_TIM_PeriodElapsedCallback+0x12c8>)
 800dbe0:	edd3 7a00 	vldr	s15, [r3]
 800dbe4:	ee37 7a27 	vadd.f32	s14, s14, s15
 800dbe8:	4b4a      	ldr	r3, [pc, #296]	; (800dd14 <HAL_TIM_PeriodElapsedCallback+0x12a4>)
 800dbea:	881b      	ldrh	r3, [r3, #0]
 800dbec:	b21b      	sxth	r3, r3
 800dbee:	ee07 3a90 	vmov	s15, r3
 800dbf2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800dbf6:	ee77 7a27 	vadd.f32	s15, s14, s15
 800dbfa:	4b4f      	ldr	r3, [pc, #316]	; (800dd38 <HAL_TIM_PeriodElapsedCallback+0x12c8>)
 800dbfc:	edc3 7a00 	vstr	s15, [r3]
				pulse_r = pulse_r + dgr + dwr;
 800dc00:	4b4c      	ldr	r3, [pc, #304]	; (800dd34 <HAL_TIM_PeriodElapsedCallback+0x12c4>)
 800dc02:	881b      	ldrh	r3, [r3, #0]
 800dc04:	b21b      	sxth	r3, r3
 800dc06:	ee07 3a90 	vmov	s15, r3
 800dc0a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800dc0e:	4b4b      	ldr	r3, [pc, #300]	; (800dd3c <HAL_TIM_PeriodElapsedCallback+0x12cc>)
 800dc10:	edd3 7a00 	vldr	s15, [r3]
 800dc14:	ee37 7a27 	vadd.f32	s14, s14, s15
 800dc18:	4b3f      	ldr	r3, [pc, #252]	; (800dd18 <HAL_TIM_PeriodElapsedCallback+0x12a8>)
 800dc1a:	881b      	ldrh	r3, [r3, #0]
 800dc1c:	b21b      	sxth	r3, r3
 800dc1e:	ee07 3a90 	vmov	s15, r3
 800dc22:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800dc26:	ee77 7a27 	vadd.f32	s15, s14, s15
 800dc2a:	4b44      	ldr	r3, [pc, #272]	; (800dd3c <HAL_TIM_PeriodElapsedCallback+0x12cc>)
 800dc2c:	edc3 7a00 	vstr	s15, [r3]
 800dc30:	e02f      	b.n	800dc92 <HAL_TIM_PeriodElapsedCallback+0x1222>
//				pulse_l = pulse_l + dgl;
//				pulse_r = pulse_r + dgr;
			}else{
				pulse_l = pulse_l + dgl + dwl;
 800dc32:	4b3f      	ldr	r3, [pc, #252]	; (800dd30 <HAL_TIM_PeriodElapsedCallback+0x12c0>)
 800dc34:	881b      	ldrh	r3, [r3, #0]
 800dc36:	b21b      	sxth	r3, r3
 800dc38:	ee07 3a90 	vmov	s15, r3
 800dc3c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800dc40:	4b3d      	ldr	r3, [pc, #244]	; (800dd38 <HAL_TIM_PeriodElapsedCallback+0x12c8>)
 800dc42:	edd3 7a00 	vldr	s15, [r3]
 800dc46:	ee37 7a27 	vadd.f32	s14, s14, s15
 800dc4a:	4b32      	ldr	r3, [pc, #200]	; (800dd14 <HAL_TIM_PeriodElapsedCallback+0x12a4>)
 800dc4c:	881b      	ldrh	r3, [r3, #0]
 800dc4e:	b21b      	sxth	r3, r3
 800dc50:	ee07 3a90 	vmov	s15, r3
 800dc54:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800dc58:	ee77 7a27 	vadd.f32	s15, s14, s15
 800dc5c:	4b36      	ldr	r3, [pc, #216]	; (800dd38 <HAL_TIM_PeriodElapsedCallback+0x12c8>)
 800dc5e:	edc3 7a00 	vstr	s15, [r3]
				pulse_r = pulse_r + dgr + dwr;
 800dc62:	4b34      	ldr	r3, [pc, #208]	; (800dd34 <HAL_TIM_PeriodElapsedCallback+0x12c4>)
 800dc64:	881b      	ldrh	r3, [r3, #0]
 800dc66:	b21b      	sxth	r3, r3
 800dc68:	ee07 3a90 	vmov	s15, r3
 800dc6c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800dc70:	4b32      	ldr	r3, [pc, #200]	; (800dd3c <HAL_TIM_PeriodElapsedCallback+0x12cc>)
 800dc72:	edd3 7a00 	vldr	s15, [r3]
 800dc76:	ee37 7a27 	vadd.f32	s14, s14, s15
 800dc7a:	4b27      	ldr	r3, [pc, #156]	; (800dd18 <HAL_TIM_PeriodElapsedCallback+0x12a8>)
 800dc7c:	881b      	ldrh	r3, [r3, #0]
 800dc7e:	b21b      	sxth	r3, r3
 800dc80:	ee07 3a90 	vmov	s15, r3
 800dc84:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800dc88:	ee77 7a27 	vadd.f32	s15, s14, s15
 800dc8c:	4b2b      	ldr	r3, [pc, #172]	; (800dd3c <HAL_TIM_PeriodElapsedCallback+0x12cc>)
 800dc8e:	edc3 7a00 	vstr	s15, [r3]
//				pulse_l = pulse_l + dwl;
//				pulse_r = pulse_r + dwr;
			}
			pulse_l = min(max(pulse_l, -1000), 1000);
 800dc92:	4b29      	ldr	r3, [pc, #164]	; (800dd38 <HAL_TIM_PeriodElapsedCallback+0x12c8>)
 800dc94:	edd3 7a00 	vldr	s15, [r3]
 800dc98:	ed9f 7a29 	vldr	s14, [pc, #164]	; 800dd40 <HAL_TIM_PeriodElapsedCallback+0x12d0>
 800dc9c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800dca0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dca4:	bfcc      	ite	gt
 800dca6:	2301      	movgt	r3, #1
 800dca8:	2300      	movle	r3, #0
 800dcaa:	b2db      	uxtb	r3, r3
 800dcac:	f083 0301 	eor.w	r3, r3, #1
 800dcb0:	b2db      	uxtb	r3, r3
 800dcb2:	2b00      	cmp	r3, #0
 800dcb4:	d111      	bne.n	800dcda <HAL_TIM_PeriodElapsedCallback+0x126a>
 800dcb6:	4b20      	ldr	r3, [pc, #128]	; (800dd38 <HAL_TIM_PeriodElapsedCallback+0x12c8>)
 800dcb8:	edd3 7a00 	vldr	s15, [r3]
 800dcbc:	ed9f 7a21 	vldr	s14, [pc, #132]	; 800dd44 <HAL_TIM_PeriodElapsedCallback+0x12d4>
 800dcc0:	eef4 7ac7 	vcmpe.f32	s15, s14
 800dcc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dcc8:	bfcc      	ite	gt
 800dcca:	2301      	movgt	r3, #1
 800dccc:	2300      	movle	r3, #0
 800dcce:	b2db      	uxtb	r3, r3
 800dcd0:	f083 0301 	eor.w	r3, r3, #1
 800dcd4:	b2db      	uxtb	r3, r3
 800dcd6:	2b00      	cmp	r3, #0
 800dcd8:	d038      	beq.n	800dd4c <HAL_TIM_PeriodElapsedCallback+0x12dc>
 800dcda:	4b17      	ldr	r3, [pc, #92]	; (800dd38 <HAL_TIM_PeriodElapsedCallback+0x12c8>)
 800dcdc:	edd3 7a00 	vldr	s15, [r3]
 800dce0:	ed9f 7a17 	vldr	s14, [pc, #92]	; 800dd40 <HAL_TIM_PeriodElapsedCallback+0x12d0>
 800dce4:	eef4 7ac7 	vcmpe.f32	s15, s14
 800dce8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dcec:	dd2c      	ble.n	800dd48 <HAL_TIM_PeriodElapsedCallback+0x12d8>
 800dcee:	4b12      	ldr	r3, [pc, #72]	; (800dd38 <HAL_TIM_PeriodElapsedCallback+0x12c8>)
 800dcf0:	681b      	ldr	r3, [r3, #0]
 800dcf2:	e02c      	b.n	800dd4e <HAL_TIM_PeriodElapsedCallback+0x12de>
 800dcf4:	f3af 8000 	nop.w
 800dcf8:	33333334 	.word	0x33333334
 800dcfc:	bfc33333 	.word	0xbfc33333
 800dd00:	33333334 	.word	0x33333334
 800dd04:	3fc33333 	.word	0x3fc33333
 800dd08:	20000bb2 	.word	0x20000bb2
 800dd0c:	20000f64 	.word	0x20000f64
 800dd10:	fffffc18 	.word	0xfffffc18
 800dd14:	20000af8 	.word	0x20000af8
 800dd18:	20000f74 	.word	0x20000f74
 800dd1c:	20000f68 	.word	0x20000f68
 800dd20:	20000bf8 	.word	0x20000bf8
 800dd24:	20000b5c 	.word	0x20000b5c
 800dd28:	43480000 	.word	0x43480000
 800dd2c:	20000c10 	.word	0x20000c10
 800dd30:	2000019c 	.word	0x2000019c
 800dd34:	20000b4e 	.word	0x20000b4e
 800dd38:	20000ba8 	.word	0x20000ba8
 800dd3c:	20000780 	.word	0x20000780
 800dd40:	c47a0000 	.word	0xc47a0000
 800dd44:	447a0000 	.word	0x447a0000
 800dd48:	4bb7      	ldr	r3, [pc, #732]	; (800e028 <HAL_TIM_PeriodElapsedCallback+0x15b8>)
 800dd4a:	e000      	b.n	800dd4e <HAL_TIM_PeriodElapsedCallback+0x12de>
 800dd4c:	4bb7      	ldr	r3, [pc, #732]	; (800e02c <HAL_TIM_PeriodElapsedCallback+0x15bc>)
 800dd4e:	4ab8      	ldr	r2, [pc, #736]	; (800e030 <HAL_TIM_PeriodElapsedCallback+0x15c0>)
 800dd50:	6013      	str	r3, [r2, #0]
			pulse_r = min(max(pulse_r, -1000), 1000);
 800dd52:	4bb8      	ldr	r3, [pc, #736]	; (800e034 <HAL_TIM_PeriodElapsedCallback+0x15c4>)
 800dd54:	edd3 7a00 	vldr	s15, [r3]
 800dd58:	ed9f 7ab7 	vldr	s14, [pc, #732]	; 800e038 <HAL_TIM_PeriodElapsedCallback+0x15c8>
 800dd5c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800dd60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dd64:	bfcc      	ite	gt
 800dd66:	2301      	movgt	r3, #1
 800dd68:	2300      	movle	r3, #0
 800dd6a:	b2db      	uxtb	r3, r3
 800dd6c:	f083 0301 	eor.w	r3, r3, #1
 800dd70:	b2db      	uxtb	r3, r3
 800dd72:	2b00      	cmp	r3, #0
 800dd74:	d111      	bne.n	800dd9a <HAL_TIM_PeriodElapsedCallback+0x132a>
 800dd76:	4baf      	ldr	r3, [pc, #700]	; (800e034 <HAL_TIM_PeriodElapsedCallback+0x15c4>)
 800dd78:	edd3 7a00 	vldr	s15, [r3]
 800dd7c:	ed9f 7aaf 	vldr	s14, [pc, #700]	; 800e03c <HAL_TIM_PeriodElapsedCallback+0x15cc>
 800dd80:	eef4 7ac7 	vcmpe.f32	s15, s14
 800dd84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dd88:	bfcc      	ite	gt
 800dd8a:	2301      	movgt	r3, #1
 800dd8c:	2300      	movle	r3, #0
 800dd8e:	b2db      	uxtb	r3, r3
 800dd90:	f083 0301 	eor.w	r3, r3, #1
 800dd94:	b2db      	uxtb	r3, r3
 800dd96:	2b00      	cmp	r3, #0
 800dd98:	d00e      	beq.n	800ddb8 <HAL_TIM_PeriodElapsedCallback+0x1348>
 800dd9a:	4ba6      	ldr	r3, [pc, #664]	; (800e034 <HAL_TIM_PeriodElapsedCallback+0x15c4>)
 800dd9c:	edd3 7a00 	vldr	s15, [r3]
 800dda0:	ed9f 7aa5 	vldr	s14, [pc, #660]	; 800e038 <HAL_TIM_PeriodElapsedCallback+0x15c8>
 800dda4:	eef4 7ac7 	vcmpe.f32	s15, s14
 800dda8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ddac:	dd02      	ble.n	800ddb4 <HAL_TIM_PeriodElapsedCallback+0x1344>
 800ddae:	4ba1      	ldr	r3, [pc, #644]	; (800e034 <HAL_TIM_PeriodElapsedCallback+0x15c4>)
 800ddb0:	681b      	ldr	r3, [r3, #0]
 800ddb2:	e002      	b.n	800ddba <HAL_TIM_PeriodElapsedCallback+0x134a>
 800ddb4:	4b9c      	ldr	r3, [pc, #624]	; (800e028 <HAL_TIM_PeriodElapsedCallback+0x15b8>)
 800ddb6:	e000      	b.n	800ddba <HAL_TIM_PeriodElapsedCallback+0x134a>
 800ddb8:	4b9c      	ldr	r3, [pc, #624]	; (800e02c <HAL_TIM_PeriodElapsedCallback+0x15bc>)
 800ddba:	4a9e      	ldr	r2, [pc, #632]	; (800e034 <HAL_TIM_PeriodElapsedCallback+0x15c4>)
 800ddbc:	6013      	str	r3, [r2, #0]

			if(pulse_l > 0){
 800ddbe:	4b9c      	ldr	r3, [pc, #624]	; (800e030 <HAL_TIM_PeriodElapsedCallback+0x15c0>)
 800ddc0:	edd3 7a00 	vldr	s15, [r3]
 800ddc4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800ddc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ddcc:	dd17      	ble.n	800ddfe <HAL_TIM_PeriodElapsedCallback+0x138e>
				drive_dir(0, 0);
 800ddce:	2100      	movs	r1, #0
 800ddd0:	2000      	movs	r0, #0
 800ddd2:	f7f7 f815 	bl	8004e00 <drive_dir>
				ConfigOC.Pulse = pulse_l;
 800ddd6:	4b96      	ldr	r3, [pc, #600]	; (800e030 <HAL_TIM_PeriodElapsedCallback+0x15c0>)
 800ddd8:	edd3 7a00 	vldr	s15, [r3]
 800dddc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800dde0:	ee17 3a90 	vmov	r3, s15
 800dde4:	60fb      	str	r3, [r7, #12]
				HAL_TIM_PWM_ConfigChannel(&htim2, &ConfigOC, TIM_CHANNEL_1);
 800dde6:	f107 0308 	add.w	r3, r7, #8
 800ddea:	2200      	movs	r2, #0
 800ddec:	4619      	mov	r1, r3
 800ddee:	4894      	ldr	r0, [pc, #592]	; (800e040 <HAL_TIM_PeriodElapsedCallback+0x15d0>)
 800ddf0:	f7f5 feec 	bl	8003bcc <HAL_TIM_PWM_ConfigChannel>
				HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_1);
 800ddf4:	2100      	movs	r1, #0
 800ddf6:	4892      	ldr	r0, [pc, #584]	; (800e040 <HAL_TIM_PeriodElapsedCallback+0x15d0>)
 800ddf8:	f7f5 fc80 	bl	80036fc <HAL_TIM_PWM_Start>
 800ddfc:	e020      	b.n	800de40 <HAL_TIM_PeriodElapsedCallback+0x13d0>
			}
			else if(pulse_l < 0){
 800ddfe:	4b8c      	ldr	r3, [pc, #560]	; (800e030 <HAL_TIM_PeriodElapsedCallback+0x15c0>)
 800de00:	edd3 7a00 	vldr	s15, [r3]
 800de04:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800de08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800de0c:	d518      	bpl.n	800de40 <HAL_TIM_PeriodElapsedCallback+0x13d0>
				drive_dir(0, 1);
 800de0e:	2101      	movs	r1, #1
 800de10:	2000      	movs	r0, #0
 800de12:	f7f6 fff5 	bl	8004e00 <drive_dir>
				ConfigOC.Pulse = -pulse_l;
 800de16:	4b86      	ldr	r3, [pc, #536]	; (800e030 <HAL_TIM_PeriodElapsedCallback+0x15c0>)
 800de18:	edd3 7a00 	vldr	s15, [r3]
 800de1c:	eef1 7a67 	vneg.f32	s15, s15
 800de20:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800de24:	ee17 3a90 	vmov	r3, s15
 800de28:	60fb      	str	r3, [r7, #12]
				HAL_TIM_PWM_ConfigChannel(&htim2, &ConfigOC, TIM_CHANNEL_1);
 800de2a:	f107 0308 	add.w	r3, r7, #8
 800de2e:	2200      	movs	r2, #0
 800de30:	4619      	mov	r1, r3
 800de32:	4883      	ldr	r0, [pc, #524]	; (800e040 <HAL_TIM_PeriodElapsedCallback+0x15d0>)
 800de34:	f7f5 feca 	bl	8003bcc <HAL_TIM_PWM_ConfigChannel>
				HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_1);
 800de38:	2100      	movs	r1, #0
 800de3a:	4881      	ldr	r0, [pc, #516]	; (800e040 <HAL_TIM_PeriodElapsedCallback+0x15d0>)
 800de3c:	f7f5 fc5e 	bl	80036fc <HAL_TIM_PWM_Start>
			}

			if(pulse_r > 0){
 800de40:	4b7c      	ldr	r3, [pc, #496]	; (800e034 <HAL_TIM_PeriodElapsedCallback+0x15c4>)
 800de42:	edd3 7a00 	vldr	s15, [r3]
 800de46:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800de4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800de4e:	dd17      	ble.n	800de80 <HAL_TIM_PeriodElapsedCallback+0x1410>
				drive_dir(1, 0);
 800de50:	2100      	movs	r1, #0
 800de52:	2001      	movs	r0, #1
 800de54:	f7f6 ffd4 	bl	8004e00 <drive_dir>
				ConfigOC.Pulse = pulse_r;
 800de58:	4b76      	ldr	r3, [pc, #472]	; (800e034 <HAL_TIM_PeriodElapsedCallback+0x15c4>)
 800de5a:	edd3 7a00 	vldr	s15, [r3]
 800de5e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800de62:	ee17 3a90 	vmov	r3, s15
 800de66:	60fb      	str	r3, [r7, #12]
				HAL_TIM_PWM_ConfigChannel(&htim2, &ConfigOC, TIM_CHANNEL_4);
 800de68:	f107 0308 	add.w	r3, r7, #8
 800de6c:	220c      	movs	r2, #12
 800de6e:	4619      	mov	r1, r3
 800de70:	4873      	ldr	r0, [pc, #460]	; (800e040 <HAL_TIM_PeriodElapsedCallback+0x15d0>)
 800de72:	f7f5 feab 	bl	8003bcc <HAL_TIM_PWM_ConfigChannel>
				HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_4);
 800de76:	210c      	movs	r1, #12
 800de78:	4871      	ldr	r0, [pc, #452]	; (800e040 <HAL_TIM_PeriodElapsedCallback+0x15d0>)
 800de7a:	f7f5 fc3f 	bl	80036fc <HAL_TIM_PWM_Start>
 800de7e:	e020      	b.n	800dec2 <HAL_TIM_PeriodElapsedCallback+0x1452>
			}
			else if(pulse_r < 0){
 800de80:	4b6c      	ldr	r3, [pc, #432]	; (800e034 <HAL_TIM_PeriodElapsedCallback+0x15c4>)
 800de82:	edd3 7a00 	vldr	s15, [r3]
 800de86:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800de8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800de8e:	d518      	bpl.n	800dec2 <HAL_TIM_PeriodElapsedCallback+0x1452>
				drive_dir(1, 1);
 800de90:	2101      	movs	r1, #1
 800de92:	2001      	movs	r0, #1
 800de94:	f7f6 ffb4 	bl	8004e00 <drive_dir>
				ConfigOC.Pulse = -pulse_r;
 800de98:	4b66      	ldr	r3, [pc, #408]	; (800e034 <HAL_TIM_PeriodElapsedCallback+0x15c4>)
 800de9a:	edd3 7a00 	vldr	s15, [r3]
 800de9e:	eef1 7a67 	vneg.f32	s15, s15
 800dea2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800dea6:	ee17 3a90 	vmov	r3, s15
 800deaa:	60fb      	str	r3, [r7, #12]
				HAL_TIM_PWM_ConfigChannel(&htim2, &ConfigOC, TIM_CHANNEL_4);
 800deac:	f107 0308 	add.w	r3, r7, #8
 800deb0:	220c      	movs	r2, #12
 800deb2:	4619      	mov	r1, r3
 800deb4:	4862      	ldr	r0, [pc, #392]	; (800e040 <HAL_TIM_PeriodElapsedCallback+0x15d0>)
 800deb6:	f7f5 fe89 	bl	8003bcc <HAL_TIM_PWM_ConfigChannel>
				HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_4);
 800deba:	210c      	movs	r1, #12
 800debc:	4860      	ldr	r0, [pc, #384]	; (800e040 <HAL_TIM_PeriodElapsedCallback+0x15d0>)
 800debe:	f7f5 fc1d 	bl	80036fc <HAL_TIM_PWM_Start>
			}
			//wall check
//			if(!MF.FLAG.SCND){
				//----look forward----
				if(ad_fr > WALL_BASE_FR || ad_fl > WALL_BASE_FL){
 800dec2:	4b60      	ldr	r3, [pc, #384]	; (800e044 <HAL_TIM_PeriodElapsedCallback+0x15d4>)
 800dec4:	681b      	ldr	r3, [r3, #0]
 800dec6:	2b78      	cmp	r3, #120	; 0x78
 800dec8:	d803      	bhi.n	800ded2 <HAL_TIM_PeriodElapsedCallback+0x1462>
 800deca:	4b5f      	ldr	r3, [pc, #380]	; (800e048 <HAL_TIM_PeriodElapsedCallback+0x15d8>)
 800decc:	681b      	ldr	r3, [r3, #0]
 800dece:	2bc8      	cmp	r3, #200	; 0xc8
 800ded0:	d905      	bls.n	800dede <HAL_TIM_PeriodElapsedCallback+0x146e>
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 800ded2:	2201      	movs	r2, #1
 800ded4:	2140      	movs	r1, #64	; 0x40
 800ded6:	485d      	ldr	r0, [pc, #372]	; (800e04c <HAL_TIM_PeriodElapsedCallback+0x15dc>)
 800ded8:	f7f4 fa14 	bl	8002304 <HAL_GPIO_WritePin>
 800dedc:	e004      	b.n	800dee8 <HAL_TIM_PeriodElapsedCallback+0x1478>
				}else{
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 800dede:	2200      	movs	r2, #0
 800dee0:	2140      	movs	r1, #64	; 0x40
 800dee2:	485a      	ldr	r0, [pc, #360]	; (800e04c <HAL_TIM_PeriodElapsedCallback+0x15dc>)
 800dee4:	f7f4 fa0e 	bl	8002304 <HAL_GPIO_WritePin>
				}
				//----look forwardL----
				if(ad_fl > WALL_BASE_FL){
 800dee8:	4b57      	ldr	r3, [pc, #348]	; (800e048 <HAL_TIM_PeriodElapsedCallback+0x15d8>)
 800deea:	681b      	ldr	r3, [r3, #0]
 800deec:	2bc8      	cmp	r3, #200	; 0xc8
 800deee:	d905      	bls.n	800defc <HAL_TIM_PeriodElapsedCallback+0x148c>
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 800def0:	2201      	movs	r2, #1
 800def2:	2110      	movs	r1, #16
 800def4:	4855      	ldr	r0, [pc, #340]	; (800e04c <HAL_TIM_PeriodElapsedCallback+0x15dc>)
 800def6:	f7f4 fa05 	bl	8002304 <HAL_GPIO_WritePin>
 800defa:	e004      	b.n	800df06 <HAL_TIM_PeriodElapsedCallback+0x1496>
				}else{
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 800defc:	2200      	movs	r2, #0
 800defe:	2110      	movs	r1, #16
 800df00:	4852      	ldr	r0, [pc, #328]	; (800e04c <HAL_TIM_PeriodElapsedCallback+0x15dc>)
 800df02:	f7f4 f9ff 	bl	8002304 <HAL_GPIO_WritePin>
				}
				//----look forward-R---
				if(ad_fr > WALL_BASE_FR){
 800df06:	4b4f      	ldr	r3, [pc, #316]	; (800e044 <HAL_TIM_PeriodElapsedCallback+0x15d4>)
 800df08:	681b      	ldr	r3, [r3, #0]
 800df0a:	2b78      	cmp	r3, #120	; 0x78
 800df0c:	d905      	bls.n	800df1a <HAL_TIM_PeriodElapsedCallback+0x14aa>
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);
 800df0e:	2201      	movs	r2, #1
 800df10:	2180      	movs	r1, #128	; 0x80
 800df12:	484e      	ldr	r0, [pc, #312]	; (800e04c <HAL_TIM_PeriodElapsedCallback+0x15dc>)
 800df14:	f7f4 f9f6 	bl	8002304 <HAL_GPIO_WritePin>
 800df18:	e00d      	b.n	800df36 <HAL_TIM_PeriodElapsedCallback+0x14c6>
				}else{
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 800df1a:	2200      	movs	r2, #0
 800df1c:	2180      	movs	r1, #128	; 0x80
 800df1e:	484b      	ldr	r0, [pc, #300]	; (800e04c <HAL_TIM_PeriodElapsedCallback+0x15dc>)
 800df20:	f7f4 f9f0 	bl	8002304 <HAL_GPIO_WritePin>
 800df24:	e007      	b.n	800df36 <HAL_TIM_PeriodElapsedCallback+0x14c6>
				}
		}else{
			drive_dir(0, 2);
 800df26:	2102      	movs	r1, #2
 800df28:	2000      	movs	r0, #0
 800df2a:	f7f6 ff69 	bl	8004e00 <drive_dir>
			drive_dir(1, 2);
 800df2e:	2102      	movs	r1, #2
 800df30:	2001      	movs	r0, #1
 800df32:	f7f6 ff65 	bl	8004e00 <drive_dir>
		}


		//wall check
		//----look right----
		if(ad_r > WALL_BASE_R){
 800df36:	4b46      	ldr	r3, [pc, #280]	; (800e050 <HAL_TIM_PeriodElapsedCallback+0x15e0>)
 800df38:	681b      	ldr	r3, [r3, #0]
 800df3a:	2b78      	cmp	r3, #120	; 0x78
 800df3c:	d906      	bls.n	800df4c <HAL_TIM_PeriodElapsedCallback+0x14dc>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 800df3e:	2201      	movs	r2, #1
 800df40:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800df44:	4843      	ldr	r0, [pc, #268]	; (800e054 <HAL_TIM_PeriodElapsedCallback+0x15e4>)
 800df46:	f7f4 f9dd 	bl	8002304 <HAL_GPIO_WritePin>
 800df4a:	e005      	b.n	800df58 <HAL_TIM_PeriodElapsedCallback+0x14e8>
		}else{
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 800df4c:	2200      	movs	r2, #0
 800df4e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800df52:	4840      	ldr	r0, [pc, #256]	; (800e054 <HAL_TIM_PeriodElapsedCallback+0x15e4>)
 800df54:	f7f4 f9d6 	bl	8002304 <HAL_GPIO_WritePin>
		}
		//----look left----
		if(ad_l > WALL_BASE_L){
 800df58:	4b3f      	ldr	r3, [pc, #252]	; (800e058 <HAL_TIM_PeriodElapsedCallback+0x15e8>)
 800df5a:	681b      	ldr	r3, [r3, #0]
 800df5c:	2b8c      	cmp	r3, #140	; 0x8c
 800df5e:	d905      	bls.n	800df6c <HAL_TIM_PeriodElapsedCallback+0x14fc>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);
 800df60:	2201      	movs	r2, #1
 800df62:	2104      	movs	r1, #4
 800df64:	483d      	ldr	r0, [pc, #244]	; (800e05c <HAL_TIM_PeriodElapsedCallback+0x15ec>)
 800df66:	f7f4 f9cd 	bl	8002304 <HAL_GPIO_WritePin>
 800df6a:	e004      	b.n	800df76 <HAL_TIM_PeriodElapsedCallback+0x1506>
		}else{
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 800df6c:	2200      	movs	r2, #0
 800df6e:	2104      	movs	r1, #4
 800df70:	483a      	ldr	r0, [pc, #232]	; (800e05c <HAL_TIM_PeriodElapsedCallback+0x15ec>)
 800df72:	f7f4 f9c7 	bl	8002304 <HAL_GPIO_WritePin>
		}


		//battery check
		if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12) == GPIO_PIN_RESET) {	//2.1V以下で赤ランプ点灯=>LiPoが約7Vを下回るとランプ点灯
 800df76:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800df7a:	4836      	ldr	r0, [pc, #216]	; (800e054 <HAL_TIM_PeriodElapsedCallback+0x15e4>)
 800df7c:	f7f4 f9aa 	bl	80022d4 <HAL_GPIO_ReadPin>
 800df80:	4603      	mov	r3, r0
 800df82:	2b00      	cmp	r3, #0
 800df84:	d105      	bne.n	800df92 <HAL_TIM_PeriodElapsedCallback+0x1522>
		   HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_SET);
 800df86:	2201      	movs	r2, #1
 800df88:	2108      	movs	r1, #8
 800df8a:	4834      	ldr	r0, [pc, #208]	; (800e05c <HAL_TIM_PeriodElapsedCallback+0x15ec>)
 800df8c:	f7f4 f9ba 	bl	8002304 <HAL_GPIO_WritePin>
 800df90:	e004      	b.n	800df9c <HAL_TIM_PeriodElapsedCallback+0x152c>
		} else {
		   HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
 800df92:	2200      	movs	r2, #0
 800df94:	2108      	movs	r1, #8
 800df96:	4831      	ldr	r0, [pc, #196]	; (800e05c <HAL_TIM_PeriodElapsedCallback+0x15ec>)
 800df98:	f7f4 f9b4 	bl	8002304 <HAL_GPIO_WritePin>
		}


		//fail safe
		if(degree_z >= target_degree_z+270 || degree_z <= target_degree_z-270 || dist_r > 500 || dist_l > 500){	//270度以上回転発生でFail Safe
 800df9c:	4b30      	ldr	r3, [pc, #192]	; (800e060 <HAL_TIM_PeriodElapsedCallback+0x15f0>)
 800df9e:	edd3 7a00 	vldr	s15, [r3]
 800dfa2:	ed9f 7a30 	vldr	s14, [pc, #192]	; 800e064 <HAL_TIM_PeriodElapsedCallback+0x15f4>
 800dfa6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800dfaa:	4b2f      	ldr	r3, [pc, #188]	; (800e068 <HAL_TIM_PeriodElapsedCallback+0x15f8>)
 800dfac:	edd3 7a00 	vldr	s15, [r3]
 800dfb0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800dfb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dfb8:	d923      	bls.n	800e002 <HAL_TIM_PeriodElapsedCallback+0x1592>
 800dfba:	4b29      	ldr	r3, [pc, #164]	; (800e060 <HAL_TIM_PeriodElapsedCallback+0x15f0>)
 800dfbc:	edd3 7a00 	vldr	s15, [r3]
 800dfc0:	ed9f 7a28 	vldr	s14, [pc, #160]	; 800e064 <HAL_TIM_PeriodElapsedCallback+0x15f4>
 800dfc4:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800dfc8:	4b27      	ldr	r3, [pc, #156]	; (800e068 <HAL_TIM_PeriodElapsedCallback+0x15f8>)
 800dfca:	edd3 7a00 	vldr	s15, [r3]
 800dfce:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800dfd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dfd6:	da14      	bge.n	800e002 <HAL_TIM_PeriodElapsedCallback+0x1592>
 800dfd8:	4b24      	ldr	r3, [pc, #144]	; (800e06c <HAL_TIM_PeriodElapsedCallback+0x15fc>)
 800dfda:	edd3 7a00 	vldr	s15, [r3]
 800dfde:	ed9f 7a24 	vldr	s14, [pc, #144]	; 800e070 <HAL_TIM_PeriodElapsedCallback+0x1600>
 800dfe2:	eef4 7ac7 	vcmpe.f32	s15, s14
 800dfe6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dfea:	dc0a      	bgt.n	800e002 <HAL_TIM_PeriodElapsedCallback+0x1592>
 800dfec:	4b21      	ldr	r3, [pc, #132]	; (800e074 <HAL_TIM_PeriodElapsedCallback+0x1604>)
 800dfee:	edd3 7a00 	vldr	s15, [r3]
 800dff2:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 800e070 <HAL_TIM_PeriodElapsedCallback+0x1600>
 800dff6:	eef4 7ac7 	vcmpe.f32	s15, s14
 800dffa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dffe:	dc00      	bgt.n	800e002 <HAL_TIM_PeriodElapsedCallback+0x1592>
			   drive_dir(1, 2);
			   full_led_write(RED);
		   }
		}
	}
}
 800e000:	e00b      	b.n	800e01a <HAL_TIM_PeriodElapsedCallback+0x15aa>
			   drive_dir(0, 2);
 800e002:	2102      	movs	r1, #2
 800e004:	2000      	movs	r0, #0
 800e006:	f7f6 fefb 	bl	8004e00 <drive_dir>
			   drive_dir(1, 2);
 800e00a:	2102      	movs	r1, #2
 800e00c:	2001      	movs	r0, #1
 800e00e:	f7f6 fef7 	bl	8004e00 <drive_dir>
			   full_led_write(RED);
 800e012:	2001      	movs	r0, #1
 800e014:	f003 fdf4 	bl	8011c00 <full_led_write>
			   drive_dir(0, 2);
 800e018:	e7f3      	b.n	800e002 <HAL_TIM_PeriodElapsedCallback+0x1592>
}
 800e01a:	bf00      	nop
 800e01c:	3730      	adds	r7, #48	; 0x30
 800e01e:	46bd      	mov	sp, r7
 800e020:	ecbd 8b02 	vpop	{d8}
 800e024:	bdb0      	pop	{r4, r5, r7, pc}
 800e026:	bf00      	nop
 800e028:	c47a0000 	.word	0xc47a0000
 800e02c:	447a0000 	.word	0x447a0000
 800e030:	20000ba8 	.word	0x20000ba8
 800e034:	20000780 	.word	0x20000780
 800e038:	c47a0000 	.word	0xc47a0000
 800e03c:	447a0000 	.word	0x447a0000
 800e040:	20000c14 	.word	0x20000c14
 800e044:	20000c00 	.word	0x20000c00
 800e048:	20000d54 	.word	0x20000d54
 800e04c:	40020000 	.word	0x40020000
 800e050:	20000f60 	.word	0x20000f60
 800e054:	40020400 	.word	0x40020400
 800e058:	20000afc 	.word	0x20000afc
 800e05c:	40020800 	.word	0x40020800
 800e060:	20000bf8 	.word	0x20000bf8
 800e064:	43870000 	.word	0x43870000
 800e068:	20000b5c 	.word	0x20000b5c
 800e06c:	20000aec 	.word	0x20000aec
 800e070:	43fa0000 	.word	0x43fa0000
 800e074:	200015c4 	.word	0x200015c4

0800e078 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800e078:	b580      	push	{r7, lr}
 800e07a:	b082      	sub	sp, #8
 800e07c:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800e07e:	f7f2 ff5b 	bl	8000f38 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800e082:	f000 f917 	bl	800e2b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800e086:	f000 fc09 	bl	800e89c <MX_GPIO_Init>
  MX_ADC1_Init();
 800e08a:	f000 f97d 	bl	800e388 <MX_ADC1_Init>
  MX_TIM2_Init();
 800e08e:	f000 fa03 	bl	800e498 <MX_TIM2_Init>
  MX_TIM3_Init();
 800e092:	f000 fa81 	bl	800e598 <MX_TIM3_Init>
  MX_TIM4_Init();
 800e096:	f000 faf5 	bl	800e684 <MX_TIM4_Init>
  MX_TIM6_Init();
 800e09a:	f000 fb47 	bl	800e72c <MX_TIM6_Init>
  MX_TIM8_Init();
 800e09e:	f000 fb7b 	bl	800e798 <MX_TIM8_Init>
  MX_SPI3_Init();
 800e0a2:	f000 f9c3 	bl	800e42c <MX_SPI3_Init>
  MX_USART1_UART_Init();
 800e0a6:	f000 fbcf 	bl	800e848 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  drive_init();
 800e0aa:	f7f6 fdd7 	bl	8004c5c <drive_init>
  gyro_init();
 800e0ae:	f7fe fb03 	bl	800c6b8 <gyro_init>
  search_init();
 800e0b2:	f000 fd21 	bl	800eaf8 <search_init>
  sensor_init();
 800e0b6:	f003 fce3 	bl	8011a80 <sensor_init>

  printf("*** Welcome to WMMC ! ***\n");
 800e0ba:	4870      	ldr	r0, [pc, #448]	; (800e27c <main+0x204>)
 800e0bc:	f004 fba8 	bl	8012810 <puts>

  setbuf(stdout, NULL);
 800e0c0:	4b6f      	ldr	r3, [pc, #444]	; (800e280 <main+0x208>)
 800e0c2:	681b      	ldr	r3, [r3, #0]
 800e0c4:	689b      	ldr	r3, [r3, #8]
 800e0c6:	2100      	movs	r1, #0
 800e0c8:	4618      	mov	r0, r3
 800e0ca:	f004 fba9 	bl	8012820 <setbuf>
  HAL_TIM_Encoder_Start(&htim4,TIM_CHANNEL_ALL);
 800e0ce:	213c      	movs	r1, #60	; 0x3c
 800e0d0:	486c      	ldr	r0, [pc, #432]	; (800e284 <main+0x20c>)
 800e0d2:	f7f5 fc3b 	bl	800394c <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim8,TIM_CHANNEL_ALL);
 800e0d6:	213c      	movs	r1, #60	; 0x3c
 800e0d8:	486b      	ldr	r0, [pc, #428]	; (800e288 <main+0x210>)
 800e0da:	f7f5 fc37 	bl	800394c <HAL_TIM_Encoder_Start>
  HAL_TIM_Base_Start_IT(&htim6);
 800e0de:	486b      	ldr	r0, [pc, #428]	; (800e28c <main+0x214>)
 800e0e0:	f7f5 fab3 	bl	800364a <HAL_TIM_Base_Start_IT>

  int mode = 0;
 800e0e4:	2300      	movs	r3, #0
 800e0e6:	607b      	str	r3, [r7, #4]
  printf("Mode : %d\n", mode);
 800e0e8:	6879      	ldr	r1, [r7, #4]
 800e0ea:	4869      	ldr	r0, [pc, #420]	; (800e290 <main+0x218>)
 800e0ec:	f004 fb1c 	bl	8012728 <iprintf>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 800e0f0:	687b      	ldr	r3, [r7, #4]
 800e0f2:	b2db      	uxtb	r3, r3
 800e0f4:	f003 0301 	and.w	r3, r3, #1
 800e0f8:	b2d8      	uxtb	r0, r3
 800e0fa:	687b      	ldr	r3, [r7, #4]
 800e0fc:	b2db      	uxtb	r3, r3
 800e0fe:	f003 0302 	and.w	r3, r3, #2
 800e102:	b2d9      	uxtb	r1, r3
 800e104:	687b      	ldr	r3, [r7, #4]
 800e106:	b2db      	uxtb	r3, r3
 800e108:	f003 0304 	and.w	r3, r3, #4
 800e10c:	b2db      	uxtb	r3, r3
 800e10e:	461a      	mov	r2, r3
 800e110:	f003 fd3c 	bl	8011b8c <led_write>
	  if(dist_r >= 20){
 800e114:	4b5f      	ldr	r3, [pc, #380]	; (800e294 <main+0x21c>)
 800e116:	edd3 7a00 	vldr	s15, [r3]
 800e11a:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 800e11e:	eef4 7ac7 	vcmpe.f32	s15, s14
 800e122:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e126:	db0f      	blt.n	800e148 <main+0xd0>
		  mode++;
 800e128:	687b      	ldr	r3, [r7, #4]
 800e12a:	3301      	adds	r3, #1
 800e12c:	607b      	str	r3, [r7, #4]
		  dist_r = 0;
 800e12e:	4b59      	ldr	r3, [pc, #356]	; (800e294 <main+0x21c>)
 800e130:	f04f 0200 	mov.w	r2, #0
 800e134:	601a      	str	r2, [r3, #0]
		  if(mode > 7){
 800e136:	687b      	ldr	r3, [r7, #4]
 800e138:	2b07      	cmp	r3, #7
 800e13a:	dd01      	ble.n	800e140 <main+0xc8>
			  mode = 0;
 800e13c:	2300      	movs	r3, #0
 800e13e:	607b      	str	r3, [r7, #4]
		  }
		  printf("Mode : %d\n", mode);
 800e140:	6879      	ldr	r1, [r7, #4]
 800e142:	4853      	ldr	r0, [pc, #332]	; (800e290 <main+0x218>)
 800e144:	f004 faf0 	bl	8012728 <iprintf>
		  //buzzer(pitagola2[mode-1][0], pitagola2[mode-1][1]);
		  //buzzer(pitagola[2][0], pitagola[2][1]);
	  }
	  if(dist_r <= -20){
 800e148:	4b52      	ldr	r3, [pc, #328]	; (800e294 <main+0x21c>)
 800e14a:	edd3 7a00 	vldr	s15, [r3]
 800e14e:	eebb 7a04 	vmov.f32	s14, #180	; 0xc1a00000 -20.0
 800e152:	eef4 7ac7 	vcmpe.f32	s15, s14
 800e156:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e15a:	d80f      	bhi.n	800e17c <main+0x104>
		  mode--;
 800e15c:	687b      	ldr	r3, [r7, #4]
 800e15e:	3b01      	subs	r3, #1
 800e160:	607b      	str	r3, [r7, #4]
		  dist_r = 0;
 800e162:	4b4c      	ldr	r3, [pc, #304]	; (800e294 <main+0x21c>)
 800e164:	f04f 0200 	mov.w	r2, #0
 800e168:	601a      	str	r2, [r3, #0]
		  if(mode < 0){
 800e16a:	687b      	ldr	r3, [r7, #4]
 800e16c:	2b00      	cmp	r3, #0
 800e16e:	da01      	bge.n	800e174 <main+0xfc>
			  mode = 7;
 800e170:	2307      	movs	r3, #7
 800e172:	607b      	str	r3, [r7, #4]
		  }
		  printf("Mode : %d\n", mode);
 800e174:	6879      	ldr	r1, [r7, #4]
 800e176:	4846      	ldr	r0, [pc, #280]	; (800e290 <main+0x218>)
 800e178:	f004 fad6 	bl	8012728 <iprintf>
		  //buzzer(pitagola2[mode-1][0], pitagola2[mode-1][1]);
		  //buzzer(pitagola[2][0], pitagola[2][1]);
	  }
	  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET){
 800e17c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800e180:	4845      	ldr	r0, [pc, #276]	; (800e298 <main+0x220>)
 800e182:	f7f4 f8a7 	bl	80022d4 <HAL_GPIO_ReadPin>
 800e186:	4603      	mov	r3, r0
 800e188:	2b00      	cmp	r3, #0
 800e18a:	d1b1      	bne.n	800e0f0 <main+0x78>
		  HAL_Delay(50);
 800e18c:	2032      	movs	r0, #50	; 0x32
 800e18e:	f7f2 ff45 	bl	800101c <HAL_Delay>
		  while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET);
 800e192:	bf00      	nop
 800e194:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800e198:	483f      	ldr	r0, [pc, #252]	; (800e298 <main+0x220>)
 800e19a:	f7f4 f89b 	bl	80022d4 <HAL_GPIO_ReadPin>
 800e19e:	4603      	mov	r3, r0
 800e1a0:	2b00      	cmp	r3, #0
 800e1a2:	d0f7      	beq.n	800e194 <main+0x11c>
		  switch(mode){
 800e1a4:	687b      	ldr	r3, [r7, #4]
 800e1a6:	2b07      	cmp	r3, #7
 800e1a8:	d8a2      	bhi.n	800e0f0 <main+0x78>
 800e1aa:	a201      	add	r2, pc, #4	; (adr r2, 800e1b0 <main+0x138>)
 800e1ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e1b0:	0800e1d1 	.word	0x0800e1d1
 800e1b4:	0800e1db 	.word	0x0800e1db
 800e1b8:	0800e1e7 	.word	0x0800e1e7
 800e1bc:	0800e1f3 	.word	0x0800e1f3
 800e1c0:	0800e1ff 	.word	0x0800e1ff
 800e1c4:	0800e205 	.word	0x0800e205
 800e1c8:	0800e231 	.word	0x0800e231
 800e1cc:	0800e273 	.word	0x0800e273

		  	  case 0:
		  		  HAL_Delay(5000);
 800e1d0:	f241 3088 	movw	r0, #5000	; 0x1388
 800e1d4:	f7f2 ff22 	bl	800101c <HAL_Delay>
		  		  break;
 800e1d8:	e04e      	b.n	800e278 <main+0x200>

		  	  case 1:
		  		  //----a超新地走行----
		  		  printf("Simple Run.\n");
 800e1da:	4830      	ldr	r0, [pc, #192]	; (800e29c <main+0x224>)
 800e1dc:	f004 fb18 	bl	8012810 <puts>
		  		  //MF.FLAG.WEDGE = 1;
//		  		  simple_run();
		  		  perfect_run();
 800e1e0:	f7fd f81c 	bl	800b21c <perfect_run>
		  		  break;
 800e1e4:	e048      	b.n	800e278 <main+0x200>

		  	  case 2:
		  		  //----aスラローム走行----
		  		  printf("slalom Run.\n");
 800e1e6:	482e      	ldr	r0, [pc, #184]	; (800e2a0 <main+0x228>)
 800e1e8:	f004 fb12 	bl	8012810 <puts>
		  		  //MF.FLAG.WEDGE = 1;
		  		  slalom_run();
 800e1ec:	f7fc fda0 	bl	800ad30 <slalom_run>
		  		  break;
 800e1f0:	e042      	b.n	800e278 <main+0x200>

		  	  case 3:
		  		  //----aスラローム走行&pass圧縮----
				  printf("First Run. (Slalom)\n");
 800e1f2:	482c      	ldr	r0, [pc, #176]	; (800e2a4 <main+0x22c>)
 800e1f4:	f004 fb0c 	bl	8012810 <puts>
		  		  pass_test();
 800e1f8:	f7fb fece 	bl	8009f98 <pass_test>
		  		  break;
 800e1fc:	e03c      	b.n	800e278 <main+0x200>

		  	  case 4:
		  		  //----aテストモード選択----
		  		  test_select();
 800e1fe:	f7fb f937 	bl	8009470 <test_select>
		  		  break;
 800e202:	e039      	b.n	800e278 <main+0x200>

		  	  case 5:
		  		  //----sensor check----
		  		  printf("Sensor Check.\n");
 800e204:	4828      	ldr	r0, [pc, #160]	; (800e2a8 <main+0x230>)
 800e206:	f004 fb03 	bl	8012810 <puts>
		  		  sensor_test();
 800e20a:	f003 fdb5 	bl	8011d78 <sensor_test>
		  		  break;
 800e20e:	e033      	b.n	800e278 <main+0x200>

		  	  case 6:
		  		  //----pitagola sound----
				  while(ad_fl <= WALL_BASE_FL){
					  led_write(1, 1, 1);
 800e210:	2201      	movs	r2, #1
 800e212:	2101      	movs	r1, #1
 800e214:	2001      	movs	r0, #1
 800e216:	f003 fcb9 	bl	8011b8c <led_write>
					  HAL_Delay(200);
 800e21a:	20c8      	movs	r0, #200	; 0xc8
 800e21c:	f7f2 fefe 	bl	800101c <HAL_Delay>
					  led_write(0, 0, 0);
 800e220:	2200      	movs	r2, #0
 800e222:	2100      	movs	r1, #0
 800e224:	2000      	movs	r0, #0
 800e226:	f003 fcb1 	bl	8011b8c <led_write>
					  HAL_Delay(200);
 800e22a:	20c8      	movs	r0, #200	; 0xc8
 800e22c:	f7f2 fef6 	bl	800101c <HAL_Delay>
				  while(ad_fl <= WALL_BASE_FL){
 800e230:	4b1e      	ldr	r3, [pc, #120]	; (800e2ac <main+0x234>)
 800e232:	681b      	ldr	r3, [r3, #0]
 800e234:	2bc8      	cmp	r3, #200	; 0xc8
 800e236:	d9eb      	bls.n	800e210 <main+0x198>
				  }
				  HAL_Delay(200);
 800e238:	20c8      	movs	r0, #200	; 0xc8
 800e23a:	f7f2 feef 	bl	800101c <HAL_Delay>
		  		  }
				  HAL_Delay(2000);
				  for(int i=0; i<m_ok; i++){
		  			  buzzer(mario_ok[i][0], mario_ok[i][1]);
		  		  }
*/				  HAL_Delay(2000);
 800e23e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800e242:	f7f2 feeb 	bl	800101c <HAL_Delay>
				  for(int i=0; i<m_goal; i++){
 800e246:	2300      	movs	r3, #0
 800e248:	603b      	str	r3, [r7, #0]
 800e24a:	e00e      	b.n	800e26a <main+0x1f2>
		  			  buzzer(mario_goal[i][0], mario_goal[i][1]);
 800e24c:	4a18      	ldr	r2, [pc, #96]	; (800e2b0 <main+0x238>)
 800e24e:	683b      	ldr	r3, [r7, #0]
 800e250:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800e254:	4a16      	ldr	r2, [pc, #88]	; (800e2b0 <main+0x238>)
 800e256:	683b      	ldr	r3, [r7, #0]
 800e258:	00db      	lsls	r3, r3, #3
 800e25a:	4413      	add	r3, r2
 800e25c:	685b      	ldr	r3, [r3, #4]
 800e25e:	4619      	mov	r1, r3
 800e260:	f000 fbda 	bl	800ea18 <buzzer>
				  for(int i=0; i<m_goal; i++){
 800e264:	683b      	ldr	r3, [r7, #0]
 800e266:	3301      	adds	r3, #1
 800e268:	603b      	str	r3, [r7, #0]
 800e26a:	683b      	ldr	r3, [r7, #0]
 800e26c:	2b0e      	cmp	r3, #14
 800e26e:	dded      	ble.n	800e24c <main+0x1d4>
		  		  }
		  		  break;
 800e270:	e002      	b.n	800e278 <main+0x200>
		  		  //MF.FLAG.WEDGE = 1;
/*		  		  for(int i=0; i<m_select; i++){
		  			  buzzer(mario_select[i][0], mario_select[i][1]);
		  		  }
*///		  		  perfect_run();
		  		  perfect_slalom();
 800e272:	f7fd fa9f 	bl	800b7b4 <perfect_slalom>
		  		  break;
 800e276:	bf00      	nop
	  led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 800e278:	e73a      	b.n	800e0f0 <main+0x78>
 800e27a:	bf00      	nop
 800e27c:	08013d44 	.word	0x08013d44
 800e280:	20000084 	.word	0x20000084
 800e284:	2000030c 	.word	0x2000030c
 800e288:	200002cc 	.word	0x200002cc
 800e28c:	20000bb4 	.word	0x20000bb4
 800e290:	08013d60 	.word	0x08013d60
 800e294:	20000aec 	.word	0x20000aec
 800e298:	40020000 	.word	0x40020000
 800e29c:	08013d6c 	.word	0x08013d6c
 800e2a0:	08013d78 	.word	0x08013d78
 800e2a4:	08013d84 	.word	0x08013d84
 800e2a8:	08013d98 	.word	0x08013d98
 800e2ac:	20000d54 	.word	0x20000d54
 800e2b0:	20000008 	.word	0x20000008

0800e2b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800e2b4:	b580      	push	{r7, lr}
 800e2b6:	b094      	sub	sp, #80	; 0x50
 800e2b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800e2ba:	f107 0320 	add.w	r3, r7, #32
 800e2be:	2230      	movs	r2, #48	; 0x30
 800e2c0:	2100      	movs	r1, #0
 800e2c2:	4618      	mov	r0, r3
 800e2c4:	f004 fa28 	bl	8012718 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800e2c8:	f107 030c 	add.w	r3, r7, #12
 800e2cc:	2200      	movs	r2, #0
 800e2ce:	601a      	str	r2, [r3, #0]
 800e2d0:	605a      	str	r2, [r3, #4]
 800e2d2:	609a      	str	r2, [r3, #8]
 800e2d4:	60da      	str	r2, [r3, #12]
 800e2d6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800e2d8:	2300      	movs	r3, #0
 800e2da:	60bb      	str	r3, [r7, #8]
 800e2dc:	4b28      	ldr	r3, [pc, #160]	; (800e380 <SystemClock_Config+0xcc>)
 800e2de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e2e0:	4a27      	ldr	r2, [pc, #156]	; (800e380 <SystemClock_Config+0xcc>)
 800e2e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e2e6:	6413      	str	r3, [r2, #64]	; 0x40
 800e2e8:	4b25      	ldr	r3, [pc, #148]	; (800e380 <SystemClock_Config+0xcc>)
 800e2ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e2ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e2f0:	60bb      	str	r3, [r7, #8]
 800e2f2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800e2f4:	2300      	movs	r3, #0
 800e2f6:	607b      	str	r3, [r7, #4]
 800e2f8:	4b22      	ldr	r3, [pc, #136]	; (800e384 <SystemClock_Config+0xd0>)
 800e2fa:	681b      	ldr	r3, [r3, #0]
 800e2fc:	4a21      	ldr	r2, [pc, #132]	; (800e384 <SystemClock_Config+0xd0>)
 800e2fe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800e302:	6013      	str	r3, [r2, #0]
 800e304:	4b1f      	ldr	r3, [pc, #124]	; (800e384 <SystemClock_Config+0xd0>)
 800e306:	681b      	ldr	r3, [r3, #0]
 800e308:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e30c:	607b      	str	r3, [r7, #4]
 800e30e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800e310:	2302      	movs	r3, #2
 800e312:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800e314:	2301      	movs	r3, #1
 800e316:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800e318:	2310      	movs	r3, #16
 800e31a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800e31c:	2302      	movs	r3, #2
 800e31e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800e320:	2300      	movs	r3, #0
 800e322:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800e324:	2308      	movs	r3, #8
 800e326:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800e328:	23a8      	movs	r3, #168	; 0xa8
 800e32a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800e32c:	2302      	movs	r3, #2
 800e32e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800e330:	2304      	movs	r3, #4
 800e332:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800e334:	f107 0320 	add.w	r3, r7, #32
 800e338:	4618      	mov	r0, r3
 800e33a:	f7f3 fffd 	bl	8002338 <HAL_RCC_OscConfig>
 800e33e:	4603      	mov	r3, r0
 800e340:	2b00      	cmp	r3, #0
 800e342:	d001      	beq.n	800e348 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800e344:	f000 fbd1 	bl	800eaea <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800e348:	230f      	movs	r3, #15
 800e34a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800e34c:	2302      	movs	r3, #2
 800e34e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800e350:	2300      	movs	r3, #0
 800e352:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800e354:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800e358:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800e35a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e35e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800e360:	f107 030c 	add.w	r3, r7, #12
 800e364:	2105      	movs	r1, #5
 800e366:	4618      	mov	r0, r3
 800e368:	f7f4 fa28 	bl	80027bc <HAL_RCC_ClockConfig>
 800e36c:	4603      	mov	r3, r0
 800e36e:	2b00      	cmp	r3, #0
 800e370:	d001      	beq.n	800e376 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800e372:	f000 fbba 	bl	800eaea <Error_Handler>
  }
}
 800e376:	bf00      	nop
 800e378:	3750      	adds	r7, #80	; 0x50
 800e37a:	46bd      	mov	sp, r7
 800e37c:	bd80      	pop	{r7, pc}
 800e37e:	bf00      	nop
 800e380:	40023800 	.word	0x40023800
 800e384:	40007000 	.word	0x40007000

0800e388 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800e388:	b580      	push	{r7, lr}
 800e38a:	b084      	sub	sp, #16
 800e38c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800e38e:	463b      	mov	r3, r7
 800e390:	2200      	movs	r2, #0
 800e392:	601a      	str	r2, [r3, #0]
 800e394:	605a      	str	r2, [r3, #4]
 800e396:	609a      	str	r2, [r3, #8]
 800e398:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 800e39a:	4b21      	ldr	r3, [pc, #132]	; (800e420 <MX_ADC1_Init+0x98>)
 800e39c:	4a21      	ldr	r2, [pc, #132]	; (800e424 <MX_ADC1_Init+0x9c>)
 800e39e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800e3a0:	4b1f      	ldr	r3, [pc, #124]	; (800e420 <MX_ADC1_Init+0x98>)
 800e3a2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800e3a6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800e3a8:	4b1d      	ldr	r3, [pc, #116]	; (800e420 <MX_ADC1_Init+0x98>)
 800e3aa:	2200      	movs	r2, #0
 800e3ac:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800e3ae:	4b1c      	ldr	r3, [pc, #112]	; (800e420 <MX_ADC1_Init+0x98>)
 800e3b0:	2200      	movs	r2, #0
 800e3b2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800e3b4:	4b1a      	ldr	r3, [pc, #104]	; (800e420 <MX_ADC1_Init+0x98>)
 800e3b6:	2200      	movs	r2, #0
 800e3b8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800e3ba:	4b19      	ldr	r3, [pc, #100]	; (800e420 <MX_ADC1_Init+0x98>)
 800e3bc:	2200      	movs	r2, #0
 800e3be:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800e3c2:	4b17      	ldr	r3, [pc, #92]	; (800e420 <MX_ADC1_Init+0x98>)
 800e3c4:	2200      	movs	r2, #0
 800e3c6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800e3c8:	4b15      	ldr	r3, [pc, #84]	; (800e420 <MX_ADC1_Init+0x98>)
 800e3ca:	4a17      	ldr	r2, [pc, #92]	; (800e428 <MX_ADC1_Init+0xa0>)
 800e3cc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800e3ce:	4b14      	ldr	r3, [pc, #80]	; (800e420 <MX_ADC1_Init+0x98>)
 800e3d0:	2200      	movs	r2, #0
 800e3d2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800e3d4:	4b12      	ldr	r3, [pc, #72]	; (800e420 <MX_ADC1_Init+0x98>)
 800e3d6:	2201      	movs	r2, #1
 800e3d8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800e3da:	4b11      	ldr	r3, [pc, #68]	; (800e420 <MX_ADC1_Init+0x98>)
 800e3dc:	2200      	movs	r2, #0
 800e3de:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800e3e2:	4b0f      	ldr	r3, [pc, #60]	; (800e420 <MX_ADC1_Init+0x98>)
 800e3e4:	2201      	movs	r2, #1
 800e3e6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800e3e8:	480d      	ldr	r0, [pc, #52]	; (800e420 <MX_ADC1_Init+0x98>)
 800e3ea:	f7f2 fe39 	bl	8001060 <HAL_ADC_Init>
 800e3ee:	4603      	mov	r3, r0
 800e3f0:	2b00      	cmp	r3, #0
 800e3f2:	d001      	beq.n	800e3f8 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800e3f4:	f000 fb79 	bl	800eaea <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800e3f8:	2300      	movs	r3, #0
 800e3fa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800e3fc:	2301      	movs	r3, #1
 800e3fe:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800e400:	2300      	movs	r3, #0
 800e402:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800e404:	463b      	mov	r3, r7
 800e406:	4619      	mov	r1, r3
 800e408:	4805      	ldr	r0, [pc, #20]	; (800e420 <MX_ADC1_Init+0x98>)
 800e40a:	f7f2 ffc5 	bl	8001398 <HAL_ADC_ConfigChannel>
 800e40e:	4603      	mov	r3, r0
 800e410:	2b00      	cmp	r3, #0
 800e412:	d001      	beq.n	800e418 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800e414:	f000 fb69 	bl	800eaea <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800e418:	bf00      	nop
 800e41a:	3710      	adds	r7, #16
 800e41c:	46bd      	mov	sp, r7
 800e41e:	bd80      	pop	{r7, pc}
 800e420:	20000b00 	.word	0x20000b00
 800e424:	40012000 	.word	0x40012000
 800e428:	0f000001 	.word	0x0f000001

0800e42c <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 800e42c:	b580      	push	{r7, lr}
 800e42e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 800e430:	4b17      	ldr	r3, [pc, #92]	; (800e490 <MX_SPI3_Init+0x64>)
 800e432:	4a18      	ldr	r2, [pc, #96]	; (800e494 <MX_SPI3_Init+0x68>)
 800e434:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800e436:	4b16      	ldr	r3, [pc, #88]	; (800e490 <MX_SPI3_Init+0x64>)
 800e438:	f44f 7282 	mov.w	r2, #260	; 0x104
 800e43c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800e43e:	4b14      	ldr	r3, [pc, #80]	; (800e490 <MX_SPI3_Init+0x64>)
 800e440:	2200      	movs	r2, #0
 800e442:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 800e444:	4b12      	ldr	r3, [pc, #72]	; (800e490 <MX_SPI3_Init+0x64>)
 800e446:	2200      	movs	r2, #0
 800e448:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800e44a:	4b11      	ldr	r3, [pc, #68]	; (800e490 <MX_SPI3_Init+0x64>)
 800e44c:	2200      	movs	r2, #0
 800e44e:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800e450:	4b0f      	ldr	r3, [pc, #60]	; (800e490 <MX_SPI3_Init+0x64>)
 800e452:	2200      	movs	r2, #0
 800e454:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800e456:	4b0e      	ldr	r3, [pc, #56]	; (800e490 <MX_SPI3_Init+0x64>)
 800e458:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e45c:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800e45e:	4b0c      	ldr	r3, [pc, #48]	; (800e490 <MX_SPI3_Init+0x64>)
 800e460:	2218      	movs	r2, #24
 800e462:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800e464:	4b0a      	ldr	r3, [pc, #40]	; (800e490 <MX_SPI3_Init+0x64>)
 800e466:	2200      	movs	r2, #0
 800e468:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800e46a:	4b09      	ldr	r3, [pc, #36]	; (800e490 <MX_SPI3_Init+0x64>)
 800e46c:	2200      	movs	r2, #0
 800e46e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800e470:	4b07      	ldr	r3, [pc, #28]	; (800e490 <MX_SPI3_Init+0x64>)
 800e472:	2200      	movs	r2, #0
 800e474:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 800e476:	4b06      	ldr	r3, [pc, #24]	; (800e490 <MX_SPI3_Init+0x64>)
 800e478:	220a      	movs	r2, #10
 800e47a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800e47c:	4804      	ldr	r0, [pc, #16]	; (800e490 <MX_SPI3_Init+0x64>)
 800e47e:	f7f4 fb65 	bl	8002b4c <HAL_SPI_Init>
 800e482:	4603      	mov	r3, r0
 800e484:	2b00      	cmp	r3, #0
 800e486:	d001      	beq.n	800e48c <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 800e488:	f000 fb2f 	bl	800eaea <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800e48c:	bf00      	nop
 800e48e:	bd80      	pop	{r7, pc}
 800e490:	20000144 	.word	0x20000144
 800e494:	40003c00 	.word	0x40003c00

0800e498 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800e498:	b580      	push	{r7, lr}
 800e49a:	b08e      	sub	sp, #56	; 0x38
 800e49c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800e49e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800e4a2:	2200      	movs	r2, #0
 800e4a4:	601a      	str	r2, [r3, #0]
 800e4a6:	605a      	str	r2, [r3, #4]
 800e4a8:	609a      	str	r2, [r3, #8]
 800e4aa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800e4ac:	f107 0320 	add.w	r3, r7, #32
 800e4b0:	2200      	movs	r2, #0
 800e4b2:	601a      	str	r2, [r3, #0]
 800e4b4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800e4b6:	1d3b      	adds	r3, r7, #4
 800e4b8:	2200      	movs	r2, #0
 800e4ba:	601a      	str	r2, [r3, #0]
 800e4bc:	605a      	str	r2, [r3, #4]
 800e4be:	609a      	str	r2, [r3, #8]
 800e4c0:	60da      	str	r2, [r3, #12]
 800e4c2:	611a      	str	r2, [r3, #16]
 800e4c4:	615a      	str	r2, [r3, #20]
 800e4c6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800e4c8:	4b32      	ldr	r3, [pc, #200]	; (800e594 <MX_TIM2_Init+0xfc>)
 800e4ca:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800e4ce:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800e4d0:	4b30      	ldr	r3, [pc, #192]	; (800e594 <MX_TIM2_Init+0xfc>)
 800e4d2:	2200      	movs	r2, #0
 800e4d4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800e4d6:	4b2f      	ldr	r3, [pc, #188]	; (800e594 <MX_TIM2_Init+0xfc>)
 800e4d8:	2200      	movs	r2, #0
 800e4da:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 800e4dc:	4b2d      	ldr	r3, [pc, #180]	; (800e594 <MX_TIM2_Init+0xfc>)
 800e4de:	f240 32e7 	movw	r2, #999	; 0x3e7
 800e4e2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800e4e4:	4b2b      	ldr	r3, [pc, #172]	; (800e594 <MX_TIM2_Init+0xfc>)
 800e4e6:	2200      	movs	r2, #0
 800e4e8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800e4ea:	4b2a      	ldr	r3, [pc, #168]	; (800e594 <MX_TIM2_Init+0xfc>)
 800e4ec:	2200      	movs	r2, #0
 800e4ee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800e4f0:	4828      	ldr	r0, [pc, #160]	; (800e594 <MX_TIM2_Init+0xfc>)
 800e4f2:	f7f5 f87f 	bl	80035f4 <HAL_TIM_Base_Init>
 800e4f6:	4603      	mov	r3, r0
 800e4f8:	2b00      	cmp	r3, #0
 800e4fa:	d001      	beq.n	800e500 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 800e4fc:	f000 faf5 	bl	800eaea <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800e500:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e504:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800e506:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800e50a:	4619      	mov	r1, r3
 800e50c:	4821      	ldr	r0, [pc, #132]	; (800e594 <MX_TIM2_Init+0xfc>)
 800e50e:	f7f5 fc23 	bl	8003d58 <HAL_TIM_ConfigClockSource>
 800e512:	4603      	mov	r3, r0
 800e514:	2b00      	cmp	r3, #0
 800e516:	d001      	beq.n	800e51c <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 800e518:	f000 fae7 	bl	800eaea <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800e51c:	481d      	ldr	r0, [pc, #116]	; (800e594 <MX_TIM2_Init+0xfc>)
 800e51e:	f7f5 f8b8 	bl	8003692 <HAL_TIM_PWM_Init>
 800e522:	4603      	mov	r3, r0
 800e524:	2b00      	cmp	r3, #0
 800e526:	d001      	beq.n	800e52c <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 800e528:	f000 fadf 	bl	800eaea <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800e52c:	2300      	movs	r3, #0
 800e52e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800e530:	2300      	movs	r3, #0
 800e532:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800e534:	f107 0320 	add.w	r3, r7, #32
 800e538:	4619      	mov	r1, r3
 800e53a:	4816      	ldr	r0, [pc, #88]	; (800e594 <MX_TIM2_Init+0xfc>)
 800e53c:	f7f5 fffb 	bl	8004536 <HAL_TIMEx_MasterConfigSynchronization>
 800e540:	4603      	mov	r3, r0
 800e542:	2b00      	cmp	r3, #0
 800e544:	d001      	beq.n	800e54a <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800e546:	f000 fad0 	bl	800eaea <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800e54a:	2360      	movs	r3, #96	; 0x60
 800e54c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800e54e:	2300      	movs	r3, #0
 800e550:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800e552:	2300      	movs	r3, #0
 800e554:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800e556:	2300      	movs	r3, #0
 800e558:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800e55a:	1d3b      	adds	r3, r7, #4
 800e55c:	2200      	movs	r2, #0
 800e55e:	4619      	mov	r1, r3
 800e560:	480c      	ldr	r0, [pc, #48]	; (800e594 <MX_TIM2_Init+0xfc>)
 800e562:	f7f5 fb33 	bl	8003bcc <HAL_TIM_PWM_ConfigChannel>
 800e566:	4603      	mov	r3, r0
 800e568:	2b00      	cmp	r3, #0
 800e56a:	d001      	beq.n	800e570 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 800e56c:	f000 fabd 	bl	800eaea <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800e570:	1d3b      	adds	r3, r7, #4
 800e572:	220c      	movs	r2, #12
 800e574:	4619      	mov	r1, r3
 800e576:	4807      	ldr	r0, [pc, #28]	; (800e594 <MX_TIM2_Init+0xfc>)
 800e578:	f7f5 fb28 	bl	8003bcc <HAL_TIM_PWM_ConfigChannel>
 800e57c:	4603      	mov	r3, r0
 800e57e:	2b00      	cmp	r3, #0
 800e580:	d001      	beq.n	800e586 <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 800e582:	f000 fab2 	bl	800eaea <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800e586:	4803      	ldr	r0, [pc, #12]	; (800e594 <MX_TIM2_Init+0xfc>)
 800e588:	f003 fea4 	bl	80122d4 <HAL_TIM_MspPostInit>

}
 800e58c:	bf00      	nop
 800e58e:	3738      	adds	r7, #56	; 0x38
 800e590:	46bd      	mov	sp, r7
 800e592:	bd80      	pop	{r7, pc}
 800e594:	20000c14 	.word	0x20000c14

0800e598 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800e598:	b580      	push	{r7, lr}
 800e59a:	b08e      	sub	sp, #56	; 0x38
 800e59c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800e59e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800e5a2:	2200      	movs	r2, #0
 800e5a4:	601a      	str	r2, [r3, #0]
 800e5a6:	605a      	str	r2, [r3, #4]
 800e5a8:	609a      	str	r2, [r3, #8]
 800e5aa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800e5ac:	f107 0320 	add.w	r3, r7, #32
 800e5b0:	2200      	movs	r2, #0
 800e5b2:	601a      	str	r2, [r3, #0]
 800e5b4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800e5b6:	1d3b      	adds	r3, r7, #4
 800e5b8:	2200      	movs	r2, #0
 800e5ba:	601a      	str	r2, [r3, #0]
 800e5bc:	605a      	str	r2, [r3, #4]
 800e5be:	609a      	str	r2, [r3, #8]
 800e5c0:	60da      	str	r2, [r3, #12]
 800e5c2:	611a      	str	r2, [r3, #16]
 800e5c4:	615a      	str	r2, [r3, #20]
 800e5c6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800e5c8:	4b2c      	ldr	r3, [pc, #176]	; (800e67c <MX_TIM3_Init+0xe4>)
 800e5ca:	4a2d      	ldr	r2, [pc, #180]	; (800e680 <MX_TIM3_Init+0xe8>)
 800e5cc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 64-1;
 800e5ce:	4b2b      	ldr	r3, [pc, #172]	; (800e67c <MX_TIM3_Init+0xe4>)
 800e5d0:	223f      	movs	r2, #63	; 0x3f
 800e5d2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800e5d4:	4b29      	ldr	r3, [pc, #164]	; (800e67c <MX_TIM3_Init+0xe4>)
 800e5d6:	2200      	movs	r2, #0
 800e5d8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0;
 800e5da:	4b28      	ldr	r3, [pc, #160]	; (800e67c <MX_TIM3_Init+0xe4>)
 800e5dc:	2200      	movs	r2, #0
 800e5de:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800e5e0:	4b26      	ldr	r3, [pc, #152]	; (800e67c <MX_TIM3_Init+0xe4>)
 800e5e2:	2200      	movs	r2, #0
 800e5e4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800e5e6:	4b25      	ldr	r3, [pc, #148]	; (800e67c <MX_TIM3_Init+0xe4>)
 800e5e8:	2200      	movs	r2, #0
 800e5ea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800e5ec:	4823      	ldr	r0, [pc, #140]	; (800e67c <MX_TIM3_Init+0xe4>)
 800e5ee:	f7f5 f801 	bl	80035f4 <HAL_TIM_Base_Init>
 800e5f2:	4603      	mov	r3, r0
 800e5f4:	2b00      	cmp	r3, #0
 800e5f6:	d001      	beq.n	800e5fc <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 800e5f8:	f000 fa77 	bl	800eaea <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800e5fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e600:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800e602:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800e606:	4619      	mov	r1, r3
 800e608:	481c      	ldr	r0, [pc, #112]	; (800e67c <MX_TIM3_Init+0xe4>)
 800e60a:	f7f5 fba5 	bl	8003d58 <HAL_TIM_ConfigClockSource>
 800e60e:	4603      	mov	r3, r0
 800e610:	2b00      	cmp	r3, #0
 800e612:	d001      	beq.n	800e618 <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 800e614:	f000 fa69 	bl	800eaea <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800e618:	4818      	ldr	r0, [pc, #96]	; (800e67c <MX_TIM3_Init+0xe4>)
 800e61a:	f7f5 f83a 	bl	8003692 <HAL_TIM_PWM_Init>
 800e61e:	4603      	mov	r3, r0
 800e620:	2b00      	cmp	r3, #0
 800e622:	d001      	beq.n	800e628 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 800e624:	f000 fa61 	bl	800eaea <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800e628:	2300      	movs	r3, #0
 800e62a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800e62c:	2300      	movs	r3, #0
 800e62e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800e630:	f107 0320 	add.w	r3, r7, #32
 800e634:	4619      	mov	r1, r3
 800e636:	4811      	ldr	r0, [pc, #68]	; (800e67c <MX_TIM3_Init+0xe4>)
 800e638:	f7f5 ff7d 	bl	8004536 <HAL_TIMEx_MasterConfigSynchronization>
 800e63c:	4603      	mov	r3, r0
 800e63e:	2b00      	cmp	r3, #0
 800e640:	d001      	beq.n	800e646 <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 800e642:	f000 fa52 	bl	800eaea <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800e646:	2360      	movs	r3, #96	; 0x60
 800e648:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800e64a:	2300      	movs	r3, #0
 800e64c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800e64e:	2300      	movs	r3, #0
 800e650:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800e652:	2300      	movs	r3, #0
 800e654:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800e656:	1d3b      	adds	r3, r7, #4
 800e658:	2204      	movs	r2, #4
 800e65a:	4619      	mov	r1, r3
 800e65c:	4807      	ldr	r0, [pc, #28]	; (800e67c <MX_TIM3_Init+0xe4>)
 800e65e:	f7f5 fab5 	bl	8003bcc <HAL_TIM_PWM_ConfigChannel>
 800e662:	4603      	mov	r3, r0
 800e664:	2b00      	cmp	r3, #0
 800e666:	d001      	beq.n	800e66c <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 800e668:	f000 fa3f 	bl	800eaea <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800e66c:	4803      	ldr	r0, [pc, #12]	; (800e67c <MX_TIM3_Init+0xe4>)
 800e66e:	f003 fe31 	bl	80122d4 <HAL_TIM_MspPostInit>

}
 800e672:	bf00      	nop
 800e674:	3738      	adds	r7, #56	; 0x38
 800e676:	46bd      	mov	sp, r7
 800e678:	bd80      	pop	{r7, pc}
 800e67a:	bf00      	nop
 800e67c:	20000aa4 	.word	0x20000aa4
 800e680:	40000400 	.word	0x40000400

0800e684 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800e684:	b580      	push	{r7, lr}
 800e686:	b08c      	sub	sp, #48	; 0x30
 800e688:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800e68a:	f107 030c 	add.w	r3, r7, #12
 800e68e:	2224      	movs	r2, #36	; 0x24
 800e690:	2100      	movs	r1, #0
 800e692:	4618      	mov	r0, r3
 800e694:	f004 f840 	bl	8012718 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800e698:	1d3b      	adds	r3, r7, #4
 800e69a:	2200      	movs	r2, #0
 800e69c:	601a      	str	r2, [r3, #0]
 800e69e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800e6a0:	4b20      	ldr	r3, [pc, #128]	; (800e724 <MX_TIM4_Init+0xa0>)
 800e6a2:	4a21      	ldr	r2, [pc, #132]	; (800e728 <MX_TIM4_Init+0xa4>)
 800e6a4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800e6a6:	4b1f      	ldr	r3, [pc, #124]	; (800e724 <MX_TIM4_Init+0xa0>)
 800e6a8:	2200      	movs	r2, #0
 800e6aa:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800e6ac:	4b1d      	ldr	r3, [pc, #116]	; (800e724 <MX_TIM4_Init+0xa0>)
 800e6ae:	2200      	movs	r2, #0
 800e6b0:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800e6b2:	4b1c      	ldr	r3, [pc, #112]	; (800e724 <MX_TIM4_Init+0xa0>)
 800e6b4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e6b8:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800e6ba:	4b1a      	ldr	r3, [pc, #104]	; (800e724 <MX_TIM4_Init+0xa0>)
 800e6bc:	2200      	movs	r2, #0
 800e6be:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800e6c0:	4b18      	ldr	r3, [pc, #96]	; (800e724 <MX_TIM4_Init+0xa0>)
 800e6c2:	2200      	movs	r2, #0
 800e6c4:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800e6c6:	2303      	movs	r3, #3
 800e6c8:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800e6ca:	2300      	movs	r3, #0
 800e6cc:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800e6ce:	2301      	movs	r3, #1
 800e6d0:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800e6d2:	2300      	movs	r3, #0
 800e6d4:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800e6d6:	2300      	movs	r3, #0
 800e6d8:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800e6da:	2300      	movs	r3, #0
 800e6dc:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800e6de:	2301      	movs	r3, #1
 800e6e0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800e6e2:	2300      	movs	r3, #0
 800e6e4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800e6e6:	2300      	movs	r3, #0
 800e6e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 800e6ea:	f107 030c 	add.w	r3, r7, #12
 800e6ee:	4619      	mov	r1, r3
 800e6f0:	480c      	ldr	r0, [pc, #48]	; (800e724 <MX_TIM4_Init+0xa0>)
 800e6f2:	f7f5 f899 	bl	8003828 <HAL_TIM_Encoder_Init>
 800e6f6:	4603      	mov	r3, r0
 800e6f8:	2b00      	cmp	r3, #0
 800e6fa:	d001      	beq.n	800e700 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 800e6fc:	f000 f9f5 	bl	800eaea <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800e700:	2300      	movs	r3, #0
 800e702:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800e704:	2300      	movs	r3, #0
 800e706:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800e708:	1d3b      	adds	r3, r7, #4
 800e70a:	4619      	mov	r1, r3
 800e70c:	4805      	ldr	r0, [pc, #20]	; (800e724 <MX_TIM4_Init+0xa0>)
 800e70e:	f7f5 ff12 	bl	8004536 <HAL_TIMEx_MasterConfigSynchronization>
 800e712:	4603      	mov	r3, r0
 800e714:	2b00      	cmp	r3, #0
 800e716:	d001      	beq.n	800e71c <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 800e718:	f000 f9e7 	bl	800eaea <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800e71c:	bf00      	nop
 800e71e:	3730      	adds	r7, #48	; 0x30
 800e720:	46bd      	mov	sp, r7
 800e722:	bd80      	pop	{r7, pc}
 800e724:	2000030c 	.word	0x2000030c
 800e728:	40000800 	.word	0x40000800

0800e72c <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 800e72c:	b580      	push	{r7, lr}
 800e72e:	b082      	sub	sp, #8
 800e730:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800e732:	463b      	mov	r3, r7
 800e734:	2200      	movs	r2, #0
 800e736:	601a      	str	r2, [r3, #0]
 800e738:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800e73a:	4b15      	ldr	r3, [pc, #84]	; (800e790 <MX_TIM6_Init+0x64>)
 800e73c:	4a15      	ldr	r2, [pc, #84]	; (800e794 <MX_TIM6_Init+0x68>)
 800e73e:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 84-1;
 800e740:	4b13      	ldr	r3, [pc, #76]	; (800e790 <MX_TIM6_Init+0x64>)
 800e742:	2253      	movs	r2, #83	; 0x53
 800e744:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800e746:	4b12      	ldr	r3, [pc, #72]	; (800e790 <MX_TIM6_Init+0x64>)
 800e748:	2200      	movs	r2, #0
 800e74a:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000-1;
 800e74c:	4b10      	ldr	r3, [pc, #64]	; (800e790 <MX_TIM6_Init+0x64>)
 800e74e:	f240 32e7 	movw	r2, #999	; 0x3e7
 800e752:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800e754:	4b0e      	ldr	r3, [pc, #56]	; (800e790 <MX_TIM6_Init+0x64>)
 800e756:	2200      	movs	r2, #0
 800e758:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800e75a:	480d      	ldr	r0, [pc, #52]	; (800e790 <MX_TIM6_Init+0x64>)
 800e75c:	f7f4 ff4a 	bl	80035f4 <HAL_TIM_Base_Init>
 800e760:	4603      	mov	r3, r0
 800e762:	2b00      	cmp	r3, #0
 800e764:	d001      	beq.n	800e76a <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 800e766:	f000 f9c0 	bl	800eaea <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800e76a:	2300      	movs	r3, #0
 800e76c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800e76e:	2300      	movs	r3, #0
 800e770:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800e772:	463b      	mov	r3, r7
 800e774:	4619      	mov	r1, r3
 800e776:	4806      	ldr	r0, [pc, #24]	; (800e790 <MX_TIM6_Init+0x64>)
 800e778:	f7f5 fedd 	bl	8004536 <HAL_TIMEx_MasterConfigSynchronization>
 800e77c:	4603      	mov	r3, r0
 800e77e:	2b00      	cmp	r3, #0
 800e780:	d001      	beq.n	800e786 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 800e782:	f000 f9b2 	bl	800eaea <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800e786:	bf00      	nop
 800e788:	3708      	adds	r7, #8
 800e78a:	46bd      	mov	sp, r7
 800e78c:	bd80      	pop	{r7, pc}
 800e78e:	bf00      	nop
 800e790:	20000bb4 	.word	0x20000bb4
 800e794:	40001000 	.word	0x40001000

0800e798 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 800e798:	b580      	push	{r7, lr}
 800e79a:	b08c      	sub	sp, #48	; 0x30
 800e79c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800e79e:	f107 030c 	add.w	r3, r7, #12
 800e7a2:	2224      	movs	r2, #36	; 0x24
 800e7a4:	2100      	movs	r1, #0
 800e7a6:	4618      	mov	r0, r3
 800e7a8:	f003 ffb6 	bl	8012718 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800e7ac:	1d3b      	adds	r3, r7, #4
 800e7ae:	2200      	movs	r2, #0
 800e7b0:	601a      	str	r2, [r3, #0]
 800e7b2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800e7b4:	4b22      	ldr	r3, [pc, #136]	; (800e840 <MX_TIM8_Init+0xa8>)
 800e7b6:	4a23      	ldr	r2, [pc, #140]	; (800e844 <MX_TIM8_Init+0xac>)
 800e7b8:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 800e7ba:	4b21      	ldr	r3, [pc, #132]	; (800e840 <MX_TIM8_Init+0xa8>)
 800e7bc:	2200      	movs	r2, #0
 800e7be:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800e7c0:	4b1f      	ldr	r3, [pc, #124]	; (800e840 <MX_TIM8_Init+0xa8>)
 800e7c2:	2200      	movs	r2, #0
 800e7c4:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 800e7c6:	4b1e      	ldr	r3, [pc, #120]	; (800e840 <MX_TIM8_Init+0xa8>)
 800e7c8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e7cc:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800e7ce:	4b1c      	ldr	r3, [pc, #112]	; (800e840 <MX_TIM8_Init+0xa8>)
 800e7d0:	2200      	movs	r2, #0
 800e7d2:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800e7d4:	4b1a      	ldr	r3, [pc, #104]	; (800e840 <MX_TIM8_Init+0xa8>)
 800e7d6:	2200      	movs	r2, #0
 800e7d8:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800e7da:	4b19      	ldr	r3, [pc, #100]	; (800e840 <MX_TIM8_Init+0xa8>)
 800e7dc:	2200      	movs	r2, #0
 800e7de:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800e7e0:	2303      	movs	r3, #3
 800e7e2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800e7e4:	2300      	movs	r3, #0
 800e7e6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800e7e8:	2301      	movs	r3, #1
 800e7ea:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800e7ec:	2300      	movs	r3, #0
 800e7ee:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800e7f0:	2300      	movs	r3, #0
 800e7f2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800e7f4:	2300      	movs	r3, #0
 800e7f6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800e7f8:	2301      	movs	r3, #1
 800e7fa:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800e7fc:	2300      	movs	r3, #0
 800e7fe:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800e800:	2300      	movs	r3, #0
 800e802:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 800e804:	f107 030c 	add.w	r3, r7, #12
 800e808:	4619      	mov	r1, r3
 800e80a:	480d      	ldr	r0, [pc, #52]	; (800e840 <MX_TIM8_Init+0xa8>)
 800e80c:	f7f5 f80c 	bl	8003828 <HAL_TIM_Encoder_Init>
 800e810:	4603      	mov	r3, r0
 800e812:	2b00      	cmp	r3, #0
 800e814:	d001      	beq.n	800e81a <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 800e816:	f000 f968 	bl	800eaea <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800e81a:	2300      	movs	r3, #0
 800e81c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800e81e:	2300      	movs	r3, #0
 800e820:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800e822:	1d3b      	adds	r3, r7, #4
 800e824:	4619      	mov	r1, r3
 800e826:	4806      	ldr	r0, [pc, #24]	; (800e840 <MX_TIM8_Init+0xa8>)
 800e828:	f7f5 fe85 	bl	8004536 <HAL_TIMEx_MasterConfigSynchronization>
 800e82c:	4603      	mov	r3, r0
 800e82e:	2b00      	cmp	r3, #0
 800e830:	d001      	beq.n	800e836 <MX_TIM8_Init+0x9e>
  {
    Error_Handler();
 800e832:	f000 f95a 	bl	800eaea <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 800e836:	bf00      	nop
 800e838:	3730      	adds	r7, #48	; 0x30
 800e83a:	46bd      	mov	sp, r7
 800e83c:	bd80      	pop	{r7, pc}
 800e83e:	bf00      	nop
 800e840:	200002cc 	.word	0x200002cc
 800e844:	40010400 	.word	0x40010400

0800e848 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800e848:	b580      	push	{r7, lr}
 800e84a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800e84c:	4b11      	ldr	r3, [pc, #68]	; (800e894 <MX_USART1_UART_Init+0x4c>)
 800e84e:	4a12      	ldr	r2, [pc, #72]	; (800e898 <MX_USART1_UART_Init+0x50>)
 800e850:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800e852:	4b10      	ldr	r3, [pc, #64]	; (800e894 <MX_USART1_UART_Init+0x4c>)
 800e854:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800e858:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800e85a:	4b0e      	ldr	r3, [pc, #56]	; (800e894 <MX_USART1_UART_Init+0x4c>)
 800e85c:	2200      	movs	r2, #0
 800e85e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800e860:	4b0c      	ldr	r3, [pc, #48]	; (800e894 <MX_USART1_UART_Init+0x4c>)
 800e862:	2200      	movs	r2, #0
 800e864:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800e866:	4b0b      	ldr	r3, [pc, #44]	; (800e894 <MX_USART1_UART_Init+0x4c>)
 800e868:	2200      	movs	r2, #0
 800e86a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800e86c:	4b09      	ldr	r3, [pc, #36]	; (800e894 <MX_USART1_UART_Init+0x4c>)
 800e86e:	220c      	movs	r2, #12
 800e870:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800e872:	4b08      	ldr	r3, [pc, #32]	; (800e894 <MX_USART1_UART_Init+0x4c>)
 800e874:	2200      	movs	r2, #0
 800e876:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800e878:	4b06      	ldr	r3, [pc, #24]	; (800e894 <MX_USART1_UART_Init+0x4c>)
 800e87a:	2200      	movs	r2, #0
 800e87c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800e87e:	4805      	ldr	r0, [pc, #20]	; (800e894 <MX_USART1_UART_Init+0x4c>)
 800e880:	f7f5 feb2 	bl	80045e8 <HAL_UART_Init>
 800e884:	4603      	mov	r3, r0
 800e886:	2b00      	cmp	r3, #0
 800e888:	d001      	beq.n	800e88e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800e88a:	f000 f92e 	bl	800eaea <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800e88e:	bf00      	nop
 800e890:	bd80      	pop	{r7, pc}
 800e892:	bf00      	nop
 800e894:	20000b64 	.word	0x20000b64
 800e898:	40011000 	.word	0x40011000

0800e89c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800e89c:	b580      	push	{r7, lr}
 800e89e:	b08a      	sub	sp, #40	; 0x28
 800e8a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e8a2:	f107 0314 	add.w	r3, r7, #20
 800e8a6:	2200      	movs	r2, #0
 800e8a8:	601a      	str	r2, [r3, #0]
 800e8aa:	605a      	str	r2, [r3, #4]
 800e8ac:	609a      	str	r2, [r3, #8]
 800e8ae:	60da      	str	r2, [r3, #12]
 800e8b0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800e8b2:	2300      	movs	r3, #0
 800e8b4:	613b      	str	r3, [r7, #16]
 800e8b6:	4b53      	ldr	r3, [pc, #332]	; (800ea04 <MX_GPIO_Init+0x168>)
 800e8b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e8ba:	4a52      	ldr	r2, [pc, #328]	; (800ea04 <MX_GPIO_Init+0x168>)
 800e8bc:	f043 0304 	orr.w	r3, r3, #4
 800e8c0:	6313      	str	r3, [r2, #48]	; 0x30
 800e8c2:	4b50      	ldr	r3, [pc, #320]	; (800ea04 <MX_GPIO_Init+0x168>)
 800e8c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e8c6:	f003 0304 	and.w	r3, r3, #4
 800e8ca:	613b      	str	r3, [r7, #16]
 800e8cc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800e8ce:	2300      	movs	r3, #0
 800e8d0:	60fb      	str	r3, [r7, #12]
 800e8d2:	4b4c      	ldr	r3, [pc, #304]	; (800ea04 <MX_GPIO_Init+0x168>)
 800e8d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e8d6:	4a4b      	ldr	r2, [pc, #300]	; (800ea04 <MX_GPIO_Init+0x168>)
 800e8d8:	f043 0301 	orr.w	r3, r3, #1
 800e8dc:	6313      	str	r3, [r2, #48]	; 0x30
 800e8de:	4b49      	ldr	r3, [pc, #292]	; (800ea04 <MX_GPIO_Init+0x168>)
 800e8e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e8e2:	f003 0301 	and.w	r3, r3, #1
 800e8e6:	60fb      	str	r3, [r7, #12]
 800e8e8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800e8ea:	2300      	movs	r3, #0
 800e8ec:	60bb      	str	r3, [r7, #8]
 800e8ee:	4b45      	ldr	r3, [pc, #276]	; (800ea04 <MX_GPIO_Init+0x168>)
 800e8f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e8f2:	4a44      	ldr	r2, [pc, #272]	; (800ea04 <MX_GPIO_Init+0x168>)
 800e8f4:	f043 0302 	orr.w	r3, r3, #2
 800e8f8:	6313      	str	r3, [r2, #48]	; 0x30
 800e8fa:	4b42      	ldr	r3, [pc, #264]	; (800ea04 <MX_GPIO_Init+0x168>)
 800e8fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e8fe:	f003 0302 	and.w	r3, r3, #2
 800e902:	60bb      	str	r3, [r7, #8]
 800e904:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800e906:	2300      	movs	r3, #0
 800e908:	607b      	str	r3, [r7, #4]
 800e90a:	4b3e      	ldr	r3, [pc, #248]	; (800ea04 <MX_GPIO_Init+0x168>)
 800e90c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e90e:	4a3d      	ldr	r2, [pc, #244]	; (800ea04 <MX_GPIO_Init+0x168>)
 800e910:	f043 0308 	orr.w	r3, r3, #8
 800e914:	6313      	str	r3, [r2, #48]	; 0x30
 800e916:	4b3b      	ldr	r3, [pc, #236]	; (800ea04 <MX_GPIO_Init+0x168>)
 800e918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e91a:	f003 0308 	and.w	r3, r3, #8
 800e91e:	607b      	str	r3, [r7, #4]
 800e920:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_2 
 800e922:	2200      	movs	r2, #0
 800e924:	f24e 213c 	movw	r1, #57916	; 0xe23c
 800e928:	4837      	ldr	r0, [pc, #220]	; (800ea08 <MX_GPIO_Init+0x16c>)
 800e92a:	f7f3 fceb 	bl	8002304 <HAL_GPIO_WritePin>
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8, GPIO_PIN_RESET);
 800e92e:	2200      	movs	r2, #0
 800e930:	f44f 71e8 	mov.w	r1, #464	; 0x1d0
 800e934:	4835      	ldr	r0, [pc, #212]	; (800ea0c <MX_GPIO_Init+0x170>)
 800e936:	f7f3 fce5 	bl	8002304 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_13 
 800e93a:	2200      	movs	r2, #0
 800e93c:	f242 7103 	movw	r1, #9987	; 0x2703
 800e940:	4833      	ldr	r0, [pc, #204]	; (800ea10 <MX_GPIO_Init+0x174>)
 800e942:	f7f3 fcdf 	bl	8002304 <HAL_GPIO_WritePin>
                          |GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 800e946:	2200      	movs	r2, #0
 800e948:	2104      	movs	r1, #4
 800e94a:	4832      	ldr	r0, [pc, #200]	; (800ea14 <MX_GPIO_Init+0x178>)
 800e94c:	f7f3 fcda 	bl	8002304 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 PC2 
                           PC3 PC4 PC5 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_2 
 800e950:	f24e 233c 	movw	r3, #57916	; 0xe23c
 800e954:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800e956:	2301      	movs	r3, #1
 800e958:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e95a:	2300      	movs	r3, #0
 800e95c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e95e:	2300      	movs	r3, #0
 800e960:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800e962:	f107 0314 	add.w	r3, r7, #20
 800e966:	4619      	mov	r1, r3
 800e968:	4827      	ldr	r0, [pc, #156]	; (800ea08 <MX_GPIO_Init+0x16c>)
 800e96a:	f7f3 fb19 	bl	8001fa0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA6 PA7 PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 800e96e:	f44f 73e8 	mov.w	r3, #464	; 0x1d0
 800e972:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800e974:	2301      	movs	r3, #1
 800e976:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e978:	2300      	movs	r3, #0
 800e97a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e97c:	2300      	movs	r3, #0
 800e97e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e980:	f107 0314 	add.w	r3, r7, #20
 800e984:	4619      	mov	r1, r3
 800e986:	4821      	ldr	r0, [pc, #132]	; (800ea0c <MX_GPIO_Init+0x170>)
 800e988:	f7f3 fb0a 	bl	8001fa0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB10 PB13 
                           PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_13 
 800e98c:	f242 7303 	movw	r3, #9987	; 0x2703
 800e990:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800e992:	2301      	movs	r3, #1
 800e994:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e996:	2300      	movs	r3, #0
 800e998:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e99a:	2300      	movs	r3, #0
 800e99c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800e99e:	f107 0314 	add.w	r3, r7, #20
 800e9a2:	4619      	mov	r1, r3
 800e9a4:	481a      	ldr	r0, [pc, #104]	; (800ea10 <MX_GPIO_Init+0x174>)
 800e9a6:	f7f3 fafb 	bl	8001fa0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 800e9aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e9ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800e9b0:	2300      	movs	r3, #0
 800e9b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800e9b4:	2301      	movs	r3, #1
 800e9b6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800e9b8:	f107 0314 	add.w	r3, r7, #20
 800e9bc:	4619      	mov	r1, r3
 800e9be:	4814      	ldr	r0, [pc, #80]	; (800ea10 <MX_GPIO_Init+0x174>)
 800e9c0:	f7f3 faee 	bl	8001fa0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 800e9c4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e9c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800e9ca:	2300      	movs	r3, #0
 800e9cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e9ce:	2300      	movs	r3, #0
 800e9d0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e9d2:	f107 0314 	add.w	r3, r7, #20
 800e9d6:	4619      	mov	r1, r3
 800e9d8:	480c      	ldr	r0, [pc, #48]	; (800ea0c <MX_GPIO_Init+0x170>)
 800e9da:	f7f3 fae1 	bl	8001fa0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800e9de:	2304      	movs	r3, #4
 800e9e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800e9e2:	2301      	movs	r3, #1
 800e9e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e9e6:	2300      	movs	r3, #0
 800e9e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e9ea:	2300      	movs	r3, #0
 800e9ec:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800e9ee:	f107 0314 	add.w	r3, r7, #20
 800e9f2:	4619      	mov	r1, r3
 800e9f4:	4807      	ldr	r0, [pc, #28]	; (800ea14 <MX_GPIO_Init+0x178>)
 800e9f6:	f7f3 fad3 	bl	8001fa0 <HAL_GPIO_Init>

}
 800e9fa:	bf00      	nop
 800e9fc:	3728      	adds	r7, #40	; 0x28
 800e9fe:	46bd      	mov	sp, r7
 800ea00:	bd80      	pop	{r7, pc}
 800ea02:	bf00      	nop
 800ea04:	40023800 	.word	0x40023800
 800ea08:	40020800 	.word	0x40020800
 800ea0c:	40020000 	.word	0x40020000
 800ea10:	40020400 	.word	0x40020400
 800ea14:	40020c00 	.word	0x40020c00

0800ea18 <buzzer>:

/* USER CODE BEGIN 4 */
void buzzer(int sound, int length){
 800ea18:	b580      	push	{r7, lr}
 800ea1a:	b08a      	sub	sp, #40	; 0x28
 800ea1c:	af00      	add	r7, sp, #0
 800ea1e:	6078      	str	r0, [r7, #4]
 800ea20:	6039      	str	r1, [r7, #0]
	TIM_OC_InitTypeDef ConfigOC;
	ConfigOC.OCMode = TIM_OCMODE_PWM1;
 800ea22:	2360      	movs	r3, #96	; 0x60
 800ea24:	60fb      	str	r3, [r7, #12]
	ConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800ea26:	2300      	movs	r3, #0
 800ea28:	617b      	str	r3, [r7, #20]
	ConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800ea2a:	2300      	movs	r3, #0
 800ea2c:	61fb      	str	r3, [r7, #28]

	hz = 1000000 / sound;
 800ea2e:	4a15      	ldr	r2, [pc, #84]	; (800ea84 <buzzer+0x6c>)
 800ea30:	687b      	ldr	r3, [r7, #4]
 800ea32:	fb92 f3f3 	sdiv	r3, r2, r3
 800ea36:	4a14      	ldr	r2, [pc, #80]	; (800ea88 <buzzer+0x70>)
 800ea38:	6013      	str	r3, [r2, #0]
	TIM3 -> ARR = hz;
 800ea3a:	4b13      	ldr	r3, [pc, #76]	; (800ea88 <buzzer+0x70>)
 800ea3c:	681a      	ldr	r2, [r3, #0]
 800ea3e:	4b13      	ldr	r3, [pc, #76]	; (800ea8c <buzzer+0x74>)
 800ea40:	62da      	str	r2, [r3, #44]	; 0x2c
    ConfigOC.Pulse = hz / 10;
 800ea42:	4b11      	ldr	r3, [pc, #68]	; (800ea88 <buzzer+0x70>)
 800ea44:	681b      	ldr	r3, [r3, #0]
 800ea46:	4a12      	ldr	r2, [pc, #72]	; (800ea90 <buzzer+0x78>)
 800ea48:	fb82 1203 	smull	r1, r2, r2, r3
 800ea4c:	1092      	asrs	r2, r2, #2
 800ea4e:	17db      	asrs	r3, r3, #31
 800ea50:	1ad3      	subs	r3, r2, r3
 800ea52:	613b      	str	r3, [r7, #16]
    HAL_TIM_PWM_ConfigChannel(&htim3, &ConfigOC, TIM_CHANNEL_2);
 800ea54:	f107 030c 	add.w	r3, r7, #12
 800ea58:	2204      	movs	r2, #4
 800ea5a:	4619      	mov	r1, r3
 800ea5c:	480d      	ldr	r0, [pc, #52]	; (800ea94 <buzzer+0x7c>)
 800ea5e:	f7f5 f8b5 	bl	8003bcc <HAL_TIM_PWM_ConfigChannel>
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 800ea62:	2104      	movs	r1, #4
 800ea64:	480b      	ldr	r0, [pc, #44]	; (800ea94 <buzzer+0x7c>)
 800ea66:	f7f4 fe49 	bl	80036fc <HAL_TIM_PWM_Start>

	HAL_Delay(length);
 800ea6a:	683b      	ldr	r3, [r7, #0]
 800ea6c:	4618      	mov	r0, r3
 800ea6e:	f7f2 fad5 	bl	800101c <HAL_Delay>
    HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_2);
 800ea72:	2104      	movs	r1, #4
 800ea74:	4807      	ldr	r0, [pc, #28]	; (800ea94 <buzzer+0x7c>)
 800ea76:	f7f4 fe7f 	bl	8003778 <HAL_TIM_PWM_Stop>
}
 800ea7a:	bf00      	nop
 800ea7c:	3728      	adds	r7, #40	; 0x28
 800ea7e:	46bd      	mov	sp, r7
 800ea80:	bd80      	pop	{r7, pc}
 800ea82:	bf00      	nop
 800ea84:	000f4240 	.word	0x000f4240
 800ea88:	200002c4 	.word	0x200002c4
 800ea8c:	40000400 	.word	0x40000400
 800ea90:	66666667 	.word	0x66666667
 800ea94:	20000aa4 	.word	0x20000aa4

0800ea98 <get_adc_value>:


int get_adc_value(ADC_HandleTypeDef *hadc, uint32_t channel){
 800ea98:	b580      	push	{r7, lr}
 800ea9a:	b086      	sub	sp, #24
 800ea9c:	af00      	add	r7, sp, #0
 800ea9e:	6078      	str	r0, [r7, #4]
 800eaa0:	6039      	str	r1, [r7, #0]

  ADC_ChannelConfTypeDef sConfig = {0};
 800eaa2:	f107 0308 	add.w	r3, r7, #8
 800eaa6:	2200      	movs	r2, #0
 800eaa8:	601a      	str	r2, [r3, #0]
 800eaaa:	605a      	str	r2, [r3, #4]
 800eaac:	609a      	str	r2, [r3, #8]
 800eaae:	60da      	str	r2, [r3, #12]

  sConfig.Channel = channel;
 800eab0:	683b      	ldr	r3, [r7, #0]
 800eab2:	60bb      	str	r3, [r7, #8]
  sConfig.Rank = 1;
 800eab4:	2301      	movs	r3, #1
 800eab6:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800eab8:	2300      	movs	r3, #0
 800eaba:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800eabc:	2300      	movs	r3, #0
 800eabe:	617b      	str	r3, [r7, #20]

  HAL_ADC_ConfigChannel(hadc, &sConfig);
 800eac0:	f107 0308 	add.w	r3, r7, #8
 800eac4:	4619      	mov	r1, r3
 800eac6:	6878      	ldr	r0, [r7, #4]
 800eac8:	f7f2 fc66 	bl	8001398 <HAL_ADC_ConfigChannel>

  HAL_ADC_Start(hadc);                    //
 800eacc:	6878      	ldr	r0, [r7, #4]
 800eace:	f7f2 fb0b 	bl	80010e8 <HAL_ADC_Start>
  HAL_ADC_PollForConversion(hadc, 100);   //wait for ADC
 800ead2:	2164      	movs	r1, #100	; 0x64
 800ead4:	6878      	ldr	r0, [r7, #4]
 800ead6:	f7f2 fbcd 	bl	8001274 <HAL_ADC_PollForConversion>
  return HAL_ADC_GetValue(hadc);          //
 800eada:	6878      	ldr	r0, [r7, #4]
 800eadc:	f7f2 fc4e 	bl	800137c <HAL_ADC_GetValue>
 800eae0:	4603      	mov	r3, r0
}
 800eae2:	4618      	mov	r0, r3
 800eae4:	3718      	adds	r7, #24
 800eae6:	46bd      	mov	sp, r7
 800eae8:	bd80      	pop	{r7, pc}

0800eaea <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800eaea:	b480      	push	{r7}
 800eaec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800eaee:	bf00      	nop
 800eaf0:	46bd      	mov	sp, r7
 800eaf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaf6:	4770      	bx	lr

0800eaf8 <search_init>:

#include "global.h"

void search_init(void){
 800eaf8:	b580      	push	{r7, lr}
 800eafa:	af00      	add	r7, sp, #0

	//----a探索系----
	goal_x = GOAL_X;        		//GOAL_Xはglobal.hにマクロ定義あり
 800eafc:	4b09      	ldr	r3, [pc, #36]	; (800eb24 <search_init+0x2c>)
 800eafe:	2207      	movs	r2, #7
 800eb00:	701a      	strb	r2, [r3, #0]
	goal_y = GOAL_Y;        		//GOAL_Yはglobal.hにマクロ定義あり
 800eb02:	4b09      	ldr	r3, [pc, #36]	; (800eb28 <search_init+0x30>)
 800eb04:	2207      	movs	r2, #7
 800eb06:	701a      	strb	r2, [r3, #0]
	map_Init();						//aマップの初期化
 800eb08:	f001 f852 	bl	800fbb0 <map_Init>
	mouse.x = 0;
 800eb0c:	4b07      	ldr	r3, [pc, #28]	; (800eb2c <search_init+0x34>)
 800eb0e:	2200      	movs	r2, #0
 800eb10:	701a      	strb	r2, [r3, #0]
	mouse.y = 0;					//a現在地の初期化
 800eb12:	4b06      	ldr	r3, [pc, #24]	; (800eb2c <search_init+0x34>)
 800eb14:	2200      	movs	r2, #0
 800eb16:	705a      	strb	r2, [r3, #1]
	mouse.dir = 0;					//aマウスの向きの初期化
 800eb18:	4b04      	ldr	r3, [pc, #16]	; (800eb2c <search_init+0x34>)
 800eb1a:	2200      	movs	r2, #0
 800eb1c:	709a      	strb	r2, [r3, #2]
}
 800eb1e:	bf00      	nop
 800eb20:	bd80      	pop	{r7, pc}
 800eb22:	bf00      	nop
 800eb24:	20000bb0 	.word	0x20000bb0
 800eb28:	20000b4c 	.word	0x20000b4c
 800eb2c:	20000c0c 	.word	0x20000c0c

0800eb30 <searchC>:
//searchC
//aスラローム走行でgoal座標に進む
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void searchC(){
 800eb30:	b590      	push	{r4, r7, lr}
 800eb32:	b083      	sub	sp, #12
 800eb34:	af00      	add	r7, sp, #0

	if(MF.FLAG.SCND){
 800eb36:	4bab      	ldr	r3, [pc, #684]	; (800ede4 <searchC+0x2b4>)
 800eb38:	881b      	ldrh	r3, [r3, #0]
 800eb3a:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800eb3e:	b2db      	uxtb	r3, r3
 800eb40:	2b00      	cmp	r3, #0
 800eb42:	d001      	beq.n	800eb48 <searchC+0x18>
		load_map_from_eeprom();
 800eb44:	f002 ff70 	bl	8011a28 <load_map_from_eeprom>
	}

	//====aスタート位置壁情報取得====
	if(!MF.FLAG.SCND)get_wall_info();										//a壁情報の初期化, 後壁はなくなる
 800eb48:	4ba6      	ldr	r3, [pc, #664]	; (800ede4 <searchC+0x2b4>)
 800eb4a:	881b      	ldrh	r3, [r3, #0]
 800eb4c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800eb50:	b2db      	uxtb	r3, r3
 800eb52:	2b00      	cmp	r3, #0
 800eb54:	d101      	bne.n	800eb5a <searchC+0x2a>
 800eb56:	f002 ffdf 	bl	8011b18 <get_wall_info>
	if(!MF.FLAG.SCND)wall_info &= ~0x88;									//a前壁は存在するはずがないので削除する
 800eb5a:	4ba2      	ldr	r3, [pc, #648]	; (800ede4 <searchC+0x2b4>)
 800eb5c:	881b      	ldrh	r3, [r3, #0]
 800eb5e:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800eb62:	b2db      	uxtb	r3, r3
 800eb64:	2b00      	cmp	r3, #0
 800eb66:	d106      	bne.n	800eb76 <searchC+0x46>
 800eb68:	4b9f      	ldr	r3, [pc, #636]	; (800ede8 <searchC+0x2b8>)
 800eb6a:	781b      	ldrb	r3, [r3, #0]
 800eb6c:	f003 0377 	and.w	r3, r3, #119	; 0x77
 800eb70:	b2da      	uxtb	r2, r3
 800eb72:	4b9d      	ldr	r3, [pc, #628]	; (800ede8 <searchC+0x2b8>)
 800eb74:	701a      	strb	r2, [r3, #0]
	if(!MF.FLAG.SCND)write_map();											//a壁情報を地図に記入
 800eb76:	4b9b      	ldr	r3, [pc, #620]	; (800ede4 <searchC+0x2b4>)
 800eb78:	881b      	ldrh	r3, [r3, #0]
 800eb7a:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800eb7e:	b2db      	uxtb	r3, r3
 800eb80:	2b00      	cmp	r3, #0
 800eb82:	d101      	bne.n	800eb88 <searchC+0x58>
 800eb84:	f001 f880 	bl	800fc88 <write_map>

	if(MF2.FLAG.GOAL){
 800eb88:	4b98      	ldr	r3, [pc, #608]	; (800edec <searchC+0x2bc>)
 800eb8a:	881b      	ldrh	r3, [r3, #0]
 800eb8c:	f3c3 2300 	ubfx	r3, r3, #8, #1
 800eb90:	b2db      	uxtb	r3, r3
 800eb92:	2b00      	cmp	r3, #0
 800eb94:	d00b      	beq.n	800ebae <searchC+0x7e>
//		HAL_Delay(500);
		rotate_180();											//180度回転
 800eb96:	f7f7 fddb 	bl	8006750 <rotate_180>
//		driveC2(SETPOS_BACK);         							//a尻を当てる程度に後退。回転後に停止する
//		degree_z = target_degree_z;
//		start_mode = 0;
		start_mode = 1;
 800eb9a:	4b95      	ldr	r3, [pc, #596]	; (800edf0 <searchC+0x2c0>)
 800eb9c:	2201      	movs	r2, #1
 800eb9e:	701a      	strb	r2, [r3, #0]
		goal_mode = 1;
 800eba0:	4b94      	ldr	r3, [pc, #592]	; (800edf4 <searchC+0x2c4>)
 800eba2:	2201      	movs	r2, #1
 800eba4:	701a      	strb	r2, [r3, #0]
		HAL_Delay(500);
 800eba6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800ebaa:	f7f2 fa37 	bl	800101c <HAL_Delay>
	if(!MF.FLAG.SCND || !MF2.FLAG.GOAL)wall_info &= ~0x88;					//a前壁は存在するはずがないので削除する
	if(!MF.FLAG.SCND || !MF2.FLAG.GOAL)write_map();							//a壁情報を地図に記入
*/

	//====a前に壁が無い想定で問答無用で前進====
	start_sectionA();
 800ebae:	f7f6 fee1 	bl	8005974 <start_sectionA>
	adv_pos();
 800ebb2:	f000 ffa5 	bl	800fb00 <adv_pos>

	//====a歩数マップ・経路作成====
	if(!MF.FLAG.SCND)write_map();											//a壁情報を地図に記入
 800ebb6:	4b8b      	ldr	r3, [pc, #556]	; (800ede4 <searchC+0x2b4>)
 800ebb8:	881b      	ldrh	r3, [r3, #0]
 800ebba:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800ebbe:	b2db      	uxtb	r3, r3
 800ebc0:	2b00      	cmp	r3, #0
 800ebc2:	d101      	bne.n	800ebc8 <searchC+0x98>
 800ebc4:	f001 f860 	bl	800fc88 <write_map>
	r_cnt = 0;																//a経路カウンタの初期化
 800ebc8:	4b8b      	ldr	r3, [pc, #556]	; (800edf8 <searchC+0x2c8>)
 800ebca:	2200      	movs	r2, #0
 800ebcc:	701a      	strb	r2, [r3, #0]
	make_smap();															//a歩数マップ作成
 800ebce:	f001 fa4f 	bl	8010070 <make_smap>
	make_route();															//a最短経路探索（route配列に動作が格納される）
 800ebd2:	f001 fe0b 	bl	80107ec <make_route>
	uint8_t x, y;															//X，Y座標

	//====a探索走行====
	do{
		//----a進行----
		switch(route[r_cnt++]){												//route配列によって進行を決定。経路カウンタを進める
 800ebd6:	4b88      	ldr	r3, [pc, #544]	; (800edf8 <searchC+0x2c8>)
 800ebd8:	781b      	ldrb	r3, [r3, #0]
 800ebda:	1c5a      	adds	r2, r3, #1
 800ebdc:	b2d1      	uxtb	r1, r2
 800ebde:	4a86      	ldr	r2, [pc, #536]	; (800edf8 <searchC+0x2c8>)
 800ebe0:	7011      	strb	r1, [r2, #0]
 800ebe2:	461a      	mov	r2, r3
 800ebe4:	4b85      	ldr	r3, [pc, #532]	; (800edfc <searchC+0x2cc>)
 800ebe6:	5c9b      	ldrb	r3, [r3, r2]
 800ebe8:	2b22      	cmp	r3, #34	; 0x22
 800ebea:	d07f      	beq.n	800ecec <searchC+0x1bc>
 800ebec:	2b22      	cmp	r3, #34	; 0x22
 800ebee:	dc03      	bgt.n	800ebf8 <searchC+0xc8>
 800ebf0:	2b11      	cmp	r3, #17
 800ebf2:	f000 808b 	beq.w	800ed0c <searchC+0x1dc>
 800ebf6:	e08c      	b.n	800ed12 <searchC+0x1e2>
 800ebf8:	2b44      	cmp	r3, #68	; 0x44
 800ebfa:	d074      	beq.n	800ece6 <searchC+0x1b6>
 800ebfc:	2b88      	cmp	r3, #136	; 0x88
 800ebfe:	f040 8088 	bne.w	800ed12 <searchC+0x1e2>
			//----a前進----
			case 0x88:
				if(route[r_cnt] == 0x88 && MF.FLAG.ACCL2){
 800ec02:	4b7d      	ldr	r3, [pc, #500]	; (800edf8 <searchC+0x2c8>)
 800ec04:	781b      	ldrb	r3, [r3, #0]
 800ec06:	461a      	mov	r2, r3
 800ec08:	4b7c      	ldr	r3, [pc, #496]	; (800edfc <searchC+0x2cc>)
 800ec0a:	5c9b      	ldrb	r3, [r3, r2]
 800ec0c:	2b88      	cmp	r3, #136	; 0x88
 800ec0e:	d158      	bne.n	800ecc2 <searchC+0x192>
 800ec10:	4b74      	ldr	r3, [pc, #464]	; (800ede4 <searchC+0x2b4>)
 800ec12:	881b      	ldrh	r3, [r3, #0]
 800ec14:	f3c3 2340 	ubfx	r3, r3, #9, #1
 800ec18:	b2db      	uxtb	r3, r3
 800ec1a:	2b00      	cmp	r3, #0
 800ec1c:	d051      	beq.n	800ecc2 <searchC+0x192>
					x = mouse.x;
 800ec1e:	4b78      	ldr	r3, [pc, #480]	; (800ee00 <searchC+0x2d0>)
 800ec20:	781b      	ldrb	r3, [r3, #0]
 800ec22:	70fb      	strb	r3, [r7, #3]
					y = mouse.y;
 800ec24:	4b76      	ldr	r3, [pc, #472]	; (800ee00 <searchC+0x2d0>)
 800ec26:	785b      	ldrb	r3, [r3, #1]
 800ec28:	70bb      	strb	r3, [r7, #2]
					adv_pos();
 800ec2a:	f000 ff69 	bl	800fb00 <adv_pos>
					if((map[mouse.y][mouse.x] & 0x0f) == (map[mouse.y][mouse.x]>>4)){
 800ec2e:	4b74      	ldr	r3, [pc, #464]	; (800ee00 <searchC+0x2d0>)
 800ec30:	785b      	ldrb	r3, [r3, #1]
 800ec32:	b2db      	uxtb	r3, r3
 800ec34:	4618      	mov	r0, r3
 800ec36:	4b72      	ldr	r3, [pc, #456]	; (800ee00 <searchC+0x2d0>)
 800ec38:	781b      	ldrb	r3, [r3, #0]
 800ec3a:	b2db      	uxtb	r3, r3
 800ec3c:	4619      	mov	r1, r3
 800ec3e:	4a71      	ldr	r2, [pc, #452]	; (800ee04 <searchC+0x2d4>)
 800ec40:	0103      	lsls	r3, r0, #4
 800ec42:	4413      	add	r3, r2
 800ec44:	440b      	add	r3, r1
 800ec46:	781b      	ldrb	r3, [r3, #0]
 800ec48:	f003 030f 	and.w	r3, r3, #15
 800ec4c:	4a6c      	ldr	r2, [pc, #432]	; (800ee00 <searchC+0x2d0>)
 800ec4e:	7852      	ldrb	r2, [r2, #1]
 800ec50:	b2d2      	uxtb	r2, r2
 800ec52:	4614      	mov	r4, r2
 800ec54:	4a6a      	ldr	r2, [pc, #424]	; (800ee00 <searchC+0x2d0>)
 800ec56:	7812      	ldrb	r2, [r2, #0]
 800ec58:	b2d2      	uxtb	r2, r2
 800ec5a:	4610      	mov	r0, r2
 800ec5c:	4969      	ldr	r1, [pc, #420]	; (800ee04 <searchC+0x2d4>)
 800ec5e:	0122      	lsls	r2, r4, #4
 800ec60:	440a      	add	r2, r1
 800ec62:	4402      	add	r2, r0
 800ec64:	7812      	ldrb	r2, [r2, #0]
 800ec66:	0912      	lsrs	r2, r2, #4
 800ec68:	b2d2      	uxtb	r2, r2
 800ec6a:	4293      	cmp	r3, r2
 800ec6c:	d111      	bne.n	800ec92 <searchC+0x162>
						if(!MF2.FLAG.HACCEL){
 800ec6e:	4b5f      	ldr	r3, [pc, #380]	; (800edec <searchC+0x2bc>)
 800ec70:	881b      	ldrh	r3, [r3, #0]
 800ec72:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800ec76:	b2db      	uxtb	r3, r3
 800ec78:	2b00      	cmp	r3, #0
 800ec7a:	d107      	bne.n	800ec8c <searchC+0x15c>
							one_sectionA();
 800ec7c:	f7f7 f950 	bl	8005f20 <one_sectionA>
							MF2.FLAG.HACCEL = 1;
 800ec80:	4a5a      	ldr	r2, [pc, #360]	; (800edec <searchC+0x2bc>)
 800ec82:	8813      	ldrh	r3, [r2, #0]
 800ec84:	f043 0302 	orr.w	r3, r3, #2
 800ec88:	8013      	strh	r3, [r2, #0]
 800ec8a:	e013      	b.n	800ecb4 <searchC+0x184>
						}else{
							one_sectionU();
 800ec8c:	f7f7 fb90 	bl	80063b0 <one_sectionU>
 800ec90:	e010      	b.n	800ecb4 <searchC+0x184>
						}
					}else if(MF2.FLAG.HACCEL){
 800ec92:	4b56      	ldr	r3, [pc, #344]	; (800edec <searchC+0x2bc>)
 800ec94:	881b      	ldrh	r3, [r3, #0]
 800ec96:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800ec9a:	b2db      	uxtb	r3, r3
 800ec9c:	2b00      	cmp	r3, #0
 800ec9e:	d007      	beq.n	800ecb0 <searchC+0x180>
						one_sectionD();
 800eca0:	f7f7 f9ca 	bl	8006038 <one_sectionD>
						MF2.FLAG.HACCEL = 0;
 800eca4:	4a51      	ldr	r2, [pc, #324]	; (800edec <searchC+0x2bc>)
 800eca6:	8813      	ldrh	r3, [r2, #0]
 800eca8:	f36f 0341 	bfc	r3, #1, #1
 800ecac:	8013      	strh	r3, [r2, #0]
 800ecae:	e001      	b.n	800ecb4 <searchC+0x184>
					}else{
						one_sectionU();
 800ecb0:	f7f7 fb7e 	bl	80063b0 <one_sectionU>
					}
					mouse.x = x;
 800ecb4:	4a52      	ldr	r2, [pc, #328]	; (800ee00 <searchC+0x2d0>)
 800ecb6:	78fb      	ldrb	r3, [r7, #3]
 800ecb8:	7013      	strb	r3, [r2, #0]
					mouse.y = y;
 800ecba:	4a51      	ldr	r2, [pc, #324]	; (800ee00 <searchC+0x2d0>)
 800ecbc:	78bb      	ldrb	r3, [r7, #2]
 800ecbe:	7053      	strb	r3, [r2, #1]
					one_sectionD();
					MF2.FLAG.HACCEL = 0;
				}else{
					one_sectionU();
				}
				break;
 800ecc0:	e027      	b.n	800ed12 <searchC+0x1e2>
				}else if(MF2.FLAG.HACCEL){
 800ecc2:	4b4a      	ldr	r3, [pc, #296]	; (800edec <searchC+0x2bc>)
 800ecc4:	881b      	ldrh	r3, [r3, #0]
 800ecc6:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800ecca:	b2db      	uxtb	r3, r3
 800eccc:	2b00      	cmp	r3, #0
 800ecce:	d007      	beq.n	800ece0 <searchC+0x1b0>
					one_sectionD();
 800ecd0:	f7f7 f9b2 	bl	8006038 <one_sectionD>
					MF2.FLAG.HACCEL = 0;
 800ecd4:	4a45      	ldr	r2, [pc, #276]	; (800edec <searchC+0x2bc>)
 800ecd6:	8813      	ldrh	r3, [r2, #0]
 800ecd8:	f36f 0341 	bfc	r3, #1, #1
 800ecdc:	8013      	strh	r3, [r2, #0]
				break;
 800ecde:	e018      	b.n	800ed12 <searchC+0x1e2>
					one_sectionU();
 800ece0:	f7f7 fb66 	bl	80063b0 <one_sectionU>
				break;
 800ece4:	e015      	b.n	800ed12 <searchC+0x1e2>
			//----a右折スラローム----
			case 0x44:
				slalom_R90();
 800ece6:	f7f7 fe0b 	bl	8006900 <slalom_R90>
				break;
 800ecea:	e012      	b.n	800ed12 <searchC+0x1e2>
			//----180回転----
			case 0x22:
				half_sectionD();
 800ecec:	f7f6 ffdc 	bl	8005ca8 <half_sectionD>
				rotate_180();
 800ecf0:	f7f7 fd2e 	bl	8006750 <rotate_180>
				if(wall_info & 0x88){
 800ecf4:	4b3c      	ldr	r3, [pc, #240]	; (800ede8 <searchC+0x2b8>)
 800ecf6:	781b      	ldrb	r3, [r3, #0]
 800ecf8:	f003 0388 	and.w	r3, r3, #136	; 0x88
 800ecfc:	2b00      	cmp	r3, #0
 800ecfe:	d002      	beq.n	800ed06 <searchC+0x1d6>
					set_position();
 800ed00:	f7f6 fe04 	bl	800590c <set_position>
				}else{
					half_sectionA();
				}
				break;
 800ed04:	e005      	b.n	800ed12 <searchC+0x1e2>
					half_sectionA();
 800ed06:	f7f6 ff69 	bl	8005bdc <half_sectionA>
				break;
 800ed0a:	e002      	b.n	800ed12 <searchC+0x1e2>
			//----a左折スラローム----
			case 0x11:
				slalom_L90();
 800ed0c:	f7f7 ff24 	bl	8006b58 <slalom_L90>
				break;
 800ed10:	bf00      	nop
		}
		adv_pos();
 800ed12:	f000 fef5 	bl	800fb00 <adv_pos>
		if(!MF.FLAG.SCND)conf_route();
 800ed16:	4b33      	ldr	r3, [pc, #204]	; (800ede4 <searchC+0x2b4>)
 800ed18:	881b      	ldrh	r3, [r3, #0]
 800ed1a:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800ed1e:	b2db      	uxtb	r3, r3
 800ed20:	2b00      	cmp	r3, #0
 800ed22:	d101      	bne.n	800ed28 <searchC+0x1f8>
 800ed24:	f000 ff26 	bl	800fb74 <conf_route>

//	}while((mouse.x != goal_x) || (mouse.y != goal_y));
	}while(smap[mouse.y][mouse.x] != 0);
 800ed28:	4b35      	ldr	r3, [pc, #212]	; (800ee00 <searchC+0x2d0>)
 800ed2a:	785b      	ldrb	r3, [r3, #1]
 800ed2c:	b2db      	uxtb	r3, r3
 800ed2e:	4618      	mov	r0, r3
 800ed30:	4b33      	ldr	r3, [pc, #204]	; (800ee00 <searchC+0x2d0>)
 800ed32:	781b      	ldrb	r3, [r3, #0]
 800ed34:	b2db      	uxtb	r3, r3
 800ed36:	4619      	mov	r1, r3
 800ed38:	4a33      	ldr	r2, [pc, #204]	; (800ee08 <searchC+0x2d8>)
 800ed3a:	0103      	lsls	r3, r0, #4
 800ed3c:	440b      	add	r3, r1
 800ed3e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ed42:	2b00      	cmp	r3, #0
 800ed44:	f47f af47 	bne.w	800ebd6 <searchC+0xa6>

	for(int j=0; j<goal_mode-1; j++){
 800ed48:	2300      	movs	r3, #0
 800ed4a:	607b      	str	r3, [r7, #4]
 800ed4c:	e006      	b.n	800ed5c <searchC+0x22c>
		one_sectionU();
 800ed4e:	f7f7 fb2f 	bl	80063b0 <one_sectionU>
		adv_pos();
 800ed52:	f000 fed5 	bl	800fb00 <adv_pos>
	for(int j=0; j<goal_mode-1; j++){
 800ed56:	687b      	ldr	r3, [r7, #4]
 800ed58:	3301      	adds	r3, #1
 800ed5a:	607b      	str	r3, [r7, #4]
 800ed5c:	4b25      	ldr	r3, [pc, #148]	; (800edf4 <searchC+0x2c4>)
 800ed5e:	781b      	ldrb	r3, [r3, #0]
 800ed60:	3b01      	subs	r3, #1
 800ed62:	687a      	ldr	r2, [r7, #4]
 800ed64:	429a      	cmp	r2, r3
 800ed66:	dbf2      	blt.n	800ed4e <searchC+0x21e>
	}
	half_sectionD();
 800ed68:	f7f6 ff9e 	bl	8005ca8 <half_sectionD>

	set_positionF();
 800ed6c:	f7f6 fde4 	bl	8005938 <set_positionF>

	MF2.FLAG.GOAL = (MF2.FLAG.GOAL+1)%2;
 800ed70:	4b1e      	ldr	r3, [pc, #120]	; (800edec <searchC+0x2bc>)
 800ed72:	881b      	ldrh	r3, [r3, #0]
 800ed74:	f3c3 2300 	ubfx	r3, r3, #8, #1
 800ed78:	b2db      	uxtb	r3, r3
 800ed7a:	3301      	adds	r3, #1
 800ed7c:	2b00      	cmp	r3, #0
 800ed7e:	f003 0301 	and.w	r3, r3, #1
 800ed82:	bfb8      	it	lt
 800ed84:	425b      	neglt	r3, r3
 800ed86:	f003 0301 	and.w	r3, r3, #1
 800ed8a:	b2d9      	uxtb	r1, r3
 800ed8c:	4a17      	ldr	r2, [pc, #92]	; (800edec <searchC+0x2bc>)
 800ed8e:	8813      	ldrh	r3, [r2, #0]
 800ed90:	f361 2308 	bfi	r3, r1, #8, #1
 800ed94:	8013      	strh	r3, [r2, #0]
	if(!MF2.FLAG.GOAL){
 800ed96:	4b15      	ldr	r3, [pc, #84]	; (800edec <searchC+0x2bc>)
 800ed98:	881b      	ldrh	r3, [r3, #0]
 800ed9a:	f3c3 2300 	ubfx	r3, r3, #8, #1
 800ed9e:	b2db      	uxtb	r3, r3
 800eda0:	2b00      	cmp	r3, #0
 800eda2:	d112      	bne.n	800edca <searchC+0x29a>
		HAL_Delay(500);
 800eda4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800eda8:	f7f2 f938 	bl	800101c <HAL_Delay>
		rotate_180();										//180度回転
 800edac:	f7f7 fcd0 	bl	8006750 <rotate_180>
		driveC2(SETPOS_BACK);         						//a尻を当てる程度に後退。回転後に停止する
 800edb0:	2064      	movs	r0, #100	; 0x64
 800edb2:	f7f6 fb25 	bl	8005400 <driveC2>
		degree_z = target_degree_z;
 800edb6:	4b15      	ldr	r3, [pc, #84]	; (800ee0c <searchC+0x2dc>)
 800edb8:	681b      	ldr	r3, [r3, #0]
 800edba:	4a15      	ldr	r2, [pc, #84]	; (800ee10 <searchC+0x2e0>)
 800edbc:	6013      	str	r3, [r2, #0]
		start_mode = 0;
 800edbe:	4b0c      	ldr	r3, [pc, #48]	; (800edf0 <searchC+0x2c0>)
 800edc0:	2200      	movs	r2, #0
 800edc2:	701a      	strb	r2, [r3, #0]
		goal_mode = 1;
 800edc4:	4b0b      	ldr	r3, [pc, #44]	; (800edf4 <searchC+0x2c4>)
 800edc6:	2201      	movs	r2, #1
 800edc8:	701a      	strb	r2, [r3, #0]
	}

	if(!MF.FLAG.SCND){
 800edca:	4b06      	ldr	r3, [pc, #24]	; (800ede4 <searchC+0x2b4>)
 800edcc:	881b      	ldrh	r3, [r3, #0]
 800edce:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800edd2:	b2db      	uxtb	r3, r3
 800edd4:	2b00      	cmp	r3, #0
 800edd6:	d101      	bne.n	800eddc <searchC+0x2ac>
		store_map_in_eeprom();
 800edd8:	f002 fdec 	bl	80119b4 <store_map_in_eeprom>
	}
}
 800eddc:	bf00      	nop
 800edde:	370c      	adds	r7, #12
 800ede0:	46bd      	mov	sp, r7
 800ede2:	bd90      	pop	{r4, r7, pc}
 800ede4:	20000f68 	.word	0x20000f68
 800ede8:	200002c8 	.word	0x200002c8
 800edec:	20000f64 	.word	0x20000f64
 800edf0:	200015c8 	.word	0x200015c8
 800edf4:	20000bb1 	.word	0x20000bb1
 800edf8:	200015d0 	.word	0x200015d0
 800edfc:	20000c54 	.word	0x20000c54
 800ee00:	20000c0c 	.word	0x20000c0c
 800ee04:	200001ac 	.word	0x200001ac
 800ee08:	20000d60 	.word	0x20000d60
 800ee0c:	20000bf8 	.word	0x20000bf8
 800ee10:	20000b5c 	.word	0x20000b5c

0800ee14 <searchC2>:
//searchC2
//aスラローム走行でgoal座標に進む　重ね探索用
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void searchC2(){
 800ee14:	b590      	push	{r4, r7, lr}
 800ee16:	b083      	sub	sp, #12
 800ee18:	af00      	add	r7, sp, #0

	if(MF.FLAG.SRC2){
 800ee1a:	4bab      	ldr	r3, [pc, #684]	; (800f0c8 <searchC2+0x2b4>)
 800ee1c:	881b      	ldrh	r3, [r3, #0]
 800ee1e:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800ee22:	b2db      	uxtb	r3, r3
 800ee24:	2b00      	cmp	r3, #0
 800ee26:	d001      	beq.n	800ee2c <searchC2+0x18>
		load_map_from_eeprom();
 800ee28:	f002 fdfe 	bl	8011a28 <load_map_from_eeprom>
	}

	//====aスタート位置壁情報取得====
	if(!MF.FLAG.SCND)get_wall_info();										//a壁情報の初期化, 後壁はなくなる
 800ee2c:	4ba6      	ldr	r3, [pc, #664]	; (800f0c8 <searchC2+0x2b4>)
 800ee2e:	881b      	ldrh	r3, [r3, #0]
 800ee30:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800ee34:	b2db      	uxtb	r3, r3
 800ee36:	2b00      	cmp	r3, #0
 800ee38:	d101      	bne.n	800ee3e <searchC2+0x2a>
 800ee3a:	f002 fe6d 	bl	8011b18 <get_wall_info>
	if(!MF.FLAG.SCND)wall_info &= ~0x88;									//a前壁は存在するはずがないので削除する
 800ee3e:	4ba2      	ldr	r3, [pc, #648]	; (800f0c8 <searchC2+0x2b4>)
 800ee40:	881b      	ldrh	r3, [r3, #0]
 800ee42:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800ee46:	b2db      	uxtb	r3, r3
 800ee48:	2b00      	cmp	r3, #0
 800ee4a:	d106      	bne.n	800ee5a <searchC2+0x46>
 800ee4c:	4b9f      	ldr	r3, [pc, #636]	; (800f0cc <searchC2+0x2b8>)
 800ee4e:	781b      	ldrb	r3, [r3, #0]
 800ee50:	f003 0377 	and.w	r3, r3, #119	; 0x77
 800ee54:	b2da      	uxtb	r2, r3
 800ee56:	4b9d      	ldr	r3, [pc, #628]	; (800f0cc <searchC2+0x2b8>)
 800ee58:	701a      	strb	r2, [r3, #0]
	if(!MF.FLAG.SCND)write_map();											//a壁情報を地図に記入
 800ee5a:	4b9b      	ldr	r3, [pc, #620]	; (800f0c8 <searchC2+0x2b4>)
 800ee5c:	881b      	ldrh	r3, [r3, #0]
 800ee5e:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800ee62:	b2db      	uxtb	r3, r3
 800ee64:	2b00      	cmp	r3, #0
 800ee66:	d101      	bne.n	800ee6c <searchC2+0x58>
 800ee68:	f000 ff0e 	bl	800fc88 <write_map>

	if(MF2.FLAG.GOAL){
 800ee6c:	4b98      	ldr	r3, [pc, #608]	; (800f0d0 <searchC2+0x2bc>)
 800ee6e:	881b      	ldrh	r3, [r3, #0]
 800ee70:	f3c3 2300 	ubfx	r3, r3, #8, #1
 800ee74:	b2db      	uxtb	r3, r3
 800ee76:	2b00      	cmp	r3, #0
 800ee78:	d00b      	beq.n	800ee92 <searchC2+0x7e>
		HAL_Delay(500);
 800ee7a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800ee7e:	f7f2 f8cd 	bl	800101c <HAL_Delay>
		rotate_180();											//180度回転
 800ee82:	f7f7 fc65 	bl	8006750 <rotate_180>
//		driveC2(SETPOS_BACK);         							//a尻を当てる程度に後退。回転後に停止する
//		degree_z = target_degree_z;
//		start_mode = 0;
		start_mode = 1;
 800ee86:	4b93      	ldr	r3, [pc, #588]	; (800f0d4 <searchC2+0x2c0>)
 800ee88:	2201      	movs	r2, #1
 800ee8a:	701a      	strb	r2, [r3, #0]
		goal_mode = 1;
 800ee8c:	4b92      	ldr	r3, [pc, #584]	; (800f0d8 <searchC2+0x2c4>)
 800ee8e:	2201      	movs	r2, #1
 800ee90:	701a      	strb	r2, [r3, #0]
	}

	//====a前に壁が無い想定で問答無用で前進====
	start_sectionA();
 800ee92:	f7f6 fd6f 	bl	8005974 <start_sectionA>
	adv_pos();
 800ee96:	f000 fe33 	bl	800fb00 <adv_pos>

	//====a歩数マップ・経路作成====
	if(!MF.FLAG.SCND)write_map();											//a壁情報を地図に記入
 800ee9a:	4b8b      	ldr	r3, [pc, #556]	; (800f0c8 <searchC2+0x2b4>)
 800ee9c:	881b      	ldrh	r3, [r3, #0]
 800ee9e:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800eea2:	b2db      	uxtb	r3, r3
 800eea4:	2b00      	cmp	r3, #0
 800eea6:	d101      	bne.n	800eeac <searchC2+0x98>
 800eea8:	f000 feee 	bl	800fc88 <write_map>
	r_cnt = 0;																//a経路カウンタの初期化
 800eeac:	4b8b      	ldr	r3, [pc, #556]	; (800f0dc <searchC2+0x2c8>)
 800eeae:	2200      	movs	r2, #0
 800eeb0:	701a      	strb	r2, [r3, #0]
	make_smap();															//a歩数マップ作成
 800eeb2:	f001 f8dd 	bl	8010070 <make_smap>
	make_route();															//a最短経路探索（route配列に動作が格納される）
 800eeb6:	f001 fc99 	bl	80107ec <make_route>
	uint8_t x, y;															//X，Y座標

	//====a探索走行====
	do{
		//----a進行----
		switch(route[r_cnt++]){												//route配列によって進行を決定。経路カウンタを進める
 800eeba:	4b88      	ldr	r3, [pc, #544]	; (800f0dc <searchC2+0x2c8>)
 800eebc:	781b      	ldrb	r3, [r3, #0]
 800eebe:	1c5a      	adds	r2, r3, #1
 800eec0:	b2d1      	uxtb	r1, r2
 800eec2:	4a86      	ldr	r2, [pc, #536]	; (800f0dc <searchC2+0x2c8>)
 800eec4:	7011      	strb	r1, [r2, #0]
 800eec6:	461a      	mov	r2, r3
 800eec8:	4b85      	ldr	r3, [pc, #532]	; (800f0e0 <searchC2+0x2cc>)
 800eeca:	5c9b      	ldrb	r3, [r3, r2]
 800eecc:	2b22      	cmp	r3, #34	; 0x22
 800eece:	d07f      	beq.n	800efd0 <searchC2+0x1bc>
 800eed0:	2b22      	cmp	r3, #34	; 0x22
 800eed2:	dc03      	bgt.n	800eedc <searchC2+0xc8>
 800eed4:	2b11      	cmp	r3, #17
 800eed6:	f000 808b 	beq.w	800eff0 <searchC2+0x1dc>
 800eeda:	e08c      	b.n	800eff6 <searchC2+0x1e2>
 800eedc:	2b44      	cmp	r3, #68	; 0x44
 800eede:	d074      	beq.n	800efca <searchC2+0x1b6>
 800eee0:	2b88      	cmp	r3, #136	; 0x88
 800eee2:	f040 8088 	bne.w	800eff6 <searchC2+0x1e2>
			//----a前進----
			case 0x88:
				if(route[r_cnt] == 0x88 && MF.FLAG.ACCL2){
 800eee6:	4b7d      	ldr	r3, [pc, #500]	; (800f0dc <searchC2+0x2c8>)
 800eee8:	781b      	ldrb	r3, [r3, #0]
 800eeea:	461a      	mov	r2, r3
 800eeec:	4b7c      	ldr	r3, [pc, #496]	; (800f0e0 <searchC2+0x2cc>)
 800eeee:	5c9b      	ldrb	r3, [r3, r2]
 800eef0:	2b88      	cmp	r3, #136	; 0x88
 800eef2:	d158      	bne.n	800efa6 <searchC2+0x192>
 800eef4:	4b74      	ldr	r3, [pc, #464]	; (800f0c8 <searchC2+0x2b4>)
 800eef6:	881b      	ldrh	r3, [r3, #0]
 800eef8:	f3c3 2340 	ubfx	r3, r3, #9, #1
 800eefc:	b2db      	uxtb	r3, r3
 800eefe:	2b00      	cmp	r3, #0
 800ef00:	d051      	beq.n	800efa6 <searchC2+0x192>
					x = mouse.x;
 800ef02:	4b78      	ldr	r3, [pc, #480]	; (800f0e4 <searchC2+0x2d0>)
 800ef04:	781b      	ldrb	r3, [r3, #0]
 800ef06:	70fb      	strb	r3, [r7, #3]
					y = mouse.y;
 800ef08:	4b76      	ldr	r3, [pc, #472]	; (800f0e4 <searchC2+0x2d0>)
 800ef0a:	785b      	ldrb	r3, [r3, #1]
 800ef0c:	70bb      	strb	r3, [r7, #2]
					adv_pos();
 800ef0e:	f000 fdf7 	bl	800fb00 <adv_pos>
					if((map[mouse.y][mouse.x] & 0x0f) == (map[mouse.y][mouse.x]>>4)){
 800ef12:	4b74      	ldr	r3, [pc, #464]	; (800f0e4 <searchC2+0x2d0>)
 800ef14:	785b      	ldrb	r3, [r3, #1]
 800ef16:	b2db      	uxtb	r3, r3
 800ef18:	4618      	mov	r0, r3
 800ef1a:	4b72      	ldr	r3, [pc, #456]	; (800f0e4 <searchC2+0x2d0>)
 800ef1c:	781b      	ldrb	r3, [r3, #0]
 800ef1e:	b2db      	uxtb	r3, r3
 800ef20:	4619      	mov	r1, r3
 800ef22:	4a71      	ldr	r2, [pc, #452]	; (800f0e8 <searchC2+0x2d4>)
 800ef24:	0103      	lsls	r3, r0, #4
 800ef26:	4413      	add	r3, r2
 800ef28:	440b      	add	r3, r1
 800ef2a:	781b      	ldrb	r3, [r3, #0]
 800ef2c:	f003 030f 	and.w	r3, r3, #15
 800ef30:	4a6c      	ldr	r2, [pc, #432]	; (800f0e4 <searchC2+0x2d0>)
 800ef32:	7852      	ldrb	r2, [r2, #1]
 800ef34:	b2d2      	uxtb	r2, r2
 800ef36:	4614      	mov	r4, r2
 800ef38:	4a6a      	ldr	r2, [pc, #424]	; (800f0e4 <searchC2+0x2d0>)
 800ef3a:	7812      	ldrb	r2, [r2, #0]
 800ef3c:	b2d2      	uxtb	r2, r2
 800ef3e:	4610      	mov	r0, r2
 800ef40:	4969      	ldr	r1, [pc, #420]	; (800f0e8 <searchC2+0x2d4>)
 800ef42:	0122      	lsls	r2, r4, #4
 800ef44:	440a      	add	r2, r1
 800ef46:	4402      	add	r2, r0
 800ef48:	7812      	ldrb	r2, [r2, #0]
 800ef4a:	0912      	lsrs	r2, r2, #4
 800ef4c:	b2d2      	uxtb	r2, r2
 800ef4e:	4293      	cmp	r3, r2
 800ef50:	d111      	bne.n	800ef76 <searchC2+0x162>
						if(!MF2.FLAG.HACCEL){
 800ef52:	4b5f      	ldr	r3, [pc, #380]	; (800f0d0 <searchC2+0x2bc>)
 800ef54:	881b      	ldrh	r3, [r3, #0]
 800ef56:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800ef5a:	b2db      	uxtb	r3, r3
 800ef5c:	2b00      	cmp	r3, #0
 800ef5e:	d107      	bne.n	800ef70 <searchC2+0x15c>
							one_sectionA();
 800ef60:	f7f6 ffde 	bl	8005f20 <one_sectionA>
							MF2.FLAG.HACCEL = 1;
 800ef64:	4a5a      	ldr	r2, [pc, #360]	; (800f0d0 <searchC2+0x2bc>)
 800ef66:	8813      	ldrh	r3, [r2, #0]
 800ef68:	f043 0302 	orr.w	r3, r3, #2
 800ef6c:	8013      	strh	r3, [r2, #0]
 800ef6e:	e013      	b.n	800ef98 <searchC2+0x184>
						}else{
							one_sectionU();
 800ef70:	f7f7 fa1e 	bl	80063b0 <one_sectionU>
 800ef74:	e010      	b.n	800ef98 <searchC2+0x184>
						}
					}else if(MF2.FLAG.HACCEL){
 800ef76:	4b56      	ldr	r3, [pc, #344]	; (800f0d0 <searchC2+0x2bc>)
 800ef78:	881b      	ldrh	r3, [r3, #0]
 800ef7a:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800ef7e:	b2db      	uxtb	r3, r3
 800ef80:	2b00      	cmp	r3, #0
 800ef82:	d007      	beq.n	800ef94 <searchC2+0x180>
						one_sectionD();
 800ef84:	f7f7 f858 	bl	8006038 <one_sectionD>
						MF2.FLAG.HACCEL = 0;
 800ef88:	4a51      	ldr	r2, [pc, #324]	; (800f0d0 <searchC2+0x2bc>)
 800ef8a:	8813      	ldrh	r3, [r2, #0]
 800ef8c:	f36f 0341 	bfc	r3, #1, #1
 800ef90:	8013      	strh	r3, [r2, #0]
 800ef92:	e001      	b.n	800ef98 <searchC2+0x184>
					}else{
						one_sectionU();
 800ef94:	f7f7 fa0c 	bl	80063b0 <one_sectionU>
					}
					mouse.x = x;
 800ef98:	4a52      	ldr	r2, [pc, #328]	; (800f0e4 <searchC2+0x2d0>)
 800ef9a:	78fb      	ldrb	r3, [r7, #3]
 800ef9c:	7013      	strb	r3, [r2, #0]
					mouse.y = y;
 800ef9e:	4a51      	ldr	r2, [pc, #324]	; (800f0e4 <searchC2+0x2d0>)
 800efa0:	78bb      	ldrb	r3, [r7, #2]
 800efa2:	7053      	strb	r3, [r2, #1]
					one_sectionD();
					MF2.FLAG.HACCEL = 0;
				}else{
					one_sectionU();
				}
				break;
 800efa4:	e027      	b.n	800eff6 <searchC2+0x1e2>
				}else if(MF2.FLAG.HACCEL){
 800efa6:	4b4a      	ldr	r3, [pc, #296]	; (800f0d0 <searchC2+0x2bc>)
 800efa8:	881b      	ldrh	r3, [r3, #0]
 800efaa:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800efae:	b2db      	uxtb	r3, r3
 800efb0:	2b00      	cmp	r3, #0
 800efb2:	d007      	beq.n	800efc4 <searchC2+0x1b0>
					one_sectionD();
 800efb4:	f7f7 f840 	bl	8006038 <one_sectionD>
					MF2.FLAG.HACCEL = 0;
 800efb8:	4a45      	ldr	r2, [pc, #276]	; (800f0d0 <searchC2+0x2bc>)
 800efba:	8813      	ldrh	r3, [r2, #0]
 800efbc:	f36f 0341 	bfc	r3, #1, #1
 800efc0:	8013      	strh	r3, [r2, #0]
				break;
 800efc2:	e018      	b.n	800eff6 <searchC2+0x1e2>
					one_sectionU();
 800efc4:	f7f7 f9f4 	bl	80063b0 <one_sectionU>
				break;
 800efc8:	e015      	b.n	800eff6 <searchC2+0x1e2>
			//----a右折スラローム----
			case 0x44:
				slalom_R90();
 800efca:	f7f7 fc99 	bl	8006900 <slalom_R90>
				break;
 800efce:	e012      	b.n	800eff6 <searchC2+0x1e2>
			//----180回転----
			case 0x22:
				half_sectionD();
 800efd0:	f7f6 fe6a 	bl	8005ca8 <half_sectionD>
				rotate_180();
 800efd4:	f7f7 fbbc 	bl	8006750 <rotate_180>
				if(wall_info & 0x88){
 800efd8:	4b3c      	ldr	r3, [pc, #240]	; (800f0cc <searchC2+0x2b8>)
 800efda:	781b      	ldrb	r3, [r3, #0]
 800efdc:	f003 0388 	and.w	r3, r3, #136	; 0x88
 800efe0:	2b00      	cmp	r3, #0
 800efe2:	d002      	beq.n	800efea <searchC2+0x1d6>
					set_position();
 800efe4:	f7f6 fc92 	bl	800590c <set_position>
				}else{
					half_sectionA();
				}
				break;
 800efe8:	e005      	b.n	800eff6 <searchC2+0x1e2>
					half_sectionA();
 800efea:	f7f6 fdf7 	bl	8005bdc <half_sectionA>
				break;
 800efee:	e002      	b.n	800eff6 <searchC2+0x1e2>
			//----a左折スラローム----
			case 0x11:
				slalom_L90();
 800eff0:	f7f7 fdb2 	bl	8006b58 <slalom_L90>
				break;
 800eff4:	bf00      	nop
		}
		adv_pos();
 800eff6:	f000 fd83 	bl	800fb00 <adv_pos>
		if(!MF.FLAG.SCND)conf_route();
 800effa:	4b33      	ldr	r3, [pc, #204]	; (800f0c8 <searchC2+0x2b4>)
 800effc:	881b      	ldrh	r3, [r3, #0]
 800effe:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800f002:	b2db      	uxtb	r3, r3
 800f004:	2b00      	cmp	r3, #0
 800f006:	d101      	bne.n	800f00c <searchC2+0x1f8>
 800f008:	f000 fdb4 	bl	800fb74 <conf_route>

//	}while((mouse.x != goal_x) || (mouse.y != goal_y));
	}while(smap[mouse.y][mouse.x] != 0);
 800f00c:	4b35      	ldr	r3, [pc, #212]	; (800f0e4 <searchC2+0x2d0>)
 800f00e:	785b      	ldrb	r3, [r3, #1]
 800f010:	b2db      	uxtb	r3, r3
 800f012:	4618      	mov	r0, r3
 800f014:	4b33      	ldr	r3, [pc, #204]	; (800f0e4 <searchC2+0x2d0>)
 800f016:	781b      	ldrb	r3, [r3, #0]
 800f018:	b2db      	uxtb	r3, r3
 800f01a:	4619      	mov	r1, r3
 800f01c:	4a33      	ldr	r2, [pc, #204]	; (800f0ec <searchC2+0x2d8>)
 800f01e:	0103      	lsls	r3, r0, #4
 800f020:	440b      	add	r3, r1
 800f022:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f026:	2b00      	cmp	r3, #0
 800f028:	f47f af47 	bne.w	800eeba <searchC2+0xa6>

	for(int j=0; j<goal_mode-1; j++){
 800f02c:	2300      	movs	r3, #0
 800f02e:	607b      	str	r3, [r7, #4]
 800f030:	e006      	b.n	800f040 <searchC2+0x22c>
		one_sectionU();
 800f032:	f7f7 f9bd 	bl	80063b0 <one_sectionU>
		adv_pos();
 800f036:	f000 fd63 	bl	800fb00 <adv_pos>
	for(int j=0; j<goal_mode-1; j++){
 800f03a:	687b      	ldr	r3, [r7, #4]
 800f03c:	3301      	adds	r3, #1
 800f03e:	607b      	str	r3, [r7, #4]
 800f040:	4b25      	ldr	r3, [pc, #148]	; (800f0d8 <searchC2+0x2c4>)
 800f042:	781b      	ldrb	r3, [r3, #0]
 800f044:	3b01      	subs	r3, #1
 800f046:	687a      	ldr	r2, [r7, #4]
 800f048:	429a      	cmp	r2, r3
 800f04a:	dbf2      	blt.n	800f032 <searchC2+0x21e>
	}
	half_sectionD();
 800f04c:	f7f6 fe2c 	bl	8005ca8 <half_sectionD>

	set_positionF();
 800f050:	f7f6 fc72 	bl	8005938 <set_positionF>

	MF2.FLAG.GOAL = (MF2.FLAG.GOAL+1)%2;
 800f054:	4b1e      	ldr	r3, [pc, #120]	; (800f0d0 <searchC2+0x2bc>)
 800f056:	881b      	ldrh	r3, [r3, #0]
 800f058:	f3c3 2300 	ubfx	r3, r3, #8, #1
 800f05c:	b2db      	uxtb	r3, r3
 800f05e:	3301      	adds	r3, #1
 800f060:	2b00      	cmp	r3, #0
 800f062:	f003 0301 	and.w	r3, r3, #1
 800f066:	bfb8      	it	lt
 800f068:	425b      	neglt	r3, r3
 800f06a:	f003 0301 	and.w	r3, r3, #1
 800f06e:	b2d9      	uxtb	r1, r3
 800f070:	4a17      	ldr	r2, [pc, #92]	; (800f0d0 <searchC2+0x2bc>)
 800f072:	8813      	ldrh	r3, [r2, #0]
 800f074:	f361 2308 	bfi	r3, r1, #8, #1
 800f078:	8013      	strh	r3, [r2, #0]
	if(!MF2.FLAG.GOAL){
 800f07a:	4b15      	ldr	r3, [pc, #84]	; (800f0d0 <searchC2+0x2bc>)
 800f07c:	881b      	ldrh	r3, [r3, #0]
 800f07e:	f3c3 2300 	ubfx	r3, r3, #8, #1
 800f082:	b2db      	uxtb	r3, r3
 800f084:	2b00      	cmp	r3, #0
 800f086:	d112      	bne.n	800f0ae <searchC2+0x29a>
		HAL_Delay(500);
 800f088:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800f08c:	f7f1 ffc6 	bl	800101c <HAL_Delay>
		rotate_180();										//180度回転
 800f090:	f7f7 fb5e 	bl	8006750 <rotate_180>
		driveC2(SETPOS_BACK);         						//a尻を当てる程度に後退。回転後に停止する
 800f094:	2064      	movs	r0, #100	; 0x64
 800f096:	f7f6 f9b3 	bl	8005400 <driveC2>
		degree_z = target_degree_z;
 800f09a:	4b15      	ldr	r3, [pc, #84]	; (800f0f0 <searchC2+0x2dc>)
 800f09c:	681b      	ldr	r3, [r3, #0]
 800f09e:	4a15      	ldr	r2, [pc, #84]	; (800f0f4 <searchC2+0x2e0>)
 800f0a0:	6013      	str	r3, [r2, #0]
		start_mode = 0;
 800f0a2:	4b0c      	ldr	r3, [pc, #48]	; (800f0d4 <searchC2+0x2c0>)
 800f0a4:	2200      	movs	r2, #0
 800f0a6:	701a      	strb	r2, [r3, #0]
		goal_mode = 1;
 800f0a8:	4b0b      	ldr	r3, [pc, #44]	; (800f0d8 <searchC2+0x2c4>)
 800f0aa:	2201      	movs	r2, #1
 800f0ac:	701a      	strb	r2, [r3, #0]
	}

	if(!MF.FLAG.SCND){
 800f0ae:	4b06      	ldr	r3, [pc, #24]	; (800f0c8 <searchC2+0x2b4>)
 800f0b0:	881b      	ldrh	r3, [r3, #0]
 800f0b2:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800f0b6:	b2db      	uxtb	r3, r3
 800f0b8:	2b00      	cmp	r3, #0
 800f0ba:	d101      	bne.n	800f0c0 <searchC2+0x2ac>
		store_map_in_eeprom();
 800f0bc:	f002 fc7a 	bl	80119b4 <store_map_in_eeprom>
	}
}
 800f0c0:	bf00      	nop
 800f0c2:	370c      	adds	r7, #12
 800f0c4:	46bd      	mov	sp, r7
 800f0c6:	bd90      	pop	{r4, r7, pc}
 800f0c8:	20000f68 	.word	0x20000f68
 800f0cc:	200002c8 	.word	0x200002c8
 800f0d0:	20000f64 	.word	0x20000f64
 800f0d4:	200015c8 	.word	0x200015c8
 800f0d8:	20000bb1 	.word	0x20000bb1
 800f0dc:	200015d0 	.word	0x200015d0
 800f0e0:	20000c54 	.word	0x20000c54
 800f0e4:	20000c0c 	.word	0x20000c0c
 800f0e8:	200001ac 	.word	0x200001ac
 800f0ec:	20000d60 	.word	0x20000d60
 800f0f0:	20000bf8 	.word	0x20000bf8
 800f0f4:	20000b5c 	.word	0x20000b5c

0800f0f8 <searchD>:
//searchD
//aスラローム走行+既知区間加速でgoal座標に進む
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void searchD(){
 800f0f8:	b580      	push	{r7, lr}
 800f0fa:	b082      	sub	sp, #8
 800f0fc:	af00      	add	r7, sp, #0

	if(MF.FLAG.SCND){
 800f0fe:	4b6a      	ldr	r3, [pc, #424]	; (800f2a8 <searchD+0x1b0>)
 800f100:	881b      	ldrh	r3, [r3, #0]
 800f102:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800f106:	b2db      	uxtb	r3, r3
 800f108:	2b00      	cmp	r3, #0
 800f10a:	d001      	beq.n	800f110 <searchD+0x18>
		load_map_from_eeprom();
 800f10c:	f002 fc8c 	bl	8011a28 <load_map_from_eeprom>
//	if(!MF.FLAG.SCND)get_wall_info();										//a壁情報の初期化, 後壁はなくなる
//	if(!MF.FLAG.SCND)wall_info &= ~0x88;									//a前壁は存在するはずがないので削除する
//	if(!MF.FLAG.SCND)write_map();											//a壁情報を地図に記入

	//====a前に壁が無い想定で問答無用で前進====
	start_sectionA();
 800f110:	f7f6 fc30 	bl	8005974 <start_sectionA>
	adv_pos();
 800f114:	f000 fcf4 	bl	800fb00 <adv_pos>

	//====a歩数マップ・経路作成====
//	if(!MF.FLAG.SCND)write_map();											//a壁情報を地図に記入
	r_cnt = 0;												//a経路カウンタの初期化
 800f118:	4b64      	ldr	r3, [pc, #400]	; (800f2ac <searchD+0x1b4>)
 800f11a:	2200      	movs	r2, #0
 800f11c:	701a      	strb	r2, [r3, #0]
	make_smap();											//a歩数マップ作成
 800f11e:	f000 ffa7 	bl	8010070 <make_smap>
	make_route();											//a最短経路探索（route配列に動作が格納される）
 800f122:	f001 fb63 	bl	80107ec <make_route>

	MF2.FLAG.HACCEL = 0;
 800f126:	4a62      	ldr	r2, [pc, #392]	; (800f2b0 <searchD+0x1b8>)
 800f128:	8813      	ldrh	r3, [r2, #0]
 800f12a:	f36f 0341 	bfc	r3, #1, #1
 800f12e:	8013      	strh	r3, [r2, #0]

	//====a探索走行====
	do{
		//----a進行----
		switch(route[r_cnt++]){								//route配列によって進行を決定。経路カウンタを進める
 800f130:	4b5e      	ldr	r3, [pc, #376]	; (800f2ac <searchD+0x1b4>)
 800f132:	781b      	ldrb	r3, [r3, #0]
 800f134:	1c5a      	adds	r2, r3, #1
 800f136:	b2d1      	uxtb	r1, r2
 800f138:	4a5c      	ldr	r2, [pc, #368]	; (800f2ac <searchD+0x1b4>)
 800f13a:	7011      	strb	r1, [r2, #0]
 800f13c:	461a      	mov	r2, r3
 800f13e:	4b5d      	ldr	r3, [pc, #372]	; (800f2b4 <searchD+0x1bc>)
 800f140:	5c9b      	ldrb	r3, [r3, r2]
 800f142:	2b22      	cmp	r3, #34	; 0x22
 800f144:	d05d      	beq.n	800f202 <searchD+0x10a>
 800f146:	2b22      	cmp	r3, #34	; 0x22
 800f148:	dc02      	bgt.n	800f150 <searchD+0x58>
 800f14a:	2b11      	cmp	r3, #17
 800f14c:	d069      	beq.n	800f222 <searchD+0x12a>
 800f14e:	e06b      	b.n	800f228 <searchD+0x130>
 800f150:	2b44      	cmp	r3, #68	; 0x44
 800f152:	d053      	beq.n	800f1fc <searchD+0x104>
 800f154:	2b88      	cmp	r3, #136	; 0x88
 800f156:	d167      	bne.n	800f228 <searchD+0x130>
			//----a前進----
			case 0x88:
				if(MF.FLAG.SCND && MF.FLAG.ACCL2){
 800f158:	4b53      	ldr	r3, [pc, #332]	; (800f2a8 <searchD+0x1b0>)
 800f15a:	881b      	ldrh	r3, [r3, #0]
 800f15c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800f160:	b2db      	uxtb	r3, r3
 800f162:	2b00      	cmp	r3, #0
 800f164:	d046      	beq.n	800f1f4 <searchD+0xfc>
 800f166:	4b50      	ldr	r3, [pc, #320]	; (800f2a8 <searchD+0x1b0>)
 800f168:	881b      	ldrh	r3, [r3, #0]
 800f16a:	f3c3 2340 	ubfx	r3, r3, #9, #1
 800f16e:	b2db      	uxtb	r3, r3
 800f170:	2b00      	cmp	r3, #0
 800f172:	d03f      	beq.n	800f1f4 <searchD+0xfc>
					if(((route[r_cnt-1] & route[r_cnt]) == 0x88) && (route[r_cnt] != 0xff) && (MF2.FLAG.HACCEL == 0)){
 800f174:	4b4d      	ldr	r3, [pc, #308]	; (800f2ac <searchD+0x1b4>)
 800f176:	781b      	ldrb	r3, [r3, #0]
 800f178:	3b01      	subs	r3, #1
 800f17a:	4a4e      	ldr	r2, [pc, #312]	; (800f2b4 <searchD+0x1bc>)
 800f17c:	5cd2      	ldrb	r2, [r2, r3]
 800f17e:	4b4b      	ldr	r3, [pc, #300]	; (800f2ac <searchD+0x1b4>)
 800f180:	781b      	ldrb	r3, [r3, #0]
 800f182:	4619      	mov	r1, r3
 800f184:	4b4b      	ldr	r3, [pc, #300]	; (800f2b4 <searchD+0x1bc>)
 800f186:	5c5b      	ldrb	r3, [r3, r1]
 800f188:	4013      	ands	r3, r2
 800f18a:	b2db      	uxtb	r3, r3
 800f18c:	2b88      	cmp	r3, #136	; 0x88
 800f18e:	d115      	bne.n	800f1bc <searchD+0xc4>
 800f190:	4b46      	ldr	r3, [pc, #280]	; (800f2ac <searchD+0x1b4>)
 800f192:	781b      	ldrb	r3, [r3, #0]
 800f194:	461a      	mov	r2, r3
 800f196:	4b47      	ldr	r3, [pc, #284]	; (800f2b4 <searchD+0x1bc>)
 800f198:	5c9b      	ldrb	r3, [r3, r2]
 800f19a:	2bff      	cmp	r3, #255	; 0xff
 800f19c:	d00e      	beq.n	800f1bc <searchD+0xc4>
 800f19e:	4b44      	ldr	r3, [pc, #272]	; (800f2b0 <searchD+0x1b8>)
 800f1a0:	881b      	ldrh	r3, [r3, #0]
 800f1a2:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800f1a6:	b2db      	uxtb	r3, r3
 800f1a8:	2b00      	cmp	r3, #0
 800f1aa:	d107      	bne.n	800f1bc <searchD+0xc4>
						one_sectionA();
 800f1ac:	f7f6 feb8 	bl	8005f20 <one_sectionA>
						MF2.FLAG.HACCEL = 1;
 800f1b0:	4a3f      	ldr	r2, [pc, #252]	; (800f2b0 <searchD+0x1b8>)
 800f1b2:	8813      	ldrh	r3, [r2, #0]
 800f1b4:	f043 0302 	orr.w	r3, r3, #2
 800f1b8:	8013      	strh	r3, [r2, #0]
 800f1ba:	e01a      	b.n	800f1f2 <searchD+0xfa>
					}
					else if((route[r_cnt] & 0x55) && (MF2.FLAG.HACCEL)){
 800f1bc:	4b3b      	ldr	r3, [pc, #236]	; (800f2ac <searchD+0x1b4>)
 800f1be:	781b      	ldrb	r3, [r3, #0]
 800f1c0:	461a      	mov	r2, r3
 800f1c2:	4b3c      	ldr	r3, [pc, #240]	; (800f2b4 <searchD+0x1bc>)
 800f1c4:	5c9b      	ldrb	r3, [r3, r2]
 800f1c6:	f003 0355 	and.w	r3, r3, #85	; 0x55
 800f1ca:	2b00      	cmp	r3, #0
 800f1cc:	d00e      	beq.n	800f1ec <searchD+0xf4>
 800f1ce:	4b38      	ldr	r3, [pc, #224]	; (800f2b0 <searchD+0x1b8>)
 800f1d0:	881b      	ldrh	r3, [r3, #0]
 800f1d2:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800f1d6:	b2db      	uxtb	r3, r3
 800f1d8:	2b00      	cmp	r3, #0
 800f1da:	d007      	beq.n	800f1ec <searchD+0xf4>
						one_sectionD();
 800f1dc:	f7f6 ff2c 	bl	8006038 <one_sectionD>
						MF2.FLAG.HACCEL = 0;
 800f1e0:	4a33      	ldr	r2, [pc, #204]	; (800f2b0 <searchD+0x1b8>)
 800f1e2:	8813      	ldrh	r3, [r2, #0]
 800f1e4:	f36f 0341 	bfc	r3, #1, #1
 800f1e8:	8013      	strh	r3, [r2, #0]
 800f1ea:	e002      	b.n	800f1f2 <searchD+0xfa>
					}else{
						one_sectionU();
 800f1ec:	f7f7 f8e0 	bl	80063b0 <one_sectionU>
					if(((route[r_cnt-1] & route[r_cnt]) == 0x88) && (route[r_cnt] != 0xff) && (MF2.FLAG.HACCEL == 0)){
 800f1f0:	e003      	b.n	800f1fa <searchD+0x102>
 800f1f2:	e002      	b.n	800f1fa <searchD+0x102>
					}
				}else{
					one_sectionU();
 800f1f4:	f7f7 f8dc 	bl	80063b0 <one_sectionU>
				}
				break;
 800f1f8:	e016      	b.n	800f228 <searchD+0x130>
 800f1fa:	e015      	b.n	800f228 <searchD+0x130>
			//----a右折スラローム----
			case 0x44:
				slalom_R90();
 800f1fc:	f7f7 fb80 	bl	8006900 <slalom_R90>
				break;
 800f200:	e012      	b.n	800f228 <searchD+0x130>
			//----180回転----
			case 0x22:
				half_sectionD();
 800f202:	f7f6 fd51 	bl	8005ca8 <half_sectionD>
				rotate_180();
 800f206:	f7f7 faa3 	bl	8006750 <rotate_180>
				if(wall_info & 0x88){
 800f20a:	4b2b      	ldr	r3, [pc, #172]	; (800f2b8 <searchD+0x1c0>)
 800f20c:	781b      	ldrb	r3, [r3, #0]
 800f20e:	f003 0388 	and.w	r3, r3, #136	; 0x88
 800f212:	2b00      	cmp	r3, #0
 800f214:	d002      	beq.n	800f21c <searchD+0x124>
					set_position();
 800f216:	f7f6 fb79 	bl	800590c <set_position>
				}else{
					half_sectionA();
				}
				break;
 800f21a:	e005      	b.n	800f228 <searchD+0x130>
					half_sectionA();
 800f21c:	f7f6 fcde 	bl	8005bdc <half_sectionA>
				break;
 800f220:	e002      	b.n	800f228 <searchD+0x130>
			//----a左折スラローム----
			case 0x11:
				slalom_L90();
 800f222:	f7f7 fc99 	bl	8006b58 <slalom_L90>
				break;
 800f226:	bf00      	nop
		}
		adv_pos();
 800f228:	f000 fc6a 	bl	800fb00 <adv_pos>
//		if(!MF.FLAG.SCND)conf_route();

//	}while((mouse.x != goal_x) || (mouse.y != goal_y));
	}while(smap[mouse.y][mouse.x] != 0);
 800f22c:	4b23      	ldr	r3, [pc, #140]	; (800f2bc <searchD+0x1c4>)
 800f22e:	785b      	ldrb	r3, [r3, #1]
 800f230:	b2db      	uxtb	r3, r3
 800f232:	4618      	mov	r0, r3
 800f234:	4b21      	ldr	r3, [pc, #132]	; (800f2bc <searchD+0x1c4>)
 800f236:	781b      	ldrb	r3, [r3, #0]
 800f238:	b2db      	uxtb	r3, r3
 800f23a:	4619      	mov	r1, r3
 800f23c:	4a20      	ldr	r2, [pc, #128]	; (800f2c0 <searchD+0x1c8>)
 800f23e:	0103      	lsls	r3, r0, #4
 800f240:	440b      	add	r3, r1
 800f242:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f246:	2b00      	cmp	r3, #0
 800f248:	f47f af72 	bne.w	800f130 <searchD+0x38>

	for(int j=0; j<goal_mode-1; j++){
 800f24c:	2300      	movs	r3, #0
 800f24e:	607b      	str	r3, [r7, #4]
 800f250:	e006      	b.n	800f260 <searchD+0x168>
		one_sectionU();
 800f252:	f7f7 f8ad 	bl	80063b0 <one_sectionU>
		adv_pos();
 800f256:	f000 fc53 	bl	800fb00 <adv_pos>
	for(int j=0; j<goal_mode-1; j++){
 800f25a:	687b      	ldr	r3, [r7, #4]
 800f25c:	3301      	adds	r3, #1
 800f25e:	607b      	str	r3, [r7, #4]
 800f260:	4b18      	ldr	r3, [pc, #96]	; (800f2c4 <searchD+0x1cc>)
 800f262:	781b      	ldrb	r3, [r3, #0]
 800f264:	3b01      	subs	r3, #1
 800f266:	687a      	ldr	r2, [r7, #4]
 800f268:	429a      	cmp	r2, r3
 800f26a:	dbf2      	blt.n	800f252 <searchD+0x15a>
	}
	half_sectionD();
 800f26c:	f7f6 fd1c 	bl	8005ca8 <half_sectionD>
	set_positionF();
 800f270:	f7f6 fb62 	bl	8005938 <set_positionF>

	HAL_Delay(500);
 800f274:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800f278:	f7f1 fed0 	bl	800101c <HAL_Delay>
	rotate_180();											//180度回転
 800f27c:	f7f7 fa68 	bl	8006750 <rotate_180>
//	driveC2(SETPOS_BACK);         //a尻を当てる程度に後退。回転後に停止する
//	degree_z = target_degree_z;
//	start_mode = 0;
	start_mode = 1;
 800f280:	4b11      	ldr	r3, [pc, #68]	; (800f2c8 <searchD+0x1d0>)
 800f282:	2201      	movs	r2, #1
 800f284:	701a      	strb	r2, [r3, #0]
	goal_mode = 1;
 800f286:	4b0f      	ldr	r3, [pc, #60]	; (800f2c4 <searchD+0x1cc>)
 800f288:	2201      	movs	r2, #1
 800f28a:	701a      	strb	r2, [r3, #0]

	if(!MF.FLAG.SCND){
 800f28c:	4b06      	ldr	r3, [pc, #24]	; (800f2a8 <searchD+0x1b0>)
 800f28e:	881b      	ldrh	r3, [r3, #0]
 800f290:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800f294:	b2db      	uxtb	r3, r3
 800f296:	2b00      	cmp	r3, #0
 800f298:	d101      	bne.n	800f29e <searchD+0x1a6>
		store_map_in_eeprom();
 800f29a:	f002 fb8b 	bl	80119b4 <store_map_in_eeprom>
	}
}
 800f29e:	bf00      	nop
 800f2a0:	3708      	adds	r7, #8
 800f2a2:	46bd      	mov	sp, r7
 800f2a4:	bd80      	pop	{r7, pc}
 800f2a6:	bf00      	nop
 800f2a8:	20000f68 	.word	0x20000f68
 800f2ac:	200015d0 	.word	0x200015d0
 800f2b0:	20000f64 	.word	0x20000f64
 800f2b4:	20000c54 	.word	0x20000c54
 800f2b8:	200002c8 	.word	0x200002c8
 800f2bc:	20000c0c 	.word	0x20000c0c
 800f2c0:	20000d60 	.word	0x20000d60
 800f2c4:	20000bb1 	.word	0x20000bb1
 800f2c8:	200015c8 	.word	0x200015c8

0800f2cc <searchE>:
//searchE
//a未知壁を含むマスを仮goal座標とし、スラローム連続走行で全マスに進む。仮goalを連続的に変化させる。全面探索終了後は半区画減速
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void searchE(){
 800f2cc:	b580      	push	{r7, lr}
 800f2ce:	b082      	sub	sp, #8
 800f2d0:	af00      	add	r7, sp, #0

	int i = 0;
 800f2d2:	2300      	movs	r3, #0
 800f2d4:	607b      	str	r3, [r7, #4]
	int j = 0;
 800f2d6:	2300      	movs	r3, #0
 800f2d8:	603b      	str	r3, [r7, #0]
	do {
		if(i == 0){
 800f2da:	687b      	ldr	r3, [r7, #4]
 800f2dc:	2b00      	cmp	r3, #0
 800f2de:	d111      	bne.n	800f304 <searchE+0x38>
			//====a前に壁が無い想定で問答無用で前進====
			half_sectionA();
 800f2e0:	f7f6 fc7c 	bl	8005bdc <half_sectionA>
			adv_pos();
 800f2e4:	f000 fc0c 	bl	800fb00 <adv_pos>
			write_map();														//地図の初期化
 800f2e8:	f000 fcce 	bl	800fc88 <write_map>

			//====a歩数等初期化====
			m_step = r_cnt = 0;													//歩数と経路カウンタの初期化
 800f2ec:	4b44      	ldr	r3, [pc, #272]	; (800f400 <searchE+0x134>)
 800f2ee:	2200      	movs	r2, #0
 800f2f0:	701a      	strb	r2, [r3, #0]
 800f2f2:	4b44      	ldr	r3, [pc, #272]	; (800f404 <searchE+0x138>)
 800f2f4:	2200      	movs	r2, #0
 800f2f6:	801a      	strh	r2, [r3, #0]
			find_pregoal();														//仮goalまでの歩数マップの初期化
 800f2f8:	f001 fbd8 	bl	8010aac <find_pregoal>
			make_smap2();
 800f2fc:	f001 fdca 	bl	8010e94 <make_smap2>
			make_route();														//最短経路探索(route配列に動作が格納される)
 800f300:	f001 fa74 	bl	80107ec <make_route>
		}

		//====a探索走行====
		do {
			//----a進行----
			switch (route[r_cnt++]) {										//route配列によって進行を決定。経路カウンタを進める
 800f304:	4b3e      	ldr	r3, [pc, #248]	; (800f400 <searchE+0x134>)
 800f306:	781b      	ldrb	r3, [r3, #0]
 800f308:	1c5a      	adds	r2, r3, #1
 800f30a:	b2d1      	uxtb	r1, r2
 800f30c:	4a3c      	ldr	r2, [pc, #240]	; (800f400 <searchE+0x134>)
 800f30e:	7011      	strb	r1, [r2, #0]
 800f310:	461a      	mov	r2, r3
 800f312:	4b3d      	ldr	r3, [pc, #244]	; (800f408 <searchE+0x13c>)
 800f314:	5c9b      	ldrb	r3, [r3, r2]
 800f316:	2b22      	cmp	r3, #34	; 0x22
 800f318:	d00e      	beq.n	800f338 <searchE+0x6c>
 800f31a:	2b22      	cmp	r3, #34	; 0x22
 800f31c:	dc02      	bgt.n	800f324 <searchE+0x58>
 800f31e:	2b11      	cmp	r3, #17
 800f320:	d01a      	beq.n	800f358 <searchE+0x8c>
 800f322:	e01c      	b.n	800f35e <searchE+0x92>
 800f324:	2b44      	cmp	r3, #68	; 0x44
 800f326:	d004      	beq.n	800f332 <searchE+0x66>
 800f328:	2b88      	cmp	r3, #136	; 0x88
 800f32a:	d118      	bne.n	800f35e <searchE+0x92>
				//----a前進----
			case 0x88:
				one_sectionU();
 800f32c:	f7f7 f840 	bl	80063b0 <one_sectionU>
				break;
 800f330:	e015      	b.n	800f35e <searchE+0x92>
				//----a右折----
			case 0x44:
				slalom_R90();
 800f332:	f7f7 fae5 	bl	8006900 <slalom_R90>
				break;
 800f336:	e012      	b.n	800f35e <searchE+0x92>
				//----180回転----
			case 0x22:
				half_sectionD();
 800f338:	f7f6 fcb6 	bl	8005ca8 <half_sectionD>
				rotate_180();
 800f33c:	f7f7 fa08 	bl	8006750 <rotate_180>
				if(wall_info & 0x88){
 800f340:	4b32      	ldr	r3, [pc, #200]	; (800f40c <searchE+0x140>)
 800f342:	781b      	ldrb	r3, [r3, #0]
 800f344:	f003 0388 	and.w	r3, r3, #136	; 0x88
 800f348:	2b00      	cmp	r3, #0
 800f34a:	d002      	beq.n	800f352 <searchE+0x86>
					set_position();
 800f34c:	f7f6 fade 	bl	800590c <set_position>
				}else{
					half_sectionA();
				}
				break;
 800f350:	e005      	b.n	800f35e <searchE+0x92>
					half_sectionA();
 800f352:	f7f6 fc43 	bl	8005bdc <half_sectionA>
				break;
 800f356:	e002      	b.n	800f35e <searchE+0x92>
				//----a左折----
			case 0x11:
				slalom_L90();
 800f358:	f7f7 fbfe 	bl	8006b58 <slalom_L90>
				break;
 800f35c:	bf00      	nop
			}
			adv_pos();														//aマイクロマウス内部位置情報でも前進処理
 800f35e:	f000 fbcf 	bl	800fb00 <adv_pos>
			j++;
 800f362:	683b      	ldr	r3, [r7, #0]
 800f364:	3301      	adds	r3, #1
 800f366:	603b      	str	r3, [r7, #0]
			if (j > 150) break;												//a移動マス数が250以上になった場合全面探索を中止
 800f368:	683b      	ldr	r3, [r7, #0]
 800f36a:	2b96      	cmp	r3, #150	; 0x96
 800f36c:	dc0e      	bgt.n	800f38c <searchE+0xc0>

		} while ((mouse.x != pregoal_x) || (mouse.y != pregoal_y));			//a現在座標と仮goal座標が等しくなるまで実行
 800f36e:	4b28      	ldr	r3, [pc, #160]	; (800f410 <searchE+0x144>)
 800f370:	781b      	ldrb	r3, [r3, #0]
 800f372:	b2da      	uxtb	r2, r3
 800f374:	4b27      	ldr	r3, [pc, #156]	; (800f414 <searchE+0x148>)
 800f376:	781b      	ldrb	r3, [r3, #0]
 800f378:	429a      	cmp	r2, r3
 800f37a:	d1c3      	bne.n	800f304 <searchE+0x38>
 800f37c:	4b24      	ldr	r3, [pc, #144]	; (800f410 <searchE+0x144>)
 800f37e:	785b      	ldrb	r3, [r3, #1]
 800f380:	b2da      	uxtb	r2, r3
 800f382:	4b25      	ldr	r3, [pc, #148]	; (800f418 <searchE+0x14c>)
 800f384:	781b      	ldrb	r3, [r3, #0]
 800f386:	429a      	cmp	r2, r3
 800f388:	d1bc      	bne.n	800f304 <searchE+0x38>
 800f38a:	e000      	b.n	800f38e <searchE+0xc2>
			if (j > 150) break;												//a移動マス数が250以上になった場合全面探索を中止
 800f38c:	bf00      	nop

		get_wall_info();													//a壁情報の初期化, 後壁はなくなる
 800f38e:	f002 fbc3 	bl	8011b18 <get_wall_info>
		write_map();														//a地図の初期化
 800f392:	f000 fc79 	bl	800fc88 <write_map>
		//printf("get pregoal, x = %d, y = %d\n", mouse.x, mouse.y);

		//====a歩数等初期化====
		m_step = r_cnt = 0;													//a歩数と経路カウンタの初期化
 800f396:	4b1a      	ldr	r3, [pc, #104]	; (800f400 <searchE+0x134>)
 800f398:	2200      	movs	r2, #0
 800f39a:	701a      	strb	r2, [r3, #0]
 800f39c:	4b19      	ldr	r3, [pc, #100]	; (800f404 <searchE+0x138>)
 800f39e:	2200      	movs	r2, #0
 800f3a0:	801a      	strh	r2, [r3, #0]

		find_pregoal();														//a仮goalまでの歩数マップの初期化
 800f3a2:	f001 fb83 	bl	8010aac <find_pregoal>
		if(MF2.FLAG.ALLMAP) {
 800f3a6:	4b1d      	ldr	r3, [pc, #116]	; (800f41c <searchE+0x150>)
 800f3a8:	881b      	ldrh	r3, [r3, #0]
 800f3aa:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800f3ae:	b2db      	uxtb	r3, r3
 800f3b0:	2b00      	cmp	r3, #0
 800f3b2:	d002      	beq.n	800f3ba <searchE+0xee>
			//printf("get MF2.FLAG.ALLMAP\n");
			half_sectionD();
 800f3b4:	f7f6 fc78 	bl	8005ca8 <half_sectionD>
			break;
 800f3b8:	e00e      	b.n	800f3d8 <searchE+0x10c>
		}
		make_smap2();
 800f3ba:	f001 fd6b 	bl	8010e94 <make_smap2>
		make_route();														//a最短経路探索(route配列に動作が格納される)
 800f3be:	f001 fa15 	bl	80107ec <make_route>

		if (j > 150) {
 800f3c2:	683b      	ldr	r3, [r7, #0]
 800f3c4:	2b96      	cmp	r3, #150	; 0x96
 800f3c6:	dc06      	bgt.n	800f3d6 <searchE+0x10a>
			break;															//a移動マス数が250以上になった場合全面探索を中止
		}
		i++;
 800f3c8:	687b      	ldr	r3, [r7, #4]
 800f3ca:	3301      	adds	r3, #1
 800f3cc:	607b      	str	r3, [r7, #4]

	} while (i < 150);														//a仮goalへの到着が130回以上になった場合全面探索を中止
 800f3ce:	687b      	ldr	r3, [r7, #4]
 800f3d0:	2b95      	cmp	r3, #149	; 0x95
 800f3d2:	dd82      	ble.n	800f2da <searchE+0xe>
 800f3d4:	e000      	b.n	800f3d8 <searchE+0x10c>
			break;															//a移動マス数が250以上になった場合全面探索を中止
 800f3d6:	bf00      	nop

	HAL_Delay(500);
 800f3d8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800f3dc:	f7f1 fe1e 	bl	800101c <HAL_Delay>
	rotate_180();											//180度回転
 800f3e0:	f7f7 f9b6 	bl	8006750 <rotate_180>

	if(!MF.FLAG.SCND){
 800f3e4:	4b0e      	ldr	r3, [pc, #56]	; (800f420 <searchE+0x154>)
 800f3e6:	881b      	ldrh	r3, [r3, #0]
 800f3e8:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800f3ec:	b2db      	uxtb	r3, r3
 800f3ee:	2b00      	cmp	r3, #0
 800f3f0:	d101      	bne.n	800f3f6 <searchE+0x12a>
		store_map_in_eeprom();
 800f3f2:	f002 fadf 	bl	80119b4 <store_map_in_eeprom>
	}
}
 800f3f6:	bf00      	nop
 800f3f8:	3708      	adds	r7, #8
 800f3fa:	46bd      	mov	sp, r7
 800f3fc:	bd80      	pop	{r7, pc}
 800f3fe:	bf00      	nop
 800f400:	200015d0 	.word	0x200015d0
 800f404:	2000034e 	.word	0x2000034e
 800f408:	20000c54 	.word	0x20000c54
 800f40c:	200002c8 	.word	0x200002c8
 800f410:	20000c0c 	.word	0x20000c0c
 800f414:	20000d5c 	.word	0x20000d5c
 800f418:	200012a1 	.word	0x200012a1
 800f41c:	20000f64 	.word	0x20000f64
 800f420:	20000f68 	.word	0x20000f68

0800f424 <searchF3>:
//searchF3
//aスラローム(+既知区間加速探索走行)+pass圧縮+機体方向&位置未更新+半区画ベースでgoal座標に進む
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void searchF3(){
 800f424:	b580      	push	{r7, lr}
 800f426:	b084      	sub	sp, #16
 800f428:	af00      	add	r7, sp, #0

	if(MF.FLAG.SCND){
 800f42a:	4b62      	ldr	r3, [pc, #392]	; (800f5b4 <searchF3+0x190>)
 800f42c:	881b      	ldrh	r3, [r3, #0]
 800f42e:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800f432:	b2db      	uxtb	r3, r3
 800f434:	2b00      	cmp	r3, #0
 800f436:	d001      	beq.n	800f43c <searchF3+0x18>
		load_map_from_eeprom();
 800f438:	f002 faf6 	bl	8011a28 <load_map_from_eeprom>
	}
	pass_mode = 3;
 800f43c:	4b5e      	ldr	r3, [pc, #376]	; (800f5b8 <searchF3+0x194>)
 800f43e:	2203      	movs	r2, #3
 800f440:	701a      	strb	r2, [r3, #0]

	//====a1区画前進====
	adv_pos();
 800f442:	f000 fb5d 	bl	800fb00 <adv_pos>

	//====a歩数マップ・経路作成====
	make_smap();											//a歩数マップ作成
 800f446:	f000 fe13 	bl	8010070 <make_smap>
	make_route();											//a最短経路探索（route配列に動作が格納される）
 800f44a:	f001 f9cf 	bl	80107ec <make_route>

	//====pass圧縮====
	p_cnt = 0;												//a経路カウンタの初期化
 800f44e:	4b5b      	ldr	r3, [pc, #364]	; (800f5bc <searchF3+0x198>)
 800f450:	2200      	movs	r2, #0
 800f452:	701a      	strb	r2, [r3, #0]
	pass_route2();
 800f454:	f001 fe42 	bl	80110dc <pass_route2>

	//====a前に壁が無い想定で問答無用で前進====
	start_sectionA();
 800f458:	f7f6 fa8c 	bl	8005974 <start_sectionA>

	MF2.FLAG.HACCEL = 0;
 800f45c:	4a58      	ldr	r2, [pc, #352]	; (800f5c0 <searchF3+0x19c>)
 800f45e:	8813      	ldrh	r3, [r2, #0]
 800f460:	f36f 0341 	bfc	r3, #1, #1
 800f464:	8013      	strh	r3, [r2, #0]

	//====a探索走行====
	do{
		//----a進行----
		switch(pass[p_cnt++]){								//route配列によって進行を決定。経路カウンタを進める
 800f466:	4b55      	ldr	r3, [pc, #340]	; (800f5bc <searchF3+0x198>)
 800f468:	781b      	ldrb	r3, [r3, #0]
 800f46a:	1c5a      	adds	r2, r3, #1
 800f46c:	b2d1      	uxtb	r1, r2
 800f46e:	4a53      	ldr	r2, [pc, #332]	; (800f5bc <searchF3+0x198>)
 800f470:	7011      	strb	r1, [r2, #0]
 800f472:	461a      	mov	r2, r3
 800f474:	4b53      	ldr	r3, [pc, #332]	; (800f5c4 <searchF3+0x1a0>)
 800f476:	569b      	ldrsb	r3, [r3, r2]
 800f478:	f113 0f04 	cmn.w	r3, #4
 800f47c:	d01e      	beq.n	800f4bc <searchF3+0x98>
 800f47e:	f113 0f04 	cmn.w	r3, #4
 800f482:	dc09      	bgt.n	800f498 <searchF3+0x74>
 800f484:	f113 0f06 	cmn.w	r3, #6
 800f488:	d01e      	beq.n	800f4c8 <searchF3+0xa4>
 800f48a:	f113 0f06 	cmn.w	r3, #6
 800f48e:	dc18      	bgt.n	800f4c2 <searchF3+0x9e>
 800f490:	f113 0f72 	cmn.w	r3, #114	; 0x72
 800f494:	d01b      	beq.n	800f4ce <searchF3+0xaa>
 800f496:	e01f      	b.n	800f4d8 <searchF3+0xb4>
 800f498:	f113 0f02 	cmn.w	r3, #2
 800f49c:	d008      	beq.n	800f4b0 <searchF3+0x8c>
 800f49e:	f113 0f02 	cmn.w	r3, #2
 800f4a2:	db08      	blt.n	800f4b6 <searchF3+0x92>
 800f4a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f4a8:	d116      	bne.n	800f4d8 <searchF3+0xb4>
			//----a右スラローム----
			case -1:
				slalom_R90();
 800f4aa:	f7f7 fa29 	bl	8006900 <slalom_R90>
				break;
 800f4ae:	e04c      	b.n	800f54a <searchF3+0x126>

			//----a左スラローム----
			case -2:
				slalom_L90();
 800f4b0:	f7f7 fb52 	bl	8006b58 <slalom_L90>
				break;
 800f4b4:	e049      	b.n	800f54a <searchF3+0x126>

			//----a大回り右90----
			case -3:
				Lslalom_R90();
 800f4b6:	f7f7 fc6f 	bl	8006d98 <Lslalom_R90>
				break;
 800f4ba:	e046      	b.n	800f54a <searchF3+0x126>

			//----a大回り左90----
			case -4:
				Lslalom_L90();
 800f4bc:	f7f7 fda4 	bl	8007008 <Lslalom_L90>
				break;
 800f4c0:	e043      	b.n	800f54a <searchF3+0x126>

			//----a大回り右180----
			case -5:
				Lslalom_R180();
 800f4c2:	f7f7 fecd 	bl	8007260 <Lslalom_R180>
				break;
 800f4c6:	e040      	b.n	800f54a <searchF3+0x126>

			//----a大回り左180----
			case -6:
				Lslalom_L180();
 800f4c8:	f7f8 f81c 	bl	8007504 <Lslalom_L180>
				break;
 800f4cc:	e03d      	b.n	800f54a <searchF3+0x126>

			//----pass配列最後(なお本来呼び出される前にゴールする)----
			case -114:
				rotate_180();
 800f4ce:	f7f7 f93f 	bl	8006750 <rotate_180>
				rotate_180();
 800f4d2:	f7f7 f93d 	bl	8006750 <rotate_180>
				while(1);
 800f4d6:	e7fe      	b.n	800f4d6 <searchF3+0xb2>
				break;

			//----a前進----
			default:
				if(pass[p_cnt-1] < 4){
 800f4d8:	4b38      	ldr	r3, [pc, #224]	; (800f5bc <searchF3+0x198>)
 800f4da:	781b      	ldrb	r3, [r3, #0]
 800f4dc:	3b01      	subs	r3, #1
 800f4de:	4a39      	ldr	r2, [pc, #228]	; (800f5c4 <searchF3+0x1a0>)
 800f4e0:	56d3      	ldrsb	r3, [r2, r3]
 800f4e2:	2b03      	cmp	r3, #3
 800f4e4:	dc11      	bgt.n	800f50a <searchF3+0xe6>
					for(int k = 0; k < pass[p_cnt-1]; k++){
 800f4e6:	2300      	movs	r3, #0
 800f4e8:	60fb      	str	r3, [r7, #12]
 800f4ea:	e004      	b.n	800f4f6 <searchF3+0xd2>
						half_sectionU();
 800f4ec:	f7f6 fcf8 	bl	8005ee0 <half_sectionU>
					for(int k = 0; k < pass[p_cnt-1]; k++){
 800f4f0:	68fb      	ldr	r3, [r7, #12]
 800f4f2:	3301      	adds	r3, #1
 800f4f4:	60fb      	str	r3, [r7, #12]
 800f4f6:	4b31      	ldr	r3, [pc, #196]	; (800f5bc <searchF3+0x198>)
 800f4f8:	781b      	ldrb	r3, [r3, #0]
 800f4fa:	3b01      	subs	r3, #1
 800f4fc:	4a31      	ldr	r2, [pc, #196]	; (800f5c4 <searchF3+0x1a0>)
 800f4fe:	56d3      	ldrsb	r3, [r2, r3]
 800f500:	461a      	mov	r2, r3
 800f502:	68fb      	ldr	r3, [r7, #12]
 800f504:	4293      	cmp	r3, r2
 800f506:	dbf1      	blt.n	800f4ec <searchF3+0xc8>
						half_sectionU();
					}
					one_sectionD();
					MF2.FLAG.HACCEL = 0;
				}
				break;
 800f508:	e01e      	b.n	800f548 <searchF3+0x124>
					one_sectionA();
 800f50a:	f7f6 fd09 	bl	8005f20 <one_sectionA>
					MF2.FLAG.HACCEL = 1;
 800f50e:	4a2c      	ldr	r2, [pc, #176]	; (800f5c0 <searchF3+0x19c>)
 800f510:	8813      	ldrh	r3, [r2, #0]
 800f512:	f043 0302 	orr.w	r3, r3, #2
 800f516:	8013      	strh	r3, [r2, #0]
					for(k = 0; k < pass[p_cnt-1]-4; k++){
 800f518:	2300      	movs	r3, #0
 800f51a:	60bb      	str	r3, [r7, #8]
 800f51c:	e004      	b.n	800f528 <searchF3+0x104>
						half_sectionU();
 800f51e:	f7f6 fcdf 	bl	8005ee0 <half_sectionU>
					for(k = 0; k < pass[p_cnt-1]-4; k++){
 800f522:	68bb      	ldr	r3, [r7, #8]
 800f524:	3301      	adds	r3, #1
 800f526:	60bb      	str	r3, [r7, #8]
 800f528:	4b24      	ldr	r3, [pc, #144]	; (800f5bc <searchF3+0x198>)
 800f52a:	781b      	ldrb	r3, [r3, #0]
 800f52c:	3b01      	subs	r3, #1
 800f52e:	4a25      	ldr	r2, [pc, #148]	; (800f5c4 <searchF3+0x1a0>)
 800f530:	56d3      	ldrsb	r3, [r2, r3]
 800f532:	3b04      	subs	r3, #4
 800f534:	68ba      	ldr	r2, [r7, #8]
 800f536:	429a      	cmp	r2, r3
 800f538:	dbf1      	blt.n	800f51e <searchF3+0xfa>
					one_sectionD();
 800f53a:	f7f6 fd7d 	bl	8006038 <one_sectionD>
					MF2.FLAG.HACCEL = 0;
 800f53e:	4a20      	ldr	r2, [pc, #128]	; (800f5c0 <searchF3+0x19c>)
 800f540:	8813      	ldrh	r3, [r2, #0]
 800f542:	f36f 0341 	bfc	r3, #1, #1
 800f546:	8013      	strh	r3, [r2, #0]
				break;
 800f548:	bf00      	nop
		}
	}while(pass[p_cnt] != -114);
 800f54a:	4b1c      	ldr	r3, [pc, #112]	; (800f5bc <searchF3+0x198>)
 800f54c:	781b      	ldrb	r3, [r3, #0]
 800f54e:	461a      	mov	r2, r3
 800f550:	4b1c      	ldr	r3, [pc, #112]	; (800f5c4 <searchF3+0x1a0>)
 800f552:	569b      	ldrsb	r3, [r3, r2]
 800f554:	f113 0f72 	cmn.w	r3, #114	; 0x72
 800f558:	d185      	bne.n	800f466 <searchF3+0x42>

	mouse.x = goal_x;
 800f55a:	4b1b      	ldr	r3, [pc, #108]	; (800f5c8 <searchF3+0x1a4>)
 800f55c:	781a      	ldrb	r2, [r3, #0]
 800f55e:	4b1b      	ldr	r3, [pc, #108]	; (800f5cc <searchF3+0x1a8>)
 800f560:	701a      	strb	r2, [r3, #0]
	mouse.y = goal_y;
 800f562:	4b1b      	ldr	r3, [pc, #108]	; (800f5d0 <searchF3+0x1ac>)
 800f564:	781a      	ldrb	r2, [r3, #0]
 800f566:	4b19      	ldr	r3, [pc, #100]	; (800f5cc <searchF3+0x1a8>)
 800f568:	705a      	strb	r2, [r3, #1]

	for(int j=0; j<goal_mode-1; j++){
 800f56a:	2300      	movs	r3, #0
 800f56c:	607b      	str	r3, [r7, #4]
 800f56e:	e006      	b.n	800f57e <searchF3+0x15a>
		one_sectionU();
 800f570:	f7f6 ff1e 	bl	80063b0 <one_sectionU>
		adv_pos();
 800f574:	f000 fac4 	bl	800fb00 <adv_pos>
	for(int j=0; j<goal_mode-1; j++){
 800f578:	687b      	ldr	r3, [r7, #4]
 800f57a:	3301      	adds	r3, #1
 800f57c:	607b      	str	r3, [r7, #4]
 800f57e:	4b15      	ldr	r3, [pc, #84]	; (800f5d4 <searchF3+0x1b0>)
 800f580:	781b      	ldrb	r3, [r3, #0]
 800f582:	3b01      	subs	r3, #1
 800f584:	687a      	ldr	r2, [r7, #4]
 800f586:	429a      	cmp	r2, r3
 800f588:	dbf2      	blt.n	800f570 <searchF3+0x14c>
	}
	half_sectionD();
 800f58a:	f7f6 fb8d 	bl	8005ca8 <half_sectionD>
	set_positionF();
 800f58e:	f7f6 f9d3 	bl	8005938 <set_positionF>

	HAL_Delay(500);
 800f592:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800f596:	f7f1 fd41 	bl	800101c <HAL_Delay>
	rotate_180();											//180度回転
 800f59a:	f7f7 f8d9 	bl	8006750 <rotate_180>
//	driveC2(SETPOS_BACK);         //a尻を当てる程度に後退。回転後に停止する
//	degree_z = target_degree_z;
//	start_mode = 0;
	start_mode = 1;
 800f59e:	4b0e      	ldr	r3, [pc, #56]	; (800f5d8 <searchF3+0x1b4>)
 800f5a0:	2201      	movs	r2, #1
 800f5a2:	701a      	strb	r2, [r3, #0]
	goal_mode = 1;
 800f5a4:	4b0b      	ldr	r3, [pc, #44]	; (800f5d4 <searchF3+0x1b0>)
 800f5a6:	2201      	movs	r2, #1
 800f5a8:	701a      	strb	r2, [r3, #0]

}
 800f5aa:	bf00      	nop
 800f5ac:	3710      	adds	r7, #16
 800f5ae:	46bd      	mov	sp, r7
 800f5b0:	bd80      	pop	{r7, pc}
 800f5b2:	bf00      	nop
 800f5b4:	20000f68 	.word	0x20000f68
 800f5b8:	20000457 	.word	0x20000457
 800f5bc:	200002b0 	.word	0x200002b0
 800f5c0:	20000f64 	.word	0x20000f64
 800f5c4:	20000350 	.word	0x20000350
 800f5c8:	20000bb0 	.word	0x20000bb0
 800f5cc:	20000c0c 	.word	0x20000c0c
 800f5d0:	20000b4c 	.word	0x20000b4c
 800f5d4:	20000bb1 	.word	0x20000bb1
 800f5d8:	200015c8 	.word	0x200015c8

0800f5dc <searchF4>:
//searchF4
//aスラローム(+既知区間加速探索走行)+pass圧縮+機体方向&位置未更新+半区画ベース+斜め走行でgoal座標に進む
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void searchF4(){
 800f5dc:	b580      	push	{r7, lr}
 800f5de:	b084      	sub	sp, #16
 800f5e0:	af00      	add	r7, sp, #0

	if(MF.FLAG.SCND){
 800f5e2:	4bca      	ldr	r3, [pc, #808]	; (800f90c <searchF4+0x330>)
 800f5e4:	881b      	ldrh	r3, [r3, #0]
 800f5e6:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800f5ea:	b2db      	uxtb	r3, r3
 800f5ec:	2b00      	cmp	r3, #0
 800f5ee:	d001      	beq.n	800f5f4 <searchF4+0x18>
		load_map_from_eeprom();
 800f5f0:	f002 fa1a 	bl	8011a28 <load_map_from_eeprom>
	}
	pass_mode = 4;
 800f5f4:	4bc6      	ldr	r3, [pc, #792]	; (800f910 <searchF4+0x334>)
 800f5f6:	2204      	movs	r2, #4
 800f5f8:	701a      	strb	r2, [r3, #0]

	//====a1区画前進====
	adv_pos();
 800f5fa:	f000 fa81 	bl	800fb00 <adv_pos>

	//====a歩数マップ・経路作成====
	full_led_write(RED);
 800f5fe:	2001      	movs	r0, #1
 800f600:	f002 fafe 	bl	8011c00 <full_led_write>
	make_smap();											//a歩数マップ作成
 800f604:	f000 fd34 	bl	8010070 <make_smap>
	make_route();											//a最短経路探索（route配列に動作が格納される）
 800f608:	f001 f8f0 	bl	80107ec <make_route>

	//====pass圧縮====
	p_cnt = 0;												//a経路カウンタの初期化
 800f60c:	4bc1      	ldr	r3, [pc, #772]	; (800f914 <searchF4+0x338>)
 800f60e:	2200      	movs	r2, #0
 800f610:	701a      	strb	r2, [r3, #0]
	pass_route3();
 800f612:	f001 fe77 	bl	8011304 <pass_route3>

	if(start_mode == 0 || start_mode == 1){					//a大回りではない場合、先頭の半区画直進をスキップ
 800f616:	4bc0      	ldr	r3, [pc, #768]	; (800f918 <searchF4+0x33c>)
 800f618:	781b      	ldrb	r3, [r3, #0]
 800f61a:	b2db      	uxtb	r3, r3
 800f61c:	2b00      	cmp	r3, #0
 800f61e:	d004      	beq.n	800f62a <searchF4+0x4e>
 800f620:	4bbd      	ldr	r3, [pc, #756]	; (800f918 <searchF4+0x33c>)
 800f622:	781b      	ldrb	r3, [r3, #0]
 800f624:	b2db      	uxtb	r3, r3
 800f626:	2b01      	cmp	r3, #1
 800f628:	d109      	bne.n	800f63e <searchF4+0x62>
		pass[p_cnt]--;
 800f62a:	4bba      	ldr	r3, [pc, #744]	; (800f914 <searchF4+0x338>)
 800f62c:	781b      	ldrb	r3, [r3, #0]
 800f62e:	4abb      	ldr	r2, [pc, #748]	; (800f91c <searchF4+0x340>)
 800f630:	56d2      	ldrsb	r2, [r2, r3]
 800f632:	b2d2      	uxtb	r2, r2
 800f634:	3a01      	subs	r2, #1
 800f636:	b2d2      	uxtb	r2, r2
 800f638:	b251      	sxtb	r1, r2
 800f63a:	4ab8      	ldr	r2, [pc, #736]	; (800f91c <searchF4+0x340>)
 800f63c:	54d1      	strb	r1, [r2, r3]
	}
	mouse.dir = mouse.dir * 2;
 800f63e:	4bb8      	ldr	r3, [pc, #736]	; (800f920 <searchF4+0x344>)
 800f640:	789b      	ldrb	r3, [r3, #2]
 800f642:	b2db      	uxtb	r3, r3
 800f644:	005b      	lsls	r3, r3, #1
 800f646:	b2da      	uxtb	r2, r3
 800f648:	4bb5      	ldr	r3, [pc, #724]	; (800f920 <searchF4+0x344>)
 800f64a:	709a      	strb	r2, [r3, #2]

	//====a前に壁が無い想定で問答無用で前進====
	start_sectionA();
 800f64c:	f7f6 f992 	bl	8005974 <start_sectionA>

	MF2.FLAG.HACCEL = 0;
 800f650:	4ab4      	ldr	r2, [pc, #720]	; (800f924 <searchF4+0x348>)
 800f652:	8813      	ldrh	r3, [r2, #0]
 800f654:	f36f 0341 	bfc	r3, #1, #1
 800f658:	8013      	strh	r3, [r2, #0]
	MF.FLAG.XDIR = 1;
 800f65a:	4aac      	ldr	r2, [pc, #688]	; (800f90c <searchF4+0x330>)
 800f65c:	8813      	ldrh	r3, [r2, #0]
 800f65e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800f662:	8013      	strh	r3, [r2, #0]
	//====a探索走行====
	do{
		//----a進行----
		switch(pass[p_cnt++]){								//route配列によって進行を決定。経路カウンタを進める
 800f664:	4bab      	ldr	r3, [pc, #684]	; (800f914 <searchF4+0x338>)
 800f666:	781b      	ldrb	r3, [r3, #0]
 800f668:	1c5a      	adds	r2, r3, #1
 800f66a:	b2d1      	uxtb	r1, r2
 800f66c:	4aa9      	ldr	r2, [pc, #676]	; (800f914 <searchF4+0x338>)
 800f66e:	7011      	strb	r1, [r2, #0]
 800f670:	461a      	mov	r2, r3
 800f672:	4baa      	ldr	r3, [pc, #680]	; (800f91c <searchF4+0x340>)
 800f674:	569b      	ldrsb	r3, [r3, r2]
 800f676:	3372      	adds	r3, #114	; 0x72
 800f678:	2b71      	cmp	r3, #113	; 0x71
 800f67a:	f200 811c 	bhi.w	800f8b6 <searchF4+0x2da>
 800f67e:	a201      	add	r2, pc, #4	; (adr r2, 800f684 <searchF4+0xa8>)
 800f680:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f684:	0800f8ad 	.word	0x0800f8ad
 800f688:	0800f8b7 	.word	0x0800f8b7
 800f68c:	0800f8b7 	.word	0x0800f8b7
 800f690:	0800f8b7 	.word	0x0800f8b7
 800f694:	0800f8b7 	.word	0x0800f8b7
 800f698:	0800f8b7 	.word	0x0800f8b7
 800f69c:	0800f8b7 	.word	0x0800f8b7
 800f6a0:	0800f8b7 	.word	0x0800f8b7
 800f6a4:	0800f8b7 	.word	0x0800f8b7
 800f6a8:	0800f8b7 	.word	0x0800f8b7
 800f6ac:	0800f8b7 	.word	0x0800f8b7
 800f6b0:	0800f8b7 	.word	0x0800f8b7
 800f6b4:	0800f8b7 	.word	0x0800f8b7
 800f6b8:	0800f8b7 	.word	0x0800f8b7
 800f6bc:	0800f8b7 	.word	0x0800f8b7
 800f6c0:	0800f8b7 	.word	0x0800f8b7
 800f6c4:	0800f8b7 	.word	0x0800f8b7
 800f6c8:	0800f8b7 	.word	0x0800f8b7
 800f6cc:	0800f8b7 	.word	0x0800f8b7
 800f6d0:	0800f8b7 	.word	0x0800f8b7
 800f6d4:	0800f8b7 	.word	0x0800f8b7
 800f6d8:	0800f8b7 	.word	0x0800f8b7
 800f6dc:	0800f8b7 	.word	0x0800f8b7
 800f6e0:	0800f8b7 	.word	0x0800f8b7
 800f6e4:	0800f8b7 	.word	0x0800f8b7
 800f6e8:	0800f8b7 	.word	0x0800f8b7
 800f6ec:	0800f8b7 	.word	0x0800f8b7
 800f6f0:	0800f8b7 	.word	0x0800f8b7
 800f6f4:	0800f8b7 	.word	0x0800f8b7
 800f6f8:	0800f8b7 	.word	0x0800f8b7
 800f6fc:	0800f8b7 	.word	0x0800f8b7
 800f700:	0800f8b7 	.word	0x0800f8b7
 800f704:	0800f8b7 	.word	0x0800f8b7
 800f708:	0800f8b7 	.word	0x0800f8b7
 800f70c:	0800f8b7 	.word	0x0800f8b7
 800f710:	0800f8b7 	.word	0x0800f8b7
 800f714:	0800f8b7 	.word	0x0800f8b7
 800f718:	0800f8b7 	.word	0x0800f8b7
 800f71c:	0800f8b7 	.word	0x0800f8b7
 800f720:	0800f8b7 	.word	0x0800f8b7
 800f724:	0800f8b7 	.word	0x0800f8b7
 800f728:	0800f8b7 	.word	0x0800f8b7
 800f72c:	0800f8b7 	.word	0x0800f8b7
 800f730:	0800f8b7 	.word	0x0800f8b7
 800f734:	0800f8b7 	.word	0x0800f8b7
 800f738:	0800f8b7 	.word	0x0800f8b7
 800f73c:	0800f8b7 	.word	0x0800f8b7
 800f740:	0800f8b7 	.word	0x0800f8b7
 800f744:	0800f8b7 	.word	0x0800f8b7
 800f748:	0800f8b7 	.word	0x0800f8b7
 800f74c:	0800f8b7 	.word	0x0800f8b7
 800f750:	0800f8b7 	.word	0x0800f8b7
 800f754:	0800f8b7 	.word	0x0800f8b7
 800f758:	0800f8b7 	.word	0x0800f8b7
 800f75c:	0800f8b7 	.word	0x0800f8b7
 800f760:	0800f8b7 	.word	0x0800f8b7
 800f764:	0800f8b7 	.word	0x0800f8b7
 800f768:	0800f8b7 	.word	0x0800f8b7
 800f76c:	0800f8b7 	.word	0x0800f8b7
 800f770:	0800f8b7 	.word	0x0800f8b7
 800f774:	0800f8b7 	.word	0x0800f8b7
 800f778:	0800f8b7 	.word	0x0800f8b7
 800f77c:	0800f8b7 	.word	0x0800f8b7
 800f780:	0800f8b7 	.word	0x0800f8b7
 800f784:	0800f8b7 	.word	0x0800f8b7
 800f788:	0800f8b7 	.word	0x0800f8b7
 800f78c:	0800f8b7 	.word	0x0800f8b7
 800f790:	0800f8b7 	.word	0x0800f8b7
 800f794:	0800f8b7 	.word	0x0800f8b7
 800f798:	0800f8b7 	.word	0x0800f8b7
 800f79c:	0800f8b7 	.word	0x0800f8b7
 800f7a0:	0800f8b7 	.word	0x0800f8b7
 800f7a4:	0800f8b7 	.word	0x0800f8b7
 800f7a8:	0800f8b7 	.word	0x0800f8b7
 800f7ac:	0800f8b7 	.word	0x0800f8b7
 800f7b0:	0800f8b7 	.word	0x0800f8b7
 800f7b4:	0800f8b7 	.word	0x0800f8b7
 800f7b8:	0800f8b7 	.word	0x0800f8b7
 800f7bc:	0800f8b7 	.word	0x0800f8b7
 800f7c0:	0800f8b7 	.word	0x0800f8b7
 800f7c4:	0800f8b7 	.word	0x0800f8b7
 800f7c8:	0800f8b7 	.word	0x0800f8b7
 800f7cc:	0800f8b7 	.word	0x0800f8b7
 800f7d0:	0800f8b7 	.word	0x0800f8b7
 800f7d4:	0800f8b7 	.word	0x0800f8b7
 800f7d8:	0800f8b7 	.word	0x0800f8b7
 800f7dc:	0800f8b7 	.word	0x0800f8b7
 800f7e0:	0800f8b7 	.word	0x0800f8b7
 800f7e4:	0800f8b7 	.word	0x0800f8b7
 800f7e8:	0800f8b7 	.word	0x0800f8b7
 800f7ec:	0800f8b7 	.word	0x0800f8b7
 800f7f0:	0800f8b7 	.word	0x0800f8b7
 800f7f4:	0800f8b7 	.word	0x0800f8b7
 800f7f8:	0800f8b7 	.word	0x0800f8b7
 800f7fc:	0800f8b7 	.word	0x0800f8b7
 800f800:	0800f8b7 	.word	0x0800f8b7
 800f804:	0800f8b7 	.word	0x0800f8b7
 800f808:	0800f8b7 	.word	0x0800f8b7
 800f80c:	0800f8a7 	.word	0x0800f8a7
 800f810:	0800f8a1 	.word	0x0800f8a1
 800f814:	0800f89b 	.word	0x0800f89b
 800f818:	0800f895 	.word	0x0800f895
 800f81c:	0800f88f 	.word	0x0800f88f
 800f820:	0800f889 	.word	0x0800f889
 800f824:	0800f883 	.word	0x0800f883
 800f828:	0800f87d 	.word	0x0800f87d
 800f82c:	0800f877 	.word	0x0800f877
 800f830:	0800f871 	.word	0x0800f871
 800f834:	0800f86b 	.word	0x0800f86b
 800f838:	0800f865 	.word	0x0800f865
 800f83c:	0800f85f 	.word	0x0800f85f
 800f840:	0800f859 	.word	0x0800f859
 800f844:	0800f853 	.word	0x0800f853
 800f848:	0800f84d 	.word	0x0800f84d
			//----a右スラローム----
			case -1:
				slalom_R90();
 800f84c:	f7f7 f858 	bl	8006900 <slalom_R90>
				break;
 800f850:	e0d1      	b.n	800f9f6 <searchF4+0x41a>

			//----a左スラローム----
			case -2:
				slalom_L90();
 800f852:	f7f7 f981 	bl	8006b58 <slalom_L90>
				break;
 800f856:	e0ce      	b.n	800f9f6 <searchF4+0x41a>

			//----a大回り右90----
			case -3:
				Lslalom_R90();
 800f858:	f7f7 fa9e 	bl	8006d98 <Lslalom_R90>
				break;
 800f85c:	e0cb      	b.n	800f9f6 <searchF4+0x41a>

			//----a大回り左90----
			case -4:
				Lslalom_L90();
 800f85e:	f7f7 fbd3 	bl	8007008 <Lslalom_L90>
				break;
 800f862:	e0c8      	b.n	800f9f6 <searchF4+0x41a>

			//----a大回り右180----
			case -5:
				Lslalom_R180();
 800f864:	f7f7 fcfc 	bl	8007260 <Lslalom_R180>
				break;
 800f868:	e0c5      	b.n	800f9f6 <searchF4+0x41a>

			//----a大回り左180----
			case -6:
				Lslalom_L180();
 800f86a:	f7f7 fe4b 	bl	8007504 <Lslalom_L180>
				break;
 800f86e:	e0c2      	b.n	800f9f6 <searchF4+0x41a>

			//----a斜め右V45----
			case -7:
				v_R45();
 800f870:	f7f7 ff8c 	bl	800778c <v_R45>
				break;
 800f874:	e0bf      	b.n	800f9f6 <searchF4+0x41a>

			//----a斜め左V45----
			case -8:
				v_L45();
 800f876:	f7f8 f96f 	bl	8007b58 <v_L45>
				break;
 800f87a:	e0bc      	b.n	800f9f6 <searchF4+0x41a>

			//----a斜め右V90----
			case -9:
				v_R90();
 800f87c:	f7f8 fdf0 	bl	8008460 <v_R90>
				break;
 800f880:	e0b9      	b.n	800f9f6 <searchF4+0x41a>

			//----a斜め左V90----
			case -10:
				v_L90();
 800f882:	f7f8 febd 	bl	8008600 <v_L90>
				break;
 800f886:	e0b6      	b.n	800f9f6 <searchF4+0x41a>

			//----a斜め右V135----
			case -11:
				v_R135();
 800f888:	f7f8 ff82 	bl	8008790 <v_R135>
				break;
 800f88c:	e0b3      	b.n	800f9f6 <searchF4+0x41a>

			//----a斜め左V135----
			case -12:
				v_L135();
 800f88e:	f7f9 f969 	bl	8008b64 <v_L135>
				break;
 800f892:	e0b0      	b.n	800f9f6 <searchF4+0x41a>

			//----a斜め右V45Goal----
			case -13:
				v_R45D();
 800f894:	f7f8 fb3c 	bl	8007f10 <v_R45D>
				break;
 800f898:	e0ad      	b.n	800f9f6 <searchF4+0x41a>

			//----a斜め左V45Goal----
			case -14:
				v_L45D();
 800f89a:	f7f8 fc93 	bl	80081c4 <v_L45D>
				break;
 800f89e:	e0aa      	b.n	800f9f6 <searchF4+0x41a>

			//----a斜め右V135Goal----
			case -15:
				v_R135D();
 800f8a0:	f7f9 fb3c 	bl	8008f1c <v_R135D>
				break;
 800f8a4:	e0a7      	b.n	800f9f6 <searchF4+0x41a>

			//----a斜め左V135Goal----
			case -16:
				v_L135D();
 800f8a6:	f7f9 fc95 	bl	80091d4 <v_L135D>
				break;
 800f8aa:	e0a4      	b.n	800f9f6 <searchF4+0x41a>

			//----pass配列最後(なお本来呼び出される前にゴールする)----
			case -114:
				rotate_180();
 800f8ac:	f7f6 ff50 	bl	8006750 <rotate_180>
				rotate_180();
 800f8b0:	f7f6 ff4e 	bl	8006750 <rotate_180>
				while(1);
 800f8b4:	e7fe      	b.n	800f8b4 <searchF4+0x2d8>
				break;

			//----a前進----
			default:
				if(pass[p_cnt-1] < 4){
 800f8b6:	4b17      	ldr	r3, [pc, #92]	; (800f914 <searchF4+0x338>)
 800f8b8:	781b      	ldrb	r3, [r3, #0]
 800f8ba:	3b01      	subs	r3, #1
 800f8bc:	4a17      	ldr	r2, [pc, #92]	; (800f91c <searchF4+0x340>)
 800f8be:	56d3      	ldrsb	r3, [r2, r3]
 800f8c0:	2b03      	cmp	r3, #3
 800f8c2:	dc11      	bgt.n	800f8e8 <searchF4+0x30c>
					for(int k = 0; k < pass[p_cnt-1]; k++){
 800f8c4:	2300      	movs	r3, #0
 800f8c6:	60fb      	str	r3, [r7, #12]
 800f8c8:	e004      	b.n	800f8d4 <searchF4+0x2f8>
						half_sectionU();
 800f8ca:	f7f6 fb09 	bl	8005ee0 <half_sectionU>
					for(int k = 0; k < pass[p_cnt-1]; k++){
 800f8ce:	68fb      	ldr	r3, [r7, #12]
 800f8d0:	3301      	adds	r3, #1
 800f8d2:	60fb      	str	r3, [r7, #12]
 800f8d4:	4b0f      	ldr	r3, [pc, #60]	; (800f914 <searchF4+0x338>)
 800f8d6:	781b      	ldrb	r3, [r3, #0]
 800f8d8:	3b01      	subs	r3, #1
 800f8da:	4a10      	ldr	r2, [pc, #64]	; (800f91c <searchF4+0x340>)
 800f8dc:	56d3      	ldrsb	r3, [r2, r3]
 800f8de:	461a      	mov	r2, r3
 800f8e0:	68fb      	ldr	r3, [r7, #12]
 800f8e2:	4293      	cmp	r3, r2
 800f8e4:	dbf1      	blt.n	800f8ca <searchF4+0x2ee>
						p_cnt++;
					}else{
						half_sectionV();
					}
				}
				break;
 800f8e6:	e085      	b.n	800f9f4 <searchF4+0x418>
				}else if(pass[p_cnt-1] < 64){
 800f8e8:	4b0a      	ldr	r3, [pc, #40]	; (800f914 <searchF4+0x338>)
 800f8ea:	781b      	ldrb	r3, [r3, #0]
 800f8ec:	3b01      	subs	r3, #1
 800f8ee:	4a0b      	ldr	r2, [pc, #44]	; (800f91c <searchF4+0x340>)
 800f8f0:	56d3      	ldrsb	r3, [r2, r3]
 800f8f2:	2b3f      	cmp	r3, #63	; 0x3f
 800f8f4:	dc2e      	bgt.n	800f954 <searchF4+0x378>
					one_sectionA();
 800f8f6:	f7f6 fb13 	bl	8005f20 <one_sectionA>
					MF2.FLAG.HACCEL = 1;
 800f8fa:	4a0a      	ldr	r2, [pc, #40]	; (800f924 <searchF4+0x348>)
 800f8fc:	8813      	ldrh	r3, [r2, #0]
 800f8fe:	f043 0302 	orr.w	r3, r3, #2
 800f902:	8013      	strh	r3, [r2, #0]
					for(k = 0; k < pass[p_cnt-1]-4; k++){
 800f904:	2300      	movs	r3, #0
 800f906:	60bb      	str	r3, [r7, #8]
 800f908:	e013      	b.n	800f932 <searchF4+0x356>
 800f90a:	bf00      	nop
 800f90c:	20000f68 	.word	0x20000f68
 800f910:	20000457 	.word	0x20000457
 800f914:	200002b0 	.word	0x200002b0
 800f918:	200015c8 	.word	0x200015c8
 800f91c:	20000350 	.word	0x20000350
 800f920:	20000c0c 	.word	0x20000c0c
 800f924:	20000f64 	.word	0x20000f64
						half_sectionU();
 800f928:	f7f6 fada 	bl	8005ee0 <half_sectionU>
					for(k = 0; k < pass[p_cnt-1]-4; k++){
 800f92c:	68bb      	ldr	r3, [r7, #8]
 800f92e:	3301      	adds	r3, #1
 800f930:	60bb      	str	r3, [r7, #8]
 800f932:	4b6a      	ldr	r3, [pc, #424]	; (800fadc <searchF4+0x500>)
 800f934:	781b      	ldrb	r3, [r3, #0]
 800f936:	3b01      	subs	r3, #1
 800f938:	4a69      	ldr	r2, [pc, #420]	; (800fae0 <searchF4+0x504>)
 800f93a:	56d3      	ldrsb	r3, [r2, r3]
 800f93c:	3b04      	subs	r3, #4
 800f93e:	68ba      	ldr	r2, [r7, #8]
 800f940:	429a      	cmp	r2, r3
 800f942:	dbf1      	blt.n	800f928 <searchF4+0x34c>
					one_sectionD();
 800f944:	f7f6 fb78 	bl	8006038 <one_sectionD>
					MF2.FLAG.HACCEL = 0;
 800f948:	4a66      	ldr	r2, [pc, #408]	; (800fae4 <searchF4+0x508>)
 800f94a:	8813      	ldrh	r3, [r2, #0]
 800f94c:	f36f 0341 	bfc	r3, #1, #1
 800f950:	8013      	strh	r3, [r2, #0]
				break;
 800f952:	e04f      	b.n	800f9f4 <searchF4+0x418>
					if((pass[p_cnt] == 64) && (pass[p_cnt+1] == 64) && (pass[p_cnt+2] == 64) && (MF2.FLAG.HACCEL == 0)){
 800f954:	4b61      	ldr	r3, [pc, #388]	; (800fadc <searchF4+0x500>)
 800f956:	781b      	ldrb	r3, [r3, #0]
 800f958:	461a      	mov	r2, r3
 800f95a:	4b61      	ldr	r3, [pc, #388]	; (800fae0 <searchF4+0x504>)
 800f95c:	569b      	ldrsb	r3, [r3, r2]
 800f95e:	2b40      	cmp	r3, #64	; 0x40
 800f960:	d122      	bne.n	800f9a8 <searchF4+0x3cc>
 800f962:	4b5e      	ldr	r3, [pc, #376]	; (800fadc <searchF4+0x500>)
 800f964:	781b      	ldrb	r3, [r3, #0]
 800f966:	3301      	adds	r3, #1
 800f968:	4a5d      	ldr	r2, [pc, #372]	; (800fae0 <searchF4+0x504>)
 800f96a:	56d3      	ldrsb	r3, [r2, r3]
 800f96c:	2b40      	cmp	r3, #64	; 0x40
 800f96e:	d11b      	bne.n	800f9a8 <searchF4+0x3cc>
 800f970:	4b5a      	ldr	r3, [pc, #360]	; (800fadc <searchF4+0x500>)
 800f972:	781b      	ldrb	r3, [r3, #0]
 800f974:	3302      	adds	r3, #2
 800f976:	4a5a      	ldr	r2, [pc, #360]	; (800fae0 <searchF4+0x504>)
 800f978:	56d3      	ldrsb	r3, [r2, r3]
 800f97a:	2b40      	cmp	r3, #64	; 0x40
 800f97c:	d114      	bne.n	800f9a8 <searchF4+0x3cc>
 800f97e:	4b59      	ldr	r3, [pc, #356]	; (800fae4 <searchF4+0x508>)
 800f980:	881b      	ldrh	r3, [r3, #0]
 800f982:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800f986:	b2db      	uxtb	r3, r3
 800f988:	2b00      	cmp	r3, #0
 800f98a:	d10d      	bne.n	800f9a8 <searchF4+0x3cc>
						one_sectionVA();
 800f98c:	f7f6 fbf2 	bl	8006174 <one_sectionVA>
						MF2.FLAG.HACCEL = 1;
 800f990:	4a54      	ldr	r2, [pc, #336]	; (800fae4 <searchF4+0x508>)
 800f992:	8813      	ldrh	r3, [r2, #0]
 800f994:	f043 0302 	orr.w	r3, r3, #2
 800f998:	8013      	strh	r3, [r2, #0]
						p_cnt++;
 800f99a:	4b50      	ldr	r3, [pc, #320]	; (800fadc <searchF4+0x500>)
 800f99c:	781b      	ldrb	r3, [r3, #0]
 800f99e:	3301      	adds	r3, #1
 800f9a0:	b2da      	uxtb	r2, r3
 800f9a2:	4b4e      	ldr	r3, [pc, #312]	; (800fadc <searchF4+0x500>)
 800f9a4:	701a      	strb	r2, [r3, #0]
 800f9a6:	e025      	b.n	800f9f4 <searchF4+0x418>
					else if((pass[p_cnt] == 64) && (pass[p_cnt+1] != 64) && (MF2.FLAG.HACCEL == 1)){
 800f9a8:	4b4c      	ldr	r3, [pc, #304]	; (800fadc <searchF4+0x500>)
 800f9aa:	781b      	ldrb	r3, [r3, #0]
 800f9ac:	461a      	mov	r2, r3
 800f9ae:	4b4c      	ldr	r3, [pc, #304]	; (800fae0 <searchF4+0x504>)
 800f9b0:	569b      	ldrsb	r3, [r3, r2]
 800f9b2:	2b40      	cmp	r3, #64	; 0x40
 800f9b4:	d11b      	bne.n	800f9ee <searchF4+0x412>
 800f9b6:	4b49      	ldr	r3, [pc, #292]	; (800fadc <searchF4+0x500>)
 800f9b8:	781b      	ldrb	r3, [r3, #0]
 800f9ba:	3301      	adds	r3, #1
 800f9bc:	4a48      	ldr	r2, [pc, #288]	; (800fae0 <searchF4+0x504>)
 800f9be:	56d3      	ldrsb	r3, [r2, r3]
 800f9c0:	2b40      	cmp	r3, #64	; 0x40
 800f9c2:	d014      	beq.n	800f9ee <searchF4+0x412>
 800f9c4:	4b47      	ldr	r3, [pc, #284]	; (800fae4 <searchF4+0x508>)
 800f9c6:	881b      	ldrh	r3, [r3, #0]
 800f9c8:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800f9cc:	b2db      	uxtb	r3, r3
 800f9ce:	2b01      	cmp	r3, #1
 800f9d0:	d10d      	bne.n	800f9ee <searchF4+0x412>
						one_sectionVD();
 800f9d2:	f7f6 fc55 	bl	8006280 <one_sectionVD>
						MF2.FLAG.HACCEL = 0;
 800f9d6:	4a43      	ldr	r2, [pc, #268]	; (800fae4 <searchF4+0x508>)
 800f9d8:	8813      	ldrh	r3, [r2, #0]
 800f9da:	f36f 0341 	bfc	r3, #1, #1
 800f9de:	8013      	strh	r3, [r2, #0]
						p_cnt++;
 800f9e0:	4b3e      	ldr	r3, [pc, #248]	; (800fadc <searchF4+0x500>)
 800f9e2:	781b      	ldrb	r3, [r3, #0]
 800f9e4:	3301      	adds	r3, #1
 800f9e6:	b2da      	uxtb	r2, r3
 800f9e8:	4b3c      	ldr	r3, [pc, #240]	; (800fadc <searchF4+0x500>)
 800f9ea:	701a      	strb	r2, [r3, #0]
 800f9ec:	e002      	b.n	800f9f4 <searchF4+0x418>
						half_sectionV();
 800f9ee:	f7f6 fa83 	bl	8005ef8 <half_sectionV>
				break;
 800f9f2:	e7ff      	b.n	800f9f4 <searchF4+0x418>
 800f9f4:	bf00      	nop
		}

	}while(pass[p_cnt] != -114);
 800f9f6:	4b39      	ldr	r3, [pc, #228]	; (800fadc <searchF4+0x500>)
 800f9f8:	781b      	ldrb	r3, [r3, #0]
 800f9fa:	461a      	mov	r2, r3
 800f9fc:	4b38      	ldr	r3, [pc, #224]	; (800fae0 <searchF4+0x504>)
 800f9fe:	569b      	ldrsb	r3, [r3, r2]
 800fa00:	f113 0f72 	cmn.w	r3, #114	; 0x72
 800fa04:	f47f ae2e 	bne.w	800f664 <searchF4+0x88>

	mouse.x = goal_x;
 800fa08:	4b37      	ldr	r3, [pc, #220]	; (800fae8 <searchF4+0x50c>)
 800fa0a:	781a      	ldrb	r2, [r3, #0]
 800fa0c:	4b37      	ldr	r3, [pc, #220]	; (800faec <searchF4+0x510>)
 800fa0e:	701a      	strb	r2, [r3, #0]
	mouse.y = goal_y;
 800fa10:	4b37      	ldr	r3, [pc, #220]	; (800faf0 <searchF4+0x514>)
 800fa12:	781a      	ldrb	r2, [r3, #0]
 800fa14:	4b35      	ldr	r3, [pc, #212]	; (800faec <searchF4+0x510>)
 800fa16:	705a      	strb	r2, [r3, #1]
	mouse.dir = mouse.dir / 2;
 800fa18:	4b34      	ldr	r3, [pc, #208]	; (800faec <searchF4+0x510>)
 800fa1a:	789b      	ldrb	r3, [r3, #2]
 800fa1c:	b2db      	uxtb	r3, r3
 800fa1e:	085b      	lsrs	r3, r3, #1
 800fa20:	b2da      	uxtb	r2, r3
 800fa22:	4b32      	ldr	r3, [pc, #200]	; (800faec <searchF4+0x510>)
 800fa24:	709a      	strb	r2, [r3, #2]
	MF.FLAG.XDIR = 0;
 800fa26:	4a33      	ldr	r2, [pc, #204]	; (800faf4 <searchF4+0x518>)
 800fa28:	8813      	ldrh	r3, [r2, #0]
 800fa2a:	f36f 330c 	bfc	r3, #12, #1
 800fa2e:	8013      	strh	r3, [r2, #0]

	if(pass[p_cnt-1] != -13 && pass[p_cnt-1] != -14 && pass[p_cnt-1] != -15 && pass[p_cnt-1] != -16){
 800fa30:	4b2a      	ldr	r3, [pc, #168]	; (800fadc <searchF4+0x500>)
 800fa32:	781b      	ldrb	r3, [r3, #0]
 800fa34:	3b01      	subs	r3, #1
 800fa36:	4a2a      	ldr	r2, [pc, #168]	; (800fae0 <searchF4+0x504>)
 800fa38:	56d3      	ldrsb	r3, [r2, r3]
 800fa3a:	f113 0f0d 	cmn.w	r3, #13
 800fa3e:	d02c      	beq.n	800fa9a <searchF4+0x4be>
 800fa40:	4b26      	ldr	r3, [pc, #152]	; (800fadc <searchF4+0x500>)
 800fa42:	781b      	ldrb	r3, [r3, #0]
 800fa44:	3b01      	subs	r3, #1
 800fa46:	4a26      	ldr	r2, [pc, #152]	; (800fae0 <searchF4+0x504>)
 800fa48:	56d3      	ldrsb	r3, [r2, r3]
 800fa4a:	f113 0f0e 	cmn.w	r3, #14
 800fa4e:	d024      	beq.n	800fa9a <searchF4+0x4be>
 800fa50:	4b22      	ldr	r3, [pc, #136]	; (800fadc <searchF4+0x500>)
 800fa52:	781b      	ldrb	r3, [r3, #0]
 800fa54:	3b01      	subs	r3, #1
 800fa56:	4a22      	ldr	r2, [pc, #136]	; (800fae0 <searchF4+0x504>)
 800fa58:	56d3      	ldrsb	r3, [r2, r3]
 800fa5a:	f113 0f0f 	cmn.w	r3, #15
 800fa5e:	d01c      	beq.n	800fa9a <searchF4+0x4be>
 800fa60:	4b1e      	ldr	r3, [pc, #120]	; (800fadc <searchF4+0x500>)
 800fa62:	781b      	ldrb	r3, [r3, #0]
 800fa64:	3b01      	subs	r3, #1
 800fa66:	4a1e      	ldr	r2, [pc, #120]	; (800fae0 <searchF4+0x504>)
 800fa68:	56d3      	ldrsb	r3, [r2, r3]
 800fa6a:	f113 0f10 	cmn.w	r3, #16
 800fa6e:	d014      	beq.n	800fa9a <searchF4+0x4be>
		for(int j=0; j<goal_mode-1; j++){
 800fa70:	2300      	movs	r3, #0
 800fa72:	607b      	str	r3, [r7, #4]
 800fa74:	e006      	b.n	800fa84 <searchF4+0x4a8>
			one_sectionU();
 800fa76:	f7f6 fc9b 	bl	80063b0 <one_sectionU>
			adv_pos();
 800fa7a:	f000 f841 	bl	800fb00 <adv_pos>
		for(int j=0; j<goal_mode-1; j++){
 800fa7e:	687b      	ldr	r3, [r7, #4]
 800fa80:	3301      	adds	r3, #1
 800fa82:	607b      	str	r3, [r7, #4]
 800fa84:	4b1c      	ldr	r3, [pc, #112]	; (800faf8 <searchF4+0x51c>)
 800fa86:	781b      	ldrb	r3, [r3, #0]
 800fa88:	3b01      	subs	r3, #1
 800fa8a:	687a      	ldr	r2, [r7, #4]
 800fa8c:	429a      	cmp	r2, r3
 800fa8e:	dbf2      	blt.n	800fa76 <searchF4+0x49a>
		}
		half_sectionD();
 800fa90:	f7f6 f90a 	bl	8005ca8 <half_sectionD>
		set_positionF();
 800fa94:	f7f5 ff50 	bl	8005938 <set_positionF>
 800fa98:	e00f      	b.n	800faba <searchF4+0x4de>
	}else{														//a減速斜めでgoalする場合
		for(int j=0; j<goal_mode-1; j++){
 800fa9a:	2300      	movs	r3, #0
 800fa9c:	603b      	str	r3, [r7, #0]
 800fa9e:	e006      	b.n	800faae <searchF4+0x4d2>
			one_section();
 800faa0:	f7f6 fa36 	bl	8005f10 <one_section>
			adv_pos();
 800faa4:	f000 f82c 	bl	800fb00 <adv_pos>
		for(int j=0; j<goal_mode-1; j++){
 800faa8:	683b      	ldr	r3, [r7, #0]
 800faaa:	3301      	adds	r3, #1
 800faac:	603b      	str	r3, [r7, #0]
 800faae:	4b12      	ldr	r3, [pc, #72]	; (800faf8 <searchF4+0x51c>)
 800fab0:	781b      	ldrb	r3, [r3, #0]
 800fab2:	3b01      	subs	r3, #1
 800fab4:	683a      	ldr	r2, [r7, #0]
 800fab6:	429a      	cmp	r2, r3
 800fab8:	dbf2      	blt.n	800faa0 <searchF4+0x4c4>
		}
	}
	HAL_Delay(500);
 800faba:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800fabe:	f7f1 faad 	bl	800101c <HAL_Delay>
	rotate_180();											//180度回転
 800fac2:	f7f6 fe45 	bl	8006750 <rotate_180>
//	driveC2(SETPOS_BACK); 							        //a尻を当てる程度に後退。回転後に停止する
//	degree_z = target_degree_z;
//	start_mode = 0;
	start_mode = 1;
 800fac6:	4b0d      	ldr	r3, [pc, #52]	; (800fafc <searchF4+0x520>)
 800fac8:	2201      	movs	r2, #1
 800faca:	701a      	strb	r2, [r3, #0]
	goal_mode = 1;
 800facc:	4b0a      	ldr	r3, [pc, #40]	; (800faf8 <searchF4+0x51c>)
 800face:	2201      	movs	r2, #1
 800fad0:	701a      	strb	r2, [r3, #0]
}
 800fad2:	bf00      	nop
 800fad4:	3710      	adds	r7, #16
 800fad6:	46bd      	mov	sp, r7
 800fad8:	bd80      	pop	{r7, pc}
 800fada:	bf00      	nop
 800fadc:	200002b0 	.word	0x200002b0
 800fae0:	20000350 	.word	0x20000350
 800fae4:	20000f64 	.word	0x20000f64
 800fae8:	20000bb0 	.word	0x20000bb0
 800faec:	20000c0c 	.word	0x20000c0c
 800faf0:	20000b4c 	.word	0x20000b4c
 800faf4:	20000f68 	.word	0x20000f68
 800faf8:	20000bb1 	.word	0x20000bb1
 800fafc:	200015c8 	.word	0x200015c8

0800fb00 <adv_pos>:
//adv_pos
//aマイクロマウス内部位置情報で前進させる
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void adv_pos(){
 800fb00:	b480      	push	{r7}
 800fb02:	af00      	add	r7, sp, #0

	switch(mouse.dir){										//aマイクロマウスが現在向いている方向で判定
 800fb04:	4b1a      	ldr	r3, [pc, #104]	; (800fb70 <adv_pos+0x70>)
 800fb06:	789b      	ldrb	r3, [r3, #2]
 800fb08:	b2db      	uxtb	r3, r3
 800fb0a:	2b03      	cmp	r3, #3
 800fb0c:	d82a      	bhi.n	800fb64 <adv_pos+0x64>
 800fb0e:	a201      	add	r2, pc, #4	; (adr r2, 800fb14 <adv_pos+0x14>)
 800fb10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fb14:	0800fb25 	.word	0x0800fb25
 800fb18:	0800fb35 	.word	0x0800fb35
 800fb1c:	0800fb45 	.word	0x0800fb45
 800fb20:	0800fb55 	.word	0x0800fb55
	case 0x00:												//a北方向に向いている場合
		mouse.y++;											//Y座標をインクリメント
 800fb24:	4b12      	ldr	r3, [pc, #72]	; (800fb70 <adv_pos+0x70>)
 800fb26:	785b      	ldrb	r3, [r3, #1]
 800fb28:	b2db      	uxtb	r3, r3
 800fb2a:	3301      	adds	r3, #1
 800fb2c:	b2da      	uxtb	r2, r3
 800fb2e:	4b10      	ldr	r3, [pc, #64]	; (800fb70 <adv_pos+0x70>)
 800fb30:	705a      	strb	r2, [r3, #1]
		break;
 800fb32:	e017      	b.n	800fb64 <adv_pos+0x64>
	case 0x01:												//a東方向に向いている場合
		mouse.x++;											//X座標をインクリメント
 800fb34:	4b0e      	ldr	r3, [pc, #56]	; (800fb70 <adv_pos+0x70>)
 800fb36:	781b      	ldrb	r3, [r3, #0]
 800fb38:	b2db      	uxtb	r3, r3
 800fb3a:	3301      	adds	r3, #1
 800fb3c:	b2da      	uxtb	r2, r3
 800fb3e:	4b0c      	ldr	r3, [pc, #48]	; (800fb70 <adv_pos+0x70>)
 800fb40:	701a      	strb	r2, [r3, #0]
		break;
 800fb42:	e00f      	b.n	800fb64 <adv_pos+0x64>
	case 0x02:												//a南方向に向いている場合
		mouse.y--;											//Y座標をデクリメント
 800fb44:	4b0a      	ldr	r3, [pc, #40]	; (800fb70 <adv_pos+0x70>)
 800fb46:	785b      	ldrb	r3, [r3, #1]
 800fb48:	b2db      	uxtb	r3, r3
 800fb4a:	3b01      	subs	r3, #1
 800fb4c:	b2da      	uxtb	r2, r3
 800fb4e:	4b08      	ldr	r3, [pc, #32]	; (800fb70 <adv_pos+0x70>)
 800fb50:	705a      	strb	r2, [r3, #1]
		break;
 800fb52:	e007      	b.n	800fb64 <adv_pos+0x64>
	case 0x03:												//a西方向に向いている場合
		mouse.x--;											//X座標をデクリメント
 800fb54:	4b06      	ldr	r3, [pc, #24]	; (800fb70 <adv_pos+0x70>)
 800fb56:	781b      	ldrb	r3, [r3, #0]
 800fb58:	b2db      	uxtb	r3, r3
 800fb5a:	3b01      	subs	r3, #1
 800fb5c:	b2da      	uxtb	r2, r3
 800fb5e:	4b04      	ldr	r3, [pc, #16]	; (800fb70 <adv_pos+0x70>)
 800fb60:	701a      	strb	r2, [r3, #0]
		break;
 800fb62:	bf00      	nop
	}
}
 800fb64:	bf00      	nop
 800fb66:	46bd      	mov	sp, r7
 800fb68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb6c:	4770      	bx	lr
 800fb6e:	bf00      	nop
 800fb70:	20000c0c 	.word	0x20000c0c

0800fb74 <conf_route>:
//conf_route
//a進路を判定する
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void conf_route(){
 800fb74:	b580      	push	{r7, lr}
 800fb76:	af00      	add	r7, sp, #0

	//----a壁情報書き込み----
	write_map();
 800fb78:	f000 f886 	bl	800fc88 <write_map>

	//----a最短経路上に壁があれば進路変更----
	if(wall_info & route[r_cnt]){
 800fb7c:	4b09      	ldr	r3, [pc, #36]	; (800fba4 <conf_route+0x30>)
 800fb7e:	781b      	ldrb	r3, [r3, #0]
 800fb80:	461a      	mov	r2, r3
 800fb82:	4b09      	ldr	r3, [pc, #36]	; (800fba8 <conf_route+0x34>)
 800fb84:	5c9a      	ldrb	r2, [r3, r2]
 800fb86:	4b09      	ldr	r3, [pc, #36]	; (800fbac <conf_route+0x38>)
 800fb88:	781b      	ldrb	r3, [r3, #0]
 800fb8a:	4013      	ands	r3, r2
 800fb8c:	b2db      	uxtb	r3, r3
 800fb8e:	2b00      	cmp	r3, #0
 800fb90:	d006      	beq.n	800fba0 <conf_route+0x2c>
		make_smap();										//a歩数マップを更新
 800fb92:	f000 fa6d 	bl	8010070 <make_smap>
		make_route();										//a最短経路を更新
 800fb96:	f000 fe29 	bl	80107ec <make_route>
		r_cnt = 0;											//a経路カウンタを0に
 800fb9a:	4b02      	ldr	r3, [pc, #8]	; (800fba4 <conf_route+0x30>)
 800fb9c:	2200      	movs	r2, #0
 800fb9e:	701a      	strb	r2, [r3, #0]
	}
}
 800fba0:	bf00      	nop
 800fba2:	bd80      	pop	{r7, pc}
 800fba4:	200015d0 	.word	0x200015d0
 800fba8:	20000c54 	.word	0x20000c54
 800fbac:	200002c8 	.word	0x200002c8

0800fbb0 <map_Init>:
//map_Init
//aマップ格納配列map[][]の初期化をする
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void map_Init(){
 800fbb0:	b480      	push	{r7}
 800fbb2:	b083      	sub	sp, #12
 800fbb4:	af00      	add	r7, sp, #0
	//====a変数宣言====
	uint8_t x, y;											//for文用変数

	//====a初期化開始====
	//aマップのクリア
	for(y = 0; y <= 15; y++){								//a各Y座標で実行
 800fbb6:	2300      	movs	r3, #0
 800fbb8:	71bb      	strb	r3, [r7, #6]
 800fbba:	e013      	b.n	800fbe4 <map_Init+0x34>
		for(x = 0; x <= 15; x++){							//a各X座標で実行
 800fbbc:	2300      	movs	r3, #0
 800fbbe:	71fb      	strb	r3, [r7, #7]
 800fbc0:	e00a      	b.n	800fbd8 <map_Init+0x28>
			map[y][x] = 0xf0;								//a上位4ビット（2次走行時）を壁あり，下位4ビット（1次走行時）を壁なしとする。
 800fbc2:	79ba      	ldrb	r2, [r7, #6]
 800fbc4:	79fb      	ldrb	r3, [r7, #7]
 800fbc6:	492f      	ldr	r1, [pc, #188]	; (800fc84 <map_Init+0xd4>)
 800fbc8:	0112      	lsls	r2, r2, #4
 800fbca:	440a      	add	r2, r1
 800fbcc:	4413      	add	r3, r2
 800fbce:	22f0      	movs	r2, #240	; 0xf0
 800fbd0:	701a      	strb	r2, [r3, #0]
		for(x = 0; x <= 15; x++){							//a各X座標で実行
 800fbd2:	79fb      	ldrb	r3, [r7, #7]
 800fbd4:	3301      	adds	r3, #1
 800fbd6:	71fb      	strb	r3, [r7, #7]
 800fbd8:	79fb      	ldrb	r3, [r7, #7]
 800fbda:	2b0f      	cmp	r3, #15
 800fbdc:	d9f1      	bls.n	800fbc2 <map_Init+0x12>
	for(y = 0; y <= 15; y++){								//a各Y座標で実行
 800fbde:	79bb      	ldrb	r3, [r7, #6]
 800fbe0:	3301      	adds	r3, #1
 800fbe2:	71bb      	strb	r3, [r7, #6]
 800fbe4:	79bb      	ldrb	r3, [r7, #6]
 800fbe6:	2b0f      	cmp	r3, #15
 800fbe8:	d9e8      	bls.n	800fbbc <map_Init+0xc>
		}
	}

	//a確定壁の配置
	for(y = 0; y <= 15; y++){								//a各Y座標で実行
 800fbea:	2300      	movs	r3, #0
 800fbec:	71bb      	strb	r3, [r7, #6]
 800fbee:	e020      	b.n	800fc32 <map_Init+0x82>
		map[y][0] |= 0xf1;									//a最西に壁を配置
 800fbf0:	79bb      	ldrb	r3, [r7, #6]
 800fbf2:	4a24      	ldr	r2, [pc, #144]	; (800fc84 <map_Init+0xd4>)
 800fbf4:	011b      	lsls	r3, r3, #4
 800fbf6:	4413      	add	r3, r2
 800fbf8:	781a      	ldrb	r2, [r3, #0]
 800fbfa:	79bb      	ldrb	r3, [r7, #6]
 800fbfc:	f062 020e 	orn	r2, r2, #14
 800fc00:	b2d1      	uxtb	r1, r2
 800fc02:	4a20      	ldr	r2, [pc, #128]	; (800fc84 <map_Init+0xd4>)
 800fc04:	011b      	lsls	r3, r3, #4
 800fc06:	4413      	add	r3, r2
 800fc08:	460a      	mov	r2, r1
 800fc0a:	701a      	strb	r2, [r3, #0]
		map[y][15] |= 0xf4;									//a最東に壁を配置
 800fc0c:	79bb      	ldrb	r3, [r7, #6]
 800fc0e:	4a1d      	ldr	r2, [pc, #116]	; (800fc84 <map_Init+0xd4>)
 800fc10:	011b      	lsls	r3, r3, #4
 800fc12:	4413      	add	r3, r2
 800fc14:	330f      	adds	r3, #15
 800fc16:	781a      	ldrb	r2, [r3, #0]
 800fc18:	79bb      	ldrb	r3, [r7, #6]
 800fc1a:	f062 020b 	orn	r2, r2, #11
 800fc1e:	b2d1      	uxtb	r1, r2
 800fc20:	4a18      	ldr	r2, [pc, #96]	; (800fc84 <map_Init+0xd4>)
 800fc22:	011b      	lsls	r3, r3, #4
 800fc24:	4413      	add	r3, r2
 800fc26:	330f      	adds	r3, #15
 800fc28:	460a      	mov	r2, r1
 800fc2a:	701a      	strb	r2, [r3, #0]
	for(y = 0; y <= 15; y++){								//a各Y座標で実行
 800fc2c:	79bb      	ldrb	r3, [r7, #6]
 800fc2e:	3301      	adds	r3, #1
 800fc30:	71bb      	strb	r3, [r7, #6]
 800fc32:	79bb      	ldrb	r3, [r7, #6]
 800fc34:	2b0f      	cmp	r3, #15
 800fc36:	d9db      	bls.n	800fbf0 <map_Init+0x40>
	}
	for(x = 0; x <= 15; x++){								//a各X座標で実行
 800fc38:	2300      	movs	r3, #0
 800fc3a:	71fb      	strb	r3, [r7, #7]
 800fc3c:	e019      	b.n	800fc72 <map_Init+0xc2>
		map[0][x] |= 0xf2;									//a最南に壁を配置
 800fc3e:	79fb      	ldrb	r3, [r7, #7]
 800fc40:	4a10      	ldr	r2, [pc, #64]	; (800fc84 <map_Init+0xd4>)
 800fc42:	5cd2      	ldrb	r2, [r2, r3]
 800fc44:	79fb      	ldrb	r3, [r7, #7]
 800fc46:	f062 020d 	orn	r2, r2, #13
 800fc4a:	b2d1      	uxtb	r1, r2
 800fc4c:	4a0d      	ldr	r2, [pc, #52]	; (800fc84 <map_Init+0xd4>)
 800fc4e:	54d1      	strb	r1, [r2, r3]
		map[15][x] |= 0xf8;									//a最北に壁を配置
 800fc50:	79fb      	ldrb	r3, [r7, #7]
 800fc52:	4a0c      	ldr	r2, [pc, #48]	; (800fc84 <map_Init+0xd4>)
 800fc54:	4413      	add	r3, r2
 800fc56:	f893 20f0 	ldrb.w	r2, [r3, #240]	; 0xf0
 800fc5a:	79fb      	ldrb	r3, [r7, #7]
 800fc5c:	f062 0207 	orn	r2, r2, #7
 800fc60:	b2d1      	uxtb	r1, r2
 800fc62:	4a08      	ldr	r2, [pc, #32]	; (800fc84 <map_Init+0xd4>)
 800fc64:	4413      	add	r3, r2
 800fc66:	460a      	mov	r2, r1
 800fc68:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
	for(x = 0; x <= 15; x++){								//a各X座標で実行
 800fc6c:	79fb      	ldrb	r3, [r7, #7]
 800fc6e:	3301      	adds	r3, #1
 800fc70:	71fb      	strb	r3, [r7, #7]
 800fc72:	79fb      	ldrb	r3, [r7, #7]
 800fc74:	2b0f      	cmp	r3, #15
 800fc76:	d9e2      	bls.n	800fc3e <map_Init+0x8e>
	}
}
 800fc78:	bf00      	nop
 800fc7a:	370c      	adds	r7, #12
 800fc7c:	46bd      	mov	sp, r7
 800fc7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc82:	4770      	bx	lr
 800fc84:	200001ac 	.word	0x200001ac

0800fc88 <write_map>:
//write_map
//aマップデータを書き込む
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void write_map(){
 800fc88:	b490      	push	{r4, r7}
 800fc8a:	b082      	sub	sp, #8
 800fc8c:	af00      	add	r7, sp, #0

	//====a変数宣言====
	uint8_t m_temp;											//a向きを補正した壁情報

	//====a壁情報の補正格納====
	m_temp = (wall_info >> mouse.dir) & 0x0f;				//aセンサ壁情報をmouse.dirで向きを補正させて下位4bit分を残す
 800fc8e:	4b8f      	ldr	r3, [pc, #572]	; (800fecc <write_map+0x244>)
 800fc90:	781b      	ldrb	r3, [r3, #0]
 800fc92:	461a      	mov	r2, r3
 800fc94:	4b8e      	ldr	r3, [pc, #568]	; (800fed0 <write_map+0x248>)
 800fc96:	789b      	ldrb	r3, [r3, #2]
 800fc98:	b2db      	uxtb	r3, r3
 800fc9a:	fa42 f303 	asr.w	r3, r2, r3
 800fc9e:	b2db      	uxtb	r3, r3
 800fca0:	f003 030f 	and.w	r3, r3, #15
 800fca4:	71fb      	strb	r3, [r7, #7]
	m_temp |= (m_temp << 4);								//a上位4bitに下位4bitをコピー。この作業でm_tempにNESW順で壁が格納
 800fca6:	79fb      	ldrb	r3, [r7, #7]
 800fca8:	011b      	lsls	r3, r3, #4
 800fcaa:	b25a      	sxtb	r2, r3
 800fcac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800fcb0:	4313      	orrs	r3, r2
 800fcb2:	b25b      	sxtb	r3, r3
 800fcb4:	71fb      	strb	r3, [r7, #7]

	//====aデータの書き込み====
	map[mouse.y][mouse.x] = m_temp; 						//a現在地に壁情報書き込み
 800fcb6:	4b86      	ldr	r3, [pc, #536]	; (800fed0 <write_map+0x248>)
 800fcb8:	785b      	ldrb	r3, [r3, #1]
 800fcba:	b2db      	uxtb	r3, r3
 800fcbc:	4618      	mov	r0, r3
 800fcbe:	4b84      	ldr	r3, [pc, #528]	; (800fed0 <write_map+0x248>)
 800fcc0:	781b      	ldrb	r3, [r3, #0]
 800fcc2:	b2db      	uxtb	r3, r3
 800fcc4:	4619      	mov	r1, r3
 800fcc6:	4a83      	ldr	r2, [pc, #524]	; (800fed4 <write_map+0x24c>)
 800fcc8:	0103      	lsls	r3, r0, #4
 800fcca:	4413      	add	r3, r2
 800fccc:	440b      	add	r3, r1
 800fcce:	79fa      	ldrb	r2, [r7, #7]
 800fcd0:	701a      	strb	r2, [r3, #0]
	//----a周辺に書き込む----
	//a北側について
	if(mouse.y != 15){										//a現在最北端でないとき
 800fcd2:	4b7f      	ldr	r3, [pc, #508]	; (800fed0 <write_map+0x248>)
 800fcd4:	785b      	ldrb	r3, [r3, #1]
 800fcd6:	b2db      	uxtb	r3, r3
 800fcd8:	2b0f      	cmp	r3, #15
 800fcda:	d039      	beq.n	800fd50 <write_map+0xc8>
		if(m_temp & 0x88){									//a北壁がある場合
 800fcdc:	79fb      	ldrb	r3, [r7, #7]
 800fcde:	f003 0388 	and.w	r3, r3, #136	; 0x88
 800fce2:	2b00      	cmp	r3, #0
 800fce4:	d01a      	beq.n	800fd1c <write_map+0x94>
			map[mouse.y + 1][mouse.x] |= 0x22;				//a北側の区画から見て南壁ありを書き込む
 800fce6:	4b7a      	ldr	r3, [pc, #488]	; (800fed0 <write_map+0x248>)
 800fce8:	785b      	ldrb	r3, [r3, #1]
 800fcea:	b2d8      	uxtb	r0, r3
 800fcec:	4603      	mov	r3, r0
 800fcee:	3301      	adds	r3, #1
 800fcf0:	4a77      	ldr	r2, [pc, #476]	; (800fed0 <write_map+0x248>)
 800fcf2:	7812      	ldrb	r2, [r2, #0]
 800fcf4:	b2d1      	uxtb	r1, r2
 800fcf6:	460c      	mov	r4, r1
 800fcf8:	4a76      	ldr	r2, [pc, #472]	; (800fed4 <write_map+0x24c>)
 800fcfa:	011b      	lsls	r3, r3, #4
 800fcfc:	4413      	add	r3, r2
 800fcfe:	4423      	add	r3, r4
 800fd00:	781a      	ldrb	r2, [r3, #0]
 800fd02:	4603      	mov	r3, r0
 800fd04:	3301      	adds	r3, #1
 800fd06:	4608      	mov	r0, r1
 800fd08:	f042 0222 	orr.w	r2, r2, #34	; 0x22
 800fd0c:	b2d1      	uxtb	r1, r2
 800fd0e:	4a71      	ldr	r2, [pc, #452]	; (800fed4 <write_map+0x24c>)
 800fd10:	011b      	lsls	r3, r3, #4
 800fd12:	4413      	add	r3, r2
 800fd14:	4403      	add	r3, r0
 800fd16:	460a      	mov	r2, r1
 800fd18:	701a      	strb	r2, [r3, #0]
 800fd1a:	e019      	b.n	800fd50 <write_map+0xc8>
		}else{												//a北壁がない場合
			map[mouse.y + 1][mouse.x] &= 0xDD;				//a北側の区画から見て南壁なしを書き込む
 800fd1c:	4b6c      	ldr	r3, [pc, #432]	; (800fed0 <write_map+0x248>)
 800fd1e:	785b      	ldrb	r3, [r3, #1]
 800fd20:	b2d8      	uxtb	r0, r3
 800fd22:	4603      	mov	r3, r0
 800fd24:	3301      	adds	r3, #1
 800fd26:	4a6a      	ldr	r2, [pc, #424]	; (800fed0 <write_map+0x248>)
 800fd28:	7812      	ldrb	r2, [r2, #0]
 800fd2a:	b2d1      	uxtb	r1, r2
 800fd2c:	460c      	mov	r4, r1
 800fd2e:	4a69      	ldr	r2, [pc, #420]	; (800fed4 <write_map+0x24c>)
 800fd30:	011b      	lsls	r3, r3, #4
 800fd32:	4413      	add	r3, r2
 800fd34:	4423      	add	r3, r4
 800fd36:	781a      	ldrb	r2, [r3, #0]
 800fd38:	4603      	mov	r3, r0
 800fd3a:	3301      	adds	r3, #1
 800fd3c:	4608      	mov	r0, r1
 800fd3e:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 800fd42:	b2d1      	uxtb	r1, r2
 800fd44:	4a63      	ldr	r2, [pc, #396]	; (800fed4 <write_map+0x24c>)
 800fd46:	011b      	lsls	r3, r3, #4
 800fd48:	4413      	add	r3, r2
 800fd4a:	4403      	add	r3, r0
 800fd4c:	460a      	mov	r2, r1
 800fd4e:	701a      	strb	r2, [r3, #0]
		}
	}
	//a東側について
	if(mouse.x != 15){										//a現在最東端でないとき
 800fd50:	4b5f      	ldr	r3, [pc, #380]	; (800fed0 <write_map+0x248>)
 800fd52:	781b      	ldrb	r3, [r3, #0]
 800fd54:	b2db      	uxtb	r3, r3
 800fd56:	2b0f      	cmp	r3, #15
 800fd58:	d037      	beq.n	800fdca <write_map+0x142>
		if(m_temp & 0x44){									//a東壁がある場合
 800fd5a:	79fb      	ldrb	r3, [r7, #7]
 800fd5c:	f003 0344 	and.w	r3, r3, #68	; 0x44
 800fd60:	2b00      	cmp	r3, #0
 800fd62:	d019      	beq.n	800fd98 <write_map+0x110>
			map[mouse.y][mouse.x + 1] |= 0x11;				//a東側の区画から見て西壁ありを書き込む
 800fd64:	4b5a      	ldr	r3, [pc, #360]	; (800fed0 <write_map+0x248>)
 800fd66:	785b      	ldrb	r3, [r3, #1]
 800fd68:	b2dc      	uxtb	r4, r3
 800fd6a:	4622      	mov	r2, r4
 800fd6c:	4b58      	ldr	r3, [pc, #352]	; (800fed0 <write_map+0x248>)
 800fd6e:	781b      	ldrb	r3, [r3, #0]
 800fd70:	b2d8      	uxtb	r0, r3
 800fd72:	4603      	mov	r3, r0
 800fd74:	3301      	adds	r3, #1
 800fd76:	4957      	ldr	r1, [pc, #348]	; (800fed4 <write_map+0x24c>)
 800fd78:	0112      	lsls	r2, r2, #4
 800fd7a:	440a      	add	r2, r1
 800fd7c:	4413      	add	r3, r2
 800fd7e:	781a      	ldrb	r2, [r3, #0]
 800fd80:	4603      	mov	r3, r0
 800fd82:	3301      	adds	r3, #1
 800fd84:	f042 0211 	orr.w	r2, r2, #17
 800fd88:	b2d0      	uxtb	r0, r2
 800fd8a:	4952      	ldr	r1, [pc, #328]	; (800fed4 <write_map+0x24c>)
 800fd8c:	0122      	lsls	r2, r4, #4
 800fd8e:	440a      	add	r2, r1
 800fd90:	4413      	add	r3, r2
 800fd92:	4602      	mov	r2, r0
 800fd94:	701a      	strb	r2, [r3, #0]
 800fd96:	e018      	b.n	800fdca <write_map+0x142>
		}else{												//a北壁がない場合
			map[mouse.y][mouse.x + 1] &= 0xEE;				//a東側の区画から見て西壁なしを書き込む
 800fd98:	4b4d      	ldr	r3, [pc, #308]	; (800fed0 <write_map+0x248>)
 800fd9a:	785b      	ldrb	r3, [r3, #1]
 800fd9c:	b2dc      	uxtb	r4, r3
 800fd9e:	4622      	mov	r2, r4
 800fda0:	4b4b      	ldr	r3, [pc, #300]	; (800fed0 <write_map+0x248>)
 800fda2:	781b      	ldrb	r3, [r3, #0]
 800fda4:	b2d8      	uxtb	r0, r3
 800fda6:	4603      	mov	r3, r0
 800fda8:	3301      	adds	r3, #1
 800fdaa:	494a      	ldr	r1, [pc, #296]	; (800fed4 <write_map+0x24c>)
 800fdac:	0112      	lsls	r2, r2, #4
 800fdae:	440a      	add	r2, r1
 800fdb0:	4413      	add	r3, r2
 800fdb2:	781a      	ldrb	r2, [r3, #0]
 800fdb4:	4603      	mov	r3, r0
 800fdb6:	3301      	adds	r3, #1
 800fdb8:	f022 0211 	bic.w	r2, r2, #17
 800fdbc:	b2d0      	uxtb	r0, r2
 800fdbe:	4945      	ldr	r1, [pc, #276]	; (800fed4 <write_map+0x24c>)
 800fdc0:	0122      	lsls	r2, r4, #4
 800fdc2:	440a      	add	r2, r1
 800fdc4:	4413      	add	r3, r2
 800fdc6:	4602      	mov	r2, r0
 800fdc8:	701a      	strb	r2, [r3, #0]
		}
	}
	//a南壁について
	if(mouse.y != 0){										//a現在最南端でないとき
 800fdca:	4b41      	ldr	r3, [pc, #260]	; (800fed0 <write_map+0x248>)
 800fdcc:	785b      	ldrb	r3, [r3, #1]
 800fdce:	b2db      	uxtb	r3, r3
 800fdd0:	2b00      	cmp	r3, #0
 800fdd2:	d039      	beq.n	800fe48 <write_map+0x1c0>
		if(m_temp & 0x22){									//a南壁がある場合
 800fdd4:	79fb      	ldrb	r3, [r7, #7]
 800fdd6:	f003 0322 	and.w	r3, r3, #34	; 0x22
 800fdda:	2b00      	cmp	r3, #0
 800fddc:	d01a      	beq.n	800fe14 <write_map+0x18c>
			map[mouse.y - 1][mouse.x] |= 0x88;				//a南側の区画から見て北壁ありを書き込む
 800fdde:	4b3c      	ldr	r3, [pc, #240]	; (800fed0 <write_map+0x248>)
 800fde0:	785b      	ldrb	r3, [r3, #1]
 800fde2:	b2d8      	uxtb	r0, r3
 800fde4:	4603      	mov	r3, r0
 800fde6:	3b01      	subs	r3, #1
 800fde8:	4a39      	ldr	r2, [pc, #228]	; (800fed0 <write_map+0x248>)
 800fdea:	7812      	ldrb	r2, [r2, #0]
 800fdec:	b2d1      	uxtb	r1, r2
 800fdee:	460c      	mov	r4, r1
 800fdf0:	4a38      	ldr	r2, [pc, #224]	; (800fed4 <write_map+0x24c>)
 800fdf2:	011b      	lsls	r3, r3, #4
 800fdf4:	4413      	add	r3, r2
 800fdf6:	4423      	add	r3, r4
 800fdf8:	781a      	ldrb	r2, [r3, #0]
 800fdfa:	4603      	mov	r3, r0
 800fdfc:	3b01      	subs	r3, #1
 800fdfe:	4608      	mov	r0, r1
 800fe00:	f062 0277 	orn	r2, r2, #119	; 0x77
 800fe04:	b2d1      	uxtb	r1, r2
 800fe06:	4a33      	ldr	r2, [pc, #204]	; (800fed4 <write_map+0x24c>)
 800fe08:	011b      	lsls	r3, r3, #4
 800fe0a:	4413      	add	r3, r2
 800fe0c:	4403      	add	r3, r0
 800fe0e:	460a      	mov	r2, r1
 800fe10:	701a      	strb	r2, [r3, #0]
 800fe12:	e019      	b.n	800fe48 <write_map+0x1c0>
		}else{												//a南壁がない場合
			map[mouse.y - 1][mouse.x] &= 0x77;				//a南側の区画から見て北壁なしを書き込む
 800fe14:	4b2e      	ldr	r3, [pc, #184]	; (800fed0 <write_map+0x248>)
 800fe16:	785b      	ldrb	r3, [r3, #1]
 800fe18:	b2d8      	uxtb	r0, r3
 800fe1a:	4603      	mov	r3, r0
 800fe1c:	3b01      	subs	r3, #1
 800fe1e:	4a2c      	ldr	r2, [pc, #176]	; (800fed0 <write_map+0x248>)
 800fe20:	7812      	ldrb	r2, [r2, #0]
 800fe22:	b2d1      	uxtb	r1, r2
 800fe24:	460c      	mov	r4, r1
 800fe26:	4a2b      	ldr	r2, [pc, #172]	; (800fed4 <write_map+0x24c>)
 800fe28:	011b      	lsls	r3, r3, #4
 800fe2a:	4413      	add	r3, r2
 800fe2c:	4423      	add	r3, r4
 800fe2e:	781a      	ldrb	r2, [r3, #0]
 800fe30:	4603      	mov	r3, r0
 800fe32:	3b01      	subs	r3, #1
 800fe34:	4608      	mov	r0, r1
 800fe36:	f002 0277 	and.w	r2, r2, #119	; 0x77
 800fe3a:	b2d1      	uxtb	r1, r2
 800fe3c:	4a25      	ldr	r2, [pc, #148]	; (800fed4 <write_map+0x24c>)
 800fe3e:	011b      	lsls	r3, r3, #4
 800fe40:	4413      	add	r3, r2
 800fe42:	4403      	add	r3, r0
 800fe44:	460a      	mov	r2, r1
 800fe46:	701a      	strb	r2, [r3, #0]
		}
	}
	//a西側について
	if(mouse.x != 0){										//a現在最西端でないとき
 800fe48:	4b21      	ldr	r3, [pc, #132]	; (800fed0 <write_map+0x248>)
 800fe4a:	781b      	ldrb	r3, [r3, #0]
 800fe4c:	b2db      	uxtb	r3, r3
 800fe4e:	2b00      	cmp	r3, #0
 800fe50:	d037      	beq.n	800fec2 <write_map+0x23a>
		if(m_temp & 0x11){									//a西壁がある場合
 800fe52:	79fb      	ldrb	r3, [r7, #7]
 800fe54:	f003 0311 	and.w	r3, r3, #17
 800fe58:	2b00      	cmp	r3, #0
 800fe5a:	d019      	beq.n	800fe90 <write_map+0x208>
			map[mouse.y][mouse.x - 1] |= 0x44;				//a西側の区画から見て東壁ありを書き込む
 800fe5c:	4b1c      	ldr	r3, [pc, #112]	; (800fed0 <write_map+0x248>)
 800fe5e:	785b      	ldrb	r3, [r3, #1]
 800fe60:	b2dc      	uxtb	r4, r3
 800fe62:	4622      	mov	r2, r4
 800fe64:	4b1a      	ldr	r3, [pc, #104]	; (800fed0 <write_map+0x248>)
 800fe66:	781b      	ldrb	r3, [r3, #0]
 800fe68:	b2d8      	uxtb	r0, r3
 800fe6a:	4603      	mov	r3, r0
 800fe6c:	3b01      	subs	r3, #1
 800fe6e:	4919      	ldr	r1, [pc, #100]	; (800fed4 <write_map+0x24c>)
 800fe70:	0112      	lsls	r2, r2, #4
 800fe72:	440a      	add	r2, r1
 800fe74:	4413      	add	r3, r2
 800fe76:	781a      	ldrb	r2, [r3, #0]
 800fe78:	4603      	mov	r3, r0
 800fe7a:	3b01      	subs	r3, #1
 800fe7c:	f042 0244 	orr.w	r2, r2, #68	; 0x44
 800fe80:	b2d0      	uxtb	r0, r2
 800fe82:	4914      	ldr	r1, [pc, #80]	; (800fed4 <write_map+0x24c>)
 800fe84:	0122      	lsls	r2, r4, #4
 800fe86:	440a      	add	r2, r1
 800fe88:	4413      	add	r3, r2
 800fe8a:	4602      	mov	r2, r0
 800fe8c:	701a      	strb	r2, [r3, #0]
		}else{												//a西壁がない場合
			map[mouse.y][mouse.x - 1] &= 0xBB;				//a西側の区画から見て東側なしを書き込む
		}
	}
}
 800fe8e:	e018      	b.n	800fec2 <write_map+0x23a>
			map[mouse.y][mouse.x - 1] &= 0xBB;				//a西側の区画から見て東側なしを書き込む
 800fe90:	4b0f      	ldr	r3, [pc, #60]	; (800fed0 <write_map+0x248>)
 800fe92:	785b      	ldrb	r3, [r3, #1]
 800fe94:	b2dc      	uxtb	r4, r3
 800fe96:	4622      	mov	r2, r4
 800fe98:	4b0d      	ldr	r3, [pc, #52]	; (800fed0 <write_map+0x248>)
 800fe9a:	781b      	ldrb	r3, [r3, #0]
 800fe9c:	b2d8      	uxtb	r0, r3
 800fe9e:	4603      	mov	r3, r0
 800fea0:	3b01      	subs	r3, #1
 800fea2:	490c      	ldr	r1, [pc, #48]	; (800fed4 <write_map+0x24c>)
 800fea4:	0112      	lsls	r2, r2, #4
 800fea6:	440a      	add	r2, r1
 800fea8:	4413      	add	r3, r2
 800feaa:	781a      	ldrb	r2, [r3, #0]
 800feac:	4603      	mov	r3, r0
 800feae:	3b01      	subs	r3, #1
 800feb0:	f022 0244 	bic.w	r2, r2, #68	; 0x44
 800feb4:	b2d0      	uxtb	r0, r2
 800feb6:	4907      	ldr	r1, [pc, #28]	; (800fed4 <write_map+0x24c>)
 800feb8:	0122      	lsls	r2, r4, #4
 800feba:	440a      	add	r2, r1
 800febc:	4413      	add	r3, r2
 800febe:	4602      	mov	r2, r0
 800fec0:	701a      	strb	r2, [r3, #0]
}
 800fec2:	bf00      	nop
 800fec4:	3708      	adds	r7, #8
 800fec6:	46bd      	mov	sp, r7
 800fec8:	bc90      	pop	{r4, r7}
 800feca:	4770      	bx	lr
 800fecc:	200002c8 	.word	0x200002c8
 800fed0:	20000c0c 	.word	0x20000c0c
 800fed4:	200001ac 	.word	0x200001ac

0800fed8 <turn_dir>:
//turn_dir
//aマウスの方向を変更する
//a引数1：t_pat …… 回転方向(search.hでマクロ定義)
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void turn_dir(uint8_t t_pat, uint8_t t_mode){
 800fed8:	b480      	push	{r7}
 800feda:	b083      	sub	sp, #12
 800fedc:	af00      	add	r7, sp, #0
 800fede:	4603      	mov	r3, r0
 800fee0:	460a      	mov	r2, r1
 800fee2:	71fb      	strb	r3, [r7, #7]
 800fee4:	4613      	mov	r3, r2
 800fee6:	71bb      	strb	r3, [r7, #6]

	//====a方向を変更====
	if(t_mode < 2){												//4方位モード
 800fee8:	79bb      	ldrb	r3, [r7, #6]
 800feea:	2b01      	cmp	r3, #1
 800feec:	d837      	bhi.n	800ff5e <turn_dir+0x86>
		mouse.dir = (mouse.dir + t_pat) & 0x03;					//a指定された分mouse.dirを回転させる
 800feee:	4b5a      	ldr	r3, [pc, #360]	; (8010058 <turn_dir+0x180>)
 800fef0:	789b      	ldrb	r3, [r3, #2]
 800fef2:	b2da      	uxtb	r2, r3
 800fef4:	79fb      	ldrb	r3, [r7, #7]
 800fef6:	4413      	add	r3, r2
 800fef8:	b2db      	uxtb	r3, r3
 800fefa:	f003 0303 	and.w	r3, r3, #3
 800fefe:	b2da      	uxtb	r2, r3
 800ff00:	4b55      	ldr	r3, [pc, #340]	; (8010058 <turn_dir+0x180>)
 800ff02:	709a      	strb	r2, [r3, #2]
		if(t_mode == 1){
 800ff04:	79bb      	ldrb	r3, [r7, #6]
 800ff06:	2b01      	cmp	r3, #1
 800ff08:	f040 809f 	bne.w	801004a <turn_dir+0x172>
			if(t_pat == 0x01) target_degree_z -= 90.5;			//a目標角度+右90度
 800ff0c:	79fb      	ldrb	r3, [r7, #7]
 800ff0e:	2b01      	cmp	r3, #1
 800ff10:	d109      	bne.n	800ff26 <turn_dir+0x4e>
 800ff12:	4b52      	ldr	r3, [pc, #328]	; (801005c <turn_dir+0x184>)
 800ff14:	edd3 7a00 	vldr	s15, [r3]
 800ff18:	ed9f 7a51 	vldr	s14, [pc, #324]	; 8010060 <turn_dir+0x188>
 800ff1c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ff20:	4b4e      	ldr	r3, [pc, #312]	; (801005c <turn_dir+0x184>)
 800ff22:	edc3 7a00 	vstr	s15, [r3]
			if(t_pat == 0xff) target_degree_z += 90.5;			//a目標角度+左90度
 800ff26:	79fb      	ldrb	r3, [r7, #7]
 800ff28:	2bff      	cmp	r3, #255	; 0xff
 800ff2a:	d109      	bne.n	800ff40 <turn_dir+0x68>
 800ff2c:	4b4b      	ldr	r3, [pc, #300]	; (801005c <turn_dir+0x184>)
 800ff2e:	edd3 7a00 	vldr	s15, [r3]
 800ff32:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 8010060 <turn_dir+0x188>
 800ff36:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ff3a:	4b48      	ldr	r3, [pc, #288]	; (801005c <turn_dir+0x184>)
 800ff3c:	edc3 7a00 	vstr	s15, [r3]
			if(t_pat == 0x02) target_degree_z -= 181;			//a目標角度+右180度
 800ff40:	79fb      	ldrb	r3, [r7, #7]
 800ff42:	2b02      	cmp	r3, #2
 800ff44:	f040 8081 	bne.w	801004a <turn_dir+0x172>
 800ff48:	4b44      	ldr	r3, [pc, #272]	; (801005c <turn_dir+0x184>)
 800ff4a:	edd3 7a00 	vldr	s15, [r3]
 800ff4e:	ed9f 7a45 	vldr	s14, [pc, #276]	; 8010064 <turn_dir+0x18c>
 800ff52:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ff56:	4b41      	ldr	r3, [pc, #260]	; (801005c <turn_dir+0x184>)
 800ff58:	edc3 7a00 	vstr	s15, [r3]
			if(t_pat == 0xfe) target_degree_z += 90.5;			//a目標角度+左90度
			if(t_pat == 0xfd) target_degree_z += 135.75;		//a目標角度+右180度
			if(t_pat == 0xfc) target_degree_z += 181;			//a目標角度+右180度
		}
	}
}
 800ff5c:	e075      	b.n	801004a <turn_dir+0x172>
		mouse.dir = (mouse.dir + t_pat) & 0x07;					//a指定された分mouse.dirを回転させる
 800ff5e:	4b3e      	ldr	r3, [pc, #248]	; (8010058 <turn_dir+0x180>)
 800ff60:	789b      	ldrb	r3, [r3, #2]
 800ff62:	b2da      	uxtb	r2, r3
 800ff64:	79fb      	ldrb	r3, [r7, #7]
 800ff66:	4413      	add	r3, r2
 800ff68:	b2db      	uxtb	r3, r3
 800ff6a:	f003 0307 	and.w	r3, r3, #7
 800ff6e:	b2da      	uxtb	r2, r3
 800ff70:	4b39      	ldr	r3, [pc, #228]	; (8010058 <turn_dir+0x180>)
 800ff72:	709a      	strb	r2, [r3, #2]
		if(t_mode == 3){
 800ff74:	79bb      	ldrb	r3, [r7, #6]
 800ff76:	2b03      	cmp	r3, #3
 800ff78:	d167      	bne.n	801004a <turn_dir+0x172>
			if(t_pat == 0x01) target_degree_z -= 45.25;			//a目標角度+右90度
 800ff7a:	79fb      	ldrb	r3, [r7, #7]
 800ff7c:	2b01      	cmp	r3, #1
 800ff7e:	d109      	bne.n	800ff94 <turn_dir+0xbc>
 800ff80:	4b36      	ldr	r3, [pc, #216]	; (801005c <turn_dir+0x184>)
 800ff82:	edd3 7a00 	vldr	s15, [r3]
 800ff86:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8010068 <turn_dir+0x190>
 800ff8a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ff8e:	4b33      	ldr	r3, [pc, #204]	; (801005c <turn_dir+0x184>)
 800ff90:	edc3 7a00 	vstr	s15, [r3]
			if(t_pat == 0x02) target_degree_z -= 90.5;			//a目標角度+左90度
 800ff94:	79fb      	ldrb	r3, [r7, #7]
 800ff96:	2b02      	cmp	r3, #2
 800ff98:	d109      	bne.n	800ffae <turn_dir+0xd6>
 800ff9a:	4b30      	ldr	r3, [pc, #192]	; (801005c <turn_dir+0x184>)
 800ff9c:	edd3 7a00 	vldr	s15, [r3]
 800ffa0:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8010060 <turn_dir+0x188>
 800ffa4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ffa8:	4b2c      	ldr	r3, [pc, #176]	; (801005c <turn_dir+0x184>)
 800ffaa:	edc3 7a00 	vstr	s15, [r3]
			if(t_pat == 0x03) target_degree_z -= 135.75;		//a目標角度+右180度
 800ffae:	79fb      	ldrb	r3, [r7, #7]
 800ffb0:	2b03      	cmp	r3, #3
 800ffb2:	d109      	bne.n	800ffc8 <turn_dir+0xf0>
 800ffb4:	4b29      	ldr	r3, [pc, #164]	; (801005c <turn_dir+0x184>)
 800ffb6:	edd3 7a00 	vldr	s15, [r3]
 800ffba:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 801006c <turn_dir+0x194>
 800ffbe:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ffc2:	4b26      	ldr	r3, [pc, #152]	; (801005c <turn_dir+0x184>)
 800ffc4:	edc3 7a00 	vstr	s15, [r3]
			if(t_pat == 0x04) target_degree_z -= 181;			//a目標角度+右180度
 800ffc8:	79fb      	ldrb	r3, [r7, #7]
 800ffca:	2b04      	cmp	r3, #4
 800ffcc:	d109      	bne.n	800ffe2 <turn_dir+0x10a>
 800ffce:	4b23      	ldr	r3, [pc, #140]	; (801005c <turn_dir+0x184>)
 800ffd0:	edd3 7a00 	vldr	s15, [r3]
 800ffd4:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8010064 <turn_dir+0x18c>
 800ffd8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ffdc:	4b1f      	ldr	r3, [pc, #124]	; (801005c <turn_dir+0x184>)
 800ffde:	edc3 7a00 	vstr	s15, [r3]
			if(t_pat == 0xff) target_degree_z += 45.25;			//a目標角度+右90度
 800ffe2:	79fb      	ldrb	r3, [r7, #7]
 800ffe4:	2bff      	cmp	r3, #255	; 0xff
 800ffe6:	d109      	bne.n	800fffc <turn_dir+0x124>
 800ffe8:	4b1c      	ldr	r3, [pc, #112]	; (801005c <turn_dir+0x184>)
 800ffea:	edd3 7a00 	vldr	s15, [r3]
 800ffee:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8010068 <turn_dir+0x190>
 800fff2:	ee77 7a87 	vadd.f32	s15, s15, s14
 800fff6:	4b19      	ldr	r3, [pc, #100]	; (801005c <turn_dir+0x184>)
 800fff8:	edc3 7a00 	vstr	s15, [r3]
			if(t_pat == 0xfe) target_degree_z += 90.5;			//a目標角度+左90度
 800fffc:	79fb      	ldrb	r3, [r7, #7]
 800fffe:	2bfe      	cmp	r3, #254	; 0xfe
 8010000:	d109      	bne.n	8010016 <turn_dir+0x13e>
 8010002:	4b16      	ldr	r3, [pc, #88]	; (801005c <turn_dir+0x184>)
 8010004:	edd3 7a00 	vldr	s15, [r3]
 8010008:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8010060 <turn_dir+0x188>
 801000c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8010010:	4b12      	ldr	r3, [pc, #72]	; (801005c <turn_dir+0x184>)
 8010012:	edc3 7a00 	vstr	s15, [r3]
			if(t_pat == 0xfd) target_degree_z += 135.75;		//a目標角度+右180度
 8010016:	79fb      	ldrb	r3, [r7, #7]
 8010018:	2bfd      	cmp	r3, #253	; 0xfd
 801001a:	d109      	bne.n	8010030 <turn_dir+0x158>
 801001c:	4b0f      	ldr	r3, [pc, #60]	; (801005c <turn_dir+0x184>)
 801001e:	edd3 7a00 	vldr	s15, [r3]
 8010022:	ed9f 7a12 	vldr	s14, [pc, #72]	; 801006c <turn_dir+0x194>
 8010026:	ee77 7a87 	vadd.f32	s15, s15, s14
 801002a:	4b0c      	ldr	r3, [pc, #48]	; (801005c <turn_dir+0x184>)
 801002c:	edc3 7a00 	vstr	s15, [r3]
			if(t_pat == 0xfc) target_degree_z += 181;			//a目標角度+右180度
 8010030:	79fb      	ldrb	r3, [r7, #7]
 8010032:	2bfc      	cmp	r3, #252	; 0xfc
 8010034:	d109      	bne.n	801004a <turn_dir+0x172>
 8010036:	4b09      	ldr	r3, [pc, #36]	; (801005c <turn_dir+0x184>)
 8010038:	edd3 7a00 	vldr	s15, [r3]
 801003c:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8010064 <turn_dir+0x18c>
 8010040:	ee77 7a87 	vadd.f32	s15, s15, s14
 8010044:	4b05      	ldr	r3, [pc, #20]	; (801005c <turn_dir+0x184>)
 8010046:	edc3 7a00 	vstr	s15, [r3]
}
 801004a:	bf00      	nop
 801004c:	370c      	adds	r7, #12
 801004e:	46bd      	mov	sp, r7
 8010050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010054:	4770      	bx	lr
 8010056:	bf00      	nop
 8010058:	20000c0c 	.word	0x20000c0c
 801005c:	20000bf8 	.word	0x20000bf8
 8010060:	42b50000 	.word	0x42b50000
 8010064:	43350000 	.word	0x43350000
 8010068:	42350000 	.word	0x42350000
 801006c:	4307c000 	.word	0x4307c000

08010070 <make_smap>:
//make_smap
//a歩数マップを作成する
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void make_smap(void){
 8010070:	b590      	push	{r4, r7, lr}
 8010072:	b08f      	sub	sp, #60	; 0x3c
 8010074:	af00      	add	r7, sp, #0
	//====a変数宣言====
	uint8_t x, y;											//for文用変数
	uint8_t m_temp_sample[16];

	//====a歩数マップのクリア====
	for(y = 0; y <= 15; y++){								//a各Y座標で実行
 8010076:	2300      	movs	r3, #0
 8010078:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 801007c:	e01c      	b.n	80100b8 <make_smap+0x48>
		for(x = 0; x <= 15; x++){							//a各X座標で実行
 801007e:	2300      	movs	r3, #0
 8010080:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8010084:	e00f      	b.n	80100a6 <make_smap+0x36>
			smap[y][x] = 0x03e7;							//a未記入部分は歩数最大とする
 8010086:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 801008a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801008e:	49be      	ldr	r1, [pc, #760]	; (8010388 <make_smap+0x318>)
 8010090:	0112      	lsls	r2, r2, #4
 8010092:	4413      	add	r3, r2
 8010094:	f240 32e7 	movw	r2, #999	; 0x3e7
 8010098:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for(x = 0; x <= 15; x++){							//a各X座標で実行
 801009c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80100a0:	3301      	adds	r3, #1
 80100a2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80100a6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80100aa:	2b0f      	cmp	r3, #15
 80100ac:	d9eb      	bls.n	8010086 <make_smap+0x16>
	for(y = 0; y <= 15; y++){								//a各Y座標で実行
 80100ae:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80100b2:	3301      	adds	r3, #1
 80100b4:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 80100b8:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80100bc:	2b0f      	cmp	r3, #15
 80100be:	d9de      	bls.n	801007e <make_smap+0xe>
		}
	}

	//====aゴール座標を0にする====
	m_step = 0;												//a歩数カウンタを0にする
 80100c0:	4bb2      	ldr	r3, [pc, #712]	; (801038c <make_smap+0x31c>)
 80100c2:	2200      	movs	r2, #0
 80100c4:	801a      	strh	r2, [r3, #0]

	for(int j=0; j<goal_mode; j++){
 80100c6:	2300      	movs	r3, #0
 80100c8:	633b      	str	r3, [r7, #48]	; 0x30
 80100ca:	e01e      	b.n	801010a <make_smap+0x9a>
		for(int k=0; k<goal_mode; k++){
 80100cc:	2300      	movs	r3, #0
 80100ce:	62fb      	str	r3, [r7, #44]	; 0x2c
 80100d0:	e012      	b.n	80100f8 <make_smap+0x88>
		smap[goal_y+j][goal_x+k] = 0;
 80100d2:	4baf      	ldr	r3, [pc, #700]	; (8010390 <make_smap+0x320>)
 80100d4:	781b      	ldrb	r3, [r3, #0]
 80100d6:	461a      	mov	r2, r3
 80100d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80100da:	441a      	add	r2, r3
 80100dc:	4bad      	ldr	r3, [pc, #692]	; (8010394 <make_smap+0x324>)
 80100de:	781b      	ldrb	r3, [r3, #0]
 80100e0:	4619      	mov	r1, r3
 80100e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80100e4:	440b      	add	r3, r1
 80100e6:	49a8      	ldr	r1, [pc, #672]	; (8010388 <make_smap+0x318>)
 80100e8:	0112      	lsls	r2, r2, #4
 80100ea:	4413      	add	r3, r2
 80100ec:	2200      	movs	r2, #0
 80100ee:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for(int k=0; k<goal_mode; k++){
 80100f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80100f4:	3301      	adds	r3, #1
 80100f6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80100f8:	4ba7      	ldr	r3, [pc, #668]	; (8010398 <make_smap+0x328>)
 80100fa:	781b      	ldrb	r3, [r3, #0]
 80100fc:	461a      	mov	r2, r3
 80100fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010100:	4293      	cmp	r3, r2
 8010102:	dbe6      	blt.n	80100d2 <make_smap+0x62>
	for(int j=0; j<goal_mode; j++){
 8010104:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010106:	3301      	adds	r3, #1
 8010108:	633b      	str	r3, [r7, #48]	; 0x30
 801010a:	4ba3      	ldr	r3, [pc, #652]	; (8010398 <make_smap+0x328>)
 801010c:	781b      	ldrb	r3, [r3, #0]
 801010e:	461a      	mov	r2, r3
 8010110:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010112:	4293      	cmp	r3, r2
 8010114:	dbda      	blt.n	80100cc <make_smap+0x5c>
	}

//	smap[goal_y][goal_x] = 0;

	//====a歩数カウンタの重みづけ====
	int straight = 2;
 8010116:	2302      	movs	r3, #2
 8010118:	617b      	str	r3, [r7, #20]
	int turn = 5;
 801011a:	2305      	movs	r3, #5
 801011c:	613b      	str	r3, [r7, #16]
	full_led_write(GREEN);
 801011e:	2002      	movs	r0, #2
 8010120:	f001 fd6e 	bl	8011c00 <full_led_write>
	//====a自分の座標にたどり着くまでループ====
	do{
		//----aマップ全域を捜索----
		for(y = 0; y <= 15; y++){							//a各Y座標で実行
 8010124:	2300      	movs	r3, #0
 8010126:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 801012a:	e334      	b.n	8010796 <make_smap+0x726>
			for(x = 0; x <= 15; x++){						//a各X座標で実行
 801012c:	2300      	movs	r3, #0
 801012e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8010132:	e326      	b.n	8010782 <make_smap+0x712>
				//----a現在最大の歩数を発見したとき----
				if(smap[y][x] == m_step){					//a歩数カウンタm_stepの値が現在最大の歩数
 8010134:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8010138:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801013c:	4992      	ldr	r1, [pc, #584]	; (8010388 <make_smap+0x318>)
 801013e:	0112      	lsls	r2, r2, #4
 8010140:	4413      	add	r3, r2
 8010142:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8010146:	4b91      	ldr	r3, [pc, #580]	; (801038c <make_smap+0x31c>)
 8010148:	881b      	ldrh	r3, [r3, #0]
 801014a:	429a      	cmp	r2, r3
 801014c:	f040 8314 	bne.w	8010778 <make_smap+0x708>
					uint8_t m_temp = map[y][x];				//map配列からマップデータを取り出す
 8010150:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8010154:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010158:	4990      	ldr	r1, [pc, #576]	; (801039c <make_smap+0x32c>)
 801015a:	0112      	lsls	r2, r2, #4
 801015c:	440a      	add	r2, r1
 801015e:	4413      	add	r3, r2
 8010160:	781b      	ldrb	r3, [r3, #0]
 8010162:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
					if(MF.FLAG.SCND){						//a二次走行用のマップを作成する場合（二次走行時はMF.FLAG.SCNDが立っている）
 8010166:	4b8e      	ldr	r3, [pc, #568]	; (80103a0 <make_smap+0x330>)
 8010168:	881b      	ldrh	r3, [r3, #0]
 801016a:	f3c3 1340 	ubfx	r3, r3, #5, #1
 801016e:	b2db      	uxtb	r3, r3
 8010170:	2b00      	cmp	r3, #0
 8010172:	d004      	beq.n	801017e <make_smap+0x10e>
						m_temp >>= 4;						//a上位4bitを使うので4bit分右にシフトさせる
 8010174:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8010178:	091b      	lsrs	r3, r3, #4
 801017a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
					}
					//----a北壁についての処理----
					if(!(m_temp & 0x08) && y != 15){		//a北壁がなく現在最北端でないとき
 801017e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8010182:	f003 0308 	and.w	r3, r3, #8
 8010186:	2b00      	cmp	r3, #0
 8010188:	f040 80b4 	bne.w	80102f4 <make_smap+0x284>
 801018c:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8010190:	2b0f      	cmp	r3, #15
 8010192:	f000 80af 	beq.w	80102f4 <make_smap+0x284>
						if(smap[y+1][x] >= (smap[y][x]+turn)){		//a北側が記入後より大きいなら
 8010196:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 801019a:	1c5a      	adds	r2, r3, #1
 801019c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80101a0:	4979      	ldr	r1, [pc, #484]	; (8010388 <make_smap+0x318>)
 80101a2:	0112      	lsls	r2, r2, #4
 80101a4:	4413      	add	r3, r2
 80101a6:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80101aa:	4618      	mov	r0, r3
 80101ac:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 80101b0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80101b4:	4974      	ldr	r1, [pc, #464]	; (8010388 <make_smap+0x318>)
 80101b6:	0112      	lsls	r2, r2, #4
 80101b8:	4413      	add	r3, r2
 80101ba:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80101be:	461a      	mov	r2, r3
 80101c0:	693b      	ldr	r3, [r7, #16]
 80101c2:	4413      	add	r3, r2
 80101c4:	4298      	cmp	r0, r3
 80101c6:	f2c0 8095 	blt.w	80102f4 <make_smap+0x284>
							smap[y+1][x] = smap[y][x] + turn;		//a次の歩数を書き込む
 80101ca:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 80101ce:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80101d2:	496d      	ldr	r1, [pc, #436]	; (8010388 <make_smap+0x318>)
 80101d4:	0112      	lsls	r2, r2, #4
 80101d6:	4413      	add	r3, r2
 80101d8:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 80101dc:	693b      	ldr	r3, [r7, #16]
 80101de:	b299      	uxth	r1, r3
 80101e0:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80101e4:	1c5a      	adds	r2, r3, #1
 80101e6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80101ea:	4401      	add	r1, r0
 80101ec:	b288      	uxth	r0, r1
 80101ee:	4966      	ldr	r1, [pc, #408]	; (8010388 <make_smap+0x318>)
 80101f0:	0112      	lsls	r2, r2, #4
 80101f2:	4413      	add	r3, r2
 80101f4:	4602      	mov	r2, r0
 80101f6:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
							if(MF.FLAG.STRAIGHT){
 80101fa:	4b69      	ldr	r3, [pc, #420]	; (80103a0 <make_smap+0x330>)
 80101fc:	881b      	ldrh	r3, [r3, #0]
 80101fe:	f3c3 2380 	ubfx	r3, r3, #10, #1
 8010202:	b2db      	uxtb	r3, r3
 8010204:	2b00      	cmp	r3, #0
 8010206:	d075      	beq.n	80102f4 <make_smap+0x284>
								//----a直線優先処理----
								for(int k=1; k<16-y; k++) {					//a現在座標から見て北のマスすべてにおいて
 8010208:	2301      	movs	r3, #1
 801020a:	627b      	str	r3, [r7, #36]	; 0x24
 801020c:	e06b      	b.n	80102e6 <make_smap+0x276>
									m_temp_sample[k] = map[y+k][x];				//map配列からマップデータを取り出す
 801020e:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8010212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010214:	441a      	add	r2, r3
 8010216:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801021a:	4960      	ldr	r1, [pc, #384]	; (801039c <make_smap+0x32c>)
 801021c:	0112      	lsls	r2, r2, #4
 801021e:	440a      	add	r2, r1
 8010220:	4413      	add	r3, r2
 8010222:	7819      	ldrb	r1, [r3, #0]
 8010224:	463a      	mov	r2, r7
 8010226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010228:	4413      	add	r3, r2
 801022a:	460a      	mov	r2, r1
 801022c:	701a      	strb	r2, [r3, #0]
									if(MF.FLAG.SCND) m_temp_sample[k] >>= 4;		//a二次走行用のマップを作成する場合上位4bitを使うので4bit分右にシフトさせる
 801022e:	4b5c      	ldr	r3, [pc, #368]	; (80103a0 <make_smap+0x330>)
 8010230:	881b      	ldrh	r3, [r3, #0]
 8010232:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8010236:	b2db      	uxtb	r3, r3
 8010238:	2b00      	cmp	r3, #0
 801023a:	d00a      	beq.n	8010252 <make_smap+0x1e2>
 801023c:	463a      	mov	r2, r7
 801023e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010240:	4413      	add	r3, r2
 8010242:	781b      	ldrb	r3, [r3, #0]
 8010244:	091b      	lsrs	r3, r3, #4
 8010246:	b2d9      	uxtb	r1, r3
 8010248:	463a      	mov	r2, r7
 801024a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801024c:	4413      	add	r3, r2
 801024e:	460a      	mov	r2, r1
 8010250:	701a      	strb	r2, [r3, #0]
									if(!(m_temp_sample[k] & 0x08) && (y+k) != 15) {		//a北壁がなく現在最北端でないとき
 8010252:	463a      	mov	r2, r7
 8010254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010256:	4413      	add	r3, r2
 8010258:	781b      	ldrb	r3, [r3, #0]
 801025a:	f003 0308 	and.w	r3, r3, #8
 801025e:	2b00      	cmp	r3, #0
 8010260:	d148      	bne.n	80102f4 <make_smap+0x284>
 8010262:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8010266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010268:	4413      	add	r3, r2
 801026a:	2b0f      	cmp	r3, #15
 801026c:	d042      	beq.n	80102f4 <make_smap+0x284>
										if(smap[y+k+1][x] >= (smap[y+k][x]+straight)){		//a北側が記入後より大きいなら
 801026e:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8010272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010274:	4413      	add	r3, r2
 8010276:	1c5a      	adds	r2, r3, #1
 8010278:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801027c:	4942      	ldr	r1, [pc, #264]	; (8010388 <make_smap+0x318>)
 801027e:	0112      	lsls	r2, r2, #4
 8010280:	4413      	add	r3, r2
 8010282:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8010286:	4618      	mov	r0, r3
 8010288:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 801028c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801028e:	441a      	add	r2, r3
 8010290:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010294:	493c      	ldr	r1, [pc, #240]	; (8010388 <make_smap+0x318>)
 8010296:	0112      	lsls	r2, r2, #4
 8010298:	4413      	add	r3, r2
 801029a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 801029e:	461a      	mov	r2, r3
 80102a0:	697b      	ldr	r3, [r7, #20]
 80102a2:	4413      	add	r3, r2
 80102a4:	4298      	cmp	r0, r3
 80102a6:	db1b      	blt.n	80102e0 <make_smap+0x270>
											smap[y+k+1][x] = smap[y+k][x] + straight;		//a直線分インクリメントした値を次のマスの歩数マップに書き込む
 80102a8:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 80102ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80102ae:	441a      	add	r2, r3
 80102b0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80102b4:	4934      	ldr	r1, [pc, #208]	; (8010388 <make_smap+0x318>)
 80102b6:	0112      	lsls	r2, r2, #4
 80102b8:	4413      	add	r3, r2
 80102ba:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 80102be:	697b      	ldr	r3, [r7, #20]
 80102c0:	b299      	uxth	r1, r3
 80102c2:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 80102c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80102c8:	4413      	add	r3, r2
 80102ca:	1c5a      	adds	r2, r3, #1
 80102cc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80102d0:	4401      	add	r1, r0
 80102d2:	b288      	uxth	r0, r1
 80102d4:	492c      	ldr	r1, [pc, #176]	; (8010388 <make_smap+0x318>)
 80102d6:	0112      	lsls	r2, r2, #4
 80102d8:	4413      	add	r3, r2
 80102da:	4602      	mov	r2, r0
 80102dc:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
								for(int k=1; k<16-y; k++) {					//a現在座標から見て北のマスすべてにおいて
 80102e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80102e2:	3301      	adds	r3, #1
 80102e4:	627b      	str	r3, [r7, #36]	; 0x24
 80102e6:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80102ea:	f1c3 0310 	rsb	r3, r3, #16
 80102ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80102f0:	429a      	cmp	r2, r3
 80102f2:	db8c      	blt.n	801020e <make_smap+0x19e>
								}
							}
						}
					}
					//----a東壁についての処理----
					if(!(m_temp & 0x04) && x != 15){		//a東壁がなく現在最東端でないとき
 80102f4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80102f8:	f003 0304 	and.w	r3, r3, #4
 80102fc:	2b00      	cmp	r3, #0
 80102fe:	f040 80c4 	bne.w	801048a <make_smap+0x41a>
 8010302:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010306:	2b0f      	cmp	r3, #15
 8010308:	f000 80bf 	beq.w	801048a <make_smap+0x41a>
						if(smap[y][x+1] >= (smap[y][x]+turn)){	//a東側が記入後より大きいなら
 801030c:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8010310:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010314:	3301      	adds	r3, #1
 8010316:	491c      	ldr	r1, [pc, #112]	; (8010388 <make_smap+0x318>)
 8010318:	0112      	lsls	r2, r2, #4
 801031a:	4413      	add	r3, r2
 801031c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8010320:	4618      	mov	r0, r3
 8010322:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8010326:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801032a:	4917      	ldr	r1, [pc, #92]	; (8010388 <make_smap+0x318>)
 801032c:	0112      	lsls	r2, r2, #4
 801032e:	4413      	add	r3, r2
 8010330:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8010334:	461a      	mov	r2, r3
 8010336:	693b      	ldr	r3, [r7, #16]
 8010338:	4413      	add	r3, r2
 801033a:	4298      	cmp	r0, r3
 801033c:	f2c0 80a5 	blt.w	801048a <make_smap+0x41a>
							smap[y][x+1] = smap[y][x] + turn;	//a次の歩数を書き込む
 8010340:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8010344:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010348:	490f      	ldr	r1, [pc, #60]	; (8010388 <make_smap+0x318>)
 801034a:	0112      	lsls	r2, r2, #4
 801034c:	4413      	add	r3, r2
 801034e:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 8010352:	693b      	ldr	r3, [r7, #16]
 8010354:	b299      	uxth	r1, r3
 8010356:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 801035a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801035e:	3301      	adds	r3, #1
 8010360:	4401      	add	r1, r0
 8010362:	b288      	uxth	r0, r1
 8010364:	4908      	ldr	r1, [pc, #32]	; (8010388 <make_smap+0x318>)
 8010366:	0112      	lsls	r2, r2, #4
 8010368:	4413      	add	r3, r2
 801036a:	4602      	mov	r2, r0
 801036c:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
							if(MF.FLAG.STRAIGHT){
 8010370:	4b0b      	ldr	r3, [pc, #44]	; (80103a0 <make_smap+0x330>)
 8010372:	881b      	ldrh	r3, [r3, #0]
 8010374:	f3c3 2380 	ubfx	r3, r3, #10, #1
 8010378:	b2db      	uxtb	r3, r3
 801037a:	2b00      	cmp	r3, #0
 801037c:	f000 8085 	beq.w	801048a <make_smap+0x41a>
								//----a直線優先処理----
								for(int k=1; k<16-x; k++) {					//a現在座標から見て東のマスすべてにおいて
 8010380:	2301      	movs	r3, #1
 8010382:	623b      	str	r3, [r7, #32]
 8010384:	e07a      	b.n	801047c <make_smap+0x40c>
 8010386:	bf00      	nop
 8010388:	20000d60 	.word	0x20000d60
 801038c:	2000034e 	.word	0x2000034e
 8010390:	20000b4c 	.word	0x20000b4c
 8010394:	20000bb0 	.word	0x20000bb0
 8010398:	20000bb1 	.word	0x20000bb1
 801039c:	200001ac 	.word	0x200001ac
 80103a0:	20000f68 	.word	0x20000f68
									m_temp_sample[k] = map[y][x+k];				//map配列からマップデータを取り出す
 80103a4:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 80103a8:	f897 1037 	ldrb.w	r1, [r7, #55]	; 0x37
 80103ac:	6a3b      	ldr	r3, [r7, #32]
 80103ae:	440b      	add	r3, r1
 80103b0:	49b6      	ldr	r1, [pc, #728]	; (801068c <make_smap+0x61c>)
 80103b2:	0112      	lsls	r2, r2, #4
 80103b4:	440a      	add	r2, r1
 80103b6:	4413      	add	r3, r2
 80103b8:	7819      	ldrb	r1, [r3, #0]
 80103ba:	463a      	mov	r2, r7
 80103bc:	6a3b      	ldr	r3, [r7, #32]
 80103be:	4413      	add	r3, r2
 80103c0:	460a      	mov	r2, r1
 80103c2:	701a      	strb	r2, [r3, #0]
									if(MF.FLAG.SCND) m_temp_sample[k] >>= 4;		//a二次走行用のマップを作成する場合上位4bitを使うので4bit分右にシフトさせる
 80103c4:	4bb2      	ldr	r3, [pc, #712]	; (8010690 <make_smap+0x620>)
 80103c6:	881b      	ldrh	r3, [r3, #0]
 80103c8:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80103cc:	b2db      	uxtb	r3, r3
 80103ce:	2b00      	cmp	r3, #0
 80103d0:	d00a      	beq.n	80103e8 <make_smap+0x378>
 80103d2:	463a      	mov	r2, r7
 80103d4:	6a3b      	ldr	r3, [r7, #32]
 80103d6:	4413      	add	r3, r2
 80103d8:	781b      	ldrb	r3, [r3, #0]
 80103da:	091b      	lsrs	r3, r3, #4
 80103dc:	b2d9      	uxtb	r1, r3
 80103de:	463a      	mov	r2, r7
 80103e0:	6a3b      	ldr	r3, [r7, #32]
 80103e2:	4413      	add	r3, r2
 80103e4:	460a      	mov	r2, r1
 80103e6:	701a      	strb	r2, [r3, #0]
									if(!(m_temp_sample[k] & 0x04) && (x+k) != 15) {		//a東壁がなく現在最東端でないとき
 80103e8:	463a      	mov	r2, r7
 80103ea:	6a3b      	ldr	r3, [r7, #32]
 80103ec:	4413      	add	r3, r2
 80103ee:	781b      	ldrb	r3, [r3, #0]
 80103f0:	f003 0304 	and.w	r3, r3, #4
 80103f4:	2b00      	cmp	r3, #0
 80103f6:	d148      	bne.n	801048a <make_smap+0x41a>
 80103f8:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80103fc:	6a3b      	ldr	r3, [r7, #32]
 80103fe:	4413      	add	r3, r2
 8010400:	2b0f      	cmp	r3, #15
 8010402:	d042      	beq.n	801048a <make_smap+0x41a>
										if(smap[y][x+k+1] >= (smap[y][x+k]+straight)){		//a東側が記入後より大きいなら
 8010404:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8010408:	f897 1037 	ldrb.w	r1, [r7, #55]	; 0x37
 801040c:	6a3b      	ldr	r3, [r7, #32]
 801040e:	440b      	add	r3, r1
 8010410:	3301      	adds	r3, #1
 8010412:	49a0      	ldr	r1, [pc, #640]	; (8010694 <make_smap+0x624>)
 8010414:	0112      	lsls	r2, r2, #4
 8010416:	4413      	add	r3, r2
 8010418:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 801041c:	4618      	mov	r0, r3
 801041e:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8010422:	f897 1037 	ldrb.w	r1, [r7, #55]	; 0x37
 8010426:	6a3b      	ldr	r3, [r7, #32]
 8010428:	440b      	add	r3, r1
 801042a:	499a      	ldr	r1, [pc, #616]	; (8010694 <make_smap+0x624>)
 801042c:	0112      	lsls	r2, r2, #4
 801042e:	4413      	add	r3, r2
 8010430:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8010434:	461a      	mov	r2, r3
 8010436:	697b      	ldr	r3, [r7, #20]
 8010438:	4413      	add	r3, r2
 801043a:	4298      	cmp	r0, r3
 801043c:	db1b      	blt.n	8010476 <make_smap+0x406>
											smap[y][x+k+1] = smap[y][x+k] + straight;		//a直線分インクリメントした値を次のマスの歩数マップに書き込む
 801043e:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8010442:	f897 1037 	ldrb.w	r1, [r7, #55]	; 0x37
 8010446:	6a3b      	ldr	r3, [r7, #32]
 8010448:	440b      	add	r3, r1
 801044a:	4992      	ldr	r1, [pc, #584]	; (8010694 <make_smap+0x624>)
 801044c:	0112      	lsls	r2, r2, #4
 801044e:	4413      	add	r3, r2
 8010450:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 8010454:	697b      	ldr	r3, [r7, #20]
 8010456:	b299      	uxth	r1, r3
 8010458:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 801045c:	f897 4037 	ldrb.w	r4, [r7, #55]	; 0x37
 8010460:	6a3b      	ldr	r3, [r7, #32]
 8010462:	4423      	add	r3, r4
 8010464:	3301      	adds	r3, #1
 8010466:	4401      	add	r1, r0
 8010468:	b288      	uxth	r0, r1
 801046a:	498a      	ldr	r1, [pc, #552]	; (8010694 <make_smap+0x624>)
 801046c:	0112      	lsls	r2, r2, #4
 801046e:	4413      	add	r3, r2
 8010470:	4602      	mov	r2, r0
 8010472:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
								for(int k=1; k<16-x; k++) {					//a現在座標から見て東のマスすべてにおいて
 8010476:	6a3b      	ldr	r3, [r7, #32]
 8010478:	3301      	adds	r3, #1
 801047a:	623b      	str	r3, [r7, #32]
 801047c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010480:	f1c3 0310 	rsb	r3, r3, #16
 8010484:	6a3a      	ldr	r2, [r7, #32]
 8010486:	429a      	cmp	r2, r3
 8010488:	db8c      	blt.n	80103a4 <make_smap+0x334>
								}
							}
						}
					}
					//----a南壁についての処理----
					if(!(m_temp & 0x02) && y != 0){			//a南壁がなく現在最南端でないとき
 801048a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801048e:	f003 0302 	and.w	r3, r3, #2
 8010492:	2b00      	cmp	r3, #0
 8010494:	f040 80b1 	bne.w	80105fa <make_smap+0x58a>
 8010498:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 801049c:	2b00      	cmp	r3, #0
 801049e:	f000 80ac 	beq.w	80105fa <make_smap+0x58a>
						if(smap[y-1][x] >= (smap[y][x]+turn)){	//a南側が記入後より大きいなら
 80104a2:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80104a6:	1e5a      	subs	r2, r3, #1
 80104a8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80104ac:	4979      	ldr	r1, [pc, #484]	; (8010694 <make_smap+0x624>)
 80104ae:	0112      	lsls	r2, r2, #4
 80104b0:	4413      	add	r3, r2
 80104b2:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80104b6:	4618      	mov	r0, r3
 80104b8:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 80104bc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80104c0:	4974      	ldr	r1, [pc, #464]	; (8010694 <make_smap+0x624>)
 80104c2:	0112      	lsls	r2, r2, #4
 80104c4:	4413      	add	r3, r2
 80104c6:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80104ca:	461a      	mov	r2, r3
 80104cc:	693b      	ldr	r3, [r7, #16]
 80104ce:	4413      	add	r3, r2
 80104d0:	4298      	cmp	r0, r3
 80104d2:	f2c0 8092 	blt.w	80105fa <make_smap+0x58a>
							smap[y-1][x] = smap[y][x] + turn;	//a次の歩数を書き込む
 80104d6:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 80104da:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80104de:	496d      	ldr	r1, [pc, #436]	; (8010694 <make_smap+0x624>)
 80104e0:	0112      	lsls	r2, r2, #4
 80104e2:	4413      	add	r3, r2
 80104e4:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 80104e8:	693b      	ldr	r3, [r7, #16]
 80104ea:	b299      	uxth	r1, r3
 80104ec:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80104f0:	1e5a      	subs	r2, r3, #1
 80104f2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80104f6:	4401      	add	r1, r0
 80104f8:	b288      	uxth	r0, r1
 80104fa:	4966      	ldr	r1, [pc, #408]	; (8010694 <make_smap+0x624>)
 80104fc:	0112      	lsls	r2, r2, #4
 80104fe:	4413      	add	r3, r2
 8010500:	4602      	mov	r2, r0
 8010502:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
							if(MF.FLAG.STRAIGHT){
 8010506:	4b62      	ldr	r3, [pc, #392]	; (8010690 <make_smap+0x620>)
 8010508:	881b      	ldrh	r3, [r3, #0]
 801050a:	f3c3 2380 	ubfx	r3, r3, #10, #1
 801050e:	b2db      	uxtb	r3, r3
 8010510:	2b00      	cmp	r3, #0
 8010512:	d072      	beq.n	80105fa <make_smap+0x58a>
								//----a直線優先処理----
								for(int k=1; k<y; k++) {						//a現在座標から見て南のマスすべてにおいて
 8010514:	2301      	movs	r3, #1
 8010516:	61fb      	str	r3, [r7, #28]
 8010518:	e06a      	b.n	80105f0 <make_smap+0x580>
									m_temp_sample[k] = map[y-k][x];				//map配列からマップデータを取り出す
 801051a:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 801051e:	69fb      	ldr	r3, [r7, #28]
 8010520:	1ad2      	subs	r2, r2, r3
 8010522:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010526:	4959      	ldr	r1, [pc, #356]	; (801068c <make_smap+0x61c>)
 8010528:	0112      	lsls	r2, r2, #4
 801052a:	440a      	add	r2, r1
 801052c:	4413      	add	r3, r2
 801052e:	7819      	ldrb	r1, [r3, #0]
 8010530:	463a      	mov	r2, r7
 8010532:	69fb      	ldr	r3, [r7, #28]
 8010534:	4413      	add	r3, r2
 8010536:	460a      	mov	r2, r1
 8010538:	701a      	strb	r2, [r3, #0]
									if(MF.FLAG.SCND) m_temp_sample[k] >>= 4;		//a二次走行用のマップを作成する場合上位4bitを使うので4bit分右にシフトさせる
 801053a:	4b55      	ldr	r3, [pc, #340]	; (8010690 <make_smap+0x620>)
 801053c:	881b      	ldrh	r3, [r3, #0]
 801053e:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8010542:	b2db      	uxtb	r3, r3
 8010544:	2b00      	cmp	r3, #0
 8010546:	d00a      	beq.n	801055e <make_smap+0x4ee>
 8010548:	463a      	mov	r2, r7
 801054a:	69fb      	ldr	r3, [r7, #28]
 801054c:	4413      	add	r3, r2
 801054e:	781b      	ldrb	r3, [r3, #0]
 8010550:	091b      	lsrs	r3, r3, #4
 8010552:	b2d9      	uxtb	r1, r3
 8010554:	463a      	mov	r2, r7
 8010556:	69fb      	ldr	r3, [r7, #28]
 8010558:	4413      	add	r3, r2
 801055a:	460a      	mov	r2, r1
 801055c:	701a      	strb	r2, [r3, #0]
									if(!(m_temp_sample[k] & 0x02) && (y-k) != 0) {		//a南壁がなく現在最南端でないとき
 801055e:	463a      	mov	r2, r7
 8010560:	69fb      	ldr	r3, [r7, #28]
 8010562:	4413      	add	r3, r2
 8010564:	781b      	ldrb	r3, [r3, #0]
 8010566:	f003 0302 	and.w	r3, r3, #2
 801056a:	2b00      	cmp	r3, #0
 801056c:	d145      	bne.n	80105fa <make_smap+0x58a>
 801056e:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8010572:	69fa      	ldr	r2, [r7, #28]
 8010574:	429a      	cmp	r2, r3
 8010576:	d040      	beq.n	80105fa <make_smap+0x58a>
										if(smap[y-k-1][x] >= (smap[y-k][x]+straight)){		//a南側が記入後より大きいなら
 8010578:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 801057c:	69fb      	ldr	r3, [r7, #28]
 801057e:	1ad3      	subs	r3, r2, r3
 8010580:	1e5a      	subs	r2, r3, #1
 8010582:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010586:	4943      	ldr	r1, [pc, #268]	; (8010694 <make_smap+0x624>)
 8010588:	0112      	lsls	r2, r2, #4
 801058a:	4413      	add	r3, r2
 801058c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8010590:	4618      	mov	r0, r3
 8010592:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8010596:	69fb      	ldr	r3, [r7, #28]
 8010598:	1ad2      	subs	r2, r2, r3
 801059a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801059e:	493d      	ldr	r1, [pc, #244]	; (8010694 <make_smap+0x624>)
 80105a0:	0112      	lsls	r2, r2, #4
 80105a2:	4413      	add	r3, r2
 80105a4:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80105a8:	461a      	mov	r2, r3
 80105aa:	697b      	ldr	r3, [r7, #20]
 80105ac:	4413      	add	r3, r2
 80105ae:	4298      	cmp	r0, r3
 80105b0:	db1b      	blt.n	80105ea <make_smap+0x57a>
											smap[y-k-1][x] = smap[y-k][x] + straight;		//a直線分インクリメントした値を次のマスの歩数マップに書き込む
 80105b2:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 80105b6:	69fb      	ldr	r3, [r7, #28]
 80105b8:	1ad2      	subs	r2, r2, r3
 80105ba:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80105be:	4935      	ldr	r1, [pc, #212]	; (8010694 <make_smap+0x624>)
 80105c0:	0112      	lsls	r2, r2, #4
 80105c2:	4413      	add	r3, r2
 80105c4:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 80105c8:	697b      	ldr	r3, [r7, #20]
 80105ca:	b299      	uxth	r1, r3
 80105cc:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 80105d0:	69fb      	ldr	r3, [r7, #28]
 80105d2:	1ad3      	subs	r3, r2, r3
 80105d4:	1e5a      	subs	r2, r3, #1
 80105d6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80105da:	4401      	add	r1, r0
 80105dc:	b288      	uxth	r0, r1
 80105de:	492d      	ldr	r1, [pc, #180]	; (8010694 <make_smap+0x624>)
 80105e0:	0112      	lsls	r2, r2, #4
 80105e2:	4413      	add	r3, r2
 80105e4:	4602      	mov	r2, r0
 80105e6:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
								for(int k=1; k<y; k++) {						//a現在座標から見て南のマスすべてにおいて
 80105ea:	69fb      	ldr	r3, [r7, #28]
 80105ec:	3301      	adds	r3, #1
 80105ee:	61fb      	str	r3, [r7, #28]
 80105f0:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80105f4:	69fa      	ldr	r2, [r7, #28]
 80105f6:	429a      	cmp	r2, r3
 80105f8:	db8f      	blt.n	801051a <make_smap+0x4aa>
								}
							}
						}
					}
					//----a西壁についての処理----
					if(!(m_temp & 0x01) && x != 0){			//a西壁がなく現在最西端でないとき
 80105fa:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80105fe:	f003 0301 	and.w	r3, r3, #1
 8010602:	2b00      	cmp	r3, #0
 8010604:	f040 80b8 	bne.w	8010778 <make_smap+0x708>
 8010608:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801060c:	2b00      	cmp	r3, #0
 801060e:	f000 80b3 	beq.w	8010778 <make_smap+0x708>
						if(smap[y][x-1] >= (smap[y][x]+turn)){	//a西側が記入後より大きいなら
 8010612:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8010616:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801061a:	3b01      	subs	r3, #1
 801061c:	491d      	ldr	r1, [pc, #116]	; (8010694 <make_smap+0x624>)
 801061e:	0112      	lsls	r2, r2, #4
 8010620:	4413      	add	r3, r2
 8010622:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8010626:	4618      	mov	r0, r3
 8010628:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 801062c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010630:	4918      	ldr	r1, [pc, #96]	; (8010694 <make_smap+0x624>)
 8010632:	0112      	lsls	r2, r2, #4
 8010634:	4413      	add	r3, r2
 8010636:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 801063a:	461a      	mov	r2, r3
 801063c:	693b      	ldr	r3, [r7, #16]
 801063e:	4413      	add	r3, r2
 8010640:	4298      	cmp	r0, r3
 8010642:	f2c0 8099 	blt.w	8010778 <make_smap+0x708>
							smap[y][x-1] = smap[y][x] + turn;	//a次の歩数を書き込む
 8010646:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 801064a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801064e:	4911      	ldr	r1, [pc, #68]	; (8010694 <make_smap+0x624>)
 8010650:	0112      	lsls	r2, r2, #4
 8010652:	4413      	add	r3, r2
 8010654:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 8010658:	693b      	ldr	r3, [r7, #16]
 801065a:	b299      	uxth	r1, r3
 801065c:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8010660:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010664:	3b01      	subs	r3, #1
 8010666:	4401      	add	r1, r0
 8010668:	b288      	uxth	r0, r1
 801066a:	490a      	ldr	r1, [pc, #40]	; (8010694 <make_smap+0x624>)
 801066c:	0112      	lsls	r2, r2, #4
 801066e:	4413      	add	r3, r2
 8010670:	4602      	mov	r2, r0
 8010672:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
							if(MF.FLAG.STRAIGHT){
 8010676:	4b06      	ldr	r3, [pc, #24]	; (8010690 <make_smap+0x620>)
 8010678:	881b      	ldrh	r3, [r3, #0]
 801067a:	f3c3 2380 	ubfx	r3, r3, #10, #1
 801067e:	b2db      	uxtb	r3, r3
 8010680:	2b00      	cmp	r3, #0
 8010682:	d079      	beq.n	8010778 <make_smap+0x708>
								//----a直線優先処理----
								for(int k=1; k<x; k++) {						//a現在座標から見て西のマスすべてにおいて
 8010684:	2301      	movs	r3, #1
 8010686:	61bb      	str	r3, [r7, #24]
 8010688:	e071      	b.n	801076e <make_smap+0x6fe>
 801068a:	bf00      	nop
 801068c:	200001ac 	.word	0x200001ac
 8010690:	20000f68 	.word	0x20000f68
 8010694:	20000d60 	.word	0x20000d60
									m_temp_sample[k] = map[y][x-k];				//map配列からマップデータを取り出す
 8010698:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 801069c:	f897 1037 	ldrb.w	r1, [r7, #55]	; 0x37
 80106a0:	69bb      	ldr	r3, [r7, #24]
 80106a2:	1acb      	subs	r3, r1, r3
 80106a4:	494c      	ldr	r1, [pc, #304]	; (80107d8 <make_smap+0x768>)
 80106a6:	0112      	lsls	r2, r2, #4
 80106a8:	440a      	add	r2, r1
 80106aa:	4413      	add	r3, r2
 80106ac:	7819      	ldrb	r1, [r3, #0]
 80106ae:	463a      	mov	r2, r7
 80106b0:	69bb      	ldr	r3, [r7, #24]
 80106b2:	4413      	add	r3, r2
 80106b4:	460a      	mov	r2, r1
 80106b6:	701a      	strb	r2, [r3, #0]
									if(MF.FLAG.SCND) m_temp_sample[k] >>= 4;		//a二次走行用のマップを作成する場合上位4bitを使うので4bit分右にシフトさせる
 80106b8:	4b48      	ldr	r3, [pc, #288]	; (80107dc <make_smap+0x76c>)
 80106ba:	881b      	ldrh	r3, [r3, #0]
 80106bc:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80106c0:	b2db      	uxtb	r3, r3
 80106c2:	2b00      	cmp	r3, #0
 80106c4:	d00a      	beq.n	80106dc <make_smap+0x66c>
 80106c6:	463a      	mov	r2, r7
 80106c8:	69bb      	ldr	r3, [r7, #24]
 80106ca:	4413      	add	r3, r2
 80106cc:	781b      	ldrb	r3, [r3, #0]
 80106ce:	091b      	lsrs	r3, r3, #4
 80106d0:	b2d9      	uxtb	r1, r3
 80106d2:	463a      	mov	r2, r7
 80106d4:	69bb      	ldr	r3, [r7, #24]
 80106d6:	4413      	add	r3, r2
 80106d8:	460a      	mov	r2, r1
 80106da:	701a      	strb	r2, [r3, #0]
									if(!(m_temp_sample[k] & 0x01) && (x-k) != 0) {		//a西壁がなく現在最西端でないとき
 80106dc:	463a      	mov	r2, r7
 80106de:	69bb      	ldr	r3, [r7, #24]
 80106e0:	4413      	add	r3, r2
 80106e2:	781b      	ldrb	r3, [r3, #0]
 80106e4:	f003 0301 	and.w	r3, r3, #1
 80106e8:	2b00      	cmp	r3, #0
 80106ea:	d145      	bne.n	8010778 <make_smap+0x708>
 80106ec:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80106f0:	69ba      	ldr	r2, [r7, #24]
 80106f2:	429a      	cmp	r2, r3
 80106f4:	d040      	beq.n	8010778 <make_smap+0x708>
										if(smap[y][x-k-1] >= (smap[y][x-k]+straight)){		//a西側が記入後より大きいなら
 80106f6:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 80106fa:	f897 1037 	ldrb.w	r1, [r7, #55]	; 0x37
 80106fe:	69bb      	ldr	r3, [r7, #24]
 8010700:	1acb      	subs	r3, r1, r3
 8010702:	3b01      	subs	r3, #1
 8010704:	4936      	ldr	r1, [pc, #216]	; (80107e0 <make_smap+0x770>)
 8010706:	0112      	lsls	r2, r2, #4
 8010708:	4413      	add	r3, r2
 801070a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 801070e:	4618      	mov	r0, r3
 8010710:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8010714:	f897 1037 	ldrb.w	r1, [r7, #55]	; 0x37
 8010718:	69bb      	ldr	r3, [r7, #24]
 801071a:	1acb      	subs	r3, r1, r3
 801071c:	4930      	ldr	r1, [pc, #192]	; (80107e0 <make_smap+0x770>)
 801071e:	0112      	lsls	r2, r2, #4
 8010720:	4413      	add	r3, r2
 8010722:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8010726:	461a      	mov	r2, r3
 8010728:	697b      	ldr	r3, [r7, #20]
 801072a:	4413      	add	r3, r2
 801072c:	4298      	cmp	r0, r3
 801072e:	db1b      	blt.n	8010768 <make_smap+0x6f8>
											smap[y][x-k-1] = smap[y][x-k] + straight;		//a直線分インクリメントした値を次のマスの歩数マップに書き込む
 8010730:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8010734:	f897 1037 	ldrb.w	r1, [r7, #55]	; 0x37
 8010738:	69bb      	ldr	r3, [r7, #24]
 801073a:	1acb      	subs	r3, r1, r3
 801073c:	4928      	ldr	r1, [pc, #160]	; (80107e0 <make_smap+0x770>)
 801073e:	0112      	lsls	r2, r2, #4
 8010740:	4413      	add	r3, r2
 8010742:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 8010746:	697b      	ldr	r3, [r7, #20]
 8010748:	b299      	uxth	r1, r3
 801074a:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 801074e:	f897 4037 	ldrb.w	r4, [r7, #55]	; 0x37
 8010752:	69bb      	ldr	r3, [r7, #24]
 8010754:	1ae3      	subs	r3, r4, r3
 8010756:	3b01      	subs	r3, #1
 8010758:	4401      	add	r1, r0
 801075a:	b288      	uxth	r0, r1
 801075c:	4920      	ldr	r1, [pc, #128]	; (80107e0 <make_smap+0x770>)
 801075e:	0112      	lsls	r2, r2, #4
 8010760:	4413      	add	r3, r2
 8010762:	4602      	mov	r2, r0
 8010764:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
								for(int k=1; k<x; k++) {						//a現在座標から見て西のマスすべてにおいて
 8010768:	69bb      	ldr	r3, [r7, #24]
 801076a:	3301      	adds	r3, #1
 801076c:	61bb      	str	r3, [r7, #24]
 801076e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010772:	69ba      	ldr	r2, [r7, #24]
 8010774:	429a      	cmp	r2, r3
 8010776:	db8f      	blt.n	8010698 <make_smap+0x628>
			for(x = 0; x <= 15; x++){						//a各X座標で実行
 8010778:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801077c:	3301      	adds	r3, #1
 801077e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8010782:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010786:	2b0f      	cmp	r3, #15
 8010788:	f67f acd4 	bls.w	8010134 <make_smap+0xc4>
		for(y = 0; y <= 15; y++){							//a各Y座標で実行
 801078c:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8010790:	3301      	adds	r3, #1
 8010792:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8010796:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 801079a:	2b0f      	cmp	r3, #15
 801079c:	f67f acc6 	bls.w	801012c <make_smap+0xbc>
					}
				}
			}
		}
		//====a歩数カウンタのインクリメント====
		m_step++;
 80107a0:	4b10      	ldr	r3, [pc, #64]	; (80107e4 <make_smap+0x774>)
 80107a2:	881b      	ldrh	r3, [r3, #0]
 80107a4:	3301      	adds	r3, #1
 80107a6:	b29a      	uxth	r2, r3
 80107a8:	4b0e      	ldr	r3, [pc, #56]	; (80107e4 <make_smap+0x774>)
 80107aa:	801a      	strh	r2, [r3, #0]
	}while(smap[mouse.y][mouse.x] == 0x03e7);					//a現在座標が未記入ではなくなるまで実行
 80107ac:	4b0e      	ldr	r3, [pc, #56]	; (80107e8 <make_smap+0x778>)
 80107ae:	785b      	ldrb	r3, [r3, #1]
 80107b0:	b2db      	uxtb	r3, r3
 80107b2:	4618      	mov	r0, r3
 80107b4:	4b0c      	ldr	r3, [pc, #48]	; (80107e8 <make_smap+0x778>)
 80107b6:	781b      	ldrb	r3, [r3, #0]
 80107b8:	b2db      	uxtb	r3, r3
 80107ba:	4619      	mov	r1, r3
 80107bc:	4a08      	ldr	r2, [pc, #32]	; (80107e0 <make_smap+0x770>)
 80107be:	0103      	lsls	r3, r0, #4
 80107c0:	440b      	add	r3, r1
 80107c2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80107c6:	f240 32e7 	movw	r2, #999	; 0x3e7
 80107ca:	4293      	cmp	r3, r2
 80107cc:	f43f acaa 	beq.w	8010124 <make_smap+0xb4>
}
 80107d0:	bf00      	nop
 80107d2:	373c      	adds	r7, #60	; 0x3c
 80107d4:	46bd      	mov	sp, r7
 80107d6:	bd90      	pop	{r4, r7, pc}
 80107d8:	200001ac 	.word	0x200001ac
 80107dc:	20000f68 	.word	0x20000f68
 80107e0:	20000d60 	.word	0x20000d60
 80107e4:	2000034e 	.word	0x2000034e
 80107e8:	20000c0c 	.word	0x20000c0c

080107ec <make_route>:
//make_route
//a最短経路を導出する
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void make_route(){
 80107ec:	b580      	push	{r7, lr}
 80107ee:	b082      	sub	sp, #8
 80107f0:	af00      	add	r7, sp, #0

	//====a変数宣言====
	uint8_t x, y;												//X，Y座標
	uint8_t dir_temp =  mouse.dir;								//aマウスの方角を表すmouse.dirの値をdir_temp変数に退避させる
 80107f2:	4ba6      	ldr	r3, [pc, #664]	; (8010a8c <make_route+0x2a0>)
 80107f4:	789b      	ldrb	r3, [r3, #2]
 80107f6:	703b      	strb	r3, [r7, #0]

	//====a最短経路を初期化====
	uint16_t i;
	for(i = 0; i < 256; i++){
 80107f8:	2300      	movs	r3, #0
 80107fa:	80bb      	strh	r3, [r7, #4]
 80107fc:	e006      	b.n	801080c <make_route+0x20>
		route[i] = 0xff;										//routeを0xffで初期化
 80107fe:	88bb      	ldrh	r3, [r7, #4]
 8010800:	4aa3      	ldr	r2, [pc, #652]	; (8010a90 <make_route+0x2a4>)
 8010802:	21ff      	movs	r1, #255	; 0xff
 8010804:	54d1      	strb	r1, [r2, r3]
	for(i = 0; i < 256; i++){
 8010806:	88bb      	ldrh	r3, [r7, #4]
 8010808:	3301      	adds	r3, #1
 801080a:	80bb      	strh	r3, [r7, #4]
 801080c:	88bb      	ldrh	r3, [r7, #4]
 801080e:	2bff      	cmp	r3, #255	; 0xff
 8010810:	d9f5      	bls.n	80107fe <make_route+0x12>
	}

	//====a歩数カウンタをセット====
	uint16_t m_step = smap[mouse.y][mouse.x];					//a現在座標の歩数マップ値を取得
 8010812:	4b9e      	ldr	r3, [pc, #632]	; (8010a8c <make_route+0x2a0>)
 8010814:	785b      	ldrb	r3, [r3, #1]
 8010816:	b2db      	uxtb	r3, r3
 8010818:	4618      	mov	r0, r3
 801081a:	4b9c      	ldr	r3, [pc, #624]	; (8010a8c <make_route+0x2a0>)
 801081c:	781b      	ldrb	r3, [r3, #0]
 801081e:	b2db      	uxtb	r3, r3
 8010820:	4619      	mov	r1, r3
 8010822:	4a9c      	ldr	r2, [pc, #624]	; (8010a94 <make_route+0x2a8>)
 8010824:	0103      	lsls	r3, r0, #4
 8010826:	440b      	add	r3, r1
 8010828:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801082c:	807b      	strh	r3, [r7, #2]

	//====x, yに現在座標を書き込み====
	x = mouse.x;
 801082e:	4b97      	ldr	r3, [pc, #604]	; (8010a8c <make_route+0x2a0>)
 8010830:	781b      	ldrb	r3, [r3, #0]
 8010832:	71fb      	strb	r3, [r7, #7]
	y = mouse.y;
 8010834:	4b95      	ldr	r3, [pc, #596]	; (8010a8c <make_route+0x2a0>)
 8010836:	785b      	ldrb	r3, [r3, #1]
 8010838:	71bb      	strb	r3, [r7, #6]

	//====a最短経路を導出====
	if(pass_mode == 4){
 801083a:	4b97      	ldr	r3, [pc, #604]	; (8010a98 <make_route+0x2ac>)
 801083c:	781b      	ldrb	r3, [r3, #0]
 801083e:	2b04      	cmp	r3, #4
 8010840:	d105      	bne.n	801084e <make_route+0x62>
		route[0] = 0x77;
 8010842:	4b93      	ldr	r3, [pc, #588]	; (8010a90 <make_route+0x2a4>)
 8010844:	2277      	movs	r2, #119	; 0x77
 8010846:	701a      	strb	r2, [r3, #0]
		i = 1;
 8010848:	2301      	movs	r3, #1
 801084a:	80bb      	strh	r3, [r7, #4]
 801084c:	e001      	b.n	8010852 <make_route+0x66>
	}else{
		i = 0;
 801084e:	2300      	movs	r3, #0
 8010850:	80bb      	strh	r3, [r7, #4]
	}

	do{
		uint8_t m_temp = map[y][x];								//a比較用マップ情報の格納
 8010852:	79ba      	ldrb	r2, [r7, #6]
 8010854:	79fb      	ldrb	r3, [r7, #7]
 8010856:	4991      	ldr	r1, [pc, #580]	; (8010a9c <make_route+0x2b0>)
 8010858:	0112      	lsls	r2, r2, #4
 801085a:	440a      	add	r2, r1
 801085c:	4413      	add	r3, r2
 801085e:	781b      	ldrb	r3, [r3, #0]
 8010860:	707b      	strb	r3, [r7, #1]
		if(MF.FLAG.SCND){										//a二次走行用のマップを作成する場合（二次走行時はMF.FLAG.SCNDが立っている）
 8010862:	4b8f      	ldr	r3, [pc, #572]	; (8010aa0 <make_route+0x2b4>)
 8010864:	881b      	ldrh	r3, [r3, #0]
 8010866:	f3c3 1340 	ubfx	r3, r3, #5, #1
 801086a:	b2db      	uxtb	r3, r3
 801086c:	2b00      	cmp	r3, #0
 801086e:	d002      	beq.n	8010876 <make_route+0x8a>
			m_temp >>= 4;										//a上位4bitを使うので4bit分右にシフトさせる
 8010870:	787b      	ldrb	r3, [r7, #1]
 8010872:	091b      	lsrs	r3, r3, #4
 8010874:	707b      	strb	r3, [r7, #1]
		}
		//----a北を見る----
		if(!(m_temp & 0x08) && (smap[y+1][x] < m_step)){		//a北側に壁が無く、現在地より小さい歩数マップ値であれば
 8010876:	787b      	ldrb	r3, [r7, #1]
 8010878:	f003 0308 	and.w	r3, r3, #8
 801087c:	2b00      	cmp	r3, #0
 801087e:	d122      	bne.n	80108c6 <make_route+0xda>
 8010880:	79bb      	ldrb	r3, [r7, #6]
 8010882:	1c5a      	adds	r2, r3, #1
 8010884:	79fb      	ldrb	r3, [r7, #7]
 8010886:	4983      	ldr	r1, [pc, #524]	; (8010a94 <make_route+0x2a8>)
 8010888:	0112      	lsls	r2, r2, #4
 801088a:	4413      	add	r3, r2
 801088c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8010890:	887a      	ldrh	r2, [r7, #2]
 8010892:	429a      	cmp	r2, r3
 8010894:	d917      	bls.n	80108c6 <make_route+0xda>
			route[i] = (0x00 - mouse.dir) & 0x03;				//route配列に進行方向を記録
 8010896:	4b7d      	ldr	r3, [pc, #500]	; (8010a8c <make_route+0x2a0>)
 8010898:	789b      	ldrb	r3, [r3, #2]
 801089a:	b2db      	uxtb	r3, r3
 801089c:	425b      	negs	r3, r3
 801089e:	b2da      	uxtb	r2, r3
 80108a0:	88bb      	ldrh	r3, [r7, #4]
 80108a2:	f002 0203 	and.w	r2, r2, #3
 80108a6:	b2d1      	uxtb	r1, r2
 80108a8:	4a79      	ldr	r2, [pc, #484]	; (8010a90 <make_route+0x2a4>)
 80108aa:	54d1      	strb	r1, [r2, r3]
			m_step = smap[y+1][x];								//a最大歩数マップ値を更新
 80108ac:	79bb      	ldrb	r3, [r7, #6]
 80108ae:	1c5a      	adds	r2, r3, #1
 80108b0:	79fb      	ldrb	r3, [r7, #7]
 80108b2:	4978      	ldr	r1, [pc, #480]	; (8010a94 <make_route+0x2a8>)
 80108b4:	0112      	lsls	r2, r2, #4
 80108b6:	4413      	add	r3, r2
 80108b8:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80108bc:	807b      	strh	r3, [r7, #2]
			y++;												//a北に進んだのでY座標をインクリメント
 80108be:	79bb      	ldrb	r3, [r7, #6]
 80108c0:	3301      	adds	r3, #1
 80108c2:	71bb      	strb	r3, [r7, #6]
 80108c4:	e079      	b.n	80109ba <make_route+0x1ce>
		}
		//----a東を見る----
		else if(!(m_temp & 0x04) && (smap[y][x+1] < m_step)){	//a東側に壁が無く、現在地より小さい歩数マップ値であれば
 80108c6:	787b      	ldrb	r3, [r7, #1]
 80108c8:	f003 0304 	and.w	r3, r3, #4
 80108cc:	2b00      	cmp	r3, #0
 80108ce:	d123      	bne.n	8010918 <make_route+0x12c>
 80108d0:	79ba      	ldrb	r2, [r7, #6]
 80108d2:	79fb      	ldrb	r3, [r7, #7]
 80108d4:	3301      	adds	r3, #1
 80108d6:	496f      	ldr	r1, [pc, #444]	; (8010a94 <make_route+0x2a8>)
 80108d8:	0112      	lsls	r2, r2, #4
 80108da:	4413      	add	r3, r2
 80108dc:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80108e0:	887a      	ldrh	r2, [r7, #2]
 80108e2:	429a      	cmp	r2, r3
 80108e4:	d918      	bls.n	8010918 <make_route+0x12c>
			route[i] = (0x01 - mouse.dir) & 0x03;				//route配列に進行方向を記録
 80108e6:	4b69      	ldr	r3, [pc, #420]	; (8010a8c <make_route+0x2a0>)
 80108e8:	789b      	ldrb	r3, [r3, #2]
 80108ea:	b2db      	uxtb	r3, r3
 80108ec:	f1c3 0301 	rsb	r3, r3, #1
 80108f0:	b2da      	uxtb	r2, r3
 80108f2:	88bb      	ldrh	r3, [r7, #4]
 80108f4:	f002 0203 	and.w	r2, r2, #3
 80108f8:	b2d1      	uxtb	r1, r2
 80108fa:	4a65      	ldr	r2, [pc, #404]	; (8010a90 <make_route+0x2a4>)
 80108fc:	54d1      	strb	r1, [r2, r3]
			m_step = smap[y][x+1];								//a最大歩数マップ値を更新
 80108fe:	79ba      	ldrb	r2, [r7, #6]
 8010900:	79fb      	ldrb	r3, [r7, #7]
 8010902:	3301      	adds	r3, #1
 8010904:	4963      	ldr	r1, [pc, #396]	; (8010a94 <make_route+0x2a8>)
 8010906:	0112      	lsls	r2, r2, #4
 8010908:	4413      	add	r3, r2
 801090a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 801090e:	807b      	strh	r3, [r7, #2]
			x++;												//a東に進んだのでX座標をインクリメント
 8010910:	79fb      	ldrb	r3, [r7, #7]
 8010912:	3301      	adds	r3, #1
 8010914:	71fb      	strb	r3, [r7, #7]
 8010916:	e050      	b.n	80109ba <make_route+0x1ce>
		}
		//----a南を見る----
		else if(!(m_temp & 0x02) && (smap[y-1][x] < m_step)){	//a南側に壁が無く、現在地より小さい歩数マップ値であれば
 8010918:	787b      	ldrb	r3, [r7, #1]
 801091a:	f003 0302 	and.w	r3, r3, #2
 801091e:	2b00      	cmp	r3, #0
 8010920:	d123      	bne.n	801096a <make_route+0x17e>
 8010922:	79bb      	ldrb	r3, [r7, #6]
 8010924:	1e5a      	subs	r2, r3, #1
 8010926:	79fb      	ldrb	r3, [r7, #7]
 8010928:	495a      	ldr	r1, [pc, #360]	; (8010a94 <make_route+0x2a8>)
 801092a:	0112      	lsls	r2, r2, #4
 801092c:	4413      	add	r3, r2
 801092e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8010932:	887a      	ldrh	r2, [r7, #2]
 8010934:	429a      	cmp	r2, r3
 8010936:	d918      	bls.n	801096a <make_route+0x17e>
			route[i] = (0x02 - mouse.dir) & 0x03;				//route配列に進行方向を記録
 8010938:	4b54      	ldr	r3, [pc, #336]	; (8010a8c <make_route+0x2a0>)
 801093a:	789b      	ldrb	r3, [r3, #2]
 801093c:	b2db      	uxtb	r3, r3
 801093e:	f1c3 0302 	rsb	r3, r3, #2
 8010942:	b2da      	uxtb	r2, r3
 8010944:	88bb      	ldrh	r3, [r7, #4]
 8010946:	f002 0203 	and.w	r2, r2, #3
 801094a:	b2d1      	uxtb	r1, r2
 801094c:	4a50      	ldr	r2, [pc, #320]	; (8010a90 <make_route+0x2a4>)
 801094e:	54d1      	strb	r1, [r2, r3]
			m_step = smap[y-1][x];								//a最大歩数マップ値を更新
 8010950:	79bb      	ldrb	r3, [r7, #6]
 8010952:	1e5a      	subs	r2, r3, #1
 8010954:	79fb      	ldrb	r3, [r7, #7]
 8010956:	494f      	ldr	r1, [pc, #316]	; (8010a94 <make_route+0x2a8>)
 8010958:	0112      	lsls	r2, r2, #4
 801095a:	4413      	add	r3, r2
 801095c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8010960:	807b      	strh	r3, [r7, #2]
			y--;												//a南に進んだのでY座標をデクリメント
 8010962:	79bb      	ldrb	r3, [r7, #6]
 8010964:	3b01      	subs	r3, #1
 8010966:	71bb      	strb	r3, [r7, #6]
 8010968:	e027      	b.n	80109ba <make_route+0x1ce>
		}
		//----a西を見る----
		else if(!(m_temp & 0x01) && (smap[y][x-1] < m_step)){	//a西側に壁が無く、現在地より小さい歩数マップ値であれば
 801096a:	787b      	ldrb	r3, [r7, #1]
 801096c:	f003 0301 	and.w	r3, r3, #1
 8010970:	2b00      	cmp	r3, #0
 8010972:	d122      	bne.n	80109ba <make_route+0x1ce>
 8010974:	79ba      	ldrb	r2, [r7, #6]
 8010976:	79fb      	ldrb	r3, [r7, #7]
 8010978:	3b01      	subs	r3, #1
 801097a:	4946      	ldr	r1, [pc, #280]	; (8010a94 <make_route+0x2a8>)
 801097c:	0112      	lsls	r2, r2, #4
 801097e:	4413      	add	r3, r2
 8010980:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8010984:	887a      	ldrh	r2, [r7, #2]
 8010986:	429a      	cmp	r2, r3
 8010988:	d917      	bls.n	80109ba <make_route+0x1ce>
			route[i] = (0x03 - mouse.dir) & 0x03;				//route配列に進行方向を記録
 801098a:	4b40      	ldr	r3, [pc, #256]	; (8010a8c <make_route+0x2a0>)
 801098c:	789b      	ldrb	r3, [r3, #2]
 801098e:	b2db      	uxtb	r3, r3
 8010990:	f1c3 0303 	rsb	r3, r3, #3
 8010994:	b2da      	uxtb	r2, r3
 8010996:	88bb      	ldrh	r3, [r7, #4]
 8010998:	f002 0203 	and.w	r2, r2, #3
 801099c:	b2d1      	uxtb	r1, r2
 801099e:	4a3c      	ldr	r2, [pc, #240]	; (8010a90 <make_route+0x2a4>)
 80109a0:	54d1      	strb	r1, [r2, r3]
			m_step = smap[y][x-1];								//a最大歩数マップ値を更新
 80109a2:	79ba      	ldrb	r2, [r7, #6]
 80109a4:	79fb      	ldrb	r3, [r7, #7]
 80109a6:	3b01      	subs	r3, #1
 80109a8:	493a      	ldr	r1, [pc, #232]	; (8010a94 <make_route+0x2a8>)
 80109aa:	0112      	lsls	r2, r2, #4
 80109ac:	4413      	add	r3, r2
 80109ae:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80109b2:	807b      	strh	r3, [r7, #2]
			x--;												//a西に進んだのでX座標をデクリメント
 80109b4:	79fb      	ldrb	r3, [r7, #7]
 80109b6:	3b01      	subs	r3, #1
 80109b8:	71fb      	strb	r3, [r7, #7]
				y--;												//a南に進んだのでY座標をデクリメント
			}*/

		}
		//----a格納データ形式変更----
		switch(route[i]){										//route配列に格納した要素値で分岐
 80109ba:	88bb      	ldrh	r3, [r7, #4]
 80109bc:	4a34      	ldr	r2, [pc, #208]	; (8010a90 <make_route+0x2a4>)
 80109be:	5cd3      	ldrb	r3, [r2, r3]
 80109c0:	2b03      	cmp	r3, #3
 80109c2:	d83c      	bhi.n	8010a3e <make_route+0x252>
 80109c4:	a201      	add	r2, pc, #4	; (adr r2, 80109cc <make_route+0x1e0>)
 80109c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80109ca:	bf00      	nop
 80109cc:	080109dd 	.word	0x080109dd
 80109d0:	08010a09 	.word	0x08010a09
 80109d4:	08010a1b 	.word	0x08010a1b
 80109d8:	08010a2d 	.word	0x08010a2d
		case 0x00:												//a前進する場合
			if(pass_mode < 3){
 80109dc:	4b2e      	ldr	r3, [pc, #184]	; (8010a98 <make_route+0x2ac>)
 80109de:	781b      	ldrb	r3, [r3, #0]
 80109e0:	2b02      	cmp	r3, #2
 80109e2:	d804      	bhi.n	80109ee <make_route+0x202>
				route[i] = 0x88;									//a格納データ形式を変更
 80109e4:	88bb      	ldrh	r3, [r7, #4]
 80109e6:	4a2a      	ldr	r2, [pc, #168]	; (8010a90 <make_route+0x2a4>)
 80109e8:	2188      	movs	r1, #136	; 0x88
 80109ea:	54d1      	strb	r1, [r2, r3]
			}else{
				route[i] = 0x77;
				route[i+1] = 0x77;
				i++;
			}
			break;
 80109ec:	e02c      	b.n	8010a48 <make_route+0x25c>
				route[i] = 0x77;
 80109ee:	88bb      	ldrh	r3, [r7, #4]
 80109f0:	4a27      	ldr	r2, [pc, #156]	; (8010a90 <make_route+0x2a4>)
 80109f2:	2177      	movs	r1, #119	; 0x77
 80109f4:	54d1      	strb	r1, [r2, r3]
				route[i+1] = 0x77;
 80109f6:	88bb      	ldrh	r3, [r7, #4]
 80109f8:	3301      	adds	r3, #1
 80109fa:	4a25      	ldr	r2, [pc, #148]	; (8010a90 <make_route+0x2a4>)
 80109fc:	2177      	movs	r1, #119	; 0x77
 80109fe:	54d1      	strb	r1, [r2, r3]
				i++;
 8010a00:	88bb      	ldrh	r3, [r7, #4]
 8010a02:	3301      	adds	r3, #1
 8010a04:	80bb      	strh	r3, [r7, #4]
			break;
 8010a06:	e01f      	b.n	8010a48 <make_route+0x25c>
		case 0x01:												//a右折する場合
			turn_dir(DIR_TURN_R90, 0);							//a内部情報の方向を90度右回転
 8010a08:	2100      	movs	r1, #0
 8010a0a:	2001      	movs	r0, #1
 8010a0c:	f7ff fa64 	bl	800fed8 <turn_dir>
			route[i] = 0x44;									//a格納データ形式を変更
 8010a10:	88bb      	ldrh	r3, [r7, #4]
 8010a12:	4a1f      	ldr	r2, [pc, #124]	; (8010a90 <make_route+0x2a4>)
 8010a14:	2144      	movs	r1, #68	; 0x44
 8010a16:	54d1      	strb	r1, [r2, r3]
			break;
 8010a18:	e016      	b.n	8010a48 <make_route+0x25c>
		case 0x02:												//Uターンする場合
			turn_dir(DIR_TURN_180, 0);							//a内部情報の方向を180度回転
 8010a1a:	2100      	movs	r1, #0
 8010a1c:	2002      	movs	r0, #2
 8010a1e:	f7ff fa5b 	bl	800fed8 <turn_dir>
			route[i] = 0x22;									//a格納データ形式を変更
 8010a22:	88bb      	ldrh	r3, [r7, #4]
 8010a24:	4a1a      	ldr	r2, [pc, #104]	; (8010a90 <make_route+0x2a4>)
 8010a26:	2122      	movs	r1, #34	; 0x22
 8010a28:	54d1      	strb	r1, [r2, r3]
			break;
 8010a2a:	e00d      	b.n	8010a48 <make_route+0x25c>
		case 0x03:												//a左折する場合
			turn_dir(DIR_TURN_L90, 0);							//a内部情報の方向を90度左回転
 8010a2c:	2100      	movs	r1, #0
 8010a2e:	20ff      	movs	r0, #255	; 0xff
 8010a30:	f7ff fa52 	bl	800fed8 <turn_dir>
			route[i] = 0x11;									//a格納データ形式を変更
 8010a34:	88bb      	ldrh	r3, [r7, #4]
 8010a36:	4a16      	ldr	r2, [pc, #88]	; (8010a90 <make_route+0x2a4>)
 8010a38:	2111      	movs	r1, #17
 8010a3a:	54d1      	strb	r1, [r2, r3]
			break;
 8010a3c:	e004      	b.n	8010a48 <make_route+0x25c>
		default:												//aそれ以外の場合
			route[i] = 0x00;									//a格納データ形式を変更
 8010a3e:	88bb      	ldrh	r3, [r7, #4]
 8010a40:	4a13      	ldr	r2, [pc, #76]	; (8010a90 <make_route+0x2a4>)
 8010a42:	2100      	movs	r1, #0
 8010a44:	54d1      	strb	r1, [r2, r3]
			break;
 8010a46:	bf00      	nop
		}
		i++;													//aカウンタをインクリメント
 8010a48:	88bb      	ldrh	r3, [r7, #4]
 8010a4a:	3301      	adds	r3, #1
 8010a4c:	80bb      	strh	r3, [r7, #4]
	}while(smap[y][x] != 0);									//a進んだ先の歩数マップ値が0（=ゴール）になるまで実行
 8010a4e:	79ba      	ldrb	r2, [r7, #6]
 8010a50:	79fb      	ldrb	r3, [r7, #7]
 8010a52:	4910      	ldr	r1, [pc, #64]	; (8010a94 <make_route+0x2a8>)
 8010a54:	0112      	lsls	r2, r2, #4
 8010a56:	4413      	add	r3, r2
 8010a58:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8010a5c:	2b00      	cmp	r3, #0
 8010a5e:	f47f aef8 	bne.w	8010852 <make_route+0x66>

	if(MF.FLAG.SCND){
 8010a62:	4b0f      	ldr	r3, [pc, #60]	; (8010aa0 <make_route+0x2b4>)
 8010a64:	881b      	ldrh	r3, [r3, #0]
 8010a66:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8010a6a:	b2db      	uxtb	r3, r3
 8010a6c:	2b00      	cmp	r3, #0
 8010a6e:	d005      	beq.n	8010a7c <make_route+0x290>
		goal_x = x;
 8010a70:	4a0c      	ldr	r2, [pc, #48]	; (8010aa4 <make_route+0x2b8>)
 8010a72:	79fb      	ldrb	r3, [r7, #7]
 8010a74:	7013      	strb	r3, [r2, #0]
		goal_y = y;												//a二次走行でgoal後自己座標をgoal座標にするのでその時用
 8010a76:	4a0c      	ldr	r2, [pc, #48]	; (8010aa8 <make_route+0x2bc>)
 8010a78:	79bb      	ldrb	r3, [r7, #6]
 8010a7a:	7013      	strb	r3, [r2, #0]
	}
	mouse.dir = dir_temp;										//dir_tempに退避させた値をmouse.dirにリストア
 8010a7c:	4a03      	ldr	r2, [pc, #12]	; (8010a8c <make_route+0x2a0>)
 8010a7e:	783b      	ldrb	r3, [r7, #0]
 8010a80:	7093      	strb	r3, [r2, #2]
}
 8010a82:	bf00      	nop
 8010a84:	3708      	adds	r7, #8
 8010a86:	46bd      	mov	sp, r7
 8010a88:	bd80      	pop	{r7, pc}
 8010a8a:	bf00      	nop
 8010a8c:	20000c0c 	.word	0x20000c0c
 8010a90:	20000c54 	.word	0x20000c54
 8010a94:	20000d60 	.word	0x20000d60
 8010a98:	20000457 	.word	0x20000457
 8010a9c:	200001ac 	.word	0x200001ac
 8010aa0:	20000f68 	.word	0x20000f68
 8010aa4:	20000bb0 	.word	0x20000bb0
 8010aa8:	20000b4c 	.word	0x20000b4c

08010aac <find_pregoal>:
//	未探索壁を含む＆現在座標から最も近いマス(=仮goal)を探す
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void find_pregoal()
{
 8010aac:	b480      	push	{r7}
 8010aae:	b085      	sub	sp, #20
 8010ab0:	af00      	add	r7, sp, #0
	//====変数宣言====
	uint8_t x, y;															//for文用変数
	uint8_t m_temp;															//マップデータ一時保持
	//uint8_t m_temp_sample[16];
	uint8_t break_flag = 0;													//未知壁マスを見つけた時のループ脱出フラグ
 8010ab2:	2300      	movs	r3, #0
 8010ab4:	737b      	strb	r3, [r7, #13]

	//====歩数マップのクリア====
	for (y = 0; y <= 0x0f; y++) {											//各Y座標で実行
 8010ab6:	2300      	movs	r3, #0
 8010ab8:	73bb      	strb	r3, [r7, #14]
 8010aba:	e014      	b.n	8010ae6 <find_pregoal+0x3a>
		for (x = 0; x <= 0x0f; x++) {										//各X座標で実行
 8010abc:	2300      	movs	r3, #0
 8010abe:	73fb      	strb	r3, [r7, #15]
 8010ac0:	e00b      	b.n	8010ada <find_pregoal+0x2e>
			smap[y][x] = 0x03e7;											//未記入部分は歩数最大とする
 8010ac2:	7bba      	ldrb	r2, [r7, #14]
 8010ac4:	7bfb      	ldrb	r3, [r7, #15]
 8010ac6:	49a0      	ldr	r1, [pc, #640]	; (8010d48 <find_pregoal+0x29c>)
 8010ac8:	0112      	lsls	r2, r2, #4
 8010aca:	4413      	add	r3, r2
 8010acc:	f240 32e7 	movw	r2, #999	; 0x3e7
 8010ad0:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for (x = 0; x <= 0x0f; x++) {										//各X座標で実行
 8010ad4:	7bfb      	ldrb	r3, [r7, #15]
 8010ad6:	3301      	adds	r3, #1
 8010ad8:	73fb      	strb	r3, [r7, #15]
 8010ada:	7bfb      	ldrb	r3, [r7, #15]
 8010adc:	2b0f      	cmp	r3, #15
 8010ade:	d9f0      	bls.n	8010ac2 <find_pregoal+0x16>
	for (y = 0; y <= 0x0f; y++) {											//各Y座標で実行
 8010ae0:	7bbb      	ldrb	r3, [r7, #14]
 8010ae2:	3301      	adds	r3, #1
 8010ae4:	73bb      	strb	r3, [r7, #14]
 8010ae6:	7bbb      	ldrb	r3, [r7, #14]
 8010ae8:	2b0f      	cmp	r3, #15
 8010aea:	d9e7      	bls.n	8010abc <find_pregoal+0x10>
		}
	}

	//====探索完了フラグのクリア====
	MF2.FLAG.ALLMAP = 0;
 8010aec:	4a97      	ldr	r2, [pc, #604]	; (8010d4c <find_pregoal+0x2a0>)
 8010aee:	8813      	ldrh	r3, [r2, #0]
 8010af0:	f36f 0382 	bfc	r3, #2, #1
 8010af4:	8013      	strh	r3, [r2, #0]

	//====現在座標を0にする====
	smap[mouse.y][mouse.x] = 0;
 8010af6:	4b96      	ldr	r3, [pc, #600]	; (8010d50 <find_pregoal+0x2a4>)
 8010af8:	785b      	ldrb	r3, [r3, #1]
 8010afa:	b2db      	uxtb	r3, r3
 8010afc:	4618      	mov	r0, r3
 8010afe:	4b94      	ldr	r3, [pc, #592]	; (8010d50 <find_pregoal+0x2a4>)
 8010b00:	781b      	ldrb	r3, [r3, #0]
 8010b02:	b2db      	uxtb	r3, r3
 8010b04:	4619      	mov	r1, r3
 8010b06:	4a90      	ldr	r2, [pc, #576]	; (8010d48 <find_pregoal+0x29c>)
 8010b08:	0103      	lsls	r3, r0, #4
 8010b0a:	440b      	add	r3, r1
 8010b0c:	2100      	movs	r1, #0
 8010b0e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

	//====歩数カウンタを0にする====
	m_step = 0;																//現在記入した最大の歩数となる
 8010b12:	4b90      	ldr	r3, [pc, #576]	; (8010d54 <find_pregoal+0x2a8>)
 8010b14:	2200      	movs	r2, #0
 8010b16:	801a      	strh	r2, [r3, #0]

	//====歩数カウンタの重みづけ====
	int straight = 3;
 8010b18:	2303      	movs	r3, #3
 8010b1a:	60bb      	str	r3, [r7, #8]
	int turn = 1;
 8010b1c:	2301      	movs	r3, #1
 8010b1e:	607b      	str	r3, [r7, #4]

	//====自分の座標にたどり着くまでループ====
	do {
		//----マップ全域を捜索----
		for (y = 0; y <= 0x0f; y++) {										//各Y座標で実行
 8010b20:	2300      	movs	r3, #0
 8010b22:	73bb      	strb	r3, [r7, #14]
 8010b24:	e180      	b.n	8010e28 <find_pregoal+0x37c>
			for (x = 0; x <= 0x0f; x++) {									//各X座標で実行
 8010b26:	2300      	movs	r3, #0
 8010b28:	73fb      	strb	r3, [r7, #15]
 8010b2a:	e173      	b.n	8010e14 <find_pregoal+0x368>
				//----現在最大の歩数を発見したとき----
				if (smap[y][x] == m_step) {									//歩数格納変数m_stepの値が現在最大の歩数のとき
 8010b2c:	7bba      	ldrb	r2, [r7, #14]
 8010b2e:	7bfb      	ldrb	r3, [r7, #15]
 8010b30:	4985      	ldr	r1, [pc, #532]	; (8010d48 <find_pregoal+0x29c>)
 8010b32:	0112      	lsls	r2, r2, #4
 8010b34:	4413      	add	r3, r2
 8010b36:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8010b3a:	4b86      	ldr	r3, [pc, #536]	; (8010d54 <find_pregoal+0x2a8>)
 8010b3c:	881b      	ldrh	r3, [r3, #0]
 8010b3e:	429a      	cmp	r2, r3
 8010b40:	f040 8165 	bne.w	8010e0e <find_pregoal+0x362>
					m_temp = map[y][x];										//map配列からマップデータを取り出す
 8010b44:	7bba      	ldrb	r2, [r7, #14]
 8010b46:	7bfb      	ldrb	r3, [r7, #15]
 8010b48:	4983      	ldr	r1, [pc, #524]	; (8010d58 <find_pregoal+0x2ac>)
 8010b4a:	0112      	lsls	r2, r2, #4
 8010b4c:	440a      	add	r2, r1
 8010b4e:	4413      	add	r3, r2
 8010b50:	781b      	ldrb	r3, [r3, #0]
 8010b52:	70fb      	strb	r3, [r7, #3]
					//----北壁についての処理----
					if (!(m_temp & 0x08) && y != 0x0f) {					//北壁がなく現在最北端でないとき
 8010b54:	78fb      	ldrb	r3, [r7, #3]
 8010b56:	f003 0308 	and.w	r3, r3, #8
 8010b5a:	2b00      	cmp	r3, #0
 8010b5c:	d14d      	bne.n	8010bfa <find_pregoal+0x14e>
 8010b5e:	7bbb      	ldrb	r3, [r7, #14]
 8010b60:	2b0f      	cmp	r3, #15
 8010b62:	d04a      	beq.n	8010bfa <find_pregoal+0x14e>
						if (smap[y + 1][x] == 0x03e7) {						//北側が未記入なら
 8010b64:	7bbb      	ldrb	r3, [r7, #14]
 8010b66:	1c5a      	adds	r2, r3, #1
 8010b68:	7bfb      	ldrb	r3, [r7, #15]
 8010b6a:	4977      	ldr	r1, [pc, #476]	; (8010d48 <find_pregoal+0x29c>)
 8010b6c:	0112      	lsls	r2, r2, #4
 8010b6e:	4413      	add	r3, r2
 8010b70:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8010b74:	f240 32e7 	movw	r2, #999	; 0x3e7
 8010b78:	4293      	cmp	r3, r2
 8010b7a:	d13e      	bne.n	8010bfa <find_pregoal+0x14e>
							smap[y + 1][x] = smap[y][x] + turn;				//曲線分インクリメントした値を次のマスの歩数マップに書き込む
 8010b7c:	7bba      	ldrb	r2, [r7, #14]
 8010b7e:	7bfb      	ldrb	r3, [r7, #15]
 8010b80:	4971      	ldr	r1, [pc, #452]	; (8010d48 <find_pregoal+0x29c>)
 8010b82:	0112      	lsls	r2, r2, #4
 8010b84:	4413      	add	r3, r2
 8010b86:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 8010b8a:	687b      	ldr	r3, [r7, #4]
 8010b8c:	b299      	uxth	r1, r3
 8010b8e:	7bbb      	ldrb	r3, [r7, #14]
 8010b90:	1c5a      	adds	r2, r3, #1
 8010b92:	7bfb      	ldrb	r3, [r7, #15]
 8010b94:	4401      	add	r1, r0
 8010b96:	b288      	uxth	r0, r1
 8010b98:	496b      	ldr	r1, [pc, #428]	; (8010d48 <find_pregoal+0x29c>)
 8010b9a:	0112      	lsls	r2, r2, #4
 8010b9c:	4413      	add	r3, r2
 8010b9e:	4602      	mov	r2, r0
 8010ba0:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
							if (((map[y + 1][x] & 0x0f ) << 4) != (map[y + 1][x] & 0xf0)) {		//map内の上位4bitと下位4bitが異なる場合
 8010ba4:	7bbb      	ldrb	r3, [r7, #14]
 8010ba6:	1c5a      	adds	r2, r3, #1
 8010ba8:	7bfb      	ldrb	r3, [r7, #15]
 8010baa:	496b      	ldr	r1, [pc, #428]	; (8010d58 <find_pregoal+0x2ac>)
 8010bac:	0112      	lsls	r2, r2, #4
 8010bae:	440a      	add	r2, r1
 8010bb0:	4413      	add	r3, r2
 8010bb2:	781b      	ldrb	r3, [r3, #0]
 8010bb4:	011b      	lsls	r3, r3, #4
 8010bb6:	b2da      	uxtb	r2, r3
 8010bb8:	7bbb      	ldrb	r3, [r7, #14]
 8010bba:	1c59      	adds	r1, r3, #1
 8010bbc:	7bfb      	ldrb	r3, [r7, #15]
 8010bbe:	4866      	ldr	r0, [pc, #408]	; (8010d58 <find_pregoal+0x2ac>)
 8010bc0:	0109      	lsls	r1, r1, #4
 8010bc2:	4401      	add	r1, r0
 8010bc4:	440b      	add	r3, r1
 8010bc6:	781b      	ldrb	r3, [r3, #0]
 8010bc8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8010bcc:	429a      	cmp	r2, r3
 8010bce:	d014      	beq.n	8010bfa <find_pregoal+0x14e>
								break_flag = 1;								//for文を抜けるフラグを立てて
 8010bd0:	2301      	movs	r3, #1
 8010bd2:	737b      	strb	r3, [r7, #13]
								m_step2 = smap[y + 1][x];					//仮goalの歩数を記録
 8010bd4:	7bbb      	ldrb	r3, [r7, #14]
 8010bd6:	1c5a      	adds	r2, r3, #1
 8010bd8:	7bfb      	ldrb	r3, [r7, #15]
 8010bda:	495b      	ldr	r1, [pc, #364]	; (8010d48 <find_pregoal+0x29c>)
 8010bdc:	0112      	lsls	r2, r2, #4
 8010bde:	4413      	add	r3, r2
 8010be0:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8010be4:	4b5d      	ldr	r3, [pc, #372]	; (8010d5c <find_pregoal+0x2b0>)
 8010be6:	801a      	strh	r2, [r3, #0]
								pregoal_x = x;
 8010be8:	4a5d      	ldr	r2, [pc, #372]	; (8010d60 <find_pregoal+0x2b4>)
 8010bea:	7bfb      	ldrb	r3, [r7, #15]
 8010bec:	7013      	strb	r3, [r2, #0]
								pregoal_y = y + 1;							//仮goalの座標を記録
 8010bee:	7bbb      	ldrb	r3, [r7, #14]
 8010bf0:	3301      	adds	r3, #1
 8010bf2:	b2da      	uxtb	r2, r3
 8010bf4:	4b5b      	ldr	r3, [pc, #364]	; (8010d64 <find_pregoal+0x2b8>)
 8010bf6:	701a      	strb	r2, [r3, #0]
								break;
 8010bf8:	e110      	b.n	8010e1c <find_pregoal+0x370>
							}
						}
					}
					//----東壁についての処理----
					if (!(m_temp & 0x04) && x != 0x0f) {					//東壁がなく現在最東端でないとき
 8010bfa:	78fb      	ldrb	r3, [r7, #3]
 8010bfc:	f003 0304 	and.w	r3, r3, #4
 8010c00:	2b00      	cmp	r3, #0
 8010c02:	d14d      	bne.n	8010ca0 <find_pregoal+0x1f4>
 8010c04:	7bfb      	ldrb	r3, [r7, #15]
 8010c06:	2b0f      	cmp	r3, #15
 8010c08:	d04a      	beq.n	8010ca0 <find_pregoal+0x1f4>
						if (smap[y][x + 1] == 0x03e7) {						//東側が未記入なら
 8010c0a:	7bba      	ldrb	r2, [r7, #14]
 8010c0c:	7bfb      	ldrb	r3, [r7, #15]
 8010c0e:	3301      	adds	r3, #1
 8010c10:	494d      	ldr	r1, [pc, #308]	; (8010d48 <find_pregoal+0x29c>)
 8010c12:	0112      	lsls	r2, r2, #4
 8010c14:	4413      	add	r3, r2
 8010c16:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8010c1a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8010c1e:	4293      	cmp	r3, r2
 8010c20:	d13e      	bne.n	8010ca0 <find_pregoal+0x1f4>
							smap[y][x + 1] = smap[y][x] + turn;				//曲線分インクリメントした値を次のマスの歩数マップに書き込む
 8010c22:	7bba      	ldrb	r2, [r7, #14]
 8010c24:	7bfb      	ldrb	r3, [r7, #15]
 8010c26:	4948      	ldr	r1, [pc, #288]	; (8010d48 <find_pregoal+0x29c>)
 8010c28:	0112      	lsls	r2, r2, #4
 8010c2a:	4413      	add	r3, r2
 8010c2c:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 8010c30:	687b      	ldr	r3, [r7, #4]
 8010c32:	b299      	uxth	r1, r3
 8010c34:	7bba      	ldrb	r2, [r7, #14]
 8010c36:	7bfb      	ldrb	r3, [r7, #15]
 8010c38:	3301      	adds	r3, #1
 8010c3a:	4401      	add	r1, r0
 8010c3c:	b288      	uxth	r0, r1
 8010c3e:	4942      	ldr	r1, [pc, #264]	; (8010d48 <find_pregoal+0x29c>)
 8010c40:	0112      	lsls	r2, r2, #4
 8010c42:	4413      	add	r3, r2
 8010c44:	4602      	mov	r2, r0
 8010c46:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
							if (((map[y][x + 1] & 0x0f) << 4) != (map[y][x + 1] & 0xf0)) {		//map内の上位4bitと下位4bitが異なる場合
 8010c4a:	7bba      	ldrb	r2, [r7, #14]
 8010c4c:	7bfb      	ldrb	r3, [r7, #15]
 8010c4e:	3301      	adds	r3, #1
 8010c50:	4941      	ldr	r1, [pc, #260]	; (8010d58 <find_pregoal+0x2ac>)
 8010c52:	0112      	lsls	r2, r2, #4
 8010c54:	440a      	add	r2, r1
 8010c56:	4413      	add	r3, r2
 8010c58:	781b      	ldrb	r3, [r3, #0]
 8010c5a:	011b      	lsls	r3, r3, #4
 8010c5c:	b2da      	uxtb	r2, r3
 8010c5e:	7bb9      	ldrb	r1, [r7, #14]
 8010c60:	7bfb      	ldrb	r3, [r7, #15]
 8010c62:	3301      	adds	r3, #1
 8010c64:	483c      	ldr	r0, [pc, #240]	; (8010d58 <find_pregoal+0x2ac>)
 8010c66:	0109      	lsls	r1, r1, #4
 8010c68:	4401      	add	r1, r0
 8010c6a:	440b      	add	r3, r1
 8010c6c:	781b      	ldrb	r3, [r3, #0]
 8010c6e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8010c72:	429a      	cmp	r2, r3
 8010c74:	d014      	beq.n	8010ca0 <find_pregoal+0x1f4>
								break_flag = 1;								//for文を抜けるフラグを立てて
 8010c76:	2301      	movs	r3, #1
 8010c78:	737b      	strb	r3, [r7, #13]
								m_step2 = smap[y][x + 1];					//仮ゴールの歩数を記録
 8010c7a:	7bba      	ldrb	r2, [r7, #14]
 8010c7c:	7bfb      	ldrb	r3, [r7, #15]
 8010c7e:	3301      	adds	r3, #1
 8010c80:	4931      	ldr	r1, [pc, #196]	; (8010d48 <find_pregoal+0x29c>)
 8010c82:	0112      	lsls	r2, r2, #4
 8010c84:	4413      	add	r3, r2
 8010c86:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8010c8a:	4b34      	ldr	r3, [pc, #208]	; (8010d5c <find_pregoal+0x2b0>)
 8010c8c:	801a      	strh	r2, [r3, #0]
								pregoal_x = x + 1;
 8010c8e:	7bfb      	ldrb	r3, [r7, #15]
 8010c90:	3301      	adds	r3, #1
 8010c92:	b2da      	uxtb	r2, r3
 8010c94:	4b32      	ldr	r3, [pc, #200]	; (8010d60 <find_pregoal+0x2b4>)
 8010c96:	701a      	strb	r2, [r3, #0]
								pregoal_y = y;								//仮goalの座標を記録
 8010c98:	4a32      	ldr	r2, [pc, #200]	; (8010d64 <find_pregoal+0x2b8>)
 8010c9a:	7bbb      	ldrb	r3, [r7, #14]
 8010c9c:	7013      	strb	r3, [r2, #0]
								break;
 8010c9e:	e0bd      	b.n	8010e1c <find_pregoal+0x370>
							}
						}
					}
					//----南壁についての処理----
					if (!(m_temp & 0x02) && y != 0) {						//南壁がなく現在最南端でないとき
 8010ca0:	78fb      	ldrb	r3, [r7, #3]
 8010ca2:	f003 0302 	and.w	r3, r3, #2
 8010ca6:	2b00      	cmp	r3, #0
 8010ca8:	d15e      	bne.n	8010d68 <find_pregoal+0x2bc>
 8010caa:	7bbb      	ldrb	r3, [r7, #14]
 8010cac:	2b00      	cmp	r3, #0
 8010cae:	d05b      	beq.n	8010d68 <find_pregoal+0x2bc>
						if (smap[y - 1][x] == 0x03e7) {						//南側が未記入なら
 8010cb0:	7bbb      	ldrb	r3, [r7, #14]
 8010cb2:	1e5a      	subs	r2, r3, #1
 8010cb4:	7bfb      	ldrb	r3, [r7, #15]
 8010cb6:	4924      	ldr	r1, [pc, #144]	; (8010d48 <find_pregoal+0x29c>)
 8010cb8:	0112      	lsls	r2, r2, #4
 8010cba:	4413      	add	r3, r2
 8010cbc:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8010cc0:	f240 32e7 	movw	r2, #999	; 0x3e7
 8010cc4:	4293      	cmp	r3, r2
 8010cc6:	d14f      	bne.n	8010d68 <find_pregoal+0x2bc>
							smap[y - 1][x] = smap[y][x] + turn;				//曲線分インクリメントした値を次のマスの歩数マップに書き込む
 8010cc8:	7bba      	ldrb	r2, [r7, #14]
 8010cca:	7bfb      	ldrb	r3, [r7, #15]
 8010ccc:	491e      	ldr	r1, [pc, #120]	; (8010d48 <find_pregoal+0x29c>)
 8010cce:	0112      	lsls	r2, r2, #4
 8010cd0:	4413      	add	r3, r2
 8010cd2:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 8010cd6:	687b      	ldr	r3, [r7, #4]
 8010cd8:	b299      	uxth	r1, r3
 8010cda:	7bbb      	ldrb	r3, [r7, #14]
 8010cdc:	1e5a      	subs	r2, r3, #1
 8010cde:	7bfb      	ldrb	r3, [r7, #15]
 8010ce0:	4401      	add	r1, r0
 8010ce2:	b288      	uxth	r0, r1
 8010ce4:	4918      	ldr	r1, [pc, #96]	; (8010d48 <find_pregoal+0x29c>)
 8010ce6:	0112      	lsls	r2, r2, #4
 8010ce8:	4413      	add	r3, r2
 8010cea:	4602      	mov	r2, r0
 8010cec:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
							if (((map[y - 1][x] & 0x0f) << 4) != (map[y - 1][x] & 0xf0)) {		//map内の上位4bitと下位4bitが異なる場合
 8010cf0:	7bbb      	ldrb	r3, [r7, #14]
 8010cf2:	1e5a      	subs	r2, r3, #1
 8010cf4:	7bfb      	ldrb	r3, [r7, #15]
 8010cf6:	4918      	ldr	r1, [pc, #96]	; (8010d58 <find_pregoal+0x2ac>)
 8010cf8:	0112      	lsls	r2, r2, #4
 8010cfa:	440a      	add	r2, r1
 8010cfc:	4413      	add	r3, r2
 8010cfe:	781b      	ldrb	r3, [r3, #0]
 8010d00:	011b      	lsls	r3, r3, #4
 8010d02:	b2da      	uxtb	r2, r3
 8010d04:	7bbb      	ldrb	r3, [r7, #14]
 8010d06:	1e59      	subs	r1, r3, #1
 8010d08:	7bfb      	ldrb	r3, [r7, #15]
 8010d0a:	4813      	ldr	r0, [pc, #76]	; (8010d58 <find_pregoal+0x2ac>)
 8010d0c:	0109      	lsls	r1, r1, #4
 8010d0e:	4401      	add	r1, r0
 8010d10:	440b      	add	r3, r1
 8010d12:	781b      	ldrb	r3, [r3, #0]
 8010d14:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8010d18:	429a      	cmp	r2, r3
 8010d1a:	d025      	beq.n	8010d68 <find_pregoal+0x2bc>
								break_flag = 1;								//for文を抜けるフラグを立てて
 8010d1c:	2301      	movs	r3, #1
 8010d1e:	737b      	strb	r3, [r7, #13]
								m_step2 = smap[y - 1][x];					//仮ゴールの歩数を記録
 8010d20:	7bbb      	ldrb	r3, [r7, #14]
 8010d22:	1e5a      	subs	r2, r3, #1
 8010d24:	7bfb      	ldrb	r3, [r7, #15]
 8010d26:	4908      	ldr	r1, [pc, #32]	; (8010d48 <find_pregoal+0x29c>)
 8010d28:	0112      	lsls	r2, r2, #4
 8010d2a:	4413      	add	r3, r2
 8010d2c:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8010d30:	4b0a      	ldr	r3, [pc, #40]	; (8010d5c <find_pregoal+0x2b0>)
 8010d32:	801a      	strh	r2, [r3, #0]
								pregoal_x = x;
 8010d34:	4a0a      	ldr	r2, [pc, #40]	; (8010d60 <find_pregoal+0x2b4>)
 8010d36:	7bfb      	ldrb	r3, [r7, #15]
 8010d38:	7013      	strb	r3, [r2, #0]
								pregoal_y = y - 1;							//仮goalの座標を記録
 8010d3a:	7bbb      	ldrb	r3, [r7, #14]
 8010d3c:	3b01      	subs	r3, #1
 8010d3e:	b2da      	uxtb	r2, r3
 8010d40:	4b08      	ldr	r3, [pc, #32]	; (8010d64 <find_pregoal+0x2b8>)
 8010d42:	701a      	strb	r2, [r3, #0]
								break;
 8010d44:	e06a      	b.n	8010e1c <find_pregoal+0x370>
 8010d46:	bf00      	nop
 8010d48:	20000d60 	.word	0x20000d60
 8010d4c:	20000f64 	.word	0x20000f64
 8010d50:	20000c0c 	.word	0x20000c0c
 8010d54:	2000034e 	.word	0x2000034e
 8010d58:	200001ac 	.word	0x200001ac
 8010d5c:	20000c04 	.word	0x20000c04
 8010d60:	20000d5c 	.word	0x20000d5c
 8010d64:	200012a1 	.word	0x200012a1
							}
						}
					}
					//----西壁についての処理----
					if (!(m_temp & 0x01) && x != 0) {						//西壁がなく現在最西端でないとき
 8010d68:	78fb      	ldrb	r3, [r7, #3]
 8010d6a:	f003 0301 	and.w	r3, r3, #1
 8010d6e:	2b00      	cmp	r3, #0
 8010d70:	d14d      	bne.n	8010e0e <find_pregoal+0x362>
 8010d72:	7bfb      	ldrb	r3, [r7, #15]
 8010d74:	2b00      	cmp	r3, #0
 8010d76:	d04a      	beq.n	8010e0e <find_pregoal+0x362>
						if (smap[y][x - 1] == 0x03e7) {						//西側が未記入なら
 8010d78:	7bba      	ldrb	r2, [r7, #14]
 8010d7a:	7bfb      	ldrb	r3, [r7, #15]
 8010d7c:	3b01      	subs	r3, #1
 8010d7e:	493e      	ldr	r1, [pc, #248]	; (8010e78 <find_pregoal+0x3cc>)
 8010d80:	0112      	lsls	r2, r2, #4
 8010d82:	4413      	add	r3, r2
 8010d84:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8010d88:	f240 32e7 	movw	r2, #999	; 0x3e7
 8010d8c:	4293      	cmp	r3, r2
 8010d8e:	d13e      	bne.n	8010e0e <find_pregoal+0x362>
							smap[y][x - 1] = smap[y][x] + turn;				//次の歩数を書き込む
 8010d90:	7bba      	ldrb	r2, [r7, #14]
 8010d92:	7bfb      	ldrb	r3, [r7, #15]
 8010d94:	4938      	ldr	r1, [pc, #224]	; (8010e78 <find_pregoal+0x3cc>)
 8010d96:	0112      	lsls	r2, r2, #4
 8010d98:	4413      	add	r3, r2
 8010d9a:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 8010d9e:	687b      	ldr	r3, [r7, #4]
 8010da0:	b299      	uxth	r1, r3
 8010da2:	7bba      	ldrb	r2, [r7, #14]
 8010da4:	7bfb      	ldrb	r3, [r7, #15]
 8010da6:	3b01      	subs	r3, #1
 8010da8:	4401      	add	r1, r0
 8010daa:	b288      	uxth	r0, r1
 8010dac:	4932      	ldr	r1, [pc, #200]	; (8010e78 <find_pregoal+0x3cc>)
 8010dae:	0112      	lsls	r2, r2, #4
 8010db0:	4413      	add	r3, r2
 8010db2:	4602      	mov	r2, r0
 8010db4:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
							if (((map[y][x - 1] & 0x0f) << 4) != (map[y][x - 1] & 0xf0)) {		//map内の上位4bitと下位4bitが異なる場合
 8010db8:	7bba      	ldrb	r2, [r7, #14]
 8010dba:	7bfb      	ldrb	r3, [r7, #15]
 8010dbc:	3b01      	subs	r3, #1
 8010dbe:	492f      	ldr	r1, [pc, #188]	; (8010e7c <find_pregoal+0x3d0>)
 8010dc0:	0112      	lsls	r2, r2, #4
 8010dc2:	440a      	add	r2, r1
 8010dc4:	4413      	add	r3, r2
 8010dc6:	781b      	ldrb	r3, [r3, #0]
 8010dc8:	011b      	lsls	r3, r3, #4
 8010dca:	b2da      	uxtb	r2, r3
 8010dcc:	7bb9      	ldrb	r1, [r7, #14]
 8010dce:	7bfb      	ldrb	r3, [r7, #15]
 8010dd0:	3b01      	subs	r3, #1
 8010dd2:	482a      	ldr	r0, [pc, #168]	; (8010e7c <find_pregoal+0x3d0>)
 8010dd4:	0109      	lsls	r1, r1, #4
 8010dd6:	4401      	add	r1, r0
 8010dd8:	440b      	add	r3, r1
 8010dda:	781b      	ldrb	r3, [r3, #0]
 8010ddc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8010de0:	429a      	cmp	r2, r3
 8010de2:	d014      	beq.n	8010e0e <find_pregoal+0x362>
								break_flag = 1;								//for文を抜けるフラグを立てて
 8010de4:	2301      	movs	r3, #1
 8010de6:	737b      	strb	r3, [r7, #13]
								m_step2 = smap[y][x - 1];					//仮ゴールの歩数を記録
 8010de8:	7bba      	ldrb	r2, [r7, #14]
 8010dea:	7bfb      	ldrb	r3, [r7, #15]
 8010dec:	3b01      	subs	r3, #1
 8010dee:	4922      	ldr	r1, [pc, #136]	; (8010e78 <find_pregoal+0x3cc>)
 8010df0:	0112      	lsls	r2, r2, #4
 8010df2:	4413      	add	r3, r2
 8010df4:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8010df8:	4b21      	ldr	r3, [pc, #132]	; (8010e80 <find_pregoal+0x3d4>)
 8010dfa:	801a      	strh	r2, [r3, #0]
								pregoal_x = x - 1;
 8010dfc:	7bfb      	ldrb	r3, [r7, #15]
 8010dfe:	3b01      	subs	r3, #1
 8010e00:	b2da      	uxtb	r2, r3
 8010e02:	4b20      	ldr	r3, [pc, #128]	; (8010e84 <find_pregoal+0x3d8>)
 8010e04:	701a      	strb	r2, [r3, #0]
								pregoal_y = y;								//仮goalの座標を記録
 8010e06:	4a20      	ldr	r2, [pc, #128]	; (8010e88 <find_pregoal+0x3dc>)
 8010e08:	7bbb      	ldrb	r3, [r7, #14]
 8010e0a:	7013      	strb	r3, [r2, #0]
								break;							}
 8010e0c:	e006      	b.n	8010e1c <find_pregoal+0x370>
			for (x = 0; x <= 0x0f; x++) {									//各X座標で実行
 8010e0e:	7bfb      	ldrb	r3, [r7, #15]
 8010e10:	3301      	adds	r3, #1
 8010e12:	73fb      	strb	r3, [r7, #15]
 8010e14:	7bfb      	ldrb	r3, [r7, #15]
 8010e16:	2b0f      	cmp	r3, #15
 8010e18:	f67f ae88 	bls.w	8010b2c <find_pregoal+0x80>
						}
					}
				}
			}
			if (break_flag) break;		//map内の上位4bitと下位4bitが異なる場合、for文を抜ける
 8010e1c:	7b7b      	ldrb	r3, [r7, #13]
 8010e1e:	2b00      	cmp	r3, #0
 8010e20:	d107      	bne.n	8010e32 <find_pregoal+0x386>
		for (y = 0; y <= 0x0f; y++) {										//各Y座標で実行
 8010e22:	7bbb      	ldrb	r3, [r7, #14]
 8010e24:	3301      	adds	r3, #1
 8010e26:	73bb      	strb	r3, [r7, #14]
 8010e28:	7bbb      	ldrb	r3, [r7, #14]
 8010e2a:	2b0f      	cmp	r3, #15
 8010e2c:	f67f ae7b 	bls.w	8010b26 <find_pregoal+0x7a>
 8010e30:	e000      	b.n	8010e34 <find_pregoal+0x388>
			if (break_flag) break;		//map内の上位4bitと下位4bitが異なる場合、for文を抜ける
 8010e32:	bf00      	nop
		}
		//====歩数カウンタのインクリメント====
		m_step++;
 8010e34:	4b15      	ldr	r3, [pc, #84]	; (8010e8c <find_pregoal+0x3e0>)
 8010e36:	881b      	ldrh	r3, [r3, #0]
 8010e38:	3301      	adds	r3, #1
 8010e3a:	b29a      	uxth	r2, r3
 8010e3c:	4b13      	ldr	r3, [pc, #76]	; (8010e8c <find_pregoal+0x3e0>)
 8010e3e:	801a      	strh	r2, [r3, #0]
		if(m_step > 500) MF2.FLAG.ALLMAP = 1;
 8010e40:	4b12      	ldr	r3, [pc, #72]	; (8010e8c <find_pregoal+0x3e0>)
 8010e42:	881b      	ldrh	r3, [r3, #0]
 8010e44:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8010e48:	d904      	bls.n	8010e54 <find_pregoal+0x3a8>
 8010e4a:	4a11      	ldr	r2, [pc, #68]	; (8010e90 <find_pregoal+0x3e4>)
 8010e4c:	8813      	ldrh	r3, [r2, #0]
 8010e4e:	f043 0304 	orr.w	r3, r3, #4
 8010e52:	8013      	strh	r3, [r2, #0]
	} while(break_flag == 0 && MF2.FLAG.ALLMAP != 1);		//未探索壁ありマスを見つけるまで実行
 8010e54:	7b7b      	ldrb	r3, [r7, #13]
 8010e56:	2b00      	cmp	r3, #0
 8010e58:	d107      	bne.n	8010e6a <find_pregoal+0x3be>
 8010e5a:	4b0d      	ldr	r3, [pc, #52]	; (8010e90 <find_pregoal+0x3e4>)
 8010e5c:	881b      	ldrh	r3, [r3, #0]
 8010e5e:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8010e62:	b2db      	uxtb	r3, r3
 8010e64:	2b01      	cmp	r3, #1
 8010e66:	f47f ae5b 	bne.w	8010b20 <find_pregoal+0x74>
}
 8010e6a:	bf00      	nop
 8010e6c:	3714      	adds	r7, #20
 8010e6e:	46bd      	mov	sp, r7
 8010e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e74:	4770      	bx	lr
 8010e76:	bf00      	nop
 8010e78:	20000d60 	.word	0x20000d60
 8010e7c:	200001ac 	.word	0x200001ac
 8010e80:	20000c04 	.word	0x20000c04
 8010e84:	20000d5c 	.word	0x20000d5c
 8010e88:	200012a1 	.word	0x200012a1
 8010e8c:	2000034e 	.word	0x2000034e
 8010e90:	20000f64 	.word	0x20000f64

08010e94 <make_smap2>:
//	歩数マップを作成する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void make_smap2()
{
 8010e94:	b480      	push	{r7}
 8010e96:	b085      	sub	sp, #20
 8010e98:	af00      	add	r7, sp, #0
	//====変数宣言====
	uint8_t x, y;															//for文用変数
	uint8_t m_temp;															//マップデータ一時保持

	//====歩数マップのクリア====
	for (y = 0; y <= 0x0f; y++) {											//各Y座標で実行
 8010e9a:	2300      	movs	r3, #0
 8010e9c:	73bb      	strb	r3, [r7, #14]
 8010e9e:	e014      	b.n	8010eca <make_smap2+0x36>
		for (x = 0; x <= 0x0f; x++) {										//各X座標で実行
 8010ea0:	2300      	movs	r3, #0
 8010ea2:	73fb      	strb	r3, [r7, #15]
 8010ea4:	e00b      	b.n	8010ebe <make_smap2+0x2a>
			smap[y][x] = 0x03e7;											//未記入部分は歩数最大とする
 8010ea6:	7bba      	ldrb	r2, [r7, #14]
 8010ea8:	7bfb      	ldrb	r3, [r7, #15]
 8010eaa:	4986      	ldr	r1, [pc, #536]	; (80110c4 <make_smap2+0x230>)
 8010eac:	0112      	lsls	r2, r2, #4
 8010eae:	4413      	add	r3, r2
 8010eb0:	f240 32e7 	movw	r2, #999	; 0x3e7
 8010eb4:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for (x = 0; x <= 0x0f; x++) {										//各X座標で実行
 8010eb8:	7bfb      	ldrb	r3, [r7, #15]
 8010eba:	3301      	adds	r3, #1
 8010ebc:	73fb      	strb	r3, [r7, #15]
 8010ebe:	7bfb      	ldrb	r3, [r7, #15]
 8010ec0:	2b0f      	cmp	r3, #15
 8010ec2:	d9f0      	bls.n	8010ea6 <make_smap2+0x12>
	for (y = 0; y <= 0x0f; y++) {											//各Y座標で実行
 8010ec4:	7bbb      	ldrb	r3, [r7, #14]
 8010ec6:	3301      	adds	r3, #1
 8010ec8:	73bb      	strb	r3, [r7, #14]
 8010eca:	7bbb      	ldrb	r3, [r7, #14]
 8010ecc:	2b0f      	cmp	r3, #15
 8010ece:	d9e7      	bls.n	8010ea0 <make_smap2+0xc>
		}
	}

	//====仮ゴール座標を0にする====
	smap[pregoal_y][pregoal_x] = 0;
 8010ed0:	4b7d      	ldr	r3, [pc, #500]	; (80110c8 <make_smap2+0x234>)
 8010ed2:	781b      	ldrb	r3, [r3, #0]
 8010ed4:	4618      	mov	r0, r3
 8010ed6:	4b7d      	ldr	r3, [pc, #500]	; (80110cc <make_smap2+0x238>)
 8010ed8:	781b      	ldrb	r3, [r3, #0]
 8010eda:	4619      	mov	r1, r3
 8010edc:	4a79      	ldr	r2, [pc, #484]	; (80110c4 <make_smap2+0x230>)
 8010ede:	0103      	lsls	r3, r0, #4
 8010ee0:	440b      	add	r3, r1
 8010ee2:	2100      	movs	r1, #0
 8010ee4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

	//====歩数カウンタを0にする====
	m_step = 0;																//現在記入した最大の歩数となる
 8010ee8:	4b79      	ldr	r3, [pc, #484]	; (80110d0 <make_smap2+0x23c>)
 8010eea:	2200      	movs	r2, #0
 8010eec:	801a      	strh	r2, [r3, #0]

	//====歩数カウンタの重みづけ====
	int straight = 3;
 8010eee:	2303      	movs	r3, #3
 8010ef0:	60bb      	str	r3, [r7, #8]
	int turn = 5;
 8010ef2:	2305      	movs	r3, #5
 8010ef4:	607b      	str	r3, [r7, #4]

	//====自分の座標にたどり着くまでループ====
	do {
		//----マップ全域を捜索----
		for (y = 0; y <= 0x0f; y++) {										//各Y座標で実行
 8010ef6:	2300      	movs	r3, #0
 8010ef8:	73bb      	strb	r3, [r7, #14]
 8010efa:	e0c0      	b.n	801107e <make_smap2+0x1ea>
			for (x = 0; x <= 0x0f; x++) {									//各X座標で実行
 8010efc:	2300      	movs	r3, #0
 8010efe:	73fb      	strb	r3, [r7, #15]
 8010f00:	e0b6      	b.n	8011070 <make_smap2+0x1dc>
				//----現在最大の歩数を発見したとき----
				if (smap[y][x] == m_step) {									//歩数格納変数m_stepの値が現在最大の歩数のとき
 8010f02:	7bba      	ldrb	r2, [r7, #14]
 8010f04:	7bfb      	ldrb	r3, [r7, #15]
 8010f06:	496f      	ldr	r1, [pc, #444]	; (80110c4 <make_smap2+0x230>)
 8010f08:	0112      	lsls	r2, r2, #4
 8010f0a:	4413      	add	r3, r2
 8010f0c:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8010f10:	4b6f      	ldr	r3, [pc, #444]	; (80110d0 <make_smap2+0x23c>)
 8010f12:	881b      	ldrh	r3, [r3, #0]
 8010f14:	429a      	cmp	r2, r3
 8010f16:	f040 80a8 	bne.w	801106a <make_smap2+0x1d6>
					m_temp = map[y][x];										//map配列からマップデータを取り出す
 8010f1a:	7bba      	ldrb	r2, [r7, #14]
 8010f1c:	7bfb      	ldrb	r3, [r7, #15]
 8010f1e:	496d      	ldr	r1, [pc, #436]	; (80110d4 <make_smap2+0x240>)
 8010f20:	0112      	lsls	r2, r2, #4
 8010f22:	440a      	add	r2, r1
 8010f24:	4413      	add	r3, r2
 8010f26:	781b      	ldrb	r3, [r3, #0]
 8010f28:	70fb      	strb	r3, [r7, #3]
					//----北壁についての処理----
					if (!(m_temp & 0x08) && y != 0x0f) {					//北壁がなく現在最北端でないとき
 8010f2a:	78fb      	ldrb	r3, [r7, #3]
 8010f2c:	f003 0308 	and.w	r3, r3, #8
 8010f30:	2b00      	cmp	r3, #0
 8010f32:	d122      	bne.n	8010f7a <make_smap2+0xe6>
 8010f34:	7bbb      	ldrb	r3, [r7, #14]
 8010f36:	2b0f      	cmp	r3, #15
 8010f38:	d01f      	beq.n	8010f7a <make_smap2+0xe6>
						if (smap[y + 1][x] == 0x03e7) {						//北側が未記入なら
 8010f3a:	7bbb      	ldrb	r3, [r7, #14]
 8010f3c:	1c5a      	adds	r2, r3, #1
 8010f3e:	7bfb      	ldrb	r3, [r7, #15]
 8010f40:	4960      	ldr	r1, [pc, #384]	; (80110c4 <make_smap2+0x230>)
 8010f42:	0112      	lsls	r2, r2, #4
 8010f44:	4413      	add	r3, r2
 8010f46:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8010f4a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8010f4e:	4293      	cmp	r3, r2
 8010f50:	d113      	bne.n	8010f7a <make_smap2+0xe6>
							smap[y + 1][x] = smap[y][x] + turn;				//曲線分インクリメントした値を次のマスの歩数マップに書き込む
 8010f52:	7bba      	ldrb	r2, [r7, #14]
 8010f54:	7bfb      	ldrb	r3, [r7, #15]
 8010f56:	495b      	ldr	r1, [pc, #364]	; (80110c4 <make_smap2+0x230>)
 8010f58:	0112      	lsls	r2, r2, #4
 8010f5a:	4413      	add	r3, r2
 8010f5c:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 8010f60:	687b      	ldr	r3, [r7, #4]
 8010f62:	b299      	uxth	r1, r3
 8010f64:	7bbb      	ldrb	r3, [r7, #14]
 8010f66:	1c5a      	adds	r2, r3, #1
 8010f68:	7bfb      	ldrb	r3, [r7, #15]
 8010f6a:	4401      	add	r1, r0
 8010f6c:	b288      	uxth	r0, r1
 8010f6e:	4955      	ldr	r1, [pc, #340]	; (80110c4 <make_smap2+0x230>)
 8010f70:	0112      	lsls	r2, r2, #4
 8010f72:	4413      	add	r3, r2
 8010f74:	4602      	mov	r2, r0
 8010f76:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
						}
					}
					//----東壁についての処理----
					if (!(m_temp & 0x04) && x != 0x0f) {					//東壁がなく現在最東端でないとき
 8010f7a:	78fb      	ldrb	r3, [r7, #3]
 8010f7c:	f003 0304 	and.w	r3, r3, #4
 8010f80:	2b00      	cmp	r3, #0
 8010f82:	d122      	bne.n	8010fca <make_smap2+0x136>
 8010f84:	7bfb      	ldrb	r3, [r7, #15]
 8010f86:	2b0f      	cmp	r3, #15
 8010f88:	d01f      	beq.n	8010fca <make_smap2+0x136>
						if (smap[y][x + 1] == 0x03e7) {						//東側が未記入なら
 8010f8a:	7bba      	ldrb	r2, [r7, #14]
 8010f8c:	7bfb      	ldrb	r3, [r7, #15]
 8010f8e:	3301      	adds	r3, #1
 8010f90:	494c      	ldr	r1, [pc, #304]	; (80110c4 <make_smap2+0x230>)
 8010f92:	0112      	lsls	r2, r2, #4
 8010f94:	4413      	add	r3, r2
 8010f96:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8010f9a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8010f9e:	4293      	cmp	r3, r2
 8010fa0:	d113      	bne.n	8010fca <make_smap2+0x136>
							smap[y][x + 1] = smap[y][x] + turn;				//曲線分インクリメントした値を次のマスの歩数マップに書き込む
 8010fa2:	7bba      	ldrb	r2, [r7, #14]
 8010fa4:	7bfb      	ldrb	r3, [r7, #15]
 8010fa6:	4947      	ldr	r1, [pc, #284]	; (80110c4 <make_smap2+0x230>)
 8010fa8:	0112      	lsls	r2, r2, #4
 8010faa:	4413      	add	r3, r2
 8010fac:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 8010fb0:	687b      	ldr	r3, [r7, #4]
 8010fb2:	b299      	uxth	r1, r3
 8010fb4:	7bba      	ldrb	r2, [r7, #14]
 8010fb6:	7bfb      	ldrb	r3, [r7, #15]
 8010fb8:	3301      	adds	r3, #1
 8010fba:	4401      	add	r1, r0
 8010fbc:	b288      	uxth	r0, r1
 8010fbe:	4941      	ldr	r1, [pc, #260]	; (80110c4 <make_smap2+0x230>)
 8010fc0:	0112      	lsls	r2, r2, #4
 8010fc2:	4413      	add	r3, r2
 8010fc4:	4602      	mov	r2, r0
 8010fc6:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
						}
					}
					//----南壁についての処理----
					if (!(m_temp & 0x02) && y != 0) {						//南壁がなく現在最南端でないとき
 8010fca:	78fb      	ldrb	r3, [r7, #3]
 8010fcc:	f003 0302 	and.w	r3, r3, #2
 8010fd0:	2b00      	cmp	r3, #0
 8010fd2:	d122      	bne.n	801101a <make_smap2+0x186>
 8010fd4:	7bbb      	ldrb	r3, [r7, #14]
 8010fd6:	2b00      	cmp	r3, #0
 8010fd8:	d01f      	beq.n	801101a <make_smap2+0x186>
						if (smap[y - 1][x] == 0x03e7) {						//南側が未記入なら
 8010fda:	7bbb      	ldrb	r3, [r7, #14]
 8010fdc:	1e5a      	subs	r2, r3, #1
 8010fde:	7bfb      	ldrb	r3, [r7, #15]
 8010fe0:	4938      	ldr	r1, [pc, #224]	; (80110c4 <make_smap2+0x230>)
 8010fe2:	0112      	lsls	r2, r2, #4
 8010fe4:	4413      	add	r3, r2
 8010fe6:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8010fea:	f240 32e7 	movw	r2, #999	; 0x3e7
 8010fee:	4293      	cmp	r3, r2
 8010ff0:	d113      	bne.n	801101a <make_smap2+0x186>
							smap[y - 1][x] = smap[y][x] + turn;				//曲線分インクリメントした値を次のマスの歩数マップに書き込む
 8010ff2:	7bba      	ldrb	r2, [r7, #14]
 8010ff4:	7bfb      	ldrb	r3, [r7, #15]
 8010ff6:	4933      	ldr	r1, [pc, #204]	; (80110c4 <make_smap2+0x230>)
 8010ff8:	0112      	lsls	r2, r2, #4
 8010ffa:	4413      	add	r3, r2
 8010ffc:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 8011000:	687b      	ldr	r3, [r7, #4]
 8011002:	b299      	uxth	r1, r3
 8011004:	7bbb      	ldrb	r3, [r7, #14]
 8011006:	1e5a      	subs	r2, r3, #1
 8011008:	7bfb      	ldrb	r3, [r7, #15]
 801100a:	4401      	add	r1, r0
 801100c:	b288      	uxth	r0, r1
 801100e:	492d      	ldr	r1, [pc, #180]	; (80110c4 <make_smap2+0x230>)
 8011010:	0112      	lsls	r2, r2, #4
 8011012:	4413      	add	r3, r2
 8011014:	4602      	mov	r2, r0
 8011016:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
						}
					}
					//----西壁についての処理----
					if (!(m_temp & 0x01) && x != 0) {						//西壁がなく現在最西端でないとき
 801101a:	78fb      	ldrb	r3, [r7, #3]
 801101c:	f003 0301 	and.w	r3, r3, #1
 8011020:	2b00      	cmp	r3, #0
 8011022:	d122      	bne.n	801106a <make_smap2+0x1d6>
 8011024:	7bfb      	ldrb	r3, [r7, #15]
 8011026:	2b00      	cmp	r3, #0
 8011028:	d01f      	beq.n	801106a <make_smap2+0x1d6>
						if (smap[y][x - 1] == 0x03e7) {						//西側が未記入なら
 801102a:	7bba      	ldrb	r2, [r7, #14]
 801102c:	7bfb      	ldrb	r3, [r7, #15]
 801102e:	3b01      	subs	r3, #1
 8011030:	4924      	ldr	r1, [pc, #144]	; (80110c4 <make_smap2+0x230>)
 8011032:	0112      	lsls	r2, r2, #4
 8011034:	4413      	add	r3, r2
 8011036:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 801103a:	f240 32e7 	movw	r2, #999	; 0x3e7
 801103e:	4293      	cmp	r3, r2
 8011040:	d113      	bne.n	801106a <make_smap2+0x1d6>
							smap[y][x - 1] = smap[y][x] + turn;				//次の歩数を書き込む
 8011042:	7bba      	ldrb	r2, [r7, #14]
 8011044:	7bfb      	ldrb	r3, [r7, #15]
 8011046:	491f      	ldr	r1, [pc, #124]	; (80110c4 <make_smap2+0x230>)
 8011048:	0112      	lsls	r2, r2, #4
 801104a:	4413      	add	r3, r2
 801104c:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 8011050:	687b      	ldr	r3, [r7, #4]
 8011052:	b299      	uxth	r1, r3
 8011054:	7bba      	ldrb	r2, [r7, #14]
 8011056:	7bfb      	ldrb	r3, [r7, #15]
 8011058:	3b01      	subs	r3, #1
 801105a:	4401      	add	r1, r0
 801105c:	b288      	uxth	r0, r1
 801105e:	4919      	ldr	r1, [pc, #100]	; (80110c4 <make_smap2+0x230>)
 8011060:	0112      	lsls	r2, r2, #4
 8011062:	4413      	add	r3, r2
 8011064:	4602      	mov	r2, r0
 8011066:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			for (x = 0; x <= 0x0f; x++) {									//各X座標で実行
 801106a:	7bfb      	ldrb	r3, [r7, #15]
 801106c:	3301      	adds	r3, #1
 801106e:	73fb      	strb	r3, [r7, #15]
 8011070:	7bfb      	ldrb	r3, [r7, #15]
 8011072:	2b0f      	cmp	r3, #15
 8011074:	f67f af45 	bls.w	8010f02 <make_smap2+0x6e>
		for (y = 0; y <= 0x0f; y++) {										//各Y座標で実行
 8011078:	7bbb      	ldrb	r3, [r7, #14]
 801107a:	3301      	adds	r3, #1
 801107c:	73bb      	strb	r3, [r7, #14]
 801107e:	7bbb      	ldrb	r3, [r7, #14]
 8011080:	2b0f      	cmp	r3, #15
 8011082:	f67f af3b 	bls.w	8010efc <make_smap2+0x68>
					}
				}
			}
		}
		//====歩数カウンタのインクリメント====
		m_step++;
 8011086:	4b12      	ldr	r3, [pc, #72]	; (80110d0 <make_smap2+0x23c>)
 8011088:	881b      	ldrh	r3, [r3, #0]
 801108a:	3301      	adds	r3, #1
 801108c:	b29a      	uxth	r2, r3
 801108e:	4b10      	ldr	r3, [pc, #64]	; (80110d0 <make_smap2+0x23c>)
 8011090:	801a      	strh	r2, [r3, #0]
	} while (smap[mouse.y][mouse.x] == 0x03e7);		//現在座標が未記入ではなくなるまで実行
 8011092:	4b11      	ldr	r3, [pc, #68]	; (80110d8 <make_smap2+0x244>)
 8011094:	785b      	ldrb	r3, [r3, #1]
 8011096:	b2db      	uxtb	r3, r3
 8011098:	4618      	mov	r0, r3
 801109a:	4b0f      	ldr	r3, [pc, #60]	; (80110d8 <make_smap2+0x244>)
 801109c:	781b      	ldrb	r3, [r3, #0]
 801109e:	b2db      	uxtb	r3, r3
 80110a0:	4619      	mov	r1, r3
 80110a2:	4a08      	ldr	r2, [pc, #32]	; (80110c4 <make_smap2+0x230>)
 80110a4:	0103      	lsls	r3, r0, #4
 80110a6:	440b      	add	r3, r1
 80110a8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80110ac:	f240 32e7 	movw	r2, #999	; 0x3e7
 80110b0:	4293      	cmp	r3, r2
 80110b2:	f43f af20 	beq.w	8010ef6 <make_smap2+0x62>
}
 80110b6:	bf00      	nop
 80110b8:	3714      	adds	r7, #20
 80110ba:	46bd      	mov	sp, r7
 80110bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110c0:	4770      	bx	lr
 80110c2:	bf00      	nop
 80110c4:	20000d60 	.word	0x20000d60
 80110c8:	200012a1 	.word	0x200012a1
 80110cc:	20000d5c 	.word	0x20000d5c
 80110d0:	2000034e 	.word	0x2000034e
 80110d4:	200001ac 	.word	0x200001ac
 80110d8:	20000c0c 	.word	0x20000c0c

080110dc <pass_route2>:
//pass_route2
// route配列をpass圧縮する(半区画ベース)
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void pass_route2(void){
 80110dc:	b480      	push	{r7}
 80110de:	b083      	sub	sp, #12
 80110e0:	af00      	add	r7, sp, #0
	int i;
	uint8_t s_flag = 0;
 80110e2:	2300      	movs	r3, #0
 80110e4:	70fb      	strb	r3, [r7, #3]
	for(i = 0; i < 256; i++){
 80110e6:	2300      	movs	r3, #0
 80110e8:	607b      	str	r3, [r7, #4]
 80110ea:	e007      	b.n	80110fc <pass_route2+0x20>
		pass[i] = 0;								//pass配列の初期化
 80110ec:	4a83      	ldr	r2, [pc, #524]	; (80112fc <pass_route2+0x220>)
 80110ee:	687b      	ldr	r3, [r7, #4]
 80110f0:	4413      	add	r3, r2
 80110f2:	2200      	movs	r2, #0
 80110f4:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < 256; i++){
 80110f6:	687b      	ldr	r3, [r7, #4]
 80110f8:	3301      	adds	r3, #1
 80110fa:	607b      	str	r3, [r7, #4]
 80110fc:	687b      	ldr	r3, [r7, #4]
 80110fe:	2bff      	cmp	r3, #255	; 0xff
 8011100:	ddf4      	ble.n	80110ec <pass_route2+0x10>
	}
	uint8_t p = 0;									//pass配列の配列番号用変数
 8011102:	2300      	movs	r3, #0
 8011104:	70bb      	strb	r3, [r7, #2]
	i = 0;
 8011106:	2300      	movs	r3, #0
 8011108:	607b      	str	r3, [r7, #4]
	uint8_t s = 0;									//a直線数カウント用変数
 801110a:	2300      	movs	r3, #0
 801110c:	707b      	strb	r3, [r7, #1]
	while(route[i-1] != 0xff){
 801110e:	e0e8      	b.n	80112e2 <pass_route2+0x206>
		s = 0;
 8011110:	2300      	movs	r3, #0
 8011112:	707b      	strb	r3, [r7, #1]
		if(route[i] == 0x44){
 8011114:	4a7a      	ldr	r2, [pc, #488]	; (8011300 <pass_route2+0x224>)
 8011116:	687b      	ldr	r3, [r7, #4]
 8011118:	4413      	add	r3, r2
 801111a:	781b      	ldrb	r3, [r3, #0]
 801111c:	2b44      	cmp	r3, #68	; 0x44
 801111e:	d107      	bne.n	8011130 <pass_route2+0x54>
			pass[p] = -1;							//a右スラローム
 8011120:	78bb      	ldrb	r3, [r7, #2]
 8011122:	4a76      	ldr	r2, [pc, #472]	; (80112fc <pass_route2+0x220>)
 8011124:	21ff      	movs	r1, #255	; 0xff
 8011126:	54d1      	strb	r1, [r2, r3]
			i++;
 8011128:	687b      	ldr	r3, [r7, #4]
 801112a:	3301      	adds	r3, #1
 801112c:	607b      	str	r3, [r7, #4]
 801112e:	e0d5      	b.n	80112dc <pass_route2+0x200>
		}else if(route[i] == 0x11){
 8011130:	4a73      	ldr	r2, [pc, #460]	; (8011300 <pass_route2+0x224>)
 8011132:	687b      	ldr	r3, [r7, #4]
 8011134:	4413      	add	r3, r2
 8011136:	781b      	ldrb	r3, [r3, #0]
 8011138:	2b11      	cmp	r3, #17
 801113a:	d107      	bne.n	801114c <pass_route2+0x70>
			pass[p] = -2;							//a左スラローム
 801113c:	78bb      	ldrb	r3, [r7, #2]
 801113e:	4a6f      	ldr	r2, [pc, #444]	; (80112fc <pass_route2+0x220>)
 8011140:	21fe      	movs	r1, #254	; 0xfe
 8011142:	54d1      	strb	r1, [r2, r3]
			i++;
 8011144:	687b      	ldr	r3, [r7, #4]
 8011146:	3301      	adds	r3, #1
 8011148:	607b      	str	r3, [r7, #4]
 801114a:	e0c7      	b.n	80112dc <pass_route2+0x200>
		}else if(route[i] == 0x77 && route[i+1] == 0x44 && route[i+2] == 0x77){
 801114c:	4a6c      	ldr	r2, [pc, #432]	; (8011300 <pass_route2+0x224>)
 801114e:	687b      	ldr	r3, [r7, #4]
 8011150:	4413      	add	r3, r2
 8011152:	781b      	ldrb	r3, [r3, #0]
 8011154:	2b77      	cmp	r3, #119	; 0x77
 8011156:	d115      	bne.n	8011184 <pass_route2+0xa8>
 8011158:	687b      	ldr	r3, [r7, #4]
 801115a:	3301      	adds	r3, #1
 801115c:	4a68      	ldr	r2, [pc, #416]	; (8011300 <pass_route2+0x224>)
 801115e:	5cd3      	ldrb	r3, [r2, r3]
 8011160:	2b44      	cmp	r3, #68	; 0x44
 8011162:	d10f      	bne.n	8011184 <pass_route2+0xa8>
 8011164:	687b      	ldr	r3, [r7, #4]
 8011166:	3302      	adds	r3, #2
 8011168:	4a65      	ldr	r2, [pc, #404]	; (8011300 <pass_route2+0x224>)
 801116a:	5cd3      	ldrb	r3, [r2, r3]
 801116c:	2b77      	cmp	r3, #119	; 0x77
 801116e:	d109      	bne.n	8011184 <pass_route2+0xa8>
			s_flag = 0;
 8011170:	2300      	movs	r3, #0
 8011172:	70fb      	strb	r3, [r7, #3]
			pass[p] = -3;							//a大回り右スラローム
 8011174:	78bb      	ldrb	r3, [r7, #2]
 8011176:	4a61      	ldr	r2, [pc, #388]	; (80112fc <pass_route2+0x220>)
 8011178:	21fd      	movs	r1, #253	; 0xfd
 801117a:	54d1      	strb	r1, [r2, r3]
			i = i + 3;
 801117c:	687b      	ldr	r3, [r7, #4]
 801117e:	3303      	adds	r3, #3
 8011180:	607b      	str	r3, [r7, #4]
 8011182:	e0ab      	b.n	80112dc <pass_route2+0x200>
		}else if(route[i] == 0x77 && route[i+1] == 0x11 && route[i+2] == 0x77){
 8011184:	4a5e      	ldr	r2, [pc, #376]	; (8011300 <pass_route2+0x224>)
 8011186:	687b      	ldr	r3, [r7, #4]
 8011188:	4413      	add	r3, r2
 801118a:	781b      	ldrb	r3, [r3, #0]
 801118c:	2b77      	cmp	r3, #119	; 0x77
 801118e:	d115      	bne.n	80111bc <pass_route2+0xe0>
 8011190:	687b      	ldr	r3, [r7, #4]
 8011192:	3301      	adds	r3, #1
 8011194:	4a5a      	ldr	r2, [pc, #360]	; (8011300 <pass_route2+0x224>)
 8011196:	5cd3      	ldrb	r3, [r2, r3]
 8011198:	2b11      	cmp	r3, #17
 801119a:	d10f      	bne.n	80111bc <pass_route2+0xe0>
 801119c:	687b      	ldr	r3, [r7, #4]
 801119e:	3302      	adds	r3, #2
 80111a0:	4a57      	ldr	r2, [pc, #348]	; (8011300 <pass_route2+0x224>)
 80111a2:	5cd3      	ldrb	r3, [r2, r3]
 80111a4:	2b77      	cmp	r3, #119	; 0x77
 80111a6:	d109      	bne.n	80111bc <pass_route2+0xe0>
			s_flag = 0;
 80111a8:	2300      	movs	r3, #0
 80111aa:	70fb      	strb	r3, [r7, #3]
			pass[p] = -4;							//a大回り左スラローム
 80111ac:	78bb      	ldrb	r3, [r7, #2]
 80111ae:	4a53      	ldr	r2, [pc, #332]	; (80112fc <pass_route2+0x220>)
 80111b0:	21fc      	movs	r1, #252	; 0xfc
 80111b2:	54d1      	strb	r1, [r2, r3]
			i = i + 3;
 80111b4:	687b      	ldr	r3, [r7, #4]
 80111b6:	3303      	adds	r3, #3
 80111b8:	607b      	str	r3, [r7, #4]
 80111ba:	e08f      	b.n	80112dc <pass_route2+0x200>
		}else if(route[i] == 0x77 && route[i+1] == 0x44 && route[i+2] == 0x44 && route[i+3] == 0x77){
 80111bc:	4a50      	ldr	r2, [pc, #320]	; (8011300 <pass_route2+0x224>)
 80111be:	687b      	ldr	r3, [r7, #4]
 80111c0:	4413      	add	r3, r2
 80111c2:	781b      	ldrb	r3, [r3, #0]
 80111c4:	2b77      	cmp	r3, #119	; 0x77
 80111c6:	d11b      	bne.n	8011200 <pass_route2+0x124>
 80111c8:	687b      	ldr	r3, [r7, #4]
 80111ca:	3301      	adds	r3, #1
 80111cc:	4a4c      	ldr	r2, [pc, #304]	; (8011300 <pass_route2+0x224>)
 80111ce:	5cd3      	ldrb	r3, [r2, r3]
 80111d0:	2b44      	cmp	r3, #68	; 0x44
 80111d2:	d115      	bne.n	8011200 <pass_route2+0x124>
 80111d4:	687b      	ldr	r3, [r7, #4]
 80111d6:	3302      	adds	r3, #2
 80111d8:	4a49      	ldr	r2, [pc, #292]	; (8011300 <pass_route2+0x224>)
 80111da:	5cd3      	ldrb	r3, [r2, r3]
 80111dc:	2b44      	cmp	r3, #68	; 0x44
 80111de:	d10f      	bne.n	8011200 <pass_route2+0x124>
 80111e0:	687b      	ldr	r3, [r7, #4]
 80111e2:	3303      	adds	r3, #3
 80111e4:	4a46      	ldr	r2, [pc, #280]	; (8011300 <pass_route2+0x224>)
 80111e6:	5cd3      	ldrb	r3, [r2, r3]
 80111e8:	2b77      	cmp	r3, #119	; 0x77
 80111ea:	d109      	bne.n	8011200 <pass_route2+0x124>
			s_flag = 0;
 80111ec:	2300      	movs	r3, #0
 80111ee:	70fb      	strb	r3, [r7, #3]
			pass[p] = -5;							//a大回り右180スラローム
 80111f0:	78bb      	ldrb	r3, [r7, #2]
 80111f2:	4a42      	ldr	r2, [pc, #264]	; (80112fc <pass_route2+0x220>)
 80111f4:	21fb      	movs	r1, #251	; 0xfb
 80111f6:	54d1      	strb	r1, [r2, r3]
			i = i + 4;
 80111f8:	687b      	ldr	r3, [r7, #4]
 80111fa:	3304      	adds	r3, #4
 80111fc:	607b      	str	r3, [r7, #4]
 80111fe:	e06d      	b.n	80112dc <pass_route2+0x200>
		}else if(route[i] == 0x77 && route[i+1] == 0x11 && route[i+2] == 0x11 && route[i+3] == 0x77){
 8011200:	4a3f      	ldr	r2, [pc, #252]	; (8011300 <pass_route2+0x224>)
 8011202:	687b      	ldr	r3, [r7, #4]
 8011204:	4413      	add	r3, r2
 8011206:	781b      	ldrb	r3, [r3, #0]
 8011208:	2b77      	cmp	r3, #119	; 0x77
 801120a:	d11b      	bne.n	8011244 <pass_route2+0x168>
 801120c:	687b      	ldr	r3, [r7, #4]
 801120e:	3301      	adds	r3, #1
 8011210:	4a3b      	ldr	r2, [pc, #236]	; (8011300 <pass_route2+0x224>)
 8011212:	5cd3      	ldrb	r3, [r2, r3]
 8011214:	2b11      	cmp	r3, #17
 8011216:	d115      	bne.n	8011244 <pass_route2+0x168>
 8011218:	687b      	ldr	r3, [r7, #4]
 801121a:	3302      	adds	r3, #2
 801121c:	4a38      	ldr	r2, [pc, #224]	; (8011300 <pass_route2+0x224>)
 801121e:	5cd3      	ldrb	r3, [r2, r3]
 8011220:	2b11      	cmp	r3, #17
 8011222:	d10f      	bne.n	8011244 <pass_route2+0x168>
 8011224:	687b      	ldr	r3, [r7, #4]
 8011226:	3303      	adds	r3, #3
 8011228:	4a35      	ldr	r2, [pc, #212]	; (8011300 <pass_route2+0x224>)
 801122a:	5cd3      	ldrb	r3, [r2, r3]
 801122c:	2b77      	cmp	r3, #119	; 0x77
 801122e:	d109      	bne.n	8011244 <pass_route2+0x168>
			s_flag = 0;
 8011230:	2300      	movs	r3, #0
 8011232:	70fb      	strb	r3, [r7, #3]
			pass[p] = -6;							//a大回り左180スラローム
 8011234:	78bb      	ldrb	r3, [r7, #2]
 8011236:	4a31      	ldr	r2, [pc, #196]	; (80112fc <pass_route2+0x220>)
 8011238:	21fa      	movs	r1, #250	; 0xfa
 801123a:	54d1      	strb	r1, [r2, r3]
			i = i + 4;
 801123c:	687b      	ldr	r3, [r7, #4]
 801123e:	3304      	adds	r3, #4
 8011240:	607b      	str	r3, [r7, #4]
 8011242:	e04b      	b.n	80112dc <pass_route2+0x200>
		}else if(route[i] == 0xff){
 8011244:	4a2e      	ldr	r2, [pc, #184]	; (8011300 <pass_route2+0x224>)
 8011246:	687b      	ldr	r3, [r7, #4]
 8011248:	4413      	add	r3, r2
 801124a:	781b      	ldrb	r3, [r3, #0]
 801124c:	2bff      	cmp	r3, #255	; 0xff
 801124e:	d107      	bne.n	8011260 <pass_route2+0x184>
			pass[p] = -114;							//a終了条件用
 8011250:	78bb      	ldrb	r3, [r7, #2]
 8011252:	4a2a      	ldr	r2, [pc, #168]	; (80112fc <pass_route2+0x220>)
 8011254:	218e      	movs	r1, #142	; 0x8e
 8011256:	54d1      	strb	r1, [r2, r3]
			i++;
 8011258:	687b      	ldr	r3, [r7, #4]
 801125a:	3301      	adds	r3, #1
 801125c:	607b      	str	r3, [r7, #4]
 801125e:	e03d      	b.n	80112dc <pass_route2+0x200>
		}else if(route[i] == 0x77){
 8011260:	4a27      	ldr	r2, [pc, #156]	; (8011300 <pass_route2+0x224>)
 8011262:	687b      	ldr	r3, [r7, #4]
 8011264:	4413      	add	r3, r2
 8011266:	781b      	ldrb	r3, [r3, #0]
 8011268:	2b77      	cmp	r3, #119	; 0x77
 801126a:	d137      	bne.n	80112dc <pass_route2+0x200>
			if(s_flag){
 801126c:	78fb      	ldrb	r3, [r7, #3]
 801126e:	2b00      	cmp	r3, #0
 8011270:	d012      	beq.n	8011298 <pass_route2+0x1bc>
				pass[p-1]++;
 8011272:	78bb      	ldrb	r3, [r7, #2]
 8011274:	3b01      	subs	r3, #1
 8011276:	4a21      	ldr	r2, [pc, #132]	; (80112fc <pass_route2+0x220>)
 8011278:	56d2      	ldrsb	r2, [r2, r3]
 801127a:	b2d2      	uxtb	r2, r2
 801127c:	3201      	adds	r2, #1
 801127e:	b2d2      	uxtb	r2, r2
 8011280:	b251      	sxtb	r1, r2
 8011282:	4a1e      	ldr	r2, [pc, #120]	; (80112fc <pass_route2+0x220>)
 8011284:	54d1      	strb	r1, [r2, r3]
				p--;
 8011286:	78bb      	ldrb	r3, [r7, #2]
 8011288:	3b01      	subs	r3, #1
 801128a:	70bb      	strb	r3, [r7, #2]
				s_flag = 0;
 801128c:	2300      	movs	r3, #0
 801128e:	70fb      	strb	r3, [r7, #3]
				i++;
 8011290:	687b      	ldr	r3, [r7, #4]
 8011292:	3301      	adds	r3, #1
 8011294:	607b      	str	r3, [r7, #4]
 8011296:	e021      	b.n	80112dc <pass_route2+0x200>
			}else{
				s++;
 8011298:	787b      	ldrb	r3, [r7, #1]
 801129a:	3301      	adds	r3, #1
 801129c:	707b      	strb	r3, [r7, #1]
				pass[p] = s;
 801129e:	78bb      	ldrb	r3, [r7, #2]
 80112a0:	f997 1001 	ldrsb.w	r1, [r7, #1]
 80112a4:	4a15      	ldr	r2, [pc, #84]	; (80112fc <pass_route2+0x220>)
 80112a6:	54d1      	strb	r1, [r2, r3]
				while(route[i+1] == 0x77){
 80112a8:	e00c      	b.n	80112c4 <pass_route2+0x1e8>
					s_flag = 1;
 80112aa:	2301      	movs	r3, #1
 80112ac:	70fb      	strb	r3, [r7, #3]
					pass[p] = s;
 80112ae:	78bb      	ldrb	r3, [r7, #2]
 80112b0:	f997 1001 	ldrsb.w	r1, [r7, #1]
 80112b4:	4a11      	ldr	r2, [pc, #68]	; (80112fc <pass_route2+0x220>)
 80112b6:	54d1      	strb	r1, [r2, r3]
					i++;
 80112b8:	687b      	ldr	r3, [r7, #4]
 80112ba:	3301      	adds	r3, #1
 80112bc:	607b      	str	r3, [r7, #4]
					s++;
 80112be:	787b      	ldrb	r3, [r7, #1]
 80112c0:	3301      	adds	r3, #1
 80112c2:	707b      	strb	r3, [r7, #1]
				while(route[i+1] == 0x77){
 80112c4:	687b      	ldr	r3, [r7, #4]
 80112c6:	3301      	adds	r3, #1
 80112c8:	4a0d      	ldr	r2, [pc, #52]	; (8011300 <pass_route2+0x224>)
 80112ca:	5cd3      	ldrb	r3, [r2, r3]
 80112cc:	2b77      	cmp	r3, #119	; 0x77
 80112ce:	d0ec      	beq.n	80112aa <pass_route2+0x1ce>
				}
				if(!s_flag){
 80112d0:	78fb      	ldrb	r3, [r7, #3]
 80112d2:	2b00      	cmp	r3, #0
 80112d4:	d102      	bne.n	80112dc <pass_route2+0x200>
					i++;
 80112d6:	687b      	ldr	r3, [r7, #4]
 80112d8:	3301      	adds	r3, #1
 80112da:	607b      	str	r3, [r7, #4]
				}
			}
		}
		p++;
 80112dc:	78bb      	ldrb	r3, [r7, #2]
 80112de:	3301      	adds	r3, #1
 80112e0:	70bb      	strb	r3, [r7, #2]
	while(route[i-1] != 0xff){
 80112e2:	687b      	ldr	r3, [r7, #4]
 80112e4:	3b01      	subs	r3, #1
 80112e6:	4a06      	ldr	r2, [pc, #24]	; (8011300 <pass_route2+0x224>)
 80112e8:	5cd3      	ldrb	r3, [r2, r3]
 80112ea:	2bff      	cmp	r3, #255	; 0xff
 80112ec:	f47f af10 	bne.w	8011110 <pass_route2+0x34>
	}
}
 80112f0:	bf00      	nop
 80112f2:	370c      	adds	r7, #12
 80112f4:	46bd      	mov	sp, r7
 80112f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112fa:	4770      	bx	lr
 80112fc:	20000350 	.word	0x20000350
 8011300:	20000c54 	.word	0x20000c54

08011304 <pass_route3>:
//pass_route3
// route配列をpass圧縮する(半区画ベース+斜めあり)
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void pass_route3(void){
 8011304:	b480      	push	{r7}
 8011306:	b083      	sub	sp, #12
 8011308:	af00      	add	r7, sp, #0
	int i;
	uint8_t s_flag = 0;
 801130a:	2300      	movs	r3, #0
 801130c:	70fb      	strb	r3, [r7, #3]
	MF2.FLAG.V = 0;										//a斜めフラグの初期化
 801130e:	4a98      	ldr	r2, [pc, #608]	; (8011570 <pass_route3+0x26c>)
 8011310:	8813      	ldrh	r3, [r2, #0]
 8011312:	f36f 03c3 	bfc	r3, #3, #1
 8011316:	8013      	strh	r3, [r2, #0]
	for(i = 0; i < 256; i++){
 8011318:	2300      	movs	r3, #0
 801131a:	607b      	str	r3, [r7, #4]
 801131c:	e007      	b.n	801132e <pass_route3+0x2a>
		pass[i] = 0;								//pass配列の初期化
 801131e:	4a95      	ldr	r2, [pc, #596]	; (8011574 <pass_route3+0x270>)
 8011320:	687b      	ldr	r3, [r7, #4]
 8011322:	4413      	add	r3, r2
 8011324:	2200      	movs	r2, #0
 8011326:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < 256; i++){
 8011328:	687b      	ldr	r3, [r7, #4]
 801132a:	3301      	adds	r3, #1
 801132c:	607b      	str	r3, [r7, #4]
 801132e:	687b      	ldr	r3, [r7, #4]
 8011330:	2bff      	cmp	r3, #255	; 0xff
 8011332:	ddf4      	ble.n	801131e <pass_route3+0x1a>
	}
	uint8_t p = 0;									//pass配列の配列番号用変数
 8011334:	2300      	movs	r3, #0
 8011336:	70bb      	strb	r3, [r7, #2]
	i = 0;
 8011338:	2300      	movs	r3, #0
 801133a:	607b      	str	r3, [r7, #4]
	uint8_t s = 0;									//a直線数カウント用変数
 801133c:	2300      	movs	r3, #0
 801133e:	707b      	strb	r3, [r7, #1]
	while(route[i-1] != 0xff){
 8011340:	e324      	b.n	801198c <pass_route3+0x688>
		s = 0;
 8011342:	2300      	movs	r3, #0
 8011344:	707b      	strb	r3, [r7, #1]
		if(route[i] == 0x77 && route[i+1] == 0x44 && route[i+2] == 0x77){
 8011346:	4a8c      	ldr	r2, [pc, #560]	; (8011578 <pass_route3+0x274>)
 8011348:	687b      	ldr	r3, [r7, #4]
 801134a:	4413      	add	r3, r2
 801134c:	781b      	ldrb	r3, [r3, #0]
 801134e:	2b77      	cmp	r3, #119	; 0x77
 8011350:	d11b      	bne.n	801138a <pass_route3+0x86>
 8011352:	687b      	ldr	r3, [r7, #4]
 8011354:	3301      	adds	r3, #1
 8011356:	4a88      	ldr	r2, [pc, #544]	; (8011578 <pass_route3+0x274>)
 8011358:	5cd3      	ldrb	r3, [r2, r3]
 801135a:	2b44      	cmp	r3, #68	; 0x44
 801135c:	d115      	bne.n	801138a <pass_route3+0x86>
 801135e:	687b      	ldr	r3, [r7, #4]
 8011360:	3302      	adds	r3, #2
 8011362:	4a85      	ldr	r2, [pc, #532]	; (8011578 <pass_route3+0x274>)
 8011364:	5cd3      	ldrb	r3, [r2, r3]
 8011366:	2b77      	cmp	r3, #119	; 0x77
 8011368:	d10f      	bne.n	801138a <pass_route3+0x86>
			s_flag = 0;
 801136a:	2300      	movs	r3, #0
 801136c:	70fb      	strb	r3, [r7, #3]
			pass[p] = -3;							//a大回り右90
 801136e:	78bb      	ldrb	r3, [r7, #2]
 8011370:	4a80      	ldr	r2, [pc, #512]	; (8011574 <pass_route3+0x270>)
 8011372:	21fd      	movs	r1, #253	; 0xfd
 8011374:	54d1      	strb	r1, [r2, r3]
			if(i == 0){								//aスタート時の走行モード切り替えフラグ
 8011376:	687b      	ldr	r3, [r7, #4]
 8011378:	2b00      	cmp	r3, #0
 801137a:	d102      	bne.n	8011382 <pass_route3+0x7e>
				start_mode = 2;
 801137c:	4b7f      	ldr	r3, [pc, #508]	; (801157c <pass_route3+0x278>)
 801137e:	2202      	movs	r2, #2
 8011380:	701a      	strb	r2, [r3, #0]
			}
			i = i + 3;
 8011382:	687b      	ldr	r3, [r7, #4]
 8011384:	3303      	adds	r3, #3
 8011386:	607b      	str	r3, [r7, #4]
 8011388:	e2fd      	b.n	8011986 <pass_route3+0x682>
		}else if(route[i] == 0x77 && route[i+1] == 0x11 && route[i+2] == 0x77){
 801138a:	4a7b      	ldr	r2, [pc, #492]	; (8011578 <pass_route3+0x274>)
 801138c:	687b      	ldr	r3, [r7, #4]
 801138e:	4413      	add	r3, r2
 8011390:	781b      	ldrb	r3, [r3, #0]
 8011392:	2b77      	cmp	r3, #119	; 0x77
 8011394:	d11b      	bne.n	80113ce <pass_route3+0xca>
 8011396:	687b      	ldr	r3, [r7, #4]
 8011398:	3301      	adds	r3, #1
 801139a:	4a77      	ldr	r2, [pc, #476]	; (8011578 <pass_route3+0x274>)
 801139c:	5cd3      	ldrb	r3, [r2, r3]
 801139e:	2b11      	cmp	r3, #17
 80113a0:	d115      	bne.n	80113ce <pass_route3+0xca>
 80113a2:	687b      	ldr	r3, [r7, #4]
 80113a4:	3302      	adds	r3, #2
 80113a6:	4a74      	ldr	r2, [pc, #464]	; (8011578 <pass_route3+0x274>)
 80113a8:	5cd3      	ldrb	r3, [r2, r3]
 80113aa:	2b77      	cmp	r3, #119	; 0x77
 80113ac:	d10f      	bne.n	80113ce <pass_route3+0xca>
			s_flag = 0;
 80113ae:	2300      	movs	r3, #0
 80113b0:	70fb      	strb	r3, [r7, #3]
			pass[p] = -4;							//a大回り左90
 80113b2:	78bb      	ldrb	r3, [r7, #2]
 80113b4:	4a6f      	ldr	r2, [pc, #444]	; (8011574 <pass_route3+0x270>)
 80113b6:	21fc      	movs	r1, #252	; 0xfc
 80113b8:	54d1      	strb	r1, [r2, r3]
			if(i == 0){								//aスタート時の走行モード切り替えフラグ
 80113ba:	687b      	ldr	r3, [r7, #4]
 80113bc:	2b00      	cmp	r3, #0
 80113be:	d102      	bne.n	80113c6 <pass_route3+0xc2>
				start_mode = 2;
 80113c0:	4b6e      	ldr	r3, [pc, #440]	; (801157c <pass_route3+0x278>)
 80113c2:	2202      	movs	r2, #2
 80113c4:	701a      	strb	r2, [r3, #0]
			}
			i = i + 3;
 80113c6:	687b      	ldr	r3, [r7, #4]
 80113c8:	3303      	adds	r3, #3
 80113ca:	607b      	str	r3, [r7, #4]
 80113cc:	e2db      	b.n	8011986 <pass_route3+0x682>
		}else if(route[i] == 0x77 && route[i+1] == 0x44 && route[i+2] == 0x44 && route[i+3] == 0x77){
 80113ce:	4a6a      	ldr	r2, [pc, #424]	; (8011578 <pass_route3+0x274>)
 80113d0:	687b      	ldr	r3, [r7, #4]
 80113d2:	4413      	add	r3, r2
 80113d4:	781b      	ldrb	r3, [r3, #0]
 80113d6:	2b77      	cmp	r3, #119	; 0x77
 80113d8:	d11b      	bne.n	8011412 <pass_route3+0x10e>
 80113da:	687b      	ldr	r3, [r7, #4]
 80113dc:	3301      	adds	r3, #1
 80113de:	4a66      	ldr	r2, [pc, #408]	; (8011578 <pass_route3+0x274>)
 80113e0:	5cd3      	ldrb	r3, [r2, r3]
 80113e2:	2b44      	cmp	r3, #68	; 0x44
 80113e4:	d115      	bne.n	8011412 <pass_route3+0x10e>
 80113e6:	687b      	ldr	r3, [r7, #4]
 80113e8:	3302      	adds	r3, #2
 80113ea:	4a63      	ldr	r2, [pc, #396]	; (8011578 <pass_route3+0x274>)
 80113ec:	5cd3      	ldrb	r3, [r2, r3]
 80113ee:	2b44      	cmp	r3, #68	; 0x44
 80113f0:	d10f      	bne.n	8011412 <pass_route3+0x10e>
 80113f2:	687b      	ldr	r3, [r7, #4]
 80113f4:	3303      	adds	r3, #3
 80113f6:	4a60      	ldr	r2, [pc, #384]	; (8011578 <pass_route3+0x274>)
 80113f8:	5cd3      	ldrb	r3, [r2, r3]
 80113fa:	2b77      	cmp	r3, #119	; 0x77
 80113fc:	d109      	bne.n	8011412 <pass_route3+0x10e>
			s_flag = 0;
 80113fe:	2300      	movs	r3, #0
 8011400:	70fb      	strb	r3, [r7, #3]
			pass[p] = -5;							//a大回り右180
 8011402:	78bb      	ldrb	r3, [r7, #2]
 8011404:	4a5b      	ldr	r2, [pc, #364]	; (8011574 <pass_route3+0x270>)
 8011406:	21fb      	movs	r1, #251	; 0xfb
 8011408:	54d1      	strb	r1, [r2, r3]
			i = i + 4;
 801140a:	687b      	ldr	r3, [r7, #4]
 801140c:	3304      	adds	r3, #4
 801140e:	607b      	str	r3, [r7, #4]
 8011410:	e2b9      	b.n	8011986 <pass_route3+0x682>
		}else if(route[i] == 0x77 && route[i+1] == 0x11 && route[i+2] == 0x11 && route[i+3] == 0x77){
 8011412:	4a59      	ldr	r2, [pc, #356]	; (8011578 <pass_route3+0x274>)
 8011414:	687b      	ldr	r3, [r7, #4]
 8011416:	4413      	add	r3, r2
 8011418:	781b      	ldrb	r3, [r3, #0]
 801141a:	2b77      	cmp	r3, #119	; 0x77
 801141c:	d11b      	bne.n	8011456 <pass_route3+0x152>
 801141e:	687b      	ldr	r3, [r7, #4]
 8011420:	3301      	adds	r3, #1
 8011422:	4a55      	ldr	r2, [pc, #340]	; (8011578 <pass_route3+0x274>)
 8011424:	5cd3      	ldrb	r3, [r2, r3]
 8011426:	2b11      	cmp	r3, #17
 8011428:	d115      	bne.n	8011456 <pass_route3+0x152>
 801142a:	687b      	ldr	r3, [r7, #4]
 801142c:	3302      	adds	r3, #2
 801142e:	4a52      	ldr	r2, [pc, #328]	; (8011578 <pass_route3+0x274>)
 8011430:	5cd3      	ldrb	r3, [r2, r3]
 8011432:	2b11      	cmp	r3, #17
 8011434:	d10f      	bne.n	8011456 <pass_route3+0x152>
 8011436:	687b      	ldr	r3, [r7, #4]
 8011438:	3303      	adds	r3, #3
 801143a:	4a4f      	ldr	r2, [pc, #316]	; (8011578 <pass_route3+0x274>)
 801143c:	5cd3      	ldrb	r3, [r2, r3]
 801143e:	2b77      	cmp	r3, #119	; 0x77
 8011440:	d109      	bne.n	8011456 <pass_route3+0x152>
			s_flag = 0;
 8011442:	2300      	movs	r3, #0
 8011444:	70fb      	strb	r3, [r7, #3]
			pass[p] = -6;							//a大回り左180
 8011446:	78bb      	ldrb	r3, [r7, #2]
 8011448:	4a4a      	ldr	r2, [pc, #296]	; (8011574 <pass_route3+0x270>)
 801144a:	21fa      	movs	r1, #250	; 0xfa
 801144c:	54d1      	strb	r1, [r2, r3]
			i = i + 4;
 801144e:	687b      	ldr	r3, [r7, #4]
 8011450:	3304      	adds	r3, #4
 8011452:	607b      	str	r3, [r7, #4]
 8011454:	e297      	b.n	8011986 <pass_route3+0x682>
		}else if(route[i] == 0x77 && route[i+1] == 0x44 && route[i+2] == 0x11){
 8011456:	4a48      	ldr	r2, [pc, #288]	; (8011578 <pass_route3+0x274>)
 8011458:	687b      	ldr	r3, [r7, #4]
 801145a:	4413      	add	r3, r2
 801145c:	781b      	ldrb	r3, [r3, #0]
 801145e:	2b77      	cmp	r3, #119	; 0x77
 8011460:	d120      	bne.n	80114a4 <pass_route3+0x1a0>
 8011462:	687b      	ldr	r3, [r7, #4]
 8011464:	3301      	adds	r3, #1
 8011466:	4a44      	ldr	r2, [pc, #272]	; (8011578 <pass_route3+0x274>)
 8011468:	5cd3      	ldrb	r3, [r2, r3]
 801146a:	2b44      	cmp	r3, #68	; 0x44
 801146c:	d11a      	bne.n	80114a4 <pass_route3+0x1a0>
 801146e:	687b      	ldr	r3, [r7, #4]
 8011470:	3302      	adds	r3, #2
 8011472:	4a41      	ldr	r2, [pc, #260]	; (8011578 <pass_route3+0x274>)
 8011474:	5cd3      	ldrb	r3, [r2, r3]
 8011476:	2b11      	cmp	r3, #17
 8011478:	d114      	bne.n	80114a4 <pass_route3+0x1a0>
			s_flag = 0;
 801147a:	2300      	movs	r3, #0
 801147c:	70fb      	strb	r3, [r7, #3]
			pass[p] = -7;							//a斜め右V45in
 801147e:	78bb      	ldrb	r3, [r7, #2]
 8011480:	4a3c      	ldr	r2, [pc, #240]	; (8011574 <pass_route3+0x270>)
 8011482:	21f9      	movs	r1, #249	; 0xf9
 8011484:	54d1      	strb	r1, [r2, r3]
			MF2.FLAG.V = 1;
 8011486:	4a3a      	ldr	r2, [pc, #232]	; (8011570 <pass_route3+0x26c>)
 8011488:	8813      	ldrh	r3, [r2, #0]
 801148a:	f043 0308 	orr.w	r3, r3, #8
 801148e:	8013      	strh	r3, [r2, #0]
			if(i == 0){								//aスタート時の走行モード切り替えフラグ
 8011490:	687b      	ldr	r3, [r7, #4]
 8011492:	2b00      	cmp	r3, #0
 8011494:	d102      	bne.n	801149c <pass_route3+0x198>
				start_mode = 2;
 8011496:	4b39      	ldr	r3, [pc, #228]	; (801157c <pass_route3+0x278>)
 8011498:	2202      	movs	r2, #2
 801149a:	701a      	strb	r2, [r3, #0]
			}
			i = i + 2;
 801149c:	687b      	ldr	r3, [r7, #4]
 801149e:	3302      	adds	r3, #2
 80114a0:	607b      	str	r3, [r7, #4]
 80114a2:	e270      	b.n	8011986 <pass_route3+0x682>
		}else if(MF2.FLAG.V == 1 && route[i] == 0x44 && route[i+1] == 0x77){
 80114a4:	4b32      	ldr	r3, [pc, #200]	; (8011570 <pass_route3+0x26c>)
 80114a6:	881b      	ldrh	r3, [r3, #0]
 80114a8:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80114ac:	b2db      	uxtb	r3, r3
 80114ae:	2b01      	cmp	r3, #1
 80114b0:	d11a      	bne.n	80114e8 <pass_route3+0x1e4>
 80114b2:	4a31      	ldr	r2, [pc, #196]	; (8011578 <pass_route3+0x274>)
 80114b4:	687b      	ldr	r3, [r7, #4]
 80114b6:	4413      	add	r3, r2
 80114b8:	781b      	ldrb	r3, [r3, #0]
 80114ba:	2b44      	cmp	r3, #68	; 0x44
 80114bc:	d114      	bne.n	80114e8 <pass_route3+0x1e4>
 80114be:	687b      	ldr	r3, [r7, #4]
 80114c0:	3301      	adds	r3, #1
 80114c2:	4a2d      	ldr	r2, [pc, #180]	; (8011578 <pass_route3+0x274>)
 80114c4:	5cd3      	ldrb	r3, [r2, r3]
 80114c6:	2b77      	cmp	r3, #119	; 0x77
 80114c8:	d10e      	bne.n	80114e8 <pass_route3+0x1e4>
			s_flag = 0;
 80114ca:	2300      	movs	r3, #0
 80114cc:	70fb      	strb	r3, [r7, #3]
			pass[p] = -7;							//a斜め右V45out
 80114ce:	78bb      	ldrb	r3, [r7, #2]
 80114d0:	4a28      	ldr	r2, [pc, #160]	; (8011574 <pass_route3+0x270>)
 80114d2:	21f9      	movs	r1, #249	; 0xf9
 80114d4:	54d1      	strb	r1, [r2, r3]
			MF2.FLAG.V = 0;
 80114d6:	4a26      	ldr	r2, [pc, #152]	; (8011570 <pass_route3+0x26c>)
 80114d8:	8813      	ldrh	r3, [r2, #0]
 80114da:	f36f 03c3 	bfc	r3, #3, #1
 80114de:	8013      	strh	r3, [r2, #0]
			i = i + 2;
 80114e0:	687b      	ldr	r3, [r7, #4]
 80114e2:	3302      	adds	r3, #2
 80114e4:	607b      	str	r3, [r7, #4]
 80114e6:	e24e      	b.n	8011986 <pass_route3+0x682>
		}else if(route[i] == 0x77 && route[i+1] == 0x11 && route[i+2] == 0x44){
 80114e8:	4a23      	ldr	r2, [pc, #140]	; (8011578 <pass_route3+0x274>)
 80114ea:	687b      	ldr	r3, [r7, #4]
 80114ec:	4413      	add	r3, r2
 80114ee:	781b      	ldrb	r3, [r3, #0]
 80114f0:	2b77      	cmp	r3, #119	; 0x77
 80114f2:	d11a      	bne.n	801152a <pass_route3+0x226>
 80114f4:	687b      	ldr	r3, [r7, #4]
 80114f6:	3301      	adds	r3, #1
 80114f8:	4a1f      	ldr	r2, [pc, #124]	; (8011578 <pass_route3+0x274>)
 80114fa:	5cd3      	ldrb	r3, [r2, r3]
 80114fc:	2b11      	cmp	r3, #17
 80114fe:	d114      	bne.n	801152a <pass_route3+0x226>
 8011500:	687b      	ldr	r3, [r7, #4]
 8011502:	3302      	adds	r3, #2
 8011504:	4a1c      	ldr	r2, [pc, #112]	; (8011578 <pass_route3+0x274>)
 8011506:	5cd3      	ldrb	r3, [r2, r3]
 8011508:	2b44      	cmp	r3, #68	; 0x44
 801150a:	d10e      	bne.n	801152a <pass_route3+0x226>
			s_flag = 0;
 801150c:	2300      	movs	r3, #0
 801150e:	70fb      	strb	r3, [r7, #3]
			pass[p] = -8;							//a斜め左V45in
 8011510:	78bb      	ldrb	r3, [r7, #2]
 8011512:	4a18      	ldr	r2, [pc, #96]	; (8011574 <pass_route3+0x270>)
 8011514:	21f8      	movs	r1, #248	; 0xf8
 8011516:	54d1      	strb	r1, [r2, r3]
			MF2.FLAG.V = 1;
 8011518:	4a15      	ldr	r2, [pc, #84]	; (8011570 <pass_route3+0x26c>)
 801151a:	8813      	ldrh	r3, [r2, #0]
 801151c:	f043 0308 	orr.w	r3, r3, #8
 8011520:	8013      	strh	r3, [r2, #0]
			i = i + 2;
 8011522:	687b      	ldr	r3, [r7, #4]
 8011524:	3302      	adds	r3, #2
 8011526:	607b      	str	r3, [r7, #4]
 8011528:	e22d      	b.n	8011986 <pass_route3+0x682>
		}else if(MF2.FLAG.V == 1 && route[i] == 0x11 && route[i+1] == 0x77){
 801152a:	4b11      	ldr	r3, [pc, #68]	; (8011570 <pass_route3+0x26c>)
 801152c:	881b      	ldrh	r3, [r3, #0]
 801152e:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8011532:	b2db      	uxtb	r3, r3
 8011534:	2b01      	cmp	r3, #1
 8011536:	d123      	bne.n	8011580 <pass_route3+0x27c>
 8011538:	4a0f      	ldr	r2, [pc, #60]	; (8011578 <pass_route3+0x274>)
 801153a:	687b      	ldr	r3, [r7, #4]
 801153c:	4413      	add	r3, r2
 801153e:	781b      	ldrb	r3, [r3, #0]
 8011540:	2b11      	cmp	r3, #17
 8011542:	d11d      	bne.n	8011580 <pass_route3+0x27c>
 8011544:	687b      	ldr	r3, [r7, #4]
 8011546:	3301      	adds	r3, #1
 8011548:	4a0b      	ldr	r2, [pc, #44]	; (8011578 <pass_route3+0x274>)
 801154a:	5cd3      	ldrb	r3, [r2, r3]
 801154c:	2b77      	cmp	r3, #119	; 0x77
 801154e:	d117      	bne.n	8011580 <pass_route3+0x27c>
			s_flag = 0;
 8011550:	2300      	movs	r3, #0
 8011552:	70fb      	strb	r3, [r7, #3]
			pass[p] = -8;							//a斜め左V45out
 8011554:	78bb      	ldrb	r3, [r7, #2]
 8011556:	4a07      	ldr	r2, [pc, #28]	; (8011574 <pass_route3+0x270>)
 8011558:	21f8      	movs	r1, #248	; 0xf8
 801155a:	54d1      	strb	r1, [r2, r3]
			MF2.FLAG.V = 0;
 801155c:	4a04      	ldr	r2, [pc, #16]	; (8011570 <pass_route3+0x26c>)
 801155e:	8813      	ldrh	r3, [r2, #0]
 8011560:	f36f 03c3 	bfc	r3, #3, #1
 8011564:	8013      	strh	r3, [r2, #0]
			i = i + 2;
 8011566:	687b      	ldr	r3, [r7, #4]
 8011568:	3302      	adds	r3, #2
 801156a:	607b      	str	r3, [r7, #4]
 801156c:	e20b      	b.n	8011986 <pass_route3+0x682>
 801156e:	bf00      	nop
 8011570:	20000f64 	.word	0x20000f64
 8011574:	20000350 	.word	0x20000350
 8011578:	20000c54 	.word	0x20000c54
 801157c:	200015c8 	.word	0x200015c8
		}else if(MF2.FLAG.V == 1 && route[i] == 0x44 && route[i+1] == 0x44 && route[i+2] == 0x11){
 8011580:	4b99      	ldr	r3, [pc, #612]	; (80117e8 <pass_route3+0x4e4>)
 8011582:	881b      	ldrh	r3, [r3, #0]
 8011584:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8011588:	b2db      	uxtb	r3, r3
 801158a:	2b01      	cmp	r3, #1
 801158c:	d120      	bne.n	80115d0 <pass_route3+0x2cc>
 801158e:	4a97      	ldr	r2, [pc, #604]	; (80117ec <pass_route3+0x4e8>)
 8011590:	687b      	ldr	r3, [r7, #4]
 8011592:	4413      	add	r3, r2
 8011594:	781b      	ldrb	r3, [r3, #0]
 8011596:	2b44      	cmp	r3, #68	; 0x44
 8011598:	d11a      	bne.n	80115d0 <pass_route3+0x2cc>
 801159a:	687b      	ldr	r3, [r7, #4]
 801159c:	3301      	adds	r3, #1
 801159e:	4a93      	ldr	r2, [pc, #588]	; (80117ec <pass_route3+0x4e8>)
 80115a0:	5cd3      	ldrb	r3, [r2, r3]
 80115a2:	2b44      	cmp	r3, #68	; 0x44
 80115a4:	d114      	bne.n	80115d0 <pass_route3+0x2cc>
 80115a6:	687b      	ldr	r3, [r7, #4]
 80115a8:	3302      	adds	r3, #2
 80115aa:	4a90      	ldr	r2, [pc, #576]	; (80117ec <pass_route3+0x4e8>)
 80115ac:	5cd3      	ldrb	r3, [r2, r3]
 80115ae:	2b11      	cmp	r3, #17
 80115b0:	d10e      	bne.n	80115d0 <pass_route3+0x2cc>
			s_flag = 0;
 80115b2:	2300      	movs	r3, #0
 80115b4:	70fb      	strb	r3, [r7, #3]
			pass[p] = -9;							//a斜め右V90
 80115b6:	78bb      	ldrb	r3, [r7, #2]
 80115b8:	4a8d      	ldr	r2, [pc, #564]	; (80117f0 <pass_route3+0x4ec>)
 80115ba:	21f7      	movs	r1, #247	; 0xf7
 80115bc:	54d1      	strb	r1, [r2, r3]
			MF2.FLAG.V = 1;
 80115be:	4a8a      	ldr	r2, [pc, #552]	; (80117e8 <pass_route3+0x4e4>)
 80115c0:	8813      	ldrh	r3, [r2, #0]
 80115c2:	f043 0308 	orr.w	r3, r3, #8
 80115c6:	8013      	strh	r3, [r2, #0]
			i = i + 2;
 80115c8:	687b      	ldr	r3, [r7, #4]
 80115ca:	3302      	adds	r3, #2
 80115cc:	607b      	str	r3, [r7, #4]
 80115ce:	e1da      	b.n	8011986 <pass_route3+0x682>
		}else if(MF2.FLAG.V == 1 && route[i] == 0x11 && route[i+1] == 0x11 && route[i+2] == 0x44){
 80115d0:	4b85      	ldr	r3, [pc, #532]	; (80117e8 <pass_route3+0x4e4>)
 80115d2:	881b      	ldrh	r3, [r3, #0]
 80115d4:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80115d8:	b2db      	uxtb	r3, r3
 80115da:	2b01      	cmp	r3, #1
 80115dc:	d120      	bne.n	8011620 <pass_route3+0x31c>
 80115de:	4a83      	ldr	r2, [pc, #524]	; (80117ec <pass_route3+0x4e8>)
 80115e0:	687b      	ldr	r3, [r7, #4]
 80115e2:	4413      	add	r3, r2
 80115e4:	781b      	ldrb	r3, [r3, #0]
 80115e6:	2b11      	cmp	r3, #17
 80115e8:	d11a      	bne.n	8011620 <pass_route3+0x31c>
 80115ea:	687b      	ldr	r3, [r7, #4]
 80115ec:	3301      	adds	r3, #1
 80115ee:	4a7f      	ldr	r2, [pc, #508]	; (80117ec <pass_route3+0x4e8>)
 80115f0:	5cd3      	ldrb	r3, [r2, r3]
 80115f2:	2b11      	cmp	r3, #17
 80115f4:	d114      	bne.n	8011620 <pass_route3+0x31c>
 80115f6:	687b      	ldr	r3, [r7, #4]
 80115f8:	3302      	adds	r3, #2
 80115fa:	4a7c      	ldr	r2, [pc, #496]	; (80117ec <pass_route3+0x4e8>)
 80115fc:	5cd3      	ldrb	r3, [r2, r3]
 80115fe:	2b44      	cmp	r3, #68	; 0x44
 8011600:	d10e      	bne.n	8011620 <pass_route3+0x31c>
			s_flag = 0;
 8011602:	2300      	movs	r3, #0
 8011604:	70fb      	strb	r3, [r7, #3]
			pass[p] = -10;							//a斜め左V90
 8011606:	78bb      	ldrb	r3, [r7, #2]
 8011608:	4a79      	ldr	r2, [pc, #484]	; (80117f0 <pass_route3+0x4ec>)
 801160a:	21f6      	movs	r1, #246	; 0xf6
 801160c:	54d1      	strb	r1, [r2, r3]
			MF2.FLAG.V = 1;
 801160e:	4a76      	ldr	r2, [pc, #472]	; (80117e8 <pass_route3+0x4e4>)
 8011610:	8813      	ldrh	r3, [r2, #0]
 8011612:	f043 0308 	orr.w	r3, r3, #8
 8011616:	8013      	strh	r3, [r2, #0]
			i = i + 2;
 8011618:	687b      	ldr	r3, [r7, #4]
 801161a:	3302      	adds	r3, #2
 801161c:	607b      	str	r3, [r7, #4]
 801161e:	e1b2      	b.n	8011986 <pass_route3+0x682>
		}else if(route[i] == 0x77 && route[i+1] == 0x44 && route[i+2] == 0x44 && route[i+3] == 0x11){
 8011620:	4a72      	ldr	r2, [pc, #456]	; (80117ec <pass_route3+0x4e8>)
 8011622:	687b      	ldr	r3, [r7, #4]
 8011624:	4413      	add	r3, r2
 8011626:	781b      	ldrb	r3, [r3, #0]
 8011628:	2b77      	cmp	r3, #119	; 0x77
 801162a:	d126      	bne.n	801167a <pass_route3+0x376>
 801162c:	687b      	ldr	r3, [r7, #4]
 801162e:	3301      	adds	r3, #1
 8011630:	4a6e      	ldr	r2, [pc, #440]	; (80117ec <pass_route3+0x4e8>)
 8011632:	5cd3      	ldrb	r3, [r2, r3]
 8011634:	2b44      	cmp	r3, #68	; 0x44
 8011636:	d120      	bne.n	801167a <pass_route3+0x376>
 8011638:	687b      	ldr	r3, [r7, #4]
 801163a:	3302      	adds	r3, #2
 801163c:	4a6b      	ldr	r2, [pc, #428]	; (80117ec <pass_route3+0x4e8>)
 801163e:	5cd3      	ldrb	r3, [r2, r3]
 8011640:	2b44      	cmp	r3, #68	; 0x44
 8011642:	d11a      	bne.n	801167a <pass_route3+0x376>
 8011644:	687b      	ldr	r3, [r7, #4]
 8011646:	3303      	adds	r3, #3
 8011648:	4a68      	ldr	r2, [pc, #416]	; (80117ec <pass_route3+0x4e8>)
 801164a:	5cd3      	ldrb	r3, [r2, r3]
 801164c:	2b11      	cmp	r3, #17
 801164e:	d114      	bne.n	801167a <pass_route3+0x376>
			s_flag = 0;
 8011650:	2300      	movs	r3, #0
 8011652:	70fb      	strb	r3, [r7, #3]
			pass[p] = -11;							//a斜め右V135in
 8011654:	78bb      	ldrb	r3, [r7, #2]
 8011656:	4a66      	ldr	r2, [pc, #408]	; (80117f0 <pass_route3+0x4ec>)
 8011658:	21f5      	movs	r1, #245	; 0xf5
 801165a:	54d1      	strb	r1, [r2, r3]
			MF2.FLAG.V = 1;
 801165c:	4a62      	ldr	r2, [pc, #392]	; (80117e8 <pass_route3+0x4e4>)
 801165e:	8813      	ldrh	r3, [r2, #0]
 8011660:	f043 0308 	orr.w	r3, r3, #8
 8011664:	8013      	strh	r3, [r2, #0]
			if(i == 0){								//aスタート時の走行モード切り替えフラグ
 8011666:	687b      	ldr	r3, [r7, #4]
 8011668:	2b00      	cmp	r3, #0
 801166a:	d102      	bne.n	8011672 <pass_route3+0x36e>
				start_mode = 2;
 801166c:	4b61      	ldr	r3, [pc, #388]	; (80117f4 <pass_route3+0x4f0>)
 801166e:	2202      	movs	r2, #2
 8011670:	701a      	strb	r2, [r3, #0]
			}
			i = i + 3;
 8011672:	687b      	ldr	r3, [r7, #4]
 8011674:	3303      	adds	r3, #3
 8011676:	607b      	str	r3, [r7, #4]
 8011678:	e185      	b.n	8011986 <pass_route3+0x682>
		}else if(MF2.FLAG.V == 1 && route[i] == 0x44 && route[i+1] == 0x44 && route[i+2] == 0x77){
 801167a:	4b5b      	ldr	r3, [pc, #364]	; (80117e8 <pass_route3+0x4e4>)
 801167c:	881b      	ldrh	r3, [r3, #0]
 801167e:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8011682:	b2db      	uxtb	r3, r3
 8011684:	2b01      	cmp	r3, #1
 8011686:	d120      	bne.n	80116ca <pass_route3+0x3c6>
 8011688:	4a58      	ldr	r2, [pc, #352]	; (80117ec <pass_route3+0x4e8>)
 801168a:	687b      	ldr	r3, [r7, #4]
 801168c:	4413      	add	r3, r2
 801168e:	781b      	ldrb	r3, [r3, #0]
 8011690:	2b44      	cmp	r3, #68	; 0x44
 8011692:	d11a      	bne.n	80116ca <pass_route3+0x3c6>
 8011694:	687b      	ldr	r3, [r7, #4]
 8011696:	3301      	adds	r3, #1
 8011698:	4a54      	ldr	r2, [pc, #336]	; (80117ec <pass_route3+0x4e8>)
 801169a:	5cd3      	ldrb	r3, [r2, r3]
 801169c:	2b44      	cmp	r3, #68	; 0x44
 801169e:	d114      	bne.n	80116ca <pass_route3+0x3c6>
 80116a0:	687b      	ldr	r3, [r7, #4]
 80116a2:	3302      	adds	r3, #2
 80116a4:	4a51      	ldr	r2, [pc, #324]	; (80117ec <pass_route3+0x4e8>)
 80116a6:	5cd3      	ldrb	r3, [r2, r3]
 80116a8:	2b77      	cmp	r3, #119	; 0x77
 80116aa:	d10e      	bne.n	80116ca <pass_route3+0x3c6>
			s_flag = 0;
 80116ac:	2300      	movs	r3, #0
 80116ae:	70fb      	strb	r3, [r7, #3]
			pass[p] = -11;							//a斜め右V135out
 80116b0:	78bb      	ldrb	r3, [r7, #2]
 80116b2:	4a4f      	ldr	r2, [pc, #316]	; (80117f0 <pass_route3+0x4ec>)
 80116b4:	21f5      	movs	r1, #245	; 0xf5
 80116b6:	54d1      	strb	r1, [r2, r3]
			MF2.FLAG.V = 0;
 80116b8:	4a4b      	ldr	r2, [pc, #300]	; (80117e8 <pass_route3+0x4e4>)
 80116ba:	8813      	ldrh	r3, [r2, #0]
 80116bc:	f36f 03c3 	bfc	r3, #3, #1
 80116c0:	8013      	strh	r3, [r2, #0]
			i = i + 3;
 80116c2:	687b      	ldr	r3, [r7, #4]
 80116c4:	3303      	adds	r3, #3
 80116c6:	607b      	str	r3, [r7, #4]
 80116c8:	e15d      	b.n	8011986 <pass_route3+0x682>
		}else if(route[i] == 0x77 && route[i+1] == 0x11 && route[i+2] == 0x11 && route[i+3] == 0x44){
 80116ca:	4a48      	ldr	r2, [pc, #288]	; (80117ec <pass_route3+0x4e8>)
 80116cc:	687b      	ldr	r3, [r7, #4]
 80116ce:	4413      	add	r3, r2
 80116d0:	781b      	ldrb	r3, [r3, #0]
 80116d2:	2b77      	cmp	r3, #119	; 0x77
 80116d4:	d120      	bne.n	8011718 <pass_route3+0x414>
 80116d6:	687b      	ldr	r3, [r7, #4]
 80116d8:	3301      	adds	r3, #1
 80116da:	4a44      	ldr	r2, [pc, #272]	; (80117ec <pass_route3+0x4e8>)
 80116dc:	5cd3      	ldrb	r3, [r2, r3]
 80116de:	2b11      	cmp	r3, #17
 80116e0:	d11a      	bne.n	8011718 <pass_route3+0x414>
 80116e2:	687b      	ldr	r3, [r7, #4]
 80116e4:	3302      	adds	r3, #2
 80116e6:	4a41      	ldr	r2, [pc, #260]	; (80117ec <pass_route3+0x4e8>)
 80116e8:	5cd3      	ldrb	r3, [r2, r3]
 80116ea:	2b11      	cmp	r3, #17
 80116ec:	d114      	bne.n	8011718 <pass_route3+0x414>
 80116ee:	687b      	ldr	r3, [r7, #4]
 80116f0:	3303      	adds	r3, #3
 80116f2:	4a3e      	ldr	r2, [pc, #248]	; (80117ec <pass_route3+0x4e8>)
 80116f4:	5cd3      	ldrb	r3, [r2, r3]
 80116f6:	2b44      	cmp	r3, #68	; 0x44
 80116f8:	d10e      	bne.n	8011718 <pass_route3+0x414>
			s_flag = 0;
 80116fa:	2300      	movs	r3, #0
 80116fc:	70fb      	strb	r3, [r7, #3]
			pass[p] = -12;							//a斜め左V135in
 80116fe:	78bb      	ldrb	r3, [r7, #2]
 8011700:	4a3b      	ldr	r2, [pc, #236]	; (80117f0 <pass_route3+0x4ec>)
 8011702:	21f4      	movs	r1, #244	; 0xf4
 8011704:	54d1      	strb	r1, [r2, r3]
			MF2.FLAG.V = 1;
 8011706:	4a38      	ldr	r2, [pc, #224]	; (80117e8 <pass_route3+0x4e4>)
 8011708:	8813      	ldrh	r3, [r2, #0]
 801170a:	f043 0308 	orr.w	r3, r3, #8
 801170e:	8013      	strh	r3, [r2, #0]
			i = i + 3;
 8011710:	687b      	ldr	r3, [r7, #4]
 8011712:	3303      	adds	r3, #3
 8011714:	607b      	str	r3, [r7, #4]
 8011716:	e136      	b.n	8011986 <pass_route3+0x682>
		}else if(MF2.FLAG.V == 1 && route[i] == 0x11 && route[i+1] == 0x11 && route[i+2] == 0x77){
 8011718:	4b33      	ldr	r3, [pc, #204]	; (80117e8 <pass_route3+0x4e4>)
 801171a:	881b      	ldrh	r3, [r3, #0]
 801171c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8011720:	b2db      	uxtb	r3, r3
 8011722:	2b01      	cmp	r3, #1
 8011724:	d120      	bne.n	8011768 <pass_route3+0x464>
 8011726:	4a31      	ldr	r2, [pc, #196]	; (80117ec <pass_route3+0x4e8>)
 8011728:	687b      	ldr	r3, [r7, #4]
 801172a:	4413      	add	r3, r2
 801172c:	781b      	ldrb	r3, [r3, #0]
 801172e:	2b11      	cmp	r3, #17
 8011730:	d11a      	bne.n	8011768 <pass_route3+0x464>
 8011732:	687b      	ldr	r3, [r7, #4]
 8011734:	3301      	adds	r3, #1
 8011736:	4a2d      	ldr	r2, [pc, #180]	; (80117ec <pass_route3+0x4e8>)
 8011738:	5cd3      	ldrb	r3, [r2, r3]
 801173a:	2b11      	cmp	r3, #17
 801173c:	d114      	bne.n	8011768 <pass_route3+0x464>
 801173e:	687b      	ldr	r3, [r7, #4]
 8011740:	3302      	adds	r3, #2
 8011742:	4a2a      	ldr	r2, [pc, #168]	; (80117ec <pass_route3+0x4e8>)
 8011744:	5cd3      	ldrb	r3, [r2, r3]
 8011746:	2b77      	cmp	r3, #119	; 0x77
 8011748:	d10e      	bne.n	8011768 <pass_route3+0x464>
			s_flag = 0;
 801174a:	2300      	movs	r3, #0
 801174c:	70fb      	strb	r3, [r7, #3]
			pass[p] = -12;							//a斜め左V135out
 801174e:	78bb      	ldrb	r3, [r7, #2]
 8011750:	4a27      	ldr	r2, [pc, #156]	; (80117f0 <pass_route3+0x4ec>)
 8011752:	21f4      	movs	r1, #244	; 0xf4
 8011754:	54d1      	strb	r1, [r2, r3]
			MF2.FLAG.V = 0;
 8011756:	4a24      	ldr	r2, [pc, #144]	; (80117e8 <pass_route3+0x4e4>)
 8011758:	8813      	ldrh	r3, [r2, #0]
 801175a:	f36f 03c3 	bfc	r3, #3, #1
 801175e:	8013      	strh	r3, [r2, #0]
			i = i + 3;
 8011760:	687b      	ldr	r3, [r7, #4]
 8011762:	3303      	adds	r3, #3
 8011764:	607b      	str	r3, [r7, #4]
 8011766:	e10e      	b.n	8011986 <pass_route3+0x682>
		}else if(route[i] == 0xff){
 8011768:	4a20      	ldr	r2, [pc, #128]	; (80117ec <pass_route3+0x4e8>)
 801176a:	687b      	ldr	r3, [r7, #4]
 801176c:	4413      	add	r3, r2
 801176e:	781b      	ldrb	r3, [r3, #0]
 8011770:	2bff      	cmp	r3, #255	; 0xff
 8011772:	d16a      	bne.n	801184a <pass_route3+0x546>
			if(MF2.FLAG.V == 1){
 8011774:	4b1c      	ldr	r3, [pc, #112]	; (80117e8 <pass_route3+0x4e4>)
 8011776:	881b      	ldrh	r3, [r3, #0]
 8011778:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 801177c:	b2db      	uxtb	r3, r3
 801177e:	2b01      	cmp	r3, #1
 8011780:	d15b      	bne.n	801183a <pass_route3+0x536>
				if(pass[p-1] == -1 && pass[p-2] == -1){
 8011782:	78bb      	ldrb	r3, [r7, #2]
 8011784:	3b01      	subs	r3, #1
 8011786:	4a1a      	ldr	r2, [pc, #104]	; (80117f0 <pass_route3+0x4ec>)
 8011788:	56d3      	ldrsb	r3, [r2, r3]
 801178a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801178e:	d111      	bne.n	80117b4 <pass_route3+0x4b0>
 8011790:	78bb      	ldrb	r3, [r7, #2]
 8011792:	3b02      	subs	r3, #2
 8011794:	4a16      	ldr	r2, [pc, #88]	; (80117f0 <pass_route3+0x4ec>)
 8011796:	56d3      	ldrsb	r3, [r2, r3]
 8011798:	f1b3 3fff 	cmp.w	r3, #4294967295
 801179c:	d10a      	bne.n	80117b4 <pass_route3+0x4b0>
					pass[p-2] = -15;
 801179e:	78bb      	ldrb	r3, [r7, #2]
 80117a0:	3b02      	subs	r3, #2
 80117a2:	4a13      	ldr	r2, [pc, #76]	; (80117f0 <pass_route3+0x4ec>)
 80117a4:	21f1      	movs	r1, #241	; 0xf1
 80117a6:	54d1      	strb	r1, [r2, r3]
					pass[p-1] = -114;
 80117a8:	78bb      	ldrb	r3, [r7, #2]
 80117aa:	3b01      	subs	r3, #1
 80117ac:	4a10      	ldr	r2, [pc, #64]	; (80117f0 <pass_route3+0x4ec>)
 80117ae:	218e      	movs	r1, #142	; 0x8e
 80117b0:	54d1      	strb	r1, [r2, r3]
 80117b2:	e042      	b.n	801183a <pass_route3+0x536>
				}else if(pass[p-1] == -2 && pass[p-2] == -2){
 80117b4:	78bb      	ldrb	r3, [r7, #2]
 80117b6:	3b01      	subs	r3, #1
 80117b8:	4a0d      	ldr	r2, [pc, #52]	; (80117f0 <pass_route3+0x4ec>)
 80117ba:	56d3      	ldrsb	r3, [r2, r3]
 80117bc:	f113 0f02 	cmn.w	r3, #2
 80117c0:	d11a      	bne.n	80117f8 <pass_route3+0x4f4>
 80117c2:	78bb      	ldrb	r3, [r7, #2]
 80117c4:	3b02      	subs	r3, #2
 80117c6:	4a0a      	ldr	r2, [pc, #40]	; (80117f0 <pass_route3+0x4ec>)
 80117c8:	56d3      	ldrsb	r3, [r2, r3]
 80117ca:	f113 0f02 	cmn.w	r3, #2
 80117ce:	d113      	bne.n	80117f8 <pass_route3+0x4f4>
					pass[p-2] = -16;
 80117d0:	78bb      	ldrb	r3, [r7, #2]
 80117d2:	3b02      	subs	r3, #2
 80117d4:	4a06      	ldr	r2, [pc, #24]	; (80117f0 <pass_route3+0x4ec>)
 80117d6:	21f0      	movs	r1, #240	; 0xf0
 80117d8:	54d1      	strb	r1, [r2, r3]
					pass[p-1] = -114;
 80117da:	78bb      	ldrb	r3, [r7, #2]
 80117dc:	3b01      	subs	r3, #1
 80117de:	4a04      	ldr	r2, [pc, #16]	; (80117f0 <pass_route3+0x4ec>)
 80117e0:	218e      	movs	r1, #142	; 0x8e
 80117e2:	54d1      	strb	r1, [r2, r3]
 80117e4:	e029      	b.n	801183a <pass_route3+0x536>
 80117e6:	bf00      	nop
 80117e8:	20000f64 	.word	0x20000f64
 80117ec:	20000c54 	.word	0x20000c54
 80117f0:	20000350 	.word	0x20000350
 80117f4:	200015c8 	.word	0x200015c8
				}else if(pass[p-1] == -1){
 80117f8:	78bb      	ldrb	r3, [r7, #2]
 80117fa:	3b01      	subs	r3, #1
 80117fc:	4a6a      	ldr	r2, [pc, #424]	; (80119a8 <pass_route3+0x6a4>)
 80117fe:	56d3      	ldrsb	r3, [r2, r3]
 8011800:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011804:	d109      	bne.n	801181a <pass_route3+0x516>
					pass[p-1] = -13;
 8011806:	78bb      	ldrb	r3, [r7, #2]
 8011808:	3b01      	subs	r3, #1
 801180a:	4a67      	ldr	r2, [pc, #412]	; (80119a8 <pass_route3+0x6a4>)
 801180c:	21f3      	movs	r1, #243	; 0xf3
 801180e:	54d1      	strb	r1, [r2, r3]
					pass[p] = -114;
 8011810:	78bb      	ldrb	r3, [r7, #2]
 8011812:	4a65      	ldr	r2, [pc, #404]	; (80119a8 <pass_route3+0x6a4>)
 8011814:	218e      	movs	r1, #142	; 0x8e
 8011816:	54d1      	strb	r1, [r2, r3]
 8011818:	e00f      	b.n	801183a <pass_route3+0x536>
				}else if(pass[p-1] == -2){
 801181a:	78bb      	ldrb	r3, [r7, #2]
 801181c:	3b01      	subs	r3, #1
 801181e:	4a62      	ldr	r2, [pc, #392]	; (80119a8 <pass_route3+0x6a4>)
 8011820:	56d3      	ldrsb	r3, [r2, r3]
 8011822:	f113 0f02 	cmn.w	r3, #2
 8011826:	d108      	bne.n	801183a <pass_route3+0x536>
					pass[p-1] = -14;
 8011828:	78bb      	ldrb	r3, [r7, #2]
 801182a:	3b01      	subs	r3, #1
 801182c:	4a5e      	ldr	r2, [pc, #376]	; (80119a8 <pass_route3+0x6a4>)
 801182e:	21f2      	movs	r1, #242	; 0xf2
 8011830:	54d1      	strb	r1, [r2, r3]
					pass[p] = -114;
 8011832:	78bb      	ldrb	r3, [r7, #2]
 8011834:	4a5c      	ldr	r2, [pc, #368]	; (80119a8 <pass_route3+0x6a4>)
 8011836:	218e      	movs	r1, #142	; 0x8e
 8011838:	54d1      	strb	r1, [r2, r3]
				}
			}
			pass[p] = -114;							//a終了用配列
 801183a:	78bb      	ldrb	r3, [r7, #2]
 801183c:	4a5a      	ldr	r2, [pc, #360]	; (80119a8 <pass_route3+0x6a4>)
 801183e:	218e      	movs	r1, #142	; 0x8e
 8011840:	54d1      	strb	r1, [r2, r3]
			i++;
 8011842:	687b      	ldr	r3, [r7, #4]
 8011844:	3301      	adds	r3, #1
 8011846:	607b      	str	r3, [r7, #4]
 8011848:	e09d      	b.n	8011986 <pass_route3+0x682>
		}else if(MF2.FLAG.V == 1 && route[i] == 0x44 && route[i+1] == 0x11){
 801184a:	4b58      	ldr	r3, [pc, #352]	; (80119ac <pass_route3+0x6a8>)
 801184c:	881b      	ldrh	r3, [r3, #0]
 801184e:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8011852:	b2db      	uxtb	r3, r3
 8011854:	2b01      	cmp	r3, #1
 8011856:	d11a      	bne.n	801188e <pass_route3+0x58a>
 8011858:	4a55      	ldr	r2, [pc, #340]	; (80119b0 <pass_route3+0x6ac>)
 801185a:	687b      	ldr	r3, [r7, #4]
 801185c:	4413      	add	r3, r2
 801185e:	781b      	ldrb	r3, [r3, #0]
 8011860:	2b44      	cmp	r3, #68	; 0x44
 8011862:	d114      	bne.n	801188e <pass_route3+0x58a>
 8011864:	687b      	ldr	r3, [r7, #4]
 8011866:	3301      	adds	r3, #1
 8011868:	4a51      	ldr	r2, [pc, #324]	; (80119b0 <pass_route3+0x6ac>)
 801186a:	5cd3      	ldrb	r3, [r2, r3]
 801186c:	2b11      	cmp	r3, #17
 801186e:	d10e      	bne.n	801188e <pass_route3+0x58a>
			s_flag = 0;
 8011870:	2300      	movs	r3, #0
 8011872:	70fb      	strb	r3, [r7, #3]
			pass[p] = 64;							//a斜め半直線
 8011874:	78bb      	ldrb	r3, [r7, #2]
 8011876:	4a4c      	ldr	r2, [pc, #304]	; (80119a8 <pass_route3+0x6a4>)
 8011878:	2140      	movs	r1, #64	; 0x40
 801187a:	54d1      	strb	r1, [r2, r3]
			MF2.FLAG.V = 1;
 801187c:	4a4b      	ldr	r2, [pc, #300]	; (80119ac <pass_route3+0x6a8>)
 801187e:	8813      	ldrh	r3, [r2, #0]
 8011880:	f043 0308 	orr.w	r3, r3, #8
 8011884:	8013      	strh	r3, [r2, #0]
			i++;
 8011886:	687b      	ldr	r3, [r7, #4]
 8011888:	3301      	adds	r3, #1
 801188a:	607b      	str	r3, [r7, #4]
 801188c:	e07b      	b.n	8011986 <pass_route3+0x682>
		}else if(MF2.FLAG.V == 1 && route[i] == 0x11 && route[i+1] == 0x44){
 801188e:	4b47      	ldr	r3, [pc, #284]	; (80119ac <pass_route3+0x6a8>)
 8011890:	881b      	ldrh	r3, [r3, #0]
 8011892:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8011896:	b2db      	uxtb	r3, r3
 8011898:	2b01      	cmp	r3, #1
 801189a:	d11a      	bne.n	80118d2 <pass_route3+0x5ce>
 801189c:	4a44      	ldr	r2, [pc, #272]	; (80119b0 <pass_route3+0x6ac>)
 801189e:	687b      	ldr	r3, [r7, #4]
 80118a0:	4413      	add	r3, r2
 80118a2:	781b      	ldrb	r3, [r3, #0]
 80118a4:	2b11      	cmp	r3, #17
 80118a6:	d114      	bne.n	80118d2 <pass_route3+0x5ce>
 80118a8:	687b      	ldr	r3, [r7, #4]
 80118aa:	3301      	adds	r3, #1
 80118ac:	4a40      	ldr	r2, [pc, #256]	; (80119b0 <pass_route3+0x6ac>)
 80118ae:	5cd3      	ldrb	r3, [r2, r3]
 80118b0:	2b44      	cmp	r3, #68	; 0x44
 80118b2:	d10e      	bne.n	80118d2 <pass_route3+0x5ce>
			s_flag = 0;
 80118b4:	2300      	movs	r3, #0
 80118b6:	70fb      	strb	r3, [r7, #3]
			pass[p] = 64;							//a斜め半直線
 80118b8:	78bb      	ldrb	r3, [r7, #2]
 80118ba:	4a3b      	ldr	r2, [pc, #236]	; (80119a8 <pass_route3+0x6a4>)
 80118bc:	2140      	movs	r1, #64	; 0x40
 80118be:	54d1      	strb	r1, [r2, r3]
			MF2.FLAG.V = 1;
 80118c0:	4a3a      	ldr	r2, [pc, #232]	; (80119ac <pass_route3+0x6a8>)
 80118c2:	8813      	ldrh	r3, [r2, #0]
 80118c4:	f043 0308 	orr.w	r3, r3, #8
 80118c8:	8013      	strh	r3, [r2, #0]
			i++;
 80118ca:	687b      	ldr	r3, [r7, #4]
 80118cc:	3301      	adds	r3, #1
 80118ce:	607b      	str	r3, [r7, #4]
 80118d0:	e059      	b.n	8011986 <pass_route3+0x682>
		}else if(route[i] == 0x44){
 80118d2:	4a37      	ldr	r2, [pc, #220]	; (80119b0 <pass_route3+0x6ac>)
 80118d4:	687b      	ldr	r3, [r7, #4]
 80118d6:	4413      	add	r3, r2
 80118d8:	781b      	ldrb	r3, [r3, #0]
 80118da:	2b44      	cmp	r3, #68	; 0x44
 80118dc:	d107      	bne.n	80118ee <pass_route3+0x5ea>
			pass[p] = -1;							//a右スラローム
 80118de:	78bb      	ldrb	r3, [r7, #2]
 80118e0:	4a31      	ldr	r2, [pc, #196]	; (80119a8 <pass_route3+0x6a4>)
 80118e2:	21ff      	movs	r1, #255	; 0xff
 80118e4:	54d1      	strb	r1, [r2, r3]
			i++;
 80118e6:	687b      	ldr	r3, [r7, #4]
 80118e8:	3301      	adds	r3, #1
 80118ea:	607b      	str	r3, [r7, #4]
 80118ec:	e04b      	b.n	8011986 <pass_route3+0x682>
		}else if(route[i] == 0x11){
 80118ee:	4a30      	ldr	r2, [pc, #192]	; (80119b0 <pass_route3+0x6ac>)
 80118f0:	687b      	ldr	r3, [r7, #4]
 80118f2:	4413      	add	r3, r2
 80118f4:	781b      	ldrb	r3, [r3, #0]
 80118f6:	2b11      	cmp	r3, #17
 80118f8:	d107      	bne.n	801190a <pass_route3+0x606>
			pass[p] = -2;							//a左スラローム
 80118fa:	78bb      	ldrb	r3, [r7, #2]
 80118fc:	4a2a      	ldr	r2, [pc, #168]	; (80119a8 <pass_route3+0x6a4>)
 80118fe:	21fe      	movs	r1, #254	; 0xfe
 8011900:	54d1      	strb	r1, [r2, r3]
			i++;
 8011902:	687b      	ldr	r3, [r7, #4]
 8011904:	3301      	adds	r3, #1
 8011906:	607b      	str	r3, [r7, #4]
 8011908:	e03d      	b.n	8011986 <pass_route3+0x682>
		}else if(route[i] == 0x77){
 801190a:	4a29      	ldr	r2, [pc, #164]	; (80119b0 <pass_route3+0x6ac>)
 801190c:	687b      	ldr	r3, [r7, #4]
 801190e:	4413      	add	r3, r2
 8011910:	781b      	ldrb	r3, [r3, #0]
 8011912:	2b77      	cmp	r3, #119	; 0x77
 8011914:	d137      	bne.n	8011986 <pass_route3+0x682>
			if(s_flag){
 8011916:	78fb      	ldrb	r3, [r7, #3]
 8011918:	2b00      	cmp	r3, #0
 801191a:	d012      	beq.n	8011942 <pass_route3+0x63e>
				pass[p-1]++;						//aスラローム前半直線追加
 801191c:	78bb      	ldrb	r3, [r7, #2]
 801191e:	3b01      	subs	r3, #1
 8011920:	4a21      	ldr	r2, [pc, #132]	; (80119a8 <pass_route3+0x6a4>)
 8011922:	56d2      	ldrsb	r2, [r2, r3]
 8011924:	b2d2      	uxtb	r2, r2
 8011926:	3201      	adds	r2, #1
 8011928:	b2d2      	uxtb	r2, r2
 801192a:	b251      	sxtb	r1, r2
 801192c:	4a1e      	ldr	r2, [pc, #120]	; (80119a8 <pass_route3+0x6a4>)
 801192e:	54d1      	strb	r1, [r2, r3]
				p--;
 8011930:	78bb      	ldrb	r3, [r7, #2]
 8011932:	3b01      	subs	r3, #1
 8011934:	70bb      	strb	r3, [r7, #2]
				s_flag = 0;
 8011936:	2300      	movs	r3, #0
 8011938:	70fb      	strb	r3, [r7, #3]
				i++;
 801193a:	687b      	ldr	r3, [r7, #4]
 801193c:	3301      	adds	r3, #1
 801193e:	607b      	str	r3, [r7, #4]
 8011940:	e021      	b.n	8011986 <pass_route3+0x682>
			}else{
				s++;
 8011942:	787b      	ldrb	r3, [r7, #1]
 8011944:	3301      	adds	r3, #1
 8011946:	707b      	strb	r3, [r7, #1]
				pass[p] = s;						//aもし半直線1つだけの場合whileには入らない
 8011948:	78bb      	ldrb	r3, [r7, #2]
 801194a:	f997 1001 	ldrsb.w	r1, [r7, #1]
 801194e:	4a16      	ldr	r2, [pc, #88]	; (80119a8 <pass_route3+0x6a4>)
 8011950:	54d1      	strb	r1, [r2, r3]
				while(route[i+1] == 0x77){
 8011952:	e00c      	b.n	801196e <pass_route3+0x66a>
					s_flag = 1;
 8011954:	2301      	movs	r3, #1
 8011956:	70fb      	strb	r3, [r7, #3]
					pass[p] = s;					//a半直線2つ以上続く場合、最後半直線は大回り用に残す
 8011958:	78bb      	ldrb	r3, [r7, #2]
 801195a:	f997 1001 	ldrsb.w	r1, [r7, #1]
 801195e:	4a12      	ldr	r2, [pc, #72]	; (80119a8 <pass_route3+0x6a4>)
 8011960:	54d1      	strb	r1, [r2, r3]
					i++;
 8011962:	687b      	ldr	r3, [r7, #4]
 8011964:	3301      	adds	r3, #1
 8011966:	607b      	str	r3, [r7, #4]
					s++;
 8011968:	787b      	ldrb	r3, [r7, #1]
 801196a:	3301      	adds	r3, #1
 801196c:	707b      	strb	r3, [r7, #1]
				while(route[i+1] == 0x77){
 801196e:	687b      	ldr	r3, [r7, #4]
 8011970:	3301      	adds	r3, #1
 8011972:	4a0f      	ldr	r2, [pc, #60]	; (80119b0 <pass_route3+0x6ac>)
 8011974:	5cd3      	ldrb	r3, [r2, r3]
 8011976:	2b77      	cmp	r3, #119	; 0x77
 8011978:	d0ec      	beq.n	8011954 <pass_route3+0x650>
				}
				if(!s_flag){
 801197a:	78fb      	ldrb	r3, [r7, #3]
 801197c:	2b00      	cmp	r3, #0
 801197e:	d102      	bne.n	8011986 <pass_route3+0x682>
					i++;
 8011980:	687b      	ldr	r3, [r7, #4]
 8011982:	3301      	adds	r3, #1
 8011984:	607b      	str	r3, [r7, #4]
				}
			}
		}
		p++;
 8011986:	78bb      	ldrb	r3, [r7, #2]
 8011988:	3301      	adds	r3, #1
 801198a:	70bb      	strb	r3, [r7, #2]
	while(route[i-1] != 0xff){
 801198c:	687b      	ldr	r3, [r7, #4]
 801198e:	3b01      	subs	r3, #1
 8011990:	4a07      	ldr	r2, [pc, #28]	; (80119b0 <pass_route3+0x6ac>)
 8011992:	5cd3      	ldrb	r3, [r2, r3]
 8011994:	2bff      	cmp	r3, #255	; 0xff
 8011996:	f47f acd4 	bne.w	8011342 <pass_route3+0x3e>
	}
}
 801199a:	bf00      	nop
 801199c:	370c      	adds	r7, #12
 801199e:	46bd      	mov	sp, r7
 80119a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119a4:	4770      	bx	lr
 80119a6:	bf00      	nop
 80119a8:	20000350 	.word	0x20000350
 80119ac:	20000f64 	.word	0x20000f64
 80119b0:	20000c54 	.word	0x20000c54

080119b4 <store_map_in_eeprom>:
//store_map_in_eeprom
// mapデータをeepromに格納する
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void store_map_in_eeprom(void){
 80119b4:	b580      	push	{r7, lr}
 80119b6:	b082      	sub	sp, #8
 80119b8:	af00      	add	r7, sp, #0
	printf("eprom func start \n");
 80119ba:	4818      	ldr	r0, [pc, #96]	; (8011a1c <store_map_in_eeprom+0x68>)
 80119bc:	f000 ff28 	bl	8012810 <puts>
	eeprom_enable_write();
 80119c0:	f7fa fe1a 	bl	800c5f8 <eeprom_enable_write>
	printf("eprom enable_write fin \n");
 80119c4:	4816      	ldr	r0, [pc, #88]	; (8011a20 <store_map_in_eeprom+0x6c>)
 80119c6:	f000 ff23 	bl	8012810 <puts>
	int i;
	for(i = 0; i < 16; i++){
 80119ca:	2300      	movs	r3, #0
 80119cc:	607b      	str	r3, [r7, #4]
 80119ce:	e01b      	b.n	8011a08 <store_map_in_eeprom+0x54>
		int j;
		for(j = 0; j < 16; j++){
 80119d0:	2300      	movs	r3, #0
 80119d2:	603b      	str	r3, [r7, #0]
 80119d4:	e012      	b.n	80119fc <store_map_in_eeprom+0x48>
			eeprom_write_halfword(i*16 + j, (uint16_t) map[i][j]);
 80119d6:	687b      	ldr	r3, [r7, #4]
 80119d8:	011a      	lsls	r2, r3, #4
 80119da:	683b      	ldr	r3, [r7, #0]
 80119dc:	4413      	add	r3, r2
 80119de:	4618      	mov	r0, r3
 80119e0:	4a10      	ldr	r2, [pc, #64]	; (8011a24 <store_map_in_eeprom+0x70>)
 80119e2:	687b      	ldr	r3, [r7, #4]
 80119e4:	011b      	lsls	r3, r3, #4
 80119e6:	441a      	add	r2, r3
 80119e8:	683b      	ldr	r3, [r7, #0]
 80119ea:	4413      	add	r3, r2
 80119ec:	781b      	ldrb	r3, [r3, #0]
 80119ee:	b29b      	uxth	r3, r3
 80119f0:	4619      	mov	r1, r3
 80119f2:	f7fa fe2c 	bl	800c64e <eeprom_write_halfword>
		for(j = 0; j < 16; j++){
 80119f6:	683b      	ldr	r3, [r7, #0]
 80119f8:	3301      	adds	r3, #1
 80119fa:	603b      	str	r3, [r7, #0]
 80119fc:	683b      	ldr	r3, [r7, #0]
 80119fe:	2b0f      	cmp	r3, #15
 8011a00:	dde9      	ble.n	80119d6 <store_map_in_eeprom+0x22>
	for(i = 0; i < 16; i++){
 8011a02:	687b      	ldr	r3, [r7, #4]
 8011a04:	3301      	adds	r3, #1
 8011a06:	607b      	str	r3, [r7, #4]
 8011a08:	687b      	ldr	r3, [r7, #4]
 8011a0a:	2b0f      	cmp	r3, #15
 8011a0c:	dde0      	ble.n	80119d0 <store_map_in_eeprom+0x1c>
		}
	}
	eeprom_disable_write();
 8011a0e:	f7fa fe17 	bl	800c640 <eeprom_disable_write>
}
 8011a12:	bf00      	nop
 8011a14:	3708      	adds	r7, #8
 8011a16:	46bd      	mov	sp, r7
 8011a18:	bd80      	pop	{r7, pc}
 8011a1a:	bf00      	nop
 8011a1c:	08013db0 	.word	0x08013db0
 8011a20:	08013dc4 	.word	0x08013dc4
 8011a24:	200001ac 	.word	0x200001ac

08011a28 <load_map_from_eeprom>:
//load_map_in_eeprom
// mapデータをeepromから取得する
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void load_map_from_eeprom(void){
 8011a28:	b580      	push	{r7, lr}
 8011a2a:	b082      	sub	sp, #8
 8011a2c:	af00      	add	r7, sp, #0
	int i;
	for(i = 0; i < 16; i++){
 8011a2e:	2300      	movs	r3, #0
 8011a30:	607b      	str	r3, [r7, #4]
 8011a32:	e01c      	b.n	8011a6e <load_map_from_eeprom+0x46>
		int j;
		for(j = 0; j < 16; j++){
 8011a34:	2300      	movs	r3, #0
 8011a36:	603b      	str	r3, [r7, #0]
 8011a38:	e013      	b.n	8011a62 <load_map_from_eeprom+0x3a>
			map[i][j] = (uint8_t) eeprom_read_halfword(i*16 + j);
 8011a3a:	687b      	ldr	r3, [r7, #4]
 8011a3c:	011a      	lsls	r2, r3, #4
 8011a3e:	683b      	ldr	r3, [r7, #0]
 8011a40:	4413      	add	r3, r2
 8011a42:	4618      	mov	r0, r3
 8011a44:	f7fa fe20 	bl	800c688 <eeprom_read_halfword>
 8011a48:	4603      	mov	r3, r0
 8011a4a:	b2d9      	uxtb	r1, r3
 8011a4c:	4a0b      	ldr	r2, [pc, #44]	; (8011a7c <load_map_from_eeprom+0x54>)
 8011a4e:	687b      	ldr	r3, [r7, #4]
 8011a50:	011b      	lsls	r3, r3, #4
 8011a52:	441a      	add	r2, r3
 8011a54:	683b      	ldr	r3, [r7, #0]
 8011a56:	4413      	add	r3, r2
 8011a58:	460a      	mov	r2, r1
 8011a5a:	701a      	strb	r2, [r3, #0]
		for(j = 0; j < 16; j++){
 8011a5c:	683b      	ldr	r3, [r7, #0]
 8011a5e:	3301      	adds	r3, #1
 8011a60:	603b      	str	r3, [r7, #0]
 8011a62:	683b      	ldr	r3, [r7, #0]
 8011a64:	2b0f      	cmp	r3, #15
 8011a66:	dde8      	ble.n	8011a3a <load_map_from_eeprom+0x12>
	for(i = 0; i < 16; i++){
 8011a68:	687b      	ldr	r3, [r7, #4]
 8011a6a:	3301      	adds	r3, #1
 8011a6c:	607b      	str	r3, [r7, #4]
 8011a6e:	687b      	ldr	r3, [r7, #4]
 8011a70:	2b0f      	cmp	r3, #15
 8011a72:	dddf      	ble.n	8011a34 <load_map_from_eeprom+0xc>
		}
	}
}
 8011a74:	bf00      	nop
 8011a76:	3708      	adds	r7, #8
 8011a78:	46bd      	mov	sp, r7
 8011a7a:	bd80      	pop	{r7, pc}
 8011a7c:	200001ac 	.word	0x200001ac

08011a80 <sensor_init>:

#include "global.h"


void sensor_init(void){
 8011a80:	b480      	push	{r7}
 8011a82:	af00      	add	r7, sp, #0
	tp = 0;
 8011a84:	4b0e      	ldr	r3, [pc, #56]	; (8011ac0 <sensor_init+0x40>)
 8011a86:	2200      	movs	r2, #0
 8011a88:	701a      	strb	r2, [r3, #0]
	ad_l = ad_r = ad_fr = ad_fl = 0;
 8011a8a:	4b0e      	ldr	r3, [pc, #56]	; (8011ac4 <sensor_init+0x44>)
 8011a8c:	2200      	movs	r2, #0
 8011a8e:	601a      	str	r2, [r3, #0]
 8011a90:	4b0c      	ldr	r3, [pc, #48]	; (8011ac4 <sensor_init+0x44>)
 8011a92:	681b      	ldr	r3, [r3, #0]
 8011a94:	4a0c      	ldr	r2, [pc, #48]	; (8011ac8 <sensor_init+0x48>)
 8011a96:	6013      	str	r3, [r2, #0]
 8011a98:	4b0b      	ldr	r3, [pc, #44]	; (8011ac8 <sensor_init+0x48>)
 8011a9a:	681b      	ldr	r3, [r3, #0]
 8011a9c:	4a0b      	ldr	r2, [pc, #44]	; (8011acc <sensor_init+0x4c>)
 8011a9e:	6013      	str	r3, [r2, #0]
 8011aa0:	4b0a      	ldr	r3, [pc, #40]	; (8011acc <sensor_init+0x4c>)
 8011aa2:	681b      	ldr	r3, [r3, #0]
 8011aa4:	4a0a      	ldr	r2, [pc, #40]	; (8011ad0 <sensor_init+0x50>)
 8011aa6:	6013      	str	r3, [r2, #0]
	base_l = base_r = 0;
 8011aa8:	4b0a      	ldr	r3, [pc, #40]	; (8011ad4 <sensor_init+0x54>)
 8011aaa:	2200      	movs	r2, #0
 8011aac:	801a      	strh	r2, [r3, #0]
 8011aae:	4b09      	ldr	r3, [pc, #36]	; (8011ad4 <sensor_init+0x54>)
 8011ab0:	881a      	ldrh	r2, [r3, #0]
 8011ab2:	4b09      	ldr	r3, [pc, #36]	; (8011ad8 <sensor_init+0x58>)
 8011ab4:	801a      	strh	r2, [r3, #0]
}
 8011ab6:	bf00      	nop
 8011ab8:	46bd      	mov	sp, r7
 8011aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011abe:	4770      	bx	lr
 8011ac0:	200012a0 	.word	0x200012a0
 8011ac4:	20000d54 	.word	0x20000d54
 8011ac8:	20000c00 	.word	0x20000c00
 8011acc:	20000f60 	.word	0x20000f60
 8011ad0:	20000afc 	.word	0x20000afc
 8011ad4:	200002c0 	.word	0x200002c0
 8011ad8:	2000034c 	.word	0x2000034c

08011adc <get_base>:


uint8_t get_base(){
 8011adc:	b480      	push	{r7}
 8011ade:	b083      	sub	sp, #12
 8011ae0:	af00      	add	r7, sp, #0
	uint8_t res = 1;									//for return
 8011ae2:	2301      	movs	r3, #1
 8011ae4:	71fb      	strb	r3, [r7, #7]

	base_l = ad_l;										//sensor value base L
 8011ae6:	4b08      	ldr	r3, [pc, #32]	; (8011b08 <get_base+0x2c>)
 8011ae8:	681b      	ldr	r3, [r3, #0]
 8011aea:	b29a      	uxth	r2, r3
 8011aec:	4b07      	ldr	r3, [pc, #28]	; (8011b0c <get_base+0x30>)
 8011aee:	801a      	strh	r2, [r3, #0]
	base_r = ad_r;										//sensor value base R
 8011af0:	4b07      	ldr	r3, [pc, #28]	; (8011b10 <get_base+0x34>)
 8011af2:	681b      	ldr	r3, [r3, #0]
 8011af4:	b29a      	uxth	r2, r3
 8011af6:	4b07      	ldr	r3, [pc, #28]	; (8011b14 <get_base+0x38>)
 8011af8:	801a      	strh	r2, [r3, #0]

	return res;											//
 8011afa:	79fb      	ldrb	r3, [r7, #7]
}
 8011afc:	4618      	mov	r0, r3
 8011afe:	370c      	adds	r7, #12
 8011b00:	46bd      	mov	sp, r7
 8011b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b06:	4770      	bx	lr
 8011b08:	20000afc 	.word	0x20000afc
 8011b0c:	2000034c 	.word	0x2000034c
 8011b10:	20000f60 	.word	0x20000f60
 8011b14:	200002c0 	.word	0x200002c0

08011b18 <get_wall_info>:


void get_wall_info(){
 8011b18:	b480      	push	{r7}
 8011b1a:	af00      	add	r7, sp, #0

	//----reset----
	wall_info = 0x00;									//wall
 8011b1c:	4b16      	ldr	r3, [pc, #88]	; (8011b78 <get_wall_info+0x60>)
 8011b1e:	2200      	movs	r2, #0
 8011b20:	701a      	strb	r2, [r3, #0]
	//----look forward----
	if(ad_fr > WALL_BASE_FR || ad_fl > WALL_BASE_FL){
 8011b22:	4b16      	ldr	r3, [pc, #88]	; (8011b7c <get_wall_info+0x64>)
 8011b24:	681b      	ldr	r3, [r3, #0]
 8011b26:	2b78      	cmp	r3, #120	; 0x78
 8011b28:	d803      	bhi.n	8011b32 <get_wall_info+0x1a>
 8011b2a:	4b15      	ldr	r3, [pc, #84]	; (8011b80 <get_wall_info+0x68>)
 8011b2c:	681b      	ldr	r3, [r3, #0]
 8011b2e:	2bc8      	cmp	r3, #200	; 0xc8
 8011b30:	d906      	bls.n	8011b40 <get_wall_info+0x28>
		wall_info |= 0x88;								//forward check
 8011b32:	4b11      	ldr	r3, [pc, #68]	; (8011b78 <get_wall_info+0x60>)
 8011b34:	781b      	ldrb	r3, [r3, #0]
 8011b36:	f063 0377 	orn	r3, r3, #119	; 0x77
 8011b3a:	b2da      	uxtb	r2, r3
 8011b3c:	4b0e      	ldr	r3, [pc, #56]	; (8011b78 <get_wall_info+0x60>)
 8011b3e:	701a      	strb	r2, [r3, #0]
	}
	//----look right----
	if(ad_r > WALL_BASE_R){
 8011b40:	4b10      	ldr	r3, [pc, #64]	; (8011b84 <get_wall_info+0x6c>)
 8011b42:	681b      	ldr	r3, [r3, #0]
 8011b44:	2b78      	cmp	r3, #120	; 0x78
 8011b46:	d906      	bls.n	8011b56 <get_wall_info+0x3e>
		wall_info |= 0x44;								//right check
 8011b48:	4b0b      	ldr	r3, [pc, #44]	; (8011b78 <get_wall_info+0x60>)
 8011b4a:	781b      	ldrb	r3, [r3, #0]
 8011b4c:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8011b50:	b2da      	uxtb	r2, r3
 8011b52:	4b09      	ldr	r3, [pc, #36]	; (8011b78 <get_wall_info+0x60>)
 8011b54:	701a      	strb	r2, [r3, #0]
	}
	//----look left----
	if(ad_l > WALL_BASE_L){
 8011b56:	4b0c      	ldr	r3, [pc, #48]	; (8011b88 <get_wall_info+0x70>)
 8011b58:	681b      	ldr	r3, [r3, #0]
 8011b5a:	2b8c      	cmp	r3, #140	; 0x8c
 8011b5c:	d906      	bls.n	8011b6c <get_wall_info+0x54>
		wall_info |= 0x11;								//light check
 8011b5e:	4b06      	ldr	r3, [pc, #24]	; (8011b78 <get_wall_info+0x60>)
 8011b60:	781b      	ldrb	r3, [r3, #0]
 8011b62:	f043 0311 	orr.w	r3, r3, #17
 8011b66:	b2da      	uxtb	r2, r3
 8011b68:	4b03      	ldr	r3, [pc, #12]	; (8011b78 <get_wall_info+0x60>)
 8011b6a:	701a      	strb	r2, [r3, #0]
	}
}
 8011b6c:	bf00      	nop
 8011b6e:	46bd      	mov	sp, r7
 8011b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b74:	4770      	bx	lr
 8011b76:	bf00      	nop
 8011b78:	200002c8 	.word	0x200002c8
 8011b7c:	20000c00 	.word	0x20000c00
 8011b80:	20000d54 	.word	0x20000d54
 8011b84:	20000f60 	.word	0x20000f60
 8011b88:	20000afc 	.word	0x20000afc

08011b8c <led_write>:
//led_write
//aモード選択用LEDのON-OFF
//a引数：led1(0=>OFF, 1=>ON), led2(0=>OFF, 1=>ON), led3(0=>OFF, 1=>ON)
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void led_write(uint8_t led1, uint8_t led2, uint8_t led3){
 8011b8c:	b580      	push	{r7, lr}
 8011b8e:	b082      	sub	sp, #8
 8011b90:	af00      	add	r7, sp, #0
 8011b92:	4603      	mov	r3, r0
 8011b94:	71fb      	strb	r3, [r7, #7]
 8011b96:	460b      	mov	r3, r1
 8011b98:	71bb      	strb	r3, [r7, #6]
 8011b9a:	4613      	mov	r3, r2
 8011b9c:	717b      	strb	r3, [r7, #5]
	if(led1) HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8011b9e:	79fb      	ldrb	r3, [r7, #7]
 8011ba0:	2b00      	cmp	r3, #0
 8011ba2:	d005      	beq.n	8011bb0 <led_write+0x24>
 8011ba4:	2201      	movs	r2, #1
 8011ba6:	2110      	movs	r1, #16
 8011ba8:	4814      	ldr	r0, [pc, #80]	; (8011bfc <led_write+0x70>)
 8011baa:	f7f0 fbab 	bl	8002304 <HAL_GPIO_WritePin>
 8011bae:	e004      	b.n	8011bba <led_write+0x2e>
	else HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8011bb0:	2200      	movs	r2, #0
 8011bb2:	2110      	movs	r1, #16
 8011bb4:	4811      	ldr	r0, [pc, #68]	; (8011bfc <led_write+0x70>)
 8011bb6:	f7f0 fba5 	bl	8002304 <HAL_GPIO_WritePin>

	if(led2) HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 8011bba:	79bb      	ldrb	r3, [r7, #6]
 8011bbc:	2b00      	cmp	r3, #0
 8011bbe:	d005      	beq.n	8011bcc <led_write+0x40>
 8011bc0:	2201      	movs	r2, #1
 8011bc2:	2140      	movs	r1, #64	; 0x40
 8011bc4:	480d      	ldr	r0, [pc, #52]	; (8011bfc <led_write+0x70>)
 8011bc6:	f7f0 fb9d 	bl	8002304 <HAL_GPIO_WritePin>
 8011bca:	e004      	b.n	8011bd6 <led_write+0x4a>
	else HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 8011bcc:	2200      	movs	r2, #0
 8011bce:	2140      	movs	r1, #64	; 0x40
 8011bd0:	480a      	ldr	r0, [pc, #40]	; (8011bfc <led_write+0x70>)
 8011bd2:	f7f0 fb97 	bl	8002304 <HAL_GPIO_WritePin>

	if(led3) HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);
 8011bd6:	797b      	ldrb	r3, [r7, #5]
 8011bd8:	2b00      	cmp	r3, #0
 8011bda:	d005      	beq.n	8011be8 <led_write+0x5c>
 8011bdc:	2201      	movs	r2, #1
 8011bde:	2180      	movs	r1, #128	; 0x80
 8011be0:	4806      	ldr	r0, [pc, #24]	; (8011bfc <led_write+0x70>)
 8011be2:	f7f0 fb8f 	bl	8002304 <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
}
 8011be6:	e004      	b.n	8011bf2 <led_write+0x66>
	else HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 8011be8:	2200      	movs	r2, #0
 8011bea:	2180      	movs	r1, #128	; 0x80
 8011bec:	4803      	ldr	r0, [pc, #12]	; (8011bfc <led_write+0x70>)
 8011bee:	f7f0 fb89 	bl	8002304 <HAL_GPIO_WritePin>
}
 8011bf2:	bf00      	nop
 8011bf4:	3708      	adds	r7, #8
 8011bf6:	46bd      	mov	sp, r7
 8011bf8:	bd80      	pop	{r7, pc}
 8011bfa:	bf00      	nop
 8011bfc:	40020000 	.word	0x40020000

08011c00 <full_led_write>:
//full_led_write
//aフルカラーLEDの色選択
//a引数：fulled(0=>OFF, 1=>a赤, 2=>緑, 3=>青, 4=>青緑, 5=>紫, 6=>黄, 7=>白)
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void full_led_write(uint8_t fulled){
 8011c00:	b580      	push	{r7, lr}
 8011c02:	b082      	sub	sp, #8
 8011c04:	af00      	add	r7, sp, #0
 8011c06:	4603      	mov	r3, r0
 8011c08:	71fb      	strb	r3, [r7, #7]
	if(fulled == 0){
 8011c0a:	79fb      	ldrb	r3, [r7, #7]
 8011c0c:	2b00      	cmp	r3, #0
 8011c0e:	d112      	bne.n	8011c36 <full_led_write+0x36>
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
 8011c10:	2201      	movs	r2, #1
 8011c12:	f44f 7180 	mov.w	r1, #256	; 0x100
 8011c16:	4856      	ldr	r0, [pc, #344]	; (8011d70 <full_led_write+0x170>)
 8011c18:	f7f0 fb74 	bl	8002304 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 8011c1c:	2201      	movs	r2, #1
 8011c1e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8011c22:	4853      	ldr	r0, [pc, #332]	; (8011d70 <full_led_write+0x170>)
 8011c24:	f7f0 fb6e 	bl	8002304 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8011c28:	2201      	movs	r2, #1
 8011c2a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8011c2e:	4851      	ldr	r0, [pc, #324]	; (8011d74 <full_led_write+0x174>)
 8011c30:	f7f0 fb68 	bl	8002304 <HAL_GPIO_WritePin>
	else if(fulled == 7){
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
	    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
	}
}
 8011c34:	e098      	b.n	8011d68 <full_led_write+0x168>
	else if(fulled == 1){
 8011c36:	79fb      	ldrb	r3, [r7, #7]
 8011c38:	2b01      	cmp	r3, #1
 8011c3a:	d112      	bne.n	8011c62 <full_led_write+0x62>
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
 8011c3c:	2201      	movs	r2, #1
 8011c3e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8011c42:	484b      	ldr	r0, [pc, #300]	; (8011d70 <full_led_write+0x170>)
 8011c44:	f7f0 fb5e 	bl	8002304 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 8011c48:	2201      	movs	r2, #1
 8011c4a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8011c4e:	4848      	ldr	r0, [pc, #288]	; (8011d70 <full_led_write+0x170>)
 8011c50:	f7f0 fb58 	bl	8002304 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8011c54:	2200      	movs	r2, #0
 8011c56:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8011c5a:	4846      	ldr	r0, [pc, #280]	; (8011d74 <full_led_write+0x174>)
 8011c5c:	f7f0 fb52 	bl	8002304 <HAL_GPIO_WritePin>
}
 8011c60:	e082      	b.n	8011d68 <full_led_write+0x168>
	else if(fulled == 2){
 8011c62:	79fb      	ldrb	r3, [r7, #7]
 8011c64:	2b02      	cmp	r3, #2
 8011c66:	d112      	bne.n	8011c8e <full_led_write+0x8e>
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
 8011c68:	2201      	movs	r2, #1
 8011c6a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8011c6e:	4840      	ldr	r0, [pc, #256]	; (8011d70 <full_led_write+0x170>)
 8011c70:	f7f0 fb48 	bl	8002304 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 8011c74:	2200      	movs	r2, #0
 8011c76:	f44f 7100 	mov.w	r1, #512	; 0x200
 8011c7a:	483d      	ldr	r0, [pc, #244]	; (8011d70 <full_led_write+0x170>)
 8011c7c:	f7f0 fb42 	bl	8002304 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8011c80:	2201      	movs	r2, #1
 8011c82:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8011c86:	483b      	ldr	r0, [pc, #236]	; (8011d74 <full_led_write+0x174>)
 8011c88:	f7f0 fb3c 	bl	8002304 <HAL_GPIO_WritePin>
}
 8011c8c:	e06c      	b.n	8011d68 <full_led_write+0x168>
	else if(fulled == 3){
 8011c8e:	79fb      	ldrb	r3, [r7, #7]
 8011c90:	2b03      	cmp	r3, #3
 8011c92:	d112      	bne.n	8011cba <full_led_write+0xba>
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 8011c94:	2200      	movs	r2, #0
 8011c96:	f44f 7180 	mov.w	r1, #256	; 0x100
 8011c9a:	4835      	ldr	r0, [pc, #212]	; (8011d70 <full_led_write+0x170>)
 8011c9c:	f7f0 fb32 	bl	8002304 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 8011ca0:	2201      	movs	r2, #1
 8011ca2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8011ca6:	4832      	ldr	r0, [pc, #200]	; (8011d70 <full_led_write+0x170>)
 8011ca8:	f7f0 fb2c 	bl	8002304 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8011cac:	2201      	movs	r2, #1
 8011cae:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8011cb2:	4830      	ldr	r0, [pc, #192]	; (8011d74 <full_led_write+0x174>)
 8011cb4:	f7f0 fb26 	bl	8002304 <HAL_GPIO_WritePin>
}
 8011cb8:	e056      	b.n	8011d68 <full_led_write+0x168>
	else if(fulled == 4){
 8011cba:	79fb      	ldrb	r3, [r7, #7]
 8011cbc:	2b04      	cmp	r3, #4
 8011cbe:	d112      	bne.n	8011ce6 <full_led_write+0xe6>
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 8011cc0:	2200      	movs	r2, #0
 8011cc2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8011cc6:	482a      	ldr	r0, [pc, #168]	; (8011d70 <full_led_write+0x170>)
 8011cc8:	f7f0 fb1c 	bl	8002304 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 8011ccc:	2200      	movs	r2, #0
 8011cce:	f44f 7100 	mov.w	r1, #512	; 0x200
 8011cd2:	4827      	ldr	r0, [pc, #156]	; (8011d70 <full_led_write+0x170>)
 8011cd4:	f7f0 fb16 	bl	8002304 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8011cd8:	2201      	movs	r2, #1
 8011cda:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8011cde:	4825      	ldr	r0, [pc, #148]	; (8011d74 <full_led_write+0x174>)
 8011ce0:	f7f0 fb10 	bl	8002304 <HAL_GPIO_WritePin>
}
 8011ce4:	e040      	b.n	8011d68 <full_led_write+0x168>
	else if(fulled == 5){
 8011ce6:	79fb      	ldrb	r3, [r7, #7]
 8011ce8:	2b05      	cmp	r3, #5
 8011cea:	d112      	bne.n	8011d12 <full_led_write+0x112>
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 8011cec:	2200      	movs	r2, #0
 8011cee:	f44f 7180 	mov.w	r1, #256	; 0x100
 8011cf2:	481f      	ldr	r0, [pc, #124]	; (8011d70 <full_led_write+0x170>)
 8011cf4:	f7f0 fb06 	bl	8002304 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 8011cf8:	2201      	movs	r2, #1
 8011cfa:	f44f 7100 	mov.w	r1, #512	; 0x200
 8011cfe:	481c      	ldr	r0, [pc, #112]	; (8011d70 <full_led_write+0x170>)
 8011d00:	f7f0 fb00 	bl	8002304 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8011d04:	2200      	movs	r2, #0
 8011d06:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8011d0a:	481a      	ldr	r0, [pc, #104]	; (8011d74 <full_led_write+0x174>)
 8011d0c:	f7f0 fafa 	bl	8002304 <HAL_GPIO_WritePin>
}
 8011d10:	e02a      	b.n	8011d68 <full_led_write+0x168>
	else if(fulled == 6){
 8011d12:	79fb      	ldrb	r3, [r7, #7]
 8011d14:	2b06      	cmp	r3, #6
 8011d16:	d112      	bne.n	8011d3e <full_led_write+0x13e>
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
 8011d18:	2201      	movs	r2, #1
 8011d1a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8011d1e:	4814      	ldr	r0, [pc, #80]	; (8011d70 <full_led_write+0x170>)
 8011d20:	f7f0 faf0 	bl	8002304 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 8011d24:	2200      	movs	r2, #0
 8011d26:	f44f 7100 	mov.w	r1, #512	; 0x200
 8011d2a:	4811      	ldr	r0, [pc, #68]	; (8011d70 <full_led_write+0x170>)
 8011d2c:	f7f0 faea 	bl	8002304 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8011d30:	2200      	movs	r2, #0
 8011d32:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8011d36:	480f      	ldr	r0, [pc, #60]	; (8011d74 <full_led_write+0x174>)
 8011d38:	f7f0 fae4 	bl	8002304 <HAL_GPIO_WritePin>
}
 8011d3c:	e014      	b.n	8011d68 <full_led_write+0x168>
	else if(fulled == 7){
 8011d3e:	79fb      	ldrb	r3, [r7, #7]
 8011d40:	2b07      	cmp	r3, #7
 8011d42:	d111      	bne.n	8011d68 <full_led_write+0x168>
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 8011d44:	2200      	movs	r2, #0
 8011d46:	f44f 7180 	mov.w	r1, #256	; 0x100
 8011d4a:	4809      	ldr	r0, [pc, #36]	; (8011d70 <full_led_write+0x170>)
 8011d4c:	f7f0 fada 	bl	8002304 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 8011d50:	2200      	movs	r2, #0
 8011d52:	f44f 7100 	mov.w	r1, #512	; 0x200
 8011d56:	4806      	ldr	r0, [pc, #24]	; (8011d70 <full_led_write+0x170>)
 8011d58:	f7f0 fad4 	bl	8002304 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8011d5c:	2200      	movs	r2, #0
 8011d5e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8011d62:	4804      	ldr	r0, [pc, #16]	; (8011d74 <full_led_write+0x174>)
 8011d64:	f7f0 face 	bl	8002304 <HAL_GPIO_WritePin>
}
 8011d68:	bf00      	nop
 8011d6a:	3708      	adds	r7, #8
 8011d6c:	46bd      	mov	sp, r7
 8011d6e:	bd80      	pop	{r7, pc}
 8011d70:	40020400 	.word	0x40020400
 8011d74:	40020800 	.word	0x40020800

08011d78 <sensor_test>:
//sensor_test
//a壁センサーとジャイロセンサーの値確認
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void sensor_test(){
 8011d78:	b580      	push	{r7, lr}
 8011d7a:	b08c      	sub	sp, #48	; 0x30
 8011d7c:	af02      	add	r7, sp, #8

	int mode = 0;
 8011d7e:	2300      	movs	r3, #0
 8011d80:	627b      	str	r3, [r7, #36]	; 0x24
	printf("Mode : %d\n", mode);
 8011d82:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8011d84:	4881      	ldr	r0, [pc, #516]	; (8011f8c <sensor_test+0x214>)
 8011d86:	f000 fccf 	bl	8012728 <iprintf>

	while(1){
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 8011d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d8c:	b2db      	uxtb	r3, r3
 8011d8e:	f003 0301 	and.w	r3, r3, #1
 8011d92:	b2d8      	uxtb	r0, r3
 8011d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d96:	b2db      	uxtb	r3, r3
 8011d98:	f003 0302 	and.w	r3, r3, #2
 8011d9c:	b2d9      	uxtb	r1, r3
 8011d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011da0:	b2db      	uxtb	r3, r3
 8011da2:	f003 0304 	and.w	r3, r3, #4
 8011da6:	b2db      	uxtb	r3, r3
 8011da8:	461a      	mov	r2, r3
 8011daa:	f7ff feef 	bl	8011b8c <led_write>
		  if(dist_r >= 20){
 8011dae:	4b78      	ldr	r3, [pc, #480]	; (8011f90 <sensor_test+0x218>)
 8011db0:	edd3 7a00 	vldr	s15, [r3]
 8011db4:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8011db8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8011dbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011dc0:	db0f      	blt.n	8011de2 <sensor_test+0x6a>
			  mode++;
 8011dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011dc4:	3301      	adds	r3, #1
 8011dc6:	627b      	str	r3, [r7, #36]	; 0x24
			  dist_r = 0;
 8011dc8:	4b71      	ldr	r3, [pc, #452]	; (8011f90 <sensor_test+0x218>)
 8011dca:	f04f 0200 	mov.w	r2, #0
 8011dce:	601a      	str	r2, [r3, #0]
			  if(mode > 7){
 8011dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011dd2:	2b07      	cmp	r3, #7
 8011dd4:	dd01      	ble.n	8011dda <sensor_test+0x62>
				  mode = 0;
 8011dd6:	2300      	movs	r3, #0
 8011dd8:	627b      	str	r3, [r7, #36]	; 0x24
			  }
			  printf("Mode : %d\n", mode);
 8011dda:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8011ddc:	486b      	ldr	r0, [pc, #428]	; (8011f8c <sensor_test+0x214>)
 8011dde:	f000 fca3 	bl	8012728 <iprintf>
			  //buzzer(pitagola2[mode-1][0], pitagola2[mode-1][1]);
			  //buzzer(pitagola[2][0], pitagola[2][1]);
		  }
		  if(dist_r <= -20){
 8011de2:	4b6b      	ldr	r3, [pc, #428]	; (8011f90 <sensor_test+0x218>)
 8011de4:	edd3 7a00 	vldr	s15, [r3]
 8011de8:	eebb 7a04 	vmov.f32	s14, #180	; 0xc1a00000 -20.0
 8011dec:	eef4 7ac7 	vcmpe.f32	s15, s14
 8011df0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011df4:	d80f      	bhi.n	8011e16 <sensor_test+0x9e>
			  mode--;
 8011df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011df8:	3b01      	subs	r3, #1
 8011dfa:	627b      	str	r3, [r7, #36]	; 0x24
			  dist_r = 0;
 8011dfc:	4b64      	ldr	r3, [pc, #400]	; (8011f90 <sensor_test+0x218>)
 8011dfe:	f04f 0200 	mov.w	r2, #0
 8011e02:	601a      	str	r2, [r3, #0]
			  if(mode < 0){
 8011e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e06:	2b00      	cmp	r3, #0
 8011e08:	da01      	bge.n	8011e0e <sensor_test+0x96>
				  mode = 7;
 8011e0a:	2307      	movs	r3, #7
 8011e0c:	627b      	str	r3, [r7, #36]	; 0x24
			  }
			  printf("Mode : %d\n", mode);
 8011e0e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8011e10:	485e      	ldr	r0, [pc, #376]	; (8011f8c <sensor_test+0x214>)
 8011e12:	f000 fc89 	bl	8012728 <iprintf>
			  //buzzer(pitagola2[mode-1][0], pitagola2[mode-1][1]);
			  //buzzer(pitagola[2][0], pitagola[2][1]);
		  }
		  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET){
 8011e16:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8011e1a:	485e      	ldr	r0, [pc, #376]	; (8011f94 <sensor_test+0x21c>)
 8011e1c:	f7f0 fa5a 	bl	80022d4 <HAL_GPIO_ReadPin>
 8011e20:	4603      	mov	r3, r0
 8011e22:	2b00      	cmp	r3, #0
 8011e24:	d1b1      	bne.n	8011d8a <sensor_test+0x12>
			  HAL_Delay(50);
 8011e26:	2032      	movs	r0, #50	; 0x32
 8011e28:	f7ef f8f8 	bl	800101c <HAL_Delay>
			  while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET);
 8011e2c:	bf00      	nop
 8011e2e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8011e32:	4858      	ldr	r0, [pc, #352]	; (8011f94 <sensor_test+0x21c>)
 8011e34:	f7f0 fa4e 	bl	80022d4 <HAL_GPIO_ReadPin>
 8011e38:	4603      	mov	r3, r0
 8011e3a:	2b00      	cmp	r3, #0
 8011e3c:	d0f7      	beq.n	8011e2e <sensor_test+0xb6>

			  drive_ready();
 8011e3e:	f7f2 ff1f 	bl	8004c80 <drive_ready>

			  switch(mode){
 8011e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e44:	2b07      	cmp	r3, #7
 8011e46:	d8a0      	bhi.n	8011d8a <sensor_test+0x12>
 8011e48:	a201      	add	r2, pc, #4	; (adr r2, 8011e50 <sensor_test+0xd8>)
 8011e4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011e4e:	bf00      	nop
 8011e50:	08011e71 	.word	0x08011e71
 8011e54:	08011e77 	.word	0x08011e77
 8011e58:	08011ec9 	.word	0x08011ec9
 8011e5c:	08011d8b 	.word	0x08011d8b
 8011e60:	08011d8b 	.word	0x08011d8b
 8011e64:	08011d8b 	.word	0x08011d8b
 8011e68:	08011d8b 	.word	0x08011d8b
 8011e6c:	08011d8b 	.word	0x08011d8b
				case 0:
					get_base();
 8011e70:	f7ff fe34 	bl	8011adc <get_base>
					break;
 8011e74:	e089      	b.n	8011f8a <sensor_test+0x212>
				case 1:
			  		  //----Wall sensor check----
			  		  printf("Wall Sensor Check.\n");
 8011e76:	4848      	ldr	r0, [pc, #288]	; (8011f98 <sensor_test+0x220>)
 8011e78:	f000 fcca 	bl	8012810 <puts>
			  		  while(1){
			  			  get_wall_info();
 8011e7c:	f7ff fe4c 	bl	8011b18 <get_wall_info>
			  			  led_write(wall_info & 0x11, wall_info & 0x88, wall_info & 0x44);
 8011e80:	4b46      	ldr	r3, [pc, #280]	; (8011f9c <sensor_test+0x224>)
 8011e82:	781b      	ldrb	r3, [r3, #0]
 8011e84:	f003 0311 	and.w	r3, r3, #17
 8011e88:	b2d8      	uxtb	r0, r3
 8011e8a:	4b44      	ldr	r3, [pc, #272]	; (8011f9c <sensor_test+0x224>)
 8011e8c:	781b      	ldrb	r3, [r3, #0]
 8011e8e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8011e92:	b2d9      	uxtb	r1, r3
 8011e94:	4b41      	ldr	r3, [pc, #260]	; (8011f9c <sensor_test+0x224>)
 8011e96:	781b      	ldrb	r3, [r3, #0]
 8011e98:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8011e9c:	b2db      	uxtb	r3, r3
 8011e9e:	461a      	mov	r2, r3
 8011ea0:	f7ff fe74 	bl	8011b8c <led_write>
			  			  printf("ad_l : %d, ad_fl : %d, ad_fr : %d, ad_r : %d\n", ad_l, ad_fl, ad_fr, ad_r);
 8011ea4:	4b3e      	ldr	r3, [pc, #248]	; (8011fa0 <sensor_test+0x228>)
 8011ea6:	6819      	ldr	r1, [r3, #0]
 8011ea8:	4b3e      	ldr	r3, [pc, #248]	; (8011fa4 <sensor_test+0x22c>)
 8011eaa:	681a      	ldr	r2, [r3, #0]
 8011eac:	4b3e      	ldr	r3, [pc, #248]	; (8011fa8 <sensor_test+0x230>)
 8011eae:	6818      	ldr	r0, [r3, #0]
 8011eb0:	4b3e      	ldr	r3, [pc, #248]	; (8011fac <sensor_test+0x234>)
 8011eb2:	681b      	ldr	r3, [r3, #0]
 8011eb4:	9300      	str	r3, [sp, #0]
 8011eb6:	4603      	mov	r3, r0
 8011eb8:	483d      	ldr	r0, [pc, #244]	; (8011fb0 <sensor_test+0x238>)
 8011eba:	f000 fc35 	bl	8012728 <iprintf>
			  			  HAL_Delay(333);
 8011ebe:	f240 104d 	movw	r0, #333	; 0x14d
 8011ec2:	f7ef f8ab 	bl	800101c <HAL_Delay>
			  			  get_wall_info();
 8011ec6:	e7d9      	b.n	8011e7c <sensor_test+0x104>
						}
					break;
				case 2:
					//----Gyro sensor check----
					printf("Gyro Sensor Check.\n");
 8011ec8:	483a      	ldr	r0, [pc, #232]	; (8011fb4 <sensor_test+0x23c>)
 8011eca:	f000 fca1 	bl	8012810 <puts>
					int accel_x, accel_y, accel_z;
					int gyro_x, gyro_y, gyro_z;
					int deg_x, deg_y, deg_z;
			  		  while(1){
			  			  accel_x = accel_read_x();
 8011ece:	f7fa fc83 	bl	800c7d8 <accel_read_x>
 8011ed2:	eef0 7a40 	vmov.f32	s15, s0
 8011ed6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011eda:	ee17 3a90 	vmov	r3, s15
 8011ede:	623b      	str	r3, [r7, #32]
			  			  accel_y = accel_read_y();
 8011ee0:	f7fa fca0 	bl	800c824 <accel_read_y>
 8011ee4:	eef0 7a40 	vmov.f32	s15, s0
 8011ee8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011eec:	ee17 3a90 	vmov	r3, s15
 8011ef0:	61fb      	str	r3, [r7, #28]
			  			  accel_z = accel_read_z();
 8011ef2:	f7fa fcbd 	bl	800c870 <accel_read_z>
 8011ef6:	eef0 7a40 	vmov.f32	s15, s0
 8011efa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011efe:	ee17 3a90 	vmov	r3, s15
 8011f02:	61bb      	str	r3, [r7, #24]
			  			  gyro_x = gyro_read_x();
 8011f04:	f7fa fcdc 	bl	800c8c0 <gyro_read_x>
 8011f08:	eef0 7a40 	vmov.f32	s15, s0
 8011f0c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011f10:	ee17 3a90 	vmov	r3, s15
 8011f14:	617b      	str	r3, [r7, #20]
			  			  gyro_y = gyro_read_y();
 8011f16:	f7fa fd0f 	bl	800c938 <gyro_read_y>
 8011f1a:	eef0 7a40 	vmov.f32	s15, s0
 8011f1e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011f22:	ee17 3a90 	vmov	r3, s15
 8011f26:	613b      	str	r3, [r7, #16]
			  			  gyro_z = gyro_read_z();
 8011f28:	f7fa fd42 	bl	800c9b0 <gyro_read_z>
 8011f2c:	eef0 7a40 	vmov.f32	s15, s0
 8011f30:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011f34:	ee17 3a90 	vmov	r3, s15
 8011f38:	60fb      	str	r3, [r7, #12]
			  			  deg_x = degree_x;
 8011f3a:	4b1f      	ldr	r3, [pc, #124]	; (8011fb8 <sensor_test+0x240>)
 8011f3c:	edd3 7a00 	vldr	s15, [r3]
 8011f40:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011f44:	ee17 3a90 	vmov	r3, s15
 8011f48:	60bb      	str	r3, [r7, #8]
			  			  deg_y = degree_y;
 8011f4a:	4b1c      	ldr	r3, [pc, #112]	; (8011fbc <sensor_test+0x244>)
 8011f4c:	edd3 7a00 	vldr	s15, [r3]
 8011f50:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011f54:	ee17 3a90 	vmov	r3, s15
 8011f58:	607b      	str	r3, [r7, #4]
			  			  deg_z = degree_z;
 8011f5a:	4b19      	ldr	r3, [pc, #100]	; (8011fc0 <sensor_test+0x248>)
 8011f5c:	edd3 7a00 	vldr	s15, [r3]
 8011f60:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011f64:	ee17 3a90 	vmov	r3, s15
 8011f68:	603b      	str	r3, [r7, #0]

			  			  //printf("Accel x: %3d, y: %3d, z: %3d\n", accel_x, accel_y, accel_z);
			  			  printf("Gyro  x: %3d, y: %3d, z: %3d\n", gyro_x, gyro_y, gyro_z);
 8011f6a:	68fb      	ldr	r3, [r7, #12]
 8011f6c:	693a      	ldr	r2, [r7, #16]
 8011f6e:	6979      	ldr	r1, [r7, #20]
 8011f70:	4814      	ldr	r0, [pc, #80]	; (8011fc4 <sensor_test+0x24c>)
 8011f72:	f000 fbd9 	bl	8012728 <iprintf>
			  			  printf("Deg   x: %3d, y: %3d, z: %3d\n", deg_x, deg_y, deg_z);
 8011f76:	683b      	ldr	r3, [r7, #0]
 8011f78:	687a      	ldr	r2, [r7, #4]
 8011f7a:	68b9      	ldr	r1, [r7, #8]
 8011f7c:	4812      	ldr	r0, [pc, #72]	; (8011fc8 <sensor_test+0x250>)
 8011f7e:	f000 fbd3 	bl	8012728 <iprintf>
			  			  HAL_Delay(111);
 8011f82:	206f      	movs	r0, #111	; 0x6f
 8011f84:	f7ef f84a 	bl	800101c <HAL_Delay>
			  			  accel_x = accel_read_x();
 8011f88:	e7a1      	b.n	8011ece <sensor_test+0x156>
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 8011f8a:	e6fe      	b.n	8011d8a <sensor_test+0x12>
 8011f8c:	08013ddc 	.word	0x08013ddc
 8011f90:	20000aec 	.word	0x20000aec
 8011f94:	40020000 	.word	0x40020000
 8011f98:	08013de8 	.word	0x08013de8
 8011f9c:	200002c8 	.word	0x200002c8
 8011fa0:	20000afc 	.word	0x20000afc
 8011fa4:	20000d54 	.word	0x20000d54
 8011fa8:	20000c00 	.word	0x20000c00
 8011fac:	20000f60 	.word	0x20000f60
 8011fb0:	08013dfc 	.word	0x08013dfc
 8011fb4:	08013e2c 	.word	0x08013e2c
 8011fb8:	20000450 	.word	0x20000450
 8011fbc:	20000f70 	.word	0x20000f70
 8011fc0:	20000b5c 	.word	0x20000b5c
 8011fc4:	08013e40 	.word	0x08013e40
 8011fc8:	08013e60 	.word	0x08013e60

08011fcc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8011fcc:	b480      	push	{r7}
 8011fce:	b083      	sub	sp, #12
 8011fd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8011fd2:	2300      	movs	r3, #0
 8011fd4:	607b      	str	r3, [r7, #4]
 8011fd6:	4b10      	ldr	r3, [pc, #64]	; (8012018 <HAL_MspInit+0x4c>)
 8011fd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011fda:	4a0f      	ldr	r2, [pc, #60]	; (8012018 <HAL_MspInit+0x4c>)
 8011fdc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8011fe0:	6453      	str	r3, [r2, #68]	; 0x44
 8011fe2:	4b0d      	ldr	r3, [pc, #52]	; (8012018 <HAL_MspInit+0x4c>)
 8011fe4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011fe6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8011fea:	607b      	str	r3, [r7, #4]
 8011fec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8011fee:	2300      	movs	r3, #0
 8011ff0:	603b      	str	r3, [r7, #0]
 8011ff2:	4b09      	ldr	r3, [pc, #36]	; (8012018 <HAL_MspInit+0x4c>)
 8011ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011ff6:	4a08      	ldr	r2, [pc, #32]	; (8012018 <HAL_MspInit+0x4c>)
 8011ff8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8011ffc:	6413      	str	r3, [r2, #64]	; 0x40
 8011ffe:	4b06      	ldr	r3, [pc, #24]	; (8012018 <HAL_MspInit+0x4c>)
 8012000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012002:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8012006:	603b      	str	r3, [r7, #0]
 8012008:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 801200a:	bf00      	nop
 801200c:	370c      	adds	r7, #12
 801200e:	46bd      	mov	sp, r7
 8012010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012014:	4770      	bx	lr
 8012016:	bf00      	nop
 8012018:	40023800 	.word	0x40023800

0801201c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 801201c:	b580      	push	{r7, lr}
 801201e:	b08a      	sub	sp, #40	; 0x28
 8012020:	af00      	add	r7, sp, #0
 8012022:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8012024:	f107 0314 	add.w	r3, r7, #20
 8012028:	2200      	movs	r2, #0
 801202a:	601a      	str	r2, [r3, #0]
 801202c:	605a      	str	r2, [r3, #4]
 801202e:	609a      	str	r2, [r3, #8]
 8012030:	60da      	str	r2, [r3, #12]
 8012032:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8012034:	687b      	ldr	r3, [r7, #4]
 8012036:	681b      	ldr	r3, [r3, #0]
 8012038:	4a17      	ldr	r2, [pc, #92]	; (8012098 <HAL_ADC_MspInit+0x7c>)
 801203a:	4293      	cmp	r3, r2
 801203c:	d127      	bne.n	801208e <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 801203e:	2300      	movs	r3, #0
 8012040:	613b      	str	r3, [r7, #16]
 8012042:	4b16      	ldr	r3, [pc, #88]	; (801209c <HAL_ADC_MspInit+0x80>)
 8012044:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012046:	4a15      	ldr	r2, [pc, #84]	; (801209c <HAL_ADC_MspInit+0x80>)
 8012048:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801204c:	6453      	str	r3, [r2, #68]	; 0x44
 801204e:	4b13      	ldr	r3, [pc, #76]	; (801209c <HAL_ADC_MspInit+0x80>)
 8012050:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012052:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012056:	613b      	str	r3, [r7, #16]
 8012058:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 801205a:	2300      	movs	r3, #0
 801205c:	60fb      	str	r3, [r7, #12]
 801205e:	4b0f      	ldr	r3, [pc, #60]	; (801209c <HAL_ADC_MspInit+0x80>)
 8012060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012062:	4a0e      	ldr	r2, [pc, #56]	; (801209c <HAL_ADC_MspInit+0x80>)
 8012064:	f043 0301 	orr.w	r3, r3, #1
 8012068:	6313      	str	r3, [r2, #48]	; 0x30
 801206a:	4b0c      	ldr	r3, [pc, #48]	; (801209c <HAL_ADC_MspInit+0x80>)
 801206c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801206e:	f003 0301 	and.w	r3, r3, #1
 8012072:	60fb      	str	r3, [r7, #12]
 8012074:	68fb      	ldr	r3, [r7, #12]
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8012076:	230f      	movs	r3, #15
 8012078:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 801207a:	2303      	movs	r3, #3
 801207c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801207e:	2300      	movs	r3, #0
 8012080:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8012082:	f107 0314 	add.w	r3, r7, #20
 8012086:	4619      	mov	r1, r3
 8012088:	4805      	ldr	r0, [pc, #20]	; (80120a0 <HAL_ADC_MspInit+0x84>)
 801208a:	f7ef ff89 	bl	8001fa0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 801208e:	bf00      	nop
 8012090:	3728      	adds	r7, #40	; 0x28
 8012092:	46bd      	mov	sp, r7
 8012094:	bd80      	pop	{r7, pc}
 8012096:	bf00      	nop
 8012098:	40012000 	.word	0x40012000
 801209c:	40023800 	.word	0x40023800
 80120a0:	40020000 	.word	0x40020000

080120a4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80120a4:	b580      	push	{r7, lr}
 80120a6:	b08a      	sub	sp, #40	; 0x28
 80120a8:	af00      	add	r7, sp, #0
 80120aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80120ac:	f107 0314 	add.w	r3, r7, #20
 80120b0:	2200      	movs	r2, #0
 80120b2:	601a      	str	r2, [r3, #0]
 80120b4:	605a      	str	r2, [r3, #4]
 80120b6:	609a      	str	r2, [r3, #8]
 80120b8:	60da      	str	r2, [r3, #12]
 80120ba:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 80120bc:	687b      	ldr	r3, [r7, #4]
 80120be:	681b      	ldr	r3, [r3, #0]
 80120c0:	4a19      	ldr	r2, [pc, #100]	; (8012128 <HAL_SPI_MspInit+0x84>)
 80120c2:	4293      	cmp	r3, r2
 80120c4:	d12c      	bne.n	8012120 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80120c6:	2300      	movs	r3, #0
 80120c8:	613b      	str	r3, [r7, #16]
 80120ca:	4b18      	ldr	r3, [pc, #96]	; (801212c <HAL_SPI_MspInit+0x88>)
 80120cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80120ce:	4a17      	ldr	r2, [pc, #92]	; (801212c <HAL_SPI_MspInit+0x88>)
 80120d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80120d4:	6413      	str	r3, [r2, #64]	; 0x40
 80120d6:	4b15      	ldr	r3, [pc, #84]	; (801212c <HAL_SPI_MspInit+0x88>)
 80120d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80120da:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80120de:	613b      	str	r3, [r7, #16]
 80120e0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80120e2:	2300      	movs	r3, #0
 80120e4:	60fb      	str	r3, [r7, #12]
 80120e6:	4b11      	ldr	r3, [pc, #68]	; (801212c <HAL_SPI_MspInit+0x88>)
 80120e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80120ea:	4a10      	ldr	r2, [pc, #64]	; (801212c <HAL_SPI_MspInit+0x88>)
 80120ec:	f043 0304 	orr.w	r3, r3, #4
 80120f0:	6313      	str	r3, [r2, #48]	; 0x30
 80120f2:	4b0e      	ldr	r3, [pc, #56]	; (801212c <HAL_SPI_MspInit+0x88>)
 80120f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80120f6:	f003 0304 	and.w	r3, r3, #4
 80120fa:	60fb      	str	r3, [r7, #12]
 80120fc:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration    
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80120fe:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8012102:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012104:	2302      	movs	r3, #2
 8012106:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012108:	2300      	movs	r3, #0
 801210a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801210c:	2303      	movs	r3, #3
 801210e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8012110:	2306      	movs	r3, #6
 8012112:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8012114:	f107 0314 	add.w	r3, r7, #20
 8012118:	4619      	mov	r1, r3
 801211a:	4805      	ldr	r0, [pc, #20]	; (8012130 <HAL_SPI_MspInit+0x8c>)
 801211c:	f7ef ff40 	bl	8001fa0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8012120:	bf00      	nop
 8012122:	3728      	adds	r7, #40	; 0x28
 8012124:	46bd      	mov	sp, r7
 8012126:	bd80      	pop	{r7, pc}
 8012128:	40003c00 	.word	0x40003c00
 801212c:	40023800 	.word	0x40023800
 8012130:	40020800 	.word	0x40020800

08012134 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8012134:	b580      	push	{r7, lr}
 8012136:	b086      	sub	sp, #24
 8012138:	af00      	add	r7, sp, #0
 801213a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 801213c:	687b      	ldr	r3, [r7, #4]
 801213e:	681b      	ldr	r3, [r3, #0]
 8012140:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8012144:	d10e      	bne.n	8012164 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8012146:	2300      	movs	r3, #0
 8012148:	617b      	str	r3, [r7, #20]
 801214a:	4b20      	ldr	r3, [pc, #128]	; (80121cc <HAL_TIM_Base_MspInit+0x98>)
 801214c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801214e:	4a1f      	ldr	r2, [pc, #124]	; (80121cc <HAL_TIM_Base_MspInit+0x98>)
 8012150:	f043 0301 	orr.w	r3, r3, #1
 8012154:	6413      	str	r3, [r2, #64]	; 0x40
 8012156:	4b1d      	ldr	r3, [pc, #116]	; (80121cc <HAL_TIM_Base_MspInit+0x98>)
 8012158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801215a:	f003 0301 	and.w	r3, r3, #1
 801215e:	617b      	str	r3, [r7, #20]
 8012160:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8012162:	e02e      	b.n	80121c2 <HAL_TIM_Base_MspInit+0x8e>
  else if(htim_base->Instance==TIM3)
 8012164:	687b      	ldr	r3, [r7, #4]
 8012166:	681b      	ldr	r3, [r3, #0]
 8012168:	4a19      	ldr	r2, [pc, #100]	; (80121d0 <HAL_TIM_Base_MspInit+0x9c>)
 801216a:	4293      	cmp	r3, r2
 801216c:	d10e      	bne.n	801218c <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 801216e:	2300      	movs	r3, #0
 8012170:	613b      	str	r3, [r7, #16]
 8012172:	4b16      	ldr	r3, [pc, #88]	; (80121cc <HAL_TIM_Base_MspInit+0x98>)
 8012174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012176:	4a15      	ldr	r2, [pc, #84]	; (80121cc <HAL_TIM_Base_MspInit+0x98>)
 8012178:	f043 0302 	orr.w	r3, r3, #2
 801217c:	6413      	str	r3, [r2, #64]	; 0x40
 801217e:	4b13      	ldr	r3, [pc, #76]	; (80121cc <HAL_TIM_Base_MspInit+0x98>)
 8012180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012182:	f003 0302 	and.w	r3, r3, #2
 8012186:	613b      	str	r3, [r7, #16]
 8012188:	693b      	ldr	r3, [r7, #16]
}
 801218a:	e01a      	b.n	80121c2 <HAL_TIM_Base_MspInit+0x8e>
  else if(htim_base->Instance==TIM6)
 801218c:	687b      	ldr	r3, [r7, #4]
 801218e:	681b      	ldr	r3, [r3, #0]
 8012190:	4a10      	ldr	r2, [pc, #64]	; (80121d4 <HAL_TIM_Base_MspInit+0xa0>)
 8012192:	4293      	cmp	r3, r2
 8012194:	d115      	bne.n	80121c2 <HAL_TIM_Base_MspInit+0x8e>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8012196:	2300      	movs	r3, #0
 8012198:	60fb      	str	r3, [r7, #12]
 801219a:	4b0c      	ldr	r3, [pc, #48]	; (80121cc <HAL_TIM_Base_MspInit+0x98>)
 801219c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801219e:	4a0b      	ldr	r2, [pc, #44]	; (80121cc <HAL_TIM_Base_MspInit+0x98>)
 80121a0:	f043 0310 	orr.w	r3, r3, #16
 80121a4:	6413      	str	r3, [r2, #64]	; 0x40
 80121a6:	4b09      	ldr	r3, [pc, #36]	; (80121cc <HAL_TIM_Base_MspInit+0x98>)
 80121a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80121aa:	f003 0310 	and.w	r3, r3, #16
 80121ae:	60fb      	str	r3, [r7, #12]
 80121b0:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80121b2:	2200      	movs	r2, #0
 80121b4:	2100      	movs	r1, #0
 80121b6:	2036      	movs	r0, #54	; 0x36
 80121b8:	f7ef fbe7 	bl	800198a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80121bc:	2036      	movs	r0, #54	; 0x36
 80121be:	f7ef fc00 	bl	80019c2 <HAL_NVIC_EnableIRQ>
}
 80121c2:	bf00      	nop
 80121c4:	3718      	adds	r7, #24
 80121c6:	46bd      	mov	sp, r7
 80121c8:	bd80      	pop	{r7, pc}
 80121ca:	bf00      	nop
 80121cc:	40023800 	.word	0x40023800
 80121d0:	40000400 	.word	0x40000400
 80121d4:	40001000 	.word	0x40001000

080121d8 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80121d8:	b580      	push	{r7, lr}
 80121da:	b08c      	sub	sp, #48	; 0x30
 80121dc:	af00      	add	r7, sp, #0
 80121de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80121e0:	f107 031c 	add.w	r3, r7, #28
 80121e4:	2200      	movs	r2, #0
 80121e6:	601a      	str	r2, [r3, #0]
 80121e8:	605a      	str	r2, [r3, #4]
 80121ea:	609a      	str	r2, [r3, #8]
 80121ec:	60da      	str	r2, [r3, #12]
 80121ee:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM4)
 80121f0:	687b      	ldr	r3, [r7, #4]
 80121f2:	681b      	ldr	r3, [r3, #0]
 80121f4:	4a32      	ldr	r2, [pc, #200]	; (80122c0 <HAL_TIM_Encoder_MspInit+0xe8>)
 80121f6:	4293      	cmp	r3, r2
 80121f8:	d12c      	bne.n	8012254 <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80121fa:	2300      	movs	r3, #0
 80121fc:	61bb      	str	r3, [r7, #24]
 80121fe:	4b31      	ldr	r3, [pc, #196]	; (80122c4 <HAL_TIM_Encoder_MspInit+0xec>)
 8012200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012202:	4a30      	ldr	r2, [pc, #192]	; (80122c4 <HAL_TIM_Encoder_MspInit+0xec>)
 8012204:	f043 0304 	orr.w	r3, r3, #4
 8012208:	6413      	str	r3, [r2, #64]	; 0x40
 801220a:	4b2e      	ldr	r3, [pc, #184]	; (80122c4 <HAL_TIM_Encoder_MspInit+0xec>)
 801220c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801220e:	f003 0304 	and.w	r3, r3, #4
 8012212:	61bb      	str	r3, [r7, #24]
 8012214:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8012216:	2300      	movs	r3, #0
 8012218:	617b      	str	r3, [r7, #20]
 801221a:	4b2a      	ldr	r3, [pc, #168]	; (80122c4 <HAL_TIM_Encoder_MspInit+0xec>)
 801221c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801221e:	4a29      	ldr	r2, [pc, #164]	; (80122c4 <HAL_TIM_Encoder_MspInit+0xec>)
 8012220:	f043 0302 	orr.w	r3, r3, #2
 8012224:	6313      	str	r3, [r2, #48]	; 0x30
 8012226:	4b27      	ldr	r3, [pc, #156]	; (80122c4 <HAL_TIM_Encoder_MspInit+0xec>)
 8012228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801222a:	f003 0302 	and.w	r3, r3, #2
 801222e:	617b      	str	r3, [r7, #20]
 8012230:	697b      	ldr	r3, [r7, #20]
    /**TIM4 GPIO Configuration    
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8012232:	23c0      	movs	r3, #192	; 0xc0
 8012234:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012236:	2302      	movs	r3, #2
 8012238:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801223a:	2300      	movs	r3, #0
 801223c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801223e:	2300      	movs	r3, #0
 8012240:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8012242:	2302      	movs	r3, #2
 8012244:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8012246:	f107 031c 	add.w	r3, r7, #28
 801224a:	4619      	mov	r1, r3
 801224c:	481e      	ldr	r0, [pc, #120]	; (80122c8 <HAL_TIM_Encoder_MspInit+0xf0>)
 801224e:	f7ef fea7 	bl	8001fa0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8012252:	e030      	b.n	80122b6 <HAL_TIM_Encoder_MspInit+0xde>
  else if(htim_encoder->Instance==TIM8)
 8012254:	687b      	ldr	r3, [r7, #4]
 8012256:	681b      	ldr	r3, [r3, #0]
 8012258:	4a1c      	ldr	r2, [pc, #112]	; (80122cc <HAL_TIM_Encoder_MspInit+0xf4>)
 801225a:	4293      	cmp	r3, r2
 801225c:	d12b      	bne.n	80122b6 <HAL_TIM_Encoder_MspInit+0xde>
    __HAL_RCC_TIM8_CLK_ENABLE();
 801225e:	2300      	movs	r3, #0
 8012260:	613b      	str	r3, [r7, #16]
 8012262:	4b18      	ldr	r3, [pc, #96]	; (80122c4 <HAL_TIM_Encoder_MspInit+0xec>)
 8012264:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012266:	4a17      	ldr	r2, [pc, #92]	; (80122c4 <HAL_TIM_Encoder_MspInit+0xec>)
 8012268:	f043 0302 	orr.w	r3, r3, #2
 801226c:	6453      	str	r3, [r2, #68]	; 0x44
 801226e:	4b15      	ldr	r3, [pc, #84]	; (80122c4 <HAL_TIM_Encoder_MspInit+0xec>)
 8012270:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012272:	f003 0302 	and.w	r3, r3, #2
 8012276:	613b      	str	r3, [r7, #16]
 8012278:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 801227a:	2300      	movs	r3, #0
 801227c:	60fb      	str	r3, [r7, #12]
 801227e:	4b11      	ldr	r3, [pc, #68]	; (80122c4 <HAL_TIM_Encoder_MspInit+0xec>)
 8012280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012282:	4a10      	ldr	r2, [pc, #64]	; (80122c4 <HAL_TIM_Encoder_MspInit+0xec>)
 8012284:	f043 0304 	orr.w	r3, r3, #4
 8012288:	6313      	str	r3, [r2, #48]	; 0x30
 801228a:	4b0e      	ldr	r3, [pc, #56]	; (80122c4 <HAL_TIM_Encoder_MspInit+0xec>)
 801228c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801228e:	f003 0304 	and.w	r3, r3, #4
 8012292:	60fb      	str	r3, [r7, #12]
 8012294:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8012296:	23c0      	movs	r3, #192	; 0xc0
 8012298:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801229a:	2302      	movs	r3, #2
 801229c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801229e:	2300      	movs	r3, #0
 80122a0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80122a2:	2300      	movs	r3, #0
 80122a4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80122a6:	2303      	movs	r3, #3
 80122a8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80122aa:	f107 031c 	add.w	r3, r7, #28
 80122ae:	4619      	mov	r1, r3
 80122b0:	4807      	ldr	r0, [pc, #28]	; (80122d0 <HAL_TIM_Encoder_MspInit+0xf8>)
 80122b2:	f7ef fe75 	bl	8001fa0 <HAL_GPIO_Init>
}
 80122b6:	bf00      	nop
 80122b8:	3730      	adds	r7, #48	; 0x30
 80122ba:	46bd      	mov	sp, r7
 80122bc:	bd80      	pop	{r7, pc}
 80122be:	bf00      	nop
 80122c0:	40000800 	.word	0x40000800
 80122c4:	40023800 	.word	0x40023800
 80122c8:	40020400 	.word	0x40020400
 80122cc:	40010400 	.word	0x40010400
 80122d0:	40020800 	.word	0x40020800

080122d4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80122d4:	b580      	push	{r7, lr}
 80122d6:	b08a      	sub	sp, #40	; 0x28
 80122d8:	af00      	add	r7, sp, #0
 80122da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80122dc:	f107 0314 	add.w	r3, r7, #20
 80122e0:	2200      	movs	r2, #0
 80122e2:	601a      	str	r2, [r3, #0]
 80122e4:	605a      	str	r2, [r3, #4]
 80122e6:	609a      	str	r2, [r3, #8]
 80122e8:	60da      	str	r2, [r3, #12]
 80122ea:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80122ec:	687b      	ldr	r3, [r7, #4]
 80122ee:	681b      	ldr	r3, [r3, #0]
 80122f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80122f4:	d13d      	bne.n	8012372 <HAL_TIM_MspPostInit+0x9e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80122f6:	2300      	movs	r3, #0
 80122f8:	613b      	str	r3, [r7, #16]
 80122fa:	4b31      	ldr	r3, [pc, #196]	; (80123c0 <HAL_TIM_MspPostInit+0xec>)
 80122fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80122fe:	4a30      	ldr	r2, [pc, #192]	; (80123c0 <HAL_TIM_MspPostInit+0xec>)
 8012300:	f043 0301 	orr.w	r3, r3, #1
 8012304:	6313      	str	r3, [r2, #48]	; 0x30
 8012306:	4b2e      	ldr	r3, [pc, #184]	; (80123c0 <HAL_TIM_MspPostInit+0xec>)
 8012308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801230a:	f003 0301 	and.w	r3, r3, #1
 801230e:	613b      	str	r3, [r7, #16]
 8012310:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8012312:	2300      	movs	r3, #0
 8012314:	60fb      	str	r3, [r7, #12]
 8012316:	4b2a      	ldr	r3, [pc, #168]	; (80123c0 <HAL_TIM_MspPostInit+0xec>)
 8012318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801231a:	4a29      	ldr	r2, [pc, #164]	; (80123c0 <HAL_TIM_MspPostInit+0xec>)
 801231c:	f043 0302 	orr.w	r3, r3, #2
 8012320:	6313      	str	r3, [r2, #48]	; 0x30
 8012322:	4b27      	ldr	r3, [pc, #156]	; (80123c0 <HAL_TIM_MspPostInit+0xec>)
 8012324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012326:	f003 0302 	and.w	r3, r3, #2
 801232a:	60fb      	str	r3, [r7, #12]
 801232c:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration    
    PA5     ------> TIM2_CH1
    PB11     ------> TIM2_CH4 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 801232e:	2320      	movs	r3, #32
 8012330:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012332:	2302      	movs	r3, #2
 8012334:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012336:	2300      	movs	r3, #0
 8012338:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801233a:	2300      	movs	r3, #0
 801233c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 801233e:	2301      	movs	r3, #1
 8012340:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8012342:	f107 0314 	add.w	r3, r7, #20
 8012346:	4619      	mov	r1, r3
 8012348:	481e      	ldr	r0, [pc, #120]	; (80123c4 <HAL_TIM_MspPostInit+0xf0>)
 801234a:	f7ef fe29 	bl	8001fa0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 801234e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8012352:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012354:	2302      	movs	r3, #2
 8012356:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012358:	2300      	movs	r3, #0
 801235a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801235c:	2300      	movs	r3, #0
 801235e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8012360:	2301      	movs	r3, #1
 8012362:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8012364:	f107 0314 	add.w	r3, r7, #20
 8012368:	4619      	mov	r1, r3
 801236a:	4817      	ldr	r0, [pc, #92]	; (80123c8 <HAL_TIM_MspPostInit+0xf4>)
 801236c:	f7ef fe18 	bl	8001fa0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8012370:	e022      	b.n	80123b8 <HAL_TIM_MspPostInit+0xe4>
  else if(htim->Instance==TIM3)
 8012372:	687b      	ldr	r3, [r7, #4]
 8012374:	681b      	ldr	r3, [r3, #0]
 8012376:	4a15      	ldr	r2, [pc, #84]	; (80123cc <HAL_TIM_MspPostInit+0xf8>)
 8012378:	4293      	cmp	r3, r2
 801237a:	d11d      	bne.n	80123b8 <HAL_TIM_MspPostInit+0xe4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 801237c:	2300      	movs	r3, #0
 801237e:	60bb      	str	r3, [r7, #8]
 8012380:	4b0f      	ldr	r3, [pc, #60]	; (80123c0 <HAL_TIM_MspPostInit+0xec>)
 8012382:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012384:	4a0e      	ldr	r2, [pc, #56]	; (80123c0 <HAL_TIM_MspPostInit+0xec>)
 8012386:	f043 0302 	orr.w	r3, r3, #2
 801238a:	6313      	str	r3, [r2, #48]	; 0x30
 801238c:	4b0c      	ldr	r3, [pc, #48]	; (80123c0 <HAL_TIM_MspPostInit+0xec>)
 801238e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012390:	f003 0302 	and.w	r3, r3, #2
 8012394:	60bb      	str	r3, [r7, #8]
 8012396:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8012398:	2320      	movs	r3, #32
 801239a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801239c:	2302      	movs	r3, #2
 801239e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80123a0:	2300      	movs	r3, #0
 80123a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80123a4:	2300      	movs	r3, #0
 80123a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80123a8:	2302      	movs	r3, #2
 80123aa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80123ac:	f107 0314 	add.w	r3, r7, #20
 80123b0:	4619      	mov	r1, r3
 80123b2:	4805      	ldr	r0, [pc, #20]	; (80123c8 <HAL_TIM_MspPostInit+0xf4>)
 80123b4:	f7ef fdf4 	bl	8001fa0 <HAL_GPIO_Init>
}
 80123b8:	bf00      	nop
 80123ba:	3728      	adds	r7, #40	; 0x28
 80123bc:	46bd      	mov	sp, r7
 80123be:	bd80      	pop	{r7, pc}
 80123c0:	40023800 	.word	0x40023800
 80123c4:	40020000 	.word	0x40020000
 80123c8:	40020400 	.word	0x40020400
 80123cc:	40000400 	.word	0x40000400

080123d0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80123d0:	b580      	push	{r7, lr}
 80123d2:	b08a      	sub	sp, #40	; 0x28
 80123d4:	af00      	add	r7, sp, #0
 80123d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80123d8:	f107 0314 	add.w	r3, r7, #20
 80123dc:	2200      	movs	r2, #0
 80123de:	601a      	str	r2, [r3, #0]
 80123e0:	605a      	str	r2, [r3, #4]
 80123e2:	609a      	str	r2, [r3, #8]
 80123e4:	60da      	str	r2, [r3, #12]
 80123e6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80123e8:	687b      	ldr	r3, [r7, #4]
 80123ea:	681b      	ldr	r3, [r3, #0]
 80123ec:	4a19      	ldr	r2, [pc, #100]	; (8012454 <HAL_UART_MspInit+0x84>)
 80123ee:	4293      	cmp	r3, r2
 80123f0:	d12c      	bne.n	801244c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80123f2:	2300      	movs	r3, #0
 80123f4:	613b      	str	r3, [r7, #16]
 80123f6:	4b18      	ldr	r3, [pc, #96]	; (8012458 <HAL_UART_MspInit+0x88>)
 80123f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80123fa:	4a17      	ldr	r2, [pc, #92]	; (8012458 <HAL_UART_MspInit+0x88>)
 80123fc:	f043 0310 	orr.w	r3, r3, #16
 8012400:	6453      	str	r3, [r2, #68]	; 0x44
 8012402:	4b15      	ldr	r3, [pc, #84]	; (8012458 <HAL_UART_MspInit+0x88>)
 8012404:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012406:	f003 0310 	and.w	r3, r3, #16
 801240a:	613b      	str	r3, [r7, #16]
 801240c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 801240e:	2300      	movs	r3, #0
 8012410:	60fb      	str	r3, [r7, #12]
 8012412:	4b11      	ldr	r3, [pc, #68]	; (8012458 <HAL_UART_MspInit+0x88>)
 8012414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012416:	4a10      	ldr	r2, [pc, #64]	; (8012458 <HAL_UART_MspInit+0x88>)
 8012418:	f043 0301 	orr.w	r3, r3, #1
 801241c:	6313      	str	r3, [r2, #48]	; 0x30
 801241e:	4b0e      	ldr	r3, [pc, #56]	; (8012458 <HAL_UART_MspInit+0x88>)
 8012420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012422:	f003 0301 	and.w	r3, r3, #1
 8012426:	60fb      	str	r3, [r7, #12]
 8012428:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 801242a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 801242e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012430:	2302      	movs	r3, #2
 8012432:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8012434:	2301      	movs	r3, #1
 8012436:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8012438:	2303      	movs	r3, #3
 801243a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 801243c:	2307      	movs	r3, #7
 801243e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8012440:	f107 0314 	add.w	r3, r7, #20
 8012444:	4619      	mov	r1, r3
 8012446:	4805      	ldr	r0, [pc, #20]	; (801245c <HAL_UART_MspInit+0x8c>)
 8012448:	f7ef fdaa 	bl	8001fa0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 801244c:	bf00      	nop
 801244e:	3728      	adds	r7, #40	; 0x28
 8012450:	46bd      	mov	sp, r7
 8012452:	bd80      	pop	{r7, pc}
 8012454:	40011000 	.word	0x40011000
 8012458:	40023800 	.word	0x40023800
 801245c:	40020000 	.word	0x40020000

08012460 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8012460:	b480      	push	{r7}
 8012462:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8012464:	bf00      	nop
 8012466:	46bd      	mov	sp, r7
 8012468:	f85d 7b04 	ldr.w	r7, [sp], #4
 801246c:	4770      	bx	lr

0801246e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 801246e:	b480      	push	{r7}
 8012470:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8012472:	e7fe      	b.n	8012472 <HardFault_Handler+0x4>

08012474 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8012474:	b480      	push	{r7}
 8012476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8012478:	e7fe      	b.n	8012478 <MemManage_Handler+0x4>

0801247a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 801247a:	b480      	push	{r7}
 801247c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 801247e:	e7fe      	b.n	801247e <BusFault_Handler+0x4>

08012480 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8012480:	b480      	push	{r7}
 8012482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8012484:	e7fe      	b.n	8012484 <UsageFault_Handler+0x4>

08012486 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8012486:	b480      	push	{r7}
 8012488:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 801248a:	bf00      	nop
 801248c:	46bd      	mov	sp, r7
 801248e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012492:	4770      	bx	lr

08012494 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8012494:	b480      	push	{r7}
 8012496:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8012498:	bf00      	nop
 801249a:	46bd      	mov	sp, r7
 801249c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124a0:	4770      	bx	lr

080124a2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80124a2:	b480      	push	{r7}
 80124a4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80124a6:	bf00      	nop
 80124a8:	46bd      	mov	sp, r7
 80124aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124ae:	4770      	bx	lr

080124b0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80124b0:	b580      	push	{r7, lr}
 80124b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80124b4:	f7ee fd92 	bl	8000fdc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80124b8:	bf00      	nop
 80124ba:	bd80      	pop	{r7, pc}

080124bc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80124bc:	b580      	push	{r7, lr}
 80124be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80124c0:	4802      	ldr	r0, [pc, #8]	; (80124cc <TIM6_DAC_IRQHandler+0x10>)
 80124c2:	f7f1 fa7a 	bl	80039ba <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80124c6:	bf00      	nop
 80124c8:	bd80      	pop	{r7, pc}
 80124ca:	bf00      	nop
 80124cc:	20000bb4 	.word	0x20000bb4

080124d0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80124d0:	b580      	push	{r7, lr}
 80124d2:	b086      	sub	sp, #24
 80124d4:	af00      	add	r7, sp, #0
 80124d6:	60f8      	str	r0, [r7, #12]
 80124d8:	60b9      	str	r1, [r7, #8]
 80124da:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80124dc:	2300      	movs	r3, #0
 80124de:	617b      	str	r3, [r7, #20]
 80124e0:	e00a      	b.n	80124f8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80124e2:	f3af 8000 	nop.w
 80124e6:	4601      	mov	r1, r0
 80124e8:	68bb      	ldr	r3, [r7, #8]
 80124ea:	1c5a      	adds	r2, r3, #1
 80124ec:	60ba      	str	r2, [r7, #8]
 80124ee:	b2ca      	uxtb	r2, r1
 80124f0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80124f2:	697b      	ldr	r3, [r7, #20]
 80124f4:	3301      	adds	r3, #1
 80124f6:	617b      	str	r3, [r7, #20]
 80124f8:	697a      	ldr	r2, [r7, #20]
 80124fa:	687b      	ldr	r3, [r7, #4]
 80124fc:	429a      	cmp	r2, r3
 80124fe:	dbf0      	blt.n	80124e2 <_read+0x12>
	}

return len;
 8012500:	687b      	ldr	r3, [r7, #4]
}
 8012502:	4618      	mov	r0, r3
 8012504:	3718      	adds	r7, #24
 8012506:	46bd      	mov	sp, r7
 8012508:	bd80      	pop	{r7, pc}

0801250a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 801250a:	b580      	push	{r7, lr}
 801250c:	b086      	sub	sp, #24
 801250e:	af00      	add	r7, sp, #0
 8012510:	60f8      	str	r0, [r7, #12]
 8012512:	60b9      	str	r1, [r7, #8]
 8012514:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8012516:	2300      	movs	r3, #0
 8012518:	617b      	str	r3, [r7, #20]
 801251a:	e009      	b.n	8012530 <_write+0x26>
	{
		__io_putchar(*ptr++);
 801251c:	68bb      	ldr	r3, [r7, #8]
 801251e:	1c5a      	adds	r2, r3, #1
 8012520:	60ba      	str	r2, [r7, #8]
 8012522:	781b      	ldrb	r3, [r3, #0]
 8012524:	4618      	mov	r0, r3
 8012526:	f7fa fa85 	bl	800ca34 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 801252a:	697b      	ldr	r3, [r7, #20]
 801252c:	3301      	adds	r3, #1
 801252e:	617b      	str	r3, [r7, #20]
 8012530:	697a      	ldr	r2, [r7, #20]
 8012532:	687b      	ldr	r3, [r7, #4]
 8012534:	429a      	cmp	r2, r3
 8012536:	dbf1      	blt.n	801251c <_write+0x12>
	}
	return len;
 8012538:	687b      	ldr	r3, [r7, #4]
}
 801253a:	4618      	mov	r0, r3
 801253c:	3718      	adds	r7, #24
 801253e:	46bd      	mov	sp, r7
 8012540:	bd80      	pop	{r7, pc}

08012542 <_close>:

int _close(int file)
{
 8012542:	b480      	push	{r7}
 8012544:	b083      	sub	sp, #12
 8012546:	af00      	add	r7, sp, #0
 8012548:	6078      	str	r0, [r7, #4]
	return -1;
 801254a:	f04f 33ff 	mov.w	r3, #4294967295
}
 801254e:	4618      	mov	r0, r3
 8012550:	370c      	adds	r7, #12
 8012552:	46bd      	mov	sp, r7
 8012554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012558:	4770      	bx	lr

0801255a <_fstat>:


int _fstat(int file, struct stat *st)
{
 801255a:	b480      	push	{r7}
 801255c:	b083      	sub	sp, #12
 801255e:	af00      	add	r7, sp, #0
 8012560:	6078      	str	r0, [r7, #4]
 8012562:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8012564:	683b      	ldr	r3, [r7, #0]
 8012566:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 801256a:	605a      	str	r2, [r3, #4]
	return 0;
 801256c:	2300      	movs	r3, #0
}
 801256e:	4618      	mov	r0, r3
 8012570:	370c      	adds	r7, #12
 8012572:	46bd      	mov	sp, r7
 8012574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012578:	4770      	bx	lr

0801257a <_isatty>:

int _isatty(int file)
{
 801257a:	b480      	push	{r7}
 801257c:	b083      	sub	sp, #12
 801257e:	af00      	add	r7, sp, #0
 8012580:	6078      	str	r0, [r7, #4]
	return 1;
 8012582:	2301      	movs	r3, #1
}
 8012584:	4618      	mov	r0, r3
 8012586:	370c      	adds	r7, #12
 8012588:	46bd      	mov	sp, r7
 801258a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801258e:	4770      	bx	lr

08012590 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8012590:	b480      	push	{r7}
 8012592:	b085      	sub	sp, #20
 8012594:	af00      	add	r7, sp, #0
 8012596:	60f8      	str	r0, [r7, #12]
 8012598:	60b9      	str	r1, [r7, #8]
 801259a:	607a      	str	r2, [r7, #4]
	return 0;
 801259c:	2300      	movs	r3, #0
}
 801259e:	4618      	mov	r0, r3
 80125a0:	3714      	adds	r7, #20
 80125a2:	46bd      	mov	sp, r7
 80125a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125a8:	4770      	bx	lr
	...

080125ac <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80125ac:	b580      	push	{r7, lr}
 80125ae:	b084      	sub	sp, #16
 80125b0:	af00      	add	r7, sp, #0
 80125b2:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80125b4:	4b11      	ldr	r3, [pc, #68]	; (80125fc <_sbrk+0x50>)
 80125b6:	681b      	ldr	r3, [r3, #0]
 80125b8:	2b00      	cmp	r3, #0
 80125ba:	d102      	bne.n	80125c2 <_sbrk+0x16>
		heap_end = &end;
 80125bc:	4b0f      	ldr	r3, [pc, #60]	; (80125fc <_sbrk+0x50>)
 80125be:	4a10      	ldr	r2, [pc, #64]	; (8012600 <_sbrk+0x54>)
 80125c0:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80125c2:	4b0e      	ldr	r3, [pc, #56]	; (80125fc <_sbrk+0x50>)
 80125c4:	681b      	ldr	r3, [r3, #0]
 80125c6:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80125c8:	4b0c      	ldr	r3, [pc, #48]	; (80125fc <_sbrk+0x50>)
 80125ca:	681a      	ldr	r2, [r3, #0]
 80125cc:	687b      	ldr	r3, [r7, #4]
 80125ce:	4413      	add	r3, r2
 80125d0:	466a      	mov	r2, sp
 80125d2:	4293      	cmp	r3, r2
 80125d4:	d907      	bls.n	80125e6 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80125d6:	f000 f875 	bl	80126c4 <__errno>
 80125da:	4602      	mov	r2, r0
 80125dc:	230c      	movs	r3, #12
 80125de:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80125e0:	f04f 33ff 	mov.w	r3, #4294967295
 80125e4:	e006      	b.n	80125f4 <_sbrk+0x48>
	}

	heap_end += incr;
 80125e6:	4b05      	ldr	r3, [pc, #20]	; (80125fc <_sbrk+0x50>)
 80125e8:	681a      	ldr	r2, [r3, #0]
 80125ea:	687b      	ldr	r3, [r7, #4]
 80125ec:	4413      	add	r3, r2
 80125ee:	4a03      	ldr	r2, [pc, #12]	; (80125fc <_sbrk+0x50>)
 80125f0:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80125f2:	68fb      	ldr	r3, [r7, #12]
}
 80125f4:	4618      	mov	r0, r3
 80125f6:	3710      	adds	r7, #16
 80125f8:	46bd      	mov	sp, r7
 80125fa:	bd80      	pop	{r7, pc}
 80125fc:	20000114 	.word	0x20000114
 8012600:	200015e0 	.word	0x200015e0

08012604 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8012604:	b480      	push	{r7}
 8012606:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8012608:	4b16      	ldr	r3, [pc, #88]	; (8012664 <SystemInit+0x60>)
 801260a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801260e:	4a15      	ldr	r2, [pc, #84]	; (8012664 <SystemInit+0x60>)
 8012610:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8012614:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8012618:	4b13      	ldr	r3, [pc, #76]	; (8012668 <SystemInit+0x64>)
 801261a:	681b      	ldr	r3, [r3, #0]
 801261c:	4a12      	ldr	r2, [pc, #72]	; (8012668 <SystemInit+0x64>)
 801261e:	f043 0301 	orr.w	r3, r3, #1
 8012622:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8012624:	4b10      	ldr	r3, [pc, #64]	; (8012668 <SystemInit+0x64>)
 8012626:	2200      	movs	r2, #0
 8012628:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 801262a:	4b0f      	ldr	r3, [pc, #60]	; (8012668 <SystemInit+0x64>)
 801262c:	681b      	ldr	r3, [r3, #0]
 801262e:	4a0e      	ldr	r2, [pc, #56]	; (8012668 <SystemInit+0x64>)
 8012630:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8012634:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8012638:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 801263a:	4b0b      	ldr	r3, [pc, #44]	; (8012668 <SystemInit+0x64>)
 801263c:	4a0b      	ldr	r2, [pc, #44]	; (801266c <SystemInit+0x68>)
 801263e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8012640:	4b09      	ldr	r3, [pc, #36]	; (8012668 <SystemInit+0x64>)
 8012642:	681b      	ldr	r3, [r3, #0]
 8012644:	4a08      	ldr	r2, [pc, #32]	; (8012668 <SystemInit+0x64>)
 8012646:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 801264a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 801264c:	4b06      	ldr	r3, [pc, #24]	; (8012668 <SystemInit+0x64>)
 801264e:	2200      	movs	r2, #0
 8012650:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8012652:	4b04      	ldr	r3, [pc, #16]	; (8012664 <SystemInit+0x60>)
 8012654:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8012658:	609a      	str	r2, [r3, #8]
#endif
}
 801265a:	bf00      	nop
 801265c:	46bd      	mov	sp, r7
 801265e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012662:	4770      	bx	lr
 8012664:	e000ed00 	.word	0xe000ed00
 8012668:	40023800 	.word	0x40023800
 801266c:	24003010 	.word	0x24003010

08012670 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8012670:	f8df d034 	ldr.w	sp, [pc, #52]	; 80126a8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8012674:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8012676:	e003      	b.n	8012680 <LoopCopyDataInit>

08012678 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8012678:	4b0c      	ldr	r3, [pc, #48]	; (80126ac <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 801267a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 801267c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 801267e:	3104      	adds	r1, #4

08012680 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8012680:	480b      	ldr	r0, [pc, #44]	; (80126b0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8012682:	4b0c      	ldr	r3, [pc, #48]	; (80126b4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8012684:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8012686:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8012688:	d3f6      	bcc.n	8012678 <CopyDataInit>
  ldr  r2, =_sbss
 801268a:	4a0b      	ldr	r2, [pc, #44]	; (80126b8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 801268c:	e002      	b.n	8012694 <LoopFillZerobss>

0801268e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 801268e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8012690:	f842 3b04 	str.w	r3, [r2], #4

08012694 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8012694:	4b09      	ldr	r3, [pc, #36]	; (80126bc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8012696:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8012698:	d3f9      	bcc.n	801268e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 801269a:	f7ff ffb3 	bl	8012604 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 801269e:	f000 f817 	bl	80126d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80126a2:	f7fb fce9 	bl	800e078 <main>
  bx  lr    
 80126a6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80126a8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80126ac:	08013f44 	.word	0x08013f44
  ldr  r0, =_sdata
 80126b0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80126b4:	200000ec 	.word	0x200000ec
  ldr  r2, =_sbss
 80126b8:	200000ec 	.word	0x200000ec
  ldr  r3, = _ebss
 80126bc:	200015dc 	.word	0x200015dc

080126c0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80126c0:	e7fe      	b.n	80126c0 <ADC_IRQHandler>
	...

080126c4 <__errno>:
 80126c4:	4b01      	ldr	r3, [pc, #4]	; (80126cc <__errno+0x8>)
 80126c6:	6818      	ldr	r0, [r3, #0]
 80126c8:	4770      	bx	lr
 80126ca:	bf00      	nop
 80126cc:	20000084 	.word	0x20000084

080126d0 <__libc_init_array>:
 80126d0:	b570      	push	{r4, r5, r6, lr}
 80126d2:	4e0d      	ldr	r6, [pc, #52]	; (8012708 <__libc_init_array+0x38>)
 80126d4:	4c0d      	ldr	r4, [pc, #52]	; (801270c <__libc_init_array+0x3c>)
 80126d6:	1ba4      	subs	r4, r4, r6
 80126d8:	10a4      	asrs	r4, r4, #2
 80126da:	2500      	movs	r5, #0
 80126dc:	42a5      	cmp	r5, r4
 80126de:	d109      	bne.n	80126f4 <__libc_init_array+0x24>
 80126e0:	4e0b      	ldr	r6, [pc, #44]	; (8012710 <__libc_init_array+0x40>)
 80126e2:	4c0c      	ldr	r4, [pc, #48]	; (8012714 <__libc_init_array+0x44>)
 80126e4:	f001 f932 	bl	801394c <_init>
 80126e8:	1ba4      	subs	r4, r4, r6
 80126ea:	10a4      	asrs	r4, r4, #2
 80126ec:	2500      	movs	r5, #0
 80126ee:	42a5      	cmp	r5, r4
 80126f0:	d105      	bne.n	80126fe <__libc_init_array+0x2e>
 80126f2:	bd70      	pop	{r4, r5, r6, pc}
 80126f4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80126f8:	4798      	blx	r3
 80126fa:	3501      	adds	r5, #1
 80126fc:	e7ee      	b.n	80126dc <__libc_init_array+0xc>
 80126fe:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8012702:	4798      	blx	r3
 8012704:	3501      	adds	r5, #1
 8012706:	e7f2      	b.n	80126ee <__libc_init_array+0x1e>
 8012708:	08013f3c 	.word	0x08013f3c
 801270c:	08013f3c 	.word	0x08013f3c
 8012710:	08013f3c 	.word	0x08013f3c
 8012714:	08013f40 	.word	0x08013f40

08012718 <memset>:
 8012718:	4402      	add	r2, r0
 801271a:	4603      	mov	r3, r0
 801271c:	4293      	cmp	r3, r2
 801271e:	d100      	bne.n	8012722 <memset+0xa>
 8012720:	4770      	bx	lr
 8012722:	f803 1b01 	strb.w	r1, [r3], #1
 8012726:	e7f9      	b.n	801271c <memset+0x4>

08012728 <iprintf>:
 8012728:	b40f      	push	{r0, r1, r2, r3}
 801272a:	4b0a      	ldr	r3, [pc, #40]	; (8012754 <iprintf+0x2c>)
 801272c:	b513      	push	{r0, r1, r4, lr}
 801272e:	681c      	ldr	r4, [r3, #0]
 8012730:	b124      	cbz	r4, 801273c <iprintf+0x14>
 8012732:	69a3      	ldr	r3, [r4, #24]
 8012734:	b913      	cbnz	r3, 801273c <iprintf+0x14>
 8012736:	4620      	mov	r0, r4
 8012738:	f000 fad8 	bl	8012cec <__sinit>
 801273c:	ab05      	add	r3, sp, #20
 801273e:	9a04      	ldr	r2, [sp, #16]
 8012740:	68a1      	ldr	r1, [r4, #8]
 8012742:	9301      	str	r3, [sp, #4]
 8012744:	4620      	mov	r0, r4
 8012746:	f000 fc99 	bl	801307c <_vfiprintf_r>
 801274a:	b002      	add	sp, #8
 801274c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012750:	b004      	add	sp, #16
 8012752:	4770      	bx	lr
 8012754:	20000084 	.word	0x20000084

08012758 <_puts_r>:
 8012758:	b570      	push	{r4, r5, r6, lr}
 801275a:	460e      	mov	r6, r1
 801275c:	4605      	mov	r5, r0
 801275e:	b118      	cbz	r0, 8012768 <_puts_r+0x10>
 8012760:	6983      	ldr	r3, [r0, #24]
 8012762:	b90b      	cbnz	r3, 8012768 <_puts_r+0x10>
 8012764:	f000 fac2 	bl	8012cec <__sinit>
 8012768:	69ab      	ldr	r3, [r5, #24]
 801276a:	68ac      	ldr	r4, [r5, #8]
 801276c:	b913      	cbnz	r3, 8012774 <_puts_r+0x1c>
 801276e:	4628      	mov	r0, r5
 8012770:	f000 fabc 	bl	8012cec <__sinit>
 8012774:	4b23      	ldr	r3, [pc, #140]	; (8012804 <_puts_r+0xac>)
 8012776:	429c      	cmp	r4, r3
 8012778:	d117      	bne.n	80127aa <_puts_r+0x52>
 801277a:	686c      	ldr	r4, [r5, #4]
 801277c:	89a3      	ldrh	r3, [r4, #12]
 801277e:	071b      	lsls	r3, r3, #28
 8012780:	d51d      	bpl.n	80127be <_puts_r+0x66>
 8012782:	6923      	ldr	r3, [r4, #16]
 8012784:	b1db      	cbz	r3, 80127be <_puts_r+0x66>
 8012786:	3e01      	subs	r6, #1
 8012788:	68a3      	ldr	r3, [r4, #8]
 801278a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801278e:	3b01      	subs	r3, #1
 8012790:	60a3      	str	r3, [r4, #8]
 8012792:	b9e9      	cbnz	r1, 80127d0 <_puts_r+0x78>
 8012794:	2b00      	cmp	r3, #0
 8012796:	da2e      	bge.n	80127f6 <_puts_r+0x9e>
 8012798:	4622      	mov	r2, r4
 801279a:	210a      	movs	r1, #10
 801279c:	4628      	mov	r0, r5
 801279e:	f000 f8f5 	bl	801298c <__swbuf_r>
 80127a2:	3001      	adds	r0, #1
 80127a4:	d011      	beq.n	80127ca <_puts_r+0x72>
 80127a6:	200a      	movs	r0, #10
 80127a8:	e011      	b.n	80127ce <_puts_r+0x76>
 80127aa:	4b17      	ldr	r3, [pc, #92]	; (8012808 <_puts_r+0xb0>)
 80127ac:	429c      	cmp	r4, r3
 80127ae:	d101      	bne.n	80127b4 <_puts_r+0x5c>
 80127b0:	68ac      	ldr	r4, [r5, #8]
 80127b2:	e7e3      	b.n	801277c <_puts_r+0x24>
 80127b4:	4b15      	ldr	r3, [pc, #84]	; (801280c <_puts_r+0xb4>)
 80127b6:	429c      	cmp	r4, r3
 80127b8:	bf08      	it	eq
 80127ba:	68ec      	ldreq	r4, [r5, #12]
 80127bc:	e7de      	b.n	801277c <_puts_r+0x24>
 80127be:	4621      	mov	r1, r4
 80127c0:	4628      	mov	r0, r5
 80127c2:	f000 f935 	bl	8012a30 <__swsetup_r>
 80127c6:	2800      	cmp	r0, #0
 80127c8:	d0dd      	beq.n	8012786 <_puts_r+0x2e>
 80127ca:	f04f 30ff 	mov.w	r0, #4294967295
 80127ce:	bd70      	pop	{r4, r5, r6, pc}
 80127d0:	2b00      	cmp	r3, #0
 80127d2:	da04      	bge.n	80127de <_puts_r+0x86>
 80127d4:	69a2      	ldr	r2, [r4, #24]
 80127d6:	429a      	cmp	r2, r3
 80127d8:	dc06      	bgt.n	80127e8 <_puts_r+0x90>
 80127da:	290a      	cmp	r1, #10
 80127dc:	d004      	beq.n	80127e8 <_puts_r+0x90>
 80127de:	6823      	ldr	r3, [r4, #0]
 80127e0:	1c5a      	adds	r2, r3, #1
 80127e2:	6022      	str	r2, [r4, #0]
 80127e4:	7019      	strb	r1, [r3, #0]
 80127e6:	e7cf      	b.n	8012788 <_puts_r+0x30>
 80127e8:	4622      	mov	r2, r4
 80127ea:	4628      	mov	r0, r5
 80127ec:	f000 f8ce 	bl	801298c <__swbuf_r>
 80127f0:	3001      	adds	r0, #1
 80127f2:	d1c9      	bne.n	8012788 <_puts_r+0x30>
 80127f4:	e7e9      	b.n	80127ca <_puts_r+0x72>
 80127f6:	6823      	ldr	r3, [r4, #0]
 80127f8:	200a      	movs	r0, #10
 80127fa:	1c5a      	adds	r2, r3, #1
 80127fc:	6022      	str	r2, [r4, #0]
 80127fe:	7018      	strb	r0, [r3, #0]
 8012800:	e7e5      	b.n	80127ce <_puts_r+0x76>
 8012802:	bf00      	nop
 8012804:	08013ebc 	.word	0x08013ebc
 8012808:	08013edc 	.word	0x08013edc
 801280c:	08013e9c 	.word	0x08013e9c

08012810 <puts>:
 8012810:	4b02      	ldr	r3, [pc, #8]	; (801281c <puts+0xc>)
 8012812:	4601      	mov	r1, r0
 8012814:	6818      	ldr	r0, [r3, #0]
 8012816:	f7ff bf9f 	b.w	8012758 <_puts_r>
 801281a:	bf00      	nop
 801281c:	20000084 	.word	0x20000084

08012820 <setbuf>:
 8012820:	2900      	cmp	r1, #0
 8012822:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012826:	bf0c      	ite	eq
 8012828:	2202      	moveq	r2, #2
 801282a:	2200      	movne	r2, #0
 801282c:	f000 b800 	b.w	8012830 <setvbuf>

08012830 <setvbuf>:
 8012830:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8012834:	461d      	mov	r5, r3
 8012836:	4b51      	ldr	r3, [pc, #324]	; (801297c <setvbuf+0x14c>)
 8012838:	681e      	ldr	r6, [r3, #0]
 801283a:	4604      	mov	r4, r0
 801283c:	460f      	mov	r7, r1
 801283e:	4690      	mov	r8, r2
 8012840:	b126      	cbz	r6, 801284c <setvbuf+0x1c>
 8012842:	69b3      	ldr	r3, [r6, #24]
 8012844:	b913      	cbnz	r3, 801284c <setvbuf+0x1c>
 8012846:	4630      	mov	r0, r6
 8012848:	f000 fa50 	bl	8012cec <__sinit>
 801284c:	4b4c      	ldr	r3, [pc, #304]	; (8012980 <setvbuf+0x150>)
 801284e:	429c      	cmp	r4, r3
 8012850:	d152      	bne.n	80128f8 <setvbuf+0xc8>
 8012852:	6874      	ldr	r4, [r6, #4]
 8012854:	f1b8 0f02 	cmp.w	r8, #2
 8012858:	d006      	beq.n	8012868 <setvbuf+0x38>
 801285a:	f1b8 0f01 	cmp.w	r8, #1
 801285e:	f200 8089 	bhi.w	8012974 <setvbuf+0x144>
 8012862:	2d00      	cmp	r5, #0
 8012864:	f2c0 8086 	blt.w	8012974 <setvbuf+0x144>
 8012868:	4621      	mov	r1, r4
 801286a:	4630      	mov	r0, r6
 801286c:	f000 f9d4 	bl	8012c18 <_fflush_r>
 8012870:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012872:	b141      	cbz	r1, 8012886 <setvbuf+0x56>
 8012874:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012878:	4299      	cmp	r1, r3
 801287a:	d002      	beq.n	8012882 <setvbuf+0x52>
 801287c:	4630      	mov	r0, r6
 801287e:	f000 fb2b 	bl	8012ed8 <_free_r>
 8012882:	2300      	movs	r3, #0
 8012884:	6363      	str	r3, [r4, #52]	; 0x34
 8012886:	2300      	movs	r3, #0
 8012888:	61a3      	str	r3, [r4, #24]
 801288a:	6063      	str	r3, [r4, #4]
 801288c:	89a3      	ldrh	r3, [r4, #12]
 801288e:	061b      	lsls	r3, r3, #24
 8012890:	d503      	bpl.n	801289a <setvbuf+0x6a>
 8012892:	6921      	ldr	r1, [r4, #16]
 8012894:	4630      	mov	r0, r6
 8012896:	f000 fb1f 	bl	8012ed8 <_free_r>
 801289a:	89a3      	ldrh	r3, [r4, #12]
 801289c:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 80128a0:	f023 0303 	bic.w	r3, r3, #3
 80128a4:	f1b8 0f02 	cmp.w	r8, #2
 80128a8:	81a3      	strh	r3, [r4, #12]
 80128aa:	d05d      	beq.n	8012968 <setvbuf+0x138>
 80128ac:	ab01      	add	r3, sp, #4
 80128ae:	466a      	mov	r2, sp
 80128b0:	4621      	mov	r1, r4
 80128b2:	4630      	mov	r0, r6
 80128b4:	f000 faa4 	bl	8012e00 <__swhatbuf_r>
 80128b8:	89a3      	ldrh	r3, [r4, #12]
 80128ba:	4318      	orrs	r0, r3
 80128bc:	81a0      	strh	r0, [r4, #12]
 80128be:	bb2d      	cbnz	r5, 801290c <setvbuf+0xdc>
 80128c0:	9d00      	ldr	r5, [sp, #0]
 80128c2:	4628      	mov	r0, r5
 80128c4:	f000 fb00 	bl	8012ec8 <malloc>
 80128c8:	4607      	mov	r7, r0
 80128ca:	2800      	cmp	r0, #0
 80128cc:	d14e      	bne.n	801296c <setvbuf+0x13c>
 80128ce:	f8dd 9000 	ldr.w	r9, [sp]
 80128d2:	45a9      	cmp	r9, r5
 80128d4:	d13c      	bne.n	8012950 <setvbuf+0x120>
 80128d6:	f04f 30ff 	mov.w	r0, #4294967295
 80128da:	89a3      	ldrh	r3, [r4, #12]
 80128dc:	f043 0302 	orr.w	r3, r3, #2
 80128e0:	81a3      	strh	r3, [r4, #12]
 80128e2:	2300      	movs	r3, #0
 80128e4:	60a3      	str	r3, [r4, #8]
 80128e6:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80128ea:	6023      	str	r3, [r4, #0]
 80128ec:	6123      	str	r3, [r4, #16]
 80128ee:	2301      	movs	r3, #1
 80128f0:	6163      	str	r3, [r4, #20]
 80128f2:	b003      	add	sp, #12
 80128f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80128f8:	4b22      	ldr	r3, [pc, #136]	; (8012984 <setvbuf+0x154>)
 80128fa:	429c      	cmp	r4, r3
 80128fc:	d101      	bne.n	8012902 <setvbuf+0xd2>
 80128fe:	68b4      	ldr	r4, [r6, #8]
 8012900:	e7a8      	b.n	8012854 <setvbuf+0x24>
 8012902:	4b21      	ldr	r3, [pc, #132]	; (8012988 <setvbuf+0x158>)
 8012904:	429c      	cmp	r4, r3
 8012906:	bf08      	it	eq
 8012908:	68f4      	ldreq	r4, [r6, #12]
 801290a:	e7a3      	b.n	8012854 <setvbuf+0x24>
 801290c:	2f00      	cmp	r7, #0
 801290e:	d0d8      	beq.n	80128c2 <setvbuf+0x92>
 8012910:	69b3      	ldr	r3, [r6, #24]
 8012912:	b913      	cbnz	r3, 801291a <setvbuf+0xea>
 8012914:	4630      	mov	r0, r6
 8012916:	f000 f9e9 	bl	8012cec <__sinit>
 801291a:	f1b8 0f01 	cmp.w	r8, #1
 801291e:	bf08      	it	eq
 8012920:	89a3      	ldrheq	r3, [r4, #12]
 8012922:	6027      	str	r7, [r4, #0]
 8012924:	bf04      	itt	eq
 8012926:	f043 0301 	orreq.w	r3, r3, #1
 801292a:	81a3      	strheq	r3, [r4, #12]
 801292c:	89a3      	ldrh	r3, [r4, #12]
 801292e:	f013 0008 	ands.w	r0, r3, #8
 8012932:	e9c4 7504 	strd	r7, r5, [r4, #16]
 8012936:	d01b      	beq.n	8012970 <setvbuf+0x140>
 8012938:	f013 0001 	ands.w	r0, r3, #1
 801293c:	bf18      	it	ne
 801293e:	426d      	negne	r5, r5
 8012940:	f04f 0300 	mov.w	r3, #0
 8012944:	bf1d      	ittte	ne
 8012946:	60a3      	strne	r3, [r4, #8]
 8012948:	61a5      	strne	r5, [r4, #24]
 801294a:	4618      	movne	r0, r3
 801294c:	60a5      	streq	r5, [r4, #8]
 801294e:	e7d0      	b.n	80128f2 <setvbuf+0xc2>
 8012950:	4648      	mov	r0, r9
 8012952:	f000 fab9 	bl	8012ec8 <malloc>
 8012956:	4607      	mov	r7, r0
 8012958:	2800      	cmp	r0, #0
 801295a:	d0bc      	beq.n	80128d6 <setvbuf+0xa6>
 801295c:	89a3      	ldrh	r3, [r4, #12]
 801295e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012962:	81a3      	strh	r3, [r4, #12]
 8012964:	464d      	mov	r5, r9
 8012966:	e7d3      	b.n	8012910 <setvbuf+0xe0>
 8012968:	2000      	movs	r0, #0
 801296a:	e7b6      	b.n	80128da <setvbuf+0xaa>
 801296c:	46a9      	mov	r9, r5
 801296e:	e7f5      	b.n	801295c <setvbuf+0x12c>
 8012970:	60a0      	str	r0, [r4, #8]
 8012972:	e7be      	b.n	80128f2 <setvbuf+0xc2>
 8012974:	f04f 30ff 	mov.w	r0, #4294967295
 8012978:	e7bb      	b.n	80128f2 <setvbuf+0xc2>
 801297a:	bf00      	nop
 801297c:	20000084 	.word	0x20000084
 8012980:	08013ebc 	.word	0x08013ebc
 8012984:	08013edc 	.word	0x08013edc
 8012988:	08013e9c 	.word	0x08013e9c

0801298c <__swbuf_r>:
 801298c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801298e:	460e      	mov	r6, r1
 8012990:	4614      	mov	r4, r2
 8012992:	4605      	mov	r5, r0
 8012994:	b118      	cbz	r0, 801299e <__swbuf_r+0x12>
 8012996:	6983      	ldr	r3, [r0, #24]
 8012998:	b90b      	cbnz	r3, 801299e <__swbuf_r+0x12>
 801299a:	f000 f9a7 	bl	8012cec <__sinit>
 801299e:	4b21      	ldr	r3, [pc, #132]	; (8012a24 <__swbuf_r+0x98>)
 80129a0:	429c      	cmp	r4, r3
 80129a2:	d12a      	bne.n	80129fa <__swbuf_r+0x6e>
 80129a4:	686c      	ldr	r4, [r5, #4]
 80129a6:	69a3      	ldr	r3, [r4, #24]
 80129a8:	60a3      	str	r3, [r4, #8]
 80129aa:	89a3      	ldrh	r3, [r4, #12]
 80129ac:	071a      	lsls	r2, r3, #28
 80129ae:	d52e      	bpl.n	8012a0e <__swbuf_r+0x82>
 80129b0:	6923      	ldr	r3, [r4, #16]
 80129b2:	b363      	cbz	r3, 8012a0e <__swbuf_r+0x82>
 80129b4:	6923      	ldr	r3, [r4, #16]
 80129b6:	6820      	ldr	r0, [r4, #0]
 80129b8:	1ac0      	subs	r0, r0, r3
 80129ba:	6963      	ldr	r3, [r4, #20]
 80129bc:	b2f6      	uxtb	r6, r6
 80129be:	4283      	cmp	r3, r0
 80129c0:	4637      	mov	r7, r6
 80129c2:	dc04      	bgt.n	80129ce <__swbuf_r+0x42>
 80129c4:	4621      	mov	r1, r4
 80129c6:	4628      	mov	r0, r5
 80129c8:	f000 f926 	bl	8012c18 <_fflush_r>
 80129cc:	bb28      	cbnz	r0, 8012a1a <__swbuf_r+0x8e>
 80129ce:	68a3      	ldr	r3, [r4, #8]
 80129d0:	3b01      	subs	r3, #1
 80129d2:	60a3      	str	r3, [r4, #8]
 80129d4:	6823      	ldr	r3, [r4, #0]
 80129d6:	1c5a      	adds	r2, r3, #1
 80129d8:	6022      	str	r2, [r4, #0]
 80129da:	701e      	strb	r6, [r3, #0]
 80129dc:	6963      	ldr	r3, [r4, #20]
 80129de:	3001      	adds	r0, #1
 80129e0:	4283      	cmp	r3, r0
 80129e2:	d004      	beq.n	80129ee <__swbuf_r+0x62>
 80129e4:	89a3      	ldrh	r3, [r4, #12]
 80129e6:	07db      	lsls	r3, r3, #31
 80129e8:	d519      	bpl.n	8012a1e <__swbuf_r+0x92>
 80129ea:	2e0a      	cmp	r6, #10
 80129ec:	d117      	bne.n	8012a1e <__swbuf_r+0x92>
 80129ee:	4621      	mov	r1, r4
 80129f0:	4628      	mov	r0, r5
 80129f2:	f000 f911 	bl	8012c18 <_fflush_r>
 80129f6:	b190      	cbz	r0, 8012a1e <__swbuf_r+0x92>
 80129f8:	e00f      	b.n	8012a1a <__swbuf_r+0x8e>
 80129fa:	4b0b      	ldr	r3, [pc, #44]	; (8012a28 <__swbuf_r+0x9c>)
 80129fc:	429c      	cmp	r4, r3
 80129fe:	d101      	bne.n	8012a04 <__swbuf_r+0x78>
 8012a00:	68ac      	ldr	r4, [r5, #8]
 8012a02:	e7d0      	b.n	80129a6 <__swbuf_r+0x1a>
 8012a04:	4b09      	ldr	r3, [pc, #36]	; (8012a2c <__swbuf_r+0xa0>)
 8012a06:	429c      	cmp	r4, r3
 8012a08:	bf08      	it	eq
 8012a0a:	68ec      	ldreq	r4, [r5, #12]
 8012a0c:	e7cb      	b.n	80129a6 <__swbuf_r+0x1a>
 8012a0e:	4621      	mov	r1, r4
 8012a10:	4628      	mov	r0, r5
 8012a12:	f000 f80d 	bl	8012a30 <__swsetup_r>
 8012a16:	2800      	cmp	r0, #0
 8012a18:	d0cc      	beq.n	80129b4 <__swbuf_r+0x28>
 8012a1a:	f04f 37ff 	mov.w	r7, #4294967295
 8012a1e:	4638      	mov	r0, r7
 8012a20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012a22:	bf00      	nop
 8012a24:	08013ebc 	.word	0x08013ebc
 8012a28:	08013edc 	.word	0x08013edc
 8012a2c:	08013e9c 	.word	0x08013e9c

08012a30 <__swsetup_r>:
 8012a30:	4b32      	ldr	r3, [pc, #200]	; (8012afc <__swsetup_r+0xcc>)
 8012a32:	b570      	push	{r4, r5, r6, lr}
 8012a34:	681d      	ldr	r5, [r3, #0]
 8012a36:	4606      	mov	r6, r0
 8012a38:	460c      	mov	r4, r1
 8012a3a:	b125      	cbz	r5, 8012a46 <__swsetup_r+0x16>
 8012a3c:	69ab      	ldr	r3, [r5, #24]
 8012a3e:	b913      	cbnz	r3, 8012a46 <__swsetup_r+0x16>
 8012a40:	4628      	mov	r0, r5
 8012a42:	f000 f953 	bl	8012cec <__sinit>
 8012a46:	4b2e      	ldr	r3, [pc, #184]	; (8012b00 <__swsetup_r+0xd0>)
 8012a48:	429c      	cmp	r4, r3
 8012a4a:	d10f      	bne.n	8012a6c <__swsetup_r+0x3c>
 8012a4c:	686c      	ldr	r4, [r5, #4]
 8012a4e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012a52:	b29a      	uxth	r2, r3
 8012a54:	0715      	lsls	r5, r2, #28
 8012a56:	d42c      	bmi.n	8012ab2 <__swsetup_r+0x82>
 8012a58:	06d0      	lsls	r0, r2, #27
 8012a5a:	d411      	bmi.n	8012a80 <__swsetup_r+0x50>
 8012a5c:	2209      	movs	r2, #9
 8012a5e:	6032      	str	r2, [r6, #0]
 8012a60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012a64:	81a3      	strh	r3, [r4, #12]
 8012a66:	f04f 30ff 	mov.w	r0, #4294967295
 8012a6a:	e03e      	b.n	8012aea <__swsetup_r+0xba>
 8012a6c:	4b25      	ldr	r3, [pc, #148]	; (8012b04 <__swsetup_r+0xd4>)
 8012a6e:	429c      	cmp	r4, r3
 8012a70:	d101      	bne.n	8012a76 <__swsetup_r+0x46>
 8012a72:	68ac      	ldr	r4, [r5, #8]
 8012a74:	e7eb      	b.n	8012a4e <__swsetup_r+0x1e>
 8012a76:	4b24      	ldr	r3, [pc, #144]	; (8012b08 <__swsetup_r+0xd8>)
 8012a78:	429c      	cmp	r4, r3
 8012a7a:	bf08      	it	eq
 8012a7c:	68ec      	ldreq	r4, [r5, #12]
 8012a7e:	e7e6      	b.n	8012a4e <__swsetup_r+0x1e>
 8012a80:	0751      	lsls	r1, r2, #29
 8012a82:	d512      	bpl.n	8012aaa <__swsetup_r+0x7a>
 8012a84:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012a86:	b141      	cbz	r1, 8012a9a <__swsetup_r+0x6a>
 8012a88:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012a8c:	4299      	cmp	r1, r3
 8012a8e:	d002      	beq.n	8012a96 <__swsetup_r+0x66>
 8012a90:	4630      	mov	r0, r6
 8012a92:	f000 fa21 	bl	8012ed8 <_free_r>
 8012a96:	2300      	movs	r3, #0
 8012a98:	6363      	str	r3, [r4, #52]	; 0x34
 8012a9a:	89a3      	ldrh	r3, [r4, #12]
 8012a9c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8012aa0:	81a3      	strh	r3, [r4, #12]
 8012aa2:	2300      	movs	r3, #0
 8012aa4:	6063      	str	r3, [r4, #4]
 8012aa6:	6923      	ldr	r3, [r4, #16]
 8012aa8:	6023      	str	r3, [r4, #0]
 8012aaa:	89a3      	ldrh	r3, [r4, #12]
 8012aac:	f043 0308 	orr.w	r3, r3, #8
 8012ab0:	81a3      	strh	r3, [r4, #12]
 8012ab2:	6923      	ldr	r3, [r4, #16]
 8012ab4:	b94b      	cbnz	r3, 8012aca <__swsetup_r+0x9a>
 8012ab6:	89a3      	ldrh	r3, [r4, #12]
 8012ab8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8012abc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012ac0:	d003      	beq.n	8012aca <__swsetup_r+0x9a>
 8012ac2:	4621      	mov	r1, r4
 8012ac4:	4630      	mov	r0, r6
 8012ac6:	f000 f9bf 	bl	8012e48 <__smakebuf_r>
 8012aca:	89a2      	ldrh	r2, [r4, #12]
 8012acc:	f012 0301 	ands.w	r3, r2, #1
 8012ad0:	d00c      	beq.n	8012aec <__swsetup_r+0xbc>
 8012ad2:	2300      	movs	r3, #0
 8012ad4:	60a3      	str	r3, [r4, #8]
 8012ad6:	6963      	ldr	r3, [r4, #20]
 8012ad8:	425b      	negs	r3, r3
 8012ada:	61a3      	str	r3, [r4, #24]
 8012adc:	6923      	ldr	r3, [r4, #16]
 8012ade:	b953      	cbnz	r3, 8012af6 <__swsetup_r+0xc6>
 8012ae0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012ae4:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8012ae8:	d1ba      	bne.n	8012a60 <__swsetup_r+0x30>
 8012aea:	bd70      	pop	{r4, r5, r6, pc}
 8012aec:	0792      	lsls	r2, r2, #30
 8012aee:	bf58      	it	pl
 8012af0:	6963      	ldrpl	r3, [r4, #20]
 8012af2:	60a3      	str	r3, [r4, #8]
 8012af4:	e7f2      	b.n	8012adc <__swsetup_r+0xac>
 8012af6:	2000      	movs	r0, #0
 8012af8:	e7f7      	b.n	8012aea <__swsetup_r+0xba>
 8012afa:	bf00      	nop
 8012afc:	20000084 	.word	0x20000084
 8012b00:	08013ebc 	.word	0x08013ebc
 8012b04:	08013edc 	.word	0x08013edc
 8012b08:	08013e9c 	.word	0x08013e9c

08012b0c <__sflush_r>:
 8012b0c:	898a      	ldrh	r2, [r1, #12]
 8012b0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012b12:	4605      	mov	r5, r0
 8012b14:	0710      	lsls	r0, r2, #28
 8012b16:	460c      	mov	r4, r1
 8012b18:	d458      	bmi.n	8012bcc <__sflush_r+0xc0>
 8012b1a:	684b      	ldr	r3, [r1, #4]
 8012b1c:	2b00      	cmp	r3, #0
 8012b1e:	dc05      	bgt.n	8012b2c <__sflush_r+0x20>
 8012b20:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8012b22:	2b00      	cmp	r3, #0
 8012b24:	dc02      	bgt.n	8012b2c <__sflush_r+0x20>
 8012b26:	2000      	movs	r0, #0
 8012b28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012b2c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8012b2e:	2e00      	cmp	r6, #0
 8012b30:	d0f9      	beq.n	8012b26 <__sflush_r+0x1a>
 8012b32:	2300      	movs	r3, #0
 8012b34:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8012b38:	682f      	ldr	r7, [r5, #0]
 8012b3a:	6a21      	ldr	r1, [r4, #32]
 8012b3c:	602b      	str	r3, [r5, #0]
 8012b3e:	d032      	beq.n	8012ba6 <__sflush_r+0x9a>
 8012b40:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8012b42:	89a3      	ldrh	r3, [r4, #12]
 8012b44:	075a      	lsls	r2, r3, #29
 8012b46:	d505      	bpl.n	8012b54 <__sflush_r+0x48>
 8012b48:	6863      	ldr	r3, [r4, #4]
 8012b4a:	1ac0      	subs	r0, r0, r3
 8012b4c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8012b4e:	b10b      	cbz	r3, 8012b54 <__sflush_r+0x48>
 8012b50:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8012b52:	1ac0      	subs	r0, r0, r3
 8012b54:	2300      	movs	r3, #0
 8012b56:	4602      	mov	r2, r0
 8012b58:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8012b5a:	6a21      	ldr	r1, [r4, #32]
 8012b5c:	4628      	mov	r0, r5
 8012b5e:	47b0      	blx	r6
 8012b60:	1c43      	adds	r3, r0, #1
 8012b62:	89a3      	ldrh	r3, [r4, #12]
 8012b64:	d106      	bne.n	8012b74 <__sflush_r+0x68>
 8012b66:	6829      	ldr	r1, [r5, #0]
 8012b68:	291d      	cmp	r1, #29
 8012b6a:	d848      	bhi.n	8012bfe <__sflush_r+0xf2>
 8012b6c:	4a29      	ldr	r2, [pc, #164]	; (8012c14 <__sflush_r+0x108>)
 8012b6e:	40ca      	lsrs	r2, r1
 8012b70:	07d6      	lsls	r6, r2, #31
 8012b72:	d544      	bpl.n	8012bfe <__sflush_r+0xf2>
 8012b74:	2200      	movs	r2, #0
 8012b76:	6062      	str	r2, [r4, #4]
 8012b78:	04d9      	lsls	r1, r3, #19
 8012b7a:	6922      	ldr	r2, [r4, #16]
 8012b7c:	6022      	str	r2, [r4, #0]
 8012b7e:	d504      	bpl.n	8012b8a <__sflush_r+0x7e>
 8012b80:	1c42      	adds	r2, r0, #1
 8012b82:	d101      	bne.n	8012b88 <__sflush_r+0x7c>
 8012b84:	682b      	ldr	r3, [r5, #0]
 8012b86:	b903      	cbnz	r3, 8012b8a <__sflush_r+0x7e>
 8012b88:	6560      	str	r0, [r4, #84]	; 0x54
 8012b8a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012b8c:	602f      	str	r7, [r5, #0]
 8012b8e:	2900      	cmp	r1, #0
 8012b90:	d0c9      	beq.n	8012b26 <__sflush_r+0x1a>
 8012b92:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012b96:	4299      	cmp	r1, r3
 8012b98:	d002      	beq.n	8012ba0 <__sflush_r+0x94>
 8012b9a:	4628      	mov	r0, r5
 8012b9c:	f000 f99c 	bl	8012ed8 <_free_r>
 8012ba0:	2000      	movs	r0, #0
 8012ba2:	6360      	str	r0, [r4, #52]	; 0x34
 8012ba4:	e7c0      	b.n	8012b28 <__sflush_r+0x1c>
 8012ba6:	2301      	movs	r3, #1
 8012ba8:	4628      	mov	r0, r5
 8012baa:	47b0      	blx	r6
 8012bac:	1c41      	adds	r1, r0, #1
 8012bae:	d1c8      	bne.n	8012b42 <__sflush_r+0x36>
 8012bb0:	682b      	ldr	r3, [r5, #0]
 8012bb2:	2b00      	cmp	r3, #0
 8012bb4:	d0c5      	beq.n	8012b42 <__sflush_r+0x36>
 8012bb6:	2b1d      	cmp	r3, #29
 8012bb8:	d001      	beq.n	8012bbe <__sflush_r+0xb2>
 8012bba:	2b16      	cmp	r3, #22
 8012bbc:	d101      	bne.n	8012bc2 <__sflush_r+0xb6>
 8012bbe:	602f      	str	r7, [r5, #0]
 8012bc0:	e7b1      	b.n	8012b26 <__sflush_r+0x1a>
 8012bc2:	89a3      	ldrh	r3, [r4, #12]
 8012bc4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012bc8:	81a3      	strh	r3, [r4, #12]
 8012bca:	e7ad      	b.n	8012b28 <__sflush_r+0x1c>
 8012bcc:	690f      	ldr	r7, [r1, #16]
 8012bce:	2f00      	cmp	r7, #0
 8012bd0:	d0a9      	beq.n	8012b26 <__sflush_r+0x1a>
 8012bd2:	0793      	lsls	r3, r2, #30
 8012bd4:	680e      	ldr	r6, [r1, #0]
 8012bd6:	bf08      	it	eq
 8012bd8:	694b      	ldreq	r3, [r1, #20]
 8012bda:	600f      	str	r7, [r1, #0]
 8012bdc:	bf18      	it	ne
 8012bde:	2300      	movne	r3, #0
 8012be0:	eba6 0807 	sub.w	r8, r6, r7
 8012be4:	608b      	str	r3, [r1, #8]
 8012be6:	f1b8 0f00 	cmp.w	r8, #0
 8012bea:	dd9c      	ble.n	8012b26 <__sflush_r+0x1a>
 8012bec:	4643      	mov	r3, r8
 8012bee:	463a      	mov	r2, r7
 8012bf0:	6a21      	ldr	r1, [r4, #32]
 8012bf2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8012bf4:	4628      	mov	r0, r5
 8012bf6:	47b0      	blx	r6
 8012bf8:	2800      	cmp	r0, #0
 8012bfa:	dc06      	bgt.n	8012c0a <__sflush_r+0xfe>
 8012bfc:	89a3      	ldrh	r3, [r4, #12]
 8012bfe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012c02:	81a3      	strh	r3, [r4, #12]
 8012c04:	f04f 30ff 	mov.w	r0, #4294967295
 8012c08:	e78e      	b.n	8012b28 <__sflush_r+0x1c>
 8012c0a:	4407      	add	r7, r0
 8012c0c:	eba8 0800 	sub.w	r8, r8, r0
 8012c10:	e7e9      	b.n	8012be6 <__sflush_r+0xda>
 8012c12:	bf00      	nop
 8012c14:	20400001 	.word	0x20400001

08012c18 <_fflush_r>:
 8012c18:	b538      	push	{r3, r4, r5, lr}
 8012c1a:	690b      	ldr	r3, [r1, #16]
 8012c1c:	4605      	mov	r5, r0
 8012c1e:	460c      	mov	r4, r1
 8012c20:	b1db      	cbz	r3, 8012c5a <_fflush_r+0x42>
 8012c22:	b118      	cbz	r0, 8012c2c <_fflush_r+0x14>
 8012c24:	6983      	ldr	r3, [r0, #24]
 8012c26:	b90b      	cbnz	r3, 8012c2c <_fflush_r+0x14>
 8012c28:	f000 f860 	bl	8012cec <__sinit>
 8012c2c:	4b0c      	ldr	r3, [pc, #48]	; (8012c60 <_fflush_r+0x48>)
 8012c2e:	429c      	cmp	r4, r3
 8012c30:	d109      	bne.n	8012c46 <_fflush_r+0x2e>
 8012c32:	686c      	ldr	r4, [r5, #4]
 8012c34:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012c38:	b17b      	cbz	r3, 8012c5a <_fflush_r+0x42>
 8012c3a:	4621      	mov	r1, r4
 8012c3c:	4628      	mov	r0, r5
 8012c3e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012c42:	f7ff bf63 	b.w	8012b0c <__sflush_r>
 8012c46:	4b07      	ldr	r3, [pc, #28]	; (8012c64 <_fflush_r+0x4c>)
 8012c48:	429c      	cmp	r4, r3
 8012c4a:	d101      	bne.n	8012c50 <_fflush_r+0x38>
 8012c4c:	68ac      	ldr	r4, [r5, #8]
 8012c4e:	e7f1      	b.n	8012c34 <_fflush_r+0x1c>
 8012c50:	4b05      	ldr	r3, [pc, #20]	; (8012c68 <_fflush_r+0x50>)
 8012c52:	429c      	cmp	r4, r3
 8012c54:	bf08      	it	eq
 8012c56:	68ec      	ldreq	r4, [r5, #12]
 8012c58:	e7ec      	b.n	8012c34 <_fflush_r+0x1c>
 8012c5a:	2000      	movs	r0, #0
 8012c5c:	bd38      	pop	{r3, r4, r5, pc}
 8012c5e:	bf00      	nop
 8012c60:	08013ebc 	.word	0x08013ebc
 8012c64:	08013edc 	.word	0x08013edc
 8012c68:	08013e9c 	.word	0x08013e9c

08012c6c <std>:
 8012c6c:	2300      	movs	r3, #0
 8012c6e:	b510      	push	{r4, lr}
 8012c70:	4604      	mov	r4, r0
 8012c72:	e9c0 3300 	strd	r3, r3, [r0]
 8012c76:	6083      	str	r3, [r0, #8]
 8012c78:	8181      	strh	r1, [r0, #12]
 8012c7a:	6643      	str	r3, [r0, #100]	; 0x64
 8012c7c:	81c2      	strh	r2, [r0, #14]
 8012c7e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8012c82:	6183      	str	r3, [r0, #24]
 8012c84:	4619      	mov	r1, r3
 8012c86:	2208      	movs	r2, #8
 8012c88:	305c      	adds	r0, #92	; 0x5c
 8012c8a:	f7ff fd45 	bl	8012718 <memset>
 8012c8e:	4b05      	ldr	r3, [pc, #20]	; (8012ca4 <std+0x38>)
 8012c90:	6263      	str	r3, [r4, #36]	; 0x24
 8012c92:	4b05      	ldr	r3, [pc, #20]	; (8012ca8 <std+0x3c>)
 8012c94:	62a3      	str	r3, [r4, #40]	; 0x28
 8012c96:	4b05      	ldr	r3, [pc, #20]	; (8012cac <std+0x40>)
 8012c98:	62e3      	str	r3, [r4, #44]	; 0x2c
 8012c9a:	4b05      	ldr	r3, [pc, #20]	; (8012cb0 <std+0x44>)
 8012c9c:	6224      	str	r4, [r4, #32]
 8012c9e:	6323      	str	r3, [r4, #48]	; 0x30
 8012ca0:	bd10      	pop	{r4, pc}
 8012ca2:	bf00      	nop
 8012ca4:	080135d9 	.word	0x080135d9
 8012ca8:	080135fb 	.word	0x080135fb
 8012cac:	08013633 	.word	0x08013633
 8012cb0:	08013657 	.word	0x08013657

08012cb4 <_cleanup_r>:
 8012cb4:	4901      	ldr	r1, [pc, #4]	; (8012cbc <_cleanup_r+0x8>)
 8012cb6:	f000 b885 	b.w	8012dc4 <_fwalk_reent>
 8012cba:	bf00      	nop
 8012cbc:	08012c19 	.word	0x08012c19

08012cc0 <__sfmoreglue>:
 8012cc0:	b570      	push	{r4, r5, r6, lr}
 8012cc2:	1e4a      	subs	r2, r1, #1
 8012cc4:	2568      	movs	r5, #104	; 0x68
 8012cc6:	4355      	muls	r5, r2
 8012cc8:	460e      	mov	r6, r1
 8012cca:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8012cce:	f000 f951 	bl	8012f74 <_malloc_r>
 8012cd2:	4604      	mov	r4, r0
 8012cd4:	b140      	cbz	r0, 8012ce8 <__sfmoreglue+0x28>
 8012cd6:	2100      	movs	r1, #0
 8012cd8:	e9c0 1600 	strd	r1, r6, [r0]
 8012cdc:	300c      	adds	r0, #12
 8012cde:	60a0      	str	r0, [r4, #8]
 8012ce0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8012ce4:	f7ff fd18 	bl	8012718 <memset>
 8012ce8:	4620      	mov	r0, r4
 8012cea:	bd70      	pop	{r4, r5, r6, pc}

08012cec <__sinit>:
 8012cec:	6983      	ldr	r3, [r0, #24]
 8012cee:	b510      	push	{r4, lr}
 8012cf0:	4604      	mov	r4, r0
 8012cf2:	bb33      	cbnz	r3, 8012d42 <__sinit+0x56>
 8012cf4:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8012cf8:	6503      	str	r3, [r0, #80]	; 0x50
 8012cfa:	4b12      	ldr	r3, [pc, #72]	; (8012d44 <__sinit+0x58>)
 8012cfc:	4a12      	ldr	r2, [pc, #72]	; (8012d48 <__sinit+0x5c>)
 8012cfe:	681b      	ldr	r3, [r3, #0]
 8012d00:	6282      	str	r2, [r0, #40]	; 0x28
 8012d02:	4298      	cmp	r0, r3
 8012d04:	bf04      	itt	eq
 8012d06:	2301      	moveq	r3, #1
 8012d08:	6183      	streq	r3, [r0, #24]
 8012d0a:	f000 f81f 	bl	8012d4c <__sfp>
 8012d0e:	6060      	str	r0, [r4, #4]
 8012d10:	4620      	mov	r0, r4
 8012d12:	f000 f81b 	bl	8012d4c <__sfp>
 8012d16:	60a0      	str	r0, [r4, #8]
 8012d18:	4620      	mov	r0, r4
 8012d1a:	f000 f817 	bl	8012d4c <__sfp>
 8012d1e:	2200      	movs	r2, #0
 8012d20:	60e0      	str	r0, [r4, #12]
 8012d22:	2104      	movs	r1, #4
 8012d24:	6860      	ldr	r0, [r4, #4]
 8012d26:	f7ff ffa1 	bl	8012c6c <std>
 8012d2a:	2201      	movs	r2, #1
 8012d2c:	2109      	movs	r1, #9
 8012d2e:	68a0      	ldr	r0, [r4, #8]
 8012d30:	f7ff ff9c 	bl	8012c6c <std>
 8012d34:	2202      	movs	r2, #2
 8012d36:	2112      	movs	r1, #18
 8012d38:	68e0      	ldr	r0, [r4, #12]
 8012d3a:	f7ff ff97 	bl	8012c6c <std>
 8012d3e:	2301      	movs	r3, #1
 8012d40:	61a3      	str	r3, [r4, #24]
 8012d42:	bd10      	pop	{r4, pc}
 8012d44:	08013e98 	.word	0x08013e98
 8012d48:	08012cb5 	.word	0x08012cb5

08012d4c <__sfp>:
 8012d4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012d4e:	4b1b      	ldr	r3, [pc, #108]	; (8012dbc <__sfp+0x70>)
 8012d50:	681e      	ldr	r6, [r3, #0]
 8012d52:	69b3      	ldr	r3, [r6, #24]
 8012d54:	4607      	mov	r7, r0
 8012d56:	b913      	cbnz	r3, 8012d5e <__sfp+0x12>
 8012d58:	4630      	mov	r0, r6
 8012d5a:	f7ff ffc7 	bl	8012cec <__sinit>
 8012d5e:	3648      	adds	r6, #72	; 0x48
 8012d60:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8012d64:	3b01      	subs	r3, #1
 8012d66:	d503      	bpl.n	8012d70 <__sfp+0x24>
 8012d68:	6833      	ldr	r3, [r6, #0]
 8012d6a:	b133      	cbz	r3, 8012d7a <__sfp+0x2e>
 8012d6c:	6836      	ldr	r6, [r6, #0]
 8012d6e:	e7f7      	b.n	8012d60 <__sfp+0x14>
 8012d70:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8012d74:	b16d      	cbz	r5, 8012d92 <__sfp+0x46>
 8012d76:	3468      	adds	r4, #104	; 0x68
 8012d78:	e7f4      	b.n	8012d64 <__sfp+0x18>
 8012d7a:	2104      	movs	r1, #4
 8012d7c:	4638      	mov	r0, r7
 8012d7e:	f7ff ff9f 	bl	8012cc0 <__sfmoreglue>
 8012d82:	6030      	str	r0, [r6, #0]
 8012d84:	2800      	cmp	r0, #0
 8012d86:	d1f1      	bne.n	8012d6c <__sfp+0x20>
 8012d88:	230c      	movs	r3, #12
 8012d8a:	603b      	str	r3, [r7, #0]
 8012d8c:	4604      	mov	r4, r0
 8012d8e:	4620      	mov	r0, r4
 8012d90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012d92:	4b0b      	ldr	r3, [pc, #44]	; (8012dc0 <__sfp+0x74>)
 8012d94:	6665      	str	r5, [r4, #100]	; 0x64
 8012d96:	e9c4 5500 	strd	r5, r5, [r4]
 8012d9a:	60a5      	str	r5, [r4, #8]
 8012d9c:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8012da0:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8012da4:	2208      	movs	r2, #8
 8012da6:	4629      	mov	r1, r5
 8012da8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8012dac:	f7ff fcb4 	bl	8012718 <memset>
 8012db0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8012db4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8012db8:	e7e9      	b.n	8012d8e <__sfp+0x42>
 8012dba:	bf00      	nop
 8012dbc:	08013e98 	.word	0x08013e98
 8012dc0:	ffff0001 	.word	0xffff0001

08012dc4 <_fwalk_reent>:
 8012dc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012dc8:	4680      	mov	r8, r0
 8012dca:	4689      	mov	r9, r1
 8012dcc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8012dd0:	2600      	movs	r6, #0
 8012dd2:	b914      	cbnz	r4, 8012dda <_fwalk_reent+0x16>
 8012dd4:	4630      	mov	r0, r6
 8012dd6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012dda:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8012dde:	3f01      	subs	r7, #1
 8012de0:	d501      	bpl.n	8012de6 <_fwalk_reent+0x22>
 8012de2:	6824      	ldr	r4, [r4, #0]
 8012de4:	e7f5      	b.n	8012dd2 <_fwalk_reent+0xe>
 8012de6:	89ab      	ldrh	r3, [r5, #12]
 8012de8:	2b01      	cmp	r3, #1
 8012dea:	d907      	bls.n	8012dfc <_fwalk_reent+0x38>
 8012dec:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8012df0:	3301      	adds	r3, #1
 8012df2:	d003      	beq.n	8012dfc <_fwalk_reent+0x38>
 8012df4:	4629      	mov	r1, r5
 8012df6:	4640      	mov	r0, r8
 8012df8:	47c8      	blx	r9
 8012dfa:	4306      	orrs	r6, r0
 8012dfc:	3568      	adds	r5, #104	; 0x68
 8012dfe:	e7ee      	b.n	8012dde <_fwalk_reent+0x1a>

08012e00 <__swhatbuf_r>:
 8012e00:	b570      	push	{r4, r5, r6, lr}
 8012e02:	460e      	mov	r6, r1
 8012e04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012e08:	2900      	cmp	r1, #0
 8012e0a:	b096      	sub	sp, #88	; 0x58
 8012e0c:	4614      	mov	r4, r2
 8012e0e:	461d      	mov	r5, r3
 8012e10:	da07      	bge.n	8012e22 <__swhatbuf_r+0x22>
 8012e12:	2300      	movs	r3, #0
 8012e14:	602b      	str	r3, [r5, #0]
 8012e16:	89b3      	ldrh	r3, [r6, #12]
 8012e18:	061a      	lsls	r2, r3, #24
 8012e1a:	d410      	bmi.n	8012e3e <__swhatbuf_r+0x3e>
 8012e1c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012e20:	e00e      	b.n	8012e40 <__swhatbuf_r+0x40>
 8012e22:	466a      	mov	r2, sp
 8012e24:	f000 fc3e 	bl	80136a4 <_fstat_r>
 8012e28:	2800      	cmp	r0, #0
 8012e2a:	dbf2      	blt.n	8012e12 <__swhatbuf_r+0x12>
 8012e2c:	9a01      	ldr	r2, [sp, #4]
 8012e2e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8012e32:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8012e36:	425a      	negs	r2, r3
 8012e38:	415a      	adcs	r2, r3
 8012e3a:	602a      	str	r2, [r5, #0]
 8012e3c:	e7ee      	b.n	8012e1c <__swhatbuf_r+0x1c>
 8012e3e:	2340      	movs	r3, #64	; 0x40
 8012e40:	2000      	movs	r0, #0
 8012e42:	6023      	str	r3, [r4, #0]
 8012e44:	b016      	add	sp, #88	; 0x58
 8012e46:	bd70      	pop	{r4, r5, r6, pc}

08012e48 <__smakebuf_r>:
 8012e48:	898b      	ldrh	r3, [r1, #12]
 8012e4a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8012e4c:	079d      	lsls	r5, r3, #30
 8012e4e:	4606      	mov	r6, r0
 8012e50:	460c      	mov	r4, r1
 8012e52:	d507      	bpl.n	8012e64 <__smakebuf_r+0x1c>
 8012e54:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8012e58:	6023      	str	r3, [r4, #0]
 8012e5a:	6123      	str	r3, [r4, #16]
 8012e5c:	2301      	movs	r3, #1
 8012e5e:	6163      	str	r3, [r4, #20]
 8012e60:	b002      	add	sp, #8
 8012e62:	bd70      	pop	{r4, r5, r6, pc}
 8012e64:	ab01      	add	r3, sp, #4
 8012e66:	466a      	mov	r2, sp
 8012e68:	f7ff ffca 	bl	8012e00 <__swhatbuf_r>
 8012e6c:	9900      	ldr	r1, [sp, #0]
 8012e6e:	4605      	mov	r5, r0
 8012e70:	4630      	mov	r0, r6
 8012e72:	f000 f87f 	bl	8012f74 <_malloc_r>
 8012e76:	b948      	cbnz	r0, 8012e8c <__smakebuf_r+0x44>
 8012e78:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012e7c:	059a      	lsls	r2, r3, #22
 8012e7e:	d4ef      	bmi.n	8012e60 <__smakebuf_r+0x18>
 8012e80:	f023 0303 	bic.w	r3, r3, #3
 8012e84:	f043 0302 	orr.w	r3, r3, #2
 8012e88:	81a3      	strh	r3, [r4, #12]
 8012e8a:	e7e3      	b.n	8012e54 <__smakebuf_r+0xc>
 8012e8c:	4b0d      	ldr	r3, [pc, #52]	; (8012ec4 <__smakebuf_r+0x7c>)
 8012e8e:	62b3      	str	r3, [r6, #40]	; 0x28
 8012e90:	89a3      	ldrh	r3, [r4, #12]
 8012e92:	6020      	str	r0, [r4, #0]
 8012e94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012e98:	81a3      	strh	r3, [r4, #12]
 8012e9a:	9b00      	ldr	r3, [sp, #0]
 8012e9c:	6163      	str	r3, [r4, #20]
 8012e9e:	9b01      	ldr	r3, [sp, #4]
 8012ea0:	6120      	str	r0, [r4, #16]
 8012ea2:	b15b      	cbz	r3, 8012ebc <__smakebuf_r+0x74>
 8012ea4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012ea8:	4630      	mov	r0, r6
 8012eaa:	f000 fc0d 	bl	80136c8 <_isatty_r>
 8012eae:	b128      	cbz	r0, 8012ebc <__smakebuf_r+0x74>
 8012eb0:	89a3      	ldrh	r3, [r4, #12]
 8012eb2:	f023 0303 	bic.w	r3, r3, #3
 8012eb6:	f043 0301 	orr.w	r3, r3, #1
 8012eba:	81a3      	strh	r3, [r4, #12]
 8012ebc:	89a3      	ldrh	r3, [r4, #12]
 8012ebe:	431d      	orrs	r5, r3
 8012ec0:	81a5      	strh	r5, [r4, #12]
 8012ec2:	e7cd      	b.n	8012e60 <__smakebuf_r+0x18>
 8012ec4:	08012cb5 	.word	0x08012cb5

08012ec8 <malloc>:
 8012ec8:	4b02      	ldr	r3, [pc, #8]	; (8012ed4 <malloc+0xc>)
 8012eca:	4601      	mov	r1, r0
 8012ecc:	6818      	ldr	r0, [r3, #0]
 8012ece:	f000 b851 	b.w	8012f74 <_malloc_r>
 8012ed2:	bf00      	nop
 8012ed4:	20000084 	.word	0x20000084

08012ed8 <_free_r>:
 8012ed8:	b538      	push	{r3, r4, r5, lr}
 8012eda:	4605      	mov	r5, r0
 8012edc:	2900      	cmp	r1, #0
 8012ede:	d045      	beq.n	8012f6c <_free_r+0x94>
 8012ee0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012ee4:	1f0c      	subs	r4, r1, #4
 8012ee6:	2b00      	cmp	r3, #0
 8012ee8:	bfb8      	it	lt
 8012eea:	18e4      	addlt	r4, r4, r3
 8012eec:	f000 fc0e 	bl	801370c <__malloc_lock>
 8012ef0:	4a1f      	ldr	r2, [pc, #124]	; (8012f70 <_free_r+0x98>)
 8012ef2:	6813      	ldr	r3, [r2, #0]
 8012ef4:	4610      	mov	r0, r2
 8012ef6:	b933      	cbnz	r3, 8012f06 <_free_r+0x2e>
 8012ef8:	6063      	str	r3, [r4, #4]
 8012efa:	6014      	str	r4, [r2, #0]
 8012efc:	4628      	mov	r0, r5
 8012efe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012f02:	f000 bc04 	b.w	801370e <__malloc_unlock>
 8012f06:	42a3      	cmp	r3, r4
 8012f08:	d90c      	bls.n	8012f24 <_free_r+0x4c>
 8012f0a:	6821      	ldr	r1, [r4, #0]
 8012f0c:	1862      	adds	r2, r4, r1
 8012f0e:	4293      	cmp	r3, r2
 8012f10:	bf04      	itt	eq
 8012f12:	681a      	ldreq	r2, [r3, #0]
 8012f14:	685b      	ldreq	r3, [r3, #4]
 8012f16:	6063      	str	r3, [r4, #4]
 8012f18:	bf04      	itt	eq
 8012f1a:	1852      	addeq	r2, r2, r1
 8012f1c:	6022      	streq	r2, [r4, #0]
 8012f1e:	6004      	str	r4, [r0, #0]
 8012f20:	e7ec      	b.n	8012efc <_free_r+0x24>
 8012f22:	4613      	mov	r3, r2
 8012f24:	685a      	ldr	r2, [r3, #4]
 8012f26:	b10a      	cbz	r2, 8012f2c <_free_r+0x54>
 8012f28:	42a2      	cmp	r2, r4
 8012f2a:	d9fa      	bls.n	8012f22 <_free_r+0x4a>
 8012f2c:	6819      	ldr	r1, [r3, #0]
 8012f2e:	1858      	adds	r0, r3, r1
 8012f30:	42a0      	cmp	r0, r4
 8012f32:	d10b      	bne.n	8012f4c <_free_r+0x74>
 8012f34:	6820      	ldr	r0, [r4, #0]
 8012f36:	4401      	add	r1, r0
 8012f38:	1858      	adds	r0, r3, r1
 8012f3a:	4282      	cmp	r2, r0
 8012f3c:	6019      	str	r1, [r3, #0]
 8012f3e:	d1dd      	bne.n	8012efc <_free_r+0x24>
 8012f40:	6810      	ldr	r0, [r2, #0]
 8012f42:	6852      	ldr	r2, [r2, #4]
 8012f44:	605a      	str	r2, [r3, #4]
 8012f46:	4401      	add	r1, r0
 8012f48:	6019      	str	r1, [r3, #0]
 8012f4a:	e7d7      	b.n	8012efc <_free_r+0x24>
 8012f4c:	d902      	bls.n	8012f54 <_free_r+0x7c>
 8012f4e:	230c      	movs	r3, #12
 8012f50:	602b      	str	r3, [r5, #0]
 8012f52:	e7d3      	b.n	8012efc <_free_r+0x24>
 8012f54:	6820      	ldr	r0, [r4, #0]
 8012f56:	1821      	adds	r1, r4, r0
 8012f58:	428a      	cmp	r2, r1
 8012f5a:	bf04      	itt	eq
 8012f5c:	6811      	ldreq	r1, [r2, #0]
 8012f5e:	6852      	ldreq	r2, [r2, #4]
 8012f60:	6062      	str	r2, [r4, #4]
 8012f62:	bf04      	itt	eq
 8012f64:	1809      	addeq	r1, r1, r0
 8012f66:	6021      	streq	r1, [r4, #0]
 8012f68:	605c      	str	r4, [r3, #4]
 8012f6a:	e7c7      	b.n	8012efc <_free_r+0x24>
 8012f6c:	bd38      	pop	{r3, r4, r5, pc}
 8012f6e:	bf00      	nop
 8012f70:	20000118 	.word	0x20000118

08012f74 <_malloc_r>:
 8012f74:	b570      	push	{r4, r5, r6, lr}
 8012f76:	1ccd      	adds	r5, r1, #3
 8012f78:	f025 0503 	bic.w	r5, r5, #3
 8012f7c:	3508      	adds	r5, #8
 8012f7e:	2d0c      	cmp	r5, #12
 8012f80:	bf38      	it	cc
 8012f82:	250c      	movcc	r5, #12
 8012f84:	2d00      	cmp	r5, #0
 8012f86:	4606      	mov	r6, r0
 8012f88:	db01      	blt.n	8012f8e <_malloc_r+0x1a>
 8012f8a:	42a9      	cmp	r1, r5
 8012f8c:	d903      	bls.n	8012f96 <_malloc_r+0x22>
 8012f8e:	230c      	movs	r3, #12
 8012f90:	6033      	str	r3, [r6, #0]
 8012f92:	2000      	movs	r0, #0
 8012f94:	bd70      	pop	{r4, r5, r6, pc}
 8012f96:	f000 fbb9 	bl	801370c <__malloc_lock>
 8012f9a:	4a21      	ldr	r2, [pc, #132]	; (8013020 <_malloc_r+0xac>)
 8012f9c:	6814      	ldr	r4, [r2, #0]
 8012f9e:	4621      	mov	r1, r4
 8012fa0:	b991      	cbnz	r1, 8012fc8 <_malloc_r+0x54>
 8012fa2:	4c20      	ldr	r4, [pc, #128]	; (8013024 <_malloc_r+0xb0>)
 8012fa4:	6823      	ldr	r3, [r4, #0]
 8012fa6:	b91b      	cbnz	r3, 8012fb0 <_malloc_r+0x3c>
 8012fa8:	4630      	mov	r0, r6
 8012faa:	f000 fb05 	bl	80135b8 <_sbrk_r>
 8012fae:	6020      	str	r0, [r4, #0]
 8012fb0:	4629      	mov	r1, r5
 8012fb2:	4630      	mov	r0, r6
 8012fb4:	f000 fb00 	bl	80135b8 <_sbrk_r>
 8012fb8:	1c43      	adds	r3, r0, #1
 8012fba:	d124      	bne.n	8013006 <_malloc_r+0x92>
 8012fbc:	230c      	movs	r3, #12
 8012fbe:	6033      	str	r3, [r6, #0]
 8012fc0:	4630      	mov	r0, r6
 8012fc2:	f000 fba4 	bl	801370e <__malloc_unlock>
 8012fc6:	e7e4      	b.n	8012f92 <_malloc_r+0x1e>
 8012fc8:	680b      	ldr	r3, [r1, #0]
 8012fca:	1b5b      	subs	r3, r3, r5
 8012fcc:	d418      	bmi.n	8013000 <_malloc_r+0x8c>
 8012fce:	2b0b      	cmp	r3, #11
 8012fd0:	d90f      	bls.n	8012ff2 <_malloc_r+0x7e>
 8012fd2:	600b      	str	r3, [r1, #0]
 8012fd4:	50cd      	str	r5, [r1, r3]
 8012fd6:	18cc      	adds	r4, r1, r3
 8012fd8:	4630      	mov	r0, r6
 8012fda:	f000 fb98 	bl	801370e <__malloc_unlock>
 8012fde:	f104 000b 	add.w	r0, r4, #11
 8012fe2:	1d23      	adds	r3, r4, #4
 8012fe4:	f020 0007 	bic.w	r0, r0, #7
 8012fe8:	1ac3      	subs	r3, r0, r3
 8012fea:	d0d3      	beq.n	8012f94 <_malloc_r+0x20>
 8012fec:	425a      	negs	r2, r3
 8012fee:	50e2      	str	r2, [r4, r3]
 8012ff0:	e7d0      	b.n	8012f94 <_malloc_r+0x20>
 8012ff2:	428c      	cmp	r4, r1
 8012ff4:	684b      	ldr	r3, [r1, #4]
 8012ff6:	bf16      	itet	ne
 8012ff8:	6063      	strne	r3, [r4, #4]
 8012ffa:	6013      	streq	r3, [r2, #0]
 8012ffc:	460c      	movne	r4, r1
 8012ffe:	e7eb      	b.n	8012fd8 <_malloc_r+0x64>
 8013000:	460c      	mov	r4, r1
 8013002:	6849      	ldr	r1, [r1, #4]
 8013004:	e7cc      	b.n	8012fa0 <_malloc_r+0x2c>
 8013006:	1cc4      	adds	r4, r0, #3
 8013008:	f024 0403 	bic.w	r4, r4, #3
 801300c:	42a0      	cmp	r0, r4
 801300e:	d005      	beq.n	801301c <_malloc_r+0xa8>
 8013010:	1a21      	subs	r1, r4, r0
 8013012:	4630      	mov	r0, r6
 8013014:	f000 fad0 	bl	80135b8 <_sbrk_r>
 8013018:	3001      	adds	r0, #1
 801301a:	d0cf      	beq.n	8012fbc <_malloc_r+0x48>
 801301c:	6025      	str	r5, [r4, #0]
 801301e:	e7db      	b.n	8012fd8 <_malloc_r+0x64>
 8013020:	20000118 	.word	0x20000118
 8013024:	2000011c 	.word	0x2000011c

08013028 <__sfputc_r>:
 8013028:	6893      	ldr	r3, [r2, #8]
 801302a:	3b01      	subs	r3, #1
 801302c:	2b00      	cmp	r3, #0
 801302e:	b410      	push	{r4}
 8013030:	6093      	str	r3, [r2, #8]
 8013032:	da08      	bge.n	8013046 <__sfputc_r+0x1e>
 8013034:	6994      	ldr	r4, [r2, #24]
 8013036:	42a3      	cmp	r3, r4
 8013038:	db01      	blt.n	801303e <__sfputc_r+0x16>
 801303a:	290a      	cmp	r1, #10
 801303c:	d103      	bne.n	8013046 <__sfputc_r+0x1e>
 801303e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013042:	f7ff bca3 	b.w	801298c <__swbuf_r>
 8013046:	6813      	ldr	r3, [r2, #0]
 8013048:	1c58      	adds	r0, r3, #1
 801304a:	6010      	str	r0, [r2, #0]
 801304c:	7019      	strb	r1, [r3, #0]
 801304e:	4608      	mov	r0, r1
 8013050:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013054:	4770      	bx	lr

08013056 <__sfputs_r>:
 8013056:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013058:	4606      	mov	r6, r0
 801305a:	460f      	mov	r7, r1
 801305c:	4614      	mov	r4, r2
 801305e:	18d5      	adds	r5, r2, r3
 8013060:	42ac      	cmp	r4, r5
 8013062:	d101      	bne.n	8013068 <__sfputs_r+0x12>
 8013064:	2000      	movs	r0, #0
 8013066:	e007      	b.n	8013078 <__sfputs_r+0x22>
 8013068:	463a      	mov	r2, r7
 801306a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801306e:	4630      	mov	r0, r6
 8013070:	f7ff ffda 	bl	8013028 <__sfputc_r>
 8013074:	1c43      	adds	r3, r0, #1
 8013076:	d1f3      	bne.n	8013060 <__sfputs_r+0xa>
 8013078:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801307c <_vfiprintf_r>:
 801307c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013080:	460c      	mov	r4, r1
 8013082:	b09d      	sub	sp, #116	; 0x74
 8013084:	4617      	mov	r7, r2
 8013086:	461d      	mov	r5, r3
 8013088:	4606      	mov	r6, r0
 801308a:	b118      	cbz	r0, 8013094 <_vfiprintf_r+0x18>
 801308c:	6983      	ldr	r3, [r0, #24]
 801308e:	b90b      	cbnz	r3, 8013094 <_vfiprintf_r+0x18>
 8013090:	f7ff fe2c 	bl	8012cec <__sinit>
 8013094:	4b7c      	ldr	r3, [pc, #496]	; (8013288 <_vfiprintf_r+0x20c>)
 8013096:	429c      	cmp	r4, r3
 8013098:	d158      	bne.n	801314c <_vfiprintf_r+0xd0>
 801309a:	6874      	ldr	r4, [r6, #4]
 801309c:	89a3      	ldrh	r3, [r4, #12]
 801309e:	0718      	lsls	r0, r3, #28
 80130a0:	d55e      	bpl.n	8013160 <_vfiprintf_r+0xe4>
 80130a2:	6923      	ldr	r3, [r4, #16]
 80130a4:	2b00      	cmp	r3, #0
 80130a6:	d05b      	beq.n	8013160 <_vfiprintf_r+0xe4>
 80130a8:	2300      	movs	r3, #0
 80130aa:	9309      	str	r3, [sp, #36]	; 0x24
 80130ac:	2320      	movs	r3, #32
 80130ae:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80130b2:	2330      	movs	r3, #48	; 0x30
 80130b4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80130b8:	9503      	str	r5, [sp, #12]
 80130ba:	f04f 0b01 	mov.w	fp, #1
 80130be:	46b8      	mov	r8, r7
 80130c0:	4645      	mov	r5, r8
 80130c2:	f815 3b01 	ldrb.w	r3, [r5], #1
 80130c6:	b10b      	cbz	r3, 80130cc <_vfiprintf_r+0x50>
 80130c8:	2b25      	cmp	r3, #37	; 0x25
 80130ca:	d154      	bne.n	8013176 <_vfiprintf_r+0xfa>
 80130cc:	ebb8 0a07 	subs.w	sl, r8, r7
 80130d0:	d00b      	beq.n	80130ea <_vfiprintf_r+0x6e>
 80130d2:	4653      	mov	r3, sl
 80130d4:	463a      	mov	r2, r7
 80130d6:	4621      	mov	r1, r4
 80130d8:	4630      	mov	r0, r6
 80130da:	f7ff ffbc 	bl	8013056 <__sfputs_r>
 80130de:	3001      	adds	r0, #1
 80130e0:	f000 80c2 	beq.w	8013268 <_vfiprintf_r+0x1ec>
 80130e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80130e6:	4453      	add	r3, sl
 80130e8:	9309      	str	r3, [sp, #36]	; 0x24
 80130ea:	f898 3000 	ldrb.w	r3, [r8]
 80130ee:	2b00      	cmp	r3, #0
 80130f0:	f000 80ba 	beq.w	8013268 <_vfiprintf_r+0x1ec>
 80130f4:	2300      	movs	r3, #0
 80130f6:	f04f 32ff 	mov.w	r2, #4294967295
 80130fa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80130fe:	9304      	str	r3, [sp, #16]
 8013100:	9307      	str	r3, [sp, #28]
 8013102:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8013106:	931a      	str	r3, [sp, #104]	; 0x68
 8013108:	46a8      	mov	r8, r5
 801310a:	2205      	movs	r2, #5
 801310c:	f818 1b01 	ldrb.w	r1, [r8], #1
 8013110:	485e      	ldr	r0, [pc, #376]	; (801328c <_vfiprintf_r+0x210>)
 8013112:	f7ed f85d 	bl	80001d0 <memchr>
 8013116:	9b04      	ldr	r3, [sp, #16]
 8013118:	bb78      	cbnz	r0, 801317a <_vfiprintf_r+0xfe>
 801311a:	06d9      	lsls	r1, r3, #27
 801311c:	bf44      	itt	mi
 801311e:	2220      	movmi	r2, #32
 8013120:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8013124:	071a      	lsls	r2, r3, #28
 8013126:	bf44      	itt	mi
 8013128:	222b      	movmi	r2, #43	; 0x2b
 801312a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801312e:	782a      	ldrb	r2, [r5, #0]
 8013130:	2a2a      	cmp	r2, #42	; 0x2a
 8013132:	d02a      	beq.n	801318a <_vfiprintf_r+0x10e>
 8013134:	9a07      	ldr	r2, [sp, #28]
 8013136:	46a8      	mov	r8, r5
 8013138:	2000      	movs	r0, #0
 801313a:	250a      	movs	r5, #10
 801313c:	4641      	mov	r1, r8
 801313e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013142:	3b30      	subs	r3, #48	; 0x30
 8013144:	2b09      	cmp	r3, #9
 8013146:	d969      	bls.n	801321c <_vfiprintf_r+0x1a0>
 8013148:	b360      	cbz	r0, 80131a4 <_vfiprintf_r+0x128>
 801314a:	e024      	b.n	8013196 <_vfiprintf_r+0x11a>
 801314c:	4b50      	ldr	r3, [pc, #320]	; (8013290 <_vfiprintf_r+0x214>)
 801314e:	429c      	cmp	r4, r3
 8013150:	d101      	bne.n	8013156 <_vfiprintf_r+0xda>
 8013152:	68b4      	ldr	r4, [r6, #8]
 8013154:	e7a2      	b.n	801309c <_vfiprintf_r+0x20>
 8013156:	4b4f      	ldr	r3, [pc, #316]	; (8013294 <_vfiprintf_r+0x218>)
 8013158:	429c      	cmp	r4, r3
 801315a:	bf08      	it	eq
 801315c:	68f4      	ldreq	r4, [r6, #12]
 801315e:	e79d      	b.n	801309c <_vfiprintf_r+0x20>
 8013160:	4621      	mov	r1, r4
 8013162:	4630      	mov	r0, r6
 8013164:	f7ff fc64 	bl	8012a30 <__swsetup_r>
 8013168:	2800      	cmp	r0, #0
 801316a:	d09d      	beq.n	80130a8 <_vfiprintf_r+0x2c>
 801316c:	f04f 30ff 	mov.w	r0, #4294967295
 8013170:	b01d      	add	sp, #116	; 0x74
 8013172:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013176:	46a8      	mov	r8, r5
 8013178:	e7a2      	b.n	80130c0 <_vfiprintf_r+0x44>
 801317a:	4a44      	ldr	r2, [pc, #272]	; (801328c <_vfiprintf_r+0x210>)
 801317c:	1a80      	subs	r0, r0, r2
 801317e:	fa0b f000 	lsl.w	r0, fp, r0
 8013182:	4318      	orrs	r0, r3
 8013184:	9004      	str	r0, [sp, #16]
 8013186:	4645      	mov	r5, r8
 8013188:	e7be      	b.n	8013108 <_vfiprintf_r+0x8c>
 801318a:	9a03      	ldr	r2, [sp, #12]
 801318c:	1d11      	adds	r1, r2, #4
 801318e:	6812      	ldr	r2, [r2, #0]
 8013190:	9103      	str	r1, [sp, #12]
 8013192:	2a00      	cmp	r2, #0
 8013194:	db01      	blt.n	801319a <_vfiprintf_r+0x11e>
 8013196:	9207      	str	r2, [sp, #28]
 8013198:	e004      	b.n	80131a4 <_vfiprintf_r+0x128>
 801319a:	4252      	negs	r2, r2
 801319c:	f043 0302 	orr.w	r3, r3, #2
 80131a0:	9207      	str	r2, [sp, #28]
 80131a2:	9304      	str	r3, [sp, #16]
 80131a4:	f898 3000 	ldrb.w	r3, [r8]
 80131a8:	2b2e      	cmp	r3, #46	; 0x2e
 80131aa:	d10e      	bne.n	80131ca <_vfiprintf_r+0x14e>
 80131ac:	f898 3001 	ldrb.w	r3, [r8, #1]
 80131b0:	2b2a      	cmp	r3, #42	; 0x2a
 80131b2:	d138      	bne.n	8013226 <_vfiprintf_r+0x1aa>
 80131b4:	9b03      	ldr	r3, [sp, #12]
 80131b6:	1d1a      	adds	r2, r3, #4
 80131b8:	681b      	ldr	r3, [r3, #0]
 80131ba:	9203      	str	r2, [sp, #12]
 80131bc:	2b00      	cmp	r3, #0
 80131be:	bfb8      	it	lt
 80131c0:	f04f 33ff 	movlt.w	r3, #4294967295
 80131c4:	f108 0802 	add.w	r8, r8, #2
 80131c8:	9305      	str	r3, [sp, #20]
 80131ca:	4d33      	ldr	r5, [pc, #204]	; (8013298 <_vfiprintf_r+0x21c>)
 80131cc:	f898 1000 	ldrb.w	r1, [r8]
 80131d0:	2203      	movs	r2, #3
 80131d2:	4628      	mov	r0, r5
 80131d4:	f7ec fffc 	bl	80001d0 <memchr>
 80131d8:	b140      	cbz	r0, 80131ec <_vfiprintf_r+0x170>
 80131da:	2340      	movs	r3, #64	; 0x40
 80131dc:	1b40      	subs	r0, r0, r5
 80131de:	fa03 f000 	lsl.w	r0, r3, r0
 80131e2:	9b04      	ldr	r3, [sp, #16]
 80131e4:	4303      	orrs	r3, r0
 80131e6:	f108 0801 	add.w	r8, r8, #1
 80131ea:	9304      	str	r3, [sp, #16]
 80131ec:	f898 1000 	ldrb.w	r1, [r8]
 80131f0:	482a      	ldr	r0, [pc, #168]	; (801329c <_vfiprintf_r+0x220>)
 80131f2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80131f6:	2206      	movs	r2, #6
 80131f8:	f108 0701 	add.w	r7, r8, #1
 80131fc:	f7ec ffe8 	bl	80001d0 <memchr>
 8013200:	2800      	cmp	r0, #0
 8013202:	d037      	beq.n	8013274 <_vfiprintf_r+0x1f8>
 8013204:	4b26      	ldr	r3, [pc, #152]	; (80132a0 <_vfiprintf_r+0x224>)
 8013206:	bb1b      	cbnz	r3, 8013250 <_vfiprintf_r+0x1d4>
 8013208:	9b03      	ldr	r3, [sp, #12]
 801320a:	3307      	adds	r3, #7
 801320c:	f023 0307 	bic.w	r3, r3, #7
 8013210:	3308      	adds	r3, #8
 8013212:	9303      	str	r3, [sp, #12]
 8013214:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013216:	444b      	add	r3, r9
 8013218:	9309      	str	r3, [sp, #36]	; 0x24
 801321a:	e750      	b.n	80130be <_vfiprintf_r+0x42>
 801321c:	fb05 3202 	mla	r2, r5, r2, r3
 8013220:	2001      	movs	r0, #1
 8013222:	4688      	mov	r8, r1
 8013224:	e78a      	b.n	801313c <_vfiprintf_r+0xc0>
 8013226:	2300      	movs	r3, #0
 8013228:	f108 0801 	add.w	r8, r8, #1
 801322c:	9305      	str	r3, [sp, #20]
 801322e:	4619      	mov	r1, r3
 8013230:	250a      	movs	r5, #10
 8013232:	4640      	mov	r0, r8
 8013234:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013238:	3a30      	subs	r2, #48	; 0x30
 801323a:	2a09      	cmp	r2, #9
 801323c:	d903      	bls.n	8013246 <_vfiprintf_r+0x1ca>
 801323e:	2b00      	cmp	r3, #0
 8013240:	d0c3      	beq.n	80131ca <_vfiprintf_r+0x14e>
 8013242:	9105      	str	r1, [sp, #20]
 8013244:	e7c1      	b.n	80131ca <_vfiprintf_r+0x14e>
 8013246:	fb05 2101 	mla	r1, r5, r1, r2
 801324a:	2301      	movs	r3, #1
 801324c:	4680      	mov	r8, r0
 801324e:	e7f0      	b.n	8013232 <_vfiprintf_r+0x1b6>
 8013250:	ab03      	add	r3, sp, #12
 8013252:	9300      	str	r3, [sp, #0]
 8013254:	4622      	mov	r2, r4
 8013256:	4b13      	ldr	r3, [pc, #76]	; (80132a4 <_vfiprintf_r+0x228>)
 8013258:	a904      	add	r1, sp, #16
 801325a:	4630      	mov	r0, r6
 801325c:	f3af 8000 	nop.w
 8013260:	f1b0 3fff 	cmp.w	r0, #4294967295
 8013264:	4681      	mov	r9, r0
 8013266:	d1d5      	bne.n	8013214 <_vfiprintf_r+0x198>
 8013268:	89a3      	ldrh	r3, [r4, #12]
 801326a:	065b      	lsls	r3, r3, #25
 801326c:	f53f af7e 	bmi.w	801316c <_vfiprintf_r+0xf0>
 8013270:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013272:	e77d      	b.n	8013170 <_vfiprintf_r+0xf4>
 8013274:	ab03      	add	r3, sp, #12
 8013276:	9300      	str	r3, [sp, #0]
 8013278:	4622      	mov	r2, r4
 801327a:	4b0a      	ldr	r3, [pc, #40]	; (80132a4 <_vfiprintf_r+0x228>)
 801327c:	a904      	add	r1, sp, #16
 801327e:	4630      	mov	r0, r6
 8013280:	f000 f888 	bl	8013394 <_printf_i>
 8013284:	e7ec      	b.n	8013260 <_vfiprintf_r+0x1e4>
 8013286:	bf00      	nop
 8013288:	08013ebc 	.word	0x08013ebc
 801328c:	08013efc 	.word	0x08013efc
 8013290:	08013edc 	.word	0x08013edc
 8013294:	08013e9c 	.word	0x08013e9c
 8013298:	08013f02 	.word	0x08013f02
 801329c:	08013f06 	.word	0x08013f06
 80132a0:	00000000 	.word	0x00000000
 80132a4:	08013057 	.word	0x08013057

080132a8 <_printf_common>:
 80132a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80132ac:	4691      	mov	r9, r2
 80132ae:	461f      	mov	r7, r3
 80132b0:	688a      	ldr	r2, [r1, #8]
 80132b2:	690b      	ldr	r3, [r1, #16]
 80132b4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80132b8:	4293      	cmp	r3, r2
 80132ba:	bfb8      	it	lt
 80132bc:	4613      	movlt	r3, r2
 80132be:	f8c9 3000 	str.w	r3, [r9]
 80132c2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80132c6:	4606      	mov	r6, r0
 80132c8:	460c      	mov	r4, r1
 80132ca:	b112      	cbz	r2, 80132d2 <_printf_common+0x2a>
 80132cc:	3301      	adds	r3, #1
 80132ce:	f8c9 3000 	str.w	r3, [r9]
 80132d2:	6823      	ldr	r3, [r4, #0]
 80132d4:	0699      	lsls	r1, r3, #26
 80132d6:	bf42      	ittt	mi
 80132d8:	f8d9 3000 	ldrmi.w	r3, [r9]
 80132dc:	3302      	addmi	r3, #2
 80132de:	f8c9 3000 	strmi.w	r3, [r9]
 80132e2:	6825      	ldr	r5, [r4, #0]
 80132e4:	f015 0506 	ands.w	r5, r5, #6
 80132e8:	d107      	bne.n	80132fa <_printf_common+0x52>
 80132ea:	f104 0a19 	add.w	sl, r4, #25
 80132ee:	68e3      	ldr	r3, [r4, #12]
 80132f0:	f8d9 2000 	ldr.w	r2, [r9]
 80132f4:	1a9b      	subs	r3, r3, r2
 80132f6:	42ab      	cmp	r3, r5
 80132f8:	dc28      	bgt.n	801334c <_printf_common+0xa4>
 80132fa:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80132fe:	6822      	ldr	r2, [r4, #0]
 8013300:	3300      	adds	r3, #0
 8013302:	bf18      	it	ne
 8013304:	2301      	movne	r3, #1
 8013306:	0692      	lsls	r2, r2, #26
 8013308:	d42d      	bmi.n	8013366 <_printf_common+0xbe>
 801330a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801330e:	4639      	mov	r1, r7
 8013310:	4630      	mov	r0, r6
 8013312:	47c0      	blx	r8
 8013314:	3001      	adds	r0, #1
 8013316:	d020      	beq.n	801335a <_printf_common+0xb2>
 8013318:	6823      	ldr	r3, [r4, #0]
 801331a:	68e5      	ldr	r5, [r4, #12]
 801331c:	f8d9 2000 	ldr.w	r2, [r9]
 8013320:	f003 0306 	and.w	r3, r3, #6
 8013324:	2b04      	cmp	r3, #4
 8013326:	bf08      	it	eq
 8013328:	1aad      	subeq	r5, r5, r2
 801332a:	68a3      	ldr	r3, [r4, #8]
 801332c:	6922      	ldr	r2, [r4, #16]
 801332e:	bf0c      	ite	eq
 8013330:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8013334:	2500      	movne	r5, #0
 8013336:	4293      	cmp	r3, r2
 8013338:	bfc4      	itt	gt
 801333a:	1a9b      	subgt	r3, r3, r2
 801333c:	18ed      	addgt	r5, r5, r3
 801333e:	f04f 0900 	mov.w	r9, #0
 8013342:	341a      	adds	r4, #26
 8013344:	454d      	cmp	r5, r9
 8013346:	d11a      	bne.n	801337e <_printf_common+0xd6>
 8013348:	2000      	movs	r0, #0
 801334a:	e008      	b.n	801335e <_printf_common+0xb6>
 801334c:	2301      	movs	r3, #1
 801334e:	4652      	mov	r2, sl
 8013350:	4639      	mov	r1, r7
 8013352:	4630      	mov	r0, r6
 8013354:	47c0      	blx	r8
 8013356:	3001      	adds	r0, #1
 8013358:	d103      	bne.n	8013362 <_printf_common+0xba>
 801335a:	f04f 30ff 	mov.w	r0, #4294967295
 801335e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013362:	3501      	adds	r5, #1
 8013364:	e7c3      	b.n	80132ee <_printf_common+0x46>
 8013366:	18e1      	adds	r1, r4, r3
 8013368:	1c5a      	adds	r2, r3, #1
 801336a:	2030      	movs	r0, #48	; 0x30
 801336c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8013370:	4422      	add	r2, r4
 8013372:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8013376:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801337a:	3302      	adds	r3, #2
 801337c:	e7c5      	b.n	801330a <_printf_common+0x62>
 801337e:	2301      	movs	r3, #1
 8013380:	4622      	mov	r2, r4
 8013382:	4639      	mov	r1, r7
 8013384:	4630      	mov	r0, r6
 8013386:	47c0      	blx	r8
 8013388:	3001      	adds	r0, #1
 801338a:	d0e6      	beq.n	801335a <_printf_common+0xb2>
 801338c:	f109 0901 	add.w	r9, r9, #1
 8013390:	e7d8      	b.n	8013344 <_printf_common+0x9c>
	...

08013394 <_printf_i>:
 8013394:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013398:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 801339c:	460c      	mov	r4, r1
 801339e:	7e09      	ldrb	r1, [r1, #24]
 80133a0:	b085      	sub	sp, #20
 80133a2:	296e      	cmp	r1, #110	; 0x6e
 80133a4:	4617      	mov	r7, r2
 80133a6:	4606      	mov	r6, r0
 80133a8:	4698      	mov	r8, r3
 80133aa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80133ac:	f000 80b3 	beq.w	8013516 <_printf_i+0x182>
 80133b0:	d822      	bhi.n	80133f8 <_printf_i+0x64>
 80133b2:	2963      	cmp	r1, #99	; 0x63
 80133b4:	d036      	beq.n	8013424 <_printf_i+0x90>
 80133b6:	d80a      	bhi.n	80133ce <_printf_i+0x3a>
 80133b8:	2900      	cmp	r1, #0
 80133ba:	f000 80b9 	beq.w	8013530 <_printf_i+0x19c>
 80133be:	2958      	cmp	r1, #88	; 0x58
 80133c0:	f000 8083 	beq.w	80134ca <_printf_i+0x136>
 80133c4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80133c8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80133cc:	e032      	b.n	8013434 <_printf_i+0xa0>
 80133ce:	2964      	cmp	r1, #100	; 0x64
 80133d0:	d001      	beq.n	80133d6 <_printf_i+0x42>
 80133d2:	2969      	cmp	r1, #105	; 0x69
 80133d4:	d1f6      	bne.n	80133c4 <_printf_i+0x30>
 80133d6:	6820      	ldr	r0, [r4, #0]
 80133d8:	6813      	ldr	r3, [r2, #0]
 80133da:	0605      	lsls	r5, r0, #24
 80133dc:	f103 0104 	add.w	r1, r3, #4
 80133e0:	d52a      	bpl.n	8013438 <_printf_i+0xa4>
 80133e2:	681b      	ldr	r3, [r3, #0]
 80133e4:	6011      	str	r1, [r2, #0]
 80133e6:	2b00      	cmp	r3, #0
 80133e8:	da03      	bge.n	80133f2 <_printf_i+0x5e>
 80133ea:	222d      	movs	r2, #45	; 0x2d
 80133ec:	425b      	negs	r3, r3
 80133ee:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80133f2:	486f      	ldr	r0, [pc, #444]	; (80135b0 <_printf_i+0x21c>)
 80133f4:	220a      	movs	r2, #10
 80133f6:	e039      	b.n	801346c <_printf_i+0xd8>
 80133f8:	2973      	cmp	r1, #115	; 0x73
 80133fa:	f000 809d 	beq.w	8013538 <_printf_i+0x1a4>
 80133fe:	d808      	bhi.n	8013412 <_printf_i+0x7e>
 8013400:	296f      	cmp	r1, #111	; 0x6f
 8013402:	d020      	beq.n	8013446 <_printf_i+0xb2>
 8013404:	2970      	cmp	r1, #112	; 0x70
 8013406:	d1dd      	bne.n	80133c4 <_printf_i+0x30>
 8013408:	6823      	ldr	r3, [r4, #0]
 801340a:	f043 0320 	orr.w	r3, r3, #32
 801340e:	6023      	str	r3, [r4, #0]
 8013410:	e003      	b.n	801341a <_printf_i+0x86>
 8013412:	2975      	cmp	r1, #117	; 0x75
 8013414:	d017      	beq.n	8013446 <_printf_i+0xb2>
 8013416:	2978      	cmp	r1, #120	; 0x78
 8013418:	d1d4      	bne.n	80133c4 <_printf_i+0x30>
 801341a:	2378      	movs	r3, #120	; 0x78
 801341c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8013420:	4864      	ldr	r0, [pc, #400]	; (80135b4 <_printf_i+0x220>)
 8013422:	e055      	b.n	80134d0 <_printf_i+0x13c>
 8013424:	6813      	ldr	r3, [r2, #0]
 8013426:	1d19      	adds	r1, r3, #4
 8013428:	681b      	ldr	r3, [r3, #0]
 801342a:	6011      	str	r1, [r2, #0]
 801342c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8013430:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8013434:	2301      	movs	r3, #1
 8013436:	e08c      	b.n	8013552 <_printf_i+0x1be>
 8013438:	681b      	ldr	r3, [r3, #0]
 801343a:	6011      	str	r1, [r2, #0]
 801343c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8013440:	bf18      	it	ne
 8013442:	b21b      	sxthne	r3, r3
 8013444:	e7cf      	b.n	80133e6 <_printf_i+0x52>
 8013446:	6813      	ldr	r3, [r2, #0]
 8013448:	6825      	ldr	r5, [r4, #0]
 801344a:	1d18      	adds	r0, r3, #4
 801344c:	6010      	str	r0, [r2, #0]
 801344e:	0628      	lsls	r0, r5, #24
 8013450:	d501      	bpl.n	8013456 <_printf_i+0xc2>
 8013452:	681b      	ldr	r3, [r3, #0]
 8013454:	e002      	b.n	801345c <_printf_i+0xc8>
 8013456:	0668      	lsls	r0, r5, #25
 8013458:	d5fb      	bpl.n	8013452 <_printf_i+0xbe>
 801345a:	881b      	ldrh	r3, [r3, #0]
 801345c:	4854      	ldr	r0, [pc, #336]	; (80135b0 <_printf_i+0x21c>)
 801345e:	296f      	cmp	r1, #111	; 0x6f
 8013460:	bf14      	ite	ne
 8013462:	220a      	movne	r2, #10
 8013464:	2208      	moveq	r2, #8
 8013466:	2100      	movs	r1, #0
 8013468:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801346c:	6865      	ldr	r5, [r4, #4]
 801346e:	60a5      	str	r5, [r4, #8]
 8013470:	2d00      	cmp	r5, #0
 8013472:	f2c0 8095 	blt.w	80135a0 <_printf_i+0x20c>
 8013476:	6821      	ldr	r1, [r4, #0]
 8013478:	f021 0104 	bic.w	r1, r1, #4
 801347c:	6021      	str	r1, [r4, #0]
 801347e:	2b00      	cmp	r3, #0
 8013480:	d13d      	bne.n	80134fe <_printf_i+0x16a>
 8013482:	2d00      	cmp	r5, #0
 8013484:	f040 808e 	bne.w	80135a4 <_printf_i+0x210>
 8013488:	4665      	mov	r5, ip
 801348a:	2a08      	cmp	r2, #8
 801348c:	d10b      	bne.n	80134a6 <_printf_i+0x112>
 801348e:	6823      	ldr	r3, [r4, #0]
 8013490:	07db      	lsls	r3, r3, #31
 8013492:	d508      	bpl.n	80134a6 <_printf_i+0x112>
 8013494:	6923      	ldr	r3, [r4, #16]
 8013496:	6862      	ldr	r2, [r4, #4]
 8013498:	429a      	cmp	r2, r3
 801349a:	bfde      	ittt	le
 801349c:	2330      	movle	r3, #48	; 0x30
 801349e:	f805 3c01 	strble.w	r3, [r5, #-1]
 80134a2:	f105 35ff 	addle.w	r5, r5, #4294967295
 80134a6:	ebac 0305 	sub.w	r3, ip, r5
 80134aa:	6123      	str	r3, [r4, #16]
 80134ac:	f8cd 8000 	str.w	r8, [sp]
 80134b0:	463b      	mov	r3, r7
 80134b2:	aa03      	add	r2, sp, #12
 80134b4:	4621      	mov	r1, r4
 80134b6:	4630      	mov	r0, r6
 80134b8:	f7ff fef6 	bl	80132a8 <_printf_common>
 80134bc:	3001      	adds	r0, #1
 80134be:	d14d      	bne.n	801355c <_printf_i+0x1c8>
 80134c0:	f04f 30ff 	mov.w	r0, #4294967295
 80134c4:	b005      	add	sp, #20
 80134c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80134ca:	4839      	ldr	r0, [pc, #228]	; (80135b0 <_printf_i+0x21c>)
 80134cc:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80134d0:	6813      	ldr	r3, [r2, #0]
 80134d2:	6821      	ldr	r1, [r4, #0]
 80134d4:	1d1d      	adds	r5, r3, #4
 80134d6:	681b      	ldr	r3, [r3, #0]
 80134d8:	6015      	str	r5, [r2, #0]
 80134da:	060a      	lsls	r2, r1, #24
 80134dc:	d50b      	bpl.n	80134f6 <_printf_i+0x162>
 80134de:	07ca      	lsls	r2, r1, #31
 80134e0:	bf44      	itt	mi
 80134e2:	f041 0120 	orrmi.w	r1, r1, #32
 80134e6:	6021      	strmi	r1, [r4, #0]
 80134e8:	b91b      	cbnz	r3, 80134f2 <_printf_i+0x15e>
 80134ea:	6822      	ldr	r2, [r4, #0]
 80134ec:	f022 0220 	bic.w	r2, r2, #32
 80134f0:	6022      	str	r2, [r4, #0]
 80134f2:	2210      	movs	r2, #16
 80134f4:	e7b7      	b.n	8013466 <_printf_i+0xd2>
 80134f6:	064d      	lsls	r5, r1, #25
 80134f8:	bf48      	it	mi
 80134fa:	b29b      	uxthmi	r3, r3
 80134fc:	e7ef      	b.n	80134de <_printf_i+0x14a>
 80134fe:	4665      	mov	r5, ip
 8013500:	fbb3 f1f2 	udiv	r1, r3, r2
 8013504:	fb02 3311 	mls	r3, r2, r1, r3
 8013508:	5cc3      	ldrb	r3, [r0, r3]
 801350a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 801350e:	460b      	mov	r3, r1
 8013510:	2900      	cmp	r1, #0
 8013512:	d1f5      	bne.n	8013500 <_printf_i+0x16c>
 8013514:	e7b9      	b.n	801348a <_printf_i+0xf6>
 8013516:	6813      	ldr	r3, [r2, #0]
 8013518:	6825      	ldr	r5, [r4, #0]
 801351a:	6961      	ldr	r1, [r4, #20]
 801351c:	1d18      	adds	r0, r3, #4
 801351e:	6010      	str	r0, [r2, #0]
 8013520:	0628      	lsls	r0, r5, #24
 8013522:	681b      	ldr	r3, [r3, #0]
 8013524:	d501      	bpl.n	801352a <_printf_i+0x196>
 8013526:	6019      	str	r1, [r3, #0]
 8013528:	e002      	b.n	8013530 <_printf_i+0x19c>
 801352a:	066a      	lsls	r2, r5, #25
 801352c:	d5fb      	bpl.n	8013526 <_printf_i+0x192>
 801352e:	8019      	strh	r1, [r3, #0]
 8013530:	2300      	movs	r3, #0
 8013532:	6123      	str	r3, [r4, #16]
 8013534:	4665      	mov	r5, ip
 8013536:	e7b9      	b.n	80134ac <_printf_i+0x118>
 8013538:	6813      	ldr	r3, [r2, #0]
 801353a:	1d19      	adds	r1, r3, #4
 801353c:	6011      	str	r1, [r2, #0]
 801353e:	681d      	ldr	r5, [r3, #0]
 8013540:	6862      	ldr	r2, [r4, #4]
 8013542:	2100      	movs	r1, #0
 8013544:	4628      	mov	r0, r5
 8013546:	f7ec fe43 	bl	80001d0 <memchr>
 801354a:	b108      	cbz	r0, 8013550 <_printf_i+0x1bc>
 801354c:	1b40      	subs	r0, r0, r5
 801354e:	6060      	str	r0, [r4, #4]
 8013550:	6863      	ldr	r3, [r4, #4]
 8013552:	6123      	str	r3, [r4, #16]
 8013554:	2300      	movs	r3, #0
 8013556:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801355a:	e7a7      	b.n	80134ac <_printf_i+0x118>
 801355c:	6923      	ldr	r3, [r4, #16]
 801355e:	462a      	mov	r2, r5
 8013560:	4639      	mov	r1, r7
 8013562:	4630      	mov	r0, r6
 8013564:	47c0      	blx	r8
 8013566:	3001      	adds	r0, #1
 8013568:	d0aa      	beq.n	80134c0 <_printf_i+0x12c>
 801356a:	6823      	ldr	r3, [r4, #0]
 801356c:	079b      	lsls	r3, r3, #30
 801356e:	d413      	bmi.n	8013598 <_printf_i+0x204>
 8013570:	68e0      	ldr	r0, [r4, #12]
 8013572:	9b03      	ldr	r3, [sp, #12]
 8013574:	4298      	cmp	r0, r3
 8013576:	bfb8      	it	lt
 8013578:	4618      	movlt	r0, r3
 801357a:	e7a3      	b.n	80134c4 <_printf_i+0x130>
 801357c:	2301      	movs	r3, #1
 801357e:	464a      	mov	r2, r9
 8013580:	4639      	mov	r1, r7
 8013582:	4630      	mov	r0, r6
 8013584:	47c0      	blx	r8
 8013586:	3001      	adds	r0, #1
 8013588:	d09a      	beq.n	80134c0 <_printf_i+0x12c>
 801358a:	3501      	adds	r5, #1
 801358c:	68e3      	ldr	r3, [r4, #12]
 801358e:	9a03      	ldr	r2, [sp, #12]
 8013590:	1a9b      	subs	r3, r3, r2
 8013592:	42ab      	cmp	r3, r5
 8013594:	dcf2      	bgt.n	801357c <_printf_i+0x1e8>
 8013596:	e7eb      	b.n	8013570 <_printf_i+0x1dc>
 8013598:	2500      	movs	r5, #0
 801359a:	f104 0919 	add.w	r9, r4, #25
 801359e:	e7f5      	b.n	801358c <_printf_i+0x1f8>
 80135a0:	2b00      	cmp	r3, #0
 80135a2:	d1ac      	bne.n	80134fe <_printf_i+0x16a>
 80135a4:	7803      	ldrb	r3, [r0, #0]
 80135a6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80135aa:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80135ae:	e76c      	b.n	801348a <_printf_i+0xf6>
 80135b0:	08013f0d 	.word	0x08013f0d
 80135b4:	08013f1e 	.word	0x08013f1e

080135b8 <_sbrk_r>:
 80135b8:	b538      	push	{r3, r4, r5, lr}
 80135ba:	4c06      	ldr	r4, [pc, #24]	; (80135d4 <_sbrk_r+0x1c>)
 80135bc:	2300      	movs	r3, #0
 80135be:	4605      	mov	r5, r0
 80135c0:	4608      	mov	r0, r1
 80135c2:	6023      	str	r3, [r4, #0]
 80135c4:	f7fe fff2 	bl	80125ac <_sbrk>
 80135c8:	1c43      	adds	r3, r0, #1
 80135ca:	d102      	bne.n	80135d2 <_sbrk_r+0x1a>
 80135cc:	6823      	ldr	r3, [r4, #0]
 80135ce:	b103      	cbz	r3, 80135d2 <_sbrk_r+0x1a>
 80135d0:	602b      	str	r3, [r5, #0]
 80135d2:	bd38      	pop	{r3, r4, r5, pc}
 80135d4:	200015d8 	.word	0x200015d8

080135d8 <__sread>:
 80135d8:	b510      	push	{r4, lr}
 80135da:	460c      	mov	r4, r1
 80135dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80135e0:	f000 f896 	bl	8013710 <_read_r>
 80135e4:	2800      	cmp	r0, #0
 80135e6:	bfab      	itete	ge
 80135e8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80135ea:	89a3      	ldrhlt	r3, [r4, #12]
 80135ec:	181b      	addge	r3, r3, r0
 80135ee:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80135f2:	bfac      	ite	ge
 80135f4:	6563      	strge	r3, [r4, #84]	; 0x54
 80135f6:	81a3      	strhlt	r3, [r4, #12]
 80135f8:	bd10      	pop	{r4, pc}

080135fa <__swrite>:
 80135fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80135fe:	461f      	mov	r7, r3
 8013600:	898b      	ldrh	r3, [r1, #12]
 8013602:	05db      	lsls	r3, r3, #23
 8013604:	4605      	mov	r5, r0
 8013606:	460c      	mov	r4, r1
 8013608:	4616      	mov	r6, r2
 801360a:	d505      	bpl.n	8013618 <__swrite+0x1e>
 801360c:	2302      	movs	r3, #2
 801360e:	2200      	movs	r2, #0
 8013610:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013614:	f000 f868 	bl	80136e8 <_lseek_r>
 8013618:	89a3      	ldrh	r3, [r4, #12]
 801361a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801361e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8013622:	81a3      	strh	r3, [r4, #12]
 8013624:	4632      	mov	r2, r6
 8013626:	463b      	mov	r3, r7
 8013628:	4628      	mov	r0, r5
 801362a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801362e:	f000 b817 	b.w	8013660 <_write_r>

08013632 <__sseek>:
 8013632:	b510      	push	{r4, lr}
 8013634:	460c      	mov	r4, r1
 8013636:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801363a:	f000 f855 	bl	80136e8 <_lseek_r>
 801363e:	1c43      	adds	r3, r0, #1
 8013640:	89a3      	ldrh	r3, [r4, #12]
 8013642:	bf15      	itete	ne
 8013644:	6560      	strne	r0, [r4, #84]	; 0x54
 8013646:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801364a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801364e:	81a3      	strheq	r3, [r4, #12]
 8013650:	bf18      	it	ne
 8013652:	81a3      	strhne	r3, [r4, #12]
 8013654:	bd10      	pop	{r4, pc}

08013656 <__sclose>:
 8013656:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801365a:	f000 b813 	b.w	8013684 <_close_r>
	...

08013660 <_write_r>:
 8013660:	b538      	push	{r3, r4, r5, lr}
 8013662:	4c07      	ldr	r4, [pc, #28]	; (8013680 <_write_r+0x20>)
 8013664:	4605      	mov	r5, r0
 8013666:	4608      	mov	r0, r1
 8013668:	4611      	mov	r1, r2
 801366a:	2200      	movs	r2, #0
 801366c:	6022      	str	r2, [r4, #0]
 801366e:	461a      	mov	r2, r3
 8013670:	f7fe ff4b 	bl	801250a <_write>
 8013674:	1c43      	adds	r3, r0, #1
 8013676:	d102      	bne.n	801367e <_write_r+0x1e>
 8013678:	6823      	ldr	r3, [r4, #0]
 801367a:	b103      	cbz	r3, 801367e <_write_r+0x1e>
 801367c:	602b      	str	r3, [r5, #0]
 801367e:	bd38      	pop	{r3, r4, r5, pc}
 8013680:	200015d8 	.word	0x200015d8

08013684 <_close_r>:
 8013684:	b538      	push	{r3, r4, r5, lr}
 8013686:	4c06      	ldr	r4, [pc, #24]	; (80136a0 <_close_r+0x1c>)
 8013688:	2300      	movs	r3, #0
 801368a:	4605      	mov	r5, r0
 801368c:	4608      	mov	r0, r1
 801368e:	6023      	str	r3, [r4, #0]
 8013690:	f7fe ff57 	bl	8012542 <_close>
 8013694:	1c43      	adds	r3, r0, #1
 8013696:	d102      	bne.n	801369e <_close_r+0x1a>
 8013698:	6823      	ldr	r3, [r4, #0]
 801369a:	b103      	cbz	r3, 801369e <_close_r+0x1a>
 801369c:	602b      	str	r3, [r5, #0]
 801369e:	bd38      	pop	{r3, r4, r5, pc}
 80136a0:	200015d8 	.word	0x200015d8

080136a4 <_fstat_r>:
 80136a4:	b538      	push	{r3, r4, r5, lr}
 80136a6:	4c07      	ldr	r4, [pc, #28]	; (80136c4 <_fstat_r+0x20>)
 80136a8:	2300      	movs	r3, #0
 80136aa:	4605      	mov	r5, r0
 80136ac:	4608      	mov	r0, r1
 80136ae:	4611      	mov	r1, r2
 80136b0:	6023      	str	r3, [r4, #0]
 80136b2:	f7fe ff52 	bl	801255a <_fstat>
 80136b6:	1c43      	adds	r3, r0, #1
 80136b8:	d102      	bne.n	80136c0 <_fstat_r+0x1c>
 80136ba:	6823      	ldr	r3, [r4, #0]
 80136bc:	b103      	cbz	r3, 80136c0 <_fstat_r+0x1c>
 80136be:	602b      	str	r3, [r5, #0]
 80136c0:	bd38      	pop	{r3, r4, r5, pc}
 80136c2:	bf00      	nop
 80136c4:	200015d8 	.word	0x200015d8

080136c8 <_isatty_r>:
 80136c8:	b538      	push	{r3, r4, r5, lr}
 80136ca:	4c06      	ldr	r4, [pc, #24]	; (80136e4 <_isatty_r+0x1c>)
 80136cc:	2300      	movs	r3, #0
 80136ce:	4605      	mov	r5, r0
 80136d0:	4608      	mov	r0, r1
 80136d2:	6023      	str	r3, [r4, #0]
 80136d4:	f7fe ff51 	bl	801257a <_isatty>
 80136d8:	1c43      	adds	r3, r0, #1
 80136da:	d102      	bne.n	80136e2 <_isatty_r+0x1a>
 80136dc:	6823      	ldr	r3, [r4, #0]
 80136de:	b103      	cbz	r3, 80136e2 <_isatty_r+0x1a>
 80136e0:	602b      	str	r3, [r5, #0]
 80136e2:	bd38      	pop	{r3, r4, r5, pc}
 80136e4:	200015d8 	.word	0x200015d8

080136e8 <_lseek_r>:
 80136e8:	b538      	push	{r3, r4, r5, lr}
 80136ea:	4c07      	ldr	r4, [pc, #28]	; (8013708 <_lseek_r+0x20>)
 80136ec:	4605      	mov	r5, r0
 80136ee:	4608      	mov	r0, r1
 80136f0:	4611      	mov	r1, r2
 80136f2:	2200      	movs	r2, #0
 80136f4:	6022      	str	r2, [r4, #0]
 80136f6:	461a      	mov	r2, r3
 80136f8:	f7fe ff4a 	bl	8012590 <_lseek>
 80136fc:	1c43      	adds	r3, r0, #1
 80136fe:	d102      	bne.n	8013706 <_lseek_r+0x1e>
 8013700:	6823      	ldr	r3, [r4, #0]
 8013702:	b103      	cbz	r3, 8013706 <_lseek_r+0x1e>
 8013704:	602b      	str	r3, [r5, #0]
 8013706:	bd38      	pop	{r3, r4, r5, pc}
 8013708:	200015d8 	.word	0x200015d8

0801370c <__malloc_lock>:
 801370c:	4770      	bx	lr

0801370e <__malloc_unlock>:
 801370e:	4770      	bx	lr

08013710 <_read_r>:
 8013710:	b538      	push	{r3, r4, r5, lr}
 8013712:	4c07      	ldr	r4, [pc, #28]	; (8013730 <_read_r+0x20>)
 8013714:	4605      	mov	r5, r0
 8013716:	4608      	mov	r0, r1
 8013718:	4611      	mov	r1, r2
 801371a:	2200      	movs	r2, #0
 801371c:	6022      	str	r2, [r4, #0]
 801371e:	461a      	mov	r2, r3
 8013720:	f7fe fed6 	bl	80124d0 <_read>
 8013724:	1c43      	adds	r3, r0, #1
 8013726:	d102      	bne.n	801372e <_read_r+0x1e>
 8013728:	6823      	ldr	r3, [r4, #0]
 801372a:	b103      	cbz	r3, 801372e <_read_r+0x1e>
 801372c:	602b      	str	r3, [r5, #0]
 801372e:	bd38      	pop	{r3, r4, r5, pc}
 8013730:	200015d8 	.word	0x200015d8

08013734 <sqrt>:
 8013734:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013738:	ed2d 8b02 	vpush	{d8}
 801373c:	b08b      	sub	sp, #44	; 0x2c
 801373e:	ec55 4b10 	vmov	r4, r5, d0
 8013742:	f000 f851 	bl	80137e8 <__ieee754_sqrt>
 8013746:	4b26      	ldr	r3, [pc, #152]	; (80137e0 <sqrt+0xac>)
 8013748:	eeb0 8a40 	vmov.f32	s16, s0
 801374c:	eef0 8a60 	vmov.f32	s17, s1
 8013750:	f993 6000 	ldrsb.w	r6, [r3]
 8013754:	1c73      	adds	r3, r6, #1
 8013756:	d02a      	beq.n	80137ae <sqrt+0x7a>
 8013758:	4622      	mov	r2, r4
 801375a:	462b      	mov	r3, r5
 801375c:	4620      	mov	r0, r4
 801375e:	4629      	mov	r1, r5
 8013760:	f7ed f9dc 	bl	8000b1c <__aeabi_dcmpun>
 8013764:	4607      	mov	r7, r0
 8013766:	bb10      	cbnz	r0, 80137ae <sqrt+0x7a>
 8013768:	f04f 0800 	mov.w	r8, #0
 801376c:	f04f 0900 	mov.w	r9, #0
 8013770:	4642      	mov	r2, r8
 8013772:	464b      	mov	r3, r9
 8013774:	4620      	mov	r0, r4
 8013776:	4629      	mov	r1, r5
 8013778:	f7ed f9a8 	bl	8000acc <__aeabi_dcmplt>
 801377c:	b1b8      	cbz	r0, 80137ae <sqrt+0x7a>
 801377e:	2301      	movs	r3, #1
 8013780:	9300      	str	r3, [sp, #0]
 8013782:	4b18      	ldr	r3, [pc, #96]	; (80137e4 <sqrt+0xb0>)
 8013784:	9301      	str	r3, [sp, #4]
 8013786:	9708      	str	r7, [sp, #32]
 8013788:	e9cd 4504 	strd	r4, r5, [sp, #16]
 801378c:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8013790:	b9b6      	cbnz	r6, 80137c0 <sqrt+0x8c>
 8013792:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8013796:	4668      	mov	r0, sp
 8013798:	f000 f8d6 	bl	8013948 <matherr>
 801379c:	b1d0      	cbz	r0, 80137d4 <sqrt+0xa0>
 801379e:	9b08      	ldr	r3, [sp, #32]
 80137a0:	b11b      	cbz	r3, 80137aa <sqrt+0x76>
 80137a2:	f7fe ff8f 	bl	80126c4 <__errno>
 80137a6:	9b08      	ldr	r3, [sp, #32]
 80137a8:	6003      	str	r3, [r0, #0]
 80137aa:	ed9d 8b06 	vldr	d8, [sp, #24]
 80137ae:	eeb0 0a48 	vmov.f32	s0, s16
 80137b2:	eef0 0a68 	vmov.f32	s1, s17
 80137b6:	b00b      	add	sp, #44	; 0x2c
 80137b8:	ecbd 8b02 	vpop	{d8}
 80137bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80137c0:	4642      	mov	r2, r8
 80137c2:	464b      	mov	r3, r9
 80137c4:	4640      	mov	r0, r8
 80137c6:	4649      	mov	r1, r9
 80137c8:	f7ed f838 	bl	800083c <__aeabi_ddiv>
 80137cc:	2e02      	cmp	r6, #2
 80137ce:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80137d2:	d1e0      	bne.n	8013796 <sqrt+0x62>
 80137d4:	f7fe ff76 	bl	80126c4 <__errno>
 80137d8:	2321      	movs	r3, #33	; 0x21
 80137da:	6003      	str	r3, [r0, #0]
 80137dc:	e7df      	b.n	801379e <sqrt+0x6a>
 80137de:	bf00      	nop
 80137e0:	200000e8 	.word	0x200000e8
 80137e4:	08013f2f 	.word	0x08013f2f

080137e8 <__ieee754_sqrt>:
 80137e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80137ec:	4955      	ldr	r1, [pc, #340]	; (8013944 <__ieee754_sqrt+0x15c>)
 80137ee:	ec55 4b10 	vmov	r4, r5, d0
 80137f2:	43a9      	bics	r1, r5
 80137f4:	462b      	mov	r3, r5
 80137f6:	462a      	mov	r2, r5
 80137f8:	d112      	bne.n	8013820 <__ieee754_sqrt+0x38>
 80137fa:	ee10 2a10 	vmov	r2, s0
 80137fe:	ee10 0a10 	vmov	r0, s0
 8013802:	4629      	mov	r1, r5
 8013804:	f7ec fef0 	bl	80005e8 <__aeabi_dmul>
 8013808:	4602      	mov	r2, r0
 801380a:	460b      	mov	r3, r1
 801380c:	4620      	mov	r0, r4
 801380e:	4629      	mov	r1, r5
 8013810:	f7ec fd34 	bl	800027c <__adddf3>
 8013814:	4604      	mov	r4, r0
 8013816:	460d      	mov	r5, r1
 8013818:	ec45 4b10 	vmov	d0, r4, r5
 801381c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013820:	2d00      	cmp	r5, #0
 8013822:	ee10 0a10 	vmov	r0, s0
 8013826:	4621      	mov	r1, r4
 8013828:	dc0f      	bgt.n	801384a <__ieee754_sqrt+0x62>
 801382a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 801382e:	4330      	orrs	r0, r6
 8013830:	d0f2      	beq.n	8013818 <__ieee754_sqrt+0x30>
 8013832:	b155      	cbz	r5, 801384a <__ieee754_sqrt+0x62>
 8013834:	ee10 2a10 	vmov	r2, s0
 8013838:	4620      	mov	r0, r4
 801383a:	4629      	mov	r1, r5
 801383c:	f7ec fd1c 	bl	8000278 <__aeabi_dsub>
 8013840:	4602      	mov	r2, r0
 8013842:	460b      	mov	r3, r1
 8013844:	f7ec fffa 	bl	800083c <__aeabi_ddiv>
 8013848:	e7e4      	b.n	8013814 <__ieee754_sqrt+0x2c>
 801384a:	151b      	asrs	r3, r3, #20
 801384c:	d073      	beq.n	8013936 <__ieee754_sqrt+0x14e>
 801384e:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8013852:	07dd      	lsls	r5, r3, #31
 8013854:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8013858:	bf48      	it	mi
 801385a:	0fc8      	lsrmi	r0, r1, #31
 801385c:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8013860:	bf44      	itt	mi
 8013862:	0049      	lslmi	r1, r1, #1
 8013864:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 8013868:	2500      	movs	r5, #0
 801386a:	1058      	asrs	r0, r3, #1
 801386c:	0fcb      	lsrs	r3, r1, #31
 801386e:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 8013872:	0049      	lsls	r1, r1, #1
 8013874:	2316      	movs	r3, #22
 8013876:	462c      	mov	r4, r5
 8013878:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 801387c:	19a7      	adds	r7, r4, r6
 801387e:	4297      	cmp	r7, r2
 8013880:	bfde      	ittt	le
 8013882:	19bc      	addle	r4, r7, r6
 8013884:	1bd2      	suble	r2, r2, r7
 8013886:	19ad      	addle	r5, r5, r6
 8013888:	0fcf      	lsrs	r7, r1, #31
 801388a:	3b01      	subs	r3, #1
 801388c:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 8013890:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8013894:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8013898:	d1f0      	bne.n	801387c <__ieee754_sqrt+0x94>
 801389a:	f04f 0c20 	mov.w	ip, #32
 801389e:	469e      	mov	lr, r3
 80138a0:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 80138a4:	42a2      	cmp	r2, r4
 80138a6:	eb06 070e 	add.w	r7, r6, lr
 80138aa:	dc02      	bgt.n	80138b2 <__ieee754_sqrt+0xca>
 80138ac:	d112      	bne.n	80138d4 <__ieee754_sqrt+0xec>
 80138ae:	428f      	cmp	r7, r1
 80138b0:	d810      	bhi.n	80138d4 <__ieee754_sqrt+0xec>
 80138b2:	2f00      	cmp	r7, #0
 80138b4:	eb07 0e06 	add.w	lr, r7, r6
 80138b8:	da42      	bge.n	8013940 <__ieee754_sqrt+0x158>
 80138ba:	f1be 0f00 	cmp.w	lr, #0
 80138be:	db3f      	blt.n	8013940 <__ieee754_sqrt+0x158>
 80138c0:	f104 0801 	add.w	r8, r4, #1
 80138c4:	1b12      	subs	r2, r2, r4
 80138c6:	428f      	cmp	r7, r1
 80138c8:	bf88      	it	hi
 80138ca:	f102 32ff 	addhi.w	r2, r2, #4294967295
 80138ce:	1bc9      	subs	r1, r1, r7
 80138d0:	4433      	add	r3, r6
 80138d2:	4644      	mov	r4, r8
 80138d4:	0052      	lsls	r2, r2, #1
 80138d6:	f1bc 0c01 	subs.w	ip, ip, #1
 80138da:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 80138de:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80138e2:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80138e6:	d1dd      	bne.n	80138a4 <__ieee754_sqrt+0xbc>
 80138e8:	430a      	orrs	r2, r1
 80138ea:	d006      	beq.n	80138fa <__ieee754_sqrt+0x112>
 80138ec:	1c5c      	adds	r4, r3, #1
 80138ee:	bf13      	iteet	ne
 80138f0:	3301      	addne	r3, #1
 80138f2:	3501      	addeq	r5, #1
 80138f4:	4663      	moveq	r3, ip
 80138f6:	f023 0301 	bicne.w	r3, r3, #1
 80138fa:	106a      	asrs	r2, r5, #1
 80138fc:	085b      	lsrs	r3, r3, #1
 80138fe:	07e9      	lsls	r1, r5, #31
 8013900:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8013904:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8013908:	bf48      	it	mi
 801390a:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 801390e:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 8013912:	461c      	mov	r4, r3
 8013914:	e780      	b.n	8013818 <__ieee754_sqrt+0x30>
 8013916:	0aca      	lsrs	r2, r1, #11
 8013918:	3815      	subs	r0, #21
 801391a:	0549      	lsls	r1, r1, #21
 801391c:	2a00      	cmp	r2, #0
 801391e:	d0fa      	beq.n	8013916 <__ieee754_sqrt+0x12e>
 8013920:	02d6      	lsls	r6, r2, #11
 8013922:	d50a      	bpl.n	801393a <__ieee754_sqrt+0x152>
 8013924:	f1c3 0420 	rsb	r4, r3, #32
 8013928:	fa21 f404 	lsr.w	r4, r1, r4
 801392c:	1e5d      	subs	r5, r3, #1
 801392e:	4099      	lsls	r1, r3
 8013930:	4322      	orrs	r2, r4
 8013932:	1b43      	subs	r3, r0, r5
 8013934:	e78b      	b.n	801384e <__ieee754_sqrt+0x66>
 8013936:	4618      	mov	r0, r3
 8013938:	e7f0      	b.n	801391c <__ieee754_sqrt+0x134>
 801393a:	0052      	lsls	r2, r2, #1
 801393c:	3301      	adds	r3, #1
 801393e:	e7ef      	b.n	8013920 <__ieee754_sqrt+0x138>
 8013940:	46a0      	mov	r8, r4
 8013942:	e7bf      	b.n	80138c4 <__ieee754_sqrt+0xdc>
 8013944:	7ff00000 	.word	0x7ff00000

08013948 <matherr>:
 8013948:	2000      	movs	r0, #0
 801394a:	4770      	bx	lr

0801394c <_init>:
 801394c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801394e:	bf00      	nop
 8013950:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013952:	bc08      	pop	{r3}
 8013954:	469e      	mov	lr, r3
 8013956:	4770      	bx	lr

08013958 <_fini>:
 8013958:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801395a:	bf00      	nop
 801395c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801395e:	bc08      	pop	{r3}
 8013960:	469e      	mov	lr, r3
 8013962:	4770      	bx	lr
