
mouse2019.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000124c4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005b8  08012654  08012654  00022654  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012c0c  08012c0c  000300ec  2**0
                  CONTENTS
  4 .ARM          00000008  08012c0c  08012c0c  00022c0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012c14  08012c14  000300ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012c14  08012c14  00022c14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08012c18  08012c18  00022c18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000ec  20000000  08012c1c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000014f0  200000ec  08012d08  000300ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200015dc  08012d08  000315dc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000300ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016ddd  00000000  00000000  0003011c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000030ac  00000000  00000000  00046ef9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000013f8  00000000  00000000  00049fa8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000012a8  00000000  00000000  0004b3a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00022976  00000000  00000000  0004c648  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00010ac3  00000000  00000000  0006efbe  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c80c8  00000000  00000000  0007fa81  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00147b49  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005d5c  00000000  00000000  00147bc4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000ec 	.word	0x200000ec
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0801263c 	.word	0x0801263c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000f0 	.word	0x200000f0
 80001cc:	0801263c 	.word	0x0801263c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ae:	f1a4 0401 	sub.w	r4, r4, #1
 80003b2:	d1e9      	bne.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__gedf2>:
 8000a0c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a10:	e006      	b.n	8000a20 <__cmpdf2+0x4>
 8000a12:	bf00      	nop

08000a14 <__ledf2>:
 8000a14:	f04f 0c01 	mov.w	ip, #1
 8000a18:	e002      	b.n	8000a20 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__cmpdf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a36:	d01b      	beq.n	8000a70 <__cmpdf2+0x54>
 8000a38:	b001      	add	sp, #4
 8000a3a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a3e:	bf0c      	ite	eq
 8000a40:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a44:	ea91 0f03 	teqne	r1, r3
 8000a48:	bf02      	ittt	eq
 8000a4a:	ea90 0f02 	teqeq	r0, r2
 8000a4e:	2000      	moveq	r0, #0
 8000a50:	4770      	bxeq	lr
 8000a52:	f110 0f00 	cmn.w	r0, #0
 8000a56:	ea91 0f03 	teq	r1, r3
 8000a5a:	bf58      	it	pl
 8000a5c:	4299      	cmppl	r1, r3
 8000a5e:	bf08      	it	eq
 8000a60:	4290      	cmpeq	r0, r2
 8000a62:	bf2c      	ite	cs
 8000a64:	17d8      	asrcs	r0, r3, #31
 8000a66:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a6a:	f040 0001 	orr.w	r0, r0, #1
 8000a6e:	4770      	bx	lr
 8000a70:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a78:	d102      	bne.n	8000a80 <__cmpdf2+0x64>
 8000a7a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a7e:	d107      	bne.n	8000a90 <__cmpdf2+0x74>
 8000a80:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d1d6      	bne.n	8000a38 <__cmpdf2+0x1c>
 8000a8a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a8e:	d0d3      	beq.n	8000a38 <__cmpdf2+0x1c>
 8000a90:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop

08000a98 <__aeabi_cdrcmple>:
 8000a98:	4684      	mov	ip, r0
 8000a9a:	4610      	mov	r0, r2
 8000a9c:	4662      	mov	r2, ip
 8000a9e:	468c      	mov	ip, r1
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4663      	mov	r3, ip
 8000aa4:	e000      	b.n	8000aa8 <__aeabi_cdcmpeq>
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdcmpeq>:
 8000aa8:	b501      	push	{r0, lr}
 8000aaa:	f7ff ffb7 	bl	8000a1c <__cmpdf2>
 8000aae:	2800      	cmp	r0, #0
 8000ab0:	bf48      	it	mi
 8000ab2:	f110 0f00 	cmnmi.w	r0, #0
 8000ab6:	bd01      	pop	{r0, pc}

08000ab8 <__aeabi_dcmpeq>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff fff4 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ac0:	bf0c      	ite	eq
 8000ac2:	2001      	moveq	r0, #1
 8000ac4:	2000      	movne	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_dcmplt>:
 8000acc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad0:	f7ff ffea 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ad4:	bf34      	ite	cc
 8000ad6:	2001      	movcc	r0, #1
 8000ad8:	2000      	movcs	r0, #0
 8000ada:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ade:	bf00      	nop

08000ae0 <__aeabi_dcmple>:
 8000ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae4:	f7ff ffe0 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ae8:	bf94      	ite	ls
 8000aea:	2001      	movls	r0, #1
 8000aec:	2000      	movhi	r0, #0
 8000aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af2:	bf00      	nop

08000af4 <__aeabi_dcmpge>:
 8000af4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af8:	f7ff ffce 	bl	8000a98 <__aeabi_cdrcmple>
 8000afc:	bf94      	ite	ls
 8000afe:	2001      	movls	r0, #1
 8000b00:	2000      	movhi	r0, #0
 8000b02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b06:	bf00      	nop

08000b08 <__aeabi_dcmpgt>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff ffc4 	bl	8000a98 <__aeabi_cdrcmple>
 8000b10:	bf34      	ite	cc
 8000b12:	2001      	movcc	r0, #1
 8000b14:	2000      	movcs	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmpun>:
 8000b1c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b24:	d102      	bne.n	8000b2c <__aeabi_dcmpun+0x10>
 8000b26:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b2a:	d10a      	bne.n	8000b42 <__aeabi_dcmpun+0x26>
 8000b2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x20>
 8000b36:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b3a:	d102      	bne.n	8000b42 <__aeabi_dcmpun+0x26>
 8000b3c:	f04f 0000 	mov.w	r0, #0
 8000b40:	4770      	bx	lr
 8000b42:	f04f 0001 	mov.w	r0, #1
 8000b46:	4770      	bx	lr

08000b48 <__aeabi_d2iz>:
 8000b48:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b4c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b50:	d215      	bcs.n	8000b7e <__aeabi_d2iz+0x36>
 8000b52:	d511      	bpl.n	8000b78 <__aeabi_d2iz+0x30>
 8000b54:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b58:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b5c:	d912      	bls.n	8000b84 <__aeabi_d2iz+0x3c>
 8000b5e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b62:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b66:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b6a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b6e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	4770      	bx	lr
 8000b78:	f04f 0000 	mov.w	r0, #0
 8000b7c:	4770      	bx	lr
 8000b7e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b82:	d105      	bne.n	8000b90 <__aeabi_d2iz+0x48>
 8000b84:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b88:	bf08      	it	eq
 8000b8a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b8e:	4770      	bx	lr
 8000b90:	f04f 0000 	mov.w	r0, #0
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop

08000b98 <__aeabi_d2f>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ba0:	bf24      	itt	cs
 8000ba2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ba6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000baa:	d90d      	bls.n	8000bc8 <__aeabi_d2f+0x30>
 8000bac:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bb0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bb4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bb8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bbc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bc0:	bf08      	it	eq
 8000bc2:	f020 0001 	biceq.w	r0, r0, #1
 8000bc6:	4770      	bx	lr
 8000bc8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bcc:	d121      	bne.n	8000c12 <__aeabi_d2f+0x7a>
 8000bce:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bd2:	bfbc      	itt	lt
 8000bd4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	4770      	bxlt	lr
 8000bda:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bde:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000be2:	f1c2 0218 	rsb	r2, r2, #24
 8000be6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bea:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bee:	fa20 f002 	lsr.w	r0, r0, r2
 8000bf2:	bf18      	it	ne
 8000bf4:	f040 0001 	orrne.w	r0, r0, #1
 8000bf8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bfc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c00:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c04:	ea40 000c 	orr.w	r0, r0, ip
 8000c08:	fa23 f302 	lsr.w	r3, r3, r2
 8000c0c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c10:	e7cc      	b.n	8000bac <__aeabi_d2f+0x14>
 8000c12:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c16:	d107      	bne.n	8000c28 <__aeabi_d2f+0x90>
 8000c18:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c1c:	bf1e      	ittt	ne
 8000c1e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c22:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c26:	4770      	bxne	lr
 8000c28:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c2c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c30:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c34:	4770      	bx	lr
 8000c36:	bf00      	nop

08000c38 <__aeabi_uldivmod>:
 8000c38:	b953      	cbnz	r3, 8000c50 <__aeabi_uldivmod+0x18>
 8000c3a:	b94a      	cbnz	r2, 8000c50 <__aeabi_uldivmod+0x18>
 8000c3c:	2900      	cmp	r1, #0
 8000c3e:	bf08      	it	eq
 8000c40:	2800      	cmpeq	r0, #0
 8000c42:	bf1c      	itt	ne
 8000c44:	f04f 31ff 	movne.w	r1, #4294967295
 8000c48:	f04f 30ff 	movne.w	r0, #4294967295
 8000c4c:	f000 b972 	b.w	8000f34 <__aeabi_idiv0>
 8000c50:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c54:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c58:	f000 f806 	bl	8000c68 <__udivmoddi4>
 8000c5c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c60:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c64:	b004      	add	sp, #16
 8000c66:	4770      	bx	lr

08000c68 <__udivmoddi4>:
 8000c68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c6c:	9e08      	ldr	r6, [sp, #32]
 8000c6e:	4604      	mov	r4, r0
 8000c70:	4688      	mov	r8, r1
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d14b      	bne.n	8000d0e <__udivmoddi4+0xa6>
 8000c76:	428a      	cmp	r2, r1
 8000c78:	4615      	mov	r5, r2
 8000c7a:	d967      	bls.n	8000d4c <__udivmoddi4+0xe4>
 8000c7c:	fab2 f282 	clz	r2, r2
 8000c80:	b14a      	cbz	r2, 8000c96 <__udivmoddi4+0x2e>
 8000c82:	f1c2 0720 	rsb	r7, r2, #32
 8000c86:	fa01 f302 	lsl.w	r3, r1, r2
 8000c8a:	fa20 f707 	lsr.w	r7, r0, r7
 8000c8e:	4095      	lsls	r5, r2
 8000c90:	ea47 0803 	orr.w	r8, r7, r3
 8000c94:	4094      	lsls	r4, r2
 8000c96:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c9a:	0c23      	lsrs	r3, r4, #16
 8000c9c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000ca0:	fa1f fc85 	uxth.w	ip, r5
 8000ca4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000ca8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cac:	fb07 f10c 	mul.w	r1, r7, ip
 8000cb0:	4299      	cmp	r1, r3
 8000cb2:	d909      	bls.n	8000cc8 <__udivmoddi4+0x60>
 8000cb4:	18eb      	adds	r3, r5, r3
 8000cb6:	f107 30ff 	add.w	r0, r7, #4294967295
 8000cba:	f080 811b 	bcs.w	8000ef4 <__udivmoddi4+0x28c>
 8000cbe:	4299      	cmp	r1, r3
 8000cc0:	f240 8118 	bls.w	8000ef4 <__udivmoddi4+0x28c>
 8000cc4:	3f02      	subs	r7, #2
 8000cc6:	442b      	add	r3, r5
 8000cc8:	1a5b      	subs	r3, r3, r1
 8000cca:	b2a4      	uxth	r4, r4
 8000ccc:	fbb3 f0fe 	udiv	r0, r3, lr
 8000cd0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000cd4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cd8:	fb00 fc0c 	mul.w	ip, r0, ip
 8000cdc:	45a4      	cmp	ip, r4
 8000cde:	d909      	bls.n	8000cf4 <__udivmoddi4+0x8c>
 8000ce0:	192c      	adds	r4, r5, r4
 8000ce2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ce6:	f080 8107 	bcs.w	8000ef8 <__udivmoddi4+0x290>
 8000cea:	45a4      	cmp	ip, r4
 8000cec:	f240 8104 	bls.w	8000ef8 <__udivmoddi4+0x290>
 8000cf0:	3802      	subs	r0, #2
 8000cf2:	442c      	add	r4, r5
 8000cf4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000cf8:	eba4 040c 	sub.w	r4, r4, ip
 8000cfc:	2700      	movs	r7, #0
 8000cfe:	b11e      	cbz	r6, 8000d08 <__udivmoddi4+0xa0>
 8000d00:	40d4      	lsrs	r4, r2
 8000d02:	2300      	movs	r3, #0
 8000d04:	e9c6 4300 	strd	r4, r3, [r6]
 8000d08:	4639      	mov	r1, r7
 8000d0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d0e:	428b      	cmp	r3, r1
 8000d10:	d909      	bls.n	8000d26 <__udivmoddi4+0xbe>
 8000d12:	2e00      	cmp	r6, #0
 8000d14:	f000 80eb 	beq.w	8000eee <__udivmoddi4+0x286>
 8000d18:	2700      	movs	r7, #0
 8000d1a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d1e:	4638      	mov	r0, r7
 8000d20:	4639      	mov	r1, r7
 8000d22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d26:	fab3 f783 	clz	r7, r3
 8000d2a:	2f00      	cmp	r7, #0
 8000d2c:	d147      	bne.n	8000dbe <__udivmoddi4+0x156>
 8000d2e:	428b      	cmp	r3, r1
 8000d30:	d302      	bcc.n	8000d38 <__udivmoddi4+0xd0>
 8000d32:	4282      	cmp	r2, r0
 8000d34:	f200 80fa 	bhi.w	8000f2c <__udivmoddi4+0x2c4>
 8000d38:	1a84      	subs	r4, r0, r2
 8000d3a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d3e:	2001      	movs	r0, #1
 8000d40:	4698      	mov	r8, r3
 8000d42:	2e00      	cmp	r6, #0
 8000d44:	d0e0      	beq.n	8000d08 <__udivmoddi4+0xa0>
 8000d46:	e9c6 4800 	strd	r4, r8, [r6]
 8000d4a:	e7dd      	b.n	8000d08 <__udivmoddi4+0xa0>
 8000d4c:	b902      	cbnz	r2, 8000d50 <__udivmoddi4+0xe8>
 8000d4e:	deff      	udf	#255	; 0xff
 8000d50:	fab2 f282 	clz	r2, r2
 8000d54:	2a00      	cmp	r2, #0
 8000d56:	f040 808f 	bne.w	8000e78 <__udivmoddi4+0x210>
 8000d5a:	1b49      	subs	r1, r1, r5
 8000d5c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d60:	fa1f f885 	uxth.w	r8, r5
 8000d64:	2701      	movs	r7, #1
 8000d66:	fbb1 fcfe 	udiv	ip, r1, lr
 8000d6a:	0c23      	lsrs	r3, r4, #16
 8000d6c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000d70:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d74:	fb08 f10c 	mul.w	r1, r8, ip
 8000d78:	4299      	cmp	r1, r3
 8000d7a:	d907      	bls.n	8000d8c <__udivmoddi4+0x124>
 8000d7c:	18eb      	adds	r3, r5, r3
 8000d7e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d82:	d202      	bcs.n	8000d8a <__udivmoddi4+0x122>
 8000d84:	4299      	cmp	r1, r3
 8000d86:	f200 80cd 	bhi.w	8000f24 <__udivmoddi4+0x2bc>
 8000d8a:	4684      	mov	ip, r0
 8000d8c:	1a59      	subs	r1, r3, r1
 8000d8e:	b2a3      	uxth	r3, r4
 8000d90:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d94:	fb0e 1410 	mls	r4, lr, r0, r1
 8000d98:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d9c:	fb08 f800 	mul.w	r8, r8, r0
 8000da0:	45a0      	cmp	r8, r4
 8000da2:	d907      	bls.n	8000db4 <__udivmoddi4+0x14c>
 8000da4:	192c      	adds	r4, r5, r4
 8000da6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000daa:	d202      	bcs.n	8000db2 <__udivmoddi4+0x14a>
 8000dac:	45a0      	cmp	r8, r4
 8000dae:	f200 80b6 	bhi.w	8000f1e <__udivmoddi4+0x2b6>
 8000db2:	4618      	mov	r0, r3
 8000db4:	eba4 0408 	sub.w	r4, r4, r8
 8000db8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000dbc:	e79f      	b.n	8000cfe <__udivmoddi4+0x96>
 8000dbe:	f1c7 0c20 	rsb	ip, r7, #32
 8000dc2:	40bb      	lsls	r3, r7
 8000dc4:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000dc8:	ea4e 0e03 	orr.w	lr, lr, r3
 8000dcc:	fa01 f407 	lsl.w	r4, r1, r7
 8000dd0:	fa20 f50c 	lsr.w	r5, r0, ip
 8000dd4:	fa21 f30c 	lsr.w	r3, r1, ip
 8000dd8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000ddc:	4325      	orrs	r5, r4
 8000dde:	fbb3 f9f8 	udiv	r9, r3, r8
 8000de2:	0c2c      	lsrs	r4, r5, #16
 8000de4:	fb08 3319 	mls	r3, r8, r9, r3
 8000de8:	fa1f fa8e 	uxth.w	sl, lr
 8000dec:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000df0:	fb09 f40a 	mul.w	r4, r9, sl
 8000df4:	429c      	cmp	r4, r3
 8000df6:	fa02 f207 	lsl.w	r2, r2, r7
 8000dfa:	fa00 f107 	lsl.w	r1, r0, r7
 8000dfe:	d90b      	bls.n	8000e18 <__udivmoddi4+0x1b0>
 8000e00:	eb1e 0303 	adds.w	r3, lr, r3
 8000e04:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e08:	f080 8087 	bcs.w	8000f1a <__udivmoddi4+0x2b2>
 8000e0c:	429c      	cmp	r4, r3
 8000e0e:	f240 8084 	bls.w	8000f1a <__udivmoddi4+0x2b2>
 8000e12:	f1a9 0902 	sub.w	r9, r9, #2
 8000e16:	4473      	add	r3, lr
 8000e18:	1b1b      	subs	r3, r3, r4
 8000e1a:	b2ad      	uxth	r5, r5
 8000e1c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e20:	fb08 3310 	mls	r3, r8, r0, r3
 8000e24:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e28:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e2c:	45a2      	cmp	sl, r4
 8000e2e:	d908      	bls.n	8000e42 <__udivmoddi4+0x1da>
 8000e30:	eb1e 0404 	adds.w	r4, lr, r4
 8000e34:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e38:	d26b      	bcs.n	8000f12 <__udivmoddi4+0x2aa>
 8000e3a:	45a2      	cmp	sl, r4
 8000e3c:	d969      	bls.n	8000f12 <__udivmoddi4+0x2aa>
 8000e3e:	3802      	subs	r0, #2
 8000e40:	4474      	add	r4, lr
 8000e42:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e46:	fba0 8902 	umull	r8, r9, r0, r2
 8000e4a:	eba4 040a 	sub.w	r4, r4, sl
 8000e4e:	454c      	cmp	r4, r9
 8000e50:	46c2      	mov	sl, r8
 8000e52:	464b      	mov	r3, r9
 8000e54:	d354      	bcc.n	8000f00 <__udivmoddi4+0x298>
 8000e56:	d051      	beq.n	8000efc <__udivmoddi4+0x294>
 8000e58:	2e00      	cmp	r6, #0
 8000e5a:	d069      	beq.n	8000f30 <__udivmoddi4+0x2c8>
 8000e5c:	ebb1 050a 	subs.w	r5, r1, sl
 8000e60:	eb64 0403 	sbc.w	r4, r4, r3
 8000e64:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000e68:	40fd      	lsrs	r5, r7
 8000e6a:	40fc      	lsrs	r4, r7
 8000e6c:	ea4c 0505 	orr.w	r5, ip, r5
 8000e70:	e9c6 5400 	strd	r5, r4, [r6]
 8000e74:	2700      	movs	r7, #0
 8000e76:	e747      	b.n	8000d08 <__udivmoddi4+0xa0>
 8000e78:	f1c2 0320 	rsb	r3, r2, #32
 8000e7c:	fa20 f703 	lsr.w	r7, r0, r3
 8000e80:	4095      	lsls	r5, r2
 8000e82:	fa01 f002 	lsl.w	r0, r1, r2
 8000e86:	fa21 f303 	lsr.w	r3, r1, r3
 8000e8a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e8e:	4338      	orrs	r0, r7
 8000e90:	0c01      	lsrs	r1, r0, #16
 8000e92:	fbb3 f7fe 	udiv	r7, r3, lr
 8000e96:	fa1f f885 	uxth.w	r8, r5
 8000e9a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000e9e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ea2:	fb07 f308 	mul.w	r3, r7, r8
 8000ea6:	428b      	cmp	r3, r1
 8000ea8:	fa04 f402 	lsl.w	r4, r4, r2
 8000eac:	d907      	bls.n	8000ebe <__udivmoddi4+0x256>
 8000eae:	1869      	adds	r1, r5, r1
 8000eb0:	f107 3cff 	add.w	ip, r7, #4294967295
 8000eb4:	d22f      	bcs.n	8000f16 <__udivmoddi4+0x2ae>
 8000eb6:	428b      	cmp	r3, r1
 8000eb8:	d92d      	bls.n	8000f16 <__udivmoddi4+0x2ae>
 8000eba:	3f02      	subs	r7, #2
 8000ebc:	4429      	add	r1, r5
 8000ebe:	1acb      	subs	r3, r1, r3
 8000ec0:	b281      	uxth	r1, r0
 8000ec2:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ec6:	fb0e 3310 	mls	r3, lr, r0, r3
 8000eca:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ece:	fb00 f308 	mul.w	r3, r0, r8
 8000ed2:	428b      	cmp	r3, r1
 8000ed4:	d907      	bls.n	8000ee6 <__udivmoddi4+0x27e>
 8000ed6:	1869      	adds	r1, r5, r1
 8000ed8:	f100 3cff 	add.w	ip, r0, #4294967295
 8000edc:	d217      	bcs.n	8000f0e <__udivmoddi4+0x2a6>
 8000ede:	428b      	cmp	r3, r1
 8000ee0:	d915      	bls.n	8000f0e <__udivmoddi4+0x2a6>
 8000ee2:	3802      	subs	r0, #2
 8000ee4:	4429      	add	r1, r5
 8000ee6:	1ac9      	subs	r1, r1, r3
 8000ee8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000eec:	e73b      	b.n	8000d66 <__udivmoddi4+0xfe>
 8000eee:	4637      	mov	r7, r6
 8000ef0:	4630      	mov	r0, r6
 8000ef2:	e709      	b.n	8000d08 <__udivmoddi4+0xa0>
 8000ef4:	4607      	mov	r7, r0
 8000ef6:	e6e7      	b.n	8000cc8 <__udivmoddi4+0x60>
 8000ef8:	4618      	mov	r0, r3
 8000efa:	e6fb      	b.n	8000cf4 <__udivmoddi4+0x8c>
 8000efc:	4541      	cmp	r1, r8
 8000efe:	d2ab      	bcs.n	8000e58 <__udivmoddi4+0x1f0>
 8000f00:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f04:	eb69 020e 	sbc.w	r2, r9, lr
 8000f08:	3801      	subs	r0, #1
 8000f0a:	4613      	mov	r3, r2
 8000f0c:	e7a4      	b.n	8000e58 <__udivmoddi4+0x1f0>
 8000f0e:	4660      	mov	r0, ip
 8000f10:	e7e9      	b.n	8000ee6 <__udivmoddi4+0x27e>
 8000f12:	4618      	mov	r0, r3
 8000f14:	e795      	b.n	8000e42 <__udivmoddi4+0x1da>
 8000f16:	4667      	mov	r7, ip
 8000f18:	e7d1      	b.n	8000ebe <__udivmoddi4+0x256>
 8000f1a:	4681      	mov	r9, r0
 8000f1c:	e77c      	b.n	8000e18 <__udivmoddi4+0x1b0>
 8000f1e:	3802      	subs	r0, #2
 8000f20:	442c      	add	r4, r5
 8000f22:	e747      	b.n	8000db4 <__udivmoddi4+0x14c>
 8000f24:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f28:	442b      	add	r3, r5
 8000f2a:	e72f      	b.n	8000d8c <__udivmoddi4+0x124>
 8000f2c:	4638      	mov	r0, r7
 8000f2e:	e708      	b.n	8000d42 <__udivmoddi4+0xda>
 8000f30:	4637      	mov	r7, r6
 8000f32:	e6e9      	b.n	8000d08 <__udivmoddi4+0xa0>

08000f34 <__aeabi_idiv0>:
 8000f34:	4770      	bx	lr
 8000f36:	bf00      	nop

08000f38 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f3c:	4b0e      	ldr	r3, [pc, #56]	; (8000f78 <HAL_Init+0x40>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	4a0d      	ldr	r2, [pc, #52]	; (8000f78 <HAL_Init+0x40>)
 8000f42:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f46:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f48:	4b0b      	ldr	r3, [pc, #44]	; (8000f78 <HAL_Init+0x40>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	4a0a      	ldr	r2, [pc, #40]	; (8000f78 <HAL_Init+0x40>)
 8000f4e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f52:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f54:	4b08      	ldr	r3, [pc, #32]	; (8000f78 <HAL_Init+0x40>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	4a07      	ldr	r2, [pc, #28]	; (8000f78 <HAL_Init+0x40>)
 8000f5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f5e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f60:	2003      	movs	r0, #3
 8000f62:	f000 fd07 	bl	8001974 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f66:	2000      	movs	r0, #0
 8000f68:	f000 f808 	bl	8000f7c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f6c:	f00f fea6 	bl	8010cbc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f70:	2300      	movs	r3, #0
}
 8000f72:	4618      	mov	r0, r3
 8000f74:	bd80      	pop	{r7, pc}
 8000f76:	bf00      	nop
 8000f78:	40023c00 	.word	0x40023c00

08000f7c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b082      	sub	sp, #8
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f84:	4b12      	ldr	r3, [pc, #72]	; (8000fd0 <HAL_InitTick+0x54>)
 8000f86:	681a      	ldr	r2, [r3, #0]
 8000f88:	4b12      	ldr	r3, [pc, #72]	; (8000fd4 <HAL_InitTick+0x58>)
 8000f8a:	781b      	ldrb	r3, [r3, #0]
 8000f8c:	4619      	mov	r1, r3
 8000f8e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f92:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f96:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	f000 fd1f 	bl	80019de <HAL_SYSTICK_Config>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d001      	beq.n	8000faa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	e00e      	b.n	8000fc8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	2b0f      	cmp	r3, #15
 8000fae:	d80a      	bhi.n	8000fc6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	6879      	ldr	r1, [r7, #4]
 8000fb4:	f04f 30ff 	mov.w	r0, #4294967295
 8000fb8:	f000 fce7 	bl	800198a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fbc:	4a06      	ldr	r2, [pc, #24]	; (8000fd8 <HAL_InitTick+0x5c>)
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	e000      	b.n	8000fc8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000fc6:	2301      	movs	r3, #1
}
 8000fc8:	4618      	mov	r0, r3
 8000fca:	3708      	adds	r7, #8
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd80      	pop	{r7, pc}
 8000fd0:	20000080 	.word	0x20000080
 8000fd4:	20000004 	.word	0x20000004
 8000fd8:	20000000 	.word	0x20000000

08000fdc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fe0:	4b06      	ldr	r3, [pc, #24]	; (8000ffc <HAL_IncTick+0x20>)
 8000fe2:	781b      	ldrb	r3, [r3, #0]
 8000fe4:	461a      	mov	r2, r3
 8000fe6:	4b06      	ldr	r3, [pc, #24]	; (8001000 <HAL_IncTick+0x24>)
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	4413      	add	r3, r2
 8000fec:	4a04      	ldr	r2, [pc, #16]	; (8001000 <HAL_IncTick+0x24>)
 8000fee:	6013      	str	r3, [r2, #0]
}
 8000ff0:	bf00      	nop
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff8:	4770      	bx	lr
 8000ffa:	bf00      	nop
 8000ffc:	20000004 	.word	0x20000004
 8001000:	20000120 	.word	0x20000120

08001004 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001004:	b480      	push	{r7}
 8001006:	af00      	add	r7, sp, #0
  return uwTick;
 8001008:	4b03      	ldr	r3, [pc, #12]	; (8001018 <HAL_GetTick+0x14>)
 800100a:	681b      	ldr	r3, [r3, #0]
}
 800100c:	4618      	mov	r0, r3
 800100e:	46bd      	mov	sp, r7
 8001010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop
 8001018:	20000120 	.word	0x20000120

0800101c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b084      	sub	sp, #16
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001024:	f7ff ffee 	bl	8001004 <HAL_GetTick>
 8001028:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001034:	d005      	beq.n	8001042 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001036:	4b09      	ldr	r3, [pc, #36]	; (800105c <HAL_Delay+0x40>)
 8001038:	781b      	ldrb	r3, [r3, #0]
 800103a:	461a      	mov	r2, r3
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	4413      	add	r3, r2
 8001040:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001042:	bf00      	nop
 8001044:	f7ff ffde 	bl	8001004 <HAL_GetTick>
 8001048:	4602      	mov	r2, r0
 800104a:	68bb      	ldr	r3, [r7, #8]
 800104c:	1ad3      	subs	r3, r2, r3
 800104e:	68fa      	ldr	r2, [r7, #12]
 8001050:	429a      	cmp	r2, r3
 8001052:	d8f7      	bhi.n	8001044 <HAL_Delay+0x28>
  {
  }
}
 8001054:	bf00      	nop
 8001056:	3710      	adds	r7, #16
 8001058:	46bd      	mov	sp, r7
 800105a:	bd80      	pop	{r7, pc}
 800105c:	20000004 	.word	0x20000004

08001060 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b084      	sub	sp, #16
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001068:	2300      	movs	r3, #0
 800106a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	2b00      	cmp	r3, #0
 8001070:	d101      	bne.n	8001076 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001072:	2301      	movs	r3, #1
 8001074:	e033      	b.n	80010de <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800107a:	2b00      	cmp	r3, #0
 800107c:	d109      	bne.n	8001092 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800107e:	6878      	ldr	r0, [r7, #4]
 8001080:	f00f fe44 	bl	8010d0c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	2200      	movs	r2, #0
 8001088:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	2200      	movs	r2, #0
 800108e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001096:	f003 0310 	and.w	r3, r3, #16
 800109a:	2b00      	cmp	r3, #0
 800109c:	d118      	bne.n	80010d0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010a2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80010a6:	f023 0302 	bic.w	r3, r3, #2
 80010aa:	f043 0202 	orr.w	r2, r3, #2
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80010b2:	6878      	ldr	r0, [r7, #4]
 80010b4:	f000 fa92 	bl	80015dc <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	2200      	movs	r2, #0
 80010bc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010c2:	f023 0303 	bic.w	r3, r3, #3
 80010c6:	f043 0201 	orr.w	r2, r3, #1
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	641a      	str	r2, [r3, #64]	; 0x40
 80010ce:	e001      	b.n	80010d4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80010d0:	2301      	movs	r3, #1
 80010d2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	2200      	movs	r2, #0
 80010d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80010dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80010de:	4618      	mov	r0, r3
 80010e0:	3710      	adds	r7, #16
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}
	...

080010e8 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80010e8:	b480      	push	{r7}
 80010ea:	b085      	sub	sp, #20
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80010f0:	2300      	movs	r3, #0
 80010f2:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80010fa:	2b01      	cmp	r3, #1
 80010fc:	d101      	bne.n	8001102 <HAL_ADC_Start+0x1a>
 80010fe:	2302      	movs	r3, #2
 8001100:	e0a5      	b.n	800124e <HAL_ADC_Start+0x166>
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	2201      	movs	r2, #1
 8001106:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	689b      	ldr	r3, [r3, #8]
 8001110:	f003 0301 	and.w	r3, r3, #1
 8001114:	2b01      	cmp	r3, #1
 8001116:	d018      	beq.n	800114a <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	689a      	ldr	r2, [r3, #8]
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	f042 0201 	orr.w	r2, r2, #1
 8001126:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001128:	4b4c      	ldr	r3, [pc, #304]	; (800125c <HAL_ADC_Start+0x174>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	4a4c      	ldr	r2, [pc, #304]	; (8001260 <HAL_ADC_Start+0x178>)
 800112e:	fba2 2303 	umull	r2, r3, r2, r3
 8001132:	0c9a      	lsrs	r2, r3, #18
 8001134:	4613      	mov	r3, r2
 8001136:	005b      	lsls	r3, r3, #1
 8001138:	4413      	add	r3, r2
 800113a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 800113c:	e002      	b.n	8001144 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800113e:	68bb      	ldr	r3, [r7, #8]
 8001140:	3b01      	subs	r3, #1
 8001142:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001144:	68bb      	ldr	r3, [r7, #8]
 8001146:	2b00      	cmp	r3, #0
 8001148:	d1f9      	bne.n	800113e <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	689b      	ldr	r3, [r3, #8]
 8001150:	f003 0301 	and.w	r3, r3, #1
 8001154:	2b01      	cmp	r3, #1
 8001156:	d179      	bne.n	800124c <HAL_ADC_Start+0x164>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800115c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001160:	f023 0301 	bic.w	r3, r3, #1
 8001164:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	685b      	ldr	r3, [r3, #4]
 8001172:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001176:	2b00      	cmp	r3, #0
 8001178:	d007      	beq.n	800118a <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800117e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001182:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800118e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001192:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001196:	d106      	bne.n	80011a6 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800119c:	f023 0206 	bic.w	r2, r3, #6
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	645a      	str	r2, [r3, #68]	; 0x44
 80011a4:	e002      	b.n	80011ac <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	2200      	movs	r2, #0
 80011aa:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	2200      	movs	r2, #0
 80011b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80011b4:	4b2b      	ldr	r3, [pc, #172]	; (8001264 <HAL_ADC_Start+0x17c>)
 80011b6:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80011c0:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	685b      	ldr	r3, [r3, #4]
 80011c6:	f003 031f 	and.w	r3, r3, #31
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d12a      	bne.n	8001224 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	4a25      	ldr	r2, [pc, #148]	; (8001268 <HAL_ADC_Start+0x180>)
 80011d4:	4293      	cmp	r3, r2
 80011d6:	d015      	beq.n	8001204 <HAL_ADC_Start+0x11c>
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	4a23      	ldr	r2, [pc, #140]	; (800126c <HAL_ADC_Start+0x184>)
 80011de:	4293      	cmp	r3, r2
 80011e0:	d105      	bne.n	80011ee <HAL_ADC_Start+0x106>
 80011e2:	4b20      	ldr	r3, [pc, #128]	; (8001264 <HAL_ADC_Start+0x17c>)
 80011e4:	685b      	ldr	r3, [r3, #4]
 80011e6:	f003 031f 	and.w	r3, r3, #31
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d00a      	beq.n	8001204 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	4a1f      	ldr	r2, [pc, #124]	; (8001270 <HAL_ADC_Start+0x188>)
 80011f4:	4293      	cmp	r3, r2
 80011f6:	d129      	bne.n	800124c <HAL_ADC_Start+0x164>
 80011f8:	4b1a      	ldr	r3, [pc, #104]	; (8001264 <HAL_ADC_Start+0x17c>)
 80011fa:	685b      	ldr	r3, [r3, #4]
 80011fc:	f003 031f 	and.w	r3, r3, #31
 8001200:	2b0f      	cmp	r3, #15
 8001202:	d823      	bhi.n	800124c <HAL_ADC_Start+0x164>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	689b      	ldr	r3, [r3, #8]
 800120a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800120e:	2b00      	cmp	r3, #0
 8001210:	d11c      	bne.n	800124c <HAL_ADC_Start+0x164>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	689a      	ldr	r2, [r3, #8]
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001220:	609a      	str	r2, [r3, #8]
 8001222:	e013      	b.n	800124c <HAL_ADC_Start+0x164>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	4a0f      	ldr	r2, [pc, #60]	; (8001268 <HAL_ADC_Start+0x180>)
 800122a:	4293      	cmp	r3, r2
 800122c:	d10e      	bne.n	800124c <HAL_ADC_Start+0x164>
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	689b      	ldr	r3, [r3, #8]
 8001234:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001238:	2b00      	cmp	r3, #0
 800123a:	d107      	bne.n	800124c <HAL_ADC_Start+0x164>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	689a      	ldr	r2, [r3, #8]
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800124a:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 800124c:	2300      	movs	r3, #0
}
 800124e:	4618      	mov	r0, r3
 8001250:	3714      	adds	r7, #20
 8001252:	46bd      	mov	sp, r7
 8001254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001258:	4770      	bx	lr
 800125a:	bf00      	nop
 800125c:	20000080 	.word	0x20000080
 8001260:	431bde83 	.word	0x431bde83
 8001264:	40012300 	.word	0x40012300
 8001268:	40012000 	.word	0x40012000
 800126c:	40012100 	.word	0x40012100
 8001270:	40012200 	.word	0x40012200

08001274 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b084      	sub	sp, #16
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
 800127c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800127e:	2300      	movs	r3, #0
 8001280:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	689b      	ldr	r3, [r3, #8]
 8001288:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800128c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001290:	d113      	bne.n	80012ba <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	689b      	ldr	r3, [r3, #8]
 8001298:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800129c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80012a0:	d10b      	bne.n	80012ba <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012a6:	f043 0220 	orr.w	r2, r3, #32
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	2200      	movs	r2, #0
 80012b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 80012b6:	2301      	movs	r3, #1
 80012b8:	e05c      	b.n	8001374 <HAL_ADC_PollForConversion+0x100>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 80012ba:	f7ff fea3 	bl	8001004 <HAL_GetTick>
 80012be:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80012c0:	e01a      	b.n	80012f8 <HAL_ADC_PollForConversion+0x84>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80012c2:	683b      	ldr	r3, [r7, #0]
 80012c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012c8:	d016      	beq.n	80012f8 <HAL_ADC_PollForConversion+0x84>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d007      	beq.n	80012e0 <HAL_ADC_PollForConversion+0x6c>
 80012d0:	f7ff fe98 	bl	8001004 <HAL_GetTick>
 80012d4:	4602      	mov	r2, r0
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	1ad3      	subs	r3, r2, r3
 80012da:	683a      	ldr	r2, [r7, #0]
 80012dc:	429a      	cmp	r2, r3
 80012de:	d20b      	bcs.n	80012f8 <HAL_ADC_PollForConversion+0x84>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012e4:	f043 0204 	orr.w	r2, r3, #4
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	2200      	movs	r2, #0
 80012f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 80012f4:	2303      	movs	r3, #3
 80012f6:	e03d      	b.n	8001374 <HAL_ADC_PollForConversion+0x100>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	f003 0302 	and.w	r3, r3, #2
 8001302:	2b02      	cmp	r3, #2
 8001304:	d1dd      	bne.n	80012c2 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f06f 0212 	mvn.w	r2, #18
 800130e:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001314:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	689b      	ldr	r3, [r3, #8]
 8001322:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001326:	2b00      	cmp	r3, #0
 8001328:	d123      	bne.n	8001372 <HAL_ADC_PollForConversion+0xfe>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800132e:	2b00      	cmp	r3, #0
 8001330:	d11f      	bne.n	8001372 <HAL_ADC_PollForConversion+0xfe>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001338:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800133c:	2b00      	cmp	r3, #0
 800133e:	d006      	beq.n	800134e <HAL_ADC_PollForConversion+0xda>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	689b      	ldr	r3, [r3, #8]
 8001346:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800134a:	2b00      	cmp	r3, #0
 800134c:	d111      	bne.n	8001372 <HAL_ADC_PollForConversion+0xfe>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001352:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800135e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001362:	2b00      	cmp	r3, #0
 8001364:	d105      	bne.n	8001372 <HAL_ADC_PollForConversion+0xfe>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800136a:	f043 0201 	orr.w	r2, r3, #1
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001372:	2300      	movs	r3, #0
}
 8001374:	4618      	mov	r0, r3
 8001376:	3710      	adds	r7, #16
 8001378:	46bd      	mov	sp, r7
 800137a:	bd80      	pop	{r7, pc}

0800137c <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 800137c:	b480      	push	{r7}
 800137e:	b083      	sub	sp, #12
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800138a:	4618      	mov	r0, r3
 800138c:	370c      	adds	r7, #12
 800138e:	46bd      	mov	sp, r7
 8001390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001394:	4770      	bx	lr
	...

08001398 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001398:	b480      	push	{r7}
 800139a:	b085      	sub	sp, #20
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
 80013a0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80013a2:	2300      	movs	r3, #0
 80013a4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80013ac:	2b01      	cmp	r3, #1
 80013ae:	d101      	bne.n	80013b4 <HAL_ADC_ConfigChannel+0x1c>
 80013b0:	2302      	movs	r3, #2
 80013b2:	e105      	b.n	80015c0 <HAL_ADC_ConfigChannel+0x228>
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	2201      	movs	r2, #1
 80013b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	2b09      	cmp	r3, #9
 80013c2:	d925      	bls.n	8001410 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	68d9      	ldr	r1, [r3, #12]
 80013ca:	683b      	ldr	r3, [r7, #0]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	b29b      	uxth	r3, r3
 80013d0:	461a      	mov	r2, r3
 80013d2:	4613      	mov	r3, r2
 80013d4:	005b      	lsls	r3, r3, #1
 80013d6:	4413      	add	r3, r2
 80013d8:	3b1e      	subs	r3, #30
 80013da:	2207      	movs	r2, #7
 80013dc:	fa02 f303 	lsl.w	r3, r2, r3
 80013e0:	43da      	mvns	r2, r3
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	400a      	ands	r2, r1
 80013e8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	68d9      	ldr	r1, [r3, #12]
 80013f0:	683b      	ldr	r3, [r7, #0]
 80013f2:	689a      	ldr	r2, [r3, #8]
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	b29b      	uxth	r3, r3
 80013fa:	4618      	mov	r0, r3
 80013fc:	4603      	mov	r3, r0
 80013fe:	005b      	lsls	r3, r3, #1
 8001400:	4403      	add	r3, r0
 8001402:	3b1e      	subs	r3, #30
 8001404:	409a      	lsls	r2, r3
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	430a      	orrs	r2, r1
 800140c:	60da      	str	r2, [r3, #12]
 800140e:	e022      	b.n	8001456 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	6919      	ldr	r1, [r3, #16]
 8001416:	683b      	ldr	r3, [r7, #0]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	b29b      	uxth	r3, r3
 800141c:	461a      	mov	r2, r3
 800141e:	4613      	mov	r3, r2
 8001420:	005b      	lsls	r3, r3, #1
 8001422:	4413      	add	r3, r2
 8001424:	2207      	movs	r2, #7
 8001426:	fa02 f303 	lsl.w	r3, r2, r3
 800142a:	43da      	mvns	r2, r3
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	400a      	ands	r2, r1
 8001432:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	6919      	ldr	r1, [r3, #16]
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	689a      	ldr	r2, [r3, #8]
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	b29b      	uxth	r3, r3
 8001444:	4618      	mov	r0, r3
 8001446:	4603      	mov	r3, r0
 8001448:	005b      	lsls	r3, r3, #1
 800144a:	4403      	add	r3, r0
 800144c:	409a      	lsls	r2, r3
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	430a      	orrs	r2, r1
 8001454:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	685b      	ldr	r3, [r3, #4]
 800145a:	2b06      	cmp	r3, #6
 800145c:	d824      	bhi.n	80014a8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	685a      	ldr	r2, [r3, #4]
 8001468:	4613      	mov	r3, r2
 800146a:	009b      	lsls	r3, r3, #2
 800146c:	4413      	add	r3, r2
 800146e:	3b05      	subs	r3, #5
 8001470:	221f      	movs	r2, #31
 8001472:	fa02 f303 	lsl.w	r3, r2, r3
 8001476:	43da      	mvns	r2, r3
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	400a      	ands	r2, r1
 800147e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	b29b      	uxth	r3, r3
 800148c:	4618      	mov	r0, r3
 800148e:	683b      	ldr	r3, [r7, #0]
 8001490:	685a      	ldr	r2, [r3, #4]
 8001492:	4613      	mov	r3, r2
 8001494:	009b      	lsls	r3, r3, #2
 8001496:	4413      	add	r3, r2
 8001498:	3b05      	subs	r3, #5
 800149a:	fa00 f203 	lsl.w	r2, r0, r3
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	430a      	orrs	r2, r1
 80014a4:	635a      	str	r2, [r3, #52]	; 0x34
 80014a6:	e04c      	b.n	8001542 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	685b      	ldr	r3, [r3, #4]
 80014ac:	2b0c      	cmp	r3, #12
 80014ae:	d824      	bhi.n	80014fa <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	685a      	ldr	r2, [r3, #4]
 80014ba:	4613      	mov	r3, r2
 80014bc:	009b      	lsls	r3, r3, #2
 80014be:	4413      	add	r3, r2
 80014c0:	3b23      	subs	r3, #35	; 0x23
 80014c2:	221f      	movs	r2, #31
 80014c4:	fa02 f303 	lsl.w	r3, r2, r3
 80014c8:	43da      	mvns	r2, r3
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	400a      	ands	r2, r1
 80014d0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	b29b      	uxth	r3, r3
 80014de:	4618      	mov	r0, r3
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	685a      	ldr	r2, [r3, #4]
 80014e4:	4613      	mov	r3, r2
 80014e6:	009b      	lsls	r3, r3, #2
 80014e8:	4413      	add	r3, r2
 80014ea:	3b23      	subs	r3, #35	; 0x23
 80014ec:	fa00 f203 	lsl.w	r2, r0, r3
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	430a      	orrs	r2, r1
 80014f6:	631a      	str	r2, [r3, #48]	; 0x30
 80014f8:	e023      	b.n	8001542 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	685a      	ldr	r2, [r3, #4]
 8001504:	4613      	mov	r3, r2
 8001506:	009b      	lsls	r3, r3, #2
 8001508:	4413      	add	r3, r2
 800150a:	3b41      	subs	r3, #65	; 0x41
 800150c:	221f      	movs	r2, #31
 800150e:	fa02 f303 	lsl.w	r3, r2, r3
 8001512:	43da      	mvns	r2, r3
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	400a      	ands	r2, r1
 800151a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	b29b      	uxth	r3, r3
 8001528:	4618      	mov	r0, r3
 800152a:	683b      	ldr	r3, [r7, #0]
 800152c:	685a      	ldr	r2, [r3, #4]
 800152e:	4613      	mov	r3, r2
 8001530:	009b      	lsls	r3, r3, #2
 8001532:	4413      	add	r3, r2
 8001534:	3b41      	subs	r3, #65	; 0x41
 8001536:	fa00 f203 	lsl.w	r2, r0, r3
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	430a      	orrs	r2, r1
 8001540:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001542:	4b22      	ldr	r3, [pc, #136]	; (80015cc <HAL_ADC_ConfigChannel+0x234>)
 8001544:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	4a21      	ldr	r2, [pc, #132]	; (80015d0 <HAL_ADC_ConfigChannel+0x238>)
 800154c:	4293      	cmp	r3, r2
 800154e:	d109      	bne.n	8001564 <HAL_ADC_ConfigChannel+0x1cc>
 8001550:	683b      	ldr	r3, [r7, #0]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	2b12      	cmp	r3, #18
 8001556:	d105      	bne.n	8001564 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	685b      	ldr	r3, [r3, #4]
 800155c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	4a19      	ldr	r2, [pc, #100]	; (80015d0 <HAL_ADC_ConfigChannel+0x238>)
 800156a:	4293      	cmp	r3, r2
 800156c:	d123      	bne.n	80015b6 <HAL_ADC_ConfigChannel+0x21e>
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	2b10      	cmp	r3, #16
 8001574:	d003      	beq.n	800157e <HAL_ADC_ConfigChannel+0x1e6>
 8001576:	683b      	ldr	r3, [r7, #0]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	2b11      	cmp	r3, #17
 800157c:	d11b      	bne.n	80015b6 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	685b      	ldr	r3, [r3, #4]
 8001582:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800158a:	683b      	ldr	r3, [r7, #0]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	2b10      	cmp	r3, #16
 8001590:	d111      	bne.n	80015b6 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001592:	4b10      	ldr	r3, [pc, #64]	; (80015d4 <HAL_ADC_ConfigChannel+0x23c>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	4a10      	ldr	r2, [pc, #64]	; (80015d8 <HAL_ADC_ConfigChannel+0x240>)
 8001598:	fba2 2303 	umull	r2, r3, r2, r3
 800159c:	0c9a      	lsrs	r2, r3, #18
 800159e:	4613      	mov	r3, r2
 80015a0:	009b      	lsls	r3, r3, #2
 80015a2:	4413      	add	r3, r2
 80015a4:	005b      	lsls	r3, r3, #1
 80015a6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80015a8:	e002      	b.n	80015b0 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80015aa:	68bb      	ldr	r3, [r7, #8]
 80015ac:	3b01      	subs	r3, #1
 80015ae:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80015b0:	68bb      	ldr	r3, [r7, #8]
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d1f9      	bne.n	80015aa <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	2200      	movs	r2, #0
 80015ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80015be:	2300      	movs	r3, #0
}
 80015c0:	4618      	mov	r0, r3
 80015c2:	3714      	adds	r7, #20
 80015c4:	46bd      	mov	sp, r7
 80015c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ca:	4770      	bx	lr
 80015cc:	40012300 	.word	0x40012300
 80015d0:	40012000 	.word	0x40012000
 80015d4:	20000080 	.word	0x20000080
 80015d8:	431bde83 	.word	0x431bde83

080015dc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80015dc:	b480      	push	{r7}
 80015de:	b085      	sub	sp, #20
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80015e4:	4b79      	ldr	r3, [pc, #484]	; (80017cc <ADC_Init+0x1f0>)
 80015e6:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	685b      	ldr	r3, [r3, #4]
 80015ec:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	685a      	ldr	r2, [r3, #4]
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	685b      	ldr	r3, [r3, #4]
 80015fc:	431a      	orrs	r2, r3
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	685a      	ldr	r2, [r3, #4]
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001610:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	6859      	ldr	r1, [r3, #4]
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	691b      	ldr	r3, [r3, #16]
 800161c:	021a      	lsls	r2, r3, #8
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	430a      	orrs	r2, r1
 8001624:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	685a      	ldr	r2, [r3, #4]
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001634:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	6859      	ldr	r1, [r3, #4]
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	689a      	ldr	r2, [r3, #8]
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	430a      	orrs	r2, r1
 8001646:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	689a      	ldr	r2, [r3, #8]
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001656:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	6899      	ldr	r1, [r3, #8]
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	68da      	ldr	r2, [r3, #12]
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	430a      	orrs	r2, r1
 8001668:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800166e:	4a58      	ldr	r2, [pc, #352]	; (80017d0 <ADC_Init+0x1f4>)
 8001670:	4293      	cmp	r3, r2
 8001672:	d022      	beq.n	80016ba <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	689a      	ldr	r2, [r3, #8]
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001682:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	6899      	ldr	r1, [r3, #8]
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	430a      	orrs	r2, r1
 8001694:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	689a      	ldr	r2, [r3, #8]
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80016a4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	6899      	ldr	r1, [r3, #8]
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	430a      	orrs	r2, r1
 80016b6:	609a      	str	r2, [r3, #8]
 80016b8:	e00f      	b.n	80016da <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	689a      	ldr	r2, [r3, #8]
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80016c8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	689a      	ldr	r2, [r3, #8]
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80016d8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	689a      	ldr	r2, [r3, #8]
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f022 0202 	bic.w	r2, r2, #2
 80016e8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	6899      	ldr	r1, [r3, #8]
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	7e1b      	ldrb	r3, [r3, #24]
 80016f4:	005a      	lsls	r2, r3, #1
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	430a      	orrs	r2, r1
 80016fc:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001704:	2b00      	cmp	r3, #0
 8001706:	d01b      	beq.n	8001740 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	685a      	ldr	r2, [r3, #4]
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001716:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	685a      	ldr	r2, [r3, #4]
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001726:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	6859      	ldr	r1, [r3, #4]
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001732:	3b01      	subs	r3, #1
 8001734:	035a      	lsls	r2, r3, #13
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	430a      	orrs	r2, r1
 800173c:	605a      	str	r2, [r3, #4]
 800173e:	e007      	b.n	8001750 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	685a      	ldr	r2, [r3, #4]
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800174e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800175e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	69db      	ldr	r3, [r3, #28]
 800176a:	3b01      	subs	r3, #1
 800176c:	051a      	lsls	r2, r3, #20
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	430a      	orrs	r2, r1
 8001774:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	689a      	ldr	r2, [r3, #8]
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001784:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	6899      	ldr	r1, [r3, #8]
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001792:	025a      	lsls	r2, r3, #9
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	430a      	orrs	r2, r1
 800179a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	689a      	ldr	r2, [r3, #8]
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80017aa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	6899      	ldr	r1, [r3, #8]
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	695b      	ldr	r3, [r3, #20]
 80017b6:	029a      	lsls	r2, r3, #10
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	430a      	orrs	r2, r1
 80017be:	609a      	str	r2, [r3, #8]
}
 80017c0:	bf00      	nop
 80017c2:	3714      	adds	r7, #20
 80017c4:	46bd      	mov	sp, r7
 80017c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ca:	4770      	bx	lr
 80017cc:	40012300 	.word	0x40012300
 80017d0:	0f000001 	.word	0x0f000001

080017d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017d4:	b480      	push	{r7}
 80017d6:	b085      	sub	sp, #20
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	f003 0307 	and.w	r3, r3, #7
 80017e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017e4:	4b0c      	ldr	r3, [pc, #48]	; (8001818 <__NVIC_SetPriorityGrouping+0x44>)
 80017e6:	68db      	ldr	r3, [r3, #12]
 80017e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017ea:	68ba      	ldr	r2, [r7, #8]
 80017ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017f0:	4013      	ands	r3, r2
 80017f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017f8:	68bb      	ldr	r3, [r7, #8]
 80017fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017fc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001800:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001804:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001806:	4a04      	ldr	r2, [pc, #16]	; (8001818 <__NVIC_SetPriorityGrouping+0x44>)
 8001808:	68bb      	ldr	r3, [r7, #8]
 800180a:	60d3      	str	r3, [r2, #12]
}
 800180c:	bf00      	nop
 800180e:	3714      	adds	r7, #20
 8001810:	46bd      	mov	sp, r7
 8001812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001816:	4770      	bx	lr
 8001818:	e000ed00 	.word	0xe000ed00

0800181c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800181c:	b480      	push	{r7}
 800181e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001820:	4b04      	ldr	r3, [pc, #16]	; (8001834 <__NVIC_GetPriorityGrouping+0x18>)
 8001822:	68db      	ldr	r3, [r3, #12]
 8001824:	0a1b      	lsrs	r3, r3, #8
 8001826:	f003 0307 	and.w	r3, r3, #7
}
 800182a:	4618      	mov	r0, r3
 800182c:	46bd      	mov	sp, r7
 800182e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001832:	4770      	bx	lr
 8001834:	e000ed00 	.word	0xe000ed00

08001838 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001838:	b480      	push	{r7}
 800183a:	b083      	sub	sp, #12
 800183c:	af00      	add	r7, sp, #0
 800183e:	4603      	mov	r3, r0
 8001840:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001842:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001846:	2b00      	cmp	r3, #0
 8001848:	db0b      	blt.n	8001862 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800184a:	79fb      	ldrb	r3, [r7, #7]
 800184c:	f003 021f 	and.w	r2, r3, #31
 8001850:	4907      	ldr	r1, [pc, #28]	; (8001870 <__NVIC_EnableIRQ+0x38>)
 8001852:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001856:	095b      	lsrs	r3, r3, #5
 8001858:	2001      	movs	r0, #1
 800185a:	fa00 f202 	lsl.w	r2, r0, r2
 800185e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001862:	bf00      	nop
 8001864:	370c      	adds	r7, #12
 8001866:	46bd      	mov	sp, r7
 8001868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186c:	4770      	bx	lr
 800186e:	bf00      	nop
 8001870:	e000e100 	.word	0xe000e100

08001874 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001874:	b480      	push	{r7}
 8001876:	b083      	sub	sp, #12
 8001878:	af00      	add	r7, sp, #0
 800187a:	4603      	mov	r3, r0
 800187c:	6039      	str	r1, [r7, #0]
 800187e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001880:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001884:	2b00      	cmp	r3, #0
 8001886:	db0a      	blt.n	800189e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	b2da      	uxtb	r2, r3
 800188c:	490c      	ldr	r1, [pc, #48]	; (80018c0 <__NVIC_SetPriority+0x4c>)
 800188e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001892:	0112      	lsls	r2, r2, #4
 8001894:	b2d2      	uxtb	r2, r2
 8001896:	440b      	add	r3, r1
 8001898:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800189c:	e00a      	b.n	80018b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	b2da      	uxtb	r2, r3
 80018a2:	4908      	ldr	r1, [pc, #32]	; (80018c4 <__NVIC_SetPriority+0x50>)
 80018a4:	79fb      	ldrb	r3, [r7, #7]
 80018a6:	f003 030f 	and.w	r3, r3, #15
 80018aa:	3b04      	subs	r3, #4
 80018ac:	0112      	lsls	r2, r2, #4
 80018ae:	b2d2      	uxtb	r2, r2
 80018b0:	440b      	add	r3, r1
 80018b2:	761a      	strb	r2, [r3, #24]
}
 80018b4:	bf00      	nop
 80018b6:	370c      	adds	r7, #12
 80018b8:	46bd      	mov	sp, r7
 80018ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018be:	4770      	bx	lr
 80018c0:	e000e100 	.word	0xe000e100
 80018c4:	e000ed00 	.word	0xe000ed00

080018c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018c8:	b480      	push	{r7}
 80018ca:	b089      	sub	sp, #36	; 0x24
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	60f8      	str	r0, [r7, #12]
 80018d0:	60b9      	str	r1, [r7, #8]
 80018d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	f003 0307 	and.w	r3, r3, #7
 80018da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018dc:	69fb      	ldr	r3, [r7, #28]
 80018de:	f1c3 0307 	rsb	r3, r3, #7
 80018e2:	2b04      	cmp	r3, #4
 80018e4:	bf28      	it	cs
 80018e6:	2304      	movcs	r3, #4
 80018e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018ea:	69fb      	ldr	r3, [r7, #28]
 80018ec:	3304      	adds	r3, #4
 80018ee:	2b06      	cmp	r3, #6
 80018f0:	d902      	bls.n	80018f8 <NVIC_EncodePriority+0x30>
 80018f2:	69fb      	ldr	r3, [r7, #28]
 80018f4:	3b03      	subs	r3, #3
 80018f6:	e000      	b.n	80018fa <NVIC_EncodePriority+0x32>
 80018f8:	2300      	movs	r3, #0
 80018fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018fc:	f04f 32ff 	mov.w	r2, #4294967295
 8001900:	69bb      	ldr	r3, [r7, #24]
 8001902:	fa02 f303 	lsl.w	r3, r2, r3
 8001906:	43da      	mvns	r2, r3
 8001908:	68bb      	ldr	r3, [r7, #8]
 800190a:	401a      	ands	r2, r3
 800190c:	697b      	ldr	r3, [r7, #20]
 800190e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001910:	f04f 31ff 	mov.w	r1, #4294967295
 8001914:	697b      	ldr	r3, [r7, #20]
 8001916:	fa01 f303 	lsl.w	r3, r1, r3
 800191a:	43d9      	mvns	r1, r3
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001920:	4313      	orrs	r3, r2
         );
}
 8001922:	4618      	mov	r0, r3
 8001924:	3724      	adds	r7, #36	; 0x24
 8001926:	46bd      	mov	sp, r7
 8001928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192c:	4770      	bx	lr
	...

08001930 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b082      	sub	sp, #8
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	3b01      	subs	r3, #1
 800193c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001940:	d301      	bcc.n	8001946 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001942:	2301      	movs	r3, #1
 8001944:	e00f      	b.n	8001966 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001946:	4a0a      	ldr	r2, [pc, #40]	; (8001970 <SysTick_Config+0x40>)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	3b01      	subs	r3, #1
 800194c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800194e:	210f      	movs	r1, #15
 8001950:	f04f 30ff 	mov.w	r0, #4294967295
 8001954:	f7ff ff8e 	bl	8001874 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001958:	4b05      	ldr	r3, [pc, #20]	; (8001970 <SysTick_Config+0x40>)
 800195a:	2200      	movs	r2, #0
 800195c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800195e:	4b04      	ldr	r3, [pc, #16]	; (8001970 <SysTick_Config+0x40>)
 8001960:	2207      	movs	r2, #7
 8001962:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001964:	2300      	movs	r3, #0
}
 8001966:	4618      	mov	r0, r3
 8001968:	3708      	adds	r7, #8
 800196a:	46bd      	mov	sp, r7
 800196c:	bd80      	pop	{r7, pc}
 800196e:	bf00      	nop
 8001970:	e000e010 	.word	0xe000e010

08001974 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b082      	sub	sp, #8
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800197c:	6878      	ldr	r0, [r7, #4]
 800197e:	f7ff ff29 	bl	80017d4 <__NVIC_SetPriorityGrouping>
}
 8001982:	bf00      	nop
 8001984:	3708      	adds	r7, #8
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}

0800198a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800198a:	b580      	push	{r7, lr}
 800198c:	b086      	sub	sp, #24
 800198e:	af00      	add	r7, sp, #0
 8001990:	4603      	mov	r3, r0
 8001992:	60b9      	str	r1, [r7, #8]
 8001994:	607a      	str	r2, [r7, #4]
 8001996:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001998:	2300      	movs	r3, #0
 800199a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800199c:	f7ff ff3e 	bl	800181c <__NVIC_GetPriorityGrouping>
 80019a0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019a2:	687a      	ldr	r2, [r7, #4]
 80019a4:	68b9      	ldr	r1, [r7, #8]
 80019a6:	6978      	ldr	r0, [r7, #20]
 80019a8:	f7ff ff8e 	bl	80018c8 <NVIC_EncodePriority>
 80019ac:	4602      	mov	r2, r0
 80019ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019b2:	4611      	mov	r1, r2
 80019b4:	4618      	mov	r0, r3
 80019b6:	f7ff ff5d 	bl	8001874 <__NVIC_SetPriority>
}
 80019ba:	bf00      	nop
 80019bc:	3718      	adds	r7, #24
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd80      	pop	{r7, pc}

080019c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019c2:	b580      	push	{r7, lr}
 80019c4:	b082      	sub	sp, #8
 80019c6:	af00      	add	r7, sp, #0
 80019c8:	4603      	mov	r3, r0
 80019ca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019d0:	4618      	mov	r0, r3
 80019d2:	f7ff ff31 	bl	8001838 <__NVIC_EnableIRQ>
}
 80019d6:	bf00      	nop
 80019d8:	3708      	adds	r7, #8
 80019da:	46bd      	mov	sp, r7
 80019dc:	bd80      	pop	{r7, pc}

080019de <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019de:	b580      	push	{r7, lr}
 80019e0:	b082      	sub	sp, #8
 80019e2:	af00      	add	r7, sp, #0
 80019e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019e6:	6878      	ldr	r0, [r7, #4]
 80019e8:	f7ff ffa2 	bl	8001930 <SysTick_Config>
 80019ec:	4603      	mov	r3, r0
}
 80019ee:	4618      	mov	r0, r3
 80019f0:	3708      	adds	r7, #8
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}
	...

080019f8 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b086      	sub	sp, #24
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	60f8      	str	r0, [r7, #12]
 8001a00:	60b9      	str	r1, [r7, #8]
 8001a02:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001a06:	2301      	movs	r3, #1
 8001a08:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001a0a:	4b23      	ldr	r3, [pc, #140]	; (8001a98 <HAL_FLASH_Program+0xa0>)
 8001a0c:	7e1b      	ldrb	r3, [r3, #24]
 8001a0e:	2b01      	cmp	r3, #1
 8001a10:	d101      	bne.n	8001a16 <HAL_FLASH_Program+0x1e>
 8001a12:	2302      	movs	r3, #2
 8001a14:	e03b      	b.n	8001a8e <HAL_FLASH_Program+0x96>
 8001a16:	4b20      	ldr	r3, [pc, #128]	; (8001a98 <HAL_FLASH_Program+0xa0>)
 8001a18:	2201      	movs	r2, #1
 8001a1a:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001a1c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001a20:	f000 f870 	bl	8001b04 <FLASH_WaitForLastOperation>
 8001a24:	4603      	mov	r3, r0
 8001a26:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8001a28:	7dfb      	ldrb	r3, [r7, #23]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d12b      	bne.n	8001a86 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d105      	bne.n	8001a40 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8001a34:	783b      	ldrb	r3, [r7, #0]
 8001a36:	4619      	mov	r1, r3
 8001a38:	68b8      	ldr	r0, [r7, #8]
 8001a3a:	f000 f917 	bl	8001c6c <FLASH_Program_Byte>
 8001a3e:	e016      	b.n	8001a6e <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	2b01      	cmp	r3, #1
 8001a44:	d105      	bne.n	8001a52 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8001a46:	883b      	ldrh	r3, [r7, #0]
 8001a48:	4619      	mov	r1, r3
 8001a4a:	68b8      	ldr	r0, [r7, #8]
 8001a4c:	f000 f8ea 	bl	8001c24 <FLASH_Program_HalfWord>
 8001a50:	e00d      	b.n	8001a6e <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	2b02      	cmp	r3, #2
 8001a56:	d105      	bne.n	8001a64 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	4619      	mov	r1, r3
 8001a5c:	68b8      	ldr	r0, [r7, #8]
 8001a5e:	f000 f8bf 	bl	8001be0 <FLASH_Program_Word>
 8001a62:	e004      	b.n	8001a6e <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8001a64:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001a68:	68b8      	ldr	r0, [r7, #8]
 8001a6a:	f000 f88b 	bl	8001b84 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001a6e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001a72:	f000 f847 	bl	8001b04 <FLASH_WaitForLastOperation>
 8001a76:	4603      	mov	r3, r0
 8001a78:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8001a7a:	4b08      	ldr	r3, [pc, #32]	; (8001a9c <HAL_FLASH_Program+0xa4>)
 8001a7c:	691b      	ldr	r3, [r3, #16]
 8001a7e:	4a07      	ldr	r2, [pc, #28]	; (8001a9c <HAL_FLASH_Program+0xa4>)
 8001a80:	f023 0301 	bic.w	r3, r3, #1
 8001a84:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001a86:	4b04      	ldr	r3, [pc, #16]	; (8001a98 <HAL_FLASH_Program+0xa0>)
 8001a88:	2200      	movs	r2, #0
 8001a8a:	761a      	strb	r2, [r3, #24]
  
  return status;
 8001a8c:	7dfb      	ldrb	r3, [r7, #23]
}
 8001a8e:	4618      	mov	r0, r3
 8001a90:	3718      	adds	r7, #24
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}
 8001a96:	bf00      	nop
 8001a98:	20000124 	.word	0x20000124
 8001a9c:	40023c00 	.word	0x40023c00

08001aa0 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	b083      	sub	sp, #12
 8001aa4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001aaa:	4b0b      	ldr	r3, [pc, #44]	; (8001ad8 <HAL_FLASH_Unlock+0x38>)
 8001aac:	691b      	ldr	r3, [r3, #16]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	da0b      	bge.n	8001aca <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8001ab2:	4b09      	ldr	r3, [pc, #36]	; (8001ad8 <HAL_FLASH_Unlock+0x38>)
 8001ab4:	4a09      	ldr	r2, [pc, #36]	; (8001adc <HAL_FLASH_Unlock+0x3c>)
 8001ab6:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8001ab8:	4b07      	ldr	r3, [pc, #28]	; (8001ad8 <HAL_FLASH_Unlock+0x38>)
 8001aba:	4a09      	ldr	r2, [pc, #36]	; (8001ae0 <HAL_FLASH_Unlock+0x40>)
 8001abc:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001abe:	4b06      	ldr	r3, [pc, #24]	; (8001ad8 <HAL_FLASH_Unlock+0x38>)
 8001ac0:	691b      	ldr	r3, [r3, #16]
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	da01      	bge.n	8001aca <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8001aca:	79fb      	ldrb	r3, [r7, #7]
}
 8001acc:	4618      	mov	r0, r3
 8001ace:	370c      	adds	r7, #12
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad6:	4770      	bx	lr
 8001ad8:	40023c00 	.word	0x40023c00
 8001adc:	45670123 	.word	0x45670123
 8001ae0:	cdef89ab 	.word	0xcdef89ab

08001ae4 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8001ae8:	4b05      	ldr	r3, [pc, #20]	; (8001b00 <HAL_FLASH_Lock+0x1c>)
 8001aea:	691b      	ldr	r3, [r3, #16]
 8001aec:	4a04      	ldr	r2, [pc, #16]	; (8001b00 <HAL_FLASH_Lock+0x1c>)
 8001aee:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001af2:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8001af4:	2300      	movs	r3, #0
}
 8001af6:	4618      	mov	r0, r3
 8001af8:	46bd      	mov	sp, r7
 8001afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afe:	4770      	bx	lr
 8001b00:	40023c00 	.word	0x40023c00

08001b04 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b084      	sub	sp, #16
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001b10:	4b1a      	ldr	r3, [pc, #104]	; (8001b7c <FLASH_WaitForLastOperation+0x78>)
 8001b12:	2200      	movs	r2, #0
 8001b14:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8001b16:	f7ff fa75 	bl	8001004 <HAL_GetTick>
 8001b1a:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8001b1c:	e010      	b.n	8001b40 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b24:	d00c      	beq.n	8001b40 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d007      	beq.n	8001b3c <FLASH_WaitForLastOperation+0x38>
 8001b2c:	f7ff fa6a 	bl	8001004 <HAL_GetTick>
 8001b30:	4602      	mov	r2, r0
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	1ad3      	subs	r3, r2, r3
 8001b36:	687a      	ldr	r2, [r7, #4]
 8001b38:	429a      	cmp	r2, r3
 8001b3a:	d201      	bcs.n	8001b40 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8001b3c:	2303      	movs	r3, #3
 8001b3e:	e019      	b.n	8001b74 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8001b40:	4b0f      	ldr	r3, [pc, #60]	; (8001b80 <FLASH_WaitForLastOperation+0x7c>)
 8001b42:	68db      	ldr	r3, [r3, #12]
 8001b44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d1e8      	bne.n	8001b1e <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8001b4c:	4b0c      	ldr	r3, [pc, #48]	; (8001b80 <FLASH_WaitForLastOperation+0x7c>)
 8001b4e:	68db      	ldr	r3, [r3, #12]
 8001b50:	f003 0301 	and.w	r3, r3, #1
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d002      	beq.n	8001b5e <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8001b58:	4b09      	ldr	r3, [pc, #36]	; (8001b80 <FLASH_WaitForLastOperation+0x7c>)
 8001b5a:	2201      	movs	r2, #1
 8001b5c:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8001b5e:	4b08      	ldr	r3, [pc, #32]	; (8001b80 <FLASH_WaitForLastOperation+0x7c>)
 8001b60:	68db      	ldr	r3, [r3, #12]
 8001b62:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d003      	beq.n	8001b72 <FLASH_WaitForLastOperation+0x6e>
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8001b6a:	f000 f8a1 	bl	8001cb0 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8001b6e:	2301      	movs	r3, #1
 8001b70:	e000      	b.n	8001b74 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8001b72:	2300      	movs	r3, #0
  
}  
 8001b74:	4618      	mov	r0, r3
 8001b76:	3710      	adds	r7, #16
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	bd80      	pop	{r7, pc}
 8001b7c:	20000124 	.word	0x20000124
 8001b80:	40023c00 	.word	0x40023c00

08001b84 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8001b84:	b490      	push	{r4, r7}
 8001b86:	b084      	sub	sp, #16
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	60f8      	str	r0, [r7, #12]
 8001b8c:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001b90:	4b12      	ldr	r3, [pc, #72]	; (8001bdc <FLASH_Program_DoubleWord+0x58>)
 8001b92:	691b      	ldr	r3, [r3, #16]
 8001b94:	4a11      	ldr	r2, [pc, #68]	; (8001bdc <FLASH_Program_DoubleWord+0x58>)
 8001b96:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001b9a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8001b9c:	4b0f      	ldr	r3, [pc, #60]	; (8001bdc <FLASH_Program_DoubleWord+0x58>)
 8001b9e:	691b      	ldr	r3, [r3, #16]
 8001ba0:	4a0e      	ldr	r2, [pc, #56]	; (8001bdc <FLASH_Program_DoubleWord+0x58>)
 8001ba2:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8001ba6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001ba8:	4b0c      	ldr	r3, [pc, #48]	; (8001bdc <FLASH_Program_DoubleWord+0x58>)
 8001baa:	691b      	ldr	r3, [r3, #16]
 8001bac:	4a0b      	ldr	r2, [pc, #44]	; (8001bdc <FLASH_Program_DoubleWord+0x58>)
 8001bae:	f043 0301 	orr.w	r3, r3, #1
 8001bb2:	6113      	str	r3, [r2, #16]

  /* Program the double-word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	683a      	ldr	r2, [r7, #0]
 8001bb8:	601a      	str	r2, [r3, #0]
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8001bba:	e9d7 1200 	ldrd	r1, r2, [r7]
 8001bbe:	f04f 0300 	mov.w	r3, #0
 8001bc2:	f04f 0400 	mov.w	r4, #0
 8001bc6:	0013      	movs	r3, r2
 8001bc8:	2400      	movs	r4, #0
 8001bca:	68fa      	ldr	r2, [r7, #12]
 8001bcc:	3204      	adds	r2, #4
 8001bce:	6013      	str	r3, [r2, #0]
}
 8001bd0:	bf00      	nop
 8001bd2:	3710      	adds	r7, #16
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bc90      	pop	{r4, r7}
 8001bd8:	4770      	bx	lr
 8001bda:	bf00      	nop
 8001bdc:	40023c00 	.word	0x40023c00

08001be0 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8001be0:	b480      	push	{r7}
 8001be2:	b083      	sub	sp, #12
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
 8001be8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001bea:	4b0d      	ldr	r3, [pc, #52]	; (8001c20 <FLASH_Program_Word+0x40>)
 8001bec:	691b      	ldr	r3, [r3, #16]
 8001bee:	4a0c      	ldr	r2, [pc, #48]	; (8001c20 <FLASH_Program_Word+0x40>)
 8001bf0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001bf4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8001bf6:	4b0a      	ldr	r3, [pc, #40]	; (8001c20 <FLASH_Program_Word+0x40>)
 8001bf8:	691b      	ldr	r3, [r3, #16]
 8001bfa:	4a09      	ldr	r2, [pc, #36]	; (8001c20 <FLASH_Program_Word+0x40>)
 8001bfc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c00:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001c02:	4b07      	ldr	r3, [pc, #28]	; (8001c20 <FLASH_Program_Word+0x40>)
 8001c04:	691b      	ldr	r3, [r3, #16]
 8001c06:	4a06      	ldr	r2, [pc, #24]	; (8001c20 <FLASH_Program_Word+0x40>)
 8001c08:	f043 0301 	orr.w	r3, r3, #1
 8001c0c:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	683a      	ldr	r2, [r7, #0]
 8001c12:	601a      	str	r2, [r3, #0]
}
 8001c14:	bf00      	nop
 8001c16:	370c      	adds	r7, #12
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1e:	4770      	bx	lr
 8001c20:	40023c00 	.word	0x40023c00

08001c24 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8001c24:	b480      	push	{r7}
 8001c26:	b083      	sub	sp, #12
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
 8001c2c:	460b      	mov	r3, r1
 8001c2e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001c30:	4b0d      	ldr	r3, [pc, #52]	; (8001c68 <FLASH_Program_HalfWord+0x44>)
 8001c32:	691b      	ldr	r3, [r3, #16]
 8001c34:	4a0c      	ldr	r2, [pc, #48]	; (8001c68 <FLASH_Program_HalfWord+0x44>)
 8001c36:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001c3a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8001c3c:	4b0a      	ldr	r3, [pc, #40]	; (8001c68 <FLASH_Program_HalfWord+0x44>)
 8001c3e:	691b      	ldr	r3, [r3, #16]
 8001c40:	4a09      	ldr	r2, [pc, #36]	; (8001c68 <FLASH_Program_HalfWord+0x44>)
 8001c42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c46:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001c48:	4b07      	ldr	r3, [pc, #28]	; (8001c68 <FLASH_Program_HalfWord+0x44>)
 8001c4a:	691b      	ldr	r3, [r3, #16]
 8001c4c:	4a06      	ldr	r2, [pc, #24]	; (8001c68 <FLASH_Program_HalfWord+0x44>)
 8001c4e:	f043 0301 	orr.w	r3, r3, #1
 8001c52:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	887a      	ldrh	r2, [r7, #2]
 8001c58:	801a      	strh	r2, [r3, #0]
}
 8001c5a:	bf00      	nop
 8001c5c:	370c      	adds	r7, #12
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c64:	4770      	bx	lr
 8001c66:	bf00      	nop
 8001c68:	40023c00 	.word	0x40023c00

08001c6c <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	b083      	sub	sp, #12
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
 8001c74:	460b      	mov	r3, r1
 8001c76:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001c78:	4b0c      	ldr	r3, [pc, #48]	; (8001cac <FLASH_Program_Byte+0x40>)
 8001c7a:	691b      	ldr	r3, [r3, #16]
 8001c7c:	4a0b      	ldr	r2, [pc, #44]	; (8001cac <FLASH_Program_Byte+0x40>)
 8001c7e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001c82:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8001c84:	4b09      	ldr	r3, [pc, #36]	; (8001cac <FLASH_Program_Byte+0x40>)
 8001c86:	4a09      	ldr	r2, [pc, #36]	; (8001cac <FLASH_Program_Byte+0x40>)
 8001c88:	691b      	ldr	r3, [r3, #16]
 8001c8a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001c8c:	4b07      	ldr	r3, [pc, #28]	; (8001cac <FLASH_Program_Byte+0x40>)
 8001c8e:	691b      	ldr	r3, [r3, #16]
 8001c90:	4a06      	ldr	r2, [pc, #24]	; (8001cac <FLASH_Program_Byte+0x40>)
 8001c92:	f043 0301 	orr.w	r3, r3, #1
 8001c96:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	78fa      	ldrb	r2, [r7, #3]
 8001c9c:	701a      	strb	r2, [r3, #0]
}
 8001c9e:	bf00      	nop
 8001ca0:	370c      	adds	r7, #12
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca8:	4770      	bx	lr
 8001caa:	bf00      	nop
 8001cac:	40023c00 	.word	0x40023c00

08001cb0 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8001cb0:	b480      	push	{r7}
 8001cb2:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8001cb4:	4b27      	ldr	r3, [pc, #156]	; (8001d54 <FLASH_SetErrorCode+0xa4>)
 8001cb6:	68db      	ldr	r3, [r3, #12]
 8001cb8:	f003 0310 	and.w	r3, r3, #16
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d008      	beq.n	8001cd2 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8001cc0:	4b25      	ldr	r3, [pc, #148]	; (8001d58 <FLASH_SetErrorCode+0xa8>)
 8001cc2:	69db      	ldr	r3, [r3, #28]
 8001cc4:	f043 0310 	orr.w	r3, r3, #16
 8001cc8:	4a23      	ldr	r2, [pc, #140]	; (8001d58 <FLASH_SetErrorCode+0xa8>)
 8001cca:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8001ccc:	4b21      	ldr	r3, [pc, #132]	; (8001d54 <FLASH_SetErrorCode+0xa4>)
 8001cce:	2210      	movs	r2, #16
 8001cd0:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8001cd2:	4b20      	ldr	r3, [pc, #128]	; (8001d54 <FLASH_SetErrorCode+0xa4>)
 8001cd4:	68db      	ldr	r3, [r3, #12]
 8001cd6:	f003 0320 	and.w	r3, r3, #32
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d008      	beq.n	8001cf0 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8001cde:	4b1e      	ldr	r3, [pc, #120]	; (8001d58 <FLASH_SetErrorCode+0xa8>)
 8001ce0:	69db      	ldr	r3, [r3, #28]
 8001ce2:	f043 0308 	orr.w	r3, r3, #8
 8001ce6:	4a1c      	ldr	r2, [pc, #112]	; (8001d58 <FLASH_SetErrorCode+0xa8>)
 8001ce8:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8001cea:	4b1a      	ldr	r3, [pc, #104]	; (8001d54 <FLASH_SetErrorCode+0xa4>)
 8001cec:	2220      	movs	r2, #32
 8001cee:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8001cf0:	4b18      	ldr	r3, [pc, #96]	; (8001d54 <FLASH_SetErrorCode+0xa4>)
 8001cf2:	68db      	ldr	r3, [r3, #12]
 8001cf4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d008      	beq.n	8001d0e <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8001cfc:	4b16      	ldr	r3, [pc, #88]	; (8001d58 <FLASH_SetErrorCode+0xa8>)
 8001cfe:	69db      	ldr	r3, [r3, #28]
 8001d00:	f043 0304 	orr.w	r3, r3, #4
 8001d04:	4a14      	ldr	r2, [pc, #80]	; (8001d58 <FLASH_SetErrorCode+0xa8>)
 8001d06:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8001d08:	4b12      	ldr	r3, [pc, #72]	; (8001d54 <FLASH_SetErrorCode+0xa4>)
 8001d0a:	2240      	movs	r2, #64	; 0x40
 8001d0c:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8001d0e:	4b11      	ldr	r3, [pc, #68]	; (8001d54 <FLASH_SetErrorCode+0xa4>)
 8001d10:	68db      	ldr	r3, [r3, #12]
 8001d12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d008      	beq.n	8001d2c <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8001d1a:	4b0f      	ldr	r3, [pc, #60]	; (8001d58 <FLASH_SetErrorCode+0xa8>)
 8001d1c:	69db      	ldr	r3, [r3, #28]
 8001d1e:	f043 0302 	orr.w	r3, r3, #2
 8001d22:	4a0d      	ldr	r2, [pc, #52]	; (8001d58 <FLASH_SetErrorCode+0xa8>)
 8001d24:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8001d26:	4b0b      	ldr	r3, [pc, #44]	; (8001d54 <FLASH_SetErrorCode+0xa4>)
 8001d28:	2280      	movs	r2, #128	; 0x80
 8001d2a:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8001d2c:	4b09      	ldr	r3, [pc, #36]	; (8001d54 <FLASH_SetErrorCode+0xa4>)
 8001d2e:	68db      	ldr	r3, [r3, #12]
 8001d30:	f003 0302 	and.w	r3, r3, #2
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d008      	beq.n	8001d4a <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8001d38:	4b07      	ldr	r3, [pc, #28]	; (8001d58 <FLASH_SetErrorCode+0xa8>)
 8001d3a:	69db      	ldr	r3, [r3, #28]
 8001d3c:	f043 0320 	orr.w	r3, r3, #32
 8001d40:	4a05      	ldr	r2, [pc, #20]	; (8001d58 <FLASH_SetErrorCode+0xa8>)
 8001d42:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8001d44:	4b03      	ldr	r3, [pc, #12]	; (8001d54 <FLASH_SetErrorCode+0xa4>)
 8001d46:	2202      	movs	r2, #2
 8001d48:	60da      	str	r2, [r3, #12]
  }
}
 8001d4a:	bf00      	nop
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d52:	4770      	bx	lr
 8001d54:	40023c00 	.word	0x40023c00
 8001d58:	20000124 	.word	0x20000124

08001d5c <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b084      	sub	sp, #16
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
 8001d64:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001d66:	2301      	movs	r3, #1
 8001d68:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	60bb      	str	r3, [r7, #8]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001d6e:	4b31      	ldr	r3, [pc, #196]	; (8001e34 <HAL_FLASHEx_Erase+0xd8>)
 8001d70:	7e1b      	ldrb	r3, [r3, #24]
 8001d72:	2b01      	cmp	r3, #1
 8001d74:	d101      	bne.n	8001d7a <HAL_FLASHEx_Erase+0x1e>
 8001d76:	2302      	movs	r3, #2
 8001d78:	e058      	b.n	8001e2c <HAL_FLASHEx_Erase+0xd0>
 8001d7a:	4b2e      	ldr	r3, [pc, #184]	; (8001e34 <HAL_FLASHEx_Erase+0xd8>)
 8001d7c:	2201      	movs	r2, #1
 8001d7e:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001d80:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001d84:	f7ff febe 	bl	8001b04 <FLASH_WaitForLastOperation>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 8001d8c:	7bfb      	ldrb	r3, [r7, #15]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d148      	bne.n	8001e24 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	f04f 32ff 	mov.w	r2, #4294967295
 8001d98:	601a      	str	r2, [r3, #0]
    
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	2b01      	cmp	r3, #1
 8001da0:	d115      	bne.n	8001dce <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	691b      	ldr	r3, [r3, #16]
 8001da6:	b2da      	uxtb	r2, r3
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	4619      	mov	r1, r3
 8001dae:	4610      	mov	r0, r2
 8001db0:	f000 f844 	bl	8001e3c <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001db4:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001db8:	f7ff fea4 	bl	8001b04 <FLASH_WaitForLastOperation>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	73fb      	strb	r3, [r7, #15]
      
      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8001dc0:	4b1d      	ldr	r3, [pc, #116]	; (8001e38 <HAL_FLASHEx_Erase+0xdc>)
 8001dc2:	691b      	ldr	r3, [r3, #16]
 8001dc4:	4a1c      	ldr	r2, [pc, #112]	; (8001e38 <HAL_FLASHEx_Erase+0xdc>)
 8001dc6:	f023 0304 	bic.w	r3, r3, #4
 8001dca:	6113      	str	r3, [r2, #16]
 8001dcc:	e028      	b.n	8001e20 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	689b      	ldr	r3, [r3, #8]
 8001dd2:	60bb      	str	r3, [r7, #8]
 8001dd4:	e01c      	b.n	8001e10 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	691b      	ldr	r3, [r3, #16]
 8001dda:	b2db      	uxtb	r3, r3
 8001ddc:	4619      	mov	r1, r3
 8001dde:	68b8      	ldr	r0, [r7, #8]
 8001de0:	f000 f850 	bl	8001e84 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001de4:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001de8:	f7ff fe8c 	bl	8001b04 <FLASH_WaitForLastOperation>
 8001dec:	4603      	mov	r3, r0
 8001dee:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8001df0:	4b11      	ldr	r3, [pc, #68]	; (8001e38 <HAL_FLASHEx_Erase+0xdc>)
 8001df2:	691b      	ldr	r3, [r3, #16]
 8001df4:	4a10      	ldr	r2, [pc, #64]	; (8001e38 <HAL_FLASHEx_Erase+0xdc>)
 8001df6:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 8001dfa:	6113      	str	r3, [r2, #16]

        if(status != HAL_OK) 
 8001dfc:	7bfb      	ldrb	r3, [r7, #15]
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d003      	beq.n	8001e0a <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	68ba      	ldr	r2, [r7, #8]
 8001e06:	601a      	str	r2, [r3, #0]
          break;
 8001e08:	e00a      	b.n	8001e20 <HAL_FLASHEx_Erase+0xc4>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8001e0a:	68bb      	ldr	r3, [r7, #8]
 8001e0c:	3301      	adds	r3, #1
 8001e0e:	60bb      	str	r3, [r7, #8]
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	68da      	ldr	r2, [r3, #12]
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	689b      	ldr	r3, [r3, #8]
 8001e18:	4413      	add	r3, r2
 8001e1a:	68ba      	ldr	r2, [r7, #8]
 8001e1c:	429a      	cmp	r2, r3
 8001e1e:	d3da      	bcc.n	8001dd6 <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();    
 8001e20:	f000 f878 	bl	8001f14 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001e24:	4b03      	ldr	r3, [pc, #12]	; (8001e34 <HAL_FLASHEx_Erase+0xd8>)
 8001e26:	2200      	movs	r2, #0
 8001e28:	761a      	strb	r2, [r3, #24]

  return status;
 8001e2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	3710      	adds	r7, #16
 8001e30:	46bd      	mov	sp, r7
 8001e32:	bd80      	pop	{r7, pc}
 8001e34:	20000124 	.word	0x20000124
 8001e38:	40023c00 	.word	0x40023c00

08001e3c <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	b083      	sub	sp, #12
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	4603      	mov	r3, r0
 8001e44:	6039      	str	r1, [r7, #0]
 8001e46:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));
  
  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001e48:	4b0d      	ldr	r3, [pc, #52]	; (8001e80 <FLASH_MassErase+0x44>)
 8001e4a:	691b      	ldr	r3, [r3, #16]
 8001e4c:	4a0c      	ldr	r2, [pc, #48]	; (8001e80 <FLASH_MassErase+0x44>)
 8001e4e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001e52:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 8001e54:	4b0a      	ldr	r3, [pc, #40]	; (8001e80 <FLASH_MassErase+0x44>)
 8001e56:	691b      	ldr	r3, [r3, #16]
 8001e58:	4a09      	ldr	r2, [pc, #36]	; (8001e80 <FLASH_MassErase+0x44>)
 8001e5a:	f043 0304 	orr.w	r3, r3, #4
 8001e5e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8U);
 8001e60:	4b07      	ldr	r3, [pc, #28]	; (8001e80 <FLASH_MassErase+0x44>)
 8001e62:	691a      	ldr	r2, [r3, #16]
 8001e64:	79fb      	ldrb	r3, [r7, #7]
 8001e66:	021b      	lsls	r3, r3, #8
 8001e68:	4313      	orrs	r3, r2
 8001e6a:	4a05      	ldr	r2, [pc, #20]	; (8001e80 <FLASH_MassErase+0x44>)
 8001e6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e70:	6113      	str	r3, [r2, #16]
}
 8001e72:	bf00      	nop
 8001e74:	370c      	adds	r7, #12
 8001e76:	46bd      	mov	sp, r7
 8001e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7c:	4770      	bx	lr
 8001e7e:	bf00      	nop
 8001e80:	40023c00 	.word	0x40023c00

08001e84 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8001e84:	b480      	push	{r7}
 8001e86:	b085      	sub	sp, #20
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
 8001e8c:	460b      	mov	r3, r1
 8001e8e:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8001e90:	2300      	movs	r3, #0
 8001e92:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8001e94:	78fb      	ldrb	r3, [r7, #3]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d102      	bne.n	8001ea0 <FLASH_Erase_Sector+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	60fb      	str	r3, [r7, #12]
 8001e9e:	e010      	b.n	8001ec2 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8001ea0:	78fb      	ldrb	r3, [r7, #3]
 8001ea2:	2b01      	cmp	r3, #1
 8001ea4:	d103      	bne.n	8001eae <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8001ea6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001eaa:	60fb      	str	r3, [r7, #12]
 8001eac:	e009      	b.n	8001ec2 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8001eae:	78fb      	ldrb	r3, [r7, #3]
 8001eb0:	2b02      	cmp	r3, #2
 8001eb2:	d103      	bne.n	8001ebc <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8001eb4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001eb8:	60fb      	str	r3, [r7, #12]
 8001eba:	e002      	b.n	8001ec2 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8001ebc:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001ec0:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001ec2:	4b13      	ldr	r3, [pc, #76]	; (8001f10 <FLASH_Erase_Sector+0x8c>)
 8001ec4:	691b      	ldr	r3, [r3, #16]
 8001ec6:	4a12      	ldr	r2, [pc, #72]	; (8001f10 <FLASH_Erase_Sector+0x8c>)
 8001ec8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001ecc:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8001ece:	4b10      	ldr	r3, [pc, #64]	; (8001f10 <FLASH_Erase_Sector+0x8c>)
 8001ed0:	691a      	ldr	r2, [r3, #16]
 8001ed2:	490f      	ldr	r1, [pc, #60]	; (8001f10 <FLASH_Erase_Sector+0x8c>)
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	4313      	orrs	r3, r2
 8001ed8:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8001eda:	4b0d      	ldr	r3, [pc, #52]	; (8001f10 <FLASH_Erase_Sector+0x8c>)
 8001edc:	691b      	ldr	r3, [r3, #16]
 8001ede:	4a0c      	ldr	r2, [pc, #48]	; (8001f10 <FLASH_Erase_Sector+0x8c>)
 8001ee0:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001ee4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8001ee6:	4b0a      	ldr	r3, [pc, #40]	; (8001f10 <FLASH_Erase_Sector+0x8c>)
 8001ee8:	691a      	ldr	r2, [r3, #16]
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	00db      	lsls	r3, r3, #3
 8001eee:	4313      	orrs	r3, r2
 8001ef0:	4a07      	ldr	r2, [pc, #28]	; (8001f10 <FLASH_Erase_Sector+0x8c>)
 8001ef2:	f043 0302 	orr.w	r3, r3, #2
 8001ef6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8001ef8:	4b05      	ldr	r3, [pc, #20]	; (8001f10 <FLASH_Erase_Sector+0x8c>)
 8001efa:	691b      	ldr	r3, [r3, #16]
 8001efc:	4a04      	ldr	r2, [pc, #16]	; (8001f10 <FLASH_Erase_Sector+0x8c>)
 8001efe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f02:	6113      	str	r3, [r2, #16]
}
 8001f04:	bf00      	nop
 8001f06:	3714      	adds	r7, #20
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0e:	4770      	bx	lr
 8001f10:	40023c00 	.word	0x40023c00

08001f14 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8001f14:	b480      	push	{r7}
 8001f16:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN)!= RESET)
 8001f18:	4b20      	ldr	r3, [pc, #128]	; (8001f9c <FLASH_FlushCaches+0x88>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d017      	beq.n	8001f54 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8001f24:	4b1d      	ldr	r3, [pc, #116]	; (8001f9c <FLASH_FlushCaches+0x88>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4a1c      	ldr	r2, [pc, #112]	; (8001f9c <FLASH_FlushCaches+0x88>)
 8001f2a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001f2e:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8001f30:	4b1a      	ldr	r3, [pc, #104]	; (8001f9c <FLASH_FlushCaches+0x88>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4a19      	ldr	r2, [pc, #100]	; (8001f9c <FLASH_FlushCaches+0x88>)
 8001f36:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001f3a:	6013      	str	r3, [r2, #0]
 8001f3c:	4b17      	ldr	r3, [pc, #92]	; (8001f9c <FLASH_FlushCaches+0x88>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4a16      	ldr	r2, [pc, #88]	; (8001f9c <FLASH_FlushCaches+0x88>)
 8001f42:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001f46:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001f48:	4b14      	ldr	r3, [pc, #80]	; (8001f9c <FLASH_FlushCaches+0x88>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4a13      	ldr	r2, [pc, #76]	; (8001f9c <FLASH_FlushCaches+0x88>)
 8001f4e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f52:	6013      	str	r3, [r2, #0]
  }
  
  /* Flush data cache */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8001f54:	4b11      	ldr	r3, [pc, #68]	; (8001f9c <FLASH_FlushCaches+0x88>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d017      	beq.n	8001f90 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8001f60:	4b0e      	ldr	r3, [pc, #56]	; (8001f9c <FLASH_FlushCaches+0x88>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	4a0d      	ldr	r2, [pc, #52]	; (8001f9c <FLASH_FlushCaches+0x88>)
 8001f66:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001f6a:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8001f6c:	4b0b      	ldr	r3, [pc, #44]	; (8001f9c <FLASH_FlushCaches+0x88>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	4a0a      	ldr	r2, [pc, #40]	; (8001f9c <FLASH_FlushCaches+0x88>)
 8001f72:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001f76:	6013      	str	r3, [r2, #0]
 8001f78:	4b08      	ldr	r3, [pc, #32]	; (8001f9c <FLASH_FlushCaches+0x88>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4a07      	ldr	r2, [pc, #28]	; (8001f9c <FLASH_FlushCaches+0x88>)
 8001f7e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001f82:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8001f84:	4b05      	ldr	r3, [pc, #20]	; (8001f9c <FLASH_FlushCaches+0x88>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	4a04      	ldr	r2, [pc, #16]	; (8001f9c <FLASH_FlushCaches+0x88>)
 8001f8a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001f8e:	6013      	str	r3, [r2, #0]
  }
}
 8001f90:	bf00      	nop
 8001f92:	46bd      	mov	sp, r7
 8001f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f98:	4770      	bx	lr
 8001f9a:	bf00      	nop
 8001f9c:	40023c00 	.word	0x40023c00

08001fa0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	b089      	sub	sp, #36	; 0x24
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
 8001fa8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001faa:	2300      	movs	r3, #0
 8001fac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	61fb      	str	r3, [r7, #28]
 8001fba:	e16b      	b.n	8002294 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001fbc:	2201      	movs	r2, #1
 8001fbe:	69fb      	ldr	r3, [r7, #28]
 8001fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	697a      	ldr	r2, [r7, #20]
 8001fcc:	4013      	ands	r3, r2
 8001fce:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001fd0:	693a      	ldr	r2, [r7, #16]
 8001fd2:	697b      	ldr	r3, [r7, #20]
 8001fd4:	429a      	cmp	r2, r3
 8001fd6:	f040 815a 	bne.w	800228e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	685b      	ldr	r3, [r3, #4]
 8001fde:	2b02      	cmp	r3, #2
 8001fe0:	d003      	beq.n	8001fea <HAL_GPIO_Init+0x4a>
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	685b      	ldr	r3, [r3, #4]
 8001fe6:	2b12      	cmp	r3, #18
 8001fe8:	d123      	bne.n	8002032 <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001fea:	69fb      	ldr	r3, [r7, #28]
 8001fec:	08da      	lsrs	r2, r3, #3
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	3208      	adds	r2, #8
 8001ff2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ff6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001ff8:	69fb      	ldr	r3, [r7, #28]
 8001ffa:	f003 0307 	and.w	r3, r3, #7
 8001ffe:	009b      	lsls	r3, r3, #2
 8002000:	220f      	movs	r2, #15
 8002002:	fa02 f303 	lsl.w	r3, r2, r3
 8002006:	43db      	mvns	r3, r3
 8002008:	69ba      	ldr	r2, [r7, #24]
 800200a:	4013      	ands	r3, r2
 800200c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	691a      	ldr	r2, [r3, #16]
 8002012:	69fb      	ldr	r3, [r7, #28]
 8002014:	f003 0307 	and.w	r3, r3, #7
 8002018:	009b      	lsls	r3, r3, #2
 800201a:	fa02 f303 	lsl.w	r3, r2, r3
 800201e:	69ba      	ldr	r2, [r7, #24]
 8002020:	4313      	orrs	r3, r2
 8002022:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002024:	69fb      	ldr	r3, [r7, #28]
 8002026:	08da      	lsrs	r2, r3, #3
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	3208      	adds	r2, #8
 800202c:	69b9      	ldr	r1, [r7, #24]
 800202e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002038:	69fb      	ldr	r3, [r7, #28]
 800203a:	005b      	lsls	r3, r3, #1
 800203c:	2203      	movs	r2, #3
 800203e:	fa02 f303 	lsl.w	r3, r2, r3
 8002042:	43db      	mvns	r3, r3
 8002044:	69ba      	ldr	r2, [r7, #24]
 8002046:	4013      	ands	r3, r2
 8002048:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	685b      	ldr	r3, [r3, #4]
 800204e:	f003 0203 	and.w	r2, r3, #3
 8002052:	69fb      	ldr	r3, [r7, #28]
 8002054:	005b      	lsls	r3, r3, #1
 8002056:	fa02 f303 	lsl.w	r3, r2, r3
 800205a:	69ba      	ldr	r2, [r7, #24]
 800205c:	4313      	orrs	r3, r2
 800205e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	69ba      	ldr	r2, [r7, #24]
 8002064:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	2b01      	cmp	r3, #1
 800206c:	d00b      	beq.n	8002086 <HAL_GPIO_Init+0xe6>
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	685b      	ldr	r3, [r3, #4]
 8002072:	2b02      	cmp	r3, #2
 8002074:	d007      	beq.n	8002086 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800207a:	2b11      	cmp	r3, #17
 800207c:	d003      	beq.n	8002086 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	2b12      	cmp	r3, #18
 8002084:	d130      	bne.n	80020e8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	689b      	ldr	r3, [r3, #8]
 800208a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800208c:	69fb      	ldr	r3, [r7, #28]
 800208e:	005b      	lsls	r3, r3, #1
 8002090:	2203      	movs	r2, #3
 8002092:	fa02 f303 	lsl.w	r3, r2, r3
 8002096:	43db      	mvns	r3, r3
 8002098:	69ba      	ldr	r2, [r7, #24]
 800209a:	4013      	ands	r3, r2
 800209c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	68da      	ldr	r2, [r3, #12]
 80020a2:	69fb      	ldr	r3, [r7, #28]
 80020a4:	005b      	lsls	r3, r3, #1
 80020a6:	fa02 f303 	lsl.w	r3, r2, r3
 80020aa:	69ba      	ldr	r2, [r7, #24]
 80020ac:	4313      	orrs	r3, r2
 80020ae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	69ba      	ldr	r2, [r7, #24]
 80020b4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	685b      	ldr	r3, [r3, #4]
 80020ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80020bc:	2201      	movs	r2, #1
 80020be:	69fb      	ldr	r3, [r7, #28]
 80020c0:	fa02 f303 	lsl.w	r3, r2, r3
 80020c4:	43db      	mvns	r3, r3
 80020c6:	69ba      	ldr	r2, [r7, #24]
 80020c8:	4013      	ands	r3, r2
 80020ca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	091b      	lsrs	r3, r3, #4
 80020d2:	f003 0201 	and.w	r2, r3, #1
 80020d6:	69fb      	ldr	r3, [r7, #28]
 80020d8:	fa02 f303 	lsl.w	r3, r2, r3
 80020dc:	69ba      	ldr	r2, [r7, #24]
 80020de:	4313      	orrs	r3, r2
 80020e0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	69ba      	ldr	r2, [r7, #24]
 80020e6:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	68db      	ldr	r3, [r3, #12]
 80020ec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80020ee:	69fb      	ldr	r3, [r7, #28]
 80020f0:	005b      	lsls	r3, r3, #1
 80020f2:	2203      	movs	r2, #3
 80020f4:	fa02 f303 	lsl.w	r3, r2, r3
 80020f8:	43db      	mvns	r3, r3
 80020fa:	69ba      	ldr	r2, [r7, #24]
 80020fc:	4013      	ands	r3, r2
 80020fe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	689a      	ldr	r2, [r3, #8]
 8002104:	69fb      	ldr	r3, [r7, #28]
 8002106:	005b      	lsls	r3, r3, #1
 8002108:	fa02 f303 	lsl.w	r3, r2, r3
 800210c:	69ba      	ldr	r2, [r7, #24]
 800210e:	4313      	orrs	r3, r2
 8002110:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	69ba      	ldr	r2, [r7, #24]
 8002116:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002120:	2b00      	cmp	r3, #0
 8002122:	f000 80b4 	beq.w	800228e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002126:	2300      	movs	r3, #0
 8002128:	60fb      	str	r3, [r7, #12]
 800212a:	4b5f      	ldr	r3, [pc, #380]	; (80022a8 <HAL_GPIO_Init+0x308>)
 800212c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800212e:	4a5e      	ldr	r2, [pc, #376]	; (80022a8 <HAL_GPIO_Init+0x308>)
 8002130:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002134:	6453      	str	r3, [r2, #68]	; 0x44
 8002136:	4b5c      	ldr	r3, [pc, #368]	; (80022a8 <HAL_GPIO_Init+0x308>)
 8002138:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800213a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800213e:	60fb      	str	r3, [r7, #12]
 8002140:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002142:	4a5a      	ldr	r2, [pc, #360]	; (80022ac <HAL_GPIO_Init+0x30c>)
 8002144:	69fb      	ldr	r3, [r7, #28]
 8002146:	089b      	lsrs	r3, r3, #2
 8002148:	3302      	adds	r3, #2
 800214a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800214e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002150:	69fb      	ldr	r3, [r7, #28]
 8002152:	f003 0303 	and.w	r3, r3, #3
 8002156:	009b      	lsls	r3, r3, #2
 8002158:	220f      	movs	r2, #15
 800215a:	fa02 f303 	lsl.w	r3, r2, r3
 800215e:	43db      	mvns	r3, r3
 8002160:	69ba      	ldr	r2, [r7, #24]
 8002162:	4013      	ands	r3, r2
 8002164:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	4a51      	ldr	r2, [pc, #324]	; (80022b0 <HAL_GPIO_Init+0x310>)
 800216a:	4293      	cmp	r3, r2
 800216c:	d02b      	beq.n	80021c6 <HAL_GPIO_Init+0x226>
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	4a50      	ldr	r2, [pc, #320]	; (80022b4 <HAL_GPIO_Init+0x314>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d025      	beq.n	80021c2 <HAL_GPIO_Init+0x222>
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	4a4f      	ldr	r2, [pc, #316]	; (80022b8 <HAL_GPIO_Init+0x318>)
 800217a:	4293      	cmp	r3, r2
 800217c:	d01f      	beq.n	80021be <HAL_GPIO_Init+0x21e>
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	4a4e      	ldr	r2, [pc, #312]	; (80022bc <HAL_GPIO_Init+0x31c>)
 8002182:	4293      	cmp	r3, r2
 8002184:	d019      	beq.n	80021ba <HAL_GPIO_Init+0x21a>
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	4a4d      	ldr	r2, [pc, #308]	; (80022c0 <HAL_GPIO_Init+0x320>)
 800218a:	4293      	cmp	r3, r2
 800218c:	d013      	beq.n	80021b6 <HAL_GPIO_Init+0x216>
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	4a4c      	ldr	r2, [pc, #304]	; (80022c4 <HAL_GPIO_Init+0x324>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d00d      	beq.n	80021b2 <HAL_GPIO_Init+0x212>
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	4a4b      	ldr	r2, [pc, #300]	; (80022c8 <HAL_GPIO_Init+0x328>)
 800219a:	4293      	cmp	r3, r2
 800219c:	d007      	beq.n	80021ae <HAL_GPIO_Init+0x20e>
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	4a4a      	ldr	r2, [pc, #296]	; (80022cc <HAL_GPIO_Init+0x32c>)
 80021a2:	4293      	cmp	r3, r2
 80021a4:	d101      	bne.n	80021aa <HAL_GPIO_Init+0x20a>
 80021a6:	2307      	movs	r3, #7
 80021a8:	e00e      	b.n	80021c8 <HAL_GPIO_Init+0x228>
 80021aa:	2308      	movs	r3, #8
 80021ac:	e00c      	b.n	80021c8 <HAL_GPIO_Init+0x228>
 80021ae:	2306      	movs	r3, #6
 80021b0:	e00a      	b.n	80021c8 <HAL_GPIO_Init+0x228>
 80021b2:	2305      	movs	r3, #5
 80021b4:	e008      	b.n	80021c8 <HAL_GPIO_Init+0x228>
 80021b6:	2304      	movs	r3, #4
 80021b8:	e006      	b.n	80021c8 <HAL_GPIO_Init+0x228>
 80021ba:	2303      	movs	r3, #3
 80021bc:	e004      	b.n	80021c8 <HAL_GPIO_Init+0x228>
 80021be:	2302      	movs	r3, #2
 80021c0:	e002      	b.n	80021c8 <HAL_GPIO_Init+0x228>
 80021c2:	2301      	movs	r3, #1
 80021c4:	e000      	b.n	80021c8 <HAL_GPIO_Init+0x228>
 80021c6:	2300      	movs	r3, #0
 80021c8:	69fa      	ldr	r2, [r7, #28]
 80021ca:	f002 0203 	and.w	r2, r2, #3
 80021ce:	0092      	lsls	r2, r2, #2
 80021d0:	4093      	lsls	r3, r2
 80021d2:	69ba      	ldr	r2, [r7, #24]
 80021d4:	4313      	orrs	r3, r2
 80021d6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80021d8:	4934      	ldr	r1, [pc, #208]	; (80022ac <HAL_GPIO_Init+0x30c>)
 80021da:	69fb      	ldr	r3, [r7, #28]
 80021dc:	089b      	lsrs	r3, r3, #2
 80021de:	3302      	adds	r3, #2
 80021e0:	69ba      	ldr	r2, [r7, #24]
 80021e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80021e6:	4b3a      	ldr	r3, [pc, #232]	; (80022d0 <HAL_GPIO_Init+0x330>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021ec:	693b      	ldr	r3, [r7, #16]
 80021ee:	43db      	mvns	r3, r3
 80021f0:	69ba      	ldr	r2, [r7, #24]
 80021f2:	4013      	ands	r3, r2
 80021f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	685b      	ldr	r3, [r3, #4]
 80021fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d003      	beq.n	800220a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002202:	69ba      	ldr	r2, [r7, #24]
 8002204:	693b      	ldr	r3, [r7, #16]
 8002206:	4313      	orrs	r3, r2
 8002208:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800220a:	4a31      	ldr	r2, [pc, #196]	; (80022d0 <HAL_GPIO_Init+0x330>)
 800220c:	69bb      	ldr	r3, [r7, #24]
 800220e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002210:	4b2f      	ldr	r3, [pc, #188]	; (80022d0 <HAL_GPIO_Init+0x330>)
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002216:	693b      	ldr	r3, [r7, #16]
 8002218:	43db      	mvns	r3, r3
 800221a:	69ba      	ldr	r2, [r7, #24]
 800221c:	4013      	ands	r3, r2
 800221e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	685b      	ldr	r3, [r3, #4]
 8002224:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002228:	2b00      	cmp	r3, #0
 800222a:	d003      	beq.n	8002234 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800222c:	69ba      	ldr	r2, [r7, #24]
 800222e:	693b      	ldr	r3, [r7, #16]
 8002230:	4313      	orrs	r3, r2
 8002232:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002234:	4a26      	ldr	r2, [pc, #152]	; (80022d0 <HAL_GPIO_Init+0x330>)
 8002236:	69bb      	ldr	r3, [r7, #24]
 8002238:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800223a:	4b25      	ldr	r3, [pc, #148]	; (80022d0 <HAL_GPIO_Init+0x330>)
 800223c:	689b      	ldr	r3, [r3, #8]
 800223e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002240:	693b      	ldr	r3, [r7, #16]
 8002242:	43db      	mvns	r3, r3
 8002244:	69ba      	ldr	r2, [r7, #24]
 8002246:	4013      	ands	r3, r2
 8002248:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	685b      	ldr	r3, [r3, #4]
 800224e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002252:	2b00      	cmp	r3, #0
 8002254:	d003      	beq.n	800225e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002256:	69ba      	ldr	r2, [r7, #24]
 8002258:	693b      	ldr	r3, [r7, #16]
 800225a:	4313      	orrs	r3, r2
 800225c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800225e:	4a1c      	ldr	r2, [pc, #112]	; (80022d0 <HAL_GPIO_Init+0x330>)
 8002260:	69bb      	ldr	r3, [r7, #24]
 8002262:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002264:	4b1a      	ldr	r3, [pc, #104]	; (80022d0 <HAL_GPIO_Init+0x330>)
 8002266:	68db      	ldr	r3, [r3, #12]
 8002268:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800226a:	693b      	ldr	r3, [r7, #16]
 800226c:	43db      	mvns	r3, r3
 800226e:	69ba      	ldr	r2, [r7, #24]
 8002270:	4013      	ands	r3, r2
 8002272:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	685b      	ldr	r3, [r3, #4]
 8002278:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800227c:	2b00      	cmp	r3, #0
 800227e:	d003      	beq.n	8002288 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002280:	69ba      	ldr	r2, [r7, #24]
 8002282:	693b      	ldr	r3, [r7, #16]
 8002284:	4313      	orrs	r3, r2
 8002286:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002288:	4a11      	ldr	r2, [pc, #68]	; (80022d0 <HAL_GPIO_Init+0x330>)
 800228a:	69bb      	ldr	r3, [r7, #24]
 800228c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800228e:	69fb      	ldr	r3, [r7, #28]
 8002290:	3301      	adds	r3, #1
 8002292:	61fb      	str	r3, [r7, #28]
 8002294:	69fb      	ldr	r3, [r7, #28]
 8002296:	2b0f      	cmp	r3, #15
 8002298:	f67f ae90 	bls.w	8001fbc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800229c:	bf00      	nop
 800229e:	3724      	adds	r7, #36	; 0x24
 80022a0:	46bd      	mov	sp, r7
 80022a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a6:	4770      	bx	lr
 80022a8:	40023800 	.word	0x40023800
 80022ac:	40013800 	.word	0x40013800
 80022b0:	40020000 	.word	0x40020000
 80022b4:	40020400 	.word	0x40020400
 80022b8:	40020800 	.word	0x40020800
 80022bc:	40020c00 	.word	0x40020c00
 80022c0:	40021000 	.word	0x40021000
 80022c4:	40021400 	.word	0x40021400
 80022c8:	40021800 	.word	0x40021800
 80022cc:	40021c00 	.word	0x40021c00
 80022d0:	40013c00 	.word	0x40013c00

080022d4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80022d4:	b480      	push	{r7}
 80022d6:	b085      	sub	sp, #20
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
 80022dc:	460b      	mov	r3, r1
 80022de:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	691a      	ldr	r2, [r3, #16]
 80022e4:	887b      	ldrh	r3, [r7, #2]
 80022e6:	4013      	ands	r3, r2
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d002      	beq.n	80022f2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80022ec:	2301      	movs	r3, #1
 80022ee:	73fb      	strb	r3, [r7, #15]
 80022f0:	e001      	b.n	80022f6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80022f2:	2300      	movs	r3, #0
 80022f4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80022f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80022f8:	4618      	mov	r0, r3
 80022fa:	3714      	adds	r7, #20
 80022fc:	46bd      	mov	sp, r7
 80022fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002302:	4770      	bx	lr

08002304 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002304:	b480      	push	{r7}
 8002306:	b083      	sub	sp, #12
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
 800230c:	460b      	mov	r3, r1
 800230e:	807b      	strh	r3, [r7, #2]
 8002310:	4613      	mov	r3, r2
 8002312:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002314:	787b      	ldrb	r3, [r7, #1]
 8002316:	2b00      	cmp	r3, #0
 8002318:	d003      	beq.n	8002322 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800231a:	887a      	ldrh	r2, [r7, #2]
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002320:	e003      	b.n	800232a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002322:	887b      	ldrh	r3, [r7, #2]
 8002324:	041a      	lsls	r2, r3, #16
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	619a      	str	r2, [r3, #24]
}
 800232a:	bf00      	nop
 800232c:	370c      	adds	r7, #12
 800232e:	46bd      	mov	sp, r7
 8002330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002334:	4770      	bx	lr
	...

08002338 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b086      	sub	sp, #24
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2b00      	cmp	r3, #0
 8002344:	d101      	bne.n	800234a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002346:	2301      	movs	r3, #1
 8002348:	e22d      	b.n	80027a6 <HAL_RCC_OscConfig+0x46e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f003 0301 	and.w	r3, r3, #1
 8002352:	2b00      	cmp	r3, #0
 8002354:	d075      	beq.n	8002442 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002356:	4ba3      	ldr	r3, [pc, #652]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 8002358:	689b      	ldr	r3, [r3, #8]
 800235a:	f003 030c 	and.w	r3, r3, #12
 800235e:	2b04      	cmp	r3, #4
 8002360:	d00c      	beq.n	800237c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002362:	4ba0      	ldr	r3, [pc, #640]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 8002364:	689b      	ldr	r3, [r3, #8]
 8002366:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800236a:	2b08      	cmp	r3, #8
 800236c:	d112      	bne.n	8002394 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800236e:	4b9d      	ldr	r3, [pc, #628]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002376:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800237a:	d10b      	bne.n	8002394 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800237c:	4b99      	ldr	r3, [pc, #612]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002384:	2b00      	cmp	r3, #0
 8002386:	d05b      	beq.n	8002440 <HAL_RCC_OscConfig+0x108>
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	685b      	ldr	r3, [r3, #4]
 800238c:	2b00      	cmp	r3, #0
 800238e:	d157      	bne.n	8002440 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002390:	2301      	movs	r3, #1
 8002392:	e208      	b.n	80027a6 <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800239c:	d106      	bne.n	80023ac <HAL_RCC_OscConfig+0x74>
 800239e:	4b91      	ldr	r3, [pc, #580]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	4a90      	ldr	r2, [pc, #576]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 80023a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023a8:	6013      	str	r3, [r2, #0]
 80023aa:	e01d      	b.n	80023e8 <HAL_RCC_OscConfig+0xb0>
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80023b4:	d10c      	bne.n	80023d0 <HAL_RCC_OscConfig+0x98>
 80023b6:	4b8b      	ldr	r3, [pc, #556]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	4a8a      	ldr	r2, [pc, #552]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 80023bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80023c0:	6013      	str	r3, [r2, #0]
 80023c2:	4b88      	ldr	r3, [pc, #544]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	4a87      	ldr	r2, [pc, #540]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 80023c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023cc:	6013      	str	r3, [r2, #0]
 80023ce:	e00b      	b.n	80023e8 <HAL_RCC_OscConfig+0xb0>
 80023d0:	4b84      	ldr	r3, [pc, #528]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	4a83      	ldr	r2, [pc, #524]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 80023d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023da:	6013      	str	r3, [r2, #0]
 80023dc:	4b81      	ldr	r3, [pc, #516]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	4a80      	ldr	r2, [pc, #512]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 80023e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	685b      	ldr	r3, [r3, #4]
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d013      	beq.n	8002418 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023f0:	f7fe fe08 	bl	8001004 <HAL_GetTick>
 80023f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023f6:	e008      	b.n	800240a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80023f8:	f7fe fe04 	bl	8001004 <HAL_GetTick>
 80023fc:	4602      	mov	r2, r0
 80023fe:	693b      	ldr	r3, [r7, #16]
 8002400:	1ad3      	subs	r3, r2, r3
 8002402:	2b64      	cmp	r3, #100	; 0x64
 8002404:	d901      	bls.n	800240a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002406:	2303      	movs	r3, #3
 8002408:	e1cd      	b.n	80027a6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800240a:	4b76      	ldr	r3, [pc, #472]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002412:	2b00      	cmp	r3, #0
 8002414:	d0f0      	beq.n	80023f8 <HAL_RCC_OscConfig+0xc0>
 8002416:	e014      	b.n	8002442 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002418:	f7fe fdf4 	bl	8001004 <HAL_GetTick>
 800241c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800241e:	e008      	b.n	8002432 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002420:	f7fe fdf0 	bl	8001004 <HAL_GetTick>
 8002424:	4602      	mov	r2, r0
 8002426:	693b      	ldr	r3, [r7, #16]
 8002428:	1ad3      	subs	r3, r2, r3
 800242a:	2b64      	cmp	r3, #100	; 0x64
 800242c:	d901      	bls.n	8002432 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800242e:	2303      	movs	r3, #3
 8002430:	e1b9      	b.n	80027a6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002432:	4b6c      	ldr	r3, [pc, #432]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800243a:	2b00      	cmp	r3, #0
 800243c:	d1f0      	bne.n	8002420 <HAL_RCC_OscConfig+0xe8>
 800243e:	e000      	b.n	8002442 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002440:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f003 0302 	and.w	r3, r3, #2
 800244a:	2b00      	cmp	r3, #0
 800244c:	d063      	beq.n	8002516 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800244e:	4b65      	ldr	r3, [pc, #404]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 8002450:	689b      	ldr	r3, [r3, #8]
 8002452:	f003 030c 	and.w	r3, r3, #12
 8002456:	2b00      	cmp	r3, #0
 8002458:	d00b      	beq.n	8002472 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800245a:	4b62      	ldr	r3, [pc, #392]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 800245c:	689b      	ldr	r3, [r3, #8]
 800245e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002462:	2b08      	cmp	r3, #8
 8002464:	d11c      	bne.n	80024a0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002466:	4b5f      	ldr	r3, [pc, #380]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800246e:	2b00      	cmp	r3, #0
 8002470:	d116      	bne.n	80024a0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002472:	4b5c      	ldr	r3, [pc, #368]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f003 0302 	and.w	r3, r3, #2
 800247a:	2b00      	cmp	r3, #0
 800247c:	d005      	beq.n	800248a <HAL_RCC_OscConfig+0x152>
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	68db      	ldr	r3, [r3, #12]
 8002482:	2b01      	cmp	r3, #1
 8002484:	d001      	beq.n	800248a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002486:	2301      	movs	r3, #1
 8002488:	e18d      	b.n	80027a6 <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800248a:	4b56      	ldr	r3, [pc, #344]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	691b      	ldr	r3, [r3, #16]
 8002496:	00db      	lsls	r3, r3, #3
 8002498:	4952      	ldr	r1, [pc, #328]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 800249a:	4313      	orrs	r3, r2
 800249c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800249e:	e03a      	b.n	8002516 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	68db      	ldr	r3, [r3, #12]
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d020      	beq.n	80024ea <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80024a8:	4b4f      	ldr	r3, [pc, #316]	; (80025e8 <HAL_RCC_OscConfig+0x2b0>)
 80024aa:	2201      	movs	r2, #1
 80024ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024ae:	f7fe fda9 	bl	8001004 <HAL_GetTick>
 80024b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024b4:	e008      	b.n	80024c8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80024b6:	f7fe fda5 	bl	8001004 <HAL_GetTick>
 80024ba:	4602      	mov	r2, r0
 80024bc:	693b      	ldr	r3, [r7, #16]
 80024be:	1ad3      	subs	r3, r2, r3
 80024c0:	2b02      	cmp	r3, #2
 80024c2:	d901      	bls.n	80024c8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80024c4:	2303      	movs	r3, #3
 80024c6:	e16e      	b.n	80027a6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024c8:	4b46      	ldr	r3, [pc, #280]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f003 0302 	and.w	r3, r3, #2
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d0f0      	beq.n	80024b6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024d4:	4b43      	ldr	r3, [pc, #268]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	691b      	ldr	r3, [r3, #16]
 80024e0:	00db      	lsls	r3, r3, #3
 80024e2:	4940      	ldr	r1, [pc, #256]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 80024e4:	4313      	orrs	r3, r2
 80024e6:	600b      	str	r3, [r1, #0]
 80024e8:	e015      	b.n	8002516 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80024ea:	4b3f      	ldr	r3, [pc, #252]	; (80025e8 <HAL_RCC_OscConfig+0x2b0>)
 80024ec:	2200      	movs	r2, #0
 80024ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024f0:	f7fe fd88 	bl	8001004 <HAL_GetTick>
 80024f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024f6:	e008      	b.n	800250a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80024f8:	f7fe fd84 	bl	8001004 <HAL_GetTick>
 80024fc:	4602      	mov	r2, r0
 80024fe:	693b      	ldr	r3, [r7, #16]
 8002500:	1ad3      	subs	r3, r2, r3
 8002502:	2b02      	cmp	r3, #2
 8002504:	d901      	bls.n	800250a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002506:	2303      	movs	r3, #3
 8002508:	e14d      	b.n	80027a6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800250a:	4b36      	ldr	r3, [pc, #216]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f003 0302 	and.w	r3, r3, #2
 8002512:	2b00      	cmp	r3, #0
 8002514:	d1f0      	bne.n	80024f8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f003 0308 	and.w	r3, r3, #8
 800251e:	2b00      	cmp	r3, #0
 8002520:	d030      	beq.n	8002584 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	695b      	ldr	r3, [r3, #20]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d016      	beq.n	8002558 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800252a:	4b30      	ldr	r3, [pc, #192]	; (80025ec <HAL_RCC_OscConfig+0x2b4>)
 800252c:	2201      	movs	r2, #1
 800252e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002530:	f7fe fd68 	bl	8001004 <HAL_GetTick>
 8002534:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002536:	e008      	b.n	800254a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002538:	f7fe fd64 	bl	8001004 <HAL_GetTick>
 800253c:	4602      	mov	r2, r0
 800253e:	693b      	ldr	r3, [r7, #16]
 8002540:	1ad3      	subs	r3, r2, r3
 8002542:	2b02      	cmp	r3, #2
 8002544:	d901      	bls.n	800254a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002546:	2303      	movs	r3, #3
 8002548:	e12d      	b.n	80027a6 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800254a:	4b26      	ldr	r3, [pc, #152]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 800254c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800254e:	f003 0302 	and.w	r3, r3, #2
 8002552:	2b00      	cmp	r3, #0
 8002554:	d0f0      	beq.n	8002538 <HAL_RCC_OscConfig+0x200>
 8002556:	e015      	b.n	8002584 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002558:	4b24      	ldr	r3, [pc, #144]	; (80025ec <HAL_RCC_OscConfig+0x2b4>)
 800255a:	2200      	movs	r2, #0
 800255c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800255e:	f7fe fd51 	bl	8001004 <HAL_GetTick>
 8002562:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002564:	e008      	b.n	8002578 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002566:	f7fe fd4d 	bl	8001004 <HAL_GetTick>
 800256a:	4602      	mov	r2, r0
 800256c:	693b      	ldr	r3, [r7, #16]
 800256e:	1ad3      	subs	r3, r2, r3
 8002570:	2b02      	cmp	r3, #2
 8002572:	d901      	bls.n	8002578 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002574:	2303      	movs	r3, #3
 8002576:	e116      	b.n	80027a6 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002578:	4b1a      	ldr	r3, [pc, #104]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 800257a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800257c:	f003 0302 	and.w	r3, r3, #2
 8002580:	2b00      	cmp	r3, #0
 8002582:	d1f0      	bne.n	8002566 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f003 0304 	and.w	r3, r3, #4
 800258c:	2b00      	cmp	r3, #0
 800258e:	f000 80a0 	beq.w	80026d2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002592:	2300      	movs	r3, #0
 8002594:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002596:	4b13      	ldr	r3, [pc, #76]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 8002598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800259a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d10f      	bne.n	80025c2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025a2:	2300      	movs	r3, #0
 80025a4:	60fb      	str	r3, [r7, #12]
 80025a6:	4b0f      	ldr	r3, [pc, #60]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 80025a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025aa:	4a0e      	ldr	r2, [pc, #56]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 80025ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025b0:	6413      	str	r3, [r2, #64]	; 0x40
 80025b2:	4b0c      	ldr	r3, [pc, #48]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 80025b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025ba:	60fb      	str	r3, [r7, #12]
 80025bc:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80025be:	2301      	movs	r3, #1
 80025c0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025c2:	4b0b      	ldr	r3, [pc, #44]	; (80025f0 <HAL_RCC_OscConfig+0x2b8>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d121      	bne.n	8002612 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80025ce:	4b08      	ldr	r3, [pc, #32]	; (80025f0 <HAL_RCC_OscConfig+0x2b8>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	4a07      	ldr	r2, [pc, #28]	; (80025f0 <HAL_RCC_OscConfig+0x2b8>)
 80025d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80025da:	f7fe fd13 	bl	8001004 <HAL_GetTick>
 80025de:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025e0:	e011      	b.n	8002606 <HAL_RCC_OscConfig+0x2ce>
 80025e2:	bf00      	nop
 80025e4:	40023800 	.word	0x40023800
 80025e8:	42470000 	.word	0x42470000
 80025ec:	42470e80 	.word	0x42470e80
 80025f0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025f4:	f7fe fd06 	bl	8001004 <HAL_GetTick>
 80025f8:	4602      	mov	r2, r0
 80025fa:	693b      	ldr	r3, [r7, #16]
 80025fc:	1ad3      	subs	r3, r2, r3
 80025fe:	2b02      	cmp	r3, #2
 8002600:	d901      	bls.n	8002606 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002602:	2303      	movs	r3, #3
 8002604:	e0cf      	b.n	80027a6 <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002606:	4b6a      	ldr	r3, [pc, #424]	; (80027b0 <HAL_RCC_OscConfig+0x478>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800260e:	2b00      	cmp	r3, #0
 8002610:	d0f0      	beq.n	80025f4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	689b      	ldr	r3, [r3, #8]
 8002616:	2b01      	cmp	r3, #1
 8002618:	d106      	bne.n	8002628 <HAL_RCC_OscConfig+0x2f0>
 800261a:	4b66      	ldr	r3, [pc, #408]	; (80027b4 <HAL_RCC_OscConfig+0x47c>)
 800261c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800261e:	4a65      	ldr	r2, [pc, #404]	; (80027b4 <HAL_RCC_OscConfig+0x47c>)
 8002620:	f043 0301 	orr.w	r3, r3, #1
 8002624:	6713      	str	r3, [r2, #112]	; 0x70
 8002626:	e01c      	b.n	8002662 <HAL_RCC_OscConfig+0x32a>
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	689b      	ldr	r3, [r3, #8]
 800262c:	2b05      	cmp	r3, #5
 800262e:	d10c      	bne.n	800264a <HAL_RCC_OscConfig+0x312>
 8002630:	4b60      	ldr	r3, [pc, #384]	; (80027b4 <HAL_RCC_OscConfig+0x47c>)
 8002632:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002634:	4a5f      	ldr	r2, [pc, #380]	; (80027b4 <HAL_RCC_OscConfig+0x47c>)
 8002636:	f043 0304 	orr.w	r3, r3, #4
 800263a:	6713      	str	r3, [r2, #112]	; 0x70
 800263c:	4b5d      	ldr	r3, [pc, #372]	; (80027b4 <HAL_RCC_OscConfig+0x47c>)
 800263e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002640:	4a5c      	ldr	r2, [pc, #368]	; (80027b4 <HAL_RCC_OscConfig+0x47c>)
 8002642:	f043 0301 	orr.w	r3, r3, #1
 8002646:	6713      	str	r3, [r2, #112]	; 0x70
 8002648:	e00b      	b.n	8002662 <HAL_RCC_OscConfig+0x32a>
 800264a:	4b5a      	ldr	r3, [pc, #360]	; (80027b4 <HAL_RCC_OscConfig+0x47c>)
 800264c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800264e:	4a59      	ldr	r2, [pc, #356]	; (80027b4 <HAL_RCC_OscConfig+0x47c>)
 8002650:	f023 0301 	bic.w	r3, r3, #1
 8002654:	6713      	str	r3, [r2, #112]	; 0x70
 8002656:	4b57      	ldr	r3, [pc, #348]	; (80027b4 <HAL_RCC_OscConfig+0x47c>)
 8002658:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800265a:	4a56      	ldr	r2, [pc, #344]	; (80027b4 <HAL_RCC_OscConfig+0x47c>)
 800265c:	f023 0304 	bic.w	r3, r3, #4
 8002660:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	689b      	ldr	r3, [r3, #8]
 8002666:	2b00      	cmp	r3, #0
 8002668:	d015      	beq.n	8002696 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800266a:	f7fe fccb 	bl	8001004 <HAL_GetTick>
 800266e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002670:	e00a      	b.n	8002688 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002672:	f7fe fcc7 	bl	8001004 <HAL_GetTick>
 8002676:	4602      	mov	r2, r0
 8002678:	693b      	ldr	r3, [r7, #16]
 800267a:	1ad3      	subs	r3, r2, r3
 800267c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002680:	4293      	cmp	r3, r2
 8002682:	d901      	bls.n	8002688 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002684:	2303      	movs	r3, #3
 8002686:	e08e      	b.n	80027a6 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002688:	4b4a      	ldr	r3, [pc, #296]	; (80027b4 <HAL_RCC_OscConfig+0x47c>)
 800268a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800268c:	f003 0302 	and.w	r3, r3, #2
 8002690:	2b00      	cmp	r3, #0
 8002692:	d0ee      	beq.n	8002672 <HAL_RCC_OscConfig+0x33a>
 8002694:	e014      	b.n	80026c0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002696:	f7fe fcb5 	bl	8001004 <HAL_GetTick>
 800269a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800269c:	e00a      	b.n	80026b4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800269e:	f7fe fcb1 	bl	8001004 <HAL_GetTick>
 80026a2:	4602      	mov	r2, r0
 80026a4:	693b      	ldr	r3, [r7, #16]
 80026a6:	1ad3      	subs	r3, r2, r3
 80026a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80026ac:	4293      	cmp	r3, r2
 80026ae:	d901      	bls.n	80026b4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80026b0:	2303      	movs	r3, #3
 80026b2:	e078      	b.n	80027a6 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026b4:	4b3f      	ldr	r3, [pc, #252]	; (80027b4 <HAL_RCC_OscConfig+0x47c>)
 80026b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026b8:	f003 0302 	and.w	r3, r3, #2
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d1ee      	bne.n	800269e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80026c0:	7dfb      	ldrb	r3, [r7, #23]
 80026c2:	2b01      	cmp	r3, #1
 80026c4:	d105      	bne.n	80026d2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026c6:	4b3b      	ldr	r3, [pc, #236]	; (80027b4 <HAL_RCC_OscConfig+0x47c>)
 80026c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ca:	4a3a      	ldr	r2, [pc, #232]	; (80027b4 <HAL_RCC_OscConfig+0x47c>)
 80026cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80026d0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	699b      	ldr	r3, [r3, #24]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d064      	beq.n	80027a4 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80026da:	4b36      	ldr	r3, [pc, #216]	; (80027b4 <HAL_RCC_OscConfig+0x47c>)
 80026dc:	689b      	ldr	r3, [r3, #8]
 80026de:	f003 030c 	and.w	r3, r3, #12
 80026e2:	2b08      	cmp	r3, #8
 80026e4:	d05c      	beq.n	80027a0 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	699b      	ldr	r3, [r3, #24]
 80026ea:	2b02      	cmp	r3, #2
 80026ec:	d141      	bne.n	8002772 <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026ee:	4b32      	ldr	r3, [pc, #200]	; (80027b8 <HAL_RCC_OscConfig+0x480>)
 80026f0:	2200      	movs	r2, #0
 80026f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026f4:	f7fe fc86 	bl	8001004 <HAL_GetTick>
 80026f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026fa:	e008      	b.n	800270e <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026fc:	f7fe fc82 	bl	8001004 <HAL_GetTick>
 8002700:	4602      	mov	r2, r0
 8002702:	693b      	ldr	r3, [r7, #16]
 8002704:	1ad3      	subs	r3, r2, r3
 8002706:	2b02      	cmp	r3, #2
 8002708:	d901      	bls.n	800270e <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 800270a:	2303      	movs	r3, #3
 800270c:	e04b      	b.n	80027a6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800270e:	4b29      	ldr	r3, [pc, #164]	; (80027b4 <HAL_RCC_OscConfig+0x47c>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002716:	2b00      	cmp	r3, #0
 8002718:	d1f0      	bne.n	80026fc <HAL_RCC_OscConfig+0x3c4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	69da      	ldr	r2, [r3, #28]
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6a1b      	ldr	r3, [r3, #32]
 8002722:	431a      	orrs	r2, r3
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002728:	019b      	lsls	r3, r3, #6
 800272a:	431a      	orrs	r2, r3
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002730:	085b      	lsrs	r3, r3, #1
 8002732:	3b01      	subs	r3, #1
 8002734:	041b      	lsls	r3, r3, #16
 8002736:	431a      	orrs	r2, r3
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800273c:	061b      	lsls	r3, r3, #24
 800273e:	491d      	ldr	r1, [pc, #116]	; (80027b4 <HAL_RCC_OscConfig+0x47c>)
 8002740:	4313      	orrs	r3, r2
 8002742:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002744:	4b1c      	ldr	r3, [pc, #112]	; (80027b8 <HAL_RCC_OscConfig+0x480>)
 8002746:	2201      	movs	r2, #1
 8002748:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800274a:	f7fe fc5b 	bl	8001004 <HAL_GetTick>
 800274e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002750:	e008      	b.n	8002764 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002752:	f7fe fc57 	bl	8001004 <HAL_GetTick>
 8002756:	4602      	mov	r2, r0
 8002758:	693b      	ldr	r3, [r7, #16]
 800275a:	1ad3      	subs	r3, r2, r3
 800275c:	2b02      	cmp	r3, #2
 800275e:	d901      	bls.n	8002764 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8002760:	2303      	movs	r3, #3
 8002762:	e020      	b.n	80027a6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002764:	4b13      	ldr	r3, [pc, #76]	; (80027b4 <HAL_RCC_OscConfig+0x47c>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800276c:	2b00      	cmp	r3, #0
 800276e:	d0f0      	beq.n	8002752 <HAL_RCC_OscConfig+0x41a>
 8002770:	e018      	b.n	80027a4 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002772:	4b11      	ldr	r3, [pc, #68]	; (80027b8 <HAL_RCC_OscConfig+0x480>)
 8002774:	2200      	movs	r2, #0
 8002776:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002778:	f7fe fc44 	bl	8001004 <HAL_GetTick>
 800277c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800277e:	e008      	b.n	8002792 <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002780:	f7fe fc40 	bl	8001004 <HAL_GetTick>
 8002784:	4602      	mov	r2, r0
 8002786:	693b      	ldr	r3, [r7, #16]
 8002788:	1ad3      	subs	r3, r2, r3
 800278a:	2b02      	cmp	r3, #2
 800278c:	d901      	bls.n	8002792 <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 800278e:	2303      	movs	r3, #3
 8002790:	e009      	b.n	80027a6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002792:	4b08      	ldr	r3, [pc, #32]	; (80027b4 <HAL_RCC_OscConfig+0x47c>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800279a:	2b00      	cmp	r3, #0
 800279c:	d1f0      	bne.n	8002780 <HAL_RCC_OscConfig+0x448>
 800279e:	e001      	b.n	80027a4 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80027a0:	2301      	movs	r3, #1
 80027a2:	e000      	b.n	80027a6 <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 80027a4:	2300      	movs	r3, #0
}
 80027a6:	4618      	mov	r0, r3
 80027a8:	3718      	adds	r7, #24
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bd80      	pop	{r7, pc}
 80027ae:	bf00      	nop
 80027b0:	40007000 	.word	0x40007000
 80027b4:	40023800 	.word	0x40023800
 80027b8:	42470060 	.word	0x42470060

080027bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b084      	sub	sp, #16
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
 80027c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d101      	bne.n	80027d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80027cc:	2301      	movs	r3, #1
 80027ce:	e0ca      	b.n	8002966 <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80027d0:	4b67      	ldr	r3, [pc, #412]	; (8002970 <HAL_RCC_ClockConfig+0x1b4>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f003 030f 	and.w	r3, r3, #15
 80027d8:	683a      	ldr	r2, [r7, #0]
 80027da:	429a      	cmp	r2, r3
 80027dc:	d90c      	bls.n	80027f8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027de:	4b64      	ldr	r3, [pc, #400]	; (8002970 <HAL_RCC_ClockConfig+0x1b4>)
 80027e0:	683a      	ldr	r2, [r7, #0]
 80027e2:	b2d2      	uxtb	r2, r2
 80027e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80027e6:	4b62      	ldr	r3, [pc, #392]	; (8002970 <HAL_RCC_ClockConfig+0x1b4>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f003 030f 	and.w	r3, r3, #15
 80027ee:	683a      	ldr	r2, [r7, #0]
 80027f0:	429a      	cmp	r2, r3
 80027f2:	d001      	beq.n	80027f8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80027f4:	2301      	movs	r3, #1
 80027f6:	e0b6      	b.n	8002966 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f003 0302 	and.w	r3, r3, #2
 8002800:	2b00      	cmp	r3, #0
 8002802:	d020      	beq.n	8002846 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f003 0304 	and.w	r3, r3, #4
 800280c:	2b00      	cmp	r3, #0
 800280e:	d005      	beq.n	800281c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002810:	4b58      	ldr	r3, [pc, #352]	; (8002974 <HAL_RCC_ClockConfig+0x1b8>)
 8002812:	689b      	ldr	r3, [r3, #8]
 8002814:	4a57      	ldr	r2, [pc, #348]	; (8002974 <HAL_RCC_ClockConfig+0x1b8>)
 8002816:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800281a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f003 0308 	and.w	r3, r3, #8
 8002824:	2b00      	cmp	r3, #0
 8002826:	d005      	beq.n	8002834 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002828:	4b52      	ldr	r3, [pc, #328]	; (8002974 <HAL_RCC_ClockConfig+0x1b8>)
 800282a:	689b      	ldr	r3, [r3, #8]
 800282c:	4a51      	ldr	r2, [pc, #324]	; (8002974 <HAL_RCC_ClockConfig+0x1b8>)
 800282e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002832:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002834:	4b4f      	ldr	r3, [pc, #316]	; (8002974 <HAL_RCC_ClockConfig+0x1b8>)
 8002836:	689b      	ldr	r3, [r3, #8]
 8002838:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	689b      	ldr	r3, [r3, #8]
 8002840:	494c      	ldr	r1, [pc, #304]	; (8002974 <HAL_RCC_ClockConfig+0x1b8>)
 8002842:	4313      	orrs	r3, r2
 8002844:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f003 0301 	and.w	r3, r3, #1
 800284e:	2b00      	cmp	r3, #0
 8002850:	d044      	beq.n	80028dc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	685b      	ldr	r3, [r3, #4]
 8002856:	2b01      	cmp	r3, #1
 8002858:	d107      	bne.n	800286a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800285a:	4b46      	ldr	r3, [pc, #280]	; (8002974 <HAL_RCC_ClockConfig+0x1b8>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002862:	2b00      	cmp	r3, #0
 8002864:	d119      	bne.n	800289a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002866:	2301      	movs	r3, #1
 8002868:	e07d      	b.n	8002966 <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	685b      	ldr	r3, [r3, #4]
 800286e:	2b02      	cmp	r3, #2
 8002870:	d003      	beq.n	800287a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002876:	2b03      	cmp	r3, #3
 8002878:	d107      	bne.n	800288a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800287a:	4b3e      	ldr	r3, [pc, #248]	; (8002974 <HAL_RCC_ClockConfig+0x1b8>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002882:	2b00      	cmp	r3, #0
 8002884:	d109      	bne.n	800289a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002886:	2301      	movs	r3, #1
 8002888:	e06d      	b.n	8002966 <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800288a:	4b3a      	ldr	r3, [pc, #232]	; (8002974 <HAL_RCC_ClockConfig+0x1b8>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f003 0302 	and.w	r3, r3, #2
 8002892:	2b00      	cmp	r3, #0
 8002894:	d101      	bne.n	800289a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002896:	2301      	movs	r3, #1
 8002898:	e065      	b.n	8002966 <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800289a:	4b36      	ldr	r3, [pc, #216]	; (8002974 <HAL_RCC_ClockConfig+0x1b8>)
 800289c:	689b      	ldr	r3, [r3, #8]
 800289e:	f023 0203 	bic.w	r2, r3, #3
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	4933      	ldr	r1, [pc, #204]	; (8002974 <HAL_RCC_ClockConfig+0x1b8>)
 80028a8:	4313      	orrs	r3, r2
 80028aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80028ac:	f7fe fbaa 	bl	8001004 <HAL_GetTick>
 80028b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028b2:	e00a      	b.n	80028ca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028b4:	f7fe fba6 	bl	8001004 <HAL_GetTick>
 80028b8:	4602      	mov	r2, r0
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	1ad3      	subs	r3, r2, r3
 80028be:	f241 3288 	movw	r2, #5000	; 0x1388
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d901      	bls.n	80028ca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80028c6:	2303      	movs	r3, #3
 80028c8:	e04d      	b.n	8002966 <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028ca:	4b2a      	ldr	r3, [pc, #168]	; (8002974 <HAL_RCC_ClockConfig+0x1b8>)
 80028cc:	689b      	ldr	r3, [r3, #8]
 80028ce:	f003 020c 	and.w	r2, r3, #12
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	685b      	ldr	r3, [r3, #4]
 80028d6:	009b      	lsls	r3, r3, #2
 80028d8:	429a      	cmp	r2, r3
 80028da:	d1eb      	bne.n	80028b4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80028dc:	4b24      	ldr	r3, [pc, #144]	; (8002970 <HAL_RCC_ClockConfig+0x1b4>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f003 030f 	and.w	r3, r3, #15
 80028e4:	683a      	ldr	r2, [r7, #0]
 80028e6:	429a      	cmp	r2, r3
 80028e8:	d20c      	bcs.n	8002904 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028ea:	4b21      	ldr	r3, [pc, #132]	; (8002970 <HAL_RCC_ClockConfig+0x1b4>)
 80028ec:	683a      	ldr	r2, [r7, #0]
 80028ee:	b2d2      	uxtb	r2, r2
 80028f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80028f2:	4b1f      	ldr	r3, [pc, #124]	; (8002970 <HAL_RCC_ClockConfig+0x1b4>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f003 030f 	and.w	r3, r3, #15
 80028fa:	683a      	ldr	r2, [r7, #0]
 80028fc:	429a      	cmp	r2, r3
 80028fe:	d001      	beq.n	8002904 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002900:	2301      	movs	r3, #1
 8002902:	e030      	b.n	8002966 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f003 0304 	and.w	r3, r3, #4
 800290c:	2b00      	cmp	r3, #0
 800290e:	d008      	beq.n	8002922 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002910:	4b18      	ldr	r3, [pc, #96]	; (8002974 <HAL_RCC_ClockConfig+0x1b8>)
 8002912:	689b      	ldr	r3, [r3, #8]
 8002914:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	68db      	ldr	r3, [r3, #12]
 800291c:	4915      	ldr	r1, [pc, #84]	; (8002974 <HAL_RCC_ClockConfig+0x1b8>)
 800291e:	4313      	orrs	r3, r2
 8002920:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f003 0308 	and.w	r3, r3, #8
 800292a:	2b00      	cmp	r3, #0
 800292c:	d009      	beq.n	8002942 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800292e:	4b11      	ldr	r3, [pc, #68]	; (8002974 <HAL_RCC_ClockConfig+0x1b8>)
 8002930:	689b      	ldr	r3, [r3, #8]
 8002932:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	691b      	ldr	r3, [r3, #16]
 800293a:	00db      	lsls	r3, r3, #3
 800293c:	490d      	ldr	r1, [pc, #52]	; (8002974 <HAL_RCC_ClockConfig+0x1b8>)
 800293e:	4313      	orrs	r3, r2
 8002940:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002942:	f000 f81d 	bl	8002980 <HAL_RCC_GetSysClockFreq>
 8002946:	4601      	mov	r1, r0
 8002948:	4b0a      	ldr	r3, [pc, #40]	; (8002974 <HAL_RCC_ClockConfig+0x1b8>)
 800294a:	689b      	ldr	r3, [r3, #8]
 800294c:	091b      	lsrs	r3, r3, #4
 800294e:	f003 030f 	and.w	r3, r3, #15
 8002952:	4a09      	ldr	r2, [pc, #36]	; (8002978 <HAL_RCC_ClockConfig+0x1bc>)
 8002954:	5cd3      	ldrb	r3, [r2, r3]
 8002956:	fa21 f303 	lsr.w	r3, r1, r3
 800295a:	4a08      	ldr	r2, [pc, #32]	; (800297c <HAL_RCC_ClockConfig+0x1c0>)
 800295c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 800295e:	2000      	movs	r0, #0
 8002960:	f7fe fb0c 	bl	8000f7c <HAL_InitTick>

  return HAL_OK;
 8002964:	2300      	movs	r3, #0
}
 8002966:	4618      	mov	r0, r3
 8002968:	3710      	adds	r7, #16
 800296a:	46bd      	mov	sp, r7
 800296c:	bd80      	pop	{r7, pc}
 800296e:	bf00      	nop
 8002970:	40023c00 	.word	0x40023c00
 8002974:	40023800 	.word	0x40023800
 8002978:	08012b58 	.word	0x08012b58
 800297c:	20000080 	.word	0x20000080

08002980 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002980:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002982:	b085      	sub	sp, #20
 8002984:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002986:	2300      	movs	r3, #0
 8002988:	607b      	str	r3, [r7, #4]
 800298a:	2300      	movs	r3, #0
 800298c:	60fb      	str	r3, [r7, #12]
 800298e:	2300      	movs	r3, #0
 8002990:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002992:	2300      	movs	r3, #0
 8002994:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002996:	4b50      	ldr	r3, [pc, #320]	; (8002ad8 <HAL_RCC_GetSysClockFreq+0x158>)
 8002998:	689b      	ldr	r3, [r3, #8]
 800299a:	f003 030c 	and.w	r3, r3, #12
 800299e:	2b04      	cmp	r3, #4
 80029a0:	d007      	beq.n	80029b2 <HAL_RCC_GetSysClockFreq+0x32>
 80029a2:	2b08      	cmp	r3, #8
 80029a4:	d008      	beq.n	80029b8 <HAL_RCC_GetSysClockFreq+0x38>
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	f040 808d 	bne.w	8002ac6 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80029ac:	4b4b      	ldr	r3, [pc, #300]	; (8002adc <HAL_RCC_GetSysClockFreq+0x15c>)
 80029ae:	60bb      	str	r3, [r7, #8]
       break;
 80029b0:	e08c      	b.n	8002acc <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80029b2:	4b4b      	ldr	r3, [pc, #300]	; (8002ae0 <HAL_RCC_GetSysClockFreq+0x160>)
 80029b4:	60bb      	str	r3, [r7, #8]
      break;
 80029b6:	e089      	b.n	8002acc <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80029b8:	4b47      	ldr	r3, [pc, #284]	; (8002ad8 <HAL_RCC_GetSysClockFreq+0x158>)
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80029c0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80029c2:	4b45      	ldr	r3, [pc, #276]	; (8002ad8 <HAL_RCC_GetSysClockFreq+0x158>)
 80029c4:	685b      	ldr	r3, [r3, #4]
 80029c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d023      	beq.n	8002a16 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80029ce:	4b42      	ldr	r3, [pc, #264]	; (8002ad8 <HAL_RCC_GetSysClockFreq+0x158>)
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	099b      	lsrs	r3, r3, #6
 80029d4:	f04f 0400 	mov.w	r4, #0
 80029d8:	f240 11ff 	movw	r1, #511	; 0x1ff
 80029dc:	f04f 0200 	mov.w	r2, #0
 80029e0:	ea03 0501 	and.w	r5, r3, r1
 80029e4:	ea04 0602 	and.w	r6, r4, r2
 80029e8:	4a3d      	ldr	r2, [pc, #244]	; (8002ae0 <HAL_RCC_GetSysClockFreq+0x160>)
 80029ea:	fb02 f106 	mul.w	r1, r2, r6
 80029ee:	2200      	movs	r2, #0
 80029f0:	fb02 f205 	mul.w	r2, r2, r5
 80029f4:	440a      	add	r2, r1
 80029f6:	493a      	ldr	r1, [pc, #232]	; (8002ae0 <HAL_RCC_GetSysClockFreq+0x160>)
 80029f8:	fba5 0101 	umull	r0, r1, r5, r1
 80029fc:	1853      	adds	r3, r2, r1
 80029fe:	4619      	mov	r1, r3
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	f04f 0400 	mov.w	r4, #0
 8002a06:	461a      	mov	r2, r3
 8002a08:	4623      	mov	r3, r4
 8002a0a:	f7fe f915 	bl	8000c38 <__aeabi_uldivmod>
 8002a0e:	4603      	mov	r3, r0
 8002a10:	460c      	mov	r4, r1
 8002a12:	60fb      	str	r3, [r7, #12]
 8002a14:	e049      	b.n	8002aaa <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a16:	4b30      	ldr	r3, [pc, #192]	; (8002ad8 <HAL_RCC_GetSysClockFreq+0x158>)
 8002a18:	685b      	ldr	r3, [r3, #4]
 8002a1a:	099b      	lsrs	r3, r3, #6
 8002a1c:	f04f 0400 	mov.w	r4, #0
 8002a20:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002a24:	f04f 0200 	mov.w	r2, #0
 8002a28:	ea03 0501 	and.w	r5, r3, r1
 8002a2c:	ea04 0602 	and.w	r6, r4, r2
 8002a30:	4629      	mov	r1, r5
 8002a32:	4632      	mov	r2, r6
 8002a34:	f04f 0300 	mov.w	r3, #0
 8002a38:	f04f 0400 	mov.w	r4, #0
 8002a3c:	0154      	lsls	r4, r2, #5
 8002a3e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002a42:	014b      	lsls	r3, r1, #5
 8002a44:	4619      	mov	r1, r3
 8002a46:	4622      	mov	r2, r4
 8002a48:	1b49      	subs	r1, r1, r5
 8002a4a:	eb62 0206 	sbc.w	r2, r2, r6
 8002a4e:	f04f 0300 	mov.w	r3, #0
 8002a52:	f04f 0400 	mov.w	r4, #0
 8002a56:	0194      	lsls	r4, r2, #6
 8002a58:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002a5c:	018b      	lsls	r3, r1, #6
 8002a5e:	1a5b      	subs	r3, r3, r1
 8002a60:	eb64 0402 	sbc.w	r4, r4, r2
 8002a64:	f04f 0100 	mov.w	r1, #0
 8002a68:	f04f 0200 	mov.w	r2, #0
 8002a6c:	00e2      	lsls	r2, r4, #3
 8002a6e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002a72:	00d9      	lsls	r1, r3, #3
 8002a74:	460b      	mov	r3, r1
 8002a76:	4614      	mov	r4, r2
 8002a78:	195b      	adds	r3, r3, r5
 8002a7a:	eb44 0406 	adc.w	r4, r4, r6
 8002a7e:	f04f 0100 	mov.w	r1, #0
 8002a82:	f04f 0200 	mov.w	r2, #0
 8002a86:	02a2      	lsls	r2, r4, #10
 8002a88:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002a8c:	0299      	lsls	r1, r3, #10
 8002a8e:	460b      	mov	r3, r1
 8002a90:	4614      	mov	r4, r2
 8002a92:	4618      	mov	r0, r3
 8002a94:	4621      	mov	r1, r4
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	f04f 0400 	mov.w	r4, #0
 8002a9c:	461a      	mov	r2, r3
 8002a9e:	4623      	mov	r3, r4
 8002aa0:	f7fe f8ca 	bl	8000c38 <__aeabi_uldivmod>
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	460c      	mov	r4, r1
 8002aa8:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002aaa:	4b0b      	ldr	r3, [pc, #44]	; (8002ad8 <HAL_RCC_GetSysClockFreq+0x158>)
 8002aac:	685b      	ldr	r3, [r3, #4]
 8002aae:	0c1b      	lsrs	r3, r3, #16
 8002ab0:	f003 0303 	and.w	r3, r3, #3
 8002ab4:	3301      	adds	r3, #1
 8002ab6:	005b      	lsls	r3, r3, #1
 8002ab8:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002aba:	68fa      	ldr	r2, [r7, #12]
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ac2:	60bb      	str	r3, [r7, #8]
      break;
 8002ac4:	e002      	b.n	8002acc <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002ac6:	4b05      	ldr	r3, [pc, #20]	; (8002adc <HAL_RCC_GetSysClockFreq+0x15c>)
 8002ac8:	60bb      	str	r3, [r7, #8]
      break;
 8002aca:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002acc:	68bb      	ldr	r3, [r7, #8]
}
 8002ace:	4618      	mov	r0, r3
 8002ad0:	3714      	adds	r7, #20
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002ad6:	bf00      	nop
 8002ad8:	40023800 	.word	0x40023800
 8002adc:	00f42400 	.word	0x00f42400
 8002ae0:	017d7840 	.word	0x017d7840

08002ae4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ae8:	4b03      	ldr	r3, [pc, #12]	; (8002af8 <HAL_RCC_GetHCLKFreq+0x14>)
 8002aea:	681b      	ldr	r3, [r3, #0]
}
 8002aec:	4618      	mov	r0, r3
 8002aee:	46bd      	mov	sp, r7
 8002af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af4:	4770      	bx	lr
 8002af6:	bf00      	nop
 8002af8:	20000080 	.word	0x20000080

08002afc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002b00:	f7ff fff0 	bl	8002ae4 <HAL_RCC_GetHCLKFreq>
 8002b04:	4601      	mov	r1, r0
 8002b06:	4b05      	ldr	r3, [pc, #20]	; (8002b1c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002b08:	689b      	ldr	r3, [r3, #8]
 8002b0a:	0a9b      	lsrs	r3, r3, #10
 8002b0c:	f003 0307 	and.w	r3, r3, #7
 8002b10:	4a03      	ldr	r2, [pc, #12]	; (8002b20 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002b12:	5cd3      	ldrb	r3, [r2, r3]
 8002b14:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002b18:	4618      	mov	r0, r3
 8002b1a:	bd80      	pop	{r7, pc}
 8002b1c:	40023800 	.word	0x40023800
 8002b20:	08012b68 	.word	0x08012b68

08002b24 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002b28:	f7ff ffdc 	bl	8002ae4 <HAL_RCC_GetHCLKFreq>
 8002b2c:	4601      	mov	r1, r0
 8002b2e:	4b05      	ldr	r3, [pc, #20]	; (8002b44 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002b30:	689b      	ldr	r3, [r3, #8]
 8002b32:	0b5b      	lsrs	r3, r3, #13
 8002b34:	f003 0307 	and.w	r3, r3, #7
 8002b38:	4a03      	ldr	r2, [pc, #12]	; (8002b48 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002b3a:	5cd3      	ldrb	r3, [r2, r3]
 8002b3c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002b40:	4618      	mov	r0, r3
 8002b42:	bd80      	pop	{r7, pc}
 8002b44:	40023800 	.word	0x40023800
 8002b48:	08012b68 	.word	0x08012b68

08002b4c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b082      	sub	sp, #8
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d101      	bne.n	8002b5e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	e056      	b.n	8002c0c <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	2200      	movs	r2, #0
 8002b62:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002b6a:	b2db      	uxtb	r3, r3
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d106      	bne.n	8002b7e <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2200      	movs	r2, #0
 8002b74:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002b78:	6878      	ldr	r0, [r7, #4]
 8002b7a:	f00e f90b 	bl	8010d94 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	2202      	movs	r2, #2
 8002b82:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	681a      	ldr	r2, [r3, #0]
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002b94:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	685a      	ldr	r2, [r3, #4]
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	689b      	ldr	r3, [r3, #8]
 8002b9e:	431a      	orrs	r2, r3
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	68db      	ldr	r3, [r3, #12]
 8002ba4:	431a      	orrs	r2, r3
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	691b      	ldr	r3, [r3, #16]
 8002baa:	431a      	orrs	r2, r3
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	695b      	ldr	r3, [r3, #20]
 8002bb0:	431a      	orrs	r2, r3
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	699b      	ldr	r3, [r3, #24]
 8002bb6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002bba:	431a      	orrs	r2, r3
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	69db      	ldr	r3, [r3, #28]
 8002bc0:	431a      	orrs	r2, r3
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6a1b      	ldr	r3, [r3, #32]
 8002bc6:	ea42 0103 	orr.w	r1, r2, r3
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	430a      	orrs	r2, r1
 8002bd4:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	699b      	ldr	r3, [r3, #24]
 8002bda:	0c1b      	lsrs	r3, r3, #16
 8002bdc:	f003 0104 	and.w	r1, r3, #4
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	430a      	orrs	r2, r1
 8002bea:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	69da      	ldr	r2, [r3, #28]
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002bfa:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2200      	movs	r2, #0
 8002c00:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	2201      	movs	r2, #1
 8002c06:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002c0a:	2300      	movs	r3, #0
}
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	3708      	adds	r7, #8
 8002c10:	46bd      	mov	sp, r7
 8002c12:	bd80      	pop	{r7, pc}

08002c14 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b088      	sub	sp, #32
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	60f8      	str	r0, [r7, #12]
 8002c1c:	60b9      	str	r1, [r7, #8]
 8002c1e:	603b      	str	r3, [r7, #0]
 8002c20:	4613      	mov	r3, r2
 8002c22:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002c24:	2300      	movs	r3, #0
 8002c26:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002c2e:	2b01      	cmp	r3, #1
 8002c30:	d101      	bne.n	8002c36 <HAL_SPI_Transmit+0x22>
 8002c32:	2302      	movs	r3, #2
 8002c34:	e11e      	b.n	8002e74 <HAL_SPI_Transmit+0x260>
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	2201      	movs	r2, #1
 8002c3a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002c3e:	f7fe f9e1 	bl	8001004 <HAL_GetTick>
 8002c42:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002c44:	88fb      	ldrh	r3, [r7, #6]
 8002c46:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002c4e:	b2db      	uxtb	r3, r3
 8002c50:	2b01      	cmp	r3, #1
 8002c52:	d002      	beq.n	8002c5a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002c54:	2302      	movs	r3, #2
 8002c56:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002c58:	e103      	b.n	8002e62 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002c5a:	68bb      	ldr	r3, [r7, #8]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d002      	beq.n	8002c66 <HAL_SPI_Transmit+0x52>
 8002c60:	88fb      	ldrh	r3, [r7, #6]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d102      	bne.n	8002c6c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002c66:	2301      	movs	r3, #1
 8002c68:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002c6a:	e0fa      	b.n	8002e62 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	2203      	movs	r2, #3
 8002c70:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	2200      	movs	r2, #0
 8002c78:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	68ba      	ldr	r2, [r7, #8]
 8002c7e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	88fa      	ldrh	r2, [r7, #6]
 8002c84:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	88fa      	ldrh	r2, [r7, #6]
 8002c8a:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	2200      	movs	r2, #0
 8002c90:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	2200      	movs	r2, #0
 8002c96:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	689b      	ldr	r3, [r3, #8]
 8002cae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002cb2:	d107      	bne.n	8002cc4 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	681a      	ldr	r2, [r3, #0]
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002cc2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cce:	2b40      	cmp	r3, #64	; 0x40
 8002cd0:	d007      	beq.n	8002ce2 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	681a      	ldr	r2, [r3, #0]
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002ce0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	68db      	ldr	r3, [r3, #12]
 8002ce6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002cea:	d14b      	bne.n	8002d84 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	685b      	ldr	r3, [r3, #4]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d002      	beq.n	8002cfa <HAL_SPI_Transmit+0xe6>
 8002cf4:	8afb      	ldrh	r3, [r7, #22]
 8002cf6:	2b01      	cmp	r3, #1
 8002cf8:	d13e      	bne.n	8002d78 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cfe:	881a      	ldrh	r2, [r3, #0]
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d0a:	1c9a      	adds	r2, r3, #2
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d14:	b29b      	uxth	r3, r3
 8002d16:	3b01      	subs	r3, #1
 8002d18:	b29a      	uxth	r2, r3
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002d1e:	e02b      	b.n	8002d78 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	689b      	ldr	r3, [r3, #8]
 8002d26:	f003 0302 	and.w	r3, r3, #2
 8002d2a:	2b02      	cmp	r3, #2
 8002d2c:	d112      	bne.n	8002d54 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d32:	881a      	ldrh	r2, [r3, #0]
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d3e:	1c9a      	adds	r2, r3, #2
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d48:	b29b      	uxth	r3, r3
 8002d4a:	3b01      	subs	r3, #1
 8002d4c:	b29a      	uxth	r2, r3
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	86da      	strh	r2, [r3, #54]	; 0x36
 8002d52:	e011      	b.n	8002d78 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002d54:	f7fe f956 	bl	8001004 <HAL_GetTick>
 8002d58:	4602      	mov	r2, r0
 8002d5a:	69bb      	ldr	r3, [r7, #24]
 8002d5c:	1ad3      	subs	r3, r2, r3
 8002d5e:	683a      	ldr	r2, [r7, #0]
 8002d60:	429a      	cmp	r2, r3
 8002d62:	d803      	bhi.n	8002d6c <HAL_SPI_Transmit+0x158>
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d6a:	d102      	bne.n	8002d72 <HAL_SPI_Transmit+0x15e>
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d102      	bne.n	8002d78 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8002d72:	2303      	movs	r3, #3
 8002d74:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002d76:	e074      	b.n	8002e62 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d7c:	b29b      	uxth	r3, r3
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d1ce      	bne.n	8002d20 <HAL_SPI_Transmit+0x10c>
 8002d82:	e04c      	b.n	8002e1e <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	685b      	ldr	r3, [r3, #4]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d002      	beq.n	8002d92 <HAL_SPI_Transmit+0x17e>
 8002d8c:	8afb      	ldrh	r3, [r7, #22]
 8002d8e:	2b01      	cmp	r3, #1
 8002d90:	d140      	bne.n	8002e14 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	330c      	adds	r3, #12
 8002d9c:	7812      	ldrb	r2, [r2, #0]
 8002d9e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002da4:	1c5a      	adds	r2, r3, #1
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002dae:	b29b      	uxth	r3, r3
 8002db0:	3b01      	subs	r3, #1
 8002db2:	b29a      	uxth	r2, r3
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002db8:	e02c      	b.n	8002e14 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	689b      	ldr	r3, [r3, #8]
 8002dc0:	f003 0302 	and.w	r3, r3, #2
 8002dc4:	2b02      	cmp	r3, #2
 8002dc6:	d113      	bne.n	8002df0 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	330c      	adds	r3, #12
 8002dd2:	7812      	ldrb	r2, [r2, #0]
 8002dd4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dda:	1c5a      	adds	r2, r3, #1
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002de4:	b29b      	uxth	r3, r3
 8002de6:	3b01      	subs	r3, #1
 8002de8:	b29a      	uxth	r2, r3
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	86da      	strh	r2, [r3, #54]	; 0x36
 8002dee:	e011      	b.n	8002e14 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002df0:	f7fe f908 	bl	8001004 <HAL_GetTick>
 8002df4:	4602      	mov	r2, r0
 8002df6:	69bb      	ldr	r3, [r7, #24]
 8002df8:	1ad3      	subs	r3, r2, r3
 8002dfa:	683a      	ldr	r2, [r7, #0]
 8002dfc:	429a      	cmp	r2, r3
 8002dfe:	d803      	bhi.n	8002e08 <HAL_SPI_Transmit+0x1f4>
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e06:	d102      	bne.n	8002e0e <HAL_SPI_Transmit+0x1fa>
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d102      	bne.n	8002e14 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8002e0e:	2303      	movs	r3, #3
 8002e10:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002e12:	e026      	b.n	8002e62 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e18:	b29b      	uxth	r3, r3
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d1cd      	bne.n	8002dba <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002e1e:	69ba      	ldr	r2, [r7, #24]
 8002e20:	6839      	ldr	r1, [r7, #0]
 8002e22:	68f8      	ldr	r0, [r7, #12]
 8002e24:	f000 fba4 	bl	8003570 <SPI_EndRxTxTransaction>
 8002e28:	4603      	mov	r3, r0
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d002      	beq.n	8002e34 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	2220      	movs	r2, #32
 8002e32:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	689b      	ldr	r3, [r3, #8]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d10a      	bne.n	8002e52 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	613b      	str	r3, [r7, #16]
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	68db      	ldr	r3, [r3, #12]
 8002e46:	613b      	str	r3, [r7, #16]
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	689b      	ldr	r3, [r3, #8]
 8002e4e:	613b      	str	r3, [r7, #16]
 8002e50:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d002      	beq.n	8002e60 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	77fb      	strb	r3, [r7, #31]
 8002e5e:	e000      	b.n	8002e62 <HAL_SPI_Transmit+0x24e>
  }

error:
 8002e60:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	2201      	movs	r2, #1
 8002e66:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002e72:	7ffb      	ldrb	r3, [r7, #31]
}
 8002e74:	4618      	mov	r0, r3
 8002e76:	3720      	adds	r7, #32
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	bd80      	pop	{r7, pc}

08002e7c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b088      	sub	sp, #32
 8002e80:	af02      	add	r7, sp, #8
 8002e82:	60f8      	str	r0, [r7, #12]
 8002e84:	60b9      	str	r1, [r7, #8]
 8002e86:	603b      	str	r3, [r7, #0]
 8002e88:	4613      	mov	r3, r2
 8002e8a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	685b      	ldr	r3, [r3, #4]
 8002e94:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002e98:	d112      	bne.n	8002ec0 <HAL_SPI_Receive+0x44>
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	689b      	ldr	r3, [r3, #8]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d10e      	bne.n	8002ec0 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	2204      	movs	r2, #4
 8002ea6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002eaa:	88fa      	ldrh	r2, [r7, #6]
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	9300      	str	r3, [sp, #0]
 8002eb0:	4613      	mov	r3, r2
 8002eb2:	68ba      	ldr	r2, [r7, #8]
 8002eb4:	68b9      	ldr	r1, [r7, #8]
 8002eb6:	68f8      	ldr	r0, [r7, #12]
 8002eb8:	f000 f8e9 	bl	800308e <HAL_SPI_TransmitReceive>
 8002ebc:	4603      	mov	r3, r0
 8002ebe:	e0e2      	b.n	8003086 <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002ec6:	2b01      	cmp	r3, #1
 8002ec8:	d101      	bne.n	8002ece <HAL_SPI_Receive+0x52>
 8002eca:	2302      	movs	r3, #2
 8002ecc:	e0db      	b.n	8003086 <HAL_SPI_Receive+0x20a>
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	2201      	movs	r2, #1
 8002ed2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002ed6:	f7fe f895 	bl	8001004 <HAL_GetTick>
 8002eda:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002ee2:	b2db      	uxtb	r3, r3
 8002ee4:	2b01      	cmp	r3, #1
 8002ee6:	d002      	beq.n	8002eee <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8002ee8:	2302      	movs	r3, #2
 8002eea:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002eec:	e0c2      	b.n	8003074 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 8002eee:	68bb      	ldr	r3, [r7, #8]
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d002      	beq.n	8002efa <HAL_SPI_Receive+0x7e>
 8002ef4:	88fb      	ldrh	r3, [r7, #6]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d102      	bne.n	8002f00 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8002efa:	2301      	movs	r3, #1
 8002efc:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002efe:	e0b9      	b.n	8003074 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	2204      	movs	r2, #4
 8002f04:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	68ba      	ldr	r2, [r7, #8]
 8002f12:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	88fa      	ldrh	r2, [r7, #6]
 8002f18:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	88fa      	ldrh	r2, [r7, #6]
 8002f1e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	2200      	movs	r2, #0
 8002f24:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	2200      	movs	r2, #0
 8002f2a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	2200      	movs	r2, #0
 8002f30:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	2200      	movs	r2, #0
 8002f36:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	689b      	ldr	r3, [r3, #8]
 8002f42:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f46:	d107      	bne.n	8002f58 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	681a      	ldr	r2, [r3, #0]
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002f56:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f62:	2b40      	cmp	r3, #64	; 0x40
 8002f64:	d007      	beq.n	8002f76 <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	681a      	ldr	r2, [r3, #0]
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002f74:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	68db      	ldr	r3, [r3, #12]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d162      	bne.n	8003044 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002f7e:	e02e      	b.n	8002fde <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	689b      	ldr	r3, [r3, #8]
 8002f86:	f003 0301 	and.w	r3, r3, #1
 8002f8a:	2b01      	cmp	r3, #1
 8002f8c:	d115      	bne.n	8002fba <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f103 020c 	add.w	r2, r3, #12
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f9a:	7812      	ldrb	r2, [r2, #0]
 8002f9c:	b2d2      	uxtb	r2, r2
 8002f9e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fa4:	1c5a      	adds	r2, r3, #1
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002fae:	b29b      	uxth	r3, r3
 8002fb0:	3b01      	subs	r3, #1
 8002fb2:	b29a      	uxth	r2, r3
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002fb8:	e011      	b.n	8002fde <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002fba:	f7fe f823 	bl	8001004 <HAL_GetTick>
 8002fbe:	4602      	mov	r2, r0
 8002fc0:	693b      	ldr	r3, [r7, #16]
 8002fc2:	1ad3      	subs	r3, r2, r3
 8002fc4:	683a      	ldr	r2, [r7, #0]
 8002fc6:	429a      	cmp	r2, r3
 8002fc8:	d803      	bhi.n	8002fd2 <HAL_SPI_Receive+0x156>
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fd0:	d102      	bne.n	8002fd8 <HAL_SPI_Receive+0x15c>
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d102      	bne.n	8002fde <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 8002fd8:	2303      	movs	r3, #3
 8002fda:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002fdc:	e04a      	b.n	8003074 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002fe2:	b29b      	uxth	r3, r3
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d1cb      	bne.n	8002f80 <HAL_SPI_Receive+0x104>
 8002fe8:	e031      	b.n	800304e <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	689b      	ldr	r3, [r3, #8]
 8002ff0:	f003 0301 	and.w	r3, r3, #1
 8002ff4:	2b01      	cmp	r3, #1
 8002ff6:	d113      	bne.n	8003020 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	68da      	ldr	r2, [r3, #12]
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003002:	b292      	uxth	r2, r2
 8003004:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800300a:	1c9a      	adds	r2, r3, #2
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003014:	b29b      	uxth	r3, r3
 8003016:	3b01      	subs	r3, #1
 8003018:	b29a      	uxth	r2, r3
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800301e:	e011      	b.n	8003044 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003020:	f7fd fff0 	bl	8001004 <HAL_GetTick>
 8003024:	4602      	mov	r2, r0
 8003026:	693b      	ldr	r3, [r7, #16]
 8003028:	1ad3      	subs	r3, r2, r3
 800302a:	683a      	ldr	r2, [r7, #0]
 800302c:	429a      	cmp	r2, r3
 800302e:	d803      	bhi.n	8003038 <HAL_SPI_Receive+0x1bc>
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003036:	d102      	bne.n	800303e <HAL_SPI_Receive+0x1c2>
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	2b00      	cmp	r3, #0
 800303c:	d102      	bne.n	8003044 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 800303e:	2303      	movs	r3, #3
 8003040:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003042:	e017      	b.n	8003074 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003048:	b29b      	uxth	r3, r3
 800304a:	2b00      	cmp	r3, #0
 800304c:	d1cd      	bne.n	8002fea <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800304e:	693a      	ldr	r2, [r7, #16]
 8003050:	6839      	ldr	r1, [r7, #0]
 8003052:	68f8      	ldr	r0, [r7, #12]
 8003054:	f000 fa27 	bl	80034a6 <SPI_EndRxTransaction>
 8003058:	4603      	mov	r3, r0
 800305a:	2b00      	cmp	r3, #0
 800305c:	d002      	beq.n	8003064 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	2220      	movs	r2, #32
 8003062:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003068:	2b00      	cmp	r3, #0
 800306a:	d002      	beq.n	8003072 <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 800306c:	2301      	movs	r3, #1
 800306e:	75fb      	strb	r3, [r7, #23]
 8003070:	e000      	b.n	8003074 <HAL_SPI_Receive+0x1f8>
  }

error :
 8003072:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	2201      	movs	r2, #1
 8003078:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	2200      	movs	r2, #0
 8003080:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003084:	7dfb      	ldrb	r3, [r7, #23]
}
 8003086:	4618      	mov	r0, r3
 8003088:	3718      	adds	r7, #24
 800308a:	46bd      	mov	sp, r7
 800308c:	bd80      	pop	{r7, pc}

0800308e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800308e:	b580      	push	{r7, lr}
 8003090:	b08c      	sub	sp, #48	; 0x30
 8003092:	af00      	add	r7, sp, #0
 8003094:	60f8      	str	r0, [r7, #12]
 8003096:	60b9      	str	r1, [r7, #8]
 8003098:	607a      	str	r2, [r7, #4]
 800309a:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800309c:	2301      	movs	r3, #1
 800309e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80030a0:	2300      	movs	r3, #0
 80030a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80030ac:	2b01      	cmp	r3, #1
 80030ae:	d101      	bne.n	80030b4 <HAL_SPI_TransmitReceive+0x26>
 80030b0:	2302      	movs	r3, #2
 80030b2:	e18a      	b.n	80033ca <HAL_SPI_TransmitReceive+0x33c>
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	2201      	movs	r2, #1
 80030b8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80030bc:	f7fd ffa2 	bl	8001004 <HAL_GetTick>
 80030c0:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80030c8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	685b      	ldr	r3, [r3, #4]
 80030d0:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80030d2:	887b      	ldrh	r3, [r7, #2]
 80030d4:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80030d6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80030da:	2b01      	cmp	r3, #1
 80030dc:	d00f      	beq.n	80030fe <HAL_SPI_TransmitReceive+0x70>
 80030de:	69fb      	ldr	r3, [r7, #28]
 80030e0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80030e4:	d107      	bne.n	80030f6 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	689b      	ldr	r3, [r3, #8]
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d103      	bne.n	80030f6 <HAL_SPI_TransmitReceive+0x68>
 80030ee:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80030f2:	2b04      	cmp	r3, #4
 80030f4:	d003      	beq.n	80030fe <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80030f6:	2302      	movs	r3, #2
 80030f8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80030fc:	e15b      	b.n	80033b6 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80030fe:	68bb      	ldr	r3, [r7, #8]
 8003100:	2b00      	cmp	r3, #0
 8003102:	d005      	beq.n	8003110 <HAL_SPI_TransmitReceive+0x82>
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2b00      	cmp	r3, #0
 8003108:	d002      	beq.n	8003110 <HAL_SPI_TransmitReceive+0x82>
 800310a:	887b      	ldrh	r3, [r7, #2]
 800310c:	2b00      	cmp	r3, #0
 800310e:	d103      	bne.n	8003118 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003110:	2301      	movs	r3, #1
 8003112:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003116:	e14e      	b.n	80033b6 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800311e:	b2db      	uxtb	r3, r3
 8003120:	2b04      	cmp	r3, #4
 8003122:	d003      	beq.n	800312c <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	2205      	movs	r2, #5
 8003128:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	2200      	movs	r2, #0
 8003130:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	687a      	ldr	r2, [r7, #4]
 8003136:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	887a      	ldrh	r2, [r7, #2]
 800313c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	887a      	ldrh	r2, [r7, #2]
 8003142:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	68ba      	ldr	r2, [r7, #8]
 8003148:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	887a      	ldrh	r2, [r7, #2]
 800314e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	887a      	ldrh	r2, [r7, #2]
 8003154:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	2200      	movs	r2, #0
 800315a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	2200      	movs	r2, #0
 8003160:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800316c:	2b40      	cmp	r3, #64	; 0x40
 800316e:	d007      	beq.n	8003180 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	681a      	ldr	r2, [r3, #0]
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800317e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	68db      	ldr	r3, [r3, #12]
 8003184:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003188:	d178      	bne.n	800327c <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	685b      	ldr	r3, [r3, #4]
 800318e:	2b00      	cmp	r3, #0
 8003190:	d002      	beq.n	8003198 <HAL_SPI_TransmitReceive+0x10a>
 8003192:	8b7b      	ldrh	r3, [r7, #26]
 8003194:	2b01      	cmp	r3, #1
 8003196:	d166      	bne.n	8003266 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800319c:	881a      	ldrh	r2, [r3, #0]
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031a8:	1c9a      	adds	r2, r3, #2
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80031b2:	b29b      	uxth	r3, r3
 80031b4:	3b01      	subs	r3, #1
 80031b6:	b29a      	uxth	r2, r3
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80031bc:	e053      	b.n	8003266 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	689b      	ldr	r3, [r3, #8]
 80031c4:	f003 0302 	and.w	r3, r3, #2
 80031c8:	2b02      	cmp	r3, #2
 80031ca:	d11b      	bne.n	8003204 <HAL_SPI_TransmitReceive+0x176>
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80031d0:	b29b      	uxth	r3, r3
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d016      	beq.n	8003204 <HAL_SPI_TransmitReceive+0x176>
 80031d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031d8:	2b01      	cmp	r3, #1
 80031da:	d113      	bne.n	8003204 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031e0:	881a      	ldrh	r2, [r3, #0]
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ec:	1c9a      	adds	r2, r3, #2
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80031f6:	b29b      	uxth	r3, r3
 80031f8:	3b01      	subs	r3, #1
 80031fa:	b29a      	uxth	r2, r3
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003200:	2300      	movs	r3, #0
 8003202:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	689b      	ldr	r3, [r3, #8]
 800320a:	f003 0301 	and.w	r3, r3, #1
 800320e:	2b01      	cmp	r3, #1
 8003210:	d119      	bne.n	8003246 <HAL_SPI_TransmitReceive+0x1b8>
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003216:	b29b      	uxth	r3, r3
 8003218:	2b00      	cmp	r3, #0
 800321a:	d014      	beq.n	8003246 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	68da      	ldr	r2, [r3, #12]
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003226:	b292      	uxth	r2, r2
 8003228:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800322e:	1c9a      	adds	r2, r3, #2
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003238:	b29b      	uxth	r3, r3
 800323a:	3b01      	subs	r3, #1
 800323c:	b29a      	uxth	r2, r3
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003242:	2301      	movs	r3, #1
 8003244:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003246:	f7fd fedd 	bl	8001004 <HAL_GetTick>
 800324a:	4602      	mov	r2, r0
 800324c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800324e:	1ad3      	subs	r3, r2, r3
 8003250:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003252:	429a      	cmp	r2, r3
 8003254:	d807      	bhi.n	8003266 <HAL_SPI_TransmitReceive+0x1d8>
 8003256:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003258:	f1b3 3fff 	cmp.w	r3, #4294967295
 800325c:	d003      	beq.n	8003266 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800325e:	2303      	movs	r3, #3
 8003260:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003264:	e0a7      	b.n	80033b6 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800326a:	b29b      	uxth	r3, r3
 800326c:	2b00      	cmp	r3, #0
 800326e:	d1a6      	bne.n	80031be <HAL_SPI_TransmitReceive+0x130>
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003274:	b29b      	uxth	r3, r3
 8003276:	2b00      	cmp	r3, #0
 8003278:	d1a1      	bne.n	80031be <HAL_SPI_TransmitReceive+0x130>
 800327a:	e07c      	b.n	8003376 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	685b      	ldr	r3, [r3, #4]
 8003280:	2b00      	cmp	r3, #0
 8003282:	d002      	beq.n	800328a <HAL_SPI_TransmitReceive+0x1fc>
 8003284:	8b7b      	ldrh	r3, [r7, #26]
 8003286:	2b01      	cmp	r3, #1
 8003288:	d16b      	bne.n	8003362 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	330c      	adds	r3, #12
 8003294:	7812      	ldrb	r2, [r2, #0]
 8003296:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800329c:	1c5a      	adds	r2, r3, #1
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80032a6:	b29b      	uxth	r3, r3
 80032a8:	3b01      	subs	r3, #1
 80032aa:	b29a      	uxth	r2, r3
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80032b0:	e057      	b.n	8003362 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	689b      	ldr	r3, [r3, #8]
 80032b8:	f003 0302 	and.w	r3, r3, #2
 80032bc:	2b02      	cmp	r3, #2
 80032be:	d11c      	bne.n	80032fa <HAL_SPI_TransmitReceive+0x26c>
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80032c4:	b29b      	uxth	r3, r3
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d017      	beq.n	80032fa <HAL_SPI_TransmitReceive+0x26c>
 80032ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032cc:	2b01      	cmp	r3, #1
 80032ce:	d114      	bne.n	80032fa <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	330c      	adds	r3, #12
 80032da:	7812      	ldrb	r2, [r2, #0]
 80032dc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032e2:	1c5a      	adds	r2, r3, #1
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80032ec:	b29b      	uxth	r3, r3
 80032ee:	3b01      	subs	r3, #1
 80032f0:	b29a      	uxth	r2, r3
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80032f6:	2300      	movs	r3, #0
 80032f8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	689b      	ldr	r3, [r3, #8]
 8003300:	f003 0301 	and.w	r3, r3, #1
 8003304:	2b01      	cmp	r3, #1
 8003306:	d119      	bne.n	800333c <HAL_SPI_TransmitReceive+0x2ae>
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800330c:	b29b      	uxth	r3, r3
 800330e:	2b00      	cmp	r3, #0
 8003310:	d014      	beq.n	800333c <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	68da      	ldr	r2, [r3, #12]
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800331c:	b2d2      	uxtb	r2, r2
 800331e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003324:	1c5a      	adds	r2, r3, #1
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800332e:	b29b      	uxth	r3, r3
 8003330:	3b01      	subs	r3, #1
 8003332:	b29a      	uxth	r2, r3
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003338:	2301      	movs	r3, #1
 800333a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800333c:	f7fd fe62 	bl	8001004 <HAL_GetTick>
 8003340:	4602      	mov	r2, r0
 8003342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003344:	1ad3      	subs	r3, r2, r3
 8003346:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003348:	429a      	cmp	r2, r3
 800334a:	d803      	bhi.n	8003354 <HAL_SPI_TransmitReceive+0x2c6>
 800334c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800334e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003352:	d102      	bne.n	800335a <HAL_SPI_TransmitReceive+0x2cc>
 8003354:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003356:	2b00      	cmp	r3, #0
 8003358:	d103      	bne.n	8003362 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800335a:	2303      	movs	r3, #3
 800335c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003360:	e029      	b.n	80033b6 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003366:	b29b      	uxth	r3, r3
 8003368:	2b00      	cmp	r3, #0
 800336a:	d1a2      	bne.n	80032b2 <HAL_SPI_TransmitReceive+0x224>
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003370:	b29b      	uxth	r3, r3
 8003372:	2b00      	cmp	r3, #0
 8003374:	d19d      	bne.n	80032b2 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003376:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003378:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800337a:	68f8      	ldr	r0, [r7, #12]
 800337c:	f000 f8f8 	bl	8003570 <SPI_EndRxTxTransaction>
 8003380:	4603      	mov	r3, r0
 8003382:	2b00      	cmp	r3, #0
 8003384:	d006      	beq.n	8003394 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8003386:	2301      	movs	r3, #1
 8003388:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	2220      	movs	r2, #32
 8003390:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003392:	e010      	b.n	80033b6 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	689b      	ldr	r3, [r3, #8]
 8003398:	2b00      	cmp	r3, #0
 800339a:	d10b      	bne.n	80033b4 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800339c:	2300      	movs	r3, #0
 800339e:	617b      	str	r3, [r7, #20]
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	68db      	ldr	r3, [r3, #12]
 80033a6:	617b      	str	r3, [r7, #20]
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	689b      	ldr	r3, [r3, #8]
 80033ae:	617b      	str	r3, [r7, #20]
 80033b0:	697b      	ldr	r3, [r7, #20]
 80033b2:	e000      	b.n	80033b6 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80033b4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	2201      	movs	r2, #1
 80033ba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	2200      	movs	r2, #0
 80033c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80033c6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80033ca:	4618      	mov	r0, r3
 80033cc:	3730      	adds	r7, #48	; 0x30
 80033ce:	46bd      	mov	sp, r7
 80033d0:	bd80      	pop	{r7, pc}

080033d2 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80033d2:	b580      	push	{r7, lr}
 80033d4:	b084      	sub	sp, #16
 80033d6:	af00      	add	r7, sp, #0
 80033d8:	60f8      	str	r0, [r7, #12]
 80033da:	60b9      	str	r1, [r7, #8]
 80033dc:	603b      	str	r3, [r7, #0]
 80033de:	4613      	mov	r3, r2
 80033e0:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80033e2:	e04c      	b.n	800347e <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033ea:	d048      	beq.n	800347e <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80033ec:	f7fd fe0a 	bl	8001004 <HAL_GetTick>
 80033f0:	4602      	mov	r2, r0
 80033f2:	69bb      	ldr	r3, [r7, #24]
 80033f4:	1ad3      	subs	r3, r2, r3
 80033f6:	683a      	ldr	r2, [r7, #0]
 80033f8:	429a      	cmp	r2, r3
 80033fa:	d902      	bls.n	8003402 <SPI_WaitFlagStateUntilTimeout+0x30>
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d13d      	bne.n	800347e <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	685a      	ldr	r2, [r3, #4]
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003410:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	685b      	ldr	r3, [r3, #4]
 8003416:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800341a:	d111      	bne.n	8003440 <SPI_WaitFlagStateUntilTimeout+0x6e>
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	689b      	ldr	r3, [r3, #8]
 8003420:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003424:	d004      	beq.n	8003430 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	689b      	ldr	r3, [r3, #8]
 800342a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800342e:	d107      	bne.n	8003440 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	681a      	ldr	r2, [r3, #0]
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800343e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003444:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003448:	d10f      	bne.n	800346a <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	681a      	ldr	r2, [r3, #0]
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003458:	601a      	str	r2, [r3, #0]
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	681a      	ldr	r2, [r3, #0]
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003468:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	2201      	movs	r2, #1
 800346e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	2200      	movs	r2, #0
 8003476:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800347a:	2303      	movs	r3, #3
 800347c:	e00f      	b.n	800349e <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	689a      	ldr	r2, [r3, #8]
 8003484:	68bb      	ldr	r3, [r7, #8]
 8003486:	4013      	ands	r3, r2
 8003488:	68ba      	ldr	r2, [r7, #8]
 800348a:	429a      	cmp	r2, r3
 800348c:	bf0c      	ite	eq
 800348e:	2301      	moveq	r3, #1
 8003490:	2300      	movne	r3, #0
 8003492:	b2db      	uxtb	r3, r3
 8003494:	461a      	mov	r2, r3
 8003496:	79fb      	ldrb	r3, [r7, #7]
 8003498:	429a      	cmp	r2, r3
 800349a:	d1a3      	bne.n	80033e4 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800349c:	2300      	movs	r3, #0
}
 800349e:	4618      	mov	r0, r3
 80034a0:	3710      	adds	r7, #16
 80034a2:	46bd      	mov	sp, r7
 80034a4:	bd80      	pop	{r7, pc}

080034a6 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80034a6:	b580      	push	{r7, lr}
 80034a8:	b086      	sub	sp, #24
 80034aa:	af02      	add	r7, sp, #8
 80034ac:	60f8      	str	r0, [r7, #12]
 80034ae:	60b9      	str	r1, [r7, #8]
 80034b0:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	685b      	ldr	r3, [r3, #4]
 80034b6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80034ba:	d111      	bne.n	80034e0 <SPI_EndRxTransaction+0x3a>
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	689b      	ldr	r3, [r3, #8]
 80034c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80034c4:	d004      	beq.n	80034d0 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	689b      	ldr	r3, [r3, #8]
 80034ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034ce:	d107      	bne.n	80034e0 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	681a      	ldr	r2, [r3, #0]
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80034de:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	685b      	ldr	r3, [r3, #4]
 80034e4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80034e8:	d12a      	bne.n	8003540 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	689b      	ldr	r3, [r3, #8]
 80034ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034f2:	d012      	beq.n	800351a <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	9300      	str	r3, [sp, #0]
 80034f8:	68bb      	ldr	r3, [r7, #8]
 80034fa:	2200      	movs	r2, #0
 80034fc:	2180      	movs	r1, #128	; 0x80
 80034fe:	68f8      	ldr	r0, [r7, #12]
 8003500:	f7ff ff67 	bl	80033d2 <SPI_WaitFlagStateUntilTimeout>
 8003504:	4603      	mov	r3, r0
 8003506:	2b00      	cmp	r3, #0
 8003508:	d02d      	beq.n	8003566 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800350e:	f043 0220 	orr.w	r2, r3, #32
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8003516:	2303      	movs	r3, #3
 8003518:	e026      	b.n	8003568 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	9300      	str	r3, [sp, #0]
 800351e:	68bb      	ldr	r3, [r7, #8]
 8003520:	2200      	movs	r2, #0
 8003522:	2101      	movs	r1, #1
 8003524:	68f8      	ldr	r0, [r7, #12]
 8003526:	f7ff ff54 	bl	80033d2 <SPI_WaitFlagStateUntilTimeout>
 800352a:	4603      	mov	r3, r0
 800352c:	2b00      	cmp	r3, #0
 800352e:	d01a      	beq.n	8003566 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003534:	f043 0220 	orr.w	r2, r3, #32
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800353c:	2303      	movs	r3, #3
 800353e:	e013      	b.n	8003568 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	9300      	str	r3, [sp, #0]
 8003544:	68bb      	ldr	r3, [r7, #8]
 8003546:	2200      	movs	r2, #0
 8003548:	2101      	movs	r1, #1
 800354a:	68f8      	ldr	r0, [r7, #12]
 800354c:	f7ff ff41 	bl	80033d2 <SPI_WaitFlagStateUntilTimeout>
 8003550:	4603      	mov	r3, r0
 8003552:	2b00      	cmp	r3, #0
 8003554:	d007      	beq.n	8003566 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800355a:	f043 0220 	orr.w	r2, r3, #32
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003562:	2303      	movs	r3, #3
 8003564:	e000      	b.n	8003568 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8003566:	2300      	movs	r3, #0
}
 8003568:	4618      	mov	r0, r3
 800356a:	3710      	adds	r7, #16
 800356c:	46bd      	mov	sp, r7
 800356e:	bd80      	pop	{r7, pc}

08003570 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b088      	sub	sp, #32
 8003574:	af02      	add	r7, sp, #8
 8003576:	60f8      	str	r0, [r7, #12]
 8003578:	60b9      	str	r1, [r7, #8]
 800357a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800357c:	4b1b      	ldr	r3, [pc, #108]	; (80035ec <SPI_EndRxTxTransaction+0x7c>)
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4a1b      	ldr	r2, [pc, #108]	; (80035f0 <SPI_EndRxTxTransaction+0x80>)
 8003582:	fba2 2303 	umull	r2, r3, r2, r3
 8003586:	0d5b      	lsrs	r3, r3, #21
 8003588:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800358c:	fb02 f303 	mul.w	r3, r2, r3
 8003590:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	685b      	ldr	r3, [r3, #4]
 8003596:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800359a:	d112      	bne.n	80035c2 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	9300      	str	r3, [sp, #0]
 80035a0:	68bb      	ldr	r3, [r7, #8]
 80035a2:	2200      	movs	r2, #0
 80035a4:	2180      	movs	r1, #128	; 0x80
 80035a6:	68f8      	ldr	r0, [r7, #12]
 80035a8:	f7ff ff13 	bl	80033d2 <SPI_WaitFlagStateUntilTimeout>
 80035ac:	4603      	mov	r3, r0
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d016      	beq.n	80035e0 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035b6:	f043 0220 	orr.w	r2, r3, #32
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80035be:	2303      	movs	r3, #3
 80035c0:	e00f      	b.n	80035e2 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80035c2:	697b      	ldr	r3, [r7, #20]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d00a      	beq.n	80035de <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80035c8:	697b      	ldr	r3, [r7, #20]
 80035ca:	3b01      	subs	r3, #1
 80035cc:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	689b      	ldr	r3, [r3, #8]
 80035d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035d8:	2b80      	cmp	r3, #128	; 0x80
 80035da:	d0f2      	beq.n	80035c2 <SPI_EndRxTxTransaction+0x52>
 80035dc:	e000      	b.n	80035e0 <SPI_EndRxTxTransaction+0x70>
        break;
 80035de:	bf00      	nop
  }

  return HAL_OK;
 80035e0:	2300      	movs	r3, #0
}
 80035e2:	4618      	mov	r0, r3
 80035e4:	3718      	adds	r7, #24
 80035e6:	46bd      	mov	sp, r7
 80035e8:	bd80      	pop	{r7, pc}
 80035ea:	bf00      	nop
 80035ec:	20000080 	.word	0x20000080
 80035f0:	165e9f81 	.word	0x165e9f81

080035f4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b082      	sub	sp, #8
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d101      	bne.n	8003606 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003602:	2301      	movs	r3, #1
 8003604:	e01d      	b.n	8003642 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800360c:	b2db      	uxtb	r3, r3
 800360e:	2b00      	cmp	r3, #0
 8003610:	d106      	bne.n	8003620 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2200      	movs	r2, #0
 8003616:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800361a:	6878      	ldr	r0, [r7, #4]
 800361c:	f00d fc02 	bl	8010e24 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2202      	movs	r2, #2
 8003624:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681a      	ldr	r2, [r3, #0]
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	3304      	adds	r3, #4
 8003630:	4619      	mov	r1, r3
 8003632:	4610      	mov	r0, r2
 8003634:	f000 fc70 	bl	8003f18 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2201      	movs	r2, #1
 800363c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003640:	2300      	movs	r3, #0
}
 8003642:	4618      	mov	r0, r3
 8003644:	3708      	adds	r7, #8
 8003646:	46bd      	mov	sp, r7
 8003648:	bd80      	pop	{r7, pc}

0800364a <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800364a:	b480      	push	{r7}
 800364c:	b085      	sub	sp, #20
 800364e:	af00      	add	r7, sp, #0
 8003650:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	68da      	ldr	r2, [r3, #12]
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f042 0201 	orr.w	r2, r2, #1
 8003660:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	689b      	ldr	r3, [r3, #8]
 8003668:	f003 0307 	and.w	r3, r3, #7
 800366c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	2b06      	cmp	r3, #6
 8003672:	d007      	beq.n	8003684 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	681a      	ldr	r2, [r3, #0]
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f042 0201 	orr.w	r2, r2, #1
 8003682:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003684:	2300      	movs	r3, #0
}
 8003686:	4618      	mov	r0, r3
 8003688:	3714      	adds	r7, #20
 800368a:	46bd      	mov	sp, r7
 800368c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003690:	4770      	bx	lr

08003692 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003692:	b580      	push	{r7, lr}
 8003694:	b082      	sub	sp, #8
 8003696:	af00      	add	r7, sp, #0
 8003698:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2b00      	cmp	r3, #0
 800369e:	d101      	bne.n	80036a4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80036a0:	2301      	movs	r3, #1
 80036a2:	e01d      	b.n	80036e0 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036aa:	b2db      	uxtb	r3, r3
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d106      	bne.n	80036be <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2200      	movs	r2, #0
 80036b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80036b8:	6878      	ldr	r0, [r7, #4]
 80036ba:	f000 f815 	bl	80036e8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	2202      	movs	r2, #2
 80036c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681a      	ldr	r2, [r3, #0]
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	3304      	adds	r3, #4
 80036ce:	4619      	mov	r1, r3
 80036d0:	4610      	mov	r0, r2
 80036d2:	f000 fc21 	bl	8003f18 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2201      	movs	r2, #1
 80036da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80036de:	2300      	movs	r3, #0
}
 80036e0:	4618      	mov	r0, r3
 80036e2:	3708      	adds	r7, #8
 80036e4:	46bd      	mov	sp, r7
 80036e6:	bd80      	pop	{r7, pc}

080036e8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80036e8:	b480      	push	{r7}
 80036ea:	b083      	sub	sp, #12
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80036f0:	bf00      	nop
 80036f2:	370c      	adds	r7, #12
 80036f4:	46bd      	mov	sp, r7
 80036f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fa:	4770      	bx	lr

080036fc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b084      	sub	sp, #16
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
 8003704:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	2201      	movs	r2, #1
 800370c:	6839      	ldr	r1, [r7, #0]
 800370e:	4618      	mov	r0, r3
 8003710:	f000 feec 	bl	80044ec <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	4a15      	ldr	r2, [pc, #84]	; (8003770 <HAL_TIM_PWM_Start+0x74>)
 800371a:	4293      	cmp	r3, r2
 800371c:	d004      	beq.n	8003728 <HAL_TIM_PWM_Start+0x2c>
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	4a14      	ldr	r2, [pc, #80]	; (8003774 <HAL_TIM_PWM_Start+0x78>)
 8003724:	4293      	cmp	r3, r2
 8003726:	d101      	bne.n	800372c <HAL_TIM_PWM_Start+0x30>
 8003728:	2301      	movs	r3, #1
 800372a:	e000      	b.n	800372e <HAL_TIM_PWM_Start+0x32>
 800372c:	2300      	movs	r3, #0
 800372e:	2b00      	cmp	r3, #0
 8003730:	d007      	beq.n	8003742 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003740:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	689b      	ldr	r3, [r3, #8]
 8003748:	f003 0307 	and.w	r3, r3, #7
 800374c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	2b06      	cmp	r3, #6
 8003752:	d007      	beq.n	8003764 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	681a      	ldr	r2, [r3, #0]
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f042 0201 	orr.w	r2, r2, #1
 8003762:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003764:	2300      	movs	r3, #0
}
 8003766:	4618      	mov	r0, r3
 8003768:	3710      	adds	r7, #16
 800376a:	46bd      	mov	sp, r7
 800376c:	bd80      	pop	{r7, pc}
 800376e:	bf00      	nop
 8003770:	40010000 	.word	0x40010000
 8003774:	40010400 	.word	0x40010400

08003778 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	b082      	sub	sp, #8
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
 8003780:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	2200      	movs	r2, #0
 8003788:	6839      	ldr	r1, [r7, #0]
 800378a:	4618      	mov	r0, r3
 800378c:	f000 feae 	bl	80044ec <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	4a22      	ldr	r2, [pc, #136]	; (8003820 <HAL_TIM_PWM_Stop+0xa8>)
 8003796:	4293      	cmp	r3, r2
 8003798:	d004      	beq.n	80037a4 <HAL_TIM_PWM_Stop+0x2c>
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	4a21      	ldr	r2, [pc, #132]	; (8003824 <HAL_TIM_PWM_Stop+0xac>)
 80037a0:	4293      	cmp	r3, r2
 80037a2:	d101      	bne.n	80037a8 <HAL_TIM_PWM_Stop+0x30>
 80037a4:	2301      	movs	r3, #1
 80037a6:	e000      	b.n	80037aa <HAL_TIM_PWM_Stop+0x32>
 80037a8:	2300      	movs	r3, #0
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d017      	beq.n	80037de <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	6a1a      	ldr	r2, [r3, #32]
 80037b4:	f241 1311 	movw	r3, #4369	; 0x1111
 80037b8:	4013      	ands	r3, r2
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d10f      	bne.n	80037de <HAL_TIM_PWM_Stop+0x66>
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	6a1a      	ldr	r2, [r3, #32]
 80037c4:	f240 4344 	movw	r3, #1092	; 0x444
 80037c8:	4013      	ands	r3, r2
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d107      	bne.n	80037de <HAL_TIM_PWM_Stop+0x66>
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80037dc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	6a1a      	ldr	r2, [r3, #32]
 80037e4:	f241 1311 	movw	r3, #4369	; 0x1111
 80037e8:	4013      	ands	r3, r2
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d10f      	bne.n	800380e <HAL_TIM_PWM_Stop+0x96>
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	6a1a      	ldr	r2, [r3, #32]
 80037f4:	f240 4344 	movw	r3, #1092	; 0x444
 80037f8:	4013      	ands	r3, r2
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d107      	bne.n	800380e <HAL_TIM_PWM_Stop+0x96>
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	681a      	ldr	r2, [r3, #0]
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f022 0201 	bic.w	r2, r2, #1
 800380c:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	2201      	movs	r2, #1
 8003812:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8003816:	2300      	movs	r3, #0
}
 8003818:	4618      	mov	r0, r3
 800381a:	3708      	adds	r7, #8
 800381c:	46bd      	mov	sp, r7
 800381e:	bd80      	pop	{r7, pc}
 8003820:	40010000 	.word	0x40010000
 8003824:	40010400 	.word	0x40010400

08003828 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	b086      	sub	sp, #24
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
 8003830:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	2b00      	cmp	r3, #0
 8003836:	d101      	bne.n	800383c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003838:	2301      	movs	r3, #1
 800383a:	e083      	b.n	8003944 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003842:	b2db      	uxtb	r3, r3
 8003844:	2b00      	cmp	r3, #0
 8003846:	d106      	bne.n	8003856 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2200      	movs	r2, #0
 800384c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003850:	6878      	ldr	r0, [r7, #4]
 8003852:	f00d fb39 	bl	8010ec8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2202      	movs	r2, #2
 800385a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	689b      	ldr	r3, [r3, #8]
 8003864:	687a      	ldr	r2, [r7, #4]
 8003866:	6812      	ldr	r2, [r2, #0]
 8003868:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800386c:	f023 0307 	bic.w	r3, r3, #7
 8003870:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681a      	ldr	r2, [r3, #0]
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	3304      	adds	r3, #4
 800387a:	4619      	mov	r1, r3
 800387c:	4610      	mov	r0, r2
 800387e:	f000 fb4b 	bl	8003f18 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	689b      	ldr	r3, [r3, #8]
 8003888:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	699b      	ldr	r3, [r3, #24]
 8003890:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	6a1b      	ldr	r3, [r3, #32]
 8003898:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	697a      	ldr	r2, [r7, #20]
 80038a0:	4313      	orrs	r3, r2
 80038a2:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80038a4:	693b      	ldr	r3, [r7, #16]
 80038a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038aa:	f023 0303 	bic.w	r3, r3, #3
 80038ae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	689a      	ldr	r2, [r3, #8]
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	699b      	ldr	r3, [r3, #24]
 80038b8:	021b      	lsls	r3, r3, #8
 80038ba:	4313      	orrs	r3, r2
 80038bc:	693a      	ldr	r2, [r7, #16]
 80038be:	4313      	orrs	r3, r2
 80038c0:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80038c2:	693b      	ldr	r3, [r7, #16]
 80038c4:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80038c8:	f023 030c 	bic.w	r3, r3, #12
 80038cc:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80038ce:	693b      	ldr	r3, [r7, #16]
 80038d0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80038d4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80038d8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	68da      	ldr	r2, [r3, #12]
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	69db      	ldr	r3, [r3, #28]
 80038e2:	021b      	lsls	r3, r3, #8
 80038e4:	4313      	orrs	r3, r2
 80038e6:	693a      	ldr	r2, [r7, #16]
 80038e8:	4313      	orrs	r3, r2
 80038ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	691b      	ldr	r3, [r3, #16]
 80038f0:	011a      	lsls	r2, r3, #4
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	6a1b      	ldr	r3, [r3, #32]
 80038f6:	031b      	lsls	r3, r3, #12
 80038f8:	4313      	orrs	r3, r2
 80038fa:	693a      	ldr	r2, [r7, #16]
 80038fc:	4313      	orrs	r3, r2
 80038fe:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8003906:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800390e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	685a      	ldr	r2, [r3, #4]
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	695b      	ldr	r3, [r3, #20]
 8003918:	011b      	lsls	r3, r3, #4
 800391a:	4313      	orrs	r3, r2
 800391c:	68fa      	ldr	r2, [r7, #12]
 800391e:	4313      	orrs	r3, r2
 8003920:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	697a      	ldr	r2, [r7, #20]
 8003928:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	693a      	ldr	r2, [r7, #16]
 8003930:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	68fa      	ldr	r2, [r7, #12]
 8003938:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	2201      	movs	r2, #1
 800393e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003942:	2300      	movs	r3, #0
}
 8003944:	4618      	mov	r0, r3
 8003946:	3718      	adds	r7, #24
 8003948:	46bd      	mov	sp, r7
 800394a:	bd80      	pop	{r7, pc}

0800394c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800394c:	b580      	push	{r7, lr}
 800394e:	b082      	sub	sp, #8
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
 8003954:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 8003956:	683b      	ldr	r3, [r7, #0]
 8003958:	2b00      	cmp	r3, #0
 800395a:	d002      	beq.n	8003962 <HAL_TIM_Encoder_Start+0x16>
 800395c:	2b04      	cmp	r3, #4
 800395e:	d008      	beq.n	8003972 <HAL_TIM_Encoder_Start+0x26>
 8003960:	e00f      	b.n	8003982 <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	2201      	movs	r2, #1
 8003968:	2100      	movs	r1, #0
 800396a:	4618      	mov	r0, r3
 800396c:	f000 fdbe 	bl	80044ec <TIM_CCxChannelCmd>
      break;
 8003970:	e016      	b.n	80039a0 <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	2201      	movs	r2, #1
 8003978:	2104      	movs	r1, #4
 800397a:	4618      	mov	r0, r3
 800397c:	f000 fdb6 	bl	80044ec <TIM_CCxChannelCmd>
      break;
 8003980:	e00e      	b.n	80039a0 <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	2201      	movs	r2, #1
 8003988:	2100      	movs	r1, #0
 800398a:	4618      	mov	r0, r3
 800398c:	f000 fdae 	bl	80044ec <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	2201      	movs	r2, #1
 8003996:	2104      	movs	r1, #4
 8003998:	4618      	mov	r0, r3
 800399a:	f000 fda7 	bl	80044ec <TIM_CCxChannelCmd>
      break;
 800399e:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	681a      	ldr	r2, [r3, #0]
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f042 0201 	orr.w	r2, r2, #1
 80039ae:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80039b0:	2300      	movs	r3, #0
}
 80039b2:	4618      	mov	r0, r3
 80039b4:	3708      	adds	r7, #8
 80039b6:	46bd      	mov	sp, r7
 80039b8:	bd80      	pop	{r7, pc}

080039ba <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80039ba:	b580      	push	{r7, lr}
 80039bc:	b082      	sub	sp, #8
 80039be:	af00      	add	r7, sp, #0
 80039c0:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	691b      	ldr	r3, [r3, #16]
 80039c8:	f003 0302 	and.w	r3, r3, #2
 80039cc:	2b02      	cmp	r3, #2
 80039ce:	d122      	bne.n	8003a16 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	68db      	ldr	r3, [r3, #12]
 80039d6:	f003 0302 	and.w	r3, r3, #2
 80039da:	2b02      	cmp	r3, #2
 80039dc:	d11b      	bne.n	8003a16 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f06f 0202 	mvn.w	r2, #2
 80039e6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2201      	movs	r2, #1
 80039ec:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	699b      	ldr	r3, [r3, #24]
 80039f4:	f003 0303 	and.w	r3, r3, #3
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d003      	beq.n	8003a04 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80039fc:	6878      	ldr	r0, [r7, #4]
 80039fe:	f000 fa6c 	bl	8003eda <HAL_TIM_IC_CaptureCallback>
 8003a02:	e005      	b.n	8003a10 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a04:	6878      	ldr	r0, [r7, #4]
 8003a06:	f000 fa5e 	bl	8003ec6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a0a:	6878      	ldr	r0, [r7, #4]
 8003a0c:	f000 fa6f 	bl	8003eee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2200      	movs	r2, #0
 8003a14:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	691b      	ldr	r3, [r3, #16]
 8003a1c:	f003 0304 	and.w	r3, r3, #4
 8003a20:	2b04      	cmp	r3, #4
 8003a22:	d122      	bne.n	8003a6a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	68db      	ldr	r3, [r3, #12]
 8003a2a:	f003 0304 	and.w	r3, r3, #4
 8003a2e:	2b04      	cmp	r3, #4
 8003a30:	d11b      	bne.n	8003a6a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f06f 0204 	mvn.w	r2, #4
 8003a3a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2202      	movs	r2, #2
 8003a40:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	699b      	ldr	r3, [r3, #24]
 8003a48:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d003      	beq.n	8003a58 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a50:	6878      	ldr	r0, [r7, #4]
 8003a52:	f000 fa42 	bl	8003eda <HAL_TIM_IC_CaptureCallback>
 8003a56:	e005      	b.n	8003a64 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a58:	6878      	ldr	r0, [r7, #4]
 8003a5a:	f000 fa34 	bl	8003ec6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a5e:	6878      	ldr	r0, [r7, #4]
 8003a60:	f000 fa45 	bl	8003eee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2200      	movs	r2, #0
 8003a68:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	691b      	ldr	r3, [r3, #16]
 8003a70:	f003 0308 	and.w	r3, r3, #8
 8003a74:	2b08      	cmp	r3, #8
 8003a76:	d122      	bne.n	8003abe <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	68db      	ldr	r3, [r3, #12]
 8003a7e:	f003 0308 	and.w	r3, r3, #8
 8003a82:	2b08      	cmp	r3, #8
 8003a84:	d11b      	bne.n	8003abe <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f06f 0208 	mvn.w	r2, #8
 8003a8e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2204      	movs	r2, #4
 8003a94:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	69db      	ldr	r3, [r3, #28]
 8003a9c:	f003 0303 	and.w	r3, r3, #3
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d003      	beq.n	8003aac <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003aa4:	6878      	ldr	r0, [r7, #4]
 8003aa6:	f000 fa18 	bl	8003eda <HAL_TIM_IC_CaptureCallback>
 8003aaa:	e005      	b.n	8003ab8 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003aac:	6878      	ldr	r0, [r7, #4]
 8003aae:	f000 fa0a 	bl	8003ec6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ab2:	6878      	ldr	r0, [r7, #4]
 8003ab4:	f000 fa1b 	bl	8003eee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2200      	movs	r2, #0
 8003abc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	691b      	ldr	r3, [r3, #16]
 8003ac4:	f003 0310 	and.w	r3, r3, #16
 8003ac8:	2b10      	cmp	r3, #16
 8003aca:	d122      	bne.n	8003b12 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	68db      	ldr	r3, [r3, #12]
 8003ad2:	f003 0310 	and.w	r3, r3, #16
 8003ad6:	2b10      	cmp	r3, #16
 8003ad8:	d11b      	bne.n	8003b12 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f06f 0210 	mvn.w	r2, #16
 8003ae2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2208      	movs	r2, #8
 8003ae8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	69db      	ldr	r3, [r3, #28]
 8003af0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d003      	beq.n	8003b00 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003af8:	6878      	ldr	r0, [r7, #4]
 8003afa:	f000 f9ee 	bl	8003eda <HAL_TIM_IC_CaptureCallback>
 8003afe:	e005      	b.n	8003b0c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b00:	6878      	ldr	r0, [r7, #4]
 8003b02:	f000 f9e0 	bl	8003ec6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b06:	6878      	ldr	r0, [r7, #4]
 8003b08:	f000 f9f1 	bl	8003eee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2200      	movs	r2, #0
 8003b10:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	691b      	ldr	r3, [r3, #16]
 8003b18:	f003 0301 	and.w	r3, r3, #1
 8003b1c:	2b01      	cmp	r3, #1
 8003b1e:	d10e      	bne.n	8003b3e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	68db      	ldr	r3, [r3, #12]
 8003b26:	f003 0301 	and.w	r3, r3, #1
 8003b2a:	2b01      	cmp	r3, #1
 8003b2c:	d107      	bne.n	8003b3e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f06f 0201 	mvn.w	r2, #1
 8003b36:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003b38:	6878      	ldr	r0, [r7, #4]
 8003b3a:	f007 fe71 	bl	800b820 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	691b      	ldr	r3, [r3, #16]
 8003b44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b48:	2b80      	cmp	r3, #128	; 0x80
 8003b4a:	d10e      	bne.n	8003b6a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	68db      	ldr	r3, [r3, #12]
 8003b52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b56:	2b80      	cmp	r3, #128	; 0x80
 8003b58:	d107      	bne.n	8003b6a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003b62:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003b64:	6878      	ldr	r0, [r7, #4]
 8003b66:	f000 fd35 	bl	80045d4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	691b      	ldr	r3, [r3, #16]
 8003b70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b74:	2b40      	cmp	r3, #64	; 0x40
 8003b76:	d10e      	bne.n	8003b96 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	68db      	ldr	r3, [r3, #12]
 8003b7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b82:	2b40      	cmp	r3, #64	; 0x40
 8003b84:	d107      	bne.n	8003b96 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003b8e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003b90:	6878      	ldr	r0, [r7, #4]
 8003b92:	f000 f9b6 	bl	8003f02 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	691b      	ldr	r3, [r3, #16]
 8003b9c:	f003 0320 	and.w	r3, r3, #32
 8003ba0:	2b20      	cmp	r3, #32
 8003ba2:	d10e      	bne.n	8003bc2 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	68db      	ldr	r3, [r3, #12]
 8003baa:	f003 0320 	and.w	r3, r3, #32
 8003bae:	2b20      	cmp	r3, #32
 8003bb0:	d107      	bne.n	8003bc2 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f06f 0220 	mvn.w	r2, #32
 8003bba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003bbc:	6878      	ldr	r0, [r7, #4]
 8003bbe:	f000 fcff 	bl	80045c0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003bc2:	bf00      	nop
 8003bc4:	3708      	adds	r7, #8
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	bd80      	pop	{r7, pc}
	...

08003bcc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b084      	sub	sp, #16
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	60f8      	str	r0, [r7, #12]
 8003bd4:	60b9      	str	r1, [r7, #8]
 8003bd6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003bde:	2b01      	cmp	r3, #1
 8003be0:	d101      	bne.n	8003be6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003be2:	2302      	movs	r3, #2
 8003be4:	e0b4      	b.n	8003d50 <HAL_TIM_PWM_ConfigChannel+0x184>
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	2201      	movs	r2, #1
 8003bea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	2202      	movs	r2, #2
 8003bf2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	2b0c      	cmp	r3, #12
 8003bfa:	f200 809f 	bhi.w	8003d3c <HAL_TIM_PWM_ConfigChannel+0x170>
 8003bfe:	a201      	add	r2, pc, #4	; (adr r2, 8003c04 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8003c00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c04:	08003c39 	.word	0x08003c39
 8003c08:	08003d3d 	.word	0x08003d3d
 8003c0c:	08003d3d 	.word	0x08003d3d
 8003c10:	08003d3d 	.word	0x08003d3d
 8003c14:	08003c79 	.word	0x08003c79
 8003c18:	08003d3d 	.word	0x08003d3d
 8003c1c:	08003d3d 	.word	0x08003d3d
 8003c20:	08003d3d 	.word	0x08003d3d
 8003c24:	08003cbb 	.word	0x08003cbb
 8003c28:	08003d3d 	.word	0x08003d3d
 8003c2c:	08003d3d 	.word	0x08003d3d
 8003c30:	08003d3d 	.word	0x08003d3d
 8003c34:	08003cfb 	.word	0x08003cfb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	68b9      	ldr	r1, [r7, #8]
 8003c3e:	4618      	mov	r0, r3
 8003c40:	f000 fa0a 	bl	8004058 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	699a      	ldr	r2, [r3, #24]
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f042 0208 	orr.w	r2, r2, #8
 8003c52:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	699a      	ldr	r2, [r3, #24]
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f022 0204 	bic.w	r2, r2, #4
 8003c62:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	6999      	ldr	r1, [r3, #24]
 8003c6a:	68bb      	ldr	r3, [r7, #8]
 8003c6c:	691a      	ldr	r2, [r3, #16]
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	430a      	orrs	r2, r1
 8003c74:	619a      	str	r2, [r3, #24]
      break;
 8003c76:	e062      	b.n	8003d3e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	68b9      	ldr	r1, [r7, #8]
 8003c7e:	4618      	mov	r0, r3
 8003c80:	f000 fa5a 	bl	8004138 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	699a      	ldr	r2, [r3, #24]
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003c92:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	699a      	ldr	r2, [r3, #24]
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ca2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	6999      	ldr	r1, [r3, #24]
 8003caa:	68bb      	ldr	r3, [r7, #8]
 8003cac:	691b      	ldr	r3, [r3, #16]
 8003cae:	021a      	lsls	r2, r3, #8
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	430a      	orrs	r2, r1
 8003cb6:	619a      	str	r2, [r3, #24]
      break;
 8003cb8:	e041      	b.n	8003d3e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	68b9      	ldr	r1, [r7, #8]
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	f000 faaf 	bl	8004224 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	69da      	ldr	r2, [r3, #28]
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f042 0208 	orr.w	r2, r2, #8
 8003cd4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	69da      	ldr	r2, [r3, #28]
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f022 0204 	bic.w	r2, r2, #4
 8003ce4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	69d9      	ldr	r1, [r3, #28]
 8003cec:	68bb      	ldr	r3, [r7, #8]
 8003cee:	691a      	ldr	r2, [r3, #16]
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	430a      	orrs	r2, r1
 8003cf6:	61da      	str	r2, [r3, #28]
      break;
 8003cf8:	e021      	b.n	8003d3e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	68b9      	ldr	r1, [r7, #8]
 8003d00:	4618      	mov	r0, r3
 8003d02:	f000 fb03 	bl	800430c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	69da      	ldr	r2, [r3, #28]
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003d14:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	69da      	ldr	r2, [r3, #28]
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d24:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	69d9      	ldr	r1, [r3, #28]
 8003d2c:	68bb      	ldr	r3, [r7, #8]
 8003d2e:	691b      	ldr	r3, [r3, #16]
 8003d30:	021a      	lsls	r2, r3, #8
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	430a      	orrs	r2, r1
 8003d38:	61da      	str	r2, [r3, #28]
      break;
 8003d3a:	e000      	b.n	8003d3e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8003d3c:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	2201      	movs	r2, #1
 8003d42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	2200      	movs	r2, #0
 8003d4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003d4e:	2300      	movs	r3, #0
}
 8003d50:	4618      	mov	r0, r3
 8003d52:	3710      	adds	r7, #16
 8003d54:	46bd      	mov	sp, r7
 8003d56:	bd80      	pop	{r7, pc}

08003d58 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b084      	sub	sp, #16
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
 8003d60:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d68:	2b01      	cmp	r3, #1
 8003d6a:	d101      	bne.n	8003d70 <HAL_TIM_ConfigClockSource+0x18>
 8003d6c:	2302      	movs	r3, #2
 8003d6e:	e0a6      	b.n	8003ebe <HAL_TIM_ConfigClockSource+0x166>
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2201      	movs	r2, #1
 8003d74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2202      	movs	r2, #2
 8003d7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	689b      	ldr	r3, [r3, #8]
 8003d86:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003d8e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003d96:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	68fa      	ldr	r2, [r7, #12]
 8003d9e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	2b40      	cmp	r3, #64	; 0x40
 8003da6:	d067      	beq.n	8003e78 <HAL_TIM_ConfigClockSource+0x120>
 8003da8:	2b40      	cmp	r3, #64	; 0x40
 8003daa:	d80b      	bhi.n	8003dc4 <HAL_TIM_ConfigClockSource+0x6c>
 8003dac:	2b10      	cmp	r3, #16
 8003dae:	d073      	beq.n	8003e98 <HAL_TIM_ConfigClockSource+0x140>
 8003db0:	2b10      	cmp	r3, #16
 8003db2:	d802      	bhi.n	8003dba <HAL_TIM_ConfigClockSource+0x62>
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d06f      	beq.n	8003e98 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8003db8:	e078      	b.n	8003eac <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003dba:	2b20      	cmp	r3, #32
 8003dbc:	d06c      	beq.n	8003e98 <HAL_TIM_ConfigClockSource+0x140>
 8003dbe:	2b30      	cmp	r3, #48	; 0x30
 8003dc0:	d06a      	beq.n	8003e98 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8003dc2:	e073      	b.n	8003eac <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003dc4:	2b70      	cmp	r3, #112	; 0x70
 8003dc6:	d00d      	beq.n	8003de4 <HAL_TIM_ConfigClockSource+0x8c>
 8003dc8:	2b70      	cmp	r3, #112	; 0x70
 8003dca:	d804      	bhi.n	8003dd6 <HAL_TIM_ConfigClockSource+0x7e>
 8003dcc:	2b50      	cmp	r3, #80	; 0x50
 8003dce:	d033      	beq.n	8003e38 <HAL_TIM_ConfigClockSource+0xe0>
 8003dd0:	2b60      	cmp	r3, #96	; 0x60
 8003dd2:	d041      	beq.n	8003e58 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8003dd4:	e06a      	b.n	8003eac <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003dd6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003dda:	d066      	beq.n	8003eaa <HAL_TIM_ConfigClockSource+0x152>
 8003ddc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003de0:	d017      	beq.n	8003e12 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8003de2:	e063      	b.n	8003eac <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6818      	ldr	r0, [r3, #0]
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	6899      	ldr	r1, [r3, #8]
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	685a      	ldr	r2, [r3, #4]
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	68db      	ldr	r3, [r3, #12]
 8003df4:	f000 fb5a 	bl	80044ac <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	689b      	ldr	r3, [r3, #8]
 8003dfe:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003e06:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	68fa      	ldr	r2, [r7, #12]
 8003e0e:	609a      	str	r2, [r3, #8]
      break;
 8003e10:	e04c      	b.n	8003eac <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6818      	ldr	r0, [r3, #0]
 8003e16:	683b      	ldr	r3, [r7, #0]
 8003e18:	6899      	ldr	r1, [r3, #8]
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	685a      	ldr	r2, [r3, #4]
 8003e1e:	683b      	ldr	r3, [r7, #0]
 8003e20:	68db      	ldr	r3, [r3, #12]
 8003e22:	f000 fb43 	bl	80044ac <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	689a      	ldr	r2, [r3, #8]
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003e34:	609a      	str	r2, [r3, #8]
      break;
 8003e36:	e039      	b.n	8003eac <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	6818      	ldr	r0, [r3, #0]
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	6859      	ldr	r1, [r3, #4]
 8003e40:	683b      	ldr	r3, [r7, #0]
 8003e42:	68db      	ldr	r3, [r3, #12]
 8003e44:	461a      	mov	r2, r3
 8003e46:	f000 fab7 	bl	80043b8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	2150      	movs	r1, #80	; 0x50
 8003e50:	4618      	mov	r0, r3
 8003e52:	f000 fb10 	bl	8004476 <TIM_ITRx_SetConfig>
      break;
 8003e56:	e029      	b.n	8003eac <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6818      	ldr	r0, [r3, #0]
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	6859      	ldr	r1, [r3, #4]
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	68db      	ldr	r3, [r3, #12]
 8003e64:	461a      	mov	r2, r3
 8003e66:	f000 fad6 	bl	8004416 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	2160      	movs	r1, #96	; 0x60
 8003e70:	4618      	mov	r0, r3
 8003e72:	f000 fb00 	bl	8004476 <TIM_ITRx_SetConfig>
      break;
 8003e76:	e019      	b.n	8003eac <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6818      	ldr	r0, [r3, #0]
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	6859      	ldr	r1, [r3, #4]
 8003e80:	683b      	ldr	r3, [r7, #0]
 8003e82:	68db      	ldr	r3, [r3, #12]
 8003e84:	461a      	mov	r2, r3
 8003e86:	f000 fa97 	bl	80043b8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	2140      	movs	r1, #64	; 0x40
 8003e90:	4618      	mov	r0, r3
 8003e92:	f000 faf0 	bl	8004476 <TIM_ITRx_SetConfig>
      break;
 8003e96:	e009      	b.n	8003eac <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681a      	ldr	r2, [r3, #0]
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	4619      	mov	r1, r3
 8003ea2:	4610      	mov	r0, r2
 8003ea4:	f000 fae7 	bl	8004476 <TIM_ITRx_SetConfig>
      break;
 8003ea8:	e000      	b.n	8003eac <HAL_TIM_ConfigClockSource+0x154>
      break;
 8003eaa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2201      	movs	r2, #1
 8003eb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003ebc:	2300      	movs	r3, #0
}
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	3710      	adds	r7, #16
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	bd80      	pop	{r7, pc}

08003ec6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003ec6:	b480      	push	{r7}
 8003ec8:	b083      	sub	sp, #12
 8003eca:	af00      	add	r7, sp, #0
 8003ecc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003ece:	bf00      	nop
 8003ed0:	370c      	adds	r7, #12
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed8:	4770      	bx	lr

08003eda <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003eda:	b480      	push	{r7}
 8003edc:	b083      	sub	sp, #12
 8003ede:	af00      	add	r7, sp, #0
 8003ee0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003ee2:	bf00      	nop
 8003ee4:	370c      	adds	r7, #12
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eec:	4770      	bx	lr

08003eee <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003eee:	b480      	push	{r7}
 8003ef0:	b083      	sub	sp, #12
 8003ef2:	af00      	add	r7, sp, #0
 8003ef4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003ef6:	bf00      	nop
 8003ef8:	370c      	adds	r7, #12
 8003efa:	46bd      	mov	sp, r7
 8003efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f00:	4770      	bx	lr

08003f02 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003f02:	b480      	push	{r7}
 8003f04:	b083      	sub	sp, #12
 8003f06:	af00      	add	r7, sp, #0
 8003f08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003f0a:	bf00      	nop
 8003f0c:	370c      	adds	r7, #12
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f14:	4770      	bx	lr
	...

08003f18 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003f18:	b480      	push	{r7}
 8003f1a:	b085      	sub	sp, #20
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
 8003f20:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	4a40      	ldr	r2, [pc, #256]	; (800402c <TIM_Base_SetConfig+0x114>)
 8003f2c:	4293      	cmp	r3, r2
 8003f2e:	d013      	beq.n	8003f58 <TIM_Base_SetConfig+0x40>
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f36:	d00f      	beq.n	8003f58 <TIM_Base_SetConfig+0x40>
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	4a3d      	ldr	r2, [pc, #244]	; (8004030 <TIM_Base_SetConfig+0x118>)
 8003f3c:	4293      	cmp	r3, r2
 8003f3e:	d00b      	beq.n	8003f58 <TIM_Base_SetConfig+0x40>
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	4a3c      	ldr	r2, [pc, #240]	; (8004034 <TIM_Base_SetConfig+0x11c>)
 8003f44:	4293      	cmp	r3, r2
 8003f46:	d007      	beq.n	8003f58 <TIM_Base_SetConfig+0x40>
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	4a3b      	ldr	r2, [pc, #236]	; (8004038 <TIM_Base_SetConfig+0x120>)
 8003f4c:	4293      	cmp	r3, r2
 8003f4e:	d003      	beq.n	8003f58 <TIM_Base_SetConfig+0x40>
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	4a3a      	ldr	r2, [pc, #232]	; (800403c <TIM_Base_SetConfig+0x124>)
 8003f54:	4293      	cmp	r3, r2
 8003f56:	d108      	bne.n	8003f6a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f5e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003f60:	683b      	ldr	r3, [r7, #0]
 8003f62:	685b      	ldr	r3, [r3, #4]
 8003f64:	68fa      	ldr	r2, [r7, #12]
 8003f66:	4313      	orrs	r3, r2
 8003f68:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	4a2f      	ldr	r2, [pc, #188]	; (800402c <TIM_Base_SetConfig+0x114>)
 8003f6e:	4293      	cmp	r3, r2
 8003f70:	d02b      	beq.n	8003fca <TIM_Base_SetConfig+0xb2>
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f78:	d027      	beq.n	8003fca <TIM_Base_SetConfig+0xb2>
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	4a2c      	ldr	r2, [pc, #176]	; (8004030 <TIM_Base_SetConfig+0x118>)
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	d023      	beq.n	8003fca <TIM_Base_SetConfig+0xb2>
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	4a2b      	ldr	r2, [pc, #172]	; (8004034 <TIM_Base_SetConfig+0x11c>)
 8003f86:	4293      	cmp	r3, r2
 8003f88:	d01f      	beq.n	8003fca <TIM_Base_SetConfig+0xb2>
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	4a2a      	ldr	r2, [pc, #168]	; (8004038 <TIM_Base_SetConfig+0x120>)
 8003f8e:	4293      	cmp	r3, r2
 8003f90:	d01b      	beq.n	8003fca <TIM_Base_SetConfig+0xb2>
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	4a29      	ldr	r2, [pc, #164]	; (800403c <TIM_Base_SetConfig+0x124>)
 8003f96:	4293      	cmp	r3, r2
 8003f98:	d017      	beq.n	8003fca <TIM_Base_SetConfig+0xb2>
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	4a28      	ldr	r2, [pc, #160]	; (8004040 <TIM_Base_SetConfig+0x128>)
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d013      	beq.n	8003fca <TIM_Base_SetConfig+0xb2>
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	4a27      	ldr	r2, [pc, #156]	; (8004044 <TIM_Base_SetConfig+0x12c>)
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d00f      	beq.n	8003fca <TIM_Base_SetConfig+0xb2>
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	4a26      	ldr	r2, [pc, #152]	; (8004048 <TIM_Base_SetConfig+0x130>)
 8003fae:	4293      	cmp	r3, r2
 8003fb0:	d00b      	beq.n	8003fca <TIM_Base_SetConfig+0xb2>
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	4a25      	ldr	r2, [pc, #148]	; (800404c <TIM_Base_SetConfig+0x134>)
 8003fb6:	4293      	cmp	r3, r2
 8003fb8:	d007      	beq.n	8003fca <TIM_Base_SetConfig+0xb2>
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	4a24      	ldr	r2, [pc, #144]	; (8004050 <TIM_Base_SetConfig+0x138>)
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	d003      	beq.n	8003fca <TIM_Base_SetConfig+0xb2>
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	4a23      	ldr	r2, [pc, #140]	; (8004054 <TIM_Base_SetConfig+0x13c>)
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	d108      	bne.n	8003fdc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003fd0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	68db      	ldr	r3, [r3, #12]
 8003fd6:	68fa      	ldr	r2, [r7, #12]
 8003fd8:	4313      	orrs	r3, r2
 8003fda:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003fe2:	683b      	ldr	r3, [r7, #0]
 8003fe4:	695b      	ldr	r3, [r3, #20]
 8003fe6:	4313      	orrs	r3, r2
 8003fe8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	68fa      	ldr	r2, [r7, #12]
 8003fee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	689a      	ldr	r2, [r3, #8]
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003ff8:	683b      	ldr	r3, [r7, #0]
 8003ffa:	681a      	ldr	r2, [r3, #0]
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	4a0a      	ldr	r2, [pc, #40]	; (800402c <TIM_Base_SetConfig+0x114>)
 8004004:	4293      	cmp	r3, r2
 8004006:	d003      	beq.n	8004010 <TIM_Base_SetConfig+0xf8>
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	4a0c      	ldr	r2, [pc, #48]	; (800403c <TIM_Base_SetConfig+0x124>)
 800400c:	4293      	cmp	r3, r2
 800400e:	d103      	bne.n	8004018 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	691a      	ldr	r2, [r3, #16]
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2201      	movs	r2, #1
 800401c:	615a      	str	r2, [r3, #20]
}
 800401e:	bf00      	nop
 8004020:	3714      	adds	r7, #20
 8004022:	46bd      	mov	sp, r7
 8004024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004028:	4770      	bx	lr
 800402a:	bf00      	nop
 800402c:	40010000 	.word	0x40010000
 8004030:	40000400 	.word	0x40000400
 8004034:	40000800 	.word	0x40000800
 8004038:	40000c00 	.word	0x40000c00
 800403c:	40010400 	.word	0x40010400
 8004040:	40014000 	.word	0x40014000
 8004044:	40014400 	.word	0x40014400
 8004048:	40014800 	.word	0x40014800
 800404c:	40001800 	.word	0x40001800
 8004050:	40001c00 	.word	0x40001c00
 8004054:	40002000 	.word	0x40002000

08004058 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004058:	b480      	push	{r7}
 800405a:	b087      	sub	sp, #28
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
 8004060:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6a1b      	ldr	r3, [r3, #32]
 8004066:	f023 0201 	bic.w	r2, r3, #1
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6a1b      	ldr	r3, [r3, #32]
 8004072:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	685b      	ldr	r3, [r3, #4]
 8004078:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	699b      	ldr	r3, [r3, #24]
 800407e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004086:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	f023 0303 	bic.w	r3, r3, #3
 800408e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	68fa      	ldr	r2, [r7, #12]
 8004096:	4313      	orrs	r3, r2
 8004098:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800409a:	697b      	ldr	r3, [r7, #20]
 800409c:	f023 0302 	bic.w	r3, r3, #2
 80040a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80040a2:	683b      	ldr	r3, [r7, #0]
 80040a4:	689b      	ldr	r3, [r3, #8]
 80040a6:	697a      	ldr	r2, [r7, #20]
 80040a8:	4313      	orrs	r3, r2
 80040aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	4a20      	ldr	r2, [pc, #128]	; (8004130 <TIM_OC1_SetConfig+0xd8>)
 80040b0:	4293      	cmp	r3, r2
 80040b2:	d003      	beq.n	80040bc <TIM_OC1_SetConfig+0x64>
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	4a1f      	ldr	r2, [pc, #124]	; (8004134 <TIM_OC1_SetConfig+0xdc>)
 80040b8:	4293      	cmp	r3, r2
 80040ba:	d10c      	bne.n	80040d6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80040bc:	697b      	ldr	r3, [r7, #20]
 80040be:	f023 0308 	bic.w	r3, r3, #8
 80040c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	68db      	ldr	r3, [r3, #12]
 80040c8:	697a      	ldr	r2, [r7, #20]
 80040ca:	4313      	orrs	r3, r2
 80040cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80040ce:	697b      	ldr	r3, [r7, #20]
 80040d0:	f023 0304 	bic.w	r3, r3, #4
 80040d4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	4a15      	ldr	r2, [pc, #84]	; (8004130 <TIM_OC1_SetConfig+0xd8>)
 80040da:	4293      	cmp	r3, r2
 80040dc:	d003      	beq.n	80040e6 <TIM_OC1_SetConfig+0x8e>
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	4a14      	ldr	r2, [pc, #80]	; (8004134 <TIM_OC1_SetConfig+0xdc>)
 80040e2:	4293      	cmp	r3, r2
 80040e4:	d111      	bne.n	800410a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80040e6:	693b      	ldr	r3, [r7, #16]
 80040e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80040ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80040ee:	693b      	ldr	r3, [r7, #16]
 80040f0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80040f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80040f6:	683b      	ldr	r3, [r7, #0]
 80040f8:	695b      	ldr	r3, [r3, #20]
 80040fa:	693a      	ldr	r2, [r7, #16]
 80040fc:	4313      	orrs	r3, r2
 80040fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	699b      	ldr	r3, [r3, #24]
 8004104:	693a      	ldr	r2, [r7, #16]
 8004106:	4313      	orrs	r3, r2
 8004108:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	693a      	ldr	r2, [r7, #16]
 800410e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	68fa      	ldr	r2, [r7, #12]
 8004114:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004116:	683b      	ldr	r3, [r7, #0]
 8004118:	685a      	ldr	r2, [r3, #4]
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	697a      	ldr	r2, [r7, #20]
 8004122:	621a      	str	r2, [r3, #32]
}
 8004124:	bf00      	nop
 8004126:	371c      	adds	r7, #28
 8004128:	46bd      	mov	sp, r7
 800412a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412e:	4770      	bx	lr
 8004130:	40010000 	.word	0x40010000
 8004134:	40010400 	.word	0x40010400

08004138 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004138:	b480      	push	{r7}
 800413a:	b087      	sub	sp, #28
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
 8004140:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6a1b      	ldr	r3, [r3, #32]
 8004146:	f023 0210 	bic.w	r2, r3, #16
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6a1b      	ldr	r3, [r3, #32]
 8004152:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	685b      	ldr	r3, [r3, #4]
 8004158:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	699b      	ldr	r3, [r3, #24]
 800415e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004166:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800416e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	021b      	lsls	r3, r3, #8
 8004176:	68fa      	ldr	r2, [r7, #12]
 8004178:	4313      	orrs	r3, r2
 800417a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800417c:	697b      	ldr	r3, [r7, #20]
 800417e:	f023 0320 	bic.w	r3, r3, #32
 8004182:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004184:	683b      	ldr	r3, [r7, #0]
 8004186:	689b      	ldr	r3, [r3, #8]
 8004188:	011b      	lsls	r3, r3, #4
 800418a:	697a      	ldr	r2, [r7, #20]
 800418c:	4313      	orrs	r3, r2
 800418e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	4a22      	ldr	r2, [pc, #136]	; (800421c <TIM_OC2_SetConfig+0xe4>)
 8004194:	4293      	cmp	r3, r2
 8004196:	d003      	beq.n	80041a0 <TIM_OC2_SetConfig+0x68>
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	4a21      	ldr	r2, [pc, #132]	; (8004220 <TIM_OC2_SetConfig+0xe8>)
 800419c:	4293      	cmp	r3, r2
 800419e:	d10d      	bne.n	80041bc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80041a0:	697b      	ldr	r3, [r7, #20]
 80041a2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80041a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80041a8:	683b      	ldr	r3, [r7, #0]
 80041aa:	68db      	ldr	r3, [r3, #12]
 80041ac:	011b      	lsls	r3, r3, #4
 80041ae:	697a      	ldr	r2, [r7, #20]
 80041b0:	4313      	orrs	r3, r2
 80041b2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80041b4:	697b      	ldr	r3, [r7, #20]
 80041b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80041ba:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	4a17      	ldr	r2, [pc, #92]	; (800421c <TIM_OC2_SetConfig+0xe4>)
 80041c0:	4293      	cmp	r3, r2
 80041c2:	d003      	beq.n	80041cc <TIM_OC2_SetConfig+0x94>
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	4a16      	ldr	r2, [pc, #88]	; (8004220 <TIM_OC2_SetConfig+0xe8>)
 80041c8:	4293      	cmp	r3, r2
 80041ca:	d113      	bne.n	80041f4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80041cc:	693b      	ldr	r3, [r7, #16]
 80041ce:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80041d2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80041d4:	693b      	ldr	r3, [r7, #16]
 80041d6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80041da:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	695b      	ldr	r3, [r3, #20]
 80041e0:	009b      	lsls	r3, r3, #2
 80041e2:	693a      	ldr	r2, [r7, #16]
 80041e4:	4313      	orrs	r3, r2
 80041e6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	699b      	ldr	r3, [r3, #24]
 80041ec:	009b      	lsls	r3, r3, #2
 80041ee:	693a      	ldr	r2, [r7, #16]
 80041f0:	4313      	orrs	r3, r2
 80041f2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	693a      	ldr	r2, [r7, #16]
 80041f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	68fa      	ldr	r2, [r7, #12]
 80041fe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	685a      	ldr	r2, [r3, #4]
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	697a      	ldr	r2, [r7, #20]
 800420c:	621a      	str	r2, [r3, #32]
}
 800420e:	bf00      	nop
 8004210:	371c      	adds	r7, #28
 8004212:	46bd      	mov	sp, r7
 8004214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004218:	4770      	bx	lr
 800421a:	bf00      	nop
 800421c:	40010000 	.word	0x40010000
 8004220:	40010400 	.word	0x40010400

08004224 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004224:	b480      	push	{r7}
 8004226:	b087      	sub	sp, #28
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
 800422c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6a1b      	ldr	r3, [r3, #32]
 8004232:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6a1b      	ldr	r3, [r3, #32]
 800423e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	685b      	ldr	r3, [r3, #4]
 8004244:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	69db      	ldr	r3, [r3, #28]
 800424a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004252:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	f023 0303 	bic.w	r3, r3, #3
 800425a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800425c:	683b      	ldr	r3, [r7, #0]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	68fa      	ldr	r2, [r7, #12]
 8004262:	4313      	orrs	r3, r2
 8004264:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004266:	697b      	ldr	r3, [r7, #20]
 8004268:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800426c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800426e:	683b      	ldr	r3, [r7, #0]
 8004270:	689b      	ldr	r3, [r3, #8]
 8004272:	021b      	lsls	r3, r3, #8
 8004274:	697a      	ldr	r2, [r7, #20]
 8004276:	4313      	orrs	r3, r2
 8004278:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	4a21      	ldr	r2, [pc, #132]	; (8004304 <TIM_OC3_SetConfig+0xe0>)
 800427e:	4293      	cmp	r3, r2
 8004280:	d003      	beq.n	800428a <TIM_OC3_SetConfig+0x66>
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	4a20      	ldr	r2, [pc, #128]	; (8004308 <TIM_OC3_SetConfig+0xe4>)
 8004286:	4293      	cmp	r3, r2
 8004288:	d10d      	bne.n	80042a6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800428a:	697b      	ldr	r3, [r7, #20]
 800428c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004290:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	68db      	ldr	r3, [r3, #12]
 8004296:	021b      	lsls	r3, r3, #8
 8004298:	697a      	ldr	r2, [r7, #20]
 800429a:	4313      	orrs	r3, r2
 800429c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800429e:	697b      	ldr	r3, [r7, #20]
 80042a0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80042a4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	4a16      	ldr	r2, [pc, #88]	; (8004304 <TIM_OC3_SetConfig+0xe0>)
 80042aa:	4293      	cmp	r3, r2
 80042ac:	d003      	beq.n	80042b6 <TIM_OC3_SetConfig+0x92>
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	4a15      	ldr	r2, [pc, #84]	; (8004308 <TIM_OC3_SetConfig+0xe4>)
 80042b2:	4293      	cmp	r3, r2
 80042b4:	d113      	bne.n	80042de <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80042b6:	693b      	ldr	r3, [r7, #16]
 80042b8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80042bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80042be:	693b      	ldr	r3, [r7, #16]
 80042c0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80042c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80042c6:	683b      	ldr	r3, [r7, #0]
 80042c8:	695b      	ldr	r3, [r3, #20]
 80042ca:	011b      	lsls	r3, r3, #4
 80042cc:	693a      	ldr	r2, [r7, #16]
 80042ce:	4313      	orrs	r3, r2
 80042d0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80042d2:	683b      	ldr	r3, [r7, #0]
 80042d4:	699b      	ldr	r3, [r3, #24]
 80042d6:	011b      	lsls	r3, r3, #4
 80042d8:	693a      	ldr	r2, [r7, #16]
 80042da:	4313      	orrs	r3, r2
 80042dc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	693a      	ldr	r2, [r7, #16]
 80042e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	68fa      	ldr	r2, [r7, #12]
 80042e8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80042ea:	683b      	ldr	r3, [r7, #0]
 80042ec:	685a      	ldr	r2, [r3, #4]
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	697a      	ldr	r2, [r7, #20]
 80042f6:	621a      	str	r2, [r3, #32]
}
 80042f8:	bf00      	nop
 80042fa:	371c      	adds	r7, #28
 80042fc:	46bd      	mov	sp, r7
 80042fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004302:	4770      	bx	lr
 8004304:	40010000 	.word	0x40010000
 8004308:	40010400 	.word	0x40010400

0800430c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800430c:	b480      	push	{r7}
 800430e:	b087      	sub	sp, #28
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
 8004314:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6a1b      	ldr	r3, [r3, #32]
 800431a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6a1b      	ldr	r3, [r3, #32]
 8004326:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	685b      	ldr	r3, [r3, #4]
 800432c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	69db      	ldr	r3, [r3, #28]
 8004332:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800433a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004342:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004344:	683b      	ldr	r3, [r7, #0]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	021b      	lsls	r3, r3, #8
 800434a:	68fa      	ldr	r2, [r7, #12]
 800434c:	4313      	orrs	r3, r2
 800434e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004350:	693b      	ldr	r3, [r7, #16]
 8004352:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004356:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	689b      	ldr	r3, [r3, #8]
 800435c:	031b      	lsls	r3, r3, #12
 800435e:	693a      	ldr	r2, [r7, #16]
 8004360:	4313      	orrs	r3, r2
 8004362:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	4a12      	ldr	r2, [pc, #72]	; (80043b0 <TIM_OC4_SetConfig+0xa4>)
 8004368:	4293      	cmp	r3, r2
 800436a:	d003      	beq.n	8004374 <TIM_OC4_SetConfig+0x68>
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	4a11      	ldr	r2, [pc, #68]	; (80043b4 <TIM_OC4_SetConfig+0xa8>)
 8004370:	4293      	cmp	r3, r2
 8004372:	d109      	bne.n	8004388 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004374:	697b      	ldr	r3, [r7, #20]
 8004376:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800437a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	695b      	ldr	r3, [r3, #20]
 8004380:	019b      	lsls	r3, r3, #6
 8004382:	697a      	ldr	r2, [r7, #20]
 8004384:	4313      	orrs	r3, r2
 8004386:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	697a      	ldr	r2, [r7, #20]
 800438c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	68fa      	ldr	r2, [r7, #12]
 8004392:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	685a      	ldr	r2, [r3, #4]
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	693a      	ldr	r2, [r7, #16]
 80043a0:	621a      	str	r2, [r3, #32]
}
 80043a2:	bf00      	nop
 80043a4:	371c      	adds	r7, #28
 80043a6:	46bd      	mov	sp, r7
 80043a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ac:	4770      	bx	lr
 80043ae:	bf00      	nop
 80043b0:	40010000 	.word	0x40010000
 80043b4:	40010400 	.word	0x40010400

080043b8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80043b8:	b480      	push	{r7}
 80043ba:	b087      	sub	sp, #28
 80043bc:	af00      	add	r7, sp, #0
 80043be:	60f8      	str	r0, [r7, #12]
 80043c0:	60b9      	str	r1, [r7, #8]
 80043c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	6a1b      	ldr	r3, [r3, #32]
 80043c8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	6a1b      	ldr	r3, [r3, #32]
 80043ce:	f023 0201 	bic.w	r2, r3, #1
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	699b      	ldr	r3, [r3, #24]
 80043da:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80043dc:	693b      	ldr	r3, [r7, #16]
 80043de:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80043e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	011b      	lsls	r3, r3, #4
 80043e8:	693a      	ldr	r2, [r7, #16]
 80043ea:	4313      	orrs	r3, r2
 80043ec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80043ee:	697b      	ldr	r3, [r7, #20]
 80043f0:	f023 030a 	bic.w	r3, r3, #10
 80043f4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80043f6:	697a      	ldr	r2, [r7, #20]
 80043f8:	68bb      	ldr	r3, [r7, #8]
 80043fa:	4313      	orrs	r3, r2
 80043fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	693a      	ldr	r2, [r7, #16]
 8004402:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	697a      	ldr	r2, [r7, #20]
 8004408:	621a      	str	r2, [r3, #32]
}
 800440a:	bf00      	nop
 800440c:	371c      	adds	r7, #28
 800440e:	46bd      	mov	sp, r7
 8004410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004414:	4770      	bx	lr

08004416 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004416:	b480      	push	{r7}
 8004418:	b087      	sub	sp, #28
 800441a:	af00      	add	r7, sp, #0
 800441c:	60f8      	str	r0, [r7, #12]
 800441e:	60b9      	str	r1, [r7, #8]
 8004420:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	6a1b      	ldr	r3, [r3, #32]
 8004426:	f023 0210 	bic.w	r2, r3, #16
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	699b      	ldr	r3, [r3, #24]
 8004432:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	6a1b      	ldr	r3, [r3, #32]
 8004438:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800443a:	697b      	ldr	r3, [r7, #20]
 800443c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004440:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	031b      	lsls	r3, r3, #12
 8004446:	697a      	ldr	r2, [r7, #20]
 8004448:	4313      	orrs	r3, r2
 800444a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800444c:	693b      	ldr	r3, [r7, #16]
 800444e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004452:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004454:	68bb      	ldr	r3, [r7, #8]
 8004456:	011b      	lsls	r3, r3, #4
 8004458:	693a      	ldr	r2, [r7, #16]
 800445a:	4313      	orrs	r3, r2
 800445c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	697a      	ldr	r2, [r7, #20]
 8004462:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	693a      	ldr	r2, [r7, #16]
 8004468:	621a      	str	r2, [r3, #32]
}
 800446a:	bf00      	nop
 800446c:	371c      	adds	r7, #28
 800446e:	46bd      	mov	sp, r7
 8004470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004474:	4770      	bx	lr

08004476 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004476:	b480      	push	{r7}
 8004478:	b085      	sub	sp, #20
 800447a:	af00      	add	r7, sp, #0
 800447c:	6078      	str	r0, [r7, #4]
 800447e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	689b      	ldr	r3, [r3, #8]
 8004484:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800448c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800448e:	683a      	ldr	r2, [r7, #0]
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	4313      	orrs	r3, r2
 8004494:	f043 0307 	orr.w	r3, r3, #7
 8004498:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	68fa      	ldr	r2, [r7, #12]
 800449e:	609a      	str	r2, [r3, #8]
}
 80044a0:	bf00      	nop
 80044a2:	3714      	adds	r7, #20
 80044a4:	46bd      	mov	sp, r7
 80044a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044aa:	4770      	bx	lr

080044ac <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80044ac:	b480      	push	{r7}
 80044ae:	b087      	sub	sp, #28
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	60f8      	str	r0, [r7, #12]
 80044b4:	60b9      	str	r1, [r7, #8]
 80044b6:	607a      	str	r2, [r7, #4]
 80044b8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	689b      	ldr	r3, [r3, #8]
 80044be:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80044c0:	697b      	ldr	r3, [r7, #20]
 80044c2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80044c6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80044c8:	683b      	ldr	r3, [r7, #0]
 80044ca:	021a      	lsls	r2, r3, #8
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	431a      	orrs	r2, r3
 80044d0:	68bb      	ldr	r3, [r7, #8]
 80044d2:	4313      	orrs	r3, r2
 80044d4:	697a      	ldr	r2, [r7, #20]
 80044d6:	4313      	orrs	r3, r2
 80044d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	697a      	ldr	r2, [r7, #20]
 80044de:	609a      	str	r2, [r3, #8]
}
 80044e0:	bf00      	nop
 80044e2:	371c      	adds	r7, #28
 80044e4:	46bd      	mov	sp, r7
 80044e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ea:	4770      	bx	lr

080044ec <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80044ec:	b480      	push	{r7}
 80044ee:	b087      	sub	sp, #28
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	60f8      	str	r0, [r7, #12]
 80044f4:	60b9      	str	r1, [r7, #8]
 80044f6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80044f8:	68bb      	ldr	r3, [r7, #8]
 80044fa:	f003 031f 	and.w	r3, r3, #31
 80044fe:	2201      	movs	r2, #1
 8004500:	fa02 f303 	lsl.w	r3, r2, r3
 8004504:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	6a1a      	ldr	r2, [r3, #32]
 800450a:	697b      	ldr	r3, [r7, #20]
 800450c:	43db      	mvns	r3, r3
 800450e:	401a      	ands	r2, r3
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	6a1a      	ldr	r2, [r3, #32]
 8004518:	68bb      	ldr	r3, [r7, #8]
 800451a:	f003 031f 	and.w	r3, r3, #31
 800451e:	6879      	ldr	r1, [r7, #4]
 8004520:	fa01 f303 	lsl.w	r3, r1, r3
 8004524:	431a      	orrs	r2, r3
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	621a      	str	r2, [r3, #32]
}
 800452a:	bf00      	nop
 800452c:	371c      	adds	r7, #28
 800452e:	46bd      	mov	sp, r7
 8004530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004534:	4770      	bx	lr

08004536 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004536:	b480      	push	{r7}
 8004538:	b085      	sub	sp, #20
 800453a:	af00      	add	r7, sp, #0
 800453c:	6078      	str	r0, [r7, #4]
 800453e:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004546:	2b01      	cmp	r3, #1
 8004548:	d101      	bne.n	800454e <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800454a:	2302      	movs	r3, #2
 800454c:	e032      	b.n	80045b4 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	2201      	movs	r2, #1
 8004552:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	2202      	movs	r2, #2
 800455a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	685b      	ldr	r3, [r3, #4]
 8004564:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	689b      	ldr	r3, [r3, #8]
 800456c:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004574:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004576:	683b      	ldr	r3, [r7, #0]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	68fa      	ldr	r2, [r7, #12]
 800457c:	4313      	orrs	r3, r2
 800457e:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8004580:	68bb      	ldr	r3, [r7, #8]
 8004582:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004586:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004588:	683b      	ldr	r3, [r7, #0]
 800458a:	685b      	ldr	r3, [r3, #4]
 800458c:	68ba      	ldr	r2, [r7, #8]
 800458e:	4313      	orrs	r3, r2
 8004590:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	68fa      	ldr	r2, [r7, #12]
 8004598:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	68ba      	ldr	r2, [r7, #8]
 80045a0:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	2201      	movs	r2, #1
 80045a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	2200      	movs	r2, #0
 80045ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80045b2:	2300      	movs	r3, #0
}
 80045b4:	4618      	mov	r0, r3
 80045b6:	3714      	adds	r7, #20
 80045b8:	46bd      	mov	sp, r7
 80045ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045be:	4770      	bx	lr

080045c0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80045c0:	b480      	push	{r7}
 80045c2:	b083      	sub	sp, #12
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80045c8:	bf00      	nop
 80045ca:	370c      	adds	r7, #12
 80045cc:	46bd      	mov	sp, r7
 80045ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d2:	4770      	bx	lr

080045d4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80045d4:	b480      	push	{r7}
 80045d6:	b083      	sub	sp, #12
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80045dc:	bf00      	nop
 80045de:	370c      	adds	r7, #12
 80045e0:	46bd      	mov	sp, r7
 80045e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e6:	4770      	bx	lr

080045e8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80045e8:	b580      	push	{r7, lr}
 80045ea:	b082      	sub	sp, #8
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d101      	bne.n	80045fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80045f6:	2301      	movs	r3, #1
 80045f8:	e03f      	b.n	800467a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004600:	b2db      	uxtb	r3, r3
 8004602:	2b00      	cmp	r3, #0
 8004604:	d106      	bne.n	8004614 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	2200      	movs	r2, #0
 800460a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800460e:	6878      	ldr	r0, [r7, #4]
 8004610:	f00c fd56 	bl	80110c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2224      	movs	r2, #36	; 0x24
 8004618:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	68da      	ldr	r2, [r3, #12]
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800462a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800462c:	6878      	ldr	r0, [r7, #4]
 800462e:	f000 f90b 	bl	8004848 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	691a      	ldr	r2, [r3, #16]
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004640:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	695a      	ldr	r2, [r3, #20]
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004650:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	68da      	ldr	r2, [r3, #12]
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004660:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	2200      	movs	r2, #0
 8004666:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2220      	movs	r2, #32
 800466c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2220      	movs	r2, #32
 8004674:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8004678:	2300      	movs	r3, #0
}
 800467a:	4618      	mov	r0, r3
 800467c:	3708      	adds	r7, #8
 800467e:	46bd      	mov	sp, r7
 8004680:	bd80      	pop	{r7, pc}

08004682 <HAL_UART_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004682:	b580      	push	{r7, lr}
 8004684:	b088      	sub	sp, #32
 8004686:	af02      	add	r7, sp, #8
 8004688:	60f8      	str	r0, [r7, #12]
 800468a:	60b9      	str	r1, [r7, #8]
 800468c:	603b      	str	r3, [r7, #0]
 800468e:	4613      	mov	r3, r2
 8004690:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8004692:	2300      	movs	r3, #0
 8004694:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800469c:	b2db      	uxtb	r3, r3
 800469e:	2b20      	cmp	r3, #32
 80046a0:	f040 8083 	bne.w	80047aa <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 80046a4:	68bb      	ldr	r3, [r7, #8]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d002      	beq.n	80046b0 <HAL_UART_Transmit+0x2e>
 80046aa:	88fb      	ldrh	r3, [r7, #6]
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d101      	bne.n	80046b4 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80046b0:	2301      	movs	r3, #1
 80046b2:	e07b      	b.n	80047ac <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80046ba:	2b01      	cmp	r3, #1
 80046bc:	d101      	bne.n	80046c2 <HAL_UART_Transmit+0x40>
 80046be:	2302      	movs	r3, #2
 80046c0:	e074      	b.n	80047ac <HAL_UART_Transmit+0x12a>
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	2201      	movs	r2, #1
 80046c6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	2200      	movs	r2, #0
 80046ce:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	2221      	movs	r2, #33	; 0x21
 80046d4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80046d8:	f7fc fc94 	bl	8001004 <HAL_GetTick>
 80046dc:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	88fa      	ldrh	r2, [r7, #6]
 80046e2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	88fa      	ldrh	r2, [r7, #6]
 80046e8:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80046ea:	e042      	b.n	8004772 <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80046f0:	b29b      	uxth	r3, r3
 80046f2:	3b01      	subs	r3, #1
 80046f4:	b29a      	uxth	r2, r3
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	689b      	ldr	r3, [r3, #8]
 80046fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004702:	d122      	bne.n	800474a <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004704:	683b      	ldr	r3, [r7, #0]
 8004706:	9300      	str	r3, [sp, #0]
 8004708:	697b      	ldr	r3, [r7, #20]
 800470a:	2200      	movs	r2, #0
 800470c:	2180      	movs	r1, #128	; 0x80
 800470e:	68f8      	ldr	r0, [r7, #12]
 8004710:	f000 f850 	bl	80047b4 <UART_WaitOnFlagUntilTimeout>
 8004714:	4603      	mov	r3, r0
 8004716:	2b00      	cmp	r3, #0
 8004718:	d001      	beq.n	800471e <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 800471a:	2303      	movs	r3, #3
 800471c:	e046      	b.n	80047ac <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800471e:	68bb      	ldr	r3, [r7, #8]
 8004720:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8004722:	693b      	ldr	r3, [r7, #16]
 8004724:	881b      	ldrh	r3, [r3, #0]
 8004726:	461a      	mov	r2, r3
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004730:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	691b      	ldr	r3, [r3, #16]
 8004736:	2b00      	cmp	r3, #0
 8004738:	d103      	bne.n	8004742 <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 800473a:	68bb      	ldr	r3, [r7, #8]
 800473c:	3302      	adds	r3, #2
 800473e:	60bb      	str	r3, [r7, #8]
 8004740:	e017      	b.n	8004772 <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 8004742:	68bb      	ldr	r3, [r7, #8]
 8004744:	3301      	adds	r3, #1
 8004746:	60bb      	str	r3, [r7, #8]
 8004748:	e013      	b.n	8004772 <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	9300      	str	r3, [sp, #0]
 800474e:	697b      	ldr	r3, [r7, #20]
 8004750:	2200      	movs	r2, #0
 8004752:	2180      	movs	r1, #128	; 0x80
 8004754:	68f8      	ldr	r0, [r7, #12]
 8004756:	f000 f82d 	bl	80047b4 <UART_WaitOnFlagUntilTimeout>
 800475a:	4603      	mov	r3, r0
 800475c:	2b00      	cmp	r3, #0
 800475e:	d001      	beq.n	8004764 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8004760:	2303      	movs	r3, #3
 8004762:	e023      	b.n	80047ac <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8004764:	68bb      	ldr	r3, [r7, #8]
 8004766:	1c5a      	adds	r2, r3, #1
 8004768:	60ba      	str	r2, [r7, #8]
 800476a:	781a      	ldrb	r2, [r3, #0]
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004776:	b29b      	uxth	r3, r3
 8004778:	2b00      	cmp	r3, #0
 800477a:	d1b7      	bne.n	80046ec <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800477c:	683b      	ldr	r3, [r7, #0]
 800477e:	9300      	str	r3, [sp, #0]
 8004780:	697b      	ldr	r3, [r7, #20]
 8004782:	2200      	movs	r2, #0
 8004784:	2140      	movs	r1, #64	; 0x40
 8004786:	68f8      	ldr	r0, [r7, #12]
 8004788:	f000 f814 	bl	80047b4 <UART_WaitOnFlagUntilTimeout>
 800478c:	4603      	mov	r3, r0
 800478e:	2b00      	cmp	r3, #0
 8004790:	d001      	beq.n	8004796 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8004792:	2303      	movs	r3, #3
 8004794:	e00a      	b.n	80047ac <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	2220      	movs	r2, #32
 800479a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	2200      	movs	r2, #0
 80047a2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 80047a6:	2300      	movs	r3, #0
 80047a8:	e000      	b.n	80047ac <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80047aa:	2302      	movs	r3, #2
  }
}
 80047ac:	4618      	mov	r0, r3
 80047ae:	3718      	adds	r7, #24
 80047b0:	46bd      	mov	sp, r7
 80047b2:	bd80      	pop	{r7, pc}

080047b4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80047b4:	b580      	push	{r7, lr}
 80047b6:	b084      	sub	sp, #16
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	60f8      	str	r0, [r7, #12]
 80047bc:	60b9      	str	r1, [r7, #8]
 80047be:	603b      	str	r3, [r7, #0]
 80047c0:	4613      	mov	r3, r2
 80047c2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80047c4:	e02c      	b.n	8004820 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047c6:	69bb      	ldr	r3, [r7, #24]
 80047c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047cc:	d028      	beq.n	8004820 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80047ce:	69bb      	ldr	r3, [r7, #24]
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d007      	beq.n	80047e4 <UART_WaitOnFlagUntilTimeout+0x30>
 80047d4:	f7fc fc16 	bl	8001004 <HAL_GetTick>
 80047d8:	4602      	mov	r2, r0
 80047da:	683b      	ldr	r3, [r7, #0]
 80047dc:	1ad3      	subs	r3, r2, r3
 80047de:	69ba      	ldr	r2, [r7, #24]
 80047e0:	429a      	cmp	r2, r3
 80047e2:	d21d      	bcs.n	8004820 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	68da      	ldr	r2, [r3, #12]
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80047f2:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	695a      	ldr	r2, [r3, #20]
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f022 0201 	bic.w	r2, r2, #1
 8004802:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	2220      	movs	r2, #32
 8004808:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	2220      	movs	r2, #32
 8004810:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	2200      	movs	r2, #0
 8004818:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 800481c:	2303      	movs	r3, #3
 800481e:	e00f      	b.n	8004840 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	681a      	ldr	r2, [r3, #0]
 8004826:	68bb      	ldr	r3, [r7, #8]
 8004828:	4013      	ands	r3, r2
 800482a:	68ba      	ldr	r2, [r7, #8]
 800482c:	429a      	cmp	r2, r3
 800482e:	bf0c      	ite	eq
 8004830:	2301      	moveq	r3, #1
 8004832:	2300      	movne	r3, #0
 8004834:	b2db      	uxtb	r3, r3
 8004836:	461a      	mov	r2, r3
 8004838:	79fb      	ldrb	r3, [r7, #7]
 800483a:	429a      	cmp	r2, r3
 800483c:	d0c3      	beq.n	80047c6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800483e:	2300      	movs	r3, #0
}
 8004840:	4618      	mov	r0, r3
 8004842:	3710      	adds	r7, #16
 8004844:	46bd      	mov	sp, r7
 8004846:	bd80      	pop	{r7, pc}

08004848 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004848:	b5b0      	push	{r4, r5, r7, lr}
 800484a:	b084      	sub	sp, #16
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	691b      	ldr	r3, [r3, #16]
 8004856:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	68da      	ldr	r2, [r3, #12]
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	430a      	orrs	r2, r1
 8004864:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	689a      	ldr	r2, [r3, #8]
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	691b      	ldr	r3, [r3, #16]
 800486e:	431a      	orrs	r2, r3
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	695b      	ldr	r3, [r3, #20]
 8004874:	431a      	orrs	r2, r3
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	69db      	ldr	r3, [r3, #28]
 800487a:	4313      	orrs	r3, r2
 800487c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	68db      	ldr	r3, [r3, #12]
 8004884:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8004888:	f023 030c 	bic.w	r3, r3, #12
 800488c:	687a      	ldr	r2, [r7, #4]
 800488e:	6812      	ldr	r2, [r2, #0]
 8004890:	68f9      	ldr	r1, [r7, #12]
 8004892:	430b      	orrs	r3, r1
 8004894:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	695b      	ldr	r3, [r3, #20]
 800489c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	699a      	ldr	r2, [r3, #24]
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	430a      	orrs	r2, r1
 80048aa:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	69db      	ldr	r3, [r3, #28]
 80048b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80048b4:	f040 80e4 	bne.w	8004a80 <UART_SetConfig+0x238>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	4aab      	ldr	r2, [pc, #684]	; (8004b6c <UART_SetConfig+0x324>)
 80048be:	4293      	cmp	r3, r2
 80048c0:	d004      	beq.n	80048cc <UART_SetConfig+0x84>
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	4aaa      	ldr	r2, [pc, #680]	; (8004b70 <UART_SetConfig+0x328>)
 80048c8:	4293      	cmp	r3, r2
 80048ca:	d16c      	bne.n	80049a6 <UART_SetConfig+0x15e>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80048cc:	f7fe f92a 	bl	8002b24 <HAL_RCC_GetPCLK2Freq>
 80048d0:	4602      	mov	r2, r0
 80048d2:	4613      	mov	r3, r2
 80048d4:	009b      	lsls	r3, r3, #2
 80048d6:	4413      	add	r3, r2
 80048d8:	009a      	lsls	r2, r3, #2
 80048da:	441a      	add	r2, r3
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	685b      	ldr	r3, [r3, #4]
 80048e0:	005b      	lsls	r3, r3, #1
 80048e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80048e6:	4aa3      	ldr	r2, [pc, #652]	; (8004b74 <UART_SetConfig+0x32c>)
 80048e8:	fba2 2303 	umull	r2, r3, r2, r3
 80048ec:	095b      	lsrs	r3, r3, #5
 80048ee:	011c      	lsls	r4, r3, #4
 80048f0:	f7fe f918 	bl	8002b24 <HAL_RCC_GetPCLK2Freq>
 80048f4:	4602      	mov	r2, r0
 80048f6:	4613      	mov	r3, r2
 80048f8:	009b      	lsls	r3, r3, #2
 80048fa:	4413      	add	r3, r2
 80048fc:	009a      	lsls	r2, r3, #2
 80048fe:	441a      	add	r2, r3
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	685b      	ldr	r3, [r3, #4]
 8004904:	005b      	lsls	r3, r3, #1
 8004906:	fbb2 f5f3 	udiv	r5, r2, r3
 800490a:	f7fe f90b 	bl	8002b24 <HAL_RCC_GetPCLK2Freq>
 800490e:	4602      	mov	r2, r0
 8004910:	4613      	mov	r3, r2
 8004912:	009b      	lsls	r3, r3, #2
 8004914:	4413      	add	r3, r2
 8004916:	009a      	lsls	r2, r3, #2
 8004918:	441a      	add	r2, r3
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	685b      	ldr	r3, [r3, #4]
 800491e:	005b      	lsls	r3, r3, #1
 8004920:	fbb2 f3f3 	udiv	r3, r2, r3
 8004924:	4a93      	ldr	r2, [pc, #588]	; (8004b74 <UART_SetConfig+0x32c>)
 8004926:	fba2 2303 	umull	r2, r3, r2, r3
 800492a:	095b      	lsrs	r3, r3, #5
 800492c:	2264      	movs	r2, #100	; 0x64
 800492e:	fb02 f303 	mul.w	r3, r2, r3
 8004932:	1aeb      	subs	r3, r5, r3
 8004934:	00db      	lsls	r3, r3, #3
 8004936:	3332      	adds	r3, #50	; 0x32
 8004938:	4a8e      	ldr	r2, [pc, #568]	; (8004b74 <UART_SetConfig+0x32c>)
 800493a:	fba2 2303 	umull	r2, r3, r2, r3
 800493e:	095b      	lsrs	r3, r3, #5
 8004940:	005b      	lsls	r3, r3, #1
 8004942:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004946:	441c      	add	r4, r3
 8004948:	f7fe f8ec 	bl	8002b24 <HAL_RCC_GetPCLK2Freq>
 800494c:	4602      	mov	r2, r0
 800494e:	4613      	mov	r3, r2
 8004950:	009b      	lsls	r3, r3, #2
 8004952:	4413      	add	r3, r2
 8004954:	009a      	lsls	r2, r3, #2
 8004956:	441a      	add	r2, r3
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	685b      	ldr	r3, [r3, #4]
 800495c:	005b      	lsls	r3, r3, #1
 800495e:	fbb2 f5f3 	udiv	r5, r2, r3
 8004962:	f7fe f8df 	bl	8002b24 <HAL_RCC_GetPCLK2Freq>
 8004966:	4602      	mov	r2, r0
 8004968:	4613      	mov	r3, r2
 800496a:	009b      	lsls	r3, r3, #2
 800496c:	4413      	add	r3, r2
 800496e:	009a      	lsls	r2, r3, #2
 8004970:	441a      	add	r2, r3
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	685b      	ldr	r3, [r3, #4]
 8004976:	005b      	lsls	r3, r3, #1
 8004978:	fbb2 f3f3 	udiv	r3, r2, r3
 800497c:	4a7d      	ldr	r2, [pc, #500]	; (8004b74 <UART_SetConfig+0x32c>)
 800497e:	fba2 2303 	umull	r2, r3, r2, r3
 8004982:	095b      	lsrs	r3, r3, #5
 8004984:	2264      	movs	r2, #100	; 0x64
 8004986:	fb02 f303 	mul.w	r3, r2, r3
 800498a:	1aeb      	subs	r3, r5, r3
 800498c:	00db      	lsls	r3, r3, #3
 800498e:	3332      	adds	r3, #50	; 0x32
 8004990:	4a78      	ldr	r2, [pc, #480]	; (8004b74 <UART_SetConfig+0x32c>)
 8004992:	fba2 2303 	umull	r2, r3, r2, r3
 8004996:	095b      	lsrs	r3, r3, #5
 8004998:	f003 0207 	and.w	r2, r3, #7
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	4422      	add	r2, r4
 80049a2:	609a      	str	r2, [r3, #8]
 80049a4:	e154      	b.n	8004c50 <UART_SetConfig+0x408>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80049a6:	f7fe f8a9 	bl	8002afc <HAL_RCC_GetPCLK1Freq>
 80049aa:	4602      	mov	r2, r0
 80049ac:	4613      	mov	r3, r2
 80049ae:	009b      	lsls	r3, r3, #2
 80049b0:	4413      	add	r3, r2
 80049b2:	009a      	lsls	r2, r3, #2
 80049b4:	441a      	add	r2, r3
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	685b      	ldr	r3, [r3, #4]
 80049ba:	005b      	lsls	r3, r3, #1
 80049bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80049c0:	4a6c      	ldr	r2, [pc, #432]	; (8004b74 <UART_SetConfig+0x32c>)
 80049c2:	fba2 2303 	umull	r2, r3, r2, r3
 80049c6:	095b      	lsrs	r3, r3, #5
 80049c8:	011c      	lsls	r4, r3, #4
 80049ca:	f7fe f897 	bl	8002afc <HAL_RCC_GetPCLK1Freq>
 80049ce:	4602      	mov	r2, r0
 80049d0:	4613      	mov	r3, r2
 80049d2:	009b      	lsls	r3, r3, #2
 80049d4:	4413      	add	r3, r2
 80049d6:	009a      	lsls	r2, r3, #2
 80049d8:	441a      	add	r2, r3
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	685b      	ldr	r3, [r3, #4]
 80049de:	005b      	lsls	r3, r3, #1
 80049e0:	fbb2 f5f3 	udiv	r5, r2, r3
 80049e4:	f7fe f88a 	bl	8002afc <HAL_RCC_GetPCLK1Freq>
 80049e8:	4602      	mov	r2, r0
 80049ea:	4613      	mov	r3, r2
 80049ec:	009b      	lsls	r3, r3, #2
 80049ee:	4413      	add	r3, r2
 80049f0:	009a      	lsls	r2, r3, #2
 80049f2:	441a      	add	r2, r3
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	685b      	ldr	r3, [r3, #4]
 80049f8:	005b      	lsls	r3, r3, #1
 80049fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80049fe:	4a5d      	ldr	r2, [pc, #372]	; (8004b74 <UART_SetConfig+0x32c>)
 8004a00:	fba2 2303 	umull	r2, r3, r2, r3
 8004a04:	095b      	lsrs	r3, r3, #5
 8004a06:	2264      	movs	r2, #100	; 0x64
 8004a08:	fb02 f303 	mul.w	r3, r2, r3
 8004a0c:	1aeb      	subs	r3, r5, r3
 8004a0e:	00db      	lsls	r3, r3, #3
 8004a10:	3332      	adds	r3, #50	; 0x32
 8004a12:	4a58      	ldr	r2, [pc, #352]	; (8004b74 <UART_SetConfig+0x32c>)
 8004a14:	fba2 2303 	umull	r2, r3, r2, r3
 8004a18:	095b      	lsrs	r3, r3, #5
 8004a1a:	005b      	lsls	r3, r3, #1
 8004a1c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004a20:	441c      	add	r4, r3
 8004a22:	f7fe f86b 	bl	8002afc <HAL_RCC_GetPCLK1Freq>
 8004a26:	4602      	mov	r2, r0
 8004a28:	4613      	mov	r3, r2
 8004a2a:	009b      	lsls	r3, r3, #2
 8004a2c:	4413      	add	r3, r2
 8004a2e:	009a      	lsls	r2, r3, #2
 8004a30:	441a      	add	r2, r3
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	685b      	ldr	r3, [r3, #4]
 8004a36:	005b      	lsls	r3, r3, #1
 8004a38:	fbb2 f5f3 	udiv	r5, r2, r3
 8004a3c:	f7fe f85e 	bl	8002afc <HAL_RCC_GetPCLK1Freq>
 8004a40:	4602      	mov	r2, r0
 8004a42:	4613      	mov	r3, r2
 8004a44:	009b      	lsls	r3, r3, #2
 8004a46:	4413      	add	r3, r2
 8004a48:	009a      	lsls	r2, r3, #2
 8004a4a:	441a      	add	r2, r3
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	685b      	ldr	r3, [r3, #4]
 8004a50:	005b      	lsls	r3, r3, #1
 8004a52:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a56:	4a47      	ldr	r2, [pc, #284]	; (8004b74 <UART_SetConfig+0x32c>)
 8004a58:	fba2 2303 	umull	r2, r3, r2, r3
 8004a5c:	095b      	lsrs	r3, r3, #5
 8004a5e:	2264      	movs	r2, #100	; 0x64
 8004a60:	fb02 f303 	mul.w	r3, r2, r3
 8004a64:	1aeb      	subs	r3, r5, r3
 8004a66:	00db      	lsls	r3, r3, #3
 8004a68:	3332      	adds	r3, #50	; 0x32
 8004a6a:	4a42      	ldr	r2, [pc, #264]	; (8004b74 <UART_SetConfig+0x32c>)
 8004a6c:	fba2 2303 	umull	r2, r3, r2, r3
 8004a70:	095b      	lsrs	r3, r3, #5
 8004a72:	f003 0207 	and.w	r2, r3, #7
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	4422      	add	r2, r4
 8004a7c:	609a      	str	r2, [r3, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 8004a7e:	e0e7      	b.n	8004c50 <UART_SetConfig+0x408>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	4a39      	ldr	r2, [pc, #228]	; (8004b6c <UART_SetConfig+0x324>)
 8004a86:	4293      	cmp	r3, r2
 8004a88:	d004      	beq.n	8004a94 <UART_SetConfig+0x24c>
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	4a38      	ldr	r2, [pc, #224]	; (8004b70 <UART_SetConfig+0x328>)
 8004a90:	4293      	cmp	r3, r2
 8004a92:	d171      	bne.n	8004b78 <UART_SetConfig+0x330>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8004a94:	f7fe f846 	bl	8002b24 <HAL_RCC_GetPCLK2Freq>
 8004a98:	4602      	mov	r2, r0
 8004a9a:	4613      	mov	r3, r2
 8004a9c:	009b      	lsls	r3, r3, #2
 8004a9e:	4413      	add	r3, r2
 8004aa0:	009a      	lsls	r2, r3, #2
 8004aa2:	441a      	add	r2, r3
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	685b      	ldr	r3, [r3, #4]
 8004aa8:	009b      	lsls	r3, r3, #2
 8004aaa:	fbb2 f3f3 	udiv	r3, r2, r3
 8004aae:	4a31      	ldr	r2, [pc, #196]	; (8004b74 <UART_SetConfig+0x32c>)
 8004ab0:	fba2 2303 	umull	r2, r3, r2, r3
 8004ab4:	095b      	lsrs	r3, r3, #5
 8004ab6:	011c      	lsls	r4, r3, #4
 8004ab8:	f7fe f834 	bl	8002b24 <HAL_RCC_GetPCLK2Freq>
 8004abc:	4602      	mov	r2, r0
 8004abe:	4613      	mov	r3, r2
 8004ac0:	009b      	lsls	r3, r3, #2
 8004ac2:	4413      	add	r3, r2
 8004ac4:	009a      	lsls	r2, r3, #2
 8004ac6:	441a      	add	r2, r3
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	685b      	ldr	r3, [r3, #4]
 8004acc:	009b      	lsls	r3, r3, #2
 8004ace:	fbb2 f5f3 	udiv	r5, r2, r3
 8004ad2:	f7fe f827 	bl	8002b24 <HAL_RCC_GetPCLK2Freq>
 8004ad6:	4602      	mov	r2, r0
 8004ad8:	4613      	mov	r3, r2
 8004ada:	009b      	lsls	r3, r3, #2
 8004adc:	4413      	add	r3, r2
 8004ade:	009a      	lsls	r2, r3, #2
 8004ae0:	441a      	add	r2, r3
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	685b      	ldr	r3, [r3, #4]
 8004ae6:	009b      	lsls	r3, r3, #2
 8004ae8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004aec:	4a21      	ldr	r2, [pc, #132]	; (8004b74 <UART_SetConfig+0x32c>)
 8004aee:	fba2 2303 	umull	r2, r3, r2, r3
 8004af2:	095b      	lsrs	r3, r3, #5
 8004af4:	2264      	movs	r2, #100	; 0x64
 8004af6:	fb02 f303 	mul.w	r3, r2, r3
 8004afa:	1aeb      	subs	r3, r5, r3
 8004afc:	011b      	lsls	r3, r3, #4
 8004afe:	3332      	adds	r3, #50	; 0x32
 8004b00:	4a1c      	ldr	r2, [pc, #112]	; (8004b74 <UART_SetConfig+0x32c>)
 8004b02:	fba2 2303 	umull	r2, r3, r2, r3
 8004b06:	095b      	lsrs	r3, r3, #5
 8004b08:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004b0c:	441c      	add	r4, r3
 8004b0e:	f7fe f809 	bl	8002b24 <HAL_RCC_GetPCLK2Freq>
 8004b12:	4602      	mov	r2, r0
 8004b14:	4613      	mov	r3, r2
 8004b16:	009b      	lsls	r3, r3, #2
 8004b18:	4413      	add	r3, r2
 8004b1a:	009a      	lsls	r2, r3, #2
 8004b1c:	441a      	add	r2, r3
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	685b      	ldr	r3, [r3, #4]
 8004b22:	009b      	lsls	r3, r3, #2
 8004b24:	fbb2 f5f3 	udiv	r5, r2, r3
 8004b28:	f7fd fffc 	bl	8002b24 <HAL_RCC_GetPCLK2Freq>
 8004b2c:	4602      	mov	r2, r0
 8004b2e:	4613      	mov	r3, r2
 8004b30:	009b      	lsls	r3, r3, #2
 8004b32:	4413      	add	r3, r2
 8004b34:	009a      	lsls	r2, r3, #2
 8004b36:	441a      	add	r2, r3
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	685b      	ldr	r3, [r3, #4]
 8004b3c:	009b      	lsls	r3, r3, #2
 8004b3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b42:	4a0c      	ldr	r2, [pc, #48]	; (8004b74 <UART_SetConfig+0x32c>)
 8004b44:	fba2 2303 	umull	r2, r3, r2, r3
 8004b48:	095b      	lsrs	r3, r3, #5
 8004b4a:	2264      	movs	r2, #100	; 0x64
 8004b4c:	fb02 f303 	mul.w	r3, r2, r3
 8004b50:	1aeb      	subs	r3, r5, r3
 8004b52:	011b      	lsls	r3, r3, #4
 8004b54:	3332      	adds	r3, #50	; 0x32
 8004b56:	4a07      	ldr	r2, [pc, #28]	; (8004b74 <UART_SetConfig+0x32c>)
 8004b58:	fba2 2303 	umull	r2, r3, r2, r3
 8004b5c:	095b      	lsrs	r3, r3, #5
 8004b5e:	f003 020f 	and.w	r2, r3, #15
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	4422      	add	r2, r4
 8004b68:	609a      	str	r2, [r3, #8]
 8004b6a:	e071      	b.n	8004c50 <UART_SetConfig+0x408>
 8004b6c:	40011000 	.word	0x40011000
 8004b70:	40011400 	.word	0x40011400
 8004b74:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8004b78:	f7fd ffc0 	bl	8002afc <HAL_RCC_GetPCLK1Freq>
 8004b7c:	4602      	mov	r2, r0
 8004b7e:	4613      	mov	r3, r2
 8004b80:	009b      	lsls	r3, r3, #2
 8004b82:	4413      	add	r3, r2
 8004b84:	009a      	lsls	r2, r3, #2
 8004b86:	441a      	add	r2, r3
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	685b      	ldr	r3, [r3, #4]
 8004b8c:	009b      	lsls	r3, r3, #2
 8004b8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b92:	4a31      	ldr	r2, [pc, #196]	; (8004c58 <UART_SetConfig+0x410>)
 8004b94:	fba2 2303 	umull	r2, r3, r2, r3
 8004b98:	095b      	lsrs	r3, r3, #5
 8004b9a:	011c      	lsls	r4, r3, #4
 8004b9c:	f7fd ffae 	bl	8002afc <HAL_RCC_GetPCLK1Freq>
 8004ba0:	4602      	mov	r2, r0
 8004ba2:	4613      	mov	r3, r2
 8004ba4:	009b      	lsls	r3, r3, #2
 8004ba6:	4413      	add	r3, r2
 8004ba8:	009a      	lsls	r2, r3, #2
 8004baa:	441a      	add	r2, r3
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	685b      	ldr	r3, [r3, #4]
 8004bb0:	009b      	lsls	r3, r3, #2
 8004bb2:	fbb2 f5f3 	udiv	r5, r2, r3
 8004bb6:	f7fd ffa1 	bl	8002afc <HAL_RCC_GetPCLK1Freq>
 8004bba:	4602      	mov	r2, r0
 8004bbc:	4613      	mov	r3, r2
 8004bbe:	009b      	lsls	r3, r3, #2
 8004bc0:	4413      	add	r3, r2
 8004bc2:	009a      	lsls	r2, r3, #2
 8004bc4:	441a      	add	r2, r3
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	685b      	ldr	r3, [r3, #4]
 8004bca:	009b      	lsls	r3, r3, #2
 8004bcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bd0:	4a21      	ldr	r2, [pc, #132]	; (8004c58 <UART_SetConfig+0x410>)
 8004bd2:	fba2 2303 	umull	r2, r3, r2, r3
 8004bd6:	095b      	lsrs	r3, r3, #5
 8004bd8:	2264      	movs	r2, #100	; 0x64
 8004bda:	fb02 f303 	mul.w	r3, r2, r3
 8004bde:	1aeb      	subs	r3, r5, r3
 8004be0:	011b      	lsls	r3, r3, #4
 8004be2:	3332      	adds	r3, #50	; 0x32
 8004be4:	4a1c      	ldr	r2, [pc, #112]	; (8004c58 <UART_SetConfig+0x410>)
 8004be6:	fba2 2303 	umull	r2, r3, r2, r3
 8004bea:	095b      	lsrs	r3, r3, #5
 8004bec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004bf0:	441c      	add	r4, r3
 8004bf2:	f7fd ff83 	bl	8002afc <HAL_RCC_GetPCLK1Freq>
 8004bf6:	4602      	mov	r2, r0
 8004bf8:	4613      	mov	r3, r2
 8004bfa:	009b      	lsls	r3, r3, #2
 8004bfc:	4413      	add	r3, r2
 8004bfe:	009a      	lsls	r2, r3, #2
 8004c00:	441a      	add	r2, r3
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	685b      	ldr	r3, [r3, #4]
 8004c06:	009b      	lsls	r3, r3, #2
 8004c08:	fbb2 f5f3 	udiv	r5, r2, r3
 8004c0c:	f7fd ff76 	bl	8002afc <HAL_RCC_GetPCLK1Freq>
 8004c10:	4602      	mov	r2, r0
 8004c12:	4613      	mov	r3, r2
 8004c14:	009b      	lsls	r3, r3, #2
 8004c16:	4413      	add	r3, r2
 8004c18:	009a      	lsls	r2, r3, #2
 8004c1a:	441a      	add	r2, r3
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	685b      	ldr	r3, [r3, #4]
 8004c20:	009b      	lsls	r3, r3, #2
 8004c22:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c26:	4a0c      	ldr	r2, [pc, #48]	; (8004c58 <UART_SetConfig+0x410>)
 8004c28:	fba2 2303 	umull	r2, r3, r2, r3
 8004c2c:	095b      	lsrs	r3, r3, #5
 8004c2e:	2264      	movs	r2, #100	; 0x64
 8004c30:	fb02 f303 	mul.w	r3, r2, r3
 8004c34:	1aeb      	subs	r3, r5, r3
 8004c36:	011b      	lsls	r3, r3, #4
 8004c38:	3332      	adds	r3, #50	; 0x32
 8004c3a:	4a07      	ldr	r2, [pc, #28]	; (8004c58 <UART_SetConfig+0x410>)
 8004c3c:	fba2 2303 	umull	r2, r3, r2, r3
 8004c40:	095b      	lsrs	r3, r3, #5
 8004c42:	f003 020f 	and.w	r2, r3, #15
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	4422      	add	r2, r4
 8004c4c:	609a      	str	r2, [r3, #8]
}
 8004c4e:	e7ff      	b.n	8004c50 <UART_SetConfig+0x408>
 8004c50:	bf00      	nop
 8004c52:	3710      	adds	r7, #16
 8004c54:	46bd      	mov	sp, r7
 8004c56:	bdb0      	pop	{r4, r5, r7, pc}
 8004c58:	51eb851f 	.word	0x51eb851f

08004c5c <drive_init>:
//drive_init
// 走行系の変数の初期化
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void drive_init(void){
 8004c5c:	b480      	push	{r7}
 8004c5e:	af00      	add	r7, sp, #0
	MF.FLAGS = 0;
 8004c60:	4b05      	ldr	r3, [pc, #20]	; (8004c78 <drive_init+0x1c>)
 8004c62:	2200      	movs	r2, #0
 8004c64:	801a      	strh	r2, [r3, #0]
	MF2.FLAGS2 = 0;
 8004c66:	4b05      	ldr	r3, [pc, #20]	; (8004c7c <drive_init+0x20>)
 8004c68:	2200      	movs	r2, #0
 8004c6a:	801a      	strh	r2, [r3, #0]
}
 8004c6c:	bf00      	nop
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c74:	4770      	bx	lr
 8004c76:	bf00      	nop
 8004c78:	20000f68 	.word	0x20000f68
 8004c7c:	20000f64 	.word	0x20000f64

08004c80 <drive_ready>:
//drive_ready
// 走行前のLED点滅&ジャイロのドリフト計算
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void drive_ready(void){
 8004c80:	b580      	push	{r7, lr}
 8004c82:	af00      	add	r7, sp, #0
	  while(ad_fl <= WALL_BASE_FL){
 8004c84:	e00f      	b.n	8004ca6 <drive_ready+0x26>
		  led_write(1, 1, 1);
 8004c86:	2201      	movs	r2, #1
 8004c88:	2101      	movs	r1, #1
 8004c8a:	2001      	movs	r0, #1
 8004c8c:	f00b fdf6 	bl	801087c <led_write>
		  HAL_Delay(200);
 8004c90:	20c8      	movs	r0, #200	; 0xc8
 8004c92:	f7fc f9c3 	bl	800101c <HAL_Delay>
		  led_write(0, 0, 0);
 8004c96:	2200      	movs	r2, #0
 8004c98:	2100      	movs	r1, #0
 8004c9a:	2000      	movs	r0, #0
 8004c9c:	f00b fdee 	bl	801087c <led_write>
		  HAL_Delay(200);
 8004ca0:	20c8      	movs	r0, #200	; 0xc8
 8004ca2:	f7fc f9bb 	bl	800101c <HAL_Delay>
	  while(ad_fl <= WALL_BASE_FL){
 8004ca6:	4b09      	ldr	r3, [pc, #36]	; (8004ccc <drive_ready+0x4c>)
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	2bc8      	cmp	r3, #200	; 0xc8
 8004cac:	d9eb      	bls.n	8004c86 <drive_ready+0x6>
	  }
	  MF2.FLAG.GDRIFT = 1;
 8004cae:	4a08      	ldr	r2, [pc, #32]	; (8004cd0 <drive_ready+0x50>)
 8004cb0:	8813      	ldrh	r3, [r2, #0]
 8004cb2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004cb6:	8013      	strh	r3, [r2, #0]
	  HAL_Delay(2000);
 8004cb8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8004cbc:	f7fc f9ae 	bl	800101c <HAL_Delay>
	  degree_z = 0;
 8004cc0:	4b04      	ldr	r3, [pc, #16]	; (8004cd4 <drive_ready+0x54>)
 8004cc2:	f04f 0200 	mov.w	r2, #0
 8004cc6:	601a      	str	r2, [r3, #0]
}
 8004cc8:	bf00      	nop
 8004cca:	bd80      	pop	{r7, pc}
 8004ccc:	20000d54 	.word	0x20000d54
 8004cd0:	20000f64 	.word	0x20000f64
 8004cd4:	20000b5c 	.word	0x20000b5c

08004cd8 <drive_start>:
//drive_start
// 走行開始前に走行距離と機体角度を初期化
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void drive_start(void){
 8004cd8:	b480      	push	{r7}
 8004cda:	af00      	add	r7, sp, #0
	dist_l = dist_r = 0;		//走行距離の初期化
 8004cdc:	f04f 0300 	mov.w	r3, #0
 8004ce0:	4a0f      	ldr	r2, [pc, #60]	; (8004d20 <drive_start+0x48>)
 8004ce2:	6013      	str	r3, [r2, #0]
 8004ce4:	4a0f      	ldr	r2, [pc, #60]	; (8004d24 <drive_start+0x4c>)
 8004ce6:	6013      	str	r3, [r2, #0]
	if(!MF2.FLAG.HACCEL) target_speed_l = target_speed_r = 0;		//モータ出力の初期化
 8004ce8:	4b0f      	ldr	r3, [pc, #60]	; (8004d28 <drive_start+0x50>)
 8004cea:	881b      	ldrh	r3, [r3, #0]
 8004cec:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8004cf0:	b2db      	uxtb	r3, r3
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d105      	bne.n	8004d02 <drive_start+0x2a>
 8004cf6:	f04f 0300 	mov.w	r3, #0
 8004cfa:	4a0c      	ldr	r2, [pc, #48]	; (8004d2c <drive_start+0x54>)
 8004cfc:	6013      	str	r3, [r2, #0]
 8004cfe:	4a0c      	ldr	r2, [pc, #48]	; (8004d30 <drive_start+0x58>)
 8004d00:	6013      	str	r3, [r2, #0]
	MF.FLAG.DRV = 1;
 8004d02:	4a0c      	ldr	r2, [pc, #48]	; (8004d34 <drive_start+0x5c>)
 8004d04:	8813      	ldrh	r3, [r2, #0]
 8004d06:	f043 0302 	orr.w	r3, r3, #2
 8004d0a:	8013      	strh	r3, [r2, #0]
	MF.FLAG.SPD = 1;
 8004d0c:	4a09      	ldr	r2, [pc, #36]	; (8004d34 <drive_start+0x5c>)
 8004d0e:	8813      	ldrh	r3, [r2, #0]
 8004d10:	f043 0304 	orr.w	r3, r3, #4
 8004d14:	8013      	strh	r3, [r2, #0]
}
 8004d16:	bf00      	nop
 8004d18:	46bd      	mov	sp, r7
 8004d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1e:	4770      	bx	lr
 8004d20:	20000aec 	.word	0x20000aec
 8004d24:	200015c4 	.word	0x200015c4
 8004d28:	20000f64 	.word	0x20000f64
 8004d2c:	200001a0 	.word	0x200001a0
 8004d30:	20000bfc 	.word	0x20000bfc
 8004d34:	20000f68 	.word	0x20000f68

08004d38 <drive_stop>:
//drive_stop
// 走行を終了する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void drive_stop(void){
 8004d38:	b480      	push	{r7}
 8004d3a:	af00      	add	r7, sp, #0
	dist_l = dist_r = 0;		//a走行距離の初期化
 8004d3c:	f04f 0300 	mov.w	r3, #0
 8004d40:	4a0c      	ldr	r2, [pc, #48]	; (8004d74 <drive_stop+0x3c>)
 8004d42:	6013      	str	r3, [r2, #0]
 8004d44:	4a0c      	ldr	r2, [pc, #48]	; (8004d78 <drive_stop+0x40>)
 8004d46:	6013      	str	r3, [r2, #0]
	pulse_l = pulse_r = 0;		//aモータ出力の初期化
 8004d48:	f04f 0300 	mov.w	r3, #0
 8004d4c:	4a0b      	ldr	r2, [pc, #44]	; (8004d7c <drive_stop+0x44>)
 8004d4e:	6013      	str	r3, [r2, #0]
 8004d50:	4a0b      	ldr	r2, [pc, #44]	; (8004d80 <drive_stop+0x48>)
 8004d52:	6013      	str	r3, [r2, #0]
	MF.FLAG.DRV = 0;
 8004d54:	4a0b      	ldr	r2, [pc, #44]	; (8004d84 <drive_stop+0x4c>)
 8004d56:	8813      	ldrh	r3, [r2, #0]
 8004d58:	f36f 0341 	bfc	r3, #1, #1
 8004d5c:	8013      	strh	r3, [r2, #0]
	MF.FLAG.SPD = 0;
 8004d5e:	4a09      	ldr	r2, [pc, #36]	; (8004d84 <drive_stop+0x4c>)
 8004d60:	8813      	ldrh	r3, [r2, #0]
 8004d62:	f36f 0382 	bfc	r3, #2, #1
 8004d66:	8013      	strh	r3, [r2, #0]
}
 8004d68:	bf00      	nop
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d70:	4770      	bx	lr
 8004d72:	bf00      	nop
 8004d74:	20000aec 	.word	0x20000aec
 8004d78:	200015c4 	.word	0x200015c4
 8004d7c:	20000780 	.word	0x20000780
 8004d80:	20000ba8 	.word	0x20000ba8
 8004d84:	20000f68 	.word	0x20000f68

08004d88 <control_start>:
//control_start
// wallとgyroの姿勢制御を開始する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void control_start(){
 8004d88:	b480      	push	{r7}
 8004d8a:	af00      	add	r7, sp, #0
	MF.FLAG.WCTRL = 1;										//wall制御を有効にする
 8004d8c:	4a07      	ldr	r2, [pc, #28]	; (8004dac <control_start+0x24>)
 8004d8e:	8813      	ldrh	r3, [r2, #0]
 8004d90:	f043 0308 	orr.w	r3, r3, #8
 8004d94:	8013      	strh	r3, [r2, #0]
	MF.FLAG.GCTRL = 1;										//gyro制御を有効にする
 8004d96:	4a05      	ldr	r2, [pc, #20]	; (8004dac <control_start+0x24>)
 8004d98:	8813      	ldrh	r3, [r2, #0]
 8004d9a:	f043 0310 	orr.w	r3, r3, #16
 8004d9e:	8013      	strh	r3, [r2, #0]
}
 8004da0:	bf00      	nop
 8004da2:	46bd      	mov	sp, r7
 8004da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da8:	4770      	bx	lr
 8004daa:	bf00      	nop
 8004dac:	20000f68 	.word	0x20000f68

08004db0 <control_stop>:
//control_stop
// wallとgyroの姿勢制御を停止する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void control_stop(){
 8004db0:	b480      	push	{r7}
 8004db2:	af00      	add	r7, sp, #0
	MF.FLAG.WCTRL = 0;										//wall制御を無効にする
 8004db4:	4a07      	ldr	r2, [pc, #28]	; (8004dd4 <control_stop+0x24>)
 8004db6:	8813      	ldrh	r3, [r2, #0]
 8004db8:	f36f 03c3 	bfc	r3, #3, #1
 8004dbc:	8013      	strh	r3, [r2, #0]
	MF.FLAG.GCTRL = 0;										//gyro制御を無効にする
 8004dbe:	4a05      	ldr	r2, [pc, #20]	; (8004dd4 <control_stop+0x24>)
 8004dc0:	8813      	ldrh	r3, [r2, #0]
 8004dc2:	f36f 1304 	bfc	r3, #4, #1
 8004dc6:	8013      	strh	r3, [r2, #0]
}
 8004dc8:	bf00      	nop
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd0:	4770      	bx	lr
 8004dd2:	bf00      	nop
 8004dd4:	20000f68 	.word	0x20000f68

08004dd8 <drive_dir>:
//drive_dir
// wheel turn dir for each wheel
// 引数:1車輪選択(0=>L, 1=>R), 2回転方向選択(0=>CW, 1=>CWW, 2=>ShortBrake, 3=>free)
// 戻り値: なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void drive_dir(uint8_t wheel, uint8_t dir){
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	b082      	sub	sp, #8
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	4603      	mov	r3, r0
 8004de0:	460a      	mov	r2, r1
 8004de2:	71fb      	strb	r3, [r7, #7]
 8004de4:	4613      	mov	r3, r2
 8004de6:	71bb      	strb	r3, [r7, #6]
	if(wheel == 0){
 8004de8:	79fb      	ldrb	r3, [r7, #7]
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d13e      	bne.n	8004e6c <drive_dir+0x94>
		if(dir == 0){
 8004dee:	79bb      	ldrb	r3, [r7, #6]
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d10f      	bne.n	8004e14 <drive_dir+0x3c>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_SET);		//L_CW
 8004df4:	2201      	movs	r2, #1
 8004df6:	2120      	movs	r1, #32
 8004df8:	483f      	ldr	r0, [pc, #252]	; (8004ef8 <drive_dir+0x120>)
 8004dfa:	f7fd fa83 	bl	8002304 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET);	//L_CCW
 8004dfe:	2200      	movs	r2, #0
 8004e00:	2110      	movs	r1, #16
 8004e02:	483d      	ldr	r0, [pc, #244]	; (8004ef8 <drive_dir+0x120>)
 8004e04:	f7fd fa7e 	bl	8002304 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);		//STBY
 8004e08:	2201      	movs	r2, #1
 8004e0a:	2101      	movs	r1, #1
 8004e0c:	483b      	ldr	r0, [pc, #236]	; (8004efc <drive_dir+0x124>)
 8004e0e:	f7fd fa79 	bl	8002304 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);		//STBY
		}else{
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);	//STBY
		}
	}
}
 8004e12:	e06c      	b.n	8004eee <drive_dir+0x116>
		}else if(dir == 1){
 8004e14:	79bb      	ldrb	r3, [r7, #6]
 8004e16:	2b01      	cmp	r3, #1
 8004e18:	d10f      	bne.n	8004e3a <drive_dir+0x62>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET);	//L_CW
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	2120      	movs	r1, #32
 8004e1e:	4836      	ldr	r0, [pc, #216]	; (8004ef8 <drive_dir+0x120>)
 8004e20:	f7fd fa70 	bl	8002304 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_SET);		//L_CCW
 8004e24:	2201      	movs	r2, #1
 8004e26:	2110      	movs	r1, #16
 8004e28:	4833      	ldr	r0, [pc, #204]	; (8004ef8 <drive_dir+0x120>)
 8004e2a:	f7fd fa6b 	bl	8002304 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);		//STBY
 8004e2e:	2201      	movs	r2, #1
 8004e30:	2101      	movs	r1, #1
 8004e32:	4832      	ldr	r0, [pc, #200]	; (8004efc <drive_dir+0x124>)
 8004e34:	f7fd fa66 	bl	8002304 <HAL_GPIO_WritePin>
}
 8004e38:	e059      	b.n	8004eee <drive_dir+0x116>
		}else if(dir == 2){
 8004e3a:	79bb      	ldrb	r3, [r7, #6]
 8004e3c:	2b02      	cmp	r3, #2
 8004e3e:	d10f      	bne.n	8004e60 <drive_dir+0x88>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_SET);		//L_CW
 8004e40:	2201      	movs	r2, #1
 8004e42:	2120      	movs	r1, #32
 8004e44:	482c      	ldr	r0, [pc, #176]	; (8004ef8 <drive_dir+0x120>)
 8004e46:	f7fd fa5d 	bl	8002304 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_SET);		//L_CCW
 8004e4a:	2201      	movs	r2, #1
 8004e4c:	2110      	movs	r1, #16
 8004e4e:	482a      	ldr	r0, [pc, #168]	; (8004ef8 <drive_dir+0x120>)
 8004e50:	f7fd fa58 	bl	8002304 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);		//STBY
 8004e54:	2201      	movs	r2, #1
 8004e56:	2101      	movs	r1, #1
 8004e58:	4828      	ldr	r0, [pc, #160]	; (8004efc <drive_dir+0x124>)
 8004e5a:	f7fd fa53 	bl	8002304 <HAL_GPIO_WritePin>
}
 8004e5e:	e046      	b.n	8004eee <drive_dir+0x116>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);	//STBY
 8004e60:	2200      	movs	r2, #0
 8004e62:	2101      	movs	r1, #1
 8004e64:	4825      	ldr	r0, [pc, #148]	; (8004efc <drive_dir+0x124>)
 8004e66:	f7fd fa4d 	bl	8002304 <HAL_GPIO_WritePin>
}
 8004e6a:	e040      	b.n	8004eee <drive_dir+0x116>
		if(dir == 0){
 8004e6c:	79bb      	ldrb	r3, [r7, #6]
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d110      	bne.n	8004e94 <drive_dir+0xbc>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);		//R_CW
 8004e72:	2201      	movs	r2, #1
 8004e74:	2102      	movs	r1, #2
 8004e76:	4821      	ldr	r0, [pc, #132]	; (8004efc <drive_dir+0x124>)
 8004e78:	f7fd fa44 	bl	8002304 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);	//R_CCW
 8004e7c:	2200      	movs	r2, #0
 8004e7e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004e82:	481e      	ldr	r0, [pc, #120]	; (8004efc <drive_dir+0x124>)
 8004e84:	f7fd fa3e 	bl	8002304 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);		//STBY
 8004e88:	2201      	movs	r2, #1
 8004e8a:	2101      	movs	r1, #1
 8004e8c:	481b      	ldr	r0, [pc, #108]	; (8004efc <drive_dir+0x124>)
 8004e8e:	f7fd fa39 	bl	8002304 <HAL_GPIO_WritePin>
}
 8004e92:	e02c      	b.n	8004eee <drive_dir+0x116>
		}else if(dir == 1){
 8004e94:	79bb      	ldrb	r3, [r7, #6]
 8004e96:	2b01      	cmp	r3, #1
 8004e98:	d110      	bne.n	8004ebc <drive_dir+0xe4>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);	//R_CW
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	2102      	movs	r1, #2
 8004e9e:	4817      	ldr	r0, [pc, #92]	; (8004efc <drive_dir+0x124>)
 8004ea0:	f7fd fa30 	bl	8002304 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);	//R_CCW
 8004ea4:	2201      	movs	r2, #1
 8004ea6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004eaa:	4814      	ldr	r0, [pc, #80]	; (8004efc <drive_dir+0x124>)
 8004eac:	f7fd fa2a 	bl	8002304 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);		//STBY
 8004eb0:	2201      	movs	r2, #1
 8004eb2:	2101      	movs	r1, #1
 8004eb4:	4811      	ldr	r0, [pc, #68]	; (8004efc <drive_dir+0x124>)
 8004eb6:	f7fd fa25 	bl	8002304 <HAL_GPIO_WritePin>
}
 8004eba:	e018      	b.n	8004eee <drive_dir+0x116>
		}else if(dir == 2){
 8004ebc:	79bb      	ldrb	r3, [r7, #6]
 8004ebe:	2b02      	cmp	r3, #2
 8004ec0:	d110      	bne.n	8004ee4 <drive_dir+0x10c>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);		//R_CW
 8004ec2:	2201      	movs	r2, #1
 8004ec4:	2102      	movs	r1, #2
 8004ec6:	480d      	ldr	r0, [pc, #52]	; (8004efc <drive_dir+0x124>)
 8004ec8:	f7fd fa1c 	bl	8002304 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);	//R_CCW
 8004ecc:	2201      	movs	r2, #1
 8004ece:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004ed2:	480a      	ldr	r0, [pc, #40]	; (8004efc <drive_dir+0x124>)
 8004ed4:	f7fd fa16 	bl	8002304 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);		//STBY
 8004ed8:	2201      	movs	r2, #1
 8004eda:	2101      	movs	r1, #1
 8004edc:	4807      	ldr	r0, [pc, #28]	; (8004efc <drive_dir+0x124>)
 8004ede:	f7fd fa11 	bl	8002304 <HAL_GPIO_WritePin>
}
 8004ee2:	e004      	b.n	8004eee <drive_dir+0x116>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);	//STBY
 8004ee4:	2200      	movs	r2, #0
 8004ee6:	2101      	movs	r1, #1
 8004ee8:	4804      	ldr	r0, [pc, #16]	; (8004efc <drive_dir+0x124>)
 8004eea:	f7fd fa0b 	bl	8002304 <HAL_GPIO_WritePin>
}
 8004eee:	bf00      	nop
 8004ef0:	3708      	adds	r7, #8
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	bd80      	pop	{r7, pc}
 8004ef6:	bf00      	nop
 8004ef8:	40020800 	.word	0x40020800
 8004efc:	40020400 	.word	0x40020400

08004f00 <run_select>:
//run_select
// a走行速度を選択する
// a引数：なし
// a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void run_select(){
 8004f00:	b580      	push	{r7, lr}
 8004f02:	b082      	sub	sp, #8
 8004f04:	af00      	add	r7, sp, #0
	full_led_write(YELLOW);
 8004f06:	2006      	movs	r0, #6
 8004f08:	f00b fcf2 	bl	80108f0 <full_led_write>
	int mode = 0;
 8004f0c:	2300      	movs	r3, #0
 8004f0e:	607b      	str	r3, [r7, #4]

	while(1){
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	b2db      	uxtb	r3, r3
 8004f14:	f003 0301 	and.w	r3, r3, #1
 8004f18:	b2d8      	uxtb	r0, r3
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	b2db      	uxtb	r3, r3
 8004f1e:	f003 0302 	and.w	r3, r3, #2
 8004f22:	b2d9      	uxtb	r1, r3
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	b2db      	uxtb	r3, r3
 8004f28:	f003 0304 	and.w	r3, r3, #4
 8004f2c:	b2db      	uxtb	r3, r3
 8004f2e:	461a      	mov	r2, r3
 8004f30:	f00b fca4 	bl	801087c <led_write>
		if(dist_r >= 20){
 8004f34:	4b21      	ldr	r3, [pc, #132]	; (8004fbc <run_select+0xbc>)
 8004f36:	edd3 7a00 	vldr	s15, [r3]
 8004f3a:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8004f3e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004f42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f46:	db0f      	blt.n	8004f68 <run_select+0x68>
			  mode++;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	3301      	adds	r3, #1
 8004f4c:	607b      	str	r3, [r7, #4]
			  dist_r = 0;
 8004f4e:	4b1b      	ldr	r3, [pc, #108]	; (8004fbc <run_select+0xbc>)
 8004f50:	f04f 0200 	mov.w	r2, #0
 8004f54:	601a      	str	r2, [r3, #0]
			  if(mode > 7){
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	2b07      	cmp	r3, #7
 8004f5a:	dd01      	ble.n	8004f60 <run_select+0x60>
				  mode = 0;
 8004f5c:	2300      	movs	r3, #0
 8004f5e:	607b      	str	r3, [r7, #4]
			  }
			  printf("Mode : %d\n", mode);
 8004f60:	6879      	ldr	r1, [r7, #4]
 8004f62:	4817      	ldr	r0, [pc, #92]	; (8004fc0 <run_select+0xc0>)
 8004f64:	f00c fa58 	bl	8011418 <iprintf>
		}
		if(dist_r <= -20){
 8004f68:	4b14      	ldr	r3, [pc, #80]	; (8004fbc <run_select+0xbc>)
 8004f6a:	edd3 7a00 	vldr	s15, [r3]
 8004f6e:	eebb 7a04 	vmov.f32	s14, #180	; 0xc1a00000 -20.0
 8004f72:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004f76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f7a:	d80f      	bhi.n	8004f9c <run_select+0x9c>
			  mode--;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	3b01      	subs	r3, #1
 8004f80:	607b      	str	r3, [r7, #4]
			  dist_r = 0;
 8004f82:	4b0e      	ldr	r3, [pc, #56]	; (8004fbc <run_select+0xbc>)
 8004f84:	f04f 0200 	mov.w	r2, #0
 8004f88:	601a      	str	r2, [r3, #0]
			  if(mode < 0){
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	da01      	bge.n	8004f94 <run_select+0x94>
				  mode = 7;
 8004f90:	2307      	movs	r3, #7
 8004f92:	607b      	str	r3, [r7, #4]
			  }
			  printf("Mode : %d\n", mode);
 8004f94:	6879      	ldr	r1, [r7, #4]
 8004f96:	480a      	ldr	r0, [pc, #40]	; (8004fc0 <run_select+0xc0>)
 8004f98:	f00c fa3e 	bl	8011418 <iprintf>
		}
		if(ad_fl >= WALL_BASE_FL){
 8004f9c:	4b09      	ldr	r3, [pc, #36]	; (8004fc4 <run_select+0xc4>)
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	2bc7      	cmp	r3, #199	; 0xc7
 8004fa2:	d9b5      	bls.n	8004f10 <run_select+0x10>
			  run_mode = mode;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	b2da      	uxtb	r2, r3
 8004fa8:	4b07      	ldr	r3, [pc, #28]	; (8004fc8 <run_select+0xc8>)
 8004faa:	701a      	strb	r2, [r3, #0]
			  full_led_write(BLUEGREEN);
 8004fac:	2004      	movs	r0, #4
 8004fae:	f00b fc9f 	bl	80108f0 <full_led_write>
			  break;
 8004fb2:	bf00      	nop
		}
	}
}
 8004fb4:	bf00      	nop
 8004fb6:	3708      	adds	r7, #8
 8004fb8:	46bd      	mov	sp, r7
 8004fba:	bd80      	pop	{r7, pc}
 8004fbc:	20000aec 	.word	0x20000aec
 8004fc0:	08012654 	.word	0x08012654
 8004fc4:	20000d54 	.word	0x20000d54
 8004fc8:	20000456 	.word	0x20000456

08004fcc <driveA>:
//driveA
// 指定距離、指定加速度で加速走行する
// 引数1：accel_p 加速度, 引数2：speed_min_p 最低速度, 引数3：speed_max_p 最高速度, 引数4：dist 走行距離
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void driveA(uint16_t accel_p, uint16_t speed_min_p, uint16_t speed_max_p, uint16_t dist){
 8004fcc:	b590      	push	{r4, r7, lr}
 8004fce:	b083      	sub	sp, #12
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	4604      	mov	r4, r0
 8004fd4:	4608      	mov	r0, r1
 8004fd6:	4611      	mov	r1, r2
 8004fd8:	461a      	mov	r2, r3
 8004fda:	4623      	mov	r3, r4
 8004fdc:	80fb      	strh	r3, [r7, #6]
 8004fde:	4603      	mov	r3, r0
 8004fe0:	80bb      	strh	r3, [r7, #4]
 8004fe2:	460b      	mov	r3, r1
 8004fe4:	807b      	strh	r3, [r7, #2]
 8004fe6:	4613      	mov	r3, r2
 8004fe8:	803b      	strh	r3, [r7, #0]

	speed_min_l = speed_min_r = speed_min_p;
 8004fea:	88bb      	ldrh	r3, [r7, #4]
 8004fec:	ee07 3a90 	vmov	s15, r3
 8004ff0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ff4:	4b27      	ldr	r3, [pc, #156]	; (8005094 <driveA+0xc8>)
 8004ff6:	edc3 7a00 	vstr	s15, [r3]
 8004ffa:	4b27      	ldr	r3, [pc, #156]	; (8005098 <driveA+0xcc>)
 8004ffc:	edc3 7a00 	vstr	s15, [r3]
	speed_max_l = speed_max_r = speed_max_p;
 8005000:	887b      	ldrh	r3, [r7, #2]
 8005002:	ee07 3a90 	vmov	s15, r3
 8005006:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800500a:	4b24      	ldr	r3, [pc, #144]	; (800509c <driveA+0xd0>)
 800500c:	edc3 7a00 	vstr	s15, [r3]
 8005010:	4b23      	ldr	r3, [pc, #140]	; (80050a0 <driveA+0xd4>)
 8005012:	edc3 7a00 	vstr	s15, [r3]
	accel_l = accel_r = accel_p;							//引数の各パラメータをグローバル変数化
 8005016:	88fb      	ldrh	r3, [r7, #6]
 8005018:	ee07 3a90 	vmov	s15, r3
 800501c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005020:	4b20      	ldr	r3, [pc, #128]	; (80050a4 <driveA+0xd8>)
 8005022:	edc3 7a00 	vstr	s15, [r3]
 8005026:	4b20      	ldr	r3, [pc, #128]	; (80050a8 <driveA+0xdc>)
 8005028:	edc3 7a00 	vstr	s15, [r3]
	if(MF2.FLAG.HACCEL)target_speed_l = target_speed_r = speed_min_p;
 800502c:	4b1f      	ldr	r3, [pc, #124]	; (80050ac <driveA+0xe0>)
 800502e:	881b      	ldrh	r3, [r3, #0]
 8005030:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8005034:	b2db      	uxtb	r3, r3
 8005036:	2b00      	cmp	r3, #0
 8005038:	d00a      	beq.n	8005050 <driveA+0x84>
 800503a:	88bb      	ldrh	r3, [r7, #4]
 800503c:	ee07 3a90 	vmov	s15, r3
 8005040:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005044:	4b1a      	ldr	r3, [pc, #104]	; (80050b0 <driveA+0xe4>)
 8005046:	edc3 7a00 	vstr	s15, [r3]
 800504a:	4b1a      	ldr	r3, [pc, #104]	; (80050b4 <driveA+0xe8>)
 800504c:	edc3 7a00 	vstr	s15, [r3]

	drive_start();											//走行開始
 8005050:	f7ff fe42 	bl	8004cd8 <drive_start>

	//----走行----
	while((dist_l < dist) || (dist_r < dist));				//左右のモータが指定距離以上進むまで待機
 8005054:	bf00      	nop
 8005056:	883b      	ldrh	r3, [r7, #0]
 8005058:	ee07 3a90 	vmov	s15, r3
 800505c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005060:	4b15      	ldr	r3, [pc, #84]	; (80050b8 <driveA+0xec>)
 8005062:	edd3 7a00 	vldr	s15, [r3]
 8005066:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800506a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800506e:	dcf2      	bgt.n	8005056 <driveA+0x8a>
 8005070:	883b      	ldrh	r3, [r7, #0]
 8005072:	ee07 3a90 	vmov	s15, r3
 8005076:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800507a:	4b10      	ldr	r3, [pc, #64]	; (80050bc <driveA+0xf0>)
 800507c:	edd3 7a00 	vldr	s15, [r3]
 8005080:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005084:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005088:	dce5      	bgt.n	8005056 <driveA+0x8a>

//	drive_stop();
}
 800508a:	bf00      	nop
 800508c:	370c      	adds	r7, #12
 800508e:	46bd      	mov	sp, r7
 8005090:	bd90      	pop	{r4, r7, pc}
 8005092:	bf00      	nop
 8005094:	20000f6c 	.word	0x20000f6c
 8005098:	20000b54 	.word	0x20000b54
 800509c:	200001a4 	.word	0x200001a4
 80050a0:	2000077c 	.word	0x2000077c
 80050a4:	20000ae4 	.word	0x20000ae4
 80050a8:	20000d58 	.word	0x20000d58
 80050ac:	20000f64 	.word	0x20000f64
 80050b0:	200001a0 	.word	0x200001a0
 80050b4:	20000bfc 	.word	0x20000bfc
 80050b8:	200015c4 	.word	0x200015c4
 80050bc:	20000aec 	.word	0x20000aec

080050c0 <driveD>:
//driveD
// 指定距離、指定減速度で減速走行する
// 引数1：accel_p 加速度, 引数2：speed_min_p 最低速度, 引数3：speed_max_p 最高速度, 引数4：dist 走行距離
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void driveD(int16_t accel_p, uint16_t speed_min_p, uint16_t speed_max_p, uint16_t dist){
 80050c0:	b590      	push	{r4, r7, lr}
 80050c2:	b085      	sub	sp, #20
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	4604      	mov	r4, r0
 80050c8:	4608      	mov	r0, r1
 80050ca:	4611      	mov	r1, r2
 80050cc:	461a      	mov	r2, r3
 80050ce:	4623      	mov	r3, r4
 80050d0:	80fb      	strh	r3, [r7, #6]
 80050d2:	4603      	mov	r3, r0
 80050d4:	80bb      	strh	r3, [r7, #4]
 80050d6:	460b      	mov	r3, r1
 80050d8:	807b      	strh	r3, [r7, #2]
 80050da:	4613      	mov	r3, r2
 80050dc:	803b      	strh	r3, [r7, #0]

	float speed_0 = (speed_l + speed_r) / 2;								//等速走行距離を計算するためにmain.cより参照
 80050de:	4b5a      	ldr	r3, [pc, #360]	; (8005248 <driveD+0x188>)
 80050e0:	ed93 7a00 	vldr	s14, [r3]
 80050e4:	4b59      	ldr	r3, [pc, #356]	; (800524c <driveD+0x18c>)
 80050e6:	edd3 7a00 	vldr	s15, [r3]
 80050ea:	ee37 7a27 	vadd.f32	s14, s14, s15
 80050ee:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80050f2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80050f6:	edc7 7a03 	vstr	s15, [r7, #12]
	speed_min_l = speed_min_r = speed_min_p;
 80050fa:	88bb      	ldrh	r3, [r7, #4]
 80050fc:	ee07 3a90 	vmov	s15, r3
 8005100:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005104:	4b52      	ldr	r3, [pc, #328]	; (8005250 <driveD+0x190>)
 8005106:	edc3 7a00 	vstr	s15, [r3]
 800510a:	4b52      	ldr	r3, [pc, #328]	; (8005254 <driveD+0x194>)
 800510c:	edc3 7a00 	vstr	s15, [r3]
	speed_max_l = speed_max_r = speed_max_p;
 8005110:	887b      	ldrh	r3, [r7, #2]
 8005112:	ee07 3a90 	vmov	s15, r3
 8005116:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800511a:	4b4f      	ldr	r3, [pc, #316]	; (8005258 <driveD+0x198>)
 800511c:	edc3 7a00 	vstr	s15, [r3]
 8005120:	4b4e      	ldr	r3, [pc, #312]	; (800525c <driveD+0x19c>)
 8005122:	edc3 7a00 	vstr	s15, [r3]
	accel_l = accel_r = accel_p;							//引数の各パラメータをグローバル変数化
 8005126:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800512a:	ee07 3a90 	vmov	s15, r3
 800512e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005132:	4b4b      	ldr	r3, [pc, #300]	; (8005260 <driveD+0x1a0>)
 8005134:	edc3 7a00 	vstr	s15, [r3]
 8005138:	4b4a      	ldr	r3, [pc, #296]	; (8005264 <driveD+0x1a4>)
 800513a:	edc3 7a00 	vstr	s15, [r3]

	int16_t c_dist = dist - (speed_min_l*speed_min_l  - speed_0*speed_0)/(2*accel_l);			//等速走行距離 = 総距離 - 減速に必要な距離
 800513e:	883b      	ldrh	r3, [r7, #0]
 8005140:	ee07 3a90 	vmov	s15, r3
 8005144:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005148:	4b42      	ldr	r3, [pc, #264]	; (8005254 <driveD+0x194>)
 800514a:	edd3 6a00 	vldr	s13, [r3]
 800514e:	4b41      	ldr	r3, [pc, #260]	; (8005254 <driveD+0x194>)
 8005150:	edd3 7a00 	vldr	s15, [r3]
 8005154:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005158:	ed97 6a03 	vldr	s12, [r7, #12]
 800515c:	edd7 7a03 	vldr	s15, [r7, #12]
 8005160:	ee66 7a27 	vmul.f32	s15, s12, s15
 8005164:	ee36 6ae7 	vsub.f32	s12, s13, s15
 8005168:	4b3e      	ldr	r3, [pc, #248]	; (8005264 <driveD+0x1a4>)
 800516a:	edd3 7a00 	vldr	s15, [r3]
 800516e:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8005172:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8005176:	ee77 7a67 	vsub.f32	s15, s14, s15
 800517a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800517e:	ee17 3a90 	vmov	r3, s15
 8005182:	817b      	strh	r3, [r7, #10]

	accel_l = accel_r = 0;
 8005184:	f04f 0300 	mov.w	r3, #0
 8005188:	4a35      	ldr	r2, [pc, #212]	; (8005260 <driveD+0x1a0>)
 800518a:	6013      	str	r3, [r2, #0]
 800518c:	4a35      	ldr	r2, [pc, #212]	; (8005264 <driveD+0x1a4>)
 800518e:	6013      	str	r3, [r2, #0]
	dist_l = dist_r = 0;
 8005190:	f04f 0300 	mov.w	r3, #0
 8005194:	4a34      	ldr	r2, [pc, #208]	; (8005268 <driveD+0x1a8>)
 8005196:	6013      	str	r3, [r2, #0]
 8005198:	4a34      	ldr	r2, [pc, #208]	; (800526c <driveD+0x1ac>)
 800519a:	6013      	str	r3, [r2, #0]
	if(c_dist > 0){
 800519c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	dd1c      	ble.n	80051de <driveD+0x11e>
		//----等速走行----
		while((dist_l < c_dist) || (dist_r < c_dist));	//a左右のモータが等速分の距離以上進むまで待機
 80051a4:	bf00      	nop
 80051a6:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80051aa:	ee07 3a90 	vmov	s15, r3
 80051ae:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80051b2:	4b2e      	ldr	r3, [pc, #184]	; (800526c <driveD+0x1ac>)
 80051b4:	edd3 7a00 	vldr	s15, [r3]
 80051b8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80051bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051c0:	dcf1      	bgt.n	80051a6 <driveD+0xe6>
 80051c2:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80051c6:	ee07 3a90 	vmov	s15, r3
 80051ca:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80051ce:	4b26      	ldr	r3, [pc, #152]	; (8005268 <driveD+0x1a8>)
 80051d0:	edd3 7a00 	vldr	s15, [r3]
 80051d4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80051d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051dc:	dce3      	bgt.n	80051a6 <driveD+0xe6>
	}
	accel_l = accel_r = accel_p;
 80051de:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80051e2:	ee07 3a90 	vmov	s15, r3
 80051e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80051ea:	4b1d      	ldr	r3, [pc, #116]	; (8005260 <driveD+0x1a0>)
 80051ec:	edc3 7a00 	vstr	s15, [r3]
 80051f0:	4b1c      	ldr	r3, [pc, #112]	; (8005264 <driveD+0x1a4>)
 80051f2:	edc3 7a00 	vstr	s15, [r3]
	//----減速走行----
	while((dist_l < dist) && (dist_r < dist));			//a左右のモータが減速分の距離以上進むまで待機
 80051f6:	bf00      	nop
 80051f8:	883b      	ldrh	r3, [r7, #0]
 80051fa:	ee07 3a90 	vmov	s15, r3
 80051fe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005202:	4b1a      	ldr	r3, [pc, #104]	; (800526c <driveD+0x1ac>)
 8005204:	edd3 7a00 	vldr	s15, [r3]
 8005208:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800520c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005210:	dd0c      	ble.n	800522c <driveD+0x16c>
 8005212:	883b      	ldrh	r3, [r7, #0]
 8005214:	ee07 3a90 	vmov	s15, r3
 8005218:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800521c:	4b12      	ldr	r3, [pc, #72]	; (8005268 <driveD+0x1a8>)
 800521e:	edd3 7a00 	vldr	s15, [r3]
 8005222:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005226:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800522a:	dce5      	bgt.n	80051f8 <driveD+0x138>

	if(!MF2.FLAG.HACCEL)drive_stop();											//走行停止
 800522c:	4b10      	ldr	r3, [pc, #64]	; (8005270 <driveD+0x1b0>)
 800522e:	881b      	ldrh	r3, [r3, #0]
 8005230:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8005234:	b2db      	uxtb	r3, r3
 8005236:	2b00      	cmp	r3, #0
 8005238:	d101      	bne.n	800523e <driveD+0x17e>
 800523a:	f7ff fd7d 	bl	8004d38 <drive_stop>
}
 800523e:	bf00      	nop
 8005240:	3714      	adds	r7, #20
 8005242:	46bd      	mov	sp, r7
 8005244:	bd90      	pop	{r4, r7, pc}
 8005246:	bf00      	nop
 8005248:	20000af0 	.word	0x20000af0
 800524c:	200002bc 	.word	0x200002bc
 8005250:	20000f6c 	.word	0x20000f6c
 8005254:	20000b54 	.word	0x20000b54
 8005258:	200001a4 	.word	0x200001a4
 800525c:	2000077c 	.word	0x2000077c
 8005260:	20000ae4 	.word	0x20000ae4
 8005264:	20000d58 	.word	0x20000d58
 8005268:	20000aec 	.word	0x20000aec
 800526c:	200015c4 	.word	0x200015c4
 8005270:	20000f64 	.word	0x20000f64

08005274 <driveU>:
//driveU
// 指定距離分等速走行して停止する
// 引数1：dist …… 走行距離
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void driveU(uint16_t dist){
 8005274:	b480      	push	{r7}
 8005276:	b083      	sub	sp, #12
 8005278:	af00      	add	r7, sp, #0
 800527a:	4603      	mov	r3, r0
 800527c:	80fb      	strh	r3, [r7, #6]

	accel_l = accel_r = 0;									//等速走行のため加速度は0
 800527e:	f04f 0300 	mov.w	r3, #0
 8005282:	4a28      	ldr	r2, [pc, #160]	; (8005324 <driveU+0xb0>)
 8005284:	6013      	str	r3, [r2, #0]
 8005286:	4a28      	ldr	r2, [pc, #160]	; (8005328 <driveU+0xb4>)
 8005288:	6013      	str	r3, [r2, #0]
	dist_l = dist_r = 0;
 800528a:	f04f 0300 	mov.w	r3, #0
 800528e:	4a27      	ldr	r2, [pc, #156]	; (800532c <driveU+0xb8>)
 8005290:	6013      	str	r3, [r2, #0]
 8005292:	4a27      	ldr	r2, [pc, #156]	; (8005330 <driveU+0xbc>)
 8005294:	6013      	str	r3, [r2, #0]

	//----走行----
	while((dist_l < dist) || (dist_r < dist)){				//左右のモータが指定パルス以上進むまで待機
 8005296:	e024      	b.n	80052e2 <driveU+0x6e>
		if(MF.FLAG.WEDGE){
 8005298:	4b26      	ldr	r3, [pc, #152]	; (8005334 <driveU+0xc0>)
 800529a:	881b      	ldrh	r3, [r3, #0]
 800529c:	f3c3 23c0 	ubfx	r3, r3, #11, #1
 80052a0:	b2db      	uxtb	r3, r3
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d01d      	beq.n	80052e2 <driveU+0x6e>
			if(ad_l < WALL_BASE_L-30 || ad_r < WALL_BASE_R-10){
 80052a6:	4b24      	ldr	r3, [pc, #144]	; (8005338 <driveU+0xc4>)
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	2b6d      	cmp	r3, #109	; 0x6d
 80052ac:	d903      	bls.n	80052b6 <driveU+0x42>
 80052ae:	4b23      	ldr	r3, [pc, #140]	; (800533c <driveU+0xc8>)
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	2b6d      	cmp	r3, #109	; 0x6d
 80052b4:	d815      	bhi.n	80052e2 <driveU+0x6e>
				while((dist_l < W_DIST) || (dist_r < W_DIST));	//左右のモータが壁切れ用指定距離以上進むまで待機
 80052b6:	bf00      	nop
 80052b8:	4b1d      	ldr	r3, [pc, #116]	; (8005330 <driveU+0xbc>)
 80052ba:	edd3 7a00 	vldr	s15, [r3]
 80052be:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8005340 <driveU+0xcc>
 80052c2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80052c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80052ca:	d4f5      	bmi.n	80052b8 <driveU+0x44>
 80052cc:	4b17      	ldr	r3, [pc, #92]	; (800532c <driveU+0xb8>)
 80052ce:	edd3 7a00 	vldr	s15, [r3]
 80052d2:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8005340 <driveU+0xcc>
 80052d6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80052da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80052de:	d4eb      	bmi.n	80052b8 <driveU+0x44>
			break;
 80052e0:	e019      	b.n	8005316 <driveU+0xa2>
	while((dist_l < dist) || (dist_r < dist)){				//左右のモータが指定パルス以上進むまで待機
 80052e2:	88fb      	ldrh	r3, [r7, #6]
 80052e4:	ee07 3a90 	vmov	s15, r3
 80052e8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80052ec:	4b10      	ldr	r3, [pc, #64]	; (8005330 <driveU+0xbc>)
 80052ee:	edd3 7a00 	vldr	s15, [r3]
 80052f2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80052f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80052fa:	dccd      	bgt.n	8005298 <driveU+0x24>
 80052fc:	88fb      	ldrh	r3, [r7, #6]
 80052fe:	ee07 3a90 	vmov	s15, r3
 8005302:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005306:	4b09      	ldr	r3, [pc, #36]	; (800532c <driveU+0xb8>)
 8005308:	edd3 7a00 	vldr	s15, [r3]
 800530c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005310:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005314:	dcc0      	bgt.n	8005298 <driveU+0x24>
			}
		}
	}
}
 8005316:	bf00      	nop
 8005318:	370c      	adds	r7, #12
 800531a:	46bd      	mov	sp, r7
 800531c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005320:	4770      	bx	lr
 8005322:	bf00      	nop
 8005324:	20000ae4 	.word	0x20000ae4
 8005328:	20000d58 	.word	0x20000d58
 800532c:	20000aec 	.word	0x20000aec
 8005330:	200015c4 	.word	0x200015c4
 8005334:	20000f68 	.word	0x20000f68
 8005338:	20000afc 	.word	0x20000afc
 800533c:	20000f60 	.word	0x20000f60
 8005340:	428c0000 	.word	0x428c0000

08005344 <driveC>:
//driveC
// 指定距離分デフォルト速度で走行して停止する
// 引数1：dist …… 走行距離
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void driveC(uint16_t dist){
 8005344:	b580      	push	{r7, lr}
 8005346:	b082      	sub	sp, #8
 8005348:	af00      	add	r7, sp, #0
 800534a:	4603      	mov	r3, r0
 800534c:	80fb      	strh	r3, [r7, #6]

	speed_min_l = speed_min_r = 150;
 800534e:	4b19      	ldr	r3, [pc, #100]	; (80053b4 <driveC+0x70>)
 8005350:	4a19      	ldr	r2, [pc, #100]	; (80053b8 <driveC+0x74>)
 8005352:	6013      	str	r3, [r2, #0]
 8005354:	4a19      	ldr	r2, [pc, #100]	; (80053bc <driveC+0x78>)
 8005356:	6013      	str	r3, [r2, #0]
	speed_max_l = speed_max_r = 150;
 8005358:	4b16      	ldr	r3, [pc, #88]	; (80053b4 <driveC+0x70>)
 800535a:	4a19      	ldr	r2, [pc, #100]	; (80053c0 <driveC+0x7c>)
 800535c:	6013      	str	r3, [r2, #0]
 800535e:	4a19      	ldr	r2, [pc, #100]	; (80053c4 <driveC+0x80>)
 8005360:	6013      	str	r3, [r2, #0]
	accel_l = accel_r = 0;												//等速走行のため加速度は0
 8005362:	f04f 0300 	mov.w	r3, #0
 8005366:	4a18      	ldr	r2, [pc, #96]	; (80053c8 <driveC+0x84>)
 8005368:	6013      	str	r3, [r2, #0]
 800536a:	4a18      	ldr	r2, [pc, #96]	; (80053cc <driveC+0x88>)
 800536c:	6013      	str	r3, [r2, #0]

	drive_start();											//走行開始
 800536e:	f7ff fcb3 	bl	8004cd8 <drive_start>
	//====回転====
	while((dist_l < dist) || (dist_r < dist));			//左右のモータが定速分の距離以上進むまで待機
 8005372:	bf00      	nop
 8005374:	88fb      	ldrh	r3, [r7, #6]
 8005376:	ee07 3a90 	vmov	s15, r3
 800537a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800537e:	4b14      	ldr	r3, [pc, #80]	; (80053d0 <driveC+0x8c>)
 8005380:	edd3 7a00 	vldr	s15, [r3]
 8005384:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005388:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800538c:	dcf2      	bgt.n	8005374 <driveC+0x30>
 800538e:	88fb      	ldrh	r3, [r7, #6]
 8005390:	ee07 3a90 	vmov	s15, r3
 8005394:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005398:	4b0e      	ldr	r3, [pc, #56]	; (80053d4 <driveC+0x90>)
 800539a:	edd3 7a00 	vldr	s15, [r3]
 800539e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80053a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80053a6:	dce5      	bgt.n	8005374 <driveC+0x30>

	drive_stop();											//走行停止
 80053a8:	f7ff fcc6 	bl	8004d38 <drive_stop>
}
 80053ac:	bf00      	nop
 80053ae:	3708      	adds	r7, #8
 80053b0:	46bd      	mov	sp, r7
 80053b2:	bd80      	pop	{r7, pc}
 80053b4:	43160000 	.word	0x43160000
 80053b8:	20000f6c 	.word	0x20000f6c
 80053bc:	20000b54 	.word	0x20000b54
 80053c0:	200001a4 	.word	0x200001a4
 80053c4:	2000077c 	.word	0x2000077c
 80053c8:	20000ae4 	.word	0x20000ae4
 80053cc:	20000d58 	.word	0x20000d58
 80053d0:	200015c4 	.word	0x200015c4
 80053d4:	20000aec 	.word	0x20000aec

080053d8 <driveC2>:
//driveC2
//a指定距離分デフォルト逆回転速度で走行して停止する
//a引数1：dist …… 走行距離
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void driveC2(uint16_t dist){
 80053d8:	b580      	push	{r7, lr}
 80053da:	b082      	sub	sp, #8
 80053dc:	af00      	add	r7, sp, #0
 80053de:	4603      	mov	r3, r0
 80053e0:	80fb      	strh	r3, [r7, #6]

	speed_min_l = speed_min_r = -250;
 80053e2:	4b1a      	ldr	r3, [pc, #104]	; (800544c <driveC2+0x74>)
 80053e4:	4a1a      	ldr	r2, [pc, #104]	; (8005450 <driveC2+0x78>)
 80053e6:	6013      	str	r3, [r2, #0]
 80053e8:	4a1a      	ldr	r2, [pc, #104]	; (8005454 <driveC2+0x7c>)
 80053ea:	6013      	str	r3, [r2, #0]
	speed_max_l = speed_max_r = -250;
 80053ec:	4b17      	ldr	r3, [pc, #92]	; (800544c <driveC2+0x74>)
 80053ee:	4a1a      	ldr	r2, [pc, #104]	; (8005458 <driveC2+0x80>)
 80053f0:	6013      	str	r3, [r2, #0]
 80053f2:	4a1a      	ldr	r2, [pc, #104]	; (800545c <driveC2+0x84>)
 80053f4:	6013      	str	r3, [r2, #0]
	accel_l = accel_r = 0;									//a等速走行のため加速度は0
 80053f6:	f04f 0300 	mov.w	r3, #0
 80053fa:	4a19      	ldr	r2, [pc, #100]	; (8005460 <driveC2+0x88>)
 80053fc:	6013      	str	r3, [r2, #0]
 80053fe:	4a19      	ldr	r2, [pc, #100]	; (8005464 <driveC2+0x8c>)
 8005400:	6013      	str	r3, [r2, #0]

	drive_start();											//a走行開始
 8005402:	f7ff fc69 	bl	8004cd8 <drive_start>
	//====a回転====
	while((dist_l > (-1*dist)) || (dist_r > (-1*dist)));	//a左右のモータが定速分の逆走距離以上進むまで待機
 8005406:	bf00      	nop
 8005408:	88fb      	ldrh	r3, [r7, #6]
 800540a:	425b      	negs	r3, r3
 800540c:	ee07 3a90 	vmov	s15, r3
 8005410:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005414:	4b14      	ldr	r3, [pc, #80]	; (8005468 <driveC2+0x90>)
 8005416:	edd3 7a00 	vldr	s15, [r3]
 800541a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800541e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005422:	d4f1      	bmi.n	8005408 <driveC2+0x30>
 8005424:	88fb      	ldrh	r3, [r7, #6]
 8005426:	425b      	negs	r3, r3
 8005428:	ee07 3a90 	vmov	s15, r3
 800542c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005430:	4b0e      	ldr	r3, [pc, #56]	; (800546c <driveC2+0x94>)
 8005432:	edd3 7a00 	vldr	s15, [r3]
 8005436:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800543a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800543e:	d4e3      	bmi.n	8005408 <driveC2+0x30>

	drive_stop();											//a走行停止
 8005440:	f7ff fc7a 	bl	8004d38 <drive_stop>
}
 8005444:	bf00      	nop
 8005446:	3708      	adds	r7, #8
 8005448:	46bd      	mov	sp, r7
 800544a:	bd80      	pop	{r7, pc}
 800544c:	c37a0000 	.word	0xc37a0000
 8005450:	20000f6c 	.word	0x20000f6c
 8005454:	20000b54 	.word	0x20000b54
 8005458:	200001a4 	.word	0x200001a4
 800545c:	2000077c 	.word	0x2000077c
 8005460:	20000ae4 	.word	0x20000ae4
 8005464:	20000d58 	.word	0x20000d58
 8005468:	200015c4 	.word	0x200015c4
 800546c:	20000aec 	.word	0x20000aec

08005470 <slalomF>:
//slalomF
//aスラロームの前オフセット部分
//a引数1：
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void slalomF(int16_t accel_p, int16_t speed_p, uint8_t dist_p, uint16_t wall_fl, uint16_t wall_fr){
 8005470:	b590      	push	{r4, r7, lr}
 8005472:	b083      	sub	sp, #12
 8005474:	af00      	add	r7, sp, #0
 8005476:	4604      	mov	r4, r0
 8005478:	4608      	mov	r0, r1
 800547a:	4611      	mov	r1, r2
 800547c:	461a      	mov	r2, r3
 800547e:	4623      	mov	r3, r4
 8005480:	80fb      	strh	r3, [r7, #6]
 8005482:	4603      	mov	r3, r0
 8005484:	80bb      	strh	r3, [r7, #4]
 8005486:	460b      	mov	r3, r1
 8005488:	70fb      	strb	r3, [r7, #3]
 800548a:	4613      	mov	r3, r2
 800548c:	803b      	strh	r3, [r7, #0]
	MF.FLAG.GYRO = 0;
 800548e:	4a2d      	ldr	r2, [pc, #180]	; (8005544 <slalomF+0xd4>)
 8005490:	8813      	ldrh	r3, [r2, #0]
 8005492:	f36f 2308 	bfc	r3, #8, #1
 8005496:	8013      	strh	r3, [r2, #0]
	MF.FLAG.SPD = 1;
 8005498:	4a2a      	ldr	r2, [pc, #168]	; (8005544 <slalomF+0xd4>)
 800549a:	8813      	ldrh	r3, [r2, #0]
 800549c:	f043 0304 	orr.w	r3, r3, #4
 80054a0:	8013      	strh	r3, [r2, #0]

	accel_l = accel_r = accel_p;
 80054a2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80054a6:	ee07 3a90 	vmov	s15, r3
 80054aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80054ae:	4b26      	ldr	r3, [pc, #152]	; (8005548 <slalomF+0xd8>)
 80054b0:	edc3 7a00 	vstr	s15, [r3]
 80054b4:	4b25      	ldr	r3, [pc, #148]	; (800554c <slalomF+0xdc>)
 80054b6:	edc3 7a00 	vstr	s15, [r3]
	speed_max_l = speed_max_r = speed_p;
 80054ba:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80054be:	ee07 3a90 	vmov	s15, r3
 80054c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80054c6:	4b22      	ldr	r3, [pc, #136]	; (8005550 <slalomF+0xe0>)
 80054c8:	edc3 7a00 	vstr	s15, [r3]
 80054cc:	4b21      	ldr	r3, [pc, #132]	; (8005554 <slalomF+0xe4>)
 80054ce:	edc3 7a00 	vstr	s15, [r3]

	control_start();
 80054d2:	f7ff fc59 	bl	8004d88 <control_start>
	dist_l = dist_r = 0;
 80054d6:	f04f 0300 	mov.w	r3, #0
 80054da:	4a1f      	ldr	r2, [pc, #124]	; (8005558 <slalomF+0xe8>)
 80054dc:	6013      	str	r3, [r2, #0]
 80054de:	4a1f      	ldr	r2, [pc, #124]	; (800555c <slalomF+0xec>)
 80054e0:	6013      	str	r3, [r2, #0]
	while(dist_l < dist_p && dist_r < dist_p){
 80054e2:	e00d      	b.n	8005500 <slalomF+0x90>
		if(ad_fl > wall_fl || ad_fr > wall_fr){
 80054e4:	883a      	ldrh	r2, [r7, #0]
 80054e6:	4b1e      	ldr	r3, [pc, #120]	; (8005560 <slalomF+0xf0>)
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	429a      	cmp	r2, r3
 80054ec:	d304      	bcc.n	80054f8 <slalomF+0x88>
 80054ee:	8b3a      	ldrh	r2, [r7, #24]
 80054f0:	4b1c      	ldr	r3, [pc, #112]	; (8005564 <slalomF+0xf4>)
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	429a      	cmp	r2, r3
 80054f6:	d203      	bcs.n	8005500 <slalomF+0x90>
			full_led_write(RED);
 80054f8:	2001      	movs	r0, #1
 80054fa:	f00b f9f9 	bl	80108f0 <full_led_write>
			break;
 80054fe:	e019      	b.n	8005534 <slalomF+0xc4>
	while(dist_l < dist_p && dist_r < dist_p){
 8005500:	78fb      	ldrb	r3, [r7, #3]
 8005502:	ee07 3a90 	vmov	s15, r3
 8005506:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800550a:	4b14      	ldr	r3, [pc, #80]	; (800555c <slalomF+0xec>)
 800550c:	edd3 7a00 	vldr	s15, [r3]
 8005510:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005514:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005518:	dd0c      	ble.n	8005534 <slalomF+0xc4>
 800551a:	78fb      	ldrb	r3, [r7, #3]
 800551c:	ee07 3a90 	vmov	s15, r3
 8005520:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005524:	4b0c      	ldr	r3, [pc, #48]	; (8005558 <slalomF+0xe8>)
 8005526:	edd3 7a00 	vldr	s15, [r3]
 800552a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800552e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005532:	dcd7      	bgt.n	80054e4 <slalomF+0x74>
		}
	}
	drive_stop();
 8005534:	f7ff fc00 	bl	8004d38 <drive_stop>
	control_stop();
 8005538:	f7ff fc3a 	bl	8004db0 <control_stop>
}
 800553c:	bf00      	nop
 800553e:	370c      	adds	r7, #12
 8005540:	46bd      	mov	sp, r7
 8005542:	bd90      	pop	{r4, r7, pc}
 8005544:	20000f68 	.word	0x20000f68
 8005548:	20000ae4 	.word	0x20000ae4
 800554c:	20000d58 	.word	0x20000d58
 8005550:	200001a4 	.word	0x200001a4
 8005554:	2000077c 	.word	0x2000077c
 8005558:	20000aec 	.word	0x20000aec
 800555c:	200015c4 	.word	0x200015c4
 8005560:	20000d54 	.word	0x20000d54
 8005564:	20000c00 	.word	0x20000c00

08005568 <slalomR>:
//slalomR
//aスラロームの旋回部分
//a引数1：
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void slalomR(int16_t degaccel_p, int16_t omega_p, int16_t degree_p, int16_t speed_p){
 8005568:	b490      	push	{r4, r7}
 800556a:	b084      	sub	sp, #16
 800556c:	af00      	add	r7, sp, #0
 800556e:	4604      	mov	r4, r0
 8005570:	4608      	mov	r0, r1
 8005572:	4611      	mov	r1, r2
 8005574:	461a      	mov	r2, r3
 8005576:	4623      	mov	r3, r4
 8005578:	80fb      	strh	r3, [r7, #6]
 800557a:	4603      	mov	r3, r0
 800557c:	80bb      	strh	r3, [r7, #4]
 800557e:	460b      	mov	r3, r1
 8005580:	807b      	strh	r3, [r7, #2]
 8005582:	4613      	mov	r3, r2
 8005584:	803b      	strh	r3, [r7, #0]
	MF.FLAG.GYRO = 1;
 8005586:	4a82      	ldr	r2, [pc, #520]	; (8005790 <slalomR+0x228>)
 8005588:	8813      	ldrh	r3, [r2, #0]
 800558a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800558e:	8013      	strh	r3, [r2, #0]
	target_degaccel_z = degaccel_p;
 8005590:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005594:	ee07 3a90 	vmov	s15, r3
 8005598:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800559c:	4b7d      	ldr	r3, [pc, #500]	; (8005794 <slalomR+0x22c>)
 800559e:	edc3 7a00 	vstr	s15, [r3]
	target_omega_z = 0;
 80055a2:	4b7d      	ldr	r3, [pc, #500]	; (8005798 <slalomR+0x230>)
 80055a4:	f04f 0200 	mov.w	r2, #0
 80055a8:	601a      	str	r2, [r3, #0]
	speed_G = speed_p;
 80055aa:	f9b7 3000 	ldrsh.w	r3, [r7]
 80055ae:	ee07 3a90 	vmov	s15, r3
 80055b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80055b6:	4b79      	ldr	r3, [pc, #484]	; (800579c <slalomR+0x234>)
 80055b8:	edc3 7a00 	vstr	s15, [r3]

	int16_t c_degree;

	if(omega_p < 0){
 80055bc:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	da1f      	bge.n	8005604 <slalomR+0x9c>
		omega_min = omega_p;
 80055c4:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80055c8:	ee07 3a90 	vmov	s15, r3
 80055cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80055d0:	4b73      	ldr	r3, [pc, #460]	; (80057a0 <slalomR+0x238>)
 80055d2:	edc3 7a00 	vstr	s15, [r3]
		c_degree =  omega_min * omega_min / target_degaccel_z / 2;
 80055d6:	4b72      	ldr	r3, [pc, #456]	; (80057a0 <slalomR+0x238>)
 80055d8:	ed93 7a00 	vldr	s14, [r3]
 80055dc:	4b70      	ldr	r3, [pc, #448]	; (80057a0 <slalomR+0x238>)
 80055de:	edd3 7a00 	vldr	s15, [r3]
 80055e2:	ee67 6a27 	vmul.f32	s13, s14, s15
 80055e6:	4b6b      	ldr	r3, [pc, #428]	; (8005794 <slalomR+0x22c>)
 80055e8:	edd3 7a00 	vldr	s15, [r3]
 80055ec:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80055f0:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80055f4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80055f8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80055fc:	ee17 3a90 	vmov	r3, s15
 8005600:	81fb      	strh	r3, [r7, #14]
 8005602:	e01e      	b.n	8005642 <slalomR+0xda>
	}else{
		omega_max = omega_p;
 8005604:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8005608:	ee07 3a90 	vmov	s15, r3
 800560c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005610:	4b64      	ldr	r3, [pc, #400]	; (80057a4 <slalomR+0x23c>)
 8005612:	edc3 7a00 	vstr	s15, [r3]
		c_degree =  omega_max * omega_max / target_degaccel_z / 2;
 8005616:	4b63      	ldr	r3, [pc, #396]	; (80057a4 <slalomR+0x23c>)
 8005618:	ed93 7a00 	vldr	s14, [r3]
 800561c:	4b61      	ldr	r3, [pc, #388]	; (80057a4 <slalomR+0x23c>)
 800561e:	edd3 7a00 	vldr	s15, [r3]
 8005622:	ee67 6a27 	vmul.f32	s13, s14, s15
 8005626:	4b5b      	ldr	r3, [pc, #364]	; (8005794 <slalomR+0x22c>)
 8005628:	edd3 7a00 	vldr	s15, [r3]
 800562c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005630:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8005634:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005638:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800563c:	ee17 3a90 	vmov	r3, s15
 8005640:	81fb      	strh	r3, [r7, #14]
	}

	MF.FLAG.DRV = 1;
 8005642:	4a53      	ldr	r2, [pc, #332]	; (8005790 <slalomR+0x228>)
 8005644:	8813      	ldrh	r3, [r2, #0]
 8005646:	f043 0302 	orr.w	r3, r3, #2
 800564a:	8013      	strh	r3, [r2, #0]
	if(omega_p < 0){
 800564c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8005650:	2b00      	cmp	r3, #0
 8005652:	da14      	bge.n	800567e <slalomR+0x116>
		while(degree_z > target_degree_z+c_degree);
 8005654:	bf00      	nop
 8005656:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800565a:	ee07 3a90 	vmov	s15, r3
 800565e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005662:	4b51      	ldr	r3, [pc, #324]	; (80057a8 <slalomR+0x240>)
 8005664:	edd3 7a00 	vldr	s15, [r3]
 8005668:	ee37 7a27 	vadd.f32	s14, s14, s15
 800566c:	4b4f      	ldr	r3, [pc, #316]	; (80057ac <slalomR+0x244>)
 800566e:	edd3 7a00 	vldr	s15, [r3]
 8005672:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005676:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800567a:	d4ec      	bmi.n	8005656 <slalomR+0xee>
 800567c:	e013      	b.n	80056a6 <slalomR+0x13e>
	}else{
		while(degree_z < target_degree_z+c_degree);
 800567e:	bf00      	nop
 8005680:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005684:	ee07 3a90 	vmov	s15, r3
 8005688:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800568c:	4b46      	ldr	r3, [pc, #280]	; (80057a8 <slalomR+0x240>)
 800568e:	edd3 7a00 	vldr	s15, [r3]
 8005692:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005696:	4b45      	ldr	r3, [pc, #276]	; (80057ac <slalomR+0x244>)
 8005698:	edd3 7a00 	vldr	s15, [r3]
 800569c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80056a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80056a4:	dcec      	bgt.n	8005680 <slalomR+0x118>
	}

	target_degaccel_z = 0;
 80056a6:	4b3b      	ldr	r3, [pc, #236]	; (8005794 <slalomR+0x22c>)
 80056a8:	f04f 0200 	mov.w	r2, #0
 80056ac:	601a      	str	r2, [r3, #0]

	if(omega_p < 0){
 80056ae:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	da18      	bge.n	80056e8 <slalomR+0x180>
		while(degree_z > target_degree_z+(degree_p-c_degree-4));
 80056b6:	bf00      	nop
 80056b8:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80056bc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80056c0:	1ad3      	subs	r3, r2, r3
 80056c2:	3b04      	subs	r3, #4
 80056c4:	ee07 3a90 	vmov	s15, r3
 80056c8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80056cc:	4b36      	ldr	r3, [pc, #216]	; (80057a8 <slalomR+0x240>)
 80056ce:	edd3 7a00 	vldr	s15, [r3]
 80056d2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80056d6:	4b35      	ldr	r3, [pc, #212]	; (80057ac <slalomR+0x244>)
 80056d8:	edd3 7a00 	vldr	s15, [r3]
 80056dc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80056e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80056e4:	d4e8      	bmi.n	80056b8 <slalomR+0x150>
 80056e6:	e017      	b.n	8005718 <slalomR+0x1b0>
	}else{
		while(degree_z < target_degree_z+(degree_p-c_degree+4));
 80056e8:	bf00      	nop
 80056ea:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80056ee:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80056f2:	1ad3      	subs	r3, r2, r3
 80056f4:	3304      	adds	r3, #4
 80056f6:	ee07 3a90 	vmov	s15, r3
 80056fa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80056fe:	4b2a      	ldr	r3, [pc, #168]	; (80057a8 <slalomR+0x240>)
 8005700:	edd3 7a00 	vldr	s15, [r3]
 8005704:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005708:	4b28      	ldr	r3, [pc, #160]	; (80057ac <slalomR+0x244>)
 800570a:	edd3 7a00 	vldr	s15, [r3]
 800570e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005712:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005716:	dce8      	bgt.n	80056ea <slalomR+0x182>
	}

	target_degaccel_z = -degaccel_p;
 8005718:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800571c:	425b      	negs	r3, r3
 800571e:	ee07 3a90 	vmov	s15, r3
 8005722:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005726:	4b1b      	ldr	r3, [pc, #108]	; (8005794 <slalomR+0x22c>)
 8005728:	edc3 7a00 	vstr	s15, [r3]

	if(omega_p < 0){
 800572c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8005730:	2b00      	cmp	r3, #0
 8005732:	da14      	bge.n	800575e <slalomR+0x1f6>
		while(degree_z > target_degree_z+degree_p);
 8005734:	bf00      	nop
 8005736:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800573a:	ee07 3a90 	vmov	s15, r3
 800573e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005742:	4b19      	ldr	r3, [pc, #100]	; (80057a8 <slalomR+0x240>)
 8005744:	edd3 7a00 	vldr	s15, [r3]
 8005748:	ee37 7a27 	vadd.f32	s14, s14, s15
 800574c:	4b17      	ldr	r3, [pc, #92]	; (80057ac <slalomR+0x244>)
 800574e:	edd3 7a00 	vldr	s15, [r3]
 8005752:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005756:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800575a:	d4ec      	bmi.n	8005736 <slalomR+0x1ce>
	}else{
		while(degree_z < target_degree_z+degree_p);
	}
}
 800575c:	e013      	b.n	8005786 <slalomR+0x21e>
		while(degree_z < target_degree_z+degree_p);
 800575e:	bf00      	nop
 8005760:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005764:	ee07 3a90 	vmov	s15, r3
 8005768:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800576c:	4b0e      	ldr	r3, [pc, #56]	; (80057a8 <slalomR+0x240>)
 800576e:	edd3 7a00 	vldr	s15, [r3]
 8005772:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005776:	4b0d      	ldr	r3, [pc, #52]	; (80057ac <slalomR+0x244>)
 8005778:	edd3 7a00 	vldr	s15, [r3]
 800577c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005780:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005784:	dcec      	bgt.n	8005760 <slalomR+0x1f8>
}
 8005786:	bf00      	nop
 8005788:	3710      	adds	r7, #16
 800578a:	46bd      	mov	sp, r7
 800578c:	bc90      	pop	{r4, r7}
 800578e:	4770      	bx	lr
 8005790:	20000f68 	.word	0x20000f68
 8005794:	20000b58 	.word	0x20000b58
 8005798:	200001a8 	.word	0x200001a8
 800579c:	20000af4 	.word	0x20000af4
 80057a0:	200002b8 	.word	0x200002b8
 80057a4:	20000ae8 	.word	0x20000ae8
 80057a8:	20000bf8 	.word	0x20000bf8
 80057ac:	20000b5c 	.word	0x20000b5c

080057b0 <slalomB>:
//slalomB
//aスラロームの後オフセット部分
//a引数1：
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void slalomB(int16_t accel_p, int16_t speed_p, uint8_t dist_p){
 80057b0:	b580      	push	{r7, lr}
 80057b2:	b082      	sub	sp, #8
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	4603      	mov	r3, r0
 80057b8:	80fb      	strh	r3, [r7, #6]
 80057ba:	460b      	mov	r3, r1
 80057bc:	80bb      	strh	r3, [r7, #4]
 80057be:	4613      	mov	r3, r2
 80057c0:	70fb      	strb	r3, [r7, #3]
	MF.FLAG.GYRO = 0;
 80057c2:	4a25      	ldr	r2, [pc, #148]	; (8005858 <slalomB+0xa8>)
 80057c4:	8813      	ldrh	r3, [r2, #0]
 80057c6:	f36f 2308 	bfc	r3, #8, #1
 80057ca:	8013      	strh	r3, [r2, #0]
	MF.FLAG.SPD = 1;
 80057cc:	4a22      	ldr	r2, [pc, #136]	; (8005858 <slalomB+0xa8>)
 80057ce:	8813      	ldrh	r3, [r2, #0]
 80057d0:	f043 0304 	orr.w	r3, r3, #4
 80057d4:	8013      	strh	r3, [r2, #0]

	accel_l = accel_r = accel_p;
 80057d6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80057da:	ee07 3a90 	vmov	s15, r3
 80057de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80057e2:	4b1e      	ldr	r3, [pc, #120]	; (800585c <slalomB+0xac>)
 80057e4:	edc3 7a00 	vstr	s15, [r3]
 80057e8:	4b1d      	ldr	r3, [pc, #116]	; (8005860 <slalomB+0xb0>)
 80057ea:	edc3 7a00 	vstr	s15, [r3]
	speed_max_l = speed_max_r = speed_p;
 80057ee:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80057f2:	ee07 3a90 	vmov	s15, r3
 80057f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80057fa:	4b1a      	ldr	r3, [pc, #104]	; (8005864 <slalomB+0xb4>)
 80057fc:	edc3 7a00 	vstr	s15, [r3]
 8005800:	4b19      	ldr	r3, [pc, #100]	; (8005868 <slalomB+0xb8>)
 8005802:	edc3 7a00 	vstr	s15, [r3]

	control_start();
 8005806:	f7ff fabf 	bl	8004d88 <control_start>
	dist_l = dist_r = 0;
 800580a:	f04f 0300 	mov.w	r3, #0
 800580e:	4a17      	ldr	r2, [pc, #92]	; (800586c <slalomB+0xbc>)
 8005810:	6013      	str	r3, [r2, #0]
 8005812:	4a17      	ldr	r2, [pc, #92]	; (8005870 <slalomB+0xc0>)
 8005814:	6013      	str	r3, [r2, #0]
	while(dist_l < dist_p && dist_r < dist_p);
 8005816:	bf00      	nop
 8005818:	78fb      	ldrb	r3, [r7, #3]
 800581a:	ee07 3a90 	vmov	s15, r3
 800581e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005822:	4b13      	ldr	r3, [pc, #76]	; (8005870 <slalomB+0xc0>)
 8005824:	edd3 7a00 	vldr	s15, [r3]
 8005828:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800582c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005830:	dc00      	bgt.n	8005834 <slalomB+0x84>
}
 8005832:	e00c      	b.n	800584e <slalomB+0x9e>
	while(dist_l < dist_p && dist_r < dist_p);
 8005834:	78fb      	ldrb	r3, [r7, #3]
 8005836:	ee07 3a90 	vmov	s15, r3
 800583a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800583e:	4b0b      	ldr	r3, [pc, #44]	; (800586c <slalomB+0xbc>)
 8005840:	edd3 7a00 	vldr	s15, [r3]
 8005844:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005848:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800584c:	dce4      	bgt.n	8005818 <slalomB+0x68>
}
 800584e:	bf00      	nop
 8005850:	3708      	adds	r7, #8
 8005852:	46bd      	mov	sp, r7
 8005854:	bd80      	pop	{r7, pc}
 8005856:	bf00      	nop
 8005858:	20000f68 	.word	0x20000f68
 800585c:	20000ae4 	.word	0x20000ae4
 8005860:	20000d58 	.word	0x20000d58
 8005864:	200001a4 	.word	0x200001a4
 8005868:	2000077c 	.word	0x2000077c
 800586c:	20000aec 	.word	0x20000aec
 8005870:	200015c4 	.word	0x200015c4

08005874 <set_position>:
//set_position
//a機体の尻を壁に当てて場所を区画中央に合わせる
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void set_position(){
 8005874:	b580      	push	{r7, lr}
 8005876:	af00      	add	r7, sp, #0

  driveC2(SETPOS_BACK);         //a尻を当てる程度に後退。回転後に停止する
 8005878:	2064      	movs	r0, #100	; 0x64
 800587a:	f7ff fdad 	bl	80053d8 <driveC2>
  degree_z = target_degree_z;
 800587e:	4b05      	ldr	r3, [pc, #20]	; (8005894 <set_position+0x20>)
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	4a05      	ldr	r2, [pc, #20]	; (8005898 <set_position+0x24>)
 8005884:	6013      	str	r3, [r2, #0]
  start_mode = 0;
 8005886:	4b05      	ldr	r3, [pc, #20]	; (800589c <set_position+0x28>)
 8005888:	2200      	movs	r2, #0
 800588a:	701a      	strb	r2, [r3, #0]
  start_sectionA();
 800588c:	f000 f826 	bl	80058dc <start_sectionA>
}
 8005890:	bf00      	nop
 8005892:	bd80      	pop	{r7, pc}
 8005894:	20000bf8 	.word	0x20000bf8
 8005898:	20000b5c 	.word	0x20000b5c
 800589c:	200015c8 	.word	0x200015c8

080058a0 <set_positionF>:
//set_positionF
//a前壁との距離を測定し、場所を区画中央に合わせる
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void set_positionF(){
 80058a0:	b580      	push	{r7, lr}
 80058a2:	af00      	add	r7, sp, #0

	full_led_write(RED);
 80058a4:	2001      	movs	r0, #1
 80058a6:	f00b f823 	bl	80108f0 <full_led_write>
	HAL_Delay(100);
 80058aa:	2064      	movs	r0, #100	; 0x64
 80058ac:	f7fb fbb6 	bl	800101c <HAL_Delay>

	MF.FLAG.DRV = 1;
 80058b0:	4a09      	ldr	r2, [pc, #36]	; (80058d8 <set_positionF+0x38>)
 80058b2:	8813      	ldrh	r3, [r2, #0]
 80058b4:	f043 0302 	orr.w	r3, r3, #2
 80058b8:	8013      	strh	r3, [r2, #0]
//	MF.FLAG.FWALL = 1;
	MF.FLAG.GCTRL = 1;
 80058ba:	4a07      	ldr	r2, [pc, #28]	; (80058d8 <set_positionF+0x38>)
 80058bc:	8813      	ldrh	r3, [r2, #0]
 80058be:	f043 0310 	orr.w	r3, r3, #16
 80058c2:	8013      	strh	r3, [r2, #0]
//	while(MF.FLAG.FWALL);

	MF.FLAG.GCTRL = 0;
 80058c4:	4a04      	ldr	r2, [pc, #16]	; (80058d8 <set_positionF+0x38>)
 80058c6:	8813      	ldrh	r3, [r2, #0]
 80058c8:	f36f 1304 	bfc	r3, #4, #1
 80058cc:	8013      	strh	r3, [r2, #0]
	drive_stop();
 80058ce:	f7ff fa33 	bl	8004d38 <drive_stop>
}
 80058d2:	bf00      	nop
 80058d4:	bd80      	pop	{r7, pc}
 80058d6:	bf00      	nop
 80058d8:	20000f68 	.word	0x20000f68

080058dc <start_sectionA>:
//start_sectionA
// スタート区画分加速しながら走行する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void start_sectionA(void){
 80058dc:	b580      	push	{r7, lr}
 80058de:	af00      	add	r7, sp, #0

	control_start();
 80058e0:	f7ff fa52 	bl	8004d88 <control_start>
	if(run_mode == LOW){
 80058e4:	4b64      	ldr	r3, [pc, #400]	; (8005a78 <start_sectionA+0x19c>)
 80058e6:	781b      	ldrb	r3, [r3, #0]
 80058e8:	b2db      	uxtb	r3, r3
 80058ea:	2b01      	cmp	r3, #1
 80058ec:	d12a      	bne.n	8005944 <start_sectionA+0x68>
		if(start_mode == 0){
 80058ee:	4b63      	ldr	r3, [pc, #396]	; (8005a7c <start_sectionA+0x1a0>)
 80058f0:	781b      	ldrb	r3, [r3, #0]
 80058f2:	b2db      	uxtb	r3, r3
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d108      	bne.n	800590a <start_sectionA+0x2e>
			driveA(4000, SPEED_MIN, SPEED_LOW, SEC_START);					//aスタート区画分加速しながら走行。走行後は停止しない
 80058f8:	237d      	movs	r3, #125	; 0x7d
 80058fa:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80058fe:	2114      	movs	r1, #20
 8005900:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8005904:	f7ff fb62 	bl	8004fcc <driveA>
 8005908:	e0a8      	b.n	8005a5c <start_sectionA+0x180>
		}else if(start_mode == 1){
 800590a:	4b5c      	ldr	r3, [pc, #368]	; (8005a7c <start_sectionA+0x1a0>)
 800590c:	781b      	ldrb	r3, [r3, #0]
 800590e:	b2db      	uxtb	r3, r3
 8005910:	2b01      	cmp	r3, #1
 8005912:	d108      	bne.n	8005926 <start_sectionA+0x4a>
			driveA(4000, SPEED_MIN, SPEED_LOW, SEC_HALF);					//a半区画分加速しながら走行。走行後は停止しない
 8005914:	235b      	movs	r3, #91	; 0x5b
 8005916:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800591a:	2114      	movs	r1, #20
 800591c:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8005920:	f7ff fb54 	bl	8004fcc <driveA>
 8005924:	e09a      	b.n	8005a5c <start_sectionA+0x180>
		}else if(start_mode == 2){
 8005926:	4b55      	ldr	r3, [pc, #340]	; (8005a7c <start_sectionA+0x1a0>)
 8005928:	781b      	ldrb	r3, [r3, #0]
 800592a:	b2db      	uxtb	r3, r3
 800592c:	2b02      	cmp	r3, #2
 800592e:	f040 8095 	bne.w	8005a5c <start_sectionA+0x180>
			driveA(4000, SPEED_MIN, SPEED_LOW, SEC_START_HALF);				//aスタート半区画分加速しながら走行。走行後は停止しない
 8005932:	2323      	movs	r3, #35	; 0x23
 8005934:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8005938:	2114      	movs	r1, #20
 800593a:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 800593e:	f7ff fb45 	bl	8004fcc <driveA>
 8005942:	e08b      	b.n	8005a5c <start_sectionA+0x180>
		}
	}else if(run_mode == MIDDLE){
 8005944:	4b4c      	ldr	r3, [pc, #304]	; (8005a78 <start_sectionA+0x19c>)
 8005946:	781b      	ldrb	r3, [r3, #0]
 8005948:	b2db      	uxtb	r3, r3
 800594a:	2b02      	cmp	r3, #2
 800594c:	d129      	bne.n	80059a2 <start_sectionA+0xc6>
		if(start_mode == 0){
 800594e:	4b4b      	ldr	r3, [pc, #300]	; (8005a7c <start_sectionA+0x1a0>)
 8005950:	781b      	ldrb	r3, [r3, #0]
 8005952:	b2db      	uxtb	r3, r3
 8005954:	2b00      	cmp	r3, #0
 8005956:	d108      	bne.n	800596a <start_sectionA+0x8e>
			driveA(6000, SPEED_MIN, SPEED_MIDDLE, SEC_START);				//aスタート区画分加速しながら走行。走行後は停止しない
 8005958:	237d      	movs	r3, #125	; 0x7d
 800595a:	f44f 7216 	mov.w	r2, #600	; 0x258
 800595e:	2114      	movs	r1, #20
 8005960:	f241 7070 	movw	r0, #6000	; 0x1770
 8005964:	f7ff fb32 	bl	8004fcc <driveA>
 8005968:	e078      	b.n	8005a5c <start_sectionA+0x180>
		}else if(start_mode == 1){
 800596a:	4b44      	ldr	r3, [pc, #272]	; (8005a7c <start_sectionA+0x1a0>)
 800596c:	781b      	ldrb	r3, [r3, #0]
 800596e:	b2db      	uxtb	r3, r3
 8005970:	2b01      	cmp	r3, #1
 8005972:	d108      	bne.n	8005986 <start_sectionA+0xaa>
			driveA(6000, SPEED_MIN, SPEED_MIDDLE, SEC_HALF);				//a半区画分加速しながら走行。走行後は停止しない
 8005974:	235b      	movs	r3, #91	; 0x5b
 8005976:	f44f 7216 	mov.w	r2, #600	; 0x258
 800597a:	2114      	movs	r1, #20
 800597c:	f241 7070 	movw	r0, #6000	; 0x1770
 8005980:	f7ff fb24 	bl	8004fcc <driveA>
 8005984:	e06a      	b.n	8005a5c <start_sectionA+0x180>
		}else if(start_mode == 2){
 8005986:	4b3d      	ldr	r3, [pc, #244]	; (8005a7c <start_sectionA+0x1a0>)
 8005988:	781b      	ldrb	r3, [r3, #0]
 800598a:	b2db      	uxtb	r3, r3
 800598c:	2b02      	cmp	r3, #2
 800598e:	d165      	bne.n	8005a5c <start_sectionA+0x180>
			driveA(6000, SPEED_MIN, SPEED_MIDDLE, SEC_START_HALF);			//aスタート半区画分加速しながら走行。走行後は停止しない
 8005990:	2323      	movs	r3, #35	; 0x23
 8005992:	f44f 7216 	mov.w	r2, #600	; 0x258
 8005996:	2114      	movs	r1, #20
 8005998:	f241 7070 	movw	r0, #6000	; 0x1770
 800599c:	f7ff fb16 	bl	8004fcc <driveA>
 80059a0:	e05c      	b.n	8005a5c <start_sectionA+0x180>
		}
	}else if(run_mode == HIGH){
 80059a2:	4b35      	ldr	r3, [pc, #212]	; (8005a78 <start_sectionA+0x19c>)
 80059a4:	781b      	ldrb	r3, [r3, #0]
 80059a6:	b2db      	uxtb	r3, r3
 80059a8:	2b03      	cmp	r3, #3
 80059aa:	d129      	bne.n	8005a00 <start_sectionA+0x124>
		if(start_mode == 0){
 80059ac:	4b33      	ldr	r3, [pc, #204]	; (8005a7c <start_sectionA+0x1a0>)
 80059ae:	781b      	ldrb	r3, [r3, #0]
 80059b0:	b2db      	uxtb	r3, r3
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d108      	bne.n	80059c8 <start_sectionA+0xec>
			driveA(8000, SPEED_MIN, SPEED_HIGH, SEC_START);					//aスタート区画分加速しながら走行。走行後は停止しない
 80059b6:	237d      	movs	r3, #125	; 0x7d
 80059b8:	f44f 7248 	mov.w	r2, #800	; 0x320
 80059bc:	2114      	movs	r1, #20
 80059be:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 80059c2:	f7ff fb03 	bl	8004fcc <driveA>
 80059c6:	e049      	b.n	8005a5c <start_sectionA+0x180>
		}else if(start_mode == 1){
 80059c8:	4b2c      	ldr	r3, [pc, #176]	; (8005a7c <start_sectionA+0x1a0>)
 80059ca:	781b      	ldrb	r3, [r3, #0]
 80059cc:	b2db      	uxtb	r3, r3
 80059ce:	2b01      	cmp	r3, #1
 80059d0:	d108      	bne.n	80059e4 <start_sectionA+0x108>
			driveA(8000, SPEED_MIN, SPEED_HIGH, SEC_HALF);					//a半区画分加速しながら走行。走行後は停止しない
 80059d2:	235b      	movs	r3, #91	; 0x5b
 80059d4:	f44f 7248 	mov.w	r2, #800	; 0x320
 80059d8:	2114      	movs	r1, #20
 80059da:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 80059de:	f7ff faf5 	bl	8004fcc <driveA>
 80059e2:	e03b      	b.n	8005a5c <start_sectionA+0x180>
		}else if(start_mode == 2){
 80059e4:	4b25      	ldr	r3, [pc, #148]	; (8005a7c <start_sectionA+0x1a0>)
 80059e6:	781b      	ldrb	r3, [r3, #0]
 80059e8:	b2db      	uxtb	r3, r3
 80059ea:	2b02      	cmp	r3, #2
 80059ec:	d136      	bne.n	8005a5c <start_sectionA+0x180>
			driveA(10000, SPEED_MIN, SPEED_HIGH, SEC_START_HALF);			//aスタート半区画分加速しながら走行。走行後は停止しない
 80059ee:	2323      	movs	r3, #35	; 0x23
 80059f0:	f44f 7248 	mov.w	r2, #800	; 0x320
 80059f4:	2114      	movs	r1, #20
 80059f6:	f242 7010 	movw	r0, #10000	; 0x2710
 80059fa:	f7ff fae7 	bl	8004fcc <driveA>
 80059fe:	e02d      	b.n	8005a5c <start_sectionA+0x180>
		}
	}else if(run_mode == HIGH_HIGH){
 8005a00:	4b1d      	ldr	r3, [pc, #116]	; (8005a78 <start_sectionA+0x19c>)
 8005a02:	781b      	ldrb	r3, [r3, #0]
 8005a04:	b2db      	uxtb	r3, r3
 8005a06:	2b04      	cmp	r3, #4
 8005a08:	d128      	bne.n	8005a5c <start_sectionA+0x180>
		if(start_mode == 0){
 8005a0a:	4b1c      	ldr	r3, [pc, #112]	; (8005a7c <start_sectionA+0x1a0>)
 8005a0c:	781b      	ldrb	r3, [r3, #0]
 8005a0e:	b2db      	uxtb	r3, r3
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d108      	bne.n	8005a26 <start_sectionA+0x14a>
			driveA(10000, SPEED_MIN, SPEED_HIGH_HIGH, SEC_START);					//aスタート区画分加速しながら走行。走行後は停止しない
 8005a14:	237d      	movs	r3, #125	; 0x7d
 8005a16:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005a1a:	2114      	movs	r1, #20
 8005a1c:	f242 7010 	movw	r0, #10000	; 0x2710
 8005a20:	f7ff fad4 	bl	8004fcc <driveA>
 8005a24:	e01a      	b.n	8005a5c <start_sectionA+0x180>
		}else if(start_mode == 1){
 8005a26:	4b15      	ldr	r3, [pc, #84]	; (8005a7c <start_sectionA+0x1a0>)
 8005a28:	781b      	ldrb	r3, [r3, #0]
 8005a2a:	b2db      	uxtb	r3, r3
 8005a2c:	2b01      	cmp	r3, #1
 8005a2e:	d108      	bne.n	8005a42 <start_sectionA+0x166>
			driveA(10000, SPEED_MIN, SPEED_HIGH_HIGH, SEC_HALF);					//a半区画分加速しながら走行。走行後は停止しない
 8005a30:	235b      	movs	r3, #91	; 0x5b
 8005a32:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005a36:	2114      	movs	r1, #20
 8005a38:	f242 7010 	movw	r0, #10000	; 0x2710
 8005a3c:	f7ff fac6 	bl	8004fcc <driveA>
 8005a40:	e00c      	b.n	8005a5c <start_sectionA+0x180>
		}else if(start_mode == 2){
 8005a42:	4b0e      	ldr	r3, [pc, #56]	; (8005a7c <start_sectionA+0x1a0>)
 8005a44:	781b      	ldrb	r3, [r3, #0]
 8005a46:	b2db      	uxtb	r3, r3
 8005a48:	2b02      	cmp	r3, #2
 8005a4a:	d107      	bne.n	8005a5c <start_sectionA+0x180>
			driveA(15000, SPEED_MIN, SPEED_HIGH_HIGH, SEC_START_HALF);			//aスタート半区画分加速しながら走行。走行後は停止しない
 8005a4c:	2323      	movs	r3, #35	; 0x23
 8005a4e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005a52:	2114      	movs	r1, #20
 8005a54:	f643 2098 	movw	r0, #15000	; 0x3a98
 8005a58:	f7ff fab8 	bl	8004fcc <driveA>
		}
	}
	start_mode = 1;
 8005a5c:	4b07      	ldr	r3, [pc, #28]	; (8005a7c <start_sectionA+0x1a0>)
 8005a5e:	2201      	movs	r2, #1
 8005a60:	701a      	strb	r2, [r3, #0]
	if(!MF.FLAG.SCND)get_wall_info();								//壁情報を取得，片壁制御の有効・無効の判断
 8005a62:	4b07      	ldr	r3, [pc, #28]	; (8005a80 <start_sectionA+0x1a4>)
 8005a64:	881b      	ldrh	r3, [r3, #0]
 8005a66:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8005a6a:	b2db      	uxtb	r3, r3
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d101      	bne.n	8005a74 <start_sectionA+0x198>
 8005a70:	f00a feca 	bl	8010808 <get_wall_info>
}
 8005a74:	bf00      	nop
 8005a76:	bd80      	pop	{r7, pc}
 8005a78:	20000456 	.word	0x20000456
 8005a7c:	200015c8 	.word	0x200015c8
 8005a80:	20000f68 	.word	0x20000f68

08005a84 <half_sectionA>:
//half_sectionA
// 半区画分加速しながら走行する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void half_sectionA(void){
 8005a84:	b580      	push	{r7, lr}
 8005a86:	af00      	add	r7, sp, #0

	control_start();
 8005a88:	f7ff f97e 	bl	8004d88 <control_start>
	if(run_mode == LOW){
 8005a8c:	4b20      	ldr	r3, [pc, #128]	; (8005b10 <half_sectionA+0x8c>)
 8005a8e:	781b      	ldrb	r3, [r3, #0]
 8005a90:	b2db      	uxtb	r3, r3
 8005a92:	2b01      	cmp	r3, #1
 8005a94:	d108      	bne.n	8005aa8 <half_sectionA+0x24>
		driveA(4000, SPEED_MIN, SPEED_LOW, SEC_HALF);						//半区画分加速しながら走行。走行後は停止しない
 8005a96:	235b      	movs	r3, #91	; 0x5b
 8005a98:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8005a9c:	2114      	movs	r1, #20
 8005a9e:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8005aa2:	f7ff fa93 	bl	8004fcc <driveA>
 8005aa6:	e028      	b.n	8005afa <half_sectionA+0x76>
	}else if(run_mode == MIDDLE){
 8005aa8:	4b19      	ldr	r3, [pc, #100]	; (8005b10 <half_sectionA+0x8c>)
 8005aaa:	781b      	ldrb	r3, [r3, #0]
 8005aac:	b2db      	uxtb	r3, r3
 8005aae:	2b02      	cmp	r3, #2
 8005ab0:	d108      	bne.n	8005ac4 <half_sectionA+0x40>
		driveA(6000, SPEED_MIN, SPEED_MIDDLE, SEC_HALF);					//半区画分加速しながら走行。走行後は停止しない
 8005ab2:	235b      	movs	r3, #91	; 0x5b
 8005ab4:	f44f 7216 	mov.w	r2, #600	; 0x258
 8005ab8:	2114      	movs	r1, #20
 8005aba:	f241 7070 	movw	r0, #6000	; 0x1770
 8005abe:	f7ff fa85 	bl	8004fcc <driveA>
 8005ac2:	e01a      	b.n	8005afa <half_sectionA+0x76>
	}else if(run_mode == HIGH){
 8005ac4:	4b12      	ldr	r3, [pc, #72]	; (8005b10 <half_sectionA+0x8c>)
 8005ac6:	781b      	ldrb	r3, [r3, #0]
 8005ac8:	b2db      	uxtb	r3, r3
 8005aca:	2b03      	cmp	r3, #3
 8005acc:	d108      	bne.n	8005ae0 <half_sectionA+0x5c>
		driveA(8000, SPEED_MIN, SPEED_HIGH, SEC_HALF);						//半区画分加速しながら走行。走行後は停止しない
 8005ace:	235b      	movs	r3, #91	; 0x5b
 8005ad0:	f44f 7248 	mov.w	r2, #800	; 0x320
 8005ad4:	2114      	movs	r1, #20
 8005ad6:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 8005ada:	f7ff fa77 	bl	8004fcc <driveA>
 8005ade:	e00c      	b.n	8005afa <half_sectionA+0x76>
	}else if(run_mode == HIGH_HIGH){
 8005ae0:	4b0b      	ldr	r3, [pc, #44]	; (8005b10 <half_sectionA+0x8c>)
 8005ae2:	781b      	ldrb	r3, [r3, #0]
 8005ae4:	b2db      	uxtb	r3, r3
 8005ae6:	2b04      	cmp	r3, #4
 8005ae8:	d107      	bne.n	8005afa <half_sectionA+0x76>
		driveA(10000, SPEED_MIN, SPEED_HIGH_HIGH, SEC_HALF);						//半区画分加速しながら走行。走行後は停止しない
 8005aea:	235b      	movs	r3, #91	; 0x5b
 8005aec:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005af0:	2114      	movs	r1, #20
 8005af2:	f242 7010 	movw	r0, #10000	; 0x2710
 8005af6:	f7ff fa69 	bl	8004fcc <driveA>
	}
	if(!MF.FLAG.SCND)get_wall_info();										//壁情報を取得，片壁制御の有効・無効の判断
 8005afa:	4b06      	ldr	r3, [pc, #24]	; (8005b14 <half_sectionA+0x90>)
 8005afc:	881b      	ldrh	r3, [r3, #0]
 8005afe:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8005b02:	b2db      	uxtb	r3, r3
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d101      	bne.n	8005b0c <half_sectionA+0x88>
 8005b08:	f00a fe7e 	bl	8010808 <get_wall_info>
}
 8005b0c:	bf00      	nop
 8005b0e:	bd80      	pop	{r7, pc}
 8005b10:	20000456 	.word	0x20000456
 8005b14:	20000f68 	.word	0x20000f68

08005b18 <half_sectionD>:
//half_sectionD
// 半区画分減速しながら走行し停止する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void half_sectionD(void){
 8005b18:	b580      	push	{r7, lr}
 8005b1a:	af00      	add	r7, sp, #0
	full_led_write(BLUE);
 8005b1c:	2003      	movs	r0, #3
 8005b1e:	f00a fee7 	bl	80108f0 <full_led_write>

	control_start();
 8005b22:	f7ff f931 	bl	8004d88 <control_start>
	if(run_mode == LOW){
 8005b26:	4b1a      	ldr	r3, [pc, #104]	; (8005b90 <half_sectionD+0x78>)
 8005b28:	781b      	ldrb	r3, [r3, #0]
 8005b2a:	b2db      	uxtb	r3, r3
 8005b2c:	2b01      	cmp	r3, #1
 8005b2e:	d107      	bne.n	8005b40 <half_sectionD+0x28>
		driveD(-4000, SPEED_MIN, SPEED_LOW, SEC_HALF);						//半区画分指定減速度で減速走行。走行後は停止する
 8005b30:	235b      	movs	r3, #91	; 0x5b
 8005b32:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8005b36:	2114      	movs	r1, #20
 8005b38:	4816      	ldr	r0, [pc, #88]	; (8005b94 <half_sectionD+0x7c>)
 8005b3a:	f7ff fac1 	bl	80050c0 <driveD>
	}else if(run_mode == HIGH){
		driveD(-4000, SPEED_MIN, SPEED_HIGH, SEC_HALF);						//半区画分指定減速度で減速走行。走行後は停止する
	}else if(run_mode == HIGH_HIGH){
		driveD(-6000, SPEED_MIN, SPEED_HIGH_HIGH, SEC_HALF);				//半区画分指定減速度で減速走行。走行後は停止する
	}
}
 8005b3e:	e025      	b.n	8005b8c <half_sectionD+0x74>
	}else if(run_mode == MIDDLE){
 8005b40:	4b13      	ldr	r3, [pc, #76]	; (8005b90 <half_sectionD+0x78>)
 8005b42:	781b      	ldrb	r3, [r3, #0]
 8005b44:	b2db      	uxtb	r3, r3
 8005b46:	2b02      	cmp	r3, #2
 8005b48:	d107      	bne.n	8005b5a <half_sectionD+0x42>
		driveD(-4000, SPEED_MIN, SPEED_MIDDLE, SEC_HALF);					//半区画分指定減速度で減速走行。走行後は停止する
 8005b4a:	235b      	movs	r3, #91	; 0x5b
 8005b4c:	f44f 7216 	mov.w	r2, #600	; 0x258
 8005b50:	2114      	movs	r1, #20
 8005b52:	4810      	ldr	r0, [pc, #64]	; (8005b94 <half_sectionD+0x7c>)
 8005b54:	f7ff fab4 	bl	80050c0 <driveD>
}
 8005b58:	e018      	b.n	8005b8c <half_sectionD+0x74>
	}else if(run_mode == HIGH){
 8005b5a:	4b0d      	ldr	r3, [pc, #52]	; (8005b90 <half_sectionD+0x78>)
 8005b5c:	781b      	ldrb	r3, [r3, #0]
 8005b5e:	b2db      	uxtb	r3, r3
 8005b60:	2b03      	cmp	r3, #3
 8005b62:	d107      	bne.n	8005b74 <half_sectionD+0x5c>
		driveD(-4000, SPEED_MIN, SPEED_HIGH, SEC_HALF);						//半区画分指定減速度で減速走行。走行後は停止する
 8005b64:	235b      	movs	r3, #91	; 0x5b
 8005b66:	f44f 7248 	mov.w	r2, #800	; 0x320
 8005b6a:	2114      	movs	r1, #20
 8005b6c:	4809      	ldr	r0, [pc, #36]	; (8005b94 <half_sectionD+0x7c>)
 8005b6e:	f7ff faa7 	bl	80050c0 <driveD>
}
 8005b72:	e00b      	b.n	8005b8c <half_sectionD+0x74>
	}else if(run_mode == HIGH_HIGH){
 8005b74:	4b06      	ldr	r3, [pc, #24]	; (8005b90 <half_sectionD+0x78>)
 8005b76:	781b      	ldrb	r3, [r3, #0]
 8005b78:	b2db      	uxtb	r3, r3
 8005b7a:	2b04      	cmp	r3, #4
 8005b7c:	d106      	bne.n	8005b8c <half_sectionD+0x74>
		driveD(-6000, SPEED_MIN, SPEED_HIGH_HIGH, SEC_HALF);				//半区画分指定減速度で減速走行。走行後は停止する
 8005b7e:	235b      	movs	r3, #91	; 0x5b
 8005b80:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005b84:	2114      	movs	r1, #20
 8005b86:	4804      	ldr	r0, [pc, #16]	; (8005b98 <half_sectionD+0x80>)
 8005b88:	f7ff fa9a 	bl	80050c0 <driveD>
}
 8005b8c:	bf00      	nop
 8005b8e:	bd80      	pop	{r7, pc}
 8005b90:	20000456 	.word	0x20000456
 8005b94:	fffff060 	.word	0xfffff060
 8005b98:	ffffe890 	.word	0xffffe890

08005b9c <half_sectionVA>:
//half_sectionVA
// 半区画分加速しながら走行する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void half_sectionVA(void){
 8005b9c:	b580      	push	{r7, lr}
 8005b9e:	af00      	add	r7, sp, #0

	control_start();
 8005ba0:	f7ff f8f2 	bl	8004d88 <control_start>
	if(run_mode == LOW){
 8005ba4:	4b20      	ldr	r3, [pc, #128]	; (8005c28 <half_sectionVA+0x8c>)
 8005ba6:	781b      	ldrb	r3, [r3, #0]
 8005ba8:	b2db      	uxtb	r3, r3
 8005baa:	2b01      	cmp	r3, #1
 8005bac:	d108      	bne.n	8005bc0 <half_sectionVA+0x24>
		driveA(4000, SPEED_MIN, SPEED_LOW, SEC_HALF_V);						//半区画分加速しながら走行。走行後は停止しない
 8005bae:	2382      	movs	r3, #130	; 0x82
 8005bb0:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8005bb4:	2114      	movs	r1, #20
 8005bb6:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8005bba:	f7ff fa07 	bl	8004fcc <driveA>
 8005bbe:	e028      	b.n	8005c12 <half_sectionVA+0x76>
	}else if(run_mode == MIDDLE){
 8005bc0:	4b19      	ldr	r3, [pc, #100]	; (8005c28 <half_sectionVA+0x8c>)
 8005bc2:	781b      	ldrb	r3, [r3, #0]
 8005bc4:	b2db      	uxtb	r3, r3
 8005bc6:	2b02      	cmp	r3, #2
 8005bc8:	d108      	bne.n	8005bdc <half_sectionVA+0x40>
		driveA(6000, SPEED_MIN, SPEED_MIDDLE, SEC_HALF_V);					//半区画分加速しながら走行。走行後は停止しない
 8005bca:	2382      	movs	r3, #130	; 0x82
 8005bcc:	f44f 7216 	mov.w	r2, #600	; 0x258
 8005bd0:	2114      	movs	r1, #20
 8005bd2:	f241 7070 	movw	r0, #6000	; 0x1770
 8005bd6:	f7ff f9f9 	bl	8004fcc <driveA>
 8005bda:	e01a      	b.n	8005c12 <half_sectionVA+0x76>
	}else if(run_mode == HIGH){
 8005bdc:	4b12      	ldr	r3, [pc, #72]	; (8005c28 <half_sectionVA+0x8c>)
 8005bde:	781b      	ldrb	r3, [r3, #0]
 8005be0:	b2db      	uxtb	r3, r3
 8005be2:	2b03      	cmp	r3, #3
 8005be4:	d108      	bne.n	8005bf8 <half_sectionVA+0x5c>
		driveA(8000, SPEED_MIN, SPEED_HIGH, SEC_HALF_V);						//半区画分加速しながら走行。走行後は停止しない
 8005be6:	2382      	movs	r3, #130	; 0x82
 8005be8:	f44f 7248 	mov.w	r2, #800	; 0x320
 8005bec:	2114      	movs	r1, #20
 8005bee:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 8005bf2:	f7ff f9eb 	bl	8004fcc <driveA>
 8005bf6:	e00c      	b.n	8005c12 <half_sectionVA+0x76>
	}else if(run_mode == HIGH_HIGH){
 8005bf8:	4b0b      	ldr	r3, [pc, #44]	; (8005c28 <half_sectionVA+0x8c>)
 8005bfa:	781b      	ldrb	r3, [r3, #0]
 8005bfc:	b2db      	uxtb	r3, r3
 8005bfe:	2b04      	cmp	r3, #4
 8005c00:	d107      	bne.n	8005c12 <half_sectionVA+0x76>
		driveA(10000, SPEED_MIN, SPEED_HIGH_HIGH, SEC_HALF_V);						//半区画分加速しながら走行。走行後は停止しない
 8005c02:	2382      	movs	r3, #130	; 0x82
 8005c04:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005c08:	2114      	movs	r1, #20
 8005c0a:	f242 7010 	movw	r0, #10000	; 0x2710
 8005c0e:	f7ff f9dd 	bl	8004fcc <driveA>
	}
	if(!MF.FLAG.SCND)get_wall_info();										//壁情報を取得，片壁制御の有効・無効の判断
 8005c12:	4b06      	ldr	r3, [pc, #24]	; (8005c2c <half_sectionVA+0x90>)
 8005c14:	881b      	ldrh	r3, [r3, #0]
 8005c16:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8005c1a:	b2db      	uxtb	r3, r3
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d101      	bne.n	8005c24 <half_sectionVA+0x88>
 8005c20:	f00a fdf2 	bl	8010808 <get_wall_info>
}
 8005c24:	bf00      	nop
 8005c26:	bd80      	pop	{r7, pc}
 8005c28:	20000456 	.word	0x20000456
 8005c2c:	20000f68 	.word	0x20000f68

08005c30 <half_sectionVD>:
//half_sectionVD
// 半区画分減速しながら走行し停止する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void half_sectionVD(void){
 8005c30:	b580      	push	{r7, lr}
 8005c32:	af00      	add	r7, sp, #0
	full_led_write(BLUE);
 8005c34:	2003      	movs	r0, #3
 8005c36:	f00a fe5b 	bl	80108f0 <full_led_write>

	control_start();
 8005c3a:	f7ff f8a5 	bl	8004d88 <control_start>
	if(run_mode == LOW){
 8005c3e:	4b1a      	ldr	r3, [pc, #104]	; (8005ca8 <half_sectionVD+0x78>)
 8005c40:	781b      	ldrb	r3, [r3, #0]
 8005c42:	b2db      	uxtb	r3, r3
 8005c44:	2b01      	cmp	r3, #1
 8005c46:	d107      	bne.n	8005c58 <half_sectionVD+0x28>
		driveD(-4000, SPEED_MIN, SPEED_LOW, SEC_HALF_V);						//半区画分指定減速度で減速走行。走行後は停止する
 8005c48:	2382      	movs	r3, #130	; 0x82
 8005c4a:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8005c4e:	2114      	movs	r1, #20
 8005c50:	4816      	ldr	r0, [pc, #88]	; (8005cac <half_sectionVD+0x7c>)
 8005c52:	f7ff fa35 	bl	80050c0 <driveD>
	}else if(run_mode == HIGH){
		driveD(-4000, SPEED_MIN, SPEED_HIGH, SEC_HALF_V);						//半区画分指定減速度で減速走行。走行後は停止する
	}else if(run_mode == HIGH_HIGH){
		driveD(-6000, SPEED_MIN, SPEED_HIGH_HIGH, SEC_HALF_V);						//半区画分指定減速度で減速走行。走行後は停止する
	}
}
 8005c56:	e025      	b.n	8005ca4 <half_sectionVD+0x74>
	}else if(run_mode == MIDDLE){
 8005c58:	4b13      	ldr	r3, [pc, #76]	; (8005ca8 <half_sectionVD+0x78>)
 8005c5a:	781b      	ldrb	r3, [r3, #0]
 8005c5c:	b2db      	uxtb	r3, r3
 8005c5e:	2b02      	cmp	r3, #2
 8005c60:	d107      	bne.n	8005c72 <half_sectionVD+0x42>
		driveD(-4000, SPEED_MIN, SPEED_MIDDLE, SEC_HALF_V);					//半区画分指定減速度で減速走行。走行後は停止する
 8005c62:	2382      	movs	r3, #130	; 0x82
 8005c64:	f44f 7216 	mov.w	r2, #600	; 0x258
 8005c68:	2114      	movs	r1, #20
 8005c6a:	4810      	ldr	r0, [pc, #64]	; (8005cac <half_sectionVD+0x7c>)
 8005c6c:	f7ff fa28 	bl	80050c0 <driveD>
}
 8005c70:	e018      	b.n	8005ca4 <half_sectionVD+0x74>
	}else if(run_mode == HIGH){
 8005c72:	4b0d      	ldr	r3, [pc, #52]	; (8005ca8 <half_sectionVD+0x78>)
 8005c74:	781b      	ldrb	r3, [r3, #0]
 8005c76:	b2db      	uxtb	r3, r3
 8005c78:	2b03      	cmp	r3, #3
 8005c7a:	d107      	bne.n	8005c8c <half_sectionVD+0x5c>
		driveD(-4000, SPEED_MIN, SPEED_HIGH, SEC_HALF_V);						//半区画分指定減速度で減速走行。走行後は停止する
 8005c7c:	2382      	movs	r3, #130	; 0x82
 8005c7e:	f44f 7248 	mov.w	r2, #800	; 0x320
 8005c82:	2114      	movs	r1, #20
 8005c84:	4809      	ldr	r0, [pc, #36]	; (8005cac <half_sectionVD+0x7c>)
 8005c86:	f7ff fa1b 	bl	80050c0 <driveD>
}
 8005c8a:	e00b      	b.n	8005ca4 <half_sectionVD+0x74>
	}else if(run_mode == HIGH_HIGH){
 8005c8c:	4b06      	ldr	r3, [pc, #24]	; (8005ca8 <half_sectionVD+0x78>)
 8005c8e:	781b      	ldrb	r3, [r3, #0]
 8005c90:	b2db      	uxtb	r3, r3
 8005c92:	2b04      	cmp	r3, #4
 8005c94:	d106      	bne.n	8005ca4 <half_sectionVD+0x74>
		driveD(-6000, SPEED_MIN, SPEED_HIGH_HIGH, SEC_HALF_V);						//半区画分指定減速度で減速走行。走行後は停止する
 8005c96:	2382      	movs	r3, #130	; 0x82
 8005c98:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005c9c:	2114      	movs	r1, #20
 8005c9e:	4804      	ldr	r0, [pc, #16]	; (8005cb0 <half_sectionVD+0x80>)
 8005ca0:	f7ff fa0e 	bl	80050c0 <driveD>
}
 8005ca4:	bf00      	nop
 8005ca6:	bd80      	pop	{r7, pc}
 8005ca8:	20000456 	.word	0x20000456
 8005cac:	fffff060 	.word	0xfffff060
 8005cb0:	ffffe890 	.word	0xffffe890

08005cb4 <half_sectionU>:
//half_sectionU
// 等速で半区画分進む
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void half_sectionU(void){
 8005cb4:	b580      	push	{r7, lr}
 8005cb6:	af00      	add	r7, sp, #0
	full_led_write(WHITE);
 8005cb8:	2007      	movs	r0, #7
 8005cba:	f00a fe19 	bl	80108f0 <full_led_write>
	control_start();
 8005cbe:	f7ff f863 	bl	8004d88 <control_start>
	driveU(SEC_HALF);													//半区画分等速走行。走行後は停止しない
 8005cc2:	205b      	movs	r0, #91	; 0x5b
 8005cc4:	f7ff fad6 	bl	8005274 <driveU>
}
 8005cc8:	bf00      	nop
 8005cca:	bd80      	pop	{r7, pc}

08005ccc <half_sectionV>:
//half_sectionV
// 等速で斜め半区画分進む
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void half_sectionV(void){
 8005ccc:	b580      	push	{r7, lr}
 8005cce:	af00      	add	r7, sp, #0
	full_led_write(WHITE);
 8005cd0:	2007      	movs	r0, #7
 8005cd2:	f00a fe0d 	bl	80108f0 <full_led_write>
	control_start();
 8005cd6:	f7ff f857 	bl	8004d88 <control_start>
	driveU(SEC_HALF_V);													//半区画分等速走行。走行後は停止しない
 8005cda:	2082      	movs	r0, #130	; 0x82
 8005cdc:	f7ff faca 	bl	8005274 <driveU>
}
 8005ce0:	bf00      	nop
 8005ce2:	bd80      	pop	{r7, pc}

08005ce4 <one_section>:
//one_section
// 1区画分進んで停止する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void one_section(void){
 8005ce4:	b580      	push	{r7, lr}
 8005ce6:	af00      	add	r7, sp, #0

	half_sectionA();													//半区画分加速走行
 8005ce8:	f7ff fecc 	bl	8005a84 <half_sectionA>
	half_sectionD();													//半区画分減速走行のち停止
 8005cec:	f7ff ff14 	bl	8005b18 <half_sectionD>
}
 8005cf0:	bf00      	nop
 8005cf2:	bd80      	pop	{r7, pc}

08005cf4 <one_sectionA>:
//one_sectionA
// 1区画分加速する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void one_sectionA(void){
 8005cf4:	b580      	push	{r7, lr}
 8005cf6:	af00      	add	r7, sp, #0
	full_led_write(BLUEGREEN);
 8005cf8:	2004      	movs	r0, #4
 8005cfa:	f00a fdf9 	bl	80108f0 <full_led_write>
	control_start();
 8005cfe:	f7ff f843 	bl	8004d88 <control_start>
	if(run_mode == LOW){
 8005d02:	4b2b      	ldr	r3, [pc, #172]	; (8005db0 <one_sectionA+0xbc>)
 8005d04:	781b      	ldrb	r3, [r3, #0]
 8005d06:	b2db      	uxtb	r3, r3
 8005d08:	2b01      	cmp	r3, #1
 8005d0a:	d10d      	bne.n	8005d28 <one_sectionA+0x34>
		driveA(accel_hs, SPEED_LOW, speed_max_hs, SEC_HALF*2);				//1区画分加速走行。走行後は停止しない
 8005d0c:	4b29      	ldr	r3, [pc, #164]	; (8005db4 <one_sectionA+0xc0>)
 8005d0e:	881b      	ldrh	r3, [r3, #0]
 8005d10:	b21b      	sxth	r3, r3
 8005d12:	b298      	uxth	r0, r3
 8005d14:	4b28      	ldr	r3, [pc, #160]	; (8005db8 <one_sectionA+0xc4>)
 8005d16:	881b      	ldrh	r3, [r3, #0]
 8005d18:	b21b      	sxth	r3, r3
 8005d1a:	b29a      	uxth	r2, r3
 8005d1c:	23b6      	movs	r3, #182	; 0xb6
 8005d1e:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8005d22:	f7ff f953 	bl	8004fcc <driveA>
 8005d26:	e037      	b.n	8005d98 <one_sectionA+0xa4>
	}else if(run_mode == MIDDLE){
 8005d28:	4b21      	ldr	r3, [pc, #132]	; (8005db0 <one_sectionA+0xbc>)
 8005d2a:	781b      	ldrb	r3, [r3, #0]
 8005d2c:	b2db      	uxtb	r3, r3
 8005d2e:	2b02      	cmp	r3, #2
 8005d30:	d10d      	bne.n	8005d4e <one_sectionA+0x5a>
		driveA(accel_hs, SPEED_MIDDLE, speed_max_hs, SEC_HALF*2);			//1区画分加速走行。走行後は停止しない
 8005d32:	4b20      	ldr	r3, [pc, #128]	; (8005db4 <one_sectionA+0xc0>)
 8005d34:	881b      	ldrh	r3, [r3, #0]
 8005d36:	b21b      	sxth	r3, r3
 8005d38:	b298      	uxth	r0, r3
 8005d3a:	4b1f      	ldr	r3, [pc, #124]	; (8005db8 <one_sectionA+0xc4>)
 8005d3c:	881b      	ldrh	r3, [r3, #0]
 8005d3e:	b21b      	sxth	r3, r3
 8005d40:	b29a      	uxth	r2, r3
 8005d42:	23b6      	movs	r3, #182	; 0xb6
 8005d44:	f44f 7116 	mov.w	r1, #600	; 0x258
 8005d48:	f7ff f940 	bl	8004fcc <driveA>
 8005d4c:	e024      	b.n	8005d98 <one_sectionA+0xa4>
	}else if(run_mode == HIGH){
 8005d4e:	4b18      	ldr	r3, [pc, #96]	; (8005db0 <one_sectionA+0xbc>)
 8005d50:	781b      	ldrb	r3, [r3, #0]
 8005d52:	b2db      	uxtb	r3, r3
 8005d54:	2b03      	cmp	r3, #3
 8005d56:	d10d      	bne.n	8005d74 <one_sectionA+0x80>
		driveA(accel_hs, SPEED_HIGH, speed_max_hs, SEC_HALF*2);				//1区画分加速走行。走行後は停止しない
 8005d58:	4b16      	ldr	r3, [pc, #88]	; (8005db4 <one_sectionA+0xc0>)
 8005d5a:	881b      	ldrh	r3, [r3, #0]
 8005d5c:	b21b      	sxth	r3, r3
 8005d5e:	b298      	uxth	r0, r3
 8005d60:	4b15      	ldr	r3, [pc, #84]	; (8005db8 <one_sectionA+0xc4>)
 8005d62:	881b      	ldrh	r3, [r3, #0]
 8005d64:	b21b      	sxth	r3, r3
 8005d66:	b29a      	uxth	r2, r3
 8005d68:	23b6      	movs	r3, #182	; 0xb6
 8005d6a:	f44f 7148 	mov.w	r1, #800	; 0x320
 8005d6e:	f7ff f92d 	bl	8004fcc <driveA>
 8005d72:	e011      	b.n	8005d98 <one_sectionA+0xa4>
	}else if(run_mode == HIGH_HIGH){
 8005d74:	4b0e      	ldr	r3, [pc, #56]	; (8005db0 <one_sectionA+0xbc>)
 8005d76:	781b      	ldrb	r3, [r3, #0]
 8005d78:	b2db      	uxtb	r3, r3
 8005d7a:	2b04      	cmp	r3, #4
 8005d7c:	d10c      	bne.n	8005d98 <one_sectionA+0xa4>
		driveA(accel_hs, SPEED_HIGH_HIGH, speed_max_hs, SEC_HALF*2);				//1区画分加速走行。走行後は停止しない
 8005d7e:	4b0d      	ldr	r3, [pc, #52]	; (8005db4 <one_sectionA+0xc0>)
 8005d80:	881b      	ldrh	r3, [r3, #0]
 8005d82:	b21b      	sxth	r3, r3
 8005d84:	b298      	uxth	r0, r3
 8005d86:	4b0c      	ldr	r3, [pc, #48]	; (8005db8 <one_sectionA+0xc4>)
 8005d88:	881b      	ldrh	r3, [r3, #0]
 8005d8a:	b21b      	sxth	r3, r3
 8005d8c:	b29a      	uxth	r2, r3
 8005d8e:	23b6      	movs	r3, #182	; 0xb6
 8005d90:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8005d94:	f7ff f91a 	bl	8004fcc <driveA>
	}
	if(!MF.FLAG.SCND)get_wall_info();								//壁情報を取得，片壁制御の有効・無効の判断
 8005d98:	4b08      	ldr	r3, [pc, #32]	; (8005dbc <one_sectionA+0xc8>)
 8005d9a:	881b      	ldrh	r3, [r3, #0]
 8005d9c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8005da0:	b2db      	uxtb	r3, r3
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d101      	bne.n	8005daa <one_sectionA+0xb6>
 8005da6:	f00a fd2f 	bl	8010808 <get_wall_info>
}
 8005daa:	bf00      	nop
 8005dac:	bd80      	pop	{r7, pc}
 8005dae:	bf00      	nop
 8005db0:	20000456 	.word	0x20000456
 8005db4:	20000454 	.word	0x20000454
 8005db8:	20000f7c 	.word	0x20000f7c
 8005dbc:	20000f68 	.word	0x20000f68

08005dc0 <one_sectionD>:
//one_sectionD
// 1区画分減速する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void one_sectionD(void){
 8005dc0:	b580      	push	{r7, lr}
 8005dc2:	af00      	add	r7, sp, #0
	full_led_write(BLUE);
 8005dc4:	2003      	movs	r0, #3
 8005dc6:	f00a fd93 	bl	80108f0 <full_led_write>
	control_start();
 8005dca:	f7fe ffdd 	bl	8004d88 <control_start>
	if(run_mode == LOW){
 8005dce:	4b31      	ldr	r3, [pc, #196]	; (8005e94 <one_sectionD+0xd4>)
 8005dd0:	781b      	ldrb	r3, [r3, #0]
 8005dd2:	b2db      	uxtb	r3, r3
 8005dd4:	2b01      	cmp	r3, #1
 8005dd6:	d110      	bne.n	8005dfa <one_sectionD+0x3a>
		driveD(-accel_hs, SPEED_LOW, speed_max_hs, SEC_HALF*2);				//1区画分減速走行。走行後は停止しない
 8005dd8:	4b2f      	ldr	r3, [pc, #188]	; (8005e98 <one_sectionD+0xd8>)
 8005dda:	881b      	ldrh	r3, [r3, #0]
 8005ddc:	b21b      	sxth	r3, r3
 8005dde:	b29b      	uxth	r3, r3
 8005de0:	425b      	negs	r3, r3
 8005de2:	b29b      	uxth	r3, r3
 8005de4:	b218      	sxth	r0, r3
 8005de6:	4b2d      	ldr	r3, [pc, #180]	; (8005e9c <one_sectionD+0xdc>)
 8005de8:	881b      	ldrh	r3, [r3, #0]
 8005dea:	b21b      	sxth	r3, r3
 8005dec:	b29a      	uxth	r2, r3
 8005dee:	23b6      	movs	r3, #182	; 0xb6
 8005df0:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8005df4:	f7ff f964 	bl	80050c0 <driveD>
 8005df8:	e040      	b.n	8005e7c <one_sectionD+0xbc>
	}else if(run_mode == MIDDLE){
 8005dfa:	4b26      	ldr	r3, [pc, #152]	; (8005e94 <one_sectionD+0xd4>)
 8005dfc:	781b      	ldrb	r3, [r3, #0]
 8005dfe:	b2db      	uxtb	r3, r3
 8005e00:	2b02      	cmp	r3, #2
 8005e02:	d110      	bne.n	8005e26 <one_sectionD+0x66>
		driveD(-accel_hs, SPEED_MIDDLE, speed_max_hs, SEC_HALF*2);			//1区画分減速走行。走行後は停止しない
 8005e04:	4b24      	ldr	r3, [pc, #144]	; (8005e98 <one_sectionD+0xd8>)
 8005e06:	881b      	ldrh	r3, [r3, #0]
 8005e08:	b21b      	sxth	r3, r3
 8005e0a:	b29b      	uxth	r3, r3
 8005e0c:	425b      	negs	r3, r3
 8005e0e:	b29b      	uxth	r3, r3
 8005e10:	b218      	sxth	r0, r3
 8005e12:	4b22      	ldr	r3, [pc, #136]	; (8005e9c <one_sectionD+0xdc>)
 8005e14:	881b      	ldrh	r3, [r3, #0]
 8005e16:	b21b      	sxth	r3, r3
 8005e18:	b29a      	uxth	r2, r3
 8005e1a:	23b6      	movs	r3, #182	; 0xb6
 8005e1c:	f44f 7116 	mov.w	r1, #600	; 0x258
 8005e20:	f7ff f94e 	bl	80050c0 <driveD>
 8005e24:	e02a      	b.n	8005e7c <one_sectionD+0xbc>
	}else if(run_mode == HIGH){
 8005e26:	4b1b      	ldr	r3, [pc, #108]	; (8005e94 <one_sectionD+0xd4>)
 8005e28:	781b      	ldrb	r3, [r3, #0]
 8005e2a:	b2db      	uxtb	r3, r3
 8005e2c:	2b03      	cmp	r3, #3
 8005e2e:	d110      	bne.n	8005e52 <one_sectionD+0x92>
		driveD(-accel_hs, SPEED_HIGH, speed_max_hs, SEC_HALF*2);			//1区画分減速走行。走行後は停止しない
 8005e30:	4b19      	ldr	r3, [pc, #100]	; (8005e98 <one_sectionD+0xd8>)
 8005e32:	881b      	ldrh	r3, [r3, #0]
 8005e34:	b21b      	sxth	r3, r3
 8005e36:	b29b      	uxth	r3, r3
 8005e38:	425b      	negs	r3, r3
 8005e3a:	b29b      	uxth	r3, r3
 8005e3c:	b218      	sxth	r0, r3
 8005e3e:	4b17      	ldr	r3, [pc, #92]	; (8005e9c <one_sectionD+0xdc>)
 8005e40:	881b      	ldrh	r3, [r3, #0]
 8005e42:	b21b      	sxth	r3, r3
 8005e44:	b29a      	uxth	r2, r3
 8005e46:	23b6      	movs	r3, #182	; 0xb6
 8005e48:	f44f 7148 	mov.w	r1, #800	; 0x320
 8005e4c:	f7ff f938 	bl	80050c0 <driveD>
 8005e50:	e014      	b.n	8005e7c <one_sectionD+0xbc>
	}else if(run_mode == HIGH_HIGH){
 8005e52:	4b10      	ldr	r3, [pc, #64]	; (8005e94 <one_sectionD+0xd4>)
 8005e54:	781b      	ldrb	r3, [r3, #0]
 8005e56:	b2db      	uxtb	r3, r3
 8005e58:	2b04      	cmp	r3, #4
 8005e5a:	d10f      	bne.n	8005e7c <one_sectionD+0xbc>
		driveD(-accel_hs, SPEED_HIGH_HIGH, speed_max_hs, SEC_HALF*2);			//1区画分減速走行。走行後は停止しない
 8005e5c:	4b0e      	ldr	r3, [pc, #56]	; (8005e98 <one_sectionD+0xd8>)
 8005e5e:	881b      	ldrh	r3, [r3, #0]
 8005e60:	b21b      	sxth	r3, r3
 8005e62:	b29b      	uxth	r3, r3
 8005e64:	425b      	negs	r3, r3
 8005e66:	b29b      	uxth	r3, r3
 8005e68:	b218      	sxth	r0, r3
 8005e6a:	4b0c      	ldr	r3, [pc, #48]	; (8005e9c <one_sectionD+0xdc>)
 8005e6c:	881b      	ldrh	r3, [r3, #0]
 8005e6e:	b21b      	sxth	r3, r3
 8005e70:	b29a      	uxth	r2, r3
 8005e72:	23b6      	movs	r3, #182	; 0xb6
 8005e74:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8005e78:	f7ff f922 	bl	80050c0 <driveD>
	}
	if(!MF.FLAG.SCND)get_wall_info();								//壁情報を取得，片壁制御の有効・無効の判断
 8005e7c:	4b08      	ldr	r3, [pc, #32]	; (8005ea0 <one_sectionD+0xe0>)
 8005e7e:	881b      	ldrh	r3, [r3, #0]
 8005e80:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8005e84:	b2db      	uxtb	r3, r3
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d101      	bne.n	8005e8e <one_sectionD+0xce>
 8005e8a:	f00a fcbd 	bl	8010808 <get_wall_info>
}
 8005e8e:	bf00      	nop
 8005e90:	bd80      	pop	{r7, pc}
 8005e92:	bf00      	nop
 8005e94:	20000456 	.word	0x20000456
 8005e98:	20000454 	.word	0x20000454
 8005e9c:	20000f7c 	.word	0x20000f7c
 8005ea0:	20000f68 	.word	0x20000f68

08005ea4 <one_sectionVA>:
//one_sectionVA
// 等速で斜め半区画分進む
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void one_sectionVA(void){
 8005ea4:	b580      	push	{r7, lr}
 8005ea6:	af00      	add	r7, sp, #0
	full_led_write(BLUEGREEN);
 8005ea8:	2004      	movs	r0, #4
 8005eaa:	f00a fd21 	bl	80108f0 <full_led_write>
	control_start();
 8005eae:	f7fe ff6b 	bl	8004d88 <control_start>
	if(run_mode == LOW){
 8005eb2:	4b28      	ldr	r3, [pc, #160]	; (8005f54 <one_sectionVA+0xb0>)
 8005eb4:	781b      	ldrb	r3, [r3, #0]
 8005eb6:	b2db      	uxtb	r3, r3
 8005eb8:	2b01      	cmp	r3, #1
 8005eba:	d10e      	bne.n	8005eda <one_sectionVA+0x36>
		driveA(accel_hs, SPEED_LOW, speed_max_hs, SEC_HALF_V*2);				//1区画分加速走行。走行後は停止しない
 8005ebc:	4b26      	ldr	r3, [pc, #152]	; (8005f58 <one_sectionVA+0xb4>)
 8005ebe:	881b      	ldrh	r3, [r3, #0]
 8005ec0:	b21b      	sxth	r3, r3
 8005ec2:	b298      	uxth	r0, r3
 8005ec4:	4b25      	ldr	r3, [pc, #148]	; (8005f5c <one_sectionVA+0xb8>)
 8005ec6:	881b      	ldrh	r3, [r3, #0]
 8005ec8:	b21b      	sxth	r3, r3
 8005eca:	b29a      	uxth	r2, r3
 8005ecc:	f44f 7382 	mov.w	r3, #260	; 0x104
 8005ed0:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8005ed4:	f7ff f87a 	bl	8004fcc <driveA>
	}else if(run_mode == HIGH){
		driveA(accel_hs, SPEED_HIGH, speed_max_hs, SEC_HALF_V*2);				//1区画分加速走行。走行後は停止しない
	}else if(run_mode == HIGH_HIGH){
		driveA(accel_hs, SPEED_HIGH_HIGH, speed_max_hs, SEC_HALF_V*2);				//1区画分加速走行。走行後は停止しない
	}
}
 8005ed8:	e03a      	b.n	8005f50 <one_sectionVA+0xac>
	}else if(run_mode == MIDDLE){
 8005eda:	4b1e      	ldr	r3, [pc, #120]	; (8005f54 <one_sectionVA+0xb0>)
 8005edc:	781b      	ldrb	r3, [r3, #0]
 8005ede:	b2db      	uxtb	r3, r3
 8005ee0:	2b02      	cmp	r3, #2
 8005ee2:	d10e      	bne.n	8005f02 <one_sectionVA+0x5e>
		driveA(accel_hs, SPEED_MIDDLE, speed_max_hs, SEC_HALF_V*2);				//1区画分加速走行。走行後は停止しない
 8005ee4:	4b1c      	ldr	r3, [pc, #112]	; (8005f58 <one_sectionVA+0xb4>)
 8005ee6:	881b      	ldrh	r3, [r3, #0]
 8005ee8:	b21b      	sxth	r3, r3
 8005eea:	b298      	uxth	r0, r3
 8005eec:	4b1b      	ldr	r3, [pc, #108]	; (8005f5c <one_sectionVA+0xb8>)
 8005eee:	881b      	ldrh	r3, [r3, #0]
 8005ef0:	b21b      	sxth	r3, r3
 8005ef2:	b29a      	uxth	r2, r3
 8005ef4:	f44f 7382 	mov.w	r3, #260	; 0x104
 8005ef8:	f44f 7116 	mov.w	r1, #600	; 0x258
 8005efc:	f7ff f866 	bl	8004fcc <driveA>
}
 8005f00:	e026      	b.n	8005f50 <one_sectionVA+0xac>
	}else if(run_mode == HIGH){
 8005f02:	4b14      	ldr	r3, [pc, #80]	; (8005f54 <one_sectionVA+0xb0>)
 8005f04:	781b      	ldrb	r3, [r3, #0]
 8005f06:	b2db      	uxtb	r3, r3
 8005f08:	2b03      	cmp	r3, #3
 8005f0a:	d10e      	bne.n	8005f2a <one_sectionVA+0x86>
		driveA(accel_hs, SPEED_HIGH, speed_max_hs, SEC_HALF_V*2);				//1区画分加速走行。走行後は停止しない
 8005f0c:	4b12      	ldr	r3, [pc, #72]	; (8005f58 <one_sectionVA+0xb4>)
 8005f0e:	881b      	ldrh	r3, [r3, #0]
 8005f10:	b21b      	sxth	r3, r3
 8005f12:	b298      	uxth	r0, r3
 8005f14:	4b11      	ldr	r3, [pc, #68]	; (8005f5c <one_sectionVA+0xb8>)
 8005f16:	881b      	ldrh	r3, [r3, #0]
 8005f18:	b21b      	sxth	r3, r3
 8005f1a:	b29a      	uxth	r2, r3
 8005f1c:	f44f 7382 	mov.w	r3, #260	; 0x104
 8005f20:	f44f 7148 	mov.w	r1, #800	; 0x320
 8005f24:	f7ff f852 	bl	8004fcc <driveA>
}
 8005f28:	e012      	b.n	8005f50 <one_sectionVA+0xac>
	}else if(run_mode == HIGH_HIGH){
 8005f2a:	4b0a      	ldr	r3, [pc, #40]	; (8005f54 <one_sectionVA+0xb0>)
 8005f2c:	781b      	ldrb	r3, [r3, #0]
 8005f2e:	b2db      	uxtb	r3, r3
 8005f30:	2b04      	cmp	r3, #4
 8005f32:	d10d      	bne.n	8005f50 <one_sectionVA+0xac>
		driveA(accel_hs, SPEED_HIGH_HIGH, speed_max_hs, SEC_HALF_V*2);				//1区画分加速走行。走行後は停止しない
 8005f34:	4b08      	ldr	r3, [pc, #32]	; (8005f58 <one_sectionVA+0xb4>)
 8005f36:	881b      	ldrh	r3, [r3, #0]
 8005f38:	b21b      	sxth	r3, r3
 8005f3a:	b298      	uxth	r0, r3
 8005f3c:	4b07      	ldr	r3, [pc, #28]	; (8005f5c <one_sectionVA+0xb8>)
 8005f3e:	881b      	ldrh	r3, [r3, #0]
 8005f40:	b21b      	sxth	r3, r3
 8005f42:	b29a      	uxth	r2, r3
 8005f44:	f44f 7382 	mov.w	r3, #260	; 0x104
 8005f48:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8005f4c:	f7ff f83e 	bl	8004fcc <driveA>
}
 8005f50:	bf00      	nop
 8005f52:	bd80      	pop	{r7, pc}
 8005f54:	20000456 	.word	0x20000456
 8005f58:	20000454 	.word	0x20000454
 8005f5c:	20000f7c 	.word	0x20000f7c

08005f60 <one_sectionVD>:
//one_sectionVD
// 等速で斜め半区画分進む
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void one_sectionVD(void){
 8005f60:	b580      	push	{r7, lr}
 8005f62:	af00      	add	r7, sp, #0
	full_led_write(BLUE);
 8005f64:	2003      	movs	r0, #3
 8005f66:	f00a fcc3 	bl	80108f0 <full_led_write>
	control_start();
 8005f6a:	f7fe ff0d 	bl	8004d88 <control_start>
	if(run_mode == LOW){
 8005f6e:	4b2e      	ldr	r3, [pc, #184]	; (8006028 <one_sectionVD+0xc8>)
 8005f70:	781b      	ldrb	r3, [r3, #0]
 8005f72:	b2db      	uxtb	r3, r3
 8005f74:	2b01      	cmp	r3, #1
 8005f76:	d111      	bne.n	8005f9c <one_sectionVD+0x3c>
		driveD(-accel_hs, SPEED_LOW, speed_max_hs, SEC_HALF_V*2);				//1区画分減速走行。走行後は停止しない
 8005f78:	4b2c      	ldr	r3, [pc, #176]	; (800602c <one_sectionVD+0xcc>)
 8005f7a:	881b      	ldrh	r3, [r3, #0]
 8005f7c:	b21b      	sxth	r3, r3
 8005f7e:	b29b      	uxth	r3, r3
 8005f80:	425b      	negs	r3, r3
 8005f82:	b29b      	uxth	r3, r3
 8005f84:	b218      	sxth	r0, r3
 8005f86:	4b2a      	ldr	r3, [pc, #168]	; (8006030 <one_sectionVD+0xd0>)
 8005f88:	881b      	ldrh	r3, [r3, #0]
 8005f8a:	b21b      	sxth	r3, r3
 8005f8c:	b29a      	uxth	r2, r3
 8005f8e:	f44f 7382 	mov.w	r3, #260	; 0x104
 8005f92:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8005f96:	f7ff f893 	bl	80050c0 <driveD>
	}else if(run_mode == HIGH){
		driveD(-accel_hs, SPEED_HIGH, speed_max_hs, SEC_HALF_V*2);				//1区画分減速走行。走行後は停止しない
	}else if(run_mode == HIGH_HIGH){
		driveD(-accel_hs, SPEED_HIGH_HIGH, speed_max_hs, SEC_HALF_V*2);				//1区画分減速走行。走行後は停止しない
	}
}
 8005f9a:	e043      	b.n	8006024 <one_sectionVD+0xc4>
	}else if(run_mode == MIDDLE){
 8005f9c:	4b22      	ldr	r3, [pc, #136]	; (8006028 <one_sectionVD+0xc8>)
 8005f9e:	781b      	ldrb	r3, [r3, #0]
 8005fa0:	b2db      	uxtb	r3, r3
 8005fa2:	2b02      	cmp	r3, #2
 8005fa4:	d111      	bne.n	8005fca <one_sectionVD+0x6a>
		driveD(-accel_hs, SPEED_MIDDLE, speed_max_hs, SEC_HALF_V*2);			//1区画分減速走行。走行後は停止しない
 8005fa6:	4b21      	ldr	r3, [pc, #132]	; (800602c <one_sectionVD+0xcc>)
 8005fa8:	881b      	ldrh	r3, [r3, #0]
 8005faa:	b21b      	sxth	r3, r3
 8005fac:	b29b      	uxth	r3, r3
 8005fae:	425b      	negs	r3, r3
 8005fb0:	b29b      	uxth	r3, r3
 8005fb2:	b218      	sxth	r0, r3
 8005fb4:	4b1e      	ldr	r3, [pc, #120]	; (8006030 <one_sectionVD+0xd0>)
 8005fb6:	881b      	ldrh	r3, [r3, #0]
 8005fb8:	b21b      	sxth	r3, r3
 8005fba:	b29a      	uxth	r2, r3
 8005fbc:	f44f 7382 	mov.w	r3, #260	; 0x104
 8005fc0:	f44f 7116 	mov.w	r1, #600	; 0x258
 8005fc4:	f7ff f87c 	bl	80050c0 <driveD>
}
 8005fc8:	e02c      	b.n	8006024 <one_sectionVD+0xc4>
	}else if(run_mode == HIGH){
 8005fca:	4b17      	ldr	r3, [pc, #92]	; (8006028 <one_sectionVD+0xc8>)
 8005fcc:	781b      	ldrb	r3, [r3, #0]
 8005fce:	b2db      	uxtb	r3, r3
 8005fd0:	2b03      	cmp	r3, #3
 8005fd2:	d111      	bne.n	8005ff8 <one_sectionVD+0x98>
		driveD(-accel_hs, SPEED_HIGH, speed_max_hs, SEC_HALF_V*2);				//1区画分減速走行。走行後は停止しない
 8005fd4:	4b15      	ldr	r3, [pc, #84]	; (800602c <one_sectionVD+0xcc>)
 8005fd6:	881b      	ldrh	r3, [r3, #0]
 8005fd8:	b21b      	sxth	r3, r3
 8005fda:	b29b      	uxth	r3, r3
 8005fdc:	425b      	negs	r3, r3
 8005fde:	b29b      	uxth	r3, r3
 8005fe0:	b218      	sxth	r0, r3
 8005fe2:	4b13      	ldr	r3, [pc, #76]	; (8006030 <one_sectionVD+0xd0>)
 8005fe4:	881b      	ldrh	r3, [r3, #0]
 8005fe6:	b21b      	sxth	r3, r3
 8005fe8:	b29a      	uxth	r2, r3
 8005fea:	f44f 7382 	mov.w	r3, #260	; 0x104
 8005fee:	f44f 7148 	mov.w	r1, #800	; 0x320
 8005ff2:	f7ff f865 	bl	80050c0 <driveD>
}
 8005ff6:	e015      	b.n	8006024 <one_sectionVD+0xc4>
	}else if(run_mode == HIGH_HIGH){
 8005ff8:	4b0b      	ldr	r3, [pc, #44]	; (8006028 <one_sectionVD+0xc8>)
 8005ffa:	781b      	ldrb	r3, [r3, #0]
 8005ffc:	b2db      	uxtb	r3, r3
 8005ffe:	2b04      	cmp	r3, #4
 8006000:	d110      	bne.n	8006024 <one_sectionVD+0xc4>
		driveD(-accel_hs, SPEED_HIGH_HIGH, speed_max_hs, SEC_HALF_V*2);				//1区画分減速走行。走行後は停止しない
 8006002:	4b0a      	ldr	r3, [pc, #40]	; (800602c <one_sectionVD+0xcc>)
 8006004:	881b      	ldrh	r3, [r3, #0]
 8006006:	b21b      	sxth	r3, r3
 8006008:	b29b      	uxth	r3, r3
 800600a:	425b      	negs	r3, r3
 800600c:	b29b      	uxth	r3, r3
 800600e:	b218      	sxth	r0, r3
 8006010:	4b07      	ldr	r3, [pc, #28]	; (8006030 <one_sectionVD+0xd0>)
 8006012:	881b      	ldrh	r3, [r3, #0]
 8006014:	b21b      	sxth	r3, r3
 8006016:	b29a      	uxth	r2, r3
 8006018:	f44f 7382 	mov.w	r3, #260	; 0x104
 800601c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8006020:	f7ff f84e 	bl	80050c0 <driveD>
}
 8006024:	bf00      	nop
 8006026:	bd80      	pop	{r7, pc}
 8006028:	20000456 	.word	0x20000456
 800602c:	20000454 	.word	0x20000454
 8006030:	20000f7c 	.word	0x20000f7c

08006034 <one_sectionU>:
//one_sectionU
// 等速で1区画分進む
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void one_sectionU(void){
 8006034:	b580      	push	{r7, lr}
 8006036:	af00      	add	r7, sp, #0
	full_led_write(WHITE);
 8006038:	2007      	movs	r0, #7
 800603a:	f00a fc59 	bl	80108f0 <full_led_write>
	control_start();
 800603e:	f7fe fea3 	bl	8004d88 <control_start>
	driveU(SEC_HALF*2);													//1区画分等速走行。走行後は停止しない
 8006042:	20b6      	movs	r0, #182	; 0xb6
 8006044:	f7ff f916 	bl	8005274 <driveU>
	if(!MF.FLAG.SCND)get_wall_info();								//壁情報を取得
 8006048:	4b05      	ldr	r3, [pc, #20]	; (8006060 <one_sectionU+0x2c>)
 800604a:	881b      	ldrh	r3, [r3, #0]
 800604c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8006050:	b2db      	uxtb	r3, r3
 8006052:	2b00      	cmp	r3, #0
 8006054:	d101      	bne.n	800605a <one_sectionU+0x26>
 8006056:	f00a fbd7 	bl	8010808 <get_wall_info>
}
 800605a:	bf00      	nop
 800605c:	bd80      	pop	{r7, pc}
 800605e:	bf00      	nop
 8006060:	20000f68 	.word	0x20000f68
 8006064:	00000000 	.word	0x00000000

08006068 <rotate_R90>:
//rotate_R90
// 右に90度回転する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void rotate_R90(void){
 8006068:	b598      	push	{r3, r4, r7, lr}
 800606a:	af00      	add	r7, sp, #0
	target_omega_z = 800;
 800606c:	4b56      	ldr	r3, [pc, #344]	; (80061c8 <rotate_R90+0x160>)
 800606e:	4a57      	ldr	r2, [pc, #348]	; (80061cc <rotate_R90+0x164>)
 8006070:	601a      	str	r2, [r3, #0]
	accel_l = 3000;
 8006072:	4b57      	ldr	r3, [pc, #348]	; (80061d0 <rotate_R90+0x168>)
 8006074:	4a57      	ldr	r2, [pc, #348]	; (80061d4 <rotate_R90+0x16c>)
 8006076:	601a      	str	r2, [r3, #0]
	accel_r = -3000;
 8006078:	4b57      	ldr	r3, [pc, #348]	; (80061d8 <rotate_R90+0x170>)
 800607a:	4a58      	ldr	r2, [pc, #352]	; (80061dc <rotate_R90+0x174>)
 800607c:	601a      	str	r2, [r3, #0]
	speed_max_l = target_omega_z/180*M_PI * TREAD/2;
 800607e:	4b52      	ldr	r3, [pc, #328]	; (80061c8 <rotate_R90+0x160>)
 8006080:	edd3 7a00 	vldr	s15, [r3]
 8006084:	ed9f 7a56 	vldr	s14, [pc, #344]	; 80061e0 <rotate_R90+0x178>
 8006088:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800608c:	ee16 0a90 	vmov	r0, s13
 8006090:	f7fa fa52 	bl	8000538 <__aeabi_f2d>
 8006094:	a34a      	add	r3, pc, #296	; (adr r3, 80061c0 <rotate_R90+0x158>)
 8006096:	e9d3 2300 	ldrd	r2, r3, [r3]
 800609a:	f7fa faa5 	bl	80005e8 <__aeabi_dmul>
 800609e:	4603      	mov	r3, r0
 80060a0:	460c      	mov	r4, r1
 80060a2:	4618      	mov	r0, r3
 80060a4:	4621      	mov	r1, r4
 80060a6:	f04f 0200 	mov.w	r2, #0
 80060aa:	4b4e      	ldr	r3, [pc, #312]	; (80061e4 <rotate_R90+0x17c>)
 80060ac:	f7fa fa9c 	bl	80005e8 <__aeabi_dmul>
 80060b0:	4603      	mov	r3, r0
 80060b2:	460c      	mov	r4, r1
 80060b4:	4618      	mov	r0, r3
 80060b6:	4621      	mov	r1, r4
 80060b8:	f04f 0200 	mov.w	r2, #0
 80060bc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80060c0:	f7fa fbbc 	bl	800083c <__aeabi_ddiv>
 80060c4:	4603      	mov	r3, r0
 80060c6:	460c      	mov	r4, r1
 80060c8:	4618      	mov	r0, r3
 80060ca:	4621      	mov	r1, r4
 80060cc:	f7fa fd64 	bl	8000b98 <__aeabi_d2f>
 80060d0:	4602      	mov	r2, r0
 80060d2:	4b45      	ldr	r3, [pc, #276]	; (80061e8 <rotate_R90+0x180>)
 80060d4:	601a      	str	r2, [r3, #0]
	speed_min_r = -1*target_omega_z/180*M_PI * TREAD/2;
 80060d6:	4b3c      	ldr	r3, [pc, #240]	; (80061c8 <rotate_R90+0x160>)
 80060d8:	edd3 7a00 	vldr	s15, [r3]
 80060dc:	eef1 7a67 	vneg.f32	s15, s15
 80060e0:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 80061e0 <rotate_R90+0x178>
 80060e4:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80060e8:	ee16 0a90 	vmov	r0, s13
 80060ec:	f7fa fa24 	bl	8000538 <__aeabi_f2d>
 80060f0:	a333      	add	r3, pc, #204	; (adr r3, 80061c0 <rotate_R90+0x158>)
 80060f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060f6:	f7fa fa77 	bl	80005e8 <__aeabi_dmul>
 80060fa:	4603      	mov	r3, r0
 80060fc:	460c      	mov	r4, r1
 80060fe:	4618      	mov	r0, r3
 8006100:	4621      	mov	r1, r4
 8006102:	f04f 0200 	mov.w	r2, #0
 8006106:	4b37      	ldr	r3, [pc, #220]	; (80061e4 <rotate_R90+0x17c>)
 8006108:	f7fa fa6e 	bl	80005e8 <__aeabi_dmul>
 800610c:	4603      	mov	r3, r0
 800610e:	460c      	mov	r4, r1
 8006110:	4618      	mov	r0, r3
 8006112:	4621      	mov	r1, r4
 8006114:	f04f 0200 	mov.w	r2, #0
 8006118:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800611c:	f7fa fb8e 	bl	800083c <__aeabi_ddiv>
 8006120:	4603      	mov	r3, r0
 8006122:	460c      	mov	r4, r1
 8006124:	4618      	mov	r0, r3
 8006126:	4621      	mov	r1, r4
 8006128:	f7fa fd36 	bl	8000b98 <__aeabi_d2f>
 800612c:	4602      	mov	r2, r0
 800612e:	4b2f      	ldr	r3, [pc, #188]	; (80061ec <rotate_R90+0x184>)
 8006130:	601a      	str	r2, [r3, #0]

	drive_start();											//走行開始
 8006132:	f7fe fdd1 	bl	8004cd8 <drive_start>
	control_stop();
 8006136:	f7fe fe3b 	bl	8004db0 <control_stop>
	while(degree_z > target_degree_z-80);
 800613a:	bf00      	nop
 800613c:	4b2c      	ldr	r3, [pc, #176]	; (80061f0 <rotate_R90+0x188>)
 800613e:	edd3 7a00 	vldr	s15, [r3]
 8006142:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 80061f4 <rotate_R90+0x18c>
 8006146:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800614a:	4b2b      	ldr	r3, [pc, #172]	; (80061f8 <rotate_R90+0x190>)
 800614c:	edd3 7a00 	vldr	s15, [r3]
 8006150:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006154:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006158:	d4f0      	bmi.n	800613c <rotate_R90+0xd4>

	accel_l = -10000;
 800615a:	4b1d      	ldr	r3, [pc, #116]	; (80061d0 <rotate_R90+0x168>)
 800615c:	4a27      	ldr	r2, [pc, #156]	; (80061fc <rotate_R90+0x194>)
 800615e:	601a      	str	r2, [r3, #0]
	accel_r = 10000;
 8006160:	4b1d      	ldr	r3, [pc, #116]	; (80061d8 <rotate_R90+0x170>)
 8006162:	4a27      	ldr	r2, [pc, #156]	; (8006200 <rotate_R90+0x198>)
 8006164:	601a      	str	r2, [r3, #0]
	speed_min_l = 100;
 8006166:	4b27      	ldr	r3, [pc, #156]	; (8006204 <rotate_R90+0x19c>)
 8006168:	4a27      	ldr	r2, [pc, #156]	; (8006208 <rotate_R90+0x1a0>)
 800616a:	601a      	str	r2, [r3, #0]
	speed_max_r = -100;
 800616c:	4b27      	ldr	r3, [pc, #156]	; (800620c <rotate_R90+0x1a4>)
 800616e:	4a28      	ldr	r2, [pc, #160]	; (8006210 <rotate_R90+0x1a8>)
 8006170:	601a      	str	r2, [r3, #0]

	while(degree_z > target_degree_z-90);
 8006172:	bf00      	nop
 8006174:	4b1e      	ldr	r3, [pc, #120]	; (80061f0 <rotate_R90+0x188>)
 8006176:	edd3 7a00 	vldr	s15, [r3]
 800617a:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8006214 <rotate_R90+0x1ac>
 800617e:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8006182:	4b1d      	ldr	r3, [pc, #116]	; (80061f8 <rotate_R90+0x190>)
 8006184:	edd3 7a00 	vldr	s15, [r3]
 8006188:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800618c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006190:	d4f0      	bmi.n	8006174 <rotate_R90+0x10c>

	if(!MF.FLAG.XDIR){
 8006192:	4b21      	ldr	r3, [pc, #132]	; (8006218 <rotate_R90+0x1b0>)
 8006194:	881b      	ldrh	r3, [r3, #0]
 8006196:	f3c3 3300 	ubfx	r3, r3, #12, #1
 800619a:	b2db      	uxtb	r3, r3
 800619c:	2b00      	cmp	r3, #0
 800619e:	d104      	bne.n	80061aa <rotate_R90+0x142>
		turn_dir(DIR_TURN_R90, 1);										//マイクロマウス内部位置情報でも左回転処理&目標角度左90度
 80061a0:	2101      	movs	r1, #1
 80061a2:	2001      	movs	r0, #1
 80061a4:	f008 fd1a 	bl	800ebdc <turn_dir>
 80061a8:	e003      	b.n	80061b2 <rotate_R90+0x14a>
	}else{
		turn_dir(DIR_TURN_R90_8, 3);									//マイクロマウス内部位置情報でも左回転処理&目標角度左90度
 80061aa:	2103      	movs	r1, #3
 80061ac:	2002      	movs	r0, #2
 80061ae:	f008 fd15 	bl	800ebdc <turn_dir>
	}
	drive_stop();
 80061b2:	f7fe fdc1 	bl	8004d38 <drive_stop>
}
 80061b6:	bf00      	nop
 80061b8:	bd98      	pop	{r3, r4, r7, pc}
 80061ba:	bf00      	nop
 80061bc:	f3af 8000 	nop.w
 80061c0:	54442d18 	.word	0x54442d18
 80061c4:	400921fb 	.word	0x400921fb
 80061c8:	200001a8 	.word	0x200001a8
 80061cc:	44480000 	.word	0x44480000
 80061d0:	20000d58 	.word	0x20000d58
 80061d4:	453b8000 	.word	0x453b8000
 80061d8:	20000ae4 	.word	0x20000ae4
 80061dc:	c53b8000 	.word	0xc53b8000
 80061e0:	43340000 	.word	0x43340000
 80061e4:	40508000 	.word	0x40508000
 80061e8:	2000077c 	.word	0x2000077c
 80061ec:	20000f6c 	.word	0x20000f6c
 80061f0:	20000bf8 	.word	0x20000bf8
 80061f4:	42a00000 	.word	0x42a00000
 80061f8:	20000b5c 	.word	0x20000b5c
 80061fc:	c61c4000 	.word	0xc61c4000
 8006200:	461c4000 	.word	0x461c4000
 8006204:	20000b54 	.word	0x20000b54
 8006208:	42c80000 	.word	0x42c80000
 800620c:	200001a4 	.word	0x200001a4
 8006210:	c2c80000 	.word	0xc2c80000
 8006214:	42b40000 	.word	0x42b40000
 8006218:	20000f68 	.word	0x20000f68
 800621c:	00000000 	.word	0x00000000

08006220 <rotate_L90>:
//rotate_L90
// 左に90度回転する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void rotate_L90(void){
 8006220:	b598      	push	{r3, r4, r7, lr}
 8006222:	af00      	add	r7, sp, #0
	target_omega_z = 800;
 8006224:	4b56      	ldr	r3, [pc, #344]	; (8006380 <rotate_L90+0x160>)
 8006226:	4a57      	ldr	r2, [pc, #348]	; (8006384 <rotate_L90+0x164>)
 8006228:	601a      	str	r2, [r3, #0]
	accel_l = -3000;
 800622a:	4b57      	ldr	r3, [pc, #348]	; (8006388 <rotate_L90+0x168>)
 800622c:	4a57      	ldr	r2, [pc, #348]	; (800638c <rotate_L90+0x16c>)
 800622e:	601a      	str	r2, [r3, #0]
	accel_r = 3000;
 8006230:	4b57      	ldr	r3, [pc, #348]	; (8006390 <rotate_L90+0x170>)
 8006232:	4a58      	ldr	r2, [pc, #352]	; (8006394 <rotate_L90+0x174>)
 8006234:	601a      	str	r2, [r3, #0]
	speed_min_l = -1*target_omega_z/180*M_PI * TREAD/2;
 8006236:	4b52      	ldr	r3, [pc, #328]	; (8006380 <rotate_L90+0x160>)
 8006238:	edd3 7a00 	vldr	s15, [r3]
 800623c:	eef1 7a67 	vneg.f32	s15, s15
 8006240:	ed9f 7a55 	vldr	s14, [pc, #340]	; 8006398 <rotate_L90+0x178>
 8006244:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8006248:	ee16 0a90 	vmov	r0, s13
 800624c:	f7fa f974 	bl	8000538 <__aeabi_f2d>
 8006250:	a349      	add	r3, pc, #292	; (adr r3, 8006378 <rotate_L90+0x158>)
 8006252:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006256:	f7fa f9c7 	bl	80005e8 <__aeabi_dmul>
 800625a:	4603      	mov	r3, r0
 800625c:	460c      	mov	r4, r1
 800625e:	4618      	mov	r0, r3
 8006260:	4621      	mov	r1, r4
 8006262:	f04f 0200 	mov.w	r2, #0
 8006266:	4b4d      	ldr	r3, [pc, #308]	; (800639c <rotate_L90+0x17c>)
 8006268:	f7fa f9be 	bl	80005e8 <__aeabi_dmul>
 800626c:	4603      	mov	r3, r0
 800626e:	460c      	mov	r4, r1
 8006270:	4618      	mov	r0, r3
 8006272:	4621      	mov	r1, r4
 8006274:	f04f 0200 	mov.w	r2, #0
 8006278:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800627c:	f7fa fade 	bl	800083c <__aeabi_ddiv>
 8006280:	4603      	mov	r3, r0
 8006282:	460c      	mov	r4, r1
 8006284:	4618      	mov	r0, r3
 8006286:	4621      	mov	r1, r4
 8006288:	f7fa fc86 	bl	8000b98 <__aeabi_d2f>
 800628c:	4602      	mov	r2, r0
 800628e:	4b44      	ldr	r3, [pc, #272]	; (80063a0 <rotate_L90+0x180>)
 8006290:	601a      	str	r2, [r3, #0]
	speed_max_r = target_omega_z/180*M_PI * TREAD/2;
 8006292:	4b3b      	ldr	r3, [pc, #236]	; (8006380 <rotate_L90+0x160>)
 8006294:	edd3 7a00 	vldr	s15, [r3]
 8006298:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 8006398 <rotate_L90+0x178>
 800629c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80062a0:	ee16 0a90 	vmov	r0, s13
 80062a4:	f7fa f948 	bl	8000538 <__aeabi_f2d>
 80062a8:	a333      	add	r3, pc, #204	; (adr r3, 8006378 <rotate_L90+0x158>)
 80062aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062ae:	f7fa f99b 	bl	80005e8 <__aeabi_dmul>
 80062b2:	4603      	mov	r3, r0
 80062b4:	460c      	mov	r4, r1
 80062b6:	4618      	mov	r0, r3
 80062b8:	4621      	mov	r1, r4
 80062ba:	f04f 0200 	mov.w	r2, #0
 80062be:	4b37      	ldr	r3, [pc, #220]	; (800639c <rotate_L90+0x17c>)
 80062c0:	f7fa f992 	bl	80005e8 <__aeabi_dmul>
 80062c4:	4603      	mov	r3, r0
 80062c6:	460c      	mov	r4, r1
 80062c8:	4618      	mov	r0, r3
 80062ca:	4621      	mov	r1, r4
 80062cc:	f04f 0200 	mov.w	r2, #0
 80062d0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80062d4:	f7fa fab2 	bl	800083c <__aeabi_ddiv>
 80062d8:	4603      	mov	r3, r0
 80062da:	460c      	mov	r4, r1
 80062dc:	4618      	mov	r0, r3
 80062de:	4621      	mov	r1, r4
 80062e0:	f7fa fc5a 	bl	8000b98 <__aeabi_d2f>
 80062e4:	4602      	mov	r2, r0
 80062e6:	4b2f      	ldr	r3, [pc, #188]	; (80063a4 <rotate_L90+0x184>)
 80062e8:	601a      	str	r2, [r3, #0]

	drive_start();											//走行開始
 80062ea:	f7fe fcf5 	bl	8004cd8 <drive_start>
	control_stop();
 80062ee:	f7fe fd5f 	bl	8004db0 <control_stop>
	while(degree_z < target_degree_z+80);
 80062f2:	bf00      	nop
 80062f4:	4b2c      	ldr	r3, [pc, #176]	; (80063a8 <rotate_L90+0x188>)
 80062f6:	edd3 7a00 	vldr	s15, [r3]
 80062fa:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 80063ac <rotate_L90+0x18c>
 80062fe:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006302:	4b2b      	ldr	r3, [pc, #172]	; (80063b0 <rotate_L90+0x190>)
 8006304:	edd3 7a00 	vldr	s15, [r3]
 8006308:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800630c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006310:	dcf0      	bgt.n	80062f4 <rotate_L90+0xd4>

	accel_l = 10000;
 8006312:	4b1d      	ldr	r3, [pc, #116]	; (8006388 <rotate_L90+0x168>)
 8006314:	4a27      	ldr	r2, [pc, #156]	; (80063b4 <rotate_L90+0x194>)
 8006316:	601a      	str	r2, [r3, #0]
	accel_r = -10000;
 8006318:	4b1d      	ldr	r3, [pc, #116]	; (8006390 <rotate_L90+0x170>)
 800631a:	4a27      	ldr	r2, [pc, #156]	; (80063b8 <rotate_L90+0x198>)
 800631c:	601a      	str	r2, [r3, #0]
	speed_max_l = -100;
 800631e:	4b27      	ldr	r3, [pc, #156]	; (80063bc <rotate_L90+0x19c>)
 8006320:	4a27      	ldr	r2, [pc, #156]	; (80063c0 <rotate_L90+0x1a0>)
 8006322:	601a      	str	r2, [r3, #0]
	speed_min_r = 100;
 8006324:	4b27      	ldr	r3, [pc, #156]	; (80063c4 <rotate_L90+0x1a4>)
 8006326:	4a28      	ldr	r2, [pc, #160]	; (80063c8 <rotate_L90+0x1a8>)
 8006328:	601a      	str	r2, [r3, #0]

	while(degree_z < target_degree_z+90);
 800632a:	bf00      	nop
 800632c:	4b1e      	ldr	r3, [pc, #120]	; (80063a8 <rotate_L90+0x188>)
 800632e:	edd3 7a00 	vldr	s15, [r3]
 8006332:	ed9f 7a26 	vldr	s14, [pc, #152]	; 80063cc <rotate_L90+0x1ac>
 8006336:	ee37 7a87 	vadd.f32	s14, s15, s14
 800633a:	4b1d      	ldr	r3, [pc, #116]	; (80063b0 <rotate_L90+0x190>)
 800633c:	edd3 7a00 	vldr	s15, [r3]
 8006340:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006344:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006348:	dcf0      	bgt.n	800632c <rotate_L90+0x10c>

	if(!MF.FLAG.XDIR){
 800634a:	4b21      	ldr	r3, [pc, #132]	; (80063d0 <rotate_L90+0x1b0>)
 800634c:	881b      	ldrh	r3, [r3, #0]
 800634e:	f3c3 3300 	ubfx	r3, r3, #12, #1
 8006352:	b2db      	uxtb	r3, r3
 8006354:	2b00      	cmp	r3, #0
 8006356:	d104      	bne.n	8006362 <rotate_L90+0x142>
		turn_dir(DIR_TURN_L90, 1);										//マイクロマウス内部位置情報でも右回転処理&目標角度右90度
 8006358:	2101      	movs	r1, #1
 800635a:	20ff      	movs	r0, #255	; 0xff
 800635c:	f008 fc3e 	bl	800ebdc <turn_dir>
 8006360:	e003      	b.n	800636a <rotate_L90+0x14a>
	}else{
		turn_dir(DIR_TURN_L90_8, 3);									//マイクロマウス内部位置情報でも右回転処理&目標角度右90度
 8006362:	2103      	movs	r1, #3
 8006364:	20fe      	movs	r0, #254	; 0xfe
 8006366:	f008 fc39 	bl	800ebdc <turn_dir>
	}
	drive_stop();
 800636a:	f7fe fce5 	bl	8004d38 <drive_stop>
}
 800636e:	bf00      	nop
 8006370:	bd98      	pop	{r3, r4, r7, pc}
 8006372:	bf00      	nop
 8006374:	f3af 8000 	nop.w
 8006378:	54442d18 	.word	0x54442d18
 800637c:	400921fb 	.word	0x400921fb
 8006380:	200001a8 	.word	0x200001a8
 8006384:	44480000 	.word	0x44480000
 8006388:	20000d58 	.word	0x20000d58
 800638c:	c53b8000 	.word	0xc53b8000
 8006390:	20000ae4 	.word	0x20000ae4
 8006394:	453b8000 	.word	0x453b8000
 8006398:	43340000 	.word	0x43340000
 800639c:	40508000 	.word	0x40508000
 80063a0:	20000b54 	.word	0x20000b54
 80063a4:	200001a4 	.word	0x200001a4
 80063a8:	20000bf8 	.word	0x20000bf8
 80063ac:	42a00000 	.word	0x42a00000
 80063b0:	20000b5c 	.word	0x20000b5c
 80063b4:	461c4000 	.word	0x461c4000
 80063b8:	c61c4000 	.word	0xc61c4000
 80063bc:	2000077c 	.word	0x2000077c
 80063c0:	c2c80000 	.word	0xc2c80000
 80063c4:	20000f6c 	.word	0x20000f6c
 80063c8:	42c80000 	.word	0x42c80000
 80063cc:	42b40000 	.word	0x42b40000
 80063d0:	20000f68 	.word	0x20000f68
 80063d4:	00000000 	.word	0x00000000

080063d8 <rotate_180>:
//rotate_180
// 180度回転する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void rotate_180(void){
 80063d8:	b598      	push	{r3, r4, r7, lr}
 80063da:	af00      	add	r7, sp, #0

	full_led_write(GREEN);
 80063dc:	2002      	movs	r0, #2
 80063de:	f00a fa87 	bl	80108f0 <full_led_write>
	target_omega_z = 800;
 80063e2:	4b55      	ldr	r3, [pc, #340]	; (8006538 <rotate_180+0x160>)
 80063e4:	4a55      	ldr	r2, [pc, #340]	; (800653c <rotate_180+0x164>)
 80063e6:	601a      	str	r2, [r3, #0]
	accel_l = 3000;
 80063e8:	4b55      	ldr	r3, [pc, #340]	; (8006540 <rotate_180+0x168>)
 80063ea:	4a56      	ldr	r2, [pc, #344]	; (8006544 <rotate_180+0x16c>)
 80063ec:	601a      	str	r2, [r3, #0]
	accel_r = -3000;
 80063ee:	4b56      	ldr	r3, [pc, #344]	; (8006548 <rotate_180+0x170>)
 80063f0:	4a56      	ldr	r2, [pc, #344]	; (800654c <rotate_180+0x174>)
 80063f2:	601a      	str	r2, [r3, #0]
	speed_max_l = target_omega_z/180*M_PI * TREAD/2;
 80063f4:	4b50      	ldr	r3, [pc, #320]	; (8006538 <rotate_180+0x160>)
 80063f6:	edd3 7a00 	vldr	s15, [r3]
 80063fa:	ed9f 7a55 	vldr	s14, [pc, #340]	; 8006550 <rotate_180+0x178>
 80063fe:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8006402:	ee16 0a90 	vmov	r0, s13
 8006406:	f7fa f897 	bl	8000538 <__aeabi_f2d>
 800640a:	a349      	add	r3, pc, #292	; (adr r3, 8006530 <rotate_180+0x158>)
 800640c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006410:	f7fa f8ea 	bl	80005e8 <__aeabi_dmul>
 8006414:	4603      	mov	r3, r0
 8006416:	460c      	mov	r4, r1
 8006418:	4618      	mov	r0, r3
 800641a:	4621      	mov	r1, r4
 800641c:	f04f 0200 	mov.w	r2, #0
 8006420:	4b4c      	ldr	r3, [pc, #304]	; (8006554 <rotate_180+0x17c>)
 8006422:	f7fa f8e1 	bl	80005e8 <__aeabi_dmul>
 8006426:	4603      	mov	r3, r0
 8006428:	460c      	mov	r4, r1
 800642a:	4618      	mov	r0, r3
 800642c:	4621      	mov	r1, r4
 800642e:	f04f 0200 	mov.w	r2, #0
 8006432:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006436:	f7fa fa01 	bl	800083c <__aeabi_ddiv>
 800643a:	4603      	mov	r3, r0
 800643c:	460c      	mov	r4, r1
 800643e:	4618      	mov	r0, r3
 8006440:	4621      	mov	r1, r4
 8006442:	f7fa fba9 	bl	8000b98 <__aeabi_d2f>
 8006446:	4602      	mov	r2, r0
 8006448:	4b43      	ldr	r3, [pc, #268]	; (8006558 <rotate_180+0x180>)
 800644a:	601a      	str	r2, [r3, #0]
	speed_min_r = -1*target_omega_z/180*M_PI * TREAD/2;
 800644c:	4b3a      	ldr	r3, [pc, #232]	; (8006538 <rotate_180+0x160>)
 800644e:	edd3 7a00 	vldr	s15, [r3]
 8006452:	eef1 7a67 	vneg.f32	s15, s15
 8006456:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 8006550 <rotate_180+0x178>
 800645a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800645e:	ee16 0a90 	vmov	r0, s13
 8006462:	f7fa f869 	bl	8000538 <__aeabi_f2d>
 8006466:	a332      	add	r3, pc, #200	; (adr r3, 8006530 <rotate_180+0x158>)
 8006468:	e9d3 2300 	ldrd	r2, r3, [r3]
 800646c:	f7fa f8bc 	bl	80005e8 <__aeabi_dmul>
 8006470:	4603      	mov	r3, r0
 8006472:	460c      	mov	r4, r1
 8006474:	4618      	mov	r0, r3
 8006476:	4621      	mov	r1, r4
 8006478:	f04f 0200 	mov.w	r2, #0
 800647c:	4b35      	ldr	r3, [pc, #212]	; (8006554 <rotate_180+0x17c>)
 800647e:	f7fa f8b3 	bl	80005e8 <__aeabi_dmul>
 8006482:	4603      	mov	r3, r0
 8006484:	460c      	mov	r4, r1
 8006486:	4618      	mov	r0, r3
 8006488:	4621      	mov	r1, r4
 800648a:	f04f 0200 	mov.w	r2, #0
 800648e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006492:	f7fa f9d3 	bl	800083c <__aeabi_ddiv>
 8006496:	4603      	mov	r3, r0
 8006498:	460c      	mov	r4, r1
 800649a:	4618      	mov	r0, r3
 800649c:	4621      	mov	r1, r4
 800649e:	f7fa fb7b 	bl	8000b98 <__aeabi_d2f>
 80064a2:	4602      	mov	r2, r0
 80064a4:	4b2d      	ldr	r3, [pc, #180]	; (800655c <rotate_180+0x184>)
 80064a6:	601a      	str	r2, [r3, #0]

	drive_start();											//走行開始
 80064a8:	f7fe fc16 	bl	8004cd8 <drive_start>
	control_stop();
 80064ac:	f7fe fc80 	bl	8004db0 <control_stop>
	while(degree_z > target_degree_z-160);
 80064b0:	bf00      	nop
 80064b2:	4b2b      	ldr	r3, [pc, #172]	; (8006560 <rotate_180+0x188>)
 80064b4:	edd3 7a00 	vldr	s15, [r3]
 80064b8:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8006564 <rotate_180+0x18c>
 80064bc:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80064c0:	4b29      	ldr	r3, [pc, #164]	; (8006568 <rotate_180+0x190>)
 80064c2:	edd3 7a00 	vldr	s15, [r3]
 80064c6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80064ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80064ce:	d4f0      	bmi.n	80064b2 <rotate_180+0xda>

	accel_l = -10000;
 80064d0:	4b1b      	ldr	r3, [pc, #108]	; (8006540 <rotate_180+0x168>)
 80064d2:	4a26      	ldr	r2, [pc, #152]	; (800656c <rotate_180+0x194>)
 80064d4:	601a      	str	r2, [r3, #0]
	accel_r = 10000;
 80064d6:	4b1c      	ldr	r3, [pc, #112]	; (8006548 <rotate_180+0x170>)
 80064d8:	4a25      	ldr	r2, [pc, #148]	; (8006570 <rotate_180+0x198>)
 80064da:	601a      	str	r2, [r3, #0]
	speed_min_l = 100;
 80064dc:	4b25      	ldr	r3, [pc, #148]	; (8006574 <rotate_180+0x19c>)
 80064de:	4a26      	ldr	r2, [pc, #152]	; (8006578 <rotate_180+0x1a0>)
 80064e0:	601a      	str	r2, [r3, #0]
	speed_max_r = -100;
 80064e2:	4b26      	ldr	r3, [pc, #152]	; (800657c <rotate_180+0x1a4>)
 80064e4:	4a26      	ldr	r2, [pc, #152]	; (8006580 <rotate_180+0x1a8>)
 80064e6:	601a      	str	r2, [r3, #0]

	while(degree_z > target_degree_z-180);
 80064e8:	bf00      	nop
 80064ea:	4b1d      	ldr	r3, [pc, #116]	; (8006560 <rotate_180+0x188>)
 80064ec:	edd3 7a00 	vldr	s15, [r3]
 80064f0:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8006550 <rotate_180+0x178>
 80064f4:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80064f8:	4b1b      	ldr	r3, [pc, #108]	; (8006568 <rotate_180+0x190>)
 80064fa:	edd3 7a00 	vldr	s15, [r3]
 80064fe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006502:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006506:	d4f0      	bmi.n	80064ea <rotate_180+0x112>

	if(!MF.FLAG.XDIR){
 8006508:	4b1e      	ldr	r3, [pc, #120]	; (8006584 <rotate_180+0x1ac>)
 800650a:	881b      	ldrh	r3, [r3, #0]
 800650c:	f3c3 3300 	ubfx	r3, r3, #12, #1
 8006510:	b2db      	uxtb	r3, r3
 8006512:	2b00      	cmp	r3, #0
 8006514:	d104      	bne.n	8006520 <rotate_180+0x148>
		turn_dir(DIR_TURN_180, 1);										//マイクロマウス内部位置情報でも180度回転処理&目標角度左180度
 8006516:	2101      	movs	r1, #1
 8006518:	2002      	movs	r0, #2
 800651a:	f008 fb5f 	bl	800ebdc <turn_dir>
 800651e:	e003      	b.n	8006528 <rotate_180+0x150>
	}else{
		turn_dir(DIR_TURN_R180_8, 3);									//マイクロマウス内部位置情報でも180度回転処理&目標角度左180度
 8006520:	2103      	movs	r1, #3
 8006522:	2004      	movs	r0, #4
 8006524:	f008 fb5a 	bl	800ebdc <turn_dir>
	}
	drive_stop();
 8006528:	f7fe fc06 	bl	8004d38 <drive_stop>

}
 800652c:	bf00      	nop
 800652e:	bd98      	pop	{r3, r4, r7, pc}
 8006530:	54442d18 	.word	0x54442d18
 8006534:	400921fb 	.word	0x400921fb
 8006538:	200001a8 	.word	0x200001a8
 800653c:	44480000 	.word	0x44480000
 8006540:	20000d58 	.word	0x20000d58
 8006544:	453b8000 	.word	0x453b8000
 8006548:	20000ae4 	.word	0x20000ae4
 800654c:	c53b8000 	.word	0xc53b8000
 8006550:	43340000 	.word	0x43340000
 8006554:	40508000 	.word	0x40508000
 8006558:	2000077c 	.word	0x2000077c
 800655c:	20000f6c 	.word	0x20000f6c
 8006560:	20000bf8 	.word	0x20000bf8
 8006564:	43200000 	.word	0x43200000
 8006568:	20000b5c 	.word	0x20000b5c
 800656c:	c61c4000 	.word	0xc61c4000
 8006570:	461c4000 	.word	0x461c4000
 8006574:	20000b54 	.word	0x20000b54
 8006578:	42c80000 	.word	0x42c80000
 800657c:	200001a4 	.word	0x200001a4
 8006580:	c2c80000 	.word	0xc2c80000
 8006584:	20000f68 	.word	0x20000f68

08006588 <slalom_R90>:
//slalom_R90
// スラロームで左に90度回転する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void slalom_R90(void){
 8006588:	b580      	push	{r7, lr}
 800658a:	b082      	sub	sp, #8
 800658c:	af02      	add	r7, sp, #8
	full_led_write(PURPLE);
 800658e:	2005      	movs	r0, #5
 8006590:	f00a f9ae 	bl	80108f0 <full_led_write>
	if(run_mode == LOW){
 8006594:	4b65      	ldr	r3, [pc, #404]	; (800672c <slalom_R90+0x1a4>)
 8006596:	781b      	ldrb	r3, [r3, #0]
 8006598:	b2db      	uxtb	r3, r3
 800659a:	2b01      	cmp	r3, #1
 800659c:	d12a      	bne.n	80065f4 <slalom_R90+0x6c>
		slalomF(10000, SPEED_LOW, SLALOM_OFFSET_F, SLALOM_WALL_FL, SLALOM_WALL_FR);
 800659e:	23fa      	movs	r3, #250	; 0xfa
 80065a0:	9300      	str	r3, [sp, #0]
 80065a2:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80065a6:	2212      	movs	r2, #18
 80065a8:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80065ac:	f242 7010 	movw	r0, #10000	; 0x2710
 80065b0:	f7fe ff5e 	bl	8005470 <slalomF>
		slalomR(-SLALOM_DEGACCEL, -SLALOM_OMEGA, -90, SPEED_LOW);
 80065b4:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80065b8:	f06f 0259 	mvn.w	r2, #89	; 0x59
 80065bc:	495c      	ldr	r1, [pc, #368]	; (8006730 <slalom_R90+0x1a8>)
 80065be:	485d      	ldr	r0, [pc, #372]	; (8006734 <slalom_R90+0x1ac>)
 80065c0:	f7fe ffd2 	bl	8005568 <slalomR>

		if(!MF.FLAG.XDIR){
 80065c4:	4b5c      	ldr	r3, [pc, #368]	; (8006738 <slalom_R90+0x1b0>)
 80065c6:	881b      	ldrh	r3, [r3, #0]
 80065c8:	f3c3 3300 	ubfx	r3, r3, #12, #1
 80065cc:	b2db      	uxtb	r3, r3
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d104      	bne.n	80065dc <slalom_R90+0x54>
			turn_dir(DIR_TURN_R90, 1);									//マイクロマウス内部位置情報でも左回転処理&目標角度左90度
 80065d2:	2101      	movs	r1, #1
 80065d4:	2001      	movs	r0, #1
 80065d6:	f008 fb01 	bl	800ebdc <turn_dir>
 80065da:	e003      	b.n	80065e4 <slalom_R90+0x5c>
		}else{
			turn_dir(DIR_TURN_R90_8, 3);								//マイクロマウス内部位置情報でも左回転処理&目標角度左90度
 80065dc:	2103      	movs	r1, #3
 80065de:	2002      	movs	r0, #2
 80065e0:	f008 fafc 	bl	800ebdc <turn_dir>
		}
		slalomB(10000, SPEED_LOW, SLALOM_OFFSET_B);
 80065e4:	2219      	movs	r2, #25
 80065e6:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80065ea:	f242 7010 	movw	r0, #10000	; 0x2710
 80065ee:	f7ff f8df 	bl	80057b0 <slalomB>
 80065f2:	e08e      	b.n	8006712 <slalom_R90+0x18a>
	}else if(run_mode == MIDDLE){
 80065f4:	4b4d      	ldr	r3, [pc, #308]	; (800672c <slalom_R90+0x1a4>)
 80065f6:	781b      	ldrb	r3, [r3, #0]
 80065f8:	b2db      	uxtb	r3, r3
 80065fa:	2b02      	cmp	r3, #2
 80065fc:	d12a      	bne.n	8006654 <slalom_R90+0xcc>
		slalomF(10000, SPEED_MIDDLE, SLALOM_M_OFFSET_F, SLALOM_M_WALL_FL, SLALOM_M_WALL_FR);
 80065fe:	23f0      	movs	r3, #240	; 0xf0
 8006600:	9300      	str	r3, [sp, #0]
 8006602:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8006606:	2219      	movs	r2, #25
 8006608:	f44f 7116 	mov.w	r1, #600	; 0x258
 800660c:	f242 7010 	movw	r0, #10000	; 0x2710
 8006610:	f7fe ff2e 	bl	8005470 <slalomF>
		slalomR(-SLALOM_M_DEGACCEL, -SLALOM_M_OMEGA, -85, SPEED_MIDDLE);
 8006614:	f44f 7316 	mov.w	r3, #600	; 0x258
 8006618:	f06f 0254 	mvn.w	r2, #84	; 0x54
 800661c:	4947      	ldr	r1, [pc, #284]	; (800673c <slalom_R90+0x1b4>)
 800661e:	4848      	ldr	r0, [pc, #288]	; (8006740 <slalom_R90+0x1b8>)
 8006620:	f7fe ffa2 	bl	8005568 <slalomR>

		if(!MF.FLAG.XDIR){
 8006624:	4b44      	ldr	r3, [pc, #272]	; (8006738 <slalom_R90+0x1b0>)
 8006626:	881b      	ldrh	r3, [r3, #0]
 8006628:	f3c3 3300 	ubfx	r3, r3, #12, #1
 800662c:	b2db      	uxtb	r3, r3
 800662e:	2b00      	cmp	r3, #0
 8006630:	d104      	bne.n	800663c <slalom_R90+0xb4>
			turn_dir(DIR_TURN_R90, 1);									//マイクロマウス内部位置情報でも左回転処理&目標角度左90度
 8006632:	2101      	movs	r1, #1
 8006634:	2001      	movs	r0, #1
 8006636:	f008 fad1 	bl	800ebdc <turn_dir>
 800663a:	e003      	b.n	8006644 <slalom_R90+0xbc>
		}else{
			turn_dir(DIR_TURN_R90_8, 3);								//マイクロマウス内部位置情報でも左回転処理&目標角度左90度
 800663c:	2103      	movs	r1, #3
 800663e:	2002      	movs	r0, #2
 8006640:	f008 facc 	bl	800ebdc <turn_dir>
		}
		slalomB(10000, SPEED_MIDDLE, SLALOM_M_OFFSET_B);
 8006644:	223c      	movs	r2, #60	; 0x3c
 8006646:	f44f 7116 	mov.w	r1, #600	; 0x258
 800664a:	f242 7010 	movw	r0, #10000	; 0x2710
 800664e:	f7ff f8af 	bl	80057b0 <slalomB>
 8006652:	e05e      	b.n	8006712 <slalom_R90+0x18a>
	}else if(run_mode == HIGH){
 8006654:	4b35      	ldr	r3, [pc, #212]	; (800672c <slalom_R90+0x1a4>)
 8006656:	781b      	ldrb	r3, [r3, #0]
 8006658:	b2db      	uxtb	r3, r3
 800665a:	2b03      	cmp	r3, #3
 800665c:	d12a      	bne.n	80066b4 <slalom_R90+0x12c>
		slalomF(10000, SPEED_HIGH, SLALOM_H_OFFSET_F, SLALOM_H_WALL_FL, SLALOM_H_WALL_FR);
 800665e:	23b4      	movs	r3, #180	; 0xb4
 8006660:	9300      	str	r3, [sp, #0]
 8006662:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8006666:	2216      	movs	r2, #22
 8006668:	f44f 7148 	mov.w	r1, #800	; 0x320
 800666c:	f242 7010 	movw	r0, #10000	; 0x2710
 8006670:	f7fe fefe 	bl	8005470 <slalomF>
		slalomR(-SLALOM_H_DEGACCEL, -SLALOM_H_OMEGA, -70, SPEED_HIGH);
 8006674:	f44f 7348 	mov.w	r3, #800	; 0x320
 8006678:	f06f 0245 	mvn.w	r2, #69	; 0x45
 800667c:	4931      	ldr	r1, [pc, #196]	; (8006744 <slalom_R90+0x1bc>)
 800667e:	4832      	ldr	r0, [pc, #200]	; (8006748 <slalom_R90+0x1c0>)
 8006680:	f7fe ff72 	bl	8005568 <slalomR>

		if(!MF.FLAG.XDIR){
 8006684:	4b2c      	ldr	r3, [pc, #176]	; (8006738 <slalom_R90+0x1b0>)
 8006686:	881b      	ldrh	r3, [r3, #0]
 8006688:	f3c3 3300 	ubfx	r3, r3, #12, #1
 800668c:	b2db      	uxtb	r3, r3
 800668e:	2b00      	cmp	r3, #0
 8006690:	d104      	bne.n	800669c <slalom_R90+0x114>
			turn_dir(DIR_TURN_R90, 1);									//マイクロマウス内部位置情報でも左回転処理&目標角度左90度
 8006692:	2101      	movs	r1, #1
 8006694:	2001      	movs	r0, #1
 8006696:	f008 faa1 	bl	800ebdc <turn_dir>
 800669a:	e003      	b.n	80066a4 <slalom_R90+0x11c>
		}else{
			turn_dir(DIR_TURN_R90_8, 3);								//マイクロマウス内部位置情報でも左回転処理&目標角度左90度
 800669c:	2103      	movs	r1, #3
 800669e:	2002      	movs	r0, #2
 80066a0:	f008 fa9c 	bl	800ebdc <turn_dir>
		}
		slalomB(10000, SPEED_HIGH, SLALOM_H_OFFSET_B);
 80066a4:	225a      	movs	r2, #90	; 0x5a
 80066a6:	f44f 7148 	mov.w	r1, #800	; 0x320
 80066aa:	f242 7010 	movw	r0, #10000	; 0x2710
 80066ae:	f7ff f87f 	bl	80057b0 <slalomB>
 80066b2:	e02e      	b.n	8006712 <slalom_R90+0x18a>
	}else if(run_mode == HIGH_HIGH){
 80066b4:	4b1d      	ldr	r3, [pc, #116]	; (800672c <slalom_R90+0x1a4>)
 80066b6:	781b      	ldrb	r3, [r3, #0]
 80066b8:	b2db      	uxtb	r3, r3
 80066ba:	2b04      	cmp	r3, #4
 80066bc:	d129      	bne.n	8006712 <slalom_R90+0x18a>
		slalomF(10000, SPEED_HIGH_HIGH, SLALOM_H_H_OFFSET_F, SLALOM_H_H_WALL_FL, SLALOM_H_H_WALL_FR);
 80066be:	23b4      	movs	r3, #180	; 0xb4
 80066c0:	9300      	str	r3, [sp, #0]
 80066c2:	f44f 73b4 	mov.w	r3, #360	; 0x168
 80066c6:	220d      	movs	r2, #13
 80066c8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80066cc:	f242 7010 	movw	r0, #10000	; 0x2710
 80066d0:	f7fe fece 	bl	8005470 <slalomF>
		slalomR(-SLALOM_H_H_DEGACCEL, -SLALOM_H_H_OMEGA, -50, SPEED_HIGH_HIGH);
 80066d4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80066d8:	f06f 0231 	mvn.w	r2, #49	; 0x31
 80066dc:	4919      	ldr	r1, [pc, #100]	; (8006744 <slalom_R90+0x1bc>)
 80066de:	481b      	ldr	r0, [pc, #108]	; (800674c <slalom_R90+0x1c4>)
 80066e0:	f7fe ff42 	bl	8005568 <slalomR>

		if(!MF.FLAG.XDIR){
 80066e4:	4b14      	ldr	r3, [pc, #80]	; (8006738 <slalom_R90+0x1b0>)
 80066e6:	881b      	ldrh	r3, [r3, #0]
 80066e8:	f3c3 3300 	ubfx	r3, r3, #12, #1
 80066ec:	b2db      	uxtb	r3, r3
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d104      	bne.n	80066fc <slalom_R90+0x174>
			turn_dir(DIR_TURN_R90, 1);									//マイクロマウス内部位置情報でも左回転処理&目標角度左90度
 80066f2:	2101      	movs	r1, #1
 80066f4:	2001      	movs	r0, #1
 80066f6:	f008 fa71 	bl	800ebdc <turn_dir>
 80066fa:	e003      	b.n	8006704 <slalom_R90+0x17c>
		}else{
			turn_dir(DIR_TURN_R90_8, 3);								//マイクロマウス内部位置情報でも左回転処理&目標角度左90度
 80066fc:	2103      	movs	r1, #3
 80066fe:	2002      	movs	r0, #2
 8006700:	f008 fa6c 	bl	800ebdc <turn_dir>
		}
		slalomB(10000, SPEED_HIGH_HIGH, SLALOM_H_H_OFFSET_B);
 8006704:	2273      	movs	r2, #115	; 0x73
 8006706:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800670a:	f242 7010 	movw	r0, #10000	; 0x2710
 800670e:	f7ff f84f 	bl	80057b0 <slalomB>
	}
	if(!MF.FLAG.SCND)get_wall_info();					//壁情報を取得，片壁制御の有効・無効の判断
 8006712:	4b09      	ldr	r3, [pc, #36]	; (8006738 <slalom_R90+0x1b0>)
 8006714:	881b      	ldrh	r3, [r3, #0]
 8006716:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800671a:	b2db      	uxtb	r3, r3
 800671c:	2b00      	cmp	r3, #0
 800671e:	d101      	bne.n	8006724 <slalom_R90+0x19c>
 8006720:	f00a f872 	bl	8010808 <get_wall_info>
}
 8006724:	bf00      	nop
 8006726:	46bd      	mov	sp, r7
 8006728:	bd80      	pop	{r7, pc}
 800672a:	bf00      	nop
 800672c:	20000456 	.word	0x20000456
 8006730:	fffffdda 	.word	0xfffffdda
 8006734:	fffff060 	.word	0xfffff060
 8006738:	20000f68 	.word	0x20000f68
 800673c:	fffffc7c 	.word	0xfffffc7c
 8006740:	ffffd120 	.word	0xffffd120
 8006744:	fffffb50 	.word	0xfffffb50
 8006748:	ffffa240 	.word	0xffffa240
 800674c:	ffff8300 	.word	0xffff8300

08006750 <slalom_L90>:
//slalom_L90
// スラロームで右に90度回転する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void slalom_L90(void){
 8006750:	b580      	push	{r7, lr}
 8006752:	b082      	sub	sp, #8
 8006754:	af02      	add	r7, sp, #8
	full_led_write(YELLOW);
 8006756:	2006      	movs	r0, #6
 8006758:	f00a f8ca 	bl	80108f0 <full_led_write>
	if(run_mode == LOW){
 800675c:	4b67      	ldr	r3, [pc, #412]	; (80068fc <slalom_L90+0x1ac>)
 800675e:	781b      	ldrb	r3, [r3, #0]
 8006760:	b2db      	uxtb	r3, r3
 8006762:	2b01      	cmp	r3, #1
 8006764:	d12b      	bne.n	80067be <slalom_L90+0x6e>
		slalomF(10000, SPEED_LOW, SLALOM_OFFSET_F, SLALOM_WALL_FL, SLALOM_WALL_FR);
 8006766:	23fa      	movs	r3, #250	; 0xfa
 8006768:	9300      	str	r3, [sp, #0]
 800676a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800676e:	2212      	movs	r2, #18
 8006770:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8006774:	f242 7010 	movw	r0, #10000	; 0x2710
 8006778:	f7fe fe7a 	bl	8005470 <slalomF>
		slalomR(SLALOM_DEGACCEL, SLALOM_OMEGA, 90, SPEED_LOW);
 800677c:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8006780:	225a      	movs	r2, #90	; 0x5a
 8006782:	f240 2126 	movw	r1, #550	; 0x226
 8006786:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 800678a:	f7fe feed 	bl	8005568 <slalomR>

		if(!MF.FLAG.XDIR){
 800678e:	4b5c      	ldr	r3, [pc, #368]	; (8006900 <slalom_L90+0x1b0>)
 8006790:	881b      	ldrh	r3, [r3, #0]
 8006792:	f3c3 3300 	ubfx	r3, r3, #12, #1
 8006796:	b2db      	uxtb	r3, r3
 8006798:	2b00      	cmp	r3, #0
 800679a:	d104      	bne.n	80067a6 <slalom_L90+0x56>
			turn_dir(DIR_TURN_L90, 1);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 800679c:	2101      	movs	r1, #1
 800679e:	20ff      	movs	r0, #255	; 0xff
 80067a0:	f008 fa1c 	bl	800ebdc <turn_dir>
 80067a4:	e003      	b.n	80067ae <slalom_L90+0x5e>
		}else{
			turn_dir(DIR_TURN_L90_8, 3);								//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 80067a6:	2103      	movs	r1, #3
 80067a8:	20fe      	movs	r0, #254	; 0xfe
 80067aa:	f008 fa17 	bl	800ebdc <turn_dir>
		}
		slalomB(10000, SPEED_LOW, SLALOM_OFFSET_B);
 80067ae:	2219      	movs	r2, #25
 80067b0:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80067b4:	f242 7010 	movw	r0, #10000	; 0x2710
 80067b8:	f7fe fffa 	bl	80057b0 <slalomB>
 80067bc:	e091      	b.n	80068e2 <slalom_L90+0x192>
	}else if(run_mode == MIDDLE){
 80067be:	4b4f      	ldr	r3, [pc, #316]	; (80068fc <slalom_L90+0x1ac>)
 80067c0:	781b      	ldrb	r3, [r3, #0]
 80067c2:	b2db      	uxtb	r3, r3
 80067c4:	2b02      	cmp	r3, #2
 80067c6:	d12b      	bne.n	8006820 <slalom_L90+0xd0>
		slalomF(10000, SPEED_MIDDLE, SLALOM_M_OFFSET_F, SLALOM_M_WALL_FL, SLALOM_M_WALL_FR);
 80067c8:	23f0      	movs	r3, #240	; 0xf0
 80067ca:	9300      	str	r3, [sp, #0]
 80067cc:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80067d0:	2219      	movs	r2, #25
 80067d2:	f44f 7116 	mov.w	r1, #600	; 0x258
 80067d6:	f242 7010 	movw	r0, #10000	; 0x2710
 80067da:	f7fe fe49 	bl	8005470 <slalomF>
		slalomR(SLALOM_M_DEGACCEL, SLALOM_M_OMEGA, 85, SPEED_MIDDLE);
 80067de:	f44f 7316 	mov.w	r3, #600	; 0x258
 80067e2:	2255      	movs	r2, #85	; 0x55
 80067e4:	f44f 7161 	mov.w	r1, #900	; 0x384
 80067e8:	f642 60e0 	movw	r0, #12000	; 0x2ee0
 80067ec:	f7fe febc 	bl	8005568 <slalomR>

		if(!MF.FLAG.XDIR){
 80067f0:	4b43      	ldr	r3, [pc, #268]	; (8006900 <slalom_L90+0x1b0>)
 80067f2:	881b      	ldrh	r3, [r3, #0]
 80067f4:	f3c3 3300 	ubfx	r3, r3, #12, #1
 80067f8:	b2db      	uxtb	r3, r3
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d104      	bne.n	8006808 <slalom_L90+0xb8>
			turn_dir(DIR_TURN_L90, 1);									//マイクロマウス内部位置情報でも左回転処理&目標角度左90度
 80067fe:	2101      	movs	r1, #1
 8006800:	20ff      	movs	r0, #255	; 0xff
 8006802:	f008 f9eb 	bl	800ebdc <turn_dir>
 8006806:	e003      	b.n	8006810 <slalom_L90+0xc0>
		}else{
			turn_dir(DIR_TURN_L90_8, 3);								//マイクロマウス内部位置情報でも左回転処理&目標角度左90度
 8006808:	2103      	movs	r1, #3
 800680a:	20fe      	movs	r0, #254	; 0xfe
 800680c:	f008 f9e6 	bl	800ebdc <turn_dir>
		}
		slalomB(10000, SPEED_MIDDLE, SLALOM_M_OFFSET_B);
 8006810:	223c      	movs	r2, #60	; 0x3c
 8006812:	f44f 7116 	mov.w	r1, #600	; 0x258
 8006816:	f242 7010 	movw	r0, #10000	; 0x2710
 800681a:	f7fe ffc9 	bl	80057b0 <slalomB>
 800681e:	e060      	b.n	80068e2 <slalom_L90+0x192>
	}else if(run_mode == HIGH){
 8006820:	4b36      	ldr	r3, [pc, #216]	; (80068fc <slalom_L90+0x1ac>)
 8006822:	781b      	ldrb	r3, [r3, #0]
 8006824:	b2db      	uxtb	r3, r3
 8006826:	2b03      	cmp	r3, #3
 8006828:	d12b      	bne.n	8006882 <slalom_L90+0x132>
		slalomF(10000, SPEED_HIGH, SLALOM_H_OFFSET_F, SLALOM_H_WALL_FL, SLALOM_H_WALL_FR);
 800682a:	23b4      	movs	r3, #180	; 0xb4
 800682c:	9300      	str	r3, [sp, #0]
 800682e:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8006832:	2216      	movs	r2, #22
 8006834:	f44f 7148 	mov.w	r1, #800	; 0x320
 8006838:	f242 7010 	movw	r0, #10000	; 0x2710
 800683c:	f7fe fe18 	bl	8005470 <slalomF>
		slalomR(SLALOM_H_DEGACCEL, SLALOM_H_OMEGA, 70, SPEED_HIGH);
 8006840:	f44f 7348 	mov.w	r3, #800	; 0x320
 8006844:	2246      	movs	r2, #70	; 0x46
 8006846:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 800684a:	f645 50c0 	movw	r0, #24000	; 0x5dc0
 800684e:	f7fe fe8b 	bl	8005568 <slalomR>

		if(!MF.FLAG.XDIR){
 8006852:	4b2b      	ldr	r3, [pc, #172]	; (8006900 <slalom_L90+0x1b0>)
 8006854:	881b      	ldrh	r3, [r3, #0]
 8006856:	f3c3 3300 	ubfx	r3, r3, #12, #1
 800685a:	b2db      	uxtb	r3, r3
 800685c:	2b00      	cmp	r3, #0
 800685e:	d104      	bne.n	800686a <slalom_L90+0x11a>
			turn_dir(DIR_TURN_L90, 1);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8006860:	2101      	movs	r1, #1
 8006862:	20ff      	movs	r0, #255	; 0xff
 8006864:	f008 f9ba 	bl	800ebdc <turn_dir>
 8006868:	e003      	b.n	8006872 <slalom_L90+0x122>
		}else{
			turn_dir(DIR_TURN_L90_8, 3);								//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 800686a:	2103      	movs	r1, #3
 800686c:	20fe      	movs	r0, #254	; 0xfe
 800686e:	f008 f9b5 	bl	800ebdc <turn_dir>
		}
		slalomB(10000, SPEED_HIGH, SLALOM_H_OFFSET_B);
 8006872:	225a      	movs	r2, #90	; 0x5a
 8006874:	f44f 7148 	mov.w	r1, #800	; 0x320
 8006878:	f242 7010 	movw	r0, #10000	; 0x2710
 800687c:	f7fe ff98 	bl	80057b0 <slalomB>
 8006880:	e02f      	b.n	80068e2 <slalom_L90+0x192>
	}else if(run_mode == HIGH_HIGH){
 8006882:	4b1e      	ldr	r3, [pc, #120]	; (80068fc <slalom_L90+0x1ac>)
 8006884:	781b      	ldrb	r3, [r3, #0]
 8006886:	b2db      	uxtb	r3, r3
 8006888:	2b04      	cmp	r3, #4
 800688a:	d12a      	bne.n	80068e2 <slalom_L90+0x192>
		slalomF(10000, SPEED_HIGH_HIGH, SLALOM_H_H_OFFSET_F, SLALOM_H_H_WALL_FL, SLALOM_H_H_WALL_FR);
 800688c:	23b4      	movs	r3, #180	; 0xb4
 800688e:	9300      	str	r3, [sp, #0]
 8006890:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8006894:	220d      	movs	r2, #13
 8006896:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800689a:	f242 7010 	movw	r0, #10000	; 0x2710
 800689e:	f7fe fde7 	bl	8005470 <slalomF>
		slalomR(SLALOM_H_H_DEGACCEL, SLALOM_H_H_OMEGA, 50, SPEED_HIGH_HIGH);
 80068a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80068a6:	2232      	movs	r2, #50	; 0x32
 80068a8:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 80068ac:	f44f 40fa 	mov.w	r0, #32000	; 0x7d00
 80068b0:	f7fe fe5a 	bl	8005568 <slalomR>

		if(!MF.FLAG.XDIR){
 80068b4:	4b12      	ldr	r3, [pc, #72]	; (8006900 <slalom_L90+0x1b0>)
 80068b6:	881b      	ldrh	r3, [r3, #0]
 80068b8:	f3c3 3300 	ubfx	r3, r3, #12, #1
 80068bc:	b2db      	uxtb	r3, r3
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d104      	bne.n	80068cc <slalom_L90+0x17c>
			turn_dir(DIR_TURN_L90, 1);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 80068c2:	2101      	movs	r1, #1
 80068c4:	20ff      	movs	r0, #255	; 0xff
 80068c6:	f008 f989 	bl	800ebdc <turn_dir>
 80068ca:	e003      	b.n	80068d4 <slalom_L90+0x184>
		}else{
			turn_dir(DIR_TURN_L90_8, 3);								//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 80068cc:	2103      	movs	r1, #3
 80068ce:	20fe      	movs	r0, #254	; 0xfe
 80068d0:	f008 f984 	bl	800ebdc <turn_dir>
		}
		slalomB(10000, SPEED_HIGH_HIGH, SLALOM_H_H_OFFSET_B);
 80068d4:	2273      	movs	r2, #115	; 0x73
 80068d6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80068da:	f242 7010 	movw	r0, #10000	; 0x2710
 80068de:	f7fe ff67 	bl	80057b0 <slalomB>
	}
	if(!MF.FLAG.SCND)get_wall_info();					//壁情報を取得，片壁制御の有効・無効の判断
 80068e2:	4b07      	ldr	r3, [pc, #28]	; (8006900 <slalom_L90+0x1b0>)
 80068e4:	881b      	ldrh	r3, [r3, #0]
 80068e6:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80068ea:	b2db      	uxtb	r3, r3
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d101      	bne.n	80068f4 <slalom_L90+0x1a4>
 80068f0:	f009 ff8a 	bl	8010808 <get_wall_info>
}
 80068f4:	bf00      	nop
 80068f6:	46bd      	mov	sp, r7
 80068f8:	bd80      	pop	{r7, pc}
 80068fa:	bf00      	nop
 80068fc:	20000456 	.word	0x20000456
 8006900:	20000f68 	.word	0x20000f68

08006904 <Lslalom_R90>:
//Lslalom_R90
// スラロームで右に90度回転する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void Lslalom_R90(void){
 8006904:	b580      	push	{r7, lr}
 8006906:	b082      	sub	sp, #8
 8006908:	af02      	add	r7, sp, #8
	full_led_write(PURPLE);
 800690a:	2005      	movs	r0, #5
 800690c:	f009 fff0 	bl	80108f0 <full_led_write>
	if(run_mode == LOW){
 8006910:	4b5f      	ldr	r3, [pc, #380]	; (8006a90 <Lslalom_R90+0x18c>)
 8006912:	781b      	ldrb	r3, [r3, #0]
 8006914:	b2db      	uxtb	r3, r3
 8006916:	2b01      	cmp	r3, #1
 8006918:	d12a      	bne.n	8006970 <Lslalom_R90+0x6c>
		slalomF(10000, SPEED_LOW, LSLALOM_OFFSET_F, LSLALOM_WALL_FL, LSLALOM_WALL_FR);
 800691a:	2364      	movs	r3, #100	; 0x64
 800691c:	9300      	str	r3, [sp, #0]
 800691e:	23c8      	movs	r3, #200	; 0xc8
 8006920:	222d      	movs	r2, #45	; 0x2d
 8006922:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8006926:	f242 7010 	movw	r0, #10000	; 0x2710
 800692a:	f7fe fda1 	bl	8005470 <slalomF>
		slalomR(-LSLALOM_DEGACCEL, -LSLALOM_OMEGA, -90, SPEED_LOW);
 800692e:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8006932:	f06f 0259 	mvn.w	r2, #89	; 0x59
 8006936:	f06f 01c7 	mvn.w	r1, #199	; 0xc7
 800693a:	4856      	ldr	r0, [pc, #344]	; (8006a94 <Lslalom_R90+0x190>)
 800693c:	f7fe fe14 	bl	8005568 <slalomR>

		if(!MF.FLAG.XDIR){
 8006940:	4b55      	ldr	r3, [pc, #340]	; (8006a98 <Lslalom_R90+0x194>)
 8006942:	881b      	ldrh	r3, [r3, #0]
 8006944:	f3c3 3300 	ubfx	r3, r3, #12, #1
 8006948:	b2db      	uxtb	r3, r3
 800694a:	2b00      	cmp	r3, #0
 800694c:	d104      	bne.n	8006958 <Lslalom_R90+0x54>
			turn_dir(DIR_TURN_R90, 1);										//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 800694e:	2101      	movs	r1, #1
 8006950:	2001      	movs	r0, #1
 8006952:	f008 f943 	bl	800ebdc <turn_dir>
 8006956:	e003      	b.n	8006960 <Lslalom_R90+0x5c>
		}else{
			turn_dir(DIR_TURN_R90_8, 3);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8006958:	2103      	movs	r1, #3
 800695a:	2002      	movs	r0, #2
 800695c:	f008 f93e 	bl	800ebdc <turn_dir>
		}
		slalomB(10000, SPEED_LOW, LSLALOM_OFFSET_B);
 8006960:	2235      	movs	r2, #53	; 0x35
 8006962:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8006966:	f242 7010 	movw	r0, #10000	; 0x2710
 800696a:	f7fe ff21 	bl	80057b0 <slalomB>
		}else{
			turn_dir(DIR_TURN_R90_8, 3);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
		}
		slalomB(10000, SPEED_HIGH_HIGH, LSLALOM_H_H_OFFSET_B);
	}
}
 800696e:	e08b      	b.n	8006a88 <Lslalom_R90+0x184>
	}else if(run_mode == MIDDLE){
 8006970:	4b47      	ldr	r3, [pc, #284]	; (8006a90 <Lslalom_R90+0x18c>)
 8006972:	781b      	ldrb	r3, [r3, #0]
 8006974:	b2db      	uxtb	r3, r3
 8006976:	2b02      	cmp	r3, #2
 8006978:	d129      	bne.n	80069ce <Lslalom_R90+0xca>
		slalomF(10000, SPEED_MIDDLE, LSLALOM_M_OFFSET_F, LSLALOM_M_WALL_FL, LSLALOM_M_WALL_FR);
 800697a:	2378      	movs	r3, #120	; 0x78
 800697c:	9300      	str	r3, [sp, #0]
 800697e:	23f0      	movs	r3, #240	; 0xf0
 8006980:	223c      	movs	r2, #60	; 0x3c
 8006982:	f44f 7116 	mov.w	r1, #600	; 0x258
 8006986:	f242 7010 	movw	r0, #10000	; 0x2710
 800698a:	f7fe fd71 	bl	8005470 <slalomF>
		slalomR(-LSLALOM_M_DEGACCEL, -LSLALOM_M_OMEGA, -90, SPEED_MIDDLE);
 800698e:	f44f 7316 	mov.w	r3, #600	; 0x258
 8006992:	f06f 0259 	mvn.w	r2, #89	; 0x59
 8006996:	4941      	ldr	r1, [pc, #260]	; (8006a9c <Lslalom_R90+0x198>)
 8006998:	4841      	ldr	r0, [pc, #260]	; (8006aa0 <Lslalom_R90+0x19c>)
 800699a:	f7fe fde5 	bl	8005568 <slalomR>
		if(!MF.FLAG.XDIR){
 800699e:	4b3e      	ldr	r3, [pc, #248]	; (8006a98 <Lslalom_R90+0x194>)
 80069a0:	881b      	ldrh	r3, [r3, #0]
 80069a2:	f3c3 3300 	ubfx	r3, r3, #12, #1
 80069a6:	b2db      	uxtb	r3, r3
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d104      	bne.n	80069b6 <Lslalom_R90+0xb2>
			turn_dir(DIR_TURN_R90, 1);										//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 80069ac:	2101      	movs	r1, #1
 80069ae:	2001      	movs	r0, #1
 80069b0:	f008 f914 	bl	800ebdc <turn_dir>
 80069b4:	e003      	b.n	80069be <Lslalom_R90+0xba>
			turn_dir(DIR_TURN_R90_8, 3);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 80069b6:	2103      	movs	r1, #3
 80069b8:	2002      	movs	r0, #2
 80069ba:	f008 f90f 	bl	800ebdc <turn_dir>
		slalomB(10000, SPEED_MIDDLE, LSLALOM_M_OFFSET_B);
 80069be:	2258      	movs	r2, #88	; 0x58
 80069c0:	f44f 7116 	mov.w	r1, #600	; 0x258
 80069c4:	f242 7010 	movw	r0, #10000	; 0x2710
 80069c8:	f7fe fef2 	bl	80057b0 <slalomB>
}
 80069cc:	e05c      	b.n	8006a88 <Lslalom_R90+0x184>
	}else if(run_mode == HIGH){
 80069ce:	4b30      	ldr	r3, [pc, #192]	; (8006a90 <Lslalom_R90+0x18c>)
 80069d0:	781b      	ldrb	r3, [r3, #0]
 80069d2:	b2db      	uxtb	r3, r3
 80069d4:	2b03      	cmp	r3, #3
 80069d6:	d129      	bne.n	8006a2c <Lslalom_R90+0x128>
		slalomF(10000, SPEED_HIGH, LSLALOM_H_OFFSET_F, LSLALOM_H_WALL_FL, LSLALOM_H_WALL_FR);
 80069d8:	2364      	movs	r3, #100	; 0x64
 80069da:	9300      	str	r3, [sp, #0]
 80069dc:	23c8      	movs	r3, #200	; 0xc8
 80069de:	222d      	movs	r2, #45	; 0x2d
 80069e0:	f44f 7148 	mov.w	r1, #800	; 0x320
 80069e4:	f242 7010 	movw	r0, #10000	; 0x2710
 80069e8:	f7fe fd42 	bl	8005470 <slalomF>
		slalomR(-LSLALOM_H_DEGACCEL, -LSLALOM_H_OMEGA, -90, SPEED_HIGH);
 80069ec:	f44f 7348 	mov.w	r3, #800	; 0x320
 80069f0:	f06f 0259 	mvn.w	r2, #89	; 0x59
 80069f4:	492b      	ldr	r1, [pc, #172]	; (8006aa4 <Lslalom_R90+0x1a0>)
 80069f6:	482c      	ldr	r0, [pc, #176]	; (8006aa8 <Lslalom_R90+0x1a4>)
 80069f8:	f7fe fdb6 	bl	8005568 <slalomR>
		if(!MF.FLAG.XDIR){
 80069fc:	4b26      	ldr	r3, [pc, #152]	; (8006a98 <Lslalom_R90+0x194>)
 80069fe:	881b      	ldrh	r3, [r3, #0]
 8006a00:	f3c3 3300 	ubfx	r3, r3, #12, #1
 8006a04:	b2db      	uxtb	r3, r3
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d104      	bne.n	8006a14 <Lslalom_R90+0x110>
			turn_dir(DIR_TURN_R90, 1);										//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8006a0a:	2101      	movs	r1, #1
 8006a0c:	2001      	movs	r0, #1
 8006a0e:	f008 f8e5 	bl	800ebdc <turn_dir>
 8006a12:	e003      	b.n	8006a1c <Lslalom_R90+0x118>
			turn_dir(DIR_TURN_R90_8, 3);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8006a14:	2103      	movs	r1, #3
 8006a16:	2002      	movs	r0, #2
 8006a18:	f008 f8e0 	bl	800ebdc <turn_dir>
		slalomB(10000, SPEED_HIGH, LSLALOM_H_OFFSET_B);
 8006a1c:	2258      	movs	r2, #88	; 0x58
 8006a1e:	f44f 7148 	mov.w	r1, #800	; 0x320
 8006a22:	f242 7010 	movw	r0, #10000	; 0x2710
 8006a26:	f7fe fec3 	bl	80057b0 <slalomB>
}
 8006a2a:	e02d      	b.n	8006a88 <Lslalom_R90+0x184>
	}else if(run_mode == HIGH_HIGH){
 8006a2c:	4b18      	ldr	r3, [pc, #96]	; (8006a90 <Lslalom_R90+0x18c>)
 8006a2e:	781b      	ldrb	r3, [r3, #0]
 8006a30:	b2db      	uxtb	r3, r3
 8006a32:	2b04      	cmp	r3, #4
 8006a34:	d128      	bne.n	8006a88 <Lslalom_R90+0x184>
		slalomF(10000, SPEED_HIGH_HIGH, LSLALOM_H_H_OFFSET_F, LSLALOM_H_H_WALL_FL, LSLALOM_H_H_WALL_FR);
 8006a36:	2364      	movs	r3, #100	; 0x64
 8006a38:	9300      	str	r3, [sp, #0]
 8006a3a:	23c8      	movs	r3, #200	; 0xc8
 8006a3c:	2232      	movs	r2, #50	; 0x32
 8006a3e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8006a42:	f242 7010 	movw	r0, #10000	; 0x2710
 8006a46:	f7fe fd13 	bl	8005470 <slalomF>
		slalomR(-LSLALOM_H_H_DEGACCEL, -LSLALOM_H_H_OMEGA, -85, SPEED_HIGH_HIGH);
 8006a4a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006a4e:	f06f 0254 	mvn.w	r2, #84	; 0x54
 8006a52:	4916      	ldr	r1, [pc, #88]	; (8006aac <Lslalom_R90+0x1a8>)
 8006a54:	4816      	ldr	r0, [pc, #88]	; (8006ab0 <Lslalom_R90+0x1ac>)
 8006a56:	f7fe fd87 	bl	8005568 <slalomR>
		if(!MF.FLAG.XDIR){
 8006a5a:	4b0f      	ldr	r3, [pc, #60]	; (8006a98 <Lslalom_R90+0x194>)
 8006a5c:	881b      	ldrh	r3, [r3, #0]
 8006a5e:	f3c3 3300 	ubfx	r3, r3, #12, #1
 8006a62:	b2db      	uxtb	r3, r3
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d104      	bne.n	8006a72 <Lslalom_R90+0x16e>
			turn_dir(DIR_TURN_R90, 1);										//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8006a68:	2101      	movs	r1, #1
 8006a6a:	2001      	movs	r0, #1
 8006a6c:	f008 f8b6 	bl	800ebdc <turn_dir>
 8006a70:	e003      	b.n	8006a7a <Lslalom_R90+0x176>
			turn_dir(DIR_TURN_R90_8, 3);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8006a72:	2103      	movs	r1, #3
 8006a74:	2002      	movs	r0, #2
 8006a76:	f008 f8b1 	bl	800ebdc <turn_dir>
		slalomB(10000, SPEED_HIGH_HIGH, LSLALOM_H_H_OFFSET_B);
 8006a7a:	226e      	movs	r2, #110	; 0x6e
 8006a7c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8006a80:	f242 7010 	movw	r0, #10000	; 0x2710
 8006a84:	f7fe fe94 	bl	80057b0 <slalomB>
}
 8006a88:	bf00      	nop
 8006a8a:	46bd      	mov	sp, r7
 8006a8c:	bd80      	pop	{r7, pc}
 8006a8e:	bf00      	nop
 8006a90:	20000456 	.word	0x20000456
 8006a94:	fffff830 	.word	0xfffff830
 8006a98:	20000f68 	.word	0x20000f68
 8006a9c:	fffffe70 	.word	0xfffffe70
 8006aa0:	fffff060 	.word	0xfffff060
 8006aa4:	fffffda8 	.word	0xfffffda8
 8006aa8:	ffffee6c 	.word	0xffffee6c
 8006aac:	fffffce0 	.word	0xfffffce0
 8006ab0:	ffffe0c0 	.word	0xffffe0c0

08006ab4 <Lslalom_L90>:
//Lslalom_L90
// 大回りスラロームで右に90度回転する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void Lslalom_L90(void){
 8006ab4:	b580      	push	{r7, lr}
 8006ab6:	b082      	sub	sp, #8
 8006ab8:	af02      	add	r7, sp, #8
	full_led_write(YELLOW);
 8006aba:	2006      	movs	r0, #6
 8006abc:	f009 ff18 	bl	80108f0 <full_led_write>
	if(run_mode == LOW){
 8006ac0:	4b60      	ldr	r3, [pc, #384]	; (8006c44 <Lslalom_L90+0x190>)
 8006ac2:	781b      	ldrb	r3, [r3, #0]
 8006ac4:	b2db      	uxtb	r3, r3
 8006ac6:	2b01      	cmp	r3, #1
 8006ac8:	d129      	bne.n	8006b1e <Lslalom_L90+0x6a>
		slalomF(10000, SPEED_LOW, LSLALOM_OFFSET_F, LSLALOM_WALL_FL, LSLALOM_WALL_FR);
 8006aca:	2364      	movs	r3, #100	; 0x64
 8006acc:	9300      	str	r3, [sp, #0]
 8006ace:	23c8      	movs	r3, #200	; 0xc8
 8006ad0:	222d      	movs	r2, #45	; 0x2d
 8006ad2:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8006ad6:	f242 7010 	movw	r0, #10000	; 0x2710
 8006ada:	f7fe fcc9 	bl	8005470 <slalomF>
		slalomR(LSLALOM_DEGACCEL, LSLALOM_OMEGA, 90, SPEED_LOW);
 8006ade:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8006ae2:	225a      	movs	r2, #90	; 0x5a
 8006ae4:	21c8      	movs	r1, #200	; 0xc8
 8006ae6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8006aea:	f7fe fd3d 	bl	8005568 <slalomR>

		if(!MF.FLAG.XDIR){
 8006aee:	4b56      	ldr	r3, [pc, #344]	; (8006c48 <Lslalom_L90+0x194>)
 8006af0:	881b      	ldrh	r3, [r3, #0]
 8006af2:	f3c3 3300 	ubfx	r3, r3, #12, #1
 8006af6:	b2db      	uxtb	r3, r3
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d104      	bne.n	8006b06 <Lslalom_L90+0x52>
			turn_dir(DIR_TURN_L90, 1);										//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8006afc:	2101      	movs	r1, #1
 8006afe:	20ff      	movs	r0, #255	; 0xff
 8006b00:	f008 f86c 	bl	800ebdc <turn_dir>
 8006b04:	e003      	b.n	8006b0e <Lslalom_L90+0x5a>
		}else{
			turn_dir(DIR_TURN_L90_8, 3);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8006b06:	2103      	movs	r1, #3
 8006b08:	20fe      	movs	r0, #254	; 0xfe
 8006b0a:	f008 f867 	bl	800ebdc <turn_dir>
		}
		slalomB(10000, SPEED_LOW, LSLALOM_OFFSET_B);
 8006b0e:	2235      	movs	r2, #53	; 0x35
 8006b10:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8006b14:	f242 7010 	movw	r0, #10000	; 0x2710
 8006b18:	f7fe fe4a 	bl	80057b0 <slalomB>
		}else{
			turn_dir(DIR_TURN_L90_8, 3);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
		}
		slalomB(10000, SPEED_HIGH_HIGH, LSLALOM_H_H_OFFSET_B);
	}
}
 8006b1c:	e08e      	b.n	8006c3c <Lslalom_L90+0x188>
	}else if(run_mode == MIDDLE){
 8006b1e:	4b49      	ldr	r3, [pc, #292]	; (8006c44 <Lslalom_L90+0x190>)
 8006b20:	781b      	ldrb	r3, [r3, #0]
 8006b22:	b2db      	uxtb	r3, r3
 8006b24:	2b02      	cmp	r3, #2
 8006b26:	d12a      	bne.n	8006b7e <Lslalom_L90+0xca>
		slalomF(10000, SPEED_MIDDLE, LSLALOM_M_OFFSET_F, LSLALOM_M_WALL_FL, LSLALOM_M_WALL_FR);
 8006b28:	2378      	movs	r3, #120	; 0x78
 8006b2a:	9300      	str	r3, [sp, #0]
 8006b2c:	23f0      	movs	r3, #240	; 0xf0
 8006b2e:	223c      	movs	r2, #60	; 0x3c
 8006b30:	f44f 7116 	mov.w	r1, #600	; 0x258
 8006b34:	f242 7010 	movw	r0, #10000	; 0x2710
 8006b38:	f7fe fc9a 	bl	8005470 <slalomF>
		slalomR(LSLALOM_M_DEGACCEL, LSLALOM_M_OMEGA, 90, SPEED_MIDDLE);
 8006b3c:	f44f 7316 	mov.w	r3, #600	; 0x258
 8006b40:	225a      	movs	r2, #90	; 0x5a
 8006b42:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8006b46:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8006b4a:	f7fe fd0d 	bl	8005568 <slalomR>
		if(!MF.FLAG.XDIR){
 8006b4e:	4b3e      	ldr	r3, [pc, #248]	; (8006c48 <Lslalom_L90+0x194>)
 8006b50:	881b      	ldrh	r3, [r3, #0]
 8006b52:	f3c3 3300 	ubfx	r3, r3, #12, #1
 8006b56:	b2db      	uxtb	r3, r3
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d104      	bne.n	8006b66 <Lslalom_L90+0xb2>
			turn_dir(DIR_TURN_L90, 1);										//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8006b5c:	2101      	movs	r1, #1
 8006b5e:	20ff      	movs	r0, #255	; 0xff
 8006b60:	f008 f83c 	bl	800ebdc <turn_dir>
 8006b64:	e003      	b.n	8006b6e <Lslalom_L90+0xba>
			turn_dir(DIR_TURN_L90_8, 3);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8006b66:	2103      	movs	r1, #3
 8006b68:	20fe      	movs	r0, #254	; 0xfe
 8006b6a:	f008 f837 	bl	800ebdc <turn_dir>
		slalomB(10000, SPEED_MIDDLE, LSLALOM_M_OFFSET_B);
 8006b6e:	2258      	movs	r2, #88	; 0x58
 8006b70:	f44f 7116 	mov.w	r1, #600	; 0x258
 8006b74:	f242 7010 	movw	r0, #10000	; 0x2710
 8006b78:	f7fe fe1a 	bl	80057b0 <slalomB>
}
 8006b7c:	e05e      	b.n	8006c3c <Lslalom_L90+0x188>
	}else if(run_mode == HIGH){
 8006b7e:	4b31      	ldr	r3, [pc, #196]	; (8006c44 <Lslalom_L90+0x190>)
 8006b80:	781b      	ldrb	r3, [r3, #0]
 8006b82:	b2db      	uxtb	r3, r3
 8006b84:	2b03      	cmp	r3, #3
 8006b86:	d12a      	bne.n	8006bde <Lslalom_L90+0x12a>
		slalomF(10000, SPEED_HIGH, LSLALOM_H_OFFSET_F, LSLALOM_H_WALL_FL, LSLALOM_H_WALL_FR);
 8006b88:	2364      	movs	r3, #100	; 0x64
 8006b8a:	9300      	str	r3, [sp, #0]
 8006b8c:	23c8      	movs	r3, #200	; 0xc8
 8006b8e:	222d      	movs	r2, #45	; 0x2d
 8006b90:	f44f 7148 	mov.w	r1, #800	; 0x320
 8006b94:	f242 7010 	movw	r0, #10000	; 0x2710
 8006b98:	f7fe fc6a 	bl	8005470 <slalomF>
		slalomR(LSLALOM_H_DEGACCEL, LSLALOM_H_OMEGA, 90, SPEED_HIGH);
 8006b9c:	f44f 7348 	mov.w	r3, #800	; 0x320
 8006ba0:	225a      	movs	r2, #90	; 0x5a
 8006ba2:	f44f 7116 	mov.w	r1, #600	; 0x258
 8006ba6:	f241 1094 	movw	r0, #4500	; 0x1194
 8006baa:	f7fe fcdd 	bl	8005568 <slalomR>
		if(!MF.FLAG.XDIR){
 8006bae:	4b26      	ldr	r3, [pc, #152]	; (8006c48 <Lslalom_L90+0x194>)
 8006bb0:	881b      	ldrh	r3, [r3, #0]
 8006bb2:	f3c3 3300 	ubfx	r3, r3, #12, #1
 8006bb6:	b2db      	uxtb	r3, r3
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d104      	bne.n	8006bc6 <Lslalom_L90+0x112>
			turn_dir(DIR_TURN_L90, 1);										//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8006bbc:	2101      	movs	r1, #1
 8006bbe:	20ff      	movs	r0, #255	; 0xff
 8006bc0:	f008 f80c 	bl	800ebdc <turn_dir>
 8006bc4:	e003      	b.n	8006bce <Lslalom_L90+0x11a>
			turn_dir(DIR_TURN_L90_8, 3);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8006bc6:	2103      	movs	r1, #3
 8006bc8:	20fe      	movs	r0, #254	; 0xfe
 8006bca:	f008 f807 	bl	800ebdc <turn_dir>
		slalomB(10000, SPEED_HIGH, LSLALOM_H_OFFSET_B);
 8006bce:	2258      	movs	r2, #88	; 0x58
 8006bd0:	f44f 7148 	mov.w	r1, #800	; 0x320
 8006bd4:	f242 7010 	movw	r0, #10000	; 0x2710
 8006bd8:	f7fe fdea 	bl	80057b0 <slalomB>
}
 8006bdc:	e02e      	b.n	8006c3c <Lslalom_L90+0x188>
	}else if(run_mode == HIGH_HIGH){
 8006bde:	4b19      	ldr	r3, [pc, #100]	; (8006c44 <Lslalom_L90+0x190>)
 8006be0:	781b      	ldrb	r3, [r3, #0]
 8006be2:	b2db      	uxtb	r3, r3
 8006be4:	2b04      	cmp	r3, #4
 8006be6:	d129      	bne.n	8006c3c <Lslalom_L90+0x188>
		slalomF(10000, SPEED_HIGH_HIGH, LSLALOM_H_H_OFFSET_F, LSLALOM_H_H_WALL_FL, LSLALOM_H_H_WALL_FR);
 8006be8:	2364      	movs	r3, #100	; 0x64
 8006bea:	9300      	str	r3, [sp, #0]
 8006bec:	23c8      	movs	r3, #200	; 0xc8
 8006bee:	2232      	movs	r2, #50	; 0x32
 8006bf0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8006bf4:	f242 7010 	movw	r0, #10000	; 0x2710
 8006bf8:	f7fe fc3a 	bl	8005470 <slalomF>
		slalomR(LSLALOM_H_H_DEGACCEL, LSLALOM_H_H_OMEGA, 85, SPEED_HIGH_HIGH);
 8006bfc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006c00:	2255      	movs	r2, #85	; 0x55
 8006c02:	f44f 7148 	mov.w	r1, #800	; 0x320
 8006c06:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 8006c0a:	f7fe fcad 	bl	8005568 <slalomR>
		if(!MF.FLAG.XDIR){
 8006c0e:	4b0e      	ldr	r3, [pc, #56]	; (8006c48 <Lslalom_L90+0x194>)
 8006c10:	881b      	ldrh	r3, [r3, #0]
 8006c12:	f3c3 3300 	ubfx	r3, r3, #12, #1
 8006c16:	b2db      	uxtb	r3, r3
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d104      	bne.n	8006c26 <Lslalom_L90+0x172>
			turn_dir(DIR_TURN_L90, 1);										//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8006c1c:	2101      	movs	r1, #1
 8006c1e:	20ff      	movs	r0, #255	; 0xff
 8006c20:	f007 ffdc 	bl	800ebdc <turn_dir>
 8006c24:	e003      	b.n	8006c2e <Lslalom_L90+0x17a>
			turn_dir(DIR_TURN_L90_8, 3);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8006c26:	2103      	movs	r1, #3
 8006c28:	20fe      	movs	r0, #254	; 0xfe
 8006c2a:	f007 ffd7 	bl	800ebdc <turn_dir>
		slalomB(10000, SPEED_HIGH_HIGH, LSLALOM_H_H_OFFSET_B);
 8006c2e:	226e      	movs	r2, #110	; 0x6e
 8006c30:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8006c34:	f242 7010 	movw	r0, #10000	; 0x2710
 8006c38:	f7fe fdba 	bl	80057b0 <slalomB>
}
 8006c3c:	bf00      	nop
 8006c3e:	46bd      	mov	sp, r7
 8006c40:	bd80      	pop	{r7, pc}
 8006c42:	bf00      	nop
 8006c44:	20000456 	.word	0x20000456
 8006c48:	20000f68 	.word	0x20000f68

08006c4c <Lslalom_R180>:
//Lslalom_R180
// スラロームで右に180度回転する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void Lslalom_R180(void){
 8006c4c:	b580      	push	{r7, lr}
 8006c4e:	b082      	sub	sp, #8
 8006c50:	af02      	add	r7, sp, #8
	full_led_write(GREEN);
 8006c52:	2002      	movs	r0, #2
 8006c54:	f009 fe4c 	bl	80108f0 <full_led_write>
	if(run_mode == LOW){
 8006c58:	4b66      	ldr	r3, [pc, #408]	; (8006df4 <Lslalom_R180+0x1a8>)
 8006c5a:	781b      	ldrb	r3, [r3, #0]
 8006c5c:	b2db      	uxtb	r3, r3
 8006c5e:	2b01      	cmp	r3, #1
 8006c60:	d12d      	bne.n	8006cbe <Lslalom_R180+0x72>
		slalomF(10000, SPEED_LOW, LROTATE_OFFSET_F, LROTATE_WALL_FL, LROTATE_WALL_FR);
 8006c62:	2364      	movs	r3, #100	; 0x64
 8006c64:	9300      	str	r3, [sp, #0]
 8006c66:	23c8      	movs	r3, #200	; 0xc8
 8006c68:	223c      	movs	r2, #60	; 0x3c
 8006c6a:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8006c6e:	f242 7010 	movw	r0, #10000	; 0x2710
 8006c72:	f7fe fbfd 	bl	8005470 <slalomF>
		slalomR(-LROTATE_DEGACCEL, -LROTATE_OMEGA, -180, SPEED_LOW);
 8006c76:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8006c7a:	f06f 02b3 	mvn.w	r2, #179	; 0xb3
 8006c7e:	495e      	ldr	r1, [pc, #376]	; (8006df8 <Lslalom_R180+0x1ac>)
 8006c80:	485e      	ldr	r0, [pc, #376]	; (8006dfc <Lslalom_R180+0x1b0>)
 8006c82:	f7fe fc71 	bl	8005568 <slalomR>

		if(!MF.FLAG.XDIR){
 8006c86:	4b5e      	ldr	r3, [pc, #376]	; (8006e00 <Lslalom_R180+0x1b4>)
 8006c88:	881b      	ldrh	r3, [r3, #0]
 8006c8a:	f3c3 3300 	ubfx	r3, r3, #12, #1
 8006c8e:	b2db      	uxtb	r3, r3
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d108      	bne.n	8006ca6 <Lslalom_R180+0x5a>
			turn_dir(DIR_TURN_R90, 1);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8006c94:	2101      	movs	r1, #1
 8006c96:	2001      	movs	r0, #1
 8006c98:	f007 ffa0 	bl	800ebdc <turn_dir>
			turn_dir(DIR_TURN_R90, 1);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8006c9c:	2101      	movs	r1, #1
 8006c9e:	2001      	movs	r0, #1
 8006ca0:	f007 ff9c 	bl	800ebdc <turn_dir>
 8006ca4:	e003      	b.n	8006cae <Lslalom_R180+0x62>
		}else{
			turn_dir(DIR_TURN_R180_8, 3);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8006ca6:	2103      	movs	r1, #3
 8006ca8:	2004      	movs	r0, #4
 8006caa:	f007 ff97 	bl	800ebdc <turn_dir>
		}
		slalomB(10000, SPEED_LOW, LROTATE_OFFSET_B);
 8006cae:	2250      	movs	r2, #80	; 0x50
 8006cb0:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8006cb4:	f242 7010 	movw	r0, #10000	; 0x2710
 8006cb8:	f7fe fd7a 	bl	80057b0 <slalomB>
		}else{
			turn_dir(DIR_TURN_R180_8, 3);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
		}
		slalomB(10000, SPEED_HIGH_HIGH, LROTATE_H_H_OFFSET_B);
	}
}
 8006cbc:	e097      	b.n	8006dee <Lslalom_R180+0x1a2>
	}else if(run_mode == MIDDLE){
 8006cbe:	4b4d      	ldr	r3, [pc, #308]	; (8006df4 <Lslalom_R180+0x1a8>)
 8006cc0:	781b      	ldrb	r3, [r3, #0]
 8006cc2:	b2db      	uxtb	r3, r3
 8006cc4:	2b02      	cmp	r3, #2
 8006cc6:	d12d      	bne.n	8006d24 <Lslalom_R180+0xd8>
		slalomF(10000, SPEED_MIDDLE, LROTATE_M_OFFSET_F, LROTATE_M_WALL_FL, LROTATE_M_WALL_FR);
 8006cc8:	2364      	movs	r3, #100	; 0x64
 8006cca:	9300      	str	r3, [sp, #0]
 8006ccc:	23c8      	movs	r3, #200	; 0xc8
 8006cce:	2232      	movs	r2, #50	; 0x32
 8006cd0:	f44f 7116 	mov.w	r1, #600	; 0x258
 8006cd4:	f242 7010 	movw	r0, #10000	; 0x2710
 8006cd8:	f7fe fbca 	bl	8005470 <slalomF>
		slalomR(-LROTATE_M_DEGACCEL, -LROTATE_M_OMEGA, -180, SPEED_MIDDLE);
 8006cdc:	f44f 7316 	mov.w	r3, #600	; 0x258
 8006ce0:	f06f 02b3 	mvn.w	r2, #179	; 0xb3
 8006ce4:	4947      	ldr	r1, [pc, #284]	; (8006e04 <Lslalom_R180+0x1b8>)
 8006ce6:	4848      	ldr	r0, [pc, #288]	; (8006e08 <Lslalom_R180+0x1bc>)
 8006ce8:	f7fe fc3e 	bl	8005568 <slalomR>
		if(!MF.FLAG.XDIR){
 8006cec:	4b44      	ldr	r3, [pc, #272]	; (8006e00 <Lslalom_R180+0x1b4>)
 8006cee:	881b      	ldrh	r3, [r3, #0]
 8006cf0:	f3c3 3300 	ubfx	r3, r3, #12, #1
 8006cf4:	b2db      	uxtb	r3, r3
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d108      	bne.n	8006d0c <Lslalom_R180+0xc0>
			turn_dir(DIR_TURN_R90, 1);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8006cfa:	2101      	movs	r1, #1
 8006cfc:	2001      	movs	r0, #1
 8006cfe:	f007 ff6d 	bl	800ebdc <turn_dir>
			turn_dir(DIR_TURN_R90, 1);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8006d02:	2101      	movs	r1, #1
 8006d04:	2001      	movs	r0, #1
 8006d06:	f007 ff69 	bl	800ebdc <turn_dir>
 8006d0a:	e003      	b.n	8006d14 <Lslalom_R180+0xc8>
			turn_dir(DIR_TURN_R180_8, 3);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8006d0c:	2103      	movs	r1, #3
 8006d0e:	2004      	movs	r0, #4
 8006d10:	f007 ff64 	bl	800ebdc <turn_dir>
		slalomB(10000, SPEED_MIDDLE, LROTATE_M_OFFSET_B);
 8006d14:	224e      	movs	r2, #78	; 0x4e
 8006d16:	f44f 7116 	mov.w	r1, #600	; 0x258
 8006d1a:	f242 7010 	movw	r0, #10000	; 0x2710
 8006d1e:	f7fe fd47 	bl	80057b0 <slalomB>
}
 8006d22:	e064      	b.n	8006dee <Lslalom_R180+0x1a2>
	}else if(run_mode == HIGH){
 8006d24:	4b33      	ldr	r3, [pc, #204]	; (8006df4 <Lslalom_R180+0x1a8>)
 8006d26:	781b      	ldrb	r3, [r3, #0]
 8006d28:	b2db      	uxtb	r3, r3
 8006d2a:	2b03      	cmp	r3, #3
 8006d2c:	d12d      	bne.n	8006d8a <Lslalom_R180+0x13e>
		slalomF(10000, SPEED_HIGH, LROTATE_H_OFFSET_F, LROTATE_H_WALL_FL, LROTATE_H_WALL_FR);
 8006d2e:	235a      	movs	r3, #90	; 0x5a
 8006d30:	9300      	str	r3, [sp, #0]
 8006d32:	23b4      	movs	r3, #180	; 0xb4
 8006d34:	221c      	movs	r2, #28
 8006d36:	f44f 7148 	mov.w	r1, #800	; 0x320
 8006d3a:	f242 7010 	movw	r0, #10000	; 0x2710
 8006d3e:	f7fe fb97 	bl	8005470 <slalomF>
		slalomR(-LROTATE_H_DEGACCEL, -LROTATE_H_OMEGA, -180, SPEED_HIGH);
 8006d42:	f44f 7348 	mov.w	r3, #800	; 0x320
 8006d46:	f06f 02b3 	mvn.w	r2, #179	; 0xb3
 8006d4a:	4930      	ldr	r1, [pc, #192]	; (8006e0c <Lslalom_R180+0x1c0>)
 8006d4c:	482e      	ldr	r0, [pc, #184]	; (8006e08 <Lslalom_R180+0x1bc>)
 8006d4e:	f7fe fc0b 	bl	8005568 <slalomR>
		if(!MF.FLAG.XDIR){
 8006d52:	4b2b      	ldr	r3, [pc, #172]	; (8006e00 <Lslalom_R180+0x1b4>)
 8006d54:	881b      	ldrh	r3, [r3, #0]
 8006d56:	f3c3 3300 	ubfx	r3, r3, #12, #1
 8006d5a:	b2db      	uxtb	r3, r3
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d108      	bne.n	8006d72 <Lslalom_R180+0x126>
			turn_dir(DIR_TURN_R90, 1);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8006d60:	2101      	movs	r1, #1
 8006d62:	2001      	movs	r0, #1
 8006d64:	f007 ff3a 	bl	800ebdc <turn_dir>
			turn_dir(DIR_TURN_R90, 1);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8006d68:	2101      	movs	r1, #1
 8006d6a:	2001      	movs	r0, #1
 8006d6c:	f007 ff36 	bl	800ebdc <turn_dir>
 8006d70:	e003      	b.n	8006d7a <Lslalom_R180+0x12e>
			turn_dir(DIR_TURN_R180_8, 3);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8006d72:	2103      	movs	r1, #3
 8006d74:	2004      	movs	r0, #4
 8006d76:	f007 ff31 	bl	800ebdc <turn_dir>
		slalomB(10000, SPEED_HIGH, LROTATE_H_OFFSET_B);
 8006d7a:	224e      	movs	r2, #78	; 0x4e
 8006d7c:	f44f 7148 	mov.w	r1, #800	; 0x320
 8006d80:	f242 7010 	movw	r0, #10000	; 0x2710
 8006d84:	f7fe fd14 	bl	80057b0 <slalomB>
}
 8006d88:	e031      	b.n	8006dee <Lslalom_R180+0x1a2>
	}else if(run_mode == HIGH_HIGH){
 8006d8a:	4b1a      	ldr	r3, [pc, #104]	; (8006df4 <Lslalom_R180+0x1a8>)
 8006d8c:	781b      	ldrb	r3, [r3, #0]
 8006d8e:	b2db      	uxtb	r3, r3
 8006d90:	2b04      	cmp	r3, #4
 8006d92:	d12c      	bne.n	8006dee <Lslalom_R180+0x1a2>
		slalomF(10000, SPEED_HIGH_HIGH, LROTATE_H_H_OFFSET_F, LROTATE_H_H_WALL_FL, LROTATE_H_H_WALL_FR);
 8006d94:	235a      	movs	r3, #90	; 0x5a
 8006d96:	9300      	str	r3, [sp, #0]
 8006d98:	23b4      	movs	r3, #180	; 0xb4
 8006d9a:	2232      	movs	r2, #50	; 0x32
 8006d9c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8006da0:	f242 7010 	movw	r0, #10000	; 0x2710
 8006da4:	f7fe fb64 	bl	8005470 <slalomF>
		slalomR(-LROTATE_H_H_DEGACCEL, -LROTATE_H_H_OMEGA, -170, SPEED_HIGH_HIGH);
 8006da8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006dac:	f06f 02a9 	mvn.w	r2, #169	; 0xa9
 8006db0:	4917      	ldr	r1, [pc, #92]	; (8006e10 <Lslalom_R180+0x1c4>)
 8006db2:	4818      	ldr	r0, [pc, #96]	; (8006e14 <Lslalom_R180+0x1c8>)
 8006db4:	f7fe fbd8 	bl	8005568 <slalomR>
		if(!MF.FLAG.XDIR){
 8006db8:	4b11      	ldr	r3, [pc, #68]	; (8006e00 <Lslalom_R180+0x1b4>)
 8006dba:	881b      	ldrh	r3, [r3, #0]
 8006dbc:	f3c3 3300 	ubfx	r3, r3, #12, #1
 8006dc0:	b2db      	uxtb	r3, r3
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d108      	bne.n	8006dd8 <Lslalom_R180+0x18c>
			turn_dir(DIR_TURN_R90, 1);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8006dc6:	2101      	movs	r1, #1
 8006dc8:	2001      	movs	r0, #1
 8006dca:	f007 ff07 	bl	800ebdc <turn_dir>
			turn_dir(DIR_TURN_R90, 1);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8006dce:	2101      	movs	r1, #1
 8006dd0:	2001      	movs	r0, #1
 8006dd2:	f007 ff03 	bl	800ebdc <turn_dir>
 8006dd6:	e003      	b.n	8006de0 <Lslalom_R180+0x194>
			turn_dir(DIR_TURN_R180_8, 3);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8006dd8:	2103      	movs	r1, #3
 8006dda:	2004      	movs	r0, #4
 8006ddc:	f007 fefe 	bl	800ebdc <turn_dir>
		slalomB(10000, SPEED_HIGH_HIGH, LROTATE_H_H_OFFSET_B);
 8006de0:	227d      	movs	r2, #125	; 0x7d
 8006de2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8006de6:	f242 7010 	movw	r0, #10000	; 0x2710
 8006dea:	f7fe fce1 	bl	80057b0 <slalomB>
}
 8006dee:	bf00      	nop
 8006df0:	46bd      	mov	sp, r7
 8006df2:	bd80      	pop	{r7, pc}
 8006df4:	20000456 	.word	0x20000456
 8006df8:	fffffefc 	.word	0xfffffefc
 8006dfc:	fffff830 	.word	0xfffff830
 8006e00:	20000f68 	.word	0x20000f68
 8006e04:	fffffe74 	.word	0xfffffe74
 8006e08:	fffff448 	.word	0xfffff448
 8006e0c:	fffffdd0 	.word	0xfffffdd0
 8006e10:	fffffd85 	.word	0xfffffd85
 8006e14:	ffffe0c0 	.word	0xffffe0c0

08006e18 <Lslalom_L180>:
//Lslalom_L180
// 大回りスラロームで右に180度回転する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void Lslalom_L180(void){
 8006e18:	b580      	push	{r7, lr}
 8006e1a:	b082      	sub	sp, #8
 8006e1c:	af02      	add	r7, sp, #8
	full_led_write(GREEN);
 8006e1e:	2002      	movs	r0, #2
 8006e20:	f009 fd66 	bl	80108f0 <full_led_write>
	if(run_mode == LOW){
 8006e24:	4b68      	ldr	r3, [pc, #416]	; (8006fc8 <Lslalom_L180+0x1b0>)
 8006e26:	781b      	ldrb	r3, [r3, #0]
 8006e28:	b2db      	uxtb	r3, r3
 8006e2a:	2b01      	cmp	r3, #1
 8006e2c:	d12e      	bne.n	8006e8c <Lslalom_L180+0x74>
		slalomF(10000, SPEED_LOW, LROTATE_OFFSET_F, LROTATE_WALL_FL, LROTATE_WALL_FR);
 8006e2e:	2364      	movs	r3, #100	; 0x64
 8006e30:	9300      	str	r3, [sp, #0]
 8006e32:	23c8      	movs	r3, #200	; 0xc8
 8006e34:	223c      	movs	r2, #60	; 0x3c
 8006e36:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8006e3a:	f242 7010 	movw	r0, #10000	; 0x2710
 8006e3e:	f7fe fb17 	bl	8005470 <slalomF>
		slalomR(LROTATE_DEGACCEL, LROTATE_OMEGA, 180, SPEED_LOW);
 8006e42:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8006e46:	22b4      	movs	r2, #180	; 0xb4
 8006e48:	f44f 7182 	mov.w	r1, #260	; 0x104
 8006e4c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8006e50:	f7fe fb8a 	bl	8005568 <slalomR>

		if(!MF.FLAG.XDIR){
 8006e54:	4b5d      	ldr	r3, [pc, #372]	; (8006fcc <Lslalom_L180+0x1b4>)
 8006e56:	881b      	ldrh	r3, [r3, #0]
 8006e58:	f3c3 3300 	ubfx	r3, r3, #12, #1
 8006e5c:	b2db      	uxtb	r3, r3
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d108      	bne.n	8006e74 <Lslalom_L180+0x5c>
			turn_dir(DIR_TURN_L90, 1);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8006e62:	2101      	movs	r1, #1
 8006e64:	20ff      	movs	r0, #255	; 0xff
 8006e66:	f007 feb9 	bl	800ebdc <turn_dir>
			turn_dir(DIR_TURN_L90, 1);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8006e6a:	2101      	movs	r1, #1
 8006e6c:	20ff      	movs	r0, #255	; 0xff
 8006e6e:	f007 feb5 	bl	800ebdc <turn_dir>
 8006e72:	e003      	b.n	8006e7c <Lslalom_L180+0x64>
		}else{
			turn_dir(DIR_TURN_L180_8, 3);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8006e74:	2103      	movs	r1, #3
 8006e76:	20fc      	movs	r0, #252	; 0xfc
 8006e78:	f007 feb0 	bl	800ebdc <turn_dir>
		}
		slalomB(10000, SPEED_LOW, LROTATE_OFFSET_B);
 8006e7c:	2250      	movs	r2, #80	; 0x50
 8006e7e:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8006e82:	f242 7010 	movw	r0, #10000	; 0x2710
 8006e86:	f7fe fc93 	bl	80057b0 <slalomB>
		}else{
			turn_dir(DIR_TURN_L180_8, 3);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
		}
		slalomB(10000, SPEED_HIGH_HIGH, LROTATE_H_H_OFFSET_B);
	}
}
 8006e8a:	e09a      	b.n	8006fc2 <Lslalom_L180+0x1aa>
	}else if(run_mode == MIDDLE){
 8006e8c:	4b4e      	ldr	r3, [pc, #312]	; (8006fc8 <Lslalom_L180+0x1b0>)
 8006e8e:	781b      	ldrb	r3, [r3, #0]
 8006e90:	b2db      	uxtb	r3, r3
 8006e92:	2b02      	cmp	r3, #2
 8006e94:	d12e      	bne.n	8006ef4 <Lslalom_L180+0xdc>
		slalomF(10000, SPEED_MIDDLE, LROTATE_M_OFFSET_F, LROTATE_M_WALL_FL, LROTATE_M_WALL_FR);
 8006e96:	2364      	movs	r3, #100	; 0x64
 8006e98:	9300      	str	r3, [sp, #0]
 8006e9a:	23c8      	movs	r3, #200	; 0xc8
 8006e9c:	2232      	movs	r2, #50	; 0x32
 8006e9e:	f44f 7116 	mov.w	r1, #600	; 0x258
 8006ea2:	f242 7010 	movw	r0, #10000	; 0x2710
 8006ea6:	f7fe fae3 	bl	8005470 <slalomF>
		slalomR(LROTATE_M_DEGACCEL, LROTATE_M_OMEGA, 180, SPEED_MIDDLE);
 8006eaa:	f44f 7316 	mov.w	r3, #600	; 0x258
 8006eae:	22b4      	movs	r2, #180	; 0xb4
 8006eb0:	f44f 71c6 	mov.w	r1, #396	; 0x18c
 8006eb4:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8006eb8:	f7fe fb56 	bl	8005568 <slalomR>
		if(!MF.FLAG.XDIR){
 8006ebc:	4b43      	ldr	r3, [pc, #268]	; (8006fcc <Lslalom_L180+0x1b4>)
 8006ebe:	881b      	ldrh	r3, [r3, #0]
 8006ec0:	f3c3 3300 	ubfx	r3, r3, #12, #1
 8006ec4:	b2db      	uxtb	r3, r3
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d108      	bne.n	8006edc <Lslalom_L180+0xc4>
			turn_dir(DIR_TURN_L90, 1);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8006eca:	2101      	movs	r1, #1
 8006ecc:	20ff      	movs	r0, #255	; 0xff
 8006ece:	f007 fe85 	bl	800ebdc <turn_dir>
			turn_dir(DIR_TURN_L90, 1);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8006ed2:	2101      	movs	r1, #1
 8006ed4:	20ff      	movs	r0, #255	; 0xff
 8006ed6:	f007 fe81 	bl	800ebdc <turn_dir>
 8006eda:	e003      	b.n	8006ee4 <Lslalom_L180+0xcc>
			turn_dir(DIR_TURN_L180_8, 3);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8006edc:	2103      	movs	r1, #3
 8006ede:	20fc      	movs	r0, #252	; 0xfc
 8006ee0:	f007 fe7c 	bl	800ebdc <turn_dir>
		slalomB(10000, SPEED_MIDDLE, LROTATE_M_OFFSET_B);
 8006ee4:	224e      	movs	r2, #78	; 0x4e
 8006ee6:	f44f 7116 	mov.w	r1, #600	; 0x258
 8006eea:	f242 7010 	movw	r0, #10000	; 0x2710
 8006eee:	f7fe fc5f 	bl	80057b0 <slalomB>
}
 8006ef2:	e066      	b.n	8006fc2 <Lslalom_L180+0x1aa>
	}else if(run_mode == HIGH){
 8006ef4:	4b34      	ldr	r3, [pc, #208]	; (8006fc8 <Lslalom_L180+0x1b0>)
 8006ef6:	781b      	ldrb	r3, [r3, #0]
 8006ef8:	b2db      	uxtb	r3, r3
 8006efa:	2b03      	cmp	r3, #3
 8006efc:	d12e      	bne.n	8006f5c <Lslalom_L180+0x144>
		slalomF(10000, SPEED_HIGH, LROTATE_H_OFFSET_F, LROTATE_H_WALL_FL, LROTATE_H_WALL_FR);
 8006efe:	235a      	movs	r3, #90	; 0x5a
 8006f00:	9300      	str	r3, [sp, #0]
 8006f02:	23b4      	movs	r3, #180	; 0xb4
 8006f04:	221c      	movs	r2, #28
 8006f06:	f44f 7148 	mov.w	r1, #800	; 0x320
 8006f0a:	f242 7010 	movw	r0, #10000	; 0x2710
 8006f0e:	f7fe faaf 	bl	8005470 <slalomF>
		slalomR(LROTATE_H_DEGACCEL, LROTATE_H_OMEGA, 180, SPEED_HIGH);
 8006f12:	f44f 7348 	mov.w	r3, #800	; 0x320
 8006f16:	22b4      	movs	r2, #180	; 0xb4
 8006f18:	f44f 710c 	mov.w	r1, #560	; 0x230
 8006f1c:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8006f20:	f7fe fb22 	bl	8005568 <slalomR>
		if(!MF.FLAG.XDIR){
 8006f24:	4b29      	ldr	r3, [pc, #164]	; (8006fcc <Lslalom_L180+0x1b4>)
 8006f26:	881b      	ldrh	r3, [r3, #0]
 8006f28:	f3c3 3300 	ubfx	r3, r3, #12, #1
 8006f2c:	b2db      	uxtb	r3, r3
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d108      	bne.n	8006f44 <Lslalom_L180+0x12c>
			turn_dir(DIR_TURN_L90, 1);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8006f32:	2101      	movs	r1, #1
 8006f34:	20ff      	movs	r0, #255	; 0xff
 8006f36:	f007 fe51 	bl	800ebdc <turn_dir>
			turn_dir(DIR_TURN_L90, 1);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8006f3a:	2101      	movs	r1, #1
 8006f3c:	20ff      	movs	r0, #255	; 0xff
 8006f3e:	f007 fe4d 	bl	800ebdc <turn_dir>
 8006f42:	e003      	b.n	8006f4c <Lslalom_L180+0x134>
			turn_dir(DIR_TURN_L180_8, 3);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8006f44:	2103      	movs	r1, #3
 8006f46:	20fc      	movs	r0, #252	; 0xfc
 8006f48:	f007 fe48 	bl	800ebdc <turn_dir>
		slalomB(10000, SPEED_HIGH, LROTATE_H_OFFSET_B);
 8006f4c:	224e      	movs	r2, #78	; 0x4e
 8006f4e:	f44f 7148 	mov.w	r1, #800	; 0x320
 8006f52:	f242 7010 	movw	r0, #10000	; 0x2710
 8006f56:	f7fe fc2b 	bl	80057b0 <slalomB>
}
 8006f5a:	e032      	b.n	8006fc2 <Lslalom_L180+0x1aa>
	}else if(run_mode == HIGH_HIGH){
 8006f5c:	4b1a      	ldr	r3, [pc, #104]	; (8006fc8 <Lslalom_L180+0x1b0>)
 8006f5e:	781b      	ldrb	r3, [r3, #0]
 8006f60:	b2db      	uxtb	r3, r3
 8006f62:	2b04      	cmp	r3, #4
 8006f64:	d12d      	bne.n	8006fc2 <Lslalom_L180+0x1aa>
		slalomF(10000, SPEED_HIGH_HIGH, LROTATE_H_H_OFFSET_F, LROTATE_H_H_WALL_FL, LROTATE_H_H_WALL_FR);
 8006f66:	235a      	movs	r3, #90	; 0x5a
 8006f68:	9300      	str	r3, [sp, #0]
 8006f6a:	23b4      	movs	r3, #180	; 0xb4
 8006f6c:	2232      	movs	r2, #50	; 0x32
 8006f6e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8006f72:	f242 7010 	movw	r0, #10000	; 0x2710
 8006f76:	f7fe fa7b 	bl	8005470 <slalomF>
		slalomR(LROTATE_H_H_DEGACCEL, LROTATE_H_H_OMEGA, 170, SPEED_HIGH_HIGH);
 8006f7a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006f7e:	22aa      	movs	r2, #170	; 0xaa
 8006f80:	f240 217b 	movw	r1, #635	; 0x27b
 8006f84:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 8006f88:	f7fe faee 	bl	8005568 <slalomR>
		if(!MF.FLAG.XDIR){
 8006f8c:	4b0f      	ldr	r3, [pc, #60]	; (8006fcc <Lslalom_L180+0x1b4>)
 8006f8e:	881b      	ldrh	r3, [r3, #0]
 8006f90:	f3c3 3300 	ubfx	r3, r3, #12, #1
 8006f94:	b2db      	uxtb	r3, r3
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d108      	bne.n	8006fac <Lslalom_L180+0x194>
			turn_dir(DIR_TURN_L90, 1);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8006f9a:	2101      	movs	r1, #1
 8006f9c:	20ff      	movs	r0, #255	; 0xff
 8006f9e:	f007 fe1d 	bl	800ebdc <turn_dir>
			turn_dir(DIR_TURN_L90, 1);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8006fa2:	2101      	movs	r1, #1
 8006fa4:	20ff      	movs	r0, #255	; 0xff
 8006fa6:	f007 fe19 	bl	800ebdc <turn_dir>
 8006faa:	e003      	b.n	8006fb4 <Lslalom_L180+0x19c>
			turn_dir(DIR_TURN_L180_8, 3);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8006fac:	2103      	movs	r1, #3
 8006fae:	20fc      	movs	r0, #252	; 0xfc
 8006fb0:	f007 fe14 	bl	800ebdc <turn_dir>
		slalomB(10000, SPEED_HIGH_HIGH, LROTATE_H_H_OFFSET_B);
 8006fb4:	227d      	movs	r2, #125	; 0x7d
 8006fb6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8006fba:	f242 7010 	movw	r0, #10000	; 0x2710
 8006fbe:	f7fe fbf7 	bl	80057b0 <slalomB>
}
 8006fc2:	bf00      	nop
 8006fc4:	46bd      	mov	sp, r7
 8006fc6:	bd80      	pop	{r7, pc}
 8006fc8:	20000456 	.word	0x20000456
 8006fcc:	20000f68 	.word	0x20000f68

08006fd0 <v_R45>:
//v_R45
// 区画中心から右に45度回転する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void v_R45(void){
 8006fd0:	b580      	push	{r7, lr}
 8006fd2:	b082      	sub	sp, #8
 8006fd4:	af02      	add	r7, sp, #8
	full_led_write(PURPLE);
 8006fd6:	2005      	movs	r0, #5
 8006fd8:	f009 fc8a 	bl	80108f0 <full_led_write>
	if(run_mode == LOW){
 8006fdc:	4bb6      	ldr	r3, [pc, #728]	; (80072b8 <v_R45+0x2e8>)
 8006fde:	781b      	ldrb	r3, [r3, #0]
 8006fe0:	b2db      	uxtb	r3, r3
 8006fe2:	2b01      	cmp	r3, #1
 8006fe4:	d155      	bne.n	8007092 <v_R45+0xc2>
		if(!MF2.FLAG.V){
 8006fe6:	4bb5      	ldr	r3, [pc, #724]	; (80072bc <v_R45+0x2ec>)
 8006fe8:	881b      	ldrh	r3, [r3, #0]
 8006fea:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8006fee:	b2db      	uxtb	r3, r3
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d10c      	bne.n	800700e <v_R45+0x3e>
			slalomF(10000, SPEED_LOW, V_OFFSET_F, NO_WALL, NO_WALL);
 8006ff4:	f241 3388 	movw	r3, #5000	; 0x1388
 8006ff8:	9300      	str	r3, [sp, #0]
 8006ffa:	f241 3388 	movw	r3, #5000	; 0x1388
 8006ffe:	2228      	movs	r2, #40	; 0x28
 8007000:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8007004:	f242 7010 	movw	r0, #10000	; 0x2710
 8007008:	f7fe fa32 	bl	8005470 <slalomF>
 800700c:	e00b      	b.n	8007026 <v_R45+0x56>
		}else{
			slalomF(10000, SPEED_LOW, V_OFFSET_B, NO_WALL, NO_WALL);
 800700e:	f241 3388 	movw	r3, #5000	; 0x1388
 8007012:	9300      	str	r3, [sp, #0]
 8007014:	f241 3388 	movw	r3, #5000	; 0x1388
 8007018:	2255      	movs	r2, #85	; 0x55
 800701a:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800701e:	f242 7010 	movw	r0, #10000	; 0x2710
 8007022:	f7fe fa25 	bl	8005470 <slalomF>
		}
		slalomR(-V_DEGACCEL, -V_OMEGA, -45, SPEED_LOW);
 8007026:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800702a:	f06f 022c 	mvn.w	r2, #44	; 0x2c
 800702e:	49a4      	ldr	r1, [pc, #656]	; (80072c0 <v_R45+0x2f0>)
 8007030:	48a4      	ldr	r0, [pc, #656]	; (80072c4 <v_R45+0x2f4>)
 8007032:	f7fe fa99 	bl	8005568 <slalomR>

		turn_dir(DIR_TURN_R45_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 8007036:	2103      	movs	r1, #3
 8007038:	2001      	movs	r0, #1
 800703a:	f007 fdcf 	bl	800ebdc <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 800703e:	4b9f      	ldr	r3, [pc, #636]	; (80072bc <v_R45+0x2ec>)
 8007040:	881b      	ldrh	r3, [r3, #0]
 8007042:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8007046:	b2db      	uxtb	r3, r3
 8007048:	3301      	adds	r3, #1
 800704a:	2b00      	cmp	r3, #0
 800704c:	f003 0301 	and.w	r3, r3, #1
 8007050:	bfb8      	it	lt
 8007052:	425b      	neglt	r3, r3
 8007054:	f003 0301 	and.w	r3, r3, #1
 8007058:	b2d9      	uxtb	r1, r3
 800705a:	4a98      	ldr	r2, [pc, #608]	; (80072bc <v_R45+0x2ec>)
 800705c:	8813      	ldrh	r3, [r2, #0]
 800705e:	f361 03c3 	bfi	r3, r1, #3, #1
 8007062:	8013      	strh	r3, [r2, #0]

		if(!MF2.FLAG.V){
 8007064:	4b95      	ldr	r3, [pc, #596]	; (80072bc <v_R45+0x2ec>)
 8007066:	881b      	ldrh	r3, [r3, #0]
 8007068:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800706c:	b2db      	uxtb	r3, r3
 800706e:	2b00      	cmp	r3, #0
 8007070:	d107      	bne.n	8007082 <v_R45+0xb2>
			slalomB(10000, SPEED_LOW, V_OFFSET_F);
 8007072:	2228      	movs	r2, #40	; 0x28
 8007074:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8007078:	f242 7010 	movw	r0, #10000	; 0x2710
 800707c:	f7fe fb98 	bl	80057b0 <slalomB>
			slalomB(10000, SPEED_HIGH_HIGH, V_H_H_OFFSET_F);
		}else{
			slalomB(10000, SPEED_HIGH_HIGH, V_H_H_OFFSET_B);
		}
	}
}
 8007080:	e117      	b.n	80072b2 <v_R45+0x2e2>
			slalomB(10000, SPEED_LOW, V_OFFSET_B);
 8007082:	2255      	movs	r2, #85	; 0x55
 8007084:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8007088:	f242 7010 	movw	r0, #10000	; 0x2710
 800708c:	f7fe fb90 	bl	80057b0 <slalomB>
}
 8007090:	e10f      	b.n	80072b2 <v_R45+0x2e2>
	}else if(run_mode == MIDDLE){
 8007092:	4b89      	ldr	r3, [pc, #548]	; (80072b8 <v_R45+0x2e8>)
 8007094:	781b      	ldrb	r3, [r3, #0]
 8007096:	b2db      	uxtb	r3, r3
 8007098:	2b02      	cmp	r3, #2
 800709a:	d155      	bne.n	8007148 <v_R45+0x178>
		if(!MF2.FLAG.V){
 800709c:	4b87      	ldr	r3, [pc, #540]	; (80072bc <v_R45+0x2ec>)
 800709e:	881b      	ldrh	r3, [r3, #0]
 80070a0:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80070a4:	b2db      	uxtb	r3, r3
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d10c      	bne.n	80070c4 <v_R45+0xf4>
			slalomF(10000, SPEED_MIDDLE, V_M_OFFSET_F, NO_WALL, NO_WALL);
 80070aa:	f241 3388 	movw	r3, #5000	; 0x1388
 80070ae:	9300      	str	r3, [sp, #0]
 80070b0:	f241 3388 	movw	r3, #5000	; 0x1388
 80070b4:	2228      	movs	r2, #40	; 0x28
 80070b6:	f44f 7116 	mov.w	r1, #600	; 0x258
 80070ba:	f242 7010 	movw	r0, #10000	; 0x2710
 80070be:	f7fe f9d7 	bl	8005470 <slalomF>
 80070c2:	e00b      	b.n	80070dc <v_R45+0x10c>
			slalomF(10000, SPEED_MIDDLE, V_M_OFFSET_B-20, NO_WALL, NO_WALL);
 80070c4:	f241 3388 	movw	r3, #5000	; 0x1388
 80070c8:	9300      	str	r3, [sp, #0]
 80070ca:	f241 3388 	movw	r3, #5000	; 0x1388
 80070ce:	2249      	movs	r2, #73	; 0x49
 80070d0:	f44f 7116 	mov.w	r1, #600	; 0x258
 80070d4:	f242 7010 	movw	r0, #10000	; 0x2710
 80070d8:	f7fe f9ca 	bl	8005470 <slalomF>
		slalomR(-V_M_DEGACCEL, -V_M_OMEGA, -45, SPEED_MIDDLE);
 80070dc:	f44f 7316 	mov.w	r3, #600	; 0x258
 80070e0:	f06f 022c 	mvn.w	r2, #44	; 0x2c
 80070e4:	4978      	ldr	r1, [pc, #480]	; (80072c8 <v_R45+0x2f8>)
 80070e6:	4879      	ldr	r0, [pc, #484]	; (80072cc <v_R45+0x2fc>)
 80070e8:	f7fe fa3e 	bl	8005568 <slalomR>
		turn_dir(DIR_TURN_R45_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 80070ec:	2103      	movs	r1, #3
 80070ee:	2001      	movs	r0, #1
 80070f0:	f007 fd74 	bl	800ebdc <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 80070f4:	4b71      	ldr	r3, [pc, #452]	; (80072bc <v_R45+0x2ec>)
 80070f6:	881b      	ldrh	r3, [r3, #0]
 80070f8:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80070fc:	b2db      	uxtb	r3, r3
 80070fe:	3301      	adds	r3, #1
 8007100:	2b00      	cmp	r3, #0
 8007102:	f003 0301 	and.w	r3, r3, #1
 8007106:	bfb8      	it	lt
 8007108:	425b      	neglt	r3, r3
 800710a:	f003 0301 	and.w	r3, r3, #1
 800710e:	b2d9      	uxtb	r1, r3
 8007110:	4a6a      	ldr	r2, [pc, #424]	; (80072bc <v_R45+0x2ec>)
 8007112:	8813      	ldrh	r3, [r2, #0]
 8007114:	f361 03c3 	bfi	r3, r1, #3, #1
 8007118:	8013      	strh	r3, [r2, #0]
		if(!MF2.FLAG.V){
 800711a:	4b68      	ldr	r3, [pc, #416]	; (80072bc <v_R45+0x2ec>)
 800711c:	881b      	ldrh	r3, [r3, #0]
 800711e:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8007122:	b2db      	uxtb	r3, r3
 8007124:	2b00      	cmp	r3, #0
 8007126:	d107      	bne.n	8007138 <v_R45+0x168>
			slalomB(10000, SPEED_MIDDLE, V_M_OFFSET_F+15);
 8007128:	2237      	movs	r2, #55	; 0x37
 800712a:	f44f 7116 	mov.w	r1, #600	; 0x258
 800712e:	f242 7010 	movw	r0, #10000	; 0x2710
 8007132:	f7fe fb3d 	bl	80057b0 <slalomB>
}
 8007136:	e0bc      	b.n	80072b2 <v_R45+0x2e2>
			slalomB(10000, SPEED_MIDDLE, V_M_OFFSET_B);
 8007138:	225d      	movs	r2, #93	; 0x5d
 800713a:	f44f 7116 	mov.w	r1, #600	; 0x258
 800713e:	f242 7010 	movw	r0, #10000	; 0x2710
 8007142:	f7fe fb35 	bl	80057b0 <slalomB>
}
 8007146:	e0b4      	b.n	80072b2 <v_R45+0x2e2>
	}else if(run_mode == HIGH){
 8007148:	4b5b      	ldr	r3, [pc, #364]	; (80072b8 <v_R45+0x2e8>)
 800714a:	781b      	ldrb	r3, [r3, #0]
 800714c:	b2db      	uxtb	r3, r3
 800714e:	2b03      	cmp	r3, #3
 8007150:	d155      	bne.n	80071fe <v_R45+0x22e>
		if(!MF2.FLAG.V){
 8007152:	4b5a      	ldr	r3, [pc, #360]	; (80072bc <v_R45+0x2ec>)
 8007154:	881b      	ldrh	r3, [r3, #0]
 8007156:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800715a:	b2db      	uxtb	r3, r3
 800715c:	2b00      	cmp	r3, #0
 800715e:	d10c      	bne.n	800717a <v_R45+0x1aa>
			slalomF(10000, SPEED_HIGH, V_H_OFFSET_F, NO_WALL, NO_WALL);
 8007160:	f241 3388 	movw	r3, #5000	; 0x1388
 8007164:	9300      	str	r3, [sp, #0]
 8007166:	f241 3388 	movw	r3, #5000	; 0x1388
 800716a:	2217      	movs	r2, #23
 800716c:	f44f 7148 	mov.w	r1, #800	; 0x320
 8007170:	f242 7010 	movw	r0, #10000	; 0x2710
 8007174:	f7fe f97c 	bl	8005470 <slalomF>
 8007178:	e00b      	b.n	8007192 <v_R45+0x1c2>
			slalomF(10000, SPEED_HIGH, V_H_OFFSET_B-20, NO_WALL, NO_WALL);
 800717a:	f241 3388 	movw	r3, #5000	; 0x1388
 800717e:	9300      	str	r3, [sp, #0]
 8007180:	f241 3388 	movw	r3, #5000	; 0x1388
 8007184:	2237      	movs	r2, #55	; 0x37
 8007186:	f44f 7148 	mov.w	r1, #800	; 0x320
 800718a:	f242 7010 	movw	r0, #10000	; 0x2710
 800718e:	f7fe f96f 	bl	8005470 <slalomF>
		slalomR(-V_H_DEGACCEL, -V_H_OMEGA, -45, SPEED_HIGH);
 8007192:	f44f 7348 	mov.w	r3, #800	; 0x320
 8007196:	f06f 022c 	mvn.w	r2, #44	; 0x2c
 800719a:	494b      	ldr	r1, [pc, #300]	; (80072c8 <v_R45+0x2f8>)
 800719c:	484b      	ldr	r0, [pc, #300]	; (80072cc <v_R45+0x2fc>)
 800719e:	f7fe f9e3 	bl	8005568 <slalomR>
		turn_dir(DIR_TURN_R45_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 80071a2:	2103      	movs	r1, #3
 80071a4:	2001      	movs	r0, #1
 80071a6:	f007 fd19 	bl	800ebdc <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 80071aa:	4b44      	ldr	r3, [pc, #272]	; (80072bc <v_R45+0x2ec>)
 80071ac:	881b      	ldrh	r3, [r3, #0]
 80071ae:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80071b2:	b2db      	uxtb	r3, r3
 80071b4:	3301      	adds	r3, #1
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	f003 0301 	and.w	r3, r3, #1
 80071bc:	bfb8      	it	lt
 80071be:	425b      	neglt	r3, r3
 80071c0:	f003 0301 	and.w	r3, r3, #1
 80071c4:	b2d9      	uxtb	r1, r3
 80071c6:	4a3d      	ldr	r2, [pc, #244]	; (80072bc <v_R45+0x2ec>)
 80071c8:	8813      	ldrh	r3, [r2, #0]
 80071ca:	f361 03c3 	bfi	r3, r1, #3, #1
 80071ce:	8013      	strh	r3, [r2, #0]
		if(!MF2.FLAG.V){
 80071d0:	4b3a      	ldr	r3, [pc, #232]	; (80072bc <v_R45+0x2ec>)
 80071d2:	881b      	ldrh	r3, [r3, #0]
 80071d4:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80071d8:	b2db      	uxtb	r3, r3
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d107      	bne.n	80071ee <v_R45+0x21e>
			slalomB(10000, SPEED_HIGH, V_H_OFFSET_F+28);
 80071de:	2233      	movs	r2, #51	; 0x33
 80071e0:	f44f 7148 	mov.w	r1, #800	; 0x320
 80071e4:	f242 7010 	movw	r0, #10000	; 0x2710
 80071e8:	f7fe fae2 	bl	80057b0 <slalomB>
}
 80071ec:	e061      	b.n	80072b2 <v_R45+0x2e2>
			slalomB(10000, SPEED_HIGH, V_H_OFFSET_B);
 80071ee:	224b      	movs	r2, #75	; 0x4b
 80071f0:	f44f 7148 	mov.w	r1, #800	; 0x320
 80071f4:	f242 7010 	movw	r0, #10000	; 0x2710
 80071f8:	f7fe fada 	bl	80057b0 <slalomB>
}
 80071fc:	e059      	b.n	80072b2 <v_R45+0x2e2>
	}else if(run_mode == HIGH_HIGH){
 80071fe:	4b2e      	ldr	r3, [pc, #184]	; (80072b8 <v_R45+0x2e8>)
 8007200:	781b      	ldrb	r3, [r3, #0]
 8007202:	b2db      	uxtb	r3, r3
 8007204:	2b04      	cmp	r3, #4
 8007206:	d154      	bne.n	80072b2 <v_R45+0x2e2>
		if(!MF2.FLAG.V){
 8007208:	4b2c      	ldr	r3, [pc, #176]	; (80072bc <v_R45+0x2ec>)
 800720a:	881b      	ldrh	r3, [r3, #0]
 800720c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8007210:	b2db      	uxtb	r3, r3
 8007212:	2b00      	cmp	r3, #0
 8007214:	d10c      	bne.n	8007230 <v_R45+0x260>
			slalomF(10000, SPEED_HIGH_HIGH, V_H_H_OFFSET_F, NO_WALL, NO_WALL);
 8007216:	f241 3388 	movw	r3, #5000	; 0x1388
 800721a:	9300      	str	r3, [sp, #0]
 800721c:	f241 3388 	movw	r3, #5000	; 0x1388
 8007220:	2214      	movs	r2, #20
 8007222:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8007226:	f242 7010 	movw	r0, #10000	; 0x2710
 800722a:	f7fe f921 	bl	8005470 <slalomF>
 800722e:	e00b      	b.n	8007248 <v_R45+0x278>
			slalomF(10000, SPEED_HIGH_HIGH, V_H_H_OFFSET_B, NO_WALL, NO_WALL);
 8007230:	f241 3388 	movw	r3, #5000	; 0x1388
 8007234:	9300      	str	r3, [sp, #0]
 8007236:	f241 3388 	movw	r3, #5000	; 0x1388
 800723a:	223a      	movs	r2, #58	; 0x3a
 800723c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8007240:	f242 7010 	movw	r0, #10000	; 0x2710
 8007244:	f7fe f914 	bl	8005470 <slalomF>
		slalomR(-V_H_H_DEGACCEL, -V_H_H_OMEGA, -45, SPEED_HIGH_HIGH);
 8007248:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800724c:	f06f 022c 	mvn.w	r2, #44	; 0x2c
 8007250:	491f      	ldr	r1, [pc, #124]	; (80072d0 <v_R45+0x300>)
 8007252:	4820      	ldr	r0, [pc, #128]	; (80072d4 <v_R45+0x304>)
 8007254:	f7fe f988 	bl	8005568 <slalomR>
		turn_dir(DIR_TURN_R45_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 8007258:	2103      	movs	r1, #3
 800725a:	2001      	movs	r0, #1
 800725c:	f007 fcbe 	bl	800ebdc <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 8007260:	4b16      	ldr	r3, [pc, #88]	; (80072bc <v_R45+0x2ec>)
 8007262:	881b      	ldrh	r3, [r3, #0]
 8007264:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8007268:	b2db      	uxtb	r3, r3
 800726a:	3301      	adds	r3, #1
 800726c:	2b00      	cmp	r3, #0
 800726e:	f003 0301 	and.w	r3, r3, #1
 8007272:	bfb8      	it	lt
 8007274:	425b      	neglt	r3, r3
 8007276:	f003 0301 	and.w	r3, r3, #1
 800727a:	b2d9      	uxtb	r1, r3
 800727c:	4a0f      	ldr	r2, [pc, #60]	; (80072bc <v_R45+0x2ec>)
 800727e:	8813      	ldrh	r3, [r2, #0]
 8007280:	f361 03c3 	bfi	r3, r1, #3, #1
 8007284:	8013      	strh	r3, [r2, #0]
		if(!MF2.FLAG.V){
 8007286:	4b0d      	ldr	r3, [pc, #52]	; (80072bc <v_R45+0x2ec>)
 8007288:	881b      	ldrh	r3, [r3, #0]
 800728a:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800728e:	b2db      	uxtb	r3, r3
 8007290:	2b00      	cmp	r3, #0
 8007292:	d107      	bne.n	80072a4 <v_R45+0x2d4>
			slalomB(10000, SPEED_HIGH_HIGH, V_H_H_OFFSET_F);
 8007294:	2214      	movs	r2, #20
 8007296:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800729a:	f242 7010 	movw	r0, #10000	; 0x2710
 800729e:	f7fe fa87 	bl	80057b0 <slalomB>
}
 80072a2:	e006      	b.n	80072b2 <v_R45+0x2e2>
			slalomB(10000, SPEED_HIGH_HIGH, V_H_H_OFFSET_B);
 80072a4:	223a      	movs	r2, #58	; 0x3a
 80072a6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80072aa:	f242 7010 	movw	r0, #10000	; 0x2710
 80072ae:	f7fe fa7f 	bl	80057b0 <slalomB>
}
 80072b2:	bf00      	nop
 80072b4:	46bd      	mov	sp, r7
 80072b6:	bd80      	pop	{r7, pc}
 80072b8:	20000456 	.word	0x20000456
 80072bc:	20000f64 	.word	0x20000f64
 80072c0:	fffffed4 	.word	0xfffffed4
 80072c4:	fffff448 	.word	0xfffff448
 80072c8:	fffffe70 	.word	0xfffffe70
 80072cc:	ffffe0c0 	.word	0xffffe0c0
 80072d0:	fffffda8 	.word	0xfffffda8
 80072d4:	ffffd8f0 	.word	0xffffd8f0

080072d8 <v_L45>:
//v_L45
// 区画中心から左に45度回転する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void v_L45(void){
 80072d8:	b580      	push	{r7, lr}
 80072da:	b082      	sub	sp, #8
 80072dc:	af02      	add	r7, sp, #8
	full_led_write(YELLOW);
 80072de:	2006      	movs	r0, #6
 80072e0:	f009 fb06 	bl	80108f0 <full_led_write>
	if(run_mode == LOW){
 80072e4:	4bb8      	ldr	r3, [pc, #736]	; (80075c8 <v_L45+0x2f0>)
 80072e6:	781b      	ldrb	r3, [r3, #0]
 80072e8:	b2db      	uxtb	r3, r3
 80072ea:	2b01      	cmp	r3, #1
 80072ec:	d156      	bne.n	800739c <v_L45+0xc4>
		if(!MF2.FLAG.V){
 80072ee:	4bb7      	ldr	r3, [pc, #732]	; (80075cc <v_L45+0x2f4>)
 80072f0:	881b      	ldrh	r3, [r3, #0]
 80072f2:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80072f6:	b2db      	uxtb	r3, r3
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d10c      	bne.n	8007316 <v_L45+0x3e>
			slalomF(10000, SPEED_LOW, V_OFFSET_F, NO_WALL, NO_WALL);
 80072fc:	f241 3388 	movw	r3, #5000	; 0x1388
 8007300:	9300      	str	r3, [sp, #0]
 8007302:	f241 3388 	movw	r3, #5000	; 0x1388
 8007306:	2228      	movs	r2, #40	; 0x28
 8007308:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800730c:	f242 7010 	movw	r0, #10000	; 0x2710
 8007310:	f7fe f8ae 	bl	8005470 <slalomF>
 8007314:	e00b      	b.n	800732e <v_L45+0x56>
		}else{
			slalomF(10000, SPEED_LOW, V_OFFSET_B, NO_WALL, NO_WALL);
 8007316:	f241 3388 	movw	r3, #5000	; 0x1388
 800731a:	9300      	str	r3, [sp, #0]
 800731c:	f241 3388 	movw	r3, #5000	; 0x1388
 8007320:	2255      	movs	r2, #85	; 0x55
 8007322:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8007326:	f242 7010 	movw	r0, #10000	; 0x2710
 800732a:	f7fe f8a1 	bl	8005470 <slalomF>
		}
		slalomR(V_DEGACCEL, V_OMEGA, 45, SPEED_LOW);
 800732e:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8007332:	222d      	movs	r2, #45	; 0x2d
 8007334:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8007338:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800733c:	f7fe f914 	bl	8005568 <slalomR>

		turn_dir(DIR_TURN_L45_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 8007340:	2103      	movs	r1, #3
 8007342:	20ff      	movs	r0, #255	; 0xff
 8007344:	f007 fc4a 	bl	800ebdc <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 8007348:	4ba0      	ldr	r3, [pc, #640]	; (80075cc <v_L45+0x2f4>)
 800734a:	881b      	ldrh	r3, [r3, #0]
 800734c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8007350:	b2db      	uxtb	r3, r3
 8007352:	3301      	adds	r3, #1
 8007354:	2b00      	cmp	r3, #0
 8007356:	f003 0301 	and.w	r3, r3, #1
 800735a:	bfb8      	it	lt
 800735c:	425b      	neglt	r3, r3
 800735e:	f003 0301 	and.w	r3, r3, #1
 8007362:	b2d9      	uxtb	r1, r3
 8007364:	4a99      	ldr	r2, [pc, #612]	; (80075cc <v_L45+0x2f4>)
 8007366:	8813      	ldrh	r3, [r2, #0]
 8007368:	f361 03c3 	bfi	r3, r1, #3, #1
 800736c:	8013      	strh	r3, [r2, #0]

		if(!MF2.FLAG.V){
 800736e:	4b97      	ldr	r3, [pc, #604]	; (80075cc <v_L45+0x2f4>)
 8007370:	881b      	ldrh	r3, [r3, #0]
 8007372:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8007376:	b2db      	uxtb	r3, r3
 8007378:	2b00      	cmp	r3, #0
 800737a:	d107      	bne.n	800738c <v_L45+0xb4>
			slalomB(10000, SPEED_LOW, V_OFFSET_F);
 800737c:	2228      	movs	r2, #40	; 0x28
 800737e:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8007382:	f242 7010 	movw	r0, #10000	; 0x2710
 8007386:	f7fe fa13 	bl	80057b0 <slalomB>
			slalomB(10000, SPEED_HIGH_HIGH, V_H_H_OFFSET_F);
		}else{
			slalomB(10000, SPEED_HIGH_HIGH, V_H_H_OFFSET_B);
		}
	}
}
 800738a:	e11a      	b.n	80075c2 <v_L45+0x2ea>
			slalomB(10000, SPEED_LOW, V_OFFSET_B);
 800738c:	2255      	movs	r2, #85	; 0x55
 800738e:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8007392:	f242 7010 	movw	r0, #10000	; 0x2710
 8007396:	f7fe fa0b 	bl	80057b0 <slalomB>
}
 800739a:	e112      	b.n	80075c2 <v_L45+0x2ea>
	}else if(run_mode == MIDDLE){
 800739c:	4b8a      	ldr	r3, [pc, #552]	; (80075c8 <v_L45+0x2f0>)
 800739e:	781b      	ldrb	r3, [r3, #0]
 80073a0:	b2db      	uxtb	r3, r3
 80073a2:	2b02      	cmp	r3, #2
 80073a4:	d156      	bne.n	8007454 <v_L45+0x17c>
		if(!MF2.FLAG.V){
 80073a6:	4b89      	ldr	r3, [pc, #548]	; (80075cc <v_L45+0x2f4>)
 80073a8:	881b      	ldrh	r3, [r3, #0]
 80073aa:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80073ae:	b2db      	uxtb	r3, r3
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d10c      	bne.n	80073ce <v_L45+0xf6>
			slalomF(10000, SPEED_MIDDLE, V_M_OFFSET_F, NO_WALL, NO_WALL);
 80073b4:	f241 3388 	movw	r3, #5000	; 0x1388
 80073b8:	9300      	str	r3, [sp, #0]
 80073ba:	f241 3388 	movw	r3, #5000	; 0x1388
 80073be:	2228      	movs	r2, #40	; 0x28
 80073c0:	f44f 7116 	mov.w	r1, #600	; 0x258
 80073c4:	f242 7010 	movw	r0, #10000	; 0x2710
 80073c8:	f7fe f852 	bl	8005470 <slalomF>
 80073cc:	e00b      	b.n	80073e6 <v_L45+0x10e>
			slalomF(10000, SPEED_MIDDLE, V_M_OFFSET_B-20, NO_WALL, NO_WALL);
 80073ce:	f241 3388 	movw	r3, #5000	; 0x1388
 80073d2:	9300      	str	r3, [sp, #0]
 80073d4:	f241 3388 	movw	r3, #5000	; 0x1388
 80073d8:	2249      	movs	r2, #73	; 0x49
 80073da:	f44f 7116 	mov.w	r1, #600	; 0x258
 80073de:	f242 7010 	movw	r0, #10000	; 0x2710
 80073e2:	f7fe f845 	bl	8005470 <slalomF>
		slalomR(V_M_DEGACCEL, V_M_OMEGA, 45, SPEED_MIDDLE);
 80073e6:	f44f 7316 	mov.w	r3, #600	; 0x258
 80073ea:	222d      	movs	r2, #45	; 0x2d
 80073ec:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80073f0:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 80073f4:	f7fe f8b8 	bl	8005568 <slalomR>
		turn_dir(DIR_TURN_L45_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 80073f8:	2103      	movs	r1, #3
 80073fa:	20ff      	movs	r0, #255	; 0xff
 80073fc:	f007 fbee 	bl	800ebdc <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 8007400:	4b72      	ldr	r3, [pc, #456]	; (80075cc <v_L45+0x2f4>)
 8007402:	881b      	ldrh	r3, [r3, #0]
 8007404:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8007408:	b2db      	uxtb	r3, r3
 800740a:	3301      	adds	r3, #1
 800740c:	2b00      	cmp	r3, #0
 800740e:	f003 0301 	and.w	r3, r3, #1
 8007412:	bfb8      	it	lt
 8007414:	425b      	neglt	r3, r3
 8007416:	f003 0301 	and.w	r3, r3, #1
 800741a:	b2d9      	uxtb	r1, r3
 800741c:	4a6b      	ldr	r2, [pc, #428]	; (80075cc <v_L45+0x2f4>)
 800741e:	8813      	ldrh	r3, [r2, #0]
 8007420:	f361 03c3 	bfi	r3, r1, #3, #1
 8007424:	8013      	strh	r3, [r2, #0]
		if(!MF2.FLAG.V){
 8007426:	4b69      	ldr	r3, [pc, #420]	; (80075cc <v_L45+0x2f4>)
 8007428:	881b      	ldrh	r3, [r3, #0]
 800742a:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800742e:	b2db      	uxtb	r3, r3
 8007430:	2b00      	cmp	r3, #0
 8007432:	d107      	bne.n	8007444 <v_L45+0x16c>
			slalomB(10000, SPEED_MIDDLE, V_M_OFFSET_F+15);
 8007434:	2237      	movs	r2, #55	; 0x37
 8007436:	f44f 7116 	mov.w	r1, #600	; 0x258
 800743a:	f242 7010 	movw	r0, #10000	; 0x2710
 800743e:	f7fe f9b7 	bl	80057b0 <slalomB>
}
 8007442:	e0be      	b.n	80075c2 <v_L45+0x2ea>
			slalomB(10000, SPEED_MIDDLE, V_M_OFFSET_B);
 8007444:	225d      	movs	r2, #93	; 0x5d
 8007446:	f44f 7116 	mov.w	r1, #600	; 0x258
 800744a:	f242 7010 	movw	r0, #10000	; 0x2710
 800744e:	f7fe f9af 	bl	80057b0 <slalomB>
}
 8007452:	e0b6      	b.n	80075c2 <v_L45+0x2ea>
	}else if(run_mode == HIGH){
 8007454:	4b5c      	ldr	r3, [pc, #368]	; (80075c8 <v_L45+0x2f0>)
 8007456:	781b      	ldrb	r3, [r3, #0]
 8007458:	b2db      	uxtb	r3, r3
 800745a:	2b03      	cmp	r3, #3
 800745c:	d156      	bne.n	800750c <v_L45+0x234>
		if(!MF2.FLAG.V){
 800745e:	4b5b      	ldr	r3, [pc, #364]	; (80075cc <v_L45+0x2f4>)
 8007460:	881b      	ldrh	r3, [r3, #0]
 8007462:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8007466:	b2db      	uxtb	r3, r3
 8007468:	2b00      	cmp	r3, #0
 800746a:	d10c      	bne.n	8007486 <v_L45+0x1ae>
			slalomF(10000, SPEED_HIGH, V_H_OFFSET_F+5, NO_WALL, NO_WALL);
 800746c:	f241 3388 	movw	r3, #5000	; 0x1388
 8007470:	9300      	str	r3, [sp, #0]
 8007472:	f241 3388 	movw	r3, #5000	; 0x1388
 8007476:	221c      	movs	r2, #28
 8007478:	f44f 7148 	mov.w	r1, #800	; 0x320
 800747c:	f242 7010 	movw	r0, #10000	; 0x2710
 8007480:	f7fd fff6 	bl	8005470 <slalomF>
 8007484:	e00b      	b.n	800749e <v_L45+0x1c6>
			slalomF(10000, SPEED_HIGH, V_H_OFFSET_B-20, NO_WALL, NO_WALL);
 8007486:	f241 3388 	movw	r3, #5000	; 0x1388
 800748a:	9300      	str	r3, [sp, #0]
 800748c:	f241 3388 	movw	r3, #5000	; 0x1388
 8007490:	2237      	movs	r2, #55	; 0x37
 8007492:	f44f 7148 	mov.w	r1, #800	; 0x320
 8007496:	f242 7010 	movw	r0, #10000	; 0x2710
 800749a:	f7fd ffe9 	bl	8005470 <slalomF>
		slalomR(V_H_DEGACCEL, V_H_OMEGA, 45, SPEED_HIGH);
 800749e:	f44f 7348 	mov.w	r3, #800	; 0x320
 80074a2:	222d      	movs	r2, #45	; 0x2d
 80074a4:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80074a8:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 80074ac:	f7fe f85c 	bl	8005568 <slalomR>
		turn_dir(DIR_TURN_L45_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 80074b0:	2103      	movs	r1, #3
 80074b2:	20ff      	movs	r0, #255	; 0xff
 80074b4:	f007 fb92 	bl	800ebdc <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 80074b8:	4b44      	ldr	r3, [pc, #272]	; (80075cc <v_L45+0x2f4>)
 80074ba:	881b      	ldrh	r3, [r3, #0]
 80074bc:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80074c0:	b2db      	uxtb	r3, r3
 80074c2:	3301      	adds	r3, #1
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	f003 0301 	and.w	r3, r3, #1
 80074ca:	bfb8      	it	lt
 80074cc:	425b      	neglt	r3, r3
 80074ce:	f003 0301 	and.w	r3, r3, #1
 80074d2:	b2d9      	uxtb	r1, r3
 80074d4:	4a3d      	ldr	r2, [pc, #244]	; (80075cc <v_L45+0x2f4>)
 80074d6:	8813      	ldrh	r3, [r2, #0]
 80074d8:	f361 03c3 	bfi	r3, r1, #3, #1
 80074dc:	8013      	strh	r3, [r2, #0]
		if(!MF2.FLAG.V){
 80074de:	4b3b      	ldr	r3, [pc, #236]	; (80075cc <v_L45+0x2f4>)
 80074e0:	881b      	ldrh	r3, [r3, #0]
 80074e2:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80074e6:	b2db      	uxtb	r3, r3
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d107      	bne.n	80074fc <v_L45+0x224>
			slalomB(10000, SPEED_HIGH, V_H_OFFSET_F+28);
 80074ec:	2233      	movs	r2, #51	; 0x33
 80074ee:	f44f 7148 	mov.w	r1, #800	; 0x320
 80074f2:	f242 7010 	movw	r0, #10000	; 0x2710
 80074f6:	f7fe f95b 	bl	80057b0 <slalomB>
}
 80074fa:	e062      	b.n	80075c2 <v_L45+0x2ea>
			slalomB(10000, SPEED_HIGH, V_H_OFFSET_B);
 80074fc:	224b      	movs	r2, #75	; 0x4b
 80074fe:	f44f 7148 	mov.w	r1, #800	; 0x320
 8007502:	f242 7010 	movw	r0, #10000	; 0x2710
 8007506:	f7fe f953 	bl	80057b0 <slalomB>
}
 800750a:	e05a      	b.n	80075c2 <v_L45+0x2ea>
	}else if(run_mode == HIGH_HIGH){
 800750c:	4b2e      	ldr	r3, [pc, #184]	; (80075c8 <v_L45+0x2f0>)
 800750e:	781b      	ldrb	r3, [r3, #0]
 8007510:	b2db      	uxtb	r3, r3
 8007512:	2b04      	cmp	r3, #4
 8007514:	d155      	bne.n	80075c2 <v_L45+0x2ea>
		if(!MF2.FLAG.V){
 8007516:	4b2d      	ldr	r3, [pc, #180]	; (80075cc <v_L45+0x2f4>)
 8007518:	881b      	ldrh	r3, [r3, #0]
 800751a:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800751e:	b2db      	uxtb	r3, r3
 8007520:	2b00      	cmp	r3, #0
 8007522:	d10c      	bne.n	800753e <v_L45+0x266>
			slalomF(10000, SPEED_HIGH_HIGH, V_H_H_OFFSET_F, NO_WALL, NO_WALL);
 8007524:	f241 3388 	movw	r3, #5000	; 0x1388
 8007528:	9300      	str	r3, [sp, #0]
 800752a:	f241 3388 	movw	r3, #5000	; 0x1388
 800752e:	2214      	movs	r2, #20
 8007530:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8007534:	f242 7010 	movw	r0, #10000	; 0x2710
 8007538:	f7fd ff9a 	bl	8005470 <slalomF>
 800753c:	e00b      	b.n	8007556 <v_L45+0x27e>
			slalomF(10000, SPEED_HIGH_HIGH, V_H_H_OFFSET_B, NO_WALL, NO_WALL);
 800753e:	f241 3388 	movw	r3, #5000	; 0x1388
 8007542:	9300      	str	r3, [sp, #0]
 8007544:	f241 3388 	movw	r3, #5000	; 0x1388
 8007548:	223a      	movs	r2, #58	; 0x3a
 800754a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800754e:	f242 7010 	movw	r0, #10000	; 0x2710
 8007552:	f7fd ff8d 	bl	8005470 <slalomF>
		slalomR(V_H_H_DEGACCEL, V_H_H_OMEGA, 45, SPEED_HIGH_HIGH);
 8007556:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800755a:	222d      	movs	r2, #45	; 0x2d
 800755c:	f44f 7116 	mov.w	r1, #600	; 0x258
 8007560:	f242 7010 	movw	r0, #10000	; 0x2710
 8007564:	f7fe f800 	bl	8005568 <slalomR>
		turn_dir(DIR_TURN_L45_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 8007568:	2103      	movs	r1, #3
 800756a:	20ff      	movs	r0, #255	; 0xff
 800756c:	f007 fb36 	bl	800ebdc <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 8007570:	4b16      	ldr	r3, [pc, #88]	; (80075cc <v_L45+0x2f4>)
 8007572:	881b      	ldrh	r3, [r3, #0]
 8007574:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8007578:	b2db      	uxtb	r3, r3
 800757a:	3301      	adds	r3, #1
 800757c:	2b00      	cmp	r3, #0
 800757e:	f003 0301 	and.w	r3, r3, #1
 8007582:	bfb8      	it	lt
 8007584:	425b      	neglt	r3, r3
 8007586:	f003 0301 	and.w	r3, r3, #1
 800758a:	b2d9      	uxtb	r1, r3
 800758c:	4a0f      	ldr	r2, [pc, #60]	; (80075cc <v_L45+0x2f4>)
 800758e:	8813      	ldrh	r3, [r2, #0]
 8007590:	f361 03c3 	bfi	r3, r1, #3, #1
 8007594:	8013      	strh	r3, [r2, #0]
		if(!MF2.FLAG.V){
 8007596:	4b0d      	ldr	r3, [pc, #52]	; (80075cc <v_L45+0x2f4>)
 8007598:	881b      	ldrh	r3, [r3, #0]
 800759a:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800759e:	b2db      	uxtb	r3, r3
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d107      	bne.n	80075b4 <v_L45+0x2dc>
			slalomB(10000, SPEED_HIGH_HIGH, V_H_H_OFFSET_F);
 80075a4:	2214      	movs	r2, #20
 80075a6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80075aa:	f242 7010 	movw	r0, #10000	; 0x2710
 80075ae:	f7fe f8ff 	bl	80057b0 <slalomB>
}
 80075b2:	e006      	b.n	80075c2 <v_L45+0x2ea>
			slalomB(10000, SPEED_HIGH_HIGH, V_H_H_OFFSET_B);
 80075b4:	223a      	movs	r2, #58	; 0x3a
 80075b6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80075ba:	f242 7010 	movw	r0, #10000	; 0x2710
 80075be:	f7fe f8f7 	bl	80057b0 <slalomB>
}
 80075c2:	bf00      	nop
 80075c4:	46bd      	mov	sp, r7
 80075c6:	bd80      	pop	{r7, pc}
 80075c8:	20000456 	.word	0x20000456
 80075cc:	20000f64 	.word	0x20000f64

080075d0 <v_R45D>:
//v_R45D
//a区画中心から右に45度回転する　ゴール用
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void v_R45D(void){
 80075d0:	b580      	push	{r7, lr}
 80075d2:	b082      	sub	sp, #8
 80075d4:	af02      	add	r7, sp, #8
	full_led_write(PURPLE);
 80075d6:	2005      	movs	r0, #5
 80075d8:	f009 f98a 	bl	80108f0 <full_led_write>
	if(run_mode == LOW){
 80075dc:	4b5f      	ldr	r3, [pc, #380]	; (800775c <v_R45D+0x18c>)
 80075de:	781b      	ldrb	r3, [r3, #0]
 80075e0:	b2db      	uxtb	r3, r3
 80075e2:	2b01      	cmp	r3, #1
 80075e4:	d139      	bne.n	800765a <v_R45D+0x8a>
		slalomF(10000, SPEED_LOW, V_OFFSET_B, NO_WALL, NO_WALL);
 80075e6:	f241 3388 	movw	r3, #5000	; 0x1388
 80075ea:	9300      	str	r3, [sp, #0]
 80075ec:	f241 3388 	movw	r3, #5000	; 0x1388
 80075f0:	2255      	movs	r2, #85	; 0x55
 80075f2:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80075f6:	f242 7010 	movw	r0, #10000	; 0x2710
 80075fa:	f7fd ff39 	bl	8005470 <slalomF>
		slalomR(-V_DEGACCEL, -V_OMEGA, -45, SPEED_LOW);
 80075fe:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8007602:	f06f 022c 	mvn.w	r2, #44	; 0x2c
 8007606:	4956      	ldr	r1, [pc, #344]	; (8007760 <v_R45D+0x190>)
 8007608:	4856      	ldr	r0, [pc, #344]	; (8007764 <v_R45D+0x194>)
 800760a:	f7fd ffad 	bl	8005568 <slalomR>

		turn_dir(DIR_TURN_R45_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 800760e:	2103      	movs	r1, #3
 8007610:	2001      	movs	r0, #1
 8007612:	f007 fae3 	bl	800ebdc <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 8007616:	4b54      	ldr	r3, [pc, #336]	; (8007768 <v_R45D+0x198>)
 8007618:	881b      	ldrh	r3, [r3, #0]
 800761a:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800761e:	b2db      	uxtb	r3, r3
 8007620:	3301      	adds	r3, #1
 8007622:	2b00      	cmp	r3, #0
 8007624:	f003 0301 	and.w	r3, r3, #1
 8007628:	bfb8      	it	lt
 800762a:	425b      	neglt	r3, r3
 800762c:	f003 0301 	and.w	r3, r3, #1
 8007630:	b2d9      	uxtb	r1, r3
 8007632:	4a4d      	ldr	r2, [pc, #308]	; (8007768 <v_R45D+0x198>)
 8007634:	8813      	ldrh	r3, [r2, #0]
 8007636:	f361 03c3 	bfi	r3, r1, #3, #1
 800763a:	8013      	strh	r3, [r2, #0]

		slalomB(10000, SPEED_LOW, V_OFFSET_F-30);
 800763c:	220a      	movs	r2, #10
 800763e:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8007642:	f242 7010 	movw	r0, #10000	; 0x2710
 8007646:	f7fe f8b3 	bl	80057b0 <slalomB>
		driveD(-30000, SPEED_MIN, SPEED_LOW, 30);
 800764a:	231e      	movs	r3, #30
 800764c:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8007650:	2114      	movs	r1, #20
 8007652:	4846      	ldr	r0, [pc, #280]	; (800776c <v_R45D+0x19c>)
 8007654:	f7fd fd34 	bl	80050c0 <driveD>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;

		slalomB(10000, SPEED_HIGH, V_H_OFFSET_F-2);
		driveD(-30000, SPEED_MIN, SPEED_HIGH, 30);
	}
}
 8007658:	e07c      	b.n	8007754 <v_R45D+0x184>
	}else if(run_mode == MIDDLE){
 800765a:	4b40      	ldr	r3, [pc, #256]	; (800775c <v_R45D+0x18c>)
 800765c:	781b      	ldrb	r3, [r3, #0]
 800765e:	b2db      	uxtb	r3, r3
 8007660:	2b02      	cmp	r3, #2
 8007662:	d139      	bne.n	80076d8 <v_R45D+0x108>
		slalomF(10000, SPEED_MIDDLE, V_M_OFFSET_B-20, NO_WALL, NO_WALL);
 8007664:	f241 3388 	movw	r3, #5000	; 0x1388
 8007668:	9300      	str	r3, [sp, #0]
 800766a:	f241 3388 	movw	r3, #5000	; 0x1388
 800766e:	2249      	movs	r2, #73	; 0x49
 8007670:	f44f 7116 	mov.w	r1, #600	; 0x258
 8007674:	f242 7010 	movw	r0, #10000	; 0x2710
 8007678:	f7fd fefa 	bl	8005470 <slalomF>
		slalomR(-V_M_DEGACCEL, -V_M_OMEGA, -45, SPEED_MIDDLE);
 800767c:	f44f 7316 	mov.w	r3, #600	; 0x258
 8007680:	f06f 022c 	mvn.w	r2, #44	; 0x2c
 8007684:	493a      	ldr	r1, [pc, #232]	; (8007770 <v_R45D+0x1a0>)
 8007686:	483b      	ldr	r0, [pc, #236]	; (8007774 <v_R45D+0x1a4>)
 8007688:	f7fd ff6e 	bl	8005568 <slalomR>
		turn_dir(DIR_TURN_R45_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 800768c:	2103      	movs	r1, #3
 800768e:	2001      	movs	r0, #1
 8007690:	f007 faa4 	bl	800ebdc <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 8007694:	4b34      	ldr	r3, [pc, #208]	; (8007768 <v_R45D+0x198>)
 8007696:	881b      	ldrh	r3, [r3, #0]
 8007698:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800769c:	b2db      	uxtb	r3, r3
 800769e:	3301      	adds	r3, #1
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	f003 0301 	and.w	r3, r3, #1
 80076a6:	bfb8      	it	lt
 80076a8:	425b      	neglt	r3, r3
 80076aa:	f003 0301 	and.w	r3, r3, #1
 80076ae:	b2d9      	uxtb	r1, r3
 80076b0:	4a2d      	ldr	r2, [pc, #180]	; (8007768 <v_R45D+0x198>)
 80076b2:	8813      	ldrh	r3, [r2, #0]
 80076b4:	f361 03c3 	bfi	r3, r1, #3, #1
 80076b8:	8013      	strh	r3, [r2, #0]
		slalomB(10000, SPEED_MIDDLE, V_M_OFFSET_F-15);
 80076ba:	2219      	movs	r2, #25
 80076bc:	f44f 7116 	mov.w	r1, #600	; 0x258
 80076c0:	f242 7010 	movw	r0, #10000	; 0x2710
 80076c4:	f7fe f874 	bl	80057b0 <slalomB>
		driveD(-30000, SPEED_MIN, SPEED_MIDDLE, 30);
 80076c8:	231e      	movs	r3, #30
 80076ca:	f44f 7216 	mov.w	r2, #600	; 0x258
 80076ce:	2114      	movs	r1, #20
 80076d0:	4826      	ldr	r0, [pc, #152]	; (800776c <v_R45D+0x19c>)
 80076d2:	f7fd fcf5 	bl	80050c0 <driveD>
}
 80076d6:	e03d      	b.n	8007754 <v_R45D+0x184>
	}else if(run_mode == HIGH){
 80076d8:	4b20      	ldr	r3, [pc, #128]	; (800775c <v_R45D+0x18c>)
 80076da:	781b      	ldrb	r3, [r3, #0]
 80076dc:	b2db      	uxtb	r3, r3
 80076de:	2b03      	cmp	r3, #3
 80076e0:	d138      	bne.n	8007754 <v_R45D+0x184>
		slalomF(10000, SPEED_HIGH, V_H_OFFSET_B-20, NO_WALL, NO_WALL);
 80076e2:	f241 3388 	movw	r3, #5000	; 0x1388
 80076e6:	9300      	str	r3, [sp, #0]
 80076e8:	f241 3388 	movw	r3, #5000	; 0x1388
 80076ec:	2237      	movs	r2, #55	; 0x37
 80076ee:	f44f 7148 	mov.w	r1, #800	; 0x320
 80076f2:	f242 7010 	movw	r0, #10000	; 0x2710
 80076f6:	f7fd febb 	bl	8005470 <slalomF>
		slalomR(-V_H_DEGACCEL, -V_H_OMEGA, -45, SPEED_HIGH);
 80076fa:	f44f 7348 	mov.w	r3, #800	; 0x320
 80076fe:	f06f 022c 	mvn.w	r2, #44	; 0x2c
 8007702:	491b      	ldr	r1, [pc, #108]	; (8007770 <v_R45D+0x1a0>)
 8007704:	481b      	ldr	r0, [pc, #108]	; (8007774 <v_R45D+0x1a4>)
 8007706:	f7fd ff2f 	bl	8005568 <slalomR>
		turn_dir(DIR_TURN_R45_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 800770a:	2103      	movs	r1, #3
 800770c:	2001      	movs	r0, #1
 800770e:	f007 fa65 	bl	800ebdc <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 8007712:	4b15      	ldr	r3, [pc, #84]	; (8007768 <v_R45D+0x198>)
 8007714:	881b      	ldrh	r3, [r3, #0]
 8007716:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800771a:	b2db      	uxtb	r3, r3
 800771c:	3301      	adds	r3, #1
 800771e:	2b00      	cmp	r3, #0
 8007720:	f003 0301 	and.w	r3, r3, #1
 8007724:	bfb8      	it	lt
 8007726:	425b      	neglt	r3, r3
 8007728:	f003 0301 	and.w	r3, r3, #1
 800772c:	b2d9      	uxtb	r1, r3
 800772e:	4a0e      	ldr	r2, [pc, #56]	; (8007768 <v_R45D+0x198>)
 8007730:	8813      	ldrh	r3, [r2, #0]
 8007732:	f361 03c3 	bfi	r3, r1, #3, #1
 8007736:	8013      	strh	r3, [r2, #0]
		slalomB(10000, SPEED_HIGH, V_H_OFFSET_F-2);
 8007738:	2215      	movs	r2, #21
 800773a:	f44f 7148 	mov.w	r1, #800	; 0x320
 800773e:	f242 7010 	movw	r0, #10000	; 0x2710
 8007742:	f7fe f835 	bl	80057b0 <slalomB>
		driveD(-30000, SPEED_MIN, SPEED_HIGH, 30);
 8007746:	231e      	movs	r3, #30
 8007748:	f44f 7248 	mov.w	r2, #800	; 0x320
 800774c:	2114      	movs	r1, #20
 800774e:	4807      	ldr	r0, [pc, #28]	; (800776c <v_R45D+0x19c>)
 8007750:	f7fd fcb6 	bl	80050c0 <driveD>
}
 8007754:	bf00      	nop
 8007756:	46bd      	mov	sp, r7
 8007758:	bd80      	pop	{r7, pc}
 800775a:	bf00      	nop
 800775c:	20000456 	.word	0x20000456
 8007760:	fffffed4 	.word	0xfffffed4
 8007764:	fffff448 	.word	0xfffff448
 8007768:	20000f64 	.word	0x20000f64
 800776c:	ffff8ad0 	.word	0xffff8ad0
 8007770:	fffffe70 	.word	0xfffffe70
 8007774:	ffffe0c0 	.word	0xffffe0c0

08007778 <v_L45D>:
//v_L45D
//a区画中心から左に45度回転する　ゴール用
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void v_L45D(void){
 8007778:	b580      	push	{r7, lr}
 800777a:	b082      	sub	sp, #8
 800777c:	af02      	add	r7, sp, #8
	full_led_write(YELLOW);
 800777e:	2006      	movs	r0, #6
 8007780:	f009 f8b6 	bl	80108f0 <full_led_write>
	if(run_mode == LOW){
 8007784:	4b60      	ldr	r3, [pc, #384]	; (8007908 <v_L45D+0x190>)
 8007786:	781b      	ldrb	r3, [r3, #0]
 8007788:	b2db      	uxtb	r3, r3
 800778a:	2b01      	cmp	r3, #1
 800778c:	d13a      	bne.n	8007804 <v_L45D+0x8c>
		slalomF(10000, SPEED_LOW, V_OFFSET_B, NO_WALL, NO_WALL);
 800778e:	f241 3388 	movw	r3, #5000	; 0x1388
 8007792:	9300      	str	r3, [sp, #0]
 8007794:	f241 3388 	movw	r3, #5000	; 0x1388
 8007798:	2255      	movs	r2, #85	; 0x55
 800779a:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800779e:	f242 7010 	movw	r0, #10000	; 0x2710
 80077a2:	f7fd fe65 	bl	8005470 <slalomF>
		slalomR(V_DEGACCEL, V_OMEGA, 55, SPEED_LOW);
 80077a6:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80077aa:	2237      	movs	r2, #55	; 0x37
 80077ac:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80077b0:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80077b4:	f7fd fed8 	bl	8005568 <slalomR>

		turn_dir(DIR_TURN_L45_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 80077b8:	2103      	movs	r1, #3
 80077ba:	20ff      	movs	r0, #255	; 0xff
 80077bc:	f007 fa0e 	bl	800ebdc <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 80077c0:	4b52      	ldr	r3, [pc, #328]	; (800790c <v_L45D+0x194>)
 80077c2:	881b      	ldrh	r3, [r3, #0]
 80077c4:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80077c8:	b2db      	uxtb	r3, r3
 80077ca:	3301      	adds	r3, #1
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	f003 0301 	and.w	r3, r3, #1
 80077d2:	bfb8      	it	lt
 80077d4:	425b      	neglt	r3, r3
 80077d6:	f003 0301 	and.w	r3, r3, #1
 80077da:	b2d9      	uxtb	r1, r3
 80077dc:	4a4b      	ldr	r2, [pc, #300]	; (800790c <v_L45D+0x194>)
 80077de:	8813      	ldrh	r3, [r2, #0]
 80077e0:	f361 03c3 	bfi	r3, r1, #3, #1
 80077e4:	8013      	strh	r3, [r2, #0]

		slalomB(10000, SPEED_LOW, V_OFFSET_F-30);
 80077e6:	220a      	movs	r2, #10
 80077e8:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80077ec:	f242 7010 	movw	r0, #10000	; 0x2710
 80077f0:	f7fd ffde 	bl	80057b0 <slalomB>
		driveD(-30000, SPEED_MIN, SPEED_LOW, 30);
 80077f4:	231e      	movs	r3, #30
 80077f6:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80077fa:	2114      	movs	r1, #20
 80077fc:	4844      	ldr	r0, [pc, #272]	; (8007910 <v_L45D+0x198>)
 80077fe:	f7fd fc5f 	bl	80050c0 <driveD>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;

		slalomB(10000, SPEED_HIGH, V_H_OFFSET_F-12);
		driveD(-30000, SPEED_MIN, SPEED_HIGH, 30);
	}
}
 8007802:	e07e      	b.n	8007902 <v_L45D+0x18a>
	}else if(run_mode == MIDDLE){
 8007804:	4b40      	ldr	r3, [pc, #256]	; (8007908 <v_L45D+0x190>)
 8007806:	781b      	ldrb	r3, [r3, #0]
 8007808:	b2db      	uxtb	r3, r3
 800780a:	2b02      	cmp	r3, #2
 800780c:	d13a      	bne.n	8007884 <v_L45D+0x10c>
		slalomF(10000, SPEED_MIDDLE, V_M_OFFSET_B-20, NO_WALL, NO_WALL);
 800780e:	f241 3388 	movw	r3, #5000	; 0x1388
 8007812:	9300      	str	r3, [sp, #0]
 8007814:	f241 3388 	movw	r3, #5000	; 0x1388
 8007818:	2249      	movs	r2, #73	; 0x49
 800781a:	f44f 7116 	mov.w	r1, #600	; 0x258
 800781e:	f242 7010 	movw	r0, #10000	; 0x2710
 8007822:	f7fd fe25 	bl	8005470 <slalomF>
		slalomR(V_M_DEGACCEL, V_M_OMEGA, 45, SPEED_MIDDLE);
 8007826:	f44f 7316 	mov.w	r3, #600	; 0x258
 800782a:	222d      	movs	r2, #45	; 0x2d
 800782c:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8007830:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 8007834:	f7fd fe98 	bl	8005568 <slalomR>
		turn_dir(DIR_TURN_L45_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 8007838:	2103      	movs	r1, #3
 800783a:	20ff      	movs	r0, #255	; 0xff
 800783c:	f007 f9ce 	bl	800ebdc <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 8007840:	4b32      	ldr	r3, [pc, #200]	; (800790c <v_L45D+0x194>)
 8007842:	881b      	ldrh	r3, [r3, #0]
 8007844:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8007848:	b2db      	uxtb	r3, r3
 800784a:	3301      	adds	r3, #1
 800784c:	2b00      	cmp	r3, #0
 800784e:	f003 0301 	and.w	r3, r3, #1
 8007852:	bfb8      	it	lt
 8007854:	425b      	neglt	r3, r3
 8007856:	f003 0301 	and.w	r3, r3, #1
 800785a:	b2d9      	uxtb	r1, r3
 800785c:	4a2b      	ldr	r2, [pc, #172]	; (800790c <v_L45D+0x194>)
 800785e:	8813      	ldrh	r3, [r2, #0]
 8007860:	f361 03c3 	bfi	r3, r1, #3, #1
 8007864:	8013      	strh	r3, [r2, #0]
		slalomB(10000, SPEED_MIDDLE, V_M_OFFSET_F-15);
 8007866:	2219      	movs	r2, #25
 8007868:	f44f 7116 	mov.w	r1, #600	; 0x258
 800786c:	f242 7010 	movw	r0, #10000	; 0x2710
 8007870:	f7fd ff9e 	bl	80057b0 <slalomB>
		driveD(-30000, SPEED_MIN, SPEED_MIDDLE, 30);
 8007874:	231e      	movs	r3, #30
 8007876:	f44f 7216 	mov.w	r2, #600	; 0x258
 800787a:	2114      	movs	r1, #20
 800787c:	4824      	ldr	r0, [pc, #144]	; (8007910 <v_L45D+0x198>)
 800787e:	f7fd fc1f 	bl	80050c0 <driveD>
}
 8007882:	e03e      	b.n	8007902 <v_L45D+0x18a>
	}else if(run_mode == HIGH){
 8007884:	4b20      	ldr	r3, [pc, #128]	; (8007908 <v_L45D+0x190>)
 8007886:	781b      	ldrb	r3, [r3, #0]
 8007888:	b2db      	uxtb	r3, r3
 800788a:	2b03      	cmp	r3, #3
 800788c:	d139      	bne.n	8007902 <v_L45D+0x18a>
		slalomF(10000, SPEED_HIGH, V_H_OFFSET_B, NO_WALL, NO_WALL);
 800788e:	f241 3388 	movw	r3, #5000	; 0x1388
 8007892:	9300      	str	r3, [sp, #0]
 8007894:	f241 3388 	movw	r3, #5000	; 0x1388
 8007898:	224b      	movs	r2, #75	; 0x4b
 800789a:	f44f 7148 	mov.w	r1, #800	; 0x320
 800789e:	f242 7010 	movw	r0, #10000	; 0x2710
 80078a2:	f7fd fde5 	bl	8005470 <slalomF>
		slalomR(V_H_DEGACCEL, V_H_OMEGA, 45, SPEED_HIGH);
 80078a6:	f44f 7348 	mov.w	r3, #800	; 0x320
 80078aa:	222d      	movs	r2, #45	; 0x2d
 80078ac:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80078b0:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 80078b4:	f7fd fe58 	bl	8005568 <slalomR>
		turn_dir(DIR_TURN_L45_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 80078b8:	2103      	movs	r1, #3
 80078ba:	20ff      	movs	r0, #255	; 0xff
 80078bc:	f007 f98e 	bl	800ebdc <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 80078c0:	4b12      	ldr	r3, [pc, #72]	; (800790c <v_L45D+0x194>)
 80078c2:	881b      	ldrh	r3, [r3, #0]
 80078c4:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80078c8:	b2db      	uxtb	r3, r3
 80078ca:	3301      	adds	r3, #1
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	f003 0301 	and.w	r3, r3, #1
 80078d2:	bfb8      	it	lt
 80078d4:	425b      	neglt	r3, r3
 80078d6:	f003 0301 	and.w	r3, r3, #1
 80078da:	b2d9      	uxtb	r1, r3
 80078dc:	4a0b      	ldr	r2, [pc, #44]	; (800790c <v_L45D+0x194>)
 80078de:	8813      	ldrh	r3, [r2, #0]
 80078e0:	f361 03c3 	bfi	r3, r1, #3, #1
 80078e4:	8013      	strh	r3, [r2, #0]
		slalomB(10000, SPEED_HIGH, V_H_OFFSET_F-12);
 80078e6:	220b      	movs	r2, #11
 80078e8:	f44f 7148 	mov.w	r1, #800	; 0x320
 80078ec:	f242 7010 	movw	r0, #10000	; 0x2710
 80078f0:	f7fd ff5e 	bl	80057b0 <slalomB>
		driveD(-30000, SPEED_MIN, SPEED_HIGH, 30);
 80078f4:	231e      	movs	r3, #30
 80078f6:	f44f 7248 	mov.w	r2, #800	; 0x320
 80078fa:	2114      	movs	r1, #20
 80078fc:	4804      	ldr	r0, [pc, #16]	; (8007910 <v_L45D+0x198>)
 80078fe:	f7fd fbdf 	bl	80050c0 <driveD>
}
 8007902:	bf00      	nop
 8007904:	46bd      	mov	sp, r7
 8007906:	bd80      	pop	{r7, pc}
 8007908:	20000456 	.word	0x20000456
 800790c:	20000f64 	.word	0x20000f64
 8007910:	ffff8ad0 	.word	0xffff8ad0

08007914 <v_R90>:
//v_R90
// 柱中心から右に90度回転する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void v_R90(void){
 8007914:	b580      	push	{r7, lr}
 8007916:	b082      	sub	sp, #8
 8007918:	af02      	add	r7, sp, #8
	full_led_write(YELLOW);
 800791a:	2006      	movs	r0, #6
 800791c:	f008 ffe8 	bl	80108f0 <full_led_write>
	if(run_mode == LOW){
 8007920:	4b4a      	ldr	r3, [pc, #296]	; (8007a4c <v_R90+0x138>)
 8007922:	781b      	ldrb	r3, [r3, #0]
 8007924:	b2db      	uxtb	r3, r3
 8007926:	2b01      	cmp	r3, #1
 8007928:	d11f      	bne.n	800796a <v_R90+0x56>
		slalomF(10000, SPEED_LOW, VV_OFFSET_F, NO_WALL, NO_WALL);
 800792a:	f241 3388 	movw	r3, #5000	; 0x1388
 800792e:	9300      	str	r3, [sp, #0]
 8007930:	f241 3388 	movw	r3, #5000	; 0x1388
 8007934:	222d      	movs	r2, #45	; 0x2d
 8007936:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800793a:	f242 7010 	movw	r0, #10000	; 0x2710
 800793e:	f7fd fd97 	bl	8005470 <slalomF>
		slalomR(-VV_DEGACCEL, -VV_OMEGA, -90, SPEED_LOW);
 8007942:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8007946:	f06f 0259 	mvn.w	r2, #89	; 0x59
 800794a:	4941      	ldr	r1, [pc, #260]	; (8007a50 <v_R90+0x13c>)
 800794c:	4841      	ldr	r0, [pc, #260]	; (8007a54 <v_R90+0x140>)
 800794e:	f7fd fe0b 	bl	8005568 <slalomR>

		turn_dir(DIR_TURN_R90_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 8007952:	2103      	movs	r1, #3
 8007954:	2002      	movs	r0, #2
 8007956:	f007 f941 	bl	800ebdc <turn_dir>

		slalomB(10000, SPEED_LOW, VV_OFFSET_B);
 800795a:	222d      	movs	r2, #45	; 0x2d
 800795c:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8007960:	f242 7010 	movw	r0, #10000	; 0x2710
 8007964:	f7fd ff24 	bl	80057b0 <slalomB>

		turn_dir(DIR_TURN_R90_8, 3);									//マイクロマウス内部位置情報でも左回転処理

		slalomB(10000, SPEED_HIGH_HIGH, VV_H_H_OFFSET_B);
	}
}
 8007968:	e06d      	b.n	8007a46 <v_R90+0x132>
	}else if(run_mode == MIDDLE){
 800796a:	4b38      	ldr	r3, [pc, #224]	; (8007a4c <v_R90+0x138>)
 800796c:	781b      	ldrb	r3, [r3, #0]
 800796e:	b2db      	uxtb	r3, r3
 8007970:	2b02      	cmp	r3, #2
 8007972:	d11f      	bne.n	80079b4 <v_R90+0xa0>
		slalomF(10000, SPEED_MIDDLE, VV_M_OFFSET_F, NO_WALL, NO_WALL);
 8007974:	f241 3388 	movw	r3, #5000	; 0x1388
 8007978:	9300      	str	r3, [sp, #0]
 800797a:	f241 3388 	movw	r3, #5000	; 0x1388
 800797e:	223a      	movs	r2, #58	; 0x3a
 8007980:	f44f 7116 	mov.w	r1, #600	; 0x258
 8007984:	f242 7010 	movw	r0, #10000	; 0x2710
 8007988:	f7fd fd72 	bl	8005470 <slalomF>
		slalomR(-VV_M_DEGACCEL, -VV_M_OMEGA, -90, SPEED_MIDDLE);
 800798c:	f44f 7316 	mov.w	r3, #600	; 0x258
 8007990:	f06f 0259 	mvn.w	r2, #89	; 0x59
 8007994:	4930      	ldr	r1, [pc, #192]	; (8007a58 <v_R90+0x144>)
 8007996:	4831      	ldr	r0, [pc, #196]	; (8007a5c <v_R90+0x148>)
 8007998:	f7fd fde6 	bl	8005568 <slalomR>
		turn_dir(DIR_TURN_R90_8, 3);									//マイクロマウス内部位置情報でも左回転処理
 800799c:	2103      	movs	r1, #3
 800799e:	2002      	movs	r0, #2
 80079a0:	f007 f91c 	bl	800ebdc <turn_dir>
		slalomB(10000, SPEED_MIDDLE, VV_M_OFFSET_B);
 80079a4:	2252      	movs	r2, #82	; 0x52
 80079a6:	f44f 7116 	mov.w	r1, #600	; 0x258
 80079aa:	f242 7010 	movw	r0, #10000	; 0x2710
 80079ae:	f7fd feff 	bl	80057b0 <slalomB>
}
 80079b2:	e048      	b.n	8007a46 <v_R90+0x132>
	}else if(run_mode == HIGH){
 80079b4:	4b25      	ldr	r3, [pc, #148]	; (8007a4c <v_R90+0x138>)
 80079b6:	781b      	ldrb	r3, [r3, #0]
 80079b8:	b2db      	uxtb	r3, r3
 80079ba:	2b03      	cmp	r3, #3
 80079bc:	d11f      	bne.n	80079fe <v_R90+0xea>
		slalomF(10000, SPEED_HIGH, VV_H_OFFSET_F, NO_WALL, NO_WALL);
 80079be:	f241 3388 	movw	r3, #5000	; 0x1388
 80079c2:	9300      	str	r3, [sp, #0]
 80079c4:	f241 3388 	movw	r3, #5000	; 0x1388
 80079c8:	2223      	movs	r2, #35	; 0x23
 80079ca:	f44f 7148 	mov.w	r1, #800	; 0x320
 80079ce:	f242 7010 	movw	r0, #10000	; 0x2710
 80079d2:	f7fd fd4d 	bl	8005470 <slalomF>
		slalomR(-VV_H_DEGACCEL, -VV_H_OMEGA, -90, SPEED_HIGH);
 80079d6:	f44f 7348 	mov.w	r3, #800	; 0x320
 80079da:	f06f 0259 	mvn.w	r2, #89	; 0x59
 80079de:	491e      	ldr	r1, [pc, #120]	; (8007a58 <v_R90+0x144>)
 80079e0:	481e      	ldr	r0, [pc, #120]	; (8007a5c <v_R90+0x148>)
 80079e2:	f7fd fdc1 	bl	8005568 <slalomR>
		turn_dir(DIR_TURN_R90_8, 3);									//マイクロマウス内部位置情報でも左回転処理
 80079e6:	2103      	movs	r1, #3
 80079e8:	2002      	movs	r0, #2
 80079ea:	f007 f8f7 	bl	800ebdc <turn_dir>
		slalomB(10000, SPEED_HIGH, VV_H_OFFSET_B);
 80079ee:	2241      	movs	r2, #65	; 0x41
 80079f0:	f44f 7148 	mov.w	r1, #800	; 0x320
 80079f4:	f242 7010 	movw	r0, #10000	; 0x2710
 80079f8:	f7fd feda 	bl	80057b0 <slalomB>
}
 80079fc:	e023      	b.n	8007a46 <v_R90+0x132>
	}else if(run_mode == HIGH_HIGH){
 80079fe:	4b13      	ldr	r3, [pc, #76]	; (8007a4c <v_R90+0x138>)
 8007a00:	781b      	ldrb	r3, [r3, #0]
 8007a02:	b2db      	uxtb	r3, r3
 8007a04:	2b04      	cmp	r3, #4
 8007a06:	d11e      	bne.n	8007a46 <v_R90+0x132>
		slalomF(10000, SPEED_HIGH_HIGH, VV_H_H_OFFSET_F, NO_WALL, NO_WALL);
 8007a08:	f241 3388 	movw	r3, #5000	; 0x1388
 8007a0c:	9300      	str	r3, [sp, #0]
 8007a0e:	f241 3388 	movw	r3, #5000	; 0x1388
 8007a12:	221e      	movs	r2, #30
 8007a14:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8007a18:	f242 7010 	movw	r0, #10000	; 0x2710
 8007a1c:	f7fd fd28 	bl	8005470 <slalomF>
		slalomR(-VV_H_H_DEGACCEL, -VV_H_H_OMEGA, -90, SPEED_HIGH_HIGH);
 8007a20:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007a24:	f06f 0259 	mvn.w	r2, #89	; 0x59
 8007a28:	490b      	ldr	r1, [pc, #44]	; (8007a58 <v_R90+0x144>)
 8007a2a:	480d      	ldr	r0, [pc, #52]	; (8007a60 <v_R90+0x14c>)
 8007a2c:	f7fd fd9c 	bl	8005568 <slalomR>
		turn_dir(DIR_TURN_R90_8, 3);									//マイクロマウス内部位置情報でも左回転処理
 8007a30:	2103      	movs	r1, #3
 8007a32:	2002      	movs	r0, #2
 8007a34:	f007 f8d2 	bl	800ebdc <turn_dir>
		slalomB(10000, SPEED_HIGH_HIGH, VV_H_H_OFFSET_B);
 8007a38:	221e      	movs	r2, #30
 8007a3a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8007a3e:	f242 7010 	movw	r0, #10000	; 0x2710
 8007a42:	f7fd feb5 	bl	80057b0 <slalomB>
}
 8007a46:	bf00      	nop
 8007a48:	46bd      	mov	sp, r7
 8007a4a:	bd80      	pop	{r7, pc}
 8007a4c:	20000456 	.word	0x20000456
 8007a50:	fffffea2 	.word	0xfffffea2
 8007a54:	fffff254 	.word	0xfffff254
 8007a58:	fffffce0 	.word	0xfffffce0
 8007a5c:	ffffd8f0 	.word	0xffffd8f0
 8007a60:	ffffc180 	.word	0xffffc180

08007a64 <v_L90>:
//v_L90
// 柱中心から左に90度回転する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void v_L90(void){
 8007a64:	b580      	push	{r7, lr}
 8007a66:	b082      	sub	sp, #8
 8007a68:	af02      	add	r7, sp, #8
	full_led_write(PURPLE);
 8007a6a:	2005      	movs	r0, #5
 8007a6c:	f008 ff40 	bl	80108f0 <full_led_write>
	if(run_mode == LOW){
 8007a70:	4b4c      	ldr	r3, [pc, #304]	; (8007ba4 <v_L90+0x140>)
 8007a72:	781b      	ldrb	r3, [r3, #0]
 8007a74:	b2db      	uxtb	r3, r3
 8007a76:	2b01      	cmp	r3, #1
 8007a78:	d120      	bne.n	8007abc <v_L90+0x58>
		slalomF(10000, SPEED_LOW, VV_OFFSET_F, NO_WALL, NO_WALL);
 8007a7a:	f241 3388 	movw	r3, #5000	; 0x1388
 8007a7e:	9300      	str	r3, [sp, #0]
 8007a80:	f241 3388 	movw	r3, #5000	; 0x1388
 8007a84:	222d      	movs	r2, #45	; 0x2d
 8007a86:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8007a8a:	f242 7010 	movw	r0, #10000	; 0x2710
 8007a8e:	f7fd fcef 	bl	8005470 <slalomF>
		slalomR(VV_DEGACCEL, VV_OMEGA, 90, SPEED_LOW);
 8007a92:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8007a96:	225a      	movs	r2, #90	; 0x5a
 8007a98:	f44f 71af 	mov.w	r1, #350	; 0x15e
 8007a9c:	f640 50ac 	movw	r0, #3500	; 0xdac
 8007aa0:	f7fd fd62 	bl	8005568 <slalomR>

		turn_dir(DIR_TURN_L90_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 8007aa4:	2103      	movs	r1, #3
 8007aa6:	20fe      	movs	r0, #254	; 0xfe
 8007aa8:	f007 f898 	bl	800ebdc <turn_dir>

		slalomB(10000, SPEED_LOW, VV_OFFSET_B);
 8007aac:	222d      	movs	r2, #45	; 0x2d
 8007aae:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8007ab2:	f242 7010 	movw	r0, #10000	; 0x2710
 8007ab6:	f7fd fe7b 	bl	80057b0 <slalomB>

		turn_dir(DIR_TURN_L90_8, 3);									//aマイクロマウス内部位置情報でも左回転処理

		slalomB(10000, SPEED_HIGH_HIGH, VV_H_H_OFFSET_B);
	}
}
 8007aba:	e070      	b.n	8007b9e <v_L90+0x13a>
	}else if(run_mode == MIDDLE){
 8007abc:	4b39      	ldr	r3, [pc, #228]	; (8007ba4 <v_L90+0x140>)
 8007abe:	781b      	ldrb	r3, [r3, #0]
 8007ac0:	b2db      	uxtb	r3, r3
 8007ac2:	2b02      	cmp	r3, #2
 8007ac4:	d120      	bne.n	8007b08 <v_L90+0xa4>
		slalomF(10000, SPEED_MIDDLE, VV_M_OFFSET_F, NO_WALL, NO_WALL);
 8007ac6:	f241 3388 	movw	r3, #5000	; 0x1388
 8007aca:	9300      	str	r3, [sp, #0]
 8007acc:	f241 3388 	movw	r3, #5000	; 0x1388
 8007ad0:	223a      	movs	r2, #58	; 0x3a
 8007ad2:	f44f 7116 	mov.w	r1, #600	; 0x258
 8007ad6:	f242 7010 	movw	r0, #10000	; 0x2710
 8007ada:	f7fd fcc9 	bl	8005470 <slalomF>
		slalomR(VV_M_DEGACCEL, VV_M_OMEGA, 90, SPEED_MIDDLE);
 8007ade:	f44f 7316 	mov.w	r3, #600	; 0x258
 8007ae2:	225a      	movs	r2, #90	; 0x5a
 8007ae4:	f44f 7148 	mov.w	r1, #800	; 0x320
 8007ae8:	f242 7010 	movw	r0, #10000	; 0x2710
 8007aec:	f7fd fd3c 	bl	8005568 <slalomR>
		turn_dir(DIR_TURN_L90_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 8007af0:	2103      	movs	r1, #3
 8007af2:	20fe      	movs	r0, #254	; 0xfe
 8007af4:	f007 f872 	bl	800ebdc <turn_dir>
		slalomB(10000, SPEED_MIDDLE, VV_M_OFFSET_B);
 8007af8:	2252      	movs	r2, #82	; 0x52
 8007afa:	f44f 7116 	mov.w	r1, #600	; 0x258
 8007afe:	f242 7010 	movw	r0, #10000	; 0x2710
 8007b02:	f7fd fe55 	bl	80057b0 <slalomB>
}
 8007b06:	e04a      	b.n	8007b9e <v_L90+0x13a>
	}else if(run_mode == HIGH){
 8007b08:	4b26      	ldr	r3, [pc, #152]	; (8007ba4 <v_L90+0x140>)
 8007b0a:	781b      	ldrb	r3, [r3, #0]
 8007b0c:	b2db      	uxtb	r3, r3
 8007b0e:	2b03      	cmp	r3, #3
 8007b10:	d120      	bne.n	8007b54 <v_L90+0xf0>
		slalomF(10000, SPEED_HIGH, VV_H_OFFSET_F, NO_WALL, NO_WALL);
 8007b12:	f241 3388 	movw	r3, #5000	; 0x1388
 8007b16:	9300      	str	r3, [sp, #0]
 8007b18:	f241 3388 	movw	r3, #5000	; 0x1388
 8007b1c:	2223      	movs	r2, #35	; 0x23
 8007b1e:	f44f 7148 	mov.w	r1, #800	; 0x320
 8007b22:	f242 7010 	movw	r0, #10000	; 0x2710
 8007b26:	f7fd fca3 	bl	8005470 <slalomF>
		slalomR(VV_H_DEGACCEL, VV_H_OMEGA, 90, SPEED_HIGH);
 8007b2a:	f44f 7348 	mov.w	r3, #800	; 0x320
 8007b2e:	225a      	movs	r2, #90	; 0x5a
 8007b30:	f44f 7148 	mov.w	r1, #800	; 0x320
 8007b34:	f242 7010 	movw	r0, #10000	; 0x2710
 8007b38:	f7fd fd16 	bl	8005568 <slalomR>
		turn_dir(DIR_TURN_L90_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 8007b3c:	2103      	movs	r1, #3
 8007b3e:	20fe      	movs	r0, #254	; 0xfe
 8007b40:	f007 f84c 	bl	800ebdc <turn_dir>
		slalomB(10000, SPEED_HIGH, VV_H_OFFSET_B);
 8007b44:	2241      	movs	r2, #65	; 0x41
 8007b46:	f44f 7148 	mov.w	r1, #800	; 0x320
 8007b4a:	f242 7010 	movw	r0, #10000	; 0x2710
 8007b4e:	f7fd fe2f 	bl	80057b0 <slalomB>
}
 8007b52:	e024      	b.n	8007b9e <v_L90+0x13a>
	}else if(run_mode == HIGH_HIGH){
 8007b54:	4b13      	ldr	r3, [pc, #76]	; (8007ba4 <v_L90+0x140>)
 8007b56:	781b      	ldrb	r3, [r3, #0]
 8007b58:	b2db      	uxtb	r3, r3
 8007b5a:	2b04      	cmp	r3, #4
 8007b5c:	d11f      	bne.n	8007b9e <v_L90+0x13a>
		slalomF(10000, SPEED_HIGH_HIGH, VV_H_H_OFFSET_F, NO_WALL, NO_WALL);
 8007b5e:	f241 3388 	movw	r3, #5000	; 0x1388
 8007b62:	9300      	str	r3, [sp, #0]
 8007b64:	f241 3388 	movw	r3, #5000	; 0x1388
 8007b68:	221e      	movs	r2, #30
 8007b6a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8007b6e:	f242 7010 	movw	r0, #10000	; 0x2710
 8007b72:	f7fd fc7d 	bl	8005470 <slalomF>
		slalomR(VV_H_H_DEGACCEL, VV_H_H_OMEGA, 90, SPEED_HIGH_HIGH);
 8007b76:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007b7a:	225a      	movs	r2, #90	; 0x5a
 8007b7c:	f44f 7148 	mov.w	r1, #800	; 0x320
 8007b80:	f44f 507a 	mov.w	r0, #16000	; 0x3e80
 8007b84:	f7fd fcf0 	bl	8005568 <slalomR>
		turn_dir(DIR_TURN_L90_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 8007b88:	2103      	movs	r1, #3
 8007b8a:	20fe      	movs	r0, #254	; 0xfe
 8007b8c:	f007 f826 	bl	800ebdc <turn_dir>
		slalomB(10000, SPEED_HIGH_HIGH, VV_H_H_OFFSET_B);
 8007b90:	221e      	movs	r2, #30
 8007b92:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8007b96:	f242 7010 	movw	r0, #10000	; 0x2710
 8007b9a:	f7fd fe09 	bl	80057b0 <slalomB>
}
 8007b9e:	bf00      	nop
 8007ba0:	46bd      	mov	sp, r7
 8007ba2:	bd80      	pop	{r7, pc}
 8007ba4:	20000456 	.word	0x20000456

08007ba8 <v_R135>:
//v_R135
// 区画中心から右に135度回転する　ゴール用
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void v_R135(void){
 8007ba8:	b580      	push	{r7, lr}
 8007baa:	b082      	sub	sp, #8
 8007bac:	af02      	add	r7, sp, #8
	full_led_write(YELLOW);
 8007bae:	2006      	movs	r0, #6
 8007bb0:	f008 fe9e 	bl	80108f0 <full_led_write>
	if(run_mode == LOW){
 8007bb4:	4bb6      	ldr	r3, [pc, #728]	; (8007e90 <v_R135+0x2e8>)
 8007bb6:	781b      	ldrb	r3, [r3, #0]
 8007bb8:	b2db      	uxtb	r3, r3
 8007bba:	2b01      	cmp	r3, #1
 8007bbc:	d155      	bne.n	8007c6a <v_R135+0xc2>
		if(!MF2.FLAG.V){
 8007bbe:	4bb5      	ldr	r3, [pc, #724]	; (8007e94 <v_R135+0x2ec>)
 8007bc0:	881b      	ldrh	r3, [r3, #0]
 8007bc2:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8007bc6:	b2db      	uxtb	r3, r3
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d10c      	bne.n	8007be6 <v_R135+0x3e>
			slalomF(10000, SPEED_LOW, VVV_OFFSET_F, NO_WALL, NO_WALL);
 8007bcc:	f241 3388 	movw	r3, #5000	; 0x1388
 8007bd0:	9300      	str	r3, [sp, #0]
 8007bd2:	f241 3388 	movw	r3, #5000	; 0x1388
 8007bd6:	2244      	movs	r2, #68	; 0x44
 8007bd8:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8007bdc:	f242 7010 	movw	r0, #10000	; 0x2710
 8007be0:	f7fd fc46 	bl	8005470 <slalomF>
 8007be4:	e00b      	b.n	8007bfe <v_R135+0x56>
		}else{
			slalomF(10000, SPEED_LOW, VVV_OFFSET_B, NO_WALL, NO_WALL);
 8007be6:	f241 3388 	movw	r3, #5000	; 0x1388
 8007bea:	9300      	str	r3, [sp, #0]
 8007bec:	f241 3388 	movw	r3, #5000	; 0x1388
 8007bf0:	223a      	movs	r2, #58	; 0x3a
 8007bf2:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8007bf6:	f242 7010 	movw	r0, #10000	; 0x2710
 8007bfa:	f7fd fc39 	bl	8005470 <slalomF>
		}
		slalomR(-VVV_DEGACCEL, -VVV_OMEGA, -135, SPEED_LOW);
 8007bfe:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8007c02:	f06f 0286 	mvn.w	r2, #134	; 0x86
 8007c06:	49a4      	ldr	r1, [pc, #656]	; (8007e98 <v_R135+0x2f0>)
 8007c08:	48a4      	ldr	r0, [pc, #656]	; (8007e9c <v_R135+0x2f4>)
 8007c0a:	f7fd fcad 	bl	8005568 <slalomR>

		turn_dir(DIR_TURN_R135_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 8007c0e:	2103      	movs	r1, #3
 8007c10:	2003      	movs	r0, #3
 8007c12:	f006 ffe3 	bl	800ebdc <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 8007c16:	4b9f      	ldr	r3, [pc, #636]	; (8007e94 <v_R135+0x2ec>)
 8007c18:	881b      	ldrh	r3, [r3, #0]
 8007c1a:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8007c1e:	b2db      	uxtb	r3, r3
 8007c20:	3301      	adds	r3, #1
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	f003 0301 	and.w	r3, r3, #1
 8007c28:	bfb8      	it	lt
 8007c2a:	425b      	neglt	r3, r3
 8007c2c:	f003 0301 	and.w	r3, r3, #1
 8007c30:	b2d9      	uxtb	r1, r3
 8007c32:	4a98      	ldr	r2, [pc, #608]	; (8007e94 <v_R135+0x2ec>)
 8007c34:	8813      	ldrh	r3, [r2, #0]
 8007c36:	f361 03c3 	bfi	r3, r1, #3, #1
 8007c3a:	8013      	strh	r3, [r2, #0]

		if(!MF2.FLAG.V){
 8007c3c:	4b95      	ldr	r3, [pc, #596]	; (8007e94 <v_R135+0x2ec>)
 8007c3e:	881b      	ldrh	r3, [r3, #0]
 8007c40:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8007c44:	b2db      	uxtb	r3, r3
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d107      	bne.n	8007c5a <v_R135+0xb2>
			slalomB(10000, SPEED_LOW, VVV_OFFSET_F);
 8007c4a:	2244      	movs	r2, #68	; 0x44
 8007c4c:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8007c50:	f242 7010 	movw	r0, #10000	; 0x2710
 8007c54:	f7fd fdac 	bl	80057b0 <slalomB>
			slalomB(10000, SPEED_HIGH_HIGH, VVV_H_H_OFFSET_F);
		}else{
			slalomB(10000, SPEED_HIGH_HIGH, VVV_H_H_OFFSET_B);
		}
	}
}
 8007c58:	e117      	b.n	8007e8a <v_R135+0x2e2>
			slalomB(10000, SPEED_LOW, VVV_OFFSET_B);
 8007c5a:	223a      	movs	r2, #58	; 0x3a
 8007c5c:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8007c60:	f242 7010 	movw	r0, #10000	; 0x2710
 8007c64:	f7fd fda4 	bl	80057b0 <slalomB>
}
 8007c68:	e10f      	b.n	8007e8a <v_R135+0x2e2>
	}else if(run_mode == MIDDLE){
 8007c6a:	4b89      	ldr	r3, [pc, #548]	; (8007e90 <v_R135+0x2e8>)
 8007c6c:	781b      	ldrb	r3, [r3, #0]
 8007c6e:	b2db      	uxtb	r3, r3
 8007c70:	2b02      	cmp	r3, #2
 8007c72:	d155      	bne.n	8007d20 <v_R135+0x178>
		if(!MF2.FLAG.V){
 8007c74:	4b87      	ldr	r3, [pc, #540]	; (8007e94 <v_R135+0x2ec>)
 8007c76:	881b      	ldrh	r3, [r3, #0]
 8007c78:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8007c7c:	b2db      	uxtb	r3, r3
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d10c      	bne.n	8007c9c <v_R135+0xf4>
			slalomF(10000, SPEED_MIDDLE, VVV_M_OFFSET_F, NO_WALL, NO_WALL);
 8007c82:	f241 3388 	movw	r3, #5000	; 0x1388
 8007c86:	9300      	str	r3, [sp, #0]
 8007c88:	f241 3388 	movw	r3, #5000	; 0x1388
 8007c8c:	2246      	movs	r2, #70	; 0x46
 8007c8e:	f44f 7116 	mov.w	r1, #600	; 0x258
 8007c92:	f242 7010 	movw	r0, #10000	; 0x2710
 8007c96:	f7fd fbeb 	bl	8005470 <slalomF>
 8007c9a:	e00b      	b.n	8007cb4 <v_R135+0x10c>
			slalomF(10000, SPEED_MIDDLE, VVV_M_OFFSET_B-25, NO_WALL, NO_WALL);
 8007c9c:	f241 3388 	movw	r3, #5000	; 0x1388
 8007ca0:	9300      	str	r3, [sp, #0]
 8007ca2:	f241 3388 	movw	r3, #5000	; 0x1388
 8007ca6:	2237      	movs	r2, #55	; 0x37
 8007ca8:	f44f 7116 	mov.w	r1, #600	; 0x258
 8007cac:	f242 7010 	movw	r0, #10000	; 0x2710
 8007cb0:	f7fd fbde 	bl	8005470 <slalomF>
		slalomR(-VVV_M_DEGACCEL, -VVV_M_OMEGA, -135, SPEED_MIDDLE);
 8007cb4:	f44f 7316 	mov.w	r3, #600	; 0x258
 8007cb8:	f06f 0286 	mvn.w	r2, #134	; 0x86
 8007cbc:	4978      	ldr	r1, [pc, #480]	; (8007ea0 <v_R135+0x2f8>)
 8007cbe:	4879      	ldr	r0, [pc, #484]	; (8007ea4 <v_R135+0x2fc>)
 8007cc0:	f7fd fc52 	bl	8005568 <slalomR>
		turn_dir(DIR_TURN_R135_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 8007cc4:	2103      	movs	r1, #3
 8007cc6:	2003      	movs	r0, #3
 8007cc8:	f006 ff88 	bl	800ebdc <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 8007ccc:	4b71      	ldr	r3, [pc, #452]	; (8007e94 <v_R135+0x2ec>)
 8007cce:	881b      	ldrh	r3, [r3, #0]
 8007cd0:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8007cd4:	b2db      	uxtb	r3, r3
 8007cd6:	3301      	adds	r3, #1
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	f003 0301 	and.w	r3, r3, #1
 8007cde:	bfb8      	it	lt
 8007ce0:	425b      	neglt	r3, r3
 8007ce2:	f003 0301 	and.w	r3, r3, #1
 8007ce6:	b2d9      	uxtb	r1, r3
 8007ce8:	4a6a      	ldr	r2, [pc, #424]	; (8007e94 <v_R135+0x2ec>)
 8007cea:	8813      	ldrh	r3, [r2, #0]
 8007cec:	f361 03c3 	bfi	r3, r1, #3, #1
 8007cf0:	8013      	strh	r3, [r2, #0]
		if(!MF2.FLAG.V){
 8007cf2:	4b68      	ldr	r3, [pc, #416]	; (8007e94 <v_R135+0x2ec>)
 8007cf4:	881b      	ldrh	r3, [r3, #0]
 8007cf6:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8007cfa:	b2db      	uxtb	r3, r3
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d107      	bne.n	8007d10 <v_R135+0x168>
			slalomB(10000, SPEED_MIDDLE, VVV_M_OFFSET_F+25);
 8007d00:	225f      	movs	r2, #95	; 0x5f
 8007d02:	f44f 7116 	mov.w	r1, #600	; 0x258
 8007d06:	f242 7010 	movw	r0, #10000	; 0x2710
 8007d0a:	f7fd fd51 	bl	80057b0 <slalomB>
}
 8007d0e:	e0bc      	b.n	8007e8a <v_R135+0x2e2>
			slalomB(10000, SPEED_MIDDLE, VVV_M_OFFSET_B);
 8007d10:	2250      	movs	r2, #80	; 0x50
 8007d12:	f44f 7116 	mov.w	r1, #600	; 0x258
 8007d16:	f242 7010 	movw	r0, #10000	; 0x2710
 8007d1a:	f7fd fd49 	bl	80057b0 <slalomB>
}
 8007d1e:	e0b4      	b.n	8007e8a <v_R135+0x2e2>
	}else if(run_mode == HIGH){
 8007d20:	4b5b      	ldr	r3, [pc, #364]	; (8007e90 <v_R135+0x2e8>)
 8007d22:	781b      	ldrb	r3, [r3, #0]
 8007d24:	b2db      	uxtb	r3, r3
 8007d26:	2b03      	cmp	r3, #3
 8007d28:	d155      	bne.n	8007dd6 <v_R135+0x22e>
		if(!MF2.FLAG.V){
 8007d2a:	4b5a      	ldr	r3, [pc, #360]	; (8007e94 <v_R135+0x2ec>)
 8007d2c:	881b      	ldrh	r3, [r3, #0]
 8007d2e:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8007d32:	b2db      	uxtb	r3, r3
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d10c      	bne.n	8007d52 <v_R135+0x1aa>
			slalomF(10000, SPEED_HIGH, VVV_H_OFFSET_F, NO_WALL, NO_WALL);
 8007d38:	f241 3388 	movw	r3, #5000	; 0x1388
 8007d3c:	9300      	str	r3, [sp, #0]
 8007d3e:	f241 3388 	movw	r3, #5000	; 0x1388
 8007d42:	2255      	movs	r2, #85	; 0x55
 8007d44:	f44f 7148 	mov.w	r1, #800	; 0x320
 8007d48:	f242 7010 	movw	r0, #10000	; 0x2710
 8007d4c:	f7fd fb90 	bl	8005470 <slalomF>
 8007d50:	e00b      	b.n	8007d6a <v_R135+0x1c2>
			slalomF(10000, SPEED_HIGH, VVV_H_OFFSET_B-30, NO_WALL, NO_WALL);
 8007d52:	f241 3388 	movw	r3, #5000	; 0x1388
 8007d56:	9300      	str	r3, [sp, #0]
 8007d58:	f241 3388 	movw	r3, #5000	; 0x1388
 8007d5c:	224b      	movs	r2, #75	; 0x4b
 8007d5e:	f44f 7148 	mov.w	r1, #800	; 0x320
 8007d62:	f242 7010 	movw	r0, #10000	; 0x2710
 8007d66:	f7fd fb83 	bl	8005470 <slalomF>
		slalomR(-VVV_H_DEGACCEL, -VVV_H_OMEGA, -135, SPEED_HIGH);
 8007d6a:	f44f 7348 	mov.w	r3, #800	; 0x320
 8007d6e:	f06f 0286 	mvn.w	r2, #134	; 0x86
 8007d72:	494d      	ldr	r1, [pc, #308]	; (8007ea8 <v_R135+0x300>)
 8007d74:	484d      	ldr	r0, [pc, #308]	; (8007eac <v_R135+0x304>)
 8007d76:	f7fd fbf7 	bl	8005568 <slalomR>
		turn_dir(DIR_TURN_R135_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 8007d7a:	2103      	movs	r1, #3
 8007d7c:	2003      	movs	r0, #3
 8007d7e:	f006 ff2d 	bl	800ebdc <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 8007d82:	4b44      	ldr	r3, [pc, #272]	; (8007e94 <v_R135+0x2ec>)
 8007d84:	881b      	ldrh	r3, [r3, #0]
 8007d86:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8007d8a:	b2db      	uxtb	r3, r3
 8007d8c:	3301      	adds	r3, #1
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	f003 0301 	and.w	r3, r3, #1
 8007d94:	bfb8      	it	lt
 8007d96:	425b      	neglt	r3, r3
 8007d98:	f003 0301 	and.w	r3, r3, #1
 8007d9c:	b2d9      	uxtb	r1, r3
 8007d9e:	4a3d      	ldr	r2, [pc, #244]	; (8007e94 <v_R135+0x2ec>)
 8007da0:	8813      	ldrh	r3, [r2, #0]
 8007da2:	f361 03c3 	bfi	r3, r1, #3, #1
 8007da6:	8013      	strh	r3, [r2, #0]
		if(!MF2.FLAG.V){
 8007da8:	4b3a      	ldr	r3, [pc, #232]	; (8007e94 <v_R135+0x2ec>)
 8007daa:	881b      	ldrh	r3, [r3, #0]
 8007dac:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8007db0:	b2db      	uxtb	r3, r3
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d107      	bne.n	8007dc6 <v_R135+0x21e>
			slalomB(10000, SPEED_HIGH, VVV_H_OFFSET_F+45);
 8007db6:	2282      	movs	r2, #130	; 0x82
 8007db8:	f44f 7148 	mov.w	r1, #800	; 0x320
 8007dbc:	f242 7010 	movw	r0, #10000	; 0x2710
 8007dc0:	f7fd fcf6 	bl	80057b0 <slalomB>
}
 8007dc4:	e061      	b.n	8007e8a <v_R135+0x2e2>
			slalomB(10000, SPEED_HIGH, VVV_H_OFFSET_B);
 8007dc6:	2269      	movs	r2, #105	; 0x69
 8007dc8:	f44f 7148 	mov.w	r1, #800	; 0x320
 8007dcc:	f242 7010 	movw	r0, #10000	; 0x2710
 8007dd0:	f7fd fcee 	bl	80057b0 <slalomB>
}
 8007dd4:	e059      	b.n	8007e8a <v_R135+0x2e2>
	}else if(run_mode == HIGH_HIGH){
 8007dd6:	4b2e      	ldr	r3, [pc, #184]	; (8007e90 <v_R135+0x2e8>)
 8007dd8:	781b      	ldrb	r3, [r3, #0]
 8007dda:	b2db      	uxtb	r3, r3
 8007ddc:	2b04      	cmp	r3, #4
 8007dde:	d154      	bne.n	8007e8a <v_R135+0x2e2>
		if(!MF2.FLAG.V){
 8007de0:	4b2c      	ldr	r3, [pc, #176]	; (8007e94 <v_R135+0x2ec>)
 8007de2:	881b      	ldrh	r3, [r3, #0]
 8007de4:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8007de8:	b2db      	uxtb	r3, r3
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d10c      	bne.n	8007e08 <v_R135+0x260>
			slalomF(10000, SPEED_HIGH_HIGH, VVV_H_H_OFFSET_F, NO_WALL, NO_WALL);
 8007dee:	f241 3388 	movw	r3, #5000	; 0x1388
 8007df2:	9300      	str	r3, [sp, #0]
 8007df4:	f241 3388 	movw	r3, #5000	; 0x1388
 8007df8:	2243      	movs	r2, #67	; 0x43
 8007dfa:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8007dfe:	f242 7010 	movw	r0, #10000	; 0x2710
 8007e02:	f7fd fb35 	bl	8005470 <slalomF>
 8007e06:	e00b      	b.n	8007e20 <v_R135+0x278>
			slalomF(10000, SPEED_HIGH_HIGH, VVV_H_H_OFFSET_B, NO_WALL, NO_WALL);
 8007e08:	f241 3388 	movw	r3, #5000	; 0x1388
 8007e0c:	9300      	str	r3, [sp, #0]
 8007e0e:	f241 3388 	movw	r3, #5000	; 0x1388
 8007e12:	2232      	movs	r2, #50	; 0x32
 8007e14:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8007e18:	f242 7010 	movw	r0, #10000	; 0x2710
 8007e1c:	f7fd fb28 	bl	8005470 <slalomF>
		slalomR(-VVV_H_H_DEGACCEL, -VVV_H_H_OMEGA, -135, SPEED_HIGH_HIGH);
 8007e20:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007e24:	f06f 0286 	mvn.w	r2, #134	; 0x86
 8007e28:	4921      	ldr	r1, [pc, #132]	; (8007eb0 <v_R135+0x308>)
 8007e2a:	4822      	ldr	r0, [pc, #136]	; (8007eb4 <v_R135+0x30c>)
 8007e2c:	f7fd fb9c 	bl	8005568 <slalomR>
		turn_dir(DIR_TURN_R135_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 8007e30:	2103      	movs	r1, #3
 8007e32:	2003      	movs	r0, #3
 8007e34:	f006 fed2 	bl	800ebdc <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 8007e38:	4b16      	ldr	r3, [pc, #88]	; (8007e94 <v_R135+0x2ec>)
 8007e3a:	881b      	ldrh	r3, [r3, #0]
 8007e3c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8007e40:	b2db      	uxtb	r3, r3
 8007e42:	3301      	adds	r3, #1
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	f003 0301 	and.w	r3, r3, #1
 8007e4a:	bfb8      	it	lt
 8007e4c:	425b      	neglt	r3, r3
 8007e4e:	f003 0301 	and.w	r3, r3, #1
 8007e52:	b2d9      	uxtb	r1, r3
 8007e54:	4a0f      	ldr	r2, [pc, #60]	; (8007e94 <v_R135+0x2ec>)
 8007e56:	8813      	ldrh	r3, [r2, #0]
 8007e58:	f361 03c3 	bfi	r3, r1, #3, #1
 8007e5c:	8013      	strh	r3, [r2, #0]
		if(!MF2.FLAG.V){
 8007e5e:	4b0d      	ldr	r3, [pc, #52]	; (8007e94 <v_R135+0x2ec>)
 8007e60:	881b      	ldrh	r3, [r3, #0]
 8007e62:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8007e66:	b2db      	uxtb	r3, r3
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d107      	bne.n	8007e7c <v_R135+0x2d4>
			slalomB(10000, SPEED_HIGH_HIGH, VVV_H_H_OFFSET_F);
 8007e6c:	2243      	movs	r2, #67	; 0x43
 8007e6e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8007e72:	f242 7010 	movw	r0, #10000	; 0x2710
 8007e76:	f7fd fc9b 	bl	80057b0 <slalomB>
}
 8007e7a:	e006      	b.n	8007e8a <v_R135+0x2e2>
			slalomB(10000, SPEED_HIGH_HIGH, VVV_H_H_OFFSET_B);
 8007e7c:	2232      	movs	r2, #50	; 0x32
 8007e7e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8007e82:	f242 7010 	movw	r0, #10000	; 0x2710
 8007e86:	f7fd fc93 	bl	80057b0 <slalomB>
}
 8007e8a:	bf00      	nop
 8007e8c:	46bd      	mov	sp, r7
 8007e8e:	bd80      	pop	{r7, pc}
 8007e90:	20000456 	.word	0x20000456
 8007e94:	20000f64 	.word	0x20000f64
 8007e98:	fffffed4 	.word	0xfffffed4
 8007e9c:	fffff448 	.word	0xfffff448
 8007ea0:	fffffe0c 	.word	0xfffffe0c
 8007ea4:	ffffec78 	.word	0xffffec78
 8007ea8:	fffffce0 	.word	0xfffffce0
 8007eac:	ffffe0c0 	.word	0xffffe0c0
 8007eb0:	fffffc18 	.word	0xfffffc18
 8007eb4:	ffffd8f0 	.word	0xffffd8f0

08007eb8 <v_L135>:
//v_L135
// 区画中心から左に135度回転する　ゴール用
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void v_L135(void){
 8007eb8:	b580      	push	{r7, lr}
 8007eba:	b082      	sub	sp, #8
 8007ebc:	af02      	add	r7, sp, #8
	full_led_write(PURPLE);
 8007ebe:	2005      	movs	r0, #5
 8007ec0:	f008 fd16 	bl	80108f0 <full_led_write>
	if(run_mode == LOW){
 8007ec4:	4bb8      	ldr	r3, [pc, #736]	; (80081a8 <v_L135+0x2f0>)
 8007ec6:	781b      	ldrb	r3, [r3, #0]
 8007ec8:	b2db      	uxtb	r3, r3
 8007eca:	2b01      	cmp	r3, #1
 8007ecc:	d156      	bne.n	8007f7c <v_L135+0xc4>
		if(!MF2.FLAG.V){
 8007ece:	4bb7      	ldr	r3, [pc, #732]	; (80081ac <v_L135+0x2f4>)
 8007ed0:	881b      	ldrh	r3, [r3, #0]
 8007ed2:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8007ed6:	b2db      	uxtb	r3, r3
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d10c      	bne.n	8007ef6 <v_L135+0x3e>
			slalomF(10000, SPEED_LOW, VVV_OFFSET_F, NO_WALL, NO_WALL);
 8007edc:	f241 3388 	movw	r3, #5000	; 0x1388
 8007ee0:	9300      	str	r3, [sp, #0]
 8007ee2:	f241 3388 	movw	r3, #5000	; 0x1388
 8007ee6:	2244      	movs	r2, #68	; 0x44
 8007ee8:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8007eec:	f242 7010 	movw	r0, #10000	; 0x2710
 8007ef0:	f7fd fabe 	bl	8005470 <slalomF>
 8007ef4:	e00b      	b.n	8007f0e <v_L135+0x56>
		}else{
			slalomF(10000, SPEED_LOW, VVV_OFFSET_B, NO_WALL, NO_WALL);
 8007ef6:	f241 3388 	movw	r3, #5000	; 0x1388
 8007efa:	9300      	str	r3, [sp, #0]
 8007efc:	f241 3388 	movw	r3, #5000	; 0x1388
 8007f00:	223a      	movs	r2, #58	; 0x3a
 8007f02:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8007f06:	f242 7010 	movw	r0, #10000	; 0x2710
 8007f0a:	f7fd fab1 	bl	8005470 <slalomF>
		}
		slalomR(VVV_DEGACCEL, VVV_OMEGA, 135, SPEED_LOW);
 8007f0e:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8007f12:	2287      	movs	r2, #135	; 0x87
 8007f14:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8007f18:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8007f1c:	f7fd fb24 	bl	8005568 <slalomR>

		turn_dir(DIR_TURN_L135_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 8007f20:	2103      	movs	r1, #3
 8007f22:	20fd      	movs	r0, #253	; 0xfd
 8007f24:	f006 fe5a 	bl	800ebdc <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 8007f28:	4ba0      	ldr	r3, [pc, #640]	; (80081ac <v_L135+0x2f4>)
 8007f2a:	881b      	ldrh	r3, [r3, #0]
 8007f2c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8007f30:	b2db      	uxtb	r3, r3
 8007f32:	3301      	adds	r3, #1
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	f003 0301 	and.w	r3, r3, #1
 8007f3a:	bfb8      	it	lt
 8007f3c:	425b      	neglt	r3, r3
 8007f3e:	f003 0301 	and.w	r3, r3, #1
 8007f42:	b2d9      	uxtb	r1, r3
 8007f44:	4a99      	ldr	r2, [pc, #612]	; (80081ac <v_L135+0x2f4>)
 8007f46:	8813      	ldrh	r3, [r2, #0]
 8007f48:	f361 03c3 	bfi	r3, r1, #3, #1
 8007f4c:	8013      	strh	r3, [r2, #0]

		if(!MF2.FLAG.V){
 8007f4e:	4b97      	ldr	r3, [pc, #604]	; (80081ac <v_L135+0x2f4>)
 8007f50:	881b      	ldrh	r3, [r3, #0]
 8007f52:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8007f56:	b2db      	uxtb	r3, r3
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d107      	bne.n	8007f6c <v_L135+0xb4>
			slalomB(10000, SPEED_LOW, VVV_OFFSET_F);
 8007f5c:	2244      	movs	r2, #68	; 0x44
 8007f5e:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8007f62:	f242 7010 	movw	r0, #10000	; 0x2710
 8007f66:	f7fd fc23 	bl	80057b0 <slalomB>
			slalomB(10000, SPEED_HIGH_HIGH, VVV_H_H_OFFSET_F);
		}else{
			slalomB(10000, SPEED_HIGH_HIGH, VVV_H_H_OFFSET_B);
		}
	}
}
 8007f6a:	e11a      	b.n	80081a2 <v_L135+0x2ea>
			slalomB(10000, SPEED_LOW, VVV_OFFSET_B);
 8007f6c:	223a      	movs	r2, #58	; 0x3a
 8007f6e:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8007f72:	f242 7010 	movw	r0, #10000	; 0x2710
 8007f76:	f7fd fc1b 	bl	80057b0 <slalomB>
}
 8007f7a:	e112      	b.n	80081a2 <v_L135+0x2ea>
	}else if(run_mode == MIDDLE){
 8007f7c:	4b8a      	ldr	r3, [pc, #552]	; (80081a8 <v_L135+0x2f0>)
 8007f7e:	781b      	ldrb	r3, [r3, #0]
 8007f80:	b2db      	uxtb	r3, r3
 8007f82:	2b02      	cmp	r3, #2
 8007f84:	d156      	bne.n	8008034 <v_L135+0x17c>
		if(!MF2.FLAG.V){
 8007f86:	4b89      	ldr	r3, [pc, #548]	; (80081ac <v_L135+0x2f4>)
 8007f88:	881b      	ldrh	r3, [r3, #0]
 8007f8a:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8007f8e:	b2db      	uxtb	r3, r3
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d10c      	bne.n	8007fae <v_L135+0xf6>
			slalomF(10000, SPEED_MIDDLE, VVV_M_OFFSET_F, NO_WALL, NO_WALL);
 8007f94:	f241 3388 	movw	r3, #5000	; 0x1388
 8007f98:	9300      	str	r3, [sp, #0]
 8007f9a:	f241 3388 	movw	r3, #5000	; 0x1388
 8007f9e:	2246      	movs	r2, #70	; 0x46
 8007fa0:	f44f 7116 	mov.w	r1, #600	; 0x258
 8007fa4:	f242 7010 	movw	r0, #10000	; 0x2710
 8007fa8:	f7fd fa62 	bl	8005470 <slalomF>
 8007fac:	e00b      	b.n	8007fc6 <v_L135+0x10e>
			slalomF(10000, SPEED_MIDDLE, VVV_M_OFFSET_B-25, NO_WALL, NO_WALL);
 8007fae:	f241 3388 	movw	r3, #5000	; 0x1388
 8007fb2:	9300      	str	r3, [sp, #0]
 8007fb4:	f241 3388 	movw	r3, #5000	; 0x1388
 8007fb8:	2237      	movs	r2, #55	; 0x37
 8007fba:	f44f 7116 	mov.w	r1, #600	; 0x258
 8007fbe:	f242 7010 	movw	r0, #10000	; 0x2710
 8007fc2:	f7fd fa55 	bl	8005470 <slalomF>
		slalomR(VVV_M_DEGACCEL, VVV_M_OMEGA, 135, SPEED_MIDDLE);
 8007fc6:	f44f 7316 	mov.w	r3, #600	; 0x258
 8007fca:	2287      	movs	r2, #135	; 0x87
 8007fcc:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8007fd0:	f241 3088 	movw	r0, #5000	; 0x1388
 8007fd4:	f7fd fac8 	bl	8005568 <slalomR>
		turn_dir(DIR_TURN_L135_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 8007fd8:	2103      	movs	r1, #3
 8007fda:	20fd      	movs	r0, #253	; 0xfd
 8007fdc:	f006 fdfe 	bl	800ebdc <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 8007fe0:	4b72      	ldr	r3, [pc, #456]	; (80081ac <v_L135+0x2f4>)
 8007fe2:	881b      	ldrh	r3, [r3, #0]
 8007fe4:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8007fe8:	b2db      	uxtb	r3, r3
 8007fea:	3301      	adds	r3, #1
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	f003 0301 	and.w	r3, r3, #1
 8007ff2:	bfb8      	it	lt
 8007ff4:	425b      	neglt	r3, r3
 8007ff6:	f003 0301 	and.w	r3, r3, #1
 8007ffa:	b2d9      	uxtb	r1, r3
 8007ffc:	4a6b      	ldr	r2, [pc, #428]	; (80081ac <v_L135+0x2f4>)
 8007ffe:	8813      	ldrh	r3, [r2, #0]
 8008000:	f361 03c3 	bfi	r3, r1, #3, #1
 8008004:	8013      	strh	r3, [r2, #0]
		if(!MF2.FLAG.V){
 8008006:	4b69      	ldr	r3, [pc, #420]	; (80081ac <v_L135+0x2f4>)
 8008008:	881b      	ldrh	r3, [r3, #0]
 800800a:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800800e:	b2db      	uxtb	r3, r3
 8008010:	2b00      	cmp	r3, #0
 8008012:	d107      	bne.n	8008024 <v_L135+0x16c>
			slalomB(10000, SPEED_MIDDLE, VVV_M_OFFSET_F+25);
 8008014:	225f      	movs	r2, #95	; 0x5f
 8008016:	f44f 7116 	mov.w	r1, #600	; 0x258
 800801a:	f242 7010 	movw	r0, #10000	; 0x2710
 800801e:	f7fd fbc7 	bl	80057b0 <slalomB>
}
 8008022:	e0be      	b.n	80081a2 <v_L135+0x2ea>
			slalomB(10000, SPEED_MIDDLE, VVV_M_OFFSET_B);
 8008024:	2250      	movs	r2, #80	; 0x50
 8008026:	f44f 7116 	mov.w	r1, #600	; 0x258
 800802a:	f242 7010 	movw	r0, #10000	; 0x2710
 800802e:	f7fd fbbf 	bl	80057b0 <slalomB>
}
 8008032:	e0b6      	b.n	80081a2 <v_L135+0x2ea>
	}else if(run_mode == HIGH){
 8008034:	4b5c      	ldr	r3, [pc, #368]	; (80081a8 <v_L135+0x2f0>)
 8008036:	781b      	ldrb	r3, [r3, #0]
 8008038:	b2db      	uxtb	r3, r3
 800803a:	2b03      	cmp	r3, #3
 800803c:	d156      	bne.n	80080ec <v_L135+0x234>
		if(!MF2.FLAG.V){
 800803e:	4b5b      	ldr	r3, [pc, #364]	; (80081ac <v_L135+0x2f4>)
 8008040:	881b      	ldrh	r3, [r3, #0]
 8008042:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8008046:	b2db      	uxtb	r3, r3
 8008048:	2b00      	cmp	r3, #0
 800804a:	d10c      	bne.n	8008066 <v_L135+0x1ae>
			slalomF(10000, SPEED_HIGH, VVV_H_OFFSET_F, NO_WALL, NO_WALL);
 800804c:	f241 3388 	movw	r3, #5000	; 0x1388
 8008050:	9300      	str	r3, [sp, #0]
 8008052:	f241 3388 	movw	r3, #5000	; 0x1388
 8008056:	2255      	movs	r2, #85	; 0x55
 8008058:	f44f 7148 	mov.w	r1, #800	; 0x320
 800805c:	f242 7010 	movw	r0, #10000	; 0x2710
 8008060:	f7fd fa06 	bl	8005470 <slalomF>
 8008064:	e00b      	b.n	800807e <v_L135+0x1c6>
			slalomF(10000, SPEED_HIGH, VVV_H_OFFSET_B-30, NO_WALL, NO_WALL);
 8008066:	f241 3388 	movw	r3, #5000	; 0x1388
 800806a:	9300      	str	r3, [sp, #0]
 800806c:	f241 3388 	movw	r3, #5000	; 0x1388
 8008070:	224b      	movs	r2, #75	; 0x4b
 8008072:	f44f 7148 	mov.w	r1, #800	; 0x320
 8008076:	f242 7010 	movw	r0, #10000	; 0x2710
 800807a:	f7fd f9f9 	bl	8005470 <slalomF>
		slalomR(VVV_H_DEGACCEL, VVV_H_OMEGA, 135, SPEED_HIGH);
 800807e:	f44f 7348 	mov.w	r3, #800	; 0x320
 8008082:	2287      	movs	r2, #135	; 0x87
 8008084:	f44f 7148 	mov.w	r1, #800	; 0x320
 8008088:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 800808c:	f7fd fa6c 	bl	8005568 <slalomR>
		turn_dir(DIR_TURN_L135_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 8008090:	2103      	movs	r1, #3
 8008092:	20fd      	movs	r0, #253	; 0xfd
 8008094:	f006 fda2 	bl	800ebdc <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 8008098:	4b44      	ldr	r3, [pc, #272]	; (80081ac <v_L135+0x2f4>)
 800809a:	881b      	ldrh	r3, [r3, #0]
 800809c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80080a0:	b2db      	uxtb	r3, r3
 80080a2:	3301      	adds	r3, #1
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	f003 0301 	and.w	r3, r3, #1
 80080aa:	bfb8      	it	lt
 80080ac:	425b      	neglt	r3, r3
 80080ae:	f003 0301 	and.w	r3, r3, #1
 80080b2:	b2d9      	uxtb	r1, r3
 80080b4:	4a3d      	ldr	r2, [pc, #244]	; (80081ac <v_L135+0x2f4>)
 80080b6:	8813      	ldrh	r3, [r2, #0]
 80080b8:	f361 03c3 	bfi	r3, r1, #3, #1
 80080bc:	8013      	strh	r3, [r2, #0]
		if(!MF2.FLAG.V){
 80080be:	4b3b      	ldr	r3, [pc, #236]	; (80081ac <v_L135+0x2f4>)
 80080c0:	881b      	ldrh	r3, [r3, #0]
 80080c2:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80080c6:	b2db      	uxtb	r3, r3
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d107      	bne.n	80080dc <v_L135+0x224>
			slalomB(10000, SPEED_HIGH, VVV_H_OFFSET_F+45);
 80080cc:	2282      	movs	r2, #130	; 0x82
 80080ce:	f44f 7148 	mov.w	r1, #800	; 0x320
 80080d2:	f242 7010 	movw	r0, #10000	; 0x2710
 80080d6:	f7fd fb6b 	bl	80057b0 <slalomB>
}
 80080da:	e062      	b.n	80081a2 <v_L135+0x2ea>
			slalomB(10000, SPEED_HIGH, VVV_H_OFFSET_B);
 80080dc:	2269      	movs	r2, #105	; 0x69
 80080de:	f44f 7148 	mov.w	r1, #800	; 0x320
 80080e2:	f242 7010 	movw	r0, #10000	; 0x2710
 80080e6:	f7fd fb63 	bl	80057b0 <slalomB>
}
 80080ea:	e05a      	b.n	80081a2 <v_L135+0x2ea>
	}else if(run_mode == HIGH_HIGH){
 80080ec:	4b2e      	ldr	r3, [pc, #184]	; (80081a8 <v_L135+0x2f0>)
 80080ee:	781b      	ldrb	r3, [r3, #0]
 80080f0:	b2db      	uxtb	r3, r3
 80080f2:	2b04      	cmp	r3, #4
 80080f4:	d155      	bne.n	80081a2 <v_L135+0x2ea>
		if(!MF2.FLAG.V){
 80080f6:	4b2d      	ldr	r3, [pc, #180]	; (80081ac <v_L135+0x2f4>)
 80080f8:	881b      	ldrh	r3, [r3, #0]
 80080fa:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80080fe:	b2db      	uxtb	r3, r3
 8008100:	2b00      	cmp	r3, #0
 8008102:	d10c      	bne.n	800811e <v_L135+0x266>
			slalomF(10000, SPEED_HIGH_HIGH, VVV_H_H_OFFSET_F, NO_WALL, NO_WALL);
 8008104:	f241 3388 	movw	r3, #5000	; 0x1388
 8008108:	9300      	str	r3, [sp, #0]
 800810a:	f241 3388 	movw	r3, #5000	; 0x1388
 800810e:	2243      	movs	r2, #67	; 0x43
 8008110:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8008114:	f242 7010 	movw	r0, #10000	; 0x2710
 8008118:	f7fd f9aa 	bl	8005470 <slalomF>
 800811c:	e00b      	b.n	8008136 <v_L135+0x27e>
			slalomF(10000, SPEED_HIGH_HIGH, VVV_H_H_OFFSET_B, NO_WALL, NO_WALL);
 800811e:	f241 3388 	movw	r3, #5000	; 0x1388
 8008122:	9300      	str	r3, [sp, #0]
 8008124:	f241 3388 	movw	r3, #5000	; 0x1388
 8008128:	2232      	movs	r2, #50	; 0x32
 800812a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800812e:	f242 7010 	movw	r0, #10000	; 0x2710
 8008132:	f7fd f99d 	bl	8005470 <slalomF>
		slalomR(VVV_H_H_DEGACCEL, VVV_H_H_OMEGA, 135, SPEED_HIGH_HIGH);
 8008136:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800813a:	2287      	movs	r2, #135	; 0x87
 800813c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8008140:	f242 7010 	movw	r0, #10000	; 0x2710
 8008144:	f7fd fa10 	bl	8005568 <slalomR>
		turn_dir(DIR_TURN_L135_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 8008148:	2103      	movs	r1, #3
 800814a:	20fd      	movs	r0, #253	; 0xfd
 800814c:	f006 fd46 	bl	800ebdc <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 8008150:	4b16      	ldr	r3, [pc, #88]	; (80081ac <v_L135+0x2f4>)
 8008152:	881b      	ldrh	r3, [r3, #0]
 8008154:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8008158:	b2db      	uxtb	r3, r3
 800815a:	3301      	adds	r3, #1
 800815c:	2b00      	cmp	r3, #0
 800815e:	f003 0301 	and.w	r3, r3, #1
 8008162:	bfb8      	it	lt
 8008164:	425b      	neglt	r3, r3
 8008166:	f003 0301 	and.w	r3, r3, #1
 800816a:	b2d9      	uxtb	r1, r3
 800816c:	4a0f      	ldr	r2, [pc, #60]	; (80081ac <v_L135+0x2f4>)
 800816e:	8813      	ldrh	r3, [r2, #0]
 8008170:	f361 03c3 	bfi	r3, r1, #3, #1
 8008174:	8013      	strh	r3, [r2, #0]
		if(!MF2.FLAG.V){
 8008176:	4b0d      	ldr	r3, [pc, #52]	; (80081ac <v_L135+0x2f4>)
 8008178:	881b      	ldrh	r3, [r3, #0]
 800817a:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800817e:	b2db      	uxtb	r3, r3
 8008180:	2b00      	cmp	r3, #0
 8008182:	d107      	bne.n	8008194 <v_L135+0x2dc>
			slalomB(10000, SPEED_HIGH_HIGH, VVV_H_H_OFFSET_F);
 8008184:	2243      	movs	r2, #67	; 0x43
 8008186:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800818a:	f242 7010 	movw	r0, #10000	; 0x2710
 800818e:	f7fd fb0f 	bl	80057b0 <slalomB>
}
 8008192:	e006      	b.n	80081a2 <v_L135+0x2ea>
			slalomB(10000, SPEED_HIGH_HIGH, VVV_H_H_OFFSET_B);
 8008194:	2232      	movs	r2, #50	; 0x32
 8008196:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800819a:	f242 7010 	movw	r0, #10000	; 0x2710
 800819e:	f7fd fb07 	bl	80057b0 <slalomB>
}
 80081a2:	bf00      	nop
 80081a4:	46bd      	mov	sp, r7
 80081a6:	bd80      	pop	{r7, pc}
 80081a8:	20000456 	.word	0x20000456
 80081ac:	20000f64 	.word	0x20000f64

080081b0 <v_R135D>:
//v_R135D
// 区画中心から右に135度回転する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void v_R135D(void){
 80081b0:	b580      	push	{r7, lr}
 80081b2:	b082      	sub	sp, #8
 80081b4:	af02      	add	r7, sp, #8
	full_led_write(YELLOW);
 80081b6:	2006      	movs	r0, #6
 80081b8:	f008 fb9a 	bl	80108f0 <full_led_write>
	if(run_mode == LOW){
 80081bc:	4b5f      	ldr	r3, [pc, #380]	; (800833c <v_R135D+0x18c>)
 80081be:	781b      	ldrb	r3, [r3, #0]
 80081c0:	b2db      	uxtb	r3, r3
 80081c2:	2b01      	cmp	r3, #1
 80081c4:	d139      	bne.n	800823a <v_R135D+0x8a>
		slalomF(10000, SPEED_LOW, VVV_OFFSET_B, NO_WALL, NO_WALL);
 80081c6:	f241 3388 	movw	r3, #5000	; 0x1388
 80081ca:	9300      	str	r3, [sp, #0]
 80081cc:	f241 3388 	movw	r3, #5000	; 0x1388
 80081d0:	223a      	movs	r2, #58	; 0x3a
 80081d2:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80081d6:	f242 7010 	movw	r0, #10000	; 0x2710
 80081da:	f7fd f949 	bl	8005470 <slalomF>
		slalomR(-VVV_DEGACCEL, -VVV_OMEGA, -135, SPEED_LOW);
 80081de:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80081e2:	f06f 0286 	mvn.w	r2, #134	; 0x86
 80081e6:	4956      	ldr	r1, [pc, #344]	; (8008340 <v_R135D+0x190>)
 80081e8:	4856      	ldr	r0, [pc, #344]	; (8008344 <v_R135D+0x194>)
 80081ea:	f7fd f9bd 	bl	8005568 <slalomR>

		turn_dir(DIR_TURN_R135_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 80081ee:	2103      	movs	r1, #3
 80081f0:	2003      	movs	r0, #3
 80081f2:	f006 fcf3 	bl	800ebdc <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 80081f6:	4b54      	ldr	r3, [pc, #336]	; (8008348 <v_R135D+0x198>)
 80081f8:	881b      	ldrh	r3, [r3, #0]
 80081fa:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80081fe:	b2db      	uxtb	r3, r3
 8008200:	3301      	adds	r3, #1
 8008202:	2b00      	cmp	r3, #0
 8008204:	f003 0301 	and.w	r3, r3, #1
 8008208:	bfb8      	it	lt
 800820a:	425b      	neglt	r3, r3
 800820c:	f003 0301 	and.w	r3, r3, #1
 8008210:	b2d9      	uxtb	r1, r3
 8008212:	4a4d      	ldr	r2, [pc, #308]	; (8008348 <v_R135D+0x198>)
 8008214:	8813      	ldrh	r3, [r2, #0]
 8008216:	f361 03c3 	bfi	r3, r1, #3, #1
 800821a:	8013      	strh	r3, [r2, #0]

		slalomB(10000, SPEED_LOW, VVV_OFFSET_F-30);
 800821c:	2226      	movs	r2, #38	; 0x26
 800821e:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8008222:	f242 7010 	movw	r0, #10000	; 0x2710
 8008226:	f7fd fac3 	bl	80057b0 <slalomB>
		driveD(-30000, SPEED_MIN, SPEED_LOW, 30);
 800822a:	231e      	movs	r3, #30
 800822c:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8008230:	2114      	movs	r1, #20
 8008232:	4846      	ldr	r0, [pc, #280]	; (800834c <v_R135D+0x19c>)
 8008234:	f7fc ff44 	bl	80050c0 <driveD>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;

		slalomB(10000, SPEED_HIGH, VVV_H_OFFSET_F+5);
		driveD(-30000, SPEED_MIN, SPEED_HIGH, 30);
	}
}
 8008238:	e07c      	b.n	8008334 <v_R135D+0x184>
	}else if(run_mode == MIDDLE){
 800823a:	4b40      	ldr	r3, [pc, #256]	; (800833c <v_R135D+0x18c>)
 800823c:	781b      	ldrb	r3, [r3, #0]
 800823e:	b2db      	uxtb	r3, r3
 8008240:	2b02      	cmp	r3, #2
 8008242:	d139      	bne.n	80082b8 <v_R135D+0x108>
		slalomF(10000, SPEED_MIDDLE, VVV_M_OFFSET_B-25, NO_WALL, NO_WALL);
 8008244:	f241 3388 	movw	r3, #5000	; 0x1388
 8008248:	9300      	str	r3, [sp, #0]
 800824a:	f241 3388 	movw	r3, #5000	; 0x1388
 800824e:	2237      	movs	r2, #55	; 0x37
 8008250:	f44f 7116 	mov.w	r1, #600	; 0x258
 8008254:	f242 7010 	movw	r0, #10000	; 0x2710
 8008258:	f7fd f90a 	bl	8005470 <slalomF>
		slalomR(-VVV_M_DEGACCEL, -VVV_M_OMEGA, -135, SPEED_MIDDLE);
 800825c:	f44f 7316 	mov.w	r3, #600	; 0x258
 8008260:	f06f 0286 	mvn.w	r2, #134	; 0x86
 8008264:	493a      	ldr	r1, [pc, #232]	; (8008350 <v_R135D+0x1a0>)
 8008266:	483b      	ldr	r0, [pc, #236]	; (8008354 <v_R135D+0x1a4>)
 8008268:	f7fd f97e 	bl	8005568 <slalomR>
		turn_dir(DIR_TURN_R135_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 800826c:	2103      	movs	r1, #3
 800826e:	2003      	movs	r0, #3
 8008270:	f006 fcb4 	bl	800ebdc <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 8008274:	4b34      	ldr	r3, [pc, #208]	; (8008348 <v_R135D+0x198>)
 8008276:	881b      	ldrh	r3, [r3, #0]
 8008278:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800827c:	b2db      	uxtb	r3, r3
 800827e:	3301      	adds	r3, #1
 8008280:	2b00      	cmp	r3, #0
 8008282:	f003 0301 	and.w	r3, r3, #1
 8008286:	bfb8      	it	lt
 8008288:	425b      	neglt	r3, r3
 800828a:	f003 0301 	and.w	r3, r3, #1
 800828e:	b2d9      	uxtb	r1, r3
 8008290:	4a2d      	ldr	r2, [pc, #180]	; (8008348 <v_R135D+0x198>)
 8008292:	8813      	ldrh	r3, [r2, #0]
 8008294:	f361 03c3 	bfi	r3, r1, #3, #1
 8008298:	8013      	strh	r3, [r2, #0]
		slalomB(10000, SPEED_MIDDLE, VVV_M_OFFSET_F-15);
 800829a:	2237      	movs	r2, #55	; 0x37
 800829c:	f44f 7116 	mov.w	r1, #600	; 0x258
 80082a0:	f242 7010 	movw	r0, #10000	; 0x2710
 80082a4:	f7fd fa84 	bl	80057b0 <slalomB>
		driveD(-30000, SPEED_MIN, SPEED_MIDDLE, 30);
 80082a8:	231e      	movs	r3, #30
 80082aa:	f44f 7216 	mov.w	r2, #600	; 0x258
 80082ae:	2114      	movs	r1, #20
 80082b0:	4826      	ldr	r0, [pc, #152]	; (800834c <v_R135D+0x19c>)
 80082b2:	f7fc ff05 	bl	80050c0 <driveD>
}
 80082b6:	e03d      	b.n	8008334 <v_R135D+0x184>
	}else if(run_mode == HIGH){
 80082b8:	4b20      	ldr	r3, [pc, #128]	; (800833c <v_R135D+0x18c>)
 80082ba:	781b      	ldrb	r3, [r3, #0]
 80082bc:	b2db      	uxtb	r3, r3
 80082be:	2b03      	cmp	r3, #3
 80082c0:	d138      	bne.n	8008334 <v_R135D+0x184>
		slalomF(10000, SPEED_HIGH, VVV_H_OFFSET_B-30, NO_WALL, NO_WALL);
 80082c2:	f241 3388 	movw	r3, #5000	; 0x1388
 80082c6:	9300      	str	r3, [sp, #0]
 80082c8:	f241 3388 	movw	r3, #5000	; 0x1388
 80082cc:	224b      	movs	r2, #75	; 0x4b
 80082ce:	f44f 7148 	mov.w	r1, #800	; 0x320
 80082d2:	f242 7010 	movw	r0, #10000	; 0x2710
 80082d6:	f7fd f8cb 	bl	8005470 <slalomF>
		slalomR(-VVV_H_DEGACCEL, -VVV_H_OMEGA, -135, SPEED_HIGH);
 80082da:	f44f 7348 	mov.w	r3, #800	; 0x320
 80082de:	f06f 0286 	mvn.w	r2, #134	; 0x86
 80082e2:	491d      	ldr	r1, [pc, #116]	; (8008358 <v_R135D+0x1a8>)
 80082e4:	481d      	ldr	r0, [pc, #116]	; (800835c <v_R135D+0x1ac>)
 80082e6:	f7fd f93f 	bl	8005568 <slalomR>
		turn_dir(DIR_TURN_R135_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 80082ea:	2103      	movs	r1, #3
 80082ec:	2003      	movs	r0, #3
 80082ee:	f006 fc75 	bl	800ebdc <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 80082f2:	4b15      	ldr	r3, [pc, #84]	; (8008348 <v_R135D+0x198>)
 80082f4:	881b      	ldrh	r3, [r3, #0]
 80082f6:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80082fa:	b2db      	uxtb	r3, r3
 80082fc:	3301      	adds	r3, #1
 80082fe:	2b00      	cmp	r3, #0
 8008300:	f003 0301 	and.w	r3, r3, #1
 8008304:	bfb8      	it	lt
 8008306:	425b      	neglt	r3, r3
 8008308:	f003 0301 	and.w	r3, r3, #1
 800830c:	b2d9      	uxtb	r1, r3
 800830e:	4a0e      	ldr	r2, [pc, #56]	; (8008348 <v_R135D+0x198>)
 8008310:	8813      	ldrh	r3, [r2, #0]
 8008312:	f361 03c3 	bfi	r3, r1, #3, #1
 8008316:	8013      	strh	r3, [r2, #0]
		slalomB(10000, SPEED_HIGH, VVV_H_OFFSET_F+5);
 8008318:	225a      	movs	r2, #90	; 0x5a
 800831a:	f44f 7148 	mov.w	r1, #800	; 0x320
 800831e:	f242 7010 	movw	r0, #10000	; 0x2710
 8008322:	f7fd fa45 	bl	80057b0 <slalomB>
		driveD(-30000, SPEED_MIN, SPEED_HIGH, 30);
 8008326:	231e      	movs	r3, #30
 8008328:	f44f 7248 	mov.w	r2, #800	; 0x320
 800832c:	2114      	movs	r1, #20
 800832e:	4807      	ldr	r0, [pc, #28]	; (800834c <v_R135D+0x19c>)
 8008330:	f7fc fec6 	bl	80050c0 <driveD>
}
 8008334:	bf00      	nop
 8008336:	46bd      	mov	sp, r7
 8008338:	bd80      	pop	{r7, pc}
 800833a:	bf00      	nop
 800833c:	20000456 	.word	0x20000456
 8008340:	fffffed4 	.word	0xfffffed4
 8008344:	fffff448 	.word	0xfffff448
 8008348:	20000f64 	.word	0x20000f64
 800834c:	ffff8ad0 	.word	0xffff8ad0
 8008350:	fffffe0c 	.word	0xfffffe0c
 8008354:	ffffec78 	.word	0xffffec78
 8008358:	fffffce0 	.word	0xfffffce0
 800835c:	ffffe0c0 	.word	0xffffe0c0

08008360 <v_L135D>:
//v_L135D
// 区画中心から左に135度回転する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void v_L135D(void){
 8008360:	b580      	push	{r7, lr}
 8008362:	b082      	sub	sp, #8
 8008364:	af02      	add	r7, sp, #8
	full_led_write(PURPLE);
 8008366:	2005      	movs	r0, #5
 8008368:	f008 fac2 	bl	80108f0 <full_led_write>
	if(run_mode == LOW){
 800836c:	4b60      	ldr	r3, [pc, #384]	; (80084f0 <v_L135D+0x190>)
 800836e:	781b      	ldrb	r3, [r3, #0]
 8008370:	b2db      	uxtb	r3, r3
 8008372:	2b01      	cmp	r3, #1
 8008374:	d13a      	bne.n	80083ec <v_L135D+0x8c>
		slalomF(10000, SPEED_LOW, VVV_OFFSET_B, NO_WALL, NO_WALL);
 8008376:	f241 3388 	movw	r3, #5000	; 0x1388
 800837a:	9300      	str	r3, [sp, #0]
 800837c:	f241 3388 	movw	r3, #5000	; 0x1388
 8008380:	223a      	movs	r2, #58	; 0x3a
 8008382:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8008386:	f242 7010 	movw	r0, #10000	; 0x2710
 800838a:	f7fd f871 	bl	8005470 <slalomF>
		slalomR(VVV_DEGACCEL, VVV_OMEGA, 135, SPEED_LOW);
 800838e:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8008392:	2287      	movs	r2, #135	; 0x87
 8008394:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8008398:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800839c:	f7fd f8e4 	bl	8005568 <slalomR>

		turn_dir(DIR_TURN_L135_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 80083a0:	2103      	movs	r1, #3
 80083a2:	20fd      	movs	r0, #253	; 0xfd
 80083a4:	f006 fc1a 	bl	800ebdc <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 80083a8:	4b52      	ldr	r3, [pc, #328]	; (80084f4 <v_L135D+0x194>)
 80083aa:	881b      	ldrh	r3, [r3, #0]
 80083ac:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80083b0:	b2db      	uxtb	r3, r3
 80083b2:	3301      	adds	r3, #1
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	f003 0301 	and.w	r3, r3, #1
 80083ba:	bfb8      	it	lt
 80083bc:	425b      	neglt	r3, r3
 80083be:	f003 0301 	and.w	r3, r3, #1
 80083c2:	b2d9      	uxtb	r1, r3
 80083c4:	4a4b      	ldr	r2, [pc, #300]	; (80084f4 <v_L135D+0x194>)
 80083c6:	8813      	ldrh	r3, [r2, #0]
 80083c8:	f361 03c3 	bfi	r3, r1, #3, #1
 80083cc:	8013      	strh	r3, [r2, #0]

		slalomB(10000, SPEED_LOW, VVV_OFFSET_F-30);
 80083ce:	2226      	movs	r2, #38	; 0x26
 80083d0:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80083d4:	f242 7010 	movw	r0, #10000	; 0x2710
 80083d8:	f7fd f9ea 	bl	80057b0 <slalomB>
		driveD(-30000, SPEED_MIN, SPEED_LOW, 30);
 80083dc:	231e      	movs	r3, #30
 80083de:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80083e2:	2114      	movs	r1, #20
 80083e4:	4844      	ldr	r0, [pc, #272]	; (80084f8 <v_L135D+0x198>)
 80083e6:	f7fc fe6b 	bl	80050c0 <driveD>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;

		slalomB(10000, SPEED_HIGH, VVV_H_OFFSET_F+5);
		driveD(-30000, SPEED_MIN, SPEED_HIGH, 30);
	}
}
 80083ea:	e07e      	b.n	80084ea <v_L135D+0x18a>
	}else if(run_mode == MIDDLE){
 80083ec:	4b40      	ldr	r3, [pc, #256]	; (80084f0 <v_L135D+0x190>)
 80083ee:	781b      	ldrb	r3, [r3, #0]
 80083f0:	b2db      	uxtb	r3, r3
 80083f2:	2b02      	cmp	r3, #2
 80083f4:	d13a      	bne.n	800846c <v_L135D+0x10c>
		slalomF(10000, SPEED_MIDDLE, VVV_M_OFFSET_B-25, NO_WALL, NO_WALL);
 80083f6:	f241 3388 	movw	r3, #5000	; 0x1388
 80083fa:	9300      	str	r3, [sp, #0]
 80083fc:	f241 3388 	movw	r3, #5000	; 0x1388
 8008400:	2237      	movs	r2, #55	; 0x37
 8008402:	f44f 7116 	mov.w	r1, #600	; 0x258
 8008406:	f242 7010 	movw	r0, #10000	; 0x2710
 800840a:	f7fd f831 	bl	8005470 <slalomF>
		slalomR(VVV_M_DEGACCEL, VVV_M_OMEGA, 135, SPEED_MIDDLE);
 800840e:	f44f 7316 	mov.w	r3, #600	; 0x258
 8008412:	2287      	movs	r2, #135	; 0x87
 8008414:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8008418:	f241 3088 	movw	r0, #5000	; 0x1388
 800841c:	f7fd f8a4 	bl	8005568 <slalomR>
		turn_dir(DIR_TURN_L135_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 8008420:	2103      	movs	r1, #3
 8008422:	20fd      	movs	r0, #253	; 0xfd
 8008424:	f006 fbda 	bl	800ebdc <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 8008428:	4b32      	ldr	r3, [pc, #200]	; (80084f4 <v_L135D+0x194>)
 800842a:	881b      	ldrh	r3, [r3, #0]
 800842c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8008430:	b2db      	uxtb	r3, r3
 8008432:	3301      	adds	r3, #1
 8008434:	2b00      	cmp	r3, #0
 8008436:	f003 0301 	and.w	r3, r3, #1
 800843a:	bfb8      	it	lt
 800843c:	425b      	neglt	r3, r3
 800843e:	f003 0301 	and.w	r3, r3, #1
 8008442:	b2d9      	uxtb	r1, r3
 8008444:	4a2b      	ldr	r2, [pc, #172]	; (80084f4 <v_L135D+0x194>)
 8008446:	8813      	ldrh	r3, [r2, #0]
 8008448:	f361 03c3 	bfi	r3, r1, #3, #1
 800844c:	8013      	strh	r3, [r2, #0]
		slalomB(10000, SPEED_MIDDLE, VVV_M_OFFSET_F-15);
 800844e:	2237      	movs	r2, #55	; 0x37
 8008450:	f44f 7116 	mov.w	r1, #600	; 0x258
 8008454:	f242 7010 	movw	r0, #10000	; 0x2710
 8008458:	f7fd f9aa 	bl	80057b0 <slalomB>
		driveD(-30000, SPEED_MIN, SPEED_MIDDLE, 30);
 800845c:	231e      	movs	r3, #30
 800845e:	f44f 7216 	mov.w	r2, #600	; 0x258
 8008462:	2114      	movs	r1, #20
 8008464:	4824      	ldr	r0, [pc, #144]	; (80084f8 <v_L135D+0x198>)
 8008466:	f7fc fe2b 	bl	80050c0 <driveD>
}
 800846a:	e03e      	b.n	80084ea <v_L135D+0x18a>
	}else if(run_mode == HIGH){
 800846c:	4b20      	ldr	r3, [pc, #128]	; (80084f0 <v_L135D+0x190>)
 800846e:	781b      	ldrb	r3, [r3, #0]
 8008470:	b2db      	uxtb	r3, r3
 8008472:	2b03      	cmp	r3, #3
 8008474:	d139      	bne.n	80084ea <v_L135D+0x18a>
		slalomF(10000, SPEED_HIGH, VVV_H_OFFSET_B-30, NO_WALL, NO_WALL);
 8008476:	f241 3388 	movw	r3, #5000	; 0x1388
 800847a:	9300      	str	r3, [sp, #0]
 800847c:	f241 3388 	movw	r3, #5000	; 0x1388
 8008480:	224b      	movs	r2, #75	; 0x4b
 8008482:	f44f 7148 	mov.w	r1, #800	; 0x320
 8008486:	f242 7010 	movw	r0, #10000	; 0x2710
 800848a:	f7fc fff1 	bl	8005470 <slalomF>
		slalomR(VVV_H_DEGACCEL, VVV_H_OMEGA, 135, SPEED_HIGH);
 800848e:	f44f 7348 	mov.w	r3, #800	; 0x320
 8008492:	2287      	movs	r2, #135	; 0x87
 8008494:	f44f 7148 	mov.w	r1, #800	; 0x320
 8008498:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 800849c:	f7fd f864 	bl	8005568 <slalomR>
		turn_dir(DIR_TURN_L135_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 80084a0:	2103      	movs	r1, #3
 80084a2:	20fd      	movs	r0, #253	; 0xfd
 80084a4:	f006 fb9a 	bl	800ebdc <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 80084a8:	4b12      	ldr	r3, [pc, #72]	; (80084f4 <v_L135D+0x194>)
 80084aa:	881b      	ldrh	r3, [r3, #0]
 80084ac:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80084b0:	b2db      	uxtb	r3, r3
 80084b2:	3301      	adds	r3, #1
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	f003 0301 	and.w	r3, r3, #1
 80084ba:	bfb8      	it	lt
 80084bc:	425b      	neglt	r3, r3
 80084be:	f003 0301 	and.w	r3, r3, #1
 80084c2:	b2d9      	uxtb	r1, r3
 80084c4:	4a0b      	ldr	r2, [pc, #44]	; (80084f4 <v_L135D+0x194>)
 80084c6:	8813      	ldrh	r3, [r2, #0]
 80084c8:	f361 03c3 	bfi	r3, r1, #3, #1
 80084cc:	8013      	strh	r3, [r2, #0]
		slalomB(10000, SPEED_HIGH, VVV_H_OFFSET_F+5);
 80084ce:	225a      	movs	r2, #90	; 0x5a
 80084d0:	f44f 7148 	mov.w	r1, #800	; 0x320
 80084d4:	f242 7010 	movw	r0, #10000	; 0x2710
 80084d8:	f7fd f96a 	bl	80057b0 <slalomB>
		driveD(-30000, SPEED_MIN, SPEED_HIGH, 30);
 80084dc:	231e      	movs	r3, #30
 80084de:	f44f 7248 	mov.w	r2, #800	; 0x320
 80084e2:	2114      	movs	r1, #20
 80084e4:	4804      	ldr	r0, [pc, #16]	; (80084f8 <v_L135D+0x198>)
 80084e6:	f7fc fdeb 	bl	80050c0 <driveD>
}
 80084ea:	bf00      	nop
 80084ec:	46bd      	mov	sp, r7
 80084ee:	bd80      	pop	{r7, pc}
 80084f0:	20000456 	.word	0x20000456
 80084f4:	20000f64 	.word	0x20000f64
 80084f8:	ffff8ad0 	.word	0xffff8ad0

080084fc <test_select>:
//test_select
// 走行系テスト選択
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void test_select(void){
 80084fc:	b580      	push	{r7, lr}
 80084fe:	b082      	sub	sp, #8
 8008500:	af00      	add	r7, sp, #0
	int mode = 0;
 8008502:	2300      	movs	r3, #0
 8008504:	607b      	str	r3, [r7, #4]
	printf("Test Select, Mode : %d\n", mode);
 8008506:	6879      	ldr	r1, [r7, #4]
 8008508:	483f      	ldr	r0, [pc, #252]	; (8008608 <test_select+0x10c>)
 800850a:	f008 ff85 	bl	8011418 <iprintf>

	while(1){
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	b2db      	uxtb	r3, r3
 8008512:	f003 0301 	and.w	r3, r3, #1
 8008516:	b2d8      	uxtb	r0, r3
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	b2db      	uxtb	r3, r3
 800851c:	f003 0302 	and.w	r3, r3, #2
 8008520:	b2d9      	uxtb	r1, r3
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	b2db      	uxtb	r3, r3
 8008526:	f003 0304 	and.w	r3, r3, #4
 800852a:	b2db      	uxtb	r3, r3
 800852c:	461a      	mov	r2, r3
 800852e:	f008 f9a5 	bl	801087c <led_write>
		  if(dist_r >= 20){
 8008532:	4b36      	ldr	r3, [pc, #216]	; (800860c <test_select+0x110>)
 8008534:	edd3 7a00 	vldr	s15, [r3]
 8008538:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 800853c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008540:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008544:	db0f      	blt.n	8008566 <test_select+0x6a>
			  mode++;
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	3301      	adds	r3, #1
 800854a:	607b      	str	r3, [r7, #4]
			  dist_r = 0;
 800854c:	4b2f      	ldr	r3, [pc, #188]	; (800860c <test_select+0x110>)
 800854e:	f04f 0200 	mov.w	r2, #0
 8008552:	601a      	str	r2, [r3, #0]
			  if(mode > 7){
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	2b07      	cmp	r3, #7
 8008558:	dd01      	ble.n	800855e <test_select+0x62>
				  mode = 0;
 800855a:	2300      	movs	r3, #0
 800855c:	607b      	str	r3, [r7, #4]
			  }
			  printf("Mode : %d\n", mode);
 800855e:	6879      	ldr	r1, [r7, #4]
 8008560:	482b      	ldr	r0, [pc, #172]	; (8008610 <test_select+0x114>)
 8008562:	f008 ff59 	bl	8011418 <iprintf>
		  }
		  if(dist_r <= -20){
 8008566:	4b29      	ldr	r3, [pc, #164]	; (800860c <test_select+0x110>)
 8008568:	edd3 7a00 	vldr	s15, [r3]
 800856c:	eebb 7a04 	vmov.f32	s14, #180	; 0xc1a00000 -20.0
 8008570:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008574:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008578:	d80f      	bhi.n	800859a <test_select+0x9e>
			  mode--;
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	3b01      	subs	r3, #1
 800857e:	607b      	str	r3, [r7, #4]
			  dist_r = 0;
 8008580:	4b22      	ldr	r3, [pc, #136]	; (800860c <test_select+0x110>)
 8008582:	f04f 0200 	mov.w	r2, #0
 8008586:	601a      	str	r2, [r3, #0]
			  if(mode < 0){
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	2b00      	cmp	r3, #0
 800858c:	da01      	bge.n	8008592 <test_select+0x96>
				  mode = 7;
 800858e:	2307      	movs	r3, #7
 8008590:	607b      	str	r3, [r7, #4]
			  }
			  printf("Mode : %d\n", mode);
 8008592:	6879      	ldr	r1, [r7, #4]
 8008594:	481e      	ldr	r0, [pc, #120]	; (8008610 <test_select+0x114>)
 8008596:	f008 ff3f 	bl	8011418 <iprintf>
		  }
		  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET){
 800859a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800859e:	481d      	ldr	r0, [pc, #116]	; (8008614 <test_select+0x118>)
 80085a0:	f7f9 fe98 	bl	80022d4 <HAL_GPIO_ReadPin>
 80085a4:	4603      	mov	r3, r0
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d1b1      	bne.n	800850e <test_select+0x12>
			  HAL_Delay(50);
 80085aa:	2032      	movs	r0, #50	; 0x32
 80085ac:	f7f8 fd36 	bl	800101c <HAL_Delay>
			  while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET);
 80085b0:	bf00      	nop
 80085b2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80085b6:	4817      	ldr	r0, [pc, #92]	; (8008614 <test_select+0x118>)
 80085b8:	f7f9 fe8c 	bl	80022d4 <HAL_GPIO_ReadPin>
 80085bc:	4603      	mov	r3, r0
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d0f7      	beq.n	80085b2 <test_select+0xb6>
			  switch(mode){
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	3b01      	subs	r3, #1
 80085c6:	2b05      	cmp	r3, #5
 80085c8:	d8a1      	bhi.n	800850e <test_select+0x12>
 80085ca:	a201      	add	r2, pc, #4	; (adr r2, 80085d0 <test_select+0xd4>)
 80085cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085d0:	080085e9 	.word	0x080085e9
 80085d4:	080085ef 	.word	0x080085ef
 80085d8:	080085f5 	.word	0x080085f5
 80085dc:	080085fb 	.word	0x080085fb
 80085e0:	080085ff 	.word	0x080085ff
 80085e4:	08008603 	.word	0x08008603
				case 1:
					init_test();
 80085e8:	f000 f816 	bl	8008618 <init_test>
					break;
 80085ec:	e00b      	b.n	8008606 <test_select+0x10a>

				case 2:
					slalom_test();
 80085ee:	f000 f91d 	bl	800882c <slalom_test>
					break;
 80085f2:	e008      	b.n	8008606 <test_select+0x10a>

				case 3:
					v_test();
 80085f4:	f000 fae2 	bl	8008bbc <v_test>
					break;
 80085f8:	e005      	b.n	8008606 <test_select+0x10a>

				case 4:
					pass_test();
 80085fa:	f000 fd13 	bl	8009024 <pass_test>

				case 5:
					goal_test();
 80085fe:	f000 ffed 	bl	80095dc <goal_test>

				case 6:
					sample_course_run();
 8008602:	f001 fe4b 	bl	800a29c <sample_course_run>
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 8008606:	e782      	b.n	800850e <test_select+0x12>
 8008608:	08012660 	.word	0x08012660
 800860c:	20000aec 	.word	0x20000aec
 8008610:	08012654 	.word	0x08012654
 8008614:	40020000 	.word	0x40020000

08008618 <init_test>:
//init_test
// 初期基幹関数走行テスト
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void init_test(void){
 8008618:	b580      	push	{r7, lr}
 800861a:	b086      	sub	sp, #24
 800861c:	af00      	add	r7, sp, #0

	int mode = 0;
 800861e:	2300      	movs	r3, #0
 8008620:	617b      	str	r3, [r7, #20]
	printf("Test Init Run, Mode : %d\n", mode);
 8008622:	6979      	ldr	r1, [r7, #20]
 8008624:	4872      	ldr	r0, [pc, #456]	; (80087f0 <init_test+0x1d8>)
 8008626:	f008 fef7 	bl	8011418 <iprintf>

	while(1){
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 800862a:	697b      	ldr	r3, [r7, #20]
 800862c:	b2db      	uxtb	r3, r3
 800862e:	f003 0301 	and.w	r3, r3, #1
 8008632:	b2d8      	uxtb	r0, r3
 8008634:	697b      	ldr	r3, [r7, #20]
 8008636:	b2db      	uxtb	r3, r3
 8008638:	f003 0302 	and.w	r3, r3, #2
 800863c:	b2d9      	uxtb	r1, r3
 800863e:	697b      	ldr	r3, [r7, #20]
 8008640:	b2db      	uxtb	r3, r3
 8008642:	f003 0304 	and.w	r3, r3, #4
 8008646:	b2db      	uxtb	r3, r3
 8008648:	461a      	mov	r2, r3
 800864a:	f008 f917 	bl	801087c <led_write>
		  if(dist_r >= 20){
 800864e:	4b69      	ldr	r3, [pc, #420]	; (80087f4 <init_test+0x1dc>)
 8008650:	edd3 7a00 	vldr	s15, [r3]
 8008654:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8008658:	eef4 7ac7 	vcmpe.f32	s15, s14
 800865c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008660:	db0f      	blt.n	8008682 <init_test+0x6a>
			  mode++;
 8008662:	697b      	ldr	r3, [r7, #20]
 8008664:	3301      	adds	r3, #1
 8008666:	617b      	str	r3, [r7, #20]
			  dist_r = 0;
 8008668:	4b62      	ldr	r3, [pc, #392]	; (80087f4 <init_test+0x1dc>)
 800866a:	f04f 0200 	mov.w	r2, #0
 800866e:	601a      	str	r2, [r3, #0]
			  if(mode > 7){
 8008670:	697b      	ldr	r3, [r7, #20]
 8008672:	2b07      	cmp	r3, #7
 8008674:	dd01      	ble.n	800867a <init_test+0x62>
				  mode = 0;
 8008676:	2300      	movs	r3, #0
 8008678:	617b      	str	r3, [r7, #20]
			  }
			  printf("Mode : %d\n", mode);
 800867a:	6979      	ldr	r1, [r7, #20]
 800867c:	485e      	ldr	r0, [pc, #376]	; (80087f8 <init_test+0x1e0>)
 800867e:	f008 fecb 	bl	8011418 <iprintf>
		  }
		  if(dist_r <= -20){
 8008682:	4b5c      	ldr	r3, [pc, #368]	; (80087f4 <init_test+0x1dc>)
 8008684:	edd3 7a00 	vldr	s15, [r3]
 8008688:	eebb 7a04 	vmov.f32	s14, #180	; 0xc1a00000 -20.0
 800868c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008690:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008694:	d80f      	bhi.n	80086b6 <init_test+0x9e>
			  mode--;
 8008696:	697b      	ldr	r3, [r7, #20]
 8008698:	3b01      	subs	r3, #1
 800869a:	617b      	str	r3, [r7, #20]
			  dist_r = 0;
 800869c:	4b55      	ldr	r3, [pc, #340]	; (80087f4 <init_test+0x1dc>)
 800869e:	f04f 0200 	mov.w	r2, #0
 80086a2:	601a      	str	r2, [r3, #0]
			  if(mode < 0){
 80086a4:	697b      	ldr	r3, [r7, #20]
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	da01      	bge.n	80086ae <init_test+0x96>
				  mode = 7;
 80086aa:	2307      	movs	r3, #7
 80086ac:	617b      	str	r3, [r7, #20]
			  }
			  printf("Mode : %d\n", mode);
 80086ae:	6979      	ldr	r1, [r7, #20]
 80086b0:	4851      	ldr	r0, [pc, #324]	; (80087f8 <init_test+0x1e0>)
 80086b2:	f008 feb1 	bl	8011418 <iprintf>
		  }
		  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET){
 80086b6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80086ba:	4850      	ldr	r0, [pc, #320]	; (80087fc <init_test+0x1e4>)
 80086bc:	f7f9 fe0a 	bl	80022d4 <HAL_GPIO_ReadPin>
 80086c0:	4603      	mov	r3, r0
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d1b1      	bne.n	800862a <init_test+0x12>
			  HAL_Delay(50);
 80086c6:	2032      	movs	r0, #50	; 0x32
 80086c8:	f7f8 fca8 	bl	800101c <HAL_Delay>
			  while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET);
 80086cc:	bf00      	nop
 80086ce:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80086d2:	484a      	ldr	r0, [pc, #296]	; (80087fc <init_test+0x1e4>)
 80086d4:	f7f9 fdfe 	bl	80022d4 <HAL_GPIO_ReadPin>
 80086d8:	4603      	mov	r3, r0
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d0f7      	beq.n	80086ce <init_test+0xb6>
			  drive_ready();
 80086de:	f7fc facf 	bl	8004c80 <drive_ready>
			  get_base();
 80086e2:	f008 f873 	bl	80107cc <get_base>

			  switch(mode){
 80086e6:	697b      	ldr	r3, [r7, #20]
 80086e8:	2b07      	cmp	r3, #7
 80086ea:	d89e      	bhi.n	800862a <init_test+0x12>
 80086ec:	a201      	add	r2, pc, #4	; (adr r2, 80086f4 <init_test+0xdc>)
 80086ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086f2:	bf00      	nop
 80086f4:	08008715 	.word	0x08008715
 80086f8:	0800871b 	.word	0x0800871b
 80086fc:	0800873b 	.word	0x0800873b
 8008700:	08008759 	.word	0x08008759
 8008704:	08008777 	.word	0x08008777
 8008708:	08008795 	.word	0x08008795
 800870c:	080087bf 	.word	0x080087bf
 8008710:	080087d9 	.word	0x080087d9
				case 0:
					get_base();
 8008714:	f008 f85a 	bl	80107cc <get_base>
					break;
 8008718:	e069      	b.n	80087ee <init_test+0x1d6>
				case 1:
					//----4区画等速走行----
					printf("4 Section, Forward, Constant Speed.\n");
 800871a:	4839      	ldr	r0, [pc, #228]	; (8008800 <init_test+0x1e8>)
 800871c:	f008 fef0 	bl	8011500 <puts>
					for(int i = 0; i < 1; i++){
 8008720:	2300      	movs	r3, #0
 8008722:	613b      	str	r3, [r7, #16]
 8008724:	e005      	b.n	8008732 <init_test+0x11a>
						driveC(SEC_HALF*2);	//一区画のパルス分デフォルトインターバルで走行
 8008726:	20b6      	movs	r0, #182	; 0xb6
 8008728:	f7fc fe0c 	bl	8005344 <driveC>
					for(int i = 0; i < 1; i++){
 800872c:	693b      	ldr	r3, [r7, #16]
 800872e:	3301      	adds	r3, #1
 8008730:	613b      	str	r3, [r7, #16]
 8008732:	693b      	ldr	r3, [r7, #16]
 8008734:	2b00      	cmp	r3, #0
 8008736:	ddf6      	ble.n	8008726 <init_test+0x10e>
					}
					break;
 8008738:	e059      	b.n	80087ee <init_test+0x1d6>
				case 2:
					//----right90度回転----
					printf("Rotate R90.\n");
 800873a:	4832      	ldr	r0, [pc, #200]	; (8008804 <init_test+0x1ec>)
 800873c:	f008 fee0 	bl	8011500 <puts>
					for(int i = 0; i < 32; i++){
 8008740:	2300      	movs	r3, #0
 8008742:	60fb      	str	r3, [r7, #12]
 8008744:	e004      	b.n	8008750 <init_test+0x138>
						rotate_R90();				//16回右90度回転、つまり4周回転
 8008746:	f7fd fc8f 	bl	8006068 <rotate_R90>
					for(int i = 0; i < 32; i++){
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	3301      	adds	r3, #1
 800874e:	60fb      	str	r3, [r7, #12]
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	2b1f      	cmp	r3, #31
 8008754:	ddf7      	ble.n	8008746 <init_test+0x12e>
					}
					break;
 8008756:	e04a      	b.n	80087ee <init_test+0x1d6>
				case 3:
					//----left90度回転----
					printf("Rotate L90.\n");
 8008758:	482b      	ldr	r0, [pc, #172]	; (8008808 <init_test+0x1f0>)
 800875a:	f008 fed1 	bl	8011500 <puts>
					for(int i = 0; i < 32; i++){
 800875e:	2300      	movs	r3, #0
 8008760:	60bb      	str	r3, [r7, #8]
 8008762:	e004      	b.n	800876e <init_test+0x156>
						rotate_L90();				//16回左90度回転、つまり4周回転
 8008764:	f7fd fd5c 	bl	8006220 <rotate_L90>
					for(int i = 0; i < 32; i++){
 8008768:	68bb      	ldr	r3, [r7, #8]
 800876a:	3301      	adds	r3, #1
 800876c:	60bb      	str	r3, [r7, #8]
 800876e:	68bb      	ldr	r3, [r7, #8]
 8008770:	2b1f      	cmp	r3, #31
 8008772:	ddf7      	ble.n	8008764 <init_test+0x14c>
					}
					break;
 8008774:	e03b      	b.n	80087ee <init_test+0x1d6>
				case 4:
					//----180度回転----
					printf("Rotate 180.\n");
 8008776:	4825      	ldr	r0, [pc, #148]	; (800880c <init_test+0x1f4>)
 8008778:	f008 fec2 	bl	8011500 <puts>
					for(int i = 0; i < 16; i++){
 800877c:	2300      	movs	r3, #0
 800877e:	607b      	str	r3, [r7, #4]
 8008780:	e004      	b.n	800878c <init_test+0x174>
						rotate_180();				//8回右180度回転、つまり4周回転
 8008782:	f7fd fe29 	bl	80063d8 <rotate_180>
					for(int i = 0; i < 16; i++){
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	3301      	adds	r3, #1
 800878a:	607b      	str	r3, [r7, #4]
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	2b0f      	cmp	r3, #15
 8008790:	ddf7      	ble.n	8008782 <init_test+0x16a>
					}
					break;
 8008792:	e02c      	b.n	80087ee <init_test+0x1d6>
				case 5:
					//----4区画連続走行----
					printf("4 Section, Forward, Continuous.\n");
 8008794:	481e      	ldr	r0, [pc, #120]	; (8008810 <init_test+0x1f8>)
 8008796:	f008 feb3 	bl	8011500 <puts>
					get_base();
 800879a:	f008 f817 	bl	80107cc <get_base>
					half_sectionA();				//半区画のパルス分加速しながら走行
 800879e:	f7fd f971 	bl	8005a84 <half_sectionA>
					for(int i = 0; i < 6-1; i++){
 80087a2:	2300      	movs	r3, #0
 80087a4:	603b      	str	r3, [r7, #0]
 80087a6:	e004      	b.n	80087b2 <init_test+0x19a>
						one_sectionU();			//一区画のパルス分等速走行
 80087a8:	f7fd fc44 	bl	8006034 <one_sectionU>
					for(int i = 0; i < 6-1; i++){
 80087ac:	683b      	ldr	r3, [r7, #0]
 80087ae:	3301      	adds	r3, #1
 80087b0:	603b      	str	r3, [r7, #0]
 80087b2:	683b      	ldr	r3, [r7, #0]
 80087b4:	2b04      	cmp	r3, #4
 80087b6:	ddf7      	ble.n	80087a8 <init_test+0x190>
					}
					half_sectionD();				//半区画のパルス分減速しながら走行。走行後は停止する
 80087b8:	f7fd f9ae 	bl	8005b18 <half_sectionD>
					break;
 80087bc:	e017      	b.n	80087ee <init_test+0x1d6>
				case 6:
					//----a宴会芸モード----
					target_degree_z = degree_z;
 80087be:	4b15      	ldr	r3, [pc, #84]	; (8008814 <init_test+0x1fc>)
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	4a15      	ldr	r2, [pc, #84]	; (8008818 <init_test+0x200>)
 80087c4:	6013      	str	r3, [r2, #0]
					accel_l = 5000;
 80087c6:	4b15      	ldr	r3, [pc, #84]	; (800881c <init_test+0x204>)
 80087c8:	4a15      	ldr	r2, [pc, #84]	; (8008820 <init_test+0x208>)
 80087ca:	601a      	str	r2, [r3, #0]

					MF2.FLAG.ENKAI = 1;
 80087cc:	4a15      	ldr	r2, [pc, #84]	; (8008824 <init_test+0x20c>)
 80087ce:	8813      	ldrh	r3, [r2, #0]
 80087d0:	f043 0320 	orr.w	r3, r3, #32
 80087d4:	8013      	strh	r3, [r2, #0]

					while(1);
 80087d6:	e7fe      	b.n	80087d6 <init_test+0x1be>
					break;
				case 7:
					//----a停止時前壁補正モード----
					MF.FLAG.FWALL = 1;
 80087d8:	4a13      	ldr	r2, [pc, #76]	; (8008828 <init_test+0x210>)
 80087da:	8813      	ldrh	r3, [r2, #0]
 80087dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80087e0:	8013      	strh	r3, [r2, #0]
					MF.FLAG.DRV = 1;
 80087e2:	4a11      	ldr	r2, [pc, #68]	; (8008828 <init_test+0x210>)
 80087e4:	8813      	ldrh	r3, [r2, #0]
 80087e6:	f043 0302 	orr.w	r3, r3, #2
 80087ea:	8013      	strh	r3, [r2, #0]
					while(1);
 80087ec:	e7fe      	b.n	80087ec <init_test+0x1d4>
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 80087ee:	e71c      	b.n	800862a <init_test+0x12>
 80087f0:	08012678 	.word	0x08012678
 80087f4:	20000aec 	.word	0x20000aec
 80087f8:	08012654 	.word	0x08012654
 80087fc:	40020000 	.word	0x40020000
 8008800:	08012694 	.word	0x08012694
 8008804:	080126b8 	.word	0x080126b8
 8008808:	080126c4 	.word	0x080126c4
 800880c:	080126d0 	.word	0x080126d0
 8008810:	080126dc 	.word	0x080126dc
 8008814:	20000b5c 	.word	0x20000b5c
 8008818:	20000bf8 	.word	0x20000bf8
 800881c:	20000d58 	.word	0x20000d58
 8008820:	459c4000 	.word	0x459c4000
 8008824:	20000f64 	.word	0x20000f64
 8008828:	20000f68 	.word	0x20000f68

0800882c <slalom_test>:
//slalom_test
// スラローム走行テスト
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void slalom_test(void){
 800882c:	b580      	push	{r7, lr}
 800882e:	b08e      	sub	sp, #56	; 0x38
 8008830:	af00      	add	r7, sp, #0

	int mode = 0;
 8008832:	2300      	movs	r3, #0
 8008834:	637b      	str	r3, [r7, #52]	; 0x34
	printf("Test Slalom Run, Mode : %d\n", mode);
 8008836:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008838:	48b8      	ldr	r0, [pc, #736]	; (8008b1c <slalom_test+0x2f0>)
 800883a:	f008 fded 	bl	8011418 <iprintf>

	run_select();
 800883e:	f7fc fb5f 	bl	8004f00 <run_select>

	while(1){
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 8008842:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008844:	b2db      	uxtb	r3, r3
 8008846:	f003 0301 	and.w	r3, r3, #1
 800884a:	b2d8      	uxtb	r0, r3
 800884c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800884e:	b2db      	uxtb	r3, r3
 8008850:	f003 0302 	and.w	r3, r3, #2
 8008854:	b2d9      	uxtb	r1, r3
 8008856:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008858:	b2db      	uxtb	r3, r3
 800885a:	f003 0304 	and.w	r3, r3, #4
 800885e:	b2db      	uxtb	r3, r3
 8008860:	461a      	mov	r2, r3
 8008862:	f008 f80b 	bl	801087c <led_write>
		  if(dist_r >= 20){
 8008866:	4bae      	ldr	r3, [pc, #696]	; (8008b20 <slalom_test+0x2f4>)
 8008868:	edd3 7a00 	vldr	s15, [r3]
 800886c:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8008870:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008874:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008878:	db20      	blt.n	80088bc <slalom_test+0x90>
			  mode++;
 800887a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800887c:	3301      	adds	r3, #1
 800887e:	637b      	str	r3, [r7, #52]	; 0x34
			  dist_r = 0;
 8008880:	4ba7      	ldr	r3, [pc, #668]	; (8008b20 <slalom_test+0x2f4>)
 8008882:	f04f 0200 	mov.w	r2, #0
 8008886:	601a      	str	r2, [r3, #0]
			  if(mode < 8){
 8008888:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800888a:	2b07      	cmp	r3, #7
 800888c:	dc03      	bgt.n	8008896 <slalom_test+0x6a>
				  full_led_write(WHITE);
 800888e:	2007      	movs	r0, #7
 8008890:	f008 f82e 	bl	80108f0 <full_led_write>
 8008894:	e009      	b.n	80088aa <slalom_test+0x7e>
			  }else if(mode < 16){
 8008896:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008898:	2b0f      	cmp	r3, #15
 800889a:	dc03      	bgt.n	80088a4 <slalom_test+0x78>
				  full_led_write(BLUEGREEN);
 800889c:	2004      	movs	r0, #4
 800889e:	f008 f827 	bl	80108f0 <full_led_write>
 80088a2:	e002      	b.n	80088aa <slalom_test+0x7e>
			  }else{
				  full_led_write(PURPLE);
 80088a4:	2005      	movs	r0, #5
 80088a6:	f008 f823 	bl	80108f0 <full_led_write>
			  }
			  if(mode > 23){
 80088aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088ac:	2b17      	cmp	r3, #23
 80088ae:	dd01      	ble.n	80088b4 <slalom_test+0x88>
				  mode = 0;
 80088b0:	2300      	movs	r3, #0
 80088b2:	637b      	str	r3, [r7, #52]	; 0x34
			  }
			  printf("Mode : %d\n", mode);
 80088b4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80088b6:	489b      	ldr	r0, [pc, #620]	; (8008b24 <slalom_test+0x2f8>)
 80088b8:	f008 fdae 	bl	8011418 <iprintf>
		  }
		  if(dist_r <= -20){
 80088bc:	4b98      	ldr	r3, [pc, #608]	; (8008b20 <slalom_test+0x2f4>)
 80088be:	edd3 7a00 	vldr	s15, [r3]
 80088c2:	eebb 7a04 	vmov.f32	s14, #180	; 0xc1a00000 -20.0
 80088c6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80088ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80088ce:	d820      	bhi.n	8008912 <slalom_test+0xe6>
			  mode--;
 80088d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088d2:	3b01      	subs	r3, #1
 80088d4:	637b      	str	r3, [r7, #52]	; 0x34
			  dist_r = 0;
 80088d6:	4b92      	ldr	r3, [pc, #584]	; (8008b20 <slalom_test+0x2f4>)
 80088d8:	f04f 0200 	mov.w	r2, #0
 80088dc:	601a      	str	r2, [r3, #0]
			  if(mode < 8){
 80088de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088e0:	2b07      	cmp	r3, #7
 80088e2:	dc03      	bgt.n	80088ec <slalom_test+0xc0>
				  full_led_write(WHITE);
 80088e4:	2007      	movs	r0, #7
 80088e6:	f008 f803 	bl	80108f0 <full_led_write>
 80088ea:	e009      	b.n	8008900 <slalom_test+0xd4>
			  }else if(mode < 16){
 80088ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088ee:	2b0f      	cmp	r3, #15
 80088f0:	dc03      	bgt.n	80088fa <slalom_test+0xce>
				  full_led_write(BLUEGREEN);
 80088f2:	2004      	movs	r0, #4
 80088f4:	f007 fffc 	bl	80108f0 <full_led_write>
 80088f8:	e002      	b.n	8008900 <slalom_test+0xd4>
			  }else{
				  full_led_write(PURPLE);
 80088fa:	2005      	movs	r0, #5
 80088fc:	f007 fff8 	bl	80108f0 <full_led_write>
			  }
			  if(mode < 0){
 8008900:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008902:	2b00      	cmp	r3, #0
 8008904:	da01      	bge.n	800890a <slalom_test+0xde>
				  mode = 23;
 8008906:	2317      	movs	r3, #23
 8008908:	637b      	str	r3, [r7, #52]	; 0x34
			  }
			  printf("Mode : %d\n", mode);
 800890a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800890c:	4885      	ldr	r0, [pc, #532]	; (8008b24 <slalom_test+0x2f8>)
 800890e:	f008 fd83 	bl	8011418 <iprintf>
		  }
		  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET){
 8008912:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8008916:	4884      	ldr	r0, [pc, #528]	; (8008b28 <slalom_test+0x2fc>)
 8008918:	f7f9 fcdc 	bl	80022d4 <HAL_GPIO_ReadPin>
 800891c:	4603      	mov	r3, r0
 800891e:	2b00      	cmp	r3, #0
 8008920:	d18f      	bne.n	8008842 <slalom_test+0x16>
			  HAL_Delay(50);
 8008922:	2032      	movs	r0, #50	; 0x32
 8008924:	f7f8 fb7a 	bl	800101c <HAL_Delay>
			  while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET);
 8008928:	bf00      	nop
 800892a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800892e:	487e      	ldr	r0, [pc, #504]	; (8008b28 <slalom_test+0x2fc>)
 8008930:	f7f9 fcd0 	bl	80022d4 <HAL_GPIO_ReadPin>
 8008934:	4603      	mov	r3, r0
 8008936:	2b00      	cmp	r3, #0
 8008938:	d0f7      	beq.n	800892a <slalom_test+0xfe>
			  drive_ready();
 800893a:	f7fc f9a1 	bl	8004c80 <drive_ready>
			  get_base();
 800893e:	f007 ff45 	bl	80107cc <get_base>

			  switch(mode){
 8008942:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008944:	2b10      	cmp	r3, #16
 8008946:	f200 8130 	bhi.w	8008baa <slalom_test+0x37e>
 800894a:	a201      	add	r2, pc, #4	; (adr r2, 8008950 <slalom_test+0x124>)
 800894c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008950:	08008995 	.word	0x08008995
 8008954:	0800899b 	.word	0x0800899b
 8008958:	080089c1 	.word	0x080089c1
 800895c:	080089e7 	.word	0x080089e7
 8008960:	08008a0d 	.word	0x08008a0d
 8008964:	08008a33 	.word	0x08008a33
 8008968:	08008a59 	.word	0x08008a59
 800896c:	08008bab 	.word	0x08008bab
 8008970:	08008bab 	.word	0x08008bab
 8008974:	08008a7f 	.word	0x08008a7f
 8008978:	08008aa9 	.word	0x08008aa9
 800897c:	08008ae7 	.word	0x08008ae7
 8008980:	08008b0d 	.word	0x08008b0d
 8008984:	08008b5f 	.word	0x08008b5f
 8008988:	08008b85 	.word	0x08008b85
 800898c:	08008bab 	.word	0x08008bab
 8008990:	08008bab 	.word	0x08008bab
				case 0:
					get_base();
 8008994:	f007 ff1a 	bl	80107cc <get_base>
					break;
 8008998:	e107      	b.n	8008baa <slalom_test+0x37e>
				case 1:
					//----slalom右折----
					printf("slalom turn right .\n");
 800899a:	4864      	ldr	r0, [pc, #400]	; (8008b2c <slalom_test+0x300>)
 800899c:	f008 fdb0 	bl	8011500 <puts>
					half_sectionA();
 80089a0:	f7fd f870 	bl	8005a84 <half_sectionA>
					for(int i = 0; i < 1; i++){
 80089a4:	2300      	movs	r3, #0
 80089a6:	633b      	str	r3, [r7, #48]	; 0x30
 80089a8:	e004      	b.n	80089b4 <slalom_test+0x188>
						slalom_R90();	//一区画のパルス分デフォルトインターバルで走行
 80089aa:	f7fd fded 	bl	8006588 <slalom_R90>
					for(int i = 0; i < 1; i++){
 80089ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089b0:	3301      	adds	r3, #1
 80089b2:	633b      	str	r3, [r7, #48]	; 0x30
 80089b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	ddf7      	ble.n	80089aa <slalom_test+0x17e>
					}
					half_sectionD();
 80089ba:	f7fd f8ad 	bl	8005b18 <half_sectionD>
					break;
 80089be:	e0f4      	b.n	8008baa <slalom_test+0x37e>
				case 2:
					//----slalom左折----
					printf("slalom turn left .\n");
 80089c0:	485b      	ldr	r0, [pc, #364]	; (8008b30 <slalom_test+0x304>)
 80089c2:	f008 fd9d 	bl	8011500 <puts>
					half_sectionA();
 80089c6:	f7fd f85d 	bl	8005a84 <half_sectionA>
					for(int i = 0; i < 1; i++){
 80089ca:	2300      	movs	r3, #0
 80089cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80089ce:	e004      	b.n	80089da <slalom_test+0x1ae>
						slalom_L90();				//16回右90度回転、つまり4周回転
 80089d0:	f7fd febe 	bl	8006750 <slalom_L90>
					for(int i = 0; i < 1; i++){
 80089d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089d6:	3301      	adds	r3, #1
 80089d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80089da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089dc:	2b00      	cmp	r3, #0
 80089de:	ddf7      	ble.n	80089d0 <slalom_test+0x1a4>
					}
					half_sectionD();
 80089e0:	f7fd f89a 	bl	8005b18 <half_sectionD>
					break;
 80089e4:	e0e1      	b.n	8008baa <slalom_test+0x37e>
				case 3:
					//----Lslalom右折----
					printf("Lslalom turn right .\n");
 80089e6:	4853      	ldr	r0, [pc, #332]	; (8008b34 <slalom_test+0x308>)
 80089e8:	f008 fd8a 	bl	8011500 <puts>
					half_sectionA();
 80089ec:	f7fd f84a 	bl	8005a84 <half_sectionA>
					for(int i = 0; i < 1; i++){
 80089f0:	2300      	movs	r3, #0
 80089f2:	62bb      	str	r3, [r7, #40]	; 0x28
 80089f4:	e004      	b.n	8008a00 <slalom_test+0x1d4>
						Lslalom_R90();				//16回右90度回転、つまり4周回転
 80089f6:	f7fd ff85 	bl	8006904 <Lslalom_R90>
					for(int i = 0; i < 1; i++){
 80089fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089fc:	3301      	adds	r3, #1
 80089fe:	62bb      	str	r3, [r7, #40]	; 0x28
 8008a00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	ddf7      	ble.n	80089f6 <slalom_test+0x1ca>
					}
					half_sectionD();
 8008a06:	f7fd f887 	bl	8005b18 <half_sectionD>
					break;
 8008a0a:	e0ce      	b.n	8008baa <slalom_test+0x37e>
				case 4:
					//----Lslalom左折----
					printf("Lslalom turn left .\n");
 8008a0c:	484a      	ldr	r0, [pc, #296]	; (8008b38 <slalom_test+0x30c>)
 8008a0e:	f008 fd77 	bl	8011500 <puts>
					half_sectionA();
 8008a12:	f7fd f837 	bl	8005a84 <half_sectionA>
					for(int i = 0; i < 1; i++){
 8008a16:	2300      	movs	r3, #0
 8008a18:	627b      	str	r3, [r7, #36]	; 0x24
 8008a1a:	e004      	b.n	8008a26 <slalom_test+0x1fa>
						Lslalom_L90();				//16回左90度回転、つまり4周回転
 8008a1c:	f7fe f84a 	bl	8006ab4 <Lslalom_L90>
					for(int i = 0; i < 1; i++){
 8008a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a22:	3301      	adds	r3, #1
 8008a24:	627b      	str	r3, [r7, #36]	; 0x24
 8008a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	ddf7      	ble.n	8008a1c <slalom_test+0x1f0>
					}
					half_sectionD();
 8008a2c:	f7fd f874 	bl	8005b18 <half_sectionD>
					break;
 8008a30:	e0bb      	b.n	8008baa <slalom_test+0x37e>
				case 5:
					//----Lslalom右180----
					printf("Lslalom turn right & right .\n");
 8008a32:	4842      	ldr	r0, [pc, #264]	; (8008b3c <slalom_test+0x310>)
 8008a34:	f008 fd64 	bl	8011500 <puts>
					half_sectionA();
 8008a38:	f7fd f824 	bl	8005a84 <half_sectionA>
					for(int i = 0; i < 1; i++){
 8008a3c:	2300      	movs	r3, #0
 8008a3e:	623b      	str	r3, [r7, #32]
 8008a40:	e004      	b.n	8008a4c <slalom_test+0x220>
						Lslalom_R180();				//16回右180度回転、つまり4周回転
 8008a42:	f7fe f903 	bl	8006c4c <Lslalom_R180>
					for(int i = 0; i < 1; i++){
 8008a46:	6a3b      	ldr	r3, [r7, #32]
 8008a48:	3301      	adds	r3, #1
 8008a4a:	623b      	str	r3, [r7, #32]
 8008a4c:	6a3b      	ldr	r3, [r7, #32]
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	ddf7      	ble.n	8008a42 <slalom_test+0x216>
					}
					half_sectionD();
 8008a52:	f7fd f861 	bl	8005b18 <half_sectionD>
					break;
 8008a56:	e0a8      	b.n	8008baa <slalom_test+0x37e>
				case 6:
					//----Lslalom左180----
					printf("Lslalom turn left & left .\n");
 8008a58:	4839      	ldr	r0, [pc, #228]	; (8008b40 <slalom_test+0x314>)
 8008a5a:	f008 fd51 	bl	8011500 <puts>
					half_sectionA();
 8008a5e:	f7fd f811 	bl	8005a84 <half_sectionA>
					for(int i = 0; i < 1; i++){
 8008a62:	2300      	movs	r3, #0
 8008a64:	61fb      	str	r3, [r7, #28]
 8008a66:	e004      	b.n	8008a72 <slalom_test+0x246>
						Lslalom_L180();				//16回左180度回転、つまり4周回転
 8008a68:	f7fe f9d6 	bl	8006e18 <Lslalom_L180>
					for(int i = 0; i < 1; i++){
 8008a6c:	69fb      	ldr	r3, [r7, #28]
 8008a6e:	3301      	adds	r3, #1
 8008a70:	61fb      	str	r3, [r7, #28]
 8008a72:	69fb      	ldr	r3, [r7, #28]
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	ddf7      	ble.n	8008a68 <slalom_test+0x23c>
					}
					half_sectionD();
 8008a78:	f7fd f84e 	bl	8005b18 <half_sectionD>
					break;
 8008a7c:	e095      	b.n	8008baa <slalom_test+0x37e>
					break;
				case 8:
					break;
				case 9:
					//----slalom右折----
					printf("slalom turn right .\n");
 8008a7e:	482b      	ldr	r0, [pc, #172]	; (8008b2c <slalom_test+0x300>)
 8008a80:	f008 fd3e 	bl	8011500 <puts>
					half_sectionA();
 8008a84:	f7fc fffe 	bl	8005a84 <half_sectionA>
					for(int i = 0; i < 8; i++){
 8008a88:	2300      	movs	r3, #0
 8008a8a:	61bb      	str	r3, [r7, #24]
 8008a8c:	e006      	b.n	8008a9c <slalom_test+0x270>
						slalom_R90();	//一区画のパルス分デフォルトインターバルで走行
 8008a8e:	f7fd fd7b 	bl	8006588 <slalom_R90>
						one_sectionU();
 8008a92:	f7fd facf 	bl	8006034 <one_sectionU>
					for(int i = 0; i < 8; i++){
 8008a96:	69bb      	ldr	r3, [r7, #24]
 8008a98:	3301      	adds	r3, #1
 8008a9a:	61bb      	str	r3, [r7, #24]
 8008a9c:	69bb      	ldr	r3, [r7, #24]
 8008a9e:	2b07      	cmp	r3, #7
 8008aa0:	ddf5      	ble.n	8008a8e <slalom_test+0x262>
					}
					half_sectionD();
 8008aa2:	f7fd f839 	bl	8005b18 <half_sectionD>
					break;
 8008aa6:	e080      	b.n	8008baa <slalom_test+0x37e>
				case 10:
					//----slalom左折----
					printf("slalom turn left .\n");
 8008aa8:	4821      	ldr	r0, [pc, #132]	; (8008b30 <slalom_test+0x304>)
 8008aaa:	f008 fd29 	bl	8011500 <puts>
					half_sectionA();
 8008aae:	f7fc ffe9 	bl	8005a84 <half_sectionA>
					MF2.FLAG.LOG = 1;
 8008ab2:	4a24      	ldr	r2, [pc, #144]	; (8008b44 <slalom_test+0x318>)
 8008ab4:	8813      	ldrh	r3, [r2, #0]
 8008ab6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008aba:	8013      	strh	r3, [r2, #0]
					for(int i = 0; i < 8; i++){
 8008abc:	2300      	movs	r3, #0
 8008abe:	617b      	str	r3, [r7, #20]
 8008ac0:	e006      	b.n	8008ad0 <slalom_test+0x2a4>
						slalom_L90();				//16回右90度回転、つまり4周回転
 8008ac2:	f7fd fe45 	bl	8006750 <slalom_L90>
						one_sectionU();
 8008ac6:	f7fd fab5 	bl	8006034 <one_sectionU>
					for(int i = 0; i < 8; i++){
 8008aca:	697b      	ldr	r3, [r7, #20]
 8008acc:	3301      	adds	r3, #1
 8008ace:	617b      	str	r3, [r7, #20]
 8008ad0:	697b      	ldr	r3, [r7, #20]
 8008ad2:	2b07      	cmp	r3, #7
 8008ad4:	ddf5      	ble.n	8008ac2 <slalom_test+0x296>
					}
					MF2.FLAG.LOG = 0;
 8008ad6:	4a1b      	ldr	r2, [pc, #108]	; (8008b44 <slalom_test+0x318>)
 8008ad8:	8813      	ldrh	r3, [r2, #0]
 8008ada:	f36f 1386 	bfc	r3, #6, #1
 8008ade:	8013      	strh	r3, [r2, #0]
					half_sectionD();
 8008ae0:	f7fd f81a 	bl	8005b18 <half_sectionD>
					printf("r start\n");
					for(int j = 0; j < log_allay; j++){
						printf("%d\n", get_speed_r[j]);
					}
					printf("r end\n");
*/					break;
 8008ae4:	e061      	b.n	8008baa <slalom_test+0x37e>
				case 11:
					//----Lslalom右折----
					printf("Lslalom turn right .\n");
 8008ae6:	4813      	ldr	r0, [pc, #76]	; (8008b34 <slalom_test+0x308>)
 8008ae8:	f008 fd0a 	bl	8011500 <puts>
					half_sectionA();
 8008aec:	f7fc ffca 	bl	8005a84 <half_sectionA>
					for(int i = 0; i < 8; i++){
 8008af0:	2300      	movs	r3, #0
 8008af2:	613b      	str	r3, [r7, #16]
 8008af4:	e004      	b.n	8008b00 <slalom_test+0x2d4>
						Lslalom_R90();				//16回右90度回転、つまり4周回転
 8008af6:	f7fd ff05 	bl	8006904 <Lslalom_R90>
					for(int i = 0; i < 8; i++){
 8008afa:	693b      	ldr	r3, [r7, #16]
 8008afc:	3301      	adds	r3, #1
 8008afe:	613b      	str	r3, [r7, #16]
 8008b00:	693b      	ldr	r3, [r7, #16]
 8008b02:	2b07      	cmp	r3, #7
 8008b04:	ddf7      	ble.n	8008af6 <slalom_test+0x2ca>
					}
					half_sectionD();
 8008b06:	f7fd f807 	bl	8005b18 <half_sectionD>
					break;
 8008b0a:	e04e      	b.n	8008baa <slalom_test+0x37e>
				case 12:
					//----Lslalom左折----
					printf("Lslalom turn left .\n");
 8008b0c:	480a      	ldr	r0, [pc, #40]	; (8008b38 <slalom_test+0x30c>)
 8008b0e:	f008 fcf7 	bl	8011500 <puts>
					half_sectionA();
 8008b12:	f7fc ffb7 	bl	8005a84 <half_sectionA>
					for(int i = 0; i < 8; i++){
 8008b16:	2300      	movs	r3, #0
 8008b18:	60fb      	str	r3, [r7, #12]
 8008b1a:	e01a      	b.n	8008b52 <slalom_test+0x326>
 8008b1c:	080126fc 	.word	0x080126fc
 8008b20:	20000aec 	.word	0x20000aec
 8008b24:	08012654 	.word	0x08012654
 8008b28:	40020000 	.word	0x40020000
 8008b2c:	08012718 	.word	0x08012718
 8008b30:	0801272c 	.word	0x0801272c
 8008b34:	08012740 	.word	0x08012740
 8008b38:	08012758 	.word	0x08012758
 8008b3c:	0801276c 	.word	0x0801276c
 8008b40:	0801278c 	.word	0x0801278c
 8008b44:	20000f64 	.word	0x20000f64
						Lslalom_L90();				//16回左90度回転、つまり4周回転
 8008b48:	f7fd ffb4 	bl	8006ab4 <Lslalom_L90>
					for(int i = 0; i < 8; i++){
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	3301      	adds	r3, #1
 8008b50:	60fb      	str	r3, [r7, #12]
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	2b07      	cmp	r3, #7
 8008b56:	ddf7      	ble.n	8008b48 <slalom_test+0x31c>
					}
					half_sectionD();
 8008b58:	f7fc ffde 	bl	8005b18 <half_sectionD>
					break;
 8008b5c:	e025      	b.n	8008baa <slalom_test+0x37e>
				case 13:
					//----Lslalom右180----
					printf("Lslalom turn right & right .\n");
 8008b5e:	4815      	ldr	r0, [pc, #84]	; (8008bb4 <slalom_test+0x388>)
 8008b60:	f008 fcce 	bl	8011500 <puts>
					half_sectionA();
 8008b64:	f7fc ff8e 	bl	8005a84 <half_sectionA>
					for(int i = 0; i < 8; i++){
 8008b68:	2300      	movs	r3, #0
 8008b6a:	60bb      	str	r3, [r7, #8]
 8008b6c:	e004      	b.n	8008b78 <slalom_test+0x34c>
						Lslalom_R180();				//16回右180度回転、つまり4周回転
 8008b6e:	f7fe f86d 	bl	8006c4c <Lslalom_R180>
					for(int i = 0; i < 8; i++){
 8008b72:	68bb      	ldr	r3, [r7, #8]
 8008b74:	3301      	adds	r3, #1
 8008b76:	60bb      	str	r3, [r7, #8]
 8008b78:	68bb      	ldr	r3, [r7, #8]
 8008b7a:	2b07      	cmp	r3, #7
 8008b7c:	ddf7      	ble.n	8008b6e <slalom_test+0x342>
					}
					half_sectionD();
 8008b7e:	f7fc ffcb 	bl	8005b18 <half_sectionD>
					break;
 8008b82:	e012      	b.n	8008baa <slalom_test+0x37e>
				case 14:
					//----Lslalom左180----
					printf("Lslalom turn left & left .\n");
 8008b84:	480c      	ldr	r0, [pc, #48]	; (8008bb8 <slalom_test+0x38c>)
 8008b86:	f008 fcbb 	bl	8011500 <puts>
					half_sectionA();
 8008b8a:	f7fc ff7b 	bl	8005a84 <half_sectionA>
					for(int i = 0; i < 8; i++){
 8008b8e:	2300      	movs	r3, #0
 8008b90:	607b      	str	r3, [r7, #4]
 8008b92:	e004      	b.n	8008b9e <slalom_test+0x372>
						Lslalom_L180();				//16回左180度回転、つまり4周回転
 8008b94:	f7fe f940 	bl	8006e18 <Lslalom_L180>
					for(int i = 0; i < 8; i++){
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	3301      	adds	r3, #1
 8008b9c:	607b      	str	r3, [r7, #4]
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	2b07      	cmp	r3, #7
 8008ba2:	ddf7      	ble.n	8008b94 <slalom_test+0x368>
					}
					half_sectionD();
 8008ba4:	f7fc ffb8 	bl	8005b18 <half_sectionD>
					break;
 8008ba8:	bf00      	nop
					break;
				case 16:
					break;

			  }
			  full_led_write(RED);
 8008baa:	2001      	movs	r0, #1
 8008bac:	f007 fea0 	bl	80108f0 <full_led_write>
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 8008bb0:	e647      	b.n	8008842 <slalom_test+0x16>
 8008bb2:	bf00      	nop
 8008bb4:	0801276c 	.word	0x0801276c
 8008bb8:	0801278c 	.word	0x0801278c

08008bbc <v_test>:
//v_test
// 斜め走行テスト
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void v_test(void){
 8008bbc:	b580      	push	{r7, lr}
 8008bbe:	b092      	sub	sp, #72	; 0x48
 8008bc0:	af00      	add	r7, sp, #0

	int mode = 0;
 8008bc2:	2300      	movs	r3, #0
 8008bc4:	647b      	str	r3, [r7, #68]	; 0x44
	printf("Test V Run, Mode : %d\n", mode);
 8008bc6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008bc8:	48ba      	ldr	r0, [pc, #744]	; (8008eb4 <v_test+0x2f8>)
 8008bca:	f008 fc25 	bl	8011418 <iprintf>

	run_select();
 8008bce:	f7fc f997 	bl	8004f00 <run_select>

	while(1){
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 8008bd2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008bd4:	b2db      	uxtb	r3, r3
 8008bd6:	f003 0301 	and.w	r3, r3, #1
 8008bda:	b2d8      	uxtb	r0, r3
 8008bdc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008bde:	b2db      	uxtb	r3, r3
 8008be0:	f003 0302 	and.w	r3, r3, #2
 8008be4:	b2d9      	uxtb	r1, r3
 8008be6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008be8:	b2db      	uxtb	r3, r3
 8008bea:	f003 0304 	and.w	r3, r3, #4
 8008bee:	b2db      	uxtb	r3, r3
 8008bf0:	461a      	mov	r2, r3
 8008bf2:	f007 fe43 	bl	801087c <led_write>
		  if(dist_r >= 20){
 8008bf6:	4bb0      	ldr	r3, [pc, #704]	; (8008eb8 <v_test+0x2fc>)
 8008bf8:	edd3 7a00 	vldr	s15, [r3]
 8008bfc:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8008c00:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008c04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008c08:	db20      	blt.n	8008c4c <v_test+0x90>
			  mode++;
 8008c0a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008c0c:	3301      	adds	r3, #1
 8008c0e:	647b      	str	r3, [r7, #68]	; 0x44
			  dist_r = 0;
 8008c10:	4ba9      	ldr	r3, [pc, #676]	; (8008eb8 <v_test+0x2fc>)
 8008c12:	f04f 0200 	mov.w	r2, #0
 8008c16:	601a      	str	r2, [r3, #0]
			  if(mode > 23){
 8008c18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008c1a:	2b17      	cmp	r3, #23
 8008c1c:	dd01      	ble.n	8008c22 <v_test+0x66>
				  mode = 0;
 8008c1e:	2300      	movs	r3, #0
 8008c20:	647b      	str	r3, [r7, #68]	; 0x44
			  }
			  if(mode < 8){
 8008c22:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008c24:	2b07      	cmp	r3, #7
 8008c26:	dc03      	bgt.n	8008c30 <v_test+0x74>
				  full_led_write(WHITE);
 8008c28:	2007      	movs	r0, #7
 8008c2a:	f007 fe61 	bl	80108f0 <full_led_write>
 8008c2e:	e009      	b.n	8008c44 <v_test+0x88>
			  }else if(mode < 16){
 8008c30:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008c32:	2b0f      	cmp	r3, #15
 8008c34:	dc03      	bgt.n	8008c3e <v_test+0x82>
				  full_led_write(BLUEGREEN);
 8008c36:	2004      	movs	r0, #4
 8008c38:	f007 fe5a 	bl	80108f0 <full_led_write>
 8008c3c:	e002      	b.n	8008c44 <v_test+0x88>
			  }else{
				  full_led_write(PURPLE);
 8008c3e:	2005      	movs	r0, #5
 8008c40:	f007 fe56 	bl	80108f0 <full_led_write>
			  }
			  printf("Mode : %d\n", mode);
 8008c44:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008c46:	489d      	ldr	r0, [pc, #628]	; (8008ebc <v_test+0x300>)
 8008c48:	f008 fbe6 	bl	8011418 <iprintf>
		  }
		  if(dist_r <= -20){
 8008c4c:	4b9a      	ldr	r3, [pc, #616]	; (8008eb8 <v_test+0x2fc>)
 8008c4e:	edd3 7a00 	vldr	s15, [r3]
 8008c52:	eebb 7a04 	vmov.f32	s14, #180	; 0xc1a00000 -20.0
 8008c56:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008c5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008c5e:	d820      	bhi.n	8008ca2 <v_test+0xe6>
			  mode--;
 8008c60:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008c62:	3b01      	subs	r3, #1
 8008c64:	647b      	str	r3, [r7, #68]	; 0x44
			  dist_r = 0;
 8008c66:	4b94      	ldr	r3, [pc, #592]	; (8008eb8 <v_test+0x2fc>)
 8008c68:	f04f 0200 	mov.w	r2, #0
 8008c6c:	601a      	str	r2, [r3, #0]
			  if(mode < 0){
 8008c6e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	da01      	bge.n	8008c78 <v_test+0xbc>
				  mode = 23;
 8008c74:	2317      	movs	r3, #23
 8008c76:	647b      	str	r3, [r7, #68]	; 0x44
			  }
			  if(mode < 8){
 8008c78:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008c7a:	2b07      	cmp	r3, #7
 8008c7c:	dc03      	bgt.n	8008c86 <v_test+0xca>
				  full_led_write(WHITE);
 8008c7e:	2007      	movs	r0, #7
 8008c80:	f007 fe36 	bl	80108f0 <full_led_write>
 8008c84:	e009      	b.n	8008c9a <v_test+0xde>
			  }else if(mode < 16){
 8008c86:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008c88:	2b0f      	cmp	r3, #15
 8008c8a:	dc03      	bgt.n	8008c94 <v_test+0xd8>
				  full_led_write(BLUEGREEN);
 8008c8c:	2004      	movs	r0, #4
 8008c8e:	f007 fe2f 	bl	80108f0 <full_led_write>
 8008c92:	e002      	b.n	8008c9a <v_test+0xde>
			  }else{
				  full_led_write(PURPLE);
 8008c94:	2005      	movs	r0, #5
 8008c96:	f007 fe2b 	bl	80108f0 <full_led_write>
			  }
			  printf("Mode : %d\n", mode);
 8008c9a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008c9c:	4887      	ldr	r0, [pc, #540]	; (8008ebc <v_test+0x300>)
 8008c9e:	f008 fbbb 	bl	8011418 <iprintf>
		  }
		  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET){
 8008ca2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8008ca6:	4886      	ldr	r0, [pc, #536]	; (8008ec0 <v_test+0x304>)
 8008ca8:	f7f9 fb14 	bl	80022d4 <HAL_GPIO_ReadPin>
 8008cac:	4603      	mov	r3, r0
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d18f      	bne.n	8008bd2 <v_test+0x16>
			  HAL_Delay(50);
 8008cb2:	2032      	movs	r0, #50	; 0x32
 8008cb4:	f7f8 f9b2 	bl	800101c <HAL_Delay>
			  while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET);
 8008cb8:	bf00      	nop
 8008cba:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8008cbe:	4880      	ldr	r0, [pc, #512]	; (8008ec0 <v_test+0x304>)
 8008cc0:	f7f9 fb08 	bl	80022d4 <HAL_GPIO_ReadPin>
 8008cc4:	4603      	mov	r3, r0
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d0f7      	beq.n	8008cba <v_test+0xfe>
			  drive_ready();
 8008cca:	f7fb ffd9 	bl	8004c80 <drive_ready>

			  MF.FLAG.XDIR = 1;
 8008cce:	4a7d      	ldr	r2, [pc, #500]	; (8008ec4 <v_test+0x308>)
 8008cd0:	8813      	ldrh	r3, [r2, #0]
 8008cd2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008cd6:	8013      	strh	r3, [r2, #0]
			  MF2.FLAG.V = 0;
 8008cd8:	4a7b      	ldr	r2, [pc, #492]	; (8008ec8 <v_test+0x30c>)
 8008cda:	8813      	ldrh	r3, [r2, #0]
 8008cdc:	f36f 03c3 	bfc	r3, #3, #1
 8008ce0:	8013      	strh	r3, [r2, #0]
			  get_base();
 8008ce2:	f007 fd73 	bl	80107cc <get_base>

			  switch(mode){
 8008ce6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008ce8:	2b14      	cmp	r3, #20
 8008cea:	f200 818c 	bhi.w	8009006 <v_test+0x44a>
 8008cee:	a201      	add	r2, pc, #4	; (adr r2, 8008cf4 <v_test+0x138>)
 8008cf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cf4:	08008d49 	.word	0x08008d49
 8008cf8:	08008d4f 	.word	0x08008d4f
 8008cfc:	08008d75 	.word	0x08008d75
 8008d00:	08008d9b 	.word	0x08008d9b
 8008d04:	08008dc1 	.word	0x08008dc1
 8008d08:	08008de7 	.word	0x08008de7
 8008d0c:	08008e0d 	.word	0x08008e0d
 8008d10:	08009007 	.word	0x08009007
 8008d14:	08009007 	.word	0x08009007
 8008d18:	08008e33 	.word	0x08008e33
 8008d1c:	08008e59 	.word	0x08008e59
 8008d20:	08008e7f 	.word	0x08008e7f
 8008d24:	08008ea5 	.word	0x08008ea5
 8008d28:	08008efb 	.word	0x08008efb
 8008d2c:	08008f21 	.word	0x08008f21
 8008d30:	08009007 	.word	0x08009007
 8008d34:	08009007 	.word	0x08009007
 8008d38:	08008f47 	.word	0x08008f47
 8008d3c:	08008f77 	.word	0x08008f77
 8008d40:	08008fa7 	.word	0x08008fa7
 8008d44:	08008fd7 	.word	0x08008fd7
				case 0:
					get_base();
 8008d48:	f007 fd40 	bl	80107cc <get_base>
					break;
 8008d4c:	e15b      	b.n	8009006 <v_test+0x44a>
				case 1:
					//----V右45----
					printf("V 45 right .\n");
 8008d4e:	485f      	ldr	r0, [pc, #380]	; (8008ecc <v_test+0x310>)
 8008d50:	f008 fbd6 	bl	8011500 <puts>
					half_sectionA();
 8008d54:	f7fc fe96 	bl	8005a84 <half_sectionA>
					for(int i = 0; i < 1; i++){
 8008d58:	2300      	movs	r3, #0
 8008d5a:	643b      	str	r3, [r7, #64]	; 0x40
 8008d5c:	e004      	b.n	8008d68 <v_test+0x1ac>
						v_R45();
 8008d5e:	f7fe f937 	bl	8006fd0 <v_R45>
					for(int i = 0; i < 1; i++){
 8008d62:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008d64:	3301      	adds	r3, #1
 8008d66:	643b      	str	r3, [r7, #64]	; 0x40
 8008d68:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	ddf7      	ble.n	8008d5e <v_test+0x1a2>
					}
					half_sectionVD();
 8008d6e:	f7fc ff5f 	bl	8005c30 <half_sectionVD>
					break;
 8008d72:	e148      	b.n	8009006 <v_test+0x44a>
				case 2:
					//----V左45----
					printf("V 45 left .\n");
 8008d74:	4856      	ldr	r0, [pc, #344]	; (8008ed0 <v_test+0x314>)
 8008d76:	f008 fbc3 	bl	8011500 <puts>
					half_sectionA();
 8008d7a:	f7fc fe83 	bl	8005a84 <half_sectionA>
					for(int i = 0; i < 1; i++){
 8008d7e:	2300      	movs	r3, #0
 8008d80:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008d82:	e004      	b.n	8008d8e <v_test+0x1d2>
						v_L45();
 8008d84:	f7fe faa8 	bl	80072d8 <v_L45>
					for(int i = 0; i < 1; i++){
 8008d88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d8a:	3301      	adds	r3, #1
 8008d8c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008d8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	ddf7      	ble.n	8008d84 <v_test+0x1c8>
					}
					half_sectionVD();
 8008d94:	f7fc ff4c 	bl	8005c30 <half_sectionVD>
					break;
 8008d98:	e135      	b.n	8009006 <v_test+0x44a>
				case 3:
					//----V右90----
					printf("V 90 right .\n");
 8008d9a:	484e      	ldr	r0, [pc, #312]	; (8008ed4 <v_test+0x318>)
 8008d9c:	f008 fbb0 	bl	8011500 <puts>
					half_sectionVA();
 8008da0:	f7fc fefc 	bl	8005b9c <half_sectionVA>
//					v_R45();
					for(int i = 0; i < 1; i++){
 8008da4:	2300      	movs	r3, #0
 8008da6:	63bb      	str	r3, [r7, #56]	; 0x38
 8008da8:	e004      	b.n	8008db4 <v_test+0x1f8>
						v_R90();
 8008daa:	f7fe fdb3 	bl	8007914 <v_R90>
					for(int i = 0; i < 1; i++){
 8008dae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008db0:	3301      	adds	r3, #1
 8008db2:	63bb      	str	r3, [r7, #56]	; 0x38
 8008db4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	ddf7      	ble.n	8008daa <v_test+0x1ee>
					}
//					v_R45();
					half_sectionVD();
 8008dba:	f7fc ff39 	bl	8005c30 <half_sectionVD>
					break;
 8008dbe:	e122      	b.n	8009006 <v_test+0x44a>
				case 4:
					//----V左90----
					printf("V 90 left .\n");
 8008dc0:	4845      	ldr	r0, [pc, #276]	; (8008ed8 <v_test+0x31c>)
 8008dc2:	f008 fb9d 	bl	8011500 <puts>
					half_sectionVA();
 8008dc6:	f7fc fee9 	bl	8005b9c <half_sectionVA>
//					v_L45();
					for(int i = 0; i < 1; i++){
 8008dca:	2300      	movs	r3, #0
 8008dcc:	637b      	str	r3, [r7, #52]	; 0x34
 8008dce:	e004      	b.n	8008dda <v_test+0x21e>
						v_L90();
 8008dd0:	f7fe fe48 	bl	8007a64 <v_L90>
					for(int i = 0; i < 1; i++){
 8008dd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008dd6:	3301      	adds	r3, #1
 8008dd8:	637b      	str	r3, [r7, #52]	; 0x34
 8008dda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	ddf7      	ble.n	8008dd0 <v_test+0x214>
					}
//					v_L45();
					half_sectionVD();
 8008de0:	f7fc ff26 	bl	8005c30 <half_sectionVD>
					break;
 8008de4:	e10f      	b.n	8009006 <v_test+0x44a>
				case 5:
					//----V右135----
					printf("V 135 right .\n");
 8008de6:	483d      	ldr	r0, [pc, #244]	; (8008edc <v_test+0x320>)
 8008de8:	f008 fb8a 	bl	8011500 <puts>
					half_sectionA();
 8008dec:	f7fc fe4a 	bl	8005a84 <half_sectionA>
//					v_R45();
					for(int i = 0; i < 1; i++){
 8008df0:	2300      	movs	r3, #0
 8008df2:	633b      	str	r3, [r7, #48]	; 0x30
 8008df4:	e004      	b.n	8008e00 <v_test+0x244>
						v_R135();
 8008df6:	f7fe fed7 	bl	8007ba8 <v_R135>
					for(int i = 0; i < 1; i++){
 8008dfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dfc:	3301      	adds	r3, #1
 8008dfe:	633b      	str	r3, [r7, #48]	; 0x30
 8008e00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	ddf7      	ble.n	8008df6 <v_test+0x23a>
					}
//					v_R45();
					half_sectionVD();
 8008e06:	f7fc ff13 	bl	8005c30 <half_sectionVD>
					break;
 8008e0a:	e0fc      	b.n	8009006 <v_test+0x44a>
				case 6:
					//----V左135----
					printf("V 135 left .\n");
 8008e0c:	4834      	ldr	r0, [pc, #208]	; (8008ee0 <v_test+0x324>)
 8008e0e:	f008 fb77 	bl	8011500 <puts>
					half_sectionA();
 8008e12:	f7fc fe37 	bl	8005a84 <half_sectionA>
//					v_L45();
					for(int i = 0; i < 1; i++){
 8008e16:	2300      	movs	r3, #0
 8008e18:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008e1a:	e004      	b.n	8008e26 <v_test+0x26a>
						v_L135();
 8008e1c:	f7ff f84c 	bl	8007eb8 <v_L135>
					for(int i = 0; i < 1; i++){
 8008e20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e22:	3301      	adds	r3, #1
 8008e24:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008e26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	ddf7      	ble.n	8008e1c <v_test+0x260>
					}
//					v_L45();
					half_sectionVD();
 8008e2c:	f7fc ff00 	bl	8005c30 <half_sectionVD>
					break;
 8008e30:	e0e9      	b.n	8009006 <v_test+0x44a>
					break;
				case 8:
					break;
				case 9:
					//----V右45----
					printf("V 45 right .\n");
 8008e32:	4826      	ldr	r0, [pc, #152]	; (8008ecc <v_test+0x310>)
 8008e34:	f008 fb64 	bl	8011500 <puts>
					half_sectionA();
 8008e38:	f7fc fe24 	bl	8005a84 <half_sectionA>
					for(int i = 0; i < 8; i++){
 8008e3c:	2300      	movs	r3, #0
 8008e3e:	62bb      	str	r3, [r7, #40]	; 0x28
 8008e40:	e004      	b.n	8008e4c <v_test+0x290>
						v_R45();
 8008e42:	f7fe f8c5 	bl	8006fd0 <v_R45>
					for(int i = 0; i < 8; i++){
 8008e46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e48:	3301      	adds	r3, #1
 8008e4a:	62bb      	str	r3, [r7, #40]	; 0x28
 8008e4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e4e:	2b07      	cmp	r3, #7
 8008e50:	ddf7      	ble.n	8008e42 <v_test+0x286>
					}
					half_sectionD();
 8008e52:	f7fc fe61 	bl	8005b18 <half_sectionD>
					break;
 8008e56:	e0d6      	b.n	8009006 <v_test+0x44a>
				case 10:
					//----V左45----
					printf("V 45 left .\n");
 8008e58:	481d      	ldr	r0, [pc, #116]	; (8008ed0 <v_test+0x314>)
 8008e5a:	f008 fb51 	bl	8011500 <puts>
					half_sectionA();
 8008e5e:	f7fc fe11 	bl	8005a84 <half_sectionA>
					for(int i = 0; i < 8; i++){
 8008e62:	2300      	movs	r3, #0
 8008e64:	627b      	str	r3, [r7, #36]	; 0x24
 8008e66:	e004      	b.n	8008e72 <v_test+0x2b6>
						v_L45();
 8008e68:	f7fe fa36 	bl	80072d8 <v_L45>
					for(int i = 0; i < 8; i++){
 8008e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e6e:	3301      	adds	r3, #1
 8008e70:	627b      	str	r3, [r7, #36]	; 0x24
 8008e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e74:	2b07      	cmp	r3, #7
 8008e76:	ddf7      	ble.n	8008e68 <v_test+0x2ac>
					}
					half_sectionD();
 8008e78:	f7fc fe4e 	bl	8005b18 <half_sectionD>
					break;
 8008e7c:	e0c3      	b.n	8009006 <v_test+0x44a>
				case 11:
					//----V右90----
					printf("V 90 right .\n");
 8008e7e:	4815      	ldr	r0, [pc, #84]	; (8008ed4 <v_test+0x318>)
 8008e80:	f008 fb3e 	bl	8011500 <puts>
					half_sectionVA();
 8008e84:	f7fc fe8a 	bl	8005b9c <half_sectionVA>
//					v_R45();
					for(int i = 0; i < 8; i++){
 8008e88:	2300      	movs	r3, #0
 8008e8a:	623b      	str	r3, [r7, #32]
 8008e8c:	e004      	b.n	8008e98 <v_test+0x2dc>
						v_R90();
 8008e8e:	f7fe fd41 	bl	8007914 <v_R90>
					for(int i = 0; i < 8; i++){
 8008e92:	6a3b      	ldr	r3, [r7, #32]
 8008e94:	3301      	adds	r3, #1
 8008e96:	623b      	str	r3, [r7, #32]
 8008e98:	6a3b      	ldr	r3, [r7, #32]
 8008e9a:	2b07      	cmp	r3, #7
 8008e9c:	ddf7      	ble.n	8008e8e <v_test+0x2d2>
					}
//					v_R45();
					half_sectionVD();
 8008e9e:	f7fc fec7 	bl	8005c30 <half_sectionVD>
					break;
 8008ea2:	e0b0      	b.n	8009006 <v_test+0x44a>
				case 12:
					//----V左90----
					printf("V 90 left .\n");
 8008ea4:	480c      	ldr	r0, [pc, #48]	; (8008ed8 <v_test+0x31c>)
 8008ea6:	f008 fb2b 	bl	8011500 <puts>
					half_sectionVA();
 8008eaa:	f7fc fe77 	bl	8005b9c <half_sectionVA>
//					v_L45();
					for(int i = 0; i < 8; i++){
 8008eae:	2300      	movs	r3, #0
 8008eb0:	61fb      	str	r3, [r7, #28]
 8008eb2:	e01c      	b.n	8008eee <v_test+0x332>
 8008eb4:	080127a8 	.word	0x080127a8
 8008eb8:	20000aec 	.word	0x20000aec
 8008ebc:	08012654 	.word	0x08012654
 8008ec0:	40020000 	.word	0x40020000
 8008ec4:	20000f68 	.word	0x20000f68
 8008ec8:	20000f64 	.word	0x20000f64
 8008ecc:	080127c0 	.word	0x080127c0
 8008ed0:	080127d0 	.word	0x080127d0
 8008ed4:	080127dc 	.word	0x080127dc
 8008ed8:	080127ec 	.word	0x080127ec
 8008edc:	080127f8 	.word	0x080127f8
 8008ee0:	08012808 	.word	0x08012808
						v_L90();
 8008ee4:	f7fe fdbe 	bl	8007a64 <v_L90>
					for(int i = 0; i < 8; i++){
 8008ee8:	69fb      	ldr	r3, [r7, #28]
 8008eea:	3301      	adds	r3, #1
 8008eec:	61fb      	str	r3, [r7, #28]
 8008eee:	69fb      	ldr	r3, [r7, #28]
 8008ef0:	2b07      	cmp	r3, #7
 8008ef2:	ddf7      	ble.n	8008ee4 <v_test+0x328>
					}
//					v_L45();
					half_sectionVD();
 8008ef4:	f7fc fe9c 	bl	8005c30 <half_sectionVD>
					break;
 8008ef8:	e085      	b.n	8009006 <v_test+0x44a>
				case 13:
					//----V右135----
					printf("V 135 right .\n");
 8008efa:	4845      	ldr	r0, [pc, #276]	; (8009010 <v_test+0x454>)
 8008efc:	f008 fb00 	bl	8011500 <puts>
					half_sectionA();
 8008f00:	f7fc fdc0 	bl	8005a84 <half_sectionA>
//					v_R45();
					for(int i = 0; i < 4; i++){
 8008f04:	2300      	movs	r3, #0
 8008f06:	61bb      	str	r3, [r7, #24]
 8008f08:	e004      	b.n	8008f14 <v_test+0x358>
						v_R135();
 8008f0a:	f7fe fe4d 	bl	8007ba8 <v_R135>
					for(int i = 0; i < 4; i++){
 8008f0e:	69bb      	ldr	r3, [r7, #24]
 8008f10:	3301      	adds	r3, #1
 8008f12:	61bb      	str	r3, [r7, #24]
 8008f14:	69bb      	ldr	r3, [r7, #24]
 8008f16:	2b03      	cmp	r3, #3
 8008f18:	ddf7      	ble.n	8008f0a <v_test+0x34e>
					}
//					v_R45();
					half_sectionD();
 8008f1a:	f7fc fdfd 	bl	8005b18 <half_sectionD>
					break;
 8008f1e:	e072      	b.n	8009006 <v_test+0x44a>
				case 14:
					//----V左135----
					printf("V 135 left .\n");
 8008f20:	483c      	ldr	r0, [pc, #240]	; (8009014 <v_test+0x458>)
 8008f22:	f008 faed 	bl	8011500 <puts>
					half_sectionA();
 8008f26:	f7fc fdad 	bl	8005a84 <half_sectionA>
//					v_L45();
					for(int i = 0; i < 4; i++){
 8008f2a:	2300      	movs	r3, #0
 8008f2c:	617b      	str	r3, [r7, #20]
 8008f2e:	e004      	b.n	8008f3a <v_test+0x37e>
						v_L135();
 8008f30:	f7fe ffc2 	bl	8007eb8 <v_L135>
					for(int i = 0; i < 4; i++){
 8008f34:	697b      	ldr	r3, [r7, #20]
 8008f36:	3301      	adds	r3, #1
 8008f38:	617b      	str	r3, [r7, #20]
 8008f3a:	697b      	ldr	r3, [r7, #20]
 8008f3c:	2b03      	cmp	r3, #3
 8008f3e:	ddf7      	ble.n	8008f30 <v_test+0x374>
					}
//					v_L45();
					half_sectionD();
 8008f40:	f7fc fdea 	bl	8005b18 <half_sectionD>
					break;
 8008f44:	e05f      	b.n	8009006 <v_test+0x44a>
					break;
				case 16:
					break;
				case 17:
					//----V右45D----
					printf("V 45 right .\n");
 8008f46:	4834      	ldr	r0, [pc, #208]	; (8009018 <v_test+0x45c>)
 8008f48:	f008 fada 	bl	8011500 <puts>
					MF2.FLAG.V = 1;
 8008f4c:	4a33      	ldr	r2, [pc, #204]	; (800901c <v_test+0x460>)
 8008f4e:	8813      	ldrh	r3, [r2, #0]
 8008f50:	f043 0308 	orr.w	r3, r3, #8
 8008f54:	8013      	strh	r3, [r2, #0]
					half_sectionVA();
 8008f56:	f7fc fe21 	bl	8005b9c <half_sectionVA>
					for(int i = 0; i < 1; i++){
 8008f5a:	2300      	movs	r3, #0
 8008f5c:	613b      	str	r3, [r7, #16]
 8008f5e:	e004      	b.n	8008f6a <v_test+0x3ae>
//						v_R45D();
						v_R45();
 8008f60:	f7fe f836 	bl	8006fd0 <v_R45>
					for(int i = 0; i < 1; i++){
 8008f64:	693b      	ldr	r3, [r7, #16]
 8008f66:	3301      	adds	r3, #1
 8008f68:	613b      	str	r3, [r7, #16]
 8008f6a:	693b      	ldr	r3, [r7, #16]
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	ddf7      	ble.n	8008f60 <v_test+0x3a4>
					}
					half_sectionD();
 8008f70:	f7fc fdd2 	bl	8005b18 <half_sectionD>
					break;
 8008f74:	e047      	b.n	8009006 <v_test+0x44a>
				case 18:
					//----V左45D----
					printf("V 45 left .\n");
 8008f76:	482a      	ldr	r0, [pc, #168]	; (8009020 <v_test+0x464>)
 8008f78:	f008 fac2 	bl	8011500 <puts>
					MF2.FLAG.V = 1;
 8008f7c:	4a27      	ldr	r2, [pc, #156]	; (800901c <v_test+0x460>)
 8008f7e:	8813      	ldrh	r3, [r2, #0]
 8008f80:	f043 0308 	orr.w	r3, r3, #8
 8008f84:	8013      	strh	r3, [r2, #0]
					half_sectionVA();
 8008f86:	f7fc fe09 	bl	8005b9c <half_sectionVA>
					for(int i = 0; i < 1; i++){
 8008f8a:	2300      	movs	r3, #0
 8008f8c:	60fb      	str	r3, [r7, #12]
 8008f8e:	e004      	b.n	8008f9a <v_test+0x3de>
//						v_L45D();
						v_L45();
 8008f90:	f7fe f9a2 	bl	80072d8 <v_L45>
					for(int i = 0; i < 1; i++){
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	3301      	adds	r3, #1
 8008f98:	60fb      	str	r3, [r7, #12]
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	ddf7      	ble.n	8008f90 <v_test+0x3d4>
					}
					half_sectionD();
 8008fa0:	f7fc fdba 	bl	8005b18 <half_sectionD>
					break;
 8008fa4:	e02f      	b.n	8009006 <v_test+0x44a>
				case 19:
					//----V右135D----
					printf("V 135 right .\n");
 8008fa6:	481a      	ldr	r0, [pc, #104]	; (8009010 <v_test+0x454>)
 8008fa8:	f008 faaa 	bl	8011500 <puts>
					MF2.FLAG.V = 1;
 8008fac:	4a1b      	ldr	r2, [pc, #108]	; (800901c <v_test+0x460>)
 8008fae:	8813      	ldrh	r3, [r2, #0]
 8008fb0:	f043 0308 	orr.w	r3, r3, #8
 8008fb4:	8013      	strh	r3, [r2, #0]
					half_sectionVA();
 8008fb6:	f7fc fdf1 	bl	8005b9c <half_sectionVA>
					for(int i = 0; i < 1; i++){
 8008fba:	2300      	movs	r3, #0
 8008fbc:	60bb      	str	r3, [r7, #8]
 8008fbe:	e004      	b.n	8008fca <v_test+0x40e>
//						v_R135D();
						v_R135();
 8008fc0:	f7fe fdf2 	bl	8007ba8 <v_R135>
					for(int i = 0; i < 1; i++){
 8008fc4:	68bb      	ldr	r3, [r7, #8]
 8008fc6:	3301      	adds	r3, #1
 8008fc8:	60bb      	str	r3, [r7, #8]
 8008fca:	68bb      	ldr	r3, [r7, #8]
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	ddf7      	ble.n	8008fc0 <v_test+0x404>
					}
					half_sectionD();
 8008fd0:	f7fc fda2 	bl	8005b18 <half_sectionD>
					break;
 8008fd4:	e017      	b.n	8009006 <v_test+0x44a>
				case 20:
					//----V左135D----
					printf("V 135 left .\n");
 8008fd6:	480f      	ldr	r0, [pc, #60]	; (8009014 <v_test+0x458>)
 8008fd8:	f008 fa92 	bl	8011500 <puts>
					MF2.FLAG.V = 1;
 8008fdc:	4a0f      	ldr	r2, [pc, #60]	; (800901c <v_test+0x460>)
 8008fde:	8813      	ldrh	r3, [r2, #0]
 8008fe0:	f043 0308 	orr.w	r3, r3, #8
 8008fe4:	8013      	strh	r3, [r2, #0]
					half_sectionVA();
 8008fe6:	f7fc fdd9 	bl	8005b9c <half_sectionVA>
					for(int i = 0; i < 1; i++){
 8008fea:	2300      	movs	r3, #0
 8008fec:	607b      	str	r3, [r7, #4]
 8008fee:	e004      	b.n	8008ffa <v_test+0x43e>
//						v_L135D();
						v_L135();
 8008ff0:	f7fe ff62 	bl	8007eb8 <v_L135>
					for(int i = 0; i < 1; i++){
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	3301      	adds	r3, #1
 8008ff8:	607b      	str	r3, [r7, #4]
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	ddf7      	ble.n	8008ff0 <v_test+0x434>
					}
					half_sectionD();
 8009000:	f7fc fd8a 	bl	8005b18 <half_sectionD>
					break;
 8009004:	bf00      	nop
			}
		full_led_write(RED);
 8009006:	2001      	movs	r0, #1
 8009008:	f007 fc72 	bl	80108f0 <full_led_write>
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 800900c:	e5e1      	b.n	8008bd2 <v_test+0x16>
 800900e:	bf00      	nop
 8009010:	080127f8 	.word	0x080127f8
 8009014:	08012808 	.word	0x08012808
 8009018:	080127c0 	.word	0x080127c0
 800901c:	20000f64 	.word	0x20000f64
 8009020:	080127d0 	.word	0x080127d0

08009024 <pass_test>:
//pass_test
// pass圧縮走行テスト
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void pass_test(void){
 8009024:	b580      	push	{r7, lr}
 8009026:	b082      	sub	sp, #8
 8009028:	af00      	add	r7, sp, #0

	int mode = 0;
 800902a:	2300      	movs	r3, #0
 800902c:	607b      	str	r3, [r7, #4]
	printf("Test pass Run, Mode : %d\n", mode);
 800902e:	6879      	ldr	r1, [r7, #4]
 8009030:	48a2      	ldr	r0, [pc, #648]	; (80092bc <pass_test+0x298>)
 8009032:	f008 f9f1 	bl	8011418 <iprintf>

	while(1){
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	b2db      	uxtb	r3, r3
 800903a:	f003 0301 	and.w	r3, r3, #1
 800903e:	b2d8      	uxtb	r0, r3
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	b2db      	uxtb	r3, r3
 8009044:	f003 0302 	and.w	r3, r3, #2
 8009048:	b2d9      	uxtb	r1, r3
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	b2db      	uxtb	r3, r3
 800904e:	f003 0304 	and.w	r3, r3, #4
 8009052:	b2db      	uxtb	r3, r3
 8009054:	461a      	mov	r2, r3
 8009056:	f007 fc11 	bl	801087c <led_write>
		  if(dist_r >= 20){
 800905a:	4b99      	ldr	r3, [pc, #612]	; (80092c0 <pass_test+0x29c>)
 800905c:	edd3 7a00 	vldr	s15, [r3]
 8009060:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8009064:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009068:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800906c:	db0f      	blt.n	800908e <pass_test+0x6a>
			  mode++;
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	3301      	adds	r3, #1
 8009072:	607b      	str	r3, [r7, #4]
			  dist_r = 0;
 8009074:	4b92      	ldr	r3, [pc, #584]	; (80092c0 <pass_test+0x29c>)
 8009076:	f04f 0200 	mov.w	r2, #0
 800907a:	601a      	str	r2, [r3, #0]
			  if(mode > 7){
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	2b07      	cmp	r3, #7
 8009080:	dd01      	ble.n	8009086 <pass_test+0x62>
				  mode = 0;
 8009082:	2300      	movs	r3, #0
 8009084:	607b      	str	r3, [r7, #4]
			  }
			  printf("Mode : %d\n", mode);
 8009086:	6879      	ldr	r1, [r7, #4]
 8009088:	488e      	ldr	r0, [pc, #568]	; (80092c4 <pass_test+0x2a0>)
 800908a:	f008 f9c5 	bl	8011418 <iprintf>
		  }
		  if(dist_r <= -20){
 800908e:	4b8c      	ldr	r3, [pc, #560]	; (80092c0 <pass_test+0x29c>)
 8009090:	edd3 7a00 	vldr	s15, [r3]
 8009094:	eebb 7a04 	vmov.f32	s14, #180	; 0xc1a00000 -20.0
 8009098:	eef4 7ac7 	vcmpe.f32	s15, s14
 800909c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80090a0:	d80f      	bhi.n	80090c2 <pass_test+0x9e>
			  mode--;
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	3b01      	subs	r3, #1
 80090a6:	607b      	str	r3, [r7, #4]
			  dist_r = 0;
 80090a8:	4b85      	ldr	r3, [pc, #532]	; (80092c0 <pass_test+0x29c>)
 80090aa:	f04f 0200 	mov.w	r2, #0
 80090ae:	601a      	str	r2, [r3, #0]
			  if(mode < 0){
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	da01      	bge.n	80090ba <pass_test+0x96>
				  mode = 7;
 80090b6:	2307      	movs	r3, #7
 80090b8:	607b      	str	r3, [r7, #4]
			  }
			  printf("Mode : %d\n", mode);
 80090ba:	6879      	ldr	r1, [r7, #4]
 80090bc:	4881      	ldr	r0, [pc, #516]	; (80092c4 <pass_test+0x2a0>)
 80090be:	f008 f9ab 	bl	8011418 <iprintf>
		  }
		  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET){
 80090c2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80090c6:	4880      	ldr	r0, [pc, #512]	; (80092c8 <pass_test+0x2a4>)
 80090c8:	f7f9 f904 	bl	80022d4 <HAL_GPIO_ReadPin>
 80090cc:	4603      	mov	r3, r0
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d1b1      	bne.n	8009036 <pass_test+0x12>
			  HAL_Delay(50);
 80090d2:	2032      	movs	r0, #50	; 0x32
 80090d4:	f7f7 ffa2 	bl	800101c <HAL_Delay>
			  while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET);
 80090d8:	bf00      	nop
 80090da:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80090de:	487a      	ldr	r0, [pc, #488]	; (80092c8 <pass_test+0x2a4>)
 80090e0:	f7f9 f8f8 	bl	80022d4 <HAL_GPIO_ReadPin>
 80090e4:	4603      	mov	r3, r0
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d0f7      	beq.n	80090da <pass_test+0xb6>
			  drive_ready();
 80090ea:	f7fb fdc9 	bl	8004c80 <drive_ready>
			  MF2.FLAG.V = 0;
 80090ee:	4a77      	ldr	r2, [pc, #476]	; (80092cc <pass_test+0x2a8>)
 80090f0:	8813      	ldrh	r3, [r2, #0]
 80090f2:	f36f 03c3 	bfc	r3, #3, #1
 80090f6:	8013      	strh	r3, [r2, #0]

			  switch(mode){
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	2b07      	cmp	r3, #7
 80090fc:	d89b      	bhi.n	8009036 <pass_test+0x12>
 80090fe:	a201      	add	r2, pc, #4	; (adr r2, 8009104 <pass_test+0xe0>)
 8009100:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009104:	08009125 	.word	0x08009125
 8009108:	080091ad 	.word	0x080091ad
 800910c:	08009235 	.word	0x08009235
 8009110:	08009301 	.word	0x08009301
 8009114:	08009389 	.word	0x08009389
 8009118:	08009411 	.word	0x08009411
 800911c:	08009499 	.word	0x08009499
 8009120:	08009521 	.word	0x08009521
				case 0:
					//----a一次探索スラローム走行----
					printf("First Run. (Slalom)\n");
 8009124:	486a      	ldr	r0, [pc, #424]	; (80092d0 <pass_test+0x2ac>)
 8009126:	f008 f9eb 	bl	8011500 <puts>

					MF.FLAG.SCND = 0;
 800912a:	4a6a      	ldr	r2, [pc, #424]	; (80092d4 <pass_test+0x2b0>)
 800912c:	8813      	ldrh	r3, [r2, #0]
 800912e:	f36f 1345 	bfc	r3, #5, #1
 8009132:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 8009134:	4a67      	ldr	r2, [pc, #412]	; (80092d4 <pass_test+0x2b0>)
 8009136:	8813      	ldrh	r3, [r2, #0]
 8009138:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800913c:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 0;
 800913e:	4a65      	ldr	r2, [pc, #404]	; (80092d4 <pass_test+0x2b0>)
 8009140:	8813      	ldrh	r3, [r2, #0]
 8009142:	f36f 238a 	bfc	r3, #10, #1
 8009146:	8013      	strh	r3, [r2, #0]
					run_mode = MIDDLE;
 8009148:	4b63      	ldr	r3, [pc, #396]	; (80092d8 <pass_test+0x2b4>)
 800914a:	2202      	movs	r2, #2
 800914c:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800914e:	4b63      	ldr	r3, [pc, #396]	; (80092dc <pass_test+0x2b8>)
 8009150:	2200      	movs	r2, #0
 8009152:	701a      	strb	r2, [r3, #0]
					goal_mode = 1;
 8009154:	4b62      	ldr	r3, [pc, #392]	; (80092e0 <pass_test+0x2bc>)
 8009156:	2201      	movs	r2, #1
 8009158:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 800915a:	4b62      	ldr	r3, [pc, #392]	; (80092e4 <pass_test+0x2c0>)
 800915c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009160:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 800;
 8009162:	4b61      	ldr	r3, [pc, #388]	; (80092e8 <pass_test+0x2c4>)
 8009164:	f44f 7248 	mov.w	r2, #800	; 0x320
 8009168:	801a      	strh	r2, [r3, #0]
					start_mode = 0;
 800916a:	4b5c      	ldr	r3, [pc, #368]	; (80092dc <pass_test+0x2b8>)
 800916c:	2200      	movs	r2, #0
 800916e:	701a      	strb	r2, [r3, #0]
					goal_x = GOAL_X;
 8009170:	4b5e      	ldr	r3, [pc, #376]	; (80092ec <pass_test+0x2c8>)
 8009172:	2201      	movs	r2, #1
 8009174:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 8009176:	4b5e      	ldr	r3, [pc, #376]	; (80092f0 <pass_test+0x2cc>)
 8009178:	2200      	movs	r2, #0
 800917a:	701a      	strb	r2, [r3, #0]

					get_base();
 800917c:	f007 fb26 	bl	80107cc <get_base>

					searchC();
 8009180:	f004 fcba 	bl	800daf8 <searchC>
					HAL_Delay(2000);
 8009184:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8009188:	f7f7 ff48 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800918c:	4b58      	ldr	r3, [pc, #352]	; (80092f0 <pass_test+0x2cc>)
 800918e:	2200      	movs	r2, #0
 8009190:	701a      	strb	r2, [r3, #0]
 8009192:	4b57      	ldr	r3, [pc, #348]	; (80092f0 <pass_test+0x2cc>)
 8009194:	781a      	ldrb	r2, [r3, #0]
 8009196:	4b55      	ldr	r3, [pc, #340]	; (80092ec <pass_test+0x2c8>)
 8009198:	701a      	strb	r2, [r3, #0]
					searchC();
 800919a:	f004 fcad 	bl	800daf8 <searchC>

					goal_x = GOAL_X;
 800919e:	4b53      	ldr	r3, [pc, #332]	; (80092ec <pass_test+0x2c8>)
 80091a0:	2201      	movs	r2, #1
 80091a2:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 80091a4:	4b52      	ldr	r3, [pc, #328]	; (80092f0 <pass_test+0x2cc>)
 80091a6:	2200      	movs	r2, #0
 80091a8:	701a      	strb	r2, [r3, #0]
					break;
 80091aa:	e1fd      	b.n	80095a8 <pass_test+0x584>
				case 1:
					//----a直線と大回り圧縮(adv_posを停止)+半区画ベース----
					printf("pass press 3.\n");
 80091ac:	4851      	ldr	r0, [pc, #324]	; (80092f4 <pass_test+0x2d0>)
 80091ae:	f008 f9a7 	bl	8011500 <puts>
					MF.FLAG.SCND = 1;
 80091b2:	4a48      	ldr	r2, [pc, #288]	; (80092d4 <pass_test+0x2b0>)
 80091b4:	8813      	ldrh	r3, [r2, #0]
 80091b6:	f043 0320 	orr.w	r3, r3, #32
 80091ba:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 80091bc:	4a45      	ldr	r2, [pc, #276]	; (80092d4 <pass_test+0x2b0>)
 80091be:	8813      	ldrh	r3, [r2, #0]
 80091c0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80091c4:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 80091c6:	4a43      	ldr	r2, [pc, #268]	; (80092d4 <pass_test+0x2b0>)
 80091c8:	8813      	ldrh	r3, [r2, #0]
 80091ca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80091ce:	8013      	strh	r3, [r2, #0]
					run_mode = LOW;
 80091d0:	4b41      	ldr	r3, [pc, #260]	; (80092d8 <pass_test+0x2b4>)
 80091d2:	2201      	movs	r2, #1
 80091d4:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 80091d6:	4b41      	ldr	r3, [pc, #260]	; (80092dc <pass_test+0x2b8>)
 80091d8:	2200      	movs	r2, #0
 80091da:	701a      	strb	r2, [r3, #0]
					goal_mode = 1;
 80091dc:	4b40      	ldr	r3, [pc, #256]	; (80092e0 <pass_test+0x2bc>)
 80091de:	2201      	movs	r2, #1
 80091e0:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 80091e2:	4b40      	ldr	r3, [pc, #256]	; (80092e4 <pass_test+0x2c0>)
 80091e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80091e8:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 800;
 80091ea:	4b3f      	ldr	r3, [pc, #252]	; (80092e8 <pass_test+0x2c4>)
 80091ec:	f44f 7248 	mov.w	r2, #800	; 0x320
 80091f0:	801a      	strh	r2, [r3, #0]

					pass_mode = 3;						//a半区画ベースでroute配列生成
 80091f2:	4b41      	ldr	r3, [pc, #260]	; (80092f8 <pass_test+0x2d4>)
 80091f4:	2203      	movs	r2, #3
 80091f6:	701a      	strb	r2, [r3, #0]

					goal_x = GOAL_X;
 80091f8:	4b3c      	ldr	r3, [pc, #240]	; (80092ec <pass_test+0x2c8>)
 80091fa:	2201      	movs	r2, #1
 80091fc:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 80091fe:	4b3c      	ldr	r3, [pc, #240]	; (80092f0 <pass_test+0x2cc>)
 8009200:	2200      	movs	r2, #0
 8009202:	701a      	strb	r2, [r3, #0]

					get_base();
 8009204:	f007 fae2 	bl	80107cc <get_base>

					searchF3();
 8009208:	f004 ffac 	bl	800e164 <searchF3>
					HAL_Delay(2000);
 800920c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8009210:	f7f7 ff04 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 8009214:	4b36      	ldr	r3, [pc, #216]	; (80092f0 <pass_test+0x2cc>)
 8009216:	2200      	movs	r2, #0
 8009218:	701a      	strb	r2, [r3, #0]
 800921a:	4b35      	ldr	r3, [pc, #212]	; (80092f0 <pass_test+0x2cc>)
 800921c:	781a      	ldrb	r2, [r3, #0]
 800921e:	4b33      	ldr	r3, [pc, #204]	; (80092ec <pass_test+0x2c8>)
 8009220:	701a      	strb	r2, [r3, #0]
					searchF3();
 8009222:	f004 ff9f 	bl	800e164 <searchF3>

					goal_x = GOAL_X;
 8009226:	4b31      	ldr	r3, [pc, #196]	; (80092ec <pass_test+0x2c8>)
 8009228:	2201      	movs	r2, #1
 800922a:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800922c:	4b30      	ldr	r3, [pc, #192]	; (80092f0 <pass_test+0x2cc>)
 800922e:	2200      	movs	r2, #0
 8009230:	701a      	strb	r2, [r3, #0]
					break;
 8009232:	e1b9      	b.n	80095a8 <pass_test+0x584>
				case 2:
					//----a直線と大回り圧縮(adv_posを停止)+半区画ベース High Speed----
					printf("pass press 3-2.\n");
 8009234:	4831      	ldr	r0, [pc, #196]	; (80092fc <pass_test+0x2d8>)
 8009236:	f008 f963 	bl	8011500 <puts>
					MF.FLAG.SCND = 1;
 800923a:	4a26      	ldr	r2, [pc, #152]	; (80092d4 <pass_test+0x2b0>)
 800923c:	8813      	ldrh	r3, [r2, #0]
 800923e:	f043 0320 	orr.w	r3, r3, #32
 8009242:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 8009244:	4a23      	ldr	r2, [pc, #140]	; (80092d4 <pass_test+0x2b0>)
 8009246:	8813      	ldrh	r3, [r2, #0]
 8009248:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800924c:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800924e:	4a21      	ldr	r2, [pc, #132]	; (80092d4 <pass_test+0x2b0>)
 8009250:	8813      	ldrh	r3, [r2, #0]
 8009252:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009256:	8013      	strh	r3, [r2, #0]
					run_mode = MIDDLE;
 8009258:	4b1f      	ldr	r3, [pc, #124]	; (80092d8 <pass_test+0x2b4>)
 800925a:	2202      	movs	r2, #2
 800925c:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800925e:	4b1f      	ldr	r3, [pc, #124]	; (80092dc <pass_test+0x2b8>)
 8009260:	2200      	movs	r2, #0
 8009262:	701a      	strb	r2, [r3, #0]
					goal_mode = 1;
 8009264:	4b1e      	ldr	r3, [pc, #120]	; (80092e0 <pass_test+0x2bc>)
 8009266:	2201      	movs	r2, #1
 8009268:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 800926a:	4b1e      	ldr	r3, [pc, #120]	; (80092e4 <pass_test+0x2c0>)
 800926c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009270:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1200;
 8009272:	4b1d      	ldr	r3, [pc, #116]	; (80092e8 <pass_test+0x2c4>)
 8009274:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8009278:	801a      	strh	r2, [r3, #0]

					pass_mode = 3;						//a半区画ベースでroute配列生成
 800927a:	4b1f      	ldr	r3, [pc, #124]	; (80092f8 <pass_test+0x2d4>)
 800927c:	2203      	movs	r2, #3
 800927e:	701a      	strb	r2, [r3, #0]

					goal_x = GOAL_X;
 8009280:	4b1a      	ldr	r3, [pc, #104]	; (80092ec <pass_test+0x2c8>)
 8009282:	2201      	movs	r2, #1
 8009284:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 8009286:	4b1a      	ldr	r3, [pc, #104]	; (80092f0 <pass_test+0x2cc>)
 8009288:	2200      	movs	r2, #0
 800928a:	701a      	strb	r2, [r3, #0]

					get_base();
 800928c:	f007 fa9e 	bl	80107cc <get_base>

					searchF3();
 8009290:	f004 ff68 	bl	800e164 <searchF3>
					HAL_Delay(2000);
 8009294:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8009298:	f7f7 fec0 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800929c:	4b14      	ldr	r3, [pc, #80]	; (80092f0 <pass_test+0x2cc>)
 800929e:	2200      	movs	r2, #0
 80092a0:	701a      	strb	r2, [r3, #0]
 80092a2:	4b13      	ldr	r3, [pc, #76]	; (80092f0 <pass_test+0x2cc>)
 80092a4:	781a      	ldrb	r2, [r3, #0]
 80092a6:	4b11      	ldr	r3, [pc, #68]	; (80092ec <pass_test+0x2c8>)
 80092a8:	701a      	strb	r2, [r3, #0]
					searchF3();
 80092aa:	f004 ff5b 	bl	800e164 <searchF3>

					goal_x = GOAL_X;
 80092ae:	4b0f      	ldr	r3, [pc, #60]	; (80092ec <pass_test+0x2c8>)
 80092b0:	2201      	movs	r2, #1
 80092b2:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 80092b4:	4b0e      	ldr	r3, [pc, #56]	; (80092f0 <pass_test+0x2cc>)
 80092b6:	2200      	movs	r2, #0
 80092b8:	701a      	strb	r2, [r3, #0]
					break;
 80092ba:	e175      	b.n	80095a8 <pass_test+0x584>
 80092bc:	08012818 	.word	0x08012818
 80092c0:	20000aec 	.word	0x20000aec
 80092c4:	08012654 	.word	0x08012654
 80092c8:	40020000 	.word	0x40020000
 80092cc:	20000f64 	.word	0x20000f64
 80092d0:	08012834 	.word	0x08012834
 80092d4:	20000f68 	.word	0x20000f68
 80092d8:	20000456 	.word	0x20000456
 80092dc:	200015c8 	.word	0x200015c8
 80092e0:	20000bb1 	.word	0x20000bb1
 80092e4:	20000454 	.word	0x20000454
 80092e8:	20000f7c 	.word	0x20000f7c
 80092ec:	20000bb0 	.word	0x20000bb0
 80092f0:	20000b4c 	.word	0x20000b4c
 80092f4:	08012848 	.word	0x08012848
 80092f8:	20000457 	.word	0x20000457
 80092fc:	08012858 	.word	0x08012858
				case 3:
					//----a直線と大回り圧縮(adv_posを停止)+半区画ベース High Speed----
					printf("pass press 3-2.\n");
 8009300:	48aa      	ldr	r0, [pc, #680]	; (80095ac <pass_test+0x588>)
 8009302:	f008 f8fd 	bl	8011500 <puts>
					MF.FLAG.SCND = 1;
 8009306:	4aaa      	ldr	r2, [pc, #680]	; (80095b0 <pass_test+0x58c>)
 8009308:	8813      	ldrh	r3, [r2, #0]
 800930a:	f043 0320 	orr.w	r3, r3, #32
 800930e:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 8009310:	4aa7      	ldr	r2, [pc, #668]	; (80095b0 <pass_test+0x58c>)
 8009312:	8813      	ldrh	r3, [r2, #0]
 8009314:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009318:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800931a:	4aa5      	ldr	r2, [pc, #660]	; (80095b0 <pass_test+0x58c>)
 800931c:	8813      	ldrh	r3, [r2, #0]
 800931e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009322:	8013      	strh	r3, [r2, #0]
					run_mode = HIGH;
 8009324:	4ba3      	ldr	r3, [pc, #652]	; (80095b4 <pass_test+0x590>)
 8009326:	2203      	movs	r2, #3
 8009328:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800932a:	4ba3      	ldr	r3, [pc, #652]	; (80095b8 <pass_test+0x594>)
 800932c:	2200      	movs	r2, #0
 800932e:	701a      	strb	r2, [r3, #0]
					goal_mode = 1;
 8009330:	4ba2      	ldr	r3, [pc, #648]	; (80095bc <pass_test+0x598>)
 8009332:	2201      	movs	r2, #1
 8009334:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 8009336:	4ba2      	ldr	r3, [pc, #648]	; (80095c0 <pass_test+0x59c>)
 8009338:	f241 3288 	movw	r2, #5000	; 0x1388
 800933c:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1600;
 800933e:	4ba1      	ldr	r3, [pc, #644]	; (80095c4 <pass_test+0x5a0>)
 8009340:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8009344:	801a      	strh	r2, [r3, #0]

					pass_mode = 3;						//a半区画ベースでroute配列生成
 8009346:	4ba0      	ldr	r3, [pc, #640]	; (80095c8 <pass_test+0x5a4>)
 8009348:	2203      	movs	r2, #3
 800934a:	701a      	strb	r2, [r3, #0]

					goal_x = GOAL_X;
 800934c:	4b9f      	ldr	r3, [pc, #636]	; (80095cc <pass_test+0x5a8>)
 800934e:	2201      	movs	r2, #1
 8009350:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 8009352:	4b9f      	ldr	r3, [pc, #636]	; (80095d0 <pass_test+0x5ac>)
 8009354:	2200      	movs	r2, #0
 8009356:	701a      	strb	r2, [r3, #0]

					get_base();
 8009358:	f007 fa38 	bl	80107cc <get_base>

					searchF3();
 800935c:	f004 ff02 	bl	800e164 <searchF3>
					HAL_Delay(2000);
 8009360:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8009364:	f7f7 fe5a 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 8009368:	4b99      	ldr	r3, [pc, #612]	; (80095d0 <pass_test+0x5ac>)
 800936a:	2200      	movs	r2, #0
 800936c:	701a      	strb	r2, [r3, #0]
 800936e:	4b98      	ldr	r3, [pc, #608]	; (80095d0 <pass_test+0x5ac>)
 8009370:	781a      	ldrb	r2, [r3, #0]
 8009372:	4b96      	ldr	r3, [pc, #600]	; (80095cc <pass_test+0x5a8>)
 8009374:	701a      	strb	r2, [r3, #0]
					searchF3();
 8009376:	f004 fef5 	bl	800e164 <searchF3>

					goal_x = GOAL_X;
 800937a:	4b94      	ldr	r3, [pc, #592]	; (80095cc <pass_test+0x5a8>)
 800937c:	2201      	movs	r2, #1
 800937e:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 8009380:	4b93      	ldr	r3, [pc, #588]	; (80095d0 <pass_test+0x5ac>)
 8009382:	2200      	movs	r2, #0
 8009384:	701a      	strb	r2, [r3, #0]
					break;
 8009386:	e10f      	b.n	80095a8 <pass_test+0x584>
				case 4:
					//----a直線と大回り圧縮と斜めｰｰｰｰ
					printf("pass press 4.\n");
 8009388:	4892      	ldr	r0, [pc, #584]	; (80095d4 <pass_test+0x5b0>)
 800938a:	f008 f8b9 	bl	8011500 <puts>
					MF.FLAG.SCND = 1;
 800938e:	4a88      	ldr	r2, [pc, #544]	; (80095b0 <pass_test+0x58c>)
 8009390:	8813      	ldrh	r3, [r2, #0]
 8009392:	f043 0320 	orr.w	r3, r3, #32
 8009396:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 8009398:	4a85      	ldr	r2, [pc, #532]	; (80095b0 <pass_test+0x58c>)
 800939a:	8813      	ldrh	r3, [r2, #0]
 800939c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80093a0:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 80093a2:	4a83      	ldr	r2, [pc, #524]	; (80095b0 <pass_test+0x58c>)
 80093a4:	8813      	ldrh	r3, [r2, #0]
 80093a6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80093aa:	8013      	strh	r3, [r2, #0]
					run_mode = LOW;
 80093ac:	4b81      	ldr	r3, [pc, #516]	; (80095b4 <pass_test+0x590>)
 80093ae:	2201      	movs	r2, #1
 80093b0:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 80093b2:	4b81      	ldr	r3, [pc, #516]	; (80095b8 <pass_test+0x594>)
 80093b4:	2200      	movs	r2, #0
 80093b6:	701a      	strb	r2, [r3, #0]
					goal_mode = 1;
 80093b8:	4b80      	ldr	r3, [pc, #512]	; (80095bc <pass_test+0x598>)
 80093ba:	2201      	movs	r2, #1
 80093bc:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 80093be:	4b80      	ldr	r3, [pc, #512]	; (80095c0 <pass_test+0x59c>)
 80093c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80093c4:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 800;
 80093c6:	4b7f      	ldr	r3, [pc, #508]	; (80095c4 <pass_test+0x5a0>)
 80093c8:	f44f 7248 	mov.w	r2, #800	; 0x320
 80093cc:	801a      	strh	r2, [r3, #0]

					pass_mode = 4;
 80093ce:	4b7e      	ldr	r3, [pc, #504]	; (80095c8 <pass_test+0x5a4>)
 80093d0:	2204      	movs	r2, #4
 80093d2:	701a      	strb	r2, [r3, #0]

					goal_x = GOAL_X;
 80093d4:	4b7d      	ldr	r3, [pc, #500]	; (80095cc <pass_test+0x5a8>)
 80093d6:	2201      	movs	r2, #1
 80093d8:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 80093da:	4b7d      	ldr	r3, [pc, #500]	; (80095d0 <pass_test+0x5ac>)
 80093dc:	2200      	movs	r2, #0
 80093de:	701a      	strb	r2, [r3, #0]

					get_base();
 80093e0:	f007 f9f4 	bl	80107cc <get_base>

					searchF4();
 80093e4:	f004 ff94 	bl	800e310 <searchF4>
					HAL_Delay(2000);
 80093e8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80093ec:	f7f7 fe16 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 80093f0:	4b77      	ldr	r3, [pc, #476]	; (80095d0 <pass_test+0x5ac>)
 80093f2:	2200      	movs	r2, #0
 80093f4:	701a      	strb	r2, [r3, #0]
 80093f6:	4b76      	ldr	r3, [pc, #472]	; (80095d0 <pass_test+0x5ac>)
 80093f8:	781a      	ldrb	r2, [r3, #0]
 80093fa:	4b74      	ldr	r3, [pc, #464]	; (80095cc <pass_test+0x5a8>)
 80093fc:	701a      	strb	r2, [r3, #0]
					searchF4();
 80093fe:	f004 ff87 	bl	800e310 <searchF4>

					goal_x = GOAL_X;
 8009402:	4b72      	ldr	r3, [pc, #456]	; (80095cc <pass_test+0x5a8>)
 8009404:	2201      	movs	r2, #1
 8009406:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 8009408:	4b71      	ldr	r3, [pc, #452]	; (80095d0 <pass_test+0x5ac>)
 800940a:	2200      	movs	r2, #0
 800940c:	701a      	strb	r2, [r3, #0]
					break;
 800940e:	e0cb      	b.n	80095a8 <pass_test+0x584>
				case 5:
					//----a直線と大回り圧縮と斜め High Speedｰｰｰｰ
					printf("pass press 4.\n");
 8009410:	4870      	ldr	r0, [pc, #448]	; (80095d4 <pass_test+0x5b0>)
 8009412:	f008 f875 	bl	8011500 <puts>
					MF.FLAG.SCND = 1;
 8009416:	4a66      	ldr	r2, [pc, #408]	; (80095b0 <pass_test+0x58c>)
 8009418:	8813      	ldrh	r3, [r2, #0]
 800941a:	f043 0320 	orr.w	r3, r3, #32
 800941e:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 8009420:	4a63      	ldr	r2, [pc, #396]	; (80095b0 <pass_test+0x58c>)
 8009422:	8813      	ldrh	r3, [r2, #0]
 8009424:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009428:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800942a:	4a61      	ldr	r2, [pc, #388]	; (80095b0 <pass_test+0x58c>)
 800942c:	8813      	ldrh	r3, [r2, #0]
 800942e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009432:	8013      	strh	r3, [r2, #0]
					run_mode = MIDDLE;
 8009434:	4b5f      	ldr	r3, [pc, #380]	; (80095b4 <pass_test+0x590>)
 8009436:	2202      	movs	r2, #2
 8009438:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800943a:	4b5f      	ldr	r3, [pc, #380]	; (80095b8 <pass_test+0x594>)
 800943c:	2200      	movs	r2, #0
 800943e:	701a      	strb	r2, [r3, #0]
					goal_mode = 1;
 8009440:	4b5e      	ldr	r3, [pc, #376]	; (80095bc <pass_test+0x598>)
 8009442:	2201      	movs	r2, #1
 8009444:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 8009446:	4b5e      	ldr	r3, [pc, #376]	; (80095c0 <pass_test+0x59c>)
 8009448:	f241 3288 	movw	r2, #5000	; 0x1388
 800944c:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1200;
 800944e:	4b5d      	ldr	r3, [pc, #372]	; (80095c4 <pass_test+0x5a0>)
 8009450:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8009454:	801a      	strh	r2, [r3, #0]

					pass_mode = 4;
 8009456:	4b5c      	ldr	r3, [pc, #368]	; (80095c8 <pass_test+0x5a4>)
 8009458:	2204      	movs	r2, #4
 800945a:	701a      	strb	r2, [r3, #0]

					goal_x = GOAL_X;
 800945c:	4b5b      	ldr	r3, [pc, #364]	; (80095cc <pass_test+0x5a8>)
 800945e:	2201      	movs	r2, #1
 8009460:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 8009462:	4b5b      	ldr	r3, [pc, #364]	; (80095d0 <pass_test+0x5ac>)
 8009464:	2200      	movs	r2, #0
 8009466:	701a      	strb	r2, [r3, #0]

					get_base();
 8009468:	f007 f9b0 	bl	80107cc <get_base>

					searchF4();
 800946c:	f004 ff50 	bl	800e310 <searchF4>
					HAL_Delay(2000);
 8009470:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8009474:	f7f7 fdd2 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 8009478:	4b55      	ldr	r3, [pc, #340]	; (80095d0 <pass_test+0x5ac>)
 800947a:	2200      	movs	r2, #0
 800947c:	701a      	strb	r2, [r3, #0]
 800947e:	4b54      	ldr	r3, [pc, #336]	; (80095d0 <pass_test+0x5ac>)
 8009480:	781a      	ldrb	r2, [r3, #0]
 8009482:	4b52      	ldr	r3, [pc, #328]	; (80095cc <pass_test+0x5a8>)
 8009484:	701a      	strb	r2, [r3, #0]
					searchF4();
 8009486:	f004 ff43 	bl	800e310 <searchF4>

					goal_x = GOAL_X;
 800948a:	4b50      	ldr	r3, [pc, #320]	; (80095cc <pass_test+0x5a8>)
 800948c:	2201      	movs	r2, #1
 800948e:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 8009490:	4b4f      	ldr	r3, [pc, #316]	; (80095d0 <pass_test+0x5ac>)
 8009492:	2200      	movs	r2, #0
 8009494:	701a      	strb	r2, [r3, #0]
					break;
 8009496:	e087      	b.n	80095a8 <pass_test+0x584>
				case 6:
					//----a直線と大回り圧縮と斜め High Speedｰｰｰｰ
					printf("pass press 4.\n");
 8009498:	484e      	ldr	r0, [pc, #312]	; (80095d4 <pass_test+0x5b0>)
 800949a:	f008 f831 	bl	8011500 <puts>
					MF.FLAG.SCND = 1;
 800949e:	4a44      	ldr	r2, [pc, #272]	; (80095b0 <pass_test+0x58c>)
 80094a0:	8813      	ldrh	r3, [r2, #0]
 80094a2:	f043 0320 	orr.w	r3, r3, #32
 80094a6:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 80094a8:	4a41      	ldr	r2, [pc, #260]	; (80095b0 <pass_test+0x58c>)
 80094aa:	8813      	ldrh	r3, [r2, #0]
 80094ac:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80094b0:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 80094b2:	4a3f      	ldr	r2, [pc, #252]	; (80095b0 <pass_test+0x58c>)
 80094b4:	8813      	ldrh	r3, [r2, #0]
 80094b6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80094ba:	8013      	strh	r3, [r2, #0]
					run_mode = HIGH;
 80094bc:	4b3d      	ldr	r3, [pc, #244]	; (80095b4 <pass_test+0x590>)
 80094be:	2203      	movs	r2, #3
 80094c0:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 80094c2:	4b3d      	ldr	r3, [pc, #244]	; (80095b8 <pass_test+0x594>)
 80094c4:	2200      	movs	r2, #0
 80094c6:	701a      	strb	r2, [r3, #0]
					goal_mode = 1;
 80094c8:	4b3c      	ldr	r3, [pc, #240]	; (80095bc <pass_test+0x598>)
 80094ca:	2201      	movs	r2, #1
 80094cc:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 80094ce:	4b3c      	ldr	r3, [pc, #240]	; (80095c0 <pass_test+0x59c>)
 80094d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80094d4:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1600;
 80094d6:	4b3b      	ldr	r3, [pc, #236]	; (80095c4 <pass_test+0x5a0>)
 80094d8:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 80094dc:	801a      	strh	r2, [r3, #0]

					pass_mode = 4;
 80094de:	4b3a      	ldr	r3, [pc, #232]	; (80095c8 <pass_test+0x5a4>)
 80094e0:	2204      	movs	r2, #4
 80094e2:	701a      	strb	r2, [r3, #0]

					goal_x = GOAL_X;
 80094e4:	4b39      	ldr	r3, [pc, #228]	; (80095cc <pass_test+0x5a8>)
 80094e6:	2201      	movs	r2, #1
 80094e8:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 80094ea:	4b39      	ldr	r3, [pc, #228]	; (80095d0 <pass_test+0x5ac>)
 80094ec:	2200      	movs	r2, #0
 80094ee:	701a      	strb	r2, [r3, #0]

					get_base();
 80094f0:	f007 f96c 	bl	80107cc <get_base>

					searchF4();
 80094f4:	f004 ff0c 	bl	800e310 <searchF4>
					HAL_Delay(2000);
 80094f8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80094fc:	f7f7 fd8e 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 8009500:	4b33      	ldr	r3, [pc, #204]	; (80095d0 <pass_test+0x5ac>)
 8009502:	2200      	movs	r2, #0
 8009504:	701a      	strb	r2, [r3, #0]
 8009506:	4b32      	ldr	r3, [pc, #200]	; (80095d0 <pass_test+0x5ac>)
 8009508:	781a      	ldrb	r2, [r3, #0]
 800950a:	4b30      	ldr	r3, [pc, #192]	; (80095cc <pass_test+0x5a8>)
 800950c:	701a      	strb	r2, [r3, #0]
					searchF4();
 800950e:	f004 feff 	bl	800e310 <searchF4>

					goal_x = GOAL_X;
 8009512:	4b2e      	ldr	r3, [pc, #184]	; (80095cc <pass_test+0x5a8>)
 8009514:	2201      	movs	r2, #1
 8009516:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 8009518:	4b2d      	ldr	r3, [pc, #180]	; (80095d0 <pass_test+0x5ac>)
 800951a:	2200      	movs	r2, #0
 800951c:	701a      	strb	r2, [r3, #0]
					break;
 800951e:	e043      	b.n	80095a8 <pass_test+0x584>
				case 7:
					//----a直線と大回り圧縮(adv_posを停止)+半区画ベース High Speed----
					printf("pass press 3-4.\n");
 8009520:	482d      	ldr	r0, [pc, #180]	; (80095d8 <pass_test+0x5b4>)
 8009522:	f007 ffed 	bl	8011500 <puts>
					MF.FLAG.SCND = 1;
 8009526:	4a22      	ldr	r2, [pc, #136]	; (80095b0 <pass_test+0x58c>)
 8009528:	8813      	ldrh	r3, [r2, #0]
 800952a:	f043 0320 	orr.w	r3, r3, #32
 800952e:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 8009530:	4a1f      	ldr	r2, [pc, #124]	; (80095b0 <pass_test+0x58c>)
 8009532:	8813      	ldrh	r3, [r2, #0]
 8009534:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009538:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800953a:	4a1d      	ldr	r2, [pc, #116]	; (80095b0 <pass_test+0x58c>)
 800953c:	8813      	ldrh	r3, [r2, #0]
 800953e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009542:	8013      	strh	r3, [r2, #0]
					run_mode = HIGH_HIGH;
 8009544:	4b1b      	ldr	r3, [pc, #108]	; (80095b4 <pass_test+0x590>)
 8009546:	2204      	movs	r2, #4
 8009548:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800954a:	4b1b      	ldr	r3, [pc, #108]	; (80095b8 <pass_test+0x594>)
 800954c:	2200      	movs	r2, #0
 800954e:	701a      	strb	r2, [r3, #0]
					goal_mode = 1;
 8009550:	4b1a      	ldr	r3, [pc, #104]	; (80095bc <pass_test+0x598>)
 8009552:	2201      	movs	r2, #1
 8009554:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 8009556:	4b1a      	ldr	r3, [pc, #104]	; (80095c0 <pass_test+0x59c>)
 8009558:	f241 3288 	movw	r2, #5000	; 0x1388
 800955c:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 2000;
 800955e:	4b19      	ldr	r3, [pc, #100]	; (80095c4 <pass_test+0x5a0>)
 8009560:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8009564:	801a      	strh	r2, [r3, #0]

					pass_mode = 3;						//a半区画ベースでroute配列生成
 8009566:	4b18      	ldr	r3, [pc, #96]	; (80095c8 <pass_test+0x5a4>)
 8009568:	2203      	movs	r2, #3
 800956a:	701a      	strb	r2, [r3, #0]

					goal_x = GOAL_X;
 800956c:	4b17      	ldr	r3, [pc, #92]	; (80095cc <pass_test+0x5a8>)
 800956e:	2201      	movs	r2, #1
 8009570:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 8009572:	4b17      	ldr	r3, [pc, #92]	; (80095d0 <pass_test+0x5ac>)
 8009574:	2200      	movs	r2, #0
 8009576:	701a      	strb	r2, [r3, #0]

					get_base();
 8009578:	f007 f928 	bl	80107cc <get_base>

					searchF3();
 800957c:	f004 fdf2 	bl	800e164 <searchF3>
					HAL_Delay(2000);
 8009580:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8009584:	f7f7 fd4a 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 8009588:	4b11      	ldr	r3, [pc, #68]	; (80095d0 <pass_test+0x5ac>)
 800958a:	2200      	movs	r2, #0
 800958c:	701a      	strb	r2, [r3, #0]
 800958e:	4b10      	ldr	r3, [pc, #64]	; (80095d0 <pass_test+0x5ac>)
 8009590:	781a      	ldrb	r2, [r3, #0]
 8009592:	4b0e      	ldr	r3, [pc, #56]	; (80095cc <pass_test+0x5a8>)
 8009594:	701a      	strb	r2, [r3, #0]
					searchF3();
 8009596:	f004 fde5 	bl	800e164 <searchF3>

					goal_x = GOAL_X;
 800959a:	4b0c      	ldr	r3, [pc, #48]	; (80095cc <pass_test+0x5a8>)
 800959c:	2201      	movs	r2, #1
 800959e:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 80095a0:	4b0b      	ldr	r3, [pc, #44]	; (80095d0 <pass_test+0x5ac>)
 80095a2:	2200      	movs	r2, #0
 80095a4:	701a      	strb	r2, [r3, #0]
					break;
 80095a6:	bf00      	nop
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 80095a8:	e545      	b.n	8009036 <pass_test+0x12>
 80095aa:	bf00      	nop
 80095ac:	08012858 	.word	0x08012858
 80095b0:	20000f68 	.word	0x20000f68
 80095b4:	20000456 	.word	0x20000456
 80095b8:	200015c8 	.word	0x200015c8
 80095bc:	20000bb1 	.word	0x20000bb1
 80095c0:	20000454 	.word	0x20000454
 80095c4:	20000f7c 	.word	0x20000f7c
 80095c8:	20000457 	.word	0x20000457
 80095cc:	20000bb0 	.word	0x20000bb0
 80095d0:	20000b4c 	.word	0x20000b4c
 80095d4:	08012868 	.word	0x08012868
 80095d8:	08012878 	.word	0x08012878

080095dc <goal_test>:
//goal_test
// a複数マスgoal走行テスト
// a引数：なし
// a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void goal_test(void){
 80095dc:	b580      	push	{r7, lr}
 80095de:	b082      	sub	sp, #8
 80095e0:	af00      	add	r7, sp, #0

	int mode = 0;
 80095e2:	2300      	movs	r3, #0
 80095e4:	607b      	str	r3, [r7, #4]
	printf("Test goal Run, Mode : %d\n", mode);
 80095e6:	6879      	ldr	r1, [r7, #4]
 80095e8:	48a2      	ldr	r0, [pc, #648]	; (8009874 <goal_test+0x298>)
 80095ea:	f007 ff15 	bl	8011418 <iprintf>

	while(1){
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	b2db      	uxtb	r3, r3
 80095f2:	f003 0301 	and.w	r3, r3, #1
 80095f6:	b2d8      	uxtb	r0, r3
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	b2db      	uxtb	r3, r3
 80095fc:	f003 0302 	and.w	r3, r3, #2
 8009600:	b2d9      	uxtb	r1, r3
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	b2db      	uxtb	r3, r3
 8009606:	f003 0304 	and.w	r3, r3, #4
 800960a:	b2db      	uxtb	r3, r3
 800960c:	461a      	mov	r2, r3
 800960e:	f007 f935 	bl	801087c <led_write>
		  if(dist_r >= 20){
 8009612:	4b99      	ldr	r3, [pc, #612]	; (8009878 <goal_test+0x29c>)
 8009614:	edd3 7a00 	vldr	s15, [r3]
 8009618:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 800961c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009620:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009624:	db0f      	blt.n	8009646 <goal_test+0x6a>
			  mode++;
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	3301      	adds	r3, #1
 800962a:	607b      	str	r3, [r7, #4]
			  dist_r = 0;
 800962c:	4b92      	ldr	r3, [pc, #584]	; (8009878 <goal_test+0x29c>)
 800962e:	f04f 0200 	mov.w	r2, #0
 8009632:	601a      	str	r2, [r3, #0]
			  if(mode > 7){
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	2b07      	cmp	r3, #7
 8009638:	dd01      	ble.n	800963e <goal_test+0x62>
				  mode = 0;
 800963a:	2300      	movs	r3, #0
 800963c:	607b      	str	r3, [r7, #4]
			  }
			  printf("Mode : %d\n", mode);
 800963e:	6879      	ldr	r1, [r7, #4]
 8009640:	488e      	ldr	r0, [pc, #568]	; (800987c <goal_test+0x2a0>)
 8009642:	f007 fee9 	bl	8011418 <iprintf>
		  }
		  if(dist_r <= -20){
 8009646:	4b8c      	ldr	r3, [pc, #560]	; (8009878 <goal_test+0x29c>)
 8009648:	edd3 7a00 	vldr	s15, [r3]
 800964c:	eebb 7a04 	vmov.f32	s14, #180	; 0xc1a00000 -20.0
 8009650:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009654:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009658:	d80f      	bhi.n	800967a <goal_test+0x9e>
			  mode--;
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	3b01      	subs	r3, #1
 800965e:	607b      	str	r3, [r7, #4]
			  dist_r = 0;
 8009660:	4b85      	ldr	r3, [pc, #532]	; (8009878 <goal_test+0x29c>)
 8009662:	f04f 0200 	mov.w	r2, #0
 8009666:	601a      	str	r2, [r3, #0]
			  if(mode < 0){
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	2b00      	cmp	r3, #0
 800966c:	da01      	bge.n	8009672 <goal_test+0x96>
				  mode = 7;
 800966e:	2307      	movs	r3, #7
 8009670:	607b      	str	r3, [r7, #4]
			  }
			  printf("Mode : %d\n", mode);
 8009672:	6879      	ldr	r1, [r7, #4]
 8009674:	4881      	ldr	r0, [pc, #516]	; (800987c <goal_test+0x2a0>)
 8009676:	f007 fecf 	bl	8011418 <iprintf>
		  }
		  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET){
 800967a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800967e:	4880      	ldr	r0, [pc, #512]	; (8009880 <goal_test+0x2a4>)
 8009680:	f7f8 fe28 	bl	80022d4 <HAL_GPIO_ReadPin>
 8009684:	4603      	mov	r3, r0
 8009686:	2b00      	cmp	r3, #0
 8009688:	d1b1      	bne.n	80095ee <goal_test+0x12>
			  HAL_Delay(50);
 800968a:	2032      	movs	r0, #50	; 0x32
 800968c:	f7f7 fcc6 	bl	800101c <HAL_Delay>
			  while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET);
 8009690:	bf00      	nop
 8009692:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8009696:	487a      	ldr	r0, [pc, #488]	; (8009880 <goal_test+0x2a4>)
 8009698:	f7f8 fe1c 	bl	80022d4 <HAL_GPIO_ReadPin>
 800969c:	4603      	mov	r3, r0
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d0f7      	beq.n	8009692 <goal_test+0xb6>
			  drive_ready();
 80096a2:	f7fb faed 	bl	8004c80 <drive_ready>
			  MF2.FLAG.V = 0;
 80096a6:	4a77      	ldr	r2, [pc, #476]	; (8009884 <goal_test+0x2a8>)
 80096a8:	8813      	ldrh	r3, [r2, #0]
 80096aa:	f36f 03c3 	bfc	r3, #3, #1
 80096ae:	8013      	strh	r3, [r2, #0]

			  switch(mode){
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	2b07      	cmp	r3, #7
 80096b4:	d89b      	bhi.n	80095ee <goal_test+0x12>
 80096b6:	a201      	add	r2, pc, #4	; (adr r2, 80096bc <goal_test+0xe0>)
 80096b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096bc:	080096dd 	.word	0x080096dd
 80096c0:	08009765 	.word	0x08009765
 80096c4:	080097ed 	.word	0x080097ed
 80096c8:	080098b9 	.word	0x080098b9
 80096cc:	08009941 	.word	0x08009941
 80096d0:	080099c9 	.word	0x080099c9
 80096d4:	08009a51 	.word	0x08009a51
 80096d8:	08009ad9 	.word	0x08009ad9
				case 0:
					//----a一次探索スラローム走行----
					printf("First Run. (Slalom)\n");
 80096dc:	486a      	ldr	r0, [pc, #424]	; (8009888 <goal_test+0x2ac>)
 80096de:	f007 ff0f 	bl	8011500 <puts>

					MF.FLAG.SCND = 0;
 80096e2:	4a6a      	ldr	r2, [pc, #424]	; (800988c <goal_test+0x2b0>)
 80096e4:	8813      	ldrh	r3, [r2, #0]
 80096e6:	f36f 1345 	bfc	r3, #5, #1
 80096ea:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 80096ec:	4a67      	ldr	r2, [pc, #412]	; (800988c <goal_test+0x2b0>)
 80096ee:	8813      	ldrh	r3, [r2, #0]
 80096f0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80096f4:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 0;
 80096f6:	4a65      	ldr	r2, [pc, #404]	; (800988c <goal_test+0x2b0>)
 80096f8:	8813      	ldrh	r3, [r2, #0]
 80096fa:	f36f 238a 	bfc	r3, #10, #1
 80096fe:	8013      	strh	r3, [r2, #0]
					run_mode = MIDDLE;
 8009700:	4b63      	ldr	r3, [pc, #396]	; (8009890 <goal_test+0x2b4>)
 8009702:	2202      	movs	r2, #2
 8009704:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 8009706:	4b63      	ldr	r3, [pc, #396]	; (8009894 <goal_test+0x2b8>)
 8009708:	2200      	movs	r2, #0
 800970a:	701a      	strb	r2, [r3, #0]
					goal_mode = 1;
 800970c:	4b62      	ldr	r3, [pc, #392]	; (8009898 <goal_test+0x2bc>)
 800970e:	2201      	movs	r2, #1
 8009710:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 8009712:	4b62      	ldr	r3, [pc, #392]	; (800989c <goal_test+0x2c0>)
 8009714:	f241 3288 	movw	r2, #5000	; 0x1388
 8009718:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 800;
 800971a:	4b61      	ldr	r3, [pc, #388]	; (80098a0 <goal_test+0x2c4>)
 800971c:	f44f 7248 	mov.w	r2, #800	; 0x320
 8009720:	801a      	strh	r2, [r3, #0]
					start_mode = 0;
 8009722:	4b5c      	ldr	r3, [pc, #368]	; (8009894 <goal_test+0x2b8>)
 8009724:	2200      	movs	r2, #0
 8009726:	701a      	strb	r2, [r3, #0]
					goal_x = GOAL_X;
 8009728:	4b5e      	ldr	r3, [pc, #376]	; (80098a4 <goal_test+0x2c8>)
 800972a:	2201      	movs	r2, #1
 800972c:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800972e:	4b5e      	ldr	r3, [pc, #376]	; (80098a8 <goal_test+0x2cc>)
 8009730:	2200      	movs	r2, #0
 8009732:	701a      	strb	r2, [r3, #0]

					get_base();
 8009734:	f007 f84a 	bl	80107cc <get_base>

					searchC();
 8009738:	f004 f9de 	bl	800daf8 <searchC>
					HAL_Delay(2000);
 800973c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8009740:	f7f7 fc6c 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 8009744:	4b58      	ldr	r3, [pc, #352]	; (80098a8 <goal_test+0x2cc>)
 8009746:	2200      	movs	r2, #0
 8009748:	701a      	strb	r2, [r3, #0]
 800974a:	4b57      	ldr	r3, [pc, #348]	; (80098a8 <goal_test+0x2cc>)
 800974c:	781a      	ldrb	r2, [r3, #0]
 800974e:	4b55      	ldr	r3, [pc, #340]	; (80098a4 <goal_test+0x2c8>)
 8009750:	701a      	strb	r2, [r3, #0]
					searchC();
 8009752:	f004 f9d1 	bl	800daf8 <searchC>

					goal_x = GOAL_X;
 8009756:	4b53      	ldr	r3, [pc, #332]	; (80098a4 <goal_test+0x2c8>)
 8009758:	2201      	movs	r2, #1
 800975a:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800975c:	4b52      	ldr	r3, [pc, #328]	; (80098a8 <goal_test+0x2cc>)
 800975e:	2200      	movs	r2, #0
 8009760:	701a      	strb	r2, [r3, #0]
					break;
 8009762:	e1fd      	b.n	8009b60 <goal_test+0x584>
				case 1:
					//----a一次探索スラローム走行 4マスgoal----
					printf("First Run. (4 goal)\n");
 8009764:	4851      	ldr	r0, [pc, #324]	; (80098ac <goal_test+0x2d0>)
 8009766:	f007 fecb 	bl	8011500 <puts>

					MF.FLAG.SCND = 0;
 800976a:	4a48      	ldr	r2, [pc, #288]	; (800988c <goal_test+0x2b0>)
 800976c:	8813      	ldrh	r3, [r2, #0]
 800976e:	f36f 1345 	bfc	r3, #5, #1
 8009772:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 8009774:	4a45      	ldr	r2, [pc, #276]	; (800988c <goal_test+0x2b0>)
 8009776:	8813      	ldrh	r3, [r2, #0]
 8009778:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800977c:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 0;
 800977e:	4a43      	ldr	r2, [pc, #268]	; (800988c <goal_test+0x2b0>)
 8009780:	8813      	ldrh	r3, [r2, #0]
 8009782:	f36f 238a 	bfc	r3, #10, #1
 8009786:	8013      	strh	r3, [r2, #0]
					run_mode = MIDDLE;
 8009788:	4b41      	ldr	r3, [pc, #260]	; (8009890 <goal_test+0x2b4>)
 800978a:	2202      	movs	r2, #2
 800978c:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800978e:	4b41      	ldr	r3, [pc, #260]	; (8009894 <goal_test+0x2b8>)
 8009790:	2200      	movs	r2, #0
 8009792:	701a      	strb	r2, [r3, #0]
					goal_mode = 2;
 8009794:	4b40      	ldr	r3, [pc, #256]	; (8009898 <goal_test+0x2bc>)
 8009796:	2202      	movs	r2, #2
 8009798:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 800979a:	4b40      	ldr	r3, [pc, #256]	; (800989c <goal_test+0x2c0>)
 800979c:	f241 3288 	movw	r2, #5000	; 0x1388
 80097a0:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 800;
 80097a2:	4b3f      	ldr	r3, [pc, #252]	; (80098a0 <goal_test+0x2c4>)
 80097a4:	f44f 7248 	mov.w	r2, #800	; 0x320
 80097a8:	801a      	strh	r2, [r3, #0]
					start_mode = 0;
 80097aa:	4b3a      	ldr	r3, [pc, #232]	; (8009894 <goal_test+0x2b8>)
 80097ac:	2200      	movs	r2, #0
 80097ae:	701a      	strb	r2, [r3, #0]
					goal_x = GOAL_X;
 80097b0:	4b3c      	ldr	r3, [pc, #240]	; (80098a4 <goal_test+0x2c8>)
 80097b2:	2201      	movs	r2, #1
 80097b4:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 80097b6:	4b3c      	ldr	r3, [pc, #240]	; (80098a8 <goal_test+0x2cc>)
 80097b8:	2200      	movs	r2, #0
 80097ba:	701a      	strb	r2, [r3, #0]

					get_base();
 80097bc:	f007 f806 	bl	80107cc <get_base>

					searchC();
 80097c0:	f004 f99a 	bl	800daf8 <searchC>
					HAL_Delay(2000);
 80097c4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80097c8:	f7f7 fc28 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 80097cc:	4b36      	ldr	r3, [pc, #216]	; (80098a8 <goal_test+0x2cc>)
 80097ce:	2200      	movs	r2, #0
 80097d0:	701a      	strb	r2, [r3, #0]
 80097d2:	4b35      	ldr	r3, [pc, #212]	; (80098a8 <goal_test+0x2cc>)
 80097d4:	781a      	ldrb	r2, [r3, #0]
 80097d6:	4b33      	ldr	r3, [pc, #204]	; (80098a4 <goal_test+0x2c8>)
 80097d8:	701a      	strb	r2, [r3, #0]
					searchC();
 80097da:	f004 f98d 	bl	800daf8 <searchC>

					goal_x = GOAL_X;
 80097de:	4b31      	ldr	r3, [pc, #196]	; (80098a4 <goal_test+0x2c8>)
 80097e0:	2201      	movs	r2, #1
 80097e2:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 80097e4:	4b30      	ldr	r3, [pc, #192]	; (80098a8 <goal_test+0x2cc>)
 80097e6:	2200      	movs	r2, #0
 80097e8:	701a      	strb	r2, [r3, #0]
					break;
 80097ea:	e1b9      	b.n	8009b60 <goal_test+0x584>
				case 2:
					//----a直線と大回り圧縮(adv_posを停止)+半区画ベース High Speed----
					printf("pass press 3-2.\n");
 80097ec:	4830      	ldr	r0, [pc, #192]	; (80098b0 <goal_test+0x2d4>)
 80097ee:	f007 fe87 	bl	8011500 <puts>
					MF.FLAG.SCND = 1;
 80097f2:	4a26      	ldr	r2, [pc, #152]	; (800988c <goal_test+0x2b0>)
 80097f4:	8813      	ldrh	r3, [r2, #0]
 80097f6:	f043 0320 	orr.w	r3, r3, #32
 80097fa:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 80097fc:	4a23      	ldr	r2, [pc, #140]	; (800988c <goal_test+0x2b0>)
 80097fe:	8813      	ldrh	r3, [r2, #0]
 8009800:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009804:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 8009806:	4a21      	ldr	r2, [pc, #132]	; (800988c <goal_test+0x2b0>)
 8009808:	8813      	ldrh	r3, [r2, #0]
 800980a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800980e:	8013      	strh	r3, [r2, #0]
					run_mode = MIDDLE;
 8009810:	4b1f      	ldr	r3, [pc, #124]	; (8009890 <goal_test+0x2b4>)
 8009812:	2202      	movs	r2, #2
 8009814:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 8009816:	4b1f      	ldr	r3, [pc, #124]	; (8009894 <goal_test+0x2b8>)
 8009818:	2200      	movs	r2, #0
 800981a:	701a      	strb	r2, [r3, #0]
					goal_mode = 1;
 800981c:	4b1e      	ldr	r3, [pc, #120]	; (8009898 <goal_test+0x2bc>)
 800981e:	2201      	movs	r2, #1
 8009820:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 8009822:	4b1e      	ldr	r3, [pc, #120]	; (800989c <goal_test+0x2c0>)
 8009824:	f241 3288 	movw	r2, #5000	; 0x1388
 8009828:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1200;
 800982a:	4b1d      	ldr	r3, [pc, #116]	; (80098a0 <goal_test+0x2c4>)
 800982c:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8009830:	801a      	strh	r2, [r3, #0]

					pass_mode = 3;						//a半区画ベースでroute配列生成
 8009832:	4b20      	ldr	r3, [pc, #128]	; (80098b4 <goal_test+0x2d8>)
 8009834:	2203      	movs	r2, #3
 8009836:	701a      	strb	r2, [r3, #0]

					goal_x = GOAL_X;
 8009838:	4b1a      	ldr	r3, [pc, #104]	; (80098a4 <goal_test+0x2c8>)
 800983a:	2201      	movs	r2, #1
 800983c:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800983e:	4b1a      	ldr	r3, [pc, #104]	; (80098a8 <goal_test+0x2cc>)
 8009840:	2200      	movs	r2, #0
 8009842:	701a      	strb	r2, [r3, #0]

					get_base();
 8009844:	f006 ffc2 	bl	80107cc <get_base>

					searchF3();
 8009848:	f004 fc8c 	bl	800e164 <searchF3>
					HAL_Delay(2000);
 800984c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8009850:	f7f7 fbe4 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 8009854:	4b14      	ldr	r3, [pc, #80]	; (80098a8 <goal_test+0x2cc>)
 8009856:	2200      	movs	r2, #0
 8009858:	701a      	strb	r2, [r3, #0]
 800985a:	4b13      	ldr	r3, [pc, #76]	; (80098a8 <goal_test+0x2cc>)
 800985c:	781a      	ldrb	r2, [r3, #0]
 800985e:	4b11      	ldr	r3, [pc, #68]	; (80098a4 <goal_test+0x2c8>)
 8009860:	701a      	strb	r2, [r3, #0]
					searchF3();
 8009862:	f004 fc7f 	bl	800e164 <searchF3>

					goal_x = GOAL_X;
 8009866:	4b0f      	ldr	r3, [pc, #60]	; (80098a4 <goal_test+0x2c8>)
 8009868:	2201      	movs	r2, #1
 800986a:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800986c:	4b0e      	ldr	r3, [pc, #56]	; (80098a8 <goal_test+0x2cc>)
 800986e:	2200      	movs	r2, #0
 8009870:	701a      	strb	r2, [r3, #0]
					break;
 8009872:	e175      	b.n	8009b60 <goal_test+0x584>
 8009874:	08012888 	.word	0x08012888
 8009878:	20000aec 	.word	0x20000aec
 800987c:	08012654 	.word	0x08012654
 8009880:	40020000 	.word	0x40020000
 8009884:	20000f64 	.word	0x20000f64
 8009888:	08012834 	.word	0x08012834
 800988c:	20000f68 	.word	0x20000f68
 8009890:	20000456 	.word	0x20000456
 8009894:	200015c8 	.word	0x200015c8
 8009898:	20000bb1 	.word	0x20000bb1
 800989c:	20000454 	.word	0x20000454
 80098a0:	20000f7c 	.word	0x20000f7c
 80098a4:	20000bb0 	.word	0x20000bb0
 80098a8:	20000b4c 	.word	0x20000b4c
 80098ac:	080128a4 	.word	0x080128a4
 80098b0:	08012858 	.word	0x08012858
 80098b4:	20000457 	.word	0x20000457
				case 3:
					//----a直線と大回り圧縮(adv_posを停止)+半区画ベース High Speed----
					printf("pass press 3-2.\n");
 80098b8:	48aa      	ldr	r0, [pc, #680]	; (8009b64 <goal_test+0x588>)
 80098ba:	f007 fe21 	bl	8011500 <puts>
					MF.FLAG.SCND = 1;
 80098be:	4aaa      	ldr	r2, [pc, #680]	; (8009b68 <goal_test+0x58c>)
 80098c0:	8813      	ldrh	r3, [r2, #0]
 80098c2:	f043 0320 	orr.w	r3, r3, #32
 80098c6:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 80098c8:	4aa7      	ldr	r2, [pc, #668]	; (8009b68 <goal_test+0x58c>)
 80098ca:	8813      	ldrh	r3, [r2, #0]
 80098cc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80098d0:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 80098d2:	4aa5      	ldr	r2, [pc, #660]	; (8009b68 <goal_test+0x58c>)
 80098d4:	8813      	ldrh	r3, [r2, #0]
 80098d6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80098da:	8013      	strh	r3, [r2, #0]
					run_mode = HIGH;
 80098dc:	4ba3      	ldr	r3, [pc, #652]	; (8009b6c <goal_test+0x590>)
 80098de:	2203      	movs	r2, #3
 80098e0:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 80098e2:	4ba3      	ldr	r3, [pc, #652]	; (8009b70 <goal_test+0x594>)
 80098e4:	2200      	movs	r2, #0
 80098e6:	701a      	strb	r2, [r3, #0]
					goal_mode = 1;
 80098e8:	4ba2      	ldr	r3, [pc, #648]	; (8009b74 <goal_test+0x598>)
 80098ea:	2201      	movs	r2, #1
 80098ec:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 80098ee:	4ba2      	ldr	r3, [pc, #648]	; (8009b78 <goal_test+0x59c>)
 80098f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80098f4:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1600;
 80098f6:	4ba1      	ldr	r3, [pc, #644]	; (8009b7c <goal_test+0x5a0>)
 80098f8:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 80098fc:	801a      	strh	r2, [r3, #0]

					pass_mode = 3;						//a半区画ベースでroute配列生成
 80098fe:	4ba0      	ldr	r3, [pc, #640]	; (8009b80 <goal_test+0x5a4>)
 8009900:	2203      	movs	r2, #3
 8009902:	701a      	strb	r2, [r3, #0]

					goal_x = GOAL_X;
 8009904:	4b9f      	ldr	r3, [pc, #636]	; (8009b84 <goal_test+0x5a8>)
 8009906:	2201      	movs	r2, #1
 8009908:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800990a:	4b9f      	ldr	r3, [pc, #636]	; (8009b88 <goal_test+0x5ac>)
 800990c:	2200      	movs	r2, #0
 800990e:	701a      	strb	r2, [r3, #0]

					get_base();
 8009910:	f006 ff5c 	bl	80107cc <get_base>

					searchF3();
 8009914:	f004 fc26 	bl	800e164 <searchF3>
					HAL_Delay(2000);
 8009918:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800991c:	f7f7 fb7e 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 8009920:	4b99      	ldr	r3, [pc, #612]	; (8009b88 <goal_test+0x5ac>)
 8009922:	2200      	movs	r2, #0
 8009924:	701a      	strb	r2, [r3, #0]
 8009926:	4b98      	ldr	r3, [pc, #608]	; (8009b88 <goal_test+0x5ac>)
 8009928:	781a      	ldrb	r2, [r3, #0]
 800992a:	4b96      	ldr	r3, [pc, #600]	; (8009b84 <goal_test+0x5a8>)
 800992c:	701a      	strb	r2, [r3, #0]
					searchF3();
 800992e:	f004 fc19 	bl	800e164 <searchF3>

					goal_x = GOAL_X;
 8009932:	4b94      	ldr	r3, [pc, #592]	; (8009b84 <goal_test+0x5a8>)
 8009934:	2201      	movs	r2, #1
 8009936:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 8009938:	4b93      	ldr	r3, [pc, #588]	; (8009b88 <goal_test+0x5ac>)
 800993a:	2200      	movs	r2, #0
 800993c:	701a      	strb	r2, [r3, #0]
					break;
 800993e:	e10f      	b.n	8009b60 <goal_test+0x584>
				case 4:
					//----a直線と大回り圧縮と斜めｰｰｰｰ
					printf("pass press 4.\n");
 8009940:	4892      	ldr	r0, [pc, #584]	; (8009b8c <goal_test+0x5b0>)
 8009942:	f007 fddd 	bl	8011500 <puts>
					MF.FLAG.SCND = 1;
 8009946:	4a88      	ldr	r2, [pc, #544]	; (8009b68 <goal_test+0x58c>)
 8009948:	8813      	ldrh	r3, [r2, #0]
 800994a:	f043 0320 	orr.w	r3, r3, #32
 800994e:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 8009950:	4a85      	ldr	r2, [pc, #532]	; (8009b68 <goal_test+0x58c>)
 8009952:	8813      	ldrh	r3, [r2, #0]
 8009954:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009958:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800995a:	4a83      	ldr	r2, [pc, #524]	; (8009b68 <goal_test+0x58c>)
 800995c:	8813      	ldrh	r3, [r2, #0]
 800995e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009962:	8013      	strh	r3, [r2, #0]
					run_mode = LOW;
 8009964:	4b81      	ldr	r3, [pc, #516]	; (8009b6c <goal_test+0x590>)
 8009966:	2201      	movs	r2, #1
 8009968:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800996a:	4b81      	ldr	r3, [pc, #516]	; (8009b70 <goal_test+0x594>)
 800996c:	2200      	movs	r2, #0
 800996e:	701a      	strb	r2, [r3, #0]
					goal_mode = 1;
 8009970:	4b80      	ldr	r3, [pc, #512]	; (8009b74 <goal_test+0x598>)
 8009972:	2201      	movs	r2, #1
 8009974:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 8009976:	4b80      	ldr	r3, [pc, #512]	; (8009b78 <goal_test+0x59c>)
 8009978:	f241 3288 	movw	r2, #5000	; 0x1388
 800997c:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 800;
 800997e:	4b7f      	ldr	r3, [pc, #508]	; (8009b7c <goal_test+0x5a0>)
 8009980:	f44f 7248 	mov.w	r2, #800	; 0x320
 8009984:	801a      	strh	r2, [r3, #0]

					pass_mode = 4;
 8009986:	4b7e      	ldr	r3, [pc, #504]	; (8009b80 <goal_test+0x5a4>)
 8009988:	2204      	movs	r2, #4
 800998a:	701a      	strb	r2, [r3, #0]

					goal_x = GOAL_X;
 800998c:	4b7d      	ldr	r3, [pc, #500]	; (8009b84 <goal_test+0x5a8>)
 800998e:	2201      	movs	r2, #1
 8009990:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 8009992:	4b7d      	ldr	r3, [pc, #500]	; (8009b88 <goal_test+0x5ac>)
 8009994:	2200      	movs	r2, #0
 8009996:	701a      	strb	r2, [r3, #0]

					get_base();
 8009998:	f006 ff18 	bl	80107cc <get_base>

					searchF4();
 800999c:	f004 fcb8 	bl	800e310 <searchF4>
					HAL_Delay(2000);
 80099a0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80099a4:	f7f7 fb3a 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 80099a8:	4b77      	ldr	r3, [pc, #476]	; (8009b88 <goal_test+0x5ac>)
 80099aa:	2200      	movs	r2, #0
 80099ac:	701a      	strb	r2, [r3, #0]
 80099ae:	4b76      	ldr	r3, [pc, #472]	; (8009b88 <goal_test+0x5ac>)
 80099b0:	781a      	ldrb	r2, [r3, #0]
 80099b2:	4b74      	ldr	r3, [pc, #464]	; (8009b84 <goal_test+0x5a8>)
 80099b4:	701a      	strb	r2, [r3, #0]
					searchF4();
 80099b6:	f004 fcab 	bl	800e310 <searchF4>

					goal_x = GOAL_X;
 80099ba:	4b72      	ldr	r3, [pc, #456]	; (8009b84 <goal_test+0x5a8>)
 80099bc:	2201      	movs	r2, #1
 80099be:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 80099c0:	4b71      	ldr	r3, [pc, #452]	; (8009b88 <goal_test+0x5ac>)
 80099c2:	2200      	movs	r2, #0
 80099c4:	701a      	strb	r2, [r3, #0]
					break;
 80099c6:	e0cb      	b.n	8009b60 <goal_test+0x584>
				case 5:
					//----a直線と大回り圧縮と斜め High Speedｰｰｰｰ
					printf("pass press 4.\n");
 80099c8:	4870      	ldr	r0, [pc, #448]	; (8009b8c <goal_test+0x5b0>)
 80099ca:	f007 fd99 	bl	8011500 <puts>
					MF.FLAG.SCND = 1;
 80099ce:	4a66      	ldr	r2, [pc, #408]	; (8009b68 <goal_test+0x58c>)
 80099d0:	8813      	ldrh	r3, [r2, #0]
 80099d2:	f043 0320 	orr.w	r3, r3, #32
 80099d6:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 80099d8:	4a63      	ldr	r2, [pc, #396]	; (8009b68 <goal_test+0x58c>)
 80099da:	8813      	ldrh	r3, [r2, #0]
 80099dc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80099e0:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 80099e2:	4a61      	ldr	r2, [pc, #388]	; (8009b68 <goal_test+0x58c>)
 80099e4:	8813      	ldrh	r3, [r2, #0]
 80099e6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80099ea:	8013      	strh	r3, [r2, #0]
					run_mode = MIDDLE;
 80099ec:	4b5f      	ldr	r3, [pc, #380]	; (8009b6c <goal_test+0x590>)
 80099ee:	2202      	movs	r2, #2
 80099f0:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 80099f2:	4b5f      	ldr	r3, [pc, #380]	; (8009b70 <goal_test+0x594>)
 80099f4:	2200      	movs	r2, #0
 80099f6:	701a      	strb	r2, [r3, #0]
					goal_mode = 1;
 80099f8:	4b5e      	ldr	r3, [pc, #376]	; (8009b74 <goal_test+0x598>)
 80099fa:	2201      	movs	r2, #1
 80099fc:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 80099fe:	4b5e      	ldr	r3, [pc, #376]	; (8009b78 <goal_test+0x59c>)
 8009a00:	f241 3288 	movw	r2, #5000	; 0x1388
 8009a04:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1200;
 8009a06:	4b5d      	ldr	r3, [pc, #372]	; (8009b7c <goal_test+0x5a0>)
 8009a08:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8009a0c:	801a      	strh	r2, [r3, #0]

					pass_mode = 4;
 8009a0e:	4b5c      	ldr	r3, [pc, #368]	; (8009b80 <goal_test+0x5a4>)
 8009a10:	2204      	movs	r2, #4
 8009a12:	701a      	strb	r2, [r3, #0]

					goal_x = GOAL_X;
 8009a14:	4b5b      	ldr	r3, [pc, #364]	; (8009b84 <goal_test+0x5a8>)
 8009a16:	2201      	movs	r2, #1
 8009a18:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 8009a1a:	4b5b      	ldr	r3, [pc, #364]	; (8009b88 <goal_test+0x5ac>)
 8009a1c:	2200      	movs	r2, #0
 8009a1e:	701a      	strb	r2, [r3, #0]

					get_base();
 8009a20:	f006 fed4 	bl	80107cc <get_base>

					searchF4();
 8009a24:	f004 fc74 	bl	800e310 <searchF4>
					HAL_Delay(2000);
 8009a28:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8009a2c:	f7f7 faf6 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 8009a30:	4b55      	ldr	r3, [pc, #340]	; (8009b88 <goal_test+0x5ac>)
 8009a32:	2200      	movs	r2, #0
 8009a34:	701a      	strb	r2, [r3, #0]
 8009a36:	4b54      	ldr	r3, [pc, #336]	; (8009b88 <goal_test+0x5ac>)
 8009a38:	781a      	ldrb	r2, [r3, #0]
 8009a3a:	4b52      	ldr	r3, [pc, #328]	; (8009b84 <goal_test+0x5a8>)
 8009a3c:	701a      	strb	r2, [r3, #0]
					searchF4();
 8009a3e:	f004 fc67 	bl	800e310 <searchF4>

					goal_x = GOAL_X;
 8009a42:	4b50      	ldr	r3, [pc, #320]	; (8009b84 <goal_test+0x5a8>)
 8009a44:	2201      	movs	r2, #1
 8009a46:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 8009a48:	4b4f      	ldr	r3, [pc, #316]	; (8009b88 <goal_test+0x5ac>)
 8009a4a:	2200      	movs	r2, #0
 8009a4c:	701a      	strb	r2, [r3, #0]
					break;
 8009a4e:	e087      	b.n	8009b60 <goal_test+0x584>
				case 6:
					//----a直線と大回り圧縮と斜め High Speedｰｰｰｰ
					printf("pass press 4.\n");
 8009a50:	484e      	ldr	r0, [pc, #312]	; (8009b8c <goal_test+0x5b0>)
 8009a52:	f007 fd55 	bl	8011500 <puts>
					MF.FLAG.SCND = 1;
 8009a56:	4a44      	ldr	r2, [pc, #272]	; (8009b68 <goal_test+0x58c>)
 8009a58:	8813      	ldrh	r3, [r2, #0]
 8009a5a:	f043 0320 	orr.w	r3, r3, #32
 8009a5e:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 8009a60:	4a41      	ldr	r2, [pc, #260]	; (8009b68 <goal_test+0x58c>)
 8009a62:	8813      	ldrh	r3, [r2, #0]
 8009a64:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009a68:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 8009a6a:	4a3f      	ldr	r2, [pc, #252]	; (8009b68 <goal_test+0x58c>)
 8009a6c:	8813      	ldrh	r3, [r2, #0]
 8009a6e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009a72:	8013      	strh	r3, [r2, #0]
					run_mode = HIGH;
 8009a74:	4b3d      	ldr	r3, [pc, #244]	; (8009b6c <goal_test+0x590>)
 8009a76:	2203      	movs	r2, #3
 8009a78:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 8009a7a:	4b3d      	ldr	r3, [pc, #244]	; (8009b70 <goal_test+0x594>)
 8009a7c:	2200      	movs	r2, #0
 8009a7e:	701a      	strb	r2, [r3, #0]
					goal_mode = 1;
 8009a80:	4b3c      	ldr	r3, [pc, #240]	; (8009b74 <goal_test+0x598>)
 8009a82:	2201      	movs	r2, #1
 8009a84:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 8009a86:	4b3c      	ldr	r3, [pc, #240]	; (8009b78 <goal_test+0x59c>)
 8009a88:	f241 3288 	movw	r2, #5000	; 0x1388
 8009a8c:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1600;
 8009a8e:	4b3b      	ldr	r3, [pc, #236]	; (8009b7c <goal_test+0x5a0>)
 8009a90:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8009a94:	801a      	strh	r2, [r3, #0]

					pass_mode = 4;
 8009a96:	4b3a      	ldr	r3, [pc, #232]	; (8009b80 <goal_test+0x5a4>)
 8009a98:	2204      	movs	r2, #4
 8009a9a:	701a      	strb	r2, [r3, #0]

					goal_x = GOAL_X;
 8009a9c:	4b39      	ldr	r3, [pc, #228]	; (8009b84 <goal_test+0x5a8>)
 8009a9e:	2201      	movs	r2, #1
 8009aa0:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 8009aa2:	4b39      	ldr	r3, [pc, #228]	; (8009b88 <goal_test+0x5ac>)
 8009aa4:	2200      	movs	r2, #0
 8009aa6:	701a      	strb	r2, [r3, #0]

					get_base();
 8009aa8:	f006 fe90 	bl	80107cc <get_base>

					searchF4();
 8009aac:	f004 fc30 	bl	800e310 <searchF4>
					HAL_Delay(2000);
 8009ab0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8009ab4:	f7f7 fab2 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 8009ab8:	4b33      	ldr	r3, [pc, #204]	; (8009b88 <goal_test+0x5ac>)
 8009aba:	2200      	movs	r2, #0
 8009abc:	701a      	strb	r2, [r3, #0]
 8009abe:	4b32      	ldr	r3, [pc, #200]	; (8009b88 <goal_test+0x5ac>)
 8009ac0:	781a      	ldrb	r2, [r3, #0]
 8009ac2:	4b30      	ldr	r3, [pc, #192]	; (8009b84 <goal_test+0x5a8>)
 8009ac4:	701a      	strb	r2, [r3, #0]
					searchF4();
 8009ac6:	f004 fc23 	bl	800e310 <searchF4>

					goal_x = GOAL_X;
 8009aca:	4b2e      	ldr	r3, [pc, #184]	; (8009b84 <goal_test+0x5a8>)
 8009acc:	2201      	movs	r2, #1
 8009ace:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 8009ad0:	4b2d      	ldr	r3, [pc, #180]	; (8009b88 <goal_test+0x5ac>)
 8009ad2:	2200      	movs	r2, #0
 8009ad4:	701a      	strb	r2, [r3, #0]
					break;
 8009ad6:	e043      	b.n	8009b60 <goal_test+0x584>
				case 7:
					//----a直線と大回り圧縮(adv_posを停止)+半区画ベース High Speed----
					printf("pass press 3-4.\n");
 8009ad8:	482d      	ldr	r0, [pc, #180]	; (8009b90 <goal_test+0x5b4>)
 8009ada:	f007 fd11 	bl	8011500 <puts>
					MF.FLAG.SCND = 1;
 8009ade:	4a22      	ldr	r2, [pc, #136]	; (8009b68 <goal_test+0x58c>)
 8009ae0:	8813      	ldrh	r3, [r2, #0]
 8009ae2:	f043 0320 	orr.w	r3, r3, #32
 8009ae6:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 8009ae8:	4a1f      	ldr	r2, [pc, #124]	; (8009b68 <goal_test+0x58c>)
 8009aea:	8813      	ldrh	r3, [r2, #0]
 8009aec:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009af0:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 8009af2:	4a1d      	ldr	r2, [pc, #116]	; (8009b68 <goal_test+0x58c>)
 8009af4:	8813      	ldrh	r3, [r2, #0]
 8009af6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009afa:	8013      	strh	r3, [r2, #0]
					run_mode = HIGH_HIGH;
 8009afc:	4b1b      	ldr	r3, [pc, #108]	; (8009b6c <goal_test+0x590>)
 8009afe:	2204      	movs	r2, #4
 8009b00:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 8009b02:	4b1b      	ldr	r3, [pc, #108]	; (8009b70 <goal_test+0x594>)
 8009b04:	2200      	movs	r2, #0
 8009b06:	701a      	strb	r2, [r3, #0]
					goal_mode = 1;
 8009b08:	4b1a      	ldr	r3, [pc, #104]	; (8009b74 <goal_test+0x598>)
 8009b0a:	2201      	movs	r2, #1
 8009b0c:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 8009b0e:	4b1a      	ldr	r3, [pc, #104]	; (8009b78 <goal_test+0x59c>)
 8009b10:	f241 3288 	movw	r2, #5000	; 0x1388
 8009b14:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 2000;
 8009b16:	4b19      	ldr	r3, [pc, #100]	; (8009b7c <goal_test+0x5a0>)
 8009b18:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8009b1c:	801a      	strh	r2, [r3, #0]

					pass_mode = 3;						//a半区画ベースでroute配列生成
 8009b1e:	4b18      	ldr	r3, [pc, #96]	; (8009b80 <goal_test+0x5a4>)
 8009b20:	2203      	movs	r2, #3
 8009b22:	701a      	strb	r2, [r3, #0]

					goal_x = GOAL_X;
 8009b24:	4b17      	ldr	r3, [pc, #92]	; (8009b84 <goal_test+0x5a8>)
 8009b26:	2201      	movs	r2, #1
 8009b28:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 8009b2a:	4b17      	ldr	r3, [pc, #92]	; (8009b88 <goal_test+0x5ac>)
 8009b2c:	2200      	movs	r2, #0
 8009b2e:	701a      	strb	r2, [r3, #0]

					get_base();
 8009b30:	f006 fe4c 	bl	80107cc <get_base>

					searchF3();
 8009b34:	f004 fb16 	bl	800e164 <searchF3>
					HAL_Delay(2000);
 8009b38:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8009b3c:	f7f7 fa6e 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 8009b40:	4b11      	ldr	r3, [pc, #68]	; (8009b88 <goal_test+0x5ac>)
 8009b42:	2200      	movs	r2, #0
 8009b44:	701a      	strb	r2, [r3, #0]
 8009b46:	4b10      	ldr	r3, [pc, #64]	; (8009b88 <goal_test+0x5ac>)
 8009b48:	781a      	ldrb	r2, [r3, #0]
 8009b4a:	4b0e      	ldr	r3, [pc, #56]	; (8009b84 <goal_test+0x5a8>)
 8009b4c:	701a      	strb	r2, [r3, #0]
					searchF3();
 8009b4e:	f004 fb09 	bl	800e164 <searchF3>

					goal_x = GOAL_X;
 8009b52:	4b0c      	ldr	r3, [pc, #48]	; (8009b84 <goal_test+0x5a8>)
 8009b54:	2201      	movs	r2, #1
 8009b56:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 8009b58:	4b0b      	ldr	r3, [pc, #44]	; (8009b88 <goal_test+0x5ac>)
 8009b5a:	2200      	movs	r2, #0
 8009b5c:	701a      	strb	r2, [r3, #0]
					break;
 8009b5e:	bf00      	nop
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 8009b60:	e545      	b.n	80095ee <goal_test+0x12>
 8009b62:	bf00      	nop
 8009b64:	08012858 	.word	0x08012858
 8009b68:	20000f68 	.word	0x20000f68
 8009b6c:	20000456 	.word	0x20000456
 8009b70:	200015c8 	.word	0x200015c8
 8009b74:	20000bb1 	.word	0x20000bb1
 8009b78:	20000454 	.word	0x20000454
 8009b7c:	20000f7c 	.word	0x20000f7c
 8009b80:	20000457 	.word	0x20000457
 8009b84:	20000bb0 	.word	0x20000bb0
 8009b88:	20000b4c 	.word	0x20000b4c
 8009b8c:	08012868 	.word	0x08012868
 8009b90:	08012878 	.word	0x08012878

08009b94 <simple_run>:
//simple_run
// 超信地走行モード
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void simple_run(void){
 8009b94:	b580      	push	{r7, lr}
 8009b96:	b082      	sub	sp, #8
 8009b98:	af00      	add	r7, sp, #0

	int mode = 0;
 8009b9a:	2300      	movs	r3, #0
 8009b9c:	607b      	str	r3, [r7, #4]
	printf("Simple Run, Mode : %d\n", mode);
 8009b9e:	6879      	ldr	r1, [r7, #4]
 8009ba0:	4878      	ldr	r0, [pc, #480]	; (8009d84 <simple_run+0x1f0>)
 8009ba2:	f007 fc39 	bl	8011418 <iprintf>

	while(1){

		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	b2db      	uxtb	r3, r3
 8009baa:	f003 0301 	and.w	r3, r3, #1
 8009bae:	b2d8      	uxtb	r0, r3
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	b2db      	uxtb	r3, r3
 8009bb4:	f003 0302 	and.w	r3, r3, #2
 8009bb8:	b2d9      	uxtb	r1, r3
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	b2db      	uxtb	r3, r3
 8009bbe:	f003 0304 	and.w	r3, r3, #4
 8009bc2:	b2db      	uxtb	r3, r3
 8009bc4:	461a      	mov	r2, r3
 8009bc6:	f006 fe59 	bl	801087c <led_write>
		  if(dist_r >= 20){
 8009bca:	4b6f      	ldr	r3, [pc, #444]	; (8009d88 <simple_run+0x1f4>)
 8009bcc:	edd3 7a00 	vldr	s15, [r3]
 8009bd0:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8009bd4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009bd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009bdc:	db0f      	blt.n	8009bfe <simple_run+0x6a>
			  mode++;
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	3301      	adds	r3, #1
 8009be2:	607b      	str	r3, [r7, #4]
			  dist_r = 0;
 8009be4:	4b68      	ldr	r3, [pc, #416]	; (8009d88 <simple_run+0x1f4>)
 8009be6:	f04f 0200 	mov.w	r2, #0
 8009bea:	601a      	str	r2, [r3, #0]
			  if(mode > 7){
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	2b07      	cmp	r3, #7
 8009bf0:	dd01      	ble.n	8009bf6 <simple_run+0x62>
				  mode = 0;
 8009bf2:	2300      	movs	r3, #0
 8009bf4:	607b      	str	r3, [r7, #4]
			  }
			  printf("Mode : %d\n", mode);
 8009bf6:	6879      	ldr	r1, [r7, #4]
 8009bf8:	4864      	ldr	r0, [pc, #400]	; (8009d8c <simple_run+0x1f8>)
 8009bfa:	f007 fc0d 	bl	8011418 <iprintf>
		  }
		  if(dist_r <= -20){
 8009bfe:	4b62      	ldr	r3, [pc, #392]	; (8009d88 <simple_run+0x1f4>)
 8009c00:	edd3 7a00 	vldr	s15, [r3]
 8009c04:	eebb 7a04 	vmov.f32	s14, #180	; 0xc1a00000 -20.0
 8009c08:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009c0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c10:	d80f      	bhi.n	8009c32 <simple_run+0x9e>
			  mode--;
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	3b01      	subs	r3, #1
 8009c16:	607b      	str	r3, [r7, #4]
			  dist_r = 0;
 8009c18:	4b5b      	ldr	r3, [pc, #364]	; (8009d88 <simple_run+0x1f4>)
 8009c1a:	f04f 0200 	mov.w	r2, #0
 8009c1e:	601a      	str	r2, [r3, #0]
			  if(mode < 0){
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	da01      	bge.n	8009c2a <simple_run+0x96>
				  mode = 7;
 8009c26:	2307      	movs	r3, #7
 8009c28:	607b      	str	r3, [r7, #4]
			  }
			  printf("Mode : %d\n", mode);
 8009c2a:	6879      	ldr	r1, [r7, #4]
 8009c2c:	4857      	ldr	r0, [pc, #348]	; (8009d8c <simple_run+0x1f8>)
 8009c2e:	f007 fbf3 	bl	8011418 <iprintf>
		  }
		  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET){
 8009c32:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8009c36:	4856      	ldr	r0, [pc, #344]	; (8009d90 <simple_run+0x1fc>)
 8009c38:	f7f8 fb4c 	bl	80022d4 <HAL_GPIO_ReadPin>
 8009c3c:	4603      	mov	r3, r0
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	d1b1      	bne.n	8009ba6 <simple_run+0x12>
			  HAL_Delay(50);
 8009c42:	2032      	movs	r0, #50	; 0x32
 8009c44:	f7f7 f9ea 	bl	800101c <HAL_Delay>
			  while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET);
 8009c48:	bf00      	nop
 8009c4a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8009c4e:	4850      	ldr	r0, [pc, #320]	; (8009d90 <simple_run+0x1fc>)
 8009c50:	f7f8 fb40 	bl	80022d4 <HAL_GPIO_ReadPin>
 8009c54:	4603      	mov	r3, r0
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	d0f7      	beq.n	8009c4a <simple_run+0xb6>
			  drive_ready();
 8009c5a:	f7fb f811 	bl	8004c80 <drive_ready>

			  switch(mode){
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	2b07      	cmp	r3, #7
 8009c62:	d8a0      	bhi.n	8009ba6 <simple_run+0x12>
 8009c64:	a201      	add	r2, pc, #4	; (adr r2, 8009c6c <simple_run+0xd8>)
 8009c66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c6a:	bf00      	nop
 8009c6c:	08009ba7 	.word	0x08009ba7
 8009c70:	08009c8d 	.word	0x08009c8d
 8009c74:	08009cdf 	.word	0x08009cdf
 8009c78:	08009d31 	.word	0x08009d31
 8009c7c:	08009ba7 	.word	0x08009ba7
 8009c80:	08009ba7 	.word	0x08009ba7
 8009c84:	08009ba7 	.word	0x08009ba7
 8009c88:	08009ba7 	.word	0x08009ba7

				case 0:
					break;
				case 1:
					//----一次探索走行----
					printf("First Run.\n");
 8009c8c:	4841      	ldr	r0, [pc, #260]	; (8009d94 <simple_run+0x200>)
 8009c8e:	f007 fc37 	bl	8011500 <puts>

					MF.FLAG.SCND = 0;
 8009c92:	4a41      	ldr	r2, [pc, #260]	; (8009d98 <simple_run+0x204>)
 8009c94:	8813      	ldrh	r3, [r2, #0]
 8009c96:	f36f 1345 	bfc	r3, #5, #1
 8009c9a:	8013      	strh	r3, [r2, #0]
					run_mode = LOW;
 8009c9c:	4b3f      	ldr	r3, [pc, #252]	; (8009d9c <simple_run+0x208>)
 8009c9e:	2201      	movs	r2, #1
 8009ca0:	701a      	strb	r2, [r3, #0]
					goal_x = GOAL_X;
 8009ca2:	4b3f      	ldr	r3, [pc, #252]	; (8009da0 <simple_run+0x20c>)
 8009ca4:	2201      	movs	r2, #1
 8009ca6:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 8009ca8:	4b3e      	ldr	r3, [pc, #248]	; (8009da4 <simple_run+0x210>)
 8009caa:	2200      	movs	r2, #0
 8009cac:	701a      	strb	r2, [r3, #0]

					get_base();
 8009cae:	f006 fd8d 	bl	80107cc <get_base>

					searchA();
 8009cb2:	f003 fe15 	bl	800d8e0 <searchA>
					HAL_Delay(2000);
 8009cb6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8009cba:	f7f7 f9af 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 8009cbe:	4b39      	ldr	r3, [pc, #228]	; (8009da4 <simple_run+0x210>)
 8009cc0:	2200      	movs	r2, #0
 8009cc2:	701a      	strb	r2, [r3, #0]
 8009cc4:	4b37      	ldr	r3, [pc, #220]	; (8009da4 <simple_run+0x210>)
 8009cc6:	781a      	ldrb	r2, [r3, #0]
 8009cc8:	4b35      	ldr	r3, [pc, #212]	; (8009da0 <simple_run+0x20c>)
 8009cca:	701a      	strb	r2, [r3, #0]
					searchA();
 8009ccc:	f003 fe08 	bl	800d8e0 <searchA>

					goal_x = GOAL_X;
 8009cd0:	4b33      	ldr	r3, [pc, #204]	; (8009da0 <simple_run+0x20c>)
 8009cd2:	2201      	movs	r2, #1
 8009cd4:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 8009cd6:	4b33      	ldr	r3, [pc, #204]	; (8009da4 <simple_run+0x210>)
 8009cd8:	2200      	movs	r2, #0
 8009cda:	701a      	strb	r2, [r3, #0]

					break;
 8009cdc:	e051      	b.n	8009d82 <simple_run+0x1ee>

				case 2:
					//----一次探索連続走行----
					printf("First Run. (Continuous)\n");
 8009cde:	4832      	ldr	r0, [pc, #200]	; (8009da8 <simple_run+0x214>)
 8009ce0:	f007 fc0e 	bl	8011500 <puts>

					MF.FLAG.SCND = 0;
 8009ce4:	4a2c      	ldr	r2, [pc, #176]	; (8009d98 <simple_run+0x204>)
 8009ce6:	8813      	ldrh	r3, [r2, #0]
 8009ce8:	f36f 1345 	bfc	r3, #5, #1
 8009cec:	8013      	strh	r3, [r2, #0]
					run_mode = LOW;
 8009cee:	4b2b      	ldr	r3, [pc, #172]	; (8009d9c <simple_run+0x208>)
 8009cf0:	2201      	movs	r2, #1
 8009cf2:	701a      	strb	r2, [r3, #0]
					goal_x = GOAL_X;
 8009cf4:	4b2a      	ldr	r3, [pc, #168]	; (8009da0 <simple_run+0x20c>)
 8009cf6:	2201      	movs	r2, #1
 8009cf8:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 8009cfa:	4b2a      	ldr	r3, [pc, #168]	; (8009da4 <simple_run+0x210>)
 8009cfc:	2200      	movs	r2, #0
 8009cfe:	701a      	strb	r2, [r3, #0]

					get_base();
 8009d00:	f006 fd64 	bl	80107cc <get_base>

					searchB();
 8009d04:	f003 fe6e 	bl	800d9e4 <searchB>
					HAL_Delay(2000);
 8009d08:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8009d0c:	f7f7 f986 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 8009d10:	4b24      	ldr	r3, [pc, #144]	; (8009da4 <simple_run+0x210>)
 8009d12:	2200      	movs	r2, #0
 8009d14:	701a      	strb	r2, [r3, #0]
 8009d16:	4b23      	ldr	r3, [pc, #140]	; (8009da4 <simple_run+0x210>)
 8009d18:	781a      	ldrb	r2, [r3, #0]
 8009d1a:	4b21      	ldr	r3, [pc, #132]	; (8009da0 <simple_run+0x20c>)
 8009d1c:	701a      	strb	r2, [r3, #0]
					searchB();
 8009d1e:	f003 fe61 	bl	800d9e4 <searchB>

					goal_x = GOAL_X;
 8009d22:	4b1f      	ldr	r3, [pc, #124]	; (8009da0 <simple_run+0x20c>)
 8009d24:	2201      	movs	r2, #1
 8009d26:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 8009d28:	4b1e      	ldr	r3, [pc, #120]	; (8009da4 <simple_run+0x210>)
 8009d2a:	2200      	movs	r2, #0
 8009d2c:	701a      	strb	r2, [r3, #0]

					break;
 8009d2e:	e028      	b.n	8009d82 <simple_run+0x1ee>

				case 3:
					//----二次探索走行----
					printf("Second Run. (Continuous)\n");
 8009d30:	481e      	ldr	r0, [pc, #120]	; (8009dac <simple_run+0x218>)
 8009d32:	f007 fbe5 	bl	8011500 <puts>

					MF.FLAG.SCND = 1;
 8009d36:	4a18      	ldr	r2, [pc, #96]	; (8009d98 <simple_run+0x204>)
 8009d38:	8813      	ldrh	r3, [r2, #0]
 8009d3a:	f043 0320 	orr.w	r3, r3, #32
 8009d3e:	8013      	strh	r3, [r2, #0]
					run_mode = LOW;
 8009d40:	4b16      	ldr	r3, [pc, #88]	; (8009d9c <simple_run+0x208>)
 8009d42:	2201      	movs	r2, #1
 8009d44:	701a      	strb	r2, [r3, #0]
					goal_x = GOAL_X;
 8009d46:	4b16      	ldr	r3, [pc, #88]	; (8009da0 <simple_run+0x20c>)
 8009d48:	2201      	movs	r2, #1
 8009d4a:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 8009d4c:	4b15      	ldr	r3, [pc, #84]	; (8009da4 <simple_run+0x210>)
 8009d4e:	2200      	movs	r2, #0
 8009d50:	701a      	strb	r2, [r3, #0]

					get_base();
 8009d52:	f006 fd3b 	bl	80107cc <get_base>

					searchB();
 8009d56:	f003 fe45 	bl	800d9e4 <searchB>
					HAL_Delay(2000);
 8009d5a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8009d5e:	f7f7 f95d 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 8009d62:	4b10      	ldr	r3, [pc, #64]	; (8009da4 <simple_run+0x210>)
 8009d64:	2200      	movs	r2, #0
 8009d66:	701a      	strb	r2, [r3, #0]
 8009d68:	4b0e      	ldr	r3, [pc, #56]	; (8009da4 <simple_run+0x210>)
 8009d6a:	781a      	ldrb	r2, [r3, #0]
 8009d6c:	4b0c      	ldr	r3, [pc, #48]	; (8009da0 <simple_run+0x20c>)
 8009d6e:	701a      	strb	r2, [r3, #0]
					searchB();
 8009d70:	f003 fe38 	bl	800d9e4 <searchB>

					goal_x = GOAL_X;
 8009d74:	4b0a      	ldr	r3, [pc, #40]	; (8009da0 <simple_run+0x20c>)
 8009d76:	2201      	movs	r2, #1
 8009d78:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 8009d7a:	4b0a      	ldr	r3, [pc, #40]	; (8009da4 <simple_run+0x210>)
 8009d7c:	2200      	movs	r2, #0
 8009d7e:	701a      	strb	r2, [r3, #0]

					break;
 8009d80:	bf00      	nop
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 8009d82:	e710      	b.n	8009ba6 <simple_run+0x12>
 8009d84:	080128b8 	.word	0x080128b8
 8009d88:	20000aec 	.word	0x20000aec
 8009d8c:	08012654 	.word	0x08012654
 8009d90:	40020000 	.word	0x40020000
 8009d94:	080128d0 	.word	0x080128d0
 8009d98:	20000f68 	.word	0x20000f68
 8009d9c:	20000456 	.word	0x20000456
 8009da0:	20000bb0 	.word	0x20000bb0
 8009da4:	20000b4c 	.word	0x20000b4c
 8009da8:	080128dc 	.word	0x080128dc
 8009dac:	080128f4 	.word	0x080128f4

08009db0 <slalom_run>:
//slalom_run
// スラローム走行モード
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void slalom_run(void){
 8009db0:	b580      	push	{r7, lr}
 8009db2:	b082      	sub	sp, #8
 8009db4:	af00      	add	r7, sp, #0

	int mode = 0;
 8009db6:	2300      	movs	r3, #0
 8009db8:	607b      	str	r3, [r7, #4]
	printf("Slalom Run, Mode : %d\n", mode);
 8009dba:	6879      	ldr	r1, [r7, #4]
 8009dbc:	48a6      	ldr	r0, [pc, #664]	; (800a058 <slalom_run+0x2a8>)
 8009dbe:	f007 fb2b 	bl	8011418 <iprintf>

	while(1){
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	b2db      	uxtb	r3, r3
 8009dc6:	f003 0301 	and.w	r3, r3, #1
 8009dca:	b2d8      	uxtb	r0, r3
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	b2db      	uxtb	r3, r3
 8009dd0:	f003 0302 	and.w	r3, r3, #2
 8009dd4:	b2d9      	uxtb	r1, r3
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	b2db      	uxtb	r3, r3
 8009dda:	f003 0304 	and.w	r3, r3, #4
 8009dde:	b2db      	uxtb	r3, r3
 8009de0:	461a      	mov	r2, r3
 8009de2:	f006 fd4b 	bl	801087c <led_write>
		  if(dist_r >= 20){
 8009de6:	4b9d      	ldr	r3, [pc, #628]	; (800a05c <slalom_run+0x2ac>)
 8009de8:	edd3 7a00 	vldr	s15, [r3]
 8009dec:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8009df0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009df4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009df8:	db0f      	blt.n	8009e1a <slalom_run+0x6a>
			  mode++;
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	3301      	adds	r3, #1
 8009dfe:	607b      	str	r3, [r7, #4]
			  dist_r = 0;
 8009e00:	4b96      	ldr	r3, [pc, #600]	; (800a05c <slalom_run+0x2ac>)
 8009e02:	f04f 0200 	mov.w	r2, #0
 8009e06:	601a      	str	r2, [r3, #0]
			  if(mode > 7){
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	2b07      	cmp	r3, #7
 8009e0c:	dd01      	ble.n	8009e12 <slalom_run+0x62>
				  mode = 0;
 8009e0e:	2300      	movs	r3, #0
 8009e10:	607b      	str	r3, [r7, #4]
			  }
			  printf("Mode : %d\n", mode);
 8009e12:	6879      	ldr	r1, [r7, #4]
 8009e14:	4892      	ldr	r0, [pc, #584]	; (800a060 <slalom_run+0x2b0>)
 8009e16:	f007 faff 	bl	8011418 <iprintf>
		  }
		  if(dist_r <= -20){
 8009e1a:	4b90      	ldr	r3, [pc, #576]	; (800a05c <slalom_run+0x2ac>)
 8009e1c:	edd3 7a00 	vldr	s15, [r3]
 8009e20:	eebb 7a04 	vmov.f32	s14, #180	; 0xc1a00000 -20.0
 8009e24:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009e28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009e2c:	d80f      	bhi.n	8009e4e <slalom_run+0x9e>
			  mode--;
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	3b01      	subs	r3, #1
 8009e32:	607b      	str	r3, [r7, #4]
			  dist_r = 0;
 8009e34:	4b89      	ldr	r3, [pc, #548]	; (800a05c <slalom_run+0x2ac>)
 8009e36:	f04f 0200 	mov.w	r2, #0
 8009e3a:	601a      	str	r2, [r3, #0]
			  if(mode < 0){
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	da01      	bge.n	8009e46 <slalom_run+0x96>
				  mode = 7;
 8009e42:	2307      	movs	r3, #7
 8009e44:	607b      	str	r3, [r7, #4]
			  }
			  printf("Mode : %d\n", mode);
 8009e46:	6879      	ldr	r1, [r7, #4]
 8009e48:	4885      	ldr	r0, [pc, #532]	; (800a060 <slalom_run+0x2b0>)
 8009e4a:	f007 fae5 	bl	8011418 <iprintf>
		  }
		  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET){
 8009e4e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8009e52:	4884      	ldr	r0, [pc, #528]	; (800a064 <slalom_run+0x2b4>)
 8009e54:	f7f8 fa3e 	bl	80022d4 <HAL_GPIO_ReadPin>
 8009e58:	4603      	mov	r3, r0
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	d1b1      	bne.n	8009dc2 <slalom_run+0x12>
			  HAL_Delay(50);
 8009e5e:	2032      	movs	r0, #50	; 0x32
 8009e60:	f7f7 f8dc 	bl	800101c <HAL_Delay>
			  while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET);
 8009e64:	bf00      	nop
 8009e66:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8009e6a:	487e      	ldr	r0, [pc, #504]	; (800a064 <slalom_run+0x2b4>)
 8009e6c:	f7f8 fa32 	bl	80022d4 <HAL_GPIO_ReadPin>
 8009e70:	4603      	mov	r3, r0
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	d0f7      	beq.n	8009e66 <slalom_run+0xb6>
			  drive_ready();
 8009e76:	f7fa ff03 	bl	8004c80 <drive_ready>

			  switch(mode){
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	2b07      	cmp	r3, #7
 8009e7e:	d8a0      	bhi.n	8009dc2 <slalom_run+0x12>
 8009e80:	a201      	add	r2, pc, #4	; (adr r2, 8009e88 <slalom_run+0xd8>)
 8009e82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e86:	bf00      	nop
 8009e88:	08009ea9 	.word	0x08009ea9
 8009e8c:	08009f1b 	.word	0x08009f1b
 8009e90:	08009f73 	.word	0x08009f73
 8009e94:	08009fe5 	.word	0x08009fe5
 8009e98:	0800a091 	.word	0x0800a091
 8009e9c:	0800a103 	.word	0x0800a103
 8009ea0:	0800a16d 	.word	0x0800a16d
 8009ea4:	0800a1f1 	.word	0x0800a1f1

			  case 0:
					//----一次探索スラローム走行----
					printf("First Run. (Slalom)\n");
 8009ea8:	486f      	ldr	r0, [pc, #444]	; (800a068 <slalom_run+0x2b8>)
 8009eaa:	f007 fb29 	bl	8011500 <puts>

					MF.FLAG.SCND = 0;
 8009eae:	4a6f      	ldr	r2, [pc, #444]	; (800a06c <slalom_run+0x2bc>)
 8009eb0:	8813      	ldrh	r3, [r2, #0]
 8009eb2:	f36f 1345 	bfc	r3, #5, #1
 8009eb6:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 0;
 8009eb8:	4a6c      	ldr	r2, [pc, #432]	; (800a06c <slalom_run+0x2bc>)
 8009eba:	8813      	ldrh	r3, [r2, #0]
 8009ebc:	f36f 2349 	bfc	r3, #9, #1
 8009ec0:	8013      	strh	r3, [r2, #0]
					run_mode = LOW;
 8009ec2:	4b6b      	ldr	r3, [pc, #428]	; (800a070 <slalom_run+0x2c0>)
 8009ec4:	2201      	movs	r2, #1
 8009ec6:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 8009ec8:	4b6a      	ldr	r3, [pc, #424]	; (800a074 <slalom_run+0x2c4>)
 8009eca:	2200      	movs	r2, #0
 8009ecc:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 8009ece:	4b6a      	ldr	r3, [pc, #424]	; (800a078 <slalom_run+0x2c8>)
 8009ed0:	f241 3288 	movw	r2, #5000	; 0x1388
 8009ed4:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 800;
 8009ed6:	4b69      	ldr	r3, [pc, #420]	; (800a07c <slalom_run+0x2cc>)
 8009ed8:	f44f 7248 	mov.w	r2, #800	; 0x320
 8009edc:	801a      	strh	r2, [r3, #0]


					goal_x = GOAL_X;
 8009ede:	4b68      	ldr	r3, [pc, #416]	; (800a080 <slalom_run+0x2d0>)
 8009ee0:	2201      	movs	r2, #1
 8009ee2:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 8009ee4:	4b67      	ldr	r3, [pc, #412]	; (800a084 <slalom_run+0x2d4>)
 8009ee6:	2200      	movs	r2, #0
 8009ee8:	701a      	strb	r2, [r3, #0]

					get_base();
 8009eea:	f006 fc6f 	bl	80107cc <get_base>

					searchC();
 8009eee:	f003 fe03 	bl	800daf8 <searchC>
					HAL_Delay(2000);
 8009ef2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8009ef6:	f7f7 f891 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 8009efa:	4b62      	ldr	r3, [pc, #392]	; (800a084 <slalom_run+0x2d4>)
 8009efc:	2200      	movs	r2, #0
 8009efe:	701a      	strb	r2, [r3, #0]
 8009f00:	4b60      	ldr	r3, [pc, #384]	; (800a084 <slalom_run+0x2d4>)
 8009f02:	781a      	ldrb	r2, [r3, #0]
 8009f04:	4b5e      	ldr	r3, [pc, #376]	; (800a080 <slalom_run+0x2d0>)
 8009f06:	701a      	strb	r2, [r3, #0]
					searchC();
 8009f08:	f003 fdf6 	bl	800daf8 <searchC>

					goal_x = GOAL_X;
 8009f0c:	4b5c      	ldr	r3, [pc, #368]	; (800a080 <slalom_run+0x2d0>)
 8009f0e:	2201      	movs	r2, #1
 8009f10:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 8009f12:	4b5c      	ldr	r3, [pc, #368]	; (800a084 <slalom_run+0x2d4>)
 8009f14:	2200      	movs	r2, #0
 8009f16:	701a      	strb	r2, [r3, #0]
					break;
 8009f18:	e1ac      	b.n	800a274 <slalom_run+0x4c4>

				case 1:
					//----二次探索スラローム走行----
					printf("Second Run. (Slalom)\n");
 8009f1a:	485b      	ldr	r0, [pc, #364]	; (800a088 <slalom_run+0x2d8>)
 8009f1c:	f007 faf0 	bl	8011500 <puts>

					MF.FLAG.SCND = 1;
 8009f20:	4a52      	ldr	r2, [pc, #328]	; (800a06c <slalom_run+0x2bc>)
 8009f22:	8813      	ldrh	r3, [r2, #0]
 8009f24:	f043 0320 	orr.w	r3, r3, #32
 8009f28:	8013      	strh	r3, [r2, #0]
					run_mode = LOW;
 8009f2a:	4b51      	ldr	r3, [pc, #324]	; (800a070 <slalom_run+0x2c0>)
 8009f2c:	2201      	movs	r2, #1
 8009f2e:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 8009f30:	4b50      	ldr	r3, [pc, #320]	; (800a074 <slalom_run+0x2c4>)
 8009f32:	2200      	movs	r2, #0
 8009f34:	701a      	strb	r2, [r3, #0]
					goal_x = GOAL_X;
 8009f36:	4b52      	ldr	r3, [pc, #328]	; (800a080 <slalom_run+0x2d0>)
 8009f38:	2201      	movs	r2, #1
 8009f3a:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 8009f3c:	4b51      	ldr	r3, [pc, #324]	; (800a084 <slalom_run+0x2d4>)
 8009f3e:	2200      	movs	r2, #0
 8009f40:	701a      	strb	r2, [r3, #0]

					get_base();
 8009f42:	f006 fc43 	bl	80107cc <get_base>

					searchC();
 8009f46:	f003 fdd7 	bl	800daf8 <searchC>
					HAL_Delay(2000);
 8009f4a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8009f4e:	f7f7 f865 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 8009f52:	4b4c      	ldr	r3, [pc, #304]	; (800a084 <slalom_run+0x2d4>)
 8009f54:	2200      	movs	r2, #0
 8009f56:	701a      	strb	r2, [r3, #0]
 8009f58:	4b4a      	ldr	r3, [pc, #296]	; (800a084 <slalom_run+0x2d4>)
 8009f5a:	781a      	ldrb	r2, [r3, #0]
 8009f5c:	4b48      	ldr	r3, [pc, #288]	; (800a080 <slalom_run+0x2d0>)
 8009f5e:	701a      	strb	r2, [r3, #0]
					searchC();
 8009f60:	f003 fdca 	bl	800daf8 <searchC>

					goal_x = GOAL_X;
 8009f64:	4b46      	ldr	r3, [pc, #280]	; (800a080 <slalom_run+0x2d0>)
 8009f66:	2201      	movs	r2, #1
 8009f68:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 8009f6a:	4b46      	ldr	r3, [pc, #280]	; (800a084 <slalom_run+0x2d4>)
 8009f6c:	2200      	movs	r2, #0
 8009f6e:	701a      	strb	r2, [r3, #0]
					break;
 8009f70:	e180      	b.n	800a274 <slalom_run+0x4c4>

				case 2:
					//----二次探索スラローム走行+既知区間加速----
					printf("Second Run. (Slalom+accel)\n");
 8009f72:	4846      	ldr	r0, [pc, #280]	; (800a08c <slalom_run+0x2dc>)
 8009f74:	f007 fac4 	bl	8011500 <puts>

					MF.FLAG.SCND = 1;
 8009f78:	4a3c      	ldr	r2, [pc, #240]	; (800a06c <slalom_run+0x2bc>)
 8009f7a:	8813      	ldrh	r3, [r2, #0]
 8009f7c:	f043 0320 	orr.w	r3, r3, #32
 8009f80:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 8009f82:	4a3a      	ldr	r2, [pc, #232]	; (800a06c <slalom_run+0x2bc>)
 8009f84:	8813      	ldrh	r3, [r2, #0]
 8009f86:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009f8a:	8013      	strh	r3, [r2, #0]
					run_mode = LOW;
 8009f8c:	4b38      	ldr	r3, [pc, #224]	; (800a070 <slalom_run+0x2c0>)
 8009f8e:	2201      	movs	r2, #1
 8009f90:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 8009f92:	4b38      	ldr	r3, [pc, #224]	; (800a074 <slalom_run+0x2c4>)
 8009f94:	2200      	movs	r2, #0
 8009f96:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 8009f98:	4b37      	ldr	r3, [pc, #220]	; (800a078 <slalom_run+0x2c8>)
 8009f9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8009f9e:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 600;
 8009fa0:	4b36      	ldr	r3, [pc, #216]	; (800a07c <slalom_run+0x2cc>)
 8009fa2:	f44f 7216 	mov.w	r2, #600	; 0x258
 8009fa6:	801a      	strh	r2, [r3, #0]
					goal_x = GOAL_X;
 8009fa8:	4b35      	ldr	r3, [pc, #212]	; (800a080 <slalom_run+0x2d0>)
 8009faa:	2201      	movs	r2, #1
 8009fac:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 8009fae:	4b35      	ldr	r3, [pc, #212]	; (800a084 <slalom_run+0x2d4>)
 8009fb0:	2200      	movs	r2, #0
 8009fb2:	701a      	strb	r2, [r3, #0]

					get_base();
 8009fb4:	f006 fc0a 	bl	80107cc <get_base>

					searchD();
 8009fb8:	f003 ff0c 	bl	800ddd4 <searchD>
					HAL_Delay(2000);
 8009fbc:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8009fc0:	f7f7 f82c 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 8009fc4:	4b2f      	ldr	r3, [pc, #188]	; (800a084 <slalom_run+0x2d4>)
 8009fc6:	2200      	movs	r2, #0
 8009fc8:	701a      	strb	r2, [r3, #0]
 8009fca:	4b2e      	ldr	r3, [pc, #184]	; (800a084 <slalom_run+0x2d4>)
 8009fcc:	781a      	ldrb	r2, [r3, #0]
 8009fce:	4b2c      	ldr	r3, [pc, #176]	; (800a080 <slalom_run+0x2d0>)
 8009fd0:	701a      	strb	r2, [r3, #0]
					searchD();
 8009fd2:	f003 feff 	bl	800ddd4 <searchD>

					goal_x = GOAL_X;
 8009fd6:	4b2a      	ldr	r3, [pc, #168]	; (800a080 <slalom_run+0x2d0>)
 8009fd8:	2201      	movs	r2, #1
 8009fda:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 8009fdc:	4b29      	ldr	r3, [pc, #164]	; (800a084 <slalom_run+0x2d4>)
 8009fde:	2200      	movs	r2, #0
 8009fe0:	701a      	strb	r2, [r3, #0]
					break;
 8009fe2:	e147      	b.n	800a274 <slalom_run+0x4c4>

				case 3:
					//----二次探索スラローム走行+既知区間加速----
					printf("Second Run. (Slalom+accel)\n");
 8009fe4:	4829      	ldr	r0, [pc, #164]	; (800a08c <slalom_run+0x2dc>)
 8009fe6:	f007 fa8b 	bl	8011500 <puts>

					MF.FLAG.SCND = 1;
 8009fea:	4a20      	ldr	r2, [pc, #128]	; (800a06c <slalom_run+0x2bc>)
 8009fec:	8813      	ldrh	r3, [r2, #0]
 8009fee:	f043 0320 	orr.w	r3, r3, #32
 8009ff2:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 8009ff4:	4a1d      	ldr	r2, [pc, #116]	; (800a06c <slalom_run+0x2bc>)
 8009ff6:	8813      	ldrh	r3, [r2, #0]
 8009ff8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009ffc:	8013      	strh	r3, [r2, #0]
					run_mode = LOW;
 8009ffe:	4b1c      	ldr	r3, [pc, #112]	; (800a070 <slalom_run+0x2c0>)
 800a000:	2201      	movs	r2, #1
 800a002:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800a004:	4b1b      	ldr	r3, [pc, #108]	; (800a074 <slalom_run+0x2c4>)
 800a006:	2200      	movs	r2, #0
 800a008:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 800a00a:	4b1b      	ldr	r3, [pc, #108]	; (800a078 <slalom_run+0x2c8>)
 800a00c:	f241 3288 	movw	r2, #5000	; 0x1388
 800a010:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1000;
 800a012:	4b1a      	ldr	r3, [pc, #104]	; (800a07c <slalom_run+0x2cc>)
 800a014:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800a018:	801a      	strh	r2, [r3, #0]
					goal_x = GOAL_X;
 800a01a:	4b19      	ldr	r3, [pc, #100]	; (800a080 <slalom_run+0x2d0>)
 800a01c:	2201      	movs	r2, #1
 800a01e:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800a020:	4b18      	ldr	r3, [pc, #96]	; (800a084 <slalom_run+0x2d4>)
 800a022:	2200      	movs	r2, #0
 800a024:	701a      	strb	r2, [r3, #0]

					get_base();
 800a026:	f006 fbd1 	bl	80107cc <get_base>

					searchD();
 800a02a:	f003 fed3 	bl	800ddd4 <searchD>
					HAL_Delay(2000);
 800a02e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800a032:	f7f6 fff3 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800a036:	4b13      	ldr	r3, [pc, #76]	; (800a084 <slalom_run+0x2d4>)
 800a038:	2200      	movs	r2, #0
 800a03a:	701a      	strb	r2, [r3, #0]
 800a03c:	4b11      	ldr	r3, [pc, #68]	; (800a084 <slalom_run+0x2d4>)
 800a03e:	781a      	ldrb	r2, [r3, #0]
 800a040:	4b0f      	ldr	r3, [pc, #60]	; (800a080 <slalom_run+0x2d0>)
 800a042:	701a      	strb	r2, [r3, #0]
					searchD();
 800a044:	f003 fec6 	bl	800ddd4 <searchD>

					goal_x = GOAL_X;
 800a048:	4b0d      	ldr	r3, [pc, #52]	; (800a080 <slalom_run+0x2d0>)
 800a04a:	2201      	movs	r2, #1
 800a04c:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800a04e:	4b0d      	ldr	r3, [pc, #52]	; (800a084 <slalom_run+0x2d4>)
 800a050:	2200      	movs	r2, #0
 800a052:	701a      	strb	r2, [r3, #0]
					break;
 800a054:	e10e      	b.n	800a274 <slalom_run+0x4c4>
 800a056:	bf00      	nop
 800a058:	08012910 	.word	0x08012910
 800a05c:	20000aec 	.word	0x20000aec
 800a060:	08012654 	.word	0x08012654
 800a064:	40020000 	.word	0x40020000
 800a068:	08012834 	.word	0x08012834
 800a06c:	20000f68 	.word	0x20000f68
 800a070:	20000456 	.word	0x20000456
 800a074:	200015c8 	.word	0x200015c8
 800a078:	20000454 	.word	0x20000454
 800a07c:	20000f7c 	.word	0x20000f7c
 800a080:	20000bb0 	.word	0x20000bb0
 800a084:	20000b4c 	.word	0x20000b4c
 800a088:	08012928 	.word	0x08012928
 800a08c:	08012940 	.word	0x08012940

				case 4:
					//----二次探索スラローム走行+既知区間加速----
					printf("Second Run. (Slalom+accel)\n");
 800a090:	4879      	ldr	r0, [pc, #484]	; (800a278 <slalom_run+0x4c8>)
 800a092:	f007 fa35 	bl	8011500 <puts>

					MF.FLAG.SCND = 1;
 800a096:	4a79      	ldr	r2, [pc, #484]	; (800a27c <slalom_run+0x4cc>)
 800a098:	8813      	ldrh	r3, [r2, #0]
 800a09a:	f043 0320 	orr.w	r3, r3, #32
 800a09e:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800a0a0:	4a76      	ldr	r2, [pc, #472]	; (800a27c <slalom_run+0x4cc>)
 800a0a2:	8813      	ldrh	r3, [r2, #0]
 800a0a4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a0a8:	8013      	strh	r3, [r2, #0]
					run_mode = LOW;
 800a0aa:	4b75      	ldr	r3, [pc, #468]	; (800a280 <slalom_run+0x4d0>)
 800a0ac:	2201      	movs	r2, #1
 800a0ae:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800a0b0:	4b74      	ldr	r3, [pc, #464]	; (800a284 <slalom_run+0x4d4>)
 800a0b2:	2200      	movs	r2, #0
 800a0b4:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 800a0b6:	4b74      	ldr	r3, [pc, #464]	; (800a288 <slalom_run+0x4d8>)
 800a0b8:	f241 3288 	movw	r2, #5000	; 0x1388
 800a0bc:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1500;
 800a0be:	4b73      	ldr	r3, [pc, #460]	; (800a28c <slalom_run+0x4dc>)
 800a0c0:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800a0c4:	801a      	strh	r2, [r3, #0]
					goal_x = GOAL_X;
 800a0c6:	4b72      	ldr	r3, [pc, #456]	; (800a290 <slalom_run+0x4e0>)
 800a0c8:	2201      	movs	r2, #1
 800a0ca:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800a0cc:	4b71      	ldr	r3, [pc, #452]	; (800a294 <slalom_run+0x4e4>)
 800a0ce:	2200      	movs	r2, #0
 800a0d0:	701a      	strb	r2, [r3, #0]

					get_base();
 800a0d2:	f006 fb7b 	bl	80107cc <get_base>

					searchD();
 800a0d6:	f003 fe7d 	bl	800ddd4 <searchD>
					HAL_Delay(2000);
 800a0da:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800a0de:	f7f6 ff9d 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800a0e2:	4b6c      	ldr	r3, [pc, #432]	; (800a294 <slalom_run+0x4e4>)
 800a0e4:	2200      	movs	r2, #0
 800a0e6:	701a      	strb	r2, [r3, #0]
 800a0e8:	4b6a      	ldr	r3, [pc, #424]	; (800a294 <slalom_run+0x4e4>)
 800a0ea:	781a      	ldrb	r2, [r3, #0]
 800a0ec:	4b68      	ldr	r3, [pc, #416]	; (800a290 <slalom_run+0x4e0>)
 800a0ee:	701a      	strb	r2, [r3, #0]
					searchD();
 800a0f0:	f003 fe70 	bl	800ddd4 <searchD>

					goal_x = GOAL_X;
 800a0f4:	4b66      	ldr	r3, [pc, #408]	; (800a290 <slalom_run+0x4e0>)
 800a0f6:	2201      	movs	r2, #1
 800a0f8:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800a0fa:	4b66      	ldr	r3, [pc, #408]	; (800a294 <slalom_run+0x4e4>)
 800a0fc:	2200      	movs	r2, #0
 800a0fe:	701a      	strb	r2, [r3, #0]
					break;
 800a100:	e0b8      	b.n	800a274 <slalom_run+0x4c4>

				case 5:
					//----二次走行スラローム+直線優先----
					printf("High Speed Run. (Slalom)\n");
 800a102:	4865      	ldr	r0, [pc, #404]	; (800a298 <slalom_run+0x4e8>)
 800a104:	f007 f9fc 	bl	8011500 <puts>

					MF.FLAG.SCND = 1;
 800a108:	4a5c      	ldr	r2, [pc, #368]	; (800a27c <slalom_run+0x4cc>)
 800a10a:	8813      	ldrh	r3, [r2, #0]
 800a10c:	f043 0320 	orr.w	r3, r3, #32
 800a110:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800a112:	4a5a      	ldr	r2, [pc, #360]	; (800a27c <slalom_run+0x4cc>)
 800a114:	8813      	ldrh	r3, [r2, #0]
 800a116:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800a11a:	8013      	strh	r3, [r2, #0]
					run_mode = LOW;
 800a11c:	4b58      	ldr	r3, [pc, #352]	; (800a280 <slalom_run+0x4d0>)
 800a11e:	2201      	movs	r2, #1
 800a120:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800a122:	4b58      	ldr	r3, [pc, #352]	; (800a284 <slalom_run+0x4d4>)
 800a124:	2200      	movs	r2, #0
 800a126:	701a      	strb	r2, [r3, #0]
					goal_x = GOAL_X;
 800a128:	4b59      	ldr	r3, [pc, #356]	; (800a290 <slalom_run+0x4e0>)
 800a12a:	2201      	movs	r2, #1
 800a12c:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800a12e:	4b59      	ldr	r3, [pc, #356]	; (800a294 <slalom_run+0x4e4>)
 800a130:	2200      	movs	r2, #0
 800a132:	701a      	strb	r2, [r3, #0]

					get_base();
 800a134:	f006 fb4a 	bl	80107cc <get_base>

					HAL_Delay(5000);
 800a138:	f241 3088 	movw	r0, #5000	; 0x1388
 800a13c:	f7f6 ff6e 	bl	800101c <HAL_Delay>
					searchC();
 800a140:	f003 fcda 	bl	800daf8 <searchC>
					HAL_Delay(2000);
 800a144:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800a148:	f7f6 ff68 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800a14c:	4b51      	ldr	r3, [pc, #324]	; (800a294 <slalom_run+0x4e4>)
 800a14e:	2200      	movs	r2, #0
 800a150:	701a      	strb	r2, [r3, #0]
 800a152:	4b50      	ldr	r3, [pc, #320]	; (800a294 <slalom_run+0x4e4>)
 800a154:	781a      	ldrb	r2, [r3, #0]
 800a156:	4b4e      	ldr	r3, [pc, #312]	; (800a290 <slalom_run+0x4e0>)
 800a158:	701a      	strb	r2, [r3, #0]
					searchC();
 800a15a:	f003 fccd 	bl	800daf8 <searchC>

					goal_x = GOAL_X;
 800a15e:	4b4c      	ldr	r3, [pc, #304]	; (800a290 <slalom_run+0x4e0>)
 800a160:	2201      	movs	r2, #1
 800a162:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800a164:	4b4b      	ldr	r3, [pc, #300]	; (800a294 <slalom_run+0x4e4>)
 800a166:	2200      	movs	r2, #0
 800a168:	701a      	strb	r2, [r3, #0]
					break;
 800a16a:	e083      	b.n	800a274 <slalom_run+0x4c4>

				case 6:
					//----二次走行スラロームHigh Speed+直線優先+既知区間加速----
					printf("High Speed Run. (Slalom)\n");
 800a16c:	484a      	ldr	r0, [pc, #296]	; (800a298 <slalom_run+0x4e8>)
 800a16e:	f007 f9c7 	bl	8011500 <puts>

					MF.FLAG.SCND = 1;
 800a172:	4a42      	ldr	r2, [pc, #264]	; (800a27c <slalom_run+0x4cc>)
 800a174:	8813      	ldrh	r3, [r2, #0]
 800a176:	f043 0320 	orr.w	r3, r3, #32
 800a17a:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800a17c:	4a3f      	ldr	r2, [pc, #252]	; (800a27c <slalom_run+0x4cc>)
 800a17e:	8813      	ldrh	r3, [r2, #0]
 800a180:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800a184:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800a186:	4a3d      	ldr	r2, [pc, #244]	; (800a27c <slalom_run+0x4cc>)
 800a188:	8813      	ldrh	r3, [r2, #0]
 800a18a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a18e:	8013      	strh	r3, [r2, #0]
					run_mode = HIGH;
 800a190:	4b3b      	ldr	r3, [pc, #236]	; (800a280 <slalom_run+0x4d0>)
 800a192:	2203      	movs	r2, #3
 800a194:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800a196:	4b3b      	ldr	r3, [pc, #236]	; (800a284 <slalom_run+0x4d4>)
 800a198:	2200      	movs	r2, #0
 800a19a:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 800a19c:	4b3a      	ldr	r3, [pc, #232]	; (800a288 <slalom_run+0x4d8>)
 800a19e:	f241 3288 	movw	r2, #5000	; 0x1388
 800a1a2:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1200;
 800a1a4:	4b39      	ldr	r3, [pc, #228]	; (800a28c <slalom_run+0x4dc>)
 800a1a6:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 800a1aa:	801a      	strh	r2, [r3, #0]
					goal_x = GOAL_X;
 800a1ac:	4b38      	ldr	r3, [pc, #224]	; (800a290 <slalom_run+0x4e0>)
 800a1ae:	2201      	movs	r2, #1
 800a1b0:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800a1b2:	4b38      	ldr	r3, [pc, #224]	; (800a294 <slalom_run+0x4e4>)
 800a1b4:	2200      	movs	r2, #0
 800a1b6:	701a      	strb	r2, [r3, #0]

					get_base();
 800a1b8:	f006 fb08 	bl	80107cc <get_base>

					HAL_Delay(5000);
 800a1bc:	f241 3088 	movw	r0, #5000	; 0x1388
 800a1c0:	f7f6 ff2c 	bl	800101c <HAL_Delay>
					searchD();
 800a1c4:	f003 fe06 	bl	800ddd4 <searchD>
					HAL_Delay(2000);
 800a1c8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800a1cc:	f7f6 ff26 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800a1d0:	4b30      	ldr	r3, [pc, #192]	; (800a294 <slalom_run+0x4e4>)
 800a1d2:	2200      	movs	r2, #0
 800a1d4:	701a      	strb	r2, [r3, #0]
 800a1d6:	4b2f      	ldr	r3, [pc, #188]	; (800a294 <slalom_run+0x4e4>)
 800a1d8:	781a      	ldrb	r2, [r3, #0]
 800a1da:	4b2d      	ldr	r3, [pc, #180]	; (800a290 <slalom_run+0x4e0>)
 800a1dc:	701a      	strb	r2, [r3, #0]
					searchD();
 800a1de:	f003 fdf9 	bl	800ddd4 <searchD>

					goal_x = GOAL_X;
 800a1e2:	4b2b      	ldr	r3, [pc, #172]	; (800a290 <slalom_run+0x4e0>)
 800a1e4:	2201      	movs	r2, #1
 800a1e6:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800a1e8:	4b2a      	ldr	r3, [pc, #168]	; (800a294 <slalom_run+0x4e4>)
 800a1ea:	2200      	movs	r2, #0
 800a1ec:	701a      	strb	r2, [r3, #0]
					break;
 800a1ee:	e041      	b.n	800a274 <slalom_run+0x4c4>

				case 7:
					//----二次走行スラロームHigh Speed+直線優先+既知区間加速----
					printf("High Speed Run. (Slalom)\n");
 800a1f0:	4829      	ldr	r0, [pc, #164]	; (800a298 <slalom_run+0x4e8>)
 800a1f2:	f007 f985 	bl	8011500 <puts>

					MF.FLAG.SCND = 1;
 800a1f6:	4a21      	ldr	r2, [pc, #132]	; (800a27c <slalom_run+0x4cc>)
 800a1f8:	8813      	ldrh	r3, [r2, #0]
 800a1fa:	f043 0320 	orr.w	r3, r3, #32
 800a1fe:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800a200:	4a1e      	ldr	r2, [pc, #120]	; (800a27c <slalom_run+0x4cc>)
 800a202:	8813      	ldrh	r3, [r2, #0]
 800a204:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800a208:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800a20a:	4a1c      	ldr	r2, [pc, #112]	; (800a27c <slalom_run+0x4cc>)
 800a20c:	8813      	ldrh	r3, [r2, #0]
 800a20e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a212:	8013      	strh	r3, [r2, #0]
					run_mode = HIGH;
 800a214:	4b1a      	ldr	r3, [pc, #104]	; (800a280 <slalom_run+0x4d0>)
 800a216:	2203      	movs	r2, #3
 800a218:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800a21a:	4b1a      	ldr	r3, [pc, #104]	; (800a284 <slalom_run+0x4d4>)
 800a21c:	2200      	movs	r2, #0
 800a21e:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 800a220:	4b19      	ldr	r3, [pc, #100]	; (800a288 <slalom_run+0x4d8>)
 800a222:	f241 3288 	movw	r2, #5000	; 0x1388
 800a226:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1600;
 800a228:	4b18      	ldr	r3, [pc, #96]	; (800a28c <slalom_run+0x4dc>)
 800a22a:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800a22e:	801a      	strh	r2, [r3, #0]
					goal_x = GOAL_X;
 800a230:	4b17      	ldr	r3, [pc, #92]	; (800a290 <slalom_run+0x4e0>)
 800a232:	2201      	movs	r2, #1
 800a234:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800a236:	4b17      	ldr	r3, [pc, #92]	; (800a294 <slalom_run+0x4e4>)
 800a238:	2200      	movs	r2, #0
 800a23a:	701a      	strb	r2, [r3, #0]

					get_base();
 800a23c:	f006 fac6 	bl	80107cc <get_base>

					HAL_Delay(5000);
 800a240:	f241 3088 	movw	r0, #5000	; 0x1388
 800a244:	f7f6 feea 	bl	800101c <HAL_Delay>
					searchD();
 800a248:	f003 fdc4 	bl	800ddd4 <searchD>
					HAL_Delay(2000);
 800a24c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800a250:	f7f6 fee4 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800a254:	4b0f      	ldr	r3, [pc, #60]	; (800a294 <slalom_run+0x4e4>)
 800a256:	2200      	movs	r2, #0
 800a258:	701a      	strb	r2, [r3, #0]
 800a25a:	4b0e      	ldr	r3, [pc, #56]	; (800a294 <slalom_run+0x4e4>)
 800a25c:	781a      	ldrb	r2, [r3, #0]
 800a25e:	4b0c      	ldr	r3, [pc, #48]	; (800a290 <slalom_run+0x4e0>)
 800a260:	701a      	strb	r2, [r3, #0]
					searchD();
 800a262:	f003 fdb7 	bl	800ddd4 <searchD>

					goal_x = GOAL_X;
 800a266:	4b0a      	ldr	r3, [pc, #40]	; (800a290 <slalom_run+0x4e0>)
 800a268:	2201      	movs	r2, #1
 800a26a:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800a26c:	4b09      	ldr	r3, [pc, #36]	; (800a294 <slalom_run+0x4e4>)
 800a26e:	2200      	movs	r2, #0
 800a270:	701a      	strb	r2, [r3, #0]
					break;
 800a272:	bf00      	nop
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 800a274:	e5a5      	b.n	8009dc2 <slalom_run+0x12>
 800a276:	bf00      	nop
 800a278:	08012940 	.word	0x08012940
 800a27c:	20000f68 	.word	0x20000f68
 800a280:	20000456 	.word	0x20000456
 800a284:	200015c8 	.word	0x200015c8
 800a288:	20000454 	.word	0x20000454
 800a28c:	20000f7c 	.word	0x20000f7c
 800a290:	20000bb0 	.word	0x20000bb0
 800a294:	20000b4c 	.word	0x20000b4c
 800a298:	0801295c 	.word	0x0801295c

0800a29c <sample_course_run>:
//sample_course_run
// 試験走行モード
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void sample_course_run(void){
 800a29c:	b580      	push	{r7, lr}
 800a29e:	b082      	sub	sp, #8
 800a2a0:	af00      	add	r7, sp, #0

	int mode = 0;
 800a2a2:	2300      	movs	r3, #0
 800a2a4:	607b      	str	r3, [r7, #4]
	printf("Sample Course Run, Mode : %d\n", mode);
 800a2a6:	6879      	ldr	r1, [r7, #4]
 800a2a8:	488f      	ldr	r0, [pc, #572]	; (800a4e8 <sample_course_run+0x24c>)
 800a2aa:	f007 f8b5 	bl	8011418 <iprintf>

	while(1){
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	b2db      	uxtb	r3, r3
 800a2b2:	f003 0301 	and.w	r3, r3, #1
 800a2b6:	b2d8      	uxtb	r0, r3
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	b2db      	uxtb	r3, r3
 800a2bc:	f003 0302 	and.w	r3, r3, #2
 800a2c0:	b2d9      	uxtb	r1, r3
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	b2db      	uxtb	r3, r3
 800a2c6:	f003 0304 	and.w	r3, r3, #4
 800a2ca:	b2db      	uxtb	r3, r3
 800a2cc:	461a      	mov	r2, r3
 800a2ce:	f006 fad5 	bl	801087c <led_write>
		  if(dist_r >= 20){
 800a2d2:	4b86      	ldr	r3, [pc, #536]	; (800a4ec <sample_course_run+0x250>)
 800a2d4:	edd3 7a00 	vldr	s15, [r3]
 800a2d8:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 800a2dc:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a2e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a2e4:	db0f      	blt.n	800a306 <sample_course_run+0x6a>
			  mode++;
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	3301      	adds	r3, #1
 800a2ea:	607b      	str	r3, [r7, #4]
			  dist_r = 0;
 800a2ec:	4b7f      	ldr	r3, [pc, #508]	; (800a4ec <sample_course_run+0x250>)
 800a2ee:	f04f 0200 	mov.w	r2, #0
 800a2f2:	601a      	str	r2, [r3, #0]
			  if(mode > 7){
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	2b07      	cmp	r3, #7
 800a2f8:	dd01      	ble.n	800a2fe <sample_course_run+0x62>
				  mode = 0;
 800a2fa:	2300      	movs	r3, #0
 800a2fc:	607b      	str	r3, [r7, #4]
			  }
			  printf("Mode : %d\n", mode);
 800a2fe:	6879      	ldr	r1, [r7, #4]
 800a300:	487b      	ldr	r0, [pc, #492]	; (800a4f0 <sample_course_run+0x254>)
 800a302:	f007 f889 	bl	8011418 <iprintf>
		  }
		  if(dist_r <= -20){
 800a306:	4b79      	ldr	r3, [pc, #484]	; (800a4ec <sample_course_run+0x250>)
 800a308:	edd3 7a00 	vldr	s15, [r3]
 800a30c:	eebb 7a04 	vmov.f32	s14, #180	; 0xc1a00000 -20.0
 800a310:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a314:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a318:	d80f      	bhi.n	800a33a <sample_course_run+0x9e>
			  mode--;
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	3b01      	subs	r3, #1
 800a31e:	607b      	str	r3, [r7, #4]
			  dist_r = 0;
 800a320:	4b72      	ldr	r3, [pc, #456]	; (800a4ec <sample_course_run+0x250>)
 800a322:	f04f 0200 	mov.w	r2, #0
 800a326:	601a      	str	r2, [r3, #0]
			  if(mode < 0){
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	da01      	bge.n	800a332 <sample_course_run+0x96>
				  mode = 7;
 800a32e:	2307      	movs	r3, #7
 800a330:	607b      	str	r3, [r7, #4]
			  }
			  printf("Mode : %d\n", mode);
 800a332:	6879      	ldr	r1, [r7, #4]
 800a334:	486e      	ldr	r0, [pc, #440]	; (800a4f0 <sample_course_run+0x254>)
 800a336:	f007 f86f 	bl	8011418 <iprintf>
		  }
		  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET){
 800a33a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800a33e:	486d      	ldr	r0, [pc, #436]	; (800a4f4 <sample_course_run+0x258>)
 800a340:	f7f7 ffc8 	bl	80022d4 <HAL_GPIO_ReadPin>
 800a344:	4603      	mov	r3, r0
 800a346:	2b00      	cmp	r3, #0
 800a348:	d1b1      	bne.n	800a2ae <sample_course_run+0x12>
			  HAL_Delay(50);
 800a34a:	2032      	movs	r0, #50	; 0x32
 800a34c:	f7f6 fe66 	bl	800101c <HAL_Delay>
			  while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET);
 800a350:	bf00      	nop
 800a352:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800a356:	4867      	ldr	r0, [pc, #412]	; (800a4f4 <sample_course_run+0x258>)
 800a358:	f7f7 ffbc 	bl	80022d4 <HAL_GPIO_ReadPin>
 800a35c:	4603      	mov	r3, r0
 800a35e:	2b00      	cmp	r3, #0
 800a360:	d0f7      	beq.n	800a352 <sample_course_run+0xb6>
			  drive_ready();
 800a362:	f7fa fc8d 	bl	8004c80 <drive_ready>

			  switch(mode){
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	2b07      	cmp	r3, #7
 800a36a:	d8a0      	bhi.n	800a2ae <sample_course_run+0x12>
 800a36c:	a201      	add	r2, pc, #4	; (adr r2, 800a374 <sample_course_run+0xd8>)
 800a36e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a372:	bf00      	nop
 800a374:	0800a395 	.word	0x0800a395
 800a378:	0800a39b 	.word	0x0800a39b
 800a37c:	0800a3bd 	.word	0x0800a3bd
 800a380:	0800a3df 	.word	0x0800a3df
 800a384:	0800a2af 	.word	0x0800a2af
 800a388:	0800a3f1 	.word	0x0800a3f1
 800a38c:	0800a46b 	.word	0x0800a46b
 800a390:	0800a2af 	.word	0x0800a2af
				case 0:
					get_base();
 800a394:	f006 fa1a 	bl	80107cc <get_base>
					break;
 800a398:	e0a4      	b.n	800a4e4 <sample_course_run+0x248>

				case 1:
					//----サンプルコース1　超信地----
					half_sectionA();
 800a39a:	f7fb fb73 	bl	8005a84 <half_sectionA>
					half_sectionD();
 800a39e:	f7fb fbbb 	bl	8005b18 <half_sectionD>
					rotate_R90();
 800a3a2:	f7fb fe61 	bl	8006068 <rotate_R90>
					half_sectionA();
 800a3a6:	f7fb fb6d 	bl	8005a84 <half_sectionA>
					half_sectionD();
 800a3aa:	f7fb fbb5 	bl	8005b18 <half_sectionD>
					rotate_R90();
 800a3ae:	f7fb fe5b 	bl	8006068 <rotate_R90>
					half_sectionA();
 800a3b2:	f7fb fb67 	bl	8005a84 <half_sectionA>
					half_sectionD();
 800a3b6:	f7fb fbaf 	bl	8005b18 <half_sectionD>
					break;
 800a3ba:	e093      	b.n	800a4e4 <sample_course_run+0x248>

				case 2:
					//----サンプルコース1　超信地----
					half_sectionA();
 800a3bc:	f7fb fb62 	bl	8005a84 <half_sectionA>
					half_sectionD();
 800a3c0:	f7fb fbaa 	bl	8005b18 <half_sectionD>
					rotate_L90();
 800a3c4:	f7fb ff2c 	bl	8006220 <rotate_L90>
					half_sectionA();
 800a3c8:	f7fb fb5c 	bl	8005a84 <half_sectionA>
					half_sectionD();
 800a3cc:	f7fb fba4 	bl	8005b18 <half_sectionD>
					rotate_L90();
 800a3d0:	f7fb ff26 	bl	8006220 <rotate_L90>
					half_sectionA();
 800a3d4:	f7fb fb56 	bl	8005a84 <half_sectionA>
					half_sectionD();
 800a3d8:	f7fb fb9e 	bl	8005b18 <half_sectionD>
					break;
 800a3dc:	e082      	b.n	800a4e4 <sample_course_run+0x248>

				case 3:
					//---サンプルコース2　スラローム----
					half_sectionA();
 800a3de:	f7fb fb51 	bl	8005a84 <half_sectionA>
					slalom_R90();
 800a3e2:	f7fc f8d1 	bl	8006588 <slalom_R90>
					slalom_R90();
 800a3e6:	f7fc f8cf 	bl	8006588 <slalom_R90>
					half_sectionD();
 800a3ea:	f7fb fb95 	bl	8005b18 <half_sectionD>
					break;
 800a3ee:	e079      	b.n	800a4e4 <sample_course_run+0x248>
				case 4:
					break;

				case 5:
					//----スラローム走行&全面探索スラローム走行----
					printf("Slalom Run & All Map Run.\n");
 800a3f0:	4841      	ldr	r0, [pc, #260]	; (800a4f8 <sample_course_run+0x25c>)
 800a3f2:	f007 f885 	bl	8011500 <puts>

					MF.FLAG.SCND = 0;
 800a3f6:	4a41      	ldr	r2, [pc, #260]	; (800a4fc <sample_course_run+0x260>)
 800a3f8:	8813      	ldrh	r3, [r2, #0]
 800a3fa:	f36f 1345 	bfc	r3, #5, #1
 800a3fe:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800a400:	4a3e      	ldr	r2, [pc, #248]	; (800a4fc <sample_course_run+0x260>)
 800a402:	8813      	ldrh	r3, [r2, #0]
 800a404:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a408:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800a40a:	4a3c      	ldr	r2, [pc, #240]	; (800a4fc <sample_course_run+0x260>)
 800a40c:	8813      	ldrh	r3, [r2, #0]
 800a40e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800a412:	8013      	strh	r3, [r2, #0]
					start_mode = 0;
 800a414:	4b3a      	ldr	r3, [pc, #232]	; (800a500 <sample_course_run+0x264>)
 800a416:	2200      	movs	r2, #0
 800a418:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 800a41a:	4b3a      	ldr	r3, [pc, #232]	; (800a504 <sample_course_run+0x268>)
 800a41c:	f241 3288 	movw	r2, #5000	; 0x1388
 800a420:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 800;
 800a422:	4b39      	ldr	r3, [pc, #228]	; (800a508 <sample_course_run+0x26c>)
 800a424:	f44f 7248 	mov.w	r2, #800	; 0x320
 800a428:	801a      	strh	r2, [r3, #0]

					goal_x = GOAL_X;
 800a42a:	4b38      	ldr	r3, [pc, #224]	; (800a50c <sample_course_run+0x270>)
 800a42c:	2201      	movs	r2, #1
 800a42e:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800a430:	4b37      	ldr	r3, [pc, #220]	; (800a510 <sample_course_run+0x274>)
 800a432:	2200      	movs	r2, #0
 800a434:	701a      	strb	r2, [r3, #0]

					get_base();
 800a436:	f006 f9c9 	bl	80107cc <get_base>

					searchC();
 800a43a:	f003 fb5d 	bl	800daf8 <searchC>
					HAL_Delay(2000);
 800a43e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800a442:	f7f6 fdeb 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800a446:	4b32      	ldr	r3, [pc, #200]	; (800a510 <sample_course_run+0x274>)
 800a448:	2200      	movs	r2, #0
 800a44a:	701a      	strb	r2, [r3, #0]
 800a44c:	4b30      	ldr	r3, [pc, #192]	; (800a510 <sample_course_run+0x274>)
 800a44e:	781a      	ldrb	r2, [r3, #0]
 800a450:	4b2e      	ldr	r3, [pc, #184]	; (800a50c <sample_course_run+0x270>)
 800a452:	701a      	strb	r2, [r3, #0]
					searchE();
 800a454:	f003 fdda 	bl	800e00c <searchE>

					searchC();
 800a458:	f003 fb4e 	bl	800daf8 <searchC>
					goal_x = GOAL_X;
 800a45c:	4b2b      	ldr	r3, [pc, #172]	; (800a50c <sample_course_run+0x270>)
 800a45e:	2201      	movs	r2, #1
 800a460:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800a462:	4b2b      	ldr	r3, [pc, #172]	; (800a510 <sample_course_run+0x274>)
 800a464:	2200      	movs	r2, #0
 800a466:	701a      	strb	r2, [r3, #0]

					break;
 800a468:	e03c      	b.n	800a4e4 <sample_course_run+0x248>

				case 6:
					//----スラローム走行&全面探索スラローム走行----
					printf("Slalom Run & All Map Run.\n");
 800a46a:	4823      	ldr	r0, [pc, #140]	; (800a4f8 <sample_course_run+0x25c>)
 800a46c:	f007 f848 	bl	8011500 <puts>

					MF.FLAG.SCND = 0;
 800a470:	4a22      	ldr	r2, [pc, #136]	; (800a4fc <sample_course_run+0x260>)
 800a472:	8813      	ldrh	r3, [r2, #0]
 800a474:	f36f 1345 	bfc	r3, #5, #1
 800a478:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800a47a:	4a20      	ldr	r2, [pc, #128]	; (800a4fc <sample_course_run+0x260>)
 800a47c:	8813      	ldrh	r3, [r2, #0]
 800a47e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a482:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800a484:	4a1d      	ldr	r2, [pc, #116]	; (800a4fc <sample_course_run+0x260>)
 800a486:	8813      	ldrh	r3, [r2, #0]
 800a488:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800a48c:	8013      	strh	r3, [r2, #0]
					start_mode = 0;
 800a48e:	4b1c      	ldr	r3, [pc, #112]	; (800a500 <sample_course_run+0x264>)
 800a490:	2200      	movs	r2, #0
 800a492:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 800a494:	4b1b      	ldr	r3, [pc, #108]	; (800a504 <sample_course_run+0x268>)
 800a496:	f241 3288 	movw	r2, #5000	; 0x1388
 800a49a:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 800;
 800a49c:	4b1a      	ldr	r3, [pc, #104]	; (800a508 <sample_course_run+0x26c>)
 800a49e:	f44f 7248 	mov.w	r2, #800	; 0x320
 800a4a2:	801a      	strh	r2, [r3, #0]
					goal_x = 7;
 800a4a4:	4b19      	ldr	r3, [pc, #100]	; (800a50c <sample_course_run+0x270>)
 800a4a6:	2207      	movs	r2, #7
 800a4a8:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800a4aa:	4b19      	ldr	r3, [pc, #100]	; (800a510 <sample_course_run+0x274>)
 800a4ac:	2207      	movs	r2, #7
 800a4ae:	701a      	strb	r2, [r3, #0]

					get_base();
 800a4b0:	f006 f98c 	bl	80107cc <get_base>

					searchC();
 800a4b4:	f003 fb20 	bl	800daf8 <searchC>
					HAL_Delay(2000);
 800a4b8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800a4bc:	f7f6 fdae 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800a4c0:	4b13      	ldr	r3, [pc, #76]	; (800a510 <sample_course_run+0x274>)
 800a4c2:	2200      	movs	r2, #0
 800a4c4:	701a      	strb	r2, [r3, #0]
 800a4c6:	4b12      	ldr	r3, [pc, #72]	; (800a510 <sample_course_run+0x274>)
 800a4c8:	781a      	ldrb	r2, [r3, #0]
 800a4ca:	4b10      	ldr	r3, [pc, #64]	; (800a50c <sample_course_run+0x270>)
 800a4cc:	701a      	strb	r2, [r3, #0]
					searchE();
 800a4ce:	f003 fd9d 	bl	800e00c <searchE>

					searchC();
 800a4d2:	f003 fb11 	bl	800daf8 <searchC>
					goal_x = 7;
 800a4d6:	4b0d      	ldr	r3, [pc, #52]	; (800a50c <sample_course_run+0x270>)
 800a4d8:	2207      	movs	r2, #7
 800a4da:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800a4dc:	4b0c      	ldr	r3, [pc, #48]	; (800a510 <sample_course_run+0x274>)
 800a4de:	2207      	movs	r2, #7
 800a4e0:	701a      	strb	r2, [r3, #0]

					break;
 800a4e2:	bf00      	nop
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 800a4e4:	e6e3      	b.n	800a2ae <sample_course_run+0x12>
 800a4e6:	bf00      	nop
 800a4e8:	08012978 	.word	0x08012978
 800a4ec:	20000aec 	.word	0x20000aec
 800a4f0:	08012654 	.word	0x08012654
 800a4f4:	40020000 	.word	0x40020000
 800a4f8:	08012998 	.word	0x08012998
 800a4fc:	20000f68 	.word	0x20000f68
 800a500:	200015c8 	.word	0x200015c8
 800a504:	20000454 	.word	0x20000454
 800a508:	20000f7c 	.word	0x20000f7c
 800a50c:	20000bb0 	.word	0x20000bb0
 800a510:	20000b4c 	.word	0x20000b4c

0800a514 <perfect_slalom>:
//perfect_slalom
// 本番用スラローム走行モード
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void perfect_slalom(void){
 800a514:	b580      	push	{r7, lr}
 800a516:	b082      	sub	sp, #8
 800a518:	af00      	add	r7, sp, #0

	int mode = 0;
 800a51a:	2300      	movs	r3, #0
 800a51c:	607b      	str	r3, [r7, #4]
	printf("Perfect Slalom, Mode : %d\n", mode);
 800a51e:	6879      	ldr	r1, [r7, #4]
 800a520:	4898      	ldr	r0, [pc, #608]	; (800a784 <perfect_slalom+0x270>)
 800a522:	f006 ff79 	bl	8011418 <iprintf>

	while(1){
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	b2db      	uxtb	r3, r3
 800a52a:	f003 0301 	and.w	r3, r3, #1
 800a52e:	b2d8      	uxtb	r0, r3
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	b2db      	uxtb	r3, r3
 800a534:	f003 0302 	and.w	r3, r3, #2
 800a538:	b2d9      	uxtb	r1, r3
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	b2db      	uxtb	r3, r3
 800a53e:	f003 0304 	and.w	r3, r3, #4
 800a542:	b2db      	uxtb	r3, r3
 800a544:	461a      	mov	r2, r3
 800a546:	f006 f999 	bl	801087c <led_write>
		  if(dist_r >= 20){
 800a54a:	4b8f      	ldr	r3, [pc, #572]	; (800a788 <perfect_slalom+0x274>)
 800a54c:	edd3 7a00 	vldr	s15, [r3]
 800a550:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 800a554:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a558:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a55c:	db0f      	blt.n	800a57e <perfect_slalom+0x6a>
			  mode++;
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	3301      	adds	r3, #1
 800a562:	607b      	str	r3, [r7, #4]
			  dist_r = 0;
 800a564:	4b88      	ldr	r3, [pc, #544]	; (800a788 <perfect_slalom+0x274>)
 800a566:	f04f 0200 	mov.w	r2, #0
 800a56a:	601a      	str	r2, [r3, #0]
			  if(mode > 7){
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	2b07      	cmp	r3, #7
 800a570:	dd01      	ble.n	800a576 <perfect_slalom+0x62>
				  mode = 0;
 800a572:	2300      	movs	r3, #0
 800a574:	607b      	str	r3, [r7, #4]
			  }
			  printf("Mode : %d\n", mode);
 800a576:	6879      	ldr	r1, [r7, #4]
 800a578:	4884      	ldr	r0, [pc, #528]	; (800a78c <perfect_slalom+0x278>)
 800a57a:	f006 ff4d 	bl	8011418 <iprintf>
		  }
		  if(dist_r <= -20){
 800a57e:	4b82      	ldr	r3, [pc, #520]	; (800a788 <perfect_slalom+0x274>)
 800a580:	edd3 7a00 	vldr	s15, [r3]
 800a584:	eebb 7a04 	vmov.f32	s14, #180	; 0xc1a00000 -20.0
 800a588:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a58c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a590:	d80f      	bhi.n	800a5b2 <perfect_slalom+0x9e>
			  mode--;
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	3b01      	subs	r3, #1
 800a596:	607b      	str	r3, [r7, #4]
			  dist_r = 0;
 800a598:	4b7b      	ldr	r3, [pc, #492]	; (800a788 <perfect_slalom+0x274>)
 800a59a:	f04f 0200 	mov.w	r2, #0
 800a59e:	601a      	str	r2, [r3, #0]
			  if(mode < 0){
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	da01      	bge.n	800a5aa <perfect_slalom+0x96>
				  mode = 7;
 800a5a6:	2307      	movs	r3, #7
 800a5a8:	607b      	str	r3, [r7, #4]
			  }
			  printf("Mode : %d\n", mode);
 800a5aa:	6879      	ldr	r1, [r7, #4]
 800a5ac:	4877      	ldr	r0, [pc, #476]	; (800a78c <perfect_slalom+0x278>)
 800a5ae:	f006 ff33 	bl	8011418 <iprintf>
		  }
		  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET){
 800a5b2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800a5b6:	4876      	ldr	r0, [pc, #472]	; (800a790 <perfect_slalom+0x27c>)
 800a5b8:	f7f7 fe8c 	bl	80022d4 <HAL_GPIO_ReadPin>
 800a5bc:	4603      	mov	r3, r0
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	d1b1      	bne.n	800a526 <perfect_slalom+0x12>
			  HAL_Delay(50);
 800a5c2:	2032      	movs	r0, #50	; 0x32
 800a5c4:	f7f6 fd2a 	bl	800101c <HAL_Delay>
			  while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET);
 800a5c8:	bf00      	nop
 800a5ca:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800a5ce:	4870      	ldr	r0, [pc, #448]	; (800a790 <perfect_slalom+0x27c>)
 800a5d0:	f7f7 fe80 	bl	80022d4 <HAL_GPIO_ReadPin>
 800a5d4:	4603      	mov	r3, r0
 800a5d6:	2b00      	cmp	r3, #0
 800a5d8:	d0f7      	beq.n	800a5ca <perfect_slalom+0xb6>
			  drive_ready();
 800a5da:	f7fa fb51 	bl	8004c80 <drive_ready>

			  switch(mode){
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	2b07      	cmp	r3, #7
 800a5e2:	d8a0      	bhi.n	800a526 <perfect_slalom+0x12>
 800a5e4:	a201      	add	r2, pc, #4	; (adr r2, 800a5ec <perfect_slalom+0xd8>)
 800a5e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5ea:	bf00      	nop
 800a5ec:	0800a527 	.word	0x0800a527
 800a5f0:	0800a60d 	.word	0x0800a60d
 800a5f4:	0800a68f 	.word	0x0800a68f
 800a5f8:	0800a711 	.word	0x0800a711
 800a5fc:	0800a7c1 	.word	0x0800a7c1
 800a600:	0800a843 	.word	0x0800a843
 800a604:	0800a8c5 	.word	0x0800a8c5
 800a608:	0800a947 	.word	0x0800a947
				case 0:
					break;

				case 1:
					//----a一次探索スラローム走行----
					printf("First Run.\n");
 800a60c:	4861      	ldr	r0, [pc, #388]	; (800a794 <perfect_slalom+0x280>)
 800a60e:	f006 ff77 	bl	8011500 <puts>
					MF.FLAG.SCND = 0;
 800a612:	4a61      	ldr	r2, [pc, #388]	; (800a798 <perfect_slalom+0x284>)
 800a614:	8813      	ldrh	r3, [r2, #0]
 800a616:	f36f 1345 	bfc	r3, #5, #1
 800a61a:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800a61c:	4a5e      	ldr	r2, [pc, #376]	; (800a798 <perfect_slalom+0x284>)
 800a61e:	8813      	ldrh	r3, [r2, #0]
 800a620:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a624:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 0;
 800a626:	4a5c      	ldr	r2, [pc, #368]	; (800a798 <perfect_slalom+0x284>)
 800a628:	8813      	ldrh	r3, [r2, #0]
 800a62a:	f36f 238a 	bfc	r3, #10, #1
 800a62e:	8013      	strh	r3, [r2, #0]
					run_mode = LOW;
 800a630:	4b5a      	ldr	r3, [pc, #360]	; (800a79c <perfect_slalom+0x288>)
 800a632:	2201      	movs	r2, #1
 800a634:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800a636:	4b5a      	ldr	r3, [pc, #360]	; (800a7a0 <perfect_slalom+0x28c>)
 800a638:	2200      	movs	r2, #0
 800a63a:	701a      	strb	r2, [r3, #0]
					goal_mode = 2;
 800a63c:	4b59      	ldr	r3, [pc, #356]	; (800a7a4 <perfect_slalom+0x290>)
 800a63e:	2202      	movs	r2, #2
 800a640:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 800a642:	4b59      	ldr	r3, [pc, #356]	; (800a7a8 <perfect_slalom+0x294>)
 800a644:	f241 3288 	movw	r2, #5000	; 0x1388
 800a648:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1200;
 800a64a:	4b58      	ldr	r3, [pc, #352]	; (800a7ac <perfect_slalom+0x298>)
 800a64c:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 800a650:	801a      	strh	r2, [r3, #0]

					goal_x = 7;
 800a652:	4b57      	ldr	r3, [pc, #348]	; (800a7b0 <perfect_slalom+0x29c>)
 800a654:	2207      	movs	r2, #7
 800a656:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800a658:	4b56      	ldr	r3, [pc, #344]	; (800a7b4 <perfect_slalom+0x2a0>)
 800a65a:	2207      	movs	r2, #7
 800a65c:	701a      	strb	r2, [r3, #0]

					get_base();
 800a65e:	f006 f8b5 	bl	80107cc <get_base>

					searchC();
 800a662:	f003 fa49 	bl	800daf8 <searchC>
					HAL_Delay(2000);
 800a666:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800a66a:	f7f6 fcd7 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800a66e:	4b51      	ldr	r3, [pc, #324]	; (800a7b4 <perfect_slalom+0x2a0>)
 800a670:	2200      	movs	r2, #0
 800a672:	701a      	strb	r2, [r3, #0]
 800a674:	4b4f      	ldr	r3, [pc, #316]	; (800a7b4 <perfect_slalom+0x2a0>)
 800a676:	781a      	ldrb	r2, [r3, #0]
 800a678:	4b4d      	ldr	r3, [pc, #308]	; (800a7b0 <perfect_slalom+0x29c>)
 800a67a:	701a      	strb	r2, [r3, #0]
					searchC();
 800a67c:	f003 fa3c 	bl	800daf8 <searchC>

					goal_x = 7;
 800a680:	4b4b      	ldr	r3, [pc, #300]	; (800a7b0 <perfect_slalom+0x29c>)
 800a682:	2207      	movs	r2, #7
 800a684:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800a686:	4b4b      	ldr	r3, [pc, #300]	; (800a7b4 <perfect_slalom+0x2a0>)
 800a688:	2207      	movs	r2, #7
 800a68a:	701a      	strb	r2, [r3, #0]
					break;
 800a68c:	e15e      	b.n	800a94c <perfect_slalom+0x438>

				case 2:
					//----a二次走行スラローム+既知区間加速走行 speed1----
					printf("First Run. (Continuous)\n");
 800a68e:	484a      	ldr	r0, [pc, #296]	; (800a7b8 <perfect_slalom+0x2a4>)
 800a690:	f006 ff36 	bl	8011500 <puts>
					MF.FLAG.SCND = 1;
 800a694:	4a40      	ldr	r2, [pc, #256]	; (800a798 <perfect_slalom+0x284>)
 800a696:	8813      	ldrh	r3, [r2, #0]
 800a698:	f043 0320 	orr.w	r3, r3, #32
 800a69c:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800a69e:	4a3e      	ldr	r2, [pc, #248]	; (800a798 <perfect_slalom+0x284>)
 800a6a0:	8813      	ldrh	r3, [r2, #0]
 800a6a2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a6a6:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800a6a8:	4a3b      	ldr	r2, [pc, #236]	; (800a798 <perfect_slalom+0x284>)
 800a6aa:	8813      	ldrh	r3, [r2, #0]
 800a6ac:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800a6b0:	8013      	strh	r3, [r2, #0]
					run_mode = LOW;
 800a6b2:	4b3a      	ldr	r3, [pc, #232]	; (800a79c <perfect_slalom+0x288>)
 800a6b4:	2201      	movs	r2, #1
 800a6b6:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800a6b8:	4b39      	ldr	r3, [pc, #228]	; (800a7a0 <perfect_slalom+0x28c>)
 800a6ba:	2200      	movs	r2, #0
 800a6bc:	701a      	strb	r2, [r3, #0]
					goal_mode = 2;
 800a6be:	4b39      	ldr	r3, [pc, #228]	; (800a7a4 <perfect_slalom+0x290>)
 800a6c0:	2202      	movs	r2, #2
 800a6c2:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 800a6c4:	4b38      	ldr	r3, [pc, #224]	; (800a7a8 <perfect_slalom+0x294>)
 800a6c6:	f241 3288 	movw	r2, #5000	; 0x1388
 800a6ca:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1200;
 800a6cc:	4b37      	ldr	r3, [pc, #220]	; (800a7ac <perfect_slalom+0x298>)
 800a6ce:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 800a6d2:	801a      	strh	r2, [r3, #0]
					goal_x = 7;
 800a6d4:	4b36      	ldr	r3, [pc, #216]	; (800a7b0 <perfect_slalom+0x29c>)
 800a6d6:	2207      	movs	r2, #7
 800a6d8:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800a6da:	4b36      	ldr	r3, [pc, #216]	; (800a7b4 <perfect_slalom+0x2a0>)
 800a6dc:	2207      	movs	r2, #7
 800a6de:	701a      	strb	r2, [r3, #0]

					get_base();
 800a6e0:	f006 f874 	bl	80107cc <get_base>

					searchD();
 800a6e4:	f003 fb76 	bl	800ddd4 <searchD>
					HAL_Delay(2000);
 800a6e8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800a6ec:	f7f6 fc96 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800a6f0:	4b30      	ldr	r3, [pc, #192]	; (800a7b4 <perfect_slalom+0x2a0>)
 800a6f2:	2200      	movs	r2, #0
 800a6f4:	701a      	strb	r2, [r3, #0]
 800a6f6:	4b2f      	ldr	r3, [pc, #188]	; (800a7b4 <perfect_slalom+0x2a0>)
 800a6f8:	781a      	ldrb	r2, [r3, #0]
 800a6fa:	4b2d      	ldr	r3, [pc, #180]	; (800a7b0 <perfect_slalom+0x29c>)
 800a6fc:	701a      	strb	r2, [r3, #0]
					searchD();
 800a6fe:	f003 fb69 	bl	800ddd4 <searchD>

					goal_x = 7;
 800a702:	4b2b      	ldr	r3, [pc, #172]	; (800a7b0 <perfect_slalom+0x29c>)
 800a704:	2207      	movs	r2, #7
 800a706:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800a708:	4b2a      	ldr	r3, [pc, #168]	; (800a7b4 <perfect_slalom+0x2a0>)
 800a70a:	2207      	movs	r2, #7
 800a70c:	701a      	strb	r2, [r3, #0]
					break;
 800a70e:	e11d      	b.n	800a94c <perfect_slalom+0x438>

				case 3:
					//----a二次探索スラロームHigh Speed----
					printf("Second Run. (Slalom)\n");
 800a710:	482a      	ldr	r0, [pc, #168]	; (800a7bc <perfect_slalom+0x2a8>)
 800a712:	f006 fef5 	bl	8011500 <puts>
					MF.FLAG.SCND = 1;
 800a716:	4a20      	ldr	r2, [pc, #128]	; (800a798 <perfect_slalom+0x284>)
 800a718:	8813      	ldrh	r3, [r2, #0]
 800a71a:	f043 0320 	orr.w	r3, r3, #32
 800a71e:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 0;
 800a720:	4a1d      	ldr	r2, [pc, #116]	; (800a798 <perfect_slalom+0x284>)
 800a722:	8813      	ldrh	r3, [r2, #0]
 800a724:	f36f 2349 	bfc	r3, #9, #1
 800a728:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800a72a:	4a1b      	ldr	r2, [pc, #108]	; (800a798 <perfect_slalom+0x284>)
 800a72c:	8813      	ldrh	r3, [r2, #0]
 800a72e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800a732:	8013      	strh	r3, [r2, #0]
					run_mode = HIGH;
 800a734:	4b19      	ldr	r3, [pc, #100]	; (800a79c <perfect_slalom+0x288>)
 800a736:	2203      	movs	r2, #3
 800a738:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800a73a:	4b19      	ldr	r3, [pc, #100]	; (800a7a0 <perfect_slalom+0x28c>)
 800a73c:	2200      	movs	r2, #0
 800a73e:	701a      	strb	r2, [r3, #0]
					goal_mode = 2;
 800a740:	4b18      	ldr	r3, [pc, #96]	; (800a7a4 <perfect_slalom+0x290>)
 800a742:	2202      	movs	r2, #2
 800a744:	701a      	strb	r2, [r3, #0]
					goal_x = 7;
 800a746:	4b1a      	ldr	r3, [pc, #104]	; (800a7b0 <perfect_slalom+0x29c>)
 800a748:	2207      	movs	r2, #7
 800a74a:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800a74c:	4b19      	ldr	r3, [pc, #100]	; (800a7b4 <perfect_slalom+0x2a0>)
 800a74e:	2207      	movs	r2, #7
 800a750:	701a      	strb	r2, [r3, #0]

					get_base();
 800a752:	f006 f83b 	bl	80107cc <get_base>

					searchC();
 800a756:	f003 f9cf 	bl	800daf8 <searchC>
					HAL_Delay(2000);
 800a75a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800a75e:	f7f6 fc5d 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800a762:	4b14      	ldr	r3, [pc, #80]	; (800a7b4 <perfect_slalom+0x2a0>)
 800a764:	2200      	movs	r2, #0
 800a766:	701a      	strb	r2, [r3, #0]
 800a768:	4b12      	ldr	r3, [pc, #72]	; (800a7b4 <perfect_slalom+0x2a0>)
 800a76a:	781a      	ldrb	r2, [r3, #0]
 800a76c:	4b10      	ldr	r3, [pc, #64]	; (800a7b0 <perfect_slalom+0x29c>)
 800a76e:	701a      	strb	r2, [r3, #0]
					searchC();
 800a770:	f003 f9c2 	bl	800daf8 <searchC>
					goal_x = 7;
 800a774:	4b0e      	ldr	r3, [pc, #56]	; (800a7b0 <perfect_slalom+0x29c>)
 800a776:	2207      	movs	r2, #7
 800a778:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800a77a:	4b0e      	ldr	r3, [pc, #56]	; (800a7b4 <perfect_slalom+0x2a0>)
 800a77c:	2207      	movs	r2, #7
 800a77e:	701a      	strb	r2, [r3, #0]
					break;
 800a780:	e0e4      	b.n	800a94c <perfect_slalom+0x438>
 800a782:	bf00      	nop
 800a784:	080129cc 	.word	0x080129cc
 800a788:	20000aec 	.word	0x20000aec
 800a78c:	08012654 	.word	0x08012654
 800a790:	40020000 	.word	0x40020000
 800a794:	080128d0 	.word	0x080128d0
 800a798:	20000f68 	.word	0x20000f68
 800a79c:	20000456 	.word	0x20000456
 800a7a0:	200015c8 	.word	0x200015c8
 800a7a4:	20000bb1 	.word	0x20000bb1
 800a7a8:	20000454 	.word	0x20000454
 800a7ac:	20000f7c 	.word	0x20000f7c
 800a7b0:	20000bb0 	.word	0x20000bb0
 800a7b4:	20000b4c 	.word	0x20000b4c
 800a7b8:	080128dc 	.word	0x080128dc
 800a7bc:	08012928 	.word	0x08012928

				case 4:
					//----a二次探索スラロームHigh Speed + 既知区間加速----
					printf("Second Run. (Slalom)\n");
 800a7c0:	4863      	ldr	r0, [pc, #396]	; (800a950 <perfect_slalom+0x43c>)
 800a7c2:	f006 fe9d 	bl	8011500 <puts>
					MF.FLAG.SCND = 1;
 800a7c6:	4a63      	ldr	r2, [pc, #396]	; (800a954 <perfect_slalom+0x440>)
 800a7c8:	8813      	ldrh	r3, [r2, #0]
 800a7ca:	f043 0320 	orr.w	r3, r3, #32
 800a7ce:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800a7d0:	4a60      	ldr	r2, [pc, #384]	; (800a954 <perfect_slalom+0x440>)
 800a7d2:	8813      	ldrh	r3, [r2, #0]
 800a7d4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a7d8:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800a7da:	4a5e      	ldr	r2, [pc, #376]	; (800a954 <perfect_slalom+0x440>)
 800a7dc:	8813      	ldrh	r3, [r2, #0]
 800a7de:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800a7e2:	8013      	strh	r3, [r2, #0]
					run_mode = HIGH;
 800a7e4:	4b5c      	ldr	r3, [pc, #368]	; (800a958 <perfect_slalom+0x444>)
 800a7e6:	2203      	movs	r2, #3
 800a7e8:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800a7ea:	4b5c      	ldr	r3, [pc, #368]	; (800a95c <perfect_slalom+0x448>)
 800a7ec:	2200      	movs	r2, #0
 800a7ee:	701a      	strb	r2, [r3, #0]
					goal_mode = 2;
 800a7f0:	4b5b      	ldr	r3, [pc, #364]	; (800a960 <perfect_slalom+0x44c>)
 800a7f2:	2202      	movs	r2, #2
 800a7f4:	701a      	strb	r2, [r3, #0]
					accel_hs = 3000;
 800a7f6:	4b5b      	ldr	r3, [pc, #364]	; (800a964 <perfect_slalom+0x450>)
 800a7f8:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800a7fc:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1200;
 800a7fe:	4b5a      	ldr	r3, [pc, #360]	; (800a968 <perfect_slalom+0x454>)
 800a800:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 800a804:	801a      	strh	r2, [r3, #0]
					goal_x = 7;
 800a806:	4b59      	ldr	r3, [pc, #356]	; (800a96c <perfect_slalom+0x458>)
 800a808:	2207      	movs	r2, #7
 800a80a:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800a80c:	4b58      	ldr	r3, [pc, #352]	; (800a970 <perfect_slalom+0x45c>)
 800a80e:	2207      	movs	r2, #7
 800a810:	701a      	strb	r2, [r3, #0]

					get_base();
 800a812:	f005 ffdb 	bl	80107cc <get_base>

					searchD();
 800a816:	f003 fadd 	bl	800ddd4 <searchD>
					HAL_Delay(2000);
 800a81a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800a81e:	f7f6 fbfd 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800a822:	4b53      	ldr	r3, [pc, #332]	; (800a970 <perfect_slalom+0x45c>)
 800a824:	2200      	movs	r2, #0
 800a826:	701a      	strb	r2, [r3, #0]
 800a828:	4b51      	ldr	r3, [pc, #324]	; (800a970 <perfect_slalom+0x45c>)
 800a82a:	781a      	ldrb	r2, [r3, #0]
 800a82c:	4b4f      	ldr	r3, [pc, #316]	; (800a96c <perfect_slalom+0x458>)
 800a82e:	701a      	strb	r2, [r3, #0]
					searchD();
 800a830:	f003 fad0 	bl	800ddd4 <searchD>

					goal_x = 7;
 800a834:	4b4d      	ldr	r3, [pc, #308]	; (800a96c <perfect_slalom+0x458>)
 800a836:	2207      	movs	r2, #7
 800a838:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800a83a:	4b4d      	ldr	r3, [pc, #308]	; (800a970 <perfect_slalom+0x45c>)
 800a83c:	2207      	movs	r2, #7
 800a83e:	701a      	strb	r2, [r3, #0]
					break;
 800a840:	e084      	b.n	800a94c <perfect_slalom+0x438>

				case 5:
					//----a二次探索スラロームHigh Speed + 既知区間加速----
					printf("Second Run. (Slalom)\n");
 800a842:	4843      	ldr	r0, [pc, #268]	; (800a950 <perfect_slalom+0x43c>)
 800a844:	f006 fe5c 	bl	8011500 <puts>
					MF.FLAG.SCND = 1;
 800a848:	4a42      	ldr	r2, [pc, #264]	; (800a954 <perfect_slalom+0x440>)
 800a84a:	8813      	ldrh	r3, [r2, #0]
 800a84c:	f043 0320 	orr.w	r3, r3, #32
 800a850:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800a852:	4a40      	ldr	r2, [pc, #256]	; (800a954 <perfect_slalom+0x440>)
 800a854:	8813      	ldrh	r3, [r2, #0]
 800a856:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a85a:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800a85c:	4a3d      	ldr	r2, [pc, #244]	; (800a954 <perfect_slalom+0x440>)
 800a85e:	8813      	ldrh	r3, [r2, #0]
 800a860:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800a864:	8013      	strh	r3, [r2, #0]
					run_mode = HIGH;
 800a866:	4b3c      	ldr	r3, [pc, #240]	; (800a958 <perfect_slalom+0x444>)
 800a868:	2203      	movs	r2, #3
 800a86a:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800a86c:	4b3b      	ldr	r3, [pc, #236]	; (800a95c <perfect_slalom+0x448>)
 800a86e:	2200      	movs	r2, #0
 800a870:	701a      	strb	r2, [r3, #0]
					goal_mode = 2;
 800a872:	4b3b      	ldr	r3, [pc, #236]	; (800a960 <perfect_slalom+0x44c>)
 800a874:	2202      	movs	r2, #2
 800a876:	701a      	strb	r2, [r3, #0]
					accel_hs = 10000;
 800a878:	4b3a      	ldr	r3, [pc, #232]	; (800a964 <perfect_slalom+0x450>)
 800a87a:	f242 7210 	movw	r2, #10000	; 0x2710
 800a87e:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1600;
 800a880:	4b39      	ldr	r3, [pc, #228]	; (800a968 <perfect_slalom+0x454>)
 800a882:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800a886:	801a      	strh	r2, [r3, #0]
					goal_x = 7;
 800a888:	4b38      	ldr	r3, [pc, #224]	; (800a96c <perfect_slalom+0x458>)
 800a88a:	2207      	movs	r2, #7
 800a88c:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800a88e:	4b38      	ldr	r3, [pc, #224]	; (800a970 <perfect_slalom+0x45c>)
 800a890:	2207      	movs	r2, #7
 800a892:	701a      	strb	r2, [r3, #0]

					get_base();
 800a894:	f005 ff9a 	bl	80107cc <get_base>

					searchD();
 800a898:	f003 fa9c 	bl	800ddd4 <searchD>
					HAL_Delay(2000);
 800a89c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800a8a0:	f7f6 fbbc 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800a8a4:	4b32      	ldr	r3, [pc, #200]	; (800a970 <perfect_slalom+0x45c>)
 800a8a6:	2200      	movs	r2, #0
 800a8a8:	701a      	strb	r2, [r3, #0]
 800a8aa:	4b31      	ldr	r3, [pc, #196]	; (800a970 <perfect_slalom+0x45c>)
 800a8ac:	781a      	ldrb	r2, [r3, #0]
 800a8ae:	4b2f      	ldr	r3, [pc, #188]	; (800a96c <perfect_slalom+0x458>)
 800a8b0:	701a      	strb	r2, [r3, #0]
					searchD();
 800a8b2:	f003 fa8f 	bl	800ddd4 <searchD>

					goal_x = 7;
 800a8b6:	4b2d      	ldr	r3, [pc, #180]	; (800a96c <perfect_slalom+0x458>)
 800a8b8:	2207      	movs	r2, #7
 800a8ba:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800a8bc:	4b2c      	ldr	r3, [pc, #176]	; (800a970 <perfect_slalom+0x45c>)
 800a8be:	2207      	movs	r2, #7
 800a8c0:	701a      	strb	r2, [r3, #0]
					break;
 800a8c2:	e043      	b.n	800a94c <perfect_slalom+0x438>

				case 6:
					//----a二次探索スラロームHigh Speed + 既知区間加速----
					printf("Second Run. (Slalom)\n");
 800a8c4:	4822      	ldr	r0, [pc, #136]	; (800a950 <perfect_slalom+0x43c>)
 800a8c6:	f006 fe1b 	bl	8011500 <puts>
					MF.FLAG.SCND = 1;
 800a8ca:	4a22      	ldr	r2, [pc, #136]	; (800a954 <perfect_slalom+0x440>)
 800a8cc:	8813      	ldrh	r3, [r2, #0]
 800a8ce:	f043 0320 	orr.w	r3, r3, #32
 800a8d2:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800a8d4:	4a1f      	ldr	r2, [pc, #124]	; (800a954 <perfect_slalom+0x440>)
 800a8d6:	8813      	ldrh	r3, [r2, #0]
 800a8d8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a8dc:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800a8de:	4a1d      	ldr	r2, [pc, #116]	; (800a954 <perfect_slalom+0x440>)
 800a8e0:	8813      	ldrh	r3, [r2, #0]
 800a8e2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800a8e6:	8013      	strh	r3, [r2, #0]
					run_mode = HIGH;
 800a8e8:	4b1b      	ldr	r3, [pc, #108]	; (800a958 <perfect_slalom+0x444>)
 800a8ea:	2203      	movs	r2, #3
 800a8ec:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800a8ee:	4b1b      	ldr	r3, [pc, #108]	; (800a95c <perfect_slalom+0x448>)
 800a8f0:	2200      	movs	r2, #0
 800a8f2:	701a      	strb	r2, [r3, #0]
					goal_mode = 2;
 800a8f4:	4b1a      	ldr	r3, [pc, #104]	; (800a960 <perfect_slalom+0x44c>)
 800a8f6:	2202      	movs	r2, #2
 800a8f8:	701a      	strb	r2, [r3, #0]
					accel_hs = 10000;
 800a8fa:	4b1a      	ldr	r3, [pc, #104]	; (800a964 <perfect_slalom+0x450>)
 800a8fc:	f242 7210 	movw	r2, #10000	; 0x2710
 800a900:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 2000;
 800a902:	4b19      	ldr	r3, [pc, #100]	; (800a968 <perfect_slalom+0x454>)
 800a904:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800a908:	801a      	strh	r2, [r3, #0]
					goal_x = 7;
 800a90a:	4b18      	ldr	r3, [pc, #96]	; (800a96c <perfect_slalom+0x458>)
 800a90c:	2207      	movs	r2, #7
 800a90e:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800a910:	4b17      	ldr	r3, [pc, #92]	; (800a970 <perfect_slalom+0x45c>)
 800a912:	2207      	movs	r2, #7
 800a914:	701a      	strb	r2, [r3, #0]

					get_base();
 800a916:	f005 ff59 	bl	80107cc <get_base>

					searchD();
 800a91a:	f003 fa5b 	bl	800ddd4 <searchD>
					HAL_Delay(2000);
 800a91e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800a922:	f7f6 fb7b 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800a926:	4b12      	ldr	r3, [pc, #72]	; (800a970 <perfect_slalom+0x45c>)
 800a928:	2200      	movs	r2, #0
 800a92a:	701a      	strb	r2, [r3, #0]
 800a92c:	4b10      	ldr	r3, [pc, #64]	; (800a970 <perfect_slalom+0x45c>)
 800a92e:	781a      	ldrb	r2, [r3, #0]
 800a930:	4b0e      	ldr	r3, [pc, #56]	; (800a96c <perfect_slalom+0x458>)
 800a932:	701a      	strb	r2, [r3, #0]
					searchD();
 800a934:	f003 fa4e 	bl	800ddd4 <searchD>

					goal_x = 7;
 800a938:	4b0c      	ldr	r3, [pc, #48]	; (800a96c <perfect_slalom+0x458>)
 800a93a:	2207      	movs	r2, #7
 800a93c:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800a93e:	4b0c      	ldr	r3, [pc, #48]	; (800a970 <perfect_slalom+0x45c>)
 800a940:	2207      	movs	r2, #7
 800a942:	701a      	strb	r2, [r3, #0]
					break;
 800a944:	e002      	b.n	800a94c <perfect_slalom+0x438>

				case 7:
					perfect_pass();
 800a946:	f000 f815 	bl	800a974 <perfect_pass>
					break;
 800a94a:	bf00      	nop
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 800a94c:	e5eb      	b.n	800a526 <perfect_slalom+0x12>
 800a94e:	bf00      	nop
 800a950:	08012928 	.word	0x08012928
 800a954:	20000f68 	.word	0x20000f68
 800a958:	20000456 	.word	0x20000456
 800a95c:	200015c8 	.word	0x200015c8
 800a960:	20000bb1 	.word	0x20000bb1
 800a964:	20000454 	.word	0x20000454
 800a968:	20000f7c 	.word	0x20000f7c
 800a96c:	20000bb0 	.word	0x20000bb0
 800a970:	20000b4c 	.word	0x20000b4c

0800a974 <perfect_pass>:
//perfect_pass
// a本番用pass圧縮走行モード
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void perfect_pass(void){
 800a974:	b580      	push	{r7, lr}
 800a976:	b082      	sub	sp, #8
 800a978:	af00      	add	r7, sp, #0

	int mode = 0;
 800a97a:	2300      	movs	r3, #0
 800a97c:	607b      	str	r3, [r7, #4]
	printf("Perfect Pass Press, Mode : %d\n", mode);
 800a97e:	6879      	ldr	r1, [r7, #4]
 800a980:	48a0      	ldr	r0, [pc, #640]	; (800ac04 <perfect_pass+0x290>)
 800a982:	f006 fd49 	bl	8011418 <iprintf>

	while(1){
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	b2db      	uxtb	r3, r3
 800a98a:	f003 0301 	and.w	r3, r3, #1
 800a98e:	b2d8      	uxtb	r0, r3
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	b2db      	uxtb	r3, r3
 800a994:	f003 0302 	and.w	r3, r3, #2
 800a998:	b2d9      	uxtb	r1, r3
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	b2db      	uxtb	r3, r3
 800a99e:	f003 0304 	and.w	r3, r3, #4
 800a9a2:	b2db      	uxtb	r3, r3
 800a9a4:	461a      	mov	r2, r3
 800a9a6:	f005 ff69 	bl	801087c <led_write>
		  if(dist_r >= 20){
 800a9aa:	4b97      	ldr	r3, [pc, #604]	; (800ac08 <perfect_pass+0x294>)
 800a9ac:	edd3 7a00 	vldr	s15, [r3]
 800a9b0:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 800a9b4:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a9b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a9bc:	db0f      	blt.n	800a9de <perfect_pass+0x6a>
			  mode++;
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	3301      	adds	r3, #1
 800a9c2:	607b      	str	r3, [r7, #4]
			  dist_r = 0;
 800a9c4:	4b90      	ldr	r3, [pc, #576]	; (800ac08 <perfect_pass+0x294>)
 800a9c6:	f04f 0200 	mov.w	r2, #0
 800a9ca:	601a      	str	r2, [r3, #0]
			  if(mode > 7){
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	2b07      	cmp	r3, #7
 800a9d0:	dd01      	ble.n	800a9d6 <perfect_pass+0x62>
				  mode = 0;
 800a9d2:	2300      	movs	r3, #0
 800a9d4:	607b      	str	r3, [r7, #4]
			  }
			  printf("Mode : %d\n", mode);
 800a9d6:	6879      	ldr	r1, [r7, #4]
 800a9d8:	488c      	ldr	r0, [pc, #560]	; (800ac0c <perfect_pass+0x298>)
 800a9da:	f006 fd1d 	bl	8011418 <iprintf>
		  }
		  if(dist_r <= -20){
 800a9de:	4b8a      	ldr	r3, [pc, #552]	; (800ac08 <perfect_pass+0x294>)
 800a9e0:	edd3 7a00 	vldr	s15, [r3]
 800a9e4:	eebb 7a04 	vmov.f32	s14, #180	; 0xc1a00000 -20.0
 800a9e8:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a9ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a9f0:	d80f      	bhi.n	800aa12 <perfect_pass+0x9e>
			  mode--;
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	3b01      	subs	r3, #1
 800a9f6:	607b      	str	r3, [r7, #4]
			  dist_r = 0;
 800a9f8:	4b83      	ldr	r3, [pc, #524]	; (800ac08 <perfect_pass+0x294>)
 800a9fa:	f04f 0200 	mov.w	r2, #0
 800a9fe:	601a      	str	r2, [r3, #0]
			  if(mode < 0){
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	2b00      	cmp	r3, #0
 800aa04:	da01      	bge.n	800aa0a <perfect_pass+0x96>
				  mode = 7;
 800aa06:	2307      	movs	r3, #7
 800aa08:	607b      	str	r3, [r7, #4]
			  }
			  printf("Mode : %d\n", mode);
 800aa0a:	6879      	ldr	r1, [r7, #4]
 800aa0c:	487f      	ldr	r0, [pc, #508]	; (800ac0c <perfect_pass+0x298>)
 800aa0e:	f006 fd03 	bl	8011418 <iprintf>
		  }
		  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET){
 800aa12:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800aa16:	487e      	ldr	r0, [pc, #504]	; (800ac10 <perfect_pass+0x29c>)
 800aa18:	f7f7 fc5c 	bl	80022d4 <HAL_GPIO_ReadPin>
 800aa1c:	4603      	mov	r3, r0
 800aa1e:	2b00      	cmp	r3, #0
 800aa20:	d1b1      	bne.n	800a986 <perfect_pass+0x12>
			  HAL_Delay(50);
 800aa22:	2032      	movs	r0, #50	; 0x32
 800aa24:	f7f6 fafa 	bl	800101c <HAL_Delay>
			  while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET);
 800aa28:	bf00      	nop
 800aa2a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800aa2e:	4878      	ldr	r0, [pc, #480]	; (800ac10 <perfect_pass+0x29c>)
 800aa30:	f7f7 fc50 	bl	80022d4 <HAL_GPIO_ReadPin>
 800aa34:	4603      	mov	r3, r0
 800aa36:	2b00      	cmp	r3, #0
 800aa38:	d0f7      	beq.n	800aa2a <perfect_pass+0xb6>
			  drive_ready();
 800aa3a:	f7fa f921 	bl	8004c80 <drive_ready>

			  switch(mode){
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	2b07      	cmp	r3, #7
 800aa42:	d8a0      	bhi.n	800a986 <perfect_pass+0x12>
 800aa44:	a201      	add	r2, pc, #4	; (adr r2, 800aa4c <perfect_pass+0xd8>)
 800aa46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa4a:	bf00      	nop
 800aa4c:	0800a987 	.word	0x0800a987
 800aa50:	0800aa6d 	.word	0x0800aa6d
 800aa54:	0800aaf1 	.word	0x0800aaf1
 800aa58:	0800ab7b 	.word	0x0800ab7b
 800aa5c:	0800ac45 	.word	0x0800ac45
 800aa60:	0800accd 	.word	0x0800accd
 800aa64:	0800ad7d 	.word	0x0800ad7d
 800aa68:	0800b029 	.word	0x0800b029
				case 0:
					break;

				case 1:
					//----a一次探索スラローム走行----
					printf("First Run.\n");
 800aa6c:	4869      	ldr	r0, [pc, #420]	; (800ac14 <perfect_pass+0x2a0>)
 800aa6e:	f006 fd47 	bl	8011500 <puts>
					MF.FLAG.SCND = 0;
 800aa72:	4a69      	ldr	r2, [pc, #420]	; (800ac18 <perfect_pass+0x2a4>)
 800aa74:	8813      	ldrh	r3, [r2, #0]
 800aa76:	f36f 1345 	bfc	r3, #5, #1
 800aa7a:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800aa7c:	4a66      	ldr	r2, [pc, #408]	; (800ac18 <perfect_pass+0x2a4>)
 800aa7e:	8813      	ldrh	r3, [r2, #0]
 800aa80:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800aa84:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 0;
 800aa86:	4a64      	ldr	r2, [pc, #400]	; (800ac18 <perfect_pass+0x2a4>)
 800aa88:	8813      	ldrh	r3, [r2, #0]
 800aa8a:	f36f 238a 	bfc	r3, #10, #1
 800aa8e:	8013      	strh	r3, [r2, #0]
					run_mode = MIDDLE;
 800aa90:	4b62      	ldr	r3, [pc, #392]	; (800ac1c <perfect_pass+0x2a8>)
 800aa92:	2202      	movs	r2, #2
 800aa94:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800aa96:	4b62      	ldr	r3, [pc, #392]	; (800ac20 <perfect_pass+0x2ac>)
 800aa98:	2200      	movs	r2, #0
 800aa9a:	701a      	strb	r2, [r3, #0]
					goal_mode = 2;
 800aa9c:	4b61      	ldr	r3, [pc, #388]	; (800ac24 <perfect_pass+0x2b0>)
 800aa9e:	2202      	movs	r2, #2
 800aaa0:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 800aaa2:	4b61      	ldr	r3, [pc, #388]	; (800ac28 <perfect_pass+0x2b4>)
 800aaa4:	f241 3288 	movw	r2, #5000	; 0x1388
 800aaa8:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 800;
 800aaaa:	4b60      	ldr	r3, [pc, #384]	; (800ac2c <perfect_pass+0x2b8>)
 800aaac:	f44f 7248 	mov.w	r2, #800	; 0x320
 800aab0:	801a      	strh	r2, [r3, #0]

					goal_x = 7;
 800aab2:	4b5f      	ldr	r3, [pc, #380]	; (800ac30 <perfect_pass+0x2bc>)
 800aab4:	2207      	movs	r2, #7
 800aab6:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800aab8:	4b5e      	ldr	r3, [pc, #376]	; (800ac34 <perfect_pass+0x2c0>)
 800aaba:	2207      	movs	r2, #7
 800aabc:	701a      	strb	r2, [r3, #0]

					get_base();
 800aabe:	f005 fe85 	bl	80107cc <get_base>

					searchC();
 800aac2:	f003 f819 	bl	800daf8 <searchC>
					HAL_Delay(2000);
 800aac6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800aaca:	f7f6 faa7 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800aace:	4b59      	ldr	r3, [pc, #356]	; (800ac34 <perfect_pass+0x2c0>)
 800aad0:	2200      	movs	r2, #0
 800aad2:	701a      	strb	r2, [r3, #0]
 800aad4:	4b57      	ldr	r3, [pc, #348]	; (800ac34 <perfect_pass+0x2c0>)
 800aad6:	781a      	ldrb	r2, [r3, #0]
 800aad8:	4b55      	ldr	r3, [pc, #340]	; (800ac30 <perfect_pass+0x2bc>)
 800aada:	701a      	strb	r2, [r3, #0]
					searchC();
 800aadc:	f003 f80c 	bl	800daf8 <searchC>

					goal_x = 7;
 800aae0:	4b53      	ldr	r3, [pc, #332]	; (800ac30 <perfect_pass+0x2bc>)
 800aae2:	2207      	movs	r2, #7
 800aae4:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800aae6:	4b53      	ldr	r3, [pc, #332]	; (800ac34 <perfect_pass+0x2c0>)
 800aae8:	2207      	movs	r2, #7
 800aaea:	701a      	strb	r2, [r3, #0]
					break;
 800aaec:	f000 bc4c 	b.w	800b388 <perfect_pass+0xa14>

				case 2:
					//----a直線と大回り圧縮(adv_posを停止)+半区画ベース----
					printf("pass press 3.\n");
 800aaf0:	4851      	ldr	r0, [pc, #324]	; (800ac38 <perfect_pass+0x2c4>)
 800aaf2:	f006 fd05 	bl	8011500 <puts>
					MF.FLAG.SCND = 1;
 800aaf6:	4a48      	ldr	r2, [pc, #288]	; (800ac18 <perfect_pass+0x2a4>)
 800aaf8:	8813      	ldrh	r3, [r2, #0]
 800aafa:	f043 0320 	orr.w	r3, r3, #32
 800aafe:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800ab00:	4a45      	ldr	r2, [pc, #276]	; (800ac18 <perfect_pass+0x2a4>)
 800ab02:	8813      	ldrh	r3, [r2, #0]
 800ab04:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800ab08:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800ab0a:	4a43      	ldr	r2, [pc, #268]	; (800ac18 <perfect_pass+0x2a4>)
 800ab0c:	8813      	ldrh	r3, [r2, #0]
 800ab0e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800ab12:	8013      	strh	r3, [r2, #0]
					run_mode = MIDDLE;
 800ab14:	4b41      	ldr	r3, [pc, #260]	; (800ac1c <perfect_pass+0x2a8>)
 800ab16:	2202      	movs	r2, #2
 800ab18:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800ab1a:	4b41      	ldr	r3, [pc, #260]	; (800ac20 <perfect_pass+0x2ac>)
 800ab1c:	2200      	movs	r2, #0
 800ab1e:	701a      	strb	r2, [r3, #0]
					goal_mode = 1;
 800ab20:	4b40      	ldr	r3, [pc, #256]	; (800ac24 <perfect_pass+0x2b0>)
 800ab22:	2201      	movs	r2, #1
 800ab24:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 800ab26:	4b40      	ldr	r3, [pc, #256]	; (800ac28 <perfect_pass+0x2b4>)
 800ab28:	f241 3288 	movw	r2, #5000	; 0x1388
 800ab2c:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 800;
 800ab2e:	4b3f      	ldr	r3, [pc, #252]	; (800ac2c <perfect_pass+0x2b8>)
 800ab30:	f44f 7248 	mov.w	r2, #800	; 0x320
 800ab34:	801a      	strh	r2, [r3, #0]

					pass_mode = 3;						//a半区画ベースでroute配列生成
 800ab36:	4b41      	ldr	r3, [pc, #260]	; (800ac3c <perfect_pass+0x2c8>)
 800ab38:	2203      	movs	r2, #3
 800ab3a:	701a      	strb	r2, [r3, #0]

					goal_x = 7;
 800ab3c:	4b3c      	ldr	r3, [pc, #240]	; (800ac30 <perfect_pass+0x2bc>)
 800ab3e:	2207      	movs	r2, #7
 800ab40:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800ab42:	4b3c      	ldr	r3, [pc, #240]	; (800ac34 <perfect_pass+0x2c0>)
 800ab44:	2207      	movs	r2, #7
 800ab46:	701a      	strb	r2, [r3, #0]

					get_base();
 800ab48:	f005 fe40 	bl	80107cc <get_base>

					searchF3();
 800ab4c:	f003 fb0a 	bl	800e164 <searchF3>
					HAL_Delay(2000);
 800ab50:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800ab54:	f7f6 fa62 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800ab58:	4b36      	ldr	r3, [pc, #216]	; (800ac34 <perfect_pass+0x2c0>)
 800ab5a:	2200      	movs	r2, #0
 800ab5c:	701a      	strb	r2, [r3, #0]
 800ab5e:	4b35      	ldr	r3, [pc, #212]	; (800ac34 <perfect_pass+0x2c0>)
 800ab60:	781a      	ldrb	r2, [r3, #0]
 800ab62:	4b33      	ldr	r3, [pc, #204]	; (800ac30 <perfect_pass+0x2bc>)
 800ab64:	701a      	strb	r2, [r3, #0]
					searchF3();
 800ab66:	f003 fafd 	bl	800e164 <searchF3>

					goal_x = 7;
 800ab6a:	4b31      	ldr	r3, [pc, #196]	; (800ac30 <perfect_pass+0x2bc>)
 800ab6c:	2207      	movs	r2, #7
 800ab6e:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800ab70:	4b30      	ldr	r3, [pc, #192]	; (800ac34 <perfect_pass+0x2c0>)
 800ab72:	2207      	movs	r2, #7
 800ab74:	701a      	strb	r2, [r3, #0]
					break;
 800ab76:	f000 bc07 	b.w	800b388 <perfect_pass+0xa14>
				case 3:
					//----a直線と大回り圧縮(adv_posを停止)+半区画ベース High Speed----
					printf("pass press 3-2.\n");
 800ab7a:	4831      	ldr	r0, [pc, #196]	; (800ac40 <perfect_pass+0x2cc>)
 800ab7c:	f006 fcc0 	bl	8011500 <puts>
					MF.FLAG.SCND = 1;
 800ab80:	4a25      	ldr	r2, [pc, #148]	; (800ac18 <perfect_pass+0x2a4>)
 800ab82:	8813      	ldrh	r3, [r2, #0]
 800ab84:	f043 0320 	orr.w	r3, r3, #32
 800ab88:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800ab8a:	4a23      	ldr	r2, [pc, #140]	; (800ac18 <perfect_pass+0x2a4>)
 800ab8c:	8813      	ldrh	r3, [r2, #0]
 800ab8e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800ab92:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800ab94:	4a20      	ldr	r2, [pc, #128]	; (800ac18 <perfect_pass+0x2a4>)
 800ab96:	8813      	ldrh	r3, [r2, #0]
 800ab98:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800ab9c:	8013      	strh	r3, [r2, #0]
					run_mode = HIGH;
 800ab9e:	4b1f      	ldr	r3, [pc, #124]	; (800ac1c <perfect_pass+0x2a8>)
 800aba0:	2203      	movs	r2, #3
 800aba2:	701a      	strb	r2, [r3, #0]
					goal_mode = 1;
 800aba4:	4b1f      	ldr	r3, [pc, #124]	; (800ac24 <perfect_pass+0x2b0>)
 800aba6:	2201      	movs	r2, #1
 800aba8:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800abaa:	4b1d      	ldr	r3, [pc, #116]	; (800ac20 <perfect_pass+0x2ac>)
 800abac:	2200      	movs	r2, #0
 800abae:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 800abb0:	4b1d      	ldr	r3, [pc, #116]	; (800ac28 <perfect_pass+0x2b4>)
 800abb2:	f241 3288 	movw	r2, #5000	; 0x1388
 800abb6:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1200;
 800abb8:	4b1c      	ldr	r3, [pc, #112]	; (800ac2c <perfect_pass+0x2b8>)
 800abba:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 800abbe:	801a      	strh	r2, [r3, #0]

					pass_mode = 3;						//a半区画ベースでroute配列生成
 800abc0:	4b1e      	ldr	r3, [pc, #120]	; (800ac3c <perfect_pass+0x2c8>)
 800abc2:	2203      	movs	r2, #3
 800abc4:	701a      	strb	r2, [r3, #0]

					goal_x = 7;
 800abc6:	4b1a      	ldr	r3, [pc, #104]	; (800ac30 <perfect_pass+0x2bc>)
 800abc8:	2207      	movs	r2, #7
 800abca:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800abcc:	4b19      	ldr	r3, [pc, #100]	; (800ac34 <perfect_pass+0x2c0>)
 800abce:	2207      	movs	r2, #7
 800abd0:	701a      	strb	r2, [r3, #0]

					get_base();
 800abd2:	f005 fdfb 	bl	80107cc <get_base>

					searchF3();
 800abd6:	f003 fac5 	bl	800e164 <searchF3>
					HAL_Delay(2000);
 800abda:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800abde:	f7f6 fa1d 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800abe2:	4b14      	ldr	r3, [pc, #80]	; (800ac34 <perfect_pass+0x2c0>)
 800abe4:	2200      	movs	r2, #0
 800abe6:	701a      	strb	r2, [r3, #0]
 800abe8:	4b12      	ldr	r3, [pc, #72]	; (800ac34 <perfect_pass+0x2c0>)
 800abea:	781a      	ldrb	r2, [r3, #0]
 800abec:	4b10      	ldr	r3, [pc, #64]	; (800ac30 <perfect_pass+0x2bc>)
 800abee:	701a      	strb	r2, [r3, #0]
					searchF3();
 800abf0:	f003 fab8 	bl	800e164 <searchF3>

					goal_x = 7;
 800abf4:	4b0e      	ldr	r3, [pc, #56]	; (800ac30 <perfect_pass+0x2bc>)
 800abf6:	2207      	movs	r2, #7
 800abf8:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800abfa:	4b0e      	ldr	r3, [pc, #56]	; (800ac34 <perfect_pass+0x2c0>)
 800abfc:	2207      	movs	r2, #7
 800abfe:	701a      	strb	r2, [r3, #0]
					break;
 800ac00:	e3c2      	b.n	800b388 <perfect_pass+0xa14>
 800ac02:	bf00      	nop
 800ac04:	080129e8 	.word	0x080129e8
 800ac08:	20000aec 	.word	0x20000aec
 800ac0c:	08012654 	.word	0x08012654
 800ac10:	40020000 	.word	0x40020000
 800ac14:	080128d0 	.word	0x080128d0
 800ac18:	20000f68 	.word	0x20000f68
 800ac1c:	20000456 	.word	0x20000456
 800ac20:	200015c8 	.word	0x200015c8
 800ac24:	20000bb1 	.word	0x20000bb1
 800ac28:	20000454 	.word	0x20000454
 800ac2c:	20000f7c 	.word	0x20000f7c
 800ac30:	20000bb0 	.word	0x20000bb0
 800ac34:	20000b4c 	.word	0x20000b4c
 800ac38:	08012848 	.word	0x08012848
 800ac3c:	20000457 	.word	0x20000457
 800ac40:	08012858 	.word	0x08012858
				case 4:
					//----a直線と大回り圧縮と斜めｰｰｰｰ
					printf("pass press 4.\n");
 800ac44:	4843      	ldr	r0, [pc, #268]	; (800ad54 <perfect_pass+0x3e0>)
 800ac46:	f006 fc5b 	bl	8011500 <puts>
					MF.FLAG.SCND = 1;
 800ac4a:	4a43      	ldr	r2, [pc, #268]	; (800ad58 <perfect_pass+0x3e4>)
 800ac4c:	8813      	ldrh	r3, [r2, #0]
 800ac4e:	f043 0320 	orr.w	r3, r3, #32
 800ac52:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800ac54:	4a40      	ldr	r2, [pc, #256]	; (800ad58 <perfect_pass+0x3e4>)
 800ac56:	8813      	ldrh	r3, [r2, #0]
 800ac58:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800ac5c:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800ac5e:	4a3e      	ldr	r2, [pc, #248]	; (800ad58 <perfect_pass+0x3e4>)
 800ac60:	8813      	ldrh	r3, [r2, #0]
 800ac62:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800ac66:	8013      	strh	r3, [r2, #0]
					run_mode = MIDDLE;
 800ac68:	4b3c      	ldr	r3, [pc, #240]	; (800ad5c <perfect_pass+0x3e8>)
 800ac6a:	2202      	movs	r2, #2
 800ac6c:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800ac6e:	4b3c      	ldr	r3, [pc, #240]	; (800ad60 <perfect_pass+0x3ec>)
 800ac70:	2200      	movs	r2, #0
 800ac72:	701a      	strb	r2, [r3, #0]
					goal_mode = 2;
 800ac74:	4b3b      	ldr	r3, [pc, #236]	; (800ad64 <perfect_pass+0x3f0>)
 800ac76:	2202      	movs	r2, #2
 800ac78:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 800ac7a:	4b3b      	ldr	r3, [pc, #236]	; (800ad68 <perfect_pass+0x3f4>)
 800ac7c:	f241 3288 	movw	r2, #5000	; 0x1388
 800ac80:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 800;
 800ac82:	4b3a      	ldr	r3, [pc, #232]	; (800ad6c <perfect_pass+0x3f8>)
 800ac84:	f44f 7248 	mov.w	r2, #800	; 0x320
 800ac88:	801a      	strh	r2, [r3, #0]

					pass_mode = 4;
 800ac8a:	4b39      	ldr	r3, [pc, #228]	; (800ad70 <perfect_pass+0x3fc>)
 800ac8c:	2204      	movs	r2, #4
 800ac8e:	701a      	strb	r2, [r3, #0]

					goal_x = 7;
 800ac90:	4b38      	ldr	r3, [pc, #224]	; (800ad74 <perfect_pass+0x400>)
 800ac92:	2207      	movs	r2, #7
 800ac94:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800ac96:	4b38      	ldr	r3, [pc, #224]	; (800ad78 <perfect_pass+0x404>)
 800ac98:	2207      	movs	r2, #7
 800ac9a:	701a      	strb	r2, [r3, #0]

					get_base();
 800ac9c:	f005 fd96 	bl	80107cc <get_base>

					searchF4();
 800aca0:	f003 fb36 	bl	800e310 <searchF4>
					HAL_Delay(2000);
 800aca4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800aca8:	f7f6 f9b8 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800acac:	4b32      	ldr	r3, [pc, #200]	; (800ad78 <perfect_pass+0x404>)
 800acae:	2200      	movs	r2, #0
 800acb0:	701a      	strb	r2, [r3, #0]
 800acb2:	4b31      	ldr	r3, [pc, #196]	; (800ad78 <perfect_pass+0x404>)
 800acb4:	781a      	ldrb	r2, [r3, #0]
 800acb6:	4b2f      	ldr	r3, [pc, #188]	; (800ad74 <perfect_pass+0x400>)
 800acb8:	701a      	strb	r2, [r3, #0]
					searchF4();
 800acba:	f003 fb29 	bl	800e310 <searchF4>

					goal_x = 7;
 800acbe:	4b2d      	ldr	r3, [pc, #180]	; (800ad74 <perfect_pass+0x400>)
 800acc0:	2207      	movs	r2, #7
 800acc2:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800acc4:	4b2c      	ldr	r3, [pc, #176]	; (800ad78 <perfect_pass+0x404>)
 800acc6:	2207      	movs	r2, #7
 800acc8:	701a      	strb	r2, [r3, #0]
					break;
 800acca:	e35d      	b.n	800b388 <perfect_pass+0xa14>

				case 5:
					//----a直線と大回り圧縮と斜めｰｰｰｰ
					printf("pass press 4.\n");
 800accc:	4821      	ldr	r0, [pc, #132]	; (800ad54 <perfect_pass+0x3e0>)
 800acce:	f006 fc17 	bl	8011500 <puts>
					MF.FLAG.SCND = 1;
 800acd2:	4a21      	ldr	r2, [pc, #132]	; (800ad58 <perfect_pass+0x3e4>)
 800acd4:	8813      	ldrh	r3, [r2, #0]
 800acd6:	f043 0320 	orr.w	r3, r3, #32
 800acda:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800acdc:	4a1e      	ldr	r2, [pc, #120]	; (800ad58 <perfect_pass+0x3e4>)
 800acde:	8813      	ldrh	r3, [r2, #0]
 800ace0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800ace4:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800ace6:	4a1c      	ldr	r2, [pc, #112]	; (800ad58 <perfect_pass+0x3e4>)
 800ace8:	8813      	ldrh	r3, [r2, #0]
 800acea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800acee:	8013      	strh	r3, [r2, #0]
					run_mode = HIGH;
 800acf0:	4b1a      	ldr	r3, [pc, #104]	; (800ad5c <perfect_pass+0x3e8>)
 800acf2:	2203      	movs	r2, #3
 800acf4:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800acf6:	4b1a      	ldr	r3, [pc, #104]	; (800ad60 <perfect_pass+0x3ec>)
 800acf8:	2200      	movs	r2, #0
 800acfa:	701a      	strb	r2, [r3, #0]
					goal_mode = 2;
 800acfc:	4b19      	ldr	r3, [pc, #100]	; (800ad64 <perfect_pass+0x3f0>)
 800acfe:	2202      	movs	r2, #2
 800ad00:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 800ad02:	4b19      	ldr	r3, [pc, #100]	; (800ad68 <perfect_pass+0x3f4>)
 800ad04:	f241 3288 	movw	r2, #5000	; 0x1388
 800ad08:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1200;
 800ad0a:	4b18      	ldr	r3, [pc, #96]	; (800ad6c <perfect_pass+0x3f8>)
 800ad0c:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 800ad10:	801a      	strh	r2, [r3, #0]

					pass_mode = 4;
 800ad12:	4b17      	ldr	r3, [pc, #92]	; (800ad70 <perfect_pass+0x3fc>)
 800ad14:	2204      	movs	r2, #4
 800ad16:	701a      	strb	r2, [r3, #0]

					goal_x = 7;
 800ad18:	4b16      	ldr	r3, [pc, #88]	; (800ad74 <perfect_pass+0x400>)
 800ad1a:	2207      	movs	r2, #7
 800ad1c:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800ad1e:	4b16      	ldr	r3, [pc, #88]	; (800ad78 <perfect_pass+0x404>)
 800ad20:	2207      	movs	r2, #7
 800ad22:	701a      	strb	r2, [r3, #0]

					get_base();
 800ad24:	f005 fd52 	bl	80107cc <get_base>

					searchF4();
 800ad28:	f003 faf2 	bl	800e310 <searchF4>
					HAL_Delay(2000);
 800ad2c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800ad30:	f7f6 f974 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800ad34:	4b10      	ldr	r3, [pc, #64]	; (800ad78 <perfect_pass+0x404>)
 800ad36:	2200      	movs	r2, #0
 800ad38:	701a      	strb	r2, [r3, #0]
 800ad3a:	4b0f      	ldr	r3, [pc, #60]	; (800ad78 <perfect_pass+0x404>)
 800ad3c:	781a      	ldrb	r2, [r3, #0]
 800ad3e:	4b0d      	ldr	r3, [pc, #52]	; (800ad74 <perfect_pass+0x400>)
 800ad40:	701a      	strb	r2, [r3, #0]
					searchF4();
 800ad42:	f003 fae5 	bl	800e310 <searchF4>

					goal_x = 7;
 800ad46:	4b0b      	ldr	r3, [pc, #44]	; (800ad74 <perfect_pass+0x400>)
 800ad48:	2207      	movs	r2, #7
 800ad4a:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800ad4c:	4b0a      	ldr	r3, [pc, #40]	; (800ad78 <perfect_pass+0x404>)
 800ad4e:	2207      	movs	r2, #7
 800ad50:	701a      	strb	r2, [r3, #0]
					break;
 800ad52:	e319      	b.n	800b388 <perfect_pass+0xa14>
 800ad54:	08012868 	.word	0x08012868
 800ad58:	20000f68 	.word	0x20000f68
 800ad5c:	20000456 	.word	0x20000456
 800ad60:	200015c8 	.word	0x200015c8
 800ad64:	20000bb1 	.word	0x20000bb1
 800ad68:	20000454 	.word	0x20000454
 800ad6c:	20000f7c 	.word	0x20000f7c
 800ad70:	20000457 	.word	0x20000457
 800ad74:	20000bb0 	.word	0x20000bb0
 800ad78:	20000b4c 	.word	0x20000b4c
				case 6:
					//----a一次探索スラローム走行----
					printf("First Run.\n");
 800ad7c:	489d      	ldr	r0, [pc, #628]	; (800aff4 <perfect_pass+0x680>)
 800ad7e:	f006 fbbf 	bl	8011500 <puts>
					MF.FLAG.SCND = 0;
 800ad82:	4a9d      	ldr	r2, [pc, #628]	; (800aff8 <perfect_pass+0x684>)
 800ad84:	8813      	ldrh	r3, [r2, #0]
 800ad86:	f36f 1345 	bfc	r3, #5, #1
 800ad8a:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800ad8c:	4a9a      	ldr	r2, [pc, #616]	; (800aff8 <perfect_pass+0x684>)
 800ad8e:	8813      	ldrh	r3, [r2, #0]
 800ad90:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800ad94:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 0;
 800ad96:	4a98      	ldr	r2, [pc, #608]	; (800aff8 <perfect_pass+0x684>)
 800ad98:	8813      	ldrh	r3, [r2, #0]
 800ad9a:	f36f 238a 	bfc	r3, #10, #1
 800ad9e:	8013      	strh	r3, [r2, #0]
					run_mode = MIDDLE;
 800ada0:	4b96      	ldr	r3, [pc, #600]	; (800affc <perfect_pass+0x688>)
 800ada2:	2202      	movs	r2, #2
 800ada4:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800ada6:	4b96      	ldr	r3, [pc, #600]	; (800b000 <perfect_pass+0x68c>)
 800ada8:	2200      	movs	r2, #0
 800adaa:	701a      	strb	r2, [r3, #0]
					goal_mode = 2;
 800adac:	4b95      	ldr	r3, [pc, #596]	; (800b004 <perfect_pass+0x690>)
 800adae:	2202      	movs	r2, #2
 800adb0:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 800adb2:	4b95      	ldr	r3, [pc, #596]	; (800b008 <perfect_pass+0x694>)
 800adb4:	f241 3288 	movw	r2, #5000	; 0x1388
 800adb8:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 800;
 800adba:	4b94      	ldr	r3, [pc, #592]	; (800b00c <perfect_pass+0x698>)
 800adbc:	f44f 7248 	mov.w	r2, #800	; 0x320
 800adc0:	801a      	strh	r2, [r3, #0]

					goal_x = GOAL_X;
 800adc2:	4b93      	ldr	r3, [pc, #588]	; (800b010 <perfect_pass+0x69c>)
 800adc4:	2201      	movs	r2, #1
 800adc6:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800adc8:	4b92      	ldr	r3, [pc, #584]	; (800b014 <perfect_pass+0x6a0>)
 800adca:	2200      	movs	r2, #0
 800adcc:	701a      	strb	r2, [r3, #0]

					get_base();
 800adce:	f005 fcfd 	bl	80107cc <get_base>

					searchC();
 800add2:	f002 fe91 	bl	800daf8 <searchC>
					HAL_Delay(2000);
 800add6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800adda:	f7f6 f91f 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800adde:	4b8d      	ldr	r3, [pc, #564]	; (800b014 <perfect_pass+0x6a0>)
 800ade0:	2200      	movs	r2, #0
 800ade2:	701a      	strb	r2, [r3, #0]
 800ade4:	4b8b      	ldr	r3, [pc, #556]	; (800b014 <perfect_pass+0x6a0>)
 800ade6:	781a      	ldrb	r2, [r3, #0]
 800ade8:	4b89      	ldr	r3, [pc, #548]	; (800b010 <perfect_pass+0x69c>)
 800adea:	701a      	strb	r2, [r3, #0]
					searchC();
 800adec:	f002 fe84 	bl	800daf8 <searchC>

					degree_z = target_degree_z;
 800adf0:	4b89      	ldr	r3, [pc, #548]	; (800b018 <perfect_pass+0x6a4>)
 800adf2:	681b      	ldr	r3, [r3, #0]
 800adf4:	4a89      	ldr	r2, [pc, #548]	; (800b01c <perfect_pass+0x6a8>)
 800adf6:	6013      	str	r3, [r2, #0]
					HAL_Delay(2000);
 800adf8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800adfc:	f7f6 f90e 	bl	800101c <HAL_Delay>


					//----a二次探索スラローム+既知区間加速走行 speed2----
					printf("Second Run. (Continuous)\n");
 800ae00:	4887      	ldr	r0, [pc, #540]	; (800b020 <perfect_pass+0x6ac>)
 800ae02:	f006 fb7d 	bl	8011500 <puts>
					MF.FLAG.SCND = 1;
 800ae06:	4a7c      	ldr	r2, [pc, #496]	; (800aff8 <perfect_pass+0x684>)
 800ae08:	8813      	ldrh	r3, [r2, #0]
 800ae0a:	f043 0320 	orr.w	r3, r3, #32
 800ae0e:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800ae10:	4a79      	ldr	r2, [pc, #484]	; (800aff8 <perfect_pass+0x684>)
 800ae12:	8813      	ldrh	r3, [r2, #0]
 800ae14:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800ae18:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800ae1a:	4a77      	ldr	r2, [pc, #476]	; (800aff8 <perfect_pass+0x684>)
 800ae1c:	8813      	ldrh	r3, [r2, #0]
 800ae1e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800ae22:	8013      	strh	r3, [r2, #0]
					run_mode = MIDDLE;
 800ae24:	4b75      	ldr	r3, [pc, #468]	; (800affc <perfect_pass+0x688>)
 800ae26:	2202      	movs	r2, #2
 800ae28:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800ae2a:	4b75      	ldr	r3, [pc, #468]	; (800b000 <perfect_pass+0x68c>)
 800ae2c:	2200      	movs	r2, #0
 800ae2e:	701a      	strb	r2, [r3, #0]
					goal_mode = 2;
 800ae30:	4b74      	ldr	r3, [pc, #464]	; (800b004 <perfect_pass+0x690>)
 800ae32:	2202      	movs	r2, #2
 800ae34:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 800ae36:	4b74      	ldr	r3, [pc, #464]	; (800b008 <perfect_pass+0x694>)
 800ae38:	f241 3288 	movw	r2, #5000	; 0x1388
 800ae3c:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1200;
 800ae3e:	4b73      	ldr	r3, [pc, #460]	; (800b00c <perfect_pass+0x698>)
 800ae40:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 800ae44:	801a      	strh	r2, [r3, #0]
					goal_x = GOAL_X;
 800ae46:	4b72      	ldr	r3, [pc, #456]	; (800b010 <perfect_pass+0x69c>)
 800ae48:	2201      	movs	r2, #1
 800ae4a:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800ae4c:	4b71      	ldr	r3, [pc, #452]	; (800b014 <perfect_pass+0x6a0>)
 800ae4e:	2200      	movs	r2, #0
 800ae50:	701a      	strb	r2, [r3, #0]

					searchD();
 800ae52:	f002 ffbf 	bl	800ddd4 <searchD>
					HAL_Delay(2000);
 800ae56:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800ae5a:	f7f6 f8df 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800ae5e:	4b6d      	ldr	r3, [pc, #436]	; (800b014 <perfect_pass+0x6a0>)
 800ae60:	2200      	movs	r2, #0
 800ae62:	701a      	strb	r2, [r3, #0]
 800ae64:	4b6b      	ldr	r3, [pc, #428]	; (800b014 <perfect_pass+0x6a0>)
 800ae66:	781a      	ldrb	r2, [r3, #0]
 800ae68:	4b69      	ldr	r3, [pc, #420]	; (800b010 <perfect_pass+0x69c>)
 800ae6a:	701a      	strb	r2, [r3, #0]
					searchD();
 800ae6c:	f002 ffb2 	bl	800ddd4 <searchD>

					degree_z = target_degree_z;
 800ae70:	4b69      	ldr	r3, [pc, #420]	; (800b018 <perfect_pass+0x6a4>)
 800ae72:	681b      	ldr	r3, [r3, #0]
 800ae74:	4a69      	ldr	r2, [pc, #420]	; (800b01c <perfect_pass+0x6a8>)
 800ae76:	6013      	str	r3, [r2, #0]
					HAL_Delay(2000);
 800ae78:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800ae7c:	f7f6 f8ce 	bl	800101c <HAL_Delay>
					degree_z = target_degree_z;
					HAL_Delay(2000);

*/
					//----a二次探索スラロームHigh Speed + 既知区間加速----
					printf("Second Run. (Slalom)\n");
 800ae80:	4868      	ldr	r0, [pc, #416]	; (800b024 <perfect_pass+0x6b0>)
 800ae82:	f006 fb3d 	bl	8011500 <puts>
					MF.FLAG.SCND = 1;
 800ae86:	4a5c      	ldr	r2, [pc, #368]	; (800aff8 <perfect_pass+0x684>)
 800ae88:	8813      	ldrh	r3, [r2, #0]
 800ae8a:	f043 0320 	orr.w	r3, r3, #32
 800ae8e:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800ae90:	4a59      	ldr	r2, [pc, #356]	; (800aff8 <perfect_pass+0x684>)
 800ae92:	8813      	ldrh	r3, [r2, #0]
 800ae94:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800ae98:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800ae9a:	4a57      	ldr	r2, [pc, #348]	; (800aff8 <perfect_pass+0x684>)
 800ae9c:	8813      	ldrh	r3, [r2, #0]
 800ae9e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800aea2:	8013      	strh	r3, [r2, #0]
					run_mode = HIGH;
 800aea4:	4b55      	ldr	r3, [pc, #340]	; (800affc <perfect_pass+0x688>)
 800aea6:	2203      	movs	r2, #3
 800aea8:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800aeaa:	4b55      	ldr	r3, [pc, #340]	; (800b000 <perfect_pass+0x68c>)
 800aeac:	2200      	movs	r2, #0
 800aeae:	701a      	strb	r2, [r3, #0]
					goal_mode = 2;
 800aeb0:	4b54      	ldr	r3, [pc, #336]	; (800b004 <perfect_pass+0x690>)
 800aeb2:	2202      	movs	r2, #2
 800aeb4:	701a      	strb	r2, [r3, #0]
					accel_hs = 10000;
 800aeb6:	4b54      	ldr	r3, [pc, #336]	; (800b008 <perfect_pass+0x694>)
 800aeb8:	f242 7210 	movw	r2, #10000	; 0x2710
 800aebc:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1200;
 800aebe:	4b53      	ldr	r3, [pc, #332]	; (800b00c <perfect_pass+0x698>)
 800aec0:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 800aec4:	801a      	strh	r2, [r3, #0]
					goal_x = GOAL_X;
 800aec6:	4b52      	ldr	r3, [pc, #328]	; (800b010 <perfect_pass+0x69c>)
 800aec8:	2201      	movs	r2, #1
 800aeca:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800aecc:	4b51      	ldr	r3, [pc, #324]	; (800b014 <perfect_pass+0x6a0>)
 800aece:	2200      	movs	r2, #0
 800aed0:	701a      	strb	r2, [r3, #0]

					searchD();
 800aed2:	f002 ff7f 	bl	800ddd4 <searchD>
					HAL_Delay(2000);
 800aed6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800aeda:	f7f6 f89f 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800aede:	4b4d      	ldr	r3, [pc, #308]	; (800b014 <perfect_pass+0x6a0>)
 800aee0:	2200      	movs	r2, #0
 800aee2:	701a      	strb	r2, [r3, #0]
 800aee4:	4b4b      	ldr	r3, [pc, #300]	; (800b014 <perfect_pass+0x6a0>)
 800aee6:	781a      	ldrb	r2, [r3, #0]
 800aee8:	4b49      	ldr	r3, [pc, #292]	; (800b010 <perfect_pass+0x69c>)
 800aeea:	701a      	strb	r2, [r3, #0]
					searchD();
 800aeec:	f002 ff72 	bl	800ddd4 <searchD>

					degree_z = target_degree_z;
 800aef0:	4b49      	ldr	r3, [pc, #292]	; (800b018 <perfect_pass+0x6a4>)
 800aef2:	681b      	ldr	r3, [r3, #0]
 800aef4:	4a49      	ldr	r2, [pc, #292]	; (800b01c <perfect_pass+0x6a8>)
 800aef6:	6013      	str	r3, [r2, #0]
					HAL_Delay(2000);
 800aef8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800aefc:	f7f6 f88e 	bl	800101c <HAL_Delay>


					//----a二次探索スラロームHigh Speed + 既知区間加速 Speed2----
					printf("Second Run. (Slalom)\n");
 800af00:	4848      	ldr	r0, [pc, #288]	; (800b024 <perfect_pass+0x6b0>)
 800af02:	f006 fafd 	bl	8011500 <puts>
					MF.FLAG.SCND = 1;
 800af06:	4a3c      	ldr	r2, [pc, #240]	; (800aff8 <perfect_pass+0x684>)
 800af08:	8813      	ldrh	r3, [r2, #0]
 800af0a:	f043 0320 	orr.w	r3, r3, #32
 800af0e:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800af10:	4a39      	ldr	r2, [pc, #228]	; (800aff8 <perfect_pass+0x684>)
 800af12:	8813      	ldrh	r3, [r2, #0]
 800af14:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800af18:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800af1a:	4a37      	ldr	r2, [pc, #220]	; (800aff8 <perfect_pass+0x684>)
 800af1c:	8813      	ldrh	r3, [r2, #0]
 800af1e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800af22:	8013      	strh	r3, [r2, #0]
					run_mode = HIGH;
 800af24:	4b35      	ldr	r3, [pc, #212]	; (800affc <perfect_pass+0x688>)
 800af26:	2203      	movs	r2, #3
 800af28:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800af2a:	4b35      	ldr	r3, [pc, #212]	; (800b000 <perfect_pass+0x68c>)
 800af2c:	2200      	movs	r2, #0
 800af2e:	701a      	strb	r2, [r3, #0]
					goal_mode = 2;
 800af30:	4b34      	ldr	r3, [pc, #208]	; (800b004 <perfect_pass+0x690>)
 800af32:	2202      	movs	r2, #2
 800af34:	701a      	strb	r2, [r3, #0]
					accel_hs = 10000;
 800af36:	4b34      	ldr	r3, [pc, #208]	; (800b008 <perfect_pass+0x694>)
 800af38:	f242 7210 	movw	r2, #10000	; 0x2710
 800af3c:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1600;
 800af3e:	4b33      	ldr	r3, [pc, #204]	; (800b00c <perfect_pass+0x698>)
 800af40:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800af44:	801a      	strh	r2, [r3, #0]
					goal_x = GOAL_X;
 800af46:	4b32      	ldr	r3, [pc, #200]	; (800b010 <perfect_pass+0x69c>)
 800af48:	2201      	movs	r2, #1
 800af4a:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800af4c:	4b31      	ldr	r3, [pc, #196]	; (800b014 <perfect_pass+0x6a0>)
 800af4e:	2200      	movs	r2, #0
 800af50:	701a      	strb	r2, [r3, #0]

					searchD();
 800af52:	f002 ff3f 	bl	800ddd4 <searchD>
					HAL_Delay(2000);
 800af56:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800af5a:	f7f6 f85f 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800af5e:	4b2d      	ldr	r3, [pc, #180]	; (800b014 <perfect_pass+0x6a0>)
 800af60:	2200      	movs	r2, #0
 800af62:	701a      	strb	r2, [r3, #0]
 800af64:	4b2b      	ldr	r3, [pc, #172]	; (800b014 <perfect_pass+0x6a0>)
 800af66:	781a      	ldrb	r2, [r3, #0]
 800af68:	4b29      	ldr	r3, [pc, #164]	; (800b010 <perfect_pass+0x69c>)
 800af6a:	701a      	strb	r2, [r3, #0]
					searchD();
 800af6c:	f002 ff32 	bl	800ddd4 <searchD>

					degree_z = target_degree_z;
 800af70:	4b29      	ldr	r3, [pc, #164]	; (800b018 <perfect_pass+0x6a4>)
 800af72:	681b      	ldr	r3, [r3, #0]
 800af74:	4a29      	ldr	r2, [pc, #164]	; (800b01c <perfect_pass+0x6a8>)
 800af76:	6013      	str	r3, [r2, #0]
					HAL_Delay(2000);
 800af78:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800af7c:	f7f6 f84e 	bl	800101c <HAL_Delay>


					//----a二次探索スラロームHigh Speed + 既知区間加速 Speed3----
					printf("Second Run. (Slalom)\n");
 800af80:	4828      	ldr	r0, [pc, #160]	; (800b024 <perfect_pass+0x6b0>)
 800af82:	f006 fabd 	bl	8011500 <puts>
					MF.FLAG.SCND = 1;
 800af86:	4a1c      	ldr	r2, [pc, #112]	; (800aff8 <perfect_pass+0x684>)
 800af88:	8813      	ldrh	r3, [r2, #0]
 800af8a:	f043 0320 	orr.w	r3, r3, #32
 800af8e:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800af90:	4a19      	ldr	r2, [pc, #100]	; (800aff8 <perfect_pass+0x684>)
 800af92:	8813      	ldrh	r3, [r2, #0]
 800af94:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800af98:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800af9a:	4a17      	ldr	r2, [pc, #92]	; (800aff8 <perfect_pass+0x684>)
 800af9c:	8813      	ldrh	r3, [r2, #0]
 800af9e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800afa2:	8013      	strh	r3, [r2, #0]
					run_mode = HIGH;
 800afa4:	4b15      	ldr	r3, [pc, #84]	; (800affc <perfect_pass+0x688>)
 800afa6:	2203      	movs	r2, #3
 800afa8:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800afaa:	4b15      	ldr	r3, [pc, #84]	; (800b000 <perfect_pass+0x68c>)
 800afac:	2200      	movs	r2, #0
 800afae:	701a      	strb	r2, [r3, #0]
					goal_mode = 2;
 800afb0:	4b14      	ldr	r3, [pc, #80]	; (800b004 <perfect_pass+0x690>)
 800afb2:	2202      	movs	r2, #2
 800afb4:	701a      	strb	r2, [r3, #0]
					accel_hs = 20000;
 800afb6:	4b14      	ldr	r3, [pc, #80]	; (800b008 <perfect_pass+0x694>)
 800afb8:	f644 6220 	movw	r2, #20000	; 0x4e20
 800afbc:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 2000;
 800afbe:	4b13      	ldr	r3, [pc, #76]	; (800b00c <perfect_pass+0x698>)
 800afc0:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800afc4:	801a      	strh	r2, [r3, #0]
					goal_x = GOAL_X;
 800afc6:	4b12      	ldr	r3, [pc, #72]	; (800b010 <perfect_pass+0x69c>)
 800afc8:	2201      	movs	r2, #1
 800afca:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800afcc:	4b11      	ldr	r3, [pc, #68]	; (800b014 <perfect_pass+0x6a0>)
 800afce:	2200      	movs	r2, #0
 800afd0:	701a      	strb	r2, [r3, #0]

					searchD();
 800afd2:	f002 feff 	bl	800ddd4 <searchD>
					HAL_Delay(2000);
 800afd6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800afda:	f7f6 f81f 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800afde:	4b0d      	ldr	r3, [pc, #52]	; (800b014 <perfect_pass+0x6a0>)
 800afe0:	2200      	movs	r2, #0
 800afe2:	701a      	strb	r2, [r3, #0]
 800afe4:	4b0b      	ldr	r3, [pc, #44]	; (800b014 <perfect_pass+0x6a0>)
 800afe6:	781a      	ldrb	r2, [r3, #0]
 800afe8:	4b09      	ldr	r3, [pc, #36]	; (800b010 <perfect_pass+0x69c>)
 800afea:	701a      	strb	r2, [r3, #0]
					searchD();
 800afec:	f002 fef2 	bl	800ddd4 <searchD>
					searchF4();

					goal_x = 7;
					goal_y = 7;

*/					break;
 800aff0:	e1ca      	b.n	800b388 <perfect_pass+0xa14>
 800aff2:	bf00      	nop
 800aff4:	080128d0 	.word	0x080128d0
 800aff8:	20000f68 	.word	0x20000f68
 800affc:	20000456 	.word	0x20000456
 800b000:	200015c8 	.word	0x200015c8
 800b004:	20000bb1 	.word	0x20000bb1
 800b008:	20000454 	.word	0x20000454
 800b00c:	20000f7c 	.word	0x20000f7c
 800b010:	20000bb0 	.word	0x20000bb0
 800b014:	20000b4c 	.word	0x20000b4c
 800b018:	20000bf8 	.word	0x20000bf8
 800b01c:	20000b5c 	.word	0x20000b5c
 800b020:	080128f4 	.word	0x080128f4
 800b024:	08012928 	.word	0x08012928

					break;
				case 7:
					//----a一次探索スラローム走行----
					printf("First Run.\n");
 800b028:	48b3      	ldr	r0, [pc, #716]	; (800b2f8 <perfect_pass+0x984>)
 800b02a:	f006 fa69 	bl	8011500 <puts>
					MF.FLAG.SCND = 0;
 800b02e:	4ab3      	ldr	r2, [pc, #716]	; (800b2fc <perfect_pass+0x988>)
 800b030:	8813      	ldrh	r3, [r2, #0]
 800b032:	f36f 1345 	bfc	r3, #5, #1
 800b036:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800b038:	4ab0      	ldr	r2, [pc, #704]	; (800b2fc <perfect_pass+0x988>)
 800b03a:	8813      	ldrh	r3, [r2, #0]
 800b03c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b040:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 0;
 800b042:	4aae      	ldr	r2, [pc, #696]	; (800b2fc <perfect_pass+0x988>)
 800b044:	8813      	ldrh	r3, [r2, #0]
 800b046:	f36f 238a 	bfc	r3, #10, #1
 800b04a:	8013      	strh	r3, [r2, #0]
					run_mode = MIDDLE;
 800b04c:	4bac      	ldr	r3, [pc, #688]	; (800b300 <perfect_pass+0x98c>)
 800b04e:	2202      	movs	r2, #2
 800b050:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800b052:	4bac      	ldr	r3, [pc, #688]	; (800b304 <perfect_pass+0x990>)
 800b054:	2200      	movs	r2, #0
 800b056:	701a      	strb	r2, [r3, #0]
					goal_mode = 2;
 800b058:	4bab      	ldr	r3, [pc, #684]	; (800b308 <perfect_pass+0x994>)
 800b05a:	2202      	movs	r2, #2
 800b05c:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 800b05e:	4bab      	ldr	r3, [pc, #684]	; (800b30c <perfect_pass+0x998>)
 800b060:	f241 3288 	movw	r2, #5000	; 0x1388
 800b064:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 800;
 800b066:	4baa      	ldr	r3, [pc, #680]	; (800b310 <perfect_pass+0x99c>)
 800b068:	f44f 7248 	mov.w	r2, #800	; 0x320
 800b06c:	801a      	strh	r2, [r3, #0]

					goal_x = 7;
 800b06e:	4ba9      	ldr	r3, [pc, #676]	; (800b314 <perfect_pass+0x9a0>)
 800b070:	2207      	movs	r2, #7
 800b072:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800b074:	4ba8      	ldr	r3, [pc, #672]	; (800b318 <perfect_pass+0x9a4>)
 800b076:	2207      	movs	r2, #7
 800b078:	701a      	strb	r2, [r3, #0]

					get_base();
 800b07a:	f005 fba7 	bl	80107cc <get_base>

					searchC();
 800b07e:	f002 fd3b 	bl	800daf8 <searchC>
					HAL_Delay(2000);
 800b082:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800b086:	f7f5 ffc9 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800b08a:	4ba3      	ldr	r3, [pc, #652]	; (800b318 <perfect_pass+0x9a4>)
 800b08c:	2200      	movs	r2, #0
 800b08e:	701a      	strb	r2, [r3, #0]
 800b090:	4ba1      	ldr	r3, [pc, #644]	; (800b318 <perfect_pass+0x9a4>)
 800b092:	781a      	ldrb	r2, [r3, #0]
 800b094:	4b9f      	ldr	r3, [pc, #636]	; (800b314 <perfect_pass+0x9a0>)
 800b096:	701a      	strb	r2, [r3, #0]
					searchC();
 800b098:	f002 fd2e 	bl	800daf8 <searchC>

					degree_z = target_degree_z;
 800b09c:	4b9f      	ldr	r3, [pc, #636]	; (800b31c <perfect_pass+0x9a8>)
 800b09e:	681b      	ldr	r3, [r3, #0]
 800b0a0:	4a9f      	ldr	r2, [pc, #636]	; (800b320 <perfect_pass+0x9ac>)
 800b0a2:	6013      	str	r3, [r2, #0]
					HAL_Delay(2000);
 800b0a4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800b0a8:	f7f5 ffb8 	bl	800101c <HAL_Delay>


					//----a二次探索スラローム+既知区間加速走行 speed2----
					printf("Second Run. (Continuous)\n");
 800b0ac:	489d      	ldr	r0, [pc, #628]	; (800b324 <perfect_pass+0x9b0>)
 800b0ae:	f006 fa27 	bl	8011500 <puts>
					MF.FLAG.SCND = 1;
 800b0b2:	4a92      	ldr	r2, [pc, #584]	; (800b2fc <perfect_pass+0x988>)
 800b0b4:	8813      	ldrh	r3, [r2, #0]
 800b0b6:	f043 0320 	orr.w	r3, r3, #32
 800b0ba:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800b0bc:	4a8f      	ldr	r2, [pc, #572]	; (800b2fc <perfect_pass+0x988>)
 800b0be:	8813      	ldrh	r3, [r2, #0]
 800b0c0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b0c4:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800b0c6:	4a8d      	ldr	r2, [pc, #564]	; (800b2fc <perfect_pass+0x988>)
 800b0c8:	8813      	ldrh	r3, [r2, #0]
 800b0ca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800b0ce:	8013      	strh	r3, [r2, #0]
					run_mode = MIDDLE;
 800b0d0:	4b8b      	ldr	r3, [pc, #556]	; (800b300 <perfect_pass+0x98c>)
 800b0d2:	2202      	movs	r2, #2
 800b0d4:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800b0d6:	4b8b      	ldr	r3, [pc, #556]	; (800b304 <perfect_pass+0x990>)
 800b0d8:	2200      	movs	r2, #0
 800b0da:	701a      	strb	r2, [r3, #0]
					goal_mode = 2;
 800b0dc:	4b8a      	ldr	r3, [pc, #552]	; (800b308 <perfect_pass+0x994>)
 800b0de:	2202      	movs	r2, #2
 800b0e0:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 800b0e2:	4b8a      	ldr	r3, [pc, #552]	; (800b30c <perfect_pass+0x998>)
 800b0e4:	f241 3288 	movw	r2, #5000	; 0x1388
 800b0e8:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1200;
 800b0ea:	4b89      	ldr	r3, [pc, #548]	; (800b310 <perfect_pass+0x99c>)
 800b0ec:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 800b0f0:	801a      	strh	r2, [r3, #0]
					goal_x = 7;
 800b0f2:	4b88      	ldr	r3, [pc, #544]	; (800b314 <perfect_pass+0x9a0>)
 800b0f4:	2207      	movs	r2, #7
 800b0f6:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800b0f8:	4b87      	ldr	r3, [pc, #540]	; (800b318 <perfect_pass+0x9a4>)
 800b0fa:	2207      	movs	r2, #7
 800b0fc:	701a      	strb	r2, [r3, #0]

					searchD();
 800b0fe:	f002 fe69 	bl	800ddd4 <searchD>
					HAL_Delay(2000);
 800b102:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800b106:	f7f5 ff89 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800b10a:	4b83      	ldr	r3, [pc, #524]	; (800b318 <perfect_pass+0x9a4>)
 800b10c:	2200      	movs	r2, #0
 800b10e:	701a      	strb	r2, [r3, #0]
 800b110:	4b81      	ldr	r3, [pc, #516]	; (800b318 <perfect_pass+0x9a4>)
 800b112:	781a      	ldrb	r2, [r3, #0]
 800b114:	4b7f      	ldr	r3, [pc, #508]	; (800b314 <perfect_pass+0x9a0>)
 800b116:	701a      	strb	r2, [r3, #0]
					searchD();
 800b118:	f002 fe5c 	bl	800ddd4 <searchD>

					degree_z = target_degree_z;
 800b11c:	4b7f      	ldr	r3, [pc, #508]	; (800b31c <perfect_pass+0x9a8>)
 800b11e:	681b      	ldr	r3, [r3, #0]
 800b120:	4a7f      	ldr	r2, [pc, #508]	; (800b320 <perfect_pass+0x9ac>)
 800b122:	6013      	str	r3, [r2, #0]
					HAL_Delay(2000);
 800b124:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800b128:	f7f5 ff78 	bl	800101c <HAL_Delay>


					//----a直線と大回り圧縮(adv_posを停止)+半区画ベース----
					printf("pass press 3.\n");
 800b12c:	487e      	ldr	r0, [pc, #504]	; (800b328 <perfect_pass+0x9b4>)
 800b12e:	f006 f9e7 	bl	8011500 <puts>
					MF.FLAG.SCND = 1;
 800b132:	4a72      	ldr	r2, [pc, #456]	; (800b2fc <perfect_pass+0x988>)
 800b134:	8813      	ldrh	r3, [r2, #0]
 800b136:	f043 0320 	orr.w	r3, r3, #32
 800b13a:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800b13c:	4a6f      	ldr	r2, [pc, #444]	; (800b2fc <perfect_pass+0x988>)
 800b13e:	8813      	ldrh	r3, [r2, #0]
 800b140:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b144:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800b146:	4a6d      	ldr	r2, [pc, #436]	; (800b2fc <perfect_pass+0x988>)
 800b148:	8813      	ldrh	r3, [r2, #0]
 800b14a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800b14e:	8013      	strh	r3, [r2, #0]
					run_mode = MIDDLE;
 800b150:	4b6b      	ldr	r3, [pc, #428]	; (800b300 <perfect_pass+0x98c>)
 800b152:	2202      	movs	r2, #2
 800b154:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800b156:	4b6b      	ldr	r3, [pc, #428]	; (800b304 <perfect_pass+0x990>)
 800b158:	2200      	movs	r2, #0
 800b15a:	701a      	strb	r2, [r3, #0]
					goal_mode = 1;
 800b15c:	4b6a      	ldr	r3, [pc, #424]	; (800b308 <perfect_pass+0x994>)
 800b15e:	2201      	movs	r2, #1
 800b160:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 800b162:	4b6a      	ldr	r3, [pc, #424]	; (800b30c <perfect_pass+0x998>)
 800b164:	f241 3288 	movw	r2, #5000	; 0x1388
 800b168:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1200;
 800b16a:	4b69      	ldr	r3, [pc, #420]	; (800b310 <perfect_pass+0x99c>)
 800b16c:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 800b170:	801a      	strh	r2, [r3, #0]

					pass_mode = 3;						//a半区画ベースでroute配列生成
 800b172:	4b6e      	ldr	r3, [pc, #440]	; (800b32c <perfect_pass+0x9b8>)
 800b174:	2203      	movs	r2, #3
 800b176:	701a      	strb	r2, [r3, #0]

					goal_x = 7;
 800b178:	4b66      	ldr	r3, [pc, #408]	; (800b314 <perfect_pass+0x9a0>)
 800b17a:	2207      	movs	r2, #7
 800b17c:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800b17e:	4b66      	ldr	r3, [pc, #408]	; (800b318 <perfect_pass+0x9a4>)
 800b180:	2207      	movs	r2, #7
 800b182:	701a      	strb	r2, [r3, #0]

					searchF3();
 800b184:	f002 ffee 	bl	800e164 <searchF3>
					HAL_Delay(2000);
 800b188:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800b18c:	f7f5 ff46 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800b190:	4b61      	ldr	r3, [pc, #388]	; (800b318 <perfect_pass+0x9a4>)
 800b192:	2200      	movs	r2, #0
 800b194:	701a      	strb	r2, [r3, #0]
 800b196:	4b60      	ldr	r3, [pc, #384]	; (800b318 <perfect_pass+0x9a4>)
 800b198:	781a      	ldrb	r2, [r3, #0]
 800b19a:	4b5e      	ldr	r3, [pc, #376]	; (800b314 <perfect_pass+0x9a0>)
 800b19c:	701a      	strb	r2, [r3, #0]
					searchF3();
 800b19e:	f002 ffe1 	bl	800e164 <searchF3>

					driveC2(SETPOS_BACK);         //a尻を当てる程度に後退。回転後に停止する
 800b1a2:	2064      	movs	r0, #100	; 0x64
 800b1a4:	f7fa f918 	bl	80053d8 <driveC2>
					degree_z = target_degree_z;
 800b1a8:	4b5c      	ldr	r3, [pc, #368]	; (800b31c <perfect_pass+0x9a8>)
 800b1aa:	681b      	ldr	r3, [r3, #0]
 800b1ac:	4a5c      	ldr	r2, [pc, #368]	; (800b320 <perfect_pass+0x9ac>)
 800b1ae:	6013      	str	r3, [r2, #0]
					HAL_Delay(2000);
 800b1b0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800b1b4:	f7f5 ff32 	bl	800101c <HAL_Delay>


					//----a直線と大回り圧縮と斜めｰｰｰｰ
					printf("pass press 4.\n");
 800b1b8:	485d      	ldr	r0, [pc, #372]	; (800b330 <perfect_pass+0x9bc>)
 800b1ba:	f006 f9a1 	bl	8011500 <puts>
					MF.FLAG.SCND = 1;
 800b1be:	4a4f      	ldr	r2, [pc, #316]	; (800b2fc <perfect_pass+0x988>)
 800b1c0:	8813      	ldrh	r3, [r2, #0]
 800b1c2:	f043 0320 	orr.w	r3, r3, #32
 800b1c6:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800b1c8:	4a4c      	ldr	r2, [pc, #304]	; (800b2fc <perfect_pass+0x988>)
 800b1ca:	8813      	ldrh	r3, [r2, #0]
 800b1cc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b1d0:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800b1d2:	4a4a      	ldr	r2, [pc, #296]	; (800b2fc <perfect_pass+0x988>)
 800b1d4:	8813      	ldrh	r3, [r2, #0]
 800b1d6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800b1da:	8013      	strh	r3, [r2, #0]
					run_mode = HIGH;
 800b1dc:	4b48      	ldr	r3, [pc, #288]	; (800b300 <perfect_pass+0x98c>)
 800b1de:	2203      	movs	r2, #3
 800b1e0:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800b1e2:	4b48      	ldr	r3, [pc, #288]	; (800b304 <perfect_pass+0x990>)
 800b1e4:	2200      	movs	r2, #0
 800b1e6:	701a      	strb	r2, [r3, #0]
					goal_mode = 1;
 800b1e8:	4b47      	ldr	r3, [pc, #284]	; (800b308 <perfect_pass+0x994>)
 800b1ea:	2201      	movs	r2, #1
 800b1ec:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 800b1ee:	4b47      	ldr	r3, [pc, #284]	; (800b30c <perfect_pass+0x998>)
 800b1f0:	f241 3288 	movw	r2, #5000	; 0x1388
 800b1f4:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1200;
 800b1f6:	4b46      	ldr	r3, [pc, #280]	; (800b310 <perfect_pass+0x99c>)
 800b1f8:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 800b1fc:	801a      	strh	r2, [r3, #0]

					pass_mode = 4;
 800b1fe:	4b4b      	ldr	r3, [pc, #300]	; (800b32c <perfect_pass+0x9b8>)
 800b200:	2204      	movs	r2, #4
 800b202:	701a      	strb	r2, [r3, #0]

					goal_x = 7;
 800b204:	4b43      	ldr	r3, [pc, #268]	; (800b314 <perfect_pass+0x9a0>)
 800b206:	2207      	movs	r2, #7
 800b208:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800b20a:	4b43      	ldr	r3, [pc, #268]	; (800b318 <perfect_pass+0x9a4>)
 800b20c:	2207      	movs	r2, #7
 800b20e:	701a      	strb	r2, [r3, #0]

					searchF4();
 800b210:	f003 f87e 	bl	800e310 <searchF4>
					HAL_Delay(2000);
 800b214:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800b218:	f7f5 ff00 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800b21c:	4b3e      	ldr	r3, [pc, #248]	; (800b318 <perfect_pass+0x9a4>)
 800b21e:	2200      	movs	r2, #0
 800b220:	701a      	strb	r2, [r3, #0]
 800b222:	4b3d      	ldr	r3, [pc, #244]	; (800b318 <perfect_pass+0x9a4>)
 800b224:	781a      	ldrb	r2, [r3, #0]
 800b226:	4b3b      	ldr	r3, [pc, #236]	; (800b314 <perfect_pass+0x9a0>)
 800b228:	701a      	strb	r2, [r3, #0]
					searchF4();
 800b22a:	f003 f871 	bl	800e310 <searchF4>

					goal_x = 7;
 800b22e:	4b39      	ldr	r3, [pc, #228]	; (800b314 <perfect_pass+0x9a0>)
 800b230:	2207      	movs	r2, #7
 800b232:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800b234:	4b38      	ldr	r3, [pc, #224]	; (800b318 <perfect_pass+0x9a4>)
 800b236:	2207      	movs	r2, #7
 800b238:	701a      	strb	r2, [r3, #0]
					goal_x = goal_y = 0;
					searchD();
*/

					//----a直線と大回り圧縮(adv_posを停止)+半区画ベース----
					printf("pass press 3.\n");
 800b23a:	483b      	ldr	r0, [pc, #236]	; (800b328 <perfect_pass+0x9b4>)
 800b23c:	f006 f960 	bl	8011500 <puts>
					MF.FLAG.SCND = 1;
 800b240:	4a2e      	ldr	r2, [pc, #184]	; (800b2fc <perfect_pass+0x988>)
 800b242:	8813      	ldrh	r3, [r2, #0]
 800b244:	f043 0320 	orr.w	r3, r3, #32
 800b248:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800b24a:	4a2c      	ldr	r2, [pc, #176]	; (800b2fc <perfect_pass+0x988>)
 800b24c:	8813      	ldrh	r3, [r2, #0]
 800b24e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b252:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800b254:	4a29      	ldr	r2, [pc, #164]	; (800b2fc <perfect_pass+0x988>)
 800b256:	8813      	ldrh	r3, [r2, #0]
 800b258:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800b25c:	8013      	strh	r3, [r2, #0]
					run_mode = HIGH;
 800b25e:	4b28      	ldr	r3, [pc, #160]	; (800b300 <perfect_pass+0x98c>)
 800b260:	2203      	movs	r2, #3
 800b262:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800b264:	4b27      	ldr	r3, [pc, #156]	; (800b304 <perfect_pass+0x990>)
 800b266:	2200      	movs	r2, #0
 800b268:	701a      	strb	r2, [r3, #0]
					goal_mode = 1;
 800b26a:	4b27      	ldr	r3, [pc, #156]	; (800b308 <perfect_pass+0x994>)
 800b26c:	2201      	movs	r2, #1
 800b26e:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 800b270:	4b26      	ldr	r3, [pc, #152]	; (800b30c <perfect_pass+0x998>)
 800b272:	f241 3288 	movw	r2, #5000	; 0x1388
 800b276:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1200;
 800b278:	4b25      	ldr	r3, [pc, #148]	; (800b310 <perfect_pass+0x99c>)
 800b27a:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 800b27e:	801a      	strh	r2, [r3, #0]

					pass_mode = 3;						//a半区画ベースでroute配列生成
 800b280:	4b2a      	ldr	r3, [pc, #168]	; (800b32c <perfect_pass+0x9b8>)
 800b282:	2203      	movs	r2, #3
 800b284:	701a      	strb	r2, [r3, #0]

					goal_x = 7;
 800b286:	4b23      	ldr	r3, [pc, #140]	; (800b314 <perfect_pass+0x9a0>)
 800b288:	2207      	movs	r2, #7
 800b28a:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800b28c:	4b22      	ldr	r3, [pc, #136]	; (800b318 <perfect_pass+0x9a4>)
 800b28e:	2207      	movs	r2, #7
 800b290:	701a      	strb	r2, [r3, #0]

					searchF3();
 800b292:	f002 ff67 	bl	800e164 <searchF3>
					HAL_Delay(2000);
 800b296:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800b29a:	f7f5 febf 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800b29e:	4b1e      	ldr	r3, [pc, #120]	; (800b318 <perfect_pass+0x9a4>)
 800b2a0:	2200      	movs	r2, #0
 800b2a2:	701a      	strb	r2, [r3, #0]
 800b2a4:	4b1c      	ldr	r3, [pc, #112]	; (800b318 <perfect_pass+0x9a4>)
 800b2a6:	781a      	ldrb	r2, [r3, #0]
 800b2a8:	4b1a      	ldr	r3, [pc, #104]	; (800b314 <perfect_pass+0x9a0>)
 800b2aa:	701a      	strb	r2, [r3, #0]
					searchF3();
 800b2ac:	f002 ff5a 	bl	800e164 <searchF3>

					driveC2(SETPOS_BACK);         //a尻を当てる程度に後退。回転後に停止する
 800b2b0:	2064      	movs	r0, #100	; 0x64
 800b2b2:	f7fa f891 	bl	80053d8 <driveC2>
					degree_z = target_degree_z;
 800b2b6:	4b19      	ldr	r3, [pc, #100]	; (800b31c <perfect_pass+0x9a8>)
 800b2b8:	681b      	ldr	r3, [r3, #0]
 800b2ba:	4a19      	ldr	r2, [pc, #100]	; (800b320 <perfect_pass+0x9ac>)
 800b2bc:	6013      	str	r3, [r2, #0]
					HAL_Delay(2000);
 800b2be:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800b2c2:	f7f5 feab 	bl	800101c <HAL_Delay>


					//----a直線と大回り圧縮と斜めｰｰｰｰ
					printf("pass press 4.\n");
 800b2c6:	481a      	ldr	r0, [pc, #104]	; (800b330 <perfect_pass+0x9bc>)
 800b2c8:	f006 f91a 	bl	8011500 <puts>
					MF.FLAG.SCND = 1;
 800b2cc:	4a0b      	ldr	r2, [pc, #44]	; (800b2fc <perfect_pass+0x988>)
 800b2ce:	8813      	ldrh	r3, [r2, #0]
 800b2d0:	f043 0320 	orr.w	r3, r3, #32
 800b2d4:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800b2d6:	4a09      	ldr	r2, [pc, #36]	; (800b2fc <perfect_pass+0x988>)
 800b2d8:	8813      	ldrh	r3, [r2, #0]
 800b2da:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b2de:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800b2e0:	4a06      	ldr	r2, [pc, #24]	; (800b2fc <perfect_pass+0x988>)
 800b2e2:	8813      	ldrh	r3, [r2, #0]
 800b2e4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800b2e8:	8013      	strh	r3, [r2, #0]
					run_mode = HIGH;
 800b2ea:	4b05      	ldr	r3, [pc, #20]	; (800b300 <perfect_pass+0x98c>)
 800b2ec:	2203      	movs	r2, #3
 800b2ee:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800b2f0:	4b04      	ldr	r3, [pc, #16]	; (800b304 <perfect_pass+0x990>)
 800b2f2:	2200      	movs	r2, #0
 800b2f4:	701a      	strb	r2, [r3, #0]
 800b2f6:	e01d      	b.n	800b334 <perfect_pass+0x9c0>
 800b2f8:	080128d0 	.word	0x080128d0
 800b2fc:	20000f68 	.word	0x20000f68
 800b300:	20000456 	.word	0x20000456
 800b304:	200015c8 	.word	0x200015c8
 800b308:	20000bb1 	.word	0x20000bb1
 800b30c:	20000454 	.word	0x20000454
 800b310:	20000f7c 	.word	0x20000f7c
 800b314:	20000bb0 	.word	0x20000bb0
 800b318:	20000b4c 	.word	0x20000b4c
 800b31c:	20000bf8 	.word	0x20000bf8
 800b320:	20000b5c 	.word	0x20000b5c
 800b324:	080128f4 	.word	0x080128f4
 800b328:	08012848 	.word	0x08012848
 800b32c:	20000457 	.word	0x20000457
 800b330:	08012868 	.word	0x08012868
					goal_mode = 1;
 800b334:	4b15      	ldr	r3, [pc, #84]	; (800b38c <perfect_pass+0xa18>)
 800b336:	2201      	movs	r2, #1
 800b338:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 800b33a:	4b15      	ldr	r3, [pc, #84]	; (800b390 <perfect_pass+0xa1c>)
 800b33c:	f241 3288 	movw	r2, #5000	; 0x1388
 800b340:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1200;
 800b342:	4b14      	ldr	r3, [pc, #80]	; (800b394 <perfect_pass+0xa20>)
 800b344:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 800b348:	801a      	strh	r2, [r3, #0]

					pass_mode = 4;
 800b34a:	4b13      	ldr	r3, [pc, #76]	; (800b398 <perfect_pass+0xa24>)
 800b34c:	2204      	movs	r2, #4
 800b34e:	701a      	strb	r2, [r3, #0]

					goal_x = 7;
 800b350:	4b12      	ldr	r3, [pc, #72]	; (800b39c <perfect_pass+0xa28>)
 800b352:	2207      	movs	r2, #7
 800b354:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800b356:	4b12      	ldr	r3, [pc, #72]	; (800b3a0 <perfect_pass+0xa2c>)
 800b358:	2207      	movs	r2, #7
 800b35a:	701a      	strb	r2, [r3, #0]

					searchF4();
 800b35c:	f002 ffd8 	bl	800e310 <searchF4>
					HAL_Delay(2000);
 800b360:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800b364:	f7f5 fe5a 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800b368:	4b0d      	ldr	r3, [pc, #52]	; (800b3a0 <perfect_pass+0xa2c>)
 800b36a:	2200      	movs	r2, #0
 800b36c:	701a      	strb	r2, [r3, #0]
 800b36e:	4b0c      	ldr	r3, [pc, #48]	; (800b3a0 <perfect_pass+0xa2c>)
 800b370:	781a      	ldrb	r2, [r3, #0]
 800b372:	4b0a      	ldr	r3, [pc, #40]	; (800b39c <perfect_pass+0xa28>)
 800b374:	701a      	strb	r2, [r3, #0]
					searchF4();
 800b376:	f002 ffcb 	bl	800e310 <searchF4>

					goal_x = 7;
 800b37a:	4b08      	ldr	r3, [pc, #32]	; (800b39c <perfect_pass+0xa28>)
 800b37c:	2207      	movs	r2, #7
 800b37e:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800b380:	4b07      	ldr	r3, [pc, #28]	; (800b3a0 <perfect_pass+0xa2c>)
 800b382:	2207      	movs	r2, #7
 800b384:	701a      	strb	r2, [r3, #0]

					break;
 800b386:	bf00      	nop
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 800b388:	f7ff bafd 	b.w	800a986 <perfect_pass+0x12>
 800b38c:	20000bb1 	.word	0x20000bb1
 800b390:	20000454 	.word	0x20000454
 800b394:	20000f7c 	.word	0x20000f7c
 800b398:	20000457 	.word	0x20000457
 800b39c:	20000bb0 	.word	0x20000bb0
 800b3a0:	20000b4c 	.word	0x20000b4c

0800b3a4 <eeprom_enable_write>:
//eeprom_enable_write
// eepromとして使うflashメモリ領域をeraseし，書き込みを有効にする
// 引数：なし
// 戻り値：問題が起こらなければHAL_OKを返す
//+++++++++++++++++++++++++++++++++++++++++++++++
HAL_StatusTypeDef eeprom_enable_write(void){
 800b3a4:	b580      	push	{r7, lr}
 800b3a6:	b088      	sub	sp, #32
 800b3a8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status;
  FLASH_EraseInitTypeDef EraseInitStruct;
  uint32_t PageError = 0;
 800b3aa:	2300      	movs	r3, #0
 800b3ac:	607b      	str	r3, [r7, #4]
  EraseInitStruct.TypeErase = FLASH_TYPEERASE_SECTORS;
 800b3ae:	2300      	movs	r3, #0
 800b3b0:	60bb      	str	r3, [r7, #8]
  //EraseInitStruct.Banks = FLASH_BANK_1;
  //EraseInitStruct.Sector = EEPROM_START_ADDRESS;
  EraseInitStruct.Sector = FLASH_SECTOR_11;
 800b3b2:	230b      	movs	r3, #11
 800b3b4:	613b      	str	r3, [r7, #16]
  EraseInitStruct.NbSectors = 1;
 800b3b6:	2301      	movs	r3, #1
 800b3b8:	617b      	str	r3, [r7, #20]
  EraseInitStruct.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 800b3ba:	2302      	movs	r3, #2
 800b3bc:	61bb      	str	r3, [r7, #24]

  status = HAL_FLASH_Unlock();
 800b3be:	f7f6 fb6f 	bl	8001aa0 <HAL_FLASH_Unlock>
 800b3c2:	4603      	mov	r3, r0
 800b3c4:	77fb      	strb	r3, [r7, #31]
  if(status != HAL_OK) return status;
 800b3c6:	7ffb      	ldrb	r3, [r7, #31]
 800b3c8:	2b00      	cmp	r3, #0
 800b3ca:	d001      	beq.n	800b3d0 <eeprom_enable_write+0x2c>
 800b3cc:	7ffb      	ldrb	r3, [r7, #31]
 800b3ce:	e009      	b.n	800b3e4 <eeprom_enable_write+0x40>
  status = HAL_FLASHEx_Erase(&EraseInitStruct, &PageError);
 800b3d0:	1d3a      	adds	r2, r7, #4
 800b3d2:	f107 0308 	add.w	r3, r7, #8
 800b3d6:	4611      	mov	r1, r2
 800b3d8:	4618      	mov	r0, r3
 800b3da:	f7f6 fcbf 	bl	8001d5c <HAL_FLASHEx_Erase>
 800b3de:	4603      	mov	r3, r0
 800b3e0:	77fb      	strb	r3, [r7, #31]
  return status;
 800b3e2:	7ffb      	ldrb	r3, [r7, #31]
}
 800b3e4:	4618      	mov	r0, r3
 800b3e6:	3720      	adds	r7, #32
 800b3e8:	46bd      	mov	sp, r7
 800b3ea:	bd80      	pop	{r7, pc}

0800b3ec <eeprom_disable_write>:
//eeprom_disable_write
// eepromとして使うflashメモリ領域への書き込みを無効にする
// 引数：なし
// 戻り値：問題が起こらなければHAL_OKを返す
//+++++++++++++++++++++++++++++++++++++++++++++++
HAL_StatusTypeDef eeprom_disable_write(void){
 800b3ec:	b580      	push	{r7, lr}
 800b3ee:	af00      	add	r7, sp, #0
  return HAL_FLASH_Lock();
 800b3f0:	f7f6 fb78 	bl	8001ae4 <HAL_FLASH_Lock>
 800b3f4:	4603      	mov	r3, r0
}
 800b3f6:	4618      	mov	r0, r3
 800b3f8:	bd80      	pop	{r7, pc}

0800b3fa <eeprom_write_halfword>:
//eeprom_write_halfword
// eepromとして使うflashメモリ領域へ2バイトの値を書き込む
// 引数：address …… eepromとして使うflashメモリ領域の先頭アドレスからのオフセット，data …… 書き込みたいuin16_t型データ
// 戻り値：問題が起こらなければHAL_OKを返す
//+++++++++++++++++++++++++++++++++++++++++++++++
HAL_StatusTypeDef eeprom_write_halfword(uint32_t address, uint16_t data){
 800b3fa:	b590      	push	{r4, r7, lr}
 800b3fc:	b085      	sub	sp, #20
 800b3fe:	af00      	add	r7, sp, #0
 800b400:	6078      	str	r0, [r7, #4]
 800b402:	460b      	mov	r3, r1
 800b404:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status;
  address = address*2 + EEPROM_START_ADDRESS;
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	f103 6380 	add.w	r3, r3, #67108864	; 0x4000000
 800b40c:	f503 23e0 	add.w	r3, r3, #458752	; 0x70000
 800b410:	005b      	lsls	r3, r3, #1
 800b412:	607b      	str	r3, [r7, #4]
  status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, address, data);
 800b414:	887b      	ldrh	r3, [r7, #2]
 800b416:	f04f 0400 	mov.w	r4, #0
 800b41a:	461a      	mov	r2, r3
 800b41c:	4623      	mov	r3, r4
 800b41e:	6879      	ldr	r1, [r7, #4]
 800b420:	2001      	movs	r0, #1
 800b422:	f7f6 fae9 	bl	80019f8 <HAL_FLASH_Program>
 800b426:	4603      	mov	r3, r0
 800b428:	73fb      	strb	r3, [r7, #15]
  return status;
 800b42a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b42c:	4618      	mov	r0, r3
 800b42e:	3714      	adds	r7, #20
 800b430:	46bd      	mov	sp, r7
 800b432:	bd90      	pop	{r4, r7, pc}

0800b434 <eeprom_read_halfword>:
//eeprom_read_halfword
// eepromとして使うflashメモリ領域から2バイトの値を読み込む
// 引数：address …… eepromとして使うflashメモリ領域の先頭アドレスからのオフセット
// 戻り値：読み込んだuin16_t型データ
//+++++++++++++++++++++++++++++++++++++++++++++++
uint16_t eeprom_read_halfword(uint32_t address){
 800b434:	b480      	push	{r7}
 800b436:	b085      	sub	sp, #20
 800b438:	af00      	add	r7, sp, #0
 800b43a:	6078      	str	r0, [r7, #4]
  uint16_t val = 0;
 800b43c:	2300      	movs	r3, #0
 800b43e:	81fb      	strh	r3, [r7, #14]
  address = address*2 + EEPROM_START_ADDRESS;
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	f103 6380 	add.w	r3, r3, #67108864	; 0x4000000
 800b446:	f503 23e0 	add.w	r3, r3, #458752	; 0x70000
 800b44a:	005b      	lsls	r3, r3, #1
 800b44c:	607b      	str	r3, [r7, #4]
  val = *(__IO uint16_t *)address;
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	881b      	ldrh	r3, [r3, #0]
 800b452:	81fb      	strh	r3, [r7, #14]
  return val;
 800b454:	89fb      	ldrh	r3, [r7, #14]
}
 800b456:	4618      	mov	r0, r3
 800b458:	3714      	adds	r7, #20
 800b45a:	46bd      	mov	sp, r7
 800b45c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b460:	4770      	bx	lr
	...

0800b464 <gyro_init>:
#include "global.h"

SPI_HandleTypeDef hspi3;


void gyro_init(void){
 800b464:	b580      	push	{r7, lr}
 800b466:	b082      	sub	sp, #8
 800b468:	af00      	add	r7, sp, #0
  uint8_t who_am_i;

  HAL_Delay(100); 					// wait start up
 800b46a:	2064      	movs	r0, #100	; 0x64
 800b46c:	f7f5 fdd6 	bl	800101c <HAL_Delay>
  who_am_i = read_byte(WHO_AM_I); 	// 1. read who am i
 800b470:	2075      	movs	r0, #117	; 0x75
 800b472:	f000 f82f 	bl	800b4d4 <read_byte>
 800b476:	4603      	mov	r3, r0
 800b478:	71fb      	strb	r3, [r7, #7]
  printf("0x%x\r\n",who_am_i); 		// 2. check who am i value
 800b47a:	79fb      	ldrb	r3, [r7, #7]
 800b47c:	4619      	mov	r1, r3
 800b47e:	4813      	ldr	r0, [pc, #76]	; (800b4cc <gyro_init+0x68>)
 800b480:	f005 ffca 	bl	8011418 <iprintf>

  // 2. error check
  if (who_am_i != 0x98){
 800b484:	79fb      	ldrb	r3, [r7, #7]
 800b486:	2b98      	cmp	r3, #152	; 0x98
 800b488:	d003      	beq.n	800b492 <gyro_init+0x2e>
    while(1){
      printf("gyro_error\r");
 800b48a:	4811      	ldr	r0, [pc, #68]	; (800b4d0 <gyro_init+0x6c>)
 800b48c:	f005 ffc4 	bl	8011418 <iprintf>
 800b490:	e7fb      	b.n	800b48a <gyro_init+0x26>
    }
  }

  HAL_Delay(50); // wait
 800b492:	2032      	movs	r0, #50	; 0x32
 800b494:	f7f5 fdc2 	bl	800101c <HAL_Delay>
  write_byte(PWR_MGMT_1, 0x00); 	// 3. set pwr_might
 800b498:	2100      	movs	r1, #0
 800b49a:	206b      	movs	r0, #107	; 0x6b
 800b49c:	f000 f846 	bl	800b52c <write_byte>

  HAL_Delay(50);
 800b4a0:	2032      	movs	r0, #50	; 0x32
 800b4a2:	f7f5 fdbb 	bl	800101c <HAL_Delay>
  write_byte(CONFIG, 0x00); 		// 4. set config
 800b4a6:	2100      	movs	r1, #0
 800b4a8:	201a      	movs	r0, #26
 800b4aa:	f000 f83f 	bl	800b52c <write_byte>

  HAL_Delay(50);
 800b4ae:	2032      	movs	r0, #50	; 0x32
 800b4b0:	f7f5 fdb4 	bl	800101c <HAL_Delay>
  write_byte(GYRO_CONFIG, 0x18); 	// 5. set gyro config
 800b4b4:	2118      	movs	r1, #24
 800b4b6:	201b      	movs	r0, #27
 800b4b8:	f000 f838 	bl	800b52c <write_byte>

  HAL_Delay(50);
 800b4bc:	2032      	movs	r0, #50	; 0x32
 800b4be:	f7f5 fdad 	bl	800101c <HAL_Delay>
}
 800b4c2:	bf00      	nop
 800b4c4:	3708      	adds	r7, #8
 800b4c6:	46bd      	mov	sp, r7
 800b4c8:	bd80      	pop	{r7, pc}
 800b4ca:	bf00      	nop
 800b4cc:	08012a08 	.word	0x08012a08
 800b4d0:	08012a10 	.word	0x08012a10

0800b4d4 <read_byte>:


uint8_t read_byte(uint8_t reg){
 800b4d4:	b580      	push	{r7, lr}
 800b4d6:	b084      	sub	sp, #16
 800b4d8:	af00      	add	r7, sp, #0
 800b4da:	4603      	mov	r3, r0
 800b4dc:	71fb      	strb	r3, [r7, #7]
  uint8_t ret,val;
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET ); 	//cs = Low;
 800b4de:	2200      	movs	r2, #0
 800b4e0:	2104      	movs	r1, #4
 800b4e2:	4810      	ldr	r0, [pc, #64]	; (800b524 <read_byte+0x50>)
 800b4e4:	f7f6 ff0e 	bl	8002304 <HAL_GPIO_WritePin>
  ret = reg | 0x80;  // MSB = 1
 800b4e8:	79fb      	ldrb	r3, [r7, #7]
 800b4ea:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b4ee:	b2db      	uxtb	r3, r3
 800b4f0:	73fb      	strb	r3, [r7, #15]
  HAL_SPI_Transmit(&hspi3, &ret,1,100); 					// sent 1byte(address)
 800b4f2:	f107 010f 	add.w	r1, r7, #15
 800b4f6:	2364      	movs	r3, #100	; 0x64
 800b4f8:	2201      	movs	r2, #1
 800b4fa:	480b      	ldr	r0, [pc, #44]	; (800b528 <read_byte+0x54>)
 800b4fc:	f7f7 fb8a 	bl	8002c14 <HAL_SPI_Transmit>
  HAL_SPI_Receive(&hspi3,&val,1,100); 						// read 1byte(read data)
 800b500:	f107 010e 	add.w	r1, r7, #14
 800b504:	2364      	movs	r3, #100	; 0x64
 800b506:	2201      	movs	r2, #1
 800b508:	4807      	ldr	r0, [pc, #28]	; (800b528 <read_byte+0x54>)
 800b50a:	f7f7 fcb7 	bl	8002e7c <HAL_SPI_Receive>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_SET );  	//cs = High;
 800b50e:	2201      	movs	r2, #1
 800b510:	2104      	movs	r1, #4
 800b512:	4804      	ldr	r0, [pc, #16]	; (800b524 <read_byte+0x50>)
 800b514:	f7f6 fef6 	bl	8002304 <HAL_GPIO_WritePin>
  return val;
 800b518:	7bbb      	ldrb	r3, [r7, #14]
}
 800b51a:	4618      	mov	r0, r3
 800b51c:	3710      	adds	r7, #16
 800b51e:	46bd      	mov	sp, r7
 800b520:	bd80      	pop	{r7, pc}
 800b522:	bf00      	nop
 800b524:	40020c00 	.word	0x40020c00
 800b528:	20000144 	.word	0x20000144

0800b52c <write_byte>:


void write_byte(uint8_t reg, uint8_t val){
 800b52c:	b580      	push	{r7, lr}
 800b52e:	b084      	sub	sp, #16
 800b530:	af00      	add	r7, sp, #0
 800b532:	4603      	mov	r3, r0
 800b534:	460a      	mov	r2, r1
 800b536:	71fb      	strb	r3, [r7, #7]
 800b538:	4613      	mov	r3, r2
 800b53a:	71bb      	strb	r3, [r7, #6]
  uint8_t ret;
  ret = reg & 0x7F ; // MSB = 0
 800b53c:	79fb      	ldrb	r3, [r7, #7]
 800b53e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b542:	b2db      	uxtb	r3, r3
 800b544:	73fb      	strb	r3, [r7, #15]
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET); 	// cs = Low;
 800b546:	2200      	movs	r2, #0
 800b548:	2104      	movs	r1, #4
 800b54a:	480c      	ldr	r0, [pc, #48]	; (800b57c <write_byte+0x50>)
 800b54c:	f7f6 feda 	bl	8002304 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi3, &ret,1,100); 					// sent 1byte(address)
 800b550:	f107 010f 	add.w	r1, r7, #15
 800b554:	2364      	movs	r3, #100	; 0x64
 800b556:	2201      	movs	r2, #1
 800b558:	4809      	ldr	r0, [pc, #36]	; (800b580 <write_byte+0x54>)
 800b55a:	f7f7 fb5b 	bl	8002c14 <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi3, &val,1,100); 					// read 1byte(write data)
 800b55e:	1db9      	adds	r1, r7, #6
 800b560:	2364      	movs	r3, #100	; 0x64
 800b562:	2201      	movs	r2, #1
 800b564:	4806      	ldr	r0, [pc, #24]	; (800b580 <write_byte+0x54>)
 800b566:	f7f7 fb55 	bl	8002c14 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_SET); 		// cs = High;
 800b56a:	2201      	movs	r2, #1
 800b56c:	2104      	movs	r1, #4
 800b56e:	4803      	ldr	r0, [pc, #12]	; (800b57c <write_byte+0x50>)
 800b570:	f7f6 fec8 	bl	8002304 <HAL_GPIO_WritePin>
}
 800b574:	bf00      	nop
 800b576:	3710      	adds	r7, #16
 800b578:	46bd      	mov	sp, r7
 800b57a:	bd80      	pop	{r7, pc}
 800b57c:	40020c00 	.word	0x40020c00
 800b580:	20000144 	.word	0x20000144

0800b584 <accel_read_x>:


float accel_read_x(void){
 800b584:	b590      	push	{r4, r7, lr}
 800b586:	b083      	sub	sp, #12
 800b588:	af00      	add	r7, sp, #0
  int16_t accel_x;
  float accel;

  // H:8bit shift, Link h and l
  accel_x = (int16_t)((int16_t)(read_byte(ACCEL_XOUT_H) << 8) | read_byte(ACCEL_XOUT_L));
 800b58a:	203b      	movs	r0, #59	; 0x3b
 800b58c:	f7ff ffa2 	bl	800b4d4 <read_byte>
 800b590:	4603      	mov	r3, r0
 800b592:	021b      	lsls	r3, r3, #8
 800b594:	b21c      	sxth	r4, r3
 800b596:	203c      	movs	r0, #60	; 0x3c
 800b598:	f7ff ff9c 	bl	800b4d4 <read_byte>
 800b59c:	4603      	mov	r3, r0
 800b59e:	b21b      	sxth	r3, r3
 800b5a0:	4323      	orrs	r3, r4
 800b5a2:	80fb      	strh	r3, [r7, #6]

  accel = (float)(accel_x / ACCEL_FACTOR); // dps to accel
 800b5a4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800b5a8:	2b00      	cmp	r3, #0
 800b5aa:	da01      	bge.n	800b5b0 <accel_read_x+0x2c>
 800b5ac:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 800b5b0:	12db      	asrs	r3, r3, #11
 800b5b2:	b21b      	sxth	r3, r3
 800b5b4:	ee07 3a90 	vmov	s15, r3
 800b5b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b5bc:	edc7 7a00 	vstr	s15, [r7]
  return accel;
 800b5c0:	683b      	ldr	r3, [r7, #0]
 800b5c2:	ee07 3a90 	vmov	s15, r3
}
 800b5c6:	eeb0 0a67 	vmov.f32	s0, s15
 800b5ca:	370c      	adds	r7, #12
 800b5cc:	46bd      	mov	sp, r7
 800b5ce:	bd90      	pop	{r4, r7, pc}

0800b5d0 <accel_read_y>:


float accel_read_y(void){
 800b5d0:	b590      	push	{r4, r7, lr}
 800b5d2:	b083      	sub	sp, #12
 800b5d4:	af00      	add	r7, sp, #0
  int16_t accel_y;
  float accel;

  // H:8bit shift, Link h and l
  accel_y = (int16_t)((int16_t)(read_byte(ACCEL_YOUT_H) << 8) | read_byte(ACCEL_YOUT_L));
 800b5d6:	203d      	movs	r0, #61	; 0x3d
 800b5d8:	f7ff ff7c 	bl	800b4d4 <read_byte>
 800b5dc:	4603      	mov	r3, r0
 800b5de:	021b      	lsls	r3, r3, #8
 800b5e0:	b21c      	sxth	r4, r3
 800b5e2:	203e      	movs	r0, #62	; 0x3e
 800b5e4:	f7ff ff76 	bl	800b4d4 <read_byte>
 800b5e8:	4603      	mov	r3, r0
 800b5ea:	b21b      	sxth	r3, r3
 800b5ec:	4323      	orrs	r3, r4
 800b5ee:	80fb      	strh	r3, [r7, #6]

  accel = (float)(accel_y / ACCEL_FACTOR); // dps to accel
 800b5f0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800b5f4:	2b00      	cmp	r3, #0
 800b5f6:	da01      	bge.n	800b5fc <accel_read_y+0x2c>
 800b5f8:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 800b5fc:	12db      	asrs	r3, r3, #11
 800b5fe:	b21b      	sxth	r3, r3
 800b600:	ee07 3a90 	vmov	s15, r3
 800b604:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b608:	edc7 7a00 	vstr	s15, [r7]
  return accel;
 800b60c:	683b      	ldr	r3, [r7, #0]
 800b60e:	ee07 3a90 	vmov	s15, r3
}
 800b612:	eeb0 0a67 	vmov.f32	s0, s15
 800b616:	370c      	adds	r7, #12
 800b618:	46bd      	mov	sp, r7
 800b61a:	bd90      	pop	{r4, r7, pc}

0800b61c <accel_read_z>:


float accel_read_z(void){
 800b61c:	b590      	push	{r4, r7, lr}
 800b61e:	b083      	sub	sp, #12
 800b620:	af00      	add	r7, sp, #0
  int16_t accel_z;
  float accel;

  // H:8bit shift, Link h and l
  accel_z = (int16_t)((int16_t)(read_byte(ACCEL_ZOUT_H) << 8) | read_byte(ACCEL_ZOUT_L));
 800b622:	203f      	movs	r0, #63	; 0x3f
 800b624:	f7ff ff56 	bl	800b4d4 <read_byte>
 800b628:	4603      	mov	r3, r0
 800b62a:	021b      	lsls	r3, r3, #8
 800b62c:	b21c      	sxth	r4, r3
 800b62e:	2040      	movs	r0, #64	; 0x40
 800b630:	f7ff ff50 	bl	800b4d4 <read_byte>
 800b634:	4603      	mov	r3, r0
 800b636:	b21b      	sxth	r3, r3
 800b638:	4323      	orrs	r3, r4
 800b63a:	80fb      	strh	r3, [r7, #6]

  accel = (float)(accel_z / ACCEL_FACTOR-7); // dps to accel
 800b63c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800b640:	2b00      	cmp	r3, #0
 800b642:	da01      	bge.n	800b648 <accel_read_z+0x2c>
 800b644:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 800b648:	12db      	asrs	r3, r3, #11
 800b64a:	b21b      	sxth	r3, r3
 800b64c:	3b07      	subs	r3, #7
 800b64e:	ee07 3a90 	vmov	s15, r3
 800b652:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b656:	edc7 7a00 	vstr	s15, [r7]
  return accel;
 800b65a:	683b      	ldr	r3, [r7, #0]
 800b65c:	ee07 3a90 	vmov	s15, r3
}
 800b660:	eeb0 0a67 	vmov.f32	s0, s15
 800b664:	370c      	adds	r7, #12
 800b666:	46bd      	mov	sp, r7
 800b668:	bd90      	pop	{r4, r7, pc}
 800b66a:	0000      	movs	r0, r0
 800b66c:	0000      	movs	r0, r0
	...

0800b670 <gyro_read_x>:


float gyro_read_x(void){
 800b670:	b590      	push	{r4, r7, lr}
 800b672:	b083      	sub	sp, #12
 800b674:	af00      	add	r7, sp, #0
  int16_t gyro_x;
  float omega;

  // H:8bit shift, Link h and l
  gyro_x = (int16_t)((int16_t)(read_byte(GYRO_XOUT_H) << 8) | read_byte(GYRO_XOUT_L));
 800b676:	2043      	movs	r0, #67	; 0x43
 800b678:	f7ff ff2c 	bl	800b4d4 <read_byte>
 800b67c:	4603      	mov	r3, r0
 800b67e:	021b      	lsls	r3, r3, #8
 800b680:	b21c      	sxth	r4, r3
 800b682:	2044      	movs	r0, #68	; 0x44
 800b684:	f7ff ff26 	bl	800b4d4 <read_byte>
 800b688:	4603      	mov	r3, r0
 800b68a:	b21b      	sxth	r3, r3
 800b68c:	4323      	orrs	r3, r4
 800b68e:	80fb      	strh	r3, [r7, #6]

  omega = (float)(gyro_x / GYRO_FACTOR+1.4); // dps to deg/sec
 800b690:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800b694:	4618      	mov	r0, r3
 800b696:	f7f4 ff3d 	bl	8000514 <__aeabi_i2d>
 800b69a:	a30f      	add	r3, pc, #60	; (adr r3, 800b6d8 <gyro_read_x+0x68>)
 800b69c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6a0:	f7f5 f8cc 	bl	800083c <__aeabi_ddiv>
 800b6a4:	4603      	mov	r3, r0
 800b6a6:	460c      	mov	r4, r1
 800b6a8:	4618      	mov	r0, r3
 800b6aa:	4621      	mov	r1, r4
 800b6ac:	a30c      	add	r3, pc, #48	; (adr r3, 800b6e0 <gyro_read_x+0x70>)
 800b6ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6b2:	f7f4 fde3 	bl	800027c <__adddf3>
 800b6b6:	4603      	mov	r3, r0
 800b6b8:	460c      	mov	r4, r1
 800b6ba:	4618      	mov	r0, r3
 800b6bc:	4621      	mov	r1, r4
 800b6be:	f7f5 fa6b 	bl	8000b98 <__aeabi_d2f>
 800b6c2:	4603      	mov	r3, r0
 800b6c4:	603b      	str	r3, [r7, #0]
  return omega;
 800b6c6:	683b      	ldr	r3, [r7, #0]
 800b6c8:	ee07 3a90 	vmov	s15, r3
}
 800b6cc:	eeb0 0a67 	vmov.f32	s0, s15
 800b6d0:	370c      	adds	r7, #12
 800b6d2:	46bd      	mov	sp, r7
 800b6d4:	bd90      	pop	{r4, r7, pc}
 800b6d6:	bf00      	nop
 800b6d8:	66666666 	.word	0x66666666
 800b6dc:	40306666 	.word	0x40306666
 800b6e0:	66666666 	.word	0x66666666
 800b6e4:	3ff66666 	.word	0x3ff66666

0800b6e8 <gyro_read_y>:


float gyro_read_y(void){
 800b6e8:	b590      	push	{r4, r7, lr}
 800b6ea:	b083      	sub	sp, #12
 800b6ec:	af00      	add	r7, sp, #0
  int16_t gyro_y;
  float omega;

  // H:8bit shift, Link h and l
  gyro_y = (int16_t)((int16_t)(read_byte(GYRO_YOUT_H) << 8) | read_byte(GYRO_YOUT_L));
 800b6ee:	2045      	movs	r0, #69	; 0x45
 800b6f0:	f7ff fef0 	bl	800b4d4 <read_byte>
 800b6f4:	4603      	mov	r3, r0
 800b6f6:	021b      	lsls	r3, r3, #8
 800b6f8:	b21c      	sxth	r4, r3
 800b6fa:	2046      	movs	r0, #70	; 0x46
 800b6fc:	f7ff feea 	bl	800b4d4 <read_byte>
 800b700:	4603      	mov	r3, r0
 800b702:	b21b      	sxth	r3, r3
 800b704:	4323      	orrs	r3, r4
 800b706:	80fb      	strh	r3, [r7, #6]

  omega = (float)(gyro_y / GYRO_FACTOR-0.75); // dps to deg/sec
 800b708:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800b70c:	4618      	mov	r0, r3
 800b70e:	f7f4 ff01 	bl	8000514 <__aeabi_i2d>
 800b712:	a310      	add	r3, pc, #64	; (adr r3, 800b754 <gyro_read_y+0x6c>)
 800b714:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b718:	f7f5 f890 	bl	800083c <__aeabi_ddiv>
 800b71c:	4603      	mov	r3, r0
 800b71e:	460c      	mov	r4, r1
 800b720:	4618      	mov	r0, r3
 800b722:	4621      	mov	r1, r4
 800b724:	f04f 0200 	mov.w	r2, #0
 800b728:	4b09      	ldr	r3, [pc, #36]	; (800b750 <gyro_read_y+0x68>)
 800b72a:	f7f4 fda5 	bl	8000278 <__aeabi_dsub>
 800b72e:	4603      	mov	r3, r0
 800b730:	460c      	mov	r4, r1
 800b732:	4618      	mov	r0, r3
 800b734:	4621      	mov	r1, r4
 800b736:	f7f5 fa2f 	bl	8000b98 <__aeabi_d2f>
 800b73a:	4603      	mov	r3, r0
 800b73c:	603b      	str	r3, [r7, #0]
  return omega;
 800b73e:	683b      	ldr	r3, [r7, #0]
 800b740:	ee07 3a90 	vmov	s15, r3
}
 800b744:	eeb0 0a67 	vmov.f32	s0, s15
 800b748:	370c      	adds	r7, #12
 800b74a:	46bd      	mov	sp, r7
 800b74c:	bd90      	pop	{r4, r7, pc}
 800b74e:	bf00      	nop
 800b750:	3fe80000 	.word	0x3fe80000
 800b754:	66666666 	.word	0x66666666
 800b758:	40306666 	.word	0x40306666
 800b75c:	00000000 	.word	0x00000000

0800b760 <gyro_read_z>:


float gyro_read_z(void){
 800b760:	b5b0      	push	{r4, r5, r7, lr}
 800b762:	b082      	sub	sp, #8
 800b764:	af00      	add	r7, sp, #0
  int16_t gyro_z;
  float omega;

  // H:8bit shift, Link h and l
  gyro_z = (int16_t)((int16_t)(read_byte(GYRO_ZOUT_H) << 8) | read_byte(GYRO_ZOUT_L));
 800b766:	2047      	movs	r0, #71	; 0x47
 800b768:	f7ff feb4 	bl	800b4d4 <read_byte>
 800b76c:	4603      	mov	r3, r0
 800b76e:	021b      	lsls	r3, r3, #8
 800b770:	b21c      	sxth	r4, r3
 800b772:	2048      	movs	r0, #72	; 0x48
 800b774:	f7ff feae 	bl	800b4d4 <read_byte>
 800b778:	4603      	mov	r3, r0
 800b77a:	b21b      	sxth	r3, r3
 800b77c:	4323      	orrs	r3, r4
 800b77e:	80fb      	strh	r3, [r7, #6]

//  omega = (float)(gyro_z / GYRO_FACTOR+1.15); // dps to deg/sec
  omega = (float)(gyro_z / GYRO_FACTOR-gyro_drift_value); // dps to deg/sec
 800b780:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800b784:	4618      	mov	r0, r3
 800b786:	f7f4 fec5 	bl	8000514 <__aeabi_i2d>
 800b78a:	a314      	add	r3, pc, #80	; (adr r3, 800b7dc <gyro_read_z+0x7c>)
 800b78c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b790:	f7f5 f854 	bl	800083c <__aeabi_ddiv>
 800b794:	4603      	mov	r3, r0
 800b796:	460c      	mov	r4, r1
 800b798:	4625      	mov	r5, r4
 800b79a:	461c      	mov	r4, r3
 800b79c:	4b0e      	ldr	r3, [pc, #56]	; (800b7d8 <gyro_read_z+0x78>)
 800b79e:	681b      	ldr	r3, [r3, #0]
 800b7a0:	4618      	mov	r0, r3
 800b7a2:	f7f4 fec9 	bl	8000538 <__aeabi_f2d>
 800b7a6:	4602      	mov	r2, r0
 800b7a8:	460b      	mov	r3, r1
 800b7aa:	4620      	mov	r0, r4
 800b7ac:	4629      	mov	r1, r5
 800b7ae:	f7f4 fd63 	bl	8000278 <__aeabi_dsub>
 800b7b2:	4603      	mov	r3, r0
 800b7b4:	460c      	mov	r4, r1
 800b7b6:	4618      	mov	r0, r3
 800b7b8:	4621      	mov	r1, r4
 800b7ba:	f7f5 f9ed 	bl	8000b98 <__aeabi_d2f>
 800b7be:	4603      	mov	r3, r0
 800b7c0:	603b      	str	r3, [r7, #0]
  return omega;
 800b7c2:	683b      	ldr	r3, [r7, #0]
 800b7c4:	ee07 3a90 	vmov	s15, r3
}
 800b7c8:	eeb0 0a67 	vmov.f32	s0, s15
 800b7cc:	3708      	adds	r7, #8
 800b7ce:	46bd      	mov	sp, r7
 800b7d0:	bdb0      	pop	{r4, r5, r7, pc}
 800b7d2:	bf00      	nop
 800b7d4:	f3af 8000 	nop.w
 800b7d8:	20000bf4 	.word	0x20000bf4
 800b7dc:	66666666 	.word	0x66666666
 800b7e0:	40306666 	.word	0x40306666

0800b7e4 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int __io_putchar(int c) {
 800b7e4:	b580      	push	{r7, lr}
 800b7e6:	b084      	sub	sp, #16
 800b7e8:	af00      	add	r7, sp, #0
 800b7ea:	6078      	str	r0, [r7, #4]
  if( c == '\n' ) {
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	2b0a      	cmp	r3, #10
 800b7f0:	d108      	bne.n	800b804 <__io_putchar+0x20>
    int _c = '\r';
 800b7f2:	230d      	movs	r3, #13
 800b7f4:	60fb      	str	r3, [r7, #12]
    HAL_UART_Transmit(&huart1, &_c, 1, 1);
 800b7f6:	f107 010c 	add.w	r1, r7, #12
 800b7fa:	2301      	movs	r3, #1
 800b7fc:	2201      	movs	r2, #1
 800b7fe:	4807      	ldr	r0, [pc, #28]	; (800b81c <__io_putchar+0x38>)
 800b800:	f7f8 ff3f 	bl	8004682 <HAL_UART_Transmit>
  }
  HAL_UART_Transmit(&huart1, &c, 1, 1);
 800b804:	1d39      	adds	r1, r7, #4
 800b806:	2301      	movs	r3, #1
 800b808:	2201      	movs	r2, #1
 800b80a:	4804      	ldr	r0, [pc, #16]	; (800b81c <__io_putchar+0x38>)
 800b80c:	f7f8 ff39 	bl	8004682 <HAL_UART_Transmit>
  return 0;
 800b810:	2300      	movs	r3, #0
}
 800b812:	4618      	mov	r0, r3
 800b814:	3710      	adds	r7, #16
 800b816:	46bd      	mov	sp, r7
 800b818:	bd80      	pop	{r7, pc}
 800b81a:	bf00      	nop
 800b81c:	20000b64 	.word	0x20000b64

0800b820 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b820:	b5b0      	push	{r4, r5, r7, lr}
 800b822:	ed2d 8b02 	vpush	{d8}
 800b826:	b08c      	sub	sp, #48	; 0x30
 800b828:	af00      	add	r7, sp, #0
 800b82a:	6078      	str	r0, [r7, #4]
	TIM_OC_InitTypeDef ConfigOC;
	ConfigOC.OCMode = TIM_OCMODE_PWM1;
 800b82c:	2360      	movs	r3, #96	; 0x60
 800b82e:	60bb      	str	r3, [r7, #8]
	ConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800b830:	2300      	movs	r3, #0
 800b832:	613b      	str	r3, [r7, #16]
	ConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800b834:	2300      	movs	r3, #0
 800b836:	61bb      	str	r3, [r7, #24]

	if(htim == &htim6){
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	4ab5      	ldr	r2, [pc, #724]	; (800bb10 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 800b83c:	4293      	cmp	r3, r2
 800b83e:	f041 82c4 	bne.w	800cdca <HAL_TIM_PeriodElapsedCallback+0x15aa>
		cnt_l = TIM4 -> CNT;
 800b842:	4bb4      	ldr	r3, [pc, #720]	; (800bb14 <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 800b844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b846:	ee07 3a90 	vmov	s15, r3
 800b84a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b84e:	4bb2      	ldr	r3, [pc, #712]	; (800bb18 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 800b850:	edc3 7a00 	vstr	s15, [r3]
		cnt_r = TIM8 -> CNT;
 800b854:	4bb1      	ldr	r3, [pc, #708]	; (800bb1c <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 800b856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b858:	ee07 3a90 	vmov	s15, r3
 800b85c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b860:	4baf      	ldr	r3, [pc, #700]	; (800bb20 <HAL_TIM_PeriodElapsedCallback+0x300>)
 800b862:	edc3 7a00 	vstr	s15, [r3]
		if(cnt_l > 40000) cnt_l = cnt_l - 65535;		//0=>65505の値飛び検出用
 800b866:	4bac      	ldr	r3, [pc, #688]	; (800bb18 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 800b868:	edd3 7a00 	vldr	s15, [r3]
 800b86c:	ed9f 7aad 	vldr	s14, [pc, #692]	; 800bb24 <HAL_TIM_PeriodElapsedCallback+0x304>
 800b870:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b874:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b878:	dd09      	ble.n	800b88e <HAL_TIM_PeriodElapsedCallback+0x6e>
 800b87a:	4ba7      	ldr	r3, [pc, #668]	; (800bb18 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 800b87c:	edd3 7a00 	vldr	s15, [r3]
 800b880:	ed9f 7aa9 	vldr	s14, [pc, #676]	; 800bb28 <HAL_TIM_PeriodElapsedCallback+0x308>
 800b884:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b888:	4ba3      	ldr	r3, [pc, #652]	; (800bb18 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 800b88a:	edc3 7a00 	vstr	s15, [r3]
		if(cnt_r > 40000) cnt_r = cnt_r - 65535;		//0=>65505の値飛び検出用
 800b88e:	4ba4      	ldr	r3, [pc, #656]	; (800bb20 <HAL_TIM_PeriodElapsedCallback+0x300>)
 800b890:	edd3 7a00 	vldr	s15, [r3]
 800b894:	ed9f 7aa3 	vldr	s14, [pc, #652]	; 800bb24 <HAL_TIM_PeriodElapsedCallback+0x304>
 800b898:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b89c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b8a0:	dd09      	ble.n	800b8b6 <HAL_TIM_PeriodElapsedCallback+0x96>
 800b8a2:	4b9f      	ldr	r3, [pc, #636]	; (800bb20 <HAL_TIM_PeriodElapsedCallback+0x300>)
 800b8a4:	edd3 7a00 	vldr	s15, [r3]
 800b8a8:	ed9f 7a9f 	vldr	s14, [pc, #636]	; 800bb28 <HAL_TIM_PeriodElapsedCallback+0x308>
 800b8ac:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b8b0:	4b9b      	ldr	r3, [pc, #620]	; (800bb20 <HAL_TIM_PeriodElapsedCallback+0x300>)
 800b8b2:	edc3 7a00 	vstr	s15, [r3]
		cnt_r = cnt_r * -1;								//a回転方向合わせ
 800b8b6:	4b9a      	ldr	r3, [pc, #616]	; (800bb20 <HAL_TIM_PeriodElapsedCallback+0x300>)
 800b8b8:	edd3 7a00 	vldr	s15, [r3]
 800b8bc:	eef1 7a67 	vneg.f32	s15, s15
 800b8c0:	4b97      	ldr	r3, [pc, #604]	; (800bb20 <HAL_TIM_PeriodElapsedCallback+0x300>)
 800b8c2:	edc3 7a00 	vstr	s15, [r3]

		dist_l = dist_l + cnt_l * (DIAMETER * M_PI * 11 / 40 / 4096 / 4);
 800b8c6:	4b99      	ldr	r3, [pc, #612]	; (800bb2c <HAL_TIM_PeriodElapsedCallback+0x30c>)
 800b8c8:	681b      	ldr	r3, [r3, #0]
 800b8ca:	4618      	mov	r0, r3
 800b8cc:	f7f4 fe34 	bl	8000538 <__aeabi_f2d>
 800b8d0:	4604      	mov	r4, r0
 800b8d2:	460d      	mov	r5, r1
 800b8d4:	4b90      	ldr	r3, [pc, #576]	; (800bb18 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 800b8d6:	681b      	ldr	r3, [r3, #0]
 800b8d8:	4618      	mov	r0, r3
 800b8da:	f7f4 fe2d 	bl	8000538 <__aeabi_f2d>
 800b8de:	a388      	add	r3, pc, #544	; (adr r3, 800bb00 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 800b8e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8e4:	f7f4 fe80 	bl	80005e8 <__aeabi_dmul>
 800b8e8:	4602      	mov	r2, r0
 800b8ea:	460b      	mov	r3, r1
 800b8ec:	4620      	mov	r0, r4
 800b8ee:	4629      	mov	r1, r5
 800b8f0:	f7f4 fcc4 	bl	800027c <__adddf3>
 800b8f4:	4603      	mov	r3, r0
 800b8f6:	460c      	mov	r4, r1
 800b8f8:	4618      	mov	r0, r3
 800b8fa:	4621      	mov	r1, r4
 800b8fc:	f7f5 f94c 	bl	8000b98 <__aeabi_d2f>
 800b900:	4602      	mov	r2, r0
 800b902:	4b8a      	ldr	r3, [pc, #552]	; (800bb2c <HAL_TIM_PeriodElapsedCallback+0x30c>)
 800b904:	601a      	str	r2, [r3, #0]
		dist_r = dist_r + cnt_r * (DIAMETER * M_PI * 11 / 40 / 4096 / 4);
 800b906:	4b8a      	ldr	r3, [pc, #552]	; (800bb30 <HAL_TIM_PeriodElapsedCallback+0x310>)
 800b908:	681b      	ldr	r3, [r3, #0]
 800b90a:	4618      	mov	r0, r3
 800b90c:	f7f4 fe14 	bl	8000538 <__aeabi_f2d>
 800b910:	4604      	mov	r4, r0
 800b912:	460d      	mov	r5, r1
 800b914:	4b82      	ldr	r3, [pc, #520]	; (800bb20 <HAL_TIM_PeriodElapsedCallback+0x300>)
 800b916:	681b      	ldr	r3, [r3, #0]
 800b918:	4618      	mov	r0, r3
 800b91a:	f7f4 fe0d 	bl	8000538 <__aeabi_f2d>
 800b91e:	a378      	add	r3, pc, #480	; (adr r3, 800bb00 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 800b920:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b924:	f7f4 fe60 	bl	80005e8 <__aeabi_dmul>
 800b928:	4602      	mov	r2, r0
 800b92a:	460b      	mov	r3, r1
 800b92c:	4620      	mov	r0, r4
 800b92e:	4629      	mov	r1, r5
 800b930:	f7f4 fca4 	bl	800027c <__adddf3>
 800b934:	4603      	mov	r3, r0
 800b936:	460c      	mov	r4, r1
 800b938:	4618      	mov	r0, r3
 800b93a:	4621      	mov	r1, r4
 800b93c:	f7f5 f92c 	bl	8000b98 <__aeabi_d2f>
 800b940:	4602      	mov	r2, r0
 800b942:	4b7b      	ldr	r3, [pc, #492]	; (800bb30 <HAL_TIM_PeriodElapsedCallback+0x310>)
 800b944:	601a      	str	r2, [r3, #0]

		speed_l = cnt_l * (DIAMETER * M_PI * 11 / 40 / 4096 / 4) / 0.001;
 800b946:	4b74      	ldr	r3, [pc, #464]	; (800bb18 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 800b948:	681b      	ldr	r3, [r3, #0]
 800b94a:	4618      	mov	r0, r3
 800b94c:	f7f4 fdf4 	bl	8000538 <__aeabi_f2d>
 800b950:	a36b      	add	r3, pc, #428	; (adr r3, 800bb00 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 800b952:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b956:	f7f4 fe47 	bl	80005e8 <__aeabi_dmul>
 800b95a:	4603      	mov	r3, r0
 800b95c:	460c      	mov	r4, r1
 800b95e:	4618      	mov	r0, r3
 800b960:	4621      	mov	r1, r4
 800b962:	a369      	add	r3, pc, #420	; (adr r3, 800bb08 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 800b964:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b968:	f7f4 ff68 	bl	800083c <__aeabi_ddiv>
 800b96c:	4603      	mov	r3, r0
 800b96e:	460c      	mov	r4, r1
 800b970:	4618      	mov	r0, r3
 800b972:	4621      	mov	r1, r4
 800b974:	f7f5 f910 	bl	8000b98 <__aeabi_d2f>
 800b978:	4602      	mov	r2, r0
 800b97a:	4b6e      	ldr	r3, [pc, #440]	; (800bb34 <HAL_TIM_PeriodElapsedCallback+0x314>)
 800b97c:	601a      	str	r2, [r3, #0]
		speed_r = cnt_r * (DIAMETER * M_PI * 11 / 40 / 4096 / 4) / 0.001;
 800b97e:	4b68      	ldr	r3, [pc, #416]	; (800bb20 <HAL_TIM_PeriodElapsedCallback+0x300>)
 800b980:	681b      	ldr	r3, [r3, #0]
 800b982:	4618      	mov	r0, r3
 800b984:	f7f4 fdd8 	bl	8000538 <__aeabi_f2d>
 800b988:	a35d      	add	r3, pc, #372	; (adr r3, 800bb00 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 800b98a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b98e:	f7f4 fe2b 	bl	80005e8 <__aeabi_dmul>
 800b992:	4603      	mov	r3, r0
 800b994:	460c      	mov	r4, r1
 800b996:	4618      	mov	r0, r3
 800b998:	4621      	mov	r1, r4
 800b99a:	a35b      	add	r3, pc, #364	; (adr r3, 800bb08 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 800b99c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9a0:	f7f4 ff4c 	bl	800083c <__aeabi_ddiv>
 800b9a4:	4603      	mov	r3, r0
 800b9a6:	460c      	mov	r4, r1
 800b9a8:	4618      	mov	r0, r3
 800b9aa:	4621      	mov	r1, r4
 800b9ac:	f7f5 f8f4 	bl	8000b98 <__aeabi_d2f>
 800b9b0:	4602      	mov	r2, r0
 800b9b2:	4b61      	ldr	r3, [pc, #388]	; (800bb38 <HAL_TIM_PeriodElapsedCallback+0x318>)
 800b9b4:	601a      	str	r2, [r3, #0]

		TIM4 -> CNT = 0;
 800b9b6:	4b57      	ldr	r3, [pc, #348]	; (800bb14 <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 800b9b8:	2200      	movs	r2, #0
 800b9ba:	625a      	str	r2, [r3, #36]	; 0x24
		TIM8 -> CNT = 0;
 800b9bc:	4b57      	ldr	r3, [pc, #348]	; (800bb1c <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 800b9be:	2200      	movs	r2, #0
 800b9c0:	625a      	str	r2, [r3, #36]	; 0x24

		if(MF.FLAG.SPD){
 800b9c2:	4b5e      	ldr	r3, [pc, #376]	; (800bb3c <HAL_TIM_PeriodElapsedCallback+0x31c>)
 800b9c4:	881b      	ldrh	r3, [r3, #0]
 800b9c6:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800b9ca:	b2db      	uxtb	r3, r3
 800b9cc:	2b00      	cmp	r3, #0
 800b9ce:	f000 80fe 	beq.w	800bbce <HAL_TIM_PeriodElapsedCallback+0x3ae>
			target_speed_l += accel_l * 0.001;
 800b9d2:	4b5b      	ldr	r3, [pc, #364]	; (800bb40 <HAL_TIM_PeriodElapsedCallback+0x320>)
 800b9d4:	681b      	ldr	r3, [r3, #0]
 800b9d6:	4618      	mov	r0, r3
 800b9d8:	f7f4 fdae 	bl	8000538 <__aeabi_f2d>
 800b9dc:	a34a      	add	r3, pc, #296	; (adr r3, 800bb08 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 800b9de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9e2:	f7f4 fe01 	bl	80005e8 <__aeabi_dmul>
 800b9e6:	4603      	mov	r3, r0
 800b9e8:	460c      	mov	r4, r1
 800b9ea:	4625      	mov	r5, r4
 800b9ec:	461c      	mov	r4, r3
 800b9ee:	4b55      	ldr	r3, [pc, #340]	; (800bb44 <HAL_TIM_PeriodElapsedCallback+0x324>)
 800b9f0:	681b      	ldr	r3, [r3, #0]
 800b9f2:	4618      	mov	r0, r3
 800b9f4:	f7f4 fda0 	bl	8000538 <__aeabi_f2d>
 800b9f8:	4602      	mov	r2, r0
 800b9fa:	460b      	mov	r3, r1
 800b9fc:	4620      	mov	r0, r4
 800b9fe:	4629      	mov	r1, r5
 800ba00:	f7f4 fc3c 	bl	800027c <__adddf3>
 800ba04:	4603      	mov	r3, r0
 800ba06:	460c      	mov	r4, r1
 800ba08:	4618      	mov	r0, r3
 800ba0a:	4621      	mov	r1, r4
 800ba0c:	f7f5 f8c4 	bl	8000b98 <__aeabi_d2f>
 800ba10:	4602      	mov	r2, r0
 800ba12:	4b4c      	ldr	r3, [pc, #304]	; (800bb44 <HAL_TIM_PeriodElapsedCallback+0x324>)
 800ba14:	601a      	str	r2, [r3, #0]
			target_speed_l = max(min(target_speed_l, speed_max_l), speed_min_l);
 800ba16:	4b4b      	ldr	r3, [pc, #300]	; (800bb44 <HAL_TIM_PeriodElapsedCallback+0x324>)
 800ba18:	ed93 7a00 	vldr	s14, [r3]
 800ba1c:	4b4a      	ldr	r3, [pc, #296]	; (800bb48 <HAL_TIM_PeriodElapsedCallback+0x328>)
 800ba1e:	edd3 7a00 	vldr	s15, [r3]
 800ba22:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800ba26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ba2a:	dd03      	ble.n	800ba34 <HAL_TIM_PeriodElapsedCallback+0x214>
 800ba2c:	4b46      	ldr	r3, [pc, #280]	; (800bb48 <HAL_TIM_PeriodElapsedCallback+0x328>)
 800ba2e:	edd3 7a00 	vldr	s15, [r3]
 800ba32:	e002      	b.n	800ba3a <HAL_TIM_PeriodElapsedCallback+0x21a>
 800ba34:	4b43      	ldr	r3, [pc, #268]	; (800bb44 <HAL_TIM_PeriodElapsedCallback+0x324>)
 800ba36:	edd3 7a00 	vldr	s15, [r3]
 800ba3a:	4b44      	ldr	r3, [pc, #272]	; (800bb4c <HAL_TIM_PeriodElapsedCallback+0x32c>)
 800ba3c:	ed93 7a00 	vldr	s14, [r3]
 800ba40:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ba44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ba48:	dd10      	ble.n	800ba6c <HAL_TIM_PeriodElapsedCallback+0x24c>
 800ba4a:	4b3e      	ldr	r3, [pc, #248]	; (800bb44 <HAL_TIM_PeriodElapsedCallback+0x324>)
 800ba4c:	ed93 7a00 	vldr	s14, [r3]
 800ba50:	4b3d      	ldr	r3, [pc, #244]	; (800bb48 <HAL_TIM_PeriodElapsedCallback+0x328>)
 800ba52:	edd3 7a00 	vldr	s15, [r3]
 800ba56:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800ba5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ba5e:	dd02      	ble.n	800ba66 <HAL_TIM_PeriodElapsedCallback+0x246>
 800ba60:	4b39      	ldr	r3, [pc, #228]	; (800bb48 <HAL_TIM_PeriodElapsedCallback+0x328>)
 800ba62:	681b      	ldr	r3, [r3, #0]
 800ba64:	e004      	b.n	800ba70 <HAL_TIM_PeriodElapsedCallback+0x250>
 800ba66:	4b37      	ldr	r3, [pc, #220]	; (800bb44 <HAL_TIM_PeriodElapsedCallback+0x324>)
 800ba68:	681b      	ldr	r3, [r3, #0]
 800ba6a:	e001      	b.n	800ba70 <HAL_TIM_PeriodElapsedCallback+0x250>
 800ba6c:	4b37      	ldr	r3, [pc, #220]	; (800bb4c <HAL_TIM_PeriodElapsedCallback+0x32c>)
 800ba6e:	681b      	ldr	r3, [r3, #0]
 800ba70:	4a34      	ldr	r2, [pc, #208]	; (800bb44 <HAL_TIM_PeriodElapsedCallback+0x324>)
 800ba72:	6013      	str	r3, [r2, #0]
			epsilon_l = target_speed_l - speed_l;
 800ba74:	4b33      	ldr	r3, [pc, #204]	; (800bb44 <HAL_TIM_PeriodElapsedCallback+0x324>)
 800ba76:	ed93 7a00 	vldr	s14, [r3]
 800ba7a:	4b2e      	ldr	r3, [pc, #184]	; (800bb34 <HAL_TIM_PeriodElapsedCallback+0x314>)
 800ba7c:	edd3 7a00 	vldr	s15, [r3]
 800ba80:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ba84:	4b32      	ldr	r3, [pc, #200]	; (800bb50 <HAL_TIM_PeriodElapsedCallback+0x330>)
 800ba86:	edc3 7a00 	vstr	s15, [r3]
			pulse_l = Kp * epsilon_l;
 800ba8a:	4b31      	ldr	r3, [pc, #196]	; (800bb50 <HAL_TIM_PeriodElapsedCallback+0x330>)
 800ba8c:	edd3 7a00 	vldr	s15, [r3]
 800ba90:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800ba94:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ba98:	4b2e      	ldr	r3, [pc, #184]	; (800bb54 <HAL_TIM_PeriodElapsedCallback+0x334>)
 800ba9a:	edc3 7a00 	vstr	s15, [r3]

			target_speed_r += accel_r * 0.001;
 800ba9e:	4b2e      	ldr	r3, [pc, #184]	; (800bb58 <HAL_TIM_PeriodElapsedCallback+0x338>)
 800baa0:	681b      	ldr	r3, [r3, #0]
 800baa2:	4618      	mov	r0, r3
 800baa4:	f7f4 fd48 	bl	8000538 <__aeabi_f2d>
 800baa8:	a317      	add	r3, pc, #92	; (adr r3, 800bb08 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 800baaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800baae:	f7f4 fd9b 	bl	80005e8 <__aeabi_dmul>
 800bab2:	4603      	mov	r3, r0
 800bab4:	460c      	mov	r4, r1
 800bab6:	4625      	mov	r5, r4
 800bab8:	461c      	mov	r4, r3
 800baba:	4b28      	ldr	r3, [pc, #160]	; (800bb5c <HAL_TIM_PeriodElapsedCallback+0x33c>)
 800babc:	681b      	ldr	r3, [r3, #0]
 800babe:	4618      	mov	r0, r3
 800bac0:	f7f4 fd3a 	bl	8000538 <__aeabi_f2d>
 800bac4:	4602      	mov	r2, r0
 800bac6:	460b      	mov	r3, r1
 800bac8:	4620      	mov	r0, r4
 800baca:	4629      	mov	r1, r5
 800bacc:	f7f4 fbd6 	bl	800027c <__adddf3>
 800bad0:	4603      	mov	r3, r0
 800bad2:	460c      	mov	r4, r1
 800bad4:	4618      	mov	r0, r3
 800bad6:	4621      	mov	r1, r4
 800bad8:	f7f5 f85e 	bl	8000b98 <__aeabi_d2f>
 800badc:	4602      	mov	r2, r0
 800bade:	4b1f      	ldr	r3, [pc, #124]	; (800bb5c <HAL_TIM_PeriodElapsedCallback+0x33c>)
 800bae0:	601a      	str	r2, [r3, #0]
			target_speed_r = max(min(target_speed_r, speed_max_r), speed_min_r);
 800bae2:	4b1e      	ldr	r3, [pc, #120]	; (800bb5c <HAL_TIM_PeriodElapsedCallback+0x33c>)
 800bae4:	ed93 7a00 	vldr	s14, [r3]
 800bae8:	4b1d      	ldr	r3, [pc, #116]	; (800bb60 <HAL_TIM_PeriodElapsedCallback+0x340>)
 800baea:	edd3 7a00 	vldr	s15, [r3]
 800baee:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800baf2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800baf6:	dd35      	ble.n	800bb64 <HAL_TIM_PeriodElapsedCallback+0x344>
 800baf8:	4b19      	ldr	r3, [pc, #100]	; (800bb60 <HAL_TIM_PeriodElapsedCallback+0x340>)
 800bafa:	edd3 7a00 	vldr	s15, [r3]
 800bafe:	e034      	b.n	800bb6a <HAL_TIM_PeriodElapsedCallback+0x34a>
 800bb00:	775e3793 	.word	0x775e3793
 800bb04:	3f552a9e 	.word	0x3f552a9e
 800bb08:	d2f1a9fc 	.word	0xd2f1a9fc
 800bb0c:	3f50624d 	.word	0x3f50624d
 800bb10:	20000bb4 	.word	0x20000bb4
 800bb14:	40000800 	.word	0x40000800
 800bb18:	200002ac 	.word	0x200002ac
 800bb1c:	40010400 	.word	0x40010400
 800bb20:	20000bac 	.word	0x20000bac
 800bb24:	471c4000 	.word	0x471c4000
 800bb28:	477fff00 	.word	0x477fff00
 800bb2c:	200015c4 	.word	0x200015c4
 800bb30:	20000aec 	.word	0x20000aec
 800bb34:	20000af0 	.word	0x20000af0
 800bb38:	200002bc 	.word	0x200002bc
 800bb3c:	20000f68 	.word	0x20000f68
 800bb40:	20000d58 	.word	0x20000d58
 800bb44:	20000bfc 	.word	0x20000bfc
 800bb48:	2000077c 	.word	0x2000077c
 800bb4c:	20000b54 	.word	0x20000b54
 800bb50:	20000b60 	.word	0x20000b60
 800bb54:	20000ba8 	.word	0x20000ba8
 800bb58:	20000ae4 	.word	0x20000ae4
 800bb5c:	200001a0 	.word	0x200001a0
 800bb60:	200001a4 	.word	0x200001a4
 800bb64:	4ba4      	ldr	r3, [pc, #656]	; (800bdf8 <HAL_TIM_PeriodElapsedCallback+0x5d8>)
 800bb66:	edd3 7a00 	vldr	s15, [r3]
 800bb6a:	4ba4      	ldr	r3, [pc, #656]	; (800bdfc <HAL_TIM_PeriodElapsedCallback+0x5dc>)
 800bb6c:	ed93 7a00 	vldr	s14, [r3]
 800bb70:	eef4 7ac7 	vcmpe.f32	s15, s14
 800bb74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bb78:	dd10      	ble.n	800bb9c <HAL_TIM_PeriodElapsedCallback+0x37c>
 800bb7a:	4b9f      	ldr	r3, [pc, #636]	; (800bdf8 <HAL_TIM_PeriodElapsedCallback+0x5d8>)
 800bb7c:	ed93 7a00 	vldr	s14, [r3]
 800bb80:	4b9f      	ldr	r3, [pc, #636]	; (800be00 <HAL_TIM_PeriodElapsedCallback+0x5e0>)
 800bb82:	edd3 7a00 	vldr	s15, [r3]
 800bb86:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800bb8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bb8e:	dd02      	ble.n	800bb96 <HAL_TIM_PeriodElapsedCallback+0x376>
 800bb90:	4b9b      	ldr	r3, [pc, #620]	; (800be00 <HAL_TIM_PeriodElapsedCallback+0x5e0>)
 800bb92:	681b      	ldr	r3, [r3, #0]
 800bb94:	e004      	b.n	800bba0 <HAL_TIM_PeriodElapsedCallback+0x380>
 800bb96:	4b98      	ldr	r3, [pc, #608]	; (800bdf8 <HAL_TIM_PeriodElapsedCallback+0x5d8>)
 800bb98:	681b      	ldr	r3, [r3, #0]
 800bb9a:	e001      	b.n	800bba0 <HAL_TIM_PeriodElapsedCallback+0x380>
 800bb9c:	4b97      	ldr	r3, [pc, #604]	; (800bdfc <HAL_TIM_PeriodElapsedCallback+0x5dc>)
 800bb9e:	681b      	ldr	r3, [r3, #0]
 800bba0:	4a95      	ldr	r2, [pc, #596]	; (800bdf8 <HAL_TIM_PeriodElapsedCallback+0x5d8>)
 800bba2:	6013      	str	r3, [r2, #0]
			epsilon_r = target_speed_r - speed_r;
 800bba4:	4b94      	ldr	r3, [pc, #592]	; (800bdf8 <HAL_TIM_PeriodElapsedCallback+0x5d8>)
 800bba6:	ed93 7a00 	vldr	s14, [r3]
 800bbaa:	4b96      	ldr	r3, [pc, #600]	; (800be04 <HAL_TIM_PeriodElapsedCallback+0x5e4>)
 800bbac:	edd3 7a00 	vldr	s15, [r3]
 800bbb0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bbb4:	4b94      	ldr	r3, [pc, #592]	; (800be08 <HAL_TIM_PeriodElapsedCallback+0x5e8>)
 800bbb6:	edc3 7a00 	vstr	s15, [r3]
			pulse_r = Kp * epsilon_r;
 800bbba:	4b93      	ldr	r3, [pc, #588]	; (800be08 <HAL_TIM_PeriodElapsedCallback+0x5e8>)
 800bbbc:	edd3 7a00 	vldr	s15, [r3]
 800bbc0:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800bbc4:	ee67 7a87 	vmul.f32	s15, s15, s14
 800bbc8:	4b90      	ldr	r3, [pc, #576]	; (800be0c <HAL_TIM_PeriodElapsedCallback+0x5ec>)
 800bbca:	edc3 7a00 	vstr	s15, [r3]
		}

		log_cnt ++;
 800bbce:	4b90      	ldr	r3, [pc, #576]	; (800be10 <HAL_TIM_PeriodElapsedCallback+0x5f0>)
 800bbd0:	681b      	ldr	r3, [r3, #0]
 800bbd2:	3301      	adds	r3, #1
 800bbd4:	4a8e      	ldr	r2, [pc, #568]	; (800be10 <HAL_TIM_PeriodElapsedCallback+0x5f0>)
 800bbd6:	6013      	str	r3, [r2, #0]

		if(log_cnt >= 5 && MF2.FLAG.LOG){
 800bbd8:	4b8d      	ldr	r3, [pc, #564]	; (800be10 <HAL_TIM_PeriodElapsedCallback+0x5f0>)
 800bbda:	681b      	ldr	r3, [r3, #0]
 800bbdc:	2b04      	cmp	r3, #4
 800bbde:	dd37      	ble.n	800bc50 <HAL_TIM_PeriodElapsedCallback+0x430>
 800bbe0:	4b8c      	ldr	r3, [pc, #560]	; (800be14 <HAL_TIM_PeriodElapsedCallback+0x5f4>)
 800bbe2:	881b      	ldrh	r3, [r3, #0]
 800bbe4:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800bbe8:	b2db      	uxtb	r3, r3
 800bbea:	2b00      	cmp	r3, #0
 800bbec:	d030      	beq.n	800bc50 <HAL_TIM_PeriodElapsedCallback+0x430>
			log_cnt = 0;
 800bbee:	4b88      	ldr	r3, [pc, #544]	; (800be10 <HAL_TIM_PeriodElapsedCallback+0x5f0>)
 800bbf0:	2200      	movs	r2, #0
 800bbf2:	601a      	str	r2, [r3, #0]
			if(get_cnt < log_allay){
 800bbf4:	4b88      	ldr	r3, [pc, #544]	; (800be18 <HAL_TIM_PeriodElapsedCallback+0x5f8>)
 800bbf6:	681b      	ldr	r3, [r3, #0]
 800bbf8:	2bc7      	cmp	r3, #199	; 0xc7
 800bbfa:	dc29      	bgt.n	800bc50 <HAL_TIM_PeriodElapsedCallback+0x430>
				get_speed_l[get_cnt] = speed_l;
 800bbfc:	4b87      	ldr	r3, [pc, #540]	; (800be1c <HAL_TIM_PeriodElapsedCallback+0x5fc>)
 800bbfe:	edd3 7a00 	vldr	s15, [r3]
 800bc02:	4b85      	ldr	r3, [pc, #532]	; (800be18 <HAL_TIM_PeriodElapsedCallback+0x5f8>)
 800bc04:	681b      	ldr	r3, [r3, #0]
 800bc06:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800bc0a:	ee17 1a90 	vmov	r1, s15
 800bc0e:	4a84      	ldr	r2, [pc, #528]	; (800be20 <HAL_TIM_PeriodElapsedCallback+0x600>)
 800bc10:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				get_speed_r[get_cnt] = speed_r;
 800bc14:	4b7b      	ldr	r3, [pc, #492]	; (800be04 <HAL_TIM_PeriodElapsedCallback+0x5e4>)
 800bc16:	edd3 7a00 	vldr	s15, [r3]
 800bc1a:	4b7f      	ldr	r3, [pc, #508]	; (800be18 <HAL_TIM_PeriodElapsedCallback+0x5f8>)
 800bc1c:	681b      	ldr	r3, [r3, #0]
 800bc1e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800bc22:	ee17 1a90 	vmov	r1, s15
 800bc26:	4a7f      	ldr	r2, [pc, #508]	; (800be24 <HAL_TIM_PeriodElapsedCallback+0x604>)
 800bc28:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				get_omega[get_cnt] = gyro_read_z();
 800bc2c:	f7ff fd98 	bl	800b760 <gyro_read_z>
 800bc30:	eef0 7a40 	vmov.f32	s15, s0
 800bc34:	4b78      	ldr	r3, [pc, #480]	; (800be18 <HAL_TIM_PeriodElapsedCallback+0x5f8>)
 800bc36:	681b      	ldr	r3, [r3, #0]
 800bc38:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800bc3c:	ee17 1a90 	vmov	r1, s15
 800bc40:	4a79      	ldr	r2, [pc, #484]	; (800be28 <HAL_TIM_PeriodElapsedCallback+0x608>)
 800bc42:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				get_cnt++;
 800bc46:	4b74      	ldr	r3, [pc, #464]	; (800be18 <HAL_TIM_PeriodElapsedCallback+0x5f8>)
 800bc48:	681b      	ldr	r3, [r3, #0]
 800bc4a:	3301      	adds	r3, #1
 800bc4c:	4a72      	ldr	r2, [pc, #456]	; (800be18 <HAL_TIM_PeriodElapsedCallback+0x5f8>)
 800bc4e:	6013      	str	r3, [r2, #0]
//		degree_x += accel_read_x() * 0.001;
//		degree_y += accel_read_y() * 0.001;
//		degree_z += accel_read_z() * 0.001;
//		degree_x += gyro_read_x() * 0.001;
//		degree_y += gyro_read_y() * 0.001;
		degree_z += gyro_read_z() * 0.001;
 800bc50:	f7ff fd86 	bl	800b760 <gyro_read_z>
 800bc54:	ee10 3a10 	vmov	r3, s0
 800bc58:	4618      	mov	r0, r3
 800bc5a:	f7f4 fc6d 	bl	8000538 <__aeabi_f2d>
 800bc5e:	a362      	add	r3, pc, #392	; (adr r3, 800bde8 <HAL_TIM_PeriodElapsedCallback+0x5c8>)
 800bc60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc64:	f7f4 fcc0 	bl	80005e8 <__aeabi_dmul>
 800bc68:	4603      	mov	r3, r0
 800bc6a:	460c      	mov	r4, r1
 800bc6c:	4625      	mov	r5, r4
 800bc6e:	461c      	mov	r4, r3
 800bc70:	4b6e      	ldr	r3, [pc, #440]	; (800be2c <HAL_TIM_PeriodElapsedCallback+0x60c>)
 800bc72:	681b      	ldr	r3, [r3, #0]
 800bc74:	4618      	mov	r0, r3
 800bc76:	f7f4 fc5f 	bl	8000538 <__aeabi_f2d>
 800bc7a:	4602      	mov	r2, r0
 800bc7c:	460b      	mov	r3, r1
 800bc7e:	4620      	mov	r0, r4
 800bc80:	4629      	mov	r1, r5
 800bc82:	f7f4 fafb 	bl	800027c <__adddf3>
 800bc86:	4603      	mov	r3, r0
 800bc88:	460c      	mov	r4, r1
 800bc8a:	4618      	mov	r0, r3
 800bc8c:	4621      	mov	r1, r4
 800bc8e:	f7f4 ff83 	bl	8000b98 <__aeabi_d2f>
 800bc92:	4602      	mov	r2, r0
 800bc94:	4b65      	ldr	r3, [pc, #404]	; (800be2c <HAL_TIM_PeriodElapsedCallback+0x60c>)
 800bc96:	601a      	str	r2, [r3, #0]

		//gyro ドリフト量計算
		if(MF2.FLAG.GDRIFT){
 800bc98:	4b5e      	ldr	r3, [pc, #376]	; (800be14 <HAL_TIM_PeriodElapsedCallback+0x5f4>)
 800bc9a:	881b      	ldrh	r3, [r3, #0]
 800bc9c:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800bca0:	b2db      	uxtb	r3, r3
 800bca2:	2b00      	cmp	r3, #0
 800bca4:	d04d      	beq.n	800bd42 <HAL_TIM_PeriodElapsedCallback+0x522>
			gyro_cnt ++;
 800bca6:	4b62      	ldr	r3, [pc, #392]	; (800be30 <HAL_TIM_PeriodElapsedCallback+0x610>)
 800bca8:	681b      	ldr	r3, [r3, #0]
 800bcaa:	3301      	adds	r3, #1
 800bcac:	4a60      	ldr	r2, [pc, #384]	; (800be30 <HAL_TIM_PeriodElapsedCallback+0x610>)
 800bcae:	6013      	str	r3, [r2, #0]
			if(gyro_cnt >= 2)dif_omega_z += old_omega_z - gyro_read_z();
 800bcb0:	4b5f      	ldr	r3, [pc, #380]	; (800be30 <HAL_TIM_PeriodElapsedCallback+0x610>)
 800bcb2:	681b      	ldr	r3, [r3, #0]
 800bcb4:	2b01      	cmp	r3, #1
 800bcb6:	dd10      	ble.n	800bcda <HAL_TIM_PeriodElapsedCallback+0x4ba>
 800bcb8:	4b5e      	ldr	r3, [pc, #376]	; (800be34 <HAL_TIM_PeriodElapsedCallback+0x614>)
 800bcba:	ed93 8a00 	vldr	s16, [r3]
 800bcbe:	f7ff fd4f 	bl	800b760 <gyro_read_z>
 800bcc2:	eef0 7a40 	vmov.f32	s15, s0
 800bcc6:	ee38 7a67 	vsub.f32	s14, s16, s15
 800bcca:	4b5b      	ldr	r3, [pc, #364]	; (800be38 <HAL_TIM_PeriodElapsedCallback+0x618>)
 800bccc:	edd3 7a00 	vldr	s15, [r3]
 800bcd0:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bcd4:	4b58      	ldr	r3, [pc, #352]	; (800be38 <HAL_TIM_PeriodElapsedCallback+0x618>)
 800bcd6:	edc3 7a00 	vstr	s15, [r3]
			old_omega_z = gyro_read_z();
 800bcda:	f7ff fd41 	bl	800b760 <gyro_read_z>
 800bcde:	eef0 7a40 	vmov.f32	s15, s0
 800bce2:	4b54      	ldr	r3, [pc, #336]	; (800be34 <HAL_TIM_PeriodElapsedCallback+0x614>)
 800bce4:	edc3 7a00 	vstr	s15, [r3]
			full_led_write(YELLOW);
 800bce8:	2006      	movs	r0, #6
 800bcea:	f004 fe01 	bl	80108f0 <full_led_write>
			if(gyro_cnt >= 1001) {
 800bcee:	4b50      	ldr	r3, [pc, #320]	; (800be30 <HAL_TIM_PeriodElapsedCallback+0x610>)
 800bcf0:	681b      	ldr	r3, [r3, #0]
 800bcf2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800bcf6:	dd1c      	ble.n	800bd32 <HAL_TIM_PeriodElapsedCallback+0x512>
				MF2.FLAG.GDRIFT = 0;
 800bcf8:	4a46      	ldr	r2, [pc, #280]	; (800be14 <HAL_TIM_PeriodElapsedCallback+0x5f4>)
 800bcfa:	8813      	ldrh	r3, [r2, #0]
 800bcfc:	f36f 13c7 	bfc	r3, #7, #1
 800bd00:	8013      	strh	r3, [r2, #0]
				gyro_drift_value = dif_omega_z / gyro_cnt-1;
 800bd02:	4b4d      	ldr	r3, [pc, #308]	; (800be38 <HAL_TIM_PeriodElapsedCallback+0x618>)
 800bd04:	edd3 6a00 	vldr	s13, [r3]
 800bd08:	4b49      	ldr	r3, [pc, #292]	; (800be30 <HAL_TIM_PeriodElapsedCallback+0x610>)
 800bd0a:	681b      	ldr	r3, [r3, #0]
 800bd0c:	ee07 3a90 	vmov	s15, r3
 800bd10:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800bd14:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bd18:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bd1c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800bd20:	4b46      	ldr	r3, [pc, #280]	; (800be3c <HAL_TIM_PeriodElapsedCallback+0x61c>)
 800bd22:	edc3 7a00 	vstr	s15, [r3]
				gyro_cnt = 0;
 800bd26:	4b42      	ldr	r3, [pc, #264]	; (800be30 <HAL_TIM_PeriodElapsedCallback+0x610>)
 800bd28:	2200      	movs	r2, #0
 800bd2a:	601a      	str	r2, [r3, #0]
				full_led_write(BLUEGREEN);
 800bd2c:	2004      	movs	r0, #4
 800bd2e:	f004 fddf 	bl	80108f0 <full_led_write>
			}
			degree_z = 0;
 800bd32:	4b3e      	ldr	r3, [pc, #248]	; (800be2c <HAL_TIM_PeriodElapsedCallback+0x60c>)
 800bd34:	f04f 0200 	mov.w	r2, #0
 800bd38:	601a      	str	r2, [r3, #0]
			target_degree_z = 0;
 800bd3a:	4b41      	ldr	r3, [pc, #260]	; (800be40 <HAL_TIM_PeriodElapsedCallback+0x620>)
 800bd3c:	f04f 0200 	mov.w	r2, #0
 800bd40:	601a      	str	r2, [r3, #0]
		}


		if(MF2.FLAG.ENKAI){
 800bd42:	4b34      	ldr	r3, [pc, #208]	; (800be14 <HAL_TIM_PeriodElapsedCallback+0x5f4>)
 800bd44:	881b      	ldrh	r3, [r3, #0]
 800bd46:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800bd4a:	b2db      	uxtb	r3, r3
 800bd4c:	2b00      	cmp	r3, #0
 800bd4e:	f000 80d6 	beq.w	800befe <HAL_TIM_PeriodElapsedCallback+0x6de>
			target_dist = TREAD*M_PI/360*(degree_z-target_degree_z);
 800bd52:	4b36      	ldr	r3, [pc, #216]	; (800be2c <HAL_TIM_PeriodElapsedCallback+0x60c>)
 800bd54:	ed93 7a00 	vldr	s14, [r3]
 800bd58:	4b39      	ldr	r3, [pc, #228]	; (800be40 <HAL_TIM_PeriodElapsedCallback+0x620>)
 800bd5a:	edd3 7a00 	vldr	s15, [r3]
 800bd5e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bd62:	ee17 0a90 	vmov	r0, s15
 800bd66:	f7f4 fbe7 	bl	8000538 <__aeabi_f2d>
 800bd6a:	a321      	add	r3, pc, #132	; (adr r3, 800bdf0 <HAL_TIM_PeriodElapsedCallback+0x5d0>)
 800bd6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd70:	f7f4 fc3a 	bl	80005e8 <__aeabi_dmul>
 800bd74:	4603      	mov	r3, r0
 800bd76:	460c      	mov	r4, r1
 800bd78:	4618      	mov	r0, r3
 800bd7a:	4621      	mov	r1, r4
 800bd7c:	f7f4 ff0c 	bl	8000b98 <__aeabi_d2f>
 800bd80:	4602      	mov	r2, r0
 800bd82:	4b30      	ldr	r3, [pc, #192]	; (800be44 <HAL_TIM_PeriodElapsedCallback+0x624>)
 800bd84:	601a      	str	r2, [r3, #0]
			if(target_dist > 0){
 800bd86:	4b2f      	ldr	r3, [pc, #188]	; (800be44 <HAL_TIM_PeriodElapsedCallback+0x624>)
 800bd88:	edd3 7a00 	vldr	s15, [r3]
 800bd8c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800bd90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bd94:	dd5c      	ble.n	800be50 <HAL_TIM_PeriodElapsedCallback+0x630>
				target_speed_l = sqrt(2*accel_l*target_dist);
 800bd96:	4b2c      	ldr	r3, [pc, #176]	; (800be48 <HAL_TIM_PeriodElapsedCallback+0x628>)
 800bd98:	edd3 7a00 	vldr	s15, [r3]
 800bd9c:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800bda0:	4b28      	ldr	r3, [pc, #160]	; (800be44 <HAL_TIM_PeriodElapsedCallback+0x624>)
 800bda2:	edd3 7a00 	vldr	s15, [r3]
 800bda6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bdaa:	ee17 0a90 	vmov	r0, s15
 800bdae:	f7f4 fbc3 	bl	8000538 <__aeabi_f2d>
 800bdb2:	4603      	mov	r3, r0
 800bdb4:	460c      	mov	r4, r1
 800bdb6:	ec44 3b10 	vmov	d0, r3, r4
 800bdba:	f006 fb33 	bl	8012424 <sqrt>
 800bdbe:	ec54 3b10 	vmov	r3, r4, d0
 800bdc2:	4618      	mov	r0, r3
 800bdc4:	4621      	mov	r1, r4
 800bdc6:	f7f4 fee7 	bl	8000b98 <__aeabi_d2f>
 800bdca:	4602      	mov	r2, r0
 800bdcc:	4b1f      	ldr	r3, [pc, #124]	; (800be4c <HAL_TIM_PeriodElapsedCallback+0x62c>)
 800bdce:	601a      	str	r2, [r3, #0]
				target_speed_r = -1 * target_speed_l;
 800bdd0:	4b1e      	ldr	r3, [pc, #120]	; (800be4c <HAL_TIM_PeriodElapsedCallback+0x62c>)
 800bdd2:	edd3 7a00 	vldr	s15, [r3]
 800bdd6:	eef1 7a67 	vneg.f32	s15, s15
 800bdda:	4b07      	ldr	r3, [pc, #28]	; (800bdf8 <HAL_TIM_PeriodElapsedCallback+0x5d8>)
 800bddc:	edc3 7a00 	vstr	s15, [r3]
 800bde0:	e063      	b.n	800beaa <HAL_TIM_PeriodElapsedCallback+0x68a>
 800bde2:	bf00      	nop
 800bde4:	f3af 8000 	nop.w
 800bde8:	d2f1a9fc 	.word	0xd2f1a9fc
 800bdec:	3f50624d 	.word	0x3f50624d
 800bdf0:	d7653223 	.word	0xd7653223
 800bdf4:	3fe26e40 	.word	0x3fe26e40
 800bdf8:	200001a0 	.word	0x200001a0
 800bdfc:	20000f6c 	.word	0x20000f6c
 800be00:	200001a4 	.word	0x200001a4
 800be04:	200002bc 	.word	0x200002bc
 800be08:	20000c08 	.word	0x20000c08
 800be0c:	20000780 	.word	0x20000780
 800be10:	20000108 	.word	0x20000108
 800be14:	20000f64 	.word	0x20000f64
 800be18:	20000110 	.word	0x20000110
 800be1c:	20000af0 	.word	0x20000af0
 800be20:	20000784 	.word	0x20000784
 800be24:	2000045c 	.word	0x2000045c
 800be28:	200012a4 	.word	0x200012a4
 800be2c:	20000b5c 	.word	0x20000b5c
 800be30:	2000010c 	.word	0x2000010c
 800be34:	200015cc 	.word	0x200015cc
 800be38:	20000ba4 	.word	0x20000ba4
 800be3c:	20000bf4 	.word	0x20000bf4
 800be40:	20000bf8 	.word	0x20000bf8
 800be44:	20000f78 	.word	0x20000f78
 800be48:	20000d58 	.word	0x20000d58
 800be4c:	20000bfc 	.word	0x20000bfc
			}else{
				target_speed_l = sqrt(2*accel_l*target_dist*-1)*-1;
 800be50:	4bac      	ldr	r3, [pc, #688]	; (800c104 <HAL_TIM_PeriodElapsedCallback+0x8e4>)
 800be52:	edd3 7a00 	vldr	s15, [r3]
 800be56:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800be5a:	4bab      	ldr	r3, [pc, #684]	; (800c108 <HAL_TIM_PeriodElapsedCallback+0x8e8>)
 800be5c:	edd3 7a00 	vldr	s15, [r3]
 800be60:	ee67 7a27 	vmul.f32	s15, s14, s15
 800be64:	eef1 7a67 	vneg.f32	s15, s15
 800be68:	ee17 3a90 	vmov	r3, s15
 800be6c:	4618      	mov	r0, r3
 800be6e:	f7f4 fb63 	bl	8000538 <__aeabi_f2d>
 800be72:	4603      	mov	r3, r0
 800be74:	460c      	mov	r4, r1
 800be76:	ec44 3b10 	vmov	d0, r3, r4
 800be7a:	f006 fad3 	bl	8012424 <sqrt>
 800be7e:	ec54 3b10 	vmov	r3, r4, d0
 800be82:	4618      	mov	r0, r3
 800be84:	4621      	mov	r1, r4
 800be86:	f7f4 fe87 	bl	8000b98 <__aeabi_d2f>
 800be8a:	4603      	mov	r3, r0
 800be8c:	ee07 3a90 	vmov	s15, r3
 800be90:	eef1 7a67 	vneg.f32	s15, s15
 800be94:	4b9d      	ldr	r3, [pc, #628]	; (800c10c <HAL_TIM_PeriodElapsedCallback+0x8ec>)
 800be96:	edc3 7a00 	vstr	s15, [r3]
				target_speed_r = -1 * target_speed_l;
 800be9a:	4b9c      	ldr	r3, [pc, #624]	; (800c10c <HAL_TIM_PeriodElapsedCallback+0x8ec>)
 800be9c:	edd3 7a00 	vldr	s15, [r3]
 800bea0:	eef1 7a67 	vneg.f32	s15, s15
 800bea4:	4b9a      	ldr	r3, [pc, #616]	; (800c110 <HAL_TIM_PeriodElapsedCallback+0x8f0>)
 800bea6:	edc3 7a00 	vstr	s15, [r3]
			}

			epsilon_l = target_speed_l - speed_l;
 800beaa:	4b98      	ldr	r3, [pc, #608]	; (800c10c <HAL_TIM_PeriodElapsedCallback+0x8ec>)
 800beac:	ed93 7a00 	vldr	s14, [r3]
 800beb0:	4b98      	ldr	r3, [pc, #608]	; (800c114 <HAL_TIM_PeriodElapsedCallback+0x8f4>)
 800beb2:	edd3 7a00 	vldr	s15, [r3]
 800beb6:	ee77 7a67 	vsub.f32	s15, s14, s15
 800beba:	4b97      	ldr	r3, [pc, #604]	; (800c118 <HAL_TIM_PeriodElapsedCallback+0x8f8>)
 800bebc:	edc3 7a00 	vstr	s15, [r3]
			pulse_l = Kp * epsilon_l;
 800bec0:	4b95      	ldr	r3, [pc, #596]	; (800c118 <HAL_TIM_PeriodElapsedCallback+0x8f8>)
 800bec2:	edd3 7a00 	vldr	s15, [r3]
 800bec6:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800beca:	ee67 7a87 	vmul.f32	s15, s15, s14
 800bece:	4b93      	ldr	r3, [pc, #588]	; (800c11c <HAL_TIM_PeriodElapsedCallback+0x8fc>)
 800bed0:	edc3 7a00 	vstr	s15, [r3]
			epsilon_r = target_speed_r - speed_r;
 800bed4:	4b8e      	ldr	r3, [pc, #568]	; (800c110 <HAL_TIM_PeriodElapsedCallback+0x8f0>)
 800bed6:	ed93 7a00 	vldr	s14, [r3]
 800beda:	4b91      	ldr	r3, [pc, #580]	; (800c120 <HAL_TIM_PeriodElapsedCallback+0x900>)
 800bedc:	edd3 7a00 	vldr	s15, [r3]
 800bee0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bee4:	4b8f      	ldr	r3, [pc, #572]	; (800c124 <HAL_TIM_PeriodElapsedCallback+0x904>)
 800bee6:	edc3 7a00 	vstr	s15, [r3]
			pulse_r = Kp * epsilon_r;
 800beea:	4b8e      	ldr	r3, [pc, #568]	; (800c124 <HAL_TIM_PeriodElapsedCallback+0x904>)
 800beec:	edd3 7a00 	vldr	s15, [r3]
 800bef0:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800bef4:	ee67 7a87 	vmul.f32	s15, s15, s14
 800bef8:	4b8b      	ldr	r3, [pc, #556]	; (800c128 <HAL_TIM_PeriodElapsedCallback+0x908>)
 800befa:	edc3 7a00 	vstr	s15, [r3]
		}


		if(MF.FLAG.FWALL){
 800befe:	4b8b      	ldr	r3, [pc, #556]	; (800c12c <HAL_TIM_PeriodElapsedCallback+0x90c>)
 800bf00:	881b      	ldrh	r3, [r3, #0]
 800bf02:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800bf06:	b2db      	uxtb	r3, r3
 800bf08:	2b00      	cmp	r3, #0
 800bf0a:	f000 8124 	beq.w	800c156 <HAL_TIM_PeriodElapsedCallback+0x936>
			target_speed_l = (int16_t)(OFFSET_FWALL_L - ad_fl)*0.5;//0.75;
 800bf0e:	4b88      	ldr	r3, [pc, #544]	; (800c130 <HAL_TIM_PeriodElapsedCallback+0x910>)
 800bf10:	681b      	ldr	r3, [r3, #0]
 800bf12:	b29b      	uxth	r3, r3
 800bf14:	f5c3 63bb 	rsb	r3, r3, #1496	; 0x5d8
 800bf18:	3304      	adds	r3, #4
 800bf1a:	b29b      	uxth	r3, r3
 800bf1c:	b21b      	sxth	r3, r3
 800bf1e:	4618      	mov	r0, r3
 800bf20:	f7f4 faf8 	bl	8000514 <__aeabi_i2d>
 800bf24:	f04f 0200 	mov.w	r2, #0
 800bf28:	4b82      	ldr	r3, [pc, #520]	; (800c134 <HAL_TIM_PeriodElapsedCallback+0x914>)
 800bf2a:	f7f4 fb5d 	bl	80005e8 <__aeabi_dmul>
 800bf2e:	4603      	mov	r3, r0
 800bf30:	460c      	mov	r4, r1
 800bf32:	4618      	mov	r0, r3
 800bf34:	4621      	mov	r1, r4
 800bf36:	f7f4 fe2f 	bl	8000b98 <__aeabi_d2f>
 800bf3a:	4602      	mov	r2, r0
 800bf3c:	4b73      	ldr	r3, [pc, #460]	; (800c10c <HAL_TIM_PeriodElapsedCallback+0x8ec>)
 800bf3e:	601a      	str	r2, [r3, #0]
			target_speed_r = (int16_t)(OFFSET_FWALL_R - ad_fr);//*1.5;
 800bf40:	4b7d      	ldr	r3, [pc, #500]	; (800c138 <HAL_TIM_PeriodElapsedCallback+0x918>)
 800bf42:	681b      	ldr	r3, [r3, #0]
 800bf44:	b29b      	uxth	r3, r3
 800bf46:	f5c3 7361 	rsb	r3, r3, #900	; 0x384
 800bf4a:	b29b      	uxth	r3, r3
 800bf4c:	b21b      	sxth	r3, r3
 800bf4e:	ee07 3a90 	vmov	s15, r3
 800bf52:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bf56:	4b6e      	ldr	r3, [pc, #440]	; (800c110 <HAL_TIM_PeriodElapsedCallback+0x8f0>)
 800bf58:	edc3 7a00 	vstr	s15, [r3]

			if(target_speed_l*target_speed_l < 2500)target_speed_l = 0;
 800bf5c:	4b6b      	ldr	r3, [pc, #428]	; (800c10c <HAL_TIM_PeriodElapsedCallback+0x8ec>)
 800bf5e:	ed93 7a00 	vldr	s14, [r3]
 800bf62:	4b6a      	ldr	r3, [pc, #424]	; (800c10c <HAL_TIM_PeriodElapsedCallback+0x8ec>)
 800bf64:	edd3 7a00 	vldr	s15, [r3]
 800bf68:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bf6c:	ed9f 7a73 	vldr	s14, [pc, #460]	; 800c13c <HAL_TIM_PeriodElapsedCallback+0x91c>
 800bf70:	eef4 7ac7 	vcmpe.f32	s15, s14
 800bf74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bf78:	d503      	bpl.n	800bf82 <HAL_TIM_PeriodElapsedCallback+0x762>
 800bf7a:	4b64      	ldr	r3, [pc, #400]	; (800c10c <HAL_TIM_PeriodElapsedCallback+0x8ec>)
 800bf7c:	f04f 0200 	mov.w	r2, #0
 800bf80:	601a      	str	r2, [r3, #0]
			if(target_speed_r*target_speed_r < 2500)target_speed_r = 0;
 800bf82:	4b63      	ldr	r3, [pc, #396]	; (800c110 <HAL_TIM_PeriodElapsedCallback+0x8f0>)
 800bf84:	ed93 7a00 	vldr	s14, [r3]
 800bf88:	4b61      	ldr	r3, [pc, #388]	; (800c110 <HAL_TIM_PeriodElapsedCallback+0x8f0>)
 800bf8a:	edd3 7a00 	vldr	s15, [r3]
 800bf8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bf92:	ed9f 7a6a 	vldr	s14, [pc, #424]	; 800c13c <HAL_TIM_PeriodElapsedCallback+0x91c>
 800bf96:	eef4 7ac7 	vcmpe.f32	s15, s14
 800bf9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bf9e:	d503      	bpl.n	800bfa8 <HAL_TIM_PeriodElapsedCallback+0x788>
 800bfa0:	4b5b      	ldr	r3, [pc, #364]	; (800c110 <HAL_TIM_PeriodElapsedCallback+0x8f0>)
 800bfa2:	f04f 0200 	mov.w	r2, #0
 800bfa6:	601a      	str	r2, [r3, #0]
			if(target_speed_l == 0 && target_speed_r == 0){
 800bfa8:	4b58      	ldr	r3, [pc, #352]	; (800c10c <HAL_TIM_PeriodElapsedCallback+0x8ec>)
 800bfaa:	edd3 7a00 	vldr	s15, [r3]
 800bfae:	eef5 7a40 	vcmp.f32	s15, #0.0
 800bfb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bfb6:	d111      	bne.n	800bfdc <HAL_TIM_PeriodElapsedCallback+0x7bc>
 800bfb8:	4b55      	ldr	r3, [pc, #340]	; (800c110 <HAL_TIM_PeriodElapsedCallback+0x8f0>)
 800bfba:	edd3 7a00 	vldr	s15, [r3]
 800bfbe:	eef5 7a40 	vcmp.f32	s15, #0.0
 800bfc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bfc6:	d109      	bne.n	800bfdc <HAL_TIM_PeriodElapsedCallback+0x7bc>
				MF.FLAG.FWALL = 0;
 800bfc8:	4a58      	ldr	r2, [pc, #352]	; (800c12c <HAL_TIM_PeriodElapsedCallback+0x90c>)
 800bfca:	8813      	ldrh	r3, [r2, #0]
 800bfcc:	f36f 13c7 	bfc	r3, #7, #1
 800bfd0:	8013      	strh	r3, [r2, #0]
				MF.FLAG.DRV = 0;
 800bfd2:	4a56      	ldr	r2, [pc, #344]	; (800c12c <HAL_TIM_PeriodElapsedCallback+0x90c>)
 800bfd4:	8813      	ldrh	r3, [r2, #0]
 800bfd6:	f36f 0341 	bfc	r3, #1, #1
 800bfda:	8013      	strh	r3, [r2, #0]
			}

			epsilon_l = target_speed_l - speed_l;
 800bfdc:	4b4b      	ldr	r3, [pc, #300]	; (800c10c <HAL_TIM_PeriodElapsedCallback+0x8ec>)
 800bfde:	ed93 7a00 	vldr	s14, [r3]
 800bfe2:	4b4c      	ldr	r3, [pc, #304]	; (800c114 <HAL_TIM_PeriodElapsedCallback+0x8f4>)
 800bfe4:	edd3 7a00 	vldr	s15, [r3]
 800bfe8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bfec:	4b4a      	ldr	r3, [pc, #296]	; (800c118 <HAL_TIM_PeriodElapsedCallback+0x8f8>)
 800bfee:	edc3 7a00 	vstr	s15, [r3]
			pulse_l = Kp * epsilon_l;
 800bff2:	4b49      	ldr	r3, [pc, #292]	; (800c118 <HAL_TIM_PeriodElapsedCallback+0x8f8>)
 800bff4:	edd3 7a00 	vldr	s15, [r3]
 800bff8:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800bffc:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c000:	4b46      	ldr	r3, [pc, #280]	; (800c11c <HAL_TIM_PeriodElapsedCallback+0x8fc>)
 800c002:	edc3 7a00 	vstr	s15, [r3]
			epsilon_r = target_speed_r - speed_r;
 800c006:	4b42      	ldr	r3, [pc, #264]	; (800c110 <HAL_TIM_PeriodElapsedCallback+0x8f0>)
 800c008:	ed93 7a00 	vldr	s14, [r3]
 800c00c:	4b44      	ldr	r3, [pc, #272]	; (800c120 <HAL_TIM_PeriodElapsedCallback+0x900>)
 800c00e:	edd3 7a00 	vldr	s15, [r3]
 800c012:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c016:	4b43      	ldr	r3, [pc, #268]	; (800c124 <HAL_TIM_PeriodElapsedCallback+0x904>)
 800c018:	edc3 7a00 	vstr	s15, [r3]
			pulse_r = Kp * epsilon_r;
 800c01c:	4b41      	ldr	r3, [pc, #260]	; (800c124 <HAL_TIM_PeriodElapsedCallback+0x904>)
 800c01e:	edd3 7a00 	vldr	s15, [r3]
 800c022:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800c026:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c02a:	4b3f      	ldr	r3, [pc, #252]	; (800c128 <HAL_TIM_PeriodElapsedCallback+0x908>)
 800c02c:	edc3 7a00 	vstr	s15, [r3]

			pulse_l = min(max(pulse_l, -100), 100);
 800c030:	4b3a      	ldr	r3, [pc, #232]	; (800c11c <HAL_TIM_PeriodElapsedCallback+0x8fc>)
 800c032:	edd3 7a00 	vldr	s15, [r3]
 800c036:	ed9f 7a42 	vldr	s14, [pc, #264]	; 800c140 <HAL_TIM_PeriodElapsedCallback+0x920>
 800c03a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c03e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c042:	bfcc      	ite	gt
 800c044:	2301      	movgt	r3, #1
 800c046:	2300      	movle	r3, #0
 800c048:	b2db      	uxtb	r3, r3
 800c04a:	f083 0301 	eor.w	r3, r3, #1
 800c04e:	b2db      	uxtb	r3, r3
 800c050:	2b00      	cmp	r3, #0
 800c052:	d111      	bne.n	800c078 <HAL_TIM_PeriodElapsedCallback+0x858>
 800c054:	4b31      	ldr	r3, [pc, #196]	; (800c11c <HAL_TIM_PeriodElapsedCallback+0x8fc>)
 800c056:	edd3 7a00 	vldr	s15, [r3]
 800c05a:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 800c144 <HAL_TIM_PeriodElapsedCallback+0x924>
 800c05e:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c062:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c066:	bfcc      	ite	gt
 800c068:	2301      	movgt	r3, #1
 800c06a:	2300      	movle	r3, #0
 800c06c:	b2db      	uxtb	r3, r3
 800c06e:	f083 0301 	eor.w	r3, r3, #1
 800c072:	b2db      	uxtb	r3, r3
 800c074:	2b00      	cmp	r3, #0
 800c076:	d00e      	beq.n	800c096 <HAL_TIM_PeriodElapsedCallback+0x876>
 800c078:	4b28      	ldr	r3, [pc, #160]	; (800c11c <HAL_TIM_PeriodElapsedCallback+0x8fc>)
 800c07a:	edd3 7a00 	vldr	s15, [r3]
 800c07e:	ed9f 7a30 	vldr	s14, [pc, #192]	; 800c140 <HAL_TIM_PeriodElapsedCallback+0x920>
 800c082:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c086:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c08a:	dd02      	ble.n	800c092 <HAL_TIM_PeriodElapsedCallback+0x872>
 800c08c:	4b23      	ldr	r3, [pc, #140]	; (800c11c <HAL_TIM_PeriodElapsedCallback+0x8fc>)
 800c08e:	681b      	ldr	r3, [r3, #0]
 800c090:	e002      	b.n	800c098 <HAL_TIM_PeriodElapsedCallback+0x878>
 800c092:	4b2d      	ldr	r3, [pc, #180]	; (800c148 <HAL_TIM_PeriodElapsedCallback+0x928>)
 800c094:	e000      	b.n	800c098 <HAL_TIM_PeriodElapsedCallback+0x878>
 800c096:	4b2d      	ldr	r3, [pc, #180]	; (800c14c <HAL_TIM_PeriodElapsedCallback+0x92c>)
 800c098:	4a20      	ldr	r2, [pc, #128]	; (800c11c <HAL_TIM_PeriodElapsedCallback+0x8fc>)
 800c09a:	6013      	str	r3, [r2, #0]
			pulse_r = min(max(pulse_r, -100), 100);
 800c09c:	4b22      	ldr	r3, [pc, #136]	; (800c128 <HAL_TIM_PeriodElapsedCallback+0x908>)
 800c09e:	edd3 7a00 	vldr	s15, [r3]
 800c0a2:	ed9f 7a27 	vldr	s14, [pc, #156]	; 800c140 <HAL_TIM_PeriodElapsedCallback+0x920>
 800c0a6:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c0aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c0ae:	bfcc      	ite	gt
 800c0b0:	2301      	movgt	r3, #1
 800c0b2:	2300      	movle	r3, #0
 800c0b4:	b2db      	uxtb	r3, r3
 800c0b6:	f083 0301 	eor.w	r3, r3, #1
 800c0ba:	b2db      	uxtb	r3, r3
 800c0bc:	2b00      	cmp	r3, #0
 800c0be:	d111      	bne.n	800c0e4 <HAL_TIM_PeriodElapsedCallback+0x8c4>
 800c0c0:	4b19      	ldr	r3, [pc, #100]	; (800c128 <HAL_TIM_PeriodElapsedCallback+0x908>)
 800c0c2:	edd3 7a00 	vldr	s15, [r3]
 800c0c6:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 800c144 <HAL_TIM_PeriodElapsedCallback+0x924>
 800c0ca:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c0ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c0d2:	bfcc      	ite	gt
 800c0d4:	2301      	movgt	r3, #1
 800c0d6:	2300      	movle	r3, #0
 800c0d8:	b2db      	uxtb	r3, r3
 800c0da:	f083 0301 	eor.w	r3, r3, #1
 800c0de:	b2db      	uxtb	r3, r3
 800c0e0:	2b00      	cmp	r3, #0
 800c0e2:	d035      	beq.n	800c150 <HAL_TIM_PeriodElapsedCallback+0x930>
 800c0e4:	4b10      	ldr	r3, [pc, #64]	; (800c128 <HAL_TIM_PeriodElapsedCallback+0x908>)
 800c0e6:	edd3 7a00 	vldr	s15, [r3]
 800c0ea:	ed9f 7a15 	vldr	s14, [pc, #84]	; 800c140 <HAL_TIM_PeriodElapsedCallback+0x920>
 800c0ee:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c0f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c0f6:	dd02      	ble.n	800c0fe <HAL_TIM_PeriodElapsedCallback+0x8de>
 800c0f8:	4b0b      	ldr	r3, [pc, #44]	; (800c128 <HAL_TIM_PeriodElapsedCallback+0x908>)
 800c0fa:	681b      	ldr	r3, [r3, #0]
 800c0fc:	e029      	b.n	800c152 <HAL_TIM_PeriodElapsedCallback+0x932>
 800c0fe:	4b12      	ldr	r3, [pc, #72]	; (800c148 <HAL_TIM_PeriodElapsedCallback+0x928>)
 800c100:	e027      	b.n	800c152 <HAL_TIM_PeriodElapsedCallback+0x932>
 800c102:	bf00      	nop
 800c104:	20000d58 	.word	0x20000d58
 800c108:	20000f78 	.word	0x20000f78
 800c10c:	20000bfc 	.word	0x20000bfc
 800c110:	200001a0 	.word	0x200001a0
 800c114:	20000af0 	.word	0x20000af0
 800c118:	20000b60 	.word	0x20000b60
 800c11c:	20000ba8 	.word	0x20000ba8
 800c120:	200002bc 	.word	0x200002bc
 800c124:	20000c08 	.word	0x20000c08
 800c128:	20000780 	.word	0x20000780
 800c12c:	20000f68 	.word	0x20000f68
 800c130:	20000d54 	.word	0x20000d54
 800c134:	3fe00000 	.word	0x3fe00000
 800c138:	20000c00 	.word	0x20000c00
 800c13c:	451c4000 	.word	0x451c4000
 800c140:	c2c80000 	.word	0xc2c80000
 800c144:	42c80000 	.word	0x42c80000
 800c148:	c2c80000 	.word	0xc2c80000
 800c14c:	42c80000 	.word	0x42c80000
 800c150:	4bbf      	ldr	r3, [pc, #764]	; (800c450 <HAL_TIM_PeriodElapsedCallback+0xc30>)
 800c152:	4ac0      	ldr	r2, [pc, #768]	; (800c454 <HAL_TIM_PeriodElapsedCallback+0xc34>)
 800c154:	6013      	str	r3, [r2, #0]
		}


		if(MF.FLAG.GYRO){
 800c156:	4bc0      	ldr	r3, [pc, #768]	; (800c458 <HAL_TIM_PeriodElapsedCallback+0xc38>)
 800c158:	881b      	ldrh	r3, [r3, #0]
 800c15a:	f3c3 2300 	ubfx	r3, r3, #8, #1
 800c15e:	b2db      	uxtb	r3, r3
 800c160:	2b00      	cmp	r3, #0
 800c162:	f000 810b 	beq.w	800c37c <HAL_TIM_PeriodElapsedCallback+0xb5c>
			target_omega_z += target_degaccel_z * 0.001;
 800c166:	4bbd      	ldr	r3, [pc, #756]	; (800c45c <HAL_TIM_PeriodElapsedCallback+0xc3c>)
 800c168:	681b      	ldr	r3, [r3, #0]
 800c16a:	4618      	mov	r0, r3
 800c16c:	f7f4 f9e4 	bl	8000538 <__aeabi_f2d>
 800c170:	a3b3      	add	r3, pc, #716	; (adr r3, 800c440 <HAL_TIM_PeriodElapsedCallback+0xc20>)
 800c172:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c176:	f7f4 fa37 	bl	80005e8 <__aeabi_dmul>
 800c17a:	4603      	mov	r3, r0
 800c17c:	460c      	mov	r4, r1
 800c17e:	4625      	mov	r5, r4
 800c180:	461c      	mov	r4, r3
 800c182:	4bb7      	ldr	r3, [pc, #732]	; (800c460 <HAL_TIM_PeriodElapsedCallback+0xc40>)
 800c184:	681b      	ldr	r3, [r3, #0]
 800c186:	4618      	mov	r0, r3
 800c188:	f7f4 f9d6 	bl	8000538 <__aeabi_f2d>
 800c18c:	4602      	mov	r2, r0
 800c18e:	460b      	mov	r3, r1
 800c190:	4620      	mov	r0, r4
 800c192:	4629      	mov	r1, r5
 800c194:	f7f4 f872 	bl	800027c <__adddf3>
 800c198:	4603      	mov	r3, r0
 800c19a:	460c      	mov	r4, r1
 800c19c:	4618      	mov	r0, r3
 800c19e:	4621      	mov	r1, r4
 800c1a0:	f7f4 fcfa 	bl	8000b98 <__aeabi_d2f>
 800c1a4:	4602      	mov	r2, r0
 800c1a6:	4bae      	ldr	r3, [pc, #696]	; (800c460 <HAL_TIM_PeriodElapsedCallback+0xc40>)
 800c1a8:	601a      	str	r2, [r3, #0]
			target_omega_z = max(min(target_omega_z, omega_max), omega_min);
 800c1aa:	4bad      	ldr	r3, [pc, #692]	; (800c460 <HAL_TIM_PeriodElapsedCallback+0xc40>)
 800c1ac:	ed93 7a00 	vldr	s14, [r3]
 800c1b0:	4bac      	ldr	r3, [pc, #688]	; (800c464 <HAL_TIM_PeriodElapsedCallback+0xc44>)
 800c1b2:	edd3 7a00 	vldr	s15, [r3]
 800c1b6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800c1ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c1be:	dd03      	ble.n	800c1c8 <HAL_TIM_PeriodElapsedCallback+0x9a8>
 800c1c0:	4ba8      	ldr	r3, [pc, #672]	; (800c464 <HAL_TIM_PeriodElapsedCallback+0xc44>)
 800c1c2:	edd3 7a00 	vldr	s15, [r3]
 800c1c6:	e002      	b.n	800c1ce <HAL_TIM_PeriodElapsedCallback+0x9ae>
 800c1c8:	4ba5      	ldr	r3, [pc, #660]	; (800c460 <HAL_TIM_PeriodElapsedCallback+0xc40>)
 800c1ca:	edd3 7a00 	vldr	s15, [r3]
 800c1ce:	4ba6      	ldr	r3, [pc, #664]	; (800c468 <HAL_TIM_PeriodElapsedCallback+0xc48>)
 800c1d0:	ed93 7a00 	vldr	s14, [r3]
 800c1d4:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c1d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c1dc:	dd10      	ble.n	800c200 <HAL_TIM_PeriodElapsedCallback+0x9e0>
 800c1de:	4ba0      	ldr	r3, [pc, #640]	; (800c460 <HAL_TIM_PeriodElapsedCallback+0xc40>)
 800c1e0:	ed93 7a00 	vldr	s14, [r3]
 800c1e4:	4b9f      	ldr	r3, [pc, #636]	; (800c464 <HAL_TIM_PeriodElapsedCallback+0xc44>)
 800c1e6:	edd3 7a00 	vldr	s15, [r3]
 800c1ea:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800c1ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c1f2:	dd02      	ble.n	800c1fa <HAL_TIM_PeriodElapsedCallback+0x9da>
 800c1f4:	4b9b      	ldr	r3, [pc, #620]	; (800c464 <HAL_TIM_PeriodElapsedCallback+0xc44>)
 800c1f6:	681b      	ldr	r3, [r3, #0]
 800c1f8:	e004      	b.n	800c204 <HAL_TIM_PeriodElapsedCallback+0x9e4>
 800c1fa:	4b99      	ldr	r3, [pc, #612]	; (800c460 <HAL_TIM_PeriodElapsedCallback+0xc40>)
 800c1fc:	681b      	ldr	r3, [r3, #0]
 800c1fe:	e001      	b.n	800c204 <HAL_TIM_PeriodElapsedCallback+0x9e4>
 800c200:	4b99      	ldr	r3, [pc, #612]	; (800c468 <HAL_TIM_PeriodElapsedCallback+0xc48>)
 800c202:	681b      	ldr	r3, [r3, #0]
 800c204:	4a96      	ldr	r2, [pc, #600]	; (800c460 <HAL_TIM_PeriodElapsedCallback+0xc40>)
 800c206:	6013      	str	r3, [r2, #0]

			epsilon_omega = target_omega_z - gyro_read_z();
 800c208:	4b95      	ldr	r3, [pc, #596]	; (800c460 <HAL_TIM_PeriodElapsedCallback+0xc40>)
 800c20a:	ed93 8a00 	vldr	s16, [r3]
 800c20e:	f7ff faa7 	bl	800b760 <gyro_read_z>
 800c212:	eef0 7a40 	vmov.f32	s15, s0
 800c216:	ee78 7a67 	vsub.f32	s15, s16, s15
 800c21a:	4b94      	ldr	r3, [pc, #592]	; (800c46c <HAL_TIM_PeriodElapsedCallback+0xc4c>)
 800c21c:	edc3 7a00 	vstr	s15, [r3]

			target_speed_l = speed_G - (target_omega_z + Kp_o*epsilon_omega)/180*M_PI*TREAD/2;
 800c220:	4b93      	ldr	r3, [pc, #588]	; (800c470 <HAL_TIM_PeriodElapsedCallback+0xc50>)
 800c222:	681b      	ldr	r3, [r3, #0]
 800c224:	4618      	mov	r0, r3
 800c226:	f7f4 f987 	bl	8000538 <__aeabi_f2d>
 800c22a:	4604      	mov	r4, r0
 800c22c:	460d      	mov	r5, r1
 800c22e:	4b8f      	ldr	r3, [pc, #572]	; (800c46c <HAL_TIM_PeriodElapsedCallback+0xc4c>)
 800c230:	edd3 7a00 	vldr	s15, [r3]
 800c234:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800c238:	ee27 7a87 	vmul.f32	s14, s15, s14
 800c23c:	4b88      	ldr	r3, [pc, #544]	; (800c460 <HAL_TIM_PeriodElapsedCallback+0xc40>)
 800c23e:	edd3 7a00 	vldr	s15, [r3]
 800c242:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c246:	ed9f 7a8b 	vldr	s14, [pc, #556]	; 800c474 <HAL_TIM_PeriodElapsedCallback+0xc54>
 800c24a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800c24e:	ee16 0a90 	vmov	r0, s13
 800c252:	f7f4 f971 	bl	8000538 <__aeabi_f2d>
 800c256:	a37c      	add	r3, pc, #496	; (adr r3, 800c448 <HAL_TIM_PeriodElapsedCallback+0xc28>)
 800c258:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c25c:	f7f4 f9c4 	bl	80005e8 <__aeabi_dmul>
 800c260:	4602      	mov	r2, r0
 800c262:	460b      	mov	r3, r1
 800c264:	4610      	mov	r0, r2
 800c266:	4619      	mov	r1, r3
 800c268:	f04f 0200 	mov.w	r2, #0
 800c26c:	4b82      	ldr	r3, [pc, #520]	; (800c478 <HAL_TIM_PeriodElapsedCallback+0xc58>)
 800c26e:	f7f4 f9bb 	bl	80005e8 <__aeabi_dmul>
 800c272:	4602      	mov	r2, r0
 800c274:	460b      	mov	r3, r1
 800c276:	4610      	mov	r0, r2
 800c278:	4619      	mov	r1, r3
 800c27a:	f04f 0200 	mov.w	r2, #0
 800c27e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c282:	f7f4 fadb 	bl	800083c <__aeabi_ddiv>
 800c286:	4602      	mov	r2, r0
 800c288:	460b      	mov	r3, r1
 800c28a:	4620      	mov	r0, r4
 800c28c:	4629      	mov	r1, r5
 800c28e:	f7f3 fff3 	bl	8000278 <__aeabi_dsub>
 800c292:	4603      	mov	r3, r0
 800c294:	460c      	mov	r4, r1
 800c296:	4618      	mov	r0, r3
 800c298:	4621      	mov	r1, r4
 800c29a:	f7f4 fc7d 	bl	8000b98 <__aeabi_d2f>
 800c29e:	4602      	mov	r2, r0
 800c2a0:	4b76      	ldr	r3, [pc, #472]	; (800c47c <HAL_TIM_PeriodElapsedCallback+0xc5c>)
 800c2a2:	601a      	str	r2, [r3, #0]
			target_speed_r = speed_G + (target_omega_z + Kp_o*epsilon_omega)/180*M_PI*TREAD/2;
 800c2a4:	4b72      	ldr	r3, [pc, #456]	; (800c470 <HAL_TIM_PeriodElapsedCallback+0xc50>)
 800c2a6:	681b      	ldr	r3, [r3, #0]
 800c2a8:	4618      	mov	r0, r3
 800c2aa:	f7f4 f945 	bl	8000538 <__aeabi_f2d>
 800c2ae:	4604      	mov	r4, r0
 800c2b0:	460d      	mov	r5, r1
 800c2b2:	4b6e      	ldr	r3, [pc, #440]	; (800c46c <HAL_TIM_PeriodElapsedCallback+0xc4c>)
 800c2b4:	edd3 7a00 	vldr	s15, [r3]
 800c2b8:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800c2bc:	ee27 7a87 	vmul.f32	s14, s15, s14
 800c2c0:	4b67      	ldr	r3, [pc, #412]	; (800c460 <HAL_TIM_PeriodElapsedCallback+0xc40>)
 800c2c2:	edd3 7a00 	vldr	s15, [r3]
 800c2c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c2ca:	ed9f 7a6a 	vldr	s14, [pc, #424]	; 800c474 <HAL_TIM_PeriodElapsedCallback+0xc54>
 800c2ce:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800c2d2:	ee16 0a90 	vmov	r0, s13
 800c2d6:	f7f4 f92f 	bl	8000538 <__aeabi_f2d>
 800c2da:	a35b      	add	r3, pc, #364	; (adr r3, 800c448 <HAL_TIM_PeriodElapsedCallback+0xc28>)
 800c2dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2e0:	f7f4 f982 	bl	80005e8 <__aeabi_dmul>
 800c2e4:	4602      	mov	r2, r0
 800c2e6:	460b      	mov	r3, r1
 800c2e8:	4610      	mov	r0, r2
 800c2ea:	4619      	mov	r1, r3
 800c2ec:	f04f 0200 	mov.w	r2, #0
 800c2f0:	4b61      	ldr	r3, [pc, #388]	; (800c478 <HAL_TIM_PeriodElapsedCallback+0xc58>)
 800c2f2:	f7f4 f979 	bl	80005e8 <__aeabi_dmul>
 800c2f6:	4602      	mov	r2, r0
 800c2f8:	460b      	mov	r3, r1
 800c2fa:	4610      	mov	r0, r2
 800c2fc:	4619      	mov	r1, r3
 800c2fe:	f04f 0200 	mov.w	r2, #0
 800c302:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c306:	f7f4 fa99 	bl	800083c <__aeabi_ddiv>
 800c30a:	4602      	mov	r2, r0
 800c30c:	460b      	mov	r3, r1
 800c30e:	4620      	mov	r0, r4
 800c310:	4629      	mov	r1, r5
 800c312:	f7f3 ffb3 	bl	800027c <__adddf3>
 800c316:	4603      	mov	r3, r0
 800c318:	460c      	mov	r4, r1
 800c31a:	4618      	mov	r0, r3
 800c31c:	4621      	mov	r1, r4
 800c31e:	f7f4 fc3b 	bl	8000b98 <__aeabi_d2f>
 800c322:	4602      	mov	r2, r0
 800c324:	4b56      	ldr	r3, [pc, #344]	; (800c480 <HAL_TIM_PeriodElapsedCallback+0xc60>)
 800c326:	601a      	str	r2, [r3, #0]

			epsilon_l = target_speed_l - speed_l;
 800c328:	4b54      	ldr	r3, [pc, #336]	; (800c47c <HAL_TIM_PeriodElapsedCallback+0xc5c>)
 800c32a:	ed93 7a00 	vldr	s14, [r3]
 800c32e:	4b55      	ldr	r3, [pc, #340]	; (800c484 <HAL_TIM_PeriodElapsedCallback+0xc64>)
 800c330:	edd3 7a00 	vldr	s15, [r3]
 800c334:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c338:	4b53      	ldr	r3, [pc, #332]	; (800c488 <HAL_TIM_PeriodElapsedCallback+0xc68>)
 800c33a:	edc3 7a00 	vstr	s15, [r3]
			pulse_l = Kp * epsilon_l;
 800c33e:	4b52      	ldr	r3, [pc, #328]	; (800c488 <HAL_TIM_PeriodElapsedCallback+0xc68>)
 800c340:	edd3 7a00 	vldr	s15, [r3]
 800c344:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800c348:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c34c:	4b4f      	ldr	r3, [pc, #316]	; (800c48c <HAL_TIM_PeriodElapsedCallback+0xc6c>)
 800c34e:	edc3 7a00 	vstr	s15, [r3]
			epsilon_r = target_speed_r - speed_r;
 800c352:	4b4b      	ldr	r3, [pc, #300]	; (800c480 <HAL_TIM_PeriodElapsedCallback+0xc60>)
 800c354:	ed93 7a00 	vldr	s14, [r3]
 800c358:	4b4d      	ldr	r3, [pc, #308]	; (800c490 <HAL_TIM_PeriodElapsedCallback+0xc70>)
 800c35a:	edd3 7a00 	vldr	s15, [r3]
 800c35e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c362:	4b4c      	ldr	r3, [pc, #304]	; (800c494 <HAL_TIM_PeriodElapsedCallback+0xc74>)
 800c364:	edc3 7a00 	vstr	s15, [r3]
			pulse_r = Kp * epsilon_r;
 800c368:	4b4a      	ldr	r3, [pc, #296]	; (800c494 <HAL_TIM_PeriodElapsedCallback+0xc74>)
 800c36a:	edd3 7a00 	vldr	s15, [r3]
 800c36e:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800c372:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c376:	4b37      	ldr	r3, [pc, #220]	; (800c454 <HAL_TIM_PeriodElapsedCallback+0xc34>)
 800c378:	edc3 7a00 	vstr	s15, [r3]
		}


		//ADchange interrupt
		uint16_t delay;
		tp = (tp+1)%3;
 800c37c:	4b46      	ldr	r3, [pc, #280]	; (800c498 <HAL_TIM_PeriodElapsedCallback+0xc78>)
 800c37e:	781b      	ldrb	r3, [r3, #0]
 800c380:	1c5a      	adds	r2, r3, #1
 800c382:	4b46      	ldr	r3, [pc, #280]	; (800c49c <HAL_TIM_PeriodElapsedCallback+0xc7c>)
 800c384:	fb83 3102 	smull	r3, r1, r3, r2
 800c388:	17d3      	asrs	r3, r2, #31
 800c38a:	1ac9      	subs	r1, r1, r3
 800c38c:	460b      	mov	r3, r1
 800c38e:	005b      	lsls	r3, r3, #1
 800c390:	440b      	add	r3, r1
 800c392:	1ad1      	subs	r1, r2, r3
 800c394:	b2ca      	uxtb	r2, r1
 800c396:	4b40      	ldr	r3, [pc, #256]	; (800c498 <HAL_TIM_PeriodElapsedCallback+0xc78>)
 800c398:	701a      	strb	r2, [r3, #0]

		switch(tp){
 800c39a:	4b3f      	ldr	r3, [pc, #252]	; (800c498 <HAL_TIM_PeriodElapsedCallback+0xc78>)
 800c39c:	781b      	ldrb	r3, [r3, #0]
 800c39e:	2b01      	cmp	r3, #1
 800c3a0:	d044      	beq.n	800c42c <HAL_TIM_PeriodElapsedCallback+0xc0c>
 800c3a2:	2b02      	cmp	r3, #2
 800c3a4:	f000 80bc 	beq.w	800c520 <HAL_TIM_PeriodElapsedCallback+0xd00>
 800c3a8:	2b00      	cmp	r3, #0
 800c3aa:	f040 82da 	bne.w	800c962 <HAL_TIM_PeriodElapsedCallback+0x1142>
		  case 0:
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_SET); 	//L
 800c3ae:	2201      	movs	r2, #1
 800c3b0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800c3b4:	483a      	ldr	r0, [pc, #232]	; (800c4a0 <HAL_TIM_PeriodElapsedCallback+0xc80>)
 800c3b6:	f7f5 ffa5 	bl	8002304 <HAL_GPIO_WritePin>
				for(delay=0; delay<sensor_wait; delay++);
 800c3ba:	2300      	movs	r3, #0
 800c3bc:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800c3be:	e002      	b.n	800c3c6 <HAL_TIM_PeriodElapsedCallback+0xba6>
 800c3c0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800c3c2:	3301      	adds	r3, #1
 800c3c4:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800c3c6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800c3c8:	f640 12c3 	movw	r2, #2499	; 0x9c3
 800c3cc:	4293      	cmp	r3, r2
 800c3ce:	d9f7      	bls.n	800c3c0 <HAL_TIM_PeriodElapsedCallback+0xba0>
				ad_l = get_adc_value(&hadc1, ADC_CHANNEL_3);			//L
 800c3d0:	2103      	movs	r1, #3
 800c3d2:	4834      	ldr	r0, [pc, #208]	; (800c4a4 <HAL_TIM_PeriodElapsedCallback+0xc84>)
 800c3d4:	f001 fa38 	bl	800d848 <get_adc_value>
 800c3d8:	4603      	mov	r3, r0
 800c3da:	461a      	mov	r2, r3
 800c3dc:	4b32      	ldr	r3, [pc, #200]	; (800c4a8 <HAL_TIM_PeriodElapsedCallback+0xc88>)
 800c3de:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 800c3e0:	2200      	movs	r2, #0
 800c3e2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800c3e6:	482e      	ldr	r0, [pc, #184]	; (800c4a0 <HAL_TIM_PeriodElapsedCallback+0xc80>)
 800c3e8:	f7f5 ff8c 	bl	8002304 <HAL_GPIO_WritePin>

				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);  	//R
 800c3ec:	2201      	movs	r2, #1
 800c3ee:	f44f 7180 	mov.w	r1, #256	; 0x100
 800c3f2:	482e      	ldr	r0, [pc, #184]	; (800c4ac <HAL_TIM_PeriodElapsedCallback+0xc8c>)
 800c3f4:	f7f5 ff86 	bl	8002304 <HAL_GPIO_WritePin>
				for(delay=0; delay<sensor_wait; delay++);
 800c3f8:	2300      	movs	r3, #0
 800c3fa:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800c3fc:	e002      	b.n	800c404 <HAL_TIM_PeriodElapsedCallback+0xbe4>
 800c3fe:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800c400:	3301      	adds	r3, #1
 800c402:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800c404:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800c406:	f640 12c3 	movw	r2, #2499	; 0x9c3
 800c40a:	4293      	cmp	r3, r2
 800c40c:	d9f7      	bls.n	800c3fe <HAL_TIM_PeriodElapsedCallback+0xbde>
				ad_r = get_adc_value(&hadc1, ADC_CHANNEL_1);			//R
 800c40e:	2101      	movs	r1, #1
 800c410:	4824      	ldr	r0, [pc, #144]	; (800c4a4 <HAL_TIM_PeriodElapsedCallback+0xc84>)
 800c412:	f001 fa19 	bl	800d848 <get_adc_value>
 800c416:	4603      	mov	r3, r0
 800c418:	461a      	mov	r2, r3
 800c41a:	4b25      	ldr	r3, [pc, #148]	; (800c4b0 <HAL_TIM_PeriodElapsedCallback+0xc90>)
 800c41c:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 800c41e:	2200      	movs	r2, #0
 800c420:	f44f 7180 	mov.w	r1, #256	; 0x100
 800c424:	4821      	ldr	r0, [pc, #132]	; (800c4ac <HAL_TIM_PeriodElapsedCallback+0xc8c>)
 800c426:	f7f5 ff6d 	bl	8002304 <HAL_GPIO_WritePin>
			break;
 800c42a:	e29a      	b.n	800c962 <HAL_TIM_PeriodElapsedCallback+0x1142>

		  case 1:
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_SET); 	//FL
 800c42c:	2201      	movs	r2, #1
 800c42e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800c432:	481b      	ldr	r0, [pc, #108]	; (800c4a0 <HAL_TIM_PeriodElapsedCallback+0xc80>)
 800c434:	f7f5 ff66 	bl	8002304 <HAL_GPIO_WritePin>
				for(delay=0; delay<sensor_wait; delay++);
 800c438:	2300      	movs	r3, #0
 800c43a:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800c43c:	e03d      	b.n	800c4ba <HAL_TIM_PeriodElapsedCallback+0xc9a>
 800c43e:	bf00      	nop
 800c440:	d2f1a9fc 	.word	0xd2f1a9fc
 800c444:	3f50624d 	.word	0x3f50624d
 800c448:	54442d18 	.word	0x54442d18
 800c44c:	400921fb 	.word	0x400921fb
 800c450:	42c80000 	.word	0x42c80000
 800c454:	20000780 	.word	0x20000780
 800c458:	20000f68 	.word	0x20000f68
 800c45c:	20000b58 	.word	0x20000b58
 800c460:	200001a8 	.word	0x200001a8
 800c464:	20000ae8 	.word	0x20000ae8
 800c468:	200002b8 	.word	0x200002b8
 800c46c:	20000458 	.word	0x20000458
 800c470:	20000af4 	.word	0x20000af4
 800c474:	43340000 	.word	0x43340000
 800c478:	40508000 	.word	0x40508000
 800c47c:	20000bfc 	.word	0x20000bfc
 800c480:	200001a0 	.word	0x200001a0
 800c484:	20000af0 	.word	0x20000af0
 800c488:	20000b60 	.word	0x20000b60
 800c48c:	20000ba8 	.word	0x20000ba8
 800c490:	200002bc 	.word	0x200002bc
 800c494:	20000c08 	.word	0x20000c08
 800c498:	200012a0 	.word	0x200012a0
 800c49c:	55555556 	.word	0x55555556
 800c4a0:	40020800 	.word	0x40020800
 800c4a4:	20000b00 	.word	0x20000b00
 800c4a8:	20000afc 	.word	0x20000afc
 800c4ac:	40020000 	.word	0x40020000
 800c4b0:	20000f60 	.word	0x20000f60
 800c4b4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800c4b6:	3301      	adds	r3, #1
 800c4b8:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800c4ba:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800c4bc:	f640 12c3 	movw	r2, #2499	; 0x9c3
 800c4c0:	4293      	cmp	r3, r2
 800c4c2:	d9f7      	bls.n	800c4b4 <HAL_TIM_PeriodElapsedCallback+0xc94>
				ad_fl = get_adc_value(&hadc1, ADC_CHANNEL_2);			//FL
 800c4c4:	2102      	movs	r1, #2
 800c4c6:	48b4      	ldr	r0, [pc, #720]	; (800c798 <HAL_TIM_PeriodElapsedCallback+0xf78>)
 800c4c8:	f001 f9be 	bl	800d848 <get_adc_value>
 800c4cc:	4603      	mov	r3, r0
 800c4ce:	461a      	mov	r2, r3
 800c4d0:	4bb2      	ldr	r3, [pc, #712]	; (800c79c <HAL_TIM_PeriodElapsedCallback+0xf7c>)
 800c4d2:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET);
 800c4d4:	2200      	movs	r2, #0
 800c4d6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800c4da:	48b1      	ldr	r0, [pc, #708]	; (800c7a0 <HAL_TIM_PeriodElapsedCallback+0xf80>)
 800c4dc:	f7f5 ff12 	bl	8002304 <HAL_GPIO_WritePin>

				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);   	//FR
 800c4e0:	2201      	movs	r2, #1
 800c4e2:	f44f 7100 	mov.w	r1, #512	; 0x200
 800c4e6:	48ae      	ldr	r0, [pc, #696]	; (800c7a0 <HAL_TIM_PeriodElapsedCallback+0xf80>)
 800c4e8:	f7f5 ff0c 	bl	8002304 <HAL_GPIO_WritePin>
				for(delay=0; delay<sensor_wait; delay++);
 800c4ec:	2300      	movs	r3, #0
 800c4ee:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800c4f0:	e002      	b.n	800c4f8 <HAL_TIM_PeriodElapsedCallback+0xcd8>
 800c4f2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800c4f4:	3301      	adds	r3, #1
 800c4f6:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800c4f8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800c4fa:	f640 12c3 	movw	r2, #2499	; 0x9c3
 800c4fe:	4293      	cmp	r3, r2
 800c500:	d9f7      	bls.n	800c4f2 <HAL_TIM_PeriodElapsedCallback+0xcd2>
				ad_fr = get_adc_value(&hadc1, ADC_CHANNEL_0);			//FR
 800c502:	2100      	movs	r1, #0
 800c504:	48a4      	ldr	r0, [pc, #656]	; (800c798 <HAL_TIM_PeriodElapsedCallback+0xf78>)
 800c506:	f001 f99f 	bl	800d848 <get_adc_value>
 800c50a:	4603      	mov	r3, r0
 800c50c:	461a      	mov	r2, r3
 800c50e:	4ba5      	ldr	r3, [pc, #660]	; (800c7a4 <HAL_TIM_PeriodElapsedCallback+0xf84>)
 800c510:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 800c512:	2200      	movs	r2, #0
 800c514:	f44f 7100 	mov.w	r1, #512	; 0x200
 800c518:	48a1      	ldr	r0, [pc, #644]	; (800c7a0 <HAL_TIM_PeriodElapsedCallback+0xf80>)
 800c51a:	f7f5 fef3 	bl	8002304 <HAL_GPIO_WritePin>
			break;
 800c51e:	e220      	b.n	800c962 <HAL_TIM_PeriodElapsedCallback+0x1142>

		  case 2:
				//
				if(MF.FLAG.WCTRL){
 800c520:	4ba1      	ldr	r3, [pc, #644]	; (800c7a8 <HAL_TIM_PeriodElapsedCallback+0xf88>)
 800c522:	881b      	ldrh	r3, [r3, #0]
 800c524:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800c528:	b2db      	uxtb	r3, r3
 800c52a:	2b00      	cmp	r3, #0
 800c52c:	f000 81c5 	beq.w	800c8ba <HAL_TIM_PeriodElapsedCallback+0x109a>
					if(!MF2.FLAG.V){
 800c530:	4b9e      	ldr	r3, [pc, #632]	; (800c7ac <HAL_TIM_PeriodElapsedCallback+0xf8c>)
 800c532:	881b      	ldrh	r3, [r3, #0]
 800c534:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800c538:	b2db      	uxtb	r3, r3
 800c53a:	2b00      	cmp	r3, #0
 800c53c:	f040 80bb 	bne.w	800c6b6 <HAL_TIM_PeriodElapsedCallback+0xe96>
						int16_t dwl_tmp = 0, dwr_tmp = 0;
 800c540:	2300      	movs	r3, #0
 800c542:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800c544:	2300      	movs	r3, #0
 800c546:	857b      	strh	r3, [r7, #42]	; 0x2a
						dif_l = (int32_t) ad_l - base_l;
 800c548:	4b99      	ldr	r3, [pc, #612]	; (800c7b0 <HAL_TIM_PeriodElapsedCallback+0xf90>)
 800c54a:	681b      	ldr	r3, [r3, #0]
 800c54c:	b29a      	uxth	r2, r3
 800c54e:	4b99      	ldr	r3, [pc, #612]	; (800c7b4 <HAL_TIM_PeriodElapsedCallback+0xf94>)
 800c550:	881b      	ldrh	r3, [r3, #0]
 800c552:	1ad3      	subs	r3, r2, r3
 800c554:	b29b      	uxth	r3, r3
 800c556:	b21a      	sxth	r2, r3
 800c558:	4b97      	ldr	r3, [pc, #604]	; (800c7b8 <HAL_TIM_PeriodElapsedCallback+0xf98>)
 800c55a:	801a      	strh	r2, [r3, #0]
						dif_r = (int32_t) ad_r - base_r;
 800c55c:	4b97      	ldr	r3, [pc, #604]	; (800c7bc <HAL_TIM_PeriodElapsedCallback+0xf9c>)
 800c55e:	681b      	ldr	r3, [r3, #0]
 800c560:	b29a      	uxth	r2, r3
 800c562:	4b97      	ldr	r3, [pc, #604]	; (800c7c0 <HAL_TIM_PeriodElapsedCallback+0xfa0>)
 800c564:	881b      	ldrh	r3, [r3, #0]
 800c566:	1ad3      	subs	r3, r2, r3
 800c568:	b29b      	uxth	r3, r3
 800c56a:	b21a      	sxth	r2, r3
 800c56c:	4b95      	ldr	r3, [pc, #596]	; (800c7c4 <HAL_TIM_PeriodElapsedCallback+0xfa4>)
 800c56e:	801a      	strh	r2, [r3, #0]

						if(dif_l > CTRL_BASE_L || dif_r > CTRL_BASE_R){
 800c570:	4b91      	ldr	r3, [pc, #580]	; (800c7b8 <HAL_TIM_PeriodElapsedCallback+0xf98>)
 800c572:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c576:	2b23      	cmp	r3, #35	; 0x23
 800c578:	dc04      	bgt.n	800c584 <HAL_TIM_PeriodElapsedCallback+0xd64>
 800c57a:	4b92      	ldr	r3, [pc, #584]	; (800c7c4 <HAL_TIM_PeriodElapsedCallback+0xfa4>)
 800c57c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c580:	2b1e      	cmp	r3, #30
 800c582:	dd70      	ble.n	800c666 <HAL_TIM_PeriodElapsedCallback+0xe46>
							if(dif_l > CTRL_BASE_L){
 800c584:	4b8c      	ldr	r3, [pc, #560]	; (800c7b8 <HAL_TIM_PeriodElapsedCallback+0xf98>)
 800c586:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c58a:	2b23      	cmp	r3, #35	; 0x23
 800c58c:	dd30      	ble.n	800c5f0 <HAL_TIM_PeriodElapsedCallback+0xdd0>
								dwl_tmp += CTRL_CONT_W * dif_l;					//a比例制御値を決定
 800c58e:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 800c592:	ee07 3a90 	vmov	s15, r3
 800c596:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800c59a:	4b87      	ldr	r3, [pc, #540]	; (800c7b8 <HAL_TIM_PeriodElapsedCallback+0xf98>)
 800c59c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c5a0:	ee07 3a90 	vmov	s15, r3
 800c5a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c5a8:	eef6 6a08 	vmov.f32	s13, #104	; 0x3f400000  0.750
 800c5ac:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800c5b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c5b4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c5b8:	ee17 3a90 	vmov	r3, s15
 800c5bc:	85bb      	strh	r3, [r7, #44]	; 0x2c
								dwr_tmp += -1 * CTRL_CONT_W * dif_l;			//a比例制御値を決定
 800c5be:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800c5c2:	ee07 3a90 	vmov	s15, r3
 800c5c6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800c5ca:	4b7b      	ldr	r3, [pc, #492]	; (800c7b8 <HAL_TIM_PeriodElapsedCallback+0xf98>)
 800c5cc:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c5d0:	ee07 3a90 	vmov	s15, r3
 800c5d4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c5d8:	eefe 6a08 	vmov.f32	s13, #232	; 0xbf400000 -0.750
 800c5dc:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800c5e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c5e4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c5e8:	ee17 3a90 	vmov	r3, s15
 800c5ec:	857b      	strh	r3, [r7, #42]	; 0x2a
 800c5ee:	e034      	b.n	800c65a <HAL_TIM_PeriodElapsedCallback+0xe3a>
							}
							else if(dif_r > CTRL_BASE_R){
 800c5f0:	4b74      	ldr	r3, [pc, #464]	; (800c7c4 <HAL_TIM_PeriodElapsedCallback+0xfa4>)
 800c5f2:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c5f6:	2b1e      	cmp	r3, #30
 800c5f8:	dd2f      	ble.n	800c65a <HAL_TIM_PeriodElapsedCallback+0xe3a>
								dwl_tmp += -1 * CTRL_CONT_W * dif_r;			//a比例制御値を決定
 800c5fa:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 800c5fe:	ee07 3a90 	vmov	s15, r3
 800c602:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800c606:	4b6f      	ldr	r3, [pc, #444]	; (800c7c4 <HAL_TIM_PeriodElapsedCallback+0xfa4>)
 800c608:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c60c:	ee07 3a90 	vmov	s15, r3
 800c610:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c614:	eefe 6a08 	vmov.f32	s13, #232	; 0xbf400000 -0.750
 800c618:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800c61c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c620:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c624:	ee17 3a90 	vmov	r3, s15
 800c628:	85bb      	strh	r3, [r7, #44]	; 0x2c
								dwr_tmp += CTRL_CONT_W * dif_r;					//a比例制御値を決定
 800c62a:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800c62e:	ee07 3a90 	vmov	s15, r3
 800c632:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800c636:	4b63      	ldr	r3, [pc, #396]	; (800c7c4 <HAL_TIM_PeriodElapsedCallback+0xfa4>)
 800c638:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c63c:	ee07 3a90 	vmov	s15, r3
 800c640:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c644:	eef6 6a08 	vmov.f32	s13, #104	; 0x3f400000  0.750
 800c648:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800c64c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c650:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c654:	ee17 3a90 	vmov	r3, s15
 800c658:	857b      	strh	r3, [r7, #42]	; 0x2a
							}
							MF2.FLAG.WG = 1;
 800c65a:	4a54      	ldr	r2, [pc, #336]	; (800c7ac <HAL_TIM_PeriodElapsedCallback+0xf8c>)
 800c65c:	8813      	ldrh	r3, [r2, #0]
 800c65e:	f043 0310 	orr.w	r3, r3, #16
 800c662:	8013      	strh	r3, [r2, #0]
 800c664:	e004      	b.n	800c670 <HAL_TIM_PeriodElapsedCallback+0xe50>
						}else{
							MF2.FLAG.WG = 0;
 800c666:	4a51      	ldr	r2, [pc, #324]	; (800c7ac <HAL_TIM_PeriodElapsedCallback+0xf8c>)
 800c668:	8813      	ldrh	r3, [r2, #0]
 800c66a:	f36f 1304 	bfc	r3, #4, #1
 800c66e:	8013      	strh	r3, [r2, #0]
						}
						dwl = max(min(CTRL_MAX_W, dwl_tmp), -1 * CTRL_MAX_W);
 800c670:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 800c674:	f513 7f7a 	cmn.w	r3, #1000	; 0x3e8
 800c678:	dd08      	ble.n	800c68c <HAL_TIM_PeriodElapsedCallback+0xe6c>
 800c67a:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 800c67e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c682:	bfa8      	it	ge
 800c684:	f44f 737a 	movge.w	r3, #1000	; 0x3e8
 800c688:	b21b      	sxth	r3, r3
 800c68a:	e000      	b.n	800c68e <HAL_TIM_PeriodElapsedCallback+0xe6e>
 800c68c:	4b4e      	ldr	r3, [pc, #312]	; (800c7c8 <HAL_TIM_PeriodElapsedCallback+0xfa8>)
 800c68e:	4a4f      	ldr	r2, [pc, #316]	; (800c7cc <HAL_TIM_PeriodElapsedCallback+0xfac>)
 800c690:	8013      	strh	r3, [r2, #0]
						dwr = max(min(CTRL_MAX_W, dwr_tmp), -1 * CTRL_MAX_W);
 800c692:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800c696:	f513 7f7a 	cmn.w	r3, #1000	; 0x3e8
 800c69a:	dd08      	ble.n	800c6ae <HAL_TIM_PeriodElapsedCallback+0xe8e>
 800c69c:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800c6a0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c6a4:	bfa8      	it	ge
 800c6a6:	f44f 737a 	movge.w	r3, #1000	; 0x3e8
 800c6aa:	b21b      	sxth	r3, r3
 800c6ac:	e000      	b.n	800c6b0 <HAL_TIM_PeriodElapsedCallback+0xe90>
 800c6ae:	4b46      	ldr	r3, [pc, #280]	; (800c7c8 <HAL_TIM_PeriodElapsedCallback+0xfa8>)
 800c6b0:	4a47      	ldr	r2, [pc, #284]	; (800c7d0 <HAL_TIM_PeriodElapsedCallback+0xfb0>)
 800c6b2:	8013      	strh	r3, [r2, #0]
 800c6b4:	e108      	b.n	800c8c8 <HAL_TIM_PeriodElapsedCallback+0x10a8>
					}else{
						int16_t dwl_tmp = 0, dwr_tmp = 0;
 800c6b6:	2300      	movs	r3, #0
 800c6b8:	853b      	strh	r3, [r7, #40]	; 0x28
 800c6ba:	2300      	movs	r3, #0
 800c6bc:	84fb      	strh	r3, [r7, #38]	; 0x26
						dif_l = (int32_t) ad_fl - BASE_FL;
 800c6be:	4b37      	ldr	r3, [pc, #220]	; (800c79c <HAL_TIM_PeriodElapsedCallback+0xf7c>)
 800c6c0:	681b      	ldr	r3, [r3, #0]
 800c6c2:	b29b      	uxth	r3, r3
 800c6c4:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800c6c8:	b29b      	uxth	r3, r3
 800c6ca:	b21a      	sxth	r2, r3
 800c6cc:	4b3a      	ldr	r3, [pc, #232]	; (800c7b8 <HAL_TIM_PeriodElapsedCallback+0xf98>)
 800c6ce:	801a      	strh	r2, [r3, #0]
						dif_r = (int32_t) ad_fr - BASE_FR;
 800c6d0:	4b34      	ldr	r3, [pc, #208]	; (800c7a4 <HAL_TIM_PeriodElapsedCallback+0xf84>)
 800c6d2:	681b      	ldr	r3, [r3, #0]
 800c6d4:	b29b      	uxth	r3, r3
 800c6d6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800c6da:	b29b      	uxth	r3, r3
 800c6dc:	b21a      	sxth	r2, r3
 800c6de:	4b39      	ldr	r3, [pc, #228]	; (800c7c4 <HAL_TIM_PeriodElapsedCallback+0xfa4>)
 800c6e0:	801a      	strh	r2, [r3, #0]

						if(dif_l > CTRL_BASE_FL || dif_r > CTRL_BASE_FR){
 800c6e2:	4b35      	ldr	r3, [pc, #212]	; (800c7b8 <HAL_TIM_PeriodElapsedCallback+0xf98>)
 800c6e4:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c6e8:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 800c6ec:	dc05      	bgt.n	800c6fa <HAL_TIM_PeriodElapsedCallback+0xeda>
 800c6ee:	4b35      	ldr	r3, [pc, #212]	; (800c7c4 <HAL_TIM_PeriodElapsedCallback+0xfa4>)
 800c6f0:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c6f4:	2bc8      	cmp	r3, #200	; 0xc8
 800c6f6:	f340 80b8 	ble.w	800c86a <HAL_TIM_PeriodElapsedCallback+0x104a>
							if(dif_l > CTRL_BASE_FL){
 800c6fa:	4b2f      	ldr	r3, [pc, #188]	; (800c7b8 <HAL_TIM_PeriodElapsedCallback+0xf98>)
 800c6fc:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c700:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 800c704:	dd66      	ble.n	800c7d4 <HAL_TIM_PeriodElapsedCallback+0xfb4>
								dwl_tmp += CTRL_CONT_W * 0.1 * dif_l;				//a比例制御値を決定
 800c706:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 800c70a:	4618      	mov	r0, r3
 800c70c:	f7f3 ff02 	bl	8000514 <__aeabi_i2d>
 800c710:	4604      	mov	r4, r0
 800c712:	460d      	mov	r5, r1
 800c714:	4b28      	ldr	r3, [pc, #160]	; (800c7b8 <HAL_TIM_PeriodElapsedCallback+0xf98>)
 800c716:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c71a:	4618      	mov	r0, r3
 800c71c:	f7f3 fefa 	bl	8000514 <__aeabi_i2d>
 800c720:	a319      	add	r3, pc, #100	; (adr r3, 800c788 <HAL_TIM_PeriodElapsedCallback+0xf68>)
 800c722:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c726:	f7f3 ff5f 	bl	80005e8 <__aeabi_dmul>
 800c72a:	4602      	mov	r2, r0
 800c72c:	460b      	mov	r3, r1
 800c72e:	4620      	mov	r0, r4
 800c730:	4629      	mov	r1, r5
 800c732:	f7f3 fda3 	bl	800027c <__adddf3>
 800c736:	4603      	mov	r3, r0
 800c738:	460c      	mov	r4, r1
 800c73a:	4618      	mov	r0, r3
 800c73c:	4621      	mov	r1, r4
 800c73e:	f7f4 fa03 	bl	8000b48 <__aeabi_d2iz>
 800c742:	4603      	mov	r3, r0
 800c744:	853b      	strh	r3, [r7, #40]	; 0x28
								dwr_tmp += -1 * CTRL_CONT_W * 0.1 * dif_l;			//a比例制御値を決定
 800c746:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800c74a:	4618      	mov	r0, r3
 800c74c:	f7f3 fee2 	bl	8000514 <__aeabi_i2d>
 800c750:	4604      	mov	r4, r0
 800c752:	460d      	mov	r5, r1
 800c754:	4b18      	ldr	r3, [pc, #96]	; (800c7b8 <HAL_TIM_PeriodElapsedCallback+0xf98>)
 800c756:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c75a:	4618      	mov	r0, r3
 800c75c:	f7f3 feda 	bl	8000514 <__aeabi_i2d>
 800c760:	a30b      	add	r3, pc, #44	; (adr r3, 800c790 <HAL_TIM_PeriodElapsedCallback+0xf70>)
 800c762:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c766:	f7f3 ff3f 	bl	80005e8 <__aeabi_dmul>
 800c76a:	4602      	mov	r2, r0
 800c76c:	460b      	mov	r3, r1
 800c76e:	4620      	mov	r0, r4
 800c770:	4629      	mov	r1, r5
 800c772:	f7f3 fd83 	bl	800027c <__adddf3>
 800c776:	4603      	mov	r3, r0
 800c778:	460c      	mov	r4, r1
 800c77a:	4618      	mov	r0, r3
 800c77c:	4621      	mov	r1, r4
 800c77e:	f7f4 f9e3 	bl	8000b48 <__aeabi_d2iz>
 800c782:	4603      	mov	r3, r0
 800c784:	84fb      	strh	r3, [r7, #38]	; 0x26
 800c786:	e06a      	b.n	800c85e <HAL_TIM_PeriodElapsedCallback+0x103e>
 800c788:	33333334 	.word	0x33333334
 800c78c:	3fb33333 	.word	0x3fb33333
 800c790:	33333334 	.word	0x33333334
 800c794:	bfb33333 	.word	0xbfb33333
 800c798:	20000b00 	.word	0x20000b00
 800c79c:	20000d54 	.word	0x20000d54
 800c7a0:	40020800 	.word	0x40020800
 800c7a4:	20000c00 	.word	0x20000c00
 800c7a8:	20000f68 	.word	0x20000f68
 800c7ac:	20000f64 	.word	0x20000f64
 800c7b0:	20000afc 	.word	0x20000afc
 800c7b4:	2000034c 	.word	0x2000034c
 800c7b8:	20000b50 	.word	0x20000b50
 800c7bc:	20000f60 	.word	0x20000f60
 800c7c0:	200002c0 	.word	0x200002c0
 800c7c4:	20000bb2 	.word	0x20000bb2
 800c7c8:	fffffc18 	.word	0xfffffc18
 800c7cc:	20000af8 	.word	0x20000af8
 800c7d0:	20000f74 	.word	0x20000f74
							}
							else if(dif_r > CTRL_BASE_FR){
 800c7d4:	4bb8      	ldr	r3, [pc, #736]	; (800cab8 <HAL_TIM_PeriodElapsedCallback+0x1298>)
 800c7d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c7da:	2bc8      	cmp	r3, #200	; 0xc8
 800c7dc:	dd3f      	ble.n	800c85e <HAL_TIM_PeriodElapsedCallback+0x103e>
								dwl_tmp += -1 * CTRL_CONT_W * 0.2 * dif_r;			//a比例制御値を決定
 800c7de:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 800c7e2:	4618      	mov	r0, r3
 800c7e4:	f7f3 fe96 	bl	8000514 <__aeabi_i2d>
 800c7e8:	4604      	mov	r4, r0
 800c7ea:	460d      	mov	r5, r1
 800c7ec:	4bb2      	ldr	r3, [pc, #712]	; (800cab8 <HAL_TIM_PeriodElapsedCallback+0x1298>)
 800c7ee:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c7f2:	4618      	mov	r0, r3
 800c7f4:	f7f3 fe8e 	bl	8000514 <__aeabi_i2d>
 800c7f8:	a3ab      	add	r3, pc, #684	; (adr r3, 800caa8 <HAL_TIM_PeriodElapsedCallback+0x1288>)
 800c7fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7fe:	f7f3 fef3 	bl	80005e8 <__aeabi_dmul>
 800c802:	4602      	mov	r2, r0
 800c804:	460b      	mov	r3, r1
 800c806:	4620      	mov	r0, r4
 800c808:	4629      	mov	r1, r5
 800c80a:	f7f3 fd37 	bl	800027c <__adddf3>
 800c80e:	4603      	mov	r3, r0
 800c810:	460c      	mov	r4, r1
 800c812:	4618      	mov	r0, r3
 800c814:	4621      	mov	r1, r4
 800c816:	f7f4 f997 	bl	8000b48 <__aeabi_d2iz>
 800c81a:	4603      	mov	r3, r0
 800c81c:	853b      	strh	r3, [r7, #40]	; 0x28
								dwr_tmp += CTRL_CONT_W * 0.2 * dif_r;				//a比例制御値を決定
 800c81e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800c822:	4618      	mov	r0, r3
 800c824:	f7f3 fe76 	bl	8000514 <__aeabi_i2d>
 800c828:	4604      	mov	r4, r0
 800c82a:	460d      	mov	r5, r1
 800c82c:	4ba2      	ldr	r3, [pc, #648]	; (800cab8 <HAL_TIM_PeriodElapsedCallback+0x1298>)
 800c82e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c832:	4618      	mov	r0, r3
 800c834:	f7f3 fe6e 	bl	8000514 <__aeabi_i2d>
 800c838:	a39d      	add	r3, pc, #628	; (adr r3, 800cab0 <HAL_TIM_PeriodElapsedCallback+0x1290>)
 800c83a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c83e:	f7f3 fed3 	bl	80005e8 <__aeabi_dmul>
 800c842:	4602      	mov	r2, r0
 800c844:	460b      	mov	r3, r1
 800c846:	4620      	mov	r0, r4
 800c848:	4629      	mov	r1, r5
 800c84a:	f7f3 fd17 	bl	800027c <__adddf3>
 800c84e:	4603      	mov	r3, r0
 800c850:	460c      	mov	r4, r1
 800c852:	4618      	mov	r0, r3
 800c854:	4621      	mov	r1, r4
 800c856:	f7f4 f977 	bl	8000b48 <__aeabi_d2iz>
 800c85a:	4603      	mov	r3, r0
 800c85c:	84fb      	strh	r3, [r7, #38]	; 0x26
							}
							MF2.FLAG.WG = 1;
 800c85e:	4a97      	ldr	r2, [pc, #604]	; (800cabc <HAL_TIM_PeriodElapsedCallback+0x129c>)
 800c860:	8813      	ldrh	r3, [r2, #0]
 800c862:	f043 0310 	orr.w	r3, r3, #16
 800c866:	8013      	strh	r3, [r2, #0]
 800c868:	e004      	b.n	800c874 <HAL_TIM_PeriodElapsedCallback+0x1054>
						}else{
							MF2.FLAG.WG = 0;
 800c86a:	4a94      	ldr	r2, [pc, #592]	; (800cabc <HAL_TIM_PeriodElapsedCallback+0x129c>)
 800c86c:	8813      	ldrh	r3, [r2, #0]
 800c86e:	f36f 1304 	bfc	r3, #4, #1
 800c872:	8013      	strh	r3, [r2, #0]
						}
						dwl = max(min(CTRL_MAX_W, dwl_tmp), -1 * CTRL_MAX_W);
 800c874:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 800c878:	f513 7f7a 	cmn.w	r3, #1000	; 0x3e8
 800c87c:	dd08      	ble.n	800c890 <HAL_TIM_PeriodElapsedCallback+0x1070>
 800c87e:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 800c882:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c886:	bfa8      	it	ge
 800c888:	f44f 737a 	movge.w	r3, #1000	; 0x3e8
 800c88c:	b21b      	sxth	r3, r3
 800c88e:	e000      	b.n	800c892 <HAL_TIM_PeriodElapsedCallback+0x1072>
 800c890:	4b8b      	ldr	r3, [pc, #556]	; (800cac0 <HAL_TIM_PeriodElapsedCallback+0x12a0>)
 800c892:	4a8c      	ldr	r2, [pc, #560]	; (800cac4 <HAL_TIM_PeriodElapsedCallback+0x12a4>)
 800c894:	8013      	strh	r3, [r2, #0]
						dwr = max(min(CTRL_MAX_W, dwr_tmp), -1 * CTRL_MAX_W);
 800c896:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800c89a:	f513 7f7a 	cmn.w	r3, #1000	; 0x3e8
 800c89e:	dd08      	ble.n	800c8b2 <HAL_TIM_PeriodElapsedCallback+0x1092>
 800c8a0:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800c8a4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c8a8:	bfa8      	it	ge
 800c8aa:	f44f 737a 	movge.w	r3, #1000	; 0x3e8
 800c8ae:	b21b      	sxth	r3, r3
 800c8b0:	e000      	b.n	800c8b4 <HAL_TIM_PeriodElapsedCallback+0x1094>
 800c8b2:	4b83      	ldr	r3, [pc, #524]	; (800cac0 <HAL_TIM_PeriodElapsedCallback+0x12a0>)
 800c8b4:	4a84      	ldr	r2, [pc, #528]	; (800cac8 <HAL_TIM_PeriodElapsedCallback+0x12a8>)
 800c8b6:	8013      	strh	r3, [r2, #0]
 800c8b8:	e006      	b.n	800c8c8 <HAL_TIM_PeriodElapsedCallback+0x10a8>
					}
				}else{
					//a制御フラグがなければ壁制御値0
					dwl = dwr = 0;
 800c8ba:	2100      	movs	r1, #0
 800c8bc:	4b82      	ldr	r3, [pc, #520]	; (800cac8 <HAL_TIM_PeriodElapsedCallback+0x12a8>)
 800c8be:	460a      	mov	r2, r1
 800c8c0:	801a      	strh	r2, [r3, #0]
 800c8c2:	4b80      	ldr	r3, [pc, #512]	; (800cac4 <HAL_TIM_PeriodElapsedCallback+0x12a4>)
 800c8c4:	460a      	mov	r2, r1
 800c8c6:	801a      	strh	r2, [r3, #0]
				}

				if(MF.FLAG.GCTRL){
 800c8c8:	4b80      	ldr	r3, [pc, #512]	; (800cacc <HAL_TIM_PeriodElapsedCallback+0x12ac>)
 800c8ca:	881b      	ldrh	r3, [r3, #0]
 800c8cc:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800c8d0:	b2db      	uxtb	r3, r3
 800c8d2:	2b00      	cmp	r3, #0
 800c8d4:	d03d      	beq.n	800c952 <HAL_TIM_PeriodElapsedCallback+0x1132>
				}

					dg = CTRL_CONT_G * gyro_read_z();			//a角速度制御
					dg = CTRL_CONT_G * degree_z;				//a角度制御
*/
					dg = CTRL_CONT_G * (target_degree_z - degree_z);		//a角度制御(目標角度はスタートを0度とし、旋回量と対応付け)
 800c8d6:	4b7e      	ldr	r3, [pc, #504]	; (800cad0 <HAL_TIM_PeriodElapsedCallback+0x12b0>)
 800c8d8:	ed93 7a00 	vldr	s14, [r3]
 800c8dc:	4b7d      	ldr	r3, [pc, #500]	; (800cad4 <HAL_TIM_PeriodElapsedCallback+0x12b4>)
 800c8de:	edd3 7a00 	vldr	s15, [r3]
 800c8e2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c8e6:	ed9f 7a7c 	vldr	s14, [pc, #496]	; 800cad8 <HAL_TIM_PeriodElapsedCallback+0x12b8>
 800c8ea:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c8ee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c8f2:	ee17 3a90 	vmov	r3, s15
 800c8f6:	b21a      	sxth	r2, r3
 800c8f8:	4b78      	ldr	r3, [pc, #480]	; (800cadc <HAL_TIM_PeriodElapsedCallback+0x12bc>)
 800c8fa:	801a      	strh	r2, [r3, #0]

					dg = max(min(CTRL_MAX_G, dg), -1 * CTRL_MAX_G);
 800c8fc:	4b77      	ldr	r3, [pc, #476]	; (800cadc <HAL_TIM_PeriodElapsedCallback+0x12bc>)
 800c8fe:	881b      	ldrh	r3, [r3, #0]
 800c900:	b21b      	sxth	r3, r3
 800c902:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c906:	da05      	bge.n	800c914 <HAL_TIM_PeriodElapsedCallback+0x10f4>
 800c908:	4b74      	ldr	r3, [pc, #464]	; (800cadc <HAL_TIM_PeriodElapsedCallback+0x12bc>)
 800c90a:	881b      	ldrh	r3, [r3, #0]
 800c90c:	b21b      	sxth	r3, r3
 800c90e:	f513 7f7a 	cmn.w	r3, #1000	; 0x3e8
 800c912:	dd0c      	ble.n	800c92e <HAL_TIM_PeriodElapsedCallback+0x110e>
 800c914:	4b71      	ldr	r3, [pc, #452]	; (800cadc <HAL_TIM_PeriodElapsedCallback+0x12bc>)
 800c916:	881b      	ldrh	r3, [r3, #0]
 800c918:	b21b      	sxth	r3, r3
 800c91a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c91e:	da03      	bge.n	800c928 <HAL_TIM_PeriodElapsedCallback+0x1108>
 800c920:	4b6e      	ldr	r3, [pc, #440]	; (800cadc <HAL_TIM_PeriodElapsedCallback+0x12bc>)
 800c922:	881b      	ldrh	r3, [r3, #0]
 800c924:	b21b      	sxth	r3, r3
 800c926:	e003      	b.n	800c930 <HAL_TIM_PeriodElapsedCallback+0x1110>
 800c928:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800c92c:	e000      	b.n	800c930 <HAL_TIM_PeriodElapsedCallback+0x1110>
 800c92e:	4b64      	ldr	r3, [pc, #400]	; (800cac0 <HAL_TIM_PeriodElapsedCallback+0x12a0>)
 800c930:	4a6a      	ldr	r2, [pc, #424]	; (800cadc <HAL_TIM_PeriodElapsedCallback+0x12bc>)
 800c932:	8013      	strh	r3, [r2, #0]
					dgl = -1*dg;
 800c934:	4b69      	ldr	r3, [pc, #420]	; (800cadc <HAL_TIM_PeriodElapsedCallback+0x12bc>)
 800c936:	881b      	ldrh	r3, [r3, #0]
 800c938:	b21b      	sxth	r3, r3
 800c93a:	b29b      	uxth	r3, r3
 800c93c:	425b      	negs	r3, r3
 800c93e:	b29b      	uxth	r3, r3
 800c940:	b21a      	sxth	r2, r3
 800c942:	4b67      	ldr	r3, [pc, #412]	; (800cae0 <HAL_TIM_PeriodElapsedCallback+0x12c0>)
 800c944:	801a      	strh	r2, [r3, #0]
					dgr = dg;
 800c946:	4b65      	ldr	r3, [pc, #404]	; (800cadc <HAL_TIM_PeriodElapsedCallback+0x12bc>)
 800c948:	881b      	ldrh	r3, [r3, #0]
 800c94a:	b21a      	sxth	r2, r3
 800c94c:	4b65      	ldr	r3, [pc, #404]	; (800cae4 <HAL_TIM_PeriodElapsedCallback+0x12c4>)
 800c94e:	801a      	strh	r2, [r3, #0]
				}else{
					//a制御フラグがなければ壁制御値0
					dgl = dgr = 0;
				}
				break;
 800c950:	e006      	b.n	800c960 <HAL_TIM_PeriodElapsedCallback+0x1140>
					dgl = dgr = 0;
 800c952:	2100      	movs	r1, #0
 800c954:	4b63      	ldr	r3, [pc, #396]	; (800cae4 <HAL_TIM_PeriodElapsedCallback+0x12c4>)
 800c956:	460a      	mov	r2, r1
 800c958:	801a      	strh	r2, [r3, #0]
 800c95a:	4b61      	ldr	r3, [pc, #388]	; (800cae0 <HAL_TIM_PeriodElapsedCallback+0x12c0>)
 800c95c:	460a      	mov	r2, r1
 800c95e:	801a      	strh	r2, [r3, #0]
				break;
 800c960:	bf00      	nop
		}


		if(MF.FLAG.DRV){
 800c962:	4b5a      	ldr	r3, [pc, #360]	; (800cacc <HAL_TIM_PeriodElapsedCallback+0x12ac>)
 800c964:	881b      	ldrh	r3, [r3, #0]
 800c966:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800c96a:	b2db      	uxtb	r3, r3
 800c96c:	2b00      	cmp	r3, #0
 800c96e:	f000 81b2 	beq.w	800ccd6 <HAL_TIM_PeriodElapsedCallback+0x14b6>
			if(!MF2.FLAG.WG){
 800c972:	4b52      	ldr	r3, [pc, #328]	; (800cabc <HAL_TIM_PeriodElapsedCallback+0x129c>)
 800c974:	881b      	ldrh	r3, [r3, #0]
 800c976:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800c97a:	b2db      	uxtb	r3, r3
 800c97c:	2b00      	cmp	r3, #0
 800c97e:	d130      	bne.n	800c9e2 <HAL_TIM_PeriodElapsedCallback+0x11c2>
				pulse_l = pulse_l + dgl + dwl;
 800c980:	4b57      	ldr	r3, [pc, #348]	; (800cae0 <HAL_TIM_PeriodElapsedCallback+0x12c0>)
 800c982:	881b      	ldrh	r3, [r3, #0]
 800c984:	b21b      	sxth	r3, r3
 800c986:	ee07 3a90 	vmov	s15, r3
 800c98a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800c98e:	4b56      	ldr	r3, [pc, #344]	; (800cae8 <HAL_TIM_PeriodElapsedCallback+0x12c8>)
 800c990:	edd3 7a00 	vldr	s15, [r3]
 800c994:	ee37 7a27 	vadd.f32	s14, s14, s15
 800c998:	4b4a      	ldr	r3, [pc, #296]	; (800cac4 <HAL_TIM_PeriodElapsedCallback+0x12a4>)
 800c99a:	881b      	ldrh	r3, [r3, #0]
 800c99c:	b21b      	sxth	r3, r3
 800c99e:	ee07 3a90 	vmov	s15, r3
 800c9a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c9a6:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c9aa:	4b4f      	ldr	r3, [pc, #316]	; (800cae8 <HAL_TIM_PeriodElapsedCallback+0x12c8>)
 800c9ac:	edc3 7a00 	vstr	s15, [r3]
				pulse_r = pulse_r + dgr + dwr;
 800c9b0:	4b4c      	ldr	r3, [pc, #304]	; (800cae4 <HAL_TIM_PeriodElapsedCallback+0x12c4>)
 800c9b2:	881b      	ldrh	r3, [r3, #0]
 800c9b4:	b21b      	sxth	r3, r3
 800c9b6:	ee07 3a90 	vmov	s15, r3
 800c9ba:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800c9be:	4b4b      	ldr	r3, [pc, #300]	; (800caec <HAL_TIM_PeriodElapsedCallback+0x12cc>)
 800c9c0:	edd3 7a00 	vldr	s15, [r3]
 800c9c4:	ee37 7a27 	vadd.f32	s14, s14, s15
 800c9c8:	4b3f      	ldr	r3, [pc, #252]	; (800cac8 <HAL_TIM_PeriodElapsedCallback+0x12a8>)
 800c9ca:	881b      	ldrh	r3, [r3, #0]
 800c9cc:	b21b      	sxth	r3, r3
 800c9ce:	ee07 3a90 	vmov	s15, r3
 800c9d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c9d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c9da:	4b44      	ldr	r3, [pc, #272]	; (800caec <HAL_TIM_PeriodElapsedCallback+0x12cc>)
 800c9dc:	edc3 7a00 	vstr	s15, [r3]
 800c9e0:	e02f      	b.n	800ca42 <HAL_TIM_PeriodElapsedCallback+0x1222>
//				pulse_l = pulse_l + dgl;
//				pulse_r = pulse_r + dgr;
			}else{
				pulse_l = pulse_l + dgl + dwl;
 800c9e2:	4b3f      	ldr	r3, [pc, #252]	; (800cae0 <HAL_TIM_PeriodElapsedCallback+0x12c0>)
 800c9e4:	881b      	ldrh	r3, [r3, #0]
 800c9e6:	b21b      	sxth	r3, r3
 800c9e8:	ee07 3a90 	vmov	s15, r3
 800c9ec:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800c9f0:	4b3d      	ldr	r3, [pc, #244]	; (800cae8 <HAL_TIM_PeriodElapsedCallback+0x12c8>)
 800c9f2:	edd3 7a00 	vldr	s15, [r3]
 800c9f6:	ee37 7a27 	vadd.f32	s14, s14, s15
 800c9fa:	4b32      	ldr	r3, [pc, #200]	; (800cac4 <HAL_TIM_PeriodElapsedCallback+0x12a4>)
 800c9fc:	881b      	ldrh	r3, [r3, #0]
 800c9fe:	b21b      	sxth	r3, r3
 800ca00:	ee07 3a90 	vmov	s15, r3
 800ca04:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ca08:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ca0c:	4b36      	ldr	r3, [pc, #216]	; (800cae8 <HAL_TIM_PeriodElapsedCallback+0x12c8>)
 800ca0e:	edc3 7a00 	vstr	s15, [r3]
				pulse_r = pulse_r + dgr + dwr;
 800ca12:	4b34      	ldr	r3, [pc, #208]	; (800cae4 <HAL_TIM_PeriodElapsedCallback+0x12c4>)
 800ca14:	881b      	ldrh	r3, [r3, #0]
 800ca16:	b21b      	sxth	r3, r3
 800ca18:	ee07 3a90 	vmov	s15, r3
 800ca1c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800ca20:	4b32      	ldr	r3, [pc, #200]	; (800caec <HAL_TIM_PeriodElapsedCallback+0x12cc>)
 800ca22:	edd3 7a00 	vldr	s15, [r3]
 800ca26:	ee37 7a27 	vadd.f32	s14, s14, s15
 800ca2a:	4b27      	ldr	r3, [pc, #156]	; (800cac8 <HAL_TIM_PeriodElapsedCallback+0x12a8>)
 800ca2c:	881b      	ldrh	r3, [r3, #0]
 800ca2e:	b21b      	sxth	r3, r3
 800ca30:	ee07 3a90 	vmov	s15, r3
 800ca34:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ca38:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ca3c:	4b2b      	ldr	r3, [pc, #172]	; (800caec <HAL_TIM_PeriodElapsedCallback+0x12cc>)
 800ca3e:	edc3 7a00 	vstr	s15, [r3]
//				pulse_l = pulse_l + dwl;
//				pulse_r = pulse_r + dwr;
			}
			pulse_l = min(max(pulse_l, -1000), 1000);
 800ca42:	4b29      	ldr	r3, [pc, #164]	; (800cae8 <HAL_TIM_PeriodElapsedCallback+0x12c8>)
 800ca44:	edd3 7a00 	vldr	s15, [r3]
 800ca48:	ed9f 7a29 	vldr	s14, [pc, #164]	; 800caf0 <HAL_TIM_PeriodElapsedCallback+0x12d0>
 800ca4c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ca50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ca54:	bfcc      	ite	gt
 800ca56:	2301      	movgt	r3, #1
 800ca58:	2300      	movle	r3, #0
 800ca5a:	b2db      	uxtb	r3, r3
 800ca5c:	f083 0301 	eor.w	r3, r3, #1
 800ca60:	b2db      	uxtb	r3, r3
 800ca62:	2b00      	cmp	r3, #0
 800ca64:	d111      	bne.n	800ca8a <HAL_TIM_PeriodElapsedCallback+0x126a>
 800ca66:	4b20      	ldr	r3, [pc, #128]	; (800cae8 <HAL_TIM_PeriodElapsedCallback+0x12c8>)
 800ca68:	edd3 7a00 	vldr	s15, [r3]
 800ca6c:	ed9f 7a21 	vldr	s14, [pc, #132]	; 800caf4 <HAL_TIM_PeriodElapsedCallback+0x12d4>
 800ca70:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ca74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ca78:	bfcc      	ite	gt
 800ca7a:	2301      	movgt	r3, #1
 800ca7c:	2300      	movle	r3, #0
 800ca7e:	b2db      	uxtb	r3, r3
 800ca80:	f083 0301 	eor.w	r3, r3, #1
 800ca84:	b2db      	uxtb	r3, r3
 800ca86:	2b00      	cmp	r3, #0
 800ca88:	d038      	beq.n	800cafc <HAL_TIM_PeriodElapsedCallback+0x12dc>
 800ca8a:	4b17      	ldr	r3, [pc, #92]	; (800cae8 <HAL_TIM_PeriodElapsedCallback+0x12c8>)
 800ca8c:	edd3 7a00 	vldr	s15, [r3]
 800ca90:	ed9f 7a17 	vldr	s14, [pc, #92]	; 800caf0 <HAL_TIM_PeriodElapsedCallback+0x12d0>
 800ca94:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ca98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ca9c:	dd2c      	ble.n	800caf8 <HAL_TIM_PeriodElapsedCallback+0x12d8>
 800ca9e:	4b12      	ldr	r3, [pc, #72]	; (800cae8 <HAL_TIM_PeriodElapsedCallback+0x12c8>)
 800caa0:	681b      	ldr	r3, [r3, #0]
 800caa2:	e02c      	b.n	800cafe <HAL_TIM_PeriodElapsedCallback+0x12de>
 800caa4:	f3af 8000 	nop.w
 800caa8:	33333334 	.word	0x33333334
 800caac:	bfc33333 	.word	0xbfc33333
 800cab0:	33333334 	.word	0x33333334
 800cab4:	3fc33333 	.word	0x3fc33333
 800cab8:	20000bb2 	.word	0x20000bb2
 800cabc:	20000f64 	.word	0x20000f64
 800cac0:	fffffc18 	.word	0xfffffc18
 800cac4:	20000af8 	.word	0x20000af8
 800cac8:	20000f74 	.word	0x20000f74
 800cacc:	20000f68 	.word	0x20000f68
 800cad0:	20000bf8 	.word	0x20000bf8
 800cad4:	20000b5c 	.word	0x20000b5c
 800cad8:	42200000 	.word	0x42200000
 800cadc:	20000c10 	.word	0x20000c10
 800cae0:	2000019c 	.word	0x2000019c
 800cae4:	20000b4e 	.word	0x20000b4e
 800cae8:	20000ba8 	.word	0x20000ba8
 800caec:	20000780 	.word	0x20000780
 800caf0:	c47a0000 	.word	0xc47a0000
 800caf4:	447a0000 	.word	0x447a0000
 800caf8:	4bb7      	ldr	r3, [pc, #732]	; (800cdd8 <HAL_TIM_PeriodElapsedCallback+0x15b8>)
 800cafa:	e000      	b.n	800cafe <HAL_TIM_PeriodElapsedCallback+0x12de>
 800cafc:	4bb7      	ldr	r3, [pc, #732]	; (800cddc <HAL_TIM_PeriodElapsedCallback+0x15bc>)
 800cafe:	4ab8      	ldr	r2, [pc, #736]	; (800cde0 <HAL_TIM_PeriodElapsedCallback+0x15c0>)
 800cb00:	6013      	str	r3, [r2, #0]
			pulse_r = min(max(pulse_r, -1000), 1000);
 800cb02:	4bb8      	ldr	r3, [pc, #736]	; (800cde4 <HAL_TIM_PeriodElapsedCallback+0x15c4>)
 800cb04:	edd3 7a00 	vldr	s15, [r3]
 800cb08:	ed9f 7ab7 	vldr	s14, [pc, #732]	; 800cde8 <HAL_TIM_PeriodElapsedCallback+0x15c8>
 800cb0c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800cb10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cb14:	bfcc      	ite	gt
 800cb16:	2301      	movgt	r3, #1
 800cb18:	2300      	movle	r3, #0
 800cb1a:	b2db      	uxtb	r3, r3
 800cb1c:	f083 0301 	eor.w	r3, r3, #1
 800cb20:	b2db      	uxtb	r3, r3
 800cb22:	2b00      	cmp	r3, #0
 800cb24:	d111      	bne.n	800cb4a <HAL_TIM_PeriodElapsedCallback+0x132a>
 800cb26:	4baf      	ldr	r3, [pc, #700]	; (800cde4 <HAL_TIM_PeriodElapsedCallback+0x15c4>)
 800cb28:	edd3 7a00 	vldr	s15, [r3]
 800cb2c:	ed9f 7aaf 	vldr	s14, [pc, #700]	; 800cdec <HAL_TIM_PeriodElapsedCallback+0x15cc>
 800cb30:	eef4 7ac7 	vcmpe.f32	s15, s14
 800cb34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cb38:	bfcc      	ite	gt
 800cb3a:	2301      	movgt	r3, #1
 800cb3c:	2300      	movle	r3, #0
 800cb3e:	b2db      	uxtb	r3, r3
 800cb40:	f083 0301 	eor.w	r3, r3, #1
 800cb44:	b2db      	uxtb	r3, r3
 800cb46:	2b00      	cmp	r3, #0
 800cb48:	d00e      	beq.n	800cb68 <HAL_TIM_PeriodElapsedCallback+0x1348>
 800cb4a:	4ba6      	ldr	r3, [pc, #664]	; (800cde4 <HAL_TIM_PeriodElapsedCallback+0x15c4>)
 800cb4c:	edd3 7a00 	vldr	s15, [r3]
 800cb50:	ed9f 7aa5 	vldr	s14, [pc, #660]	; 800cde8 <HAL_TIM_PeriodElapsedCallback+0x15c8>
 800cb54:	eef4 7ac7 	vcmpe.f32	s15, s14
 800cb58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cb5c:	dd02      	ble.n	800cb64 <HAL_TIM_PeriodElapsedCallback+0x1344>
 800cb5e:	4ba1      	ldr	r3, [pc, #644]	; (800cde4 <HAL_TIM_PeriodElapsedCallback+0x15c4>)
 800cb60:	681b      	ldr	r3, [r3, #0]
 800cb62:	e002      	b.n	800cb6a <HAL_TIM_PeriodElapsedCallback+0x134a>
 800cb64:	4b9c      	ldr	r3, [pc, #624]	; (800cdd8 <HAL_TIM_PeriodElapsedCallback+0x15b8>)
 800cb66:	e000      	b.n	800cb6a <HAL_TIM_PeriodElapsedCallback+0x134a>
 800cb68:	4b9c      	ldr	r3, [pc, #624]	; (800cddc <HAL_TIM_PeriodElapsedCallback+0x15bc>)
 800cb6a:	4a9e      	ldr	r2, [pc, #632]	; (800cde4 <HAL_TIM_PeriodElapsedCallback+0x15c4>)
 800cb6c:	6013      	str	r3, [r2, #0]

			if(pulse_l > 0){
 800cb6e:	4b9c      	ldr	r3, [pc, #624]	; (800cde0 <HAL_TIM_PeriodElapsedCallback+0x15c0>)
 800cb70:	edd3 7a00 	vldr	s15, [r3]
 800cb74:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800cb78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cb7c:	dd17      	ble.n	800cbae <HAL_TIM_PeriodElapsedCallback+0x138e>
				drive_dir(0, 0);
 800cb7e:	2100      	movs	r1, #0
 800cb80:	2000      	movs	r0, #0
 800cb82:	f7f8 f929 	bl	8004dd8 <drive_dir>
				ConfigOC.Pulse = pulse_l;
 800cb86:	4b96      	ldr	r3, [pc, #600]	; (800cde0 <HAL_TIM_PeriodElapsedCallback+0x15c0>)
 800cb88:	edd3 7a00 	vldr	s15, [r3]
 800cb8c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cb90:	ee17 3a90 	vmov	r3, s15
 800cb94:	60fb      	str	r3, [r7, #12]
				HAL_TIM_PWM_ConfigChannel(&htim2, &ConfigOC, TIM_CHANNEL_1);
 800cb96:	f107 0308 	add.w	r3, r7, #8
 800cb9a:	2200      	movs	r2, #0
 800cb9c:	4619      	mov	r1, r3
 800cb9e:	4894      	ldr	r0, [pc, #592]	; (800cdf0 <HAL_TIM_PeriodElapsedCallback+0x15d0>)
 800cba0:	f7f7 f814 	bl	8003bcc <HAL_TIM_PWM_ConfigChannel>
				HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_1);
 800cba4:	2100      	movs	r1, #0
 800cba6:	4892      	ldr	r0, [pc, #584]	; (800cdf0 <HAL_TIM_PeriodElapsedCallback+0x15d0>)
 800cba8:	f7f6 fda8 	bl	80036fc <HAL_TIM_PWM_Start>
 800cbac:	e020      	b.n	800cbf0 <HAL_TIM_PeriodElapsedCallback+0x13d0>
			}
			else if(pulse_l < 0){
 800cbae:	4b8c      	ldr	r3, [pc, #560]	; (800cde0 <HAL_TIM_PeriodElapsedCallback+0x15c0>)
 800cbb0:	edd3 7a00 	vldr	s15, [r3]
 800cbb4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800cbb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cbbc:	d518      	bpl.n	800cbf0 <HAL_TIM_PeriodElapsedCallback+0x13d0>
				drive_dir(0, 1);
 800cbbe:	2101      	movs	r1, #1
 800cbc0:	2000      	movs	r0, #0
 800cbc2:	f7f8 f909 	bl	8004dd8 <drive_dir>
				ConfigOC.Pulse = -pulse_l;
 800cbc6:	4b86      	ldr	r3, [pc, #536]	; (800cde0 <HAL_TIM_PeriodElapsedCallback+0x15c0>)
 800cbc8:	edd3 7a00 	vldr	s15, [r3]
 800cbcc:	eef1 7a67 	vneg.f32	s15, s15
 800cbd0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cbd4:	ee17 3a90 	vmov	r3, s15
 800cbd8:	60fb      	str	r3, [r7, #12]
				HAL_TIM_PWM_ConfigChannel(&htim2, &ConfigOC, TIM_CHANNEL_1);
 800cbda:	f107 0308 	add.w	r3, r7, #8
 800cbde:	2200      	movs	r2, #0
 800cbe0:	4619      	mov	r1, r3
 800cbe2:	4883      	ldr	r0, [pc, #524]	; (800cdf0 <HAL_TIM_PeriodElapsedCallback+0x15d0>)
 800cbe4:	f7f6 fff2 	bl	8003bcc <HAL_TIM_PWM_ConfigChannel>
				HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_1);
 800cbe8:	2100      	movs	r1, #0
 800cbea:	4881      	ldr	r0, [pc, #516]	; (800cdf0 <HAL_TIM_PeriodElapsedCallback+0x15d0>)
 800cbec:	f7f6 fd86 	bl	80036fc <HAL_TIM_PWM_Start>
			}

			if(pulse_r > 0){
 800cbf0:	4b7c      	ldr	r3, [pc, #496]	; (800cde4 <HAL_TIM_PeriodElapsedCallback+0x15c4>)
 800cbf2:	edd3 7a00 	vldr	s15, [r3]
 800cbf6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800cbfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cbfe:	dd17      	ble.n	800cc30 <HAL_TIM_PeriodElapsedCallback+0x1410>
				drive_dir(1, 0);
 800cc00:	2100      	movs	r1, #0
 800cc02:	2001      	movs	r0, #1
 800cc04:	f7f8 f8e8 	bl	8004dd8 <drive_dir>
				ConfigOC.Pulse = pulse_r;
 800cc08:	4b76      	ldr	r3, [pc, #472]	; (800cde4 <HAL_TIM_PeriodElapsedCallback+0x15c4>)
 800cc0a:	edd3 7a00 	vldr	s15, [r3]
 800cc0e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cc12:	ee17 3a90 	vmov	r3, s15
 800cc16:	60fb      	str	r3, [r7, #12]
				HAL_TIM_PWM_ConfigChannel(&htim2, &ConfigOC, TIM_CHANNEL_4);
 800cc18:	f107 0308 	add.w	r3, r7, #8
 800cc1c:	220c      	movs	r2, #12
 800cc1e:	4619      	mov	r1, r3
 800cc20:	4873      	ldr	r0, [pc, #460]	; (800cdf0 <HAL_TIM_PeriodElapsedCallback+0x15d0>)
 800cc22:	f7f6 ffd3 	bl	8003bcc <HAL_TIM_PWM_ConfigChannel>
				HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_4);
 800cc26:	210c      	movs	r1, #12
 800cc28:	4871      	ldr	r0, [pc, #452]	; (800cdf0 <HAL_TIM_PeriodElapsedCallback+0x15d0>)
 800cc2a:	f7f6 fd67 	bl	80036fc <HAL_TIM_PWM_Start>
 800cc2e:	e020      	b.n	800cc72 <HAL_TIM_PeriodElapsedCallback+0x1452>
			}
			else if(pulse_r < 0){
 800cc30:	4b6c      	ldr	r3, [pc, #432]	; (800cde4 <HAL_TIM_PeriodElapsedCallback+0x15c4>)
 800cc32:	edd3 7a00 	vldr	s15, [r3]
 800cc36:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800cc3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cc3e:	d518      	bpl.n	800cc72 <HAL_TIM_PeriodElapsedCallback+0x1452>
				drive_dir(1, 1);
 800cc40:	2101      	movs	r1, #1
 800cc42:	2001      	movs	r0, #1
 800cc44:	f7f8 f8c8 	bl	8004dd8 <drive_dir>
				ConfigOC.Pulse = -pulse_r;
 800cc48:	4b66      	ldr	r3, [pc, #408]	; (800cde4 <HAL_TIM_PeriodElapsedCallback+0x15c4>)
 800cc4a:	edd3 7a00 	vldr	s15, [r3]
 800cc4e:	eef1 7a67 	vneg.f32	s15, s15
 800cc52:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cc56:	ee17 3a90 	vmov	r3, s15
 800cc5a:	60fb      	str	r3, [r7, #12]
				HAL_TIM_PWM_ConfigChannel(&htim2, &ConfigOC, TIM_CHANNEL_4);
 800cc5c:	f107 0308 	add.w	r3, r7, #8
 800cc60:	220c      	movs	r2, #12
 800cc62:	4619      	mov	r1, r3
 800cc64:	4862      	ldr	r0, [pc, #392]	; (800cdf0 <HAL_TIM_PeriodElapsedCallback+0x15d0>)
 800cc66:	f7f6 ffb1 	bl	8003bcc <HAL_TIM_PWM_ConfigChannel>
				HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_4);
 800cc6a:	210c      	movs	r1, #12
 800cc6c:	4860      	ldr	r0, [pc, #384]	; (800cdf0 <HAL_TIM_PeriodElapsedCallback+0x15d0>)
 800cc6e:	f7f6 fd45 	bl	80036fc <HAL_TIM_PWM_Start>
			}
			//wall check
//			if(!MF.FLAG.SCND){
				//----look forward----
				if(ad_fr > WALL_BASE_FR || ad_fl > WALL_BASE_FL){
 800cc72:	4b60      	ldr	r3, [pc, #384]	; (800cdf4 <HAL_TIM_PeriodElapsedCallback+0x15d4>)
 800cc74:	681b      	ldr	r3, [r3, #0]
 800cc76:	2b78      	cmp	r3, #120	; 0x78
 800cc78:	d803      	bhi.n	800cc82 <HAL_TIM_PeriodElapsedCallback+0x1462>
 800cc7a:	4b5f      	ldr	r3, [pc, #380]	; (800cdf8 <HAL_TIM_PeriodElapsedCallback+0x15d8>)
 800cc7c:	681b      	ldr	r3, [r3, #0]
 800cc7e:	2bc8      	cmp	r3, #200	; 0xc8
 800cc80:	d905      	bls.n	800cc8e <HAL_TIM_PeriodElapsedCallback+0x146e>
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 800cc82:	2201      	movs	r2, #1
 800cc84:	2140      	movs	r1, #64	; 0x40
 800cc86:	485d      	ldr	r0, [pc, #372]	; (800cdfc <HAL_TIM_PeriodElapsedCallback+0x15dc>)
 800cc88:	f7f5 fb3c 	bl	8002304 <HAL_GPIO_WritePin>
 800cc8c:	e004      	b.n	800cc98 <HAL_TIM_PeriodElapsedCallback+0x1478>
				}else{
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 800cc8e:	2200      	movs	r2, #0
 800cc90:	2140      	movs	r1, #64	; 0x40
 800cc92:	485a      	ldr	r0, [pc, #360]	; (800cdfc <HAL_TIM_PeriodElapsedCallback+0x15dc>)
 800cc94:	f7f5 fb36 	bl	8002304 <HAL_GPIO_WritePin>
				}
				//----look forwardL----
				if(ad_fl > WALL_BASE_FL){
 800cc98:	4b57      	ldr	r3, [pc, #348]	; (800cdf8 <HAL_TIM_PeriodElapsedCallback+0x15d8>)
 800cc9a:	681b      	ldr	r3, [r3, #0]
 800cc9c:	2bc8      	cmp	r3, #200	; 0xc8
 800cc9e:	d905      	bls.n	800ccac <HAL_TIM_PeriodElapsedCallback+0x148c>
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 800cca0:	2201      	movs	r2, #1
 800cca2:	2110      	movs	r1, #16
 800cca4:	4855      	ldr	r0, [pc, #340]	; (800cdfc <HAL_TIM_PeriodElapsedCallback+0x15dc>)
 800cca6:	f7f5 fb2d 	bl	8002304 <HAL_GPIO_WritePin>
 800ccaa:	e004      	b.n	800ccb6 <HAL_TIM_PeriodElapsedCallback+0x1496>
				}else{
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 800ccac:	2200      	movs	r2, #0
 800ccae:	2110      	movs	r1, #16
 800ccb0:	4852      	ldr	r0, [pc, #328]	; (800cdfc <HAL_TIM_PeriodElapsedCallback+0x15dc>)
 800ccb2:	f7f5 fb27 	bl	8002304 <HAL_GPIO_WritePin>
				}
				//----look forward-R---
				if(ad_fr > WALL_BASE_FR){
 800ccb6:	4b4f      	ldr	r3, [pc, #316]	; (800cdf4 <HAL_TIM_PeriodElapsedCallback+0x15d4>)
 800ccb8:	681b      	ldr	r3, [r3, #0]
 800ccba:	2b78      	cmp	r3, #120	; 0x78
 800ccbc:	d905      	bls.n	800ccca <HAL_TIM_PeriodElapsedCallback+0x14aa>
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);
 800ccbe:	2201      	movs	r2, #1
 800ccc0:	2180      	movs	r1, #128	; 0x80
 800ccc2:	484e      	ldr	r0, [pc, #312]	; (800cdfc <HAL_TIM_PeriodElapsedCallback+0x15dc>)
 800ccc4:	f7f5 fb1e 	bl	8002304 <HAL_GPIO_WritePin>
 800ccc8:	e00d      	b.n	800cce6 <HAL_TIM_PeriodElapsedCallback+0x14c6>
				}else{
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 800ccca:	2200      	movs	r2, #0
 800cccc:	2180      	movs	r1, #128	; 0x80
 800ccce:	484b      	ldr	r0, [pc, #300]	; (800cdfc <HAL_TIM_PeriodElapsedCallback+0x15dc>)
 800ccd0:	f7f5 fb18 	bl	8002304 <HAL_GPIO_WritePin>
 800ccd4:	e007      	b.n	800cce6 <HAL_TIM_PeriodElapsedCallback+0x14c6>
				}
		}else{
			drive_dir(0, 2);
 800ccd6:	2102      	movs	r1, #2
 800ccd8:	2000      	movs	r0, #0
 800ccda:	f7f8 f87d 	bl	8004dd8 <drive_dir>
			drive_dir(1, 2);
 800ccde:	2102      	movs	r1, #2
 800cce0:	2001      	movs	r0, #1
 800cce2:	f7f8 f879 	bl	8004dd8 <drive_dir>
		}


		//wall check
		//----look right----
		if(ad_r > WALL_BASE_R){
 800cce6:	4b46      	ldr	r3, [pc, #280]	; (800ce00 <HAL_TIM_PeriodElapsedCallback+0x15e0>)
 800cce8:	681b      	ldr	r3, [r3, #0]
 800ccea:	2b78      	cmp	r3, #120	; 0x78
 800ccec:	d906      	bls.n	800ccfc <HAL_TIM_PeriodElapsedCallback+0x14dc>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 800ccee:	2201      	movs	r2, #1
 800ccf0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800ccf4:	4843      	ldr	r0, [pc, #268]	; (800ce04 <HAL_TIM_PeriodElapsedCallback+0x15e4>)
 800ccf6:	f7f5 fb05 	bl	8002304 <HAL_GPIO_WritePin>
 800ccfa:	e005      	b.n	800cd08 <HAL_TIM_PeriodElapsedCallback+0x14e8>
		}else{
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 800ccfc:	2200      	movs	r2, #0
 800ccfe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800cd02:	4840      	ldr	r0, [pc, #256]	; (800ce04 <HAL_TIM_PeriodElapsedCallback+0x15e4>)
 800cd04:	f7f5 fafe 	bl	8002304 <HAL_GPIO_WritePin>
		}
		//----look left----
		if(ad_l > WALL_BASE_L){
 800cd08:	4b3f      	ldr	r3, [pc, #252]	; (800ce08 <HAL_TIM_PeriodElapsedCallback+0x15e8>)
 800cd0a:	681b      	ldr	r3, [r3, #0]
 800cd0c:	2b8c      	cmp	r3, #140	; 0x8c
 800cd0e:	d905      	bls.n	800cd1c <HAL_TIM_PeriodElapsedCallback+0x14fc>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);
 800cd10:	2201      	movs	r2, #1
 800cd12:	2104      	movs	r1, #4
 800cd14:	483d      	ldr	r0, [pc, #244]	; (800ce0c <HAL_TIM_PeriodElapsedCallback+0x15ec>)
 800cd16:	f7f5 faf5 	bl	8002304 <HAL_GPIO_WritePin>
 800cd1a:	e004      	b.n	800cd26 <HAL_TIM_PeriodElapsedCallback+0x1506>
		}else{
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 800cd1c:	2200      	movs	r2, #0
 800cd1e:	2104      	movs	r1, #4
 800cd20:	483a      	ldr	r0, [pc, #232]	; (800ce0c <HAL_TIM_PeriodElapsedCallback+0x15ec>)
 800cd22:	f7f5 faef 	bl	8002304 <HAL_GPIO_WritePin>
		}


		//battery check
		if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12) == GPIO_PIN_RESET) {	//2.1V以下で赤ランプ点灯=>LiPoが約7Vを下回るとランプ点灯
 800cd26:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800cd2a:	4836      	ldr	r0, [pc, #216]	; (800ce04 <HAL_TIM_PeriodElapsedCallback+0x15e4>)
 800cd2c:	f7f5 fad2 	bl	80022d4 <HAL_GPIO_ReadPin>
 800cd30:	4603      	mov	r3, r0
 800cd32:	2b00      	cmp	r3, #0
 800cd34:	d105      	bne.n	800cd42 <HAL_TIM_PeriodElapsedCallback+0x1522>
		   HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_SET);
 800cd36:	2201      	movs	r2, #1
 800cd38:	2108      	movs	r1, #8
 800cd3a:	4834      	ldr	r0, [pc, #208]	; (800ce0c <HAL_TIM_PeriodElapsedCallback+0x15ec>)
 800cd3c:	f7f5 fae2 	bl	8002304 <HAL_GPIO_WritePin>
 800cd40:	e004      	b.n	800cd4c <HAL_TIM_PeriodElapsedCallback+0x152c>
		} else {
		   HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
 800cd42:	2200      	movs	r2, #0
 800cd44:	2108      	movs	r1, #8
 800cd46:	4831      	ldr	r0, [pc, #196]	; (800ce0c <HAL_TIM_PeriodElapsedCallback+0x15ec>)
 800cd48:	f7f5 fadc 	bl	8002304 <HAL_GPIO_WritePin>
		}


		//fail safe
		if(degree_z >= target_degree_z+270 || degree_z <= target_degree_z-270 || dist_r > 500 || dist_l > 500){	//270度以上回転発生でFail Safe
 800cd4c:	4b30      	ldr	r3, [pc, #192]	; (800ce10 <HAL_TIM_PeriodElapsedCallback+0x15f0>)
 800cd4e:	edd3 7a00 	vldr	s15, [r3]
 800cd52:	ed9f 7a30 	vldr	s14, [pc, #192]	; 800ce14 <HAL_TIM_PeriodElapsedCallback+0x15f4>
 800cd56:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cd5a:	4b2f      	ldr	r3, [pc, #188]	; (800ce18 <HAL_TIM_PeriodElapsedCallback+0x15f8>)
 800cd5c:	edd3 7a00 	vldr	s15, [r3]
 800cd60:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800cd64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cd68:	d923      	bls.n	800cdb2 <HAL_TIM_PeriodElapsedCallback+0x1592>
 800cd6a:	4b29      	ldr	r3, [pc, #164]	; (800ce10 <HAL_TIM_PeriodElapsedCallback+0x15f0>)
 800cd6c:	edd3 7a00 	vldr	s15, [r3]
 800cd70:	ed9f 7a28 	vldr	s14, [pc, #160]	; 800ce14 <HAL_TIM_PeriodElapsedCallback+0x15f4>
 800cd74:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800cd78:	4b27      	ldr	r3, [pc, #156]	; (800ce18 <HAL_TIM_PeriodElapsedCallback+0x15f8>)
 800cd7a:	edd3 7a00 	vldr	s15, [r3]
 800cd7e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800cd82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cd86:	da14      	bge.n	800cdb2 <HAL_TIM_PeriodElapsedCallback+0x1592>
 800cd88:	4b24      	ldr	r3, [pc, #144]	; (800ce1c <HAL_TIM_PeriodElapsedCallback+0x15fc>)
 800cd8a:	edd3 7a00 	vldr	s15, [r3]
 800cd8e:	ed9f 7a24 	vldr	s14, [pc, #144]	; 800ce20 <HAL_TIM_PeriodElapsedCallback+0x1600>
 800cd92:	eef4 7ac7 	vcmpe.f32	s15, s14
 800cd96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cd9a:	dc0a      	bgt.n	800cdb2 <HAL_TIM_PeriodElapsedCallback+0x1592>
 800cd9c:	4b21      	ldr	r3, [pc, #132]	; (800ce24 <HAL_TIM_PeriodElapsedCallback+0x1604>)
 800cd9e:	edd3 7a00 	vldr	s15, [r3]
 800cda2:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 800ce20 <HAL_TIM_PeriodElapsedCallback+0x1600>
 800cda6:	eef4 7ac7 	vcmpe.f32	s15, s14
 800cdaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cdae:	dc00      	bgt.n	800cdb2 <HAL_TIM_PeriodElapsedCallback+0x1592>
			   drive_dir(1, 2);
			   full_led_write(RED);
		   }
		}
	}
}
 800cdb0:	e00b      	b.n	800cdca <HAL_TIM_PeriodElapsedCallback+0x15aa>
			   drive_dir(0, 2);
 800cdb2:	2102      	movs	r1, #2
 800cdb4:	2000      	movs	r0, #0
 800cdb6:	f7f8 f80f 	bl	8004dd8 <drive_dir>
			   drive_dir(1, 2);
 800cdba:	2102      	movs	r1, #2
 800cdbc:	2001      	movs	r0, #1
 800cdbe:	f7f8 f80b 	bl	8004dd8 <drive_dir>
			   full_led_write(RED);
 800cdc2:	2001      	movs	r0, #1
 800cdc4:	f003 fd94 	bl	80108f0 <full_led_write>
			   drive_dir(0, 2);
 800cdc8:	e7f3      	b.n	800cdb2 <HAL_TIM_PeriodElapsedCallback+0x1592>
}
 800cdca:	bf00      	nop
 800cdcc:	3730      	adds	r7, #48	; 0x30
 800cdce:	46bd      	mov	sp, r7
 800cdd0:	ecbd 8b02 	vpop	{d8}
 800cdd4:	bdb0      	pop	{r4, r5, r7, pc}
 800cdd6:	bf00      	nop
 800cdd8:	c47a0000 	.word	0xc47a0000
 800cddc:	447a0000 	.word	0x447a0000
 800cde0:	20000ba8 	.word	0x20000ba8
 800cde4:	20000780 	.word	0x20000780
 800cde8:	c47a0000 	.word	0xc47a0000
 800cdec:	447a0000 	.word	0x447a0000
 800cdf0:	20000c14 	.word	0x20000c14
 800cdf4:	20000c00 	.word	0x20000c00
 800cdf8:	20000d54 	.word	0x20000d54
 800cdfc:	40020000 	.word	0x40020000
 800ce00:	20000f60 	.word	0x20000f60
 800ce04:	40020400 	.word	0x40020400
 800ce08:	20000afc 	.word	0x20000afc
 800ce0c:	40020800 	.word	0x40020800
 800ce10:	20000bf8 	.word	0x20000bf8
 800ce14:	43870000 	.word	0x43870000
 800ce18:	20000b5c 	.word	0x20000b5c
 800ce1c:	20000aec 	.word	0x20000aec
 800ce20:	43fa0000 	.word	0x43fa0000
 800ce24:	200015c4 	.word	0x200015c4

0800ce28 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800ce28:	b580      	push	{r7, lr}
 800ce2a:	b082      	sub	sp, #8
 800ce2c:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800ce2e:	f7f4 f883 	bl	8000f38 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800ce32:	f000 f917 	bl	800d064 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800ce36:	f000 fc09 	bl	800d64c <MX_GPIO_Init>
  MX_ADC1_Init();
 800ce3a:	f000 f97d 	bl	800d138 <MX_ADC1_Init>
  MX_TIM2_Init();
 800ce3e:	f000 fa03 	bl	800d248 <MX_TIM2_Init>
  MX_TIM3_Init();
 800ce42:	f000 fa81 	bl	800d348 <MX_TIM3_Init>
  MX_TIM4_Init();
 800ce46:	f000 faf5 	bl	800d434 <MX_TIM4_Init>
  MX_TIM6_Init();
 800ce4a:	f000 fb47 	bl	800d4dc <MX_TIM6_Init>
  MX_TIM8_Init();
 800ce4e:	f000 fb7b 	bl	800d548 <MX_TIM8_Init>
  MX_SPI3_Init();
 800ce52:	f000 f9c3 	bl	800d1dc <MX_SPI3_Init>
  MX_USART1_UART_Init();
 800ce56:	f000 fbcf 	bl	800d5f8 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  drive_init();
 800ce5a:	f7f7 feff 	bl	8004c5c <drive_init>
  gyro_init();
 800ce5e:	f7fe fb01 	bl	800b464 <gyro_init>
  search_init();
 800ce62:	f000 fd21 	bl	800d8a8 <search_init>
  sensor_init();
 800ce66:	f003 fc83 	bl	8010770 <sensor_init>

  printf("*** Welcome to WMMC ! ***\n");
 800ce6a:	4870      	ldr	r0, [pc, #448]	; (800d02c <main+0x204>)
 800ce6c:	f004 fb48 	bl	8011500 <puts>

  setbuf(stdout, NULL);
 800ce70:	4b6f      	ldr	r3, [pc, #444]	; (800d030 <main+0x208>)
 800ce72:	681b      	ldr	r3, [r3, #0]
 800ce74:	689b      	ldr	r3, [r3, #8]
 800ce76:	2100      	movs	r1, #0
 800ce78:	4618      	mov	r0, r3
 800ce7a:	f004 fb49 	bl	8011510 <setbuf>
  HAL_TIM_Encoder_Start(&htim4,TIM_CHANNEL_ALL);
 800ce7e:	213c      	movs	r1, #60	; 0x3c
 800ce80:	486c      	ldr	r0, [pc, #432]	; (800d034 <main+0x20c>)
 800ce82:	f7f6 fd63 	bl	800394c <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim8,TIM_CHANNEL_ALL);
 800ce86:	213c      	movs	r1, #60	; 0x3c
 800ce88:	486b      	ldr	r0, [pc, #428]	; (800d038 <main+0x210>)
 800ce8a:	f7f6 fd5f 	bl	800394c <HAL_TIM_Encoder_Start>
  HAL_TIM_Base_Start_IT(&htim6);
 800ce8e:	486b      	ldr	r0, [pc, #428]	; (800d03c <main+0x214>)
 800ce90:	f7f6 fbdb 	bl	800364a <HAL_TIM_Base_Start_IT>

  int mode = 0;
 800ce94:	2300      	movs	r3, #0
 800ce96:	607b      	str	r3, [r7, #4]
  printf("Mode : %d\n", mode);
 800ce98:	6879      	ldr	r1, [r7, #4]
 800ce9a:	4869      	ldr	r0, [pc, #420]	; (800d040 <main+0x218>)
 800ce9c:	f004 fabc 	bl	8011418 <iprintf>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	b2db      	uxtb	r3, r3
 800cea4:	f003 0301 	and.w	r3, r3, #1
 800cea8:	b2d8      	uxtb	r0, r3
 800ceaa:	687b      	ldr	r3, [r7, #4]
 800ceac:	b2db      	uxtb	r3, r3
 800ceae:	f003 0302 	and.w	r3, r3, #2
 800ceb2:	b2d9      	uxtb	r1, r3
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	b2db      	uxtb	r3, r3
 800ceb8:	f003 0304 	and.w	r3, r3, #4
 800cebc:	b2db      	uxtb	r3, r3
 800cebe:	461a      	mov	r2, r3
 800cec0:	f003 fcdc 	bl	801087c <led_write>
	  if(dist_r >= 20){
 800cec4:	4b5f      	ldr	r3, [pc, #380]	; (800d044 <main+0x21c>)
 800cec6:	edd3 7a00 	vldr	s15, [r3]
 800ceca:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 800cece:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ced2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ced6:	db0f      	blt.n	800cef8 <main+0xd0>
		  mode++;
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	3301      	adds	r3, #1
 800cedc:	607b      	str	r3, [r7, #4]
		  dist_r = 0;
 800cede:	4b59      	ldr	r3, [pc, #356]	; (800d044 <main+0x21c>)
 800cee0:	f04f 0200 	mov.w	r2, #0
 800cee4:	601a      	str	r2, [r3, #0]
		  if(mode > 7){
 800cee6:	687b      	ldr	r3, [r7, #4]
 800cee8:	2b07      	cmp	r3, #7
 800ceea:	dd01      	ble.n	800cef0 <main+0xc8>
			  mode = 0;
 800ceec:	2300      	movs	r3, #0
 800ceee:	607b      	str	r3, [r7, #4]
		  }
		  printf("Mode : %d\n", mode);
 800cef0:	6879      	ldr	r1, [r7, #4]
 800cef2:	4853      	ldr	r0, [pc, #332]	; (800d040 <main+0x218>)
 800cef4:	f004 fa90 	bl	8011418 <iprintf>
		  //buzzer(pitagola2[mode-1][0], pitagola2[mode-1][1]);
		  //buzzer(pitagola[2][0], pitagola[2][1]);
	  }
	  if(dist_r <= -20){
 800cef8:	4b52      	ldr	r3, [pc, #328]	; (800d044 <main+0x21c>)
 800cefa:	edd3 7a00 	vldr	s15, [r3]
 800cefe:	eebb 7a04 	vmov.f32	s14, #180	; 0xc1a00000 -20.0
 800cf02:	eef4 7ac7 	vcmpe.f32	s15, s14
 800cf06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cf0a:	d80f      	bhi.n	800cf2c <main+0x104>
		  mode--;
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	3b01      	subs	r3, #1
 800cf10:	607b      	str	r3, [r7, #4]
		  dist_r = 0;
 800cf12:	4b4c      	ldr	r3, [pc, #304]	; (800d044 <main+0x21c>)
 800cf14:	f04f 0200 	mov.w	r2, #0
 800cf18:	601a      	str	r2, [r3, #0]
		  if(mode < 0){
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	2b00      	cmp	r3, #0
 800cf1e:	da01      	bge.n	800cf24 <main+0xfc>
			  mode = 7;
 800cf20:	2307      	movs	r3, #7
 800cf22:	607b      	str	r3, [r7, #4]
		  }
		  printf("Mode : %d\n", mode);
 800cf24:	6879      	ldr	r1, [r7, #4]
 800cf26:	4846      	ldr	r0, [pc, #280]	; (800d040 <main+0x218>)
 800cf28:	f004 fa76 	bl	8011418 <iprintf>
		  //buzzer(pitagola2[mode-1][0], pitagola2[mode-1][1]);
		  //buzzer(pitagola[2][0], pitagola[2][1]);
	  }
	  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET){
 800cf2c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800cf30:	4845      	ldr	r0, [pc, #276]	; (800d048 <main+0x220>)
 800cf32:	f7f5 f9cf 	bl	80022d4 <HAL_GPIO_ReadPin>
 800cf36:	4603      	mov	r3, r0
 800cf38:	2b00      	cmp	r3, #0
 800cf3a:	d1b1      	bne.n	800cea0 <main+0x78>
		  HAL_Delay(50);
 800cf3c:	2032      	movs	r0, #50	; 0x32
 800cf3e:	f7f4 f86d 	bl	800101c <HAL_Delay>
		  while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET);
 800cf42:	bf00      	nop
 800cf44:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800cf48:	483f      	ldr	r0, [pc, #252]	; (800d048 <main+0x220>)
 800cf4a:	f7f5 f9c3 	bl	80022d4 <HAL_GPIO_ReadPin>
 800cf4e:	4603      	mov	r3, r0
 800cf50:	2b00      	cmp	r3, #0
 800cf52:	d0f7      	beq.n	800cf44 <main+0x11c>
		  switch(mode){
 800cf54:	687b      	ldr	r3, [r7, #4]
 800cf56:	2b07      	cmp	r3, #7
 800cf58:	d8a2      	bhi.n	800cea0 <main+0x78>
 800cf5a:	a201      	add	r2, pc, #4	; (adr r2, 800cf60 <main+0x138>)
 800cf5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cf60:	0800cf81 	.word	0x0800cf81
 800cf64:	0800cf8b 	.word	0x0800cf8b
 800cf68:	0800cf97 	.word	0x0800cf97
 800cf6c:	0800cfa3 	.word	0x0800cfa3
 800cf70:	0800cfaf 	.word	0x0800cfaf
 800cf74:	0800cfb5 	.word	0x0800cfb5
 800cf78:	0800cfe1 	.word	0x0800cfe1
 800cf7c:	0800d023 	.word	0x0800d023

		  	  case 0:
		  		  HAL_Delay(5000);
 800cf80:	f241 3088 	movw	r0, #5000	; 0x1388
 800cf84:	f7f4 f84a 	bl	800101c <HAL_Delay>
		  		  break;
 800cf88:	e04e      	b.n	800d028 <main+0x200>

		  	  case 1:
		  		  //----a超新地走行----
		  		  printf("Simple Run.\n");
 800cf8a:	4830      	ldr	r0, [pc, #192]	; (800d04c <main+0x224>)
 800cf8c:	f004 fab8 	bl	8011500 <puts>
		  		  //MF.FLAG.WEDGE = 1;
		  		  simple_run();
 800cf90:	f7fc fe00 	bl	8009b94 <simple_run>
		  		  break;
 800cf94:	e048      	b.n	800d028 <main+0x200>

		  	  case 2:
		  		  //----aスラローム走行----
		  		  printf("slalom Run.\n");
 800cf96:	482e      	ldr	r0, [pc, #184]	; (800d050 <main+0x228>)
 800cf98:	f004 fab2 	bl	8011500 <puts>
		  		  //MF.FLAG.WEDGE = 1;
		  		  slalom_run();
 800cf9c:	f7fc ff08 	bl	8009db0 <slalom_run>
		  		  break;
 800cfa0:	e042      	b.n	800d028 <main+0x200>

		  	  case 3:
		  		  //----aスラローム走行&pass圧縮----
				  printf("First Run. (Slalom)\n");
 800cfa2:	482c      	ldr	r0, [pc, #176]	; (800d054 <main+0x22c>)
 800cfa4:	f004 faac 	bl	8011500 <puts>
		  		  pass_test();
 800cfa8:	f7fc f83c 	bl	8009024 <pass_test>
		  		  break;
 800cfac:	e03c      	b.n	800d028 <main+0x200>

		  	  case 4:
		  		  //----aテストモード選択----
		  		  test_select();
 800cfae:	f7fb faa5 	bl	80084fc <test_select>
		  		  break;
 800cfb2:	e039      	b.n	800d028 <main+0x200>

		  	  case 5:
		  		  //----sensor check----
		  		  printf("Sensor Check.\n");
 800cfb4:	4828      	ldr	r0, [pc, #160]	; (800d058 <main+0x230>)
 800cfb6:	f004 faa3 	bl	8011500 <puts>
		  		  sensor_test();
 800cfba:	f003 fd55 	bl	8010a68 <sensor_test>
		  		  break;
 800cfbe:	e033      	b.n	800d028 <main+0x200>

		  	  case 6:
		  		  //----pitagola sound----
				  while(ad_fl <= WALL_BASE_FL){
					  led_write(1, 1, 1);
 800cfc0:	2201      	movs	r2, #1
 800cfc2:	2101      	movs	r1, #1
 800cfc4:	2001      	movs	r0, #1
 800cfc6:	f003 fc59 	bl	801087c <led_write>
					  HAL_Delay(200);
 800cfca:	20c8      	movs	r0, #200	; 0xc8
 800cfcc:	f7f4 f826 	bl	800101c <HAL_Delay>
					  led_write(0, 0, 0);
 800cfd0:	2200      	movs	r2, #0
 800cfd2:	2100      	movs	r1, #0
 800cfd4:	2000      	movs	r0, #0
 800cfd6:	f003 fc51 	bl	801087c <led_write>
					  HAL_Delay(200);
 800cfda:	20c8      	movs	r0, #200	; 0xc8
 800cfdc:	f7f4 f81e 	bl	800101c <HAL_Delay>
				  while(ad_fl <= WALL_BASE_FL){
 800cfe0:	4b1e      	ldr	r3, [pc, #120]	; (800d05c <main+0x234>)
 800cfe2:	681b      	ldr	r3, [r3, #0]
 800cfe4:	2bc8      	cmp	r3, #200	; 0xc8
 800cfe6:	d9eb      	bls.n	800cfc0 <main+0x198>
				  }
				  HAL_Delay(200);
 800cfe8:	20c8      	movs	r0, #200	; 0xc8
 800cfea:	f7f4 f817 	bl	800101c <HAL_Delay>
		  		  }
				  HAL_Delay(2000);
				  for(int i=0; i<m_ok; i++){
		  			  buzzer(mario_ok[i][0], mario_ok[i][1]);
		  		  }
*/				  HAL_Delay(2000);
 800cfee:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800cff2:	f7f4 f813 	bl	800101c <HAL_Delay>
				  for(int i=0; i<m_goal; i++){
 800cff6:	2300      	movs	r3, #0
 800cff8:	603b      	str	r3, [r7, #0]
 800cffa:	e00e      	b.n	800d01a <main+0x1f2>
		  			  buzzer(mario_goal[i][0], mario_goal[i][1]);
 800cffc:	4a18      	ldr	r2, [pc, #96]	; (800d060 <main+0x238>)
 800cffe:	683b      	ldr	r3, [r7, #0]
 800d000:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800d004:	4a16      	ldr	r2, [pc, #88]	; (800d060 <main+0x238>)
 800d006:	683b      	ldr	r3, [r7, #0]
 800d008:	00db      	lsls	r3, r3, #3
 800d00a:	4413      	add	r3, r2
 800d00c:	685b      	ldr	r3, [r3, #4]
 800d00e:	4619      	mov	r1, r3
 800d010:	f000 fbda 	bl	800d7c8 <buzzer>
				  for(int i=0; i<m_goal; i++){
 800d014:	683b      	ldr	r3, [r7, #0]
 800d016:	3301      	adds	r3, #1
 800d018:	603b      	str	r3, [r7, #0]
 800d01a:	683b      	ldr	r3, [r7, #0]
 800d01c:	2b0e      	cmp	r3, #14
 800d01e:	dded      	ble.n	800cffc <main+0x1d4>
		  		  }
		  		  break;
 800d020:	e002      	b.n	800d028 <main+0x200>
		  		  //MF.FLAG.WEDGE = 1;
/*		  		  for(int i=0; i<m_select; i++){
		  			  buzzer(mario_select[i][0], mario_select[i][1]);
		  		  }
*///		  		  perfect_run();
		  		  perfect_slalom();
 800d022:	f7fd fa77 	bl	800a514 <perfect_slalom>
		  		  break;
 800d026:	bf00      	nop
	  led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 800d028:	e73a      	b.n	800cea0 <main+0x78>
 800d02a:	bf00      	nop
 800d02c:	08012a1c 	.word	0x08012a1c
 800d030:	20000084 	.word	0x20000084
 800d034:	2000030c 	.word	0x2000030c
 800d038:	200002cc 	.word	0x200002cc
 800d03c:	20000bb4 	.word	0x20000bb4
 800d040:	08012a38 	.word	0x08012a38
 800d044:	20000aec 	.word	0x20000aec
 800d048:	40020000 	.word	0x40020000
 800d04c:	08012a44 	.word	0x08012a44
 800d050:	08012a50 	.word	0x08012a50
 800d054:	08012a5c 	.word	0x08012a5c
 800d058:	08012a70 	.word	0x08012a70
 800d05c:	20000d54 	.word	0x20000d54
 800d060:	20000008 	.word	0x20000008

0800d064 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800d064:	b580      	push	{r7, lr}
 800d066:	b094      	sub	sp, #80	; 0x50
 800d068:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800d06a:	f107 0320 	add.w	r3, r7, #32
 800d06e:	2230      	movs	r2, #48	; 0x30
 800d070:	2100      	movs	r1, #0
 800d072:	4618      	mov	r0, r3
 800d074:	f004 f9c8 	bl	8011408 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800d078:	f107 030c 	add.w	r3, r7, #12
 800d07c:	2200      	movs	r2, #0
 800d07e:	601a      	str	r2, [r3, #0]
 800d080:	605a      	str	r2, [r3, #4]
 800d082:	609a      	str	r2, [r3, #8]
 800d084:	60da      	str	r2, [r3, #12]
 800d086:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800d088:	2300      	movs	r3, #0
 800d08a:	60bb      	str	r3, [r7, #8]
 800d08c:	4b28      	ldr	r3, [pc, #160]	; (800d130 <SystemClock_Config+0xcc>)
 800d08e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d090:	4a27      	ldr	r2, [pc, #156]	; (800d130 <SystemClock_Config+0xcc>)
 800d092:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d096:	6413      	str	r3, [r2, #64]	; 0x40
 800d098:	4b25      	ldr	r3, [pc, #148]	; (800d130 <SystemClock_Config+0xcc>)
 800d09a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d09c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d0a0:	60bb      	str	r3, [r7, #8]
 800d0a2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800d0a4:	2300      	movs	r3, #0
 800d0a6:	607b      	str	r3, [r7, #4]
 800d0a8:	4b22      	ldr	r3, [pc, #136]	; (800d134 <SystemClock_Config+0xd0>)
 800d0aa:	681b      	ldr	r3, [r3, #0]
 800d0ac:	4a21      	ldr	r2, [pc, #132]	; (800d134 <SystemClock_Config+0xd0>)
 800d0ae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800d0b2:	6013      	str	r3, [r2, #0]
 800d0b4:	4b1f      	ldr	r3, [pc, #124]	; (800d134 <SystemClock_Config+0xd0>)
 800d0b6:	681b      	ldr	r3, [r3, #0]
 800d0b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d0bc:	607b      	str	r3, [r7, #4]
 800d0be:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800d0c0:	2302      	movs	r3, #2
 800d0c2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800d0c4:	2301      	movs	r3, #1
 800d0c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800d0c8:	2310      	movs	r3, #16
 800d0ca:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800d0cc:	2302      	movs	r3, #2
 800d0ce:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800d0d0:	2300      	movs	r3, #0
 800d0d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800d0d4:	2308      	movs	r3, #8
 800d0d6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800d0d8:	23a8      	movs	r3, #168	; 0xa8
 800d0da:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800d0dc:	2302      	movs	r3, #2
 800d0de:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800d0e0:	2304      	movs	r3, #4
 800d0e2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800d0e4:	f107 0320 	add.w	r3, r7, #32
 800d0e8:	4618      	mov	r0, r3
 800d0ea:	f7f5 f925 	bl	8002338 <HAL_RCC_OscConfig>
 800d0ee:	4603      	mov	r3, r0
 800d0f0:	2b00      	cmp	r3, #0
 800d0f2:	d001      	beq.n	800d0f8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800d0f4:	f000 fbd1 	bl	800d89a <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800d0f8:	230f      	movs	r3, #15
 800d0fa:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800d0fc:	2302      	movs	r3, #2
 800d0fe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800d100:	2300      	movs	r3, #0
 800d102:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800d104:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800d108:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800d10a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d10e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800d110:	f107 030c 	add.w	r3, r7, #12
 800d114:	2105      	movs	r1, #5
 800d116:	4618      	mov	r0, r3
 800d118:	f7f5 fb50 	bl	80027bc <HAL_RCC_ClockConfig>
 800d11c:	4603      	mov	r3, r0
 800d11e:	2b00      	cmp	r3, #0
 800d120:	d001      	beq.n	800d126 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800d122:	f000 fbba 	bl	800d89a <Error_Handler>
  }
}
 800d126:	bf00      	nop
 800d128:	3750      	adds	r7, #80	; 0x50
 800d12a:	46bd      	mov	sp, r7
 800d12c:	bd80      	pop	{r7, pc}
 800d12e:	bf00      	nop
 800d130:	40023800 	.word	0x40023800
 800d134:	40007000 	.word	0x40007000

0800d138 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800d138:	b580      	push	{r7, lr}
 800d13a:	b084      	sub	sp, #16
 800d13c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800d13e:	463b      	mov	r3, r7
 800d140:	2200      	movs	r2, #0
 800d142:	601a      	str	r2, [r3, #0]
 800d144:	605a      	str	r2, [r3, #4]
 800d146:	609a      	str	r2, [r3, #8]
 800d148:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 800d14a:	4b21      	ldr	r3, [pc, #132]	; (800d1d0 <MX_ADC1_Init+0x98>)
 800d14c:	4a21      	ldr	r2, [pc, #132]	; (800d1d4 <MX_ADC1_Init+0x9c>)
 800d14e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800d150:	4b1f      	ldr	r3, [pc, #124]	; (800d1d0 <MX_ADC1_Init+0x98>)
 800d152:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800d156:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800d158:	4b1d      	ldr	r3, [pc, #116]	; (800d1d0 <MX_ADC1_Init+0x98>)
 800d15a:	2200      	movs	r2, #0
 800d15c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800d15e:	4b1c      	ldr	r3, [pc, #112]	; (800d1d0 <MX_ADC1_Init+0x98>)
 800d160:	2200      	movs	r2, #0
 800d162:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800d164:	4b1a      	ldr	r3, [pc, #104]	; (800d1d0 <MX_ADC1_Init+0x98>)
 800d166:	2200      	movs	r2, #0
 800d168:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800d16a:	4b19      	ldr	r3, [pc, #100]	; (800d1d0 <MX_ADC1_Init+0x98>)
 800d16c:	2200      	movs	r2, #0
 800d16e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800d172:	4b17      	ldr	r3, [pc, #92]	; (800d1d0 <MX_ADC1_Init+0x98>)
 800d174:	2200      	movs	r2, #0
 800d176:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800d178:	4b15      	ldr	r3, [pc, #84]	; (800d1d0 <MX_ADC1_Init+0x98>)
 800d17a:	4a17      	ldr	r2, [pc, #92]	; (800d1d8 <MX_ADC1_Init+0xa0>)
 800d17c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800d17e:	4b14      	ldr	r3, [pc, #80]	; (800d1d0 <MX_ADC1_Init+0x98>)
 800d180:	2200      	movs	r2, #0
 800d182:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800d184:	4b12      	ldr	r3, [pc, #72]	; (800d1d0 <MX_ADC1_Init+0x98>)
 800d186:	2201      	movs	r2, #1
 800d188:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800d18a:	4b11      	ldr	r3, [pc, #68]	; (800d1d0 <MX_ADC1_Init+0x98>)
 800d18c:	2200      	movs	r2, #0
 800d18e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800d192:	4b0f      	ldr	r3, [pc, #60]	; (800d1d0 <MX_ADC1_Init+0x98>)
 800d194:	2201      	movs	r2, #1
 800d196:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800d198:	480d      	ldr	r0, [pc, #52]	; (800d1d0 <MX_ADC1_Init+0x98>)
 800d19a:	f7f3 ff61 	bl	8001060 <HAL_ADC_Init>
 800d19e:	4603      	mov	r3, r0
 800d1a0:	2b00      	cmp	r3, #0
 800d1a2:	d001      	beq.n	800d1a8 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800d1a4:	f000 fb79 	bl	800d89a <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800d1a8:	2300      	movs	r3, #0
 800d1aa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800d1ac:	2301      	movs	r3, #1
 800d1ae:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800d1b0:	2300      	movs	r3, #0
 800d1b2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800d1b4:	463b      	mov	r3, r7
 800d1b6:	4619      	mov	r1, r3
 800d1b8:	4805      	ldr	r0, [pc, #20]	; (800d1d0 <MX_ADC1_Init+0x98>)
 800d1ba:	f7f4 f8ed 	bl	8001398 <HAL_ADC_ConfigChannel>
 800d1be:	4603      	mov	r3, r0
 800d1c0:	2b00      	cmp	r3, #0
 800d1c2:	d001      	beq.n	800d1c8 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800d1c4:	f000 fb69 	bl	800d89a <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800d1c8:	bf00      	nop
 800d1ca:	3710      	adds	r7, #16
 800d1cc:	46bd      	mov	sp, r7
 800d1ce:	bd80      	pop	{r7, pc}
 800d1d0:	20000b00 	.word	0x20000b00
 800d1d4:	40012000 	.word	0x40012000
 800d1d8:	0f000001 	.word	0x0f000001

0800d1dc <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 800d1dc:	b580      	push	{r7, lr}
 800d1de:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 800d1e0:	4b17      	ldr	r3, [pc, #92]	; (800d240 <MX_SPI3_Init+0x64>)
 800d1e2:	4a18      	ldr	r2, [pc, #96]	; (800d244 <MX_SPI3_Init+0x68>)
 800d1e4:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800d1e6:	4b16      	ldr	r3, [pc, #88]	; (800d240 <MX_SPI3_Init+0x64>)
 800d1e8:	f44f 7282 	mov.w	r2, #260	; 0x104
 800d1ec:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800d1ee:	4b14      	ldr	r3, [pc, #80]	; (800d240 <MX_SPI3_Init+0x64>)
 800d1f0:	2200      	movs	r2, #0
 800d1f2:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 800d1f4:	4b12      	ldr	r3, [pc, #72]	; (800d240 <MX_SPI3_Init+0x64>)
 800d1f6:	2200      	movs	r2, #0
 800d1f8:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800d1fa:	4b11      	ldr	r3, [pc, #68]	; (800d240 <MX_SPI3_Init+0x64>)
 800d1fc:	2200      	movs	r2, #0
 800d1fe:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800d200:	4b0f      	ldr	r3, [pc, #60]	; (800d240 <MX_SPI3_Init+0x64>)
 800d202:	2200      	movs	r2, #0
 800d204:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800d206:	4b0e      	ldr	r3, [pc, #56]	; (800d240 <MX_SPI3_Init+0x64>)
 800d208:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d20c:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800d20e:	4b0c      	ldr	r3, [pc, #48]	; (800d240 <MX_SPI3_Init+0x64>)
 800d210:	2218      	movs	r2, #24
 800d212:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800d214:	4b0a      	ldr	r3, [pc, #40]	; (800d240 <MX_SPI3_Init+0x64>)
 800d216:	2200      	movs	r2, #0
 800d218:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800d21a:	4b09      	ldr	r3, [pc, #36]	; (800d240 <MX_SPI3_Init+0x64>)
 800d21c:	2200      	movs	r2, #0
 800d21e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800d220:	4b07      	ldr	r3, [pc, #28]	; (800d240 <MX_SPI3_Init+0x64>)
 800d222:	2200      	movs	r2, #0
 800d224:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 800d226:	4b06      	ldr	r3, [pc, #24]	; (800d240 <MX_SPI3_Init+0x64>)
 800d228:	220a      	movs	r2, #10
 800d22a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800d22c:	4804      	ldr	r0, [pc, #16]	; (800d240 <MX_SPI3_Init+0x64>)
 800d22e:	f7f5 fc8d 	bl	8002b4c <HAL_SPI_Init>
 800d232:	4603      	mov	r3, r0
 800d234:	2b00      	cmp	r3, #0
 800d236:	d001      	beq.n	800d23c <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 800d238:	f000 fb2f 	bl	800d89a <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800d23c:	bf00      	nop
 800d23e:	bd80      	pop	{r7, pc}
 800d240:	20000144 	.word	0x20000144
 800d244:	40003c00 	.word	0x40003c00

0800d248 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800d248:	b580      	push	{r7, lr}
 800d24a:	b08e      	sub	sp, #56	; 0x38
 800d24c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800d24e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800d252:	2200      	movs	r2, #0
 800d254:	601a      	str	r2, [r3, #0]
 800d256:	605a      	str	r2, [r3, #4]
 800d258:	609a      	str	r2, [r3, #8]
 800d25a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800d25c:	f107 0320 	add.w	r3, r7, #32
 800d260:	2200      	movs	r2, #0
 800d262:	601a      	str	r2, [r3, #0]
 800d264:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800d266:	1d3b      	adds	r3, r7, #4
 800d268:	2200      	movs	r2, #0
 800d26a:	601a      	str	r2, [r3, #0]
 800d26c:	605a      	str	r2, [r3, #4]
 800d26e:	609a      	str	r2, [r3, #8]
 800d270:	60da      	str	r2, [r3, #12]
 800d272:	611a      	str	r2, [r3, #16]
 800d274:	615a      	str	r2, [r3, #20]
 800d276:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800d278:	4b32      	ldr	r3, [pc, #200]	; (800d344 <MX_TIM2_Init+0xfc>)
 800d27a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800d27e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800d280:	4b30      	ldr	r3, [pc, #192]	; (800d344 <MX_TIM2_Init+0xfc>)
 800d282:	2200      	movs	r2, #0
 800d284:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800d286:	4b2f      	ldr	r3, [pc, #188]	; (800d344 <MX_TIM2_Init+0xfc>)
 800d288:	2200      	movs	r2, #0
 800d28a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 800d28c:	4b2d      	ldr	r3, [pc, #180]	; (800d344 <MX_TIM2_Init+0xfc>)
 800d28e:	f240 32e7 	movw	r2, #999	; 0x3e7
 800d292:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800d294:	4b2b      	ldr	r3, [pc, #172]	; (800d344 <MX_TIM2_Init+0xfc>)
 800d296:	2200      	movs	r2, #0
 800d298:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800d29a:	4b2a      	ldr	r3, [pc, #168]	; (800d344 <MX_TIM2_Init+0xfc>)
 800d29c:	2200      	movs	r2, #0
 800d29e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800d2a0:	4828      	ldr	r0, [pc, #160]	; (800d344 <MX_TIM2_Init+0xfc>)
 800d2a2:	f7f6 f9a7 	bl	80035f4 <HAL_TIM_Base_Init>
 800d2a6:	4603      	mov	r3, r0
 800d2a8:	2b00      	cmp	r3, #0
 800d2aa:	d001      	beq.n	800d2b0 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 800d2ac:	f000 faf5 	bl	800d89a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800d2b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d2b4:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800d2b6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800d2ba:	4619      	mov	r1, r3
 800d2bc:	4821      	ldr	r0, [pc, #132]	; (800d344 <MX_TIM2_Init+0xfc>)
 800d2be:	f7f6 fd4b 	bl	8003d58 <HAL_TIM_ConfigClockSource>
 800d2c2:	4603      	mov	r3, r0
 800d2c4:	2b00      	cmp	r3, #0
 800d2c6:	d001      	beq.n	800d2cc <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 800d2c8:	f000 fae7 	bl	800d89a <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800d2cc:	481d      	ldr	r0, [pc, #116]	; (800d344 <MX_TIM2_Init+0xfc>)
 800d2ce:	f7f6 f9e0 	bl	8003692 <HAL_TIM_PWM_Init>
 800d2d2:	4603      	mov	r3, r0
 800d2d4:	2b00      	cmp	r3, #0
 800d2d6:	d001      	beq.n	800d2dc <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 800d2d8:	f000 fadf 	bl	800d89a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800d2dc:	2300      	movs	r3, #0
 800d2de:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800d2e0:	2300      	movs	r3, #0
 800d2e2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800d2e4:	f107 0320 	add.w	r3, r7, #32
 800d2e8:	4619      	mov	r1, r3
 800d2ea:	4816      	ldr	r0, [pc, #88]	; (800d344 <MX_TIM2_Init+0xfc>)
 800d2ec:	f7f7 f923 	bl	8004536 <HAL_TIMEx_MasterConfigSynchronization>
 800d2f0:	4603      	mov	r3, r0
 800d2f2:	2b00      	cmp	r3, #0
 800d2f4:	d001      	beq.n	800d2fa <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800d2f6:	f000 fad0 	bl	800d89a <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800d2fa:	2360      	movs	r3, #96	; 0x60
 800d2fc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800d2fe:	2300      	movs	r3, #0
 800d300:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800d302:	2300      	movs	r3, #0
 800d304:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800d306:	2300      	movs	r3, #0
 800d308:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800d30a:	1d3b      	adds	r3, r7, #4
 800d30c:	2200      	movs	r2, #0
 800d30e:	4619      	mov	r1, r3
 800d310:	480c      	ldr	r0, [pc, #48]	; (800d344 <MX_TIM2_Init+0xfc>)
 800d312:	f7f6 fc5b 	bl	8003bcc <HAL_TIM_PWM_ConfigChannel>
 800d316:	4603      	mov	r3, r0
 800d318:	2b00      	cmp	r3, #0
 800d31a:	d001      	beq.n	800d320 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 800d31c:	f000 fabd 	bl	800d89a <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800d320:	1d3b      	adds	r3, r7, #4
 800d322:	220c      	movs	r2, #12
 800d324:	4619      	mov	r1, r3
 800d326:	4807      	ldr	r0, [pc, #28]	; (800d344 <MX_TIM2_Init+0xfc>)
 800d328:	f7f6 fc50 	bl	8003bcc <HAL_TIM_PWM_ConfigChannel>
 800d32c:	4603      	mov	r3, r0
 800d32e:	2b00      	cmp	r3, #0
 800d330:	d001      	beq.n	800d336 <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 800d332:	f000 fab2 	bl	800d89a <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800d336:	4803      	ldr	r0, [pc, #12]	; (800d344 <MX_TIM2_Init+0xfc>)
 800d338:	f003 fe44 	bl	8010fc4 <HAL_TIM_MspPostInit>

}
 800d33c:	bf00      	nop
 800d33e:	3738      	adds	r7, #56	; 0x38
 800d340:	46bd      	mov	sp, r7
 800d342:	bd80      	pop	{r7, pc}
 800d344:	20000c14 	.word	0x20000c14

0800d348 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800d348:	b580      	push	{r7, lr}
 800d34a:	b08e      	sub	sp, #56	; 0x38
 800d34c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800d34e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800d352:	2200      	movs	r2, #0
 800d354:	601a      	str	r2, [r3, #0]
 800d356:	605a      	str	r2, [r3, #4]
 800d358:	609a      	str	r2, [r3, #8]
 800d35a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800d35c:	f107 0320 	add.w	r3, r7, #32
 800d360:	2200      	movs	r2, #0
 800d362:	601a      	str	r2, [r3, #0]
 800d364:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800d366:	1d3b      	adds	r3, r7, #4
 800d368:	2200      	movs	r2, #0
 800d36a:	601a      	str	r2, [r3, #0]
 800d36c:	605a      	str	r2, [r3, #4]
 800d36e:	609a      	str	r2, [r3, #8]
 800d370:	60da      	str	r2, [r3, #12]
 800d372:	611a      	str	r2, [r3, #16]
 800d374:	615a      	str	r2, [r3, #20]
 800d376:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800d378:	4b2c      	ldr	r3, [pc, #176]	; (800d42c <MX_TIM3_Init+0xe4>)
 800d37a:	4a2d      	ldr	r2, [pc, #180]	; (800d430 <MX_TIM3_Init+0xe8>)
 800d37c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 64-1;
 800d37e:	4b2b      	ldr	r3, [pc, #172]	; (800d42c <MX_TIM3_Init+0xe4>)
 800d380:	223f      	movs	r2, #63	; 0x3f
 800d382:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800d384:	4b29      	ldr	r3, [pc, #164]	; (800d42c <MX_TIM3_Init+0xe4>)
 800d386:	2200      	movs	r2, #0
 800d388:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0;
 800d38a:	4b28      	ldr	r3, [pc, #160]	; (800d42c <MX_TIM3_Init+0xe4>)
 800d38c:	2200      	movs	r2, #0
 800d38e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800d390:	4b26      	ldr	r3, [pc, #152]	; (800d42c <MX_TIM3_Init+0xe4>)
 800d392:	2200      	movs	r2, #0
 800d394:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800d396:	4b25      	ldr	r3, [pc, #148]	; (800d42c <MX_TIM3_Init+0xe4>)
 800d398:	2200      	movs	r2, #0
 800d39a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800d39c:	4823      	ldr	r0, [pc, #140]	; (800d42c <MX_TIM3_Init+0xe4>)
 800d39e:	f7f6 f929 	bl	80035f4 <HAL_TIM_Base_Init>
 800d3a2:	4603      	mov	r3, r0
 800d3a4:	2b00      	cmp	r3, #0
 800d3a6:	d001      	beq.n	800d3ac <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 800d3a8:	f000 fa77 	bl	800d89a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800d3ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d3b0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800d3b2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800d3b6:	4619      	mov	r1, r3
 800d3b8:	481c      	ldr	r0, [pc, #112]	; (800d42c <MX_TIM3_Init+0xe4>)
 800d3ba:	f7f6 fccd 	bl	8003d58 <HAL_TIM_ConfigClockSource>
 800d3be:	4603      	mov	r3, r0
 800d3c0:	2b00      	cmp	r3, #0
 800d3c2:	d001      	beq.n	800d3c8 <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 800d3c4:	f000 fa69 	bl	800d89a <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800d3c8:	4818      	ldr	r0, [pc, #96]	; (800d42c <MX_TIM3_Init+0xe4>)
 800d3ca:	f7f6 f962 	bl	8003692 <HAL_TIM_PWM_Init>
 800d3ce:	4603      	mov	r3, r0
 800d3d0:	2b00      	cmp	r3, #0
 800d3d2:	d001      	beq.n	800d3d8 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 800d3d4:	f000 fa61 	bl	800d89a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800d3d8:	2300      	movs	r3, #0
 800d3da:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800d3dc:	2300      	movs	r3, #0
 800d3de:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800d3e0:	f107 0320 	add.w	r3, r7, #32
 800d3e4:	4619      	mov	r1, r3
 800d3e6:	4811      	ldr	r0, [pc, #68]	; (800d42c <MX_TIM3_Init+0xe4>)
 800d3e8:	f7f7 f8a5 	bl	8004536 <HAL_TIMEx_MasterConfigSynchronization>
 800d3ec:	4603      	mov	r3, r0
 800d3ee:	2b00      	cmp	r3, #0
 800d3f0:	d001      	beq.n	800d3f6 <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 800d3f2:	f000 fa52 	bl	800d89a <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800d3f6:	2360      	movs	r3, #96	; 0x60
 800d3f8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800d3fa:	2300      	movs	r3, #0
 800d3fc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800d3fe:	2300      	movs	r3, #0
 800d400:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800d402:	2300      	movs	r3, #0
 800d404:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800d406:	1d3b      	adds	r3, r7, #4
 800d408:	2204      	movs	r2, #4
 800d40a:	4619      	mov	r1, r3
 800d40c:	4807      	ldr	r0, [pc, #28]	; (800d42c <MX_TIM3_Init+0xe4>)
 800d40e:	f7f6 fbdd 	bl	8003bcc <HAL_TIM_PWM_ConfigChannel>
 800d412:	4603      	mov	r3, r0
 800d414:	2b00      	cmp	r3, #0
 800d416:	d001      	beq.n	800d41c <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 800d418:	f000 fa3f 	bl	800d89a <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800d41c:	4803      	ldr	r0, [pc, #12]	; (800d42c <MX_TIM3_Init+0xe4>)
 800d41e:	f003 fdd1 	bl	8010fc4 <HAL_TIM_MspPostInit>

}
 800d422:	bf00      	nop
 800d424:	3738      	adds	r7, #56	; 0x38
 800d426:	46bd      	mov	sp, r7
 800d428:	bd80      	pop	{r7, pc}
 800d42a:	bf00      	nop
 800d42c:	20000aa4 	.word	0x20000aa4
 800d430:	40000400 	.word	0x40000400

0800d434 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800d434:	b580      	push	{r7, lr}
 800d436:	b08c      	sub	sp, #48	; 0x30
 800d438:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800d43a:	f107 030c 	add.w	r3, r7, #12
 800d43e:	2224      	movs	r2, #36	; 0x24
 800d440:	2100      	movs	r1, #0
 800d442:	4618      	mov	r0, r3
 800d444:	f003 ffe0 	bl	8011408 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800d448:	1d3b      	adds	r3, r7, #4
 800d44a:	2200      	movs	r2, #0
 800d44c:	601a      	str	r2, [r3, #0]
 800d44e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800d450:	4b20      	ldr	r3, [pc, #128]	; (800d4d4 <MX_TIM4_Init+0xa0>)
 800d452:	4a21      	ldr	r2, [pc, #132]	; (800d4d8 <MX_TIM4_Init+0xa4>)
 800d454:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800d456:	4b1f      	ldr	r3, [pc, #124]	; (800d4d4 <MX_TIM4_Init+0xa0>)
 800d458:	2200      	movs	r2, #0
 800d45a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800d45c:	4b1d      	ldr	r3, [pc, #116]	; (800d4d4 <MX_TIM4_Init+0xa0>)
 800d45e:	2200      	movs	r2, #0
 800d460:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800d462:	4b1c      	ldr	r3, [pc, #112]	; (800d4d4 <MX_TIM4_Init+0xa0>)
 800d464:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d468:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800d46a:	4b1a      	ldr	r3, [pc, #104]	; (800d4d4 <MX_TIM4_Init+0xa0>)
 800d46c:	2200      	movs	r2, #0
 800d46e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800d470:	4b18      	ldr	r3, [pc, #96]	; (800d4d4 <MX_TIM4_Init+0xa0>)
 800d472:	2200      	movs	r2, #0
 800d474:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800d476:	2303      	movs	r3, #3
 800d478:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800d47a:	2300      	movs	r3, #0
 800d47c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800d47e:	2301      	movs	r3, #1
 800d480:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800d482:	2300      	movs	r3, #0
 800d484:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800d486:	2300      	movs	r3, #0
 800d488:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800d48a:	2300      	movs	r3, #0
 800d48c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800d48e:	2301      	movs	r3, #1
 800d490:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800d492:	2300      	movs	r3, #0
 800d494:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800d496:	2300      	movs	r3, #0
 800d498:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 800d49a:	f107 030c 	add.w	r3, r7, #12
 800d49e:	4619      	mov	r1, r3
 800d4a0:	480c      	ldr	r0, [pc, #48]	; (800d4d4 <MX_TIM4_Init+0xa0>)
 800d4a2:	f7f6 f9c1 	bl	8003828 <HAL_TIM_Encoder_Init>
 800d4a6:	4603      	mov	r3, r0
 800d4a8:	2b00      	cmp	r3, #0
 800d4aa:	d001      	beq.n	800d4b0 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 800d4ac:	f000 f9f5 	bl	800d89a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800d4b0:	2300      	movs	r3, #0
 800d4b2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800d4b4:	2300      	movs	r3, #0
 800d4b6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800d4b8:	1d3b      	adds	r3, r7, #4
 800d4ba:	4619      	mov	r1, r3
 800d4bc:	4805      	ldr	r0, [pc, #20]	; (800d4d4 <MX_TIM4_Init+0xa0>)
 800d4be:	f7f7 f83a 	bl	8004536 <HAL_TIMEx_MasterConfigSynchronization>
 800d4c2:	4603      	mov	r3, r0
 800d4c4:	2b00      	cmp	r3, #0
 800d4c6:	d001      	beq.n	800d4cc <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 800d4c8:	f000 f9e7 	bl	800d89a <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800d4cc:	bf00      	nop
 800d4ce:	3730      	adds	r7, #48	; 0x30
 800d4d0:	46bd      	mov	sp, r7
 800d4d2:	bd80      	pop	{r7, pc}
 800d4d4:	2000030c 	.word	0x2000030c
 800d4d8:	40000800 	.word	0x40000800

0800d4dc <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 800d4dc:	b580      	push	{r7, lr}
 800d4de:	b082      	sub	sp, #8
 800d4e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800d4e2:	463b      	mov	r3, r7
 800d4e4:	2200      	movs	r2, #0
 800d4e6:	601a      	str	r2, [r3, #0]
 800d4e8:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800d4ea:	4b15      	ldr	r3, [pc, #84]	; (800d540 <MX_TIM6_Init+0x64>)
 800d4ec:	4a15      	ldr	r2, [pc, #84]	; (800d544 <MX_TIM6_Init+0x68>)
 800d4ee:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 84-1;
 800d4f0:	4b13      	ldr	r3, [pc, #76]	; (800d540 <MX_TIM6_Init+0x64>)
 800d4f2:	2253      	movs	r2, #83	; 0x53
 800d4f4:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800d4f6:	4b12      	ldr	r3, [pc, #72]	; (800d540 <MX_TIM6_Init+0x64>)
 800d4f8:	2200      	movs	r2, #0
 800d4fa:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000-1;
 800d4fc:	4b10      	ldr	r3, [pc, #64]	; (800d540 <MX_TIM6_Init+0x64>)
 800d4fe:	f240 32e7 	movw	r2, #999	; 0x3e7
 800d502:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800d504:	4b0e      	ldr	r3, [pc, #56]	; (800d540 <MX_TIM6_Init+0x64>)
 800d506:	2200      	movs	r2, #0
 800d508:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800d50a:	480d      	ldr	r0, [pc, #52]	; (800d540 <MX_TIM6_Init+0x64>)
 800d50c:	f7f6 f872 	bl	80035f4 <HAL_TIM_Base_Init>
 800d510:	4603      	mov	r3, r0
 800d512:	2b00      	cmp	r3, #0
 800d514:	d001      	beq.n	800d51a <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 800d516:	f000 f9c0 	bl	800d89a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800d51a:	2300      	movs	r3, #0
 800d51c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800d51e:	2300      	movs	r3, #0
 800d520:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800d522:	463b      	mov	r3, r7
 800d524:	4619      	mov	r1, r3
 800d526:	4806      	ldr	r0, [pc, #24]	; (800d540 <MX_TIM6_Init+0x64>)
 800d528:	f7f7 f805 	bl	8004536 <HAL_TIMEx_MasterConfigSynchronization>
 800d52c:	4603      	mov	r3, r0
 800d52e:	2b00      	cmp	r3, #0
 800d530:	d001      	beq.n	800d536 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 800d532:	f000 f9b2 	bl	800d89a <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800d536:	bf00      	nop
 800d538:	3708      	adds	r7, #8
 800d53a:	46bd      	mov	sp, r7
 800d53c:	bd80      	pop	{r7, pc}
 800d53e:	bf00      	nop
 800d540:	20000bb4 	.word	0x20000bb4
 800d544:	40001000 	.word	0x40001000

0800d548 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 800d548:	b580      	push	{r7, lr}
 800d54a:	b08c      	sub	sp, #48	; 0x30
 800d54c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800d54e:	f107 030c 	add.w	r3, r7, #12
 800d552:	2224      	movs	r2, #36	; 0x24
 800d554:	2100      	movs	r1, #0
 800d556:	4618      	mov	r0, r3
 800d558:	f003 ff56 	bl	8011408 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800d55c:	1d3b      	adds	r3, r7, #4
 800d55e:	2200      	movs	r2, #0
 800d560:	601a      	str	r2, [r3, #0]
 800d562:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800d564:	4b22      	ldr	r3, [pc, #136]	; (800d5f0 <MX_TIM8_Init+0xa8>)
 800d566:	4a23      	ldr	r2, [pc, #140]	; (800d5f4 <MX_TIM8_Init+0xac>)
 800d568:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 800d56a:	4b21      	ldr	r3, [pc, #132]	; (800d5f0 <MX_TIM8_Init+0xa8>)
 800d56c:	2200      	movs	r2, #0
 800d56e:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800d570:	4b1f      	ldr	r3, [pc, #124]	; (800d5f0 <MX_TIM8_Init+0xa8>)
 800d572:	2200      	movs	r2, #0
 800d574:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 800d576:	4b1e      	ldr	r3, [pc, #120]	; (800d5f0 <MX_TIM8_Init+0xa8>)
 800d578:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d57c:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800d57e:	4b1c      	ldr	r3, [pc, #112]	; (800d5f0 <MX_TIM8_Init+0xa8>)
 800d580:	2200      	movs	r2, #0
 800d582:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800d584:	4b1a      	ldr	r3, [pc, #104]	; (800d5f0 <MX_TIM8_Init+0xa8>)
 800d586:	2200      	movs	r2, #0
 800d588:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800d58a:	4b19      	ldr	r3, [pc, #100]	; (800d5f0 <MX_TIM8_Init+0xa8>)
 800d58c:	2200      	movs	r2, #0
 800d58e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800d590:	2303      	movs	r3, #3
 800d592:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800d594:	2300      	movs	r3, #0
 800d596:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800d598:	2301      	movs	r3, #1
 800d59a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800d59c:	2300      	movs	r3, #0
 800d59e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800d5a0:	2300      	movs	r3, #0
 800d5a2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800d5a4:	2300      	movs	r3, #0
 800d5a6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800d5a8:	2301      	movs	r3, #1
 800d5aa:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800d5ac:	2300      	movs	r3, #0
 800d5ae:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800d5b0:	2300      	movs	r3, #0
 800d5b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 800d5b4:	f107 030c 	add.w	r3, r7, #12
 800d5b8:	4619      	mov	r1, r3
 800d5ba:	480d      	ldr	r0, [pc, #52]	; (800d5f0 <MX_TIM8_Init+0xa8>)
 800d5bc:	f7f6 f934 	bl	8003828 <HAL_TIM_Encoder_Init>
 800d5c0:	4603      	mov	r3, r0
 800d5c2:	2b00      	cmp	r3, #0
 800d5c4:	d001      	beq.n	800d5ca <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 800d5c6:	f000 f968 	bl	800d89a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800d5ca:	2300      	movs	r3, #0
 800d5cc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800d5ce:	2300      	movs	r3, #0
 800d5d0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800d5d2:	1d3b      	adds	r3, r7, #4
 800d5d4:	4619      	mov	r1, r3
 800d5d6:	4806      	ldr	r0, [pc, #24]	; (800d5f0 <MX_TIM8_Init+0xa8>)
 800d5d8:	f7f6 ffad 	bl	8004536 <HAL_TIMEx_MasterConfigSynchronization>
 800d5dc:	4603      	mov	r3, r0
 800d5de:	2b00      	cmp	r3, #0
 800d5e0:	d001      	beq.n	800d5e6 <MX_TIM8_Init+0x9e>
  {
    Error_Handler();
 800d5e2:	f000 f95a 	bl	800d89a <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 800d5e6:	bf00      	nop
 800d5e8:	3730      	adds	r7, #48	; 0x30
 800d5ea:	46bd      	mov	sp, r7
 800d5ec:	bd80      	pop	{r7, pc}
 800d5ee:	bf00      	nop
 800d5f0:	200002cc 	.word	0x200002cc
 800d5f4:	40010400 	.word	0x40010400

0800d5f8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800d5f8:	b580      	push	{r7, lr}
 800d5fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800d5fc:	4b11      	ldr	r3, [pc, #68]	; (800d644 <MX_USART1_UART_Init+0x4c>)
 800d5fe:	4a12      	ldr	r2, [pc, #72]	; (800d648 <MX_USART1_UART_Init+0x50>)
 800d600:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800d602:	4b10      	ldr	r3, [pc, #64]	; (800d644 <MX_USART1_UART_Init+0x4c>)
 800d604:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800d608:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800d60a:	4b0e      	ldr	r3, [pc, #56]	; (800d644 <MX_USART1_UART_Init+0x4c>)
 800d60c:	2200      	movs	r2, #0
 800d60e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800d610:	4b0c      	ldr	r3, [pc, #48]	; (800d644 <MX_USART1_UART_Init+0x4c>)
 800d612:	2200      	movs	r2, #0
 800d614:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800d616:	4b0b      	ldr	r3, [pc, #44]	; (800d644 <MX_USART1_UART_Init+0x4c>)
 800d618:	2200      	movs	r2, #0
 800d61a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800d61c:	4b09      	ldr	r3, [pc, #36]	; (800d644 <MX_USART1_UART_Init+0x4c>)
 800d61e:	220c      	movs	r2, #12
 800d620:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800d622:	4b08      	ldr	r3, [pc, #32]	; (800d644 <MX_USART1_UART_Init+0x4c>)
 800d624:	2200      	movs	r2, #0
 800d626:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800d628:	4b06      	ldr	r3, [pc, #24]	; (800d644 <MX_USART1_UART_Init+0x4c>)
 800d62a:	2200      	movs	r2, #0
 800d62c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800d62e:	4805      	ldr	r0, [pc, #20]	; (800d644 <MX_USART1_UART_Init+0x4c>)
 800d630:	f7f6 ffda 	bl	80045e8 <HAL_UART_Init>
 800d634:	4603      	mov	r3, r0
 800d636:	2b00      	cmp	r3, #0
 800d638:	d001      	beq.n	800d63e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800d63a:	f000 f92e 	bl	800d89a <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800d63e:	bf00      	nop
 800d640:	bd80      	pop	{r7, pc}
 800d642:	bf00      	nop
 800d644:	20000b64 	.word	0x20000b64
 800d648:	40011000 	.word	0x40011000

0800d64c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800d64c:	b580      	push	{r7, lr}
 800d64e:	b08a      	sub	sp, #40	; 0x28
 800d650:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d652:	f107 0314 	add.w	r3, r7, #20
 800d656:	2200      	movs	r2, #0
 800d658:	601a      	str	r2, [r3, #0]
 800d65a:	605a      	str	r2, [r3, #4]
 800d65c:	609a      	str	r2, [r3, #8]
 800d65e:	60da      	str	r2, [r3, #12]
 800d660:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800d662:	2300      	movs	r3, #0
 800d664:	613b      	str	r3, [r7, #16]
 800d666:	4b53      	ldr	r3, [pc, #332]	; (800d7b4 <MX_GPIO_Init+0x168>)
 800d668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d66a:	4a52      	ldr	r2, [pc, #328]	; (800d7b4 <MX_GPIO_Init+0x168>)
 800d66c:	f043 0304 	orr.w	r3, r3, #4
 800d670:	6313      	str	r3, [r2, #48]	; 0x30
 800d672:	4b50      	ldr	r3, [pc, #320]	; (800d7b4 <MX_GPIO_Init+0x168>)
 800d674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d676:	f003 0304 	and.w	r3, r3, #4
 800d67a:	613b      	str	r3, [r7, #16]
 800d67c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800d67e:	2300      	movs	r3, #0
 800d680:	60fb      	str	r3, [r7, #12]
 800d682:	4b4c      	ldr	r3, [pc, #304]	; (800d7b4 <MX_GPIO_Init+0x168>)
 800d684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d686:	4a4b      	ldr	r2, [pc, #300]	; (800d7b4 <MX_GPIO_Init+0x168>)
 800d688:	f043 0301 	orr.w	r3, r3, #1
 800d68c:	6313      	str	r3, [r2, #48]	; 0x30
 800d68e:	4b49      	ldr	r3, [pc, #292]	; (800d7b4 <MX_GPIO_Init+0x168>)
 800d690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d692:	f003 0301 	and.w	r3, r3, #1
 800d696:	60fb      	str	r3, [r7, #12]
 800d698:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800d69a:	2300      	movs	r3, #0
 800d69c:	60bb      	str	r3, [r7, #8]
 800d69e:	4b45      	ldr	r3, [pc, #276]	; (800d7b4 <MX_GPIO_Init+0x168>)
 800d6a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d6a2:	4a44      	ldr	r2, [pc, #272]	; (800d7b4 <MX_GPIO_Init+0x168>)
 800d6a4:	f043 0302 	orr.w	r3, r3, #2
 800d6a8:	6313      	str	r3, [r2, #48]	; 0x30
 800d6aa:	4b42      	ldr	r3, [pc, #264]	; (800d7b4 <MX_GPIO_Init+0x168>)
 800d6ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d6ae:	f003 0302 	and.w	r3, r3, #2
 800d6b2:	60bb      	str	r3, [r7, #8]
 800d6b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800d6b6:	2300      	movs	r3, #0
 800d6b8:	607b      	str	r3, [r7, #4]
 800d6ba:	4b3e      	ldr	r3, [pc, #248]	; (800d7b4 <MX_GPIO_Init+0x168>)
 800d6bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d6be:	4a3d      	ldr	r2, [pc, #244]	; (800d7b4 <MX_GPIO_Init+0x168>)
 800d6c0:	f043 0308 	orr.w	r3, r3, #8
 800d6c4:	6313      	str	r3, [r2, #48]	; 0x30
 800d6c6:	4b3b      	ldr	r3, [pc, #236]	; (800d7b4 <MX_GPIO_Init+0x168>)
 800d6c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d6ca:	f003 0308 	and.w	r3, r3, #8
 800d6ce:	607b      	str	r3, [r7, #4]
 800d6d0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_2 
 800d6d2:	2200      	movs	r2, #0
 800d6d4:	f24e 213c 	movw	r1, #57916	; 0xe23c
 800d6d8:	4837      	ldr	r0, [pc, #220]	; (800d7b8 <MX_GPIO_Init+0x16c>)
 800d6da:	f7f4 fe13 	bl	8002304 <HAL_GPIO_WritePin>
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8, GPIO_PIN_RESET);
 800d6de:	2200      	movs	r2, #0
 800d6e0:	f44f 71e8 	mov.w	r1, #464	; 0x1d0
 800d6e4:	4835      	ldr	r0, [pc, #212]	; (800d7bc <MX_GPIO_Init+0x170>)
 800d6e6:	f7f4 fe0d 	bl	8002304 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_13 
 800d6ea:	2200      	movs	r2, #0
 800d6ec:	f242 7103 	movw	r1, #9987	; 0x2703
 800d6f0:	4833      	ldr	r0, [pc, #204]	; (800d7c0 <MX_GPIO_Init+0x174>)
 800d6f2:	f7f4 fe07 	bl	8002304 <HAL_GPIO_WritePin>
                          |GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 800d6f6:	2200      	movs	r2, #0
 800d6f8:	2104      	movs	r1, #4
 800d6fa:	4832      	ldr	r0, [pc, #200]	; (800d7c4 <MX_GPIO_Init+0x178>)
 800d6fc:	f7f4 fe02 	bl	8002304 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 PC2 
                           PC3 PC4 PC5 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_2 
 800d700:	f24e 233c 	movw	r3, #57916	; 0xe23c
 800d704:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800d706:	2301      	movs	r3, #1
 800d708:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d70a:	2300      	movs	r3, #0
 800d70c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d70e:	2300      	movs	r3, #0
 800d710:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800d712:	f107 0314 	add.w	r3, r7, #20
 800d716:	4619      	mov	r1, r3
 800d718:	4827      	ldr	r0, [pc, #156]	; (800d7b8 <MX_GPIO_Init+0x16c>)
 800d71a:	f7f4 fc41 	bl	8001fa0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA6 PA7 PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 800d71e:	f44f 73e8 	mov.w	r3, #464	; 0x1d0
 800d722:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800d724:	2301      	movs	r3, #1
 800d726:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d728:	2300      	movs	r3, #0
 800d72a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d72c:	2300      	movs	r3, #0
 800d72e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d730:	f107 0314 	add.w	r3, r7, #20
 800d734:	4619      	mov	r1, r3
 800d736:	4821      	ldr	r0, [pc, #132]	; (800d7bc <MX_GPIO_Init+0x170>)
 800d738:	f7f4 fc32 	bl	8001fa0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB10 PB13 
                           PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_13 
 800d73c:	f242 7303 	movw	r3, #9987	; 0x2703
 800d740:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800d742:	2301      	movs	r3, #1
 800d744:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d746:	2300      	movs	r3, #0
 800d748:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d74a:	2300      	movs	r3, #0
 800d74c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800d74e:	f107 0314 	add.w	r3, r7, #20
 800d752:	4619      	mov	r1, r3
 800d754:	481a      	ldr	r0, [pc, #104]	; (800d7c0 <MX_GPIO_Init+0x174>)
 800d756:	f7f4 fc23 	bl	8001fa0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 800d75a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d75e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800d760:	2300      	movs	r3, #0
 800d762:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800d764:	2301      	movs	r3, #1
 800d766:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800d768:	f107 0314 	add.w	r3, r7, #20
 800d76c:	4619      	mov	r1, r3
 800d76e:	4814      	ldr	r0, [pc, #80]	; (800d7c0 <MX_GPIO_Init+0x174>)
 800d770:	f7f4 fc16 	bl	8001fa0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 800d774:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d778:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800d77a:	2300      	movs	r3, #0
 800d77c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d77e:	2300      	movs	r3, #0
 800d780:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d782:	f107 0314 	add.w	r3, r7, #20
 800d786:	4619      	mov	r1, r3
 800d788:	480c      	ldr	r0, [pc, #48]	; (800d7bc <MX_GPIO_Init+0x170>)
 800d78a:	f7f4 fc09 	bl	8001fa0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800d78e:	2304      	movs	r3, #4
 800d790:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800d792:	2301      	movs	r3, #1
 800d794:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d796:	2300      	movs	r3, #0
 800d798:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d79a:	2300      	movs	r3, #0
 800d79c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800d79e:	f107 0314 	add.w	r3, r7, #20
 800d7a2:	4619      	mov	r1, r3
 800d7a4:	4807      	ldr	r0, [pc, #28]	; (800d7c4 <MX_GPIO_Init+0x178>)
 800d7a6:	f7f4 fbfb 	bl	8001fa0 <HAL_GPIO_Init>

}
 800d7aa:	bf00      	nop
 800d7ac:	3728      	adds	r7, #40	; 0x28
 800d7ae:	46bd      	mov	sp, r7
 800d7b0:	bd80      	pop	{r7, pc}
 800d7b2:	bf00      	nop
 800d7b4:	40023800 	.word	0x40023800
 800d7b8:	40020800 	.word	0x40020800
 800d7bc:	40020000 	.word	0x40020000
 800d7c0:	40020400 	.word	0x40020400
 800d7c4:	40020c00 	.word	0x40020c00

0800d7c8 <buzzer>:

/* USER CODE BEGIN 4 */
void buzzer(int sound, int length){
 800d7c8:	b580      	push	{r7, lr}
 800d7ca:	b08a      	sub	sp, #40	; 0x28
 800d7cc:	af00      	add	r7, sp, #0
 800d7ce:	6078      	str	r0, [r7, #4]
 800d7d0:	6039      	str	r1, [r7, #0]
	TIM_OC_InitTypeDef ConfigOC;
	ConfigOC.OCMode = TIM_OCMODE_PWM1;
 800d7d2:	2360      	movs	r3, #96	; 0x60
 800d7d4:	60fb      	str	r3, [r7, #12]
	ConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800d7d6:	2300      	movs	r3, #0
 800d7d8:	617b      	str	r3, [r7, #20]
	ConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800d7da:	2300      	movs	r3, #0
 800d7dc:	61fb      	str	r3, [r7, #28]

	hz = 1000000 / sound;
 800d7de:	4a15      	ldr	r2, [pc, #84]	; (800d834 <buzzer+0x6c>)
 800d7e0:	687b      	ldr	r3, [r7, #4]
 800d7e2:	fb92 f3f3 	sdiv	r3, r2, r3
 800d7e6:	4a14      	ldr	r2, [pc, #80]	; (800d838 <buzzer+0x70>)
 800d7e8:	6013      	str	r3, [r2, #0]
	TIM3 -> ARR = hz;
 800d7ea:	4b13      	ldr	r3, [pc, #76]	; (800d838 <buzzer+0x70>)
 800d7ec:	681a      	ldr	r2, [r3, #0]
 800d7ee:	4b13      	ldr	r3, [pc, #76]	; (800d83c <buzzer+0x74>)
 800d7f0:	62da      	str	r2, [r3, #44]	; 0x2c
    ConfigOC.Pulse = hz / 10;
 800d7f2:	4b11      	ldr	r3, [pc, #68]	; (800d838 <buzzer+0x70>)
 800d7f4:	681b      	ldr	r3, [r3, #0]
 800d7f6:	4a12      	ldr	r2, [pc, #72]	; (800d840 <buzzer+0x78>)
 800d7f8:	fb82 1203 	smull	r1, r2, r2, r3
 800d7fc:	1092      	asrs	r2, r2, #2
 800d7fe:	17db      	asrs	r3, r3, #31
 800d800:	1ad3      	subs	r3, r2, r3
 800d802:	613b      	str	r3, [r7, #16]
    HAL_TIM_PWM_ConfigChannel(&htim3, &ConfigOC, TIM_CHANNEL_2);
 800d804:	f107 030c 	add.w	r3, r7, #12
 800d808:	2204      	movs	r2, #4
 800d80a:	4619      	mov	r1, r3
 800d80c:	480d      	ldr	r0, [pc, #52]	; (800d844 <buzzer+0x7c>)
 800d80e:	f7f6 f9dd 	bl	8003bcc <HAL_TIM_PWM_ConfigChannel>
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 800d812:	2104      	movs	r1, #4
 800d814:	480b      	ldr	r0, [pc, #44]	; (800d844 <buzzer+0x7c>)
 800d816:	f7f5 ff71 	bl	80036fc <HAL_TIM_PWM_Start>

	HAL_Delay(length);
 800d81a:	683b      	ldr	r3, [r7, #0]
 800d81c:	4618      	mov	r0, r3
 800d81e:	f7f3 fbfd 	bl	800101c <HAL_Delay>
    HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_2);
 800d822:	2104      	movs	r1, #4
 800d824:	4807      	ldr	r0, [pc, #28]	; (800d844 <buzzer+0x7c>)
 800d826:	f7f5 ffa7 	bl	8003778 <HAL_TIM_PWM_Stop>
}
 800d82a:	bf00      	nop
 800d82c:	3728      	adds	r7, #40	; 0x28
 800d82e:	46bd      	mov	sp, r7
 800d830:	bd80      	pop	{r7, pc}
 800d832:	bf00      	nop
 800d834:	000f4240 	.word	0x000f4240
 800d838:	200002c4 	.word	0x200002c4
 800d83c:	40000400 	.word	0x40000400
 800d840:	66666667 	.word	0x66666667
 800d844:	20000aa4 	.word	0x20000aa4

0800d848 <get_adc_value>:


int get_adc_value(ADC_HandleTypeDef *hadc, uint32_t channel){
 800d848:	b580      	push	{r7, lr}
 800d84a:	b086      	sub	sp, #24
 800d84c:	af00      	add	r7, sp, #0
 800d84e:	6078      	str	r0, [r7, #4]
 800d850:	6039      	str	r1, [r7, #0]

  ADC_ChannelConfTypeDef sConfig = {0};
 800d852:	f107 0308 	add.w	r3, r7, #8
 800d856:	2200      	movs	r2, #0
 800d858:	601a      	str	r2, [r3, #0]
 800d85a:	605a      	str	r2, [r3, #4]
 800d85c:	609a      	str	r2, [r3, #8]
 800d85e:	60da      	str	r2, [r3, #12]

  sConfig.Channel = channel;
 800d860:	683b      	ldr	r3, [r7, #0]
 800d862:	60bb      	str	r3, [r7, #8]
  sConfig.Rank = 1;
 800d864:	2301      	movs	r3, #1
 800d866:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800d868:	2300      	movs	r3, #0
 800d86a:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800d86c:	2300      	movs	r3, #0
 800d86e:	617b      	str	r3, [r7, #20]

  HAL_ADC_ConfigChannel(hadc, &sConfig);
 800d870:	f107 0308 	add.w	r3, r7, #8
 800d874:	4619      	mov	r1, r3
 800d876:	6878      	ldr	r0, [r7, #4]
 800d878:	f7f3 fd8e 	bl	8001398 <HAL_ADC_ConfigChannel>

  HAL_ADC_Start(hadc);                    //
 800d87c:	6878      	ldr	r0, [r7, #4]
 800d87e:	f7f3 fc33 	bl	80010e8 <HAL_ADC_Start>
  HAL_ADC_PollForConversion(hadc, 100);   //wait for ADC
 800d882:	2164      	movs	r1, #100	; 0x64
 800d884:	6878      	ldr	r0, [r7, #4]
 800d886:	f7f3 fcf5 	bl	8001274 <HAL_ADC_PollForConversion>
  return HAL_ADC_GetValue(hadc);          //
 800d88a:	6878      	ldr	r0, [r7, #4]
 800d88c:	f7f3 fd76 	bl	800137c <HAL_ADC_GetValue>
 800d890:	4603      	mov	r3, r0
}
 800d892:	4618      	mov	r0, r3
 800d894:	3718      	adds	r7, #24
 800d896:	46bd      	mov	sp, r7
 800d898:	bd80      	pop	{r7, pc}

0800d89a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800d89a:	b480      	push	{r7}
 800d89c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800d89e:	bf00      	nop
 800d8a0:	46bd      	mov	sp, r7
 800d8a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8a6:	4770      	bx	lr

0800d8a8 <search_init>:

#include "global.h"

void search_init(void){
 800d8a8:	b580      	push	{r7, lr}
 800d8aa:	af00      	add	r7, sp, #0

	//----a探索系----
	goal_x = GOAL_X;        		//GOAL_Xはglobal.hにマクロ定義あり
 800d8ac:	4b09      	ldr	r3, [pc, #36]	; (800d8d4 <search_init+0x2c>)
 800d8ae:	2201      	movs	r2, #1
 800d8b0:	701a      	strb	r2, [r3, #0]
	goal_y = GOAL_Y;        		//GOAL_Yはglobal.hにマクロ定義あり
 800d8b2:	4b09      	ldr	r3, [pc, #36]	; (800d8d8 <search_init+0x30>)
 800d8b4:	2200      	movs	r2, #0
 800d8b6:	701a      	strb	r2, [r3, #0]
	map_Init();						//aマップの初期化
 800d8b8:	f000 fffc 	bl	800e8b4 <map_Init>
	mouse.x = 0;
 800d8bc:	4b07      	ldr	r3, [pc, #28]	; (800d8dc <search_init+0x34>)
 800d8be:	2200      	movs	r2, #0
 800d8c0:	701a      	strb	r2, [r3, #0]
	mouse.y = 0;					//a現在地の初期化
 800d8c2:	4b06      	ldr	r3, [pc, #24]	; (800d8dc <search_init+0x34>)
 800d8c4:	2200      	movs	r2, #0
 800d8c6:	705a      	strb	r2, [r3, #1]
	mouse.dir = 0;					//aマウスの向きの初期化
 800d8c8:	4b04      	ldr	r3, [pc, #16]	; (800d8dc <search_init+0x34>)
 800d8ca:	2200      	movs	r2, #0
 800d8cc:	709a      	strb	r2, [r3, #2]
}
 800d8ce:	bf00      	nop
 800d8d0:	bd80      	pop	{r7, pc}
 800d8d2:	bf00      	nop
 800d8d4:	20000bb0 	.word	0x20000bb0
 800d8d8:	20000b4c 	.word	0x20000b4c
 800d8dc:	20000c0c 	.word	0x20000c0c

0800d8e0 <searchA>:
//searchA
//a1区画走行でgoal座標に進む
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void searchA(){
 800d8e0:	b580      	push	{r7, lr}
 800d8e2:	af00      	add	r7, sp, #0

	if(MF.FLAG.SCND){
 800d8e4:	4b37      	ldr	r3, [pc, #220]	; (800d9c4 <searchA+0xe4>)
 800d8e6:	881b      	ldrh	r3, [r3, #0]
 800d8e8:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800d8ec:	b2db      	uxtb	r3, r3
 800d8ee:	2b00      	cmp	r3, #0
 800d8f0:	d001      	beq.n	800d8f6 <searchA+0x16>
		load_map_from_eeprom();
 800d8f2:	f002 ff11 	bl	8010718 <load_map_from_eeprom>
	}

	//====aスタート位置壁情報取得====
	get_wall_info();										//a壁情報の初期化, 後壁はなくなる
 800d8f6:	f002 ff87 	bl	8010808 <get_wall_info>
	wall_info &= ~0x88;										//a前壁は存在するはずがないので削除する
 800d8fa:	4b33      	ldr	r3, [pc, #204]	; (800d9c8 <searchA+0xe8>)
 800d8fc:	781b      	ldrb	r3, [r3, #0]
 800d8fe:	f003 0377 	and.w	r3, r3, #119	; 0x77
 800d902:	b2da      	uxtb	r2, r3
 800d904:	4b30      	ldr	r3, [pc, #192]	; (800d9c8 <searchA+0xe8>)
 800d906:	701a      	strb	r2, [r3, #0]
	write_map();											//a壁情報を地図に記入
 800d908:	f001 f840 	bl	800e98c <write_map>

	//====a歩数マップ・経路作成====
	r_cnt = 0;												//a経路カウンタの初期化
 800d90c:	4b2f      	ldr	r3, [pc, #188]	; (800d9cc <searchA+0xec>)
 800d90e:	2200      	movs	r2, #0
 800d910:	701a      	strb	r2, [r3, #0]
	make_smap();											//a歩数マップ作成
 800d912:	f001 fa2f 	bl	800ed74 <make_smap>
	make_route();											//a最短経路探索（route配列に動作が格納される）
 800d916:	f001 fde9 	bl	800f4ec <make_route>

	//====a探索走行====
	do{
		//----a進行----
		switch(route[r_cnt++]){								//route配列によって進行を決定。経路カウンタを進める
 800d91a:	4b2c      	ldr	r3, [pc, #176]	; (800d9cc <searchA+0xec>)
 800d91c:	781b      	ldrb	r3, [r3, #0]
 800d91e:	1c5a      	adds	r2, r3, #1
 800d920:	b2d1      	uxtb	r1, r2
 800d922:	4a2a      	ldr	r2, [pc, #168]	; (800d9cc <searchA+0xec>)
 800d924:	7011      	strb	r1, [r2, #0]
 800d926:	461a      	mov	r2, r3
 800d928:	4b29      	ldr	r3, [pc, #164]	; (800d9d0 <searchA+0xf0>)
 800d92a:	5c9b      	ldrb	r3, [r3, r2]
 800d92c:	2b22      	cmp	r3, #34	; 0x22
 800d92e:	d00b      	beq.n	800d948 <searchA+0x68>
 800d930:	2b22      	cmp	r3, #34	; 0x22
 800d932:	dc02      	bgt.n	800d93a <searchA+0x5a>
 800d934:	2b11      	cmp	r3, #17
 800d936:	d012      	beq.n	800d95e <searchA+0x7e>
 800d938:	e015      	b.n	800d966 <searchA+0x86>
 800d93a:	2b44      	cmp	r3, #68	; 0x44
 800d93c:	d001      	beq.n	800d942 <searchA+0x62>
 800d93e:	2b88      	cmp	r3, #136	; 0x88
			//----a前進----
			case 0x88:
				break;
 800d940:	e011      	b.n	800d966 <searchA+0x86>
			//----a右折----
			case 0x44:
				rotate_R90();								//a右回転
 800d942:	f7f8 fb91 	bl	8006068 <rotate_R90>
				break;
 800d946:	e00e      	b.n	800d966 <searchA+0x86>
			//----180回転----
			case 0x22:
				rotate_180();								//180度回転
 800d948:	f7f8 fd46 	bl	80063d8 <rotate_180>
				if(wall_info & 0x88){
 800d94c:	4b1e      	ldr	r3, [pc, #120]	; (800d9c8 <searchA+0xe8>)
 800d94e:	781b      	ldrb	r3, [r3, #0]
 800d950:	f003 0388 	and.w	r3, r3, #136	; 0x88
 800d954:	2b00      	cmp	r3, #0
 800d956:	d005      	beq.n	800d964 <searchA+0x84>
					set_position();
 800d958:	f7f7 ff8c 	bl	8005874 <set_position>
				}
				break;
 800d95c:	e002      	b.n	800d964 <searchA+0x84>
			//----a左折----
			case 0x11:
				rotate_L90();								//a左回転
 800d95e:	f7f8 fc5f 	bl	8006220 <rotate_L90>
				break;
 800d962:	e000      	b.n	800d966 <searchA+0x86>
				break;
 800d964:	bf00      	nop
		}

		drive_wait();
 800d966:	2032      	movs	r0, #50	; 0x32
 800d968:	f7f3 fb58 	bl	800101c <HAL_Delay>
		one_section();										//a前進する
 800d96c:	f7f8 f9ba 	bl	8005ce4 <one_section>
		drive_wait();
 800d970:	2032      	movs	r0, #50	; 0x32
 800d972:	f7f3 fb53 	bl	800101c <HAL_Delay>

		adv_pos();											//aマイクロマウス内部位置情報でも前進処理
 800d976:	f000 ff45 	bl	800e804 <adv_pos>
		conf_route();										//a最短経路で進行可能か判定
 800d97a:	f000 ff7d 	bl	800e878 <conf_route>

	}while((mouse.x != goal_x) || (mouse.y != goal_y));		//a現在座標とgoal座標が等しくなるまで実行
 800d97e:	4b15      	ldr	r3, [pc, #84]	; (800d9d4 <searchA+0xf4>)
 800d980:	781b      	ldrb	r3, [r3, #0]
 800d982:	b2da      	uxtb	r2, r3
 800d984:	4b14      	ldr	r3, [pc, #80]	; (800d9d8 <searchA+0xf8>)
 800d986:	781b      	ldrb	r3, [r3, #0]
 800d988:	429a      	cmp	r2, r3
 800d98a:	d1c6      	bne.n	800d91a <searchA+0x3a>
 800d98c:	4b11      	ldr	r3, [pc, #68]	; (800d9d4 <searchA+0xf4>)
 800d98e:	785b      	ldrb	r3, [r3, #1]
 800d990:	b2da      	uxtb	r2, r3
 800d992:	4b12      	ldr	r3, [pc, #72]	; (800d9dc <searchA+0xfc>)
 800d994:	781b      	ldrb	r3, [r3, #0]
 800d996:	429a      	cmp	r2, r3
 800d998:	d1bf      	bne.n	800d91a <searchA+0x3a>

	printf("goal\n");
 800d99a:	4811      	ldr	r0, [pc, #68]	; (800d9e0 <searchA+0x100>)
 800d99c:	f003 fdb0 	bl	8011500 <puts>
	HAL_Delay(500);										//aスタートでは***2秒以上***停止しなくてはならない
 800d9a0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800d9a4:	f7f3 fb3a 	bl	800101c <HAL_Delay>
	rotate_180();											//180度回転
 800d9a8:	f7f8 fd16 	bl	80063d8 <rotate_180>

	if(!MF.FLAG.SCND){
 800d9ac:	4b05      	ldr	r3, [pc, #20]	; (800d9c4 <searchA+0xe4>)
 800d9ae:	881b      	ldrh	r3, [r3, #0]
 800d9b0:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800d9b4:	b2db      	uxtb	r3, r3
 800d9b6:	2b00      	cmp	r3, #0
 800d9b8:	d101      	bne.n	800d9be <searchA+0xde>
		store_map_in_eeprom();
 800d9ba:	f002 fe73 	bl	80106a4 <store_map_in_eeprom>
	}
}
 800d9be:	bf00      	nop
 800d9c0:	bd80      	pop	{r7, pc}
 800d9c2:	bf00      	nop
 800d9c4:	20000f68 	.word	0x20000f68
 800d9c8:	200002c8 	.word	0x200002c8
 800d9cc:	200015d0 	.word	0x200015d0
 800d9d0:	20000c54 	.word	0x20000c54
 800d9d4:	20000c0c 	.word	0x20000c0c
 800d9d8:	20000bb0 	.word	0x20000bb0
 800d9dc:	20000b4c 	.word	0x20000b4c
 800d9e0:	08012a80 	.word	0x08012a80

0800d9e4 <searchB>:
//searchB
//a連続走行でgoal座標に進む
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void searchB(){
 800d9e4:	b580      	push	{r7, lr}
 800d9e6:	af00      	add	r7, sp, #0

	if(MF.FLAG.SCND){
 800d9e8:	4b3c      	ldr	r3, [pc, #240]	; (800dadc <searchB+0xf8>)
 800d9ea:	881b      	ldrh	r3, [r3, #0]
 800d9ec:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800d9f0:	b2db      	uxtb	r3, r3
 800d9f2:	2b00      	cmp	r3, #0
 800d9f4:	d001      	beq.n	800d9fa <searchB+0x16>
		load_map_from_eeprom();
 800d9f6:	f002 fe8f 	bl	8010718 <load_map_from_eeprom>
	}

	//====aスタート位置壁情報取得====
	get_wall_info();										//a壁情報の初期化, 後壁はなくなる
 800d9fa:	f002 ff05 	bl	8010808 <get_wall_info>
	wall_info &= ~0x88;										//a前壁は存在するはずがないので削除する
 800d9fe:	4b38      	ldr	r3, [pc, #224]	; (800dae0 <searchB+0xfc>)
 800da00:	781b      	ldrb	r3, [r3, #0]
 800da02:	f003 0377 	and.w	r3, r3, #119	; 0x77
 800da06:	b2da      	uxtb	r2, r3
 800da08:	4b35      	ldr	r3, [pc, #212]	; (800dae0 <searchB+0xfc>)
 800da0a:	701a      	strb	r2, [r3, #0]
	write_map();											//a壁情報を地図に記入
 800da0c:	f000 ffbe 	bl	800e98c <write_map>

	//====a前に壁が無い想定で問答無用で前進====
	start_sectionA();
 800da10:	f7f7 ff64 	bl	80058dc <start_sectionA>
	adv_pos();
 800da14:	f000 fef6 	bl	800e804 <adv_pos>

	//====a歩数マップ・経路作成====
	write_map();											//a壁情報を地図に記入
 800da18:	f000 ffb8 	bl	800e98c <write_map>
	r_cnt = 0;												//a経路カウンタの初期化
 800da1c:	4b31      	ldr	r3, [pc, #196]	; (800dae4 <searchB+0x100>)
 800da1e:	2200      	movs	r2, #0
 800da20:	701a      	strb	r2, [r3, #0]
	make_smap();											//a歩数マップ作成
 800da22:	f001 f9a7 	bl	800ed74 <make_smap>
	make_route();											//a最短経路探索（route配列に動作が格納される）
 800da26:	f001 fd61 	bl	800f4ec <make_route>

	//====a探索走行====
	do{
		//----a進行----
		switch(route[r_cnt++]){								//route配列によって進行を決定。経路カウンタを進める
 800da2a:	4b2e      	ldr	r3, [pc, #184]	; (800dae4 <searchB+0x100>)
 800da2c:	781b      	ldrb	r3, [r3, #0]
 800da2e:	1c5a      	adds	r2, r3, #1
 800da30:	b2d1      	uxtb	r1, r2
 800da32:	4a2c      	ldr	r2, [pc, #176]	; (800dae4 <searchB+0x100>)
 800da34:	7011      	strb	r1, [r2, #0]
 800da36:	461a      	mov	r2, r3
 800da38:	4b2b      	ldr	r3, [pc, #172]	; (800dae8 <searchB+0x104>)
 800da3a:	5c9b      	ldrb	r3, [r3, r2]
 800da3c:	2b22      	cmp	r3, #34	; 0x22
 800da3e:	d012      	beq.n	800da66 <searchB+0x82>
 800da40:	2b22      	cmp	r3, #34	; 0x22
 800da42:	dc02      	bgt.n	800da4a <searchB+0x66>
 800da44:	2b11      	cmp	r3, #17
 800da46:	d01d      	beq.n	800da84 <searchB+0xa0>
 800da48:	e023      	b.n	800da92 <searchB+0xae>
 800da4a:	2b44      	cmp	r3, #68	; 0x44
 800da4c:	d004      	beq.n	800da58 <searchB+0x74>
 800da4e:	2b88      	cmp	r3, #136	; 0x88
 800da50:	d11f      	bne.n	800da92 <searchB+0xae>
			//----a前進----
			case 0x88:
				one_sectionU();
 800da52:	f7f8 faef 	bl	8006034 <one_sectionU>
				break;
 800da56:	e01c      	b.n	800da92 <searchB+0xae>
			//----a右折----
			case 0x44:
				half_sectionD();
 800da58:	f7f8 f85e 	bl	8005b18 <half_sectionD>
				rotate_R90();
 800da5c:	f7f8 fb04 	bl	8006068 <rotate_R90>
				half_sectionA();
 800da60:	f7f8 f810 	bl	8005a84 <half_sectionA>
				break;
 800da64:	e015      	b.n	800da92 <searchB+0xae>
			//----180回転----
			case 0x22:
				half_sectionD();
 800da66:	f7f8 f857 	bl	8005b18 <half_sectionD>
				rotate_180();
 800da6a:	f7f8 fcb5 	bl	80063d8 <rotate_180>
				if(wall_info & 0x88){
 800da6e:	4b1c      	ldr	r3, [pc, #112]	; (800dae0 <searchB+0xfc>)
 800da70:	781b      	ldrb	r3, [r3, #0]
 800da72:	f003 0388 	and.w	r3, r3, #136	; 0x88
 800da76:	2b00      	cmp	r3, #0
 800da78:	d001      	beq.n	800da7e <searchB+0x9a>
					set_position();
 800da7a:	f7f7 fefb 	bl	8005874 <set_position>
				}
				half_sectionA();
 800da7e:	f7f8 f801 	bl	8005a84 <half_sectionA>
				break;
 800da82:	e006      	b.n	800da92 <searchB+0xae>
			//----a左折----
			case 0x11:
				half_sectionD();
 800da84:	f7f8 f848 	bl	8005b18 <half_sectionD>
				rotate_L90();
 800da88:	f7f8 fbca 	bl	8006220 <rotate_L90>
				half_sectionA();
 800da8c:	f7f7 fffa 	bl	8005a84 <half_sectionA>
				break;
 800da90:	bf00      	nop
		}
		adv_pos();
 800da92:	f000 feb7 	bl	800e804 <adv_pos>
		conf_route();
 800da96:	f000 feef 	bl	800e878 <conf_route>

	}while((mouse.x != goal_x) || (mouse.y != goal_y));
 800da9a:	4b14      	ldr	r3, [pc, #80]	; (800daec <searchB+0x108>)
 800da9c:	781b      	ldrb	r3, [r3, #0]
 800da9e:	b2da      	uxtb	r2, r3
 800daa0:	4b13      	ldr	r3, [pc, #76]	; (800daf0 <searchB+0x10c>)
 800daa2:	781b      	ldrb	r3, [r3, #0]
 800daa4:	429a      	cmp	r2, r3
 800daa6:	d1c0      	bne.n	800da2a <searchB+0x46>
 800daa8:	4b10      	ldr	r3, [pc, #64]	; (800daec <searchB+0x108>)
 800daaa:	785b      	ldrb	r3, [r3, #1]
 800daac:	b2da      	uxtb	r2, r3
 800daae:	4b11      	ldr	r3, [pc, #68]	; (800daf4 <searchB+0x110>)
 800dab0:	781b      	ldrb	r3, [r3, #0]
 800dab2:	429a      	cmp	r2, r3
 800dab4:	d1b9      	bne.n	800da2a <searchB+0x46>

	half_sectionD();
 800dab6:	f7f8 f82f 	bl	8005b18 <half_sectionD>

	HAL_Delay(500);
 800daba:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800dabe:	f7f3 faad 	bl	800101c <HAL_Delay>
	rotate_180();											//180度回転
 800dac2:	f7f8 fc89 	bl	80063d8 <rotate_180>

	if(!MF.FLAG.SCND){
 800dac6:	4b05      	ldr	r3, [pc, #20]	; (800dadc <searchB+0xf8>)
 800dac8:	881b      	ldrh	r3, [r3, #0]
 800daca:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800dace:	b2db      	uxtb	r3, r3
 800dad0:	2b00      	cmp	r3, #0
 800dad2:	d101      	bne.n	800dad8 <searchB+0xf4>
		store_map_in_eeprom();
 800dad4:	f002 fde6 	bl	80106a4 <store_map_in_eeprom>
	}
}
 800dad8:	bf00      	nop
 800dada:	bd80      	pop	{r7, pc}
 800dadc:	20000f68 	.word	0x20000f68
 800dae0:	200002c8 	.word	0x200002c8
 800dae4:	200015d0 	.word	0x200015d0
 800dae8:	20000c54 	.word	0x20000c54
 800daec:	20000c0c 	.word	0x20000c0c
 800daf0:	20000bb0 	.word	0x20000bb0
 800daf4:	20000b4c 	.word	0x20000b4c

0800daf8 <searchC>:
//searchC
//aスラローム走行でgoal座標に進む
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void searchC(){
 800daf8:	b590      	push	{r4, r7, lr}
 800dafa:	b083      	sub	sp, #12
 800dafc:	af00      	add	r7, sp, #0

	if(MF.FLAG.SCND){
 800dafe:	4ba9      	ldr	r3, [pc, #676]	; (800dda4 <searchC+0x2ac>)
 800db00:	881b      	ldrh	r3, [r3, #0]
 800db02:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800db06:	b2db      	uxtb	r3, r3
 800db08:	2b00      	cmp	r3, #0
 800db0a:	d001      	beq.n	800db10 <searchC+0x18>
		load_map_from_eeprom();
 800db0c:	f002 fe04 	bl	8010718 <load_map_from_eeprom>
	}

	//====aスタート位置壁情報取得====
	if(!MF.FLAG.SCND)get_wall_info();										//a壁情報の初期化, 後壁はなくなる
 800db10:	4ba4      	ldr	r3, [pc, #656]	; (800dda4 <searchC+0x2ac>)
 800db12:	881b      	ldrh	r3, [r3, #0]
 800db14:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800db18:	b2db      	uxtb	r3, r3
 800db1a:	2b00      	cmp	r3, #0
 800db1c:	d101      	bne.n	800db22 <searchC+0x2a>
 800db1e:	f002 fe73 	bl	8010808 <get_wall_info>
	if(!MF.FLAG.SCND)wall_info &= ~0x88;									//a前壁は存在するはずがないので削除する
 800db22:	4ba0      	ldr	r3, [pc, #640]	; (800dda4 <searchC+0x2ac>)
 800db24:	881b      	ldrh	r3, [r3, #0]
 800db26:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800db2a:	b2db      	uxtb	r3, r3
 800db2c:	2b00      	cmp	r3, #0
 800db2e:	d106      	bne.n	800db3e <searchC+0x46>
 800db30:	4b9d      	ldr	r3, [pc, #628]	; (800dda8 <searchC+0x2b0>)
 800db32:	781b      	ldrb	r3, [r3, #0]
 800db34:	f003 0377 	and.w	r3, r3, #119	; 0x77
 800db38:	b2da      	uxtb	r2, r3
 800db3a:	4b9b      	ldr	r3, [pc, #620]	; (800dda8 <searchC+0x2b0>)
 800db3c:	701a      	strb	r2, [r3, #0]
	if(!MF.FLAG.SCND)write_map();											//a壁情報を地図に記入
 800db3e:	4b99      	ldr	r3, [pc, #612]	; (800dda4 <searchC+0x2ac>)
 800db40:	881b      	ldrh	r3, [r3, #0]
 800db42:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800db46:	b2db      	uxtb	r3, r3
 800db48:	2b00      	cmp	r3, #0
 800db4a:	d101      	bne.n	800db50 <searchC+0x58>
 800db4c:	f000 ff1e 	bl	800e98c <write_map>

	if(MF2.FLAG.GOAL){
 800db50:	4b96      	ldr	r3, [pc, #600]	; (800ddac <searchC+0x2b4>)
 800db52:	881b      	ldrh	r3, [r3, #0]
 800db54:	f3c3 2300 	ubfx	r3, r3, #8, #1
 800db58:	b2db      	uxtb	r3, r3
 800db5a:	2b00      	cmp	r3, #0
 800db5c:	d007      	beq.n	800db6e <searchC+0x76>
//		HAL_Delay(500);
		rotate_180();											//180度回転
 800db5e:	f7f8 fc3b 	bl	80063d8 <rotate_180>
//		driveC2(SETPOS_BACK);         							//a尻を当てる程度に後退。回転後に停止する
//		degree_z = target_degree_z;
//		start_mode = 0;
		start_mode = 1;
 800db62:	4b93      	ldr	r3, [pc, #588]	; (800ddb0 <searchC+0x2b8>)
 800db64:	2201      	movs	r2, #1
 800db66:	701a      	strb	r2, [r3, #0]
		goal_mode = 1;
 800db68:	4b92      	ldr	r3, [pc, #584]	; (800ddb4 <searchC+0x2bc>)
 800db6a:	2201      	movs	r2, #1
 800db6c:	701a      	strb	r2, [r3, #0]
	if(!MF.FLAG.SCND || !MF2.FLAG.GOAL)wall_info &= ~0x88;					//a前壁は存在するはずがないので削除する
	if(!MF.FLAG.SCND || !MF2.FLAG.GOAL)write_map();							//a壁情報を地図に記入
*/

	//====a前に壁が無い想定で問答無用で前進====
	start_sectionA();
 800db6e:	f7f7 feb5 	bl	80058dc <start_sectionA>
	adv_pos();
 800db72:	f000 fe47 	bl	800e804 <adv_pos>

	//====a歩数マップ・経路作成====
	if(!MF.FLAG.SCND)write_map();											//a壁情報を地図に記入
 800db76:	4b8b      	ldr	r3, [pc, #556]	; (800dda4 <searchC+0x2ac>)
 800db78:	881b      	ldrh	r3, [r3, #0]
 800db7a:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800db7e:	b2db      	uxtb	r3, r3
 800db80:	2b00      	cmp	r3, #0
 800db82:	d101      	bne.n	800db88 <searchC+0x90>
 800db84:	f000 ff02 	bl	800e98c <write_map>
	r_cnt = 0;																//a経路カウンタの初期化
 800db88:	4b8b      	ldr	r3, [pc, #556]	; (800ddb8 <searchC+0x2c0>)
 800db8a:	2200      	movs	r2, #0
 800db8c:	701a      	strb	r2, [r3, #0]
	make_smap();															//a歩数マップ作成
 800db8e:	f001 f8f1 	bl	800ed74 <make_smap>
	make_route();															//a最短経路探索（route配列に動作が格納される）
 800db92:	f001 fcab 	bl	800f4ec <make_route>
	uint8_t x, y;															//X，Y座標

	//====a探索走行====
	do{
		//----a進行----
		switch(route[r_cnt++]){												//route配列によって進行を決定。経路カウンタを進める
 800db96:	4b88      	ldr	r3, [pc, #544]	; (800ddb8 <searchC+0x2c0>)
 800db98:	781b      	ldrb	r3, [r3, #0]
 800db9a:	1c5a      	adds	r2, r3, #1
 800db9c:	b2d1      	uxtb	r1, r2
 800db9e:	4a86      	ldr	r2, [pc, #536]	; (800ddb8 <searchC+0x2c0>)
 800dba0:	7011      	strb	r1, [r2, #0]
 800dba2:	461a      	mov	r2, r3
 800dba4:	4b85      	ldr	r3, [pc, #532]	; (800ddbc <searchC+0x2c4>)
 800dba6:	5c9b      	ldrb	r3, [r3, r2]
 800dba8:	2b22      	cmp	r3, #34	; 0x22
 800dbaa:	d07f      	beq.n	800dcac <searchC+0x1b4>
 800dbac:	2b22      	cmp	r3, #34	; 0x22
 800dbae:	dc03      	bgt.n	800dbb8 <searchC+0xc0>
 800dbb0:	2b11      	cmp	r3, #17
 800dbb2:	f000 808b 	beq.w	800dccc <searchC+0x1d4>
 800dbb6:	e08c      	b.n	800dcd2 <searchC+0x1da>
 800dbb8:	2b44      	cmp	r3, #68	; 0x44
 800dbba:	d074      	beq.n	800dca6 <searchC+0x1ae>
 800dbbc:	2b88      	cmp	r3, #136	; 0x88
 800dbbe:	f040 8088 	bne.w	800dcd2 <searchC+0x1da>
			//----a前進----
			case 0x88:
				if(route[r_cnt] == 0x88 && MF.FLAG.ACCL2){
 800dbc2:	4b7d      	ldr	r3, [pc, #500]	; (800ddb8 <searchC+0x2c0>)
 800dbc4:	781b      	ldrb	r3, [r3, #0]
 800dbc6:	461a      	mov	r2, r3
 800dbc8:	4b7c      	ldr	r3, [pc, #496]	; (800ddbc <searchC+0x2c4>)
 800dbca:	5c9b      	ldrb	r3, [r3, r2]
 800dbcc:	2b88      	cmp	r3, #136	; 0x88
 800dbce:	d158      	bne.n	800dc82 <searchC+0x18a>
 800dbd0:	4b74      	ldr	r3, [pc, #464]	; (800dda4 <searchC+0x2ac>)
 800dbd2:	881b      	ldrh	r3, [r3, #0]
 800dbd4:	f3c3 2340 	ubfx	r3, r3, #9, #1
 800dbd8:	b2db      	uxtb	r3, r3
 800dbda:	2b00      	cmp	r3, #0
 800dbdc:	d051      	beq.n	800dc82 <searchC+0x18a>
					x = mouse.x;
 800dbde:	4b78      	ldr	r3, [pc, #480]	; (800ddc0 <searchC+0x2c8>)
 800dbe0:	781b      	ldrb	r3, [r3, #0]
 800dbe2:	70fb      	strb	r3, [r7, #3]
					y = mouse.y;
 800dbe4:	4b76      	ldr	r3, [pc, #472]	; (800ddc0 <searchC+0x2c8>)
 800dbe6:	785b      	ldrb	r3, [r3, #1]
 800dbe8:	70bb      	strb	r3, [r7, #2]
					adv_pos();
 800dbea:	f000 fe0b 	bl	800e804 <adv_pos>
					if((map[mouse.y][mouse.x] & 0x0f) == (map[mouse.y][mouse.x]>>4)){
 800dbee:	4b74      	ldr	r3, [pc, #464]	; (800ddc0 <searchC+0x2c8>)
 800dbf0:	785b      	ldrb	r3, [r3, #1]
 800dbf2:	b2db      	uxtb	r3, r3
 800dbf4:	4618      	mov	r0, r3
 800dbf6:	4b72      	ldr	r3, [pc, #456]	; (800ddc0 <searchC+0x2c8>)
 800dbf8:	781b      	ldrb	r3, [r3, #0]
 800dbfa:	b2db      	uxtb	r3, r3
 800dbfc:	4619      	mov	r1, r3
 800dbfe:	4a71      	ldr	r2, [pc, #452]	; (800ddc4 <searchC+0x2cc>)
 800dc00:	0103      	lsls	r3, r0, #4
 800dc02:	4413      	add	r3, r2
 800dc04:	440b      	add	r3, r1
 800dc06:	781b      	ldrb	r3, [r3, #0]
 800dc08:	f003 030f 	and.w	r3, r3, #15
 800dc0c:	4a6c      	ldr	r2, [pc, #432]	; (800ddc0 <searchC+0x2c8>)
 800dc0e:	7852      	ldrb	r2, [r2, #1]
 800dc10:	b2d2      	uxtb	r2, r2
 800dc12:	4614      	mov	r4, r2
 800dc14:	4a6a      	ldr	r2, [pc, #424]	; (800ddc0 <searchC+0x2c8>)
 800dc16:	7812      	ldrb	r2, [r2, #0]
 800dc18:	b2d2      	uxtb	r2, r2
 800dc1a:	4610      	mov	r0, r2
 800dc1c:	4969      	ldr	r1, [pc, #420]	; (800ddc4 <searchC+0x2cc>)
 800dc1e:	0122      	lsls	r2, r4, #4
 800dc20:	440a      	add	r2, r1
 800dc22:	4402      	add	r2, r0
 800dc24:	7812      	ldrb	r2, [r2, #0]
 800dc26:	0912      	lsrs	r2, r2, #4
 800dc28:	b2d2      	uxtb	r2, r2
 800dc2a:	4293      	cmp	r3, r2
 800dc2c:	d111      	bne.n	800dc52 <searchC+0x15a>
						if(!MF2.FLAG.HACCEL){
 800dc2e:	4b5f      	ldr	r3, [pc, #380]	; (800ddac <searchC+0x2b4>)
 800dc30:	881b      	ldrh	r3, [r3, #0]
 800dc32:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800dc36:	b2db      	uxtb	r3, r3
 800dc38:	2b00      	cmp	r3, #0
 800dc3a:	d107      	bne.n	800dc4c <searchC+0x154>
							one_sectionA();
 800dc3c:	f7f8 f85a 	bl	8005cf4 <one_sectionA>
							MF2.FLAG.HACCEL = 1;
 800dc40:	4a5a      	ldr	r2, [pc, #360]	; (800ddac <searchC+0x2b4>)
 800dc42:	8813      	ldrh	r3, [r2, #0]
 800dc44:	f043 0302 	orr.w	r3, r3, #2
 800dc48:	8013      	strh	r3, [r2, #0]
 800dc4a:	e013      	b.n	800dc74 <searchC+0x17c>
						}else{
							one_sectionU();
 800dc4c:	f7f8 f9f2 	bl	8006034 <one_sectionU>
 800dc50:	e010      	b.n	800dc74 <searchC+0x17c>
						}
					}else if(MF2.FLAG.HACCEL){
 800dc52:	4b56      	ldr	r3, [pc, #344]	; (800ddac <searchC+0x2b4>)
 800dc54:	881b      	ldrh	r3, [r3, #0]
 800dc56:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800dc5a:	b2db      	uxtb	r3, r3
 800dc5c:	2b00      	cmp	r3, #0
 800dc5e:	d007      	beq.n	800dc70 <searchC+0x178>
						one_sectionD();
 800dc60:	f7f8 f8ae 	bl	8005dc0 <one_sectionD>
						MF2.FLAG.HACCEL = 0;
 800dc64:	4a51      	ldr	r2, [pc, #324]	; (800ddac <searchC+0x2b4>)
 800dc66:	8813      	ldrh	r3, [r2, #0]
 800dc68:	f36f 0341 	bfc	r3, #1, #1
 800dc6c:	8013      	strh	r3, [r2, #0]
 800dc6e:	e001      	b.n	800dc74 <searchC+0x17c>
					}else{
						one_sectionU();
 800dc70:	f7f8 f9e0 	bl	8006034 <one_sectionU>
					}
					mouse.x = x;
 800dc74:	4a52      	ldr	r2, [pc, #328]	; (800ddc0 <searchC+0x2c8>)
 800dc76:	78fb      	ldrb	r3, [r7, #3]
 800dc78:	7013      	strb	r3, [r2, #0]
					mouse.y = y;
 800dc7a:	4a51      	ldr	r2, [pc, #324]	; (800ddc0 <searchC+0x2c8>)
 800dc7c:	78bb      	ldrb	r3, [r7, #2]
 800dc7e:	7053      	strb	r3, [r2, #1]
					one_sectionD();
					MF2.FLAG.HACCEL = 0;
				}else{
					one_sectionU();
				}
				break;
 800dc80:	e027      	b.n	800dcd2 <searchC+0x1da>
				}else if(MF2.FLAG.HACCEL){
 800dc82:	4b4a      	ldr	r3, [pc, #296]	; (800ddac <searchC+0x2b4>)
 800dc84:	881b      	ldrh	r3, [r3, #0]
 800dc86:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800dc8a:	b2db      	uxtb	r3, r3
 800dc8c:	2b00      	cmp	r3, #0
 800dc8e:	d007      	beq.n	800dca0 <searchC+0x1a8>
					one_sectionD();
 800dc90:	f7f8 f896 	bl	8005dc0 <one_sectionD>
					MF2.FLAG.HACCEL = 0;
 800dc94:	4a45      	ldr	r2, [pc, #276]	; (800ddac <searchC+0x2b4>)
 800dc96:	8813      	ldrh	r3, [r2, #0]
 800dc98:	f36f 0341 	bfc	r3, #1, #1
 800dc9c:	8013      	strh	r3, [r2, #0]
				break;
 800dc9e:	e018      	b.n	800dcd2 <searchC+0x1da>
					one_sectionU();
 800dca0:	f7f8 f9c8 	bl	8006034 <one_sectionU>
				break;
 800dca4:	e015      	b.n	800dcd2 <searchC+0x1da>
			//----a右折スラローム----
			case 0x44:
				slalom_R90();
 800dca6:	f7f8 fc6f 	bl	8006588 <slalom_R90>
				break;
 800dcaa:	e012      	b.n	800dcd2 <searchC+0x1da>
			//----180回転----
			case 0x22:
				half_sectionD();
 800dcac:	f7f7 ff34 	bl	8005b18 <half_sectionD>
				rotate_180();
 800dcb0:	f7f8 fb92 	bl	80063d8 <rotate_180>
				if(wall_info & 0x88){
 800dcb4:	4b3c      	ldr	r3, [pc, #240]	; (800dda8 <searchC+0x2b0>)
 800dcb6:	781b      	ldrb	r3, [r3, #0]
 800dcb8:	f003 0388 	and.w	r3, r3, #136	; 0x88
 800dcbc:	2b00      	cmp	r3, #0
 800dcbe:	d002      	beq.n	800dcc6 <searchC+0x1ce>
					set_position();
 800dcc0:	f7f7 fdd8 	bl	8005874 <set_position>
				}else{
					half_sectionA();
				}
				break;
 800dcc4:	e005      	b.n	800dcd2 <searchC+0x1da>
					half_sectionA();
 800dcc6:	f7f7 fedd 	bl	8005a84 <half_sectionA>
				break;
 800dcca:	e002      	b.n	800dcd2 <searchC+0x1da>
			//----a左折スラローム----
			case 0x11:
				slalom_L90();
 800dccc:	f7f8 fd40 	bl	8006750 <slalom_L90>
				break;
 800dcd0:	bf00      	nop
		}
		adv_pos();
 800dcd2:	f000 fd97 	bl	800e804 <adv_pos>
		if(!MF.FLAG.SCND)conf_route();
 800dcd6:	4b33      	ldr	r3, [pc, #204]	; (800dda4 <searchC+0x2ac>)
 800dcd8:	881b      	ldrh	r3, [r3, #0]
 800dcda:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800dcde:	b2db      	uxtb	r3, r3
 800dce0:	2b00      	cmp	r3, #0
 800dce2:	d101      	bne.n	800dce8 <searchC+0x1f0>
 800dce4:	f000 fdc8 	bl	800e878 <conf_route>

//	}while((mouse.x != goal_x) || (mouse.y != goal_y));
	}while(smap[mouse.y][mouse.x] != 0);
 800dce8:	4b35      	ldr	r3, [pc, #212]	; (800ddc0 <searchC+0x2c8>)
 800dcea:	785b      	ldrb	r3, [r3, #1]
 800dcec:	b2db      	uxtb	r3, r3
 800dcee:	4618      	mov	r0, r3
 800dcf0:	4b33      	ldr	r3, [pc, #204]	; (800ddc0 <searchC+0x2c8>)
 800dcf2:	781b      	ldrb	r3, [r3, #0]
 800dcf4:	b2db      	uxtb	r3, r3
 800dcf6:	4619      	mov	r1, r3
 800dcf8:	4a33      	ldr	r2, [pc, #204]	; (800ddc8 <searchC+0x2d0>)
 800dcfa:	0103      	lsls	r3, r0, #4
 800dcfc:	440b      	add	r3, r1
 800dcfe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800dd02:	2b00      	cmp	r3, #0
 800dd04:	f47f af47 	bne.w	800db96 <searchC+0x9e>

	for(int j=0; j<goal_mode-1; j++){
 800dd08:	2300      	movs	r3, #0
 800dd0a:	607b      	str	r3, [r7, #4]
 800dd0c:	e006      	b.n	800dd1c <searchC+0x224>
		one_sectionU();
 800dd0e:	f7f8 f991 	bl	8006034 <one_sectionU>
		adv_pos();
 800dd12:	f000 fd77 	bl	800e804 <adv_pos>
	for(int j=0; j<goal_mode-1; j++){
 800dd16:	687b      	ldr	r3, [r7, #4]
 800dd18:	3301      	adds	r3, #1
 800dd1a:	607b      	str	r3, [r7, #4]
 800dd1c:	4b25      	ldr	r3, [pc, #148]	; (800ddb4 <searchC+0x2bc>)
 800dd1e:	781b      	ldrb	r3, [r3, #0]
 800dd20:	3b01      	subs	r3, #1
 800dd22:	687a      	ldr	r2, [r7, #4]
 800dd24:	429a      	cmp	r2, r3
 800dd26:	dbf2      	blt.n	800dd0e <searchC+0x216>
	}
	half_sectionD();
 800dd28:	f7f7 fef6 	bl	8005b18 <half_sectionD>

	set_positionF();
 800dd2c:	f7f7 fdb8 	bl	80058a0 <set_positionF>

	MF2.FLAG.GOAL = (MF2.FLAG.GOAL+1)%2;
 800dd30:	4b1e      	ldr	r3, [pc, #120]	; (800ddac <searchC+0x2b4>)
 800dd32:	881b      	ldrh	r3, [r3, #0]
 800dd34:	f3c3 2300 	ubfx	r3, r3, #8, #1
 800dd38:	b2db      	uxtb	r3, r3
 800dd3a:	3301      	adds	r3, #1
 800dd3c:	2b00      	cmp	r3, #0
 800dd3e:	f003 0301 	and.w	r3, r3, #1
 800dd42:	bfb8      	it	lt
 800dd44:	425b      	neglt	r3, r3
 800dd46:	f003 0301 	and.w	r3, r3, #1
 800dd4a:	b2d9      	uxtb	r1, r3
 800dd4c:	4a17      	ldr	r2, [pc, #92]	; (800ddac <searchC+0x2b4>)
 800dd4e:	8813      	ldrh	r3, [r2, #0]
 800dd50:	f361 2308 	bfi	r3, r1, #8, #1
 800dd54:	8013      	strh	r3, [r2, #0]
	if(!MF2.FLAG.GOAL){
 800dd56:	4b15      	ldr	r3, [pc, #84]	; (800ddac <searchC+0x2b4>)
 800dd58:	881b      	ldrh	r3, [r3, #0]
 800dd5a:	f3c3 2300 	ubfx	r3, r3, #8, #1
 800dd5e:	b2db      	uxtb	r3, r3
 800dd60:	2b00      	cmp	r3, #0
 800dd62:	d112      	bne.n	800dd8a <searchC+0x292>
		HAL_Delay(500);
 800dd64:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800dd68:	f7f3 f958 	bl	800101c <HAL_Delay>
		rotate_180();										//180度回転
 800dd6c:	f7f8 fb34 	bl	80063d8 <rotate_180>
		driveC2(SETPOS_BACK);         						//a尻を当てる程度に後退。回転後に停止する
 800dd70:	2064      	movs	r0, #100	; 0x64
 800dd72:	f7f7 fb31 	bl	80053d8 <driveC2>
		degree_z = target_degree_z;
 800dd76:	4b15      	ldr	r3, [pc, #84]	; (800ddcc <searchC+0x2d4>)
 800dd78:	681b      	ldr	r3, [r3, #0]
 800dd7a:	4a15      	ldr	r2, [pc, #84]	; (800ddd0 <searchC+0x2d8>)
 800dd7c:	6013      	str	r3, [r2, #0]
		start_mode = 0;
 800dd7e:	4b0c      	ldr	r3, [pc, #48]	; (800ddb0 <searchC+0x2b8>)
 800dd80:	2200      	movs	r2, #0
 800dd82:	701a      	strb	r2, [r3, #0]
		goal_mode = 1;
 800dd84:	4b0b      	ldr	r3, [pc, #44]	; (800ddb4 <searchC+0x2bc>)
 800dd86:	2201      	movs	r2, #1
 800dd88:	701a      	strb	r2, [r3, #0]
	}

	if(!MF.FLAG.SCND){
 800dd8a:	4b06      	ldr	r3, [pc, #24]	; (800dda4 <searchC+0x2ac>)
 800dd8c:	881b      	ldrh	r3, [r3, #0]
 800dd8e:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800dd92:	b2db      	uxtb	r3, r3
 800dd94:	2b00      	cmp	r3, #0
 800dd96:	d101      	bne.n	800dd9c <searchC+0x2a4>
		store_map_in_eeprom();
 800dd98:	f002 fc84 	bl	80106a4 <store_map_in_eeprom>
	}
}
 800dd9c:	bf00      	nop
 800dd9e:	370c      	adds	r7, #12
 800dda0:	46bd      	mov	sp, r7
 800dda2:	bd90      	pop	{r4, r7, pc}
 800dda4:	20000f68 	.word	0x20000f68
 800dda8:	200002c8 	.word	0x200002c8
 800ddac:	20000f64 	.word	0x20000f64
 800ddb0:	200015c8 	.word	0x200015c8
 800ddb4:	20000bb1 	.word	0x20000bb1
 800ddb8:	200015d0 	.word	0x200015d0
 800ddbc:	20000c54 	.word	0x20000c54
 800ddc0:	20000c0c 	.word	0x20000c0c
 800ddc4:	200001ac 	.word	0x200001ac
 800ddc8:	20000d60 	.word	0x20000d60
 800ddcc:	20000bf8 	.word	0x20000bf8
 800ddd0:	20000b5c 	.word	0x20000b5c

0800ddd4 <searchD>:
//searchD
//aスラローム走行+既知区間加速でgoal座標に進む
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void searchD(){
 800ddd4:	b580      	push	{r7, lr}
 800ddd6:	b082      	sub	sp, #8
 800ddd8:	af00      	add	r7, sp, #0

	if(MF.FLAG.SCND){
 800ddda:	4b83      	ldr	r3, [pc, #524]	; (800dfe8 <searchD+0x214>)
 800dddc:	881b      	ldrh	r3, [r3, #0]
 800ddde:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800dde2:	b2db      	uxtb	r3, r3
 800dde4:	2b00      	cmp	r3, #0
 800dde6:	d001      	beq.n	800ddec <searchD+0x18>
		load_map_from_eeprom();
 800dde8:	f002 fc96 	bl	8010718 <load_map_from_eeprom>
	}

	//====aスタート位置壁情報取得====
	if(!MF.FLAG.SCND)get_wall_info();										//a壁情報の初期化, 後壁はなくなる
 800ddec:	4b7e      	ldr	r3, [pc, #504]	; (800dfe8 <searchD+0x214>)
 800ddee:	881b      	ldrh	r3, [r3, #0]
 800ddf0:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800ddf4:	b2db      	uxtb	r3, r3
 800ddf6:	2b00      	cmp	r3, #0
 800ddf8:	d101      	bne.n	800ddfe <searchD+0x2a>
 800ddfa:	f002 fd05 	bl	8010808 <get_wall_info>
	if(!MF.FLAG.SCND)wall_info &= ~0x88;									//a前壁は存在するはずがないので削除する
 800ddfe:	4b7a      	ldr	r3, [pc, #488]	; (800dfe8 <searchD+0x214>)
 800de00:	881b      	ldrh	r3, [r3, #0]
 800de02:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800de06:	b2db      	uxtb	r3, r3
 800de08:	2b00      	cmp	r3, #0
 800de0a:	d106      	bne.n	800de1a <searchD+0x46>
 800de0c:	4b77      	ldr	r3, [pc, #476]	; (800dfec <searchD+0x218>)
 800de0e:	781b      	ldrb	r3, [r3, #0]
 800de10:	f003 0377 	and.w	r3, r3, #119	; 0x77
 800de14:	b2da      	uxtb	r2, r3
 800de16:	4b75      	ldr	r3, [pc, #468]	; (800dfec <searchD+0x218>)
 800de18:	701a      	strb	r2, [r3, #0]
	if(!MF.FLAG.SCND)write_map();											//a壁情報を地図に記入
 800de1a:	4b73      	ldr	r3, [pc, #460]	; (800dfe8 <searchD+0x214>)
 800de1c:	881b      	ldrh	r3, [r3, #0]
 800de1e:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800de22:	b2db      	uxtb	r3, r3
 800de24:	2b00      	cmp	r3, #0
 800de26:	d101      	bne.n	800de2c <searchD+0x58>
 800de28:	f000 fdb0 	bl	800e98c <write_map>

	//====a前に壁が無い想定で問答無用で前進====
	start_sectionA();
 800de2c:	f7f7 fd56 	bl	80058dc <start_sectionA>
	adv_pos();
 800de30:	f000 fce8 	bl	800e804 <adv_pos>

	//====a歩数マップ・経路作成====
	if(!MF.FLAG.SCND)write_map();											//a壁情報を地図に記入
 800de34:	4b6c      	ldr	r3, [pc, #432]	; (800dfe8 <searchD+0x214>)
 800de36:	881b      	ldrh	r3, [r3, #0]
 800de38:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800de3c:	b2db      	uxtb	r3, r3
 800de3e:	2b00      	cmp	r3, #0
 800de40:	d101      	bne.n	800de46 <searchD+0x72>
 800de42:	f000 fda3 	bl	800e98c <write_map>
	r_cnt = 0;												//a経路カウンタの初期化
 800de46:	4b6a      	ldr	r3, [pc, #424]	; (800dff0 <searchD+0x21c>)
 800de48:	2200      	movs	r2, #0
 800de4a:	701a      	strb	r2, [r3, #0]
	make_smap();											//a歩数マップ作成
 800de4c:	f000 ff92 	bl	800ed74 <make_smap>
	make_route();											//a最短経路探索（route配列に動作が格納される）
 800de50:	f001 fb4c 	bl	800f4ec <make_route>

	MF2.FLAG.HACCEL = 0;
 800de54:	4a67      	ldr	r2, [pc, #412]	; (800dff4 <searchD+0x220>)
 800de56:	8813      	ldrh	r3, [r2, #0]
 800de58:	f36f 0341 	bfc	r3, #1, #1
 800de5c:	8013      	strh	r3, [r2, #0]

	//====a探索走行====
	do{
		//----a進行----
		switch(route[r_cnt++]){								//route配列によって進行を決定。経路カウンタを進める
 800de5e:	4b64      	ldr	r3, [pc, #400]	; (800dff0 <searchD+0x21c>)
 800de60:	781b      	ldrb	r3, [r3, #0]
 800de62:	1c5a      	adds	r2, r3, #1
 800de64:	b2d1      	uxtb	r1, r2
 800de66:	4a62      	ldr	r2, [pc, #392]	; (800dff0 <searchD+0x21c>)
 800de68:	7011      	strb	r1, [r2, #0]
 800de6a:	461a      	mov	r2, r3
 800de6c:	4b62      	ldr	r3, [pc, #392]	; (800dff8 <searchD+0x224>)
 800de6e:	5c9b      	ldrb	r3, [r3, r2]
 800de70:	2b22      	cmp	r3, #34	; 0x22
 800de72:	d05d      	beq.n	800df30 <searchD+0x15c>
 800de74:	2b22      	cmp	r3, #34	; 0x22
 800de76:	dc02      	bgt.n	800de7e <searchD+0xaa>
 800de78:	2b11      	cmp	r3, #17
 800de7a:	d069      	beq.n	800df50 <searchD+0x17c>
 800de7c:	e06b      	b.n	800df56 <searchD+0x182>
 800de7e:	2b44      	cmp	r3, #68	; 0x44
 800de80:	d053      	beq.n	800df2a <searchD+0x156>
 800de82:	2b88      	cmp	r3, #136	; 0x88
 800de84:	d167      	bne.n	800df56 <searchD+0x182>
			//----a前進----
			case 0x88:
				if(MF.FLAG.SCND && MF.FLAG.ACCL2){
 800de86:	4b58      	ldr	r3, [pc, #352]	; (800dfe8 <searchD+0x214>)
 800de88:	881b      	ldrh	r3, [r3, #0]
 800de8a:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800de8e:	b2db      	uxtb	r3, r3
 800de90:	2b00      	cmp	r3, #0
 800de92:	d046      	beq.n	800df22 <searchD+0x14e>
 800de94:	4b54      	ldr	r3, [pc, #336]	; (800dfe8 <searchD+0x214>)
 800de96:	881b      	ldrh	r3, [r3, #0]
 800de98:	f3c3 2340 	ubfx	r3, r3, #9, #1
 800de9c:	b2db      	uxtb	r3, r3
 800de9e:	2b00      	cmp	r3, #0
 800dea0:	d03f      	beq.n	800df22 <searchD+0x14e>
					if(((route[r_cnt-1] & route[r_cnt]) == 0x88) && (route[r_cnt] != 0xff) && (MF2.FLAG.HACCEL == 0)){
 800dea2:	4b53      	ldr	r3, [pc, #332]	; (800dff0 <searchD+0x21c>)
 800dea4:	781b      	ldrb	r3, [r3, #0]
 800dea6:	3b01      	subs	r3, #1
 800dea8:	4a53      	ldr	r2, [pc, #332]	; (800dff8 <searchD+0x224>)
 800deaa:	5cd2      	ldrb	r2, [r2, r3]
 800deac:	4b50      	ldr	r3, [pc, #320]	; (800dff0 <searchD+0x21c>)
 800deae:	781b      	ldrb	r3, [r3, #0]
 800deb0:	4619      	mov	r1, r3
 800deb2:	4b51      	ldr	r3, [pc, #324]	; (800dff8 <searchD+0x224>)
 800deb4:	5c5b      	ldrb	r3, [r3, r1]
 800deb6:	4013      	ands	r3, r2
 800deb8:	b2db      	uxtb	r3, r3
 800deba:	2b88      	cmp	r3, #136	; 0x88
 800debc:	d115      	bne.n	800deea <searchD+0x116>
 800debe:	4b4c      	ldr	r3, [pc, #304]	; (800dff0 <searchD+0x21c>)
 800dec0:	781b      	ldrb	r3, [r3, #0]
 800dec2:	461a      	mov	r2, r3
 800dec4:	4b4c      	ldr	r3, [pc, #304]	; (800dff8 <searchD+0x224>)
 800dec6:	5c9b      	ldrb	r3, [r3, r2]
 800dec8:	2bff      	cmp	r3, #255	; 0xff
 800deca:	d00e      	beq.n	800deea <searchD+0x116>
 800decc:	4b49      	ldr	r3, [pc, #292]	; (800dff4 <searchD+0x220>)
 800dece:	881b      	ldrh	r3, [r3, #0]
 800ded0:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800ded4:	b2db      	uxtb	r3, r3
 800ded6:	2b00      	cmp	r3, #0
 800ded8:	d107      	bne.n	800deea <searchD+0x116>
						one_sectionA();
 800deda:	f7f7 ff0b 	bl	8005cf4 <one_sectionA>
						MF2.FLAG.HACCEL = 1;
 800dede:	4a45      	ldr	r2, [pc, #276]	; (800dff4 <searchD+0x220>)
 800dee0:	8813      	ldrh	r3, [r2, #0]
 800dee2:	f043 0302 	orr.w	r3, r3, #2
 800dee6:	8013      	strh	r3, [r2, #0]
 800dee8:	e01a      	b.n	800df20 <searchD+0x14c>
					}
					else if((route[r_cnt] & 0x55) && (MF2.FLAG.HACCEL)){
 800deea:	4b41      	ldr	r3, [pc, #260]	; (800dff0 <searchD+0x21c>)
 800deec:	781b      	ldrb	r3, [r3, #0]
 800deee:	461a      	mov	r2, r3
 800def0:	4b41      	ldr	r3, [pc, #260]	; (800dff8 <searchD+0x224>)
 800def2:	5c9b      	ldrb	r3, [r3, r2]
 800def4:	f003 0355 	and.w	r3, r3, #85	; 0x55
 800def8:	2b00      	cmp	r3, #0
 800defa:	d00e      	beq.n	800df1a <searchD+0x146>
 800defc:	4b3d      	ldr	r3, [pc, #244]	; (800dff4 <searchD+0x220>)
 800defe:	881b      	ldrh	r3, [r3, #0]
 800df00:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800df04:	b2db      	uxtb	r3, r3
 800df06:	2b00      	cmp	r3, #0
 800df08:	d007      	beq.n	800df1a <searchD+0x146>
						one_sectionD();
 800df0a:	f7f7 ff59 	bl	8005dc0 <one_sectionD>
						MF2.FLAG.HACCEL = 0;
 800df0e:	4a39      	ldr	r2, [pc, #228]	; (800dff4 <searchD+0x220>)
 800df10:	8813      	ldrh	r3, [r2, #0]
 800df12:	f36f 0341 	bfc	r3, #1, #1
 800df16:	8013      	strh	r3, [r2, #0]
 800df18:	e002      	b.n	800df20 <searchD+0x14c>
					}else{
						one_sectionU();
 800df1a:	f7f8 f88b 	bl	8006034 <one_sectionU>
					if(((route[r_cnt-1] & route[r_cnt]) == 0x88) && (route[r_cnt] != 0xff) && (MF2.FLAG.HACCEL == 0)){
 800df1e:	e003      	b.n	800df28 <searchD+0x154>
 800df20:	e002      	b.n	800df28 <searchD+0x154>
					}
				}else{
					one_sectionU();
 800df22:	f7f8 f887 	bl	8006034 <one_sectionU>
				}
				break;
 800df26:	e016      	b.n	800df56 <searchD+0x182>
 800df28:	e015      	b.n	800df56 <searchD+0x182>
			//----a右折スラローム----
			case 0x44:
				slalom_R90();
 800df2a:	f7f8 fb2d 	bl	8006588 <slalom_R90>
				break;
 800df2e:	e012      	b.n	800df56 <searchD+0x182>
			//----180回転----
			case 0x22:
				half_sectionD();
 800df30:	f7f7 fdf2 	bl	8005b18 <half_sectionD>
				rotate_180();
 800df34:	f7f8 fa50 	bl	80063d8 <rotate_180>
				if(wall_info & 0x88){
 800df38:	4b2c      	ldr	r3, [pc, #176]	; (800dfec <searchD+0x218>)
 800df3a:	781b      	ldrb	r3, [r3, #0]
 800df3c:	f003 0388 	and.w	r3, r3, #136	; 0x88
 800df40:	2b00      	cmp	r3, #0
 800df42:	d002      	beq.n	800df4a <searchD+0x176>
					set_position();
 800df44:	f7f7 fc96 	bl	8005874 <set_position>
				}else{
					half_sectionA();
				}
				break;
 800df48:	e005      	b.n	800df56 <searchD+0x182>
					half_sectionA();
 800df4a:	f7f7 fd9b 	bl	8005a84 <half_sectionA>
				break;
 800df4e:	e002      	b.n	800df56 <searchD+0x182>
			//----a左折スラローム----
			case 0x11:
				slalom_L90();
 800df50:	f7f8 fbfe 	bl	8006750 <slalom_L90>
				break;
 800df54:	bf00      	nop
		}
		adv_pos();
 800df56:	f000 fc55 	bl	800e804 <adv_pos>
		if(!MF.FLAG.SCND)conf_route();
 800df5a:	4b23      	ldr	r3, [pc, #140]	; (800dfe8 <searchD+0x214>)
 800df5c:	881b      	ldrh	r3, [r3, #0]
 800df5e:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800df62:	b2db      	uxtb	r3, r3
 800df64:	2b00      	cmp	r3, #0
 800df66:	d101      	bne.n	800df6c <searchD+0x198>
 800df68:	f000 fc86 	bl	800e878 <conf_route>

//	}while((mouse.x != goal_x) || (mouse.y != goal_y));
	}while(smap[mouse.y][mouse.x] != 0);
 800df6c:	4b23      	ldr	r3, [pc, #140]	; (800dffc <searchD+0x228>)
 800df6e:	785b      	ldrb	r3, [r3, #1]
 800df70:	b2db      	uxtb	r3, r3
 800df72:	4618      	mov	r0, r3
 800df74:	4b21      	ldr	r3, [pc, #132]	; (800dffc <searchD+0x228>)
 800df76:	781b      	ldrb	r3, [r3, #0]
 800df78:	b2db      	uxtb	r3, r3
 800df7a:	4619      	mov	r1, r3
 800df7c:	4a20      	ldr	r2, [pc, #128]	; (800e000 <searchD+0x22c>)
 800df7e:	0103      	lsls	r3, r0, #4
 800df80:	440b      	add	r3, r1
 800df82:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800df86:	2b00      	cmp	r3, #0
 800df88:	f47f af69 	bne.w	800de5e <searchD+0x8a>

	for(int j=0; j<goal_mode-1; j++){
 800df8c:	2300      	movs	r3, #0
 800df8e:	607b      	str	r3, [r7, #4]
 800df90:	e006      	b.n	800dfa0 <searchD+0x1cc>
		one_sectionU();
 800df92:	f7f8 f84f 	bl	8006034 <one_sectionU>
		adv_pos();
 800df96:	f000 fc35 	bl	800e804 <adv_pos>
	for(int j=0; j<goal_mode-1; j++){
 800df9a:	687b      	ldr	r3, [r7, #4]
 800df9c:	3301      	adds	r3, #1
 800df9e:	607b      	str	r3, [r7, #4]
 800dfa0:	4b18      	ldr	r3, [pc, #96]	; (800e004 <searchD+0x230>)
 800dfa2:	781b      	ldrb	r3, [r3, #0]
 800dfa4:	3b01      	subs	r3, #1
 800dfa6:	687a      	ldr	r2, [r7, #4]
 800dfa8:	429a      	cmp	r2, r3
 800dfaa:	dbf2      	blt.n	800df92 <searchD+0x1be>
	}
	half_sectionD();
 800dfac:	f7f7 fdb4 	bl	8005b18 <half_sectionD>
	set_positionF();
 800dfb0:	f7f7 fc76 	bl	80058a0 <set_positionF>

	HAL_Delay(500);
 800dfb4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800dfb8:	f7f3 f830 	bl	800101c <HAL_Delay>
	rotate_180();											//180度回転
 800dfbc:	f7f8 fa0c 	bl	80063d8 <rotate_180>
//	driveC2(SETPOS_BACK);         //a尻を当てる程度に後退。回転後に停止する
//	degree_z = target_degree_z;
//	start_mode = 0;
	start_mode = 1;
 800dfc0:	4b11      	ldr	r3, [pc, #68]	; (800e008 <searchD+0x234>)
 800dfc2:	2201      	movs	r2, #1
 800dfc4:	701a      	strb	r2, [r3, #0]
	goal_mode = 1;
 800dfc6:	4b0f      	ldr	r3, [pc, #60]	; (800e004 <searchD+0x230>)
 800dfc8:	2201      	movs	r2, #1
 800dfca:	701a      	strb	r2, [r3, #0]

	if(!MF.FLAG.SCND){
 800dfcc:	4b06      	ldr	r3, [pc, #24]	; (800dfe8 <searchD+0x214>)
 800dfce:	881b      	ldrh	r3, [r3, #0]
 800dfd0:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800dfd4:	b2db      	uxtb	r3, r3
 800dfd6:	2b00      	cmp	r3, #0
 800dfd8:	d101      	bne.n	800dfde <searchD+0x20a>
		store_map_in_eeprom();
 800dfda:	f002 fb63 	bl	80106a4 <store_map_in_eeprom>
	}
}
 800dfde:	bf00      	nop
 800dfe0:	3708      	adds	r7, #8
 800dfe2:	46bd      	mov	sp, r7
 800dfe4:	bd80      	pop	{r7, pc}
 800dfe6:	bf00      	nop
 800dfe8:	20000f68 	.word	0x20000f68
 800dfec:	200002c8 	.word	0x200002c8
 800dff0:	200015d0 	.word	0x200015d0
 800dff4:	20000f64 	.word	0x20000f64
 800dff8:	20000c54 	.word	0x20000c54
 800dffc:	20000c0c 	.word	0x20000c0c
 800e000:	20000d60 	.word	0x20000d60
 800e004:	20000bb1 	.word	0x20000bb1
 800e008:	200015c8 	.word	0x200015c8

0800e00c <searchE>:
//searchE
//a未知壁を含むマスを仮goal座標とし、スラローム連続走行で全マスに進む。仮goalを連続的に変化させる。全面探索終了後は半区画減速
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void searchE(){
 800e00c:	b580      	push	{r7, lr}
 800e00e:	b082      	sub	sp, #8
 800e010:	af00      	add	r7, sp, #0

	int i = 0;
 800e012:	2300      	movs	r3, #0
 800e014:	607b      	str	r3, [r7, #4]
	int j = 0;
 800e016:	2300      	movs	r3, #0
 800e018:	603b      	str	r3, [r7, #0]
	do {
		if(i == 0){
 800e01a:	687b      	ldr	r3, [r7, #4]
 800e01c:	2b00      	cmp	r3, #0
 800e01e:	d111      	bne.n	800e044 <searchE+0x38>
			//====a前に壁が無い想定で問答無用で前進====
			half_sectionA();
 800e020:	f7f7 fd30 	bl	8005a84 <half_sectionA>
			adv_pos();
 800e024:	f000 fbee 	bl	800e804 <adv_pos>
			write_map();														//地図の初期化
 800e028:	f000 fcb0 	bl	800e98c <write_map>

			//====a歩数等初期化====
			m_step = r_cnt = 0;													//歩数と経路カウンタの初期化
 800e02c:	4b44      	ldr	r3, [pc, #272]	; (800e140 <searchE+0x134>)
 800e02e:	2200      	movs	r2, #0
 800e030:	701a      	strb	r2, [r3, #0]
 800e032:	4b44      	ldr	r3, [pc, #272]	; (800e144 <searchE+0x138>)
 800e034:	2200      	movs	r2, #0
 800e036:	801a      	strh	r2, [r3, #0]
			find_pregoal();														//仮goalまでの歩数マップの初期化
 800e038:	f001 fbb0 	bl	800f79c <find_pregoal>
			make_smap2();
 800e03c:	f001 fda2 	bl	800fb84 <make_smap2>
			make_route();														//最短経路探索(route配列に動作が格納される)
 800e040:	f001 fa54 	bl	800f4ec <make_route>
		}

		//====a探索走行====
		do {
			//----a進行----
			switch (route[r_cnt++]) {										//route配列によって進行を決定。経路カウンタを進める
 800e044:	4b3e      	ldr	r3, [pc, #248]	; (800e140 <searchE+0x134>)
 800e046:	781b      	ldrb	r3, [r3, #0]
 800e048:	1c5a      	adds	r2, r3, #1
 800e04a:	b2d1      	uxtb	r1, r2
 800e04c:	4a3c      	ldr	r2, [pc, #240]	; (800e140 <searchE+0x134>)
 800e04e:	7011      	strb	r1, [r2, #0]
 800e050:	461a      	mov	r2, r3
 800e052:	4b3d      	ldr	r3, [pc, #244]	; (800e148 <searchE+0x13c>)
 800e054:	5c9b      	ldrb	r3, [r3, r2]
 800e056:	2b22      	cmp	r3, #34	; 0x22
 800e058:	d00e      	beq.n	800e078 <searchE+0x6c>
 800e05a:	2b22      	cmp	r3, #34	; 0x22
 800e05c:	dc02      	bgt.n	800e064 <searchE+0x58>
 800e05e:	2b11      	cmp	r3, #17
 800e060:	d01a      	beq.n	800e098 <searchE+0x8c>
 800e062:	e01c      	b.n	800e09e <searchE+0x92>
 800e064:	2b44      	cmp	r3, #68	; 0x44
 800e066:	d004      	beq.n	800e072 <searchE+0x66>
 800e068:	2b88      	cmp	r3, #136	; 0x88
 800e06a:	d118      	bne.n	800e09e <searchE+0x92>
				//----a前進----
			case 0x88:
				one_sectionU();
 800e06c:	f7f7 ffe2 	bl	8006034 <one_sectionU>
				break;
 800e070:	e015      	b.n	800e09e <searchE+0x92>
				//----a右折----
			case 0x44:
				slalom_R90();
 800e072:	f7f8 fa89 	bl	8006588 <slalom_R90>
				break;
 800e076:	e012      	b.n	800e09e <searchE+0x92>
				//----180回転----
			case 0x22:
				half_sectionD();
 800e078:	f7f7 fd4e 	bl	8005b18 <half_sectionD>
				rotate_180();
 800e07c:	f7f8 f9ac 	bl	80063d8 <rotate_180>
				if(wall_info & 0x88){
 800e080:	4b32      	ldr	r3, [pc, #200]	; (800e14c <searchE+0x140>)
 800e082:	781b      	ldrb	r3, [r3, #0]
 800e084:	f003 0388 	and.w	r3, r3, #136	; 0x88
 800e088:	2b00      	cmp	r3, #0
 800e08a:	d002      	beq.n	800e092 <searchE+0x86>
					set_position();
 800e08c:	f7f7 fbf2 	bl	8005874 <set_position>
				}else{
					half_sectionA();
				}
				break;
 800e090:	e005      	b.n	800e09e <searchE+0x92>
					half_sectionA();
 800e092:	f7f7 fcf7 	bl	8005a84 <half_sectionA>
				break;
 800e096:	e002      	b.n	800e09e <searchE+0x92>
				//----a左折----
			case 0x11:
				slalom_L90();
 800e098:	f7f8 fb5a 	bl	8006750 <slalom_L90>
				break;
 800e09c:	bf00      	nop
			}
			adv_pos();														//aマイクロマウス内部位置情報でも前進処理
 800e09e:	f000 fbb1 	bl	800e804 <adv_pos>
			j++;
 800e0a2:	683b      	ldr	r3, [r7, #0]
 800e0a4:	3301      	adds	r3, #1
 800e0a6:	603b      	str	r3, [r7, #0]
			if (j > 150) break;												//a移動マス数が250以上になった場合全面探索を中止
 800e0a8:	683b      	ldr	r3, [r7, #0]
 800e0aa:	2b96      	cmp	r3, #150	; 0x96
 800e0ac:	dc0e      	bgt.n	800e0cc <searchE+0xc0>

		} while ((mouse.x != pregoal_x) || (mouse.y != pregoal_y));			//a現在座標と仮goal座標が等しくなるまで実行
 800e0ae:	4b28      	ldr	r3, [pc, #160]	; (800e150 <searchE+0x144>)
 800e0b0:	781b      	ldrb	r3, [r3, #0]
 800e0b2:	b2da      	uxtb	r2, r3
 800e0b4:	4b27      	ldr	r3, [pc, #156]	; (800e154 <searchE+0x148>)
 800e0b6:	781b      	ldrb	r3, [r3, #0]
 800e0b8:	429a      	cmp	r2, r3
 800e0ba:	d1c3      	bne.n	800e044 <searchE+0x38>
 800e0bc:	4b24      	ldr	r3, [pc, #144]	; (800e150 <searchE+0x144>)
 800e0be:	785b      	ldrb	r3, [r3, #1]
 800e0c0:	b2da      	uxtb	r2, r3
 800e0c2:	4b25      	ldr	r3, [pc, #148]	; (800e158 <searchE+0x14c>)
 800e0c4:	781b      	ldrb	r3, [r3, #0]
 800e0c6:	429a      	cmp	r2, r3
 800e0c8:	d1bc      	bne.n	800e044 <searchE+0x38>
 800e0ca:	e000      	b.n	800e0ce <searchE+0xc2>
			if (j > 150) break;												//a移動マス数が250以上になった場合全面探索を中止
 800e0cc:	bf00      	nop

		get_wall_info();													//a壁情報の初期化, 後壁はなくなる
 800e0ce:	f002 fb9b 	bl	8010808 <get_wall_info>
		write_map();														//a地図の初期化
 800e0d2:	f000 fc5b 	bl	800e98c <write_map>
		//printf("get pregoal, x = %d, y = %d\n", mouse.x, mouse.y);

		//====a歩数等初期化====
		m_step = r_cnt = 0;													//a歩数と経路カウンタの初期化
 800e0d6:	4b1a      	ldr	r3, [pc, #104]	; (800e140 <searchE+0x134>)
 800e0d8:	2200      	movs	r2, #0
 800e0da:	701a      	strb	r2, [r3, #0]
 800e0dc:	4b19      	ldr	r3, [pc, #100]	; (800e144 <searchE+0x138>)
 800e0de:	2200      	movs	r2, #0
 800e0e0:	801a      	strh	r2, [r3, #0]

		find_pregoal();														//a仮goalまでの歩数マップの初期化
 800e0e2:	f001 fb5b 	bl	800f79c <find_pregoal>
		if(MF2.FLAG.ALLMAP) {
 800e0e6:	4b1d      	ldr	r3, [pc, #116]	; (800e15c <searchE+0x150>)
 800e0e8:	881b      	ldrh	r3, [r3, #0]
 800e0ea:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800e0ee:	b2db      	uxtb	r3, r3
 800e0f0:	2b00      	cmp	r3, #0
 800e0f2:	d002      	beq.n	800e0fa <searchE+0xee>
			//printf("get MF2.FLAG.ALLMAP\n");
			half_sectionD();
 800e0f4:	f7f7 fd10 	bl	8005b18 <half_sectionD>
			break;
 800e0f8:	e00e      	b.n	800e118 <searchE+0x10c>
		}
		make_smap2();
 800e0fa:	f001 fd43 	bl	800fb84 <make_smap2>
		make_route();														//a最短経路探索(route配列に動作が格納される)
 800e0fe:	f001 f9f5 	bl	800f4ec <make_route>

		if (j > 150) {
 800e102:	683b      	ldr	r3, [r7, #0]
 800e104:	2b96      	cmp	r3, #150	; 0x96
 800e106:	dc06      	bgt.n	800e116 <searchE+0x10a>
			break;															//a移動マス数が250以上になった場合全面探索を中止
		}
		i++;
 800e108:	687b      	ldr	r3, [r7, #4]
 800e10a:	3301      	adds	r3, #1
 800e10c:	607b      	str	r3, [r7, #4]

	} while (i < 150);														//a仮goalへの到着が130回以上になった場合全面探索を中止
 800e10e:	687b      	ldr	r3, [r7, #4]
 800e110:	2b95      	cmp	r3, #149	; 0x95
 800e112:	dd82      	ble.n	800e01a <searchE+0xe>
 800e114:	e000      	b.n	800e118 <searchE+0x10c>
			break;															//a移動マス数が250以上になった場合全面探索を中止
 800e116:	bf00      	nop

	HAL_Delay(500);
 800e118:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800e11c:	f7f2 ff7e 	bl	800101c <HAL_Delay>
	rotate_180();											//180度回転
 800e120:	f7f8 f95a 	bl	80063d8 <rotate_180>

	if(!MF.FLAG.SCND){
 800e124:	4b0e      	ldr	r3, [pc, #56]	; (800e160 <searchE+0x154>)
 800e126:	881b      	ldrh	r3, [r3, #0]
 800e128:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800e12c:	b2db      	uxtb	r3, r3
 800e12e:	2b00      	cmp	r3, #0
 800e130:	d101      	bne.n	800e136 <searchE+0x12a>
		store_map_in_eeprom();
 800e132:	f002 fab7 	bl	80106a4 <store_map_in_eeprom>
	}
}
 800e136:	bf00      	nop
 800e138:	3708      	adds	r7, #8
 800e13a:	46bd      	mov	sp, r7
 800e13c:	bd80      	pop	{r7, pc}
 800e13e:	bf00      	nop
 800e140:	200015d0 	.word	0x200015d0
 800e144:	2000034e 	.word	0x2000034e
 800e148:	20000c54 	.word	0x20000c54
 800e14c:	200002c8 	.word	0x200002c8
 800e150:	20000c0c 	.word	0x20000c0c
 800e154:	20000d5c 	.word	0x20000d5c
 800e158:	200012a1 	.word	0x200012a1
 800e15c:	20000f64 	.word	0x20000f64
 800e160:	20000f68 	.word	0x20000f68

0800e164 <searchF3>:
//searchF3
//aスラローム(+既知区間加速探索走行)+pass圧縮+機体方向&位置未更新+半区画ベースでgoal座標に進む
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void searchF3(){
 800e164:	b580      	push	{r7, lr}
 800e166:	b084      	sub	sp, #16
 800e168:	af00      	add	r7, sp, #0

	if(MF.FLAG.SCND){
 800e16a:	4b60      	ldr	r3, [pc, #384]	; (800e2ec <searchF3+0x188>)
 800e16c:	881b      	ldrh	r3, [r3, #0]
 800e16e:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800e172:	b2db      	uxtb	r3, r3
 800e174:	2b00      	cmp	r3, #0
 800e176:	d001      	beq.n	800e17c <searchF3+0x18>
		load_map_from_eeprom();
 800e178:	f002 face 	bl	8010718 <load_map_from_eeprom>
	}

	//====a1区画前進====
	adv_pos();
 800e17c:	f000 fb42 	bl	800e804 <adv_pos>

	//====a歩数マップ・経路作成====
	make_smap();											//a歩数マップ作成
 800e180:	f000 fdf8 	bl	800ed74 <make_smap>
	make_route();											//a最短経路探索（route配列に動作が格納される）
 800e184:	f001 f9b2 	bl	800f4ec <make_route>

	//====pass圧縮====
	p_cnt = 0;												//a経路カウンタの初期化
 800e188:	4b59      	ldr	r3, [pc, #356]	; (800e2f0 <searchF3+0x18c>)
 800e18a:	2200      	movs	r2, #0
 800e18c:	701a      	strb	r2, [r3, #0]
	pass_route2();
 800e18e:	f001 fe1d 	bl	800fdcc <pass_route2>

	//====a前に壁が無い想定で問答無用で前進====
	start_sectionA();
 800e192:	f7f7 fba3 	bl	80058dc <start_sectionA>

	MF2.FLAG.HACCEL = 0;
 800e196:	4a57      	ldr	r2, [pc, #348]	; (800e2f4 <searchF3+0x190>)
 800e198:	8813      	ldrh	r3, [r2, #0]
 800e19a:	f36f 0341 	bfc	r3, #1, #1
 800e19e:	8013      	strh	r3, [r2, #0]

	//====a探索走行====
	do{
		//----a進行----
		switch(pass[p_cnt++]){								//route配列によって進行を決定。経路カウンタを進める
 800e1a0:	4b53      	ldr	r3, [pc, #332]	; (800e2f0 <searchF3+0x18c>)
 800e1a2:	781b      	ldrb	r3, [r3, #0]
 800e1a4:	1c5a      	adds	r2, r3, #1
 800e1a6:	b2d1      	uxtb	r1, r2
 800e1a8:	4a51      	ldr	r2, [pc, #324]	; (800e2f0 <searchF3+0x18c>)
 800e1aa:	7011      	strb	r1, [r2, #0]
 800e1ac:	461a      	mov	r2, r3
 800e1ae:	4b52      	ldr	r3, [pc, #328]	; (800e2f8 <searchF3+0x194>)
 800e1b0:	569b      	ldrsb	r3, [r3, r2]
 800e1b2:	f113 0f04 	cmn.w	r3, #4
 800e1b6:	d01e      	beq.n	800e1f6 <searchF3+0x92>
 800e1b8:	f113 0f04 	cmn.w	r3, #4
 800e1bc:	dc09      	bgt.n	800e1d2 <searchF3+0x6e>
 800e1be:	f113 0f06 	cmn.w	r3, #6
 800e1c2:	d01e      	beq.n	800e202 <searchF3+0x9e>
 800e1c4:	f113 0f06 	cmn.w	r3, #6
 800e1c8:	dc18      	bgt.n	800e1fc <searchF3+0x98>
 800e1ca:	f113 0f72 	cmn.w	r3, #114	; 0x72
 800e1ce:	d01b      	beq.n	800e208 <searchF3+0xa4>
 800e1d0:	e01f      	b.n	800e212 <searchF3+0xae>
 800e1d2:	f113 0f02 	cmn.w	r3, #2
 800e1d6:	d008      	beq.n	800e1ea <searchF3+0x86>
 800e1d8:	f113 0f02 	cmn.w	r3, #2
 800e1dc:	db08      	blt.n	800e1f0 <searchF3+0x8c>
 800e1de:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e1e2:	d116      	bne.n	800e212 <searchF3+0xae>
			//----a右スラローム----
			case -1:
				slalom_R90();
 800e1e4:	f7f8 f9d0 	bl	8006588 <slalom_R90>
				break;
 800e1e8:	e04c      	b.n	800e284 <searchF3+0x120>

			//----a左スラローム----
			case -2:
				slalom_L90();
 800e1ea:	f7f8 fab1 	bl	8006750 <slalom_L90>
				break;
 800e1ee:	e049      	b.n	800e284 <searchF3+0x120>

			//----a大回り右90----
			case -3:
				Lslalom_R90();
 800e1f0:	f7f8 fb88 	bl	8006904 <Lslalom_R90>
				break;
 800e1f4:	e046      	b.n	800e284 <searchF3+0x120>

			//----a大回り左90----
			case -4:
				Lslalom_L90();
 800e1f6:	f7f8 fc5d 	bl	8006ab4 <Lslalom_L90>
				break;
 800e1fa:	e043      	b.n	800e284 <searchF3+0x120>

			//----a大回り右180----
			case -5:
				Lslalom_R180();
 800e1fc:	f7f8 fd26 	bl	8006c4c <Lslalom_R180>
				break;
 800e200:	e040      	b.n	800e284 <searchF3+0x120>

			//----a大回り左180----
			case -6:
				Lslalom_L180();
 800e202:	f7f8 fe09 	bl	8006e18 <Lslalom_L180>
				break;
 800e206:	e03d      	b.n	800e284 <searchF3+0x120>

			//----pass配列最後(なお本来呼び出される前にゴールする)----
			case -114:
				rotate_180();
 800e208:	f7f8 f8e6 	bl	80063d8 <rotate_180>
				rotate_180();
 800e20c:	f7f8 f8e4 	bl	80063d8 <rotate_180>
				while(1);
 800e210:	e7fe      	b.n	800e210 <searchF3+0xac>
				break;

			//----a前進----
			default:
				if(pass[p_cnt-1] < 4){
 800e212:	4b37      	ldr	r3, [pc, #220]	; (800e2f0 <searchF3+0x18c>)
 800e214:	781b      	ldrb	r3, [r3, #0]
 800e216:	3b01      	subs	r3, #1
 800e218:	4a37      	ldr	r2, [pc, #220]	; (800e2f8 <searchF3+0x194>)
 800e21a:	56d3      	ldrsb	r3, [r2, r3]
 800e21c:	2b03      	cmp	r3, #3
 800e21e:	dc11      	bgt.n	800e244 <searchF3+0xe0>
					for(int k = 0; k < pass[p_cnt-1]; k++){
 800e220:	2300      	movs	r3, #0
 800e222:	60fb      	str	r3, [r7, #12]
 800e224:	e004      	b.n	800e230 <searchF3+0xcc>
						half_sectionU();
 800e226:	f7f7 fd45 	bl	8005cb4 <half_sectionU>
					for(int k = 0; k < pass[p_cnt-1]; k++){
 800e22a:	68fb      	ldr	r3, [r7, #12]
 800e22c:	3301      	adds	r3, #1
 800e22e:	60fb      	str	r3, [r7, #12]
 800e230:	4b2f      	ldr	r3, [pc, #188]	; (800e2f0 <searchF3+0x18c>)
 800e232:	781b      	ldrb	r3, [r3, #0]
 800e234:	3b01      	subs	r3, #1
 800e236:	4a30      	ldr	r2, [pc, #192]	; (800e2f8 <searchF3+0x194>)
 800e238:	56d3      	ldrsb	r3, [r2, r3]
 800e23a:	461a      	mov	r2, r3
 800e23c:	68fb      	ldr	r3, [r7, #12]
 800e23e:	4293      	cmp	r3, r2
 800e240:	dbf1      	blt.n	800e226 <searchF3+0xc2>
						half_sectionU();
					}
					one_sectionD();
					MF2.FLAG.HACCEL = 0;
				}
				break;
 800e242:	e01e      	b.n	800e282 <searchF3+0x11e>
					one_sectionA();
 800e244:	f7f7 fd56 	bl	8005cf4 <one_sectionA>
					MF2.FLAG.HACCEL = 1;
 800e248:	4a2a      	ldr	r2, [pc, #168]	; (800e2f4 <searchF3+0x190>)
 800e24a:	8813      	ldrh	r3, [r2, #0]
 800e24c:	f043 0302 	orr.w	r3, r3, #2
 800e250:	8013      	strh	r3, [r2, #0]
					for(k = 0; k < pass[p_cnt-1]-4; k++){
 800e252:	2300      	movs	r3, #0
 800e254:	60bb      	str	r3, [r7, #8]
 800e256:	e004      	b.n	800e262 <searchF3+0xfe>
						half_sectionU();
 800e258:	f7f7 fd2c 	bl	8005cb4 <half_sectionU>
					for(k = 0; k < pass[p_cnt-1]-4; k++){
 800e25c:	68bb      	ldr	r3, [r7, #8]
 800e25e:	3301      	adds	r3, #1
 800e260:	60bb      	str	r3, [r7, #8]
 800e262:	4b23      	ldr	r3, [pc, #140]	; (800e2f0 <searchF3+0x18c>)
 800e264:	781b      	ldrb	r3, [r3, #0]
 800e266:	3b01      	subs	r3, #1
 800e268:	4a23      	ldr	r2, [pc, #140]	; (800e2f8 <searchF3+0x194>)
 800e26a:	56d3      	ldrsb	r3, [r2, r3]
 800e26c:	3b04      	subs	r3, #4
 800e26e:	68ba      	ldr	r2, [r7, #8]
 800e270:	429a      	cmp	r2, r3
 800e272:	dbf1      	blt.n	800e258 <searchF3+0xf4>
					one_sectionD();
 800e274:	f7f7 fda4 	bl	8005dc0 <one_sectionD>
					MF2.FLAG.HACCEL = 0;
 800e278:	4a1e      	ldr	r2, [pc, #120]	; (800e2f4 <searchF3+0x190>)
 800e27a:	8813      	ldrh	r3, [r2, #0]
 800e27c:	f36f 0341 	bfc	r3, #1, #1
 800e280:	8013      	strh	r3, [r2, #0]
				break;
 800e282:	bf00      	nop
		}
	}while(pass[p_cnt] != -114);
 800e284:	4b1a      	ldr	r3, [pc, #104]	; (800e2f0 <searchF3+0x18c>)
 800e286:	781b      	ldrb	r3, [r3, #0]
 800e288:	461a      	mov	r2, r3
 800e28a:	4b1b      	ldr	r3, [pc, #108]	; (800e2f8 <searchF3+0x194>)
 800e28c:	569b      	ldrsb	r3, [r3, r2]
 800e28e:	f113 0f72 	cmn.w	r3, #114	; 0x72
 800e292:	d185      	bne.n	800e1a0 <searchF3+0x3c>

	mouse.x = goal_x;
 800e294:	4b19      	ldr	r3, [pc, #100]	; (800e2fc <searchF3+0x198>)
 800e296:	781a      	ldrb	r2, [r3, #0]
 800e298:	4b19      	ldr	r3, [pc, #100]	; (800e300 <searchF3+0x19c>)
 800e29a:	701a      	strb	r2, [r3, #0]
	mouse.y = goal_y;
 800e29c:	4b19      	ldr	r3, [pc, #100]	; (800e304 <searchF3+0x1a0>)
 800e29e:	781a      	ldrb	r2, [r3, #0]
 800e2a0:	4b17      	ldr	r3, [pc, #92]	; (800e300 <searchF3+0x19c>)
 800e2a2:	705a      	strb	r2, [r3, #1]

	for(int j=0; j<goal_mode-1; j++){
 800e2a4:	2300      	movs	r3, #0
 800e2a6:	607b      	str	r3, [r7, #4]
 800e2a8:	e006      	b.n	800e2b8 <searchF3+0x154>
		one_sectionU();
 800e2aa:	f7f7 fec3 	bl	8006034 <one_sectionU>
		adv_pos();
 800e2ae:	f000 faa9 	bl	800e804 <adv_pos>
	for(int j=0; j<goal_mode-1; j++){
 800e2b2:	687b      	ldr	r3, [r7, #4]
 800e2b4:	3301      	adds	r3, #1
 800e2b6:	607b      	str	r3, [r7, #4]
 800e2b8:	4b13      	ldr	r3, [pc, #76]	; (800e308 <searchF3+0x1a4>)
 800e2ba:	781b      	ldrb	r3, [r3, #0]
 800e2bc:	3b01      	subs	r3, #1
 800e2be:	687a      	ldr	r2, [r7, #4]
 800e2c0:	429a      	cmp	r2, r3
 800e2c2:	dbf2      	blt.n	800e2aa <searchF3+0x146>
	}
	half_sectionD();
 800e2c4:	f7f7 fc28 	bl	8005b18 <half_sectionD>
	set_positionF();
 800e2c8:	f7f7 faea 	bl	80058a0 <set_positionF>

	HAL_Delay(500);
 800e2cc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800e2d0:	f7f2 fea4 	bl	800101c <HAL_Delay>
	rotate_180();											//180度回転
 800e2d4:	f7f8 f880 	bl	80063d8 <rotate_180>
//	driveC2(SETPOS_BACK);         //a尻を当てる程度に後退。回転後に停止する
//	degree_z = target_degree_z;
//	start_mode = 0;
	start_mode = 1;
 800e2d8:	4b0c      	ldr	r3, [pc, #48]	; (800e30c <searchF3+0x1a8>)
 800e2da:	2201      	movs	r2, #1
 800e2dc:	701a      	strb	r2, [r3, #0]
	goal_mode = 1;
 800e2de:	4b0a      	ldr	r3, [pc, #40]	; (800e308 <searchF3+0x1a4>)
 800e2e0:	2201      	movs	r2, #1
 800e2e2:	701a      	strb	r2, [r3, #0]

}
 800e2e4:	bf00      	nop
 800e2e6:	3710      	adds	r7, #16
 800e2e8:	46bd      	mov	sp, r7
 800e2ea:	bd80      	pop	{r7, pc}
 800e2ec:	20000f68 	.word	0x20000f68
 800e2f0:	200002b0 	.word	0x200002b0
 800e2f4:	20000f64 	.word	0x20000f64
 800e2f8:	20000350 	.word	0x20000350
 800e2fc:	20000bb0 	.word	0x20000bb0
 800e300:	20000c0c 	.word	0x20000c0c
 800e304:	20000b4c 	.word	0x20000b4c
 800e308:	20000bb1 	.word	0x20000bb1
 800e30c:	200015c8 	.word	0x200015c8

0800e310 <searchF4>:
//searchF4
//aスラローム(+既知区間加速探索走行)+pass圧縮+機体方向&位置未更新+半区画ベース+斜め走行でgoal座標に進む
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void searchF4(){
 800e310:	b580      	push	{r7, lr}
 800e312:	b084      	sub	sp, #16
 800e314:	af00      	add	r7, sp, #0

	if(MF.FLAG.SCND){
 800e316:	4bd0      	ldr	r3, [pc, #832]	; (800e658 <searchF4+0x348>)
 800e318:	881b      	ldrh	r3, [r3, #0]
 800e31a:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800e31e:	b2db      	uxtb	r3, r3
 800e320:	2b00      	cmp	r3, #0
 800e322:	d001      	beq.n	800e328 <searchF4+0x18>
		load_map_from_eeprom();
 800e324:	f002 f9f8 	bl	8010718 <load_map_from_eeprom>
	}

	//====a1区画前進====
	adv_pos();
 800e328:	f000 fa6c 	bl	800e804 <adv_pos>

	//====a歩数マップ・経路作成====
	full_led_write(RED);
 800e32c:	2001      	movs	r0, #1
 800e32e:	f002 fadf 	bl	80108f0 <full_led_write>
	make_smap();											//a歩数マップ作成
 800e332:	f000 fd1f 	bl	800ed74 <make_smap>
	make_route();											//a最短経路探索（route配列に動作が格納される）
 800e336:	f001 f8d9 	bl	800f4ec <make_route>

	//====pass圧縮====
	p_cnt = 0;												//a経路カウンタの初期化
 800e33a:	4bc8      	ldr	r3, [pc, #800]	; (800e65c <searchF4+0x34c>)
 800e33c:	2200      	movs	r2, #0
 800e33e:	701a      	strb	r2, [r3, #0]
	pass_route3();
 800e340:	f001 fe58 	bl	800fff4 <pass_route3>

	if(start_mode == 0 || start_mode == 1){					//a大回りではない場合、先頭の半区画直進をスキップ
 800e344:	4bc6      	ldr	r3, [pc, #792]	; (800e660 <searchF4+0x350>)
 800e346:	781b      	ldrb	r3, [r3, #0]
 800e348:	b2db      	uxtb	r3, r3
 800e34a:	2b00      	cmp	r3, #0
 800e34c:	d004      	beq.n	800e358 <searchF4+0x48>
 800e34e:	4bc4      	ldr	r3, [pc, #784]	; (800e660 <searchF4+0x350>)
 800e350:	781b      	ldrb	r3, [r3, #0]
 800e352:	b2db      	uxtb	r3, r3
 800e354:	2b01      	cmp	r3, #1
 800e356:	d109      	bne.n	800e36c <searchF4+0x5c>
		pass[p_cnt]--;
 800e358:	4bc0      	ldr	r3, [pc, #768]	; (800e65c <searchF4+0x34c>)
 800e35a:	781b      	ldrb	r3, [r3, #0]
 800e35c:	4ac1      	ldr	r2, [pc, #772]	; (800e664 <searchF4+0x354>)
 800e35e:	56d2      	ldrsb	r2, [r2, r3]
 800e360:	b2d2      	uxtb	r2, r2
 800e362:	3a01      	subs	r2, #1
 800e364:	b2d2      	uxtb	r2, r2
 800e366:	b251      	sxtb	r1, r2
 800e368:	4abe      	ldr	r2, [pc, #760]	; (800e664 <searchF4+0x354>)
 800e36a:	54d1      	strb	r1, [r2, r3]
	}

	//====a前に壁が無い想定で問答無用で前進====
	start_sectionA();
 800e36c:	f7f7 fab6 	bl	80058dc <start_sectionA>

	MF2.FLAG.HACCEL = 0;
 800e370:	4abd      	ldr	r2, [pc, #756]	; (800e668 <searchF4+0x358>)
 800e372:	8813      	ldrh	r3, [r2, #0]
 800e374:	f36f 0341 	bfc	r3, #1, #1
 800e378:	8013      	strh	r3, [r2, #0]
	MF.FLAG.XDIR = 1;
 800e37a:	4ab7      	ldr	r2, [pc, #732]	; (800e658 <searchF4+0x348>)
 800e37c:	8813      	ldrh	r3, [r2, #0]
 800e37e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800e382:	8013      	strh	r3, [r2, #0]
	//====a探索走行====
	do{
		//----a進行----
		switch(pass[p_cnt++]){								//route配列によって進行を決定。経路カウンタを進める
 800e384:	4bb5      	ldr	r3, [pc, #724]	; (800e65c <searchF4+0x34c>)
 800e386:	781b      	ldrb	r3, [r3, #0]
 800e388:	1c5a      	adds	r2, r3, #1
 800e38a:	b2d1      	uxtb	r1, r2
 800e38c:	4ab3      	ldr	r2, [pc, #716]	; (800e65c <searchF4+0x34c>)
 800e38e:	7011      	strb	r1, [r2, #0]
 800e390:	461a      	mov	r2, r3
 800e392:	4bb4      	ldr	r3, [pc, #720]	; (800e664 <searchF4+0x354>)
 800e394:	569b      	ldrsb	r3, [r3, r2]
 800e396:	3372      	adds	r3, #114	; 0x72
 800e398:	2b71      	cmp	r3, #113	; 0x71
 800e39a:	f200 811c 	bhi.w	800e5d6 <searchF4+0x2c6>
 800e39e:	a201      	add	r2, pc, #4	; (adr r2, 800e3a4 <searchF4+0x94>)
 800e3a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e3a4:	0800e5cd 	.word	0x0800e5cd
 800e3a8:	0800e5d7 	.word	0x0800e5d7
 800e3ac:	0800e5d7 	.word	0x0800e5d7
 800e3b0:	0800e5d7 	.word	0x0800e5d7
 800e3b4:	0800e5d7 	.word	0x0800e5d7
 800e3b8:	0800e5d7 	.word	0x0800e5d7
 800e3bc:	0800e5d7 	.word	0x0800e5d7
 800e3c0:	0800e5d7 	.word	0x0800e5d7
 800e3c4:	0800e5d7 	.word	0x0800e5d7
 800e3c8:	0800e5d7 	.word	0x0800e5d7
 800e3cc:	0800e5d7 	.word	0x0800e5d7
 800e3d0:	0800e5d7 	.word	0x0800e5d7
 800e3d4:	0800e5d7 	.word	0x0800e5d7
 800e3d8:	0800e5d7 	.word	0x0800e5d7
 800e3dc:	0800e5d7 	.word	0x0800e5d7
 800e3e0:	0800e5d7 	.word	0x0800e5d7
 800e3e4:	0800e5d7 	.word	0x0800e5d7
 800e3e8:	0800e5d7 	.word	0x0800e5d7
 800e3ec:	0800e5d7 	.word	0x0800e5d7
 800e3f0:	0800e5d7 	.word	0x0800e5d7
 800e3f4:	0800e5d7 	.word	0x0800e5d7
 800e3f8:	0800e5d7 	.word	0x0800e5d7
 800e3fc:	0800e5d7 	.word	0x0800e5d7
 800e400:	0800e5d7 	.word	0x0800e5d7
 800e404:	0800e5d7 	.word	0x0800e5d7
 800e408:	0800e5d7 	.word	0x0800e5d7
 800e40c:	0800e5d7 	.word	0x0800e5d7
 800e410:	0800e5d7 	.word	0x0800e5d7
 800e414:	0800e5d7 	.word	0x0800e5d7
 800e418:	0800e5d7 	.word	0x0800e5d7
 800e41c:	0800e5d7 	.word	0x0800e5d7
 800e420:	0800e5d7 	.word	0x0800e5d7
 800e424:	0800e5d7 	.word	0x0800e5d7
 800e428:	0800e5d7 	.word	0x0800e5d7
 800e42c:	0800e5d7 	.word	0x0800e5d7
 800e430:	0800e5d7 	.word	0x0800e5d7
 800e434:	0800e5d7 	.word	0x0800e5d7
 800e438:	0800e5d7 	.word	0x0800e5d7
 800e43c:	0800e5d7 	.word	0x0800e5d7
 800e440:	0800e5d7 	.word	0x0800e5d7
 800e444:	0800e5d7 	.word	0x0800e5d7
 800e448:	0800e5d7 	.word	0x0800e5d7
 800e44c:	0800e5d7 	.word	0x0800e5d7
 800e450:	0800e5d7 	.word	0x0800e5d7
 800e454:	0800e5d7 	.word	0x0800e5d7
 800e458:	0800e5d7 	.word	0x0800e5d7
 800e45c:	0800e5d7 	.word	0x0800e5d7
 800e460:	0800e5d7 	.word	0x0800e5d7
 800e464:	0800e5d7 	.word	0x0800e5d7
 800e468:	0800e5d7 	.word	0x0800e5d7
 800e46c:	0800e5d7 	.word	0x0800e5d7
 800e470:	0800e5d7 	.word	0x0800e5d7
 800e474:	0800e5d7 	.word	0x0800e5d7
 800e478:	0800e5d7 	.word	0x0800e5d7
 800e47c:	0800e5d7 	.word	0x0800e5d7
 800e480:	0800e5d7 	.word	0x0800e5d7
 800e484:	0800e5d7 	.word	0x0800e5d7
 800e488:	0800e5d7 	.word	0x0800e5d7
 800e48c:	0800e5d7 	.word	0x0800e5d7
 800e490:	0800e5d7 	.word	0x0800e5d7
 800e494:	0800e5d7 	.word	0x0800e5d7
 800e498:	0800e5d7 	.word	0x0800e5d7
 800e49c:	0800e5d7 	.word	0x0800e5d7
 800e4a0:	0800e5d7 	.word	0x0800e5d7
 800e4a4:	0800e5d7 	.word	0x0800e5d7
 800e4a8:	0800e5d7 	.word	0x0800e5d7
 800e4ac:	0800e5d7 	.word	0x0800e5d7
 800e4b0:	0800e5d7 	.word	0x0800e5d7
 800e4b4:	0800e5d7 	.word	0x0800e5d7
 800e4b8:	0800e5d7 	.word	0x0800e5d7
 800e4bc:	0800e5d7 	.word	0x0800e5d7
 800e4c0:	0800e5d7 	.word	0x0800e5d7
 800e4c4:	0800e5d7 	.word	0x0800e5d7
 800e4c8:	0800e5d7 	.word	0x0800e5d7
 800e4cc:	0800e5d7 	.word	0x0800e5d7
 800e4d0:	0800e5d7 	.word	0x0800e5d7
 800e4d4:	0800e5d7 	.word	0x0800e5d7
 800e4d8:	0800e5d7 	.word	0x0800e5d7
 800e4dc:	0800e5d7 	.word	0x0800e5d7
 800e4e0:	0800e5d7 	.word	0x0800e5d7
 800e4e4:	0800e5d7 	.word	0x0800e5d7
 800e4e8:	0800e5d7 	.word	0x0800e5d7
 800e4ec:	0800e5d7 	.word	0x0800e5d7
 800e4f0:	0800e5d7 	.word	0x0800e5d7
 800e4f4:	0800e5d7 	.word	0x0800e5d7
 800e4f8:	0800e5d7 	.word	0x0800e5d7
 800e4fc:	0800e5d7 	.word	0x0800e5d7
 800e500:	0800e5d7 	.word	0x0800e5d7
 800e504:	0800e5d7 	.word	0x0800e5d7
 800e508:	0800e5d7 	.word	0x0800e5d7
 800e50c:	0800e5d7 	.word	0x0800e5d7
 800e510:	0800e5d7 	.word	0x0800e5d7
 800e514:	0800e5d7 	.word	0x0800e5d7
 800e518:	0800e5d7 	.word	0x0800e5d7
 800e51c:	0800e5d7 	.word	0x0800e5d7
 800e520:	0800e5d7 	.word	0x0800e5d7
 800e524:	0800e5d7 	.word	0x0800e5d7
 800e528:	0800e5d7 	.word	0x0800e5d7
 800e52c:	0800e5c7 	.word	0x0800e5c7
 800e530:	0800e5c1 	.word	0x0800e5c1
 800e534:	0800e5bb 	.word	0x0800e5bb
 800e538:	0800e5b5 	.word	0x0800e5b5
 800e53c:	0800e5af 	.word	0x0800e5af
 800e540:	0800e5a9 	.word	0x0800e5a9
 800e544:	0800e5a3 	.word	0x0800e5a3
 800e548:	0800e59d 	.word	0x0800e59d
 800e54c:	0800e597 	.word	0x0800e597
 800e550:	0800e591 	.word	0x0800e591
 800e554:	0800e58b 	.word	0x0800e58b
 800e558:	0800e585 	.word	0x0800e585
 800e55c:	0800e57f 	.word	0x0800e57f
 800e560:	0800e579 	.word	0x0800e579
 800e564:	0800e573 	.word	0x0800e573
 800e568:	0800e56d 	.word	0x0800e56d
			//----a右スラローム----
			case -1:
				slalom_R90();
 800e56c:	f7f8 f80c 	bl	8006588 <slalom_R90>
				break;
 800e570:	e0cd      	b.n	800e70e <searchF4+0x3fe>

			//----a左スラローム----
			case -2:
				slalom_L90();
 800e572:	f7f8 f8ed 	bl	8006750 <slalom_L90>
				break;
 800e576:	e0ca      	b.n	800e70e <searchF4+0x3fe>

			//----a大回り右90----
			case -3:
				Lslalom_R90();
 800e578:	f7f8 f9c4 	bl	8006904 <Lslalom_R90>
				break;
 800e57c:	e0c7      	b.n	800e70e <searchF4+0x3fe>

			//----a大回り左90----
			case -4:
				Lslalom_L90();
 800e57e:	f7f8 fa99 	bl	8006ab4 <Lslalom_L90>
				break;
 800e582:	e0c4      	b.n	800e70e <searchF4+0x3fe>

			//----a大回り右180----
			case -5:
				Lslalom_R180();
 800e584:	f7f8 fb62 	bl	8006c4c <Lslalom_R180>
				break;
 800e588:	e0c1      	b.n	800e70e <searchF4+0x3fe>

			//----a大回り左180----
			case -6:
				Lslalom_L180();
 800e58a:	f7f8 fc45 	bl	8006e18 <Lslalom_L180>
				break;
 800e58e:	e0be      	b.n	800e70e <searchF4+0x3fe>

			//----a斜め右V45----
			case -7:
				v_R45();
 800e590:	f7f8 fd1e 	bl	8006fd0 <v_R45>
				break;
 800e594:	e0bb      	b.n	800e70e <searchF4+0x3fe>

			//----a斜め左V45----
			case -8:
				v_L45();
 800e596:	f7f8 fe9f 	bl	80072d8 <v_L45>
				break;
 800e59a:	e0b8      	b.n	800e70e <searchF4+0x3fe>

			//----a斜め右V90----
			case -9:
				v_R90();
 800e59c:	f7f9 f9ba 	bl	8007914 <v_R90>
				break;
 800e5a0:	e0b5      	b.n	800e70e <searchF4+0x3fe>

			//----a斜め左V90----
			case -10:
				v_L90();
 800e5a2:	f7f9 fa5f 	bl	8007a64 <v_L90>
				break;
 800e5a6:	e0b2      	b.n	800e70e <searchF4+0x3fe>

			//----a斜め右V135----
			case -11:
				v_R135();
 800e5a8:	f7f9 fafe 	bl	8007ba8 <v_R135>
				break;
 800e5ac:	e0af      	b.n	800e70e <searchF4+0x3fe>

			//----a斜め左V135----
			case -12:
				v_L135();
 800e5ae:	f7f9 fc83 	bl	8007eb8 <v_L135>
				break;
 800e5b2:	e0ac      	b.n	800e70e <searchF4+0x3fe>

			//----a斜め右V45Goal----
			case -13:
				v_R45D();
 800e5b4:	f7f9 f80c 	bl	80075d0 <v_R45D>
				break;
 800e5b8:	e0a9      	b.n	800e70e <searchF4+0x3fe>

			//----a斜め左V45Goal----
			case -14:
				v_L45D();
 800e5ba:	f7f9 f8dd 	bl	8007778 <v_L45D>
				break;
 800e5be:	e0a6      	b.n	800e70e <searchF4+0x3fe>

			//----a斜め右V135Goal----
			case -15:
				v_R135D();
 800e5c0:	f7f9 fdf6 	bl	80081b0 <v_R135D>
				break;
 800e5c4:	e0a3      	b.n	800e70e <searchF4+0x3fe>

			//----a斜め左V135Goal----
			case -16:
				v_L135D();
 800e5c6:	f7f9 fecb 	bl	8008360 <v_L135D>
				break;
 800e5ca:	e0a0      	b.n	800e70e <searchF4+0x3fe>

			//----pass配列最後(なお本来呼び出される前にゴールする)----
			case -114:
				rotate_180();
 800e5cc:	f7f7 ff04 	bl	80063d8 <rotate_180>
				rotate_180();
 800e5d0:	f7f7 ff02 	bl	80063d8 <rotate_180>
				while(1);
 800e5d4:	e7fe      	b.n	800e5d4 <searchF4+0x2c4>
				break;

			//----a前進----
			default:
				if(pass[p_cnt-1] < 4){
 800e5d6:	4b21      	ldr	r3, [pc, #132]	; (800e65c <searchF4+0x34c>)
 800e5d8:	781b      	ldrb	r3, [r3, #0]
 800e5da:	3b01      	subs	r3, #1
 800e5dc:	4a21      	ldr	r2, [pc, #132]	; (800e664 <searchF4+0x354>)
 800e5de:	56d3      	ldrsb	r3, [r2, r3]
 800e5e0:	2b03      	cmp	r3, #3
 800e5e2:	dc11      	bgt.n	800e608 <searchF4+0x2f8>
					for(int k = 0; k < pass[p_cnt-1]; k++){
 800e5e4:	2300      	movs	r3, #0
 800e5e6:	60fb      	str	r3, [r7, #12]
 800e5e8:	e004      	b.n	800e5f4 <searchF4+0x2e4>
						half_sectionU();
 800e5ea:	f7f7 fb63 	bl	8005cb4 <half_sectionU>
					for(int k = 0; k < pass[p_cnt-1]; k++){
 800e5ee:	68fb      	ldr	r3, [r7, #12]
 800e5f0:	3301      	adds	r3, #1
 800e5f2:	60fb      	str	r3, [r7, #12]
 800e5f4:	4b19      	ldr	r3, [pc, #100]	; (800e65c <searchF4+0x34c>)
 800e5f6:	781b      	ldrb	r3, [r3, #0]
 800e5f8:	3b01      	subs	r3, #1
 800e5fa:	4a1a      	ldr	r2, [pc, #104]	; (800e664 <searchF4+0x354>)
 800e5fc:	56d3      	ldrsb	r3, [r2, r3]
 800e5fe:	461a      	mov	r2, r3
 800e600:	68fb      	ldr	r3, [r7, #12]
 800e602:	4293      	cmp	r3, r2
 800e604:	dbf1      	blt.n	800e5ea <searchF4+0x2da>
						p_cnt++;
					}else{
						half_sectionV();
					}
				}
				break;
 800e606:	e081      	b.n	800e70c <searchF4+0x3fc>
				}else if(pass[p_cnt-1] < 64){
 800e608:	4b14      	ldr	r3, [pc, #80]	; (800e65c <searchF4+0x34c>)
 800e60a:	781b      	ldrb	r3, [r3, #0]
 800e60c:	3b01      	subs	r3, #1
 800e60e:	4a15      	ldr	r2, [pc, #84]	; (800e664 <searchF4+0x354>)
 800e610:	56d3      	ldrsb	r3, [r2, r3]
 800e612:	2b3f      	cmp	r3, #63	; 0x3f
 800e614:	dc2a      	bgt.n	800e66c <searchF4+0x35c>
					one_sectionA();
 800e616:	f7f7 fb6d 	bl	8005cf4 <one_sectionA>
					MF2.FLAG.HACCEL = 1;
 800e61a:	4a13      	ldr	r2, [pc, #76]	; (800e668 <searchF4+0x358>)
 800e61c:	8813      	ldrh	r3, [r2, #0]
 800e61e:	f043 0302 	orr.w	r3, r3, #2
 800e622:	8013      	strh	r3, [r2, #0]
					for(k = 0; k < pass[p_cnt-1]-4; k++){
 800e624:	2300      	movs	r3, #0
 800e626:	60bb      	str	r3, [r7, #8]
 800e628:	e004      	b.n	800e634 <searchF4+0x324>
						half_sectionU();
 800e62a:	f7f7 fb43 	bl	8005cb4 <half_sectionU>
					for(k = 0; k < pass[p_cnt-1]-4; k++){
 800e62e:	68bb      	ldr	r3, [r7, #8]
 800e630:	3301      	adds	r3, #1
 800e632:	60bb      	str	r3, [r7, #8]
 800e634:	4b09      	ldr	r3, [pc, #36]	; (800e65c <searchF4+0x34c>)
 800e636:	781b      	ldrb	r3, [r3, #0]
 800e638:	3b01      	subs	r3, #1
 800e63a:	4a0a      	ldr	r2, [pc, #40]	; (800e664 <searchF4+0x354>)
 800e63c:	56d3      	ldrsb	r3, [r2, r3]
 800e63e:	3b04      	subs	r3, #4
 800e640:	68ba      	ldr	r2, [r7, #8]
 800e642:	429a      	cmp	r2, r3
 800e644:	dbf1      	blt.n	800e62a <searchF4+0x31a>
					one_sectionD();
 800e646:	f7f7 fbbb 	bl	8005dc0 <one_sectionD>
					MF2.FLAG.HACCEL = 0;
 800e64a:	4a07      	ldr	r2, [pc, #28]	; (800e668 <searchF4+0x358>)
 800e64c:	8813      	ldrh	r3, [r2, #0]
 800e64e:	f36f 0341 	bfc	r3, #1, #1
 800e652:	8013      	strh	r3, [r2, #0]
				break;
 800e654:	e05a      	b.n	800e70c <searchF4+0x3fc>
 800e656:	bf00      	nop
 800e658:	20000f68 	.word	0x20000f68
 800e65c:	200002b0 	.word	0x200002b0
 800e660:	200015c8 	.word	0x200015c8
 800e664:	20000350 	.word	0x20000350
 800e668:	20000f64 	.word	0x20000f64
					if((pass[p_cnt] == 64) && (pass[p_cnt+1] == 64) && (pass[p_cnt+2] == 64) && (MF2.FLAG.HACCEL == 0)){
 800e66c:	4b5c      	ldr	r3, [pc, #368]	; (800e7e0 <searchF4+0x4d0>)
 800e66e:	781b      	ldrb	r3, [r3, #0]
 800e670:	461a      	mov	r2, r3
 800e672:	4b5c      	ldr	r3, [pc, #368]	; (800e7e4 <searchF4+0x4d4>)
 800e674:	569b      	ldrsb	r3, [r3, r2]
 800e676:	2b40      	cmp	r3, #64	; 0x40
 800e678:	d122      	bne.n	800e6c0 <searchF4+0x3b0>
 800e67a:	4b59      	ldr	r3, [pc, #356]	; (800e7e0 <searchF4+0x4d0>)
 800e67c:	781b      	ldrb	r3, [r3, #0]
 800e67e:	3301      	adds	r3, #1
 800e680:	4a58      	ldr	r2, [pc, #352]	; (800e7e4 <searchF4+0x4d4>)
 800e682:	56d3      	ldrsb	r3, [r2, r3]
 800e684:	2b40      	cmp	r3, #64	; 0x40
 800e686:	d11b      	bne.n	800e6c0 <searchF4+0x3b0>
 800e688:	4b55      	ldr	r3, [pc, #340]	; (800e7e0 <searchF4+0x4d0>)
 800e68a:	781b      	ldrb	r3, [r3, #0]
 800e68c:	3302      	adds	r3, #2
 800e68e:	4a55      	ldr	r2, [pc, #340]	; (800e7e4 <searchF4+0x4d4>)
 800e690:	56d3      	ldrsb	r3, [r2, r3]
 800e692:	2b40      	cmp	r3, #64	; 0x40
 800e694:	d114      	bne.n	800e6c0 <searchF4+0x3b0>
 800e696:	4b54      	ldr	r3, [pc, #336]	; (800e7e8 <searchF4+0x4d8>)
 800e698:	881b      	ldrh	r3, [r3, #0]
 800e69a:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800e69e:	b2db      	uxtb	r3, r3
 800e6a0:	2b00      	cmp	r3, #0
 800e6a2:	d10d      	bne.n	800e6c0 <searchF4+0x3b0>
						one_sectionVA();
 800e6a4:	f7f7 fbfe 	bl	8005ea4 <one_sectionVA>
						MF2.FLAG.HACCEL = 1;
 800e6a8:	4a4f      	ldr	r2, [pc, #316]	; (800e7e8 <searchF4+0x4d8>)
 800e6aa:	8813      	ldrh	r3, [r2, #0]
 800e6ac:	f043 0302 	orr.w	r3, r3, #2
 800e6b0:	8013      	strh	r3, [r2, #0]
						p_cnt++;
 800e6b2:	4b4b      	ldr	r3, [pc, #300]	; (800e7e0 <searchF4+0x4d0>)
 800e6b4:	781b      	ldrb	r3, [r3, #0]
 800e6b6:	3301      	adds	r3, #1
 800e6b8:	b2da      	uxtb	r2, r3
 800e6ba:	4b49      	ldr	r3, [pc, #292]	; (800e7e0 <searchF4+0x4d0>)
 800e6bc:	701a      	strb	r2, [r3, #0]
 800e6be:	e025      	b.n	800e70c <searchF4+0x3fc>
					else if((pass[p_cnt] == 64) && (pass[p_cnt+1] != 64) && (MF2.FLAG.HACCEL == 1)){
 800e6c0:	4b47      	ldr	r3, [pc, #284]	; (800e7e0 <searchF4+0x4d0>)
 800e6c2:	781b      	ldrb	r3, [r3, #0]
 800e6c4:	461a      	mov	r2, r3
 800e6c6:	4b47      	ldr	r3, [pc, #284]	; (800e7e4 <searchF4+0x4d4>)
 800e6c8:	569b      	ldrsb	r3, [r3, r2]
 800e6ca:	2b40      	cmp	r3, #64	; 0x40
 800e6cc:	d11b      	bne.n	800e706 <searchF4+0x3f6>
 800e6ce:	4b44      	ldr	r3, [pc, #272]	; (800e7e0 <searchF4+0x4d0>)
 800e6d0:	781b      	ldrb	r3, [r3, #0]
 800e6d2:	3301      	adds	r3, #1
 800e6d4:	4a43      	ldr	r2, [pc, #268]	; (800e7e4 <searchF4+0x4d4>)
 800e6d6:	56d3      	ldrsb	r3, [r2, r3]
 800e6d8:	2b40      	cmp	r3, #64	; 0x40
 800e6da:	d014      	beq.n	800e706 <searchF4+0x3f6>
 800e6dc:	4b42      	ldr	r3, [pc, #264]	; (800e7e8 <searchF4+0x4d8>)
 800e6de:	881b      	ldrh	r3, [r3, #0]
 800e6e0:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800e6e4:	b2db      	uxtb	r3, r3
 800e6e6:	2b01      	cmp	r3, #1
 800e6e8:	d10d      	bne.n	800e706 <searchF4+0x3f6>
						one_sectionVD();
 800e6ea:	f7f7 fc39 	bl	8005f60 <one_sectionVD>
						MF2.FLAG.HACCEL = 0;
 800e6ee:	4a3e      	ldr	r2, [pc, #248]	; (800e7e8 <searchF4+0x4d8>)
 800e6f0:	8813      	ldrh	r3, [r2, #0]
 800e6f2:	f36f 0341 	bfc	r3, #1, #1
 800e6f6:	8013      	strh	r3, [r2, #0]
						p_cnt++;
 800e6f8:	4b39      	ldr	r3, [pc, #228]	; (800e7e0 <searchF4+0x4d0>)
 800e6fa:	781b      	ldrb	r3, [r3, #0]
 800e6fc:	3301      	adds	r3, #1
 800e6fe:	b2da      	uxtb	r2, r3
 800e700:	4b37      	ldr	r3, [pc, #220]	; (800e7e0 <searchF4+0x4d0>)
 800e702:	701a      	strb	r2, [r3, #0]
 800e704:	e002      	b.n	800e70c <searchF4+0x3fc>
						half_sectionV();
 800e706:	f7f7 fae1 	bl	8005ccc <half_sectionV>
				break;
 800e70a:	e7ff      	b.n	800e70c <searchF4+0x3fc>
 800e70c:	bf00      	nop
		}

	}while(pass[p_cnt] != -114);
 800e70e:	4b34      	ldr	r3, [pc, #208]	; (800e7e0 <searchF4+0x4d0>)
 800e710:	781b      	ldrb	r3, [r3, #0]
 800e712:	461a      	mov	r2, r3
 800e714:	4b33      	ldr	r3, [pc, #204]	; (800e7e4 <searchF4+0x4d4>)
 800e716:	569b      	ldrsb	r3, [r3, r2]
 800e718:	f113 0f72 	cmn.w	r3, #114	; 0x72
 800e71c:	f47f ae32 	bne.w	800e384 <searchF4+0x74>

	mouse.x = goal_x;
 800e720:	4b32      	ldr	r3, [pc, #200]	; (800e7ec <searchF4+0x4dc>)
 800e722:	781a      	ldrb	r2, [r3, #0]
 800e724:	4b32      	ldr	r3, [pc, #200]	; (800e7f0 <searchF4+0x4e0>)
 800e726:	701a      	strb	r2, [r3, #0]
	mouse.y = goal_y;
 800e728:	4b32      	ldr	r3, [pc, #200]	; (800e7f4 <searchF4+0x4e4>)
 800e72a:	781a      	ldrb	r2, [r3, #0]
 800e72c:	4b30      	ldr	r3, [pc, #192]	; (800e7f0 <searchF4+0x4e0>)
 800e72e:	705a      	strb	r2, [r3, #1]
	mouse.dir = mouse.dir / 2;
 800e730:	4b2f      	ldr	r3, [pc, #188]	; (800e7f0 <searchF4+0x4e0>)
 800e732:	789b      	ldrb	r3, [r3, #2]
 800e734:	b2db      	uxtb	r3, r3
 800e736:	085b      	lsrs	r3, r3, #1
 800e738:	b2da      	uxtb	r2, r3
 800e73a:	4b2d      	ldr	r3, [pc, #180]	; (800e7f0 <searchF4+0x4e0>)
 800e73c:	709a      	strb	r2, [r3, #2]
	MF.FLAG.XDIR = 0;
 800e73e:	4a2e      	ldr	r2, [pc, #184]	; (800e7f8 <searchF4+0x4e8>)
 800e740:	8813      	ldrh	r3, [r2, #0]
 800e742:	f36f 330c 	bfc	r3, #12, #1
 800e746:	8013      	strh	r3, [r2, #0]

	if(pass[p_cnt-1] != -13 && pass[p_cnt-1] != -14 && pass[p_cnt-1] != -15 && pass[p_cnt-1] != -16){
 800e748:	4b25      	ldr	r3, [pc, #148]	; (800e7e0 <searchF4+0x4d0>)
 800e74a:	781b      	ldrb	r3, [r3, #0]
 800e74c:	3b01      	subs	r3, #1
 800e74e:	4a25      	ldr	r2, [pc, #148]	; (800e7e4 <searchF4+0x4d4>)
 800e750:	56d3      	ldrsb	r3, [r2, r3]
 800e752:	f113 0f0d 	cmn.w	r3, #13
 800e756:	d032      	beq.n	800e7be <searchF4+0x4ae>
 800e758:	4b21      	ldr	r3, [pc, #132]	; (800e7e0 <searchF4+0x4d0>)
 800e75a:	781b      	ldrb	r3, [r3, #0]
 800e75c:	3b01      	subs	r3, #1
 800e75e:	4a21      	ldr	r2, [pc, #132]	; (800e7e4 <searchF4+0x4d4>)
 800e760:	56d3      	ldrsb	r3, [r2, r3]
 800e762:	f113 0f0e 	cmn.w	r3, #14
 800e766:	d02a      	beq.n	800e7be <searchF4+0x4ae>
 800e768:	4b1d      	ldr	r3, [pc, #116]	; (800e7e0 <searchF4+0x4d0>)
 800e76a:	781b      	ldrb	r3, [r3, #0]
 800e76c:	3b01      	subs	r3, #1
 800e76e:	4a1d      	ldr	r2, [pc, #116]	; (800e7e4 <searchF4+0x4d4>)
 800e770:	56d3      	ldrsb	r3, [r2, r3]
 800e772:	f113 0f0f 	cmn.w	r3, #15
 800e776:	d022      	beq.n	800e7be <searchF4+0x4ae>
 800e778:	4b19      	ldr	r3, [pc, #100]	; (800e7e0 <searchF4+0x4d0>)
 800e77a:	781b      	ldrb	r3, [r3, #0]
 800e77c:	3b01      	subs	r3, #1
 800e77e:	4a19      	ldr	r2, [pc, #100]	; (800e7e4 <searchF4+0x4d4>)
 800e780:	56d3      	ldrsb	r3, [r2, r3]
 800e782:	f113 0f10 	cmn.w	r3, #16
 800e786:	d01a      	beq.n	800e7be <searchF4+0x4ae>
		for(int j=0; j<goal_mode-1; j++){
 800e788:	2300      	movs	r3, #0
 800e78a:	607b      	str	r3, [r7, #4]
 800e78c:	e006      	b.n	800e79c <searchF4+0x48c>
			one_sectionU();
 800e78e:	f7f7 fc51 	bl	8006034 <one_sectionU>
			adv_pos();
 800e792:	f000 f837 	bl	800e804 <adv_pos>
		for(int j=0; j<goal_mode-1; j++){
 800e796:	687b      	ldr	r3, [r7, #4]
 800e798:	3301      	adds	r3, #1
 800e79a:	607b      	str	r3, [r7, #4]
 800e79c:	4b17      	ldr	r3, [pc, #92]	; (800e7fc <searchF4+0x4ec>)
 800e79e:	781b      	ldrb	r3, [r3, #0]
 800e7a0:	3b01      	subs	r3, #1
 800e7a2:	687a      	ldr	r2, [r7, #4]
 800e7a4:	429a      	cmp	r2, r3
 800e7a6:	dbf2      	blt.n	800e78e <searchF4+0x47e>
		}
		half_sectionD();
 800e7a8:	f7f7 f9b6 	bl	8005b18 <half_sectionD>
		set_positionF();
 800e7ac:	f7f7 f878 	bl	80058a0 <set_positionF>

		HAL_Delay(500);
 800e7b0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800e7b4:	f7f2 fc32 	bl	800101c <HAL_Delay>
		rotate_180();											//180度回転
 800e7b8:	f7f7 fe0e 	bl	80063d8 <rotate_180>
 800e7bc:	e005      	b.n	800e7ca <searchF4+0x4ba>
//		driveC2(SETPOS_BACK); 							        //a尻を当てる程度に後退。回転後に停止する
//		degree_z = target_degree_z;
	}else{														//a減速斜めでgoalする場合
		HAL_Delay(500);
 800e7be:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800e7c2:	f7f2 fc2b 	bl	800101c <HAL_Delay>
		rotate_180();											//180度回転
 800e7c6:	f7f7 fe07 	bl	80063d8 <rotate_180>
//		driveC2(SETPOS_BACK); 							        //a尻を当てる程度に後退。回転後に停止する
//		degree_z = target_degree_z;
	}
//	start_mode = 0;
	start_mode = 1;
 800e7ca:	4b0d      	ldr	r3, [pc, #52]	; (800e800 <searchF4+0x4f0>)
 800e7cc:	2201      	movs	r2, #1
 800e7ce:	701a      	strb	r2, [r3, #0]
	goal_mode = 1;
 800e7d0:	4b0a      	ldr	r3, [pc, #40]	; (800e7fc <searchF4+0x4ec>)
 800e7d2:	2201      	movs	r2, #1
 800e7d4:	701a      	strb	r2, [r3, #0]
}
 800e7d6:	bf00      	nop
 800e7d8:	3710      	adds	r7, #16
 800e7da:	46bd      	mov	sp, r7
 800e7dc:	bd80      	pop	{r7, pc}
 800e7de:	bf00      	nop
 800e7e0:	200002b0 	.word	0x200002b0
 800e7e4:	20000350 	.word	0x20000350
 800e7e8:	20000f64 	.word	0x20000f64
 800e7ec:	20000bb0 	.word	0x20000bb0
 800e7f0:	20000c0c 	.word	0x20000c0c
 800e7f4:	20000b4c 	.word	0x20000b4c
 800e7f8:	20000f68 	.word	0x20000f68
 800e7fc:	20000bb1 	.word	0x20000bb1
 800e800:	200015c8 	.word	0x200015c8

0800e804 <adv_pos>:
//adv_pos
//aマイクロマウス内部位置情報で前進させる
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void adv_pos(){
 800e804:	b480      	push	{r7}
 800e806:	af00      	add	r7, sp, #0

	switch(mouse.dir){										//aマイクロマウスが現在向いている方向で判定
 800e808:	4b1a      	ldr	r3, [pc, #104]	; (800e874 <adv_pos+0x70>)
 800e80a:	789b      	ldrb	r3, [r3, #2]
 800e80c:	b2db      	uxtb	r3, r3
 800e80e:	2b03      	cmp	r3, #3
 800e810:	d82a      	bhi.n	800e868 <adv_pos+0x64>
 800e812:	a201      	add	r2, pc, #4	; (adr r2, 800e818 <adv_pos+0x14>)
 800e814:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e818:	0800e829 	.word	0x0800e829
 800e81c:	0800e839 	.word	0x0800e839
 800e820:	0800e849 	.word	0x0800e849
 800e824:	0800e859 	.word	0x0800e859
	case 0x00:												//a北方向に向いている場合
		mouse.y++;											//Y座標をインクリメント
 800e828:	4b12      	ldr	r3, [pc, #72]	; (800e874 <adv_pos+0x70>)
 800e82a:	785b      	ldrb	r3, [r3, #1]
 800e82c:	b2db      	uxtb	r3, r3
 800e82e:	3301      	adds	r3, #1
 800e830:	b2da      	uxtb	r2, r3
 800e832:	4b10      	ldr	r3, [pc, #64]	; (800e874 <adv_pos+0x70>)
 800e834:	705a      	strb	r2, [r3, #1]
		break;
 800e836:	e017      	b.n	800e868 <adv_pos+0x64>
	case 0x01:												//a東方向に向いている場合
		mouse.x++;											//X座標をインクリメント
 800e838:	4b0e      	ldr	r3, [pc, #56]	; (800e874 <adv_pos+0x70>)
 800e83a:	781b      	ldrb	r3, [r3, #0]
 800e83c:	b2db      	uxtb	r3, r3
 800e83e:	3301      	adds	r3, #1
 800e840:	b2da      	uxtb	r2, r3
 800e842:	4b0c      	ldr	r3, [pc, #48]	; (800e874 <adv_pos+0x70>)
 800e844:	701a      	strb	r2, [r3, #0]
		break;
 800e846:	e00f      	b.n	800e868 <adv_pos+0x64>
	case 0x02:												//a南方向に向いている場合
		mouse.y--;											//Y座標をデクリメント
 800e848:	4b0a      	ldr	r3, [pc, #40]	; (800e874 <adv_pos+0x70>)
 800e84a:	785b      	ldrb	r3, [r3, #1]
 800e84c:	b2db      	uxtb	r3, r3
 800e84e:	3b01      	subs	r3, #1
 800e850:	b2da      	uxtb	r2, r3
 800e852:	4b08      	ldr	r3, [pc, #32]	; (800e874 <adv_pos+0x70>)
 800e854:	705a      	strb	r2, [r3, #1]
		break;
 800e856:	e007      	b.n	800e868 <adv_pos+0x64>
	case 0x03:												//a西方向に向いている場合
		mouse.x--;											//X座標をデクリメント
 800e858:	4b06      	ldr	r3, [pc, #24]	; (800e874 <adv_pos+0x70>)
 800e85a:	781b      	ldrb	r3, [r3, #0]
 800e85c:	b2db      	uxtb	r3, r3
 800e85e:	3b01      	subs	r3, #1
 800e860:	b2da      	uxtb	r2, r3
 800e862:	4b04      	ldr	r3, [pc, #16]	; (800e874 <adv_pos+0x70>)
 800e864:	701a      	strb	r2, [r3, #0]
		break;
 800e866:	bf00      	nop
	}
}
 800e868:	bf00      	nop
 800e86a:	46bd      	mov	sp, r7
 800e86c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e870:	4770      	bx	lr
 800e872:	bf00      	nop
 800e874:	20000c0c 	.word	0x20000c0c

0800e878 <conf_route>:
//conf_route
//a進路を判定する
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void conf_route(){
 800e878:	b580      	push	{r7, lr}
 800e87a:	af00      	add	r7, sp, #0

	//----a壁情報書き込み----
	write_map();
 800e87c:	f000 f886 	bl	800e98c <write_map>

	//----a最短経路上に壁があれば進路変更----
	if(wall_info & route[r_cnt]){
 800e880:	4b09      	ldr	r3, [pc, #36]	; (800e8a8 <conf_route+0x30>)
 800e882:	781b      	ldrb	r3, [r3, #0]
 800e884:	461a      	mov	r2, r3
 800e886:	4b09      	ldr	r3, [pc, #36]	; (800e8ac <conf_route+0x34>)
 800e888:	5c9a      	ldrb	r2, [r3, r2]
 800e88a:	4b09      	ldr	r3, [pc, #36]	; (800e8b0 <conf_route+0x38>)
 800e88c:	781b      	ldrb	r3, [r3, #0]
 800e88e:	4013      	ands	r3, r2
 800e890:	b2db      	uxtb	r3, r3
 800e892:	2b00      	cmp	r3, #0
 800e894:	d006      	beq.n	800e8a4 <conf_route+0x2c>
		make_smap();										//a歩数マップを更新
 800e896:	f000 fa6d 	bl	800ed74 <make_smap>
		make_route();										//a最短経路を更新
 800e89a:	f000 fe27 	bl	800f4ec <make_route>
		r_cnt = 0;											//a経路カウンタを0に
 800e89e:	4b02      	ldr	r3, [pc, #8]	; (800e8a8 <conf_route+0x30>)
 800e8a0:	2200      	movs	r2, #0
 800e8a2:	701a      	strb	r2, [r3, #0]
	}
}
 800e8a4:	bf00      	nop
 800e8a6:	bd80      	pop	{r7, pc}
 800e8a8:	200015d0 	.word	0x200015d0
 800e8ac:	20000c54 	.word	0x20000c54
 800e8b0:	200002c8 	.word	0x200002c8

0800e8b4 <map_Init>:
//map_Init
//aマップ格納配列map[][]の初期化をする
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void map_Init(){
 800e8b4:	b480      	push	{r7}
 800e8b6:	b083      	sub	sp, #12
 800e8b8:	af00      	add	r7, sp, #0
	//====a変数宣言====
	uint8_t x, y;											//for文用変数

	//====a初期化開始====
	//aマップのクリア
	for(y = 0; y <= 15; y++){								//a各Y座標で実行
 800e8ba:	2300      	movs	r3, #0
 800e8bc:	71bb      	strb	r3, [r7, #6]
 800e8be:	e013      	b.n	800e8e8 <map_Init+0x34>
		for(x = 0; x <= 15; x++){							//a各X座標で実行
 800e8c0:	2300      	movs	r3, #0
 800e8c2:	71fb      	strb	r3, [r7, #7]
 800e8c4:	e00a      	b.n	800e8dc <map_Init+0x28>
			map[y][x] = 0xf0;								//a上位4ビット（2次走行時）を壁あり，下位4ビット（1次走行時）を壁なしとする。
 800e8c6:	79ba      	ldrb	r2, [r7, #6]
 800e8c8:	79fb      	ldrb	r3, [r7, #7]
 800e8ca:	492f      	ldr	r1, [pc, #188]	; (800e988 <map_Init+0xd4>)
 800e8cc:	0112      	lsls	r2, r2, #4
 800e8ce:	440a      	add	r2, r1
 800e8d0:	4413      	add	r3, r2
 800e8d2:	22f0      	movs	r2, #240	; 0xf0
 800e8d4:	701a      	strb	r2, [r3, #0]
		for(x = 0; x <= 15; x++){							//a各X座標で実行
 800e8d6:	79fb      	ldrb	r3, [r7, #7]
 800e8d8:	3301      	adds	r3, #1
 800e8da:	71fb      	strb	r3, [r7, #7]
 800e8dc:	79fb      	ldrb	r3, [r7, #7]
 800e8de:	2b0f      	cmp	r3, #15
 800e8e0:	d9f1      	bls.n	800e8c6 <map_Init+0x12>
	for(y = 0; y <= 15; y++){								//a各Y座標で実行
 800e8e2:	79bb      	ldrb	r3, [r7, #6]
 800e8e4:	3301      	adds	r3, #1
 800e8e6:	71bb      	strb	r3, [r7, #6]
 800e8e8:	79bb      	ldrb	r3, [r7, #6]
 800e8ea:	2b0f      	cmp	r3, #15
 800e8ec:	d9e8      	bls.n	800e8c0 <map_Init+0xc>
		}
	}

	//a確定壁の配置
	for(y = 0; y <= 15; y++){								//a各Y座標で実行
 800e8ee:	2300      	movs	r3, #0
 800e8f0:	71bb      	strb	r3, [r7, #6]
 800e8f2:	e020      	b.n	800e936 <map_Init+0x82>
		map[y][0] |= 0xf1;									//a最西に壁を配置
 800e8f4:	79bb      	ldrb	r3, [r7, #6]
 800e8f6:	4a24      	ldr	r2, [pc, #144]	; (800e988 <map_Init+0xd4>)
 800e8f8:	011b      	lsls	r3, r3, #4
 800e8fa:	4413      	add	r3, r2
 800e8fc:	781a      	ldrb	r2, [r3, #0]
 800e8fe:	79bb      	ldrb	r3, [r7, #6]
 800e900:	f062 020e 	orn	r2, r2, #14
 800e904:	b2d1      	uxtb	r1, r2
 800e906:	4a20      	ldr	r2, [pc, #128]	; (800e988 <map_Init+0xd4>)
 800e908:	011b      	lsls	r3, r3, #4
 800e90a:	4413      	add	r3, r2
 800e90c:	460a      	mov	r2, r1
 800e90e:	701a      	strb	r2, [r3, #0]
		map[y][15] |= 0xf4;									//a最東に壁を配置
 800e910:	79bb      	ldrb	r3, [r7, #6]
 800e912:	4a1d      	ldr	r2, [pc, #116]	; (800e988 <map_Init+0xd4>)
 800e914:	011b      	lsls	r3, r3, #4
 800e916:	4413      	add	r3, r2
 800e918:	330f      	adds	r3, #15
 800e91a:	781a      	ldrb	r2, [r3, #0]
 800e91c:	79bb      	ldrb	r3, [r7, #6]
 800e91e:	f062 020b 	orn	r2, r2, #11
 800e922:	b2d1      	uxtb	r1, r2
 800e924:	4a18      	ldr	r2, [pc, #96]	; (800e988 <map_Init+0xd4>)
 800e926:	011b      	lsls	r3, r3, #4
 800e928:	4413      	add	r3, r2
 800e92a:	330f      	adds	r3, #15
 800e92c:	460a      	mov	r2, r1
 800e92e:	701a      	strb	r2, [r3, #0]
	for(y = 0; y <= 15; y++){								//a各Y座標で実行
 800e930:	79bb      	ldrb	r3, [r7, #6]
 800e932:	3301      	adds	r3, #1
 800e934:	71bb      	strb	r3, [r7, #6]
 800e936:	79bb      	ldrb	r3, [r7, #6]
 800e938:	2b0f      	cmp	r3, #15
 800e93a:	d9db      	bls.n	800e8f4 <map_Init+0x40>
	}
	for(x = 0; x <= 15; x++){								//a各X座標で実行
 800e93c:	2300      	movs	r3, #0
 800e93e:	71fb      	strb	r3, [r7, #7]
 800e940:	e019      	b.n	800e976 <map_Init+0xc2>
		map[0][x] |= 0xf2;									//a最南に壁を配置
 800e942:	79fb      	ldrb	r3, [r7, #7]
 800e944:	4a10      	ldr	r2, [pc, #64]	; (800e988 <map_Init+0xd4>)
 800e946:	5cd2      	ldrb	r2, [r2, r3]
 800e948:	79fb      	ldrb	r3, [r7, #7]
 800e94a:	f062 020d 	orn	r2, r2, #13
 800e94e:	b2d1      	uxtb	r1, r2
 800e950:	4a0d      	ldr	r2, [pc, #52]	; (800e988 <map_Init+0xd4>)
 800e952:	54d1      	strb	r1, [r2, r3]
		map[15][x] |= 0xf8;									//a最北に壁を配置
 800e954:	79fb      	ldrb	r3, [r7, #7]
 800e956:	4a0c      	ldr	r2, [pc, #48]	; (800e988 <map_Init+0xd4>)
 800e958:	4413      	add	r3, r2
 800e95a:	f893 20f0 	ldrb.w	r2, [r3, #240]	; 0xf0
 800e95e:	79fb      	ldrb	r3, [r7, #7]
 800e960:	f062 0207 	orn	r2, r2, #7
 800e964:	b2d1      	uxtb	r1, r2
 800e966:	4a08      	ldr	r2, [pc, #32]	; (800e988 <map_Init+0xd4>)
 800e968:	4413      	add	r3, r2
 800e96a:	460a      	mov	r2, r1
 800e96c:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
	for(x = 0; x <= 15; x++){								//a各X座標で実行
 800e970:	79fb      	ldrb	r3, [r7, #7]
 800e972:	3301      	adds	r3, #1
 800e974:	71fb      	strb	r3, [r7, #7]
 800e976:	79fb      	ldrb	r3, [r7, #7]
 800e978:	2b0f      	cmp	r3, #15
 800e97a:	d9e2      	bls.n	800e942 <map_Init+0x8e>
	}
}
 800e97c:	bf00      	nop
 800e97e:	370c      	adds	r7, #12
 800e980:	46bd      	mov	sp, r7
 800e982:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e986:	4770      	bx	lr
 800e988:	200001ac 	.word	0x200001ac

0800e98c <write_map>:
//write_map
//aマップデータを書き込む
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void write_map(){
 800e98c:	b490      	push	{r4, r7}
 800e98e:	b082      	sub	sp, #8
 800e990:	af00      	add	r7, sp, #0

	//====a変数宣言====
	uint8_t m_temp;											//a向きを補正した壁情報

	//====a壁情報の補正格納====
	m_temp = (wall_info >> mouse.dir) & 0x0f;				//aセンサ壁情報をmouse.dirで向きを補正させて下位4bit分を残す
 800e992:	4b8f      	ldr	r3, [pc, #572]	; (800ebd0 <write_map+0x244>)
 800e994:	781b      	ldrb	r3, [r3, #0]
 800e996:	461a      	mov	r2, r3
 800e998:	4b8e      	ldr	r3, [pc, #568]	; (800ebd4 <write_map+0x248>)
 800e99a:	789b      	ldrb	r3, [r3, #2]
 800e99c:	b2db      	uxtb	r3, r3
 800e99e:	fa42 f303 	asr.w	r3, r2, r3
 800e9a2:	b2db      	uxtb	r3, r3
 800e9a4:	f003 030f 	and.w	r3, r3, #15
 800e9a8:	71fb      	strb	r3, [r7, #7]
	m_temp |= (m_temp << 4);								//a上位4bitに下位4bitをコピー。この作業でm_tempにNESW順で壁が格納
 800e9aa:	79fb      	ldrb	r3, [r7, #7]
 800e9ac:	011b      	lsls	r3, r3, #4
 800e9ae:	b25a      	sxtb	r2, r3
 800e9b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e9b4:	4313      	orrs	r3, r2
 800e9b6:	b25b      	sxtb	r3, r3
 800e9b8:	71fb      	strb	r3, [r7, #7]

	//====aデータの書き込み====
	map[mouse.y][mouse.x] = m_temp; 						//a現在地に壁情報書き込み
 800e9ba:	4b86      	ldr	r3, [pc, #536]	; (800ebd4 <write_map+0x248>)
 800e9bc:	785b      	ldrb	r3, [r3, #1]
 800e9be:	b2db      	uxtb	r3, r3
 800e9c0:	4618      	mov	r0, r3
 800e9c2:	4b84      	ldr	r3, [pc, #528]	; (800ebd4 <write_map+0x248>)
 800e9c4:	781b      	ldrb	r3, [r3, #0]
 800e9c6:	b2db      	uxtb	r3, r3
 800e9c8:	4619      	mov	r1, r3
 800e9ca:	4a83      	ldr	r2, [pc, #524]	; (800ebd8 <write_map+0x24c>)
 800e9cc:	0103      	lsls	r3, r0, #4
 800e9ce:	4413      	add	r3, r2
 800e9d0:	440b      	add	r3, r1
 800e9d2:	79fa      	ldrb	r2, [r7, #7]
 800e9d4:	701a      	strb	r2, [r3, #0]
	//----a周辺に書き込む----
	//a北側について
	if(mouse.y != 15){										//a現在最北端でないとき
 800e9d6:	4b7f      	ldr	r3, [pc, #508]	; (800ebd4 <write_map+0x248>)
 800e9d8:	785b      	ldrb	r3, [r3, #1]
 800e9da:	b2db      	uxtb	r3, r3
 800e9dc:	2b0f      	cmp	r3, #15
 800e9de:	d039      	beq.n	800ea54 <write_map+0xc8>
		if(m_temp & 0x88){									//a北壁がある場合
 800e9e0:	79fb      	ldrb	r3, [r7, #7]
 800e9e2:	f003 0388 	and.w	r3, r3, #136	; 0x88
 800e9e6:	2b00      	cmp	r3, #0
 800e9e8:	d01a      	beq.n	800ea20 <write_map+0x94>
			map[mouse.y + 1][mouse.x] |= 0x22;				//a北側の区画から見て南壁ありを書き込む
 800e9ea:	4b7a      	ldr	r3, [pc, #488]	; (800ebd4 <write_map+0x248>)
 800e9ec:	785b      	ldrb	r3, [r3, #1]
 800e9ee:	b2d8      	uxtb	r0, r3
 800e9f0:	4603      	mov	r3, r0
 800e9f2:	3301      	adds	r3, #1
 800e9f4:	4a77      	ldr	r2, [pc, #476]	; (800ebd4 <write_map+0x248>)
 800e9f6:	7812      	ldrb	r2, [r2, #0]
 800e9f8:	b2d1      	uxtb	r1, r2
 800e9fa:	460c      	mov	r4, r1
 800e9fc:	4a76      	ldr	r2, [pc, #472]	; (800ebd8 <write_map+0x24c>)
 800e9fe:	011b      	lsls	r3, r3, #4
 800ea00:	4413      	add	r3, r2
 800ea02:	4423      	add	r3, r4
 800ea04:	781a      	ldrb	r2, [r3, #0]
 800ea06:	4603      	mov	r3, r0
 800ea08:	3301      	adds	r3, #1
 800ea0a:	4608      	mov	r0, r1
 800ea0c:	f042 0222 	orr.w	r2, r2, #34	; 0x22
 800ea10:	b2d1      	uxtb	r1, r2
 800ea12:	4a71      	ldr	r2, [pc, #452]	; (800ebd8 <write_map+0x24c>)
 800ea14:	011b      	lsls	r3, r3, #4
 800ea16:	4413      	add	r3, r2
 800ea18:	4403      	add	r3, r0
 800ea1a:	460a      	mov	r2, r1
 800ea1c:	701a      	strb	r2, [r3, #0]
 800ea1e:	e019      	b.n	800ea54 <write_map+0xc8>
		}else{												//a北壁がない場合
			map[mouse.y + 1][mouse.x] &= 0xDD;				//a北側の区画から見て南壁なしを書き込む
 800ea20:	4b6c      	ldr	r3, [pc, #432]	; (800ebd4 <write_map+0x248>)
 800ea22:	785b      	ldrb	r3, [r3, #1]
 800ea24:	b2d8      	uxtb	r0, r3
 800ea26:	4603      	mov	r3, r0
 800ea28:	3301      	adds	r3, #1
 800ea2a:	4a6a      	ldr	r2, [pc, #424]	; (800ebd4 <write_map+0x248>)
 800ea2c:	7812      	ldrb	r2, [r2, #0]
 800ea2e:	b2d1      	uxtb	r1, r2
 800ea30:	460c      	mov	r4, r1
 800ea32:	4a69      	ldr	r2, [pc, #420]	; (800ebd8 <write_map+0x24c>)
 800ea34:	011b      	lsls	r3, r3, #4
 800ea36:	4413      	add	r3, r2
 800ea38:	4423      	add	r3, r4
 800ea3a:	781a      	ldrb	r2, [r3, #0]
 800ea3c:	4603      	mov	r3, r0
 800ea3e:	3301      	adds	r3, #1
 800ea40:	4608      	mov	r0, r1
 800ea42:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 800ea46:	b2d1      	uxtb	r1, r2
 800ea48:	4a63      	ldr	r2, [pc, #396]	; (800ebd8 <write_map+0x24c>)
 800ea4a:	011b      	lsls	r3, r3, #4
 800ea4c:	4413      	add	r3, r2
 800ea4e:	4403      	add	r3, r0
 800ea50:	460a      	mov	r2, r1
 800ea52:	701a      	strb	r2, [r3, #0]
		}
	}
	//a東側について
	if(mouse.x != 15){										//a現在最東端でないとき
 800ea54:	4b5f      	ldr	r3, [pc, #380]	; (800ebd4 <write_map+0x248>)
 800ea56:	781b      	ldrb	r3, [r3, #0]
 800ea58:	b2db      	uxtb	r3, r3
 800ea5a:	2b0f      	cmp	r3, #15
 800ea5c:	d037      	beq.n	800eace <write_map+0x142>
		if(m_temp & 0x44){									//a東壁がある場合
 800ea5e:	79fb      	ldrb	r3, [r7, #7]
 800ea60:	f003 0344 	and.w	r3, r3, #68	; 0x44
 800ea64:	2b00      	cmp	r3, #0
 800ea66:	d019      	beq.n	800ea9c <write_map+0x110>
			map[mouse.y][mouse.x + 1] |= 0x11;				//a東側の区画から見て西壁ありを書き込む
 800ea68:	4b5a      	ldr	r3, [pc, #360]	; (800ebd4 <write_map+0x248>)
 800ea6a:	785b      	ldrb	r3, [r3, #1]
 800ea6c:	b2dc      	uxtb	r4, r3
 800ea6e:	4622      	mov	r2, r4
 800ea70:	4b58      	ldr	r3, [pc, #352]	; (800ebd4 <write_map+0x248>)
 800ea72:	781b      	ldrb	r3, [r3, #0]
 800ea74:	b2d8      	uxtb	r0, r3
 800ea76:	4603      	mov	r3, r0
 800ea78:	3301      	adds	r3, #1
 800ea7a:	4957      	ldr	r1, [pc, #348]	; (800ebd8 <write_map+0x24c>)
 800ea7c:	0112      	lsls	r2, r2, #4
 800ea7e:	440a      	add	r2, r1
 800ea80:	4413      	add	r3, r2
 800ea82:	781a      	ldrb	r2, [r3, #0]
 800ea84:	4603      	mov	r3, r0
 800ea86:	3301      	adds	r3, #1
 800ea88:	f042 0211 	orr.w	r2, r2, #17
 800ea8c:	b2d0      	uxtb	r0, r2
 800ea8e:	4952      	ldr	r1, [pc, #328]	; (800ebd8 <write_map+0x24c>)
 800ea90:	0122      	lsls	r2, r4, #4
 800ea92:	440a      	add	r2, r1
 800ea94:	4413      	add	r3, r2
 800ea96:	4602      	mov	r2, r0
 800ea98:	701a      	strb	r2, [r3, #0]
 800ea9a:	e018      	b.n	800eace <write_map+0x142>
		}else{												//a北壁がない場合
			map[mouse.y][mouse.x + 1] &= 0xEE;				//a東側の区画から見て西壁なしを書き込む
 800ea9c:	4b4d      	ldr	r3, [pc, #308]	; (800ebd4 <write_map+0x248>)
 800ea9e:	785b      	ldrb	r3, [r3, #1]
 800eaa0:	b2dc      	uxtb	r4, r3
 800eaa2:	4622      	mov	r2, r4
 800eaa4:	4b4b      	ldr	r3, [pc, #300]	; (800ebd4 <write_map+0x248>)
 800eaa6:	781b      	ldrb	r3, [r3, #0]
 800eaa8:	b2d8      	uxtb	r0, r3
 800eaaa:	4603      	mov	r3, r0
 800eaac:	3301      	adds	r3, #1
 800eaae:	494a      	ldr	r1, [pc, #296]	; (800ebd8 <write_map+0x24c>)
 800eab0:	0112      	lsls	r2, r2, #4
 800eab2:	440a      	add	r2, r1
 800eab4:	4413      	add	r3, r2
 800eab6:	781a      	ldrb	r2, [r3, #0]
 800eab8:	4603      	mov	r3, r0
 800eaba:	3301      	adds	r3, #1
 800eabc:	f022 0211 	bic.w	r2, r2, #17
 800eac0:	b2d0      	uxtb	r0, r2
 800eac2:	4945      	ldr	r1, [pc, #276]	; (800ebd8 <write_map+0x24c>)
 800eac4:	0122      	lsls	r2, r4, #4
 800eac6:	440a      	add	r2, r1
 800eac8:	4413      	add	r3, r2
 800eaca:	4602      	mov	r2, r0
 800eacc:	701a      	strb	r2, [r3, #0]
		}
	}
	//a南壁について
	if(mouse.y != 0){										//a現在最南端でないとき
 800eace:	4b41      	ldr	r3, [pc, #260]	; (800ebd4 <write_map+0x248>)
 800ead0:	785b      	ldrb	r3, [r3, #1]
 800ead2:	b2db      	uxtb	r3, r3
 800ead4:	2b00      	cmp	r3, #0
 800ead6:	d039      	beq.n	800eb4c <write_map+0x1c0>
		if(m_temp & 0x22){									//a南壁がある場合
 800ead8:	79fb      	ldrb	r3, [r7, #7]
 800eada:	f003 0322 	and.w	r3, r3, #34	; 0x22
 800eade:	2b00      	cmp	r3, #0
 800eae0:	d01a      	beq.n	800eb18 <write_map+0x18c>
			map[mouse.y - 1][mouse.x] |= 0x88;				//a南側の区画から見て北壁ありを書き込む
 800eae2:	4b3c      	ldr	r3, [pc, #240]	; (800ebd4 <write_map+0x248>)
 800eae4:	785b      	ldrb	r3, [r3, #1]
 800eae6:	b2d8      	uxtb	r0, r3
 800eae8:	4603      	mov	r3, r0
 800eaea:	3b01      	subs	r3, #1
 800eaec:	4a39      	ldr	r2, [pc, #228]	; (800ebd4 <write_map+0x248>)
 800eaee:	7812      	ldrb	r2, [r2, #0]
 800eaf0:	b2d1      	uxtb	r1, r2
 800eaf2:	460c      	mov	r4, r1
 800eaf4:	4a38      	ldr	r2, [pc, #224]	; (800ebd8 <write_map+0x24c>)
 800eaf6:	011b      	lsls	r3, r3, #4
 800eaf8:	4413      	add	r3, r2
 800eafa:	4423      	add	r3, r4
 800eafc:	781a      	ldrb	r2, [r3, #0]
 800eafe:	4603      	mov	r3, r0
 800eb00:	3b01      	subs	r3, #1
 800eb02:	4608      	mov	r0, r1
 800eb04:	f062 0277 	orn	r2, r2, #119	; 0x77
 800eb08:	b2d1      	uxtb	r1, r2
 800eb0a:	4a33      	ldr	r2, [pc, #204]	; (800ebd8 <write_map+0x24c>)
 800eb0c:	011b      	lsls	r3, r3, #4
 800eb0e:	4413      	add	r3, r2
 800eb10:	4403      	add	r3, r0
 800eb12:	460a      	mov	r2, r1
 800eb14:	701a      	strb	r2, [r3, #0]
 800eb16:	e019      	b.n	800eb4c <write_map+0x1c0>
		}else{												//a南壁がない場合
			map[mouse.y - 1][mouse.x] &= 0x77;				//a南側の区画から見て北壁なしを書き込む
 800eb18:	4b2e      	ldr	r3, [pc, #184]	; (800ebd4 <write_map+0x248>)
 800eb1a:	785b      	ldrb	r3, [r3, #1]
 800eb1c:	b2d8      	uxtb	r0, r3
 800eb1e:	4603      	mov	r3, r0
 800eb20:	3b01      	subs	r3, #1
 800eb22:	4a2c      	ldr	r2, [pc, #176]	; (800ebd4 <write_map+0x248>)
 800eb24:	7812      	ldrb	r2, [r2, #0]
 800eb26:	b2d1      	uxtb	r1, r2
 800eb28:	460c      	mov	r4, r1
 800eb2a:	4a2b      	ldr	r2, [pc, #172]	; (800ebd8 <write_map+0x24c>)
 800eb2c:	011b      	lsls	r3, r3, #4
 800eb2e:	4413      	add	r3, r2
 800eb30:	4423      	add	r3, r4
 800eb32:	781a      	ldrb	r2, [r3, #0]
 800eb34:	4603      	mov	r3, r0
 800eb36:	3b01      	subs	r3, #1
 800eb38:	4608      	mov	r0, r1
 800eb3a:	f002 0277 	and.w	r2, r2, #119	; 0x77
 800eb3e:	b2d1      	uxtb	r1, r2
 800eb40:	4a25      	ldr	r2, [pc, #148]	; (800ebd8 <write_map+0x24c>)
 800eb42:	011b      	lsls	r3, r3, #4
 800eb44:	4413      	add	r3, r2
 800eb46:	4403      	add	r3, r0
 800eb48:	460a      	mov	r2, r1
 800eb4a:	701a      	strb	r2, [r3, #0]
		}
	}
	//a西側について
	if(mouse.x != 0){										//a現在最西端でないとき
 800eb4c:	4b21      	ldr	r3, [pc, #132]	; (800ebd4 <write_map+0x248>)
 800eb4e:	781b      	ldrb	r3, [r3, #0]
 800eb50:	b2db      	uxtb	r3, r3
 800eb52:	2b00      	cmp	r3, #0
 800eb54:	d037      	beq.n	800ebc6 <write_map+0x23a>
		if(m_temp & 0x11){									//a西壁がある場合
 800eb56:	79fb      	ldrb	r3, [r7, #7]
 800eb58:	f003 0311 	and.w	r3, r3, #17
 800eb5c:	2b00      	cmp	r3, #0
 800eb5e:	d019      	beq.n	800eb94 <write_map+0x208>
			map[mouse.y][mouse.x - 1] |= 0x44;				//a西側の区画から見て東壁ありを書き込む
 800eb60:	4b1c      	ldr	r3, [pc, #112]	; (800ebd4 <write_map+0x248>)
 800eb62:	785b      	ldrb	r3, [r3, #1]
 800eb64:	b2dc      	uxtb	r4, r3
 800eb66:	4622      	mov	r2, r4
 800eb68:	4b1a      	ldr	r3, [pc, #104]	; (800ebd4 <write_map+0x248>)
 800eb6a:	781b      	ldrb	r3, [r3, #0]
 800eb6c:	b2d8      	uxtb	r0, r3
 800eb6e:	4603      	mov	r3, r0
 800eb70:	3b01      	subs	r3, #1
 800eb72:	4919      	ldr	r1, [pc, #100]	; (800ebd8 <write_map+0x24c>)
 800eb74:	0112      	lsls	r2, r2, #4
 800eb76:	440a      	add	r2, r1
 800eb78:	4413      	add	r3, r2
 800eb7a:	781a      	ldrb	r2, [r3, #0]
 800eb7c:	4603      	mov	r3, r0
 800eb7e:	3b01      	subs	r3, #1
 800eb80:	f042 0244 	orr.w	r2, r2, #68	; 0x44
 800eb84:	b2d0      	uxtb	r0, r2
 800eb86:	4914      	ldr	r1, [pc, #80]	; (800ebd8 <write_map+0x24c>)
 800eb88:	0122      	lsls	r2, r4, #4
 800eb8a:	440a      	add	r2, r1
 800eb8c:	4413      	add	r3, r2
 800eb8e:	4602      	mov	r2, r0
 800eb90:	701a      	strb	r2, [r3, #0]
		}else{												//a西壁がない場合
			map[mouse.y][mouse.x - 1] &= 0xBB;				//a西側の区画から見て東側なしを書き込む
		}
	}
}
 800eb92:	e018      	b.n	800ebc6 <write_map+0x23a>
			map[mouse.y][mouse.x - 1] &= 0xBB;				//a西側の区画から見て東側なしを書き込む
 800eb94:	4b0f      	ldr	r3, [pc, #60]	; (800ebd4 <write_map+0x248>)
 800eb96:	785b      	ldrb	r3, [r3, #1]
 800eb98:	b2dc      	uxtb	r4, r3
 800eb9a:	4622      	mov	r2, r4
 800eb9c:	4b0d      	ldr	r3, [pc, #52]	; (800ebd4 <write_map+0x248>)
 800eb9e:	781b      	ldrb	r3, [r3, #0]
 800eba0:	b2d8      	uxtb	r0, r3
 800eba2:	4603      	mov	r3, r0
 800eba4:	3b01      	subs	r3, #1
 800eba6:	490c      	ldr	r1, [pc, #48]	; (800ebd8 <write_map+0x24c>)
 800eba8:	0112      	lsls	r2, r2, #4
 800ebaa:	440a      	add	r2, r1
 800ebac:	4413      	add	r3, r2
 800ebae:	781a      	ldrb	r2, [r3, #0]
 800ebb0:	4603      	mov	r3, r0
 800ebb2:	3b01      	subs	r3, #1
 800ebb4:	f022 0244 	bic.w	r2, r2, #68	; 0x44
 800ebb8:	b2d0      	uxtb	r0, r2
 800ebba:	4907      	ldr	r1, [pc, #28]	; (800ebd8 <write_map+0x24c>)
 800ebbc:	0122      	lsls	r2, r4, #4
 800ebbe:	440a      	add	r2, r1
 800ebc0:	4413      	add	r3, r2
 800ebc2:	4602      	mov	r2, r0
 800ebc4:	701a      	strb	r2, [r3, #0]
}
 800ebc6:	bf00      	nop
 800ebc8:	3708      	adds	r7, #8
 800ebca:	46bd      	mov	sp, r7
 800ebcc:	bc90      	pop	{r4, r7}
 800ebce:	4770      	bx	lr
 800ebd0:	200002c8 	.word	0x200002c8
 800ebd4:	20000c0c 	.word	0x20000c0c
 800ebd8:	200001ac 	.word	0x200001ac

0800ebdc <turn_dir>:
//turn_dir
//aマウスの方向を変更する
//a引数1：t_pat …… 回転方向(search.hでマクロ定義)
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void turn_dir(uint8_t t_pat, uint8_t t_mode){
 800ebdc:	b480      	push	{r7}
 800ebde:	b083      	sub	sp, #12
 800ebe0:	af00      	add	r7, sp, #0
 800ebe2:	4603      	mov	r3, r0
 800ebe4:	460a      	mov	r2, r1
 800ebe6:	71fb      	strb	r3, [r7, #7]
 800ebe8:	4613      	mov	r3, r2
 800ebea:	71bb      	strb	r3, [r7, #6]

	//====a方向を変更====
	if(t_mode < 2){												//4方位モード
 800ebec:	79bb      	ldrb	r3, [r7, #6]
 800ebee:	2b01      	cmp	r3, #1
 800ebf0:	d837      	bhi.n	800ec62 <turn_dir+0x86>
		mouse.dir = (mouse.dir + t_pat) & 0x03;					//a指定された分mouse.dirを回転させる
 800ebf2:	4b5a      	ldr	r3, [pc, #360]	; (800ed5c <turn_dir+0x180>)
 800ebf4:	789b      	ldrb	r3, [r3, #2]
 800ebf6:	b2da      	uxtb	r2, r3
 800ebf8:	79fb      	ldrb	r3, [r7, #7]
 800ebfa:	4413      	add	r3, r2
 800ebfc:	b2db      	uxtb	r3, r3
 800ebfe:	f003 0303 	and.w	r3, r3, #3
 800ec02:	b2da      	uxtb	r2, r3
 800ec04:	4b55      	ldr	r3, [pc, #340]	; (800ed5c <turn_dir+0x180>)
 800ec06:	709a      	strb	r2, [r3, #2]
		if(t_mode == 1){
 800ec08:	79bb      	ldrb	r3, [r7, #6]
 800ec0a:	2b01      	cmp	r3, #1
 800ec0c:	f040 809f 	bne.w	800ed4e <turn_dir+0x172>
			if(t_pat == 0x01) target_degree_z -= 90.5;			//a目標角度+右90度
 800ec10:	79fb      	ldrb	r3, [r7, #7]
 800ec12:	2b01      	cmp	r3, #1
 800ec14:	d109      	bne.n	800ec2a <turn_dir+0x4e>
 800ec16:	4b52      	ldr	r3, [pc, #328]	; (800ed60 <turn_dir+0x184>)
 800ec18:	edd3 7a00 	vldr	s15, [r3]
 800ec1c:	ed9f 7a51 	vldr	s14, [pc, #324]	; 800ed64 <turn_dir+0x188>
 800ec20:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ec24:	4b4e      	ldr	r3, [pc, #312]	; (800ed60 <turn_dir+0x184>)
 800ec26:	edc3 7a00 	vstr	s15, [r3]
			if(t_pat == 0xff) target_degree_z += 90.5;			//a目標角度+左90度
 800ec2a:	79fb      	ldrb	r3, [r7, #7]
 800ec2c:	2bff      	cmp	r3, #255	; 0xff
 800ec2e:	d109      	bne.n	800ec44 <turn_dir+0x68>
 800ec30:	4b4b      	ldr	r3, [pc, #300]	; (800ed60 <turn_dir+0x184>)
 800ec32:	edd3 7a00 	vldr	s15, [r3]
 800ec36:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 800ed64 <turn_dir+0x188>
 800ec3a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ec3e:	4b48      	ldr	r3, [pc, #288]	; (800ed60 <turn_dir+0x184>)
 800ec40:	edc3 7a00 	vstr	s15, [r3]
			if(t_pat == 0x02) target_degree_z -= 181;			//a目標角度+右180度
 800ec44:	79fb      	ldrb	r3, [r7, #7]
 800ec46:	2b02      	cmp	r3, #2
 800ec48:	f040 8081 	bne.w	800ed4e <turn_dir+0x172>
 800ec4c:	4b44      	ldr	r3, [pc, #272]	; (800ed60 <turn_dir+0x184>)
 800ec4e:	edd3 7a00 	vldr	s15, [r3]
 800ec52:	ed9f 7a45 	vldr	s14, [pc, #276]	; 800ed68 <turn_dir+0x18c>
 800ec56:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ec5a:	4b41      	ldr	r3, [pc, #260]	; (800ed60 <turn_dir+0x184>)
 800ec5c:	edc3 7a00 	vstr	s15, [r3]
			if(t_pat == 0xfe) target_degree_z += 90.5;			//a目標角度+左90度
			if(t_pat == 0xfd) target_degree_z += 135.75;		//a目標角度+右180度
			if(t_pat == 0xfc) target_degree_z += 181;			//a目標角度+右180度
		}
	}
}
 800ec60:	e075      	b.n	800ed4e <turn_dir+0x172>
		mouse.dir = (mouse.dir + t_pat) & 0x07;					//a指定された分mouse.dirを回転させる
 800ec62:	4b3e      	ldr	r3, [pc, #248]	; (800ed5c <turn_dir+0x180>)
 800ec64:	789b      	ldrb	r3, [r3, #2]
 800ec66:	b2da      	uxtb	r2, r3
 800ec68:	79fb      	ldrb	r3, [r7, #7]
 800ec6a:	4413      	add	r3, r2
 800ec6c:	b2db      	uxtb	r3, r3
 800ec6e:	f003 0307 	and.w	r3, r3, #7
 800ec72:	b2da      	uxtb	r2, r3
 800ec74:	4b39      	ldr	r3, [pc, #228]	; (800ed5c <turn_dir+0x180>)
 800ec76:	709a      	strb	r2, [r3, #2]
		if(t_mode == 3){
 800ec78:	79bb      	ldrb	r3, [r7, #6]
 800ec7a:	2b03      	cmp	r3, #3
 800ec7c:	d167      	bne.n	800ed4e <turn_dir+0x172>
			if(t_pat == 0x01) target_degree_z -= 45.25;			//a目標角度+右90度
 800ec7e:	79fb      	ldrb	r3, [r7, #7]
 800ec80:	2b01      	cmp	r3, #1
 800ec82:	d109      	bne.n	800ec98 <turn_dir+0xbc>
 800ec84:	4b36      	ldr	r3, [pc, #216]	; (800ed60 <turn_dir+0x184>)
 800ec86:	edd3 7a00 	vldr	s15, [r3]
 800ec8a:	ed9f 7a38 	vldr	s14, [pc, #224]	; 800ed6c <turn_dir+0x190>
 800ec8e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ec92:	4b33      	ldr	r3, [pc, #204]	; (800ed60 <turn_dir+0x184>)
 800ec94:	edc3 7a00 	vstr	s15, [r3]
			if(t_pat == 0x02) target_degree_z -= 90.5;			//a目標角度+左90度
 800ec98:	79fb      	ldrb	r3, [r7, #7]
 800ec9a:	2b02      	cmp	r3, #2
 800ec9c:	d109      	bne.n	800ecb2 <turn_dir+0xd6>
 800ec9e:	4b30      	ldr	r3, [pc, #192]	; (800ed60 <turn_dir+0x184>)
 800eca0:	edd3 7a00 	vldr	s15, [r3]
 800eca4:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 800ed64 <turn_dir+0x188>
 800eca8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ecac:	4b2c      	ldr	r3, [pc, #176]	; (800ed60 <turn_dir+0x184>)
 800ecae:	edc3 7a00 	vstr	s15, [r3]
			if(t_pat == 0x03) target_degree_z -= 135.75;		//a目標角度+右180度
 800ecb2:	79fb      	ldrb	r3, [r7, #7]
 800ecb4:	2b03      	cmp	r3, #3
 800ecb6:	d109      	bne.n	800eccc <turn_dir+0xf0>
 800ecb8:	4b29      	ldr	r3, [pc, #164]	; (800ed60 <turn_dir+0x184>)
 800ecba:	edd3 7a00 	vldr	s15, [r3]
 800ecbe:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 800ed70 <turn_dir+0x194>
 800ecc2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ecc6:	4b26      	ldr	r3, [pc, #152]	; (800ed60 <turn_dir+0x184>)
 800ecc8:	edc3 7a00 	vstr	s15, [r3]
			if(t_pat == 0x04) target_degree_z -= 181;			//a目標角度+右180度
 800eccc:	79fb      	ldrb	r3, [r7, #7]
 800ecce:	2b04      	cmp	r3, #4
 800ecd0:	d109      	bne.n	800ece6 <turn_dir+0x10a>
 800ecd2:	4b23      	ldr	r3, [pc, #140]	; (800ed60 <turn_dir+0x184>)
 800ecd4:	edd3 7a00 	vldr	s15, [r3]
 800ecd8:	ed9f 7a23 	vldr	s14, [pc, #140]	; 800ed68 <turn_dir+0x18c>
 800ecdc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ece0:	4b1f      	ldr	r3, [pc, #124]	; (800ed60 <turn_dir+0x184>)
 800ece2:	edc3 7a00 	vstr	s15, [r3]
			if(t_pat == 0xff) target_degree_z += 45.25;			//a目標角度+右90度
 800ece6:	79fb      	ldrb	r3, [r7, #7]
 800ece8:	2bff      	cmp	r3, #255	; 0xff
 800ecea:	d109      	bne.n	800ed00 <turn_dir+0x124>
 800ecec:	4b1c      	ldr	r3, [pc, #112]	; (800ed60 <turn_dir+0x184>)
 800ecee:	edd3 7a00 	vldr	s15, [r3]
 800ecf2:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 800ed6c <turn_dir+0x190>
 800ecf6:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ecfa:	4b19      	ldr	r3, [pc, #100]	; (800ed60 <turn_dir+0x184>)
 800ecfc:	edc3 7a00 	vstr	s15, [r3]
			if(t_pat == 0xfe) target_degree_z += 90.5;			//a目標角度+左90度
 800ed00:	79fb      	ldrb	r3, [r7, #7]
 800ed02:	2bfe      	cmp	r3, #254	; 0xfe
 800ed04:	d109      	bne.n	800ed1a <turn_dir+0x13e>
 800ed06:	4b16      	ldr	r3, [pc, #88]	; (800ed60 <turn_dir+0x184>)
 800ed08:	edd3 7a00 	vldr	s15, [r3]
 800ed0c:	ed9f 7a15 	vldr	s14, [pc, #84]	; 800ed64 <turn_dir+0x188>
 800ed10:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ed14:	4b12      	ldr	r3, [pc, #72]	; (800ed60 <turn_dir+0x184>)
 800ed16:	edc3 7a00 	vstr	s15, [r3]
			if(t_pat == 0xfd) target_degree_z += 135.75;		//a目標角度+右180度
 800ed1a:	79fb      	ldrb	r3, [r7, #7]
 800ed1c:	2bfd      	cmp	r3, #253	; 0xfd
 800ed1e:	d109      	bne.n	800ed34 <turn_dir+0x158>
 800ed20:	4b0f      	ldr	r3, [pc, #60]	; (800ed60 <turn_dir+0x184>)
 800ed22:	edd3 7a00 	vldr	s15, [r3]
 800ed26:	ed9f 7a12 	vldr	s14, [pc, #72]	; 800ed70 <turn_dir+0x194>
 800ed2a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ed2e:	4b0c      	ldr	r3, [pc, #48]	; (800ed60 <turn_dir+0x184>)
 800ed30:	edc3 7a00 	vstr	s15, [r3]
			if(t_pat == 0xfc) target_degree_z += 181;			//a目標角度+右180度
 800ed34:	79fb      	ldrb	r3, [r7, #7]
 800ed36:	2bfc      	cmp	r3, #252	; 0xfc
 800ed38:	d109      	bne.n	800ed4e <turn_dir+0x172>
 800ed3a:	4b09      	ldr	r3, [pc, #36]	; (800ed60 <turn_dir+0x184>)
 800ed3c:	edd3 7a00 	vldr	s15, [r3]
 800ed40:	ed9f 7a09 	vldr	s14, [pc, #36]	; 800ed68 <turn_dir+0x18c>
 800ed44:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ed48:	4b05      	ldr	r3, [pc, #20]	; (800ed60 <turn_dir+0x184>)
 800ed4a:	edc3 7a00 	vstr	s15, [r3]
}
 800ed4e:	bf00      	nop
 800ed50:	370c      	adds	r7, #12
 800ed52:	46bd      	mov	sp, r7
 800ed54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed58:	4770      	bx	lr
 800ed5a:	bf00      	nop
 800ed5c:	20000c0c 	.word	0x20000c0c
 800ed60:	20000bf8 	.word	0x20000bf8
 800ed64:	42b50000 	.word	0x42b50000
 800ed68:	43350000 	.word	0x43350000
 800ed6c:	42350000 	.word	0x42350000
 800ed70:	4307c000 	.word	0x4307c000

0800ed74 <make_smap>:
//make_smap
//a歩数マップを作成する
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void make_smap(void){
 800ed74:	b490      	push	{r4, r7}
 800ed76:	b08e      	sub	sp, #56	; 0x38
 800ed78:	af00      	add	r7, sp, #0
	//====a変数宣言====
	uint8_t x, y;											//for文用変数
	uint8_t m_temp_sample[16];

	//====a歩数マップのクリア====
	for(y = 0; y <= 15; y++){								//a各Y座標で実行
 800ed7a:	2300      	movs	r3, #0
 800ed7c:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 800ed80:	e01c      	b.n	800edbc <make_smap+0x48>
		for(x = 0; x <= 15; x++){							//a各X座標で実行
 800ed82:	2300      	movs	r3, #0
 800ed84:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800ed88:	e00f      	b.n	800edaa <make_smap+0x36>
			smap[y][x] = 0x03e7;							//a未記入部分は歩数最大とする
 800ed8a:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 800ed8e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ed92:	49bc      	ldr	r1, [pc, #752]	; (800f084 <make_smap+0x310>)
 800ed94:	0112      	lsls	r2, r2, #4
 800ed96:	4413      	add	r3, r2
 800ed98:	f240 32e7 	movw	r2, #999	; 0x3e7
 800ed9c:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for(x = 0; x <= 15; x++){							//a各X座標で実行
 800eda0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800eda4:	3301      	adds	r3, #1
 800eda6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800edaa:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800edae:	2b0f      	cmp	r3, #15
 800edb0:	d9eb      	bls.n	800ed8a <make_smap+0x16>
	for(y = 0; y <= 15; y++){								//a各Y座標で実行
 800edb2:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800edb6:	3301      	adds	r3, #1
 800edb8:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 800edbc:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800edc0:	2b0f      	cmp	r3, #15
 800edc2:	d9de      	bls.n	800ed82 <make_smap+0xe>
		}
	}

	//====aゴール座標を0にする====
	m_step = 0;												//a歩数カウンタを0にする
 800edc4:	4bb0      	ldr	r3, [pc, #704]	; (800f088 <make_smap+0x314>)
 800edc6:	2200      	movs	r2, #0
 800edc8:	801a      	strh	r2, [r3, #0]

	for(int j=0; j<goal_mode; j++){
 800edca:	2300      	movs	r3, #0
 800edcc:	633b      	str	r3, [r7, #48]	; 0x30
 800edce:	e01e      	b.n	800ee0e <make_smap+0x9a>
		for(int k=0; k<goal_mode; k++){
 800edd0:	2300      	movs	r3, #0
 800edd2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800edd4:	e012      	b.n	800edfc <make_smap+0x88>
		smap[goal_y+j][goal_x+k] = 0;
 800edd6:	4bad      	ldr	r3, [pc, #692]	; (800f08c <make_smap+0x318>)
 800edd8:	781b      	ldrb	r3, [r3, #0]
 800edda:	461a      	mov	r2, r3
 800eddc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800edde:	441a      	add	r2, r3
 800ede0:	4bab      	ldr	r3, [pc, #684]	; (800f090 <make_smap+0x31c>)
 800ede2:	781b      	ldrb	r3, [r3, #0]
 800ede4:	4619      	mov	r1, r3
 800ede6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ede8:	440b      	add	r3, r1
 800edea:	49a6      	ldr	r1, [pc, #664]	; (800f084 <make_smap+0x310>)
 800edec:	0112      	lsls	r2, r2, #4
 800edee:	4413      	add	r3, r2
 800edf0:	2200      	movs	r2, #0
 800edf2:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for(int k=0; k<goal_mode; k++){
 800edf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800edf8:	3301      	adds	r3, #1
 800edfa:	62fb      	str	r3, [r7, #44]	; 0x2c
 800edfc:	4ba5      	ldr	r3, [pc, #660]	; (800f094 <make_smap+0x320>)
 800edfe:	781b      	ldrb	r3, [r3, #0]
 800ee00:	461a      	mov	r2, r3
 800ee02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee04:	4293      	cmp	r3, r2
 800ee06:	dbe6      	blt.n	800edd6 <make_smap+0x62>
	for(int j=0; j<goal_mode; j++){
 800ee08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee0a:	3301      	adds	r3, #1
 800ee0c:	633b      	str	r3, [r7, #48]	; 0x30
 800ee0e:	4ba1      	ldr	r3, [pc, #644]	; (800f094 <make_smap+0x320>)
 800ee10:	781b      	ldrb	r3, [r3, #0]
 800ee12:	461a      	mov	r2, r3
 800ee14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee16:	4293      	cmp	r3, r2
 800ee18:	dbda      	blt.n	800edd0 <make_smap+0x5c>
	}

//	smap[goal_y][goal_x] = 0;

	//====a歩数カウンタの重みづけ====
	int straight = 3;
 800ee1a:	2303      	movs	r3, #3
 800ee1c:	617b      	str	r3, [r7, #20]
	int turn = 5;
 800ee1e:	2305      	movs	r3, #5
 800ee20:	613b      	str	r3, [r7, #16]

	//====a自分の座標にたどり着くまでループ====
	do{
		//----aマップ全域を捜索----
		for(y = 0; y <= 15; y++){							//a各Y座標で実行
 800ee22:	2300      	movs	r3, #0
 800ee24:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 800ee28:	e333      	b.n	800f492 <make_smap+0x71e>
			for(x = 0; x <= 15; x++){						//a各X座標で実行
 800ee2a:	2300      	movs	r3, #0
 800ee2c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800ee30:	e325      	b.n	800f47e <make_smap+0x70a>
				//----a現在最大の歩数を発見したとき----
				if(smap[y][x] == m_step){					//a歩数カウンタm_stepの値が現在最大の歩数
 800ee32:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 800ee36:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ee3a:	4992      	ldr	r1, [pc, #584]	; (800f084 <make_smap+0x310>)
 800ee3c:	0112      	lsls	r2, r2, #4
 800ee3e:	4413      	add	r3, r2
 800ee40:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 800ee44:	4b90      	ldr	r3, [pc, #576]	; (800f088 <make_smap+0x314>)
 800ee46:	881b      	ldrh	r3, [r3, #0]
 800ee48:	429a      	cmp	r2, r3
 800ee4a:	f040 8313 	bne.w	800f474 <make_smap+0x700>
					uint8_t m_temp = map[y][x];				//map配列からマップデータを取り出す
 800ee4e:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 800ee52:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ee56:	4990      	ldr	r1, [pc, #576]	; (800f098 <make_smap+0x324>)
 800ee58:	0112      	lsls	r2, r2, #4
 800ee5a:	440a      	add	r2, r1
 800ee5c:	4413      	add	r3, r2
 800ee5e:	781b      	ldrb	r3, [r3, #0]
 800ee60:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
					if(MF.FLAG.SCND){						//a二次走行用のマップを作成する場合（二次走行時はMF.FLAG.SCNDが立っている）
 800ee64:	4b8d      	ldr	r3, [pc, #564]	; (800f09c <make_smap+0x328>)
 800ee66:	881b      	ldrh	r3, [r3, #0]
 800ee68:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800ee6c:	b2db      	uxtb	r3, r3
 800ee6e:	2b00      	cmp	r3, #0
 800ee70:	d004      	beq.n	800ee7c <make_smap+0x108>
						m_temp >>= 4;						//a上位4bitを使うので4bit分右にシフトさせる
 800ee72:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800ee76:	091b      	lsrs	r3, r3, #4
 800ee78:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
					}
					//----a北壁についての処理----
					if(!(m_temp & 0x08) && y != 15){		//a北壁がなく現在最北端でないとき
 800ee7c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800ee80:	f003 0308 	and.w	r3, r3, #8
 800ee84:	2b00      	cmp	r3, #0
 800ee86:	f040 80b4 	bne.w	800eff2 <make_smap+0x27e>
 800ee8a:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800ee8e:	2b0f      	cmp	r3, #15
 800ee90:	f000 80af 	beq.w	800eff2 <make_smap+0x27e>
						if(smap[y+1][x] >= (smap[y][x]+turn)){		//a北側が記入後より大きいなら
 800ee94:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800ee98:	1c5a      	adds	r2, r3, #1
 800ee9a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ee9e:	4979      	ldr	r1, [pc, #484]	; (800f084 <make_smap+0x310>)
 800eea0:	0112      	lsls	r2, r2, #4
 800eea2:	4413      	add	r3, r2
 800eea4:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800eea8:	4618      	mov	r0, r3
 800eeaa:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 800eeae:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800eeb2:	4974      	ldr	r1, [pc, #464]	; (800f084 <make_smap+0x310>)
 800eeb4:	0112      	lsls	r2, r2, #4
 800eeb6:	4413      	add	r3, r2
 800eeb8:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800eebc:	461a      	mov	r2, r3
 800eebe:	693b      	ldr	r3, [r7, #16]
 800eec0:	4413      	add	r3, r2
 800eec2:	4298      	cmp	r0, r3
 800eec4:	f2c0 8095 	blt.w	800eff2 <make_smap+0x27e>
							smap[y+1][x] = smap[y][x] + turn;		//a次の歩数を書き込む
 800eec8:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 800eecc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800eed0:	496c      	ldr	r1, [pc, #432]	; (800f084 <make_smap+0x310>)
 800eed2:	0112      	lsls	r2, r2, #4
 800eed4:	4413      	add	r3, r2
 800eed6:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 800eeda:	693b      	ldr	r3, [r7, #16]
 800eedc:	b299      	uxth	r1, r3
 800eede:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800eee2:	1c5a      	adds	r2, r3, #1
 800eee4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800eee8:	4401      	add	r1, r0
 800eeea:	b288      	uxth	r0, r1
 800eeec:	4965      	ldr	r1, [pc, #404]	; (800f084 <make_smap+0x310>)
 800eeee:	0112      	lsls	r2, r2, #4
 800eef0:	4413      	add	r3, r2
 800eef2:	4602      	mov	r2, r0
 800eef4:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
							if(MF.FLAG.STRAIGHT){
 800eef8:	4b68      	ldr	r3, [pc, #416]	; (800f09c <make_smap+0x328>)
 800eefa:	881b      	ldrh	r3, [r3, #0]
 800eefc:	f3c3 2380 	ubfx	r3, r3, #10, #1
 800ef00:	b2db      	uxtb	r3, r3
 800ef02:	2b00      	cmp	r3, #0
 800ef04:	d075      	beq.n	800eff2 <make_smap+0x27e>
								//----a直線優先処理----
								for(int k=1; k<16-y; k++) {					//a現在座標から見て北のマスすべてにおいて
 800ef06:	2301      	movs	r3, #1
 800ef08:	627b      	str	r3, [r7, #36]	; 0x24
 800ef0a:	e06b      	b.n	800efe4 <make_smap+0x270>
									m_temp_sample[k] = map[y+k][x];				//map配列からマップデータを取り出す
 800ef0c:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 800ef10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef12:	441a      	add	r2, r3
 800ef14:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ef18:	495f      	ldr	r1, [pc, #380]	; (800f098 <make_smap+0x324>)
 800ef1a:	0112      	lsls	r2, r2, #4
 800ef1c:	440a      	add	r2, r1
 800ef1e:	4413      	add	r3, r2
 800ef20:	7819      	ldrb	r1, [r3, #0]
 800ef22:	463a      	mov	r2, r7
 800ef24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef26:	4413      	add	r3, r2
 800ef28:	460a      	mov	r2, r1
 800ef2a:	701a      	strb	r2, [r3, #0]
									if(MF.FLAG.SCND) m_temp_sample[k] >>= 4;		//a二次走行用のマップを作成する場合上位4bitを使うので4bit分右にシフトさせる
 800ef2c:	4b5b      	ldr	r3, [pc, #364]	; (800f09c <make_smap+0x328>)
 800ef2e:	881b      	ldrh	r3, [r3, #0]
 800ef30:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800ef34:	b2db      	uxtb	r3, r3
 800ef36:	2b00      	cmp	r3, #0
 800ef38:	d00a      	beq.n	800ef50 <make_smap+0x1dc>
 800ef3a:	463a      	mov	r2, r7
 800ef3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef3e:	4413      	add	r3, r2
 800ef40:	781b      	ldrb	r3, [r3, #0]
 800ef42:	091b      	lsrs	r3, r3, #4
 800ef44:	b2d9      	uxtb	r1, r3
 800ef46:	463a      	mov	r2, r7
 800ef48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef4a:	4413      	add	r3, r2
 800ef4c:	460a      	mov	r2, r1
 800ef4e:	701a      	strb	r2, [r3, #0]
									if(!(m_temp_sample[k] & 0x08) && (y+k) != 15) {		//a北壁がなく現在最北端でないとき
 800ef50:	463a      	mov	r2, r7
 800ef52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef54:	4413      	add	r3, r2
 800ef56:	781b      	ldrb	r3, [r3, #0]
 800ef58:	f003 0308 	and.w	r3, r3, #8
 800ef5c:	2b00      	cmp	r3, #0
 800ef5e:	d148      	bne.n	800eff2 <make_smap+0x27e>
 800ef60:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 800ef64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef66:	4413      	add	r3, r2
 800ef68:	2b0f      	cmp	r3, #15
 800ef6a:	d042      	beq.n	800eff2 <make_smap+0x27e>
										if(smap[y+k+1][x] >= (smap[y+k][x]+straight)){		//a北側が記入後より大きいなら
 800ef6c:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 800ef70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef72:	4413      	add	r3, r2
 800ef74:	1c5a      	adds	r2, r3, #1
 800ef76:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ef7a:	4942      	ldr	r1, [pc, #264]	; (800f084 <make_smap+0x310>)
 800ef7c:	0112      	lsls	r2, r2, #4
 800ef7e:	4413      	add	r3, r2
 800ef80:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800ef84:	4618      	mov	r0, r3
 800ef86:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 800ef8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef8c:	441a      	add	r2, r3
 800ef8e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ef92:	493c      	ldr	r1, [pc, #240]	; (800f084 <make_smap+0x310>)
 800ef94:	0112      	lsls	r2, r2, #4
 800ef96:	4413      	add	r3, r2
 800ef98:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800ef9c:	461a      	mov	r2, r3
 800ef9e:	697b      	ldr	r3, [r7, #20]
 800efa0:	4413      	add	r3, r2
 800efa2:	4298      	cmp	r0, r3
 800efa4:	db1b      	blt.n	800efde <make_smap+0x26a>
											smap[y+k+1][x] = smap[y+k][x] + straight;		//a直線分インクリメントした値を次のマスの歩数マップに書き込む
 800efa6:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 800efaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800efac:	441a      	add	r2, r3
 800efae:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800efb2:	4934      	ldr	r1, [pc, #208]	; (800f084 <make_smap+0x310>)
 800efb4:	0112      	lsls	r2, r2, #4
 800efb6:	4413      	add	r3, r2
 800efb8:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 800efbc:	697b      	ldr	r3, [r7, #20]
 800efbe:	b299      	uxth	r1, r3
 800efc0:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 800efc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800efc6:	4413      	add	r3, r2
 800efc8:	1c5a      	adds	r2, r3, #1
 800efca:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800efce:	4401      	add	r1, r0
 800efd0:	b288      	uxth	r0, r1
 800efd2:	492c      	ldr	r1, [pc, #176]	; (800f084 <make_smap+0x310>)
 800efd4:	0112      	lsls	r2, r2, #4
 800efd6:	4413      	add	r3, r2
 800efd8:	4602      	mov	r2, r0
 800efda:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
								for(int k=1; k<16-y; k++) {					//a現在座標から見て北のマスすべてにおいて
 800efde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800efe0:	3301      	adds	r3, #1
 800efe2:	627b      	str	r3, [r7, #36]	; 0x24
 800efe4:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800efe8:	f1c3 0310 	rsb	r3, r3, #16
 800efec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800efee:	429a      	cmp	r2, r3
 800eff0:	db8c      	blt.n	800ef0c <make_smap+0x198>
								}
							}
						}
					}
					//----a東壁についての処理----
					if(!(m_temp & 0x04) && x != 15){		//a東壁がなく現在最東端でないとき
 800eff2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800eff6:	f003 0304 	and.w	r3, r3, #4
 800effa:	2b00      	cmp	r3, #0
 800effc:	f040 80c3 	bne.w	800f186 <make_smap+0x412>
 800f000:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800f004:	2b0f      	cmp	r3, #15
 800f006:	f000 80be 	beq.w	800f186 <make_smap+0x412>
						if(smap[y][x+1] >= (smap[y][x]+turn)){	//a東側が記入後より大きいなら
 800f00a:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 800f00e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800f012:	3301      	adds	r3, #1
 800f014:	491b      	ldr	r1, [pc, #108]	; (800f084 <make_smap+0x310>)
 800f016:	0112      	lsls	r2, r2, #4
 800f018:	4413      	add	r3, r2
 800f01a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800f01e:	4618      	mov	r0, r3
 800f020:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 800f024:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800f028:	4916      	ldr	r1, [pc, #88]	; (800f084 <make_smap+0x310>)
 800f02a:	0112      	lsls	r2, r2, #4
 800f02c:	4413      	add	r3, r2
 800f02e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800f032:	461a      	mov	r2, r3
 800f034:	693b      	ldr	r3, [r7, #16]
 800f036:	4413      	add	r3, r2
 800f038:	4298      	cmp	r0, r3
 800f03a:	f2c0 80a4 	blt.w	800f186 <make_smap+0x412>
							smap[y][x+1] = smap[y][x] + turn;	//a次の歩数を書き込む
 800f03e:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 800f042:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800f046:	490f      	ldr	r1, [pc, #60]	; (800f084 <make_smap+0x310>)
 800f048:	0112      	lsls	r2, r2, #4
 800f04a:	4413      	add	r3, r2
 800f04c:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 800f050:	693b      	ldr	r3, [r7, #16]
 800f052:	b299      	uxth	r1, r3
 800f054:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 800f058:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800f05c:	3301      	adds	r3, #1
 800f05e:	4401      	add	r1, r0
 800f060:	b288      	uxth	r0, r1
 800f062:	4908      	ldr	r1, [pc, #32]	; (800f084 <make_smap+0x310>)
 800f064:	0112      	lsls	r2, r2, #4
 800f066:	4413      	add	r3, r2
 800f068:	4602      	mov	r2, r0
 800f06a:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
							if(MF.FLAG.STRAIGHT){
 800f06e:	4b0b      	ldr	r3, [pc, #44]	; (800f09c <make_smap+0x328>)
 800f070:	881b      	ldrh	r3, [r3, #0]
 800f072:	f3c3 2380 	ubfx	r3, r3, #10, #1
 800f076:	b2db      	uxtb	r3, r3
 800f078:	2b00      	cmp	r3, #0
 800f07a:	f000 8084 	beq.w	800f186 <make_smap+0x412>
								//----a直線優先処理----
								for(int k=1; k<16-x; k++) {					//a現在座標から見て東のマスすべてにおいて
 800f07e:	2301      	movs	r3, #1
 800f080:	623b      	str	r3, [r7, #32]
 800f082:	e079      	b.n	800f178 <make_smap+0x404>
 800f084:	20000d60 	.word	0x20000d60
 800f088:	2000034e 	.word	0x2000034e
 800f08c:	20000b4c 	.word	0x20000b4c
 800f090:	20000bb0 	.word	0x20000bb0
 800f094:	20000bb1 	.word	0x20000bb1
 800f098:	200001ac 	.word	0x200001ac
 800f09c:	20000f68 	.word	0x20000f68
									m_temp_sample[k] = map[y][x+k];				//map配列からマップデータを取り出す
 800f0a0:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 800f0a4:	f897 1037 	ldrb.w	r1, [r7, #55]	; 0x37
 800f0a8:	6a3b      	ldr	r3, [r7, #32]
 800f0aa:	440b      	add	r3, r1
 800f0ac:	49b6      	ldr	r1, [pc, #728]	; (800f388 <make_smap+0x614>)
 800f0ae:	0112      	lsls	r2, r2, #4
 800f0b0:	440a      	add	r2, r1
 800f0b2:	4413      	add	r3, r2
 800f0b4:	7819      	ldrb	r1, [r3, #0]
 800f0b6:	463a      	mov	r2, r7
 800f0b8:	6a3b      	ldr	r3, [r7, #32]
 800f0ba:	4413      	add	r3, r2
 800f0bc:	460a      	mov	r2, r1
 800f0be:	701a      	strb	r2, [r3, #0]
									if(MF.FLAG.SCND) m_temp_sample[k] >>= 4;		//a二次走行用のマップを作成する場合上位4bitを使うので4bit分右にシフトさせる
 800f0c0:	4bb2      	ldr	r3, [pc, #712]	; (800f38c <make_smap+0x618>)
 800f0c2:	881b      	ldrh	r3, [r3, #0]
 800f0c4:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800f0c8:	b2db      	uxtb	r3, r3
 800f0ca:	2b00      	cmp	r3, #0
 800f0cc:	d00a      	beq.n	800f0e4 <make_smap+0x370>
 800f0ce:	463a      	mov	r2, r7
 800f0d0:	6a3b      	ldr	r3, [r7, #32]
 800f0d2:	4413      	add	r3, r2
 800f0d4:	781b      	ldrb	r3, [r3, #0]
 800f0d6:	091b      	lsrs	r3, r3, #4
 800f0d8:	b2d9      	uxtb	r1, r3
 800f0da:	463a      	mov	r2, r7
 800f0dc:	6a3b      	ldr	r3, [r7, #32]
 800f0de:	4413      	add	r3, r2
 800f0e0:	460a      	mov	r2, r1
 800f0e2:	701a      	strb	r2, [r3, #0]
									if(!(m_temp_sample[k] & 0x04) && (x+k) != 15) {		//a東壁がなく現在最東端でないとき
 800f0e4:	463a      	mov	r2, r7
 800f0e6:	6a3b      	ldr	r3, [r7, #32]
 800f0e8:	4413      	add	r3, r2
 800f0ea:	781b      	ldrb	r3, [r3, #0]
 800f0ec:	f003 0304 	and.w	r3, r3, #4
 800f0f0:	2b00      	cmp	r3, #0
 800f0f2:	d148      	bne.n	800f186 <make_smap+0x412>
 800f0f4:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800f0f8:	6a3b      	ldr	r3, [r7, #32]
 800f0fa:	4413      	add	r3, r2
 800f0fc:	2b0f      	cmp	r3, #15
 800f0fe:	d042      	beq.n	800f186 <make_smap+0x412>
										if(smap[y][x+k+1] >= (smap[y][x+k]+straight)){		//a東側が記入後より大きいなら
 800f100:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 800f104:	f897 1037 	ldrb.w	r1, [r7, #55]	; 0x37
 800f108:	6a3b      	ldr	r3, [r7, #32]
 800f10a:	440b      	add	r3, r1
 800f10c:	3301      	adds	r3, #1
 800f10e:	49a0      	ldr	r1, [pc, #640]	; (800f390 <make_smap+0x61c>)
 800f110:	0112      	lsls	r2, r2, #4
 800f112:	4413      	add	r3, r2
 800f114:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800f118:	4618      	mov	r0, r3
 800f11a:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 800f11e:	f897 1037 	ldrb.w	r1, [r7, #55]	; 0x37
 800f122:	6a3b      	ldr	r3, [r7, #32]
 800f124:	440b      	add	r3, r1
 800f126:	499a      	ldr	r1, [pc, #616]	; (800f390 <make_smap+0x61c>)
 800f128:	0112      	lsls	r2, r2, #4
 800f12a:	4413      	add	r3, r2
 800f12c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800f130:	461a      	mov	r2, r3
 800f132:	697b      	ldr	r3, [r7, #20]
 800f134:	4413      	add	r3, r2
 800f136:	4298      	cmp	r0, r3
 800f138:	db1b      	blt.n	800f172 <make_smap+0x3fe>
											smap[y][x+k+1] = smap[y][x+k] + straight;		//a直線分インクリメントした値を次のマスの歩数マップに書き込む
 800f13a:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 800f13e:	f897 1037 	ldrb.w	r1, [r7, #55]	; 0x37
 800f142:	6a3b      	ldr	r3, [r7, #32]
 800f144:	440b      	add	r3, r1
 800f146:	4992      	ldr	r1, [pc, #584]	; (800f390 <make_smap+0x61c>)
 800f148:	0112      	lsls	r2, r2, #4
 800f14a:	4413      	add	r3, r2
 800f14c:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 800f150:	697b      	ldr	r3, [r7, #20]
 800f152:	b299      	uxth	r1, r3
 800f154:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 800f158:	f897 4037 	ldrb.w	r4, [r7, #55]	; 0x37
 800f15c:	6a3b      	ldr	r3, [r7, #32]
 800f15e:	4423      	add	r3, r4
 800f160:	3301      	adds	r3, #1
 800f162:	4401      	add	r1, r0
 800f164:	b288      	uxth	r0, r1
 800f166:	498a      	ldr	r1, [pc, #552]	; (800f390 <make_smap+0x61c>)
 800f168:	0112      	lsls	r2, r2, #4
 800f16a:	4413      	add	r3, r2
 800f16c:	4602      	mov	r2, r0
 800f16e:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
								for(int k=1; k<16-x; k++) {					//a現在座標から見て東のマスすべてにおいて
 800f172:	6a3b      	ldr	r3, [r7, #32]
 800f174:	3301      	adds	r3, #1
 800f176:	623b      	str	r3, [r7, #32]
 800f178:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800f17c:	f1c3 0310 	rsb	r3, r3, #16
 800f180:	6a3a      	ldr	r2, [r7, #32]
 800f182:	429a      	cmp	r2, r3
 800f184:	db8c      	blt.n	800f0a0 <make_smap+0x32c>
								}
							}
						}
					}
					//----a南壁についての処理----
					if(!(m_temp & 0x02) && y != 0){			//a南壁がなく現在最南端でないとき
 800f186:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800f18a:	f003 0302 	and.w	r3, r3, #2
 800f18e:	2b00      	cmp	r3, #0
 800f190:	f040 80b1 	bne.w	800f2f6 <make_smap+0x582>
 800f194:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800f198:	2b00      	cmp	r3, #0
 800f19a:	f000 80ac 	beq.w	800f2f6 <make_smap+0x582>
						if(smap[y-1][x] >= (smap[y][x]+turn)){	//a南側が記入後より大きいなら
 800f19e:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800f1a2:	1e5a      	subs	r2, r3, #1
 800f1a4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800f1a8:	4979      	ldr	r1, [pc, #484]	; (800f390 <make_smap+0x61c>)
 800f1aa:	0112      	lsls	r2, r2, #4
 800f1ac:	4413      	add	r3, r2
 800f1ae:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800f1b2:	4618      	mov	r0, r3
 800f1b4:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 800f1b8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800f1bc:	4974      	ldr	r1, [pc, #464]	; (800f390 <make_smap+0x61c>)
 800f1be:	0112      	lsls	r2, r2, #4
 800f1c0:	4413      	add	r3, r2
 800f1c2:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800f1c6:	461a      	mov	r2, r3
 800f1c8:	693b      	ldr	r3, [r7, #16]
 800f1ca:	4413      	add	r3, r2
 800f1cc:	4298      	cmp	r0, r3
 800f1ce:	f2c0 8092 	blt.w	800f2f6 <make_smap+0x582>
							smap[y-1][x] = smap[y][x] + turn;	//a次の歩数を書き込む
 800f1d2:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 800f1d6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800f1da:	496d      	ldr	r1, [pc, #436]	; (800f390 <make_smap+0x61c>)
 800f1dc:	0112      	lsls	r2, r2, #4
 800f1de:	4413      	add	r3, r2
 800f1e0:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 800f1e4:	693b      	ldr	r3, [r7, #16]
 800f1e6:	b299      	uxth	r1, r3
 800f1e8:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800f1ec:	1e5a      	subs	r2, r3, #1
 800f1ee:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800f1f2:	4401      	add	r1, r0
 800f1f4:	b288      	uxth	r0, r1
 800f1f6:	4966      	ldr	r1, [pc, #408]	; (800f390 <make_smap+0x61c>)
 800f1f8:	0112      	lsls	r2, r2, #4
 800f1fa:	4413      	add	r3, r2
 800f1fc:	4602      	mov	r2, r0
 800f1fe:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
							if(MF.FLAG.STRAIGHT){
 800f202:	4b62      	ldr	r3, [pc, #392]	; (800f38c <make_smap+0x618>)
 800f204:	881b      	ldrh	r3, [r3, #0]
 800f206:	f3c3 2380 	ubfx	r3, r3, #10, #1
 800f20a:	b2db      	uxtb	r3, r3
 800f20c:	2b00      	cmp	r3, #0
 800f20e:	d072      	beq.n	800f2f6 <make_smap+0x582>
								//----a直線優先処理----
								for(int k=1; k<y; k++) {						//a現在座標から見て南のマスすべてにおいて
 800f210:	2301      	movs	r3, #1
 800f212:	61fb      	str	r3, [r7, #28]
 800f214:	e06a      	b.n	800f2ec <make_smap+0x578>
									m_temp_sample[k] = map[y-k][x];				//map配列からマップデータを取り出す
 800f216:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 800f21a:	69fb      	ldr	r3, [r7, #28]
 800f21c:	1ad2      	subs	r2, r2, r3
 800f21e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800f222:	4959      	ldr	r1, [pc, #356]	; (800f388 <make_smap+0x614>)
 800f224:	0112      	lsls	r2, r2, #4
 800f226:	440a      	add	r2, r1
 800f228:	4413      	add	r3, r2
 800f22a:	7819      	ldrb	r1, [r3, #0]
 800f22c:	463a      	mov	r2, r7
 800f22e:	69fb      	ldr	r3, [r7, #28]
 800f230:	4413      	add	r3, r2
 800f232:	460a      	mov	r2, r1
 800f234:	701a      	strb	r2, [r3, #0]
									if(MF.FLAG.SCND) m_temp_sample[k] >>= 4;		//a二次走行用のマップを作成する場合上位4bitを使うので4bit分右にシフトさせる
 800f236:	4b55      	ldr	r3, [pc, #340]	; (800f38c <make_smap+0x618>)
 800f238:	881b      	ldrh	r3, [r3, #0]
 800f23a:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800f23e:	b2db      	uxtb	r3, r3
 800f240:	2b00      	cmp	r3, #0
 800f242:	d00a      	beq.n	800f25a <make_smap+0x4e6>
 800f244:	463a      	mov	r2, r7
 800f246:	69fb      	ldr	r3, [r7, #28]
 800f248:	4413      	add	r3, r2
 800f24a:	781b      	ldrb	r3, [r3, #0]
 800f24c:	091b      	lsrs	r3, r3, #4
 800f24e:	b2d9      	uxtb	r1, r3
 800f250:	463a      	mov	r2, r7
 800f252:	69fb      	ldr	r3, [r7, #28]
 800f254:	4413      	add	r3, r2
 800f256:	460a      	mov	r2, r1
 800f258:	701a      	strb	r2, [r3, #0]
									if(!(m_temp_sample[k] & 0x02) && (y-k) != 0) {		//a南壁がなく現在最南端でないとき
 800f25a:	463a      	mov	r2, r7
 800f25c:	69fb      	ldr	r3, [r7, #28]
 800f25e:	4413      	add	r3, r2
 800f260:	781b      	ldrb	r3, [r3, #0]
 800f262:	f003 0302 	and.w	r3, r3, #2
 800f266:	2b00      	cmp	r3, #0
 800f268:	d145      	bne.n	800f2f6 <make_smap+0x582>
 800f26a:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800f26e:	69fa      	ldr	r2, [r7, #28]
 800f270:	429a      	cmp	r2, r3
 800f272:	d040      	beq.n	800f2f6 <make_smap+0x582>
										if(smap[y-k-1][x] >= (smap[y-k][x]+straight)){		//a南側が記入後より大きいなら
 800f274:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 800f278:	69fb      	ldr	r3, [r7, #28]
 800f27a:	1ad3      	subs	r3, r2, r3
 800f27c:	1e5a      	subs	r2, r3, #1
 800f27e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800f282:	4943      	ldr	r1, [pc, #268]	; (800f390 <make_smap+0x61c>)
 800f284:	0112      	lsls	r2, r2, #4
 800f286:	4413      	add	r3, r2
 800f288:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800f28c:	4618      	mov	r0, r3
 800f28e:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 800f292:	69fb      	ldr	r3, [r7, #28]
 800f294:	1ad2      	subs	r2, r2, r3
 800f296:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800f29a:	493d      	ldr	r1, [pc, #244]	; (800f390 <make_smap+0x61c>)
 800f29c:	0112      	lsls	r2, r2, #4
 800f29e:	4413      	add	r3, r2
 800f2a0:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800f2a4:	461a      	mov	r2, r3
 800f2a6:	697b      	ldr	r3, [r7, #20]
 800f2a8:	4413      	add	r3, r2
 800f2aa:	4298      	cmp	r0, r3
 800f2ac:	db1b      	blt.n	800f2e6 <make_smap+0x572>
											smap[y-k-1][x] = smap[y-k][x] + straight;		//a直線分インクリメントした値を次のマスの歩数マップに書き込む
 800f2ae:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 800f2b2:	69fb      	ldr	r3, [r7, #28]
 800f2b4:	1ad2      	subs	r2, r2, r3
 800f2b6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800f2ba:	4935      	ldr	r1, [pc, #212]	; (800f390 <make_smap+0x61c>)
 800f2bc:	0112      	lsls	r2, r2, #4
 800f2be:	4413      	add	r3, r2
 800f2c0:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 800f2c4:	697b      	ldr	r3, [r7, #20]
 800f2c6:	b299      	uxth	r1, r3
 800f2c8:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 800f2cc:	69fb      	ldr	r3, [r7, #28]
 800f2ce:	1ad3      	subs	r3, r2, r3
 800f2d0:	1e5a      	subs	r2, r3, #1
 800f2d2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800f2d6:	4401      	add	r1, r0
 800f2d8:	b288      	uxth	r0, r1
 800f2da:	492d      	ldr	r1, [pc, #180]	; (800f390 <make_smap+0x61c>)
 800f2dc:	0112      	lsls	r2, r2, #4
 800f2de:	4413      	add	r3, r2
 800f2e0:	4602      	mov	r2, r0
 800f2e2:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
								for(int k=1; k<y; k++) {						//a現在座標から見て南のマスすべてにおいて
 800f2e6:	69fb      	ldr	r3, [r7, #28]
 800f2e8:	3301      	adds	r3, #1
 800f2ea:	61fb      	str	r3, [r7, #28]
 800f2ec:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800f2f0:	69fa      	ldr	r2, [r7, #28]
 800f2f2:	429a      	cmp	r2, r3
 800f2f4:	db8f      	blt.n	800f216 <make_smap+0x4a2>
								}
							}
						}
					}
					//----a西壁についての処理----
					if(!(m_temp & 0x01) && x != 0){			//a西壁がなく現在最西端でないとき
 800f2f6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800f2fa:	f003 0301 	and.w	r3, r3, #1
 800f2fe:	2b00      	cmp	r3, #0
 800f300:	f040 80b8 	bne.w	800f474 <make_smap+0x700>
 800f304:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800f308:	2b00      	cmp	r3, #0
 800f30a:	f000 80b3 	beq.w	800f474 <make_smap+0x700>
						if(smap[y][x-1] >= (smap[y][x]+turn)){	//a西側が記入後より大きいなら
 800f30e:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 800f312:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800f316:	3b01      	subs	r3, #1
 800f318:	491d      	ldr	r1, [pc, #116]	; (800f390 <make_smap+0x61c>)
 800f31a:	0112      	lsls	r2, r2, #4
 800f31c:	4413      	add	r3, r2
 800f31e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800f322:	4618      	mov	r0, r3
 800f324:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 800f328:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800f32c:	4918      	ldr	r1, [pc, #96]	; (800f390 <make_smap+0x61c>)
 800f32e:	0112      	lsls	r2, r2, #4
 800f330:	4413      	add	r3, r2
 800f332:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800f336:	461a      	mov	r2, r3
 800f338:	693b      	ldr	r3, [r7, #16]
 800f33a:	4413      	add	r3, r2
 800f33c:	4298      	cmp	r0, r3
 800f33e:	f2c0 8099 	blt.w	800f474 <make_smap+0x700>
							smap[y][x-1] = smap[y][x] + turn;	//a次の歩数を書き込む
 800f342:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 800f346:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800f34a:	4911      	ldr	r1, [pc, #68]	; (800f390 <make_smap+0x61c>)
 800f34c:	0112      	lsls	r2, r2, #4
 800f34e:	4413      	add	r3, r2
 800f350:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 800f354:	693b      	ldr	r3, [r7, #16]
 800f356:	b299      	uxth	r1, r3
 800f358:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 800f35c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800f360:	3b01      	subs	r3, #1
 800f362:	4401      	add	r1, r0
 800f364:	b288      	uxth	r0, r1
 800f366:	490a      	ldr	r1, [pc, #40]	; (800f390 <make_smap+0x61c>)
 800f368:	0112      	lsls	r2, r2, #4
 800f36a:	4413      	add	r3, r2
 800f36c:	4602      	mov	r2, r0
 800f36e:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
							if(MF.FLAG.STRAIGHT){
 800f372:	4b06      	ldr	r3, [pc, #24]	; (800f38c <make_smap+0x618>)
 800f374:	881b      	ldrh	r3, [r3, #0]
 800f376:	f3c3 2380 	ubfx	r3, r3, #10, #1
 800f37a:	b2db      	uxtb	r3, r3
 800f37c:	2b00      	cmp	r3, #0
 800f37e:	d079      	beq.n	800f474 <make_smap+0x700>
								//----a直線優先処理----
								for(int k=1; k<x; k++) {						//a現在座標から見て西のマスすべてにおいて
 800f380:	2301      	movs	r3, #1
 800f382:	61bb      	str	r3, [r7, #24]
 800f384:	e071      	b.n	800f46a <make_smap+0x6f6>
 800f386:	bf00      	nop
 800f388:	200001ac 	.word	0x200001ac
 800f38c:	20000f68 	.word	0x20000f68
 800f390:	20000d60 	.word	0x20000d60
									m_temp_sample[k] = map[y][x-k];				//map配列からマップデータを取り出す
 800f394:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 800f398:	f897 1037 	ldrb.w	r1, [r7, #55]	; 0x37
 800f39c:	69bb      	ldr	r3, [r7, #24]
 800f39e:	1acb      	subs	r3, r1, r3
 800f3a0:	494d      	ldr	r1, [pc, #308]	; (800f4d8 <make_smap+0x764>)
 800f3a2:	0112      	lsls	r2, r2, #4
 800f3a4:	440a      	add	r2, r1
 800f3a6:	4413      	add	r3, r2
 800f3a8:	7819      	ldrb	r1, [r3, #0]
 800f3aa:	463a      	mov	r2, r7
 800f3ac:	69bb      	ldr	r3, [r7, #24]
 800f3ae:	4413      	add	r3, r2
 800f3b0:	460a      	mov	r2, r1
 800f3b2:	701a      	strb	r2, [r3, #0]
									if(MF.FLAG.SCND) m_temp_sample[k] >>= 4;		//a二次走行用のマップを作成する場合上位4bitを使うので4bit分右にシフトさせる
 800f3b4:	4b49      	ldr	r3, [pc, #292]	; (800f4dc <make_smap+0x768>)
 800f3b6:	881b      	ldrh	r3, [r3, #0]
 800f3b8:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800f3bc:	b2db      	uxtb	r3, r3
 800f3be:	2b00      	cmp	r3, #0
 800f3c0:	d00a      	beq.n	800f3d8 <make_smap+0x664>
 800f3c2:	463a      	mov	r2, r7
 800f3c4:	69bb      	ldr	r3, [r7, #24]
 800f3c6:	4413      	add	r3, r2
 800f3c8:	781b      	ldrb	r3, [r3, #0]
 800f3ca:	091b      	lsrs	r3, r3, #4
 800f3cc:	b2d9      	uxtb	r1, r3
 800f3ce:	463a      	mov	r2, r7
 800f3d0:	69bb      	ldr	r3, [r7, #24]
 800f3d2:	4413      	add	r3, r2
 800f3d4:	460a      	mov	r2, r1
 800f3d6:	701a      	strb	r2, [r3, #0]
									if(!(m_temp_sample[k] & 0x01) && (x-k) != 0) {		//a西壁がなく現在最西端でないとき
 800f3d8:	463a      	mov	r2, r7
 800f3da:	69bb      	ldr	r3, [r7, #24]
 800f3dc:	4413      	add	r3, r2
 800f3de:	781b      	ldrb	r3, [r3, #0]
 800f3e0:	f003 0301 	and.w	r3, r3, #1
 800f3e4:	2b00      	cmp	r3, #0
 800f3e6:	d145      	bne.n	800f474 <make_smap+0x700>
 800f3e8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800f3ec:	69ba      	ldr	r2, [r7, #24]
 800f3ee:	429a      	cmp	r2, r3
 800f3f0:	d040      	beq.n	800f474 <make_smap+0x700>
										if(smap[y][x-k-1] >= (smap[y][x-k]+straight)){		//a西側が記入後より大きいなら
 800f3f2:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 800f3f6:	f897 1037 	ldrb.w	r1, [r7, #55]	; 0x37
 800f3fa:	69bb      	ldr	r3, [r7, #24]
 800f3fc:	1acb      	subs	r3, r1, r3
 800f3fe:	3b01      	subs	r3, #1
 800f400:	4937      	ldr	r1, [pc, #220]	; (800f4e0 <make_smap+0x76c>)
 800f402:	0112      	lsls	r2, r2, #4
 800f404:	4413      	add	r3, r2
 800f406:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800f40a:	4618      	mov	r0, r3
 800f40c:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 800f410:	f897 1037 	ldrb.w	r1, [r7, #55]	; 0x37
 800f414:	69bb      	ldr	r3, [r7, #24]
 800f416:	1acb      	subs	r3, r1, r3
 800f418:	4931      	ldr	r1, [pc, #196]	; (800f4e0 <make_smap+0x76c>)
 800f41a:	0112      	lsls	r2, r2, #4
 800f41c:	4413      	add	r3, r2
 800f41e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800f422:	461a      	mov	r2, r3
 800f424:	697b      	ldr	r3, [r7, #20]
 800f426:	4413      	add	r3, r2
 800f428:	4298      	cmp	r0, r3
 800f42a:	db1b      	blt.n	800f464 <make_smap+0x6f0>
											smap[y][x-k-1] = smap[y][x-k] + straight;		//a直線分インクリメントした値を次のマスの歩数マップに書き込む
 800f42c:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 800f430:	f897 1037 	ldrb.w	r1, [r7, #55]	; 0x37
 800f434:	69bb      	ldr	r3, [r7, #24]
 800f436:	1acb      	subs	r3, r1, r3
 800f438:	4929      	ldr	r1, [pc, #164]	; (800f4e0 <make_smap+0x76c>)
 800f43a:	0112      	lsls	r2, r2, #4
 800f43c:	4413      	add	r3, r2
 800f43e:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 800f442:	697b      	ldr	r3, [r7, #20]
 800f444:	b299      	uxth	r1, r3
 800f446:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 800f44a:	f897 4037 	ldrb.w	r4, [r7, #55]	; 0x37
 800f44e:	69bb      	ldr	r3, [r7, #24]
 800f450:	1ae3      	subs	r3, r4, r3
 800f452:	3b01      	subs	r3, #1
 800f454:	4401      	add	r1, r0
 800f456:	b288      	uxth	r0, r1
 800f458:	4921      	ldr	r1, [pc, #132]	; (800f4e0 <make_smap+0x76c>)
 800f45a:	0112      	lsls	r2, r2, #4
 800f45c:	4413      	add	r3, r2
 800f45e:	4602      	mov	r2, r0
 800f460:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
								for(int k=1; k<x; k++) {						//a現在座標から見て西のマスすべてにおいて
 800f464:	69bb      	ldr	r3, [r7, #24]
 800f466:	3301      	adds	r3, #1
 800f468:	61bb      	str	r3, [r7, #24]
 800f46a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800f46e:	69ba      	ldr	r2, [r7, #24]
 800f470:	429a      	cmp	r2, r3
 800f472:	db8f      	blt.n	800f394 <make_smap+0x620>
			for(x = 0; x <= 15; x++){						//a各X座標で実行
 800f474:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800f478:	3301      	adds	r3, #1
 800f47a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800f47e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800f482:	2b0f      	cmp	r3, #15
 800f484:	f67f acd5 	bls.w	800ee32 <make_smap+0xbe>
		for(y = 0; y <= 15; y++){							//a各Y座標で実行
 800f488:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800f48c:	3301      	adds	r3, #1
 800f48e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 800f492:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800f496:	2b0f      	cmp	r3, #15
 800f498:	f67f acc7 	bls.w	800ee2a <make_smap+0xb6>
					}
				}
			}
		}
		//====a歩数カウンタのインクリメント====
		m_step++;
 800f49c:	4b11      	ldr	r3, [pc, #68]	; (800f4e4 <make_smap+0x770>)
 800f49e:	881b      	ldrh	r3, [r3, #0]
 800f4a0:	3301      	adds	r3, #1
 800f4a2:	b29a      	uxth	r2, r3
 800f4a4:	4b0f      	ldr	r3, [pc, #60]	; (800f4e4 <make_smap+0x770>)
 800f4a6:	801a      	strh	r2, [r3, #0]
	}while(smap[mouse.y][mouse.x] == 0x03e7);					//a現在座標が未記入ではなくなるまで実行
 800f4a8:	4b0f      	ldr	r3, [pc, #60]	; (800f4e8 <make_smap+0x774>)
 800f4aa:	785b      	ldrb	r3, [r3, #1]
 800f4ac:	b2db      	uxtb	r3, r3
 800f4ae:	4618      	mov	r0, r3
 800f4b0:	4b0d      	ldr	r3, [pc, #52]	; (800f4e8 <make_smap+0x774>)
 800f4b2:	781b      	ldrb	r3, [r3, #0]
 800f4b4:	b2db      	uxtb	r3, r3
 800f4b6:	4619      	mov	r1, r3
 800f4b8:	4a09      	ldr	r2, [pc, #36]	; (800f4e0 <make_smap+0x76c>)
 800f4ba:	0103      	lsls	r3, r0, #4
 800f4bc:	440b      	add	r3, r1
 800f4be:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f4c2:	f240 32e7 	movw	r2, #999	; 0x3e7
 800f4c6:	4293      	cmp	r3, r2
 800f4c8:	f43f acab 	beq.w	800ee22 <make_smap+0xae>
}
 800f4cc:	bf00      	nop
 800f4ce:	3738      	adds	r7, #56	; 0x38
 800f4d0:	46bd      	mov	sp, r7
 800f4d2:	bc90      	pop	{r4, r7}
 800f4d4:	4770      	bx	lr
 800f4d6:	bf00      	nop
 800f4d8:	200001ac 	.word	0x200001ac
 800f4dc:	20000f68 	.word	0x20000f68
 800f4e0:	20000d60 	.word	0x20000d60
 800f4e4:	2000034e 	.word	0x2000034e
 800f4e8:	20000c0c 	.word	0x20000c0c

0800f4ec <make_route>:
//make_route
//a最短経路を導出する
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void make_route(){
 800f4ec:	b580      	push	{r7, lr}
 800f4ee:	b082      	sub	sp, #8
 800f4f0:	af00      	add	r7, sp, #0

	//====a変数宣言====
	uint8_t x, y;												//X，Y座標
	uint8_t dir_temp =  mouse.dir;								//aマウスの方角を表すmouse.dirの値をdir_temp変数に退避させる
 800f4f2:	4ba2      	ldr	r3, [pc, #648]	; (800f77c <make_route+0x290>)
 800f4f4:	789b      	ldrb	r3, [r3, #2]
 800f4f6:	703b      	strb	r3, [r7, #0]

	//====a最短経路を初期化====
	uint16_t i;
	for(i = 0; i < 256; i++){
 800f4f8:	2300      	movs	r3, #0
 800f4fa:	80bb      	strh	r3, [r7, #4]
 800f4fc:	e006      	b.n	800f50c <make_route+0x20>
		route[i] = 0xff;										//routeを0xffで初期化
 800f4fe:	88bb      	ldrh	r3, [r7, #4]
 800f500:	4a9f      	ldr	r2, [pc, #636]	; (800f780 <make_route+0x294>)
 800f502:	21ff      	movs	r1, #255	; 0xff
 800f504:	54d1      	strb	r1, [r2, r3]
	for(i = 0; i < 256; i++){
 800f506:	88bb      	ldrh	r3, [r7, #4]
 800f508:	3301      	adds	r3, #1
 800f50a:	80bb      	strh	r3, [r7, #4]
 800f50c:	88bb      	ldrh	r3, [r7, #4]
 800f50e:	2bff      	cmp	r3, #255	; 0xff
 800f510:	d9f5      	bls.n	800f4fe <make_route+0x12>
	}

	//====a歩数カウンタをセット====
	uint16_t m_step = smap[mouse.y][mouse.x];					//a現在座標の歩数マップ値を取得
 800f512:	4b9a      	ldr	r3, [pc, #616]	; (800f77c <make_route+0x290>)
 800f514:	785b      	ldrb	r3, [r3, #1]
 800f516:	b2db      	uxtb	r3, r3
 800f518:	4618      	mov	r0, r3
 800f51a:	4b98      	ldr	r3, [pc, #608]	; (800f77c <make_route+0x290>)
 800f51c:	781b      	ldrb	r3, [r3, #0]
 800f51e:	b2db      	uxtb	r3, r3
 800f520:	4619      	mov	r1, r3
 800f522:	4a98      	ldr	r2, [pc, #608]	; (800f784 <make_route+0x298>)
 800f524:	0103      	lsls	r3, r0, #4
 800f526:	440b      	add	r3, r1
 800f528:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f52c:	807b      	strh	r3, [r7, #2]

	//====x, yに現在座標を書き込み====
	x = mouse.x;
 800f52e:	4b93      	ldr	r3, [pc, #588]	; (800f77c <make_route+0x290>)
 800f530:	781b      	ldrb	r3, [r3, #0]
 800f532:	71fb      	strb	r3, [r7, #7]
	y = mouse.y;
 800f534:	4b91      	ldr	r3, [pc, #580]	; (800f77c <make_route+0x290>)
 800f536:	785b      	ldrb	r3, [r3, #1]
 800f538:	71bb      	strb	r3, [r7, #6]

	//====a最短経路を導出====
	if(pass_mode == 4){
 800f53a:	4b93      	ldr	r3, [pc, #588]	; (800f788 <make_route+0x29c>)
 800f53c:	781b      	ldrb	r3, [r3, #0]
 800f53e:	2b04      	cmp	r3, #4
 800f540:	d105      	bne.n	800f54e <make_route+0x62>
		route[0] = 0x77;
 800f542:	4b8f      	ldr	r3, [pc, #572]	; (800f780 <make_route+0x294>)
 800f544:	2277      	movs	r2, #119	; 0x77
 800f546:	701a      	strb	r2, [r3, #0]
		i = 1;
 800f548:	2301      	movs	r3, #1
 800f54a:	80bb      	strh	r3, [r7, #4]
 800f54c:	e001      	b.n	800f552 <make_route+0x66>
	}else{
		i = 0;
 800f54e:	2300      	movs	r3, #0
 800f550:	80bb      	strh	r3, [r7, #4]
	}

	do{
		uint8_t m_temp = map[y][x];								//a比較用マップ情報の格納
 800f552:	79ba      	ldrb	r2, [r7, #6]
 800f554:	79fb      	ldrb	r3, [r7, #7]
 800f556:	498d      	ldr	r1, [pc, #564]	; (800f78c <make_route+0x2a0>)
 800f558:	0112      	lsls	r2, r2, #4
 800f55a:	440a      	add	r2, r1
 800f55c:	4413      	add	r3, r2
 800f55e:	781b      	ldrb	r3, [r3, #0]
 800f560:	707b      	strb	r3, [r7, #1]
		if(MF.FLAG.SCND){										//a二次走行用のマップを作成する場合（二次走行時はMF.FLAG.SCNDが立っている）
 800f562:	4b8b      	ldr	r3, [pc, #556]	; (800f790 <make_route+0x2a4>)
 800f564:	881b      	ldrh	r3, [r3, #0]
 800f566:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800f56a:	b2db      	uxtb	r3, r3
 800f56c:	2b00      	cmp	r3, #0
 800f56e:	d002      	beq.n	800f576 <make_route+0x8a>
			m_temp >>= 4;										//a上位4bitを使うので4bit分右にシフトさせる
 800f570:	787b      	ldrb	r3, [r7, #1]
 800f572:	091b      	lsrs	r3, r3, #4
 800f574:	707b      	strb	r3, [r7, #1]
		}
		//----a北を見る----
		if(!(m_temp & 0x08) && (smap[y+1][x] < m_step)){		//a北側に壁が無く、現在地より小さい歩数マップ値であれば
 800f576:	787b      	ldrb	r3, [r7, #1]
 800f578:	f003 0308 	and.w	r3, r3, #8
 800f57c:	2b00      	cmp	r3, #0
 800f57e:	d122      	bne.n	800f5c6 <make_route+0xda>
 800f580:	79bb      	ldrb	r3, [r7, #6]
 800f582:	1c5a      	adds	r2, r3, #1
 800f584:	79fb      	ldrb	r3, [r7, #7]
 800f586:	497f      	ldr	r1, [pc, #508]	; (800f784 <make_route+0x298>)
 800f588:	0112      	lsls	r2, r2, #4
 800f58a:	4413      	add	r3, r2
 800f58c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800f590:	887a      	ldrh	r2, [r7, #2]
 800f592:	429a      	cmp	r2, r3
 800f594:	d917      	bls.n	800f5c6 <make_route+0xda>
			route[i] = (0x00 - mouse.dir) & 0x03;				//route配列に進行方向を記録
 800f596:	4b79      	ldr	r3, [pc, #484]	; (800f77c <make_route+0x290>)
 800f598:	789b      	ldrb	r3, [r3, #2]
 800f59a:	b2db      	uxtb	r3, r3
 800f59c:	425b      	negs	r3, r3
 800f59e:	b2da      	uxtb	r2, r3
 800f5a0:	88bb      	ldrh	r3, [r7, #4]
 800f5a2:	f002 0203 	and.w	r2, r2, #3
 800f5a6:	b2d1      	uxtb	r1, r2
 800f5a8:	4a75      	ldr	r2, [pc, #468]	; (800f780 <make_route+0x294>)
 800f5aa:	54d1      	strb	r1, [r2, r3]
			m_step = smap[y+1][x];								//a最大歩数マップ値を更新
 800f5ac:	79bb      	ldrb	r3, [r7, #6]
 800f5ae:	1c5a      	adds	r2, r3, #1
 800f5b0:	79fb      	ldrb	r3, [r7, #7]
 800f5b2:	4974      	ldr	r1, [pc, #464]	; (800f784 <make_route+0x298>)
 800f5b4:	0112      	lsls	r2, r2, #4
 800f5b6:	4413      	add	r3, r2
 800f5b8:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800f5bc:	807b      	strh	r3, [r7, #2]
			y++;												//a北に進んだのでY座標をインクリメント
 800f5be:	79bb      	ldrb	r3, [r7, #6]
 800f5c0:	3301      	adds	r3, #1
 800f5c2:	71bb      	strb	r3, [r7, #6]
 800f5c4:	e079      	b.n	800f6ba <make_route+0x1ce>
		}
		//----a東を見る----
		else if(!(m_temp & 0x04) && (smap[y][x+1] < m_step)){	//a東側に壁が無く、現在地より小さい歩数マップ値であれば
 800f5c6:	787b      	ldrb	r3, [r7, #1]
 800f5c8:	f003 0304 	and.w	r3, r3, #4
 800f5cc:	2b00      	cmp	r3, #0
 800f5ce:	d123      	bne.n	800f618 <make_route+0x12c>
 800f5d0:	79ba      	ldrb	r2, [r7, #6]
 800f5d2:	79fb      	ldrb	r3, [r7, #7]
 800f5d4:	3301      	adds	r3, #1
 800f5d6:	496b      	ldr	r1, [pc, #428]	; (800f784 <make_route+0x298>)
 800f5d8:	0112      	lsls	r2, r2, #4
 800f5da:	4413      	add	r3, r2
 800f5dc:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800f5e0:	887a      	ldrh	r2, [r7, #2]
 800f5e2:	429a      	cmp	r2, r3
 800f5e4:	d918      	bls.n	800f618 <make_route+0x12c>
			route[i] = (0x01 - mouse.dir) & 0x03;				//route配列に進行方向を記録
 800f5e6:	4b65      	ldr	r3, [pc, #404]	; (800f77c <make_route+0x290>)
 800f5e8:	789b      	ldrb	r3, [r3, #2]
 800f5ea:	b2db      	uxtb	r3, r3
 800f5ec:	f1c3 0301 	rsb	r3, r3, #1
 800f5f0:	b2da      	uxtb	r2, r3
 800f5f2:	88bb      	ldrh	r3, [r7, #4]
 800f5f4:	f002 0203 	and.w	r2, r2, #3
 800f5f8:	b2d1      	uxtb	r1, r2
 800f5fa:	4a61      	ldr	r2, [pc, #388]	; (800f780 <make_route+0x294>)
 800f5fc:	54d1      	strb	r1, [r2, r3]
			m_step = smap[y][x+1];								//a最大歩数マップ値を更新
 800f5fe:	79ba      	ldrb	r2, [r7, #6]
 800f600:	79fb      	ldrb	r3, [r7, #7]
 800f602:	3301      	adds	r3, #1
 800f604:	495f      	ldr	r1, [pc, #380]	; (800f784 <make_route+0x298>)
 800f606:	0112      	lsls	r2, r2, #4
 800f608:	4413      	add	r3, r2
 800f60a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800f60e:	807b      	strh	r3, [r7, #2]
			x++;												//a東に進んだのでX座標をインクリメント
 800f610:	79fb      	ldrb	r3, [r7, #7]
 800f612:	3301      	adds	r3, #1
 800f614:	71fb      	strb	r3, [r7, #7]
 800f616:	e050      	b.n	800f6ba <make_route+0x1ce>
		}
		//----a南を見る----
		else if(!(m_temp & 0x02) && (smap[y-1][x] < m_step)){	//a南側に壁が無く、現在地より小さい歩数マップ値であれば
 800f618:	787b      	ldrb	r3, [r7, #1]
 800f61a:	f003 0302 	and.w	r3, r3, #2
 800f61e:	2b00      	cmp	r3, #0
 800f620:	d123      	bne.n	800f66a <make_route+0x17e>
 800f622:	79bb      	ldrb	r3, [r7, #6]
 800f624:	1e5a      	subs	r2, r3, #1
 800f626:	79fb      	ldrb	r3, [r7, #7]
 800f628:	4956      	ldr	r1, [pc, #344]	; (800f784 <make_route+0x298>)
 800f62a:	0112      	lsls	r2, r2, #4
 800f62c:	4413      	add	r3, r2
 800f62e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800f632:	887a      	ldrh	r2, [r7, #2]
 800f634:	429a      	cmp	r2, r3
 800f636:	d918      	bls.n	800f66a <make_route+0x17e>
			route[i] = (0x02 - mouse.dir) & 0x03;				//route配列に進行方向を記録
 800f638:	4b50      	ldr	r3, [pc, #320]	; (800f77c <make_route+0x290>)
 800f63a:	789b      	ldrb	r3, [r3, #2]
 800f63c:	b2db      	uxtb	r3, r3
 800f63e:	f1c3 0302 	rsb	r3, r3, #2
 800f642:	b2da      	uxtb	r2, r3
 800f644:	88bb      	ldrh	r3, [r7, #4]
 800f646:	f002 0203 	and.w	r2, r2, #3
 800f64a:	b2d1      	uxtb	r1, r2
 800f64c:	4a4c      	ldr	r2, [pc, #304]	; (800f780 <make_route+0x294>)
 800f64e:	54d1      	strb	r1, [r2, r3]
			m_step = smap[y-1][x];								//a最大歩数マップ値を更新
 800f650:	79bb      	ldrb	r3, [r7, #6]
 800f652:	1e5a      	subs	r2, r3, #1
 800f654:	79fb      	ldrb	r3, [r7, #7]
 800f656:	494b      	ldr	r1, [pc, #300]	; (800f784 <make_route+0x298>)
 800f658:	0112      	lsls	r2, r2, #4
 800f65a:	4413      	add	r3, r2
 800f65c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800f660:	807b      	strh	r3, [r7, #2]
			y--;												//a南に進んだのでY座標をデクリメント
 800f662:	79bb      	ldrb	r3, [r7, #6]
 800f664:	3b01      	subs	r3, #1
 800f666:	71bb      	strb	r3, [r7, #6]
 800f668:	e027      	b.n	800f6ba <make_route+0x1ce>
		}
		//----a西を見る----
		else if(!(m_temp & 0x01) && (smap[y][x-1] < m_step)){	//a西側に壁が無く、現在地より小さい歩数マップ値であれば
 800f66a:	787b      	ldrb	r3, [r7, #1]
 800f66c:	f003 0301 	and.w	r3, r3, #1
 800f670:	2b00      	cmp	r3, #0
 800f672:	d122      	bne.n	800f6ba <make_route+0x1ce>
 800f674:	79ba      	ldrb	r2, [r7, #6]
 800f676:	79fb      	ldrb	r3, [r7, #7]
 800f678:	3b01      	subs	r3, #1
 800f67a:	4942      	ldr	r1, [pc, #264]	; (800f784 <make_route+0x298>)
 800f67c:	0112      	lsls	r2, r2, #4
 800f67e:	4413      	add	r3, r2
 800f680:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800f684:	887a      	ldrh	r2, [r7, #2]
 800f686:	429a      	cmp	r2, r3
 800f688:	d917      	bls.n	800f6ba <make_route+0x1ce>
			route[i] = (0x03 - mouse.dir) & 0x03;				//route配列に進行方向を記録
 800f68a:	4b3c      	ldr	r3, [pc, #240]	; (800f77c <make_route+0x290>)
 800f68c:	789b      	ldrb	r3, [r3, #2]
 800f68e:	b2db      	uxtb	r3, r3
 800f690:	f1c3 0303 	rsb	r3, r3, #3
 800f694:	b2da      	uxtb	r2, r3
 800f696:	88bb      	ldrh	r3, [r7, #4]
 800f698:	f002 0203 	and.w	r2, r2, #3
 800f69c:	b2d1      	uxtb	r1, r2
 800f69e:	4a38      	ldr	r2, [pc, #224]	; (800f780 <make_route+0x294>)
 800f6a0:	54d1      	strb	r1, [r2, r3]
			m_step = smap[y][x-1];								//a最大歩数マップ値を更新
 800f6a2:	79ba      	ldrb	r2, [r7, #6]
 800f6a4:	79fb      	ldrb	r3, [r7, #7]
 800f6a6:	3b01      	subs	r3, #1
 800f6a8:	4936      	ldr	r1, [pc, #216]	; (800f784 <make_route+0x298>)
 800f6aa:	0112      	lsls	r2, r2, #4
 800f6ac:	4413      	add	r3, r2
 800f6ae:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800f6b2:	807b      	strh	r3, [r7, #2]
			x--;												//a西に進んだのでX座標をデクリメント
 800f6b4:	79fb      	ldrb	r3, [r7, #7]
 800f6b6:	3b01      	subs	r3, #1
 800f6b8:	71fb      	strb	r3, [r7, #7]
				y--;												//a南に進んだのでY座標をデクリメント
			}*/

		}
		//----a格納データ形式変更----
		switch(route[i]){										//route配列に格納した要素値で分岐
 800f6ba:	88bb      	ldrh	r3, [r7, #4]
 800f6bc:	4a30      	ldr	r2, [pc, #192]	; (800f780 <make_route+0x294>)
 800f6be:	5cd3      	ldrb	r3, [r2, r3]
 800f6c0:	2b03      	cmp	r3, #3
 800f6c2:	d83c      	bhi.n	800f73e <make_route+0x252>
 800f6c4:	a201      	add	r2, pc, #4	; (adr r2, 800f6cc <make_route+0x1e0>)
 800f6c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f6ca:	bf00      	nop
 800f6cc:	0800f6dd 	.word	0x0800f6dd
 800f6d0:	0800f709 	.word	0x0800f709
 800f6d4:	0800f71b 	.word	0x0800f71b
 800f6d8:	0800f72d 	.word	0x0800f72d
		case 0x00:												//a前進する場合
			if(pass_mode < 3){
 800f6dc:	4b2a      	ldr	r3, [pc, #168]	; (800f788 <make_route+0x29c>)
 800f6de:	781b      	ldrb	r3, [r3, #0]
 800f6e0:	2b02      	cmp	r3, #2
 800f6e2:	d804      	bhi.n	800f6ee <make_route+0x202>
				route[i] = 0x88;									//a格納データ形式を変更
 800f6e4:	88bb      	ldrh	r3, [r7, #4]
 800f6e6:	4a26      	ldr	r2, [pc, #152]	; (800f780 <make_route+0x294>)
 800f6e8:	2188      	movs	r1, #136	; 0x88
 800f6ea:	54d1      	strb	r1, [r2, r3]
			}else{
				route[i] = 0x77;
				route[i+1] = 0x77;
				i++;
			}
			break;
 800f6ec:	e02c      	b.n	800f748 <make_route+0x25c>
				route[i] = 0x77;
 800f6ee:	88bb      	ldrh	r3, [r7, #4]
 800f6f0:	4a23      	ldr	r2, [pc, #140]	; (800f780 <make_route+0x294>)
 800f6f2:	2177      	movs	r1, #119	; 0x77
 800f6f4:	54d1      	strb	r1, [r2, r3]
				route[i+1] = 0x77;
 800f6f6:	88bb      	ldrh	r3, [r7, #4]
 800f6f8:	3301      	adds	r3, #1
 800f6fa:	4a21      	ldr	r2, [pc, #132]	; (800f780 <make_route+0x294>)
 800f6fc:	2177      	movs	r1, #119	; 0x77
 800f6fe:	54d1      	strb	r1, [r2, r3]
				i++;
 800f700:	88bb      	ldrh	r3, [r7, #4]
 800f702:	3301      	adds	r3, #1
 800f704:	80bb      	strh	r3, [r7, #4]
			break;
 800f706:	e01f      	b.n	800f748 <make_route+0x25c>
		case 0x01:												//a右折する場合
			turn_dir(DIR_TURN_R90, 0);								//a内部情報の方向を90度右回転
 800f708:	2100      	movs	r1, #0
 800f70a:	2001      	movs	r0, #1
 800f70c:	f7ff fa66 	bl	800ebdc <turn_dir>
			route[i] = 0x44;									//a格納データ形式を変更
 800f710:	88bb      	ldrh	r3, [r7, #4]
 800f712:	4a1b      	ldr	r2, [pc, #108]	; (800f780 <make_route+0x294>)
 800f714:	2144      	movs	r1, #68	; 0x44
 800f716:	54d1      	strb	r1, [r2, r3]
			break;
 800f718:	e016      	b.n	800f748 <make_route+0x25c>
		case 0x02:												//Uターンする場合
			turn_dir(DIR_TURN_180, 0);								//a内部情報の方向を180度回転
 800f71a:	2100      	movs	r1, #0
 800f71c:	2002      	movs	r0, #2
 800f71e:	f7ff fa5d 	bl	800ebdc <turn_dir>
			route[i] = 0x22;									//a格納データ形式を変更
 800f722:	88bb      	ldrh	r3, [r7, #4]
 800f724:	4a16      	ldr	r2, [pc, #88]	; (800f780 <make_route+0x294>)
 800f726:	2122      	movs	r1, #34	; 0x22
 800f728:	54d1      	strb	r1, [r2, r3]
			break;
 800f72a:	e00d      	b.n	800f748 <make_route+0x25c>
		case 0x03:												//a左折する場合
			turn_dir(DIR_TURN_L90, 0);								//a内部情報の方向を90度左回転
 800f72c:	2100      	movs	r1, #0
 800f72e:	20ff      	movs	r0, #255	; 0xff
 800f730:	f7ff fa54 	bl	800ebdc <turn_dir>
			route[i] = 0x11;									//a格納データ形式を変更
 800f734:	88bb      	ldrh	r3, [r7, #4]
 800f736:	4a12      	ldr	r2, [pc, #72]	; (800f780 <make_route+0x294>)
 800f738:	2111      	movs	r1, #17
 800f73a:	54d1      	strb	r1, [r2, r3]
			break;
 800f73c:	e004      	b.n	800f748 <make_route+0x25c>
		default:												//aそれ以外の場合
			route[i] = 0x00;									//a格納データ形式を変更
 800f73e:	88bb      	ldrh	r3, [r7, #4]
 800f740:	4a0f      	ldr	r2, [pc, #60]	; (800f780 <make_route+0x294>)
 800f742:	2100      	movs	r1, #0
 800f744:	54d1      	strb	r1, [r2, r3]
			break;
 800f746:	bf00      	nop
		}
		i++;													//aカウンタをインクリメント
 800f748:	88bb      	ldrh	r3, [r7, #4]
 800f74a:	3301      	adds	r3, #1
 800f74c:	80bb      	strh	r3, [r7, #4]
	}while(smap[y][x] != 0);									//a進んだ先の歩数マップ値が0（=ゴール）になるまで実行
 800f74e:	79ba      	ldrb	r2, [r7, #6]
 800f750:	79fb      	ldrb	r3, [r7, #7]
 800f752:	490c      	ldr	r1, [pc, #48]	; (800f784 <make_route+0x298>)
 800f754:	0112      	lsls	r2, r2, #4
 800f756:	4413      	add	r3, r2
 800f758:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800f75c:	2b00      	cmp	r3, #0
 800f75e:	f47f aef8 	bne.w	800f552 <make_route+0x66>
	goal_x = x;
 800f762:	4a0c      	ldr	r2, [pc, #48]	; (800f794 <make_route+0x2a8>)
 800f764:	79fb      	ldrb	r3, [r7, #7]
 800f766:	7013      	strb	r3, [r2, #0]
	goal_y = y;
 800f768:	4a0b      	ldr	r2, [pc, #44]	; (800f798 <make_route+0x2ac>)
 800f76a:	79bb      	ldrb	r3, [r7, #6]
 800f76c:	7013      	strb	r3, [r2, #0]
	mouse.dir = dir_temp;										//dir_tempに退避させた値をmouse.dirにリストア
 800f76e:	4a03      	ldr	r2, [pc, #12]	; (800f77c <make_route+0x290>)
 800f770:	783b      	ldrb	r3, [r7, #0]
 800f772:	7093      	strb	r3, [r2, #2]
}
 800f774:	bf00      	nop
 800f776:	3708      	adds	r7, #8
 800f778:	46bd      	mov	sp, r7
 800f77a:	bd80      	pop	{r7, pc}
 800f77c:	20000c0c 	.word	0x20000c0c
 800f780:	20000c54 	.word	0x20000c54
 800f784:	20000d60 	.word	0x20000d60
 800f788:	20000457 	.word	0x20000457
 800f78c:	200001ac 	.word	0x200001ac
 800f790:	20000f68 	.word	0x20000f68
 800f794:	20000bb0 	.word	0x20000bb0
 800f798:	20000b4c 	.word	0x20000b4c

0800f79c <find_pregoal>:
//	未探索壁を含む＆現在座標から最も近いマス(=仮goal)を探す
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void find_pregoal()
{
 800f79c:	b480      	push	{r7}
 800f79e:	b085      	sub	sp, #20
 800f7a0:	af00      	add	r7, sp, #0
	//====変数宣言====
	uint8_t x, y;															//for文用変数
	uint8_t m_temp;															//マップデータ一時保持
	//uint8_t m_temp_sample[16];
	uint8_t break_flag = 0;													//未知壁マスを見つけた時のループ脱出フラグ
 800f7a2:	2300      	movs	r3, #0
 800f7a4:	737b      	strb	r3, [r7, #13]

	//====歩数マップのクリア====
	for (y = 0; y <= 0x0f; y++) {											//各Y座標で実行
 800f7a6:	2300      	movs	r3, #0
 800f7a8:	73bb      	strb	r3, [r7, #14]
 800f7aa:	e014      	b.n	800f7d6 <find_pregoal+0x3a>
		for (x = 0; x <= 0x0f; x++) {										//各X座標で実行
 800f7ac:	2300      	movs	r3, #0
 800f7ae:	73fb      	strb	r3, [r7, #15]
 800f7b0:	e00b      	b.n	800f7ca <find_pregoal+0x2e>
			smap[y][x] = 0x03e7;											//未記入部分は歩数最大とする
 800f7b2:	7bba      	ldrb	r2, [r7, #14]
 800f7b4:	7bfb      	ldrb	r3, [r7, #15]
 800f7b6:	49a0      	ldr	r1, [pc, #640]	; (800fa38 <find_pregoal+0x29c>)
 800f7b8:	0112      	lsls	r2, r2, #4
 800f7ba:	4413      	add	r3, r2
 800f7bc:	f240 32e7 	movw	r2, #999	; 0x3e7
 800f7c0:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for (x = 0; x <= 0x0f; x++) {										//各X座標で実行
 800f7c4:	7bfb      	ldrb	r3, [r7, #15]
 800f7c6:	3301      	adds	r3, #1
 800f7c8:	73fb      	strb	r3, [r7, #15]
 800f7ca:	7bfb      	ldrb	r3, [r7, #15]
 800f7cc:	2b0f      	cmp	r3, #15
 800f7ce:	d9f0      	bls.n	800f7b2 <find_pregoal+0x16>
	for (y = 0; y <= 0x0f; y++) {											//各Y座標で実行
 800f7d0:	7bbb      	ldrb	r3, [r7, #14]
 800f7d2:	3301      	adds	r3, #1
 800f7d4:	73bb      	strb	r3, [r7, #14]
 800f7d6:	7bbb      	ldrb	r3, [r7, #14]
 800f7d8:	2b0f      	cmp	r3, #15
 800f7da:	d9e7      	bls.n	800f7ac <find_pregoal+0x10>
		}
	}

	//====探索完了フラグのクリア====
	MF2.FLAG.ALLMAP = 0;
 800f7dc:	4a97      	ldr	r2, [pc, #604]	; (800fa3c <find_pregoal+0x2a0>)
 800f7de:	8813      	ldrh	r3, [r2, #0]
 800f7e0:	f36f 0382 	bfc	r3, #2, #1
 800f7e4:	8013      	strh	r3, [r2, #0]

	//====現在座標を0にする====
	smap[mouse.y][mouse.x] = 0;
 800f7e6:	4b96      	ldr	r3, [pc, #600]	; (800fa40 <find_pregoal+0x2a4>)
 800f7e8:	785b      	ldrb	r3, [r3, #1]
 800f7ea:	b2db      	uxtb	r3, r3
 800f7ec:	4618      	mov	r0, r3
 800f7ee:	4b94      	ldr	r3, [pc, #592]	; (800fa40 <find_pregoal+0x2a4>)
 800f7f0:	781b      	ldrb	r3, [r3, #0]
 800f7f2:	b2db      	uxtb	r3, r3
 800f7f4:	4619      	mov	r1, r3
 800f7f6:	4a90      	ldr	r2, [pc, #576]	; (800fa38 <find_pregoal+0x29c>)
 800f7f8:	0103      	lsls	r3, r0, #4
 800f7fa:	440b      	add	r3, r1
 800f7fc:	2100      	movs	r1, #0
 800f7fe:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

	//====歩数カウンタを0にする====
	m_step = 0;																//現在記入した最大の歩数となる
 800f802:	4b90      	ldr	r3, [pc, #576]	; (800fa44 <find_pregoal+0x2a8>)
 800f804:	2200      	movs	r2, #0
 800f806:	801a      	strh	r2, [r3, #0]

	//====歩数カウンタの重みづけ====
	int straight = 3;
 800f808:	2303      	movs	r3, #3
 800f80a:	60bb      	str	r3, [r7, #8]
	int turn = 1;
 800f80c:	2301      	movs	r3, #1
 800f80e:	607b      	str	r3, [r7, #4]

	//====自分の座標にたどり着くまでループ====
	do {
		//----マップ全域を捜索----
		for (y = 0; y <= 0x0f; y++) {										//各Y座標で実行
 800f810:	2300      	movs	r3, #0
 800f812:	73bb      	strb	r3, [r7, #14]
 800f814:	e180      	b.n	800fb18 <find_pregoal+0x37c>
			for (x = 0; x <= 0x0f; x++) {									//各X座標で実行
 800f816:	2300      	movs	r3, #0
 800f818:	73fb      	strb	r3, [r7, #15]
 800f81a:	e173      	b.n	800fb04 <find_pregoal+0x368>
				//----現在最大の歩数を発見したとき----
				if (smap[y][x] == m_step) {									//歩数格納変数m_stepの値が現在最大の歩数のとき
 800f81c:	7bba      	ldrb	r2, [r7, #14]
 800f81e:	7bfb      	ldrb	r3, [r7, #15]
 800f820:	4985      	ldr	r1, [pc, #532]	; (800fa38 <find_pregoal+0x29c>)
 800f822:	0112      	lsls	r2, r2, #4
 800f824:	4413      	add	r3, r2
 800f826:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 800f82a:	4b86      	ldr	r3, [pc, #536]	; (800fa44 <find_pregoal+0x2a8>)
 800f82c:	881b      	ldrh	r3, [r3, #0]
 800f82e:	429a      	cmp	r2, r3
 800f830:	f040 8165 	bne.w	800fafe <find_pregoal+0x362>
					m_temp = map[y][x];										//map配列からマップデータを取り出す
 800f834:	7bba      	ldrb	r2, [r7, #14]
 800f836:	7bfb      	ldrb	r3, [r7, #15]
 800f838:	4983      	ldr	r1, [pc, #524]	; (800fa48 <find_pregoal+0x2ac>)
 800f83a:	0112      	lsls	r2, r2, #4
 800f83c:	440a      	add	r2, r1
 800f83e:	4413      	add	r3, r2
 800f840:	781b      	ldrb	r3, [r3, #0]
 800f842:	70fb      	strb	r3, [r7, #3]
					//----北壁についての処理----
					if (!(m_temp & 0x08) && y != 0x0f) {					//北壁がなく現在最北端でないとき
 800f844:	78fb      	ldrb	r3, [r7, #3]
 800f846:	f003 0308 	and.w	r3, r3, #8
 800f84a:	2b00      	cmp	r3, #0
 800f84c:	d14d      	bne.n	800f8ea <find_pregoal+0x14e>
 800f84e:	7bbb      	ldrb	r3, [r7, #14]
 800f850:	2b0f      	cmp	r3, #15
 800f852:	d04a      	beq.n	800f8ea <find_pregoal+0x14e>
						if (smap[y + 1][x] == 0x03e7) {						//北側が未記入なら
 800f854:	7bbb      	ldrb	r3, [r7, #14]
 800f856:	1c5a      	adds	r2, r3, #1
 800f858:	7bfb      	ldrb	r3, [r7, #15]
 800f85a:	4977      	ldr	r1, [pc, #476]	; (800fa38 <find_pregoal+0x29c>)
 800f85c:	0112      	lsls	r2, r2, #4
 800f85e:	4413      	add	r3, r2
 800f860:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800f864:	f240 32e7 	movw	r2, #999	; 0x3e7
 800f868:	4293      	cmp	r3, r2
 800f86a:	d13e      	bne.n	800f8ea <find_pregoal+0x14e>
							smap[y + 1][x] = smap[y][x] + turn;				//曲線分インクリメントした値を次のマスの歩数マップに書き込む
 800f86c:	7bba      	ldrb	r2, [r7, #14]
 800f86e:	7bfb      	ldrb	r3, [r7, #15]
 800f870:	4971      	ldr	r1, [pc, #452]	; (800fa38 <find_pregoal+0x29c>)
 800f872:	0112      	lsls	r2, r2, #4
 800f874:	4413      	add	r3, r2
 800f876:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 800f87a:	687b      	ldr	r3, [r7, #4]
 800f87c:	b299      	uxth	r1, r3
 800f87e:	7bbb      	ldrb	r3, [r7, #14]
 800f880:	1c5a      	adds	r2, r3, #1
 800f882:	7bfb      	ldrb	r3, [r7, #15]
 800f884:	4401      	add	r1, r0
 800f886:	b288      	uxth	r0, r1
 800f888:	496b      	ldr	r1, [pc, #428]	; (800fa38 <find_pregoal+0x29c>)
 800f88a:	0112      	lsls	r2, r2, #4
 800f88c:	4413      	add	r3, r2
 800f88e:	4602      	mov	r2, r0
 800f890:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
							if (((map[y + 1][x] & 0x0f ) << 4) != (map[y + 1][x] & 0xf0)) {		//map内の上位4bitと下位4bitが異なる場合
 800f894:	7bbb      	ldrb	r3, [r7, #14]
 800f896:	1c5a      	adds	r2, r3, #1
 800f898:	7bfb      	ldrb	r3, [r7, #15]
 800f89a:	496b      	ldr	r1, [pc, #428]	; (800fa48 <find_pregoal+0x2ac>)
 800f89c:	0112      	lsls	r2, r2, #4
 800f89e:	440a      	add	r2, r1
 800f8a0:	4413      	add	r3, r2
 800f8a2:	781b      	ldrb	r3, [r3, #0]
 800f8a4:	011b      	lsls	r3, r3, #4
 800f8a6:	b2da      	uxtb	r2, r3
 800f8a8:	7bbb      	ldrb	r3, [r7, #14]
 800f8aa:	1c59      	adds	r1, r3, #1
 800f8ac:	7bfb      	ldrb	r3, [r7, #15]
 800f8ae:	4866      	ldr	r0, [pc, #408]	; (800fa48 <find_pregoal+0x2ac>)
 800f8b0:	0109      	lsls	r1, r1, #4
 800f8b2:	4401      	add	r1, r0
 800f8b4:	440b      	add	r3, r1
 800f8b6:	781b      	ldrb	r3, [r3, #0]
 800f8b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800f8bc:	429a      	cmp	r2, r3
 800f8be:	d014      	beq.n	800f8ea <find_pregoal+0x14e>
								break_flag = 1;								//for文を抜けるフラグを立てて
 800f8c0:	2301      	movs	r3, #1
 800f8c2:	737b      	strb	r3, [r7, #13]
								m_step2 = smap[y + 1][x];					//仮goalの歩数を記録
 800f8c4:	7bbb      	ldrb	r3, [r7, #14]
 800f8c6:	1c5a      	adds	r2, r3, #1
 800f8c8:	7bfb      	ldrb	r3, [r7, #15]
 800f8ca:	495b      	ldr	r1, [pc, #364]	; (800fa38 <find_pregoal+0x29c>)
 800f8cc:	0112      	lsls	r2, r2, #4
 800f8ce:	4413      	add	r3, r2
 800f8d0:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 800f8d4:	4b5d      	ldr	r3, [pc, #372]	; (800fa4c <find_pregoal+0x2b0>)
 800f8d6:	801a      	strh	r2, [r3, #0]
								pregoal_x = x;
 800f8d8:	4a5d      	ldr	r2, [pc, #372]	; (800fa50 <find_pregoal+0x2b4>)
 800f8da:	7bfb      	ldrb	r3, [r7, #15]
 800f8dc:	7013      	strb	r3, [r2, #0]
								pregoal_y = y + 1;							//仮goalの座標を記録
 800f8de:	7bbb      	ldrb	r3, [r7, #14]
 800f8e0:	3301      	adds	r3, #1
 800f8e2:	b2da      	uxtb	r2, r3
 800f8e4:	4b5b      	ldr	r3, [pc, #364]	; (800fa54 <find_pregoal+0x2b8>)
 800f8e6:	701a      	strb	r2, [r3, #0]
								break;
 800f8e8:	e110      	b.n	800fb0c <find_pregoal+0x370>
							}
						}
					}
					//----東壁についての処理----
					if (!(m_temp & 0x04) && x != 0x0f) {					//東壁がなく現在最東端でないとき
 800f8ea:	78fb      	ldrb	r3, [r7, #3]
 800f8ec:	f003 0304 	and.w	r3, r3, #4
 800f8f0:	2b00      	cmp	r3, #0
 800f8f2:	d14d      	bne.n	800f990 <find_pregoal+0x1f4>
 800f8f4:	7bfb      	ldrb	r3, [r7, #15]
 800f8f6:	2b0f      	cmp	r3, #15
 800f8f8:	d04a      	beq.n	800f990 <find_pregoal+0x1f4>
						if (smap[y][x + 1] == 0x03e7) {						//東側が未記入なら
 800f8fa:	7bba      	ldrb	r2, [r7, #14]
 800f8fc:	7bfb      	ldrb	r3, [r7, #15]
 800f8fe:	3301      	adds	r3, #1
 800f900:	494d      	ldr	r1, [pc, #308]	; (800fa38 <find_pregoal+0x29c>)
 800f902:	0112      	lsls	r2, r2, #4
 800f904:	4413      	add	r3, r2
 800f906:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800f90a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800f90e:	4293      	cmp	r3, r2
 800f910:	d13e      	bne.n	800f990 <find_pregoal+0x1f4>
							smap[y][x + 1] = smap[y][x] + turn;				//曲線分インクリメントした値を次のマスの歩数マップに書き込む
 800f912:	7bba      	ldrb	r2, [r7, #14]
 800f914:	7bfb      	ldrb	r3, [r7, #15]
 800f916:	4948      	ldr	r1, [pc, #288]	; (800fa38 <find_pregoal+0x29c>)
 800f918:	0112      	lsls	r2, r2, #4
 800f91a:	4413      	add	r3, r2
 800f91c:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 800f920:	687b      	ldr	r3, [r7, #4]
 800f922:	b299      	uxth	r1, r3
 800f924:	7bba      	ldrb	r2, [r7, #14]
 800f926:	7bfb      	ldrb	r3, [r7, #15]
 800f928:	3301      	adds	r3, #1
 800f92a:	4401      	add	r1, r0
 800f92c:	b288      	uxth	r0, r1
 800f92e:	4942      	ldr	r1, [pc, #264]	; (800fa38 <find_pregoal+0x29c>)
 800f930:	0112      	lsls	r2, r2, #4
 800f932:	4413      	add	r3, r2
 800f934:	4602      	mov	r2, r0
 800f936:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
							if (((map[y][x + 1] & 0x0f) << 4) != (map[y][x + 1] & 0xf0)) {		//map内の上位4bitと下位4bitが異なる場合
 800f93a:	7bba      	ldrb	r2, [r7, #14]
 800f93c:	7bfb      	ldrb	r3, [r7, #15]
 800f93e:	3301      	adds	r3, #1
 800f940:	4941      	ldr	r1, [pc, #260]	; (800fa48 <find_pregoal+0x2ac>)
 800f942:	0112      	lsls	r2, r2, #4
 800f944:	440a      	add	r2, r1
 800f946:	4413      	add	r3, r2
 800f948:	781b      	ldrb	r3, [r3, #0]
 800f94a:	011b      	lsls	r3, r3, #4
 800f94c:	b2da      	uxtb	r2, r3
 800f94e:	7bb9      	ldrb	r1, [r7, #14]
 800f950:	7bfb      	ldrb	r3, [r7, #15]
 800f952:	3301      	adds	r3, #1
 800f954:	483c      	ldr	r0, [pc, #240]	; (800fa48 <find_pregoal+0x2ac>)
 800f956:	0109      	lsls	r1, r1, #4
 800f958:	4401      	add	r1, r0
 800f95a:	440b      	add	r3, r1
 800f95c:	781b      	ldrb	r3, [r3, #0]
 800f95e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800f962:	429a      	cmp	r2, r3
 800f964:	d014      	beq.n	800f990 <find_pregoal+0x1f4>
								break_flag = 1;								//for文を抜けるフラグを立てて
 800f966:	2301      	movs	r3, #1
 800f968:	737b      	strb	r3, [r7, #13]
								m_step2 = smap[y][x + 1];					//仮ゴールの歩数を記録
 800f96a:	7bba      	ldrb	r2, [r7, #14]
 800f96c:	7bfb      	ldrb	r3, [r7, #15]
 800f96e:	3301      	adds	r3, #1
 800f970:	4931      	ldr	r1, [pc, #196]	; (800fa38 <find_pregoal+0x29c>)
 800f972:	0112      	lsls	r2, r2, #4
 800f974:	4413      	add	r3, r2
 800f976:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 800f97a:	4b34      	ldr	r3, [pc, #208]	; (800fa4c <find_pregoal+0x2b0>)
 800f97c:	801a      	strh	r2, [r3, #0]
								pregoal_x = x + 1;
 800f97e:	7bfb      	ldrb	r3, [r7, #15]
 800f980:	3301      	adds	r3, #1
 800f982:	b2da      	uxtb	r2, r3
 800f984:	4b32      	ldr	r3, [pc, #200]	; (800fa50 <find_pregoal+0x2b4>)
 800f986:	701a      	strb	r2, [r3, #0]
								pregoal_y = y;								//仮goalの座標を記録
 800f988:	4a32      	ldr	r2, [pc, #200]	; (800fa54 <find_pregoal+0x2b8>)
 800f98a:	7bbb      	ldrb	r3, [r7, #14]
 800f98c:	7013      	strb	r3, [r2, #0]
								break;
 800f98e:	e0bd      	b.n	800fb0c <find_pregoal+0x370>
							}
						}
					}
					//----南壁についての処理----
					if (!(m_temp & 0x02) && y != 0) {						//南壁がなく現在最南端でないとき
 800f990:	78fb      	ldrb	r3, [r7, #3]
 800f992:	f003 0302 	and.w	r3, r3, #2
 800f996:	2b00      	cmp	r3, #0
 800f998:	d15e      	bne.n	800fa58 <find_pregoal+0x2bc>
 800f99a:	7bbb      	ldrb	r3, [r7, #14]
 800f99c:	2b00      	cmp	r3, #0
 800f99e:	d05b      	beq.n	800fa58 <find_pregoal+0x2bc>
						if (smap[y - 1][x] == 0x03e7) {						//南側が未記入なら
 800f9a0:	7bbb      	ldrb	r3, [r7, #14]
 800f9a2:	1e5a      	subs	r2, r3, #1
 800f9a4:	7bfb      	ldrb	r3, [r7, #15]
 800f9a6:	4924      	ldr	r1, [pc, #144]	; (800fa38 <find_pregoal+0x29c>)
 800f9a8:	0112      	lsls	r2, r2, #4
 800f9aa:	4413      	add	r3, r2
 800f9ac:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800f9b0:	f240 32e7 	movw	r2, #999	; 0x3e7
 800f9b4:	4293      	cmp	r3, r2
 800f9b6:	d14f      	bne.n	800fa58 <find_pregoal+0x2bc>
							smap[y - 1][x] = smap[y][x] + turn;				//曲線分インクリメントした値を次のマスの歩数マップに書き込む
 800f9b8:	7bba      	ldrb	r2, [r7, #14]
 800f9ba:	7bfb      	ldrb	r3, [r7, #15]
 800f9bc:	491e      	ldr	r1, [pc, #120]	; (800fa38 <find_pregoal+0x29c>)
 800f9be:	0112      	lsls	r2, r2, #4
 800f9c0:	4413      	add	r3, r2
 800f9c2:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 800f9c6:	687b      	ldr	r3, [r7, #4]
 800f9c8:	b299      	uxth	r1, r3
 800f9ca:	7bbb      	ldrb	r3, [r7, #14]
 800f9cc:	1e5a      	subs	r2, r3, #1
 800f9ce:	7bfb      	ldrb	r3, [r7, #15]
 800f9d0:	4401      	add	r1, r0
 800f9d2:	b288      	uxth	r0, r1
 800f9d4:	4918      	ldr	r1, [pc, #96]	; (800fa38 <find_pregoal+0x29c>)
 800f9d6:	0112      	lsls	r2, r2, #4
 800f9d8:	4413      	add	r3, r2
 800f9da:	4602      	mov	r2, r0
 800f9dc:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
							if (((map[y - 1][x] & 0x0f) << 4) != (map[y - 1][x] & 0xf0)) {		//map内の上位4bitと下位4bitが異なる場合
 800f9e0:	7bbb      	ldrb	r3, [r7, #14]
 800f9e2:	1e5a      	subs	r2, r3, #1
 800f9e4:	7bfb      	ldrb	r3, [r7, #15]
 800f9e6:	4918      	ldr	r1, [pc, #96]	; (800fa48 <find_pregoal+0x2ac>)
 800f9e8:	0112      	lsls	r2, r2, #4
 800f9ea:	440a      	add	r2, r1
 800f9ec:	4413      	add	r3, r2
 800f9ee:	781b      	ldrb	r3, [r3, #0]
 800f9f0:	011b      	lsls	r3, r3, #4
 800f9f2:	b2da      	uxtb	r2, r3
 800f9f4:	7bbb      	ldrb	r3, [r7, #14]
 800f9f6:	1e59      	subs	r1, r3, #1
 800f9f8:	7bfb      	ldrb	r3, [r7, #15]
 800f9fa:	4813      	ldr	r0, [pc, #76]	; (800fa48 <find_pregoal+0x2ac>)
 800f9fc:	0109      	lsls	r1, r1, #4
 800f9fe:	4401      	add	r1, r0
 800fa00:	440b      	add	r3, r1
 800fa02:	781b      	ldrb	r3, [r3, #0]
 800fa04:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800fa08:	429a      	cmp	r2, r3
 800fa0a:	d025      	beq.n	800fa58 <find_pregoal+0x2bc>
								break_flag = 1;								//for文を抜けるフラグを立てて
 800fa0c:	2301      	movs	r3, #1
 800fa0e:	737b      	strb	r3, [r7, #13]
								m_step2 = smap[y - 1][x];					//仮ゴールの歩数を記録
 800fa10:	7bbb      	ldrb	r3, [r7, #14]
 800fa12:	1e5a      	subs	r2, r3, #1
 800fa14:	7bfb      	ldrb	r3, [r7, #15]
 800fa16:	4908      	ldr	r1, [pc, #32]	; (800fa38 <find_pregoal+0x29c>)
 800fa18:	0112      	lsls	r2, r2, #4
 800fa1a:	4413      	add	r3, r2
 800fa1c:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 800fa20:	4b0a      	ldr	r3, [pc, #40]	; (800fa4c <find_pregoal+0x2b0>)
 800fa22:	801a      	strh	r2, [r3, #0]
								pregoal_x = x;
 800fa24:	4a0a      	ldr	r2, [pc, #40]	; (800fa50 <find_pregoal+0x2b4>)
 800fa26:	7bfb      	ldrb	r3, [r7, #15]
 800fa28:	7013      	strb	r3, [r2, #0]
								pregoal_y = y - 1;							//仮goalの座標を記録
 800fa2a:	7bbb      	ldrb	r3, [r7, #14]
 800fa2c:	3b01      	subs	r3, #1
 800fa2e:	b2da      	uxtb	r2, r3
 800fa30:	4b08      	ldr	r3, [pc, #32]	; (800fa54 <find_pregoal+0x2b8>)
 800fa32:	701a      	strb	r2, [r3, #0]
								break;
 800fa34:	e06a      	b.n	800fb0c <find_pregoal+0x370>
 800fa36:	bf00      	nop
 800fa38:	20000d60 	.word	0x20000d60
 800fa3c:	20000f64 	.word	0x20000f64
 800fa40:	20000c0c 	.word	0x20000c0c
 800fa44:	2000034e 	.word	0x2000034e
 800fa48:	200001ac 	.word	0x200001ac
 800fa4c:	20000c04 	.word	0x20000c04
 800fa50:	20000d5c 	.word	0x20000d5c
 800fa54:	200012a1 	.word	0x200012a1
							}
						}
					}
					//----西壁についての処理----
					if (!(m_temp & 0x01) && x != 0) {						//西壁がなく現在最西端でないとき
 800fa58:	78fb      	ldrb	r3, [r7, #3]
 800fa5a:	f003 0301 	and.w	r3, r3, #1
 800fa5e:	2b00      	cmp	r3, #0
 800fa60:	d14d      	bne.n	800fafe <find_pregoal+0x362>
 800fa62:	7bfb      	ldrb	r3, [r7, #15]
 800fa64:	2b00      	cmp	r3, #0
 800fa66:	d04a      	beq.n	800fafe <find_pregoal+0x362>
						if (smap[y][x - 1] == 0x03e7) {						//西側が未記入なら
 800fa68:	7bba      	ldrb	r2, [r7, #14]
 800fa6a:	7bfb      	ldrb	r3, [r7, #15]
 800fa6c:	3b01      	subs	r3, #1
 800fa6e:	493e      	ldr	r1, [pc, #248]	; (800fb68 <find_pregoal+0x3cc>)
 800fa70:	0112      	lsls	r2, r2, #4
 800fa72:	4413      	add	r3, r2
 800fa74:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800fa78:	f240 32e7 	movw	r2, #999	; 0x3e7
 800fa7c:	4293      	cmp	r3, r2
 800fa7e:	d13e      	bne.n	800fafe <find_pregoal+0x362>
							smap[y][x - 1] = smap[y][x] + turn;				//次の歩数を書き込む
 800fa80:	7bba      	ldrb	r2, [r7, #14]
 800fa82:	7bfb      	ldrb	r3, [r7, #15]
 800fa84:	4938      	ldr	r1, [pc, #224]	; (800fb68 <find_pregoal+0x3cc>)
 800fa86:	0112      	lsls	r2, r2, #4
 800fa88:	4413      	add	r3, r2
 800fa8a:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 800fa8e:	687b      	ldr	r3, [r7, #4]
 800fa90:	b299      	uxth	r1, r3
 800fa92:	7bba      	ldrb	r2, [r7, #14]
 800fa94:	7bfb      	ldrb	r3, [r7, #15]
 800fa96:	3b01      	subs	r3, #1
 800fa98:	4401      	add	r1, r0
 800fa9a:	b288      	uxth	r0, r1
 800fa9c:	4932      	ldr	r1, [pc, #200]	; (800fb68 <find_pregoal+0x3cc>)
 800fa9e:	0112      	lsls	r2, r2, #4
 800faa0:	4413      	add	r3, r2
 800faa2:	4602      	mov	r2, r0
 800faa4:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
							if (((map[y][x - 1] & 0x0f) << 4) != (map[y][x - 1] & 0xf0)) {		//map内の上位4bitと下位4bitが異なる場合
 800faa8:	7bba      	ldrb	r2, [r7, #14]
 800faaa:	7bfb      	ldrb	r3, [r7, #15]
 800faac:	3b01      	subs	r3, #1
 800faae:	492f      	ldr	r1, [pc, #188]	; (800fb6c <find_pregoal+0x3d0>)
 800fab0:	0112      	lsls	r2, r2, #4
 800fab2:	440a      	add	r2, r1
 800fab4:	4413      	add	r3, r2
 800fab6:	781b      	ldrb	r3, [r3, #0]
 800fab8:	011b      	lsls	r3, r3, #4
 800faba:	b2da      	uxtb	r2, r3
 800fabc:	7bb9      	ldrb	r1, [r7, #14]
 800fabe:	7bfb      	ldrb	r3, [r7, #15]
 800fac0:	3b01      	subs	r3, #1
 800fac2:	482a      	ldr	r0, [pc, #168]	; (800fb6c <find_pregoal+0x3d0>)
 800fac4:	0109      	lsls	r1, r1, #4
 800fac6:	4401      	add	r1, r0
 800fac8:	440b      	add	r3, r1
 800faca:	781b      	ldrb	r3, [r3, #0]
 800facc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800fad0:	429a      	cmp	r2, r3
 800fad2:	d014      	beq.n	800fafe <find_pregoal+0x362>
								break_flag = 1;								//for文を抜けるフラグを立てて
 800fad4:	2301      	movs	r3, #1
 800fad6:	737b      	strb	r3, [r7, #13]
								m_step2 = smap[y][x - 1];					//仮ゴールの歩数を記録
 800fad8:	7bba      	ldrb	r2, [r7, #14]
 800fada:	7bfb      	ldrb	r3, [r7, #15]
 800fadc:	3b01      	subs	r3, #1
 800fade:	4922      	ldr	r1, [pc, #136]	; (800fb68 <find_pregoal+0x3cc>)
 800fae0:	0112      	lsls	r2, r2, #4
 800fae2:	4413      	add	r3, r2
 800fae4:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 800fae8:	4b21      	ldr	r3, [pc, #132]	; (800fb70 <find_pregoal+0x3d4>)
 800faea:	801a      	strh	r2, [r3, #0]
								pregoal_x = x - 1;
 800faec:	7bfb      	ldrb	r3, [r7, #15]
 800faee:	3b01      	subs	r3, #1
 800faf0:	b2da      	uxtb	r2, r3
 800faf2:	4b20      	ldr	r3, [pc, #128]	; (800fb74 <find_pregoal+0x3d8>)
 800faf4:	701a      	strb	r2, [r3, #0]
								pregoal_y = y;								//仮goalの座標を記録
 800faf6:	4a20      	ldr	r2, [pc, #128]	; (800fb78 <find_pregoal+0x3dc>)
 800faf8:	7bbb      	ldrb	r3, [r7, #14]
 800fafa:	7013      	strb	r3, [r2, #0]
								break;							}
 800fafc:	e006      	b.n	800fb0c <find_pregoal+0x370>
			for (x = 0; x <= 0x0f; x++) {									//各X座標で実行
 800fafe:	7bfb      	ldrb	r3, [r7, #15]
 800fb00:	3301      	adds	r3, #1
 800fb02:	73fb      	strb	r3, [r7, #15]
 800fb04:	7bfb      	ldrb	r3, [r7, #15]
 800fb06:	2b0f      	cmp	r3, #15
 800fb08:	f67f ae88 	bls.w	800f81c <find_pregoal+0x80>
						}
					}
				}
			}
			if (break_flag) break;		//map内の上位4bitと下位4bitが異なる場合、for文を抜ける
 800fb0c:	7b7b      	ldrb	r3, [r7, #13]
 800fb0e:	2b00      	cmp	r3, #0
 800fb10:	d107      	bne.n	800fb22 <find_pregoal+0x386>
		for (y = 0; y <= 0x0f; y++) {										//各Y座標で実行
 800fb12:	7bbb      	ldrb	r3, [r7, #14]
 800fb14:	3301      	adds	r3, #1
 800fb16:	73bb      	strb	r3, [r7, #14]
 800fb18:	7bbb      	ldrb	r3, [r7, #14]
 800fb1a:	2b0f      	cmp	r3, #15
 800fb1c:	f67f ae7b 	bls.w	800f816 <find_pregoal+0x7a>
 800fb20:	e000      	b.n	800fb24 <find_pregoal+0x388>
			if (break_flag) break;		//map内の上位4bitと下位4bitが異なる場合、for文を抜ける
 800fb22:	bf00      	nop
		}
		//====歩数カウンタのインクリメント====
		m_step++;
 800fb24:	4b15      	ldr	r3, [pc, #84]	; (800fb7c <find_pregoal+0x3e0>)
 800fb26:	881b      	ldrh	r3, [r3, #0]
 800fb28:	3301      	adds	r3, #1
 800fb2a:	b29a      	uxth	r2, r3
 800fb2c:	4b13      	ldr	r3, [pc, #76]	; (800fb7c <find_pregoal+0x3e0>)
 800fb2e:	801a      	strh	r2, [r3, #0]
		if(m_step > 500) MF2.FLAG.ALLMAP = 1;
 800fb30:	4b12      	ldr	r3, [pc, #72]	; (800fb7c <find_pregoal+0x3e0>)
 800fb32:	881b      	ldrh	r3, [r3, #0]
 800fb34:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800fb38:	d904      	bls.n	800fb44 <find_pregoal+0x3a8>
 800fb3a:	4a11      	ldr	r2, [pc, #68]	; (800fb80 <find_pregoal+0x3e4>)
 800fb3c:	8813      	ldrh	r3, [r2, #0]
 800fb3e:	f043 0304 	orr.w	r3, r3, #4
 800fb42:	8013      	strh	r3, [r2, #0]
	} while(break_flag == 0 && MF2.FLAG.ALLMAP != 1);		//未探索壁ありマスを見つけるまで実行
 800fb44:	7b7b      	ldrb	r3, [r7, #13]
 800fb46:	2b00      	cmp	r3, #0
 800fb48:	d107      	bne.n	800fb5a <find_pregoal+0x3be>
 800fb4a:	4b0d      	ldr	r3, [pc, #52]	; (800fb80 <find_pregoal+0x3e4>)
 800fb4c:	881b      	ldrh	r3, [r3, #0]
 800fb4e:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800fb52:	b2db      	uxtb	r3, r3
 800fb54:	2b01      	cmp	r3, #1
 800fb56:	f47f ae5b 	bne.w	800f810 <find_pregoal+0x74>
}
 800fb5a:	bf00      	nop
 800fb5c:	3714      	adds	r7, #20
 800fb5e:	46bd      	mov	sp, r7
 800fb60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb64:	4770      	bx	lr
 800fb66:	bf00      	nop
 800fb68:	20000d60 	.word	0x20000d60
 800fb6c:	200001ac 	.word	0x200001ac
 800fb70:	20000c04 	.word	0x20000c04
 800fb74:	20000d5c 	.word	0x20000d5c
 800fb78:	200012a1 	.word	0x200012a1
 800fb7c:	2000034e 	.word	0x2000034e
 800fb80:	20000f64 	.word	0x20000f64

0800fb84 <make_smap2>:
//	歩数マップを作成する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void make_smap2()
{
 800fb84:	b480      	push	{r7}
 800fb86:	b085      	sub	sp, #20
 800fb88:	af00      	add	r7, sp, #0
	//====変数宣言====
	uint8_t x, y;															//for文用変数
	uint8_t m_temp;															//マップデータ一時保持

	//====歩数マップのクリア====
	for (y = 0; y <= 0x0f; y++) {											//各Y座標で実行
 800fb8a:	2300      	movs	r3, #0
 800fb8c:	73bb      	strb	r3, [r7, #14]
 800fb8e:	e014      	b.n	800fbba <make_smap2+0x36>
		for (x = 0; x <= 0x0f; x++) {										//各X座標で実行
 800fb90:	2300      	movs	r3, #0
 800fb92:	73fb      	strb	r3, [r7, #15]
 800fb94:	e00b      	b.n	800fbae <make_smap2+0x2a>
			smap[y][x] = 0x03e7;											//未記入部分は歩数最大とする
 800fb96:	7bba      	ldrb	r2, [r7, #14]
 800fb98:	7bfb      	ldrb	r3, [r7, #15]
 800fb9a:	4986      	ldr	r1, [pc, #536]	; (800fdb4 <make_smap2+0x230>)
 800fb9c:	0112      	lsls	r2, r2, #4
 800fb9e:	4413      	add	r3, r2
 800fba0:	f240 32e7 	movw	r2, #999	; 0x3e7
 800fba4:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for (x = 0; x <= 0x0f; x++) {										//各X座標で実行
 800fba8:	7bfb      	ldrb	r3, [r7, #15]
 800fbaa:	3301      	adds	r3, #1
 800fbac:	73fb      	strb	r3, [r7, #15]
 800fbae:	7bfb      	ldrb	r3, [r7, #15]
 800fbb0:	2b0f      	cmp	r3, #15
 800fbb2:	d9f0      	bls.n	800fb96 <make_smap2+0x12>
	for (y = 0; y <= 0x0f; y++) {											//各Y座標で実行
 800fbb4:	7bbb      	ldrb	r3, [r7, #14]
 800fbb6:	3301      	adds	r3, #1
 800fbb8:	73bb      	strb	r3, [r7, #14]
 800fbba:	7bbb      	ldrb	r3, [r7, #14]
 800fbbc:	2b0f      	cmp	r3, #15
 800fbbe:	d9e7      	bls.n	800fb90 <make_smap2+0xc>
		}
	}

	//====仮ゴール座標を0にする====
	smap[pregoal_y][pregoal_x] = 0;
 800fbc0:	4b7d      	ldr	r3, [pc, #500]	; (800fdb8 <make_smap2+0x234>)
 800fbc2:	781b      	ldrb	r3, [r3, #0]
 800fbc4:	4618      	mov	r0, r3
 800fbc6:	4b7d      	ldr	r3, [pc, #500]	; (800fdbc <make_smap2+0x238>)
 800fbc8:	781b      	ldrb	r3, [r3, #0]
 800fbca:	4619      	mov	r1, r3
 800fbcc:	4a79      	ldr	r2, [pc, #484]	; (800fdb4 <make_smap2+0x230>)
 800fbce:	0103      	lsls	r3, r0, #4
 800fbd0:	440b      	add	r3, r1
 800fbd2:	2100      	movs	r1, #0
 800fbd4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

	//====歩数カウンタを0にする====
	m_step = 0;																//現在記入した最大の歩数となる
 800fbd8:	4b79      	ldr	r3, [pc, #484]	; (800fdc0 <make_smap2+0x23c>)
 800fbda:	2200      	movs	r2, #0
 800fbdc:	801a      	strh	r2, [r3, #0]

	//====歩数カウンタの重みづけ====
	int straight = 3;
 800fbde:	2303      	movs	r3, #3
 800fbe0:	60bb      	str	r3, [r7, #8]
	int turn = 5;
 800fbe2:	2305      	movs	r3, #5
 800fbe4:	607b      	str	r3, [r7, #4]

	//====自分の座標にたどり着くまでループ====
	do {
		//----マップ全域を捜索----
		for (y = 0; y <= 0x0f; y++) {										//各Y座標で実行
 800fbe6:	2300      	movs	r3, #0
 800fbe8:	73bb      	strb	r3, [r7, #14]
 800fbea:	e0c0      	b.n	800fd6e <make_smap2+0x1ea>
			for (x = 0; x <= 0x0f; x++) {									//各X座標で実行
 800fbec:	2300      	movs	r3, #0
 800fbee:	73fb      	strb	r3, [r7, #15]
 800fbf0:	e0b6      	b.n	800fd60 <make_smap2+0x1dc>
				//----現在最大の歩数を発見したとき----
				if (smap[y][x] == m_step) {									//歩数格納変数m_stepの値が現在最大の歩数のとき
 800fbf2:	7bba      	ldrb	r2, [r7, #14]
 800fbf4:	7bfb      	ldrb	r3, [r7, #15]
 800fbf6:	496f      	ldr	r1, [pc, #444]	; (800fdb4 <make_smap2+0x230>)
 800fbf8:	0112      	lsls	r2, r2, #4
 800fbfa:	4413      	add	r3, r2
 800fbfc:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 800fc00:	4b6f      	ldr	r3, [pc, #444]	; (800fdc0 <make_smap2+0x23c>)
 800fc02:	881b      	ldrh	r3, [r3, #0]
 800fc04:	429a      	cmp	r2, r3
 800fc06:	f040 80a8 	bne.w	800fd5a <make_smap2+0x1d6>
					m_temp = map[y][x];										//map配列からマップデータを取り出す
 800fc0a:	7bba      	ldrb	r2, [r7, #14]
 800fc0c:	7bfb      	ldrb	r3, [r7, #15]
 800fc0e:	496d      	ldr	r1, [pc, #436]	; (800fdc4 <make_smap2+0x240>)
 800fc10:	0112      	lsls	r2, r2, #4
 800fc12:	440a      	add	r2, r1
 800fc14:	4413      	add	r3, r2
 800fc16:	781b      	ldrb	r3, [r3, #0]
 800fc18:	70fb      	strb	r3, [r7, #3]
					//----北壁についての処理----
					if (!(m_temp & 0x08) && y != 0x0f) {					//北壁がなく現在最北端でないとき
 800fc1a:	78fb      	ldrb	r3, [r7, #3]
 800fc1c:	f003 0308 	and.w	r3, r3, #8
 800fc20:	2b00      	cmp	r3, #0
 800fc22:	d122      	bne.n	800fc6a <make_smap2+0xe6>
 800fc24:	7bbb      	ldrb	r3, [r7, #14]
 800fc26:	2b0f      	cmp	r3, #15
 800fc28:	d01f      	beq.n	800fc6a <make_smap2+0xe6>
						if (smap[y + 1][x] == 0x03e7) {						//北側が未記入なら
 800fc2a:	7bbb      	ldrb	r3, [r7, #14]
 800fc2c:	1c5a      	adds	r2, r3, #1
 800fc2e:	7bfb      	ldrb	r3, [r7, #15]
 800fc30:	4960      	ldr	r1, [pc, #384]	; (800fdb4 <make_smap2+0x230>)
 800fc32:	0112      	lsls	r2, r2, #4
 800fc34:	4413      	add	r3, r2
 800fc36:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800fc3a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800fc3e:	4293      	cmp	r3, r2
 800fc40:	d113      	bne.n	800fc6a <make_smap2+0xe6>
							smap[y + 1][x] = smap[y][x] + turn;				//曲線分インクリメントした値を次のマスの歩数マップに書き込む
 800fc42:	7bba      	ldrb	r2, [r7, #14]
 800fc44:	7bfb      	ldrb	r3, [r7, #15]
 800fc46:	495b      	ldr	r1, [pc, #364]	; (800fdb4 <make_smap2+0x230>)
 800fc48:	0112      	lsls	r2, r2, #4
 800fc4a:	4413      	add	r3, r2
 800fc4c:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 800fc50:	687b      	ldr	r3, [r7, #4]
 800fc52:	b299      	uxth	r1, r3
 800fc54:	7bbb      	ldrb	r3, [r7, #14]
 800fc56:	1c5a      	adds	r2, r3, #1
 800fc58:	7bfb      	ldrb	r3, [r7, #15]
 800fc5a:	4401      	add	r1, r0
 800fc5c:	b288      	uxth	r0, r1
 800fc5e:	4955      	ldr	r1, [pc, #340]	; (800fdb4 <make_smap2+0x230>)
 800fc60:	0112      	lsls	r2, r2, #4
 800fc62:	4413      	add	r3, r2
 800fc64:	4602      	mov	r2, r0
 800fc66:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
						}
					}
					//----東壁についての処理----
					if (!(m_temp & 0x04) && x != 0x0f) {					//東壁がなく現在最東端でないとき
 800fc6a:	78fb      	ldrb	r3, [r7, #3]
 800fc6c:	f003 0304 	and.w	r3, r3, #4
 800fc70:	2b00      	cmp	r3, #0
 800fc72:	d122      	bne.n	800fcba <make_smap2+0x136>
 800fc74:	7bfb      	ldrb	r3, [r7, #15]
 800fc76:	2b0f      	cmp	r3, #15
 800fc78:	d01f      	beq.n	800fcba <make_smap2+0x136>
						if (smap[y][x + 1] == 0x03e7) {						//東側が未記入なら
 800fc7a:	7bba      	ldrb	r2, [r7, #14]
 800fc7c:	7bfb      	ldrb	r3, [r7, #15]
 800fc7e:	3301      	adds	r3, #1
 800fc80:	494c      	ldr	r1, [pc, #304]	; (800fdb4 <make_smap2+0x230>)
 800fc82:	0112      	lsls	r2, r2, #4
 800fc84:	4413      	add	r3, r2
 800fc86:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800fc8a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800fc8e:	4293      	cmp	r3, r2
 800fc90:	d113      	bne.n	800fcba <make_smap2+0x136>
							smap[y][x + 1] = smap[y][x] + turn;				//曲線分インクリメントした値を次のマスの歩数マップに書き込む
 800fc92:	7bba      	ldrb	r2, [r7, #14]
 800fc94:	7bfb      	ldrb	r3, [r7, #15]
 800fc96:	4947      	ldr	r1, [pc, #284]	; (800fdb4 <make_smap2+0x230>)
 800fc98:	0112      	lsls	r2, r2, #4
 800fc9a:	4413      	add	r3, r2
 800fc9c:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 800fca0:	687b      	ldr	r3, [r7, #4]
 800fca2:	b299      	uxth	r1, r3
 800fca4:	7bba      	ldrb	r2, [r7, #14]
 800fca6:	7bfb      	ldrb	r3, [r7, #15]
 800fca8:	3301      	adds	r3, #1
 800fcaa:	4401      	add	r1, r0
 800fcac:	b288      	uxth	r0, r1
 800fcae:	4941      	ldr	r1, [pc, #260]	; (800fdb4 <make_smap2+0x230>)
 800fcb0:	0112      	lsls	r2, r2, #4
 800fcb2:	4413      	add	r3, r2
 800fcb4:	4602      	mov	r2, r0
 800fcb6:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
						}
					}
					//----南壁についての処理----
					if (!(m_temp & 0x02) && y != 0) {						//南壁がなく現在最南端でないとき
 800fcba:	78fb      	ldrb	r3, [r7, #3]
 800fcbc:	f003 0302 	and.w	r3, r3, #2
 800fcc0:	2b00      	cmp	r3, #0
 800fcc2:	d122      	bne.n	800fd0a <make_smap2+0x186>
 800fcc4:	7bbb      	ldrb	r3, [r7, #14]
 800fcc6:	2b00      	cmp	r3, #0
 800fcc8:	d01f      	beq.n	800fd0a <make_smap2+0x186>
						if (smap[y - 1][x] == 0x03e7) {						//南側が未記入なら
 800fcca:	7bbb      	ldrb	r3, [r7, #14]
 800fccc:	1e5a      	subs	r2, r3, #1
 800fcce:	7bfb      	ldrb	r3, [r7, #15]
 800fcd0:	4938      	ldr	r1, [pc, #224]	; (800fdb4 <make_smap2+0x230>)
 800fcd2:	0112      	lsls	r2, r2, #4
 800fcd4:	4413      	add	r3, r2
 800fcd6:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800fcda:	f240 32e7 	movw	r2, #999	; 0x3e7
 800fcde:	4293      	cmp	r3, r2
 800fce0:	d113      	bne.n	800fd0a <make_smap2+0x186>
							smap[y - 1][x] = smap[y][x] + turn;				//曲線分インクリメントした値を次のマスの歩数マップに書き込む
 800fce2:	7bba      	ldrb	r2, [r7, #14]
 800fce4:	7bfb      	ldrb	r3, [r7, #15]
 800fce6:	4933      	ldr	r1, [pc, #204]	; (800fdb4 <make_smap2+0x230>)
 800fce8:	0112      	lsls	r2, r2, #4
 800fcea:	4413      	add	r3, r2
 800fcec:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 800fcf0:	687b      	ldr	r3, [r7, #4]
 800fcf2:	b299      	uxth	r1, r3
 800fcf4:	7bbb      	ldrb	r3, [r7, #14]
 800fcf6:	1e5a      	subs	r2, r3, #1
 800fcf8:	7bfb      	ldrb	r3, [r7, #15]
 800fcfa:	4401      	add	r1, r0
 800fcfc:	b288      	uxth	r0, r1
 800fcfe:	492d      	ldr	r1, [pc, #180]	; (800fdb4 <make_smap2+0x230>)
 800fd00:	0112      	lsls	r2, r2, #4
 800fd02:	4413      	add	r3, r2
 800fd04:	4602      	mov	r2, r0
 800fd06:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
						}
					}
					//----西壁についての処理----
					if (!(m_temp & 0x01) && x != 0) {						//西壁がなく現在最西端でないとき
 800fd0a:	78fb      	ldrb	r3, [r7, #3]
 800fd0c:	f003 0301 	and.w	r3, r3, #1
 800fd10:	2b00      	cmp	r3, #0
 800fd12:	d122      	bne.n	800fd5a <make_smap2+0x1d6>
 800fd14:	7bfb      	ldrb	r3, [r7, #15]
 800fd16:	2b00      	cmp	r3, #0
 800fd18:	d01f      	beq.n	800fd5a <make_smap2+0x1d6>
						if (smap[y][x - 1] == 0x03e7) {						//西側が未記入なら
 800fd1a:	7bba      	ldrb	r2, [r7, #14]
 800fd1c:	7bfb      	ldrb	r3, [r7, #15]
 800fd1e:	3b01      	subs	r3, #1
 800fd20:	4924      	ldr	r1, [pc, #144]	; (800fdb4 <make_smap2+0x230>)
 800fd22:	0112      	lsls	r2, r2, #4
 800fd24:	4413      	add	r3, r2
 800fd26:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800fd2a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800fd2e:	4293      	cmp	r3, r2
 800fd30:	d113      	bne.n	800fd5a <make_smap2+0x1d6>
							smap[y][x - 1] = smap[y][x] + turn;				//次の歩数を書き込む
 800fd32:	7bba      	ldrb	r2, [r7, #14]
 800fd34:	7bfb      	ldrb	r3, [r7, #15]
 800fd36:	491f      	ldr	r1, [pc, #124]	; (800fdb4 <make_smap2+0x230>)
 800fd38:	0112      	lsls	r2, r2, #4
 800fd3a:	4413      	add	r3, r2
 800fd3c:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 800fd40:	687b      	ldr	r3, [r7, #4]
 800fd42:	b299      	uxth	r1, r3
 800fd44:	7bba      	ldrb	r2, [r7, #14]
 800fd46:	7bfb      	ldrb	r3, [r7, #15]
 800fd48:	3b01      	subs	r3, #1
 800fd4a:	4401      	add	r1, r0
 800fd4c:	b288      	uxth	r0, r1
 800fd4e:	4919      	ldr	r1, [pc, #100]	; (800fdb4 <make_smap2+0x230>)
 800fd50:	0112      	lsls	r2, r2, #4
 800fd52:	4413      	add	r3, r2
 800fd54:	4602      	mov	r2, r0
 800fd56:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			for (x = 0; x <= 0x0f; x++) {									//各X座標で実行
 800fd5a:	7bfb      	ldrb	r3, [r7, #15]
 800fd5c:	3301      	adds	r3, #1
 800fd5e:	73fb      	strb	r3, [r7, #15]
 800fd60:	7bfb      	ldrb	r3, [r7, #15]
 800fd62:	2b0f      	cmp	r3, #15
 800fd64:	f67f af45 	bls.w	800fbf2 <make_smap2+0x6e>
		for (y = 0; y <= 0x0f; y++) {										//各Y座標で実行
 800fd68:	7bbb      	ldrb	r3, [r7, #14]
 800fd6a:	3301      	adds	r3, #1
 800fd6c:	73bb      	strb	r3, [r7, #14]
 800fd6e:	7bbb      	ldrb	r3, [r7, #14]
 800fd70:	2b0f      	cmp	r3, #15
 800fd72:	f67f af3b 	bls.w	800fbec <make_smap2+0x68>
					}
				}
			}
		}
		//====歩数カウンタのインクリメント====
		m_step++;
 800fd76:	4b12      	ldr	r3, [pc, #72]	; (800fdc0 <make_smap2+0x23c>)
 800fd78:	881b      	ldrh	r3, [r3, #0]
 800fd7a:	3301      	adds	r3, #1
 800fd7c:	b29a      	uxth	r2, r3
 800fd7e:	4b10      	ldr	r3, [pc, #64]	; (800fdc0 <make_smap2+0x23c>)
 800fd80:	801a      	strh	r2, [r3, #0]
	} while (smap[mouse.y][mouse.x] == 0x03e7);		//現在座標が未記入ではなくなるまで実行
 800fd82:	4b11      	ldr	r3, [pc, #68]	; (800fdc8 <make_smap2+0x244>)
 800fd84:	785b      	ldrb	r3, [r3, #1]
 800fd86:	b2db      	uxtb	r3, r3
 800fd88:	4618      	mov	r0, r3
 800fd8a:	4b0f      	ldr	r3, [pc, #60]	; (800fdc8 <make_smap2+0x244>)
 800fd8c:	781b      	ldrb	r3, [r3, #0]
 800fd8e:	b2db      	uxtb	r3, r3
 800fd90:	4619      	mov	r1, r3
 800fd92:	4a08      	ldr	r2, [pc, #32]	; (800fdb4 <make_smap2+0x230>)
 800fd94:	0103      	lsls	r3, r0, #4
 800fd96:	440b      	add	r3, r1
 800fd98:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800fd9c:	f240 32e7 	movw	r2, #999	; 0x3e7
 800fda0:	4293      	cmp	r3, r2
 800fda2:	f43f af20 	beq.w	800fbe6 <make_smap2+0x62>
}
 800fda6:	bf00      	nop
 800fda8:	3714      	adds	r7, #20
 800fdaa:	46bd      	mov	sp, r7
 800fdac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdb0:	4770      	bx	lr
 800fdb2:	bf00      	nop
 800fdb4:	20000d60 	.word	0x20000d60
 800fdb8:	200012a1 	.word	0x200012a1
 800fdbc:	20000d5c 	.word	0x20000d5c
 800fdc0:	2000034e 	.word	0x2000034e
 800fdc4:	200001ac 	.word	0x200001ac
 800fdc8:	20000c0c 	.word	0x20000c0c

0800fdcc <pass_route2>:
//pass_route2
// route配列をpass圧縮する(半区画ベース)
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void pass_route2(void){
 800fdcc:	b480      	push	{r7}
 800fdce:	b083      	sub	sp, #12
 800fdd0:	af00      	add	r7, sp, #0
	int i;
	uint8_t s_flag = 0;
 800fdd2:	2300      	movs	r3, #0
 800fdd4:	70fb      	strb	r3, [r7, #3]
	for(i = 0; i < 256; i++){
 800fdd6:	2300      	movs	r3, #0
 800fdd8:	607b      	str	r3, [r7, #4]
 800fdda:	e007      	b.n	800fdec <pass_route2+0x20>
		pass[i] = 0;								//pass配列の初期化
 800fddc:	4a83      	ldr	r2, [pc, #524]	; (800ffec <pass_route2+0x220>)
 800fdde:	687b      	ldr	r3, [r7, #4]
 800fde0:	4413      	add	r3, r2
 800fde2:	2200      	movs	r2, #0
 800fde4:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < 256; i++){
 800fde6:	687b      	ldr	r3, [r7, #4]
 800fde8:	3301      	adds	r3, #1
 800fdea:	607b      	str	r3, [r7, #4]
 800fdec:	687b      	ldr	r3, [r7, #4]
 800fdee:	2bff      	cmp	r3, #255	; 0xff
 800fdf0:	ddf4      	ble.n	800fddc <pass_route2+0x10>
	}
	uint8_t p = 0;									//pass配列の配列番号用変数
 800fdf2:	2300      	movs	r3, #0
 800fdf4:	70bb      	strb	r3, [r7, #2]
	i = 0;
 800fdf6:	2300      	movs	r3, #0
 800fdf8:	607b      	str	r3, [r7, #4]
	uint8_t s = 0;									//a直線数カウント用変数
 800fdfa:	2300      	movs	r3, #0
 800fdfc:	707b      	strb	r3, [r7, #1]
	while(route[i-1] != 0xff){
 800fdfe:	e0e8      	b.n	800ffd2 <pass_route2+0x206>
		s = 0;
 800fe00:	2300      	movs	r3, #0
 800fe02:	707b      	strb	r3, [r7, #1]
		if(route[i] == 0x44){
 800fe04:	4a7a      	ldr	r2, [pc, #488]	; (800fff0 <pass_route2+0x224>)
 800fe06:	687b      	ldr	r3, [r7, #4]
 800fe08:	4413      	add	r3, r2
 800fe0a:	781b      	ldrb	r3, [r3, #0]
 800fe0c:	2b44      	cmp	r3, #68	; 0x44
 800fe0e:	d107      	bne.n	800fe20 <pass_route2+0x54>
			pass[p] = -1;							//a右スラローム
 800fe10:	78bb      	ldrb	r3, [r7, #2]
 800fe12:	4a76      	ldr	r2, [pc, #472]	; (800ffec <pass_route2+0x220>)
 800fe14:	21ff      	movs	r1, #255	; 0xff
 800fe16:	54d1      	strb	r1, [r2, r3]
			i++;
 800fe18:	687b      	ldr	r3, [r7, #4]
 800fe1a:	3301      	adds	r3, #1
 800fe1c:	607b      	str	r3, [r7, #4]
 800fe1e:	e0d5      	b.n	800ffcc <pass_route2+0x200>
		}else if(route[i] == 0x11){
 800fe20:	4a73      	ldr	r2, [pc, #460]	; (800fff0 <pass_route2+0x224>)
 800fe22:	687b      	ldr	r3, [r7, #4]
 800fe24:	4413      	add	r3, r2
 800fe26:	781b      	ldrb	r3, [r3, #0]
 800fe28:	2b11      	cmp	r3, #17
 800fe2a:	d107      	bne.n	800fe3c <pass_route2+0x70>
			pass[p] = -2;							//a左スラローム
 800fe2c:	78bb      	ldrb	r3, [r7, #2]
 800fe2e:	4a6f      	ldr	r2, [pc, #444]	; (800ffec <pass_route2+0x220>)
 800fe30:	21fe      	movs	r1, #254	; 0xfe
 800fe32:	54d1      	strb	r1, [r2, r3]
			i++;
 800fe34:	687b      	ldr	r3, [r7, #4]
 800fe36:	3301      	adds	r3, #1
 800fe38:	607b      	str	r3, [r7, #4]
 800fe3a:	e0c7      	b.n	800ffcc <pass_route2+0x200>
		}else if(route[i] == 0x77 && route[i+1] == 0x44 && route[i+2] == 0x77){
 800fe3c:	4a6c      	ldr	r2, [pc, #432]	; (800fff0 <pass_route2+0x224>)
 800fe3e:	687b      	ldr	r3, [r7, #4]
 800fe40:	4413      	add	r3, r2
 800fe42:	781b      	ldrb	r3, [r3, #0]
 800fe44:	2b77      	cmp	r3, #119	; 0x77
 800fe46:	d115      	bne.n	800fe74 <pass_route2+0xa8>
 800fe48:	687b      	ldr	r3, [r7, #4]
 800fe4a:	3301      	adds	r3, #1
 800fe4c:	4a68      	ldr	r2, [pc, #416]	; (800fff0 <pass_route2+0x224>)
 800fe4e:	5cd3      	ldrb	r3, [r2, r3]
 800fe50:	2b44      	cmp	r3, #68	; 0x44
 800fe52:	d10f      	bne.n	800fe74 <pass_route2+0xa8>
 800fe54:	687b      	ldr	r3, [r7, #4]
 800fe56:	3302      	adds	r3, #2
 800fe58:	4a65      	ldr	r2, [pc, #404]	; (800fff0 <pass_route2+0x224>)
 800fe5a:	5cd3      	ldrb	r3, [r2, r3]
 800fe5c:	2b77      	cmp	r3, #119	; 0x77
 800fe5e:	d109      	bne.n	800fe74 <pass_route2+0xa8>
			s_flag = 0;
 800fe60:	2300      	movs	r3, #0
 800fe62:	70fb      	strb	r3, [r7, #3]
			pass[p] = -3;							//a大回り右スラローム
 800fe64:	78bb      	ldrb	r3, [r7, #2]
 800fe66:	4a61      	ldr	r2, [pc, #388]	; (800ffec <pass_route2+0x220>)
 800fe68:	21fd      	movs	r1, #253	; 0xfd
 800fe6a:	54d1      	strb	r1, [r2, r3]
			i = i + 3;
 800fe6c:	687b      	ldr	r3, [r7, #4]
 800fe6e:	3303      	adds	r3, #3
 800fe70:	607b      	str	r3, [r7, #4]
 800fe72:	e0ab      	b.n	800ffcc <pass_route2+0x200>
		}else if(route[i] == 0x77 && route[i+1] == 0x11 && route[i+2] == 0x77){
 800fe74:	4a5e      	ldr	r2, [pc, #376]	; (800fff0 <pass_route2+0x224>)
 800fe76:	687b      	ldr	r3, [r7, #4]
 800fe78:	4413      	add	r3, r2
 800fe7a:	781b      	ldrb	r3, [r3, #0]
 800fe7c:	2b77      	cmp	r3, #119	; 0x77
 800fe7e:	d115      	bne.n	800feac <pass_route2+0xe0>
 800fe80:	687b      	ldr	r3, [r7, #4]
 800fe82:	3301      	adds	r3, #1
 800fe84:	4a5a      	ldr	r2, [pc, #360]	; (800fff0 <pass_route2+0x224>)
 800fe86:	5cd3      	ldrb	r3, [r2, r3]
 800fe88:	2b11      	cmp	r3, #17
 800fe8a:	d10f      	bne.n	800feac <pass_route2+0xe0>
 800fe8c:	687b      	ldr	r3, [r7, #4]
 800fe8e:	3302      	adds	r3, #2
 800fe90:	4a57      	ldr	r2, [pc, #348]	; (800fff0 <pass_route2+0x224>)
 800fe92:	5cd3      	ldrb	r3, [r2, r3]
 800fe94:	2b77      	cmp	r3, #119	; 0x77
 800fe96:	d109      	bne.n	800feac <pass_route2+0xe0>
			s_flag = 0;
 800fe98:	2300      	movs	r3, #0
 800fe9a:	70fb      	strb	r3, [r7, #3]
			pass[p] = -4;							//a大回り左スラローム
 800fe9c:	78bb      	ldrb	r3, [r7, #2]
 800fe9e:	4a53      	ldr	r2, [pc, #332]	; (800ffec <pass_route2+0x220>)
 800fea0:	21fc      	movs	r1, #252	; 0xfc
 800fea2:	54d1      	strb	r1, [r2, r3]
			i = i + 3;
 800fea4:	687b      	ldr	r3, [r7, #4]
 800fea6:	3303      	adds	r3, #3
 800fea8:	607b      	str	r3, [r7, #4]
 800feaa:	e08f      	b.n	800ffcc <pass_route2+0x200>
		}else if(route[i] == 0x77 && route[i+1] == 0x44 && route[i+2] == 0x44 && route[i+3] == 0x77){
 800feac:	4a50      	ldr	r2, [pc, #320]	; (800fff0 <pass_route2+0x224>)
 800feae:	687b      	ldr	r3, [r7, #4]
 800feb0:	4413      	add	r3, r2
 800feb2:	781b      	ldrb	r3, [r3, #0]
 800feb4:	2b77      	cmp	r3, #119	; 0x77
 800feb6:	d11b      	bne.n	800fef0 <pass_route2+0x124>
 800feb8:	687b      	ldr	r3, [r7, #4]
 800feba:	3301      	adds	r3, #1
 800febc:	4a4c      	ldr	r2, [pc, #304]	; (800fff0 <pass_route2+0x224>)
 800febe:	5cd3      	ldrb	r3, [r2, r3]
 800fec0:	2b44      	cmp	r3, #68	; 0x44
 800fec2:	d115      	bne.n	800fef0 <pass_route2+0x124>
 800fec4:	687b      	ldr	r3, [r7, #4]
 800fec6:	3302      	adds	r3, #2
 800fec8:	4a49      	ldr	r2, [pc, #292]	; (800fff0 <pass_route2+0x224>)
 800feca:	5cd3      	ldrb	r3, [r2, r3]
 800fecc:	2b44      	cmp	r3, #68	; 0x44
 800fece:	d10f      	bne.n	800fef0 <pass_route2+0x124>
 800fed0:	687b      	ldr	r3, [r7, #4]
 800fed2:	3303      	adds	r3, #3
 800fed4:	4a46      	ldr	r2, [pc, #280]	; (800fff0 <pass_route2+0x224>)
 800fed6:	5cd3      	ldrb	r3, [r2, r3]
 800fed8:	2b77      	cmp	r3, #119	; 0x77
 800feda:	d109      	bne.n	800fef0 <pass_route2+0x124>
			s_flag = 0;
 800fedc:	2300      	movs	r3, #0
 800fede:	70fb      	strb	r3, [r7, #3]
			pass[p] = -5;							//a大回り右180スラローム
 800fee0:	78bb      	ldrb	r3, [r7, #2]
 800fee2:	4a42      	ldr	r2, [pc, #264]	; (800ffec <pass_route2+0x220>)
 800fee4:	21fb      	movs	r1, #251	; 0xfb
 800fee6:	54d1      	strb	r1, [r2, r3]
			i = i + 4;
 800fee8:	687b      	ldr	r3, [r7, #4]
 800feea:	3304      	adds	r3, #4
 800feec:	607b      	str	r3, [r7, #4]
 800feee:	e06d      	b.n	800ffcc <pass_route2+0x200>
		}else if(route[i] == 0x77 && route[i+1] == 0x11 && route[i+2] == 0x11 && route[i+3] == 0x77){
 800fef0:	4a3f      	ldr	r2, [pc, #252]	; (800fff0 <pass_route2+0x224>)
 800fef2:	687b      	ldr	r3, [r7, #4]
 800fef4:	4413      	add	r3, r2
 800fef6:	781b      	ldrb	r3, [r3, #0]
 800fef8:	2b77      	cmp	r3, #119	; 0x77
 800fefa:	d11b      	bne.n	800ff34 <pass_route2+0x168>
 800fefc:	687b      	ldr	r3, [r7, #4]
 800fefe:	3301      	adds	r3, #1
 800ff00:	4a3b      	ldr	r2, [pc, #236]	; (800fff0 <pass_route2+0x224>)
 800ff02:	5cd3      	ldrb	r3, [r2, r3]
 800ff04:	2b11      	cmp	r3, #17
 800ff06:	d115      	bne.n	800ff34 <pass_route2+0x168>
 800ff08:	687b      	ldr	r3, [r7, #4]
 800ff0a:	3302      	adds	r3, #2
 800ff0c:	4a38      	ldr	r2, [pc, #224]	; (800fff0 <pass_route2+0x224>)
 800ff0e:	5cd3      	ldrb	r3, [r2, r3]
 800ff10:	2b11      	cmp	r3, #17
 800ff12:	d10f      	bne.n	800ff34 <pass_route2+0x168>
 800ff14:	687b      	ldr	r3, [r7, #4]
 800ff16:	3303      	adds	r3, #3
 800ff18:	4a35      	ldr	r2, [pc, #212]	; (800fff0 <pass_route2+0x224>)
 800ff1a:	5cd3      	ldrb	r3, [r2, r3]
 800ff1c:	2b77      	cmp	r3, #119	; 0x77
 800ff1e:	d109      	bne.n	800ff34 <pass_route2+0x168>
			s_flag = 0;
 800ff20:	2300      	movs	r3, #0
 800ff22:	70fb      	strb	r3, [r7, #3]
			pass[p] = -6;							//a大回り左180スラローム
 800ff24:	78bb      	ldrb	r3, [r7, #2]
 800ff26:	4a31      	ldr	r2, [pc, #196]	; (800ffec <pass_route2+0x220>)
 800ff28:	21fa      	movs	r1, #250	; 0xfa
 800ff2a:	54d1      	strb	r1, [r2, r3]
			i = i + 4;
 800ff2c:	687b      	ldr	r3, [r7, #4]
 800ff2e:	3304      	adds	r3, #4
 800ff30:	607b      	str	r3, [r7, #4]
 800ff32:	e04b      	b.n	800ffcc <pass_route2+0x200>
		}else if(route[i] == 0xff){
 800ff34:	4a2e      	ldr	r2, [pc, #184]	; (800fff0 <pass_route2+0x224>)
 800ff36:	687b      	ldr	r3, [r7, #4]
 800ff38:	4413      	add	r3, r2
 800ff3a:	781b      	ldrb	r3, [r3, #0]
 800ff3c:	2bff      	cmp	r3, #255	; 0xff
 800ff3e:	d107      	bne.n	800ff50 <pass_route2+0x184>
			pass[p] = -114;							//a終了条件用
 800ff40:	78bb      	ldrb	r3, [r7, #2]
 800ff42:	4a2a      	ldr	r2, [pc, #168]	; (800ffec <pass_route2+0x220>)
 800ff44:	218e      	movs	r1, #142	; 0x8e
 800ff46:	54d1      	strb	r1, [r2, r3]
			i++;
 800ff48:	687b      	ldr	r3, [r7, #4]
 800ff4a:	3301      	adds	r3, #1
 800ff4c:	607b      	str	r3, [r7, #4]
 800ff4e:	e03d      	b.n	800ffcc <pass_route2+0x200>
		}else if(route[i] == 0x77){
 800ff50:	4a27      	ldr	r2, [pc, #156]	; (800fff0 <pass_route2+0x224>)
 800ff52:	687b      	ldr	r3, [r7, #4]
 800ff54:	4413      	add	r3, r2
 800ff56:	781b      	ldrb	r3, [r3, #0]
 800ff58:	2b77      	cmp	r3, #119	; 0x77
 800ff5a:	d137      	bne.n	800ffcc <pass_route2+0x200>
			if(s_flag){
 800ff5c:	78fb      	ldrb	r3, [r7, #3]
 800ff5e:	2b00      	cmp	r3, #0
 800ff60:	d012      	beq.n	800ff88 <pass_route2+0x1bc>
				pass[p-1]++;
 800ff62:	78bb      	ldrb	r3, [r7, #2]
 800ff64:	3b01      	subs	r3, #1
 800ff66:	4a21      	ldr	r2, [pc, #132]	; (800ffec <pass_route2+0x220>)
 800ff68:	56d2      	ldrsb	r2, [r2, r3]
 800ff6a:	b2d2      	uxtb	r2, r2
 800ff6c:	3201      	adds	r2, #1
 800ff6e:	b2d2      	uxtb	r2, r2
 800ff70:	b251      	sxtb	r1, r2
 800ff72:	4a1e      	ldr	r2, [pc, #120]	; (800ffec <pass_route2+0x220>)
 800ff74:	54d1      	strb	r1, [r2, r3]
				p--;
 800ff76:	78bb      	ldrb	r3, [r7, #2]
 800ff78:	3b01      	subs	r3, #1
 800ff7a:	70bb      	strb	r3, [r7, #2]
				s_flag = 0;
 800ff7c:	2300      	movs	r3, #0
 800ff7e:	70fb      	strb	r3, [r7, #3]
				i++;
 800ff80:	687b      	ldr	r3, [r7, #4]
 800ff82:	3301      	adds	r3, #1
 800ff84:	607b      	str	r3, [r7, #4]
 800ff86:	e021      	b.n	800ffcc <pass_route2+0x200>
			}else{
				s++;
 800ff88:	787b      	ldrb	r3, [r7, #1]
 800ff8a:	3301      	adds	r3, #1
 800ff8c:	707b      	strb	r3, [r7, #1]
				pass[p] = s;
 800ff8e:	78bb      	ldrb	r3, [r7, #2]
 800ff90:	f997 1001 	ldrsb.w	r1, [r7, #1]
 800ff94:	4a15      	ldr	r2, [pc, #84]	; (800ffec <pass_route2+0x220>)
 800ff96:	54d1      	strb	r1, [r2, r3]
				while(route[i+1] == 0x77){
 800ff98:	e00c      	b.n	800ffb4 <pass_route2+0x1e8>
					s_flag = 1;
 800ff9a:	2301      	movs	r3, #1
 800ff9c:	70fb      	strb	r3, [r7, #3]
					pass[p] = s;
 800ff9e:	78bb      	ldrb	r3, [r7, #2]
 800ffa0:	f997 1001 	ldrsb.w	r1, [r7, #1]
 800ffa4:	4a11      	ldr	r2, [pc, #68]	; (800ffec <pass_route2+0x220>)
 800ffa6:	54d1      	strb	r1, [r2, r3]
					i++;
 800ffa8:	687b      	ldr	r3, [r7, #4]
 800ffaa:	3301      	adds	r3, #1
 800ffac:	607b      	str	r3, [r7, #4]
					s++;
 800ffae:	787b      	ldrb	r3, [r7, #1]
 800ffb0:	3301      	adds	r3, #1
 800ffb2:	707b      	strb	r3, [r7, #1]
				while(route[i+1] == 0x77){
 800ffb4:	687b      	ldr	r3, [r7, #4]
 800ffb6:	3301      	adds	r3, #1
 800ffb8:	4a0d      	ldr	r2, [pc, #52]	; (800fff0 <pass_route2+0x224>)
 800ffba:	5cd3      	ldrb	r3, [r2, r3]
 800ffbc:	2b77      	cmp	r3, #119	; 0x77
 800ffbe:	d0ec      	beq.n	800ff9a <pass_route2+0x1ce>
				}
				if(!s_flag){
 800ffc0:	78fb      	ldrb	r3, [r7, #3]
 800ffc2:	2b00      	cmp	r3, #0
 800ffc4:	d102      	bne.n	800ffcc <pass_route2+0x200>
					i++;
 800ffc6:	687b      	ldr	r3, [r7, #4]
 800ffc8:	3301      	adds	r3, #1
 800ffca:	607b      	str	r3, [r7, #4]
				}
			}
		}
		p++;
 800ffcc:	78bb      	ldrb	r3, [r7, #2]
 800ffce:	3301      	adds	r3, #1
 800ffd0:	70bb      	strb	r3, [r7, #2]
	while(route[i-1] != 0xff){
 800ffd2:	687b      	ldr	r3, [r7, #4]
 800ffd4:	3b01      	subs	r3, #1
 800ffd6:	4a06      	ldr	r2, [pc, #24]	; (800fff0 <pass_route2+0x224>)
 800ffd8:	5cd3      	ldrb	r3, [r2, r3]
 800ffda:	2bff      	cmp	r3, #255	; 0xff
 800ffdc:	f47f af10 	bne.w	800fe00 <pass_route2+0x34>
	}
}
 800ffe0:	bf00      	nop
 800ffe2:	370c      	adds	r7, #12
 800ffe4:	46bd      	mov	sp, r7
 800ffe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffea:	4770      	bx	lr
 800ffec:	20000350 	.word	0x20000350
 800fff0:	20000c54 	.word	0x20000c54

0800fff4 <pass_route3>:
//pass_route3
// route配列をpass圧縮する(半区画ベース+斜めあり)
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void pass_route3(void){
 800fff4:	b480      	push	{r7}
 800fff6:	b083      	sub	sp, #12
 800fff8:	af00      	add	r7, sp, #0
	int i;
	uint8_t s_flag = 0;
 800fffa:	2300      	movs	r3, #0
 800fffc:	70fb      	strb	r3, [r7, #3]
	MF2.FLAG.V = 0;										//a斜めフラグの初期化
 800fffe:	4a98      	ldr	r2, [pc, #608]	; (8010260 <pass_route3+0x26c>)
 8010000:	8813      	ldrh	r3, [r2, #0]
 8010002:	f36f 03c3 	bfc	r3, #3, #1
 8010006:	8013      	strh	r3, [r2, #0]
	for(i = 0; i < 256; i++){
 8010008:	2300      	movs	r3, #0
 801000a:	607b      	str	r3, [r7, #4]
 801000c:	e007      	b.n	801001e <pass_route3+0x2a>
		pass[i] = 0;								//pass配列の初期化
 801000e:	4a95      	ldr	r2, [pc, #596]	; (8010264 <pass_route3+0x270>)
 8010010:	687b      	ldr	r3, [r7, #4]
 8010012:	4413      	add	r3, r2
 8010014:	2200      	movs	r2, #0
 8010016:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < 256; i++){
 8010018:	687b      	ldr	r3, [r7, #4]
 801001a:	3301      	adds	r3, #1
 801001c:	607b      	str	r3, [r7, #4]
 801001e:	687b      	ldr	r3, [r7, #4]
 8010020:	2bff      	cmp	r3, #255	; 0xff
 8010022:	ddf4      	ble.n	801000e <pass_route3+0x1a>
	}
	uint8_t p = 0;									//pass配列の配列番号用変数
 8010024:	2300      	movs	r3, #0
 8010026:	70bb      	strb	r3, [r7, #2]
	i = 0;
 8010028:	2300      	movs	r3, #0
 801002a:	607b      	str	r3, [r7, #4]
	uint8_t s = 0;									//a直線数カウント用変数
 801002c:	2300      	movs	r3, #0
 801002e:	707b      	strb	r3, [r7, #1]
	while(route[i-1] != 0xff){
 8010030:	e324      	b.n	801067c <pass_route3+0x688>
		s = 0;
 8010032:	2300      	movs	r3, #0
 8010034:	707b      	strb	r3, [r7, #1]
		if(route[i] == 0x77 && route[i+1] == 0x44 && route[i+2] == 0x77){
 8010036:	4a8c      	ldr	r2, [pc, #560]	; (8010268 <pass_route3+0x274>)
 8010038:	687b      	ldr	r3, [r7, #4]
 801003a:	4413      	add	r3, r2
 801003c:	781b      	ldrb	r3, [r3, #0]
 801003e:	2b77      	cmp	r3, #119	; 0x77
 8010040:	d11b      	bne.n	801007a <pass_route3+0x86>
 8010042:	687b      	ldr	r3, [r7, #4]
 8010044:	3301      	adds	r3, #1
 8010046:	4a88      	ldr	r2, [pc, #544]	; (8010268 <pass_route3+0x274>)
 8010048:	5cd3      	ldrb	r3, [r2, r3]
 801004a:	2b44      	cmp	r3, #68	; 0x44
 801004c:	d115      	bne.n	801007a <pass_route3+0x86>
 801004e:	687b      	ldr	r3, [r7, #4]
 8010050:	3302      	adds	r3, #2
 8010052:	4a85      	ldr	r2, [pc, #532]	; (8010268 <pass_route3+0x274>)
 8010054:	5cd3      	ldrb	r3, [r2, r3]
 8010056:	2b77      	cmp	r3, #119	; 0x77
 8010058:	d10f      	bne.n	801007a <pass_route3+0x86>
			s_flag = 0;
 801005a:	2300      	movs	r3, #0
 801005c:	70fb      	strb	r3, [r7, #3]
			pass[p] = -3;							//a大回り右90
 801005e:	78bb      	ldrb	r3, [r7, #2]
 8010060:	4a80      	ldr	r2, [pc, #512]	; (8010264 <pass_route3+0x270>)
 8010062:	21fd      	movs	r1, #253	; 0xfd
 8010064:	54d1      	strb	r1, [r2, r3]
			if(i == 0){								//aスタート時の走行モード切り替えフラグ
 8010066:	687b      	ldr	r3, [r7, #4]
 8010068:	2b00      	cmp	r3, #0
 801006a:	d102      	bne.n	8010072 <pass_route3+0x7e>
				start_mode = 2;
 801006c:	4b7f      	ldr	r3, [pc, #508]	; (801026c <pass_route3+0x278>)
 801006e:	2202      	movs	r2, #2
 8010070:	701a      	strb	r2, [r3, #0]
			}
			i = i + 3;
 8010072:	687b      	ldr	r3, [r7, #4]
 8010074:	3303      	adds	r3, #3
 8010076:	607b      	str	r3, [r7, #4]
 8010078:	e2fd      	b.n	8010676 <pass_route3+0x682>
		}else if(route[i] == 0x77 && route[i+1] == 0x11 && route[i+2] == 0x77){
 801007a:	4a7b      	ldr	r2, [pc, #492]	; (8010268 <pass_route3+0x274>)
 801007c:	687b      	ldr	r3, [r7, #4]
 801007e:	4413      	add	r3, r2
 8010080:	781b      	ldrb	r3, [r3, #0]
 8010082:	2b77      	cmp	r3, #119	; 0x77
 8010084:	d11b      	bne.n	80100be <pass_route3+0xca>
 8010086:	687b      	ldr	r3, [r7, #4]
 8010088:	3301      	adds	r3, #1
 801008a:	4a77      	ldr	r2, [pc, #476]	; (8010268 <pass_route3+0x274>)
 801008c:	5cd3      	ldrb	r3, [r2, r3]
 801008e:	2b11      	cmp	r3, #17
 8010090:	d115      	bne.n	80100be <pass_route3+0xca>
 8010092:	687b      	ldr	r3, [r7, #4]
 8010094:	3302      	adds	r3, #2
 8010096:	4a74      	ldr	r2, [pc, #464]	; (8010268 <pass_route3+0x274>)
 8010098:	5cd3      	ldrb	r3, [r2, r3]
 801009a:	2b77      	cmp	r3, #119	; 0x77
 801009c:	d10f      	bne.n	80100be <pass_route3+0xca>
			s_flag = 0;
 801009e:	2300      	movs	r3, #0
 80100a0:	70fb      	strb	r3, [r7, #3]
			pass[p] = -4;							//a大回り左90
 80100a2:	78bb      	ldrb	r3, [r7, #2]
 80100a4:	4a6f      	ldr	r2, [pc, #444]	; (8010264 <pass_route3+0x270>)
 80100a6:	21fc      	movs	r1, #252	; 0xfc
 80100a8:	54d1      	strb	r1, [r2, r3]
			if(i == 0){								//aスタート時の走行モード切り替えフラグ
 80100aa:	687b      	ldr	r3, [r7, #4]
 80100ac:	2b00      	cmp	r3, #0
 80100ae:	d102      	bne.n	80100b6 <pass_route3+0xc2>
				start_mode = 2;
 80100b0:	4b6e      	ldr	r3, [pc, #440]	; (801026c <pass_route3+0x278>)
 80100b2:	2202      	movs	r2, #2
 80100b4:	701a      	strb	r2, [r3, #0]
			}
			i = i + 3;
 80100b6:	687b      	ldr	r3, [r7, #4]
 80100b8:	3303      	adds	r3, #3
 80100ba:	607b      	str	r3, [r7, #4]
 80100bc:	e2db      	b.n	8010676 <pass_route3+0x682>
		}else if(route[i] == 0x77 && route[i+1] == 0x44 && route[i+2] == 0x44 && route[i+3] == 0x77){
 80100be:	4a6a      	ldr	r2, [pc, #424]	; (8010268 <pass_route3+0x274>)
 80100c0:	687b      	ldr	r3, [r7, #4]
 80100c2:	4413      	add	r3, r2
 80100c4:	781b      	ldrb	r3, [r3, #0]
 80100c6:	2b77      	cmp	r3, #119	; 0x77
 80100c8:	d11b      	bne.n	8010102 <pass_route3+0x10e>
 80100ca:	687b      	ldr	r3, [r7, #4]
 80100cc:	3301      	adds	r3, #1
 80100ce:	4a66      	ldr	r2, [pc, #408]	; (8010268 <pass_route3+0x274>)
 80100d0:	5cd3      	ldrb	r3, [r2, r3]
 80100d2:	2b44      	cmp	r3, #68	; 0x44
 80100d4:	d115      	bne.n	8010102 <pass_route3+0x10e>
 80100d6:	687b      	ldr	r3, [r7, #4]
 80100d8:	3302      	adds	r3, #2
 80100da:	4a63      	ldr	r2, [pc, #396]	; (8010268 <pass_route3+0x274>)
 80100dc:	5cd3      	ldrb	r3, [r2, r3]
 80100de:	2b44      	cmp	r3, #68	; 0x44
 80100e0:	d10f      	bne.n	8010102 <pass_route3+0x10e>
 80100e2:	687b      	ldr	r3, [r7, #4]
 80100e4:	3303      	adds	r3, #3
 80100e6:	4a60      	ldr	r2, [pc, #384]	; (8010268 <pass_route3+0x274>)
 80100e8:	5cd3      	ldrb	r3, [r2, r3]
 80100ea:	2b77      	cmp	r3, #119	; 0x77
 80100ec:	d109      	bne.n	8010102 <pass_route3+0x10e>
			s_flag = 0;
 80100ee:	2300      	movs	r3, #0
 80100f0:	70fb      	strb	r3, [r7, #3]
			pass[p] = -5;							//a大回り右180
 80100f2:	78bb      	ldrb	r3, [r7, #2]
 80100f4:	4a5b      	ldr	r2, [pc, #364]	; (8010264 <pass_route3+0x270>)
 80100f6:	21fb      	movs	r1, #251	; 0xfb
 80100f8:	54d1      	strb	r1, [r2, r3]
			i = i + 4;
 80100fa:	687b      	ldr	r3, [r7, #4]
 80100fc:	3304      	adds	r3, #4
 80100fe:	607b      	str	r3, [r7, #4]
 8010100:	e2b9      	b.n	8010676 <pass_route3+0x682>
		}else if(route[i] == 0x77 && route[i+1] == 0x11 && route[i+2] == 0x11 && route[i+3] == 0x77){
 8010102:	4a59      	ldr	r2, [pc, #356]	; (8010268 <pass_route3+0x274>)
 8010104:	687b      	ldr	r3, [r7, #4]
 8010106:	4413      	add	r3, r2
 8010108:	781b      	ldrb	r3, [r3, #0]
 801010a:	2b77      	cmp	r3, #119	; 0x77
 801010c:	d11b      	bne.n	8010146 <pass_route3+0x152>
 801010e:	687b      	ldr	r3, [r7, #4]
 8010110:	3301      	adds	r3, #1
 8010112:	4a55      	ldr	r2, [pc, #340]	; (8010268 <pass_route3+0x274>)
 8010114:	5cd3      	ldrb	r3, [r2, r3]
 8010116:	2b11      	cmp	r3, #17
 8010118:	d115      	bne.n	8010146 <pass_route3+0x152>
 801011a:	687b      	ldr	r3, [r7, #4]
 801011c:	3302      	adds	r3, #2
 801011e:	4a52      	ldr	r2, [pc, #328]	; (8010268 <pass_route3+0x274>)
 8010120:	5cd3      	ldrb	r3, [r2, r3]
 8010122:	2b11      	cmp	r3, #17
 8010124:	d10f      	bne.n	8010146 <pass_route3+0x152>
 8010126:	687b      	ldr	r3, [r7, #4]
 8010128:	3303      	adds	r3, #3
 801012a:	4a4f      	ldr	r2, [pc, #316]	; (8010268 <pass_route3+0x274>)
 801012c:	5cd3      	ldrb	r3, [r2, r3]
 801012e:	2b77      	cmp	r3, #119	; 0x77
 8010130:	d109      	bne.n	8010146 <pass_route3+0x152>
			s_flag = 0;
 8010132:	2300      	movs	r3, #0
 8010134:	70fb      	strb	r3, [r7, #3]
			pass[p] = -6;							//a大回り左180
 8010136:	78bb      	ldrb	r3, [r7, #2]
 8010138:	4a4a      	ldr	r2, [pc, #296]	; (8010264 <pass_route3+0x270>)
 801013a:	21fa      	movs	r1, #250	; 0xfa
 801013c:	54d1      	strb	r1, [r2, r3]
			i = i + 4;
 801013e:	687b      	ldr	r3, [r7, #4]
 8010140:	3304      	adds	r3, #4
 8010142:	607b      	str	r3, [r7, #4]
 8010144:	e297      	b.n	8010676 <pass_route3+0x682>
		}else if(route[i] == 0x77 && route[i+1] == 0x44 && route[i+2] == 0x11){
 8010146:	4a48      	ldr	r2, [pc, #288]	; (8010268 <pass_route3+0x274>)
 8010148:	687b      	ldr	r3, [r7, #4]
 801014a:	4413      	add	r3, r2
 801014c:	781b      	ldrb	r3, [r3, #0]
 801014e:	2b77      	cmp	r3, #119	; 0x77
 8010150:	d120      	bne.n	8010194 <pass_route3+0x1a0>
 8010152:	687b      	ldr	r3, [r7, #4]
 8010154:	3301      	adds	r3, #1
 8010156:	4a44      	ldr	r2, [pc, #272]	; (8010268 <pass_route3+0x274>)
 8010158:	5cd3      	ldrb	r3, [r2, r3]
 801015a:	2b44      	cmp	r3, #68	; 0x44
 801015c:	d11a      	bne.n	8010194 <pass_route3+0x1a0>
 801015e:	687b      	ldr	r3, [r7, #4]
 8010160:	3302      	adds	r3, #2
 8010162:	4a41      	ldr	r2, [pc, #260]	; (8010268 <pass_route3+0x274>)
 8010164:	5cd3      	ldrb	r3, [r2, r3]
 8010166:	2b11      	cmp	r3, #17
 8010168:	d114      	bne.n	8010194 <pass_route3+0x1a0>
			s_flag = 0;
 801016a:	2300      	movs	r3, #0
 801016c:	70fb      	strb	r3, [r7, #3]
			pass[p] = -7;							//a斜め右V45in
 801016e:	78bb      	ldrb	r3, [r7, #2]
 8010170:	4a3c      	ldr	r2, [pc, #240]	; (8010264 <pass_route3+0x270>)
 8010172:	21f9      	movs	r1, #249	; 0xf9
 8010174:	54d1      	strb	r1, [r2, r3]
			MF2.FLAG.V = 1;
 8010176:	4a3a      	ldr	r2, [pc, #232]	; (8010260 <pass_route3+0x26c>)
 8010178:	8813      	ldrh	r3, [r2, #0]
 801017a:	f043 0308 	orr.w	r3, r3, #8
 801017e:	8013      	strh	r3, [r2, #0]
			if(i == 0){								//aスタート時の走行モード切り替えフラグ
 8010180:	687b      	ldr	r3, [r7, #4]
 8010182:	2b00      	cmp	r3, #0
 8010184:	d102      	bne.n	801018c <pass_route3+0x198>
				start_mode = 2;
 8010186:	4b39      	ldr	r3, [pc, #228]	; (801026c <pass_route3+0x278>)
 8010188:	2202      	movs	r2, #2
 801018a:	701a      	strb	r2, [r3, #0]
			}
			i = i + 2;
 801018c:	687b      	ldr	r3, [r7, #4]
 801018e:	3302      	adds	r3, #2
 8010190:	607b      	str	r3, [r7, #4]
 8010192:	e270      	b.n	8010676 <pass_route3+0x682>
		}else if(MF2.FLAG.V == 1 && route[i] == 0x44 && route[i+1] == 0x77){
 8010194:	4b32      	ldr	r3, [pc, #200]	; (8010260 <pass_route3+0x26c>)
 8010196:	881b      	ldrh	r3, [r3, #0]
 8010198:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 801019c:	b2db      	uxtb	r3, r3
 801019e:	2b01      	cmp	r3, #1
 80101a0:	d11a      	bne.n	80101d8 <pass_route3+0x1e4>
 80101a2:	4a31      	ldr	r2, [pc, #196]	; (8010268 <pass_route3+0x274>)
 80101a4:	687b      	ldr	r3, [r7, #4]
 80101a6:	4413      	add	r3, r2
 80101a8:	781b      	ldrb	r3, [r3, #0]
 80101aa:	2b44      	cmp	r3, #68	; 0x44
 80101ac:	d114      	bne.n	80101d8 <pass_route3+0x1e4>
 80101ae:	687b      	ldr	r3, [r7, #4]
 80101b0:	3301      	adds	r3, #1
 80101b2:	4a2d      	ldr	r2, [pc, #180]	; (8010268 <pass_route3+0x274>)
 80101b4:	5cd3      	ldrb	r3, [r2, r3]
 80101b6:	2b77      	cmp	r3, #119	; 0x77
 80101b8:	d10e      	bne.n	80101d8 <pass_route3+0x1e4>
			s_flag = 0;
 80101ba:	2300      	movs	r3, #0
 80101bc:	70fb      	strb	r3, [r7, #3]
			pass[p] = -7;							//a斜め右V45out
 80101be:	78bb      	ldrb	r3, [r7, #2]
 80101c0:	4a28      	ldr	r2, [pc, #160]	; (8010264 <pass_route3+0x270>)
 80101c2:	21f9      	movs	r1, #249	; 0xf9
 80101c4:	54d1      	strb	r1, [r2, r3]
			MF2.FLAG.V = 0;
 80101c6:	4a26      	ldr	r2, [pc, #152]	; (8010260 <pass_route3+0x26c>)
 80101c8:	8813      	ldrh	r3, [r2, #0]
 80101ca:	f36f 03c3 	bfc	r3, #3, #1
 80101ce:	8013      	strh	r3, [r2, #0]
			i = i + 2;
 80101d0:	687b      	ldr	r3, [r7, #4]
 80101d2:	3302      	adds	r3, #2
 80101d4:	607b      	str	r3, [r7, #4]
 80101d6:	e24e      	b.n	8010676 <pass_route3+0x682>
		}else if(route[i] == 0x77 && route[i+1] == 0x11 && route[i+2] == 0x44){
 80101d8:	4a23      	ldr	r2, [pc, #140]	; (8010268 <pass_route3+0x274>)
 80101da:	687b      	ldr	r3, [r7, #4]
 80101dc:	4413      	add	r3, r2
 80101de:	781b      	ldrb	r3, [r3, #0]
 80101e0:	2b77      	cmp	r3, #119	; 0x77
 80101e2:	d11a      	bne.n	801021a <pass_route3+0x226>
 80101e4:	687b      	ldr	r3, [r7, #4]
 80101e6:	3301      	adds	r3, #1
 80101e8:	4a1f      	ldr	r2, [pc, #124]	; (8010268 <pass_route3+0x274>)
 80101ea:	5cd3      	ldrb	r3, [r2, r3]
 80101ec:	2b11      	cmp	r3, #17
 80101ee:	d114      	bne.n	801021a <pass_route3+0x226>
 80101f0:	687b      	ldr	r3, [r7, #4]
 80101f2:	3302      	adds	r3, #2
 80101f4:	4a1c      	ldr	r2, [pc, #112]	; (8010268 <pass_route3+0x274>)
 80101f6:	5cd3      	ldrb	r3, [r2, r3]
 80101f8:	2b44      	cmp	r3, #68	; 0x44
 80101fa:	d10e      	bne.n	801021a <pass_route3+0x226>
			s_flag = 0;
 80101fc:	2300      	movs	r3, #0
 80101fe:	70fb      	strb	r3, [r7, #3]
			pass[p] = -8;							//a斜め左V45in
 8010200:	78bb      	ldrb	r3, [r7, #2]
 8010202:	4a18      	ldr	r2, [pc, #96]	; (8010264 <pass_route3+0x270>)
 8010204:	21f8      	movs	r1, #248	; 0xf8
 8010206:	54d1      	strb	r1, [r2, r3]
			MF2.FLAG.V = 1;
 8010208:	4a15      	ldr	r2, [pc, #84]	; (8010260 <pass_route3+0x26c>)
 801020a:	8813      	ldrh	r3, [r2, #0]
 801020c:	f043 0308 	orr.w	r3, r3, #8
 8010210:	8013      	strh	r3, [r2, #0]
			i = i + 2;
 8010212:	687b      	ldr	r3, [r7, #4]
 8010214:	3302      	adds	r3, #2
 8010216:	607b      	str	r3, [r7, #4]
 8010218:	e22d      	b.n	8010676 <pass_route3+0x682>
		}else if(MF2.FLAG.V == 1 && route[i] == 0x11 && route[i+1] == 0x77){
 801021a:	4b11      	ldr	r3, [pc, #68]	; (8010260 <pass_route3+0x26c>)
 801021c:	881b      	ldrh	r3, [r3, #0]
 801021e:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8010222:	b2db      	uxtb	r3, r3
 8010224:	2b01      	cmp	r3, #1
 8010226:	d123      	bne.n	8010270 <pass_route3+0x27c>
 8010228:	4a0f      	ldr	r2, [pc, #60]	; (8010268 <pass_route3+0x274>)
 801022a:	687b      	ldr	r3, [r7, #4]
 801022c:	4413      	add	r3, r2
 801022e:	781b      	ldrb	r3, [r3, #0]
 8010230:	2b11      	cmp	r3, #17
 8010232:	d11d      	bne.n	8010270 <pass_route3+0x27c>
 8010234:	687b      	ldr	r3, [r7, #4]
 8010236:	3301      	adds	r3, #1
 8010238:	4a0b      	ldr	r2, [pc, #44]	; (8010268 <pass_route3+0x274>)
 801023a:	5cd3      	ldrb	r3, [r2, r3]
 801023c:	2b77      	cmp	r3, #119	; 0x77
 801023e:	d117      	bne.n	8010270 <pass_route3+0x27c>
			s_flag = 0;
 8010240:	2300      	movs	r3, #0
 8010242:	70fb      	strb	r3, [r7, #3]
			pass[p] = -8;							//a斜め左V45out
 8010244:	78bb      	ldrb	r3, [r7, #2]
 8010246:	4a07      	ldr	r2, [pc, #28]	; (8010264 <pass_route3+0x270>)
 8010248:	21f8      	movs	r1, #248	; 0xf8
 801024a:	54d1      	strb	r1, [r2, r3]
			MF2.FLAG.V = 0;
 801024c:	4a04      	ldr	r2, [pc, #16]	; (8010260 <pass_route3+0x26c>)
 801024e:	8813      	ldrh	r3, [r2, #0]
 8010250:	f36f 03c3 	bfc	r3, #3, #1
 8010254:	8013      	strh	r3, [r2, #0]
			i = i + 2;
 8010256:	687b      	ldr	r3, [r7, #4]
 8010258:	3302      	adds	r3, #2
 801025a:	607b      	str	r3, [r7, #4]
 801025c:	e20b      	b.n	8010676 <pass_route3+0x682>
 801025e:	bf00      	nop
 8010260:	20000f64 	.word	0x20000f64
 8010264:	20000350 	.word	0x20000350
 8010268:	20000c54 	.word	0x20000c54
 801026c:	200015c8 	.word	0x200015c8
		}else if(MF2.FLAG.V == 1 && route[i] == 0x44 && route[i+1] == 0x44 && route[i+2] == 0x11){
 8010270:	4b99      	ldr	r3, [pc, #612]	; (80104d8 <pass_route3+0x4e4>)
 8010272:	881b      	ldrh	r3, [r3, #0]
 8010274:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8010278:	b2db      	uxtb	r3, r3
 801027a:	2b01      	cmp	r3, #1
 801027c:	d120      	bne.n	80102c0 <pass_route3+0x2cc>
 801027e:	4a97      	ldr	r2, [pc, #604]	; (80104dc <pass_route3+0x4e8>)
 8010280:	687b      	ldr	r3, [r7, #4]
 8010282:	4413      	add	r3, r2
 8010284:	781b      	ldrb	r3, [r3, #0]
 8010286:	2b44      	cmp	r3, #68	; 0x44
 8010288:	d11a      	bne.n	80102c0 <pass_route3+0x2cc>
 801028a:	687b      	ldr	r3, [r7, #4]
 801028c:	3301      	adds	r3, #1
 801028e:	4a93      	ldr	r2, [pc, #588]	; (80104dc <pass_route3+0x4e8>)
 8010290:	5cd3      	ldrb	r3, [r2, r3]
 8010292:	2b44      	cmp	r3, #68	; 0x44
 8010294:	d114      	bne.n	80102c0 <pass_route3+0x2cc>
 8010296:	687b      	ldr	r3, [r7, #4]
 8010298:	3302      	adds	r3, #2
 801029a:	4a90      	ldr	r2, [pc, #576]	; (80104dc <pass_route3+0x4e8>)
 801029c:	5cd3      	ldrb	r3, [r2, r3]
 801029e:	2b11      	cmp	r3, #17
 80102a0:	d10e      	bne.n	80102c0 <pass_route3+0x2cc>
			s_flag = 0;
 80102a2:	2300      	movs	r3, #0
 80102a4:	70fb      	strb	r3, [r7, #3]
			pass[p] = -9;							//a斜め右V90
 80102a6:	78bb      	ldrb	r3, [r7, #2]
 80102a8:	4a8d      	ldr	r2, [pc, #564]	; (80104e0 <pass_route3+0x4ec>)
 80102aa:	21f7      	movs	r1, #247	; 0xf7
 80102ac:	54d1      	strb	r1, [r2, r3]
			MF2.FLAG.V = 1;
 80102ae:	4a8a      	ldr	r2, [pc, #552]	; (80104d8 <pass_route3+0x4e4>)
 80102b0:	8813      	ldrh	r3, [r2, #0]
 80102b2:	f043 0308 	orr.w	r3, r3, #8
 80102b6:	8013      	strh	r3, [r2, #0]
			i = i + 2;
 80102b8:	687b      	ldr	r3, [r7, #4]
 80102ba:	3302      	adds	r3, #2
 80102bc:	607b      	str	r3, [r7, #4]
 80102be:	e1da      	b.n	8010676 <pass_route3+0x682>
		}else if(MF2.FLAG.V == 1 && route[i] == 0x11 && route[i+1] == 0x11 && route[i+2] == 0x44){
 80102c0:	4b85      	ldr	r3, [pc, #532]	; (80104d8 <pass_route3+0x4e4>)
 80102c2:	881b      	ldrh	r3, [r3, #0]
 80102c4:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80102c8:	b2db      	uxtb	r3, r3
 80102ca:	2b01      	cmp	r3, #1
 80102cc:	d120      	bne.n	8010310 <pass_route3+0x31c>
 80102ce:	4a83      	ldr	r2, [pc, #524]	; (80104dc <pass_route3+0x4e8>)
 80102d0:	687b      	ldr	r3, [r7, #4]
 80102d2:	4413      	add	r3, r2
 80102d4:	781b      	ldrb	r3, [r3, #0]
 80102d6:	2b11      	cmp	r3, #17
 80102d8:	d11a      	bne.n	8010310 <pass_route3+0x31c>
 80102da:	687b      	ldr	r3, [r7, #4]
 80102dc:	3301      	adds	r3, #1
 80102de:	4a7f      	ldr	r2, [pc, #508]	; (80104dc <pass_route3+0x4e8>)
 80102e0:	5cd3      	ldrb	r3, [r2, r3]
 80102e2:	2b11      	cmp	r3, #17
 80102e4:	d114      	bne.n	8010310 <pass_route3+0x31c>
 80102e6:	687b      	ldr	r3, [r7, #4]
 80102e8:	3302      	adds	r3, #2
 80102ea:	4a7c      	ldr	r2, [pc, #496]	; (80104dc <pass_route3+0x4e8>)
 80102ec:	5cd3      	ldrb	r3, [r2, r3]
 80102ee:	2b44      	cmp	r3, #68	; 0x44
 80102f0:	d10e      	bne.n	8010310 <pass_route3+0x31c>
			s_flag = 0;
 80102f2:	2300      	movs	r3, #0
 80102f4:	70fb      	strb	r3, [r7, #3]
			pass[p] = -10;							//a斜め左V90
 80102f6:	78bb      	ldrb	r3, [r7, #2]
 80102f8:	4a79      	ldr	r2, [pc, #484]	; (80104e0 <pass_route3+0x4ec>)
 80102fa:	21f6      	movs	r1, #246	; 0xf6
 80102fc:	54d1      	strb	r1, [r2, r3]
			MF2.FLAG.V = 1;
 80102fe:	4a76      	ldr	r2, [pc, #472]	; (80104d8 <pass_route3+0x4e4>)
 8010300:	8813      	ldrh	r3, [r2, #0]
 8010302:	f043 0308 	orr.w	r3, r3, #8
 8010306:	8013      	strh	r3, [r2, #0]
			i = i + 2;
 8010308:	687b      	ldr	r3, [r7, #4]
 801030a:	3302      	adds	r3, #2
 801030c:	607b      	str	r3, [r7, #4]
 801030e:	e1b2      	b.n	8010676 <pass_route3+0x682>
		}else if(route[i] == 0x77 && route[i+1] == 0x44 && route[i+2] == 0x44 && route[i+3] == 0x11){
 8010310:	4a72      	ldr	r2, [pc, #456]	; (80104dc <pass_route3+0x4e8>)
 8010312:	687b      	ldr	r3, [r7, #4]
 8010314:	4413      	add	r3, r2
 8010316:	781b      	ldrb	r3, [r3, #0]
 8010318:	2b77      	cmp	r3, #119	; 0x77
 801031a:	d126      	bne.n	801036a <pass_route3+0x376>
 801031c:	687b      	ldr	r3, [r7, #4]
 801031e:	3301      	adds	r3, #1
 8010320:	4a6e      	ldr	r2, [pc, #440]	; (80104dc <pass_route3+0x4e8>)
 8010322:	5cd3      	ldrb	r3, [r2, r3]
 8010324:	2b44      	cmp	r3, #68	; 0x44
 8010326:	d120      	bne.n	801036a <pass_route3+0x376>
 8010328:	687b      	ldr	r3, [r7, #4]
 801032a:	3302      	adds	r3, #2
 801032c:	4a6b      	ldr	r2, [pc, #428]	; (80104dc <pass_route3+0x4e8>)
 801032e:	5cd3      	ldrb	r3, [r2, r3]
 8010330:	2b44      	cmp	r3, #68	; 0x44
 8010332:	d11a      	bne.n	801036a <pass_route3+0x376>
 8010334:	687b      	ldr	r3, [r7, #4]
 8010336:	3303      	adds	r3, #3
 8010338:	4a68      	ldr	r2, [pc, #416]	; (80104dc <pass_route3+0x4e8>)
 801033a:	5cd3      	ldrb	r3, [r2, r3]
 801033c:	2b11      	cmp	r3, #17
 801033e:	d114      	bne.n	801036a <pass_route3+0x376>
			s_flag = 0;
 8010340:	2300      	movs	r3, #0
 8010342:	70fb      	strb	r3, [r7, #3]
			pass[p] = -11;							//a斜め右V135in
 8010344:	78bb      	ldrb	r3, [r7, #2]
 8010346:	4a66      	ldr	r2, [pc, #408]	; (80104e0 <pass_route3+0x4ec>)
 8010348:	21f5      	movs	r1, #245	; 0xf5
 801034a:	54d1      	strb	r1, [r2, r3]
			MF2.FLAG.V = 1;
 801034c:	4a62      	ldr	r2, [pc, #392]	; (80104d8 <pass_route3+0x4e4>)
 801034e:	8813      	ldrh	r3, [r2, #0]
 8010350:	f043 0308 	orr.w	r3, r3, #8
 8010354:	8013      	strh	r3, [r2, #0]
			if(i == 0){								//aスタート時の走行モード切り替えフラグ
 8010356:	687b      	ldr	r3, [r7, #4]
 8010358:	2b00      	cmp	r3, #0
 801035a:	d102      	bne.n	8010362 <pass_route3+0x36e>
				start_mode = 2;
 801035c:	4b61      	ldr	r3, [pc, #388]	; (80104e4 <pass_route3+0x4f0>)
 801035e:	2202      	movs	r2, #2
 8010360:	701a      	strb	r2, [r3, #0]
			}
			i = i + 3;
 8010362:	687b      	ldr	r3, [r7, #4]
 8010364:	3303      	adds	r3, #3
 8010366:	607b      	str	r3, [r7, #4]
 8010368:	e185      	b.n	8010676 <pass_route3+0x682>
		}else if(MF2.FLAG.V == 1 && route[i] == 0x44 && route[i+1] == 0x44 && route[i+2] == 0x77){
 801036a:	4b5b      	ldr	r3, [pc, #364]	; (80104d8 <pass_route3+0x4e4>)
 801036c:	881b      	ldrh	r3, [r3, #0]
 801036e:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8010372:	b2db      	uxtb	r3, r3
 8010374:	2b01      	cmp	r3, #1
 8010376:	d120      	bne.n	80103ba <pass_route3+0x3c6>
 8010378:	4a58      	ldr	r2, [pc, #352]	; (80104dc <pass_route3+0x4e8>)
 801037a:	687b      	ldr	r3, [r7, #4]
 801037c:	4413      	add	r3, r2
 801037e:	781b      	ldrb	r3, [r3, #0]
 8010380:	2b44      	cmp	r3, #68	; 0x44
 8010382:	d11a      	bne.n	80103ba <pass_route3+0x3c6>
 8010384:	687b      	ldr	r3, [r7, #4]
 8010386:	3301      	adds	r3, #1
 8010388:	4a54      	ldr	r2, [pc, #336]	; (80104dc <pass_route3+0x4e8>)
 801038a:	5cd3      	ldrb	r3, [r2, r3]
 801038c:	2b44      	cmp	r3, #68	; 0x44
 801038e:	d114      	bne.n	80103ba <pass_route3+0x3c6>
 8010390:	687b      	ldr	r3, [r7, #4]
 8010392:	3302      	adds	r3, #2
 8010394:	4a51      	ldr	r2, [pc, #324]	; (80104dc <pass_route3+0x4e8>)
 8010396:	5cd3      	ldrb	r3, [r2, r3]
 8010398:	2b77      	cmp	r3, #119	; 0x77
 801039a:	d10e      	bne.n	80103ba <pass_route3+0x3c6>
			s_flag = 0;
 801039c:	2300      	movs	r3, #0
 801039e:	70fb      	strb	r3, [r7, #3]
			pass[p] = -11;							//a斜め右V135out
 80103a0:	78bb      	ldrb	r3, [r7, #2]
 80103a2:	4a4f      	ldr	r2, [pc, #316]	; (80104e0 <pass_route3+0x4ec>)
 80103a4:	21f5      	movs	r1, #245	; 0xf5
 80103a6:	54d1      	strb	r1, [r2, r3]
			MF2.FLAG.V = 0;
 80103a8:	4a4b      	ldr	r2, [pc, #300]	; (80104d8 <pass_route3+0x4e4>)
 80103aa:	8813      	ldrh	r3, [r2, #0]
 80103ac:	f36f 03c3 	bfc	r3, #3, #1
 80103b0:	8013      	strh	r3, [r2, #0]
			i = i + 3;
 80103b2:	687b      	ldr	r3, [r7, #4]
 80103b4:	3303      	adds	r3, #3
 80103b6:	607b      	str	r3, [r7, #4]
 80103b8:	e15d      	b.n	8010676 <pass_route3+0x682>
		}else if(route[i] == 0x77 && route[i+1] == 0x11 && route[i+2] == 0x11 && route[i+3] == 0x44){
 80103ba:	4a48      	ldr	r2, [pc, #288]	; (80104dc <pass_route3+0x4e8>)
 80103bc:	687b      	ldr	r3, [r7, #4]
 80103be:	4413      	add	r3, r2
 80103c0:	781b      	ldrb	r3, [r3, #0]
 80103c2:	2b77      	cmp	r3, #119	; 0x77
 80103c4:	d120      	bne.n	8010408 <pass_route3+0x414>
 80103c6:	687b      	ldr	r3, [r7, #4]
 80103c8:	3301      	adds	r3, #1
 80103ca:	4a44      	ldr	r2, [pc, #272]	; (80104dc <pass_route3+0x4e8>)
 80103cc:	5cd3      	ldrb	r3, [r2, r3]
 80103ce:	2b11      	cmp	r3, #17
 80103d0:	d11a      	bne.n	8010408 <pass_route3+0x414>
 80103d2:	687b      	ldr	r3, [r7, #4]
 80103d4:	3302      	adds	r3, #2
 80103d6:	4a41      	ldr	r2, [pc, #260]	; (80104dc <pass_route3+0x4e8>)
 80103d8:	5cd3      	ldrb	r3, [r2, r3]
 80103da:	2b11      	cmp	r3, #17
 80103dc:	d114      	bne.n	8010408 <pass_route3+0x414>
 80103de:	687b      	ldr	r3, [r7, #4]
 80103e0:	3303      	adds	r3, #3
 80103e2:	4a3e      	ldr	r2, [pc, #248]	; (80104dc <pass_route3+0x4e8>)
 80103e4:	5cd3      	ldrb	r3, [r2, r3]
 80103e6:	2b44      	cmp	r3, #68	; 0x44
 80103e8:	d10e      	bne.n	8010408 <pass_route3+0x414>
			s_flag = 0;
 80103ea:	2300      	movs	r3, #0
 80103ec:	70fb      	strb	r3, [r7, #3]
			pass[p] = -12;							//a斜め左V135in
 80103ee:	78bb      	ldrb	r3, [r7, #2]
 80103f0:	4a3b      	ldr	r2, [pc, #236]	; (80104e0 <pass_route3+0x4ec>)
 80103f2:	21f4      	movs	r1, #244	; 0xf4
 80103f4:	54d1      	strb	r1, [r2, r3]
			MF2.FLAG.V = 1;
 80103f6:	4a38      	ldr	r2, [pc, #224]	; (80104d8 <pass_route3+0x4e4>)
 80103f8:	8813      	ldrh	r3, [r2, #0]
 80103fa:	f043 0308 	orr.w	r3, r3, #8
 80103fe:	8013      	strh	r3, [r2, #0]
			i = i + 3;
 8010400:	687b      	ldr	r3, [r7, #4]
 8010402:	3303      	adds	r3, #3
 8010404:	607b      	str	r3, [r7, #4]
 8010406:	e136      	b.n	8010676 <pass_route3+0x682>
		}else if(MF2.FLAG.V == 1 && route[i] == 0x11 && route[i+1] == 0x11 && route[i+2] == 0x77){
 8010408:	4b33      	ldr	r3, [pc, #204]	; (80104d8 <pass_route3+0x4e4>)
 801040a:	881b      	ldrh	r3, [r3, #0]
 801040c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8010410:	b2db      	uxtb	r3, r3
 8010412:	2b01      	cmp	r3, #1
 8010414:	d120      	bne.n	8010458 <pass_route3+0x464>
 8010416:	4a31      	ldr	r2, [pc, #196]	; (80104dc <pass_route3+0x4e8>)
 8010418:	687b      	ldr	r3, [r7, #4]
 801041a:	4413      	add	r3, r2
 801041c:	781b      	ldrb	r3, [r3, #0]
 801041e:	2b11      	cmp	r3, #17
 8010420:	d11a      	bne.n	8010458 <pass_route3+0x464>
 8010422:	687b      	ldr	r3, [r7, #4]
 8010424:	3301      	adds	r3, #1
 8010426:	4a2d      	ldr	r2, [pc, #180]	; (80104dc <pass_route3+0x4e8>)
 8010428:	5cd3      	ldrb	r3, [r2, r3]
 801042a:	2b11      	cmp	r3, #17
 801042c:	d114      	bne.n	8010458 <pass_route3+0x464>
 801042e:	687b      	ldr	r3, [r7, #4]
 8010430:	3302      	adds	r3, #2
 8010432:	4a2a      	ldr	r2, [pc, #168]	; (80104dc <pass_route3+0x4e8>)
 8010434:	5cd3      	ldrb	r3, [r2, r3]
 8010436:	2b77      	cmp	r3, #119	; 0x77
 8010438:	d10e      	bne.n	8010458 <pass_route3+0x464>
			s_flag = 0;
 801043a:	2300      	movs	r3, #0
 801043c:	70fb      	strb	r3, [r7, #3]
			pass[p] = -12;							//a斜め左V135out
 801043e:	78bb      	ldrb	r3, [r7, #2]
 8010440:	4a27      	ldr	r2, [pc, #156]	; (80104e0 <pass_route3+0x4ec>)
 8010442:	21f4      	movs	r1, #244	; 0xf4
 8010444:	54d1      	strb	r1, [r2, r3]
			MF2.FLAG.V = 0;
 8010446:	4a24      	ldr	r2, [pc, #144]	; (80104d8 <pass_route3+0x4e4>)
 8010448:	8813      	ldrh	r3, [r2, #0]
 801044a:	f36f 03c3 	bfc	r3, #3, #1
 801044e:	8013      	strh	r3, [r2, #0]
			i = i + 3;
 8010450:	687b      	ldr	r3, [r7, #4]
 8010452:	3303      	adds	r3, #3
 8010454:	607b      	str	r3, [r7, #4]
 8010456:	e10e      	b.n	8010676 <pass_route3+0x682>
		}else if(route[i] == 0xff){
 8010458:	4a20      	ldr	r2, [pc, #128]	; (80104dc <pass_route3+0x4e8>)
 801045a:	687b      	ldr	r3, [r7, #4]
 801045c:	4413      	add	r3, r2
 801045e:	781b      	ldrb	r3, [r3, #0]
 8010460:	2bff      	cmp	r3, #255	; 0xff
 8010462:	d16a      	bne.n	801053a <pass_route3+0x546>
			if(MF2.FLAG.V == 1){
 8010464:	4b1c      	ldr	r3, [pc, #112]	; (80104d8 <pass_route3+0x4e4>)
 8010466:	881b      	ldrh	r3, [r3, #0]
 8010468:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 801046c:	b2db      	uxtb	r3, r3
 801046e:	2b01      	cmp	r3, #1
 8010470:	d15b      	bne.n	801052a <pass_route3+0x536>
				if(pass[p-1] == -1 && pass[p-2] == -1){
 8010472:	78bb      	ldrb	r3, [r7, #2]
 8010474:	3b01      	subs	r3, #1
 8010476:	4a1a      	ldr	r2, [pc, #104]	; (80104e0 <pass_route3+0x4ec>)
 8010478:	56d3      	ldrsb	r3, [r2, r3]
 801047a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801047e:	d111      	bne.n	80104a4 <pass_route3+0x4b0>
 8010480:	78bb      	ldrb	r3, [r7, #2]
 8010482:	3b02      	subs	r3, #2
 8010484:	4a16      	ldr	r2, [pc, #88]	; (80104e0 <pass_route3+0x4ec>)
 8010486:	56d3      	ldrsb	r3, [r2, r3]
 8010488:	f1b3 3fff 	cmp.w	r3, #4294967295
 801048c:	d10a      	bne.n	80104a4 <pass_route3+0x4b0>
					pass[p-2] = -15;
 801048e:	78bb      	ldrb	r3, [r7, #2]
 8010490:	3b02      	subs	r3, #2
 8010492:	4a13      	ldr	r2, [pc, #76]	; (80104e0 <pass_route3+0x4ec>)
 8010494:	21f1      	movs	r1, #241	; 0xf1
 8010496:	54d1      	strb	r1, [r2, r3]
					pass[p-1] = -114;
 8010498:	78bb      	ldrb	r3, [r7, #2]
 801049a:	3b01      	subs	r3, #1
 801049c:	4a10      	ldr	r2, [pc, #64]	; (80104e0 <pass_route3+0x4ec>)
 801049e:	218e      	movs	r1, #142	; 0x8e
 80104a0:	54d1      	strb	r1, [r2, r3]
 80104a2:	e042      	b.n	801052a <pass_route3+0x536>
				}else if(pass[p-1] == -2 && pass[p-2] == -2){
 80104a4:	78bb      	ldrb	r3, [r7, #2]
 80104a6:	3b01      	subs	r3, #1
 80104a8:	4a0d      	ldr	r2, [pc, #52]	; (80104e0 <pass_route3+0x4ec>)
 80104aa:	56d3      	ldrsb	r3, [r2, r3]
 80104ac:	f113 0f02 	cmn.w	r3, #2
 80104b0:	d11a      	bne.n	80104e8 <pass_route3+0x4f4>
 80104b2:	78bb      	ldrb	r3, [r7, #2]
 80104b4:	3b02      	subs	r3, #2
 80104b6:	4a0a      	ldr	r2, [pc, #40]	; (80104e0 <pass_route3+0x4ec>)
 80104b8:	56d3      	ldrsb	r3, [r2, r3]
 80104ba:	f113 0f02 	cmn.w	r3, #2
 80104be:	d113      	bne.n	80104e8 <pass_route3+0x4f4>
					pass[p-2] = -16;
 80104c0:	78bb      	ldrb	r3, [r7, #2]
 80104c2:	3b02      	subs	r3, #2
 80104c4:	4a06      	ldr	r2, [pc, #24]	; (80104e0 <pass_route3+0x4ec>)
 80104c6:	21f0      	movs	r1, #240	; 0xf0
 80104c8:	54d1      	strb	r1, [r2, r3]
					pass[p-1] = -114;
 80104ca:	78bb      	ldrb	r3, [r7, #2]
 80104cc:	3b01      	subs	r3, #1
 80104ce:	4a04      	ldr	r2, [pc, #16]	; (80104e0 <pass_route3+0x4ec>)
 80104d0:	218e      	movs	r1, #142	; 0x8e
 80104d2:	54d1      	strb	r1, [r2, r3]
 80104d4:	e029      	b.n	801052a <pass_route3+0x536>
 80104d6:	bf00      	nop
 80104d8:	20000f64 	.word	0x20000f64
 80104dc:	20000c54 	.word	0x20000c54
 80104e0:	20000350 	.word	0x20000350
 80104e4:	200015c8 	.word	0x200015c8
				}else if(pass[p-1] == -1){
 80104e8:	78bb      	ldrb	r3, [r7, #2]
 80104ea:	3b01      	subs	r3, #1
 80104ec:	4a6a      	ldr	r2, [pc, #424]	; (8010698 <pass_route3+0x6a4>)
 80104ee:	56d3      	ldrsb	r3, [r2, r3]
 80104f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80104f4:	d109      	bne.n	801050a <pass_route3+0x516>
					pass[p-1] = -13;
 80104f6:	78bb      	ldrb	r3, [r7, #2]
 80104f8:	3b01      	subs	r3, #1
 80104fa:	4a67      	ldr	r2, [pc, #412]	; (8010698 <pass_route3+0x6a4>)
 80104fc:	21f3      	movs	r1, #243	; 0xf3
 80104fe:	54d1      	strb	r1, [r2, r3]
					pass[p] = -114;
 8010500:	78bb      	ldrb	r3, [r7, #2]
 8010502:	4a65      	ldr	r2, [pc, #404]	; (8010698 <pass_route3+0x6a4>)
 8010504:	218e      	movs	r1, #142	; 0x8e
 8010506:	54d1      	strb	r1, [r2, r3]
 8010508:	e00f      	b.n	801052a <pass_route3+0x536>
				}else if(pass[p-1] == -2){
 801050a:	78bb      	ldrb	r3, [r7, #2]
 801050c:	3b01      	subs	r3, #1
 801050e:	4a62      	ldr	r2, [pc, #392]	; (8010698 <pass_route3+0x6a4>)
 8010510:	56d3      	ldrsb	r3, [r2, r3]
 8010512:	f113 0f02 	cmn.w	r3, #2
 8010516:	d108      	bne.n	801052a <pass_route3+0x536>
					pass[p-1] = -14;
 8010518:	78bb      	ldrb	r3, [r7, #2]
 801051a:	3b01      	subs	r3, #1
 801051c:	4a5e      	ldr	r2, [pc, #376]	; (8010698 <pass_route3+0x6a4>)
 801051e:	21f2      	movs	r1, #242	; 0xf2
 8010520:	54d1      	strb	r1, [r2, r3]
					pass[p] = -114;
 8010522:	78bb      	ldrb	r3, [r7, #2]
 8010524:	4a5c      	ldr	r2, [pc, #368]	; (8010698 <pass_route3+0x6a4>)
 8010526:	218e      	movs	r1, #142	; 0x8e
 8010528:	54d1      	strb	r1, [r2, r3]
				}
			}
			pass[p] = -114;							//a終了用配列
 801052a:	78bb      	ldrb	r3, [r7, #2]
 801052c:	4a5a      	ldr	r2, [pc, #360]	; (8010698 <pass_route3+0x6a4>)
 801052e:	218e      	movs	r1, #142	; 0x8e
 8010530:	54d1      	strb	r1, [r2, r3]
			i++;
 8010532:	687b      	ldr	r3, [r7, #4]
 8010534:	3301      	adds	r3, #1
 8010536:	607b      	str	r3, [r7, #4]
 8010538:	e09d      	b.n	8010676 <pass_route3+0x682>
		}else if(MF2.FLAG.V == 1 && route[i] == 0x44 && route[i+1] == 0x11){
 801053a:	4b58      	ldr	r3, [pc, #352]	; (801069c <pass_route3+0x6a8>)
 801053c:	881b      	ldrh	r3, [r3, #0]
 801053e:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8010542:	b2db      	uxtb	r3, r3
 8010544:	2b01      	cmp	r3, #1
 8010546:	d11a      	bne.n	801057e <pass_route3+0x58a>
 8010548:	4a55      	ldr	r2, [pc, #340]	; (80106a0 <pass_route3+0x6ac>)
 801054a:	687b      	ldr	r3, [r7, #4]
 801054c:	4413      	add	r3, r2
 801054e:	781b      	ldrb	r3, [r3, #0]
 8010550:	2b44      	cmp	r3, #68	; 0x44
 8010552:	d114      	bne.n	801057e <pass_route3+0x58a>
 8010554:	687b      	ldr	r3, [r7, #4]
 8010556:	3301      	adds	r3, #1
 8010558:	4a51      	ldr	r2, [pc, #324]	; (80106a0 <pass_route3+0x6ac>)
 801055a:	5cd3      	ldrb	r3, [r2, r3]
 801055c:	2b11      	cmp	r3, #17
 801055e:	d10e      	bne.n	801057e <pass_route3+0x58a>
			s_flag = 0;
 8010560:	2300      	movs	r3, #0
 8010562:	70fb      	strb	r3, [r7, #3]
			pass[p] = 64;							//a斜め半直線
 8010564:	78bb      	ldrb	r3, [r7, #2]
 8010566:	4a4c      	ldr	r2, [pc, #304]	; (8010698 <pass_route3+0x6a4>)
 8010568:	2140      	movs	r1, #64	; 0x40
 801056a:	54d1      	strb	r1, [r2, r3]
			MF2.FLAG.V = 1;
 801056c:	4a4b      	ldr	r2, [pc, #300]	; (801069c <pass_route3+0x6a8>)
 801056e:	8813      	ldrh	r3, [r2, #0]
 8010570:	f043 0308 	orr.w	r3, r3, #8
 8010574:	8013      	strh	r3, [r2, #0]
			i++;
 8010576:	687b      	ldr	r3, [r7, #4]
 8010578:	3301      	adds	r3, #1
 801057a:	607b      	str	r3, [r7, #4]
 801057c:	e07b      	b.n	8010676 <pass_route3+0x682>
		}else if(MF2.FLAG.V == 1 && route[i] == 0x11 && route[i+1] == 0x44){
 801057e:	4b47      	ldr	r3, [pc, #284]	; (801069c <pass_route3+0x6a8>)
 8010580:	881b      	ldrh	r3, [r3, #0]
 8010582:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8010586:	b2db      	uxtb	r3, r3
 8010588:	2b01      	cmp	r3, #1
 801058a:	d11a      	bne.n	80105c2 <pass_route3+0x5ce>
 801058c:	4a44      	ldr	r2, [pc, #272]	; (80106a0 <pass_route3+0x6ac>)
 801058e:	687b      	ldr	r3, [r7, #4]
 8010590:	4413      	add	r3, r2
 8010592:	781b      	ldrb	r3, [r3, #0]
 8010594:	2b11      	cmp	r3, #17
 8010596:	d114      	bne.n	80105c2 <pass_route3+0x5ce>
 8010598:	687b      	ldr	r3, [r7, #4]
 801059a:	3301      	adds	r3, #1
 801059c:	4a40      	ldr	r2, [pc, #256]	; (80106a0 <pass_route3+0x6ac>)
 801059e:	5cd3      	ldrb	r3, [r2, r3]
 80105a0:	2b44      	cmp	r3, #68	; 0x44
 80105a2:	d10e      	bne.n	80105c2 <pass_route3+0x5ce>
			s_flag = 0;
 80105a4:	2300      	movs	r3, #0
 80105a6:	70fb      	strb	r3, [r7, #3]
			pass[p] = 64;							//a斜め半直線
 80105a8:	78bb      	ldrb	r3, [r7, #2]
 80105aa:	4a3b      	ldr	r2, [pc, #236]	; (8010698 <pass_route3+0x6a4>)
 80105ac:	2140      	movs	r1, #64	; 0x40
 80105ae:	54d1      	strb	r1, [r2, r3]
			MF2.FLAG.V = 1;
 80105b0:	4a3a      	ldr	r2, [pc, #232]	; (801069c <pass_route3+0x6a8>)
 80105b2:	8813      	ldrh	r3, [r2, #0]
 80105b4:	f043 0308 	orr.w	r3, r3, #8
 80105b8:	8013      	strh	r3, [r2, #0]
			i++;
 80105ba:	687b      	ldr	r3, [r7, #4]
 80105bc:	3301      	adds	r3, #1
 80105be:	607b      	str	r3, [r7, #4]
 80105c0:	e059      	b.n	8010676 <pass_route3+0x682>
		}else if(route[i] == 0x44){
 80105c2:	4a37      	ldr	r2, [pc, #220]	; (80106a0 <pass_route3+0x6ac>)
 80105c4:	687b      	ldr	r3, [r7, #4]
 80105c6:	4413      	add	r3, r2
 80105c8:	781b      	ldrb	r3, [r3, #0]
 80105ca:	2b44      	cmp	r3, #68	; 0x44
 80105cc:	d107      	bne.n	80105de <pass_route3+0x5ea>
			pass[p] = -1;							//a右スラローム
 80105ce:	78bb      	ldrb	r3, [r7, #2]
 80105d0:	4a31      	ldr	r2, [pc, #196]	; (8010698 <pass_route3+0x6a4>)
 80105d2:	21ff      	movs	r1, #255	; 0xff
 80105d4:	54d1      	strb	r1, [r2, r3]
			i++;
 80105d6:	687b      	ldr	r3, [r7, #4]
 80105d8:	3301      	adds	r3, #1
 80105da:	607b      	str	r3, [r7, #4]
 80105dc:	e04b      	b.n	8010676 <pass_route3+0x682>
		}else if(route[i] == 0x11){
 80105de:	4a30      	ldr	r2, [pc, #192]	; (80106a0 <pass_route3+0x6ac>)
 80105e0:	687b      	ldr	r3, [r7, #4]
 80105e2:	4413      	add	r3, r2
 80105e4:	781b      	ldrb	r3, [r3, #0]
 80105e6:	2b11      	cmp	r3, #17
 80105e8:	d107      	bne.n	80105fa <pass_route3+0x606>
			pass[p] = -2;							//a左スラローム
 80105ea:	78bb      	ldrb	r3, [r7, #2]
 80105ec:	4a2a      	ldr	r2, [pc, #168]	; (8010698 <pass_route3+0x6a4>)
 80105ee:	21fe      	movs	r1, #254	; 0xfe
 80105f0:	54d1      	strb	r1, [r2, r3]
			i++;
 80105f2:	687b      	ldr	r3, [r7, #4]
 80105f4:	3301      	adds	r3, #1
 80105f6:	607b      	str	r3, [r7, #4]
 80105f8:	e03d      	b.n	8010676 <pass_route3+0x682>
		}else if(route[i] == 0x77){
 80105fa:	4a29      	ldr	r2, [pc, #164]	; (80106a0 <pass_route3+0x6ac>)
 80105fc:	687b      	ldr	r3, [r7, #4]
 80105fe:	4413      	add	r3, r2
 8010600:	781b      	ldrb	r3, [r3, #0]
 8010602:	2b77      	cmp	r3, #119	; 0x77
 8010604:	d137      	bne.n	8010676 <pass_route3+0x682>
			if(s_flag){
 8010606:	78fb      	ldrb	r3, [r7, #3]
 8010608:	2b00      	cmp	r3, #0
 801060a:	d012      	beq.n	8010632 <pass_route3+0x63e>
				pass[p-1]++;						//aスラローム前半直線追加
 801060c:	78bb      	ldrb	r3, [r7, #2]
 801060e:	3b01      	subs	r3, #1
 8010610:	4a21      	ldr	r2, [pc, #132]	; (8010698 <pass_route3+0x6a4>)
 8010612:	56d2      	ldrsb	r2, [r2, r3]
 8010614:	b2d2      	uxtb	r2, r2
 8010616:	3201      	adds	r2, #1
 8010618:	b2d2      	uxtb	r2, r2
 801061a:	b251      	sxtb	r1, r2
 801061c:	4a1e      	ldr	r2, [pc, #120]	; (8010698 <pass_route3+0x6a4>)
 801061e:	54d1      	strb	r1, [r2, r3]
				p--;
 8010620:	78bb      	ldrb	r3, [r7, #2]
 8010622:	3b01      	subs	r3, #1
 8010624:	70bb      	strb	r3, [r7, #2]
				s_flag = 0;
 8010626:	2300      	movs	r3, #0
 8010628:	70fb      	strb	r3, [r7, #3]
				i++;
 801062a:	687b      	ldr	r3, [r7, #4]
 801062c:	3301      	adds	r3, #1
 801062e:	607b      	str	r3, [r7, #4]
 8010630:	e021      	b.n	8010676 <pass_route3+0x682>
			}else{
				s++;
 8010632:	787b      	ldrb	r3, [r7, #1]
 8010634:	3301      	adds	r3, #1
 8010636:	707b      	strb	r3, [r7, #1]
				pass[p] = s;						//aもし半直線1つだけの場合whileには入らない
 8010638:	78bb      	ldrb	r3, [r7, #2]
 801063a:	f997 1001 	ldrsb.w	r1, [r7, #1]
 801063e:	4a16      	ldr	r2, [pc, #88]	; (8010698 <pass_route3+0x6a4>)
 8010640:	54d1      	strb	r1, [r2, r3]
				while(route[i+1] == 0x77){
 8010642:	e00c      	b.n	801065e <pass_route3+0x66a>
					s_flag = 1;
 8010644:	2301      	movs	r3, #1
 8010646:	70fb      	strb	r3, [r7, #3]
					pass[p] = s;					//a半直線2つ以上続く場合、最後半直線は大回り用に残す
 8010648:	78bb      	ldrb	r3, [r7, #2]
 801064a:	f997 1001 	ldrsb.w	r1, [r7, #1]
 801064e:	4a12      	ldr	r2, [pc, #72]	; (8010698 <pass_route3+0x6a4>)
 8010650:	54d1      	strb	r1, [r2, r3]
					i++;
 8010652:	687b      	ldr	r3, [r7, #4]
 8010654:	3301      	adds	r3, #1
 8010656:	607b      	str	r3, [r7, #4]
					s++;
 8010658:	787b      	ldrb	r3, [r7, #1]
 801065a:	3301      	adds	r3, #1
 801065c:	707b      	strb	r3, [r7, #1]
				while(route[i+1] == 0x77){
 801065e:	687b      	ldr	r3, [r7, #4]
 8010660:	3301      	adds	r3, #1
 8010662:	4a0f      	ldr	r2, [pc, #60]	; (80106a0 <pass_route3+0x6ac>)
 8010664:	5cd3      	ldrb	r3, [r2, r3]
 8010666:	2b77      	cmp	r3, #119	; 0x77
 8010668:	d0ec      	beq.n	8010644 <pass_route3+0x650>
				}
				if(!s_flag){
 801066a:	78fb      	ldrb	r3, [r7, #3]
 801066c:	2b00      	cmp	r3, #0
 801066e:	d102      	bne.n	8010676 <pass_route3+0x682>
					i++;
 8010670:	687b      	ldr	r3, [r7, #4]
 8010672:	3301      	adds	r3, #1
 8010674:	607b      	str	r3, [r7, #4]
				}
			}
		}
		p++;
 8010676:	78bb      	ldrb	r3, [r7, #2]
 8010678:	3301      	adds	r3, #1
 801067a:	70bb      	strb	r3, [r7, #2]
	while(route[i-1] != 0xff){
 801067c:	687b      	ldr	r3, [r7, #4]
 801067e:	3b01      	subs	r3, #1
 8010680:	4a07      	ldr	r2, [pc, #28]	; (80106a0 <pass_route3+0x6ac>)
 8010682:	5cd3      	ldrb	r3, [r2, r3]
 8010684:	2bff      	cmp	r3, #255	; 0xff
 8010686:	f47f acd4 	bne.w	8010032 <pass_route3+0x3e>
	}
}
 801068a:	bf00      	nop
 801068c:	370c      	adds	r7, #12
 801068e:	46bd      	mov	sp, r7
 8010690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010694:	4770      	bx	lr
 8010696:	bf00      	nop
 8010698:	20000350 	.word	0x20000350
 801069c:	20000f64 	.word	0x20000f64
 80106a0:	20000c54 	.word	0x20000c54

080106a4 <store_map_in_eeprom>:
//store_map_in_eeprom
// mapデータをeepromに格納する
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void store_map_in_eeprom(void){
 80106a4:	b580      	push	{r7, lr}
 80106a6:	b082      	sub	sp, #8
 80106a8:	af00      	add	r7, sp, #0
	printf("eprom func start \n");
 80106aa:	4818      	ldr	r0, [pc, #96]	; (801070c <store_map_in_eeprom+0x68>)
 80106ac:	f000 ff28 	bl	8011500 <puts>
	eeprom_enable_write();
 80106b0:	f7fa fe78 	bl	800b3a4 <eeprom_enable_write>
	printf("eprom enable_write fin \n");
 80106b4:	4816      	ldr	r0, [pc, #88]	; (8010710 <store_map_in_eeprom+0x6c>)
 80106b6:	f000 ff23 	bl	8011500 <puts>
	int i;
	for(i = 0; i < 16; i++){
 80106ba:	2300      	movs	r3, #0
 80106bc:	607b      	str	r3, [r7, #4]
 80106be:	e01b      	b.n	80106f8 <store_map_in_eeprom+0x54>
		int j;
		for(j = 0; j < 16; j++){
 80106c0:	2300      	movs	r3, #0
 80106c2:	603b      	str	r3, [r7, #0]
 80106c4:	e012      	b.n	80106ec <store_map_in_eeprom+0x48>
			eeprom_write_halfword(i*16 + j, (uint16_t) map[i][j]);
 80106c6:	687b      	ldr	r3, [r7, #4]
 80106c8:	011a      	lsls	r2, r3, #4
 80106ca:	683b      	ldr	r3, [r7, #0]
 80106cc:	4413      	add	r3, r2
 80106ce:	4618      	mov	r0, r3
 80106d0:	4a10      	ldr	r2, [pc, #64]	; (8010714 <store_map_in_eeprom+0x70>)
 80106d2:	687b      	ldr	r3, [r7, #4]
 80106d4:	011b      	lsls	r3, r3, #4
 80106d6:	441a      	add	r2, r3
 80106d8:	683b      	ldr	r3, [r7, #0]
 80106da:	4413      	add	r3, r2
 80106dc:	781b      	ldrb	r3, [r3, #0]
 80106de:	b29b      	uxth	r3, r3
 80106e0:	4619      	mov	r1, r3
 80106e2:	f7fa fe8a 	bl	800b3fa <eeprom_write_halfword>
		for(j = 0; j < 16; j++){
 80106e6:	683b      	ldr	r3, [r7, #0]
 80106e8:	3301      	adds	r3, #1
 80106ea:	603b      	str	r3, [r7, #0]
 80106ec:	683b      	ldr	r3, [r7, #0]
 80106ee:	2b0f      	cmp	r3, #15
 80106f0:	dde9      	ble.n	80106c6 <store_map_in_eeprom+0x22>
	for(i = 0; i < 16; i++){
 80106f2:	687b      	ldr	r3, [r7, #4]
 80106f4:	3301      	adds	r3, #1
 80106f6:	607b      	str	r3, [r7, #4]
 80106f8:	687b      	ldr	r3, [r7, #4]
 80106fa:	2b0f      	cmp	r3, #15
 80106fc:	dde0      	ble.n	80106c0 <store_map_in_eeprom+0x1c>
		}
	}
	eeprom_disable_write();
 80106fe:	f7fa fe75 	bl	800b3ec <eeprom_disable_write>
}
 8010702:	bf00      	nop
 8010704:	3708      	adds	r7, #8
 8010706:	46bd      	mov	sp, r7
 8010708:	bd80      	pop	{r7, pc}
 801070a:	bf00      	nop
 801070c:	08012a88 	.word	0x08012a88
 8010710:	08012a9c 	.word	0x08012a9c
 8010714:	200001ac 	.word	0x200001ac

08010718 <load_map_from_eeprom>:
//load_map_in_eeprom
// mapデータをeepromから取得する
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void load_map_from_eeprom(void){
 8010718:	b580      	push	{r7, lr}
 801071a:	b082      	sub	sp, #8
 801071c:	af00      	add	r7, sp, #0
	int i;
	for(i = 0; i < 16; i++){
 801071e:	2300      	movs	r3, #0
 8010720:	607b      	str	r3, [r7, #4]
 8010722:	e01c      	b.n	801075e <load_map_from_eeprom+0x46>
		int j;
		for(j = 0; j < 16; j++){
 8010724:	2300      	movs	r3, #0
 8010726:	603b      	str	r3, [r7, #0]
 8010728:	e013      	b.n	8010752 <load_map_from_eeprom+0x3a>
			map[i][j] = (uint8_t) eeprom_read_halfword(i*16 + j);
 801072a:	687b      	ldr	r3, [r7, #4]
 801072c:	011a      	lsls	r2, r3, #4
 801072e:	683b      	ldr	r3, [r7, #0]
 8010730:	4413      	add	r3, r2
 8010732:	4618      	mov	r0, r3
 8010734:	f7fa fe7e 	bl	800b434 <eeprom_read_halfword>
 8010738:	4603      	mov	r3, r0
 801073a:	b2d9      	uxtb	r1, r3
 801073c:	4a0b      	ldr	r2, [pc, #44]	; (801076c <load_map_from_eeprom+0x54>)
 801073e:	687b      	ldr	r3, [r7, #4]
 8010740:	011b      	lsls	r3, r3, #4
 8010742:	441a      	add	r2, r3
 8010744:	683b      	ldr	r3, [r7, #0]
 8010746:	4413      	add	r3, r2
 8010748:	460a      	mov	r2, r1
 801074a:	701a      	strb	r2, [r3, #0]
		for(j = 0; j < 16; j++){
 801074c:	683b      	ldr	r3, [r7, #0]
 801074e:	3301      	adds	r3, #1
 8010750:	603b      	str	r3, [r7, #0]
 8010752:	683b      	ldr	r3, [r7, #0]
 8010754:	2b0f      	cmp	r3, #15
 8010756:	dde8      	ble.n	801072a <load_map_from_eeprom+0x12>
	for(i = 0; i < 16; i++){
 8010758:	687b      	ldr	r3, [r7, #4]
 801075a:	3301      	adds	r3, #1
 801075c:	607b      	str	r3, [r7, #4]
 801075e:	687b      	ldr	r3, [r7, #4]
 8010760:	2b0f      	cmp	r3, #15
 8010762:	dddf      	ble.n	8010724 <load_map_from_eeprom+0xc>
		}
	}
}
 8010764:	bf00      	nop
 8010766:	3708      	adds	r7, #8
 8010768:	46bd      	mov	sp, r7
 801076a:	bd80      	pop	{r7, pc}
 801076c:	200001ac 	.word	0x200001ac

08010770 <sensor_init>:

#include "global.h"


void sensor_init(void){
 8010770:	b480      	push	{r7}
 8010772:	af00      	add	r7, sp, #0
	tp = 0;
 8010774:	4b0e      	ldr	r3, [pc, #56]	; (80107b0 <sensor_init+0x40>)
 8010776:	2200      	movs	r2, #0
 8010778:	701a      	strb	r2, [r3, #0]
	ad_l = ad_r = ad_fr = ad_fl = 0;
 801077a:	4b0e      	ldr	r3, [pc, #56]	; (80107b4 <sensor_init+0x44>)
 801077c:	2200      	movs	r2, #0
 801077e:	601a      	str	r2, [r3, #0]
 8010780:	4b0c      	ldr	r3, [pc, #48]	; (80107b4 <sensor_init+0x44>)
 8010782:	681b      	ldr	r3, [r3, #0]
 8010784:	4a0c      	ldr	r2, [pc, #48]	; (80107b8 <sensor_init+0x48>)
 8010786:	6013      	str	r3, [r2, #0]
 8010788:	4b0b      	ldr	r3, [pc, #44]	; (80107b8 <sensor_init+0x48>)
 801078a:	681b      	ldr	r3, [r3, #0]
 801078c:	4a0b      	ldr	r2, [pc, #44]	; (80107bc <sensor_init+0x4c>)
 801078e:	6013      	str	r3, [r2, #0]
 8010790:	4b0a      	ldr	r3, [pc, #40]	; (80107bc <sensor_init+0x4c>)
 8010792:	681b      	ldr	r3, [r3, #0]
 8010794:	4a0a      	ldr	r2, [pc, #40]	; (80107c0 <sensor_init+0x50>)
 8010796:	6013      	str	r3, [r2, #0]
	base_l = base_r = 0;
 8010798:	4b0a      	ldr	r3, [pc, #40]	; (80107c4 <sensor_init+0x54>)
 801079a:	2200      	movs	r2, #0
 801079c:	801a      	strh	r2, [r3, #0]
 801079e:	4b09      	ldr	r3, [pc, #36]	; (80107c4 <sensor_init+0x54>)
 80107a0:	881a      	ldrh	r2, [r3, #0]
 80107a2:	4b09      	ldr	r3, [pc, #36]	; (80107c8 <sensor_init+0x58>)
 80107a4:	801a      	strh	r2, [r3, #0]
}
 80107a6:	bf00      	nop
 80107a8:	46bd      	mov	sp, r7
 80107aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107ae:	4770      	bx	lr
 80107b0:	200012a0 	.word	0x200012a0
 80107b4:	20000d54 	.word	0x20000d54
 80107b8:	20000c00 	.word	0x20000c00
 80107bc:	20000f60 	.word	0x20000f60
 80107c0:	20000afc 	.word	0x20000afc
 80107c4:	200002c0 	.word	0x200002c0
 80107c8:	2000034c 	.word	0x2000034c

080107cc <get_base>:


uint8_t get_base(){
 80107cc:	b480      	push	{r7}
 80107ce:	b083      	sub	sp, #12
 80107d0:	af00      	add	r7, sp, #0
	uint8_t res = 1;									//for return
 80107d2:	2301      	movs	r3, #1
 80107d4:	71fb      	strb	r3, [r7, #7]

	base_l = ad_l;										//sensor value base L
 80107d6:	4b08      	ldr	r3, [pc, #32]	; (80107f8 <get_base+0x2c>)
 80107d8:	681b      	ldr	r3, [r3, #0]
 80107da:	b29a      	uxth	r2, r3
 80107dc:	4b07      	ldr	r3, [pc, #28]	; (80107fc <get_base+0x30>)
 80107de:	801a      	strh	r2, [r3, #0]
	base_r = ad_r;										//sensor value base R
 80107e0:	4b07      	ldr	r3, [pc, #28]	; (8010800 <get_base+0x34>)
 80107e2:	681b      	ldr	r3, [r3, #0]
 80107e4:	b29a      	uxth	r2, r3
 80107e6:	4b07      	ldr	r3, [pc, #28]	; (8010804 <get_base+0x38>)
 80107e8:	801a      	strh	r2, [r3, #0]

	return res;											//
 80107ea:	79fb      	ldrb	r3, [r7, #7]
}
 80107ec:	4618      	mov	r0, r3
 80107ee:	370c      	adds	r7, #12
 80107f0:	46bd      	mov	sp, r7
 80107f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107f6:	4770      	bx	lr
 80107f8:	20000afc 	.word	0x20000afc
 80107fc:	2000034c 	.word	0x2000034c
 8010800:	20000f60 	.word	0x20000f60
 8010804:	200002c0 	.word	0x200002c0

08010808 <get_wall_info>:


void get_wall_info(){
 8010808:	b480      	push	{r7}
 801080a:	af00      	add	r7, sp, #0

	//----reset----
	wall_info = 0x00;									//wall
 801080c:	4b16      	ldr	r3, [pc, #88]	; (8010868 <get_wall_info+0x60>)
 801080e:	2200      	movs	r2, #0
 8010810:	701a      	strb	r2, [r3, #0]
	//----look forward----
	if(ad_fr > WALL_BASE_FR || ad_fl > WALL_BASE_FL){
 8010812:	4b16      	ldr	r3, [pc, #88]	; (801086c <get_wall_info+0x64>)
 8010814:	681b      	ldr	r3, [r3, #0]
 8010816:	2b78      	cmp	r3, #120	; 0x78
 8010818:	d803      	bhi.n	8010822 <get_wall_info+0x1a>
 801081a:	4b15      	ldr	r3, [pc, #84]	; (8010870 <get_wall_info+0x68>)
 801081c:	681b      	ldr	r3, [r3, #0]
 801081e:	2bc8      	cmp	r3, #200	; 0xc8
 8010820:	d906      	bls.n	8010830 <get_wall_info+0x28>
		wall_info |= 0x88;								//forward check
 8010822:	4b11      	ldr	r3, [pc, #68]	; (8010868 <get_wall_info+0x60>)
 8010824:	781b      	ldrb	r3, [r3, #0]
 8010826:	f063 0377 	orn	r3, r3, #119	; 0x77
 801082a:	b2da      	uxtb	r2, r3
 801082c:	4b0e      	ldr	r3, [pc, #56]	; (8010868 <get_wall_info+0x60>)
 801082e:	701a      	strb	r2, [r3, #0]
	}
	//----look right----
	if(ad_r > WALL_BASE_R){
 8010830:	4b10      	ldr	r3, [pc, #64]	; (8010874 <get_wall_info+0x6c>)
 8010832:	681b      	ldr	r3, [r3, #0]
 8010834:	2b78      	cmp	r3, #120	; 0x78
 8010836:	d906      	bls.n	8010846 <get_wall_info+0x3e>
		wall_info |= 0x44;								//right check
 8010838:	4b0b      	ldr	r3, [pc, #44]	; (8010868 <get_wall_info+0x60>)
 801083a:	781b      	ldrb	r3, [r3, #0]
 801083c:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8010840:	b2da      	uxtb	r2, r3
 8010842:	4b09      	ldr	r3, [pc, #36]	; (8010868 <get_wall_info+0x60>)
 8010844:	701a      	strb	r2, [r3, #0]
	}
	//----look left----
	if(ad_l > WALL_BASE_L){
 8010846:	4b0c      	ldr	r3, [pc, #48]	; (8010878 <get_wall_info+0x70>)
 8010848:	681b      	ldr	r3, [r3, #0]
 801084a:	2b8c      	cmp	r3, #140	; 0x8c
 801084c:	d906      	bls.n	801085c <get_wall_info+0x54>
		wall_info |= 0x11;								//light check
 801084e:	4b06      	ldr	r3, [pc, #24]	; (8010868 <get_wall_info+0x60>)
 8010850:	781b      	ldrb	r3, [r3, #0]
 8010852:	f043 0311 	orr.w	r3, r3, #17
 8010856:	b2da      	uxtb	r2, r3
 8010858:	4b03      	ldr	r3, [pc, #12]	; (8010868 <get_wall_info+0x60>)
 801085a:	701a      	strb	r2, [r3, #0]
	}
}
 801085c:	bf00      	nop
 801085e:	46bd      	mov	sp, r7
 8010860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010864:	4770      	bx	lr
 8010866:	bf00      	nop
 8010868:	200002c8 	.word	0x200002c8
 801086c:	20000c00 	.word	0x20000c00
 8010870:	20000d54 	.word	0x20000d54
 8010874:	20000f60 	.word	0x20000f60
 8010878:	20000afc 	.word	0x20000afc

0801087c <led_write>:
//led_write
//aモード選択用LEDのON-OFF
//a引数：led1(0=>OFF, 1=>ON), led2(0=>OFF, 1=>ON), led3(0=>OFF, 1=>ON)
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void led_write(uint8_t led1, uint8_t led2, uint8_t led3){
 801087c:	b580      	push	{r7, lr}
 801087e:	b082      	sub	sp, #8
 8010880:	af00      	add	r7, sp, #0
 8010882:	4603      	mov	r3, r0
 8010884:	71fb      	strb	r3, [r7, #7]
 8010886:	460b      	mov	r3, r1
 8010888:	71bb      	strb	r3, [r7, #6]
 801088a:	4613      	mov	r3, r2
 801088c:	717b      	strb	r3, [r7, #5]
	if(led1) HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 801088e:	79fb      	ldrb	r3, [r7, #7]
 8010890:	2b00      	cmp	r3, #0
 8010892:	d005      	beq.n	80108a0 <led_write+0x24>
 8010894:	2201      	movs	r2, #1
 8010896:	2110      	movs	r1, #16
 8010898:	4814      	ldr	r0, [pc, #80]	; (80108ec <led_write+0x70>)
 801089a:	f7f1 fd33 	bl	8002304 <HAL_GPIO_WritePin>
 801089e:	e004      	b.n	80108aa <led_write+0x2e>
	else HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80108a0:	2200      	movs	r2, #0
 80108a2:	2110      	movs	r1, #16
 80108a4:	4811      	ldr	r0, [pc, #68]	; (80108ec <led_write+0x70>)
 80108a6:	f7f1 fd2d 	bl	8002304 <HAL_GPIO_WritePin>

	if(led2) HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 80108aa:	79bb      	ldrb	r3, [r7, #6]
 80108ac:	2b00      	cmp	r3, #0
 80108ae:	d005      	beq.n	80108bc <led_write+0x40>
 80108b0:	2201      	movs	r2, #1
 80108b2:	2140      	movs	r1, #64	; 0x40
 80108b4:	480d      	ldr	r0, [pc, #52]	; (80108ec <led_write+0x70>)
 80108b6:	f7f1 fd25 	bl	8002304 <HAL_GPIO_WritePin>
 80108ba:	e004      	b.n	80108c6 <led_write+0x4a>
	else HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 80108bc:	2200      	movs	r2, #0
 80108be:	2140      	movs	r1, #64	; 0x40
 80108c0:	480a      	ldr	r0, [pc, #40]	; (80108ec <led_write+0x70>)
 80108c2:	f7f1 fd1f 	bl	8002304 <HAL_GPIO_WritePin>

	if(led3) HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);
 80108c6:	797b      	ldrb	r3, [r7, #5]
 80108c8:	2b00      	cmp	r3, #0
 80108ca:	d005      	beq.n	80108d8 <led_write+0x5c>
 80108cc:	2201      	movs	r2, #1
 80108ce:	2180      	movs	r1, #128	; 0x80
 80108d0:	4806      	ldr	r0, [pc, #24]	; (80108ec <led_write+0x70>)
 80108d2:	f7f1 fd17 	bl	8002304 <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
}
 80108d6:	e004      	b.n	80108e2 <led_write+0x66>
	else HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 80108d8:	2200      	movs	r2, #0
 80108da:	2180      	movs	r1, #128	; 0x80
 80108dc:	4803      	ldr	r0, [pc, #12]	; (80108ec <led_write+0x70>)
 80108de:	f7f1 fd11 	bl	8002304 <HAL_GPIO_WritePin>
}
 80108e2:	bf00      	nop
 80108e4:	3708      	adds	r7, #8
 80108e6:	46bd      	mov	sp, r7
 80108e8:	bd80      	pop	{r7, pc}
 80108ea:	bf00      	nop
 80108ec:	40020000 	.word	0x40020000

080108f0 <full_led_write>:
//full_led_write
//aフルカラーLEDの色選択
//a引数：fulled(0=>OFF, 1=>a赤, 2=>緑, 3=>青, 4=>青緑, 5=>紫, 6=>黄, 7=>白)
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void full_led_write(uint8_t fulled){
 80108f0:	b580      	push	{r7, lr}
 80108f2:	b082      	sub	sp, #8
 80108f4:	af00      	add	r7, sp, #0
 80108f6:	4603      	mov	r3, r0
 80108f8:	71fb      	strb	r3, [r7, #7]
	if(fulled == 0){
 80108fa:	79fb      	ldrb	r3, [r7, #7]
 80108fc:	2b00      	cmp	r3, #0
 80108fe:	d112      	bne.n	8010926 <full_led_write+0x36>
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
 8010900:	2201      	movs	r2, #1
 8010902:	f44f 7180 	mov.w	r1, #256	; 0x100
 8010906:	4856      	ldr	r0, [pc, #344]	; (8010a60 <full_led_write+0x170>)
 8010908:	f7f1 fcfc 	bl	8002304 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 801090c:	2201      	movs	r2, #1
 801090e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8010912:	4853      	ldr	r0, [pc, #332]	; (8010a60 <full_led_write+0x170>)
 8010914:	f7f1 fcf6 	bl	8002304 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8010918:	2201      	movs	r2, #1
 801091a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 801091e:	4851      	ldr	r0, [pc, #324]	; (8010a64 <full_led_write+0x174>)
 8010920:	f7f1 fcf0 	bl	8002304 <HAL_GPIO_WritePin>
	else if(fulled == 7){
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
	    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
	}
}
 8010924:	e098      	b.n	8010a58 <full_led_write+0x168>
	else if(fulled == 1){
 8010926:	79fb      	ldrb	r3, [r7, #7]
 8010928:	2b01      	cmp	r3, #1
 801092a:	d112      	bne.n	8010952 <full_led_write+0x62>
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
 801092c:	2201      	movs	r2, #1
 801092e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8010932:	484b      	ldr	r0, [pc, #300]	; (8010a60 <full_led_write+0x170>)
 8010934:	f7f1 fce6 	bl	8002304 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 8010938:	2201      	movs	r2, #1
 801093a:	f44f 7100 	mov.w	r1, #512	; 0x200
 801093e:	4848      	ldr	r0, [pc, #288]	; (8010a60 <full_led_write+0x170>)
 8010940:	f7f1 fce0 	bl	8002304 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8010944:	2200      	movs	r2, #0
 8010946:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 801094a:	4846      	ldr	r0, [pc, #280]	; (8010a64 <full_led_write+0x174>)
 801094c:	f7f1 fcda 	bl	8002304 <HAL_GPIO_WritePin>
}
 8010950:	e082      	b.n	8010a58 <full_led_write+0x168>
	else if(fulled == 2){
 8010952:	79fb      	ldrb	r3, [r7, #7]
 8010954:	2b02      	cmp	r3, #2
 8010956:	d112      	bne.n	801097e <full_led_write+0x8e>
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
 8010958:	2201      	movs	r2, #1
 801095a:	f44f 7180 	mov.w	r1, #256	; 0x100
 801095e:	4840      	ldr	r0, [pc, #256]	; (8010a60 <full_led_write+0x170>)
 8010960:	f7f1 fcd0 	bl	8002304 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 8010964:	2200      	movs	r2, #0
 8010966:	f44f 7100 	mov.w	r1, #512	; 0x200
 801096a:	483d      	ldr	r0, [pc, #244]	; (8010a60 <full_led_write+0x170>)
 801096c:	f7f1 fcca 	bl	8002304 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8010970:	2201      	movs	r2, #1
 8010972:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8010976:	483b      	ldr	r0, [pc, #236]	; (8010a64 <full_led_write+0x174>)
 8010978:	f7f1 fcc4 	bl	8002304 <HAL_GPIO_WritePin>
}
 801097c:	e06c      	b.n	8010a58 <full_led_write+0x168>
	else if(fulled == 3){
 801097e:	79fb      	ldrb	r3, [r7, #7]
 8010980:	2b03      	cmp	r3, #3
 8010982:	d112      	bne.n	80109aa <full_led_write+0xba>
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 8010984:	2200      	movs	r2, #0
 8010986:	f44f 7180 	mov.w	r1, #256	; 0x100
 801098a:	4835      	ldr	r0, [pc, #212]	; (8010a60 <full_led_write+0x170>)
 801098c:	f7f1 fcba 	bl	8002304 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 8010990:	2201      	movs	r2, #1
 8010992:	f44f 7100 	mov.w	r1, #512	; 0x200
 8010996:	4832      	ldr	r0, [pc, #200]	; (8010a60 <full_led_write+0x170>)
 8010998:	f7f1 fcb4 	bl	8002304 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 801099c:	2201      	movs	r2, #1
 801099e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80109a2:	4830      	ldr	r0, [pc, #192]	; (8010a64 <full_led_write+0x174>)
 80109a4:	f7f1 fcae 	bl	8002304 <HAL_GPIO_WritePin>
}
 80109a8:	e056      	b.n	8010a58 <full_led_write+0x168>
	else if(fulled == 4){
 80109aa:	79fb      	ldrb	r3, [r7, #7]
 80109ac:	2b04      	cmp	r3, #4
 80109ae:	d112      	bne.n	80109d6 <full_led_write+0xe6>
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 80109b0:	2200      	movs	r2, #0
 80109b2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80109b6:	482a      	ldr	r0, [pc, #168]	; (8010a60 <full_led_write+0x170>)
 80109b8:	f7f1 fca4 	bl	8002304 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 80109bc:	2200      	movs	r2, #0
 80109be:	f44f 7100 	mov.w	r1, #512	; 0x200
 80109c2:	4827      	ldr	r0, [pc, #156]	; (8010a60 <full_led_write+0x170>)
 80109c4:	f7f1 fc9e 	bl	8002304 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 80109c8:	2201      	movs	r2, #1
 80109ca:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80109ce:	4825      	ldr	r0, [pc, #148]	; (8010a64 <full_led_write+0x174>)
 80109d0:	f7f1 fc98 	bl	8002304 <HAL_GPIO_WritePin>
}
 80109d4:	e040      	b.n	8010a58 <full_led_write+0x168>
	else if(fulled == 5){
 80109d6:	79fb      	ldrb	r3, [r7, #7]
 80109d8:	2b05      	cmp	r3, #5
 80109da:	d112      	bne.n	8010a02 <full_led_write+0x112>
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 80109dc:	2200      	movs	r2, #0
 80109de:	f44f 7180 	mov.w	r1, #256	; 0x100
 80109e2:	481f      	ldr	r0, [pc, #124]	; (8010a60 <full_led_write+0x170>)
 80109e4:	f7f1 fc8e 	bl	8002304 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 80109e8:	2201      	movs	r2, #1
 80109ea:	f44f 7100 	mov.w	r1, #512	; 0x200
 80109ee:	481c      	ldr	r0, [pc, #112]	; (8010a60 <full_led_write+0x170>)
 80109f0:	f7f1 fc88 	bl	8002304 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80109f4:	2200      	movs	r2, #0
 80109f6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80109fa:	481a      	ldr	r0, [pc, #104]	; (8010a64 <full_led_write+0x174>)
 80109fc:	f7f1 fc82 	bl	8002304 <HAL_GPIO_WritePin>
}
 8010a00:	e02a      	b.n	8010a58 <full_led_write+0x168>
	else if(fulled == 6){
 8010a02:	79fb      	ldrb	r3, [r7, #7]
 8010a04:	2b06      	cmp	r3, #6
 8010a06:	d112      	bne.n	8010a2e <full_led_write+0x13e>
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
 8010a08:	2201      	movs	r2, #1
 8010a0a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8010a0e:	4814      	ldr	r0, [pc, #80]	; (8010a60 <full_led_write+0x170>)
 8010a10:	f7f1 fc78 	bl	8002304 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 8010a14:	2200      	movs	r2, #0
 8010a16:	f44f 7100 	mov.w	r1, #512	; 0x200
 8010a1a:	4811      	ldr	r0, [pc, #68]	; (8010a60 <full_led_write+0x170>)
 8010a1c:	f7f1 fc72 	bl	8002304 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8010a20:	2200      	movs	r2, #0
 8010a22:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8010a26:	480f      	ldr	r0, [pc, #60]	; (8010a64 <full_led_write+0x174>)
 8010a28:	f7f1 fc6c 	bl	8002304 <HAL_GPIO_WritePin>
}
 8010a2c:	e014      	b.n	8010a58 <full_led_write+0x168>
	else if(fulled == 7){
 8010a2e:	79fb      	ldrb	r3, [r7, #7]
 8010a30:	2b07      	cmp	r3, #7
 8010a32:	d111      	bne.n	8010a58 <full_led_write+0x168>
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 8010a34:	2200      	movs	r2, #0
 8010a36:	f44f 7180 	mov.w	r1, #256	; 0x100
 8010a3a:	4809      	ldr	r0, [pc, #36]	; (8010a60 <full_led_write+0x170>)
 8010a3c:	f7f1 fc62 	bl	8002304 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 8010a40:	2200      	movs	r2, #0
 8010a42:	f44f 7100 	mov.w	r1, #512	; 0x200
 8010a46:	4806      	ldr	r0, [pc, #24]	; (8010a60 <full_led_write+0x170>)
 8010a48:	f7f1 fc5c 	bl	8002304 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8010a4c:	2200      	movs	r2, #0
 8010a4e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8010a52:	4804      	ldr	r0, [pc, #16]	; (8010a64 <full_led_write+0x174>)
 8010a54:	f7f1 fc56 	bl	8002304 <HAL_GPIO_WritePin>
}
 8010a58:	bf00      	nop
 8010a5a:	3708      	adds	r7, #8
 8010a5c:	46bd      	mov	sp, r7
 8010a5e:	bd80      	pop	{r7, pc}
 8010a60:	40020400 	.word	0x40020400
 8010a64:	40020800 	.word	0x40020800

08010a68 <sensor_test>:
//sensor_test
//a壁センサーとジャイロセンサーの値確認
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void sensor_test(){
 8010a68:	b580      	push	{r7, lr}
 8010a6a:	b08c      	sub	sp, #48	; 0x30
 8010a6c:	af02      	add	r7, sp, #8

	int mode = 0;
 8010a6e:	2300      	movs	r3, #0
 8010a70:	627b      	str	r3, [r7, #36]	; 0x24
	printf("Mode : %d\n", mode);
 8010a72:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8010a74:	4881      	ldr	r0, [pc, #516]	; (8010c7c <sensor_test+0x214>)
 8010a76:	f000 fccf 	bl	8011418 <iprintf>

	while(1){
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 8010a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a7c:	b2db      	uxtb	r3, r3
 8010a7e:	f003 0301 	and.w	r3, r3, #1
 8010a82:	b2d8      	uxtb	r0, r3
 8010a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a86:	b2db      	uxtb	r3, r3
 8010a88:	f003 0302 	and.w	r3, r3, #2
 8010a8c:	b2d9      	uxtb	r1, r3
 8010a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a90:	b2db      	uxtb	r3, r3
 8010a92:	f003 0304 	and.w	r3, r3, #4
 8010a96:	b2db      	uxtb	r3, r3
 8010a98:	461a      	mov	r2, r3
 8010a9a:	f7ff feef 	bl	801087c <led_write>
		  if(dist_r >= 20){
 8010a9e:	4b78      	ldr	r3, [pc, #480]	; (8010c80 <sensor_test+0x218>)
 8010aa0:	edd3 7a00 	vldr	s15, [r3]
 8010aa4:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8010aa8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8010aac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010ab0:	db0f      	blt.n	8010ad2 <sensor_test+0x6a>
			  mode++;
 8010ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ab4:	3301      	adds	r3, #1
 8010ab6:	627b      	str	r3, [r7, #36]	; 0x24
			  dist_r = 0;
 8010ab8:	4b71      	ldr	r3, [pc, #452]	; (8010c80 <sensor_test+0x218>)
 8010aba:	f04f 0200 	mov.w	r2, #0
 8010abe:	601a      	str	r2, [r3, #0]
			  if(mode > 7){
 8010ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ac2:	2b07      	cmp	r3, #7
 8010ac4:	dd01      	ble.n	8010aca <sensor_test+0x62>
				  mode = 0;
 8010ac6:	2300      	movs	r3, #0
 8010ac8:	627b      	str	r3, [r7, #36]	; 0x24
			  }
			  printf("Mode : %d\n", mode);
 8010aca:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8010acc:	486b      	ldr	r0, [pc, #428]	; (8010c7c <sensor_test+0x214>)
 8010ace:	f000 fca3 	bl	8011418 <iprintf>
			  //buzzer(pitagola2[mode-1][0], pitagola2[mode-1][1]);
			  //buzzer(pitagola[2][0], pitagola[2][1]);
		  }
		  if(dist_r <= -20){
 8010ad2:	4b6b      	ldr	r3, [pc, #428]	; (8010c80 <sensor_test+0x218>)
 8010ad4:	edd3 7a00 	vldr	s15, [r3]
 8010ad8:	eebb 7a04 	vmov.f32	s14, #180	; 0xc1a00000 -20.0
 8010adc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8010ae0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010ae4:	d80f      	bhi.n	8010b06 <sensor_test+0x9e>
			  mode--;
 8010ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ae8:	3b01      	subs	r3, #1
 8010aea:	627b      	str	r3, [r7, #36]	; 0x24
			  dist_r = 0;
 8010aec:	4b64      	ldr	r3, [pc, #400]	; (8010c80 <sensor_test+0x218>)
 8010aee:	f04f 0200 	mov.w	r2, #0
 8010af2:	601a      	str	r2, [r3, #0]
			  if(mode < 0){
 8010af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010af6:	2b00      	cmp	r3, #0
 8010af8:	da01      	bge.n	8010afe <sensor_test+0x96>
				  mode = 7;
 8010afa:	2307      	movs	r3, #7
 8010afc:	627b      	str	r3, [r7, #36]	; 0x24
			  }
			  printf("Mode : %d\n", mode);
 8010afe:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8010b00:	485e      	ldr	r0, [pc, #376]	; (8010c7c <sensor_test+0x214>)
 8010b02:	f000 fc89 	bl	8011418 <iprintf>
			  //buzzer(pitagola2[mode-1][0], pitagola2[mode-1][1]);
			  //buzzer(pitagola[2][0], pitagola[2][1]);
		  }
		  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET){
 8010b06:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8010b0a:	485e      	ldr	r0, [pc, #376]	; (8010c84 <sensor_test+0x21c>)
 8010b0c:	f7f1 fbe2 	bl	80022d4 <HAL_GPIO_ReadPin>
 8010b10:	4603      	mov	r3, r0
 8010b12:	2b00      	cmp	r3, #0
 8010b14:	d1b1      	bne.n	8010a7a <sensor_test+0x12>
			  HAL_Delay(50);
 8010b16:	2032      	movs	r0, #50	; 0x32
 8010b18:	f7f0 fa80 	bl	800101c <HAL_Delay>
			  while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET);
 8010b1c:	bf00      	nop
 8010b1e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8010b22:	4858      	ldr	r0, [pc, #352]	; (8010c84 <sensor_test+0x21c>)
 8010b24:	f7f1 fbd6 	bl	80022d4 <HAL_GPIO_ReadPin>
 8010b28:	4603      	mov	r3, r0
 8010b2a:	2b00      	cmp	r3, #0
 8010b2c:	d0f7      	beq.n	8010b1e <sensor_test+0xb6>

			  drive_ready();
 8010b2e:	f7f4 f8a7 	bl	8004c80 <drive_ready>

			  switch(mode){
 8010b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b34:	2b07      	cmp	r3, #7
 8010b36:	d8a0      	bhi.n	8010a7a <sensor_test+0x12>
 8010b38:	a201      	add	r2, pc, #4	; (adr r2, 8010b40 <sensor_test+0xd8>)
 8010b3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010b3e:	bf00      	nop
 8010b40:	08010b61 	.word	0x08010b61
 8010b44:	08010b67 	.word	0x08010b67
 8010b48:	08010bb9 	.word	0x08010bb9
 8010b4c:	08010a7b 	.word	0x08010a7b
 8010b50:	08010a7b 	.word	0x08010a7b
 8010b54:	08010a7b 	.word	0x08010a7b
 8010b58:	08010a7b 	.word	0x08010a7b
 8010b5c:	08010a7b 	.word	0x08010a7b
				case 0:
					get_base();
 8010b60:	f7ff fe34 	bl	80107cc <get_base>
					break;
 8010b64:	e089      	b.n	8010c7a <sensor_test+0x212>
				case 1:
			  		  //----Wall sensor check----
			  		  printf("Wall Sensor Check.\n");
 8010b66:	4848      	ldr	r0, [pc, #288]	; (8010c88 <sensor_test+0x220>)
 8010b68:	f000 fcca 	bl	8011500 <puts>
			  		  while(1){
			  			  get_wall_info();
 8010b6c:	f7ff fe4c 	bl	8010808 <get_wall_info>
			  			  led_write(wall_info & 0x11, wall_info & 0x88, wall_info & 0x44);
 8010b70:	4b46      	ldr	r3, [pc, #280]	; (8010c8c <sensor_test+0x224>)
 8010b72:	781b      	ldrb	r3, [r3, #0]
 8010b74:	f003 0311 	and.w	r3, r3, #17
 8010b78:	b2d8      	uxtb	r0, r3
 8010b7a:	4b44      	ldr	r3, [pc, #272]	; (8010c8c <sensor_test+0x224>)
 8010b7c:	781b      	ldrb	r3, [r3, #0]
 8010b7e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8010b82:	b2d9      	uxtb	r1, r3
 8010b84:	4b41      	ldr	r3, [pc, #260]	; (8010c8c <sensor_test+0x224>)
 8010b86:	781b      	ldrb	r3, [r3, #0]
 8010b88:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8010b8c:	b2db      	uxtb	r3, r3
 8010b8e:	461a      	mov	r2, r3
 8010b90:	f7ff fe74 	bl	801087c <led_write>
			  			  printf("ad_l : %d, ad_fl : %d, ad_fr : %d, ad_r : %d\n", ad_l, ad_fl, ad_fr, ad_r);
 8010b94:	4b3e      	ldr	r3, [pc, #248]	; (8010c90 <sensor_test+0x228>)
 8010b96:	6819      	ldr	r1, [r3, #0]
 8010b98:	4b3e      	ldr	r3, [pc, #248]	; (8010c94 <sensor_test+0x22c>)
 8010b9a:	681a      	ldr	r2, [r3, #0]
 8010b9c:	4b3e      	ldr	r3, [pc, #248]	; (8010c98 <sensor_test+0x230>)
 8010b9e:	6818      	ldr	r0, [r3, #0]
 8010ba0:	4b3e      	ldr	r3, [pc, #248]	; (8010c9c <sensor_test+0x234>)
 8010ba2:	681b      	ldr	r3, [r3, #0]
 8010ba4:	9300      	str	r3, [sp, #0]
 8010ba6:	4603      	mov	r3, r0
 8010ba8:	483d      	ldr	r0, [pc, #244]	; (8010ca0 <sensor_test+0x238>)
 8010baa:	f000 fc35 	bl	8011418 <iprintf>
			  			  HAL_Delay(333);
 8010bae:	f240 104d 	movw	r0, #333	; 0x14d
 8010bb2:	f7f0 fa33 	bl	800101c <HAL_Delay>
			  			  get_wall_info();
 8010bb6:	e7d9      	b.n	8010b6c <sensor_test+0x104>
						}
					break;
				case 2:
					//----Gyro sensor check----
					printf("Gyro Sensor Check.\n");
 8010bb8:	483a      	ldr	r0, [pc, #232]	; (8010ca4 <sensor_test+0x23c>)
 8010bba:	f000 fca1 	bl	8011500 <puts>
					int accel_x, accel_y, accel_z;
					int gyro_x, gyro_y, gyro_z;
					int deg_x, deg_y, deg_z;
			  		  while(1){
			  			  accel_x = accel_read_x();
 8010bbe:	f7fa fce1 	bl	800b584 <accel_read_x>
 8010bc2:	eef0 7a40 	vmov.f32	s15, s0
 8010bc6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010bca:	ee17 3a90 	vmov	r3, s15
 8010bce:	623b      	str	r3, [r7, #32]
			  			  accel_y = accel_read_y();
 8010bd0:	f7fa fcfe 	bl	800b5d0 <accel_read_y>
 8010bd4:	eef0 7a40 	vmov.f32	s15, s0
 8010bd8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010bdc:	ee17 3a90 	vmov	r3, s15
 8010be0:	61fb      	str	r3, [r7, #28]
			  			  accel_z = accel_read_z();
 8010be2:	f7fa fd1b 	bl	800b61c <accel_read_z>
 8010be6:	eef0 7a40 	vmov.f32	s15, s0
 8010bea:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010bee:	ee17 3a90 	vmov	r3, s15
 8010bf2:	61bb      	str	r3, [r7, #24]
			  			  gyro_x = gyro_read_x();
 8010bf4:	f7fa fd3c 	bl	800b670 <gyro_read_x>
 8010bf8:	eef0 7a40 	vmov.f32	s15, s0
 8010bfc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010c00:	ee17 3a90 	vmov	r3, s15
 8010c04:	617b      	str	r3, [r7, #20]
			  			  gyro_y = gyro_read_y();
 8010c06:	f7fa fd6f 	bl	800b6e8 <gyro_read_y>
 8010c0a:	eef0 7a40 	vmov.f32	s15, s0
 8010c0e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010c12:	ee17 3a90 	vmov	r3, s15
 8010c16:	613b      	str	r3, [r7, #16]
			  			  gyro_z = gyro_read_z();
 8010c18:	f7fa fda2 	bl	800b760 <gyro_read_z>
 8010c1c:	eef0 7a40 	vmov.f32	s15, s0
 8010c20:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010c24:	ee17 3a90 	vmov	r3, s15
 8010c28:	60fb      	str	r3, [r7, #12]
			  			  deg_x = degree_x;
 8010c2a:	4b1f      	ldr	r3, [pc, #124]	; (8010ca8 <sensor_test+0x240>)
 8010c2c:	edd3 7a00 	vldr	s15, [r3]
 8010c30:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010c34:	ee17 3a90 	vmov	r3, s15
 8010c38:	60bb      	str	r3, [r7, #8]
			  			  deg_y = degree_y;
 8010c3a:	4b1c      	ldr	r3, [pc, #112]	; (8010cac <sensor_test+0x244>)
 8010c3c:	edd3 7a00 	vldr	s15, [r3]
 8010c40:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010c44:	ee17 3a90 	vmov	r3, s15
 8010c48:	607b      	str	r3, [r7, #4]
			  			  deg_z = degree_z;
 8010c4a:	4b19      	ldr	r3, [pc, #100]	; (8010cb0 <sensor_test+0x248>)
 8010c4c:	edd3 7a00 	vldr	s15, [r3]
 8010c50:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010c54:	ee17 3a90 	vmov	r3, s15
 8010c58:	603b      	str	r3, [r7, #0]

			  			  //printf("Accel x: %3d, y: %3d, z: %3d\n", accel_x, accel_y, accel_z);
			  			  printf("Gyro  x: %3d, y: %3d, z: %3d\n", gyro_x, gyro_y, gyro_z);
 8010c5a:	68fb      	ldr	r3, [r7, #12]
 8010c5c:	693a      	ldr	r2, [r7, #16]
 8010c5e:	6979      	ldr	r1, [r7, #20]
 8010c60:	4814      	ldr	r0, [pc, #80]	; (8010cb4 <sensor_test+0x24c>)
 8010c62:	f000 fbd9 	bl	8011418 <iprintf>
			  			  printf("Deg   x: %3d, y: %3d, z: %3d\n", deg_x, deg_y, deg_z);
 8010c66:	683b      	ldr	r3, [r7, #0]
 8010c68:	687a      	ldr	r2, [r7, #4]
 8010c6a:	68b9      	ldr	r1, [r7, #8]
 8010c6c:	4812      	ldr	r0, [pc, #72]	; (8010cb8 <sensor_test+0x250>)
 8010c6e:	f000 fbd3 	bl	8011418 <iprintf>
			  			  HAL_Delay(111);
 8010c72:	206f      	movs	r0, #111	; 0x6f
 8010c74:	f7f0 f9d2 	bl	800101c <HAL_Delay>
			  			  accel_x = accel_read_x();
 8010c78:	e7a1      	b.n	8010bbe <sensor_test+0x156>
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 8010c7a:	e6fe      	b.n	8010a7a <sensor_test+0x12>
 8010c7c:	08012ab4 	.word	0x08012ab4
 8010c80:	20000aec 	.word	0x20000aec
 8010c84:	40020000 	.word	0x40020000
 8010c88:	08012ac0 	.word	0x08012ac0
 8010c8c:	200002c8 	.word	0x200002c8
 8010c90:	20000afc 	.word	0x20000afc
 8010c94:	20000d54 	.word	0x20000d54
 8010c98:	20000c00 	.word	0x20000c00
 8010c9c:	20000f60 	.word	0x20000f60
 8010ca0:	08012ad4 	.word	0x08012ad4
 8010ca4:	08012b04 	.word	0x08012b04
 8010ca8:	20000450 	.word	0x20000450
 8010cac:	20000f70 	.word	0x20000f70
 8010cb0:	20000b5c 	.word	0x20000b5c
 8010cb4:	08012b18 	.word	0x08012b18
 8010cb8:	08012b38 	.word	0x08012b38

08010cbc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8010cbc:	b480      	push	{r7}
 8010cbe:	b083      	sub	sp, #12
 8010cc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8010cc2:	2300      	movs	r3, #0
 8010cc4:	607b      	str	r3, [r7, #4]
 8010cc6:	4b10      	ldr	r3, [pc, #64]	; (8010d08 <HAL_MspInit+0x4c>)
 8010cc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010cca:	4a0f      	ldr	r2, [pc, #60]	; (8010d08 <HAL_MspInit+0x4c>)
 8010ccc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8010cd0:	6453      	str	r3, [r2, #68]	; 0x44
 8010cd2:	4b0d      	ldr	r3, [pc, #52]	; (8010d08 <HAL_MspInit+0x4c>)
 8010cd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010cd6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8010cda:	607b      	str	r3, [r7, #4]
 8010cdc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8010cde:	2300      	movs	r3, #0
 8010ce0:	603b      	str	r3, [r7, #0]
 8010ce2:	4b09      	ldr	r3, [pc, #36]	; (8010d08 <HAL_MspInit+0x4c>)
 8010ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010ce6:	4a08      	ldr	r2, [pc, #32]	; (8010d08 <HAL_MspInit+0x4c>)
 8010ce8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8010cec:	6413      	str	r3, [r2, #64]	; 0x40
 8010cee:	4b06      	ldr	r3, [pc, #24]	; (8010d08 <HAL_MspInit+0x4c>)
 8010cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010cf2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8010cf6:	603b      	str	r3, [r7, #0]
 8010cf8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8010cfa:	bf00      	nop
 8010cfc:	370c      	adds	r7, #12
 8010cfe:	46bd      	mov	sp, r7
 8010d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d04:	4770      	bx	lr
 8010d06:	bf00      	nop
 8010d08:	40023800 	.word	0x40023800

08010d0c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8010d0c:	b580      	push	{r7, lr}
 8010d0e:	b08a      	sub	sp, #40	; 0x28
 8010d10:	af00      	add	r7, sp, #0
 8010d12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8010d14:	f107 0314 	add.w	r3, r7, #20
 8010d18:	2200      	movs	r2, #0
 8010d1a:	601a      	str	r2, [r3, #0]
 8010d1c:	605a      	str	r2, [r3, #4]
 8010d1e:	609a      	str	r2, [r3, #8]
 8010d20:	60da      	str	r2, [r3, #12]
 8010d22:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8010d24:	687b      	ldr	r3, [r7, #4]
 8010d26:	681b      	ldr	r3, [r3, #0]
 8010d28:	4a17      	ldr	r2, [pc, #92]	; (8010d88 <HAL_ADC_MspInit+0x7c>)
 8010d2a:	4293      	cmp	r3, r2
 8010d2c:	d127      	bne.n	8010d7e <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8010d2e:	2300      	movs	r3, #0
 8010d30:	613b      	str	r3, [r7, #16]
 8010d32:	4b16      	ldr	r3, [pc, #88]	; (8010d8c <HAL_ADC_MspInit+0x80>)
 8010d34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010d36:	4a15      	ldr	r2, [pc, #84]	; (8010d8c <HAL_ADC_MspInit+0x80>)
 8010d38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8010d3c:	6453      	str	r3, [r2, #68]	; 0x44
 8010d3e:	4b13      	ldr	r3, [pc, #76]	; (8010d8c <HAL_ADC_MspInit+0x80>)
 8010d40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010d42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010d46:	613b      	str	r3, [r7, #16]
 8010d48:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8010d4a:	2300      	movs	r3, #0
 8010d4c:	60fb      	str	r3, [r7, #12]
 8010d4e:	4b0f      	ldr	r3, [pc, #60]	; (8010d8c <HAL_ADC_MspInit+0x80>)
 8010d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010d52:	4a0e      	ldr	r2, [pc, #56]	; (8010d8c <HAL_ADC_MspInit+0x80>)
 8010d54:	f043 0301 	orr.w	r3, r3, #1
 8010d58:	6313      	str	r3, [r2, #48]	; 0x30
 8010d5a:	4b0c      	ldr	r3, [pc, #48]	; (8010d8c <HAL_ADC_MspInit+0x80>)
 8010d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010d5e:	f003 0301 	and.w	r3, r3, #1
 8010d62:	60fb      	str	r3, [r7, #12]
 8010d64:	68fb      	ldr	r3, [r7, #12]
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8010d66:	230f      	movs	r3, #15
 8010d68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8010d6a:	2303      	movs	r3, #3
 8010d6c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010d6e:	2300      	movs	r3, #0
 8010d70:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8010d72:	f107 0314 	add.w	r3, r7, #20
 8010d76:	4619      	mov	r1, r3
 8010d78:	4805      	ldr	r0, [pc, #20]	; (8010d90 <HAL_ADC_MspInit+0x84>)
 8010d7a:	f7f1 f911 	bl	8001fa0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8010d7e:	bf00      	nop
 8010d80:	3728      	adds	r7, #40	; 0x28
 8010d82:	46bd      	mov	sp, r7
 8010d84:	bd80      	pop	{r7, pc}
 8010d86:	bf00      	nop
 8010d88:	40012000 	.word	0x40012000
 8010d8c:	40023800 	.word	0x40023800
 8010d90:	40020000 	.word	0x40020000

08010d94 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8010d94:	b580      	push	{r7, lr}
 8010d96:	b08a      	sub	sp, #40	; 0x28
 8010d98:	af00      	add	r7, sp, #0
 8010d9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8010d9c:	f107 0314 	add.w	r3, r7, #20
 8010da0:	2200      	movs	r2, #0
 8010da2:	601a      	str	r2, [r3, #0]
 8010da4:	605a      	str	r2, [r3, #4]
 8010da6:	609a      	str	r2, [r3, #8]
 8010da8:	60da      	str	r2, [r3, #12]
 8010daa:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8010dac:	687b      	ldr	r3, [r7, #4]
 8010dae:	681b      	ldr	r3, [r3, #0]
 8010db0:	4a19      	ldr	r2, [pc, #100]	; (8010e18 <HAL_SPI_MspInit+0x84>)
 8010db2:	4293      	cmp	r3, r2
 8010db4:	d12c      	bne.n	8010e10 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8010db6:	2300      	movs	r3, #0
 8010db8:	613b      	str	r3, [r7, #16]
 8010dba:	4b18      	ldr	r3, [pc, #96]	; (8010e1c <HAL_SPI_MspInit+0x88>)
 8010dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010dbe:	4a17      	ldr	r2, [pc, #92]	; (8010e1c <HAL_SPI_MspInit+0x88>)
 8010dc0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010dc4:	6413      	str	r3, [r2, #64]	; 0x40
 8010dc6:	4b15      	ldr	r3, [pc, #84]	; (8010e1c <HAL_SPI_MspInit+0x88>)
 8010dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010dca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8010dce:	613b      	str	r3, [r7, #16]
 8010dd0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8010dd2:	2300      	movs	r3, #0
 8010dd4:	60fb      	str	r3, [r7, #12]
 8010dd6:	4b11      	ldr	r3, [pc, #68]	; (8010e1c <HAL_SPI_MspInit+0x88>)
 8010dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010dda:	4a10      	ldr	r2, [pc, #64]	; (8010e1c <HAL_SPI_MspInit+0x88>)
 8010ddc:	f043 0304 	orr.w	r3, r3, #4
 8010de0:	6313      	str	r3, [r2, #48]	; 0x30
 8010de2:	4b0e      	ldr	r3, [pc, #56]	; (8010e1c <HAL_SPI_MspInit+0x88>)
 8010de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010de6:	f003 0304 	and.w	r3, r3, #4
 8010dea:	60fb      	str	r3, [r7, #12]
 8010dec:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration    
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8010dee:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8010df2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010df4:	2302      	movs	r3, #2
 8010df6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010df8:	2300      	movs	r3, #0
 8010dfa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8010dfc:	2303      	movs	r3, #3
 8010dfe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8010e00:	2306      	movs	r3, #6
 8010e02:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8010e04:	f107 0314 	add.w	r3, r7, #20
 8010e08:	4619      	mov	r1, r3
 8010e0a:	4805      	ldr	r0, [pc, #20]	; (8010e20 <HAL_SPI_MspInit+0x8c>)
 8010e0c:	f7f1 f8c8 	bl	8001fa0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8010e10:	bf00      	nop
 8010e12:	3728      	adds	r7, #40	; 0x28
 8010e14:	46bd      	mov	sp, r7
 8010e16:	bd80      	pop	{r7, pc}
 8010e18:	40003c00 	.word	0x40003c00
 8010e1c:	40023800 	.word	0x40023800
 8010e20:	40020800 	.word	0x40020800

08010e24 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8010e24:	b580      	push	{r7, lr}
 8010e26:	b086      	sub	sp, #24
 8010e28:	af00      	add	r7, sp, #0
 8010e2a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8010e2c:	687b      	ldr	r3, [r7, #4]
 8010e2e:	681b      	ldr	r3, [r3, #0]
 8010e30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010e34:	d10e      	bne.n	8010e54 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8010e36:	2300      	movs	r3, #0
 8010e38:	617b      	str	r3, [r7, #20]
 8010e3a:	4b20      	ldr	r3, [pc, #128]	; (8010ebc <HAL_TIM_Base_MspInit+0x98>)
 8010e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010e3e:	4a1f      	ldr	r2, [pc, #124]	; (8010ebc <HAL_TIM_Base_MspInit+0x98>)
 8010e40:	f043 0301 	orr.w	r3, r3, #1
 8010e44:	6413      	str	r3, [r2, #64]	; 0x40
 8010e46:	4b1d      	ldr	r3, [pc, #116]	; (8010ebc <HAL_TIM_Base_MspInit+0x98>)
 8010e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010e4a:	f003 0301 	and.w	r3, r3, #1
 8010e4e:	617b      	str	r3, [r7, #20]
 8010e50:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8010e52:	e02e      	b.n	8010eb2 <HAL_TIM_Base_MspInit+0x8e>
  else if(htim_base->Instance==TIM3)
 8010e54:	687b      	ldr	r3, [r7, #4]
 8010e56:	681b      	ldr	r3, [r3, #0]
 8010e58:	4a19      	ldr	r2, [pc, #100]	; (8010ec0 <HAL_TIM_Base_MspInit+0x9c>)
 8010e5a:	4293      	cmp	r3, r2
 8010e5c:	d10e      	bne.n	8010e7c <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8010e5e:	2300      	movs	r3, #0
 8010e60:	613b      	str	r3, [r7, #16]
 8010e62:	4b16      	ldr	r3, [pc, #88]	; (8010ebc <HAL_TIM_Base_MspInit+0x98>)
 8010e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010e66:	4a15      	ldr	r2, [pc, #84]	; (8010ebc <HAL_TIM_Base_MspInit+0x98>)
 8010e68:	f043 0302 	orr.w	r3, r3, #2
 8010e6c:	6413      	str	r3, [r2, #64]	; 0x40
 8010e6e:	4b13      	ldr	r3, [pc, #76]	; (8010ebc <HAL_TIM_Base_MspInit+0x98>)
 8010e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010e72:	f003 0302 	and.w	r3, r3, #2
 8010e76:	613b      	str	r3, [r7, #16]
 8010e78:	693b      	ldr	r3, [r7, #16]
}
 8010e7a:	e01a      	b.n	8010eb2 <HAL_TIM_Base_MspInit+0x8e>
  else if(htim_base->Instance==TIM6)
 8010e7c:	687b      	ldr	r3, [r7, #4]
 8010e7e:	681b      	ldr	r3, [r3, #0]
 8010e80:	4a10      	ldr	r2, [pc, #64]	; (8010ec4 <HAL_TIM_Base_MspInit+0xa0>)
 8010e82:	4293      	cmp	r3, r2
 8010e84:	d115      	bne.n	8010eb2 <HAL_TIM_Base_MspInit+0x8e>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8010e86:	2300      	movs	r3, #0
 8010e88:	60fb      	str	r3, [r7, #12]
 8010e8a:	4b0c      	ldr	r3, [pc, #48]	; (8010ebc <HAL_TIM_Base_MspInit+0x98>)
 8010e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010e8e:	4a0b      	ldr	r2, [pc, #44]	; (8010ebc <HAL_TIM_Base_MspInit+0x98>)
 8010e90:	f043 0310 	orr.w	r3, r3, #16
 8010e94:	6413      	str	r3, [r2, #64]	; 0x40
 8010e96:	4b09      	ldr	r3, [pc, #36]	; (8010ebc <HAL_TIM_Base_MspInit+0x98>)
 8010e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010e9a:	f003 0310 	and.w	r3, r3, #16
 8010e9e:	60fb      	str	r3, [r7, #12]
 8010ea0:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8010ea2:	2200      	movs	r2, #0
 8010ea4:	2100      	movs	r1, #0
 8010ea6:	2036      	movs	r0, #54	; 0x36
 8010ea8:	f7f0 fd6f 	bl	800198a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8010eac:	2036      	movs	r0, #54	; 0x36
 8010eae:	f7f0 fd88 	bl	80019c2 <HAL_NVIC_EnableIRQ>
}
 8010eb2:	bf00      	nop
 8010eb4:	3718      	adds	r7, #24
 8010eb6:	46bd      	mov	sp, r7
 8010eb8:	bd80      	pop	{r7, pc}
 8010eba:	bf00      	nop
 8010ebc:	40023800 	.word	0x40023800
 8010ec0:	40000400 	.word	0x40000400
 8010ec4:	40001000 	.word	0x40001000

08010ec8 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8010ec8:	b580      	push	{r7, lr}
 8010eca:	b08c      	sub	sp, #48	; 0x30
 8010ecc:	af00      	add	r7, sp, #0
 8010ece:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8010ed0:	f107 031c 	add.w	r3, r7, #28
 8010ed4:	2200      	movs	r2, #0
 8010ed6:	601a      	str	r2, [r3, #0]
 8010ed8:	605a      	str	r2, [r3, #4]
 8010eda:	609a      	str	r2, [r3, #8]
 8010edc:	60da      	str	r2, [r3, #12]
 8010ede:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM4)
 8010ee0:	687b      	ldr	r3, [r7, #4]
 8010ee2:	681b      	ldr	r3, [r3, #0]
 8010ee4:	4a32      	ldr	r2, [pc, #200]	; (8010fb0 <HAL_TIM_Encoder_MspInit+0xe8>)
 8010ee6:	4293      	cmp	r3, r2
 8010ee8:	d12c      	bne.n	8010f44 <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8010eea:	2300      	movs	r3, #0
 8010eec:	61bb      	str	r3, [r7, #24]
 8010eee:	4b31      	ldr	r3, [pc, #196]	; (8010fb4 <HAL_TIM_Encoder_MspInit+0xec>)
 8010ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010ef2:	4a30      	ldr	r2, [pc, #192]	; (8010fb4 <HAL_TIM_Encoder_MspInit+0xec>)
 8010ef4:	f043 0304 	orr.w	r3, r3, #4
 8010ef8:	6413      	str	r3, [r2, #64]	; 0x40
 8010efa:	4b2e      	ldr	r3, [pc, #184]	; (8010fb4 <HAL_TIM_Encoder_MspInit+0xec>)
 8010efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010efe:	f003 0304 	and.w	r3, r3, #4
 8010f02:	61bb      	str	r3, [r7, #24]
 8010f04:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8010f06:	2300      	movs	r3, #0
 8010f08:	617b      	str	r3, [r7, #20]
 8010f0a:	4b2a      	ldr	r3, [pc, #168]	; (8010fb4 <HAL_TIM_Encoder_MspInit+0xec>)
 8010f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010f0e:	4a29      	ldr	r2, [pc, #164]	; (8010fb4 <HAL_TIM_Encoder_MspInit+0xec>)
 8010f10:	f043 0302 	orr.w	r3, r3, #2
 8010f14:	6313      	str	r3, [r2, #48]	; 0x30
 8010f16:	4b27      	ldr	r3, [pc, #156]	; (8010fb4 <HAL_TIM_Encoder_MspInit+0xec>)
 8010f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010f1a:	f003 0302 	and.w	r3, r3, #2
 8010f1e:	617b      	str	r3, [r7, #20]
 8010f20:	697b      	ldr	r3, [r7, #20]
    /**TIM4 GPIO Configuration    
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8010f22:	23c0      	movs	r3, #192	; 0xc0
 8010f24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010f26:	2302      	movs	r3, #2
 8010f28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010f2a:	2300      	movs	r3, #0
 8010f2c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8010f2e:	2300      	movs	r3, #0
 8010f30:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8010f32:	2302      	movs	r3, #2
 8010f34:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8010f36:	f107 031c 	add.w	r3, r7, #28
 8010f3a:	4619      	mov	r1, r3
 8010f3c:	481e      	ldr	r0, [pc, #120]	; (8010fb8 <HAL_TIM_Encoder_MspInit+0xf0>)
 8010f3e:	f7f1 f82f 	bl	8001fa0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8010f42:	e030      	b.n	8010fa6 <HAL_TIM_Encoder_MspInit+0xde>
  else if(htim_encoder->Instance==TIM8)
 8010f44:	687b      	ldr	r3, [r7, #4]
 8010f46:	681b      	ldr	r3, [r3, #0]
 8010f48:	4a1c      	ldr	r2, [pc, #112]	; (8010fbc <HAL_TIM_Encoder_MspInit+0xf4>)
 8010f4a:	4293      	cmp	r3, r2
 8010f4c:	d12b      	bne.n	8010fa6 <HAL_TIM_Encoder_MspInit+0xde>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8010f4e:	2300      	movs	r3, #0
 8010f50:	613b      	str	r3, [r7, #16]
 8010f52:	4b18      	ldr	r3, [pc, #96]	; (8010fb4 <HAL_TIM_Encoder_MspInit+0xec>)
 8010f54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010f56:	4a17      	ldr	r2, [pc, #92]	; (8010fb4 <HAL_TIM_Encoder_MspInit+0xec>)
 8010f58:	f043 0302 	orr.w	r3, r3, #2
 8010f5c:	6453      	str	r3, [r2, #68]	; 0x44
 8010f5e:	4b15      	ldr	r3, [pc, #84]	; (8010fb4 <HAL_TIM_Encoder_MspInit+0xec>)
 8010f60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010f62:	f003 0302 	and.w	r3, r3, #2
 8010f66:	613b      	str	r3, [r7, #16]
 8010f68:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8010f6a:	2300      	movs	r3, #0
 8010f6c:	60fb      	str	r3, [r7, #12]
 8010f6e:	4b11      	ldr	r3, [pc, #68]	; (8010fb4 <HAL_TIM_Encoder_MspInit+0xec>)
 8010f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010f72:	4a10      	ldr	r2, [pc, #64]	; (8010fb4 <HAL_TIM_Encoder_MspInit+0xec>)
 8010f74:	f043 0304 	orr.w	r3, r3, #4
 8010f78:	6313      	str	r3, [r2, #48]	; 0x30
 8010f7a:	4b0e      	ldr	r3, [pc, #56]	; (8010fb4 <HAL_TIM_Encoder_MspInit+0xec>)
 8010f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010f7e:	f003 0304 	and.w	r3, r3, #4
 8010f82:	60fb      	str	r3, [r7, #12]
 8010f84:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8010f86:	23c0      	movs	r3, #192	; 0xc0
 8010f88:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010f8a:	2302      	movs	r3, #2
 8010f8c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010f8e:	2300      	movs	r3, #0
 8010f90:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8010f92:	2300      	movs	r3, #0
 8010f94:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8010f96:	2303      	movs	r3, #3
 8010f98:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8010f9a:	f107 031c 	add.w	r3, r7, #28
 8010f9e:	4619      	mov	r1, r3
 8010fa0:	4807      	ldr	r0, [pc, #28]	; (8010fc0 <HAL_TIM_Encoder_MspInit+0xf8>)
 8010fa2:	f7f0 fffd 	bl	8001fa0 <HAL_GPIO_Init>
}
 8010fa6:	bf00      	nop
 8010fa8:	3730      	adds	r7, #48	; 0x30
 8010faa:	46bd      	mov	sp, r7
 8010fac:	bd80      	pop	{r7, pc}
 8010fae:	bf00      	nop
 8010fb0:	40000800 	.word	0x40000800
 8010fb4:	40023800 	.word	0x40023800
 8010fb8:	40020400 	.word	0x40020400
 8010fbc:	40010400 	.word	0x40010400
 8010fc0:	40020800 	.word	0x40020800

08010fc4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8010fc4:	b580      	push	{r7, lr}
 8010fc6:	b08a      	sub	sp, #40	; 0x28
 8010fc8:	af00      	add	r7, sp, #0
 8010fca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8010fcc:	f107 0314 	add.w	r3, r7, #20
 8010fd0:	2200      	movs	r2, #0
 8010fd2:	601a      	str	r2, [r3, #0]
 8010fd4:	605a      	str	r2, [r3, #4]
 8010fd6:	609a      	str	r2, [r3, #8]
 8010fd8:	60da      	str	r2, [r3, #12]
 8010fda:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8010fdc:	687b      	ldr	r3, [r7, #4]
 8010fde:	681b      	ldr	r3, [r3, #0]
 8010fe0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010fe4:	d13d      	bne.n	8011062 <HAL_TIM_MspPostInit+0x9e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8010fe6:	2300      	movs	r3, #0
 8010fe8:	613b      	str	r3, [r7, #16]
 8010fea:	4b31      	ldr	r3, [pc, #196]	; (80110b0 <HAL_TIM_MspPostInit+0xec>)
 8010fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010fee:	4a30      	ldr	r2, [pc, #192]	; (80110b0 <HAL_TIM_MspPostInit+0xec>)
 8010ff0:	f043 0301 	orr.w	r3, r3, #1
 8010ff4:	6313      	str	r3, [r2, #48]	; 0x30
 8010ff6:	4b2e      	ldr	r3, [pc, #184]	; (80110b0 <HAL_TIM_MspPostInit+0xec>)
 8010ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010ffa:	f003 0301 	and.w	r3, r3, #1
 8010ffe:	613b      	str	r3, [r7, #16]
 8011000:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8011002:	2300      	movs	r3, #0
 8011004:	60fb      	str	r3, [r7, #12]
 8011006:	4b2a      	ldr	r3, [pc, #168]	; (80110b0 <HAL_TIM_MspPostInit+0xec>)
 8011008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801100a:	4a29      	ldr	r2, [pc, #164]	; (80110b0 <HAL_TIM_MspPostInit+0xec>)
 801100c:	f043 0302 	orr.w	r3, r3, #2
 8011010:	6313      	str	r3, [r2, #48]	; 0x30
 8011012:	4b27      	ldr	r3, [pc, #156]	; (80110b0 <HAL_TIM_MspPostInit+0xec>)
 8011014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011016:	f003 0302 	and.w	r3, r3, #2
 801101a:	60fb      	str	r3, [r7, #12]
 801101c:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration    
    PA5     ------> TIM2_CH1
    PB11     ------> TIM2_CH4 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 801101e:	2320      	movs	r3, #32
 8011020:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011022:	2302      	movs	r3, #2
 8011024:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011026:	2300      	movs	r3, #0
 8011028:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801102a:	2300      	movs	r3, #0
 801102c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 801102e:	2301      	movs	r3, #1
 8011030:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8011032:	f107 0314 	add.w	r3, r7, #20
 8011036:	4619      	mov	r1, r3
 8011038:	481e      	ldr	r0, [pc, #120]	; (80110b4 <HAL_TIM_MspPostInit+0xf0>)
 801103a:	f7f0 ffb1 	bl	8001fa0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 801103e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8011042:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011044:	2302      	movs	r3, #2
 8011046:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011048:	2300      	movs	r3, #0
 801104a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801104c:	2300      	movs	r3, #0
 801104e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8011050:	2301      	movs	r3, #1
 8011052:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8011054:	f107 0314 	add.w	r3, r7, #20
 8011058:	4619      	mov	r1, r3
 801105a:	4817      	ldr	r0, [pc, #92]	; (80110b8 <HAL_TIM_MspPostInit+0xf4>)
 801105c:	f7f0 ffa0 	bl	8001fa0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8011060:	e022      	b.n	80110a8 <HAL_TIM_MspPostInit+0xe4>
  else if(htim->Instance==TIM3)
 8011062:	687b      	ldr	r3, [r7, #4]
 8011064:	681b      	ldr	r3, [r3, #0]
 8011066:	4a15      	ldr	r2, [pc, #84]	; (80110bc <HAL_TIM_MspPostInit+0xf8>)
 8011068:	4293      	cmp	r3, r2
 801106a:	d11d      	bne.n	80110a8 <HAL_TIM_MspPostInit+0xe4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 801106c:	2300      	movs	r3, #0
 801106e:	60bb      	str	r3, [r7, #8]
 8011070:	4b0f      	ldr	r3, [pc, #60]	; (80110b0 <HAL_TIM_MspPostInit+0xec>)
 8011072:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011074:	4a0e      	ldr	r2, [pc, #56]	; (80110b0 <HAL_TIM_MspPostInit+0xec>)
 8011076:	f043 0302 	orr.w	r3, r3, #2
 801107a:	6313      	str	r3, [r2, #48]	; 0x30
 801107c:	4b0c      	ldr	r3, [pc, #48]	; (80110b0 <HAL_TIM_MspPostInit+0xec>)
 801107e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011080:	f003 0302 	and.w	r3, r3, #2
 8011084:	60bb      	str	r3, [r7, #8]
 8011086:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8011088:	2320      	movs	r3, #32
 801108a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801108c:	2302      	movs	r3, #2
 801108e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011090:	2300      	movs	r3, #0
 8011092:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8011094:	2300      	movs	r3, #0
 8011096:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8011098:	2302      	movs	r3, #2
 801109a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 801109c:	f107 0314 	add.w	r3, r7, #20
 80110a0:	4619      	mov	r1, r3
 80110a2:	4805      	ldr	r0, [pc, #20]	; (80110b8 <HAL_TIM_MspPostInit+0xf4>)
 80110a4:	f7f0 ff7c 	bl	8001fa0 <HAL_GPIO_Init>
}
 80110a8:	bf00      	nop
 80110aa:	3728      	adds	r7, #40	; 0x28
 80110ac:	46bd      	mov	sp, r7
 80110ae:	bd80      	pop	{r7, pc}
 80110b0:	40023800 	.word	0x40023800
 80110b4:	40020000 	.word	0x40020000
 80110b8:	40020400 	.word	0x40020400
 80110bc:	40000400 	.word	0x40000400

080110c0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80110c0:	b580      	push	{r7, lr}
 80110c2:	b08a      	sub	sp, #40	; 0x28
 80110c4:	af00      	add	r7, sp, #0
 80110c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80110c8:	f107 0314 	add.w	r3, r7, #20
 80110cc:	2200      	movs	r2, #0
 80110ce:	601a      	str	r2, [r3, #0]
 80110d0:	605a      	str	r2, [r3, #4]
 80110d2:	609a      	str	r2, [r3, #8]
 80110d4:	60da      	str	r2, [r3, #12]
 80110d6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80110d8:	687b      	ldr	r3, [r7, #4]
 80110da:	681b      	ldr	r3, [r3, #0]
 80110dc:	4a19      	ldr	r2, [pc, #100]	; (8011144 <HAL_UART_MspInit+0x84>)
 80110de:	4293      	cmp	r3, r2
 80110e0:	d12c      	bne.n	801113c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80110e2:	2300      	movs	r3, #0
 80110e4:	613b      	str	r3, [r7, #16]
 80110e6:	4b18      	ldr	r3, [pc, #96]	; (8011148 <HAL_UART_MspInit+0x88>)
 80110e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80110ea:	4a17      	ldr	r2, [pc, #92]	; (8011148 <HAL_UART_MspInit+0x88>)
 80110ec:	f043 0310 	orr.w	r3, r3, #16
 80110f0:	6453      	str	r3, [r2, #68]	; 0x44
 80110f2:	4b15      	ldr	r3, [pc, #84]	; (8011148 <HAL_UART_MspInit+0x88>)
 80110f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80110f6:	f003 0310 	and.w	r3, r3, #16
 80110fa:	613b      	str	r3, [r7, #16]
 80110fc:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80110fe:	2300      	movs	r3, #0
 8011100:	60fb      	str	r3, [r7, #12]
 8011102:	4b11      	ldr	r3, [pc, #68]	; (8011148 <HAL_UART_MspInit+0x88>)
 8011104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011106:	4a10      	ldr	r2, [pc, #64]	; (8011148 <HAL_UART_MspInit+0x88>)
 8011108:	f043 0301 	orr.w	r3, r3, #1
 801110c:	6313      	str	r3, [r2, #48]	; 0x30
 801110e:	4b0e      	ldr	r3, [pc, #56]	; (8011148 <HAL_UART_MspInit+0x88>)
 8011110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011112:	f003 0301 	and.w	r3, r3, #1
 8011116:	60fb      	str	r3, [r7, #12]
 8011118:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 801111a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 801111e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011120:	2302      	movs	r3, #2
 8011122:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8011124:	2301      	movs	r3, #1
 8011126:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8011128:	2303      	movs	r3, #3
 801112a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 801112c:	2307      	movs	r3, #7
 801112e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8011130:	f107 0314 	add.w	r3, r7, #20
 8011134:	4619      	mov	r1, r3
 8011136:	4805      	ldr	r0, [pc, #20]	; (801114c <HAL_UART_MspInit+0x8c>)
 8011138:	f7f0 ff32 	bl	8001fa0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 801113c:	bf00      	nop
 801113e:	3728      	adds	r7, #40	; 0x28
 8011140:	46bd      	mov	sp, r7
 8011142:	bd80      	pop	{r7, pc}
 8011144:	40011000 	.word	0x40011000
 8011148:	40023800 	.word	0x40023800
 801114c:	40020000 	.word	0x40020000

08011150 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8011150:	b480      	push	{r7}
 8011152:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8011154:	bf00      	nop
 8011156:	46bd      	mov	sp, r7
 8011158:	f85d 7b04 	ldr.w	r7, [sp], #4
 801115c:	4770      	bx	lr

0801115e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 801115e:	b480      	push	{r7}
 8011160:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8011162:	e7fe      	b.n	8011162 <HardFault_Handler+0x4>

08011164 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8011164:	b480      	push	{r7}
 8011166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8011168:	e7fe      	b.n	8011168 <MemManage_Handler+0x4>

0801116a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 801116a:	b480      	push	{r7}
 801116c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 801116e:	e7fe      	b.n	801116e <BusFault_Handler+0x4>

08011170 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8011170:	b480      	push	{r7}
 8011172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8011174:	e7fe      	b.n	8011174 <UsageFault_Handler+0x4>

08011176 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8011176:	b480      	push	{r7}
 8011178:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 801117a:	bf00      	nop
 801117c:	46bd      	mov	sp, r7
 801117e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011182:	4770      	bx	lr

08011184 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8011184:	b480      	push	{r7}
 8011186:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8011188:	bf00      	nop
 801118a:	46bd      	mov	sp, r7
 801118c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011190:	4770      	bx	lr

08011192 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8011192:	b480      	push	{r7}
 8011194:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8011196:	bf00      	nop
 8011198:	46bd      	mov	sp, r7
 801119a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801119e:	4770      	bx	lr

080111a0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80111a0:	b580      	push	{r7, lr}
 80111a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80111a4:	f7ef ff1a 	bl	8000fdc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80111a8:	bf00      	nop
 80111aa:	bd80      	pop	{r7, pc}

080111ac <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80111ac:	b580      	push	{r7, lr}
 80111ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80111b0:	4802      	ldr	r0, [pc, #8]	; (80111bc <TIM6_DAC_IRQHandler+0x10>)
 80111b2:	f7f2 fc02 	bl	80039ba <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80111b6:	bf00      	nop
 80111b8:	bd80      	pop	{r7, pc}
 80111ba:	bf00      	nop
 80111bc:	20000bb4 	.word	0x20000bb4

080111c0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80111c0:	b580      	push	{r7, lr}
 80111c2:	b086      	sub	sp, #24
 80111c4:	af00      	add	r7, sp, #0
 80111c6:	60f8      	str	r0, [r7, #12]
 80111c8:	60b9      	str	r1, [r7, #8]
 80111ca:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80111cc:	2300      	movs	r3, #0
 80111ce:	617b      	str	r3, [r7, #20]
 80111d0:	e00a      	b.n	80111e8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80111d2:	f3af 8000 	nop.w
 80111d6:	4601      	mov	r1, r0
 80111d8:	68bb      	ldr	r3, [r7, #8]
 80111da:	1c5a      	adds	r2, r3, #1
 80111dc:	60ba      	str	r2, [r7, #8]
 80111de:	b2ca      	uxtb	r2, r1
 80111e0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80111e2:	697b      	ldr	r3, [r7, #20]
 80111e4:	3301      	adds	r3, #1
 80111e6:	617b      	str	r3, [r7, #20]
 80111e8:	697a      	ldr	r2, [r7, #20]
 80111ea:	687b      	ldr	r3, [r7, #4]
 80111ec:	429a      	cmp	r2, r3
 80111ee:	dbf0      	blt.n	80111d2 <_read+0x12>
	}

return len;
 80111f0:	687b      	ldr	r3, [r7, #4]
}
 80111f2:	4618      	mov	r0, r3
 80111f4:	3718      	adds	r7, #24
 80111f6:	46bd      	mov	sp, r7
 80111f8:	bd80      	pop	{r7, pc}

080111fa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80111fa:	b580      	push	{r7, lr}
 80111fc:	b086      	sub	sp, #24
 80111fe:	af00      	add	r7, sp, #0
 8011200:	60f8      	str	r0, [r7, #12]
 8011202:	60b9      	str	r1, [r7, #8]
 8011204:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8011206:	2300      	movs	r3, #0
 8011208:	617b      	str	r3, [r7, #20]
 801120a:	e009      	b.n	8011220 <_write+0x26>
	{
		__io_putchar(*ptr++);
 801120c:	68bb      	ldr	r3, [r7, #8]
 801120e:	1c5a      	adds	r2, r3, #1
 8011210:	60ba      	str	r2, [r7, #8]
 8011212:	781b      	ldrb	r3, [r3, #0]
 8011214:	4618      	mov	r0, r3
 8011216:	f7fa fae5 	bl	800b7e4 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 801121a:	697b      	ldr	r3, [r7, #20]
 801121c:	3301      	adds	r3, #1
 801121e:	617b      	str	r3, [r7, #20]
 8011220:	697a      	ldr	r2, [r7, #20]
 8011222:	687b      	ldr	r3, [r7, #4]
 8011224:	429a      	cmp	r2, r3
 8011226:	dbf1      	blt.n	801120c <_write+0x12>
	}
	return len;
 8011228:	687b      	ldr	r3, [r7, #4]
}
 801122a:	4618      	mov	r0, r3
 801122c:	3718      	adds	r7, #24
 801122e:	46bd      	mov	sp, r7
 8011230:	bd80      	pop	{r7, pc}

08011232 <_close>:

int _close(int file)
{
 8011232:	b480      	push	{r7}
 8011234:	b083      	sub	sp, #12
 8011236:	af00      	add	r7, sp, #0
 8011238:	6078      	str	r0, [r7, #4]
	return -1;
 801123a:	f04f 33ff 	mov.w	r3, #4294967295
}
 801123e:	4618      	mov	r0, r3
 8011240:	370c      	adds	r7, #12
 8011242:	46bd      	mov	sp, r7
 8011244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011248:	4770      	bx	lr

0801124a <_fstat>:


int _fstat(int file, struct stat *st)
{
 801124a:	b480      	push	{r7}
 801124c:	b083      	sub	sp, #12
 801124e:	af00      	add	r7, sp, #0
 8011250:	6078      	str	r0, [r7, #4]
 8011252:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8011254:	683b      	ldr	r3, [r7, #0]
 8011256:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 801125a:	605a      	str	r2, [r3, #4]
	return 0;
 801125c:	2300      	movs	r3, #0
}
 801125e:	4618      	mov	r0, r3
 8011260:	370c      	adds	r7, #12
 8011262:	46bd      	mov	sp, r7
 8011264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011268:	4770      	bx	lr

0801126a <_isatty>:

int _isatty(int file)
{
 801126a:	b480      	push	{r7}
 801126c:	b083      	sub	sp, #12
 801126e:	af00      	add	r7, sp, #0
 8011270:	6078      	str	r0, [r7, #4]
	return 1;
 8011272:	2301      	movs	r3, #1
}
 8011274:	4618      	mov	r0, r3
 8011276:	370c      	adds	r7, #12
 8011278:	46bd      	mov	sp, r7
 801127a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801127e:	4770      	bx	lr

08011280 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8011280:	b480      	push	{r7}
 8011282:	b085      	sub	sp, #20
 8011284:	af00      	add	r7, sp, #0
 8011286:	60f8      	str	r0, [r7, #12]
 8011288:	60b9      	str	r1, [r7, #8]
 801128a:	607a      	str	r2, [r7, #4]
	return 0;
 801128c:	2300      	movs	r3, #0
}
 801128e:	4618      	mov	r0, r3
 8011290:	3714      	adds	r7, #20
 8011292:	46bd      	mov	sp, r7
 8011294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011298:	4770      	bx	lr
	...

0801129c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 801129c:	b580      	push	{r7, lr}
 801129e:	b084      	sub	sp, #16
 80112a0:	af00      	add	r7, sp, #0
 80112a2:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80112a4:	4b11      	ldr	r3, [pc, #68]	; (80112ec <_sbrk+0x50>)
 80112a6:	681b      	ldr	r3, [r3, #0]
 80112a8:	2b00      	cmp	r3, #0
 80112aa:	d102      	bne.n	80112b2 <_sbrk+0x16>
		heap_end = &end;
 80112ac:	4b0f      	ldr	r3, [pc, #60]	; (80112ec <_sbrk+0x50>)
 80112ae:	4a10      	ldr	r2, [pc, #64]	; (80112f0 <_sbrk+0x54>)
 80112b0:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80112b2:	4b0e      	ldr	r3, [pc, #56]	; (80112ec <_sbrk+0x50>)
 80112b4:	681b      	ldr	r3, [r3, #0]
 80112b6:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80112b8:	4b0c      	ldr	r3, [pc, #48]	; (80112ec <_sbrk+0x50>)
 80112ba:	681a      	ldr	r2, [r3, #0]
 80112bc:	687b      	ldr	r3, [r7, #4]
 80112be:	4413      	add	r3, r2
 80112c0:	466a      	mov	r2, sp
 80112c2:	4293      	cmp	r3, r2
 80112c4:	d907      	bls.n	80112d6 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80112c6:	f000 f875 	bl	80113b4 <__errno>
 80112ca:	4602      	mov	r2, r0
 80112cc:	230c      	movs	r3, #12
 80112ce:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80112d0:	f04f 33ff 	mov.w	r3, #4294967295
 80112d4:	e006      	b.n	80112e4 <_sbrk+0x48>
	}

	heap_end += incr;
 80112d6:	4b05      	ldr	r3, [pc, #20]	; (80112ec <_sbrk+0x50>)
 80112d8:	681a      	ldr	r2, [r3, #0]
 80112da:	687b      	ldr	r3, [r7, #4]
 80112dc:	4413      	add	r3, r2
 80112de:	4a03      	ldr	r2, [pc, #12]	; (80112ec <_sbrk+0x50>)
 80112e0:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80112e2:	68fb      	ldr	r3, [r7, #12]
}
 80112e4:	4618      	mov	r0, r3
 80112e6:	3710      	adds	r7, #16
 80112e8:	46bd      	mov	sp, r7
 80112ea:	bd80      	pop	{r7, pc}
 80112ec:	20000114 	.word	0x20000114
 80112f0:	200015e0 	.word	0x200015e0

080112f4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80112f4:	b480      	push	{r7}
 80112f6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80112f8:	4b16      	ldr	r3, [pc, #88]	; (8011354 <SystemInit+0x60>)
 80112fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80112fe:	4a15      	ldr	r2, [pc, #84]	; (8011354 <SystemInit+0x60>)
 8011300:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8011304:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8011308:	4b13      	ldr	r3, [pc, #76]	; (8011358 <SystemInit+0x64>)
 801130a:	681b      	ldr	r3, [r3, #0]
 801130c:	4a12      	ldr	r2, [pc, #72]	; (8011358 <SystemInit+0x64>)
 801130e:	f043 0301 	orr.w	r3, r3, #1
 8011312:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8011314:	4b10      	ldr	r3, [pc, #64]	; (8011358 <SystemInit+0x64>)
 8011316:	2200      	movs	r2, #0
 8011318:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 801131a:	4b0f      	ldr	r3, [pc, #60]	; (8011358 <SystemInit+0x64>)
 801131c:	681b      	ldr	r3, [r3, #0]
 801131e:	4a0e      	ldr	r2, [pc, #56]	; (8011358 <SystemInit+0x64>)
 8011320:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8011324:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8011328:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 801132a:	4b0b      	ldr	r3, [pc, #44]	; (8011358 <SystemInit+0x64>)
 801132c:	4a0b      	ldr	r2, [pc, #44]	; (801135c <SystemInit+0x68>)
 801132e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8011330:	4b09      	ldr	r3, [pc, #36]	; (8011358 <SystemInit+0x64>)
 8011332:	681b      	ldr	r3, [r3, #0]
 8011334:	4a08      	ldr	r2, [pc, #32]	; (8011358 <SystemInit+0x64>)
 8011336:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 801133a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 801133c:	4b06      	ldr	r3, [pc, #24]	; (8011358 <SystemInit+0x64>)
 801133e:	2200      	movs	r2, #0
 8011340:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8011342:	4b04      	ldr	r3, [pc, #16]	; (8011354 <SystemInit+0x60>)
 8011344:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8011348:	609a      	str	r2, [r3, #8]
#endif
}
 801134a:	bf00      	nop
 801134c:	46bd      	mov	sp, r7
 801134e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011352:	4770      	bx	lr
 8011354:	e000ed00 	.word	0xe000ed00
 8011358:	40023800 	.word	0x40023800
 801135c:	24003010 	.word	0x24003010

08011360 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8011360:	f8df d034 	ldr.w	sp, [pc, #52]	; 8011398 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8011364:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8011366:	e003      	b.n	8011370 <LoopCopyDataInit>

08011368 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8011368:	4b0c      	ldr	r3, [pc, #48]	; (801139c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 801136a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 801136c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 801136e:	3104      	adds	r1, #4

08011370 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8011370:	480b      	ldr	r0, [pc, #44]	; (80113a0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8011372:	4b0c      	ldr	r3, [pc, #48]	; (80113a4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8011374:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8011376:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8011378:	d3f6      	bcc.n	8011368 <CopyDataInit>
  ldr  r2, =_sbss
 801137a:	4a0b      	ldr	r2, [pc, #44]	; (80113a8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 801137c:	e002      	b.n	8011384 <LoopFillZerobss>

0801137e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 801137e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8011380:	f842 3b04 	str.w	r3, [r2], #4

08011384 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8011384:	4b09      	ldr	r3, [pc, #36]	; (80113ac <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8011386:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8011388:	d3f9      	bcc.n	801137e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 801138a:	f7ff ffb3 	bl	80112f4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 801138e:	f000 f817 	bl	80113c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8011392:	f7fb fd49 	bl	800ce28 <main>
  bx  lr    
 8011396:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8011398:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 801139c:	08012c1c 	.word	0x08012c1c
  ldr  r0, =_sdata
 80113a0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80113a4:	200000ec 	.word	0x200000ec
  ldr  r2, =_sbss
 80113a8:	200000ec 	.word	0x200000ec
  ldr  r3, = _ebss
 80113ac:	200015dc 	.word	0x200015dc

080113b0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80113b0:	e7fe      	b.n	80113b0 <ADC_IRQHandler>
	...

080113b4 <__errno>:
 80113b4:	4b01      	ldr	r3, [pc, #4]	; (80113bc <__errno+0x8>)
 80113b6:	6818      	ldr	r0, [r3, #0]
 80113b8:	4770      	bx	lr
 80113ba:	bf00      	nop
 80113bc:	20000084 	.word	0x20000084

080113c0 <__libc_init_array>:
 80113c0:	b570      	push	{r4, r5, r6, lr}
 80113c2:	4e0d      	ldr	r6, [pc, #52]	; (80113f8 <__libc_init_array+0x38>)
 80113c4:	4c0d      	ldr	r4, [pc, #52]	; (80113fc <__libc_init_array+0x3c>)
 80113c6:	1ba4      	subs	r4, r4, r6
 80113c8:	10a4      	asrs	r4, r4, #2
 80113ca:	2500      	movs	r5, #0
 80113cc:	42a5      	cmp	r5, r4
 80113ce:	d109      	bne.n	80113e4 <__libc_init_array+0x24>
 80113d0:	4e0b      	ldr	r6, [pc, #44]	; (8011400 <__libc_init_array+0x40>)
 80113d2:	4c0c      	ldr	r4, [pc, #48]	; (8011404 <__libc_init_array+0x44>)
 80113d4:	f001 f932 	bl	801263c <_init>
 80113d8:	1ba4      	subs	r4, r4, r6
 80113da:	10a4      	asrs	r4, r4, #2
 80113dc:	2500      	movs	r5, #0
 80113de:	42a5      	cmp	r5, r4
 80113e0:	d105      	bne.n	80113ee <__libc_init_array+0x2e>
 80113e2:	bd70      	pop	{r4, r5, r6, pc}
 80113e4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80113e8:	4798      	blx	r3
 80113ea:	3501      	adds	r5, #1
 80113ec:	e7ee      	b.n	80113cc <__libc_init_array+0xc>
 80113ee:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80113f2:	4798      	blx	r3
 80113f4:	3501      	adds	r5, #1
 80113f6:	e7f2      	b.n	80113de <__libc_init_array+0x1e>
 80113f8:	08012c14 	.word	0x08012c14
 80113fc:	08012c14 	.word	0x08012c14
 8011400:	08012c14 	.word	0x08012c14
 8011404:	08012c18 	.word	0x08012c18

08011408 <memset>:
 8011408:	4402      	add	r2, r0
 801140a:	4603      	mov	r3, r0
 801140c:	4293      	cmp	r3, r2
 801140e:	d100      	bne.n	8011412 <memset+0xa>
 8011410:	4770      	bx	lr
 8011412:	f803 1b01 	strb.w	r1, [r3], #1
 8011416:	e7f9      	b.n	801140c <memset+0x4>

08011418 <iprintf>:
 8011418:	b40f      	push	{r0, r1, r2, r3}
 801141a:	4b0a      	ldr	r3, [pc, #40]	; (8011444 <iprintf+0x2c>)
 801141c:	b513      	push	{r0, r1, r4, lr}
 801141e:	681c      	ldr	r4, [r3, #0]
 8011420:	b124      	cbz	r4, 801142c <iprintf+0x14>
 8011422:	69a3      	ldr	r3, [r4, #24]
 8011424:	b913      	cbnz	r3, 801142c <iprintf+0x14>
 8011426:	4620      	mov	r0, r4
 8011428:	f000 fad8 	bl	80119dc <__sinit>
 801142c:	ab05      	add	r3, sp, #20
 801142e:	9a04      	ldr	r2, [sp, #16]
 8011430:	68a1      	ldr	r1, [r4, #8]
 8011432:	9301      	str	r3, [sp, #4]
 8011434:	4620      	mov	r0, r4
 8011436:	f000 fc99 	bl	8011d6c <_vfiprintf_r>
 801143a:	b002      	add	sp, #8
 801143c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011440:	b004      	add	sp, #16
 8011442:	4770      	bx	lr
 8011444:	20000084 	.word	0x20000084

08011448 <_puts_r>:
 8011448:	b570      	push	{r4, r5, r6, lr}
 801144a:	460e      	mov	r6, r1
 801144c:	4605      	mov	r5, r0
 801144e:	b118      	cbz	r0, 8011458 <_puts_r+0x10>
 8011450:	6983      	ldr	r3, [r0, #24]
 8011452:	b90b      	cbnz	r3, 8011458 <_puts_r+0x10>
 8011454:	f000 fac2 	bl	80119dc <__sinit>
 8011458:	69ab      	ldr	r3, [r5, #24]
 801145a:	68ac      	ldr	r4, [r5, #8]
 801145c:	b913      	cbnz	r3, 8011464 <_puts_r+0x1c>
 801145e:	4628      	mov	r0, r5
 8011460:	f000 fabc 	bl	80119dc <__sinit>
 8011464:	4b23      	ldr	r3, [pc, #140]	; (80114f4 <_puts_r+0xac>)
 8011466:	429c      	cmp	r4, r3
 8011468:	d117      	bne.n	801149a <_puts_r+0x52>
 801146a:	686c      	ldr	r4, [r5, #4]
 801146c:	89a3      	ldrh	r3, [r4, #12]
 801146e:	071b      	lsls	r3, r3, #28
 8011470:	d51d      	bpl.n	80114ae <_puts_r+0x66>
 8011472:	6923      	ldr	r3, [r4, #16]
 8011474:	b1db      	cbz	r3, 80114ae <_puts_r+0x66>
 8011476:	3e01      	subs	r6, #1
 8011478:	68a3      	ldr	r3, [r4, #8]
 801147a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801147e:	3b01      	subs	r3, #1
 8011480:	60a3      	str	r3, [r4, #8]
 8011482:	b9e9      	cbnz	r1, 80114c0 <_puts_r+0x78>
 8011484:	2b00      	cmp	r3, #0
 8011486:	da2e      	bge.n	80114e6 <_puts_r+0x9e>
 8011488:	4622      	mov	r2, r4
 801148a:	210a      	movs	r1, #10
 801148c:	4628      	mov	r0, r5
 801148e:	f000 f8f5 	bl	801167c <__swbuf_r>
 8011492:	3001      	adds	r0, #1
 8011494:	d011      	beq.n	80114ba <_puts_r+0x72>
 8011496:	200a      	movs	r0, #10
 8011498:	e011      	b.n	80114be <_puts_r+0x76>
 801149a:	4b17      	ldr	r3, [pc, #92]	; (80114f8 <_puts_r+0xb0>)
 801149c:	429c      	cmp	r4, r3
 801149e:	d101      	bne.n	80114a4 <_puts_r+0x5c>
 80114a0:	68ac      	ldr	r4, [r5, #8]
 80114a2:	e7e3      	b.n	801146c <_puts_r+0x24>
 80114a4:	4b15      	ldr	r3, [pc, #84]	; (80114fc <_puts_r+0xb4>)
 80114a6:	429c      	cmp	r4, r3
 80114a8:	bf08      	it	eq
 80114aa:	68ec      	ldreq	r4, [r5, #12]
 80114ac:	e7de      	b.n	801146c <_puts_r+0x24>
 80114ae:	4621      	mov	r1, r4
 80114b0:	4628      	mov	r0, r5
 80114b2:	f000 f935 	bl	8011720 <__swsetup_r>
 80114b6:	2800      	cmp	r0, #0
 80114b8:	d0dd      	beq.n	8011476 <_puts_r+0x2e>
 80114ba:	f04f 30ff 	mov.w	r0, #4294967295
 80114be:	bd70      	pop	{r4, r5, r6, pc}
 80114c0:	2b00      	cmp	r3, #0
 80114c2:	da04      	bge.n	80114ce <_puts_r+0x86>
 80114c4:	69a2      	ldr	r2, [r4, #24]
 80114c6:	429a      	cmp	r2, r3
 80114c8:	dc06      	bgt.n	80114d8 <_puts_r+0x90>
 80114ca:	290a      	cmp	r1, #10
 80114cc:	d004      	beq.n	80114d8 <_puts_r+0x90>
 80114ce:	6823      	ldr	r3, [r4, #0]
 80114d0:	1c5a      	adds	r2, r3, #1
 80114d2:	6022      	str	r2, [r4, #0]
 80114d4:	7019      	strb	r1, [r3, #0]
 80114d6:	e7cf      	b.n	8011478 <_puts_r+0x30>
 80114d8:	4622      	mov	r2, r4
 80114da:	4628      	mov	r0, r5
 80114dc:	f000 f8ce 	bl	801167c <__swbuf_r>
 80114e0:	3001      	adds	r0, #1
 80114e2:	d1c9      	bne.n	8011478 <_puts_r+0x30>
 80114e4:	e7e9      	b.n	80114ba <_puts_r+0x72>
 80114e6:	6823      	ldr	r3, [r4, #0]
 80114e8:	200a      	movs	r0, #10
 80114ea:	1c5a      	adds	r2, r3, #1
 80114ec:	6022      	str	r2, [r4, #0]
 80114ee:	7018      	strb	r0, [r3, #0]
 80114f0:	e7e5      	b.n	80114be <_puts_r+0x76>
 80114f2:	bf00      	nop
 80114f4:	08012b94 	.word	0x08012b94
 80114f8:	08012bb4 	.word	0x08012bb4
 80114fc:	08012b74 	.word	0x08012b74

08011500 <puts>:
 8011500:	4b02      	ldr	r3, [pc, #8]	; (801150c <puts+0xc>)
 8011502:	4601      	mov	r1, r0
 8011504:	6818      	ldr	r0, [r3, #0]
 8011506:	f7ff bf9f 	b.w	8011448 <_puts_r>
 801150a:	bf00      	nop
 801150c:	20000084 	.word	0x20000084

08011510 <setbuf>:
 8011510:	2900      	cmp	r1, #0
 8011512:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011516:	bf0c      	ite	eq
 8011518:	2202      	moveq	r2, #2
 801151a:	2200      	movne	r2, #0
 801151c:	f000 b800 	b.w	8011520 <setvbuf>

08011520 <setvbuf>:
 8011520:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8011524:	461d      	mov	r5, r3
 8011526:	4b51      	ldr	r3, [pc, #324]	; (801166c <setvbuf+0x14c>)
 8011528:	681e      	ldr	r6, [r3, #0]
 801152a:	4604      	mov	r4, r0
 801152c:	460f      	mov	r7, r1
 801152e:	4690      	mov	r8, r2
 8011530:	b126      	cbz	r6, 801153c <setvbuf+0x1c>
 8011532:	69b3      	ldr	r3, [r6, #24]
 8011534:	b913      	cbnz	r3, 801153c <setvbuf+0x1c>
 8011536:	4630      	mov	r0, r6
 8011538:	f000 fa50 	bl	80119dc <__sinit>
 801153c:	4b4c      	ldr	r3, [pc, #304]	; (8011670 <setvbuf+0x150>)
 801153e:	429c      	cmp	r4, r3
 8011540:	d152      	bne.n	80115e8 <setvbuf+0xc8>
 8011542:	6874      	ldr	r4, [r6, #4]
 8011544:	f1b8 0f02 	cmp.w	r8, #2
 8011548:	d006      	beq.n	8011558 <setvbuf+0x38>
 801154a:	f1b8 0f01 	cmp.w	r8, #1
 801154e:	f200 8089 	bhi.w	8011664 <setvbuf+0x144>
 8011552:	2d00      	cmp	r5, #0
 8011554:	f2c0 8086 	blt.w	8011664 <setvbuf+0x144>
 8011558:	4621      	mov	r1, r4
 801155a:	4630      	mov	r0, r6
 801155c:	f000 f9d4 	bl	8011908 <_fflush_r>
 8011560:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011562:	b141      	cbz	r1, 8011576 <setvbuf+0x56>
 8011564:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011568:	4299      	cmp	r1, r3
 801156a:	d002      	beq.n	8011572 <setvbuf+0x52>
 801156c:	4630      	mov	r0, r6
 801156e:	f000 fb2b 	bl	8011bc8 <_free_r>
 8011572:	2300      	movs	r3, #0
 8011574:	6363      	str	r3, [r4, #52]	; 0x34
 8011576:	2300      	movs	r3, #0
 8011578:	61a3      	str	r3, [r4, #24]
 801157a:	6063      	str	r3, [r4, #4]
 801157c:	89a3      	ldrh	r3, [r4, #12]
 801157e:	061b      	lsls	r3, r3, #24
 8011580:	d503      	bpl.n	801158a <setvbuf+0x6a>
 8011582:	6921      	ldr	r1, [r4, #16]
 8011584:	4630      	mov	r0, r6
 8011586:	f000 fb1f 	bl	8011bc8 <_free_r>
 801158a:	89a3      	ldrh	r3, [r4, #12]
 801158c:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8011590:	f023 0303 	bic.w	r3, r3, #3
 8011594:	f1b8 0f02 	cmp.w	r8, #2
 8011598:	81a3      	strh	r3, [r4, #12]
 801159a:	d05d      	beq.n	8011658 <setvbuf+0x138>
 801159c:	ab01      	add	r3, sp, #4
 801159e:	466a      	mov	r2, sp
 80115a0:	4621      	mov	r1, r4
 80115a2:	4630      	mov	r0, r6
 80115a4:	f000 faa4 	bl	8011af0 <__swhatbuf_r>
 80115a8:	89a3      	ldrh	r3, [r4, #12]
 80115aa:	4318      	orrs	r0, r3
 80115ac:	81a0      	strh	r0, [r4, #12]
 80115ae:	bb2d      	cbnz	r5, 80115fc <setvbuf+0xdc>
 80115b0:	9d00      	ldr	r5, [sp, #0]
 80115b2:	4628      	mov	r0, r5
 80115b4:	f000 fb00 	bl	8011bb8 <malloc>
 80115b8:	4607      	mov	r7, r0
 80115ba:	2800      	cmp	r0, #0
 80115bc:	d14e      	bne.n	801165c <setvbuf+0x13c>
 80115be:	f8dd 9000 	ldr.w	r9, [sp]
 80115c2:	45a9      	cmp	r9, r5
 80115c4:	d13c      	bne.n	8011640 <setvbuf+0x120>
 80115c6:	f04f 30ff 	mov.w	r0, #4294967295
 80115ca:	89a3      	ldrh	r3, [r4, #12]
 80115cc:	f043 0302 	orr.w	r3, r3, #2
 80115d0:	81a3      	strh	r3, [r4, #12]
 80115d2:	2300      	movs	r3, #0
 80115d4:	60a3      	str	r3, [r4, #8]
 80115d6:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80115da:	6023      	str	r3, [r4, #0]
 80115dc:	6123      	str	r3, [r4, #16]
 80115de:	2301      	movs	r3, #1
 80115e0:	6163      	str	r3, [r4, #20]
 80115e2:	b003      	add	sp, #12
 80115e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80115e8:	4b22      	ldr	r3, [pc, #136]	; (8011674 <setvbuf+0x154>)
 80115ea:	429c      	cmp	r4, r3
 80115ec:	d101      	bne.n	80115f2 <setvbuf+0xd2>
 80115ee:	68b4      	ldr	r4, [r6, #8]
 80115f0:	e7a8      	b.n	8011544 <setvbuf+0x24>
 80115f2:	4b21      	ldr	r3, [pc, #132]	; (8011678 <setvbuf+0x158>)
 80115f4:	429c      	cmp	r4, r3
 80115f6:	bf08      	it	eq
 80115f8:	68f4      	ldreq	r4, [r6, #12]
 80115fa:	e7a3      	b.n	8011544 <setvbuf+0x24>
 80115fc:	2f00      	cmp	r7, #0
 80115fe:	d0d8      	beq.n	80115b2 <setvbuf+0x92>
 8011600:	69b3      	ldr	r3, [r6, #24]
 8011602:	b913      	cbnz	r3, 801160a <setvbuf+0xea>
 8011604:	4630      	mov	r0, r6
 8011606:	f000 f9e9 	bl	80119dc <__sinit>
 801160a:	f1b8 0f01 	cmp.w	r8, #1
 801160e:	bf08      	it	eq
 8011610:	89a3      	ldrheq	r3, [r4, #12]
 8011612:	6027      	str	r7, [r4, #0]
 8011614:	bf04      	itt	eq
 8011616:	f043 0301 	orreq.w	r3, r3, #1
 801161a:	81a3      	strheq	r3, [r4, #12]
 801161c:	89a3      	ldrh	r3, [r4, #12]
 801161e:	f013 0008 	ands.w	r0, r3, #8
 8011622:	e9c4 7504 	strd	r7, r5, [r4, #16]
 8011626:	d01b      	beq.n	8011660 <setvbuf+0x140>
 8011628:	f013 0001 	ands.w	r0, r3, #1
 801162c:	bf18      	it	ne
 801162e:	426d      	negne	r5, r5
 8011630:	f04f 0300 	mov.w	r3, #0
 8011634:	bf1d      	ittte	ne
 8011636:	60a3      	strne	r3, [r4, #8]
 8011638:	61a5      	strne	r5, [r4, #24]
 801163a:	4618      	movne	r0, r3
 801163c:	60a5      	streq	r5, [r4, #8]
 801163e:	e7d0      	b.n	80115e2 <setvbuf+0xc2>
 8011640:	4648      	mov	r0, r9
 8011642:	f000 fab9 	bl	8011bb8 <malloc>
 8011646:	4607      	mov	r7, r0
 8011648:	2800      	cmp	r0, #0
 801164a:	d0bc      	beq.n	80115c6 <setvbuf+0xa6>
 801164c:	89a3      	ldrh	r3, [r4, #12]
 801164e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011652:	81a3      	strh	r3, [r4, #12]
 8011654:	464d      	mov	r5, r9
 8011656:	e7d3      	b.n	8011600 <setvbuf+0xe0>
 8011658:	2000      	movs	r0, #0
 801165a:	e7b6      	b.n	80115ca <setvbuf+0xaa>
 801165c:	46a9      	mov	r9, r5
 801165e:	e7f5      	b.n	801164c <setvbuf+0x12c>
 8011660:	60a0      	str	r0, [r4, #8]
 8011662:	e7be      	b.n	80115e2 <setvbuf+0xc2>
 8011664:	f04f 30ff 	mov.w	r0, #4294967295
 8011668:	e7bb      	b.n	80115e2 <setvbuf+0xc2>
 801166a:	bf00      	nop
 801166c:	20000084 	.word	0x20000084
 8011670:	08012b94 	.word	0x08012b94
 8011674:	08012bb4 	.word	0x08012bb4
 8011678:	08012b74 	.word	0x08012b74

0801167c <__swbuf_r>:
 801167c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801167e:	460e      	mov	r6, r1
 8011680:	4614      	mov	r4, r2
 8011682:	4605      	mov	r5, r0
 8011684:	b118      	cbz	r0, 801168e <__swbuf_r+0x12>
 8011686:	6983      	ldr	r3, [r0, #24]
 8011688:	b90b      	cbnz	r3, 801168e <__swbuf_r+0x12>
 801168a:	f000 f9a7 	bl	80119dc <__sinit>
 801168e:	4b21      	ldr	r3, [pc, #132]	; (8011714 <__swbuf_r+0x98>)
 8011690:	429c      	cmp	r4, r3
 8011692:	d12a      	bne.n	80116ea <__swbuf_r+0x6e>
 8011694:	686c      	ldr	r4, [r5, #4]
 8011696:	69a3      	ldr	r3, [r4, #24]
 8011698:	60a3      	str	r3, [r4, #8]
 801169a:	89a3      	ldrh	r3, [r4, #12]
 801169c:	071a      	lsls	r2, r3, #28
 801169e:	d52e      	bpl.n	80116fe <__swbuf_r+0x82>
 80116a0:	6923      	ldr	r3, [r4, #16]
 80116a2:	b363      	cbz	r3, 80116fe <__swbuf_r+0x82>
 80116a4:	6923      	ldr	r3, [r4, #16]
 80116a6:	6820      	ldr	r0, [r4, #0]
 80116a8:	1ac0      	subs	r0, r0, r3
 80116aa:	6963      	ldr	r3, [r4, #20]
 80116ac:	b2f6      	uxtb	r6, r6
 80116ae:	4283      	cmp	r3, r0
 80116b0:	4637      	mov	r7, r6
 80116b2:	dc04      	bgt.n	80116be <__swbuf_r+0x42>
 80116b4:	4621      	mov	r1, r4
 80116b6:	4628      	mov	r0, r5
 80116b8:	f000 f926 	bl	8011908 <_fflush_r>
 80116bc:	bb28      	cbnz	r0, 801170a <__swbuf_r+0x8e>
 80116be:	68a3      	ldr	r3, [r4, #8]
 80116c0:	3b01      	subs	r3, #1
 80116c2:	60a3      	str	r3, [r4, #8]
 80116c4:	6823      	ldr	r3, [r4, #0]
 80116c6:	1c5a      	adds	r2, r3, #1
 80116c8:	6022      	str	r2, [r4, #0]
 80116ca:	701e      	strb	r6, [r3, #0]
 80116cc:	6963      	ldr	r3, [r4, #20]
 80116ce:	3001      	adds	r0, #1
 80116d0:	4283      	cmp	r3, r0
 80116d2:	d004      	beq.n	80116de <__swbuf_r+0x62>
 80116d4:	89a3      	ldrh	r3, [r4, #12]
 80116d6:	07db      	lsls	r3, r3, #31
 80116d8:	d519      	bpl.n	801170e <__swbuf_r+0x92>
 80116da:	2e0a      	cmp	r6, #10
 80116dc:	d117      	bne.n	801170e <__swbuf_r+0x92>
 80116de:	4621      	mov	r1, r4
 80116e0:	4628      	mov	r0, r5
 80116e2:	f000 f911 	bl	8011908 <_fflush_r>
 80116e6:	b190      	cbz	r0, 801170e <__swbuf_r+0x92>
 80116e8:	e00f      	b.n	801170a <__swbuf_r+0x8e>
 80116ea:	4b0b      	ldr	r3, [pc, #44]	; (8011718 <__swbuf_r+0x9c>)
 80116ec:	429c      	cmp	r4, r3
 80116ee:	d101      	bne.n	80116f4 <__swbuf_r+0x78>
 80116f0:	68ac      	ldr	r4, [r5, #8]
 80116f2:	e7d0      	b.n	8011696 <__swbuf_r+0x1a>
 80116f4:	4b09      	ldr	r3, [pc, #36]	; (801171c <__swbuf_r+0xa0>)
 80116f6:	429c      	cmp	r4, r3
 80116f8:	bf08      	it	eq
 80116fa:	68ec      	ldreq	r4, [r5, #12]
 80116fc:	e7cb      	b.n	8011696 <__swbuf_r+0x1a>
 80116fe:	4621      	mov	r1, r4
 8011700:	4628      	mov	r0, r5
 8011702:	f000 f80d 	bl	8011720 <__swsetup_r>
 8011706:	2800      	cmp	r0, #0
 8011708:	d0cc      	beq.n	80116a4 <__swbuf_r+0x28>
 801170a:	f04f 37ff 	mov.w	r7, #4294967295
 801170e:	4638      	mov	r0, r7
 8011710:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011712:	bf00      	nop
 8011714:	08012b94 	.word	0x08012b94
 8011718:	08012bb4 	.word	0x08012bb4
 801171c:	08012b74 	.word	0x08012b74

08011720 <__swsetup_r>:
 8011720:	4b32      	ldr	r3, [pc, #200]	; (80117ec <__swsetup_r+0xcc>)
 8011722:	b570      	push	{r4, r5, r6, lr}
 8011724:	681d      	ldr	r5, [r3, #0]
 8011726:	4606      	mov	r6, r0
 8011728:	460c      	mov	r4, r1
 801172a:	b125      	cbz	r5, 8011736 <__swsetup_r+0x16>
 801172c:	69ab      	ldr	r3, [r5, #24]
 801172e:	b913      	cbnz	r3, 8011736 <__swsetup_r+0x16>
 8011730:	4628      	mov	r0, r5
 8011732:	f000 f953 	bl	80119dc <__sinit>
 8011736:	4b2e      	ldr	r3, [pc, #184]	; (80117f0 <__swsetup_r+0xd0>)
 8011738:	429c      	cmp	r4, r3
 801173a:	d10f      	bne.n	801175c <__swsetup_r+0x3c>
 801173c:	686c      	ldr	r4, [r5, #4]
 801173e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011742:	b29a      	uxth	r2, r3
 8011744:	0715      	lsls	r5, r2, #28
 8011746:	d42c      	bmi.n	80117a2 <__swsetup_r+0x82>
 8011748:	06d0      	lsls	r0, r2, #27
 801174a:	d411      	bmi.n	8011770 <__swsetup_r+0x50>
 801174c:	2209      	movs	r2, #9
 801174e:	6032      	str	r2, [r6, #0]
 8011750:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011754:	81a3      	strh	r3, [r4, #12]
 8011756:	f04f 30ff 	mov.w	r0, #4294967295
 801175a:	e03e      	b.n	80117da <__swsetup_r+0xba>
 801175c:	4b25      	ldr	r3, [pc, #148]	; (80117f4 <__swsetup_r+0xd4>)
 801175e:	429c      	cmp	r4, r3
 8011760:	d101      	bne.n	8011766 <__swsetup_r+0x46>
 8011762:	68ac      	ldr	r4, [r5, #8]
 8011764:	e7eb      	b.n	801173e <__swsetup_r+0x1e>
 8011766:	4b24      	ldr	r3, [pc, #144]	; (80117f8 <__swsetup_r+0xd8>)
 8011768:	429c      	cmp	r4, r3
 801176a:	bf08      	it	eq
 801176c:	68ec      	ldreq	r4, [r5, #12]
 801176e:	e7e6      	b.n	801173e <__swsetup_r+0x1e>
 8011770:	0751      	lsls	r1, r2, #29
 8011772:	d512      	bpl.n	801179a <__swsetup_r+0x7a>
 8011774:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011776:	b141      	cbz	r1, 801178a <__swsetup_r+0x6a>
 8011778:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801177c:	4299      	cmp	r1, r3
 801177e:	d002      	beq.n	8011786 <__swsetup_r+0x66>
 8011780:	4630      	mov	r0, r6
 8011782:	f000 fa21 	bl	8011bc8 <_free_r>
 8011786:	2300      	movs	r3, #0
 8011788:	6363      	str	r3, [r4, #52]	; 0x34
 801178a:	89a3      	ldrh	r3, [r4, #12]
 801178c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8011790:	81a3      	strh	r3, [r4, #12]
 8011792:	2300      	movs	r3, #0
 8011794:	6063      	str	r3, [r4, #4]
 8011796:	6923      	ldr	r3, [r4, #16]
 8011798:	6023      	str	r3, [r4, #0]
 801179a:	89a3      	ldrh	r3, [r4, #12]
 801179c:	f043 0308 	orr.w	r3, r3, #8
 80117a0:	81a3      	strh	r3, [r4, #12]
 80117a2:	6923      	ldr	r3, [r4, #16]
 80117a4:	b94b      	cbnz	r3, 80117ba <__swsetup_r+0x9a>
 80117a6:	89a3      	ldrh	r3, [r4, #12]
 80117a8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80117ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80117b0:	d003      	beq.n	80117ba <__swsetup_r+0x9a>
 80117b2:	4621      	mov	r1, r4
 80117b4:	4630      	mov	r0, r6
 80117b6:	f000 f9bf 	bl	8011b38 <__smakebuf_r>
 80117ba:	89a2      	ldrh	r2, [r4, #12]
 80117bc:	f012 0301 	ands.w	r3, r2, #1
 80117c0:	d00c      	beq.n	80117dc <__swsetup_r+0xbc>
 80117c2:	2300      	movs	r3, #0
 80117c4:	60a3      	str	r3, [r4, #8]
 80117c6:	6963      	ldr	r3, [r4, #20]
 80117c8:	425b      	negs	r3, r3
 80117ca:	61a3      	str	r3, [r4, #24]
 80117cc:	6923      	ldr	r3, [r4, #16]
 80117ce:	b953      	cbnz	r3, 80117e6 <__swsetup_r+0xc6>
 80117d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80117d4:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80117d8:	d1ba      	bne.n	8011750 <__swsetup_r+0x30>
 80117da:	bd70      	pop	{r4, r5, r6, pc}
 80117dc:	0792      	lsls	r2, r2, #30
 80117de:	bf58      	it	pl
 80117e0:	6963      	ldrpl	r3, [r4, #20]
 80117e2:	60a3      	str	r3, [r4, #8]
 80117e4:	e7f2      	b.n	80117cc <__swsetup_r+0xac>
 80117e6:	2000      	movs	r0, #0
 80117e8:	e7f7      	b.n	80117da <__swsetup_r+0xba>
 80117ea:	bf00      	nop
 80117ec:	20000084 	.word	0x20000084
 80117f0:	08012b94 	.word	0x08012b94
 80117f4:	08012bb4 	.word	0x08012bb4
 80117f8:	08012b74 	.word	0x08012b74

080117fc <__sflush_r>:
 80117fc:	898a      	ldrh	r2, [r1, #12]
 80117fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011802:	4605      	mov	r5, r0
 8011804:	0710      	lsls	r0, r2, #28
 8011806:	460c      	mov	r4, r1
 8011808:	d458      	bmi.n	80118bc <__sflush_r+0xc0>
 801180a:	684b      	ldr	r3, [r1, #4]
 801180c:	2b00      	cmp	r3, #0
 801180e:	dc05      	bgt.n	801181c <__sflush_r+0x20>
 8011810:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8011812:	2b00      	cmp	r3, #0
 8011814:	dc02      	bgt.n	801181c <__sflush_r+0x20>
 8011816:	2000      	movs	r0, #0
 8011818:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801181c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801181e:	2e00      	cmp	r6, #0
 8011820:	d0f9      	beq.n	8011816 <__sflush_r+0x1a>
 8011822:	2300      	movs	r3, #0
 8011824:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8011828:	682f      	ldr	r7, [r5, #0]
 801182a:	6a21      	ldr	r1, [r4, #32]
 801182c:	602b      	str	r3, [r5, #0]
 801182e:	d032      	beq.n	8011896 <__sflush_r+0x9a>
 8011830:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8011832:	89a3      	ldrh	r3, [r4, #12]
 8011834:	075a      	lsls	r2, r3, #29
 8011836:	d505      	bpl.n	8011844 <__sflush_r+0x48>
 8011838:	6863      	ldr	r3, [r4, #4]
 801183a:	1ac0      	subs	r0, r0, r3
 801183c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801183e:	b10b      	cbz	r3, 8011844 <__sflush_r+0x48>
 8011840:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8011842:	1ac0      	subs	r0, r0, r3
 8011844:	2300      	movs	r3, #0
 8011846:	4602      	mov	r2, r0
 8011848:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801184a:	6a21      	ldr	r1, [r4, #32]
 801184c:	4628      	mov	r0, r5
 801184e:	47b0      	blx	r6
 8011850:	1c43      	adds	r3, r0, #1
 8011852:	89a3      	ldrh	r3, [r4, #12]
 8011854:	d106      	bne.n	8011864 <__sflush_r+0x68>
 8011856:	6829      	ldr	r1, [r5, #0]
 8011858:	291d      	cmp	r1, #29
 801185a:	d848      	bhi.n	80118ee <__sflush_r+0xf2>
 801185c:	4a29      	ldr	r2, [pc, #164]	; (8011904 <__sflush_r+0x108>)
 801185e:	40ca      	lsrs	r2, r1
 8011860:	07d6      	lsls	r6, r2, #31
 8011862:	d544      	bpl.n	80118ee <__sflush_r+0xf2>
 8011864:	2200      	movs	r2, #0
 8011866:	6062      	str	r2, [r4, #4]
 8011868:	04d9      	lsls	r1, r3, #19
 801186a:	6922      	ldr	r2, [r4, #16]
 801186c:	6022      	str	r2, [r4, #0]
 801186e:	d504      	bpl.n	801187a <__sflush_r+0x7e>
 8011870:	1c42      	adds	r2, r0, #1
 8011872:	d101      	bne.n	8011878 <__sflush_r+0x7c>
 8011874:	682b      	ldr	r3, [r5, #0]
 8011876:	b903      	cbnz	r3, 801187a <__sflush_r+0x7e>
 8011878:	6560      	str	r0, [r4, #84]	; 0x54
 801187a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801187c:	602f      	str	r7, [r5, #0]
 801187e:	2900      	cmp	r1, #0
 8011880:	d0c9      	beq.n	8011816 <__sflush_r+0x1a>
 8011882:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011886:	4299      	cmp	r1, r3
 8011888:	d002      	beq.n	8011890 <__sflush_r+0x94>
 801188a:	4628      	mov	r0, r5
 801188c:	f000 f99c 	bl	8011bc8 <_free_r>
 8011890:	2000      	movs	r0, #0
 8011892:	6360      	str	r0, [r4, #52]	; 0x34
 8011894:	e7c0      	b.n	8011818 <__sflush_r+0x1c>
 8011896:	2301      	movs	r3, #1
 8011898:	4628      	mov	r0, r5
 801189a:	47b0      	blx	r6
 801189c:	1c41      	adds	r1, r0, #1
 801189e:	d1c8      	bne.n	8011832 <__sflush_r+0x36>
 80118a0:	682b      	ldr	r3, [r5, #0]
 80118a2:	2b00      	cmp	r3, #0
 80118a4:	d0c5      	beq.n	8011832 <__sflush_r+0x36>
 80118a6:	2b1d      	cmp	r3, #29
 80118a8:	d001      	beq.n	80118ae <__sflush_r+0xb2>
 80118aa:	2b16      	cmp	r3, #22
 80118ac:	d101      	bne.n	80118b2 <__sflush_r+0xb6>
 80118ae:	602f      	str	r7, [r5, #0]
 80118b0:	e7b1      	b.n	8011816 <__sflush_r+0x1a>
 80118b2:	89a3      	ldrh	r3, [r4, #12]
 80118b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80118b8:	81a3      	strh	r3, [r4, #12]
 80118ba:	e7ad      	b.n	8011818 <__sflush_r+0x1c>
 80118bc:	690f      	ldr	r7, [r1, #16]
 80118be:	2f00      	cmp	r7, #0
 80118c0:	d0a9      	beq.n	8011816 <__sflush_r+0x1a>
 80118c2:	0793      	lsls	r3, r2, #30
 80118c4:	680e      	ldr	r6, [r1, #0]
 80118c6:	bf08      	it	eq
 80118c8:	694b      	ldreq	r3, [r1, #20]
 80118ca:	600f      	str	r7, [r1, #0]
 80118cc:	bf18      	it	ne
 80118ce:	2300      	movne	r3, #0
 80118d0:	eba6 0807 	sub.w	r8, r6, r7
 80118d4:	608b      	str	r3, [r1, #8]
 80118d6:	f1b8 0f00 	cmp.w	r8, #0
 80118da:	dd9c      	ble.n	8011816 <__sflush_r+0x1a>
 80118dc:	4643      	mov	r3, r8
 80118de:	463a      	mov	r2, r7
 80118e0:	6a21      	ldr	r1, [r4, #32]
 80118e2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80118e4:	4628      	mov	r0, r5
 80118e6:	47b0      	blx	r6
 80118e8:	2800      	cmp	r0, #0
 80118ea:	dc06      	bgt.n	80118fa <__sflush_r+0xfe>
 80118ec:	89a3      	ldrh	r3, [r4, #12]
 80118ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80118f2:	81a3      	strh	r3, [r4, #12]
 80118f4:	f04f 30ff 	mov.w	r0, #4294967295
 80118f8:	e78e      	b.n	8011818 <__sflush_r+0x1c>
 80118fa:	4407      	add	r7, r0
 80118fc:	eba8 0800 	sub.w	r8, r8, r0
 8011900:	e7e9      	b.n	80118d6 <__sflush_r+0xda>
 8011902:	bf00      	nop
 8011904:	20400001 	.word	0x20400001

08011908 <_fflush_r>:
 8011908:	b538      	push	{r3, r4, r5, lr}
 801190a:	690b      	ldr	r3, [r1, #16]
 801190c:	4605      	mov	r5, r0
 801190e:	460c      	mov	r4, r1
 8011910:	b1db      	cbz	r3, 801194a <_fflush_r+0x42>
 8011912:	b118      	cbz	r0, 801191c <_fflush_r+0x14>
 8011914:	6983      	ldr	r3, [r0, #24]
 8011916:	b90b      	cbnz	r3, 801191c <_fflush_r+0x14>
 8011918:	f000 f860 	bl	80119dc <__sinit>
 801191c:	4b0c      	ldr	r3, [pc, #48]	; (8011950 <_fflush_r+0x48>)
 801191e:	429c      	cmp	r4, r3
 8011920:	d109      	bne.n	8011936 <_fflush_r+0x2e>
 8011922:	686c      	ldr	r4, [r5, #4]
 8011924:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011928:	b17b      	cbz	r3, 801194a <_fflush_r+0x42>
 801192a:	4621      	mov	r1, r4
 801192c:	4628      	mov	r0, r5
 801192e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011932:	f7ff bf63 	b.w	80117fc <__sflush_r>
 8011936:	4b07      	ldr	r3, [pc, #28]	; (8011954 <_fflush_r+0x4c>)
 8011938:	429c      	cmp	r4, r3
 801193a:	d101      	bne.n	8011940 <_fflush_r+0x38>
 801193c:	68ac      	ldr	r4, [r5, #8]
 801193e:	e7f1      	b.n	8011924 <_fflush_r+0x1c>
 8011940:	4b05      	ldr	r3, [pc, #20]	; (8011958 <_fflush_r+0x50>)
 8011942:	429c      	cmp	r4, r3
 8011944:	bf08      	it	eq
 8011946:	68ec      	ldreq	r4, [r5, #12]
 8011948:	e7ec      	b.n	8011924 <_fflush_r+0x1c>
 801194a:	2000      	movs	r0, #0
 801194c:	bd38      	pop	{r3, r4, r5, pc}
 801194e:	bf00      	nop
 8011950:	08012b94 	.word	0x08012b94
 8011954:	08012bb4 	.word	0x08012bb4
 8011958:	08012b74 	.word	0x08012b74

0801195c <std>:
 801195c:	2300      	movs	r3, #0
 801195e:	b510      	push	{r4, lr}
 8011960:	4604      	mov	r4, r0
 8011962:	e9c0 3300 	strd	r3, r3, [r0]
 8011966:	6083      	str	r3, [r0, #8]
 8011968:	8181      	strh	r1, [r0, #12]
 801196a:	6643      	str	r3, [r0, #100]	; 0x64
 801196c:	81c2      	strh	r2, [r0, #14]
 801196e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8011972:	6183      	str	r3, [r0, #24]
 8011974:	4619      	mov	r1, r3
 8011976:	2208      	movs	r2, #8
 8011978:	305c      	adds	r0, #92	; 0x5c
 801197a:	f7ff fd45 	bl	8011408 <memset>
 801197e:	4b05      	ldr	r3, [pc, #20]	; (8011994 <std+0x38>)
 8011980:	6263      	str	r3, [r4, #36]	; 0x24
 8011982:	4b05      	ldr	r3, [pc, #20]	; (8011998 <std+0x3c>)
 8011984:	62a3      	str	r3, [r4, #40]	; 0x28
 8011986:	4b05      	ldr	r3, [pc, #20]	; (801199c <std+0x40>)
 8011988:	62e3      	str	r3, [r4, #44]	; 0x2c
 801198a:	4b05      	ldr	r3, [pc, #20]	; (80119a0 <std+0x44>)
 801198c:	6224      	str	r4, [r4, #32]
 801198e:	6323      	str	r3, [r4, #48]	; 0x30
 8011990:	bd10      	pop	{r4, pc}
 8011992:	bf00      	nop
 8011994:	080122c9 	.word	0x080122c9
 8011998:	080122eb 	.word	0x080122eb
 801199c:	08012323 	.word	0x08012323
 80119a0:	08012347 	.word	0x08012347

080119a4 <_cleanup_r>:
 80119a4:	4901      	ldr	r1, [pc, #4]	; (80119ac <_cleanup_r+0x8>)
 80119a6:	f000 b885 	b.w	8011ab4 <_fwalk_reent>
 80119aa:	bf00      	nop
 80119ac:	08011909 	.word	0x08011909

080119b0 <__sfmoreglue>:
 80119b0:	b570      	push	{r4, r5, r6, lr}
 80119b2:	1e4a      	subs	r2, r1, #1
 80119b4:	2568      	movs	r5, #104	; 0x68
 80119b6:	4355      	muls	r5, r2
 80119b8:	460e      	mov	r6, r1
 80119ba:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80119be:	f000 f951 	bl	8011c64 <_malloc_r>
 80119c2:	4604      	mov	r4, r0
 80119c4:	b140      	cbz	r0, 80119d8 <__sfmoreglue+0x28>
 80119c6:	2100      	movs	r1, #0
 80119c8:	e9c0 1600 	strd	r1, r6, [r0]
 80119cc:	300c      	adds	r0, #12
 80119ce:	60a0      	str	r0, [r4, #8]
 80119d0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80119d4:	f7ff fd18 	bl	8011408 <memset>
 80119d8:	4620      	mov	r0, r4
 80119da:	bd70      	pop	{r4, r5, r6, pc}

080119dc <__sinit>:
 80119dc:	6983      	ldr	r3, [r0, #24]
 80119de:	b510      	push	{r4, lr}
 80119e0:	4604      	mov	r4, r0
 80119e2:	bb33      	cbnz	r3, 8011a32 <__sinit+0x56>
 80119e4:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80119e8:	6503      	str	r3, [r0, #80]	; 0x50
 80119ea:	4b12      	ldr	r3, [pc, #72]	; (8011a34 <__sinit+0x58>)
 80119ec:	4a12      	ldr	r2, [pc, #72]	; (8011a38 <__sinit+0x5c>)
 80119ee:	681b      	ldr	r3, [r3, #0]
 80119f0:	6282      	str	r2, [r0, #40]	; 0x28
 80119f2:	4298      	cmp	r0, r3
 80119f4:	bf04      	itt	eq
 80119f6:	2301      	moveq	r3, #1
 80119f8:	6183      	streq	r3, [r0, #24]
 80119fa:	f000 f81f 	bl	8011a3c <__sfp>
 80119fe:	6060      	str	r0, [r4, #4]
 8011a00:	4620      	mov	r0, r4
 8011a02:	f000 f81b 	bl	8011a3c <__sfp>
 8011a06:	60a0      	str	r0, [r4, #8]
 8011a08:	4620      	mov	r0, r4
 8011a0a:	f000 f817 	bl	8011a3c <__sfp>
 8011a0e:	2200      	movs	r2, #0
 8011a10:	60e0      	str	r0, [r4, #12]
 8011a12:	2104      	movs	r1, #4
 8011a14:	6860      	ldr	r0, [r4, #4]
 8011a16:	f7ff ffa1 	bl	801195c <std>
 8011a1a:	2201      	movs	r2, #1
 8011a1c:	2109      	movs	r1, #9
 8011a1e:	68a0      	ldr	r0, [r4, #8]
 8011a20:	f7ff ff9c 	bl	801195c <std>
 8011a24:	2202      	movs	r2, #2
 8011a26:	2112      	movs	r1, #18
 8011a28:	68e0      	ldr	r0, [r4, #12]
 8011a2a:	f7ff ff97 	bl	801195c <std>
 8011a2e:	2301      	movs	r3, #1
 8011a30:	61a3      	str	r3, [r4, #24]
 8011a32:	bd10      	pop	{r4, pc}
 8011a34:	08012b70 	.word	0x08012b70
 8011a38:	080119a5 	.word	0x080119a5

08011a3c <__sfp>:
 8011a3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011a3e:	4b1b      	ldr	r3, [pc, #108]	; (8011aac <__sfp+0x70>)
 8011a40:	681e      	ldr	r6, [r3, #0]
 8011a42:	69b3      	ldr	r3, [r6, #24]
 8011a44:	4607      	mov	r7, r0
 8011a46:	b913      	cbnz	r3, 8011a4e <__sfp+0x12>
 8011a48:	4630      	mov	r0, r6
 8011a4a:	f7ff ffc7 	bl	80119dc <__sinit>
 8011a4e:	3648      	adds	r6, #72	; 0x48
 8011a50:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8011a54:	3b01      	subs	r3, #1
 8011a56:	d503      	bpl.n	8011a60 <__sfp+0x24>
 8011a58:	6833      	ldr	r3, [r6, #0]
 8011a5a:	b133      	cbz	r3, 8011a6a <__sfp+0x2e>
 8011a5c:	6836      	ldr	r6, [r6, #0]
 8011a5e:	e7f7      	b.n	8011a50 <__sfp+0x14>
 8011a60:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8011a64:	b16d      	cbz	r5, 8011a82 <__sfp+0x46>
 8011a66:	3468      	adds	r4, #104	; 0x68
 8011a68:	e7f4      	b.n	8011a54 <__sfp+0x18>
 8011a6a:	2104      	movs	r1, #4
 8011a6c:	4638      	mov	r0, r7
 8011a6e:	f7ff ff9f 	bl	80119b0 <__sfmoreglue>
 8011a72:	6030      	str	r0, [r6, #0]
 8011a74:	2800      	cmp	r0, #0
 8011a76:	d1f1      	bne.n	8011a5c <__sfp+0x20>
 8011a78:	230c      	movs	r3, #12
 8011a7a:	603b      	str	r3, [r7, #0]
 8011a7c:	4604      	mov	r4, r0
 8011a7e:	4620      	mov	r0, r4
 8011a80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011a82:	4b0b      	ldr	r3, [pc, #44]	; (8011ab0 <__sfp+0x74>)
 8011a84:	6665      	str	r5, [r4, #100]	; 0x64
 8011a86:	e9c4 5500 	strd	r5, r5, [r4]
 8011a8a:	60a5      	str	r5, [r4, #8]
 8011a8c:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8011a90:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8011a94:	2208      	movs	r2, #8
 8011a96:	4629      	mov	r1, r5
 8011a98:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8011a9c:	f7ff fcb4 	bl	8011408 <memset>
 8011aa0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8011aa4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8011aa8:	e7e9      	b.n	8011a7e <__sfp+0x42>
 8011aaa:	bf00      	nop
 8011aac:	08012b70 	.word	0x08012b70
 8011ab0:	ffff0001 	.word	0xffff0001

08011ab4 <_fwalk_reent>:
 8011ab4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011ab8:	4680      	mov	r8, r0
 8011aba:	4689      	mov	r9, r1
 8011abc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8011ac0:	2600      	movs	r6, #0
 8011ac2:	b914      	cbnz	r4, 8011aca <_fwalk_reent+0x16>
 8011ac4:	4630      	mov	r0, r6
 8011ac6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011aca:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8011ace:	3f01      	subs	r7, #1
 8011ad0:	d501      	bpl.n	8011ad6 <_fwalk_reent+0x22>
 8011ad2:	6824      	ldr	r4, [r4, #0]
 8011ad4:	e7f5      	b.n	8011ac2 <_fwalk_reent+0xe>
 8011ad6:	89ab      	ldrh	r3, [r5, #12]
 8011ad8:	2b01      	cmp	r3, #1
 8011ada:	d907      	bls.n	8011aec <_fwalk_reent+0x38>
 8011adc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8011ae0:	3301      	adds	r3, #1
 8011ae2:	d003      	beq.n	8011aec <_fwalk_reent+0x38>
 8011ae4:	4629      	mov	r1, r5
 8011ae6:	4640      	mov	r0, r8
 8011ae8:	47c8      	blx	r9
 8011aea:	4306      	orrs	r6, r0
 8011aec:	3568      	adds	r5, #104	; 0x68
 8011aee:	e7ee      	b.n	8011ace <_fwalk_reent+0x1a>

08011af0 <__swhatbuf_r>:
 8011af0:	b570      	push	{r4, r5, r6, lr}
 8011af2:	460e      	mov	r6, r1
 8011af4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011af8:	2900      	cmp	r1, #0
 8011afa:	b096      	sub	sp, #88	; 0x58
 8011afc:	4614      	mov	r4, r2
 8011afe:	461d      	mov	r5, r3
 8011b00:	da07      	bge.n	8011b12 <__swhatbuf_r+0x22>
 8011b02:	2300      	movs	r3, #0
 8011b04:	602b      	str	r3, [r5, #0]
 8011b06:	89b3      	ldrh	r3, [r6, #12]
 8011b08:	061a      	lsls	r2, r3, #24
 8011b0a:	d410      	bmi.n	8011b2e <__swhatbuf_r+0x3e>
 8011b0c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011b10:	e00e      	b.n	8011b30 <__swhatbuf_r+0x40>
 8011b12:	466a      	mov	r2, sp
 8011b14:	f000 fc3e 	bl	8012394 <_fstat_r>
 8011b18:	2800      	cmp	r0, #0
 8011b1a:	dbf2      	blt.n	8011b02 <__swhatbuf_r+0x12>
 8011b1c:	9a01      	ldr	r2, [sp, #4]
 8011b1e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8011b22:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8011b26:	425a      	negs	r2, r3
 8011b28:	415a      	adcs	r2, r3
 8011b2a:	602a      	str	r2, [r5, #0]
 8011b2c:	e7ee      	b.n	8011b0c <__swhatbuf_r+0x1c>
 8011b2e:	2340      	movs	r3, #64	; 0x40
 8011b30:	2000      	movs	r0, #0
 8011b32:	6023      	str	r3, [r4, #0]
 8011b34:	b016      	add	sp, #88	; 0x58
 8011b36:	bd70      	pop	{r4, r5, r6, pc}

08011b38 <__smakebuf_r>:
 8011b38:	898b      	ldrh	r3, [r1, #12]
 8011b3a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011b3c:	079d      	lsls	r5, r3, #30
 8011b3e:	4606      	mov	r6, r0
 8011b40:	460c      	mov	r4, r1
 8011b42:	d507      	bpl.n	8011b54 <__smakebuf_r+0x1c>
 8011b44:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8011b48:	6023      	str	r3, [r4, #0]
 8011b4a:	6123      	str	r3, [r4, #16]
 8011b4c:	2301      	movs	r3, #1
 8011b4e:	6163      	str	r3, [r4, #20]
 8011b50:	b002      	add	sp, #8
 8011b52:	bd70      	pop	{r4, r5, r6, pc}
 8011b54:	ab01      	add	r3, sp, #4
 8011b56:	466a      	mov	r2, sp
 8011b58:	f7ff ffca 	bl	8011af0 <__swhatbuf_r>
 8011b5c:	9900      	ldr	r1, [sp, #0]
 8011b5e:	4605      	mov	r5, r0
 8011b60:	4630      	mov	r0, r6
 8011b62:	f000 f87f 	bl	8011c64 <_malloc_r>
 8011b66:	b948      	cbnz	r0, 8011b7c <__smakebuf_r+0x44>
 8011b68:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011b6c:	059a      	lsls	r2, r3, #22
 8011b6e:	d4ef      	bmi.n	8011b50 <__smakebuf_r+0x18>
 8011b70:	f023 0303 	bic.w	r3, r3, #3
 8011b74:	f043 0302 	orr.w	r3, r3, #2
 8011b78:	81a3      	strh	r3, [r4, #12]
 8011b7a:	e7e3      	b.n	8011b44 <__smakebuf_r+0xc>
 8011b7c:	4b0d      	ldr	r3, [pc, #52]	; (8011bb4 <__smakebuf_r+0x7c>)
 8011b7e:	62b3      	str	r3, [r6, #40]	; 0x28
 8011b80:	89a3      	ldrh	r3, [r4, #12]
 8011b82:	6020      	str	r0, [r4, #0]
 8011b84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011b88:	81a3      	strh	r3, [r4, #12]
 8011b8a:	9b00      	ldr	r3, [sp, #0]
 8011b8c:	6163      	str	r3, [r4, #20]
 8011b8e:	9b01      	ldr	r3, [sp, #4]
 8011b90:	6120      	str	r0, [r4, #16]
 8011b92:	b15b      	cbz	r3, 8011bac <__smakebuf_r+0x74>
 8011b94:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011b98:	4630      	mov	r0, r6
 8011b9a:	f000 fc0d 	bl	80123b8 <_isatty_r>
 8011b9e:	b128      	cbz	r0, 8011bac <__smakebuf_r+0x74>
 8011ba0:	89a3      	ldrh	r3, [r4, #12]
 8011ba2:	f023 0303 	bic.w	r3, r3, #3
 8011ba6:	f043 0301 	orr.w	r3, r3, #1
 8011baa:	81a3      	strh	r3, [r4, #12]
 8011bac:	89a3      	ldrh	r3, [r4, #12]
 8011bae:	431d      	orrs	r5, r3
 8011bb0:	81a5      	strh	r5, [r4, #12]
 8011bb2:	e7cd      	b.n	8011b50 <__smakebuf_r+0x18>
 8011bb4:	080119a5 	.word	0x080119a5

08011bb8 <malloc>:
 8011bb8:	4b02      	ldr	r3, [pc, #8]	; (8011bc4 <malloc+0xc>)
 8011bba:	4601      	mov	r1, r0
 8011bbc:	6818      	ldr	r0, [r3, #0]
 8011bbe:	f000 b851 	b.w	8011c64 <_malloc_r>
 8011bc2:	bf00      	nop
 8011bc4:	20000084 	.word	0x20000084

08011bc8 <_free_r>:
 8011bc8:	b538      	push	{r3, r4, r5, lr}
 8011bca:	4605      	mov	r5, r0
 8011bcc:	2900      	cmp	r1, #0
 8011bce:	d045      	beq.n	8011c5c <_free_r+0x94>
 8011bd0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011bd4:	1f0c      	subs	r4, r1, #4
 8011bd6:	2b00      	cmp	r3, #0
 8011bd8:	bfb8      	it	lt
 8011bda:	18e4      	addlt	r4, r4, r3
 8011bdc:	f000 fc0e 	bl	80123fc <__malloc_lock>
 8011be0:	4a1f      	ldr	r2, [pc, #124]	; (8011c60 <_free_r+0x98>)
 8011be2:	6813      	ldr	r3, [r2, #0]
 8011be4:	4610      	mov	r0, r2
 8011be6:	b933      	cbnz	r3, 8011bf6 <_free_r+0x2e>
 8011be8:	6063      	str	r3, [r4, #4]
 8011bea:	6014      	str	r4, [r2, #0]
 8011bec:	4628      	mov	r0, r5
 8011bee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011bf2:	f000 bc04 	b.w	80123fe <__malloc_unlock>
 8011bf6:	42a3      	cmp	r3, r4
 8011bf8:	d90c      	bls.n	8011c14 <_free_r+0x4c>
 8011bfa:	6821      	ldr	r1, [r4, #0]
 8011bfc:	1862      	adds	r2, r4, r1
 8011bfe:	4293      	cmp	r3, r2
 8011c00:	bf04      	itt	eq
 8011c02:	681a      	ldreq	r2, [r3, #0]
 8011c04:	685b      	ldreq	r3, [r3, #4]
 8011c06:	6063      	str	r3, [r4, #4]
 8011c08:	bf04      	itt	eq
 8011c0a:	1852      	addeq	r2, r2, r1
 8011c0c:	6022      	streq	r2, [r4, #0]
 8011c0e:	6004      	str	r4, [r0, #0]
 8011c10:	e7ec      	b.n	8011bec <_free_r+0x24>
 8011c12:	4613      	mov	r3, r2
 8011c14:	685a      	ldr	r2, [r3, #4]
 8011c16:	b10a      	cbz	r2, 8011c1c <_free_r+0x54>
 8011c18:	42a2      	cmp	r2, r4
 8011c1a:	d9fa      	bls.n	8011c12 <_free_r+0x4a>
 8011c1c:	6819      	ldr	r1, [r3, #0]
 8011c1e:	1858      	adds	r0, r3, r1
 8011c20:	42a0      	cmp	r0, r4
 8011c22:	d10b      	bne.n	8011c3c <_free_r+0x74>
 8011c24:	6820      	ldr	r0, [r4, #0]
 8011c26:	4401      	add	r1, r0
 8011c28:	1858      	adds	r0, r3, r1
 8011c2a:	4282      	cmp	r2, r0
 8011c2c:	6019      	str	r1, [r3, #0]
 8011c2e:	d1dd      	bne.n	8011bec <_free_r+0x24>
 8011c30:	6810      	ldr	r0, [r2, #0]
 8011c32:	6852      	ldr	r2, [r2, #4]
 8011c34:	605a      	str	r2, [r3, #4]
 8011c36:	4401      	add	r1, r0
 8011c38:	6019      	str	r1, [r3, #0]
 8011c3a:	e7d7      	b.n	8011bec <_free_r+0x24>
 8011c3c:	d902      	bls.n	8011c44 <_free_r+0x7c>
 8011c3e:	230c      	movs	r3, #12
 8011c40:	602b      	str	r3, [r5, #0]
 8011c42:	e7d3      	b.n	8011bec <_free_r+0x24>
 8011c44:	6820      	ldr	r0, [r4, #0]
 8011c46:	1821      	adds	r1, r4, r0
 8011c48:	428a      	cmp	r2, r1
 8011c4a:	bf04      	itt	eq
 8011c4c:	6811      	ldreq	r1, [r2, #0]
 8011c4e:	6852      	ldreq	r2, [r2, #4]
 8011c50:	6062      	str	r2, [r4, #4]
 8011c52:	bf04      	itt	eq
 8011c54:	1809      	addeq	r1, r1, r0
 8011c56:	6021      	streq	r1, [r4, #0]
 8011c58:	605c      	str	r4, [r3, #4]
 8011c5a:	e7c7      	b.n	8011bec <_free_r+0x24>
 8011c5c:	bd38      	pop	{r3, r4, r5, pc}
 8011c5e:	bf00      	nop
 8011c60:	20000118 	.word	0x20000118

08011c64 <_malloc_r>:
 8011c64:	b570      	push	{r4, r5, r6, lr}
 8011c66:	1ccd      	adds	r5, r1, #3
 8011c68:	f025 0503 	bic.w	r5, r5, #3
 8011c6c:	3508      	adds	r5, #8
 8011c6e:	2d0c      	cmp	r5, #12
 8011c70:	bf38      	it	cc
 8011c72:	250c      	movcc	r5, #12
 8011c74:	2d00      	cmp	r5, #0
 8011c76:	4606      	mov	r6, r0
 8011c78:	db01      	blt.n	8011c7e <_malloc_r+0x1a>
 8011c7a:	42a9      	cmp	r1, r5
 8011c7c:	d903      	bls.n	8011c86 <_malloc_r+0x22>
 8011c7e:	230c      	movs	r3, #12
 8011c80:	6033      	str	r3, [r6, #0]
 8011c82:	2000      	movs	r0, #0
 8011c84:	bd70      	pop	{r4, r5, r6, pc}
 8011c86:	f000 fbb9 	bl	80123fc <__malloc_lock>
 8011c8a:	4a21      	ldr	r2, [pc, #132]	; (8011d10 <_malloc_r+0xac>)
 8011c8c:	6814      	ldr	r4, [r2, #0]
 8011c8e:	4621      	mov	r1, r4
 8011c90:	b991      	cbnz	r1, 8011cb8 <_malloc_r+0x54>
 8011c92:	4c20      	ldr	r4, [pc, #128]	; (8011d14 <_malloc_r+0xb0>)
 8011c94:	6823      	ldr	r3, [r4, #0]
 8011c96:	b91b      	cbnz	r3, 8011ca0 <_malloc_r+0x3c>
 8011c98:	4630      	mov	r0, r6
 8011c9a:	f000 fb05 	bl	80122a8 <_sbrk_r>
 8011c9e:	6020      	str	r0, [r4, #0]
 8011ca0:	4629      	mov	r1, r5
 8011ca2:	4630      	mov	r0, r6
 8011ca4:	f000 fb00 	bl	80122a8 <_sbrk_r>
 8011ca8:	1c43      	adds	r3, r0, #1
 8011caa:	d124      	bne.n	8011cf6 <_malloc_r+0x92>
 8011cac:	230c      	movs	r3, #12
 8011cae:	6033      	str	r3, [r6, #0]
 8011cb0:	4630      	mov	r0, r6
 8011cb2:	f000 fba4 	bl	80123fe <__malloc_unlock>
 8011cb6:	e7e4      	b.n	8011c82 <_malloc_r+0x1e>
 8011cb8:	680b      	ldr	r3, [r1, #0]
 8011cba:	1b5b      	subs	r3, r3, r5
 8011cbc:	d418      	bmi.n	8011cf0 <_malloc_r+0x8c>
 8011cbe:	2b0b      	cmp	r3, #11
 8011cc0:	d90f      	bls.n	8011ce2 <_malloc_r+0x7e>
 8011cc2:	600b      	str	r3, [r1, #0]
 8011cc4:	50cd      	str	r5, [r1, r3]
 8011cc6:	18cc      	adds	r4, r1, r3
 8011cc8:	4630      	mov	r0, r6
 8011cca:	f000 fb98 	bl	80123fe <__malloc_unlock>
 8011cce:	f104 000b 	add.w	r0, r4, #11
 8011cd2:	1d23      	adds	r3, r4, #4
 8011cd4:	f020 0007 	bic.w	r0, r0, #7
 8011cd8:	1ac3      	subs	r3, r0, r3
 8011cda:	d0d3      	beq.n	8011c84 <_malloc_r+0x20>
 8011cdc:	425a      	negs	r2, r3
 8011cde:	50e2      	str	r2, [r4, r3]
 8011ce0:	e7d0      	b.n	8011c84 <_malloc_r+0x20>
 8011ce2:	428c      	cmp	r4, r1
 8011ce4:	684b      	ldr	r3, [r1, #4]
 8011ce6:	bf16      	itet	ne
 8011ce8:	6063      	strne	r3, [r4, #4]
 8011cea:	6013      	streq	r3, [r2, #0]
 8011cec:	460c      	movne	r4, r1
 8011cee:	e7eb      	b.n	8011cc8 <_malloc_r+0x64>
 8011cf0:	460c      	mov	r4, r1
 8011cf2:	6849      	ldr	r1, [r1, #4]
 8011cf4:	e7cc      	b.n	8011c90 <_malloc_r+0x2c>
 8011cf6:	1cc4      	adds	r4, r0, #3
 8011cf8:	f024 0403 	bic.w	r4, r4, #3
 8011cfc:	42a0      	cmp	r0, r4
 8011cfe:	d005      	beq.n	8011d0c <_malloc_r+0xa8>
 8011d00:	1a21      	subs	r1, r4, r0
 8011d02:	4630      	mov	r0, r6
 8011d04:	f000 fad0 	bl	80122a8 <_sbrk_r>
 8011d08:	3001      	adds	r0, #1
 8011d0a:	d0cf      	beq.n	8011cac <_malloc_r+0x48>
 8011d0c:	6025      	str	r5, [r4, #0]
 8011d0e:	e7db      	b.n	8011cc8 <_malloc_r+0x64>
 8011d10:	20000118 	.word	0x20000118
 8011d14:	2000011c 	.word	0x2000011c

08011d18 <__sfputc_r>:
 8011d18:	6893      	ldr	r3, [r2, #8]
 8011d1a:	3b01      	subs	r3, #1
 8011d1c:	2b00      	cmp	r3, #0
 8011d1e:	b410      	push	{r4}
 8011d20:	6093      	str	r3, [r2, #8]
 8011d22:	da08      	bge.n	8011d36 <__sfputc_r+0x1e>
 8011d24:	6994      	ldr	r4, [r2, #24]
 8011d26:	42a3      	cmp	r3, r4
 8011d28:	db01      	blt.n	8011d2e <__sfputc_r+0x16>
 8011d2a:	290a      	cmp	r1, #10
 8011d2c:	d103      	bne.n	8011d36 <__sfputc_r+0x1e>
 8011d2e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011d32:	f7ff bca3 	b.w	801167c <__swbuf_r>
 8011d36:	6813      	ldr	r3, [r2, #0]
 8011d38:	1c58      	adds	r0, r3, #1
 8011d3a:	6010      	str	r0, [r2, #0]
 8011d3c:	7019      	strb	r1, [r3, #0]
 8011d3e:	4608      	mov	r0, r1
 8011d40:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011d44:	4770      	bx	lr

08011d46 <__sfputs_r>:
 8011d46:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011d48:	4606      	mov	r6, r0
 8011d4a:	460f      	mov	r7, r1
 8011d4c:	4614      	mov	r4, r2
 8011d4e:	18d5      	adds	r5, r2, r3
 8011d50:	42ac      	cmp	r4, r5
 8011d52:	d101      	bne.n	8011d58 <__sfputs_r+0x12>
 8011d54:	2000      	movs	r0, #0
 8011d56:	e007      	b.n	8011d68 <__sfputs_r+0x22>
 8011d58:	463a      	mov	r2, r7
 8011d5a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011d5e:	4630      	mov	r0, r6
 8011d60:	f7ff ffda 	bl	8011d18 <__sfputc_r>
 8011d64:	1c43      	adds	r3, r0, #1
 8011d66:	d1f3      	bne.n	8011d50 <__sfputs_r+0xa>
 8011d68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08011d6c <_vfiprintf_r>:
 8011d6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011d70:	460c      	mov	r4, r1
 8011d72:	b09d      	sub	sp, #116	; 0x74
 8011d74:	4617      	mov	r7, r2
 8011d76:	461d      	mov	r5, r3
 8011d78:	4606      	mov	r6, r0
 8011d7a:	b118      	cbz	r0, 8011d84 <_vfiprintf_r+0x18>
 8011d7c:	6983      	ldr	r3, [r0, #24]
 8011d7e:	b90b      	cbnz	r3, 8011d84 <_vfiprintf_r+0x18>
 8011d80:	f7ff fe2c 	bl	80119dc <__sinit>
 8011d84:	4b7c      	ldr	r3, [pc, #496]	; (8011f78 <_vfiprintf_r+0x20c>)
 8011d86:	429c      	cmp	r4, r3
 8011d88:	d158      	bne.n	8011e3c <_vfiprintf_r+0xd0>
 8011d8a:	6874      	ldr	r4, [r6, #4]
 8011d8c:	89a3      	ldrh	r3, [r4, #12]
 8011d8e:	0718      	lsls	r0, r3, #28
 8011d90:	d55e      	bpl.n	8011e50 <_vfiprintf_r+0xe4>
 8011d92:	6923      	ldr	r3, [r4, #16]
 8011d94:	2b00      	cmp	r3, #0
 8011d96:	d05b      	beq.n	8011e50 <_vfiprintf_r+0xe4>
 8011d98:	2300      	movs	r3, #0
 8011d9a:	9309      	str	r3, [sp, #36]	; 0x24
 8011d9c:	2320      	movs	r3, #32
 8011d9e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011da2:	2330      	movs	r3, #48	; 0x30
 8011da4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011da8:	9503      	str	r5, [sp, #12]
 8011daa:	f04f 0b01 	mov.w	fp, #1
 8011dae:	46b8      	mov	r8, r7
 8011db0:	4645      	mov	r5, r8
 8011db2:	f815 3b01 	ldrb.w	r3, [r5], #1
 8011db6:	b10b      	cbz	r3, 8011dbc <_vfiprintf_r+0x50>
 8011db8:	2b25      	cmp	r3, #37	; 0x25
 8011dba:	d154      	bne.n	8011e66 <_vfiprintf_r+0xfa>
 8011dbc:	ebb8 0a07 	subs.w	sl, r8, r7
 8011dc0:	d00b      	beq.n	8011dda <_vfiprintf_r+0x6e>
 8011dc2:	4653      	mov	r3, sl
 8011dc4:	463a      	mov	r2, r7
 8011dc6:	4621      	mov	r1, r4
 8011dc8:	4630      	mov	r0, r6
 8011dca:	f7ff ffbc 	bl	8011d46 <__sfputs_r>
 8011dce:	3001      	adds	r0, #1
 8011dd0:	f000 80c2 	beq.w	8011f58 <_vfiprintf_r+0x1ec>
 8011dd4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011dd6:	4453      	add	r3, sl
 8011dd8:	9309      	str	r3, [sp, #36]	; 0x24
 8011dda:	f898 3000 	ldrb.w	r3, [r8]
 8011dde:	2b00      	cmp	r3, #0
 8011de0:	f000 80ba 	beq.w	8011f58 <_vfiprintf_r+0x1ec>
 8011de4:	2300      	movs	r3, #0
 8011de6:	f04f 32ff 	mov.w	r2, #4294967295
 8011dea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011dee:	9304      	str	r3, [sp, #16]
 8011df0:	9307      	str	r3, [sp, #28]
 8011df2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011df6:	931a      	str	r3, [sp, #104]	; 0x68
 8011df8:	46a8      	mov	r8, r5
 8011dfa:	2205      	movs	r2, #5
 8011dfc:	f818 1b01 	ldrb.w	r1, [r8], #1
 8011e00:	485e      	ldr	r0, [pc, #376]	; (8011f7c <_vfiprintf_r+0x210>)
 8011e02:	f7ee f9e5 	bl	80001d0 <memchr>
 8011e06:	9b04      	ldr	r3, [sp, #16]
 8011e08:	bb78      	cbnz	r0, 8011e6a <_vfiprintf_r+0xfe>
 8011e0a:	06d9      	lsls	r1, r3, #27
 8011e0c:	bf44      	itt	mi
 8011e0e:	2220      	movmi	r2, #32
 8011e10:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8011e14:	071a      	lsls	r2, r3, #28
 8011e16:	bf44      	itt	mi
 8011e18:	222b      	movmi	r2, #43	; 0x2b
 8011e1a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8011e1e:	782a      	ldrb	r2, [r5, #0]
 8011e20:	2a2a      	cmp	r2, #42	; 0x2a
 8011e22:	d02a      	beq.n	8011e7a <_vfiprintf_r+0x10e>
 8011e24:	9a07      	ldr	r2, [sp, #28]
 8011e26:	46a8      	mov	r8, r5
 8011e28:	2000      	movs	r0, #0
 8011e2a:	250a      	movs	r5, #10
 8011e2c:	4641      	mov	r1, r8
 8011e2e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011e32:	3b30      	subs	r3, #48	; 0x30
 8011e34:	2b09      	cmp	r3, #9
 8011e36:	d969      	bls.n	8011f0c <_vfiprintf_r+0x1a0>
 8011e38:	b360      	cbz	r0, 8011e94 <_vfiprintf_r+0x128>
 8011e3a:	e024      	b.n	8011e86 <_vfiprintf_r+0x11a>
 8011e3c:	4b50      	ldr	r3, [pc, #320]	; (8011f80 <_vfiprintf_r+0x214>)
 8011e3e:	429c      	cmp	r4, r3
 8011e40:	d101      	bne.n	8011e46 <_vfiprintf_r+0xda>
 8011e42:	68b4      	ldr	r4, [r6, #8]
 8011e44:	e7a2      	b.n	8011d8c <_vfiprintf_r+0x20>
 8011e46:	4b4f      	ldr	r3, [pc, #316]	; (8011f84 <_vfiprintf_r+0x218>)
 8011e48:	429c      	cmp	r4, r3
 8011e4a:	bf08      	it	eq
 8011e4c:	68f4      	ldreq	r4, [r6, #12]
 8011e4e:	e79d      	b.n	8011d8c <_vfiprintf_r+0x20>
 8011e50:	4621      	mov	r1, r4
 8011e52:	4630      	mov	r0, r6
 8011e54:	f7ff fc64 	bl	8011720 <__swsetup_r>
 8011e58:	2800      	cmp	r0, #0
 8011e5a:	d09d      	beq.n	8011d98 <_vfiprintf_r+0x2c>
 8011e5c:	f04f 30ff 	mov.w	r0, #4294967295
 8011e60:	b01d      	add	sp, #116	; 0x74
 8011e62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011e66:	46a8      	mov	r8, r5
 8011e68:	e7a2      	b.n	8011db0 <_vfiprintf_r+0x44>
 8011e6a:	4a44      	ldr	r2, [pc, #272]	; (8011f7c <_vfiprintf_r+0x210>)
 8011e6c:	1a80      	subs	r0, r0, r2
 8011e6e:	fa0b f000 	lsl.w	r0, fp, r0
 8011e72:	4318      	orrs	r0, r3
 8011e74:	9004      	str	r0, [sp, #16]
 8011e76:	4645      	mov	r5, r8
 8011e78:	e7be      	b.n	8011df8 <_vfiprintf_r+0x8c>
 8011e7a:	9a03      	ldr	r2, [sp, #12]
 8011e7c:	1d11      	adds	r1, r2, #4
 8011e7e:	6812      	ldr	r2, [r2, #0]
 8011e80:	9103      	str	r1, [sp, #12]
 8011e82:	2a00      	cmp	r2, #0
 8011e84:	db01      	blt.n	8011e8a <_vfiprintf_r+0x11e>
 8011e86:	9207      	str	r2, [sp, #28]
 8011e88:	e004      	b.n	8011e94 <_vfiprintf_r+0x128>
 8011e8a:	4252      	negs	r2, r2
 8011e8c:	f043 0302 	orr.w	r3, r3, #2
 8011e90:	9207      	str	r2, [sp, #28]
 8011e92:	9304      	str	r3, [sp, #16]
 8011e94:	f898 3000 	ldrb.w	r3, [r8]
 8011e98:	2b2e      	cmp	r3, #46	; 0x2e
 8011e9a:	d10e      	bne.n	8011eba <_vfiprintf_r+0x14e>
 8011e9c:	f898 3001 	ldrb.w	r3, [r8, #1]
 8011ea0:	2b2a      	cmp	r3, #42	; 0x2a
 8011ea2:	d138      	bne.n	8011f16 <_vfiprintf_r+0x1aa>
 8011ea4:	9b03      	ldr	r3, [sp, #12]
 8011ea6:	1d1a      	adds	r2, r3, #4
 8011ea8:	681b      	ldr	r3, [r3, #0]
 8011eaa:	9203      	str	r2, [sp, #12]
 8011eac:	2b00      	cmp	r3, #0
 8011eae:	bfb8      	it	lt
 8011eb0:	f04f 33ff 	movlt.w	r3, #4294967295
 8011eb4:	f108 0802 	add.w	r8, r8, #2
 8011eb8:	9305      	str	r3, [sp, #20]
 8011eba:	4d33      	ldr	r5, [pc, #204]	; (8011f88 <_vfiprintf_r+0x21c>)
 8011ebc:	f898 1000 	ldrb.w	r1, [r8]
 8011ec0:	2203      	movs	r2, #3
 8011ec2:	4628      	mov	r0, r5
 8011ec4:	f7ee f984 	bl	80001d0 <memchr>
 8011ec8:	b140      	cbz	r0, 8011edc <_vfiprintf_r+0x170>
 8011eca:	2340      	movs	r3, #64	; 0x40
 8011ecc:	1b40      	subs	r0, r0, r5
 8011ece:	fa03 f000 	lsl.w	r0, r3, r0
 8011ed2:	9b04      	ldr	r3, [sp, #16]
 8011ed4:	4303      	orrs	r3, r0
 8011ed6:	f108 0801 	add.w	r8, r8, #1
 8011eda:	9304      	str	r3, [sp, #16]
 8011edc:	f898 1000 	ldrb.w	r1, [r8]
 8011ee0:	482a      	ldr	r0, [pc, #168]	; (8011f8c <_vfiprintf_r+0x220>)
 8011ee2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011ee6:	2206      	movs	r2, #6
 8011ee8:	f108 0701 	add.w	r7, r8, #1
 8011eec:	f7ee f970 	bl	80001d0 <memchr>
 8011ef0:	2800      	cmp	r0, #0
 8011ef2:	d037      	beq.n	8011f64 <_vfiprintf_r+0x1f8>
 8011ef4:	4b26      	ldr	r3, [pc, #152]	; (8011f90 <_vfiprintf_r+0x224>)
 8011ef6:	bb1b      	cbnz	r3, 8011f40 <_vfiprintf_r+0x1d4>
 8011ef8:	9b03      	ldr	r3, [sp, #12]
 8011efa:	3307      	adds	r3, #7
 8011efc:	f023 0307 	bic.w	r3, r3, #7
 8011f00:	3308      	adds	r3, #8
 8011f02:	9303      	str	r3, [sp, #12]
 8011f04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011f06:	444b      	add	r3, r9
 8011f08:	9309      	str	r3, [sp, #36]	; 0x24
 8011f0a:	e750      	b.n	8011dae <_vfiprintf_r+0x42>
 8011f0c:	fb05 3202 	mla	r2, r5, r2, r3
 8011f10:	2001      	movs	r0, #1
 8011f12:	4688      	mov	r8, r1
 8011f14:	e78a      	b.n	8011e2c <_vfiprintf_r+0xc0>
 8011f16:	2300      	movs	r3, #0
 8011f18:	f108 0801 	add.w	r8, r8, #1
 8011f1c:	9305      	str	r3, [sp, #20]
 8011f1e:	4619      	mov	r1, r3
 8011f20:	250a      	movs	r5, #10
 8011f22:	4640      	mov	r0, r8
 8011f24:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011f28:	3a30      	subs	r2, #48	; 0x30
 8011f2a:	2a09      	cmp	r2, #9
 8011f2c:	d903      	bls.n	8011f36 <_vfiprintf_r+0x1ca>
 8011f2e:	2b00      	cmp	r3, #0
 8011f30:	d0c3      	beq.n	8011eba <_vfiprintf_r+0x14e>
 8011f32:	9105      	str	r1, [sp, #20]
 8011f34:	e7c1      	b.n	8011eba <_vfiprintf_r+0x14e>
 8011f36:	fb05 2101 	mla	r1, r5, r1, r2
 8011f3a:	2301      	movs	r3, #1
 8011f3c:	4680      	mov	r8, r0
 8011f3e:	e7f0      	b.n	8011f22 <_vfiprintf_r+0x1b6>
 8011f40:	ab03      	add	r3, sp, #12
 8011f42:	9300      	str	r3, [sp, #0]
 8011f44:	4622      	mov	r2, r4
 8011f46:	4b13      	ldr	r3, [pc, #76]	; (8011f94 <_vfiprintf_r+0x228>)
 8011f48:	a904      	add	r1, sp, #16
 8011f4a:	4630      	mov	r0, r6
 8011f4c:	f3af 8000 	nop.w
 8011f50:	f1b0 3fff 	cmp.w	r0, #4294967295
 8011f54:	4681      	mov	r9, r0
 8011f56:	d1d5      	bne.n	8011f04 <_vfiprintf_r+0x198>
 8011f58:	89a3      	ldrh	r3, [r4, #12]
 8011f5a:	065b      	lsls	r3, r3, #25
 8011f5c:	f53f af7e 	bmi.w	8011e5c <_vfiprintf_r+0xf0>
 8011f60:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011f62:	e77d      	b.n	8011e60 <_vfiprintf_r+0xf4>
 8011f64:	ab03      	add	r3, sp, #12
 8011f66:	9300      	str	r3, [sp, #0]
 8011f68:	4622      	mov	r2, r4
 8011f6a:	4b0a      	ldr	r3, [pc, #40]	; (8011f94 <_vfiprintf_r+0x228>)
 8011f6c:	a904      	add	r1, sp, #16
 8011f6e:	4630      	mov	r0, r6
 8011f70:	f000 f888 	bl	8012084 <_printf_i>
 8011f74:	e7ec      	b.n	8011f50 <_vfiprintf_r+0x1e4>
 8011f76:	bf00      	nop
 8011f78:	08012b94 	.word	0x08012b94
 8011f7c:	08012bd4 	.word	0x08012bd4
 8011f80:	08012bb4 	.word	0x08012bb4
 8011f84:	08012b74 	.word	0x08012b74
 8011f88:	08012bda 	.word	0x08012bda
 8011f8c:	08012bde 	.word	0x08012bde
 8011f90:	00000000 	.word	0x00000000
 8011f94:	08011d47 	.word	0x08011d47

08011f98 <_printf_common>:
 8011f98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011f9c:	4691      	mov	r9, r2
 8011f9e:	461f      	mov	r7, r3
 8011fa0:	688a      	ldr	r2, [r1, #8]
 8011fa2:	690b      	ldr	r3, [r1, #16]
 8011fa4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8011fa8:	4293      	cmp	r3, r2
 8011faa:	bfb8      	it	lt
 8011fac:	4613      	movlt	r3, r2
 8011fae:	f8c9 3000 	str.w	r3, [r9]
 8011fb2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8011fb6:	4606      	mov	r6, r0
 8011fb8:	460c      	mov	r4, r1
 8011fba:	b112      	cbz	r2, 8011fc2 <_printf_common+0x2a>
 8011fbc:	3301      	adds	r3, #1
 8011fbe:	f8c9 3000 	str.w	r3, [r9]
 8011fc2:	6823      	ldr	r3, [r4, #0]
 8011fc4:	0699      	lsls	r1, r3, #26
 8011fc6:	bf42      	ittt	mi
 8011fc8:	f8d9 3000 	ldrmi.w	r3, [r9]
 8011fcc:	3302      	addmi	r3, #2
 8011fce:	f8c9 3000 	strmi.w	r3, [r9]
 8011fd2:	6825      	ldr	r5, [r4, #0]
 8011fd4:	f015 0506 	ands.w	r5, r5, #6
 8011fd8:	d107      	bne.n	8011fea <_printf_common+0x52>
 8011fda:	f104 0a19 	add.w	sl, r4, #25
 8011fde:	68e3      	ldr	r3, [r4, #12]
 8011fe0:	f8d9 2000 	ldr.w	r2, [r9]
 8011fe4:	1a9b      	subs	r3, r3, r2
 8011fe6:	42ab      	cmp	r3, r5
 8011fe8:	dc28      	bgt.n	801203c <_printf_common+0xa4>
 8011fea:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8011fee:	6822      	ldr	r2, [r4, #0]
 8011ff0:	3300      	adds	r3, #0
 8011ff2:	bf18      	it	ne
 8011ff4:	2301      	movne	r3, #1
 8011ff6:	0692      	lsls	r2, r2, #26
 8011ff8:	d42d      	bmi.n	8012056 <_printf_common+0xbe>
 8011ffa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8011ffe:	4639      	mov	r1, r7
 8012000:	4630      	mov	r0, r6
 8012002:	47c0      	blx	r8
 8012004:	3001      	adds	r0, #1
 8012006:	d020      	beq.n	801204a <_printf_common+0xb2>
 8012008:	6823      	ldr	r3, [r4, #0]
 801200a:	68e5      	ldr	r5, [r4, #12]
 801200c:	f8d9 2000 	ldr.w	r2, [r9]
 8012010:	f003 0306 	and.w	r3, r3, #6
 8012014:	2b04      	cmp	r3, #4
 8012016:	bf08      	it	eq
 8012018:	1aad      	subeq	r5, r5, r2
 801201a:	68a3      	ldr	r3, [r4, #8]
 801201c:	6922      	ldr	r2, [r4, #16]
 801201e:	bf0c      	ite	eq
 8012020:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8012024:	2500      	movne	r5, #0
 8012026:	4293      	cmp	r3, r2
 8012028:	bfc4      	itt	gt
 801202a:	1a9b      	subgt	r3, r3, r2
 801202c:	18ed      	addgt	r5, r5, r3
 801202e:	f04f 0900 	mov.w	r9, #0
 8012032:	341a      	adds	r4, #26
 8012034:	454d      	cmp	r5, r9
 8012036:	d11a      	bne.n	801206e <_printf_common+0xd6>
 8012038:	2000      	movs	r0, #0
 801203a:	e008      	b.n	801204e <_printf_common+0xb6>
 801203c:	2301      	movs	r3, #1
 801203e:	4652      	mov	r2, sl
 8012040:	4639      	mov	r1, r7
 8012042:	4630      	mov	r0, r6
 8012044:	47c0      	blx	r8
 8012046:	3001      	adds	r0, #1
 8012048:	d103      	bne.n	8012052 <_printf_common+0xba>
 801204a:	f04f 30ff 	mov.w	r0, #4294967295
 801204e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012052:	3501      	adds	r5, #1
 8012054:	e7c3      	b.n	8011fde <_printf_common+0x46>
 8012056:	18e1      	adds	r1, r4, r3
 8012058:	1c5a      	adds	r2, r3, #1
 801205a:	2030      	movs	r0, #48	; 0x30
 801205c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8012060:	4422      	add	r2, r4
 8012062:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8012066:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801206a:	3302      	adds	r3, #2
 801206c:	e7c5      	b.n	8011ffa <_printf_common+0x62>
 801206e:	2301      	movs	r3, #1
 8012070:	4622      	mov	r2, r4
 8012072:	4639      	mov	r1, r7
 8012074:	4630      	mov	r0, r6
 8012076:	47c0      	blx	r8
 8012078:	3001      	adds	r0, #1
 801207a:	d0e6      	beq.n	801204a <_printf_common+0xb2>
 801207c:	f109 0901 	add.w	r9, r9, #1
 8012080:	e7d8      	b.n	8012034 <_printf_common+0x9c>
	...

08012084 <_printf_i>:
 8012084:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012088:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 801208c:	460c      	mov	r4, r1
 801208e:	7e09      	ldrb	r1, [r1, #24]
 8012090:	b085      	sub	sp, #20
 8012092:	296e      	cmp	r1, #110	; 0x6e
 8012094:	4617      	mov	r7, r2
 8012096:	4606      	mov	r6, r0
 8012098:	4698      	mov	r8, r3
 801209a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801209c:	f000 80b3 	beq.w	8012206 <_printf_i+0x182>
 80120a0:	d822      	bhi.n	80120e8 <_printf_i+0x64>
 80120a2:	2963      	cmp	r1, #99	; 0x63
 80120a4:	d036      	beq.n	8012114 <_printf_i+0x90>
 80120a6:	d80a      	bhi.n	80120be <_printf_i+0x3a>
 80120a8:	2900      	cmp	r1, #0
 80120aa:	f000 80b9 	beq.w	8012220 <_printf_i+0x19c>
 80120ae:	2958      	cmp	r1, #88	; 0x58
 80120b0:	f000 8083 	beq.w	80121ba <_printf_i+0x136>
 80120b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80120b8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80120bc:	e032      	b.n	8012124 <_printf_i+0xa0>
 80120be:	2964      	cmp	r1, #100	; 0x64
 80120c0:	d001      	beq.n	80120c6 <_printf_i+0x42>
 80120c2:	2969      	cmp	r1, #105	; 0x69
 80120c4:	d1f6      	bne.n	80120b4 <_printf_i+0x30>
 80120c6:	6820      	ldr	r0, [r4, #0]
 80120c8:	6813      	ldr	r3, [r2, #0]
 80120ca:	0605      	lsls	r5, r0, #24
 80120cc:	f103 0104 	add.w	r1, r3, #4
 80120d0:	d52a      	bpl.n	8012128 <_printf_i+0xa4>
 80120d2:	681b      	ldr	r3, [r3, #0]
 80120d4:	6011      	str	r1, [r2, #0]
 80120d6:	2b00      	cmp	r3, #0
 80120d8:	da03      	bge.n	80120e2 <_printf_i+0x5e>
 80120da:	222d      	movs	r2, #45	; 0x2d
 80120dc:	425b      	negs	r3, r3
 80120de:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80120e2:	486f      	ldr	r0, [pc, #444]	; (80122a0 <_printf_i+0x21c>)
 80120e4:	220a      	movs	r2, #10
 80120e6:	e039      	b.n	801215c <_printf_i+0xd8>
 80120e8:	2973      	cmp	r1, #115	; 0x73
 80120ea:	f000 809d 	beq.w	8012228 <_printf_i+0x1a4>
 80120ee:	d808      	bhi.n	8012102 <_printf_i+0x7e>
 80120f0:	296f      	cmp	r1, #111	; 0x6f
 80120f2:	d020      	beq.n	8012136 <_printf_i+0xb2>
 80120f4:	2970      	cmp	r1, #112	; 0x70
 80120f6:	d1dd      	bne.n	80120b4 <_printf_i+0x30>
 80120f8:	6823      	ldr	r3, [r4, #0]
 80120fa:	f043 0320 	orr.w	r3, r3, #32
 80120fe:	6023      	str	r3, [r4, #0]
 8012100:	e003      	b.n	801210a <_printf_i+0x86>
 8012102:	2975      	cmp	r1, #117	; 0x75
 8012104:	d017      	beq.n	8012136 <_printf_i+0xb2>
 8012106:	2978      	cmp	r1, #120	; 0x78
 8012108:	d1d4      	bne.n	80120b4 <_printf_i+0x30>
 801210a:	2378      	movs	r3, #120	; 0x78
 801210c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8012110:	4864      	ldr	r0, [pc, #400]	; (80122a4 <_printf_i+0x220>)
 8012112:	e055      	b.n	80121c0 <_printf_i+0x13c>
 8012114:	6813      	ldr	r3, [r2, #0]
 8012116:	1d19      	adds	r1, r3, #4
 8012118:	681b      	ldr	r3, [r3, #0]
 801211a:	6011      	str	r1, [r2, #0]
 801211c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012120:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8012124:	2301      	movs	r3, #1
 8012126:	e08c      	b.n	8012242 <_printf_i+0x1be>
 8012128:	681b      	ldr	r3, [r3, #0]
 801212a:	6011      	str	r1, [r2, #0]
 801212c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8012130:	bf18      	it	ne
 8012132:	b21b      	sxthne	r3, r3
 8012134:	e7cf      	b.n	80120d6 <_printf_i+0x52>
 8012136:	6813      	ldr	r3, [r2, #0]
 8012138:	6825      	ldr	r5, [r4, #0]
 801213a:	1d18      	adds	r0, r3, #4
 801213c:	6010      	str	r0, [r2, #0]
 801213e:	0628      	lsls	r0, r5, #24
 8012140:	d501      	bpl.n	8012146 <_printf_i+0xc2>
 8012142:	681b      	ldr	r3, [r3, #0]
 8012144:	e002      	b.n	801214c <_printf_i+0xc8>
 8012146:	0668      	lsls	r0, r5, #25
 8012148:	d5fb      	bpl.n	8012142 <_printf_i+0xbe>
 801214a:	881b      	ldrh	r3, [r3, #0]
 801214c:	4854      	ldr	r0, [pc, #336]	; (80122a0 <_printf_i+0x21c>)
 801214e:	296f      	cmp	r1, #111	; 0x6f
 8012150:	bf14      	ite	ne
 8012152:	220a      	movne	r2, #10
 8012154:	2208      	moveq	r2, #8
 8012156:	2100      	movs	r1, #0
 8012158:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801215c:	6865      	ldr	r5, [r4, #4]
 801215e:	60a5      	str	r5, [r4, #8]
 8012160:	2d00      	cmp	r5, #0
 8012162:	f2c0 8095 	blt.w	8012290 <_printf_i+0x20c>
 8012166:	6821      	ldr	r1, [r4, #0]
 8012168:	f021 0104 	bic.w	r1, r1, #4
 801216c:	6021      	str	r1, [r4, #0]
 801216e:	2b00      	cmp	r3, #0
 8012170:	d13d      	bne.n	80121ee <_printf_i+0x16a>
 8012172:	2d00      	cmp	r5, #0
 8012174:	f040 808e 	bne.w	8012294 <_printf_i+0x210>
 8012178:	4665      	mov	r5, ip
 801217a:	2a08      	cmp	r2, #8
 801217c:	d10b      	bne.n	8012196 <_printf_i+0x112>
 801217e:	6823      	ldr	r3, [r4, #0]
 8012180:	07db      	lsls	r3, r3, #31
 8012182:	d508      	bpl.n	8012196 <_printf_i+0x112>
 8012184:	6923      	ldr	r3, [r4, #16]
 8012186:	6862      	ldr	r2, [r4, #4]
 8012188:	429a      	cmp	r2, r3
 801218a:	bfde      	ittt	le
 801218c:	2330      	movle	r3, #48	; 0x30
 801218e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8012192:	f105 35ff 	addle.w	r5, r5, #4294967295
 8012196:	ebac 0305 	sub.w	r3, ip, r5
 801219a:	6123      	str	r3, [r4, #16]
 801219c:	f8cd 8000 	str.w	r8, [sp]
 80121a0:	463b      	mov	r3, r7
 80121a2:	aa03      	add	r2, sp, #12
 80121a4:	4621      	mov	r1, r4
 80121a6:	4630      	mov	r0, r6
 80121a8:	f7ff fef6 	bl	8011f98 <_printf_common>
 80121ac:	3001      	adds	r0, #1
 80121ae:	d14d      	bne.n	801224c <_printf_i+0x1c8>
 80121b0:	f04f 30ff 	mov.w	r0, #4294967295
 80121b4:	b005      	add	sp, #20
 80121b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80121ba:	4839      	ldr	r0, [pc, #228]	; (80122a0 <_printf_i+0x21c>)
 80121bc:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80121c0:	6813      	ldr	r3, [r2, #0]
 80121c2:	6821      	ldr	r1, [r4, #0]
 80121c4:	1d1d      	adds	r5, r3, #4
 80121c6:	681b      	ldr	r3, [r3, #0]
 80121c8:	6015      	str	r5, [r2, #0]
 80121ca:	060a      	lsls	r2, r1, #24
 80121cc:	d50b      	bpl.n	80121e6 <_printf_i+0x162>
 80121ce:	07ca      	lsls	r2, r1, #31
 80121d0:	bf44      	itt	mi
 80121d2:	f041 0120 	orrmi.w	r1, r1, #32
 80121d6:	6021      	strmi	r1, [r4, #0]
 80121d8:	b91b      	cbnz	r3, 80121e2 <_printf_i+0x15e>
 80121da:	6822      	ldr	r2, [r4, #0]
 80121dc:	f022 0220 	bic.w	r2, r2, #32
 80121e0:	6022      	str	r2, [r4, #0]
 80121e2:	2210      	movs	r2, #16
 80121e4:	e7b7      	b.n	8012156 <_printf_i+0xd2>
 80121e6:	064d      	lsls	r5, r1, #25
 80121e8:	bf48      	it	mi
 80121ea:	b29b      	uxthmi	r3, r3
 80121ec:	e7ef      	b.n	80121ce <_printf_i+0x14a>
 80121ee:	4665      	mov	r5, ip
 80121f0:	fbb3 f1f2 	udiv	r1, r3, r2
 80121f4:	fb02 3311 	mls	r3, r2, r1, r3
 80121f8:	5cc3      	ldrb	r3, [r0, r3]
 80121fa:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80121fe:	460b      	mov	r3, r1
 8012200:	2900      	cmp	r1, #0
 8012202:	d1f5      	bne.n	80121f0 <_printf_i+0x16c>
 8012204:	e7b9      	b.n	801217a <_printf_i+0xf6>
 8012206:	6813      	ldr	r3, [r2, #0]
 8012208:	6825      	ldr	r5, [r4, #0]
 801220a:	6961      	ldr	r1, [r4, #20]
 801220c:	1d18      	adds	r0, r3, #4
 801220e:	6010      	str	r0, [r2, #0]
 8012210:	0628      	lsls	r0, r5, #24
 8012212:	681b      	ldr	r3, [r3, #0]
 8012214:	d501      	bpl.n	801221a <_printf_i+0x196>
 8012216:	6019      	str	r1, [r3, #0]
 8012218:	e002      	b.n	8012220 <_printf_i+0x19c>
 801221a:	066a      	lsls	r2, r5, #25
 801221c:	d5fb      	bpl.n	8012216 <_printf_i+0x192>
 801221e:	8019      	strh	r1, [r3, #0]
 8012220:	2300      	movs	r3, #0
 8012222:	6123      	str	r3, [r4, #16]
 8012224:	4665      	mov	r5, ip
 8012226:	e7b9      	b.n	801219c <_printf_i+0x118>
 8012228:	6813      	ldr	r3, [r2, #0]
 801222a:	1d19      	adds	r1, r3, #4
 801222c:	6011      	str	r1, [r2, #0]
 801222e:	681d      	ldr	r5, [r3, #0]
 8012230:	6862      	ldr	r2, [r4, #4]
 8012232:	2100      	movs	r1, #0
 8012234:	4628      	mov	r0, r5
 8012236:	f7ed ffcb 	bl	80001d0 <memchr>
 801223a:	b108      	cbz	r0, 8012240 <_printf_i+0x1bc>
 801223c:	1b40      	subs	r0, r0, r5
 801223e:	6060      	str	r0, [r4, #4]
 8012240:	6863      	ldr	r3, [r4, #4]
 8012242:	6123      	str	r3, [r4, #16]
 8012244:	2300      	movs	r3, #0
 8012246:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801224a:	e7a7      	b.n	801219c <_printf_i+0x118>
 801224c:	6923      	ldr	r3, [r4, #16]
 801224e:	462a      	mov	r2, r5
 8012250:	4639      	mov	r1, r7
 8012252:	4630      	mov	r0, r6
 8012254:	47c0      	blx	r8
 8012256:	3001      	adds	r0, #1
 8012258:	d0aa      	beq.n	80121b0 <_printf_i+0x12c>
 801225a:	6823      	ldr	r3, [r4, #0]
 801225c:	079b      	lsls	r3, r3, #30
 801225e:	d413      	bmi.n	8012288 <_printf_i+0x204>
 8012260:	68e0      	ldr	r0, [r4, #12]
 8012262:	9b03      	ldr	r3, [sp, #12]
 8012264:	4298      	cmp	r0, r3
 8012266:	bfb8      	it	lt
 8012268:	4618      	movlt	r0, r3
 801226a:	e7a3      	b.n	80121b4 <_printf_i+0x130>
 801226c:	2301      	movs	r3, #1
 801226e:	464a      	mov	r2, r9
 8012270:	4639      	mov	r1, r7
 8012272:	4630      	mov	r0, r6
 8012274:	47c0      	blx	r8
 8012276:	3001      	adds	r0, #1
 8012278:	d09a      	beq.n	80121b0 <_printf_i+0x12c>
 801227a:	3501      	adds	r5, #1
 801227c:	68e3      	ldr	r3, [r4, #12]
 801227e:	9a03      	ldr	r2, [sp, #12]
 8012280:	1a9b      	subs	r3, r3, r2
 8012282:	42ab      	cmp	r3, r5
 8012284:	dcf2      	bgt.n	801226c <_printf_i+0x1e8>
 8012286:	e7eb      	b.n	8012260 <_printf_i+0x1dc>
 8012288:	2500      	movs	r5, #0
 801228a:	f104 0919 	add.w	r9, r4, #25
 801228e:	e7f5      	b.n	801227c <_printf_i+0x1f8>
 8012290:	2b00      	cmp	r3, #0
 8012292:	d1ac      	bne.n	80121ee <_printf_i+0x16a>
 8012294:	7803      	ldrb	r3, [r0, #0]
 8012296:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801229a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801229e:	e76c      	b.n	801217a <_printf_i+0xf6>
 80122a0:	08012be5 	.word	0x08012be5
 80122a4:	08012bf6 	.word	0x08012bf6

080122a8 <_sbrk_r>:
 80122a8:	b538      	push	{r3, r4, r5, lr}
 80122aa:	4c06      	ldr	r4, [pc, #24]	; (80122c4 <_sbrk_r+0x1c>)
 80122ac:	2300      	movs	r3, #0
 80122ae:	4605      	mov	r5, r0
 80122b0:	4608      	mov	r0, r1
 80122b2:	6023      	str	r3, [r4, #0]
 80122b4:	f7fe fff2 	bl	801129c <_sbrk>
 80122b8:	1c43      	adds	r3, r0, #1
 80122ba:	d102      	bne.n	80122c2 <_sbrk_r+0x1a>
 80122bc:	6823      	ldr	r3, [r4, #0]
 80122be:	b103      	cbz	r3, 80122c2 <_sbrk_r+0x1a>
 80122c0:	602b      	str	r3, [r5, #0]
 80122c2:	bd38      	pop	{r3, r4, r5, pc}
 80122c4:	200015d8 	.word	0x200015d8

080122c8 <__sread>:
 80122c8:	b510      	push	{r4, lr}
 80122ca:	460c      	mov	r4, r1
 80122cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80122d0:	f000 f896 	bl	8012400 <_read_r>
 80122d4:	2800      	cmp	r0, #0
 80122d6:	bfab      	itete	ge
 80122d8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80122da:	89a3      	ldrhlt	r3, [r4, #12]
 80122dc:	181b      	addge	r3, r3, r0
 80122de:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80122e2:	bfac      	ite	ge
 80122e4:	6563      	strge	r3, [r4, #84]	; 0x54
 80122e6:	81a3      	strhlt	r3, [r4, #12]
 80122e8:	bd10      	pop	{r4, pc}

080122ea <__swrite>:
 80122ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80122ee:	461f      	mov	r7, r3
 80122f0:	898b      	ldrh	r3, [r1, #12]
 80122f2:	05db      	lsls	r3, r3, #23
 80122f4:	4605      	mov	r5, r0
 80122f6:	460c      	mov	r4, r1
 80122f8:	4616      	mov	r6, r2
 80122fa:	d505      	bpl.n	8012308 <__swrite+0x1e>
 80122fc:	2302      	movs	r3, #2
 80122fe:	2200      	movs	r2, #0
 8012300:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012304:	f000 f868 	bl	80123d8 <_lseek_r>
 8012308:	89a3      	ldrh	r3, [r4, #12]
 801230a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801230e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8012312:	81a3      	strh	r3, [r4, #12]
 8012314:	4632      	mov	r2, r6
 8012316:	463b      	mov	r3, r7
 8012318:	4628      	mov	r0, r5
 801231a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801231e:	f000 b817 	b.w	8012350 <_write_r>

08012322 <__sseek>:
 8012322:	b510      	push	{r4, lr}
 8012324:	460c      	mov	r4, r1
 8012326:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801232a:	f000 f855 	bl	80123d8 <_lseek_r>
 801232e:	1c43      	adds	r3, r0, #1
 8012330:	89a3      	ldrh	r3, [r4, #12]
 8012332:	bf15      	itete	ne
 8012334:	6560      	strne	r0, [r4, #84]	; 0x54
 8012336:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801233a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801233e:	81a3      	strheq	r3, [r4, #12]
 8012340:	bf18      	it	ne
 8012342:	81a3      	strhne	r3, [r4, #12]
 8012344:	bd10      	pop	{r4, pc}

08012346 <__sclose>:
 8012346:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801234a:	f000 b813 	b.w	8012374 <_close_r>
	...

08012350 <_write_r>:
 8012350:	b538      	push	{r3, r4, r5, lr}
 8012352:	4c07      	ldr	r4, [pc, #28]	; (8012370 <_write_r+0x20>)
 8012354:	4605      	mov	r5, r0
 8012356:	4608      	mov	r0, r1
 8012358:	4611      	mov	r1, r2
 801235a:	2200      	movs	r2, #0
 801235c:	6022      	str	r2, [r4, #0]
 801235e:	461a      	mov	r2, r3
 8012360:	f7fe ff4b 	bl	80111fa <_write>
 8012364:	1c43      	adds	r3, r0, #1
 8012366:	d102      	bne.n	801236e <_write_r+0x1e>
 8012368:	6823      	ldr	r3, [r4, #0]
 801236a:	b103      	cbz	r3, 801236e <_write_r+0x1e>
 801236c:	602b      	str	r3, [r5, #0]
 801236e:	bd38      	pop	{r3, r4, r5, pc}
 8012370:	200015d8 	.word	0x200015d8

08012374 <_close_r>:
 8012374:	b538      	push	{r3, r4, r5, lr}
 8012376:	4c06      	ldr	r4, [pc, #24]	; (8012390 <_close_r+0x1c>)
 8012378:	2300      	movs	r3, #0
 801237a:	4605      	mov	r5, r0
 801237c:	4608      	mov	r0, r1
 801237e:	6023      	str	r3, [r4, #0]
 8012380:	f7fe ff57 	bl	8011232 <_close>
 8012384:	1c43      	adds	r3, r0, #1
 8012386:	d102      	bne.n	801238e <_close_r+0x1a>
 8012388:	6823      	ldr	r3, [r4, #0]
 801238a:	b103      	cbz	r3, 801238e <_close_r+0x1a>
 801238c:	602b      	str	r3, [r5, #0]
 801238e:	bd38      	pop	{r3, r4, r5, pc}
 8012390:	200015d8 	.word	0x200015d8

08012394 <_fstat_r>:
 8012394:	b538      	push	{r3, r4, r5, lr}
 8012396:	4c07      	ldr	r4, [pc, #28]	; (80123b4 <_fstat_r+0x20>)
 8012398:	2300      	movs	r3, #0
 801239a:	4605      	mov	r5, r0
 801239c:	4608      	mov	r0, r1
 801239e:	4611      	mov	r1, r2
 80123a0:	6023      	str	r3, [r4, #0]
 80123a2:	f7fe ff52 	bl	801124a <_fstat>
 80123a6:	1c43      	adds	r3, r0, #1
 80123a8:	d102      	bne.n	80123b0 <_fstat_r+0x1c>
 80123aa:	6823      	ldr	r3, [r4, #0]
 80123ac:	b103      	cbz	r3, 80123b0 <_fstat_r+0x1c>
 80123ae:	602b      	str	r3, [r5, #0]
 80123b0:	bd38      	pop	{r3, r4, r5, pc}
 80123b2:	bf00      	nop
 80123b4:	200015d8 	.word	0x200015d8

080123b8 <_isatty_r>:
 80123b8:	b538      	push	{r3, r4, r5, lr}
 80123ba:	4c06      	ldr	r4, [pc, #24]	; (80123d4 <_isatty_r+0x1c>)
 80123bc:	2300      	movs	r3, #0
 80123be:	4605      	mov	r5, r0
 80123c0:	4608      	mov	r0, r1
 80123c2:	6023      	str	r3, [r4, #0]
 80123c4:	f7fe ff51 	bl	801126a <_isatty>
 80123c8:	1c43      	adds	r3, r0, #1
 80123ca:	d102      	bne.n	80123d2 <_isatty_r+0x1a>
 80123cc:	6823      	ldr	r3, [r4, #0]
 80123ce:	b103      	cbz	r3, 80123d2 <_isatty_r+0x1a>
 80123d0:	602b      	str	r3, [r5, #0]
 80123d2:	bd38      	pop	{r3, r4, r5, pc}
 80123d4:	200015d8 	.word	0x200015d8

080123d8 <_lseek_r>:
 80123d8:	b538      	push	{r3, r4, r5, lr}
 80123da:	4c07      	ldr	r4, [pc, #28]	; (80123f8 <_lseek_r+0x20>)
 80123dc:	4605      	mov	r5, r0
 80123de:	4608      	mov	r0, r1
 80123e0:	4611      	mov	r1, r2
 80123e2:	2200      	movs	r2, #0
 80123e4:	6022      	str	r2, [r4, #0]
 80123e6:	461a      	mov	r2, r3
 80123e8:	f7fe ff4a 	bl	8011280 <_lseek>
 80123ec:	1c43      	adds	r3, r0, #1
 80123ee:	d102      	bne.n	80123f6 <_lseek_r+0x1e>
 80123f0:	6823      	ldr	r3, [r4, #0]
 80123f2:	b103      	cbz	r3, 80123f6 <_lseek_r+0x1e>
 80123f4:	602b      	str	r3, [r5, #0]
 80123f6:	bd38      	pop	{r3, r4, r5, pc}
 80123f8:	200015d8 	.word	0x200015d8

080123fc <__malloc_lock>:
 80123fc:	4770      	bx	lr

080123fe <__malloc_unlock>:
 80123fe:	4770      	bx	lr

08012400 <_read_r>:
 8012400:	b538      	push	{r3, r4, r5, lr}
 8012402:	4c07      	ldr	r4, [pc, #28]	; (8012420 <_read_r+0x20>)
 8012404:	4605      	mov	r5, r0
 8012406:	4608      	mov	r0, r1
 8012408:	4611      	mov	r1, r2
 801240a:	2200      	movs	r2, #0
 801240c:	6022      	str	r2, [r4, #0]
 801240e:	461a      	mov	r2, r3
 8012410:	f7fe fed6 	bl	80111c0 <_read>
 8012414:	1c43      	adds	r3, r0, #1
 8012416:	d102      	bne.n	801241e <_read_r+0x1e>
 8012418:	6823      	ldr	r3, [r4, #0]
 801241a:	b103      	cbz	r3, 801241e <_read_r+0x1e>
 801241c:	602b      	str	r3, [r5, #0]
 801241e:	bd38      	pop	{r3, r4, r5, pc}
 8012420:	200015d8 	.word	0x200015d8

08012424 <sqrt>:
 8012424:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012428:	ed2d 8b02 	vpush	{d8}
 801242c:	b08b      	sub	sp, #44	; 0x2c
 801242e:	ec55 4b10 	vmov	r4, r5, d0
 8012432:	f000 f851 	bl	80124d8 <__ieee754_sqrt>
 8012436:	4b26      	ldr	r3, [pc, #152]	; (80124d0 <sqrt+0xac>)
 8012438:	eeb0 8a40 	vmov.f32	s16, s0
 801243c:	eef0 8a60 	vmov.f32	s17, s1
 8012440:	f993 6000 	ldrsb.w	r6, [r3]
 8012444:	1c73      	adds	r3, r6, #1
 8012446:	d02a      	beq.n	801249e <sqrt+0x7a>
 8012448:	4622      	mov	r2, r4
 801244a:	462b      	mov	r3, r5
 801244c:	4620      	mov	r0, r4
 801244e:	4629      	mov	r1, r5
 8012450:	f7ee fb64 	bl	8000b1c <__aeabi_dcmpun>
 8012454:	4607      	mov	r7, r0
 8012456:	bb10      	cbnz	r0, 801249e <sqrt+0x7a>
 8012458:	f04f 0800 	mov.w	r8, #0
 801245c:	f04f 0900 	mov.w	r9, #0
 8012460:	4642      	mov	r2, r8
 8012462:	464b      	mov	r3, r9
 8012464:	4620      	mov	r0, r4
 8012466:	4629      	mov	r1, r5
 8012468:	f7ee fb30 	bl	8000acc <__aeabi_dcmplt>
 801246c:	b1b8      	cbz	r0, 801249e <sqrt+0x7a>
 801246e:	2301      	movs	r3, #1
 8012470:	9300      	str	r3, [sp, #0]
 8012472:	4b18      	ldr	r3, [pc, #96]	; (80124d4 <sqrt+0xb0>)
 8012474:	9301      	str	r3, [sp, #4]
 8012476:	9708      	str	r7, [sp, #32]
 8012478:	e9cd 4504 	strd	r4, r5, [sp, #16]
 801247c:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8012480:	b9b6      	cbnz	r6, 80124b0 <sqrt+0x8c>
 8012482:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8012486:	4668      	mov	r0, sp
 8012488:	f000 f8d6 	bl	8012638 <matherr>
 801248c:	b1d0      	cbz	r0, 80124c4 <sqrt+0xa0>
 801248e:	9b08      	ldr	r3, [sp, #32]
 8012490:	b11b      	cbz	r3, 801249a <sqrt+0x76>
 8012492:	f7fe ff8f 	bl	80113b4 <__errno>
 8012496:	9b08      	ldr	r3, [sp, #32]
 8012498:	6003      	str	r3, [r0, #0]
 801249a:	ed9d 8b06 	vldr	d8, [sp, #24]
 801249e:	eeb0 0a48 	vmov.f32	s0, s16
 80124a2:	eef0 0a68 	vmov.f32	s1, s17
 80124a6:	b00b      	add	sp, #44	; 0x2c
 80124a8:	ecbd 8b02 	vpop	{d8}
 80124ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80124b0:	4642      	mov	r2, r8
 80124b2:	464b      	mov	r3, r9
 80124b4:	4640      	mov	r0, r8
 80124b6:	4649      	mov	r1, r9
 80124b8:	f7ee f9c0 	bl	800083c <__aeabi_ddiv>
 80124bc:	2e02      	cmp	r6, #2
 80124be:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80124c2:	d1e0      	bne.n	8012486 <sqrt+0x62>
 80124c4:	f7fe ff76 	bl	80113b4 <__errno>
 80124c8:	2321      	movs	r3, #33	; 0x21
 80124ca:	6003      	str	r3, [r0, #0]
 80124cc:	e7df      	b.n	801248e <sqrt+0x6a>
 80124ce:	bf00      	nop
 80124d0:	200000e8 	.word	0x200000e8
 80124d4:	08012c07 	.word	0x08012c07

080124d8 <__ieee754_sqrt>:
 80124d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80124dc:	4955      	ldr	r1, [pc, #340]	; (8012634 <__ieee754_sqrt+0x15c>)
 80124de:	ec55 4b10 	vmov	r4, r5, d0
 80124e2:	43a9      	bics	r1, r5
 80124e4:	462b      	mov	r3, r5
 80124e6:	462a      	mov	r2, r5
 80124e8:	d112      	bne.n	8012510 <__ieee754_sqrt+0x38>
 80124ea:	ee10 2a10 	vmov	r2, s0
 80124ee:	ee10 0a10 	vmov	r0, s0
 80124f2:	4629      	mov	r1, r5
 80124f4:	f7ee f878 	bl	80005e8 <__aeabi_dmul>
 80124f8:	4602      	mov	r2, r0
 80124fa:	460b      	mov	r3, r1
 80124fc:	4620      	mov	r0, r4
 80124fe:	4629      	mov	r1, r5
 8012500:	f7ed febc 	bl	800027c <__adddf3>
 8012504:	4604      	mov	r4, r0
 8012506:	460d      	mov	r5, r1
 8012508:	ec45 4b10 	vmov	d0, r4, r5
 801250c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012510:	2d00      	cmp	r5, #0
 8012512:	ee10 0a10 	vmov	r0, s0
 8012516:	4621      	mov	r1, r4
 8012518:	dc0f      	bgt.n	801253a <__ieee754_sqrt+0x62>
 801251a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 801251e:	4330      	orrs	r0, r6
 8012520:	d0f2      	beq.n	8012508 <__ieee754_sqrt+0x30>
 8012522:	b155      	cbz	r5, 801253a <__ieee754_sqrt+0x62>
 8012524:	ee10 2a10 	vmov	r2, s0
 8012528:	4620      	mov	r0, r4
 801252a:	4629      	mov	r1, r5
 801252c:	f7ed fea4 	bl	8000278 <__aeabi_dsub>
 8012530:	4602      	mov	r2, r0
 8012532:	460b      	mov	r3, r1
 8012534:	f7ee f982 	bl	800083c <__aeabi_ddiv>
 8012538:	e7e4      	b.n	8012504 <__ieee754_sqrt+0x2c>
 801253a:	151b      	asrs	r3, r3, #20
 801253c:	d073      	beq.n	8012626 <__ieee754_sqrt+0x14e>
 801253e:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8012542:	07dd      	lsls	r5, r3, #31
 8012544:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8012548:	bf48      	it	mi
 801254a:	0fc8      	lsrmi	r0, r1, #31
 801254c:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8012550:	bf44      	itt	mi
 8012552:	0049      	lslmi	r1, r1, #1
 8012554:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 8012558:	2500      	movs	r5, #0
 801255a:	1058      	asrs	r0, r3, #1
 801255c:	0fcb      	lsrs	r3, r1, #31
 801255e:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 8012562:	0049      	lsls	r1, r1, #1
 8012564:	2316      	movs	r3, #22
 8012566:	462c      	mov	r4, r5
 8012568:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 801256c:	19a7      	adds	r7, r4, r6
 801256e:	4297      	cmp	r7, r2
 8012570:	bfde      	ittt	le
 8012572:	19bc      	addle	r4, r7, r6
 8012574:	1bd2      	suble	r2, r2, r7
 8012576:	19ad      	addle	r5, r5, r6
 8012578:	0fcf      	lsrs	r7, r1, #31
 801257a:	3b01      	subs	r3, #1
 801257c:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 8012580:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8012584:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8012588:	d1f0      	bne.n	801256c <__ieee754_sqrt+0x94>
 801258a:	f04f 0c20 	mov.w	ip, #32
 801258e:	469e      	mov	lr, r3
 8012590:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8012594:	42a2      	cmp	r2, r4
 8012596:	eb06 070e 	add.w	r7, r6, lr
 801259a:	dc02      	bgt.n	80125a2 <__ieee754_sqrt+0xca>
 801259c:	d112      	bne.n	80125c4 <__ieee754_sqrt+0xec>
 801259e:	428f      	cmp	r7, r1
 80125a0:	d810      	bhi.n	80125c4 <__ieee754_sqrt+0xec>
 80125a2:	2f00      	cmp	r7, #0
 80125a4:	eb07 0e06 	add.w	lr, r7, r6
 80125a8:	da42      	bge.n	8012630 <__ieee754_sqrt+0x158>
 80125aa:	f1be 0f00 	cmp.w	lr, #0
 80125ae:	db3f      	blt.n	8012630 <__ieee754_sqrt+0x158>
 80125b0:	f104 0801 	add.w	r8, r4, #1
 80125b4:	1b12      	subs	r2, r2, r4
 80125b6:	428f      	cmp	r7, r1
 80125b8:	bf88      	it	hi
 80125ba:	f102 32ff 	addhi.w	r2, r2, #4294967295
 80125be:	1bc9      	subs	r1, r1, r7
 80125c0:	4433      	add	r3, r6
 80125c2:	4644      	mov	r4, r8
 80125c4:	0052      	lsls	r2, r2, #1
 80125c6:	f1bc 0c01 	subs.w	ip, ip, #1
 80125ca:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 80125ce:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80125d2:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80125d6:	d1dd      	bne.n	8012594 <__ieee754_sqrt+0xbc>
 80125d8:	430a      	orrs	r2, r1
 80125da:	d006      	beq.n	80125ea <__ieee754_sqrt+0x112>
 80125dc:	1c5c      	adds	r4, r3, #1
 80125de:	bf13      	iteet	ne
 80125e0:	3301      	addne	r3, #1
 80125e2:	3501      	addeq	r5, #1
 80125e4:	4663      	moveq	r3, ip
 80125e6:	f023 0301 	bicne.w	r3, r3, #1
 80125ea:	106a      	asrs	r2, r5, #1
 80125ec:	085b      	lsrs	r3, r3, #1
 80125ee:	07e9      	lsls	r1, r5, #31
 80125f0:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 80125f4:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 80125f8:	bf48      	it	mi
 80125fa:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 80125fe:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 8012602:	461c      	mov	r4, r3
 8012604:	e780      	b.n	8012508 <__ieee754_sqrt+0x30>
 8012606:	0aca      	lsrs	r2, r1, #11
 8012608:	3815      	subs	r0, #21
 801260a:	0549      	lsls	r1, r1, #21
 801260c:	2a00      	cmp	r2, #0
 801260e:	d0fa      	beq.n	8012606 <__ieee754_sqrt+0x12e>
 8012610:	02d6      	lsls	r6, r2, #11
 8012612:	d50a      	bpl.n	801262a <__ieee754_sqrt+0x152>
 8012614:	f1c3 0420 	rsb	r4, r3, #32
 8012618:	fa21 f404 	lsr.w	r4, r1, r4
 801261c:	1e5d      	subs	r5, r3, #1
 801261e:	4099      	lsls	r1, r3
 8012620:	4322      	orrs	r2, r4
 8012622:	1b43      	subs	r3, r0, r5
 8012624:	e78b      	b.n	801253e <__ieee754_sqrt+0x66>
 8012626:	4618      	mov	r0, r3
 8012628:	e7f0      	b.n	801260c <__ieee754_sqrt+0x134>
 801262a:	0052      	lsls	r2, r2, #1
 801262c:	3301      	adds	r3, #1
 801262e:	e7ef      	b.n	8012610 <__ieee754_sqrt+0x138>
 8012630:	46a0      	mov	r8, r4
 8012632:	e7bf      	b.n	80125b4 <__ieee754_sqrt+0xdc>
 8012634:	7ff00000 	.word	0x7ff00000

08012638 <matherr>:
 8012638:	2000      	movs	r0, #0
 801263a:	4770      	bx	lr

0801263c <_init>:
 801263c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801263e:	bf00      	nop
 8012640:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012642:	bc08      	pop	{r3}
 8012644:	469e      	mov	lr, r3
 8012646:	4770      	bx	lr

08012648 <_fini>:
 8012648:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801264a:	bf00      	nop
 801264c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801264e:	bc08      	pop	{r3}
 8012650:	469e      	mov	lr, r3
 8012652:	4770      	bx	lr
