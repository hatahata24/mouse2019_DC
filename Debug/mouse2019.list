
mouse2019.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011a38  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000578  08011bc8  08011bc8  00021bc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012140  08012140  000300ec  2**0
                  CONTENTS
  4 .ARM          00000008  08012140  08012140  00022140  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012148  08012148  000300ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012148  08012148  00022148  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801214c  0801214c  0002214c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000ec  20000000  08012150  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000014f0  200000ec  0801223c  000300ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200015dc  0801223c  000315dc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000300ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016d33  00000000  00000000  0003011c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000030ac  00000000  00000000  00046e4f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000013f8  00000000  00000000  00049f00  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000012a8  00000000  00000000  0004b2f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00022976  00000000  00000000  0004c5a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00010bd2  00000000  00000000  0006ef16  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c80af  00000000  00000000  0007fae8  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00147b97  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005d70  00000000  00000000  00147c14  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000ec 	.word	0x200000ec
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08011bb0 	.word	0x08011bb0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000f0 	.word	0x200000f0
 80001cc:	08011bb0 	.word	0x08011bb0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ae:	f1a4 0401 	sub.w	r4, r4, #1
 80003b2:	d1e9      	bne.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__gedf2>:
 8000a0c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a10:	e006      	b.n	8000a20 <__cmpdf2+0x4>
 8000a12:	bf00      	nop

08000a14 <__ledf2>:
 8000a14:	f04f 0c01 	mov.w	ip, #1
 8000a18:	e002      	b.n	8000a20 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__cmpdf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a36:	d01b      	beq.n	8000a70 <__cmpdf2+0x54>
 8000a38:	b001      	add	sp, #4
 8000a3a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a3e:	bf0c      	ite	eq
 8000a40:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a44:	ea91 0f03 	teqne	r1, r3
 8000a48:	bf02      	ittt	eq
 8000a4a:	ea90 0f02 	teqeq	r0, r2
 8000a4e:	2000      	moveq	r0, #0
 8000a50:	4770      	bxeq	lr
 8000a52:	f110 0f00 	cmn.w	r0, #0
 8000a56:	ea91 0f03 	teq	r1, r3
 8000a5a:	bf58      	it	pl
 8000a5c:	4299      	cmppl	r1, r3
 8000a5e:	bf08      	it	eq
 8000a60:	4290      	cmpeq	r0, r2
 8000a62:	bf2c      	ite	cs
 8000a64:	17d8      	asrcs	r0, r3, #31
 8000a66:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a6a:	f040 0001 	orr.w	r0, r0, #1
 8000a6e:	4770      	bx	lr
 8000a70:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a78:	d102      	bne.n	8000a80 <__cmpdf2+0x64>
 8000a7a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a7e:	d107      	bne.n	8000a90 <__cmpdf2+0x74>
 8000a80:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d1d6      	bne.n	8000a38 <__cmpdf2+0x1c>
 8000a8a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a8e:	d0d3      	beq.n	8000a38 <__cmpdf2+0x1c>
 8000a90:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop

08000a98 <__aeabi_cdrcmple>:
 8000a98:	4684      	mov	ip, r0
 8000a9a:	4610      	mov	r0, r2
 8000a9c:	4662      	mov	r2, ip
 8000a9e:	468c      	mov	ip, r1
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4663      	mov	r3, ip
 8000aa4:	e000      	b.n	8000aa8 <__aeabi_cdcmpeq>
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdcmpeq>:
 8000aa8:	b501      	push	{r0, lr}
 8000aaa:	f7ff ffb7 	bl	8000a1c <__cmpdf2>
 8000aae:	2800      	cmp	r0, #0
 8000ab0:	bf48      	it	mi
 8000ab2:	f110 0f00 	cmnmi.w	r0, #0
 8000ab6:	bd01      	pop	{r0, pc}

08000ab8 <__aeabi_dcmpeq>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff fff4 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ac0:	bf0c      	ite	eq
 8000ac2:	2001      	moveq	r0, #1
 8000ac4:	2000      	movne	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_dcmplt>:
 8000acc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad0:	f7ff ffea 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ad4:	bf34      	ite	cc
 8000ad6:	2001      	movcc	r0, #1
 8000ad8:	2000      	movcs	r0, #0
 8000ada:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ade:	bf00      	nop

08000ae0 <__aeabi_dcmple>:
 8000ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae4:	f7ff ffe0 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ae8:	bf94      	ite	ls
 8000aea:	2001      	movls	r0, #1
 8000aec:	2000      	movhi	r0, #0
 8000aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af2:	bf00      	nop

08000af4 <__aeabi_dcmpge>:
 8000af4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af8:	f7ff ffce 	bl	8000a98 <__aeabi_cdrcmple>
 8000afc:	bf94      	ite	ls
 8000afe:	2001      	movls	r0, #1
 8000b00:	2000      	movhi	r0, #0
 8000b02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b06:	bf00      	nop

08000b08 <__aeabi_dcmpgt>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff ffc4 	bl	8000a98 <__aeabi_cdrcmple>
 8000b10:	bf34      	ite	cc
 8000b12:	2001      	movcc	r0, #1
 8000b14:	2000      	movcs	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmpun>:
 8000b1c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b24:	d102      	bne.n	8000b2c <__aeabi_dcmpun+0x10>
 8000b26:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b2a:	d10a      	bne.n	8000b42 <__aeabi_dcmpun+0x26>
 8000b2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x20>
 8000b36:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b3a:	d102      	bne.n	8000b42 <__aeabi_dcmpun+0x26>
 8000b3c:	f04f 0000 	mov.w	r0, #0
 8000b40:	4770      	bx	lr
 8000b42:	f04f 0001 	mov.w	r0, #1
 8000b46:	4770      	bx	lr

08000b48 <__aeabi_d2iz>:
 8000b48:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b4c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b50:	d215      	bcs.n	8000b7e <__aeabi_d2iz+0x36>
 8000b52:	d511      	bpl.n	8000b78 <__aeabi_d2iz+0x30>
 8000b54:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b58:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b5c:	d912      	bls.n	8000b84 <__aeabi_d2iz+0x3c>
 8000b5e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b62:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b66:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b6a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b6e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	4770      	bx	lr
 8000b78:	f04f 0000 	mov.w	r0, #0
 8000b7c:	4770      	bx	lr
 8000b7e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b82:	d105      	bne.n	8000b90 <__aeabi_d2iz+0x48>
 8000b84:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b88:	bf08      	it	eq
 8000b8a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b8e:	4770      	bx	lr
 8000b90:	f04f 0000 	mov.w	r0, #0
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop

08000b98 <__aeabi_d2f>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ba0:	bf24      	itt	cs
 8000ba2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ba6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000baa:	d90d      	bls.n	8000bc8 <__aeabi_d2f+0x30>
 8000bac:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bb0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bb4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bb8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bbc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bc0:	bf08      	it	eq
 8000bc2:	f020 0001 	biceq.w	r0, r0, #1
 8000bc6:	4770      	bx	lr
 8000bc8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bcc:	d121      	bne.n	8000c12 <__aeabi_d2f+0x7a>
 8000bce:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bd2:	bfbc      	itt	lt
 8000bd4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	4770      	bxlt	lr
 8000bda:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bde:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000be2:	f1c2 0218 	rsb	r2, r2, #24
 8000be6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bea:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bee:	fa20 f002 	lsr.w	r0, r0, r2
 8000bf2:	bf18      	it	ne
 8000bf4:	f040 0001 	orrne.w	r0, r0, #1
 8000bf8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bfc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c00:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c04:	ea40 000c 	orr.w	r0, r0, ip
 8000c08:	fa23 f302 	lsr.w	r3, r3, r2
 8000c0c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c10:	e7cc      	b.n	8000bac <__aeabi_d2f+0x14>
 8000c12:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c16:	d107      	bne.n	8000c28 <__aeabi_d2f+0x90>
 8000c18:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c1c:	bf1e      	ittt	ne
 8000c1e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c22:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c26:	4770      	bxne	lr
 8000c28:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c2c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c30:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c34:	4770      	bx	lr
 8000c36:	bf00      	nop

08000c38 <__aeabi_uldivmod>:
 8000c38:	b953      	cbnz	r3, 8000c50 <__aeabi_uldivmod+0x18>
 8000c3a:	b94a      	cbnz	r2, 8000c50 <__aeabi_uldivmod+0x18>
 8000c3c:	2900      	cmp	r1, #0
 8000c3e:	bf08      	it	eq
 8000c40:	2800      	cmpeq	r0, #0
 8000c42:	bf1c      	itt	ne
 8000c44:	f04f 31ff 	movne.w	r1, #4294967295
 8000c48:	f04f 30ff 	movne.w	r0, #4294967295
 8000c4c:	f000 b972 	b.w	8000f34 <__aeabi_idiv0>
 8000c50:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c54:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c58:	f000 f806 	bl	8000c68 <__udivmoddi4>
 8000c5c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c60:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c64:	b004      	add	sp, #16
 8000c66:	4770      	bx	lr

08000c68 <__udivmoddi4>:
 8000c68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c6c:	9e08      	ldr	r6, [sp, #32]
 8000c6e:	4604      	mov	r4, r0
 8000c70:	4688      	mov	r8, r1
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d14b      	bne.n	8000d0e <__udivmoddi4+0xa6>
 8000c76:	428a      	cmp	r2, r1
 8000c78:	4615      	mov	r5, r2
 8000c7a:	d967      	bls.n	8000d4c <__udivmoddi4+0xe4>
 8000c7c:	fab2 f282 	clz	r2, r2
 8000c80:	b14a      	cbz	r2, 8000c96 <__udivmoddi4+0x2e>
 8000c82:	f1c2 0720 	rsb	r7, r2, #32
 8000c86:	fa01 f302 	lsl.w	r3, r1, r2
 8000c8a:	fa20 f707 	lsr.w	r7, r0, r7
 8000c8e:	4095      	lsls	r5, r2
 8000c90:	ea47 0803 	orr.w	r8, r7, r3
 8000c94:	4094      	lsls	r4, r2
 8000c96:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c9a:	0c23      	lsrs	r3, r4, #16
 8000c9c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000ca0:	fa1f fc85 	uxth.w	ip, r5
 8000ca4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000ca8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cac:	fb07 f10c 	mul.w	r1, r7, ip
 8000cb0:	4299      	cmp	r1, r3
 8000cb2:	d909      	bls.n	8000cc8 <__udivmoddi4+0x60>
 8000cb4:	18eb      	adds	r3, r5, r3
 8000cb6:	f107 30ff 	add.w	r0, r7, #4294967295
 8000cba:	f080 811b 	bcs.w	8000ef4 <__udivmoddi4+0x28c>
 8000cbe:	4299      	cmp	r1, r3
 8000cc0:	f240 8118 	bls.w	8000ef4 <__udivmoddi4+0x28c>
 8000cc4:	3f02      	subs	r7, #2
 8000cc6:	442b      	add	r3, r5
 8000cc8:	1a5b      	subs	r3, r3, r1
 8000cca:	b2a4      	uxth	r4, r4
 8000ccc:	fbb3 f0fe 	udiv	r0, r3, lr
 8000cd0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000cd4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cd8:	fb00 fc0c 	mul.w	ip, r0, ip
 8000cdc:	45a4      	cmp	ip, r4
 8000cde:	d909      	bls.n	8000cf4 <__udivmoddi4+0x8c>
 8000ce0:	192c      	adds	r4, r5, r4
 8000ce2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ce6:	f080 8107 	bcs.w	8000ef8 <__udivmoddi4+0x290>
 8000cea:	45a4      	cmp	ip, r4
 8000cec:	f240 8104 	bls.w	8000ef8 <__udivmoddi4+0x290>
 8000cf0:	3802      	subs	r0, #2
 8000cf2:	442c      	add	r4, r5
 8000cf4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000cf8:	eba4 040c 	sub.w	r4, r4, ip
 8000cfc:	2700      	movs	r7, #0
 8000cfe:	b11e      	cbz	r6, 8000d08 <__udivmoddi4+0xa0>
 8000d00:	40d4      	lsrs	r4, r2
 8000d02:	2300      	movs	r3, #0
 8000d04:	e9c6 4300 	strd	r4, r3, [r6]
 8000d08:	4639      	mov	r1, r7
 8000d0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d0e:	428b      	cmp	r3, r1
 8000d10:	d909      	bls.n	8000d26 <__udivmoddi4+0xbe>
 8000d12:	2e00      	cmp	r6, #0
 8000d14:	f000 80eb 	beq.w	8000eee <__udivmoddi4+0x286>
 8000d18:	2700      	movs	r7, #0
 8000d1a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d1e:	4638      	mov	r0, r7
 8000d20:	4639      	mov	r1, r7
 8000d22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d26:	fab3 f783 	clz	r7, r3
 8000d2a:	2f00      	cmp	r7, #0
 8000d2c:	d147      	bne.n	8000dbe <__udivmoddi4+0x156>
 8000d2e:	428b      	cmp	r3, r1
 8000d30:	d302      	bcc.n	8000d38 <__udivmoddi4+0xd0>
 8000d32:	4282      	cmp	r2, r0
 8000d34:	f200 80fa 	bhi.w	8000f2c <__udivmoddi4+0x2c4>
 8000d38:	1a84      	subs	r4, r0, r2
 8000d3a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d3e:	2001      	movs	r0, #1
 8000d40:	4698      	mov	r8, r3
 8000d42:	2e00      	cmp	r6, #0
 8000d44:	d0e0      	beq.n	8000d08 <__udivmoddi4+0xa0>
 8000d46:	e9c6 4800 	strd	r4, r8, [r6]
 8000d4a:	e7dd      	b.n	8000d08 <__udivmoddi4+0xa0>
 8000d4c:	b902      	cbnz	r2, 8000d50 <__udivmoddi4+0xe8>
 8000d4e:	deff      	udf	#255	; 0xff
 8000d50:	fab2 f282 	clz	r2, r2
 8000d54:	2a00      	cmp	r2, #0
 8000d56:	f040 808f 	bne.w	8000e78 <__udivmoddi4+0x210>
 8000d5a:	1b49      	subs	r1, r1, r5
 8000d5c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d60:	fa1f f885 	uxth.w	r8, r5
 8000d64:	2701      	movs	r7, #1
 8000d66:	fbb1 fcfe 	udiv	ip, r1, lr
 8000d6a:	0c23      	lsrs	r3, r4, #16
 8000d6c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000d70:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d74:	fb08 f10c 	mul.w	r1, r8, ip
 8000d78:	4299      	cmp	r1, r3
 8000d7a:	d907      	bls.n	8000d8c <__udivmoddi4+0x124>
 8000d7c:	18eb      	adds	r3, r5, r3
 8000d7e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d82:	d202      	bcs.n	8000d8a <__udivmoddi4+0x122>
 8000d84:	4299      	cmp	r1, r3
 8000d86:	f200 80cd 	bhi.w	8000f24 <__udivmoddi4+0x2bc>
 8000d8a:	4684      	mov	ip, r0
 8000d8c:	1a59      	subs	r1, r3, r1
 8000d8e:	b2a3      	uxth	r3, r4
 8000d90:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d94:	fb0e 1410 	mls	r4, lr, r0, r1
 8000d98:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d9c:	fb08 f800 	mul.w	r8, r8, r0
 8000da0:	45a0      	cmp	r8, r4
 8000da2:	d907      	bls.n	8000db4 <__udivmoddi4+0x14c>
 8000da4:	192c      	adds	r4, r5, r4
 8000da6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000daa:	d202      	bcs.n	8000db2 <__udivmoddi4+0x14a>
 8000dac:	45a0      	cmp	r8, r4
 8000dae:	f200 80b6 	bhi.w	8000f1e <__udivmoddi4+0x2b6>
 8000db2:	4618      	mov	r0, r3
 8000db4:	eba4 0408 	sub.w	r4, r4, r8
 8000db8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000dbc:	e79f      	b.n	8000cfe <__udivmoddi4+0x96>
 8000dbe:	f1c7 0c20 	rsb	ip, r7, #32
 8000dc2:	40bb      	lsls	r3, r7
 8000dc4:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000dc8:	ea4e 0e03 	orr.w	lr, lr, r3
 8000dcc:	fa01 f407 	lsl.w	r4, r1, r7
 8000dd0:	fa20 f50c 	lsr.w	r5, r0, ip
 8000dd4:	fa21 f30c 	lsr.w	r3, r1, ip
 8000dd8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000ddc:	4325      	orrs	r5, r4
 8000dde:	fbb3 f9f8 	udiv	r9, r3, r8
 8000de2:	0c2c      	lsrs	r4, r5, #16
 8000de4:	fb08 3319 	mls	r3, r8, r9, r3
 8000de8:	fa1f fa8e 	uxth.w	sl, lr
 8000dec:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000df0:	fb09 f40a 	mul.w	r4, r9, sl
 8000df4:	429c      	cmp	r4, r3
 8000df6:	fa02 f207 	lsl.w	r2, r2, r7
 8000dfa:	fa00 f107 	lsl.w	r1, r0, r7
 8000dfe:	d90b      	bls.n	8000e18 <__udivmoddi4+0x1b0>
 8000e00:	eb1e 0303 	adds.w	r3, lr, r3
 8000e04:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e08:	f080 8087 	bcs.w	8000f1a <__udivmoddi4+0x2b2>
 8000e0c:	429c      	cmp	r4, r3
 8000e0e:	f240 8084 	bls.w	8000f1a <__udivmoddi4+0x2b2>
 8000e12:	f1a9 0902 	sub.w	r9, r9, #2
 8000e16:	4473      	add	r3, lr
 8000e18:	1b1b      	subs	r3, r3, r4
 8000e1a:	b2ad      	uxth	r5, r5
 8000e1c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e20:	fb08 3310 	mls	r3, r8, r0, r3
 8000e24:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e28:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e2c:	45a2      	cmp	sl, r4
 8000e2e:	d908      	bls.n	8000e42 <__udivmoddi4+0x1da>
 8000e30:	eb1e 0404 	adds.w	r4, lr, r4
 8000e34:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e38:	d26b      	bcs.n	8000f12 <__udivmoddi4+0x2aa>
 8000e3a:	45a2      	cmp	sl, r4
 8000e3c:	d969      	bls.n	8000f12 <__udivmoddi4+0x2aa>
 8000e3e:	3802      	subs	r0, #2
 8000e40:	4474      	add	r4, lr
 8000e42:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e46:	fba0 8902 	umull	r8, r9, r0, r2
 8000e4a:	eba4 040a 	sub.w	r4, r4, sl
 8000e4e:	454c      	cmp	r4, r9
 8000e50:	46c2      	mov	sl, r8
 8000e52:	464b      	mov	r3, r9
 8000e54:	d354      	bcc.n	8000f00 <__udivmoddi4+0x298>
 8000e56:	d051      	beq.n	8000efc <__udivmoddi4+0x294>
 8000e58:	2e00      	cmp	r6, #0
 8000e5a:	d069      	beq.n	8000f30 <__udivmoddi4+0x2c8>
 8000e5c:	ebb1 050a 	subs.w	r5, r1, sl
 8000e60:	eb64 0403 	sbc.w	r4, r4, r3
 8000e64:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000e68:	40fd      	lsrs	r5, r7
 8000e6a:	40fc      	lsrs	r4, r7
 8000e6c:	ea4c 0505 	orr.w	r5, ip, r5
 8000e70:	e9c6 5400 	strd	r5, r4, [r6]
 8000e74:	2700      	movs	r7, #0
 8000e76:	e747      	b.n	8000d08 <__udivmoddi4+0xa0>
 8000e78:	f1c2 0320 	rsb	r3, r2, #32
 8000e7c:	fa20 f703 	lsr.w	r7, r0, r3
 8000e80:	4095      	lsls	r5, r2
 8000e82:	fa01 f002 	lsl.w	r0, r1, r2
 8000e86:	fa21 f303 	lsr.w	r3, r1, r3
 8000e8a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e8e:	4338      	orrs	r0, r7
 8000e90:	0c01      	lsrs	r1, r0, #16
 8000e92:	fbb3 f7fe 	udiv	r7, r3, lr
 8000e96:	fa1f f885 	uxth.w	r8, r5
 8000e9a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000e9e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ea2:	fb07 f308 	mul.w	r3, r7, r8
 8000ea6:	428b      	cmp	r3, r1
 8000ea8:	fa04 f402 	lsl.w	r4, r4, r2
 8000eac:	d907      	bls.n	8000ebe <__udivmoddi4+0x256>
 8000eae:	1869      	adds	r1, r5, r1
 8000eb0:	f107 3cff 	add.w	ip, r7, #4294967295
 8000eb4:	d22f      	bcs.n	8000f16 <__udivmoddi4+0x2ae>
 8000eb6:	428b      	cmp	r3, r1
 8000eb8:	d92d      	bls.n	8000f16 <__udivmoddi4+0x2ae>
 8000eba:	3f02      	subs	r7, #2
 8000ebc:	4429      	add	r1, r5
 8000ebe:	1acb      	subs	r3, r1, r3
 8000ec0:	b281      	uxth	r1, r0
 8000ec2:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ec6:	fb0e 3310 	mls	r3, lr, r0, r3
 8000eca:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ece:	fb00 f308 	mul.w	r3, r0, r8
 8000ed2:	428b      	cmp	r3, r1
 8000ed4:	d907      	bls.n	8000ee6 <__udivmoddi4+0x27e>
 8000ed6:	1869      	adds	r1, r5, r1
 8000ed8:	f100 3cff 	add.w	ip, r0, #4294967295
 8000edc:	d217      	bcs.n	8000f0e <__udivmoddi4+0x2a6>
 8000ede:	428b      	cmp	r3, r1
 8000ee0:	d915      	bls.n	8000f0e <__udivmoddi4+0x2a6>
 8000ee2:	3802      	subs	r0, #2
 8000ee4:	4429      	add	r1, r5
 8000ee6:	1ac9      	subs	r1, r1, r3
 8000ee8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000eec:	e73b      	b.n	8000d66 <__udivmoddi4+0xfe>
 8000eee:	4637      	mov	r7, r6
 8000ef0:	4630      	mov	r0, r6
 8000ef2:	e709      	b.n	8000d08 <__udivmoddi4+0xa0>
 8000ef4:	4607      	mov	r7, r0
 8000ef6:	e6e7      	b.n	8000cc8 <__udivmoddi4+0x60>
 8000ef8:	4618      	mov	r0, r3
 8000efa:	e6fb      	b.n	8000cf4 <__udivmoddi4+0x8c>
 8000efc:	4541      	cmp	r1, r8
 8000efe:	d2ab      	bcs.n	8000e58 <__udivmoddi4+0x1f0>
 8000f00:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f04:	eb69 020e 	sbc.w	r2, r9, lr
 8000f08:	3801      	subs	r0, #1
 8000f0a:	4613      	mov	r3, r2
 8000f0c:	e7a4      	b.n	8000e58 <__udivmoddi4+0x1f0>
 8000f0e:	4660      	mov	r0, ip
 8000f10:	e7e9      	b.n	8000ee6 <__udivmoddi4+0x27e>
 8000f12:	4618      	mov	r0, r3
 8000f14:	e795      	b.n	8000e42 <__udivmoddi4+0x1da>
 8000f16:	4667      	mov	r7, ip
 8000f18:	e7d1      	b.n	8000ebe <__udivmoddi4+0x256>
 8000f1a:	4681      	mov	r9, r0
 8000f1c:	e77c      	b.n	8000e18 <__udivmoddi4+0x1b0>
 8000f1e:	3802      	subs	r0, #2
 8000f20:	442c      	add	r4, r5
 8000f22:	e747      	b.n	8000db4 <__udivmoddi4+0x14c>
 8000f24:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f28:	442b      	add	r3, r5
 8000f2a:	e72f      	b.n	8000d8c <__udivmoddi4+0x124>
 8000f2c:	4638      	mov	r0, r7
 8000f2e:	e708      	b.n	8000d42 <__udivmoddi4+0xda>
 8000f30:	4637      	mov	r7, r6
 8000f32:	e6e9      	b.n	8000d08 <__udivmoddi4+0xa0>

08000f34 <__aeabi_idiv0>:
 8000f34:	4770      	bx	lr
 8000f36:	bf00      	nop

08000f38 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f3c:	4b0e      	ldr	r3, [pc, #56]	; (8000f78 <HAL_Init+0x40>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	4a0d      	ldr	r2, [pc, #52]	; (8000f78 <HAL_Init+0x40>)
 8000f42:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f46:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f48:	4b0b      	ldr	r3, [pc, #44]	; (8000f78 <HAL_Init+0x40>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	4a0a      	ldr	r2, [pc, #40]	; (8000f78 <HAL_Init+0x40>)
 8000f4e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f52:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f54:	4b08      	ldr	r3, [pc, #32]	; (8000f78 <HAL_Init+0x40>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	4a07      	ldr	r2, [pc, #28]	; (8000f78 <HAL_Init+0x40>)
 8000f5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f5e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f60:	2003      	movs	r0, #3
 8000f62:	f000 fd07 	bl	8001974 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f66:	2000      	movs	r0, #0
 8000f68:	f000 f808 	bl	8000f7c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f6c:	f00f f960 	bl	8010230 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f70:	2300      	movs	r3, #0
}
 8000f72:	4618      	mov	r0, r3
 8000f74:	bd80      	pop	{r7, pc}
 8000f76:	bf00      	nop
 8000f78:	40023c00 	.word	0x40023c00

08000f7c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b082      	sub	sp, #8
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f84:	4b12      	ldr	r3, [pc, #72]	; (8000fd0 <HAL_InitTick+0x54>)
 8000f86:	681a      	ldr	r2, [r3, #0]
 8000f88:	4b12      	ldr	r3, [pc, #72]	; (8000fd4 <HAL_InitTick+0x58>)
 8000f8a:	781b      	ldrb	r3, [r3, #0]
 8000f8c:	4619      	mov	r1, r3
 8000f8e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f92:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f96:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	f000 fd1f 	bl	80019de <HAL_SYSTICK_Config>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d001      	beq.n	8000faa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	e00e      	b.n	8000fc8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	2b0f      	cmp	r3, #15
 8000fae:	d80a      	bhi.n	8000fc6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	6879      	ldr	r1, [r7, #4]
 8000fb4:	f04f 30ff 	mov.w	r0, #4294967295
 8000fb8:	f000 fce7 	bl	800198a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fbc:	4a06      	ldr	r2, [pc, #24]	; (8000fd8 <HAL_InitTick+0x5c>)
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	e000      	b.n	8000fc8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000fc6:	2301      	movs	r3, #1
}
 8000fc8:	4618      	mov	r0, r3
 8000fca:	3708      	adds	r7, #8
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd80      	pop	{r7, pc}
 8000fd0:	20000080 	.word	0x20000080
 8000fd4:	20000004 	.word	0x20000004
 8000fd8:	20000000 	.word	0x20000000

08000fdc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fe0:	4b06      	ldr	r3, [pc, #24]	; (8000ffc <HAL_IncTick+0x20>)
 8000fe2:	781b      	ldrb	r3, [r3, #0]
 8000fe4:	461a      	mov	r2, r3
 8000fe6:	4b06      	ldr	r3, [pc, #24]	; (8001000 <HAL_IncTick+0x24>)
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	4413      	add	r3, r2
 8000fec:	4a04      	ldr	r2, [pc, #16]	; (8001000 <HAL_IncTick+0x24>)
 8000fee:	6013      	str	r3, [r2, #0]
}
 8000ff0:	bf00      	nop
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff8:	4770      	bx	lr
 8000ffa:	bf00      	nop
 8000ffc:	20000004 	.word	0x20000004
 8001000:	20000120 	.word	0x20000120

08001004 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001004:	b480      	push	{r7}
 8001006:	af00      	add	r7, sp, #0
  return uwTick;
 8001008:	4b03      	ldr	r3, [pc, #12]	; (8001018 <HAL_GetTick+0x14>)
 800100a:	681b      	ldr	r3, [r3, #0]
}
 800100c:	4618      	mov	r0, r3
 800100e:	46bd      	mov	sp, r7
 8001010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop
 8001018:	20000120 	.word	0x20000120

0800101c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b084      	sub	sp, #16
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001024:	f7ff ffee 	bl	8001004 <HAL_GetTick>
 8001028:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001034:	d005      	beq.n	8001042 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001036:	4b09      	ldr	r3, [pc, #36]	; (800105c <HAL_Delay+0x40>)
 8001038:	781b      	ldrb	r3, [r3, #0]
 800103a:	461a      	mov	r2, r3
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	4413      	add	r3, r2
 8001040:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001042:	bf00      	nop
 8001044:	f7ff ffde 	bl	8001004 <HAL_GetTick>
 8001048:	4602      	mov	r2, r0
 800104a:	68bb      	ldr	r3, [r7, #8]
 800104c:	1ad3      	subs	r3, r2, r3
 800104e:	68fa      	ldr	r2, [r7, #12]
 8001050:	429a      	cmp	r2, r3
 8001052:	d8f7      	bhi.n	8001044 <HAL_Delay+0x28>
  {
  }
}
 8001054:	bf00      	nop
 8001056:	3710      	adds	r7, #16
 8001058:	46bd      	mov	sp, r7
 800105a:	bd80      	pop	{r7, pc}
 800105c:	20000004 	.word	0x20000004

08001060 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b084      	sub	sp, #16
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001068:	2300      	movs	r3, #0
 800106a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	2b00      	cmp	r3, #0
 8001070:	d101      	bne.n	8001076 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001072:	2301      	movs	r3, #1
 8001074:	e033      	b.n	80010de <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800107a:	2b00      	cmp	r3, #0
 800107c:	d109      	bne.n	8001092 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800107e:	6878      	ldr	r0, [r7, #4]
 8001080:	f00f f8fe 	bl	8010280 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	2200      	movs	r2, #0
 8001088:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	2200      	movs	r2, #0
 800108e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001096:	f003 0310 	and.w	r3, r3, #16
 800109a:	2b00      	cmp	r3, #0
 800109c:	d118      	bne.n	80010d0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010a2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80010a6:	f023 0302 	bic.w	r3, r3, #2
 80010aa:	f043 0202 	orr.w	r2, r3, #2
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80010b2:	6878      	ldr	r0, [r7, #4]
 80010b4:	f000 fa92 	bl	80015dc <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	2200      	movs	r2, #0
 80010bc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010c2:	f023 0303 	bic.w	r3, r3, #3
 80010c6:	f043 0201 	orr.w	r2, r3, #1
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	641a      	str	r2, [r3, #64]	; 0x40
 80010ce:	e001      	b.n	80010d4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80010d0:	2301      	movs	r3, #1
 80010d2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	2200      	movs	r2, #0
 80010d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80010dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80010de:	4618      	mov	r0, r3
 80010e0:	3710      	adds	r7, #16
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}
	...

080010e8 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80010e8:	b480      	push	{r7}
 80010ea:	b085      	sub	sp, #20
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80010f0:	2300      	movs	r3, #0
 80010f2:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80010fa:	2b01      	cmp	r3, #1
 80010fc:	d101      	bne.n	8001102 <HAL_ADC_Start+0x1a>
 80010fe:	2302      	movs	r3, #2
 8001100:	e0a5      	b.n	800124e <HAL_ADC_Start+0x166>
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	2201      	movs	r2, #1
 8001106:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	689b      	ldr	r3, [r3, #8]
 8001110:	f003 0301 	and.w	r3, r3, #1
 8001114:	2b01      	cmp	r3, #1
 8001116:	d018      	beq.n	800114a <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	689a      	ldr	r2, [r3, #8]
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	f042 0201 	orr.w	r2, r2, #1
 8001126:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001128:	4b4c      	ldr	r3, [pc, #304]	; (800125c <HAL_ADC_Start+0x174>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	4a4c      	ldr	r2, [pc, #304]	; (8001260 <HAL_ADC_Start+0x178>)
 800112e:	fba2 2303 	umull	r2, r3, r2, r3
 8001132:	0c9a      	lsrs	r2, r3, #18
 8001134:	4613      	mov	r3, r2
 8001136:	005b      	lsls	r3, r3, #1
 8001138:	4413      	add	r3, r2
 800113a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 800113c:	e002      	b.n	8001144 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800113e:	68bb      	ldr	r3, [r7, #8]
 8001140:	3b01      	subs	r3, #1
 8001142:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001144:	68bb      	ldr	r3, [r7, #8]
 8001146:	2b00      	cmp	r3, #0
 8001148:	d1f9      	bne.n	800113e <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	689b      	ldr	r3, [r3, #8]
 8001150:	f003 0301 	and.w	r3, r3, #1
 8001154:	2b01      	cmp	r3, #1
 8001156:	d179      	bne.n	800124c <HAL_ADC_Start+0x164>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800115c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001160:	f023 0301 	bic.w	r3, r3, #1
 8001164:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	685b      	ldr	r3, [r3, #4]
 8001172:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001176:	2b00      	cmp	r3, #0
 8001178:	d007      	beq.n	800118a <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800117e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001182:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800118e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001192:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001196:	d106      	bne.n	80011a6 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800119c:	f023 0206 	bic.w	r2, r3, #6
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	645a      	str	r2, [r3, #68]	; 0x44
 80011a4:	e002      	b.n	80011ac <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	2200      	movs	r2, #0
 80011aa:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	2200      	movs	r2, #0
 80011b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80011b4:	4b2b      	ldr	r3, [pc, #172]	; (8001264 <HAL_ADC_Start+0x17c>)
 80011b6:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80011c0:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	685b      	ldr	r3, [r3, #4]
 80011c6:	f003 031f 	and.w	r3, r3, #31
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d12a      	bne.n	8001224 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	4a25      	ldr	r2, [pc, #148]	; (8001268 <HAL_ADC_Start+0x180>)
 80011d4:	4293      	cmp	r3, r2
 80011d6:	d015      	beq.n	8001204 <HAL_ADC_Start+0x11c>
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	4a23      	ldr	r2, [pc, #140]	; (800126c <HAL_ADC_Start+0x184>)
 80011de:	4293      	cmp	r3, r2
 80011e0:	d105      	bne.n	80011ee <HAL_ADC_Start+0x106>
 80011e2:	4b20      	ldr	r3, [pc, #128]	; (8001264 <HAL_ADC_Start+0x17c>)
 80011e4:	685b      	ldr	r3, [r3, #4]
 80011e6:	f003 031f 	and.w	r3, r3, #31
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d00a      	beq.n	8001204 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	4a1f      	ldr	r2, [pc, #124]	; (8001270 <HAL_ADC_Start+0x188>)
 80011f4:	4293      	cmp	r3, r2
 80011f6:	d129      	bne.n	800124c <HAL_ADC_Start+0x164>
 80011f8:	4b1a      	ldr	r3, [pc, #104]	; (8001264 <HAL_ADC_Start+0x17c>)
 80011fa:	685b      	ldr	r3, [r3, #4]
 80011fc:	f003 031f 	and.w	r3, r3, #31
 8001200:	2b0f      	cmp	r3, #15
 8001202:	d823      	bhi.n	800124c <HAL_ADC_Start+0x164>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	689b      	ldr	r3, [r3, #8]
 800120a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800120e:	2b00      	cmp	r3, #0
 8001210:	d11c      	bne.n	800124c <HAL_ADC_Start+0x164>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	689a      	ldr	r2, [r3, #8]
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001220:	609a      	str	r2, [r3, #8]
 8001222:	e013      	b.n	800124c <HAL_ADC_Start+0x164>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	4a0f      	ldr	r2, [pc, #60]	; (8001268 <HAL_ADC_Start+0x180>)
 800122a:	4293      	cmp	r3, r2
 800122c:	d10e      	bne.n	800124c <HAL_ADC_Start+0x164>
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	689b      	ldr	r3, [r3, #8]
 8001234:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001238:	2b00      	cmp	r3, #0
 800123a:	d107      	bne.n	800124c <HAL_ADC_Start+0x164>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	689a      	ldr	r2, [r3, #8]
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800124a:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 800124c:	2300      	movs	r3, #0
}
 800124e:	4618      	mov	r0, r3
 8001250:	3714      	adds	r7, #20
 8001252:	46bd      	mov	sp, r7
 8001254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001258:	4770      	bx	lr
 800125a:	bf00      	nop
 800125c:	20000080 	.word	0x20000080
 8001260:	431bde83 	.word	0x431bde83
 8001264:	40012300 	.word	0x40012300
 8001268:	40012000 	.word	0x40012000
 800126c:	40012100 	.word	0x40012100
 8001270:	40012200 	.word	0x40012200

08001274 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b084      	sub	sp, #16
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
 800127c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800127e:	2300      	movs	r3, #0
 8001280:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	689b      	ldr	r3, [r3, #8]
 8001288:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800128c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001290:	d113      	bne.n	80012ba <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	689b      	ldr	r3, [r3, #8]
 8001298:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800129c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80012a0:	d10b      	bne.n	80012ba <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012a6:	f043 0220 	orr.w	r2, r3, #32
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	2200      	movs	r2, #0
 80012b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 80012b6:	2301      	movs	r3, #1
 80012b8:	e05c      	b.n	8001374 <HAL_ADC_PollForConversion+0x100>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 80012ba:	f7ff fea3 	bl	8001004 <HAL_GetTick>
 80012be:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80012c0:	e01a      	b.n	80012f8 <HAL_ADC_PollForConversion+0x84>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80012c2:	683b      	ldr	r3, [r7, #0]
 80012c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012c8:	d016      	beq.n	80012f8 <HAL_ADC_PollForConversion+0x84>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d007      	beq.n	80012e0 <HAL_ADC_PollForConversion+0x6c>
 80012d0:	f7ff fe98 	bl	8001004 <HAL_GetTick>
 80012d4:	4602      	mov	r2, r0
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	1ad3      	subs	r3, r2, r3
 80012da:	683a      	ldr	r2, [r7, #0]
 80012dc:	429a      	cmp	r2, r3
 80012de:	d20b      	bcs.n	80012f8 <HAL_ADC_PollForConversion+0x84>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012e4:	f043 0204 	orr.w	r2, r3, #4
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	2200      	movs	r2, #0
 80012f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 80012f4:	2303      	movs	r3, #3
 80012f6:	e03d      	b.n	8001374 <HAL_ADC_PollForConversion+0x100>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	f003 0302 	and.w	r3, r3, #2
 8001302:	2b02      	cmp	r3, #2
 8001304:	d1dd      	bne.n	80012c2 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f06f 0212 	mvn.w	r2, #18
 800130e:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001314:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	689b      	ldr	r3, [r3, #8]
 8001322:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001326:	2b00      	cmp	r3, #0
 8001328:	d123      	bne.n	8001372 <HAL_ADC_PollForConversion+0xfe>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800132e:	2b00      	cmp	r3, #0
 8001330:	d11f      	bne.n	8001372 <HAL_ADC_PollForConversion+0xfe>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001338:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800133c:	2b00      	cmp	r3, #0
 800133e:	d006      	beq.n	800134e <HAL_ADC_PollForConversion+0xda>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	689b      	ldr	r3, [r3, #8]
 8001346:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800134a:	2b00      	cmp	r3, #0
 800134c:	d111      	bne.n	8001372 <HAL_ADC_PollForConversion+0xfe>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001352:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800135e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001362:	2b00      	cmp	r3, #0
 8001364:	d105      	bne.n	8001372 <HAL_ADC_PollForConversion+0xfe>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800136a:	f043 0201 	orr.w	r2, r3, #1
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001372:	2300      	movs	r3, #0
}
 8001374:	4618      	mov	r0, r3
 8001376:	3710      	adds	r7, #16
 8001378:	46bd      	mov	sp, r7
 800137a:	bd80      	pop	{r7, pc}

0800137c <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 800137c:	b480      	push	{r7}
 800137e:	b083      	sub	sp, #12
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800138a:	4618      	mov	r0, r3
 800138c:	370c      	adds	r7, #12
 800138e:	46bd      	mov	sp, r7
 8001390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001394:	4770      	bx	lr
	...

08001398 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001398:	b480      	push	{r7}
 800139a:	b085      	sub	sp, #20
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
 80013a0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80013a2:	2300      	movs	r3, #0
 80013a4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80013ac:	2b01      	cmp	r3, #1
 80013ae:	d101      	bne.n	80013b4 <HAL_ADC_ConfigChannel+0x1c>
 80013b0:	2302      	movs	r3, #2
 80013b2:	e105      	b.n	80015c0 <HAL_ADC_ConfigChannel+0x228>
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	2201      	movs	r2, #1
 80013b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	2b09      	cmp	r3, #9
 80013c2:	d925      	bls.n	8001410 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	68d9      	ldr	r1, [r3, #12]
 80013ca:	683b      	ldr	r3, [r7, #0]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	b29b      	uxth	r3, r3
 80013d0:	461a      	mov	r2, r3
 80013d2:	4613      	mov	r3, r2
 80013d4:	005b      	lsls	r3, r3, #1
 80013d6:	4413      	add	r3, r2
 80013d8:	3b1e      	subs	r3, #30
 80013da:	2207      	movs	r2, #7
 80013dc:	fa02 f303 	lsl.w	r3, r2, r3
 80013e0:	43da      	mvns	r2, r3
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	400a      	ands	r2, r1
 80013e8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	68d9      	ldr	r1, [r3, #12]
 80013f0:	683b      	ldr	r3, [r7, #0]
 80013f2:	689a      	ldr	r2, [r3, #8]
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	b29b      	uxth	r3, r3
 80013fa:	4618      	mov	r0, r3
 80013fc:	4603      	mov	r3, r0
 80013fe:	005b      	lsls	r3, r3, #1
 8001400:	4403      	add	r3, r0
 8001402:	3b1e      	subs	r3, #30
 8001404:	409a      	lsls	r2, r3
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	430a      	orrs	r2, r1
 800140c:	60da      	str	r2, [r3, #12]
 800140e:	e022      	b.n	8001456 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	6919      	ldr	r1, [r3, #16]
 8001416:	683b      	ldr	r3, [r7, #0]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	b29b      	uxth	r3, r3
 800141c:	461a      	mov	r2, r3
 800141e:	4613      	mov	r3, r2
 8001420:	005b      	lsls	r3, r3, #1
 8001422:	4413      	add	r3, r2
 8001424:	2207      	movs	r2, #7
 8001426:	fa02 f303 	lsl.w	r3, r2, r3
 800142a:	43da      	mvns	r2, r3
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	400a      	ands	r2, r1
 8001432:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	6919      	ldr	r1, [r3, #16]
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	689a      	ldr	r2, [r3, #8]
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	b29b      	uxth	r3, r3
 8001444:	4618      	mov	r0, r3
 8001446:	4603      	mov	r3, r0
 8001448:	005b      	lsls	r3, r3, #1
 800144a:	4403      	add	r3, r0
 800144c:	409a      	lsls	r2, r3
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	430a      	orrs	r2, r1
 8001454:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	685b      	ldr	r3, [r3, #4]
 800145a:	2b06      	cmp	r3, #6
 800145c:	d824      	bhi.n	80014a8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	685a      	ldr	r2, [r3, #4]
 8001468:	4613      	mov	r3, r2
 800146a:	009b      	lsls	r3, r3, #2
 800146c:	4413      	add	r3, r2
 800146e:	3b05      	subs	r3, #5
 8001470:	221f      	movs	r2, #31
 8001472:	fa02 f303 	lsl.w	r3, r2, r3
 8001476:	43da      	mvns	r2, r3
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	400a      	ands	r2, r1
 800147e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	b29b      	uxth	r3, r3
 800148c:	4618      	mov	r0, r3
 800148e:	683b      	ldr	r3, [r7, #0]
 8001490:	685a      	ldr	r2, [r3, #4]
 8001492:	4613      	mov	r3, r2
 8001494:	009b      	lsls	r3, r3, #2
 8001496:	4413      	add	r3, r2
 8001498:	3b05      	subs	r3, #5
 800149a:	fa00 f203 	lsl.w	r2, r0, r3
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	430a      	orrs	r2, r1
 80014a4:	635a      	str	r2, [r3, #52]	; 0x34
 80014a6:	e04c      	b.n	8001542 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	685b      	ldr	r3, [r3, #4]
 80014ac:	2b0c      	cmp	r3, #12
 80014ae:	d824      	bhi.n	80014fa <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	685a      	ldr	r2, [r3, #4]
 80014ba:	4613      	mov	r3, r2
 80014bc:	009b      	lsls	r3, r3, #2
 80014be:	4413      	add	r3, r2
 80014c0:	3b23      	subs	r3, #35	; 0x23
 80014c2:	221f      	movs	r2, #31
 80014c4:	fa02 f303 	lsl.w	r3, r2, r3
 80014c8:	43da      	mvns	r2, r3
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	400a      	ands	r2, r1
 80014d0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	b29b      	uxth	r3, r3
 80014de:	4618      	mov	r0, r3
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	685a      	ldr	r2, [r3, #4]
 80014e4:	4613      	mov	r3, r2
 80014e6:	009b      	lsls	r3, r3, #2
 80014e8:	4413      	add	r3, r2
 80014ea:	3b23      	subs	r3, #35	; 0x23
 80014ec:	fa00 f203 	lsl.w	r2, r0, r3
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	430a      	orrs	r2, r1
 80014f6:	631a      	str	r2, [r3, #48]	; 0x30
 80014f8:	e023      	b.n	8001542 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	685a      	ldr	r2, [r3, #4]
 8001504:	4613      	mov	r3, r2
 8001506:	009b      	lsls	r3, r3, #2
 8001508:	4413      	add	r3, r2
 800150a:	3b41      	subs	r3, #65	; 0x41
 800150c:	221f      	movs	r2, #31
 800150e:	fa02 f303 	lsl.w	r3, r2, r3
 8001512:	43da      	mvns	r2, r3
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	400a      	ands	r2, r1
 800151a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	b29b      	uxth	r3, r3
 8001528:	4618      	mov	r0, r3
 800152a:	683b      	ldr	r3, [r7, #0]
 800152c:	685a      	ldr	r2, [r3, #4]
 800152e:	4613      	mov	r3, r2
 8001530:	009b      	lsls	r3, r3, #2
 8001532:	4413      	add	r3, r2
 8001534:	3b41      	subs	r3, #65	; 0x41
 8001536:	fa00 f203 	lsl.w	r2, r0, r3
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	430a      	orrs	r2, r1
 8001540:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001542:	4b22      	ldr	r3, [pc, #136]	; (80015cc <HAL_ADC_ConfigChannel+0x234>)
 8001544:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	4a21      	ldr	r2, [pc, #132]	; (80015d0 <HAL_ADC_ConfigChannel+0x238>)
 800154c:	4293      	cmp	r3, r2
 800154e:	d109      	bne.n	8001564 <HAL_ADC_ConfigChannel+0x1cc>
 8001550:	683b      	ldr	r3, [r7, #0]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	2b12      	cmp	r3, #18
 8001556:	d105      	bne.n	8001564 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	685b      	ldr	r3, [r3, #4]
 800155c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	4a19      	ldr	r2, [pc, #100]	; (80015d0 <HAL_ADC_ConfigChannel+0x238>)
 800156a:	4293      	cmp	r3, r2
 800156c:	d123      	bne.n	80015b6 <HAL_ADC_ConfigChannel+0x21e>
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	2b10      	cmp	r3, #16
 8001574:	d003      	beq.n	800157e <HAL_ADC_ConfigChannel+0x1e6>
 8001576:	683b      	ldr	r3, [r7, #0]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	2b11      	cmp	r3, #17
 800157c:	d11b      	bne.n	80015b6 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	685b      	ldr	r3, [r3, #4]
 8001582:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800158a:	683b      	ldr	r3, [r7, #0]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	2b10      	cmp	r3, #16
 8001590:	d111      	bne.n	80015b6 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001592:	4b10      	ldr	r3, [pc, #64]	; (80015d4 <HAL_ADC_ConfigChannel+0x23c>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	4a10      	ldr	r2, [pc, #64]	; (80015d8 <HAL_ADC_ConfigChannel+0x240>)
 8001598:	fba2 2303 	umull	r2, r3, r2, r3
 800159c:	0c9a      	lsrs	r2, r3, #18
 800159e:	4613      	mov	r3, r2
 80015a0:	009b      	lsls	r3, r3, #2
 80015a2:	4413      	add	r3, r2
 80015a4:	005b      	lsls	r3, r3, #1
 80015a6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80015a8:	e002      	b.n	80015b0 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80015aa:	68bb      	ldr	r3, [r7, #8]
 80015ac:	3b01      	subs	r3, #1
 80015ae:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80015b0:	68bb      	ldr	r3, [r7, #8]
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d1f9      	bne.n	80015aa <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	2200      	movs	r2, #0
 80015ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80015be:	2300      	movs	r3, #0
}
 80015c0:	4618      	mov	r0, r3
 80015c2:	3714      	adds	r7, #20
 80015c4:	46bd      	mov	sp, r7
 80015c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ca:	4770      	bx	lr
 80015cc:	40012300 	.word	0x40012300
 80015d0:	40012000 	.word	0x40012000
 80015d4:	20000080 	.word	0x20000080
 80015d8:	431bde83 	.word	0x431bde83

080015dc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80015dc:	b480      	push	{r7}
 80015de:	b085      	sub	sp, #20
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80015e4:	4b79      	ldr	r3, [pc, #484]	; (80017cc <ADC_Init+0x1f0>)
 80015e6:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	685b      	ldr	r3, [r3, #4]
 80015ec:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	685a      	ldr	r2, [r3, #4]
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	685b      	ldr	r3, [r3, #4]
 80015fc:	431a      	orrs	r2, r3
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	685a      	ldr	r2, [r3, #4]
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001610:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	6859      	ldr	r1, [r3, #4]
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	691b      	ldr	r3, [r3, #16]
 800161c:	021a      	lsls	r2, r3, #8
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	430a      	orrs	r2, r1
 8001624:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	685a      	ldr	r2, [r3, #4]
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001634:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	6859      	ldr	r1, [r3, #4]
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	689a      	ldr	r2, [r3, #8]
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	430a      	orrs	r2, r1
 8001646:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	689a      	ldr	r2, [r3, #8]
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001656:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	6899      	ldr	r1, [r3, #8]
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	68da      	ldr	r2, [r3, #12]
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	430a      	orrs	r2, r1
 8001668:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800166e:	4a58      	ldr	r2, [pc, #352]	; (80017d0 <ADC_Init+0x1f4>)
 8001670:	4293      	cmp	r3, r2
 8001672:	d022      	beq.n	80016ba <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	689a      	ldr	r2, [r3, #8]
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001682:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	6899      	ldr	r1, [r3, #8]
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	430a      	orrs	r2, r1
 8001694:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	689a      	ldr	r2, [r3, #8]
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80016a4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	6899      	ldr	r1, [r3, #8]
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	430a      	orrs	r2, r1
 80016b6:	609a      	str	r2, [r3, #8]
 80016b8:	e00f      	b.n	80016da <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	689a      	ldr	r2, [r3, #8]
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80016c8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	689a      	ldr	r2, [r3, #8]
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80016d8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	689a      	ldr	r2, [r3, #8]
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f022 0202 	bic.w	r2, r2, #2
 80016e8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	6899      	ldr	r1, [r3, #8]
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	7e1b      	ldrb	r3, [r3, #24]
 80016f4:	005a      	lsls	r2, r3, #1
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	430a      	orrs	r2, r1
 80016fc:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001704:	2b00      	cmp	r3, #0
 8001706:	d01b      	beq.n	8001740 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	685a      	ldr	r2, [r3, #4]
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001716:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	685a      	ldr	r2, [r3, #4]
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001726:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	6859      	ldr	r1, [r3, #4]
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001732:	3b01      	subs	r3, #1
 8001734:	035a      	lsls	r2, r3, #13
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	430a      	orrs	r2, r1
 800173c:	605a      	str	r2, [r3, #4]
 800173e:	e007      	b.n	8001750 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	685a      	ldr	r2, [r3, #4]
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800174e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800175e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	69db      	ldr	r3, [r3, #28]
 800176a:	3b01      	subs	r3, #1
 800176c:	051a      	lsls	r2, r3, #20
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	430a      	orrs	r2, r1
 8001774:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	689a      	ldr	r2, [r3, #8]
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001784:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	6899      	ldr	r1, [r3, #8]
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001792:	025a      	lsls	r2, r3, #9
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	430a      	orrs	r2, r1
 800179a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	689a      	ldr	r2, [r3, #8]
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80017aa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	6899      	ldr	r1, [r3, #8]
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	695b      	ldr	r3, [r3, #20]
 80017b6:	029a      	lsls	r2, r3, #10
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	430a      	orrs	r2, r1
 80017be:	609a      	str	r2, [r3, #8]
}
 80017c0:	bf00      	nop
 80017c2:	3714      	adds	r7, #20
 80017c4:	46bd      	mov	sp, r7
 80017c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ca:	4770      	bx	lr
 80017cc:	40012300 	.word	0x40012300
 80017d0:	0f000001 	.word	0x0f000001

080017d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017d4:	b480      	push	{r7}
 80017d6:	b085      	sub	sp, #20
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	f003 0307 	and.w	r3, r3, #7
 80017e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017e4:	4b0c      	ldr	r3, [pc, #48]	; (8001818 <__NVIC_SetPriorityGrouping+0x44>)
 80017e6:	68db      	ldr	r3, [r3, #12]
 80017e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017ea:	68ba      	ldr	r2, [r7, #8]
 80017ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017f0:	4013      	ands	r3, r2
 80017f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017f8:	68bb      	ldr	r3, [r7, #8]
 80017fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017fc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001800:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001804:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001806:	4a04      	ldr	r2, [pc, #16]	; (8001818 <__NVIC_SetPriorityGrouping+0x44>)
 8001808:	68bb      	ldr	r3, [r7, #8]
 800180a:	60d3      	str	r3, [r2, #12]
}
 800180c:	bf00      	nop
 800180e:	3714      	adds	r7, #20
 8001810:	46bd      	mov	sp, r7
 8001812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001816:	4770      	bx	lr
 8001818:	e000ed00 	.word	0xe000ed00

0800181c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800181c:	b480      	push	{r7}
 800181e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001820:	4b04      	ldr	r3, [pc, #16]	; (8001834 <__NVIC_GetPriorityGrouping+0x18>)
 8001822:	68db      	ldr	r3, [r3, #12]
 8001824:	0a1b      	lsrs	r3, r3, #8
 8001826:	f003 0307 	and.w	r3, r3, #7
}
 800182a:	4618      	mov	r0, r3
 800182c:	46bd      	mov	sp, r7
 800182e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001832:	4770      	bx	lr
 8001834:	e000ed00 	.word	0xe000ed00

08001838 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001838:	b480      	push	{r7}
 800183a:	b083      	sub	sp, #12
 800183c:	af00      	add	r7, sp, #0
 800183e:	4603      	mov	r3, r0
 8001840:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001842:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001846:	2b00      	cmp	r3, #0
 8001848:	db0b      	blt.n	8001862 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800184a:	79fb      	ldrb	r3, [r7, #7]
 800184c:	f003 021f 	and.w	r2, r3, #31
 8001850:	4907      	ldr	r1, [pc, #28]	; (8001870 <__NVIC_EnableIRQ+0x38>)
 8001852:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001856:	095b      	lsrs	r3, r3, #5
 8001858:	2001      	movs	r0, #1
 800185a:	fa00 f202 	lsl.w	r2, r0, r2
 800185e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001862:	bf00      	nop
 8001864:	370c      	adds	r7, #12
 8001866:	46bd      	mov	sp, r7
 8001868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186c:	4770      	bx	lr
 800186e:	bf00      	nop
 8001870:	e000e100 	.word	0xe000e100

08001874 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001874:	b480      	push	{r7}
 8001876:	b083      	sub	sp, #12
 8001878:	af00      	add	r7, sp, #0
 800187a:	4603      	mov	r3, r0
 800187c:	6039      	str	r1, [r7, #0]
 800187e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001880:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001884:	2b00      	cmp	r3, #0
 8001886:	db0a      	blt.n	800189e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	b2da      	uxtb	r2, r3
 800188c:	490c      	ldr	r1, [pc, #48]	; (80018c0 <__NVIC_SetPriority+0x4c>)
 800188e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001892:	0112      	lsls	r2, r2, #4
 8001894:	b2d2      	uxtb	r2, r2
 8001896:	440b      	add	r3, r1
 8001898:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800189c:	e00a      	b.n	80018b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	b2da      	uxtb	r2, r3
 80018a2:	4908      	ldr	r1, [pc, #32]	; (80018c4 <__NVIC_SetPriority+0x50>)
 80018a4:	79fb      	ldrb	r3, [r7, #7]
 80018a6:	f003 030f 	and.w	r3, r3, #15
 80018aa:	3b04      	subs	r3, #4
 80018ac:	0112      	lsls	r2, r2, #4
 80018ae:	b2d2      	uxtb	r2, r2
 80018b0:	440b      	add	r3, r1
 80018b2:	761a      	strb	r2, [r3, #24]
}
 80018b4:	bf00      	nop
 80018b6:	370c      	adds	r7, #12
 80018b8:	46bd      	mov	sp, r7
 80018ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018be:	4770      	bx	lr
 80018c0:	e000e100 	.word	0xe000e100
 80018c4:	e000ed00 	.word	0xe000ed00

080018c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018c8:	b480      	push	{r7}
 80018ca:	b089      	sub	sp, #36	; 0x24
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	60f8      	str	r0, [r7, #12]
 80018d0:	60b9      	str	r1, [r7, #8]
 80018d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	f003 0307 	and.w	r3, r3, #7
 80018da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018dc:	69fb      	ldr	r3, [r7, #28]
 80018de:	f1c3 0307 	rsb	r3, r3, #7
 80018e2:	2b04      	cmp	r3, #4
 80018e4:	bf28      	it	cs
 80018e6:	2304      	movcs	r3, #4
 80018e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018ea:	69fb      	ldr	r3, [r7, #28]
 80018ec:	3304      	adds	r3, #4
 80018ee:	2b06      	cmp	r3, #6
 80018f0:	d902      	bls.n	80018f8 <NVIC_EncodePriority+0x30>
 80018f2:	69fb      	ldr	r3, [r7, #28]
 80018f4:	3b03      	subs	r3, #3
 80018f6:	e000      	b.n	80018fa <NVIC_EncodePriority+0x32>
 80018f8:	2300      	movs	r3, #0
 80018fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018fc:	f04f 32ff 	mov.w	r2, #4294967295
 8001900:	69bb      	ldr	r3, [r7, #24]
 8001902:	fa02 f303 	lsl.w	r3, r2, r3
 8001906:	43da      	mvns	r2, r3
 8001908:	68bb      	ldr	r3, [r7, #8]
 800190a:	401a      	ands	r2, r3
 800190c:	697b      	ldr	r3, [r7, #20]
 800190e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001910:	f04f 31ff 	mov.w	r1, #4294967295
 8001914:	697b      	ldr	r3, [r7, #20]
 8001916:	fa01 f303 	lsl.w	r3, r1, r3
 800191a:	43d9      	mvns	r1, r3
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001920:	4313      	orrs	r3, r2
         );
}
 8001922:	4618      	mov	r0, r3
 8001924:	3724      	adds	r7, #36	; 0x24
 8001926:	46bd      	mov	sp, r7
 8001928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192c:	4770      	bx	lr
	...

08001930 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b082      	sub	sp, #8
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	3b01      	subs	r3, #1
 800193c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001940:	d301      	bcc.n	8001946 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001942:	2301      	movs	r3, #1
 8001944:	e00f      	b.n	8001966 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001946:	4a0a      	ldr	r2, [pc, #40]	; (8001970 <SysTick_Config+0x40>)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	3b01      	subs	r3, #1
 800194c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800194e:	210f      	movs	r1, #15
 8001950:	f04f 30ff 	mov.w	r0, #4294967295
 8001954:	f7ff ff8e 	bl	8001874 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001958:	4b05      	ldr	r3, [pc, #20]	; (8001970 <SysTick_Config+0x40>)
 800195a:	2200      	movs	r2, #0
 800195c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800195e:	4b04      	ldr	r3, [pc, #16]	; (8001970 <SysTick_Config+0x40>)
 8001960:	2207      	movs	r2, #7
 8001962:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001964:	2300      	movs	r3, #0
}
 8001966:	4618      	mov	r0, r3
 8001968:	3708      	adds	r7, #8
 800196a:	46bd      	mov	sp, r7
 800196c:	bd80      	pop	{r7, pc}
 800196e:	bf00      	nop
 8001970:	e000e010 	.word	0xe000e010

08001974 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b082      	sub	sp, #8
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800197c:	6878      	ldr	r0, [r7, #4]
 800197e:	f7ff ff29 	bl	80017d4 <__NVIC_SetPriorityGrouping>
}
 8001982:	bf00      	nop
 8001984:	3708      	adds	r7, #8
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}

0800198a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800198a:	b580      	push	{r7, lr}
 800198c:	b086      	sub	sp, #24
 800198e:	af00      	add	r7, sp, #0
 8001990:	4603      	mov	r3, r0
 8001992:	60b9      	str	r1, [r7, #8]
 8001994:	607a      	str	r2, [r7, #4]
 8001996:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001998:	2300      	movs	r3, #0
 800199a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800199c:	f7ff ff3e 	bl	800181c <__NVIC_GetPriorityGrouping>
 80019a0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019a2:	687a      	ldr	r2, [r7, #4]
 80019a4:	68b9      	ldr	r1, [r7, #8]
 80019a6:	6978      	ldr	r0, [r7, #20]
 80019a8:	f7ff ff8e 	bl	80018c8 <NVIC_EncodePriority>
 80019ac:	4602      	mov	r2, r0
 80019ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019b2:	4611      	mov	r1, r2
 80019b4:	4618      	mov	r0, r3
 80019b6:	f7ff ff5d 	bl	8001874 <__NVIC_SetPriority>
}
 80019ba:	bf00      	nop
 80019bc:	3718      	adds	r7, #24
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd80      	pop	{r7, pc}

080019c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019c2:	b580      	push	{r7, lr}
 80019c4:	b082      	sub	sp, #8
 80019c6:	af00      	add	r7, sp, #0
 80019c8:	4603      	mov	r3, r0
 80019ca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019d0:	4618      	mov	r0, r3
 80019d2:	f7ff ff31 	bl	8001838 <__NVIC_EnableIRQ>
}
 80019d6:	bf00      	nop
 80019d8:	3708      	adds	r7, #8
 80019da:	46bd      	mov	sp, r7
 80019dc:	bd80      	pop	{r7, pc}

080019de <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019de:	b580      	push	{r7, lr}
 80019e0:	b082      	sub	sp, #8
 80019e2:	af00      	add	r7, sp, #0
 80019e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019e6:	6878      	ldr	r0, [r7, #4]
 80019e8:	f7ff ffa2 	bl	8001930 <SysTick_Config>
 80019ec:	4603      	mov	r3, r0
}
 80019ee:	4618      	mov	r0, r3
 80019f0:	3708      	adds	r7, #8
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}
	...

080019f8 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b086      	sub	sp, #24
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	60f8      	str	r0, [r7, #12]
 8001a00:	60b9      	str	r1, [r7, #8]
 8001a02:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001a06:	2301      	movs	r3, #1
 8001a08:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001a0a:	4b23      	ldr	r3, [pc, #140]	; (8001a98 <HAL_FLASH_Program+0xa0>)
 8001a0c:	7e1b      	ldrb	r3, [r3, #24]
 8001a0e:	2b01      	cmp	r3, #1
 8001a10:	d101      	bne.n	8001a16 <HAL_FLASH_Program+0x1e>
 8001a12:	2302      	movs	r3, #2
 8001a14:	e03b      	b.n	8001a8e <HAL_FLASH_Program+0x96>
 8001a16:	4b20      	ldr	r3, [pc, #128]	; (8001a98 <HAL_FLASH_Program+0xa0>)
 8001a18:	2201      	movs	r2, #1
 8001a1a:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001a1c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001a20:	f000 f870 	bl	8001b04 <FLASH_WaitForLastOperation>
 8001a24:	4603      	mov	r3, r0
 8001a26:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8001a28:	7dfb      	ldrb	r3, [r7, #23]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d12b      	bne.n	8001a86 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d105      	bne.n	8001a40 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8001a34:	783b      	ldrb	r3, [r7, #0]
 8001a36:	4619      	mov	r1, r3
 8001a38:	68b8      	ldr	r0, [r7, #8]
 8001a3a:	f000 f917 	bl	8001c6c <FLASH_Program_Byte>
 8001a3e:	e016      	b.n	8001a6e <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	2b01      	cmp	r3, #1
 8001a44:	d105      	bne.n	8001a52 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8001a46:	883b      	ldrh	r3, [r7, #0]
 8001a48:	4619      	mov	r1, r3
 8001a4a:	68b8      	ldr	r0, [r7, #8]
 8001a4c:	f000 f8ea 	bl	8001c24 <FLASH_Program_HalfWord>
 8001a50:	e00d      	b.n	8001a6e <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	2b02      	cmp	r3, #2
 8001a56:	d105      	bne.n	8001a64 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	4619      	mov	r1, r3
 8001a5c:	68b8      	ldr	r0, [r7, #8]
 8001a5e:	f000 f8bf 	bl	8001be0 <FLASH_Program_Word>
 8001a62:	e004      	b.n	8001a6e <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8001a64:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001a68:	68b8      	ldr	r0, [r7, #8]
 8001a6a:	f000 f88b 	bl	8001b84 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001a6e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001a72:	f000 f847 	bl	8001b04 <FLASH_WaitForLastOperation>
 8001a76:	4603      	mov	r3, r0
 8001a78:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8001a7a:	4b08      	ldr	r3, [pc, #32]	; (8001a9c <HAL_FLASH_Program+0xa4>)
 8001a7c:	691b      	ldr	r3, [r3, #16]
 8001a7e:	4a07      	ldr	r2, [pc, #28]	; (8001a9c <HAL_FLASH_Program+0xa4>)
 8001a80:	f023 0301 	bic.w	r3, r3, #1
 8001a84:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001a86:	4b04      	ldr	r3, [pc, #16]	; (8001a98 <HAL_FLASH_Program+0xa0>)
 8001a88:	2200      	movs	r2, #0
 8001a8a:	761a      	strb	r2, [r3, #24]
  
  return status;
 8001a8c:	7dfb      	ldrb	r3, [r7, #23]
}
 8001a8e:	4618      	mov	r0, r3
 8001a90:	3718      	adds	r7, #24
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}
 8001a96:	bf00      	nop
 8001a98:	20000124 	.word	0x20000124
 8001a9c:	40023c00 	.word	0x40023c00

08001aa0 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	b083      	sub	sp, #12
 8001aa4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001aaa:	4b0b      	ldr	r3, [pc, #44]	; (8001ad8 <HAL_FLASH_Unlock+0x38>)
 8001aac:	691b      	ldr	r3, [r3, #16]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	da0b      	bge.n	8001aca <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8001ab2:	4b09      	ldr	r3, [pc, #36]	; (8001ad8 <HAL_FLASH_Unlock+0x38>)
 8001ab4:	4a09      	ldr	r2, [pc, #36]	; (8001adc <HAL_FLASH_Unlock+0x3c>)
 8001ab6:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8001ab8:	4b07      	ldr	r3, [pc, #28]	; (8001ad8 <HAL_FLASH_Unlock+0x38>)
 8001aba:	4a09      	ldr	r2, [pc, #36]	; (8001ae0 <HAL_FLASH_Unlock+0x40>)
 8001abc:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001abe:	4b06      	ldr	r3, [pc, #24]	; (8001ad8 <HAL_FLASH_Unlock+0x38>)
 8001ac0:	691b      	ldr	r3, [r3, #16]
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	da01      	bge.n	8001aca <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8001aca:	79fb      	ldrb	r3, [r7, #7]
}
 8001acc:	4618      	mov	r0, r3
 8001ace:	370c      	adds	r7, #12
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad6:	4770      	bx	lr
 8001ad8:	40023c00 	.word	0x40023c00
 8001adc:	45670123 	.word	0x45670123
 8001ae0:	cdef89ab 	.word	0xcdef89ab

08001ae4 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8001ae8:	4b05      	ldr	r3, [pc, #20]	; (8001b00 <HAL_FLASH_Lock+0x1c>)
 8001aea:	691b      	ldr	r3, [r3, #16]
 8001aec:	4a04      	ldr	r2, [pc, #16]	; (8001b00 <HAL_FLASH_Lock+0x1c>)
 8001aee:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001af2:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8001af4:	2300      	movs	r3, #0
}
 8001af6:	4618      	mov	r0, r3
 8001af8:	46bd      	mov	sp, r7
 8001afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afe:	4770      	bx	lr
 8001b00:	40023c00 	.word	0x40023c00

08001b04 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b084      	sub	sp, #16
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001b10:	4b1a      	ldr	r3, [pc, #104]	; (8001b7c <FLASH_WaitForLastOperation+0x78>)
 8001b12:	2200      	movs	r2, #0
 8001b14:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8001b16:	f7ff fa75 	bl	8001004 <HAL_GetTick>
 8001b1a:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8001b1c:	e010      	b.n	8001b40 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b24:	d00c      	beq.n	8001b40 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d007      	beq.n	8001b3c <FLASH_WaitForLastOperation+0x38>
 8001b2c:	f7ff fa6a 	bl	8001004 <HAL_GetTick>
 8001b30:	4602      	mov	r2, r0
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	1ad3      	subs	r3, r2, r3
 8001b36:	687a      	ldr	r2, [r7, #4]
 8001b38:	429a      	cmp	r2, r3
 8001b3a:	d201      	bcs.n	8001b40 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8001b3c:	2303      	movs	r3, #3
 8001b3e:	e019      	b.n	8001b74 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8001b40:	4b0f      	ldr	r3, [pc, #60]	; (8001b80 <FLASH_WaitForLastOperation+0x7c>)
 8001b42:	68db      	ldr	r3, [r3, #12]
 8001b44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d1e8      	bne.n	8001b1e <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8001b4c:	4b0c      	ldr	r3, [pc, #48]	; (8001b80 <FLASH_WaitForLastOperation+0x7c>)
 8001b4e:	68db      	ldr	r3, [r3, #12]
 8001b50:	f003 0301 	and.w	r3, r3, #1
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d002      	beq.n	8001b5e <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8001b58:	4b09      	ldr	r3, [pc, #36]	; (8001b80 <FLASH_WaitForLastOperation+0x7c>)
 8001b5a:	2201      	movs	r2, #1
 8001b5c:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8001b5e:	4b08      	ldr	r3, [pc, #32]	; (8001b80 <FLASH_WaitForLastOperation+0x7c>)
 8001b60:	68db      	ldr	r3, [r3, #12]
 8001b62:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d003      	beq.n	8001b72 <FLASH_WaitForLastOperation+0x6e>
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8001b6a:	f000 f8a1 	bl	8001cb0 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8001b6e:	2301      	movs	r3, #1
 8001b70:	e000      	b.n	8001b74 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8001b72:	2300      	movs	r3, #0
  
}  
 8001b74:	4618      	mov	r0, r3
 8001b76:	3710      	adds	r7, #16
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	bd80      	pop	{r7, pc}
 8001b7c:	20000124 	.word	0x20000124
 8001b80:	40023c00 	.word	0x40023c00

08001b84 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8001b84:	b490      	push	{r4, r7}
 8001b86:	b084      	sub	sp, #16
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	60f8      	str	r0, [r7, #12]
 8001b8c:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001b90:	4b12      	ldr	r3, [pc, #72]	; (8001bdc <FLASH_Program_DoubleWord+0x58>)
 8001b92:	691b      	ldr	r3, [r3, #16]
 8001b94:	4a11      	ldr	r2, [pc, #68]	; (8001bdc <FLASH_Program_DoubleWord+0x58>)
 8001b96:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001b9a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8001b9c:	4b0f      	ldr	r3, [pc, #60]	; (8001bdc <FLASH_Program_DoubleWord+0x58>)
 8001b9e:	691b      	ldr	r3, [r3, #16]
 8001ba0:	4a0e      	ldr	r2, [pc, #56]	; (8001bdc <FLASH_Program_DoubleWord+0x58>)
 8001ba2:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8001ba6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001ba8:	4b0c      	ldr	r3, [pc, #48]	; (8001bdc <FLASH_Program_DoubleWord+0x58>)
 8001baa:	691b      	ldr	r3, [r3, #16]
 8001bac:	4a0b      	ldr	r2, [pc, #44]	; (8001bdc <FLASH_Program_DoubleWord+0x58>)
 8001bae:	f043 0301 	orr.w	r3, r3, #1
 8001bb2:	6113      	str	r3, [r2, #16]

  /* Program the double-word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	683a      	ldr	r2, [r7, #0]
 8001bb8:	601a      	str	r2, [r3, #0]
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8001bba:	e9d7 1200 	ldrd	r1, r2, [r7]
 8001bbe:	f04f 0300 	mov.w	r3, #0
 8001bc2:	f04f 0400 	mov.w	r4, #0
 8001bc6:	0013      	movs	r3, r2
 8001bc8:	2400      	movs	r4, #0
 8001bca:	68fa      	ldr	r2, [r7, #12]
 8001bcc:	3204      	adds	r2, #4
 8001bce:	6013      	str	r3, [r2, #0]
}
 8001bd0:	bf00      	nop
 8001bd2:	3710      	adds	r7, #16
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bc90      	pop	{r4, r7}
 8001bd8:	4770      	bx	lr
 8001bda:	bf00      	nop
 8001bdc:	40023c00 	.word	0x40023c00

08001be0 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8001be0:	b480      	push	{r7}
 8001be2:	b083      	sub	sp, #12
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
 8001be8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001bea:	4b0d      	ldr	r3, [pc, #52]	; (8001c20 <FLASH_Program_Word+0x40>)
 8001bec:	691b      	ldr	r3, [r3, #16]
 8001bee:	4a0c      	ldr	r2, [pc, #48]	; (8001c20 <FLASH_Program_Word+0x40>)
 8001bf0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001bf4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8001bf6:	4b0a      	ldr	r3, [pc, #40]	; (8001c20 <FLASH_Program_Word+0x40>)
 8001bf8:	691b      	ldr	r3, [r3, #16]
 8001bfa:	4a09      	ldr	r2, [pc, #36]	; (8001c20 <FLASH_Program_Word+0x40>)
 8001bfc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c00:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001c02:	4b07      	ldr	r3, [pc, #28]	; (8001c20 <FLASH_Program_Word+0x40>)
 8001c04:	691b      	ldr	r3, [r3, #16]
 8001c06:	4a06      	ldr	r2, [pc, #24]	; (8001c20 <FLASH_Program_Word+0x40>)
 8001c08:	f043 0301 	orr.w	r3, r3, #1
 8001c0c:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	683a      	ldr	r2, [r7, #0]
 8001c12:	601a      	str	r2, [r3, #0]
}
 8001c14:	bf00      	nop
 8001c16:	370c      	adds	r7, #12
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1e:	4770      	bx	lr
 8001c20:	40023c00 	.word	0x40023c00

08001c24 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8001c24:	b480      	push	{r7}
 8001c26:	b083      	sub	sp, #12
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
 8001c2c:	460b      	mov	r3, r1
 8001c2e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001c30:	4b0d      	ldr	r3, [pc, #52]	; (8001c68 <FLASH_Program_HalfWord+0x44>)
 8001c32:	691b      	ldr	r3, [r3, #16]
 8001c34:	4a0c      	ldr	r2, [pc, #48]	; (8001c68 <FLASH_Program_HalfWord+0x44>)
 8001c36:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001c3a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8001c3c:	4b0a      	ldr	r3, [pc, #40]	; (8001c68 <FLASH_Program_HalfWord+0x44>)
 8001c3e:	691b      	ldr	r3, [r3, #16]
 8001c40:	4a09      	ldr	r2, [pc, #36]	; (8001c68 <FLASH_Program_HalfWord+0x44>)
 8001c42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c46:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001c48:	4b07      	ldr	r3, [pc, #28]	; (8001c68 <FLASH_Program_HalfWord+0x44>)
 8001c4a:	691b      	ldr	r3, [r3, #16]
 8001c4c:	4a06      	ldr	r2, [pc, #24]	; (8001c68 <FLASH_Program_HalfWord+0x44>)
 8001c4e:	f043 0301 	orr.w	r3, r3, #1
 8001c52:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	887a      	ldrh	r2, [r7, #2]
 8001c58:	801a      	strh	r2, [r3, #0]
}
 8001c5a:	bf00      	nop
 8001c5c:	370c      	adds	r7, #12
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c64:	4770      	bx	lr
 8001c66:	bf00      	nop
 8001c68:	40023c00 	.word	0x40023c00

08001c6c <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	b083      	sub	sp, #12
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
 8001c74:	460b      	mov	r3, r1
 8001c76:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001c78:	4b0c      	ldr	r3, [pc, #48]	; (8001cac <FLASH_Program_Byte+0x40>)
 8001c7a:	691b      	ldr	r3, [r3, #16]
 8001c7c:	4a0b      	ldr	r2, [pc, #44]	; (8001cac <FLASH_Program_Byte+0x40>)
 8001c7e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001c82:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8001c84:	4b09      	ldr	r3, [pc, #36]	; (8001cac <FLASH_Program_Byte+0x40>)
 8001c86:	4a09      	ldr	r2, [pc, #36]	; (8001cac <FLASH_Program_Byte+0x40>)
 8001c88:	691b      	ldr	r3, [r3, #16]
 8001c8a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001c8c:	4b07      	ldr	r3, [pc, #28]	; (8001cac <FLASH_Program_Byte+0x40>)
 8001c8e:	691b      	ldr	r3, [r3, #16]
 8001c90:	4a06      	ldr	r2, [pc, #24]	; (8001cac <FLASH_Program_Byte+0x40>)
 8001c92:	f043 0301 	orr.w	r3, r3, #1
 8001c96:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	78fa      	ldrb	r2, [r7, #3]
 8001c9c:	701a      	strb	r2, [r3, #0]
}
 8001c9e:	bf00      	nop
 8001ca0:	370c      	adds	r7, #12
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca8:	4770      	bx	lr
 8001caa:	bf00      	nop
 8001cac:	40023c00 	.word	0x40023c00

08001cb0 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8001cb0:	b480      	push	{r7}
 8001cb2:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8001cb4:	4b27      	ldr	r3, [pc, #156]	; (8001d54 <FLASH_SetErrorCode+0xa4>)
 8001cb6:	68db      	ldr	r3, [r3, #12]
 8001cb8:	f003 0310 	and.w	r3, r3, #16
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d008      	beq.n	8001cd2 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8001cc0:	4b25      	ldr	r3, [pc, #148]	; (8001d58 <FLASH_SetErrorCode+0xa8>)
 8001cc2:	69db      	ldr	r3, [r3, #28]
 8001cc4:	f043 0310 	orr.w	r3, r3, #16
 8001cc8:	4a23      	ldr	r2, [pc, #140]	; (8001d58 <FLASH_SetErrorCode+0xa8>)
 8001cca:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8001ccc:	4b21      	ldr	r3, [pc, #132]	; (8001d54 <FLASH_SetErrorCode+0xa4>)
 8001cce:	2210      	movs	r2, #16
 8001cd0:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8001cd2:	4b20      	ldr	r3, [pc, #128]	; (8001d54 <FLASH_SetErrorCode+0xa4>)
 8001cd4:	68db      	ldr	r3, [r3, #12]
 8001cd6:	f003 0320 	and.w	r3, r3, #32
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d008      	beq.n	8001cf0 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8001cde:	4b1e      	ldr	r3, [pc, #120]	; (8001d58 <FLASH_SetErrorCode+0xa8>)
 8001ce0:	69db      	ldr	r3, [r3, #28]
 8001ce2:	f043 0308 	orr.w	r3, r3, #8
 8001ce6:	4a1c      	ldr	r2, [pc, #112]	; (8001d58 <FLASH_SetErrorCode+0xa8>)
 8001ce8:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8001cea:	4b1a      	ldr	r3, [pc, #104]	; (8001d54 <FLASH_SetErrorCode+0xa4>)
 8001cec:	2220      	movs	r2, #32
 8001cee:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8001cf0:	4b18      	ldr	r3, [pc, #96]	; (8001d54 <FLASH_SetErrorCode+0xa4>)
 8001cf2:	68db      	ldr	r3, [r3, #12]
 8001cf4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d008      	beq.n	8001d0e <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8001cfc:	4b16      	ldr	r3, [pc, #88]	; (8001d58 <FLASH_SetErrorCode+0xa8>)
 8001cfe:	69db      	ldr	r3, [r3, #28]
 8001d00:	f043 0304 	orr.w	r3, r3, #4
 8001d04:	4a14      	ldr	r2, [pc, #80]	; (8001d58 <FLASH_SetErrorCode+0xa8>)
 8001d06:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8001d08:	4b12      	ldr	r3, [pc, #72]	; (8001d54 <FLASH_SetErrorCode+0xa4>)
 8001d0a:	2240      	movs	r2, #64	; 0x40
 8001d0c:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8001d0e:	4b11      	ldr	r3, [pc, #68]	; (8001d54 <FLASH_SetErrorCode+0xa4>)
 8001d10:	68db      	ldr	r3, [r3, #12]
 8001d12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d008      	beq.n	8001d2c <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8001d1a:	4b0f      	ldr	r3, [pc, #60]	; (8001d58 <FLASH_SetErrorCode+0xa8>)
 8001d1c:	69db      	ldr	r3, [r3, #28]
 8001d1e:	f043 0302 	orr.w	r3, r3, #2
 8001d22:	4a0d      	ldr	r2, [pc, #52]	; (8001d58 <FLASH_SetErrorCode+0xa8>)
 8001d24:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8001d26:	4b0b      	ldr	r3, [pc, #44]	; (8001d54 <FLASH_SetErrorCode+0xa4>)
 8001d28:	2280      	movs	r2, #128	; 0x80
 8001d2a:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8001d2c:	4b09      	ldr	r3, [pc, #36]	; (8001d54 <FLASH_SetErrorCode+0xa4>)
 8001d2e:	68db      	ldr	r3, [r3, #12]
 8001d30:	f003 0302 	and.w	r3, r3, #2
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d008      	beq.n	8001d4a <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8001d38:	4b07      	ldr	r3, [pc, #28]	; (8001d58 <FLASH_SetErrorCode+0xa8>)
 8001d3a:	69db      	ldr	r3, [r3, #28]
 8001d3c:	f043 0320 	orr.w	r3, r3, #32
 8001d40:	4a05      	ldr	r2, [pc, #20]	; (8001d58 <FLASH_SetErrorCode+0xa8>)
 8001d42:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8001d44:	4b03      	ldr	r3, [pc, #12]	; (8001d54 <FLASH_SetErrorCode+0xa4>)
 8001d46:	2202      	movs	r2, #2
 8001d48:	60da      	str	r2, [r3, #12]
  }
}
 8001d4a:	bf00      	nop
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d52:	4770      	bx	lr
 8001d54:	40023c00 	.word	0x40023c00
 8001d58:	20000124 	.word	0x20000124

08001d5c <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b084      	sub	sp, #16
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
 8001d64:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001d66:	2301      	movs	r3, #1
 8001d68:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	60bb      	str	r3, [r7, #8]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001d6e:	4b31      	ldr	r3, [pc, #196]	; (8001e34 <HAL_FLASHEx_Erase+0xd8>)
 8001d70:	7e1b      	ldrb	r3, [r3, #24]
 8001d72:	2b01      	cmp	r3, #1
 8001d74:	d101      	bne.n	8001d7a <HAL_FLASHEx_Erase+0x1e>
 8001d76:	2302      	movs	r3, #2
 8001d78:	e058      	b.n	8001e2c <HAL_FLASHEx_Erase+0xd0>
 8001d7a:	4b2e      	ldr	r3, [pc, #184]	; (8001e34 <HAL_FLASHEx_Erase+0xd8>)
 8001d7c:	2201      	movs	r2, #1
 8001d7e:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001d80:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001d84:	f7ff febe 	bl	8001b04 <FLASH_WaitForLastOperation>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 8001d8c:	7bfb      	ldrb	r3, [r7, #15]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d148      	bne.n	8001e24 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	f04f 32ff 	mov.w	r2, #4294967295
 8001d98:	601a      	str	r2, [r3, #0]
    
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	2b01      	cmp	r3, #1
 8001da0:	d115      	bne.n	8001dce <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	691b      	ldr	r3, [r3, #16]
 8001da6:	b2da      	uxtb	r2, r3
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	4619      	mov	r1, r3
 8001dae:	4610      	mov	r0, r2
 8001db0:	f000 f844 	bl	8001e3c <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001db4:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001db8:	f7ff fea4 	bl	8001b04 <FLASH_WaitForLastOperation>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	73fb      	strb	r3, [r7, #15]
      
      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8001dc0:	4b1d      	ldr	r3, [pc, #116]	; (8001e38 <HAL_FLASHEx_Erase+0xdc>)
 8001dc2:	691b      	ldr	r3, [r3, #16]
 8001dc4:	4a1c      	ldr	r2, [pc, #112]	; (8001e38 <HAL_FLASHEx_Erase+0xdc>)
 8001dc6:	f023 0304 	bic.w	r3, r3, #4
 8001dca:	6113      	str	r3, [r2, #16]
 8001dcc:	e028      	b.n	8001e20 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	689b      	ldr	r3, [r3, #8]
 8001dd2:	60bb      	str	r3, [r7, #8]
 8001dd4:	e01c      	b.n	8001e10 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	691b      	ldr	r3, [r3, #16]
 8001dda:	b2db      	uxtb	r3, r3
 8001ddc:	4619      	mov	r1, r3
 8001dde:	68b8      	ldr	r0, [r7, #8]
 8001de0:	f000 f850 	bl	8001e84 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001de4:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001de8:	f7ff fe8c 	bl	8001b04 <FLASH_WaitForLastOperation>
 8001dec:	4603      	mov	r3, r0
 8001dee:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8001df0:	4b11      	ldr	r3, [pc, #68]	; (8001e38 <HAL_FLASHEx_Erase+0xdc>)
 8001df2:	691b      	ldr	r3, [r3, #16]
 8001df4:	4a10      	ldr	r2, [pc, #64]	; (8001e38 <HAL_FLASHEx_Erase+0xdc>)
 8001df6:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 8001dfa:	6113      	str	r3, [r2, #16]

        if(status != HAL_OK) 
 8001dfc:	7bfb      	ldrb	r3, [r7, #15]
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d003      	beq.n	8001e0a <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	68ba      	ldr	r2, [r7, #8]
 8001e06:	601a      	str	r2, [r3, #0]
          break;
 8001e08:	e00a      	b.n	8001e20 <HAL_FLASHEx_Erase+0xc4>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8001e0a:	68bb      	ldr	r3, [r7, #8]
 8001e0c:	3301      	adds	r3, #1
 8001e0e:	60bb      	str	r3, [r7, #8]
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	68da      	ldr	r2, [r3, #12]
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	689b      	ldr	r3, [r3, #8]
 8001e18:	4413      	add	r3, r2
 8001e1a:	68ba      	ldr	r2, [r7, #8]
 8001e1c:	429a      	cmp	r2, r3
 8001e1e:	d3da      	bcc.n	8001dd6 <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();    
 8001e20:	f000 f878 	bl	8001f14 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001e24:	4b03      	ldr	r3, [pc, #12]	; (8001e34 <HAL_FLASHEx_Erase+0xd8>)
 8001e26:	2200      	movs	r2, #0
 8001e28:	761a      	strb	r2, [r3, #24]

  return status;
 8001e2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	3710      	adds	r7, #16
 8001e30:	46bd      	mov	sp, r7
 8001e32:	bd80      	pop	{r7, pc}
 8001e34:	20000124 	.word	0x20000124
 8001e38:	40023c00 	.word	0x40023c00

08001e3c <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	b083      	sub	sp, #12
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	4603      	mov	r3, r0
 8001e44:	6039      	str	r1, [r7, #0]
 8001e46:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));
  
  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001e48:	4b0d      	ldr	r3, [pc, #52]	; (8001e80 <FLASH_MassErase+0x44>)
 8001e4a:	691b      	ldr	r3, [r3, #16]
 8001e4c:	4a0c      	ldr	r2, [pc, #48]	; (8001e80 <FLASH_MassErase+0x44>)
 8001e4e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001e52:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 8001e54:	4b0a      	ldr	r3, [pc, #40]	; (8001e80 <FLASH_MassErase+0x44>)
 8001e56:	691b      	ldr	r3, [r3, #16]
 8001e58:	4a09      	ldr	r2, [pc, #36]	; (8001e80 <FLASH_MassErase+0x44>)
 8001e5a:	f043 0304 	orr.w	r3, r3, #4
 8001e5e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8U);
 8001e60:	4b07      	ldr	r3, [pc, #28]	; (8001e80 <FLASH_MassErase+0x44>)
 8001e62:	691a      	ldr	r2, [r3, #16]
 8001e64:	79fb      	ldrb	r3, [r7, #7]
 8001e66:	021b      	lsls	r3, r3, #8
 8001e68:	4313      	orrs	r3, r2
 8001e6a:	4a05      	ldr	r2, [pc, #20]	; (8001e80 <FLASH_MassErase+0x44>)
 8001e6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e70:	6113      	str	r3, [r2, #16]
}
 8001e72:	bf00      	nop
 8001e74:	370c      	adds	r7, #12
 8001e76:	46bd      	mov	sp, r7
 8001e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7c:	4770      	bx	lr
 8001e7e:	bf00      	nop
 8001e80:	40023c00 	.word	0x40023c00

08001e84 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8001e84:	b480      	push	{r7}
 8001e86:	b085      	sub	sp, #20
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
 8001e8c:	460b      	mov	r3, r1
 8001e8e:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8001e90:	2300      	movs	r3, #0
 8001e92:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8001e94:	78fb      	ldrb	r3, [r7, #3]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d102      	bne.n	8001ea0 <FLASH_Erase_Sector+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	60fb      	str	r3, [r7, #12]
 8001e9e:	e010      	b.n	8001ec2 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8001ea0:	78fb      	ldrb	r3, [r7, #3]
 8001ea2:	2b01      	cmp	r3, #1
 8001ea4:	d103      	bne.n	8001eae <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8001ea6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001eaa:	60fb      	str	r3, [r7, #12]
 8001eac:	e009      	b.n	8001ec2 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8001eae:	78fb      	ldrb	r3, [r7, #3]
 8001eb0:	2b02      	cmp	r3, #2
 8001eb2:	d103      	bne.n	8001ebc <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8001eb4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001eb8:	60fb      	str	r3, [r7, #12]
 8001eba:	e002      	b.n	8001ec2 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8001ebc:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001ec0:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001ec2:	4b13      	ldr	r3, [pc, #76]	; (8001f10 <FLASH_Erase_Sector+0x8c>)
 8001ec4:	691b      	ldr	r3, [r3, #16]
 8001ec6:	4a12      	ldr	r2, [pc, #72]	; (8001f10 <FLASH_Erase_Sector+0x8c>)
 8001ec8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001ecc:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8001ece:	4b10      	ldr	r3, [pc, #64]	; (8001f10 <FLASH_Erase_Sector+0x8c>)
 8001ed0:	691a      	ldr	r2, [r3, #16]
 8001ed2:	490f      	ldr	r1, [pc, #60]	; (8001f10 <FLASH_Erase_Sector+0x8c>)
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	4313      	orrs	r3, r2
 8001ed8:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8001eda:	4b0d      	ldr	r3, [pc, #52]	; (8001f10 <FLASH_Erase_Sector+0x8c>)
 8001edc:	691b      	ldr	r3, [r3, #16]
 8001ede:	4a0c      	ldr	r2, [pc, #48]	; (8001f10 <FLASH_Erase_Sector+0x8c>)
 8001ee0:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001ee4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8001ee6:	4b0a      	ldr	r3, [pc, #40]	; (8001f10 <FLASH_Erase_Sector+0x8c>)
 8001ee8:	691a      	ldr	r2, [r3, #16]
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	00db      	lsls	r3, r3, #3
 8001eee:	4313      	orrs	r3, r2
 8001ef0:	4a07      	ldr	r2, [pc, #28]	; (8001f10 <FLASH_Erase_Sector+0x8c>)
 8001ef2:	f043 0302 	orr.w	r3, r3, #2
 8001ef6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8001ef8:	4b05      	ldr	r3, [pc, #20]	; (8001f10 <FLASH_Erase_Sector+0x8c>)
 8001efa:	691b      	ldr	r3, [r3, #16]
 8001efc:	4a04      	ldr	r2, [pc, #16]	; (8001f10 <FLASH_Erase_Sector+0x8c>)
 8001efe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f02:	6113      	str	r3, [r2, #16]
}
 8001f04:	bf00      	nop
 8001f06:	3714      	adds	r7, #20
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0e:	4770      	bx	lr
 8001f10:	40023c00 	.word	0x40023c00

08001f14 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8001f14:	b480      	push	{r7}
 8001f16:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN)!= RESET)
 8001f18:	4b20      	ldr	r3, [pc, #128]	; (8001f9c <FLASH_FlushCaches+0x88>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d017      	beq.n	8001f54 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8001f24:	4b1d      	ldr	r3, [pc, #116]	; (8001f9c <FLASH_FlushCaches+0x88>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4a1c      	ldr	r2, [pc, #112]	; (8001f9c <FLASH_FlushCaches+0x88>)
 8001f2a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001f2e:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8001f30:	4b1a      	ldr	r3, [pc, #104]	; (8001f9c <FLASH_FlushCaches+0x88>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4a19      	ldr	r2, [pc, #100]	; (8001f9c <FLASH_FlushCaches+0x88>)
 8001f36:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001f3a:	6013      	str	r3, [r2, #0]
 8001f3c:	4b17      	ldr	r3, [pc, #92]	; (8001f9c <FLASH_FlushCaches+0x88>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4a16      	ldr	r2, [pc, #88]	; (8001f9c <FLASH_FlushCaches+0x88>)
 8001f42:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001f46:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001f48:	4b14      	ldr	r3, [pc, #80]	; (8001f9c <FLASH_FlushCaches+0x88>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4a13      	ldr	r2, [pc, #76]	; (8001f9c <FLASH_FlushCaches+0x88>)
 8001f4e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f52:	6013      	str	r3, [r2, #0]
  }
  
  /* Flush data cache */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8001f54:	4b11      	ldr	r3, [pc, #68]	; (8001f9c <FLASH_FlushCaches+0x88>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d017      	beq.n	8001f90 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8001f60:	4b0e      	ldr	r3, [pc, #56]	; (8001f9c <FLASH_FlushCaches+0x88>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	4a0d      	ldr	r2, [pc, #52]	; (8001f9c <FLASH_FlushCaches+0x88>)
 8001f66:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001f6a:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8001f6c:	4b0b      	ldr	r3, [pc, #44]	; (8001f9c <FLASH_FlushCaches+0x88>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	4a0a      	ldr	r2, [pc, #40]	; (8001f9c <FLASH_FlushCaches+0x88>)
 8001f72:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001f76:	6013      	str	r3, [r2, #0]
 8001f78:	4b08      	ldr	r3, [pc, #32]	; (8001f9c <FLASH_FlushCaches+0x88>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4a07      	ldr	r2, [pc, #28]	; (8001f9c <FLASH_FlushCaches+0x88>)
 8001f7e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001f82:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8001f84:	4b05      	ldr	r3, [pc, #20]	; (8001f9c <FLASH_FlushCaches+0x88>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	4a04      	ldr	r2, [pc, #16]	; (8001f9c <FLASH_FlushCaches+0x88>)
 8001f8a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001f8e:	6013      	str	r3, [r2, #0]
  }
}
 8001f90:	bf00      	nop
 8001f92:	46bd      	mov	sp, r7
 8001f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f98:	4770      	bx	lr
 8001f9a:	bf00      	nop
 8001f9c:	40023c00 	.word	0x40023c00

08001fa0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	b089      	sub	sp, #36	; 0x24
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
 8001fa8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001faa:	2300      	movs	r3, #0
 8001fac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	61fb      	str	r3, [r7, #28]
 8001fba:	e16b      	b.n	8002294 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001fbc:	2201      	movs	r2, #1
 8001fbe:	69fb      	ldr	r3, [r7, #28]
 8001fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	697a      	ldr	r2, [r7, #20]
 8001fcc:	4013      	ands	r3, r2
 8001fce:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001fd0:	693a      	ldr	r2, [r7, #16]
 8001fd2:	697b      	ldr	r3, [r7, #20]
 8001fd4:	429a      	cmp	r2, r3
 8001fd6:	f040 815a 	bne.w	800228e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	685b      	ldr	r3, [r3, #4]
 8001fde:	2b02      	cmp	r3, #2
 8001fe0:	d003      	beq.n	8001fea <HAL_GPIO_Init+0x4a>
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	685b      	ldr	r3, [r3, #4]
 8001fe6:	2b12      	cmp	r3, #18
 8001fe8:	d123      	bne.n	8002032 <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001fea:	69fb      	ldr	r3, [r7, #28]
 8001fec:	08da      	lsrs	r2, r3, #3
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	3208      	adds	r2, #8
 8001ff2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ff6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001ff8:	69fb      	ldr	r3, [r7, #28]
 8001ffa:	f003 0307 	and.w	r3, r3, #7
 8001ffe:	009b      	lsls	r3, r3, #2
 8002000:	220f      	movs	r2, #15
 8002002:	fa02 f303 	lsl.w	r3, r2, r3
 8002006:	43db      	mvns	r3, r3
 8002008:	69ba      	ldr	r2, [r7, #24]
 800200a:	4013      	ands	r3, r2
 800200c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	691a      	ldr	r2, [r3, #16]
 8002012:	69fb      	ldr	r3, [r7, #28]
 8002014:	f003 0307 	and.w	r3, r3, #7
 8002018:	009b      	lsls	r3, r3, #2
 800201a:	fa02 f303 	lsl.w	r3, r2, r3
 800201e:	69ba      	ldr	r2, [r7, #24]
 8002020:	4313      	orrs	r3, r2
 8002022:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002024:	69fb      	ldr	r3, [r7, #28]
 8002026:	08da      	lsrs	r2, r3, #3
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	3208      	adds	r2, #8
 800202c:	69b9      	ldr	r1, [r7, #24]
 800202e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002038:	69fb      	ldr	r3, [r7, #28]
 800203a:	005b      	lsls	r3, r3, #1
 800203c:	2203      	movs	r2, #3
 800203e:	fa02 f303 	lsl.w	r3, r2, r3
 8002042:	43db      	mvns	r3, r3
 8002044:	69ba      	ldr	r2, [r7, #24]
 8002046:	4013      	ands	r3, r2
 8002048:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	685b      	ldr	r3, [r3, #4]
 800204e:	f003 0203 	and.w	r2, r3, #3
 8002052:	69fb      	ldr	r3, [r7, #28]
 8002054:	005b      	lsls	r3, r3, #1
 8002056:	fa02 f303 	lsl.w	r3, r2, r3
 800205a:	69ba      	ldr	r2, [r7, #24]
 800205c:	4313      	orrs	r3, r2
 800205e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	69ba      	ldr	r2, [r7, #24]
 8002064:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	2b01      	cmp	r3, #1
 800206c:	d00b      	beq.n	8002086 <HAL_GPIO_Init+0xe6>
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	685b      	ldr	r3, [r3, #4]
 8002072:	2b02      	cmp	r3, #2
 8002074:	d007      	beq.n	8002086 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800207a:	2b11      	cmp	r3, #17
 800207c:	d003      	beq.n	8002086 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	2b12      	cmp	r3, #18
 8002084:	d130      	bne.n	80020e8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	689b      	ldr	r3, [r3, #8]
 800208a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800208c:	69fb      	ldr	r3, [r7, #28]
 800208e:	005b      	lsls	r3, r3, #1
 8002090:	2203      	movs	r2, #3
 8002092:	fa02 f303 	lsl.w	r3, r2, r3
 8002096:	43db      	mvns	r3, r3
 8002098:	69ba      	ldr	r2, [r7, #24]
 800209a:	4013      	ands	r3, r2
 800209c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	68da      	ldr	r2, [r3, #12]
 80020a2:	69fb      	ldr	r3, [r7, #28]
 80020a4:	005b      	lsls	r3, r3, #1
 80020a6:	fa02 f303 	lsl.w	r3, r2, r3
 80020aa:	69ba      	ldr	r2, [r7, #24]
 80020ac:	4313      	orrs	r3, r2
 80020ae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	69ba      	ldr	r2, [r7, #24]
 80020b4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	685b      	ldr	r3, [r3, #4]
 80020ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80020bc:	2201      	movs	r2, #1
 80020be:	69fb      	ldr	r3, [r7, #28]
 80020c0:	fa02 f303 	lsl.w	r3, r2, r3
 80020c4:	43db      	mvns	r3, r3
 80020c6:	69ba      	ldr	r2, [r7, #24]
 80020c8:	4013      	ands	r3, r2
 80020ca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	091b      	lsrs	r3, r3, #4
 80020d2:	f003 0201 	and.w	r2, r3, #1
 80020d6:	69fb      	ldr	r3, [r7, #28]
 80020d8:	fa02 f303 	lsl.w	r3, r2, r3
 80020dc:	69ba      	ldr	r2, [r7, #24]
 80020de:	4313      	orrs	r3, r2
 80020e0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	69ba      	ldr	r2, [r7, #24]
 80020e6:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	68db      	ldr	r3, [r3, #12]
 80020ec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80020ee:	69fb      	ldr	r3, [r7, #28]
 80020f0:	005b      	lsls	r3, r3, #1
 80020f2:	2203      	movs	r2, #3
 80020f4:	fa02 f303 	lsl.w	r3, r2, r3
 80020f8:	43db      	mvns	r3, r3
 80020fa:	69ba      	ldr	r2, [r7, #24]
 80020fc:	4013      	ands	r3, r2
 80020fe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	689a      	ldr	r2, [r3, #8]
 8002104:	69fb      	ldr	r3, [r7, #28]
 8002106:	005b      	lsls	r3, r3, #1
 8002108:	fa02 f303 	lsl.w	r3, r2, r3
 800210c:	69ba      	ldr	r2, [r7, #24]
 800210e:	4313      	orrs	r3, r2
 8002110:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	69ba      	ldr	r2, [r7, #24]
 8002116:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002120:	2b00      	cmp	r3, #0
 8002122:	f000 80b4 	beq.w	800228e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002126:	2300      	movs	r3, #0
 8002128:	60fb      	str	r3, [r7, #12]
 800212a:	4b5f      	ldr	r3, [pc, #380]	; (80022a8 <HAL_GPIO_Init+0x308>)
 800212c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800212e:	4a5e      	ldr	r2, [pc, #376]	; (80022a8 <HAL_GPIO_Init+0x308>)
 8002130:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002134:	6453      	str	r3, [r2, #68]	; 0x44
 8002136:	4b5c      	ldr	r3, [pc, #368]	; (80022a8 <HAL_GPIO_Init+0x308>)
 8002138:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800213a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800213e:	60fb      	str	r3, [r7, #12]
 8002140:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002142:	4a5a      	ldr	r2, [pc, #360]	; (80022ac <HAL_GPIO_Init+0x30c>)
 8002144:	69fb      	ldr	r3, [r7, #28]
 8002146:	089b      	lsrs	r3, r3, #2
 8002148:	3302      	adds	r3, #2
 800214a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800214e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002150:	69fb      	ldr	r3, [r7, #28]
 8002152:	f003 0303 	and.w	r3, r3, #3
 8002156:	009b      	lsls	r3, r3, #2
 8002158:	220f      	movs	r2, #15
 800215a:	fa02 f303 	lsl.w	r3, r2, r3
 800215e:	43db      	mvns	r3, r3
 8002160:	69ba      	ldr	r2, [r7, #24]
 8002162:	4013      	ands	r3, r2
 8002164:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	4a51      	ldr	r2, [pc, #324]	; (80022b0 <HAL_GPIO_Init+0x310>)
 800216a:	4293      	cmp	r3, r2
 800216c:	d02b      	beq.n	80021c6 <HAL_GPIO_Init+0x226>
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	4a50      	ldr	r2, [pc, #320]	; (80022b4 <HAL_GPIO_Init+0x314>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d025      	beq.n	80021c2 <HAL_GPIO_Init+0x222>
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	4a4f      	ldr	r2, [pc, #316]	; (80022b8 <HAL_GPIO_Init+0x318>)
 800217a:	4293      	cmp	r3, r2
 800217c:	d01f      	beq.n	80021be <HAL_GPIO_Init+0x21e>
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	4a4e      	ldr	r2, [pc, #312]	; (80022bc <HAL_GPIO_Init+0x31c>)
 8002182:	4293      	cmp	r3, r2
 8002184:	d019      	beq.n	80021ba <HAL_GPIO_Init+0x21a>
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	4a4d      	ldr	r2, [pc, #308]	; (80022c0 <HAL_GPIO_Init+0x320>)
 800218a:	4293      	cmp	r3, r2
 800218c:	d013      	beq.n	80021b6 <HAL_GPIO_Init+0x216>
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	4a4c      	ldr	r2, [pc, #304]	; (80022c4 <HAL_GPIO_Init+0x324>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d00d      	beq.n	80021b2 <HAL_GPIO_Init+0x212>
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	4a4b      	ldr	r2, [pc, #300]	; (80022c8 <HAL_GPIO_Init+0x328>)
 800219a:	4293      	cmp	r3, r2
 800219c:	d007      	beq.n	80021ae <HAL_GPIO_Init+0x20e>
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	4a4a      	ldr	r2, [pc, #296]	; (80022cc <HAL_GPIO_Init+0x32c>)
 80021a2:	4293      	cmp	r3, r2
 80021a4:	d101      	bne.n	80021aa <HAL_GPIO_Init+0x20a>
 80021a6:	2307      	movs	r3, #7
 80021a8:	e00e      	b.n	80021c8 <HAL_GPIO_Init+0x228>
 80021aa:	2308      	movs	r3, #8
 80021ac:	e00c      	b.n	80021c8 <HAL_GPIO_Init+0x228>
 80021ae:	2306      	movs	r3, #6
 80021b0:	e00a      	b.n	80021c8 <HAL_GPIO_Init+0x228>
 80021b2:	2305      	movs	r3, #5
 80021b4:	e008      	b.n	80021c8 <HAL_GPIO_Init+0x228>
 80021b6:	2304      	movs	r3, #4
 80021b8:	e006      	b.n	80021c8 <HAL_GPIO_Init+0x228>
 80021ba:	2303      	movs	r3, #3
 80021bc:	e004      	b.n	80021c8 <HAL_GPIO_Init+0x228>
 80021be:	2302      	movs	r3, #2
 80021c0:	e002      	b.n	80021c8 <HAL_GPIO_Init+0x228>
 80021c2:	2301      	movs	r3, #1
 80021c4:	e000      	b.n	80021c8 <HAL_GPIO_Init+0x228>
 80021c6:	2300      	movs	r3, #0
 80021c8:	69fa      	ldr	r2, [r7, #28]
 80021ca:	f002 0203 	and.w	r2, r2, #3
 80021ce:	0092      	lsls	r2, r2, #2
 80021d0:	4093      	lsls	r3, r2
 80021d2:	69ba      	ldr	r2, [r7, #24]
 80021d4:	4313      	orrs	r3, r2
 80021d6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80021d8:	4934      	ldr	r1, [pc, #208]	; (80022ac <HAL_GPIO_Init+0x30c>)
 80021da:	69fb      	ldr	r3, [r7, #28]
 80021dc:	089b      	lsrs	r3, r3, #2
 80021de:	3302      	adds	r3, #2
 80021e0:	69ba      	ldr	r2, [r7, #24]
 80021e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80021e6:	4b3a      	ldr	r3, [pc, #232]	; (80022d0 <HAL_GPIO_Init+0x330>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021ec:	693b      	ldr	r3, [r7, #16]
 80021ee:	43db      	mvns	r3, r3
 80021f0:	69ba      	ldr	r2, [r7, #24]
 80021f2:	4013      	ands	r3, r2
 80021f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	685b      	ldr	r3, [r3, #4]
 80021fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d003      	beq.n	800220a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002202:	69ba      	ldr	r2, [r7, #24]
 8002204:	693b      	ldr	r3, [r7, #16]
 8002206:	4313      	orrs	r3, r2
 8002208:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800220a:	4a31      	ldr	r2, [pc, #196]	; (80022d0 <HAL_GPIO_Init+0x330>)
 800220c:	69bb      	ldr	r3, [r7, #24]
 800220e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002210:	4b2f      	ldr	r3, [pc, #188]	; (80022d0 <HAL_GPIO_Init+0x330>)
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002216:	693b      	ldr	r3, [r7, #16]
 8002218:	43db      	mvns	r3, r3
 800221a:	69ba      	ldr	r2, [r7, #24]
 800221c:	4013      	ands	r3, r2
 800221e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	685b      	ldr	r3, [r3, #4]
 8002224:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002228:	2b00      	cmp	r3, #0
 800222a:	d003      	beq.n	8002234 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800222c:	69ba      	ldr	r2, [r7, #24]
 800222e:	693b      	ldr	r3, [r7, #16]
 8002230:	4313      	orrs	r3, r2
 8002232:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002234:	4a26      	ldr	r2, [pc, #152]	; (80022d0 <HAL_GPIO_Init+0x330>)
 8002236:	69bb      	ldr	r3, [r7, #24]
 8002238:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800223a:	4b25      	ldr	r3, [pc, #148]	; (80022d0 <HAL_GPIO_Init+0x330>)
 800223c:	689b      	ldr	r3, [r3, #8]
 800223e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002240:	693b      	ldr	r3, [r7, #16]
 8002242:	43db      	mvns	r3, r3
 8002244:	69ba      	ldr	r2, [r7, #24]
 8002246:	4013      	ands	r3, r2
 8002248:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	685b      	ldr	r3, [r3, #4]
 800224e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002252:	2b00      	cmp	r3, #0
 8002254:	d003      	beq.n	800225e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002256:	69ba      	ldr	r2, [r7, #24]
 8002258:	693b      	ldr	r3, [r7, #16]
 800225a:	4313      	orrs	r3, r2
 800225c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800225e:	4a1c      	ldr	r2, [pc, #112]	; (80022d0 <HAL_GPIO_Init+0x330>)
 8002260:	69bb      	ldr	r3, [r7, #24]
 8002262:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002264:	4b1a      	ldr	r3, [pc, #104]	; (80022d0 <HAL_GPIO_Init+0x330>)
 8002266:	68db      	ldr	r3, [r3, #12]
 8002268:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800226a:	693b      	ldr	r3, [r7, #16]
 800226c:	43db      	mvns	r3, r3
 800226e:	69ba      	ldr	r2, [r7, #24]
 8002270:	4013      	ands	r3, r2
 8002272:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	685b      	ldr	r3, [r3, #4]
 8002278:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800227c:	2b00      	cmp	r3, #0
 800227e:	d003      	beq.n	8002288 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002280:	69ba      	ldr	r2, [r7, #24]
 8002282:	693b      	ldr	r3, [r7, #16]
 8002284:	4313      	orrs	r3, r2
 8002286:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002288:	4a11      	ldr	r2, [pc, #68]	; (80022d0 <HAL_GPIO_Init+0x330>)
 800228a:	69bb      	ldr	r3, [r7, #24]
 800228c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800228e:	69fb      	ldr	r3, [r7, #28]
 8002290:	3301      	adds	r3, #1
 8002292:	61fb      	str	r3, [r7, #28]
 8002294:	69fb      	ldr	r3, [r7, #28]
 8002296:	2b0f      	cmp	r3, #15
 8002298:	f67f ae90 	bls.w	8001fbc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800229c:	bf00      	nop
 800229e:	3724      	adds	r7, #36	; 0x24
 80022a0:	46bd      	mov	sp, r7
 80022a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a6:	4770      	bx	lr
 80022a8:	40023800 	.word	0x40023800
 80022ac:	40013800 	.word	0x40013800
 80022b0:	40020000 	.word	0x40020000
 80022b4:	40020400 	.word	0x40020400
 80022b8:	40020800 	.word	0x40020800
 80022bc:	40020c00 	.word	0x40020c00
 80022c0:	40021000 	.word	0x40021000
 80022c4:	40021400 	.word	0x40021400
 80022c8:	40021800 	.word	0x40021800
 80022cc:	40021c00 	.word	0x40021c00
 80022d0:	40013c00 	.word	0x40013c00

080022d4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80022d4:	b480      	push	{r7}
 80022d6:	b085      	sub	sp, #20
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
 80022dc:	460b      	mov	r3, r1
 80022de:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	691a      	ldr	r2, [r3, #16]
 80022e4:	887b      	ldrh	r3, [r7, #2]
 80022e6:	4013      	ands	r3, r2
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d002      	beq.n	80022f2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80022ec:	2301      	movs	r3, #1
 80022ee:	73fb      	strb	r3, [r7, #15]
 80022f0:	e001      	b.n	80022f6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80022f2:	2300      	movs	r3, #0
 80022f4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80022f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80022f8:	4618      	mov	r0, r3
 80022fa:	3714      	adds	r7, #20
 80022fc:	46bd      	mov	sp, r7
 80022fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002302:	4770      	bx	lr

08002304 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002304:	b480      	push	{r7}
 8002306:	b083      	sub	sp, #12
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
 800230c:	460b      	mov	r3, r1
 800230e:	807b      	strh	r3, [r7, #2]
 8002310:	4613      	mov	r3, r2
 8002312:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002314:	787b      	ldrb	r3, [r7, #1]
 8002316:	2b00      	cmp	r3, #0
 8002318:	d003      	beq.n	8002322 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800231a:	887a      	ldrh	r2, [r7, #2]
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002320:	e003      	b.n	800232a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002322:	887b      	ldrh	r3, [r7, #2]
 8002324:	041a      	lsls	r2, r3, #16
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	619a      	str	r2, [r3, #24]
}
 800232a:	bf00      	nop
 800232c:	370c      	adds	r7, #12
 800232e:	46bd      	mov	sp, r7
 8002330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002334:	4770      	bx	lr
	...

08002338 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b086      	sub	sp, #24
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2b00      	cmp	r3, #0
 8002344:	d101      	bne.n	800234a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002346:	2301      	movs	r3, #1
 8002348:	e22d      	b.n	80027a6 <HAL_RCC_OscConfig+0x46e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f003 0301 	and.w	r3, r3, #1
 8002352:	2b00      	cmp	r3, #0
 8002354:	d075      	beq.n	8002442 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002356:	4ba3      	ldr	r3, [pc, #652]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 8002358:	689b      	ldr	r3, [r3, #8]
 800235a:	f003 030c 	and.w	r3, r3, #12
 800235e:	2b04      	cmp	r3, #4
 8002360:	d00c      	beq.n	800237c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002362:	4ba0      	ldr	r3, [pc, #640]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 8002364:	689b      	ldr	r3, [r3, #8]
 8002366:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800236a:	2b08      	cmp	r3, #8
 800236c:	d112      	bne.n	8002394 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800236e:	4b9d      	ldr	r3, [pc, #628]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002376:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800237a:	d10b      	bne.n	8002394 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800237c:	4b99      	ldr	r3, [pc, #612]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002384:	2b00      	cmp	r3, #0
 8002386:	d05b      	beq.n	8002440 <HAL_RCC_OscConfig+0x108>
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	685b      	ldr	r3, [r3, #4]
 800238c:	2b00      	cmp	r3, #0
 800238e:	d157      	bne.n	8002440 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002390:	2301      	movs	r3, #1
 8002392:	e208      	b.n	80027a6 <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800239c:	d106      	bne.n	80023ac <HAL_RCC_OscConfig+0x74>
 800239e:	4b91      	ldr	r3, [pc, #580]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	4a90      	ldr	r2, [pc, #576]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 80023a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023a8:	6013      	str	r3, [r2, #0]
 80023aa:	e01d      	b.n	80023e8 <HAL_RCC_OscConfig+0xb0>
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80023b4:	d10c      	bne.n	80023d0 <HAL_RCC_OscConfig+0x98>
 80023b6:	4b8b      	ldr	r3, [pc, #556]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	4a8a      	ldr	r2, [pc, #552]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 80023bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80023c0:	6013      	str	r3, [r2, #0]
 80023c2:	4b88      	ldr	r3, [pc, #544]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	4a87      	ldr	r2, [pc, #540]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 80023c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023cc:	6013      	str	r3, [r2, #0]
 80023ce:	e00b      	b.n	80023e8 <HAL_RCC_OscConfig+0xb0>
 80023d0:	4b84      	ldr	r3, [pc, #528]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	4a83      	ldr	r2, [pc, #524]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 80023d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023da:	6013      	str	r3, [r2, #0]
 80023dc:	4b81      	ldr	r3, [pc, #516]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	4a80      	ldr	r2, [pc, #512]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 80023e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	685b      	ldr	r3, [r3, #4]
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d013      	beq.n	8002418 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023f0:	f7fe fe08 	bl	8001004 <HAL_GetTick>
 80023f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023f6:	e008      	b.n	800240a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80023f8:	f7fe fe04 	bl	8001004 <HAL_GetTick>
 80023fc:	4602      	mov	r2, r0
 80023fe:	693b      	ldr	r3, [r7, #16]
 8002400:	1ad3      	subs	r3, r2, r3
 8002402:	2b64      	cmp	r3, #100	; 0x64
 8002404:	d901      	bls.n	800240a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002406:	2303      	movs	r3, #3
 8002408:	e1cd      	b.n	80027a6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800240a:	4b76      	ldr	r3, [pc, #472]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002412:	2b00      	cmp	r3, #0
 8002414:	d0f0      	beq.n	80023f8 <HAL_RCC_OscConfig+0xc0>
 8002416:	e014      	b.n	8002442 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002418:	f7fe fdf4 	bl	8001004 <HAL_GetTick>
 800241c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800241e:	e008      	b.n	8002432 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002420:	f7fe fdf0 	bl	8001004 <HAL_GetTick>
 8002424:	4602      	mov	r2, r0
 8002426:	693b      	ldr	r3, [r7, #16]
 8002428:	1ad3      	subs	r3, r2, r3
 800242a:	2b64      	cmp	r3, #100	; 0x64
 800242c:	d901      	bls.n	8002432 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800242e:	2303      	movs	r3, #3
 8002430:	e1b9      	b.n	80027a6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002432:	4b6c      	ldr	r3, [pc, #432]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800243a:	2b00      	cmp	r3, #0
 800243c:	d1f0      	bne.n	8002420 <HAL_RCC_OscConfig+0xe8>
 800243e:	e000      	b.n	8002442 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002440:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f003 0302 	and.w	r3, r3, #2
 800244a:	2b00      	cmp	r3, #0
 800244c:	d063      	beq.n	8002516 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800244e:	4b65      	ldr	r3, [pc, #404]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 8002450:	689b      	ldr	r3, [r3, #8]
 8002452:	f003 030c 	and.w	r3, r3, #12
 8002456:	2b00      	cmp	r3, #0
 8002458:	d00b      	beq.n	8002472 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800245a:	4b62      	ldr	r3, [pc, #392]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 800245c:	689b      	ldr	r3, [r3, #8]
 800245e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002462:	2b08      	cmp	r3, #8
 8002464:	d11c      	bne.n	80024a0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002466:	4b5f      	ldr	r3, [pc, #380]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800246e:	2b00      	cmp	r3, #0
 8002470:	d116      	bne.n	80024a0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002472:	4b5c      	ldr	r3, [pc, #368]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f003 0302 	and.w	r3, r3, #2
 800247a:	2b00      	cmp	r3, #0
 800247c:	d005      	beq.n	800248a <HAL_RCC_OscConfig+0x152>
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	68db      	ldr	r3, [r3, #12]
 8002482:	2b01      	cmp	r3, #1
 8002484:	d001      	beq.n	800248a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002486:	2301      	movs	r3, #1
 8002488:	e18d      	b.n	80027a6 <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800248a:	4b56      	ldr	r3, [pc, #344]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	691b      	ldr	r3, [r3, #16]
 8002496:	00db      	lsls	r3, r3, #3
 8002498:	4952      	ldr	r1, [pc, #328]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 800249a:	4313      	orrs	r3, r2
 800249c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800249e:	e03a      	b.n	8002516 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	68db      	ldr	r3, [r3, #12]
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d020      	beq.n	80024ea <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80024a8:	4b4f      	ldr	r3, [pc, #316]	; (80025e8 <HAL_RCC_OscConfig+0x2b0>)
 80024aa:	2201      	movs	r2, #1
 80024ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024ae:	f7fe fda9 	bl	8001004 <HAL_GetTick>
 80024b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024b4:	e008      	b.n	80024c8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80024b6:	f7fe fda5 	bl	8001004 <HAL_GetTick>
 80024ba:	4602      	mov	r2, r0
 80024bc:	693b      	ldr	r3, [r7, #16]
 80024be:	1ad3      	subs	r3, r2, r3
 80024c0:	2b02      	cmp	r3, #2
 80024c2:	d901      	bls.n	80024c8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80024c4:	2303      	movs	r3, #3
 80024c6:	e16e      	b.n	80027a6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024c8:	4b46      	ldr	r3, [pc, #280]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f003 0302 	and.w	r3, r3, #2
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d0f0      	beq.n	80024b6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024d4:	4b43      	ldr	r3, [pc, #268]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	691b      	ldr	r3, [r3, #16]
 80024e0:	00db      	lsls	r3, r3, #3
 80024e2:	4940      	ldr	r1, [pc, #256]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 80024e4:	4313      	orrs	r3, r2
 80024e6:	600b      	str	r3, [r1, #0]
 80024e8:	e015      	b.n	8002516 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80024ea:	4b3f      	ldr	r3, [pc, #252]	; (80025e8 <HAL_RCC_OscConfig+0x2b0>)
 80024ec:	2200      	movs	r2, #0
 80024ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024f0:	f7fe fd88 	bl	8001004 <HAL_GetTick>
 80024f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024f6:	e008      	b.n	800250a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80024f8:	f7fe fd84 	bl	8001004 <HAL_GetTick>
 80024fc:	4602      	mov	r2, r0
 80024fe:	693b      	ldr	r3, [r7, #16]
 8002500:	1ad3      	subs	r3, r2, r3
 8002502:	2b02      	cmp	r3, #2
 8002504:	d901      	bls.n	800250a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002506:	2303      	movs	r3, #3
 8002508:	e14d      	b.n	80027a6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800250a:	4b36      	ldr	r3, [pc, #216]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f003 0302 	and.w	r3, r3, #2
 8002512:	2b00      	cmp	r3, #0
 8002514:	d1f0      	bne.n	80024f8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f003 0308 	and.w	r3, r3, #8
 800251e:	2b00      	cmp	r3, #0
 8002520:	d030      	beq.n	8002584 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	695b      	ldr	r3, [r3, #20]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d016      	beq.n	8002558 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800252a:	4b30      	ldr	r3, [pc, #192]	; (80025ec <HAL_RCC_OscConfig+0x2b4>)
 800252c:	2201      	movs	r2, #1
 800252e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002530:	f7fe fd68 	bl	8001004 <HAL_GetTick>
 8002534:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002536:	e008      	b.n	800254a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002538:	f7fe fd64 	bl	8001004 <HAL_GetTick>
 800253c:	4602      	mov	r2, r0
 800253e:	693b      	ldr	r3, [r7, #16]
 8002540:	1ad3      	subs	r3, r2, r3
 8002542:	2b02      	cmp	r3, #2
 8002544:	d901      	bls.n	800254a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002546:	2303      	movs	r3, #3
 8002548:	e12d      	b.n	80027a6 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800254a:	4b26      	ldr	r3, [pc, #152]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 800254c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800254e:	f003 0302 	and.w	r3, r3, #2
 8002552:	2b00      	cmp	r3, #0
 8002554:	d0f0      	beq.n	8002538 <HAL_RCC_OscConfig+0x200>
 8002556:	e015      	b.n	8002584 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002558:	4b24      	ldr	r3, [pc, #144]	; (80025ec <HAL_RCC_OscConfig+0x2b4>)
 800255a:	2200      	movs	r2, #0
 800255c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800255e:	f7fe fd51 	bl	8001004 <HAL_GetTick>
 8002562:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002564:	e008      	b.n	8002578 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002566:	f7fe fd4d 	bl	8001004 <HAL_GetTick>
 800256a:	4602      	mov	r2, r0
 800256c:	693b      	ldr	r3, [r7, #16]
 800256e:	1ad3      	subs	r3, r2, r3
 8002570:	2b02      	cmp	r3, #2
 8002572:	d901      	bls.n	8002578 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002574:	2303      	movs	r3, #3
 8002576:	e116      	b.n	80027a6 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002578:	4b1a      	ldr	r3, [pc, #104]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 800257a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800257c:	f003 0302 	and.w	r3, r3, #2
 8002580:	2b00      	cmp	r3, #0
 8002582:	d1f0      	bne.n	8002566 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f003 0304 	and.w	r3, r3, #4
 800258c:	2b00      	cmp	r3, #0
 800258e:	f000 80a0 	beq.w	80026d2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002592:	2300      	movs	r3, #0
 8002594:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002596:	4b13      	ldr	r3, [pc, #76]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 8002598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800259a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d10f      	bne.n	80025c2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025a2:	2300      	movs	r3, #0
 80025a4:	60fb      	str	r3, [r7, #12]
 80025a6:	4b0f      	ldr	r3, [pc, #60]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 80025a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025aa:	4a0e      	ldr	r2, [pc, #56]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 80025ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025b0:	6413      	str	r3, [r2, #64]	; 0x40
 80025b2:	4b0c      	ldr	r3, [pc, #48]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 80025b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025ba:	60fb      	str	r3, [r7, #12]
 80025bc:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80025be:	2301      	movs	r3, #1
 80025c0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025c2:	4b0b      	ldr	r3, [pc, #44]	; (80025f0 <HAL_RCC_OscConfig+0x2b8>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d121      	bne.n	8002612 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80025ce:	4b08      	ldr	r3, [pc, #32]	; (80025f0 <HAL_RCC_OscConfig+0x2b8>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	4a07      	ldr	r2, [pc, #28]	; (80025f0 <HAL_RCC_OscConfig+0x2b8>)
 80025d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80025da:	f7fe fd13 	bl	8001004 <HAL_GetTick>
 80025de:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025e0:	e011      	b.n	8002606 <HAL_RCC_OscConfig+0x2ce>
 80025e2:	bf00      	nop
 80025e4:	40023800 	.word	0x40023800
 80025e8:	42470000 	.word	0x42470000
 80025ec:	42470e80 	.word	0x42470e80
 80025f0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025f4:	f7fe fd06 	bl	8001004 <HAL_GetTick>
 80025f8:	4602      	mov	r2, r0
 80025fa:	693b      	ldr	r3, [r7, #16]
 80025fc:	1ad3      	subs	r3, r2, r3
 80025fe:	2b02      	cmp	r3, #2
 8002600:	d901      	bls.n	8002606 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002602:	2303      	movs	r3, #3
 8002604:	e0cf      	b.n	80027a6 <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002606:	4b6a      	ldr	r3, [pc, #424]	; (80027b0 <HAL_RCC_OscConfig+0x478>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800260e:	2b00      	cmp	r3, #0
 8002610:	d0f0      	beq.n	80025f4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	689b      	ldr	r3, [r3, #8]
 8002616:	2b01      	cmp	r3, #1
 8002618:	d106      	bne.n	8002628 <HAL_RCC_OscConfig+0x2f0>
 800261a:	4b66      	ldr	r3, [pc, #408]	; (80027b4 <HAL_RCC_OscConfig+0x47c>)
 800261c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800261e:	4a65      	ldr	r2, [pc, #404]	; (80027b4 <HAL_RCC_OscConfig+0x47c>)
 8002620:	f043 0301 	orr.w	r3, r3, #1
 8002624:	6713      	str	r3, [r2, #112]	; 0x70
 8002626:	e01c      	b.n	8002662 <HAL_RCC_OscConfig+0x32a>
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	689b      	ldr	r3, [r3, #8]
 800262c:	2b05      	cmp	r3, #5
 800262e:	d10c      	bne.n	800264a <HAL_RCC_OscConfig+0x312>
 8002630:	4b60      	ldr	r3, [pc, #384]	; (80027b4 <HAL_RCC_OscConfig+0x47c>)
 8002632:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002634:	4a5f      	ldr	r2, [pc, #380]	; (80027b4 <HAL_RCC_OscConfig+0x47c>)
 8002636:	f043 0304 	orr.w	r3, r3, #4
 800263a:	6713      	str	r3, [r2, #112]	; 0x70
 800263c:	4b5d      	ldr	r3, [pc, #372]	; (80027b4 <HAL_RCC_OscConfig+0x47c>)
 800263e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002640:	4a5c      	ldr	r2, [pc, #368]	; (80027b4 <HAL_RCC_OscConfig+0x47c>)
 8002642:	f043 0301 	orr.w	r3, r3, #1
 8002646:	6713      	str	r3, [r2, #112]	; 0x70
 8002648:	e00b      	b.n	8002662 <HAL_RCC_OscConfig+0x32a>
 800264a:	4b5a      	ldr	r3, [pc, #360]	; (80027b4 <HAL_RCC_OscConfig+0x47c>)
 800264c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800264e:	4a59      	ldr	r2, [pc, #356]	; (80027b4 <HAL_RCC_OscConfig+0x47c>)
 8002650:	f023 0301 	bic.w	r3, r3, #1
 8002654:	6713      	str	r3, [r2, #112]	; 0x70
 8002656:	4b57      	ldr	r3, [pc, #348]	; (80027b4 <HAL_RCC_OscConfig+0x47c>)
 8002658:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800265a:	4a56      	ldr	r2, [pc, #344]	; (80027b4 <HAL_RCC_OscConfig+0x47c>)
 800265c:	f023 0304 	bic.w	r3, r3, #4
 8002660:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	689b      	ldr	r3, [r3, #8]
 8002666:	2b00      	cmp	r3, #0
 8002668:	d015      	beq.n	8002696 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800266a:	f7fe fccb 	bl	8001004 <HAL_GetTick>
 800266e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002670:	e00a      	b.n	8002688 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002672:	f7fe fcc7 	bl	8001004 <HAL_GetTick>
 8002676:	4602      	mov	r2, r0
 8002678:	693b      	ldr	r3, [r7, #16]
 800267a:	1ad3      	subs	r3, r2, r3
 800267c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002680:	4293      	cmp	r3, r2
 8002682:	d901      	bls.n	8002688 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002684:	2303      	movs	r3, #3
 8002686:	e08e      	b.n	80027a6 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002688:	4b4a      	ldr	r3, [pc, #296]	; (80027b4 <HAL_RCC_OscConfig+0x47c>)
 800268a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800268c:	f003 0302 	and.w	r3, r3, #2
 8002690:	2b00      	cmp	r3, #0
 8002692:	d0ee      	beq.n	8002672 <HAL_RCC_OscConfig+0x33a>
 8002694:	e014      	b.n	80026c0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002696:	f7fe fcb5 	bl	8001004 <HAL_GetTick>
 800269a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800269c:	e00a      	b.n	80026b4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800269e:	f7fe fcb1 	bl	8001004 <HAL_GetTick>
 80026a2:	4602      	mov	r2, r0
 80026a4:	693b      	ldr	r3, [r7, #16]
 80026a6:	1ad3      	subs	r3, r2, r3
 80026a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80026ac:	4293      	cmp	r3, r2
 80026ae:	d901      	bls.n	80026b4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80026b0:	2303      	movs	r3, #3
 80026b2:	e078      	b.n	80027a6 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026b4:	4b3f      	ldr	r3, [pc, #252]	; (80027b4 <HAL_RCC_OscConfig+0x47c>)
 80026b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026b8:	f003 0302 	and.w	r3, r3, #2
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d1ee      	bne.n	800269e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80026c0:	7dfb      	ldrb	r3, [r7, #23]
 80026c2:	2b01      	cmp	r3, #1
 80026c4:	d105      	bne.n	80026d2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026c6:	4b3b      	ldr	r3, [pc, #236]	; (80027b4 <HAL_RCC_OscConfig+0x47c>)
 80026c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ca:	4a3a      	ldr	r2, [pc, #232]	; (80027b4 <HAL_RCC_OscConfig+0x47c>)
 80026cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80026d0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	699b      	ldr	r3, [r3, #24]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d064      	beq.n	80027a4 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80026da:	4b36      	ldr	r3, [pc, #216]	; (80027b4 <HAL_RCC_OscConfig+0x47c>)
 80026dc:	689b      	ldr	r3, [r3, #8]
 80026de:	f003 030c 	and.w	r3, r3, #12
 80026e2:	2b08      	cmp	r3, #8
 80026e4:	d05c      	beq.n	80027a0 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	699b      	ldr	r3, [r3, #24]
 80026ea:	2b02      	cmp	r3, #2
 80026ec:	d141      	bne.n	8002772 <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026ee:	4b32      	ldr	r3, [pc, #200]	; (80027b8 <HAL_RCC_OscConfig+0x480>)
 80026f0:	2200      	movs	r2, #0
 80026f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026f4:	f7fe fc86 	bl	8001004 <HAL_GetTick>
 80026f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026fa:	e008      	b.n	800270e <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026fc:	f7fe fc82 	bl	8001004 <HAL_GetTick>
 8002700:	4602      	mov	r2, r0
 8002702:	693b      	ldr	r3, [r7, #16]
 8002704:	1ad3      	subs	r3, r2, r3
 8002706:	2b02      	cmp	r3, #2
 8002708:	d901      	bls.n	800270e <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 800270a:	2303      	movs	r3, #3
 800270c:	e04b      	b.n	80027a6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800270e:	4b29      	ldr	r3, [pc, #164]	; (80027b4 <HAL_RCC_OscConfig+0x47c>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002716:	2b00      	cmp	r3, #0
 8002718:	d1f0      	bne.n	80026fc <HAL_RCC_OscConfig+0x3c4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	69da      	ldr	r2, [r3, #28]
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6a1b      	ldr	r3, [r3, #32]
 8002722:	431a      	orrs	r2, r3
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002728:	019b      	lsls	r3, r3, #6
 800272a:	431a      	orrs	r2, r3
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002730:	085b      	lsrs	r3, r3, #1
 8002732:	3b01      	subs	r3, #1
 8002734:	041b      	lsls	r3, r3, #16
 8002736:	431a      	orrs	r2, r3
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800273c:	061b      	lsls	r3, r3, #24
 800273e:	491d      	ldr	r1, [pc, #116]	; (80027b4 <HAL_RCC_OscConfig+0x47c>)
 8002740:	4313      	orrs	r3, r2
 8002742:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002744:	4b1c      	ldr	r3, [pc, #112]	; (80027b8 <HAL_RCC_OscConfig+0x480>)
 8002746:	2201      	movs	r2, #1
 8002748:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800274a:	f7fe fc5b 	bl	8001004 <HAL_GetTick>
 800274e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002750:	e008      	b.n	8002764 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002752:	f7fe fc57 	bl	8001004 <HAL_GetTick>
 8002756:	4602      	mov	r2, r0
 8002758:	693b      	ldr	r3, [r7, #16]
 800275a:	1ad3      	subs	r3, r2, r3
 800275c:	2b02      	cmp	r3, #2
 800275e:	d901      	bls.n	8002764 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8002760:	2303      	movs	r3, #3
 8002762:	e020      	b.n	80027a6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002764:	4b13      	ldr	r3, [pc, #76]	; (80027b4 <HAL_RCC_OscConfig+0x47c>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800276c:	2b00      	cmp	r3, #0
 800276e:	d0f0      	beq.n	8002752 <HAL_RCC_OscConfig+0x41a>
 8002770:	e018      	b.n	80027a4 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002772:	4b11      	ldr	r3, [pc, #68]	; (80027b8 <HAL_RCC_OscConfig+0x480>)
 8002774:	2200      	movs	r2, #0
 8002776:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002778:	f7fe fc44 	bl	8001004 <HAL_GetTick>
 800277c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800277e:	e008      	b.n	8002792 <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002780:	f7fe fc40 	bl	8001004 <HAL_GetTick>
 8002784:	4602      	mov	r2, r0
 8002786:	693b      	ldr	r3, [r7, #16]
 8002788:	1ad3      	subs	r3, r2, r3
 800278a:	2b02      	cmp	r3, #2
 800278c:	d901      	bls.n	8002792 <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 800278e:	2303      	movs	r3, #3
 8002790:	e009      	b.n	80027a6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002792:	4b08      	ldr	r3, [pc, #32]	; (80027b4 <HAL_RCC_OscConfig+0x47c>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800279a:	2b00      	cmp	r3, #0
 800279c:	d1f0      	bne.n	8002780 <HAL_RCC_OscConfig+0x448>
 800279e:	e001      	b.n	80027a4 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80027a0:	2301      	movs	r3, #1
 80027a2:	e000      	b.n	80027a6 <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 80027a4:	2300      	movs	r3, #0
}
 80027a6:	4618      	mov	r0, r3
 80027a8:	3718      	adds	r7, #24
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bd80      	pop	{r7, pc}
 80027ae:	bf00      	nop
 80027b0:	40007000 	.word	0x40007000
 80027b4:	40023800 	.word	0x40023800
 80027b8:	42470060 	.word	0x42470060

080027bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b084      	sub	sp, #16
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
 80027c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d101      	bne.n	80027d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80027cc:	2301      	movs	r3, #1
 80027ce:	e0ca      	b.n	8002966 <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80027d0:	4b67      	ldr	r3, [pc, #412]	; (8002970 <HAL_RCC_ClockConfig+0x1b4>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f003 030f 	and.w	r3, r3, #15
 80027d8:	683a      	ldr	r2, [r7, #0]
 80027da:	429a      	cmp	r2, r3
 80027dc:	d90c      	bls.n	80027f8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027de:	4b64      	ldr	r3, [pc, #400]	; (8002970 <HAL_RCC_ClockConfig+0x1b4>)
 80027e0:	683a      	ldr	r2, [r7, #0]
 80027e2:	b2d2      	uxtb	r2, r2
 80027e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80027e6:	4b62      	ldr	r3, [pc, #392]	; (8002970 <HAL_RCC_ClockConfig+0x1b4>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f003 030f 	and.w	r3, r3, #15
 80027ee:	683a      	ldr	r2, [r7, #0]
 80027f0:	429a      	cmp	r2, r3
 80027f2:	d001      	beq.n	80027f8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80027f4:	2301      	movs	r3, #1
 80027f6:	e0b6      	b.n	8002966 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f003 0302 	and.w	r3, r3, #2
 8002800:	2b00      	cmp	r3, #0
 8002802:	d020      	beq.n	8002846 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f003 0304 	and.w	r3, r3, #4
 800280c:	2b00      	cmp	r3, #0
 800280e:	d005      	beq.n	800281c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002810:	4b58      	ldr	r3, [pc, #352]	; (8002974 <HAL_RCC_ClockConfig+0x1b8>)
 8002812:	689b      	ldr	r3, [r3, #8]
 8002814:	4a57      	ldr	r2, [pc, #348]	; (8002974 <HAL_RCC_ClockConfig+0x1b8>)
 8002816:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800281a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f003 0308 	and.w	r3, r3, #8
 8002824:	2b00      	cmp	r3, #0
 8002826:	d005      	beq.n	8002834 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002828:	4b52      	ldr	r3, [pc, #328]	; (8002974 <HAL_RCC_ClockConfig+0x1b8>)
 800282a:	689b      	ldr	r3, [r3, #8]
 800282c:	4a51      	ldr	r2, [pc, #324]	; (8002974 <HAL_RCC_ClockConfig+0x1b8>)
 800282e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002832:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002834:	4b4f      	ldr	r3, [pc, #316]	; (8002974 <HAL_RCC_ClockConfig+0x1b8>)
 8002836:	689b      	ldr	r3, [r3, #8]
 8002838:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	689b      	ldr	r3, [r3, #8]
 8002840:	494c      	ldr	r1, [pc, #304]	; (8002974 <HAL_RCC_ClockConfig+0x1b8>)
 8002842:	4313      	orrs	r3, r2
 8002844:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f003 0301 	and.w	r3, r3, #1
 800284e:	2b00      	cmp	r3, #0
 8002850:	d044      	beq.n	80028dc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	685b      	ldr	r3, [r3, #4]
 8002856:	2b01      	cmp	r3, #1
 8002858:	d107      	bne.n	800286a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800285a:	4b46      	ldr	r3, [pc, #280]	; (8002974 <HAL_RCC_ClockConfig+0x1b8>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002862:	2b00      	cmp	r3, #0
 8002864:	d119      	bne.n	800289a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002866:	2301      	movs	r3, #1
 8002868:	e07d      	b.n	8002966 <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	685b      	ldr	r3, [r3, #4]
 800286e:	2b02      	cmp	r3, #2
 8002870:	d003      	beq.n	800287a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002876:	2b03      	cmp	r3, #3
 8002878:	d107      	bne.n	800288a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800287a:	4b3e      	ldr	r3, [pc, #248]	; (8002974 <HAL_RCC_ClockConfig+0x1b8>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002882:	2b00      	cmp	r3, #0
 8002884:	d109      	bne.n	800289a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002886:	2301      	movs	r3, #1
 8002888:	e06d      	b.n	8002966 <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800288a:	4b3a      	ldr	r3, [pc, #232]	; (8002974 <HAL_RCC_ClockConfig+0x1b8>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f003 0302 	and.w	r3, r3, #2
 8002892:	2b00      	cmp	r3, #0
 8002894:	d101      	bne.n	800289a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002896:	2301      	movs	r3, #1
 8002898:	e065      	b.n	8002966 <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800289a:	4b36      	ldr	r3, [pc, #216]	; (8002974 <HAL_RCC_ClockConfig+0x1b8>)
 800289c:	689b      	ldr	r3, [r3, #8]
 800289e:	f023 0203 	bic.w	r2, r3, #3
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	4933      	ldr	r1, [pc, #204]	; (8002974 <HAL_RCC_ClockConfig+0x1b8>)
 80028a8:	4313      	orrs	r3, r2
 80028aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80028ac:	f7fe fbaa 	bl	8001004 <HAL_GetTick>
 80028b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028b2:	e00a      	b.n	80028ca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028b4:	f7fe fba6 	bl	8001004 <HAL_GetTick>
 80028b8:	4602      	mov	r2, r0
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	1ad3      	subs	r3, r2, r3
 80028be:	f241 3288 	movw	r2, #5000	; 0x1388
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d901      	bls.n	80028ca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80028c6:	2303      	movs	r3, #3
 80028c8:	e04d      	b.n	8002966 <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028ca:	4b2a      	ldr	r3, [pc, #168]	; (8002974 <HAL_RCC_ClockConfig+0x1b8>)
 80028cc:	689b      	ldr	r3, [r3, #8]
 80028ce:	f003 020c 	and.w	r2, r3, #12
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	685b      	ldr	r3, [r3, #4]
 80028d6:	009b      	lsls	r3, r3, #2
 80028d8:	429a      	cmp	r2, r3
 80028da:	d1eb      	bne.n	80028b4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80028dc:	4b24      	ldr	r3, [pc, #144]	; (8002970 <HAL_RCC_ClockConfig+0x1b4>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f003 030f 	and.w	r3, r3, #15
 80028e4:	683a      	ldr	r2, [r7, #0]
 80028e6:	429a      	cmp	r2, r3
 80028e8:	d20c      	bcs.n	8002904 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028ea:	4b21      	ldr	r3, [pc, #132]	; (8002970 <HAL_RCC_ClockConfig+0x1b4>)
 80028ec:	683a      	ldr	r2, [r7, #0]
 80028ee:	b2d2      	uxtb	r2, r2
 80028f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80028f2:	4b1f      	ldr	r3, [pc, #124]	; (8002970 <HAL_RCC_ClockConfig+0x1b4>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f003 030f 	and.w	r3, r3, #15
 80028fa:	683a      	ldr	r2, [r7, #0]
 80028fc:	429a      	cmp	r2, r3
 80028fe:	d001      	beq.n	8002904 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002900:	2301      	movs	r3, #1
 8002902:	e030      	b.n	8002966 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f003 0304 	and.w	r3, r3, #4
 800290c:	2b00      	cmp	r3, #0
 800290e:	d008      	beq.n	8002922 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002910:	4b18      	ldr	r3, [pc, #96]	; (8002974 <HAL_RCC_ClockConfig+0x1b8>)
 8002912:	689b      	ldr	r3, [r3, #8]
 8002914:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	68db      	ldr	r3, [r3, #12]
 800291c:	4915      	ldr	r1, [pc, #84]	; (8002974 <HAL_RCC_ClockConfig+0x1b8>)
 800291e:	4313      	orrs	r3, r2
 8002920:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f003 0308 	and.w	r3, r3, #8
 800292a:	2b00      	cmp	r3, #0
 800292c:	d009      	beq.n	8002942 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800292e:	4b11      	ldr	r3, [pc, #68]	; (8002974 <HAL_RCC_ClockConfig+0x1b8>)
 8002930:	689b      	ldr	r3, [r3, #8]
 8002932:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	691b      	ldr	r3, [r3, #16]
 800293a:	00db      	lsls	r3, r3, #3
 800293c:	490d      	ldr	r1, [pc, #52]	; (8002974 <HAL_RCC_ClockConfig+0x1b8>)
 800293e:	4313      	orrs	r3, r2
 8002940:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002942:	f000 f81d 	bl	8002980 <HAL_RCC_GetSysClockFreq>
 8002946:	4601      	mov	r1, r0
 8002948:	4b0a      	ldr	r3, [pc, #40]	; (8002974 <HAL_RCC_ClockConfig+0x1b8>)
 800294a:	689b      	ldr	r3, [r3, #8]
 800294c:	091b      	lsrs	r3, r3, #4
 800294e:	f003 030f 	and.w	r3, r3, #15
 8002952:	4a09      	ldr	r2, [pc, #36]	; (8002978 <HAL_RCC_ClockConfig+0x1bc>)
 8002954:	5cd3      	ldrb	r3, [r2, r3]
 8002956:	fa21 f303 	lsr.w	r3, r1, r3
 800295a:	4a08      	ldr	r2, [pc, #32]	; (800297c <HAL_RCC_ClockConfig+0x1c0>)
 800295c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 800295e:	2000      	movs	r0, #0
 8002960:	f7fe fb0c 	bl	8000f7c <HAL_InitTick>

  return HAL_OK;
 8002964:	2300      	movs	r3, #0
}
 8002966:	4618      	mov	r0, r3
 8002968:	3710      	adds	r7, #16
 800296a:	46bd      	mov	sp, r7
 800296c:	bd80      	pop	{r7, pc}
 800296e:	bf00      	nop
 8002970:	40023c00 	.word	0x40023c00
 8002974:	40023800 	.word	0x40023800
 8002978:	0801208c 	.word	0x0801208c
 800297c:	20000080 	.word	0x20000080

08002980 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002980:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002982:	b085      	sub	sp, #20
 8002984:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002986:	2300      	movs	r3, #0
 8002988:	607b      	str	r3, [r7, #4]
 800298a:	2300      	movs	r3, #0
 800298c:	60fb      	str	r3, [r7, #12]
 800298e:	2300      	movs	r3, #0
 8002990:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002992:	2300      	movs	r3, #0
 8002994:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002996:	4b50      	ldr	r3, [pc, #320]	; (8002ad8 <HAL_RCC_GetSysClockFreq+0x158>)
 8002998:	689b      	ldr	r3, [r3, #8]
 800299a:	f003 030c 	and.w	r3, r3, #12
 800299e:	2b04      	cmp	r3, #4
 80029a0:	d007      	beq.n	80029b2 <HAL_RCC_GetSysClockFreq+0x32>
 80029a2:	2b08      	cmp	r3, #8
 80029a4:	d008      	beq.n	80029b8 <HAL_RCC_GetSysClockFreq+0x38>
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	f040 808d 	bne.w	8002ac6 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80029ac:	4b4b      	ldr	r3, [pc, #300]	; (8002adc <HAL_RCC_GetSysClockFreq+0x15c>)
 80029ae:	60bb      	str	r3, [r7, #8]
       break;
 80029b0:	e08c      	b.n	8002acc <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80029b2:	4b4b      	ldr	r3, [pc, #300]	; (8002ae0 <HAL_RCC_GetSysClockFreq+0x160>)
 80029b4:	60bb      	str	r3, [r7, #8]
      break;
 80029b6:	e089      	b.n	8002acc <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80029b8:	4b47      	ldr	r3, [pc, #284]	; (8002ad8 <HAL_RCC_GetSysClockFreq+0x158>)
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80029c0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80029c2:	4b45      	ldr	r3, [pc, #276]	; (8002ad8 <HAL_RCC_GetSysClockFreq+0x158>)
 80029c4:	685b      	ldr	r3, [r3, #4]
 80029c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d023      	beq.n	8002a16 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80029ce:	4b42      	ldr	r3, [pc, #264]	; (8002ad8 <HAL_RCC_GetSysClockFreq+0x158>)
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	099b      	lsrs	r3, r3, #6
 80029d4:	f04f 0400 	mov.w	r4, #0
 80029d8:	f240 11ff 	movw	r1, #511	; 0x1ff
 80029dc:	f04f 0200 	mov.w	r2, #0
 80029e0:	ea03 0501 	and.w	r5, r3, r1
 80029e4:	ea04 0602 	and.w	r6, r4, r2
 80029e8:	4a3d      	ldr	r2, [pc, #244]	; (8002ae0 <HAL_RCC_GetSysClockFreq+0x160>)
 80029ea:	fb02 f106 	mul.w	r1, r2, r6
 80029ee:	2200      	movs	r2, #0
 80029f0:	fb02 f205 	mul.w	r2, r2, r5
 80029f4:	440a      	add	r2, r1
 80029f6:	493a      	ldr	r1, [pc, #232]	; (8002ae0 <HAL_RCC_GetSysClockFreq+0x160>)
 80029f8:	fba5 0101 	umull	r0, r1, r5, r1
 80029fc:	1853      	adds	r3, r2, r1
 80029fe:	4619      	mov	r1, r3
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	f04f 0400 	mov.w	r4, #0
 8002a06:	461a      	mov	r2, r3
 8002a08:	4623      	mov	r3, r4
 8002a0a:	f7fe f915 	bl	8000c38 <__aeabi_uldivmod>
 8002a0e:	4603      	mov	r3, r0
 8002a10:	460c      	mov	r4, r1
 8002a12:	60fb      	str	r3, [r7, #12]
 8002a14:	e049      	b.n	8002aaa <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a16:	4b30      	ldr	r3, [pc, #192]	; (8002ad8 <HAL_RCC_GetSysClockFreq+0x158>)
 8002a18:	685b      	ldr	r3, [r3, #4]
 8002a1a:	099b      	lsrs	r3, r3, #6
 8002a1c:	f04f 0400 	mov.w	r4, #0
 8002a20:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002a24:	f04f 0200 	mov.w	r2, #0
 8002a28:	ea03 0501 	and.w	r5, r3, r1
 8002a2c:	ea04 0602 	and.w	r6, r4, r2
 8002a30:	4629      	mov	r1, r5
 8002a32:	4632      	mov	r2, r6
 8002a34:	f04f 0300 	mov.w	r3, #0
 8002a38:	f04f 0400 	mov.w	r4, #0
 8002a3c:	0154      	lsls	r4, r2, #5
 8002a3e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002a42:	014b      	lsls	r3, r1, #5
 8002a44:	4619      	mov	r1, r3
 8002a46:	4622      	mov	r2, r4
 8002a48:	1b49      	subs	r1, r1, r5
 8002a4a:	eb62 0206 	sbc.w	r2, r2, r6
 8002a4e:	f04f 0300 	mov.w	r3, #0
 8002a52:	f04f 0400 	mov.w	r4, #0
 8002a56:	0194      	lsls	r4, r2, #6
 8002a58:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002a5c:	018b      	lsls	r3, r1, #6
 8002a5e:	1a5b      	subs	r3, r3, r1
 8002a60:	eb64 0402 	sbc.w	r4, r4, r2
 8002a64:	f04f 0100 	mov.w	r1, #0
 8002a68:	f04f 0200 	mov.w	r2, #0
 8002a6c:	00e2      	lsls	r2, r4, #3
 8002a6e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002a72:	00d9      	lsls	r1, r3, #3
 8002a74:	460b      	mov	r3, r1
 8002a76:	4614      	mov	r4, r2
 8002a78:	195b      	adds	r3, r3, r5
 8002a7a:	eb44 0406 	adc.w	r4, r4, r6
 8002a7e:	f04f 0100 	mov.w	r1, #0
 8002a82:	f04f 0200 	mov.w	r2, #0
 8002a86:	02a2      	lsls	r2, r4, #10
 8002a88:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002a8c:	0299      	lsls	r1, r3, #10
 8002a8e:	460b      	mov	r3, r1
 8002a90:	4614      	mov	r4, r2
 8002a92:	4618      	mov	r0, r3
 8002a94:	4621      	mov	r1, r4
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	f04f 0400 	mov.w	r4, #0
 8002a9c:	461a      	mov	r2, r3
 8002a9e:	4623      	mov	r3, r4
 8002aa0:	f7fe f8ca 	bl	8000c38 <__aeabi_uldivmod>
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	460c      	mov	r4, r1
 8002aa8:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002aaa:	4b0b      	ldr	r3, [pc, #44]	; (8002ad8 <HAL_RCC_GetSysClockFreq+0x158>)
 8002aac:	685b      	ldr	r3, [r3, #4]
 8002aae:	0c1b      	lsrs	r3, r3, #16
 8002ab0:	f003 0303 	and.w	r3, r3, #3
 8002ab4:	3301      	adds	r3, #1
 8002ab6:	005b      	lsls	r3, r3, #1
 8002ab8:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002aba:	68fa      	ldr	r2, [r7, #12]
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ac2:	60bb      	str	r3, [r7, #8]
      break;
 8002ac4:	e002      	b.n	8002acc <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002ac6:	4b05      	ldr	r3, [pc, #20]	; (8002adc <HAL_RCC_GetSysClockFreq+0x15c>)
 8002ac8:	60bb      	str	r3, [r7, #8]
      break;
 8002aca:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002acc:	68bb      	ldr	r3, [r7, #8]
}
 8002ace:	4618      	mov	r0, r3
 8002ad0:	3714      	adds	r7, #20
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002ad6:	bf00      	nop
 8002ad8:	40023800 	.word	0x40023800
 8002adc:	00f42400 	.word	0x00f42400
 8002ae0:	017d7840 	.word	0x017d7840

08002ae4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ae8:	4b03      	ldr	r3, [pc, #12]	; (8002af8 <HAL_RCC_GetHCLKFreq+0x14>)
 8002aea:	681b      	ldr	r3, [r3, #0]
}
 8002aec:	4618      	mov	r0, r3
 8002aee:	46bd      	mov	sp, r7
 8002af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af4:	4770      	bx	lr
 8002af6:	bf00      	nop
 8002af8:	20000080 	.word	0x20000080

08002afc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002b00:	f7ff fff0 	bl	8002ae4 <HAL_RCC_GetHCLKFreq>
 8002b04:	4601      	mov	r1, r0
 8002b06:	4b05      	ldr	r3, [pc, #20]	; (8002b1c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002b08:	689b      	ldr	r3, [r3, #8]
 8002b0a:	0a9b      	lsrs	r3, r3, #10
 8002b0c:	f003 0307 	and.w	r3, r3, #7
 8002b10:	4a03      	ldr	r2, [pc, #12]	; (8002b20 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002b12:	5cd3      	ldrb	r3, [r2, r3]
 8002b14:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002b18:	4618      	mov	r0, r3
 8002b1a:	bd80      	pop	{r7, pc}
 8002b1c:	40023800 	.word	0x40023800
 8002b20:	0801209c 	.word	0x0801209c

08002b24 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002b28:	f7ff ffdc 	bl	8002ae4 <HAL_RCC_GetHCLKFreq>
 8002b2c:	4601      	mov	r1, r0
 8002b2e:	4b05      	ldr	r3, [pc, #20]	; (8002b44 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002b30:	689b      	ldr	r3, [r3, #8]
 8002b32:	0b5b      	lsrs	r3, r3, #13
 8002b34:	f003 0307 	and.w	r3, r3, #7
 8002b38:	4a03      	ldr	r2, [pc, #12]	; (8002b48 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002b3a:	5cd3      	ldrb	r3, [r2, r3]
 8002b3c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002b40:	4618      	mov	r0, r3
 8002b42:	bd80      	pop	{r7, pc}
 8002b44:	40023800 	.word	0x40023800
 8002b48:	0801209c 	.word	0x0801209c

08002b4c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b082      	sub	sp, #8
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d101      	bne.n	8002b5e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	e056      	b.n	8002c0c <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	2200      	movs	r2, #0
 8002b62:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002b6a:	b2db      	uxtb	r3, r3
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d106      	bne.n	8002b7e <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2200      	movs	r2, #0
 8002b74:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002b78:	6878      	ldr	r0, [r7, #4]
 8002b7a:	f00d fbc5 	bl	8010308 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	2202      	movs	r2, #2
 8002b82:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	681a      	ldr	r2, [r3, #0]
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002b94:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	685a      	ldr	r2, [r3, #4]
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	689b      	ldr	r3, [r3, #8]
 8002b9e:	431a      	orrs	r2, r3
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	68db      	ldr	r3, [r3, #12]
 8002ba4:	431a      	orrs	r2, r3
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	691b      	ldr	r3, [r3, #16]
 8002baa:	431a      	orrs	r2, r3
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	695b      	ldr	r3, [r3, #20]
 8002bb0:	431a      	orrs	r2, r3
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	699b      	ldr	r3, [r3, #24]
 8002bb6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002bba:	431a      	orrs	r2, r3
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	69db      	ldr	r3, [r3, #28]
 8002bc0:	431a      	orrs	r2, r3
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6a1b      	ldr	r3, [r3, #32]
 8002bc6:	ea42 0103 	orr.w	r1, r2, r3
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	430a      	orrs	r2, r1
 8002bd4:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	699b      	ldr	r3, [r3, #24]
 8002bda:	0c1b      	lsrs	r3, r3, #16
 8002bdc:	f003 0104 	and.w	r1, r3, #4
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	430a      	orrs	r2, r1
 8002bea:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	69da      	ldr	r2, [r3, #28]
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002bfa:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2200      	movs	r2, #0
 8002c00:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	2201      	movs	r2, #1
 8002c06:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002c0a:	2300      	movs	r3, #0
}
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	3708      	adds	r7, #8
 8002c10:	46bd      	mov	sp, r7
 8002c12:	bd80      	pop	{r7, pc}

08002c14 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b088      	sub	sp, #32
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	60f8      	str	r0, [r7, #12]
 8002c1c:	60b9      	str	r1, [r7, #8]
 8002c1e:	603b      	str	r3, [r7, #0]
 8002c20:	4613      	mov	r3, r2
 8002c22:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002c24:	2300      	movs	r3, #0
 8002c26:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002c2e:	2b01      	cmp	r3, #1
 8002c30:	d101      	bne.n	8002c36 <HAL_SPI_Transmit+0x22>
 8002c32:	2302      	movs	r3, #2
 8002c34:	e11e      	b.n	8002e74 <HAL_SPI_Transmit+0x260>
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	2201      	movs	r2, #1
 8002c3a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002c3e:	f7fe f9e1 	bl	8001004 <HAL_GetTick>
 8002c42:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002c44:	88fb      	ldrh	r3, [r7, #6]
 8002c46:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002c4e:	b2db      	uxtb	r3, r3
 8002c50:	2b01      	cmp	r3, #1
 8002c52:	d002      	beq.n	8002c5a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002c54:	2302      	movs	r3, #2
 8002c56:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002c58:	e103      	b.n	8002e62 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002c5a:	68bb      	ldr	r3, [r7, #8]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d002      	beq.n	8002c66 <HAL_SPI_Transmit+0x52>
 8002c60:	88fb      	ldrh	r3, [r7, #6]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d102      	bne.n	8002c6c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002c66:	2301      	movs	r3, #1
 8002c68:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002c6a:	e0fa      	b.n	8002e62 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	2203      	movs	r2, #3
 8002c70:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	2200      	movs	r2, #0
 8002c78:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	68ba      	ldr	r2, [r7, #8]
 8002c7e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	88fa      	ldrh	r2, [r7, #6]
 8002c84:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	88fa      	ldrh	r2, [r7, #6]
 8002c8a:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	2200      	movs	r2, #0
 8002c90:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	2200      	movs	r2, #0
 8002c96:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	689b      	ldr	r3, [r3, #8]
 8002cae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002cb2:	d107      	bne.n	8002cc4 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	681a      	ldr	r2, [r3, #0]
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002cc2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cce:	2b40      	cmp	r3, #64	; 0x40
 8002cd0:	d007      	beq.n	8002ce2 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	681a      	ldr	r2, [r3, #0]
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002ce0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	68db      	ldr	r3, [r3, #12]
 8002ce6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002cea:	d14b      	bne.n	8002d84 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	685b      	ldr	r3, [r3, #4]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d002      	beq.n	8002cfa <HAL_SPI_Transmit+0xe6>
 8002cf4:	8afb      	ldrh	r3, [r7, #22]
 8002cf6:	2b01      	cmp	r3, #1
 8002cf8:	d13e      	bne.n	8002d78 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cfe:	881a      	ldrh	r2, [r3, #0]
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d0a:	1c9a      	adds	r2, r3, #2
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d14:	b29b      	uxth	r3, r3
 8002d16:	3b01      	subs	r3, #1
 8002d18:	b29a      	uxth	r2, r3
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002d1e:	e02b      	b.n	8002d78 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	689b      	ldr	r3, [r3, #8]
 8002d26:	f003 0302 	and.w	r3, r3, #2
 8002d2a:	2b02      	cmp	r3, #2
 8002d2c:	d112      	bne.n	8002d54 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d32:	881a      	ldrh	r2, [r3, #0]
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d3e:	1c9a      	adds	r2, r3, #2
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d48:	b29b      	uxth	r3, r3
 8002d4a:	3b01      	subs	r3, #1
 8002d4c:	b29a      	uxth	r2, r3
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	86da      	strh	r2, [r3, #54]	; 0x36
 8002d52:	e011      	b.n	8002d78 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002d54:	f7fe f956 	bl	8001004 <HAL_GetTick>
 8002d58:	4602      	mov	r2, r0
 8002d5a:	69bb      	ldr	r3, [r7, #24]
 8002d5c:	1ad3      	subs	r3, r2, r3
 8002d5e:	683a      	ldr	r2, [r7, #0]
 8002d60:	429a      	cmp	r2, r3
 8002d62:	d803      	bhi.n	8002d6c <HAL_SPI_Transmit+0x158>
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d6a:	d102      	bne.n	8002d72 <HAL_SPI_Transmit+0x15e>
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d102      	bne.n	8002d78 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8002d72:	2303      	movs	r3, #3
 8002d74:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002d76:	e074      	b.n	8002e62 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d7c:	b29b      	uxth	r3, r3
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d1ce      	bne.n	8002d20 <HAL_SPI_Transmit+0x10c>
 8002d82:	e04c      	b.n	8002e1e <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	685b      	ldr	r3, [r3, #4]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d002      	beq.n	8002d92 <HAL_SPI_Transmit+0x17e>
 8002d8c:	8afb      	ldrh	r3, [r7, #22]
 8002d8e:	2b01      	cmp	r3, #1
 8002d90:	d140      	bne.n	8002e14 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	330c      	adds	r3, #12
 8002d9c:	7812      	ldrb	r2, [r2, #0]
 8002d9e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002da4:	1c5a      	adds	r2, r3, #1
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002dae:	b29b      	uxth	r3, r3
 8002db0:	3b01      	subs	r3, #1
 8002db2:	b29a      	uxth	r2, r3
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002db8:	e02c      	b.n	8002e14 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	689b      	ldr	r3, [r3, #8]
 8002dc0:	f003 0302 	and.w	r3, r3, #2
 8002dc4:	2b02      	cmp	r3, #2
 8002dc6:	d113      	bne.n	8002df0 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	330c      	adds	r3, #12
 8002dd2:	7812      	ldrb	r2, [r2, #0]
 8002dd4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dda:	1c5a      	adds	r2, r3, #1
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002de4:	b29b      	uxth	r3, r3
 8002de6:	3b01      	subs	r3, #1
 8002de8:	b29a      	uxth	r2, r3
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	86da      	strh	r2, [r3, #54]	; 0x36
 8002dee:	e011      	b.n	8002e14 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002df0:	f7fe f908 	bl	8001004 <HAL_GetTick>
 8002df4:	4602      	mov	r2, r0
 8002df6:	69bb      	ldr	r3, [r7, #24]
 8002df8:	1ad3      	subs	r3, r2, r3
 8002dfa:	683a      	ldr	r2, [r7, #0]
 8002dfc:	429a      	cmp	r2, r3
 8002dfe:	d803      	bhi.n	8002e08 <HAL_SPI_Transmit+0x1f4>
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e06:	d102      	bne.n	8002e0e <HAL_SPI_Transmit+0x1fa>
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d102      	bne.n	8002e14 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8002e0e:	2303      	movs	r3, #3
 8002e10:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002e12:	e026      	b.n	8002e62 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e18:	b29b      	uxth	r3, r3
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d1cd      	bne.n	8002dba <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002e1e:	69ba      	ldr	r2, [r7, #24]
 8002e20:	6839      	ldr	r1, [r7, #0]
 8002e22:	68f8      	ldr	r0, [r7, #12]
 8002e24:	f000 fba4 	bl	8003570 <SPI_EndRxTxTransaction>
 8002e28:	4603      	mov	r3, r0
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d002      	beq.n	8002e34 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	2220      	movs	r2, #32
 8002e32:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	689b      	ldr	r3, [r3, #8]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d10a      	bne.n	8002e52 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	613b      	str	r3, [r7, #16]
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	68db      	ldr	r3, [r3, #12]
 8002e46:	613b      	str	r3, [r7, #16]
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	689b      	ldr	r3, [r3, #8]
 8002e4e:	613b      	str	r3, [r7, #16]
 8002e50:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d002      	beq.n	8002e60 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	77fb      	strb	r3, [r7, #31]
 8002e5e:	e000      	b.n	8002e62 <HAL_SPI_Transmit+0x24e>
  }

error:
 8002e60:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	2201      	movs	r2, #1
 8002e66:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002e72:	7ffb      	ldrb	r3, [r7, #31]
}
 8002e74:	4618      	mov	r0, r3
 8002e76:	3720      	adds	r7, #32
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	bd80      	pop	{r7, pc}

08002e7c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b088      	sub	sp, #32
 8002e80:	af02      	add	r7, sp, #8
 8002e82:	60f8      	str	r0, [r7, #12]
 8002e84:	60b9      	str	r1, [r7, #8]
 8002e86:	603b      	str	r3, [r7, #0]
 8002e88:	4613      	mov	r3, r2
 8002e8a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	685b      	ldr	r3, [r3, #4]
 8002e94:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002e98:	d112      	bne.n	8002ec0 <HAL_SPI_Receive+0x44>
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	689b      	ldr	r3, [r3, #8]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d10e      	bne.n	8002ec0 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	2204      	movs	r2, #4
 8002ea6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002eaa:	88fa      	ldrh	r2, [r7, #6]
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	9300      	str	r3, [sp, #0]
 8002eb0:	4613      	mov	r3, r2
 8002eb2:	68ba      	ldr	r2, [r7, #8]
 8002eb4:	68b9      	ldr	r1, [r7, #8]
 8002eb6:	68f8      	ldr	r0, [r7, #12]
 8002eb8:	f000 f8e9 	bl	800308e <HAL_SPI_TransmitReceive>
 8002ebc:	4603      	mov	r3, r0
 8002ebe:	e0e2      	b.n	8003086 <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002ec6:	2b01      	cmp	r3, #1
 8002ec8:	d101      	bne.n	8002ece <HAL_SPI_Receive+0x52>
 8002eca:	2302      	movs	r3, #2
 8002ecc:	e0db      	b.n	8003086 <HAL_SPI_Receive+0x20a>
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	2201      	movs	r2, #1
 8002ed2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002ed6:	f7fe f895 	bl	8001004 <HAL_GetTick>
 8002eda:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002ee2:	b2db      	uxtb	r3, r3
 8002ee4:	2b01      	cmp	r3, #1
 8002ee6:	d002      	beq.n	8002eee <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8002ee8:	2302      	movs	r3, #2
 8002eea:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002eec:	e0c2      	b.n	8003074 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 8002eee:	68bb      	ldr	r3, [r7, #8]
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d002      	beq.n	8002efa <HAL_SPI_Receive+0x7e>
 8002ef4:	88fb      	ldrh	r3, [r7, #6]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d102      	bne.n	8002f00 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8002efa:	2301      	movs	r3, #1
 8002efc:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002efe:	e0b9      	b.n	8003074 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	2204      	movs	r2, #4
 8002f04:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	68ba      	ldr	r2, [r7, #8]
 8002f12:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	88fa      	ldrh	r2, [r7, #6]
 8002f18:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	88fa      	ldrh	r2, [r7, #6]
 8002f1e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	2200      	movs	r2, #0
 8002f24:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	2200      	movs	r2, #0
 8002f2a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	2200      	movs	r2, #0
 8002f30:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	2200      	movs	r2, #0
 8002f36:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	689b      	ldr	r3, [r3, #8]
 8002f42:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f46:	d107      	bne.n	8002f58 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	681a      	ldr	r2, [r3, #0]
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002f56:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f62:	2b40      	cmp	r3, #64	; 0x40
 8002f64:	d007      	beq.n	8002f76 <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	681a      	ldr	r2, [r3, #0]
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002f74:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	68db      	ldr	r3, [r3, #12]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d162      	bne.n	8003044 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002f7e:	e02e      	b.n	8002fde <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	689b      	ldr	r3, [r3, #8]
 8002f86:	f003 0301 	and.w	r3, r3, #1
 8002f8a:	2b01      	cmp	r3, #1
 8002f8c:	d115      	bne.n	8002fba <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f103 020c 	add.w	r2, r3, #12
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f9a:	7812      	ldrb	r2, [r2, #0]
 8002f9c:	b2d2      	uxtb	r2, r2
 8002f9e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fa4:	1c5a      	adds	r2, r3, #1
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002fae:	b29b      	uxth	r3, r3
 8002fb0:	3b01      	subs	r3, #1
 8002fb2:	b29a      	uxth	r2, r3
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002fb8:	e011      	b.n	8002fde <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002fba:	f7fe f823 	bl	8001004 <HAL_GetTick>
 8002fbe:	4602      	mov	r2, r0
 8002fc0:	693b      	ldr	r3, [r7, #16]
 8002fc2:	1ad3      	subs	r3, r2, r3
 8002fc4:	683a      	ldr	r2, [r7, #0]
 8002fc6:	429a      	cmp	r2, r3
 8002fc8:	d803      	bhi.n	8002fd2 <HAL_SPI_Receive+0x156>
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fd0:	d102      	bne.n	8002fd8 <HAL_SPI_Receive+0x15c>
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d102      	bne.n	8002fde <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 8002fd8:	2303      	movs	r3, #3
 8002fda:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002fdc:	e04a      	b.n	8003074 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002fe2:	b29b      	uxth	r3, r3
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d1cb      	bne.n	8002f80 <HAL_SPI_Receive+0x104>
 8002fe8:	e031      	b.n	800304e <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	689b      	ldr	r3, [r3, #8]
 8002ff0:	f003 0301 	and.w	r3, r3, #1
 8002ff4:	2b01      	cmp	r3, #1
 8002ff6:	d113      	bne.n	8003020 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	68da      	ldr	r2, [r3, #12]
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003002:	b292      	uxth	r2, r2
 8003004:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800300a:	1c9a      	adds	r2, r3, #2
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003014:	b29b      	uxth	r3, r3
 8003016:	3b01      	subs	r3, #1
 8003018:	b29a      	uxth	r2, r3
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800301e:	e011      	b.n	8003044 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003020:	f7fd fff0 	bl	8001004 <HAL_GetTick>
 8003024:	4602      	mov	r2, r0
 8003026:	693b      	ldr	r3, [r7, #16]
 8003028:	1ad3      	subs	r3, r2, r3
 800302a:	683a      	ldr	r2, [r7, #0]
 800302c:	429a      	cmp	r2, r3
 800302e:	d803      	bhi.n	8003038 <HAL_SPI_Receive+0x1bc>
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003036:	d102      	bne.n	800303e <HAL_SPI_Receive+0x1c2>
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	2b00      	cmp	r3, #0
 800303c:	d102      	bne.n	8003044 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 800303e:	2303      	movs	r3, #3
 8003040:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003042:	e017      	b.n	8003074 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003048:	b29b      	uxth	r3, r3
 800304a:	2b00      	cmp	r3, #0
 800304c:	d1cd      	bne.n	8002fea <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800304e:	693a      	ldr	r2, [r7, #16]
 8003050:	6839      	ldr	r1, [r7, #0]
 8003052:	68f8      	ldr	r0, [r7, #12]
 8003054:	f000 fa27 	bl	80034a6 <SPI_EndRxTransaction>
 8003058:	4603      	mov	r3, r0
 800305a:	2b00      	cmp	r3, #0
 800305c:	d002      	beq.n	8003064 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	2220      	movs	r2, #32
 8003062:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003068:	2b00      	cmp	r3, #0
 800306a:	d002      	beq.n	8003072 <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 800306c:	2301      	movs	r3, #1
 800306e:	75fb      	strb	r3, [r7, #23]
 8003070:	e000      	b.n	8003074 <HAL_SPI_Receive+0x1f8>
  }

error :
 8003072:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	2201      	movs	r2, #1
 8003078:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	2200      	movs	r2, #0
 8003080:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003084:	7dfb      	ldrb	r3, [r7, #23]
}
 8003086:	4618      	mov	r0, r3
 8003088:	3718      	adds	r7, #24
 800308a:	46bd      	mov	sp, r7
 800308c:	bd80      	pop	{r7, pc}

0800308e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800308e:	b580      	push	{r7, lr}
 8003090:	b08c      	sub	sp, #48	; 0x30
 8003092:	af00      	add	r7, sp, #0
 8003094:	60f8      	str	r0, [r7, #12]
 8003096:	60b9      	str	r1, [r7, #8]
 8003098:	607a      	str	r2, [r7, #4]
 800309a:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800309c:	2301      	movs	r3, #1
 800309e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80030a0:	2300      	movs	r3, #0
 80030a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80030ac:	2b01      	cmp	r3, #1
 80030ae:	d101      	bne.n	80030b4 <HAL_SPI_TransmitReceive+0x26>
 80030b0:	2302      	movs	r3, #2
 80030b2:	e18a      	b.n	80033ca <HAL_SPI_TransmitReceive+0x33c>
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	2201      	movs	r2, #1
 80030b8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80030bc:	f7fd ffa2 	bl	8001004 <HAL_GetTick>
 80030c0:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80030c8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	685b      	ldr	r3, [r3, #4]
 80030d0:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80030d2:	887b      	ldrh	r3, [r7, #2]
 80030d4:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80030d6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80030da:	2b01      	cmp	r3, #1
 80030dc:	d00f      	beq.n	80030fe <HAL_SPI_TransmitReceive+0x70>
 80030de:	69fb      	ldr	r3, [r7, #28]
 80030e0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80030e4:	d107      	bne.n	80030f6 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	689b      	ldr	r3, [r3, #8]
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d103      	bne.n	80030f6 <HAL_SPI_TransmitReceive+0x68>
 80030ee:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80030f2:	2b04      	cmp	r3, #4
 80030f4:	d003      	beq.n	80030fe <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80030f6:	2302      	movs	r3, #2
 80030f8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80030fc:	e15b      	b.n	80033b6 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80030fe:	68bb      	ldr	r3, [r7, #8]
 8003100:	2b00      	cmp	r3, #0
 8003102:	d005      	beq.n	8003110 <HAL_SPI_TransmitReceive+0x82>
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2b00      	cmp	r3, #0
 8003108:	d002      	beq.n	8003110 <HAL_SPI_TransmitReceive+0x82>
 800310a:	887b      	ldrh	r3, [r7, #2]
 800310c:	2b00      	cmp	r3, #0
 800310e:	d103      	bne.n	8003118 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003110:	2301      	movs	r3, #1
 8003112:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003116:	e14e      	b.n	80033b6 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800311e:	b2db      	uxtb	r3, r3
 8003120:	2b04      	cmp	r3, #4
 8003122:	d003      	beq.n	800312c <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	2205      	movs	r2, #5
 8003128:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	2200      	movs	r2, #0
 8003130:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	687a      	ldr	r2, [r7, #4]
 8003136:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	887a      	ldrh	r2, [r7, #2]
 800313c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	887a      	ldrh	r2, [r7, #2]
 8003142:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	68ba      	ldr	r2, [r7, #8]
 8003148:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	887a      	ldrh	r2, [r7, #2]
 800314e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	887a      	ldrh	r2, [r7, #2]
 8003154:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	2200      	movs	r2, #0
 800315a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	2200      	movs	r2, #0
 8003160:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800316c:	2b40      	cmp	r3, #64	; 0x40
 800316e:	d007      	beq.n	8003180 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	681a      	ldr	r2, [r3, #0]
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800317e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	68db      	ldr	r3, [r3, #12]
 8003184:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003188:	d178      	bne.n	800327c <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	685b      	ldr	r3, [r3, #4]
 800318e:	2b00      	cmp	r3, #0
 8003190:	d002      	beq.n	8003198 <HAL_SPI_TransmitReceive+0x10a>
 8003192:	8b7b      	ldrh	r3, [r7, #26]
 8003194:	2b01      	cmp	r3, #1
 8003196:	d166      	bne.n	8003266 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800319c:	881a      	ldrh	r2, [r3, #0]
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031a8:	1c9a      	adds	r2, r3, #2
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80031b2:	b29b      	uxth	r3, r3
 80031b4:	3b01      	subs	r3, #1
 80031b6:	b29a      	uxth	r2, r3
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80031bc:	e053      	b.n	8003266 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	689b      	ldr	r3, [r3, #8]
 80031c4:	f003 0302 	and.w	r3, r3, #2
 80031c8:	2b02      	cmp	r3, #2
 80031ca:	d11b      	bne.n	8003204 <HAL_SPI_TransmitReceive+0x176>
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80031d0:	b29b      	uxth	r3, r3
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d016      	beq.n	8003204 <HAL_SPI_TransmitReceive+0x176>
 80031d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031d8:	2b01      	cmp	r3, #1
 80031da:	d113      	bne.n	8003204 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031e0:	881a      	ldrh	r2, [r3, #0]
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ec:	1c9a      	adds	r2, r3, #2
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80031f6:	b29b      	uxth	r3, r3
 80031f8:	3b01      	subs	r3, #1
 80031fa:	b29a      	uxth	r2, r3
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003200:	2300      	movs	r3, #0
 8003202:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	689b      	ldr	r3, [r3, #8]
 800320a:	f003 0301 	and.w	r3, r3, #1
 800320e:	2b01      	cmp	r3, #1
 8003210:	d119      	bne.n	8003246 <HAL_SPI_TransmitReceive+0x1b8>
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003216:	b29b      	uxth	r3, r3
 8003218:	2b00      	cmp	r3, #0
 800321a:	d014      	beq.n	8003246 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	68da      	ldr	r2, [r3, #12]
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003226:	b292      	uxth	r2, r2
 8003228:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800322e:	1c9a      	adds	r2, r3, #2
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003238:	b29b      	uxth	r3, r3
 800323a:	3b01      	subs	r3, #1
 800323c:	b29a      	uxth	r2, r3
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003242:	2301      	movs	r3, #1
 8003244:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003246:	f7fd fedd 	bl	8001004 <HAL_GetTick>
 800324a:	4602      	mov	r2, r0
 800324c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800324e:	1ad3      	subs	r3, r2, r3
 8003250:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003252:	429a      	cmp	r2, r3
 8003254:	d807      	bhi.n	8003266 <HAL_SPI_TransmitReceive+0x1d8>
 8003256:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003258:	f1b3 3fff 	cmp.w	r3, #4294967295
 800325c:	d003      	beq.n	8003266 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800325e:	2303      	movs	r3, #3
 8003260:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003264:	e0a7      	b.n	80033b6 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800326a:	b29b      	uxth	r3, r3
 800326c:	2b00      	cmp	r3, #0
 800326e:	d1a6      	bne.n	80031be <HAL_SPI_TransmitReceive+0x130>
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003274:	b29b      	uxth	r3, r3
 8003276:	2b00      	cmp	r3, #0
 8003278:	d1a1      	bne.n	80031be <HAL_SPI_TransmitReceive+0x130>
 800327a:	e07c      	b.n	8003376 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	685b      	ldr	r3, [r3, #4]
 8003280:	2b00      	cmp	r3, #0
 8003282:	d002      	beq.n	800328a <HAL_SPI_TransmitReceive+0x1fc>
 8003284:	8b7b      	ldrh	r3, [r7, #26]
 8003286:	2b01      	cmp	r3, #1
 8003288:	d16b      	bne.n	8003362 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	330c      	adds	r3, #12
 8003294:	7812      	ldrb	r2, [r2, #0]
 8003296:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800329c:	1c5a      	adds	r2, r3, #1
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80032a6:	b29b      	uxth	r3, r3
 80032a8:	3b01      	subs	r3, #1
 80032aa:	b29a      	uxth	r2, r3
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80032b0:	e057      	b.n	8003362 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	689b      	ldr	r3, [r3, #8]
 80032b8:	f003 0302 	and.w	r3, r3, #2
 80032bc:	2b02      	cmp	r3, #2
 80032be:	d11c      	bne.n	80032fa <HAL_SPI_TransmitReceive+0x26c>
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80032c4:	b29b      	uxth	r3, r3
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d017      	beq.n	80032fa <HAL_SPI_TransmitReceive+0x26c>
 80032ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032cc:	2b01      	cmp	r3, #1
 80032ce:	d114      	bne.n	80032fa <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	330c      	adds	r3, #12
 80032da:	7812      	ldrb	r2, [r2, #0]
 80032dc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032e2:	1c5a      	adds	r2, r3, #1
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80032ec:	b29b      	uxth	r3, r3
 80032ee:	3b01      	subs	r3, #1
 80032f0:	b29a      	uxth	r2, r3
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80032f6:	2300      	movs	r3, #0
 80032f8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	689b      	ldr	r3, [r3, #8]
 8003300:	f003 0301 	and.w	r3, r3, #1
 8003304:	2b01      	cmp	r3, #1
 8003306:	d119      	bne.n	800333c <HAL_SPI_TransmitReceive+0x2ae>
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800330c:	b29b      	uxth	r3, r3
 800330e:	2b00      	cmp	r3, #0
 8003310:	d014      	beq.n	800333c <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	68da      	ldr	r2, [r3, #12]
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800331c:	b2d2      	uxtb	r2, r2
 800331e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003324:	1c5a      	adds	r2, r3, #1
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800332e:	b29b      	uxth	r3, r3
 8003330:	3b01      	subs	r3, #1
 8003332:	b29a      	uxth	r2, r3
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003338:	2301      	movs	r3, #1
 800333a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800333c:	f7fd fe62 	bl	8001004 <HAL_GetTick>
 8003340:	4602      	mov	r2, r0
 8003342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003344:	1ad3      	subs	r3, r2, r3
 8003346:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003348:	429a      	cmp	r2, r3
 800334a:	d803      	bhi.n	8003354 <HAL_SPI_TransmitReceive+0x2c6>
 800334c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800334e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003352:	d102      	bne.n	800335a <HAL_SPI_TransmitReceive+0x2cc>
 8003354:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003356:	2b00      	cmp	r3, #0
 8003358:	d103      	bne.n	8003362 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800335a:	2303      	movs	r3, #3
 800335c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003360:	e029      	b.n	80033b6 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003366:	b29b      	uxth	r3, r3
 8003368:	2b00      	cmp	r3, #0
 800336a:	d1a2      	bne.n	80032b2 <HAL_SPI_TransmitReceive+0x224>
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003370:	b29b      	uxth	r3, r3
 8003372:	2b00      	cmp	r3, #0
 8003374:	d19d      	bne.n	80032b2 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003376:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003378:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800337a:	68f8      	ldr	r0, [r7, #12]
 800337c:	f000 f8f8 	bl	8003570 <SPI_EndRxTxTransaction>
 8003380:	4603      	mov	r3, r0
 8003382:	2b00      	cmp	r3, #0
 8003384:	d006      	beq.n	8003394 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8003386:	2301      	movs	r3, #1
 8003388:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	2220      	movs	r2, #32
 8003390:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003392:	e010      	b.n	80033b6 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	689b      	ldr	r3, [r3, #8]
 8003398:	2b00      	cmp	r3, #0
 800339a:	d10b      	bne.n	80033b4 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800339c:	2300      	movs	r3, #0
 800339e:	617b      	str	r3, [r7, #20]
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	68db      	ldr	r3, [r3, #12]
 80033a6:	617b      	str	r3, [r7, #20]
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	689b      	ldr	r3, [r3, #8]
 80033ae:	617b      	str	r3, [r7, #20]
 80033b0:	697b      	ldr	r3, [r7, #20]
 80033b2:	e000      	b.n	80033b6 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80033b4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	2201      	movs	r2, #1
 80033ba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	2200      	movs	r2, #0
 80033c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80033c6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80033ca:	4618      	mov	r0, r3
 80033cc:	3730      	adds	r7, #48	; 0x30
 80033ce:	46bd      	mov	sp, r7
 80033d0:	bd80      	pop	{r7, pc}

080033d2 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80033d2:	b580      	push	{r7, lr}
 80033d4:	b084      	sub	sp, #16
 80033d6:	af00      	add	r7, sp, #0
 80033d8:	60f8      	str	r0, [r7, #12]
 80033da:	60b9      	str	r1, [r7, #8]
 80033dc:	603b      	str	r3, [r7, #0]
 80033de:	4613      	mov	r3, r2
 80033e0:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80033e2:	e04c      	b.n	800347e <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033ea:	d048      	beq.n	800347e <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80033ec:	f7fd fe0a 	bl	8001004 <HAL_GetTick>
 80033f0:	4602      	mov	r2, r0
 80033f2:	69bb      	ldr	r3, [r7, #24]
 80033f4:	1ad3      	subs	r3, r2, r3
 80033f6:	683a      	ldr	r2, [r7, #0]
 80033f8:	429a      	cmp	r2, r3
 80033fa:	d902      	bls.n	8003402 <SPI_WaitFlagStateUntilTimeout+0x30>
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d13d      	bne.n	800347e <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	685a      	ldr	r2, [r3, #4]
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003410:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	685b      	ldr	r3, [r3, #4]
 8003416:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800341a:	d111      	bne.n	8003440 <SPI_WaitFlagStateUntilTimeout+0x6e>
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	689b      	ldr	r3, [r3, #8]
 8003420:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003424:	d004      	beq.n	8003430 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	689b      	ldr	r3, [r3, #8]
 800342a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800342e:	d107      	bne.n	8003440 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	681a      	ldr	r2, [r3, #0]
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800343e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003444:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003448:	d10f      	bne.n	800346a <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	681a      	ldr	r2, [r3, #0]
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003458:	601a      	str	r2, [r3, #0]
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	681a      	ldr	r2, [r3, #0]
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003468:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	2201      	movs	r2, #1
 800346e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	2200      	movs	r2, #0
 8003476:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800347a:	2303      	movs	r3, #3
 800347c:	e00f      	b.n	800349e <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	689a      	ldr	r2, [r3, #8]
 8003484:	68bb      	ldr	r3, [r7, #8]
 8003486:	4013      	ands	r3, r2
 8003488:	68ba      	ldr	r2, [r7, #8]
 800348a:	429a      	cmp	r2, r3
 800348c:	bf0c      	ite	eq
 800348e:	2301      	moveq	r3, #1
 8003490:	2300      	movne	r3, #0
 8003492:	b2db      	uxtb	r3, r3
 8003494:	461a      	mov	r2, r3
 8003496:	79fb      	ldrb	r3, [r7, #7]
 8003498:	429a      	cmp	r2, r3
 800349a:	d1a3      	bne.n	80033e4 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800349c:	2300      	movs	r3, #0
}
 800349e:	4618      	mov	r0, r3
 80034a0:	3710      	adds	r7, #16
 80034a2:	46bd      	mov	sp, r7
 80034a4:	bd80      	pop	{r7, pc}

080034a6 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80034a6:	b580      	push	{r7, lr}
 80034a8:	b086      	sub	sp, #24
 80034aa:	af02      	add	r7, sp, #8
 80034ac:	60f8      	str	r0, [r7, #12]
 80034ae:	60b9      	str	r1, [r7, #8]
 80034b0:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	685b      	ldr	r3, [r3, #4]
 80034b6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80034ba:	d111      	bne.n	80034e0 <SPI_EndRxTransaction+0x3a>
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	689b      	ldr	r3, [r3, #8]
 80034c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80034c4:	d004      	beq.n	80034d0 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	689b      	ldr	r3, [r3, #8]
 80034ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034ce:	d107      	bne.n	80034e0 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	681a      	ldr	r2, [r3, #0]
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80034de:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	685b      	ldr	r3, [r3, #4]
 80034e4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80034e8:	d12a      	bne.n	8003540 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	689b      	ldr	r3, [r3, #8]
 80034ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034f2:	d012      	beq.n	800351a <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	9300      	str	r3, [sp, #0]
 80034f8:	68bb      	ldr	r3, [r7, #8]
 80034fa:	2200      	movs	r2, #0
 80034fc:	2180      	movs	r1, #128	; 0x80
 80034fe:	68f8      	ldr	r0, [r7, #12]
 8003500:	f7ff ff67 	bl	80033d2 <SPI_WaitFlagStateUntilTimeout>
 8003504:	4603      	mov	r3, r0
 8003506:	2b00      	cmp	r3, #0
 8003508:	d02d      	beq.n	8003566 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800350e:	f043 0220 	orr.w	r2, r3, #32
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8003516:	2303      	movs	r3, #3
 8003518:	e026      	b.n	8003568 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	9300      	str	r3, [sp, #0]
 800351e:	68bb      	ldr	r3, [r7, #8]
 8003520:	2200      	movs	r2, #0
 8003522:	2101      	movs	r1, #1
 8003524:	68f8      	ldr	r0, [r7, #12]
 8003526:	f7ff ff54 	bl	80033d2 <SPI_WaitFlagStateUntilTimeout>
 800352a:	4603      	mov	r3, r0
 800352c:	2b00      	cmp	r3, #0
 800352e:	d01a      	beq.n	8003566 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003534:	f043 0220 	orr.w	r2, r3, #32
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800353c:	2303      	movs	r3, #3
 800353e:	e013      	b.n	8003568 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	9300      	str	r3, [sp, #0]
 8003544:	68bb      	ldr	r3, [r7, #8]
 8003546:	2200      	movs	r2, #0
 8003548:	2101      	movs	r1, #1
 800354a:	68f8      	ldr	r0, [r7, #12]
 800354c:	f7ff ff41 	bl	80033d2 <SPI_WaitFlagStateUntilTimeout>
 8003550:	4603      	mov	r3, r0
 8003552:	2b00      	cmp	r3, #0
 8003554:	d007      	beq.n	8003566 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800355a:	f043 0220 	orr.w	r2, r3, #32
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003562:	2303      	movs	r3, #3
 8003564:	e000      	b.n	8003568 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8003566:	2300      	movs	r3, #0
}
 8003568:	4618      	mov	r0, r3
 800356a:	3710      	adds	r7, #16
 800356c:	46bd      	mov	sp, r7
 800356e:	bd80      	pop	{r7, pc}

08003570 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b088      	sub	sp, #32
 8003574:	af02      	add	r7, sp, #8
 8003576:	60f8      	str	r0, [r7, #12]
 8003578:	60b9      	str	r1, [r7, #8]
 800357a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800357c:	4b1b      	ldr	r3, [pc, #108]	; (80035ec <SPI_EndRxTxTransaction+0x7c>)
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4a1b      	ldr	r2, [pc, #108]	; (80035f0 <SPI_EndRxTxTransaction+0x80>)
 8003582:	fba2 2303 	umull	r2, r3, r2, r3
 8003586:	0d5b      	lsrs	r3, r3, #21
 8003588:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800358c:	fb02 f303 	mul.w	r3, r2, r3
 8003590:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	685b      	ldr	r3, [r3, #4]
 8003596:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800359a:	d112      	bne.n	80035c2 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	9300      	str	r3, [sp, #0]
 80035a0:	68bb      	ldr	r3, [r7, #8]
 80035a2:	2200      	movs	r2, #0
 80035a4:	2180      	movs	r1, #128	; 0x80
 80035a6:	68f8      	ldr	r0, [r7, #12]
 80035a8:	f7ff ff13 	bl	80033d2 <SPI_WaitFlagStateUntilTimeout>
 80035ac:	4603      	mov	r3, r0
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d016      	beq.n	80035e0 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035b6:	f043 0220 	orr.w	r2, r3, #32
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80035be:	2303      	movs	r3, #3
 80035c0:	e00f      	b.n	80035e2 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80035c2:	697b      	ldr	r3, [r7, #20]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d00a      	beq.n	80035de <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80035c8:	697b      	ldr	r3, [r7, #20]
 80035ca:	3b01      	subs	r3, #1
 80035cc:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	689b      	ldr	r3, [r3, #8]
 80035d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035d8:	2b80      	cmp	r3, #128	; 0x80
 80035da:	d0f2      	beq.n	80035c2 <SPI_EndRxTxTransaction+0x52>
 80035dc:	e000      	b.n	80035e0 <SPI_EndRxTxTransaction+0x70>
        break;
 80035de:	bf00      	nop
  }

  return HAL_OK;
 80035e0:	2300      	movs	r3, #0
}
 80035e2:	4618      	mov	r0, r3
 80035e4:	3718      	adds	r7, #24
 80035e6:	46bd      	mov	sp, r7
 80035e8:	bd80      	pop	{r7, pc}
 80035ea:	bf00      	nop
 80035ec:	20000080 	.word	0x20000080
 80035f0:	165e9f81 	.word	0x165e9f81

080035f4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b082      	sub	sp, #8
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d101      	bne.n	8003606 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003602:	2301      	movs	r3, #1
 8003604:	e01d      	b.n	8003642 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800360c:	b2db      	uxtb	r3, r3
 800360e:	2b00      	cmp	r3, #0
 8003610:	d106      	bne.n	8003620 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2200      	movs	r2, #0
 8003616:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800361a:	6878      	ldr	r0, [r7, #4]
 800361c:	f00c febc 	bl	8010398 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2202      	movs	r2, #2
 8003624:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681a      	ldr	r2, [r3, #0]
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	3304      	adds	r3, #4
 8003630:	4619      	mov	r1, r3
 8003632:	4610      	mov	r0, r2
 8003634:	f000 fc70 	bl	8003f18 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2201      	movs	r2, #1
 800363c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003640:	2300      	movs	r3, #0
}
 8003642:	4618      	mov	r0, r3
 8003644:	3708      	adds	r7, #8
 8003646:	46bd      	mov	sp, r7
 8003648:	bd80      	pop	{r7, pc}

0800364a <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800364a:	b480      	push	{r7}
 800364c:	b085      	sub	sp, #20
 800364e:	af00      	add	r7, sp, #0
 8003650:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	68da      	ldr	r2, [r3, #12]
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f042 0201 	orr.w	r2, r2, #1
 8003660:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	689b      	ldr	r3, [r3, #8]
 8003668:	f003 0307 	and.w	r3, r3, #7
 800366c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	2b06      	cmp	r3, #6
 8003672:	d007      	beq.n	8003684 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	681a      	ldr	r2, [r3, #0]
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f042 0201 	orr.w	r2, r2, #1
 8003682:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003684:	2300      	movs	r3, #0
}
 8003686:	4618      	mov	r0, r3
 8003688:	3714      	adds	r7, #20
 800368a:	46bd      	mov	sp, r7
 800368c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003690:	4770      	bx	lr

08003692 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003692:	b580      	push	{r7, lr}
 8003694:	b082      	sub	sp, #8
 8003696:	af00      	add	r7, sp, #0
 8003698:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2b00      	cmp	r3, #0
 800369e:	d101      	bne.n	80036a4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80036a0:	2301      	movs	r3, #1
 80036a2:	e01d      	b.n	80036e0 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036aa:	b2db      	uxtb	r3, r3
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d106      	bne.n	80036be <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2200      	movs	r2, #0
 80036b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80036b8:	6878      	ldr	r0, [r7, #4]
 80036ba:	f000 f815 	bl	80036e8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	2202      	movs	r2, #2
 80036c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681a      	ldr	r2, [r3, #0]
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	3304      	adds	r3, #4
 80036ce:	4619      	mov	r1, r3
 80036d0:	4610      	mov	r0, r2
 80036d2:	f000 fc21 	bl	8003f18 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2201      	movs	r2, #1
 80036da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80036de:	2300      	movs	r3, #0
}
 80036e0:	4618      	mov	r0, r3
 80036e2:	3708      	adds	r7, #8
 80036e4:	46bd      	mov	sp, r7
 80036e6:	bd80      	pop	{r7, pc}

080036e8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80036e8:	b480      	push	{r7}
 80036ea:	b083      	sub	sp, #12
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80036f0:	bf00      	nop
 80036f2:	370c      	adds	r7, #12
 80036f4:	46bd      	mov	sp, r7
 80036f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fa:	4770      	bx	lr

080036fc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b084      	sub	sp, #16
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
 8003704:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	2201      	movs	r2, #1
 800370c:	6839      	ldr	r1, [r7, #0]
 800370e:	4618      	mov	r0, r3
 8003710:	f000 feec 	bl	80044ec <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	4a15      	ldr	r2, [pc, #84]	; (8003770 <HAL_TIM_PWM_Start+0x74>)
 800371a:	4293      	cmp	r3, r2
 800371c:	d004      	beq.n	8003728 <HAL_TIM_PWM_Start+0x2c>
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	4a14      	ldr	r2, [pc, #80]	; (8003774 <HAL_TIM_PWM_Start+0x78>)
 8003724:	4293      	cmp	r3, r2
 8003726:	d101      	bne.n	800372c <HAL_TIM_PWM_Start+0x30>
 8003728:	2301      	movs	r3, #1
 800372a:	e000      	b.n	800372e <HAL_TIM_PWM_Start+0x32>
 800372c:	2300      	movs	r3, #0
 800372e:	2b00      	cmp	r3, #0
 8003730:	d007      	beq.n	8003742 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003740:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	689b      	ldr	r3, [r3, #8]
 8003748:	f003 0307 	and.w	r3, r3, #7
 800374c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	2b06      	cmp	r3, #6
 8003752:	d007      	beq.n	8003764 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	681a      	ldr	r2, [r3, #0]
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f042 0201 	orr.w	r2, r2, #1
 8003762:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003764:	2300      	movs	r3, #0
}
 8003766:	4618      	mov	r0, r3
 8003768:	3710      	adds	r7, #16
 800376a:	46bd      	mov	sp, r7
 800376c:	bd80      	pop	{r7, pc}
 800376e:	bf00      	nop
 8003770:	40010000 	.word	0x40010000
 8003774:	40010400 	.word	0x40010400

08003778 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	b082      	sub	sp, #8
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
 8003780:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	2200      	movs	r2, #0
 8003788:	6839      	ldr	r1, [r7, #0]
 800378a:	4618      	mov	r0, r3
 800378c:	f000 feae 	bl	80044ec <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	4a22      	ldr	r2, [pc, #136]	; (8003820 <HAL_TIM_PWM_Stop+0xa8>)
 8003796:	4293      	cmp	r3, r2
 8003798:	d004      	beq.n	80037a4 <HAL_TIM_PWM_Stop+0x2c>
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	4a21      	ldr	r2, [pc, #132]	; (8003824 <HAL_TIM_PWM_Stop+0xac>)
 80037a0:	4293      	cmp	r3, r2
 80037a2:	d101      	bne.n	80037a8 <HAL_TIM_PWM_Stop+0x30>
 80037a4:	2301      	movs	r3, #1
 80037a6:	e000      	b.n	80037aa <HAL_TIM_PWM_Stop+0x32>
 80037a8:	2300      	movs	r3, #0
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d017      	beq.n	80037de <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	6a1a      	ldr	r2, [r3, #32]
 80037b4:	f241 1311 	movw	r3, #4369	; 0x1111
 80037b8:	4013      	ands	r3, r2
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d10f      	bne.n	80037de <HAL_TIM_PWM_Stop+0x66>
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	6a1a      	ldr	r2, [r3, #32]
 80037c4:	f240 4344 	movw	r3, #1092	; 0x444
 80037c8:	4013      	ands	r3, r2
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d107      	bne.n	80037de <HAL_TIM_PWM_Stop+0x66>
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80037dc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	6a1a      	ldr	r2, [r3, #32]
 80037e4:	f241 1311 	movw	r3, #4369	; 0x1111
 80037e8:	4013      	ands	r3, r2
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d10f      	bne.n	800380e <HAL_TIM_PWM_Stop+0x96>
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	6a1a      	ldr	r2, [r3, #32]
 80037f4:	f240 4344 	movw	r3, #1092	; 0x444
 80037f8:	4013      	ands	r3, r2
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d107      	bne.n	800380e <HAL_TIM_PWM_Stop+0x96>
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	681a      	ldr	r2, [r3, #0]
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f022 0201 	bic.w	r2, r2, #1
 800380c:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	2201      	movs	r2, #1
 8003812:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8003816:	2300      	movs	r3, #0
}
 8003818:	4618      	mov	r0, r3
 800381a:	3708      	adds	r7, #8
 800381c:	46bd      	mov	sp, r7
 800381e:	bd80      	pop	{r7, pc}
 8003820:	40010000 	.word	0x40010000
 8003824:	40010400 	.word	0x40010400

08003828 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	b086      	sub	sp, #24
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
 8003830:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	2b00      	cmp	r3, #0
 8003836:	d101      	bne.n	800383c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003838:	2301      	movs	r3, #1
 800383a:	e083      	b.n	8003944 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003842:	b2db      	uxtb	r3, r3
 8003844:	2b00      	cmp	r3, #0
 8003846:	d106      	bne.n	8003856 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2200      	movs	r2, #0
 800384c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003850:	6878      	ldr	r0, [r7, #4]
 8003852:	f00c fdf3 	bl	801043c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2202      	movs	r2, #2
 800385a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	689b      	ldr	r3, [r3, #8]
 8003864:	687a      	ldr	r2, [r7, #4]
 8003866:	6812      	ldr	r2, [r2, #0]
 8003868:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800386c:	f023 0307 	bic.w	r3, r3, #7
 8003870:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681a      	ldr	r2, [r3, #0]
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	3304      	adds	r3, #4
 800387a:	4619      	mov	r1, r3
 800387c:	4610      	mov	r0, r2
 800387e:	f000 fb4b 	bl	8003f18 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	689b      	ldr	r3, [r3, #8]
 8003888:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	699b      	ldr	r3, [r3, #24]
 8003890:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	6a1b      	ldr	r3, [r3, #32]
 8003898:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	697a      	ldr	r2, [r7, #20]
 80038a0:	4313      	orrs	r3, r2
 80038a2:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80038a4:	693b      	ldr	r3, [r7, #16]
 80038a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038aa:	f023 0303 	bic.w	r3, r3, #3
 80038ae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	689a      	ldr	r2, [r3, #8]
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	699b      	ldr	r3, [r3, #24]
 80038b8:	021b      	lsls	r3, r3, #8
 80038ba:	4313      	orrs	r3, r2
 80038bc:	693a      	ldr	r2, [r7, #16]
 80038be:	4313      	orrs	r3, r2
 80038c0:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80038c2:	693b      	ldr	r3, [r7, #16]
 80038c4:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80038c8:	f023 030c 	bic.w	r3, r3, #12
 80038cc:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80038ce:	693b      	ldr	r3, [r7, #16]
 80038d0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80038d4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80038d8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	68da      	ldr	r2, [r3, #12]
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	69db      	ldr	r3, [r3, #28]
 80038e2:	021b      	lsls	r3, r3, #8
 80038e4:	4313      	orrs	r3, r2
 80038e6:	693a      	ldr	r2, [r7, #16]
 80038e8:	4313      	orrs	r3, r2
 80038ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	691b      	ldr	r3, [r3, #16]
 80038f0:	011a      	lsls	r2, r3, #4
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	6a1b      	ldr	r3, [r3, #32]
 80038f6:	031b      	lsls	r3, r3, #12
 80038f8:	4313      	orrs	r3, r2
 80038fa:	693a      	ldr	r2, [r7, #16]
 80038fc:	4313      	orrs	r3, r2
 80038fe:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8003906:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800390e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	685a      	ldr	r2, [r3, #4]
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	695b      	ldr	r3, [r3, #20]
 8003918:	011b      	lsls	r3, r3, #4
 800391a:	4313      	orrs	r3, r2
 800391c:	68fa      	ldr	r2, [r7, #12]
 800391e:	4313      	orrs	r3, r2
 8003920:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	697a      	ldr	r2, [r7, #20]
 8003928:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	693a      	ldr	r2, [r7, #16]
 8003930:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	68fa      	ldr	r2, [r7, #12]
 8003938:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	2201      	movs	r2, #1
 800393e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003942:	2300      	movs	r3, #0
}
 8003944:	4618      	mov	r0, r3
 8003946:	3718      	adds	r7, #24
 8003948:	46bd      	mov	sp, r7
 800394a:	bd80      	pop	{r7, pc}

0800394c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800394c:	b580      	push	{r7, lr}
 800394e:	b082      	sub	sp, #8
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
 8003954:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 8003956:	683b      	ldr	r3, [r7, #0]
 8003958:	2b00      	cmp	r3, #0
 800395a:	d002      	beq.n	8003962 <HAL_TIM_Encoder_Start+0x16>
 800395c:	2b04      	cmp	r3, #4
 800395e:	d008      	beq.n	8003972 <HAL_TIM_Encoder_Start+0x26>
 8003960:	e00f      	b.n	8003982 <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	2201      	movs	r2, #1
 8003968:	2100      	movs	r1, #0
 800396a:	4618      	mov	r0, r3
 800396c:	f000 fdbe 	bl	80044ec <TIM_CCxChannelCmd>
      break;
 8003970:	e016      	b.n	80039a0 <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	2201      	movs	r2, #1
 8003978:	2104      	movs	r1, #4
 800397a:	4618      	mov	r0, r3
 800397c:	f000 fdb6 	bl	80044ec <TIM_CCxChannelCmd>
      break;
 8003980:	e00e      	b.n	80039a0 <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	2201      	movs	r2, #1
 8003988:	2100      	movs	r1, #0
 800398a:	4618      	mov	r0, r3
 800398c:	f000 fdae 	bl	80044ec <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	2201      	movs	r2, #1
 8003996:	2104      	movs	r1, #4
 8003998:	4618      	mov	r0, r3
 800399a:	f000 fda7 	bl	80044ec <TIM_CCxChannelCmd>
      break;
 800399e:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	681a      	ldr	r2, [r3, #0]
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f042 0201 	orr.w	r2, r2, #1
 80039ae:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80039b0:	2300      	movs	r3, #0
}
 80039b2:	4618      	mov	r0, r3
 80039b4:	3708      	adds	r7, #8
 80039b6:	46bd      	mov	sp, r7
 80039b8:	bd80      	pop	{r7, pc}

080039ba <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80039ba:	b580      	push	{r7, lr}
 80039bc:	b082      	sub	sp, #8
 80039be:	af00      	add	r7, sp, #0
 80039c0:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	691b      	ldr	r3, [r3, #16]
 80039c8:	f003 0302 	and.w	r3, r3, #2
 80039cc:	2b02      	cmp	r3, #2
 80039ce:	d122      	bne.n	8003a16 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	68db      	ldr	r3, [r3, #12]
 80039d6:	f003 0302 	and.w	r3, r3, #2
 80039da:	2b02      	cmp	r3, #2
 80039dc:	d11b      	bne.n	8003a16 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f06f 0202 	mvn.w	r2, #2
 80039e6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2201      	movs	r2, #1
 80039ec:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	699b      	ldr	r3, [r3, #24]
 80039f4:	f003 0303 	and.w	r3, r3, #3
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d003      	beq.n	8003a04 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80039fc:	6878      	ldr	r0, [r7, #4]
 80039fe:	f000 fa6c 	bl	8003eda <HAL_TIM_IC_CaptureCallback>
 8003a02:	e005      	b.n	8003a10 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a04:	6878      	ldr	r0, [r7, #4]
 8003a06:	f000 fa5e 	bl	8003ec6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a0a:	6878      	ldr	r0, [r7, #4]
 8003a0c:	f000 fa6f 	bl	8003eee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2200      	movs	r2, #0
 8003a14:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	691b      	ldr	r3, [r3, #16]
 8003a1c:	f003 0304 	and.w	r3, r3, #4
 8003a20:	2b04      	cmp	r3, #4
 8003a22:	d122      	bne.n	8003a6a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	68db      	ldr	r3, [r3, #12]
 8003a2a:	f003 0304 	and.w	r3, r3, #4
 8003a2e:	2b04      	cmp	r3, #4
 8003a30:	d11b      	bne.n	8003a6a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f06f 0204 	mvn.w	r2, #4
 8003a3a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2202      	movs	r2, #2
 8003a40:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	699b      	ldr	r3, [r3, #24]
 8003a48:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d003      	beq.n	8003a58 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a50:	6878      	ldr	r0, [r7, #4]
 8003a52:	f000 fa42 	bl	8003eda <HAL_TIM_IC_CaptureCallback>
 8003a56:	e005      	b.n	8003a64 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a58:	6878      	ldr	r0, [r7, #4]
 8003a5a:	f000 fa34 	bl	8003ec6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a5e:	6878      	ldr	r0, [r7, #4]
 8003a60:	f000 fa45 	bl	8003eee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2200      	movs	r2, #0
 8003a68:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	691b      	ldr	r3, [r3, #16]
 8003a70:	f003 0308 	and.w	r3, r3, #8
 8003a74:	2b08      	cmp	r3, #8
 8003a76:	d122      	bne.n	8003abe <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	68db      	ldr	r3, [r3, #12]
 8003a7e:	f003 0308 	and.w	r3, r3, #8
 8003a82:	2b08      	cmp	r3, #8
 8003a84:	d11b      	bne.n	8003abe <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f06f 0208 	mvn.w	r2, #8
 8003a8e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2204      	movs	r2, #4
 8003a94:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	69db      	ldr	r3, [r3, #28]
 8003a9c:	f003 0303 	and.w	r3, r3, #3
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d003      	beq.n	8003aac <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003aa4:	6878      	ldr	r0, [r7, #4]
 8003aa6:	f000 fa18 	bl	8003eda <HAL_TIM_IC_CaptureCallback>
 8003aaa:	e005      	b.n	8003ab8 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003aac:	6878      	ldr	r0, [r7, #4]
 8003aae:	f000 fa0a 	bl	8003ec6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ab2:	6878      	ldr	r0, [r7, #4]
 8003ab4:	f000 fa1b 	bl	8003eee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2200      	movs	r2, #0
 8003abc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	691b      	ldr	r3, [r3, #16]
 8003ac4:	f003 0310 	and.w	r3, r3, #16
 8003ac8:	2b10      	cmp	r3, #16
 8003aca:	d122      	bne.n	8003b12 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	68db      	ldr	r3, [r3, #12]
 8003ad2:	f003 0310 	and.w	r3, r3, #16
 8003ad6:	2b10      	cmp	r3, #16
 8003ad8:	d11b      	bne.n	8003b12 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f06f 0210 	mvn.w	r2, #16
 8003ae2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2208      	movs	r2, #8
 8003ae8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	69db      	ldr	r3, [r3, #28]
 8003af0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d003      	beq.n	8003b00 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003af8:	6878      	ldr	r0, [r7, #4]
 8003afa:	f000 f9ee 	bl	8003eda <HAL_TIM_IC_CaptureCallback>
 8003afe:	e005      	b.n	8003b0c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b00:	6878      	ldr	r0, [r7, #4]
 8003b02:	f000 f9e0 	bl	8003ec6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b06:	6878      	ldr	r0, [r7, #4]
 8003b08:	f000 f9f1 	bl	8003eee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2200      	movs	r2, #0
 8003b10:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	691b      	ldr	r3, [r3, #16]
 8003b18:	f003 0301 	and.w	r3, r3, #1
 8003b1c:	2b01      	cmp	r3, #1
 8003b1e:	d10e      	bne.n	8003b3e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	68db      	ldr	r3, [r3, #12]
 8003b26:	f003 0301 	and.w	r3, r3, #1
 8003b2a:	2b01      	cmp	r3, #1
 8003b2c:	d107      	bne.n	8003b3e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f06f 0201 	mvn.w	r2, #1
 8003b36:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003b38:	6878      	ldr	r0, [r7, #4]
 8003b3a:	f007 f9b9 	bl	800aeb0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	691b      	ldr	r3, [r3, #16]
 8003b44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b48:	2b80      	cmp	r3, #128	; 0x80
 8003b4a:	d10e      	bne.n	8003b6a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	68db      	ldr	r3, [r3, #12]
 8003b52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b56:	2b80      	cmp	r3, #128	; 0x80
 8003b58:	d107      	bne.n	8003b6a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003b62:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003b64:	6878      	ldr	r0, [r7, #4]
 8003b66:	f000 fd35 	bl	80045d4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	691b      	ldr	r3, [r3, #16]
 8003b70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b74:	2b40      	cmp	r3, #64	; 0x40
 8003b76:	d10e      	bne.n	8003b96 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	68db      	ldr	r3, [r3, #12]
 8003b7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b82:	2b40      	cmp	r3, #64	; 0x40
 8003b84:	d107      	bne.n	8003b96 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003b8e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003b90:	6878      	ldr	r0, [r7, #4]
 8003b92:	f000 f9b6 	bl	8003f02 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	691b      	ldr	r3, [r3, #16]
 8003b9c:	f003 0320 	and.w	r3, r3, #32
 8003ba0:	2b20      	cmp	r3, #32
 8003ba2:	d10e      	bne.n	8003bc2 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	68db      	ldr	r3, [r3, #12]
 8003baa:	f003 0320 	and.w	r3, r3, #32
 8003bae:	2b20      	cmp	r3, #32
 8003bb0:	d107      	bne.n	8003bc2 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f06f 0220 	mvn.w	r2, #32
 8003bba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003bbc:	6878      	ldr	r0, [r7, #4]
 8003bbe:	f000 fcff 	bl	80045c0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003bc2:	bf00      	nop
 8003bc4:	3708      	adds	r7, #8
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	bd80      	pop	{r7, pc}
	...

08003bcc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b084      	sub	sp, #16
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	60f8      	str	r0, [r7, #12]
 8003bd4:	60b9      	str	r1, [r7, #8]
 8003bd6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003bde:	2b01      	cmp	r3, #1
 8003be0:	d101      	bne.n	8003be6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003be2:	2302      	movs	r3, #2
 8003be4:	e0b4      	b.n	8003d50 <HAL_TIM_PWM_ConfigChannel+0x184>
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	2201      	movs	r2, #1
 8003bea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	2202      	movs	r2, #2
 8003bf2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	2b0c      	cmp	r3, #12
 8003bfa:	f200 809f 	bhi.w	8003d3c <HAL_TIM_PWM_ConfigChannel+0x170>
 8003bfe:	a201      	add	r2, pc, #4	; (adr r2, 8003c04 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8003c00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c04:	08003c39 	.word	0x08003c39
 8003c08:	08003d3d 	.word	0x08003d3d
 8003c0c:	08003d3d 	.word	0x08003d3d
 8003c10:	08003d3d 	.word	0x08003d3d
 8003c14:	08003c79 	.word	0x08003c79
 8003c18:	08003d3d 	.word	0x08003d3d
 8003c1c:	08003d3d 	.word	0x08003d3d
 8003c20:	08003d3d 	.word	0x08003d3d
 8003c24:	08003cbb 	.word	0x08003cbb
 8003c28:	08003d3d 	.word	0x08003d3d
 8003c2c:	08003d3d 	.word	0x08003d3d
 8003c30:	08003d3d 	.word	0x08003d3d
 8003c34:	08003cfb 	.word	0x08003cfb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	68b9      	ldr	r1, [r7, #8]
 8003c3e:	4618      	mov	r0, r3
 8003c40:	f000 fa0a 	bl	8004058 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	699a      	ldr	r2, [r3, #24]
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f042 0208 	orr.w	r2, r2, #8
 8003c52:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	699a      	ldr	r2, [r3, #24]
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f022 0204 	bic.w	r2, r2, #4
 8003c62:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	6999      	ldr	r1, [r3, #24]
 8003c6a:	68bb      	ldr	r3, [r7, #8]
 8003c6c:	691a      	ldr	r2, [r3, #16]
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	430a      	orrs	r2, r1
 8003c74:	619a      	str	r2, [r3, #24]
      break;
 8003c76:	e062      	b.n	8003d3e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	68b9      	ldr	r1, [r7, #8]
 8003c7e:	4618      	mov	r0, r3
 8003c80:	f000 fa5a 	bl	8004138 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	699a      	ldr	r2, [r3, #24]
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003c92:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	699a      	ldr	r2, [r3, #24]
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ca2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	6999      	ldr	r1, [r3, #24]
 8003caa:	68bb      	ldr	r3, [r7, #8]
 8003cac:	691b      	ldr	r3, [r3, #16]
 8003cae:	021a      	lsls	r2, r3, #8
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	430a      	orrs	r2, r1
 8003cb6:	619a      	str	r2, [r3, #24]
      break;
 8003cb8:	e041      	b.n	8003d3e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	68b9      	ldr	r1, [r7, #8]
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	f000 faaf 	bl	8004224 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	69da      	ldr	r2, [r3, #28]
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f042 0208 	orr.w	r2, r2, #8
 8003cd4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	69da      	ldr	r2, [r3, #28]
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f022 0204 	bic.w	r2, r2, #4
 8003ce4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	69d9      	ldr	r1, [r3, #28]
 8003cec:	68bb      	ldr	r3, [r7, #8]
 8003cee:	691a      	ldr	r2, [r3, #16]
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	430a      	orrs	r2, r1
 8003cf6:	61da      	str	r2, [r3, #28]
      break;
 8003cf8:	e021      	b.n	8003d3e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	68b9      	ldr	r1, [r7, #8]
 8003d00:	4618      	mov	r0, r3
 8003d02:	f000 fb03 	bl	800430c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	69da      	ldr	r2, [r3, #28]
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003d14:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	69da      	ldr	r2, [r3, #28]
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d24:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	69d9      	ldr	r1, [r3, #28]
 8003d2c:	68bb      	ldr	r3, [r7, #8]
 8003d2e:	691b      	ldr	r3, [r3, #16]
 8003d30:	021a      	lsls	r2, r3, #8
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	430a      	orrs	r2, r1
 8003d38:	61da      	str	r2, [r3, #28]
      break;
 8003d3a:	e000      	b.n	8003d3e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8003d3c:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	2201      	movs	r2, #1
 8003d42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	2200      	movs	r2, #0
 8003d4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003d4e:	2300      	movs	r3, #0
}
 8003d50:	4618      	mov	r0, r3
 8003d52:	3710      	adds	r7, #16
 8003d54:	46bd      	mov	sp, r7
 8003d56:	bd80      	pop	{r7, pc}

08003d58 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b084      	sub	sp, #16
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
 8003d60:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d68:	2b01      	cmp	r3, #1
 8003d6a:	d101      	bne.n	8003d70 <HAL_TIM_ConfigClockSource+0x18>
 8003d6c:	2302      	movs	r3, #2
 8003d6e:	e0a6      	b.n	8003ebe <HAL_TIM_ConfigClockSource+0x166>
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2201      	movs	r2, #1
 8003d74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2202      	movs	r2, #2
 8003d7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	689b      	ldr	r3, [r3, #8]
 8003d86:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003d8e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003d96:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	68fa      	ldr	r2, [r7, #12]
 8003d9e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	2b40      	cmp	r3, #64	; 0x40
 8003da6:	d067      	beq.n	8003e78 <HAL_TIM_ConfigClockSource+0x120>
 8003da8:	2b40      	cmp	r3, #64	; 0x40
 8003daa:	d80b      	bhi.n	8003dc4 <HAL_TIM_ConfigClockSource+0x6c>
 8003dac:	2b10      	cmp	r3, #16
 8003dae:	d073      	beq.n	8003e98 <HAL_TIM_ConfigClockSource+0x140>
 8003db0:	2b10      	cmp	r3, #16
 8003db2:	d802      	bhi.n	8003dba <HAL_TIM_ConfigClockSource+0x62>
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d06f      	beq.n	8003e98 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8003db8:	e078      	b.n	8003eac <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003dba:	2b20      	cmp	r3, #32
 8003dbc:	d06c      	beq.n	8003e98 <HAL_TIM_ConfigClockSource+0x140>
 8003dbe:	2b30      	cmp	r3, #48	; 0x30
 8003dc0:	d06a      	beq.n	8003e98 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8003dc2:	e073      	b.n	8003eac <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003dc4:	2b70      	cmp	r3, #112	; 0x70
 8003dc6:	d00d      	beq.n	8003de4 <HAL_TIM_ConfigClockSource+0x8c>
 8003dc8:	2b70      	cmp	r3, #112	; 0x70
 8003dca:	d804      	bhi.n	8003dd6 <HAL_TIM_ConfigClockSource+0x7e>
 8003dcc:	2b50      	cmp	r3, #80	; 0x50
 8003dce:	d033      	beq.n	8003e38 <HAL_TIM_ConfigClockSource+0xe0>
 8003dd0:	2b60      	cmp	r3, #96	; 0x60
 8003dd2:	d041      	beq.n	8003e58 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8003dd4:	e06a      	b.n	8003eac <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003dd6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003dda:	d066      	beq.n	8003eaa <HAL_TIM_ConfigClockSource+0x152>
 8003ddc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003de0:	d017      	beq.n	8003e12 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8003de2:	e063      	b.n	8003eac <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6818      	ldr	r0, [r3, #0]
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	6899      	ldr	r1, [r3, #8]
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	685a      	ldr	r2, [r3, #4]
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	68db      	ldr	r3, [r3, #12]
 8003df4:	f000 fb5a 	bl	80044ac <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	689b      	ldr	r3, [r3, #8]
 8003dfe:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003e06:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	68fa      	ldr	r2, [r7, #12]
 8003e0e:	609a      	str	r2, [r3, #8]
      break;
 8003e10:	e04c      	b.n	8003eac <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6818      	ldr	r0, [r3, #0]
 8003e16:	683b      	ldr	r3, [r7, #0]
 8003e18:	6899      	ldr	r1, [r3, #8]
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	685a      	ldr	r2, [r3, #4]
 8003e1e:	683b      	ldr	r3, [r7, #0]
 8003e20:	68db      	ldr	r3, [r3, #12]
 8003e22:	f000 fb43 	bl	80044ac <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	689a      	ldr	r2, [r3, #8]
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003e34:	609a      	str	r2, [r3, #8]
      break;
 8003e36:	e039      	b.n	8003eac <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	6818      	ldr	r0, [r3, #0]
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	6859      	ldr	r1, [r3, #4]
 8003e40:	683b      	ldr	r3, [r7, #0]
 8003e42:	68db      	ldr	r3, [r3, #12]
 8003e44:	461a      	mov	r2, r3
 8003e46:	f000 fab7 	bl	80043b8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	2150      	movs	r1, #80	; 0x50
 8003e50:	4618      	mov	r0, r3
 8003e52:	f000 fb10 	bl	8004476 <TIM_ITRx_SetConfig>
      break;
 8003e56:	e029      	b.n	8003eac <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6818      	ldr	r0, [r3, #0]
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	6859      	ldr	r1, [r3, #4]
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	68db      	ldr	r3, [r3, #12]
 8003e64:	461a      	mov	r2, r3
 8003e66:	f000 fad6 	bl	8004416 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	2160      	movs	r1, #96	; 0x60
 8003e70:	4618      	mov	r0, r3
 8003e72:	f000 fb00 	bl	8004476 <TIM_ITRx_SetConfig>
      break;
 8003e76:	e019      	b.n	8003eac <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6818      	ldr	r0, [r3, #0]
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	6859      	ldr	r1, [r3, #4]
 8003e80:	683b      	ldr	r3, [r7, #0]
 8003e82:	68db      	ldr	r3, [r3, #12]
 8003e84:	461a      	mov	r2, r3
 8003e86:	f000 fa97 	bl	80043b8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	2140      	movs	r1, #64	; 0x40
 8003e90:	4618      	mov	r0, r3
 8003e92:	f000 faf0 	bl	8004476 <TIM_ITRx_SetConfig>
      break;
 8003e96:	e009      	b.n	8003eac <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681a      	ldr	r2, [r3, #0]
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	4619      	mov	r1, r3
 8003ea2:	4610      	mov	r0, r2
 8003ea4:	f000 fae7 	bl	8004476 <TIM_ITRx_SetConfig>
      break;
 8003ea8:	e000      	b.n	8003eac <HAL_TIM_ConfigClockSource+0x154>
      break;
 8003eaa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2201      	movs	r2, #1
 8003eb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003ebc:	2300      	movs	r3, #0
}
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	3710      	adds	r7, #16
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	bd80      	pop	{r7, pc}

08003ec6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003ec6:	b480      	push	{r7}
 8003ec8:	b083      	sub	sp, #12
 8003eca:	af00      	add	r7, sp, #0
 8003ecc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003ece:	bf00      	nop
 8003ed0:	370c      	adds	r7, #12
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed8:	4770      	bx	lr

08003eda <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003eda:	b480      	push	{r7}
 8003edc:	b083      	sub	sp, #12
 8003ede:	af00      	add	r7, sp, #0
 8003ee0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003ee2:	bf00      	nop
 8003ee4:	370c      	adds	r7, #12
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eec:	4770      	bx	lr

08003eee <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003eee:	b480      	push	{r7}
 8003ef0:	b083      	sub	sp, #12
 8003ef2:	af00      	add	r7, sp, #0
 8003ef4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003ef6:	bf00      	nop
 8003ef8:	370c      	adds	r7, #12
 8003efa:	46bd      	mov	sp, r7
 8003efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f00:	4770      	bx	lr

08003f02 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003f02:	b480      	push	{r7}
 8003f04:	b083      	sub	sp, #12
 8003f06:	af00      	add	r7, sp, #0
 8003f08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003f0a:	bf00      	nop
 8003f0c:	370c      	adds	r7, #12
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f14:	4770      	bx	lr
	...

08003f18 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003f18:	b480      	push	{r7}
 8003f1a:	b085      	sub	sp, #20
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
 8003f20:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	4a40      	ldr	r2, [pc, #256]	; (800402c <TIM_Base_SetConfig+0x114>)
 8003f2c:	4293      	cmp	r3, r2
 8003f2e:	d013      	beq.n	8003f58 <TIM_Base_SetConfig+0x40>
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f36:	d00f      	beq.n	8003f58 <TIM_Base_SetConfig+0x40>
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	4a3d      	ldr	r2, [pc, #244]	; (8004030 <TIM_Base_SetConfig+0x118>)
 8003f3c:	4293      	cmp	r3, r2
 8003f3e:	d00b      	beq.n	8003f58 <TIM_Base_SetConfig+0x40>
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	4a3c      	ldr	r2, [pc, #240]	; (8004034 <TIM_Base_SetConfig+0x11c>)
 8003f44:	4293      	cmp	r3, r2
 8003f46:	d007      	beq.n	8003f58 <TIM_Base_SetConfig+0x40>
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	4a3b      	ldr	r2, [pc, #236]	; (8004038 <TIM_Base_SetConfig+0x120>)
 8003f4c:	4293      	cmp	r3, r2
 8003f4e:	d003      	beq.n	8003f58 <TIM_Base_SetConfig+0x40>
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	4a3a      	ldr	r2, [pc, #232]	; (800403c <TIM_Base_SetConfig+0x124>)
 8003f54:	4293      	cmp	r3, r2
 8003f56:	d108      	bne.n	8003f6a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f5e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003f60:	683b      	ldr	r3, [r7, #0]
 8003f62:	685b      	ldr	r3, [r3, #4]
 8003f64:	68fa      	ldr	r2, [r7, #12]
 8003f66:	4313      	orrs	r3, r2
 8003f68:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	4a2f      	ldr	r2, [pc, #188]	; (800402c <TIM_Base_SetConfig+0x114>)
 8003f6e:	4293      	cmp	r3, r2
 8003f70:	d02b      	beq.n	8003fca <TIM_Base_SetConfig+0xb2>
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f78:	d027      	beq.n	8003fca <TIM_Base_SetConfig+0xb2>
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	4a2c      	ldr	r2, [pc, #176]	; (8004030 <TIM_Base_SetConfig+0x118>)
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	d023      	beq.n	8003fca <TIM_Base_SetConfig+0xb2>
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	4a2b      	ldr	r2, [pc, #172]	; (8004034 <TIM_Base_SetConfig+0x11c>)
 8003f86:	4293      	cmp	r3, r2
 8003f88:	d01f      	beq.n	8003fca <TIM_Base_SetConfig+0xb2>
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	4a2a      	ldr	r2, [pc, #168]	; (8004038 <TIM_Base_SetConfig+0x120>)
 8003f8e:	4293      	cmp	r3, r2
 8003f90:	d01b      	beq.n	8003fca <TIM_Base_SetConfig+0xb2>
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	4a29      	ldr	r2, [pc, #164]	; (800403c <TIM_Base_SetConfig+0x124>)
 8003f96:	4293      	cmp	r3, r2
 8003f98:	d017      	beq.n	8003fca <TIM_Base_SetConfig+0xb2>
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	4a28      	ldr	r2, [pc, #160]	; (8004040 <TIM_Base_SetConfig+0x128>)
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d013      	beq.n	8003fca <TIM_Base_SetConfig+0xb2>
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	4a27      	ldr	r2, [pc, #156]	; (8004044 <TIM_Base_SetConfig+0x12c>)
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d00f      	beq.n	8003fca <TIM_Base_SetConfig+0xb2>
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	4a26      	ldr	r2, [pc, #152]	; (8004048 <TIM_Base_SetConfig+0x130>)
 8003fae:	4293      	cmp	r3, r2
 8003fb0:	d00b      	beq.n	8003fca <TIM_Base_SetConfig+0xb2>
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	4a25      	ldr	r2, [pc, #148]	; (800404c <TIM_Base_SetConfig+0x134>)
 8003fb6:	4293      	cmp	r3, r2
 8003fb8:	d007      	beq.n	8003fca <TIM_Base_SetConfig+0xb2>
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	4a24      	ldr	r2, [pc, #144]	; (8004050 <TIM_Base_SetConfig+0x138>)
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	d003      	beq.n	8003fca <TIM_Base_SetConfig+0xb2>
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	4a23      	ldr	r2, [pc, #140]	; (8004054 <TIM_Base_SetConfig+0x13c>)
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	d108      	bne.n	8003fdc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003fd0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	68db      	ldr	r3, [r3, #12]
 8003fd6:	68fa      	ldr	r2, [r7, #12]
 8003fd8:	4313      	orrs	r3, r2
 8003fda:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003fe2:	683b      	ldr	r3, [r7, #0]
 8003fe4:	695b      	ldr	r3, [r3, #20]
 8003fe6:	4313      	orrs	r3, r2
 8003fe8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	68fa      	ldr	r2, [r7, #12]
 8003fee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	689a      	ldr	r2, [r3, #8]
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003ff8:	683b      	ldr	r3, [r7, #0]
 8003ffa:	681a      	ldr	r2, [r3, #0]
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	4a0a      	ldr	r2, [pc, #40]	; (800402c <TIM_Base_SetConfig+0x114>)
 8004004:	4293      	cmp	r3, r2
 8004006:	d003      	beq.n	8004010 <TIM_Base_SetConfig+0xf8>
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	4a0c      	ldr	r2, [pc, #48]	; (800403c <TIM_Base_SetConfig+0x124>)
 800400c:	4293      	cmp	r3, r2
 800400e:	d103      	bne.n	8004018 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	691a      	ldr	r2, [r3, #16]
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2201      	movs	r2, #1
 800401c:	615a      	str	r2, [r3, #20]
}
 800401e:	bf00      	nop
 8004020:	3714      	adds	r7, #20
 8004022:	46bd      	mov	sp, r7
 8004024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004028:	4770      	bx	lr
 800402a:	bf00      	nop
 800402c:	40010000 	.word	0x40010000
 8004030:	40000400 	.word	0x40000400
 8004034:	40000800 	.word	0x40000800
 8004038:	40000c00 	.word	0x40000c00
 800403c:	40010400 	.word	0x40010400
 8004040:	40014000 	.word	0x40014000
 8004044:	40014400 	.word	0x40014400
 8004048:	40014800 	.word	0x40014800
 800404c:	40001800 	.word	0x40001800
 8004050:	40001c00 	.word	0x40001c00
 8004054:	40002000 	.word	0x40002000

08004058 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004058:	b480      	push	{r7}
 800405a:	b087      	sub	sp, #28
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
 8004060:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6a1b      	ldr	r3, [r3, #32]
 8004066:	f023 0201 	bic.w	r2, r3, #1
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6a1b      	ldr	r3, [r3, #32]
 8004072:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	685b      	ldr	r3, [r3, #4]
 8004078:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	699b      	ldr	r3, [r3, #24]
 800407e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004086:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	f023 0303 	bic.w	r3, r3, #3
 800408e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	68fa      	ldr	r2, [r7, #12]
 8004096:	4313      	orrs	r3, r2
 8004098:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800409a:	697b      	ldr	r3, [r7, #20]
 800409c:	f023 0302 	bic.w	r3, r3, #2
 80040a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80040a2:	683b      	ldr	r3, [r7, #0]
 80040a4:	689b      	ldr	r3, [r3, #8]
 80040a6:	697a      	ldr	r2, [r7, #20]
 80040a8:	4313      	orrs	r3, r2
 80040aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	4a20      	ldr	r2, [pc, #128]	; (8004130 <TIM_OC1_SetConfig+0xd8>)
 80040b0:	4293      	cmp	r3, r2
 80040b2:	d003      	beq.n	80040bc <TIM_OC1_SetConfig+0x64>
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	4a1f      	ldr	r2, [pc, #124]	; (8004134 <TIM_OC1_SetConfig+0xdc>)
 80040b8:	4293      	cmp	r3, r2
 80040ba:	d10c      	bne.n	80040d6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80040bc:	697b      	ldr	r3, [r7, #20]
 80040be:	f023 0308 	bic.w	r3, r3, #8
 80040c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	68db      	ldr	r3, [r3, #12]
 80040c8:	697a      	ldr	r2, [r7, #20]
 80040ca:	4313      	orrs	r3, r2
 80040cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80040ce:	697b      	ldr	r3, [r7, #20]
 80040d0:	f023 0304 	bic.w	r3, r3, #4
 80040d4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	4a15      	ldr	r2, [pc, #84]	; (8004130 <TIM_OC1_SetConfig+0xd8>)
 80040da:	4293      	cmp	r3, r2
 80040dc:	d003      	beq.n	80040e6 <TIM_OC1_SetConfig+0x8e>
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	4a14      	ldr	r2, [pc, #80]	; (8004134 <TIM_OC1_SetConfig+0xdc>)
 80040e2:	4293      	cmp	r3, r2
 80040e4:	d111      	bne.n	800410a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80040e6:	693b      	ldr	r3, [r7, #16]
 80040e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80040ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80040ee:	693b      	ldr	r3, [r7, #16]
 80040f0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80040f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80040f6:	683b      	ldr	r3, [r7, #0]
 80040f8:	695b      	ldr	r3, [r3, #20]
 80040fa:	693a      	ldr	r2, [r7, #16]
 80040fc:	4313      	orrs	r3, r2
 80040fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	699b      	ldr	r3, [r3, #24]
 8004104:	693a      	ldr	r2, [r7, #16]
 8004106:	4313      	orrs	r3, r2
 8004108:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	693a      	ldr	r2, [r7, #16]
 800410e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	68fa      	ldr	r2, [r7, #12]
 8004114:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004116:	683b      	ldr	r3, [r7, #0]
 8004118:	685a      	ldr	r2, [r3, #4]
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	697a      	ldr	r2, [r7, #20]
 8004122:	621a      	str	r2, [r3, #32]
}
 8004124:	bf00      	nop
 8004126:	371c      	adds	r7, #28
 8004128:	46bd      	mov	sp, r7
 800412a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412e:	4770      	bx	lr
 8004130:	40010000 	.word	0x40010000
 8004134:	40010400 	.word	0x40010400

08004138 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004138:	b480      	push	{r7}
 800413a:	b087      	sub	sp, #28
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
 8004140:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6a1b      	ldr	r3, [r3, #32]
 8004146:	f023 0210 	bic.w	r2, r3, #16
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6a1b      	ldr	r3, [r3, #32]
 8004152:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	685b      	ldr	r3, [r3, #4]
 8004158:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	699b      	ldr	r3, [r3, #24]
 800415e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004166:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800416e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	021b      	lsls	r3, r3, #8
 8004176:	68fa      	ldr	r2, [r7, #12]
 8004178:	4313      	orrs	r3, r2
 800417a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800417c:	697b      	ldr	r3, [r7, #20]
 800417e:	f023 0320 	bic.w	r3, r3, #32
 8004182:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004184:	683b      	ldr	r3, [r7, #0]
 8004186:	689b      	ldr	r3, [r3, #8]
 8004188:	011b      	lsls	r3, r3, #4
 800418a:	697a      	ldr	r2, [r7, #20]
 800418c:	4313      	orrs	r3, r2
 800418e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	4a22      	ldr	r2, [pc, #136]	; (800421c <TIM_OC2_SetConfig+0xe4>)
 8004194:	4293      	cmp	r3, r2
 8004196:	d003      	beq.n	80041a0 <TIM_OC2_SetConfig+0x68>
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	4a21      	ldr	r2, [pc, #132]	; (8004220 <TIM_OC2_SetConfig+0xe8>)
 800419c:	4293      	cmp	r3, r2
 800419e:	d10d      	bne.n	80041bc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80041a0:	697b      	ldr	r3, [r7, #20]
 80041a2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80041a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80041a8:	683b      	ldr	r3, [r7, #0]
 80041aa:	68db      	ldr	r3, [r3, #12]
 80041ac:	011b      	lsls	r3, r3, #4
 80041ae:	697a      	ldr	r2, [r7, #20]
 80041b0:	4313      	orrs	r3, r2
 80041b2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80041b4:	697b      	ldr	r3, [r7, #20]
 80041b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80041ba:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	4a17      	ldr	r2, [pc, #92]	; (800421c <TIM_OC2_SetConfig+0xe4>)
 80041c0:	4293      	cmp	r3, r2
 80041c2:	d003      	beq.n	80041cc <TIM_OC2_SetConfig+0x94>
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	4a16      	ldr	r2, [pc, #88]	; (8004220 <TIM_OC2_SetConfig+0xe8>)
 80041c8:	4293      	cmp	r3, r2
 80041ca:	d113      	bne.n	80041f4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80041cc:	693b      	ldr	r3, [r7, #16]
 80041ce:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80041d2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80041d4:	693b      	ldr	r3, [r7, #16]
 80041d6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80041da:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	695b      	ldr	r3, [r3, #20]
 80041e0:	009b      	lsls	r3, r3, #2
 80041e2:	693a      	ldr	r2, [r7, #16]
 80041e4:	4313      	orrs	r3, r2
 80041e6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	699b      	ldr	r3, [r3, #24]
 80041ec:	009b      	lsls	r3, r3, #2
 80041ee:	693a      	ldr	r2, [r7, #16]
 80041f0:	4313      	orrs	r3, r2
 80041f2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	693a      	ldr	r2, [r7, #16]
 80041f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	68fa      	ldr	r2, [r7, #12]
 80041fe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	685a      	ldr	r2, [r3, #4]
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	697a      	ldr	r2, [r7, #20]
 800420c:	621a      	str	r2, [r3, #32]
}
 800420e:	bf00      	nop
 8004210:	371c      	adds	r7, #28
 8004212:	46bd      	mov	sp, r7
 8004214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004218:	4770      	bx	lr
 800421a:	bf00      	nop
 800421c:	40010000 	.word	0x40010000
 8004220:	40010400 	.word	0x40010400

08004224 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004224:	b480      	push	{r7}
 8004226:	b087      	sub	sp, #28
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
 800422c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6a1b      	ldr	r3, [r3, #32]
 8004232:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6a1b      	ldr	r3, [r3, #32]
 800423e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	685b      	ldr	r3, [r3, #4]
 8004244:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	69db      	ldr	r3, [r3, #28]
 800424a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004252:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	f023 0303 	bic.w	r3, r3, #3
 800425a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800425c:	683b      	ldr	r3, [r7, #0]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	68fa      	ldr	r2, [r7, #12]
 8004262:	4313      	orrs	r3, r2
 8004264:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004266:	697b      	ldr	r3, [r7, #20]
 8004268:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800426c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800426e:	683b      	ldr	r3, [r7, #0]
 8004270:	689b      	ldr	r3, [r3, #8]
 8004272:	021b      	lsls	r3, r3, #8
 8004274:	697a      	ldr	r2, [r7, #20]
 8004276:	4313      	orrs	r3, r2
 8004278:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	4a21      	ldr	r2, [pc, #132]	; (8004304 <TIM_OC3_SetConfig+0xe0>)
 800427e:	4293      	cmp	r3, r2
 8004280:	d003      	beq.n	800428a <TIM_OC3_SetConfig+0x66>
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	4a20      	ldr	r2, [pc, #128]	; (8004308 <TIM_OC3_SetConfig+0xe4>)
 8004286:	4293      	cmp	r3, r2
 8004288:	d10d      	bne.n	80042a6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800428a:	697b      	ldr	r3, [r7, #20]
 800428c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004290:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	68db      	ldr	r3, [r3, #12]
 8004296:	021b      	lsls	r3, r3, #8
 8004298:	697a      	ldr	r2, [r7, #20]
 800429a:	4313      	orrs	r3, r2
 800429c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800429e:	697b      	ldr	r3, [r7, #20]
 80042a0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80042a4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	4a16      	ldr	r2, [pc, #88]	; (8004304 <TIM_OC3_SetConfig+0xe0>)
 80042aa:	4293      	cmp	r3, r2
 80042ac:	d003      	beq.n	80042b6 <TIM_OC3_SetConfig+0x92>
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	4a15      	ldr	r2, [pc, #84]	; (8004308 <TIM_OC3_SetConfig+0xe4>)
 80042b2:	4293      	cmp	r3, r2
 80042b4:	d113      	bne.n	80042de <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80042b6:	693b      	ldr	r3, [r7, #16]
 80042b8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80042bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80042be:	693b      	ldr	r3, [r7, #16]
 80042c0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80042c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80042c6:	683b      	ldr	r3, [r7, #0]
 80042c8:	695b      	ldr	r3, [r3, #20]
 80042ca:	011b      	lsls	r3, r3, #4
 80042cc:	693a      	ldr	r2, [r7, #16]
 80042ce:	4313      	orrs	r3, r2
 80042d0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80042d2:	683b      	ldr	r3, [r7, #0]
 80042d4:	699b      	ldr	r3, [r3, #24]
 80042d6:	011b      	lsls	r3, r3, #4
 80042d8:	693a      	ldr	r2, [r7, #16]
 80042da:	4313      	orrs	r3, r2
 80042dc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	693a      	ldr	r2, [r7, #16]
 80042e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	68fa      	ldr	r2, [r7, #12]
 80042e8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80042ea:	683b      	ldr	r3, [r7, #0]
 80042ec:	685a      	ldr	r2, [r3, #4]
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	697a      	ldr	r2, [r7, #20]
 80042f6:	621a      	str	r2, [r3, #32]
}
 80042f8:	bf00      	nop
 80042fa:	371c      	adds	r7, #28
 80042fc:	46bd      	mov	sp, r7
 80042fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004302:	4770      	bx	lr
 8004304:	40010000 	.word	0x40010000
 8004308:	40010400 	.word	0x40010400

0800430c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800430c:	b480      	push	{r7}
 800430e:	b087      	sub	sp, #28
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
 8004314:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6a1b      	ldr	r3, [r3, #32]
 800431a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6a1b      	ldr	r3, [r3, #32]
 8004326:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	685b      	ldr	r3, [r3, #4]
 800432c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	69db      	ldr	r3, [r3, #28]
 8004332:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800433a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004342:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004344:	683b      	ldr	r3, [r7, #0]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	021b      	lsls	r3, r3, #8
 800434a:	68fa      	ldr	r2, [r7, #12]
 800434c:	4313      	orrs	r3, r2
 800434e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004350:	693b      	ldr	r3, [r7, #16]
 8004352:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004356:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	689b      	ldr	r3, [r3, #8]
 800435c:	031b      	lsls	r3, r3, #12
 800435e:	693a      	ldr	r2, [r7, #16]
 8004360:	4313      	orrs	r3, r2
 8004362:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	4a12      	ldr	r2, [pc, #72]	; (80043b0 <TIM_OC4_SetConfig+0xa4>)
 8004368:	4293      	cmp	r3, r2
 800436a:	d003      	beq.n	8004374 <TIM_OC4_SetConfig+0x68>
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	4a11      	ldr	r2, [pc, #68]	; (80043b4 <TIM_OC4_SetConfig+0xa8>)
 8004370:	4293      	cmp	r3, r2
 8004372:	d109      	bne.n	8004388 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004374:	697b      	ldr	r3, [r7, #20]
 8004376:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800437a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	695b      	ldr	r3, [r3, #20]
 8004380:	019b      	lsls	r3, r3, #6
 8004382:	697a      	ldr	r2, [r7, #20]
 8004384:	4313      	orrs	r3, r2
 8004386:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	697a      	ldr	r2, [r7, #20]
 800438c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	68fa      	ldr	r2, [r7, #12]
 8004392:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	685a      	ldr	r2, [r3, #4]
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	693a      	ldr	r2, [r7, #16]
 80043a0:	621a      	str	r2, [r3, #32]
}
 80043a2:	bf00      	nop
 80043a4:	371c      	adds	r7, #28
 80043a6:	46bd      	mov	sp, r7
 80043a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ac:	4770      	bx	lr
 80043ae:	bf00      	nop
 80043b0:	40010000 	.word	0x40010000
 80043b4:	40010400 	.word	0x40010400

080043b8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80043b8:	b480      	push	{r7}
 80043ba:	b087      	sub	sp, #28
 80043bc:	af00      	add	r7, sp, #0
 80043be:	60f8      	str	r0, [r7, #12]
 80043c0:	60b9      	str	r1, [r7, #8]
 80043c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	6a1b      	ldr	r3, [r3, #32]
 80043c8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	6a1b      	ldr	r3, [r3, #32]
 80043ce:	f023 0201 	bic.w	r2, r3, #1
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	699b      	ldr	r3, [r3, #24]
 80043da:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80043dc:	693b      	ldr	r3, [r7, #16]
 80043de:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80043e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	011b      	lsls	r3, r3, #4
 80043e8:	693a      	ldr	r2, [r7, #16]
 80043ea:	4313      	orrs	r3, r2
 80043ec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80043ee:	697b      	ldr	r3, [r7, #20]
 80043f0:	f023 030a 	bic.w	r3, r3, #10
 80043f4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80043f6:	697a      	ldr	r2, [r7, #20]
 80043f8:	68bb      	ldr	r3, [r7, #8]
 80043fa:	4313      	orrs	r3, r2
 80043fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	693a      	ldr	r2, [r7, #16]
 8004402:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	697a      	ldr	r2, [r7, #20]
 8004408:	621a      	str	r2, [r3, #32]
}
 800440a:	bf00      	nop
 800440c:	371c      	adds	r7, #28
 800440e:	46bd      	mov	sp, r7
 8004410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004414:	4770      	bx	lr

08004416 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004416:	b480      	push	{r7}
 8004418:	b087      	sub	sp, #28
 800441a:	af00      	add	r7, sp, #0
 800441c:	60f8      	str	r0, [r7, #12]
 800441e:	60b9      	str	r1, [r7, #8]
 8004420:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	6a1b      	ldr	r3, [r3, #32]
 8004426:	f023 0210 	bic.w	r2, r3, #16
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	699b      	ldr	r3, [r3, #24]
 8004432:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	6a1b      	ldr	r3, [r3, #32]
 8004438:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800443a:	697b      	ldr	r3, [r7, #20]
 800443c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004440:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	031b      	lsls	r3, r3, #12
 8004446:	697a      	ldr	r2, [r7, #20]
 8004448:	4313      	orrs	r3, r2
 800444a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800444c:	693b      	ldr	r3, [r7, #16]
 800444e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004452:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004454:	68bb      	ldr	r3, [r7, #8]
 8004456:	011b      	lsls	r3, r3, #4
 8004458:	693a      	ldr	r2, [r7, #16]
 800445a:	4313      	orrs	r3, r2
 800445c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	697a      	ldr	r2, [r7, #20]
 8004462:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	693a      	ldr	r2, [r7, #16]
 8004468:	621a      	str	r2, [r3, #32]
}
 800446a:	bf00      	nop
 800446c:	371c      	adds	r7, #28
 800446e:	46bd      	mov	sp, r7
 8004470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004474:	4770      	bx	lr

08004476 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004476:	b480      	push	{r7}
 8004478:	b085      	sub	sp, #20
 800447a:	af00      	add	r7, sp, #0
 800447c:	6078      	str	r0, [r7, #4]
 800447e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	689b      	ldr	r3, [r3, #8]
 8004484:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800448c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800448e:	683a      	ldr	r2, [r7, #0]
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	4313      	orrs	r3, r2
 8004494:	f043 0307 	orr.w	r3, r3, #7
 8004498:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	68fa      	ldr	r2, [r7, #12]
 800449e:	609a      	str	r2, [r3, #8]
}
 80044a0:	bf00      	nop
 80044a2:	3714      	adds	r7, #20
 80044a4:	46bd      	mov	sp, r7
 80044a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044aa:	4770      	bx	lr

080044ac <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80044ac:	b480      	push	{r7}
 80044ae:	b087      	sub	sp, #28
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	60f8      	str	r0, [r7, #12]
 80044b4:	60b9      	str	r1, [r7, #8]
 80044b6:	607a      	str	r2, [r7, #4]
 80044b8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	689b      	ldr	r3, [r3, #8]
 80044be:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80044c0:	697b      	ldr	r3, [r7, #20]
 80044c2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80044c6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80044c8:	683b      	ldr	r3, [r7, #0]
 80044ca:	021a      	lsls	r2, r3, #8
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	431a      	orrs	r2, r3
 80044d0:	68bb      	ldr	r3, [r7, #8]
 80044d2:	4313      	orrs	r3, r2
 80044d4:	697a      	ldr	r2, [r7, #20]
 80044d6:	4313      	orrs	r3, r2
 80044d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	697a      	ldr	r2, [r7, #20]
 80044de:	609a      	str	r2, [r3, #8]
}
 80044e0:	bf00      	nop
 80044e2:	371c      	adds	r7, #28
 80044e4:	46bd      	mov	sp, r7
 80044e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ea:	4770      	bx	lr

080044ec <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80044ec:	b480      	push	{r7}
 80044ee:	b087      	sub	sp, #28
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	60f8      	str	r0, [r7, #12]
 80044f4:	60b9      	str	r1, [r7, #8]
 80044f6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80044f8:	68bb      	ldr	r3, [r7, #8]
 80044fa:	f003 031f 	and.w	r3, r3, #31
 80044fe:	2201      	movs	r2, #1
 8004500:	fa02 f303 	lsl.w	r3, r2, r3
 8004504:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	6a1a      	ldr	r2, [r3, #32]
 800450a:	697b      	ldr	r3, [r7, #20]
 800450c:	43db      	mvns	r3, r3
 800450e:	401a      	ands	r2, r3
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	6a1a      	ldr	r2, [r3, #32]
 8004518:	68bb      	ldr	r3, [r7, #8]
 800451a:	f003 031f 	and.w	r3, r3, #31
 800451e:	6879      	ldr	r1, [r7, #4]
 8004520:	fa01 f303 	lsl.w	r3, r1, r3
 8004524:	431a      	orrs	r2, r3
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	621a      	str	r2, [r3, #32]
}
 800452a:	bf00      	nop
 800452c:	371c      	adds	r7, #28
 800452e:	46bd      	mov	sp, r7
 8004530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004534:	4770      	bx	lr

08004536 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004536:	b480      	push	{r7}
 8004538:	b085      	sub	sp, #20
 800453a:	af00      	add	r7, sp, #0
 800453c:	6078      	str	r0, [r7, #4]
 800453e:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004546:	2b01      	cmp	r3, #1
 8004548:	d101      	bne.n	800454e <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800454a:	2302      	movs	r3, #2
 800454c:	e032      	b.n	80045b4 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	2201      	movs	r2, #1
 8004552:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	2202      	movs	r2, #2
 800455a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	685b      	ldr	r3, [r3, #4]
 8004564:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	689b      	ldr	r3, [r3, #8]
 800456c:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004574:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004576:	683b      	ldr	r3, [r7, #0]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	68fa      	ldr	r2, [r7, #12]
 800457c:	4313      	orrs	r3, r2
 800457e:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8004580:	68bb      	ldr	r3, [r7, #8]
 8004582:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004586:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004588:	683b      	ldr	r3, [r7, #0]
 800458a:	685b      	ldr	r3, [r3, #4]
 800458c:	68ba      	ldr	r2, [r7, #8]
 800458e:	4313      	orrs	r3, r2
 8004590:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	68fa      	ldr	r2, [r7, #12]
 8004598:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	68ba      	ldr	r2, [r7, #8]
 80045a0:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	2201      	movs	r2, #1
 80045a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	2200      	movs	r2, #0
 80045ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80045b2:	2300      	movs	r3, #0
}
 80045b4:	4618      	mov	r0, r3
 80045b6:	3714      	adds	r7, #20
 80045b8:	46bd      	mov	sp, r7
 80045ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045be:	4770      	bx	lr

080045c0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80045c0:	b480      	push	{r7}
 80045c2:	b083      	sub	sp, #12
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80045c8:	bf00      	nop
 80045ca:	370c      	adds	r7, #12
 80045cc:	46bd      	mov	sp, r7
 80045ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d2:	4770      	bx	lr

080045d4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80045d4:	b480      	push	{r7}
 80045d6:	b083      	sub	sp, #12
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80045dc:	bf00      	nop
 80045de:	370c      	adds	r7, #12
 80045e0:	46bd      	mov	sp, r7
 80045e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e6:	4770      	bx	lr

080045e8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80045e8:	b580      	push	{r7, lr}
 80045ea:	b082      	sub	sp, #8
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d101      	bne.n	80045fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80045f6:	2301      	movs	r3, #1
 80045f8:	e03f      	b.n	800467a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004600:	b2db      	uxtb	r3, r3
 8004602:	2b00      	cmp	r3, #0
 8004604:	d106      	bne.n	8004614 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	2200      	movs	r2, #0
 800460a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800460e:	6878      	ldr	r0, [r7, #4]
 8004610:	f00c f810 	bl	8010634 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2224      	movs	r2, #36	; 0x24
 8004618:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	68da      	ldr	r2, [r3, #12]
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800462a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800462c:	6878      	ldr	r0, [r7, #4]
 800462e:	f000 f90b 	bl	8004848 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	691a      	ldr	r2, [r3, #16]
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004640:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	695a      	ldr	r2, [r3, #20]
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004650:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	68da      	ldr	r2, [r3, #12]
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004660:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	2200      	movs	r2, #0
 8004666:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2220      	movs	r2, #32
 800466c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2220      	movs	r2, #32
 8004674:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8004678:	2300      	movs	r3, #0
}
 800467a:	4618      	mov	r0, r3
 800467c:	3708      	adds	r7, #8
 800467e:	46bd      	mov	sp, r7
 8004680:	bd80      	pop	{r7, pc}

08004682 <HAL_UART_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004682:	b580      	push	{r7, lr}
 8004684:	b088      	sub	sp, #32
 8004686:	af02      	add	r7, sp, #8
 8004688:	60f8      	str	r0, [r7, #12]
 800468a:	60b9      	str	r1, [r7, #8]
 800468c:	603b      	str	r3, [r7, #0]
 800468e:	4613      	mov	r3, r2
 8004690:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8004692:	2300      	movs	r3, #0
 8004694:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800469c:	b2db      	uxtb	r3, r3
 800469e:	2b20      	cmp	r3, #32
 80046a0:	f040 8083 	bne.w	80047aa <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 80046a4:	68bb      	ldr	r3, [r7, #8]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d002      	beq.n	80046b0 <HAL_UART_Transmit+0x2e>
 80046aa:	88fb      	ldrh	r3, [r7, #6]
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d101      	bne.n	80046b4 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80046b0:	2301      	movs	r3, #1
 80046b2:	e07b      	b.n	80047ac <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80046ba:	2b01      	cmp	r3, #1
 80046bc:	d101      	bne.n	80046c2 <HAL_UART_Transmit+0x40>
 80046be:	2302      	movs	r3, #2
 80046c0:	e074      	b.n	80047ac <HAL_UART_Transmit+0x12a>
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	2201      	movs	r2, #1
 80046c6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	2200      	movs	r2, #0
 80046ce:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	2221      	movs	r2, #33	; 0x21
 80046d4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80046d8:	f7fc fc94 	bl	8001004 <HAL_GetTick>
 80046dc:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	88fa      	ldrh	r2, [r7, #6]
 80046e2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	88fa      	ldrh	r2, [r7, #6]
 80046e8:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80046ea:	e042      	b.n	8004772 <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80046f0:	b29b      	uxth	r3, r3
 80046f2:	3b01      	subs	r3, #1
 80046f4:	b29a      	uxth	r2, r3
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	689b      	ldr	r3, [r3, #8]
 80046fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004702:	d122      	bne.n	800474a <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004704:	683b      	ldr	r3, [r7, #0]
 8004706:	9300      	str	r3, [sp, #0]
 8004708:	697b      	ldr	r3, [r7, #20]
 800470a:	2200      	movs	r2, #0
 800470c:	2180      	movs	r1, #128	; 0x80
 800470e:	68f8      	ldr	r0, [r7, #12]
 8004710:	f000 f850 	bl	80047b4 <UART_WaitOnFlagUntilTimeout>
 8004714:	4603      	mov	r3, r0
 8004716:	2b00      	cmp	r3, #0
 8004718:	d001      	beq.n	800471e <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 800471a:	2303      	movs	r3, #3
 800471c:	e046      	b.n	80047ac <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800471e:	68bb      	ldr	r3, [r7, #8]
 8004720:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8004722:	693b      	ldr	r3, [r7, #16]
 8004724:	881b      	ldrh	r3, [r3, #0]
 8004726:	461a      	mov	r2, r3
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004730:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	691b      	ldr	r3, [r3, #16]
 8004736:	2b00      	cmp	r3, #0
 8004738:	d103      	bne.n	8004742 <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 800473a:	68bb      	ldr	r3, [r7, #8]
 800473c:	3302      	adds	r3, #2
 800473e:	60bb      	str	r3, [r7, #8]
 8004740:	e017      	b.n	8004772 <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 8004742:	68bb      	ldr	r3, [r7, #8]
 8004744:	3301      	adds	r3, #1
 8004746:	60bb      	str	r3, [r7, #8]
 8004748:	e013      	b.n	8004772 <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	9300      	str	r3, [sp, #0]
 800474e:	697b      	ldr	r3, [r7, #20]
 8004750:	2200      	movs	r2, #0
 8004752:	2180      	movs	r1, #128	; 0x80
 8004754:	68f8      	ldr	r0, [r7, #12]
 8004756:	f000 f82d 	bl	80047b4 <UART_WaitOnFlagUntilTimeout>
 800475a:	4603      	mov	r3, r0
 800475c:	2b00      	cmp	r3, #0
 800475e:	d001      	beq.n	8004764 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8004760:	2303      	movs	r3, #3
 8004762:	e023      	b.n	80047ac <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8004764:	68bb      	ldr	r3, [r7, #8]
 8004766:	1c5a      	adds	r2, r3, #1
 8004768:	60ba      	str	r2, [r7, #8]
 800476a:	781a      	ldrb	r2, [r3, #0]
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004776:	b29b      	uxth	r3, r3
 8004778:	2b00      	cmp	r3, #0
 800477a:	d1b7      	bne.n	80046ec <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800477c:	683b      	ldr	r3, [r7, #0]
 800477e:	9300      	str	r3, [sp, #0]
 8004780:	697b      	ldr	r3, [r7, #20]
 8004782:	2200      	movs	r2, #0
 8004784:	2140      	movs	r1, #64	; 0x40
 8004786:	68f8      	ldr	r0, [r7, #12]
 8004788:	f000 f814 	bl	80047b4 <UART_WaitOnFlagUntilTimeout>
 800478c:	4603      	mov	r3, r0
 800478e:	2b00      	cmp	r3, #0
 8004790:	d001      	beq.n	8004796 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8004792:	2303      	movs	r3, #3
 8004794:	e00a      	b.n	80047ac <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	2220      	movs	r2, #32
 800479a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	2200      	movs	r2, #0
 80047a2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 80047a6:	2300      	movs	r3, #0
 80047a8:	e000      	b.n	80047ac <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80047aa:	2302      	movs	r3, #2
  }
}
 80047ac:	4618      	mov	r0, r3
 80047ae:	3718      	adds	r7, #24
 80047b0:	46bd      	mov	sp, r7
 80047b2:	bd80      	pop	{r7, pc}

080047b4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80047b4:	b580      	push	{r7, lr}
 80047b6:	b084      	sub	sp, #16
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	60f8      	str	r0, [r7, #12]
 80047bc:	60b9      	str	r1, [r7, #8]
 80047be:	603b      	str	r3, [r7, #0]
 80047c0:	4613      	mov	r3, r2
 80047c2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80047c4:	e02c      	b.n	8004820 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047c6:	69bb      	ldr	r3, [r7, #24]
 80047c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047cc:	d028      	beq.n	8004820 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80047ce:	69bb      	ldr	r3, [r7, #24]
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d007      	beq.n	80047e4 <UART_WaitOnFlagUntilTimeout+0x30>
 80047d4:	f7fc fc16 	bl	8001004 <HAL_GetTick>
 80047d8:	4602      	mov	r2, r0
 80047da:	683b      	ldr	r3, [r7, #0]
 80047dc:	1ad3      	subs	r3, r2, r3
 80047de:	69ba      	ldr	r2, [r7, #24]
 80047e0:	429a      	cmp	r2, r3
 80047e2:	d21d      	bcs.n	8004820 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	68da      	ldr	r2, [r3, #12]
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80047f2:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	695a      	ldr	r2, [r3, #20]
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f022 0201 	bic.w	r2, r2, #1
 8004802:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	2220      	movs	r2, #32
 8004808:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	2220      	movs	r2, #32
 8004810:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	2200      	movs	r2, #0
 8004818:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 800481c:	2303      	movs	r3, #3
 800481e:	e00f      	b.n	8004840 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	681a      	ldr	r2, [r3, #0]
 8004826:	68bb      	ldr	r3, [r7, #8]
 8004828:	4013      	ands	r3, r2
 800482a:	68ba      	ldr	r2, [r7, #8]
 800482c:	429a      	cmp	r2, r3
 800482e:	bf0c      	ite	eq
 8004830:	2301      	moveq	r3, #1
 8004832:	2300      	movne	r3, #0
 8004834:	b2db      	uxtb	r3, r3
 8004836:	461a      	mov	r2, r3
 8004838:	79fb      	ldrb	r3, [r7, #7]
 800483a:	429a      	cmp	r2, r3
 800483c:	d0c3      	beq.n	80047c6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800483e:	2300      	movs	r3, #0
}
 8004840:	4618      	mov	r0, r3
 8004842:	3710      	adds	r7, #16
 8004844:	46bd      	mov	sp, r7
 8004846:	bd80      	pop	{r7, pc}

08004848 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004848:	b5b0      	push	{r4, r5, r7, lr}
 800484a:	b084      	sub	sp, #16
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	691b      	ldr	r3, [r3, #16]
 8004856:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	68da      	ldr	r2, [r3, #12]
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	430a      	orrs	r2, r1
 8004864:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	689a      	ldr	r2, [r3, #8]
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	691b      	ldr	r3, [r3, #16]
 800486e:	431a      	orrs	r2, r3
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	695b      	ldr	r3, [r3, #20]
 8004874:	431a      	orrs	r2, r3
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	69db      	ldr	r3, [r3, #28]
 800487a:	4313      	orrs	r3, r2
 800487c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	68db      	ldr	r3, [r3, #12]
 8004884:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8004888:	f023 030c 	bic.w	r3, r3, #12
 800488c:	687a      	ldr	r2, [r7, #4]
 800488e:	6812      	ldr	r2, [r2, #0]
 8004890:	68f9      	ldr	r1, [r7, #12]
 8004892:	430b      	orrs	r3, r1
 8004894:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	695b      	ldr	r3, [r3, #20]
 800489c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	699a      	ldr	r2, [r3, #24]
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	430a      	orrs	r2, r1
 80048aa:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	69db      	ldr	r3, [r3, #28]
 80048b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80048b4:	f040 80e4 	bne.w	8004a80 <UART_SetConfig+0x238>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	4aab      	ldr	r2, [pc, #684]	; (8004b6c <UART_SetConfig+0x324>)
 80048be:	4293      	cmp	r3, r2
 80048c0:	d004      	beq.n	80048cc <UART_SetConfig+0x84>
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	4aaa      	ldr	r2, [pc, #680]	; (8004b70 <UART_SetConfig+0x328>)
 80048c8:	4293      	cmp	r3, r2
 80048ca:	d16c      	bne.n	80049a6 <UART_SetConfig+0x15e>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80048cc:	f7fe f92a 	bl	8002b24 <HAL_RCC_GetPCLK2Freq>
 80048d0:	4602      	mov	r2, r0
 80048d2:	4613      	mov	r3, r2
 80048d4:	009b      	lsls	r3, r3, #2
 80048d6:	4413      	add	r3, r2
 80048d8:	009a      	lsls	r2, r3, #2
 80048da:	441a      	add	r2, r3
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	685b      	ldr	r3, [r3, #4]
 80048e0:	005b      	lsls	r3, r3, #1
 80048e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80048e6:	4aa3      	ldr	r2, [pc, #652]	; (8004b74 <UART_SetConfig+0x32c>)
 80048e8:	fba2 2303 	umull	r2, r3, r2, r3
 80048ec:	095b      	lsrs	r3, r3, #5
 80048ee:	011c      	lsls	r4, r3, #4
 80048f0:	f7fe f918 	bl	8002b24 <HAL_RCC_GetPCLK2Freq>
 80048f4:	4602      	mov	r2, r0
 80048f6:	4613      	mov	r3, r2
 80048f8:	009b      	lsls	r3, r3, #2
 80048fa:	4413      	add	r3, r2
 80048fc:	009a      	lsls	r2, r3, #2
 80048fe:	441a      	add	r2, r3
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	685b      	ldr	r3, [r3, #4]
 8004904:	005b      	lsls	r3, r3, #1
 8004906:	fbb2 f5f3 	udiv	r5, r2, r3
 800490a:	f7fe f90b 	bl	8002b24 <HAL_RCC_GetPCLK2Freq>
 800490e:	4602      	mov	r2, r0
 8004910:	4613      	mov	r3, r2
 8004912:	009b      	lsls	r3, r3, #2
 8004914:	4413      	add	r3, r2
 8004916:	009a      	lsls	r2, r3, #2
 8004918:	441a      	add	r2, r3
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	685b      	ldr	r3, [r3, #4]
 800491e:	005b      	lsls	r3, r3, #1
 8004920:	fbb2 f3f3 	udiv	r3, r2, r3
 8004924:	4a93      	ldr	r2, [pc, #588]	; (8004b74 <UART_SetConfig+0x32c>)
 8004926:	fba2 2303 	umull	r2, r3, r2, r3
 800492a:	095b      	lsrs	r3, r3, #5
 800492c:	2264      	movs	r2, #100	; 0x64
 800492e:	fb02 f303 	mul.w	r3, r2, r3
 8004932:	1aeb      	subs	r3, r5, r3
 8004934:	00db      	lsls	r3, r3, #3
 8004936:	3332      	adds	r3, #50	; 0x32
 8004938:	4a8e      	ldr	r2, [pc, #568]	; (8004b74 <UART_SetConfig+0x32c>)
 800493a:	fba2 2303 	umull	r2, r3, r2, r3
 800493e:	095b      	lsrs	r3, r3, #5
 8004940:	005b      	lsls	r3, r3, #1
 8004942:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004946:	441c      	add	r4, r3
 8004948:	f7fe f8ec 	bl	8002b24 <HAL_RCC_GetPCLK2Freq>
 800494c:	4602      	mov	r2, r0
 800494e:	4613      	mov	r3, r2
 8004950:	009b      	lsls	r3, r3, #2
 8004952:	4413      	add	r3, r2
 8004954:	009a      	lsls	r2, r3, #2
 8004956:	441a      	add	r2, r3
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	685b      	ldr	r3, [r3, #4]
 800495c:	005b      	lsls	r3, r3, #1
 800495e:	fbb2 f5f3 	udiv	r5, r2, r3
 8004962:	f7fe f8df 	bl	8002b24 <HAL_RCC_GetPCLK2Freq>
 8004966:	4602      	mov	r2, r0
 8004968:	4613      	mov	r3, r2
 800496a:	009b      	lsls	r3, r3, #2
 800496c:	4413      	add	r3, r2
 800496e:	009a      	lsls	r2, r3, #2
 8004970:	441a      	add	r2, r3
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	685b      	ldr	r3, [r3, #4]
 8004976:	005b      	lsls	r3, r3, #1
 8004978:	fbb2 f3f3 	udiv	r3, r2, r3
 800497c:	4a7d      	ldr	r2, [pc, #500]	; (8004b74 <UART_SetConfig+0x32c>)
 800497e:	fba2 2303 	umull	r2, r3, r2, r3
 8004982:	095b      	lsrs	r3, r3, #5
 8004984:	2264      	movs	r2, #100	; 0x64
 8004986:	fb02 f303 	mul.w	r3, r2, r3
 800498a:	1aeb      	subs	r3, r5, r3
 800498c:	00db      	lsls	r3, r3, #3
 800498e:	3332      	adds	r3, #50	; 0x32
 8004990:	4a78      	ldr	r2, [pc, #480]	; (8004b74 <UART_SetConfig+0x32c>)
 8004992:	fba2 2303 	umull	r2, r3, r2, r3
 8004996:	095b      	lsrs	r3, r3, #5
 8004998:	f003 0207 	and.w	r2, r3, #7
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	4422      	add	r2, r4
 80049a2:	609a      	str	r2, [r3, #8]
 80049a4:	e154      	b.n	8004c50 <UART_SetConfig+0x408>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80049a6:	f7fe f8a9 	bl	8002afc <HAL_RCC_GetPCLK1Freq>
 80049aa:	4602      	mov	r2, r0
 80049ac:	4613      	mov	r3, r2
 80049ae:	009b      	lsls	r3, r3, #2
 80049b0:	4413      	add	r3, r2
 80049b2:	009a      	lsls	r2, r3, #2
 80049b4:	441a      	add	r2, r3
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	685b      	ldr	r3, [r3, #4]
 80049ba:	005b      	lsls	r3, r3, #1
 80049bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80049c0:	4a6c      	ldr	r2, [pc, #432]	; (8004b74 <UART_SetConfig+0x32c>)
 80049c2:	fba2 2303 	umull	r2, r3, r2, r3
 80049c6:	095b      	lsrs	r3, r3, #5
 80049c8:	011c      	lsls	r4, r3, #4
 80049ca:	f7fe f897 	bl	8002afc <HAL_RCC_GetPCLK1Freq>
 80049ce:	4602      	mov	r2, r0
 80049d0:	4613      	mov	r3, r2
 80049d2:	009b      	lsls	r3, r3, #2
 80049d4:	4413      	add	r3, r2
 80049d6:	009a      	lsls	r2, r3, #2
 80049d8:	441a      	add	r2, r3
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	685b      	ldr	r3, [r3, #4]
 80049de:	005b      	lsls	r3, r3, #1
 80049e0:	fbb2 f5f3 	udiv	r5, r2, r3
 80049e4:	f7fe f88a 	bl	8002afc <HAL_RCC_GetPCLK1Freq>
 80049e8:	4602      	mov	r2, r0
 80049ea:	4613      	mov	r3, r2
 80049ec:	009b      	lsls	r3, r3, #2
 80049ee:	4413      	add	r3, r2
 80049f0:	009a      	lsls	r2, r3, #2
 80049f2:	441a      	add	r2, r3
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	685b      	ldr	r3, [r3, #4]
 80049f8:	005b      	lsls	r3, r3, #1
 80049fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80049fe:	4a5d      	ldr	r2, [pc, #372]	; (8004b74 <UART_SetConfig+0x32c>)
 8004a00:	fba2 2303 	umull	r2, r3, r2, r3
 8004a04:	095b      	lsrs	r3, r3, #5
 8004a06:	2264      	movs	r2, #100	; 0x64
 8004a08:	fb02 f303 	mul.w	r3, r2, r3
 8004a0c:	1aeb      	subs	r3, r5, r3
 8004a0e:	00db      	lsls	r3, r3, #3
 8004a10:	3332      	adds	r3, #50	; 0x32
 8004a12:	4a58      	ldr	r2, [pc, #352]	; (8004b74 <UART_SetConfig+0x32c>)
 8004a14:	fba2 2303 	umull	r2, r3, r2, r3
 8004a18:	095b      	lsrs	r3, r3, #5
 8004a1a:	005b      	lsls	r3, r3, #1
 8004a1c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004a20:	441c      	add	r4, r3
 8004a22:	f7fe f86b 	bl	8002afc <HAL_RCC_GetPCLK1Freq>
 8004a26:	4602      	mov	r2, r0
 8004a28:	4613      	mov	r3, r2
 8004a2a:	009b      	lsls	r3, r3, #2
 8004a2c:	4413      	add	r3, r2
 8004a2e:	009a      	lsls	r2, r3, #2
 8004a30:	441a      	add	r2, r3
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	685b      	ldr	r3, [r3, #4]
 8004a36:	005b      	lsls	r3, r3, #1
 8004a38:	fbb2 f5f3 	udiv	r5, r2, r3
 8004a3c:	f7fe f85e 	bl	8002afc <HAL_RCC_GetPCLK1Freq>
 8004a40:	4602      	mov	r2, r0
 8004a42:	4613      	mov	r3, r2
 8004a44:	009b      	lsls	r3, r3, #2
 8004a46:	4413      	add	r3, r2
 8004a48:	009a      	lsls	r2, r3, #2
 8004a4a:	441a      	add	r2, r3
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	685b      	ldr	r3, [r3, #4]
 8004a50:	005b      	lsls	r3, r3, #1
 8004a52:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a56:	4a47      	ldr	r2, [pc, #284]	; (8004b74 <UART_SetConfig+0x32c>)
 8004a58:	fba2 2303 	umull	r2, r3, r2, r3
 8004a5c:	095b      	lsrs	r3, r3, #5
 8004a5e:	2264      	movs	r2, #100	; 0x64
 8004a60:	fb02 f303 	mul.w	r3, r2, r3
 8004a64:	1aeb      	subs	r3, r5, r3
 8004a66:	00db      	lsls	r3, r3, #3
 8004a68:	3332      	adds	r3, #50	; 0x32
 8004a6a:	4a42      	ldr	r2, [pc, #264]	; (8004b74 <UART_SetConfig+0x32c>)
 8004a6c:	fba2 2303 	umull	r2, r3, r2, r3
 8004a70:	095b      	lsrs	r3, r3, #5
 8004a72:	f003 0207 	and.w	r2, r3, #7
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	4422      	add	r2, r4
 8004a7c:	609a      	str	r2, [r3, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 8004a7e:	e0e7      	b.n	8004c50 <UART_SetConfig+0x408>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	4a39      	ldr	r2, [pc, #228]	; (8004b6c <UART_SetConfig+0x324>)
 8004a86:	4293      	cmp	r3, r2
 8004a88:	d004      	beq.n	8004a94 <UART_SetConfig+0x24c>
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	4a38      	ldr	r2, [pc, #224]	; (8004b70 <UART_SetConfig+0x328>)
 8004a90:	4293      	cmp	r3, r2
 8004a92:	d171      	bne.n	8004b78 <UART_SetConfig+0x330>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8004a94:	f7fe f846 	bl	8002b24 <HAL_RCC_GetPCLK2Freq>
 8004a98:	4602      	mov	r2, r0
 8004a9a:	4613      	mov	r3, r2
 8004a9c:	009b      	lsls	r3, r3, #2
 8004a9e:	4413      	add	r3, r2
 8004aa0:	009a      	lsls	r2, r3, #2
 8004aa2:	441a      	add	r2, r3
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	685b      	ldr	r3, [r3, #4]
 8004aa8:	009b      	lsls	r3, r3, #2
 8004aaa:	fbb2 f3f3 	udiv	r3, r2, r3
 8004aae:	4a31      	ldr	r2, [pc, #196]	; (8004b74 <UART_SetConfig+0x32c>)
 8004ab0:	fba2 2303 	umull	r2, r3, r2, r3
 8004ab4:	095b      	lsrs	r3, r3, #5
 8004ab6:	011c      	lsls	r4, r3, #4
 8004ab8:	f7fe f834 	bl	8002b24 <HAL_RCC_GetPCLK2Freq>
 8004abc:	4602      	mov	r2, r0
 8004abe:	4613      	mov	r3, r2
 8004ac0:	009b      	lsls	r3, r3, #2
 8004ac2:	4413      	add	r3, r2
 8004ac4:	009a      	lsls	r2, r3, #2
 8004ac6:	441a      	add	r2, r3
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	685b      	ldr	r3, [r3, #4]
 8004acc:	009b      	lsls	r3, r3, #2
 8004ace:	fbb2 f5f3 	udiv	r5, r2, r3
 8004ad2:	f7fe f827 	bl	8002b24 <HAL_RCC_GetPCLK2Freq>
 8004ad6:	4602      	mov	r2, r0
 8004ad8:	4613      	mov	r3, r2
 8004ada:	009b      	lsls	r3, r3, #2
 8004adc:	4413      	add	r3, r2
 8004ade:	009a      	lsls	r2, r3, #2
 8004ae0:	441a      	add	r2, r3
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	685b      	ldr	r3, [r3, #4]
 8004ae6:	009b      	lsls	r3, r3, #2
 8004ae8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004aec:	4a21      	ldr	r2, [pc, #132]	; (8004b74 <UART_SetConfig+0x32c>)
 8004aee:	fba2 2303 	umull	r2, r3, r2, r3
 8004af2:	095b      	lsrs	r3, r3, #5
 8004af4:	2264      	movs	r2, #100	; 0x64
 8004af6:	fb02 f303 	mul.w	r3, r2, r3
 8004afa:	1aeb      	subs	r3, r5, r3
 8004afc:	011b      	lsls	r3, r3, #4
 8004afe:	3332      	adds	r3, #50	; 0x32
 8004b00:	4a1c      	ldr	r2, [pc, #112]	; (8004b74 <UART_SetConfig+0x32c>)
 8004b02:	fba2 2303 	umull	r2, r3, r2, r3
 8004b06:	095b      	lsrs	r3, r3, #5
 8004b08:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004b0c:	441c      	add	r4, r3
 8004b0e:	f7fe f809 	bl	8002b24 <HAL_RCC_GetPCLK2Freq>
 8004b12:	4602      	mov	r2, r0
 8004b14:	4613      	mov	r3, r2
 8004b16:	009b      	lsls	r3, r3, #2
 8004b18:	4413      	add	r3, r2
 8004b1a:	009a      	lsls	r2, r3, #2
 8004b1c:	441a      	add	r2, r3
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	685b      	ldr	r3, [r3, #4]
 8004b22:	009b      	lsls	r3, r3, #2
 8004b24:	fbb2 f5f3 	udiv	r5, r2, r3
 8004b28:	f7fd fffc 	bl	8002b24 <HAL_RCC_GetPCLK2Freq>
 8004b2c:	4602      	mov	r2, r0
 8004b2e:	4613      	mov	r3, r2
 8004b30:	009b      	lsls	r3, r3, #2
 8004b32:	4413      	add	r3, r2
 8004b34:	009a      	lsls	r2, r3, #2
 8004b36:	441a      	add	r2, r3
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	685b      	ldr	r3, [r3, #4]
 8004b3c:	009b      	lsls	r3, r3, #2
 8004b3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b42:	4a0c      	ldr	r2, [pc, #48]	; (8004b74 <UART_SetConfig+0x32c>)
 8004b44:	fba2 2303 	umull	r2, r3, r2, r3
 8004b48:	095b      	lsrs	r3, r3, #5
 8004b4a:	2264      	movs	r2, #100	; 0x64
 8004b4c:	fb02 f303 	mul.w	r3, r2, r3
 8004b50:	1aeb      	subs	r3, r5, r3
 8004b52:	011b      	lsls	r3, r3, #4
 8004b54:	3332      	adds	r3, #50	; 0x32
 8004b56:	4a07      	ldr	r2, [pc, #28]	; (8004b74 <UART_SetConfig+0x32c>)
 8004b58:	fba2 2303 	umull	r2, r3, r2, r3
 8004b5c:	095b      	lsrs	r3, r3, #5
 8004b5e:	f003 020f 	and.w	r2, r3, #15
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	4422      	add	r2, r4
 8004b68:	609a      	str	r2, [r3, #8]
 8004b6a:	e071      	b.n	8004c50 <UART_SetConfig+0x408>
 8004b6c:	40011000 	.word	0x40011000
 8004b70:	40011400 	.word	0x40011400
 8004b74:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8004b78:	f7fd ffc0 	bl	8002afc <HAL_RCC_GetPCLK1Freq>
 8004b7c:	4602      	mov	r2, r0
 8004b7e:	4613      	mov	r3, r2
 8004b80:	009b      	lsls	r3, r3, #2
 8004b82:	4413      	add	r3, r2
 8004b84:	009a      	lsls	r2, r3, #2
 8004b86:	441a      	add	r2, r3
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	685b      	ldr	r3, [r3, #4]
 8004b8c:	009b      	lsls	r3, r3, #2
 8004b8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b92:	4a31      	ldr	r2, [pc, #196]	; (8004c58 <UART_SetConfig+0x410>)
 8004b94:	fba2 2303 	umull	r2, r3, r2, r3
 8004b98:	095b      	lsrs	r3, r3, #5
 8004b9a:	011c      	lsls	r4, r3, #4
 8004b9c:	f7fd ffae 	bl	8002afc <HAL_RCC_GetPCLK1Freq>
 8004ba0:	4602      	mov	r2, r0
 8004ba2:	4613      	mov	r3, r2
 8004ba4:	009b      	lsls	r3, r3, #2
 8004ba6:	4413      	add	r3, r2
 8004ba8:	009a      	lsls	r2, r3, #2
 8004baa:	441a      	add	r2, r3
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	685b      	ldr	r3, [r3, #4]
 8004bb0:	009b      	lsls	r3, r3, #2
 8004bb2:	fbb2 f5f3 	udiv	r5, r2, r3
 8004bb6:	f7fd ffa1 	bl	8002afc <HAL_RCC_GetPCLK1Freq>
 8004bba:	4602      	mov	r2, r0
 8004bbc:	4613      	mov	r3, r2
 8004bbe:	009b      	lsls	r3, r3, #2
 8004bc0:	4413      	add	r3, r2
 8004bc2:	009a      	lsls	r2, r3, #2
 8004bc4:	441a      	add	r2, r3
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	685b      	ldr	r3, [r3, #4]
 8004bca:	009b      	lsls	r3, r3, #2
 8004bcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bd0:	4a21      	ldr	r2, [pc, #132]	; (8004c58 <UART_SetConfig+0x410>)
 8004bd2:	fba2 2303 	umull	r2, r3, r2, r3
 8004bd6:	095b      	lsrs	r3, r3, #5
 8004bd8:	2264      	movs	r2, #100	; 0x64
 8004bda:	fb02 f303 	mul.w	r3, r2, r3
 8004bde:	1aeb      	subs	r3, r5, r3
 8004be0:	011b      	lsls	r3, r3, #4
 8004be2:	3332      	adds	r3, #50	; 0x32
 8004be4:	4a1c      	ldr	r2, [pc, #112]	; (8004c58 <UART_SetConfig+0x410>)
 8004be6:	fba2 2303 	umull	r2, r3, r2, r3
 8004bea:	095b      	lsrs	r3, r3, #5
 8004bec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004bf0:	441c      	add	r4, r3
 8004bf2:	f7fd ff83 	bl	8002afc <HAL_RCC_GetPCLK1Freq>
 8004bf6:	4602      	mov	r2, r0
 8004bf8:	4613      	mov	r3, r2
 8004bfa:	009b      	lsls	r3, r3, #2
 8004bfc:	4413      	add	r3, r2
 8004bfe:	009a      	lsls	r2, r3, #2
 8004c00:	441a      	add	r2, r3
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	685b      	ldr	r3, [r3, #4]
 8004c06:	009b      	lsls	r3, r3, #2
 8004c08:	fbb2 f5f3 	udiv	r5, r2, r3
 8004c0c:	f7fd ff76 	bl	8002afc <HAL_RCC_GetPCLK1Freq>
 8004c10:	4602      	mov	r2, r0
 8004c12:	4613      	mov	r3, r2
 8004c14:	009b      	lsls	r3, r3, #2
 8004c16:	4413      	add	r3, r2
 8004c18:	009a      	lsls	r2, r3, #2
 8004c1a:	441a      	add	r2, r3
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	685b      	ldr	r3, [r3, #4]
 8004c20:	009b      	lsls	r3, r3, #2
 8004c22:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c26:	4a0c      	ldr	r2, [pc, #48]	; (8004c58 <UART_SetConfig+0x410>)
 8004c28:	fba2 2303 	umull	r2, r3, r2, r3
 8004c2c:	095b      	lsrs	r3, r3, #5
 8004c2e:	2264      	movs	r2, #100	; 0x64
 8004c30:	fb02 f303 	mul.w	r3, r2, r3
 8004c34:	1aeb      	subs	r3, r5, r3
 8004c36:	011b      	lsls	r3, r3, #4
 8004c38:	3332      	adds	r3, #50	; 0x32
 8004c3a:	4a07      	ldr	r2, [pc, #28]	; (8004c58 <UART_SetConfig+0x410>)
 8004c3c:	fba2 2303 	umull	r2, r3, r2, r3
 8004c40:	095b      	lsrs	r3, r3, #5
 8004c42:	f003 020f 	and.w	r2, r3, #15
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	4422      	add	r2, r4
 8004c4c:	609a      	str	r2, [r3, #8]
}
 8004c4e:	e7ff      	b.n	8004c50 <UART_SetConfig+0x408>
 8004c50:	bf00      	nop
 8004c52:	3710      	adds	r7, #16
 8004c54:	46bd      	mov	sp, r7
 8004c56:	bdb0      	pop	{r4, r5, r7, pc}
 8004c58:	51eb851f 	.word	0x51eb851f

08004c5c <drive_init>:
//drive_init
// 走行系の変数の初期化
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void drive_init(void){
 8004c5c:	b480      	push	{r7}
 8004c5e:	af00      	add	r7, sp, #0
	MF.FLAGS = 0;
 8004c60:	4b05      	ldr	r3, [pc, #20]	; (8004c78 <drive_init+0x1c>)
 8004c62:	2200      	movs	r2, #0
 8004c64:	801a      	strh	r2, [r3, #0]
	MF2.FLAGS2 = 0;
 8004c66:	4b05      	ldr	r3, [pc, #20]	; (8004c7c <drive_init+0x20>)
 8004c68:	2200      	movs	r2, #0
 8004c6a:	801a      	strh	r2, [r3, #0]
}
 8004c6c:	bf00      	nop
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c74:	4770      	bx	lr
 8004c76:	bf00      	nop
 8004c78:	20000f68 	.word	0x20000f68
 8004c7c:	20000f64 	.word	0x20000f64

08004c80 <drive_ready>:
//drive_ready
// 走行前のLED点滅&ジャイロのドリフト計算
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void drive_ready(void){
 8004c80:	b580      	push	{r7, lr}
 8004c82:	af00      	add	r7, sp, #0
	  while(ad_fl <= WALL_BASE_FL){
 8004c84:	e00f      	b.n	8004ca6 <drive_ready+0x26>
		  led_write(1, 1, 1);
 8004c86:	2201      	movs	r2, #1
 8004c88:	2101      	movs	r1, #1
 8004c8a:	2001      	movs	r0, #1
 8004c8c:	f00b f8b0 	bl	800fdf0 <led_write>
		  HAL_Delay(200);
 8004c90:	20c8      	movs	r0, #200	; 0xc8
 8004c92:	f7fc f9c3 	bl	800101c <HAL_Delay>
		  led_write(0, 0, 0);
 8004c96:	2200      	movs	r2, #0
 8004c98:	2100      	movs	r1, #0
 8004c9a:	2000      	movs	r0, #0
 8004c9c:	f00b f8a8 	bl	800fdf0 <led_write>
		  HAL_Delay(200);
 8004ca0:	20c8      	movs	r0, #200	; 0xc8
 8004ca2:	f7fc f9bb 	bl	800101c <HAL_Delay>
	  while(ad_fl <= WALL_BASE_FL){
 8004ca6:	4b09      	ldr	r3, [pc, #36]	; (8004ccc <drive_ready+0x4c>)
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	2bc8      	cmp	r3, #200	; 0xc8
 8004cac:	d9eb      	bls.n	8004c86 <drive_ready+0x6>
	  }
	  MF2.FLAG.GDRIFT = 1;
 8004cae:	4a08      	ldr	r2, [pc, #32]	; (8004cd0 <drive_ready+0x50>)
 8004cb0:	8813      	ldrh	r3, [r2, #0]
 8004cb2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004cb6:	8013      	strh	r3, [r2, #0]
	  HAL_Delay(2000);
 8004cb8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8004cbc:	f7fc f9ae 	bl	800101c <HAL_Delay>
	  degree_z = 0;
 8004cc0:	4b04      	ldr	r3, [pc, #16]	; (8004cd4 <drive_ready+0x54>)
 8004cc2:	f04f 0200 	mov.w	r2, #0
 8004cc6:	601a      	str	r2, [r3, #0]
}
 8004cc8:	bf00      	nop
 8004cca:	bd80      	pop	{r7, pc}
 8004ccc:	20000d54 	.word	0x20000d54
 8004cd0:	20000f64 	.word	0x20000f64
 8004cd4:	20000b5c 	.word	0x20000b5c

08004cd8 <drive_start>:
//drive_start
// 走行開始前に走行距離と機体角度を初期化
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void drive_start(void){
 8004cd8:	b480      	push	{r7}
 8004cda:	af00      	add	r7, sp, #0
	dist_l = dist_r = 0;		//走行距離の初期化
 8004cdc:	f04f 0300 	mov.w	r3, #0
 8004ce0:	4a0f      	ldr	r2, [pc, #60]	; (8004d20 <drive_start+0x48>)
 8004ce2:	6013      	str	r3, [r2, #0]
 8004ce4:	4a0f      	ldr	r2, [pc, #60]	; (8004d24 <drive_start+0x4c>)
 8004ce6:	6013      	str	r3, [r2, #0]
	if(!MF2.FLAG.HACCEL) target_speed_l = target_speed_r = 0;		//モータ出力の初期化
 8004ce8:	4b0f      	ldr	r3, [pc, #60]	; (8004d28 <drive_start+0x50>)
 8004cea:	881b      	ldrh	r3, [r3, #0]
 8004cec:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8004cf0:	b2db      	uxtb	r3, r3
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d105      	bne.n	8004d02 <drive_start+0x2a>
 8004cf6:	f04f 0300 	mov.w	r3, #0
 8004cfa:	4a0c      	ldr	r2, [pc, #48]	; (8004d2c <drive_start+0x54>)
 8004cfc:	6013      	str	r3, [r2, #0]
 8004cfe:	4a0c      	ldr	r2, [pc, #48]	; (8004d30 <drive_start+0x58>)
 8004d00:	6013      	str	r3, [r2, #0]
	MF.FLAG.DRV = 1;
 8004d02:	4a0c      	ldr	r2, [pc, #48]	; (8004d34 <drive_start+0x5c>)
 8004d04:	8813      	ldrh	r3, [r2, #0]
 8004d06:	f043 0302 	orr.w	r3, r3, #2
 8004d0a:	8013      	strh	r3, [r2, #0]
	MF.FLAG.SPD = 1;
 8004d0c:	4a09      	ldr	r2, [pc, #36]	; (8004d34 <drive_start+0x5c>)
 8004d0e:	8813      	ldrh	r3, [r2, #0]
 8004d10:	f043 0304 	orr.w	r3, r3, #4
 8004d14:	8013      	strh	r3, [r2, #0]
}
 8004d16:	bf00      	nop
 8004d18:	46bd      	mov	sp, r7
 8004d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1e:	4770      	bx	lr
 8004d20:	20000aec 	.word	0x20000aec
 8004d24:	200015c4 	.word	0x200015c4
 8004d28:	20000f64 	.word	0x20000f64
 8004d2c:	200001a0 	.word	0x200001a0
 8004d30:	20000bfc 	.word	0x20000bfc
 8004d34:	20000f68 	.word	0x20000f68

08004d38 <drive_stop>:
//drive_stop
// 走行を終了する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void drive_stop(void){
 8004d38:	b480      	push	{r7}
 8004d3a:	af00      	add	r7, sp, #0
	dist_l = dist_r = 0;		//a走行距離の初期化
 8004d3c:	f04f 0300 	mov.w	r3, #0
 8004d40:	4a0c      	ldr	r2, [pc, #48]	; (8004d74 <drive_stop+0x3c>)
 8004d42:	6013      	str	r3, [r2, #0]
 8004d44:	4a0c      	ldr	r2, [pc, #48]	; (8004d78 <drive_stop+0x40>)
 8004d46:	6013      	str	r3, [r2, #0]
	pulse_l = pulse_r = 0;		//aモータ出力の初期化
 8004d48:	f04f 0300 	mov.w	r3, #0
 8004d4c:	4a0b      	ldr	r2, [pc, #44]	; (8004d7c <drive_stop+0x44>)
 8004d4e:	6013      	str	r3, [r2, #0]
 8004d50:	4a0b      	ldr	r2, [pc, #44]	; (8004d80 <drive_stop+0x48>)
 8004d52:	6013      	str	r3, [r2, #0]
	MF.FLAG.DRV = 0;
 8004d54:	4a0b      	ldr	r2, [pc, #44]	; (8004d84 <drive_stop+0x4c>)
 8004d56:	8813      	ldrh	r3, [r2, #0]
 8004d58:	f36f 0341 	bfc	r3, #1, #1
 8004d5c:	8013      	strh	r3, [r2, #0]
	MF.FLAG.SPD = 0;
 8004d5e:	4a09      	ldr	r2, [pc, #36]	; (8004d84 <drive_stop+0x4c>)
 8004d60:	8813      	ldrh	r3, [r2, #0]
 8004d62:	f36f 0382 	bfc	r3, #2, #1
 8004d66:	8013      	strh	r3, [r2, #0]
}
 8004d68:	bf00      	nop
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d70:	4770      	bx	lr
 8004d72:	bf00      	nop
 8004d74:	20000aec 	.word	0x20000aec
 8004d78:	200015c4 	.word	0x200015c4
 8004d7c:	20000780 	.word	0x20000780
 8004d80:	20000ba8 	.word	0x20000ba8
 8004d84:	20000f68 	.word	0x20000f68

08004d88 <control_start>:
//control_start
// wallとgyroの姿勢制御を開始する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void control_start(){
 8004d88:	b480      	push	{r7}
 8004d8a:	af00      	add	r7, sp, #0
	MF.FLAG.WCTRL = 1;										//wall制御を有効にする
 8004d8c:	4a07      	ldr	r2, [pc, #28]	; (8004dac <control_start+0x24>)
 8004d8e:	8813      	ldrh	r3, [r2, #0]
 8004d90:	f043 0308 	orr.w	r3, r3, #8
 8004d94:	8013      	strh	r3, [r2, #0]
	MF.FLAG.GCTRL = 1;										//gyro制御を有効にする
 8004d96:	4a05      	ldr	r2, [pc, #20]	; (8004dac <control_start+0x24>)
 8004d98:	8813      	ldrh	r3, [r2, #0]
 8004d9a:	f043 0310 	orr.w	r3, r3, #16
 8004d9e:	8013      	strh	r3, [r2, #0]
}
 8004da0:	bf00      	nop
 8004da2:	46bd      	mov	sp, r7
 8004da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da8:	4770      	bx	lr
 8004daa:	bf00      	nop
 8004dac:	20000f68 	.word	0x20000f68

08004db0 <control_stop>:
//control_stop
// wallとgyroの姿勢制御を停止する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void control_stop(){
 8004db0:	b480      	push	{r7}
 8004db2:	af00      	add	r7, sp, #0
	MF.FLAG.WCTRL = 0;										//wall制御を無効にする
 8004db4:	4a07      	ldr	r2, [pc, #28]	; (8004dd4 <control_stop+0x24>)
 8004db6:	8813      	ldrh	r3, [r2, #0]
 8004db8:	f36f 03c3 	bfc	r3, #3, #1
 8004dbc:	8013      	strh	r3, [r2, #0]
	MF.FLAG.GCTRL = 0;										//gyro制御を無効にする
 8004dbe:	4a05      	ldr	r2, [pc, #20]	; (8004dd4 <control_stop+0x24>)
 8004dc0:	8813      	ldrh	r3, [r2, #0]
 8004dc2:	f36f 1304 	bfc	r3, #4, #1
 8004dc6:	8013      	strh	r3, [r2, #0]
}
 8004dc8:	bf00      	nop
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd0:	4770      	bx	lr
 8004dd2:	bf00      	nop
 8004dd4:	20000f68 	.word	0x20000f68

08004dd8 <drive_dir>:
//drive_dir
// wheel turn dir for each wheel
// 引数:1車輪選択(0=>L, 1=>R), 2回転方向選択(0=>CW, 1=>CWW, 2=>ShortBrake, 3=>free)
// 戻り値: なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void drive_dir(uint8_t wheel, uint8_t dir){
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	b082      	sub	sp, #8
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	4603      	mov	r3, r0
 8004de0:	460a      	mov	r2, r1
 8004de2:	71fb      	strb	r3, [r7, #7]
 8004de4:	4613      	mov	r3, r2
 8004de6:	71bb      	strb	r3, [r7, #6]
	if(wheel == 0){
 8004de8:	79fb      	ldrb	r3, [r7, #7]
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d13e      	bne.n	8004e6c <drive_dir+0x94>
		if(dir == 0){
 8004dee:	79bb      	ldrb	r3, [r7, #6]
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d10f      	bne.n	8004e14 <drive_dir+0x3c>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_SET);		//L_CW
 8004df4:	2201      	movs	r2, #1
 8004df6:	2120      	movs	r1, #32
 8004df8:	483f      	ldr	r0, [pc, #252]	; (8004ef8 <drive_dir+0x120>)
 8004dfa:	f7fd fa83 	bl	8002304 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET);	//L_CCW
 8004dfe:	2200      	movs	r2, #0
 8004e00:	2110      	movs	r1, #16
 8004e02:	483d      	ldr	r0, [pc, #244]	; (8004ef8 <drive_dir+0x120>)
 8004e04:	f7fd fa7e 	bl	8002304 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);		//STBY
 8004e08:	2201      	movs	r2, #1
 8004e0a:	2101      	movs	r1, #1
 8004e0c:	483b      	ldr	r0, [pc, #236]	; (8004efc <drive_dir+0x124>)
 8004e0e:	f7fd fa79 	bl	8002304 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);		//STBY
		}else{
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);	//STBY
		}
	}
}
 8004e12:	e06c      	b.n	8004eee <drive_dir+0x116>
		}else if(dir == 1){
 8004e14:	79bb      	ldrb	r3, [r7, #6]
 8004e16:	2b01      	cmp	r3, #1
 8004e18:	d10f      	bne.n	8004e3a <drive_dir+0x62>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET);	//L_CW
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	2120      	movs	r1, #32
 8004e1e:	4836      	ldr	r0, [pc, #216]	; (8004ef8 <drive_dir+0x120>)
 8004e20:	f7fd fa70 	bl	8002304 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_SET);		//L_CCW
 8004e24:	2201      	movs	r2, #1
 8004e26:	2110      	movs	r1, #16
 8004e28:	4833      	ldr	r0, [pc, #204]	; (8004ef8 <drive_dir+0x120>)
 8004e2a:	f7fd fa6b 	bl	8002304 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);		//STBY
 8004e2e:	2201      	movs	r2, #1
 8004e30:	2101      	movs	r1, #1
 8004e32:	4832      	ldr	r0, [pc, #200]	; (8004efc <drive_dir+0x124>)
 8004e34:	f7fd fa66 	bl	8002304 <HAL_GPIO_WritePin>
}
 8004e38:	e059      	b.n	8004eee <drive_dir+0x116>
		}else if(dir == 2){
 8004e3a:	79bb      	ldrb	r3, [r7, #6]
 8004e3c:	2b02      	cmp	r3, #2
 8004e3e:	d10f      	bne.n	8004e60 <drive_dir+0x88>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_SET);		//L_CW
 8004e40:	2201      	movs	r2, #1
 8004e42:	2120      	movs	r1, #32
 8004e44:	482c      	ldr	r0, [pc, #176]	; (8004ef8 <drive_dir+0x120>)
 8004e46:	f7fd fa5d 	bl	8002304 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_SET);		//L_CCW
 8004e4a:	2201      	movs	r2, #1
 8004e4c:	2110      	movs	r1, #16
 8004e4e:	482a      	ldr	r0, [pc, #168]	; (8004ef8 <drive_dir+0x120>)
 8004e50:	f7fd fa58 	bl	8002304 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);		//STBY
 8004e54:	2201      	movs	r2, #1
 8004e56:	2101      	movs	r1, #1
 8004e58:	4828      	ldr	r0, [pc, #160]	; (8004efc <drive_dir+0x124>)
 8004e5a:	f7fd fa53 	bl	8002304 <HAL_GPIO_WritePin>
}
 8004e5e:	e046      	b.n	8004eee <drive_dir+0x116>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);	//STBY
 8004e60:	2200      	movs	r2, #0
 8004e62:	2101      	movs	r1, #1
 8004e64:	4825      	ldr	r0, [pc, #148]	; (8004efc <drive_dir+0x124>)
 8004e66:	f7fd fa4d 	bl	8002304 <HAL_GPIO_WritePin>
}
 8004e6a:	e040      	b.n	8004eee <drive_dir+0x116>
		if(dir == 0){
 8004e6c:	79bb      	ldrb	r3, [r7, #6]
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d110      	bne.n	8004e94 <drive_dir+0xbc>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);		//R_CW
 8004e72:	2201      	movs	r2, #1
 8004e74:	2102      	movs	r1, #2
 8004e76:	4821      	ldr	r0, [pc, #132]	; (8004efc <drive_dir+0x124>)
 8004e78:	f7fd fa44 	bl	8002304 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);	//R_CCW
 8004e7c:	2200      	movs	r2, #0
 8004e7e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004e82:	481e      	ldr	r0, [pc, #120]	; (8004efc <drive_dir+0x124>)
 8004e84:	f7fd fa3e 	bl	8002304 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);		//STBY
 8004e88:	2201      	movs	r2, #1
 8004e8a:	2101      	movs	r1, #1
 8004e8c:	481b      	ldr	r0, [pc, #108]	; (8004efc <drive_dir+0x124>)
 8004e8e:	f7fd fa39 	bl	8002304 <HAL_GPIO_WritePin>
}
 8004e92:	e02c      	b.n	8004eee <drive_dir+0x116>
		}else if(dir == 1){
 8004e94:	79bb      	ldrb	r3, [r7, #6]
 8004e96:	2b01      	cmp	r3, #1
 8004e98:	d110      	bne.n	8004ebc <drive_dir+0xe4>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);	//R_CW
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	2102      	movs	r1, #2
 8004e9e:	4817      	ldr	r0, [pc, #92]	; (8004efc <drive_dir+0x124>)
 8004ea0:	f7fd fa30 	bl	8002304 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);	//R_CCW
 8004ea4:	2201      	movs	r2, #1
 8004ea6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004eaa:	4814      	ldr	r0, [pc, #80]	; (8004efc <drive_dir+0x124>)
 8004eac:	f7fd fa2a 	bl	8002304 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);		//STBY
 8004eb0:	2201      	movs	r2, #1
 8004eb2:	2101      	movs	r1, #1
 8004eb4:	4811      	ldr	r0, [pc, #68]	; (8004efc <drive_dir+0x124>)
 8004eb6:	f7fd fa25 	bl	8002304 <HAL_GPIO_WritePin>
}
 8004eba:	e018      	b.n	8004eee <drive_dir+0x116>
		}else if(dir == 2){
 8004ebc:	79bb      	ldrb	r3, [r7, #6]
 8004ebe:	2b02      	cmp	r3, #2
 8004ec0:	d110      	bne.n	8004ee4 <drive_dir+0x10c>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);		//R_CW
 8004ec2:	2201      	movs	r2, #1
 8004ec4:	2102      	movs	r1, #2
 8004ec6:	480d      	ldr	r0, [pc, #52]	; (8004efc <drive_dir+0x124>)
 8004ec8:	f7fd fa1c 	bl	8002304 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);	//R_CCW
 8004ecc:	2201      	movs	r2, #1
 8004ece:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004ed2:	480a      	ldr	r0, [pc, #40]	; (8004efc <drive_dir+0x124>)
 8004ed4:	f7fd fa16 	bl	8002304 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);		//STBY
 8004ed8:	2201      	movs	r2, #1
 8004eda:	2101      	movs	r1, #1
 8004edc:	4807      	ldr	r0, [pc, #28]	; (8004efc <drive_dir+0x124>)
 8004ede:	f7fd fa11 	bl	8002304 <HAL_GPIO_WritePin>
}
 8004ee2:	e004      	b.n	8004eee <drive_dir+0x116>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);	//STBY
 8004ee4:	2200      	movs	r2, #0
 8004ee6:	2101      	movs	r1, #1
 8004ee8:	4804      	ldr	r0, [pc, #16]	; (8004efc <drive_dir+0x124>)
 8004eea:	f7fd fa0b 	bl	8002304 <HAL_GPIO_WritePin>
}
 8004eee:	bf00      	nop
 8004ef0:	3708      	adds	r7, #8
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	bd80      	pop	{r7, pc}
 8004ef6:	bf00      	nop
 8004ef8:	40020800 	.word	0x40020800
 8004efc:	40020400 	.word	0x40020400

08004f00 <run_select>:
//run_select
// a走行速度を選択する
// a引数：なし
// a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void run_select(){
 8004f00:	b580      	push	{r7, lr}
 8004f02:	b082      	sub	sp, #8
 8004f04:	af00      	add	r7, sp, #0
	full_led_write(YELLOW);
 8004f06:	2006      	movs	r0, #6
 8004f08:	f00a ffac 	bl	800fe64 <full_led_write>
	int mode = 0;
 8004f0c:	2300      	movs	r3, #0
 8004f0e:	607b      	str	r3, [r7, #4]

	while(1){
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	b2db      	uxtb	r3, r3
 8004f14:	f003 0301 	and.w	r3, r3, #1
 8004f18:	b2d8      	uxtb	r0, r3
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	b2db      	uxtb	r3, r3
 8004f1e:	f003 0302 	and.w	r3, r3, #2
 8004f22:	b2d9      	uxtb	r1, r3
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	b2db      	uxtb	r3, r3
 8004f28:	f003 0304 	and.w	r3, r3, #4
 8004f2c:	b2db      	uxtb	r3, r3
 8004f2e:	461a      	mov	r2, r3
 8004f30:	f00a ff5e 	bl	800fdf0 <led_write>
		if(dist_r >= 20){
 8004f34:	4b21      	ldr	r3, [pc, #132]	; (8004fbc <run_select+0xbc>)
 8004f36:	edd3 7a00 	vldr	s15, [r3]
 8004f3a:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8004f3e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004f42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f46:	db0f      	blt.n	8004f68 <run_select+0x68>
			  mode++;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	3301      	adds	r3, #1
 8004f4c:	607b      	str	r3, [r7, #4]
			  dist_r = 0;
 8004f4e:	4b1b      	ldr	r3, [pc, #108]	; (8004fbc <run_select+0xbc>)
 8004f50:	f04f 0200 	mov.w	r2, #0
 8004f54:	601a      	str	r2, [r3, #0]
			  if(mode > 7){
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	2b07      	cmp	r3, #7
 8004f5a:	dd01      	ble.n	8004f60 <run_select+0x60>
				  mode = 0;
 8004f5c:	2300      	movs	r3, #0
 8004f5e:	607b      	str	r3, [r7, #4]
			  }
			  printf("Mode : %d\n", mode);
 8004f60:	6879      	ldr	r1, [r7, #4]
 8004f62:	4817      	ldr	r0, [pc, #92]	; (8004fc0 <run_select+0xc0>)
 8004f64:	f00b fd12 	bl	801098c <iprintf>
		}
		if(dist_r <= -20){
 8004f68:	4b14      	ldr	r3, [pc, #80]	; (8004fbc <run_select+0xbc>)
 8004f6a:	edd3 7a00 	vldr	s15, [r3]
 8004f6e:	eebb 7a04 	vmov.f32	s14, #180	; 0xc1a00000 -20.0
 8004f72:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004f76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f7a:	d80f      	bhi.n	8004f9c <run_select+0x9c>
			  mode--;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	3b01      	subs	r3, #1
 8004f80:	607b      	str	r3, [r7, #4]
			  dist_r = 0;
 8004f82:	4b0e      	ldr	r3, [pc, #56]	; (8004fbc <run_select+0xbc>)
 8004f84:	f04f 0200 	mov.w	r2, #0
 8004f88:	601a      	str	r2, [r3, #0]
			  if(mode < 0){
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	da01      	bge.n	8004f94 <run_select+0x94>
				  mode = 7;
 8004f90:	2307      	movs	r3, #7
 8004f92:	607b      	str	r3, [r7, #4]
			  }
			  printf("Mode : %d\n", mode);
 8004f94:	6879      	ldr	r1, [r7, #4]
 8004f96:	480a      	ldr	r0, [pc, #40]	; (8004fc0 <run_select+0xc0>)
 8004f98:	f00b fcf8 	bl	801098c <iprintf>
		}
		if(ad_fl >= WALL_BASE_FL){
 8004f9c:	4b09      	ldr	r3, [pc, #36]	; (8004fc4 <run_select+0xc4>)
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	2bc7      	cmp	r3, #199	; 0xc7
 8004fa2:	d9b5      	bls.n	8004f10 <run_select+0x10>
			  run_mode = mode;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	b2da      	uxtb	r2, r3
 8004fa8:	4b07      	ldr	r3, [pc, #28]	; (8004fc8 <run_select+0xc8>)
 8004faa:	701a      	strb	r2, [r3, #0]
			  full_led_write(BLUEGREEN);
 8004fac:	2004      	movs	r0, #4
 8004fae:	f00a ff59 	bl	800fe64 <full_led_write>
			  break;
 8004fb2:	bf00      	nop
		}
	}
}
 8004fb4:	bf00      	nop
 8004fb6:	3708      	adds	r7, #8
 8004fb8:	46bd      	mov	sp, r7
 8004fba:	bd80      	pop	{r7, pc}
 8004fbc:	20000aec 	.word	0x20000aec
 8004fc0:	08011bc8 	.word	0x08011bc8
 8004fc4:	20000d54 	.word	0x20000d54
 8004fc8:	20000456 	.word	0x20000456

08004fcc <driveA>:
//driveA
// 指定距離、指定加速度で加速走行する
// 引数1：accel_p 加速度, 引数2：speed_min_p 最低速度, 引数3：speed_max_p 最高速度, 引数4：dist 走行距離
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void driveA(uint16_t accel_p, uint16_t speed_min_p, uint16_t speed_max_p, uint16_t dist){
 8004fcc:	b590      	push	{r4, r7, lr}
 8004fce:	b083      	sub	sp, #12
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	4604      	mov	r4, r0
 8004fd4:	4608      	mov	r0, r1
 8004fd6:	4611      	mov	r1, r2
 8004fd8:	461a      	mov	r2, r3
 8004fda:	4623      	mov	r3, r4
 8004fdc:	80fb      	strh	r3, [r7, #6]
 8004fde:	4603      	mov	r3, r0
 8004fe0:	80bb      	strh	r3, [r7, #4]
 8004fe2:	460b      	mov	r3, r1
 8004fe4:	807b      	strh	r3, [r7, #2]
 8004fe6:	4613      	mov	r3, r2
 8004fe8:	803b      	strh	r3, [r7, #0]

	speed_min_l = speed_min_r = speed_min_p;
 8004fea:	88bb      	ldrh	r3, [r7, #4]
 8004fec:	ee07 3a90 	vmov	s15, r3
 8004ff0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ff4:	4b27      	ldr	r3, [pc, #156]	; (8005094 <driveA+0xc8>)
 8004ff6:	edc3 7a00 	vstr	s15, [r3]
 8004ffa:	4b27      	ldr	r3, [pc, #156]	; (8005098 <driveA+0xcc>)
 8004ffc:	edc3 7a00 	vstr	s15, [r3]
	speed_max_l = speed_max_r = speed_max_p;
 8005000:	887b      	ldrh	r3, [r7, #2]
 8005002:	ee07 3a90 	vmov	s15, r3
 8005006:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800500a:	4b24      	ldr	r3, [pc, #144]	; (800509c <driveA+0xd0>)
 800500c:	edc3 7a00 	vstr	s15, [r3]
 8005010:	4b23      	ldr	r3, [pc, #140]	; (80050a0 <driveA+0xd4>)
 8005012:	edc3 7a00 	vstr	s15, [r3]
	accel_l = accel_r = accel_p;							//引数の各パラメータをグローバル変数化
 8005016:	88fb      	ldrh	r3, [r7, #6]
 8005018:	ee07 3a90 	vmov	s15, r3
 800501c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005020:	4b20      	ldr	r3, [pc, #128]	; (80050a4 <driveA+0xd8>)
 8005022:	edc3 7a00 	vstr	s15, [r3]
 8005026:	4b20      	ldr	r3, [pc, #128]	; (80050a8 <driveA+0xdc>)
 8005028:	edc3 7a00 	vstr	s15, [r3]
	if(MF2.FLAG.HACCEL)target_speed_l = target_speed_r = speed_min_p;
 800502c:	4b1f      	ldr	r3, [pc, #124]	; (80050ac <driveA+0xe0>)
 800502e:	881b      	ldrh	r3, [r3, #0]
 8005030:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8005034:	b2db      	uxtb	r3, r3
 8005036:	2b00      	cmp	r3, #0
 8005038:	d00a      	beq.n	8005050 <driveA+0x84>
 800503a:	88bb      	ldrh	r3, [r7, #4]
 800503c:	ee07 3a90 	vmov	s15, r3
 8005040:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005044:	4b1a      	ldr	r3, [pc, #104]	; (80050b0 <driveA+0xe4>)
 8005046:	edc3 7a00 	vstr	s15, [r3]
 800504a:	4b1a      	ldr	r3, [pc, #104]	; (80050b4 <driveA+0xe8>)
 800504c:	edc3 7a00 	vstr	s15, [r3]

	drive_start();											//走行開始
 8005050:	f7ff fe42 	bl	8004cd8 <drive_start>

	//----走行----
	while((dist_l < dist) || (dist_r < dist));				//左右のモータが指定距離以上進むまで待機
 8005054:	bf00      	nop
 8005056:	883b      	ldrh	r3, [r7, #0]
 8005058:	ee07 3a90 	vmov	s15, r3
 800505c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005060:	4b15      	ldr	r3, [pc, #84]	; (80050b8 <driveA+0xec>)
 8005062:	edd3 7a00 	vldr	s15, [r3]
 8005066:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800506a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800506e:	dcf2      	bgt.n	8005056 <driveA+0x8a>
 8005070:	883b      	ldrh	r3, [r7, #0]
 8005072:	ee07 3a90 	vmov	s15, r3
 8005076:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800507a:	4b10      	ldr	r3, [pc, #64]	; (80050bc <driveA+0xf0>)
 800507c:	edd3 7a00 	vldr	s15, [r3]
 8005080:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005084:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005088:	dce5      	bgt.n	8005056 <driveA+0x8a>

//	drive_stop();
}
 800508a:	bf00      	nop
 800508c:	370c      	adds	r7, #12
 800508e:	46bd      	mov	sp, r7
 8005090:	bd90      	pop	{r4, r7, pc}
 8005092:	bf00      	nop
 8005094:	20000f6c 	.word	0x20000f6c
 8005098:	20000b54 	.word	0x20000b54
 800509c:	200001a4 	.word	0x200001a4
 80050a0:	2000077c 	.word	0x2000077c
 80050a4:	20000ae4 	.word	0x20000ae4
 80050a8:	20000d58 	.word	0x20000d58
 80050ac:	20000f64 	.word	0x20000f64
 80050b0:	200001a0 	.word	0x200001a0
 80050b4:	20000bfc 	.word	0x20000bfc
 80050b8:	200015c4 	.word	0x200015c4
 80050bc:	20000aec 	.word	0x20000aec

080050c0 <driveD>:
//driveD
// 指定距離、指定減速度で減速走行する
// 引数1：accel_p 加速度, 引数2：speed_min_p 最低速度, 引数3：speed_max_p 最高速度, 引数4：dist 走行距離
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void driveD(int16_t accel_p, uint16_t speed_min_p, uint16_t speed_max_p, uint16_t dist){
 80050c0:	b590      	push	{r4, r7, lr}
 80050c2:	b085      	sub	sp, #20
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	4604      	mov	r4, r0
 80050c8:	4608      	mov	r0, r1
 80050ca:	4611      	mov	r1, r2
 80050cc:	461a      	mov	r2, r3
 80050ce:	4623      	mov	r3, r4
 80050d0:	80fb      	strh	r3, [r7, #6]
 80050d2:	4603      	mov	r3, r0
 80050d4:	80bb      	strh	r3, [r7, #4]
 80050d6:	460b      	mov	r3, r1
 80050d8:	807b      	strh	r3, [r7, #2]
 80050da:	4613      	mov	r3, r2
 80050dc:	803b      	strh	r3, [r7, #0]

	float speed_0 = (speed_l + speed_r) / 2;								//等速走行距離を計算するためにmain.cより参照
 80050de:	4b5a      	ldr	r3, [pc, #360]	; (8005248 <driveD+0x188>)
 80050e0:	ed93 7a00 	vldr	s14, [r3]
 80050e4:	4b59      	ldr	r3, [pc, #356]	; (800524c <driveD+0x18c>)
 80050e6:	edd3 7a00 	vldr	s15, [r3]
 80050ea:	ee37 7a27 	vadd.f32	s14, s14, s15
 80050ee:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80050f2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80050f6:	edc7 7a03 	vstr	s15, [r7, #12]
	speed_min_l = speed_min_r = speed_min_p;
 80050fa:	88bb      	ldrh	r3, [r7, #4]
 80050fc:	ee07 3a90 	vmov	s15, r3
 8005100:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005104:	4b52      	ldr	r3, [pc, #328]	; (8005250 <driveD+0x190>)
 8005106:	edc3 7a00 	vstr	s15, [r3]
 800510a:	4b52      	ldr	r3, [pc, #328]	; (8005254 <driveD+0x194>)
 800510c:	edc3 7a00 	vstr	s15, [r3]
	speed_max_l = speed_max_r = speed_max_p;
 8005110:	887b      	ldrh	r3, [r7, #2]
 8005112:	ee07 3a90 	vmov	s15, r3
 8005116:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800511a:	4b4f      	ldr	r3, [pc, #316]	; (8005258 <driveD+0x198>)
 800511c:	edc3 7a00 	vstr	s15, [r3]
 8005120:	4b4e      	ldr	r3, [pc, #312]	; (800525c <driveD+0x19c>)
 8005122:	edc3 7a00 	vstr	s15, [r3]
	accel_l = accel_r = accel_p;							//引数の各パラメータをグローバル変数化
 8005126:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800512a:	ee07 3a90 	vmov	s15, r3
 800512e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005132:	4b4b      	ldr	r3, [pc, #300]	; (8005260 <driveD+0x1a0>)
 8005134:	edc3 7a00 	vstr	s15, [r3]
 8005138:	4b4a      	ldr	r3, [pc, #296]	; (8005264 <driveD+0x1a4>)
 800513a:	edc3 7a00 	vstr	s15, [r3]

	int16_t c_dist = dist - (speed_min_l*speed_min_l  - speed_0*speed_0)/(2*accel_l);			//等速走行距離 = 総距離 - 減速に必要な距離
 800513e:	883b      	ldrh	r3, [r7, #0]
 8005140:	ee07 3a90 	vmov	s15, r3
 8005144:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005148:	4b42      	ldr	r3, [pc, #264]	; (8005254 <driveD+0x194>)
 800514a:	edd3 6a00 	vldr	s13, [r3]
 800514e:	4b41      	ldr	r3, [pc, #260]	; (8005254 <driveD+0x194>)
 8005150:	edd3 7a00 	vldr	s15, [r3]
 8005154:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005158:	ed97 6a03 	vldr	s12, [r7, #12]
 800515c:	edd7 7a03 	vldr	s15, [r7, #12]
 8005160:	ee66 7a27 	vmul.f32	s15, s12, s15
 8005164:	ee36 6ae7 	vsub.f32	s12, s13, s15
 8005168:	4b3e      	ldr	r3, [pc, #248]	; (8005264 <driveD+0x1a4>)
 800516a:	edd3 7a00 	vldr	s15, [r3]
 800516e:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8005172:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8005176:	ee77 7a67 	vsub.f32	s15, s14, s15
 800517a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800517e:	ee17 3a90 	vmov	r3, s15
 8005182:	817b      	strh	r3, [r7, #10]

	accel_l = accel_r = 0;
 8005184:	f04f 0300 	mov.w	r3, #0
 8005188:	4a35      	ldr	r2, [pc, #212]	; (8005260 <driveD+0x1a0>)
 800518a:	6013      	str	r3, [r2, #0]
 800518c:	4a35      	ldr	r2, [pc, #212]	; (8005264 <driveD+0x1a4>)
 800518e:	6013      	str	r3, [r2, #0]
	dist_l = dist_r = 0;
 8005190:	f04f 0300 	mov.w	r3, #0
 8005194:	4a34      	ldr	r2, [pc, #208]	; (8005268 <driveD+0x1a8>)
 8005196:	6013      	str	r3, [r2, #0]
 8005198:	4a34      	ldr	r2, [pc, #208]	; (800526c <driveD+0x1ac>)
 800519a:	6013      	str	r3, [r2, #0]
	if(c_dist > 0){
 800519c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	dd1c      	ble.n	80051de <driveD+0x11e>
		//----等速走行----
		while((dist_l < c_dist) || (dist_r < c_dist));	//a左右のモータが等速分の距離以上進むまで待機
 80051a4:	bf00      	nop
 80051a6:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80051aa:	ee07 3a90 	vmov	s15, r3
 80051ae:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80051b2:	4b2e      	ldr	r3, [pc, #184]	; (800526c <driveD+0x1ac>)
 80051b4:	edd3 7a00 	vldr	s15, [r3]
 80051b8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80051bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051c0:	dcf1      	bgt.n	80051a6 <driveD+0xe6>
 80051c2:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80051c6:	ee07 3a90 	vmov	s15, r3
 80051ca:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80051ce:	4b26      	ldr	r3, [pc, #152]	; (8005268 <driveD+0x1a8>)
 80051d0:	edd3 7a00 	vldr	s15, [r3]
 80051d4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80051d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051dc:	dce3      	bgt.n	80051a6 <driveD+0xe6>
	}
	accel_l = accel_r = accel_p;
 80051de:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80051e2:	ee07 3a90 	vmov	s15, r3
 80051e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80051ea:	4b1d      	ldr	r3, [pc, #116]	; (8005260 <driveD+0x1a0>)
 80051ec:	edc3 7a00 	vstr	s15, [r3]
 80051f0:	4b1c      	ldr	r3, [pc, #112]	; (8005264 <driveD+0x1a4>)
 80051f2:	edc3 7a00 	vstr	s15, [r3]
	//----減速走行----
	while((dist_l < dist) || (dist_r < dist));			//a左右のモータが減速分の距離以上進むまで待機
 80051f6:	bf00      	nop
 80051f8:	883b      	ldrh	r3, [r7, #0]
 80051fa:	ee07 3a90 	vmov	s15, r3
 80051fe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005202:	4b1a      	ldr	r3, [pc, #104]	; (800526c <driveD+0x1ac>)
 8005204:	edd3 7a00 	vldr	s15, [r3]
 8005208:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800520c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005210:	dcf2      	bgt.n	80051f8 <driveD+0x138>
 8005212:	883b      	ldrh	r3, [r7, #0]
 8005214:	ee07 3a90 	vmov	s15, r3
 8005218:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800521c:	4b12      	ldr	r3, [pc, #72]	; (8005268 <driveD+0x1a8>)
 800521e:	edd3 7a00 	vldr	s15, [r3]
 8005222:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005226:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800522a:	dce5      	bgt.n	80051f8 <driveD+0x138>

	if(!MF2.FLAG.HACCEL)drive_stop();											//走行停止
 800522c:	4b10      	ldr	r3, [pc, #64]	; (8005270 <driveD+0x1b0>)
 800522e:	881b      	ldrh	r3, [r3, #0]
 8005230:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8005234:	b2db      	uxtb	r3, r3
 8005236:	2b00      	cmp	r3, #0
 8005238:	d101      	bne.n	800523e <driveD+0x17e>
 800523a:	f7ff fd7d 	bl	8004d38 <drive_stop>
}
 800523e:	bf00      	nop
 8005240:	3714      	adds	r7, #20
 8005242:	46bd      	mov	sp, r7
 8005244:	bd90      	pop	{r4, r7, pc}
 8005246:	bf00      	nop
 8005248:	20000af0 	.word	0x20000af0
 800524c:	200002bc 	.word	0x200002bc
 8005250:	20000f6c 	.word	0x20000f6c
 8005254:	20000b54 	.word	0x20000b54
 8005258:	200001a4 	.word	0x200001a4
 800525c:	2000077c 	.word	0x2000077c
 8005260:	20000ae4 	.word	0x20000ae4
 8005264:	20000d58 	.word	0x20000d58
 8005268:	20000aec 	.word	0x20000aec
 800526c:	200015c4 	.word	0x200015c4
 8005270:	20000f64 	.word	0x20000f64

08005274 <driveU>:
//driveU
// 指定距離分等速走行して停止する
// 引数1：dist …… 走行距離
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void driveU(uint16_t dist){
 8005274:	b480      	push	{r7}
 8005276:	b083      	sub	sp, #12
 8005278:	af00      	add	r7, sp, #0
 800527a:	4603      	mov	r3, r0
 800527c:	80fb      	strh	r3, [r7, #6]

	accel_l = accel_r = 0;									//等速走行のため加速度は0
 800527e:	f04f 0300 	mov.w	r3, #0
 8005282:	4a28      	ldr	r2, [pc, #160]	; (8005324 <driveU+0xb0>)
 8005284:	6013      	str	r3, [r2, #0]
 8005286:	4a28      	ldr	r2, [pc, #160]	; (8005328 <driveU+0xb4>)
 8005288:	6013      	str	r3, [r2, #0]
	dist_l = dist_r = 0;
 800528a:	f04f 0300 	mov.w	r3, #0
 800528e:	4a27      	ldr	r2, [pc, #156]	; (800532c <driveU+0xb8>)
 8005290:	6013      	str	r3, [r2, #0]
 8005292:	4a27      	ldr	r2, [pc, #156]	; (8005330 <driveU+0xbc>)
 8005294:	6013      	str	r3, [r2, #0]

	//----走行----
	while((dist_l < dist) || (dist_r < dist)){				//左右のモータが指定パルス以上進むまで待機
 8005296:	e024      	b.n	80052e2 <driveU+0x6e>
		if(MF.FLAG.WEDGE){
 8005298:	4b26      	ldr	r3, [pc, #152]	; (8005334 <driveU+0xc0>)
 800529a:	881b      	ldrh	r3, [r3, #0]
 800529c:	f3c3 23c0 	ubfx	r3, r3, #11, #1
 80052a0:	b2db      	uxtb	r3, r3
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d01d      	beq.n	80052e2 <driveU+0x6e>
			if(ad_l < WALL_BASE_L-30 || ad_r < WALL_BASE_R-10){
 80052a6:	4b24      	ldr	r3, [pc, #144]	; (8005338 <driveU+0xc4>)
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	2b77      	cmp	r3, #119	; 0x77
 80052ac:	d903      	bls.n	80052b6 <driveU+0x42>
 80052ae:	4b23      	ldr	r3, [pc, #140]	; (800533c <driveU+0xc8>)
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	2b6d      	cmp	r3, #109	; 0x6d
 80052b4:	d815      	bhi.n	80052e2 <driveU+0x6e>
				while((dist_l < W_DIST) || (dist_r < W_DIST));	//左右のモータが壁切れ用指定距離以上進むまで待機
 80052b6:	bf00      	nop
 80052b8:	4b1d      	ldr	r3, [pc, #116]	; (8005330 <driveU+0xbc>)
 80052ba:	edd3 7a00 	vldr	s15, [r3]
 80052be:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8005340 <driveU+0xcc>
 80052c2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80052c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80052ca:	d4f5      	bmi.n	80052b8 <driveU+0x44>
 80052cc:	4b17      	ldr	r3, [pc, #92]	; (800532c <driveU+0xb8>)
 80052ce:	edd3 7a00 	vldr	s15, [r3]
 80052d2:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8005340 <driveU+0xcc>
 80052d6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80052da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80052de:	d4eb      	bmi.n	80052b8 <driveU+0x44>
			break;
 80052e0:	e019      	b.n	8005316 <driveU+0xa2>
	while((dist_l < dist) || (dist_r < dist)){				//左右のモータが指定パルス以上進むまで待機
 80052e2:	88fb      	ldrh	r3, [r7, #6]
 80052e4:	ee07 3a90 	vmov	s15, r3
 80052e8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80052ec:	4b10      	ldr	r3, [pc, #64]	; (8005330 <driveU+0xbc>)
 80052ee:	edd3 7a00 	vldr	s15, [r3]
 80052f2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80052f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80052fa:	dccd      	bgt.n	8005298 <driveU+0x24>
 80052fc:	88fb      	ldrh	r3, [r7, #6]
 80052fe:	ee07 3a90 	vmov	s15, r3
 8005302:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005306:	4b09      	ldr	r3, [pc, #36]	; (800532c <driveU+0xb8>)
 8005308:	edd3 7a00 	vldr	s15, [r3]
 800530c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005310:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005314:	dcc0      	bgt.n	8005298 <driveU+0x24>
			}
		}
	}
}
 8005316:	bf00      	nop
 8005318:	370c      	adds	r7, #12
 800531a:	46bd      	mov	sp, r7
 800531c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005320:	4770      	bx	lr
 8005322:	bf00      	nop
 8005324:	20000ae4 	.word	0x20000ae4
 8005328:	20000d58 	.word	0x20000d58
 800532c:	20000aec 	.word	0x20000aec
 8005330:	200015c4 	.word	0x200015c4
 8005334:	20000f68 	.word	0x20000f68
 8005338:	20000afc 	.word	0x20000afc
 800533c:	20000f60 	.word	0x20000f60
 8005340:	428c0000 	.word	0x428c0000

08005344 <driveC>:
//driveC
// 指定距離分デフォルト速度で走行して停止する
// 引数1：dist …… 走行距離
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void driveC(uint16_t dist){
 8005344:	b580      	push	{r7, lr}
 8005346:	b082      	sub	sp, #8
 8005348:	af00      	add	r7, sp, #0
 800534a:	4603      	mov	r3, r0
 800534c:	80fb      	strh	r3, [r7, #6]

	speed_min_l = speed_min_r = 150;
 800534e:	4b19      	ldr	r3, [pc, #100]	; (80053b4 <driveC+0x70>)
 8005350:	4a19      	ldr	r2, [pc, #100]	; (80053b8 <driveC+0x74>)
 8005352:	6013      	str	r3, [r2, #0]
 8005354:	4a19      	ldr	r2, [pc, #100]	; (80053bc <driveC+0x78>)
 8005356:	6013      	str	r3, [r2, #0]
	speed_max_l = speed_max_r = 150;
 8005358:	4b16      	ldr	r3, [pc, #88]	; (80053b4 <driveC+0x70>)
 800535a:	4a19      	ldr	r2, [pc, #100]	; (80053c0 <driveC+0x7c>)
 800535c:	6013      	str	r3, [r2, #0]
 800535e:	4a19      	ldr	r2, [pc, #100]	; (80053c4 <driveC+0x80>)
 8005360:	6013      	str	r3, [r2, #0]
	accel_l = accel_r = 0;												//等速走行のため加速度は0
 8005362:	f04f 0300 	mov.w	r3, #0
 8005366:	4a18      	ldr	r2, [pc, #96]	; (80053c8 <driveC+0x84>)
 8005368:	6013      	str	r3, [r2, #0]
 800536a:	4a18      	ldr	r2, [pc, #96]	; (80053cc <driveC+0x88>)
 800536c:	6013      	str	r3, [r2, #0]

	drive_start();											//走行開始
 800536e:	f7ff fcb3 	bl	8004cd8 <drive_start>
	//====回転====
	while((dist_l < dist) || (dist_r < dist));			//左右のモータが定速分の距離以上進むまで待機
 8005372:	bf00      	nop
 8005374:	88fb      	ldrh	r3, [r7, #6]
 8005376:	ee07 3a90 	vmov	s15, r3
 800537a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800537e:	4b14      	ldr	r3, [pc, #80]	; (80053d0 <driveC+0x8c>)
 8005380:	edd3 7a00 	vldr	s15, [r3]
 8005384:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005388:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800538c:	dcf2      	bgt.n	8005374 <driveC+0x30>
 800538e:	88fb      	ldrh	r3, [r7, #6]
 8005390:	ee07 3a90 	vmov	s15, r3
 8005394:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005398:	4b0e      	ldr	r3, [pc, #56]	; (80053d4 <driveC+0x90>)
 800539a:	edd3 7a00 	vldr	s15, [r3]
 800539e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80053a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80053a6:	dce5      	bgt.n	8005374 <driveC+0x30>

	drive_stop();											//走行停止
 80053a8:	f7ff fcc6 	bl	8004d38 <drive_stop>
}
 80053ac:	bf00      	nop
 80053ae:	3708      	adds	r7, #8
 80053b0:	46bd      	mov	sp, r7
 80053b2:	bd80      	pop	{r7, pc}
 80053b4:	43160000 	.word	0x43160000
 80053b8:	20000f6c 	.word	0x20000f6c
 80053bc:	20000b54 	.word	0x20000b54
 80053c0:	200001a4 	.word	0x200001a4
 80053c4:	2000077c 	.word	0x2000077c
 80053c8:	20000ae4 	.word	0x20000ae4
 80053cc:	20000d58 	.word	0x20000d58
 80053d0:	200015c4 	.word	0x200015c4
 80053d4:	20000aec 	.word	0x20000aec

080053d8 <driveC2>:
//driveC2
//a指定距離分デフォルト逆回転速度で走行して停止する
//a引数1：dist …… 走行距離
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void driveC2(uint16_t dist){
 80053d8:	b580      	push	{r7, lr}
 80053da:	b082      	sub	sp, #8
 80053dc:	af00      	add	r7, sp, #0
 80053de:	4603      	mov	r3, r0
 80053e0:	80fb      	strh	r3, [r7, #6]

	speed_min_l = speed_min_r = -250;
 80053e2:	4b1a      	ldr	r3, [pc, #104]	; (800544c <driveC2+0x74>)
 80053e4:	4a1a      	ldr	r2, [pc, #104]	; (8005450 <driveC2+0x78>)
 80053e6:	6013      	str	r3, [r2, #0]
 80053e8:	4a1a      	ldr	r2, [pc, #104]	; (8005454 <driveC2+0x7c>)
 80053ea:	6013      	str	r3, [r2, #0]
	speed_max_l = speed_max_r = -250;
 80053ec:	4b17      	ldr	r3, [pc, #92]	; (800544c <driveC2+0x74>)
 80053ee:	4a1a      	ldr	r2, [pc, #104]	; (8005458 <driveC2+0x80>)
 80053f0:	6013      	str	r3, [r2, #0]
 80053f2:	4a1a      	ldr	r2, [pc, #104]	; (800545c <driveC2+0x84>)
 80053f4:	6013      	str	r3, [r2, #0]
	accel_l = accel_r = 0;									//a等速走行のため加速度は0
 80053f6:	f04f 0300 	mov.w	r3, #0
 80053fa:	4a19      	ldr	r2, [pc, #100]	; (8005460 <driveC2+0x88>)
 80053fc:	6013      	str	r3, [r2, #0]
 80053fe:	4a19      	ldr	r2, [pc, #100]	; (8005464 <driveC2+0x8c>)
 8005400:	6013      	str	r3, [r2, #0]

	drive_start();											//a走行開始
 8005402:	f7ff fc69 	bl	8004cd8 <drive_start>
	//====a回転====
	while((dist_l > (-1*dist)) || (dist_r > (-1*dist)));	//a左右のモータが定速分の逆走距離以上進むまで待機
 8005406:	bf00      	nop
 8005408:	88fb      	ldrh	r3, [r7, #6]
 800540a:	425b      	negs	r3, r3
 800540c:	ee07 3a90 	vmov	s15, r3
 8005410:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005414:	4b14      	ldr	r3, [pc, #80]	; (8005468 <driveC2+0x90>)
 8005416:	edd3 7a00 	vldr	s15, [r3]
 800541a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800541e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005422:	d4f1      	bmi.n	8005408 <driveC2+0x30>
 8005424:	88fb      	ldrh	r3, [r7, #6]
 8005426:	425b      	negs	r3, r3
 8005428:	ee07 3a90 	vmov	s15, r3
 800542c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005430:	4b0e      	ldr	r3, [pc, #56]	; (800546c <driveC2+0x94>)
 8005432:	edd3 7a00 	vldr	s15, [r3]
 8005436:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800543a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800543e:	d4e3      	bmi.n	8005408 <driveC2+0x30>

	drive_stop();											//a走行停止
 8005440:	f7ff fc7a 	bl	8004d38 <drive_stop>
}
 8005444:	bf00      	nop
 8005446:	3708      	adds	r7, #8
 8005448:	46bd      	mov	sp, r7
 800544a:	bd80      	pop	{r7, pc}
 800544c:	c37a0000 	.word	0xc37a0000
 8005450:	20000f6c 	.word	0x20000f6c
 8005454:	20000b54 	.word	0x20000b54
 8005458:	200001a4 	.word	0x200001a4
 800545c:	2000077c 	.word	0x2000077c
 8005460:	20000ae4 	.word	0x20000ae4
 8005464:	20000d58 	.word	0x20000d58
 8005468:	200015c4 	.word	0x200015c4
 800546c:	20000aec 	.word	0x20000aec

08005470 <slalomF>:
//slalomF
//aスラロームの前オフセット部分
//a引数1：
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void slalomF(int16_t accel_p, int16_t speed_p, uint8_t dist_p, uint16_t wall_fl, uint16_t wall_fr){
 8005470:	b590      	push	{r4, r7, lr}
 8005472:	b083      	sub	sp, #12
 8005474:	af00      	add	r7, sp, #0
 8005476:	4604      	mov	r4, r0
 8005478:	4608      	mov	r0, r1
 800547a:	4611      	mov	r1, r2
 800547c:	461a      	mov	r2, r3
 800547e:	4623      	mov	r3, r4
 8005480:	80fb      	strh	r3, [r7, #6]
 8005482:	4603      	mov	r3, r0
 8005484:	80bb      	strh	r3, [r7, #4]
 8005486:	460b      	mov	r3, r1
 8005488:	70fb      	strb	r3, [r7, #3]
 800548a:	4613      	mov	r3, r2
 800548c:	803b      	strh	r3, [r7, #0]
	MF.FLAG.GYRO = 0;
 800548e:	4a2d      	ldr	r2, [pc, #180]	; (8005544 <slalomF+0xd4>)
 8005490:	8813      	ldrh	r3, [r2, #0]
 8005492:	f36f 2308 	bfc	r3, #8, #1
 8005496:	8013      	strh	r3, [r2, #0]
	MF.FLAG.SPD = 1;
 8005498:	4a2a      	ldr	r2, [pc, #168]	; (8005544 <slalomF+0xd4>)
 800549a:	8813      	ldrh	r3, [r2, #0]
 800549c:	f043 0304 	orr.w	r3, r3, #4
 80054a0:	8013      	strh	r3, [r2, #0]

	accel_l = accel_r = accel_p;
 80054a2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80054a6:	ee07 3a90 	vmov	s15, r3
 80054aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80054ae:	4b26      	ldr	r3, [pc, #152]	; (8005548 <slalomF+0xd8>)
 80054b0:	edc3 7a00 	vstr	s15, [r3]
 80054b4:	4b25      	ldr	r3, [pc, #148]	; (800554c <slalomF+0xdc>)
 80054b6:	edc3 7a00 	vstr	s15, [r3]
	speed_max_l = speed_max_r = speed_p;
 80054ba:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80054be:	ee07 3a90 	vmov	s15, r3
 80054c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80054c6:	4b22      	ldr	r3, [pc, #136]	; (8005550 <slalomF+0xe0>)
 80054c8:	edc3 7a00 	vstr	s15, [r3]
 80054cc:	4b21      	ldr	r3, [pc, #132]	; (8005554 <slalomF+0xe4>)
 80054ce:	edc3 7a00 	vstr	s15, [r3]

	control_start();
 80054d2:	f7ff fc59 	bl	8004d88 <control_start>
	dist_l = dist_r = 0;
 80054d6:	f04f 0300 	mov.w	r3, #0
 80054da:	4a1f      	ldr	r2, [pc, #124]	; (8005558 <slalomF+0xe8>)
 80054dc:	6013      	str	r3, [r2, #0]
 80054de:	4a1f      	ldr	r2, [pc, #124]	; (800555c <slalomF+0xec>)
 80054e0:	6013      	str	r3, [r2, #0]
	while(dist_l < dist_p && dist_r < dist_p){
 80054e2:	e00d      	b.n	8005500 <slalomF+0x90>
		if(ad_fl > wall_fl && ad_fr > wall_fr){
 80054e4:	883a      	ldrh	r2, [r7, #0]
 80054e6:	4b1e      	ldr	r3, [pc, #120]	; (8005560 <slalomF+0xf0>)
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	429a      	cmp	r2, r3
 80054ec:	d208      	bcs.n	8005500 <slalomF+0x90>
 80054ee:	8b3a      	ldrh	r2, [r7, #24]
 80054f0:	4b1c      	ldr	r3, [pc, #112]	; (8005564 <slalomF+0xf4>)
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	429a      	cmp	r2, r3
 80054f6:	d203      	bcs.n	8005500 <slalomF+0x90>
			full_led_write(RED);
 80054f8:	2001      	movs	r0, #1
 80054fa:	f00a fcb3 	bl	800fe64 <full_led_write>
			break;
 80054fe:	e019      	b.n	8005534 <slalomF+0xc4>
	while(dist_l < dist_p && dist_r < dist_p){
 8005500:	78fb      	ldrb	r3, [r7, #3]
 8005502:	ee07 3a90 	vmov	s15, r3
 8005506:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800550a:	4b14      	ldr	r3, [pc, #80]	; (800555c <slalomF+0xec>)
 800550c:	edd3 7a00 	vldr	s15, [r3]
 8005510:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005514:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005518:	dd0c      	ble.n	8005534 <slalomF+0xc4>
 800551a:	78fb      	ldrb	r3, [r7, #3]
 800551c:	ee07 3a90 	vmov	s15, r3
 8005520:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005524:	4b0c      	ldr	r3, [pc, #48]	; (8005558 <slalomF+0xe8>)
 8005526:	edd3 7a00 	vldr	s15, [r3]
 800552a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800552e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005532:	dcd7      	bgt.n	80054e4 <slalomF+0x74>
		}
	}
	drive_stop();
 8005534:	f7ff fc00 	bl	8004d38 <drive_stop>
	control_stop();
 8005538:	f7ff fc3a 	bl	8004db0 <control_stop>
}
 800553c:	bf00      	nop
 800553e:	370c      	adds	r7, #12
 8005540:	46bd      	mov	sp, r7
 8005542:	bd90      	pop	{r4, r7, pc}
 8005544:	20000f68 	.word	0x20000f68
 8005548:	20000ae4 	.word	0x20000ae4
 800554c:	20000d58 	.word	0x20000d58
 8005550:	200001a4 	.word	0x200001a4
 8005554:	2000077c 	.word	0x2000077c
 8005558:	20000aec 	.word	0x20000aec
 800555c:	200015c4 	.word	0x200015c4
 8005560:	20000d54 	.word	0x20000d54
 8005564:	20000c00 	.word	0x20000c00

08005568 <slalomR>:
//slalomR
//aスラロームの旋回部分
//a引数1：
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void slalomR(int16_t degaccel_p, int16_t omega_p, int16_t degree_p, int16_t speed_p){
 8005568:	b490      	push	{r4, r7}
 800556a:	b084      	sub	sp, #16
 800556c:	af00      	add	r7, sp, #0
 800556e:	4604      	mov	r4, r0
 8005570:	4608      	mov	r0, r1
 8005572:	4611      	mov	r1, r2
 8005574:	461a      	mov	r2, r3
 8005576:	4623      	mov	r3, r4
 8005578:	80fb      	strh	r3, [r7, #6]
 800557a:	4603      	mov	r3, r0
 800557c:	80bb      	strh	r3, [r7, #4]
 800557e:	460b      	mov	r3, r1
 8005580:	807b      	strh	r3, [r7, #2]
 8005582:	4613      	mov	r3, r2
 8005584:	803b      	strh	r3, [r7, #0]
	MF.FLAG.GYRO = 1;
 8005586:	4a82      	ldr	r2, [pc, #520]	; (8005790 <slalomR+0x228>)
 8005588:	8813      	ldrh	r3, [r2, #0]
 800558a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800558e:	8013      	strh	r3, [r2, #0]
	target_degaccel_z = degaccel_p;
 8005590:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005594:	ee07 3a90 	vmov	s15, r3
 8005598:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800559c:	4b7d      	ldr	r3, [pc, #500]	; (8005794 <slalomR+0x22c>)
 800559e:	edc3 7a00 	vstr	s15, [r3]
	target_omega_z = 0;
 80055a2:	4b7d      	ldr	r3, [pc, #500]	; (8005798 <slalomR+0x230>)
 80055a4:	f04f 0200 	mov.w	r2, #0
 80055a8:	601a      	str	r2, [r3, #0]
	speed_G = speed_p;
 80055aa:	f9b7 3000 	ldrsh.w	r3, [r7]
 80055ae:	ee07 3a90 	vmov	s15, r3
 80055b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80055b6:	4b79      	ldr	r3, [pc, #484]	; (800579c <slalomR+0x234>)
 80055b8:	edc3 7a00 	vstr	s15, [r3]

	int16_t c_degree;

	if(omega_p < 0){
 80055bc:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	da1f      	bge.n	8005604 <slalomR+0x9c>
		omega_min = omega_p;
 80055c4:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80055c8:	ee07 3a90 	vmov	s15, r3
 80055cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80055d0:	4b73      	ldr	r3, [pc, #460]	; (80057a0 <slalomR+0x238>)
 80055d2:	edc3 7a00 	vstr	s15, [r3]
		c_degree =  omega_min * omega_min / target_degaccel_z / 2;
 80055d6:	4b72      	ldr	r3, [pc, #456]	; (80057a0 <slalomR+0x238>)
 80055d8:	ed93 7a00 	vldr	s14, [r3]
 80055dc:	4b70      	ldr	r3, [pc, #448]	; (80057a0 <slalomR+0x238>)
 80055de:	edd3 7a00 	vldr	s15, [r3]
 80055e2:	ee67 6a27 	vmul.f32	s13, s14, s15
 80055e6:	4b6b      	ldr	r3, [pc, #428]	; (8005794 <slalomR+0x22c>)
 80055e8:	edd3 7a00 	vldr	s15, [r3]
 80055ec:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80055f0:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80055f4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80055f8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80055fc:	ee17 3a90 	vmov	r3, s15
 8005600:	81fb      	strh	r3, [r7, #14]
 8005602:	e01e      	b.n	8005642 <slalomR+0xda>
	}else{
		omega_max = omega_p;
 8005604:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8005608:	ee07 3a90 	vmov	s15, r3
 800560c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005610:	4b64      	ldr	r3, [pc, #400]	; (80057a4 <slalomR+0x23c>)
 8005612:	edc3 7a00 	vstr	s15, [r3]
		c_degree =  omega_max * omega_max / target_degaccel_z / 2;
 8005616:	4b63      	ldr	r3, [pc, #396]	; (80057a4 <slalomR+0x23c>)
 8005618:	ed93 7a00 	vldr	s14, [r3]
 800561c:	4b61      	ldr	r3, [pc, #388]	; (80057a4 <slalomR+0x23c>)
 800561e:	edd3 7a00 	vldr	s15, [r3]
 8005622:	ee67 6a27 	vmul.f32	s13, s14, s15
 8005626:	4b5b      	ldr	r3, [pc, #364]	; (8005794 <slalomR+0x22c>)
 8005628:	edd3 7a00 	vldr	s15, [r3]
 800562c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005630:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8005634:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005638:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800563c:	ee17 3a90 	vmov	r3, s15
 8005640:	81fb      	strh	r3, [r7, #14]
	}

	MF.FLAG.DRV = 1;
 8005642:	4a53      	ldr	r2, [pc, #332]	; (8005790 <slalomR+0x228>)
 8005644:	8813      	ldrh	r3, [r2, #0]
 8005646:	f043 0302 	orr.w	r3, r3, #2
 800564a:	8013      	strh	r3, [r2, #0]
	if(omega_p < 0){
 800564c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8005650:	2b00      	cmp	r3, #0
 8005652:	da14      	bge.n	800567e <slalomR+0x116>
		while(degree_z > target_degree_z+c_degree);
 8005654:	bf00      	nop
 8005656:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800565a:	ee07 3a90 	vmov	s15, r3
 800565e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005662:	4b51      	ldr	r3, [pc, #324]	; (80057a8 <slalomR+0x240>)
 8005664:	edd3 7a00 	vldr	s15, [r3]
 8005668:	ee37 7a27 	vadd.f32	s14, s14, s15
 800566c:	4b4f      	ldr	r3, [pc, #316]	; (80057ac <slalomR+0x244>)
 800566e:	edd3 7a00 	vldr	s15, [r3]
 8005672:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005676:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800567a:	d4ec      	bmi.n	8005656 <slalomR+0xee>
 800567c:	e013      	b.n	80056a6 <slalomR+0x13e>
	}else{
		while(degree_z < target_degree_z+c_degree);
 800567e:	bf00      	nop
 8005680:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005684:	ee07 3a90 	vmov	s15, r3
 8005688:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800568c:	4b46      	ldr	r3, [pc, #280]	; (80057a8 <slalomR+0x240>)
 800568e:	edd3 7a00 	vldr	s15, [r3]
 8005692:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005696:	4b45      	ldr	r3, [pc, #276]	; (80057ac <slalomR+0x244>)
 8005698:	edd3 7a00 	vldr	s15, [r3]
 800569c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80056a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80056a4:	dcec      	bgt.n	8005680 <slalomR+0x118>
	}

	target_degaccel_z = 0;
 80056a6:	4b3b      	ldr	r3, [pc, #236]	; (8005794 <slalomR+0x22c>)
 80056a8:	f04f 0200 	mov.w	r2, #0
 80056ac:	601a      	str	r2, [r3, #0]

	if(omega_p < 0){
 80056ae:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	da18      	bge.n	80056e8 <slalomR+0x180>
		while(degree_z > target_degree_z+(degree_p-c_degree-4));
 80056b6:	bf00      	nop
 80056b8:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80056bc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80056c0:	1ad3      	subs	r3, r2, r3
 80056c2:	3b04      	subs	r3, #4
 80056c4:	ee07 3a90 	vmov	s15, r3
 80056c8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80056cc:	4b36      	ldr	r3, [pc, #216]	; (80057a8 <slalomR+0x240>)
 80056ce:	edd3 7a00 	vldr	s15, [r3]
 80056d2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80056d6:	4b35      	ldr	r3, [pc, #212]	; (80057ac <slalomR+0x244>)
 80056d8:	edd3 7a00 	vldr	s15, [r3]
 80056dc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80056e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80056e4:	d4e8      	bmi.n	80056b8 <slalomR+0x150>
 80056e6:	e017      	b.n	8005718 <slalomR+0x1b0>
	}else{
		while(degree_z < target_degree_z+(degree_p-c_degree+4));
 80056e8:	bf00      	nop
 80056ea:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80056ee:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80056f2:	1ad3      	subs	r3, r2, r3
 80056f4:	3304      	adds	r3, #4
 80056f6:	ee07 3a90 	vmov	s15, r3
 80056fa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80056fe:	4b2a      	ldr	r3, [pc, #168]	; (80057a8 <slalomR+0x240>)
 8005700:	edd3 7a00 	vldr	s15, [r3]
 8005704:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005708:	4b28      	ldr	r3, [pc, #160]	; (80057ac <slalomR+0x244>)
 800570a:	edd3 7a00 	vldr	s15, [r3]
 800570e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005712:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005716:	dce8      	bgt.n	80056ea <slalomR+0x182>
	}

	target_degaccel_z = -degaccel_p;
 8005718:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800571c:	425b      	negs	r3, r3
 800571e:	ee07 3a90 	vmov	s15, r3
 8005722:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005726:	4b1b      	ldr	r3, [pc, #108]	; (8005794 <slalomR+0x22c>)
 8005728:	edc3 7a00 	vstr	s15, [r3]

	if(omega_p < 0){
 800572c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8005730:	2b00      	cmp	r3, #0
 8005732:	da14      	bge.n	800575e <slalomR+0x1f6>
		while(degree_z > target_degree_z+degree_p);
 8005734:	bf00      	nop
 8005736:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800573a:	ee07 3a90 	vmov	s15, r3
 800573e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005742:	4b19      	ldr	r3, [pc, #100]	; (80057a8 <slalomR+0x240>)
 8005744:	edd3 7a00 	vldr	s15, [r3]
 8005748:	ee37 7a27 	vadd.f32	s14, s14, s15
 800574c:	4b17      	ldr	r3, [pc, #92]	; (80057ac <slalomR+0x244>)
 800574e:	edd3 7a00 	vldr	s15, [r3]
 8005752:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005756:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800575a:	d4ec      	bmi.n	8005736 <slalomR+0x1ce>
	}else{
		while(degree_z < target_degree_z+degree_p);
	}
}
 800575c:	e013      	b.n	8005786 <slalomR+0x21e>
		while(degree_z < target_degree_z+degree_p);
 800575e:	bf00      	nop
 8005760:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005764:	ee07 3a90 	vmov	s15, r3
 8005768:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800576c:	4b0e      	ldr	r3, [pc, #56]	; (80057a8 <slalomR+0x240>)
 800576e:	edd3 7a00 	vldr	s15, [r3]
 8005772:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005776:	4b0d      	ldr	r3, [pc, #52]	; (80057ac <slalomR+0x244>)
 8005778:	edd3 7a00 	vldr	s15, [r3]
 800577c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005780:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005784:	dcec      	bgt.n	8005760 <slalomR+0x1f8>
}
 8005786:	bf00      	nop
 8005788:	3710      	adds	r7, #16
 800578a:	46bd      	mov	sp, r7
 800578c:	bc90      	pop	{r4, r7}
 800578e:	4770      	bx	lr
 8005790:	20000f68 	.word	0x20000f68
 8005794:	20000b58 	.word	0x20000b58
 8005798:	200001a8 	.word	0x200001a8
 800579c:	20000af4 	.word	0x20000af4
 80057a0:	200002b8 	.word	0x200002b8
 80057a4:	20000ae8 	.word	0x20000ae8
 80057a8:	20000bf8 	.word	0x20000bf8
 80057ac:	20000b5c 	.word	0x20000b5c

080057b0 <slalomB>:
//slalomB
//aスラロームの後オフセット部分
//a引数1：
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void slalomB(int16_t accel_p, int16_t speed_p, uint8_t dist_p){
 80057b0:	b580      	push	{r7, lr}
 80057b2:	b082      	sub	sp, #8
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	4603      	mov	r3, r0
 80057b8:	80fb      	strh	r3, [r7, #6]
 80057ba:	460b      	mov	r3, r1
 80057bc:	80bb      	strh	r3, [r7, #4]
 80057be:	4613      	mov	r3, r2
 80057c0:	70fb      	strb	r3, [r7, #3]
	MF.FLAG.GYRO = 0;
 80057c2:	4a25      	ldr	r2, [pc, #148]	; (8005858 <slalomB+0xa8>)
 80057c4:	8813      	ldrh	r3, [r2, #0]
 80057c6:	f36f 2308 	bfc	r3, #8, #1
 80057ca:	8013      	strh	r3, [r2, #0]
	MF.FLAG.SPD = 1;
 80057cc:	4a22      	ldr	r2, [pc, #136]	; (8005858 <slalomB+0xa8>)
 80057ce:	8813      	ldrh	r3, [r2, #0]
 80057d0:	f043 0304 	orr.w	r3, r3, #4
 80057d4:	8013      	strh	r3, [r2, #0]

	accel_l = accel_r = accel_p;
 80057d6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80057da:	ee07 3a90 	vmov	s15, r3
 80057de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80057e2:	4b1e      	ldr	r3, [pc, #120]	; (800585c <slalomB+0xac>)
 80057e4:	edc3 7a00 	vstr	s15, [r3]
 80057e8:	4b1d      	ldr	r3, [pc, #116]	; (8005860 <slalomB+0xb0>)
 80057ea:	edc3 7a00 	vstr	s15, [r3]
	speed_max_l = speed_max_r = speed_p;
 80057ee:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80057f2:	ee07 3a90 	vmov	s15, r3
 80057f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80057fa:	4b1a      	ldr	r3, [pc, #104]	; (8005864 <slalomB+0xb4>)
 80057fc:	edc3 7a00 	vstr	s15, [r3]
 8005800:	4b19      	ldr	r3, [pc, #100]	; (8005868 <slalomB+0xb8>)
 8005802:	edc3 7a00 	vstr	s15, [r3]

	control_start();
 8005806:	f7ff fabf 	bl	8004d88 <control_start>
	dist_l = dist_r = 0;
 800580a:	f04f 0300 	mov.w	r3, #0
 800580e:	4a17      	ldr	r2, [pc, #92]	; (800586c <slalomB+0xbc>)
 8005810:	6013      	str	r3, [r2, #0]
 8005812:	4a17      	ldr	r2, [pc, #92]	; (8005870 <slalomB+0xc0>)
 8005814:	6013      	str	r3, [r2, #0]
	while(dist_l < dist_p && dist_r < dist_p);
 8005816:	bf00      	nop
 8005818:	78fb      	ldrb	r3, [r7, #3]
 800581a:	ee07 3a90 	vmov	s15, r3
 800581e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005822:	4b13      	ldr	r3, [pc, #76]	; (8005870 <slalomB+0xc0>)
 8005824:	edd3 7a00 	vldr	s15, [r3]
 8005828:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800582c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005830:	dc00      	bgt.n	8005834 <slalomB+0x84>
}
 8005832:	e00c      	b.n	800584e <slalomB+0x9e>
	while(dist_l < dist_p && dist_r < dist_p);
 8005834:	78fb      	ldrb	r3, [r7, #3]
 8005836:	ee07 3a90 	vmov	s15, r3
 800583a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800583e:	4b0b      	ldr	r3, [pc, #44]	; (800586c <slalomB+0xbc>)
 8005840:	edd3 7a00 	vldr	s15, [r3]
 8005844:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005848:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800584c:	dce4      	bgt.n	8005818 <slalomB+0x68>
}
 800584e:	bf00      	nop
 8005850:	3708      	adds	r7, #8
 8005852:	46bd      	mov	sp, r7
 8005854:	bd80      	pop	{r7, pc}
 8005856:	bf00      	nop
 8005858:	20000f68 	.word	0x20000f68
 800585c:	20000ae4 	.word	0x20000ae4
 8005860:	20000d58 	.word	0x20000d58
 8005864:	200001a4 	.word	0x200001a4
 8005868:	2000077c 	.word	0x2000077c
 800586c:	20000aec 	.word	0x20000aec
 8005870:	200015c4 	.word	0x200015c4

08005874 <set_position>:
//set_position
//a機体の尻を壁に当てて場所を区画中央に合わせる
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void set_position(){
 8005874:	b580      	push	{r7, lr}
 8005876:	af00      	add	r7, sp, #0

  driveC2(SETPOS_BACK);         //a尻を当てる程度に後退。回転後に停止する
 8005878:	2064      	movs	r0, #100	; 0x64
 800587a:	f7ff fdad 	bl	80053d8 <driveC2>
  degree_z = target_degree_z;
 800587e:	4b05      	ldr	r3, [pc, #20]	; (8005894 <set_position+0x20>)
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	4a05      	ldr	r2, [pc, #20]	; (8005898 <set_position+0x24>)
 8005884:	6013      	str	r3, [r2, #0]
  start_mode = 0;
 8005886:	4b05      	ldr	r3, [pc, #20]	; (800589c <set_position+0x28>)
 8005888:	2200      	movs	r2, #0
 800588a:	701a      	strb	r2, [r3, #0]
  start_sectionA();
 800588c:	f000 f82a 	bl	80058e4 <start_sectionA>
}
 8005890:	bf00      	nop
 8005892:	bd80      	pop	{r7, pc}
 8005894:	20000bf8 	.word	0x20000bf8
 8005898:	20000b5c 	.word	0x20000b5c
 800589c:	200015c8 	.word	0x200015c8

080058a0 <set_positionF>:
//set_positionF
//a前壁との距離を測定し、場所を区画中央に合わせる
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void set_positionF(){
 80058a0:	b580      	push	{r7, lr}
 80058a2:	af00      	add	r7, sp, #0

	full_led_write(RED);
 80058a4:	2001      	movs	r0, #1
 80058a6:	f00a fadd 	bl	800fe64 <full_led_write>
	HAL_Delay(500);
 80058aa:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80058ae:	f7fb fbb5 	bl	800101c <HAL_Delay>

	MF.FLAG.DRV = 1;
 80058b2:	4a0b      	ldr	r2, [pc, #44]	; (80058e0 <set_positionF+0x40>)
 80058b4:	8813      	ldrh	r3, [r2, #0]
 80058b6:	f043 0302 	orr.w	r3, r3, #2
 80058ba:	8013      	strh	r3, [r2, #0]
	MF.FLAG.FWALL = 1;
 80058bc:	4a08      	ldr	r2, [pc, #32]	; (80058e0 <set_positionF+0x40>)
 80058be:	8813      	ldrh	r3, [r2, #0]
 80058c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80058c4:	8013      	strh	r3, [r2, #0]
	while(MF.FLAG.FWALL);
 80058c6:	bf00      	nop
 80058c8:	4b05      	ldr	r3, [pc, #20]	; (80058e0 <set_positionF+0x40>)
 80058ca:	881b      	ldrh	r3, [r3, #0]
 80058cc:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80058d0:	b2db      	uxtb	r3, r3
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d1f8      	bne.n	80058c8 <set_positionF+0x28>

	drive_stop();
 80058d6:	f7ff fa2f 	bl	8004d38 <drive_stop>
}
 80058da:	bf00      	nop
 80058dc:	bd80      	pop	{r7, pc}
 80058de:	bf00      	nop
 80058e0:	20000f68 	.word	0x20000f68

080058e4 <start_sectionA>:
//start_sectionA
// スタート区画分加速しながら走行する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void start_sectionA(void){
 80058e4:	b580      	push	{r7, lr}
 80058e6:	af00      	add	r7, sp, #0

	control_start();
 80058e8:	f7ff fa4e 	bl	8004d88 <control_start>
	if(run_mode == LOW){
 80058ec:	4b64      	ldr	r3, [pc, #400]	; (8005a80 <start_sectionA+0x19c>)
 80058ee:	781b      	ldrb	r3, [r3, #0]
 80058f0:	b2db      	uxtb	r3, r3
 80058f2:	2b01      	cmp	r3, #1
 80058f4:	d12a      	bne.n	800594c <start_sectionA+0x68>
		if(start_mode == 0){
 80058f6:	4b63      	ldr	r3, [pc, #396]	; (8005a84 <start_sectionA+0x1a0>)
 80058f8:	781b      	ldrb	r3, [r3, #0]
 80058fa:	b2db      	uxtb	r3, r3
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d108      	bne.n	8005912 <start_sectionA+0x2e>
			driveA(4000, SPEED_MIN, SPEED_LOW, SEC_START);					//aスタート区画分加速しながら走行。走行後は停止しない
 8005900:	237d      	movs	r3, #125	; 0x7d
 8005902:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8005906:	2114      	movs	r1, #20
 8005908:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 800590c:	f7ff fb5e 	bl	8004fcc <driveA>
 8005910:	e0a8      	b.n	8005a64 <start_sectionA+0x180>
		}else if(start_mode == 1){
 8005912:	4b5c      	ldr	r3, [pc, #368]	; (8005a84 <start_sectionA+0x1a0>)
 8005914:	781b      	ldrb	r3, [r3, #0]
 8005916:	b2db      	uxtb	r3, r3
 8005918:	2b01      	cmp	r3, #1
 800591a:	d108      	bne.n	800592e <start_sectionA+0x4a>
			driveA(4000, SPEED_MIN, SPEED_LOW, SEC_HALF);					//a半区画分加速しながら走行。走行後は停止しない
 800591c:	235b      	movs	r3, #91	; 0x5b
 800591e:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8005922:	2114      	movs	r1, #20
 8005924:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8005928:	f7ff fb50 	bl	8004fcc <driveA>
 800592c:	e09a      	b.n	8005a64 <start_sectionA+0x180>
		}else if(start_mode == 2){
 800592e:	4b55      	ldr	r3, [pc, #340]	; (8005a84 <start_sectionA+0x1a0>)
 8005930:	781b      	ldrb	r3, [r3, #0]
 8005932:	b2db      	uxtb	r3, r3
 8005934:	2b02      	cmp	r3, #2
 8005936:	f040 8095 	bne.w	8005a64 <start_sectionA+0x180>
			driveA(4000, SPEED_MIN, SPEED_LOW, SEC_START_HALF);				//aスタート半区画分加速しながら走行。走行後は停止しない
 800593a:	2323      	movs	r3, #35	; 0x23
 800593c:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8005940:	2114      	movs	r1, #20
 8005942:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8005946:	f7ff fb41 	bl	8004fcc <driveA>
 800594a:	e08b      	b.n	8005a64 <start_sectionA+0x180>
		}
	}else if(run_mode == MIDDLE){
 800594c:	4b4c      	ldr	r3, [pc, #304]	; (8005a80 <start_sectionA+0x19c>)
 800594e:	781b      	ldrb	r3, [r3, #0]
 8005950:	b2db      	uxtb	r3, r3
 8005952:	2b02      	cmp	r3, #2
 8005954:	d129      	bne.n	80059aa <start_sectionA+0xc6>
		if(start_mode == 0){
 8005956:	4b4b      	ldr	r3, [pc, #300]	; (8005a84 <start_sectionA+0x1a0>)
 8005958:	781b      	ldrb	r3, [r3, #0]
 800595a:	b2db      	uxtb	r3, r3
 800595c:	2b00      	cmp	r3, #0
 800595e:	d108      	bne.n	8005972 <start_sectionA+0x8e>
			driveA(6000, SPEED_MIN, SPEED_MIDDLE, SEC_START);				//aスタート区画分加速しながら走行。走行後は停止しない
 8005960:	237d      	movs	r3, #125	; 0x7d
 8005962:	f44f 7216 	mov.w	r2, #600	; 0x258
 8005966:	2114      	movs	r1, #20
 8005968:	f241 7070 	movw	r0, #6000	; 0x1770
 800596c:	f7ff fb2e 	bl	8004fcc <driveA>
 8005970:	e078      	b.n	8005a64 <start_sectionA+0x180>
		}else if(start_mode == 1){
 8005972:	4b44      	ldr	r3, [pc, #272]	; (8005a84 <start_sectionA+0x1a0>)
 8005974:	781b      	ldrb	r3, [r3, #0]
 8005976:	b2db      	uxtb	r3, r3
 8005978:	2b01      	cmp	r3, #1
 800597a:	d108      	bne.n	800598e <start_sectionA+0xaa>
			driveA(6000, SPEED_MIN, SPEED_MIDDLE, SEC_HALF);				//a半区画分加速しながら走行。走行後は停止しない
 800597c:	235b      	movs	r3, #91	; 0x5b
 800597e:	f44f 7216 	mov.w	r2, #600	; 0x258
 8005982:	2114      	movs	r1, #20
 8005984:	f241 7070 	movw	r0, #6000	; 0x1770
 8005988:	f7ff fb20 	bl	8004fcc <driveA>
 800598c:	e06a      	b.n	8005a64 <start_sectionA+0x180>
		}else if(start_mode == 2){
 800598e:	4b3d      	ldr	r3, [pc, #244]	; (8005a84 <start_sectionA+0x1a0>)
 8005990:	781b      	ldrb	r3, [r3, #0]
 8005992:	b2db      	uxtb	r3, r3
 8005994:	2b02      	cmp	r3, #2
 8005996:	d165      	bne.n	8005a64 <start_sectionA+0x180>
			driveA(6000, SPEED_MIN, SPEED_MIDDLE, SEC_START_HALF);			//aスタート半区画分加速しながら走行。走行後は停止しない
 8005998:	2323      	movs	r3, #35	; 0x23
 800599a:	f44f 7216 	mov.w	r2, #600	; 0x258
 800599e:	2114      	movs	r1, #20
 80059a0:	f241 7070 	movw	r0, #6000	; 0x1770
 80059a4:	f7ff fb12 	bl	8004fcc <driveA>
 80059a8:	e05c      	b.n	8005a64 <start_sectionA+0x180>
		}
	}else if(run_mode == HIGH){
 80059aa:	4b35      	ldr	r3, [pc, #212]	; (8005a80 <start_sectionA+0x19c>)
 80059ac:	781b      	ldrb	r3, [r3, #0]
 80059ae:	b2db      	uxtb	r3, r3
 80059b0:	2b03      	cmp	r3, #3
 80059b2:	d129      	bne.n	8005a08 <start_sectionA+0x124>
		if(start_mode == 0){
 80059b4:	4b33      	ldr	r3, [pc, #204]	; (8005a84 <start_sectionA+0x1a0>)
 80059b6:	781b      	ldrb	r3, [r3, #0]
 80059b8:	b2db      	uxtb	r3, r3
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d108      	bne.n	80059d0 <start_sectionA+0xec>
			driveA(8000, SPEED_MIN, SPEED_HIGH, SEC_START);					//aスタート区画分加速しながら走行。走行後は停止しない
 80059be:	237d      	movs	r3, #125	; 0x7d
 80059c0:	f44f 7248 	mov.w	r2, #800	; 0x320
 80059c4:	2114      	movs	r1, #20
 80059c6:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 80059ca:	f7ff faff 	bl	8004fcc <driveA>
 80059ce:	e049      	b.n	8005a64 <start_sectionA+0x180>
		}else if(start_mode == 1){
 80059d0:	4b2c      	ldr	r3, [pc, #176]	; (8005a84 <start_sectionA+0x1a0>)
 80059d2:	781b      	ldrb	r3, [r3, #0]
 80059d4:	b2db      	uxtb	r3, r3
 80059d6:	2b01      	cmp	r3, #1
 80059d8:	d108      	bne.n	80059ec <start_sectionA+0x108>
			driveA(8000, SPEED_MIN, SPEED_HIGH, SEC_HALF);					//a半区画分加速しながら走行。走行後は停止しない
 80059da:	235b      	movs	r3, #91	; 0x5b
 80059dc:	f44f 7248 	mov.w	r2, #800	; 0x320
 80059e0:	2114      	movs	r1, #20
 80059e2:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 80059e6:	f7ff faf1 	bl	8004fcc <driveA>
 80059ea:	e03b      	b.n	8005a64 <start_sectionA+0x180>
		}else if(start_mode == 2){
 80059ec:	4b25      	ldr	r3, [pc, #148]	; (8005a84 <start_sectionA+0x1a0>)
 80059ee:	781b      	ldrb	r3, [r3, #0]
 80059f0:	b2db      	uxtb	r3, r3
 80059f2:	2b02      	cmp	r3, #2
 80059f4:	d136      	bne.n	8005a64 <start_sectionA+0x180>
			driveA(10000, SPEED_MIN, SPEED_HIGH, SEC_START_HALF);			//aスタート半区画分加速しながら走行。走行後は停止しない
 80059f6:	2323      	movs	r3, #35	; 0x23
 80059f8:	f44f 7248 	mov.w	r2, #800	; 0x320
 80059fc:	2114      	movs	r1, #20
 80059fe:	f242 7010 	movw	r0, #10000	; 0x2710
 8005a02:	f7ff fae3 	bl	8004fcc <driveA>
 8005a06:	e02d      	b.n	8005a64 <start_sectionA+0x180>
		}
	}else if(run_mode == HIGH_HIGH){
 8005a08:	4b1d      	ldr	r3, [pc, #116]	; (8005a80 <start_sectionA+0x19c>)
 8005a0a:	781b      	ldrb	r3, [r3, #0]
 8005a0c:	b2db      	uxtb	r3, r3
 8005a0e:	2b04      	cmp	r3, #4
 8005a10:	d128      	bne.n	8005a64 <start_sectionA+0x180>
		if(start_mode == 0){
 8005a12:	4b1c      	ldr	r3, [pc, #112]	; (8005a84 <start_sectionA+0x1a0>)
 8005a14:	781b      	ldrb	r3, [r3, #0]
 8005a16:	b2db      	uxtb	r3, r3
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d108      	bne.n	8005a2e <start_sectionA+0x14a>
			driveA(10000, SPEED_MIN, SPEED_HIGH_HIGH, SEC_START);					//aスタート区画分加速しながら走行。走行後は停止しない
 8005a1c:	237d      	movs	r3, #125	; 0x7d
 8005a1e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005a22:	2114      	movs	r1, #20
 8005a24:	f242 7010 	movw	r0, #10000	; 0x2710
 8005a28:	f7ff fad0 	bl	8004fcc <driveA>
 8005a2c:	e01a      	b.n	8005a64 <start_sectionA+0x180>
		}else if(start_mode == 1){
 8005a2e:	4b15      	ldr	r3, [pc, #84]	; (8005a84 <start_sectionA+0x1a0>)
 8005a30:	781b      	ldrb	r3, [r3, #0]
 8005a32:	b2db      	uxtb	r3, r3
 8005a34:	2b01      	cmp	r3, #1
 8005a36:	d108      	bne.n	8005a4a <start_sectionA+0x166>
			driveA(10000, SPEED_MIN, SPEED_HIGH_HIGH, SEC_HALF);					//a半区画分加速しながら走行。走行後は停止しない
 8005a38:	235b      	movs	r3, #91	; 0x5b
 8005a3a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005a3e:	2114      	movs	r1, #20
 8005a40:	f242 7010 	movw	r0, #10000	; 0x2710
 8005a44:	f7ff fac2 	bl	8004fcc <driveA>
 8005a48:	e00c      	b.n	8005a64 <start_sectionA+0x180>
		}else if(start_mode == 2){
 8005a4a:	4b0e      	ldr	r3, [pc, #56]	; (8005a84 <start_sectionA+0x1a0>)
 8005a4c:	781b      	ldrb	r3, [r3, #0]
 8005a4e:	b2db      	uxtb	r3, r3
 8005a50:	2b02      	cmp	r3, #2
 8005a52:	d107      	bne.n	8005a64 <start_sectionA+0x180>
			driveA(15000, SPEED_MIN, SPEED_HIGH_HIGH, SEC_START_HALF);			//aスタート半区画分加速しながら走行。走行後は停止しない
 8005a54:	2323      	movs	r3, #35	; 0x23
 8005a56:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005a5a:	2114      	movs	r1, #20
 8005a5c:	f643 2098 	movw	r0, #15000	; 0x3a98
 8005a60:	f7ff fab4 	bl	8004fcc <driveA>
		}
	}
	start_mode = 1;
 8005a64:	4b07      	ldr	r3, [pc, #28]	; (8005a84 <start_sectionA+0x1a0>)
 8005a66:	2201      	movs	r2, #1
 8005a68:	701a      	strb	r2, [r3, #0]
	if(!MF.FLAG.SCND)get_wall_info();								//壁情報を取得，片壁制御の有効・無効の判断
 8005a6a:	4b07      	ldr	r3, [pc, #28]	; (8005a88 <start_sectionA+0x1a4>)
 8005a6c:	881b      	ldrh	r3, [r3, #0]
 8005a6e:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8005a72:	b2db      	uxtb	r3, r3
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d101      	bne.n	8005a7c <start_sectionA+0x198>
 8005a78:	f00a f980 	bl	800fd7c <get_wall_info>
}
 8005a7c:	bf00      	nop
 8005a7e:	bd80      	pop	{r7, pc}
 8005a80:	20000456 	.word	0x20000456
 8005a84:	200015c8 	.word	0x200015c8
 8005a88:	20000f68 	.word	0x20000f68

08005a8c <half_sectionA>:
//half_sectionA
// 半区画分加速しながら走行する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void half_sectionA(void){
 8005a8c:	b580      	push	{r7, lr}
 8005a8e:	af00      	add	r7, sp, #0

	control_start();
 8005a90:	f7ff f97a 	bl	8004d88 <control_start>
	if(run_mode == LOW){
 8005a94:	4b20      	ldr	r3, [pc, #128]	; (8005b18 <half_sectionA+0x8c>)
 8005a96:	781b      	ldrb	r3, [r3, #0]
 8005a98:	b2db      	uxtb	r3, r3
 8005a9a:	2b01      	cmp	r3, #1
 8005a9c:	d108      	bne.n	8005ab0 <half_sectionA+0x24>
		driveA(4000, SPEED_MIN, SPEED_LOW, SEC_HALF);						//半区画分加速しながら走行。走行後は停止しない
 8005a9e:	235b      	movs	r3, #91	; 0x5b
 8005aa0:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8005aa4:	2114      	movs	r1, #20
 8005aa6:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8005aaa:	f7ff fa8f 	bl	8004fcc <driveA>
 8005aae:	e028      	b.n	8005b02 <half_sectionA+0x76>
	}else if(run_mode == MIDDLE){
 8005ab0:	4b19      	ldr	r3, [pc, #100]	; (8005b18 <half_sectionA+0x8c>)
 8005ab2:	781b      	ldrb	r3, [r3, #0]
 8005ab4:	b2db      	uxtb	r3, r3
 8005ab6:	2b02      	cmp	r3, #2
 8005ab8:	d108      	bne.n	8005acc <half_sectionA+0x40>
		driveA(6000, SPEED_MIN, SPEED_MIDDLE, SEC_HALF);					//半区画分加速しながら走行。走行後は停止しない
 8005aba:	235b      	movs	r3, #91	; 0x5b
 8005abc:	f44f 7216 	mov.w	r2, #600	; 0x258
 8005ac0:	2114      	movs	r1, #20
 8005ac2:	f241 7070 	movw	r0, #6000	; 0x1770
 8005ac6:	f7ff fa81 	bl	8004fcc <driveA>
 8005aca:	e01a      	b.n	8005b02 <half_sectionA+0x76>
	}else if(run_mode == HIGH){
 8005acc:	4b12      	ldr	r3, [pc, #72]	; (8005b18 <half_sectionA+0x8c>)
 8005ace:	781b      	ldrb	r3, [r3, #0]
 8005ad0:	b2db      	uxtb	r3, r3
 8005ad2:	2b03      	cmp	r3, #3
 8005ad4:	d108      	bne.n	8005ae8 <half_sectionA+0x5c>
		driveA(8000, SPEED_MIN, SPEED_HIGH, SEC_HALF);						//半区画分加速しながら走行。走行後は停止しない
 8005ad6:	235b      	movs	r3, #91	; 0x5b
 8005ad8:	f44f 7248 	mov.w	r2, #800	; 0x320
 8005adc:	2114      	movs	r1, #20
 8005ade:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 8005ae2:	f7ff fa73 	bl	8004fcc <driveA>
 8005ae6:	e00c      	b.n	8005b02 <half_sectionA+0x76>
	}else if(run_mode == HIGH_HIGH){
 8005ae8:	4b0b      	ldr	r3, [pc, #44]	; (8005b18 <half_sectionA+0x8c>)
 8005aea:	781b      	ldrb	r3, [r3, #0]
 8005aec:	b2db      	uxtb	r3, r3
 8005aee:	2b04      	cmp	r3, #4
 8005af0:	d107      	bne.n	8005b02 <half_sectionA+0x76>
		driveA(10000, SPEED_MIN, SPEED_HIGH_HIGH, SEC_HALF);						//半区画分加速しながら走行。走行後は停止しない
 8005af2:	235b      	movs	r3, #91	; 0x5b
 8005af4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005af8:	2114      	movs	r1, #20
 8005afa:	f242 7010 	movw	r0, #10000	; 0x2710
 8005afe:	f7ff fa65 	bl	8004fcc <driveA>
	}
	if(!MF.FLAG.SCND)get_wall_info();										//壁情報を取得，片壁制御の有効・無効の判断
 8005b02:	4b06      	ldr	r3, [pc, #24]	; (8005b1c <half_sectionA+0x90>)
 8005b04:	881b      	ldrh	r3, [r3, #0]
 8005b06:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8005b0a:	b2db      	uxtb	r3, r3
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d101      	bne.n	8005b14 <half_sectionA+0x88>
 8005b10:	f00a f934 	bl	800fd7c <get_wall_info>
}
 8005b14:	bf00      	nop
 8005b16:	bd80      	pop	{r7, pc}
 8005b18:	20000456 	.word	0x20000456
 8005b1c:	20000f68 	.word	0x20000f68

08005b20 <half_sectionD>:
//half_sectionD
// 半区画分減速しながら走行し停止する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void half_sectionD(void){
 8005b20:	b580      	push	{r7, lr}
 8005b22:	af00      	add	r7, sp, #0
	full_led_write(BLUE);
 8005b24:	2003      	movs	r0, #3
 8005b26:	f00a f99d 	bl	800fe64 <full_led_write>

	control_start();
 8005b2a:	f7ff f92d 	bl	8004d88 <control_start>
	if(run_mode == LOW){
 8005b2e:	4b1a      	ldr	r3, [pc, #104]	; (8005b98 <half_sectionD+0x78>)
 8005b30:	781b      	ldrb	r3, [r3, #0]
 8005b32:	b2db      	uxtb	r3, r3
 8005b34:	2b01      	cmp	r3, #1
 8005b36:	d107      	bne.n	8005b48 <half_sectionD+0x28>
		driveD(-4000, SPEED_MIN, SPEED_LOW, SEC_HALF);						//半区画分指定減速度で減速走行。走行後は停止する
 8005b38:	235b      	movs	r3, #91	; 0x5b
 8005b3a:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8005b3e:	2114      	movs	r1, #20
 8005b40:	4816      	ldr	r0, [pc, #88]	; (8005b9c <half_sectionD+0x7c>)
 8005b42:	f7ff fabd 	bl	80050c0 <driveD>
	}else if(run_mode == HIGH){
		driveD(-8000, SPEED_MIN, SPEED_HIGH, SEC_HALF);						//半区画分指定減速度で減速走行。走行後は停止する
	}else if(run_mode == HIGH_HIGH){
		driveD(-10000, SPEED_MIN, SPEED_HIGH_HIGH, SEC_HALF);						//半区画分指定減速度で減速走行。走行後は停止する
	}
}
 8005b46:	e025      	b.n	8005b94 <half_sectionD+0x74>
	}else if(run_mode == MIDDLE){
 8005b48:	4b13      	ldr	r3, [pc, #76]	; (8005b98 <half_sectionD+0x78>)
 8005b4a:	781b      	ldrb	r3, [r3, #0]
 8005b4c:	b2db      	uxtb	r3, r3
 8005b4e:	2b02      	cmp	r3, #2
 8005b50:	d107      	bne.n	8005b62 <half_sectionD+0x42>
		driveD(-6000, SPEED_MIN, SPEED_MIDDLE, SEC_HALF);					//半区画分指定減速度で減速走行。走行後は停止する
 8005b52:	235b      	movs	r3, #91	; 0x5b
 8005b54:	f44f 7216 	mov.w	r2, #600	; 0x258
 8005b58:	2114      	movs	r1, #20
 8005b5a:	4811      	ldr	r0, [pc, #68]	; (8005ba0 <half_sectionD+0x80>)
 8005b5c:	f7ff fab0 	bl	80050c0 <driveD>
}
 8005b60:	e018      	b.n	8005b94 <half_sectionD+0x74>
	}else if(run_mode == HIGH){
 8005b62:	4b0d      	ldr	r3, [pc, #52]	; (8005b98 <half_sectionD+0x78>)
 8005b64:	781b      	ldrb	r3, [r3, #0]
 8005b66:	b2db      	uxtb	r3, r3
 8005b68:	2b03      	cmp	r3, #3
 8005b6a:	d107      	bne.n	8005b7c <half_sectionD+0x5c>
		driveD(-8000, SPEED_MIN, SPEED_HIGH, SEC_HALF);						//半区画分指定減速度で減速走行。走行後は停止する
 8005b6c:	235b      	movs	r3, #91	; 0x5b
 8005b6e:	f44f 7248 	mov.w	r2, #800	; 0x320
 8005b72:	2114      	movs	r1, #20
 8005b74:	480b      	ldr	r0, [pc, #44]	; (8005ba4 <half_sectionD+0x84>)
 8005b76:	f7ff faa3 	bl	80050c0 <driveD>
}
 8005b7a:	e00b      	b.n	8005b94 <half_sectionD+0x74>
	}else if(run_mode == HIGH_HIGH){
 8005b7c:	4b06      	ldr	r3, [pc, #24]	; (8005b98 <half_sectionD+0x78>)
 8005b7e:	781b      	ldrb	r3, [r3, #0]
 8005b80:	b2db      	uxtb	r3, r3
 8005b82:	2b04      	cmp	r3, #4
 8005b84:	d106      	bne.n	8005b94 <half_sectionD+0x74>
		driveD(-10000, SPEED_MIN, SPEED_HIGH_HIGH, SEC_HALF);						//半区画分指定減速度で減速走行。走行後は停止する
 8005b86:	235b      	movs	r3, #91	; 0x5b
 8005b88:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005b8c:	2114      	movs	r1, #20
 8005b8e:	4806      	ldr	r0, [pc, #24]	; (8005ba8 <half_sectionD+0x88>)
 8005b90:	f7ff fa96 	bl	80050c0 <driveD>
}
 8005b94:	bf00      	nop
 8005b96:	bd80      	pop	{r7, pc}
 8005b98:	20000456 	.word	0x20000456
 8005b9c:	fffff060 	.word	0xfffff060
 8005ba0:	ffffe890 	.word	0xffffe890
 8005ba4:	ffffe0c0 	.word	0xffffe0c0
 8005ba8:	ffffd8f0 	.word	0xffffd8f0

08005bac <half_sectionU>:
//half_sectionU
// 等速で半区画分進む
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void half_sectionU(void){
 8005bac:	b580      	push	{r7, lr}
 8005bae:	af00      	add	r7, sp, #0
	full_led_write(WHITE);
 8005bb0:	2007      	movs	r0, #7
 8005bb2:	f00a f957 	bl	800fe64 <full_led_write>
	control_start();
 8005bb6:	f7ff f8e7 	bl	8004d88 <control_start>
	driveU(SEC_HALF);													//半区画分等速走行。走行後は停止しない
 8005bba:	205b      	movs	r0, #91	; 0x5b
 8005bbc:	f7ff fb5a 	bl	8005274 <driveU>
}
 8005bc0:	bf00      	nop
 8005bc2:	bd80      	pop	{r7, pc}

08005bc4 <half_sectionV>:
//half_sectionV
// 等速で斜め半区画分進む
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void half_sectionV(void){
 8005bc4:	b580      	push	{r7, lr}
 8005bc6:	af00      	add	r7, sp, #0
	full_led_write(WHITE);
 8005bc8:	2007      	movs	r0, #7
 8005bca:	f00a f94b 	bl	800fe64 <full_led_write>
	control_start();
 8005bce:	f7ff f8db 	bl	8004d88 <control_start>
	driveU(SEC_HALF_V);													//半区画分等速走行。走行後は停止しない
 8005bd2:	2082      	movs	r0, #130	; 0x82
 8005bd4:	f7ff fb4e 	bl	8005274 <driveU>
}
 8005bd8:	bf00      	nop
 8005bda:	bd80      	pop	{r7, pc}

08005bdc <one_section>:
//one_section
// 1区画分進んで停止する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void one_section(void){
 8005bdc:	b580      	push	{r7, lr}
 8005bde:	af00      	add	r7, sp, #0

	half_sectionA();													//半区画分加速走行
 8005be0:	f7ff ff54 	bl	8005a8c <half_sectionA>
	half_sectionD();													//半区画分減速走行のち停止
 8005be4:	f7ff ff9c 	bl	8005b20 <half_sectionD>
}
 8005be8:	bf00      	nop
 8005bea:	bd80      	pop	{r7, pc}

08005bec <one_sectionA>:
//one_sectionA
// 1区画分加速する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void one_sectionA(void){
 8005bec:	b580      	push	{r7, lr}
 8005bee:	af00      	add	r7, sp, #0
	full_led_write(BLUEGREEN);
 8005bf0:	2004      	movs	r0, #4
 8005bf2:	f00a f937 	bl	800fe64 <full_led_write>
	control_start();
 8005bf6:	f7ff f8c7 	bl	8004d88 <control_start>
	if(run_mode == LOW){
 8005bfa:	4b2b      	ldr	r3, [pc, #172]	; (8005ca8 <one_sectionA+0xbc>)
 8005bfc:	781b      	ldrb	r3, [r3, #0]
 8005bfe:	b2db      	uxtb	r3, r3
 8005c00:	2b01      	cmp	r3, #1
 8005c02:	d10d      	bne.n	8005c20 <one_sectionA+0x34>
		driveA(accel_hs, SPEED_LOW, speed_max_hs, SEC_HALF*2);				//1区画分加速走行。走行後は停止しない
 8005c04:	4b29      	ldr	r3, [pc, #164]	; (8005cac <one_sectionA+0xc0>)
 8005c06:	881b      	ldrh	r3, [r3, #0]
 8005c08:	b21b      	sxth	r3, r3
 8005c0a:	b298      	uxth	r0, r3
 8005c0c:	4b28      	ldr	r3, [pc, #160]	; (8005cb0 <one_sectionA+0xc4>)
 8005c0e:	881b      	ldrh	r3, [r3, #0]
 8005c10:	b21b      	sxth	r3, r3
 8005c12:	b29a      	uxth	r2, r3
 8005c14:	23b6      	movs	r3, #182	; 0xb6
 8005c16:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8005c1a:	f7ff f9d7 	bl	8004fcc <driveA>
 8005c1e:	e037      	b.n	8005c90 <one_sectionA+0xa4>
	}else if(run_mode == MIDDLE){
 8005c20:	4b21      	ldr	r3, [pc, #132]	; (8005ca8 <one_sectionA+0xbc>)
 8005c22:	781b      	ldrb	r3, [r3, #0]
 8005c24:	b2db      	uxtb	r3, r3
 8005c26:	2b02      	cmp	r3, #2
 8005c28:	d10d      	bne.n	8005c46 <one_sectionA+0x5a>
		driveA(accel_hs, SPEED_MIDDLE, speed_max_hs, SEC_HALF*2);			//1区画分加速走行。走行後は停止しない
 8005c2a:	4b20      	ldr	r3, [pc, #128]	; (8005cac <one_sectionA+0xc0>)
 8005c2c:	881b      	ldrh	r3, [r3, #0]
 8005c2e:	b21b      	sxth	r3, r3
 8005c30:	b298      	uxth	r0, r3
 8005c32:	4b1f      	ldr	r3, [pc, #124]	; (8005cb0 <one_sectionA+0xc4>)
 8005c34:	881b      	ldrh	r3, [r3, #0]
 8005c36:	b21b      	sxth	r3, r3
 8005c38:	b29a      	uxth	r2, r3
 8005c3a:	23b6      	movs	r3, #182	; 0xb6
 8005c3c:	f44f 7116 	mov.w	r1, #600	; 0x258
 8005c40:	f7ff f9c4 	bl	8004fcc <driveA>
 8005c44:	e024      	b.n	8005c90 <one_sectionA+0xa4>
	}else if(run_mode == HIGH){
 8005c46:	4b18      	ldr	r3, [pc, #96]	; (8005ca8 <one_sectionA+0xbc>)
 8005c48:	781b      	ldrb	r3, [r3, #0]
 8005c4a:	b2db      	uxtb	r3, r3
 8005c4c:	2b03      	cmp	r3, #3
 8005c4e:	d10d      	bne.n	8005c6c <one_sectionA+0x80>
		driveA(accel_hs, SPEED_HIGH, speed_max_hs, SEC_HALF*2);				//1区画分加速走行。走行後は停止しない
 8005c50:	4b16      	ldr	r3, [pc, #88]	; (8005cac <one_sectionA+0xc0>)
 8005c52:	881b      	ldrh	r3, [r3, #0]
 8005c54:	b21b      	sxth	r3, r3
 8005c56:	b298      	uxth	r0, r3
 8005c58:	4b15      	ldr	r3, [pc, #84]	; (8005cb0 <one_sectionA+0xc4>)
 8005c5a:	881b      	ldrh	r3, [r3, #0]
 8005c5c:	b21b      	sxth	r3, r3
 8005c5e:	b29a      	uxth	r2, r3
 8005c60:	23b6      	movs	r3, #182	; 0xb6
 8005c62:	f44f 7148 	mov.w	r1, #800	; 0x320
 8005c66:	f7ff f9b1 	bl	8004fcc <driveA>
 8005c6a:	e011      	b.n	8005c90 <one_sectionA+0xa4>
	}else if(run_mode == HIGH_HIGH){
 8005c6c:	4b0e      	ldr	r3, [pc, #56]	; (8005ca8 <one_sectionA+0xbc>)
 8005c6e:	781b      	ldrb	r3, [r3, #0]
 8005c70:	b2db      	uxtb	r3, r3
 8005c72:	2b04      	cmp	r3, #4
 8005c74:	d10c      	bne.n	8005c90 <one_sectionA+0xa4>
		driveA(accel_hs, SPEED_HIGH_HIGH, speed_max_hs, SEC_HALF*2);				//1区画分加速走行。走行後は停止しない
 8005c76:	4b0d      	ldr	r3, [pc, #52]	; (8005cac <one_sectionA+0xc0>)
 8005c78:	881b      	ldrh	r3, [r3, #0]
 8005c7a:	b21b      	sxth	r3, r3
 8005c7c:	b298      	uxth	r0, r3
 8005c7e:	4b0c      	ldr	r3, [pc, #48]	; (8005cb0 <one_sectionA+0xc4>)
 8005c80:	881b      	ldrh	r3, [r3, #0]
 8005c82:	b21b      	sxth	r3, r3
 8005c84:	b29a      	uxth	r2, r3
 8005c86:	23b6      	movs	r3, #182	; 0xb6
 8005c88:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8005c8c:	f7ff f99e 	bl	8004fcc <driveA>
	}
	if(!MF.FLAG.SCND)get_wall_info();								//壁情報を取得，片壁制御の有効・無効の判断
 8005c90:	4b08      	ldr	r3, [pc, #32]	; (8005cb4 <one_sectionA+0xc8>)
 8005c92:	881b      	ldrh	r3, [r3, #0]
 8005c94:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8005c98:	b2db      	uxtb	r3, r3
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d101      	bne.n	8005ca2 <one_sectionA+0xb6>
 8005c9e:	f00a f86d 	bl	800fd7c <get_wall_info>
}
 8005ca2:	bf00      	nop
 8005ca4:	bd80      	pop	{r7, pc}
 8005ca6:	bf00      	nop
 8005ca8:	20000456 	.word	0x20000456
 8005cac:	20000454 	.word	0x20000454
 8005cb0:	20000f7c 	.word	0x20000f7c
 8005cb4:	20000f68 	.word	0x20000f68

08005cb8 <one_sectionD>:
//one_sectionD
// 1区画分減速する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void one_sectionD(void){
 8005cb8:	b580      	push	{r7, lr}
 8005cba:	af00      	add	r7, sp, #0
	full_led_write(BLUE);
 8005cbc:	2003      	movs	r0, #3
 8005cbe:	f00a f8d1 	bl	800fe64 <full_led_write>
	control_start();
 8005cc2:	f7ff f861 	bl	8004d88 <control_start>
		driveA(-accel_hs, SPEED_MIDDLE, speed_max_hs, SEC_HALF*2);			//1区画分減速走行。走行後は停止しない
	}else if(run_mode == HIGH){
		driveA(-accel_hs, SPEED_HIGH, speed_max_hs, SEC_HALF*2);			//1区画分減速走行。走行後は停止しない
	}
*/
	if(run_mode == LOW){
 8005cc6:	4b31      	ldr	r3, [pc, #196]	; (8005d8c <one_sectionD+0xd4>)
 8005cc8:	781b      	ldrb	r3, [r3, #0]
 8005cca:	b2db      	uxtb	r3, r3
 8005ccc:	2b01      	cmp	r3, #1
 8005cce:	d110      	bne.n	8005cf2 <one_sectionD+0x3a>
		driveD(-accel_hs, SPEED_LOW, speed_max_hs, SEC_HALF*2);				//1区画分減速走行。走行後は停止しない
 8005cd0:	4b2f      	ldr	r3, [pc, #188]	; (8005d90 <one_sectionD+0xd8>)
 8005cd2:	881b      	ldrh	r3, [r3, #0]
 8005cd4:	b21b      	sxth	r3, r3
 8005cd6:	b29b      	uxth	r3, r3
 8005cd8:	425b      	negs	r3, r3
 8005cda:	b29b      	uxth	r3, r3
 8005cdc:	b218      	sxth	r0, r3
 8005cde:	4b2d      	ldr	r3, [pc, #180]	; (8005d94 <one_sectionD+0xdc>)
 8005ce0:	881b      	ldrh	r3, [r3, #0]
 8005ce2:	b21b      	sxth	r3, r3
 8005ce4:	b29a      	uxth	r2, r3
 8005ce6:	23b6      	movs	r3, #182	; 0xb6
 8005ce8:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8005cec:	f7ff f9e8 	bl	80050c0 <driveD>
 8005cf0:	e040      	b.n	8005d74 <one_sectionD+0xbc>
	}else if(run_mode == MIDDLE){
 8005cf2:	4b26      	ldr	r3, [pc, #152]	; (8005d8c <one_sectionD+0xd4>)
 8005cf4:	781b      	ldrb	r3, [r3, #0]
 8005cf6:	b2db      	uxtb	r3, r3
 8005cf8:	2b02      	cmp	r3, #2
 8005cfa:	d110      	bne.n	8005d1e <one_sectionD+0x66>
		driveD(-accel_hs, SPEED_MIDDLE, speed_max_hs, SEC_HALF*2);			//1区画分減速走行。走行後は停止しない
 8005cfc:	4b24      	ldr	r3, [pc, #144]	; (8005d90 <one_sectionD+0xd8>)
 8005cfe:	881b      	ldrh	r3, [r3, #0]
 8005d00:	b21b      	sxth	r3, r3
 8005d02:	b29b      	uxth	r3, r3
 8005d04:	425b      	negs	r3, r3
 8005d06:	b29b      	uxth	r3, r3
 8005d08:	b218      	sxth	r0, r3
 8005d0a:	4b22      	ldr	r3, [pc, #136]	; (8005d94 <one_sectionD+0xdc>)
 8005d0c:	881b      	ldrh	r3, [r3, #0]
 8005d0e:	b21b      	sxth	r3, r3
 8005d10:	b29a      	uxth	r2, r3
 8005d12:	23b6      	movs	r3, #182	; 0xb6
 8005d14:	f44f 7116 	mov.w	r1, #600	; 0x258
 8005d18:	f7ff f9d2 	bl	80050c0 <driveD>
 8005d1c:	e02a      	b.n	8005d74 <one_sectionD+0xbc>
	}else if(run_mode == HIGH){
 8005d1e:	4b1b      	ldr	r3, [pc, #108]	; (8005d8c <one_sectionD+0xd4>)
 8005d20:	781b      	ldrb	r3, [r3, #0]
 8005d22:	b2db      	uxtb	r3, r3
 8005d24:	2b03      	cmp	r3, #3
 8005d26:	d110      	bne.n	8005d4a <one_sectionD+0x92>
		driveD(-accel_hs, SPEED_HIGH, speed_max_hs, SEC_HALF*2);			//1区画分減速走行。走行後は停止しない
 8005d28:	4b19      	ldr	r3, [pc, #100]	; (8005d90 <one_sectionD+0xd8>)
 8005d2a:	881b      	ldrh	r3, [r3, #0]
 8005d2c:	b21b      	sxth	r3, r3
 8005d2e:	b29b      	uxth	r3, r3
 8005d30:	425b      	negs	r3, r3
 8005d32:	b29b      	uxth	r3, r3
 8005d34:	b218      	sxth	r0, r3
 8005d36:	4b17      	ldr	r3, [pc, #92]	; (8005d94 <one_sectionD+0xdc>)
 8005d38:	881b      	ldrh	r3, [r3, #0]
 8005d3a:	b21b      	sxth	r3, r3
 8005d3c:	b29a      	uxth	r2, r3
 8005d3e:	23b6      	movs	r3, #182	; 0xb6
 8005d40:	f44f 7148 	mov.w	r1, #800	; 0x320
 8005d44:	f7ff f9bc 	bl	80050c0 <driveD>
 8005d48:	e014      	b.n	8005d74 <one_sectionD+0xbc>
	}else if(run_mode == HIGH_HIGH){
 8005d4a:	4b10      	ldr	r3, [pc, #64]	; (8005d8c <one_sectionD+0xd4>)
 8005d4c:	781b      	ldrb	r3, [r3, #0]
 8005d4e:	b2db      	uxtb	r3, r3
 8005d50:	2b04      	cmp	r3, #4
 8005d52:	d10f      	bne.n	8005d74 <one_sectionD+0xbc>
		driveD(-accel_hs, SPEED_HIGH_HIGH, speed_max_hs, SEC_HALF*2);			//1区画分減速走行。走行後は停止しない
 8005d54:	4b0e      	ldr	r3, [pc, #56]	; (8005d90 <one_sectionD+0xd8>)
 8005d56:	881b      	ldrh	r3, [r3, #0]
 8005d58:	b21b      	sxth	r3, r3
 8005d5a:	b29b      	uxth	r3, r3
 8005d5c:	425b      	negs	r3, r3
 8005d5e:	b29b      	uxth	r3, r3
 8005d60:	b218      	sxth	r0, r3
 8005d62:	4b0c      	ldr	r3, [pc, #48]	; (8005d94 <one_sectionD+0xdc>)
 8005d64:	881b      	ldrh	r3, [r3, #0]
 8005d66:	b21b      	sxth	r3, r3
 8005d68:	b29a      	uxth	r2, r3
 8005d6a:	23b6      	movs	r3, #182	; 0xb6
 8005d6c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8005d70:	f7ff f9a6 	bl	80050c0 <driveD>
	}
	if(!MF.FLAG.SCND)get_wall_info();								//壁情報を取得，片壁制御の有効・無効の判断
 8005d74:	4b08      	ldr	r3, [pc, #32]	; (8005d98 <one_sectionD+0xe0>)
 8005d76:	881b      	ldrh	r3, [r3, #0]
 8005d78:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8005d7c:	b2db      	uxtb	r3, r3
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d101      	bne.n	8005d86 <one_sectionD+0xce>
 8005d82:	f009 fffb 	bl	800fd7c <get_wall_info>
}
 8005d86:	bf00      	nop
 8005d88:	bd80      	pop	{r7, pc}
 8005d8a:	bf00      	nop
 8005d8c:	20000456 	.word	0x20000456
 8005d90:	20000454 	.word	0x20000454
 8005d94:	20000f7c 	.word	0x20000f7c
 8005d98:	20000f68 	.word	0x20000f68

08005d9c <one_sectionVA>:
//one_sectionVA
// 等速で斜め半区画分進む
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void one_sectionVA(void){
 8005d9c:	b580      	push	{r7, lr}
 8005d9e:	af00      	add	r7, sp, #0
	full_led_write(BLUEGREEN);
 8005da0:	2004      	movs	r0, #4
 8005da2:	f00a f85f 	bl	800fe64 <full_led_write>
	control_start();
 8005da6:	f7fe ffef 	bl	8004d88 <control_start>
	if(run_mode == LOW){
 8005daa:	4b28      	ldr	r3, [pc, #160]	; (8005e4c <one_sectionVA+0xb0>)
 8005dac:	781b      	ldrb	r3, [r3, #0]
 8005dae:	b2db      	uxtb	r3, r3
 8005db0:	2b01      	cmp	r3, #1
 8005db2:	d10e      	bne.n	8005dd2 <one_sectionVA+0x36>
		driveA(accel_hs, SPEED_LOW, speed_max_hs, SEC_HALF_V*2);				//1区画分加速走行。走行後は停止しない
 8005db4:	4b26      	ldr	r3, [pc, #152]	; (8005e50 <one_sectionVA+0xb4>)
 8005db6:	881b      	ldrh	r3, [r3, #0]
 8005db8:	b21b      	sxth	r3, r3
 8005dba:	b298      	uxth	r0, r3
 8005dbc:	4b25      	ldr	r3, [pc, #148]	; (8005e54 <one_sectionVA+0xb8>)
 8005dbe:	881b      	ldrh	r3, [r3, #0]
 8005dc0:	b21b      	sxth	r3, r3
 8005dc2:	b29a      	uxth	r2, r3
 8005dc4:	f44f 7382 	mov.w	r3, #260	; 0x104
 8005dc8:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8005dcc:	f7ff f8fe 	bl	8004fcc <driveA>
	}else if(run_mode == HIGH){
		driveA(accel_hs, SPEED_HIGH, speed_max_hs, SEC_HALF_V*2);				//1区画分加速走行。走行後は停止しない
	}else if(run_mode == HIGH_HIGH){
		driveA(accel_hs, SPEED_HIGH_HIGH, speed_max_hs, SEC_HALF_V*2);				//1区画分加速走行。走行後は停止しない
	}
}
 8005dd0:	e03a      	b.n	8005e48 <one_sectionVA+0xac>
	}else if(run_mode == MIDDLE){
 8005dd2:	4b1e      	ldr	r3, [pc, #120]	; (8005e4c <one_sectionVA+0xb0>)
 8005dd4:	781b      	ldrb	r3, [r3, #0]
 8005dd6:	b2db      	uxtb	r3, r3
 8005dd8:	2b02      	cmp	r3, #2
 8005dda:	d10e      	bne.n	8005dfa <one_sectionVA+0x5e>
		driveA(accel_hs, SPEED_MIDDLE, speed_max_hs, SEC_HALF_V*2);				//1区画分加速走行。走行後は停止しない
 8005ddc:	4b1c      	ldr	r3, [pc, #112]	; (8005e50 <one_sectionVA+0xb4>)
 8005dde:	881b      	ldrh	r3, [r3, #0]
 8005de0:	b21b      	sxth	r3, r3
 8005de2:	b298      	uxth	r0, r3
 8005de4:	4b1b      	ldr	r3, [pc, #108]	; (8005e54 <one_sectionVA+0xb8>)
 8005de6:	881b      	ldrh	r3, [r3, #0]
 8005de8:	b21b      	sxth	r3, r3
 8005dea:	b29a      	uxth	r2, r3
 8005dec:	f44f 7382 	mov.w	r3, #260	; 0x104
 8005df0:	f44f 7116 	mov.w	r1, #600	; 0x258
 8005df4:	f7ff f8ea 	bl	8004fcc <driveA>
}
 8005df8:	e026      	b.n	8005e48 <one_sectionVA+0xac>
	}else if(run_mode == HIGH){
 8005dfa:	4b14      	ldr	r3, [pc, #80]	; (8005e4c <one_sectionVA+0xb0>)
 8005dfc:	781b      	ldrb	r3, [r3, #0]
 8005dfe:	b2db      	uxtb	r3, r3
 8005e00:	2b03      	cmp	r3, #3
 8005e02:	d10e      	bne.n	8005e22 <one_sectionVA+0x86>
		driveA(accel_hs, SPEED_HIGH, speed_max_hs, SEC_HALF_V*2);				//1区画分加速走行。走行後は停止しない
 8005e04:	4b12      	ldr	r3, [pc, #72]	; (8005e50 <one_sectionVA+0xb4>)
 8005e06:	881b      	ldrh	r3, [r3, #0]
 8005e08:	b21b      	sxth	r3, r3
 8005e0a:	b298      	uxth	r0, r3
 8005e0c:	4b11      	ldr	r3, [pc, #68]	; (8005e54 <one_sectionVA+0xb8>)
 8005e0e:	881b      	ldrh	r3, [r3, #0]
 8005e10:	b21b      	sxth	r3, r3
 8005e12:	b29a      	uxth	r2, r3
 8005e14:	f44f 7382 	mov.w	r3, #260	; 0x104
 8005e18:	f44f 7148 	mov.w	r1, #800	; 0x320
 8005e1c:	f7ff f8d6 	bl	8004fcc <driveA>
}
 8005e20:	e012      	b.n	8005e48 <one_sectionVA+0xac>
	}else if(run_mode == HIGH_HIGH){
 8005e22:	4b0a      	ldr	r3, [pc, #40]	; (8005e4c <one_sectionVA+0xb0>)
 8005e24:	781b      	ldrb	r3, [r3, #0]
 8005e26:	b2db      	uxtb	r3, r3
 8005e28:	2b04      	cmp	r3, #4
 8005e2a:	d10d      	bne.n	8005e48 <one_sectionVA+0xac>
		driveA(accel_hs, SPEED_HIGH_HIGH, speed_max_hs, SEC_HALF_V*2);				//1区画分加速走行。走行後は停止しない
 8005e2c:	4b08      	ldr	r3, [pc, #32]	; (8005e50 <one_sectionVA+0xb4>)
 8005e2e:	881b      	ldrh	r3, [r3, #0]
 8005e30:	b21b      	sxth	r3, r3
 8005e32:	b298      	uxth	r0, r3
 8005e34:	4b07      	ldr	r3, [pc, #28]	; (8005e54 <one_sectionVA+0xb8>)
 8005e36:	881b      	ldrh	r3, [r3, #0]
 8005e38:	b21b      	sxth	r3, r3
 8005e3a:	b29a      	uxth	r2, r3
 8005e3c:	f44f 7382 	mov.w	r3, #260	; 0x104
 8005e40:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8005e44:	f7ff f8c2 	bl	8004fcc <driveA>
}
 8005e48:	bf00      	nop
 8005e4a:	bd80      	pop	{r7, pc}
 8005e4c:	20000456 	.word	0x20000456
 8005e50:	20000454 	.word	0x20000454
 8005e54:	20000f7c 	.word	0x20000f7c

08005e58 <one_sectionVD>:
//one_sectionVD
// 等速で斜め半区画分進む
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void one_sectionVD(void){
 8005e58:	b580      	push	{r7, lr}
 8005e5a:	af00      	add	r7, sp, #0
	full_led_write(BLUE);
 8005e5c:	2003      	movs	r0, #3
 8005e5e:	f00a f801 	bl	800fe64 <full_led_write>
	control_start();
 8005e62:	f7fe ff91 	bl	8004d88 <control_start>
		driveA(-accel_hs, SPEED_MIDDLE, speed_max_hs, SEC_HALF_V*2);			//1区画分減速走行。走行後は停止しない
	}else if(run_mode == HIGH){
		driveA(-accel_hs, SPEED_HIGH, speed_max_hs, SEC_HALF_V*2);				//1区画分減速走行。走行後は停止しない
	}
*/
	if(run_mode == LOW){
 8005e66:	4b2e      	ldr	r3, [pc, #184]	; (8005f20 <one_sectionVD+0xc8>)
 8005e68:	781b      	ldrb	r3, [r3, #0]
 8005e6a:	b2db      	uxtb	r3, r3
 8005e6c:	2b01      	cmp	r3, #1
 8005e6e:	d111      	bne.n	8005e94 <one_sectionVD+0x3c>
		driveD(-accel_hs, SPEED_LOW, speed_max_hs, SEC_HALF_V*2);				//1区画分減速走行。走行後は停止しない
 8005e70:	4b2c      	ldr	r3, [pc, #176]	; (8005f24 <one_sectionVD+0xcc>)
 8005e72:	881b      	ldrh	r3, [r3, #0]
 8005e74:	b21b      	sxth	r3, r3
 8005e76:	b29b      	uxth	r3, r3
 8005e78:	425b      	negs	r3, r3
 8005e7a:	b29b      	uxth	r3, r3
 8005e7c:	b218      	sxth	r0, r3
 8005e7e:	4b2a      	ldr	r3, [pc, #168]	; (8005f28 <one_sectionVD+0xd0>)
 8005e80:	881b      	ldrh	r3, [r3, #0]
 8005e82:	b21b      	sxth	r3, r3
 8005e84:	b29a      	uxth	r2, r3
 8005e86:	f44f 7382 	mov.w	r3, #260	; 0x104
 8005e8a:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8005e8e:	f7ff f917 	bl	80050c0 <driveD>
	}else if(run_mode == HIGH){
		driveD(-accel_hs, SPEED_HIGH, speed_max_hs, SEC_HALF_V*2);				//1区画分減速走行。走行後は停止しない
	}else if(run_mode == HIGH_HIGH){
		driveD(-accel_hs, SPEED_HIGH_HIGH, speed_max_hs, SEC_HALF_V*2);				//1区画分減速走行。走行後は停止しない
	}
}
 8005e92:	e043      	b.n	8005f1c <one_sectionVD+0xc4>
	}else if(run_mode == MIDDLE){
 8005e94:	4b22      	ldr	r3, [pc, #136]	; (8005f20 <one_sectionVD+0xc8>)
 8005e96:	781b      	ldrb	r3, [r3, #0]
 8005e98:	b2db      	uxtb	r3, r3
 8005e9a:	2b02      	cmp	r3, #2
 8005e9c:	d111      	bne.n	8005ec2 <one_sectionVD+0x6a>
		driveD(-accel_hs, SPEED_MIDDLE, speed_max_hs, SEC_HALF_V*2);			//1区画分減速走行。走行後は停止しない
 8005e9e:	4b21      	ldr	r3, [pc, #132]	; (8005f24 <one_sectionVD+0xcc>)
 8005ea0:	881b      	ldrh	r3, [r3, #0]
 8005ea2:	b21b      	sxth	r3, r3
 8005ea4:	b29b      	uxth	r3, r3
 8005ea6:	425b      	negs	r3, r3
 8005ea8:	b29b      	uxth	r3, r3
 8005eaa:	b218      	sxth	r0, r3
 8005eac:	4b1e      	ldr	r3, [pc, #120]	; (8005f28 <one_sectionVD+0xd0>)
 8005eae:	881b      	ldrh	r3, [r3, #0]
 8005eb0:	b21b      	sxth	r3, r3
 8005eb2:	b29a      	uxth	r2, r3
 8005eb4:	f44f 7382 	mov.w	r3, #260	; 0x104
 8005eb8:	f44f 7116 	mov.w	r1, #600	; 0x258
 8005ebc:	f7ff f900 	bl	80050c0 <driveD>
}
 8005ec0:	e02c      	b.n	8005f1c <one_sectionVD+0xc4>
	}else if(run_mode == HIGH){
 8005ec2:	4b17      	ldr	r3, [pc, #92]	; (8005f20 <one_sectionVD+0xc8>)
 8005ec4:	781b      	ldrb	r3, [r3, #0]
 8005ec6:	b2db      	uxtb	r3, r3
 8005ec8:	2b03      	cmp	r3, #3
 8005eca:	d111      	bne.n	8005ef0 <one_sectionVD+0x98>
		driveD(-accel_hs, SPEED_HIGH, speed_max_hs, SEC_HALF_V*2);				//1区画分減速走行。走行後は停止しない
 8005ecc:	4b15      	ldr	r3, [pc, #84]	; (8005f24 <one_sectionVD+0xcc>)
 8005ece:	881b      	ldrh	r3, [r3, #0]
 8005ed0:	b21b      	sxth	r3, r3
 8005ed2:	b29b      	uxth	r3, r3
 8005ed4:	425b      	negs	r3, r3
 8005ed6:	b29b      	uxth	r3, r3
 8005ed8:	b218      	sxth	r0, r3
 8005eda:	4b13      	ldr	r3, [pc, #76]	; (8005f28 <one_sectionVD+0xd0>)
 8005edc:	881b      	ldrh	r3, [r3, #0]
 8005ede:	b21b      	sxth	r3, r3
 8005ee0:	b29a      	uxth	r2, r3
 8005ee2:	f44f 7382 	mov.w	r3, #260	; 0x104
 8005ee6:	f44f 7148 	mov.w	r1, #800	; 0x320
 8005eea:	f7ff f8e9 	bl	80050c0 <driveD>
}
 8005eee:	e015      	b.n	8005f1c <one_sectionVD+0xc4>
	}else if(run_mode == HIGH_HIGH){
 8005ef0:	4b0b      	ldr	r3, [pc, #44]	; (8005f20 <one_sectionVD+0xc8>)
 8005ef2:	781b      	ldrb	r3, [r3, #0]
 8005ef4:	b2db      	uxtb	r3, r3
 8005ef6:	2b04      	cmp	r3, #4
 8005ef8:	d110      	bne.n	8005f1c <one_sectionVD+0xc4>
		driveD(-accel_hs, SPEED_HIGH_HIGH, speed_max_hs, SEC_HALF_V*2);				//1区画分減速走行。走行後は停止しない
 8005efa:	4b0a      	ldr	r3, [pc, #40]	; (8005f24 <one_sectionVD+0xcc>)
 8005efc:	881b      	ldrh	r3, [r3, #0]
 8005efe:	b21b      	sxth	r3, r3
 8005f00:	b29b      	uxth	r3, r3
 8005f02:	425b      	negs	r3, r3
 8005f04:	b29b      	uxth	r3, r3
 8005f06:	b218      	sxth	r0, r3
 8005f08:	4b07      	ldr	r3, [pc, #28]	; (8005f28 <one_sectionVD+0xd0>)
 8005f0a:	881b      	ldrh	r3, [r3, #0]
 8005f0c:	b21b      	sxth	r3, r3
 8005f0e:	b29a      	uxth	r2, r3
 8005f10:	f44f 7382 	mov.w	r3, #260	; 0x104
 8005f14:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8005f18:	f7ff f8d2 	bl	80050c0 <driveD>
}
 8005f1c:	bf00      	nop
 8005f1e:	bd80      	pop	{r7, pc}
 8005f20:	20000456 	.word	0x20000456
 8005f24:	20000454 	.word	0x20000454
 8005f28:	20000f7c 	.word	0x20000f7c

08005f2c <one_sectionU>:
//one_sectionU
// 等速で1区画分進む
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void one_sectionU(void){
 8005f2c:	b580      	push	{r7, lr}
 8005f2e:	af00      	add	r7, sp, #0
	full_led_write(WHITE);
 8005f30:	2007      	movs	r0, #7
 8005f32:	f009 ff97 	bl	800fe64 <full_led_write>
	control_start();
 8005f36:	f7fe ff27 	bl	8004d88 <control_start>
	driveU(SEC_HALF*2);													//1区画分等速走行。走行後は停止しない
 8005f3a:	20b6      	movs	r0, #182	; 0xb6
 8005f3c:	f7ff f99a 	bl	8005274 <driveU>
	if(!MF.FLAG.SCND)get_wall_info();								//壁情報を取得
 8005f40:	4b05      	ldr	r3, [pc, #20]	; (8005f58 <one_sectionU+0x2c>)
 8005f42:	881b      	ldrh	r3, [r3, #0]
 8005f44:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8005f48:	b2db      	uxtb	r3, r3
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d101      	bne.n	8005f52 <one_sectionU+0x26>
 8005f4e:	f009 ff15 	bl	800fd7c <get_wall_info>
}
 8005f52:	bf00      	nop
 8005f54:	bd80      	pop	{r7, pc}
 8005f56:	bf00      	nop
 8005f58:	20000f68 	.word	0x20000f68
 8005f5c:	00000000 	.word	0x00000000

08005f60 <rotate_R90>:
//rotate_R90
// 右に90度回転する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void rotate_R90(void){
 8005f60:	b598      	push	{r3, r4, r7, lr}
 8005f62:	af00      	add	r7, sp, #0
	target_omega_z = 800;
 8005f64:	4b56      	ldr	r3, [pc, #344]	; (80060c0 <rotate_R90+0x160>)
 8005f66:	4a57      	ldr	r2, [pc, #348]	; (80060c4 <rotate_R90+0x164>)
 8005f68:	601a      	str	r2, [r3, #0]
	accel_l = 3000;
 8005f6a:	4b57      	ldr	r3, [pc, #348]	; (80060c8 <rotate_R90+0x168>)
 8005f6c:	4a57      	ldr	r2, [pc, #348]	; (80060cc <rotate_R90+0x16c>)
 8005f6e:	601a      	str	r2, [r3, #0]
	accel_r = -3000;
 8005f70:	4b57      	ldr	r3, [pc, #348]	; (80060d0 <rotate_R90+0x170>)
 8005f72:	4a58      	ldr	r2, [pc, #352]	; (80060d4 <rotate_R90+0x174>)
 8005f74:	601a      	str	r2, [r3, #0]
	speed_max_l = target_omega_z/180*M_PI * TREAD/2;
 8005f76:	4b52      	ldr	r3, [pc, #328]	; (80060c0 <rotate_R90+0x160>)
 8005f78:	edd3 7a00 	vldr	s15, [r3]
 8005f7c:	ed9f 7a56 	vldr	s14, [pc, #344]	; 80060d8 <rotate_R90+0x178>
 8005f80:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8005f84:	ee16 0a90 	vmov	r0, s13
 8005f88:	f7fa fad6 	bl	8000538 <__aeabi_f2d>
 8005f8c:	a34a      	add	r3, pc, #296	; (adr r3, 80060b8 <rotate_R90+0x158>)
 8005f8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f92:	f7fa fb29 	bl	80005e8 <__aeabi_dmul>
 8005f96:	4603      	mov	r3, r0
 8005f98:	460c      	mov	r4, r1
 8005f9a:	4618      	mov	r0, r3
 8005f9c:	4621      	mov	r1, r4
 8005f9e:	f04f 0200 	mov.w	r2, #0
 8005fa2:	4b4e      	ldr	r3, [pc, #312]	; (80060dc <rotate_R90+0x17c>)
 8005fa4:	f7fa fb20 	bl	80005e8 <__aeabi_dmul>
 8005fa8:	4603      	mov	r3, r0
 8005faa:	460c      	mov	r4, r1
 8005fac:	4618      	mov	r0, r3
 8005fae:	4621      	mov	r1, r4
 8005fb0:	f04f 0200 	mov.w	r2, #0
 8005fb4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005fb8:	f7fa fc40 	bl	800083c <__aeabi_ddiv>
 8005fbc:	4603      	mov	r3, r0
 8005fbe:	460c      	mov	r4, r1
 8005fc0:	4618      	mov	r0, r3
 8005fc2:	4621      	mov	r1, r4
 8005fc4:	f7fa fde8 	bl	8000b98 <__aeabi_d2f>
 8005fc8:	4602      	mov	r2, r0
 8005fca:	4b45      	ldr	r3, [pc, #276]	; (80060e0 <rotate_R90+0x180>)
 8005fcc:	601a      	str	r2, [r3, #0]
	speed_min_r = -1*target_omega_z/180*M_PI * TREAD/2;
 8005fce:	4b3c      	ldr	r3, [pc, #240]	; (80060c0 <rotate_R90+0x160>)
 8005fd0:	edd3 7a00 	vldr	s15, [r3]
 8005fd4:	eef1 7a67 	vneg.f32	s15, s15
 8005fd8:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 80060d8 <rotate_R90+0x178>
 8005fdc:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8005fe0:	ee16 0a90 	vmov	r0, s13
 8005fe4:	f7fa faa8 	bl	8000538 <__aeabi_f2d>
 8005fe8:	a333      	add	r3, pc, #204	; (adr r3, 80060b8 <rotate_R90+0x158>)
 8005fea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fee:	f7fa fafb 	bl	80005e8 <__aeabi_dmul>
 8005ff2:	4603      	mov	r3, r0
 8005ff4:	460c      	mov	r4, r1
 8005ff6:	4618      	mov	r0, r3
 8005ff8:	4621      	mov	r1, r4
 8005ffa:	f04f 0200 	mov.w	r2, #0
 8005ffe:	4b37      	ldr	r3, [pc, #220]	; (80060dc <rotate_R90+0x17c>)
 8006000:	f7fa faf2 	bl	80005e8 <__aeabi_dmul>
 8006004:	4603      	mov	r3, r0
 8006006:	460c      	mov	r4, r1
 8006008:	4618      	mov	r0, r3
 800600a:	4621      	mov	r1, r4
 800600c:	f04f 0200 	mov.w	r2, #0
 8006010:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006014:	f7fa fc12 	bl	800083c <__aeabi_ddiv>
 8006018:	4603      	mov	r3, r0
 800601a:	460c      	mov	r4, r1
 800601c:	4618      	mov	r0, r3
 800601e:	4621      	mov	r1, r4
 8006020:	f7fa fdba 	bl	8000b98 <__aeabi_d2f>
 8006024:	4602      	mov	r2, r0
 8006026:	4b2f      	ldr	r3, [pc, #188]	; (80060e4 <rotate_R90+0x184>)
 8006028:	601a      	str	r2, [r3, #0]

	drive_start();											//走行開始
 800602a:	f7fe fe55 	bl	8004cd8 <drive_start>
	control_stop();
 800602e:	f7fe febf 	bl	8004db0 <control_stop>
	while(degree_z > target_degree_z-80);
 8006032:	bf00      	nop
 8006034:	4b2c      	ldr	r3, [pc, #176]	; (80060e8 <rotate_R90+0x188>)
 8006036:	edd3 7a00 	vldr	s15, [r3]
 800603a:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 80060ec <rotate_R90+0x18c>
 800603e:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8006042:	4b2b      	ldr	r3, [pc, #172]	; (80060f0 <rotate_R90+0x190>)
 8006044:	edd3 7a00 	vldr	s15, [r3]
 8006048:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800604c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006050:	d4f0      	bmi.n	8006034 <rotate_R90+0xd4>

	accel_l = -30000;
 8006052:	4b1d      	ldr	r3, [pc, #116]	; (80060c8 <rotate_R90+0x168>)
 8006054:	4a27      	ldr	r2, [pc, #156]	; (80060f4 <rotate_R90+0x194>)
 8006056:	601a      	str	r2, [r3, #0]
	accel_r = 30000;
 8006058:	4b1d      	ldr	r3, [pc, #116]	; (80060d0 <rotate_R90+0x170>)
 800605a:	4a27      	ldr	r2, [pc, #156]	; (80060f8 <rotate_R90+0x198>)
 800605c:	601a      	str	r2, [r3, #0]
	speed_min_l = 100;
 800605e:	4b27      	ldr	r3, [pc, #156]	; (80060fc <rotate_R90+0x19c>)
 8006060:	4a27      	ldr	r2, [pc, #156]	; (8006100 <rotate_R90+0x1a0>)
 8006062:	601a      	str	r2, [r3, #0]
	speed_max_r = -100;
 8006064:	4b27      	ldr	r3, [pc, #156]	; (8006104 <rotate_R90+0x1a4>)
 8006066:	4a28      	ldr	r2, [pc, #160]	; (8006108 <rotate_R90+0x1a8>)
 8006068:	601a      	str	r2, [r3, #0]

	while(degree_z > target_degree_z-90);
 800606a:	bf00      	nop
 800606c:	4b1e      	ldr	r3, [pc, #120]	; (80060e8 <rotate_R90+0x188>)
 800606e:	edd3 7a00 	vldr	s15, [r3]
 8006072:	ed9f 7a26 	vldr	s14, [pc, #152]	; 800610c <rotate_R90+0x1ac>
 8006076:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800607a:	4b1d      	ldr	r3, [pc, #116]	; (80060f0 <rotate_R90+0x190>)
 800607c:	edd3 7a00 	vldr	s15, [r3]
 8006080:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006084:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006088:	d4f0      	bmi.n	800606c <rotate_R90+0x10c>

	if(!MF.FLAG.XDIR){
 800608a:	4b21      	ldr	r3, [pc, #132]	; (8006110 <rotate_R90+0x1b0>)
 800608c:	881b      	ldrh	r3, [r3, #0]
 800608e:	f3c3 3300 	ubfx	r3, r3, #12, #1
 8006092:	b2db      	uxtb	r3, r3
 8006094:	2b00      	cmp	r3, #0
 8006096:	d104      	bne.n	80060a2 <rotate_R90+0x142>
		turn_dir(DIR_TURN_R90, 1);										//マイクロマウス内部位置情報でも左回転処理&目標角度左90度
 8006098:	2101      	movs	r1, #1
 800609a:	2001      	movs	r0, #1
 800609c:	f008 f874 	bl	800e188 <turn_dir>
 80060a0:	e003      	b.n	80060aa <rotate_R90+0x14a>
	}else{
		turn_dir(DIR_TURN_R90_8, 3);									//マイクロマウス内部位置情報でも左回転処理&目標角度左90度
 80060a2:	2103      	movs	r1, #3
 80060a4:	2002      	movs	r0, #2
 80060a6:	f008 f86f 	bl	800e188 <turn_dir>
	}
	drive_stop();
 80060aa:	f7fe fe45 	bl	8004d38 <drive_stop>
}
 80060ae:	bf00      	nop
 80060b0:	bd98      	pop	{r3, r4, r7, pc}
 80060b2:	bf00      	nop
 80060b4:	f3af 8000 	nop.w
 80060b8:	54442d18 	.word	0x54442d18
 80060bc:	400921fb 	.word	0x400921fb
 80060c0:	200001a8 	.word	0x200001a8
 80060c4:	44480000 	.word	0x44480000
 80060c8:	20000d58 	.word	0x20000d58
 80060cc:	453b8000 	.word	0x453b8000
 80060d0:	20000ae4 	.word	0x20000ae4
 80060d4:	c53b8000 	.word	0xc53b8000
 80060d8:	43340000 	.word	0x43340000
 80060dc:	40508000 	.word	0x40508000
 80060e0:	2000077c 	.word	0x2000077c
 80060e4:	20000f6c 	.word	0x20000f6c
 80060e8:	20000bf8 	.word	0x20000bf8
 80060ec:	42a00000 	.word	0x42a00000
 80060f0:	20000b5c 	.word	0x20000b5c
 80060f4:	c6ea6000 	.word	0xc6ea6000
 80060f8:	46ea6000 	.word	0x46ea6000
 80060fc:	20000b54 	.word	0x20000b54
 8006100:	42c80000 	.word	0x42c80000
 8006104:	200001a4 	.word	0x200001a4
 8006108:	c2c80000 	.word	0xc2c80000
 800610c:	42b40000 	.word	0x42b40000
 8006110:	20000f68 	.word	0x20000f68
 8006114:	00000000 	.word	0x00000000

08006118 <rotate_L90>:
//rotate_L90
// 左に90度回転する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void rotate_L90(void){
 8006118:	b598      	push	{r3, r4, r7, lr}
 800611a:	af00      	add	r7, sp, #0
	target_omega_z = 800;
 800611c:	4b56      	ldr	r3, [pc, #344]	; (8006278 <rotate_L90+0x160>)
 800611e:	4a57      	ldr	r2, [pc, #348]	; (800627c <rotate_L90+0x164>)
 8006120:	601a      	str	r2, [r3, #0]
	accel_l = -3000;
 8006122:	4b57      	ldr	r3, [pc, #348]	; (8006280 <rotate_L90+0x168>)
 8006124:	4a57      	ldr	r2, [pc, #348]	; (8006284 <rotate_L90+0x16c>)
 8006126:	601a      	str	r2, [r3, #0]
	accel_r = 3000;
 8006128:	4b57      	ldr	r3, [pc, #348]	; (8006288 <rotate_L90+0x170>)
 800612a:	4a58      	ldr	r2, [pc, #352]	; (800628c <rotate_L90+0x174>)
 800612c:	601a      	str	r2, [r3, #0]
	speed_min_l = -1*target_omega_z/180*M_PI * TREAD/2;
 800612e:	4b52      	ldr	r3, [pc, #328]	; (8006278 <rotate_L90+0x160>)
 8006130:	edd3 7a00 	vldr	s15, [r3]
 8006134:	eef1 7a67 	vneg.f32	s15, s15
 8006138:	ed9f 7a55 	vldr	s14, [pc, #340]	; 8006290 <rotate_L90+0x178>
 800613c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8006140:	ee16 0a90 	vmov	r0, s13
 8006144:	f7fa f9f8 	bl	8000538 <__aeabi_f2d>
 8006148:	a349      	add	r3, pc, #292	; (adr r3, 8006270 <rotate_L90+0x158>)
 800614a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800614e:	f7fa fa4b 	bl	80005e8 <__aeabi_dmul>
 8006152:	4603      	mov	r3, r0
 8006154:	460c      	mov	r4, r1
 8006156:	4618      	mov	r0, r3
 8006158:	4621      	mov	r1, r4
 800615a:	f04f 0200 	mov.w	r2, #0
 800615e:	4b4d      	ldr	r3, [pc, #308]	; (8006294 <rotate_L90+0x17c>)
 8006160:	f7fa fa42 	bl	80005e8 <__aeabi_dmul>
 8006164:	4603      	mov	r3, r0
 8006166:	460c      	mov	r4, r1
 8006168:	4618      	mov	r0, r3
 800616a:	4621      	mov	r1, r4
 800616c:	f04f 0200 	mov.w	r2, #0
 8006170:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006174:	f7fa fb62 	bl	800083c <__aeabi_ddiv>
 8006178:	4603      	mov	r3, r0
 800617a:	460c      	mov	r4, r1
 800617c:	4618      	mov	r0, r3
 800617e:	4621      	mov	r1, r4
 8006180:	f7fa fd0a 	bl	8000b98 <__aeabi_d2f>
 8006184:	4602      	mov	r2, r0
 8006186:	4b44      	ldr	r3, [pc, #272]	; (8006298 <rotate_L90+0x180>)
 8006188:	601a      	str	r2, [r3, #0]
	speed_max_r = target_omega_z/180*M_PI * TREAD/2;
 800618a:	4b3b      	ldr	r3, [pc, #236]	; (8006278 <rotate_L90+0x160>)
 800618c:	edd3 7a00 	vldr	s15, [r3]
 8006190:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 8006290 <rotate_L90+0x178>
 8006194:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8006198:	ee16 0a90 	vmov	r0, s13
 800619c:	f7fa f9cc 	bl	8000538 <__aeabi_f2d>
 80061a0:	a333      	add	r3, pc, #204	; (adr r3, 8006270 <rotate_L90+0x158>)
 80061a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061a6:	f7fa fa1f 	bl	80005e8 <__aeabi_dmul>
 80061aa:	4603      	mov	r3, r0
 80061ac:	460c      	mov	r4, r1
 80061ae:	4618      	mov	r0, r3
 80061b0:	4621      	mov	r1, r4
 80061b2:	f04f 0200 	mov.w	r2, #0
 80061b6:	4b37      	ldr	r3, [pc, #220]	; (8006294 <rotate_L90+0x17c>)
 80061b8:	f7fa fa16 	bl	80005e8 <__aeabi_dmul>
 80061bc:	4603      	mov	r3, r0
 80061be:	460c      	mov	r4, r1
 80061c0:	4618      	mov	r0, r3
 80061c2:	4621      	mov	r1, r4
 80061c4:	f04f 0200 	mov.w	r2, #0
 80061c8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80061cc:	f7fa fb36 	bl	800083c <__aeabi_ddiv>
 80061d0:	4603      	mov	r3, r0
 80061d2:	460c      	mov	r4, r1
 80061d4:	4618      	mov	r0, r3
 80061d6:	4621      	mov	r1, r4
 80061d8:	f7fa fcde 	bl	8000b98 <__aeabi_d2f>
 80061dc:	4602      	mov	r2, r0
 80061de:	4b2f      	ldr	r3, [pc, #188]	; (800629c <rotate_L90+0x184>)
 80061e0:	601a      	str	r2, [r3, #0]

	drive_start();											//走行開始
 80061e2:	f7fe fd79 	bl	8004cd8 <drive_start>
	control_stop();
 80061e6:	f7fe fde3 	bl	8004db0 <control_stop>
	while(degree_z < target_degree_z+80);
 80061ea:	bf00      	nop
 80061ec:	4b2c      	ldr	r3, [pc, #176]	; (80062a0 <rotate_L90+0x188>)
 80061ee:	edd3 7a00 	vldr	s15, [r3]
 80061f2:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 80062a4 <rotate_L90+0x18c>
 80061f6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80061fa:	4b2b      	ldr	r3, [pc, #172]	; (80062a8 <rotate_L90+0x190>)
 80061fc:	edd3 7a00 	vldr	s15, [r3]
 8006200:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006204:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006208:	dcf0      	bgt.n	80061ec <rotate_L90+0xd4>

	accel_l = 30000;
 800620a:	4b1d      	ldr	r3, [pc, #116]	; (8006280 <rotate_L90+0x168>)
 800620c:	4a27      	ldr	r2, [pc, #156]	; (80062ac <rotate_L90+0x194>)
 800620e:	601a      	str	r2, [r3, #0]
	accel_r = -30000;
 8006210:	4b1d      	ldr	r3, [pc, #116]	; (8006288 <rotate_L90+0x170>)
 8006212:	4a27      	ldr	r2, [pc, #156]	; (80062b0 <rotate_L90+0x198>)
 8006214:	601a      	str	r2, [r3, #0]
	speed_max_l = -100;
 8006216:	4b27      	ldr	r3, [pc, #156]	; (80062b4 <rotate_L90+0x19c>)
 8006218:	4a27      	ldr	r2, [pc, #156]	; (80062b8 <rotate_L90+0x1a0>)
 800621a:	601a      	str	r2, [r3, #0]
	speed_min_r = 100;
 800621c:	4b27      	ldr	r3, [pc, #156]	; (80062bc <rotate_L90+0x1a4>)
 800621e:	4a28      	ldr	r2, [pc, #160]	; (80062c0 <rotate_L90+0x1a8>)
 8006220:	601a      	str	r2, [r3, #0]

	while(degree_z < target_degree_z+90);
 8006222:	bf00      	nop
 8006224:	4b1e      	ldr	r3, [pc, #120]	; (80062a0 <rotate_L90+0x188>)
 8006226:	edd3 7a00 	vldr	s15, [r3]
 800622a:	ed9f 7a26 	vldr	s14, [pc, #152]	; 80062c4 <rotate_L90+0x1ac>
 800622e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006232:	4b1d      	ldr	r3, [pc, #116]	; (80062a8 <rotate_L90+0x190>)
 8006234:	edd3 7a00 	vldr	s15, [r3]
 8006238:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800623c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006240:	dcf0      	bgt.n	8006224 <rotate_L90+0x10c>

	if(!MF.FLAG.XDIR){
 8006242:	4b21      	ldr	r3, [pc, #132]	; (80062c8 <rotate_L90+0x1b0>)
 8006244:	881b      	ldrh	r3, [r3, #0]
 8006246:	f3c3 3300 	ubfx	r3, r3, #12, #1
 800624a:	b2db      	uxtb	r3, r3
 800624c:	2b00      	cmp	r3, #0
 800624e:	d104      	bne.n	800625a <rotate_L90+0x142>
		turn_dir(DIR_TURN_L90, 1);										//マイクロマウス内部位置情報でも右回転処理&目標角度右90度
 8006250:	2101      	movs	r1, #1
 8006252:	20ff      	movs	r0, #255	; 0xff
 8006254:	f007 ff98 	bl	800e188 <turn_dir>
 8006258:	e003      	b.n	8006262 <rotate_L90+0x14a>
	}else{
		turn_dir(DIR_TURN_L90_8, 3);									//マイクロマウス内部位置情報でも右回転処理&目標角度右90度
 800625a:	2103      	movs	r1, #3
 800625c:	20fe      	movs	r0, #254	; 0xfe
 800625e:	f007 ff93 	bl	800e188 <turn_dir>
	}
	drive_stop();
 8006262:	f7fe fd69 	bl	8004d38 <drive_stop>
}
 8006266:	bf00      	nop
 8006268:	bd98      	pop	{r3, r4, r7, pc}
 800626a:	bf00      	nop
 800626c:	f3af 8000 	nop.w
 8006270:	54442d18 	.word	0x54442d18
 8006274:	400921fb 	.word	0x400921fb
 8006278:	200001a8 	.word	0x200001a8
 800627c:	44480000 	.word	0x44480000
 8006280:	20000d58 	.word	0x20000d58
 8006284:	c53b8000 	.word	0xc53b8000
 8006288:	20000ae4 	.word	0x20000ae4
 800628c:	453b8000 	.word	0x453b8000
 8006290:	43340000 	.word	0x43340000
 8006294:	40508000 	.word	0x40508000
 8006298:	20000b54 	.word	0x20000b54
 800629c:	200001a4 	.word	0x200001a4
 80062a0:	20000bf8 	.word	0x20000bf8
 80062a4:	42a00000 	.word	0x42a00000
 80062a8:	20000b5c 	.word	0x20000b5c
 80062ac:	46ea6000 	.word	0x46ea6000
 80062b0:	c6ea6000 	.word	0xc6ea6000
 80062b4:	2000077c 	.word	0x2000077c
 80062b8:	c2c80000 	.word	0xc2c80000
 80062bc:	20000f6c 	.word	0x20000f6c
 80062c0:	42c80000 	.word	0x42c80000
 80062c4:	42b40000 	.word	0x42b40000
 80062c8:	20000f68 	.word	0x20000f68
 80062cc:	00000000 	.word	0x00000000

080062d0 <rotate_180>:
//rotate_180
// 180度回転する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void rotate_180(void){
 80062d0:	b598      	push	{r3, r4, r7, lr}
 80062d2:	af00      	add	r7, sp, #0

	full_led_write(GREEN);
 80062d4:	2002      	movs	r0, #2
 80062d6:	f009 fdc5 	bl	800fe64 <full_led_write>
	target_omega_z = 800;
 80062da:	4b55      	ldr	r3, [pc, #340]	; (8006430 <rotate_180+0x160>)
 80062dc:	4a55      	ldr	r2, [pc, #340]	; (8006434 <rotate_180+0x164>)
 80062de:	601a      	str	r2, [r3, #0]
	accel_l = 3000;
 80062e0:	4b55      	ldr	r3, [pc, #340]	; (8006438 <rotate_180+0x168>)
 80062e2:	4a56      	ldr	r2, [pc, #344]	; (800643c <rotate_180+0x16c>)
 80062e4:	601a      	str	r2, [r3, #0]
	accel_r = -3000;
 80062e6:	4b56      	ldr	r3, [pc, #344]	; (8006440 <rotate_180+0x170>)
 80062e8:	4a56      	ldr	r2, [pc, #344]	; (8006444 <rotate_180+0x174>)
 80062ea:	601a      	str	r2, [r3, #0]
	speed_max_l = target_omega_z/180*M_PI * TREAD/2;
 80062ec:	4b50      	ldr	r3, [pc, #320]	; (8006430 <rotate_180+0x160>)
 80062ee:	edd3 7a00 	vldr	s15, [r3]
 80062f2:	ed9f 7a55 	vldr	s14, [pc, #340]	; 8006448 <rotate_180+0x178>
 80062f6:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80062fa:	ee16 0a90 	vmov	r0, s13
 80062fe:	f7fa f91b 	bl	8000538 <__aeabi_f2d>
 8006302:	a349      	add	r3, pc, #292	; (adr r3, 8006428 <rotate_180+0x158>)
 8006304:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006308:	f7fa f96e 	bl	80005e8 <__aeabi_dmul>
 800630c:	4603      	mov	r3, r0
 800630e:	460c      	mov	r4, r1
 8006310:	4618      	mov	r0, r3
 8006312:	4621      	mov	r1, r4
 8006314:	f04f 0200 	mov.w	r2, #0
 8006318:	4b4c      	ldr	r3, [pc, #304]	; (800644c <rotate_180+0x17c>)
 800631a:	f7fa f965 	bl	80005e8 <__aeabi_dmul>
 800631e:	4603      	mov	r3, r0
 8006320:	460c      	mov	r4, r1
 8006322:	4618      	mov	r0, r3
 8006324:	4621      	mov	r1, r4
 8006326:	f04f 0200 	mov.w	r2, #0
 800632a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800632e:	f7fa fa85 	bl	800083c <__aeabi_ddiv>
 8006332:	4603      	mov	r3, r0
 8006334:	460c      	mov	r4, r1
 8006336:	4618      	mov	r0, r3
 8006338:	4621      	mov	r1, r4
 800633a:	f7fa fc2d 	bl	8000b98 <__aeabi_d2f>
 800633e:	4602      	mov	r2, r0
 8006340:	4b43      	ldr	r3, [pc, #268]	; (8006450 <rotate_180+0x180>)
 8006342:	601a      	str	r2, [r3, #0]
	speed_min_r = -1*target_omega_z/180*M_PI * TREAD/2;
 8006344:	4b3a      	ldr	r3, [pc, #232]	; (8006430 <rotate_180+0x160>)
 8006346:	edd3 7a00 	vldr	s15, [r3]
 800634a:	eef1 7a67 	vneg.f32	s15, s15
 800634e:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 8006448 <rotate_180+0x178>
 8006352:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8006356:	ee16 0a90 	vmov	r0, s13
 800635a:	f7fa f8ed 	bl	8000538 <__aeabi_f2d>
 800635e:	a332      	add	r3, pc, #200	; (adr r3, 8006428 <rotate_180+0x158>)
 8006360:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006364:	f7fa f940 	bl	80005e8 <__aeabi_dmul>
 8006368:	4603      	mov	r3, r0
 800636a:	460c      	mov	r4, r1
 800636c:	4618      	mov	r0, r3
 800636e:	4621      	mov	r1, r4
 8006370:	f04f 0200 	mov.w	r2, #0
 8006374:	4b35      	ldr	r3, [pc, #212]	; (800644c <rotate_180+0x17c>)
 8006376:	f7fa f937 	bl	80005e8 <__aeabi_dmul>
 800637a:	4603      	mov	r3, r0
 800637c:	460c      	mov	r4, r1
 800637e:	4618      	mov	r0, r3
 8006380:	4621      	mov	r1, r4
 8006382:	f04f 0200 	mov.w	r2, #0
 8006386:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800638a:	f7fa fa57 	bl	800083c <__aeabi_ddiv>
 800638e:	4603      	mov	r3, r0
 8006390:	460c      	mov	r4, r1
 8006392:	4618      	mov	r0, r3
 8006394:	4621      	mov	r1, r4
 8006396:	f7fa fbff 	bl	8000b98 <__aeabi_d2f>
 800639a:	4602      	mov	r2, r0
 800639c:	4b2d      	ldr	r3, [pc, #180]	; (8006454 <rotate_180+0x184>)
 800639e:	601a      	str	r2, [r3, #0]

	drive_start();											//走行開始
 80063a0:	f7fe fc9a 	bl	8004cd8 <drive_start>
	control_stop();
 80063a4:	f7fe fd04 	bl	8004db0 <control_stop>
	while(degree_z > target_degree_z-170);
 80063a8:	bf00      	nop
 80063aa:	4b2b      	ldr	r3, [pc, #172]	; (8006458 <rotate_180+0x188>)
 80063ac:	edd3 7a00 	vldr	s15, [r3]
 80063b0:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 800645c <rotate_180+0x18c>
 80063b4:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80063b8:	4b29      	ldr	r3, [pc, #164]	; (8006460 <rotate_180+0x190>)
 80063ba:	edd3 7a00 	vldr	s15, [r3]
 80063be:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80063c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80063c6:	d4f0      	bmi.n	80063aa <rotate_180+0xda>

	accel_l = -30000;
 80063c8:	4b1b      	ldr	r3, [pc, #108]	; (8006438 <rotate_180+0x168>)
 80063ca:	4a26      	ldr	r2, [pc, #152]	; (8006464 <rotate_180+0x194>)
 80063cc:	601a      	str	r2, [r3, #0]
	accel_r = 30000;
 80063ce:	4b1c      	ldr	r3, [pc, #112]	; (8006440 <rotate_180+0x170>)
 80063d0:	4a25      	ldr	r2, [pc, #148]	; (8006468 <rotate_180+0x198>)
 80063d2:	601a      	str	r2, [r3, #0]
	speed_min_l = 100;
 80063d4:	4b25      	ldr	r3, [pc, #148]	; (800646c <rotate_180+0x19c>)
 80063d6:	4a26      	ldr	r2, [pc, #152]	; (8006470 <rotate_180+0x1a0>)
 80063d8:	601a      	str	r2, [r3, #0]
	speed_max_r = -100;
 80063da:	4b26      	ldr	r3, [pc, #152]	; (8006474 <rotate_180+0x1a4>)
 80063dc:	4a26      	ldr	r2, [pc, #152]	; (8006478 <rotate_180+0x1a8>)
 80063de:	601a      	str	r2, [r3, #0]

	while(degree_z > target_degree_z-180);
 80063e0:	bf00      	nop
 80063e2:	4b1d      	ldr	r3, [pc, #116]	; (8006458 <rotate_180+0x188>)
 80063e4:	edd3 7a00 	vldr	s15, [r3]
 80063e8:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8006448 <rotate_180+0x178>
 80063ec:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80063f0:	4b1b      	ldr	r3, [pc, #108]	; (8006460 <rotate_180+0x190>)
 80063f2:	edd3 7a00 	vldr	s15, [r3]
 80063f6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80063fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80063fe:	d4f0      	bmi.n	80063e2 <rotate_180+0x112>

	if(!MF.FLAG.XDIR){
 8006400:	4b1e      	ldr	r3, [pc, #120]	; (800647c <rotate_180+0x1ac>)
 8006402:	881b      	ldrh	r3, [r3, #0]
 8006404:	f3c3 3300 	ubfx	r3, r3, #12, #1
 8006408:	b2db      	uxtb	r3, r3
 800640a:	2b00      	cmp	r3, #0
 800640c:	d104      	bne.n	8006418 <rotate_180+0x148>
		turn_dir(DIR_TURN_180, 1);										//マイクロマウス内部位置情報でも180度回転処理&目標角度左180度
 800640e:	2101      	movs	r1, #1
 8006410:	2002      	movs	r0, #2
 8006412:	f007 feb9 	bl	800e188 <turn_dir>
 8006416:	e003      	b.n	8006420 <rotate_180+0x150>
	}else{
		turn_dir(DIR_TURN_R180_8, 3);									//マイクロマウス内部位置情報でも180度回転処理&目標角度左180度
 8006418:	2103      	movs	r1, #3
 800641a:	2004      	movs	r0, #4
 800641c:	f007 feb4 	bl	800e188 <turn_dir>
	}
	drive_stop();
 8006420:	f7fe fc8a 	bl	8004d38 <drive_stop>

}
 8006424:	bf00      	nop
 8006426:	bd98      	pop	{r3, r4, r7, pc}
 8006428:	54442d18 	.word	0x54442d18
 800642c:	400921fb 	.word	0x400921fb
 8006430:	200001a8 	.word	0x200001a8
 8006434:	44480000 	.word	0x44480000
 8006438:	20000d58 	.word	0x20000d58
 800643c:	453b8000 	.word	0x453b8000
 8006440:	20000ae4 	.word	0x20000ae4
 8006444:	c53b8000 	.word	0xc53b8000
 8006448:	43340000 	.word	0x43340000
 800644c:	40508000 	.word	0x40508000
 8006450:	2000077c 	.word	0x2000077c
 8006454:	20000f6c 	.word	0x20000f6c
 8006458:	20000bf8 	.word	0x20000bf8
 800645c:	432a0000 	.word	0x432a0000
 8006460:	20000b5c 	.word	0x20000b5c
 8006464:	c6ea6000 	.word	0xc6ea6000
 8006468:	46ea6000 	.word	0x46ea6000
 800646c:	20000b54 	.word	0x20000b54
 8006470:	42c80000 	.word	0x42c80000
 8006474:	200001a4 	.word	0x200001a4
 8006478:	c2c80000 	.word	0xc2c80000
 800647c:	20000f68 	.word	0x20000f68

08006480 <slalom_R90>:
//slalom_R90
// スラロームで左に90度回転する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void slalom_R90(void){
 8006480:	b580      	push	{r7, lr}
 8006482:	b082      	sub	sp, #8
 8006484:	af02      	add	r7, sp, #8
	full_led_write(PURPLE);
 8006486:	2005      	movs	r0, #5
 8006488:	f009 fcec 	bl	800fe64 <full_led_write>
	if(run_mode == LOW){
 800648c:	4b65      	ldr	r3, [pc, #404]	; (8006624 <slalom_R90+0x1a4>)
 800648e:	781b      	ldrb	r3, [r3, #0]
 8006490:	b2db      	uxtb	r3, r3
 8006492:	2b01      	cmp	r3, #1
 8006494:	d12a      	bne.n	80064ec <slalom_R90+0x6c>
		slalomF(10000, SPEED_LOW, SLALOM_OFFSET_F, SLALOM_WALL_FL, SLALOM_WALL_FR);
 8006496:	23fa      	movs	r3, #250	; 0xfa
 8006498:	9300      	str	r3, [sp, #0]
 800649a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800649e:	2212      	movs	r2, #18
 80064a0:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80064a4:	f242 7010 	movw	r0, #10000	; 0x2710
 80064a8:	f7fe ffe2 	bl	8005470 <slalomF>
		slalomR(-SLALOM_DEGACCEL, -SLALOM_OMEGA, -90, SPEED_LOW);
 80064ac:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80064b0:	f06f 0259 	mvn.w	r2, #89	; 0x59
 80064b4:	495c      	ldr	r1, [pc, #368]	; (8006628 <slalom_R90+0x1a8>)
 80064b6:	485d      	ldr	r0, [pc, #372]	; (800662c <slalom_R90+0x1ac>)
 80064b8:	f7ff f856 	bl	8005568 <slalomR>

		if(!MF.FLAG.XDIR){
 80064bc:	4b5c      	ldr	r3, [pc, #368]	; (8006630 <slalom_R90+0x1b0>)
 80064be:	881b      	ldrh	r3, [r3, #0]
 80064c0:	f3c3 3300 	ubfx	r3, r3, #12, #1
 80064c4:	b2db      	uxtb	r3, r3
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d104      	bne.n	80064d4 <slalom_R90+0x54>
			turn_dir(DIR_TURN_R90, 1);									//マイクロマウス内部位置情報でも左回転処理&目標角度左90度
 80064ca:	2101      	movs	r1, #1
 80064cc:	2001      	movs	r0, #1
 80064ce:	f007 fe5b 	bl	800e188 <turn_dir>
 80064d2:	e003      	b.n	80064dc <slalom_R90+0x5c>
		}else{
			turn_dir(DIR_TURN_R90_8, 3);								//マイクロマウス内部位置情報でも左回転処理&目標角度左90度
 80064d4:	2103      	movs	r1, #3
 80064d6:	2002      	movs	r0, #2
 80064d8:	f007 fe56 	bl	800e188 <turn_dir>
		}
		slalomB(10000, SPEED_LOW, SLALOM_OFFSET_B);
 80064dc:	2219      	movs	r2, #25
 80064de:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80064e2:	f242 7010 	movw	r0, #10000	; 0x2710
 80064e6:	f7ff f963 	bl	80057b0 <slalomB>
 80064ea:	e08e      	b.n	800660a <slalom_R90+0x18a>
	}else if(run_mode == MIDDLE){
 80064ec:	4b4d      	ldr	r3, [pc, #308]	; (8006624 <slalom_R90+0x1a4>)
 80064ee:	781b      	ldrb	r3, [r3, #0]
 80064f0:	b2db      	uxtb	r3, r3
 80064f2:	2b02      	cmp	r3, #2
 80064f4:	d12a      	bne.n	800654c <slalom_R90+0xcc>
		slalomF(10000, SPEED_MIDDLE, SLALOM_M_OFFSET_F, SLALOM_M_WALL_FL, SLALOM_M_WALL_FR);
 80064f6:	23f0      	movs	r3, #240	; 0xf0
 80064f8:	9300      	str	r3, [sp, #0]
 80064fa:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80064fe:	2219      	movs	r2, #25
 8006500:	f44f 7116 	mov.w	r1, #600	; 0x258
 8006504:	f242 7010 	movw	r0, #10000	; 0x2710
 8006508:	f7fe ffb2 	bl	8005470 <slalomF>
		slalomR(-SLALOM_M_DEGACCEL, -SLALOM_M_OMEGA, -85, SPEED_MIDDLE);
 800650c:	f44f 7316 	mov.w	r3, #600	; 0x258
 8006510:	f06f 0254 	mvn.w	r2, #84	; 0x54
 8006514:	4947      	ldr	r1, [pc, #284]	; (8006634 <slalom_R90+0x1b4>)
 8006516:	4848      	ldr	r0, [pc, #288]	; (8006638 <slalom_R90+0x1b8>)
 8006518:	f7ff f826 	bl	8005568 <slalomR>

		if(!MF.FLAG.XDIR){
 800651c:	4b44      	ldr	r3, [pc, #272]	; (8006630 <slalom_R90+0x1b0>)
 800651e:	881b      	ldrh	r3, [r3, #0]
 8006520:	f3c3 3300 	ubfx	r3, r3, #12, #1
 8006524:	b2db      	uxtb	r3, r3
 8006526:	2b00      	cmp	r3, #0
 8006528:	d104      	bne.n	8006534 <slalom_R90+0xb4>
			turn_dir(DIR_TURN_R90, 1);									//マイクロマウス内部位置情報でも左回転処理&目標角度左90度
 800652a:	2101      	movs	r1, #1
 800652c:	2001      	movs	r0, #1
 800652e:	f007 fe2b 	bl	800e188 <turn_dir>
 8006532:	e003      	b.n	800653c <slalom_R90+0xbc>
		}else{
			turn_dir(DIR_TURN_R90_8, 3);								//マイクロマウス内部位置情報でも左回転処理&目標角度左90度
 8006534:	2103      	movs	r1, #3
 8006536:	2002      	movs	r0, #2
 8006538:	f007 fe26 	bl	800e188 <turn_dir>
		}
		slalomB(10000, SPEED_MIDDLE, SLALOM_M_OFFSET_B);
 800653c:	223c      	movs	r2, #60	; 0x3c
 800653e:	f44f 7116 	mov.w	r1, #600	; 0x258
 8006542:	f242 7010 	movw	r0, #10000	; 0x2710
 8006546:	f7ff f933 	bl	80057b0 <slalomB>
 800654a:	e05e      	b.n	800660a <slalom_R90+0x18a>
	}else if(run_mode == HIGH){
 800654c:	4b35      	ldr	r3, [pc, #212]	; (8006624 <slalom_R90+0x1a4>)
 800654e:	781b      	ldrb	r3, [r3, #0]
 8006550:	b2db      	uxtb	r3, r3
 8006552:	2b03      	cmp	r3, #3
 8006554:	d12a      	bne.n	80065ac <slalom_R90+0x12c>
		slalomF(10000, SPEED_HIGH, SLALOM_H_OFFSET_F, SLALOM_H_WALL_FL, SLALOM_H_WALL_FR);
 8006556:	23b4      	movs	r3, #180	; 0xb4
 8006558:	9300      	str	r3, [sp, #0]
 800655a:	f44f 73b4 	mov.w	r3, #360	; 0x168
 800655e:	2214      	movs	r2, #20
 8006560:	f44f 7148 	mov.w	r1, #800	; 0x320
 8006564:	f242 7010 	movw	r0, #10000	; 0x2710
 8006568:	f7fe ff82 	bl	8005470 <slalomF>
		slalomR(-SLALOM_H_DEGACCEL, -SLALOM_H_OMEGA, -70, SPEED_HIGH);
 800656c:	f44f 7348 	mov.w	r3, #800	; 0x320
 8006570:	f06f 0245 	mvn.w	r2, #69	; 0x45
 8006574:	4931      	ldr	r1, [pc, #196]	; (800663c <slalom_R90+0x1bc>)
 8006576:	4832      	ldr	r0, [pc, #200]	; (8006640 <slalom_R90+0x1c0>)
 8006578:	f7fe fff6 	bl	8005568 <slalomR>

		if(!MF.FLAG.XDIR){
 800657c:	4b2c      	ldr	r3, [pc, #176]	; (8006630 <slalom_R90+0x1b0>)
 800657e:	881b      	ldrh	r3, [r3, #0]
 8006580:	f3c3 3300 	ubfx	r3, r3, #12, #1
 8006584:	b2db      	uxtb	r3, r3
 8006586:	2b00      	cmp	r3, #0
 8006588:	d104      	bne.n	8006594 <slalom_R90+0x114>
			turn_dir(DIR_TURN_R90, 1);									//マイクロマウス内部位置情報でも左回転処理&目標角度左90度
 800658a:	2101      	movs	r1, #1
 800658c:	2001      	movs	r0, #1
 800658e:	f007 fdfb 	bl	800e188 <turn_dir>
 8006592:	e003      	b.n	800659c <slalom_R90+0x11c>
		}else{
			turn_dir(DIR_TURN_R90_8, 3);								//マイクロマウス内部位置情報でも左回転処理&目標角度左90度
 8006594:	2103      	movs	r1, #3
 8006596:	2002      	movs	r0, #2
 8006598:	f007 fdf6 	bl	800e188 <turn_dir>
		}
		slalomB(10000, SPEED_HIGH, SLALOM_H_OFFSET_B);
 800659c:	225a      	movs	r2, #90	; 0x5a
 800659e:	f44f 7148 	mov.w	r1, #800	; 0x320
 80065a2:	f242 7010 	movw	r0, #10000	; 0x2710
 80065a6:	f7ff f903 	bl	80057b0 <slalomB>
 80065aa:	e02e      	b.n	800660a <slalom_R90+0x18a>
	}else if(run_mode == HIGH_HIGH){
 80065ac:	4b1d      	ldr	r3, [pc, #116]	; (8006624 <slalom_R90+0x1a4>)
 80065ae:	781b      	ldrb	r3, [r3, #0]
 80065b0:	b2db      	uxtb	r3, r3
 80065b2:	2b04      	cmp	r3, #4
 80065b4:	d129      	bne.n	800660a <slalom_R90+0x18a>
		slalomF(10000, SPEED_HIGH_HIGH, SLALOM_H_H_OFFSET_F, SLALOM_H_H_WALL_FL, SLALOM_H_H_WALL_FR);
 80065b6:	23b4      	movs	r3, #180	; 0xb4
 80065b8:	9300      	str	r3, [sp, #0]
 80065ba:	f44f 73b4 	mov.w	r3, #360	; 0x168
 80065be:	2217      	movs	r2, #23
 80065c0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80065c4:	f242 7010 	movw	r0, #10000	; 0x2710
 80065c8:	f7fe ff52 	bl	8005470 <slalomF>
		slalomR(-SLALOM_H_H_DEGACCEL, -SLALOM_H_H_OMEGA, -70, SPEED_HIGH_HIGH);
 80065cc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80065d0:	f06f 0245 	mvn.w	r2, #69	; 0x45
 80065d4:	4919      	ldr	r1, [pc, #100]	; (800663c <slalom_R90+0x1bc>)
 80065d6:	481b      	ldr	r0, [pc, #108]	; (8006644 <slalom_R90+0x1c4>)
 80065d8:	f7fe ffc6 	bl	8005568 <slalomR>

		if(!MF.FLAG.XDIR){
 80065dc:	4b14      	ldr	r3, [pc, #80]	; (8006630 <slalom_R90+0x1b0>)
 80065de:	881b      	ldrh	r3, [r3, #0]
 80065e0:	f3c3 3300 	ubfx	r3, r3, #12, #1
 80065e4:	b2db      	uxtb	r3, r3
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d104      	bne.n	80065f4 <slalom_R90+0x174>
			turn_dir(DIR_TURN_R90, 1);									//マイクロマウス内部位置情報でも左回転処理&目標角度左90度
 80065ea:	2101      	movs	r1, #1
 80065ec:	2001      	movs	r0, #1
 80065ee:	f007 fdcb 	bl	800e188 <turn_dir>
 80065f2:	e003      	b.n	80065fc <slalom_R90+0x17c>
		}else{
			turn_dir(DIR_TURN_R90_8, 3);								//マイクロマウス内部位置情報でも左回転処理&目標角度左90度
 80065f4:	2103      	movs	r1, #3
 80065f6:	2002      	movs	r0, #2
 80065f8:	f007 fdc6 	bl	800e188 <turn_dir>
		}
		slalomB(10000, SPEED_HIGH_HIGH, SLALOM_H_H_OFFSET_B);
 80065fc:	2217      	movs	r2, #23
 80065fe:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8006602:	f242 7010 	movw	r0, #10000	; 0x2710
 8006606:	f7ff f8d3 	bl	80057b0 <slalomB>
	}
	if(!MF.FLAG.SCND)get_wall_info();					//壁情報を取得，片壁制御の有効・無効の判断
 800660a:	4b09      	ldr	r3, [pc, #36]	; (8006630 <slalom_R90+0x1b0>)
 800660c:	881b      	ldrh	r3, [r3, #0]
 800660e:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8006612:	b2db      	uxtb	r3, r3
 8006614:	2b00      	cmp	r3, #0
 8006616:	d101      	bne.n	800661c <slalom_R90+0x19c>
 8006618:	f009 fbb0 	bl	800fd7c <get_wall_info>
}
 800661c:	bf00      	nop
 800661e:	46bd      	mov	sp, r7
 8006620:	bd80      	pop	{r7, pc}
 8006622:	bf00      	nop
 8006624:	20000456 	.word	0x20000456
 8006628:	fffffdda 	.word	0xfffffdda
 800662c:	fffff060 	.word	0xfffff060
 8006630:	20000f68 	.word	0x20000f68
 8006634:	fffffc7c 	.word	0xfffffc7c
 8006638:	ffffd120 	.word	0xffffd120
 800663c:	fffffb50 	.word	0xfffffb50
 8006640:	ffffa240 	.word	0xffffa240
 8006644:	ffff8300 	.word	0xffff8300

08006648 <slalom_L90>:
//slalom_L90
// スラロームで右に90度回転する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void slalom_L90(void){
 8006648:	b580      	push	{r7, lr}
 800664a:	b082      	sub	sp, #8
 800664c:	af02      	add	r7, sp, #8
	full_led_write(YELLOW);
 800664e:	2006      	movs	r0, #6
 8006650:	f009 fc08 	bl	800fe64 <full_led_write>
	if(run_mode == LOW){
 8006654:	4b67      	ldr	r3, [pc, #412]	; (80067f4 <slalom_L90+0x1ac>)
 8006656:	781b      	ldrb	r3, [r3, #0]
 8006658:	b2db      	uxtb	r3, r3
 800665a:	2b01      	cmp	r3, #1
 800665c:	d12b      	bne.n	80066b6 <slalom_L90+0x6e>
		slalomF(10000, SPEED_LOW, SLALOM_OFFSET_F, SLALOM_WALL_FL, SLALOM_WALL_FR);
 800665e:	23fa      	movs	r3, #250	; 0xfa
 8006660:	9300      	str	r3, [sp, #0]
 8006662:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8006666:	2212      	movs	r2, #18
 8006668:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800666c:	f242 7010 	movw	r0, #10000	; 0x2710
 8006670:	f7fe fefe 	bl	8005470 <slalomF>
		slalomR(SLALOM_DEGACCEL, SLALOM_OMEGA, 90, SPEED_LOW);
 8006674:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8006678:	225a      	movs	r2, #90	; 0x5a
 800667a:	f240 2126 	movw	r1, #550	; 0x226
 800667e:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8006682:	f7fe ff71 	bl	8005568 <slalomR>

		if(!MF.FLAG.XDIR){
 8006686:	4b5c      	ldr	r3, [pc, #368]	; (80067f8 <slalom_L90+0x1b0>)
 8006688:	881b      	ldrh	r3, [r3, #0]
 800668a:	f3c3 3300 	ubfx	r3, r3, #12, #1
 800668e:	b2db      	uxtb	r3, r3
 8006690:	2b00      	cmp	r3, #0
 8006692:	d104      	bne.n	800669e <slalom_L90+0x56>
			turn_dir(DIR_TURN_L90, 1);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8006694:	2101      	movs	r1, #1
 8006696:	20ff      	movs	r0, #255	; 0xff
 8006698:	f007 fd76 	bl	800e188 <turn_dir>
 800669c:	e003      	b.n	80066a6 <slalom_L90+0x5e>
		}else{
			turn_dir(DIR_TURN_L90_8, 3);								//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 800669e:	2103      	movs	r1, #3
 80066a0:	20fe      	movs	r0, #254	; 0xfe
 80066a2:	f007 fd71 	bl	800e188 <turn_dir>
		}
		slalomB(10000, SPEED_LOW, SLALOM_OFFSET_B);
 80066a6:	2219      	movs	r2, #25
 80066a8:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80066ac:	f242 7010 	movw	r0, #10000	; 0x2710
 80066b0:	f7ff f87e 	bl	80057b0 <slalomB>
 80066b4:	e091      	b.n	80067da <slalom_L90+0x192>
	}else if(run_mode == MIDDLE){
 80066b6:	4b4f      	ldr	r3, [pc, #316]	; (80067f4 <slalom_L90+0x1ac>)
 80066b8:	781b      	ldrb	r3, [r3, #0]
 80066ba:	b2db      	uxtb	r3, r3
 80066bc:	2b02      	cmp	r3, #2
 80066be:	d12b      	bne.n	8006718 <slalom_L90+0xd0>
		slalomF(10000, SPEED_MIDDLE, SLALOM_M_OFFSET_F, SLALOM_M_WALL_FL, SLALOM_M_WALL_FR);
 80066c0:	23f0      	movs	r3, #240	; 0xf0
 80066c2:	9300      	str	r3, [sp, #0]
 80066c4:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80066c8:	2219      	movs	r2, #25
 80066ca:	f44f 7116 	mov.w	r1, #600	; 0x258
 80066ce:	f242 7010 	movw	r0, #10000	; 0x2710
 80066d2:	f7fe fecd 	bl	8005470 <slalomF>
		slalomR(SLALOM_M_DEGACCEL, SLALOM_M_OMEGA, 85, SPEED_MIDDLE);
 80066d6:	f44f 7316 	mov.w	r3, #600	; 0x258
 80066da:	2255      	movs	r2, #85	; 0x55
 80066dc:	f44f 7161 	mov.w	r1, #900	; 0x384
 80066e0:	f642 60e0 	movw	r0, #12000	; 0x2ee0
 80066e4:	f7fe ff40 	bl	8005568 <slalomR>

		if(!MF.FLAG.XDIR){
 80066e8:	4b43      	ldr	r3, [pc, #268]	; (80067f8 <slalom_L90+0x1b0>)
 80066ea:	881b      	ldrh	r3, [r3, #0]
 80066ec:	f3c3 3300 	ubfx	r3, r3, #12, #1
 80066f0:	b2db      	uxtb	r3, r3
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d104      	bne.n	8006700 <slalom_L90+0xb8>
			turn_dir(DIR_TURN_L90, 1);									//マイクロマウス内部位置情報でも左回転処理&目標角度左90度
 80066f6:	2101      	movs	r1, #1
 80066f8:	20ff      	movs	r0, #255	; 0xff
 80066fa:	f007 fd45 	bl	800e188 <turn_dir>
 80066fe:	e003      	b.n	8006708 <slalom_L90+0xc0>
		}else{
			turn_dir(DIR_TURN_L90_8, 3);								//マイクロマウス内部位置情報でも左回転処理&目標角度左90度
 8006700:	2103      	movs	r1, #3
 8006702:	20fe      	movs	r0, #254	; 0xfe
 8006704:	f007 fd40 	bl	800e188 <turn_dir>
		}
		slalomB(10000, SPEED_MIDDLE, SLALOM_M_OFFSET_B);
 8006708:	223c      	movs	r2, #60	; 0x3c
 800670a:	f44f 7116 	mov.w	r1, #600	; 0x258
 800670e:	f242 7010 	movw	r0, #10000	; 0x2710
 8006712:	f7ff f84d 	bl	80057b0 <slalomB>
 8006716:	e060      	b.n	80067da <slalom_L90+0x192>
	}else if(run_mode == HIGH){
 8006718:	4b36      	ldr	r3, [pc, #216]	; (80067f4 <slalom_L90+0x1ac>)
 800671a:	781b      	ldrb	r3, [r3, #0]
 800671c:	b2db      	uxtb	r3, r3
 800671e:	2b03      	cmp	r3, #3
 8006720:	d12b      	bne.n	800677a <slalom_L90+0x132>
		slalomF(10000, SPEED_HIGH, SLALOM_H_OFFSET_F, SLALOM_H_WALL_FL, SLALOM_H_WALL_FR);
 8006722:	23b4      	movs	r3, #180	; 0xb4
 8006724:	9300      	str	r3, [sp, #0]
 8006726:	f44f 73b4 	mov.w	r3, #360	; 0x168
 800672a:	2214      	movs	r2, #20
 800672c:	f44f 7148 	mov.w	r1, #800	; 0x320
 8006730:	f242 7010 	movw	r0, #10000	; 0x2710
 8006734:	f7fe fe9c 	bl	8005470 <slalomF>
		slalomR(SLALOM_H_DEGACCEL, SLALOM_H_OMEGA, 70, SPEED_HIGH);
 8006738:	f44f 7348 	mov.w	r3, #800	; 0x320
 800673c:	2246      	movs	r2, #70	; 0x46
 800673e:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 8006742:	f645 50c0 	movw	r0, #24000	; 0x5dc0
 8006746:	f7fe ff0f 	bl	8005568 <slalomR>

		if(!MF.FLAG.XDIR){
 800674a:	4b2b      	ldr	r3, [pc, #172]	; (80067f8 <slalom_L90+0x1b0>)
 800674c:	881b      	ldrh	r3, [r3, #0]
 800674e:	f3c3 3300 	ubfx	r3, r3, #12, #1
 8006752:	b2db      	uxtb	r3, r3
 8006754:	2b00      	cmp	r3, #0
 8006756:	d104      	bne.n	8006762 <slalom_L90+0x11a>
			turn_dir(DIR_TURN_L90, 1);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8006758:	2101      	movs	r1, #1
 800675a:	20ff      	movs	r0, #255	; 0xff
 800675c:	f007 fd14 	bl	800e188 <turn_dir>
 8006760:	e003      	b.n	800676a <slalom_L90+0x122>
		}else{
			turn_dir(DIR_TURN_L90_8, 3);								//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8006762:	2103      	movs	r1, #3
 8006764:	20fe      	movs	r0, #254	; 0xfe
 8006766:	f007 fd0f 	bl	800e188 <turn_dir>
		}
		slalomB(10000, SPEED_HIGH, SLALOM_H_OFFSET_B);
 800676a:	225a      	movs	r2, #90	; 0x5a
 800676c:	f44f 7148 	mov.w	r1, #800	; 0x320
 8006770:	f242 7010 	movw	r0, #10000	; 0x2710
 8006774:	f7ff f81c 	bl	80057b0 <slalomB>
 8006778:	e02f      	b.n	80067da <slalom_L90+0x192>
	}else if(run_mode == HIGH_HIGH){
 800677a:	4b1e      	ldr	r3, [pc, #120]	; (80067f4 <slalom_L90+0x1ac>)
 800677c:	781b      	ldrb	r3, [r3, #0]
 800677e:	b2db      	uxtb	r3, r3
 8006780:	2b04      	cmp	r3, #4
 8006782:	d12a      	bne.n	80067da <slalom_L90+0x192>
		slalomF(10000, SPEED_HIGH_HIGH, SLALOM_H_H_OFFSET_F, SLALOM_H_H_WALL_FL, SLALOM_H_H_WALL_FR);
 8006784:	23b4      	movs	r3, #180	; 0xb4
 8006786:	9300      	str	r3, [sp, #0]
 8006788:	f44f 73b4 	mov.w	r3, #360	; 0x168
 800678c:	2217      	movs	r2, #23
 800678e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8006792:	f242 7010 	movw	r0, #10000	; 0x2710
 8006796:	f7fe fe6b 	bl	8005470 <slalomF>
		slalomR(SLALOM_H_H_DEGACCEL, SLALOM_H_H_OMEGA, 70, SPEED_HIGH_HIGH);
 800679a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800679e:	2246      	movs	r2, #70	; 0x46
 80067a0:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 80067a4:	f44f 40fa 	mov.w	r0, #32000	; 0x7d00
 80067a8:	f7fe fede 	bl	8005568 <slalomR>

		if(!MF.FLAG.XDIR){
 80067ac:	4b12      	ldr	r3, [pc, #72]	; (80067f8 <slalom_L90+0x1b0>)
 80067ae:	881b      	ldrh	r3, [r3, #0]
 80067b0:	f3c3 3300 	ubfx	r3, r3, #12, #1
 80067b4:	b2db      	uxtb	r3, r3
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d104      	bne.n	80067c4 <slalom_L90+0x17c>
			turn_dir(DIR_TURN_L90, 1);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 80067ba:	2101      	movs	r1, #1
 80067bc:	20ff      	movs	r0, #255	; 0xff
 80067be:	f007 fce3 	bl	800e188 <turn_dir>
 80067c2:	e003      	b.n	80067cc <slalom_L90+0x184>
		}else{
			turn_dir(DIR_TURN_L90_8, 3);								//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 80067c4:	2103      	movs	r1, #3
 80067c6:	20fe      	movs	r0, #254	; 0xfe
 80067c8:	f007 fcde 	bl	800e188 <turn_dir>
		}
		slalomB(10000, SPEED_HIGH_HIGH, SLALOM_H_H_OFFSET_B);
 80067cc:	2217      	movs	r2, #23
 80067ce:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80067d2:	f242 7010 	movw	r0, #10000	; 0x2710
 80067d6:	f7fe ffeb 	bl	80057b0 <slalomB>
	}
	if(!MF.FLAG.SCND)get_wall_info();					//壁情報を取得，片壁制御の有効・無効の判断
 80067da:	4b07      	ldr	r3, [pc, #28]	; (80067f8 <slalom_L90+0x1b0>)
 80067dc:	881b      	ldrh	r3, [r3, #0]
 80067de:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80067e2:	b2db      	uxtb	r3, r3
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d101      	bne.n	80067ec <slalom_L90+0x1a4>
 80067e8:	f009 fac8 	bl	800fd7c <get_wall_info>
}
 80067ec:	bf00      	nop
 80067ee:	46bd      	mov	sp, r7
 80067f0:	bd80      	pop	{r7, pc}
 80067f2:	bf00      	nop
 80067f4:	20000456 	.word	0x20000456
 80067f8:	20000f68 	.word	0x20000f68

080067fc <Lslalom_R90>:
//Lslalom_R90
// スラロームで右に90度回転する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void Lslalom_R90(void){
 80067fc:	b580      	push	{r7, lr}
 80067fe:	b082      	sub	sp, #8
 8006800:	af02      	add	r7, sp, #8
	full_led_write(PURPLE);
 8006802:	2005      	movs	r0, #5
 8006804:	f009 fb2e 	bl	800fe64 <full_led_write>
	if(run_mode == LOW){
 8006808:	4b5f      	ldr	r3, [pc, #380]	; (8006988 <Lslalom_R90+0x18c>)
 800680a:	781b      	ldrb	r3, [r3, #0]
 800680c:	b2db      	uxtb	r3, r3
 800680e:	2b01      	cmp	r3, #1
 8006810:	d12a      	bne.n	8006868 <Lslalom_R90+0x6c>
		slalomF(10000, SPEED_LOW, LSLALOM_OFFSET_F, LSLALOM_WALL_FL, LSLALOM_WALL_FR);
 8006812:	2364      	movs	r3, #100	; 0x64
 8006814:	9300      	str	r3, [sp, #0]
 8006816:	23c8      	movs	r3, #200	; 0xc8
 8006818:	222d      	movs	r2, #45	; 0x2d
 800681a:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800681e:	f242 7010 	movw	r0, #10000	; 0x2710
 8006822:	f7fe fe25 	bl	8005470 <slalomF>
		slalomR(-LSLALOM_DEGACCEL, -LSLALOM_OMEGA, -90, SPEED_LOW);
 8006826:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800682a:	f06f 0259 	mvn.w	r2, #89	; 0x59
 800682e:	f06f 01c7 	mvn.w	r1, #199	; 0xc7
 8006832:	4856      	ldr	r0, [pc, #344]	; (800698c <Lslalom_R90+0x190>)
 8006834:	f7fe fe98 	bl	8005568 <slalomR>

		if(!MF.FLAG.XDIR){
 8006838:	4b55      	ldr	r3, [pc, #340]	; (8006990 <Lslalom_R90+0x194>)
 800683a:	881b      	ldrh	r3, [r3, #0]
 800683c:	f3c3 3300 	ubfx	r3, r3, #12, #1
 8006840:	b2db      	uxtb	r3, r3
 8006842:	2b00      	cmp	r3, #0
 8006844:	d104      	bne.n	8006850 <Lslalom_R90+0x54>
			turn_dir(DIR_TURN_R90, 1);										//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8006846:	2101      	movs	r1, #1
 8006848:	2001      	movs	r0, #1
 800684a:	f007 fc9d 	bl	800e188 <turn_dir>
 800684e:	e003      	b.n	8006858 <Lslalom_R90+0x5c>
		}else{
			turn_dir(DIR_TURN_R90_8, 3);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8006850:	2103      	movs	r1, #3
 8006852:	2002      	movs	r0, #2
 8006854:	f007 fc98 	bl	800e188 <turn_dir>
		}
		slalomB(10000, SPEED_LOW, LSLALOM_OFFSET_B);
 8006858:	2235      	movs	r2, #53	; 0x35
 800685a:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800685e:	f242 7010 	movw	r0, #10000	; 0x2710
 8006862:	f7fe ffa5 	bl	80057b0 <slalomB>
		}else{
			turn_dir(DIR_TURN_R90_8, 3);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
		}
		slalomB(10000, SPEED_HIGH_HIGH, LSLALOM_H_H_OFFSET_B);
	}
}
 8006866:	e08b      	b.n	8006980 <Lslalom_R90+0x184>
	}else if(run_mode == MIDDLE){
 8006868:	4b47      	ldr	r3, [pc, #284]	; (8006988 <Lslalom_R90+0x18c>)
 800686a:	781b      	ldrb	r3, [r3, #0]
 800686c:	b2db      	uxtb	r3, r3
 800686e:	2b02      	cmp	r3, #2
 8006870:	d129      	bne.n	80068c6 <Lslalom_R90+0xca>
		slalomF(10000, SPEED_MIDDLE, LSLALOM_M_OFFSET_F, LSLALOM_M_WALL_FL, LSLALOM_M_WALL_FR);
 8006872:	2364      	movs	r3, #100	; 0x64
 8006874:	9300      	str	r3, [sp, #0]
 8006876:	23c8      	movs	r3, #200	; 0xc8
 8006878:	223c      	movs	r2, #60	; 0x3c
 800687a:	f44f 7116 	mov.w	r1, #600	; 0x258
 800687e:	f242 7010 	movw	r0, #10000	; 0x2710
 8006882:	f7fe fdf5 	bl	8005470 <slalomF>
		slalomR(-LSLALOM_M_DEGACCEL, -LSLALOM_M_OMEGA, -90, SPEED_MIDDLE);
 8006886:	f44f 7316 	mov.w	r3, #600	; 0x258
 800688a:	f06f 0259 	mvn.w	r2, #89	; 0x59
 800688e:	4941      	ldr	r1, [pc, #260]	; (8006994 <Lslalom_R90+0x198>)
 8006890:	4841      	ldr	r0, [pc, #260]	; (8006998 <Lslalom_R90+0x19c>)
 8006892:	f7fe fe69 	bl	8005568 <slalomR>
		if(!MF.FLAG.XDIR){
 8006896:	4b3e      	ldr	r3, [pc, #248]	; (8006990 <Lslalom_R90+0x194>)
 8006898:	881b      	ldrh	r3, [r3, #0]
 800689a:	f3c3 3300 	ubfx	r3, r3, #12, #1
 800689e:	b2db      	uxtb	r3, r3
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d104      	bne.n	80068ae <Lslalom_R90+0xb2>
			turn_dir(DIR_TURN_R90, 1);										//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 80068a4:	2101      	movs	r1, #1
 80068a6:	2001      	movs	r0, #1
 80068a8:	f007 fc6e 	bl	800e188 <turn_dir>
 80068ac:	e003      	b.n	80068b6 <Lslalom_R90+0xba>
			turn_dir(DIR_TURN_R90_8, 3);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 80068ae:	2103      	movs	r1, #3
 80068b0:	2002      	movs	r0, #2
 80068b2:	f007 fc69 	bl	800e188 <turn_dir>
		slalomB(10000, SPEED_MIDDLE, LSLALOM_M_OFFSET_B);
 80068b6:	2258      	movs	r2, #88	; 0x58
 80068b8:	f44f 7116 	mov.w	r1, #600	; 0x258
 80068bc:	f242 7010 	movw	r0, #10000	; 0x2710
 80068c0:	f7fe ff76 	bl	80057b0 <slalomB>
}
 80068c4:	e05c      	b.n	8006980 <Lslalom_R90+0x184>
	}else if(run_mode == HIGH){
 80068c6:	4b30      	ldr	r3, [pc, #192]	; (8006988 <Lslalom_R90+0x18c>)
 80068c8:	781b      	ldrb	r3, [r3, #0]
 80068ca:	b2db      	uxtb	r3, r3
 80068cc:	2b03      	cmp	r3, #3
 80068ce:	d129      	bne.n	8006924 <Lslalom_R90+0x128>
		slalomF(10000, SPEED_HIGH, LSLALOM_H_OFFSET_F, LSLALOM_H_WALL_FL, LSLALOM_H_WALL_FR);
 80068d0:	2364      	movs	r3, #100	; 0x64
 80068d2:	9300      	str	r3, [sp, #0]
 80068d4:	23c8      	movs	r3, #200	; 0xc8
 80068d6:	222d      	movs	r2, #45	; 0x2d
 80068d8:	f44f 7148 	mov.w	r1, #800	; 0x320
 80068dc:	f242 7010 	movw	r0, #10000	; 0x2710
 80068e0:	f7fe fdc6 	bl	8005470 <slalomF>
		slalomR(-LSLALOM_H_DEGACCEL, -LSLALOM_H_OMEGA, -90, SPEED_HIGH);
 80068e4:	f44f 7348 	mov.w	r3, #800	; 0x320
 80068e8:	f06f 0259 	mvn.w	r2, #89	; 0x59
 80068ec:	492b      	ldr	r1, [pc, #172]	; (800699c <Lslalom_R90+0x1a0>)
 80068ee:	482c      	ldr	r0, [pc, #176]	; (80069a0 <Lslalom_R90+0x1a4>)
 80068f0:	f7fe fe3a 	bl	8005568 <slalomR>
		if(!MF.FLAG.XDIR){
 80068f4:	4b26      	ldr	r3, [pc, #152]	; (8006990 <Lslalom_R90+0x194>)
 80068f6:	881b      	ldrh	r3, [r3, #0]
 80068f8:	f3c3 3300 	ubfx	r3, r3, #12, #1
 80068fc:	b2db      	uxtb	r3, r3
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d104      	bne.n	800690c <Lslalom_R90+0x110>
			turn_dir(DIR_TURN_R90, 1);										//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8006902:	2101      	movs	r1, #1
 8006904:	2001      	movs	r0, #1
 8006906:	f007 fc3f 	bl	800e188 <turn_dir>
 800690a:	e003      	b.n	8006914 <Lslalom_R90+0x118>
			turn_dir(DIR_TURN_R90_8, 3);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 800690c:	2103      	movs	r1, #3
 800690e:	2002      	movs	r0, #2
 8006910:	f007 fc3a 	bl	800e188 <turn_dir>
		slalomB(10000, SPEED_HIGH, LSLALOM_H_OFFSET_B);
 8006914:	2258      	movs	r2, #88	; 0x58
 8006916:	f44f 7148 	mov.w	r1, #800	; 0x320
 800691a:	f242 7010 	movw	r0, #10000	; 0x2710
 800691e:	f7fe ff47 	bl	80057b0 <slalomB>
}
 8006922:	e02d      	b.n	8006980 <Lslalom_R90+0x184>
	}else if(run_mode == HIGH_HIGH){
 8006924:	4b18      	ldr	r3, [pc, #96]	; (8006988 <Lslalom_R90+0x18c>)
 8006926:	781b      	ldrb	r3, [r3, #0]
 8006928:	b2db      	uxtb	r3, r3
 800692a:	2b04      	cmp	r3, #4
 800692c:	d128      	bne.n	8006980 <Lslalom_R90+0x184>
		slalomF(10000, SPEED_HIGH_HIGH, LSLALOM_H_H_OFFSET_F, LSLALOM_H_H_WALL_FL, LSLALOM_H_H_WALL_FR);
 800692e:	2364      	movs	r3, #100	; 0x64
 8006930:	9300      	str	r3, [sp, #0]
 8006932:	23c8      	movs	r3, #200	; 0xc8
 8006934:	2236      	movs	r2, #54	; 0x36
 8006936:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800693a:	f242 7010 	movw	r0, #10000	; 0x2710
 800693e:	f7fe fd97 	bl	8005470 <slalomF>
		slalomR(-LSLALOM_H_H_DEGACCEL, -LSLALOM_H_H_OMEGA, -90, SPEED_HIGH_HIGH);
 8006942:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006946:	f06f 0259 	mvn.w	r2, #89	; 0x59
 800694a:	4916      	ldr	r1, [pc, #88]	; (80069a4 <Lslalom_R90+0x1a8>)
 800694c:	4816      	ldr	r0, [pc, #88]	; (80069a8 <Lslalom_R90+0x1ac>)
 800694e:	f7fe fe0b 	bl	8005568 <slalomR>
		if(!MF.FLAG.XDIR){
 8006952:	4b0f      	ldr	r3, [pc, #60]	; (8006990 <Lslalom_R90+0x194>)
 8006954:	881b      	ldrh	r3, [r3, #0]
 8006956:	f3c3 3300 	ubfx	r3, r3, #12, #1
 800695a:	b2db      	uxtb	r3, r3
 800695c:	2b00      	cmp	r3, #0
 800695e:	d104      	bne.n	800696a <Lslalom_R90+0x16e>
			turn_dir(DIR_TURN_R90, 1);										//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8006960:	2101      	movs	r1, #1
 8006962:	2001      	movs	r0, #1
 8006964:	f007 fc10 	bl	800e188 <turn_dir>
 8006968:	e003      	b.n	8006972 <Lslalom_R90+0x176>
			turn_dir(DIR_TURN_R90_8, 3);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 800696a:	2103      	movs	r1, #3
 800696c:	2002      	movs	r0, #2
 800696e:	f007 fc0b 	bl	800e188 <turn_dir>
		slalomB(10000, SPEED_HIGH_HIGH, LSLALOM_H_H_OFFSET_B);
 8006972:	2236      	movs	r2, #54	; 0x36
 8006974:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8006978:	f242 7010 	movw	r0, #10000	; 0x2710
 800697c:	f7fe ff18 	bl	80057b0 <slalomB>
}
 8006980:	bf00      	nop
 8006982:	46bd      	mov	sp, r7
 8006984:	bd80      	pop	{r7, pc}
 8006986:	bf00      	nop
 8006988:	20000456 	.word	0x20000456
 800698c:	fffff830 	.word	0xfffff830
 8006990:	20000f68 	.word	0x20000f68
 8006994:	fffffe70 	.word	0xfffffe70
 8006998:	fffff060 	.word	0xfffff060
 800699c:	fffffda8 	.word	0xfffffda8
 80069a0:	ffffee6c 	.word	0xffffee6c
 80069a4:	fffffce0 	.word	0xfffffce0
 80069a8:	ffffe0c0 	.word	0xffffe0c0

080069ac <Lslalom_L90>:
//Lslalom_L90
// 大回りスラロームで右に90度回転する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void Lslalom_L90(void){
 80069ac:	b580      	push	{r7, lr}
 80069ae:	b082      	sub	sp, #8
 80069b0:	af02      	add	r7, sp, #8
	full_led_write(YELLOW);
 80069b2:	2006      	movs	r0, #6
 80069b4:	f009 fa56 	bl	800fe64 <full_led_write>
	if(run_mode == LOW){
 80069b8:	4b60      	ldr	r3, [pc, #384]	; (8006b3c <Lslalom_L90+0x190>)
 80069ba:	781b      	ldrb	r3, [r3, #0]
 80069bc:	b2db      	uxtb	r3, r3
 80069be:	2b01      	cmp	r3, #1
 80069c0:	d129      	bne.n	8006a16 <Lslalom_L90+0x6a>
		slalomF(10000, SPEED_LOW, LSLALOM_OFFSET_F, LSLALOM_WALL_FL, LSLALOM_WALL_FR);
 80069c2:	2364      	movs	r3, #100	; 0x64
 80069c4:	9300      	str	r3, [sp, #0]
 80069c6:	23c8      	movs	r3, #200	; 0xc8
 80069c8:	222d      	movs	r2, #45	; 0x2d
 80069ca:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80069ce:	f242 7010 	movw	r0, #10000	; 0x2710
 80069d2:	f7fe fd4d 	bl	8005470 <slalomF>
		slalomR(LSLALOM_DEGACCEL, LSLALOM_OMEGA, 90, SPEED_LOW);
 80069d6:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80069da:	225a      	movs	r2, #90	; 0x5a
 80069dc:	21c8      	movs	r1, #200	; 0xc8
 80069de:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80069e2:	f7fe fdc1 	bl	8005568 <slalomR>

		if(!MF.FLAG.XDIR){
 80069e6:	4b56      	ldr	r3, [pc, #344]	; (8006b40 <Lslalom_L90+0x194>)
 80069e8:	881b      	ldrh	r3, [r3, #0]
 80069ea:	f3c3 3300 	ubfx	r3, r3, #12, #1
 80069ee:	b2db      	uxtb	r3, r3
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d104      	bne.n	80069fe <Lslalom_L90+0x52>
			turn_dir(DIR_TURN_L90, 1);										//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 80069f4:	2101      	movs	r1, #1
 80069f6:	20ff      	movs	r0, #255	; 0xff
 80069f8:	f007 fbc6 	bl	800e188 <turn_dir>
 80069fc:	e003      	b.n	8006a06 <Lslalom_L90+0x5a>
		}else{
			turn_dir(DIR_TURN_L90_8, 3);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 80069fe:	2103      	movs	r1, #3
 8006a00:	20fe      	movs	r0, #254	; 0xfe
 8006a02:	f007 fbc1 	bl	800e188 <turn_dir>
		}
		slalomB(10000, SPEED_LOW, LSLALOM_OFFSET_B);
 8006a06:	2235      	movs	r2, #53	; 0x35
 8006a08:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8006a0c:	f242 7010 	movw	r0, #10000	; 0x2710
 8006a10:	f7fe fece 	bl	80057b0 <slalomB>
		}else{
			turn_dir(DIR_TURN_L90_8, 3);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
		}
		slalomB(10000, SPEED_HIGH_HIGH, LSLALOM_H_H_OFFSET_B);
	}
}
 8006a14:	e08e      	b.n	8006b34 <Lslalom_L90+0x188>
	}else if(run_mode == MIDDLE){
 8006a16:	4b49      	ldr	r3, [pc, #292]	; (8006b3c <Lslalom_L90+0x190>)
 8006a18:	781b      	ldrb	r3, [r3, #0]
 8006a1a:	b2db      	uxtb	r3, r3
 8006a1c:	2b02      	cmp	r3, #2
 8006a1e:	d12a      	bne.n	8006a76 <Lslalom_L90+0xca>
		slalomF(10000, SPEED_MIDDLE, LSLALOM_M_OFFSET_F, LSLALOM_M_WALL_FL, LSLALOM_M_WALL_FR);
 8006a20:	2364      	movs	r3, #100	; 0x64
 8006a22:	9300      	str	r3, [sp, #0]
 8006a24:	23c8      	movs	r3, #200	; 0xc8
 8006a26:	223c      	movs	r2, #60	; 0x3c
 8006a28:	f44f 7116 	mov.w	r1, #600	; 0x258
 8006a2c:	f242 7010 	movw	r0, #10000	; 0x2710
 8006a30:	f7fe fd1e 	bl	8005470 <slalomF>
		slalomR(LSLALOM_M_DEGACCEL, LSLALOM_M_OMEGA, 90, SPEED_MIDDLE);
 8006a34:	f44f 7316 	mov.w	r3, #600	; 0x258
 8006a38:	225a      	movs	r2, #90	; 0x5a
 8006a3a:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8006a3e:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8006a42:	f7fe fd91 	bl	8005568 <slalomR>
		if(!MF.FLAG.XDIR){
 8006a46:	4b3e      	ldr	r3, [pc, #248]	; (8006b40 <Lslalom_L90+0x194>)
 8006a48:	881b      	ldrh	r3, [r3, #0]
 8006a4a:	f3c3 3300 	ubfx	r3, r3, #12, #1
 8006a4e:	b2db      	uxtb	r3, r3
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d104      	bne.n	8006a5e <Lslalom_L90+0xb2>
			turn_dir(DIR_TURN_L90, 1);										//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8006a54:	2101      	movs	r1, #1
 8006a56:	20ff      	movs	r0, #255	; 0xff
 8006a58:	f007 fb96 	bl	800e188 <turn_dir>
 8006a5c:	e003      	b.n	8006a66 <Lslalom_L90+0xba>
			turn_dir(DIR_TURN_L90_8, 3);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8006a5e:	2103      	movs	r1, #3
 8006a60:	20fe      	movs	r0, #254	; 0xfe
 8006a62:	f007 fb91 	bl	800e188 <turn_dir>
		slalomB(10000, SPEED_MIDDLE, LSLALOM_M_OFFSET_B);
 8006a66:	2258      	movs	r2, #88	; 0x58
 8006a68:	f44f 7116 	mov.w	r1, #600	; 0x258
 8006a6c:	f242 7010 	movw	r0, #10000	; 0x2710
 8006a70:	f7fe fe9e 	bl	80057b0 <slalomB>
}
 8006a74:	e05e      	b.n	8006b34 <Lslalom_L90+0x188>
	}else if(run_mode == HIGH){
 8006a76:	4b31      	ldr	r3, [pc, #196]	; (8006b3c <Lslalom_L90+0x190>)
 8006a78:	781b      	ldrb	r3, [r3, #0]
 8006a7a:	b2db      	uxtb	r3, r3
 8006a7c:	2b03      	cmp	r3, #3
 8006a7e:	d12a      	bne.n	8006ad6 <Lslalom_L90+0x12a>
		slalomF(10000, SPEED_HIGH, LSLALOM_H_OFFSET_F, LSLALOM_H_WALL_FL, LSLALOM_H_WALL_FR);
 8006a80:	2364      	movs	r3, #100	; 0x64
 8006a82:	9300      	str	r3, [sp, #0]
 8006a84:	23c8      	movs	r3, #200	; 0xc8
 8006a86:	222d      	movs	r2, #45	; 0x2d
 8006a88:	f44f 7148 	mov.w	r1, #800	; 0x320
 8006a8c:	f242 7010 	movw	r0, #10000	; 0x2710
 8006a90:	f7fe fcee 	bl	8005470 <slalomF>
		slalomR(LSLALOM_H_DEGACCEL, LSLALOM_H_OMEGA, 90, SPEED_HIGH);
 8006a94:	f44f 7348 	mov.w	r3, #800	; 0x320
 8006a98:	225a      	movs	r2, #90	; 0x5a
 8006a9a:	f44f 7116 	mov.w	r1, #600	; 0x258
 8006a9e:	f241 1094 	movw	r0, #4500	; 0x1194
 8006aa2:	f7fe fd61 	bl	8005568 <slalomR>
		if(!MF.FLAG.XDIR){
 8006aa6:	4b26      	ldr	r3, [pc, #152]	; (8006b40 <Lslalom_L90+0x194>)
 8006aa8:	881b      	ldrh	r3, [r3, #0]
 8006aaa:	f3c3 3300 	ubfx	r3, r3, #12, #1
 8006aae:	b2db      	uxtb	r3, r3
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d104      	bne.n	8006abe <Lslalom_L90+0x112>
			turn_dir(DIR_TURN_L90, 1);										//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8006ab4:	2101      	movs	r1, #1
 8006ab6:	20ff      	movs	r0, #255	; 0xff
 8006ab8:	f007 fb66 	bl	800e188 <turn_dir>
 8006abc:	e003      	b.n	8006ac6 <Lslalom_L90+0x11a>
			turn_dir(DIR_TURN_L90_8, 3);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8006abe:	2103      	movs	r1, #3
 8006ac0:	20fe      	movs	r0, #254	; 0xfe
 8006ac2:	f007 fb61 	bl	800e188 <turn_dir>
		slalomB(10000, SPEED_HIGH, LSLALOM_H_OFFSET_B);
 8006ac6:	2258      	movs	r2, #88	; 0x58
 8006ac8:	f44f 7148 	mov.w	r1, #800	; 0x320
 8006acc:	f242 7010 	movw	r0, #10000	; 0x2710
 8006ad0:	f7fe fe6e 	bl	80057b0 <slalomB>
}
 8006ad4:	e02e      	b.n	8006b34 <Lslalom_L90+0x188>
	}else if(run_mode == HIGH_HIGH){
 8006ad6:	4b19      	ldr	r3, [pc, #100]	; (8006b3c <Lslalom_L90+0x190>)
 8006ad8:	781b      	ldrb	r3, [r3, #0]
 8006ada:	b2db      	uxtb	r3, r3
 8006adc:	2b04      	cmp	r3, #4
 8006ade:	d129      	bne.n	8006b34 <Lslalom_L90+0x188>
		slalomF(10000, SPEED_HIGH_HIGH, LSLALOM_H_H_OFFSET_F, LSLALOM_H_H_WALL_FL, LSLALOM_H_H_WALL_FR);
 8006ae0:	2364      	movs	r3, #100	; 0x64
 8006ae2:	9300      	str	r3, [sp, #0]
 8006ae4:	23c8      	movs	r3, #200	; 0xc8
 8006ae6:	2236      	movs	r2, #54	; 0x36
 8006ae8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8006aec:	f242 7010 	movw	r0, #10000	; 0x2710
 8006af0:	f7fe fcbe 	bl	8005470 <slalomF>
		slalomR(LSLALOM_H_H_DEGACCEL, LSLALOM_H_H_OMEGA, 90, SPEED_HIGH_HIGH);
 8006af4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006af8:	225a      	movs	r2, #90	; 0x5a
 8006afa:	f44f 7148 	mov.w	r1, #800	; 0x320
 8006afe:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 8006b02:	f7fe fd31 	bl	8005568 <slalomR>
		if(!MF.FLAG.XDIR){
 8006b06:	4b0e      	ldr	r3, [pc, #56]	; (8006b40 <Lslalom_L90+0x194>)
 8006b08:	881b      	ldrh	r3, [r3, #0]
 8006b0a:	f3c3 3300 	ubfx	r3, r3, #12, #1
 8006b0e:	b2db      	uxtb	r3, r3
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d104      	bne.n	8006b1e <Lslalom_L90+0x172>
			turn_dir(DIR_TURN_L90, 1);										//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8006b14:	2101      	movs	r1, #1
 8006b16:	20ff      	movs	r0, #255	; 0xff
 8006b18:	f007 fb36 	bl	800e188 <turn_dir>
 8006b1c:	e003      	b.n	8006b26 <Lslalom_L90+0x17a>
			turn_dir(DIR_TURN_L90_8, 3);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8006b1e:	2103      	movs	r1, #3
 8006b20:	20fe      	movs	r0, #254	; 0xfe
 8006b22:	f007 fb31 	bl	800e188 <turn_dir>
		slalomB(10000, SPEED_HIGH_HIGH, LSLALOM_H_H_OFFSET_B);
 8006b26:	2236      	movs	r2, #54	; 0x36
 8006b28:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8006b2c:	f242 7010 	movw	r0, #10000	; 0x2710
 8006b30:	f7fe fe3e 	bl	80057b0 <slalomB>
}
 8006b34:	bf00      	nop
 8006b36:	46bd      	mov	sp, r7
 8006b38:	bd80      	pop	{r7, pc}
 8006b3a:	bf00      	nop
 8006b3c:	20000456 	.word	0x20000456
 8006b40:	20000f68 	.word	0x20000f68

08006b44 <Lslalom_R180>:
//Lslalom_R180
// スラロームで右に180度回転する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void Lslalom_R180(void){
 8006b44:	b580      	push	{r7, lr}
 8006b46:	b082      	sub	sp, #8
 8006b48:	af02      	add	r7, sp, #8
	full_led_write(GREEN);
 8006b4a:	2002      	movs	r0, #2
 8006b4c:	f009 f98a 	bl	800fe64 <full_led_write>
	if(run_mode == LOW){
 8006b50:	4b66      	ldr	r3, [pc, #408]	; (8006cec <Lslalom_R180+0x1a8>)
 8006b52:	781b      	ldrb	r3, [r3, #0]
 8006b54:	b2db      	uxtb	r3, r3
 8006b56:	2b01      	cmp	r3, #1
 8006b58:	d12d      	bne.n	8006bb6 <Lslalom_R180+0x72>
		slalomF(10000, SPEED_LOW, LROTATE_OFFSET_F, LROTATE_WALL_FL, LROTATE_WALL_FR);
 8006b5a:	2364      	movs	r3, #100	; 0x64
 8006b5c:	9300      	str	r3, [sp, #0]
 8006b5e:	23c8      	movs	r3, #200	; 0xc8
 8006b60:	223c      	movs	r2, #60	; 0x3c
 8006b62:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8006b66:	f242 7010 	movw	r0, #10000	; 0x2710
 8006b6a:	f7fe fc81 	bl	8005470 <slalomF>
		slalomR(-LROTATE_DEGACCEL, -LROTATE_OMEGA, -180, SPEED_LOW);
 8006b6e:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8006b72:	f06f 02b3 	mvn.w	r2, #179	; 0xb3
 8006b76:	495e      	ldr	r1, [pc, #376]	; (8006cf0 <Lslalom_R180+0x1ac>)
 8006b78:	485e      	ldr	r0, [pc, #376]	; (8006cf4 <Lslalom_R180+0x1b0>)
 8006b7a:	f7fe fcf5 	bl	8005568 <slalomR>

		if(!MF.FLAG.XDIR){
 8006b7e:	4b5e      	ldr	r3, [pc, #376]	; (8006cf8 <Lslalom_R180+0x1b4>)
 8006b80:	881b      	ldrh	r3, [r3, #0]
 8006b82:	f3c3 3300 	ubfx	r3, r3, #12, #1
 8006b86:	b2db      	uxtb	r3, r3
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d108      	bne.n	8006b9e <Lslalom_R180+0x5a>
			turn_dir(DIR_TURN_R90, 1);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8006b8c:	2101      	movs	r1, #1
 8006b8e:	2001      	movs	r0, #1
 8006b90:	f007 fafa 	bl	800e188 <turn_dir>
			turn_dir(DIR_TURN_R90, 1);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8006b94:	2101      	movs	r1, #1
 8006b96:	2001      	movs	r0, #1
 8006b98:	f007 faf6 	bl	800e188 <turn_dir>
 8006b9c:	e003      	b.n	8006ba6 <Lslalom_R180+0x62>
		}else{
			turn_dir(DIR_TURN_R180_8, 3);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8006b9e:	2103      	movs	r1, #3
 8006ba0:	2004      	movs	r0, #4
 8006ba2:	f007 faf1 	bl	800e188 <turn_dir>
		}
		slalomB(10000, SPEED_LOW, LROTATE_OFFSET_B);
 8006ba6:	2250      	movs	r2, #80	; 0x50
 8006ba8:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8006bac:	f242 7010 	movw	r0, #10000	; 0x2710
 8006bb0:	f7fe fdfe 	bl	80057b0 <slalomB>
		}else{
			turn_dir(DIR_TURN_R180_8, 3);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
		}
		slalomB(10000, SPEED_HIGH_HIGH, LROTATE_H_H_OFFSET_B);
	}
}
 8006bb4:	e097      	b.n	8006ce6 <Lslalom_R180+0x1a2>
	}else if(run_mode == MIDDLE){
 8006bb6:	4b4d      	ldr	r3, [pc, #308]	; (8006cec <Lslalom_R180+0x1a8>)
 8006bb8:	781b      	ldrb	r3, [r3, #0]
 8006bba:	b2db      	uxtb	r3, r3
 8006bbc:	2b02      	cmp	r3, #2
 8006bbe:	d12d      	bne.n	8006c1c <Lslalom_R180+0xd8>
		slalomF(10000, SPEED_MIDDLE, LROTATE_M_OFFSET_F, LROTATE_M_WALL_FL, LROTATE_M_WALL_FR);
 8006bc0:	2364      	movs	r3, #100	; 0x64
 8006bc2:	9300      	str	r3, [sp, #0]
 8006bc4:	23c8      	movs	r3, #200	; 0xc8
 8006bc6:	2232      	movs	r2, #50	; 0x32
 8006bc8:	f44f 7116 	mov.w	r1, #600	; 0x258
 8006bcc:	f242 7010 	movw	r0, #10000	; 0x2710
 8006bd0:	f7fe fc4e 	bl	8005470 <slalomF>
		slalomR(-LROTATE_M_DEGACCEL, -LROTATE_M_OMEGA, -180, SPEED_MIDDLE);
 8006bd4:	f44f 7316 	mov.w	r3, #600	; 0x258
 8006bd8:	f06f 02b3 	mvn.w	r2, #179	; 0xb3
 8006bdc:	4947      	ldr	r1, [pc, #284]	; (8006cfc <Lslalom_R180+0x1b8>)
 8006bde:	4848      	ldr	r0, [pc, #288]	; (8006d00 <Lslalom_R180+0x1bc>)
 8006be0:	f7fe fcc2 	bl	8005568 <slalomR>
		if(!MF.FLAG.XDIR){
 8006be4:	4b44      	ldr	r3, [pc, #272]	; (8006cf8 <Lslalom_R180+0x1b4>)
 8006be6:	881b      	ldrh	r3, [r3, #0]
 8006be8:	f3c3 3300 	ubfx	r3, r3, #12, #1
 8006bec:	b2db      	uxtb	r3, r3
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d108      	bne.n	8006c04 <Lslalom_R180+0xc0>
			turn_dir(DIR_TURN_R90, 1);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8006bf2:	2101      	movs	r1, #1
 8006bf4:	2001      	movs	r0, #1
 8006bf6:	f007 fac7 	bl	800e188 <turn_dir>
			turn_dir(DIR_TURN_R90, 1);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8006bfa:	2101      	movs	r1, #1
 8006bfc:	2001      	movs	r0, #1
 8006bfe:	f007 fac3 	bl	800e188 <turn_dir>
 8006c02:	e003      	b.n	8006c0c <Lslalom_R180+0xc8>
			turn_dir(DIR_TURN_R180_8, 3);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8006c04:	2103      	movs	r1, #3
 8006c06:	2004      	movs	r0, #4
 8006c08:	f007 fabe 	bl	800e188 <turn_dir>
		slalomB(10000, SPEED_MIDDLE, LROTATE_M_OFFSET_B);
 8006c0c:	224b      	movs	r2, #75	; 0x4b
 8006c0e:	f44f 7116 	mov.w	r1, #600	; 0x258
 8006c12:	f242 7010 	movw	r0, #10000	; 0x2710
 8006c16:	f7fe fdcb 	bl	80057b0 <slalomB>
}
 8006c1a:	e064      	b.n	8006ce6 <Lslalom_R180+0x1a2>
	}else if(run_mode == HIGH){
 8006c1c:	4b33      	ldr	r3, [pc, #204]	; (8006cec <Lslalom_R180+0x1a8>)
 8006c1e:	781b      	ldrb	r3, [r3, #0]
 8006c20:	b2db      	uxtb	r3, r3
 8006c22:	2b03      	cmp	r3, #3
 8006c24:	d12d      	bne.n	8006c82 <Lslalom_R180+0x13e>
		slalomF(10000, SPEED_HIGH, LROTATE_H_OFFSET_F, LROTATE_H_WALL_FL, LROTATE_H_WALL_FR);
 8006c26:	235a      	movs	r3, #90	; 0x5a
 8006c28:	9300      	str	r3, [sp, #0]
 8006c2a:	23b4      	movs	r3, #180	; 0xb4
 8006c2c:	221c      	movs	r2, #28
 8006c2e:	f44f 7148 	mov.w	r1, #800	; 0x320
 8006c32:	f242 7010 	movw	r0, #10000	; 0x2710
 8006c36:	f7fe fc1b 	bl	8005470 <slalomF>
		slalomR(-LROTATE_H_DEGACCEL, -LROTATE_H_OMEGA, -180, SPEED_HIGH);
 8006c3a:	f44f 7348 	mov.w	r3, #800	; 0x320
 8006c3e:	f06f 02b3 	mvn.w	r2, #179	; 0xb3
 8006c42:	4930      	ldr	r1, [pc, #192]	; (8006d04 <Lslalom_R180+0x1c0>)
 8006c44:	482e      	ldr	r0, [pc, #184]	; (8006d00 <Lslalom_R180+0x1bc>)
 8006c46:	f7fe fc8f 	bl	8005568 <slalomR>
		if(!MF.FLAG.XDIR){
 8006c4a:	4b2b      	ldr	r3, [pc, #172]	; (8006cf8 <Lslalom_R180+0x1b4>)
 8006c4c:	881b      	ldrh	r3, [r3, #0]
 8006c4e:	f3c3 3300 	ubfx	r3, r3, #12, #1
 8006c52:	b2db      	uxtb	r3, r3
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d108      	bne.n	8006c6a <Lslalom_R180+0x126>
			turn_dir(DIR_TURN_R90, 1);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8006c58:	2101      	movs	r1, #1
 8006c5a:	2001      	movs	r0, #1
 8006c5c:	f007 fa94 	bl	800e188 <turn_dir>
			turn_dir(DIR_TURN_R90, 1);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8006c60:	2101      	movs	r1, #1
 8006c62:	2001      	movs	r0, #1
 8006c64:	f007 fa90 	bl	800e188 <turn_dir>
 8006c68:	e003      	b.n	8006c72 <Lslalom_R180+0x12e>
			turn_dir(DIR_TURN_R180_8, 3);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8006c6a:	2103      	movs	r1, #3
 8006c6c:	2004      	movs	r0, #4
 8006c6e:	f007 fa8b 	bl	800e188 <turn_dir>
		slalomB(10000, SPEED_HIGH, LROTATE_H_OFFSET_B);
 8006c72:	2250      	movs	r2, #80	; 0x50
 8006c74:	f44f 7148 	mov.w	r1, #800	; 0x320
 8006c78:	f242 7010 	movw	r0, #10000	; 0x2710
 8006c7c:	f7fe fd98 	bl	80057b0 <slalomB>
}
 8006c80:	e031      	b.n	8006ce6 <Lslalom_R180+0x1a2>
	}else if(run_mode == HIGH_HIGH){
 8006c82:	4b1a      	ldr	r3, [pc, #104]	; (8006cec <Lslalom_R180+0x1a8>)
 8006c84:	781b      	ldrb	r3, [r3, #0]
 8006c86:	b2db      	uxtb	r3, r3
 8006c88:	2b04      	cmp	r3, #4
 8006c8a:	d12c      	bne.n	8006ce6 <Lslalom_R180+0x1a2>
		slalomF(10000, SPEED_HIGH_HIGH, LROTATE_H_H_OFFSET_F, LROTATE_H_H_WALL_FL, LROTATE_H_H_WALL_FR);
 8006c8c:	235a      	movs	r3, #90	; 0x5a
 8006c8e:	9300      	str	r3, [sp, #0]
 8006c90:	23b4      	movs	r3, #180	; 0xb4
 8006c92:	2235      	movs	r2, #53	; 0x35
 8006c94:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8006c98:	f242 7010 	movw	r0, #10000	; 0x2710
 8006c9c:	f7fe fbe8 	bl	8005470 <slalomF>
		slalomR(-LROTATE_H_H_DEGACCEL, -LROTATE_H_H_OMEGA, -180, SPEED_HIGH_HIGH);
 8006ca0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006ca4:	f06f 02b3 	mvn.w	r2, #179	; 0xb3
 8006ca8:	4917      	ldr	r1, [pc, #92]	; (8006d08 <Lslalom_R180+0x1c4>)
 8006caa:	4818      	ldr	r0, [pc, #96]	; (8006d0c <Lslalom_R180+0x1c8>)
 8006cac:	f7fe fc5c 	bl	8005568 <slalomR>
		if(!MF.FLAG.XDIR){
 8006cb0:	4b11      	ldr	r3, [pc, #68]	; (8006cf8 <Lslalom_R180+0x1b4>)
 8006cb2:	881b      	ldrh	r3, [r3, #0]
 8006cb4:	f3c3 3300 	ubfx	r3, r3, #12, #1
 8006cb8:	b2db      	uxtb	r3, r3
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d108      	bne.n	8006cd0 <Lslalom_R180+0x18c>
			turn_dir(DIR_TURN_R90, 1);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8006cbe:	2101      	movs	r1, #1
 8006cc0:	2001      	movs	r0, #1
 8006cc2:	f007 fa61 	bl	800e188 <turn_dir>
			turn_dir(DIR_TURN_R90, 1);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8006cc6:	2101      	movs	r1, #1
 8006cc8:	2001      	movs	r0, #1
 8006cca:	f007 fa5d 	bl	800e188 <turn_dir>
 8006cce:	e003      	b.n	8006cd8 <Lslalom_R180+0x194>
			turn_dir(DIR_TURN_R180_8, 3);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8006cd0:	2103      	movs	r1, #3
 8006cd2:	2004      	movs	r0, #4
 8006cd4:	f007 fa58 	bl	800e188 <turn_dir>
		slalomB(10000, SPEED_HIGH_HIGH, LROTATE_H_H_OFFSET_B);
 8006cd8:	2235      	movs	r2, #53	; 0x35
 8006cda:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8006cde:	f242 7010 	movw	r0, #10000	; 0x2710
 8006ce2:	f7fe fd65 	bl	80057b0 <slalomB>
}
 8006ce6:	bf00      	nop
 8006ce8:	46bd      	mov	sp, r7
 8006cea:	bd80      	pop	{r7, pc}
 8006cec:	20000456 	.word	0x20000456
 8006cf0:	fffffefc 	.word	0xfffffefc
 8006cf4:	fffff830 	.word	0xfffff830
 8006cf8:	20000f68 	.word	0x20000f68
 8006cfc:	fffffe74 	.word	0xfffffe74
 8006d00:	fffff448 	.word	0xfffff448
 8006d04:	fffffdd0 	.word	0xfffffdd0
 8006d08:	fffffd6c 	.word	0xfffffd6c
 8006d0c:	ffffe0c0 	.word	0xffffe0c0

08006d10 <Lslalom_L180>:
//Lslalom_L180
// 大回りスラロームで右に180度回転する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void Lslalom_L180(void){
 8006d10:	b580      	push	{r7, lr}
 8006d12:	b082      	sub	sp, #8
 8006d14:	af02      	add	r7, sp, #8
	full_led_write(GREEN);
 8006d16:	2002      	movs	r0, #2
 8006d18:	f009 f8a4 	bl	800fe64 <full_led_write>
	if(run_mode == LOW){
 8006d1c:	4b68      	ldr	r3, [pc, #416]	; (8006ec0 <Lslalom_L180+0x1b0>)
 8006d1e:	781b      	ldrb	r3, [r3, #0]
 8006d20:	b2db      	uxtb	r3, r3
 8006d22:	2b01      	cmp	r3, #1
 8006d24:	d12e      	bne.n	8006d84 <Lslalom_L180+0x74>
		slalomF(10000, SPEED_LOW, LROTATE_OFFSET_F, LROTATE_WALL_FL, LROTATE_WALL_FR);
 8006d26:	2364      	movs	r3, #100	; 0x64
 8006d28:	9300      	str	r3, [sp, #0]
 8006d2a:	23c8      	movs	r3, #200	; 0xc8
 8006d2c:	223c      	movs	r2, #60	; 0x3c
 8006d2e:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8006d32:	f242 7010 	movw	r0, #10000	; 0x2710
 8006d36:	f7fe fb9b 	bl	8005470 <slalomF>
		slalomR(LROTATE_DEGACCEL, LROTATE_OMEGA, 180, SPEED_LOW);
 8006d3a:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8006d3e:	22b4      	movs	r2, #180	; 0xb4
 8006d40:	f44f 7182 	mov.w	r1, #260	; 0x104
 8006d44:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8006d48:	f7fe fc0e 	bl	8005568 <slalomR>

		if(!MF.FLAG.XDIR){
 8006d4c:	4b5d      	ldr	r3, [pc, #372]	; (8006ec4 <Lslalom_L180+0x1b4>)
 8006d4e:	881b      	ldrh	r3, [r3, #0]
 8006d50:	f3c3 3300 	ubfx	r3, r3, #12, #1
 8006d54:	b2db      	uxtb	r3, r3
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d108      	bne.n	8006d6c <Lslalom_L180+0x5c>
			turn_dir(DIR_TURN_L90, 1);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8006d5a:	2101      	movs	r1, #1
 8006d5c:	20ff      	movs	r0, #255	; 0xff
 8006d5e:	f007 fa13 	bl	800e188 <turn_dir>
			turn_dir(DIR_TURN_L90, 1);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8006d62:	2101      	movs	r1, #1
 8006d64:	20ff      	movs	r0, #255	; 0xff
 8006d66:	f007 fa0f 	bl	800e188 <turn_dir>
 8006d6a:	e003      	b.n	8006d74 <Lslalom_L180+0x64>
		}else{
			turn_dir(DIR_TURN_L180_8, 3);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8006d6c:	2103      	movs	r1, #3
 8006d6e:	20fc      	movs	r0, #252	; 0xfc
 8006d70:	f007 fa0a 	bl	800e188 <turn_dir>
		}
		slalomB(10000, SPEED_LOW, LROTATE_OFFSET_B);
 8006d74:	2250      	movs	r2, #80	; 0x50
 8006d76:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8006d7a:	f242 7010 	movw	r0, #10000	; 0x2710
 8006d7e:	f7fe fd17 	bl	80057b0 <slalomB>
		}else{
			turn_dir(DIR_TURN_L180_8, 3);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
		}
		slalomB(10000, SPEED_HIGH_HIGH, LROTATE_H_H_OFFSET_B);
	}
}
 8006d82:	e09a      	b.n	8006eba <Lslalom_L180+0x1aa>
	}else if(run_mode == MIDDLE){
 8006d84:	4b4e      	ldr	r3, [pc, #312]	; (8006ec0 <Lslalom_L180+0x1b0>)
 8006d86:	781b      	ldrb	r3, [r3, #0]
 8006d88:	b2db      	uxtb	r3, r3
 8006d8a:	2b02      	cmp	r3, #2
 8006d8c:	d12e      	bne.n	8006dec <Lslalom_L180+0xdc>
		slalomF(10000, SPEED_MIDDLE, LROTATE_M_OFFSET_F, LROTATE_M_WALL_FL, LROTATE_M_WALL_FR);
 8006d8e:	2364      	movs	r3, #100	; 0x64
 8006d90:	9300      	str	r3, [sp, #0]
 8006d92:	23c8      	movs	r3, #200	; 0xc8
 8006d94:	2232      	movs	r2, #50	; 0x32
 8006d96:	f44f 7116 	mov.w	r1, #600	; 0x258
 8006d9a:	f242 7010 	movw	r0, #10000	; 0x2710
 8006d9e:	f7fe fb67 	bl	8005470 <slalomF>
		slalomR(LROTATE_M_DEGACCEL, LROTATE_M_OMEGA, 180, SPEED_MIDDLE);
 8006da2:	f44f 7316 	mov.w	r3, #600	; 0x258
 8006da6:	22b4      	movs	r2, #180	; 0xb4
 8006da8:	f44f 71c6 	mov.w	r1, #396	; 0x18c
 8006dac:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8006db0:	f7fe fbda 	bl	8005568 <slalomR>
		if(!MF.FLAG.XDIR){
 8006db4:	4b43      	ldr	r3, [pc, #268]	; (8006ec4 <Lslalom_L180+0x1b4>)
 8006db6:	881b      	ldrh	r3, [r3, #0]
 8006db8:	f3c3 3300 	ubfx	r3, r3, #12, #1
 8006dbc:	b2db      	uxtb	r3, r3
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d108      	bne.n	8006dd4 <Lslalom_L180+0xc4>
			turn_dir(DIR_TURN_L90, 1);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8006dc2:	2101      	movs	r1, #1
 8006dc4:	20ff      	movs	r0, #255	; 0xff
 8006dc6:	f007 f9df 	bl	800e188 <turn_dir>
			turn_dir(DIR_TURN_L90, 1);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8006dca:	2101      	movs	r1, #1
 8006dcc:	20ff      	movs	r0, #255	; 0xff
 8006dce:	f007 f9db 	bl	800e188 <turn_dir>
 8006dd2:	e003      	b.n	8006ddc <Lslalom_L180+0xcc>
			turn_dir(DIR_TURN_L180_8, 3);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8006dd4:	2103      	movs	r1, #3
 8006dd6:	20fc      	movs	r0, #252	; 0xfc
 8006dd8:	f007 f9d6 	bl	800e188 <turn_dir>
		slalomB(10000, SPEED_MIDDLE, LROTATE_M_OFFSET_B);
 8006ddc:	224b      	movs	r2, #75	; 0x4b
 8006dde:	f44f 7116 	mov.w	r1, #600	; 0x258
 8006de2:	f242 7010 	movw	r0, #10000	; 0x2710
 8006de6:	f7fe fce3 	bl	80057b0 <slalomB>
}
 8006dea:	e066      	b.n	8006eba <Lslalom_L180+0x1aa>
	}else if(run_mode == HIGH){
 8006dec:	4b34      	ldr	r3, [pc, #208]	; (8006ec0 <Lslalom_L180+0x1b0>)
 8006dee:	781b      	ldrb	r3, [r3, #0]
 8006df0:	b2db      	uxtb	r3, r3
 8006df2:	2b03      	cmp	r3, #3
 8006df4:	d12e      	bne.n	8006e54 <Lslalom_L180+0x144>
		slalomF(10000, SPEED_HIGH, LROTATE_H_OFFSET_F, LROTATE_H_WALL_FL, LROTATE_H_WALL_FR);
 8006df6:	235a      	movs	r3, #90	; 0x5a
 8006df8:	9300      	str	r3, [sp, #0]
 8006dfa:	23b4      	movs	r3, #180	; 0xb4
 8006dfc:	221c      	movs	r2, #28
 8006dfe:	f44f 7148 	mov.w	r1, #800	; 0x320
 8006e02:	f242 7010 	movw	r0, #10000	; 0x2710
 8006e06:	f7fe fb33 	bl	8005470 <slalomF>
		slalomR(LROTATE_H_DEGACCEL, LROTATE_H_OMEGA, 180, SPEED_HIGH);
 8006e0a:	f44f 7348 	mov.w	r3, #800	; 0x320
 8006e0e:	22b4      	movs	r2, #180	; 0xb4
 8006e10:	f44f 710c 	mov.w	r1, #560	; 0x230
 8006e14:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8006e18:	f7fe fba6 	bl	8005568 <slalomR>
		if(!MF.FLAG.XDIR){
 8006e1c:	4b29      	ldr	r3, [pc, #164]	; (8006ec4 <Lslalom_L180+0x1b4>)
 8006e1e:	881b      	ldrh	r3, [r3, #0]
 8006e20:	f3c3 3300 	ubfx	r3, r3, #12, #1
 8006e24:	b2db      	uxtb	r3, r3
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d108      	bne.n	8006e3c <Lslalom_L180+0x12c>
			turn_dir(DIR_TURN_L90, 1);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8006e2a:	2101      	movs	r1, #1
 8006e2c:	20ff      	movs	r0, #255	; 0xff
 8006e2e:	f007 f9ab 	bl	800e188 <turn_dir>
			turn_dir(DIR_TURN_L90, 1);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8006e32:	2101      	movs	r1, #1
 8006e34:	20ff      	movs	r0, #255	; 0xff
 8006e36:	f007 f9a7 	bl	800e188 <turn_dir>
 8006e3a:	e003      	b.n	8006e44 <Lslalom_L180+0x134>
			turn_dir(DIR_TURN_L180_8, 3);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8006e3c:	2103      	movs	r1, #3
 8006e3e:	20fc      	movs	r0, #252	; 0xfc
 8006e40:	f007 f9a2 	bl	800e188 <turn_dir>
		slalomB(10000, SPEED_HIGH, LROTATE_H_OFFSET_B);
 8006e44:	2250      	movs	r2, #80	; 0x50
 8006e46:	f44f 7148 	mov.w	r1, #800	; 0x320
 8006e4a:	f242 7010 	movw	r0, #10000	; 0x2710
 8006e4e:	f7fe fcaf 	bl	80057b0 <slalomB>
}
 8006e52:	e032      	b.n	8006eba <Lslalom_L180+0x1aa>
	}else if(run_mode == HIGH_HIGH){
 8006e54:	4b1a      	ldr	r3, [pc, #104]	; (8006ec0 <Lslalom_L180+0x1b0>)
 8006e56:	781b      	ldrb	r3, [r3, #0]
 8006e58:	b2db      	uxtb	r3, r3
 8006e5a:	2b04      	cmp	r3, #4
 8006e5c:	d12d      	bne.n	8006eba <Lslalom_L180+0x1aa>
		slalomF(10000, SPEED_HIGH_HIGH, LROTATE_H_H_OFFSET_F, LROTATE_H_H_WALL_FL, LROTATE_H_H_WALL_FR);
 8006e5e:	235a      	movs	r3, #90	; 0x5a
 8006e60:	9300      	str	r3, [sp, #0]
 8006e62:	23b4      	movs	r3, #180	; 0xb4
 8006e64:	2235      	movs	r2, #53	; 0x35
 8006e66:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8006e6a:	f242 7010 	movw	r0, #10000	; 0x2710
 8006e6e:	f7fe faff 	bl	8005470 <slalomF>
		slalomR(LROTATE_H_H_DEGACCEL, LROTATE_H_H_OMEGA, 180, SPEED_HIGH_HIGH);
 8006e72:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006e76:	22b4      	movs	r2, #180	; 0xb4
 8006e78:	f44f 7125 	mov.w	r1, #660	; 0x294
 8006e7c:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 8006e80:	f7fe fb72 	bl	8005568 <slalomR>
		if(!MF.FLAG.XDIR){
 8006e84:	4b0f      	ldr	r3, [pc, #60]	; (8006ec4 <Lslalom_L180+0x1b4>)
 8006e86:	881b      	ldrh	r3, [r3, #0]
 8006e88:	f3c3 3300 	ubfx	r3, r3, #12, #1
 8006e8c:	b2db      	uxtb	r3, r3
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d108      	bne.n	8006ea4 <Lslalom_L180+0x194>
			turn_dir(DIR_TURN_L90, 1);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8006e92:	2101      	movs	r1, #1
 8006e94:	20ff      	movs	r0, #255	; 0xff
 8006e96:	f007 f977 	bl	800e188 <turn_dir>
			turn_dir(DIR_TURN_L90, 1);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8006e9a:	2101      	movs	r1, #1
 8006e9c:	20ff      	movs	r0, #255	; 0xff
 8006e9e:	f007 f973 	bl	800e188 <turn_dir>
 8006ea2:	e003      	b.n	8006eac <Lslalom_L180+0x19c>
			turn_dir(DIR_TURN_L180_8, 3);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8006ea4:	2103      	movs	r1, #3
 8006ea6:	20fc      	movs	r0, #252	; 0xfc
 8006ea8:	f007 f96e 	bl	800e188 <turn_dir>
		slalomB(10000, SPEED_HIGH_HIGH, LROTATE_H_H_OFFSET_B);
 8006eac:	2235      	movs	r2, #53	; 0x35
 8006eae:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8006eb2:	f242 7010 	movw	r0, #10000	; 0x2710
 8006eb6:	f7fe fc7b 	bl	80057b0 <slalomB>
}
 8006eba:	bf00      	nop
 8006ebc:	46bd      	mov	sp, r7
 8006ebe:	bd80      	pop	{r7, pc}
 8006ec0:	20000456 	.word	0x20000456
 8006ec4:	20000f68 	.word	0x20000f68

08006ec8 <v_R45>:
//v_R45
// 区画中心から右に45度回転する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void v_R45(void){
 8006ec8:	b580      	push	{r7, lr}
 8006eca:	b082      	sub	sp, #8
 8006ecc:	af02      	add	r7, sp, #8
	full_led_write(PURPLE);
 8006ece:	2005      	movs	r0, #5
 8006ed0:	f008 ffc8 	bl	800fe64 <full_led_write>
	if(run_mode == LOW){
 8006ed4:	4bb6      	ldr	r3, [pc, #728]	; (80071b0 <v_R45+0x2e8>)
 8006ed6:	781b      	ldrb	r3, [r3, #0]
 8006ed8:	b2db      	uxtb	r3, r3
 8006eda:	2b01      	cmp	r3, #1
 8006edc:	d155      	bne.n	8006f8a <v_R45+0xc2>
		if(!MF2.FLAG.V){
 8006ede:	4bb5      	ldr	r3, [pc, #724]	; (80071b4 <v_R45+0x2ec>)
 8006ee0:	881b      	ldrh	r3, [r3, #0]
 8006ee2:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8006ee6:	b2db      	uxtb	r3, r3
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d10c      	bne.n	8006f06 <v_R45+0x3e>
			slalomF(10000, SPEED_LOW, V_OFFSET_F, NO_WALL, NO_WALL);
 8006eec:	f241 3388 	movw	r3, #5000	; 0x1388
 8006ef0:	9300      	str	r3, [sp, #0]
 8006ef2:	f241 3388 	movw	r3, #5000	; 0x1388
 8006ef6:	2228      	movs	r2, #40	; 0x28
 8006ef8:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8006efc:	f242 7010 	movw	r0, #10000	; 0x2710
 8006f00:	f7fe fab6 	bl	8005470 <slalomF>
 8006f04:	e00b      	b.n	8006f1e <v_R45+0x56>
		}else{
			slalomF(10000, SPEED_LOW, V_OFFSET_B, NO_WALL, NO_WALL);
 8006f06:	f241 3388 	movw	r3, #5000	; 0x1388
 8006f0a:	9300      	str	r3, [sp, #0]
 8006f0c:	f241 3388 	movw	r3, #5000	; 0x1388
 8006f10:	2250      	movs	r2, #80	; 0x50
 8006f12:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8006f16:	f242 7010 	movw	r0, #10000	; 0x2710
 8006f1a:	f7fe faa9 	bl	8005470 <slalomF>
		}
		slalomR(-V_DEGACCEL, -V_OMEGA, -45, SPEED_LOW);
 8006f1e:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8006f22:	f06f 022c 	mvn.w	r2, #44	; 0x2c
 8006f26:	49a4      	ldr	r1, [pc, #656]	; (80071b8 <v_R45+0x2f0>)
 8006f28:	48a4      	ldr	r0, [pc, #656]	; (80071bc <v_R45+0x2f4>)
 8006f2a:	f7fe fb1d 	bl	8005568 <slalomR>

		turn_dir(DIR_TURN_R45_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 8006f2e:	2103      	movs	r1, #3
 8006f30:	2001      	movs	r0, #1
 8006f32:	f007 f929 	bl	800e188 <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 8006f36:	4b9f      	ldr	r3, [pc, #636]	; (80071b4 <v_R45+0x2ec>)
 8006f38:	881b      	ldrh	r3, [r3, #0]
 8006f3a:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8006f3e:	b2db      	uxtb	r3, r3
 8006f40:	3301      	adds	r3, #1
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	f003 0301 	and.w	r3, r3, #1
 8006f48:	bfb8      	it	lt
 8006f4a:	425b      	neglt	r3, r3
 8006f4c:	f003 0301 	and.w	r3, r3, #1
 8006f50:	b2d9      	uxtb	r1, r3
 8006f52:	4a98      	ldr	r2, [pc, #608]	; (80071b4 <v_R45+0x2ec>)
 8006f54:	8813      	ldrh	r3, [r2, #0]
 8006f56:	f361 03c3 	bfi	r3, r1, #3, #1
 8006f5a:	8013      	strh	r3, [r2, #0]

		if(!MF2.FLAG.V){
 8006f5c:	4b95      	ldr	r3, [pc, #596]	; (80071b4 <v_R45+0x2ec>)
 8006f5e:	881b      	ldrh	r3, [r3, #0]
 8006f60:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8006f64:	b2db      	uxtb	r3, r3
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d107      	bne.n	8006f7a <v_R45+0xb2>
			slalomB(10000, SPEED_LOW, V_OFFSET_F);
 8006f6a:	2228      	movs	r2, #40	; 0x28
 8006f6c:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8006f70:	f242 7010 	movw	r0, #10000	; 0x2710
 8006f74:	f7fe fc1c 	bl	80057b0 <slalomB>
			slalomB(10000, SPEED_HIGH_HIGH, V_H_H_OFFSET_F+10);
		}else{
			slalomB(10000, SPEED_HIGH_HIGH, V_H_H_OFFSET_B);
		}
	}
}
 8006f78:	e117      	b.n	80071aa <v_R45+0x2e2>
			slalomB(10000, SPEED_LOW, V_OFFSET_B+5);
 8006f7a:	2255      	movs	r2, #85	; 0x55
 8006f7c:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8006f80:	f242 7010 	movw	r0, #10000	; 0x2710
 8006f84:	f7fe fc14 	bl	80057b0 <slalomB>
}
 8006f88:	e10f      	b.n	80071aa <v_R45+0x2e2>
	}else if(run_mode == MIDDLE){
 8006f8a:	4b89      	ldr	r3, [pc, #548]	; (80071b0 <v_R45+0x2e8>)
 8006f8c:	781b      	ldrb	r3, [r3, #0]
 8006f8e:	b2db      	uxtb	r3, r3
 8006f90:	2b02      	cmp	r3, #2
 8006f92:	d155      	bne.n	8007040 <v_R45+0x178>
		if(!MF2.FLAG.V){
 8006f94:	4b87      	ldr	r3, [pc, #540]	; (80071b4 <v_R45+0x2ec>)
 8006f96:	881b      	ldrh	r3, [r3, #0]
 8006f98:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8006f9c:	b2db      	uxtb	r3, r3
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d10c      	bne.n	8006fbc <v_R45+0xf4>
			slalomF(10000, SPEED_MIDDLE, V_M_OFFSET_F, NO_WALL, NO_WALL);
 8006fa2:	f241 3388 	movw	r3, #5000	; 0x1388
 8006fa6:	9300      	str	r3, [sp, #0]
 8006fa8:	f241 3388 	movw	r3, #5000	; 0x1388
 8006fac:	2228      	movs	r2, #40	; 0x28
 8006fae:	f44f 7116 	mov.w	r1, #600	; 0x258
 8006fb2:	f242 7010 	movw	r0, #10000	; 0x2710
 8006fb6:	f7fe fa5b 	bl	8005470 <slalomF>
 8006fba:	e00b      	b.n	8006fd4 <v_R45+0x10c>
			slalomF(10000, SPEED_MIDDLE, V_M_OFFSET_B-18, NO_WALL, NO_WALL);
 8006fbc:	f241 3388 	movw	r3, #5000	; 0x1388
 8006fc0:	9300      	str	r3, [sp, #0]
 8006fc2:	f241 3388 	movw	r3, #5000	; 0x1388
 8006fc6:	224e      	movs	r2, #78	; 0x4e
 8006fc8:	f44f 7116 	mov.w	r1, #600	; 0x258
 8006fcc:	f242 7010 	movw	r0, #10000	; 0x2710
 8006fd0:	f7fe fa4e 	bl	8005470 <slalomF>
		slalomR(-V_M_DEGACCEL, -V_M_OMEGA, -45, SPEED_MIDDLE);
 8006fd4:	f44f 7316 	mov.w	r3, #600	; 0x258
 8006fd8:	f06f 022c 	mvn.w	r2, #44	; 0x2c
 8006fdc:	4978      	ldr	r1, [pc, #480]	; (80071c0 <v_R45+0x2f8>)
 8006fde:	4879      	ldr	r0, [pc, #484]	; (80071c4 <v_R45+0x2fc>)
 8006fe0:	f7fe fac2 	bl	8005568 <slalomR>
		turn_dir(DIR_TURN_R45_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 8006fe4:	2103      	movs	r1, #3
 8006fe6:	2001      	movs	r0, #1
 8006fe8:	f007 f8ce 	bl	800e188 <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 8006fec:	4b71      	ldr	r3, [pc, #452]	; (80071b4 <v_R45+0x2ec>)
 8006fee:	881b      	ldrh	r3, [r3, #0]
 8006ff0:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8006ff4:	b2db      	uxtb	r3, r3
 8006ff6:	3301      	adds	r3, #1
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	f003 0301 	and.w	r3, r3, #1
 8006ffe:	bfb8      	it	lt
 8007000:	425b      	neglt	r3, r3
 8007002:	f003 0301 	and.w	r3, r3, #1
 8007006:	b2d9      	uxtb	r1, r3
 8007008:	4a6a      	ldr	r2, [pc, #424]	; (80071b4 <v_R45+0x2ec>)
 800700a:	8813      	ldrh	r3, [r2, #0]
 800700c:	f361 03c3 	bfi	r3, r1, #3, #1
 8007010:	8013      	strh	r3, [r2, #0]
		if(!MF2.FLAG.V){
 8007012:	4b68      	ldr	r3, [pc, #416]	; (80071b4 <v_R45+0x2ec>)
 8007014:	881b      	ldrh	r3, [r3, #0]
 8007016:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800701a:	b2db      	uxtb	r3, r3
 800701c:	2b00      	cmp	r3, #0
 800701e:	d107      	bne.n	8007030 <v_R45+0x168>
			slalomB(10000, SPEED_MIDDLE, V_M_OFFSET_F+10);
 8007020:	2232      	movs	r2, #50	; 0x32
 8007022:	f44f 7116 	mov.w	r1, #600	; 0x258
 8007026:	f242 7010 	movw	r0, #10000	; 0x2710
 800702a:	f7fe fbc1 	bl	80057b0 <slalomB>
}
 800702e:	e0bc      	b.n	80071aa <v_R45+0x2e2>
			slalomB(10000, SPEED_MIDDLE, V_M_OFFSET_B);
 8007030:	2260      	movs	r2, #96	; 0x60
 8007032:	f44f 7116 	mov.w	r1, #600	; 0x258
 8007036:	f242 7010 	movw	r0, #10000	; 0x2710
 800703a:	f7fe fbb9 	bl	80057b0 <slalomB>
}
 800703e:	e0b4      	b.n	80071aa <v_R45+0x2e2>
	}else if(run_mode == HIGH){
 8007040:	4b5b      	ldr	r3, [pc, #364]	; (80071b0 <v_R45+0x2e8>)
 8007042:	781b      	ldrb	r3, [r3, #0]
 8007044:	b2db      	uxtb	r3, r3
 8007046:	2b03      	cmp	r3, #3
 8007048:	d155      	bne.n	80070f6 <v_R45+0x22e>
		if(!MF2.FLAG.V){
 800704a:	4b5a      	ldr	r3, [pc, #360]	; (80071b4 <v_R45+0x2ec>)
 800704c:	881b      	ldrh	r3, [r3, #0]
 800704e:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8007052:	b2db      	uxtb	r3, r3
 8007054:	2b00      	cmp	r3, #0
 8007056:	d10c      	bne.n	8007072 <v_R45+0x1aa>
			slalomF(10000, SPEED_HIGH, V_H_OFFSET_F, NO_WALL, NO_WALL);
 8007058:	f241 3388 	movw	r3, #5000	; 0x1388
 800705c:	9300      	str	r3, [sp, #0]
 800705e:	f241 3388 	movw	r3, #5000	; 0x1388
 8007062:	2217      	movs	r2, #23
 8007064:	f44f 7148 	mov.w	r1, #800	; 0x320
 8007068:	f242 7010 	movw	r0, #10000	; 0x2710
 800706c:	f7fe fa00 	bl	8005470 <slalomF>
 8007070:	e00b      	b.n	800708a <v_R45+0x1c2>
			slalomF(10000, SPEED_HIGH, V_H_OFFSET_B-18, NO_WALL, NO_WALL);
 8007072:	f241 3388 	movw	r3, #5000	; 0x1388
 8007076:	9300      	str	r3, [sp, #0]
 8007078:	f241 3388 	movw	r3, #5000	; 0x1388
 800707c:	2239      	movs	r2, #57	; 0x39
 800707e:	f44f 7148 	mov.w	r1, #800	; 0x320
 8007082:	f242 7010 	movw	r0, #10000	; 0x2710
 8007086:	f7fe f9f3 	bl	8005470 <slalomF>
		slalomR(-V_H_DEGACCEL, -V_H_OMEGA, -45, SPEED_HIGH);
 800708a:	f44f 7348 	mov.w	r3, #800	; 0x320
 800708e:	f06f 022c 	mvn.w	r2, #44	; 0x2c
 8007092:	494b      	ldr	r1, [pc, #300]	; (80071c0 <v_R45+0x2f8>)
 8007094:	484b      	ldr	r0, [pc, #300]	; (80071c4 <v_R45+0x2fc>)
 8007096:	f7fe fa67 	bl	8005568 <slalomR>
		turn_dir(DIR_TURN_R45_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 800709a:	2103      	movs	r1, #3
 800709c:	2001      	movs	r0, #1
 800709e:	f007 f873 	bl	800e188 <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 80070a2:	4b44      	ldr	r3, [pc, #272]	; (80071b4 <v_R45+0x2ec>)
 80070a4:	881b      	ldrh	r3, [r3, #0]
 80070a6:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80070aa:	b2db      	uxtb	r3, r3
 80070ac:	3301      	adds	r3, #1
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	f003 0301 	and.w	r3, r3, #1
 80070b4:	bfb8      	it	lt
 80070b6:	425b      	neglt	r3, r3
 80070b8:	f003 0301 	and.w	r3, r3, #1
 80070bc:	b2d9      	uxtb	r1, r3
 80070be:	4a3d      	ldr	r2, [pc, #244]	; (80071b4 <v_R45+0x2ec>)
 80070c0:	8813      	ldrh	r3, [r2, #0]
 80070c2:	f361 03c3 	bfi	r3, r1, #3, #1
 80070c6:	8013      	strh	r3, [r2, #0]
		if(!MF2.FLAG.V){
 80070c8:	4b3a      	ldr	r3, [pc, #232]	; (80071b4 <v_R45+0x2ec>)
 80070ca:	881b      	ldrh	r3, [r3, #0]
 80070cc:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80070d0:	b2db      	uxtb	r3, r3
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d107      	bne.n	80070e6 <v_R45+0x21e>
			slalomB(10000, SPEED_HIGH, V_H_OFFSET_F+10);
 80070d6:	2221      	movs	r2, #33	; 0x21
 80070d8:	f44f 7148 	mov.w	r1, #800	; 0x320
 80070dc:	f242 7010 	movw	r0, #10000	; 0x2710
 80070e0:	f7fe fb66 	bl	80057b0 <slalomB>
}
 80070e4:	e061      	b.n	80071aa <v_R45+0x2e2>
			slalomB(10000, SPEED_HIGH, V_H_OFFSET_B);
 80070e6:	224b      	movs	r2, #75	; 0x4b
 80070e8:	f44f 7148 	mov.w	r1, #800	; 0x320
 80070ec:	f242 7010 	movw	r0, #10000	; 0x2710
 80070f0:	f7fe fb5e 	bl	80057b0 <slalomB>
}
 80070f4:	e059      	b.n	80071aa <v_R45+0x2e2>
	}else if(run_mode == HIGH_HIGH){
 80070f6:	4b2e      	ldr	r3, [pc, #184]	; (80071b0 <v_R45+0x2e8>)
 80070f8:	781b      	ldrb	r3, [r3, #0]
 80070fa:	b2db      	uxtb	r3, r3
 80070fc:	2b04      	cmp	r3, #4
 80070fe:	d154      	bne.n	80071aa <v_R45+0x2e2>
		if(!MF2.FLAG.V){
 8007100:	4b2c      	ldr	r3, [pc, #176]	; (80071b4 <v_R45+0x2ec>)
 8007102:	881b      	ldrh	r3, [r3, #0]
 8007104:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8007108:	b2db      	uxtb	r3, r3
 800710a:	2b00      	cmp	r3, #0
 800710c:	d10c      	bne.n	8007128 <v_R45+0x260>
			slalomF(10000, SPEED_HIGH_HIGH, V_H_H_OFFSET_F, NO_WALL, NO_WALL);
 800710e:	f241 3388 	movw	r3, #5000	; 0x1388
 8007112:	9300      	str	r3, [sp, #0]
 8007114:	f241 3388 	movw	r3, #5000	; 0x1388
 8007118:	2214      	movs	r2, #20
 800711a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800711e:	f242 7010 	movw	r0, #10000	; 0x2710
 8007122:	f7fe f9a5 	bl	8005470 <slalomF>
 8007126:	e00b      	b.n	8007140 <v_R45+0x278>
			slalomF(10000, SPEED_HIGH_HIGH, V_H_H_OFFSET_B-18, NO_WALL, NO_WALL);
 8007128:	f241 3388 	movw	r3, #5000	; 0x1388
 800712c:	9300      	str	r3, [sp, #0]
 800712e:	f241 3388 	movw	r3, #5000	; 0x1388
 8007132:	2228      	movs	r2, #40	; 0x28
 8007134:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8007138:	f242 7010 	movw	r0, #10000	; 0x2710
 800713c:	f7fe f998 	bl	8005470 <slalomF>
		slalomR(-V_H_H_DEGACCEL, -V_H_H_OMEGA, -45, SPEED_HIGH_HIGH);
 8007140:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007144:	f06f 022c 	mvn.w	r2, #44	; 0x2c
 8007148:	491f      	ldr	r1, [pc, #124]	; (80071c8 <v_R45+0x300>)
 800714a:	4820      	ldr	r0, [pc, #128]	; (80071cc <v_R45+0x304>)
 800714c:	f7fe fa0c 	bl	8005568 <slalomR>
		turn_dir(DIR_TURN_R45_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 8007150:	2103      	movs	r1, #3
 8007152:	2001      	movs	r0, #1
 8007154:	f007 f818 	bl	800e188 <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 8007158:	4b16      	ldr	r3, [pc, #88]	; (80071b4 <v_R45+0x2ec>)
 800715a:	881b      	ldrh	r3, [r3, #0]
 800715c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8007160:	b2db      	uxtb	r3, r3
 8007162:	3301      	adds	r3, #1
 8007164:	2b00      	cmp	r3, #0
 8007166:	f003 0301 	and.w	r3, r3, #1
 800716a:	bfb8      	it	lt
 800716c:	425b      	neglt	r3, r3
 800716e:	f003 0301 	and.w	r3, r3, #1
 8007172:	b2d9      	uxtb	r1, r3
 8007174:	4a0f      	ldr	r2, [pc, #60]	; (80071b4 <v_R45+0x2ec>)
 8007176:	8813      	ldrh	r3, [r2, #0]
 8007178:	f361 03c3 	bfi	r3, r1, #3, #1
 800717c:	8013      	strh	r3, [r2, #0]
		if(!MF2.FLAG.V){
 800717e:	4b0d      	ldr	r3, [pc, #52]	; (80071b4 <v_R45+0x2ec>)
 8007180:	881b      	ldrh	r3, [r3, #0]
 8007182:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8007186:	b2db      	uxtb	r3, r3
 8007188:	2b00      	cmp	r3, #0
 800718a:	d107      	bne.n	800719c <v_R45+0x2d4>
			slalomB(10000, SPEED_HIGH_HIGH, V_H_H_OFFSET_F+10);
 800718c:	221e      	movs	r2, #30
 800718e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8007192:	f242 7010 	movw	r0, #10000	; 0x2710
 8007196:	f7fe fb0b 	bl	80057b0 <slalomB>
}
 800719a:	e006      	b.n	80071aa <v_R45+0x2e2>
			slalomB(10000, SPEED_HIGH_HIGH, V_H_H_OFFSET_B);
 800719c:	223a      	movs	r2, #58	; 0x3a
 800719e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80071a2:	f242 7010 	movw	r0, #10000	; 0x2710
 80071a6:	f7fe fb03 	bl	80057b0 <slalomB>
}
 80071aa:	bf00      	nop
 80071ac:	46bd      	mov	sp, r7
 80071ae:	bd80      	pop	{r7, pc}
 80071b0:	20000456 	.word	0x20000456
 80071b4:	20000f64 	.word	0x20000f64
 80071b8:	fffffed4 	.word	0xfffffed4
 80071bc:	fffff448 	.word	0xfffff448
 80071c0:	fffffe70 	.word	0xfffffe70
 80071c4:	ffffe0c0 	.word	0xffffe0c0
 80071c8:	fffffda8 	.word	0xfffffda8
 80071cc:	ffffd8f0 	.word	0xffffd8f0

080071d0 <v_L45>:
//v_L45
// 区画中心から左に45度回転する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void v_L45(void){
 80071d0:	b580      	push	{r7, lr}
 80071d2:	b082      	sub	sp, #8
 80071d4:	af02      	add	r7, sp, #8
	full_led_write(YELLOW);
 80071d6:	2006      	movs	r0, #6
 80071d8:	f008 fe44 	bl	800fe64 <full_led_write>
	if(run_mode == LOW){
 80071dc:	4bb8      	ldr	r3, [pc, #736]	; (80074c0 <v_L45+0x2f0>)
 80071de:	781b      	ldrb	r3, [r3, #0]
 80071e0:	b2db      	uxtb	r3, r3
 80071e2:	2b01      	cmp	r3, #1
 80071e4:	d156      	bne.n	8007294 <v_L45+0xc4>
		if(!MF2.FLAG.V){
 80071e6:	4bb7      	ldr	r3, [pc, #732]	; (80074c4 <v_L45+0x2f4>)
 80071e8:	881b      	ldrh	r3, [r3, #0]
 80071ea:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80071ee:	b2db      	uxtb	r3, r3
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d10c      	bne.n	800720e <v_L45+0x3e>
			slalomF(10000, SPEED_LOW, V_OFFSET_F, NO_WALL, NO_WALL);
 80071f4:	f241 3388 	movw	r3, #5000	; 0x1388
 80071f8:	9300      	str	r3, [sp, #0]
 80071fa:	f241 3388 	movw	r3, #5000	; 0x1388
 80071fe:	2228      	movs	r2, #40	; 0x28
 8007200:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8007204:	f242 7010 	movw	r0, #10000	; 0x2710
 8007208:	f7fe f932 	bl	8005470 <slalomF>
 800720c:	e00b      	b.n	8007226 <v_L45+0x56>
		}else{
			slalomF(10000, SPEED_LOW, V_OFFSET_B+5, NO_WALL, NO_WALL);
 800720e:	f241 3388 	movw	r3, #5000	; 0x1388
 8007212:	9300      	str	r3, [sp, #0]
 8007214:	f241 3388 	movw	r3, #5000	; 0x1388
 8007218:	2255      	movs	r2, #85	; 0x55
 800721a:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800721e:	f242 7010 	movw	r0, #10000	; 0x2710
 8007222:	f7fe f925 	bl	8005470 <slalomF>
		}
		slalomR(V_DEGACCEL, V_OMEGA, 50, SPEED_LOW);
 8007226:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800722a:	2232      	movs	r2, #50	; 0x32
 800722c:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8007230:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8007234:	f7fe f998 	bl	8005568 <slalomR>

		turn_dir(DIR_TURN_L45_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 8007238:	2103      	movs	r1, #3
 800723a:	20ff      	movs	r0, #255	; 0xff
 800723c:	f006 ffa4 	bl	800e188 <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 8007240:	4ba0      	ldr	r3, [pc, #640]	; (80074c4 <v_L45+0x2f4>)
 8007242:	881b      	ldrh	r3, [r3, #0]
 8007244:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8007248:	b2db      	uxtb	r3, r3
 800724a:	3301      	adds	r3, #1
 800724c:	2b00      	cmp	r3, #0
 800724e:	f003 0301 	and.w	r3, r3, #1
 8007252:	bfb8      	it	lt
 8007254:	425b      	neglt	r3, r3
 8007256:	f003 0301 	and.w	r3, r3, #1
 800725a:	b2d9      	uxtb	r1, r3
 800725c:	4a99      	ldr	r2, [pc, #612]	; (80074c4 <v_L45+0x2f4>)
 800725e:	8813      	ldrh	r3, [r2, #0]
 8007260:	f361 03c3 	bfi	r3, r1, #3, #1
 8007264:	8013      	strh	r3, [r2, #0]

		if(!MF2.FLAG.V){
 8007266:	4b97      	ldr	r3, [pc, #604]	; (80074c4 <v_L45+0x2f4>)
 8007268:	881b      	ldrh	r3, [r3, #0]
 800726a:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800726e:	b2db      	uxtb	r3, r3
 8007270:	2b00      	cmp	r3, #0
 8007272:	d107      	bne.n	8007284 <v_L45+0xb4>
			slalomB(10000, SPEED_LOW, V_OFFSET_F+15);
 8007274:	2237      	movs	r2, #55	; 0x37
 8007276:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800727a:	f242 7010 	movw	r0, #10000	; 0x2710
 800727e:	f7fe fa97 	bl	80057b0 <slalomB>
			slalomB(10000, SPEED_HIGH_HIGH, V_H_H_OFFSET_F+35);
		}else{
			slalomB(10000, SPEED_HIGH_HIGH, V_H_H_OFFSET_B+20);
		}
	}
}
 8007282:	e11a      	b.n	80074ba <v_L45+0x2ea>
			slalomB(10000, SPEED_LOW, V_OFFSET_B+5);
 8007284:	2255      	movs	r2, #85	; 0x55
 8007286:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800728a:	f242 7010 	movw	r0, #10000	; 0x2710
 800728e:	f7fe fa8f 	bl	80057b0 <slalomB>
}
 8007292:	e112      	b.n	80074ba <v_L45+0x2ea>
	}else if(run_mode == MIDDLE){
 8007294:	4b8a      	ldr	r3, [pc, #552]	; (80074c0 <v_L45+0x2f0>)
 8007296:	781b      	ldrb	r3, [r3, #0]
 8007298:	b2db      	uxtb	r3, r3
 800729a:	2b02      	cmp	r3, #2
 800729c:	d156      	bne.n	800734c <v_L45+0x17c>
		if(!MF2.FLAG.V){
 800729e:	4b89      	ldr	r3, [pc, #548]	; (80074c4 <v_L45+0x2f4>)
 80072a0:	881b      	ldrh	r3, [r3, #0]
 80072a2:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80072a6:	b2db      	uxtb	r3, r3
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d10c      	bne.n	80072c6 <v_L45+0xf6>
			slalomF(10000, SPEED_MIDDLE, V_M_OFFSET_F, NO_WALL, NO_WALL);
 80072ac:	f241 3388 	movw	r3, #5000	; 0x1388
 80072b0:	9300      	str	r3, [sp, #0]
 80072b2:	f241 3388 	movw	r3, #5000	; 0x1388
 80072b6:	2228      	movs	r2, #40	; 0x28
 80072b8:	f44f 7116 	mov.w	r1, #600	; 0x258
 80072bc:	f242 7010 	movw	r0, #10000	; 0x2710
 80072c0:	f7fe f8d6 	bl	8005470 <slalomF>
 80072c4:	e00b      	b.n	80072de <v_L45+0x10e>
			slalomF(10000, SPEED_MIDDLE, V_M_OFFSET_B-25, NO_WALL, NO_WALL);
 80072c6:	f241 3388 	movw	r3, #5000	; 0x1388
 80072ca:	9300      	str	r3, [sp, #0]
 80072cc:	f241 3388 	movw	r3, #5000	; 0x1388
 80072d0:	2247      	movs	r2, #71	; 0x47
 80072d2:	f44f 7116 	mov.w	r1, #600	; 0x258
 80072d6:	f242 7010 	movw	r0, #10000	; 0x2710
 80072da:	f7fe f8c9 	bl	8005470 <slalomF>
		slalomR(V_M_DEGACCEL, V_M_OMEGA, 45, SPEED_MIDDLE);
 80072de:	f44f 7316 	mov.w	r3, #600	; 0x258
 80072e2:	222d      	movs	r2, #45	; 0x2d
 80072e4:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80072e8:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 80072ec:	f7fe f93c 	bl	8005568 <slalomR>
		turn_dir(DIR_TURN_L45_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 80072f0:	2103      	movs	r1, #3
 80072f2:	20ff      	movs	r0, #255	; 0xff
 80072f4:	f006 ff48 	bl	800e188 <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 80072f8:	4b72      	ldr	r3, [pc, #456]	; (80074c4 <v_L45+0x2f4>)
 80072fa:	881b      	ldrh	r3, [r3, #0]
 80072fc:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8007300:	b2db      	uxtb	r3, r3
 8007302:	3301      	adds	r3, #1
 8007304:	2b00      	cmp	r3, #0
 8007306:	f003 0301 	and.w	r3, r3, #1
 800730a:	bfb8      	it	lt
 800730c:	425b      	neglt	r3, r3
 800730e:	f003 0301 	and.w	r3, r3, #1
 8007312:	b2d9      	uxtb	r1, r3
 8007314:	4a6b      	ldr	r2, [pc, #428]	; (80074c4 <v_L45+0x2f4>)
 8007316:	8813      	ldrh	r3, [r2, #0]
 8007318:	f361 03c3 	bfi	r3, r1, #3, #1
 800731c:	8013      	strh	r3, [r2, #0]
		if(!MF2.FLAG.V){
 800731e:	4b69      	ldr	r3, [pc, #420]	; (80074c4 <v_L45+0x2f4>)
 8007320:	881b      	ldrh	r3, [r3, #0]
 8007322:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8007326:	b2db      	uxtb	r3, r3
 8007328:	2b00      	cmp	r3, #0
 800732a:	d107      	bne.n	800733c <v_L45+0x16c>
			slalomB(10000, SPEED_MIDDLE, V_M_OFFSET_F+35);
 800732c:	224b      	movs	r2, #75	; 0x4b
 800732e:	f44f 7116 	mov.w	r1, #600	; 0x258
 8007332:	f242 7010 	movw	r0, #10000	; 0x2710
 8007336:	f7fe fa3b 	bl	80057b0 <slalomB>
}
 800733a:	e0be      	b.n	80074ba <v_L45+0x2ea>
			slalomB(10000, SPEED_MIDDLE, V_M_OFFSET_B);
 800733c:	2260      	movs	r2, #96	; 0x60
 800733e:	f44f 7116 	mov.w	r1, #600	; 0x258
 8007342:	f242 7010 	movw	r0, #10000	; 0x2710
 8007346:	f7fe fa33 	bl	80057b0 <slalomB>
}
 800734a:	e0b6      	b.n	80074ba <v_L45+0x2ea>
	}else if(run_mode == HIGH){
 800734c:	4b5c      	ldr	r3, [pc, #368]	; (80074c0 <v_L45+0x2f0>)
 800734e:	781b      	ldrb	r3, [r3, #0]
 8007350:	b2db      	uxtb	r3, r3
 8007352:	2b03      	cmp	r3, #3
 8007354:	d156      	bne.n	8007404 <v_L45+0x234>
		if(!MF2.FLAG.V){
 8007356:	4b5b      	ldr	r3, [pc, #364]	; (80074c4 <v_L45+0x2f4>)
 8007358:	881b      	ldrh	r3, [r3, #0]
 800735a:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800735e:	b2db      	uxtb	r3, r3
 8007360:	2b00      	cmp	r3, #0
 8007362:	d10c      	bne.n	800737e <v_L45+0x1ae>
			slalomF(10000, SPEED_HIGH, V_H_OFFSET_F, NO_WALL, NO_WALL);
 8007364:	f241 3388 	movw	r3, #5000	; 0x1388
 8007368:	9300      	str	r3, [sp, #0]
 800736a:	f241 3388 	movw	r3, #5000	; 0x1388
 800736e:	2217      	movs	r2, #23
 8007370:	f44f 7148 	mov.w	r1, #800	; 0x320
 8007374:	f242 7010 	movw	r0, #10000	; 0x2710
 8007378:	f7fe f87a 	bl	8005470 <slalomF>
 800737c:	e00b      	b.n	8007396 <v_L45+0x1c6>
			slalomF(10000, SPEED_HIGH, V_H_OFFSET_B-25, NO_WALL, NO_WALL);
 800737e:	f241 3388 	movw	r3, #5000	; 0x1388
 8007382:	9300      	str	r3, [sp, #0]
 8007384:	f241 3388 	movw	r3, #5000	; 0x1388
 8007388:	2232      	movs	r2, #50	; 0x32
 800738a:	f44f 7148 	mov.w	r1, #800	; 0x320
 800738e:	f242 7010 	movw	r0, #10000	; 0x2710
 8007392:	f7fe f86d 	bl	8005470 <slalomF>
		slalomR(V_H_DEGACCEL, V_H_OMEGA, 45, SPEED_HIGH);
 8007396:	f44f 7348 	mov.w	r3, #800	; 0x320
 800739a:	222d      	movs	r2, #45	; 0x2d
 800739c:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80073a0:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 80073a4:	f7fe f8e0 	bl	8005568 <slalomR>
		turn_dir(DIR_TURN_L45_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 80073a8:	2103      	movs	r1, #3
 80073aa:	20ff      	movs	r0, #255	; 0xff
 80073ac:	f006 feec 	bl	800e188 <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 80073b0:	4b44      	ldr	r3, [pc, #272]	; (80074c4 <v_L45+0x2f4>)
 80073b2:	881b      	ldrh	r3, [r3, #0]
 80073b4:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80073b8:	b2db      	uxtb	r3, r3
 80073ba:	3301      	adds	r3, #1
 80073bc:	2b00      	cmp	r3, #0
 80073be:	f003 0301 	and.w	r3, r3, #1
 80073c2:	bfb8      	it	lt
 80073c4:	425b      	neglt	r3, r3
 80073c6:	f003 0301 	and.w	r3, r3, #1
 80073ca:	b2d9      	uxtb	r1, r3
 80073cc:	4a3d      	ldr	r2, [pc, #244]	; (80074c4 <v_L45+0x2f4>)
 80073ce:	8813      	ldrh	r3, [r2, #0]
 80073d0:	f361 03c3 	bfi	r3, r1, #3, #1
 80073d4:	8013      	strh	r3, [r2, #0]
		if(!MF2.FLAG.V){
 80073d6:	4b3b      	ldr	r3, [pc, #236]	; (80074c4 <v_L45+0x2f4>)
 80073d8:	881b      	ldrh	r3, [r3, #0]
 80073da:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80073de:	b2db      	uxtb	r3, r3
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d107      	bne.n	80073f4 <v_L45+0x224>
			slalomB(10000, SPEED_HIGH, V_H_OFFSET_F+35);
 80073e4:	223a      	movs	r2, #58	; 0x3a
 80073e6:	f44f 7148 	mov.w	r1, #800	; 0x320
 80073ea:	f242 7010 	movw	r0, #10000	; 0x2710
 80073ee:	f7fe f9df 	bl	80057b0 <slalomB>
}
 80073f2:	e062      	b.n	80074ba <v_L45+0x2ea>
			slalomB(10000, SPEED_HIGH, V_H_OFFSET_B+20);
 80073f4:	225f      	movs	r2, #95	; 0x5f
 80073f6:	f44f 7148 	mov.w	r1, #800	; 0x320
 80073fa:	f242 7010 	movw	r0, #10000	; 0x2710
 80073fe:	f7fe f9d7 	bl	80057b0 <slalomB>
}
 8007402:	e05a      	b.n	80074ba <v_L45+0x2ea>
	}else if(run_mode == HIGH_HIGH){
 8007404:	4b2e      	ldr	r3, [pc, #184]	; (80074c0 <v_L45+0x2f0>)
 8007406:	781b      	ldrb	r3, [r3, #0]
 8007408:	b2db      	uxtb	r3, r3
 800740a:	2b04      	cmp	r3, #4
 800740c:	d155      	bne.n	80074ba <v_L45+0x2ea>
		if(!MF2.FLAG.V){
 800740e:	4b2d      	ldr	r3, [pc, #180]	; (80074c4 <v_L45+0x2f4>)
 8007410:	881b      	ldrh	r3, [r3, #0]
 8007412:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8007416:	b2db      	uxtb	r3, r3
 8007418:	2b00      	cmp	r3, #0
 800741a:	d10c      	bne.n	8007436 <v_L45+0x266>
			slalomF(10000, SPEED_HIGH_HIGH, V_H_H_OFFSET_F, NO_WALL, NO_WALL);
 800741c:	f241 3388 	movw	r3, #5000	; 0x1388
 8007420:	9300      	str	r3, [sp, #0]
 8007422:	f241 3388 	movw	r3, #5000	; 0x1388
 8007426:	2214      	movs	r2, #20
 8007428:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800742c:	f242 7010 	movw	r0, #10000	; 0x2710
 8007430:	f7fe f81e 	bl	8005470 <slalomF>
 8007434:	e00b      	b.n	800744e <v_L45+0x27e>
			slalomF(10000, SPEED_HIGH_HIGH, V_H_H_OFFSET_B-25, NO_WALL, NO_WALL);
 8007436:	f241 3388 	movw	r3, #5000	; 0x1388
 800743a:	9300      	str	r3, [sp, #0]
 800743c:	f241 3388 	movw	r3, #5000	; 0x1388
 8007440:	2221      	movs	r2, #33	; 0x21
 8007442:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8007446:	f242 7010 	movw	r0, #10000	; 0x2710
 800744a:	f7fe f811 	bl	8005470 <slalomF>
		slalomR(V_H_H_DEGACCEL, V_H_H_OMEGA, 45, SPEED_HIGH_HIGH);
 800744e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007452:	222d      	movs	r2, #45	; 0x2d
 8007454:	f44f 7116 	mov.w	r1, #600	; 0x258
 8007458:	f242 7010 	movw	r0, #10000	; 0x2710
 800745c:	f7fe f884 	bl	8005568 <slalomR>
		turn_dir(DIR_TURN_L45_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 8007460:	2103      	movs	r1, #3
 8007462:	20ff      	movs	r0, #255	; 0xff
 8007464:	f006 fe90 	bl	800e188 <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 8007468:	4b16      	ldr	r3, [pc, #88]	; (80074c4 <v_L45+0x2f4>)
 800746a:	881b      	ldrh	r3, [r3, #0]
 800746c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8007470:	b2db      	uxtb	r3, r3
 8007472:	3301      	adds	r3, #1
 8007474:	2b00      	cmp	r3, #0
 8007476:	f003 0301 	and.w	r3, r3, #1
 800747a:	bfb8      	it	lt
 800747c:	425b      	neglt	r3, r3
 800747e:	f003 0301 	and.w	r3, r3, #1
 8007482:	b2d9      	uxtb	r1, r3
 8007484:	4a0f      	ldr	r2, [pc, #60]	; (80074c4 <v_L45+0x2f4>)
 8007486:	8813      	ldrh	r3, [r2, #0]
 8007488:	f361 03c3 	bfi	r3, r1, #3, #1
 800748c:	8013      	strh	r3, [r2, #0]
		if(!MF2.FLAG.V){
 800748e:	4b0d      	ldr	r3, [pc, #52]	; (80074c4 <v_L45+0x2f4>)
 8007490:	881b      	ldrh	r3, [r3, #0]
 8007492:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8007496:	b2db      	uxtb	r3, r3
 8007498:	2b00      	cmp	r3, #0
 800749a:	d107      	bne.n	80074ac <v_L45+0x2dc>
			slalomB(10000, SPEED_HIGH_HIGH, V_H_H_OFFSET_F+35);
 800749c:	2237      	movs	r2, #55	; 0x37
 800749e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80074a2:	f242 7010 	movw	r0, #10000	; 0x2710
 80074a6:	f7fe f983 	bl	80057b0 <slalomB>
}
 80074aa:	e006      	b.n	80074ba <v_L45+0x2ea>
			slalomB(10000, SPEED_HIGH_HIGH, V_H_H_OFFSET_B+20);
 80074ac:	224e      	movs	r2, #78	; 0x4e
 80074ae:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80074b2:	f242 7010 	movw	r0, #10000	; 0x2710
 80074b6:	f7fe f97b 	bl	80057b0 <slalomB>
}
 80074ba:	bf00      	nop
 80074bc:	46bd      	mov	sp, r7
 80074be:	bd80      	pop	{r7, pc}
 80074c0:	20000456 	.word	0x20000456
 80074c4:	20000f64 	.word	0x20000f64

080074c8 <v_R45D>:
//v_R45D
//a区画中心から右に45度回転する　ゴール用
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void v_R45D(void){
 80074c8:	b580      	push	{r7, lr}
 80074ca:	b082      	sub	sp, #8
 80074cc:	af02      	add	r7, sp, #8
	full_led_write(PURPLE);
 80074ce:	2005      	movs	r0, #5
 80074d0:	f008 fcc8 	bl	800fe64 <full_led_write>
	if(run_mode == LOW){
 80074d4:	4b62      	ldr	r3, [pc, #392]	; (8007660 <v_R45D+0x198>)
 80074d6:	781b      	ldrb	r3, [r3, #0]
 80074d8:	b2db      	uxtb	r3, r3
 80074da:	2b01      	cmp	r3, #1
 80074dc:	d15c      	bne.n	8007598 <v_R45D+0xd0>
		if(!MF2.FLAG.V){
 80074de:	4b61      	ldr	r3, [pc, #388]	; (8007664 <v_R45D+0x19c>)
 80074e0:	881b      	ldrh	r3, [r3, #0]
 80074e2:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80074e6:	b2db      	uxtb	r3, r3
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d10c      	bne.n	8007506 <v_R45D+0x3e>
			slalomF(10000, SPEED_LOW, V_OFFSET_F, NO_WALL, NO_WALL);
 80074ec:	f241 3388 	movw	r3, #5000	; 0x1388
 80074f0:	9300      	str	r3, [sp, #0]
 80074f2:	f241 3388 	movw	r3, #5000	; 0x1388
 80074f6:	2228      	movs	r2, #40	; 0x28
 80074f8:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80074fc:	f242 7010 	movw	r0, #10000	; 0x2710
 8007500:	f7fd ffb6 	bl	8005470 <slalomF>
 8007504:	e00b      	b.n	800751e <v_R45D+0x56>
		}else{
			slalomF(10000, SPEED_LOW, V_OFFSET_B, NO_WALL, NO_WALL);
 8007506:	f241 3388 	movw	r3, #5000	; 0x1388
 800750a:	9300      	str	r3, [sp, #0]
 800750c:	f241 3388 	movw	r3, #5000	; 0x1388
 8007510:	2250      	movs	r2, #80	; 0x50
 8007512:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8007516:	f242 7010 	movw	r0, #10000	; 0x2710
 800751a:	f7fd ffa9 	bl	8005470 <slalomF>
		}
		slalomR(-V_DEGACCEL, -V_OMEGA, -45, SPEED_LOW);
 800751e:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8007522:	f06f 022c 	mvn.w	r2, #44	; 0x2c
 8007526:	4950      	ldr	r1, [pc, #320]	; (8007668 <v_R45D+0x1a0>)
 8007528:	4850      	ldr	r0, [pc, #320]	; (800766c <v_R45D+0x1a4>)
 800752a:	f7fe f81d 	bl	8005568 <slalomR>

		turn_dir(DIR_TURN_R45_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 800752e:	2103      	movs	r1, #3
 8007530:	2001      	movs	r0, #1
 8007532:	f006 fe29 	bl	800e188 <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 8007536:	4b4b      	ldr	r3, [pc, #300]	; (8007664 <v_R45D+0x19c>)
 8007538:	881b      	ldrh	r3, [r3, #0]
 800753a:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800753e:	b2db      	uxtb	r3, r3
 8007540:	3301      	adds	r3, #1
 8007542:	2b00      	cmp	r3, #0
 8007544:	f003 0301 	and.w	r3, r3, #1
 8007548:	bfb8      	it	lt
 800754a:	425b      	neglt	r3, r3
 800754c:	f003 0301 	and.w	r3, r3, #1
 8007550:	b2d9      	uxtb	r1, r3
 8007552:	4a44      	ldr	r2, [pc, #272]	; (8007664 <v_R45D+0x19c>)
 8007554:	8813      	ldrh	r3, [r2, #0]
 8007556:	f361 03c3 	bfi	r3, r1, #3, #1
 800755a:	8013      	strh	r3, [r2, #0]

		if(!MF2.FLAG.V){
 800755c:	4b41      	ldr	r3, [pc, #260]	; (8007664 <v_R45D+0x19c>)
 800755e:	881b      	ldrh	r3, [r3, #0]
 8007560:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8007564:	b2db      	uxtb	r3, r3
 8007566:	2b00      	cmp	r3, #0
 8007568:	d107      	bne.n	800757a <v_R45D+0xb2>
			slalomB(10000, SPEED_LOW, V_OFFSET_F-10);
 800756a:	221e      	movs	r2, #30
 800756c:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8007570:	f242 7010 	movw	r0, #10000	; 0x2710
 8007574:	f7fe f91c 	bl	80057b0 <slalomB>
 8007578:	e006      	b.n	8007588 <v_R45D+0xc0>
		}else{
			slalomB(10000, SPEED_LOW, V_OFFSET_B-10);
 800757a:	2246      	movs	r2, #70	; 0x46
 800757c:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8007580:	f242 7010 	movw	r0, #10000	; 0x2710
 8007584:	f7fe f914 	bl	80057b0 <slalomB>
		}
		driveD(-10000, SPEED_MIN, SPEED_LOW, 10);
 8007588:	230a      	movs	r3, #10
 800758a:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800758e:	2114      	movs	r1, #20
 8007590:	4837      	ldr	r0, [pc, #220]	; (8007670 <v_R45D+0x1a8>)
 8007592:	f7fd fd95 	bl	80050c0 <driveD>
		}else{
			slalomB(10000, SPEED_HIGH, V_H_OFFSET_B-10);
		}
		driveD(-10000, SPEED_MIN, SPEED_HIGH, 10);
	}
}
 8007596:	e060      	b.n	800765a <v_R45D+0x192>
	}else if(run_mode == HIGH){
 8007598:	4b31      	ldr	r3, [pc, #196]	; (8007660 <v_R45D+0x198>)
 800759a:	781b      	ldrb	r3, [r3, #0]
 800759c:	b2db      	uxtb	r3, r3
 800759e:	2b03      	cmp	r3, #3
 80075a0:	d15b      	bne.n	800765a <v_R45D+0x192>
		if(!MF2.FLAG.V){
 80075a2:	4b30      	ldr	r3, [pc, #192]	; (8007664 <v_R45D+0x19c>)
 80075a4:	881b      	ldrh	r3, [r3, #0]
 80075a6:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80075aa:	b2db      	uxtb	r3, r3
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d10c      	bne.n	80075ca <v_R45D+0x102>
			slalomF(10000, SPEED_HIGH, V_H_OFFSET_F, NO_WALL, NO_WALL);
 80075b0:	f241 3388 	movw	r3, #5000	; 0x1388
 80075b4:	9300      	str	r3, [sp, #0]
 80075b6:	f241 3388 	movw	r3, #5000	; 0x1388
 80075ba:	2217      	movs	r2, #23
 80075bc:	f44f 7148 	mov.w	r1, #800	; 0x320
 80075c0:	f242 7010 	movw	r0, #10000	; 0x2710
 80075c4:	f7fd ff54 	bl	8005470 <slalomF>
 80075c8:	e00b      	b.n	80075e2 <v_R45D+0x11a>
			slalomF(10000, SPEED_HIGH, V_H_OFFSET_B-18, NO_WALL, NO_WALL);
 80075ca:	f241 3388 	movw	r3, #5000	; 0x1388
 80075ce:	9300      	str	r3, [sp, #0]
 80075d0:	f241 3388 	movw	r3, #5000	; 0x1388
 80075d4:	2239      	movs	r2, #57	; 0x39
 80075d6:	f44f 7148 	mov.w	r1, #800	; 0x320
 80075da:	f242 7010 	movw	r0, #10000	; 0x2710
 80075de:	f7fd ff47 	bl	8005470 <slalomF>
		slalomR(-V_H_DEGACCEL, -V_H_OMEGA, -45, SPEED_HIGH);
 80075e2:	f44f 7348 	mov.w	r3, #800	; 0x320
 80075e6:	f06f 022c 	mvn.w	r2, #44	; 0x2c
 80075ea:	4922      	ldr	r1, [pc, #136]	; (8007674 <v_R45D+0x1ac>)
 80075ec:	4822      	ldr	r0, [pc, #136]	; (8007678 <v_R45D+0x1b0>)
 80075ee:	f7fd ffbb 	bl	8005568 <slalomR>
		turn_dir(DIR_TURN_R45_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 80075f2:	2103      	movs	r1, #3
 80075f4:	2001      	movs	r0, #1
 80075f6:	f006 fdc7 	bl	800e188 <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 80075fa:	4b1a      	ldr	r3, [pc, #104]	; (8007664 <v_R45D+0x19c>)
 80075fc:	881b      	ldrh	r3, [r3, #0]
 80075fe:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8007602:	b2db      	uxtb	r3, r3
 8007604:	3301      	adds	r3, #1
 8007606:	2b00      	cmp	r3, #0
 8007608:	f003 0301 	and.w	r3, r3, #1
 800760c:	bfb8      	it	lt
 800760e:	425b      	neglt	r3, r3
 8007610:	f003 0301 	and.w	r3, r3, #1
 8007614:	b2d9      	uxtb	r1, r3
 8007616:	4a13      	ldr	r2, [pc, #76]	; (8007664 <v_R45D+0x19c>)
 8007618:	8813      	ldrh	r3, [r2, #0]
 800761a:	f361 03c3 	bfi	r3, r1, #3, #1
 800761e:	8013      	strh	r3, [r2, #0]
		if(!MF2.FLAG.V){
 8007620:	4b10      	ldr	r3, [pc, #64]	; (8007664 <v_R45D+0x19c>)
 8007622:	881b      	ldrh	r3, [r3, #0]
 8007624:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8007628:	b2db      	uxtb	r3, r3
 800762a:	2b00      	cmp	r3, #0
 800762c:	d107      	bne.n	800763e <v_R45D+0x176>
			slalomB(10000, SPEED_HIGH, V_H_OFFSET_F);
 800762e:	2217      	movs	r2, #23
 8007630:	f44f 7148 	mov.w	r1, #800	; 0x320
 8007634:	f242 7010 	movw	r0, #10000	; 0x2710
 8007638:	f7fe f8ba 	bl	80057b0 <slalomB>
 800763c:	e006      	b.n	800764c <v_R45D+0x184>
			slalomB(10000, SPEED_HIGH, V_H_OFFSET_B-10);
 800763e:	2241      	movs	r2, #65	; 0x41
 8007640:	f44f 7148 	mov.w	r1, #800	; 0x320
 8007644:	f242 7010 	movw	r0, #10000	; 0x2710
 8007648:	f7fe f8b2 	bl	80057b0 <slalomB>
		driveD(-10000, SPEED_MIN, SPEED_HIGH, 10);
 800764c:	230a      	movs	r3, #10
 800764e:	f44f 7248 	mov.w	r2, #800	; 0x320
 8007652:	2114      	movs	r1, #20
 8007654:	4806      	ldr	r0, [pc, #24]	; (8007670 <v_R45D+0x1a8>)
 8007656:	f7fd fd33 	bl	80050c0 <driveD>
}
 800765a:	bf00      	nop
 800765c:	46bd      	mov	sp, r7
 800765e:	bd80      	pop	{r7, pc}
 8007660:	20000456 	.word	0x20000456
 8007664:	20000f64 	.word	0x20000f64
 8007668:	fffffed4 	.word	0xfffffed4
 800766c:	fffff448 	.word	0xfffff448
 8007670:	ffffd8f0 	.word	0xffffd8f0
 8007674:	fffffe70 	.word	0xfffffe70
 8007678:	ffffe0c0 	.word	0xffffe0c0

0800767c <v_L45D>:
//v_L45D
//a区画中心から左に45度回転する　ゴール用
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void v_L45D(void){
 800767c:	b580      	push	{r7, lr}
 800767e:	b082      	sub	sp, #8
 8007680:	af02      	add	r7, sp, #8
	full_led_write(YELLOW);
 8007682:	2006      	movs	r0, #6
 8007684:	f008 fbee 	bl	800fe64 <full_led_write>
	if(run_mode == LOW){
 8007688:	4b63      	ldr	r3, [pc, #396]	; (8007818 <v_L45D+0x19c>)
 800768a:	781b      	ldrb	r3, [r3, #0]
 800768c:	b2db      	uxtb	r3, r3
 800768e:	2b01      	cmp	r3, #1
 8007690:	d15d      	bne.n	800774e <v_L45D+0xd2>
		if(!MF2.FLAG.V){
 8007692:	4b62      	ldr	r3, [pc, #392]	; (800781c <v_L45D+0x1a0>)
 8007694:	881b      	ldrh	r3, [r3, #0]
 8007696:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800769a:	b2db      	uxtb	r3, r3
 800769c:	2b00      	cmp	r3, #0
 800769e:	d10c      	bne.n	80076ba <v_L45D+0x3e>
			slalomF(10000, SPEED_LOW, V_OFFSET_F+15, NO_WALL, NO_WALL);
 80076a0:	f241 3388 	movw	r3, #5000	; 0x1388
 80076a4:	9300      	str	r3, [sp, #0]
 80076a6:	f241 3388 	movw	r3, #5000	; 0x1388
 80076aa:	2237      	movs	r2, #55	; 0x37
 80076ac:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80076b0:	f242 7010 	movw	r0, #10000	; 0x2710
 80076b4:	f7fd fedc 	bl	8005470 <slalomF>
 80076b8:	e00b      	b.n	80076d2 <v_L45D+0x56>
		}else{
			slalomF(10000, SPEED_LOW, V_OFFSET_B+5, NO_WALL, NO_WALL);
 80076ba:	f241 3388 	movw	r3, #5000	; 0x1388
 80076be:	9300      	str	r3, [sp, #0]
 80076c0:	f241 3388 	movw	r3, #5000	; 0x1388
 80076c4:	2255      	movs	r2, #85	; 0x55
 80076c6:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80076ca:	f242 7010 	movw	r0, #10000	; 0x2710
 80076ce:	f7fd fecf 	bl	8005470 <slalomF>
		}
		slalomR(V_DEGACCEL, V_OMEGA, 55, SPEED_LOW);
 80076d2:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80076d6:	2237      	movs	r2, #55	; 0x37
 80076d8:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80076dc:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80076e0:	f7fd ff42 	bl	8005568 <slalomR>

		turn_dir(DIR_TURN_L45_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 80076e4:	2103      	movs	r1, #3
 80076e6:	20ff      	movs	r0, #255	; 0xff
 80076e8:	f006 fd4e 	bl	800e188 <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 80076ec:	4b4b      	ldr	r3, [pc, #300]	; (800781c <v_L45D+0x1a0>)
 80076ee:	881b      	ldrh	r3, [r3, #0]
 80076f0:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80076f4:	b2db      	uxtb	r3, r3
 80076f6:	3301      	adds	r3, #1
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	f003 0301 	and.w	r3, r3, #1
 80076fe:	bfb8      	it	lt
 8007700:	425b      	neglt	r3, r3
 8007702:	f003 0301 	and.w	r3, r3, #1
 8007706:	b2d9      	uxtb	r1, r3
 8007708:	4a44      	ldr	r2, [pc, #272]	; (800781c <v_L45D+0x1a0>)
 800770a:	8813      	ldrh	r3, [r2, #0]
 800770c:	f361 03c3 	bfi	r3, r1, #3, #1
 8007710:	8013      	strh	r3, [r2, #0]

		if(!MF2.FLAG.V){
 8007712:	4b42      	ldr	r3, [pc, #264]	; (800781c <v_L45D+0x1a0>)
 8007714:	881b      	ldrh	r3, [r3, #0]
 8007716:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800771a:	b2db      	uxtb	r3, r3
 800771c:	2b00      	cmp	r3, #0
 800771e:	d107      	bne.n	8007730 <v_L45D+0xb4>
			slalomB(10000, SPEED_LOW, V_OFFSET_F+5);
 8007720:	222d      	movs	r2, #45	; 0x2d
 8007722:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8007726:	f242 7010 	movw	r0, #10000	; 0x2710
 800772a:	f7fe f841 	bl	80057b0 <slalomB>
 800772e:	e006      	b.n	800773e <v_L45D+0xc2>
		}else{
			slalomB(10000, SPEED_LOW, V_OFFSET_B-5);
 8007730:	224b      	movs	r2, #75	; 0x4b
 8007732:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8007736:	f242 7010 	movw	r0, #10000	; 0x2710
 800773a:	f7fe f839 	bl	80057b0 <slalomB>
		}
		driveD(-10000, SPEED_MIN, SPEED_LOW, 10);
 800773e:	230a      	movs	r3, #10
 8007740:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8007744:	2114      	movs	r1, #20
 8007746:	4836      	ldr	r0, [pc, #216]	; (8007820 <v_L45D+0x1a4>)
 8007748:	f7fd fcba 	bl	80050c0 <driveD>
		}else{
			slalomB(10000, SPEED_HIGH, V_H_OFFSET_B+10);
		}
		driveD(-10000, SPEED_MIN, SPEED_HIGH, 10);
	}
}
 800774c:	e061      	b.n	8007812 <v_L45D+0x196>
	}else if(run_mode == HIGH){
 800774e:	4b32      	ldr	r3, [pc, #200]	; (8007818 <v_L45D+0x19c>)
 8007750:	781b      	ldrb	r3, [r3, #0]
 8007752:	b2db      	uxtb	r3, r3
 8007754:	2b03      	cmp	r3, #3
 8007756:	d15c      	bne.n	8007812 <v_L45D+0x196>
		if(!MF2.FLAG.V){
 8007758:	4b30      	ldr	r3, [pc, #192]	; (800781c <v_L45D+0x1a0>)
 800775a:	881b      	ldrh	r3, [r3, #0]
 800775c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8007760:	b2db      	uxtb	r3, r3
 8007762:	2b00      	cmp	r3, #0
 8007764:	d10c      	bne.n	8007780 <v_L45D+0x104>
			slalomF(10000, SPEED_HIGH, V_H_OFFSET_F, NO_WALL, NO_WALL);
 8007766:	f241 3388 	movw	r3, #5000	; 0x1388
 800776a:	9300      	str	r3, [sp, #0]
 800776c:	f241 3388 	movw	r3, #5000	; 0x1388
 8007770:	2217      	movs	r2, #23
 8007772:	f44f 7148 	mov.w	r1, #800	; 0x320
 8007776:	f242 7010 	movw	r0, #10000	; 0x2710
 800777a:	f7fd fe79 	bl	8005470 <slalomF>
 800777e:	e00b      	b.n	8007798 <v_L45D+0x11c>
			slalomF(10000, SPEED_HIGH, V_H_OFFSET_B-12, NO_WALL, NO_WALL);
 8007780:	f241 3388 	movw	r3, #5000	; 0x1388
 8007784:	9300      	str	r3, [sp, #0]
 8007786:	f241 3388 	movw	r3, #5000	; 0x1388
 800778a:	223f      	movs	r2, #63	; 0x3f
 800778c:	f44f 7148 	mov.w	r1, #800	; 0x320
 8007790:	f242 7010 	movw	r0, #10000	; 0x2710
 8007794:	f7fd fe6c 	bl	8005470 <slalomF>
		slalomR(V_H_DEGACCEL, V_H_OMEGA, 45, SPEED_HIGH);
 8007798:	f44f 7348 	mov.w	r3, #800	; 0x320
 800779c:	222d      	movs	r2, #45	; 0x2d
 800779e:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80077a2:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 80077a6:	f7fd fedf 	bl	8005568 <slalomR>
		turn_dir(DIR_TURN_L45_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 80077aa:	2103      	movs	r1, #3
 80077ac:	20ff      	movs	r0, #255	; 0xff
 80077ae:	f006 fceb 	bl	800e188 <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 80077b2:	4b1a      	ldr	r3, [pc, #104]	; (800781c <v_L45D+0x1a0>)
 80077b4:	881b      	ldrh	r3, [r3, #0]
 80077b6:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80077ba:	b2db      	uxtb	r3, r3
 80077bc:	3301      	adds	r3, #1
 80077be:	2b00      	cmp	r3, #0
 80077c0:	f003 0301 	and.w	r3, r3, #1
 80077c4:	bfb8      	it	lt
 80077c6:	425b      	neglt	r3, r3
 80077c8:	f003 0301 	and.w	r3, r3, #1
 80077cc:	b2d9      	uxtb	r1, r3
 80077ce:	4a13      	ldr	r2, [pc, #76]	; (800781c <v_L45D+0x1a0>)
 80077d0:	8813      	ldrh	r3, [r2, #0]
 80077d2:	f361 03c3 	bfi	r3, r1, #3, #1
 80077d6:	8013      	strh	r3, [r2, #0]
		if(!MF2.FLAG.V){
 80077d8:	4b10      	ldr	r3, [pc, #64]	; (800781c <v_L45D+0x1a0>)
 80077da:	881b      	ldrh	r3, [r3, #0]
 80077dc:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80077e0:	b2db      	uxtb	r3, r3
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d107      	bne.n	80077f6 <v_L45D+0x17a>
			slalomB(10000, SPEED_HIGH, V_H_OFFSET_F+25);
 80077e6:	2230      	movs	r2, #48	; 0x30
 80077e8:	f44f 7148 	mov.w	r1, #800	; 0x320
 80077ec:	f242 7010 	movw	r0, #10000	; 0x2710
 80077f0:	f7fd ffde 	bl	80057b0 <slalomB>
 80077f4:	e006      	b.n	8007804 <v_L45D+0x188>
			slalomB(10000, SPEED_HIGH, V_H_OFFSET_B+10);
 80077f6:	2255      	movs	r2, #85	; 0x55
 80077f8:	f44f 7148 	mov.w	r1, #800	; 0x320
 80077fc:	f242 7010 	movw	r0, #10000	; 0x2710
 8007800:	f7fd ffd6 	bl	80057b0 <slalomB>
		driveD(-10000, SPEED_MIN, SPEED_HIGH, 10);
 8007804:	230a      	movs	r3, #10
 8007806:	f44f 7248 	mov.w	r2, #800	; 0x320
 800780a:	2114      	movs	r1, #20
 800780c:	4804      	ldr	r0, [pc, #16]	; (8007820 <v_L45D+0x1a4>)
 800780e:	f7fd fc57 	bl	80050c0 <driveD>
}
 8007812:	bf00      	nop
 8007814:	46bd      	mov	sp, r7
 8007816:	bd80      	pop	{r7, pc}
 8007818:	20000456 	.word	0x20000456
 800781c:	20000f64 	.word	0x20000f64
 8007820:	ffffd8f0 	.word	0xffffd8f0

08007824 <v_R90>:
//v_R90
// 柱中心から右に90度回転する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void v_R90(void){
 8007824:	b580      	push	{r7, lr}
 8007826:	b082      	sub	sp, #8
 8007828:	af02      	add	r7, sp, #8
	full_led_write(YELLOW);
 800782a:	2006      	movs	r0, #6
 800782c:	f008 fb1a 	bl	800fe64 <full_led_write>
	if(run_mode == LOW){
 8007830:	4b4a      	ldr	r3, [pc, #296]	; (800795c <v_R90+0x138>)
 8007832:	781b      	ldrb	r3, [r3, #0]
 8007834:	b2db      	uxtb	r3, r3
 8007836:	2b01      	cmp	r3, #1
 8007838:	d11f      	bne.n	800787a <v_R90+0x56>
		slalomF(10000, SPEED_LOW, VV_OFFSET_F, NO_WALL, NO_WALL);
 800783a:	f241 3388 	movw	r3, #5000	; 0x1388
 800783e:	9300      	str	r3, [sp, #0]
 8007840:	f241 3388 	movw	r3, #5000	; 0x1388
 8007844:	2232      	movs	r2, #50	; 0x32
 8007846:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800784a:	f242 7010 	movw	r0, #10000	; 0x2710
 800784e:	f7fd fe0f 	bl	8005470 <slalomF>
		slalomR(-VV_DEGACCEL, -VV_OMEGA, -90, SPEED_LOW);
 8007852:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8007856:	f06f 0259 	mvn.w	r2, #89	; 0x59
 800785a:	4941      	ldr	r1, [pc, #260]	; (8007960 <v_R90+0x13c>)
 800785c:	4841      	ldr	r0, [pc, #260]	; (8007964 <v_R90+0x140>)
 800785e:	f7fd fe83 	bl	8005568 <slalomR>

		turn_dir(DIR_TURN_R90_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 8007862:	2103      	movs	r1, #3
 8007864:	2002      	movs	r0, #2
 8007866:	f006 fc8f 	bl	800e188 <turn_dir>

		slalomB(10000, SPEED_LOW, VV_OFFSET_B);
 800786a:	2232      	movs	r2, #50	; 0x32
 800786c:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8007870:	f242 7010 	movw	r0, #10000	; 0x2710
 8007874:	f7fd ff9c 	bl	80057b0 <slalomB>

		turn_dir(DIR_TURN_R90_8, 3);									//マイクロマウス内部位置情報でも左回転処理

		slalomB(10000, SPEED_HIGH_HIGH, VV_H_H_OFFSET_B);
	}
}
 8007878:	e06d      	b.n	8007956 <v_R90+0x132>
	}else if(run_mode == MIDDLE){
 800787a:	4b38      	ldr	r3, [pc, #224]	; (800795c <v_R90+0x138>)
 800787c:	781b      	ldrb	r3, [r3, #0]
 800787e:	b2db      	uxtb	r3, r3
 8007880:	2b02      	cmp	r3, #2
 8007882:	d11f      	bne.n	80078c4 <v_R90+0xa0>
		slalomF(10000, SPEED_MIDDLE, VV_M_OFFSET_F, NO_WALL, NO_WALL);
 8007884:	f241 3388 	movw	r3, #5000	; 0x1388
 8007888:	9300      	str	r3, [sp, #0]
 800788a:	f241 3388 	movw	r3, #5000	; 0x1388
 800788e:	223a      	movs	r2, #58	; 0x3a
 8007890:	f44f 7116 	mov.w	r1, #600	; 0x258
 8007894:	f242 7010 	movw	r0, #10000	; 0x2710
 8007898:	f7fd fdea 	bl	8005470 <slalomF>
		slalomR(-VV_M_DEGACCEL, -VV_M_OMEGA, -90, SPEED_HIGH);
 800789c:	f44f 7348 	mov.w	r3, #800	; 0x320
 80078a0:	f06f 0259 	mvn.w	r2, #89	; 0x59
 80078a4:	4930      	ldr	r1, [pc, #192]	; (8007968 <v_R90+0x144>)
 80078a6:	4831      	ldr	r0, [pc, #196]	; (800796c <v_R90+0x148>)
 80078a8:	f7fd fe5e 	bl	8005568 <slalomR>
		turn_dir(DIR_TURN_R90_8, 3);									//マイクロマウス内部位置情報でも左回転処理
 80078ac:	2103      	movs	r1, #3
 80078ae:	2002      	movs	r0, #2
 80078b0:	f006 fc6a 	bl	800e188 <turn_dir>
		slalomB(10000, SPEED_MIDDLE, VV_M_OFFSET_B);
 80078b4:	223a      	movs	r2, #58	; 0x3a
 80078b6:	f44f 7116 	mov.w	r1, #600	; 0x258
 80078ba:	f242 7010 	movw	r0, #10000	; 0x2710
 80078be:	f7fd ff77 	bl	80057b0 <slalomB>
}
 80078c2:	e048      	b.n	8007956 <v_R90+0x132>
	}else if(run_mode == HIGH){
 80078c4:	4b25      	ldr	r3, [pc, #148]	; (800795c <v_R90+0x138>)
 80078c6:	781b      	ldrb	r3, [r3, #0]
 80078c8:	b2db      	uxtb	r3, r3
 80078ca:	2b03      	cmp	r3, #3
 80078cc:	d11f      	bne.n	800790e <v_R90+0xea>
		slalomF(10000, SPEED_HIGH, VV_H_OFFSET_F, NO_WALL, NO_WALL);
 80078ce:	f241 3388 	movw	r3, #5000	; 0x1388
 80078d2:	9300      	str	r3, [sp, #0]
 80078d4:	f241 3388 	movw	r3, #5000	; 0x1388
 80078d8:	2223      	movs	r2, #35	; 0x23
 80078da:	f44f 7148 	mov.w	r1, #800	; 0x320
 80078de:	f242 7010 	movw	r0, #10000	; 0x2710
 80078e2:	f7fd fdc5 	bl	8005470 <slalomF>
		slalomR(-VV_H_DEGACCEL, -VV_H_OMEGA, -90, SPEED_HIGH);
 80078e6:	f44f 7348 	mov.w	r3, #800	; 0x320
 80078ea:	f06f 0259 	mvn.w	r2, #89	; 0x59
 80078ee:	491e      	ldr	r1, [pc, #120]	; (8007968 <v_R90+0x144>)
 80078f0:	481e      	ldr	r0, [pc, #120]	; (800796c <v_R90+0x148>)
 80078f2:	f7fd fe39 	bl	8005568 <slalomR>
		turn_dir(DIR_TURN_R90_8, 3);									//マイクロマウス内部位置情報でも左回転処理
 80078f6:	2103      	movs	r1, #3
 80078f8:	2002      	movs	r0, #2
 80078fa:	f006 fc45 	bl	800e188 <turn_dir>
		slalomB(10000, SPEED_HIGH, VV_H_OFFSET_B);
 80078fe:	2241      	movs	r2, #65	; 0x41
 8007900:	f44f 7148 	mov.w	r1, #800	; 0x320
 8007904:	f242 7010 	movw	r0, #10000	; 0x2710
 8007908:	f7fd ff52 	bl	80057b0 <slalomB>
}
 800790c:	e023      	b.n	8007956 <v_R90+0x132>
	}else if(run_mode == HIGH_HIGH){
 800790e:	4b13      	ldr	r3, [pc, #76]	; (800795c <v_R90+0x138>)
 8007910:	781b      	ldrb	r3, [r3, #0]
 8007912:	b2db      	uxtb	r3, r3
 8007914:	2b04      	cmp	r3, #4
 8007916:	d11e      	bne.n	8007956 <v_R90+0x132>
		slalomF(10000, SPEED_HIGH_HIGH, VV_H_H_OFFSET_F, NO_WALL, NO_WALL);
 8007918:	f241 3388 	movw	r3, #5000	; 0x1388
 800791c:	9300      	str	r3, [sp, #0]
 800791e:	f241 3388 	movw	r3, #5000	; 0x1388
 8007922:	221e      	movs	r2, #30
 8007924:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8007928:	f242 7010 	movw	r0, #10000	; 0x2710
 800792c:	f7fd fda0 	bl	8005470 <slalomF>
		slalomR(-VV_H_H_DEGACCEL, -VV_H_H_OMEGA, -90, SPEED_HIGH_HIGH);
 8007930:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007934:	f06f 0259 	mvn.w	r2, #89	; 0x59
 8007938:	490b      	ldr	r1, [pc, #44]	; (8007968 <v_R90+0x144>)
 800793a:	480d      	ldr	r0, [pc, #52]	; (8007970 <v_R90+0x14c>)
 800793c:	f7fd fe14 	bl	8005568 <slalomR>
		turn_dir(DIR_TURN_R90_8, 3);									//マイクロマウス内部位置情報でも左回転処理
 8007940:	2103      	movs	r1, #3
 8007942:	2002      	movs	r0, #2
 8007944:	f006 fc20 	bl	800e188 <turn_dir>
		slalomB(10000, SPEED_HIGH_HIGH, VV_H_H_OFFSET_B);
 8007948:	221e      	movs	r2, #30
 800794a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800794e:	f242 7010 	movw	r0, #10000	; 0x2710
 8007952:	f7fd ff2d 	bl	80057b0 <slalomB>
}
 8007956:	bf00      	nop
 8007958:	46bd      	mov	sp, r7
 800795a:	bd80      	pop	{r7, pc}
 800795c:	20000456 	.word	0x20000456
 8007960:	fffffea2 	.word	0xfffffea2
 8007964:	fffff254 	.word	0xfffff254
 8007968:	fffffce0 	.word	0xfffffce0
 800796c:	ffffd8f0 	.word	0xffffd8f0
 8007970:	ffffc180 	.word	0xffffc180

08007974 <v_L90>:
//v_L90
// 柱中心から左に90度回転する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void v_L90(void){
 8007974:	b580      	push	{r7, lr}
 8007976:	b082      	sub	sp, #8
 8007978:	af02      	add	r7, sp, #8
	full_led_write(PURPLE);
 800797a:	2005      	movs	r0, #5
 800797c:	f008 fa72 	bl	800fe64 <full_led_write>
	if(run_mode == LOW){
 8007980:	4b4c      	ldr	r3, [pc, #304]	; (8007ab4 <v_L90+0x140>)
 8007982:	781b      	ldrb	r3, [r3, #0]
 8007984:	b2db      	uxtb	r3, r3
 8007986:	2b01      	cmp	r3, #1
 8007988:	d120      	bne.n	80079cc <v_L90+0x58>
		slalomF(10000, SPEED_LOW, VV_OFFSET_F, NO_WALL, NO_WALL);
 800798a:	f241 3388 	movw	r3, #5000	; 0x1388
 800798e:	9300      	str	r3, [sp, #0]
 8007990:	f241 3388 	movw	r3, #5000	; 0x1388
 8007994:	2232      	movs	r2, #50	; 0x32
 8007996:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800799a:	f242 7010 	movw	r0, #10000	; 0x2710
 800799e:	f7fd fd67 	bl	8005470 <slalomF>
		slalomR(VV_DEGACCEL, VV_OMEGA, 90, SPEED_LOW);
 80079a2:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80079a6:	225a      	movs	r2, #90	; 0x5a
 80079a8:	f44f 71af 	mov.w	r1, #350	; 0x15e
 80079ac:	f640 50ac 	movw	r0, #3500	; 0xdac
 80079b0:	f7fd fdda 	bl	8005568 <slalomR>

		turn_dir(DIR_TURN_L90_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 80079b4:	2103      	movs	r1, #3
 80079b6:	20fe      	movs	r0, #254	; 0xfe
 80079b8:	f006 fbe6 	bl	800e188 <turn_dir>

		slalomB(10000, SPEED_LOW, VV_OFFSET_B);
 80079bc:	2232      	movs	r2, #50	; 0x32
 80079be:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80079c2:	f242 7010 	movw	r0, #10000	; 0x2710
 80079c6:	f7fd fef3 	bl	80057b0 <slalomB>

		turn_dir(DIR_TURN_L90_8, 3);									//aマイクロマウス内部位置情報でも左回転処理

		slalomB(10000, SPEED_HIGH_HIGH, VV_H_H_OFFSET_B);
	}
}
 80079ca:	e070      	b.n	8007aae <v_L90+0x13a>
	}else if(run_mode == MIDDLE){
 80079cc:	4b39      	ldr	r3, [pc, #228]	; (8007ab4 <v_L90+0x140>)
 80079ce:	781b      	ldrb	r3, [r3, #0]
 80079d0:	b2db      	uxtb	r3, r3
 80079d2:	2b02      	cmp	r3, #2
 80079d4:	d120      	bne.n	8007a18 <v_L90+0xa4>
		slalomF(10000, SPEED_MIDDLE, VV_M_OFFSET_F, NO_WALL, NO_WALL);
 80079d6:	f241 3388 	movw	r3, #5000	; 0x1388
 80079da:	9300      	str	r3, [sp, #0]
 80079dc:	f241 3388 	movw	r3, #5000	; 0x1388
 80079e0:	223a      	movs	r2, #58	; 0x3a
 80079e2:	f44f 7116 	mov.w	r1, #600	; 0x258
 80079e6:	f242 7010 	movw	r0, #10000	; 0x2710
 80079ea:	f7fd fd41 	bl	8005470 <slalomF>
		slalomR(VV_M_DEGACCEL, VV_M_OMEGA, 90, SPEED_MIDDLE);
 80079ee:	f44f 7316 	mov.w	r3, #600	; 0x258
 80079f2:	225a      	movs	r2, #90	; 0x5a
 80079f4:	f44f 7148 	mov.w	r1, #800	; 0x320
 80079f8:	f242 7010 	movw	r0, #10000	; 0x2710
 80079fc:	f7fd fdb4 	bl	8005568 <slalomR>
		turn_dir(DIR_TURN_L90_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 8007a00:	2103      	movs	r1, #3
 8007a02:	20fe      	movs	r0, #254	; 0xfe
 8007a04:	f006 fbc0 	bl	800e188 <turn_dir>
		slalomB(10000, SPEED_MIDDLE, VV_M_OFFSET_B);
 8007a08:	223a      	movs	r2, #58	; 0x3a
 8007a0a:	f44f 7116 	mov.w	r1, #600	; 0x258
 8007a0e:	f242 7010 	movw	r0, #10000	; 0x2710
 8007a12:	f7fd fecd 	bl	80057b0 <slalomB>
}
 8007a16:	e04a      	b.n	8007aae <v_L90+0x13a>
	}else if(run_mode == HIGH){
 8007a18:	4b26      	ldr	r3, [pc, #152]	; (8007ab4 <v_L90+0x140>)
 8007a1a:	781b      	ldrb	r3, [r3, #0]
 8007a1c:	b2db      	uxtb	r3, r3
 8007a1e:	2b03      	cmp	r3, #3
 8007a20:	d120      	bne.n	8007a64 <v_L90+0xf0>
		slalomF(10000, SPEED_HIGH, VV_H_OFFSET_F, NO_WALL, NO_WALL);
 8007a22:	f241 3388 	movw	r3, #5000	; 0x1388
 8007a26:	9300      	str	r3, [sp, #0]
 8007a28:	f241 3388 	movw	r3, #5000	; 0x1388
 8007a2c:	2223      	movs	r2, #35	; 0x23
 8007a2e:	f44f 7148 	mov.w	r1, #800	; 0x320
 8007a32:	f242 7010 	movw	r0, #10000	; 0x2710
 8007a36:	f7fd fd1b 	bl	8005470 <slalomF>
		slalomR(VV_H_DEGACCEL, VV_H_OMEGA, 90, SPEED_HIGH);
 8007a3a:	f44f 7348 	mov.w	r3, #800	; 0x320
 8007a3e:	225a      	movs	r2, #90	; 0x5a
 8007a40:	f44f 7148 	mov.w	r1, #800	; 0x320
 8007a44:	f242 7010 	movw	r0, #10000	; 0x2710
 8007a48:	f7fd fd8e 	bl	8005568 <slalomR>
		turn_dir(DIR_TURN_L90_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 8007a4c:	2103      	movs	r1, #3
 8007a4e:	20fe      	movs	r0, #254	; 0xfe
 8007a50:	f006 fb9a 	bl	800e188 <turn_dir>
		slalomB(10000, SPEED_HIGH, VV_H_OFFSET_B);
 8007a54:	2241      	movs	r2, #65	; 0x41
 8007a56:	f44f 7148 	mov.w	r1, #800	; 0x320
 8007a5a:	f242 7010 	movw	r0, #10000	; 0x2710
 8007a5e:	f7fd fea7 	bl	80057b0 <slalomB>
}
 8007a62:	e024      	b.n	8007aae <v_L90+0x13a>
	}else if(run_mode == HIGH_HIGH){
 8007a64:	4b13      	ldr	r3, [pc, #76]	; (8007ab4 <v_L90+0x140>)
 8007a66:	781b      	ldrb	r3, [r3, #0]
 8007a68:	b2db      	uxtb	r3, r3
 8007a6a:	2b04      	cmp	r3, #4
 8007a6c:	d11f      	bne.n	8007aae <v_L90+0x13a>
		slalomF(10000, SPEED_HIGH_HIGH, VV_H_H_OFFSET_F, NO_WALL, NO_WALL);
 8007a6e:	f241 3388 	movw	r3, #5000	; 0x1388
 8007a72:	9300      	str	r3, [sp, #0]
 8007a74:	f241 3388 	movw	r3, #5000	; 0x1388
 8007a78:	221e      	movs	r2, #30
 8007a7a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8007a7e:	f242 7010 	movw	r0, #10000	; 0x2710
 8007a82:	f7fd fcf5 	bl	8005470 <slalomF>
		slalomR(VV_H_H_DEGACCEL, VV_H_H_OMEGA, 90, SPEED_HIGH_HIGH);
 8007a86:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007a8a:	225a      	movs	r2, #90	; 0x5a
 8007a8c:	f44f 7148 	mov.w	r1, #800	; 0x320
 8007a90:	f44f 507a 	mov.w	r0, #16000	; 0x3e80
 8007a94:	f7fd fd68 	bl	8005568 <slalomR>
		turn_dir(DIR_TURN_L90_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 8007a98:	2103      	movs	r1, #3
 8007a9a:	20fe      	movs	r0, #254	; 0xfe
 8007a9c:	f006 fb74 	bl	800e188 <turn_dir>
		slalomB(10000, SPEED_HIGH_HIGH, VV_H_H_OFFSET_B);
 8007aa0:	221e      	movs	r2, #30
 8007aa2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8007aa6:	f242 7010 	movw	r0, #10000	; 0x2710
 8007aaa:	f7fd fe81 	bl	80057b0 <slalomB>
}
 8007aae:	bf00      	nop
 8007ab0:	46bd      	mov	sp, r7
 8007ab2:	bd80      	pop	{r7, pc}
 8007ab4:	20000456 	.word	0x20000456

08007ab8 <v_R135>:
//v_R135
// 区画中心から右に135度回転する　ゴール用
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void v_R135(void){
 8007ab8:	b580      	push	{r7, lr}
 8007aba:	b082      	sub	sp, #8
 8007abc:	af02      	add	r7, sp, #8
	full_led_write(YELLOW);
 8007abe:	2006      	movs	r0, #6
 8007ac0:	f008 f9d0 	bl	800fe64 <full_led_write>
	if(run_mode == LOW){
 8007ac4:	4bb6      	ldr	r3, [pc, #728]	; (8007da0 <v_R135+0x2e8>)
 8007ac6:	781b      	ldrb	r3, [r3, #0]
 8007ac8:	b2db      	uxtb	r3, r3
 8007aca:	2b01      	cmp	r3, #1
 8007acc:	d155      	bne.n	8007b7a <v_R135+0xc2>
		if(!MF2.FLAG.V){
 8007ace:	4bb5      	ldr	r3, [pc, #724]	; (8007da4 <v_R135+0x2ec>)
 8007ad0:	881b      	ldrh	r3, [r3, #0]
 8007ad2:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8007ad6:	b2db      	uxtb	r3, r3
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d10c      	bne.n	8007af6 <v_R135+0x3e>
			slalomF(10000, SPEED_LOW, VVV_OFFSET_F, NO_WALL, NO_WALL);
 8007adc:	f241 3388 	movw	r3, #5000	; 0x1388
 8007ae0:	9300      	str	r3, [sp, #0]
 8007ae2:	f241 3388 	movw	r3, #5000	; 0x1388
 8007ae6:	2244      	movs	r2, #68	; 0x44
 8007ae8:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8007aec:	f242 7010 	movw	r0, #10000	; 0x2710
 8007af0:	f7fd fcbe 	bl	8005470 <slalomF>
 8007af4:	e00b      	b.n	8007b0e <v_R135+0x56>
		}else{
			slalomF(10000, SPEED_LOW, VVV_OFFSET_B, NO_WALL, NO_WALL);
 8007af6:	f241 3388 	movw	r3, #5000	; 0x1388
 8007afa:	9300      	str	r3, [sp, #0]
 8007afc:	f241 3388 	movw	r3, #5000	; 0x1388
 8007b00:	223a      	movs	r2, #58	; 0x3a
 8007b02:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8007b06:	f242 7010 	movw	r0, #10000	; 0x2710
 8007b0a:	f7fd fcb1 	bl	8005470 <slalomF>
		}
		slalomR(-VVV_DEGACCEL, -VVV_OMEGA, -135, SPEED_LOW);
 8007b0e:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8007b12:	f06f 0286 	mvn.w	r2, #134	; 0x86
 8007b16:	49a4      	ldr	r1, [pc, #656]	; (8007da8 <v_R135+0x2f0>)
 8007b18:	48a4      	ldr	r0, [pc, #656]	; (8007dac <v_R135+0x2f4>)
 8007b1a:	f7fd fd25 	bl	8005568 <slalomR>

		turn_dir(DIR_TURN_R135_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 8007b1e:	2103      	movs	r1, #3
 8007b20:	2003      	movs	r0, #3
 8007b22:	f006 fb31 	bl	800e188 <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 8007b26:	4b9f      	ldr	r3, [pc, #636]	; (8007da4 <v_R135+0x2ec>)
 8007b28:	881b      	ldrh	r3, [r3, #0]
 8007b2a:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8007b2e:	b2db      	uxtb	r3, r3
 8007b30:	3301      	adds	r3, #1
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	f003 0301 	and.w	r3, r3, #1
 8007b38:	bfb8      	it	lt
 8007b3a:	425b      	neglt	r3, r3
 8007b3c:	f003 0301 	and.w	r3, r3, #1
 8007b40:	b2d9      	uxtb	r1, r3
 8007b42:	4a98      	ldr	r2, [pc, #608]	; (8007da4 <v_R135+0x2ec>)
 8007b44:	8813      	ldrh	r3, [r2, #0]
 8007b46:	f361 03c3 	bfi	r3, r1, #3, #1
 8007b4a:	8013      	strh	r3, [r2, #0]

		if(!MF2.FLAG.V){
 8007b4c:	4b95      	ldr	r3, [pc, #596]	; (8007da4 <v_R135+0x2ec>)
 8007b4e:	881b      	ldrh	r3, [r3, #0]
 8007b50:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8007b54:	b2db      	uxtb	r3, r3
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d107      	bne.n	8007b6a <v_R135+0xb2>
			slalomB(10000, SPEED_LOW, VVV_OFFSET_F);
 8007b5a:	2244      	movs	r2, #68	; 0x44
 8007b5c:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8007b60:	f242 7010 	movw	r0, #10000	; 0x2710
 8007b64:	f7fd fe24 	bl	80057b0 <slalomB>
			slalomB(10000, SPEED_HIGH_HIGH, VVV_H_H_OFFSET_F);
		}else{
			slalomB(10000, SPEED_HIGH_HIGH, VVV_H_H_OFFSET_F);
		}
	}
}
 8007b68:	e117      	b.n	8007d9a <v_R135+0x2e2>
			slalomB(10000, SPEED_LOW, VVV_OFFSET_B);
 8007b6a:	223a      	movs	r2, #58	; 0x3a
 8007b6c:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8007b70:	f242 7010 	movw	r0, #10000	; 0x2710
 8007b74:	f7fd fe1c 	bl	80057b0 <slalomB>
}
 8007b78:	e10f      	b.n	8007d9a <v_R135+0x2e2>
	}else if(run_mode == MIDDLE){
 8007b7a:	4b89      	ldr	r3, [pc, #548]	; (8007da0 <v_R135+0x2e8>)
 8007b7c:	781b      	ldrb	r3, [r3, #0]
 8007b7e:	b2db      	uxtb	r3, r3
 8007b80:	2b02      	cmp	r3, #2
 8007b82:	d155      	bne.n	8007c30 <v_R135+0x178>
		if(!MF2.FLAG.V){
 8007b84:	4b87      	ldr	r3, [pc, #540]	; (8007da4 <v_R135+0x2ec>)
 8007b86:	881b      	ldrh	r3, [r3, #0]
 8007b88:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8007b8c:	b2db      	uxtb	r3, r3
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d10c      	bne.n	8007bac <v_R135+0xf4>
			slalomF(10000, SPEED_MIDDLE, VVV_M_OFFSET_F, NO_WALL, NO_WALL);
 8007b92:	f241 3388 	movw	r3, #5000	; 0x1388
 8007b96:	9300      	str	r3, [sp, #0]
 8007b98:	f241 3388 	movw	r3, #5000	; 0x1388
 8007b9c:	2246      	movs	r2, #70	; 0x46
 8007b9e:	f44f 7116 	mov.w	r1, #600	; 0x258
 8007ba2:	f242 7010 	movw	r0, #10000	; 0x2710
 8007ba6:	f7fd fc63 	bl	8005470 <slalomF>
 8007baa:	e00b      	b.n	8007bc4 <v_R135+0x10c>
			slalomF(10000, SPEED_MIDDLE, VVV_M_OFFSET_B, NO_WALL, NO_WALL);
 8007bac:	f241 3388 	movw	r3, #5000	; 0x1388
 8007bb0:	9300      	str	r3, [sp, #0]
 8007bb2:	f241 3388 	movw	r3, #5000	; 0x1388
 8007bb6:	223b      	movs	r2, #59	; 0x3b
 8007bb8:	f44f 7116 	mov.w	r1, #600	; 0x258
 8007bbc:	f242 7010 	movw	r0, #10000	; 0x2710
 8007bc0:	f7fd fc56 	bl	8005470 <slalomF>
		slalomR(-VVV_M_DEGACCEL, -VVV_M_OMEGA, -135, SPEED_MIDDLE);
 8007bc4:	f44f 7316 	mov.w	r3, #600	; 0x258
 8007bc8:	f06f 0286 	mvn.w	r2, #134	; 0x86
 8007bcc:	4978      	ldr	r1, [pc, #480]	; (8007db0 <v_R135+0x2f8>)
 8007bce:	4879      	ldr	r0, [pc, #484]	; (8007db4 <v_R135+0x2fc>)
 8007bd0:	f7fd fcca 	bl	8005568 <slalomR>
		turn_dir(DIR_TURN_R135_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 8007bd4:	2103      	movs	r1, #3
 8007bd6:	2003      	movs	r0, #3
 8007bd8:	f006 fad6 	bl	800e188 <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 8007bdc:	4b71      	ldr	r3, [pc, #452]	; (8007da4 <v_R135+0x2ec>)
 8007bde:	881b      	ldrh	r3, [r3, #0]
 8007be0:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8007be4:	b2db      	uxtb	r3, r3
 8007be6:	3301      	adds	r3, #1
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	f003 0301 	and.w	r3, r3, #1
 8007bee:	bfb8      	it	lt
 8007bf0:	425b      	neglt	r3, r3
 8007bf2:	f003 0301 	and.w	r3, r3, #1
 8007bf6:	b2d9      	uxtb	r1, r3
 8007bf8:	4a6a      	ldr	r2, [pc, #424]	; (8007da4 <v_R135+0x2ec>)
 8007bfa:	8813      	ldrh	r3, [r2, #0]
 8007bfc:	f361 03c3 	bfi	r3, r1, #3, #1
 8007c00:	8013      	strh	r3, [r2, #0]
		if(!MF2.FLAG.V){
 8007c02:	4b68      	ldr	r3, [pc, #416]	; (8007da4 <v_R135+0x2ec>)
 8007c04:	881b      	ldrh	r3, [r3, #0]
 8007c06:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8007c0a:	b2db      	uxtb	r3, r3
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d107      	bne.n	8007c20 <v_R135+0x168>
			slalomB(10000, SPEED_MIDDLE, VVV_M_OFFSET_F);
 8007c10:	2246      	movs	r2, #70	; 0x46
 8007c12:	f44f 7116 	mov.w	r1, #600	; 0x258
 8007c16:	f242 7010 	movw	r0, #10000	; 0x2710
 8007c1a:	f7fd fdc9 	bl	80057b0 <slalomB>
}
 8007c1e:	e0bc      	b.n	8007d9a <v_R135+0x2e2>
			slalomB(10000, SPEED_MIDDLE, VVV_M_OFFSET_F);
 8007c20:	2246      	movs	r2, #70	; 0x46
 8007c22:	f44f 7116 	mov.w	r1, #600	; 0x258
 8007c26:	f242 7010 	movw	r0, #10000	; 0x2710
 8007c2a:	f7fd fdc1 	bl	80057b0 <slalomB>
}
 8007c2e:	e0b4      	b.n	8007d9a <v_R135+0x2e2>
	}else if(run_mode == HIGH){
 8007c30:	4b5b      	ldr	r3, [pc, #364]	; (8007da0 <v_R135+0x2e8>)
 8007c32:	781b      	ldrb	r3, [r3, #0]
 8007c34:	b2db      	uxtb	r3, r3
 8007c36:	2b03      	cmp	r3, #3
 8007c38:	d155      	bne.n	8007ce6 <v_R135+0x22e>
		if(!MF2.FLAG.V){
 8007c3a:	4b5a      	ldr	r3, [pc, #360]	; (8007da4 <v_R135+0x2ec>)
 8007c3c:	881b      	ldrh	r3, [r3, #0]
 8007c3e:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8007c42:	b2db      	uxtb	r3, r3
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d10c      	bne.n	8007c62 <v_R135+0x1aa>
			slalomF(10000, SPEED_HIGH, VVV_H_OFFSET_F, NO_WALL, NO_WALL);
 8007c48:	f241 3388 	movw	r3, #5000	; 0x1388
 8007c4c:	9300      	str	r3, [sp, #0]
 8007c4e:	f241 3388 	movw	r3, #5000	; 0x1388
 8007c52:	2269      	movs	r2, #105	; 0x69
 8007c54:	f44f 7148 	mov.w	r1, #800	; 0x320
 8007c58:	f242 7010 	movw	r0, #10000	; 0x2710
 8007c5c:	f7fd fc08 	bl	8005470 <slalomF>
 8007c60:	e00b      	b.n	8007c7a <v_R135+0x1c2>
			slalomF(10000, SPEED_HIGH, VVV_H_OFFSET_B, NO_WALL, NO_WALL);
 8007c62:	f241 3388 	movw	r3, #5000	; 0x1388
 8007c66:	9300      	str	r3, [sp, #0]
 8007c68:	f241 3388 	movw	r3, #5000	; 0x1388
 8007c6c:	2246      	movs	r2, #70	; 0x46
 8007c6e:	f44f 7148 	mov.w	r1, #800	; 0x320
 8007c72:	f242 7010 	movw	r0, #10000	; 0x2710
 8007c76:	f7fd fbfb 	bl	8005470 <slalomF>
		slalomR(-VVV_H_DEGACCEL, -VVV_H_OMEGA, -135, SPEED_HIGH);
 8007c7a:	f44f 7348 	mov.w	r3, #800	; 0x320
 8007c7e:	f06f 0286 	mvn.w	r2, #134	; 0x86
 8007c82:	494d      	ldr	r1, [pc, #308]	; (8007db8 <v_R135+0x300>)
 8007c84:	484d      	ldr	r0, [pc, #308]	; (8007dbc <v_R135+0x304>)
 8007c86:	f7fd fc6f 	bl	8005568 <slalomR>
		turn_dir(DIR_TURN_R135_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 8007c8a:	2103      	movs	r1, #3
 8007c8c:	2003      	movs	r0, #3
 8007c8e:	f006 fa7b 	bl	800e188 <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 8007c92:	4b44      	ldr	r3, [pc, #272]	; (8007da4 <v_R135+0x2ec>)
 8007c94:	881b      	ldrh	r3, [r3, #0]
 8007c96:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8007c9a:	b2db      	uxtb	r3, r3
 8007c9c:	3301      	adds	r3, #1
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	f003 0301 	and.w	r3, r3, #1
 8007ca4:	bfb8      	it	lt
 8007ca6:	425b      	neglt	r3, r3
 8007ca8:	f003 0301 	and.w	r3, r3, #1
 8007cac:	b2d9      	uxtb	r1, r3
 8007cae:	4a3d      	ldr	r2, [pc, #244]	; (8007da4 <v_R135+0x2ec>)
 8007cb0:	8813      	ldrh	r3, [r2, #0]
 8007cb2:	f361 03c3 	bfi	r3, r1, #3, #1
 8007cb6:	8013      	strh	r3, [r2, #0]
		if(!MF2.FLAG.V){
 8007cb8:	4b3a      	ldr	r3, [pc, #232]	; (8007da4 <v_R135+0x2ec>)
 8007cba:	881b      	ldrh	r3, [r3, #0]
 8007cbc:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8007cc0:	b2db      	uxtb	r3, r3
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d107      	bne.n	8007cd6 <v_R135+0x21e>
			slalomB(10000, SPEED_HIGH, VVV_H_OFFSET_F);
 8007cc6:	2269      	movs	r2, #105	; 0x69
 8007cc8:	f44f 7148 	mov.w	r1, #800	; 0x320
 8007ccc:	f242 7010 	movw	r0, #10000	; 0x2710
 8007cd0:	f7fd fd6e 	bl	80057b0 <slalomB>
}
 8007cd4:	e061      	b.n	8007d9a <v_R135+0x2e2>
			slalomB(10000, SPEED_HIGH, VVV_H_OFFSET_F);
 8007cd6:	2269      	movs	r2, #105	; 0x69
 8007cd8:	f44f 7148 	mov.w	r1, #800	; 0x320
 8007cdc:	f242 7010 	movw	r0, #10000	; 0x2710
 8007ce0:	f7fd fd66 	bl	80057b0 <slalomB>
}
 8007ce4:	e059      	b.n	8007d9a <v_R135+0x2e2>
	}else if(run_mode == HIGH_HIGH){
 8007ce6:	4b2e      	ldr	r3, [pc, #184]	; (8007da0 <v_R135+0x2e8>)
 8007ce8:	781b      	ldrb	r3, [r3, #0]
 8007cea:	b2db      	uxtb	r3, r3
 8007cec:	2b04      	cmp	r3, #4
 8007cee:	d154      	bne.n	8007d9a <v_R135+0x2e2>
		if(!MF2.FLAG.V){
 8007cf0:	4b2c      	ldr	r3, [pc, #176]	; (8007da4 <v_R135+0x2ec>)
 8007cf2:	881b      	ldrh	r3, [r3, #0]
 8007cf4:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8007cf8:	b2db      	uxtb	r3, r3
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d10c      	bne.n	8007d18 <v_R135+0x260>
			slalomF(10000, SPEED_HIGH_HIGH, VVV_H_H_OFFSET_F, NO_WALL, NO_WALL);
 8007cfe:	f241 3388 	movw	r3, #5000	; 0x1388
 8007d02:	9300      	str	r3, [sp, #0]
 8007d04:	f241 3388 	movw	r3, #5000	; 0x1388
 8007d08:	2243      	movs	r2, #67	; 0x43
 8007d0a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8007d0e:	f242 7010 	movw	r0, #10000	; 0x2710
 8007d12:	f7fd fbad 	bl	8005470 <slalomF>
 8007d16:	e00b      	b.n	8007d30 <v_R135+0x278>
			slalomF(10000, SPEED_HIGH_HIGH, VVV_H_H_OFFSET_B, NO_WALL, NO_WALL);
 8007d18:	f241 3388 	movw	r3, #5000	; 0x1388
 8007d1c:	9300      	str	r3, [sp, #0]
 8007d1e:	f241 3388 	movw	r3, #5000	; 0x1388
 8007d22:	2232      	movs	r2, #50	; 0x32
 8007d24:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8007d28:	f242 7010 	movw	r0, #10000	; 0x2710
 8007d2c:	f7fd fba0 	bl	8005470 <slalomF>
		slalomR(-VVV_H_H_DEGACCEL, -VVV_H_H_OMEGA, -135, SPEED_HIGH_HIGH);
 8007d30:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007d34:	f06f 0286 	mvn.w	r2, #134	; 0x86
 8007d38:	4921      	ldr	r1, [pc, #132]	; (8007dc0 <v_R135+0x308>)
 8007d3a:	4822      	ldr	r0, [pc, #136]	; (8007dc4 <v_R135+0x30c>)
 8007d3c:	f7fd fc14 	bl	8005568 <slalomR>
		turn_dir(DIR_TURN_R135_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 8007d40:	2103      	movs	r1, #3
 8007d42:	2003      	movs	r0, #3
 8007d44:	f006 fa20 	bl	800e188 <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 8007d48:	4b16      	ldr	r3, [pc, #88]	; (8007da4 <v_R135+0x2ec>)
 8007d4a:	881b      	ldrh	r3, [r3, #0]
 8007d4c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8007d50:	b2db      	uxtb	r3, r3
 8007d52:	3301      	adds	r3, #1
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	f003 0301 	and.w	r3, r3, #1
 8007d5a:	bfb8      	it	lt
 8007d5c:	425b      	neglt	r3, r3
 8007d5e:	f003 0301 	and.w	r3, r3, #1
 8007d62:	b2d9      	uxtb	r1, r3
 8007d64:	4a0f      	ldr	r2, [pc, #60]	; (8007da4 <v_R135+0x2ec>)
 8007d66:	8813      	ldrh	r3, [r2, #0]
 8007d68:	f361 03c3 	bfi	r3, r1, #3, #1
 8007d6c:	8013      	strh	r3, [r2, #0]
		if(!MF2.FLAG.V){
 8007d6e:	4b0d      	ldr	r3, [pc, #52]	; (8007da4 <v_R135+0x2ec>)
 8007d70:	881b      	ldrh	r3, [r3, #0]
 8007d72:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8007d76:	b2db      	uxtb	r3, r3
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d107      	bne.n	8007d8c <v_R135+0x2d4>
			slalomB(10000, SPEED_HIGH_HIGH, VVV_H_H_OFFSET_F);
 8007d7c:	2243      	movs	r2, #67	; 0x43
 8007d7e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8007d82:	f242 7010 	movw	r0, #10000	; 0x2710
 8007d86:	f7fd fd13 	bl	80057b0 <slalomB>
}
 8007d8a:	e006      	b.n	8007d9a <v_R135+0x2e2>
			slalomB(10000, SPEED_HIGH_HIGH, VVV_H_H_OFFSET_F);
 8007d8c:	2243      	movs	r2, #67	; 0x43
 8007d8e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8007d92:	f242 7010 	movw	r0, #10000	; 0x2710
 8007d96:	f7fd fd0b 	bl	80057b0 <slalomB>
}
 8007d9a:	bf00      	nop
 8007d9c:	46bd      	mov	sp, r7
 8007d9e:	bd80      	pop	{r7, pc}
 8007da0:	20000456 	.word	0x20000456
 8007da4:	20000f64 	.word	0x20000f64
 8007da8:	fffffed4 	.word	0xfffffed4
 8007dac:	fffff448 	.word	0xfffff448
 8007db0:	fffffe0c 	.word	0xfffffe0c
 8007db4:	ffffec78 	.word	0xffffec78
 8007db8:	fffffce0 	.word	0xfffffce0
 8007dbc:	ffffe0c0 	.word	0xffffe0c0
 8007dc0:	fffffc18 	.word	0xfffffc18
 8007dc4:	ffffd8f0 	.word	0xffffd8f0

08007dc8 <v_L135>:
//v_L135
// 区画中心から左に135度回転する　ゴール用
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void v_L135(void){
 8007dc8:	b580      	push	{r7, lr}
 8007dca:	b082      	sub	sp, #8
 8007dcc:	af02      	add	r7, sp, #8
	full_led_write(PURPLE);
 8007dce:	2005      	movs	r0, #5
 8007dd0:	f008 f848 	bl	800fe64 <full_led_write>
	if(run_mode == LOW){
 8007dd4:	4bb8      	ldr	r3, [pc, #736]	; (80080b8 <v_L135+0x2f0>)
 8007dd6:	781b      	ldrb	r3, [r3, #0]
 8007dd8:	b2db      	uxtb	r3, r3
 8007dda:	2b01      	cmp	r3, #1
 8007ddc:	d156      	bne.n	8007e8c <v_L135+0xc4>
		if(!MF2.FLAG.V){
 8007dde:	4bb7      	ldr	r3, [pc, #732]	; (80080bc <v_L135+0x2f4>)
 8007de0:	881b      	ldrh	r3, [r3, #0]
 8007de2:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8007de6:	b2db      	uxtb	r3, r3
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d10c      	bne.n	8007e06 <v_L135+0x3e>
			slalomF(10000, SPEED_LOW, VVV_OFFSET_F, NO_WALL, NO_WALL);
 8007dec:	f241 3388 	movw	r3, #5000	; 0x1388
 8007df0:	9300      	str	r3, [sp, #0]
 8007df2:	f241 3388 	movw	r3, #5000	; 0x1388
 8007df6:	2244      	movs	r2, #68	; 0x44
 8007df8:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8007dfc:	f242 7010 	movw	r0, #10000	; 0x2710
 8007e00:	f7fd fb36 	bl	8005470 <slalomF>
 8007e04:	e00b      	b.n	8007e1e <v_L135+0x56>
		}else{
			slalomF(10000, SPEED_LOW, VVV_OFFSET_B, NO_WALL, NO_WALL);
 8007e06:	f241 3388 	movw	r3, #5000	; 0x1388
 8007e0a:	9300      	str	r3, [sp, #0]
 8007e0c:	f241 3388 	movw	r3, #5000	; 0x1388
 8007e10:	223a      	movs	r2, #58	; 0x3a
 8007e12:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8007e16:	f242 7010 	movw	r0, #10000	; 0x2710
 8007e1a:	f7fd fb29 	bl	8005470 <slalomF>
		}
		slalomR(VVV_DEGACCEL, VVV_OMEGA, 135, SPEED_LOW);
 8007e1e:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8007e22:	2287      	movs	r2, #135	; 0x87
 8007e24:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8007e28:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8007e2c:	f7fd fb9c 	bl	8005568 <slalomR>

		turn_dir(DIR_TURN_L135_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 8007e30:	2103      	movs	r1, #3
 8007e32:	20fd      	movs	r0, #253	; 0xfd
 8007e34:	f006 f9a8 	bl	800e188 <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 8007e38:	4ba0      	ldr	r3, [pc, #640]	; (80080bc <v_L135+0x2f4>)
 8007e3a:	881b      	ldrh	r3, [r3, #0]
 8007e3c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8007e40:	b2db      	uxtb	r3, r3
 8007e42:	3301      	adds	r3, #1
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	f003 0301 	and.w	r3, r3, #1
 8007e4a:	bfb8      	it	lt
 8007e4c:	425b      	neglt	r3, r3
 8007e4e:	f003 0301 	and.w	r3, r3, #1
 8007e52:	b2d9      	uxtb	r1, r3
 8007e54:	4a99      	ldr	r2, [pc, #612]	; (80080bc <v_L135+0x2f4>)
 8007e56:	8813      	ldrh	r3, [r2, #0]
 8007e58:	f361 03c3 	bfi	r3, r1, #3, #1
 8007e5c:	8013      	strh	r3, [r2, #0]

		if(!MF2.FLAG.V){
 8007e5e:	4b97      	ldr	r3, [pc, #604]	; (80080bc <v_L135+0x2f4>)
 8007e60:	881b      	ldrh	r3, [r3, #0]
 8007e62:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8007e66:	b2db      	uxtb	r3, r3
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d107      	bne.n	8007e7c <v_L135+0xb4>
			slalomB(10000, SPEED_LOW, VVV_OFFSET_F);
 8007e6c:	2244      	movs	r2, #68	; 0x44
 8007e6e:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8007e72:	f242 7010 	movw	r0, #10000	; 0x2710
 8007e76:	f7fd fc9b 	bl	80057b0 <slalomB>
			slalomB(10000, SPEED_HIGH_HIGH, VVV_H_H_OFFSET_F);
		}else{
			slalomB(10000, SPEED_HIGH_HIGH, VVV_H_H_OFFSET_F);
		}
	}
}
 8007e7a:	e11a      	b.n	80080b2 <v_L135+0x2ea>
			slalomB(10000, SPEED_LOW, VVV_OFFSET_B);
 8007e7c:	223a      	movs	r2, #58	; 0x3a
 8007e7e:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8007e82:	f242 7010 	movw	r0, #10000	; 0x2710
 8007e86:	f7fd fc93 	bl	80057b0 <slalomB>
}
 8007e8a:	e112      	b.n	80080b2 <v_L135+0x2ea>
	}else if(run_mode == MIDDLE){
 8007e8c:	4b8a      	ldr	r3, [pc, #552]	; (80080b8 <v_L135+0x2f0>)
 8007e8e:	781b      	ldrb	r3, [r3, #0]
 8007e90:	b2db      	uxtb	r3, r3
 8007e92:	2b02      	cmp	r3, #2
 8007e94:	d156      	bne.n	8007f44 <v_L135+0x17c>
		if(!MF2.FLAG.V){
 8007e96:	4b89      	ldr	r3, [pc, #548]	; (80080bc <v_L135+0x2f4>)
 8007e98:	881b      	ldrh	r3, [r3, #0]
 8007e9a:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8007e9e:	b2db      	uxtb	r3, r3
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d10c      	bne.n	8007ebe <v_L135+0xf6>
			slalomF(10000, SPEED_MIDDLE, VVV_M_OFFSET_F, NO_WALL, NO_WALL);
 8007ea4:	f241 3388 	movw	r3, #5000	; 0x1388
 8007ea8:	9300      	str	r3, [sp, #0]
 8007eaa:	f241 3388 	movw	r3, #5000	; 0x1388
 8007eae:	2246      	movs	r2, #70	; 0x46
 8007eb0:	f44f 7116 	mov.w	r1, #600	; 0x258
 8007eb4:	f242 7010 	movw	r0, #10000	; 0x2710
 8007eb8:	f7fd fada 	bl	8005470 <slalomF>
 8007ebc:	e00b      	b.n	8007ed6 <v_L135+0x10e>
			slalomF(10000, SPEED_MIDDLE, VVV_M_OFFSET_B, NO_WALL, NO_WALL);
 8007ebe:	f241 3388 	movw	r3, #5000	; 0x1388
 8007ec2:	9300      	str	r3, [sp, #0]
 8007ec4:	f241 3388 	movw	r3, #5000	; 0x1388
 8007ec8:	223b      	movs	r2, #59	; 0x3b
 8007eca:	f44f 7116 	mov.w	r1, #600	; 0x258
 8007ece:	f242 7010 	movw	r0, #10000	; 0x2710
 8007ed2:	f7fd facd 	bl	8005470 <slalomF>
		slalomR(VVV_M_DEGACCEL, VVV_M_OMEGA, 135, SPEED_MIDDLE);
 8007ed6:	f44f 7316 	mov.w	r3, #600	; 0x258
 8007eda:	2287      	movs	r2, #135	; 0x87
 8007edc:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8007ee0:	f241 3088 	movw	r0, #5000	; 0x1388
 8007ee4:	f7fd fb40 	bl	8005568 <slalomR>
		turn_dir(DIR_TURN_L135_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 8007ee8:	2103      	movs	r1, #3
 8007eea:	20fd      	movs	r0, #253	; 0xfd
 8007eec:	f006 f94c 	bl	800e188 <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 8007ef0:	4b72      	ldr	r3, [pc, #456]	; (80080bc <v_L135+0x2f4>)
 8007ef2:	881b      	ldrh	r3, [r3, #0]
 8007ef4:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8007ef8:	b2db      	uxtb	r3, r3
 8007efa:	3301      	adds	r3, #1
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	f003 0301 	and.w	r3, r3, #1
 8007f02:	bfb8      	it	lt
 8007f04:	425b      	neglt	r3, r3
 8007f06:	f003 0301 	and.w	r3, r3, #1
 8007f0a:	b2d9      	uxtb	r1, r3
 8007f0c:	4a6b      	ldr	r2, [pc, #428]	; (80080bc <v_L135+0x2f4>)
 8007f0e:	8813      	ldrh	r3, [r2, #0]
 8007f10:	f361 03c3 	bfi	r3, r1, #3, #1
 8007f14:	8013      	strh	r3, [r2, #0]
		if(!MF2.FLAG.V){
 8007f16:	4b69      	ldr	r3, [pc, #420]	; (80080bc <v_L135+0x2f4>)
 8007f18:	881b      	ldrh	r3, [r3, #0]
 8007f1a:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8007f1e:	b2db      	uxtb	r3, r3
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d107      	bne.n	8007f34 <v_L135+0x16c>
			slalomB(10000, SPEED_MIDDLE, VVV_M_OFFSET_F);
 8007f24:	2246      	movs	r2, #70	; 0x46
 8007f26:	f44f 7116 	mov.w	r1, #600	; 0x258
 8007f2a:	f242 7010 	movw	r0, #10000	; 0x2710
 8007f2e:	f7fd fc3f 	bl	80057b0 <slalomB>
}
 8007f32:	e0be      	b.n	80080b2 <v_L135+0x2ea>
			slalomB(10000, SPEED_MIDDLE, VVV_M_OFFSET_F);
 8007f34:	2246      	movs	r2, #70	; 0x46
 8007f36:	f44f 7116 	mov.w	r1, #600	; 0x258
 8007f3a:	f242 7010 	movw	r0, #10000	; 0x2710
 8007f3e:	f7fd fc37 	bl	80057b0 <slalomB>
}
 8007f42:	e0b6      	b.n	80080b2 <v_L135+0x2ea>
	}else if(run_mode == HIGH){
 8007f44:	4b5c      	ldr	r3, [pc, #368]	; (80080b8 <v_L135+0x2f0>)
 8007f46:	781b      	ldrb	r3, [r3, #0]
 8007f48:	b2db      	uxtb	r3, r3
 8007f4a:	2b03      	cmp	r3, #3
 8007f4c:	d156      	bne.n	8007ffc <v_L135+0x234>
		if(!MF2.FLAG.V){
 8007f4e:	4b5b      	ldr	r3, [pc, #364]	; (80080bc <v_L135+0x2f4>)
 8007f50:	881b      	ldrh	r3, [r3, #0]
 8007f52:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8007f56:	b2db      	uxtb	r3, r3
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d10c      	bne.n	8007f76 <v_L135+0x1ae>
			slalomF(10000, SPEED_HIGH, VVV_H_OFFSET_F, NO_WALL, NO_WALL);
 8007f5c:	f241 3388 	movw	r3, #5000	; 0x1388
 8007f60:	9300      	str	r3, [sp, #0]
 8007f62:	f241 3388 	movw	r3, #5000	; 0x1388
 8007f66:	2269      	movs	r2, #105	; 0x69
 8007f68:	f44f 7148 	mov.w	r1, #800	; 0x320
 8007f6c:	f242 7010 	movw	r0, #10000	; 0x2710
 8007f70:	f7fd fa7e 	bl	8005470 <slalomF>
 8007f74:	e00b      	b.n	8007f8e <v_L135+0x1c6>
			slalomF(10000, SPEED_HIGH, VVV_H_OFFSET_B, NO_WALL, NO_WALL);
 8007f76:	f241 3388 	movw	r3, #5000	; 0x1388
 8007f7a:	9300      	str	r3, [sp, #0]
 8007f7c:	f241 3388 	movw	r3, #5000	; 0x1388
 8007f80:	2246      	movs	r2, #70	; 0x46
 8007f82:	f44f 7148 	mov.w	r1, #800	; 0x320
 8007f86:	f242 7010 	movw	r0, #10000	; 0x2710
 8007f8a:	f7fd fa71 	bl	8005470 <slalomF>
		slalomR(VVV_H_DEGACCEL, VVV_H_OMEGA, 135, SPEED_HIGH);
 8007f8e:	f44f 7348 	mov.w	r3, #800	; 0x320
 8007f92:	2287      	movs	r2, #135	; 0x87
 8007f94:	f44f 7148 	mov.w	r1, #800	; 0x320
 8007f98:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 8007f9c:	f7fd fae4 	bl	8005568 <slalomR>
		turn_dir(DIR_TURN_L135_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 8007fa0:	2103      	movs	r1, #3
 8007fa2:	20fd      	movs	r0, #253	; 0xfd
 8007fa4:	f006 f8f0 	bl	800e188 <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 8007fa8:	4b44      	ldr	r3, [pc, #272]	; (80080bc <v_L135+0x2f4>)
 8007faa:	881b      	ldrh	r3, [r3, #0]
 8007fac:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8007fb0:	b2db      	uxtb	r3, r3
 8007fb2:	3301      	adds	r3, #1
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	f003 0301 	and.w	r3, r3, #1
 8007fba:	bfb8      	it	lt
 8007fbc:	425b      	neglt	r3, r3
 8007fbe:	f003 0301 	and.w	r3, r3, #1
 8007fc2:	b2d9      	uxtb	r1, r3
 8007fc4:	4a3d      	ldr	r2, [pc, #244]	; (80080bc <v_L135+0x2f4>)
 8007fc6:	8813      	ldrh	r3, [r2, #0]
 8007fc8:	f361 03c3 	bfi	r3, r1, #3, #1
 8007fcc:	8013      	strh	r3, [r2, #0]
		if(!MF2.FLAG.V){
 8007fce:	4b3b      	ldr	r3, [pc, #236]	; (80080bc <v_L135+0x2f4>)
 8007fd0:	881b      	ldrh	r3, [r3, #0]
 8007fd2:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8007fd6:	b2db      	uxtb	r3, r3
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d107      	bne.n	8007fec <v_L135+0x224>
			slalomB(10000, SPEED_HIGH, VVV_H_OFFSET_F);
 8007fdc:	2269      	movs	r2, #105	; 0x69
 8007fde:	f44f 7148 	mov.w	r1, #800	; 0x320
 8007fe2:	f242 7010 	movw	r0, #10000	; 0x2710
 8007fe6:	f7fd fbe3 	bl	80057b0 <slalomB>
}
 8007fea:	e062      	b.n	80080b2 <v_L135+0x2ea>
			slalomB(10000, SPEED_HIGH, VVV_H_OFFSET_F);
 8007fec:	2269      	movs	r2, #105	; 0x69
 8007fee:	f44f 7148 	mov.w	r1, #800	; 0x320
 8007ff2:	f242 7010 	movw	r0, #10000	; 0x2710
 8007ff6:	f7fd fbdb 	bl	80057b0 <slalomB>
}
 8007ffa:	e05a      	b.n	80080b2 <v_L135+0x2ea>
	}else if(run_mode == HIGH_HIGH){
 8007ffc:	4b2e      	ldr	r3, [pc, #184]	; (80080b8 <v_L135+0x2f0>)
 8007ffe:	781b      	ldrb	r3, [r3, #0]
 8008000:	b2db      	uxtb	r3, r3
 8008002:	2b04      	cmp	r3, #4
 8008004:	d155      	bne.n	80080b2 <v_L135+0x2ea>
		if(!MF2.FLAG.V){
 8008006:	4b2d      	ldr	r3, [pc, #180]	; (80080bc <v_L135+0x2f4>)
 8008008:	881b      	ldrh	r3, [r3, #0]
 800800a:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800800e:	b2db      	uxtb	r3, r3
 8008010:	2b00      	cmp	r3, #0
 8008012:	d10c      	bne.n	800802e <v_L135+0x266>
			slalomF(10000, SPEED_HIGH_HIGH, VVV_H_H_OFFSET_F, NO_WALL, NO_WALL);
 8008014:	f241 3388 	movw	r3, #5000	; 0x1388
 8008018:	9300      	str	r3, [sp, #0]
 800801a:	f241 3388 	movw	r3, #5000	; 0x1388
 800801e:	2243      	movs	r2, #67	; 0x43
 8008020:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8008024:	f242 7010 	movw	r0, #10000	; 0x2710
 8008028:	f7fd fa22 	bl	8005470 <slalomF>
 800802c:	e00b      	b.n	8008046 <v_L135+0x27e>
			slalomF(10000, SPEED_HIGH_HIGH, VVV_H_H_OFFSET_B, NO_WALL, NO_WALL);
 800802e:	f241 3388 	movw	r3, #5000	; 0x1388
 8008032:	9300      	str	r3, [sp, #0]
 8008034:	f241 3388 	movw	r3, #5000	; 0x1388
 8008038:	2232      	movs	r2, #50	; 0x32
 800803a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800803e:	f242 7010 	movw	r0, #10000	; 0x2710
 8008042:	f7fd fa15 	bl	8005470 <slalomF>
		slalomR(VVV_H_H_DEGACCEL, VVV_H_H_OMEGA, 135, SPEED_HIGH_HIGH);
 8008046:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800804a:	2287      	movs	r2, #135	; 0x87
 800804c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8008050:	f242 7010 	movw	r0, #10000	; 0x2710
 8008054:	f7fd fa88 	bl	8005568 <slalomR>
		turn_dir(DIR_TURN_L135_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 8008058:	2103      	movs	r1, #3
 800805a:	20fd      	movs	r0, #253	; 0xfd
 800805c:	f006 f894 	bl	800e188 <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 8008060:	4b16      	ldr	r3, [pc, #88]	; (80080bc <v_L135+0x2f4>)
 8008062:	881b      	ldrh	r3, [r3, #0]
 8008064:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8008068:	b2db      	uxtb	r3, r3
 800806a:	3301      	adds	r3, #1
 800806c:	2b00      	cmp	r3, #0
 800806e:	f003 0301 	and.w	r3, r3, #1
 8008072:	bfb8      	it	lt
 8008074:	425b      	neglt	r3, r3
 8008076:	f003 0301 	and.w	r3, r3, #1
 800807a:	b2d9      	uxtb	r1, r3
 800807c:	4a0f      	ldr	r2, [pc, #60]	; (80080bc <v_L135+0x2f4>)
 800807e:	8813      	ldrh	r3, [r2, #0]
 8008080:	f361 03c3 	bfi	r3, r1, #3, #1
 8008084:	8013      	strh	r3, [r2, #0]
		if(!MF2.FLAG.V){
 8008086:	4b0d      	ldr	r3, [pc, #52]	; (80080bc <v_L135+0x2f4>)
 8008088:	881b      	ldrh	r3, [r3, #0]
 800808a:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800808e:	b2db      	uxtb	r3, r3
 8008090:	2b00      	cmp	r3, #0
 8008092:	d107      	bne.n	80080a4 <v_L135+0x2dc>
			slalomB(10000, SPEED_HIGH_HIGH, VVV_H_H_OFFSET_F);
 8008094:	2243      	movs	r2, #67	; 0x43
 8008096:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800809a:	f242 7010 	movw	r0, #10000	; 0x2710
 800809e:	f7fd fb87 	bl	80057b0 <slalomB>
}
 80080a2:	e006      	b.n	80080b2 <v_L135+0x2ea>
			slalomB(10000, SPEED_HIGH_HIGH, VVV_H_H_OFFSET_F);
 80080a4:	2243      	movs	r2, #67	; 0x43
 80080a6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80080aa:	f242 7010 	movw	r0, #10000	; 0x2710
 80080ae:	f7fd fb7f 	bl	80057b0 <slalomB>
}
 80080b2:	bf00      	nop
 80080b4:	46bd      	mov	sp, r7
 80080b6:	bd80      	pop	{r7, pc}
 80080b8:	20000456 	.word	0x20000456
 80080bc:	20000f64 	.word	0x20000f64

080080c0 <v_R135D>:
//v_R135D
// 区画中心から右に135度回転する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void v_R135D(void){
 80080c0:	b580      	push	{r7, lr}
 80080c2:	b082      	sub	sp, #8
 80080c4:	af02      	add	r7, sp, #8
	full_led_write(YELLOW);
 80080c6:	2006      	movs	r0, #6
 80080c8:	f007 fecc 	bl	800fe64 <full_led_write>
	if(run_mode == LOW){
 80080cc:	4b78      	ldr	r3, [pc, #480]	; (80082b0 <v_R135D+0x1f0>)
 80080ce:	781b      	ldrb	r3, [r3, #0]
 80080d0:	b2db      	uxtb	r3, r3
 80080d2:	2b01      	cmp	r3, #1
 80080d4:	d15c      	bne.n	8008190 <v_R135D+0xd0>
		if(!MF2.FLAG.V){
 80080d6:	4b77      	ldr	r3, [pc, #476]	; (80082b4 <v_R135D+0x1f4>)
 80080d8:	881b      	ldrh	r3, [r3, #0]
 80080da:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80080de:	b2db      	uxtb	r3, r3
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d10c      	bne.n	80080fe <v_R135D+0x3e>
			slalomF(10000, SPEED_LOW, VVV_OFFSET_F, NO_WALL, NO_WALL);
 80080e4:	f241 3388 	movw	r3, #5000	; 0x1388
 80080e8:	9300      	str	r3, [sp, #0]
 80080ea:	f241 3388 	movw	r3, #5000	; 0x1388
 80080ee:	2244      	movs	r2, #68	; 0x44
 80080f0:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80080f4:	f242 7010 	movw	r0, #10000	; 0x2710
 80080f8:	f7fd f9ba 	bl	8005470 <slalomF>
 80080fc:	e00b      	b.n	8008116 <v_R135D+0x56>
		}else{
			slalomF(10000, SPEED_LOW, VVV_OFFSET_B, NO_WALL, NO_WALL);
 80080fe:	f241 3388 	movw	r3, #5000	; 0x1388
 8008102:	9300      	str	r3, [sp, #0]
 8008104:	f241 3388 	movw	r3, #5000	; 0x1388
 8008108:	223a      	movs	r2, #58	; 0x3a
 800810a:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800810e:	f242 7010 	movw	r0, #10000	; 0x2710
 8008112:	f7fd f9ad 	bl	8005470 <slalomF>
		}
		slalomR(-VVV_DEGACCEL, -VVV_OMEGA, -135, SPEED_LOW);
 8008116:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800811a:	f06f 0286 	mvn.w	r2, #134	; 0x86
 800811e:	4966      	ldr	r1, [pc, #408]	; (80082b8 <v_R135D+0x1f8>)
 8008120:	4866      	ldr	r0, [pc, #408]	; (80082bc <v_R135D+0x1fc>)
 8008122:	f7fd fa21 	bl	8005568 <slalomR>

		turn_dir(DIR_TURN_R135_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 8008126:	2103      	movs	r1, #3
 8008128:	2003      	movs	r0, #3
 800812a:	f006 f82d 	bl	800e188 <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 800812e:	4b61      	ldr	r3, [pc, #388]	; (80082b4 <v_R135D+0x1f4>)
 8008130:	881b      	ldrh	r3, [r3, #0]
 8008132:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8008136:	b2db      	uxtb	r3, r3
 8008138:	3301      	adds	r3, #1
 800813a:	2b00      	cmp	r3, #0
 800813c:	f003 0301 	and.w	r3, r3, #1
 8008140:	bfb8      	it	lt
 8008142:	425b      	neglt	r3, r3
 8008144:	f003 0301 	and.w	r3, r3, #1
 8008148:	b2d9      	uxtb	r1, r3
 800814a:	4a5a      	ldr	r2, [pc, #360]	; (80082b4 <v_R135D+0x1f4>)
 800814c:	8813      	ldrh	r3, [r2, #0]
 800814e:	f361 03c3 	bfi	r3, r1, #3, #1
 8008152:	8013      	strh	r3, [r2, #0]

		if(!MF2.FLAG.V){
 8008154:	4b57      	ldr	r3, [pc, #348]	; (80082b4 <v_R135D+0x1f4>)
 8008156:	881b      	ldrh	r3, [r3, #0]
 8008158:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800815c:	b2db      	uxtb	r3, r3
 800815e:	2b00      	cmp	r3, #0
 8008160:	d107      	bne.n	8008172 <v_R135D+0xb2>
			slalomB(10000, SPEED_LOW, VVV_OFFSET_F-10);
 8008162:	223a      	movs	r2, #58	; 0x3a
 8008164:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8008168:	f242 7010 	movw	r0, #10000	; 0x2710
 800816c:	f7fd fb20 	bl	80057b0 <slalomB>
 8008170:	e006      	b.n	8008180 <v_R135D+0xc0>
		}else{
			slalomB(10000, SPEED_LOW, VVV_OFFSET_B-10);
 8008172:	2230      	movs	r2, #48	; 0x30
 8008174:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8008178:	f242 7010 	movw	r0, #10000	; 0x2710
 800817c:	f7fd fb18 	bl	80057b0 <slalomB>
		}
		driveD(-10000, SPEED_MIN, SPEED_LOW, 10);
 8008180:	230a      	movs	r3, #10
 8008182:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8008186:	2114      	movs	r1, #20
 8008188:	484d      	ldr	r0, [pc, #308]	; (80082c0 <v_R135D+0x200>)
 800818a:	f7fc ff99 	bl	80050c0 <driveD>
		}else{
			slalomB(10000, SPEED_HIGH, VVV_H_OFFSET_F-10);
		}
		driveD(-10000, SPEED_MIN, SPEED_HIGH, 10);
	}
}
 800818e:	e08b      	b.n	80082a8 <v_R135D+0x1e8>
	}else if(run_mode == HIGH){
 8008190:	4b47      	ldr	r3, [pc, #284]	; (80082b0 <v_R135D+0x1f0>)
 8008192:	781b      	ldrb	r3, [r3, #0]
 8008194:	b2db      	uxtb	r3, r3
 8008196:	2b03      	cmp	r3, #3
 8008198:	f040 8086 	bne.w	80082a8 <v_R135D+0x1e8>
		if(!MF2.FLAG.V){
 800819c:	4b45      	ldr	r3, [pc, #276]	; (80082b4 <v_R135D+0x1f4>)
 800819e:	881b      	ldrh	r3, [r3, #0]
 80081a0:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80081a4:	b2db      	uxtb	r3, r3
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d121      	bne.n	80081ee <v_R135D+0x12e>
			while(dist_l < VVV_H_OFFSET_F && dist_r < VVV_H_OFFSET_F);
 80081aa:	bf00      	nop
 80081ac:	4b45      	ldr	r3, [pc, #276]	; (80082c4 <v_R135D+0x204>)
 80081ae:	edd3 7a00 	vldr	s15, [r3]
 80081b2:	ed9f 7a45 	vldr	s14, [pc, #276]	; 80082c8 <v_R135D+0x208>
 80081b6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80081ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80081be:	d509      	bpl.n	80081d4 <v_R135D+0x114>
 80081c0:	4b42      	ldr	r3, [pc, #264]	; (80082cc <v_R135D+0x20c>)
 80081c2:	edd3 7a00 	vldr	s15, [r3]
 80081c6:	ed9f 7a40 	vldr	s14, [pc, #256]	; 80082c8 <v_R135D+0x208>
 80081ca:	eef4 7ac7 	vcmpe.f32	s15, s14
 80081ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80081d2:	d4eb      	bmi.n	80081ac <v_R135D+0xec>
			slalomF(10000, SPEED_HIGH, VVV_H_OFFSET_F, NO_WALL, NO_WALL);
 80081d4:	f241 3388 	movw	r3, #5000	; 0x1388
 80081d8:	9300      	str	r3, [sp, #0]
 80081da:	f241 3388 	movw	r3, #5000	; 0x1388
 80081de:	2269      	movs	r2, #105	; 0x69
 80081e0:	f44f 7148 	mov.w	r1, #800	; 0x320
 80081e4:	f242 7010 	movw	r0, #10000	; 0x2710
 80081e8:	f7fd f942 	bl	8005470 <slalomF>
 80081ec:	e020      	b.n	8008230 <v_R135D+0x170>
			while(dist_l < VVV_H_OFFSET_B && dist_r < VVV_H_OFFSET_B);
 80081ee:	bf00      	nop
 80081f0:	4b34      	ldr	r3, [pc, #208]	; (80082c4 <v_R135D+0x204>)
 80081f2:	edd3 7a00 	vldr	s15, [r3]
 80081f6:	ed9f 7a36 	vldr	s14, [pc, #216]	; 80082d0 <v_R135D+0x210>
 80081fa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80081fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008202:	d509      	bpl.n	8008218 <v_R135D+0x158>
 8008204:	4b31      	ldr	r3, [pc, #196]	; (80082cc <v_R135D+0x20c>)
 8008206:	edd3 7a00 	vldr	s15, [r3]
 800820a:	ed9f 7a31 	vldr	s14, [pc, #196]	; 80082d0 <v_R135D+0x210>
 800820e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008212:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008216:	d4eb      	bmi.n	80081f0 <v_R135D+0x130>
			slalomF(10000, SPEED_HIGH, VVV_H_OFFSET_B, NO_WALL, NO_WALL);
 8008218:	f241 3388 	movw	r3, #5000	; 0x1388
 800821c:	9300      	str	r3, [sp, #0]
 800821e:	f241 3388 	movw	r3, #5000	; 0x1388
 8008222:	2246      	movs	r2, #70	; 0x46
 8008224:	f44f 7148 	mov.w	r1, #800	; 0x320
 8008228:	f242 7010 	movw	r0, #10000	; 0x2710
 800822c:	f7fd f920 	bl	8005470 <slalomF>
		slalomR(-VVV_H_DEGACCEL, -VVV_H_OMEGA, -135, SPEED_HIGH);
 8008230:	f44f 7348 	mov.w	r3, #800	; 0x320
 8008234:	f06f 0286 	mvn.w	r2, #134	; 0x86
 8008238:	4926      	ldr	r1, [pc, #152]	; (80082d4 <v_R135D+0x214>)
 800823a:	4827      	ldr	r0, [pc, #156]	; (80082d8 <v_R135D+0x218>)
 800823c:	f7fd f994 	bl	8005568 <slalomR>
		turn_dir(DIR_TURN_R135_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 8008240:	2103      	movs	r1, #3
 8008242:	2003      	movs	r0, #3
 8008244:	f005 ffa0 	bl	800e188 <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 8008248:	4b1a      	ldr	r3, [pc, #104]	; (80082b4 <v_R135D+0x1f4>)
 800824a:	881b      	ldrh	r3, [r3, #0]
 800824c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8008250:	b2db      	uxtb	r3, r3
 8008252:	3301      	adds	r3, #1
 8008254:	2b00      	cmp	r3, #0
 8008256:	f003 0301 	and.w	r3, r3, #1
 800825a:	bfb8      	it	lt
 800825c:	425b      	neglt	r3, r3
 800825e:	f003 0301 	and.w	r3, r3, #1
 8008262:	b2d9      	uxtb	r1, r3
 8008264:	4a13      	ldr	r2, [pc, #76]	; (80082b4 <v_R135D+0x1f4>)
 8008266:	8813      	ldrh	r3, [r2, #0]
 8008268:	f361 03c3 	bfi	r3, r1, #3, #1
 800826c:	8013      	strh	r3, [r2, #0]
		if(!MF2.FLAG.V){
 800826e:	4b11      	ldr	r3, [pc, #68]	; (80082b4 <v_R135D+0x1f4>)
 8008270:	881b      	ldrh	r3, [r3, #0]
 8008272:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8008276:	b2db      	uxtb	r3, r3
 8008278:	2b00      	cmp	r3, #0
 800827a:	d107      	bne.n	800828c <v_R135D+0x1cc>
			slalomB(10000, SPEED_HIGH, VVV_H_OFFSET_F-10);
 800827c:	225f      	movs	r2, #95	; 0x5f
 800827e:	f44f 7148 	mov.w	r1, #800	; 0x320
 8008282:	f242 7010 	movw	r0, #10000	; 0x2710
 8008286:	f7fd fa93 	bl	80057b0 <slalomB>
 800828a:	e006      	b.n	800829a <v_R135D+0x1da>
			slalomB(10000, SPEED_HIGH, VVV_H_OFFSET_F-10);
 800828c:	225f      	movs	r2, #95	; 0x5f
 800828e:	f44f 7148 	mov.w	r1, #800	; 0x320
 8008292:	f242 7010 	movw	r0, #10000	; 0x2710
 8008296:	f7fd fa8b 	bl	80057b0 <slalomB>
		driveD(-10000, SPEED_MIN, SPEED_HIGH, 10);
 800829a:	230a      	movs	r3, #10
 800829c:	f44f 7248 	mov.w	r2, #800	; 0x320
 80082a0:	2114      	movs	r1, #20
 80082a2:	4807      	ldr	r0, [pc, #28]	; (80082c0 <v_R135D+0x200>)
 80082a4:	f7fc ff0c 	bl	80050c0 <driveD>
}
 80082a8:	bf00      	nop
 80082aa:	46bd      	mov	sp, r7
 80082ac:	bd80      	pop	{r7, pc}
 80082ae:	bf00      	nop
 80082b0:	20000456 	.word	0x20000456
 80082b4:	20000f64 	.word	0x20000f64
 80082b8:	fffffed4 	.word	0xfffffed4
 80082bc:	fffff448 	.word	0xfffff448
 80082c0:	ffffd8f0 	.word	0xffffd8f0
 80082c4:	200015c4 	.word	0x200015c4
 80082c8:	42d20000 	.word	0x42d20000
 80082cc:	20000aec 	.word	0x20000aec
 80082d0:	428c0000 	.word	0x428c0000
 80082d4:	fffffce0 	.word	0xfffffce0
 80082d8:	ffffe0c0 	.word	0xffffe0c0

080082dc <v_L135D>:
//v_L135D
// 区画中心から左に135度回転する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void v_L135D(void){
 80082dc:	b580      	push	{r7, lr}
 80082de:	b082      	sub	sp, #8
 80082e0:	af02      	add	r7, sp, #8
	full_led_write(PURPLE);
 80082e2:	2005      	movs	r0, #5
 80082e4:	f007 fdbe 	bl	800fe64 <full_led_write>
	if(run_mode == LOW){
 80082e8:	4b8e      	ldr	r3, [pc, #568]	; (8008524 <v_L135D+0x248>)
 80082ea:	781b      	ldrb	r3, [r3, #0]
 80082ec:	b2db      	uxtb	r3, r3
 80082ee:	2b01      	cmp	r3, #1
 80082f0:	d15d      	bne.n	80083ae <v_L135D+0xd2>
		if(!MF2.FLAG.V){
 80082f2:	4b8d      	ldr	r3, [pc, #564]	; (8008528 <v_L135D+0x24c>)
 80082f4:	881b      	ldrh	r3, [r3, #0]
 80082f6:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80082fa:	b2db      	uxtb	r3, r3
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d10c      	bne.n	800831a <v_L135D+0x3e>
			slalomF(10000, SPEED_LOW, VVV_OFFSET_F, NO_WALL, NO_WALL);
 8008300:	f241 3388 	movw	r3, #5000	; 0x1388
 8008304:	9300      	str	r3, [sp, #0]
 8008306:	f241 3388 	movw	r3, #5000	; 0x1388
 800830a:	2244      	movs	r2, #68	; 0x44
 800830c:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8008310:	f242 7010 	movw	r0, #10000	; 0x2710
 8008314:	f7fd f8ac 	bl	8005470 <slalomF>
 8008318:	e00b      	b.n	8008332 <v_L135D+0x56>
		}else{
			slalomF(10000, SPEED_LOW, VVV_OFFSET_B, NO_WALL, NO_WALL);
 800831a:	f241 3388 	movw	r3, #5000	; 0x1388
 800831e:	9300      	str	r3, [sp, #0]
 8008320:	f241 3388 	movw	r3, #5000	; 0x1388
 8008324:	223a      	movs	r2, #58	; 0x3a
 8008326:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800832a:	f242 7010 	movw	r0, #10000	; 0x2710
 800832e:	f7fd f89f 	bl	8005470 <slalomF>
		}
		slalomR(VVV_DEGACCEL, VVV_OMEGA, 135, SPEED_LOW);
 8008332:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8008336:	2287      	movs	r2, #135	; 0x87
 8008338:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800833c:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8008340:	f7fd f912 	bl	8005568 <slalomR>

		turn_dir(DIR_TURN_L135_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 8008344:	2103      	movs	r1, #3
 8008346:	20fd      	movs	r0, #253	; 0xfd
 8008348:	f005 ff1e 	bl	800e188 <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 800834c:	4b76      	ldr	r3, [pc, #472]	; (8008528 <v_L135D+0x24c>)
 800834e:	881b      	ldrh	r3, [r3, #0]
 8008350:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8008354:	b2db      	uxtb	r3, r3
 8008356:	3301      	adds	r3, #1
 8008358:	2b00      	cmp	r3, #0
 800835a:	f003 0301 	and.w	r3, r3, #1
 800835e:	bfb8      	it	lt
 8008360:	425b      	neglt	r3, r3
 8008362:	f003 0301 	and.w	r3, r3, #1
 8008366:	b2d9      	uxtb	r1, r3
 8008368:	4a6f      	ldr	r2, [pc, #444]	; (8008528 <v_L135D+0x24c>)
 800836a:	8813      	ldrh	r3, [r2, #0]
 800836c:	f361 03c3 	bfi	r3, r1, #3, #1
 8008370:	8013      	strh	r3, [r2, #0]

		if(!MF2.FLAG.V){
 8008372:	4b6d      	ldr	r3, [pc, #436]	; (8008528 <v_L135D+0x24c>)
 8008374:	881b      	ldrh	r3, [r3, #0]
 8008376:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800837a:	b2db      	uxtb	r3, r3
 800837c:	2b00      	cmp	r3, #0
 800837e:	d107      	bne.n	8008390 <v_L135D+0xb4>
			slalomB(10000, SPEED_LOW, VVV_OFFSET_F-10);
 8008380:	223a      	movs	r2, #58	; 0x3a
 8008382:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8008386:	f242 7010 	movw	r0, #10000	; 0x2710
 800838a:	f7fd fa11 	bl	80057b0 <slalomB>
 800838e:	e006      	b.n	800839e <v_L135D+0xc2>
		}else{
			slalomB(10000, SPEED_LOW, VVV_OFFSET_B-10);
 8008390:	2230      	movs	r2, #48	; 0x30
 8008392:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8008396:	f242 7010 	movw	r0, #10000	; 0x2710
 800839a:	f7fd fa09 	bl	80057b0 <slalomB>
		}
		driveD(-10000, SPEED_MIN, SPEED_LOW, 10);
 800839e:	230a      	movs	r3, #10
 80083a0:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80083a4:	2114      	movs	r1, #20
 80083a6:	4861      	ldr	r0, [pc, #388]	; (800852c <v_L135D+0x250>)
 80083a8:	f7fc fe8a 	bl	80050c0 <driveD>
			while(dist_l < VVV_H_OFFSET_B-10 && dist_r < VVV_H_OFFSET_B-10);
			slalomB(10000, SPEED_HIGH, VVV_H_OFFSET_B-10);
		}
		driveD(-10000, SPEED_MIN, SPEED_HIGH, 10);
	}
}
 80083ac:	e0b6      	b.n	800851c <v_L135D+0x240>
	}else if(run_mode == HIGH){
 80083ae:	4b5d      	ldr	r3, [pc, #372]	; (8008524 <v_L135D+0x248>)
 80083b0:	781b      	ldrb	r3, [r3, #0]
 80083b2:	b2db      	uxtb	r3, r3
 80083b4:	2b03      	cmp	r3, #3
 80083b6:	f040 80b1 	bne.w	800851c <v_L135D+0x240>
		if(!MF2.FLAG.V){
 80083ba:	4b5b      	ldr	r3, [pc, #364]	; (8008528 <v_L135D+0x24c>)
 80083bc:	881b      	ldrh	r3, [r3, #0]
 80083be:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80083c2:	b2db      	uxtb	r3, r3
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d121      	bne.n	800840c <v_L135D+0x130>
			while(dist_l < VVV_H_OFFSET_F && dist_r < VVV_H_OFFSET_F);
 80083c8:	bf00      	nop
 80083ca:	4b59      	ldr	r3, [pc, #356]	; (8008530 <v_L135D+0x254>)
 80083cc:	edd3 7a00 	vldr	s15, [r3]
 80083d0:	ed9f 7a58 	vldr	s14, [pc, #352]	; 8008534 <v_L135D+0x258>
 80083d4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80083d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80083dc:	d509      	bpl.n	80083f2 <v_L135D+0x116>
 80083de:	4b56      	ldr	r3, [pc, #344]	; (8008538 <v_L135D+0x25c>)
 80083e0:	edd3 7a00 	vldr	s15, [r3]
 80083e4:	ed9f 7a53 	vldr	s14, [pc, #332]	; 8008534 <v_L135D+0x258>
 80083e8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80083ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80083f0:	d4eb      	bmi.n	80083ca <v_L135D+0xee>
			slalomF(10000, SPEED_HIGH, VVV_H_OFFSET_F, NO_WALL, NO_WALL);
 80083f2:	f241 3388 	movw	r3, #5000	; 0x1388
 80083f6:	9300      	str	r3, [sp, #0]
 80083f8:	f241 3388 	movw	r3, #5000	; 0x1388
 80083fc:	2269      	movs	r2, #105	; 0x69
 80083fe:	f44f 7148 	mov.w	r1, #800	; 0x320
 8008402:	f242 7010 	movw	r0, #10000	; 0x2710
 8008406:	f7fd f833 	bl	8005470 <slalomF>
 800840a:	e020      	b.n	800844e <v_L135D+0x172>
			while(dist_l < VVV_H_OFFSET_B && dist_r < VVV_H_OFFSET_B);
 800840c:	bf00      	nop
 800840e:	4b48      	ldr	r3, [pc, #288]	; (8008530 <v_L135D+0x254>)
 8008410:	edd3 7a00 	vldr	s15, [r3]
 8008414:	ed9f 7a49 	vldr	s14, [pc, #292]	; 800853c <v_L135D+0x260>
 8008418:	eef4 7ac7 	vcmpe.f32	s15, s14
 800841c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008420:	d509      	bpl.n	8008436 <v_L135D+0x15a>
 8008422:	4b45      	ldr	r3, [pc, #276]	; (8008538 <v_L135D+0x25c>)
 8008424:	edd3 7a00 	vldr	s15, [r3]
 8008428:	ed9f 7a44 	vldr	s14, [pc, #272]	; 800853c <v_L135D+0x260>
 800842c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008430:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008434:	d4eb      	bmi.n	800840e <v_L135D+0x132>
			slalomF(10000, SPEED_HIGH, VVV_H_OFFSET_B, NO_WALL, NO_WALL);
 8008436:	f241 3388 	movw	r3, #5000	; 0x1388
 800843a:	9300      	str	r3, [sp, #0]
 800843c:	f241 3388 	movw	r3, #5000	; 0x1388
 8008440:	2246      	movs	r2, #70	; 0x46
 8008442:	f44f 7148 	mov.w	r1, #800	; 0x320
 8008446:	f242 7010 	movw	r0, #10000	; 0x2710
 800844a:	f7fd f811 	bl	8005470 <slalomF>
		slalomR(VVV_H_DEGACCEL, VVV_H_OMEGA, 135, SPEED_HIGH);
 800844e:	f44f 7348 	mov.w	r3, #800	; 0x320
 8008452:	2287      	movs	r2, #135	; 0x87
 8008454:	f44f 7148 	mov.w	r1, #800	; 0x320
 8008458:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 800845c:	f7fd f884 	bl	8005568 <slalomR>
		turn_dir(DIR_TURN_L135_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 8008460:	2103      	movs	r1, #3
 8008462:	20fd      	movs	r0, #253	; 0xfd
 8008464:	f005 fe90 	bl	800e188 <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 8008468:	4b2f      	ldr	r3, [pc, #188]	; (8008528 <v_L135D+0x24c>)
 800846a:	881b      	ldrh	r3, [r3, #0]
 800846c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8008470:	b2db      	uxtb	r3, r3
 8008472:	3301      	adds	r3, #1
 8008474:	2b00      	cmp	r3, #0
 8008476:	f003 0301 	and.w	r3, r3, #1
 800847a:	bfb8      	it	lt
 800847c:	425b      	neglt	r3, r3
 800847e:	f003 0301 	and.w	r3, r3, #1
 8008482:	b2d9      	uxtb	r1, r3
 8008484:	4a28      	ldr	r2, [pc, #160]	; (8008528 <v_L135D+0x24c>)
 8008486:	8813      	ldrh	r3, [r2, #0]
 8008488:	f361 03c3 	bfi	r3, r1, #3, #1
 800848c:	8013      	strh	r3, [r2, #0]
		if(!MF2.FLAG.V){
 800848e:	4b26      	ldr	r3, [pc, #152]	; (8008528 <v_L135D+0x24c>)
 8008490:	881b      	ldrh	r3, [r3, #0]
 8008492:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8008496:	b2db      	uxtb	r3, r3
 8008498:	2b00      	cmp	r3, #0
 800849a:	d11c      	bne.n	80084d6 <v_L135D+0x1fa>
			while(dist_l < VVV_H_OFFSET_F-10 && dist_r < VVV_H_OFFSET_F-10);
 800849c:	bf00      	nop
 800849e:	4b24      	ldr	r3, [pc, #144]	; (8008530 <v_L135D+0x254>)
 80084a0:	edd3 7a00 	vldr	s15, [r3]
 80084a4:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8008540 <v_L135D+0x264>
 80084a8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80084ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80084b0:	d509      	bpl.n	80084c6 <v_L135D+0x1ea>
 80084b2:	4b21      	ldr	r3, [pc, #132]	; (8008538 <v_L135D+0x25c>)
 80084b4:	edd3 7a00 	vldr	s15, [r3]
 80084b8:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8008540 <v_L135D+0x264>
 80084bc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80084c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80084c4:	d4eb      	bmi.n	800849e <v_L135D+0x1c2>
			slalomB(10000, SPEED_HIGH, VVV_H_OFFSET_F-10);
 80084c6:	225f      	movs	r2, #95	; 0x5f
 80084c8:	f44f 7148 	mov.w	r1, #800	; 0x320
 80084cc:	f242 7010 	movw	r0, #10000	; 0x2710
 80084d0:	f7fd f96e 	bl	80057b0 <slalomB>
 80084d4:	e01b      	b.n	800850e <v_L135D+0x232>
			while(dist_l < VVV_H_OFFSET_B-10 && dist_r < VVV_H_OFFSET_B-10);
 80084d6:	bf00      	nop
 80084d8:	4b15      	ldr	r3, [pc, #84]	; (8008530 <v_L135D+0x254>)
 80084da:	edd3 7a00 	vldr	s15, [r3]
 80084de:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8008544 <v_L135D+0x268>
 80084e2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80084e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80084ea:	d509      	bpl.n	8008500 <v_L135D+0x224>
 80084ec:	4b12      	ldr	r3, [pc, #72]	; (8008538 <v_L135D+0x25c>)
 80084ee:	edd3 7a00 	vldr	s15, [r3]
 80084f2:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8008544 <v_L135D+0x268>
 80084f6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80084fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80084fe:	d4eb      	bmi.n	80084d8 <v_L135D+0x1fc>
			slalomB(10000, SPEED_HIGH, VVV_H_OFFSET_B-10);
 8008500:	223c      	movs	r2, #60	; 0x3c
 8008502:	f44f 7148 	mov.w	r1, #800	; 0x320
 8008506:	f242 7010 	movw	r0, #10000	; 0x2710
 800850a:	f7fd f951 	bl	80057b0 <slalomB>
		driveD(-10000, SPEED_MIN, SPEED_HIGH, 10);
 800850e:	230a      	movs	r3, #10
 8008510:	f44f 7248 	mov.w	r2, #800	; 0x320
 8008514:	2114      	movs	r1, #20
 8008516:	4805      	ldr	r0, [pc, #20]	; (800852c <v_L135D+0x250>)
 8008518:	f7fc fdd2 	bl	80050c0 <driveD>
}
 800851c:	bf00      	nop
 800851e:	46bd      	mov	sp, r7
 8008520:	bd80      	pop	{r7, pc}
 8008522:	bf00      	nop
 8008524:	20000456 	.word	0x20000456
 8008528:	20000f64 	.word	0x20000f64
 800852c:	ffffd8f0 	.word	0xffffd8f0
 8008530:	200015c4 	.word	0x200015c4
 8008534:	42d20000 	.word	0x42d20000
 8008538:	20000aec 	.word	0x20000aec
 800853c:	428c0000 	.word	0x428c0000
 8008540:	42be0000 	.word	0x42be0000
 8008544:	42700000 	.word	0x42700000

08008548 <test_select>:
//test_select
// 走行系テスト選択
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void test_select(void){
 8008548:	b580      	push	{r7, lr}
 800854a:	b082      	sub	sp, #8
 800854c:	af00      	add	r7, sp, #0
	int mode = 0;
 800854e:	2300      	movs	r3, #0
 8008550:	607b      	str	r3, [r7, #4]
	printf("Test Select, Mode : %d\n", mode);
 8008552:	6879      	ldr	r1, [r7, #4]
 8008554:	483b      	ldr	r0, [pc, #236]	; (8008644 <test_select+0xfc>)
 8008556:	f008 fa19 	bl	801098c <iprintf>

	while(1){
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	b2db      	uxtb	r3, r3
 800855e:	f003 0301 	and.w	r3, r3, #1
 8008562:	b2d8      	uxtb	r0, r3
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	b2db      	uxtb	r3, r3
 8008568:	f003 0302 	and.w	r3, r3, #2
 800856c:	b2d9      	uxtb	r1, r3
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	b2db      	uxtb	r3, r3
 8008572:	f003 0304 	and.w	r3, r3, #4
 8008576:	b2db      	uxtb	r3, r3
 8008578:	461a      	mov	r2, r3
 800857a:	f007 fc39 	bl	800fdf0 <led_write>
		  if(dist_r >= 20){
 800857e:	4b32      	ldr	r3, [pc, #200]	; (8008648 <test_select+0x100>)
 8008580:	edd3 7a00 	vldr	s15, [r3]
 8008584:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8008588:	eef4 7ac7 	vcmpe.f32	s15, s14
 800858c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008590:	db0f      	blt.n	80085b2 <test_select+0x6a>
			  mode++;
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	3301      	adds	r3, #1
 8008596:	607b      	str	r3, [r7, #4]
			  dist_r = 0;
 8008598:	4b2b      	ldr	r3, [pc, #172]	; (8008648 <test_select+0x100>)
 800859a:	f04f 0200 	mov.w	r2, #0
 800859e:	601a      	str	r2, [r3, #0]
			  if(mode > 7){
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	2b07      	cmp	r3, #7
 80085a4:	dd01      	ble.n	80085aa <test_select+0x62>
				  mode = 0;
 80085a6:	2300      	movs	r3, #0
 80085a8:	607b      	str	r3, [r7, #4]
			  }
			  printf("Mode : %d\n", mode);
 80085aa:	6879      	ldr	r1, [r7, #4]
 80085ac:	4827      	ldr	r0, [pc, #156]	; (800864c <test_select+0x104>)
 80085ae:	f008 f9ed 	bl	801098c <iprintf>
			  //buzzer(pitagola2[mode-1][0], pitagola2[mode-1][1]);
			  //buzzer(pitagola[2][0], pitagola[2][1]);
		  }
		  if(dist_r <= -20){
 80085b2:	4b25      	ldr	r3, [pc, #148]	; (8008648 <test_select+0x100>)
 80085b4:	edd3 7a00 	vldr	s15, [r3]
 80085b8:	eebb 7a04 	vmov.f32	s14, #180	; 0xc1a00000 -20.0
 80085bc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80085c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80085c4:	d80f      	bhi.n	80085e6 <test_select+0x9e>
			  mode--;
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	3b01      	subs	r3, #1
 80085ca:	607b      	str	r3, [r7, #4]
			  dist_r = 0;
 80085cc:	4b1e      	ldr	r3, [pc, #120]	; (8008648 <test_select+0x100>)
 80085ce:	f04f 0200 	mov.w	r2, #0
 80085d2:	601a      	str	r2, [r3, #0]
			  if(mode < 0){
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	da01      	bge.n	80085de <test_select+0x96>
				  mode = 7;
 80085da:	2307      	movs	r3, #7
 80085dc:	607b      	str	r3, [r7, #4]
			  }
			  printf("Mode : %d\n", mode);
 80085de:	6879      	ldr	r1, [r7, #4]
 80085e0:	481a      	ldr	r0, [pc, #104]	; (800864c <test_select+0x104>)
 80085e2:	f008 f9d3 	bl	801098c <iprintf>
			  //buzzer(pitagola2[mode-1][0], pitagola2[mode-1][1]);
			  //buzzer(pitagola[2][0], pitagola[2][1]);
		  }
		  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET){
 80085e6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80085ea:	4819      	ldr	r0, [pc, #100]	; (8008650 <test_select+0x108>)
 80085ec:	f7f9 fe72 	bl	80022d4 <HAL_GPIO_ReadPin>
 80085f0:	4603      	mov	r3, r0
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d1b1      	bne.n	800855a <test_select+0x12>
			  HAL_Delay(50);
 80085f6:	2032      	movs	r0, #50	; 0x32
 80085f8:	f7f8 fd10 	bl	800101c <HAL_Delay>
			  while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET);
 80085fc:	bf00      	nop
 80085fe:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8008602:	4813      	ldr	r0, [pc, #76]	; (8008650 <test_select+0x108>)
 8008604:	f7f9 fe66 	bl	80022d4 <HAL_GPIO_ReadPin>
 8008608:	4603      	mov	r3, r0
 800860a:	2b00      	cmp	r3, #0
 800860c:	d0f7      	beq.n	80085fe <test_select+0xb6>
			  switch(mode){
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	3b01      	subs	r3, #1
 8008612:	2b03      	cmp	r3, #3
 8008614:	d8a1      	bhi.n	800855a <test_select+0x12>
 8008616:	a201      	add	r2, pc, #4	; (adr r2, 800861c <test_select+0xd4>)
 8008618:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800861c:	0800862d 	.word	0x0800862d
 8008620:	08008633 	.word	0x08008633
 8008624:	08008639 	.word	0x08008639
 8008628:	0800863f 	.word	0x0800863f
				case 1:
					init_test();
 800862c:	f000 f812 	bl	8008654 <init_test>
					break;
 8008630:	e007      	b.n	8008642 <test_select+0xfa>

				case 2:
					slalom_test();
 8008632:	f000 f919 	bl	8008868 <slalom_test>
					break;
 8008636:	e004      	b.n	8008642 <test_select+0xfa>

				case 3:
					sample_course_run();
 8008638:	f001 fa70 	bl	8009b1c <sample_course_run>
					break;
 800863c:	e001      	b.n	8008642 <test_select+0xfa>
				case 4:
					v_test();
 800863e:	f000 fadb 	bl	8008bf8 <v_test>
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 8008642:	e78a      	b.n	800855a <test_select+0x12>
 8008644:	08011bd4 	.word	0x08011bd4
 8008648:	20000aec 	.word	0x20000aec
 800864c:	08011bc8 	.word	0x08011bc8
 8008650:	40020000 	.word	0x40020000

08008654 <init_test>:
//init_test
// 初期基幹関数走行テスト
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void init_test(void){
 8008654:	b580      	push	{r7, lr}
 8008656:	b086      	sub	sp, #24
 8008658:	af00      	add	r7, sp, #0

	int mode = 0;
 800865a:	2300      	movs	r3, #0
 800865c:	617b      	str	r3, [r7, #20]
	printf("Test Init Run, Mode : %d\n", mode);
 800865e:	6979      	ldr	r1, [r7, #20]
 8008660:	4872      	ldr	r0, [pc, #456]	; (800882c <init_test+0x1d8>)
 8008662:	f008 f993 	bl	801098c <iprintf>

	while(1){
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 8008666:	697b      	ldr	r3, [r7, #20]
 8008668:	b2db      	uxtb	r3, r3
 800866a:	f003 0301 	and.w	r3, r3, #1
 800866e:	b2d8      	uxtb	r0, r3
 8008670:	697b      	ldr	r3, [r7, #20]
 8008672:	b2db      	uxtb	r3, r3
 8008674:	f003 0302 	and.w	r3, r3, #2
 8008678:	b2d9      	uxtb	r1, r3
 800867a:	697b      	ldr	r3, [r7, #20]
 800867c:	b2db      	uxtb	r3, r3
 800867e:	f003 0304 	and.w	r3, r3, #4
 8008682:	b2db      	uxtb	r3, r3
 8008684:	461a      	mov	r2, r3
 8008686:	f007 fbb3 	bl	800fdf0 <led_write>
		  if(dist_r >= 20){
 800868a:	4b69      	ldr	r3, [pc, #420]	; (8008830 <init_test+0x1dc>)
 800868c:	edd3 7a00 	vldr	s15, [r3]
 8008690:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8008694:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008698:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800869c:	db0f      	blt.n	80086be <init_test+0x6a>
			  mode++;
 800869e:	697b      	ldr	r3, [r7, #20]
 80086a0:	3301      	adds	r3, #1
 80086a2:	617b      	str	r3, [r7, #20]
			  dist_r = 0;
 80086a4:	4b62      	ldr	r3, [pc, #392]	; (8008830 <init_test+0x1dc>)
 80086a6:	f04f 0200 	mov.w	r2, #0
 80086aa:	601a      	str	r2, [r3, #0]
			  if(mode > 7){
 80086ac:	697b      	ldr	r3, [r7, #20]
 80086ae:	2b07      	cmp	r3, #7
 80086b0:	dd01      	ble.n	80086b6 <init_test+0x62>
				  mode = 0;
 80086b2:	2300      	movs	r3, #0
 80086b4:	617b      	str	r3, [r7, #20]
			  }
			  printf("Mode : %d\n", mode);
 80086b6:	6979      	ldr	r1, [r7, #20]
 80086b8:	485e      	ldr	r0, [pc, #376]	; (8008834 <init_test+0x1e0>)
 80086ba:	f008 f967 	bl	801098c <iprintf>
			  //buzzer(pitagola2[mode-1][0], pitagola2[mode-1][1]);
			  //buzzer(pitagola[2][0], pitagola[2][1]);
		  }
		  if(dist_r <= -20){
 80086be:	4b5c      	ldr	r3, [pc, #368]	; (8008830 <init_test+0x1dc>)
 80086c0:	edd3 7a00 	vldr	s15, [r3]
 80086c4:	eebb 7a04 	vmov.f32	s14, #180	; 0xc1a00000 -20.0
 80086c8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80086cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80086d0:	d80f      	bhi.n	80086f2 <init_test+0x9e>
			  mode--;
 80086d2:	697b      	ldr	r3, [r7, #20]
 80086d4:	3b01      	subs	r3, #1
 80086d6:	617b      	str	r3, [r7, #20]
			  dist_r = 0;
 80086d8:	4b55      	ldr	r3, [pc, #340]	; (8008830 <init_test+0x1dc>)
 80086da:	f04f 0200 	mov.w	r2, #0
 80086de:	601a      	str	r2, [r3, #0]
			  if(mode < 0){
 80086e0:	697b      	ldr	r3, [r7, #20]
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	da01      	bge.n	80086ea <init_test+0x96>
				  mode = 7;
 80086e6:	2307      	movs	r3, #7
 80086e8:	617b      	str	r3, [r7, #20]
			  }
			  printf("Mode : %d\n", mode);
 80086ea:	6979      	ldr	r1, [r7, #20]
 80086ec:	4851      	ldr	r0, [pc, #324]	; (8008834 <init_test+0x1e0>)
 80086ee:	f008 f94d 	bl	801098c <iprintf>
			  //buzzer(pitagola2[mode-1][0], pitagola2[mode-1][1]);
			  //buzzer(pitagola[2][0], pitagola[2][1]);
		  }
		  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET){
 80086f2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80086f6:	4850      	ldr	r0, [pc, #320]	; (8008838 <init_test+0x1e4>)
 80086f8:	f7f9 fdec 	bl	80022d4 <HAL_GPIO_ReadPin>
 80086fc:	4603      	mov	r3, r0
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d1b1      	bne.n	8008666 <init_test+0x12>
			  HAL_Delay(50);
 8008702:	2032      	movs	r0, #50	; 0x32
 8008704:	f7f8 fc8a 	bl	800101c <HAL_Delay>
			  while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET);
 8008708:	bf00      	nop
 800870a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800870e:	484a      	ldr	r0, [pc, #296]	; (8008838 <init_test+0x1e4>)
 8008710:	f7f9 fde0 	bl	80022d4 <HAL_GPIO_ReadPin>
 8008714:	4603      	mov	r3, r0
 8008716:	2b00      	cmp	r3, #0
 8008718:	d0f7      	beq.n	800870a <init_test+0xb6>
			  drive_ready();
 800871a:	f7fc fab1 	bl	8004c80 <drive_ready>
			  get_base();
 800871e:	f007 fb0f 	bl	800fd40 <get_base>

			  switch(mode){
 8008722:	697b      	ldr	r3, [r7, #20]
 8008724:	2b07      	cmp	r3, #7
 8008726:	d89e      	bhi.n	8008666 <init_test+0x12>
 8008728:	a201      	add	r2, pc, #4	; (adr r2, 8008730 <init_test+0xdc>)
 800872a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800872e:	bf00      	nop
 8008730:	08008751 	.word	0x08008751
 8008734:	08008757 	.word	0x08008757
 8008738:	08008777 	.word	0x08008777
 800873c:	08008795 	.word	0x08008795
 8008740:	080087b3 	.word	0x080087b3
 8008744:	080087d1 	.word	0x080087d1
 8008748:	080087fb 	.word	0x080087fb
 800874c:	08008815 	.word	0x08008815
				case 0:
					get_base();
 8008750:	f007 faf6 	bl	800fd40 <get_base>
					break;
 8008754:	e069      	b.n	800882a <init_test+0x1d6>
				case 1:
					//----4区画等速走行----
					printf("4 Section, Forward, Constant Speed.\n");
 8008756:	4839      	ldr	r0, [pc, #228]	; (800883c <init_test+0x1e8>)
 8008758:	f008 f98c 	bl	8010a74 <puts>
					for(int i = 0; i < 1; i++){
 800875c:	2300      	movs	r3, #0
 800875e:	613b      	str	r3, [r7, #16]
 8008760:	e005      	b.n	800876e <init_test+0x11a>
						driveC(SEC_HALF*2);	//一区画のパルス分デフォルトインターバルで走行
 8008762:	20b6      	movs	r0, #182	; 0xb6
 8008764:	f7fc fdee 	bl	8005344 <driveC>
					for(int i = 0; i < 1; i++){
 8008768:	693b      	ldr	r3, [r7, #16]
 800876a:	3301      	adds	r3, #1
 800876c:	613b      	str	r3, [r7, #16]
 800876e:	693b      	ldr	r3, [r7, #16]
 8008770:	2b00      	cmp	r3, #0
 8008772:	ddf6      	ble.n	8008762 <init_test+0x10e>
					}
					break;
 8008774:	e059      	b.n	800882a <init_test+0x1d6>
				case 2:
					//----right90度回転----
					printf("Rotate R90.\n");
 8008776:	4832      	ldr	r0, [pc, #200]	; (8008840 <init_test+0x1ec>)
 8008778:	f008 f97c 	bl	8010a74 <puts>
					for(int i = 0; i < 32; i++){
 800877c:	2300      	movs	r3, #0
 800877e:	60fb      	str	r3, [r7, #12]
 8008780:	e004      	b.n	800878c <init_test+0x138>
						rotate_R90();				//16回右90度回転、つまり4周回転
 8008782:	f7fd fbed 	bl	8005f60 <rotate_R90>
					for(int i = 0; i < 32; i++){
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	3301      	adds	r3, #1
 800878a:	60fb      	str	r3, [r7, #12]
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	2b1f      	cmp	r3, #31
 8008790:	ddf7      	ble.n	8008782 <init_test+0x12e>
					}
					break;
 8008792:	e04a      	b.n	800882a <init_test+0x1d6>
				case 3:
					//----left90度回転----
					printf("Rotate L90.\n");
 8008794:	482b      	ldr	r0, [pc, #172]	; (8008844 <init_test+0x1f0>)
 8008796:	f008 f96d 	bl	8010a74 <puts>
					for(int i = 0; i < 32; i++){
 800879a:	2300      	movs	r3, #0
 800879c:	60bb      	str	r3, [r7, #8]
 800879e:	e004      	b.n	80087aa <init_test+0x156>
						rotate_L90();				//16回左90度回転、つまり4周回転
 80087a0:	f7fd fcba 	bl	8006118 <rotate_L90>
					for(int i = 0; i < 32; i++){
 80087a4:	68bb      	ldr	r3, [r7, #8]
 80087a6:	3301      	adds	r3, #1
 80087a8:	60bb      	str	r3, [r7, #8]
 80087aa:	68bb      	ldr	r3, [r7, #8]
 80087ac:	2b1f      	cmp	r3, #31
 80087ae:	ddf7      	ble.n	80087a0 <init_test+0x14c>
					}
					break;
 80087b0:	e03b      	b.n	800882a <init_test+0x1d6>
				case 4:
					//----180度回転----
					printf("Rotate 180.\n");
 80087b2:	4825      	ldr	r0, [pc, #148]	; (8008848 <init_test+0x1f4>)
 80087b4:	f008 f95e 	bl	8010a74 <puts>
					for(int i = 0; i < 16; i++){
 80087b8:	2300      	movs	r3, #0
 80087ba:	607b      	str	r3, [r7, #4]
 80087bc:	e004      	b.n	80087c8 <init_test+0x174>
						rotate_180();				//8回右180度回転、つまり4周回転
 80087be:	f7fd fd87 	bl	80062d0 <rotate_180>
					for(int i = 0; i < 16; i++){
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	3301      	adds	r3, #1
 80087c6:	607b      	str	r3, [r7, #4]
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	2b0f      	cmp	r3, #15
 80087cc:	ddf7      	ble.n	80087be <init_test+0x16a>
					}
					break;
 80087ce:	e02c      	b.n	800882a <init_test+0x1d6>
				case 5:
					//----4区画連続走行----
					printf("4 Section, Forward, Continuous.\n");
 80087d0:	481e      	ldr	r0, [pc, #120]	; (800884c <init_test+0x1f8>)
 80087d2:	f008 f94f 	bl	8010a74 <puts>
					get_base();
 80087d6:	f007 fab3 	bl	800fd40 <get_base>
					half_sectionA();				//半区画のパルス分加速しながら走行
 80087da:	f7fd f957 	bl	8005a8c <half_sectionA>
					for(int i = 0; i < 6-1; i++){
 80087de:	2300      	movs	r3, #0
 80087e0:	603b      	str	r3, [r7, #0]
 80087e2:	e004      	b.n	80087ee <init_test+0x19a>
						one_sectionU();			//一区画のパルス分等速走行
 80087e4:	f7fd fba2 	bl	8005f2c <one_sectionU>
					for(int i = 0; i < 6-1; i++){
 80087e8:	683b      	ldr	r3, [r7, #0]
 80087ea:	3301      	adds	r3, #1
 80087ec:	603b      	str	r3, [r7, #0]
 80087ee:	683b      	ldr	r3, [r7, #0]
 80087f0:	2b04      	cmp	r3, #4
 80087f2:	ddf7      	ble.n	80087e4 <init_test+0x190>
					}
					half_sectionD();				//半区画のパルス分減速しながら走行。走行後は停止する
 80087f4:	f7fd f994 	bl	8005b20 <half_sectionD>
					break;
 80087f8:	e017      	b.n	800882a <init_test+0x1d6>
				case 6:
					//----a宴会芸モード----
					target_degree_z = degree_z;
 80087fa:	4b15      	ldr	r3, [pc, #84]	; (8008850 <init_test+0x1fc>)
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	4a15      	ldr	r2, [pc, #84]	; (8008854 <init_test+0x200>)
 8008800:	6013      	str	r3, [r2, #0]
					accel_l = 5000;
 8008802:	4b15      	ldr	r3, [pc, #84]	; (8008858 <init_test+0x204>)
 8008804:	4a15      	ldr	r2, [pc, #84]	; (800885c <init_test+0x208>)
 8008806:	601a      	str	r2, [r3, #0]

					MF2.FLAG.ENKAI = 1;
 8008808:	4a15      	ldr	r2, [pc, #84]	; (8008860 <init_test+0x20c>)
 800880a:	8813      	ldrh	r3, [r2, #0]
 800880c:	f043 0320 	orr.w	r3, r3, #32
 8008810:	8013      	strh	r3, [r2, #0]

					while(1);
 8008812:	e7fe      	b.n	8008812 <init_test+0x1be>
					break;
				case 7:
					//----a停止時前壁補正モード----
					MF.FLAG.FWALL = 1;
 8008814:	4a13      	ldr	r2, [pc, #76]	; (8008864 <init_test+0x210>)
 8008816:	8813      	ldrh	r3, [r2, #0]
 8008818:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800881c:	8013      	strh	r3, [r2, #0]
					MF.FLAG.DRV = 1;
 800881e:	4a11      	ldr	r2, [pc, #68]	; (8008864 <init_test+0x210>)
 8008820:	8813      	ldrh	r3, [r2, #0]
 8008822:	f043 0302 	orr.w	r3, r3, #2
 8008826:	8013      	strh	r3, [r2, #0]
					while(1);
 8008828:	e7fe      	b.n	8008828 <init_test+0x1d4>
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 800882a:	e71c      	b.n	8008666 <init_test+0x12>
 800882c:	08011bec 	.word	0x08011bec
 8008830:	20000aec 	.word	0x20000aec
 8008834:	08011bc8 	.word	0x08011bc8
 8008838:	40020000 	.word	0x40020000
 800883c:	08011c08 	.word	0x08011c08
 8008840:	08011c2c 	.word	0x08011c2c
 8008844:	08011c38 	.word	0x08011c38
 8008848:	08011c44 	.word	0x08011c44
 800884c:	08011c50 	.word	0x08011c50
 8008850:	20000b5c 	.word	0x20000b5c
 8008854:	20000bf8 	.word	0x20000bf8
 8008858:	20000d58 	.word	0x20000d58
 800885c:	459c4000 	.word	0x459c4000
 8008860:	20000f64 	.word	0x20000f64
 8008864:	20000f68 	.word	0x20000f68

08008868 <slalom_test>:
//slalom_test
// スラローム走行テスト
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void slalom_test(void){
 8008868:	b580      	push	{r7, lr}
 800886a:	b08e      	sub	sp, #56	; 0x38
 800886c:	af00      	add	r7, sp, #0

	int mode = 0;
 800886e:	2300      	movs	r3, #0
 8008870:	637b      	str	r3, [r7, #52]	; 0x34
	printf("Test Slalom Run, Mode : %d\n", mode);
 8008872:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008874:	48b8      	ldr	r0, [pc, #736]	; (8008b58 <slalom_test+0x2f0>)
 8008876:	f008 f889 	bl	801098c <iprintf>

	run_select();
 800887a:	f7fc fb41 	bl	8004f00 <run_select>

	while(1){
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 800887e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008880:	b2db      	uxtb	r3, r3
 8008882:	f003 0301 	and.w	r3, r3, #1
 8008886:	b2d8      	uxtb	r0, r3
 8008888:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800888a:	b2db      	uxtb	r3, r3
 800888c:	f003 0302 	and.w	r3, r3, #2
 8008890:	b2d9      	uxtb	r1, r3
 8008892:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008894:	b2db      	uxtb	r3, r3
 8008896:	f003 0304 	and.w	r3, r3, #4
 800889a:	b2db      	uxtb	r3, r3
 800889c:	461a      	mov	r2, r3
 800889e:	f007 faa7 	bl	800fdf0 <led_write>
		  if(dist_r >= 20){
 80088a2:	4bae      	ldr	r3, [pc, #696]	; (8008b5c <slalom_test+0x2f4>)
 80088a4:	edd3 7a00 	vldr	s15, [r3]
 80088a8:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 80088ac:	eef4 7ac7 	vcmpe.f32	s15, s14
 80088b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80088b4:	db20      	blt.n	80088f8 <slalom_test+0x90>
			  mode++;
 80088b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088b8:	3301      	adds	r3, #1
 80088ba:	637b      	str	r3, [r7, #52]	; 0x34
			  dist_r = 0;
 80088bc:	4ba7      	ldr	r3, [pc, #668]	; (8008b5c <slalom_test+0x2f4>)
 80088be:	f04f 0200 	mov.w	r2, #0
 80088c2:	601a      	str	r2, [r3, #0]
			  if(mode < 8){
 80088c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088c6:	2b07      	cmp	r3, #7
 80088c8:	dc03      	bgt.n	80088d2 <slalom_test+0x6a>
				  full_led_write(WHITE);
 80088ca:	2007      	movs	r0, #7
 80088cc:	f007 faca 	bl	800fe64 <full_led_write>
 80088d0:	e009      	b.n	80088e6 <slalom_test+0x7e>
			  }else if(mode < 16){
 80088d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088d4:	2b0f      	cmp	r3, #15
 80088d6:	dc03      	bgt.n	80088e0 <slalom_test+0x78>
				  full_led_write(BLUEGREEN);
 80088d8:	2004      	movs	r0, #4
 80088da:	f007 fac3 	bl	800fe64 <full_led_write>
 80088de:	e002      	b.n	80088e6 <slalom_test+0x7e>
			  }else{
				  full_led_write(PURPLE);
 80088e0:	2005      	movs	r0, #5
 80088e2:	f007 fabf 	bl	800fe64 <full_led_write>
			  }
			  if(mode > 23){
 80088e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088e8:	2b17      	cmp	r3, #23
 80088ea:	dd01      	ble.n	80088f0 <slalom_test+0x88>
				  mode = 0;
 80088ec:	2300      	movs	r3, #0
 80088ee:	637b      	str	r3, [r7, #52]	; 0x34
			  }
			  printf("Mode : %d\n", mode);
 80088f0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80088f2:	489b      	ldr	r0, [pc, #620]	; (8008b60 <slalom_test+0x2f8>)
 80088f4:	f008 f84a 	bl	801098c <iprintf>
		  }
		  if(dist_r <= -20){
 80088f8:	4b98      	ldr	r3, [pc, #608]	; (8008b5c <slalom_test+0x2f4>)
 80088fa:	edd3 7a00 	vldr	s15, [r3]
 80088fe:	eebb 7a04 	vmov.f32	s14, #180	; 0xc1a00000 -20.0
 8008902:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008906:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800890a:	d820      	bhi.n	800894e <slalom_test+0xe6>
			  mode--;
 800890c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800890e:	3b01      	subs	r3, #1
 8008910:	637b      	str	r3, [r7, #52]	; 0x34
			  dist_r = 0;
 8008912:	4b92      	ldr	r3, [pc, #584]	; (8008b5c <slalom_test+0x2f4>)
 8008914:	f04f 0200 	mov.w	r2, #0
 8008918:	601a      	str	r2, [r3, #0]
			  if(mode < 8){
 800891a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800891c:	2b07      	cmp	r3, #7
 800891e:	dc03      	bgt.n	8008928 <slalom_test+0xc0>
				  full_led_write(WHITE);
 8008920:	2007      	movs	r0, #7
 8008922:	f007 fa9f 	bl	800fe64 <full_led_write>
 8008926:	e009      	b.n	800893c <slalom_test+0xd4>
			  }else if(mode < 16){
 8008928:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800892a:	2b0f      	cmp	r3, #15
 800892c:	dc03      	bgt.n	8008936 <slalom_test+0xce>
				  full_led_write(BLUEGREEN);
 800892e:	2004      	movs	r0, #4
 8008930:	f007 fa98 	bl	800fe64 <full_led_write>
 8008934:	e002      	b.n	800893c <slalom_test+0xd4>
			  }else{
				  full_led_write(PURPLE);
 8008936:	2005      	movs	r0, #5
 8008938:	f007 fa94 	bl	800fe64 <full_led_write>
			  }
			  if(mode < 0){
 800893c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800893e:	2b00      	cmp	r3, #0
 8008940:	da01      	bge.n	8008946 <slalom_test+0xde>
				  mode = 23;
 8008942:	2317      	movs	r3, #23
 8008944:	637b      	str	r3, [r7, #52]	; 0x34
			  }
			  printf("Mode : %d\n", mode);
 8008946:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008948:	4885      	ldr	r0, [pc, #532]	; (8008b60 <slalom_test+0x2f8>)
 800894a:	f008 f81f 	bl	801098c <iprintf>
		  }
		  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET){
 800894e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8008952:	4884      	ldr	r0, [pc, #528]	; (8008b64 <slalom_test+0x2fc>)
 8008954:	f7f9 fcbe 	bl	80022d4 <HAL_GPIO_ReadPin>
 8008958:	4603      	mov	r3, r0
 800895a:	2b00      	cmp	r3, #0
 800895c:	d18f      	bne.n	800887e <slalom_test+0x16>
			  HAL_Delay(50);
 800895e:	2032      	movs	r0, #50	; 0x32
 8008960:	f7f8 fb5c 	bl	800101c <HAL_Delay>
			  while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET);
 8008964:	bf00      	nop
 8008966:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800896a:	487e      	ldr	r0, [pc, #504]	; (8008b64 <slalom_test+0x2fc>)
 800896c:	f7f9 fcb2 	bl	80022d4 <HAL_GPIO_ReadPin>
 8008970:	4603      	mov	r3, r0
 8008972:	2b00      	cmp	r3, #0
 8008974:	d0f7      	beq.n	8008966 <slalom_test+0xfe>
			  drive_ready();
 8008976:	f7fc f983 	bl	8004c80 <drive_ready>
			  get_base();
 800897a:	f007 f9e1 	bl	800fd40 <get_base>

			  switch(mode){
 800897e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008980:	2b10      	cmp	r3, #16
 8008982:	f200 8130 	bhi.w	8008be6 <slalom_test+0x37e>
 8008986:	a201      	add	r2, pc, #4	; (adr r2, 800898c <slalom_test+0x124>)
 8008988:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800898c:	080089d1 	.word	0x080089d1
 8008990:	080089d7 	.word	0x080089d7
 8008994:	080089fd 	.word	0x080089fd
 8008998:	08008a23 	.word	0x08008a23
 800899c:	08008a49 	.word	0x08008a49
 80089a0:	08008a6f 	.word	0x08008a6f
 80089a4:	08008a95 	.word	0x08008a95
 80089a8:	08008be7 	.word	0x08008be7
 80089ac:	08008be7 	.word	0x08008be7
 80089b0:	08008abb 	.word	0x08008abb
 80089b4:	08008ae5 	.word	0x08008ae5
 80089b8:	08008b23 	.word	0x08008b23
 80089bc:	08008b49 	.word	0x08008b49
 80089c0:	08008b9b 	.word	0x08008b9b
 80089c4:	08008bc1 	.word	0x08008bc1
 80089c8:	08008be7 	.word	0x08008be7
 80089cc:	08008be7 	.word	0x08008be7
				case 0:
					get_base();
 80089d0:	f007 f9b6 	bl	800fd40 <get_base>
					break;
 80089d4:	e107      	b.n	8008be6 <slalom_test+0x37e>
				case 1:
					//----slalom右折----
					printf("slalom turn right .\n");
 80089d6:	4864      	ldr	r0, [pc, #400]	; (8008b68 <slalom_test+0x300>)
 80089d8:	f008 f84c 	bl	8010a74 <puts>
					half_sectionA();
 80089dc:	f7fd f856 	bl	8005a8c <half_sectionA>
					for(int i = 0; i < 1; i++){
 80089e0:	2300      	movs	r3, #0
 80089e2:	633b      	str	r3, [r7, #48]	; 0x30
 80089e4:	e004      	b.n	80089f0 <slalom_test+0x188>
						slalom_R90();	//一区画のパルス分デフォルトインターバルで走行
 80089e6:	f7fd fd4b 	bl	8006480 <slalom_R90>
					for(int i = 0; i < 1; i++){
 80089ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089ec:	3301      	adds	r3, #1
 80089ee:	633b      	str	r3, [r7, #48]	; 0x30
 80089f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	ddf7      	ble.n	80089e6 <slalom_test+0x17e>
					}
					half_sectionD();
 80089f6:	f7fd f893 	bl	8005b20 <half_sectionD>
					break;
 80089fa:	e0f4      	b.n	8008be6 <slalom_test+0x37e>
				case 2:
					//----slalom左折----
					printf("slalom turn left .\n");
 80089fc:	485b      	ldr	r0, [pc, #364]	; (8008b6c <slalom_test+0x304>)
 80089fe:	f008 f839 	bl	8010a74 <puts>
					half_sectionA();
 8008a02:	f7fd f843 	bl	8005a8c <half_sectionA>
					for(int i = 0; i < 1; i++){
 8008a06:	2300      	movs	r3, #0
 8008a08:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008a0a:	e004      	b.n	8008a16 <slalom_test+0x1ae>
						slalom_L90();				//16回右90度回転、つまり4周回転
 8008a0c:	f7fd fe1c 	bl	8006648 <slalom_L90>
					for(int i = 0; i < 1; i++){
 8008a10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a12:	3301      	adds	r3, #1
 8008a14:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008a16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	ddf7      	ble.n	8008a0c <slalom_test+0x1a4>
					}
					half_sectionD();
 8008a1c:	f7fd f880 	bl	8005b20 <half_sectionD>
					break;
 8008a20:	e0e1      	b.n	8008be6 <slalom_test+0x37e>
				case 3:
					//----Lslalom右折----
					printf("Lslalom turn right .\n");
 8008a22:	4853      	ldr	r0, [pc, #332]	; (8008b70 <slalom_test+0x308>)
 8008a24:	f008 f826 	bl	8010a74 <puts>
					half_sectionA();
 8008a28:	f7fd f830 	bl	8005a8c <half_sectionA>
					for(int i = 0; i < 1; i++){
 8008a2c:	2300      	movs	r3, #0
 8008a2e:	62bb      	str	r3, [r7, #40]	; 0x28
 8008a30:	e004      	b.n	8008a3c <slalom_test+0x1d4>
						Lslalom_R90();				//16回右90度回転、つまり4周回転
 8008a32:	f7fd fee3 	bl	80067fc <Lslalom_R90>
					for(int i = 0; i < 1; i++){
 8008a36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a38:	3301      	adds	r3, #1
 8008a3a:	62bb      	str	r3, [r7, #40]	; 0x28
 8008a3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	ddf7      	ble.n	8008a32 <slalom_test+0x1ca>
					}
					half_sectionD();
 8008a42:	f7fd f86d 	bl	8005b20 <half_sectionD>
					break;
 8008a46:	e0ce      	b.n	8008be6 <slalom_test+0x37e>
				case 4:
					//----Lslalom左折----
					printf("Lslalom turn left .\n");
 8008a48:	484a      	ldr	r0, [pc, #296]	; (8008b74 <slalom_test+0x30c>)
 8008a4a:	f008 f813 	bl	8010a74 <puts>
					half_sectionA();
 8008a4e:	f7fd f81d 	bl	8005a8c <half_sectionA>
					for(int i = 0; i < 1; i++){
 8008a52:	2300      	movs	r3, #0
 8008a54:	627b      	str	r3, [r7, #36]	; 0x24
 8008a56:	e004      	b.n	8008a62 <slalom_test+0x1fa>
						Lslalom_L90();				//16回左90度回転、つまり4周回転
 8008a58:	f7fd ffa8 	bl	80069ac <Lslalom_L90>
					for(int i = 0; i < 1; i++){
 8008a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a5e:	3301      	adds	r3, #1
 8008a60:	627b      	str	r3, [r7, #36]	; 0x24
 8008a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	ddf7      	ble.n	8008a58 <slalom_test+0x1f0>
					}
					half_sectionD();
 8008a68:	f7fd f85a 	bl	8005b20 <half_sectionD>
					break;
 8008a6c:	e0bb      	b.n	8008be6 <slalom_test+0x37e>
				case 5:
					//----Lslalom右180----
					printf("Lslalom turn right & right .\n");
 8008a6e:	4842      	ldr	r0, [pc, #264]	; (8008b78 <slalom_test+0x310>)
 8008a70:	f008 f800 	bl	8010a74 <puts>
					half_sectionA();
 8008a74:	f7fd f80a 	bl	8005a8c <half_sectionA>
					for(int i = 0; i < 1; i++){
 8008a78:	2300      	movs	r3, #0
 8008a7a:	623b      	str	r3, [r7, #32]
 8008a7c:	e004      	b.n	8008a88 <slalom_test+0x220>
						Lslalom_R180();				//16回右180度回転、つまり4周回転
 8008a7e:	f7fe f861 	bl	8006b44 <Lslalom_R180>
					for(int i = 0; i < 1; i++){
 8008a82:	6a3b      	ldr	r3, [r7, #32]
 8008a84:	3301      	adds	r3, #1
 8008a86:	623b      	str	r3, [r7, #32]
 8008a88:	6a3b      	ldr	r3, [r7, #32]
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	ddf7      	ble.n	8008a7e <slalom_test+0x216>
					}
					half_sectionD();
 8008a8e:	f7fd f847 	bl	8005b20 <half_sectionD>
					break;
 8008a92:	e0a8      	b.n	8008be6 <slalom_test+0x37e>
				case 6:
					//----Lslalom左180----
					printf("Lslalom turn left & left .\n");
 8008a94:	4839      	ldr	r0, [pc, #228]	; (8008b7c <slalom_test+0x314>)
 8008a96:	f007 ffed 	bl	8010a74 <puts>
					half_sectionA();
 8008a9a:	f7fc fff7 	bl	8005a8c <half_sectionA>
					for(int i = 0; i < 1; i++){
 8008a9e:	2300      	movs	r3, #0
 8008aa0:	61fb      	str	r3, [r7, #28]
 8008aa2:	e004      	b.n	8008aae <slalom_test+0x246>
						Lslalom_L180();				//16回左180度回転、つまり4周回転
 8008aa4:	f7fe f934 	bl	8006d10 <Lslalom_L180>
					for(int i = 0; i < 1; i++){
 8008aa8:	69fb      	ldr	r3, [r7, #28]
 8008aaa:	3301      	adds	r3, #1
 8008aac:	61fb      	str	r3, [r7, #28]
 8008aae:	69fb      	ldr	r3, [r7, #28]
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	ddf7      	ble.n	8008aa4 <slalom_test+0x23c>
					}
					half_sectionD();
 8008ab4:	f7fd f834 	bl	8005b20 <half_sectionD>
					break;
 8008ab8:	e095      	b.n	8008be6 <slalom_test+0x37e>
					break;
				case 8:
					break;
				case 9:
					//----slalom右折----
					printf("slalom turn right .\n");
 8008aba:	482b      	ldr	r0, [pc, #172]	; (8008b68 <slalom_test+0x300>)
 8008abc:	f007 ffda 	bl	8010a74 <puts>
					half_sectionA();
 8008ac0:	f7fc ffe4 	bl	8005a8c <half_sectionA>
					for(int i = 0; i < 8; i++){
 8008ac4:	2300      	movs	r3, #0
 8008ac6:	61bb      	str	r3, [r7, #24]
 8008ac8:	e006      	b.n	8008ad8 <slalom_test+0x270>
						slalom_R90();	//一区画のパルス分デフォルトインターバルで走行
 8008aca:	f7fd fcd9 	bl	8006480 <slalom_R90>
						one_sectionU();
 8008ace:	f7fd fa2d 	bl	8005f2c <one_sectionU>
					for(int i = 0; i < 8; i++){
 8008ad2:	69bb      	ldr	r3, [r7, #24]
 8008ad4:	3301      	adds	r3, #1
 8008ad6:	61bb      	str	r3, [r7, #24]
 8008ad8:	69bb      	ldr	r3, [r7, #24]
 8008ada:	2b07      	cmp	r3, #7
 8008adc:	ddf5      	ble.n	8008aca <slalom_test+0x262>
					}
					half_sectionD();
 8008ade:	f7fd f81f 	bl	8005b20 <half_sectionD>
					break;
 8008ae2:	e080      	b.n	8008be6 <slalom_test+0x37e>
				case 10:
					//----slalom左折----
					printf("slalom turn left .\n");
 8008ae4:	4821      	ldr	r0, [pc, #132]	; (8008b6c <slalom_test+0x304>)
 8008ae6:	f007 ffc5 	bl	8010a74 <puts>
					half_sectionA();
 8008aea:	f7fc ffcf 	bl	8005a8c <half_sectionA>
					MF2.FLAG.LOG = 1;
 8008aee:	4a24      	ldr	r2, [pc, #144]	; (8008b80 <slalom_test+0x318>)
 8008af0:	8813      	ldrh	r3, [r2, #0]
 8008af2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008af6:	8013      	strh	r3, [r2, #0]
					for(int i = 0; i < 8; i++){
 8008af8:	2300      	movs	r3, #0
 8008afa:	617b      	str	r3, [r7, #20]
 8008afc:	e006      	b.n	8008b0c <slalom_test+0x2a4>
						slalom_L90();				//16回右90度回転、つまり4周回転
 8008afe:	f7fd fda3 	bl	8006648 <slalom_L90>
						one_sectionU();
 8008b02:	f7fd fa13 	bl	8005f2c <one_sectionU>
					for(int i = 0; i < 8; i++){
 8008b06:	697b      	ldr	r3, [r7, #20]
 8008b08:	3301      	adds	r3, #1
 8008b0a:	617b      	str	r3, [r7, #20]
 8008b0c:	697b      	ldr	r3, [r7, #20]
 8008b0e:	2b07      	cmp	r3, #7
 8008b10:	ddf5      	ble.n	8008afe <slalom_test+0x296>
					}
					MF2.FLAG.LOG = 0;
 8008b12:	4a1b      	ldr	r2, [pc, #108]	; (8008b80 <slalom_test+0x318>)
 8008b14:	8813      	ldrh	r3, [r2, #0]
 8008b16:	f36f 1386 	bfc	r3, #6, #1
 8008b1a:	8013      	strh	r3, [r2, #0]
					half_sectionD();
 8008b1c:	f7fd f800 	bl	8005b20 <half_sectionD>
					printf("r start\n");
					for(int j = 0; j < log_allay; j++){
						printf("%d\n", get_speed_r[j]);
					}
					printf("r end\n");
*/					break;
 8008b20:	e061      	b.n	8008be6 <slalom_test+0x37e>
				case 11:
					//----Lslalom右折----
					printf("Lslalom turn right .\n");
 8008b22:	4813      	ldr	r0, [pc, #76]	; (8008b70 <slalom_test+0x308>)
 8008b24:	f007 ffa6 	bl	8010a74 <puts>
					half_sectionA();
 8008b28:	f7fc ffb0 	bl	8005a8c <half_sectionA>
					for(int i = 0; i < 8; i++){
 8008b2c:	2300      	movs	r3, #0
 8008b2e:	613b      	str	r3, [r7, #16]
 8008b30:	e004      	b.n	8008b3c <slalom_test+0x2d4>
						Lslalom_R90();				//16回右90度回転、つまり4周回転
 8008b32:	f7fd fe63 	bl	80067fc <Lslalom_R90>
					for(int i = 0; i < 8; i++){
 8008b36:	693b      	ldr	r3, [r7, #16]
 8008b38:	3301      	adds	r3, #1
 8008b3a:	613b      	str	r3, [r7, #16]
 8008b3c:	693b      	ldr	r3, [r7, #16]
 8008b3e:	2b07      	cmp	r3, #7
 8008b40:	ddf7      	ble.n	8008b32 <slalom_test+0x2ca>
					}
					half_sectionD();
 8008b42:	f7fc ffed 	bl	8005b20 <half_sectionD>
					break;
 8008b46:	e04e      	b.n	8008be6 <slalom_test+0x37e>
				case 12:
					//----Lslalom左折----
					printf("Lslalom turn left .\n");
 8008b48:	480a      	ldr	r0, [pc, #40]	; (8008b74 <slalom_test+0x30c>)
 8008b4a:	f007 ff93 	bl	8010a74 <puts>
					half_sectionA();
 8008b4e:	f7fc ff9d 	bl	8005a8c <half_sectionA>
					for(int i = 0; i < 8; i++){
 8008b52:	2300      	movs	r3, #0
 8008b54:	60fb      	str	r3, [r7, #12]
 8008b56:	e01a      	b.n	8008b8e <slalom_test+0x326>
 8008b58:	08011c70 	.word	0x08011c70
 8008b5c:	20000aec 	.word	0x20000aec
 8008b60:	08011bc8 	.word	0x08011bc8
 8008b64:	40020000 	.word	0x40020000
 8008b68:	08011c8c 	.word	0x08011c8c
 8008b6c:	08011ca0 	.word	0x08011ca0
 8008b70:	08011cb4 	.word	0x08011cb4
 8008b74:	08011ccc 	.word	0x08011ccc
 8008b78:	08011ce0 	.word	0x08011ce0
 8008b7c:	08011d00 	.word	0x08011d00
 8008b80:	20000f64 	.word	0x20000f64
						Lslalom_L90();				//16回左90度回転、つまり4周回転
 8008b84:	f7fd ff12 	bl	80069ac <Lslalom_L90>
					for(int i = 0; i < 8; i++){
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	3301      	adds	r3, #1
 8008b8c:	60fb      	str	r3, [r7, #12]
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	2b07      	cmp	r3, #7
 8008b92:	ddf7      	ble.n	8008b84 <slalom_test+0x31c>
					}
					half_sectionD();
 8008b94:	f7fc ffc4 	bl	8005b20 <half_sectionD>
					break;
 8008b98:	e025      	b.n	8008be6 <slalom_test+0x37e>
				case 13:
					//----Lslalom右180----
					printf("Lslalom turn right & right .\n");
 8008b9a:	4815      	ldr	r0, [pc, #84]	; (8008bf0 <slalom_test+0x388>)
 8008b9c:	f007 ff6a 	bl	8010a74 <puts>
					half_sectionA();
 8008ba0:	f7fc ff74 	bl	8005a8c <half_sectionA>
					for(int i = 0; i < 8; i++){
 8008ba4:	2300      	movs	r3, #0
 8008ba6:	60bb      	str	r3, [r7, #8]
 8008ba8:	e004      	b.n	8008bb4 <slalom_test+0x34c>
						Lslalom_R180();				//16回右180度回転、つまり4周回転
 8008baa:	f7fd ffcb 	bl	8006b44 <Lslalom_R180>
					for(int i = 0; i < 8; i++){
 8008bae:	68bb      	ldr	r3, [r7, #8]
 8008bb0:	3301      	adds	r3, #1
 8008bb2:	60bb      	str	r3, [r7, #8]
 8008bb4:	68bb      	ldr	r3, [r7, #8]
 8008bb6:	2b07      	cmp	r3, #7
 8008bb8:	ddf7      	ble.n	8008baa <slalom_test+0x342>
					}
					half_sectionD();
 8008bba:	f7fc ffb1 	bl	8005b20 <half_sectionD>
					break;
 8008bbe:	e012      	b.n	8008be6 <slalom_test+0x37e>
				case 14:
					//----Lslalom左180----
					printf("Lslalom turn left & left .\n");
 8008bc0:	480c      	ldr	r0, [pc, #48]	; (8008bf4 <slalom_test+0x38c>)
 8008bc2:	f007 ff57 	bl	8010a74 <puts>
					half_sectionA();
 8008bc6:	f7fc ff61 	bl	8005a8c <half_sectionA>
					for(int i = 0; i < 8; i++){
 8008bca:	2300      	movs	r3, #0
 8008bcc:	607b      	str	r3, [r7, #4]
 8008bce:	e004      	b.n	8008bda <slalom_test+0x372>
						Lslalom_L180();				//16回左180度回転、つまり4周回転
 8008bd0:	f7fe f89e 	bl	8006d10 <Lslalom_L180>
					for(int i = 0; i < 8; i++){
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	3301      	adds	r3, #1
 8008bd8:	607b      	str	r3, [r7, #4]
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	2b07      	cmp	r3, #7
 8008bde:	ddf7      	ble.n	8008bd0 <slalom_test+0x368>
					}
					half_sectionD();
 8008be0:	f7fc ff9e 	bl	8005b20 <half_sectionD>
					break;
 8008be4:	bf00      	nop
					break;
				case 16:
					break;

			  }
			  full_led_write(RED);
 8008be6:	2001      	movs	r0, #1
 8008be8:	f007 f93c 	bl	800fe64 <full_led_write>
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 8008bec:	e647      	b.n	800887e <slalom_test+0x16>
 8008bee:	bf00      	nop
 8008bf0:	08011ce0 	.word	0x08011ce0
 8008bf4:	08011d00 	.word	0x08011d00

08008bf8 <v_test>:
//v_test
// 斜め走行テスト
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void v_test(void){
 8008bf8:	b580      	push	{r7, lr}
 8008bfa:	b092      	sub	sp, #72	; 0x48
 8008bfc:	af00      	add	r7, sp, #0

	int mode = 0;
 8008bfe:	2300      	movs	r3, #0
 8008c00:	647b      	str	r3, [r7, #68]	; 0x44
	printf("Test V Run, Mode : %d\n", mode);
 8008c02:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008c04:	48b6      	ldr	r0, [pc, #728]	; (8008ee0 <v_test+0x2e8>)
 8008c06:	f007 fec1 	bl	801098c <iprintf>

	run_select();
 8008c0a:	f7fc f979 	bl	8004f00 <run_select>

	while(1){
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 8008c0e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008c10:	b2db      	uxtb	r3, r3
 8008c12:	f003 0301 	and.w	r3, r3, #1
 8008c16:	b2d8      	uxtb	r0, r3
 8008c18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008c1a:	b2db      	uxtb	r3, r3
 8008c1c:	f003 0302 	and.w	r3, r3, #2
 8008c20:	b2d9      	uxtb	r1, r3
 8008c22:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008c24:	b2db      	uxtb	r3, r3
 8008c26:	f003 0304 	and.w	r3, r3, #4
 8008c2a:	b2db      	uxtb	r3, r3
 8008c2c:	461a      	mov	r2, r3
 8008c2e:	f007 f8df 	bl	800fdf0 <led_write>
		  if(dist_r >= 20){
 8008c32:	4bac      	ldr	r3, [pc, #688]	; (8008ee4 <v_test+0x2ec>)
 8008c34:	edd3 7a00 	vldr	s15, [r3]
 8008c38:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8008c3c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008c40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008c44:	db20      	blt.n	8008c88 <v_test+0x90>
			  mode++;
 8008c46:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008c48:	3301      	adds	r3, #1
 8008c4a:	647b      	str	r3, [r7, #68]	; 0x44
			  dist_r = 0;
 8008c4c:	4ba5      	ldr	r3, [pc, #660]	; (8008ee4 <v_test+0x2ec>)
 8008c4e:	f04f 0200 	mov.w	r2, #0
 8008c52:	601a      	str	r2, [r3, #0]
			  if(mode > 23){
 8008c54:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008c56:	2b17      	cmp	r3, #23
 8008c58:	dd01      	ble.n	8008c5e <v_test+0x66>
				  mode = 0;
 8008c5a:	2300      	movs	r3, #0
 8008c5c:	647b      	str	r3, [r7, #68]	; 0x44
			  }
			  if(mode < 8){
 8008c5e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008c60:	2b07      	cmp	r3, #7
 8008c62:	dc03      	bgt.n	8008c6c <v_test+0x74>
				  full_led_write(WHITE);
 8008c64:	2007      	movs	r0, #7
 8008c66:	f007 f8fd 	bl	800fe64 <full_led_write>
 8008c6a:	e009      	b.n	8008c80 <v_test+0x88>
			  }else if(mode < 16){
 8008c6c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008c6e:	2b0f      	cmp	r3, #15
 8008c70:	dc03      	bgt.n	8008c7a <v_test+0x82>
				  full_led_write(BLUEGREEN);
 8008c72:	2004      	movs	r0, #4
 8008c74:	f007 f8f6 	bl	800fe64 <full_led_write>
 8008c78:	e002      	b.n	8008c80 <v_test+0x88>
			  }else{
				  full_led_write(PURPLE);
 8008c7a:	2005      	movs	r0, #5
 8008c7c:	f007 f8f2 	bl	800fe64 <full_led_write>
			  }
			  printf("Mode : %d\n", mode);
 8008c80:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008c82:	4899      	ldr	r0, [pc, #612]	; (8008ee8 <v_test+0x2f0>)
 8008c84:	f007 fe82 	bl	801098c <iprintf>
		  }
		  if(dist_r <= -20){
 8008c88:	4b96      	ldr	r3, [pc, #600]	; (8008ee4 <v_test+0x2ec>)
 8008c8a:	edd3 7a00 	vldr	s15, [r3]
 8008c8e:	eebb 7a04 	vmov.f32	s14, #180	; 0xc1a00000 -20.0
 8008c92:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008c96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008c9a:	d820      	bhi.n	8008cde <v_test+0xe6>
			  mode--;
 8008c9c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008c9e:	3b01      	subs	r3, #1
 8008ca0:	647b      	str	r3, [r7, #68]	; 0x44
			  dist_r = 0;
 8008ca2:	4b90      	ldr	r3, [pc, #576]	; (8008ee4 <v_test+0x2ec>)
 8008ca4:	f04f 0200 	mov.w	r2, #0
 8008ca8:	601a      	str	r2, [r3, #0]
			  if(mode < 0){
 8008caa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	da01      	bge.n	8008cb4 <v_test+0xbc>
				  mode = 23;
 8008cb0:	2317      	movs	r3, #23
 8008cb2:	647b      	str	r3, [r7, #68]	; 0x44
			  }
			  if(mode < 8){
 8008cb4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008cb6:	2b07      	cmp	r3, #7
 8008cb8:	dc03      	bgt.n	8008cc2 <v_test+0xca>
				  full_led_write(WHITE);
 8008cba:	2007      	movs	r0, #7
 8008cbc:	f007 f8d2 	bl	800fe64 <full_led_write>
 8008cc0:	e009      	b.n	8008cd6 <v_test+0xde>
			  }else if(mode < 16){
 8008cc2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008cc4:	2b0f      	cmp	r3, #15
 8008cc6:	dc03      	bgt.n	8008cd0 <v_test+0xd8>
				  full_led_write(BLUEGREEN);
 8008cc8:	2004      	movs	r0, #4
 8008cca:	f007 f8cb 	bl	800fe64 <full_led_write>
 8008cce:	e002      	b.n	8008cd6 <v_test+0xde>
			  }else{
				  full_led_write(PURPLE);
 8008cd0:	2005      	movs	r0, #5
 8008cd2:	f007 f8c7 	bl	800fe64 <full_led_write>
			  }
			  printf("Mode : %d\n", mode);
 8008cd6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008cd8:	4883      	ldr	r0, [pc, #524]	; (8008ee8 <v_test+0x2f0>)
 8008cda:	f007 fe57 	bl	801098c <iprintf>
		  }
		  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET){
 8008cde:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8008ce2:	4882      	ldr	r0, [pc, #520]	; (8008eec <v_test+0x2f4>)
 8008ce4:	f7f9 faf6 	bl	80022d4 <HAL_GPIO_ReadPin>
 8008ce8:	4603      	mov	r3, r0
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d18f      	bne.n	8008c0e <v_test+0x16>
			  HAL_Delay(50);
 8008cee:	2032      	movs	r0, #50	; 0x32
 8008cf0:	f7f8 f994 	bl	800101c <HAL_Delay>
			  while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET);
 8008cf4:	bf00      	nop
 8008cf6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8008cfa:	487c      	ldr	r0, [pc, #496]	; (8008eec <v_test+0x2f4>)
 8008cfc:	f7f9 faea 	bl	80022d4 <HAL_GPIO_ReadPin>
 8008d00:	4603      	mov	r3, r0
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d0f7      	beq.n	8008cf6 <v_test+0xfe>
			  drive_ready();
 8008d06:	f7fb ffbb 	bl	8004c80 <drive_ready>

			  MF.FLAG.XDIR = 1;
 8008d0a:	4a79      	ldr	r2, [pc, #484]	; (8008ef0 <v_test+0x2f8>)
 8008d0c:	8813      	ldrh	r3, [r2, #0]
 8008d0e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008d12:	8013      	strh	r3, [r2, #0]
			  MF2.FLAG.V = 0;
 8008d14:	4a77      	ldr	r2, [pc, #476]	; (8008ef4 <v_test+0x2fc>)
 8008d16:	8813      	ldrh	r3, [r2, #0]
 8008d18:	f36f 03c3 	bfc	r3, #3, #1
 8008d1c:	8013      	strh	r3, [r2, #0]
			  get_base();
 8008d1e:	f007 f80f 	bl	800fd40 <get_base>

			  switch(mode){
 8008d22:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008d24:	2b14      	cmp	r3, #20
 8008d26:	f200 8185 	bhi.w	8009034 <v_test+0x43c>
 8008d2a:	a201      	add	r2, pc, #4	; (adr r2, 8008d30 <v_test+0x138>)
 8008d2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d30:	08008d85 	.word	0x08008d85
 8008d34:	08008d8b 	.word	0x08008d8b
 8008d38:	08008db1 	.word	0x08008db1
 8008d3c:	08008dd7 	.word	0x08008dd7
 8008d40:	08008e05 	.word	0x08008e05
 8008d44:	08008e33 	.word	0x08008e33
 8008d48:	08008e59 	.word	0x08008e59
 8008d4c:	08009035 	.word	0x08009035
 8008d50:	08009035 	.word	0x08009035
 8008d54:	08008e7f 	.word	0x08008e7f
 8008d58:	08008ea5 	.word	0x08008ea5
 8008d5c:	08008ecb 	.word	0x08008ecb
 8008d60:	08008f2b 	.word	0x08008f2b
 8008d64:	08008f59 	.word	0x08008f59
 8008d68:	08008f7f 	.word	0x08008f7f
 8008d6c:	08009035 	.word	0x08009035
 8008d70:	08009035 	.word	0x08009035
 8008d74:	08008fa5 	.word	0x08008fa5
 8008d78:	08008fc7 	.word	0x08008fc7
 8008d7c:	08008fe9 	.word	0x08008fe9
 8008d80:	0800900f 	.word	0x0800900f
				case 0:
					get_base();
 8008d84:	f006 ffdc 	bl	800fd40 <get_base>
					break;
 8008d88:	e154      	b.n	8009034 <v_test+0x43c>
				case 1:
					//----V右45----
					printf("V 45 right .\n");
 8008d8a:	485b      	ldr	r0, [pc, #364]	; (8008ef8 <v_test+0x300>)
 8008d8c:	f007 fe72 	bl	8010a74 <puts>
					half_sectionA();
 8008d90:	f7fc fe7c 	bl	8005a8c <half_sectionA>
					for(int i = 0; i < 1; i++){
 8008d94:	2300      	movs	r3, #0
 8008d96:	643b      	str	r3, [r7, #64]	; 0x40
 8008d98:	e004      	b.n	8008da4 <v_test+0x1ac>
						v_R45();
 8008d9a:	f7fe f895 	bl	8006ec8 <v_R45>
					for(int i = 0; i < 1; i++){
 8008d9e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008da0:	3301      	adds	r3, #1
 8008da2:	643b      	str	r3, [r7, #64]	; 0x40
 8008da4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	ddf7      	ble.n	8008d9a <v_test+0x1a2>
					}
					half_sectionD();
 8008daa:	f7fc feb9 	bl	8005b20 <half_sectionD>
					break;
 8008dae:	e141      	b.n	8009034 <v_test+0x43c>
				case 2:
					//----V左45----
					printf("V 45 left .\n");
 8008db0:	4852      	ldr	r0, [pc, #328]	; (8008efc <v_test+0x304>)
 8008db2:	f007 fe5f 	bl	8010a74 <puts>
					half_sectionA();
 8008db6:	f7fc fe69 	bl	8005a8c <half_sectionA>
					for(int i = 0; i < 1; i++){
 8008dba:	2300      	movs	r3, #0
 8008dbc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008dbe:	e004      	b.n	8008dca <v_test+0x1d2>
						v_L45();
 8008dc0:	f7fe fa06 	bl	80071d0 <v_L45>
					for(int i = 0; i < 1; i++){
 8008dc4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008dc6:	3301      	adds	r3, #1
 8008dc8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008dca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	ddf7      	ble.n	8008dc0 <v_test+0x1c8>
					}
					half_sectionD();
 8008dd0:	f7fc fea6 	bl	8005b20 <half_sectionD>
					break;
 8008dd4:	e12e      	b.n	8009034 <v_test+0x43c>
				case 3:
					//----V右90----
					printf("V 90 right .\n");
 8008dd6:	484a      	ldr	r0, [pc, #296]	; (8008f00 <v_test+0x308>)
 8008dd8:	f007 fe4c 	bl	8010a74 <puts>
					half_sectionA();
 8008ddc:	f7fc fe56 	bl	8005a8c <half_sectionA>
					v_R45();
 8008de0:	f7fe f872 	bl	8006ec8 <v_R45>
					for(int i = 0; i < 1; i++){
 8008de4:	2300      	movs	r3, #0
 8008de6:	63bb      	str	r3, [r7, #56]	; 0x38
 8008de8:	e004      	b.n	8008df4 <v_test+0x1fc>
						v_R90();
 8008dea:	f7fe fd1b 	bl	8007824 <v_R90>
					for(int i = 0; i < 1; i++){
 8008dee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008df0:	3301      	adds	r3, #1
 8008df2:	63bb      	str	r3, [r7, #56]	; 0x38
 8008df4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	ddf7      	ble.n	8008dea <v_test+0x1f2>
					}
					v_R45();
 8008dfa:	f7fe f865 	bl	8006ec8 <v_R45>
					half_sectionD();
 8008dfe:	f7fc fe8f 	bl	8005b20 <half_sectionD>
					break;
 8008e02:	e117      	b.n	8009034 <v_test+0x43c>
				case 4:
					//----V左90----
					printf("V 90 left .\n");
 8008e04:	483f      	ldr	r0, [pc, #252]	; (8008f04 <v_test+0x30c>)
 8008e06:	f007 fe35 	bl	8010a74 <puts>
					half_sectionA();
 8008e0a:	f7fc fe3f 	bl	8005a8c <half_sectionA>
					v_L45();
 8008e0e:	f7fe f9df 	bl	80071d0 <v_L45>
					for(int i = 0; i < 1; i++){
 8008e12:	2300      	movs	r3, #0
 8008e14:	637b      	str	r3, [r7, #52]	; 0x34
 8008e16:	e004      	b.n	8008e22 <v_test+0x22a>
						v_L90();
 8008e18:	f7fe fdac 	bl	8007974 <v_L90>
					for(int i = 0; i < 1; i++){
 8008e1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e1e:	3301      	adds	r3, #1
 8008e20:	637b      	str	r3, [r7, #52]	; 0x34
 8008e22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	ddf7      	ble.n	8008e18 <v_test+0x220>
					}
					v_L45();
 8008e28:	f7fe f9d2 	bl	80071d0 <v_L45>
					half_sectionD();
 8008e2c:	f7fc fe78 	bl	8005b20 <half_sectionD>
					break;
 8008e30:	e100      	b.n	8009034 <v_test+0x43c>
				case 5:
					//----V右135----
					printf("V 135 right .\n");
 8008e32:	4835      	ldr	r0, [pc, #212]	; (8008f08 <v_test+0x310>)
 8008e34:	f007 fe1e 	bl	8010a74 <puts>
					half_sectionA();
 8008e38:	f7fc fe28 	bl	8005a8c <half_sectionA>
//					v_R45();
					for(int i = 0; i < 1; i++){
 8008e3c:	2300      	movs	r3, #0
 8008e3e:	633b      	str	r3, [r7, #48]	; 0x30
 8008e40:	e004      	b.n	8008e4c <v_test+0x254>
						v_R135();
 8008e42:	f7fe fe39 	bl	8007ab8 <v_R135>
					for(int i = 0; i < 1; i++){
 8008e46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e48:	3301      	adds	r3, #1
 8008e4a:	633b      	str	r3, [r7, #48]	; 0x30
 8008e4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	ddf7      	ble.n	8008e42 <v_test+0x24a>
					}
//					v_R45();
					half_sectionD();
 8008e52:	f7fc fe65 	bl	8005b20 <half_sectionD>
					break;
 8008e56:	e0ed      	b.n	8009034 <v_test+0x43c>
				case 6:
					//----V左135----
					printf("V 135 left .\n");
 8008e58:	482c      	ldr	r0, [pc, #176]	; (8008f0c <v_test+0x314>)
 8008e5a:	f007 fe0b 	bl	8010a74 <puts>
					half_sectionA();
 8008e5e:	f7fc fe15 	bl	8005a8c <half_sectionA>
//					v_L45();
					for(int i = 0; i < 1; i++){
 8008e62:	2300      	movs	r3, #0
 8008e64:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008e66:	e004      	b.n	8008e72 <v_test+0x27a>
						v_L135();
 8008e68:	f7fe ffae 	bl	8007dc8 <v_L135>
					for(int i = 0; i < 1; i++){
 8008e6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e6e:	3301      	adds	r3, #1
 8008e70:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008e72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	ddf7      	ble.n	8008e68 <v_test+0x270>
					}
//					v_L45();
					half_sectionD();
 8008e78:	f7fc fe52 	bl	8005b20 <half_sectionD>
					break;
 8008e7c:	e0da      	b.n	8009034 <v_test+0x43c>
					break;
				case 8:
					break;
				case 9:
					//----V右45----
					printf("V 45 right .\n");
 8008e7e:	481e      	ldr	r0, [pc, #120]	; (8008ef8 <v_test+0x300>)
 8008e80:	f007 fdf8 	bl	8010a74 <puts>
					half_sectionA();
 8008e84:	f7fc fe02 	bl	8005a8c <half_sectionA>
					for(int i = 0; i < 8; i++){
 8008e88:	2300      	movs	r3, #0
 8008e8a:	62bb      	str	r3, [r7, #40]	; 0x28
 8008e8c:	e004      	b.n	8008e98 <v_test+0x2a0>
						v_R45();
 8008e8e:	f7fe f81b 	bl	8006ec8 <v_R45>
					for(int i = 0; i < 8; i++){
 8008e92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e94:	3301      	adds	r3, #1
 8008e96:	62bb      	str	r3, [r7, #40]	; 0x28
 8008e98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e9a:	2b07      	cmp	r3, #7
 8008e9c:	ddf7      	ble.n	8008e8e <v_test+0x296>
					}
					half_sectionD();
 8008e9e:	f7fc fe3f 	bl	8005b20 <half_sectionD>
					break;
 8008ea2:	e0c7      	b.n	8009034 <v_test+0x43c>
				case 10:
					//----V左45----
					printf("V 45 left .\n");
 8008ea4:	4815      	ldr	r0, [pc, #84]	; (8008efc <v_test+0x304>)
 8008ea6:	f007 fde5 	bl	8010a74 <puts>
					half_sectionA();
 8008eaa:	f7fc fdef 	bl	8005a8c <half_sectionA>
					for(int i = 0; i < 8; i++){
 8008eae:	2300      	movs	r3, #0
 8008eb0:	627b      	str	r3, [r7, #36]	; 0x24
 8008eb2:	e004      	b.n	8008ebe <v_test+0x2c6>
						v_L45();
 8008eb4:	f7fe f98c 	bl	80071d0 <v_L45>
					for(int i = 0; i < 8; i++){
 8008eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008eba:	3301      	adds	r3, #1
 8008ebc:	627b      	str	r3, [r7, #36]	; 0x24
 8008ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ec0:	2b07      	cmp	r3, #7
 8008ec2:	ddf7      	ble.n	8008eb4 <v_test+0x2bc>
					}
					half_sectionD();
 8008ec4:	f7fc fe2c 	bl	8005b20 <half_sectionD>
					break;
 8008ec8:	e0b4      	b.n	8009034 <v_test+0x43c>
				case 11:
					//----V右90----
					printf("V 90 right .\n");
 8008eca:	480d      	ldr	r0, [pc, #52]	; (8008f00 <v_test+0x308>)
 8008ecc:	f007 fdd2 	bl	8010a74 <puts>
					half_sectionA();
 8008ed0:	f7fc fddc 	bl	8005a8c <half_sectionA>
					v_R45();
 8008ed4:	f7fd fff8 	bl	8006ec8 <v_R45>
					for(int i = 0; i < 8; i++){
 8008ed8:	2300      	movs	r3, #0
 8008eda:	623b      	str	r3, [r7, #32]
 8008edc:	e01d      	b.n	8008f1a <v_test+0x322>
 8008ede:	bf00      	nop
 8008ee0:	08011d1c 	.word	0x08011d1c
 8008ee4:	20000aec 	.word	0x20000aec
 8008ee8:	08011bc8 	.word	0x08011bc8
 8008eec:	40020000 	.word	0x40020000
 8008ef0:	20000f68 	.word	0x20000f68
 8008ef4:	20000f64 	.word	0x20000f64
 8008ef8:	08011d34 	.word	0x08011d34
 8008efc:	08011d44 	.word	0x08011d44
 8008f00:	08011d50 	.word	0x08011d50
 8008f04:	08011d60 	.word	0x08011d60
 8008f08:	08011d6c 	.word	0x08011d6c
 8008f0c:	08011d7c 	.word	0x08011d7c
						v_R90();
 8008f10:	f7fe fc88 	bl	8007824 <v_R90>
					for(int i = 0; i < 8; i++){
 8008f14:	6a3b      	ldr	r3, [r7, #32]
 8008f16:	3301      	adds	r3, #1
 8008f18:	623b      	str	r3, [r7, #32]
 8008f1a:	6a3b      	ldr	r3, [r7, #32]
 8008f1c:	2b07      	cmp	r3, #7
 8008f1e:	ddf7      	ble.n	8008f10 <v_test+0x318>
					}
					v_R45();
 8008f20:	f7fd ffd2 	bl	8006ec8 <v_R45>
					half_sectionD();
 8008f24:	f7fc fdfc 	bl	8005b20 <half_sectionD>
					break;
 8008f28:	e084      	b.n	8009034 <v_test+0x43c>
				case 12:
					//----V左90----
					printf("V 90 left .\n");
 8008f2a:	4844      	ldr	r0, [pc, #272]	; (800903c <v_test+0x444>)
 8008f2c:	f007 fda2 	bl	8010a74 <puts>
					half_sectionA();
 8008f30:	f7fc fdac 	bl	8005a8c <half_sectionA>
					v_L45();
 8008f34:	f7fe f94c 	bl	80071d0 <v_L45>
					for(int i = 0; i < 8; i++){
 8008f38:	2300      	movs	r3, #0
 8008f3a:	61fb      	str	r3, [r7, #28]
 8008f3c:	e004      	b.n	8008f48 <v_test+0x350>
						v_L90();
 8008f3e:	f7fe fd19 	bl	8007974 <v_L90>
					for(int i = 0; i < 8; i++){
 8008f42:	69fb      	ldr	r3, [r7, #28]
 8008f44:	3301      	adds	r3, #1
 8008f46:	61fb      	str	r3, [r7, #28]
 8008f48:	69fb      	ldr	r3, [r7, #28]
 8008f4a:	2b07      	cmp	r3, #7
 8008f4c:	ddf7      	ble.n	8008f3e <v_test+0x346>
					}
					v_L45();
 8008f4e:	f7fe f93f 	bl	80071d0 <v_L45>
					half_sectionD();
 8008f52:	f7fc fde5 	bl	8005b20 <half_sectionD>
					break;
 8008f56:	e06d      	b.n	8009034 <v_test+0x43c>
				case 13:
					//----V右135----
					printf("V 135 right .\n");
 8008f58:	4839      	ldr	r0, [pc, #228]	; (8009040 <v_test+0x448>)
 8008f5a:	f007 fd8b 	bl	8010a74 <puts>
					half_sectionA();
 8008f5e:	f7fc fd95 	bl	8005a8c <half_sectionA>
//					v_R45();
					for(int i = 0; i < 4; i++){
 8008f62:	2300      	movs	r3, #0
 8008f64:	61bb      	str	r3, [r7, #24]
 8008f66:	e004      	b.n	8008f72 <v_test+0x37a>
						v_R135();
 8008f68:	f7fe fda6 	bl	8007ab8 <v_R135>
					for(int i = 0; i < 4; i++){
 8008f6c:	69bb      	ldr	r3, [r7, #24]
 8008f6e:	3301      	adds	r3, #1
 8008f70:	61bb      	str	r3, [r7, #24]
 8008f72:	69bb      	ldr	r3, [r7, #24]
 8008f74:	2b03      	cmp	r3, #3
 8008f76:	ddf7      	ble.n	8008f68 <v_test+0x370>
					}
//					v_R45();
					half_sectionD();
 8008f78:	f7fc fdd2 	bl	8005b20 <half_sectionD>
					break;
 8008f7c:	e05a      	b.n	8009034 <v_test+0x43c>
				case 14:
					//----V左135----
					printf("V 135 left .\n");
 8008f7e:	4831      	ldr	r0, [pc, #196]	; (8009044 <v_test+0x44c>)
 8008f80:	f007 fd78 	bl	8010a74 <puts>
					half_sectionA();
 8008f84:	f7fc fd82 	bl	8005a8c <half_sectionA>
//					v_L45();
					for(int i = 0; i < 4; i++){
 8008f88:	2300      	movs	r3, #0
 8008f8a:	617b      	str	r3, [r7, #20]
 8008f8c:	e004      	b.n	8008f98 <v_test+0x3a0>
						v_L135();
 8008f8e:	f7fe ff1b 	bl	8007dc8 <v_L135>
					for(int i = 0; i < 4; i++){
 8008f92:	697b      	ldr	r3, [r7, #20]
 8008f94:	3301      	adds	r3, #1
 8008f96:	617b      	str	r3, [r7, #20]
 8008f98:	697b      	ldr	r3, [r7, #20]
 8008f9a:	2b03      	cmp	r3, #3
 8008f9c:	ddf7      	ble.n	8008f8e <v_test+0x396>
					}
//					v_L45();
					half_sectionD();
 8008f9e:	f7fc fdbf 	bl	8005b20 <half_sectionD>
					break;
 8008fa2:	e047      	b.n	8009034 <v_test+0x43c>
					break;
				case 16:
					break;
				case 17:
					//----V右45D----
					printf("V 45 right .\n");
 8008fa4:	4828      	ldr	r0, [pc, #160]	; (8009048 <v_test+0x450>)
 8008fa6:	f007 fd65 	bl	8010a74 <puts>
					half_sectionA();
 8008faa:	f7fc fd6f 	bl	8005a8c <half_sectionA>
					for(int i = 0; i < 1; i++){
 8008fae:	2300      	movs	r3, #0
 8008fb0:	613b      	str	r3, [r7, #16]
 8008fb2:	e004      	b.n	8008fbe <v_test+0x3c6>
						v_R45D();
 8008fb4:	f7fe fa88 	bl	80074c8 <v_R45D>
					for(int i = 0; i < 1; i++){
 8008fb8:	693b      	ldr	r3, [r7, #16]
 8008fba:	3301      	adds	r3, #1
 8008fbc:	613b      	str	r3, [r7, #16]
 8008fbe:	693b      	ldr	r3, [r7, #16]
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	ddf7      	ble.n	8008fb4 <v_test+0x3bc>
					}
					break;
 8008fc4:	e036      	b.n	8009034 <v_test+0x43c>
				case 18:
					//----V左45D----
					printf("V 45 left .\n");
 8008fc6:	4821      	ldr	r0, [pc, #132]	; (800904c <v_test+0x454>)
 8008fc8:	f007 fd54 	bl	8010a74 <puts>
					half_sectionA();
 8008fcc:	f7fc fd5e 	bl	8005a8c <half_sectionA>
					for(int i = 0; i < 1; i++){
 8008fd0:	2300      	movs	r3, #0
 8008fd2:	60fb      	str	r3, [r7, #12]
 8008fd4:	e004      	b.n	8008fe0 <v_test+0x3e8>
						v_L45D();
 8008fd6:	f7fe fb51 	bl	800767c <v_L45D>
					for(int i = 0; i < 1; i++){
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	3301      	adds	r3, #1
 8008fde:	60fb      	str	r3, [r7, #12]
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	ddf7      	ble.n	8008fd6 <v_test+0x3de>
					}
					break;
 8008fe6:	e025      	b.n	8009034 <v_test+0x43c>
				case 19:
					//----V右135D----
					printf("V 135 right .\n");
 8008fe8:	4815      	ldr	r0, [pc, #84]	; (8009040 <v_test+0x448>)
 8008fea:	f007 fd43 	bl	8010a74 <puts>
					half_sectionA();
 8008fee:	f7fc fd4d 	bl	8005a8c <half_sectionA>
					v_R45();
 8008ff2:	f7fd ff69 	bl	8006ec8 <v_R45>
					for(int i = 0; i < 1; i++){
 8008ff6:	2300      	movs	r3, #0
 8008ff8:	60bb      	str	r3, [r7, #8]
 8008ffa:	e004      	b.n	8009006 <v_test+0x40e>
						v_R135D();
 8008ffc:	f7ff f860 	bl	80080c0 <v_R135D>
					for(int i = 0; i < 1; i++){
 8009000:	68bb      	ldr	r3, [r7, #8]
 8009002:	3301      	adds	r3, #1
 8009004:	60bb      	str	r3, [r7, #8]
 8009006:	68bb      	ldr	r3, [r7, #8]
 8009008:	2b00      	cmp	r3, #0
 800900a:	ddf7      	ble.n	8008ffc <v_test+0x404>
					}
					break;
 800900c:	e012      	b.n	8009034 <v_test+0x43c>
				case 20:
					//----V左135D----
					printf("V 135 left .\n");
 800900e:	480d      	ldr	r0, [pc, #52]	; (8009044 <v_test+0x44c>)
 8009010:	f007 fd30 	bl	8010a74 <puts>
					half_sectionA();
 8009014:	f7fc fd3a 	bl	8005a8c <half_sectionA>
					v_L45();
 8009018:	f7fe f8da 	bl	80071d0 <v_L45>
					for(int i = 0; i < 1; i++){
 800901c:	2300      	movs	r3, #0
 800901e:	607b      	str	r3, [r7, #4]
 8009020:	e004      	b.n	800902c <v_test+0x434>
						v_L135D();
 8009022:	f7ff f95b 	bl	80082dc <v_L135D>
					for(int i = 0; i < 1; i++){
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	3301      	adds	r3, #1
 800902a:	607b      	str	r3, [r7, #4]
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	2b00      	cmp	r3, #0
 8009030:	ddf7      	ble.n	8009022 <v_test+0x42a>
					}
					break;
 8009032:	bf00      	nop
			}
		full_led_write(RED);
 8009034:	2001      	movs	r0, #1
 8009036:	f006 ff15 	bl	800fe64 <full_led_write>
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 800903a:	e5e8      	b.n	8008c0e <v_test+0x16>
 800903c:	08011d60 	.word	0x08011d60
 8009040:	08011d6c 	.word	0x08011d6c
 8009044:	08011d7c 	.word	0x08011d7c
 8009048:	08011d34 	.word	0x08011d34
 800904c:	08011d44 	.word	0x08011d44

08009050 <pass_test>:
//pass_test
// pass圧縮走行テスト
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void pass_test(void){
 8009050:	b580      	push	{r7, lr}
 8009052:	b082      	sub	sp, #8
 8009054:	af00      	add	r7, sp, #0

	int mode = 0;
 8009056:	2300      	movs	r3, #0
 8009058:	607b      	str	r3, [r7, #4]
	printf("Test pass Run, Mode : %d\n", mode);
 800905a:	6879      	ldr	r1, [r7, #4]
 800905c:	48b4      	ldr	r0, [pc, #720]	; (8009330 <pass_test+0x2e0>)
 800905e:	f007 fc95 	bl	801098c <iprintf>

	while(1){
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	b2db      	uxtb	r3, r3
 8009066:	f003 0301 	and.w	r3, r3, #1
 800906a:	b2d8      	uxtb	r0, r3
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	b2db      	uxtb	r3, r3
 8009070:	f003 0302 	and.w	r3, r3, #2
 8009074:	b2d9      	uxtb	r1, r3
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	b2db      	uxtb	r3, r3
 800907a:	f003 0304 	and.w	r3, r3, #4
 800907e:	b2db      	uxtb	r3, r3
 8009080:	461a      	mov	r2, r3
 8009082:	f006 feb5 	bl	800fdf0 <led_write>
		  if(dist_r >= 20){
 8009086:	4bab      	ldr	r3, [pc, #684]	; (8009334 <pass_test+0x2e4>)
 8009088:	edd3 7a00 	vldr	s15, [r3]
 800908c:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8009090:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009094:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009098:	db0f      	blt.n	80090ba <pass_test+0x6a>
			  mode++;
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	3301      	adds	r3, #1
 800909e:	607b      	str	r3, [r7, #4]
			  dist_r = 0;
 80090a0:	4ba4      	ldr	r3, [pc, #656]	; (8009334 <pass_test+0x2e4>)
 80090a2:	f04f 0200 	mov.w	r2, #0
 80090a6:	601a      	str	r2, [r3, #0]
			  if(mode > 7){
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	2b07      	cmp	r3, #7
 80090ac:	dd01      	ble.n	80090b2 <pass_test+0x62>
				  mode = 0;
 80090ae:	2300      	movs	r3, #0
 80090b0:	607b      	str	r3, [r7, #4]
			  }
			  printf("Mode : %d\n", mode);
 80090b2:	6879      	ldr	r1, [r7, #4]
 80090b4:	48a0      	ldr	r0, [pc, #640]	; (8009338 <pass_test+0x2e8>)
 80090b6:	f007 fc69 	bl	801098c <iprintf>
			  //buzzer(pitagola2[mode-1][0], pitagola2[mode-1][1]);
			  //buzzer(pitagola[2][0], pitagola[2][1]);
		  }
		  if(dist_r <= -20){
 80090ba:	4b9e      	ldr	r3, [pc, #632]	; (8009334 <pass_test+0x2e4>)
 80090bc:	edd3 7a00 	vldr	s15, [r3]
 80090c0:	eebb 7a04 	vmov.f32	s14, #180	; 0xc1a00000 -20.0
 80090c4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80090c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80090cc:	d80f      	bhi.n	80090ee <pass_test+0x9e>
			  mode--;
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	3b01      	subs	r3, #1
 80090d2:	607b      	str	r3, [r7, #4]
			  dist_r = 0;
 80090d4:	4b97      	ldr	r3, [pc, #604]	; (8009334 <pass_test+0x2e4>)
 80090d6:	f04f 0200 	mov.w	r2, #0
 80090da:	601a      	str	r2, [r3, #0]
			  if(mode < 0){
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	2b00      	cmp	r3, #0
 80090e0:	da01      	bge.n	80090e6 <pass_test+0x96>
				  mode = 7;
 80090e2:	2307      	movs	r3, #7
 80090e4:	607b      	str	r3, [r7, #4]
			  }
			  printf("Mode : %d\n", mode);
 80090e6:	6879      	ldr	r1, [r7, #4]
 80090e8:	4893      	ldr	r0, [pc, #588]	; (8009338 <pass_test+0x2e8>)
 80090ea:	f007 fc4f 	bl	801098c <iprintf>
			  //buzzer(pitagola2[mode-1][0], pitagola2[mode-1][1]);
			  //buzzer(pitagola[2][0], pitagola[2][1]);
		  }
		  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET){
 80090ee:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80090f2:	4892      	ldr	r0, [pc, #584]	; (800933c <pass_test+0x2ec>)
 80090f4:	f7f9 f8ee 	bl	80022d4 <HAL_GPIO_ReadPin>
 80090f8:	4603      	mov	r3, r0
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d1b1      	bne.n	8009062 <pass_test+0x12>
			  HAL_Delay(50);
 80090fe:	2032      	movs	r0, #50	; 0x32
 8009100:	f7f7 ff8c 	bl	800101c <HAL_Delay>
			  while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET);
 8009104:	bf00      	nop
 8009106:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800910a:	488c      	ldr	r0, [pc, #560]	; (800933c <pass_test+0x2ec>)
 800910c:	f7f9 f8e2 	bl	80022d4 <HAL_GPIO_ReadPin>
 8009110:	4603      	mov	r3, r0
 8009112:	2b00      	cmp	r3, #0
 8009114:	d0f7      	beq.n	8009106 <pass_test+0xb6>
			  drive_ready();
 8009116:	f7fb fdb3 	bl	8004c80 <drive_ready>
			  MF2.FLAG.V = 0;
 800911a:	4a89      	ldr	r2, [pc, #548]	; (8009340 <pass_test+0x2f0>)
 800911c:	8813      	ldrh	r3, [r2, #0]
 800911e:	f36f 03c3 	bfc	r3, #3, #1
 8009122:	8013      	strh	r3, [r2, #0]

			  switch(mode){
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	2b07      	cmp	r3, #7
 8009128:	d89b      	bhi.n	8009062 <pass_test+0x12>
 800912a:	a201      	add	r2, pc, #4	; (adr r2, 8009130 <pass_test+0xe0>)
 800912c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009130:	08009151 	.word	0x08009151
 8009134:	080091c9 	.word	0x080091c9
 8009138:	08009241 	.word	0x08009241
 800913c:	080092b9 	.word	0x080092b9
 8009140:	08009375 	.word	0x08009375
 8009144:	08009063 	.word	0x08009063
 8009148:	08009063 	.word	0x08009063
 800914c:	08009063 	.word	0x08009063
				case 0:
					//----a一次探索スラローム走行----
					printf("First Run. (Slalom)\n");
 8009150:	487c      	ldr	r0, [pc, #496]	; (8009344 <pass_test+0x2f4>)
 8009152:	f007 fc8f 	bl	8010a74 <puts>

					MF.FLAG.SCND = 0;
 8009156:	4a7c      	ldr	r2, [pc, #496]	; (8009348 <pass_test+0x2f8>)
 8009158:	8813      	ldrh	r3, [r2, #0]
 800915a:	f36f 1345 	bfc	r3, #5, #1
 800915e:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 8009160:	4a79      	ldr	r2, [pc, #484]	; (8009348 <pass_test+0x2f8>)
 8009162:	8813      	ldrh	r3, [r2, #0]
 8009164:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009168:	8013      	strh	r3, [r2, #0]
					run_mode = MIDDLE;
 800916a:	4b78      	ldr	r3, [pc, #480]	; (800934c <pass_test+0x2fc>)
 800916c:	2202      	movs	r2, #2
 800916e:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 8009170:	4b77      	ldr	r3, [pc, #476]	; (8009350 <pass_test+0x300>)
 8009172:	2200      	movs	r2, #0
 8009174:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 8009176:	4b77      	ldr	r3, [pc, #476]	; (8009354 <pass_test+0x304>)
 8009178:	f241 3288 	movw	r2, #5000	; 0x1388
 800917c:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 800;
 800917e:	4b76      	ldr	r3, [pc, #472]	; (8009358 <pass_test+0x308>)
 8009180:	f44f 7248 	mov.w	r2, #800	; 0x320
 8009184:	801a      	strh	r2, [r3, #0]
					start_mode = 0;
 8009186:	4b72      	ldr	r3, [pc, #456]	; (8009350 <pass_test+0x300>)
 8009188:	2200      	movs	r2, #0
 800918a:	701a      	strb	r2, [r3, #0]
					goal_x = GOAL_X;
 800918c:	4b73      	ldr	r3, [pc, #460]	; (800935c <pass_test+0x30c>)
 800918e:	2209      	movs	r2, #9
 8009190:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 8009192:	4b73      	ldr	r3, [pc, #460]	; (8009360 <pass_test+0x310>)
 8009194:	2206      	movs	r2, #6
 8009196:	701a      	strb	r2, [r3, #0]

					get_base();
 8009198:	f006 fdd2 	bl	800fd40 <get_base>

					searchC();
 800919c:	f003 ffee 	bl	800d17c <searchC>
					HAL_Delay(2000);
 80091a0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80091a4:	f7f7 ff3a 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 80091a8:	4b6d      	ldr	r3, [pc, #436]	; (8009360 <pass_test+0x310>)
 80091aa:	2200      	movs	r2, #0
 80091ac:	701a      	strb	r2, [r3, #0]
 80091ae:	4b6c      	ldr	r3, [pc, #432]	; (8009360 <pass_test+0x310>)
 80091b0:	781a      	ldrb	r2, [r3, #0]
 80091b2:	4b6a      	ldr	r3, [pc, #424]	; (800935c <pass_test+0x30c>)
 80091b4:	701a      	strb	r2, [r3, #0]
					searchC();
 80091b6:	f003 ffe1 	bl	800d17c <searchC>

					goal_x = GOAL_X;
 80091ba:	4b68      	ldr	r3, [pc, #416]	; (800935c <pass_test+0x30c>)
 80091bc:	2209      	movs	r2, #9
 80091be:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 80091c0:	4b67      	ldr	r3, [pc, #412]	; (8009360 <pass_test+0x310>)
 80091c2:	2206      	movs	r2, #6
 80091c4:	701a      	strb	r2, [r3, #0]
					break;
 80091c6:	e111      	b.n	80093ec <pass_test+0x39c>
				case 1:
					//----a直線と大回り圧縮(adv_posを停止)+半区画ベース----
					printf("pass press 3.\n");
 80091c8:	4866      	ldr	r0, [pc, #408]	; (8009364 <pass_test+0x314>)
 80091ca:	f007 fc53 	bl	8010a74 <puts>
					MF.FLAG.SCND = 1;
 80091ce:	4a5e      	ldr	r2, [pc, #376]	; (8009348 <pass_test+0x2f8>)
 80091d0:	8813      	ldrh	r3, [r2, #0]
 80091d2:	f043 0320 	orr.w	r3, r3, #32
 80091d6:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 80091d8:	4a5b      	ldr	r2, [pc, #364]	; (8009348 <pass_test+0x2f8>)
 80091da:	8813      	ldrh	r3, [r2, #0]
 80091dc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80091e0:	8013      	strh	r3, [r2, #0]
					run_mode = LOW;
 80091e2:	4b5a      	ldr	r3, [pc, #360]	; (800934c <pass_test+0x2fc>)
 80091e4:	2201      	movs	r2, #1
 80091e6:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 80091e8:	4b59      	ldr	r3, [pc, #356]	; (8009350 <pass_test+0x300>)
 80091ea:	2200      	movs	r2, #0
 80091ec:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 80091ee:	4b59      	ldr	r3, [pc, #356]	; (8009354 <pass_test+0x304>)
 80091f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80091f4:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 800;
 80091f6:	4b58      	ldr	r3, [pc, #352]	; (8009358 <pass_test+0x308>)
 80091f8:	f44f 7248 	mov.w	r2, #800	; 0x320
 80091fc:	801a      	strh	r2, [r3, #0]

					pass_mode = 3;						//a半区画ベースでroute配列生成
 80091fe:	4b5a      	ldr	r3, [pc, #360]	; (8009368 <pass_test+0x318>)
 8009200:	2203      	movs	r2, #3
 8009202:	701a      	strb	r2, [r3, #0]

					goal_x = GOAL_X;
 8009204:	4b55      	ldr	r3, [pc, #340]	; (800935c <pass_test+0x30c>)
 8009206:	2209      	movs	r2, #9
 8009208:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800920a:	4b55      	ldr	r3, [pc, #340]	; (8009360 <pass_test+0x310>)
 800920c:	2206      	movs	r2, #6
 800920e:	701a      	strb	r2, [r3, #0]

					get_base();
 8009210:	f006 fd96 	bl	800fd40 <get_base>

					searchF3();
 8009214:	f004 fa9e 	bl	800d754 <searchF3>
					HAL_Delay(2000);
 8009218:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800921c:	f7f7 fefe 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 8009220:	4b4f      	ldr	r3, [pc, #316]	; (8009360 <pass_test+0x310>)
 8009222:	2200      	movs	r2, #0
 8009224:	701a      	strb	r2, [r3, #0]
 8009226:	4b4e      	ldr	r3, [pc, #312]	; (8009360 <pass_test+0x310>)
 8009228:	781a      	ldrb	r2, [r3, #0]
 800922a:	4b4c      	ldr	r3, [pc, #304]	; (800935c <pass_test+0x30c>)
 800922c:	701a      	strb	r2, [r3, #0]
					searchF3();
 800922e:	f004 fa91 	bl	800d754 <searchF3>

					goal_x = GOAL_X;
 8009232:	4b4a      	ldr	r3, [pc, #296]	; (800935c <pass_test+0x30c>)
 8009234:	2209      	movs	r2, #9
 8009236:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 8009238:	4b49      	ldr	r3, [pc, #292]	; (8009360 <pass_test+0x310>)
 800923a:	2206      	movs	r2, #6
 800923c:	701a      	strb	r2, [r3, #0]
					break;
 800923e:	e0d5      	b.n	80093ec <pass_test+0x39c>
				case 2:
					//----a直線と大回り圧縮(adv_posを停止)+半区画ベース High Speed----
					printf("pass press 3-2.\n");
 8009240:	484a      	ldr	r0, [pc, #296]	; (800936c <pass_test+0x31c>)
 8009242:	f007 fc17 	bl	8010a74 <puts>
					MF.FLAG.SCND = 1;
 8009246:	4a40      	ldr	r2, [pc, #256]	; (8009348 <pass_test+0x2f8>)
 8009248:	8813      	ldrh	r3, [r2, #0]
 800924a:	f043 0320 	orr.w	r3, r3, #32
 800924e:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 8009250:	4a3d      	ldr	r2, [pc, #244]	; (8009348 <pass_test+0x2f8>)
 8009252:	8813      	ldrh	r3, [r2, #0]
 8009254:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009258:	8013      	strh	r3, [r2, #0]
					run_mode = HIGH;
 800925a:	4b3c      	ldr	r3, [pc, #240]	; (800934c <pass_test+0x2fc>)
 800925c:	2203      	movs	r2, #3
 800925e:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 8009260:	4b3b      	ldr	r3, [pc, #236]	; (8009350 <pass_test+0x300>)
 8009262:	2200      	movs	r2, #0
 8009264:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 8009266:	4b3b      	ldr	r3, [pc, #236]	; (8009354 <pass_test+0x304>)
 8009268:	f241 3288 	movw	r2, #5000	; 0x1388
 800926c:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1200;
 800926e:	4b3a      	ldr	r3, [pc, #232]	; (8009358 <pass_test+0x308>)
 8009270:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8009274:	801a      	strh	r2, [r3, #0]

					pass_mode = 3;						//a半区画ベースでroute配列生成
 8009276:	4b3c      	ldr	r3, [pc, #240]	; (8009368 <pass_test+0x318>)
 8009278:	2203      	movs	r2, #3
 800927a:	701a      	strb	r2, [r3, #0]

					goal_x = GOAL_X;
 800927c:	4b37      	ldr	r3, [pc, #220]	; (800935c <pass_test+0x30c>)
 800927e:	2209      	movs	r2, #9
 8009280:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 8009282:	4b37      	ldr	r3, [pc, #220]	; (8009360 <pass_test+0x310>)
 8009284:	2206      	movs	r2, #6
 8009286:	701a      	strb	r2, [r3, #0]

					get_base();
 8009288:	f006 fd5a 	bl	800fd40 <get_base>

					searchF3();
 800928c:	f004 fa62 	bl	800d754 <searchF3>
					HAL_Delay(2000);
 8009290:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8009294:	f7f7 fec2 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 8009298:	4b31      	ldr	r3, [pc, #196]	; (8009360 <pass_test+0x310>)
 800929a:	2200      	movs	r2, #0
 800929c:	701a      	strb	r2, [r3, #0]
 800929e:	4b30      	ldr	r3, [pc, #192]	; (8009360 <pass_test+0x310>)
 80092a0:	781a      	ldrb	r2, [r3, #0]
 80092a2:	4b2e      	ldr	r3, [pc, #184]	; (800935c <pass_test+0x30c>)
 80092a4:	701a      	strb	r2, [r3, #0]
					searchF3();
 80092a6:	f004 fa55 	bl	800d754 <searchF3>

					goal_x = GOAL_X;
 80092aa:	4b2c      	ldr	r3, [pc, #176]	; (800935c <pass_test+0x30c>)
 80092ac:	2209      	movs	r2, #9
 80092ae:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 80092b0:	4b2b      	ldr	r3, [pc, #172]	; (8009360 <pass_test+0x310>)
 80092b2:	2206      	movs	r2, #6
 80092b4:	701a      	strb	r2, [r3, #0]
					break;
 80092b6:	e099      	b.n	80093ec <pass_test+0x39c>
				case 3:
					//----a直線と大回り圧縮と斜めｰｰｰｰ
					printf("pass press 4.\n");
 80092b8:	482d      	ldr	r0, [pc, #180]	; (8009370 <pass_test+0x320>)
 80092ba:	f007 fbdb 	bl	8010a74 <puts>
					MF.FLAG.SCND = 1;
 80092be:	4a22      	ldr	r2, [pc, #136]	; (8009348 <pass_test+0x2f8>)
 80092c0:	8813      	ldrh	r3, [r2, #0]
 80092c2:	f043 0320 	orr.w	r3, r3, #32
 80092c6:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 80092c8:	4a1f      	ldr	r2, [pc, #124]	; (8009348 <pass_test+0x2f8>)
 80092ca:	8813      	ldrh	r3, [r2, #0]
 80092cc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80092d0:	8013      	strh	r3, [r2, #0]
					run_mode = LOW;
 80092d2:	4b1e      	ldr	r3, [pc, #120]	; (800934c <pass_test+0x2fc>)
 80092d4:	2201      	movs	r2, #1
 80092d6:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 80092d8:	4b1d      	ldr	r3, [pc, #116]	; (8009350 <pass_test+0x300>)
 80092da:	2200      	movs	r2, #0
 80092dc:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 80092de:	4b1d      	ldr	r3, [pc, #116]	; (8009354 <pass_test+0x304>)
 80092e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80092e4:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 800;
 80092e6:	4b1c      	ldr	r3, [pc, #112]	; (8009358 <pass_test+0x308>)
 80092e8:	f44f 7248 	mov.w	r2, #800	; 0x320
 80092ec:	801a      	strh	r2, [r3, #0]

					pass_mode = 4;
 80092ee:	4b1e      	ldr	r3, [pc, #120]	; (8009368 <pass_test+0x318>)
 80092f0:	2204      	movs	r2, #4
 80092f2:	701a      	strb	r2, [r3, #0]

					goal_x = GOAL_X;
 80092f4:	4b19      	ldr	r3, [pc, #100]	; (800935c <pass_test+0x30c>)
 80092f6:	2209      	movs	r2, #9
 80092f8:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 80092fa:	4b19      	ldr	r3, [pc, #100]	; (8009360 <pass_test+0x310>)
 80092fc:	2206      	movs	r2, #6
 80092fe:	701a      	strb	r2, [r3, #0]

					get_base();
 8009300:	f006 fd1e 	bl	800fd40 <get_base>

					searchF4();
 8009304:	f004 faf0 	bl	800d8e8 <searchF4>
					HAL_Delay(2000);
 8009308:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800930c:	f7f7 fe86 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 8009310:	4b13      	ldr	r3, [pc, #76]	; (8009360 <pass_test+0x310>)
 8009312:	2200      	movs	r2, #0
 8009314:	701a      	strb	r2, [r3, #0]
 8009316:	4b12      	ldr	r3, [pc, #72]	; (8009360 <pass_test+0x310>)
 8009318:	781a      	ldrb	r2, [r3, #0]
 800931a:	4b10      	ldr	r3, [pc, #64]	; (800935c <pass_test+0x30c>)
 800931c:	701a      	strb	r2, [r3, #0]
					searchF4();
 800931e:	f004 fae3 	bl	800d8e8 <searchF4>

					goal_x = GOAL_X;
 8009322:	4b0e      	ldr	r3, [pc, #56]	; (800935c <pass_test+0x30c>)
 8009324:	2209      	movs	r2, #9
 8009326:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 8009328:	4b0d      	ldr	r3, [pc, #52]	; (8009360 <pass_test+0x310>)
 800932a:	2206      	movs	r2, #6
 800932c:	701a      	strb	r2, [r3, #0]
					break;
 800932e:	e05d      	b.n	80093ec <pass_test+0x39c>
 8009330:	08011d8c 	.word	0x08011d8c
 8009334:	20000aec 	.word	0x20000aec
 8009338:	08011bc8 	.word	0x08011bc8
 800933c:	40020000 	.word	0x40020000
 8009340:	20000f64 	.word	0x20000f64
 8009344:	08011da8 	.word	0x08011da8
 8009348:	20000f68 	.word	0x20000f68
 800934c:	20000456 	.word	0x20000456
 8009350:	200015c8 	.word	0x200015c8
 8009354:	20000454 	.word	0x20000454
 8009358:	20000f7c 	.word	0x20000f7c
 800935c:	20000bb0 	.word	0x20000bb0
 8009360:	20000b4c 	.word	0x20000b4c
 8009364:	08011dbc 	.word	0x08011dbc
 8009368:	20000457 	.word	0x20000457
 800936c:	08011dcc 	.word	0x08011dcc
 8009370:	08011ddc 	.word	0x08011ddc
				case 4:
					//----a直線と大回り圧縮と斜め High Speedｰｰｰｰ
					printf("pass press 4.\n");
 8009374:	481e      	ldr	r0, [pc, #120]	; (80093f0 <pass_test+0x3a0>)
 8009376:	f007 fb7d 	bl	8010a74 <puts>
					MF.FLAG.SCND = 1;
 800937a:	4a1e      	ldr	r2, [pc, #120]	; (80093f4 <pass_test+0x3a4>)
 800937c:	8813      	ldrh	r3, [r2, #0]
 800937e:	f043 0320 	orr.w	r3, r3, #32
 8009382:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 8009384:	4a1b      	ldr	r2, [pc, #108]	; (80093f4 <pass_test+0x3a4>)
 8009386:	8813      	ldrh	r3, [r2, #0]
 8009388:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800938c:	8013      	strh	r3, [r2, #0]
					run_mode = HIGH;
 800938e:	4b1a      	ldr	r3, [pc, #104]	; (80093f8 <pass_test+0x3a8>)
 8009390:	2203      	movs	r2, #3
 8009392:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 8009394:	4b19      	ldr	r3, [pc, #100]	; (80093fc <pass_test+0x3ac>)
 8009396:	2200      	movs	r2, #0
 8009398:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 800939a:	4b19      	ldr	r3, [pc, #100]	; (8009400 <pass_test+0x3b0>)
 800939c:	f241 3288 	movw	r2, #5000	; 0x1388
 80093a0:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1200;
 80093a2:	4b18      	ldr	r3, [pc, #96]	; (8009404 <pass_test+0x3b4>)
 80093a4:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 80093a8:	801a      	strh	r2, [r3, #0]

					pass_mode = 4;
 80093aa:	4b17      	ldr	r3, [pc, #92]	; (8009408 <pass_test+0x3b8>)
 80093ac:	2204      	movs	r2, #4
 80093ae:	701a      	strb	r2, [r3, #0]

					goal_x = GOAL_X;
 80093b0:	4b16      	ldr	r3, [pc, #88]	; (800940c <pass_test+0x3bc>)
 80093b2:	2209      	movs	r2, #9
 80093b4:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 80093b6:	4b16      	ldr	r3, [pc, #88]	; (8009410 <pass_test+0x3c0>)
 80093b8:	2206      	movs	r2, #6
 80093ba:	701a      	strb	r2, [r3, #0]

					get_base();
 80093bc:	f006 fcc0 	bl	800fd40 <get_base>

					searchF4();
 80093c0:	f004 fa92 	bl	800d8e8 <searchF4>
					HAL_Delay(2000);
 80093c4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80093c8:	f7f7 fe28 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 80093cc:	4b10      	ldr	r3, [pc, #64]	; (8009410 <pass_test+0x3c0>)
 80093ce:	2200      	movs	r2, #0
 80093d0:	701a      	strb	r2, [r3, #0]
 80093d2:	4b0f      	ldr	r3, [pc, #60]	; (8009410 <pass_test+0x3c0>)
 80093d4:	781a      	ldrb	r2, [r3, #0]
 80093d6:	4b0d      	ldr	r3, [pc, #52]	; (800940c <pass_test+0x3bc>)
 80093d8:	701a      	strb	r2, [r3, #0]
					searchF4();
 80093da:	f004 fa85 	bl	800d8e8 <searchF4>

					goal_x = GOAL_X;
 80093de:	4b0b      	ldr	r3, [pc, #44]	; (800940c <pass_test+0x3bc>)
 80093e0:	2209      	movs	r2, #9
 80093e2:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 80093e4:	4b0a      	ldr	r3, [pc, #40]	; (8009410 <pass_test+0x3c0>)
 80093e6:	2206      	movs	r2, #6
 80093e8:	701a      	strb	r2, [r3, #0]
					break;
 80093ea:	bf00      	nop
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 80093ec:	e639      	b.n	8009062 <pass_test+0x12>
 80093ee:	bf00      	nop
 80093f0:	08011ddc 	.word	0x08011ddc
 80093f4:	20000f68 	.word	0x20000f68
 80093f8:	20000456 	.word	0x20000456
 80093fc:	200015c8 	.word	0x200015c8
 8009400:	20000454 	.word	0x20000454
 8009404:	20000f7c 	.word	0x20000f7c
 8009408:	20000457 	.word	0x20000457
 800940c:	20000bb0 	.word	0x20000bb0
 8009410:	20000b4c 	.word	0x20000b4c

08009414 <simple_run>:
//simple_run
// 超信地走行モード
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void simple_run(void){
 8009414:	b580      	push	{r7, lr}
 8009416:	b082      	sub	sp, #8
 8009418:	af00      	add	r7, sp, #0

	int mode = 0;
 800941a:	2300      	movs	r3, #0
 800941c:	607b      	str	r3, [r7, #4]
	printf("Simple Run, Mode : %d\n", mode);
 800941e:	6879      	ldr	r1, [r7, #4]
 8009420:	4878      	ldr	r0, [pc, #480]	; (8009604 <simple_run+0x1f0>)
 8009422:	f007 fab3 	bl	801098c <iprintf>

	while(1){

		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	b2db      	uxtb	r3, r3
 800942a:	f003 0301 	and.w	r3, r3, #1
 800942e:	b2d8      	uxtb	r0, r3
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	b2db      	uxtb	r3, r3
 8009434:	f003 0302 	and.w	r3, r3, #2
 8009438:	b2d9      	uxtb	r1, r3
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	b2db      	uxtb	r3, r3
 800943e:	f003 0304 	and.w	r3, r3, #4
 8009442:	b2db      	uxtb	r3, r3
 8009444:	461a      	mov	r2, r3
 8009446:	f006 fcd3 	bl	800fdf0 <led_write>
		  if(dist_r >= 20){
 800944a:	4b6f      	ldr	r3, [pc, #444]	; (8009608 <simple_run+0x1f4>)
 800944c:	edd3 7a00 	vldr	s15, [r3]
 8009450:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8009454:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009458:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800945c:	db0f      	blt.n	800947e <simple_run+0x6a>
			  mode++;
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	3301      	adds	r3, #1
 8009462:	607b      	str	r3, [r7, #4]
			  dist_r = 0;
 8009464:	4b68      	ldr	r3, [pc, #416]	; (8009608 <simple_run+0x1f4>)
 8009466:	f04f 0200 	mov.w	r2, #0
 800946a:	601a      	str	r2, [r3, #0]
			  if(mode > 7){
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	2b07      	cmp	r3, #7
 8009470:	dd01      	ble.n	8009476 <simple_run+0x62>
				  mode = 0;
 8009472:	2300      	movs	r3, #0
 8009474:	607b      	str	r3, [r7, #4]
			  }
			  printf("Mode : %d\n", mode);
 8009476:	6879      	ldr	r1, [r7, #4]
 8009478:	4864      	ldr	r0, [pc, #400]	; (800960c <simple_run+0x1f8>)
 800947a:	f007 fa87 	bl	801098c <iprintf>
			  //buzzer(pitagola2[mode-1][0], pitagola2[mode-1][1]);
			  //buzzer(pitagola[2][0], pitagola[2][1]);
		  }
		  if(dist_r <= -20){
 800947e:	4b62      	ldr	r3, [pc, #392]	; (8009608 <simple_run+0x1f4>)
 8009480:	edd3 7a00 	vldr	s15, [r3]
 8009484:	eebb 7a04 	vmov.f32	s14, #180	; 0xc1a00000 -20.0
 8009488:	eef4 7ac7 	vcmpe.f32	s15, s14
 800948c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009490:	d80f      	bhi.n	80094b2 <simple_run+0x9e>
			  mode--;
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	3b01      	subs	r3, #1
 8009496:	607b      	str	r3, [r7, #4]
			  dist_r = 0;
 8009498:	4b5b      	ldr	r3, [pc, #364]	; (8009608 <simple_run+0x1f4>)
 800949a:	f04f 0200 	mov.w	r2, #0
 800949e:	601a      	str	r2, [r3, #0]
			  if(mode < 0){
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	da01      	bge.n	80094aa <simple_run+0x96>
				  mode = 7;
 80094a6:	2307      	movs	r3, #7
 80094a8:	607b      	str	r3, [r7, #4]
			  }
			  printf("Mode : %d\n", mode);
 80094aa:	6879      	ldr	r1, [r7, #4]
 80094ac:	4857      	ldr	r0, [pc, #348]	; (800960c <simple_run+0x1f8>)
 80094ae:	f007 fa6d 	bl	801098c <iprintf>
			  //buzzer(pitagola2[mode-1][0], pitagola2[mode-1][1]);
			  //buzzer(pitagola[2][0], pitagola[2][1]);
		  }
		  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET){
 80094b2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80094b6:	4856      	ldr	r0, [pc, #344]	; (8009610 <simple_run+0x1fc>)
 80094b8:	f7f8 ff0c 	bl	80022d4 <HAL_GPIO_ReadPin>
 80094bc:	4603      	mov	r3, r0
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d1b1      	bne.n	8009426 <simple_run+0x12>
			  HAL_Delay(50);
 80094c2:	2032      	movs	r0, #50	; 0x32
 80094c4:	f7f7 fdaa 	bl	800101c <HAL_Delay>
			  while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET);
 80094c8:	bf00      	nop
 80094ca:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80094ce:	4850      	ldr	r0, [pc, #320]	; (8009610 <simple_run+0x1fc>)
 80094d0:	f7f8 ff00 	bl	80022d4 <HAL_GPIO_ReadPin>
 80094d4:	4603      	mov	r3, r0
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d0f7      	beq.n	80094ca <simple_run+0xb6>
			  drive_ready();
 80094da:	f7fb fbd1 	bl	8004c80 <drive_ready>

			  switch(mode){
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	2b07      	cmp	r3, #7
 80094e2:	d8a0      	bhi.n	8009426 <simple_run+0x12>
 80094e4:	a201      	add	r2, pc, #4	; (adr r2, 80094ec <simple_run+0xd8>)
 80094e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094ea:	bf00      	nop
 80094ec:	08009427 	.word	0x08009427
 80094f0:	0800950d 	.word	0x0800950d
 80094f4:	0800955f 	.word	0x0800955f
 80094f8:	080095b1 	.word	0x080095b1
 80094fc:	08009427 	.word	0x08009427
 8009500:	08009427 	.word	0x08009427
 8009504:	08009427 	.word	0x08009427
 8009508:	08009427 	.word	0x08009427

				case 0:
					break;
				case 1:
					//----一次探索走行----
					printf("First Run.\n");
 800950c:	4841      	ldr	r0, [pc, #260]	; (8009614 <simple_run+0x200>)
 800950e:	f007 fab1 	bl	8010a74 <puts>

					MF.FLAG.SCND = 0;
 8009512:	4a41      	ldr	r2, [pc, #260]	; (8009618 <simple_run+0x204>)
 8009514:	8813      	ldrh	r3, [r2, #0]
 8009516:	f36f 1345 	bfc	r3, #5, #1
 800951a:	8013      	strh	r3, [r2, #0]
					run_mode = LOW;
 800951c:	4b3f      	ldr	r3, [pc, #252]	; (800961c <simple_run+0x208>)
 800951e:	2201      	movs	r2, #1
 8009520:	701a      	strb	r2, [r3, #0]
					goal_x = GOAL_X;
 8009522:	4b3f      	ldr	r3, [pc, #252]	; (8009620 <simple_run+0x20c>)
 8009524:	2209      	movs	r2, #9
 8009526:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 8009528:	4b3e      	ldr	r3, [pc, #248]	; (8009624 <simple_run+0x210>)
 800952a:	2206      	movs	r2, #6
 800952c:	701a      	strb	r2, [r3, #0]

					get_base();
 800952e:	f006 fc07 	bl	800fd40 <get_base>

					searchA();
 8009532:	f003 fd17 	bl	800cf64 <searchA>
					HAL_Delay(2000);
 8009536:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800953a:	f7f7 fd6f 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800953e:	4b39      	ldr	r3, [pc, #228]	; (8009624 <simple_run+0x210>)
 8009540:	2200      	movs	r2, #0
 8009542:	701a      	strb	r2, [r3, #0]
 8009544:	4b37      	ldr	r3, [pc, #220]	; (8009624 <simple_run+0x210>)
 8009546:	781a      	ldrb	r2, [r3, #0]
 8009548:	4b35      	ldr	r3, [pc, #212]	; (8009620 <simple_run+0x20c>)
 800954a:	701a      	strb	r2, [r3, #0]
					searchA();
 800954c:	f003 fd0a 	bl	800cf64 <searchA>

					goal_x = GOAL_X;
 8009550:	4b33      	ldr	r3, [pc, #204]	; (8009620 <simple_run+0x20c>)
 8009552:	2209      	movs	r2, #9
 8009554:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 8009556:	4b33      	ldr	r3, [pc, #204]	; (8009624 <simple_run+0x210>)
 8009558:	2206      	movs	r2, #6
 800955a:	701a      	strb	r2, [r3, #0]

					break;
 800955c:	e051      	b.n	8009602 <simple_run+0x1ee>

				case 2:
					//----一次探索連続走行----
					printf("First Run. (Continuous)\n");
 800955e:	4832      	ldr	r0, [pc, #200]	; (8009628 <simple_run+0x214>)
 8009560:	f007 fa88 	bl	8010a74 <puts>

					MF.FLAG.SCND = 0;
 8009564:	4a2c      	ldr	r2, [pc, #176]	; (8009618 <simple_run+0x204>)
 8009566:	8813      	ldrh	r3, [r2, #0]
 8009568:	f36f 1345 	bfc	r3, #5, #1
 800956c:	8013      	strh	r3, [r2, #0]
					run_mode = LOW;
 800956e:	4b2b      	ldr	r3, [pc, #172]	; (800961c <simple_run+0x208>)
 8009570:	2201      	movs	r2, #1
 8009572:	701a      	strb	r2, [r3, #0]
					goal_x = GOAL_X;
 8009574:	4b2a      	ldr	r3, [pc, #168]	; (8009620 <simple_run+0x20c>)
 8009576:	2209      	movs	r2, #9
 8009578:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800957a:	4b2a      	ldr	r3, [pc, #168]	; (8009624 <simple_run+0x210>)
 800957c:	2206      	movs	r2, #6
 800957e:	701a      	strb	r2, [r3, #0]

					get_base();
 8009580:	f006 fbde 	bl	800fd40 <get_base>

					searchB();
 8009584:	f003 fd70 	bl	800d068 <searchB>
					HAL_Delay(2000);
 8009588:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800958c:	f7f7 fd46 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 8009590:	4b24      	ldr	r3, [pc, #144]	; (8009624 <simple_run+0x210>)
 8009592:	2200      	movs	r2, #0
 8009594:	701a      	strb	r2, [r3, #0]
 8009596:	4b23      	ldr	r3, [pc, #140]	; (8009624 <simple_run+0x210>)
 8009598:	781a      	ldrb	r2, [r3, #0]
 800959a:	4b21      	ldr	r3, [pc, #132]	; (8009620 <simple_run+0x20c>)
 800959c:	701a      	strb	r2, [r3, #0]
					searchB();
 800959e:	f003 fd63 	bl	800d068 <searchB>

					goal_x = GOAL_X;
 80095a2:	4b1f      	ldr	r3, [pc, #124]	; (8009620 <simple_run+0x20c>)
 80095a4:	2209      	movs	r2, #9
 80095a6:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 80095a8:	4b1e      	ldr	r3, [pc, #120]	; (8009624 <simple_run+0x210>)
 80095aa:	2206      	movs	r2, #6
 80095ac:	701a      	strb	r2, [r3, #0]

					break;
 80095ae:	e028      	b.n	8009602 <simple_run+0x1ee>

				case 3:
					//----二次探索走行----
					printf("Second Run. (Continuous)\n");
 80095b0:	481e      	ldr	r0, [pc, #120]	; (800962c <simple_run+0x218>)
 80095b2:	f007 fa5f 	bl	8010a74 <puts>

					MF.FLAG.SCND = 1;
 80095b6:	4a18      	ldr	r2, [pc, #96]	; (8009618 <simple_run+0x204>)
 80095b8:	8813      	ldrh	r3, [r2, #0]
 80095ba:	f043 0320 	orr.w	r3, r3, #32
 80095be:	8013      	strh	r3, [r2, #0]
					run_mode = LOW;
 80095c0:	4b16      	ldr	r3, [pc, #88]	; (800961c <simple_run+0x208>)
 80095c2:	2201      	movs	r2, #1
 80095c4:	701a      	strb	r2, [r3, #0]
					goal_x = GOAL_X;
 80095c6:	4b16      	ldr	r3, [pc, #88]	; (8009620 <simple_run+0x20c>)
 80095c8:	2209      	movs	r2, #9
 80095ca:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 80095cc:	4b15      	ldr	r3, [pc, #84]	; (8009624 <simple_run+0x210>)
 80095ce:	2206      	movs	r2, #6
 80095d0:	701a      	strb	r2, [r3, #0]

					get_base();
 80095d2:	f006 fbb5 	bl	800fd40 <get_base>

					searchB();
 80095d6:	f003 fd47 	bl	800d068 <searchB>
					HAL_Delay(2000);
 80095da:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80095de:	f7f7 fd1d 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 80095e2:	4b10      	ldr	r3, [pc, #64]	; (8009624 <simple_run+0x210>)
 80095e4:	2200      	movs	r2, #0
 80095e6:	701a      	strb	r2, [r3, #0]
 80095e8:	4b0e      	ldr	r3, [pc, #56]	; (8009624 <simple_run+0x210>)
 80095ea:	781a      	ldrb	r2, [r3, #0]
 80095ec:	4b0c      	ldr	r3, [pc, #48]	; (8009620 <simple_run+0x20c>)
 80095ee:	701a      	strb	r2, [r3, #0]
					searchB();
 80095f0:	f003 fd3a 	bl	800d068 <searchB>

					goal_x = GOAL_X;
 80095f4:	4b0a      	ldr	r3, [pc, #40]	; (8009620 <simple_run+0x20c>)
 80095f6:	2209      	movs	r2, #9
 80095f8:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 80095fa:	4b0a      	ldr	r3, [pc, #40]	; (8009624 <simple_run+0x210>)
 80095fc:	2206      	movs	r2, #6
 80095fe:	701a      	strb	r2, [r3, #0]

					break;
 8009600:	bf00      	nop
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 8009602:	e710      	b.n	8009426 <simple_run+0x12>
 8009604:	08011dec 	.word	0x08011dec
 8009608:	20000aec 	.word	0x20000aec
 800960c:	08011bc8 	.word	0x08011bc8
 8009610:	40020000 	.word	0x40020000
 8009614:	08011e04 	.word	0x08011e04
 8009618:	20000f68 	.word	0x20000f68
 800961c:	20000456 	.word	0x20000456
 8009620:	20000bb0 	.word	0x20000bb0
 8009624:	20000b4c 	.word	0x20000b4c
 8009628:	08011e10 	.word	0x08011e10
 800962c:	08011e28 	.word	0x08011e28

08009630 <slalom_run>:
//slalom_run
// スラローム走行モード
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void slalom_run(void){
 8009630:	b580      	push	{r7, lr}
 8009632:	b082      	sub	sp, #8
 8009634:	af00      	add	r7, sp, #0

	int mode = 0;
 8009636:	2300      	movs	r3, #0
 8009638:	607b      	str	r3, [r7, #4]
	printf("Slalom Run, Mode : %d\n", mode);
 800963a:	6879      	ldr	r1, [r7, #4]
 800963c:	48a6      	ldr	r0, [pc, #664]	; (80098d8 <slalom_run+0x2a8>)
 800963e:	f007 f9a5 	bl	801098c <iprintf>

	while(1){
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	b2db      	uxtb	r3, r3
 8009646:	f003 0301 	and.w	r3, r3, #1
 800964a:	b2d8      	uxtb	r0, r3
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	b2db      	uxtb	r3, r3
 8009650:	f003 0302 	and.w	r3, r3, #2
 8009654:	b2d9      	uxtb	r1, r3
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	b2db      	uxtb	r3, r3
 800965a:	f003 0304 	and.w	r3, r3, #4
 800965e:	b2db      	uxtb	r3, r3
 8009660:	461a      	mov	r2, r3
 8009662:	f006 fbc5 	bl	800fdf0 <led_write>
		  if(dist_r >= 20){
 8009666:	4b9d      	ldr	r3, [pc, #628]	; (80098dc <slalom_run+0x2ac>)
 8009668:	edd3 7a00 	vldr	s15, [r3]
 800966c:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8009670:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009674:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009678:	db0f      	blt.n	800969a <slalom_run+0x6a>
			  mode++;
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	3301      	adds	r3, #1
 800967e:	607b      	str	r3, [r7, #4]
			  dist_r = 0;
 8009680:	4b96      	ldr	r3, [pc, #600]	; (80098dc <slalom_run+0x2ac>)
 8009682:	f04f 0200 	mov.w	r2, #0
 8009686:	601a      	str	r2, [r3, #0]
			  if(mode > 7){
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	2b07      	cmp	r3, #7
 800968c:	dd01      	ble.n	8009692 <slalom_run+0x62>
				  mode = 0;
 800968e:	2300      	movs	r3, #0
 8009690:	607b      	str	r3, [r7, #4]
			  }
			  printf("Mode : %d\n", mode);
 8009692:	6879      	ldr	r1, [r7, #4]
 8009694:	4892      	ldr	r0, [pc, #584]	; (80098e0 <slalom_run+0x2b0>)
 8009696:	f007 f979 	bl	801098c <iprintf>
			  //buzzer(pitagola2[mode-1][0], pitagola2[mode-1][1]);
			  //buzzer(pitagola[2][0], pitagola[2][1]);
		  }
		  if(dist_r <= -20){
 800969a:	4b90      	ldr	r3, [pc, #576]	; (80098dc <slalom_run+0x2ac>)
 800969c:	edd3 7a00 	vldr	s15, [r3]
 80096a0:	eebb 7a04 	vmov.f32	s14, #180	; 0xc1a00000 -20.0
 80096a4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80096a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80096ac:	d80f      	bhi.n	80096ce <slalom_run+0x9e>
			  mode--;
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	3b01      	subs	r3, #1
 80096b2:	607b      	str	r3, [r7, #4]
			  dist_r = 0;
 80096b4:	4b89      	ldr	r3, [pc, #548]	; (80098dc <slalom_run+0x2ac>)
 80096b6:	f04f 0200 	mov.w	r2, #0
 80096ba:	601a      	str	r2, [r3, #0]
			  if(mode < 0){
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	2b00      	cmp	r3, #0
 80096c0:	da01      	bge.n	80096c6 <slalom_run+0x96>
				  mode = 7;
 80096c2:	2307      	movs	r3, #7
 80096c4:	607b      	str	r3, [r7, #4]
			  }
			  printf("Mode : %d\n", mode);
 80096c6:	6879      	ldr	r1, [r7, #4]
 80096c8:	4885      	ldr	r0, [pc, #532]	; (80098e0 <slalom_run+0x2b0>)
 80096ca:	f007 f95f 	bl	801098c <iprintf>
			  //buzzer(pitagola2[mode-1][0], pitagola2[mode-1][1]);
			  //buzzer(pitagola[2][0], pitagola[2][1]);
		  }
		  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET){
 80096ce:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80096d2:	4884      	ldr	r0, [pc, #528]	; (80098e4 <slalom_run+0x2b4>)
 80096d4:	f7f8 fdfe 	bl	80022d4 <HAL_GPIO_ReadPin>
 80096d8:	4603      	mov	r3, r0
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d1b1      	bne.n	8009642 <slalom_run+0x12>
			  HAL_Delay(50);
 80096de:	2032      	movs	r0, #50	; 0x32
 80096e0:	f7f7 fc9c 	bl	800101c <HAL_Delay>
			  while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET);
 80096e4:	bf00      	nop
 80096e6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80096ea:	487e      	ldr	r0, [pc, #504]	; (80098e4 <slalom_run+0x2b4>)
 80096ec:	f7f8 fdf2 	bl	80022d4 <HAL_GPIO_ReadPin>
 80096f0:	4603      	mov	r3, r0
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	d0f7      	beq.n	80096e6 <slalom_run+0xb6>
			  drive_ready();
 80096f6:	f7fb fac3 	bl	8004c80 <drive_ready>

			  switch(mode){
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	2b07      	cmp	r3, #7
 80096fe:	d8a0      	bhi.n	8009642 <slalom_run+0x12>
 8009700:	a201      	add	r2, pc, #4	; (adr r2, 8009708 <slalom_run+0xd8>)
 8009702:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009706:	bf00      	nop
 8009708:	08009729 	.word	0x08009729
 800970c:	0800979b 	.word	0x0800979b
 8009710:	080097f3 	.word	0x080097f3
 8009714:	08009865 	.word	0x08009865
 8009718:	08009911 	.word	0x08009911
 800971c:	08009983 	.word	0x08009983
 8009720:	080099ed 	.word	0x080099ed
 8009724:	08009a71 	.word	0x08009a71

			  case 0:
					//----一次探索スラローム走行----
					printf("First Run. (Slalom)\n");
 8009728:	486f      	ldr	r0, [pc, #444]	; (80098e8 <slalom_run+0x2b8>)
 800972a:	f007 f9a3 	bl	8010a74 <puts>

					MF.FLAG.SCND = 0;
 800972e:	4a6f      	ldr	r2, [pc, #444]	; (80098ec <slalom_run+0x2bc>)
 8009730:	8813      	ldrh	r3, [r2, #0]
 8009732:	f36f 1345 	bfc	r3, #5, #1
 8009736:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 0;
 8009738:	4a6c      	ldr	r2, [pc, #432]	; (80098ec <slalom_run+0x2bc>)
 800973a:	8813      	ldrh	r3, [r2, #0]
 800973c:	f36f 2349 	bfc	r3, #9, #1
 8009740:	8013      	strh	r3, [r2, #0]
					run_mode = LOW;
 8009742:	4b6b      	ldr	r3, [pc, #428]	; (80098f0 <slalom_run+0x2c0>)
 8009744:	2201      	movs	r2, #1
 8009746:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 8009748:	4b6a      	ldr	r3, [pc, #424]	; (80098f4 <slalom_run+0x2c4>)
 800974a:	2200      	movs	r2, #0
 800974c:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 800974e:	4b6a      	ldr	r3, [pc, #424]	; (80098f8 <slalom_run+0x2c8>)
 8009750:	f241 3288 	movw	r2, #5000	; 0x1388
 8009754:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 800;
 8009756:	4b69      	ldr	r3, [pc, #420]	; (80098fc <slalom_run+0x2cc>)
 8009758:	f44f 7248 	mov.w	r2, #800	; 0x320
 800975c:	801a      	strh	r2, [r3, #0]


					goal_x = GOAL_X;
 800975e:	4b68      	ldr	r3, [pc, #416]	; (8009900 <slalom_run+0x2d0>)
 8009760:	2209      	movs	r2, #9
 8009762:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 8009764:	4b67      	ldr	r3, [pc, #412]	; (8009904 <slalom_run+0x2d4>)
 8009766:	2206      	movs	r2, #6
 8009768:	701a      	strb	r2, [r3, #0]

					get_base();
 800976a:	f006 fae9 	bl	800fd40 <get_base>

					searchC();
 800976e:	f003 fd05 	bl	800d17c <searchC>
					HAL_Delay(2000);
 8009772:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8009776:	f7f7 fc51 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800977a:	4b62      	ldr	r3, [pc, #392]	; (8009904 <slalom_run+0x2d4>)
 800977c:	2200      	movs	r2, #0
 800977e:	701a      	strb	r2, [r3, #0]
 8009780:	4b60      	ldr	r3, [pc, #384]	; (8009904 <slalom_run+0x2d4>)
 8009782:	781a      	ldrb	r2, [r3, #0]
 8009784:	4b5e      	ldr	r3, [pc, #376]	; (8009900 <slalom_run+0x2d0>)
 8009786:	701a      	strb	r2, [r3, #0]
					searchC();
 8009788:	f003 fcf8 	bl	800d17c <searchC>

					goal_x = GOAL_X;
 800978c:	4b5c      	ldr	r3, [pc, #368]	; (8009900 <slalom_run+0x2d0>)
 800978e:	2209      	movs	r2, #9
 8009790:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 8009792:	4b5c      	ldr	r3, [pc, #368]	; (8009904 <slalom_run+0x2d4>)
 8009794:	2206      	movs	r2, #6
 8009796:	701a      	strb	r2, [r3, #0]
					break;
 8009798:	e1ac      	b.n	8009af4 <slalom_run+0x4c4>

				case 1:
					//----二次探索スラローム走行----
					printf("Second Run. (Slalom)\n");
 800979a:	485b      	ldr	r0, [pc, #364]	; (8009908 <slalom_run+0x2d8>)
 800979c:	f007 f96a 	bl	8010a74 <puts>

					MF.FLAG.SCND = 1;
 80097a0:	4a52      	ldr	r2, [pc, #328]	; (80098ec <slalom_run+0x2bc>)
 80097a2:	8813      	ldrh	r3, [r2, #0]
 80097a4:	f043 0320 	orr.w	r3, r3, #32
 80097a8:	8013      	strh	r3, [r2, #0]
					run_mode = LOW;
 80097aa:	4b51      	ldr	r3, [pc, #324]	; (80098f0 <slalom_run+0x2c0>)
 80097ac:	2201      	movs	r2, #1
 80097ae:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 80097b0:	4b50      	ldr	r3, [pc, #320]	; (80098f4 <slalom_run+0x2c4>)
 80097b2:	2200      	movs	r2, #0
 80097b4:	701a      	strb	r2, [r3, #0]
					goal_x = GOAL_X;
 80097b6:	4b52      	ldr	r3, [pc, #328]	; (8009900 <slalom_run+0x2d0>)
 80097b8:	2209      	movs	r2, #9
 80097ba:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 80097bc:	4b51      	ldr	r3, [pc, #324]	; (8009904 <slalom_run+0x2d4>)
 80097be:	2206      	movs	r2, #6
 80097c0:	701a      	strb	r2, [r3, #0]

					get_base();
 80097c2:	f006 fabd 	bl	800fd40 <get_base>

					searchC();
 80097c6:	f003 fcd9 	bl	800d17c <searchC>
					HAL_Delay(2000);
 80097ca:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80097ce:	f7f7 fc25 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 80097d2:	4b4c      	ldr	r3, [pc, #304]	; (8009904 <slalom_run+0x2d4>)
 80097d4:	2200      	movs	r2, #0
 80097d6:	701a      	strb	r2, [r3, #0]
 80097d8:	4b4a      	ldr	r3, [pc, #296]	; (8009904 <slalom_run+0x2d4>)
 80097da:	781a      	ldrb	r2, [r3, #0]
 80097dc:	4b48      	ldr	r3, [pc, #288]	; (8009900 <slalom_run+0x2d0>)
 80097de:	701a      	strb	r2, [r3, #0]
					searchC();
 80097e0:	f003 fccc 	bl	800d17c <searchC>

					goal_x = GOAL_X;
 80097e4:	4b46      	ldr	r3, [pc, #280]	; (8009900 <slalom_run+0x2d0>)
 80097e6:	2209      	movs	r2, #9
 80097e8:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 80097ea:	4b46      	ldr	r3, [pc, #280]	; (8009904 <slalom_run+0x2d4>)
 80097ec:	2206      	movs	r2, #6
 80097ee:	701a      	strb	r2, [r3, #0]
					break;
 80097f0:	e180      	b.n	8009af4 <slalom_run+0x4c4>

				case 2:
					//----二次探索スラローム走行+既知区間加速----
					printf("Second Run. (Slalom+accel)\n");
 80097f2:	4846      	ldr	r0, [pc, #280]	; (800990c <slalom_run+0x2dc>)
 80097f4:	f007 f93e 	bl	8010a74 <puts>

					MF.FLAG.SCND = 1;
 80097f8:	4a3c      	ldr	r2, [pc, #240]	; (80098ec <slalom_run+0x2bc>)
 80097fa:	8813      	ldrh	r3, [r2, #0]
 80097fc:	f043 0320 	orr.w	r3, r3, #32
 8009800:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 8009802:	4a3a      	ldr	r2, [pc, #232]	; (80098ec <slalom_run+0x2bc>)
 8009804:	8813      	ldrh	r3, [r2, #0]
 8009806:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800980a:	8013      	strh	r3, [r2, #0]
					run_mode = LOW;
 800980c:	4b38      	ldr	r3, [pc, #224]	; (80098f0 <slalom_run+0x2c0>)
 800980e:	2201      	movs	r2, #1
 8009810:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 8009812:	4b38      	ldr	r3, [pc, #224]	; (80098f4 <slalom_run+0x2c4>)
 8009814:	2200      	movs	r2, #0
 8009816:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 8009818:	4b37      	ldr	r3, [pc, #220]	; (80098f8 <slalom_run+0x2c8>)
 800981a:	f241 3288 	movw	r2, #5000	; 0x1388
 800981e:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 600;
 8009820:	4b36      	ldr	r3, [pc, #216]	; (80098fc <slalom_run+0x2cc>)
 8009822:	f44f 7216 	mov.w	r2, #600	; 0x258
 8009826:	801a      	strh	r2, [r3, #0]
					goal_x = GOAL_X;
 8009828:	4b35      	ldr	r3, [pc, #212]	; (8009900 <slalom_run+0x2d0>)
 800982a:	2209      	movs	r2, #9
 800982c:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800982e:	4b35      	ldr	r3, [pc, #212]	; (8009904 <slalom_run+0x2d4>)
 8009830:	2206      	movs	r2, #6
 8009832:	701a      	strb	r2, [r3, #0]

					get_base();
 8009834:	f006 fa84 	bl	800fd40 <get_base>

					searchD();
 8009838:	f003 fdd2 	bl	800d3e0 <searchD>
					HAL_Delay(2000);
 800983c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8009840:	f7f7 fbec 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 8009844:	4b2f      	ldr	r3, [pc, #188]	; (8009904 <slalom_run+0x2d4>)
 8009846:	2200      	movs	r2, #0
 8009848:	701a      	strb	r2, [r3, #0]
 800984a:	4b2e      	ldr	r3, [pc, #184]	; (8009904 <slalom_run+0x2d4>)
 800984c:	781a      	ldrb	r2, [r3, #0]
 800984e:	4b2c      	ldr	r3, [pc, #176]	; (8009900 <slalom_run+0x2d0>)
 8009850:	701a      	strb	r2, [r3, #0]
					searchD();
 8009852:	f003 fdc5 	bl	800d3e0 <searchD>

					goal_x = GOAL_X;
 8009856:	4b2a      	ldr	r3, [pc, #168]	; (8009900 <slalom_run+0x2d0>)
 8009858:	2209      	movs	r2, #9
 800985a:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800985c:	4b29      	ldr	r3, [pc, #164]	; (8009904 <slalom_run+0x2d4>)
 800985e:	2206      	movs	r2, #6
 8009860:	701a      	strb	r2, [r3, #0]
					break;
 8009862:	e147      	b.n	8009af4 <slalom_run+0x4c4>

				case 3:
					//----二次探索スラローム走行+既知区間加速----
					printf("Second Run. (Slalom+accel)\n");
 8009864:	4829      	ldr	r0, [pc, #164]	; (800990c <slalom_run+0x2dc>)
 8009866:	f007 f905 	bl	8010a74 <puts>

					MF.FLAG.SCND = 1;
 800986a:	4a20      	ldr	r2, [pc, #128]	; (80098ec <slalom_run+0x2bc>)
 800986c:	8813      	ldrh	r3, [r2, #0]
 800986e:	f043 0320 	orr.w	r3, r3, #32
 8009872:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 8009874:	4a1d      	ldr	r2, [pc, #116]	; (80098ec <slalom_run+0x2bc>)
 8009876:	8813      	ldrh	r3, [r2, #0]
 8009878:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800987c:	8013      	strh	r3, [r2, #0]
					run_mode = LOW;
 800987e:	4b1c      	ldr	r3, [pc, #112]	; (80098f0 <slalom_run+0x2c0>)
 8009880:	2201      	movs	r2, #1
 8009882:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 8009884:	4b1b      	ldr	r3, [pc, #108]	; (80098f4 <slalom_run+0x2c4>)
 8009886:	2200      	movs	r2, #0
 8009888:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 800988a:	4b1b      	ldr	r3, [pc, #108]	; (80098f8 <slalom_run+0x2c8>)
 800988c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009890:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1000;
 8009892:	4b1a      	ldr	r3, [pc, #104]	; (80098fc <slalom_run+0x2cc>)
 8009894:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009898:	801a      	strh	r2, [r3, #0]
					goal_x = GOAL_X;
 800989a:	4b19      	ldr	r3, [pc, #100]	; (8009900 <slalom_run+0x2d0>)
 800989c:	2209      	movs	r2, #9
 800989e:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 80098a0:	4b18      	ldr	r3, [pc, #96]	; (8009904 <slalom_run+0x2d4>)
 80098a2:	2206      	movs	r2, #6
 80098a4:	701a      	strb	r2, [r3, #0]

					get_base();
 80098a6:	f006 fa4b 	bl	800fd40 <get_base>

					searchD();
 80098aa:	f003 fd99 	bl	800d3e0 <searchD>
					HAL_Delay(2000);
 80098ae:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80098b2:	f7f7 fbb3 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 80098b6:	4b13      	ldr	r3, [pc, #76]	; (8009904 <slalom_run+0x2d4>)
 80098b8:	2200      	movs	r2, #0
 80098ba:	701a      	strb	r2, [r3, #0]
 80098bc:	4b11      	ldr	r3, [pc, #68]	; (8009904 <slalom_run+0x2d4>)
 80098be:	781a      	ldrb	r2, [r3, #0]
 80098c0:	4b0f      	ldr	r3, [pc, #60]	; (8009900 <slalom_run+0x2d0>)
 80098c2:	701a      	strb	r2, [r3, #0]
					searchD();
 80098c4:	f003 fd8c 	bl	800d3e0 <searchD>

					goal_x = GOAL_X;
 80098c8:	4b0d      	ldr	r3, [pc, #52]	; (8009900 <slalom_run+0x2d0>)
 80098ca:	2209      	movs	r2, #9
 80098cc:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 80098ce:	4b0d      	ldr	r3, [pc, #52]	; (8009904 <slalom_run+0x2d4>)
 80098d0:	2206      	movs	r2, #6
 80098d2:	701a      	strb	r2, [r3, #0]
					break;
 80098d4:	e10e      	b.n	8009af4 <slalom_run+0x4c4>
 80098d6:	bf00      	nop
 80098d8:	08011e44 	.word	0x08011e44
 80098dc:	20000aec 	.word	0x20000aec
 80098e0:	08011bc8 	.word	0x08011bc8
 80098e4:	40020000 	.word	0x40020000
 80098e8:	08011da8 	.word	0x08011da8
 80098ec:	20000f68 	.word	0x20000f68
 80098f0:	20000456 	.word	0x20000456
 80098f4:	200015c8 	.word	0x200015c8
 80098f8:	20000454 	.word	0x20000454
 80098fc:	20000f7c 	.word	0x20000f7c
 8009900:	20000bb0 	.word	0x20000bb0
 8009904:	20000b4c 	.word	0x20000b4c
 8009908:	08011e5c 	.word	0x08011e5c
 800990c:	08011e74 	.word	0x08011e74

				case 4:
					//----二次探索スラローム走行+既知区間加速----
					printf("Second Run. (Slalom+accel)\n");
 8009910:	4879      	ldr	r0, [pc, #484]	; (8009af8 <slalom_run+0x4c8>)
 8009912:	f007 f8af 	bl	8010a74 <puts>

					MF.FLAG.SCND = 1;
 8009916:	4a79      	ldr	r2, [pc, #484]	; (8009afc <slalom_run+0x4cc>)
 8009918:	8813      	ldrh	r3, [r2, #0]
 800991a:	f043 0320 	orr.w	r3, r3, #32
 800991e:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 8009920:	4a76      	ldr	r2, [pc, #472]	; (8009afc <slalom_run+0x4cc>)
 8009922:	8813      	ldrh	r3, [r2, #0]
 8009924:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009928:	8013      	strh	r3, [r2, #0]
					run_mode = LOW;
 800992a:	4b75      	ldr	r3, [pc, #468]	; (8009b00 <slalom_run+0x4d0>)
 800992c:	2201      	movs	r2, #1
 800992e:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 8009930:	4b74      	ldr	r3, [pc, #464]	; (8009b04 <slalom_run+0x4d4>)
 8009932:	2200      	movs	r2, #0
 8009934:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 8009936:	4b74      	ldr	r3, [pc, #464]	; (8009b08 <slalom_run+0x4d8>)
 8009938:	f241 3288 	movw	r2, #5000	; 0x1388
 800993c:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1500;
 800993e:	4b73      	ldr	r3, [pc, #460]	; (8009b0c <slalom_run+0x4dc>)
 8009940:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8009944:	801a      	strh	r2, [r3, #0]
					goal_x = GOAL_X;
 8009946:	4b72      	ldr	r3, [pc, #456]	; (8009b10 <slalom_run+0x4e0>)
 8009948:	2209      	movs	r2, #9
 800994a:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800994c:	4b71      	ldr	r3, [pc, #452]	; (8009b14 <slalom_run+0x4e4>)
 800994e:	2206      	movs	r2, #6
 8009950:	701a      	strb	r2, [r3, #0]

					get_base();
 8009952:	f006 f9f5 	bl	800fd40 <get_base>

					searchD();
 8009956:	f003 fd43 	bl	800d3e0 <searchD>
					HAL_Delay(2000);
 800995a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800995e:	f7f7 fb5d 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 8009962:	4b6c      	ldr	r3, [pc, #432]	; (8009b14 <slalom_run+0x4e4>)
 8009964:	2200      	movs	r2, #0
 8009966:	701a      	strb	r2, [r3, #0]
 8009968:	4b6a      	ldr	r3, [pc, #424]	; (8009b14 <slalom_run+0x4e4>)
 800996a:	781a      	ldrb	r2, [r3, #0]
 800996c:	4b68      	ldr	r3, [pc, #416]	; (8009b10 <slalom_run+0x4e0>)
 800996e:	701a      	strb	r2, [r3, #0]
					searchD();
 8009970:	f003 fd36 	bl	800d3e0 <searchD>

					goal_x = GOAL_X;
 8009974:	4b66      	ldr	r3, [pc, #408]	; (8009b10 <slalom_run+0x4e0>)
 8009976:	2209      	movs	r2, #9
 8009978:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800997a:	4b66      	ldr	r3, [pc, #408]	; (8009b14 <slalom_run+0x4e4>)
 800997c:	2206      	movs	r2, #6
 800997e:	701a      	strb	r2, [r3, #0]
					break;
 8009980:	e0b8      	b.n	8009af4 <slalom_run+0x4c4>

				case 5:
					//----二次走行スラローム+直線優先----
					printf("High Speed Run. (Slalom)\n");
 8009982:	4865      	ldr	r0, [pc, #404]	; (8009b18 <slalom_run+0x4e8>)
 8009984:	f007 f876 	bl	8010a74 <puts>

					MF.FLAG.SCND = 1;
 8009988:	4a5c      	ldr	r2, [pc, #368]	; (8009afc <slalom_run+0x4cc>)
 800998a:	8813      	ldrh	r3, [r2, #0]
 800998c:	f043 0320 	orr.w	r3, r3, #32
 8009990:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 8009992:	4a5a      	ldr	r2, [pc, #360]	; (8009afc <slalom_run+0x4cc>)
 8009994:	8813      	ldrh	r3, [r2, #0]
 8009996:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800999a:	8013      	strh	r3, [r2, #0]
					run_mode = LOW;
 800999c:	4b58      	ldr	r3, [pc, #352]	; (8009b00 <slalom_run+0x4d0>)
 800999e:	2201      	movs	r2, #1
 80099a0:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 80099a2:	4b58      	ldr	r3, [pc, #352]	; (8009b04 <slalom_run+0x4d4>)
 80099a4:	2200      	movs	r2, #0
 80099a6:	701a      	strb	r2, [r3, #0]
					goal_x = GOAL_X;
 80099a8:	4b59      	ldr	r3, [pc, #356]	; (8009b10 <slalom_run+0x4e0>)
 80099aa:	2209      	movs	r2, #9
 80099ac:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 80099ae:	4b59      	ldr	r3, [pc, #356]	; (8009b14 <slalom_run+0x4e4>)
 80099b0:	2206      	movs	r2, #6
 80099b2:	701a      	strb	r2, [r3, #0]

					get_base();
 80099b4:	f006 f9c4 	bl	800fd40 <get_base>

					HAL_Delay(5000);
 80099b8:	f241 3088 	movw	r0, #5000	; 0x1388
 80099bc:	f7f7 fb2e 	bl	800101c <HAL_Delay>
					searchC();
 80099c0:	f003 fbdc 	bl	800d17c <searchC>
					HAL_Delay(2000);
 80099c4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80099c8:	f7f7 fb28 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 80099cc:	4b51      	ldr	r3, [pc, #324]	; (8009b14 <slalom_run+0x4e4>)
 80099ce:	2200      	movs	r2, #0
 80099d0:	701a      	strb	r2, [r3, #0]
 80099d2:	4b50      	ldr	r3, [pc, #320]	; (8009b14 <slalom_run+0x4e4>)
 80099d4:	781a      	ldrb	r2, [r3, #0]
 80099d6:	4b4e      	ldr	r3, [pc, #312]	; (8009b10 <slalom_run+0x4e0>)
 80099d8:	701a      	strb	r2, [r3, #0]
					searchC();
 80099da:	f003 fbcf 	bl	800d17c <searchC>

					goal_x = GOAL_X;
 80099de:	4b4c      	ldr	r3, [pc, #304]	; (8009b10 <slalom_run+0x4e0>)
 80099e0:	2209      	movs	r2, #9
 80099e2:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 80099e4:	4b4b      	ldr	r3, [pc, #300]	; (8009b14 <slalom_run+0x4e4>)
 80099e6:	2206      	movs	r2, #6
 80099e8:	701a      	strb	r2, [r3, #0]
					break;
 80099ea:	e083      	b.n	8009af4 <slalom_run+0x4c4>

				case 6:
					//----二次走行スラロームHigh Speed+直線優先+既知区間加速----
					printf("High Speed Run. (Slalom)\n");
 80099ec:	484a      	ldr	r0, [pc, #296]	; (8009b18 <slalom_run+0x4e8>)
 80099ee:	f007 f841 	bl	8010a74 <puts>

					MF.FLAG.SCND = 1;
 80099f2:	4a42      	ldr	r2, [pc, #264]	; (8009afc <slalom_run+0x4cc>)
 80099f4:	8813      	ldrh	r3, [r2, #0]
 80099f6:	f043 0320 	orr.w	r3, r3, #32
 80099fa:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 80099fc:	4a3f      	ldr	r2, [pc, #252]	; (8009afc <slalom_run+0x4cc>)
 80099fe:	8813      	ldrh	r3, [r2, #0]
 8009a00:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009a04:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 8009a06:	4a3d      	ldr	r2, [pc, #244]	; (8009afc <slalom_run+0x4cc>)
 8009a08:	8813      	ldrh	r3, [r2, #0]
 8009a0a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009a0e:	8013      	strh	r3, [r2, #0]
					run_mode = HIGH;
 8009a10:	4b3b      	ldr	r3, [pc, #236]	; (8009b00 <slalom_run+0x4d0>)
 8009a12:	2203      	movs	r2, #3
 8009a14:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 8009a16:	4b3b      	ldr	r3, [pc, #236]	; (8009b04 <slalom_run+0x4d4>)
 8009a18:	2200      	movs	r2, #0
 8009a1a:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 8009a1c:	4b3a      	ldr	r3, [pc, #232]	; (8009b08 <slalom_run+0x4d8>)
 8009a1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8009a22:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1200;
 8009a24:	4b39      	ldr	r3, [pc, #228]	; (8009b0c <slalom_run+0x4dc>)
 8009a26:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8009a2a:	801a      	strh	r2, [r3, #0]
					goal_x = GOAL_X;
 8009a2c:	4b38      	ldr	r3, [pc, #224]	; (8009b10 <slalom_run+0x4e0>)
 8009a2e:	2209      	movs	r2, #9
 8009a30:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 8009a32:	4b38      	ldr	r3, [pc, #224]	; (8009b14 <slalom_run+0x4e4>)
 8009a34:	2206      	movs	r2, #6
 8009a36:	701a      	strb	r2, [r3, #0]

					get_base();
 8009a38:	f006 f982 	bl	800fd40 <get_base>

					HAL_Delay(5000);
 8009a3c:	f241 3088 	movw	r0, #5000	; 0x1388
 8009a40:	f7f7 faec 	bl	800101c <HAL_Delay>
//					searchD2();
					searchD();
 8009a44:	f003 fccc 	bl	800d3e0 <searchD>
					HAL_Delay(2000);
 8009a48:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8009a4c:	f7f7 fae6 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 8009a50:	4b30      	ldr	r3, [pc, #192]	; (8009b14 <slalom_run+0x4e4>)
 8009a52:	2200      	movs	r2, #0
 8009a54:	701a      	strb	r2, [r3, #0]
 8009a56:	4b2f      	ldr	r3, [pc, #188]	; (8009b14 <slalom_run+0x4e4>)
 8009a58:	781a      	ldrb	r2, [r3, #0]
 8009a5a:	4b2d      	ldr	r3, [pc, #180]	; (8009b10 <slalom_run+0x4e0>)
 8009a5c:	701a      	strb	r2, [r3, #0]
//					searchD2();
					searchD();
 8009a5e:	f003 fcbf 	bl	800d3e0 <searchD>

					goal_x = GOAL_X;
 8009a62:	4b2b      	ldr	r3, [pc, #172]	; (8009b10 <slalom_run+0x4e0>)
 8009a64:	2209      	movs	r2, #9
 8009a66:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 8009a68:	4b2a      	ldr	r3, [pc, #168]	; (8009b14 <slalom_run+0x4e4>)
 8009a6a:	2206      	movs	r2, #6
 8009a6c:	701a      	strb	r2, [r3, #0]
					break;
 8009a6e:	e041      	b.n	8009af4 <slalom_run+0x4c4>

				case 7:
					//----二次走行スラロームHigh Speed+直線優先+既知区間加速----
					printf("High Speed Run. (Slalom)\n");
 8009a70:	4829      	ldr	r0, [pc, #164]	; (8009b18 <slalom_run+0x4e8>)
 8009a72:	f006 ffff 	bl	8010a74 <puts>

					MF.FLAG.SCND = 1;
 8009a76:	4a21      	ldr	r2, [pc, #132]	; (8009afc <slalom_run+0x4cc>)
 8009a78:	8813      	ldrh	r3, [r2, #0]
 8009a7a:	f043 0320 	orr.w	r3, r3, #32
 8009a7e:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 8009a80:	4a1e      	ldr	r2, [pc, #120]	; (8009afc <slalom_run+0x4cc>)
 8009a82:	8813      	ldrh	r3, [r2, #0]
 8009a84:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009a88:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 8009a8a:	4a1c      	ldr	r2, [pc, #112]	; (8009afc <slalom_run+0x4cc>)
 8009a8c:	8813      	ldrh	r3, [r2, #0]
 8009a8e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009a92:	8013      	strh	r3, [r2, #0]
					run_mode = HIGH;
 8009a94:	4b1a      	ldr	r3, [pc, #104]	; (8009b00 <slalom_run+0x4d0>)
 8009a96:	2203      	movs	r2, #3
 8009a98:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 8009a9a:	4b1a      	ldr	r3, [pc, #104]	; (8009b04 <slalom_run+0x4d4>)
 8009a9c:	2200      	movs	r2, #0
 8009a9e:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 8009aa0:	4b19      	ldr	r3, [pc, #100]	; (8009b08 <slalom_run+0x4d8>)
 8009aa2:	f241 3288 	movw	r2, #5000	; 0x1388
 8009aa6:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1600;
 8009aa8:	4b18      	ldr	r3, [pc, #96]	; (8009b0c <slalom_run+0x4dc>)
 8009aaa:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8009aae:	801a      	strh	r2, [r3, #0]
					goal_x = GOAL_X;
 8009ab0:	4b17      	ldr	r3, [pc, #92]	; (8009b10 <slalom_run+0x4e0>)
 8009ab2:	2209      	movs	r2, #9
 8009ab4:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 8009ab6:	4b17      	ldr	r3, [pc, #92]	; (8009b14 <slalom_run+0x4e4>)
 8009ab8:	2206      	movs	r2, #6
 8009aba:	701a      	strb	r2, [r3, #0]

					get_base();
 8009abc:	f006 f940 	bl	800fd40 <get_base>

					HAL_Delay(5000);
 8009ac0:	f241 3088 	movw	r0, #5000	; 0x1388
 8009ac4:	f7f7 faaa 	bl	800101c <HAL_Delay>
//					searchD2();
					searchD();
 8009ac8:	f003 fc8a 	bl	800d3e0 <searchD>
					HAL_Delay(2000);
 8009acc:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8009ad0:	f7f7 faa4 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 8009ad4:	4b0f      	ldr	r3, [pc, #60]	; (8009b14 <slalom_run+0x4e4>)
 8009ad6:	2200      	movs	r2, #0
 8009ad8:	701a      	strb	r2, [r3, #0]
 8009ada:	4b0e      	ldr	r3, [pc, #56]	; (8009b14 <slalom_run+0x4e4>)
 8009adc:	781a      	ldrb	r2, [r3, #0]
 8009ade:	4b0c      	ldr	r3, [pc, #48]	; (8009b10 <slalom_run+0x4e0>)
 8009ae0:	701a      	strb	r2, [r3, #0]
//					searchD2();
					searchD();
 8009ae2:	f003 fc7d 	bl	800d3e0 <searchD>

					goal_x = GOAL_X;
 8009ae6:	4b0a      	ldr	r3, [pc, #40]	; (8009b10 <slalom_run+0x4e0>)
 8009ae8:	2209      	movs	r2, #9
 8009aea:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 8009aec:	4b09      	ldr	r3, [pc, #36]	; (8009b14 <slalom_run+0x4e4>)
 8009aee:	2206      	movs	r2, #6
 8009af0:	701a      	strb	r2, [r3, #0]
					break;
 8009af2:	bf00      	nop
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 8009af4:	e5a5      	b.n	8009642 <slalom_run+0x12>
 8009af6:	bf00      	nop
 8009af8:	08011e74 	.word	0x08011e74
 8009afc:	20000f68 	.word	0x20000f68
 8009b00:	20000456 	.word	0x20000456
 8009b04:	200015c8 	.word	0x200015c8
 8009b08:	20000454 	.word	0x20000454
 8009b0c:	20000f7c 	.word	0x20000f7c
 8009b10:	20000bb0 	.word	0x20000bb0
 8009b14:	20000b4c 	.word	0x20000b4c
 8009b18:	08011e90 	.word	0x08011e90

08009b1c <sample_course_run>:
//sample_course_run
// 試験走行モード
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void sample_course_run(void){
 8009b1c:	b580      	push	{r7, lr}
 8009b1e:	b082      	sub	sp, #8
 8009b20:	af00      	add	r7, sp, #0

	int mode = 0;
 8009b22:	2300      	movs	r3, #0
 8009b24:	607b      	str	r3, [r7, #4]
	printf("Sample Course Run, Mode : %d\n", mode);
 8009b26:	6879      	ldr	r1, [r7, #4]
 8009b28:	488f      	ldr	r0, [pc, #572]	; (8009d68 <sample_course_run+0x24c>)
 8009b2a:	f006 ff2f 	bl	801098c <iprintf>

	while(1){
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	b2db      	uxtb	r3, r3
 8009b32:	f003 0301 	and.w	r3, r3, #1
 8009b36:	b2d8      	uxtb	r0, r3
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	b2db      	uxtb	r3, r3
 8009b3c:	f003 0302 	and.w	r3, r3, #2
 8009b40:	b2d9      	uxtb	r1, r3
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	b2db      	uxtb	r3, r3
 8009b46:	f003 0304 	and.w	r3, r3, #4
 8009b4a:	b2db      	uxtb	r3, r3
 8009b4c:	461a      	mov	r2, r3
 8009b4e:	f006 f94f 	bl	800fdf0 <led_write>
		  if(dist_r >= 20){
 8009b52:	4b86      	ldr	r3, [pc, #536]	; (8009d6c <sample_course_run+0x250>)
 8009b54:	edd3 7a00 	vldr	s15, [r3]
 8009b58:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8009b5c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009b60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009b64:	db0f      	blt.n	8009b86 <sample_course_run+0x6a>
			  mode++;
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	3301      	adds	r3, #1
 8009b6a:	607b      	str	r3, [r7, #4]
			  dist_r = 0;
 8009b6c:	4b7f      	ldr	r3, [pc, #508]	; (8009d6c <sample_course_run+0x250>)
 8009b6e:	f04f 0200 	mov.w	r2, #0
 8009b72:	601a      	str	r2, [r3, #0]
			  if(mode > 7){
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	2b07      	cmp	r3, #7
 8009b78:	dd01      	ble.n	8009b7e <sample_course_run+0x62>
				  mode = 0;
 8009b7a:	2300      	movs	r3, #0
 8009b7c:	607b      	str	r3, [r7, #4]
			  }
			  printf("Mode : %d\n", mode);
 8009b7e:	6879      	ldr	r1, [r7, #4]
 8009b80:	487b      	ldr	r0, [pc, #492]	; (8009d70 <sample_course_run+0x254>)
 8009b82:	f006 ff03 	bl	801098c <iprintf>
			  //buzzer(pitagola2[mode-1][0], pitagola2[mode-1][1]);
			  //buzzer(pitagola[2][0], pitagola[2][1]);
		  }
		  if(dist_r <= -20){
 8009b86:	4b79      	ldr	r3, [pc, #484]	; (8009d6c <sample_course_run+0x250>)
 8009b88:	edd3 7a00 	vldr	s15, [r3]
 8009b8c:	eebb 7a04 	vmov.f32	s14, #180	; 0xc1a00000 -20.0
 8009b90:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009b94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009b98:	d80f      	bhi.n	8009bba <sample_course_run+0x9e>
			  mode--;
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	3b01      	subs	r3, #1
 8009b9e:	607b      	str	r3, [r7, #4]
			  dist_r = 0;
 8009ba0:	4b72      	ldr	r3, [pc, #456]	; (8009d6c <sample_course_run+0x250>)
 8009ba2:	f04f 0200 	mov.w	r2, #0
 8009ba6:	601a      	str	r2, [r3, #0]
			  if(mode < 0){
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	da01      	bge.n	8009bb2 <sample_course_run+0x96>
				  mode = 7;
 8009bae:	2307      	movs	r3, #7
 8009bb0:	607b      	str	r3, [r7, #4]
			  }
			  printf("Mode : %d\n", mode);
 8009bb2:	6879      	ldr	r1, [r7, #4]
 8009bb4:	486e      	ldr	r0, [pc, #440]	; (8009d70 <sample_course_run+0x254>)
 8009bb6:	f006 fee9 	bl	801098c <iprintf>
			  //buzzer(pitagola2[mode-1][0], pitagola2[mode-1][1]);
			  //buzzer(pitagola[2][0], pitagola[2][1]);
		  }
		  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET){
 8009bba:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8009bbe:	486d      	ldr	r0, [pc, #436]	; (8009d74 <sample_course_run+0x258>)
 8009bc0:	f7f8 fb88 	bl	80022d4 <HAL_GPIO_ReadPin>
 8009bc4:	4603      	mov	r3, r0
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d1b1      	bne.n	8009b2e <sample_course_run+0x12>
			  HAL_Delay(50);
 8009bca:	2032      	movs	r0, #50	; 0x32
 8009bcc:	f7f7 fa26 	bl	800101c <HAL_Delay>
			  while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET);
 8009bd0:	bf00      	nop
 8009bd2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8009bd6:	4867      	ldr	r0, [pc, #412]	; (8009d74 <sample_course_run+0x258>)
 8009bd8:	f7f8 fb7c 	bl	80022d4 <HAL_GPIO_ReadPin>
 8009bdc:	4603      	mov	r3, r0
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d0f7      	beq.n	8009bd2 <sample_course_run+0xb6>
			  drive_ready();
 8009be2:	f7fb f84d 	bl	8004c80 <drive_ready>

			  switch(mode){
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	2b07      	cmp	r3, #7
 8009bea:	d8a0      	bhi.n	8009b2e <sample_course_run+0x12>
 8009bec:	a201      	add	r2, pc, #4	; (adr r2, 8009bf4 <sample_course_run+0xd8>)
 8009bee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bf2:	bf00      	nop
 8009bf4:	08009c15 	.word	0x08009c15
 8009bf8:	08009c1b 	.word	0x08009c1b
 8009bfc:	08009c3d 	.word	0x08009c3d
 8009c00:	08009c5f 	.word	0x08009c5f
 8009c04:	08009b2f 	.word	0x08009b2f
 8009c08:	08009c71 	.word	0x08009c71
 8009c0c:	08009ceb 	.word	0x08009ceb
 8009c10:	08009b2f 	.word	0x08009b2f
				case 0:
					get_base();
 8009c14:	f006 f894 	bl	800fd40 <get_base>
					break;
 8009c18:	e0a4      	b.n	8009d64 <sample_course_run+0x248>

				case 1:
					//----サンプルコース1　超信地----
					half_sectionA();
 8009c1a:	f7fb ff37 	bl	8005a8c <half_sectionA>
					half_sectionD();
 8009c1e:	f7fb ff7f 	bl	8005b20 <half_sectionD>
					rotate_R90();
 8009c22:	f7fc f99d 	bl	8005f60 <rotate_R90>
					half_sectionA();
 8009c26:	f7fb ff31 	bl	8005a8c <half_sectionA>
					half_sectionD();
 8009c2a:	f7fb ff79 	bl	8005b20 <half_sectionD>
					rotate_R90();
 8009c2e:	f7fc f997 	bl	8005f60 <rotate_R90>
					half_sectionA();
 8009c32:	f7fb ff2b 	bl	8005a8c <half_sectionA>
					half_sectionD();
 8009c36:	f7fb ff73 	bl	8005b20 <half_sectionD>
					break;
 8009c3a:	e093      	b.n	8009d64 <sample_course_run+0x248>

				case 2:
					//----サンプルコース1　超信地----
					half_sectionA();
 8009c3c:	f7fb ff26 	bl	8005a8c <half_sectionA>
					half_sectionD();
 8009c40:	f7fb ff6e 	bl	8005b20 <half_sectionD>
					rotate_L90();
 8009c44:	f7fc fa68 	bl	8006118 <rotate_L90>
					half_sectionA();
 8009c48:	f7fb ff20 	bl	8005a8c <half_sectionA>
					half_sectionD();
 8009c4c:	f7fb ff68 	bl	8005b20 <half_sectionD>
					rotate_L90();
 8009c50:	f7fc fa62 	bl	8006118 <rotate_L90>
					half_sectionA();
 8009c54:	f7fb ff1a 	bl	8005a8c <half_sectionA>
					half_sectionD();
 8009c58:	f7fb ff62 	bl	8005b20 <half_sectionD>
					break;
 8009c5c:	e082      	b.n	8009d64 <sample_course_run+0x248>

				case 3:
					//---サンプルコース2　スラローム----
					half_sectionA();
 8009c5e:	f7fb ff15 	bl	8005a8c <half_sectionA>
					slalom_R90();
 8009c62:	f7fc fc0d 	bl	8006480 <slalom_R90>
					slalom_R90();
 8009c66:	f7fc fc0b 	bl	8006480 <slalom_R90>
					half_sectionD();
 8009c6a:	f7fb ff59 	bl	8005b20 <half_sectionD>
					break;
 8009c6e:	e079      	b.n	8009d64 <sample_course_run+0x248>
					goal_y = GOAL_Y;
*/					break;

				case 5:
					//----スラローム走行&全面探索スラローム走行----
					printf("Slalom Run & All Map Run.\n");
 8009c70:	4841      	ldr	r0, [pc, #260]	; (8009d78 <sample_course_run+0x25c>)
 8009c72:	f006 feff 	bl	8010a74 <puts>

					MF.FLAG.SCND = 0;
 8009c76:	4a41      	ldr	r2, [pc, #260]	; (8009d7c <sample_course_run+0x260>)
 8009c78:	8813      	ldrh	r3, [r2, #0]
 8009c7a:	f36f 1345 	bfc	r3, #5, #1
 8009c7e:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 8009c80:	4a3e      	ldr	r2, [pc, #248]	; (8009d7c <sample_course_run+0x260>)
 8009c82:	8813      	ldrh	r3, [r2, #0]
 8009c84:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009c88:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 8009c8a:	4a3c      	ldr	r2, [pc, #240]	; (8009d7c <sample_course_run+0x260>)
 8009c8c:	8813      	ldrh	r3, [r2, #0]
 8009c8e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009c92:	8013      	strh	r3, [r2, #0]
					start_mode = 0;
 8009c94:	4b3a      	ldr	r3, [pc, #232]	; (8009d80 <sample_course_run+0x264>)
 8009c96:	2200      	movs	r2, #0
 8009c98:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 8009c9a:	4b3a      	ldr	r3, [pc, #232]	; (8009d84 <sample_course_run+0x268>)
 8009c9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009ca0:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 800;
 8009ca2:	4b39      	ldr	r3, [pc, #228]	; (8009d88 <sample_course_run+0x26c>)
 8009ca4:	f44f 7248 	mov.w	r2, #800	; 0x320
 8009ca8:	801a      	strh	r2, [r3, #0]

					goal_x = GOAL_X;
 8009caa:	4b38      	ldr	r3, [pc, #224]	; (8009d8c <sample_course_run+0x270>)
 8009cac:	2209      	movs	r2, #9
 8009cae:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 8009cb0:	4b37      	ldr	r3, [pc, #220]	; (8009d90 <sample_course_run+0x274>)
 8009cb2:	2206      	movs	r2, #6
 8009cb4:	701a      	strb	r2, [r3, #0]

					get_base();
 8009cb6:	f006 f843 	bl	800fd40 <get_base>

					searchC();
 8009cba:	f003 fa5f 	bl	800d17c <searchC>
					HAL_Delay(2000);
 8009cbe:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8009cc2:	f7f7 f9ab 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 8009cc6:	4b32      	ldr	r3, [pc, #200]	; (8009d90 <sample_course_run+0x274>)
 8009cc8:	2200      	movs	r2, #0
 8009cca:	701a      	strb	r2, [r3, #0]
 8009ccc:	4b30      	ldr	r3, [pc, #192]	; (8009d90 <sample_course_run+0x274>)
 8009cce:	781a      	ldrb	r2, [r3, #0]
 8009cd0:	4b2e      	ldr	r3, [pc, #184]	; (8009d8c <sample_course_run+0x270>)
 8009cd2:	701a      	strb	r2, [r3, #0]
					searchE();
 8009cd4:	f003 fc92 	bl	800d5fc <searchE>

					searchC();
 8009cd8:	f003 fa50 	bl	800d17c <searchC>
					goal_x = GOAL_X;
 8009cdc:	4b2b      	ldr	r3, [pc, #172]	; (8009d8c <sample_course_run+0x270>)
 8009cde:	2209      	movs	r2, #9
 8009ce0:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 8009ce2:	4b2b      	ldr	r3, [pc, #172]	; (8009d90 <sample_course_run+0x274>)
 8009ce4:	2206      	movs	r2, #6
 8009ce6:	701a      	strb	r2, [r3, #0]

					break;
 8009ce8:	e03c      	b.n	8009d64 <sample_course_run+0x248>

				case 6:
					//----スラローム走行&全面探索スラローム走行----
					printf("Slalom Run & All Map Run.\n");
 8009cea:	4823      	ldr	r0, [pc, #140]	; (8009d78 <sample_course_run+0x25c>)
 8009cec:	f006 fec2 	bl	8010a74 <puts>

					MF.FLAG.SCND = 0;
 8009cf0:	4a22      	ldr	r2, [pc, #136]	; (8009d7c <sample_course_run+0x260>)
 8009cf2:	8813      	ldrh	r3, [r2, #0]
 8009cf4:	f36f 1345 	bfc	r3, #5, #1
 8009cf8:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 8009cfa:	4a20      	ldr	r2, [pc, #128]	; (8009d7c <sample_course_run+0x260>)
 8009cfc:	8813      	ldrh	r3, [r2, #0]
 8009cfe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009d02:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 8009d04:	4a1d      	ldr	r2, [pc, #116]	; (8009d7c <sample_course_run+0x260>)
 8009d06:	8813      	ldrh	r3, [r2, #0]
 8009d08:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009d0c:	8013      	strh	r3, [r2, #0]
					start_mode = 0;
 8009d0e:	4b1c      	ldr	r3, [pc, #112]	; (8009d80 <sample_course_run+0x264>)
 8009d10:	2200      	movs	r2, #0
 8009d12:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 8009d14:	4b1b      	ldr	r3, [pc, #108]	; (8009d84 <sample_course_run+0x268>)
 8009d16:	f241 3288 	movw	r2, #5000	; 0x1388
 8009d1a:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 800;
 8009d1c:	4b1a      	ldr	r3, [pc, #104]	; (8009d88 <sample_course_run+0x26c>)
 8009d1e:	f44f 7248 	mov.w	r2, #800	; 0x320
 8009d22:	801a      	strh	r2, [r3, #0]
					goal_x = 7;
 8009d24:	4b19      	ldr	r3, [pc, #100]	; (8009d8c <sample_course_run+0x270>)
 8009d26:	2207      	movs	r2, #7
 8009d28:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 8009d2a:	4b19      	ldr	r3, [pc, #100]	; (8009d90 <sample_course_run+0x274>)
 8009d2c:	2207      	movs	r2, #7
 8009d2e:	701a      	strb	r2, [r3, #0]

					get_base();
 8009d30:	f006 f806 	bl	800fd40 <get_base>

					searchC();
 8009d34:	f003 fa22 	bl	800d17c <searchC>
					HAL_Delay(2000);
 8009d38:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8009d3c:	f7f7 f96e 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 8009d40:	4b13      	ldr	r3, [pc, #76]	; (8009d90 <sample_course_run+0x274>)
 8009d42:	2200      	movs	r2, #0
 8009d44:	701a      	strb	r2, [r3, #0]
 8009d46:	4b12      	ldr	r3, [pc, #72]	; (8009d90 <sample_course_run+0x274>)
 8009d48:	781a      	ldrb	r2, [r3, #0]
 8009d4a:	4b10      	ldr	r3, [pc, #64]	; (8009d8c <sample_course_run+0x270>)
 8009d4c:	701a      	strb	r2, [r3, #0]
					searchE();
 8009d4e:	f003 fc55 	bl	800d5fc <searchE>

					searchC();
 8009d52:	f003 fa13 	bl	800d17c <searchC>
					goal_x = 7;
 8009d56:	4b0d      	ldr	r3, [pc, #52]	; (8009d8c <sample_course_run+0x270>)
 8009d58:	2207      	movs	r2, #7
 8009d5a:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 8009d5c:	4b0c      	ldr	r3, [pc, #48]	; (8009d90 <sample_course_run+0x274>)
 8009d5e:	2207      	movs	r2, #7
 8009d60:	701a      	strb	r2, [r3, #0]

					break;
 8009d62:	bf00      	nop
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 8009d64:	e6e3      	b.n	8009b2e <sample_course_run+0x12>
 8009d66:	bf00      	nop
 8009d68:	08011eac 	.word	0x08011eac
 8009d6c:	20000aec 	.word	0x20000aec
 8009d70:	08011bc8 	.word	0x08011bc8
 8009d74:	40020000 	.word	0x40020000
 8009d78:	08011ecc 	.word	0x08011ecc
 8009d7c:	20000f68 	.word	0x20000f68
 8009d80:	200015c8 	.word	0x200015c8
 8009d84:	20000454 	.word	0x20000454
 8009d88:	20000f7c 	.word	0x20000f7c
 8009d8c:	20000bb0 	.word	0x20000bb0
 8009d90:	20000b4c 	.word	0x20000b4c

08009d94 <perfect_slalom>:
//perfect_slalom
// 本番用スラローム走行モード
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void perfect_slalom(void){
 8009d94:	b580      	push	{r7, lr}
 8009d96:	b082      	sub	sp, #8
 8009d98:	af00      	add	r7, sp, #0

	int mode = 0;
 8009d9a:	2300      	movs	r3, #0
 8009d9c:	607b      	str	r3, [r7, #4]
	printf("Perfect Slalom, Mode : %d\n", mode);
 8009d9e:	6879      	ldr	r1, [r7, #4]
 8009da0:	48b2      	ldr	r0, [pc, #712]	; (800a06c <perfect_slalom+0x2d8>)
 8009da2:	f006 fdf3 	bl	801098c <iprintf>

	while(1){
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	b2db      	uxtb	r3, r3
 8009daa:	f003 0301 	and.w	r3, r3, #1
 8009dae:	b2d8      	uxtb	r0, r3
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	b2db      	uxtb	r3, r3
 8009db4:	f003 0302 	and.w	r3, r3, #2
 8009db8:	b2d9      	uxtb	r1, r3
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	b2db      	uxtb	r3, r3
 8009dbe:	f003 0304 	and.w	r3, r3, #4
 8009dc2:	b2db      	uxtb	r3, r3
 8009dc4:	461a      	mov	r2, r3
 8009dc6:	f006 f813 	bl	800fdf0 <led_write>
		  if(dist_r >= 20){
 8009dca:	4ba9      	ldr	r3, [pc, #676]	; (800a070 <perfect_slalom+0x2dc>)
 8009dcc:	edd3 7a00 	vldr	s15, [r3]
 8009dd0:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8009dd4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009dd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009ddc:	db0f      	blt.n	8009dfe <perfect_slalom+0x6a>
			  mode++;
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	3301      	adds	r3, #1
 8009de2:	607b      	str	r3, [r7, #4]
			  dist_r = 0;
 8009de4:	4ba2      	ldr	r3, [pc, #648]	; (800a070 <perfect_slalom+0x2dc>)
 8009de6:	f04f 0200 	mov.w	r2, #0
 8009dea:	601a      	str	r2, [r3, #0]
			  if(mode > 7){
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	2b07      	cmp	r3, #7
 8009df0:	dd01      	ble.n	8009df6 <perfect_slalom+0x62>
				  mode = 0;
 8009df2:	2300      	movs	r3, #0
 8009df4:	607b      	str	r3, [r7, #4]
			  }
			  printf("Mode : %d\n", mode);
 8009df6:	6879      	ldr	r1, [r7, #4]
 8009df8:	489e      	ldr	r0, [pc, #632]	; (800a074 <perfect_slalom+0x2e0>)
 8009dfa:	f006 fdc7 	bl	801098c <iprintf>
/*	  		  for(int i=0; i<m_select; i++){
	  			  buzzer(mario_select[i][0], mario_select[i][1]);
	  		  }
*/		  }
		  if(dist_r <= -20){
 8009dfe:	4b9c      	ldr	r3, [pc, #624]	; (800a070 <perfect_slalom+0x2dc>)
 8009e00:	edd3 7a00 	vldr	s15, [r3]
 8009e04:	eebb 7a04 	vmov.f32	s14, #180	; 0xc1a00000 -20.0
 8009e08:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009e0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009e10:	d80f      	bhi.n	8009e32 <perfect_slalom+0x9e>
			  mode--;
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	3b01      	subs	r3, #1
 8009e16:	607b      	str	r3, [r7, #4]
			  dist_r = 0;
 8009e18:	4b95      	ldr	r3, [pc, #596]	; (800a070 <perfect_slalom+0x2dc>)
 8009e1a:	f04f 0200 	mov.w	r2, #0
 8009e1e:	601a      	str	r2, [r3, #0]
			  if(mode < 0){
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	da01      	bge.n	8009e2a <perfect_slalom+0x96>
				  mode = 7;
 8009e26:	2307      	movs	r3, #7
 8009e28:	607b      	str	r3, [r7, #4]
			  }
			  printf("Mode : %d\n", mode);
 8009e2a:	6879      	ldr	r1, [r7, #4]
 8009e2c:	4891      	ldr	r0, [pc, #580]	; (800a074 <perfect_slalom+0x2e0>)
 8009e2e:	f006 fdad 	bl	801098c <iprintf>
/*	  		  for(int i=0; i<m_select; i++){
	  			  buzzer(mario_select[i][0], mario_select[i][1]);
	  		  }
*/		  }
		  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET){
 8009e32:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8009e36:	4890      	ldr	r0, [pc, #576]	; (800a078 <perfect_slalom+0x2e4>)
 8009e38:	f7f8 fa4c 	bl	80022d4 <HAL_GPIO_ReadPin>
 8009e3c:	4603      	mov	r3, r0
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	d1b1      	bne.n	8009da6 <perfect_slalom+0x12>
			  HAL_Delay(50);
 8009e42:	2032      	movs	r0, #50	; 0x32
 8009e44:	f7f7 f8ea 	bl	800101c <HAL_Delay>
			  while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET);
 8009e48:	bf00      	nop
 8009e4a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8009e4e:	488a      	ldr	r0, [pc, #552]	; (800a078 <perfect_slalom+0x2e4>)
 8009e50:	f7f8 fa40 	bl	80022d4 <HAL_GPIO_ReadPin>
 8009e54:	4603      	mov	r3, r0
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	d0f7      	beq.n	8009e4a <perfect_slalom+0xb6>
/*			  for(int i=0; i<m_ok; i++){
	  			  buzzer(mario_ok[i][0], mario_ok[i][1]);
	  		  }
*/
			  drive_ready();
 8009e5a:	f7fa ff11 	bl	8004c80 <drive_ready>
/*	  		  for(int i=0; i<m_start; i++){
	  			  buzzer(mario_start[i][0], mario_start[i][1]);
	  			  full_led_write(RED);
	  		  }
*/
			  switch(mode){
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	2b07      	cmp	r3, #7
 8009e62:	d8a0      	bhi.n	8009da6 <perfect_slalom+0x12>
 8009e64:	a201      	add	r2, pc, #4	; (adr r2, 8009e6c <perfect_slalom+0xd8>)
 8009e66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e6a:	bf00      	nop
 8009e6c:	08009da7 	.word	0x08009da7
 8009e70:	08009e8d 	.word	0x08009e8d
 8009e74:	08009f09 	.word	0x08009f09
 8009e78:	08009f85 	.word	0x08009f85
 8009e7c:	08009ff1 	.word	0x08009ff1
 8009e80:	0800a0a5 	.word	0x0800a0a5
 8009e84:	0800a121 	.word	0x0800a121
 8009e88:	0800a19d 	.word	0x0800a19d
				case 0:
					break;

				case 1:
					//----a一次探索スラローム走行----
					printf("First Run.\n");
 8009e8c:	487b      	ldr	r0, [pc, #492]	; (800a07c <perfect_slalom+0x2e8>)
 8009e8e:	f006 fdf1 	bl	8010a74 <puts>
					MF.FLAG.SCND = 0;
 8009e92:	4a7b      	ldr	r2, [pc, #492]	; (800a080 <perfect_slalom+0x2ec>)
 8009e94:	8813      	ldrh	r3, [r2, #0]
 8009e96:	f36f 1345 	bfc	r3, #5, #1
 8009e9a:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 8009e9c:	4a78      	ldr	r2, [pc, #480]	; (800a080 <perfect_slalom+0x2ec>)
 8009e9e:	8813      	ldrh	r3, [r2, #0]
 8009ea0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009ea4:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 0;
 8009ea6:	4a76      	ldr	r2, [pc, #472]	; (800a080 <perfect_slalom+0x2ec>)
 8009ea8:	8813      	ldrh	r3, [r2, #0]
 8009eaa:	f36f 238a 	bfc	r3, #10, #1
 8009eae:	8013      	strh	r3, [r2, #0]
					run_mode = LOW;
 8009eb0:	4b74      	ldr	r3, [pc, #464]	; (800a084 <perfect_slalom+0x2f0>)
 8009eb2:	2201      	movs	r2, #1
 8009eb4:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 8009eb6:	4b74      	ldr	r3, [pc, #464]	; (800a088 <perfect_slalom+0x2f4>)
 8009eb8:	2200      	movs	r2, #0
 8009eba:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 8009ebc:	4b73      	ldr	r3, [pc, #460]	; (800a08c <perfect_slalom+0x2f8>)
 8009ebe:	f241 3288 	movw	r2, #5000	; 0x1388
 8009ec2:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1200;
 8009ec4:	4b72      	ldr	r3, [pc, #456]	; (800a090 <perfect_slalom+0x2fc>)
 8009ec6:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8009eca:	801a      	strh	r2, [r3, #0]

					goal_x = 7;
 8009ecc:	4b71      	ldr	r3, [pc, #452]	; (800a094 <perfect_slalom+0x300>)
 8009ece:	2207      	movs	r2, #7
 8009ed0:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 8009ed2:	4b71      	ldr	r3, [pc, #452]	; (800a098 <perfect_slalom+0x304>)
 8009ed4:	2207      	movs	r2, #7
 8009ed6:	701a      	strb	r2, [r3, #0]

					get_base();
 8009ed8:	f005 ff32 	bl	800fd40 <get_base>

					searchC();
 8009edc:	f003 f94e 	bl	800d17c <searchC>
					HAL_Delay(2000);
 8009ee0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8009ee4:	f7f7 f89a 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 8009ee8:	4b6b      	ldr	r3, [pc, #428]	; (800a098 <perfect_slalom+0x304>)
 8009eea:	2200      	movs	r2, #0
 8009eec:	701a      	strb	r2, [r3, #0]
 8009eee:	4b6a      	ldr	r3, [pc, #424]	; (800a098 <perfect_slalom+0x304>)
 8009ef0:	781a      	ldrb	r2, [r3, #0]
 8009ef2:	4b68      	ldr	r3, [pc, #416]	; (800a094 <perfect_slalom+0x300>)
 8009ef4:	701a      	strb	r2, [r3, #0]
					searchC();
 8009ef6:	f003 f941 	bl	800d17c <searchC>

					goal_x = 7;
 8009efa:	4b66      	ldr	r3, [pc, #408]	; (800a094 <perfect_slalom+0x300>)
 8009efc:	2207      	movs	r2, #7
 8009efe:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 8009f00:	4b65      	ldr	r3, [pc, #404]	; (800a098 <perfect_slalom+0x304>)
 8009f02:	2207      	movs	r2, #7
 8009f04:	701a      	strb	r2, [r3, #0]
					break;
 8009f06:	e14c      	b.n	800a1a2 <perfect_slalom+0x40e>

				case 2:
					//----a二次走行スラローム+既知区間加速走行 speed1----
					printf("First Run. (Continuous)\n");
 8009f08:	4864      	ldr	r0, [pc, #400]	; (800a09c <perfect_slalom+0x308>)
 8009f0a:	f006 fdb3 	bl	8010a74 <puts>
					MF.FLAG.SCND = 1;
 8009f0e:	4a5c      	ldr	r2, [pc, #368]	; (800a080 <perfect_slalom+0x2ec>)
 8009f10:	8813      	ldrh	r3, [r2, #0]
 8009f12:	f043 0320 	orr.w	r3, r3, #32
 8009f16:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 8009f18:	4a59      	ldr	r2, [pc, #356]	; (800a080 <perfect_slalom+0x2ec>)
 8009f1a:	8813      	ldrh	r3, [r2, #0]
 8009f1c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009f20:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 8009f22:	4a57      	ldr	r2, [pc, #348]	; (800a080 <perfect_slalom+0x2ec>)
 8009f24:	8813      	ldrh	r3, [r2, #0]
 8009f26:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009f2a:	8013      	strh	r3, [r2, #0]
					run_mode = LOW;
 8009f2c:	4b55      	ldr	r3, [pc, #340]	; (800a084 <perfect_slalom+0x2f0>)
 8009f2e:	2201      	movs	r2, #1
 8009f30:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 8009f32:	4b55      	ldr	r3, [pc, #340]	; (800a088 <perfect_slalom+0x2f4>)
 8009f34:	2200      	movs	r2, #0
 8009f36:	701a      	strb	r2, [r3, #0]

					accel_hs = 5000;
 8009f38:	4b54      	ldr	r3, [pc, #336]	; (800a08c <perfect_slalom+0x2f8>)
 8009f3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8009f3e:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1200;
 8009f40:	4b53      	ldr	r3, [pc, #332]	; (800a090 <perfect_slalom+0x2fc>)
 8009f42:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8009f46:	801a      	strh	r2, [r3, #0]
					goal_x = 7;
 8009f48:	4b52      	ldr	r3, [pc, #328]	; (800a094 <perfect_slalom+0x300>)
 8009f4a:	2207      	movs	r2, #7
 8009f4c:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 8009f4e:	4b52      	ldr	r3, [pc, #328]	; (800a098 <perfect_slalom+0x304>)
 8009f50:	2207      	movs	r2, #7
 8009f52:	701a      	strb	r2, [r3, #0]

					get_base();
 8009f54:	f005 fef4 	bl	800fd40 <get_base>

					searchD();
 8009f58:	f003 fa42 	bl	800d3e0 <searchD>
					HAL_Delay(2000);
 8009f5c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8009f60:	f7f7 f85c 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 8009f64:	4b4c      	ldr	r3, [pc, #304]	; (800a098 <perfect_slalom+0x304>)
 8009f66:	2200      	movs	r2, #0
 8009f68:	701a      	strb	r2, [r3, #0]
 8009f6a:	4b4b      	ldr	r3, [pc, #300]	; (800a098 <perfect_slalom+0x304>)
 8009f6c:	781a      	ldrb	r2, [r3, #0]
 8009f6e:	4b49      	ldr	r3, [pc, #292]	; (800a094 <perfect_slalom+0x300>)
 8009f70:	701a      	strb	r2, [r3, #0]
					searchD();
 8009f72:	f003 fa35 	bl	800d3e0 <searchD>

					goal_x = 7;
 8009f76:	4b47      	ldr	r3, [pc, #284]	; (800a094 <perfect_slalom+0x300>)
 8009f78:	2207      	movs	r2, #7
 8009f7a:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 8009f7c:	4b46      	ldr	r3, [pc, #280]	; (800a098 <perfect_slalom+0x304>)
 8009f7e:	2207      	movs	r2, #7
 8009f80:	701a      	strb	r2, [r3, #0]
					break;
 8009f82:	e10e      	b.n	800a1a2 <perfect_slalom+0x40e>

				case 3:
					//----a二次探索スラロームHigh Speed----
					printf("Second Run. (Slalom)\n");
 8009f84:	4846      	ldr	r0, [pc, #280]	; (800a0a0 <perfect_slalom+0x30c>)
 8009f86:	f006 fd75 	bl	8010a74 <puts>
					MF.FLAG.SCND = 1;
 8009f8a:	4a3d      	ldr	r2, [pc, #244]	; (800a080 <perfect_slalom+0x2ec>)
 8009f8c:	8813      	ldrh	r3, [r2, #0]
 8009f8e:	f043 0320 	orr.w	r3, r3, #32
 8009f92:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 0;
 8009f94:	4a3a      	ldr	r2, [pc, #232]	; (800a080 <perfect_slalom+0x2ec>)
 8009f96:	8813      	ldrh	r3, [r2, #0]
 8009f98:	f36f 2349 	bfc	r3, #9, #1
 8009f9c:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 8009f9e:	4a38      	ldr	r2, [pc, #224]	; (800a080 <perfect_slalom+0x2ec>)
 8009fa0:	8813      	ldrh	r3, [r2, #0]
 8009fa2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009fa6:	8013      	strh	r3, [r2, #0]
					run_mode = HIGH;
 8009fa8:	4b36      	ldr	r3, [pc, #216]	; (800a084 <perfect_slalom+0x2f0>)
 8009faa:	2203      	movs	r2, #3
 8009fac:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 8009fae:	4b36      	ldr	r3, [pc, #216]	; (800a088 <perfect_slalom+0x2f4>)
 8009fb0:	2200      	movs	r2, #0
 8009fb2:	701a      	strb	r2, [r3, #0]

					goal_x = 7;
 8009fb4:	4b37      	ldr	r3, [pc, #220]	; (800a094 <perfect_slalom+0x300>)
 8009fb6:	2207      	movs	r2, #7
 8009fb8:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 8009fba:	4b37      	ldr	r3, [pc, #220]	; (800a098 <perfect_slalom+0x304>)
 8009fbc:	2207      	movs	r2, #7
 8009fbe:	701a      	strb	r2, [r3, #0]

					get_base();
 8009fc0:	f005 febe 	bl	800fd40 <get_base>

					searchC();
 8009fc4:	f003 f8da 	bl	800d17c <searchC>
					HAL_Delay(2000);
 8009fc8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8009fcc:	f7f7 f826 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 8009fd0:	4b31      	ldr	r3, [pc, #196]	; (800a098 <perfect_slalom+0x304>)
 8009fd2:	2200      	movs	r2, #0
 8009fd4:	701a      	strb	r2, [r3, #0]
 8009fd6:	4b30      	ldr	r3, [pc, #192]	; (800a098 <perfect_slalom+0x304>)
 8009fd8:	781a      	ldrb	r2, [r3, #0]
 8009fda:	4b2e      	ldr	r3, [pc, #184]	; (800a094 <perfect_slalom+0x300>)
 8009fdc:	701a      	strb	r2, [r3, #0]
					searchC();
 8009fde:	f003 f8cd 	bl	800d17c <searchC>
					goal_x = 7;
 8009fe2:	4b2c      	ldr	r3, [pc, #176]	; (800a094 <perfect_slalom+0x300>)
 8009fe4:	2207      	movs	r2, #7
 8009fe6:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 8009fe8:	4b2b      	ldr	r3, [pc, #172]	; (800a098 <perfect_slalom+0x304>)
 8009fea:	2207      	movs	r2, #7
 8009fec:	701a      	strb	r2, [r3, #0]
					break;
 8009fee:	e0d8      	b.n	800a1a2 <perfect_slalom+0x40e>

				case 4:
					//----a二次探索スラロームHigh Speed + 既知区間加速----
					printf("Second Run. (Slalom)\n");
 8009ff0:	482b      	ldr	r0, [pc, #172]	; (800a0a0 <perfect_slalom+0x30c>)
 8009ff2:	f006 fd3f 	bl	8010a74 <puts>
					MF.FLAG.SCND = 1;
 8009ff6:	4a22      	ldr	r2, [pc, #136]	; (800a080 <perfect_slalom+0x2ec>)
 8009ff8:	8813      	ldrh	r3, [r2, #0]
 8009ffa:	f043 0320 	orr.w	r3, r3, #32
 8009ffe:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800a000:	4a1f      	ldr	r2, [pc, #124]	; (800a080 <perfect_slalom+0x2ec>)
 800a002:	8813      	ldrh	r3, [r2, #0]
 800a004:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a008:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800a00a:	4a1d      	ldr	r2, [pc, #116]	; (800a080 <perfect_slalom+0x2ec>)
 800a00c:	8813      	ldrh	r3, [r2, #0]
 800a00e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800a012:	8013      	strh	r3, [r2, #0]
					run_mode = HIGH;
 800a014:	4b1b      	ldr	r3, [pc, #108]	; (800a084 <perfect_slalom+0x2f0>)
 800a016:	2203      	movs	r2, #3
 800a018:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800a01a:	4b1b      	ldr	r3, [pc, #108]	; (800a088 <perfect_slalom+0x2f4>)
 800a01c:	2200      	movs	r2, #0
 800a01e:	701a      	strb	r2, [r3, #0]

					accel_hs = 3000;
 800a020:	4b1a      	ldr	r3, [pc, #104]	; (800a08c <perfect_slalom+0x2f8>)
 800a022:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800a026:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1200;
 800a028:	4b19      	ldr	r3, [pc, #100]	; (800a090 <perfect_slalom+0x2fc>)
 800a02a:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 800a02e:	801a      	strh	r2, [r3, #0]
					goal_x = 7;
 800a030:	4b18      	ldr	r3, [pc, #96]	; (800a094 <perfect_slalom+0x300>)
 800a032:	2207      	movs	r2, #7
 800a034:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800a036:	4b18      	ldr	r3, [pc, #96]	; (800a098 <perfect_slalom+0x304>)
 800a038:	2207      	movs	r2, #7
 800a03a:	701a      	strb	r2, [r3, #0]

					get_base();
 800a03c:	f005 fe80 	bl	800fd40 <get_base>

					searchD();
 800a040:	f003 f9ce 	bl	800d3e0 <searchD>
					HAL_Delay(2000);
 800a044:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800a048:	f7f6 ffe8 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800a04c:	4b12      	ldr	r3, [pc, #72]	; (800a098 <perfect_slalom+0x304>)
 800a04e:	2200      	movs	r2, #0
 800a050:	701a      	strb	r2, [r3, #0]
 800a052:	4b11      	ldr	r3, [pc, #68]	; (800a098 <perfect_slalom+0x304>)
 800a054:	781a      	ldrb	r2, [r3, #0]
 800a056:	4b0f      	ldr	r3, [pc, #60]	; (800a094 <perfect_slalom+0x300>)
 800a058:	701a      	strb	r2, [r3, #0]
					searchD();
 800a05a:	f003 f9c1 	bl	800d3e0 <searchD>

					goal_x = 7;
 800a05e:	4b0d      	ldr	r3, [pc, #52]	; (800a094 <perfect_slalom+0x300>)
 800a060:	2207      	movs	r2, #7
 800a062:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800a064:	4b0c      	ldr	r3, [pc, #48]	; (800a098 <perfect_slalom+0x304>)
 800a066:	2207      	movs	r2, #7
 800a068:	701a      	strb	r2, [r3, #0]
					break;
 800a06a:	e09a      	b.n	800a1a2 <perfect_slalom+0x40e>
 800a06c:	08011f00 	.word	0x08011f00
 800a070:	20000aec 	.word	0x20000aec
 800a074:	08011bc8 	.word	0x08011bc8
 800a078:	40020000 	.word	0x40020000
 800a07c:	08011e04 	.word	0x08011e04
 800a080:	20000f68 	.word	0x20000f68
 800a084:	20000456 	.word	0x20000456
 800a088:	200015c8 	.word	0x200015c8
 800a08c:	20000454 	.word	0x20000454
 800a090:	20000f7c 	.word	0x20000f7c
 800a094:	20000bb0 	.word	0x20000bb0
 800a098:	20000b4c 	.word	0x20000b4c
 800a09c:	08011e10 	.word	0x08011e10
 800a0a0:	08011e5c 	.word	0x08011e5c

				case 5:
					//----a二次探索スラロームHigh Speed + 既知区間加速----
					printf("Second Run. (Slalom)\n");
 800a0a4:	483f      	ldr	r0, [pc, #252]	; (800a1a4 <perfect_slalom+0x410>)
 800a0a6:	f006 fce5 	bl	8010a74 <puts>
					MF.FLAG.SCND = 1;
 800a0aa:	4a3f      	ldr	r2, [pc, #252]	; (800a1a8 <perfect_slalom+0x414>)
 800a0ac:	8813      	ldrh	r3, [r2, #0]
 800a0ae:	f043 0320 	orr.w	r3, r3, #32
 800a0b2:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800a0b4:	4a3c      	ldr	r2, [pc, #240]	; (800a1a8 <perfect_slalom+0x414>)
 800a0b6:	8813      	ldrh	r3, [r2, #0]
 800a0b8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a0bc:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800a0be:	4a3a      	ldr	r2, [pc, #232]	; (800a1a8 <perfect_slalom+0x414>)
 800a0c0:	8813      	ldrh	r3, [r2, #0]
 800a0c2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800a0c6:	8013      	strh	r3, [r2, #0]
					run_mode = HIGH;
 800a0c8:	4b38      	ldr	r3, [pc, #224]	; (800a1ac <perfect_slalom+0x418>)
 800a0ca:	2203      	movs	r2, #3
 800a0cc:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800a0ce:	4b38      	ldr	r3, [pc, #224]	; (800a1b0 <perfect_slalom+0x41c>)
 800a0d0:	2200      	movs	r2, #0
 800a0d2:	701a      	strb	r2, [r3, #0]

					accel_hs = 10000;
 800a0d4:	4b37      	ldr	r3, [pc, #220]	; (800a1b4 <perfect_slalom+0x420>)
 800a0d6:	f242 7210 	movw	r2, #10000	; 0x2710
 800a0da:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1600;
 800a0dc:	4b36      	ldr	r3, [pc, #216]	; (800a1b8 <perfect_slalom+0x424>)
 800a0de:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800a0e2:	801a      	strh	r2, [r3, #0]
					goal_x = 7;
 800a0e4:	4b35      	ldr	r3, [pc, #212]	; (800a1bc <perfect_slalom+0x428>)
 800a0e6:	2207      	movs	r2, #7
 800a0e8:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800a0ea:	4b35      	ldr	r3, [pc, #212]	; (800a1c0 <perfect_slalom+0x42c>)
 800a0ec:	2207      	movs	r2, #7
 800a0ee:	701a      	strb	r2, [r3, #0]

					get_base();
 800a0f0:	f005 fe26 	bl	800fd40 <get_base>

					searchD();
 800a0f4:	f003 f974 	bl	800d3e0 <searchD>
					HAL_Delay(2000);
 800a0f8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800a0fc:	f7f6 ff8e 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800a100:	4b2f      	ldr	r3, [pc, #188]	; (800a1c0 <perfect_slalom+0x42c>)
 800a102:	2200      	movs	r2, #0
 800a104:	701a      	strb	r2, [r3, #0]
 800a106:	4b2e      	ldr	r3, [pc, #184]	; (800a1c0 <perfect_slalom+0x42c>)
 800a108:	781a      	ldrb	r2, [r3, #0]
 800a10a:	4b2c      	ldr	r3, [pc, #176]	; (800a1bc <perfect_slalom+0x428>)
 800a10c:	701a      	strb	r2, [r3, #0]
					searchD();
 800a10e:	f003 f967 	bl	800d3e0 <searchD>

					goal_x = 7;
 800a112:	4b2a      	ldr	r3, [pc, #168]	; (800a1bc <perfect_slalom+0x428>)
 800a114:	2207      	movs	r2, #7
 800a116:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800a118:	4b29      	ldr	r3, [pc, #164]	; (800a1c0 <perfect_slalom+0x42c>)
 800a11a:	2207      	movs	r2, #7
 800a11c:	701a      	strb	r2, [r3, #0]
					break;
 800a11e:	e040      	b.n	800a1a2 <perfect_slalom+0x40e>

				case 6:
					//----a二次探索スラロームHigh Speed + 既知区間加速----
					printf("Second Run. (Slalom)\n");
 800a120:	4820      	ldr	r0, [pc, #128]	; (800a1a4 <perfect_slalom+0x410>)
 800a122:	f006 fca7 	bl	8010a74 <puts>
					MF.FLAG.SCND = 1;
 800a126:	4a20      	ldr	r2, [pc, #128]	; (800a1a8 <perfect_slalom+0x414>)
 800a128:	8813      	ldrh	r3, [r2, #0]
 800a12a:	f043 0320 	orr.w	r3, r3, #32
 800a12e:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800a130:	4a1d      	ldr	r2, [pc, #116]	; (800a1a8 <perfect_slalom+0x414>)
 800a132:	8813      	ldrh	r3, [r2, #0]
 800a134:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a138:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800a13a:	4a1b      	ldr	r2, [pc, #108]	; (800a1a8 <perfect_slalom+0x414>)
 800a13c:	8813      	ldrh	r3, [r2, #0]
 800a13e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800a142:	8013      	strh	r3, [r2, #0]
					run_mode = HIGH;
 800a144:	4b19      	ldr	r3, [pc, #100]	; (800a1ac <perfect_slalom+0x418>)
 800a146:	2203      	movs	r2, #3
 800a148:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800a14a:	4b19      	ldr	r3, [pc, #100]	; (800a1b0 <perfect_slalom+0x41c>)
 800a14c:	2200      	movs	r2, #0
 800a14e:	701a      	strb	r2, [r3, #0]

					accel_hs = 10000;
 800a150:	4b18      	ldr	r3, [pc, #96]	; (800a1b4 <perfect_slalom+0x420>)
 800a152:	f242 7210 	movw	r2, #10000	; 0x2710
 800a156:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 2000;
 800a158:	4b17      	ldr	r3, [pc, #92]	; (800a1b8 <perfect_slalom+0x424>)
 800a15a:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800a15e:	801a      	strh	r2, [r3, #0]
					goal_x = 7;
 800a160:	4b16      	ldr	r3, [pc, #88]	; (800a1bc <perfect_slalom+0x428>)
 800a162:	2207      	movs	r2, #7
 800a164:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800a166:	4b16      	ldr	r3, [pc, #88]	; (800a1c0 <perfect_slalom+0x42c>)
 800a168:	2207      	movs	r2, #7
 800a16a:	701a      	strb	r2, [r3, #0]

					get_base();
 800a16c:	f005 fde8 	bl	800fd40 <get_base>

					searchD();
 800a170:	f003 f936 	bl	800d3e0 <searchD>
					HAL_Delay(2000);
 800a174:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800a178:	f7f6 ff50 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800a17c:	4b10      	ldr	r3, [pc, #64]	; (800a1c0 <perfect_slalom+0x42c>)
 800a17e:	2200      	movs	r2, #0
 800a180:	701a      	strb	r2, [r3, #0]
 800a182:	4b0f      	ldr	r3, [pc, #60]	; (800a1c0 <perfect_slalom+0x42c>)
 800a184:	781a      	ldrb	r2, [r3, #0]
 800a186:	4b0d      	ldr	r3, [pc, #52]	; (800a1bc <perfect_slalom+0x428>)
 800a188:	701a      	strb	r2, [r3, #0]
					searchD();
 800a18a:	f003 f929 	bl	800d3e0 <searchD>

					goal_x = 7;
 800a18e:	4b0b      	ldr	r3, [pc, #44]	; (800a1bc <perfect_slalom+0x428>)
 800a190:	2207      	movs	r2, #7
 800a192:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800a194:	4b0a      	ldr	r3, [pc, #40]	; (800a1c0 <perfect_slalom+0x42c>)
 800a196:	2207      	movs	r2, #7
 800a198:	701a      	strb	r2, [r3, #0]
					break;
 800a19a:	e002      	b.n	800a1a2 <perfect_slalom+0x40e>

				case 7:
					perfect_pass();
 800a19c:	f000 f812 	bl	800a1c4 <perfect_pass>
					break;
 800a1a0:	bf00      	nop
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 800a1a2:	e600      	b.n	8009da6 <perfect_slalom+0x12>
 800a1a4:	08011e5c 	.word	0x08011e5c
 800a1a8:	20000f68 	.word	0x20000f68
 800a1ac:	20000456 	.word	0x20000456
 800a1b0:	200015c8 	.word	0x200015c8
 800a1b4:	20000454 	.word	0x20000454
 800a1b8:	20000f7c 	.word	0x20000f7c
 800a1bc:	20000bb0 	.word	0x20000bb0
 800a1c0:	20000b4c 	.word	0x20000b4c

0800a1c4 <perfect_pass>:
//perfect_pass
// a本番用pass圧縮走行モード
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void perfect_pass(void){
 800a1c4:	b580      	push	{r7, lr}
 800a1c6:	b082      	sub	sp, #8
 800a1c8:	af00      	add	r7, sp, #0

	int mode = 0;
 800a1ca:	2300      	movs	r3, #0
 800a1cc:	607b      	str	r3, [r7, #4]
	printf("Perfect Pass Press, Mode : %d\n", mode);
 800a1ce:	6879      	ldr	r1, [r7, #4]
 800a1d0:	489a      	ldr	r0, [pc, #616]	; (800a43c <perfect_pass+0x278>)
 800a1d2:	f006 fbdb 	bl	801098c <iprintf>

	while(1){
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	b2db      	uxtb	r3, r3
 800a1da:	f003 0301 	and.w	r3, r3, #1
 800a1de:	b2d8      	uxtb	r0, r3
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	b2db      	uxtb	r3, r3
 800a1e4:	f003 0302 	and.w	r3, r3, #2
 800a1e8:	b2d9      	uxtb	r1, r3
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	b2db      	uxtb	r3, r3
 800a1ee:	f003 0304 	and.w	r3, r3, #4
 800a1f2:	b2db      	uxtb	r3, r3
 800a1f4:	461a      	mov	r2, r3
 800a1f6:	f005 fdfb 	bl	800fdf0 <led_write>
		  if(dist_r >= 20){
 800a1fa:	4b91      	ldr	r3, [pc, #580]	; (800a440 <perfect_pass+0x27c>)
 800a1fc:	edd3 7a00 	vldr	s15, [r3]
 800a200:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 800a204:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a208:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a20c:	db0f      	blt.n	800a22e <perfect_pass+0x6a>
			  mode++;
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	3301      	adds	r3, #1
 800a212:	607b      	str	r3, [r7, #4]
			  dist_r = 0;
 800a214:	4b8a      	ldr	r3, [pc, #552]	; (800a440 <perfect_pass+0x27c>)
 800a216:	f04f 0200 	mov.w	r2, #0
 800a21a:	601a      	str	r2, [r3, #0]
			  if(mode > 7){
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	2b07      	cmp	r3, #7
 800a220:	dd01      	ble.n	800a226 <perfect_pass+0x62>
				  mode = 0;
 800a222:	2300      	movs	r3, #0
 800a224:	607b      	str	r3, [r7, #4]
			  }
			  printf("Mode : %d\n", mode);
 800a226:	6879      	ldr	r1, [r7, #4]
 800a228:	4886      	ldr	r0, [pc, #536]	; (800a444 <perfect_pass+0x280>)
 800a22a:	f006 fbaf 	bl	801098c <iprintf>
/*	  		  for(int i=0; i<m_select; i++){
	  			  buzzer(mario_select[i][0], mario_select[i][1]);
	  		  }
*/		  }
		  if(dist_r <= -20){
 800a22e:	4b84      	ldr	r3, [pc, #528]	; (800a440 <perfect_pass+0x27c>)
 800a230:	edd3 7a00 	vldr	s15, [r3]
 800a234:	eebb 7a04 	vmov.f32	s14, #180	; 0xc1a00000 -20.0
 800a238:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a23c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a240:	d80f      	bhi.n	800a262 <perfect_pass+0x9e>
			  mode--;
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	3b01      	subs	r3, #1
 800a246:	607b      	str	r3, [r7, #4]
			  dist_r = 0;
 800a248:	4b7d      	ldr	r3, [pc, #500]	; (800a440 <perfect_pass+0x27c>)
 800a24a:	f04f 0200 	mov.w	r2, #0
 800a24e:	601a      	str	r2, [r3, #0]
			  if(mode < 0){
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	2b00      	cmp	r3, #0
 800a254:	da01      	bge.n	800a25a <perfect_pass+0x96>
				  mode = 7;
 800a256:	2307      	movs	r3, #7
 800a258:	607b      	str	r3, [r7, #4]
			  }
			  printf("Mode : %d\n", mode);
 800a25a:	6879      	ldr	r1, [r7, #4]
 800a25c:	4879      	ldr	r0, [pc, #484]	; (800a444 <perfect_pass+0x280>)
 800a25e:	f006 fb95 	bl	801098c <iprintf>
/*	  		  for(int i=0; i<m_select; i++){
	  			  buzzer(mario_select[i][0], mario_select[i][1]);
	  		  }
*/		  }
		  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET){
 800a262:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800a266:	4878      	ldr	r0, [pc, #480]	; (800a448 <perfect_pass+0x284>)
 800a268:	f7f8 f834 	bl	80022d4 <HAL_GPIO_ReadPin>
 800a26c:	4603      	mov	r3, r0
 800a26e:	2b00      	cmp	r3, #0
 800a270:	d1b1      	bne.n	800a1d6 <perfect_pass+0x12>
			  HAL_Delay(50);
 800a272:	2032      	movs	r0, #50	; 0x32
 800a274:	f7f6 fed2 	bl	800101c <HAL_Delay>
			  while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET);
 800a278:	bf00      	nop
 800a27a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800a27e:	4872      	ldr	r0, [pc, #456]	; (800a448 <perfect_pass+0x284>)
 800a280:	f7f8 f828 	bl	80022d4 <HAL_GPIO_ReadPin>
 800a284:	4603      	mov	r3, r0
 800a286:	2b00      	cmp	r3, #0
 800a288:	d0f7      	beq.n	800a27a <perfect_pass+0xb6>
/*			  for(int i=0; i<m_ok; i++){
	  			  buzzer(mario_ok[i][0], mario_ok[i][1]);
	  		  }
*/
			  drive_ready();
 800a28a:	f7fa fcf9 	bl	8004c80 <drive_ready>
/*	  		  for(int i=0; i<m_start; i++){
	  			  buzzer(mario_start[i][0], mario_start[i][1]);
	  			  full_led_write(RED);
	  		  }
*/
			  switch(mode){
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	2b07      	cmp	r3, #7
 800a292:	d8a0      	bhi.n	800a1d6 <perfect_pass+0x12>
 800a294:	a201      	add	r2, pc, #4	; (adr r2, 800a29c <perfect_pass+0xd8>)
 800a296:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a29a:	bf00      	nop
 800a29c:	0800a1d7 	.word	0x0800a1d7
 800a2a0:	0800a2bd 	.word	0x0800a2bd
 800a2a4:	0800a339 	.word	0x0800a339
 800a2a8:	0800a3bb 	.word	0x0800a3bb
 800a2ac:	0800a479 	.word	0x0800a479
 800a2b0:	0800a1d7 	.word	0x0800a1d7
 800a2b4:	0800a521 	.word	0x0800a521
 800a2b8:	0800a7a9 	.word	0x0800a7a9
				case 0:
					break;

				case 1:
					//----a一次探索スラローム走行----
					printf("First Run.\n");
 800a2bc:	4863      	ldr	r0, [pc, #396]	; (800a44c <perfect_pass+0x288>)
 800a2be:	f006 fbd9 	bl	8010a74 <puts>
					MF.FLAG.SCND = 0;
 800a2c2:	4a63      	ldr	r2, [pc, #396]	; (800a450 <perfect_pass+0x28c>)
 800a2c4:	8813      	ldrh	r3, [r2, #0]
 800a2c6:	f36f 1345 	bfc	r3, #5, #1
 800a2ca:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800a2cc:	4a60      	ldr	r2, [pc, #384]	; (800a450 <perfect_pass+0x28c>)
 800a2ce:	8813      	ldrh	r3, [r2, #0]
 800a2d0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a2d4:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 0;
 800a2d6:	4a5e      	ldr	r2, [pc, #376]	; (800a450 <perfect_pass+0x28c>)
 800a2d8:	8813      	ldrh	r3, [r2, #0]
 800a2da:	f36f 238a 	bfc	r3, #10, #1
 800a2de:	8013      	strh	r3, [r2, #0]
					run_mode = MIDDLE;
 800a2e0:	4b5c      	ldr	r3, [pc, #368]	; (800a454 <perfect_pass+0x290>)
 800a2e2:	2202      	movs	r2, #2
 800a2e4:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800a2e6:	4b5c      	ldr	r3, [pc, #368]	; (800a458 <perfect_pass+0x294>)
 800a2e8:	2200      	movs	r2, #0
 800a2ea:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 800a2ec:	4b5b      	ldr	r3, [pc, #364]	; (800a45c <perfect_pass+0x298>)
 800a2ee:	f241 3288 	movw	r2, #5000	; 0x1388
 800a2f2:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 800;
 800a2f4:	4b5a      	ldr	r3, [pc, #360]	; (800a460 <perfect_pass+0x29c>)
 800a2f6:	f44f 7248 	mov.w	r2, #800	; 0x320
 800a2fa:	801a      	strh	r2, [r3, #0]

					goal_x = 7;
 800a2fc:	4b59      	ldr	r3, [pc, #356]	; (800a464 <perfect_pass+0x2a0>)
 800a2fe:	2207      	movs	r2, #7
 800a300:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800a302:	4b59      	ldr	r3, [pc, #356]	; (800a468 <perfect_pass+0x2a4>)
 800a304:	2207      	movs	r2, #7
 800a306:	701a      	strb	r2, [r3, #0]

					get_base();
 800a308:	f005 fd1a 	bl	800fd40 <get_base>

					searchC();
 800a30c:	f002 ff36 	bl	800d17c <searchC>
					HAL_Delay(2000);
 800a310:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800a314:	f7f6 fe82 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800a318:	4b53      	ldr	r3, [pc, #332]	; (800a468 <perfect_pass+0x2a4>)
 800a31a:	2200      	movs	r2, #0
 800a31c:	701a      	strb	r2, [r3, #0]
 800a31e:	4b52      	ldr	r3, [pc, #328]	; (800a468 <perfect_pass+0x2a4>)
 800a320:	781a      	ldrb	r2, [r3, #0]
 800a322:	4b50      	ldr	r3, [pc, #320]	; (800a464 <perfect_pass+0x2a0>)
 800a324:	701a      	strb	r2, [r3, #0]
					searchC();
 800a326:	f002 ff29 	bl	800d17c <searchC>

					goal_x = 7;
 800a32a:	4b4e      	ldr	r3, [pc, #312]	; (800a464 <perfect_pass+0x2a0>)
 800a32c:	2207      	movs	r2, #7
 800a32e:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800a330:	4b4d      	ldr	r3, [pc, #308]	; (800a468 <perfect_pass+0x2a4>)
 800a332:	2207      	movs	r2, #7
 800a334:	701a      	strb	r2, [r3, #0]
					break;
 800a336:	e363      	b.n	800aa00 <perfect_pass+0x83c>

				case 2:
					//----a直線と大回り圧縮(adv_posを停止)+半区画ベース----
					printf("pass press 3.\n");
 800a338:	484c      	ldr	r0, [pc, #304]	; (800a46c <perfect_pass+0x2a8>)
 800a33a:	f006 fb9b 	bl	8010a74 <puts>
					MF.FLAG.SCND = 1;
 800a33e:	4a44      	ldr	r2, [pc, #272]	; (800a450 <perfect_pass+0x28c>)
 800a340:	8813      	ldrh	r3, [r2, #0]
 800a342:	f043 0320 	orr.w	r3, r3, #32
 800a346:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800a348:	4a41      	ldr	r2, [pc, #260]	; (800a450 <perfect_pass+0x28c>)
 800a34a:	8813      	ldrh	r3, [r2, #0]
 800a34c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a350:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800a352:	4a3f      	ldr	r2, [pc, #252]	; (800a450 <perfect_pass+0x28c>)
 800a354:	8813      	ldrh	r3, [r2, #0]
 800a356:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800a35a:	8013      	strh	r3, [r2, #0]
					run_mode = MIDDLE;
 800a35c:	4b3d      	ldr	r3, [pc, #244]	; (800a454 <perfect_pass+0x290>)
 800a35e:	2202      	movs	r2, #2
 800a360:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800a362:	4b3d      	ldr	r3, [pc, #244]	; (800a458 <perfect_pass+0x294>)
 800a364:	2200      	movs	r2, #0
 800a366:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 800a368:	4b3c      	ldr	r3, [pc, #240]	; (800a45c <perfect_pass+0x298>)
 800a36a:	f241 3288 	movw	r2, #5000	; 0x1388
 800a36e:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 800;
 800a370:	4b3b      	ldr	r3, [pc, #236]	; (800a460 <perfect_pass+0x29c>)
 800a372:	f44f 7248 	mov.w	r2, #800	; 0x320
 800a376:	801a      	strh	r2, [r3, #0]

					pass_mode = 3;						//a半区画ベースでroute配列生成
 800a378:	4b3d      	ldr	r3, [pc, #244]	; (800a470 <perfect_pass+0x2ac>)
 800a37a:	2203      	movs	r2, #3
 800a37c:	701a      	strb	r2, [r3, #0]

					goal_x = 7;
 800a37e:	4b39      	ldr	r3, [pc, #228]	; (800a464 <perfect_pass+0x2a0>)
 800a380:	2207      	movs	r2, #7
 800a382:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800a384:	4b38      	ldr	r3, [pc, #224]	; (800a468 <perfect_pass+0x2a4>)
 800a386:	2207      	movs	r2, #7
 800a388:	701a      	strb	r2, [r3, #0]

					get_base();
 800a38a:	f005 fcd9 	bl	800fd40 <get_base>

					searchF3();
 800a38e:	f003 f9e1 	bl	800d754 <searchF3>
					HAL_Delay(2000);
 800a392:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800a396:	f7f6 fe41 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800a39a:	4b33      	ldr	r3, [pc, #204]	; (800a468 <perfect_pass+0x2a4>)
 800a39c:	2200      	movs	r2, #0
 800a39e:	701a      	strb	r2, [r3, #0]
 800a3a0:	4b31      	ldr	r3, [pc, #196]	; (800a468 <perfect_pass+0x2a4>)
 800a3a2:	781a      	ldrb	r2, [r3, #0]
 800a3a4:	4b2f      	ldr	r3, [pc, #188]	; (800a464 <perfect_pass+0x2a0>)
 800a3a6:	701a      	strb	r2, [r3, #0]
					searchF3();
 800a3a8:	f003 f9d4 	bl	800d754 <searchF3>

					goal_x = 7;
 800a3ac:	4b2d      	ldr	r3, [pc, #180]	; (800a464 <perfect_pass+0x2a0>)
 800a3ae:	2207      	movs	r2, #7
 800a3b0:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800a3b2:	4b2d      	ldr	r3, [pc, #180]	; (800a468 <perfect_pass+0x2a4>)
 800a3b4:	2207      	movs	r2, #7
 800a3b6:	701a      	strb	r2, [r3, #0]
					break;
 800a3b8:	e322      	b.n	800aa00 <perfect_pass+0x83c>
				case 3:
					//----a直線と大回り圧縮(adv_posを停止)+半区画ベース High Speed----
					printf("pass press 3-2.\n");
 800a3ba:	482e      	ldr	r0, [pc, #184]	; (800a474 <perfect_pass+0x2b0>)
 800a3bc:	f006 fb5a 	bl	8010a74 <puts>
					MF.FLAG.SCND = 1;
 800a3c0:	4a23      	ldr	r2, [pc, #140]	; (800a450 <perfect_pass+0x28c>)
 800a3c2:	8813      	ldrh	r3, [r2, #0]
 800a3c4:	f043 0320 	orr.w	r3, r3, #32
 800a3c8:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800a3ca:	4a21      	ldr	r2, [pc, #132]	; (800a450 <perfect_pass+0x28c>)
 800a3cc:	8813      	ldrh	r3, [r2, #0]
 800a3ce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a3d2:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800a3d4:	4a1e      	ldr	r2, [pc, #120]	; (800a450 <perfect_pass+0x28c>)
 800a3d6:	8813      	ldrh	r3, [r2, #0]
 800a3d8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800a3dc:	8013      	strh	r3, [r2, #0]
					run_mode = HIGH;
 800a3de:	4b1d      	ldr	r3, [pc, #116]	; (800a454 <perfect_pass+0x290>)
 800a3e0:	2203      	movs	r2, #3
 800a3e2:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800a3e4:	4b1c      	ldr	r3, [pc, #112]	; (800a458 <perfect_pass+0x294>)
 800a3e6:	2200      	movs	r2, #0
 800a3e8:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 800a3ea:	4b1c      	ldr	r3, [pc, #112]	; (800a45c <perfect_pass+0x298>)
 800a3ec:	f241 3288 	movw	r2, #5000	; 0x1388
 800a3f0:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1200;
 800a3f2:	4b1b      	ldr	r3, [pc, #108]	; (800a460 <perfect_pass+0x29c>)
 800a3f4:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 800a3f8:	801a      	strh	r2, [r3, #0]

					pass_mode = 3;						//a半区画ベースでroute配列生成
 800a3fa:	4b1d      	ldr	r3, [pc, #116]	; (800a470 <perfect_pass+0x2ac>)
 800a3fc:	2203      	movs	r2, #3
 800a3fe:	701a      	strb	r2, [r3, #0]

					goal_x = 7;
 800a400:	4b18      	ldr	r3, [pc, #96]	; (800a464 <perfect_pass+0x2a0>)
 800a402:	2207      	movs	r2, #7
 800a404:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800a406:	4b18      	ldr	r3, [pc, #96]	; (800a468 <perfect_pass+0x2a4>)
 800a408:	2207      	movs	r2, #7
 800a40a:	701a      	strb	r2, [r3, #0]

					get_base();
 800a40c:	f005 fc98 	bl	800fd40 <get_base>

					searchF3();
 800a410:	f003 f9a0 	bl	800d754 <searchF3>
					HAL_Delay(2000);
 800a414:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800a418:	f7f6 fe00 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800a41c:	4b12      	ldr	r3, [pc, #72]	; (800a468 <perfect_pass+0x2a4>)
 800a41e:	2200      	movs	r2, #0
 800a420:	701a      	strb	r2, [r3, #0]
 800a422:	4b11      	ldr	r3, [pc, #68]	; (800a468 <perfect_pass+0x2a4>)
 800a424:	781a      	ldrb	r2, [r3, #0]
 800a426:	4b0f      	ldr	r3, [pc, #60]	; (800a464 <perfect_pass+0x2a0>)
 800a428:	701a      	strb	r2, [r3, #0]
					searchF3();
 800a42a:	f003 f993 	bl	800d754 <searchF3>

					goal_x = 7;
 800a42e:	4b0d      	ldr	r3, [pc, #52]	; (800a464 <perfect_pass+0x2a0>)
 800a430:	2207      	movs	r2, #7
 800a432:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800a434:	4b0c      	ldr	r3, [pc, #48]	; (800a468 <perfect_pass+0x2a4>)
 800a436:	2207      	movs	r2, #7
 800a438:	701a      	strb	r2, [r3, #0]
					break;
 800a43a:	e2e1      	b.n	800aa00 <perfect_pass+0x83c>
 800a43c:	08011f1c 	.word	0x08011f1c
 800a440:	20000aec 	.word	0x20000aec
 800a444:	08011bc8 	.word	0x08011bc8
 800a448:	40020000 	.word	0x40020000
 800a44c:	08011e04 	.word	0x08011e04
 800a450:	20000f68 	.word	0x20000f68
 800a454:	20000456 	.word	0x20000456
 800a458:	200015c8 	.word	0x200015c8
 800a45c:	20000454 	.word	0x20000454
 800a460:	20000f7c 	.word	0x20000f7c
 800a464:	20000bb0 	.word	0x20000bb0
 800a468:	20000b4c 	.word	0x20000b4c
 800a46c:	08011dbc 	.word	0x08011dbc
 800a470:	20000457 	.word	0x20000457
 800a474:	08011dcc 	.word	0x08011dcc
				case 4:
					//----a直線と大回り圧縮と斜めｰｰｰｰ
					printf("pass press 4.\n");
 800a478:	4820      	ldr	r0, [pc, #128]	; (800a4fc <perfect_pass+0x338>)
 800a47a:	f006 fafb 	bl	8010a74 <puts>
					MF.FLAG.SCND = 1;
 800a47e:	4a20      	ldr	r2, [pc, #128]	; (800a500 <perfect_pass+0x33c>)
 800a480:	8813      	ldrh	r3, [r2, #0]
 800a482:	f043 0320 	orr.w	r3, r3, #32
 800a486:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800a488:	4a1d      	ldr	r2, [pc, #116]	; (800a500 <perfect_pass+0x33c>)
 800a48a:	8813      	ldrh	r3, [r2, #0]
 800a48c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a490:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800a492:	4a1b      	ldr	r2, [pc, #108]	; (800a500 <perfect_pass+0x33c>)
 800a494:	8813      	ldrh	r3, [r2, #0]
 800a496:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800a49a:	8013      	strh	r3, [r2, #0]
					run_mode = MIDDLE;
 800a49c:	4b19      	ldr	r3, [pc, #100]	; (800a504 <perfect_pass+0x340>)
 800a49e:	2202      	movs	r2, #2
 800a4a0:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800a4a2:	4b19      	ldr	r3, [pc, #100]	; (800a508 <perfect_pass+0x344>)
 800a4a4:	2200      	movs	r2, #0
 800a4a6:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 800a4a8:	4b18      	ldr	r3, [pc, #96]	; (800a50c <perfect_pass+0x348>)
 800a4aa:	f241 3288 	movw	r2, #5000	; 0x1388
 800a4ae:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 800;
 800a4b0:	4b17      	ldr	r3, [pc, #92]	; (800a510 <perfect_pass+0x34c>)
 800a4b2:	f44f 7248 	mov.w	r2, #800	; 0x320
 800a4b6:	801a      	strh	r2, [r3, #0]

					pass_mode = 4;
 800a4b8:	4b16      	ldr	r3, [pc, #88]	; (800a514 <perfect_pass+0x350>)
 800a4ba:	2204      	movs	r2, #4
 800a4bc:	701a      	strb	r2, [r3, #0]

					goal_x = 7;
 800a4be:	4b16      	ldr	r3, [pc, #88]	; (800a518 <perfect_pass+0x354>)
 800a4c0:	2207      	movs	r2, #7
 800a4c2:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800a4c4:	4b15      	ldr	r3, [pc, #84]	; (800a51c <perfect_pass+0x358>)
 800a4c6:	2207      	movs	r2, #7
 800a4c8:	701a      	strb	r2, [r3, #0]

					get_base();
 800a4ca:	f005 fc39 	bl	800fd40 <get_base>

					searchF4();
 800a4ce:	f003 fa0b 	bl	800d8e8 <searchF4>
					HAL_Delay(2000);
 800a4d2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800a4d6:	f7f6 fda1 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800a4da:	4b10      	ldr	r3, [pc, #64]	; (800a51c <perfect_pass+0x358>)
 800a4dc:	2200      	movs	r2, #0
 800a4de:	701a      	strb	r2, [r3, #0]
 800a4e0:	4b0e      	ldr	r3, [pc, #56]	; (800a51c <perfect_pass+0x358>)
 800a4e2:	781a      	ldrb	r2, [r3, #0]
 800a4e4:	4b0c      	ldr	r3, [pc, #48]	; (800a518 <perfect_pass+0x354>)
 800a4e6:	701a      	strb	r2, [r3, #0]
					searchF4();
 800a4e8:	f003 f9fe 	bl	800d8e8 <searchF4>

					goal_x = 7;
 800a4ec:	4b0a      	ldr	r3, [pc, #40]	; (800a518 <perfect_pass+0x354>)
 800a4ee:	2207      	movs	r2, #7
 800a4f0:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800a4f2:	4b0a      	ldr	r3, [pc, #40]	; (800a51c <perfect_pass+0x358>)
 800a4f4:	2207      	movs	r2, #7
 800a4f6:	701a      	strb	r2, [r3, #0]
					break;
 800a4f8:	e282      	b.n	800aa00 <perfect_pass+0x83c>
 800a4fa:	bf00      	nop
 800a4fc:	08011ddc 	.word	0x08011ddc
 800a500:	20000f68 	.word	0x20000f68
 800a504:	20000456 	.word	0x20000456
 800a508:	200015c8 	.word	0x200015c8
 800a50c:	20000454 	.word	0x20000454
 800a510:	20000f7c 	.word	0x20000f7c
 800a514:	20000457 	.word	0x20000457
 800a518:	20000bb0 	.word	0x20000bb0
 800a51c:	20000b4c 	.word	0x20000b4c

				case 5:
					break;
				case 6:
					//----a一次探索スラローム走行----
					printf("First Run.\n");
 800a520:	4895      	ldr	r0, [pc, #596]	; (800a778 <perfect_pass+0x5b4>)
 800a522:	f006 faa7 	bl	8010a74 <puts>
					MF.FLAG.SCND = 0;
 800a526:	4a95      	ldr	r2, [pc, #596]	; (800a77c <perfect_pass+0x5b8>)
 800a528:	8813      	ldrh	r3, [r2, #0]
 800a52a:	f36f 1345 	bfc	r3, #5, #1
 800a52e:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800a530:	4a92      	ldr	r2, [pc, #584]	; (800a77c <perfect_pass+0x5b8>)
 800a532:	8813      	ldrh	r3, [r2, #0]
 800a534:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a538:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 0;
 800a53a:	4a90      	ldr	r2, [pc, #576]	; (800a77c <perfect_pass+0x5b8>)
 800a53c:	8813      	ldrh	r3, [r2, #0]
 800a53e:	f36f 238a 	bfc	r3, #10, #1
 800a542:	8013      	strh	r3, [r2, #0]
					run_mode = MIDDLE;
 800a544:	4b8e      	ldr	r3, [pc, #568]	; (800a780 <perfect_pass+0x5bc>)
 800a546:	2202      	movs	r2, #2
 800a548:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800a54a:	4b8e      	ldr	r3, [pc, #568]	; (800a784 <perfect_pass+0x5c0>)
 800a54c:	2200      	movs	r2, #0
 800a54e:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 800a550:	4b8d      	ldr	r3, [pc, #564]	; (800a788 <perfect_pass+0x5c4>)
 800a552:	f241 3288 	movw	r2, #5000	; 0x1388
 800a556:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 800;
 800a558:	4b8c      	ldr	r3, [pc, #560]	; (800a78c <perfect_pass+0x5c8>)
 800a55a:	f44f 7248 	mov.w	r2, #800	; 0x320
 800a55e:	801a      	strh	r2, [r3, #0]

					goal_x = GOAL_X;
 800a560:	4b8b      	ldr	r3, [pc, #556]	; (800a790 <perfect_pass+0x5cc>)
 800a562:	2209      	movs	r2, #9
 800a564:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800a566:	4b8b      	ldr	r3, [pc, #556]	; (800a794 <perfect_pass+0x5d0>)
 800a568:	2206      	movs	r2, #6
 800a56a:	701a      	strb	r2, [r3, #0]

					get_base();
 800a56c:	f005 fbe8 	bl	800fd40 <get_base>

					searchC();
 800a570:	f002 fe04 	bl	800d17c <searchC>
					HAL_Delay(2000);
 800a574:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800a578:	f7f6 fd50 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800a57c:	4b85      	ldr	r3, [pc, #532]	; (800a794 <perfect_pass+0x5d0>)
 800a57e:	2200      	movs	r2, #0
 800a580:	701a      	strb	r2, [r3, #0]
 800a582:	4b84      	ldr	r3, [pc, #528]	; (800a794 <perfect_pass+0x5d0>)
 800a584:	781a      	ldrb	r2, [r3, #0]
 800a586:	4b82      	ldr	r3, [pc, #520]	; (800a790 <perfect_pass+0x5cc>)
 800a588:	701a      	strb	r2, [r3, #0]
					searchC();
 800a58a:	f002 fdf7 	bl	800d17c <searchC>

					degree_z = target_degree_z;
 800a58e:	4b82      	ldr	r3, [pc, #520]	; (800a798 <perfect_pass+0x5d4>)
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	4a82      	ldr	r2, [pc, #520]	; (800a79c <perfect_pass+0x5d8>)
 800a594:	6013      	str	r3, [r2, #0]
					HAL_Delay(2000);
 800a596:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800a59a:	f7f6 fd3f 	bl	800101c <HAL_Delay>


					//----a二次探索スラローム+既知区間加速走行 speed2----
					printf("Second Run. (Continuous)\n");
 800a59e:	4880      	ldr	r0, [pc, #512]	; (800a7a0 <perfect_pass+0x5dc>)
 800a5a0:	f006 fa68 	bl	8010a74 <puts>
					MF.FLAG.SCND = 1;
 800a5a4:	4a75      	ldr	r2, [pc, #468]	; (800a77c <perfect_pass+0x5b8>)
 800a5a6:	8813      	ldrh	r3, [r2, #0]
 800a5a8:	f043 0320 	orr.w	r3, r3, #32
 800a5ac:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800a5ae:	4a73      	ldr	r2, [pc, #460]	; (800a77c <perfect_pass+0x5b8>)
 800a5b0:	8813      	ldrh	r3, [r2, #0]
 800a5b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a5b6:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800a5b8:	4a70      	ldr	r2, [pc, #448]	; (800a77c <perfect_pass+0x5b8>)
 800a5ba:	8813      	ldrh	r3, [r2, #0]
 800a5bc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800a5c0:	8013      	strh	r3, [r2, #0]
					run_mode = MIDDLE;
 800a5c2:	4b6f      	ldr	r3, [pc, #444]	; (800a780 <perfect_pass+0x5bc>)
 800a5c4:	2202      	movs	r2, #2
 800a5c6:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800a5c8:	4b6e      	ldr	r3, [pc, #440]	; (800a784 <perfect_pass+0x5c0>)
 800a5ca:	2200      	movs	r2, #0
 800a5cc:	701a      	strb	r2, [r3, #0]

					accel_hs = 5000;
 800a5ce:	4b6e      	ldr	r3, [pc, #440]	; (800a788 <perfect_pass+0x5c4>)
 800a5d0:	f241 3288 	movw	r2, #5000	; 0x1388
 800a5d4:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1200;
 800a5d6:	4b6d      	ldr	r3, [pc, #436]	; (800a78c <perfect_pass+0x5c8>)
 800a5d8:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 800a5dc:	801a      	strh	r2, [r3, #0]
					goal_x = GOAL_X;
 800a5de:	4b6c      	ldr	r3, [pc, #432]	; (800a790 <perfect_pass+0x5cc>)
 800a5e0:	2209      	movs	r2, #9
 800a5e2:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800a5e4:	4b6b      	ldr	r3, [pc, #428]	; (800a794 <perfect_pass+0x5d0>)
 800a5e6:	2206      	movs	r2, #6
 800a5e8:	701a      	strb	r2, [r3, #0]

					searchD();
 800a5ea:	f002 fef9 	bl	800d3e0 <searchD>
					HAL_Delay(2000);
 800a5ee:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800a5f2:	f7f6 fd13 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800a5f6:	4b67      	ldr	r3, [pc, #412]	; (800a794 <perfect_pass+0x5d0>)
 800a5f8:	2200      	movs	r2, #0
 800a5fa:	701a      	strb	r2, [r3, #0]
 800a5fc:	4b65      	ldr	r3, [pc, #404]	; (800a794 <perfect_pass+0x5d0>)
 800a5fe:	781a      	ldrb	r2, [r3, #0]
 800a600:	4b63      	ldr	r3, [pc, #396]	; (800a790 <perfect_pass+0x5cc>)
 800a602:	701a      	strb	r2, [r3, #0]
					searchD();
 800a604:	f002 feec 	bl	800d3e0 <searchD>

					degree_z = target_degree_z;
 800a608:	4b63      	ldr	r3, [pc, #396]	; (800a798 <perfect_pass+0x5d4>)
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	4a63      	ldr	r2, [pc, #396]	; (800a79c <perfect_pass+0x5d8>)
 800a60e:	6013      	str	r3, [r2, #0]
					HAL_Delay(2000);
 800a610:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800a614:	f7f6 fd02 	bl	800101c <HAL_Delay>
					degree_z = target_degree_z;
					HAL_Delay(2000);

*/
					//----a二次探索スラロームHigh Speed + 既知区間加速----
					printf("Second Run. (Slalom)\n");
 800a618:	4862      	ldr	r0, [pc, #392]	; (800a7a4 <perfect_pass+0x5e0>)
 800a61a:	f006 fa2b 	bl	8010a74 <puts>
					MF.FLAG.SCND = 1;
 800a61e:	4a57      	ldr	r2, [pc, #348]	; (800a77c <perfect_pass+0x5b8>)
 800a620:	8813      	ldrh	r3, [r2, #0]
 800a622:	f043 0320 	orr.w	r3, r3, #32
 800a626:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800a628:	4a54      	ldr	r2, [pc, #336]	; (800a77c <perfect_pass+0x5b8>)
 800a62a:	8813      	ldrh	r3, [r2, #0]
 800a62c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a630:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800a632:	4a52      	ldr	r2, [pc, #328]	; (800a77c <perfect_pass+0x5b8>)
 800a634:	8813      	ldrh	r3, [r2, #0]
 800a636:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800a63a:	8013      	strh	r3, [r2, #0]
					run_mode = HIGH;
 800a63c:	4b50      	ldr	r3, [pc, #320]	; (800a780 <perfect_pass+0x5bc>)
 800a63e:	2203      	movs	r2, #3
 800a640:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800a642:	4b50      	ldr	r3, [pc, #320]	; (800a784 <perfect_pass+0x5c0>)
 800a644:	2200      	movs	r2, #0
 800a646:	701a      	strb	r2, [r3, #0]
					accel_hs = 10000;
 800a648:	4b4f      	ldr	r3, [pc, #316]	; (800a788 <perfect_pass+0x5c4>)
 800a64a:	f242 7210 	movw	r2, #10000	; 0x2710
 800a64e:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1200;
 800a650:	4b4e      	ldr	r3, [pc, #312]	; (800a78c <perfect_pass+0x5c8>)
 800a652:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 800a656:	801a      	strh	r2, [r3, #0]
					goal_x = GOAL_X;
 800a658:	4b4d      	ldr	r3, [pc, #308]	; (800a790 <perfect_pass+0x5cc>)
 800a65a:	2209      	movs	r2, #9
 800a65c:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800a65e:	4b4d      	ldr	r3, [pc, #308]	; (800a794 <perfect_pass+0x5d0>)
 800a660:	2206      	movs	r2, #6
 800a662:	701a      	strb	r2, [r3, #0]

					searchD();
 800a664:	f002 febc 	bl	800d3e0 <searchD>
					HAL_Delay(2000);
 800a668:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800a66c:	f7f6 fcd6 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800a670:	4b48      	ldr	r3, [pc, #288]	; (800a794 <perfect_pass+0x5d0>)
 800a672:	2200      	movs	r2, #0
 800a674:	701a      	strb	r2, [r3, #0]
 800a676:	4b47      	ldr	r3, [pc, #284]	; (800a794 <perfect_pass+0x5d0>)
 800a678:	781a      	ldrb	r2, [r3, #0]
 800a67a:	4b45      	ldr	r3, [pc, #276]	; (800a790 <perfect_pass+0x5cc>)
 800a67c:	701a      	strb	r2, [r3, #0]
					searchD();
 800a67e:	f002 feaf 	bl	800d3e0 <searchD>

					degree_z = target_degree_z;
 800a682:	4b45      	ldr	r3, [pc, #276]	; (800a798 <perfect_pass+0x5d4>)
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	4a45      	ldr	r2, [pc, #276]	; (800a79c <perfect_pass+0x5d8>)
 800a688:	6013      	str	r3, [r2, #0]
					HAL_Delay(2000);
 800a68a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800a68e:	f7f6 fcc5 	bl	800101c <HAL_Delay>


					//----a二次探索スラロームHigh Speed + 既知区間加速 Speed2----
					printf("Second Run. (Slalom)\n");
 800a692:	4844      	ldr	r0, [pc, #272]	; (800a7a4 <perfect_pass+0x5e0>)
 800a694:	f006 f9ee 	bl	8010a74 <puts>
					MF.FLAG.SCND = 1;
 800a698:	4a38      	ldr	r2, [pc, #224]	; (800a77c <perfect_pass+0x5b8>)
 800a69a:	8813      	ldrh	r3, [r2, #0]
 800a69c:	f043 0320 	orr.w	r3, r3, #32
 800a6a0:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800a6a2:	4a36      	ldr	r2, [pc, #216]	; (800a77c <perfect_pass+0x5b8>)
 800a6a4:	8813      	ldrh	r3, [r2, #0]
 800a6a6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a6aa:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800a6ac:	4a33      	ldr	r2, [pc, #204]	; (800a77c <perfect_pass+0x5b8>)
 800a6ae:	8813      	ldrh	r3, [r2, #0]
 800a6b0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800a6b4:	8013      	strh	r3, [r2, #0]
					run_mode = HIGH;
 800a6b6:	4b32      	ldr	r3, [pc, #200]	; (800a780 <perfect_pass+0x5bc>)
 800a6b8:	2203      	movs	r2, #3
 800a6ba:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800a6bc:	4b31      	ldr	r3, [pc, #196]	; (800a784 <perfect_pass+0x5c0>)
 800a6be:	2200      	movs	r2, #0
 800a6c0:	701a      	strb	r2, [r3, #0]
					accel_hs = 10000;
 800a6c2:	4b31      	ldr	r3, [pc, #196]	; (800a788 <perfect_pass+0x5c4>)
 800a6c4:	f242 7210 	movw	r2, #10000	; 0x2710
 800a6c8:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1600;
 800a6ca:	4b30      	ldr	r3, [pc, #192]	; (800a78c <perfect_pass+0x5c8>)
 800a6cc:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800a6d0:	801a      	strh	r2, [r3, #0]
					goal_x = GOAL_X;
 800a6d2:	4b2f      	ldr	r3, [pc, #188]	; (800a790 <perfect_pass+0x5cc>)
 800a6d4:	2209      	movs	r2, #9
 800a6d6:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800a6d8:	4b2e      	ldr	r3, [pc, #184]	; (800a794 <perfect_pass+0x5d0>)
 800a6da:	2206      	movs	r2, #6
 800a6dc:	701a      	strb	r2, [r3, #0]

					searchD();
 800a6de:	f002 fe7f 	bl	800d3e0 <searchD>
					HAL_Delay(2000);
 800a6e2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800a6e6:	f7f6 fc99 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800a6ea:	4b2a      	ldr	r3, [pc, #168]	; (800a794 <perfect_pass+0x5d0>)
 800a6ec:	2200      	movs	r2, #0
 800a6ee:	701a      	strb	r2, [r3, #0]
 800a6f0:	4b28      	ldr	r3, [pc, #160]	; (800a794 <perfect_pass+0x5d0>)
 800a6f2:	781a      	ldrb	r2, [r3, #0]
 800a6f4:	4b26      	ldr	r3, [pc, #152]	; (800a790 <perfect_pass+0x5cc>)
 800a6f6:	701a      	strb	r2, [r3, #0]
					searchD();
 800a6f8:	f002 fe72 	bl	800d3e0 <searchD>

					degree_z = target_degree_z;
 800a6fc:	4b26      	ldr	r3, [pc, #152]	; (800a798 <perfect_pass+0x5d4>)
 800a6fe:	681b      	ldr	r3, [r3, #0]
 800a700:	4a26      	ldr	r2, [pc, #152]	; (800a79c <perfect_pass+0x5d8>)
 800a702:	6013      	str	r3, [r2, #0]
					HAL_Delay(2000);
 800a704:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800a708:	f7f6 fc88 	bl	800101c <HAL_Delay>


					//----a二次探索スラロームHigh Speed + 既知区間加速 Speed3----
					printf("Second Run. (Slalom)\n");
 800a70c:	4825      	ldr	r0, [pc, #148]	; (800a7a4 <perfect_pass+0x5e0>)
 800a70e:	f006 f9b1 	bl	8010a74 <puts>
					MF.FLAG.SCND = 1;
 800a712:	4a1a      	ldr	r2, [pc, #104]	; (800a77c <perfect_pass+0x5b8>)
 800a714:	8813      	ldrh	r3, [r2, #0]
 800a716:	f043 0320 	orr.w	r3, r3, #32
 800a71a:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800a71c:	4a17      	ldr	r2, [pc, #92]	; (800a77c <perfect_pass+0x5b8>)
 800a71e:	8813      	ldrh	r3, [r2, #0]
 800a720:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a724:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800a726:	4a15      	ldr	r2, [pc, #84]	; (800a77c <perfect_pass+0x5b8>)
 800a728:	8813      	ldrh	r3, [r2, #0]
 800a72a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800a72e:	8013      	strh	r3, [r2, #0]
					run_mode = HIGH;
 800a730:	4b13      	ldr	r3, [pc, #76]	; (800a780 <perfect_pass+0x5bc>)
 800a732:	2203      	movs	r2, #3
 800a734:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800a736:	4b13      	ldr	r3, [pc, #76]	; (800a784 <perfect_pass+0x5c0>)
 800a738:	2200      	movs	r2, #0
 800a73a:	701a      	strb	r2, [r3, #0]
					accel_hs = 20000;
 800a73c:	4b12      	ldr	r3, [pc, #72]	; (800a788 <perfect_pass+0x5c4>)
 800a73e:	f644 6220 	movw	r2, #20000	; 0x4e20
 800a742:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 2000;
 800a744:	4b11      	ldr	r3, [pc, #68]	; (800a78c <perfect_pass+0x5c8>)
 800a746:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800a74a:	801a      	strh	r2, [r3, #0]
					goal_x = GOAL_X;
 800a74c:	4b10      	ldr	r3, [pc, #64]	; (800a790 <perfect_pass+0x5cc>)
 800a74e:	2209      	movs	r2, #9
 800a750:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800a752:	4b10      	ldr	r3, [pc, #64]	; (800a794 <perfect_pass+0x5d0>)
 800a754:	2206      	movs	r2, #6
 800a756:	701a      	strb	r2, [r3, #0]

					searchD();
 800a758:	f002 fe42 	bl	800d3e0 <searchD>
					HAL_Delay(2000);
 800a75c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800a760:	f7f6 fc5c 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800a764:	4b0b      	ldr	r3, [pc, #44]	; (800a794 <perfect_pass+0x5d0>)
 800a766:	2200      	movs	r2, #0
 800a768:	701a      	strb	r2, [r3, #0]
 800a76a:	4b0a      	ldr	r3, [pc, #40]	; (800a794 <perfect_pass+0x5d0>)
 800a76c:	781a      	ldrb	r2, [r3, #0]
 800a76e:	4b08      	ldr	r3, [pc, #32]	; (800a790 <perfect_pass+0x5cc>)
 800a770:	701a      	strb	r2, [r3, #0]
					searchD();
 800a772:	f002 fe35 	bl	800d3e0 <searchD>
					searchF4();

					goal_x = 7;
					goal_y = 7;

*/					break;
 800a776:	e143      	b.n	800aa00 <perfect_pass+0x83c>
 800a778:	08011e04 	.word	0x08011e04
 800a77c:	20000f68 	.word	0x20000f68
 800a780:	20000456 	.word	0x20000456
 800a784:	200015c8 	.word	0x200015c8
 800a788:	20000454 	.word	0x20000454
 800a78c:	20000f7c 	.word	0x20000f7c
 800a790:	20000bb0 	.word	0x20000bb0
 800a794:	20000b4c 	.word	0x20000b4c
 800a798:	20000bf8 	.word	0x20000bf8
 800a79c:	20000b5c 	.word	0x20000b5c
 800a7a0:	08011e28 	.word	0x08011e28
 800a7a4:	08011e5c 	.word	0x08011e5c

					break;
				case 7:
					//----a一次探索スラローム走行----
					printf("First Run.\n");
 800a7a8:	4896      	ldr	r0, [pc, #600]	; (800aa04 <perfect_pass+0x840>)
 800a7aa:	f006 f963 	bl	8010a74 <puts>
					MF.FLAG.SCND = 0;
 800a7ae:	4a96      	ldr	r2, [pc, #600]	; (800aa08 <perfect_pass+0x844>)
 800a7b0:	8813      	ldrh	r3, [r2, #0]
 800a7b2:	f36f 1345 	bfc	r3, #5, #1
 800a7b6:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800a7b8:	4a93      	ldr	r2, [pc, #588]	; (800aa08 <perfect_pass+0x844>)
 800a7ba:	8813      	ldrh	r3, [r2, #0]
 800a7bc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a7c0:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 0;
 800a7c2:	4a91      	ldr	r2, [pc, #580]	; (800aa08 <perfect_pass+0x844>)
 800a7c4:	8813      	ldrh	r3, [r2, #0]
 800a7c6:	f36f 238a 	bfc	r3, #10, #1
 800a7ca:	8013      	strh	r3, [r2, #0]
					run_mode = MIDDLE;
 800a7cc:	4b8f      	ldr	r3, [pc, #572]	; (800aa0c <perfect_pass+0x848>)
 800a7ce:	2202      	movs	r2, #2
 800a7d0:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800a7d2:	4b8f      	ldr	r3, [pc, #572]	; (800aa10 <perfect_pass+0x84c>)
 800a7d4:	2200      	movs	r2, #0
 800a7d6:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 800a7d8:	4b8e      	ldr	r3, [pc, #568]	; (800aa14 <perfect_pass+0x850>)
 800a7da:	f241 3288 	movw	r2, #5000	; 0x1388
 800a7de:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 800;
 800a7e0:	4b8d      	ldr	r3, [pc, #564]	; (800aa18 <perfect_pass+0x854>)
 800a7e2:	f44f 7248 	mov.w	r2, #800	; 0x320
 800a7e6:	801a      	strh	r2, [r3, #0]

					goal_x = 7;
 800a7e8:	4b8c      	ldr	r3, [pc, #560]	; (800aa1c <perfect_pass+0x858>)
 800a7ea:	2207      	movs	r2, #7
 800a7ec:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800a7ee:	4b8c      	ldr	r3, [pc, #560]	; (800aa20 <perfect_pass+0x85c>)
 800a7f0:	2207      	movs	r2, #7
 800a7f2:	701a      	strb	r2, [r3, #0]

					get_base();
 800a7f4:	f005 faa4 	bl	800fd40 <get_base>

					searchC();
 800a7f8:	f002 fcc0 	bl	800d17c <searchC>
					HAL_Delay(2000);
 800a7fc:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800a800:	f7f6 fc0c 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800a804:	4b86      	ldr	r3, [pc, #536]	; (800aa20 <perfect_pass+0x85c>)
 800a806:	2200      	movs	r2, #0
 800a808:	701a      	strb	r2, [r3, #0]
 800a80a:	4b85      	ldr	r3, [pc, #532]	; (800aa20 <perfect_pass+0x85c>)
 800a80c:	781a      	ldrb	r2, [r3, #0]
 800a80e:	4b83      	ldr	r3, [pc, #524]	; (800aa1c <perfect_pass+0x858>)
 800a810:	701a      	strb	r2, [r3, #0]
					searchC();
 800a812:	f002 fcb3 	bl	800d17c <searchC>

					degree_z = target_degree_z;
 800a816:	4b83      	ldr	r3, [pc, #524]	; (800aa24 <perfect_pass+0x860>)
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	4a83      	ldr	r2, [pc, #524]	; (800aa28 <perfect_pass+0x864>)
 800a81c:	6013      	str	r3, [r2, #0]
					HAL_Delay(2000);
 800a81e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800a822:	f7f6 fbfb 	bl	800101c <HAL_Delay>


					//----a二次探索スラローム+既知区間加速走行 speed2----
					printf("Second Run. (Continuous)\n");
 800a826:	4881      	ldr	r0, [pc, #516]	; (800aa2c <perfect_pass+0x868>)
 800a828:	f006 f924 	bl	8010a74 <puts>
					MF.FLAG.SCND = 1;
 800a82c:	4a76      	ldr	r2, [pc, #472]	; (800aa08 <perfect_pass+0x844>)
 800a82e:	8813      	ldrh	r3, [r2, #0]
 800a830:	f043 0320 	orr.w	r3, r3, #32
 800a834:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800a836:	4a74      	ldr	r2, [pc, #464]	; (800aa08 <perfect_pass+0x844>)
 800a838:	8813      	ldrh	r3, [r2, #0]
 800a83a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a83e:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800a840:	4a71      	ldr	r2, [pc, #452]	; (800aa08 <perfect_pass+0x844>)
 800a842:	8813      	ldrh	r3, [r2, #0]
 800a844:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800a848:	8013      	strh	r3, [r2, #0]
					run_mode = MIDDLE;
 800a84a:	4b70      	ldr	r3, [pc, #448]	; (800aa0c <perfect_pass+0x848>)
 800a84c:	2202      	movs	r2, #2
 800a84e:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800a850:	4b6f      	ldr	r3, [pc, #444]	; (800aa10 <perfect_pass+0x84c>)
 800a852:	2200      	movs	r2, #0
 800a854:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 800a856:	4b6f      	ldr	r3, [pc, #444]	; (800aa14 <perfect_pass+0x850>)
 800a858:	f241 3288 	movw	r2, #5000	; 0x1388
 800a85c:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1200;
 800a85e:	4b6e      	ldr	r3, [pc, #440]	; (800aa18 <perfect_pass+0x854>)
 800a860:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 800a864:	801a      	strh	r2, [r3, #0]
					goal_x = 7;
 800a866:	4b6d      	ldr	r3, [pc, #436]	; (800aa1c <perfect_pass+0x858>)
 800a868:	2207      	movs	r2, #7
 800a86a:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800a86c:	4b6c      	ldr	r3, [pc, #432]	; (800aa20 <perfect_pass+0x85c>)
 800a86e:	2207      	movs	r2, #7
 800a870:	701a      	strb	r2, [r3, #0]

					searchD();
 800a872:	f002 fdb5 	bl	800d3e0 <searchD>
					HAL_Delay(2000);
 800a876:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800a87a:	f7f6 fbcf 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800a87e:	4b68      	ldr	r3, [pc, #416]	; (800aa20 <perfect_pass+0x85c>)
 800a880:	2200      	movs	r2, #0
 800a882:	701a      	strb	r2, [r3, #0]
 800a884:	4b66      	ldr	r3, [pc, #408]	; (800aa20 <perfect_pass+0x85c>)
 800a886:	781a      	ldrb	r2, [r3, #0]
 800a888:	4b64      	ldr	r3, [pc, #400]	; (800aa1c <perfect_pass+0x858>)
 800a88a:	701a      	strb	r2, [r3, #0]
					searchD();
 800a88c:	f002 fda8 	bl	800d3e0 <searchD>

					degree_z = target_degree_z;
 800a890:	4b64      	ldr	r3, [pc, #400]	; (800aa24 <perfect_pass+0x860>)
 800a892:	681b      	ldr	r3, [r3, #0]
 800a894:	4a64      	ldr	r2, [pc, #400]	; (800aa28 <perfect_pass+0x864>)
 800a896:	6013      	str	r3, [r2, #0]
					HAL_Delay(2000);
 800a898:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800a89c:	f7f6 fbbe 	bl	800101c <HAL_Delay>
					degree_z = target_degree_z;
					HAL_Delay(2000);

*/
					//----a二次探索スラロームHigh Speed + 既知区間加速----
					printf("Second Run. (Slalom)\n");
 800a8a0:	4863      	ldr	r0, [pc, #396]	; (800aa30 <perfect_pass+0x86c>)
 800a8a2:	f006 f8e7 	bl	8010a74 <puts>
					MF.FLAG.SCND = 1;
 800a8a6:	4a58      	ldr	r2, [pc, #352]	; (800aa08 <perfect_pass+0x844>)
 800a8a8:	8813      	ldrh	r3, [r2, #0]
 800a8aa:	f043 0320 	orr.w	r3, r3, #32
 800a8ae:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800a8b0:	4a55      	ldr	r2, [pc, #340]	; (800aa08 <perfect_pass+0x844>)
 800a8b2:	8813      	ldrh	r3, [r2, #0]
 800a8b4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a8b8:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800a8ba:	4a53      	ldr	r2, [pc, #332]	; (800aa08 <perfect_pass+0x844>)
 800a8bc:	8813      	ldrh	r3, [r2, #0]
 800a8be:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800a8c2:	8013      	strh	r3, [r2, #0]
					run_mode = HIGH;
 800a8c4:	4b51      	ldr	r3, [pc, #324]	; (800aa0c <perfect_pass+0x848>)
 800a8c6:	2203      	movs	r2, #3
 800a8c8:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800a8ca:	4b51      	ldr	r3, [pc, #324]	; (800aa10 <perfect_pass+0x84c>)
 800a8cc:	2200      	movs	r2, #0
 800a8ce:	701a      	strb	r2, [r3, #0]
					accel_hs = 10000;
 800a8d0:	4b50      	ldr	r3, [pc, #320]	; (800aa14 <perfect_pass+0x850>)
 800a8d2:	f242 7210 	movw	r2, #10000	; 0x2710
 800a8d6:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1600;
 800a8d8:	4b4f      	ldr	r3, [pc, #316]	; (800aa18 <perfect_pass+0x854>)
 800a8da:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800a8de:	801a      	strh	r2, [r3, #0]
					goal_x = 7;
 800a8e0:	4b4e      	ldr	r3, [pc, #312]	; (800aa1c <perfect_pass+0x858>)
 800a8e2:	2207      	movs	r2, #7
 800a8e4:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800a8e6:	4b4e      	ldr	r3, [pc, #312]	; (800aa20 <perfect_pass+0x85c>)
 800a8e8:	2207      	movs	r2, #7
 800a8ea:	701a      	strb	r2, [r3, #0]

					searchD();
 800a8ec:	f002 fd78 	bl	800d3e0 <searchD>
					HAL_Delay(2000);
 800a8f0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800a8f4:	f7f6 fb92 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800a8f8:	4b49      	ldr	r3, [pc, #292]	; (800aa20 <perfect_pass+0x85c>)
 800a8fa:	2200      	movs	r2, #0
 800a8fc:	701a      	strb	r2, [r3, #0]
 800a8fe:	4b48      	ldr	r3, [pc, #288]	; (800aa20 <perfect_pass+0x85c>)
 800a900:	781a      	ldrb	r2, [r3, #0]
 800a902:	4b46      	ldr	r3, [pc, #280]	; (800aa1c <perfect_pass+0x858>)
 800a904:	701a      	strb	r2, [r3, #0]
					searchD();
 800a906:	f002 fd6b 	bl	800d3e0 <searchD>

					degree_z = target_degree_z;
 800a90a:	4b46      	ldr	r3, [pc, #280]	; (800aa24 <perfect_pass+0x860>)
 800a90c:	681b      	ldr	r3, [r3, #0]
 800a90e:	4a46      	ldr	r2, [pc, #280]	; (800aa28 <perfect_pass+0x864>)
 800a910:	6013      	str	r3, [r2, #0]
					HAL_Delay(2000);
 800a912:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800a916:	f7f6 fb81 	bl	800101c <HAL_Delay>


					//----a二次探索スラロームHigh Speed + 既知区間加速 Speed2----
					printf("Second Run. (Slalom)\n");
 800a91a:	4845      	ldr	r0, [pc, #276]	; (800aa30 <perfect_pass+0x86c>)
 800a91c:	f006 f8aa 	bl	8010a74 <puts>
					MF.FLAG.SCND = 1;
 800a920:	4a39      	ldr	r2, [pc, #228]	; (800aa08 <perfect_pass+0x844>)
 800a922:	8813      	ldrh	r3, [r2, #0]
 800a924:	f043 0320 	orr.w	r3, r3, #32
 800a928:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800a92a:	4a37      	ldr	r2, [pc, #220]	; (800aa08 <perfect_pass+0x844>)
 800a92c:	8813      	ldrh	r3, [r2, #0]
 800a92e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a932:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800a934:	4a34      	ldr	r2, [pc, #208]	; (800aa08 <perfect_pass+0x844>)
 800a936:	8813      	ldrh	r3, [r2, #0]
 800a938:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800a93c:	8013      	strh	r3, [r2, #0]
					run_mode = HIGH;
 800a93e:	4b33      	ldr	r3, [pc, #204]	; (800aa0c <perfect_pass+0x848>)
 800a940:	2203      	movs	r2, #3
 800a942:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800a944:	4b32      	ldr	r3, [pc, #200]	; (800aa10 <perfect_pass+0x84c>)
 800a946:	2200      	movs	r2, #0
 800a948:	701a      	strb	r2, [r3, #0]
					accel_hs = 10000;
 800a94a:	4b32      	ldr	r3, [pc, #200]	; (800aa14 <perfect_pass+0x850>)
 800a94c:	f242 7210 	movw	r2, #10000	; 0x2710
 800a950:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 2000;
 800a952:	4b31      	ldr	r3, [pc, #196]	; (800aa18 <perfect_pass+0x854>)
 800a954:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800a958:	801a      	strh	r2, [r3, #0]

					goal_x = 7;
 800a95a:	4b30      	ldr	r3, [pc, #192]	; (800aa1c <perfect_pass+0x858>)
 800a95c:	2207      	movs	r2, #7
 800a95e:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800a960:	4b2f      	ldr	r3, [pc, #188]	; (800aa20 <perfect_pass+0x85c>)
 800a962:	2207      	movs	r2, #7
 800a964:	701a      	strb	r2, [r3, #0]

					searchD();
 800a966:	f002 fd3b 	bl	800d3e0 <searchD>
					HAL_Delay(2000);
 800a96a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800a96e:	f7f6 fb55 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800a972:	4b2b      	ldr	r3, [pc, #172]	; (800aa20 <perfect_pass+0x85c>)
 800a974:	2200      	movs	r2, #0
 800a976:	701a      	strb	r2, [r3, #0]
 800a978:	4b29      	ldr	r3, [pc, #164]	; (800aa20 <perfect_pass+0x85c>)
 800a97a:	781a      	ldrb	r2, [r3, #0]
 800a97c:	4b27      	ldr	r3, [pc, #156]	; (800aa1c <perfect_pass+0x858>)
 800a97e:	701a      	strb	r2, [r3, #0]
					searchD();
 800a980:	f002 fd2e 	bl	800d3e0 <searchD>

					degree_z = target_degree_z;
 800a984:	4b27      	ldr	r3, [pc, #156]	; (800aa24 <perfect_pass+0x860>)
 800a986:	681b      	ldr	r3, [r3, #0]
 800a988:	4a27      	ldr	r2, [pc, #156]	; (800aa28 <perfect_pass+0x864>)
 800a98a:	6013      	str	r3, [r2, #0]
					HAL_Delay(2000);
 800a98c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800a990:	f7f6 fb44 	bl	800101c <HAL_Delay>


					//----a二次探索スラロームHigh Speed + 既知区間加速 Speed3----
					printf("Second Run. (Slalom)\n");
 800a994:	4826      	ldr	r0, [pc, #152]	; (800aa30 <perfect_pass+0x86c>)
 800a996:	f006 f86d 	bl	8010a74 <puts>
					MF.FLAG.SCND = 1;
 800a99a:	4a1b      	ldr	r2, [pc, #108]	; (800aa08 <perfect_pass+0x844>)
 800a99c:	8813      	ldrh	r3, [r2, #0]
 800a99e:	f043 0320 	orr.w	r3, r3, #32
 800a9a2:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800a9a4:	4a18      	ldr	r2, [pc, #96]	; (800aa08 <perfect_pass+0x844>)
 800a9a6:	8813      	ldrh	r3, [r2, #0]
 800a9a8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a9ac:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800a9ae:	4a16      	ldr	r2, [pc, #88]	; (800aa08 <perfect_pass+0x844>)
 800a9b0:	8813      	ldrh	r3, [r2, #0]
 800a9b2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800a9b6:	8013      	strh	r3, [r2, #0]
					run_mode = HIGH;
 800a9b8:	4b14      	ldr	r3, [pc, #80]	; (800aa0c <perfect_pass+0x848>)
 800a9ba:	2203      	movs	r2, #3
 800a9bc:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800a9be:	4b14      	ldr	r3, [pc, #80]	; (800aa10 <perfect_pass+0x84c>)
 800a9c0:	2200      	movs	r2, #0
 800a9c2:	701a      	strb	r2, [r3, #0]
					accel_hs = 20000;
 800a9c4:	4b13      	ldr	r3, [pc, #76]	; (800aa14 <perfect_pass+0x850>)
 800a9c6:	f644 6220 	movw	r2, #20000	; 0x4e20
 800a9ca:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 2500;
 800a9cc:	4b12      	ldr	r3, [pc, #72]	; (800aa18 <perfect_pass+0x854>)
 800a9ce:	f640 12c4 	movw	r2, #2500	; 0x9c4
 800a9d2:	801a      	strh	r2, [r3, #0]

					goal_x = 7;
 800a9d4:	4b11      	ldr	r3, [pc, #68]	; (800aa1c <perfect_pass+0x858>)
 800a9d6:	2207      	movs	r2, #7
 800a9d8:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800a9da:	4b11      	ldr	r3, [pc, #68]	; (800aa20 <perfect_pass+0x85c>)
 800a9dc:	2207      	movs	r2, #7
 800a9de:	701a      	strb	r2, [r3, #0]

					searchD();
 800a9e0:	f002 fcfe 	bl	800d3e0 <searchD>
					HAL_Delay(2000);
 800a9e4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800a9e8:	f7f6 fb18 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800a9ec:	4b0c      	ldr	r3, [pc, #48]	; (800aa20 <perfect_pass+0x85c>)
 800a9ee:	2200      	movs	r2, #0
 800a9f0:	701a      	strb	r2, [r3, #0]
 800a9f2:	4b0b      	ldr	r3, [pc, #44]	; (800aa20 <perfect_pass+0x85c>)
 800a9f4:	781a      	ldrb	r2, [r3, #0]
 800a9f6:	4b09      	ldr	r3, [pc, #36]	; (800aa1c <perfect_pass+0x858>)
 800a9f8:	701a      	strb	r2, [r3, #0]
					searchD();
 800a9fa:	f002 fcf1 	bl	800d3e0 <searchD>
					searchF4();

					goal_x = 7;
					goal_y = 7;

*/					break;
 800a9fe:	bf00      	nop
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 800aa00:	f7ff bbe9 	b.w	800a1d6 <perfect_pass+0x12>
 800aa04:	08011e04 	.word	0x08011e04
 800aa08:	20000f68 	.word	0x20000f68
 800aa0c:	20000456 	.word	0x20000456
 800aa10:	200015c8 	.word	0x200015c8
 800aa14:	20000454 	.word	0x20000454
 800aa18:	20000f7c 	.word	0x20000f7c
 800aa1c:	20000bb0 	.word	0x20000bb0
 800aa20:	20000b4c 	.word	0x20000b4c
 800aa24:	20000bf8 	.word	0x20000bf8
 800aa28:	20000b5c 	.word	0x20000b5c
 800aa2c:	08011e28 	.word	0x08011e28
 800aa30:	08011e5c 	.word	0x08011e5c

0800aa34 <eeprom_enable_write>:
//eeprom_enable_write
// eepromとして使うflashメモリ領域をeraseし，書き込みを有効にする
// 引数：なし
// 戻り値：問題が起こらなければHAL_OKを返す
//+++++++++++++++++++++++++++++++++++++++++++++++
HAL_StatusTypeDef eeprom_enable_write(void){
 800aa34:	b580      	push	{r7, lr}
 800aa36:	b088      	sub	sp, #32
 800aa38:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status;
  FLASH_EraseInitTypeDef EraseInitStruct;
  uint32_t PageError = 0;
 800aa3a:	2300      	movs	r3, #0
 800aa3c:	607b      	str	r3, [r7, #4]
  EraseInitStruct.TypeErase = FLASH_TYPEERASE_SECTORS;
 800aa3e:	2300      	movs	r3, #0
 800aa40:	60bb      	str	r3, [r7, #8]
  //EraseInitStruct.Banks = FLASH_BANK_1;
  //EraseInitStruct.Sector = EEPROM_START_ADDRESS;
  EraseInitStruct.Sector = FLASH_SECTOR_11;
 800aa42:	230b      	movs	r3, #11
 800aa44:	613b      	str	r3, [r7, #16]
  EraseInitStruct.NbSectors = 1;
 800aa46:	2301      	movs	r3, #1
 800aa48:	617b      	str	r3, [r7, #20]
  EraseInitStruct.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 800aa4a:	2302      	movs	r3, #2
 800aa4c:	61bb      	str	r3, [r7, #24]

  status = HAL_FLASH_Unlock();
 800aa4e:	f7f7 f827 	bl	8001aa0 <HAL_FLASH_Unlock>
 800aa52:	4603      	mov	r3, r0
 800aa54:	77fb      	strb	r3, [r7, #31]
  if(status != HAL_OK) return status;
 800aa56:	7ffb      	ldrb	r3, [r7, #31]
 800aa58:	2b00      	cmp	r3, #0
 800aa5a:	d001      	beq.n	800aa60 <eeprom_enable_write+0x2c>
 800aa5c:	7ffb      	ldrb	r3, [r7, #31]
 800aa5e:	e009      	b.n	800aa74 <eeprom_enable_write+0x40>
  status = HAL_FLASHEx_Erase(&EraseInitStruct, &PageError);
 800aa60:	1d3a      	adds	r2, r7, #4
 800aa62:	f107 0308 	add.w	r3, r7, #8
 800aa66:	4611      	mov	r1, r2
 800aa68:	4618      	mov	r0, r3
 800aa6a:	f7f7 f977 	bl	8001d5c <HAL_FLASHEx_Erase>
 800aa6e:	4603      	mov	r3, r0
 800aa70:	77fb      	strb	r3, [r7, #31]
  return status;
 800aa72:	7ffb      	ldrb	r3, [r7, #31]
}
 800aa74:	4618      	mov	r0, r3
 800aa76:	3720      	adds	r7, #32
 800aa78:	46bd      	mov	sp, r7
 800aa7a:	bd80      	pop	{r7, pc}

0800aa7c <eeprom_disable_write>:
//eeprom_disable_write
// eepromとして使うflashメモリ領域への書き込みを無効にする
// 引数：なし
// 戻り値：問題が起こらなければHAL_OKを返す
//+++++++++++++++++++++++++++++++++++++++++++++++
HAL_StatusTypeDef eeprom_disable_write(void){
 800aa7c:	b580      	push	{r7, lr}
 800aa7e:	af00      	add	r7, sp, #0
  return HAL_FLASH_Lock();
 800aa80:	f7f7 f830 	bl	8001ae4 <HAL_FLASH_Lock>
 800aa84:	4603      	mov	r3, r0
}
 800aa86:	4618      	mov	r0, r3
 800aa88:	bd80      	pop	{r7, pc}

0800aa8a <eeprom_write_halfword>:
//eeprom_write_halfword
// eepromとして使うflashメモリ領域へ2バイトの値を書き込む
// 引数：address …… eepromとして使うflashメモリ領域の先頭アドレスからのオフセット，data …… 書き込みたいuin16_t型データ
// 戻り値：問題が起こらなければHAL_OKを返す
//+++++++++++++++++++++++++++++++++++++++++++++++
HAL_StatusTypeDef eeprom_write_halfword(uint32_t address, uint16_t data){
 800aa8a:	b590      	push	{r4, r7, lr}
 800aa8c:	b085      	sub	sp, #20
 800aa8e:	af00      	add	r7, sp, #0
 800aa90:	6078      	str	r0, [r7, #4]
 800aa92:	460b      	mov	r3, r1
 800aa94:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status;
  address = address*2 + EEPROM_START_ADDRESS;
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	f103 6380 	add.w	r3, r3, #67108864	; 0x4000000
 800aa9c:	f503 23e0 	add.w	r3, r3, #458752	; 0x70000
 800aaa0:	005b      	lsls	r3, r3, #1
 800aaa2:	607b      	str	r3, [r7, #4]
  status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, address, data);
 800aaa4:	887b      	ldrh	r3, [r7, #2]
 800aaa6:	f04f 0400 	mov.w	r4, #0
 800aaaa:	461a      	mov	r2, r3
 800aaac:	4623      	mov	r3, r4
 800aaae:	6879      	ldr	r1, [r7, #4]
 800aab0:	2001      	movs	r0, #1
 800aab2:	f7f6 ffa1 	bl	80019f8 <HAL_FLASH_Program>
 800aab6:	4603      	mov	r3, r0
 800aab8:	73fb      	strb	r3, [r7, #15]
  return status;
 800aaba:	7bfb      	ldrb	r3, [r7, #15]
}
 800aabc:	4618      	mov	r0, r3
 800aabe:	3714      	adds	r7, #20
 800aac0:	46bd      	mov	sp, r7
 800aac2:	bd90      	pop	{r4, r7, pc}

0800aac4 <eeprom_read_halfword>:
//eeprom_read_halfword
// eepromとして使うflashメモリ領域から2バイトの値を読み込む
// 引数：address …… eepromとして使うflashメモリ領域の先頭アドレスからのオフセット
// 戻り値：読み込んだuin16_t型データ
//+++++++++++++++++++++++++++++++++++++++++++++++
uint16_t eeprom_read_halfword(uint32_t address){
 800aac4:	b480      	push	{r7}
 800aac6:	b085      	sub	sp, #20
 800aac8:	af00      	add	r7, sp, #0
 800aaca:	6078      	str	r0, [r7, #4]
  uint16_t val = 0;
 800aacc:	2300      	movs	r3, #0
 800aace:	81fb      	strh	r3, [r7, #14]
  address = address*2 + EEPROM_START_ADDRESS;
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	f103 6380 	add.w	r3, r3, #67108864	; 0x4000000
 800aad6:	f503 23e0 	add.w	r3, r3, #458752	; 0x70000
 800aada:	005b      	lsls	r3, r3, #1
 800aadc:	607b      	str	r3, [r7, #4]
  val = *(__IO uint16_t *)address;
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	881b      	ldrh	r3, [r3, #0]
 800aae2:	81fb      	strh	r3, [r7, #14]
  return val;
 800aae4:	89fb      	ldrh	r3, [r7, #14]
}
 800aae6:	4618      	mov	r0, r3
 800aae8:	3714      	adds	r7, #20
 800aaea:	46bd      	mov	sp, r7
 800aaec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaf0:	4770      	bx	lr
	...

0800aaf4 <gyro_init>:
#include "global.h"

SPI_HandleTypeDef hspi3;


void gyro_init(void){
 800aaf4:	b580      	push	{r7, lr}
 800aaf6:	b082      	sub	sp, #8
 800aaf8:	af00      	add	r7, sp, #0
  uint8_t who_am_i;

  HAL_Delay(100); 					// wait start up
 800aafa:	2064      	movs	r0, #100	; 0x64
 800aafc:	f7f6 fa8e 	bl	800101c <HAL_Delay>
  who_am_i = read_byte(WHO_AM_I); 	// 1. read who am i
 800ab00:	2075      	movs	r0, #117	; 0x75
 800ab02:	f000 f82f 	bl	800ab64 <read_byte>
 800ab06:	4603      	mov	r3, r0
 800ab08:	71fb      	strb	r3, [r7, #7]
  printf("0x%x\r\n",who_am_i); 		// 2. check who am i value
 800ab0a:	79fb      	ldrb	r3, [r7, #7]
 800ab0c:	4619      	mov	r1, r3
 800ab0e:	4813      	ldr	r0, [pc, #76]	; (800ab5c <gyro_init+0x68>)
 800ab10:	f005 ff3c 	bl	801098c <iprintf>

  // 2. error check
  if (who_am_i != 0x98){
 800ab14:	79fb      	ldrb	r3, [r7, #7]
 800ab16:	2b98      	cmp	r3, #152	; 0x98
 800ab18:	d003      	beq.n	800ab22 <gyro_init+0x2e>
    while(1){
      printf("gyro_error\r");
 800ab1a:	4811      	ldr	r0, [pc, #68]	; (800ab60 <gyro_init+0x6c>)
 800ab1c:	f005 ff36 	bl	801098c <iprintf>
 800ab20:	e7fb      	b.n	800ab1a <gyro_init+0x26>
    }
  }

  HAL_Delay(50); // wait
 800ab22:	2032      	movs	r0, #50	; 0x32
 800ab24:	f7f6 fa7a 	bl	800101c <HAL_Delay>
  write_byte(PWR_MGMT_1, 0x00); 	// 3. set pwr_might
 800ab28:	2100      	movs	r1, #0
 800ab2a:	206b      	movs	r0, #107	; 0x6b
 800ab2c:	f000 f846 	bl	800abbc <write_byte>

  HAL_Delay(50);
 800ab30:	2032      	movs	r0, #50	; 0x32
 800ab32:	f7f6 fa73 	bl	800101c <HAL_Delay>
  write_byte(CONFIG, 0x00); 		// 4. set config
 800ab36:	2100      	movs	r1, #0
 800ab38:	201a      	movs	r0, #26
 800ab3a:	f000 f83f 	bl	800abbc <write_byte>

  HAL_Delay(50);
 800ab3e:	2032      	movs	r0, #50	; 0x32
 800ab40:	f7f6 fa6c 	bl	800101c <HAL_Delay>
  write_byte(GYRO_CONFIG, 0x18); 	// 5. set gyro config
 800ab44:	2118      	movs	r1, #24
 800ab46:	201b      	movs	r0, #27
 800ab48:	f000 f838 	bl	800abbc <write_byte>

  HAL_Delay(50);
 800ab4c:	2032      	movs	r0, #50	; 0x32
 800ab4e:	f7f6 fa65 	bl	800101c <HAL_Delay>
}
 800ab52:	bf00      	nop
 800ab54:	3708      	adds	r7, #8
 800ab56:	46bd      	mov	sp, r7
 800ab58:	bd80      	pop	{r7, pc}
 800ab5a:	bf00      	nop
 800ab5c:	08011f3c 	.word	0x08011f3c
 800ab60:	08011f44 	.word	0x08011f44

0800ab64 <read_byte>:


uint8_t read_byte(uint8_t reg){
 800ab64:	b580      	push	{r7, lr}
 800ab66:	b084      	sub	sp, #16
 800ab68:	af00      	add	r7, sp, #0
 800ab6a:	4603      	mov	r3, r0
 800ab6c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret,val;
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET ); 	//cs = Low;
 800ab6e:	2200      	movs	r2, #0
 800ab70:	2104      	movs	r1, #4
 800ab72:	4810      	ldr	r0, [pc, #64]	; (800abb4 <read_byte+0x50>)
 800ab74:	f7f7 fbc6 	bl	8002304 <HAL_GPIO_WritePin>
  ret = reg | 0x80;  // MSB = 1
 800ab78:	79fb      	ldrb	r3, [r7, #7]
 800ab7a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800ab7e:	b2db      	uxtb	r3, r3
 800ab80:	73fb      	strb	r3, [r7, #15]
  HAL_SPI_Transmit(&hspi3, &ret,1,100); 					// sent 1byte(address)
 800ab82:	f107 010f 	add.w	r1, r7, #15
 800ab86:	2364      	movs	r3, #100	; 0x64
 800ab88:	2201      	movs	r2, #1
 800ab8a:	480b      	ldr	r0, [pc, #44]	; (800abb8 <read_byte+0x54>)
 800ab8c:	f7f8 f842 	bl	8002c14 <HAL_SPI_Transmit>
  HAL_SPI_Receive(&hspi3,&val,1,100); 						// read 1byte(read data)
 800ab90:	f107 010e 	add.w	r1, r7, #14
 800ab94:	2364      	movs	r3, #100	; 0x64
 800ab96:	2201      	movs	r2, #1
 800ab98:	4807      	ldr	r0, [pc, #28]	; (800abb8 <read_byte+0x54>)
 800ab9a:	f7f8 f96f 	bl	8002e7c <HAL_SPI_Receive>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_SET );  	//cs = High;
 800ab9e:	2201      	movs	r2, #1
 800aba0:	2104      	movs	r1, #4
 800aba2:	4804      	ldr	r0, [pc, #16]	; (800abb4 <read_byte+0x50>)
 800aba4:	f7f7 fbae 	bl	8002304 <HAL_GPIO_WritePin>
  return val;
 800aba8:	7bbb      	ldrb	r3, [r7, #14]
}
 800abaa:	4618      	mov	r0, r3
 800abac:	3710      	adds	r7, #16
 800abae:	46bd      	mov	sp, r7
 800abb0:	bd80      	pop	{r7, pc}
 800abb2:	bf00      	nop
 800abb4:	40020c00 	.word	0x40020c00
 800abb8:	20000144 	.word	0x20000144

0800abbc <write_byte>:


void write_byte(uint8_t reg, uint8_t val){
 800abbc:	b580      	push	{r7, lr}
 800abbe:	b084      	sub	sp, #16
 800abc0:	af00      	add	r7, sp, #0
 800abc2:	4603      	mov	r3, r0
 800abc4:	460a      	mov	r2, r1
 800abc6:	71fb      	strb	r3, [r7, #7]
 800abc8:	4613      	mov	r3, r2
 800abca:	71bb      	strb	r3, [r7, #6]
  uint8_t ret;
  ret = reg & 0x7F ; // MSB = 0
 800abcc:	79fb      	ldrb	r3, [r7, #7]
 800abce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800abd2:	b2db      	uxtb	r3, r3
 800abd4:	73fb      	strb	r3, [r7, #15]
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET); 	// cs = Low;
 800abd6:	2200      	movs	r2, #0
 800abd8:	2104      	movs	r1, #4
 800abda:	480c      	ldr	r0, [pc, #48]	; (800ac0c <write_byte+0x50>)
 800abdc:	f7f7 fb92 	bl	8002304 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi3, &ret,1,100); 					// sent 1byte(address)
 800abe0:	f107 010f 	add.w	r1, r7, #15
 800abe4:	2364      	movs	r3, #100	; 0x64
 800abe6:	2201      	movs	r2, #1
 800abe8:	4809      	ldr	r0, [pc, #36]	; (800ac10 <write_byte+0x54>)
 800abea:	f7f8 f813 	bl	8002c14 <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi3, &val,1,100); 					// read 1byte(write data)
 800abee:	1db9      	adds	r1, r7, #6
 800abf0:	2364      	movs	r3, #100	; 0x64
 800abf2:	2201      	movs	r2, #1
 800abf4:	4806      	ldr	r0, [pc, #24]	; (800ac10 <write_byte+0x54>)
 800abf6:	f7f8 f80d 	bl	8002c14 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_SET); 		// cs = High;
 800abfa:	2201      	movs	r2, #1
 800abfc:	2104      	movs	r1, #4
 800abfe:	4803      	ldr	r0, [pc, #12]	; (800ac0c <write_byte+0x50>)
 800ac00:	f7f7 fb80 	bl	8002304 <HAL_GPIO_WritePin>
}
 800ac04:	bf00      	nop
 800ac06:	3710      	adds	r7, #16
 800ac08:	46bd      	mov	sp, r7
 800ac0a:	bd80      	pop	{r7, pc}
 800ac0c:	40020c00 	.word	0x40020c00
 800ac10:	20000144 	.word	0x20000144

0800ac14 <accel_read_x>:


float accel_read_x(void){
 800ac14:	b590      	push	{r4, r7, lr}
 800ac16:	b083      	sub	sp, #12
 800ac18:	af00      	add	r7, sp, #0
  int16_t accel_x;
  float accel;

  // H:8bit shift, Link h and l
  accel_x = (int16_t)((int16_t)(read_byte(ACCEL_XOUT_H) << 8) | read_byte(ACCEL_XOUT_L));
 800ac1a:	203b      	movs	r0, #59	; 0x3b
 800ac1c:	f7ff ffa2 	bl	800ab64 <read_byte>
 800ac20:	4603      	mov	r3, r0
 800ac22:	021b      	lsls	r3, r3, #8
 800ac24:	b21c      	sxth	r4, r3
 800ac26:	203c      	movs	r0, #60	; 0x3c
 800ac28:	f7ff ff9c 	bl	800ab64 <read_byte>
 800ac2c:	4603      	mov	r3, r0
 800ac2e:	b21b      	sxth	r3, r3
 800ac30:	4323      	orrs	r3, r4
 800ac32:	80fb      	strh	r3, [r7, #6]

  accel = (float)(accel_x / ACCEL_FACTOR); // dps to accel
 800ac34:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	da01      	bge.n	800ac40 <accel_read_x+0x2c>
 800ac3c:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 800ac40:	12db      	asrs	r3, r3, #11
 800ac42:	b21b      	sxth	r3, r3
 800ac44:	ee07 3a90 	vmov	s15, r3
 800ac48:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ac4c:	edc7 7a00 	vstr	s15, [r7]
  return accel;
 800ac50:	683b      	ldr	r3, [r7, #0]
 800ac52:	ee07 3a90 	vmov	s15, r3
}
 800ac56:	eeb0 0a67 	vmov.f32	s0, s15
 800ac5a:	370c      	adds	r7, #12
 800ac5c:	46bd      	mov	sp, r7
 800ac5e:	bd90      	pop	{r4, r7, pc}

0800ac60 <accel_read_y>:


float accel_read_y(void){
 800ac60:	b590      	push	{r4, r7, lr}
 800ac62:	b083      	sub	sp, #12
 800ac64:	af00      	add	r7, sp, #0
  int16_t accel_y;
  float accel;

  // H:8bit shift, Link h and l
  accel_y = (int16_t)((int16_t)(read_byte(ACCEL_YOUT_H) << 8) | read_byte(ACCEL_YOUT_L));
 800ac66:	203d      	movs	r0, #61	; 0x3d
 800ac68:	f7ff ff7c 	bl	800ab64 <read_byte>
 800ac6c:	4603      	mov	r3, r0
 800ac6e:	021b      	lsls	r3, r3, #8
 800ac70:	b21c      	sxth	r4, r3
 800ac72:	203e      	movs	r0, #62	; 0x3e
 800ac74:	f7ff ff76 	bl	800ab64 <read_byte>
 800ac78:	4603      	mov	r3, r0
 800ac7a:	b21b      	sxth	r3, r3
 800ac7c:	4323      	orrs	r3, r4
 800ac7e:	80fb      	strh	r3, [r7, #6]

  accel = (float)(accel_y / ACCEL_FACTOR); // dps to accel
 800ac80:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800ac84:	2b00      	cmp	r3, #0
 800ac86:	da01      	bge.n	800ac8c <accel_read_y+0x2c>
 800ac88:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 800ac8c:	12db      	asrs	r3, r3, #11
 800ac8e:	b21b      	sxth	r3, r3
 800ac90:	ee07 3a90 	vmov	s15, r3
 800ac94:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ac98:	edc7 7a00 	vstr	s15, [r7]
  return accel;
 800ac9c:	683b      	ldr	r3, [r7, #0]
 800ac9e:	ee07 3a90 	vmov	s15, r3
}
 800aca2:	eeb0 0a67 	vmov.f32	s0, s15
 800aca6:	370c      	adds	r7, #12
 800aca8:	46bd      	mov	sp, r7
 800acaa:	bd90      	pop	{r4, r7, pc}

0800acac <accel_read_z>:


float accel_read_z(void){
 800acac:	b590      	push	{r4, r7, lr}
 800acae:	b083      	sub	sp, #12
 800acb0:	af00      	add	r7, sp, #0
  int16_t accel_z;
  float accel;

  // H:8bit shift, Link h and l
  accel_z = (int16_t)((int16_t)(read_byte(ACCEL_ZOUT_H) << 8) | read_byte(ACCEL_ZOUT_L));
 800acb2:	203f      	movs	r0, #63	; 0x3f
 800acb4:	f7ff ff56 	bl	800ab64 <read_byte>
 800acb8:	4603      	mov	r3, r0
 800acba:	021b      	lsls	r3, r3, #8
 800acbc:	b21c      	sxth	r4, r3
 800acbe:	2040      	movs	r0, #64	; 0x40
 800acc0:	f7ff ff50 	bl	800ab64 <read_byte>
 800acc4:	4603      	mov	r3, r0
 800acc6:	b21b      	sxth	r3, r3
 800acc8:	4323      	orrs	r3, r4
 800acca:	80fb      	strh	r3, [r7, #6]

  accel = (float)(accel_z / ACCEL_FACTOR-7); // dps to accel
 800accc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800acd0:	2b00      	cmp	r3, #0
 800acd2:	da01      	bge.n	800acd8 <accel_read_z+0x2c>
 800acd4:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 800acd8:	12db      	asrs	r3, r3, #11
 800acda:	b21b      	sxth	r3, r3
 800acdc:	3b07      	subs	r3, #7
 800acde:	ee07 3a90 	vmov	s15, r3
 800ace2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ace6:	edc7 7a00 	vstr	s15, [r7]
  return accel;
 800acea:	683b      	ldr	r3, [r7, #0]
 800acec:	ee07 3a90 	vmov	s15, r3
}
 800acf0:	eeb0 0a67 	vmov.f32	s0, s15
 800acf4:	370c      	adds	r7, #12
 800acf6:	46bd      	mov	sp, r7
 800acf8:	bd90      	pop	{r4, r7, pc}
 800acfa:	0000      	movs	r0, r0
 800acfc:	0000      	movs	r0, r0
	...

0800ad00 <gyro_read_x>:


float gyro_read_x(void){
 800ad00:	b590      	push	{r4, r7, lr}
 800ad02:	b083      	sub	sp, #12
 800ad04:	af00      	add	r7, sp, #0
  int16_t gyro_x;
  float omega;

  // H:8bit shift, Link h and l
  gyro_x = (int16_t)((int16_t)(read_byte(GYRO_XOUT_H) << 8) | read_byte(GYRO_XOUT_L));
 800ad06:	2043      	movs	r0, #67	; 0x43
 800ad08:	f7ff ff2c 	bl	800ab64 <read_byte>
 800ad0c:	4603      	mov	r3, r0
 800ad0e:	021b      	lsls	r3, r3, #8
 800ad10:	b21c      	sxth	r4, r3
 800ad12:	2044      	movs	r0, #68	; 0x44
 800ad14:	f7ff ff26 	bl	800ab64 <read_byte>
 800ad18:	4603      	mov	r3, r0
 800ad1a:	b21b      	sxth	r3, r3
 800ad1c:	4323      	orrs	r3, r4
 800ad1e:	80fb      	strh	r3, [r7, #6]

  omega = (float)(gyro_x / GYRO_FACTOR+1.4); // dps to deg/sec
 800ad20:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800ad24:	4618      	mov	r0, r3
 800ad26:	f7f5 fbf5 	bl	8000514 <__aeabi_i2d>
 800ad2a:	a30f      	add	r3, pc, #60	; (adr r3, 800ad68 <gyro_read_x+0x68>)
 800ad2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad30:	f7f5 fd84 	bl	800083c <__aeabi_ddiv>
 800ad34:	4603      	mov	r3, r0
 800ad36:	460c      	mov	r4, r1
 800ad38:	4618      	mov	r0, r3
 800ad3a:	4621      	mov	r1, r4
 800ad3c:	a30c      	add	r3, pc, #48	; (adr r3, 800ad70 <gyro_read_x+0x70>)
 800ad3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad42:	f7f5 fa9b 	bl	800027c <__adddf3>
 800ad46:	4603      	mov	r3, r0
 800ad48:	460c      	mov	r4, r1
 800ad4a:	4618      	mov	r0, r3
 800ad4c:	4621      	mov	r1, r4
 800ad4e:	f7f5 ff23 	bl	8000b98 <__aeabi_d2f>
 800ad52:	4603      	mov	r3, r0
 800ad54:	603b      	str	r3, [r7, #0]
  return omega;
 800ad56:	683b      	ldr	r3, [r7, #0]
 800ad58:	ee07 3a90 	vmov	s15, r3
}
 800ad5c:	eeb0 0a67 	vmov.f32	s0, s15
 800ad60:	370c      	adds	r7, #12
 800ad62:	46bd      	mov	sp, r7
 800ad64:	bd90      	pop	{r4, r7, pc}
 800ad66:	bf00      	nop
 800ad68:	66666666 	.word	0x66666666
 800ad6c:	40306666 	.word	0x40306666
 800ad70:	66666666 	.word	0x66666666
 800ad74:	3ff66666 	.word	0x3ff66666

0800ad78 <gyro_read_y>:


float gyro_read_y(void){
 800ad78:	b590      	push	{r4, r7, lr}
 800ad7a:	b083      	sub	sp, #12
 800ad7c:	af00      	add	r7, sp, #0
  int16_t gyro_y;
  float omega;

  // H:8bit shift, Link h and l
  gyro_y = (int16_t)((int16_t)(read_byte(GYRO_YOUT_H) << 8) | read_byte(GYRO_YOUT_L));
 800ad7e:	2045      	movs	r0, #69	; 0x45
 800ad80:	f7ff fef0 	bl	800ab64 <read_byte>
 800ad84:	4603      	mov	r3, r0
 800ad86:	021b      	lsls	r3, r3, #8
 800ad88:	b21c      	sxth	r4, r3
 800ad8a:	2046      	movs	r0, #70	; 0x46
 800ad8c:	f7ff feea 	bl	800ab64 <read_byte>
 800ad90:	4603      	mov	r3, r0
 800ad92:	b21b      	sxth	r3, r3
 800ad94:	4323      	orrs	r3, r4
 800ad96:	80fb      	strh	r3, [r7, #6]

  omega = (float)(gyro_y / GYRO_FACTOR-0.75); // dps to deg/sec
 800ad98:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800ad9c:	4618      	mov	r0, r3
 800ad9e:	f7f5 fbb9 	bl	8000514 <__aeabi_i2d>
 800ada2:	a310      	add	r3, pc, #64	; (adr r3, 800ade4 <gyro_read_y+0x6c>)
 800ada4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ada8:	f7f5 fd48 	bl	800083c <__aeabi_ddiv>
 800adac:	4603      	mov	r3, r0
 800adae:	460c      	mov	r4, r1
 800adb0:	4618      	mov	r0, r3
 800adb2:	4621      	mov	r1, r4
 800adb4:	f04f 0200 	mov.w	r2, #0
 800adb8:	4b09      	ldr	r3, [pc, #36]	; (800ade0 <gyro_read_y+0x68>)
 800adba:	f7f5 fa5d 	bl	8000278 <__aeabi_dsub>
 800adbe:	4603      	mov	r3, r0
 800adc0:	460c      	mov	r4, r1
 800adc2:	4618      	mov	r0, r3
 800adc4:	4621      	mov	r1, r4
 800adc6:	f7f5 fee7 	bl	8000b98 <__aeabi_d2f>
 800adca:	4603      	mov	r3, r0
 800adcc:	603b      	str	r3, [r7, #0]
  return omega;
 800adce:	683b      	ldr	r3, [r7, #0]
 800add0:	ee07 3a90 	vmov	s15, r3
}
 800add4:	eeb0 0a67 	vmov.f32	s0, s15
 800add8:	370c      	adds	r7, #12
 800adda:	46bd      	mov	sp, r7
 800addc:	bd90      	pop	{r4, r7, pc}
 800adde:	bf00      	nop
 800ade0:	3fe80000 	.word	0x3fe80000
 800ade4:	66666666 	.word	0x66666666
 800ade8:	40306666 	.word	0x40306666
 800adec:	00000000 	.word	0x00000000

0800adf0 <gyro_read_z>:


float gyro_read_z(void){
 800adf0:	b5b0      	push	{r4, r5, r7, lr}
 800adf2:	b082      	sub	sp, #8
 800adf4:	af00      	add	r7, sp, #0
  int16_t gyro_z;
  float omega;

  // H:8bit shift, Link h and l
  gyro_z = (int16_t)((int16_t)(read_byte(GYRO_ZOUT_H) << 8) | read_byte(GYRO_ZOUT_L));
 800adf6:	2047      	movs	r0, #71	; 0x47
 800adf8:	f7ff feb4 	bl	800ab64 <read_byte>
 800adfc:	4603      	mov	r3, r0
 800adfe:	021b      	lsls	r3, r3, #8
 800ae00:	b21c      	sxth	r4, r3
 800ae02:	2048      	movs	r0, #72	; 0x48
 800ae04:	f7ff feae 	bl	800ab64 <read_byte>
 800ae08:	4603      	mov	r3, r0
 800ae0a:	b21b      	sxth	r3, r3
 800ae0c:	4323      	orrs	r3, r4
 800ae0e:	80fb      	strh	r3, [r7, #6]

//  omega = (float)(gyro_z / GYRO_FACTOR+1.15); // dps to deg/sec
  omega = (float)(gyro_z / GYRO_FACTOR-gyro_drift_value); // dps to deg/sec
 800ae10:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800ae14:	4618      	mov	r0, r3
 800ae16:	f7f5 fb7d 	bl	8000514 <__aeabi_i2d>
 800ae1a:	a314      	add	r3, pc, #80	; (adr r3, 800ae6c <gyro_read_z+0x7c>)
 800ae1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae20:	f7f5 fd0c 	bl	800083c <__aeabi_ddiv>
 800ae24:	4603      	mov	r3, r0
 800ae26:	460c      	mov	r4, r1
 800ae28:	4625      	mov	r5, r4
 800ae2a:	461c      	mov	r4, r3
 800ae2c:	4b0e      	ldr	r3, [pc, #56]	; (800ae68 <gyro_read_z+0x78>)
 800ae2e:	681b      	ldr	r3, [r3, #0]
 800ae30:	4618      	mov	r0, r3
 800ae32:	f7f5 fb81 	bl	8000538 <__aeabi_f2d>
 800ae36:	4602      	mov	r2, r0
 800ae38:	460b      	mov	r3, r1
 800ae3a:	4620      	mov	r0, r4
 800ae3c:	4629      	mov	r1, r5
 800ae3e:	f7f5 fa1b 	bl	8000278 <__aeabi_dsub>
 800ae42:	4603      	mov	r3, r0
 800ae44:	460c      	mov	r4, r1
 800ae46:	4618      	mov	r0, r3
 800ae48:	4621      	mov	r1, r4
 800ae4a:	f7f5 fea5 	bl	8000b98 <__aeabi_d2f>
 800ae4e:	4603      	mov	r3, r0
 800ae50:	603b      	str	r3, [r7, #0]
  return omega;
 800ae52:	683b      	ldr	r3, [r7, #0]
 800ae54:	ee07 3a90 	vmov	s15, r3
}
 800ae58:	eeb0 0a67 	vmov.f32	s0, s15
 800ae5c:	3708      	adds	r7, #8
 800ae5e:	46bd      	mov	sp, r7
 800ae60:	bdb0      	pop	{r4, r5, r7, pc}
 800ae62:	bf00      	nop
 800ae64:	f3af 8000 	nop.w
 800ae68:	20000bf4 	.word	0x20000bf4
 800ae6c:	66666666 	.word	0x66666666
 800ae70:	40306666 	.word	0x40306666

0800ae74 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int __io_putchar(int c) {
 800ae74:	b580      	push	{r7, lr}
 800ae76:	b084      	sub	sp, #16
 800ae78:	af00      	add	r7, sp, #0
 800ae7a:	6078      	str	r0, [r7, #4]
  if( c == '\n' ) {
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	2b0a      	cmp	r3, #10
 800ae80:	d108      	bne.n	800ae94 <__io_putchar+0x20>
    int _c = '\r';
 800ae82:	230d      	movs	r3, #13
 800ae84:	60fb      	str	r3, [r7, #12]
    HAL_UART_Transmit(&huart1, &_c, 1, 1);
 800ae86:	f107 010c 	add.w	r1, r7, #12
 800ae8a:	2301      	movs	r3, #1
 800ae8c:	2201      	movs	r2, #1
 800ae8e:	4807      	ldr	r0, [pc, #28]	; (800aeac <__io_putchar+0x38>)
 800ae90:	f7f9 fbf7 	bl	8004682 <HAL_UART_Transmit>
  }
  HAL_UART_Transmit(&huart1, &c, 1, 1);
 800ae94:	1d39      	adds	r1, r7, #4
 800ae96:	2301      	movs	r3, #1
 800ae98:	2201      	movs	r2, #1
 800ae9a:	4804      	ldr	r0, [pc, #16]	; (800aeac <__io_putchar+0x38>)
 800ae9c:	f7f9 fbf1 	bl	8004682 <HAL_UART_Transmit>
  return 0;
 800aea0:	2300      	movs	r3, #0
}
 800aea2:	4618      	mov	r0, r3
 800aea4:	3710      	adds	r7, #16
 800aea6:	46bd      	mov	sp, r7
 800aea8:	bd80      	pop	{r7, pc}
 800aeaa:	bf00      	nop
 800aeac:	20000b64 	.word	0x20000b64

0800aeb0 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800aeb0:	b5b0      	push	{r4, r5, r7, lr}
 800aeb2:	ed2d 8b02 	vpush	{d8}
 800aeb6:	b08c      	sub	sp, #48	; 0x30
 800aeb8:	af00      	add	r7, sp, #0
 800aeba:	6078      	str	r0, [r7, #4]
	TIM_OC_InitTypeDef ConfigOC;
	ConfigOC.OCMode = TIM_OCMODE_PWM1;
 800aebc:	2360      	movs	r3, #96	; 0x60
 800aebe:	60bb      	str	r3, [r7, #8]
	ConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800aec0:	2300      	movs	r3, #0
 800aec2:	613b      	str	r3, [r7, #16]
	ConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800aec4:	2300      	movs	r3, #0
 800aec6:	61bb      	str	r3, [r7, #24]

	if(htim == &htim6){
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	4ab5      	ldr	r2, [pc, #724]	; (800b1a0 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 800aecc:	4293      	cmp	r3, r2
 800aece:	f041 82be 	bne.w	800c44e <HAL_TIM_PeriodElapsedCallback+0x159e>
		cnt_l = TIM4 -> CNT;
 800aed2:	4bb4      	ldr	r3, [pc, #720]	; (800b1a4 <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 800aed4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aed6:	ee07 3a90 	vmov	s15, r3
 800aeda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aede:	4bb2      	ldr	r3, [pc, #712]	; (800b1a8 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 800aee0:	edc3 7a00 	vstr	s15, [r3]
		cnt_r = TIM8 -> CNT;
 800aee4:	4bb1      	ldr	r3, [pc, #708]	; (800b1ac <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 800aee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aee8:	ee07 3a90 	vmov	s15, r3
 800aeec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aef0:	4baf      	ldr	r3, [pc, #700]	; (800b1b0 <HAL_TIM_PeriodElapsedCallback+0x300>)
 800aef2:	edc3 7a00 	vstr	s15, [r3]
		if(cnt_l > 40000) cnt_l = cnt_l - 65535;		//0=>65505の値飛び検出用
 800aef6:	4bac      	ldr	r3, [pc, #688]	; (800b1a8 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 800aef8:	edd3 7a00 	vldr	s15, [r3]
 800aefc:	ed9f 7aad 	vldr	s14, [pc, #692]	; 800b1b4 <HAL_TIM_PeriodElapsedCallback+0x304>
 800af00:	eef4 7ac7 	vcmpe.f32	s15, s14
 800af04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800af08:	dd09      	ble.n	800af1e <HAL_TIM_PeriodElapsedCallback+0x6e>
 800af0a:	4ba7      	ldr	r3, [pc, #668]	; (800b1a8 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 800af0c:	edd3 7a00 	vldr	s15, [r3]
 800af10:	ed9f 7aa9 	vldr	s14, [pc, #676]	; 800b1b8 <HAL_TIM_PeriodElapsedCallback+0x308>
 800af14:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800af18:	4ba3      	ldr	r3, [pc, #652]	; (800b1a8 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 800af1a:	edc3 7a00 	vstr	s15, [r3]
		if(cnt_r > 40000) cnt_r = cnt_r - 65535;		//0=>65505の値飛び検出用
 800af1e:	4ba4      	ldr	r3, [pc, #656]	; (800b1b0 <HAL_TIM_PeriodElapsedCallback+0x300>)
 800af20:	edd3 7a00 	vldr	s15, [r3]
 800af24:	ed9f 7aa3 	vldr	s14, [pc, #652]	; 800b1b4 <HAL_TIM_PeriodElapsedCallback+0x304>
 800af28:	eef4 7ac7 	vcmpe.f32	s15, s14
 800af2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800af30:	dd09      	ble.n	800af46 <HAL_TIM_PeriodElapsedCallback+0x96>
 800af32:	4b9f      	ldr	r3, [pc, #636]	; (800b1b0 <HAL_TIM_PeriodElapsedCallback+0x300>)
 800af34:	edd3 7a00 	vldr	s15, [r3]
 800af38:	ed9f 7a9f 	vldr	s14, [pc, #636]	; 800b1b8 <HAL_TIM_PeriodElapsedCallback+0x308>
 800af3c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800af40:	4b9b      	ldr	r3, [pc, #620]	; (800b1b0 <HAL_TIM_PeriodElapsedCallback+0x300>)
 800af42:	edc3 7a00 	vstr	s15, [r3]
		cnt_r = cnt_r * -1;								//a回転方向合わせ
 800af46:	4b9a      	ldr	r3, [pc, #616]	; (800b1b0 <HAL_TIM_PeriodElapsedCallback+0x300>)
 800af48:	edd3 7a00 	vldr	s15, [r3]
 800af4c:	eef1 7a67 	vneg.f32	s15, s15
 800af50:	4b97      	ldr	r3, [pc, #604]	; (800b1b0 <HAL_TIM_PeriodElapsedCallback+0x300>)
 800af52:	edc3 7a00 	vstr	s15, [r3]

		dist_l = dist_l + cnt_l * (DIAMETER * M_PI * 11 / 40 / 4096 / 4);
 800af56:	4b99      	ldr	r3, [pc, #612]	; (800b1bc <HAL_TIM_PeriodElapsedCallback+0x30c>)
 800af58:	681b      	ldr	r3, [r3, #0]
 800af5a:	4618      	mov	r0, r3
 800af5c:	f7f5 faec 	bl	8000538 <__aeabi_f2d>
 800af60:	4604      	mov	r4, r0
 800af62:	460d      	mov	r5, r1
 800af64:	4b90      	ldr	r3, [pc, #576]	; (800b1a8 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 800af66:	681b      	ldr	r3, [r3, #0]
 800af68:	4618      	mov	r0, r3
 800af6a:	f7f5 fae5 	bl	8000538 <__aeabi_f2d>
 800af6e:	a388      	add	r3, pc, #544	; (adr r3, 800b190 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 800af70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af74:	f7f5 fb38 	bl	80005e8 <__aeabi_dmul>
 800af78:	4602      	mov	r2, r0
 800af7a:	460b      	mov	r3, r1
 800af7c:	4620      	mov	r0, r4
 800af7e:	4629      	mov	r1, r5
 800af80:	f7f5 f97c 	bl	800027c <__adddf3>
 800af84:	4603      	mov	r3, r0
 800af86:	460c      	mov	r4, r1
 800af88:	4618      	mov	r0, r3
 800af8a:	4621      	mov	r1, r4
 800af8c:	f7f5 fe04 	bl	8000b98 <__aeabi_d2f>
 800af90:	4602      	mov	r2, r0
 800af92:	4b8a      	ldr	r3, [pc, #552]	; (800b1bc <HAL_TIM_PeriodElapsedCallback+0x30c>)
 800af94:	601a      	str	r2, [r3, #0]
		dist_r = dist_r + cnt_r * (DIAMETER * M_PI * 11 / 40 / 4096 / 4);
 800af96:	4b8a      	ldr	r3, [pc, #552]	; (800b1c0 <HAL_TIM_PeriodElapsedCallback+0x310>)
 800af98:	681b      	ldr	r3, [r3, #0]
 800af9a:	4618      	mov	r0, r3
 800af9c:	f7f5 facc 	bl	8000538 <__aeabi_f2d>
 800afa0:	4604      	mov	r4, r0
 800afa2:	460d      	mov	r5, r1
 800afa4:	4b82      	ldr	r3, [pc, #520]	; (800b1b0 <HAL_TIM_PeriodElapsedCallback+0x300>)
 800afa6:	681b      	ldr	r3, [r3, #0]
 800afa8:	4618      	mov	r0, r3
 800afaa:	f7f5 fac5 	bl	8000538 <__aeabi_f2d>
 800afae:	a378      	add	r3, pc, #480	; (adr r3, 800b190 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 800afb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afb4:	f7f5 fb18 	bl	80005e8 <__aeabi_dmul>
 800afb8:	4602      	mov	r2, r0
 800afba:	460b      	mov	r3, r1
 800afbc:	4620      	mov	r0, r4
 800afbe:	4629      	mov	r1, r5
 800afc0:	f7f5 f95c 	bl	800027c <__adddf3>
 800afc4:	4603      	mov	r3, r0
 800afc6:	460c      	mov	r4, r1
 800afc8:	4618      	mov	r0, r3
 800afca:	4621      	mov	r1, r4
 800afcc:	f7f5 fde4 	bl	8000b98 <__aeabi_d2f>
 800afd0:	4602      	mov	r2, r0
 800afd2:	4b7b      	ldr	r3, [pc, #492]	; (800b1c0 <HAL_TIM_PeriodElapsedCallback+0x310>)
 800afd4:	601a      	str	r2, [r3, #0]

		speed_l = cnt_l * (DIAMETER * M_PI * 11 / 40 / 4096 / 4) / 0.001;
 800afd6:	4b74      	ldr	r3, [pc, #464]	; (800b1a8 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 800afd8:	681b      	ldr	r3, [r3, #0]
 800afda:	4618      	mov	r0, r3
 800afdc:	f7f5 faac 	bl	8000538 <__aeabi_f2d>
 800afe0:	a36b      	add	r3, pc, #428	; (adr r3, 800b190 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 800afe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afe6:	f7f5 faff 	bl	80005e8 <__aeabi_dmul>
 800afea:	4603      	mov	r3, r0
 800afec:	460c      	mov	r4, r1
 800afee:	4618      	mov	r0, r3
 800aff0:	4621      	mov	r1, r4
 800aff2:	a369      	add	r3, pc, #420	; (adr r3, 800b198 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 800aff4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aff8:	f7f5 fc20 	bl	800083c <__aeabi_ddiv>
 800affc:	4603      	mov	r3, r0
 800affe:	460c      	mov	r4, r1
 800b000:	4618      	mov	r0, r3
 800b002:	4621      	mov	r1, r4
 800b004:	f7f5 fdc8 	bl	8000b98 <__aeabi_d2f>
 800b008:	4602      	mov	r2, r0
 800b00a:	4b6e      	ldr	r3, [pc, #440]	; (800b1c4 <HAL_TIM_PeriodElapsedCallback+0x314>)
 800b00c:	601a      	str	r2, [r3, #0]
		speed_r = cnt_r * (DIAMETER * M_PI * 11 / 40 / 4096 / 4) / 0.001;
 800b00e:	4b68      	ldr	r3, [pc, #416]	; (800b1b0 <HAL_TIM_PeriodElapsedCallback+0x300>)
 800b010:	681b      	ldr	r3, [r3, #0]
 800b012:	4618      	mov	r0, r3
 800b014:	f7f5 fa90 	bl	8000538 <__aeabi_f2d>
 800b018:	a35d      	add	r3, pc, #372	; (adr r3, 800b190 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 800b01a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b01e:	f7f5 fae3 	bl	80005e8 <__aeabi_dmul>
 800b022:	4603      	mov	r3, r0
 800b024:	460c      	mov	r4, r1
 800b026:	4618      	mov	r0, r3
 800b028:	4621      	mov	r1, r4
 800b02a:	a35b      	add	r3, pc, #364	; (adr r3, 800b198 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 800b02c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b030:	f7f5 fc04 	bl	800083c <__aeabi_ddiv>
 800b034:	4603      	mov	r3, r0
 800b036:	460c      	mov	r4, r1
 800b038:	4618      	mov	r0, r3
 800b03a:	4621      	mov	r1, r4
 800b03c:	f7f5 fdac 	bl	8000b98 <__aeabi_d2f>
 800b040:	4602      	mov	r2, r0
 800b042:	4b61      	ldr	r3, [pc, #388]	; (800b1c8 <HAL_TIM_PeriodElapsedCallback+0x318>)
 800b044:	601a      	str	r2, [r3, #0]

		TIM4 -> CNT = 0;
 800b046:	4b57      	ldr	r3, [pc, #348]	; (800b1a4 <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 800b048:	2200      	movs	r2, #0
 800b04a:	625a      	str	r2, [r3, #36]	; 0x24
		TIM8 -> CNT = 0;
 800b04c:	4b57      	ldr	r3, [pc, #348]	; (800b1ac <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 800b04e:	2200      	movs	r2, #0
 800b050:	625a      	str	r2, [r3, #36]	; 0x24

		if(MF.FLAG.SPD){
 800b052:	4b5e      	ldr	r3, [pc, #376]	; (800b1cc <HAL_TIM_PeriodElapsedCallback+0x31c>)
 800b054:	881b      	ldrh	r3, [r3, #0]
 800b056:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800b05a:	b2db      	uxtb	r3, r3
 800b05c:	2b00      	cmp	r3, #0
 800b05e:	f000 80fe 	beq.w	800b25e <HAL_TIM_PeriodElapsedCallback+0x3ae>
			target_speed_l += accel_l * 0.001;
 800b062:	4b5b      	ldr	r3, [pc, #364]	; (800b1d0 <HAL_TIM_PeriodElapsedCallback+0x320>)
 800b064:	681b      	ldr	r3, [r3, #0]
 800b066:	4618      	mov	r0, r3
 800b068:	f7f5 fa66 	bl	8000538 <__aeabi_f2d>
 800b06c:	a34a      	add	r3, pc, #296	; (adr r3, 800b198 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 800b06e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b072:	f7f5 fab9 	bl	80005e8 <__aeabi_dmul>
 800b076:	4603      	mov	r3, r0
 800b078:	460c      	mov	r4, r1
 800b07a:	4625      	mov	r5, r4
 800b07c:	461c      	mov	r4, r3
 800b07e:	4b55      	ldr	r3, [pc, #340]	; (800b1d4 <HAL_TIM_PeriodElapsedCallback+0x324>)
 800b080:	681b      	ldr	r3, [r3, #0]
 800b082:	4618      	mov	r0, r3
 800b084:	f7f5 fa58 	bl	8000538 <__aeabi_f2d>
 800b088:	4602      	mov	r2, r0
 800b08a:	460b      	mov	r3, r1
 800b08c:	4620      	mov	r0, r4
 800b08e:	4629      	mov	r1, r5
 800b090:	f7f5 f8f4 	bl	800027c <__adddf3>
 800b094:	4603      	mov	r3, r0
 800b096:	460c      	mov	r4, r1
 800b098:	4618      	mov	r0, r3
 800b09a:	4621      	mov	r1, r4
 800b09c:	f7f5 fd7c 	bl	8000b98 <__aeabi_d2f>
 800b0a0:	4602      	mov	r2, r0
 800b0a2:	4b4c      	ldr	r3, [pc, #304]	; (800b1d4 <HAL_TIM_PeriodElapsedCallback+0x324>)
 800b0a4:	601a      	str	r2, [r3, #0]
			target_speed_l = max(min(target_speed_l, speed_max_l), speed_min_l);
 800b0a6:	4b4b      	ldr	r3, [pc, #300]	; (800b1d4 <HAL_TIM_PeriodElapsedCallback+0x324>)
 800b0a8:	ed93 7a00 	vldr	s14, [r3]
 800b0ac:	4b4a      	ldr	r3, [pc, #296]	; (800b1d8 <HAL_TIM_PeriodElapsedCallback+0x328>)
 800b0ae:	edd3 7a00 	vldr	s15, [r3]
 800b0b2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b0b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b0ba:	dd03      	ble.n	800b0c4 <HAL_TIM_PeriodElapsedCallback+0x214>
 800b0bc:	4b46      	ldr	r3, [pc, #280]	; (800b1d8 <HAL_TIM_PeriodElapsedCallback+0x328>)
 800b0be:	edd3 7a00 	vldr	s15, [r3]
 800b0c2:	e002      	b.n	800b0ca <HAL_TIM_PeriodElapsedCallback+0x21a>
 800b0c4:	4b43      	ldr	r3, [pc, #268]	; (800b1d4 <HAL_TIM_PeriodElapsedCallback+0x324>)
 800b0c6:	edd3 7a00 	vldr	s15, [r3]
 800b0ca:	4b44      	ldr	r3, [pc, #272]	; (800b1dc <HAL_TIM_PeriodElapsedCallback+0x32c>)
 800b0cc:	ed93 7a00 	vldr	s14, [r3]
 800b0d0:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b0d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b0d8:	dd10      	ble.n	800b0fc <HAL_TIM_PeriodElapsedCallback+0x24c>
 800b0da:	4b3e      	ldr	r3, [pc, #248]	; (800b1d4 <HAL_TIM_PeriodElapsedCallback+0x324>)
 800b0dc:	ed93 7a00 	vldr	s14, [r3]
 800b0e0:	4b3d      	ldr	r3, [pc, #244]	; (800b1d8 <HAL_TIM_PeriodElapsedCallback+0x328>)
 800b0e2:	edd3 7a00 	vldr	s15, [r3]
 800b0e6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b0ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b0ee:	dd02      	ble.n	800b0f6 <HAL_TIM_PeriodElapsedCallback+0x246>
 800b0f0:	4b39      	ldr	r3, [pc, #228]	; (800b1d8 <HAL_TIM_PeriodElapsedCallback+0x328>)
 800b0f2:	681b      	ldr	r3, [r3, #0]
 800b0f4:	e004      	b.n	800b100 <HAL_TIM_PeriodElapsedCallback+0x250>
 800b0f6:	4b37      	ldr	r3, [pc, #220]	; (800b1d4 <HAL_TIM_PeriodElapsedCallback+0x324>)
 800b0f8:	681b      	ldr	r3, [r3, #0]
 800b0fa:	e001      	b.n	800b100 <HAL_TIM_PeriodElapsedCallback+0x250>
 800b0fc:	4b37      	ldr	r3, [pc, #220]	; (800b1dc <HAL_TIM_PeriodElapsedCallback+0x32c>)
 800b0fe:	681b      	ldr	r3, [r3, #0]
 800b100:	4a34      	ldr	r2, [pc, #208]	; (800b1d4 <HAL_TIM_PeriodElapsedCallback+0x324>)
 800b102:	6013      	str	r3, [r2, #0]
			epsilon_l = target_speed_l - speed_l;
 800b104:	4b33      	ldr	r3, [pc, #204]	; (800b1d4 <HAL_TIM_PeriodElapsedCallback+0x324>)
 800b106:	ed93 7a00 	vldr	s14, [r3]
 800b10a:	4b2e      	ldr	r3, [pc, #184]	; (800b1c4 <HAL_TIM_PeriodElapsedCallback+0x314>)
 800b10c:	edd3 7a00 	vldr	s15, [r3]
 800b110:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b114:	4b32      	ldr	r3, [pc, #200]	; (800b1e0 <HAL_TIM_PeriodElapsedCallback+0x330>)
 800b116:	edc3 7a00 	vstr	s15, [r3]
			pulse_l = Kp * epsilon_l;
 800b11a:	4b31      	ldr	r3, [pc, #196]	; (800b1e0 <HAL_TIM_PeriodElapsedCallback+0x330>)
 800b11c:	edd3 7a00 	vldr	s15, [r3]
 800b120:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800b124:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b128:	4b2e      	ldr	r3, [pc, #184]	; (800b1e4 <HAL_TIM_PeriodElapsedCallback+0x334>)
 800b12a:	edc3 7a00 	vstr	s15, [r3]

			target_speed_r += accel_r * 0.001;
 800b12e:	4b2e      	ldr	r3, [pc, #184]	; (800b1e8 <HAL_TIM_PeriodElapsedCallback+0x338>)
 800b130:	681b      	ldr	r3, [r3, #0]
 800b132:	4618      	mov	r0, r3
 800b134:	f7f5 fa00 	bl	8000538 <__aeabi_f2d>
 800b138:	a317      	add	r3, pc, #92	; (adr r3, 800b198 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 800b13a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b13e:	f7f5 fa53 	bl	80005e8 <__aeabi_dmul>
 800b142:	4603      	mov	r3, r0
 800b144:	460c      	mov	r4, r1
 800b146:	4625      	mov	r5, r4
 800b148:	461c      	mov	r4, r3
 800b14a:	4b28      	ldr	r3, [pc, #160]	; (800b1ec <HAL_TIM_PeriodElapsedCallback+0x33c>)
 800b14c:	681b      	ldr	r3, [r3, #0]
 800b14e:	4618      	mov	r0, r3
 800b150:	f7f5 f9f2 	bl	8000538 <__aeabi_f2d>
 800b154:	4602      	mov	r2, r0
 800b156:	460b      	mov	r3, r1
 800b158:	4620      	mov	r0, r4
 800b15a:	4629      	mov	r1, r5
 800b15c:	f7f5 f88e 	bl	800027c <__adddf3>
 800b160:	4603      	mov	r3, r0
 800b162:	460c      	mov	r4, r1
 800b164:	4618      	mov	r0, r3
 800b166:	4621      	mov	r1, r4
 800b168:	f7f5 fd16 	bl	8000b98 <__aeabi_d2f>
 800b16c:	4602      	mov	r2, r0
 800b16e:	4b1f      	ldr	r3, [pc, #124]	; (800b1ec <HAL_TIM_PeriodElapsedCallback+0x33c>)
 800b170:	601a      	str	r2, [r3, #0]
			target_speed_r = max(min(target_speed_r, speed_max_r), speed_min_r);
 800b172:	4b1e      	ldr	r3, [pc, #120]	; (800b1ec <HAL_TIM_PeriodElapsedCallback+0x33c>)
 800b174:	ed93 7a00 	vldr	s14, [r3]
 800b178:	4b1d      	ldr	r3, [pc, #116]	; (800b1f0 <HAL_TIM_PeriodElapsedCallback+0x340>)
 800b17a:	edd3 7a00 	vldr	s15, [r3]
 800b17e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b182:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b186:	dd35      	ble.n	800b1f4 <HAL_TIM_PeriodElapsedCallback+0x344>
 800b188:	4b19      	ldr	r3, [pc, #100]	; (800b1f0 <HAL_TIM_PeriodElapsedCallback+0x340>)
 800b18a:	edd3 7a00 	vldr	s15, [r3]
 800b18e:	e034      	b.n	800b1fa <HAL_TIM_PeriodElapsedCallback+0x34a>
 800b190:	775e3793 	.word	0x775e3793
 800b194:	3f552a9e 	.word	0x3f552a9e
 800b198:	d2f1a9fc 	.word	0xd2f1a9fc
 800b19c:	3f50624d 	.word	0x3f50624d
 800b1a0:	20000bb4 	.word	0x20000bb4
 800b1a4:	40000800 	.word	0x40000800
 800b1a8:	200002ac 	.word	0x200002ac
 800b1ac:	40010400 	.word	0x40010400
 800b1b0:	20000bac 	.word	0x20000bac
 800b1b4:	471c4000 	.word	0x471c4000
 800b1b8:	477fff00 	.word	0x477fff00
 800b1bc:	200015c4 	.word	0x200015c4
 800b1c0:	20000aec 	.word	0x20000aec
 800b1c4:	20000af0 	.word	0x20000af0
 800b1c8:	200002bc 	.word	0x200002bc
 800b1cc:	20000f68 	.word	0x20000f68
 800b1d0:	20000d58 	.word	0x20000d58
 800b1d4:	20000bfc 	.word	0x20000bfc
 800b1d8:	2000077c 	.word	0x2000077c
 800b1dc:	20000b54 	.word	0x20000b54
 800b1e0:	20000b60 	.word	0x20000b60
 800b1e4:	20000ba8 	.word	0x20000ba8
 800b1e8:	20000ae4 	.word	0x20000ae4
 800b1ec:	200001a0 	.word	0x200001a0
 800b1f0:	200001a4 	.word	0x200001a4
 800b1f4:	4ba4      	ldr	r3, [pc, #656]	; (800b488 <HAL_TIM_PeriodElapsedCallback+0x5d8>)
 800b1f6:	edd3 7a00 	vldr	s15, [r3]
 800b1fa:	4ba4      	ldr	r3, [pc, #656]	; (800b48c <HAL_TIM_PeriodElapsedCallback+0x5dc>)
 800b1fc:	ed93 7a00 	vldr	s14, [r3]
 800b200:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b204:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b208:	dd10      	ble.n	800b22c <HAL_TIM_PeriodElapsedCallback+0x37c>
 800b20a:	4b9f      	ldr	r3, [pc, #636]	; (800b488 <HAL_TIM_PeriodElapsedCallback+0x5d8>)
 800b20c:	ed93 7a00 	vldr	s14, [r3]
 800b210:	4b9f      	ldr	r3, [pc, #636]	; (800b490 <HAL_TIM_PeriodElapsedCallback+0x5e0>)
 800b212:	edd3 7a00 	vldr	s15, [r3]
 800b216:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b21a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b21e:	dd02      	ble.n	800b226 <HAL_TIM_PeriodElapsedCallback+0x376>
 800b220:	4b9b      	ldr	r3, [pc, #620]	; (800b490 <HAL_TIM_PeriodElapsedCallback+0x5e0>)
 800b222:	681b      	ldr	r3, [r3, #0]
 800b224:	e004      	b.n	800b230 <HAL_TIM_PeriodElapsedCallback+0x380>
 800b226:	4b98      	ldr	r3, [pc, #608]	; (800b488 <HAL_TIM_PeriodElapsedCallback+0x5d8>)
 800b228:	681b      	ldr	r3, [r3, #0]
 800b22a:	e001      	b.n	800b230 <HAL_TIM_PeriodElapsedCallback+0x380>
 800b22c:	4b97      	ldr	r3, [pc, #604]	; (800b48c <HAL_TIM_PeriodElapsedCallback+0x5dc>)
 800b22e:	681b      	ldr	r3, [r3, #0]
 800b230:	4a95      	ldr	r2, [pc, #596]	; (800b488 <HAL_TIM_PeriodElapsedCallback+0x5d8>)
 800b232:	6013      	str	r3, [r2, #0]
			epsilon_r = target_speed_r - speed_r;
 800b234:	4b94      	ldr	r3, [pc, #592]	; (800b488 <HAL_TIM_PeriodElapsedCallback+0x5d8>)
 800b236:	ed93 7a00 	vldr	s14, [r3]
 800b23a:	4b96      	ldr	r3, [pc, #600]	; (800b494 <HAL_TIM_PeriodElapsedCallback+0x5e4>)
 800b23c:	edd3 7a00 	vldr	s15, [r3]
 800b240:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b244:	4b94      	ldr	r3, [pc, #592]	; (800b498 <HAL_TIM_PeriodElapsedCallback+0x5e8>)
 800b246:	edc3 7a00 	vstr	s15, [r3]
			pulse_r = Kp * epsilon_r;
 800b24a:	4b93      	ldr	r3, [pc, #588]	; (800b498 <HAL_TIM_PeriodElapsedCallback+0x5e8>)
 800b24c:	edd3 7a00 	vldr	s15, [r3]
 800b250:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800b254:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b258:	4b90      	ldr	r3, [pc, #576]	; (800b49c <HAL_TIM_PeriodElapsedCallback+0x5ec>)
 800b25a:	edc3 7a00 	vstr	s15, [r3]
		}

		log_cnt ++;
 800b25e:	4b90      	ldr	r3, [pc, #576]	; (800b4a0 <HAL_TIM_PeriodElapsedCallback+0x5f0>)
 800b260:	681b      	ldr	r3, [r3, #0]
 800b262:	3301      	adds	r3, #1
 800b264:	4a8e      	ldr	r2, [pc, #568]	; (800b4a0 <HAL_TIM_PeriodElapsedCallback+0x5f0>)
 800b266:	6013      	str	r3, [r2, #0]

		if(log_cnt >= 5 && MF2.FLAG.LOG){
 800b268:	4b8d      	ldr	r3, [pc, #564]	; (800b4a0 <HAL_TIM_PeriodElapsedCallback+0x5f0>)
 800b26a:	681b      	ldr	r3, [r3, #0]
 800b26c:	2b04      	cmp	r3, #4
 800b26e:	dd37      	ble.n	800b2e0 <HAL_TIM_PeriodElapsedCallback+0x430>
 800b270:	4b8c      	ldr	r3, [pc, #560]	; (800b4a4 <HAL_TIM_PeriodElapsedCallback+0x5f4>)
 800b272:	881b      	ldrh	r3, [r3, #0]
 800b274:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800b278:	b2db      	uxtb	r3, r3
 800b27a:	2b00      	cmp	r3, #0
 800b27c:	d030      	beq.n	800b2e0 <HAL_TIM_PeriodElapsedCallback+0x430>
			log_cnt = 0;
 800b27e:	4b88      	ldr	r3, [pc, #544]	; (800b4a0 <HAL_TIM_PeriodElapsedCallback+0x5f0>)
 800b280:	2200      	movs	r2, #0
 800b282:	601a      	str	r2, [r3, #0]
			if(get_cnt < log_allay){
 800b284:	4b88      	ldr	r3, [pc, #544]	; (800b4a8 <HAL_TIM_PeriodElapsedCallback+0x5f8>)
 800b286:	681b      	ldr	r3, [r3, #0]
 800b288:	2bc7      	cmp	r3, #199	; 0xc7
 800b28a:	dc29      	bgt.n	800b2e0 <HAL_TIM_PeriodElapsedCallback+0x430>
				get_speed_l[get_cnt] = speed_l;
 800b28c:	4b87      	ldr	r3, [pc, #540]	; (800b4ac <HAL_TIM_PeriodElapsedCallback+0x5fc>)
 800b28e:	edd3 7a00 	vldr	s15, [r3]
 800b292:	4b85      	ldr	r3, [pc, #532]	; (800b4a8 <HAL_TIM_PeriodElapsedCallback+0x5f8>)
 800b294:	681b      	ldr	r3, [r3, #0]
 800b296:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b29a:	ee17 1a90 	vmov	r1, s15
 800b29e:	4a84      	ldr	r2, [pc, #528]	; (800b4b0 <HAL_TIM_PeriodElapsedCallback+0x600>)
 800b2a0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				get_speed_r[get_cnt] = speed_r;
 800b2a4:	4b7b      	ldr	r3, [pc, #492]	; (800b494 <HAL_TIM_PeriodElapsedCallback+0x5e4>)
 800b2a6:	edd3 7a00 	vldr	s15, [r3]
 800b2aa:	4b7f      	ldr	r3, [pc, #508]	; (800b4a8 <HAL_TIM_PeriodElapsedCallback+0x5f8>)
 800b2ac:	681b      	ldr	r3, [r3, #0]
 800b2ae:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b2b2:	ee17 1a90 	vmov	r1, s15
 800b2b6:	4a7f      	ldr	r2, [pc, #508]	; (800b4b4 <HAL_TIM_PeriodElapsedCallback+0x604>)
 800b2b8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				get_omega[get_cnt] = gyro_read_z();
 800b2bc:	f7ff fd98 	bl	800adf0 <gyro_read_z>
 800b2c0:	eef0 7a40 	vmov.f32	s15, s0
 800b2c4:	4b78      	ldr	r3, [pc, #480]	; (800b4a8 <HAL_TIM_PeriodElapsedCallback+0x5f8>)
 800b2c6:	681b      	ldr	r3, [r3, #0]
 800b2c8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b2cc:	ee17 1a90 	vmov	r1, s15
 800b2d0:	4a79      	ldr	r2, [pc, #484]	; (800b4b8 <HAL_TIM_PeriodElapsedCallback+0x608>)
 800b2d2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				get_cnt++;
 800b2d6:	4b74      	ldr	r3, [pc, #464]	; (800b4a8 <HAL_TIM_PeriodElapsedCallback+0x5f8>)
 800b2d8:	681b      	ldr	r3, [r3, #0]
 800b2da:	3301      	adds	r3, #1
 800b2dc:	4a72      	ldr	r2, [pc, #456]	; (800b4a8 <HAL_TIM_PeriodElapsedCallback+0x5f8>)
 800b2de:	6013      	str	r3, [r2, #0]
//		degree_x += accel_read_x() * 0.001;
//		degree_y += accel_read_y() * 0.001;
//		degree_z += accel_read_z() * 0.001;
//		degree_x += gyro_read_x() * 0.001;
//		degree_y += gyro_read_y() * 0.001;
		degree_z += gyro_read_z() * 0.001;
 800b2e0:	f7ff fd86 	bl	800adf0 <gyro_read_z>
 800b2e4:	ee10 3a10 	vmov	r3, s0
 800b2e8:	4618      	mov	r0, r3
 800b2ea:	f7f5 f925 	bl	8000538 <__aeabi_f2d>
 800b2ee:	a362      	add	r3, pc, #392	; (adr r3, 800b478 <HAL_TIM_PeriodElapsedCallback+0x5c8>)
 800b2f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2f4:	f7f5 f978 	bl	80005e8 <__aeabi_dmul>
 800b2f8:	4603      	mov	r3, r0
 800b2fa:	460c      	mov	r4, r1
 800b2fc:	4625      	mov	r5, r4
 800b2fe:	461c      	mov	r4, r3
 800b300:	4b6e      	ldr	r3, [pc, #440]	; (800b4bc <HAL_TIM_PeriodElapsedCallback+0x60c>)
 800b302:	681b      	ldr	r3, [r3, #0]
 800b304:	4618      	mov	r0, r3
 800b306:	f7f5 f917 	bl	8000538 <__aeabi_f2d>
 800b30a:	4602      	mov	r2, r0
 800b30c:	460b      	mov	r3, r1
 800b30e:	4620      	mov	r0, r4
 800b310:	4629      	mov	r1, r5
 800b312:	f7f4 ffb3 	bl	800027c <__adddf3>
 800b316:	4603      	mov	r3, r0
 800b318:	460c      	mov	r4, r1
 800b31a:	4618      	mov	r0, r3
 800b31c:	4621      	mov	r1, r4
 800b31e:	f7f5 fc3b 	bl	8000b98 <__aeabi_d2f>
 800b322:	4602      	mov	r2, r0
 800b324:	4b65      	ldr	r3, [pc, #404]	; (800b4bc <HAL_TIM_PeriodElapsedCallback+0x60c>)
 800b326:	601a      	str	r2, [r3, #0]

		//gyro ドリフト量計算
		if(MF2.FLAG.GDRIFT){
 800b328:	4b5e      	ldr	r3, [pc, #376]	; (800b4a4 <HAL_TIM_PeriodElapsedCallback+0x5f4>)
 800b32a:	881b      	ldrh	r3, [r3, #0]
 800b32c:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800b330:	b2db      	uxtb	r3, r3
 800b332:	2b00      	cmp	r3, #0
 800b334:	d04d      	beq.n	800b3d2 <HAL_TIM_PeriodElapsedCallback+0x522>
			gyro_cnt ++;
 800b336:	4b62      	ldr	r3, [pc, #392]	; (800b4c0 <HAL_TIM_PeriodElapsedCallback+0x610>)
 800b338:	681b      	ldr	r3, [r3, #0]
 800b33a:	3301      	adds	r3, #1
 800b33c:	4a60      	ldr	r2, [pc, #384]	; (800b4c0 <HAL_TIM_PeriodElapsedCallback+0x610>)
 800b33e:	6013      	str	r3, [r2, #0]
			if(gyro_cnt >= 2)dif_omega_z += old_omega_z - gyro_read_z();
 800b340:	4b5f      	ldr	r3, [pc, #380]	; (800b4c0 <HAL_TIM_PeriodElapsedCallback+0x610>)
 800b342:	681b      	ldr	r3, [r3, #0]
 800b344:	2b01      	cmp	r3, #1
 800b346:	dd10      	ble.n	800b36a <HAL_TIM_PeriodElapsedCallback+0x4ba>
 800b348:	4b5e      	ldr	r3, [pc, #376]	; (800b4c4 <HAL_TIM_PeriodElapsedCallback+0x614>)
 800b34a:	ed93 8a00 	vldr	s16, [r3]
 800b34e:	f7ff fd4f 	bl	800adf0 <gyro_read_z>
 800b352:	eef0 7a40 	vmov.f32	s15, s0
 800b356:	ee38 7a67 	vsub.f32	s14, s16, s15
 800b35a:	4b5b      	ldr	r3, [pc, #364]	; (800b4c8 <HAL_TIM_PeriodElapsedCallback+0x618>)
 800b35c:	edd3 7a00 	vldr	s15, [r3]
 800b360:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b364:	4b58      	ldr	r3, [pc, #352]	; (800b4c8 <HAL_TIM_PeriodElapsedCallback+0x618>)
 800b366:	edc3 7a00 	vstr	s15, [r3]
			old_omega_z = gyro_read_z();
 800b36a:	f7ff fd41 	bl	800adf0 <gyro_read_z>
 800b36e:	eef0 7a40 	vmov.f32	s15, s0
 800b372:	4b54      	ldr	r3, [pc, #336]	; (800b4c4 <HAL_TIM_PeriodElapsedCallback+0x614>)
 800b374:	edc3 7a00 	vstr	s15, [r3]
			full_led_write(YELLOW);
 800b378:	2006      	movs	r0, #6
 800b37a:	f004 fd73 	bl	800fe64 <full_led_write>
			if(gyro_cnt >= 1001) {
 800b37e:	4b50      	ldr	r3, [pc, #320]	; (800b4c0 <HAL_TIM_PeriodElapsedCallback+0x610>)
 800b380:	681b      	ldr	r3, [r3, #0]
 800b382:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b386:	dd1c      	ble.n	800b3c2 <HAL_TIM_PeriodElapsedCallback+0x512>
				MF2.FLAG.GDRIFT = 0;
 800b388:	4a46      	ldr	r2, [pc, #280]	; (800b4a4 <HAL_TIM_PeriodElapsedCallback+0x5f4>)
 800b38a:	8813      	ldrh	r3, [r2, #0]
 800b38c:	f36f 13c7 	bfc	r3, #7, #1
 800b390:	8013      	strh	r3, [r2, #0]
				gyro_drift_value = dif_omega_z / gyro_cnt-1;
 800b392:	4b4d      	ldr	r3, [pc, #308]	; (800b4c8 <HAL_TIM_PeriodElapsedCallback+0x618>)
 800b394:	edd3 6a00 	vldr	s13, [r3]
 800b398:	4b49      	ldr	r3, [pc, #292]	; (800b4c0 <HAL_TIM_PeriodElapsedCallback+0x610>)
 800b39a:	681b      	ldr	r3, [r3, #0]
 800b39c:	ee07 3a90 	vmov	s15, r3
 800b3a0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800b3a4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b3a8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b3ac:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b3b0:	4b46      	ldr	r3, [pc, #280]	; (800b4cc <HAL_TIM_PeriodElapsedCallback+0x61c>)
 800b3b2:	edc3 7a00 	vstr	s15, [r3]
				gyro_cnt = 0;
 800b3b6:	4b42      	ldr	r3, [pc, #264]	; (800b4c0 <HAL_TIM_PeriodElapsedCallback+0x610>)
 800b3b8:	2200      	movs	r2, #0
 800b3ba:	601a      	str	r2, [r3, #0]
				full_led_write(BLUEGREEN);
 800b3bc:	2004      	movs	r0, #4
 800b3be:	f004 fd51 	bl	800fe64 <full_led_write>
			}
			degree_z = 0;
 800b3c2:	4b3e      	ldr	r3, [pc, #248]	; (800b4bc <HAL_TIM_PeriodElapsedCallback+0x60c>)
 800b3c4:	f04f 0200 	mov.w	r2, #0
 800b3c8:	601a      	str	r2, [r3, #0]
			target_degree_z = 0;
 800b3ca:	4b41      	ldr	r3, [pc, #260]	; (800b4d0 <HAL_TIM_PeriodElapsedCallback+0x620>)
 800b3cc:	f04f 0200 	mov.w	r2, #0
 800b3d0:	601a      	str	r2, [r3, #0]
		}


		if(MF2.FLAG.ENKAI){
 800b3d2:	4b34      	ldr	r3, [pc, #208]	; (800b4a4 <HAL_TIM_PeriodElapsedCallback+0x5f4>)
 800b3d4:	881b      	ldrh	r3, [r3, #0]
 800b3d6:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800b3da:	b2db      	uxtb	r3, r3
 800b3dc:	2b00      	cmp	r3, #0
 800b3de:	f000 80d6 	beq.w	800b58e <HAL_TIM_PeriodElapsedCallback+0x6de>
			target_dist = TREAD*M_PI/360*(degree_z-target_degree_z);
 800b3e2:	4b36      	ldr	r3, [pc, #216]	; (800b4bc <HAL_TIM_PeriodElapsedCallback+0x60c>)
 800b3e4:	ed93 7a00 	vldr	s14, [r3]
 800b3e8:	4b39      	ldr	r3, [pc, #228]	; (800b4d0 <HAL_TIM_PeriodElapsedCallback+0x620>)
 800b3ea:	edd3 7a00 	vldr	s15, [r3]
 800b3ee:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b3f2:	ee17 0a90 	vmov	r0, s15
 800b3f6:	f7f5 f89f 	bl	8000538 <__aeabi_f2d>
 800b3fa:	a321      	add	r3, pc, #132	; (adr r3, 800b480 <HAL_TIM_PeriodElapsedCallback+0x5d0>)
 800b3fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b400:	f7f5 f8f2 	bl	80005e8 <__aeabi_dmul>
 800b404:	4603      	mov	r3, r0
 800b406:	460c      	mov	r4, r1
 800b408:	4618      	mov	r0, r3
 800b40a:	4621      	mov	r1, r4
 800b40c:	f7f5 fbc4 	bl	8000b98 <__aeabi_d2f>
 800b410:	4602      	mov	r2, r0
 800b412:	4b30      	ldr	r3, [pc, #192]	; (800b4d4 <HAL_TIM_PeriodElapsedCallback+0x624>)
 800b414:	601a      	str	r2, [r3, #0]
			if(target_dist > 0){
 800b416:	4b2f      	ldr	r3, [pc, #188]	; (800b4d4 <HAL_TIM_PeriodElapsedCallback+0x624>)
 800b418:	edd3 7a00 	vldr	s15, [r3]
 800b41c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800b420:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b424:	dd5c      	ble.n	800b4e0 <HAL_TIM_PeriodElapsedCallback+0x630>
				target_speed_l = sqrt(2*accel_l*target_dist);
 800b426:	4b2c      	ldr	r3, [pc, #176]	; (800b4d8 <HAL_TIM_PeriodElapsedCallback+0x628>)
 800b428:	edd3 7a00 	vldr	s15, [r3]
 800b42c:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800b430:	4b28      	ldr	r3, [pc, #160]	; (800b4d4 <HAL_TIM_PeriodElapsedCallback+0x624>)
 800b432:	edd3 7a00 	vldr	s15, [r3]
 800b436:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b43a:	ee17 0a90 	vmov	r0, s15
 800b43e:	f7f5 f87b 	bl	8000538 <__aeabi_f2d>
 800b442:	4603      	mov	r3, r0
 800b444:	460c      	mov	r4, r1
 800b446:	ec44 3b10 	vmov	d0, r3, r4
 800b44a:	f006 faa5 	bl	8011998 <sqrt>
 800b44e:	ec54 3b10 	vmov	r3, r4, d0
 800b452:	4618      	mov	r0, r3
 800b454:	4621      	mov	r1, r4
 800b456:	f7f5 fb9f 	bl	8000b98 <__aeabi_d2f>
 800b45a:	4602      	mov	r2, r0
 800b45c:	4b1f      	ldr	r3, [pc, #124]	; (800b4dc <HAL_TIM_PeriodElapsedCallback+0x62c>)
 800b45e:	601a      	str	r2, [r3, #0]
				target_speed_r = -1 * target_speed_l;
 800b460:	4b1e      	ldr	r3, [pc, #120]	; (800b4dc <HAL_TIM_PeriodElapsedCallback+0x62c>)
 800b462:	edd3 7a00 	vldr	s15, [r3]
 800b466:	eef1 7a67 	vneg.f32	s15, s15
 800b46a:	4b07      	ldr	r3, [pc, #28]	; (800b488 <HAL_TIM_PeriodElapsedCallback+0x5d8>)
 800b46c:	edc3 7a00 	vstr	s15, [r3]
 800b470:	e063      	b.n	800b53a <HAL_TIM_PeriodElapsedCallback+0x68a>
 800b472:	bf00      	nop
 800b474:	f3af 8000 	nop.w
 800b478:	d2f1a9fc 	.word	0xd2f1a9fc
 800b47c:	3f50624d 	.word	0x3f50624d
 800b480:	d7653223 	.word	0xd7653223
 800b484:	3fe26e40 	.word	0x3fe26e40
 800b488:	200001a0 	.word	0x200001a0
 800b48c:	20000f6c 	.word	0x20000f6c
 800b490:	200001a4 	.word	0x200001a4
 800b494:	200002bc 	.word	0x200002bc
 800b498:	20000c08 	.word	0x20000c08
 800b49c:	20000780 	.word	0x20000780
 800b4a0:	20000108 	.word	0x20000108
 800b4a4:	20000f64 	.word	0x20000f64
 800b4a8:	20000110 	.word	0x20000110
 800b4ac:	20000af0 	.word	0x20000af0
 800b4b0:	20000784 	.word	0x20000784
 800b4b4:	2000045c 	.word	0x2000045c
 800b4b8:	200012a4 	.word	0x200012a4
 800b4bc:	20000b5c 	.word	0x20000b5c
 800b4c0:	2000010c 	.word	0x2000010c
 800b4c4:	200015cc 	.word	0x200015cc
 800b4c8:	20000ba4 	.word	0x20000ba4
 800b4cc:	20000bf4 	.word	0x20000bf4
 800b4d0:	20000bf8 	.word	0x20000bf8
 800b4d4:	20000f78 	.word	0x20000f78
 800b4d8:	20000d58 	.word	0x20000d58
 800b4dc:	20000bfc 	.word	0x20000bfc
			}else{
				target_speed_l = sqrt(2*accel_l*target_dist*-1)*-1;
 800b4e0:	4bac      	ldr	r3, [pc, #688]	; (800b794 <HAL_TIM_PeriodElapsedCallback+0x8e4>)
 800b4e2:	edd3 7a00 	vldr	s15, [r3]
 800b4e6:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800b4ea:	4bab      	ldr	r3, [pc, #684]	; (800b798 <HAL_TIM_PeriodElapsedCallback+0x8e8>)
 800b4ec:	edd3 7a00 	vldr	s15, [r3]
 800b4f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b4f4:	eef1 7a67 	vneg.f32	s15, s15
 800b4f8:	ee17 3a90 	vmov	r3, s15
 800b4fc:	4618      	mov	r0, r3
 800b4fe:	f7f5 f81b 	bl	8000538 <__aeabi_f2d>
 800b502:	4603      	mov	r3, r0
 800b504:	460c      	mov	r4, r1
 800b506:	ec44 3b10 	vmov	d0, r3, r4
 800b50a:	f006 fa45 	bl	8011998 <sqrt>
 800b50e:	ec54 3b10 	vmov	r3, r4, d0
 800b512:	4618      	mov	r0, r3
 800b514:	4621      	mov	r1, r4
 800b516:	f7f5 fb3f 	bl	8000b98 <__aeabi_d2f>
 800b51a:	4603      	mov	r3, r0
 800b51c:	ee07 3a90 	vmov	s15, r3
 800b520:	eef1 7a67 	vneg.f32	s15, s15
 800b524:	4b9d      	ldr	r3, [pc, #628]	; (800b79c <HAL_TIM_PeriodElapsedCallback+0x8ec>)
 800b526:	edc3 7a00 	vstr	s15, [r3]
				target_speed_r = -1 * target_speed_l;
 800b52a:	4b9c      	ldr	r3, [pc, #624]	; (800b79c <HAL_TIM_PeriodElapsedCallback+0x8ec>)
 800b52c:	edd3 7a00 	vldr	s15, [r3]
 800b530:	eef1 7a67 	vneg.f32	s15, s15
 800b534:	4b9a      	ldr	r3, [pc, #616]	; (800b7a0 <HAL_TIM_PeriodElapsedCallback+0x8f0>)
 800b536:	edc3 7a00 	vstr	s15, [r3]
			}

			epsilon_l = target_speed_l - speed_l;
 800b53a:	4b98      	ldr	r3, [pc, #608]	; (800b79c <HAL_TIM_PeriodElapsedCallback+0x8ec>)
 800b53c:	ed93 7a00 	vldr	s14, [r3]
 800b540:	4b98      	ldr	r3, [pc, #608]	; (800b7a4 <HAL_TIM_PeriodElapsedCallback+0x8f4>)
 800b542:	edd3 7a00 	vldr	s15, [r3]
 800b546:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b54a:	4b97      	ldr	r3, [pc, #604]	; (800b7a8 <HAL_TIM_PeriodElapsedCallback+0x8f8>)
 800b54c:	edc3 7a00 	vstr	s15, [r3]
			pulse_l = Kp * epsilon_l;
 800b550:	4b95      	ldr	r3, [pc, #596]	; (800b7a8 <HAL_TIM_PeriodElapsedCallback+0x8f8>)
 800b552:	edd3 7a00 	vldr	s15, [r3]
 800b556:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800b55a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b55e:	4b93      	ldr	r3, [pc, #588]	; (800b7ac <HAL_TIM_PeriodElapsedCallback+0x8fc>)
 800b560:	edc3 7a00 	vstr	s15, [r3]
			epsilon_r = target_speed_r - speed_r;
 800b564:	4b8e      	ldr	r3, [pc, #568]	; (800b7a0 <HAL_TIM_PeriodElapsedCallback+0x8f0>)
 800b566:	ed93 7a00 	vldr	s14, [r3]
 800b56a:	4b91      	ldr	r3, [pc, #580]	; (800b7b0 <HAL_TIM_PeriodElapsedCallback+0x900>)
 800b56c:	edd3 7a00 	vldr	s15, [r3]
 800b570:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b574:	4b8f      	ldr	r3, [pc, #572]	; (800b7b4 <HAL_TIM_PeriodElapsedCallback+0x904>)
 800b576:	edc3 7a00 	vstr	s15, [r3]
			pulse_r = Kp * epsilon_r;
 800b57a:	4b8e      	ldr	r3, [pc, #568]	; (800b7b4 <HAL_TIM_PeriodElapsedCallback+0x904>)
 800b57c:	edd3 7a00 	vldr	s15, [r3]
 800b580:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800b584:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b588:	4b8b      	ldr	r3, [pc, #556]	; (800b7b8 <HAL_TIM_PeriodElapsedCallback+0x908>)
 800b58a:	edc3 7a00 	vstr	s15, [r3]
		}


		if(MF.FLAG.FWALL){
 800b58e:	4b8b      	ldr	r3, [pc, #556]	; (800b7bc <HAL_TIM_PeriodElapsedCallback+0x90c>)
 800b590:	881b      	ldrh	r3, [r3, #0]
 800b592:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800b596:	b2db      	uxtb	r3, r3
 800b598:	2b00      	cmp	r3, #0
 800b59a:	f000 8124 	beq.w	800b7e6 <HAL_TIM_PeriodElapsedCallback+0x936>
			target_speed_l = (int16_t)(OFFSET_FWALL_L - ad_fl)*0.5;//0.75;
 800b59e:	4b88      	ldr	r3, [pc, #544]	; (800b7c0 <HAL_TIM_PeriodElapsedCallback+0x910>)
 800b5a0:	681b      	ldr	r3, [r3, #0]
 800b5a2:	b29b      	uxth	r3, r3
 800b5a4:	f5c3 63bb 	rsb	r3, r3, #1496	; 0x5d8
 800b5a8:	3304      	adds	r3, #4
 800b5aa:	b29b      	uxth	r3, r3
 800b5ac:	b21b      	sxth	r3, r3
 800b5ae:	4618      	mov	r0, r3
 800b5b0:	f7f4 ffb0 	bl	8000514 <__aeabi_i2d>
 800b5b4:	f04f 0200 	mov.w	r2, #0
 800b5b8:	4b82      	ldr	r3, [pc, #520]	; (800b7c4 <HAL_TIM_PeriodElapsedCallback+0x914>)
 800b5ba:	f7f5 f815 	bl	80005e8 <__aeabi_dmul>
 800b5be:	4603      	mov	r3, r0
 800b5c0:	460c      	mov	r4, r1
 800b5c2:	4618      	mov	r0, r3
 800b5c4:	4621      	mov	r1, r4
 800b5c6:	f7f5 fae7 	bl	8000b98 <__aeabi_d2f>
 800b5ca:	4602      	mov	r2, r0
 800b5cc:	4b73      	ldr	r3, [pc, #460]	; (800b79c <HAL_TIM_PeriodElapsedCallback+0x8ec>)
 800b5ce:	601a      	str	r2, [r3, #0]
			target_speed_r = (int16_t)(OFFSET_FWALL_R - ad_fr);//*1.5;
 800b5d0:	4b7d      	ldr	r3, [pc, #500]	; (800b7c8 <HAL_TIM_PeriodElapsedCallback+0x918>)
 800b5d2:	681b      	ldr	r3, [r3, #0]
 800b5d4:	b29b      	uxth	r3, r3
 800b5d6:	f5c3 7361 	rsb	r3, r3, #900	; 0x384
 800b5da:	b29b      	uxth	r3, r3
 800b5dc:	b21b      	sxth	r3, r3
 800b5de:	ee07 3a90 	vmov	s15, r3
 800b5e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b5e6:	4b6e      	ldr	r3, [pc, #440]	; (800b7a0 <HAL_TIM_PeriodElapsedCallback+0x8f0>)
 800b5e8:	edc3 7a00 	vstr	s15, [r3]

			if(target_speed_l*target_speed_l < 2500)target_speed_l = 0;
 800b5ec:	4b6b      	ldr	r3, [pc, #428]	; (800b79c <HAL_TIM_PeriodElapsedCallback+0x8ec>)
 800b5ee:	ed93 7a00 	vldr	s14, [r3]
 800b5f2:	4b6a      	ldr	r3, [pc, #424]	; (800b79c <HAL_TIM_PeriodElapsedCallback+0x8ec>)
 800b5f4:	edd3 7a00 	vldr	s15, [r3]
 800b5f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b5fc:	ed9f 7a73 	vldr	s14, [pc, #460]	; 800b7cc <HAL_TIM_PeriodElapsedCallback+0x91c>
 800b600:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b604:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b608:	d503      	bpl.n	800b612 <HAL_TIM_PeriodElapsedCallback+0x762>
 800b60a:	4b64      	ldr	r3, [pc, #400]	; (800b79c <HAL_TIM_PeriodElapsedCallback+0x8ec>)
 800b60c:	f04f 0200 	mov.w	r2, #0
 800b610:	601a      	str	r2, [r3, #0]
			if(target_speed_r*target_speed_r < 2500)target_speed_r = 0;
 800b612:	4b63      	ldr	r3, [pc, #396]	; (800b7a0 <HAL_TIM_PeriodElapsedCallback+0x8f0>)
 800b614:	ed93 7a00 	vldr	s14, [r3]
 800b618:	4b61      	ldr	r3, [pc, #388]	; (800b7a0 <HAL_TIM_PeriodElapsedCallback+0x8f0>)
 800b61a:	edd3 7a00 	vldr	s15, [r3]
 800b61e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b622:	ed9f 7a6a 	vldr	s14, [pc, #424]	; 800b7cc <HAL_TIM_PeriodElapsedCallback+0x91c>
 800b626:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b62a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b62e:	d503      	bpl.n	800b638 <HAL_TIM_PeriodElapsedCallback+0x788>
 800b630:	4b5b      	ldr	r3, [pc, #364]	; (800b7a0 <HAL_TIM_PeriodElapsedCallback+0x8f0>)
 800b632:	f04f 0200 	mov.w	r2, #0
 800b636:	601a      	str	r2, [r3, #0]
			if(target_speed_l == 0 && target_speed_r == 0){
 800b638:	4b58      	ldr	r3, [pc, #352]	; (800b79c <HAL_TIM_PeriodElapsedCallback+0x8ec>)
 800b63a:	edd3 7a00 	vldr	s15, [r3]
 800b63e:	eef5 7a40 	vcmp.f32	s15, #0.0
 800b642:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b646:	d111      	bne.n	800b66c <HAL_TIM_PeriodElapsedCallback+0x7bc>
 800b648:	4b55      	ldr	r3, [pc, #340]	; (800b7a0 <HAL_TIM_PeriodElapsedCallback+0x8f0>)
 800b64a:	edd3 7a00 	vldr	s15, [r3]
 800b64e:	eef5 7a40 	vcmp.f32	s15, #0.0
 800b652:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b656:	d109      	bne.n	800b66c <HAL_TIM_PeriodElapsedCallback+0x7bc>
				MF.FLAG.FWALL = 0;
 800b658:	4a58      	ldr	r2, [pc, #352]	; (800b7bc <HAL_TIM_PeriodElapsedCallback+0x90c>)
 800b65a:	8813      	ldrh	r3, [r2, #0]
 800b65c:	f36f 13c7 	bfc	r3, #7, #1
 800b660:	8013      	strh	r3, [r2, #0]
				MF.FLAG.DRV = 0;
 800b662:	4a56      	ldr	r2, [pc, #344]	; (800b7bc <HAL_TIM_PeriodElapsedCallback+0x90c>)
 800b664:	8813      	ldrh	r3, [r2, #0]
 800b666:	f36f 0341 	bfc	r3, #1, #1
 800b66a:	8013      	strh	r3, [r2, #0]
			}

			epsilon_l = target_speed_l - speed_l;
 800b66c:	4b4b      	ldr	r3, [pc, #300]	; (800b79c <HAL_TIM_PeriodElapsedCallback+0x8ec>)
 800b66e:	ed93 7a00 	vldr	s14, [r3]
 800b672:	4b4c      	ldr	r3, [pc, #304]	; (800b7a4 <HAL_TIM_PeriodElapsedCallback+0x8f4>)
 800b674:	edd3 7a00 	vldr	s15, [r3]
 800b678:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b67c:	4b4a      	ldr	r3, [pc, #296]	; (800b7a8 <HAL_TIM_PeriodElapsedCallback+0x8f8>)
 800b67e:	edc3 7a00 	vstr	s15, [r3]
			pulse_l = Kp * epsilon_l;
 800b682:	4b49      	ldr	r3, [pc, #292]	; (800b7a8 <HAL_TIM_PeriodElapsedCallback+0x8f8>)
 800b684:	edd3 7a00 	vldr	s15, [r3]
 800b688:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800b68c:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b690:	4b46      	ldr	r3, [pc, #280]	; (800b7ac <HAL_TIM_PeriodElapsedCallback+0x8fc>)
 800b692:	edc3 7a00 	vstr	s15, [r3]
			epsilon_r = target_speed_r - speed_r;
 800b696:	4b42      	ldr	r3, [pc, #264]	; (800b7a0 <HAL_TIM_PeriodElapsedCallback+0x8f0>)
 800b698:	ed93 7a00 	vldr	s14, [r3]
 800b69c:	4b44      	ldr	r3, [pc, #272]	; (800b7b0 <HAL_TIM_PeriodElapsedCallback+0x900>)
 800b69e:	edd3 7a00 	vldr	s15, [r3]
 800b6a2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b6a6:	4b43      	ldr	r3, [pc, #268]	; (800b7b4 <HAL_TIM_PeriodElapsedCallback+0x904>)
 800b6a8:	edc3 7a00 	vstr	s15, [r3]
			pulse_r = Kp * epsilon_r;
 800b6ac:	4b41      	ldr	r3, [pc, #260]	; (800b7b4 <HAL_TIM_PeriodElapsedCallback+0x904>)
 800b6ae:	edd3 7a00 	vldr	s15, [r3]
 800b6b2:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800b6b6:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b6ba:	4b3f      	ldr	r3, [pc, #252]	; (800b7b8 <HAL_TIM_PeriodElapsedCallback+0x908>)
 800b6bc:	edc3 7a00 	vstr	s15, [r3]

			pulse_l = min(max(pulse_l, -100), 100);
 800b6c0:	4b3a      	ldr	r3, [pc, #232]	; (800b7ac <HAL_TIM_PeriodElapsedCallback+0x8fc>)
 800b6c2:	edd3 7a00 	vldr	s15, [r3]
 800b6c6:	ed9f 7a42 	vldr	s14, [pc, #264]	; 800b7d0 <HAL_TIM_PeriodElapsedCallback+0x920>
 800b6ca:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b6ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b6d2:	bfcc      	ite	gt
 800b6d4:	2301      	movgt	r3, #1
 800b6d6:	2300      	movle	r3, #0
 800b6d8:	b2db      	uxtb	r3, r3
 800b6da:	f083 0301 	eor.w	r3, r3, #1
 800b6de:	b2db      	uxtb	r3, r3
 800b6e0:	2b00      	cmp	r3, #0
 800b6e2:	d111      	bne.n	800b708 <HAL_TIM_PeriodElapsedCallback+0x858>
 800b6e4:	4b31      	ldr	r3, [pc, #196]	; (800b7ac <HAL_TIM_PeriodElapsedCallback+0x8fc>)
 800b6e6:	edd3 7a00 	vldr	s15, [r3]
 800b6ea:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 800b7d4 <HAL_TIM_PeriodElapsedCallback+0x924>
 800b6ee:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b6f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b6f6:	bfcc      	ite	gt
 800b6f8:	2301      	movgt	r3, #1
 800b6fa:	2300      	movle	r3, #0
 800b6fc:	b2db      	uxtb	r3, r3
 800b6fe:	f083 0301 	eor.w	r3, r3, #1
 800b702:	b2db      	uxtb	r3, r3
 800b704:	2b00      	cmp	r3, #0
 800b706:	d00e      	beq.n	800b726 <HAL_TIM_PeriodElapsedCallback+0x876>
 800b708:	4b28      	ldr	r3, [pc, #160]	; (800b7ac <HAL_TIM_PeriodElapsedCallback+0x8fc>)
 800b70a:	edd3 7a00 	vldr	s15, [r3]
 800b70e:	ed9f 7a30 	vldr	s14, [pc, #192]	; 800b7d0 <HAL_TIM_PeriodElapsedCallback+0x920>
 800b712:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b716:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b71a:	dd02      	ble.n	800b722 <HAL_TIM_PeriodElapsedCallback+0x872>
 800b71c:	4b23      	ldr	r3, [pc, #140]	; (800b7ac <HAL_TIM_PeriodElapsedCallback+0x8fc>)
 800b71e:	681b      	ldr	r3, [r3, #0]
 800b720:	e002      	b.n	800b728 <HAL_TIM_PeriodElapsedCallback+0x878>
 800b722:	4b2d      	ldr	r3, [pc, #180]	; (800b7d8 <HAL_TIM_PeriodElapsedCallback+0x928>)
 800b724:	e000      	b.n	800b728 <HAL_TIM_PeriodElapsedCallback+0x878>
 800b726:	4b2d      	ldr	r3, [pc, #180]	; (800b7dc <HAL_TIM_PeriodElapsedCallback+0x92c>)
 800b728:	4a20      	ldr	r2, [pc, #128]	; (800b7ac <HAL_TIM_PeriodElapsedCallback+0x8fc>)
 800b72a:	6013      	str	r3, [r2, #0]
			pulse_r = min(max(pulse_r, -100), 100);
 800b72c:	4b22      	ldr	r3, [pc, #136]	; (800b7b8 <HAL_TIM_PeriodElapsedCallback+0x908>)
 800b72e:	edd3 7a00 	vldr	s15, [r3]
 800b732:	ed9f 7a27 	vldr	s14, [pc, #156]	; 800b7d0 <HAL_TIM_PeriodElapsedCallback+0x920>
 800b736:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b73a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b73e:	bfcc      	ite	gt
 800b740:	2301      	movgt	r3, #1
 800b742:	2300      	movle	r3, #0
 800b744:	b2db      	uxtb	r3, r3
 800b746:	f083 0301 	eor.w	r3, r3, #1
 800b74a:	b2db      	uxtb	r3, r3
 800b74c:	2b00      	cmp	r3, #0
 800b74e:	d111      	bne.n	800b774 <HAL_TIM_PeriodElapsedCallback+0x8c4>
 800b750:	4b19      	ldr	r3, [pc, #100]	; (800b7b8 <HAL_TIM_PeriodElapsedCallback+0x908>)
 800b752:	edd3 7a00 	vldr	s15, [r3]
 800b756:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 800b7d4 <HAL_TIM_PeriodElapsedCallback+0x924>
 800b75a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b75e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b762:	bfcc      	ite	gt
 800b764:	2301      	movgt	r3, #1
 800b766:	2300      	movle	r3, #0
 800b768:	b2db      	uxtb	r3, r3
 800b76a:	f083 0301 	eor.w	r3, r3, #1
 800b76e:	b2db      	uxtb	r3, r3
 800b770:	2b00      	cmp	r3, #0
 800b772:	d035      	beq.n	800b7e0 <HAL_TIM_PeriodElapsedCallback+0x930>
 800b774:	4b10      	ldr	r3, [pc, #64]	; (800b7b8 <HAL_TIM_PeriodElapsedCallback+0x908>)
 800b776:	edd3 7a00 	vldr	s15, [r3]
 800b77a:	ed9f 7a15 	vldr	s14, [pc, #84]	; 800b7d0 <HAL_TIM_PeriodElapsedCallback+0x920>
 800b77e:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b782:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b786:	dd02      	ble.n	800b78e <HAL_TIM_PeriodElapsedCallback+0x8de>
 800b788:	4b0b      	ldr	r3, [pc, #44]	; (800b7b8 <HAL_TIM_PeriodElapsedCallback+0x908>)
 800b78a:	681b      	ldr	r3, [r3, #0]
 800b78c:	e029      	b.n	800b7e2 <HAL_TIM_PeriodElapsedCallback+0x932>
 800b78e:	4b12      	ldr	r3, [pc, #72]	; (800b7d8 <HAL_TIM_PeriodElapsedCallback+0x928>)
 800b790:	e027      	b.n	800b7e2 <HAL_TIM_PeriodElapsedCallback+0x932>
 800b792:	bf00      	nop
 800b794:	20000d58 	.word	0x20000d58
 800b798:	20000f78 	.word	0x20000f78
 800b79c:	20000bfc 	.word	0x20000bfc
 800b7a0:	200001a0 	.word	0x200001a0
 800b7a4:	20000af0 	.word	0x20000af0
 800b7a8:	20000b60 	.word	0x20000b60
 800b7ac:	20000ba8 	.word	0x20000ba8
 800b7b0:	200002bc 	.word	0x200002bc
 800b7b4:	20000c08 	.word	0x20000c08
 800b7b8:	20000780 	.word	0x20000780
 800b7bc:	20000f68 	.word	0x20000f68
 800b7c0:	20000d54 	.word	0x20000d54
 800b7c4:	3fe00000 	.word	0x3fe00000
 800b7c8:	20000c00 	.word	0x20000c00
 800b7cc:	451c4000 	.word	0x451c4000
 800b7d0:	c2c80000 	.word	0xc2c80000
 800b7d4:	42c80000 	.word	0x42c80000
 800b7d8:	c2c80000 	.word	0xc2c80000
 800b7dc:	42c80000 	.word	0x42c80000
 800b7e0:	4bbf      	ldr	r3, [pc, #764]	; (800bae0 <HAL_TIM_PeriodElapsedCallback+0xc30>)
 800b7e2:	4ac0      	ldr	r2, [pc, #768]	; (800bae4 <HAL_TIM_PeriodElapsedCallback+0xc34>)
 800b7e4:	6013      	str	r3, [r2, #0]
		}


		if(MF.FLAG.GYRO){
 800b7e6:	4bc0      	ldr	r3, [pc, #768]	; (800bae8 <HAL_TIM_PeriodElapsedCallback+0xc38>)
 800b7e8:	881b      	ldrh	r3, [r3, #0]
 800b7ea:	f3c3 2300 	ubfx	r3, r3, #8, #1
 800b7ee:	b2db      	uxtb	r3, r3
 800b7f0:	2b00      	cmp	r3, #0
 800b7f2:	f000 810b 	beq.w	800ba0c <HAL_TIM_PeriodElapsedCallback+0xb5c>
			target_omega_z += target_degaccel_z * 0.001;
 800b7f6:	4bbd      	ldr	r3, [pc, #756]	; (800baec <HAL_TIM_PeriodElapsedCallback+0xc3c>)
 800b7f8:	681b      	ldr	r3, [r3, #0]
 800b7fa:	4618      	mov	r0, r3
 800b7fc:	f7f4 fe9c 	bl	8000538 <__aeabi_f2d>
 800b800:	a3b3      	add	r3, pc, #716	; (adr r3, 800bad0 <HAL_TIM_PeriodElapsedCallback+0xc20>)
 800b802:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b806:	f7f4 feef 	bl	80005e8 <__aeabi_dmul>
 800b80a:	4603      	mov	r3, r0
 800b80c:	460c      	mov	r4, r1
 800b80e:	4625      	mov	r5, r4
 800b810:	461c      	mov	r4, r3
 800b812:	4bb7      	ldr	r3, [pc, #732]	; (800baf0 <HAL_TIM_PeriodElapsedCallback+0xc40>)
 800b814:	681b      	ldr	r3, [r3, #0]
 800b816:	4618      	mov	r0, r3
 800b818:	f7f4 fe8e 	bl	8000538 <__aeabi_f2d>
 800b81c:	4602      	mov	r2, r0
 800b81e:	460b      	mov	r3, r1
 800b820:	4620      	mov	r0, r4
 800b822:	4629      	mov	r1, r5
 800b824:	f7f4 fd2a 	bl	800027c <__adddf3>
 800b828:	4603      	mov	r3, r0
 800b82a:	460c      	mov	r4, r1
 800b82c:	4618      	mov	r0, r3
 800b82e:	4621      	mov	r1, r4
 800b830:	f7f5 f9b2 	bl	8000b98 <__aeabi_d2f>
 800b834:	4602      	mov	r2, r0
 800b836:	4bae      	ldr	r3, [pc, #696]	; (800baf0 <HAL_TIM_PeriodElapsedCallback+0xc40>)
 800b838:	601a      	str	r2, [r3, #0]
			target_omega_z = max(min(target_omega_z, omega_max), omega_min);
 800b83a:	4bad      	ldr	r3, [pc, #692]	; (800baf0 <HAL_TIM_PeriodElapsedCallback+0xc40>)
 800b83c:	ed93 7a00 	vldr	s14, [r3]
 800b840:	4bac      	ldr	r3, [pc, #688]	; (800baf4 <HAL_TIM_PeriodElapsedCallback+0xc44>)
 800b842:	edd3 7a00 	vldr	s15, [r3]
 800b846:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b84a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b84e:	dd03      	ble.n	800b858 <HAL_TIM_PeriodElapsedCallback+0x9a8>
 800b850:	4ba8      	ldr	r3, [pc, #672]	; (800baf4 <HAL_TIM_PeriodElapsedCallback+0xc44>)
 800b852:	edd3 7a00 	vldr	s15, [r3]
 800b856:	e002      	b.n	800b85e <HAL_TIM_PeriodElapsedCallback+0x9ae>
 800b858:	4ba5      	ldr	r3, [pc, #660]	; (800baf0 <HAL_TIM_PeriodElapsedCallback+0xc40>)
 800b85a:	edd3 7a00 	vldr	s15, [r3]
 800b85e:	4ba6      	ldr	r3, [pc, #664]	; (800baf8 <HAL_TIM_PeriodElapsedCallback+0xc48>)
 800b860:	ed93 7a00 	vldr	s14, [r3]
 800b864:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b868:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b86c:	dd10      	ble.n	800b890 <HAL_TIM_PeriodElapsedCallback+0x9e0>
 800b86e:	4ba0      	ldr	r3, [pc, #640]	; (800baf0 <HAL_TIM_PeriodElapsedCallback+0xc40>)
 800b870:	ed93 7a00 	vldr	s14, [r3]
 800b874:	4b9f      	ldr	r3, [pc, #636]	; (800baf4 <HAL_TIM_PeriodElapsedCallback+0xc44>)
 800b876:	edd3 7a00 	vldr	s15, [r3]
 800b87a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b87e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b882:	dd02      	ble.n	800b88a <HAL_TIM_PeriodElapsedCallback+0x9da>
 800b884:	4b9b      	ldr	r3, [pc, #620]	; (800baf4 <HAL_TIM_PeriodElapsedCallback+0xc44>)
 800b886:	681b      	ldr	r3, [r3, #0]
 800b888:	e004      	b.n	800b894 <HAL_TIM_PeriodElapsedCallback+0x9e4>
 800b88a:	4b99      	ldr	r3, [pc, #612]	; (800baf0 <HAL_TIM_PeriodElapsedCallback+0xc40>)
 800b88c:	681b      	ldr	r3, [r3, #0]
 800b88e:	e001      	b.n	800b894 <HAL_TIM_PeriodElapsedCallback+0x9e4>
 800b890:	4b99      	ldr	r3, [pc, #612]	; (800baf8 <HAL_TIM_PeriodElapsedCallback+0xc48>)
 800b892:	681b      	ldr	r3, [r3, #0]
 800b894:	4a96      	ldr	r2, [pc, #600]	; (800baf0 <HAL_TIM_PeriodElapsedCallback+0xc40>)
 800b896:	6013      	str	r3, [r2, #0]

			epsilon_omega = target_omega_z - gyro_read_z();
 800b898:	4b95      	ldr	r3, [pc, #596]	; (800baf0 <HAL_TIM_PeriodElapsedCallback+0xc40>)
 800b89a:	ed93 8a00 	vldr	s16, [r3]
 800b89e:	f7ff faa7 	bl	800adf0 <gyro_read_z>
 800b8a2:	eef0 7a40 	vmov.f32	s15, s0
 800b8a6:	ee78 7a67 	vsub.f32	s15, s16, s15
 800b8aa:	4b94      	ldr	r3, [pc, #592]	; (800bafc <HAL_TIM_PeriodElapsedCallback+0xc4c>)
 800b8ac:	edc3 7a00 	vstr	s15, [r3]

			target_speed_l = speed_G - (target_omega_z + Kp_o*epsilon_omega)/180*M_PI*TREAD/2;
 800b8b0:	4b93      	ldr	r3, [pc, #588]	; (800bb00 <HAL_TIM_PeriodElapsedCallback+0xc50>)
 800b8b2:	681b      	ldr	r3, [r3, #0]
 800b8b4:	4618      	mov	r0, r3
 800b8b6:	f7f4 fe3f 	bl	8000538 <__aeabi_f2d>
 800b8ba:	4604      	mov	r4, r0
 800b8bc:	460d      	mov	r5, r1
 800b8be:	4b8f      	ldr	r3, [pc, #572]	; (800bafc <HAL_TIM_PeriodElapsedCallback+0xc4c>)
 800b8c0:	edd3 7a00 	vldr	s15, [r3]
 800b8c4:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800b8c8:	ee27 7a87 	vmul.f32	s14, s15, s14
 800b8cc:	4b88      	ldr	r3, [pc, #544]	; (800baf0 <HAL_TIM_PeriodElapsedCallback+0xc40>)
 800b8ce:	edd3 7a00 	vldr	s15, [r3]
 800b8d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b8d6:	ed9f 7a8b 	vldr	s14, [pc, #556]	; 800bb04 <HAL_TIM_PeriodElapsedCallback+0xc54>
 800b8da:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800b8de:	ee16 0a90 	vmov	r0, s13
 800b8e2:	f7f4 fe29 	bl	8000538 <__aeabi_f2d>
 800b8e6:	a37c      	add	r3, pc, #496	; (adr r3, 800bad8 <HAL_TIM_PeriodElapsedCallback+0xc28>)
 800b8e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8ec:	f7f4 fe7c 	bl	80005e8 <__aeabi_dmul>
 800b8f0:	4602      	mov	r2, r0
 800b8f2:	460b      	mov	r3, r1
 800b8f4:	4610      	mov	r0, r2
 800b8f6:	4619      	mov	r1, r3
 800b8f8:	f04f 0200 	mov.w	r2, #0
 800b8fc:	4b82      	ldr	r3, [pc, #520]	; (800bb08 <HAL_TIM_PeriodElapsedCallback+0xc58>)
 800b8fe:	f7f4 fe73 	bl	80005e8 <__aeabi_dmul>
 800b902:	4602      	mov	r2, r0
 800b904:	460b      	mov	r3, r1
 800b906:	4610      	mov	r0, r2
 800b908:	4619      	mov	r1, r3
 800b90a:	f04f 0200 	mov.w	r2, #0
 800b90e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b912:	f7f4 ff93 	bl	800083c <__aeabi_ddiv>
 800b916:	4602      	mov	r2, r0
 800b918:	460b      	mov	r3, r1
 800b91a:	4620      	mov	r0, r4
 800b91c:	4629      	mov	r1, r5
 800b91e:	f7f4 fcab 	bl	8000278 <__aeabi_dsub>
 800b922:	4603      	mov	r3, r0
 800b924:	460c      	mov	r4, r1
 800b926:	4618      	mov	r0, r3
 800b928:	4621      	mov	r1, r4
 800b92a:	f7f5 f935 	bl	8000b98 <__aeabi_d2f>
 800b92e:	4602      	mov	r2, r0
 800b930:	4b76      	ldr	r3, [pc, #472]	; (800bb0c <HAL_TIM_PeriodElapsedCallback+0xc5c>)
 800b932:	601a      	str	r2, [r3, #0]
			target_speed_r = speed_G + (target_omega_z + Kp_o*epsilon_omega)/180*M_PI*TREAD/2;
 800b934:	4b72      	ldr	r3, [pc, #456]	; (800bb00 <HAL_TIM_PeriodElapsedCallback+0xc50>)
 800b936:	681b      	ldr	r3, [r3, #0]
 800b938:	4618      	mov	r0, r3
 800b93a:	f7f4 fdfd 	bl	8000538 <__aeabi_f2d>
 800b93e:	4604      	mov	r4, r0
 800b940:	460d      	mov	r5, r1
 800b942:	4b6e      	ldr	r3, [pc, #440]	; (800bafc <HAL_TIM_PeriodElapsedCallback+0xc4c>)
 800b944:	edd3 7a00 	vldr	s15, [r3]
 800b948:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800b94c:	ee27 7a87 	vmul.f32	s14, s15, s14
 800b950:	4b67      	ldr	r3, [pc, #412]	; (800baf0 <HAL_TIM_PeriodElapsedCallback+0xc40>)
 800b952:	edd3 7a00 	vldr	s15, [r3]
 800b956:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b95a:	ed9f 7a6a 	vldr	s14, [pc, #424]	; 800bb04 <HAL_TIM_PeriodElapsedCallback+0xc54>
 800b95e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800b962:	ee16 0a90 	vmov	r0, s13
 800b966:	f7f4 fde7 	bl	8000538 <__aeabi_f2d>
 800b96a:	a35b      	add	r3, pc, #364	; (adr r3, 800bad8 <HAL_TIM_PeriodElapsedCallback+0xc28>)
 800b96c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b970:	f7f4 fe3a 	bl	80005e8 <__aeabi_dmul>
 800b974:	4602      	mov	r2, r0
 800b976:	460b      	mov	r3, r1
 800b978:	4610      	mov	r0, r2
 800b97a:	4619      	mov	r1, r3
 800b97c:	f04f 0200 	mov.w	r2, #0
 800b980:	4b61      	ldr	r3, [pc, #388]	; (800bb08 <HAL_TIM_PeriodElapsedCallback+0xc58>)
 800b982:	f7f4 fe31 	bl	80005e8 <__aeabi_dmul>
 800b986:	4602      	mov	r2, r0
 800b988:	460b      	mov	r3, r1
 800b98a:	4610      	mov	r0, r2
 800b98c:	4619      	mov	r1, r3
 800b98e:	f04f 0200 	mov.w	r2, #0
 800b992:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b996:	f7f4 ff51 	bl	800083c <__aeabi_ddiv>
 800b99a:	4602      	mov	r2, r0
 800b99c:	460b      	mov	r3, r1
 800b99e:	4620      	mov	r0, r4
 800b9a0:	4629      	mov	r1, r5
 800b9a2:	f7f4 fc6b 	bl	800027c <__adddf3>
 800b9a6:	4603      	mov	r3, r0
 800b9a8:	460c      	mov	r4, r1
 800b9aa:	4618      	mov	r0, r3
 800b9ac:	4621      	mov	r1, r4
 800b9ae:	f7f5 f8f3 	bl	8000b98 <__aeabi_d2f>
 800b9b2:	4602      	mov	r2, r0
 800b9b4:	4b56      	ldr	r3, [pc, #344]	; (800bb10 <HAL_TIM_PeriodElapsedCallback+0xc60>)
 800b9b6:	601a      	str	r2, [r3, #0]

			epsilon_l = target_speed_l - speed_l;
 800b9b8:	4b54      	ldr	r3, [pc, #336]	; (800bb0c <HAL_TIM_PeriodElapsedCallback+0xc5c>)
 800b9ba:	ed93 7a00 	vldr	s14, [r3]
 800b9be:	4b55      	ldr	r3, [pc, #340]	; (800bb14 <HAL_TIM_PeriodElapsedCallback+0xc64>)
 800b9c0:	edd3 7a00 	vldr	s15, [r3]
 800b9c4:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b9c8:	4b53      	ldr	r3, [pc, #332]	; (800bb18 <HAL_TIM_PeriodElapsedCallback+0xc68>)
 800b9ca:	edc3 7a00 	vstr	s15, [r3]
			pulse_l = Kp * epsilon_l;
 800b9ce:	4b52      	ldr	r3, [pc, #328]	; (800bb18 <HAL_TIM_PeriodElapsedCallback+0xc68>)
 800b9d0:	edd3 7a00 	vldr	s15, [r3]
 800b9d4:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800b9d8:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b9dc:	4b4f      	ldr	r3, [pc, #316]	; (800bb1c <HAL_TIM_PeriodElapsedCallback+0xc6c>)
 800b9de:	edc3 7a00 	vstr	s15, [r3]
			epsilon_r = target_speed_r - speed_r;
 800b9e2:	4b4b      	ldr	r3, [pc, #300]	; (800bb10 <HAL_TIM_PeriodElapsedCallback+0xc60>)
 800b9e4:	ed93 7a00 	vldr	s14, [r3]
 800b9e8:	4b4d      	ldr	r3, [pc, #308]	; (800bb20 <HAL_TIM_PeriodElapsedCallback+0xc70>)
 800b9ea:	edd3 7a00 	vldr	s15, [r3]
 800b9ee:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b9f2:	4b4c      	ldr	r3, [pc, #304]	; (800bb24 <HAL_TIM_PeriodElapsedCallback+0xc74>)
 800b9f4:	edc3 7a00 	vstr	s15, [r3]
			pulse_r = Kp * epsilon_r;
 800b9f8:	4b4a      	ldr	r3, [pc, #296]	; (800bb24 <HAL_TIM_PeriodElapsedCallback+0xc74>)
 800b9fa:	edd3 7a00 	vldr	s15, [r3]
 800b9fe:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800ba02:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ba06:	4b37      	ldr	r3, [pc, #220]	; (800bae4 <HAL_TIM_PeriodElapsedCallback+0xc34>)
 800ba08:	edc3 7a00 	vstr	s15, [r3]
		}


		//ADchange interrupt
		uint16_t delay;
		tp = (tp+1)%3;
 800ba0c:	4b46      	ldr	r3, [pc, #280]	; (800bb28 <HAL_TIM_PeriodElapsedCallback+0xc78>)
 800ba0e:	781b      	ldrb	r3, [r3, #0]
 800ba10:	1c5a      	adds	r2, r3, #1
 800ba12:	4b46      	ldr	r3, [pc, #280]	; (800bb2c <HAL_TIM_PeriodElapsedCallback+0xc7c>)
 800ba14:	fb83 3102 	smull	r3, r1, r3, r2
 800ba18:	17d3      	asrs	r3, r2, #31
 800ba1a:	1ac9      	subs	r1, r1, r3
 800ba1c:	460b      	mov	r3, r1
 800ba1e:	005b      	lsls	r3, r3, #1
 800ba20:	440b      	add	r3, r1
 800ba22:	1ad1      	subs	r1, r2, r3
 800ba24:	b2ca      	uxtb	r2, r1
 800ba26:	4b40      	ldr	r3, [pc, #256]	; (800bb28 <HAL_TIM_PeriodElapsedCallback+0xc78>)
 800ba28:	701a      	strb	r2, [r3, #0]

		switch(tp){
 800ba2a:	4b3f      	ldr	r3, [pc, #252]	; (800bb28 <HAL_TIM_PeriodElapsedCallback+0xc78>)
 800ba2c:	781b      	ldrb	r3, [r3, #0]
 800ba2e:	2b01      	cmp	r3, #1
 800ba30:	d044      	beq.n	800babc <HAL_TIM_PeriodElapsedCallback+0xc0c>
 800ba32:	2b02      	cmp	r3, #2
 800ba34:	f000 80bc 	beq.w	800bbb0 <HAL_TIM_PeriodElapsedCallback+0xd00>
 800ba38:	2b00      	cmp	r3, #0
 800ba3a:	f040 82f5 	bne.w	800c028 <HAL_TIM_PeriodElapsedCallback+0x1178>
		  case 0:
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_SET); 	//L
 800ba3e:	2201      	movs	r2, #1
 800ba40:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800ba44:	483a      	ldr	r0, [pc, #232]	; (800bb30 <HAL_TIM_PeriodElapsedCallback+0xc80>)
 800ba46:	f7f6 fc5d 	bl	8002304 <HAL_GPIO_WritePin>
				for(delay=0; delay<sensor_wait; delay++);
 800ba4a:	2300      	movs	r3, #0
 800ba4c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800ba4e:	e002      	b.n	800ba56 <HAL_TIM_PeriodElapsedCallback+0xba6>
 800ba50:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800ba52:	3301      	adds	r3, #1
 800ba54:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800ba56:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800ba58:	f640 12c3 	movw	r2, #2499	; 0x9c3
 800ba5c:	4293      	cmp	r3, r2
 800ba5e:	d9f7      	bls.n	800ba50 <HAL_TIM_PeriodElapsedCallback+0xba0>
				ad_l = get_adc_value(&hadc1, ADC_CHANNEL_3);			//L
 800ba60:	2103      	movs	r1, #3
 800ba62:	4834      	ldr	r0, [pc, #208]	; (800bb34 <HAL_TIM_PeriodElapsedCallback+0xc84>)
 800ba64:	f001 fa32 	bl	800cecc <get_adc_value>
 800ba68:	4603      	mov	r3, r0
 800ba6a:	461a      	mov	r2, r3
 800ba6c:	4b32      	ldr	r3, [pc, #200]	; (800bb38 <HAL_TIM_PeriodElapsedCallback+0xc88>)
 800ba6e:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 800ba70:	2200      	movs	r2, #0
 800ba72:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800ba76:	482e      	ldr	r0, [pc, #184]	; (800bb30 <HAL_TIM_PeriodElapsedCallback+0xc80>)
 800ba78:	f7f6 fc44 	bl	8002304 <HAL_GPIO_WritePin>

				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);  	//R
 800ba7c:	2201      	movs	r2, #1
 800ba7e:	f44f 7180 	mov.w	r1, #256	; 0x100
 800ba82:	482e      	ldr	r0, [pc, #184]	; (800bb3c <HAL_TIM_PeriodElapsedCallback+0xc8c>)
 800ba84:	f7f6 fc3e 	bl	8002304 <HAL_GPIO_WritePin>
				for(delay=0; delay<sensor_wait; delay++);
 800ba88:	2300      	movs	r3, #0
 800ba8a:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800ba8c:	e002      	b.n	800ba94 <HAL_TIM_PeriodElapsedCallback+0xbe4>
 800ba8e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800ba90:	3301      	adds	r3, #1
 800ba92:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800ba94:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800ba96:	f640 12c3 	movw	r2, #2499	; 0x9c3
 800ba9a:	4293      	cmp	r3, r2
 800ba9c:	d9f7      	bls.n	800ba8e <HAL_TIM_PeriodElapsedCallback+0xbde>
				ad_r = get_adc_value(&hadc1, ADC_CHANNEL_1);			//R
 800ba9e:	2101      	movs	r1, #1
 800baa0:	4824      	ldr	r0, [pc, #144]	; (800bb34 <HAL_TIM_PeriodElapsedCallback+0xc84>)
 800baa2:	f001 fa13 	bl	800cecc <get_adc_value>
 800baa6:	4603      	mov	r3, r0
 800baa8:	461a      	mov	r2, r3
 800baaa:	4b25      	ldr	r3, [pc, #148]	; (800bb40 <HAL_TIM_PeriodElapsedCallback+0xc90>)
 800baac:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 800baae:	2200      	movs	r2, #0
 800bab0:	f44f 7180 	mov.w	r1, #256	; 0x100
 800bab4:	4821      	ldr	r0, [pc, #132]	; (800bb3c <HAL_TIM_PeriodElapsedCallback+0xc8c>)
 800bab6:	f7f6 fc25 	bl	8002304 <HAL_GPIO_WritePin>
			break;
 800baba:	e2b5      	b.n	800c028 <HAL_TIM_PeriodElapsedCallback+0x1178>

		  case 1:
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_SET); 	//FL
 800babc:	2201      	movs	r2, #1
 800babe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800bac2:	481b      	ldr	r0, [pc, #108]	; (800bb30 <HAL_TIM_PeriodElapsedCallback+0xc80>)
 800bac4:	f7f6 fc1e 	bl	8002304 <HAL_GPIO_WritePin>
				for(delay=0; delay<sensor_wait; delay++);
 800bac8:	2300      	movs	r3, #0
 800baca:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800bacc:	e03d      	b.n	800bb4a <HAL_TIM_PeriodElapsedCallback+0xc9a>
 800bace:	bf00      	nop
 800bad0:	d2f1a9fc 	.word	0xd2f1a9fc
 800bad4:	3f50624d 	.word	0x3f50624d
 800bad8:	54442d18 	.word	0x54442d18
 800badc:	400921fb 	.word	0x400921fb
 800bae0:	42c80000 	.word	0x42c80000
 800bae4:	20000780 	.word	0x20000780
 800bae8:	20000f68 	.word	0x20000f68
 800baec:	20000b58 	.word	0x20000b58
 800baf0:	200001a8 	.word	0x200001a8
 800baf4:	20000ae8 	.word	0x20000ae8
 800baf8:	200002b8 	.word	0x200002b8
 800bafc:	20000458 	.word	0x20000458
 800bb00:	20000af4 	.word	0x20000af4
 800bb04:	43340000 	.word	0x43340000
 800bb08:	40508000 	.word	0x40508000
 800bb0c:	20000bfc 	.word	0x20000bfc
 800bb10:	200001a0 	.word	0x200001a0
 800bb14:	20000af0 	.word	0x20000af0
 800bb18:	20000b60 	.word	0x20000b60
 800bb1c:	20000ba8 	.word	0x20000ba8
 800bb20:	200002bc 	.word	0x200002bc
 800bb24:	20000c08 	.word	0x20000c08
 800bb28:	200012a0 	.word	0x200012a0
 800bb2c:	55555556 	.word	0x55555556
 800bb30:	40020800 	.word	0x40020800
 800bb34:	20000b00 	.word	0x20000b00
 800bb38:	20000afc 	.word	0x20000afc
 800bb3c:	40020000 	.word	0x40020000
 800bb40:	20000f60 	.word	0x20000f60
 800bb44:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800bb46:	3301      	adds	r3, #1
 800bb48:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800bb4a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800bb4c:	f640 12c3 	movw	r2, #2499	; 0x9c3
 800bb50:	4293      	cmp	r3, r2
 800bb52:	d9f7      	bls.n	800bb44 <HAL_TIM_PeriodElapsedCallback+0xc94>
				ad_fl = get_adc_value(&hadc1, ADC_CHANNEL_2);			//FL
 800bb54:	2102      	movs	r1, #2
 800bb56:	48b4      	ldr	r0, [pc, #720]	; (800be28 <HAL_TIM_PeriodElapsedCallback+0xf78>)
 800bb58:	f001 f9b8 	bl	800cecc <get_adc_value>
 800bb5c:	4603      	mov	r3, r0
 800bb5e:	461a      	mov	r2, r3
 800bb60:	4bb2      	ldr	r3, [pc, #712]	; (800be2c <HAL_TIM_PeriodElapsedCallback+0xf7c>)
 800bb62:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET);
 800bb64:	2200      	movs	r2, #0
 800bb66:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800bb6a:	48b1      	ldr	r0, [pc, #708]	; (800be30 <HAL_TIM_PeriodElapsedCallback+0xf80>)
 800bb6c:	f7f6 fbca 	bl	8002304 <HAL_GPIO_WritePin>

				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);   	//FR
 800bb70:	2201      	movs	r2, #1
 800bb72:	f44f 7100 	mov.w	r1, #512	; 0x200
 800bb76:	48ae      	ldr	r0, [pc, #696]	; (800be30 <HAL_TIM_PeriodElapsedCallback+0xf80>)
 800bb78:	f7f6 fbc4 	bl	8002304 <HAL_GPIO_WritePin>
				for(delay=0; delay<sensor_wait; delay++);
 800bb7c:	2300      	movs	r3, #0
 800bb7e:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800bb80:	e002      	b.n	800bb88 <HAL_TIM_PeriodElapsedCallback+0xcd8>
 800bb82:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800bb84:	3301      	adds	r3, #1
 800bb86:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800bb88:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800bb8a:	f640 12c3 	movw	r2, #2499	; 0x9c3
 800bb8e:	4293      	cmp	r3, r2
 800bb90:	d9f7      	bls.n	800bb82 <HAL_TIM_PeriodElapsedCallback+0xcd2>
				ad_fr = get_adc_value(&hadc1, ADC_CHANNEL_0);			//FR
 800bb92:	2100      	movs	r1, #0
 800bb94:	48a4      	ldr	r0, [pc, #656]	; (800be28 <HAL_TIM_PeriodElapsedCallback+0xf78>)
 800bb96:	f001 f999 	bl	800cecc <get_adc_value>
 800bb9a:	4603      	mov	r3, r0
 800bb9c:	461a      	mov	r2, r3
 800bb9e:	4ba5      	ldr	r3, [pc, #660]	; (800be34 <HAL_TIM_PeriodElapsedCallback+0xf84>)
 800bba0:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 800bba2:	2200      	movs	r2, #0
 800bba4:	f44f 7100 	mov.w	r1, #512	; 0x200
 800bba8:	48a1      	ldr	r0, [pc, #644]	; (800be30 <HAL_TIM_PeriodElapsedCallback+0xf80>)
 800bbaa:	f7f6 fbab 	bl	8002304 <HAL_GPIO_WritePin>
			break;
 800bbae:	e23b      	b.n	800c028 <HAL_TIM_PeriodElapsedCallback+0x1178>

		  case 2:
				//
				if(MF.FLAG.WCTRL){
 800bbb0:	4ba1      	ldr	r3, [pc, #644]	; (800be38 <HAL_TIM_PeriodElapsedCallback+0xf88>)
 800bbb2:	881b      	ldrh	r3, [r3, #0]
 800bbb4:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800bbb8:	b2db      	uxtb	r3, r3
 800bbba:	2b00      	cmp	r3, #0
 800bbbc:	f000 81c5 	beq.w	800bf4a <HAL_TIM_PeriodElapsedCallback+0x109a>
					if(!MF2.FLAG.V){
 800bbc0:	4b9e      	ldr	r3, [pc, #632]	; (800be3c <HAL_TIM_PeriodElapsedCallback+0xf8c>)
 800bbc2:	881b      	ldrh	r3, [r3, #0]
 800bbc4:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800bbc8:	b2db      	uxtb	r3, r3
 800bbca:	2b00      	cmp	r3, #0
 800bbcc:	f040 80bb 	bne.w	800bd46 <HAL_TIM_PeriodElapsedCallback+0xe96>
						int16_t dwl_tmp = 0, dwr_tmp = 0;
 800bbd0:	2300      	movs	r3, #0
 800bbd2:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800bbd4:	2300      	movs	r3, #0
 800bbd6:	857b      	strh	r3, [r7, #42]	; 0x2a
						dif_l = (int32_t) ad_l - base_l;
 800bbd8:	4b99      	ldr	r3, [pc, #612]	; (800be40 <HAL_TIM_PeriodElapsedCallback+0xf90>)
 800bbda:	681b      	ldr	r3, [r3, #0]
 800bbdc:	b29a      	uxth	r2, r3
 800bbde:	4b99      	ldr	r3, [pc, #612]	; (800be44 <HAL_TIM_PeriodElapsedCallback+0xf94>)
 800bbe0:	881b      	ldrh	r3, [r3, #0]
 800bbe2:	1ad3      	subs	r3, r2, r3
 800bbe4:	b29b      	uxth	r3, r3
 800bbe6:	b21a      	sxth	r2, r3
 800bbe8:	4b97      	ldr	r3, [pc, #604]	; (800be48 <HAL_TIM_PeriodElapsedCallback+0xf98>)
 800bbea:	801a      	strh	r2, [r3, #0]
						dif_r = (int32_t) ad_r - base_r;
 800bbec:	4b97      	ldr	r3, [pc, #604]	; (800be4c <HAL_TIM_PeriodElapsedCallback+0xf9c>)
 800bbee:	681b      	ldr	r3, [r3, #0]
 800bbf0:	b29a      	uxth	r2, r3
 800bbf2:	4b97      	ldr	r3, [pc, #604]	; (800be50 <HAL_TIM_PeriodElapsedCallback+0xfa0>)
 800bbf4:	881b      	ldrh	r3, [r3, #0]
 800bbf6:	1ad3      	subs	r3, r2, r3
 800bbf8:	b29b      	uxth	r3, r3
 800bbfa:	b21a      	sxth	r2, r3
 800bbfc:	4b95      	ldr	r3, [pc, #596]	; (800be54 <HAL_TIM_PeriodElapsedCallback+0xfa4>)
 800bbfe:	801a      	strh	r2, [r3, #0]

						if(dif_l > CTRL_BASE_L || dif_r > CTRL_BASE_R){
 800bc00:	4b91      	ldr	r3, [pc, #580]	; (800be48 <HAL_TIM_PeriodElapsedCallback+0xf98>)
 800bc02:	f9b3 3000 	ldrsh.w	r3, [r3]
 800bc06:	2b23      	cmp	r3, #35	; 0x23
 800bc08:	dc04      	bgt.n	800bc14 <HAL_TIM_PeriodElapsedCallback+0xd64>
 800bc0a:	4b92      	ldr	r3, [pc, #584]	; (800be54 <HAL_TIM_PeriodElapsedCallback+0xfa4>)
 800bc0c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800bc10:	2b1e      	cmp	r3, #30
 800bc12:	dd70      	ble.n	800bcf6 <HAL_TIM_PeriodElapsedCallback+0xe46>
							if(dif_l > CTRL_BASE_L){
 800bc14:	4b8c      	ldr	r3, [pc, #560]	; (800be48 <HAL_TIM_PeriodElapsedCallback+0xf98>)
 800bc16:	f9b3 3000 	ldrsh.w	r3, [r3]
 800bc1a:	2b23      	cmp	r3, #35	; 0x23
 800bc1c:	dd30      	ble.n	800bc80 <HAL_TIM_PeriodElapsedCallback+0xdd0>
								dwl_tmp += CTRL_CONT_W * dif_l;					//a比例制御値を決定
 800bc1e:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 800bc22:	ee07 3a90 	vmov	s15, r3
 800bc26:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800bc2a:	4b87      	ldr	r3, [pc, #540]	; (800be48 <HAL_TIM_PeriodElapsedCallback+0xf98>)
 800bc2c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800bc30:	ee07 3a90 	vmov	s15, r3
 800bc34:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bc38:	eef6 6a08 	vmov.f32	s13, #104	; 0x3f400000  0.750
 800bc3c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800bc40:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bc44:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800bc48:	ee17 3a90 	vmov	r3, s15
 800bc4c:	85bb      	strh	r3, [r7, #44]	; 0x2c
								dwr_tmp += -1 * CTRL_CONT_W * dif_l;			//a比例制御値を決定
 800bc4e:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800bc52:	ee07 3a90 	vmov	s15, r3
 800bc56:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800bc5a:	4b7b      	ldr	r3, [pc, #492]	; (800be48 <HAL_TIM_PeriodElapsedCallback+0xf98>)
 800bc5c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800bc60:	ee07 3a90 	vmov	s15, r3
 800bc64:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bc68:	eefe 6a08 	vmov.f32	s13, #232	; 0xbf400000 -0.750
 800bc6c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800bc70:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bc74:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800bc78:	ee17 3a90 	vmov	r3, s15
 800bc7c:	857b      	strh	r3, [r7, #42]	; 0x2a
 800bc7e:	e034      	b.n	800bcea <HAL_TIM_PeriodElapsedCallback+0xe3a>
							}
							else if(dif_r > CTRL_BASE_R){
 800bc80:	4b74      	ldr	r3, [pc, #464]	; (800be54 <HAL_TIM_PeriodElapsedCallback+0xfa4>)
 800bc82:	f9b3 3000 	ldrsh.w	r3, [r3]
 800bc86:	2b1e      	cmp	r3, #30
 800bc88:	dd2f      	ble.n	800bcea <HAL_TIM_PeriodElapsedCallback+0xe3a>
								dwl_tmp += -1 * CTRL_CONT_W * dif_r;			//a比例制御値を決定
 800bc8a:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 800bc8e:	ee07 3a90 	vmov	s15, r3
 800bc92:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800bc96:	4b6f      	ldr	r3, [pc, #444]	; (800be54 <HAL_TIM_PeriodElapsedCallback+0xfa4>)
 800bc98:	f9b3 3000 	ldrsh.w	r3, [r3]
 800bc9c:	ee07 3a90 	vmov	s15, r3
 800bca0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bca4:	eefe 6a08 	vmov.f32	s13, #232	; 0xbf400000 -0.750
 800bca8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800bcac:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bcb0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800bcb4:	ee17 3a90 	vmov	r3, s15
 800bcb8:	85bb      	strh	r3, [r7, #44]	; 0x2c
								dwr_tmp += CTRL_CONT_W * dif_r;					//a比例制御値を決定
 800bcba:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800bcbe:	ee07 3a90 	vmov	s15, r3
 800bcc2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800bcc6:	4b63      	ldr	r3, [pc, #396]	; (800be54 <HAL_TIM_PeriodElapsedCallback+0xfa4>)
 800bcc8:	f9b3 3000 	ldrsh.w	r3, [r3]
 800bccc:	ee07 3a90 	vmov	s15, r3
 800bcd0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bcd4:	eef6 6a08 	vmov.f32	s13, #104	; 0x3f400000  0.750
 800bcd8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800bcdc:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bce0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800bce4:	ee17 3a90 	vmov	r3, s15
 800bce8:	857b      	strh	r3, [r7, #42]	; 0x2a
							}
							MF2.FLAG.WG = 1;
 800bcea:	4a54      	ldr	r2, [pc, #336]	; (800be3c <HAL_TIM_PeriodElapsedCallback+0xf8c>)
 800bcec:	8813      	ldrh	r3, [r2, #0]
 800bcee:	f043 0310 	orr.w	r3, r3, #16
 800bcf2:	8013      	strh	r3, [r2, #0]
 800bcf4:	e004      	b.n	800bd00 <HAL_TIM_PeriodElapsedCallback+0xe50>
						}else{
							MF2.FLAG.WG = 0;
 800bcf6:	4a51      	ldr	r2, [pc, #324]	; (800be3c <HAL_TIM_PeriodElapsedCallback+0xf8c>)
 800bcf8:	8813      	ldrh	r3, [r2, #0]
 800bcfa:	f36f 1304 	bfc	r3, #4, #1
 800bcfe:	8013      	strh	r3, [r2, #0]
						}
						dwl = max(min(CTRL_MAX_W, dwl_tmp), -1 * CTRL_MAX_W);
 800bd00:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 800bd04:	f513 7f7a 	cmn.w	r3, #1000	; 0x3e8
 800bd08:	dd08      	ble.n	800bd1c <HAL_TIM_PeriodElapsedCallback+0xe6c>
 800bd0a:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 800bd0e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800bd12:	bfa8      	it	ge
 800bd14:	f44f 737a 	movge.w	r3, #1000	; 0x3e8
 800bd18:	b21b      	sxth	r3, r3
 800bd1a:	e000      	b.n	800bd1e <HAL_TIM_PeriodElapsedCallback+0xe6e>
 800bd1c:	4b4e      	ldr	r3, [pc, #312]	; (800be58 <HAL_TIM_PeriodElapsedCallback+0xfa8>)
 800bd1e:	4a4f      	ldr	r2, [pc, #316]	; (800be5c <HAL_TIM_PeriodElapsedCallback+0xfac>)
 800bd20:	8013      	strh	r3, [r2, #0]
						dwr = max(min(CTRL_MAX_W, dwr_tmp), -1 * CTRL_MAX_W);
 800bd22:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800bd26:	f513 7f7a 	cmn.w	r3, #1000	; 0x3e8
 800bd2a:	dd08      	ble.n	800bd3e <HAL_TIM_PeriodElapsedCallback+0xe8e>
 800bd2c:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800bd30:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800bd34:	bfa8      	it	ge
 800bd36:	f44f 737a 	movge.w	r3, #1000	; 0x3e8
 800bd3a:	b21b      	sxth	r3, r3
 800bd3c:	e000      	b.n	800bd40 <HAL_TIM_PeriodElapsedCallback+0xe90>
 800bd3e:	4b46      	ldr	r3, [pc, #280]	; (800be58 <HAL_TIM_PeriodElapsedCallback+0xfa8>)
 800bd40:	4a47      	ldr	r2, [pc, #284]	; (800be60 <HAL_TIM_PeriodElapsedCallback+0xfb0>)
 800bd42:	8013      	strh	r3, [r2, #0]
 800bd44:	e108      	b.n	800bf58 <HAL_TIM_PeriodElapsedCallback+0x10a8>
					}else{
						int16_t dwl_tmp = 0, dwr_tmp = 0;
 800bd46:	2300      	movs	r3, #0
 800bd48:	853b      	strh	r3, [r7, #40]	; 0x28
 800bd4a:	2300      	movs	r3, #0
 800bd4c:	84fb      	strh	r3, [r7, #38]	; 0x26
						dif_l = (int32_t) ad_fl - BASE_FL;
 800bd4e:	4b37      	ldr	r3, [pc, #220]	; (800be2c <HAL_TIM_PeriodElapsedCallback+0xf7c>)
 800bd50:	681b      	ldr	r3, [r3, #0]
 800bd52:	b29b      	uxth	r3, r3
 800bd54:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800bd58:	b29b      	uxth	r3, r3
 800bd5a:	b21a      	sxth	r2, r3
 800bd5c:	4b3a      	ldr	r3, [pc, #232]	; (800be48 <HAL_TIM_PeriodElapsedCallback+0xf98>)
 800bd5e:	801a      	strh	r2, [r3, #0]
						dif_r = (int32_t) ad_fr - BASE_FR;
 800bd60:	4b34      	ldr	r3, [pc, #208]	; (800be34 <HAL_TIM_PeriodElapsedCallback+0xf84>)
 800bd62:	681b      	ldr	r3, [r3, #0]
 800bd64:	b29b      	uxth	r3, r3
 800bd66:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800bd6a:	b29b      	uxth	r3, r3
 800bd6c:	b21a      	sxth	r2, r3
 800bd6e:	4b39      	ldr	r3, [pc, #228]	; (800be54 <HAL_TIM_PeriodElapsedCallback+0xfa4>)
 800bd70:	801a      	strh	r2, [r3, #0]

						if(dif_l > CTRL_BASE_FL || dif_r > CTRL_BASE_FR){
 800bd72:	4b35      	ldr	r3, [pc, #212]	; (800be48 <HAL_TIM_PeriodElapsedCallback+0xf98>)
 800bd74:	f9b3 3000 	ldrsh.w	r3, [r3]
 800bd78:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 800bd7c:	dc05      	bgt.n	800bd8a <HAL_TIM_PeriodElapsedCallback+0xeda>
 800bd7e:	4b35      	ldr	r3, [pc, #212]	; (800be54 <HAL_TIM_PeriodElapsedCallback+0xfa4>)
 800bd80:	f9b3 3000 	ldrsh.w	r3, [r3]
 800bd84:	2bc8      	cmp	r3, #200	; 0xc8
 800bd86:	f340 80b8 	ble.w	800befa <HAL_TIM_PeriodElapsedCallback+0x104a>
							if(dif_l > CTRL_BASE_FL){
 800bd8a:	4b2f      	ldr	r3, [pc, #188]	; (800be48 <HAL_TIM_PeriodElapsedCallback+0xf98>)
 800bd8c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800bd90:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 800bd94:	dd66      	ble.n	800be64 <HAL_TIM_PeriodElapsedCallback+0xfb4>
								dwl_tmp += CTRL_CONT_W * 0.1 * dif_l;				//a比例制御値を決定
 800bd96:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 800bd9a:	4618      	mov	r0, r3
 800bd9c:	f7f4 fbba 	bl	8000514 <__aeabi_i2d>
 800bda0:	4604      	mov	r4, r0
 800bda2:	460d      	mov	r5, r1
 800bda4:	4b28      	ldr	r3, [pc, #160]	; (800be48 <HAL_TIM_PeriodElapsedCallback+0xf98>)
 800bda6:	f9b3 3000 	ldrsh.w	r3, [r3]
 800bdaa:	4618      	mov	r0, r3
 800bdac:	f7f4 fbb2 	bl	8000514 <__aeabi_i2d>
 800bdb0:	a319      	add	r3, pc, #100	; (adr r3, 800be18 <HAL_TIM_PeriodElapsedCallback+0xf68>)
 800bdb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdb6:	f7f4 fc17 	bl	80005e8 <__aeabi_dmul>
 800bdba:	4602      	mov	r2, r0
 800bdbc:	460b      	mov	r3, r1
 800bdbe:	4620      	mov	r0, r4
 800bdc0:	4629      	mov	r1, r5
 800bdc2:	f7f4 fa5b 	bl	800027c <__adddf3>
 800bdc6:	4603      	mov	r3, r0
 800bdc8:	460c      	mov	r4, r1
 800bdca:	4618      	mov	r0, r3
 800bdcc:	4621      	mov	r1, r4
 800bdce:	f7f4 febb 	bl	8000b48 <__aeabi_d2iz>
 800bdd2:	4603      	mov	r3, r0
 800bdd4:	853b      	strh	r3, [r7, #40]	; 0x28
								dwr_tmp += -1 * CTRL_CONT_W * 0.1 * dif_l;			//a比例制御値を決定
 800bdd6:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800bdda:	4618      	mov	r0, r3
 800bddc:	f7f4 fb9a 	bl	8000514 <__aeabi_i2d>
 800bde0:	4604      	mov	r4, r0
 800bde2:	460d      	mov	r5, r1
 800bde4:	4b18      	ldr	r3, [pc, #96]	; (800be48 <HAL_TIM_PeriodElapsedCallback+0xf98>)
 800bde6:	f9b3 3000 	ldrsh.w	r3, [r3]
 800bdea:	4618      	mov	r0, r3
 800bdec:	f7f4 fb92 	bl	8000514 <__aeabi_i2d>
 800bdf0:	a30b      	add	r3, pc, #44	; (adr r3, 800be20 <HAL_TIM_PeriodElapsedCallback+0xf70>)
 800bdf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdf6:	f7f4 fbf7 	bl	80005e8 <__aeabi_dmul>
 800bdfa:	4602      	mov	r2, r0
 800bdfc:	460b      	mov	r3, r1
 800bdfe:	4620      	mov	r0, r4
 800be00:	4629      	mov	r1, r5
 800be02:	f7f4 fa3b 	bl	800027c <__adddf3>
 800be06:	4603      	mov	r3, r0
 800be08:	460c      	mov	r4, r1
 800be0a:	4618      	mov	r0, r3
 800be0c:	4621      	mov	r1, r4
 800be0e:	f7f4 fe9b 	bl	8000b48 <__aeabi_d2iz>
 800be12:	4603      	mov	r3, r0
 800be14:	84fb      	strh	r3, [r7, #38]	; 0x26
 800be16:	e06a      	b.n	800beee <HAL_TIM_PeriodElapsedCallback+0x103e>
 800be18:	33333334 	.word	0x33333334
 800be1c:	3fb33333 	.word	0x3fb33333
 800be20:	33333334 	.word	0x33333334
 800be24:	bfb33333 	.word	0xbfb33333
 800be28:	20000b00 	.word	0x20000b00
 800be2c:	20000d54 	.word	0x20000d54
 800be30:	40020800 	.word	0x40020800
 800be34:	20000c00 	.word	0x20000c00
 800be38:	20000f68 	.word	0x20000f68
 800be3c:	20000f64 	.word	0x20000f64
 800be40:	20000afc 	.word	0x20000afc
 800be44:	2000034c 	.word	0x2000034c
 800be48:	20000b50 	.word	0x20000b50
 800be4c:	20000f60 	.word	0x20000f60
 800be50:	200002c0 	.word	0x200002c0
 800be54:	20000bb2 	.word	0x20000bb2
 800be58:	fffffc18 	.word	0xfffffc18
 800be5c:	20000af8 	.word	0x20000af8
 800be60:	20000f74 	.word	0x20000f74
							}
							else if(dif_r > CTRL_BASE_FR){
 800be64:	4bb4      	ldr	r3, [pc, #720]	; (800c138 <HAL_TIM_PeriodElapsedCallback+0x1288>)
 800be66:	f9b3 3000 	ldrsh.w	r3, [r3]
 800be6a:	2bc8      	cmp	r3, #200	; 0xc8
 800be6c:	dd3f      	ble.n	800beee <HAL_TIM_PeriodElapsedCallback+0x103e>
								dwl_tmp += -1 * CTRL_CONT_W * 0.2 * dif_r;			//a比例制御値を決定
 800be6e:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 800be72:	4618      	mov	r0, r3
 800be74:	f7f4 fb4e 	bl	8000514 <__aeabi_i2d>
 800be78:	4604      	mov	r4, r0
 800be7a:	460d      	mov	r5, r1
 800be7c:	4bae      	ldr	r3, [pc, #696]	; (800c138 <HAL_TIM_PeriodElapsedCallback+0x1288>)
 800be7e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800be82:	4618      	mov	r0, r3
 800be84:	f7f4 fb46 	bl	8000514 <__aeabi_i2d>
 800be88:	a3a7      	add	r3, pc, #668	; (adr r3, 800c128 <HAL_TIM_PeriodElapsedCallback+0x1278>)
 800be8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be8e:	f7f4 fbab 	bl	80005e8 <__aeabi_dmul>
 800be92:	4602      	mov	r2, r0
 800be94:	460b      	mov	r3, r1
 800be96:	4620      	mov	r0, r4
 800be98:	4629      	mov	r1, r5
 800be9a:	f7f4 f9ef 	bl	800027c <__adddf3>
 800be9e:	4603      	mov	r3, r0
 800bea0:	460c      	mov	r4, r1
 800bea2:	4618      	mov	r0, r3
 800bea4:	4621      	mov	r1, r4
 800bea6:	f7f4 fe4f 	bl	8000b48 <__aeabi_d2iz>
 800beaa:	4603      	mov	r3, r0
 800beac:	853b      	strh	r3, [r7, #40]	; 0x28
								dwr_tmp += CTRL_CONT_W * 0.2 * dif_r;				//a比例制御値を決定
 800beae:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800beb2:	4618      	mov	r0, r3
 800beb4:	f7f4 fb2e 	bl	8000514 <__aeabi_i2d>
 800beb8:	4604      	mov	r4, r0
 800beba:	460d      	mov	r5, r1
 800bebc:	4b9e      	ldr	r3, [pc, #632]	; (800c138 <HAL_TIM_PeriodElapsedCallback+0x1288>)
 800bebe:	f9b3 3000 	ldrsh.w	r3, [r3]
 800bec2:	4618      	mov	r0, r3
 800bec4:	f7f4 fb26 	bl	8000514 <__aeabi_i2d>
 800bec8:	a399      	add	r3, pc, #612	; (adr r3, 800c130 <HAL_TIM_PeriodElapsedCallback+0x1280>)
 800beca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bece:	f7f4 fb8b 	bl	80005e8 <__aeabi_dmul>
 800bed2:	4602      	mov	r2, r0
 800bed4:	460b      	mov	r3, r1
 800bed6:	4620      	mov	r0, r4
 800bed8:	4629      	mov	r1, r5
 800beda:	f7f4 f9cf 	bl	800027c <__adddf3>
 800bede:	4603      	mov	r3, r0
 800bee0:	460c      	mov	r4, r1
 800bee2:	4618      	mov	r0, r3
 800bee4:	4621      	mov	r1, r4
 800bee6:	f7f4 fe2f 	bl	8000b48 <__aeabi_d2iz>
 800beea:	4603      	mov	r3, r0
 800beec:	84fb      	strh	r3, [r7, #38]	; 0x26
							}
							MF2.FLAG.WG = 1;
 800beee:	4a93      	ldr	r2, [pc, #588]	; (800c13c <HAL_TIM_PeriodElapsedCallback+0x128c>)
 800bef0:	8813      	ldrh	r3, [r2, #0]
 800bef2:	f043 0310 	orr.w	r3, r3, #16
 800bef6:	8013      	strh	r3, [r2, #0]
 800bef8:	e004      	b.n	800bf04 <HAL_TIM_PeriodElapsedCallback+0x1054>
						}else{
							MF2.FLAG.WG = 0;
 800befa:	4a90      	ldr	r2, [pc, #576]	; (800c13c <HAL_TIM_PeriodElapsedCallback+0x128c>)
 800befc:	8813      	ldrh	r3, [r2, #0]
 800befe:	f36f 1304 	bfc	r3, #4, #1
 800bf02:	8013      	strh	r3, [r2, #0]
						}
						dwl = max(min(CTRL_MAX_W, dwl_tmp), -1 * CTRL_MAX_W);
 800bf04:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 800bf08:	f513 7f7a 	cmn.w	r3, #1000	; 0x3e8
 800bf0c:	dd08      	ble.n	800bf20 <HAL_TIM_PeriodElapsedCallback+0x1070>
 800bf0e:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 800bf12:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800bf16:	bfa8      	it	ge
 800bf18:	f44f 737a 	movge.w	r3, #1000	; 0x3e8
 800bf1c:	b21b      	sxth	r3, r3
 800bf1e:	e000      	b.n	800bf22 <HAL_TIM_PeriodElapsedCallback+0x1072>
 800bf20:	4b87      	ldr	r3, [pc, #540]	; (800c140 <HAL_TIM_PeriodElapsedCallback+0x1290>)
 800bf22:	4a88      	ldr	r2, [pc, #544]	; (800c144 <HAL_TIM_PeriodElapsedCallback+0x1294>)
 800bf24:	8013      	strh	r3, [r2, #0]
						dwr = max(min(CTRL_MAX_W, dwr_tmp), -1 * CTRL_MAX_W);
 800bf26:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800bf2a:	f513 7f7a 	cmn.w	r3, #1000	; 0x3e8
 800bf2e:	dd08      	ble.n	800bf42 <HAL_TIM_PeriodElapsedCallback+0x1092>
 800bf30:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800bf34:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800bf38:	bfa8      	it	ge
 800bf3a:	f44f 737a 	movge.w	r3, #1000	; 0x3e8
 800bf3e:	b21b      	sxth	r3, r3
 800bf40:	e000      	b.n	800bf44 <HAL_TIM_PeriodElapsedCallback+0x1094>
 800bf42:	4b7f      	ldr	r3, [pc, #508]	; (800c140 <HAL_TIM_PeriodElapsedCallback+0x1290>)
 800bf44:	4a80      	ldr	r2, [pc, #512]	; (800c148 <HAL_TIM_PeriodElapsedCallback+0x1298>)
 800bf46:	8013      	strh	r3, [r2, #0]
 800bf48:	e006      	b.n	800bf58 <HAL_TIM_PeriodElapsedCallback+0x10a8>
					}
				}else{
					//a制御フラグがなければ壁制御値0
					dwl = dwr = 0;
 800bf4a:	2100      	movs	r1, #0
 800bf4c:	4b7e      	ldr	r3, [pc, #504]	; (800c148 <HAL_TIM_PeriodElapsedCallback+0x1298>)
 800bf4e:	460a      	mov	r2, r1
 800bf50:	801a      	strh	r2, [r3, #0]
 800bf52:	4b7c      	ldr	r3, [pc, #496]	; (800c144 <HAL_TIM_PeriodElapsedCallback+0x1294>)
 800bf54:	460a      	mov	r2, r1
 800bf56:	801a      	strh	r2, [r3, #0]
				}

				if(MF.FLAG.GCTRL){
 800bf58:	4b7c      	ldr	r3, [pc, #496]	; (800c14c <HAL_TIM_PeriodElapsedCallback+0x129c>)
 800bf5a:	881b      	ldrh	r3, [r3, #0]
 800bf5c:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800bf60:	b2db      	uxtb	r3, r3
 800bf62:	2b00      	cmp	r3, #0
 800bf64:	d058      	beq.n	800c018 <HAL_TIM_PeriodElapsedCallback+0x1168>
				}

					dg = CTRL_CONT_G * gyro_read_z();			//a角速度制御
					dg = CTRL_CONT_G * degree_z;				//a角度制御
*/
					if(MF.FLAG.FWALL){
 800bf66:	4b79      	ldr	r3, [pc, #484]	; (800c14c <HAL_TIM_PeriodElapsedCallback+0x129c>)
 800bf68:	881b      	ldrh	r3, [r3, #0]
 800bf6a:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800bf6e:	b2db      	uxtb	r3, r3
 800bf70:	2b00      	cmp	r3, #0
 800bf72:	d013      	beq.n	800bf9c <HAL_TIM_PeriodElapsedCallback+0x10ec>
						dg = CTRL_CONT_G*4 * (target_degree_z - degree_z);		//a角度制御(目標角度はスタートを0度とし、旋回量と対応付け)
 800bf74:	4b76      	ldr	r3, [pc, #472]	; (800c150 <HAL_TIM_PeriodElapsedCallback+0x12a0>)
 800bf76:	ed93 7a00 	vldr	s14, [r3]
 800bf7a:	4b76      	ldr	r3, [pc, #472]	; (800c154 <HAL_TIM_PeriodElapsedCallback+0x12a4>)
 800bf7c:	edd3 7a00 	vldr	s15, [r3]
 800bf80:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bf84:	ed9f 7a74 	vldr	s14, [pc, #464]	; 800c158 <HAL_TIM_PeriodElapsedCallback+0x12a8>
 800bf88:	ee67 7a87 	vmul.f32	s15, s15, s14
 800bf8c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800bf90:	ee17 3a90 	vmov	r3, s15
 800bf94:	b21a      	sxth	r2, r3
 800bf96:	4b71      	ldr	r3, [pc, #452]	; (800c15c <HAL_TIM_PeriodElapsedCallback+0x12ac>)
 800bf98:	801a      	strh	r2, [r3, #0]
 800bf9a:	e012      	b.n	800bfc2 <HAL_TIM_PeriodElapsedCallback+0x1112>
					}else{
						dg = CTRL_CONT_G * (target_degree_z - degree_z);		//a角度制御(目標角度はスタートを0度とし、旋回量と対応付け)
 800bf9c:	4b6c      	ldr	r3, [pc, #432]	; (800c150 <HAL_TIM_PeriodElapsedCallback+0x12a0>)
 800bf9e:	ed93 7a00 	vldr	s14, [r3]
 800bfa2:	4b6c      	ldr	r3, [pc, #432]	; (800c154 <HAL_TIM_PeriodElapsedCallback+0x12a4>)
 800bfa4:	edd3 7a00 	vldr	s15, [r3]
 800bfa8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bfac:	ed9f 7a6c 	vldr	s14, [pc, #432]	; 800c160 <HAL_TIM_PeriodElapsedCallback+0x12b0>
 800bfb0:	ee67 7a87 	vmul.f32	s15, s15, s14
 800bfb4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800bfb8:	ee17 3a90 	vmov	r3, s15
 800bfbc:	b21a      	sxth	r2, r3
 800bfbe:	4b67      	ldr	r3, [pc, #412]	; (800c15c <HAL_TIM_PeriodElapsedCallback+0x12ac>)
 800bfc0:	801a      	strh	r2, [r3, #0]
					}

					dg = max(min(CTRL_MAX_G, dg), -1 * CTRL_MAX_G);
 800bfc2:	4b66      	ldr	r3, [pc, #408]	; (800c15c <HAL_TIM_PeriodElapsedCallback+0x12ac>)
 800bfc4:	881b      	ldrh	r3, [r3, #0]
 800bfc6:	b21b      	sxth	r3, r3
 800bfc8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800bfcc:	da05      	bge.n	800bfda <HAL_TIM_PeriodElapsedCallback+0x112a>
 800bfce:	4b63      	ldr	r3, [pc, #396]	; (800c15c <HAL_TIM_PeriodElapsedCallback+0x12ac>)
 800bfd0:	881b      	ldrh	r3, [r3, #0]
 800bfd2:	b21b      	sxth	r3, r3
 800bfd4:	f513 7f7a 	cmn.w	r3, #1000	; 0x3e8
 800bfd8:	dd0c      	ble.n	800bff4 <HAL_TIM_PeriodElapsedCallback+0x1144>
 800bfda:	4b60      	ldr	r3, [pc, #384]	; (800c15c <HAL_TIM_PeriodElapsedCallback+0x12ac>)
 800bfdc:	881b      	ldrh	r3, [r3, #0]
 800bfde:	b21b      	sxth	r3, r3
 800bfe0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800bfe4:	da03      	bge.n	800bfee <HAL_TIM_PeriodElapsedCallback+0x113e>
 800bfe6:	4b5d      	ldr	r3, [pc, #372]	; (800c15c <HAL_TIM_PeriodElapsedCallback+0x12ac>)
 800bfe8:	881b      	ldrh	r3, [r3, #0]
 800bfea:	b21b      	sxth	r3, r3
 800bfec:	e003      	b.n	800bff6 <HAL_TIM_PeriodElapsedCallback+0x1146>
 800bfee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800bff2:	e000      	b.n	800bff6 <HAL_TIM_PeriodElapsedCallback+0x1146>
 800bff4:	4b52      	ldr	r3, [pc, #328]	; (800c140 <HAL_TIM_PeriodElapsedCallback+0x1290>)
 800bff6:	4a59      	ldr	r2, [pc, #356]	; (800c15c <HAL_TIM_PeriodElapsedCallback+0x12ac>)
 800bff8:	8013      	strh	r3, [r2, #0]
					dgl = -1*dg;
 800bffa:	4b58      	ldr	r3, [pc, #352]	; (800c15c <HAL_TIM_PeriodElapsedCallback+0x12ac>)
 800bffc:	881b      	ldrh	r3, [r3, #0]
 800bffe:	b21b      	sxth	r3, r3
 800c000:	b29b      	uxth	r3, r3
 800c002:	425b      	negs	r3, r3
 800c004:	b29b      	uxth	r3, r3
 800c006:	b21a      	sxth	r2, r3
 800c008:	4b56      	ldr	r3, [pc, #344]	; (800c164 <HAL_TIM_PeriodElapsedCallback+0x12b4>)
 800c00a:	801a      	strh	r2, [r3, #0]
					dgr = dg;
 800c00c:	4b53      	ldr	r3, [pc, #332]	; (800c15c <HAL_TIM_PeriodElapsedCallback+0x12ac>)
 800c00e:	881b      	ldrh	r3, [r3, #0]
 800c010:	b21a      	sxth	r2, r3
 800c012:	4b55      	ldr	r3, [pc, #340]	; (800c168 <HAL_TIM_PeriodElapsedCallback+0x12b8>)
 800c014:	801a      	strh	r2, [r3, #0]
				}else{
					//a制御フラグがなければ壁制御値0
					dgl = dgr = 0;
				}
				break;
 800c016:	e006      	b.n	800c026 <HAL_TIM_PeriodElapsedCallback+0x1176>
					dgl = dgr = 0;
 800c018:	2100      	movs	r1, #0
 800c01a:	4b53      	ldr	r3, [pc, #332]	; (800c168 <HAL_TIM_PeriodElapsedCallback+0x12b8>)
 800c01c:	460a      	mov	r2, r1
 800c01e:	801a      	strh	r2, [r3, #0]
 800c020:	4b50      	ldr	r3, [pc, #320]	; (800c164 <HAL_TIM_PeriodElapsedCallback+0x12b4>)
 800c022:	460a      	mov	r2, r1
 800c024:	801a      	strh	r2, [r3, #0]
				break;
 800c026:	bf00      	nop
		}


		if(MF.FLAG.DRV){
 800c028:	4b48      	ldr	r3, [pc, #288]	; (800c14c <HAL_TIM_PeriodElapsedCallback+0x129c>)
 800c02a:	881b      	ldrh	r3, [r3, #0]
 800c02c:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800c030:	b2db      	uxtb	r3, r3
 800c032:	2b00      	cmp	r3, #0
 800c034:	f000 8191 	beq.w	800c35a <HAL_TIM_PeriodElapsedCallback+0x14aa>
			if(!MF2.FLAG.WG){
 800c038:	4b40      	ldr	r3, [pc, #256]	; (800c13c <HAL_TIM_PeriodElapsedCallback+0x128c>)
 800c03a:	881b      	ldrh	r3, [r3, #0]
 800c03c:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800c040:	b2db      	uxtb	r3, r3
 800c042:	2b00      	cmp	r3, #0
 800c044:	d11e      	bne.n	800c084 <HAL_TIM_PeriodElapsedCallback+0x11d4>
//				pulse_l = pulse_l + dgl + dwl;
//				pulse_r = pulse_r + dgr + dwr;
				pulse_l = pulse_l + dgl;
 800c046:	4b47      	ldr	r3, [pc, #284]	; (800c164 <HAL_TIM_PeriodElapsedCallback+0x12b4>)
 800c048:	881b      	ldrh	r3, [r3, #0]
 800c04a:	b21b      	sxth	r3, r3
 800c04c:	ee07 3a90 	vmov	s15, r3
 800c050:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800c054:	4b45      	ldr	r3, [pc, #276]	; (800c16c <HAL_TIM_PeriodElapsedCallback+0x12bc>)
 800c056:	edd3 7a00 	vldr	s15, [r3]
 800c05a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c05e:	4b43      	ldr	r3, [pc, #268]	; (800c16c <HAL_TIM_PeriodElapsedCallback+0x12bc>)
 800c060:	edc3 7a00 	vstr	s15, [r3]
				pulse_r = pulse_r + dgr;
 800c064:	4b40      	ldr	r3, [pc, #256]	; (800c168 <HAL_TIM_PeriodElapsedCallback+0x12b8>)
 800c066:	881b      	ldrh	r3, [r3, #0]
 800c068:	b21b      	sxth	r3, r3
 800c06a:	ee07 3a90 	vmov	s15, r3
 800c06e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800c072:	4b3f      	ldr	r3, [pc, #252]	; (800c170 <HAL_TIM_PeriodElapsedCallback+0x12c0>)
 800c074:	edd3 7a00 	vldr	s15, [r3]
 800c078:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c07c:	4b3c      	ldr	r3, [pc, #240]	; (800c170 <HAL_TIM_PeriodElapsedCallback+0x12c0>)
 800c07e:	edc3 7a00 	vstr	s15, [r3]
 800c082:	e01d      	b.n	800c0c0 <HAL_TIM_PeriodElapsedCallback+0x1210>
			}else{
				pulse_l = pulse_l + dwl;
 800c084:	4b2f      	ldr	r3, [pc, #188]	; (800c144 <HAL_TIM_PeriodElapsedCallback+0x1294>)
 800c086:	881b      	ldrh	r3, [r3, #0]
 800c088:	b21b      	sxth	r3, r3
 800c08a:	ee07 3a90 	vmov	s15, r3
 800c08e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800c092:	4b36      	ldr	r3, [pc, #216]	; (800c16c <HAL_TIM_PeriodElapsedCallback+0x12bc>)
 800c094:	edd3 7a00 	vldr	s15, [r3]
 800c098:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c09c:	4b33      	ldr	r3, [pc, #204]	; (800c16c <HAL_TIM_PeriodElapsedCallback+0x12bc>)
 800c09e:	edc3 7a00 	vstr	s15, [r3]
				pulse_r = pulse_r + dwr;
 800c0a2:	4b29      	ldr	r3, [pc, #164]	; (800c148 <HAL_TIM_PeriodElapsedCallback+0x1298>)
 800c0a4:	881b      	ldrh	r3, [r3, #0]
 800c0a6:	b21b      	sxth	r3, r3
 800c0a8:	ee07 3a90 	vmov	s15, r3
 800c0ac:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800c0b0:	4b2f      	ldr	r3, [pc, #188]	; (800c170 <HAL_TIM_PeriodElapsedCallback+0x12c0>)
 800c0b2:	edd3 7a00 	vldr	s15, [r3]
 800c0b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c0ba:	4b2d      	ldr	r3, [pc, #180]	; (800c170 <HAL_TIM_PeriodElapsedCallback+0x12c0>)
 800c0bc:	edc3 7a00 	vstr	s15, [r3]
			}
			pulse_l = min(max(pulse_l, -1000), 1000);
 800c0c0:	4b2a      	ldr	r3, [pc, #168]	; (800c16c <HAL_TIM_PeriodElapsedCallback+0x12bc>)
 800c0c2:	edd3 7a00 	vldr	s15, [r3]
 800c0c6:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 800c174 <HAL_TIM_PeriodElapsedCallback+0x12c4>
 800c0ca:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c0ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c0d2:	bfcc      	ite	gt
 800c0d4:	2301      	movgt	r3, #1
 800c0d6:	2300      	movle	r3, #0
 800c0d8:	b2db      	uxtb	r3, r3
 800c0da:	f083 0301 	eor.w	r3, r3, #1
 800c0de:	b2db      	uxtb	r3, r3
 800c0e0:	2b00      	cmp	r3, #0
 800c0e2:	d111      	bne.n	800c108 <HAL_TIM_PeriodElapsedCallback+0x1258>
 800c0e4:	4b21      	ldr	r3, [pc, #132]	; (800c16c <HAL_TIM_PeriodElapsedCallback+0x12bc>)
 800c0e6:	edd3 7a00 	vldr	s15, [r3]
 800c0ea:	ed9f 7a23 	vldr	s14, [pc, #140]	; 800c178 <HAL_TIM_PeriodElapsedCallback+0x12c8>
 800c0ee:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c0f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c0f6:	bfcc      	ite	gt
 800c0f8:	2301      	movgt	r3, #1
 800c0fa:	2300      	movle	r3, #0
 800c0fc:	b2db      	uxtb	r3, r3
 800c0fe:	f083 0301 	eor.w	r3, r3, #1
 800c102:	b2db      	uxtb	r3, r3
 800c104:	2b00      	cmp	r3, #0
 800c106:	d03b      	beq.n	800c180 <HAL_TIM_PeriodElapsedCallback+0x12d0>
 800c108:	4b18      	ldr	r3, [pc, #96]	; (800c16c <HAL_TIM_PeriodElapsedCallback+0x12bc>)
 800c10a:	edd3 7a00 	vldr	s15, [r3]
 800c10e:	ed9f 7a19 	vldr	s14, [pc, #100]	; 800c174 <HAL_TIM_PeriodElapsedCallback+0x12c4>
 800c112:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c116:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c11a:	dd02      	ble.n	800c122 <HAL_TIM_PeriodElapsedCallback+0x1272>
 800c11c:	4b13      	ldr	r3, [pc, #76]	; (800c16c <HAL_TIM_PeriodElapsedCallback+0x12bc>)
 800c11e:	681b      	ldr	r3, [r3, #0]
 800c120:	e02f      	b.n	800c182 <HAL_TIM_PeriodElapsedCallback+0x12d2>
 800c122:	4b16      	ldr	r3, [pc, #88]	; (800c17c <HAL_TIM_PeriodElapsedCallback+0x12cc>)
 800c124:	e02d      	b.n	800c182 <HAL_TIM_PeriodElapsedCallback+0x12d2>
 800c126:	bf00      	nop
 800c128:	33333334 	.word	0x33333334
 800c12c:	bfc33333 	.word	0xbfc33333
 800c130:	33333334 	.word	0x33333334
 800c134:	3fc33333 	.word	0x3fc33333
 800c138:	20000bb2 	.word	0x20000bb2
 800c13c:	20000f64 	.word	0x20000f64
 800c140:	fffffc18 	.word	0xfffffc18
 800c144:	20000af8 	.word	0x20000af8
 800c148:	20000f74 	.word	0x20000f74
 800c14c:	20000f68 	.word	0x20000f68
 800c150:	20000bf8 	.word	0x20000bf8
 800c154:	20000b5c 	.word	0x20000b5c
 800c158:	43200000 	.word	0x43200000
 800c15c:	20000c10 	.word	0x20000c10
 800c160:	42200000 	.word	0x42200000
 800c164:	2000019c 	.word	0x2000019c
 800c168:	20000b4e 	.word	0x20000b4e
 800c16c:	20000ba8 	.word	0x20000ba8
 800c170:	20000780 	.word	0x20000780
 800c174:	c47a0000 	.word	0xc47a0000
 800c178:	447a0000 	.word	0x447a0000
 800c17c:	c47a0000 	.word	0xc47a0000
 800c180:	4bb6      	ldr	r3, [pc, #728]	; (800c45c <HAL_TIM_PeriodElapsedCallback+0x15ac>)
 800c182:	4ab7      	ldr	r2, [pc, #732]	; (800c460 <HAL_TIM_PeriodElapsedCallback+0x15b0>)
 800c184:	6013      	str	r3, [r2, #0]
			pulse_r = min(max(pulse_r, -1000), 1000);
 800c186:	4bb7      	ldr	r3, [pc, #732]	; (800c464 <HAL_TIM_PeriodElapsedCallback+0x15b4>)
 800c188:	edd3 7a00 	vldr	s15, [r3]
 800c18c:	ed9f 7ab6 	vldr	s14, [pc, #728]	; 800c468 <HAL_TIM_PeriodElapsedCallback+0x15b8>
 800c190:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c194:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c198:	bfcc      	ite	gt
 800c19a:	2301      	movgt	r3, #1
 800c19c:	2300      	movle	r3, #0
 800c19e:	b2db      	uxtb	r3, r3
 800c1a0:	f083 0301 	eor.w	r3, r3, #1
 800c1a4:	b2db      	uxtb	r3, r3
 800c1a6:	2b00      	cmp	r3, #0
 800c1a8:	d111      	bne.n	800c1ce <HAL_TIM_PeriodElapsedCallback+0x131e>
 800c1aa:	4bae      	ldr	r3, [pc, #696]	; (800c464 <HAL_TIM_PeriodElapsedCallback+0x15b4>)
 800c1ac:	edd3 7a00 	vldr	s15, [r3]
 800c1b0:	ed9f 7aae 	vldr	s14, [pc, #696]	; 800c46c <HAL_TIM_PeriodElapsedCallback+0x15bc>
 800c1b4:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c1b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c1bc:	bfcc      	ite	gt
 800c1be:	2301      	movgt	r3, #1
 800c1c0:	2300      	movle	r3, #0
 800c1c2:	b2db      	uxtb	r3, r3
 800c1c4:	f083 0301 	eor.w	r3, r3, #1
 800c1c8:	b2db      	uxtb	r3, r3
 800c1ca:	2b00      	cmp	r3, #0
 800c1cc:	d00e      	beq.n	800c1ec <HAL_TIM_PeriodElapsedCallback+0x133c>
 800c1ce:	4ba5      	ldr	r3, [pc, #660]	; (800c464 <HAL_TIM_PeriodElapsedCallback+0x15b4>)
 800c1d0:	edd3 7a00 	vldr	s15, [r3]
 800c1d4:	ed9f 7aa4 	vldr	s14, [pc, #656]	; 800c468 <HAL_TIM_PeriodElapsedCallback+0x15b8>
 800c1d8:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c1dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c1e0:	dd02      	ble.n	800c1e8 <HAL_TIM_PeriodElapsedCallback+0x1338>
 800c1e2:	4ba0      	ldr	r3, [pc, #640]	; (800c464 <HAL_TIM_PeriodElapsedCallback+0x15b4>)
 800c1e4:	681b      	ldr	r3, [r3, #0]
 800c1e6:	e002      	b.n	800c1ee <HAL_TIM_PeriodElapsedCallback+0x133e>
 800c1e8:	4ba1      	ldr	r3, [pc, #644]	; (800c470 <HAL_TIM_PeriodElapsedCallback+0x15c0>)
 800c1ea:	e000      	b.n	800c1ee <HAL_TIM_PeriodElapsedCallback+0x133e>
 800c1ec:	4b9b      	ldr	r3, [pc, #620]	; (800c45c <HAL_TIM_PeriodElapsedCallback+0x15ac>)
 800c1ee:	4a9d      	ldr	r2, [pc, #628]	; (800c464 <HAL_TIM_PeriodElapsedCallback+0x15b4>)
 800c1f0:	6013      	str	r3, [r2, #0]

			if(pulse_l > 0){
 800c1f2:	4b9b      	ldr	r3, [pc, #620]	; (800c460 <HAL_TIM_PeriodElapsedCallback+0x15b0>)
 800c1f4:	edd3 7a00 	vldr	s15, [r3]
 800c1f8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800c1fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c200:	dd17      	ble.n	800c232 <HAL_TIM_PeriodElapsedCallback+0x1382>
				drive_dir(0, 0);
 800c202:	2100      	movs	r1, #0
 800c204:	2000      	movs	r0, #0
 800c206:	f7f8 fde7 	bl	8004dd8 <drive_dir>
				ConfigOC.Pulse = pulse_l;
 800c20a:	4b95      	ldr	r3, [pc, #596]	; (800c460 <HAL_TIM_PeriodElapsedCallback+0x15b0>)
 800c20c:	edd3 7a00 	vldr	s15, [r3]
 800c210:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c214:	ee17 3a90 	vmov	r3, s15
 800c218:	60fb      	str	r3, [r7, #12]
				HAL_TIM_PWM_ConfigChannel(&htim2, &ConfigOC, TIM_CHANNEL_1);
 800c21a:	f107 0308 	add.w	r3, r7, #8
 800c21e:	2200      	movs	r2, #0
 800c220:	4619      	mov	r1, r3
 800c222:	4894      	ldr	r0, [pc, #592]	; (800c474 <HAL_TIM_PeriodElapsedCallback+0x15c4>)
 800c224:	f7f7 fcd2 	bl	8003bcc <HAL_TIM_PWM_ConfigChannel>
				HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_1);
 800c228:	2100      	movs	r1, #0
 800c22a:	4892      	ldr	r0, [pc, #584]	; (800c474 <HAL_TIM_PeriodElapsedCallback+0x15c4>)
 800c22c:	f7f7 fa66 	bl	80036fc <HAL_TIM_PWM_Start>
 800c230:	e020      	b.n	800c274 <HAL_TIM_PeriodElapsedCallback+0x13c4>
			}
			else if(pulse_l < 0){
 800c232:	4b8b      	ldr	r3, [pc, #556]	; (800c460 <HAL_TIM_PeriodElapsedCallback+0x15b0>)
 800c234:	edd3 7a00 	vldr	s15, [r3]
 800c238:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800c23c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c240:	d518      	bpl.n	800c274 <HAL_TIM_PeriodElapsedCallback+0x13c4>
				drive_dir(0, 1);
 800c242:	2101      	movs	r1, #1
 800c244:	2000      	movs	r0, #0
 800c246:	f7f8 fdc7 	bl	8004dd8 <drive_dir>
				ConfigOC.Pulse = -pulse_l;
 800c24a:	4b85      	ldr	r3, [pc, #532]	; (800c460 <HAL_TIM_PeriodElapsedCallback+0x15b0>)
 800c24c:	edd3 7a00 	vldr	s15, [r3]
 800c250:	eef1 7a67 	vneg.f32	s15, s15
 800c254:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c258:	ee17 3a90 	vmov	r3, s15
 800c25c:	60fb      	str	r3, [r7, #12]
				HAL_TIM_PWM_ConfigChannel(&htim2, &ConfigOC, TIM_CHANNEL_1);
 800c25e:	f107 0308 	add.w	r3, r7, #8
 800c262:	2200      	movs	r2, #0
 800c264:	4619      	mov	r1, r3
 800c266:	4883      	ldr	r0, [pc, #524]	; (800c474 <HAL_TIM_PeriodElapsedCallback+0x15c4>)
 800c268:	f7f7 fcb0 	bl	8003bcc <HAL_TIM_PWM_ConfigChannel>
				HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_1);
 800c26c:	2100      	movs	r1, #0
 800c26e:	4881      	ldr	r0, [pc, #516]	; (800c474 <HAL_TIM_PeriodElapsedCallback+0x15c4>)
 800c270:	f7f7 fa44 	bl	80036fc <HAL_TIM_PWM_Start>
			}

			if(pulse_r > 0){
 800c274:	4b7b      	ldr	r3, [pc, #492]	; (800c464 <HAL_TIM_PeriodElapsedCallback+0x15b4>)
 800c276:	edd3 7a00 	vldr	s15, [r3]
 800c27a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800c27e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c282:	dd17      	ble.n	800c2b4 <HAL_TIM_PeriodElapsedCallback+0x1404>
				drive_dir(1, 0);
 800c284:	2100      	movs	r1, #0
 800c286:	2001      	movs	r0, #1
 800c288:	f7f8 fda6 	bl	8004dd8 <drive_dir>
				ConfigOC.Pulse = pulse_r;
 800c28c:	4b75      	ldr	r3, [pc, #468]	; (800c464 <HAL_TIM_PeriodElapsedCallback+0x15b4>)
 800c28e:	edd3 7a00 	vldr	s15, [r3]
 800c292:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c296:	ee17 3a90 	vmov	r3, s15
 800c29a:	60fb      	str	r3, [r7, #12]
				HAL_TIM_PWM_ConfigChannel(&htim2, &ConfigOC, TIM_CHANNEL_4);
 800c29c:	f107 0308 	add.w	r3, r7, #8
 800c2a0:	220c      	movs	r2, #12
 800c2a2:	4619      	mov	r1, r3
 800c2a4:	4873      	ldr	r0, [pc, #460]	; (800c474 <HAL_TIM_PeriodElapsedCallback+0x15c4>)
 800c2a6:	f7f7 fc91 	bl	8003bcc <HAL_TIM_PWM_ConfigChannel>
				HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_4);
 800c2aa:	210c      	movs	r1, #12
 800c2ac:	4871      	ldr	r0, [pc, #452]	; (800c474 <HAL_TIM_PeriodElapsedCallback+0x15c4>)
 800c2ae:	f7f7 fa25 	bl	80036fc <HAL_TIM_PWM_Start>
 800c2b2:	e020      	b.n	800c2f6 <HAL_TIM_PeriodElapsedCallback+0x1446>
			}
			else if(pulse_r < 0){
 800c2b4:	4b6b      	ldr	r3, [pc, #428]	; (800c464 <HAL_TIM_PeriodElapsedCallback+0x15b4>)
 800c2b6:	edd3 7a00 	vldr	s15, [r3]
 800c2ba:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800c2be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c2c2:	d518      	bpl.n	800c2f6 <HAL_TIM_PeriodElapsedCallback+0x1446>
				drive_dir(1, 1);
 800c2c4:	2101      	movs	r1, #1
 800c2c6:	2001      	movs	r0, #1
 800c2c8:	f7f8 fd86 	bl	8004dd8 <drive_dir>
				ConfigOC.Pulse = -pulse_r;
 800c2cc:	4b65      	ldr	r3, [pc, #404]	; (800c464 <HAL_TIM_PeriodElapsedCallback+0x15b4>)
 800c2ce:	edd3 7a00 	vldr	s15, [r3]
 800c2d2:	eef1 7a67 	vneg.f32	s15, s15
 800c2d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c2da:	ee17 3a90 	vmov	r3, s15
 800c2de:	60fb      	str	r3, [r7, #12]
				HAL_TIM_PWM_ConfigChannel(&htim2, &ConfigOC, TIM_CHANNEL_4);
 800c2e0:	f107 0308 	add.w	r3, r7, #8
 800c2e4:	220c      	movs	r2, #12
 800c2e6:	4619      	mov	r1, r3
 800c2e8:	4862      	ldr	r0, [pc, #392]	; (800c474 <HAL_TIM_PeriodElapsedCallback+0x15c4>)
 800c2ea:	f7f7 fc6f 	bl	8003bcc <HAL_TIM_PWM_ConfigChannel>
				HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_4);
 800c2ee:	210c      	movs	r1, #12
 800c2f0:	4860      	ldr	r0, [pc, #384]	; (800c474 <HAL_TIM_PeriodElapsedCallback+0x15c4>)
 800c2f2:	f7f7 fa03 	bl	80036fc <HAL_TIM_PWM_Start>
			}
			//wall check
//			if(!MF.FLAG.SCND){
				//----look forward----
				if(ad_fr > WALL_BASE_FR || ad_fl > WALL_BASE_FL){
 800c2f6:	4b60      	ldr	r3, [pc, #384]	; (800c478 <HAL_TIM_PeriodElapsedCallback+0x15c8>)
 800c2f8:	681b      	ldr	r3, [r3, #0]
 800c2fa:	2b6e      	cmp	r3, #110	; 0x6e
 800c2fc:	d803      	bhi.n	800c306 <HAL_TIM_PeriodElapsedCallback+0x1456>
 800c2fe:	4b5f      	ldr	r3, [pc, #380]	; (800c47c <HAL_TIM_PeriodElapsedCallback+0x15cc>)
 800c300:	681b      	ldr	r3, [r3, #0]
 800c302:	2bc8      	cmp	r3, #200	; 0xc8
 800c304:	d905      	bls.n	800c312 <HAL_TIM_PeriodElapsedCallback+0x1462>
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 800c306:	2201      	movs	r2, #1
 800c308:	2140      	movs	r1, #64	; 0x40
 800c30a:	485d      	ldr	r0, [pc, #372]	; (800c480 <HAL_TIM_PeriodElapsedCallback+0x15d0>)
 800c30c:	f7f5 fffa 	bl	8002304 <HAL_GPIO_WritePin>
 800c310:	e004      	b.n	800c31c <HAL_TIM_PeriodElapsedCallback+0x146c>
				}else{
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 800c312:	2200      	movs	r2, #0
 800c314:	2140      	movs	r1, #64	; 0x40
 800c316:	485a      	ldr	r0, [pc, #360]	; (800c480 <HAL_TIM_PeriodElapsedCallback+0x15d0>)
 800c318:	f7f5 fff4 	bl	8002304 <HAL_GPIO_WritePin>
				}
				//----look forwardL----
				if(ad_fl > WALL_BASE_FL){
 800c31c:	4b57      	ldr	r3, [pc, #348]	; (800c47c <HAL_TIM_PeriodElapsedCallback+0x15cc>)
 800c31e:	681b      	ldr	r3, [r3, #0]
 800c320:	2bc8      	cmp	r3, #200	; 0xc8
 800c322:	d905      	bls.n	800c330 <HAL_TIM_PeriodElapsedCallback+0x1480>
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 800c324:	2201      	movs	r2, #1
 800c326:	2110      	movs	r1, #16
 800c328:	4855      	ldr	r0, [pc, #340]	; (800c480 <HAL_TIM_PeriodElapsedCallback+0x15d0>)
 800c32a:	f7f5 ffeb 	bl	8002304 <HAL_GPIO_WritePin>
 800c32e:	e004      	b.n	800c33a <HAL_TIM_PeriodElapsedCallback+0x148a>
				}else{
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 800c330:	2200      	movs	r2, #0
 800c332:	2110      	movs	r1, #16
 800c334:	4852      	ldr	r0, [pc, #328]	; (800c480 <HAL_TIM_PeriodElapsedCallback+0x15d0>)
 800c336:	f7f5 ffe5 	bl	8002304 <HAL_GPIO_WritePin>
				}
				//----look forward-R---
				if(ad_fr > WALL_BASE_FR){
 800c33a:	4b4f      	ldr	r3, [pc, #316]	; (800c478 <HAL_TIM_PeriodElapsedCallback+0x15c8>)
 800c33c:	681b      	ldr	r3, [r3, #0]
 800c33e:	2b6e      	cmp	r3, #110	; 0x6e
 800c340:	d905      	bls.n	800c34e <HAL_TIM_PeriodElapsedCallback+0x149e>
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);
 800c342:	2201      	movs	r2, #1
 800c344:	2180      	movs	r1, #128	; 0x80
 800c346:	484e      	ldr	r0, [pc, #312]	; (800c480 <HAL_TIM_PeriodElapsedCallback+0x15d0>)
 800c348:	f7f5 ffdc 	bl	8002304 <HAL_GPIO_WritePin>
 800c34c:	e00d      	b.n	800c36a <HAL_TIM_PeriodElapsedCallback+0x14ba>
				}else{
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 800c34e:	2200      	movs	r2, #0
 800c350:	2180      	movs	r1, #128	; 0x80
 800c352:	484b      	ldr	r0, [pc, #300]	; (800c480 <HAL_TIM_PeriodElapsedCallback+0x15d0>)
 800c354:	f7f5 ffd6 	bl	8002304 <HAL_GPIO_WritePin>
 800c358:	e007      	b.n	800c36a <HAL_TIM_PeriodElapsedCallback+0x14ba>
				}
		}else{
			drive_dir(0, 2);
 800c35a:	2102      	movs	r1, #2
 800c35c:	2000      	movs	r0, #0
 800c35e:	f7f8 fd3b 	bl	8004dd8 <drive_dir>
			drive_dir(1, 2);
 800c362:	2102      	movs	r1, #2
 800c364:	2001      	movs	r0, #1
 800c366:	f7f8 fd37 	bl	8004dd8 <drive_dir>
		}


		//wall check
		//----look right----
		if(ad_r > WALL_BASE_R){
 800c36a:	4b46      	ldr	r3, [pc, #280]	; (800c484 <HAL_TIM_PeriodElapsedCallback+0x15d4>)
 800c36c:	681b      	ldr	r3, [r3, #0]
 800c36e:	2b78      	cmp	r3, #120	; 0x78
 800c370:	d906      	bls.n	800c380 <HAL_TIM_PeriodElapsedCallback+0x14d0>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 800c372:	2201      	movs	r2, #1
 800c374:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800c378:	4843      	ldr	r0, [pc, #268]	; (800c488 <HAL_TIM_PeriodElapsedCallback+0x15d8>)
 800c37a:	f7f5 ffc3 	bl	8002304 <HAL_GPIO_WritePin>
 800c37e:	e005      	b.n	800c38c <HAL_TIM_PeriodElapsedCallback+0x14dc>
		}else{
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 800c380:	2200      	movs	r2, #0
 800c382:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800c386:	4840      	ldr	r0, [pc, #256]	; (800c488 <HAL_TIM_PeriodElapsedCallback+0x15d8>)
 800c388:	f7f5 ffbc 	bl	8002304 <HAL_GPIO_WritePin>
		}
		//----look left----
		if(ad_l > WALL_BASE_L){
 800c38c:	4b3f      	ldr	r3, [pc, #252]	; (800c48c <HAL_TIM_PeriodElapsedCallback+0x15dc>)
 800c38e:	681b      	ldr	r3, [r3, #0]
 800c390:	2b96      	cmp	r3, #150	; 0x96
 800c392:	d905      	bls.n	800c3a0 <HAL_TIM_PeriodElapsedCallback+0x14f0>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);
 800c394:	2201      	movs	r2, #1
 800c396:	2104      	movs	r1, #4
 800c398:	483d      	ldr	r0, [pc, #244]	; (800c490 <HAL_TIM_PeriodElapsedCallback+0x15e0>)
 800c39a:	f7f5 ffb3 	bl	8002304 <HAL_GPIO_WritePin>
 800c39e:	e004      	b.n	800c3aa <HAL_TIM_PeriodElapsedCallback+0x14fa>
		}else{
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 800c3a0:	2200      	movs	r2, #0
 800c3a2:	2104      	movs	r1, #4
 800c3a4:	483a      	ldr	r0, [pc, #232]	; (800c490 <HAL_TIM_PeriodElapsedCallback+0x15e0>)
 800c3a6:	f7f5 ffad 	bl	8002304 <HAL_GPIO_WritePin>
		}


		//battery check
		if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12) == GPIO_PIN_RESET) {	//2.1V以下で赤ランプ点灯=>LiPoが約7Vを下回るとランプ点灯
 800c3aa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800c3ae:	4836      	ldr	r0, [pc, #216]	; (800c488 <HAL_TIM_PeriodElapsedCallback+0x15d8>)
 800c3b0:	f7f5 ff90 	bl	80022d4 <HAL_GPIO_ReadPin>
 800c3b4:	4603      	mov	r3, r0
 800c3b6:	2b00      	cmp	r3, #0
 800c3b8:	d105      	bne.n	800c3c6 <HAL_TIM_PeriodElapsedCallback+0x1516>
		   HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_SET);
 800c3ba:	2201      	movs	r2, #1
 800c3bc:	2108      	movs	r1, #8
 800c3be:	4834      	ldr	r0, [pc, #208]	; (800c490 <HAL_TIM_PeriodElapsedCallback+0x15e0>)
 800c3c0:	f7f5 ffa0 	bl	8002304 <HAL_GPIO_WritePin>
 800c3c4:	e004      	b.n	800c3d0 <HAL_TIM_PeriodElapsedCallback+0x1520>
		} else {
		   HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
 800c3c6:	2200      	movs	r2, #0
 800c3c8:	2108      	movs	r1, #8
 800c3ca:	4831      	ldr	r0, [pc, #196]	; (800c490 <HAL_TIM_PeriodElapsedCallback+0x15e0>)
 800c3cc:	f7f5 ff9a 	bl	8002304 <HAL_GPIO_WritePin>
		}


		//fail safe
		if(degree_z >= target_degree_z+270 || degree_z <= target_degree_z-270 || dist_r > 500 || dist_l > 500){	//270度以上回転発生でFail Safe
 800c3d0:	4b30      	ldr	r3, [pc, #192]	; (800c494 <HAL_TIM_PeriodElapsedCallback+0x15e4>)
 800c3d2:	edd3 7a00 	vldr	s15, [r3]
 800c3d6:	ed9f 7a30 	vldr	s14, [pc, #192]	; 800c498 <HAL_TIM_PeriodElapsedCallback+0x15e8>
 800c3da:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c3de:	4b2f      	ldr	r3, [pc, #188]	; (800c49c <HAL_TIM_PeriodElapsedCallback+0x15ec>)
 800c3e0:	edd3 7a00 	vldr	s15, [r3]
 800c3e4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800c3e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c3ec:	d923      	bls.n	800c436 <HAL_TIM_PeriodElapsedCallback+0x1586>
 800c3ee:	4b29      	ldr	r3, [pc, #164]	; (800c494 <HAL_TIM_PeriodElapsedCallback+0x15e4>)
 800c3f0:	edd3 7a00 	vldr	s15, [r3]
 800c3f4:	ed9f 7a28 	vldr	s14, [pc, #160]	; 800c498 <HAL_TIM_PeriodElapsedCallback+0x15e8>
 800c3f8:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800c3fc:	4b27      	ldr	r3, [pc, #156]	; (800c49c <HAL_TIM_PeriodElapsedCallback+0x15ec>)
 800c3fe:	edd3 7a00 	vldr	s15, [r3]
 800c402:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800c406:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c40a:	da14      	bge.n	800c436 <HAL_TIM_PeriodElapsedCallback+0x1586>
 800c40c:	4b24      	ldr	r3, [pc, #144]	; (800c4a0 <HAL_TIM_PeriodElapsedCallback+0x15f0>)
 800c40e:	edd3 7a00 	vldr	s15, [r3]
 800c412:	ed9f 7a24 	vldr	s14, [pc, #144]	; 800c4a4 <HAL_TIM_PeriodElapsedCallback+0x15f4>
 800c416:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c41a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c41e:	dc0a      	bgt.n	800c436 <HAL_TIM_PeriodElapsedCallback+0x1586>
 800c420:	4b21      	ldr	r3, [pc, #132]	; (800c4a8 <HAL_TIM_PeriodElapsedCallback+0x15f8>)
 800c422:	edd3 7a00 	vldr	s15, [r3]
 800c426:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 800c4a4 <HAL_TIM_PeriodElapsedCallback+0x15f4>
 800c42a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c42e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c432:	dc00      	bgt.n	800c436 <HAL_TIM_PeriodElapsedCallback+0x1586>
			   drive_dir(1, 2);
			   full_led_write(RED);
		   }
		}
	}
}
 800c434:	e00b      	b.n	800c44e <HAL_TIM_PeriodElapsedCallback+0x159e>
			   drive_dir(0, 2);
 800c436:	2102      	movs	r1, #2
 800c438:	2000      	movs	r0, #0
 800c43a:	f7f8 fccd 	bl	8004dd8 <drive_dir>
			   drive_dir(1, 2);
 800c43e:	2102      	movs	r1, #2
 800c440:	2001      	movs	r0, #1
 800c442:	f7f8 fcc9 	bl	8004dd8 <drive_dir>
			   full_led_write(RED);
 800c446:	2001      	movs	r0, #1
 800c448:	f003 fd0c 	bl	800fe64 <full_led_write>
			   drive_dir(0, 2);
 800c44c:	e7f3      	b.n	800c436 <HAL_TIM_PeriodElapsedCallback+0x1586>
}
 800c44e:	bf00      	nop
 800c450:	3730      	adds	r7, #48	; 0x30
 800c452:	46bd      	mov	sp, r7
 800c454:	ecbd 8b02 	vpop	{d8}
 800c458:	bdb0      	pop	{r4, r5, r7, pc}
 800c45a:	bf00      	nop
 800c45c:	447a0000 	.word	0x447a0000
 800c460:	20000ba8 	.word	0x20000ba8
 800c464:	20000780 	.word	0x20000780
 800c468:	c47a0000 	.word	0xc47a0000
 800c46c:	447a0000 	.word	0x447a0000
 800c470:	c47a0000 	.word	0xc47a0000
 800c474:	20000c14 	.word	0x20000c14
 800c478:	20000c00 	.word	0x20000c00
 800c47c:	20000d54 	.word	0x20000d54
 800c480:	40020000 	.word	0x40020000
 800c484:	20000f60 	.word	0x20000f60
 800c488:	40020400 	.word	0x40020400
 800c48c:	20000afc 	.word	0x20000afc
 800c490:	40020800 	.word	0x40020800
 800c494:	20000bf8 	.word	0x20000bf8
 800c498:	43870000 	.word	0x43870000
 800c49c:	20000b5c 	.word	0x20000b5c
 800c4a0:	20000aec 	.word	0x20000aec
 800c4a4:	43fa0000 	.word	0x43fa0000
 800c4a8:	200015c4 	.word	0x200015c4

0800c4ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800c4ac:	b580      	push	{r7, lr}
 800c4ae:	b082      	sub	sp, #8
 800c4b0:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800c4b2:	f7f4 fd41 	bl	8000f38 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800c4b6:	f000 f917 	bl	800c6e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800c4ba:	f000 fc09 	bl	800ccd0 <MX_GPIO_Init>
  MX_ADC1_Init();
 800c4be:	f000 f97d 	bl	800c7bc <MX_ADC1_Init>
  MX_TIM2_Init();
 800c4c2:	f000 fa03 	bl	800c8cc <MX_TIM2_Init>
  MX_TIM3_Init();
 800c4c6:	f000 fa81 	bl	800c9cc <MX_TIM3_Init>
  MX_TIM4_Init();
 800c4ca:	f000 faf5 	bl	800cab8 <MX_TIM4_Init>
  MX_TIM6_Init();
 800c4ce:	f000 fb47 	bl	800cb60 <MX_TIM6_Init>
  MX_TIM8_Init();
 800c4d2:	f000 fb7b 	bl	800cbcc <MX_TIM8_Init>
  MX_SPI3_Init();
 800c4d6:	f000 f9c3 	bl	800c860 <MX_SPI3_Init>
  MX_USART1_UART_Init();
 800c4da:	f000 fbcf 	bl	800cc7c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  drive_init();
 800c4de:	f7f8 fbbd 	bl	8004c5c <drive_init>
  gyro_init();
 800c4e2:	f7fe fb07 	bl	800aaf4 <gyro_init>
  search_init();
 800c4e6:	f000 fd21 	bl	800cf2c <search_init>
  sensor_init();
 800c4ea:	f003 fbfb 	bl	800fce4 <sensor_init>

  printf("*** Welcome to WMMC ! ***\n");
 800c4ee:	4870      	ldr	r0, [pc, #448]	; (800c6b0 <main+0x204>)
 800c4f0:	f004 fac0 	bl	8010a74 <puts>

  setbuf(stdout, NULL);
 800c4f4:	4b6f      	ldr	r3, [pc, #444]	; (800c6b4 <main+0x208>)
 800c4f6:	681b      	ldr	r3, [r3, #0]
 800c4f8:	689b      	ldr	r3, [r3, #8]
 800c4fa:	2100      	movs	r1, #0
 800c4fc:	4618      	mov	r0, r3
 800c4fe:	f004 fac1 	bl	8010a84 <setbuf>
  HAL_TIM_Encoder_Start(&htim4,TIM_CHANNEL_ALL);
 800c502:	213c      	movs	r1, #60	; 0x3c
 800c504:	486c      	ldr	r0, [pc, #432]	; (800c6b8 <main+0x20c>)
 800c506:	f7f7 fa21 	bl	800394c <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim8,TIM_CHANNEL_ALL);
 800c50a:	213c      	movs	r1, #60	; 0x3c
 800c50c:	486b      	ldr	r0, [pc, #428]	; (800c6bc <main+0x210>)
 800c50e:	f7f7 fa1d 	bl	800394c <HAL_TIM_Encoder_Start>
  HAL_TIM_Base_Start_IT(&htim6);
 800c512:	486b      	ldr	r0, [pc, #428]	; (800c6c0 <main+0x214>)
 800c514:	f7f7 f899 	bl	800364a <HAL_TIM_Base_Start_IT>

  int mode = 0;
 800c518:	2300      	movs	r3, #0
 800c51a:	607b      	str	r3, [r7, #4]
  printf("Mode : %d\n", mode);
 800c51c:	6879      	ldr	r1, [r7, #4]
 800c51e:	4869      	ldr	r0, [pc, #420]	; (800c6c4 <main+0x218>)
 800c520:	f004 fa34 	bl	801098c <iprintf>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	b2db      	uxtb	r3, r3
 800c528:	f003 0301 	and.w	r3, r3, #1
 800c52c:	b2d8      	uxtb	r0, r3
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	b2db      	uxtb	r3, r3
 800c532:	f003 0302 	and.w	r3, r3, #2
 800c536:	b2d9      	uxtb	r1, r3
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	b2db      	uxtb	r3, r3
 800c53c:	f003 0304 	and.w	r3, r3, #4
 800c540:	b2db      	uxtb	r3, r3
 800c542:	461a      	mov	r2, r3
 800c544:	f003 fc54 	bl	800fdf0 <led_write>
	  if(dist_r >= 20){
 800c548:	4b5f      	ldr	r3, [pc, #380]	; (800c6c8 <main+0x21c>)
 800c54a:	edd3 7a00 	vldr	s15, [r3]
 800c54e:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 800c552:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c556:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c55a:	db0f      	blt.n	800c57c <main+0xd0>
		  mode++;
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	3301      	adds	r3, #1
 800c560:	607b      	str	r3, [r7, #4]
		  dist_r = 0;
 800c562:	4b59      	ldr	r3, [pc, #356]	; (800c6c8 <main+0x21c>)
 800c564:	f04f 0200 	mov.w	r2, #0
 800c568:	601a      	str	r2, [r3, #0]
		  if(mode > 7){
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	2b07      	cmp	r3, #7
 800c56e:	dd01      	ble.n	800c574 <main+0xc8>
			  mode = 0;
 800c570:	2300      	movs	r3, #0
 800c572:	607b      	str	r3, [r7, #4]
		  }
		  printf("Mode : %d\n", mode);
 800c574:	6879      	ldr	r1, [r7, #4]
 800c576:	4853      	ldr	r0, [pc, #332]	; (800c6c4 <main+0x218>)
 800c578:	f004 fa08 	bl	801098c <iprintf>
		  //buzzer(pitagola2[mode-1][0], pitagola2[mode-1][1]);
		  //buzzer(pitagola[2][0], pitagola[2][1]);
	  }
	  if(dist_r <= -20){
 800c57c:	4b52      	ldr	r3, [pc, #328]	; (800c6c8 <main+0x21c>)
 800c57e:	edd3 7a00 	vldr	s15, [r3]
 800c582:	eebb 7a04 	vmov.f32	s14, #180	; 0xc1a00000 -20.0
 800c586:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c58a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c58e:	d80f      	bhi.n	800c5b0 <main+0x104>
		  mode--;
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	3b01      	subs	r3, #1
 800c594:	607b      	str	r3, [r7, #4]
		  dist_r = 0;
 800c596:	4b4c      	ldr	r3, [pc, #304]	; (800c6c8 <main+0x21c>)
 800c598:	f04f 0200 	mov.w	r2, #0
 800c59c:	601a      	str	r2, [r3, #0]
		  if(mode < 0){
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	2b00      	cmp	r3, #0
 800c5a2:	da01      	bge.n	800c5a8 <main+0xfc>
			  mode = 7;
 800c5a4:	2307      	movs	r3, #7
 800c5a6:	607b      	str	r3, [r7, #4]
		  }
		  printf("Mode : %d\n", mode);
 800c5a8:	6879      	ldr	r1, [r7, #4]
 800c5aa:	4846      	ldr	r0, [pc, #280]	; (800c6c4 <main+0x218>)
 800c5ac:	f004 f9ee 	bl	801098c <iprintf>
		  //buzzer(pitagola2[mode-1][0], pitagola2[mode-1][1]);
		  //buzzer(pitagola[2][0], pitagola[2][1]);
	  }
	  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET){
 800c5b0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800c5b4:	4845      	ldr	r0, [pc, #276]	; (800c6cc <main+0x220>)
 800c5b6:	f7f5 fe8d 	bl	80022d4 <HAL_GPIO_ReadPin>
 800c5ba:	4603      	mov	r3, r0
 800c5bc:	2b00      	cmp	r3, #0
 800c5be:	d1b1      	bne.n	800c524 <main+0x78>
		  HAL_Delay(50);
 800c5c0:	2032      	movs	r0, #50	; 0x32
 800c5c2:	f7f4 fd2b 	bl	800101c <HAL_Delay>
		  while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET);
 800c5c6:	bf00      	nop
 800c5c8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800c5cc:	483f      	ldr	r0, [pc, #252]	; (800c6cc <main+0x220>)
 800c5ce:	f7f5 fe81 	bl	80022d4 <HAL_GPIO_ReadPin>
 800c5d2:	4603      	mov	r3, r0
 800c5d4:	2b00      	cmp	r3, #0
 800c5d6:	d0f7      	beq.n	800c5c8 <main+0x11c>
		  switch(mode){
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	2b07      	cmp	r3, #7
 800c5dc:	d8a2      	bhi.n	800c524 <main+0x78>
 800c5de:	a201      	add	r2, pc, #4	; (adr r2, 800c5e4 <main+0x138>)
 800c5e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c5e4:	0800c605 	.word	0x0800c605
 800c5e8:	0800c60f 	.word	0x0800c60f
 800c5ec:	0800c61b 	.word	0x0800c61b
 800c5f0:	0800c627 	.word	0x0800c627
 800c5f4:	0800c633 	.word	0x0800c633
 800c5f8:	0800c639 	.word	0x0800c639
 800c5fc:	0800c665 	.word	0x0800c665
 800c600:	0800c6a7 	.word	0x0800c6a7

		  	  case 0:
		  		  HAL_Delay(5000);
 800c604:	f241 3088 	movw	r0, #5000	; 0x1388
 800c608:	f7f4 fd08 	bl	800101c <HAL_Delay>
		  		  break;
 800c60c:	e04e      	b.n	800c6ac <main+0x200>

		  	  case 1:
		  		  //----a超新地走行----
		  		  printf("Simple Run.\n");
 800c60e:	4830      	ldr	r0, [pc, #192]	; (800c6d0 <main+0x224>)
 800c610:	f004 fa30 	bl	8010a74 <puts>
		  		  //MF.FLAG.WEDGE = 1;
		  		  simple_run();
 800c614:	f7fc fefe 	bl	8009414 <simple_run>
		  		  break;
 800c618:	e048      	b.n	800c6ac <main+0x200>

		  	  case 2:
		  		  //----aスラローム走行----
		  		  printf("slalom Run.\n");
 800c61a:	482e      	ldr	r0, [pc, #184]	; (800c6d4 <main+0x228>)
 800c61c:	f004 fa2a 	bl	8010a74 <puts>
		  		  //MF.FLAG.WEDGE = 1;
		  		  slalom_run();
 800c620:	f7fd f806 	bl	8009630 <slalom_run>
		  		  break;
 800c624:	e042      	b.n	800c6ac <main+0x200>

		  	  case 3:
		  		  //----aスラローム走行&pass圧縮----
				  printf("First Run. (Slalom)\n");
 800c626:	482c      	ldr	r0, [pc, #176]	; (800c6d8 <main+0x22c>)
 800c628:	f004 fa24 	bl	8010a74 <puts>
		  		  pass_test();
 800c62c:	f7fc fd10 	bl	8009050 <pass_test>
		  		  break;
 800c630:	e03c      	b.n	800c6ac <main+0x200>

		  	  case 4:
		  		  //----aテストモード選択----
		  		  test_select();
 800c632:	f7fb ff89 	bl	8008548 <test_select>
		  		  break;
 800c636:	e039      	b.n	800c6ac <main+0x200>

		  	  case 5:
		  		  //----sensor check----
		  		  printf("Sensor Check.\n");
 800c638:	4828      	ldr	r0, [pc, #160]	; (800c6dc <main+0x230>)
 800c63a:	f004 fa1b 	bl	8010a74 <puts>
		  		  sensor_test();
 800c63e:	f003 fccd 	bl	800ffdc <sensor_test>
		  		  break;
 800c642:	e033      	b.n	800c6ac <main+0x200>

		  	  case 6:
		  		  //----pitagola sound----
				  while(ad_fl <= WALL_BASE_FL){
					  led_write(1, 1, 1);
 800c644:	2201      	movs	r2, #1
 800c646:	2101      	movs	r1, #1
 800c648:	2001      	movs	r0, #1
 800c64a:	f003 fbd1 	bl	800fdf0 <led_write>
					  HAL_Delay(200);
 800c64e:	20c8      	movs	r0, #200	; 0xc8
 800c650:	f7f4 fce4 	bl	800101c <HAL_Delay>
					  led_write(0, 0, 0);
 800c654:	2200      	movs	r2, #0
 800c656:	2100      	movs	r1, #0
 800c658:	2000      	movs	r0, #0
 800c65a:	f003 fbc9 	bl	800fdf0 <led_write>
					  HAL_Delay(200);
 800c65e:	20c8      	movs	r0, #200	; 0xc8
 800c660:	f7f4 fcdc 	bl	800101c <HAL_Delay>
				  while(ad_fl <= WALL_BASE_FL){
 800c664:	4b1e      	ldr	r3, [pc, #120]	; (800c6e0 <main+0x234>)
 800c666:	681b      	ldr	r3, [r3, #0]
 800c668:	2bc8      	cmp	r3, #200	; 0xc8
 800c66a:	d9eb      	bls.n	800c644 <main+0x198>
				  }
				  HAL_Delay(200);
 800c66c:	20c8      	movs	r0, #200	; 0xc8
 800c66e:	f7f4 fcd5 	bl	800101c <HAL_Delay>
		  		  }
				  HAL_Delay(2000);
				  for(int i=0; i<m_ok; i++){
		  			  buzzer(mario_ok[i][0], mario_ok[i][1]);
		  		  }
*/				  HAL_Delay(2000);
 800c672:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800c676:	f7f4 fcd1 	bl	800101c <HAL_Delay>
				  for(int i=0; i<m_goal; i++){
 800c67a:	2300      	movs	r3, #0
 800c67c:	603b      	str	r3, [r7, #0]
 800c67e:	e00e      	b.n	800c69e <main+0x1f2>
		  			  buzzer(mario_goal[i][0], mario_goal[i][1]);
 800c680:	4a18      	ldr	r2, [pc, #96]	; (800c6e4 <main+0x238>)
 800c682:	683b      	ldr	r3, [r7, #0]
 800c684:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800c688:	4a16      	ldr	r2, [pc, #88]	; (800c6e4 <main+0x238>)
 800c68a:	683b      	ldr	r3, [r7, #0]
 800c68c:	00db      	lsls	r3, r3, #3
 800c68e:	4413      	add	r3, r2
 800c690:	685b      	ldr	r3, [r3, #4]
 800c692:	4619      	mov	r1, r3
 800c694:	f000 fbda 	bl	800ce4c <buzzer>
				  for(int i=0; i<m_goal; i++){
 800c698:	683b      	ldr	r3, [r7, #0]
 800c69a:	3301      	adds	r3, #1
 800c69c:	603b      	str	r3, [r7, #0]
 800c69e:	683b      	ldr	r3, [r7, #0]
 800c6a0:	2b0e      	cmp	r3, #14
 800c6a2:	dded      	ble.n	800c680 <main+0x1d4>
		  		  }
		  		  break;
 800c6a4:	e002      	b.n	800c6ac <main+0x200>
		  		  //MF.FLAG.WEDGE = 1;
/*		  		  for(int i=0; i<m_select; i++){
		  			  buzzer(mario_select[i][0], mario_select[i][1]);
		  		  }
*///		  		  perfect_run();
		  		  perfect_slalom();
 800c6a6:	f7fd fb75 	bl	8009d94 <perfect_slalom>
		  		  break;
 800c6aa:	bf00      	nop
	  led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 800c6ac:	e73a      	b.n	800c524 <main+0x78>
 800c6ae:	bf00      	nop
 800c6b0:	08011f50 	.word	0x08011f50
 800c6b4:	20000084 	.word	0x20000084
 800c6b8:	2000030c 	.word	0x2000030c
 800c6bc:	200002cc 	.word	0x200002cc
 800c6c0:	20000bb4 	.word	0x20000bb4
 800c6c4:	08011f6c 	.word	0x08011f6c
 800c6c8:	20000aec 	.word	0x20000aec
 800c6cc:	40020000 	.word	0x40020000
 800c6d0:	08011f78 	.word	0x08011f78
 800c6d4:	08011f84 	.word	0x08011f84
 800c6d8:	08011f90 	.word	0x08011f90
 800c6dc:	08011fa4 	.word	0x08011fa4
 800c6e0:	20000d54 	.word	0x20000d54
 800c6e4:	20000008 	.word	0x20000008

0800c6e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800c6e8:	b580      	push	{r7, lr}
 800c6ea:	b094      	sub	sp, #80	; 0x50
 800c6ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800c6ee:	f107 0320 	add.w	r3, r7, #32
 800c6f2:	2230      	movs	r2, #48	; 0x30
 800c6f4:	2100      	movs	r1, #0
 800c6f6:	4618      	mov	r0, r3
 800c6f8:	f004 f940 	bl	801097c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800c6fc:	f107 030c 	add.w	r3, r7, #12
 800c700:	2200      	movs	r2, #0
 800c702:	601a      	str	r2, [r3, #0]
 800c704:	605a      	str	r2, [r3, #4]
 800c706:	609a      	str	r2, [r3, #8]
 800c708:	60da      	str	r2, [r3, #12]
 800c70a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800c70c:	2300      	movs	r3, #0
 800c70e:	60bb      	str	r3, [r7, #8]
 800c710:	4b28      	ldr	r3, [pc, #160]	; (800c7b4 <SystemClock_Config+0xcc>)
 800c712:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c714:	4a27      	ldr	r2, [pc, #156]	; (800c7b4 <SystemClock_Config+0xcc>)
 800c716:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c71a:	6413      	str	r3, [r2, #64]	; 0x40
 800c71c:	4b25      	ldr	r3, [pc, #148]	; (800c7b4 <SystemClock_Config+0xcc>)
 800c71e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c720:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c724:	60bb      	str	r3, [r7, #8]
 800c726:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800c728:	2300      	movs	r3, #0
 800c72a:	607b      	str	r3, [r7, #4]
 800c72c:	4b22      	ldr	r3, [pc, #136]	; (800c7b8 <SystemClock_Config+0xd0>)
 800c72e:	681b      	ldr	r3, [r3, #0]
 800c730:	4a21      	ldr	r2, [pc, #132]	; (800c7b8 <SystemClock_Config+0xd0>)
 800c732:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800c736:	6013      	str	r3, [r2, #0]
 800c738:	4b1f      	ldr	r3, [pc, #124]	; (800c7b8 <SystemClock_Config+0xd0>)
 800c73a:	681b      	ldr	r3, [r3, #0]
 800c73c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c740:	607b      	str	r3, [r7, #4]
 800c742:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800c744:	2302      	movs	r3, #2
 800c746:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800c748:	2301      	movs	r3, #1
 800c74a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800c74c:	2310      	movs	r3, #16
 800c74e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800c750:	2302      	movs	r3, #2
 800c752:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800c754:	2300      	movs	r3, #0
 800c756:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800c758:	2308      	movs	r3, #8
 800c75a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800c75c:	23a8      	movs	r3, #168	; 0xa8
 800c75e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800c760:	2302      	movs	r3, #2
 800c762:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800c764:	2304      	movs	r3, #4
 800c766:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800c768:	f107 0320 	add.w	r3, r7, #32
 800c76c:	4618      	mov	r0, r3
 800c76e:	f7f5 fde3 	bl	8002338 <HAL_RCC_OscConfig>
 800c772:	4603      	mov	r3, r0
 800c774:	2b00      	cmp	r3, #0
 800c776:	d001      	beq.n	800c77c <SystemClock_Config+0x94>
  {
    Error_Handler();
 800c778:	f000 fbd1 	bl	800cf1e <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800c77c:	230f      	movs	r3, #15
 800c77e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800c780:	2302      	movs	r3, #2
 800c782:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800c784:	2300      	movs	r3, #0
 800c786:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800c788:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800c78c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800c78e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c792:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800c794:	f107 030c 	add.w	r3, r7, #12
 800c798:	2105      	movs	r1, #5
 800c79a:	4618      	mov	r0, r3
 800c79c:	f7f6 f80e 	bl	80027bc <HAL_RCC_ClockConfig>
 800c7a0:	4603      	mov	r3, r0
 800c7a2:	2b00      	cmp	r3, #0
 800c7a4:	d001      	beq.n	800c7aa <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800c7a6:	f000 fbba 	bl	800cf1e <Error_Handler>
  }
}
 800c7aa:	bf00      	nop
 800c7ac:	3750      	adds	r7, #80	; 0x50
 800c7ae:	46bd      	mov	sp, r7
 800c7b0:	bd80      	pop	{r7, pc}
 800c7b2:	bf00      	nop
 800c7b4:	40023800 	.word	0x40023800
 800c7b8:	40007000 	.word	0x40007000

0800c7bc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800c7bc:	b580      	push	{r7, lr}
 800c7be:	b084      	sub	sp, #16
 800c7c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800c7c2:	463b      	mov	r3, r7
 800c7c4:	2200      	movs	r2, #0
 800c7c6:	601a      	str	r2, [r3, #0]
 800c7c8:	605a      	str	r2, [r3, #4]
 800c7ca:	609a      	str	r2, [r3, #8]
 800c7cc:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 800c7ce:	4b21      	ldr	r3, [pc, #132]	; (800c854 <MX_ADC1_Init+0x98>)
 800c7d0:	4a21      	ldr	r2, [pc, #132]	; (800c858 <MX_ADC1_Init+0x9c>)
 800c7d2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800c7d4:	4b1f      	ldr	r3, [pc, #124]	; (800c854 <MX_ADC1_Init+0x98>)
 800c7d6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800c7da:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800c7dc:	4b1d      	ldr	r3, [pc, #116]	; (800c854 <MX_ADC1_Init+0x98>)
 800c7de:	2200      	movs	r2, #0
 800c7e0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800c7e2:	4b1c      	ldr	r3, [pc, #112]	; (800c854 <MX_ADC1_Init+0x98>)
 800c7e4:	2200      	movs	r2, #0
 800c7e6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800c7e8:	4b1a      	ldr	r3, [pc, #104]	; (800c854 <MX_ADC1_Init+0x98>)
 800c7ea:	2200      	movs	r2, #0
 800c7ec:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800c7ee:	4b19      	ldr	r3, [pc, #100]	; (800c854 <MX_ADC1_Init+0x98>)
 800c7f0:	2200      	movs	r2, #0
 800c7f2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800c7f6:	4b17      	ldr	r3, [pc, #92]	; (800c854 <MX_ADC1_Init+0x98>)
 800c7f8:	2200      	movs	r2, #0
 800c7fa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800c7fc:	4b15      	ldr	r3, [pc, #84]	; (800c854 <MX_ADC1_Init+0x98>)
 800c7fe:	4a17      	ldr	r2, [pc, #92]	; (800c85c <MX_ADC1_Init+0xa0>)
 800c800:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800c802:	4b14      	ldr	r3, [pc, #80]	; (800c854 <MX_ADC1_Init+0x98>)
 800c804:	2200      	movs	r2, #0
 800c806:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800c808:	4b12      	ldr	r3, [pc, #72]	; (800c854 <MX_ADC1_Init+0x98>)
 800c80a:	2201      	movs	r2, #1
 800c80c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800c80e:	4b11      	ldr	r3, [pc, #68]	; (800c854 <MX_ADC1_Init+0x98>)
 800c810:	2200      	movs	r2, #0
 800c812:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800c816:	4b0f      	ldr	r3, [pc, #60]	; (800c854 <MX_ADC1_Init+0x98>)
 800c818:	2201      	movs	r2, #1
 800c81a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800c81c:	480d      	ldr	r0, [pc, #52]	; (800c854 <MX_ADC1_Init+0x98>)
 800c81e:	f7f4 fc1f 	bl	8001060 <HAL_ADC_Init>
 800c822:	4603      	mov	r3, r0
 800c824:	2b00      	cmp	r3, #0
 800c826:	d001      	beq.n	800c82c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800c828:	f000 fb79 	bl	800cf1e <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800c82c:	2300      	movs	r3, #0
 800c82e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800c830:	2301      	movs	r3, #1
 800c832:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800c834:	2300      	movs	r3, #0
 800c836:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800c838:	463b      	mov	r3, r7
 800c83a:	4619      	mov	r1, r3
 800c83c:	4805      	ldr	r0, [pc, #20]	; (800c854 <MX_ADC1_Init+0x98>)
 800c83e:	f7f4 fdab 	bl	8001398 <HAL_ADC_ConfigChannel>
 800c842:	4603      	mov	r3, r0
 800c844:	2b00      	cmp	r3, #0
 800c846:	d001      	beq.n	800c84c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800c848:	f000 fb69 	bl	800cf1e <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800c84c:	bf00      	nop
 800c84e:	3710      	adds	r7, #16
 800c850:	46bd      	mov	sp, r7
 800c852:	bd80      	pop	{r7, pc}
 800c854:	20000b00 	.word	0x20000b00
 800c858:	40012000 	.word	0x40012000
 800c85c:	0f000001 	.word	0x0f000001

0800c860 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 800c860:	b580      	push	{r7, lr}
 800c862:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 800c864:	4b17      	ldr	r3, [pc, #92]	; (800c8c4 <MX_SPI3_Init+0x64>)
 800c866:	4a18      	ldr	r2, [pc, #96]	; (800c8c8 <MX_SPI3_Init+0x68>)
 800c868:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800c86a:	4b16      	ldr	r3, [pc, #88]	; (800c8c4 <MX_SPI3_Init+0x64>)
 800c86c:	f44f 7282 	mov.w	r2, #260	; 0x104
 800c870:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800c872:	4b14      	ldr	r3, [pc, #80]	; (800c8c4 <MX_SPI3_Init+0x64>)
 800c874:	2200      	movs	r2, #0
 800c876:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 800c878:	4b12      	ldr	r3, [pc, #72]	; (800c8c4 <MX_SPI3_Init+0x64>)
 800c87a:	2200      	movs	r2, #0
 800c87c:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800c87e:	4b11      	ldr	r3, [pc, #68]	; (800c8c4 <MX_SPI3_Init+0x64>)
 800c880:	2200      	movs	r2, #0
 800c882:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800c884:	4b0f      	ldr	r3, [pc, #60]	; (800c8c4 <MX_SPI3_Init+0x64>)
 800c886:	2200      	movs	r2, #0
 800c888:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800c88a:	4b0e      	ldr	r3, [pc, #56]	; (800c8c4 <MX_SPI3_Init+0x64>)
 800c88c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c890:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800c892:	4b0c      	ldr	r3, [pc, #48]	; (800c8c4 <MX_SPI3_Init+0x64>)
 800c894:	2218      	movs	r2, #24
 800c896:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800c898:	4b0a      	ldr	r3, [pc, #40]	; (800c8c4 <MX_SPI3_Init+0x64>)
 800c89a:	2200      	movs	r2, #0
 800c89c:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800c89e:	4b09      	ldr	r3, [pc, #36]	; (800c8c4 <MX_SPI3_Init+0x64>)
 800c8a0:	2200      	movs	r2, #0
 800c8a2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800c8a4:	4b07      	ldr	r3, [pc, #28]	; (800c8c4 <MX_SPI3_Init+0x64>)
 800c8a6:	2200      	movs	r2, #0
 800c8a8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 800c8aa:	4b06      	ldr	r3, [pc, #24]	; (800c8c4 <MX_SPI3_Init+0x64>)
 800c8ac:	220a      	movs	r2, #10
 800c8ae:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800c8b0:	4804      	ldr	r0, [pc, #16]	; (800c8c4 <MX_SPI3_Init+0x64>)
 800c8b2:	f7f6 f94b 	bl	8002b4c <HAL_SPI_Init>
 800c8b6:	4603      	mov	r3, r0
 800c8b8:	2b00      	cmp	r3, #0
 800c8ba:	d001      	beq.n	800c8c0 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 800c8bc:	f000 fb2f 	bl	800cf1e <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800c8c0:	bf00      	nop
 800c8c2:	bd80      	pop	{r7, pc}
 800c8c4:	20000144 	.word	0x20000144
 800c8c8:	40003c00 	.word	0x40003c00

0800c8cc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800c8cc:	b580      	push	{r7, lr}
 800c8ce:	b08e      	sub	sp, #56	; 0x38
 800c8d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800c8d2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800c8d6:	2200      	movs	r2, #0
 800c8d8:	601a      	str	r2, [r3, #0]
 800c8da:	605a      	str	r2, [r3, #4]
 800c8dc:	609a      	str	r2, [r3, #8]
 800c8de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800c8e0:	f107 0320 	add.w	r3, r7, #32
 800c8e4:	2200      	movs	r2, #0
 800c8e6:	601a      	str	r2, [r3, #0]
 800c8e8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800c8ea:	1d3b      	adds	r3, r7, #4
 800c8ec:	2200      	movs	r2, #0
 800c8ee:	601a      	str	r2, [r3, #0]
 800c8f0:	605a      	str	r2, [r3, #4]
 800c8f2:	609a      	str	r2, [r3, #8]
 800c8f4:	60da      	str	r2, [r3, #12]
 800c8f6:	611a      	str	r2, [r3, #16]
 800c8f8:	615a      	str	r2, [r3, #20]
 800c8fa:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800c8fc:	4b32      	ldr	r3, [pc, #200]	; (800c9c8 <MX_TIM2_Init+0xfc>)
 800c8fe:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800c902:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800c904:	4b30      	ldr	r3, [pc, #192]	; (800c9c8 <MX_TIM2_Init+0xfc>)
 800c906:	2200      	movs	r2, #0
 800c908:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800c90a:	4b2f      	ldr	r3, [pc, #188]	; (800c9c8 <MX_TIM2_Init+0xfc>)
 800c90c:	2200      	movs	r2, #0
 800c90e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 800c910:	4b2d      	ldr	r3, [pc, #180]	; (800c9c8 <MX_TIM2_Init+0xfc>)
 800c912:	f240 32e7 	movw	r2, #999	; 0x3e7
 800c916:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800c918:	4b2b      	ldr	r3, [pc, #172]	; (800c9c8 <MX_TIM2_Init+0xfc>)
 800c91a:	2200      	movs	r2, #0
 800c91c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800c91e:	4b2a      	ldr	r3, [pc, #168]	; (800c9c8 <MX_TIM2_Init+0xfc>)
 800c920:	2200      	movs	r2, #0
 800c922:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800c924:	4828      	ldr	r0, [pc, #160]	; (800c9c8 <MX_TIM2_Init+0xfc>)
 800c926:	f7f6 fe65 	bl	80035f4 <HAL_TIM_Base_Init>
 800c92a:	4603      	mov	r3, r0
 800c92c:	2b00      	cmp	r3, #0
 800c92e:	d001      	beq.n	800c934 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 800c930:	f000 faf5 	bl	800cf1e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800c934:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c938:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800c93a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800c93e:	4619      	mov	r1, r3
 800c940:	4821      	ldr	r0, [pc, #132]	; (800c9c8 <MX_TIM2_Init+0xfc>)
 800c942:	f7f7 fa09 	bl	8003d58 <HAL_TIM_ConfigClockSource>
 800c946:	4603      	mov	r3, r0
 800c948:	2b00      	cmp	r3, #0
 800c94a:	d001      	beq.n	800c950 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 800c94c:	f000 fae7 	bl	800cf1e <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800c950:	481d      	ldr	r0, [pc, #116]	; (800c9c8 <MX_TIM2_Init+0xfc>)
 800c952:	f7f6 fe9e 	bl	8003692 <HAL_TIM_PWM_Init>
 800c956:	4603      	mov	r3, r0
 800c958:	2b00      	cmp	r3, #0
 800c95a:	d001      	beq.n	800c960 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 800c95c:	f000 fadf 	bl	800cf1e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800c960:	2300      	movs	r3, #0
 800c962:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800c964:	2300      	movs	r3, #0
 800c966:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800c968:	f107 0320 	add.w	r3, r7, #32
 800c96c:	4619      	mov	r1, r3
 800c96e:	4816      	ldr	r0, [pc, #88]	; (800c9c8 <MX_TIM2_Init+0xfc>)
 800c970:	f7f7 fde1 	bl	8004536 <HAL_TIMEx_MasterConfigSynchronization>
 800c974:	4603      	mov	r3, r0
 800c976:	2b00      	cmp	r3, #0
 800c978:	d001      	beq.n	800c97e <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800c97a:	f000 fad0 	bl	800cf1e <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800c97e:	2360      	movs	r3, #96	; 0x60
 800c980:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800c982:	2300      	movs	r3, #0
 800c984:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800c986:	2300      	movs	r3, #0
 800c988:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800c98a:	2300      	movs	r3, #0
 800c98c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800c98e:	1d3b      	adds	r3, r7, #4
 800c990:	2200      	movs	r2, #0
 800c992:	4619      	mov	r1, r3
 800c994:	480c      	ldr	r0, [pc, #48]	; (800c9c8 <MX_TIM2_Init+0xfc>)
 800c996:	f7f7 f919 	bl	8003bcc <HAL_TIM_PWM_ConfigChannel>
 800c99a:	4603      	mov	r3, r0
 800c99c:	2b00      	cmp	r3, #0
 800c99e:	d001      	beq.n	800c9a4 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 800c9a0:	f000 fabd 	bl	800cf1e <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800c9a4:	1d3b      	adds	r3, r7, #4
 800c9a6:	220c      	movs	r2, #12
 800c9a8:	4619      	mov	r1, r3
 800c9aa:	4807      	ldr	r0, [pc, #28]	; (800c9c8 <MX_TIM2_Init+0xfc>)
 800c9ac:	f7f7 f90e 	bl	8003bcc <HAL_TIM_PWM_ConfigChannel>
 800c9b0:	4603      	mov	r3, r0
 800c9b2:	2b00      	cmp	r3, #0
 800c9b4:	d001      	beq.n	800c9ba <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 800c9b6:	f000 fab2 	bl	800cf1e <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800c9ba:	4803      	ldr	r0, [pc, #12]	; (800c9c8 <MX_TIM2_Init+0xfc>)
 800c9bc:	f003 fdbc 	bl	8010538 <HAL_TIM_MspPostInit>

}
 800c9c0:	bf00      	nop
 800c9c2:	3738      	adds	r7, #56	; 0x38
 800c9c4:	46bd      	mov	sp, r7
 800c9c6:	bd80      	pop	{r7, pc}
 800c9c8:	20000c14 	.word	0x20000c14

0800c9cc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800c9cc:	b580      	push	{r7, lr}
 800c9ce:	b08e      	sub	sp, #56	; 0x38
 800c9d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800c9d2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800c9d6:	2200      	movs	r2, #0
 800c9d8:	601a      	str	r2, [r3, #0]
 800c9da:	605a      	str	r2, [r3, #4]
 800c9dc:	609a      	str	r2, [r3, #8]
 800c9de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800c9e0:	f107 0320 	add.w	r3, r7, #32
 800c9e4:	2200      	movs	r2, #0
 800c9e6:	601a      	str	r2, [r3, #0]
 800c9e8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800c9ea:	1d3b      	adds	r3, r7, #4
 800c9ec:	2200      	movs	r2, #0
 800c9ee:	601a      	str	r2, [r3, #0]
 800c9f0:	605a      	str	r2, [r3, #4]
 800c9f2:	609a      	str	r2, [r3, #8]
 800c9f4:	60da      	str	r2, [r3, #12]
 800c9f6:	611a      	str	r2, [r3, #16]
 800c9f8:	615a      	str	r2, [r3, #20]
 800c9fa:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800c9fc:	4b2c      	ldr	r3, [pc, #176]	; (800cab0 <MX_TIM3_Init+0xe4>)
 800c9fe:	4a2d      	ldr	r2, [pc, #180]	; (800cab4 <MX_TIM3_Init+0xe8>)
 800ca00:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 64-1;
 800ca02:	4b2b      	ldr	r3, [pc, #172]	; (800cab0 <MX_TIM3_Init+0xe4>)
 800ca04:	223f      	movs	r2, #63	; 0x3f
 800ca06:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800ca08:	4b29      	ldr	r3, [pc, #164]	; (800cab0 <MX_TIM3_Init+0xe4>)
 800ca0a:	2200      	movs	r2, #0
 800ca0c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0;
 800ca0e:	4b28      	ldr	r3, [pc, #160]	; (800cab0 <MX_TIM3_Init+0xe4>)
 800ca10:	2200      	movs	r2, #0
 800ca12:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800ca14:	4b26      	ldr	r3, [pc, #152]	; (800cab0 <MX_TIM3_Init+0xe4>)
 800ca16:	2200      	movs	r2, #0
 800ca18:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800ca1a:	4b25      	ldr	r3, [pc, #148]	; (800cab0 <MX_TIM3_Init+0xe4>)
 800ca1c:	2200      	movs	r2, #0
 800ca1e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800ca20:	4823      	ldr	r0, [pc, #140]	; (800cab0 <MX_TIM3_Init+0xe4>)
 800ca22:	f7f6 fde7 	bl	80035f4 <HAL_TIM_Base_Init>
 800ca26:	4603      	mov	r3, r0
 800ca28:	2b00      	cmp	r3, #0
 800ca2a:	d001      	beq.n	800ca30 <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 800ca2c:	f000 fa77 	bl	800cf1e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800ca30:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ca34:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800ca36:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800ca3a:	4619      	mov	r1, r3
 800ca3c:	481c      	ldr	r0, [pc, #112]	; (800cab0 <MX_TIM3_Init+0xe4>)
 800ca3e:	f7f7 f98b 	bl	8003d58 <HAL_TIM_ConfigClockSource>
 800ca42:	4603      	mov	r3, r0
 800ca44:	2b00      	cmp	r3, #0
 800ca46:	d001      	beq.n	800ca4c <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 800ca48:	f000 fa69 	bl	800cf1e <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800ca4c:	4818      	ldr	r0, [pc, #96]	; (800cab0 <MX_TIM3_Init+0xe4>)
 800ca4e:	f7f6 fe20 	bl	8003692 <HAL_TIM_PWM_Init>
 800ca52:	4603      	mov	r3, r0
 800ca54:	2b00      	cmp	r3, #0
 800ca56:	d001      	beq.n	800ca5c <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 800ca58:	f000 fa61 	bl	800cf1e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800ca5c:	2300      	movs	r3, #0
 800ca5e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800ca60:	2300      	movs	r3, #0
 800ca62:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800ca64:	f107 0320 	add.w	r3, r7, #32
 800ca68:	4619      	mov	r1, r3
 800ca6a:	4811      	ldr	r0, [pc, #68]	; (800cab0 <MX_TIM3_Init+0xe4>)
 800ca6c:	f7f7 fd63 	bl	8004536 <HAL_TIMEx_MasterConfigSynchronization>
 800ca70:	4603      	mov	r3, r0
 800ca72:	2b00      	cmp	r3, #0
 800ca74:	d001      	beq.n	800ca7a <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 800ca76:	f000 fa52 	bl	800cf1e <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800ca7a:	2360      	movs	r3, #96	; 0x60
 800ca7c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800ca7e:	2300      	movs	r3, #0
 800ca80:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800ca82:	2300      	movs	r3, #0
 800ca84:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800ca86:	2300      	movs	r3, #0
 800ca88:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800ca8a:	1d3b      	adds	r3, r7, #4
 800ca8c:	2204      	movs	r2, #4
 800ca8e:	4619      	mov	r1, r3
 800ca90:	4807      	ldr	r0, [pc, #28]	; (800cab0 <MX_TIM3_Init+0xe4>)
 800ca92:	f7f7 f89b 	bl	8003bcc <HAL_TIM_PWM_ConfigChannel>
 800ca96:	4603      	mov	r3, r0
 800ca98:	2b00      	cmp	r3, #0
 800ca9a:	d001      	beq.n	800caa0 <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 800ca9c:	f000 fa3f 	bl	800cf1e <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800caa0:	4803      	ldr	r0, [pc, #12]	; (800cab0 <MX_TIM3_Init+0xe4>)
 800caa2:	f003 fd49 	bl	8010538 <HAL_TIM_MspPostInit>

}
 800caa6:	bf00      	nop
 800caa8:	3738      	adds	r7, #56	; 0x38
 800caaa:	46bd      	mov	sp, r7
 800caac:	bd80      	pop	{r7, pc}
 800caae:	bf00      	nop
 800cab0:	20000aa4 	.word	0x20000aa4
 800cab4:	40000400 	.word	0x40000400

0800cab8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800cab8:	b580      	push	{r7, lr}
 800caba:	b08c      	sub	sp, #48	; 0x30
 800cabc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800cabe:	f107 030c 	add.w	r3, r7, #12
 800cac2:	2224      	movs	r2, #36	; 0x24
 800cac4:	2100      	movs	r1, #0
 800cac6:	4618      	mov	r0, r3
 800cac8:	f003 ff58 	bl	801097c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800cacc:	1d3b      	adds	r3, r7, #4
 800cace:	2200      	movs	r2, #0
 800cad0:	601a      	str	r2, [r3, #0]
 800cad2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800cad4:	4b20      	ldr	r3, [pc, #128]	; (800cb58 <MX_TIM4_Init+0xa0>)
 800cad6:	4a21      	ldr	r2, [pc, #132]	; (800cb5c <MX_TIM4_Init+0xa4>)
 800cad8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800cada:	4b1f      	ldr	r3, [pc, #124]	; (800cb58 <MX_TIM4_Init+0xa0>)
 800cadc:	2200      	movs	r2, #0
 800cade:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800cae0:	4b1d      	ldr	r3, [pc, #116]	; (800cb58 <MX_TIM4_Init+0xa0>)
 800cae2:	2200      	movs	r2, #0
 800cae4:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800cae6:	4b1c      	ldr	r3, [pc, #112]	; (800cb58 <MX_TIM4_Init+0xa0>)
 800cae8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800caec:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800caee:	4b1a      	ldr	r3, [pc, #104]	; (800cb58 <MX_TIM4_Init+0xa0>)
 800caf0:	2200      	movs	r2, #0
 800caf2:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800caf4:	4b18      	ldr	r3, [pc, #96]	; (800cb58 <MX_TIM4_Init+0xa0>)
 800caf6:	2200      	movs	r2, #0
 800caf8:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800cafa:	2303      	movs	r3, #3
 800cafc:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800cafe:	2300      	movs	r3, #0
 800cb00:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800cb02:	2301      	movs	r3, #1
 800cb04:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800cb06:	2300      	movs	r3, #0
 800cb08:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800cb0a:	2300      	movs	r3, #0
 800cb0c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800cb0e:	2300      	movs	r3, #0
 800cb10:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800cb12:	2301      	movs	r3, #1
 800cb14:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800cb16:	2300      	movs	r3, #0
 800cb18:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800cb1a:	2300      	movs	r3, #0
 800cb1c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 800cb1e:	f107 030c 	add.w	r3, r7, #12
 800cb22:	4619      	mov	r1, r3
 800cb24:	480c      	ldr	r0, [pc, #48]	; (800cb58 <MX_TIM4_Init+0xa0>)
 800cb26:	f7f6 fe7f 	bl	8003828 <HAL_TIM_Encoder_Init>
 800cb2a:	4603      	mov	r3, r0
 800cb2c:	2b00      	cmp	r3, #0
 800cb2e:	d001      	beq.n	800cb34 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 800cb30:	f000 f9f5 	bl	800cf1e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800cb34:	2300      	movs	r3, #0
 800cb36:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800cb38:	2300      	movs	r3, #0
 800cb3a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800cb3c:	1d3b      	adds	r3, r7, #4
 800cb3e:	4619      	mov	r1, r3
 800cb40:	4805      	ldr	r0, [pc, #20]	; (800cb58 <MX_TIM4_Init+0xa0>)
 800cb42:	f7f7 fcf8 	bl	8004536 <HAL_TIMEx_MasterConfigSynchronization>
 800cb46:	4603      	mov	r3, r0
 800cb48:	2b00      	cmp	r3, #0
 800cb4a:	d001      	beq.n	800cb50 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 800cb4c:	f000 f9e7 	bl	800cf1e <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800cb50:	bf00      	nop
 800cb52:	3730      	adds	r7, #48	; 0x30
 800cb54:	46bd      	mov	sp, r7
 800cb56:	bd80      	pop	{r7, pc}
 800cb58:	2000030c 	.word	0x2000030c
 800cb5c:	40000800 	.word	0x40000800

0800cb60 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 800cb60:	b580      	push	{r7, lr}
 800cb62:	b082      	sub	sp, #8
 800cb64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800cb66:	463b      	mov	r3, r7
 800cb68:	2200      	movs	r2, #0
 800cb6a:	601a      	str	r2, [r3, #0]
 800cb6c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800cb6e:	4b15      	ldr	r3, [pc, #84]	; (800cbc4 <MX_TIM6_Init+0x64>)
 800cb70:	4a15      	ldr	r2, [pc, #84]	; (800cbc8 <MX_TIM6_Init+0x68>)
 800cb72:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 84-1;
 800cb74:	4b13      	ldr	r3, [pc, #76]	; (800cbc4 <MX_TIM6_Init+0x64>)
 800cb76:	2253      	movs	r2, #83	; 0x53
 800cb78:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800cb7a:	4b12      	ldr	r3, [pc, #72]	; (800cbc4 <MX_TIM6_Init+0x64>)
 800cb7c:	2200      	movs	r2, #0
 800cb7e:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000-1;
 800cb80:	4b10      	ldr	r3, [pc, #64]	; (800cbc4 <MX_TIM6_Init+0x64>)
 800cb82:	f240 32e7 	movw	r2, #999	; 0x3e7
 800cb86:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800cb88:	4b0e      	ldr	r3, [pc, #56]	; (800cbc4 <MX_TIM6_Init+0x64>)
 800cb8a:	2200      	movs	r2, #0
 800cb8c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800cb8e:	480d      	ldr	r0, [pc, #52]	; (800cbc4 <MX_TIM6_Init+0x64>)
 800cb90:	f7f6 fd30 	bl	80035f4 <HAL_TIM_Base_Init>
 800cb94:	4603      	mov	r3, r0
 800cb96:	2b00      	cmp	r3, #0
 800cb98:	d001      	beq.n	800cb9e <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 800cb9a:	f000 f9c0 	bl	800cf1e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800cb9e:	2300      	movs	r3, #0
 800cba0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800cba2:	2300      	movs	r3, #0
 800cba4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800cba6:	463b      	mov	r3, r7
 800cba8:	4619      	mov	r1, r3
 800cbaa:	4806      	ldr	r0, [pc, #24]	; (800cbc4 <MX_TIM6_Init+0x64>)
 800cbac:	f7f7 fcc3 	bl	8004536 <HAL_TIMEx_MasterConfigSynchronization>
 800cbb0:	4603      	mov	r3, r0
 800cbb2:	2b00      	cmp	r3, #0
 800cbb4:	d001      	beq.n	800cbba <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 800cbb6:	f000 f9b2 	bl	800cf1e <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800cbba:	bf00      	nop
 800cbbc:	3708      	adds	r7, #8
 800cbbe:	46bd      	mov	sp, r7
 800cbc0:	bd80      	pop	{r7, pc}
 800cbc2:	bf00      	nop
 800cbc4:	20000bb4 	.word	0x20000bb4
 800cbc8:	40001000 	.word	0x40001000

0800cbcc <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 800cbcc:	b580      	push	{r7, lr}
 800cbce:	b08c      	sub	sp, #48	; 0x30
 800cbd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800cbd2:	f107 030c 	add.w	r3, r7, #12
 800cbd6:	2224      	movs	r2, #36	; 0x24
 800cbd8:	2100      	movs	r1, #0
 800cbda:	4618      	mov	r0, r3
 800cbdc:	f003 fece 	bl	801097c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800cbe0:	1d3b      	adds	r3, r7, #4
 800cbe2:	2200      	movs	r2, #0
 800cbe4:	601a      	str	r2, [r3, #0]
 800cbe6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800cbe8:	4b22      	ldr	r3, [pc, #136]	; (800cc74 <MX_TIM8_Init+0xa8>)
 800cbea:	4a23      	ldr	r2, [pc, #140]	; (800cc78 <MX_TIM8_Init+0xac>)
 800cbec:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 800cbee:	4b21      	ldr	r3, [pc, #132]	; (800cc74 <MX_TIM8_Init+0xa8>)
 800cbf0:	2200      	movs	r2, #0
 800cbf2:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800cbf4:	4b1f      	ldr	r3, [pc, #124]	; (800cc74 <MX_TIM8_Init+0xa8>)
 800cbf6:	2200      	movs	r2, #0
 800cbf8:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 800cbfa:	4b1e      	ldr	r3, [pc, #120]	; (800cc74 <MX_TIM8_Init+0xa8>)
 800cbfc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800cc00:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800cc02:	4b1c      	ldr	r3, [pc, #112]	; (800cc74 <MX_TIM8_Init+0xa8>)
 800cc04:	2200      	movs	r2, #0
 800cc06:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800cc08:	4b1a      	ldr	r3, [pc, #104]	; (800cc74 <MX_TIM8_Init+0xa8>)
 800cc0a:	2200      	movs	r2, #0
 800cc0c:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800cc0e:	4b19      	ldr	r3, [pc, #100]	; (800cc74 <MX_TIM8_Init+0xa8>)
 800cc10:	2200      	movs	r2, #0
 800cc12:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800cc14:	2303      	movs	r3, #3
 800cc16:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800cc18:	2300      	movs	r3, #0
 800cc1a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800cc1c:	2301      	movs	r3, #1
 800cc1e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800cc20:	2300      	movs	r3, #0
 800cc22:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800cc24:	2300      	movs	r3, #0
 800cc26:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800cc28:	2300      	movs	r3, #0
 800cc2a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800cc2c:	2301      	movs	r3, #1
 800cc2e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800cc30:	2300      	movs	r3, #0
 800cc32:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800cc34:	2300      	movs	r3, #0
 800cc36:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 800cc38:	f107 030c 	add.w	r3, r7, #12
 800cc3c:	4619      	mov	r1, r3
 800cc3e:	480d      	ldr	r0, [pc, #52]	; (800cc74 <MX_TIM8_Init+0xa8>)
 800cc40:	f7f6 fdf2 	bl	8003828 <HAL_TIM_Encoder_Init>
 800cc44:	4603      	mov	r3, r0
 800cc46:	2b00      	cmp	r3, #0
 800cc48:	d001      	beq.n	800cc4e <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 800cc4a:	f000 f968 	bl	800cf1e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800cc4e:	2300      	movs	r3, #0
 800cc50:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800cc52:	2300      	movs	r3, #0
 800cc54:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800cc56:	1d3b      	adds	r3, r7, #4
 800cc58:	4619      	mov	r1, r3
 800cc5a:	4806      	ldr	r0, [pc, #24]	; (800cc74 <MX_TIM8_Init+0xa8>)
 800cc5c:	f7f7 fc6b 	bl	8004536 <HAL_TIMEx_MasterConfigSynchronization>
 800cc60:	4603      	mov	r3, r0
 800cc62:	2b00      	cmp	r3, #0
 800cc64:	d001      	beq.n	800cc6a <MX_TIM8_Init+0x9e>
  {
    Error_Handler();
 800cc66:	f000 f95a 	bl	800cf1e <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 800cc6a:	bf00      	nop
 800cc6c:	3730      	adds	r7, #48	; 0x30
 800cc6e:	46bd      	mov	sp, r7
 800cc70:	bd80      	pop	{r7, pc}
 800cc72:	bf00      	nop
 800cc74:	200002cc 	.word	0x200002cc
 800cc78:	40010400 	.word	0x40010400

0800cc7c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800cc7c:	b580      	push	{r7, lr}
 800cc7e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800cc80:	4b11      	ldr	r3, [pc, #68]	; (800ccc8 <MX_USART1_UART_Init+0x4c>)
 800cc82:	4a12      	ldr	r2, [pc, #72]	; (800cccc <MX_USART1_UART_Init+0x50>)
 800cc84:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800cc86:	4b10      	ldr	r3, [pc, #64]	; (800ccc8 <MX_USART1_UART_Init+0x4c>)
 800cc88:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800cc8c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800cc8e:	4b0e      	ldr	r3, [pc, #56]	; (800ccc8 <MX_USART1_UART_Init+0x4c>)
 800cc90:	2200      	movs	r2, #0
 800cc92:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800cc94:	4b0c      	ldr	r3, [pc, #48]	; (800ccc8 <MX_USART1_UART_Init+0x4c>)
 800cc96:	2200      	movs	r2, #0
 800cc98:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800cc9a:	4b0b      	ldr	r3, [pc, #44]	; (800ccc8 <MX_USART1_UART_Init+0x4c>)
 800cc9c:	2200      	movs	r2, #0
 800cc9e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800cca0:	4b09      	ldr	r3, [pc, #36]	; (800ccc8 <MX_USART1_UART_Init+0x4c>)
 800cca2:	220c      	movs	r2, #12
 800cca4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800cca6:	4b08      	ldr	r3, [pc, #32]	; (800ccc8 <MX_USART1_UART_Init+0x4c>)
 800cca8:	2200      	movs	r2, #0
 800ccaa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800ccac:	4b06      	ldr	r3, [pc, #24]	; (800ccc8 <MX_USART1_UART_Init+0x4c>)
 800ccae:	2200      	movs	r2, #0
 800ccb0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800ccb2:	4805      	ldr	r0, [pc, #20]	; (800ccc8 <MX_USART1_UART_Init+0x4c>)
 800ccb4:	f7f7 fc98 	bl	80045e8 <HAL_UART_Init>
 800ccb8:	4603      	mov	r3, r0
 800ccba:	2b00      	cmp	r3, #0
 800ccbc:	d001      	beq.n	800ccc2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800ccbe:	f000 f92e 	bl	800cf1e <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800ccc2:	bf00      	nop
 800ccc4:	bd80      	pop	{r7, pc}
 800ccc6:	bf00      	nop
 800ccc8:	20000b64 	.word	0x20000b64
 800cccc:	40011000 	.word	0x40011000

0800ccd0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800ccd0:	b580      	push	{r7, lr}
 800ccd2:	b08a      	sub	sp, #40	; 0x28
 800ccd4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ccd6:	f107 0314 	add.w	r3, r7, #20
 800ccda:	2200      	movs	r2, #0
 800ccdc:	601a      	str	r2, [r3, #0]
 800ccde:	605a      	str	r2, [r3, #4]
 800cce0:	609a      	str	r2, [r3, #8]
 800cce2:	60da      	str	r2, [r3, #12]
 800cce4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800cce6:	2300      	movs	r3, #0
 800cce8:	613b      	str	r3, [r7, #16]
 800ccea:	4b53      	ldr	r3, [pc, #332]	; (800ce38 <MX_GPIO_Init+0x168>)
 800ccec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ccee:	4a52      	ldr	r2, [pc, #328]	; (800ce38 <MX_GPIO_Init+0x168>)
 800ccf0:	f043 0304 	orr.w	r3, r3, #4
 800ccf4:	6313      	str	r3, [r2, #48]	; 0x30
 800ccf6:	4b50      	ldr	r3, [pc, #320]	; (800ce38 <MX_GPIO_Init+0x168>)
 800ccf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ccfa:	f003 0304 	and.w	r3, r3, #4
 800ccfe:	613b      	str	r3, [r7, #16]
 800cd00:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800cd02:	2300      	movs	r3, #0
 800cd04:	60fb      	str	r3, [r7, #12]
 800cd06:	4b4c      	ldr	r3, [pc, #304]	; (800ce38 <MX_GPIO_Init+0x168>)
 800cd08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cd0a:	4a4b      	ldr	r2, [pc, #300]	; (800ce38 <MX_GPIO_Init+0x168>)
 800cd0c:	f043 0301 	orr.w	r3, r3, #1
 800cd10:	6313      	str	r3, [r2, #48]	; 0x30
 800cd12:	4b49      	ldr	r3, [pc, #292]	; (800ce38 <MX_GPIO_Init+0x168>)
 800cd14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cd16:	f003 0301 	and.w	r3, r3, #1
 800cd1a:	60fb      	str	r3, [r7, #12]
 800cd1c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800cd1e:	2300      	movs	r3, #0
 800cd20:	60bb      	str	r3, [r7, #8]
 800cd22:	4b45      	ldr	r3, [pc, #276]	; (800ce38 <MX_GPIO_Init+0x168>)
 800cd24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cd26:	4a44      	ldr	r2, [pc, #272]	; (800ce38 <MX_GPIO_Init+0x168>)
 800cd28:	f043 0302 	orr.w	r3, r3, #2
 800cd2c:	6313      	str	r3, [r2, #48]	; 0x30
 800cd2e:	4b42      	ldr	r3, [pc, #264]	; (800ce38 <MX_GPIO_Init+0x168>)
 800cd30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cd32:	f003 0302 	and.w	r3, r3, #2
 800cd36:	60bb      	str	r3, [r7, #8]
 800cd38:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800cd3a:	2300      	movs	r3, #0
 800cd3c:	607b      	str	r3, [r7, #4]
 800cd3e:	4b3e      	ldr	r3, [pc, #248]	; (800ce38 <MX_GPIO_Init+0x168>)
 800cd40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cd42:	4a3d      	ldr	r2, [pc, #244]	; (800ce38 <MX_GPIO_Init+0x168>)
 800cd44:	f043 0308 	orr.w	r3, r3, #8
 800cd48:	6313      	str	r3, [r2, #48]	; 0x30
 800cd4a:	4b3b      	ldr	r3, [pc, #236]	; (800ce38 <MX_GPIO_Init+0x168>)
 800cd4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cd4e:	f003 0308 	and.w	r3, r3, #8
 800cd52:	607b      	str	r3, [r7, #4]
 800cd54:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_2 
 800cd56:	2200      	movs	r2, #0
 800cd58:	f24e 213c 	movw	r1, #57916	; 0xe23c
 800cd5c:	4837      	ldr	r0, [pc, #220]	; (800ce3c <MX_GPIO_Init+0x16c>)
 800cd5e:	f7f5 fad1 	bl	8002304 <HAL_GPIO_WritePin>
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8, GPIO_PIN_RESET);
 800cd62:	2200      	movs	r2, #0
 800cd64:	f44f 71e8 	mov.w	r1, #464	; 0x1d0
 800cd68:	4835      	ldr	r0, [pc, #212]	; (800ce40 <MX_GPIO_Init+0x170>)
 800cd6a:	f7f5 facb 	bl	8002304 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_13 
 800cd6e:	2200      	movs	r2, #0
 800cd70:	f242 7103 	movw	r1, #9987	; 0x2703
 800cd74:	4833      	ldr	r0, [pc, #204]	; (800ce44 <MX_GPIO_Init+0x174>)
 800cd76:	f7f5 fac5 	bl	8002304 <HAL_GPIO_WritePin>
                          |GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 800cd7a:	2200      	movs	r2, #0
 800cd7c:	2104      	movs	r1, #4
 800cd7e:	4832      	ldr	r0, [pc, #200]	; (800ce48 <MX_GPIO_Init+0x178>)
 800cd80:	f7f5 fac0 	bl	8002304 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 PC2 
                           PC3 PC4 PC5 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_2 
 800cd84:	f24e 233c 	movw	r3, #57916	; 0xe23c
 800cd88:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800cd8a:	2301      	movs	r3, #1
 800cd8c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cd8e:	2300      	movs	r3, #0
 800cd90:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800cd92:	2300      	movs	r3, #0
 800cd94:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800cd96:	f107 0314 	add.w	r3, r7, #20
 800cd9a:	4619      	mov	r1, r3
 800cd9c:	4827      	ldr	r0, [pc, #156]	; (800ce3c <MX_GPIO_Init+0x16c>)
 800cd9e:	f7f5 f8ff 	bl	8001fa0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA6 PA7 PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 800cda2:	f44f 73e8 	mov.w	r3, #464	; 0x1d0
 800cda6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800cda8:	2301      	movs	r3, #1
 800cdaa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cdac:	2300      	movs	r3, #0
 800cdae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800cdb0:	2300      	movs	r3, #0
 800cdb2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800cdb4:	f107 0314 	add.w	r3, r7, #20
 800cdb8:	4619      	mov	r1, r3
 800cdba:	4821      	ldr	r0, [pc, #132]	; (800ce40 <MX_GPIO_Init+0x170>)
 800cdbc:	f7f5 f8f0 	bl	8001fa0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB10 PB13 
                           PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_13 
 800cdc0:	f242 7303 	movw	r3, #9987	; 0x2703
 800cdc4:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800cdc6:	2301      	movs	r3, #1
 800cdc8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cdca:	2300      	movs	r3, #0
 800cdcc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800cdce:	2300      	movs	r3, #0
 800cdd0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800cdd2:	f107 0314 	add.w	r3, r7, #20
 800cdd6:	4619      	mov	r1, r3
 800cdd8:	481a      	ldr	r0, [pc, #104]	; (800ce44 <MX_GPIO_Init+0x174>)
 800cdda:	f7f5 f8e1 	bl	8001fa0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 800cdde:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800cde2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800cde4:	2300      	movs	r3, #0
 800cde6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800cde8:	2301      	movs	r3, #1
 800cdea:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800cdec:	f107 0314 	add.w	r3, r7, #20
 800cdf0:	4619      	mov	r1, r3
 800cdf2:	4814      	ldr	r0, [pc, #80]	; (800ce44 <MX_GPIO_Init+0x174>)
 800cdf4:	f7f5 f8d4 	bl	8001fa0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 800cdf8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800cdfc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800cdfe:	2300      	movs	r3, #0
 800ce00:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ce02:	2300      	movs	r3, #0
 800ce04:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ce06:	f107 0314 	add.w	r3, r7, #20
 800ce0a:	4619      	mov	r1, r3
 800ce0c:	480c      	ldr	r0, [pc, #48]	; (800ce40 <MX_GPIO_Init+0x170>)
 800ce0e:	f7f5 f8c7 	bl	8001fa0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800ce12:	2304      	movs	r3, #4
 800ce14:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800ce16:	2301      	movs	r3, #1
 800ce18:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ce1a:	2300      	movs	r3, #0
 800ce1c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ce1e:	2300      	movs	r3, #0
 800ce20:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800ce22:	f107 0314 	add.w	r3, r7, #20
 800ce26:	4619      	mov	r1, r3
 800ce28:	4807      	ldr	r0, [pc, #28]	; (800ce48 <MX_GPIO_Init+0x178>)
 800ce2a:	f7f5 f8b9 	bl	8001fa0 <HAL_GPIO_Init>

}
 800ce2e:	bf00      	nop
 800ce30:	3728      	adds	r7, #40	; 0x28
 800ce32:	46bd      	mov	sp, r7
 800ce34:	bd80      	pop	{r7, pc}
 800ce36:	bf00      	nop
 800ce38:	40023800 	.word	0x40023800
 800ce3c:	40020800 	.word	0x40020800
 800ce40:	40020000 	.word	0x40020000
 800ce44:	40020400 	.word	0x40020400
 800ce48:	40020c00 	.word	0x40020c00

0800ce4c <buzzer>:

/* USER CODE BEGIN 4 */
void buzzer(int sound, int length){
 800ce4c:	b580      	push	{r7, lr}
 800ce4e:	b08a      	sub	sp, #40	; 0x28
 800ce50:	af00      	add	r7, sp, #0
 800ce52:	6078      	str	r0, [r7, #4]
 800ce54:	6039      	str	r1, [r7, #0]
	TIM_OC_InitTypeDef ConfigOC;
	ConfigOC.OCMode = TIM_OCMODE_PWM1;
 800ce56:	2360      	movs	r3, #96	; 0x60
 800ce58:	60fb      	str	r3, [r7, #12]
	ConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800ce5a:	2300      	movs	r3, #0
 800ce5c:	617b      	str	r3, [r7, #20]
	ConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800ce5e:	2300      	movs	r3, #0
 800ce60:	61fb      	str	r3, [r7, #28]

	hz = 1000000 / sound;
 800ce62:	4a15      	ldr	r2, [pc, #84]	; (800ceb8 <buzzer+0x6c>)
 800ce64:	687b      	ldr	r3, [r7, #4]
 800ce66:	fb92 f3f3 	sdiv	r3, r2, r3
 800ce6a:	4a14      	ldr	r2, [pc, #80]	; (800cebc <buzzer+0x70>)
 800ce6c:	6013      	str	r3, [r2, #0]
	TIM3 -> ARR = hz;
 800ce6e:	4b13      	ldr	r3, [pc, #76]	; (800cebc <buzzer+0x70>)
 800ce70:	681a      	ldr	r2, [r3, #0]
 800ce72:	4b13      	ldr	r3, [pc, #76]	; (800cec0 <buzzer+0x74>)
 800ce74:	62da      	str	r2, [r3, #44]	; 0x2c
    ConfigOC.Pulse = hz / 10;
 800ce76:	4b11      	ldr	r3, [pc, #68]	; (800cebc <buzzer+0x70>)
 800ce78:	681b      	ldr	r3, [r3, #0]
 800ce7a:	4a12      	ldr	r2, [pc, #72]	; (800cec4 <buzzer+0x78>)
 800ce7c:	fb82 1203 	smull	r1, r2, r2, r3
 800ce80:	1092      	asrs	r2, r2, #2
 800ce82:	17db      	asrs	r3, r3, #31
 800ce84:	1ad3      	subs	r3, r2, r3
 800ce86:	613b      	str	r3, [r7, #16]
    HAL_TIM_PWM_ConfigChannel(&htim3, &ConfigOC, TIM_CHANNEL_2);
 800ce88:	f107 030c 	add.w	r3, r7, #12
 800ce8c:	2204      	movs	r2, #4
 800ce8e:	4619      	mov	r1, r3
 800ce90:	480d      	ldr	r0, [pc, #52]	; (800cec8 <buzzer+0x7c>)
 800ce92:	f7f6 fe9b 	bl	8003bcc <HAL_TIM_PWM_ConfigChannel>
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 800ce96:	2104      	movs	r1, #4
 800ce98:	480b      	ldr	r0, [pc, #44]	; (800cec8 <buzzer+0x7c>)
 800ce9a:	f7f6 fc2f 	bl	80036fc <HAL_TIM_PWM_Start>

	HAL_Delay(length);
 800ce9e:	683b      	ldr	r3, [r7, #0]
 800cea0:	4618      	mov	r0, r3
 800cea2:	f7f4 f8bb 	bl	800101c <HAL_Delay>
    HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_2);
 800cea6:	2104      	movs	r1, #4
 800cea8:	4807      	ldr	r0, [pc, #28]	; (800cec8 <buzzer+0x7c>)
 800ceaa:	f7f6 fc65 	bl	8003778 <HAL_TIM_PWM_Stop>
}
 800ceae:	bf00      	nop
 800ceb0:	3728      	adds	r7, #40	; 0x28
 800ceb2:	46bd      	mov	sp, r7
 800ceb4:	bd80      	pop	{r7, pc}
 800ceb6:	bf00      	nop
 800ceb8:	000f4240 	.word	0x000f4240
 800cebc:	200002c4 	.word	0x200002c4
 800cec0:	40000400 	.word	0x40000400
 800cec4:	66666667 	.word	0x66666667
 800cec8:	20000aa4 	.word	0x20000aa4

0800cecc <get_adc_value>:


int get_adc_value(ADC_HandleTypeDef *hadc, uint32_t channel){
 800cecc:	b580      	push	{r7, lr}
 800cece:	b086      	sub	sp, #24
 800ced0:	af00      	add	r7, sp, #0
 800ced2:	6078      	str	r0, [r7, #4]
 800ced4:	6039      	str	r1, [r7, #0]

  ADC_ChannelConfTypeDef sConfig = {0};
 800ced6:	f107 0308 	add.w	r3, r7, #8
 800ceda:	2200      	movs	r2, #0
 800cedc:	601a      	str	r2, [r3, #0]
 800cede:	605a      	str	r2, [r3, #4]
 800cee0:	609a      	str	r2, [r3, #8]
 800cee2:	60da      	str	r2, [r3, #12]

  sConfig.Channel = channel;
 800cee4:	683b      	ldr	r3, [r7, #0]
 800cee6:	60bb      	str	r3, [r7, #8]
  sConfig.Rank = 1;
 800cee8:	2301      	movs	r3, #1
 800ceea:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800ceec:	2300      	movs	r3, #0
 800ceee:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800cef0:	2300      	movs	r3, #0
 800cef2:	617b      	str	r3, [r7, #20]

  HAL_ADC_ConfigChannel(hadc, &sConfig);
 800cef4:	f107 0308 	add.w	r3, r7, #8
 800cef8:	4619      	mov	r1, r3
 800cefa:	6878      	ldr	r0, [r7, #4]
 800cefc:	f7f4 fa4c 	bl	8001398 <HAL_ADC_ConfigChannel>

  HAL_ADC_Start(hadc);                    //
 800cf00:	6878      	ldr	r0, [r7, #4]
 800cf02:	f7f4 f8f1 	bl	80010e8 <HAL_ADC_Start>
  HAL_ADC_PollForConversion(hadc, 100);   //wait for ADC
 800cf06:	2164      	movs	r1, #100	; 0x64
 800cf08:	6878      	ldr	r0, [r7, #4]
 800cf0a:	f7f4 f9b3 	bl	8001274 <HAL_ADC_PollForConversion>
  return HAL_ADC_GetValue(hadc);          //
 800cf0e:	6878      	ldr	r0, [r7, #4]
 800cf10:	f7f4 fa34 	bl	800137c <HAL_ADC_GetValue>
 800cf14:	4603      	mov	r3, r0
}
 800cf16:	4618      	mov	r0, r3
 800cf18:	3718      	adds	r7, #24
 800cf1a:	46bd      	mov	sp, r7
 800cf1c:	bd80      	pop	{r7, pc}

0800cf1e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800cf1e:	b480      	push	{r7}
 800cf20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800cf22:	bf00      	nop
 800cf24:	46bd      	mov	sp, r7
 800cf26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf2a:	4770      	bx	lr

0800cf2c <search_init>:

#include "global.h"

void search_init(void){
 800cf2c:	b580      	push	{r7, lr}
 800cf2e:	af00      	add	r7, sp, #0

	//----a探索系----
	goal_x = GOAL_X;        		//GOAL_Xはglobal.hにマクロ定義あり
 800cf30:	4b09      	ldr	r3, [pc, #36]	; (800cf58 <search_init+0x2c>)
 800cf32:	2209      	movs	r2, #9
 800cf34:	701a      	strb	r2, [r3, #0]
	goal_y = GOAL_Y;        		//GOAL_Yはglobal.hにマクロ定義あり
 800cf36:	4b09      	ldr	r3, [pc, #36]	; (800cf5c <search_init+0x30>)
 800cf38:	2206      	movs	r2, #6
 800cf3a:	701a      	strb	r2, [r3, #0]
	map_Init();						//aマップの初期化
 800cf3c:	f000 ff8e 	bl	800de5c <map_Init>
	mouse.x = 0;
 800cf40:	4b07      	ldr	r3, [pc, #28]	; (800cf60 <search_init+0x34>)
 800cf42:	2200      	movs	r2, #0
 800cf44:	701a      	strb	r2, [r3, #0]
	mouse.y = 0;					//a現在地の初期化
 800cf46:	4b06      	ldr	r3, [pc, #24]	; (800cf60 <search_init+0x34>)
 800cf48:	2200      	movs	r2, #0
 800cf4a:	705a      	strb	r2, [r3, #1]
	mouse.dir = 0;					//aマウスの向きの初期化
 800cf4c:	4b04      	ldr	r3, [pc, #16]	; (800cf60 <search_init+0x34>)
 800cf4e:	2200      	movs	r2, #0
 800cf50:	709a      	strb	r2, [r3, #2]
}
 800cf52:	bf00      	nop
 800cf54:	bd80      	pop	{r7, pc}
 800cf56:	bf00      	nop
 800cf58:	20000bb0 	.word	0x20000bb0
 800cf5c:	20000b4c 	.word	0x20000b4c
 800cf60:	20000c0c 	.word	0x20000c0c

0800cf64 <searchA>:
//searchA
//a1区画走行でgoal座標に進む
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void searchA(){
 800cf64:	b580      	push	{r7, lr}
 800cf66:	af00      	add	r7, sp, #0

	if(MF.FLAG.SCND){
 800cf68:	4b37      	ldr	r3, [pc, #220]	; (800d048 <searchA+0xe4>)
 800cf6a:	881b      	ldrh	r3, [r3, #0]
 800cf6c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800cf70:	b2db      	uxtb	r3, r3
 800cf72:	2b00      	cmp	r3, #0
 800cf74:	d001      	beq.n	800cf7a <searchA+0x16>
		load_map_from_eeprom();
 800cf76:	f002 fe89 	bl	800fc8c <load_map_from_eeprom>
	}

	//====aスタート位置壁情報取得====
	get_wall_info();										//a壁情報の初期化, 後壁はなくなる
 800cf7a:	f002 feff 	bl	800fd7c <get_wall_info>
	wall_info &= ~0x88;										//a前壁は存在するはずがないので削除する
 800cf7e:	4b33      	ldr	r3, [pc, #204]	; (800d04c <searchA+0xe8>)
 800cf80:	781b      	ldrb	r3, [r3, #0]
 800cf82:	f003 0377 	and.w	r3, r3, #119	; 0x77
 800cf86:	b2da      	uxtb	r2, r3
 800cf88:	4b30      	ldr	r3, [pc, #192]	; (800d04c <searchA+0xe8>)
 800cf8a:	701a      	strb	r2, [r3, #0]
	write_map();											//a壁情報を地図に記入
 800cf8c:	f000 ffd2 	bl	800df34 <write_map>

	//====a歩数マップ・経路作成====
	r_cnt = 0;												//a経路カウンタの初期化
 800cf90:	4b2f      	ldr	r3, [pc, #188]	; (800d050 <searchA+0xec>)
 800cf92:	2200      	movs	r2, #0
 800cf94:	701a      	strb	r2, [r3, #0]
	make_smap();											//a歩数マップ作成
 800cf96:	f001 f9cf 	bl	800e338 <make_smap>
	make_route();											//a最短経路探索（route配列に動作が格納される）
 800cf9a:	f001 fd6b 	bl	800ea74 <make_route>

	//====a探索走行====
	do{
		//----a進行----
		switch(route[r_cnt++]){								//route配列によって進行を決定。経路カウンタを進める
 800cf9e:	4b2c      	ldr	r3, [pc, #176]	; (800d050 <searchA+0xec>)
 800cfa0:	781b      	ldrb	r3, [r3, #0]
 800cfa2:	1c5a      	adds	r2, r3, #1
 800cfa4:	b2d1      	uxtb	r1, r2
 800cfa6:	4a2a      	ldr	r2, [pc, #168]	; (800d050 <searchA+0xec>)
 800cfa8:	7011      	strb	r1, [r2, #0]
 800cfaa:	461a      	mov	r2, r3
 800cfac:	4b29      	ldr	r3, [pc, #164]	; (800d054 <searchA+0xf0>)
 800cfae:	5c9b      	ldrb	r3, [r3, r2]
 800cfb0:	2b22      	cmp	r3, #34	; 0x22
 800cfb2:	d00b      	beq.n	800cfcc <searchA+0x68>
 800cfb4:	2b22      	cmp	r3, #34	; 0x22
 800cfb6:	dc02      	bgt.n	800cfbe <searchA+0x5a>
 800cfb8:	2b11      	cmp	r3, #17
 800cfba:	d012      	beq.n	800cfe2 <searchA+0x7e>
 800cfbc:	e015      	b.n	800cfea <searchA+0x86>
 800cfbe:	2b44      	cmp	r3, #68	; 0x44
 800cfc0:	d001      	beq.n	800cfc6 <searchA+0x62>
 800cfc2:	2b88      	cmp	r3, #136	; 0x88
			//----a前進----
			case 0x88:
				break;
 800cfc4:	e011      	b.n	800cfea <searchA+0x86>
			//----a右折----
			case 0x44:
				rotate_R90();								//a右回転
 800cfc6:	f7f8 ffcb 	bl	8005f60 <rotate_R90>
				break;
 800cfca:	e00e      	b.n	800cfea <searchA+0x86>
			//----180回転----
			case 0x22:
				rotate_180();								//180度回転
 800cfcc:	f7f9 f980 	bl	80062d0 <rotate_180>
				if(wall_info & 0x88){
 800cfd0:	4b1e      	ldr	r3, [pc, #120]	; (800d04c <searchA+0xe8>)
 800cfd2:	781b      	ldrb	r3, [r3, #0]
 800cfd4:	f003 0388 	and.w	r3, r3, #136	; 0x88
 800cfd8:	2b00      	cmp	r3, #0
 800cfda:	d005      	beq.n	800cfe8 <searchA+0x84>
					set_position();
 800cfdc:	f7f8 fc4a 	bl	8005874 <set_position>
				}
				break;
 800cfe0:	e002      	b.n	800cfe8 <searchA+0x84>
			//----a左折----
			case 0x11:
				rotate_L90();								//a左回転
 800cfe2:	f7f9 f899 	bl	8006118 <rotate_L90>
				break;
 800cfe6:	e000      	b.n	800cfea <searchA+0x86>
				break;
 800cfe8:	bf00      	nop
		}

		drive_wait();
 800cfea:	2032      	movs	r0, #50	; 0x32
 800cfec:	f7f4 f816 	bl	800101c <HAL_Delay>
		one_section();										//a前進する
 800cff0:	f7f8 fdf4 	bl	8005bdc <one_section>
		drive_wait();
 800cff4:	2032      	movs	r0, #50	; 0x32
 800cff6:	f7f4 f811 	bl	800101c <HAL_Delay>

		adv_pos();											//aマイクロマウス内部位置情報でも前進処理
 800cffa:	f000 fed7 	bl	800ddac <adv_pos>
		conf_route();										//a最短経路で進行可能か判定
 800cffe:	f000 ff0f 	bl	800de20 <conf_route>

	}while((mouse.x != goal_x) || (mouse.y != goal_y));		//a現在座標とgoal座標が等しくなるまで実行
 800d002:	4b15      	ldr	r3, [pc, #84]	; (800d058 <searchA+0xf4>)
 800d004:	781b      	ldrb	r3, [r3, #0]
 800d006:	b2da      	uxtb	r2, r3
 800d008:	4b14      	ldr	r3, [pc, #80]	; (800d05c <searchA+0xf8>)
 800d00a:	781b      	ldrb	r3, [r3, #0]
 800d00c:	429a      	cmp	r2, r3
 800d00e:	d1c6      	bne.n	800cf9e <searchA+0x3a>
 800d010:	4b11      	ldr	r3, [pc, #68]	; (800d058 <searchA+0xf4>)
 800d012:	785b      	ldrb	r3, [r3, #1]
 800d014:	b2da      	uxtb	r2, r3
 800d016:	4b12      	ldr	r3, [pc, #72]	; (800d060 <searchA+0xfc>)
 800d018:	781b      	ldrb	r3, [r3, #0]
 800d01a:	429a      	cmp	r2, r3
 800d01c:	d1bf      	bne.n	800cf9e <searchA+0x3a>

	printf("goal\n");
 800d01e:	4811      	ldr	r0, [pc, #68]	; (800d064 <searchA+0x100>)
 800d020:	f003 fd28 	bl	8010a74 <puts>
	HAL_Delay(500);										//aスタートでは***2秒以上***停止しなくてはならない
 800d024:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800d028:	f7f3 fff8 	bl	800101c <HAL_Delay>
	rotate_180();											//180度回転
 800d02c:	f7f9 f950 	bl	80062d0 <rotate_180>

	if(!MF.FLAG.SCND){
 800d030:	4b05      	ldr	r3, [pc, #20]	; (800d048 <searchA+0xe4>)
 800d032:	881b      	ldrh	r3, [r3, #0]
 800d034:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800d038:	b2db      	uxtb	r3, r3
 800d03a:	2b00      	cmp	r3, #0
 800d03c:	d101      	bne.n	800d042 <searchA+0xde>
		store_map_in_eeprom();
 800d03e:	f002 fdeb 	bl	800fc18 <store_map_in_eeprom>
	}
}
 800d042:	bf00      	nop
 800d044:	bd80      	pop	{r7, pc}
 800d046:	bf00      	nop
 800d048:	20000f68 	.word	0x20000f68
 800d04c:	200002c8 	.word	0x200002c8
 800d050:	200015d0 	.word	0x200015d0
 800d054:	20000c54 	.word	0x20000c54
 800d058:	20000c0c 	.word	0x20000c0c
 800d05c:	20000bb0 	.word	0x20000bb0
 800d060:	20000b4c 	.word	0x20000b4c
 800d064:	08011fb4 	.word	0x08011fb4

0800d068 <searchB>:
//searchB
//a連続走行でgoal座標に進む
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void searchB(){
 800d068:	b580      	push	{r7, lr}
 800d06a:	af00      	add	r7, sp, #0

	if(MF.FLAG.SCND){
 800d06c:	4b3c      	ldr	r3, [pc, #240]	; (800d160 <searchB+0xf8>)
 800d06e:	881b      	ldrh	r3, [r3, #0]
 800d070:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800d074:	b2db      	uxtb	r3, r3
 800d076:	2b00      	cmp	r3, #0
 800d078:	d001      	beq.n	800d07e <searchB+0x16>
		load_map_from_eeprom();
 800d07a:	f002 fe07 	bl	800fc8c <load_map_from_eeprom>
	}

	//====aスタート位置壁情報取得====
	get_wall_info();										//a壁情報の初期化, 後壁はなくなる
 800d07e:	f002 fe7d 	bl	800fd7c <get_wall_info>
	wall_info &= ~0x88;										//a前壁は存在するはずがないので削除する
 800d082:	4b38      	ldr	r3, [pc, #224]	; (800d164 <searchB+0xfc>)
 800d084:	781b      	ldrb	r3, [r3, #0]
 800d086:	f003 0377 	and.w	r3, r3, #119	; 0x77
 800d08a:	b2da      	uxtb	r2, r3
 800d08c:	4b35      	ldr	r3, [pc, #212]	; (800d164 <searchB+0xfc>)
 800d08e:	701a      	strb	r2, [r3, #0]
	write_map();											//a壁情報を地図に記入
 800d090:	f000 ff50 	bl	800df34 <write_map>

	//====a前に壁が無い想定で問答無用で前進====
	start_sectionA();
 800d094:	f7f8 fc26 	bl	80058e4 <start_sectionA>
	adv_pos();
 800d098:	f000 fe88 	bl	800ddac <adv_pos>

	//====a歩数マップ・経路作成====
	write_map();											//a壁情報を地図に記入
 800d09c:	f000 ff4a 	bl	800df34 <write_map>
	r_cnt = 0;												//a経路カウンタの初期化
 800d0a0:	4b31      	ldr	r3, [pc, #196]	; (800d168 <searchB+0x100>)
 800d0a2:	2200      	movs	r2, #0
 800d0a4:	701a      	strb	r2, [r3, #0]
	make_smap();											//a歩数マップ作成
 800d0a6:	f001 f947 	bl	800e338 <make_smap>
	make_route();											//a最短経路探索（route配列に動作が格納される）
 800d0aa:	f001 fce3 	bl	800ea74 <make_route>

	//====a探索走行====
	do{
		//----a進行----
		switch(route[r_cnt++]){								//route配列によって進行を決定。経路カウンタを進める
 800d0ae:	4b2e      	ldr	r3, [pc, #184]	; (800d168 <searchB+0x100>)
 800d0b0:	781b      	ldrb	r3, [r3, #0]
 800d0b2:	1c5a      	adds	r2, r3, #1
 800d0b4:	b2d1      	uxtb	r1, r2
 800d0b6:	4a2c      	ldr	r2, [pc, #176]	; (800d168 <searchB+0x100>)
 800d0b8:	7011      	strb	r1, [r2, #0]
 800d0ba:	461a      	mov	r2, r3
 800d0bc:	4b2b      	ldr	r3, [pc, #172]	; (800d16c <searchB+0x104>)
 800d0be:	5c9b      	ldrb	r3, [r3, r2]
 800d0c0:	2b22      	cmp	r3, #34	; 0x22
 800d0c2:	d012      	beq.n	800d0ea <searchB+0x82>
 800d0c4:	2b22      	cmp	r3, #34	; 0x22
 800d0c6:	dc02      	bgt.n	800d0ce <searchB+0x66>
 800d0c8:	2b11      	cmp	r3, #17
 800d0ca:	d01d      	beq.n	800d108 <searchB+0xa0>
 800d0cc:	e023      	b.n	800d116 <searchB+0xae>
 800d0ce:	2b44      	cmp	r3, #68	; 0x44
 800d0d0:	d004      	beq.n	800d0dc <searchB+0x74>
 800d0d2:	2b88      	cmp	r3, #136	; 0x88
 800d0d4:	d11f      	bne.n	800d116 <searchB+0xae>
			//----a前進----
			case 0x88:
				one_sectionU();
 800d0d6:	f7f8 ff29 	bl	8005f2c <one_sectionU>
				break;
 800d0da:	e01c      	b.n	800d116 <searchB+0xae>
			//----a右折----
			case 0x44:
				half_sectionD();
 800d0dc:	f7f8 fd20 	bl	8005b20 <half_sectionD>
				rotate_R90();
 800d0e0:	f7f8 ff3e 	bl	8005f60 <rotate_R90>
				half_sectionA();
 800d0e4:	f7f8 fcd2 	bl	8005a8c <half_sectionA>
				break;
 800d0e8:	e015      	b.n	800d116 <searchB+0xae>
			//----180回転----
			case 0x22:
				half_sectionD();
 800d0ea:	f7f8 fd19 	bl	8005b20 <half_sectionD>
				rotate_180();
 800d0ee:	f7f9 f8ef 	bl	80062d0 <rotate_180>
				if(wall_info & 0x88){
 800d0f2:	4b1c      	ldr	r3, [pc, #112]	; (800d164 <searchB+0xfc>)
 800d0f4:	781b      	ldrb	r3, [r3, #0]
 800d0f6:	f003 0388 	and.w	r3, r3, #136	; 0x88
 800d0fa:	2b00      	cmp	r3, #0
 800d0fc:	d001      	beq.n	800d102 <searchB+0x9a>
					set_position();
 800d0fe:	f7f8 fbb9 	bl	8005874 <set_position>
				}
				half_sectionA();
 800d102:	f7f8 fcc3 	bl	8005a8c <half_sectionA>
				break;
 800d106:	e006      	b.n	800d116 <searchB+0xae>
			//----a左折----
			case 0x11:
				half_sectionD();
 800d108:	f7f8 fd0a 	bl	8005b20 <half_sectionD>
				rotate_L90();
 800d10c:	f7f9 f804 	bl	8006118 <rotate_L90>
				half_sectionA();
 800d110:	f7f8 fcbc 	bl	8005a8c <half_sectionA>
				break;
 800d114:	bf00      	nop
		}
		adv_pos();
 800d116:	f000 fe49 	bl	800ddac <adv_pos>
		conf_route();
 800d11a:	f000 fe81 	bl	800de20 <conf_route>

	}while((mouse.x != goal_x) || (mouse.y != goal_y));
 800d11e:	4b14      	ldr	r3, [pc, #80]	; (800d170 <searchB+0x108>)
 800d120:	781b      	ldrb	r3, [r3, #0]
 800d122:	b2da      	uxtb	r2, r3
 800d124:	4b13      	ldr	r3, [pc, #76]	; (800d174 <searchB+0x10c>)
 800d126:	781b      	ldrb	r3, [r3, #0]
 800d128:	429a      	cmp	r2, r3
 800d12a:	d1c0      	bne.n	800d0ae <searchB+0x46>
 800d12c:	4b10      	ldr	r3, [pc, #64]	; (800d170 <searchB+0x108>)
 800d12e:	785b      	ldrb	r3, [r3, #1]
 800d130:	b2da      	uxtb	r2, r3
 800d132:	4b11      	ldr	r3, [pc, #68]	; (800d178 <searchB+0x110>)
 800d134:	781b      	ldrb	r3, [r3, #0]
 800d136:	429a      	cmp	r2, r3
 800d138:	d1b9      	bne.n	800d0ae <searchB+0x46>

	half_sectionD();
 800d13a:	f7f8 fcf1 	bl	8005b20 <half_sectionD>

	HAL_Delay(500);
 800d13e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800d142:	f7f3 ff6b 	bl	800101c <HAL_Delay>
	rotate_180();											//180度回転
 800d146:	f7f9 f8c3 	bl	80062d0 <rotate_180>

	if(!MF.FLAG.SCND){
 800d14a:	4b05      	ldr	r3, [pc, #20]	; (800d160 <searchB+0xf8>)
 800d14c:	881b      	ldrh	r3, [r3, #0]
 800d14e:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800d152:	b2db      	uxtb	r3, r3
 800d154:	2b00      	cmp	r3, #0
 800d156:	d101      	bne.n	800d15c <searchB+0xf4>
		store_map_in_eeprom();
 800d158:	f002 fd5e 	bl	800fc18 <store_map_in_eeprom>
	}
}
 800d15c:	bf00      	nop
 800d15e:	bd80      	pop	{r7, pc}
 800d160:	20000f68 	.word	0x20000f68
 800d164:	200002c8 	.word	0x200002c8
 800d168:	200015d0 	.word	0x200015d0
 800d16c:	20000c54 	.word	0x20000c54
 800d170:	20000c0c 	.word	0x20000c0c
 800d174:	20000bb0 	.word	0x20000bb0
 800d178:	20000b4c 	.word	0x20000b4c

0800d17c <searchC>:
//searchC
//aスラローム走行でgoal座標に進む
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void searchC(){
 800d17c:	b590      	push	{r4, r7, lr}
 800d17e:	b083      	sub	sp, #12
 800d180:	af00      	add	r7, sp, #0

	if(MF.FLAG.SCND){
 800d182:	4b8b      	ldr	r3, [pc, #556]	; (800d3b0 <searchC+0x234>)
 800d184:	881b      	ldrh	r3, [r3, #0]
 800d186:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800d18a:	b2db      	uxtb	r3, r3
 800d18c:	2b00      	cmp	r3, #0
 800d18e:	d001      	beq.n	800d194 <searchC+0x18>
		load_map_from_eeprom();
 800d190:	f002 fd7c 	bl	800fc8c <load_map_from_eeprom>
	}

	//====aスタート位置壁情報取得====
	if(!MF.FLAG.SCND)get_wall_info();										//a壁情報の初期化, 後壁はなくなる
 800d194:	4b86      	ldr	r3, [pc, #536]	; (800d3b0 <searchC+0x234>)
 800d196:	881b      	ldrh	r3, [r3, #0]
 800d198:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800d19c:	b2db      	uxtb	r3, r3
 800d19e:	2b00      	cmp	r3, #0
 800d1a0:	d101      	bne.n	800d1a6 <searchC+0x2a>
 800d1a2:	f002 fdeb 	bl	800fd7c <get_wall_info>
	if(!MF.FLAG.SCND)wall_info &= ~0x88;									//a前壁は存在するはずがないので削除する
 800d1a6:	4b82      	ldr	r3, [pc, #520]	; (800d3b0 <searchC+0x234>)
 800d1a8:	881b      	ldrh	r3, [r3, #0]
 800d1aa:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800d1ae:	b2db      	uxtb	r3, r3
 800d1b0:	2b00      	cmp	r3, #0
 800d1b2:	d106      	bne.n	800d1c2 <searchC+0x46>
 800d1b4:	4b7f      	ldr	r3, [pc, #508]	; (800d3b4 <searchC+0x238>)
 800d1b6:	781b      	ldrb	r3, [r3, #0]
 800d1b8:	f003 0377 	and.w	r3, r3, #119	; 0x77
 800d1bc:	b2da      	uxtb	r2, r3
 800d1be:	4b7d      	ldr	r3, [pc, #500]	; (800d3b4 <searchC+0x238>)
 800d1c0:	701a      	strb	r2, [r3, #0]
	if(!MF.FLAG.SCND)write_map();											//a壁情報を地図に記入
 800d1c2:	4b7b      	ldr	r3, [pc, #492]	; (800d3b0 <searchC+0x234>)
 800d1c4:	881b      	ldrh	r3, [r3, #0]
 800d1c6:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800d1ca:	b2db      	uxtb	r3, r3
 800d1cc:	2b00      	cmp	r3, #0
 800d1ce:	d101      	bne.n	800d1d4 <searchC+0x58>
 800d1d0:	f000 feb0 	bl	800df34 <write_map>

	//====a前に壁が無い想定で問答無用で前進====
	start_sectionA();
 800d1d4:	f7f8 fb86 	bl	80058e4 <start_sectionA>
	adv_pos();
 800d1d8:	f000 fde8 	bl	800ddac <adv_pos>

	//====a歩数マップ・経路作成====
	if(!MF.FLAG.SCND)write_map();											//a壁情報を地図に記入
 800d1dc:	4b74      	ldr	r3, [pc, #464]	; (800d3b0 <searchC+0x234>)
 800d1de:	881b      	ldrh	r3, [r3, #0]
 800d1e0:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800d1e4:	b2db      	uxtb	r3, r3
 800d1e6:	2b00      	cmp	r3, #0
 800d1e8:	d101      	bne.n	800d1ee <searchC+0x72>
 800d1ea:	f000 fea3 	bl	800df34 <write_map>
	r_cnt = 0;																//a経路カウンタの初期化
 800d1ee:	4b72      	ldr	r3, [pc, #456]	; (800d3b8 <searchC+0x23c>)
 800d1f0:	2200      	movs	r2, #0
 800d1f2:	701a      	strb	r2, [r3, #0]
	make_smap();															//a歩数マップ作成
 800d1f4:	f001 f8a0 	bl	800e338 <make_smap>
	make_route();															//a最短経路探索（route配列に動作が格納される）
 800d1f8:	f001 fc3c 	bl	800ea74 <make_route>
	uint8_t x, y;															//X，Y座標

	//====a探索走行====
	do{
		//----a進行----
		switch(route[r_cnt++]){												//route配列によって進行を決定。経路カウンタを進める
 800d1fc:	4b6e      	ldr	r3, [pc, #440]	; (800d3b8 <searchC+0x23c>)
 800d1fe:	781b      	ldrb	r3, [r3, #0]
 800d200:	1c5a      	adds	r2, r3, #1
 800d202:	b2d1      	uxtb	r1, r2
 800d204:	4a6c      	ldr	r2, [pc, #432]	; (800d3b8 <searchC+0x23c>)
 800d206:	7011      	strb	r1, [r2, #0]
 800d208:	461a      	mov	r2, r3
 800d20a:	4b6c      	ldr	r3, [pc, #432]	; (800d3bc <searchC+0x240>)
 800d20c:	5c9b      	ldrb	r3, [r3, r2]
 800d20e:	2b22      	cmp	r3, #34	; 0x22
 800d210:	d07f      	beq.n	800d312 <searchC+0x196>
 800d212:	2b22      	cmp	r3, #34	; 0x22
 800d214:	dc03      	bgt.n	800d21e <searchC+0xa2>
 800d216:	2b11      	cmp	r3, #17
 800d218:	f000 808b 	beq.w	800d332 <searchC+0x1b6>
 800d21c:	e08c      	b.n	800d338 <searchC+0x1bc>
 800d21e:	2b44      	cmp	r3, #68	; 0x44
 800d220:	d074      	beq.n	800d30c <searchC+0x190>
 800d222:	2b88      	cmp	r3, #136	; 0x88
 800d224:	f040 8088 	bne.w	800d338 <searchC+0x1bc>
			//----a前進----
			case 0x88:
				if(route[r_cnt] == 0x88 && MF.FLAG.ACCL2){
 800d228:	4b63      	ldr	r3, [pc, #396]	; (800d3b8 <searchC+0x23c>)
 800d22a:	781b      	ldrb	r3, [r3, #0]
 800d22c:	461a      	mov	r2, r3
 800d22e:	4b63      	ldr	r3, [pc, #396]	; (800d3bc <searchC+0x240>)
 800d230:	5c9b      	ldrb	r3, [r3, r2]
 800d232:	2b88      	cmp	r3, #136	; 0x88
 800d234:	d158      	bne.n	800d2e8 <searchC+0x16c>
 800d236:	4b5e      	ldr	r3, [pc, #376]	; (800d3b0 <searchC+0x234>)
 800d238:	881b      	ldrh	r3, [r3, #0]
 800d23a:	f3c3 2340 	ubfx	r3, r3, #9, #1
 800d23e:	b2db      	uxtb	r3, r3
 800d240:	2b00      	cmp	r3, #0
 800d242:	d051      	beq.n	800d2e8 <searchC+0x16c>
					x = mouse.x;
 800d244:	4b5e      	ldr	r3, [pc, #376]	; (800d3c0 <searchC+0x244>)
 800d246:	781b      	ldrb	r3, [r3, #0]
 800d248:	71fb      	strb	r3, [r7, #7]
					y = mouse.y;
 800d24a:	4b5d      	ldr	r3, [pc, #372]	; (800d3c0 <searchC+0x244>)
 800d24c:	785b      	ldrb	r3, [r3, #1]
 800d24e:	71bb      	strb	r3, [r7, #6]
					adv_pos();
 800d250:	f000 fdac 	bl	800ddac <adv_pos>
					if((map[mouse.y][mouse.x] & 0x0f) == (map[mouse.y][mouse.x]>>4)){
 800d254:	4b5a      	ldr	r3, [pc, #360]	; (800d3c0 <searchC+0x244>)
 800d256:	785b      	ldrb	r3, [r3, #1]
 800d258:	b2db      	uxtb	r3, r3
 800d25a:	4618      	mov	r0, r3
 800d25c:	4b58      	ldr	r3, [pc, #352]	; (800d3c0 <searchC+0x244>)
 800d25e:	781b      	ldrb	r3, [r3, #0]
 800d260:	b2db      	uxtb	r3, r3
 800d262:	4619      	mov	r1, r3
 800d264:	4a57      	ldr	r2, [pc, #348]	; (800d3c4 <searchC+0x248>)
 800d266:	0103      	lsls	r3, r0, #4
 800d268:	4413      	add	r3, r2
 800d26a:	440b      	add	r3, r1
 800d26c:	781b      	ldrb	r3, [r3, #0]
 800d26e:	f003 030f 	and.w	r3, r3, #15
 800d272:	4a53      	ldr	r2, [pc, #332]	; (800d3c0 <searchC+0x244>)
 800d274:	7852      	ldrb	r2, [r2, #1]
 800d276:	b2d2      	uxtb	r2, r2
 800d278:	4614      	mov	r4, r2
 800d27a:	4a51      	ldr	r2, [pc, #324]	; (800d3c0 <searchC+0x244>)
 800d27c:	7812      	ldrb	r2, [r2, #0]
 800d27e:	b2d2      	uxtb	r2, r2
 800d280:	4610      	mov	r0, r2
 800d282:	4950      	ldr	r1, [pc, #320]	; (800d3c4 <searchC+0x248>)
 800d284:	0122      	lsls	r2, r4, #4
 800d286:	440a      	add	r2, r1
 800d288:	4402      	add	r2, r0
 800d28a:	7812      	ldrb	r2, [r2, #0]
 800d28c:	0912      	lsrs	r2, r2, #4
 800d28e:	b2d2      	uxtb	r2, r2
 800d290:	4293      	cmp	r3, r2
 800d292:	d111      	bne.n	800d2b8 <searchC+0x13c>
						if(!MF2.FLAG.HACCEL){
 800d294:	4b4c      	ldr	r3, [pc, #304]	; (800d3c8 <searchC+0x24c>)
 800d296:	881b      	ldrh	r3, [r3, #0]
 800d298:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800d29c:	b2db      	uxtb	r3, r3
 800d29e:	2b00      	cmp	r3, #0
 800d2a0:	d107      	bne.n	800d2b2 <searchC+0x136>
							one_sectionA();
 800d2a2:	f7f8 fca3 	bl	8005bec <one_sectionA>
							MF2.FLAG.HACCEL = 1;
 800d2a6:	4a48      	ldr	r2, [pc, #288]	; (800d3c8 <searchC+0x24c>)
 800d2a8:	8813      	ldrh	r3, [r2, #0]
 800d2aa:	f043 0302 	orr.w	r3, r3, #2
 800d2ae:	8013      	strh	r3, [r2, #0]
 800d2b0:	e013      	b.n	800d2da <searchC+0x15e>
						}else{
							one_sectionU();
 800d2b2:	f7f8 fe3b 	bl	8005f2c <one_sectionU>
 800d2b6:	e010      	b.n	800d2da <searchC+0x15e>
						}
					}else if(MF2.FLAG.HACCEL){
 800d2b8:	4b43      	ldr	r3, [pc, #268]	; (800d3c8 <searchC+0x24c>)
 800d2ba:	881b      	ldrh	r3, [r3, #0]
 800d2bc:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800d2c0:	b2db      	uxtb	r3, r3
 800d2c2:	2b00      	cmp	r3, #0
 800d2c4:	d007      	beq.n	800d2d6 <searchC+0x15a>
						one_sectionD();
 800d2c6:	f7f8 fcf7 	bl	8005cb8 <one_sectionD>
						MF2.FLAG.HACCEL = 0;
 800d2ca:	4a3f      	ldr	r2, [pc, #252]	; (800d3c8 <searchC+0x24c>)
 800d2cc:	8813      	ldrh	r3, [r2, #0]
 800d2ce:	f36f 0341 	bfc	r3, #1, #1
 800d2d2:	8013      	strh	r3, [r2, #0]
 800d2d4:	e001      	b.n	800d2da <searchC+0x15e>
					}else{
						one_sectionU();
 800d2d6:	f7f8 fe29 	bl	8005f2c <one_sectionU>
					}
					mouse.x = x;
 800d2da:	4a39      	ldr	r2, [pc, #228]	; (800d3c0 <searchC+0x244>)
 800d2dc:	79fb      	ldrb	r3, [r7, #7]
 800d2de:	7013      	strb	r3, [r2, #0]
					mouse.y = y;
 800d2e0:	4a37      	ldr	r2, [pc, #220]	; (800d3c0 <searchC+0x244>)
 800d2e2:	79bb      	ldrb	r3, [r7, #6]
 800d2e4:	7053      	strb	r3, [r2, #1]
					one_sectionD();
					MF2.FLAG.HACCEL = 0;
				}else{
					one_sectionU();
				}
				break;
 800d2e6:	e027      	b.n	800d338 <searchC+0x1bc>
				}else if(MF2.FLAG.HACCEL){
 800d2e8:	4b37      	ldr	r3, [pc, #220]	; (800d3c8 <searchC+0x24c>)
 800d2ea:	881b      	ldrh	r3, [r3, #0]
 800d2ec:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800d2f0:	b2db      	uxtb	r3, r3
 800d2f2:	2b00      	cmp	r3, #0
 800d2f4:	d007      	beq.n	800d306 <searchC+0x18a>
					one_sectionD();
 800d2f6:	f7f8 fcdf 	bl	8005cb8 <one_sectionD>
					MF2.FLAG.HACCEL = 0;
 800d2fa:	4a33      	ldr	r2, [pc, #204]	; (800d3c8 <searchC+0x24c>)
 800d2fc:	8813      	ldrh	r3, [r2, #0]
 800d2fe:	f36f 0341 	bfc	r3, #1, #1
 800d302:	8013      	strh	r3, [r2, #0]
				break;
 800d304:	e018      	b.n	800d338 <searchC+0x1bc>
					one_sectionU();
 800d306:	f7f8 fe11 	bl	8005f2c <one_sectionU>
				break;
 800d30a:	e015      	b.n	800d338 <searchC+0x1bc>
			//----a右折スラローム----
			case 0x44:
				slalom_R90();
 800d30c:	f7f9 f8b8 	bl	8006480 <slalom_R90>
				break;
 800d310:	e012      	b.n	800d338 <searchC+0x1bc>
			//----180回転----
			case 0x22:
				half_sectionD();
 800d312:	f7f8 fc05 	bl	8005b20 <half_sectionD>
				rotate_180();
 800d316:	f7f8 ffdb 	bl	80062d0 <rotate_180>
				if(wall_info & 0x88){
 800d31a:	4b26      	ldr	r3, [pc, #152]	; (800d3b4 <searchC+0x238>)
 800d31c:	781b      	ldrb	r3, [r3, #0]
 800d31e:	f003 0388 	and.w	r3, r3, #136	; 0x88
 800d322:	2b00      	cmp	r3, #0
 800d324:	d002      	beq.n	800d32c <searchC+0x1b0>
					set_position();
 800d326:	f7f8 faa5 	bl	8005874 <set_position>
				}else{
					half_sectionA();
				}
				break;
 800d32a:	e005      	b.n	800d338 <searchC+0x1bc>
					half_sectionA();
 800d32c:	f7f8 fbae 	bl	8005a8c <half_sectionA>
				break;
 800d330:	e002      	b.n	800d338 <searchC+0x1bc>
			//----a左折スラローム----
			case 0x11:
				slalom_L90();
 800d332:	f7f9 f989 	bl	8006648 <slalom_L90>
				break;
 800d336:	bf00      	nop
		}
		adv_pos();
 800d338:	f000 fd38 	bl	800ddac <adv_pos>
		if(!MF.FLAG.SCND)conf_route();
 800d33c:	4b1c      	ldr	r3, [pc, #112]	; (800d3b0 <searchC+0x234>)
 800d33e:	881b      	ldrh	r3, [r3, #0]
 800d340:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800d344:	b2db      	uxtb	r3, r3
 800d346:	2b00      	cmp	r3, #0
 800d348:	d101      	bne.n	800d34e <searchC+0x1d2>
 800d34a:	f000 fd69 	bl	800de20 <conf_route>

	}while((mouse.x != goal_x) || (mouse.y != goal_y));
 800d34e:	4b1c      	ldr	r3, [pc, #112]	; (800d3c0 <searchC+0x244>)
 800d350:	781b      	ldrb	r3, [r3, #0]
 800d352:	b2da      	uxtb	r2, r3
 800d354:	4b1d      	ldr	r3, [pc, #116]	; (800d3cc <searchC+0x250>)
 800d356:	781b      	ldrb	r3, [r3, #0]
 800d358:	429a      	cmp	r2, r3
 800d35a:	f47f af4f 	bne.w	800d1fc <searchC+0x80>
 800d35e:	4b18      	ldr	r3, [pc, #96]	; (800d3c0 <searchC+0x244>)
 800d360:	785b      	ldrb	r3, [r3, #1]
 800d362:	b2da      	uxtb	r2, r3
 800d364:	4b1a      	ldr	r3, [pc, #104]	; (800d3d0 <searchC+0x254>)
 800d366:	781b      	ldrb	r3, [r3, #0]
 800d368:	429a      	cmp	r2, r3
 800d36a:	f47f af47 	bne.w	800d1fc <searchC+0x80>

	half_sectionD();
 800d36e:	f7f8 fbd7 	bl	8005b20 <half_sectionD>

	set_positionF();
 800d372:	f7f8 fa95 	bl	80058a0 <set_positionF>

	HAL_Delay(500);
 800d376:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800d37a:	f7f3 fe4f 	bl	800101c <HAL_Delay>
	rotate_180();											//180度回転
 800d37e:	f7f8 ffa7 	bl	80062d0 <rotate_180>
	driveC2(SETPOS_BACK);         //a尻を当てる程度に後退。回転後に停止する
 800d382:	2064      	movs	r0, #100	; 0x64
 800d384:	f7f8 f828 	bl	80053d8 <driveC2>
	degree_z = target_degree_z;
 800d388:	4b12      	ldr	r3, [pc, #72]	; (800d3d4 <searchC+0x258>)
 800d38a:	681b      	ldr	r3, [r3, #0]
 800d38c:	4a12      	ldr	r2, [pc, #72]	; (800d3d8 <searchC+0x25c>)
 800d38e:	6013      	str	r3, [r2, #0]
	start_mode = 0;
 800d390:	4b12      	ldr	r3, [pc, #72]	; (800d3dc <searchC+0x260>)
 800d392:	2200      	movs	r2, #0
 800d394:	701a      	strb	r2, [r3, #0]

	if(!MF.FLAG.SCND){
 800d396:	4b06      	ldr	r3, [pc, #24]	; (800d3b0 <searchC+0x234>)
 800d398:	881b      	ldrh	r3, [r3, #0]
 800d39a:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800d39e:	b2db      	uxtb	r3, r3
 800d3a0:	2b00      	cmp	r3, #0
 800d3a2:	d101      	bne.n	800d3a8 <searchC+0x22c>
		store_map_in_eeprom();
 800d3a4:	f002 fc38 	bl	800fc18 <store_map_in_eeprom>
	}
}
 800d3a8:	bf00      	nop
 800d3aa:	370c      	adds	r7, #12
 800d3ac:	46bd      	mov	sp, r7
 800d3ae:	bd90      	pop	{r4, r7, pc}
 800d3b0:	20000f68 	.word	0x20000f68
 800d3b4:	200002c8 	.word	0x200002c8
 800d3b8:	200015d0 	.word	0x200015d0
 800d3bc:	20000c54 	.word	0x20000c54
 800d3c0:	20000c0c 	.word	0x20000c0c
 800d3c4:	200001ac 	.word	0x200001ac
 800d3c8:	20000f64 	.word	0x20000f64
 800d3cc:	20000bb0 	.word	0x20000bb0
 800d3d0:	20000b4c 	.word	0x20000b4c
 800d3d4:	20000bf8 	.word	0x20000bf8
 800d3d8:	20000b5c 	.word	0x20000b5c
 800d3dc:	200015c8 	.word	0x200015c8

0800d3e0 <searchD>:
//searchD
//aスラローム走行+既知区間加速でgoal座標に進む
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void searchD(){
 800d3e0:	b580      	push	{r7, lr}
 800d3e2:	af00      	add	r7, sp, #0

	if(MF.FLAG.SCND){
 800d3e4:	4b7a      	ldr	r3, [pc, #488]	; (800d5d0 <searchD+0x1f0>)
 800d3e6:	881b      	ldrh	r3, [r3, #0]
 800d3e8:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800d3ec:	b2db      	uxtb	r3, r3
 800d3ee:	2b00      	cmp	r3, #0
 800d3f0:	d001      	beq.n	800d3f6 <searchD+0x16>
		load_map_from_eeprom();
 800d3f2:	f002 fc4b 	bl	800fc8c <load_map_from_eeprom>
	}

	//====aスタート位置壁情報取得====
	if(!MF.FLAG.SCND)get_wall_info();										//a壁情報の初期化, 後壁はなくなる
 800d3f6:	4b76      	ldr	r3, [pc, #472]	; (800d5d0 <searchD+0x1f0>)
 800d3f8:	881b      	ldrh	r3, [r3, #0]
 800d3fa:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800d3fe:	b2db      	uxtb	r3, r3
 800d400:	2b00      	cmp	r3, #0
 800d402:	d101      	bne.n	800d408 <searchD+0x28>
 800d404:	f002 fcba 	bl	800fd7c <get_wall_info>
	if(!MF.FLAG.SCND)wall_info &= ~0x88;										//a前壁は存在するはずがないので削除する
 800d408:	4b71      	ldr	r3, [pc, #452]	; (800d5d0 <searchD+0x1f0>)
 800d40a:	881b      	ldrh	r3, [r3, #0]
 800d40c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800d410:	b2db      	uxtb	r3, r3
 800d412:	2b00      	cmp	r3, #0
 800d414:	d106      	bne.n	800d424 <searchD+0x44>
 800d416:	4b6f      	ldr	r3, [pc, #444]	; (800d5d4 <searchD+0x1f4>)
 800d418:	781b      	ldrb	r3, [r3, #0]
 800d41a:	f003 0377 	and.w	r3, r3, #119	; 0x77
 800d41e:	b2da      	uxtb	r2, r3
 800d420:	4b6c      	ldr	r3, [pc, #432]	; (800d5d4 <searchD+0x1f4>)
 800d422:	701a      	strb	r2, [r3, #0]
	if(!MF.FLAG.SCND)write_map();											//a壁情報を地図に記入
 800d424:	4b6a      	ldr	r3, [pc, #424]	; (800d5d0 <searchD+0x1f0>)
 800d426:	881b      	ldrh	r3, [r3, #0]
 800d428:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800d42c:	b2db      	uxtb	r3, r3
 800d42e:	2b00      	cmp	r3, #0
 800d430:	d101      	bne.n	800d436 <searchD+0x56>
 800d432:	f000 fd7f 	bl	800df34 <write_map>

	//====a前に壁が無い想定で問答無用で前進====
	start_sectionA();
 800d436:	f7f8 fa55 	bl	80058e4 <start_sectionA>
	adv_pos();
 800d43a:	f000 fcb7 	bl	800ddac <adv_pos>

	//====a歩数マップ・経路作成====
	if(!MF.FLAG.SCND)write_map();											//a壁情報を地図に記入
 800d43e:	4b64      	ldr	r3, [pc, #400]	; (800d5d0 <searchD+0x1f0>)
 800d440:	881b      	ldrh	r3, [r3, #0]
 800d442:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800d446:	b2db      	uxtb	r3, r3
 800d448:	2b00      	cmp	r3, #0
 800d44a:	d101      	bne.n	800d450 <searchD+0x70>
 800d44c:	f000 fd72 	bl	800df34 <write_map>
	r_cnt = 0;												//a経路カウンタの初期化
 800d450:	4b61      	ldr	r3, [pc, #388]	; (800d5d8 <searchD+0x1f8>)
 800d452:	2200      	movs	r2, #0
 800d454:	701a      	strb	r2, [r3, #0]
	make_smap();											//a歩数マップ作成
 800d456:	f000 ff6f 	bl	800e338 <make_smap>
	make_route();											//a最短経路探索（route配列に動作が格納される）
 800d45a:	f001 fb0b 	bl	800ea74 <make_route>

	MF2.FLAG.HACCEL = 0;
 800d45e:	4a5f      	ldr	r2, [pc, #380]	; (800d5dc <searchD+0x1fc>)
 800d460:	8813      	ldrh	r3, [r2, #0]
 800d462:	f36f 0341 	bfc	r3, #1, #1
 800d466:	8013      	strh	r3, [r2, #0]

	//====a探索走行====
	do{
		//----a進行----
		switch(route[r_cnt++]){								//route配列によって進行を決定。経路カウンタを進める
 800d468:	4b5b      	ldr	r3, [pc, #364]	; (800d5d8 <searchD+0x1f8>)
 800d46a:	781b      	ldrb	r3, [r3, #0]
 800d46c:	1c5a      	adds	r2, r3, #1
 800d46e:	b2d1      	uxtb	r1, r2
 800d470:	4a59      	ldr	r2, [pc, #356]	; (800d5d8 <searchD+0x1f8>)
 800d472:	7011      	strb	r1, [r2, #0]
 800d474:	461a      	mov	r2, r3
 800d476:	4b5a      	ldr	r3, [pc, #360]	; (800d5e0 <searchD+0x200>)
 800d478:	5c9b      	ldrb	r3, [r3, r2]
 800d47a:	2b22      	cmp	r3, #34	; 0x22
 800d47c:	d05d      	beq.n	800d53a <searchD+0x15a>
 800d47e:	2b22      	cmp	r3, #34	; 0x22
 800d480:	dc02      	bgt.n	800d488 <searchD+0xa8>
 800d482:	2b11      	cmp	r3, #17
 800d484:	d069      	beq.n	800d55a <searchD+0x17a>
 800d486:	e06b      	b.n	800d560 <searchD+0x180>
 800d488:	2b44      	cmp	r3, #68	; 0x44
 800d48a:	d053      	beq.n	800d534 <searchD+0x154>
 800d48c:	2b88      	cmp	r3, #136	; 0x88
 800d48e:	d167      	bne.n	800d560 <searchD+0x180>
			//----a前進----
			case 0x88:
				if(MF.FLAG.SCND && MF.FLAG.ACCL2){
 800d490:	4b4f      	ldr	r3, [pc, #316]	; (800d5d0 <searchD+0x1f0>)
 800d492:	881b      	ldrh	r3, [r3, #0]
 800d494:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800d498:	b2db      	uxtb	r3, r3
 800d49a:	2b00      	cmp	r3, #0
 800d49c:	d046      	beq.n	800d52c <searchD+0x14c>
 800d49e:	4b4c      	ldr	r3, [pc, #304]	; (800d5d0 <searchD+0x1f0>)
 800d4a0:	881b      	ldrh	r3, [r3, #0]
 800d4a2:	f3c3 2340 	ubfx	r3, r3, #9, #1
 800d4a6:	b2db      	uxtb	r3, r3
 800d4a8:	2b00      	cmp	r3, #0
 800d4aa:	d03f      	beq.n	800d52c <searchD+0x14c>
					if(((route[r_cnt-1] & route[r_cnt]) == 0x88) && (route[r_cnt] != 0xff) && (MF2.FLAG.HACCEL == 0)){
 800d4ac:	4b4a      	ldr	r3, [pc, #296]	; (800d5d8 <searchD+0x1f8>)
 800d4ae:	781b      	ldrb	r3, [r3, #0]
 800d4b0:	3b01      	subs	r3, #1
 800d4b2:	4a4b      	ldr	r2, [pc, #300]	; (800d5e0 <searchD+0x200>)
 800d4b4:	5cd2      	ldrb	r2, [r2, r3]
 800d4b6:	4b48      	ldr	r3, [pc, #288]	; (800d5d8 <searchD+0x1f8>)
 800d4b8:	781b      	ldrb	r3, [r3, #0]
 800d4ba:	4619      	mov	r1, r3
 800d4bc:	4b48      	ldr	r3, [pc, #288]	; (800d5e0 <searchD+0x200>)
 800d4be:	5c5b      	ldrb	r3, [r3, r1]
 800d4c0:	4013      	ands	r3, r2
 800d4c2:	b2db      	uxtb	r3, r3
 800d4c4:	2b88      	cmp	r3, #136	; 0x88
 800d4c6:	d115      	bne.n	800d4f4 <searchD+0x114>
 800d4c8:	4b43      	ldr	r3, [pc, #268]	; (800d5d8 <searchD+0x1f8>)
 800d4ca:	781b      	ldrb	r3, [r3, #0]
 800d4cc:	461a      	mov	r2, r3
 800d4ce:	4b44      	ldr	r3, [pc, #272]	; (800d5e0 <searchD+0x200>)
 800d4d0:	5c9b      	ldrb	r3, [r3, r2]
 800d4d2:	2bff      	cmp	r3, #255	; 0xff
 800d4d4:	d00e      	beq.n	800d4f4 <searchD+0x114>
 800d4d6:	4b41      	ldr	r3, [pc, #260]	; (800d5dc <searchD+0x1fc>)
 800d4d8:	881b      	ldrh	r3, [r3, #0]
 800d4da:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800d4de:	b2db      	uxtb	r3, r3
 800d4e0:	2b00      	cmp	r3, #0
 800d4e2:	d107      	bne.n	800d4f4 <searchD+0x114>
						one_sectionA();
 800d4e4:	f7f8 fb82 	bl	8005bec <one_sectionA>
						MF2.FLAG.HACCEL = 1;
 800d4e8:	4a3c      	ldr	r2, [pc, #240]	; (800d5dc <searchD+0x1fc>)
 800d4ea:	8813      	ldrh	r3, [r2, #0]
 800d4ec:	f043 0302 	orr.w	r3, r3, #2
 800d4f0:	8013      	strh	r3, [r2, #0]
 800d4f2:	e01a      	b.n	800d52a <searchD+0x14a>
					}
					else if((route[r_cnt] & 0x55) && (MF2.FLAG.HACCEL)){
 800d4f4:	4b38      	ldr	r3, [pc, #224]	; (800d5d8 <searchD+0x1f8>)
 800d4f6:	781b      	ldrb	r3, [r3, #0]
 800d4f8:	461a      	mov	r2, r3
 800d4fa:	4b39      	ldr	r3, [pc, #228]	; (800d5e0 <searchD+0x200>)
 800d4fc:	5c9b      	ldrb	r3, [r3, r2]
 800d4fe:	f003 0355 	and.w	r3, r3, #85	; 0x55
 800d502:	2b00      	cmp	r3, #0
 800d504:	d00e      	beq.n	800d524 <searchD+0x144>
 800d506:	4b35      	ldr	r3, [pc, #212]	; (800d5dc <searchD+0x1fc>)
 800d508:	881b      	ldrh	r3, [r3, #0]
 800d50a:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800d50e:	b2db      	uxtb	r3, r3
 800d510:	2b00      	cmp	r3, #0
 800d512:	d007      	beq.n	800d524 <searchD+0x144>
						one_sectionD();
 800d514:	f7f8 fbd0 	bl	8005cb8 <one_sectionD>
						MF2.FLAG.HACCEL = 0;
 800d518:	4a30      	ldr	r2, [pc, #192]	; (800d5dc <searchD+0x1fc>)
 800d51a:	8813      	ldrh	r3, [r2, #0]
 800d51c:	f36f 0341 	bfc	r3, #1, #1
 800d520:	8013      	strh	r3, [r2, #0]
 800d522:	e002      	b.n	800d52a <searchD+0x14a>
					}else{
						one_sectionU();
 800d524:	f7f8 fd02 	bl	8005f2c <one_sectionU>
					if(((route[r_cnt-1] & route[r_cnt]) == 0x88) && (route[r_cnt] != 0xff) && (MF2.FLAG.HACCEL == 0)){
 800d528:	e003      	b.n	800d532 <searchD+0x152>
 800d52a:	e002      	b.n	800d532 <searchD+0x152>
					}
				}else{
					one_sectionU();
 800d52c:	f7f8 fcfe 	bl	8005f2c <one_sectionU>
				}
				break;
 800d530:	e016      	b.n	800d560 <searchD+0x180>
 800d532:	e015      	b.n	800d560 <searchD+0x180>
			//----a右折スラローム----
			case 0x44:
				slalom_R90();
 800d534:	f7f8 ffa4 	bl	8006480 <slalom_R90>
				break;
 800d538:	e012      	b.n	800d560 <searchD+0x180>
			//----180回転----
			case 0x22:
				half_sectionD();
 800d53a:	f7f8 faf1 	bl	8005b20 <half_sectionD>
				rotate_180();
 800d53e:	f7f8 fec7 	bl	80062d0 <rotate_180>
				if(wall_info & 0x88){
 800d542:	4b24      	ldr	r3, [pc, #144]	; (800d5d4 <searchD+0x1f4>)
 800d544:	781b      	ldrb	r3, [r3, #0]
 800d546:	f003 0388 	and.w	r3, r3, #136	; 0x88
 800d54a:	2b00      	cmp	r3, #0
 800d54c:	d002      	beq.n	800d554 <searchD+0x174>
					set_position();
 800d54e:	f7f8 f991 	bl	8005874 <set_position>
				}else{
					half_sectionA();
				}
				break;
 800d552:	e005      	b.n	800d560 <searchD+0x180>
					half_sectionA();
 800d554:	f7f8 fa9a 	bl	8005a8c <half_sectionA>
				break;
 800d558:	e002      	b.n	800d560 <searchD+0x180>
			//----a左折スラローム----
			case 0x11:
				slalom_L90();
 800d55a:	f7f9 f875 	bl	8006648 <slalom_L90>
				break;
 800d55e:	bf00      	nop
		}
		adv_pos();
 800d560:	f000 fc24 	bl	800ddac <adv_pos>
		if(!MF.FLAG.SCND)conf_route();
 800d564:	4b1a      	ldr	r3, [pc, #104]	; (800d5d0 <searchD+0x1f0>)
 800d566:	881b      	ldrh	r3, [r3, #0]
 800d568:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800d56c:	b2db      	uxtb	r3, r3
 800d56e:	2b00      	cmp	r3, #0
 800d570:	d101      	bne.n	800d576 <searchD+0x196>
 800d572:	f000 fc55 	bl	800de20 <conf_route>

	}while((mouse.x != goal_x) || (mouse.y != goal_y));
 800d576:	4b1b      	ldr	r3, [pc, #108]	; (800d5e4 <searchD+0x204>)
 800d578:	781b      	ldrb	r3, [r3, #0]
 800d57a:	b2da      	uxtb	r2, r3
 800d57c:	4b1a      	ldr	r3, [pc, #104]	; (800d5e8 <searchD+0x208>)
 800d57e:	781b      	ldrb	r3, [r3, #0]
 800d580:	429a      	cmp	r2, r3
 800d582:	f47f af71 	bne.w	800d468 <searchD+0x88>
 800d586:	4b17      	ldr	r3, [pc, #92]	; (800d5e4 <searchD+0x204>)
 800d588:	785b      	ldrb	r3, [r3, #1]
 800d58a:	b2da      	uxtb	r2, r3
 800d58c:	4b17      	ldr	r3, [pc, #92]	; (800d5ec <searchD+0x20c>)
 800d58e:	781b      	ldrb	r3, [r3, #0]
 800d590:	429a      	cmp	r2, r3
 800d592:	f47f af69 	bne.w	800d468 <searchD+0x88>

	half_sectionD();
 800d596:	f7f8 fac3 	bl	8005b20 <half_sectionD>

	HAL_Delay(500);
 800d59a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800d59e:	f7f3 fd3d 	bl	800101c <HAL_Delay>
	rotate_180();											//180度回転
 800d5a2:	f7f8 fe95 	bl	80062d0 <rotate_180>
	driveC2(SETPOS_BACK);         //a尻を当てる程度に後退。回転後に停止する
 800d5a6:	2064      	movs	r0, #100	; 0x64
 800d5a8:	f7f7 ff16 	bl	80053d8 <driveC2>
	degree_z = target_degree_z;
 800d5ac:	4b10      	ldr	r3, [pc, #64]	; (800d5f0 <searchD+0x210>)
 800d5ae:	681b      	ldr	r3, [r3, #0]
 800d5b0:	4a10      	ldr	r2, [pc, #64]	; (800d5f4 <searchD+0x214>)
 800d5b2:	6013      	str	r3, [r2, #0]
	start_mode = 0;
 800d5b4:	4b10      	ldr	r3, [pc, #64]	; (800d5f8 <searchD+0x218>)
 800d5b6:	2200      	movs	r2, #0
 800d5b8:	701a      	strb	r2, [r3, #0]

	if(!MF.FLAG.SCND){
 800d5ba:	4b05      	ldr	r3, [pc, #20]	; (800d5d0 <searchD+0x1f0>)
 800d5bc:	881b      	ldrh	r3, [r3, #0]
 800d5be:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800d5c2:	b2db      	uxtb	r3, r3
 800d5c4:	2b00      	cmp	r3, #0
 800d5c6:	d101      	bne.n	800d5cc <searchD+0x1ec>
		store_map_in_eeprom();
 800d5c8:	f002 fb26 	bl	800fc18 <store_map_in_eeprom>
	}
}
 800d5cc:	bf00      	nop
 800d5ce:	bd80      	pop	{r7, pc}
 800d5d0:	20000f68 	.word	0x20000f68
 800d5d4:	200002c8 	.word	0x200002c8
 800d5d8:	200015d0 	.word	0x200015d0
 800d5dc:	20000f64 	.word	0x20000f64
 800d5e0:	20000c54 	.word	0x20000c54
 800d5e4:	20000c0c 	.word	0x20000c0c
 800d5e8:	20000bb0 	.word	0x20000bb0
 800d5ec:	20000b4c 	.word	0x20000b4c
 800d5f0:	20000bf8 	.word	0x20000bf8
 800d5f4:	20000b5c 	.word	0x20000b5c
 800d5f8:	200015c8 	.word	0x200015c8

0800d5fc <searchE>:
//searchE
//a未知壁を含むマスを仮goal座標とし、スラローム連続走行で全マスに進む。仮goalを連続的に変化させる。全面探索終了後は半区画減速
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void searchE(){
 800d5fc:	b580      	push	{r7, lr}
 800d5fe:	b082      	sub	sp, #8
 800d600:	af00      	add	r7, sp, #0

	int i = 0;
 800d602:	2300      	movs	r3, #0
 800d604:	607b      	str	r3, [r7, #4]
	int j = 0;
 800d606:	2300      	movs	r3, #0
 800d608:	603b      	str	r3, [r7, #0]
	do {
		if(i == 0){
 800d60a:	687b      	ldr	r3, [r7, #4]
 800d60c:	2b00      	cmp	r3, #0
 800d60e:	d111      	bne.n	800d634 <searchE+0x38>
			//====a前に壁が無い想定で問答無用で前進====
			half_sectionA();
 800d610:	f7f8 fa3c 	bl	8005a8c <half_sectionA>
			adv_pos();
 800d614:	f000 fbca 	bl	800ddac <adv_pos>
			write_map();														//地図の初期化
 800d618:	f000 fc8c 	bl	800df34 <write_map>

			//====a歩数等初期化====
			m_step = r_cnt = 0;													//歩数と経路カウンタの初期化
 800d61c:	4b44      	ldr	r3, [pc, #272]	; (800d730 <searchE+0x134>)
 800d61e:	2200      	movs	r2, #0
 800d620:	701a      	strb	r2, [r3, #0]
 800d622:	4b44      	ldr	r3, [pc, #272]	; (800d734 <searchE+0x138>)
 800d624:	2200      	movs	r2, #0
 800d626:	801a      	strh	r2, [r3, #0]
			find_pregoal();														//仮goalまでの歩数マップの初期化
 800d628:	f001 fb72 	bl	800ed10 <find_pregoal>
			make_smap2();
 800d62c:	f001 fd64 	bl	800f0f8 <make_smap2>
			make_route();														//最短経路探索(route配列に動作が格納される)
 800d630:	f001 fa20 	bl	800ea74 <make_route>
		}

		//====a探索走行====
		do {
			//----a進行----
			switch (route[r_cnt++]) {										//route配列によって進行を決定。経路カウンタを進める
 800d634:	4b3e      	ldr	r3, [pc, #248]	; (800d730 <searchE+0x134>)
 800d636:	781b      	ldrb	r3, [r3, #0]
 800d638:	1c5a      	adds	r2, r3, #1
 800d63a:	b2d1      	uxtb	r1, r2
 800d63c:	4a3c      	ldr	r2, [pc, #240]	; (800d730 <searchE+0x134>)
 800d63e:	7011      	strb	r1, [r2, #0]
 800d640:	461a      	mov	r2, r3
 800d642:	4b3d      	ldr	r3, [pc, #244]	; (800d738 <searchE+0x13c>)
 800d644:	5c9b      	ldrb	r3, [r3, r2]
 800d646:	2b22      	cmp	r3, #34	; 0x22
 800d648:	d00e      	beq.n	800d668 <searchE+0x6c>
 800d64a:	2b22      	cmp	r3, #34	; 0x22
 800d64c:	dc02      	bgt.n	800d654 <searchE+0x58>
 800d64e:	2b11      	cmp	r3, #17
 800d650:	d01a      	beq.n	800d688 <searchE+0x8c>
 800d652:	e01c      	b.n	800d68e <searchE+0x92>
 800d654:	2b44      	cmp	r3, #68	; 0x44
 800d656:	d004      	beq.n	800d662 <searchE+0x66>
 800d658:	2b88      	cmp	r3, #136	; 0x88
 800d65a:	d118      	bne.n	800d68e <searchE+0x92>
				//----a前進----
			case 0x88:
				one_sectionU();
 800d65c:	f7f8 fc66 	bl	8005f2c <one_sectionU>
				break;
 800d660:	e015      	b.n	800d68e <searchE+0x92>
				//----a右折----
			case 0x44:
				slalom_R90();
 800d662:	f7f8 ff0d 	bl	8006480 <slalom_R90>
				break;
 800d666:	e012      	b.n	800d68e <searchE+0x92>
				//----180回転----
			case 0x22:
				half_sectionD();
 800d668:	f7f8 fa5a 	bl	8005b20 <half_sectionD>
				rotate_180();
 800d66c:	f7f8 fe30 	bl	80062d0 <rotate_180>
				if(wall_info & 0x88){
 800d670:	4b32      	ldr	r3, [pc, #200]	; (800d73c <searchE+0x140>)
 800d672:	781b      	ldrb	r3, [r3, #0]
 800d674:	f003 0388 	and.w	r3, r3, #136	; 0x88
 800d678:	2b00      	cmp	r3, #0
 800d67a:	d002      	beq.n	800d682 <searchE+0x86>
					set_position();
 800d67c:	f7f8 f8fa 	bl	8005874 <set_position>
				}else{
					half_sectionA();
				}
				break;
 800d680:	e005      	b.n	800d68e <searchE+0x92>
					half_sectionA();
 800d682:	f7f8 fa03 	bl	8005a8c <half_sectionA>
				break;
 800d686:	e002      	b.n	800d68e <searchE+0x92>
				//----a左折----
			case 0x11:
				slalom_L90();
 800d688:	f7f8 ffde 	bl	8006648 <slalom_L90>
				break;
 800d68c:	bf00      	nop
			}
			adv_pos();														//aマイクロマウス内部位置情報でも前進処理
 800d68e:	f000 fb8d 	bl	800ddac <adv_pos>
			j++;
 800d692:	683b      	ldr	r3, [r7, #0]
 800d694:	3301      	adds	r3, #1
 800d696:	603b      	str	r3, [r7, #0]
			if (j > 150) break;												//a移動マス数が250以上になった場合全面探索を中止
 800d698:	683b      	ldr	r3, [r7, #0]
 800d69a:	2b96      	cmp	r3, #150	; 0x96
 800d69c:	dc0e      	bgt.n	800d6bc <searchE+0xc0>

		} while ((mouse.x != pregoal_x) || (mouse.y != pregoal_y));			//a現在座標と仮goal座標が等しくなるまで実行
 800d69e:	4b28      	ldr	r3, [pc, #160]	; (800d740 <searchE+0x144>)
 800d6a0:	781b      	ldrb	r3, [r3, #0]
 800d6a2:	b2da      	uxtb	r2, r3
 800d6a4:	4b27      	ldr	r3, [pc, #156]	; (800d744 <searchE+0x148>)
 800d6a6:	781b      	ldrb	r3, [r3, #0]
 800d6a8:	429a      	cmp	r2, r3
 800d6aa:	d1c3      	bne.n	800d634 <searchE+0x38>
 800d6ac:	4b24      	ldr	r3, [pc, #144]	; (800d740 <searchE+0x144>)
 800d6ae:	785b      	ldrb	r3, [r3, #1]
 800d6b0:	b2da      	uxtb	r2, r3
 800d6b2:	4b25      	ldr	r3, [pc, #148]	; (800d748 <searchE+0x14c>)
 800d6b4:	781b      	ldrb	r3, [r3, #0]
 800d6b6:	429a      	cmp	r2, r3
 800d6b8:	d1bc      	bne.n	800d634 <searchE+0x38>
 800d6ba:	e000      	b.n	800d6be <searchE+0xc2>
			if (j > 150) break;												//a移動マス数が250以上になった場合全面探索を中止
 800d6bc:	bf00      	nop

		get_wall_info();													//a壁情報の初期化, 後壁はなくなる
 800d6be:	f002 fb5d 	bl	800fd7c <get_wall_info>
		write_map();														//a地図の初期化
 800d6c2:	f000 fc37 	bl	800df34 <write_map>
		//printf("get pregoal, x = %d, y = %d\n", mouse.x, mouse.y);

		//====a歩数等初期化====
		m_step = r_cnt = 0;													//a歩数と経路カウンタの初期化
 800d6c6:	4b1a      	ldr	r3, [pc, #104]	; (800d730 <searchE+0x134>)
 800d6c8:	2200      	movs	r2, #0
 800d6ca:	701a      	strb	r2, [r3, #0]
 800d6cc:	4b19      	ldr	r3, [pc, #100]	; (800d734 <searchE+0x138>)
 800d6ce:	2200      	movs	r2, #0
 800d6d0:	801a      	strh	r2, [r3, #0]

		find_pregoal();														//a仮goalまでの歩数マップの初期化
 800d6d2:	f001 fb1d 	bl	800ed10 <find_pregoal>
		if(MF2.FLAG.ALLMAP) {
 800d6d6:	4b1d      	ldr	r3, [pc, #116]	; (800d74c <searchE+0x150>)
 800d6d8:	881b      	ldrh	r3, [r3, #0]
 800d6da:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800d6de:	b2db      	uxtb	r3, r3
 800d6e0:	2b00      	cmp	r3, #0
 800d6e2:	d002      	beq.n	800d6ea <searchE+0xee>
			//printf("get MF2.FLAG.ALLMAP\n");
			half_sectionD();
 800d6e4:	f7f8 fa1c 	bl	8005b20 <half_sectionD>
			break;
 800d6e8:	e00e      	b.n	800d708 <searchE+0x10c>
		}
		make_smap2();
 800d6ea:	f001 fd05 	bl	800f0f8 <make_smap2>
		make_route();														//a最短経路探索(route配列に動作が格納される)
 800d6ee:	f001 f9c1 	bl	800ea74 <make_route>

		if (j > 150) {
 800d6f2:	683b      	ldr	r3, [r7, #0]
 800d6f4:	2b96      	cmp	r3, #150	; 0x96
 800d6f6:	dc06      	bgt.n	800d706 <searchE+0x10a>
			break;															//a移動マス数が250以上になった場合全面探索を中止
		}
		i++;
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	3301      	adds	r3, #1
 800d6fc:	607b      	str	r3, [r7, #4]

	} while (i < 150);														//a仮goalへの到着が130回以上になった場合全面探索を中止
 800d6fe:	687b      	ldr	r3, [r7, #4]
 800d700:	2b95      	cmp	r3, #149	; 0x95
 800d702:	dd82      	ble.n	800d60a <searchE+0xe>
 800d704:	e000      	b.n	800d708 <searchE+0x10c>
			break;															//a移動マス数が250以上になった場合全面探索を中止
 800d706:	bf00      	nop

	HAL_Delay(500);
 800d708:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800d70c:	f7f3 fc86 	bl	800101c <HAL_Delay>
	rotate_180();											//180度回転
 800d710:	f7f8 fdde 	bl	80062d0 <rotate_180>

	if(!MF.FLAG.SCND){
 800d714:	4b0e      	ldr	r3, [pc, #56]	; (800d750 <searchE+0x154>)
 800d716:	881b      	ldrh	r3, [r3, #0]
 800d718:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800d71c:	b2db      	uxtb	r3, r3
 800d71e:	2b00      	cmp	r3, #0
 800d720:	d101      	bne.n	800d726 <searchE+0x12a>
		store_map_in_eeprom();
 800d722:	f002 fa79 	bl	800fc18 <store_map_in_eeprom>
	}
}
 800d726:	bf00      	nop
 800d728:	3708      	adds	r7, #8
 800d72a:	46bd      	mov	sp, r7
 800d72c:	bd80      	pop	{r7, pc}
 800d72e:	bf00      	nop
 800d730:	200015d0 	.word	0x200015d0
 800d734:	2000034e 	.word	0x2000034e
 800d738:	20000c54 	.word	0x20000c54
 800d73c:	200002c8 	.word	0x200002c8
 800d740:	20000c0c 	.word	0x20000c0c
 800d744:	20000d5c 	.word	0x20000d5c
 800d748:	200012a1 	.word	0x200012a1
 800d74c:	20000f64 	.word	0x20000f64
 800d750:	20000f68 	.word	0x20000f68

0800d754 <searchF3>:
//searchF3
//aスラローム(+既知区間加速探索走行)+pass圧縮+機体方向&位置未更新+半区画ベースでgoal座標に進む
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void searchF3(){
 800d754:	b580      	push	{r7, lr}
 800d756:	b082      	sub	sp, #8
 800d758:	af00      	add	r7, sp, #0

	if(MF.FLAG.SCND){
 800d75a:	4b59      	ldr	r3, [pc, #356]	; (800d8c0 <searchF3+0x16c>)
 800d75c:	881b      	ldrh	r3, [r3, #0]
 800d75e:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800d762:	b2db      	uxtb	r3, r3
 800d764:	2b00      	cmp	r3, #0
 800d766:	d001      	beq.n	800d76c <searchF3+0x18>
		load_map_from_eeprom();
 800d768:	f002 fa90 	bl	800fc8c <load_map_from_eeprom>
	}

	//====a1区画前進====
	adv_pos();
 800d76c:	f000 fb1e 	bl	800ddac <adv_pos>

	//====a歩数マップ・経路作成====
	make_smap();											//a歩数マップ作成
 800d770:	f000 fde2 	bl	800e338 <make_smap>
	make_route();											//a最短経路探索（route配列に動作が格納される）
 800d774:	f001 f97e 	bl	800ea74 <make_route>

	//====pass圧縮====
	p_cnt = 0;												//a経路カウンタの初期化
 800d778:	4b52      	ldr	r3, [pc, #328]	; (800d8c4 <searchF3+0x170>)
 800d77a:	2200      	movs	r2, #0
 800d77c:	701a      	strb	r2, [r3, #0]
	pass_route2();
 800d77e:	f001 fddf 	bl	800f340 <pass_route2>

	//====a前に壁が無い想定で問答無用で前進====
	start_sectionA();
 800d782:	f7f8 f8af 	bl	80058e4 <start_sectionA>

	MF2.FLAG.HACCEL = 0;
 800d786:	4a50      	ldr	r2, [pc, #320]	; (800d8c8 <searchF3+0x174>)
 800d788:	8813      	ldrh	r3, [r2, #0]
 800d78a:	f36f 0341 	bfc	r3, #1, #1
 800d78e:	8013      	strh	r3, [r2, #0]

	//====a探索走行====
	do{
		//----a進行----
		switch(pass[p_cnt++]){								//route配列によって進行を決定。経路カウンタを進める
 800d790:	4b4c      	ldr	r3, [pc, #304]	; (800d8c4 <searchF3+0x170>)
 800d792:	781b      	ldrb	r3, [r3, #0]
 800d794:	1c5a      	adds	r2, r3, #1
 800d796:	b2d1      	uxtb	r1, r2
 800d798:	4a4a      	ldr	r2, [pc, #296]	; (800d8c4 <searchF3+0x170>)
 800d79a:	7011      	strb	r1, [r2, #0]
 800d79c:	461a      	mov	r2, r3
 800d79e:	4b4b      	ldr	r3, [pc, #300]	; (800d8cc <searchF3+0x178>)
 800d7a0:	569b      	ldrsb	r3, [r3, r2]
 800d7a2:	f113 0f04 	cmn.w	r3, #4
 800d7a6:	d01e      	beq.n	800d7e6 <searchF3+0x92>
 800d7a8:	f113 0f04 	cmn.w	r3, #4
 800d7ac:	dc09      	bgt.n	800d7c2 <searchF3+0x6e>
 800d7ae:	f113 0f06 	cmn.w	r3, #6
 800d7b2:	d01e      	beq.n	800d7f2 <searchF3+0x9e>
 800d7b4:	f113 0f06 	cmn.w	r3, #6
 800d7b8:	dc18      	bgt.n	800d7ec <searchF3+0x98>
 800d7ba:	f113 0f72 	cmn.w	r3, #114	; 0x72
 800d7be:	d01b      	beq.n	800d7f8 <searchF3+0xa4>
 800d7c0:	e01f      	b.n	800d802 <searchF3+0xae>
 800d7c2:	f113 0f02 	cmn.w	r3, #2
 800d7c6:	d008      	beq.n	800d7da <searchF3+0x86>
 800d7c8:	f113 0f02 	cmn.w	r3, #2
 800d7cc:	db08      	blt.n	800d7e0 <searchF3+0x8c>
 800d7ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d7d2:	d116      	bne.n	800d802 <searchF3+0xae>
			//----a右スラローム----
			case -1:
				slalom_R90();
 800d7d4:	f7f8 fe54 	bl	8006480 <slalom_R90>
				break;
 800d7d8:	e04c      	b.n	800d874 <searchF3+0x120>

			//----a左スラローム----
			case -2:
				slalom_L90();
 800d7da:	f7f8 ff35 	bl	8006648 <slalom_L90>
				break;
 800d7de:	e049      	b.n	800d874 <searchF3+0x120>

			//----a大回り右90----
			case -3:
				Lslalom_R90();
 800d7e0:	f7f9 f80c 	bl	80067fc <Lslalom_R90>
				break;
 800d7e4:	e046      	b.n	800d874 <searchF3+0x120>

			//----a大回り左90----
			case -4:
				Lslalom_L90();
 800d7e6:	f7f9 f8e1 	bl	80069ac <Lslalom_L90>
				break;
 800d7ea:	e043      	b.n	800d874 <searchF3+0x120>

			//----a大回り右180----
			case -5:
				Lslalom_R180();
 800d7ec:	f7f9 f9aa 	bl	8006b44 <Lslalom_R180>
				break;
 800d7f0:	e040      	b.n	800d874 <searchF3+0x120>

			//----a大回り左180----
			case -6:
				Lslalom_L180();
 800d7f2:	f7f9 fa8d 	bl	8006d10 <Lslalom_L180>
				break;
 800d7f6:	e03d      	b.n	800d874 <searchF3+0x120>

			//----pass配列最後(なお本来呼び出される前にゴールする)----
			case -114:
				rotate_180();
 800d7f8:	f7f8 fd6a 	bl	80062d0 <rotate_180>
				rotate_180();
 800d7fc:	f7f8 fd68 	bl	80062d0 <rotate_180>
				while(1);
 800d800:	e7fe      	b.n	800d800 <searchF3+0xac>
				break;

			//----a前進----
			default:
				if(pass[p_cnt-1] < 4){
 800d802:	4b30      	ldr	r3, [pc, #192]	; (800d8c4 <searchF3+0x170>)
 800d804:	781b      	ldrb	r3, [r3, #0]
 800d806:	3b01      	subs	r3, #1
 800d808:	4a30      	ldr	r2, [pc, #192]	; (800d8cc <searchF3+0x178>)
 800d80a:	56d3      	ldrsb	r3, [r2, r3]
 800d80c:	2b03      	cmp	r3, #3
 800d80e:	dc11      	bgt.n	800d834 <searchF3+0xe0>
					for(int k = 0; k < pass[p_cnt-1]; k++){
 800d810:	2300      	movs	r3, #0
 800d812:	607b      	str	r3, [r7, #4]
 800d814:	e004      	b.n	800d820 <searchF3+0xcc>
						half_sectionU();
 800d816:	f7f8 f9c9 	bl	8005bac <half_sectionU>
					for(int k = 0; k < pass[p_cnt-1]; k++){
 800d81a:	687b      	ldr	r3, [r7, #4]
 800d81c:	3301      	adds	r3, #1
 800d81e:	607b      	str	r3, [r7, #4]
 800d820:	4b28      	ldr	r3, [pc, #160]	; (800d8c4 <searchF3+0x170>)
 800d822:	781b      	ldrb	r3, [r3, #0]
 800d824:	3b01      	subs	r3, #1
 800d826:	4a29      	ldr	r2, [pc, #164]	; (800d8cc <searchF3+0x178>)
 800d828:	56d3      	ldrsb	r3, [r2, r3]
 800d82a:	461a      	mov	r2, r3
 800d82c:	687b      	ldr	r3, [r7, #4]
 800d82e:	4293      	cmp	r3, r2
 800d830:	dbf1      	blt.n	800d816 <searchF3+0xc2>
						half_sectionU();
					}
					one_sectionD();
					MF2.FLAG.HACCEL = 0;
				}
				break;
 800d832:	e01e      	b.n	800d872 <searchF3+0x11e>
					one_sectionA();
 800d834:	f7f8 f9da 	bl	8005bec <one_sectionA>
					MF2.FLAG.HACCEL = 1;
 800d838:	4a23      	ldr	r2, [pc, #140]	; (800d8c8 <searchF3+0x174>)
 800d83a:	8813      	ldrh	r3, [r2, #0]
 800d83c:	f043 0302 	orr.w	r3, r3, #2
 800d840:	8013      	strh	r3, [r2, #0]
					for(k = 0; k < pass[p_cnt-1]-4; k++){
 800d842:	2300      	movs	r3, #0
 800d844:	603b      	str	r3, [r7, #0]
 800d846:	e004      	b.n	800d852 <searchF3+0xfe>
						half_sectionU();
 800d848:	f7f8 f9b0 	bl	8005bac <half_sectionU>
					for(k = 0; k < pass[p_cnt-1]-4; k++){
 800d84c:	683b      	ldr	r3, [r7, #0]
 800d84e:	3301      	adds	r3, #1
 800d850:	603b      	str	r3, [r7, #0]
 800d852:	4b1c      	ldr	r3, [pc, #112]	; (800d8c4 <searchF3+0x170>)
 800d854:	781b      	ldrb	r3, [r3, #0]
 800d856:	3b01      	subs	r3, #1
 800d858:	4a1c      	ldr	r2, [pc, #112]	; (800d8cc <searchF3+0x178>)
 800d85a:	56d3      	ldrsb	r3, [r2, r3]
 800d85c:	3b04      	subs	r3, #4
 800d85e:	683a      	ldr	r2, [r7, #0]
 800d860:	429a      	cmp	r2, r3
 800d862:	dbf1      	blt.n	800d848 <searchF3+0xf4>
					one_sectionD();
 800d864:	f7f8 fa28 	bl	8005cb8 <one_sectionD>
					MF2.FLAG.HACCEL = 0;
 800d868:	4a17      	ldr	r2, [pc, #92]	; (800d8c8 <searchF3+0x174>)
 800d86a:	8813      	ldrh	r3, [r2, #0]
 800d86c:	f36f 0341 	bfc	r3, #1, #1
 800d870:	8013      	strh	r3, [r2, #0]
				break;
 800d872:	bf00      	nop
		}
//		adv_pos2(pass[p_cnt-1]);

	}while(pass[p_cnt] != -114);
 800d874:	4b13      	ldr	r3, [pc, #76]	; (800d8c4 <searchF3+0x170>)
 800d876:	781b      	ldrb	r3, [r3, #0]
 800d878:	461a      	mov	r2, r3
 800d87a:	4b14      	ldr	r3, [pc, #80]	; (800d8cc <searchF3+0x178>)
 800d87c:	569b      	ldrsb	r3, [r3, r2]
 800d87e:	f113 0f72 	cmn.w	r3, #114	; 0x72
 800d882:	d185      	bne.n	800d790 <searchF3+0x3c>

	mouse.x = goal_x;
 800d884:	4b12      	ldr	r3, [pc, #72]	; (800d8d0 <searchF3+0x17c>)
 800d886:	781a      	ldrb	r2, [r3, #0]
 800d888:	4b12      	ldr	r3, [pc, #72]	; (800d8d4 <searchF3+0x180>)
 800d88a:	701a      	strb	r2, [r3, #0]
	mouse.y = goal_y;
 800d88c:	4b12      	ldr	r3, [pc, #72]	; (800d8d8 <searchF3+0x184>)
 800d88e:	781a      	ldrb	r2, [r3, #0]
 800d890:	4b10      	ldr	r3, [pc, #64]	; (800d8d4 <searchF3+0x180>)
 800d892:	705a      	strb	r2, [r3, #1]

	half_sectionD();
 800d894:	f7f8 f944 	bl	8005b20 <half_sectionD>

	HAL_Delay(500);
 800d898:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800d89c:	f7f3 fbbe 	bl	800101c <HAL_Delay>
	rotate_180();											//180度回転
 800d8a0:	f7f8 fd16 	bl	80062d0 <rotate_180>
	driveC2(SETPOS_BACK);         //a尻を当てる程度に後退。回転後に停止する
 800d8a4:	2064      	movs	r0, #100	; 0x64
 800d8a6:	f7f7 fd97 	bl	80053d8 <driveC2>
	degree_z = target_degree_z;
 800d8aa:	4b0c      	ldr	r3, [pc, #48]	; (800d8dc <searchF3+0x188>)
 800d8ac:	681b      	ldr	r3, [r3, #0]
 800d8ae:	4a0c      	ldr	r2, [pc, #48]	; (800d8e0 <searchF3+0x18c>)
 800d8b0:	6013      	str	r3, [r2, #0]
	start_mode = 0;
 800d8b2:	4b0c      	ldr	r3, [pc, #48]	; (800d8e4 <searchF3+0x190>)
 800d8b4:	2200      	movs	r2, #0
 800d8b6:	701a      	strb	r2, [r3, #0]

}
 800d8b8:	bf00      	nop
 800d8ba:	3708      	adds	r7, #8
 800d8bc:	46bd      	mov	sp, r7
 800d8be:	bd80      	pop	{r7, pc}
 800d8c0:	20000f68 	.word	0x20000f68
 800d8c4:	200002b0 	.word	0x200002b0
 800d8c8:	20000f64 	.word	0x20000f64
 800d8cc:	20000350 	.word	0x20000350
 800d8d0:	20000bb0 	.word	0x20000bb0
 800d8d4:	20000c0c 	.word	0x20000c0c
 800d8d8:	20000b4c 	.word	0x20000b4c
 800d8dc:	20000bf8 	.word	0x20000bf8
 800d8e0:	20000b5c 	.word	0x20000b5c
 800d8e4:	200015c8 	.word	0x200015c8

0800d8e8 <searchF4>:
//searchF4
//aスラローム(+既知区間加速探索走行)+pass圧縮+機体方向&位置未更新+半区画ベース+斜め走行でgoal座標に進む
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void searchF4(){
 800d8e8:	b580      	push	{r7, lr}
 800d8ea:	b082      	sub	sp, #8
 800d8ec:	af00      	add	r7, sp, #0

	if(MF.FLAG.SCND){
 800d8ee:	4bd0      	ldr	r3, [pc, #832]	; (800dc30 <searchF4+0x348>)
 800d8f0:	881b      	ldrh	r3, [r3, #0]
 800d8f2:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800d8f6:	b2db      	uxtb	r3, r3
 800d8f8:	2b00      	cmp	r3, #0
 800d8fa:	d001      	beq.n	800d900 <searchF4+0x18>
		load_map_from_eeprom();
 800d8fc:	f002 f9c6 	bl	800fc8c <load_map_from_eeprom>
	}

	//====a1区画前進====
	adv_pos();
 800d900:	f000 fa54 	bl	800ddac <adv_pos>

	//====a歩数マップ・経路作成====
	full_led_write(RED);
 800d904:	2001      	movs	r0, #1
 800d906:	f002 faad 	bl	800fe64 <full_led_write>
	make_smap();											//a歩数マップ作成
 800d90a:	f000 fd15 	bl	800e338 <make_smap>
	make_route();											//a最短経路探索（route配列に動作が格納される）
 800d90e:	f001 f8b1 	bl	800ea74 <make_route>

	//====pass圧縮====
	p_cnt = 0;												//a経路カウンタの初期化
 800d912:	4bc8      	ldr	r3, [pc, #800]	; (800dc34 <searchF4+0x34c>)
 800d914:	2200      	movs	r2, #0
 800d916:	701a      	strb	r2, [r3, #0]
	pass_route3();
 800d918:	f001 fe26 	bl	800f568 <pass_route3>

	if(start_mode == 0 || start_mode == 1){					//a大回りではない場合、先頭の半区画直進をスキップ
 800d91c:	4bc6      	ldr	r3, [pc, #792]	; (800dc38 <searchF4+0x350>)
 800d91e:	781b      	ldrb	r3, [r3, #0]
 800d920:	b2db      	uxtb	r3, r3
 800d922:	2b00      	cmp	r3, #0
 800d924:	d004      	beq.n	800d930 <searchF4+0x48>
 800d926:	4bc4      	ldr	r3, [pc, #784]	; (800dc38 <searchF4+0x350>)
 800d928:	781b      	ldrb	r3, [r3, #0]
 800d92a:	b2db      	uxtb	r3, r3
 800d92c:	2b01      	cmp	r3, #1
 800d92e:	d109      	bne.n	800d944 <searchF4+0x5c>
		pass[p_cnt]--;
 800d930:	4bc0      	ldr	r3, [pc, #768]	; (800dc34 <searchF4+0x34c>)
 800d932:	781b      	ldrb	r3, [r3, #0]
 800d934:	4ac1      	ldr	r2, [pc, #772]	; (800dc3c <searchF4+0x354>)
 800d936:	56d2      	ldrsb	r2, [r2, r3]
 800d938:	b2d2      	uxtb	r2, r2
 800d93a:	3a01      	subs	r2, #1
 800d93c:	b2d2      	uxtb	r2, r2
 800d93e:	b251      	sxtb	r1, r2
 800d940:	4abe      	ldr	r2, [pc, #760]	; (800dc3c <searchF4+0x354>)
 800d942:	54d1      	strb	r1, [r2, r3]
	}

	//====a前に壁が無い想定で問答無用で前進====
	start_sectionA();
 800d944:	f7f7 ffce 	bl	80058e4 <start_sectionA>

	MF2.FLAG.HACCEL = 0;
 800d948:	4abd      	ldr	r2, [pc, #756]	; (800dc40 <searchF4+0x358>)
 800d94a:	8813      	ldrh	r3, [r2, #0]
 800d94c:	f36f 0341 	bfc	r3, #1, #1
 800d950:	8013      	strh	r3, [r2, #0]
	MF.FLAG.XDIR = 1;
 800d952:	4ab7      	ldr	r2, [pc, #732]	; (800dc30 <searchF4+0x348>)
 800d954:	8813      	ldrh	r3, [r2, #0]
 800d956:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800d95a:	8013      	strh	r3, [r2, #0]
	//====a探索走行====
	do{
		//----a進行----
		switch(pass[p_cnt++]){								//route配列によって進行を決定。経路カウンタを進める
 800d95c:	4bb5      	ldr	r3, [pc, #724]	; (800dc34 <searchF4+0x34c>)
 800d95e:	781b      	ldrb	r3, [r3, #0]
 800d960:	1c5a      	adds	r2, r3, #1
 800d962:	b2d1      	uxtb	r1, r2
 800d964:	4ab3      	ldr	r2, [pc, #716]	; (800dc34 <searchF4+0x34c>)
 800d966:	7011      	strb	r1, [r2, #0]
 800d968:	461a      	mov	r2, r3
 800d96a:	4bb4      	ldr	r3, [pc, #720]	; (800dc3c <searchF4+0x354>)
 800d96c:	569b      	ldrsb	r3, [r3, r2]
 800d96e:	3372      	adds	r3, #114	; 0x72
 800d970:	2b71      	cmp	r3, #113	; 0x71
 800d972:	f200 811c 	bhi.w	800dbae <searchF4+0x2c6>
 800d976:	a201      	add	r2, pc, #4	; (adr r2, 800d97c <searchF4+0x94>)
 800d978:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d97c:	0800dba5 	.word	0x0800dba5
 800d980:	0800dbaf 	.word	0x0800dbaf
 800d984:	0800dbaf 	.word	0x0800dbaf
 800d988:	0800dbaf 	.word	0x0800dbaf
 800d98c:	0800dbaf 	.word	0x0800dbaf
 800d990:	0800dbaf 	.word	0x0800dbaf
 800d994:	0800dbaf 	.word	0x0800dbaf
 800d998:	0800dbaf 	.word	0x0800dbaf
 800d99c:	0800dbaf 	.word	0x0800dbaf
 800d9a0:	0800dbaf 	.word	0x0800dbaf
 800d9a4:	0800dbaf 	.word	0x0800dbaf
 800d9a8:	0800dbaf 	.word	0x0800dbaf
 800d9ac:	0800dbaf 	.word	0x0800dbaf
 800d9b0:	0800dbaf 	.word	0x0800dbaf
 800d9b4:	0800dbaf 	.word	0x0800dbaf
 800d9b8:	0800dbaf 	.word	0x0800dbaf
 800d9bc:	0800dbaf 	.word	0x0800dbaf
 800d9c0:	0800dbaf 	.word	0x0800dbaf
 800d9c4:	0800dbaf 	.word	0x0800dbaf
 800d9c8:	0800dbaf 	.word	0x0800dbaf
 800d9cc:	0800dbaf 	.word	0x0800dbaf
 800d9d0:	0800dbaf 	.word	0x0800dbaf
 800d9d4:	0800dbaf 	.word	0x0800dbaf
 800d9d8:	0800dbaf 	.word	0x0800dbaf
 800d9dc:	0800dbaf 	.word	0x0800dbaf
 800d9e0:	0800dbaf 	.word	0x0800dbaf
 800d9e4:	0800dbaf 	.word	0x0800dbaf
 800d9e8:	0800dbaf 	.word	0x0800dbaf
 800d9ec:	0800dbaf 	.word	0x0800dbaf
 800d9f0:	0800dbaf 	.word	0x0800dbaf
 800d9f4:	0800dbaf 	.word	0x0800dbaf
 800d9f8:	0800dbaf 	.word	0x0800dbaf
 800d9fc:	0800dbaf 	.word	0x0800dbaf
 800da00:	0800dbaf 	.word	0x0800dbaf
 800da04:	0800dbaf 	.word	0x0800dbaf
 800da08:	0800dbaf 	.word	0x0800dbaf
 800da0c:	0800dbaf 	.word	0x0800dbaf
 800da10:	0800dbaf 	.word	0x0800dbaf
 800da14:	0800dbaf 	.word	0x0800dbaf
 800da18:	0800dbaf 	.word	0x0800dbaf
 800da1c:	0800dbaf 	.word	0x0800dbaf
 800da20:	0800dbaf 	.word	0x0800dbaf
 800da24:	0800dbaf 	.word	0x0800dbaf
 800da28:	0800dbaf 	.word	0x0800dbaf
 800da2c:	0800dbaf 	.word	0x0800dbaf
 800da30:	0800dbaf 	.word	0x0800dbaf
 800da34:	0800dbaf 	.word	0x0800dbaf
 800da38:	0800dbaf 	.word	0x0800dbaf
 800da3c:	0800dbaf 	.word	0x0800dbaf
 800da40:	0800dbaf 	.word	0x0800dbaf
 800da44:	0800dbaf 	.word	0x0800dbaf
 800da48:	0800dbaf 	.word	0x0800dbaf
 800da4c:	0800dbaf 	.word	0x0800dbaf
 800da50:	0800dbaf 	.word	0x0800dbaf
 800da54:	0800dbaf 	.word	0x0800dbaf
 800da58:	0800dbaf 	.word	0x0800dbaf
 800da5c:	0800dbaf 	.word	0x0800dbaf
 800da60:	0800dbaf 	.word	0x0800dbaf
 800da64:	0800dbaf 	.word	0x0800dbaf
 800da68:	0800dbaf 	.word	0x0800dbaf
 800da6c:	0800dbaf 	.word	0x0800dbaf
 800da70:	0800dbaf 	.word	0x0800dbaf
 800da74:	0800dbaf 	.word	0x0800dbaf
 800da78:	0800dbaf 	.word	0x0800dbaf
 800da7c:	0800dbaf 	.word	0x0800dbaf
 800da80:	0800dbaf 	.word	0x0800dbaf
 800da84:	0800dbaf 	.word	0x0800dbaf
 800da88:	0800dbaf 	.word	0x0800dbaf
 800da8c:	0800dbaf 	.word	0x0800dbaf
 800da90:	0800dbaf 	.word	0x0800dbaf
 800da94:	0800dbaf 	.word	0x0800dbaf
 800da98:	0800dbaf 	.word	0x0800dbaf
 800da9c:	0800dbaf 	.word	0x0800dbaf
 800daa0:	0800dbaf 	.word	0x0800dbaf
 800daa4:	0800dbaf 	.word	0x0800dbaf
 800daa8:	0800dbaf 	.word	0x0800dbaf
 800daac:	0800dbaf 	.word	0x0800dbaf
 800dab0:	0800dbaf 	.word	0x0800dbaf
 800dab4:	0800dbaf 	.word	0x0800dbaf
 800dab8:	0800dbaf 	.word	0x0800dbaf
 800dabc:	0800dbaf 	.word	0x0800dbaf
 800dac0:	0800dbaf 	.word	0x0800dbaf
 800dac4:	0800dbaf 	.word	0x0800dbaf
 800dac8:	0800dbaf 	.word	0x0800dbaf
 800dacc:	0800dbaf 	.word	0x0800dbaf
 800dad0:	0800dbaf 	.word	0x0800dbaf
 800dad4:	0800dbaf 	.word	0x0800dbaf
 800dad8:	0800dbaf 	.word	0x0800dbaf
 800dadc:	0800dbaf 	.word	0x0800dbaf
 800dae0:	0800dbaf 	.word	0x0800dbaf
 800dae4:	0800dbaf 	.word	0x0800dbaf
 800dae8:	0800dbaf 	.word	0x0800dbaf
 800daec:	0800dbaf 	.word	0x0800dbaf
 800daf0:	0800dbaf 	.word	0x0800dbaf
 800daf4:	0800dbaf 	.word	0x0800dbaf
 800daf8:	0800dbaf 	.word	0x0800dbaf
 800dafc:	0800dbaf 	.word	0x0800dbaf
 800db00:	0800dbaf 	.word	0x0800dbaf
 800db04:	0800db9f 	.word	0x0800db9f
 800db08:	0800db99 	.word	0x0800db99
 800db0c:	0800db93 	.word	0x0800db93
 800db10:	0800db8d 	.word	0x0800db8d
 800db14:	0800db87 	.word	0x0800db87
 800db18:	0800db81 	.word	0x0800db81
 800db1c:	0800db7b 	.word	0x0800db7b
 800db20:	0800db75 	.word	0x0800db75
 800db24:	0800db6f 	.word	0x0800db6f
 800db28:	0800db69 	.word	0x0800db69
 800db2c:	0800db63 	.word	0x0800db63
 800db30:	0800db5d 	.word	0x0800db5d
 800db34:	0800db57 	.word	0x0800db57
 800db38:	0800db51 	.word	0x0800db51
 800db3c:	0800db4b 	.word	0x0800db4b
 800db40:	0800db45 	.word	0x0800db45
			//----a右スラローム----
			case -1:
				slalom_R90();
 800db44:	f7f8 fc9c 	bl	8006480 <slalom_R90>
				break;
 800db48:	e0cd      	b.n	800dce6 <searchF4+0x3fe>

			//----a左スラローム----
			case -2:
				slalom_L90();
 800db4a:	f7f8 fd7d 	bl	8006648 <slalom_L90>
				break;
 800db4e:	e0ca      	b.n	800dce6 <searchF4+0x3fe>

			//----a大回り右90----
			case -3:
				Lslalom_R90();
 800db50:	f7f8 fe54 	bl	80067fc <Lslalom_R90>
				break;
 800db54:	e0c7      	b.n	800dce6 <searchF4+0x3fe>

			//----a大回り左90----
			case -4:
				Lslalom_L90();
 800db56:	f7f8 ff29 	bl	80069ac <Lslalom_L90>
				break;
 800db5a:	e0c4      	b.n	800dce6 <searchF4+0x3fe>

			//----a大回り右180----
			case -5:
				Lslalom_R180();
 800db5c:	f7f8 fff2 	bl	8006b44 <Lslalom_R180>
				break;
 800db60:	e0c1      	b.n	800dce6 <searchF4+0x3fe>

			//----a大回り左180----
			case -6:
				Lslalom_L180();
 800db62:	f7f9 f8d5 	bl	8006d10 <Lslalom_L180>
				break;
 800db66:	e0be      	b.n	800dce6 <searchF4+0x3fe>

			//----a斜め右V45----
			case -7:
				v_R45();
 800db68:	f7f9 f9ae 	bl	8006ec8 <v_R45>
				break;
 800db6c:	e0bb      	b.n	800dce6 <searchF4+0x3fe>

			//----a斜め左V45----
			case -8:
				v_L45();
 800db6e:	f7f9 fb2f 	bl	80071d0 <v_L45>
				break;
 800db72:	e0b8      	b.n	800dce6 <searchF4+0x3fe>

			//----a斜め右V90----
			case -9:
				v_R90();
 800db74:	f7f9 fe56 	bl	8007824 <v_R90>
				break;
 800db78:	e0b5      	b.n	800dce6 <searchF4+0x3fe>

			//----a斜め左V90----
			case -10:
				v_L90();
 800db7a:	f7f9 fefb 	bl	8007974 <v_L90>
				break;
 800db7e:	e0b2      	b.n	800dce6 <searchF4+0x3fe>

			//----a斜め右V135----
			case -11:
				v_R135();
 800db80:	f7f9 ff9a 	bl	8007ab8 <v_R135>
				break;
 800db84:	e0af      	b.n	800dce6 <searchF4+0x3fe>

			//----a斜め左V135----
			case -12:
				v_L135();
 800db86:	f7fa f91f 	bl	8007dc8 <v_L135>
				break;
 800db8a:	e0ac      	b.n	800dce6 <searchF4+0x3fe>

			//----a斜め右V45Goal----
			case -13:
				v_R45D();
 800db8c:	f7f9 fc9c 	bl	80074c8 <v_R45D>
				break;
 800db90:	e0a9      	b.n	800dce6 <searchF4+0x3fe>

			//----a斜め左V45Goal----
			case -14:
				v_L45D();
 800db92:	f7f9 fd73 	bl	800767c <v_L45D>
				break;
 800db96:	e0a6      	b.n	800dce6 <searchF4+0x3fe>

			//----a斜め右V135Goal----
			case -15:
				v_R135D();
 800db98:	f7fa fa92 	bl	80080c0 <v_R135D>
				break;
 800db9c:	e0a3      	b.n	800dce6 <searchF4+0x3fe>

			//----a斜め左V135Goal----
			case -16:
				v_L135D();
 800db9e:	f7fa fb9d 	bl	80082dc <v_L135D>
				break;
 800dba2:	e0a0      	b.n	800dce6 <searchF4+0x3fe>

			//----pass配列最後(なお本来呼び出される前にゴールする)----
			case -114:
				rotate_180();
 800dba4:	f7f8 fb94 	bl	80062d0 <rotate_180>
				rotate_180();
 800dba8:	f7f8 fb92 	bl	80062d0 <rotate_180>
				while(1);
 800dbac:	e7fe      	b.n	800dbac <searchF4+0x2c4>
				break;

			//----a前進----
			default:
				if(pass[p_cnt-1] < 4){
 800dbae:	4b21      	ldr	r3, [pc, #132]	; (800dc34 <searchF4+0x34c>)
 800dbb0:	781b      	ldrb	r3, [r3, #0]
 800dbb2:	3b01      	subs	r3, #1
 800dbb4:	4a21      	ldr	r2, [pc, #132]	; (800dc3c <searchF4+0x354>)
 800dbb6:	56d3      	ldrsb	r3, [r2, r3]
 800dbb8:	2b03      	cmp	r3, #3
 800dbba:	dc11      	bgt.n	800dbe0 <searchF4+0x2f8>
					for(int k = 0; k < pass[p_cnt-1]; k++){
 800dbbc:	2300      	movs	r3, #0
 800dbbe:	607b      	str	r3, [r7, #4]
 800dbc0:	e004      	b.n	800dbcc <searchF4+0x2e4>
						half_sectionU();
 800dbc2:	f7f7 fff3 	bl	8005bac <half_sectionU>
					for(int k = 0; k < pass[p_cnt-1]; k++){
 800dbc6:	687b      	ldr	r3, [r7, #4]
 800dbc8:	3301      	adds	r3, #1
 800dbca:	607b      	str	r3, [r7, #4]
 800dbcc:	4b19      	ldr	r3, [pc, #100]	; (800dc34 <searchF4+0x34c>)
 800dbce:	781b      	ldrb	r3, [r3, #0]
 800dbd0:	3b01      	subs	r3, #1
 800dbd2:	4a1a      	ldr	r2, [pc, #104]	; (800dc3c <searchF4+0x354>)
 800dbd4:	56d3      	ldrsb	r3, [r2, r3]
 800dbd6:	461a      	mov	r2, r3
 800dbd8:	687b      	ldr	r3, [r7, #4]
 800dbda:	4293      	cmp	r3, r2
 800dbdc:	dbf1      	blt.n	800dbc2 <searchF4+0x2da>
					}else{
						half_sectionV();
					}
//					half_sectionV();
				}
				break;
 800dbde:	e081      	b.n	800dce4 <searchF4+0x3fc>
				}else if(pass[p_cnt-1] < 64){
 800dbe0:	4b14      	ldr	r3, [pc, #80]	; (800dc34 <searchF4+0x34c>)
 800dbe2:	781b      	ldrb	r3, [r3, #0]
 800dbe4:	3b01      	subs	r3, #1
 800dbe6:	4a15      	ldr	r2, [pc, #84]	; (800dc3c <searchF4+0x354>)
 800dbe8:	56d3      	ldrsb	r3, [r2, r3]
 800dbea:	2b3f      	cmp	r3, #63	; 0x3f
 800dbec:	dc2a      	bgt.n	800dc44 <searchF4+0x35c>
					one_sectionA();
 800dbee:	f7f7 fffd 	bl	8005bec <one_sectionA>
					MF2.FLAG.HACCEL = 1;
 800dbf2:	4a13      	ldr	r2, [pc, #76]	; (800dc40 <searchF4+0x358>)
 800dbf4:	8813      	ldrh	r3, [r2, #0]
 800dbf6:	f043 0302 	orr.w	r3, r3, #2
 800dbfa:	8013      	strh	r3, [r2, #0]
					for(k = 0; k < pass[p_cnt-1]-4; k++){
 800dbfc:	2300      	movs	r3, #0
 800dbfe:	603b      	str	r3, [r7, #0]
 800dc00:	e004      	b.n	800dc0c <searchF4+0x324>
						half_sectionU();
 800dc02:	f7f7 ffd3 	bl	8005bac <half_sectionU>
					for(k = 0; k < pass[p_cnt-1]-4; k++){
 800dc06:	683b      	ldr	r3, [r7, #0]
 800dc08:	3301      	adds	r3, #1
 800dc0a:	603b      	str	r3, [r7, #0]
 800dc0c:	4b09      	ldr	r3, [pc, #36]	; (800dc34 <searchF4+0x34c>)
 800dc0e:	781b      	ldrb	r3, [r3, #0]
 800dc10:	3b01      	subs	r3, #1
 800dc12:	4a0a      	ldr	r2, [pc, #40]	; (800dc3c <searchF4+0x354>)
 800dc14:	56d3      	ldrsb	r3, [r2, r3]
 800dc16:	3b04      	subs	r3, #4
 800dc18:	683a      	ldr	r2, [r7, #0]
 800dc1a:	429a      	cmp	r2, r3
 800dc1c:	dbf1      	blt.n	800dc02 <searchF4+0x31a>
					one_sectionD();
 800dc1e:	f7f8 f84b 	bl	8005cb8 <one_sectionD>
					MF2.FLAG.HACCEL = 0;
 800dc22:	4a07      	ldr	r2, [pc, #28]	; (800dc40 <searchF4+0x358>)
 800dc24:	8813      	ldrh	r3, [r2, #0]
 800dc26:	f36f 0341 	bfc	r3, #1, #1
 800dc2a:	8013      	strh	r3, [r2, #0]
				break;
 800dc2c:	e05a      	b.n	800dce4 <searchF4+0x3fc>
 800dc2e:	bf00      	nop
 800dc30:	20000f68 	.word	0x20000f68
 800dc34:	200002b0 	.word	0x200002b0
 800dc38:	200015c8 	.word	0x200015c8
 800dc3c:	20000350 	.word	0x20000350
 800dc40:	20000f64 	.word	0x20000f64
					if((pass[p_cnt] == 64) && (pass[p_cnt+1] == 64) && (pass[p_cnt+2] == 64) && (MF2.FLAG.HACCEL == 0)){
 800dc44:	4b50      	ldr	r3, [pc, #320]	; (800dd88 <searchF4+0x4a0>)
 800dc46:	781b      	ldrb	r3, [r3, #0]
 800dc48:	461a      	mov	r2, r3
 800dc4a:	4b50      	ldr	r3, [pc, #320]	; (800dd8c <searchF4+0x4a4>)
 800dc4c:	569b      	ldrsb	r3, [r3, r2]
 800dc4e:	2b40      	cmp	r3, #64	; 0x40
 800dc50:	d122      	bne.n	800dc98 <searchF4+0x3b0>
 800dc52:	4b4d      	ldr	r3, [pc, #308]	; (800dd88 <searchF4+0x4a0>)
 800dc54:	781b      	ldrb	r3, [r3, #0]
 800dc56:	3301      	adds	r3, #1
 800dc58:	4a4c      	ldr	r2, [pc, #304]	; (800dd8c <searchF4+0x4a4>)
 800dc5a:	56d3      	ldrsb	r3, [r2, r3]
 800dc5c:	2b40      	cmp	r3, #64	; 0x40
 800dc5e:	d11b      	bne.n	800dc98 <searchF4+0x3b0>
 800dc60:	4b49      	ldr	r3, [pc, #292]	; (800dd88 <searchF4+0x4a0>)
 800dc62:	781b      	ldrb	r3, [r3, #0]
 800dc64:	3302      	adds	r3, #2
 800dc66:	4a49      	ldr	r2, [pc, #292]	; (800dd8c <searchF4+0x4a4>)
 800dc68:	56d3      	ldrsb	r3, [r2, r3]
 800dc6a:	2b40      	cmp	r3, #64	; 0x40
 800dc6c:	d114      	bne.n	800dc98 <searchF4+0x3b0>
 800dc6e:	4b48      	ldr	r3, [pc, #288]	; (800dd90 <searchF4+0x4a8>)
 800dc70:	881b      	ldrh	r3, [r3, #0]
 800dc72:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800dc76:	b2db      	uxtb	r3, r3
 800dc78:	2b00      	cmp	r3, #0
 800dc7a:	d10d      	bne.n	800dc98 <searchF4+0x3b0>
						one_sectionVA();
 800dc7c:	f7f8 f88e 	bl	8005d9c <one_sectionVA>
						MF2.FLAG.HACCEL = 1;
 800dc80:	4a43      	ldr	r2, [pc, #268]	; (800dd90 <searchF4+0x4a8>)
 800dc82:	8813      	ldrh	r3, [r2, #0]
 800dc84:	f043 0302 	orr.w	r3, r3, #2
 800dc88:	8013      	strh	r3, [r2, #0]
						p_cnt++;
 800dc8a:	4b3f      	ldr	r3, [pc, #252]	; (800dd88 <searchF4+0x4a0>)
 800dc8c:	781b      	ldrb	r3, [r3, #0]
 800dc8e:	3301      	adds	r3, #1
 800dc90:	b2da      	uxtb	r2, r3
 800dc92:	4b3d      	ldr	r3, [pc, #244]	; (800dd88 <searchF4+0x4a0>)
 800dc94:	701a      	strb	r2, [r3, #0]
 800dc96:	e025      	b.n	800dce4 <searchF4+0x3fc>
					else if((pass[p_cnt] == 64) && (pass[p_cnt+1] != 64) && (MF2.FLAG.HACCEL == 1)){
 800dc98:	4b3b      	ldr	r3, [pc, #236]	; (800dd88 <searchF4+0x4a0>)
 800dc9a:	781b      	ldrb	r3, [r3, #0]
 800dc9c:	461a      	mov	r2, r3
 800dc9e:	4b3b      	ldr	r3, [pc, #236]	; (800dd8c <searchF4+0x4a4>)
 800dca0:	569b      	ldrsb	r3, [r3, r2]
 800dca2:	2b40      	cmp	r3, #64	; 0x40
 800dca4:	d11b      	bne.n	800dcde <searchF4+0x3f6>
 800dca6:	4b38      	ldr	r3, [pc, #224]	; (800dd88 <searchF4+0x4a0>)
 800dca8:	781b      	ldrb	r3, [r3, #0]
 800dcaa:	3301      	adds	r3, #1
 800dcac:	4a37      	ldr	r2, [pc, #220]	; (800dd8c <searchF4+0x4a4>)
 800dcae:	56d3      	ldrsb	r3, [r2, r3]
 800dcb0:	2b40      	cmp	r3, #64	; 0x40
 800dcb2:	d014      	beq.n	800dcde <searchF4+0x3f6>
 800dcb4:	4b36      	ldr	r3, [pc, #216]	; (800dd90 <searchF4+0x4a8>)
 800dcb6:	881b      	ldrh	r3, [r3, #0]
 800dcb8:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800dcbc:	b2db      	uxtb	r3, r3
 800dcbe:	2b01      	cmp	r3, #1
 800dcc0:	d10d      	bne.n	800dcde <searchF4+0x3f6>
						one_sectionVD();
 800dcc2:	f7f8 f8c9 	bl	8005e58 <one_sectionVD>
						MF2.FLAG.HACCEL = 0;
 800dcc6:	4a32      	ldr	r2, [pc, #200]	; (800dd90 <searchF4+0x4a8>)
 800dcc8:	8813      	ldrh	r3, [r2, #0]
 800dcca:	f36f 0341 	bfc	r3, #1, #1
 800dcce:	8013      	strh	r3, [r2, #0]
						p_cnt++;
 800dcd0:	4b2d      	ldr	r3, [pc, #180]	; (800dd88 <searchF4+0x4a0>)
 800dcd2:	781b      	ldrb	r3, [r3, #0]
 800dcd4:	3301      	adds	r3, #1
 800dcd6:	b2da      	uxtb	r2, r3
 800dcd8:	4b2b      	ldr	r3, [pc, #172]	; (800dd88 <searchF4+0x4a0>)
 800dcda:	701a      	strb	r2, [r3, #0]
 800dcdc:	e002      	b.n	800dce4 <searchF4+0x3fc>
						half_sectionV();
 800dcde:	f7f7 ff71 	bl	8005bc4 <half_sectionV>
				break;
 800dce2:	e7ff      	b.n	800dce4 <searchF4+0x3fc>
 800dce4:	bf00      	nop
		}

	}while(pass[p_cnt] != -114);
 800dce6:	4b28      	ldr	r3, [pc, #160]	; (800dd88 <searchF4+0x4a0>)
 800dce8:	781b      	ldrb	r3, [r3, #0]
 800dcea:	461a      	mov	r2, r3
 800dcec:	4b27      	ldr	r3, [pc, #156]	; (800dd8c <searchF4+0x4a4>)
 800dcee:	569b      	ldrsb	r3, [r3, r2]
 800dcf0:	f113 0f72 	cmn.w	r3, #114	; 0x72
 800dcf4:	f47f ae32 	bne.w	800d95c <searchF4+0x74>

	mouse.x = goal_x;
 800dcf8:	4b26      	ldr	r3, [pc, #152]	; (800dd94 <searchF4+0x4ac>)
 800dcfa:	781a      	ldrb	r2, [r3, #0]
 800dcfc:	4b26      	ldr	r3, [pc, #152]	; (800dd98 <searchF4+0x4b0>)
 800dcfe:	701a      	strb	r2, [r3, #0]
	mouse.y = goal_y;
 800dd00:	4b26      	ldr	r3, [pc, #152]	; (800dd9c <searchF4+0x4b4>)
 800dd02:	781a      	ldrb	r2, [r3, #0]
 800dd04:	4b24      	ldr	r3, [pc, #144]	; (800dd98 <searchF4+0x4b0>)
 800dd06:	705a      	strb	r2, [r3, #1]

	if(pass[p_cnt-1] != -13 && pass[p_cnt-1] != -14 && pass[p_cnt-1] != -15 && pass[p_cnt-1] != -16){
 800dd08:	4b1f      	ldr	r3, [pc, #124]	; (800dd88 <searchF4+0x4a0>)
 800dd0a:	781b      	ldrb	r3, [r3, #0]
 800dd0c:	3b01      	subs	r3, #1
 800dd0e:	4a1f      	ldr	r2, [pc, #124]	; (800dd8c <searchF4+0x4a4>)
 800dd10:	56d3      	ldrsb	r3, [r2, r3]
 800dd12:	f113 0f0d 	cmn.w	r3, #13
 800dd16:	d01c      	beq.n	800dd52 <searchF4+0x46a>
 800dd18:	4b1b      	ldr	r3, [pc, #108]	; (800dd88 <searchF4+0x4a0>)
 800dd1a:	781b      	ldrb	r3, [r3, #0]
 800dd1c:	3b01      	subs	r3, #1
 800dd1e:	4a1b      	ldr	r2, [pc, #108]	; (800dd8c <searchF4+0x4a4>)
 800dd20:	56d3      	ldrsb	r3, [r2, r3]
 800dd22:	f113 0f0e 	cmn.w	r3, #14
 800dd26:	d014      	beq.n	800dd52 <searchF4+0x46a>
 800dd28:	4b17      	ldr	r3, [pc, #92]	; (800dd88 <searchF4+0x4a0>)
 800dd2a:	781b      	ldrb	r3, [r3, #0]
 800dd2c:	3b01      	subs	r3, #1
 800dd2e:	4a17      	ldr	r2, [pc, #92]	; (800dd8c <searchF4+0x4a4>)
 800dd30:	56d3      	ldrsb	r3, [r2, r3]
 800dd32:	f113 0f0f 	cmn.w	r3, #15
 800dd36:	d00c      	beq.n	800dd52 <searchF4+0x46a>
 800dd38:	4b13      	ldr	r3, [pc, #76]	; (800dd88 <searchF4+0x4a0>)
 800dd3a:	781b      	ldrb	r3, [r3, #0]
 800dd3c:	3b01      	subs	r3, #1
 800dd3e:	4a13      	ldr	r2, [pc, #76]	; (800dd8c <searchF4+0x4a4>)
 800dd40:	56d3      	ldrsb	r3, [r2, r3]
 800dd42:	f113 0f10 	cmn.w	r3, #16
 800dd46:	d004      	beq.n	800dd52 <searchF4+0x46a>
		half_sectionD();
 800dd48:	f7f7 feea 	bl	8005b20 <half_sectionD>
		full_led_write(BLUE);
 800dd4c:	2003      	movs	r0, #3
 800dd4e:	f002 f889 	bl	800fe64 <full_led_write>
	}

	HAL_Delay(500);
 800dd52:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800dd56:	f7f3 f961 	bl	800101c <HAL_Delay>
	rotate_180();											//180度回転
 800dd5a:	f7f8 fab9 	bl	80062d0 <rotate_180>
	driveC2(SETPOS_BACK);         //a尻を当てる程度に後退。回転後に停止する
 800dd5e:	2064      	movs	r0, #100	; 0x64
 800dd60:	f7f7 fb3a 	bl	80053d8 <driveC2>
	degree_z = target_degree_z;
 800dd64:	4b0e      	ldr	r3, [pc, #56]	; (800dda0 <searchF4+0x4b8>)
 800dd66:	681b      	ldr	r3, [r3, #0]
 800dd68:	4a0e      	ldr	r2, [pc, #56]	; (800dda4 <searchF4+0x4bc>)
 800dd6a:	6013      	str	r3, [r2, #0]
	start_mode = 0;
 800dd6c:	4b0e      	ldr	r3, [pc, #56]	; (800dda8 <searchF4+0x4c0>)
 800dd6e:	2200      	movs	r2, #0
 800dd70:	701a      	strb	r2, [r3, #0]

	mouse.dir = mouse.dir / 2;
 800dd72:	4b09      	ldr	r3, [pc, #36]	; (800dd98 <searchF4+0x4b0>)
 800dd74:	789b      	ldrb	r3, [r3, #2]
 800dd76:	b2db      	uxtb	r3, r3
 800dd78:	085b      	lsrs	r3, r3, #1
 800dd7a:	b2da      	uxtb	r2, r3
 800dd7c:	4b06      	ldr	r3, [pc, #24]	; (800dd98 <searchF4+0x4b0>)
 800dd7e:	709a      	strb	r2, [r3, #2]

}
 800dd80:	bf00      	nop
 800dd82:	3708      	adds	r7, #8
 800dd84:	46bd      	mov	sp, r7
 800dd86:	bd80      	pop	{r7, pc}
 800dd88:	200002b0 	.word	0x200002b0
 800dd8c:	20000350 	.word	0x20000350
 800dd90:	20000f64 	.word	0x20000f64
 800dd94:	20000bb0 	.word	0x20000bb0
 800dd98:	20000c0c 	.word	0x20000c0c
 800dd9c:	20000b4c 	.word	0x20000b4c
 800dda0:	20000bf8 	.word	0x20000bf8
 800dda4:	20000b5c 	.word	0x20000b5c
 800dda8:	200015c8 	.word	0x200015c8

0800ddac <adv_pos>:
//adv_pos
//aマイクロマウス内部位置情報で前進させる
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void adv_pos(){
 800ddac:	b480      	push	{r7}
 800ddae:	af00      	add	r7, sp, #0

	switch(mouse.dir){										//aマイクロマウスが現在向いている方向で判定
 800ddb0:	4b1a      	ldr	r3, [pc, #104]	; (800de1c <adv_pos+0x70>)
 800ddb2:	789b      	ldrb	r3, [r3, #2]
 800ddb4:	b2db      	uxtb	r3, r3
 800ddb6:	2b03      	cmp	r3, #3
 800ddb8:	d82a      	bhi.n	800de10 <adv_pos+0x64>
 800ddba:	a201      	add	r2, pc, #4	; (adr r2, 800ddc0 <adv_pos+0x14>)
 800ddbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ddc0:	0800ddd1 	.word	0x0800ddd1
 800ddc4:	0800dde1 	.word	0x0800dde1
 800ddc8:	0800ddf1 	.word	0x0800ddf1
 800ddcc:	0800de01 	.word	0x0800de01
	case 0x00:												//a北方向に向いている場合
		mouse.y++;											//Y座標をインクリメント
 800ddd0:	4b12      	ldr	r3, [pc, #72]	; (800de1c <adv_pos+0x70>)
 800ddd2:	785b      	ldrb	r3, [r3, #1]
 800ddd4:	b2db      	uxtb	r3, r3
 800ddd6:	3301      	adds	r3, #1
 800ddd8:	b2da      	uxtb	r2, r3
 800ddda:	4b10      	ldr	r3, [pc, #64]	; (800de1c <adv_pos+0x70>)
 800dddc:	705a      	strb	r2, [r3, #1]
		break;
 800ddde:	e017      	b.n	800de10 <adv_pos+0x64>
	case 0x01:												//a東方向に向いている場合
		mouse.x++;											//X座標をインクリメント
 800dde0:	4b0e      	ldr	r3, [pc, #56]	; (800de1c <adv_pos+0x70>)
 800dde2:	781b      	ldrb	r3, [r3, #0]
 800dde4:	b2db      	uxtb	r3, r3
 800dde6:	3301      	adds	r3, #1
 800dde8:	b2da      	uxtb	r2, r3
 800ddea:	4b0c      	ldr	r3, [pc, #48]	; (800de1c <adv_pos+0x70>)
 800ddec:	701a      	strb	r2, [r3, #0]
		break;
 800ddee:	e00f      	b.n	800de10 <adv_pos+0x64>
	case 0x02:												//a南方向に向いている場合
		mouse.y--;											//Y座標をデクリメント
 800ddf0:	4b0a      	ldr	r3, [pc, #40]	; (800de1c <adv_pos+0x70>)
 800ddf2:	785b      	ldrb	r3, [r3, #1]
 800ddf4:	b2db      	uxtb	r3, r3
 800ddf6:	3b01      	subs	r3, #1
 800ddf8:	b2da      	uxtb	r2, r3
 800ddfa:	4b08      	ldr	r3, [pc, #32]	; (800de1c <adv_pos+0x70>)
 800ddfc:	705a      	strb	r2, [r3, #1]
		break;
 800ddfe:	e007      	b.n	800de10 <adv_pos+0x64>
	case 0x03:												//a西方向に向いている場合
		mouse.x--;											//X座標をデクリメント
 800de00:	4b06      	ldr	r3, [pc, #24]	; (800de1c <adv_pos+0x70>)
 800de02:	781b      	ldrb	r3, [r3, #0]
 800de04:	b2db      	uxtb	r3, r3
 800de06:	3b01      	subs	r3, #1
 800de08:	b2da      	uxtb	r2, r3
 800de0a:	4b04      	ldr	r3, [pc, #16]	; (800de1c <adv_pos+0x70>)
 800de0c:	701a      	strb	r2, [r3, #0]
		break;
 800de0e:	bf00      	nop
	}
}
 800de10:	bf00      	nop
 800de12:	46bd      	mov	sp, r7
 800de14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de18:	4770      	bx	lr
 800de1a:	bf00      	nop
 800de1c:	20000c0c 	.word	0x20000c0c

0800de20 <conf_route>:
//conf_route
//a進路を判定する
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void conf_route(){
 800de20:	b580      	push	{r7, lr}
 800de22:	af00      	add	r7, sp, #0

	//----a壁情報書き込み----
	write_map();
 800de24:	f000 f886 	bl	800df34 <write_map>

	//----a最短経路上に壁があれば進路変更----
	if(wall_info & route[r_cnt]){
 800de28:	4b09      	ldr	r3, [pc, #36]	; (800de50 <conf_route+0x30>)
 800de2a:	781b      	ldrb	r3, [r3, #0]
 800de2c:	461a      	mov	r2, r3
 800de2e:	4b09      	ldr	r3, [pc, #36]	; (800de54 <conf_route+0x34>)
 800de30:	5c9a      	ldrb	r2, [r3, r2]
 800de32:	4b09      	ldr	r3, [pc, #36]	; (800de58 <conf_route+0x38>)
 800de34:	781b      	ldrb	r3, [r3, #0]
 800de36:	4013      	ands	r3, r2
 800de38:	b2db      	uxtb	r3, r3
 800de3a:	2b00      	cmp	r3, #0
 800de3c:	d006      	beq.n	800de4c <conf_route+0x2c>
		make_smap();										//a歩数マップを更新
 800de3e:	f000 fa7b 	bl	800e338 <make_smap>
		make_route();										//a最短経路を更新
 800de42:	f000 fe17 	bl	800ea74 <make_route>
		r_cnt = 0;											//a経路カウンタを0に
 800de46:	4b02      	ldr	r3, [pc, #8]	; (800de50 <conf_route+0x30>)
 800de48:	2200      	movs	r2, #0
 800de4a:	701a      	strb	r2, [r3, #0]
	}
}
 800de4c:	bf00      	nop
 800de4e:	bd80      	pop	{r7, pc}
 800de50:	200015d0 	.word	0x200015d0
 800de54:	20000c54 	.word	0x20000c54
 800de58:	200002c8 	.word	0x200002c8

0800de5c <map_Init>:
//map_Init
//aマップ格納配列map[][]の初期化をする
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void map_Init(){
 800de5c:	b480      	push	{r7}
 800de5e:	b083      	sub	sp, #12
 800de60:	af00      	add	r7, sp, #0
	//====a変数宣言====
	uint8_t x, y;											//for文用変数

	//====a初期化開始====
	//aマップのクリア
	for(y = 0; y <= 15; y++){								//a各Y座標で実行
 800de62:	2300      	movs	r3, #0
 800de64:	71bb      	strb	r3, [r7, #6]
 800de66:	e013      	b.n	800de90 <map_Init+0x34>
		for(x = 0; x <= 15; x++){							//a各X座標で実行
 800de68:	2300      	movs	r3, #0
 800de6a:	71fb      	strb	r3, [r7, #7]
 800de6c:	e00a      	b.n	800de84 <map_Init+0x28>
			map[y][x] = 0xf0;								//a上位4ビット（2次走行時）を壁あり，下位4ビット（1次走行時）を壁なしとする。
 800de6e:	79ba      	ldrb	r2, [r7, #6]
 800de70:	79fb      	ldrb	r3, [r7, #7]
 800de72:	492f      	ldr	r1, [pc, #188]	; (800df30 <map_Init+0xd4>)
 800de74:	0112      	lsls	r2, r2, #4
 800de76:	440a      	add	r2, r1
 800de78:	4413      	add	r3, r2
 800de7a:	22f0      	movs	r2, #240	; 0xf0
 800de7c:	701a      	strb	r2, [r3, #0]
		for(x = 0; x <= 15; x++){							//a各X座標で実行
 800de7e:	79fb      	ldrb	r3, [r7, #7]
 800de80:	3301      	adds	r3, #1
 800de82:	71fb      	strb	r3, [r7, #7]
 800de84:	79fb      	ldrb	r3, [r7, #7]
 800de86:	2b0f      	cmp	r3, #15
 800de88:	d9f1      	bls.n	800de6e <map_Init+0x12>
	for(y = 0; y <= 15; y++){								//a各Y座標で実行
 800de8a:	79bb      	ldrb	r3, [r7, #6]
 800de8c:	3301      	adds	r3, #1
 800de8e:	71bb      	strb	r3, [r7, #6]
 800de90:	79bb      	ldrb	r3, [r7, #6]
 800de92:	2b0f      	cmp	r3, #15
 800de94:	d9e8      	bls.n	800de68 <map_Init+0xc>
		}
	}

	//a確定壁の配置
	for(y = 0; y <= 15; y++){								//a各Y座標で実行
 800de96:	2300      	movs	r3, #0
 800de98:	71bb      	strb	r3, [r7, #6]
 800de9a:	e020      	b.n	800dede <map_Init+0x82>
		map[y][0] |= 0xf1;									//a最西に壁を配置
 800de9c:	79bb      	ldrb	r3, [r7, #6]
 800de9e:	4a24      	ldr	r2, [pc, #144]	; (800df30 <map_Init+0xd4>)
 800dea0:	011b      	lsls	r3, r3, #4
 800dea2:	4413      	add	r3, r2
 800dea4:	781a      	ldrb	r2, [r3, #0]
 800dea6:	79bb      	ldrb	r3, [r7, #6]
 800dea8:	f062 020e 	orn	r2, r2, #14
 800deac:	b2d1      	uxtb	r1, r2
 800deae:	4a20      	ldr	r2, [pc, #128]	; (800df30 <map_Init+0xd4>)
 800deb0:	011b      	lsls	r3, r3, #4
 800deb2:	4413      	add	r3, r2
 800deb4:	460a      	mov	r2, r1
 800deb6:	701a      	strb	r2, [r3, #0]
		map[y][15] |= 0xf4;									//a最東に壁を配置
 800deb8:	79bb      	ldrb	r3, [r7, #6]
 800deba:	4a1d      	ldr	r2, [pc, #116]	; (800df30 <map_Init+0xd4>)
 800debc:	011b      	lsls	r3, r3, #4
 800debe:	4413      	add	r3, r2
 800dec0:	330f      	adds	r3, #15
 800dec2:	781a      	ldrb	r2, [r3, #0]
 800dec4:	79bb      	ldrb	r3, [r7, #6]
 800dec6:	f062 020b 	orn	r2, r2, #11
 800deca:	b2d1      	uxtb	r1, r2
 800decc:	4a18      	ldr	r2, [pc, #96]	; (800df30 <map_Init+0xd4>)
 800dece:	011b      	lsls	r3, r3, #4
 800ded0:	4413      	add	r3, r2
 800ded2:	330f      	adds	r3, #15
 800ded4:	460a      	mov	r2, r1
 800ded6:	701a      	strb	r2, [r3, #0]
	for(y = 0; y <= 15; y++){								//a各Y座標で実行
 800ded8:	79bb      	ldrb	r3, [r7, #6]
 800deda:	3301      	adds	r3, #1
 800dedc:	71bb      	strb	r3, [r7, #6]
 800dede:	79bb      	ldrb	r3, [r7, #6]
 800dee0:	2b0f      	cmp	r3, #15
 800dee2:	d9db      	bls.n	800de9c <map_Init+0x40>
	}
	for(x = 0; x <= 15; x++){								//a各X座標で実行
 800dee4:	2300      	movs	r3, #0
 800dee6:	71fb      	strb	r3, [r7, #7]
 800dee8:	e019      	b.n	800df1e <map_Init+0xc2>
		map[0][x] |= 0xf2;									//a最南に壁を配置
 800deea:	79fb      	ldrb	r3, [r7, #7]
 800deec:	4a10      	ldr	r2, [pc, #64]	; (800df30 <map_Init+0xd4>)
 800deee:	5cd2      	ldrb	r2, [r2, r3]
 800def0:	79fb      	ldrb	r3, [r7, #7]
 800def2:	f062 020d 	orn	r2, r2, #13
 800def6:	b2d1      	uxtb	r1, r2
 800def8:	4a0d      	ldr	r2, [pc, #52]	; (800df30 <map_Init+0xd4>)
 800defa:	54d1      	strb	r1, [r2, r3]
		map[15][x] |= 0xf8;									//a最北に壁を配置
 800defc:	79fb      	ldrb	r3, [r7, #7]
 800defe:	4a0c      	ldr	r2, [pc, #48]	; (800df30 <map_Init+0xd4>)
 800df00:	4413      	add	r3, r2
 800df02:	f893 20f0 	ldrb.w	r2, [r3, #240]	; 0xf0
 800df06:	79fb      	ldrb	r3, [r7, #7]
 800df08:	f062 0207 	orn	r2, r2, #7
 800df0c:	b2d1      	uxtb	r1, r2
 800df0e:	4a08      	ldr	r2, [pc, #32]	; (800df30 <map_Init+0xd4>)
 800df10:	4413      	add	r3, r2
 800df12:	460a      	mov	r2, r1
 800df14:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
	for(x = 0; x <= 15; x++){								//a各X座標で実行
 800df18:	79fb      	ldrb	r3, [r7, #7]
 800df1a:	3301      	adds	r3, #1
 800df1c:	71fb      	strb	r3, [r7, #7]
 800df1e:	79fb      	ldrb	r3, [r7, #7]
 800df20:	2b0f      	cmp	r3, #15
 800df22:	d9e2      	bls.n	800deea <map_Init+0x8e>
	}
}
 800df24:	bf00      	nop
 800df26:	370c      	adds	r7, #12
 800df28:	46bd      	mov	sp, r7
 800df2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df2e:	4770      	bx	lr
 800df30:	200001ac 	.word	0x200001ac

0800df34 <write_map>:
//write_map
//aマップデータを書き込む
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void write_map(){
 800df34:	b490      	push	{r4, r7}
 800df36:	b082      	sub	sp, #8
 800df38:	af00      	add	r7, sp, #0

	//====a変数宣言====
	uint8_t m_temp;											//a向きを補正した壁情報

	//====a壁情報の補正格納====
	m_temp = (wall_info >> mouse.dir) & 0x0f;				//aセンサ壁情報をmouse.dirで向きを補正させて下位4bit分を残す
 800df3a:	4b8f      	ldr	r3, [pc, #572]	; (800e178 <write_map+0x244>)
 800df3c:	781b      	ldrb	r3, [r3, #0]
 800df3e:	461a      	mov	r2, r3
 800df40:	4b8e      	ldr	r3, [pc, #568]	; (800e17c <write_map+0x248>)
 800df42:	789b      	ldrb	r3, [r3, #2]
 800df44:	b2db      	uxtb	r3, r3
 800df46:	fa42 f303 	asr.w	r3, r2, r3
 800df4a:	b2db      	uxtb	r3, r3
 800df4c:	f003 030f 	and.w	r3, r3, #15
 800df50:	71fb      	strb	r3, [r7, #7]
	m_temp |= (m_temp << 4);								//a上位4bitに下位4bitをコピー。この作業でm_tempにNESW順で壁が格納
 800df52:	79fb      	ldrb	r3, [r7, #7]
 800df54:	011b      	lsls	r3, r3, #4
 800df56:	b25a      	sxtb	r2, r3
 800df58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800df5c:	4313      	orrs	r3, r2
 800df5e:	b25b      	sxtb	r3, r3
 800df60:	71fb      	strb	r3, [r7, #7]

	//====aデータの書き込み====
	map[mouse.y][mouse.x] = m_temp; 						//a現在地に壁情報書き込み
 800df62:	4b86      	ldr	r3, [pc, #536]	; (800e17c <write_map+0x248>)
 800df64:	785b      	ldrb	r3, [r3, #1]
 800df66:	b2db      	uxtb	r3, r3
 800df68:	4618      	mov	r0, r3
 800df6a:	4b84      	ldr	r3, [pc, #528]	; (800e17c <write_map+0x248>)
 800df6c:	781b      	ldrb	r3, [r3, #0]
 800df6e:	b2db      	uxtb	r3, r3
 800df70:	4619      	mov	r1, r3
 800df72:	4a83      	ldr	r2, [pc, #524]	; (800e180 <write_map+0x24c>)
 800df74:	0103      	lsls	r3, r0, #4
 800df76:	4413      	add	r3, r2
 800df78:	440b      	add	r3, r1
 800df7a:	79fa      	ldrb	r2, [r7, #7]
 800df7c:	701a      	strb	r2, [r3, #0]
	//----a周辺に書き込む----
	//a北側について
	if(mouse.y != 15){										//a現在最北端でないとき
 800df7e:	4b7f      	ldr	r3, [pc, #508]	; (800e17c <write_map+0x248>)
 800df80:	785b      	ldrb	r3, [r3, #1]
 800df82:	b2db      	uxtb	r3, r3
 800df84:	2b0f      	cmp	r3, #15
 800df86:	d039      	beq.n	800dffc <write_map+0xc8>
		if(m_temp & 0x88){									//a北壁がある場合
 800df88:	79fb      	ldrb	r3, [r7, #7]
 800df8a:	f003 0388 	and.w	r3, r3, #136	; 0x88
 800df8e:	2b00      	cmp	r3, #0
 800df90:	d01a      	beq.n	800dfc8 <write_map+0x94>
			map[mouse.y + 1][mouse.x] |= 0x22;				//a北側の区画から見て南壁ありを書き込む
 800df92:	4b7a      	ldr	r3, [pc, #488]	; (800e17c <write_map+0x248>)
 800df94:	785b      	ldrb	r3, [r3, #1]
 800df96:	b2d8      	uxtb	r0, r3
 800df98:	4603      	mov	r3, r0
 800df9a:	3301      	adds	r3, #1
 800df9c:	4a77      	ldr	r2, [pc, #476]	; (800e17c <write_map+0x248>)
 800df9e:	7812      	ldrb	r2, [r2, #0]
 800dfa0:	b2d1      	uxtb	r1, r2
 800dfa2:	460c      	mov	r4, r1
 800dfa4:	4a76      	ldr	r2, [pc, #472]	; (800e180 <write_map+0x24c>)
 800dfa6:	011b      	lsls	r3, r3, #4
 800dfa8:	4413      	add	r3, r2
 800dfaa:	4423      	add	r3, r4
 800dfac:	781a      	ldrb	r2, [r3, #0]
 800dfae:	4603      	mov	r3, r0
 800dfb0:	3301      	adds	r3, #1
 800dfb2:	4608      	mov	r0, r1
 800dfb4:	f042 0222 	orr.w	r2, r2, #34	; 0x22
 800dfb8:	b2d1      	uxtb	r1, r2
 800dfba:	4a71      	ldr	r2, [pc, #452]	; (800e180 <write_map+0x24c>)
 800dfbc:	011b      	lsls	r3, r3, #4
 800dfbe:	4413      	add	r3, r2
 800dfc0:	4403      	add	r3, r0
 800dfc2:	460a      	mov	r2, r1
 800dfc4:	701a      	strb	r2, [r3, #0]
 800dfc6:	e019      	b.n	800dffc <write_map+0xc8>
		}else{												//a北壁がない場合
			map[mouse.y + 1][mouse.x] &= 0xDD;				//a北側の区画から見て南壁なしを書き込む
 800dfc8:	4b6c      	ldr	r3, [pc, #432]	; (800e17c <write_map+0x248>)
 800dfca:	785b      	ldrb	r3, [r3, #1]
 800dfcc:	b2d8      	uxtb	r0, r3
 800dfce:	4603      	mov	r3, r0
 800dfd0:	3301      	adds	r3, #1
 800dfd2:	4a6a      	ldr	r2, [pc, #424]	; (800e17c <write_map+0x248>)
 800dfd4:	7812      	ldrb	r2, [r2, #0]
 800dfd6:	b2d1      	uxtb	r1, r2
 800dfd8:	460c      	mov	r4, r1
 800dfda:	4a69      	ldr	r2, [pc, #420]	; (800e180 <write_map+0x24c>)
 800dfdc:	011b      	lsls	r3, r3, #4
 800dfde:	4413      	add	r3, r2
 800dfe0:	4423      	add	r3, r4
 800dfe2:	781a      	ldrb	r2, [r3, #0]
 800dfe4:	4603      	mov	r3, r0
 800dfe6:	3301      	adds	r3, #1
 800dfe8:	4608      	mov	r0, r1
 800dfea:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 800dfee:	b2d1      	uxtb	r1, r2
 800dff0:	4a63      	ldr	r2, [pc, #396]	; (800e180 <write_map+0x24c>)
 800dff2:	011b      	lsls	r3, r3, #4
 800dff4:	4413      	add	r3, r2
 800dff6:	4403      	add	r3, r0
 800dff8:	460a      	mov	r2, r1
 800dffa:	701a      	strb	r2, [r3, #0]
		}
	}
	//a東側について
	if(mouse.x != 15){										//a現在最東端でないとき
 800dffc:	4b5f      	ldr	r3, [pc, #380]	; (800e17c <write_map+0x248>)
 800dffe:	781b      	ldrb	r3, [r3, #0]
 800e000:	b2db      	uxtb	r3, r3
 800e002:	2b0f      	cmp	r3, #15
 800e004:	d037      	beq.n	800e076 <write_map+0x142>
		if(m_temp & 0x44){									//a東壁がある場合
 800e006:	79fb      	ldrb	r3, [r7, #7]
 800e008:	f003 0344 	and.w	r3, r3, #68	; 0x44
 800e00c:	2b00      	cmp	r3, #0
 800e00e:	d019      	beq.n	800e044 <write_map+0x110>
			map[mouse.y][mouse.x + 1] |= 0x11;				//a東側の区画から見て西壁ありを書き込む
 800e010:	4b5a      	ldr	r3, [pc, #360]	; (800e17c <write_map+0x248>)
 800e012:	785b      	ldrb	r3, [r3, #1]
 800e014:	b2dc      	uxtb	r4, r3
 800e016:	4622      	mov	r2, r4
 800e018:	4b58      	ldr	r3, [pc, #352]	; (800e17c <write_map+0x248>)
 800e01a:	781b      	ldrb	r3, [r3, #0]
 800e01c:	b2d8      	uxtb	r0, r3
 800e01e:	4603      	mov	r3, r0
 800e020:	3301      	adds	r3, #1
 800e022:	4957      	ldr	r1, [pc, #348]	; (800e180 <write_map+0x24c>)
 800e024:	0112      	lsls	r2, r2, #4
 800e026:	440a      	add	r2, r1
 800e028:	4413      	add	r3, r2
 800e02a:	781a      	ldrb	r2, [r3, #0]
 800e02c:	4603      	mov	r3, r0
 800e02e:	3301      	adds	r3, #1
 800e030:	f042 0211 	orr.w	r2, r2, #17
 800e034:	b2d0      	uxtb	r0, r2
 800e036:	4952      	ldr	r1, [pc, #328]	; (800e180 <write_map+0x24c>)
 800e038:	0122      	lsls	r2, r4, #4
 800e03a:	440a      	add	r2, r1
 800e03c:	4413      	add	r3, r2
 800e03e:	4602      	mov	r2, r0
 800e040:	701a      	strb	r2, [r3, #0]
 800e042:	e018      	b.n	800e076 <write_map+0x142>
		}else{												//a北壁がない場合
			map[mouse.y][mouse.x + 1] &= 0xEE;				//a東側の区画から見て西壁なしを書き込む
 800e044:	4b4d      	ldr	r3, [pc, #308]	; (800e17c <write_map+0x248>)
 800e046:	785b      	ldrb	r3, [r3, #1]
 800e048:	b2dc      	uxtb	r4, r3
 800e04a:	4622      	mov	r2, r4
 800e04c:	4b4b      	ldr	r3, [pc, #300]	; (800e17c <write_map+0x248>)
 800e04e:	781b      	ldrb	r3, [r3, #0]
 800e050:	b2d8      	uxtb	r0, r3
 800e052:	4603      	mov	r3, r0
 800e054:	3301      	adds	r3, #1
 800e056:	494a      	ldr	r1, [pc, #296]	; (800e180 <write_map+0x24c>)
 800e058:	0112      	lsls	r2, r2, #4
 800e05a:	440a      	add	r2, r1
 800e05c:	4413      	add	r3, r2
 800e05e:	781a      	ldrb	r2, [r3, #0]
 800e060:	4603      	mov	r3, r0
 800e062:	3301      	adds	r3, #1
 800e064:	f022 0211 	bic.w	r2, r2, #17
 800e068:	b2d0      	uxtb	r0, r2
 800e06a:	4945      	ldr	r1, [pc, #276]	; (800e180 <write_map+0x24c>)
 800e06c:	0122      	lsls	r2, r4, #4
 800e06e:	440a      	add	r2, r1
 800e070:	4413      	add	r3, r2
 800e072:	4602      	mov	r2, r0
 800e074:	701a      	strb	r2, [r3, #0]
		}
	}
	//a南壁について
	if(mouse.y != 0){										//a現在最南端でないとき
 800e076:	4b41      	ldr	r3, [pc, #260]	; (800e17c <write_map+0x248>)
 800e078:	785b      	ldrb	r3, [r3, #1]
 800e07a:	b2db      	uxtb	r3, r3
 800e07c:	2b00      	cmp	r3, #0
 800e07e:	d039      	beq.n	800e0f4 <write_map+0x1c0>
		if(m_temp & 0x22){									//a南壁がある場合
 800e080:	79fb      	ldrb	r3, [r7, #7]
 800e082:	f003 0322 	and.w	r3, r3, #34	; 0x22
 800e086:	2b00      	cmp	r3, #0
 800e088:	d01a      	beq.n	800e0c0 <write_map+0x18c>
			map[mouse.y - 1][mouse.x] |= 0x88;				//a南側の区画から見て北壁ありを書き込む
 800e08a:	4b3c      	ldr	r3, [pc, #240]	; (800e17c <write_map+0x248>)
 800e08c:	785b      	ldrb	r3, [r3, #1]
 800e08e:	b2d8      	uxtb	r0, r3
 800e090:	4603      	mov	r3, r0
 800e092:	3b01      	subs	r3, #1
 800e094:	4a39      	ldr	r2, [pc, #228]	; (800e17c <write_map+0x248>)
 800e096:	7812      	ldrb	r2, [r2, #0]
 800e098:	b2d1      	uxtb	r1, r2
 800e09a:	460c      	mov	r4, r1
 800e09c:	4a38      	ldr	r2, [pc, #224]	; (800e180 <write_map+0x24c>)
 800e09e:	011b      	lsls	r3, r3, #4
 800e0a0:	4413      	add	r3, r2
 800e0a2:	4423      	add	r3, r4
 800e0a4:	781a      	ldrb	r2, [r3, #0]
 800e0a6:	4603      	mov	r3, r0
 800e0a8:	3b01      	subs	r3, #1
 800e0aa:	4608      	mov	r0, r1
 800e0ac:	f062 0277 	orn	r2, r2, #119	; 0x77
 800e0b0:	b2d1      	uxtb	r1, r2
 800e0b2:	4a33      	ldr	r2, [pc, #204]	; (800e180 <write_map+0x24c>)
 800e0b4:	011b      	lsls	r3, r3, #4
 800e0b6:	4413      	add	r3, r2
 800e0b8:	4403      	add	r3, r0
 800e0ba:	460a      	mov	r2, r1
 800e0bc:	701a      	strb	r2, [r3, #0]
 800e0be:	e019      	b.n	800e0f4 <write_map+0x1c0>
		}else{												//a南壁がない場合
			map[mouse.y - 1][mouse.x] &= 0x77;				//a南側の区画から見て北壁なしを書き込む
 800e0c0:	4b2e      	ldr	r3, [pc, #184]	; (800e17c <write_map+0x248>)
 800e0c2:	785b      	ldrb	r3, [r3, #1]
 800e0c4:	b2d8      	uxtb	r0, r3
 800e0c6:	4603      	mov	r3, r0
 800e0c8:	3b01      	subs	r3, #1
 800e0ca:	4a2c      	ldr	r2, [pc, #176]	; (800e17c <write_map+0x248>)
 800e0cc:	7812      	ldrb	r2, [r2, #0]
 800e0ce:	b2d1      	uxtb	r1, r2
 800e0d0:	460c      	mov	r4, r1
 800e0d2:	4a2b      	ldr	r2, [pc, #172]	; (800e180 <write_map+0x24c>)
 800e0d4:	011b      	lsls	r3, r3, #4
 800e0d6:	4413      	add	r3, r2
 800e0d8:	4423      	add	r3, r4
 800e0da:	781a      	ldrb	r2, [r3, #0]
 800e0dc:	4603      	mov	r3, r0
 800e0de:	3b01      	subs	r3, #1
 800e0e0:	4608      	mov	r0, r1
 800e0e2:	f002 0277 	and.w	r2, r2, #119	; 0x77
 800e0e6:	b2d1      	uxtb	r1, r2
 800e0e8:	4a25      	ldr	r2, [pc, #148]	; (800e180 <write_map+0x24c>)
 800e0ea:	011b      	lsls	r3, r3, #4
 800e0ec:	4413      	add	r3, r2
 800e0ee:	4403      	add	r3, r0
 800e0f0:	460a      	mov	r2, r1
 800e0f2:	701a      	strb	r2, [r3, #0]
		}
	}
	//a西側について
	if(mouse.x != 0){										//a現在最西端でないとき
 800e0f4:	4b21      	ldr	r3, [pc, #132]	; (800e17c <write_map+0x248>)
 800e0f6:	781b      	ldrb	r3, [r3, #0]
 800e0f8:	b2db      	uxtb	r3, r3
 800e0fa:	2b00      	cmp	r3, #0
 800e0fc:	d037      	beq.n	800e16e <write_map+0x23a>
		if(m_temp & 0x11){									//a西壁がある場合
 800e0fe:	79fb      	ldrb	r3, [r7, #7]
 800e100:	f003 0311 	and.w	r3, r3, #17
 800e104:	2b00      	cmp	r3, #0
 800e106:	d019      	beq.n	800e13c <write_map+0x208>
			map[mouse.y][mouse.x - 1] |= 0x44;				//a西側の区画から見て東壁ありを書き込む
 800e108:	4b1c      	ldr	r3, [pc, #112]	; (800e17c <write_map+0x248>)
 800e10a:	785b      	ldrb	r3, [r3, #1]
 800e10c:	b2dc      	uxtb	r4, r3
 800e10e:	4622      	mov	r2, r4
 800e110:	4b1a      	ldr	r3, [pc, #104]	; (800e17c <write_map+0x248>)
 800e112:	781b      	ldrb	r3, [r3, #0]
 800e114:	b2d8      	uxtb	r0, r3
 800e116:	4603      	mov	r3, r0
 800e118:	3b01      	subs	r3, #1
 800e11a:	4919      	ldr	r1, [pc, #100]	; (800e180 <write_map+0x24c>)
 800e11c:	0112      	lsls	r2, r2, #4
 800e11e:	440a      	add	r2, r1
 800e120:	4413      	add	r3, r2
 800e122:	781a      	ldrb	r2, [r3, #0]
 800e124:	4603      	mov	r3, r0
 800e126:	3b01      	subs	r3, #1
 800e128:	f042 0244 	orr.w	r2, r2, #68	; 0x44
 800e12c:	b2d0      	uxtb	r0, r2
 800e12e:	4914      	ldr	r1, [pc, #80]	; (800e180 <write_map+0x24c>)
 800e130:	0122      	lsls	r2, r4, #4
 800e132:	440a      	add	r2, r1
 800e134:	4413      	add	r3, r2
 800e136:	4602      	mov	r2, r0
 800e138:	701a      	strb	r2, [r3, #0]
		}else{												//a西壁がない場合
			map[mouse.y][mouse.x - 1] &= 0xBB;				//a西側の区画から見て東側なしを書き込む
		}
	}
}
 800e13a:	e018      	b.n	800e16e <write_map+0x23a>
			map[mouse.y][mouse.x - 1] &= 0xBB;				//a西側の区画から見て東側なしを書き込む
 800e13c:	4b0f      	ldr	r3, [pc, #60]	; (800e17c <write_map+0x248>)
 800e13e:	785b      	ldrb	r3, [r3, #1]
 800e140:	b2dc      	uxtb	r4, r3
 800e142:	4622      	mov	r2, r4
 800e144:	4b0d      	ldr	r3, [pc, #52]	; (800e17c <write_map+0x248>)
 800e146:	781b      	ldrb	r3, [r3, #0]
 800e148:	b2d8      	uxtb	r0, r3
 800e14a:	4603      	mov	r3, r0
 800e14c:	3b01      	subs	r3, #1
 800e14e:	490c      	ldr	r1, [pc, #48]	; (800e180 <write_map+0x24c>)
 800e150:	0112      	lsls	r2, r2, #4
 800e152:	440a      	add	r2, r1
 800e154:	4413      	add	r3, r2
 800e156:	781a      	ldrb	r2, [r3, #0]
 800e158:	4603      	mov	r3, r0
 800e15a:	3b01      	subs	r3, #1
 800e15c:	f022 0244 	bic.w	r2, r2, #68	; 0x44
 800e160:	b2d0      	uxtb	r0, r2
 800e162:	4907      	ldr	r1, [pc, #28]	; (800e180 <write_map+0x24c>)
 800e164:	0122      	lsls	r2, r4, #4
 800e166:	440a      	add	r2, r1
 800e168:	4413      	add	r3, r2
 800e16a:	4602      	mov	r2, r0
 800e16c:	701a      	strb	r2, [r3, #0]
}
 800e16e:	bf00      	nop
 800e170:	3708      	adds	r7, #8
 800e172:	46bd      	mov	sp, r7
 800e174:	bc90      	pop	{r4, r7}
 800e176:	4770      	bx	lr
 800e178:	200002c8 	.word	0x200002c8
 800e17c:	20000c0c 	.word	0x20000c0c
 800e180:	200001ac 	.word	0x200001ac
 800e184:	00000000 	.word	0x00000000

0800e188 <turn_dir>:
//turn_dir
//aマウスの方向を変更する
//a引数1：t_pat …… 回転方向(search.hでマクロ定義)
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void turn_dir(uint8_t t_pat, uint8_t t_mode){
 800e188:	b590      	push	{r4, r7, lr}
 800e18a:	b083      	sub	sp, #12
 800e18c:	af00      	add	r7, sp, #0
 800e18e:	4603      	mov	r3, r0
 800e190:	460a      	mov	r2, r1
 800e192:	71fb      	strb	r3, [r7, #7]
 800e194:	4613      	mov	r3, r2
 800e196:	71bb      	strb	r3, [r7, #6]

	//====a方向を変更====
	if(t_mode < 2){												//4方位モード
 800e198:	79bb      	ldrb	r3, [r7, #6]
 800e19a:	2b01      	cmp	r3, #1
 800e19c:	d840      	bhi.n	800e220 <turn_dir+0x98>
		mouse.dir = (mouse.dir + t_pat) & 0x03;					//a指定された分mouse.dirを回転させる
 800e19e:	4b60      	ldr	r3, [pc, #384]	; (800e320 <turn_dir+0x198>)
 800e1a0:	789b      	ldrb	r3, [r3, #2]
 800e1a2:	b2da      	uxtb	r2, r3
 800e1a4:	79fb      	ldrb	r3, [r7, #7]
 800e1a6:	4413      	add	r3, r2
 800e1a8:	b2db      	uxtb	r3, r3
 800e1aa:	f003 0303 	and.w	r3, r3, #3
 800e1ae:	b2da      	uxtb	r2, r3
 800e1b0:	4b5b      	ldr	r3, [pc, #364]	; (800e320 <turn_dir+0x198>)
 800e1b2:	709a      	strb	r2, [r3, #2]
		if(t_mode == 1){
 800e1b4:	79bb      	ldrb	r3, [r7, #6]
 800e1b6:	2b01      	cmp	r3, #1
 800e1b8:	f040 80a8 	bne.w	800e30c <turn_dir+0x184>
			if(t_pat == 0x01) target_degree_z -= 90.5;			//a目標角度+右90度
 800e1bc:	79fb      	ldrb	r3, [r7, #7]
 800e1be:	2b01      	cmp	r3, #1
 800e1c0:	d109      	bne.n	800e1d6 <turn_dir+0x4e>
 800e1c2:	4b58      	ldr	r3, [pc, #352]	; (800e324 <turn_dir+0x19c>)
 800e1c4:	edd3 7a00 	vldr	s15, [r3]
 800e1c8:	ed9f 7a57 	vldr	s14, [pc, #348]	; 800e328 <turn_dir+0x1a0>
 800e1cc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e1d0:	4b54      	ldr	r3, [pc, #336]	; (800e324 <turn_dir+0x19c>)
 800e1d2:	edc3 7a00 	vstr	s15, [r3]
//			if(t_pat == 0xff) target_degree_z += 90.5;			//a目標角度+左90度
			if(t_pat == 0xff) target_degree_z += 90.3;			//a目標角度+左90度
 800e1d6:	79fb      	ldrb	r3, [r7, #7]
 800e1d8:	2bff      	cmp	r3, #255	; 0xff
 800e1da:	d112      	bne.n	800e202 <turn_dir+0x7a>
 800e1dc:	4b51      	ldr	r3, [pc, #324]	; (800e324 <turn_dir+0x19c>)
 800e1de:	681b      	ldr	r3, [r3, #0]
 800e1e0:	4618      	mov	r0, r3
 800e1e2:	f7f2 f9a9 	bl	8000538 <__aeabi_f2d>
 800e1e6:	a34c      	add	r3, pc, #304	; (adr r3, 800e318 <turn_dir+0x190>)
 800e1e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1ec:	f7f2 f846 	bl	800027c <__adddf3>
 800e1f0:	4603      	mov	r3, r0
 800e1f2:	460c      	mov	r4, r1
 800e1f4:	4618      	mov	r0, r3
 800e1f6:	4621      	mov	r1, r4
 800e1f8:	f7f2 fcce 	bl	8000b98 <__aeabi_d2f>
 800e1fc:	4602      	mov	r2, r0
 800e1fe:	4b49      	ldr	r3, [pc, #292]	; (800e324 <turn_dir+0x19c>)
 800e200:	601a      	str	r2, [r3, #0]
			if(t_pat == 0x02) target_degree_z -= 181;			//a目標角度+右180度
 800e202:	79fb      	ldrb	r3, [r7, #7]
 800e204:	2b02      	cmp	r3, #2
 800e206:	f040 8081 	bne.w	800e30c <turn_dir+0x184>
 800e20a:	4b46      	ldr	r3, [pc, #280]	; (800e324 <turn_dir+0x19c>)
 800e20c:	edd3 7a00 	vldr	s15, [r3]
 800e210:	ed9f 7a46 	vldr	s14, [pc, #280]	; 800e32c <turn_dir+0x1a4>
 800e214:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e218:	4b42      	ldr	r3, [pc, #264]	; (800e324 <turn_dir+0x19c>)
 800e21a:	edc3 7a00 	vstr	s15, [r3]
			if(t_pat == 0xfe) target_degree_z += 90.5;			//a目標角度+左90度
			if(t_pat == 0xfd) target_degree_z += 135.75;		//a目標角度+右180度
			if(t_pat == 0xfc) target_degree_z += 181;			//a目標角度+右180度
		}
	}
}
 800e21e:	e075      	b.n	800e30c <turn_dir+0x184>
		mouse.dir = (mouse.dir + t_pat) & 0x07;					//a指定された分mouse.dirを回転させる
 800e220:	4b3f      	ldr	r3, [pc, #252]	; (800e320 <turn_dir+0x198>)
 800e222:	789b      	ldrb	r3, [r3, #2]
 800e224:	b2da      	uxtb	r2, r3
 800e226:	79fb      	ldrb	r3, [r7, #7]
 800e228:	4413      	add	r3, r2
 800e22a:	b2db      	uxtb	r3, r3
 800e22c:	f003 0307 	and.w	r3, r3, #7
 800e230:	b2da      	uxtb	r2, r3
 800e232:	4b3b      	ldr	r3, [pc, #236]	; (800e320 <turn_dir+0x198>)
 800e234:	709a      	strb	r2, [r3, #2]
		if(t_mode == 3){
 800e236:	79bb      	ldrb	r3, [r7, #6]
 800e238:	2b03      	cmp	r3, #3
 800e23a:	d167      	bne.n	800e30c <turn_dir+0x184>
			if(t_pat == 0x01) target_degree_z -= 45.25;			//a目標角度+右90度
 800e23c:	79fb      	ldrb	r3, [r7, #7]
 800e23e:	2b01      	cmp	r3, #1
 800e240:	d109      	bne.n	800e256 <turn_dir+0xce>
 800e242:	4b38      	ldr	r3, [pc, #224]	; (800e324 <turn_dir+0x19c>)
 800e244:	edd3 7a00 	vldr	s15, [r3]
 800e248:	ed9f 7a39 	vldr	s14, [pc, #228]	; 800e330 <turn_dir+0x1a8>
 800e24c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e250:	4b34      	ldr	r3, [pc, #208]	; (800e324 <turn_dir+0x19c>)
 800e252:	edc3 7a00 	vstr	s15, [r3]
			if(t_pat == 0x02) target_degree_z -= 90.5;			//a目標角度+左90度
 800e256:	79fb      	ldrb	r3, [r7, #7]
 800e258:	2b02      	cmp	r3, #2
 800e25a:	d109      	bne.n	800e270 <turn_dir+0xe8>
 800e25c:	4b31      	ldr	r3, [pc, #196]	; (800e324 <turn_dir+0x19c>)
 800e25e:	edd3 7a00 	vldr	s15, [r3]
 800e262:	ed9f 7a31 	vldr	s14, [pc, #196]	; 800e328 <turn_dir+0x1a0>
 800e266:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e26a:	4b2e      	ldr	r3, [pc, #184]	; (800e324 <turn_dir+0x19c>)
 800e26c:	edc3 7a00 	vstr	s15, [r3]
			if(t_pat == 0x03) target_degree_z -= 135.75;		//a目標角度+右180度
 800e270:	79fb      	ldrb	r3, [r7, #7]
 800e272:	2b03      	cmp	r3, #3
 800e274:	d109      	bne.n	800e28a <turn_dir+0x102>
 800e276:	4b2b      	ldr	r3, [pc, #172]	; (800e324 <turn_dir+0x19c>)
 800e278:	edd3 7a00 	vldr	s15, [r3]
 800e27c:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 800e334 <turn_dir+0x1ac>
 800e280:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e284:	4b27      	ldr	r3, [pc, #156]	; (800e324 <turn_dir+0x19c>)
 800e286:	edc3 7a00 	vstr	s15, [r3]
			if(t_pat == 0x04) target_degree_z -= 181;			//a目標角度+右180度
 800e28a:	79fb      	ldrb	r3, [r7, #7]
 800e28c:	2b04      	cmp	r3, #4
 800e28e:	d109      	bne.n	800e2a4 <turn_dir+0x11c>
 800e290:	4b24      	ldr	r3, [pc, #144]	; (800e324 <turn_dir+0x19c>)
 800e292:	edd3 7a00 	vldr	s15, [r3]
 800e296:	ed9f 7a25 	vldr	s14, [pc, #148]	; 800e32c <turn_dir+0x1a4>
 800e29a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e29e:	4b21      	ldr	r3, [pc, #132]	; (800e324 <turn_dir+0x19c>)
 800e2a0:	edc3 7a00 	vstr	s15, [r3]
			if(t_pat == 0xff) target_degree_z += 45.25;			//a目標角度+右90度
 800e2a4:	79fb      	ldrb	r3, [r7, #7]
 800e2a6:	2bff      	cmp	r3, #255	; 0xff
 800e2a8:	d109      	bne.n	800e2be <turn_dir+0x136>
 800e2aa:	4b1e      	ldr	r3, [pc, #120]	; (800e324 <turn_dir+0x19c>)
 800e2ac:	edd3 7a00 	vldr	s15, [r3]
 800e2b0:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 800e330 <turn_dir+0x1a8>
 800e2b4:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e2b8:	4b1a      	ldr	r3, [pc, #104]	; (800e324 <turn_dir+0x19c>)
 800e2ba:	edc3 7a00 	vstr	s15, [r3]
			if(t_pat == 0xfe) target_degree_z += 90.5;			//a目標角度+左90度
 800e2be:	79fb      	ldrb	r3, [r7, #7]
 800e2c0:	2bfe      	cmp	r3, #254	; 0xfe
 800e2c2:	d109      	bne.n	800e2d8 <turn_dir+0x150>
 800e2c4:	4b17      	ldr	r3, [pc, #92]	; (800e324 <turn_dir+0x19c>)
 800e2c6:	edd3 7a00 	vldr	s15, [r3]
 800e2ca:	ed9f 7a17 	vldr	s14, [pc, #92]	; 800e328 <turn_dir+0x1a0>
 800e2ce:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e2d2:	4b14      	ldr	r3, [pc, #80]	; (800e324 <turn_dir+0x19c>)
 800e2d4:	edc3 7a00 	vstr	s15, [r3]
			if(t_pat == 0xfd) target_degree_z += 135.75;		//a目標角度+右180度
 800e2d8:	79fb      	ldrb	r3, [r7, #7]
 800e2da:	2bfd      	cmp	r3, #253	; 0xfd
 800e2dc:	d109      	bne.n	800e2f2 <turn_dir+0x16a>
 800e2de:	4b11      	ldr	r3, [pc, #68]	; (800e324 <turn_dir+0x19c>)
 800e2e0:	edd3 7a00 	vldr	s15, [r3]
 800e2e4:	ed9f 7a13 	vldr	s14, [pc, #76]	; 800e334 <turn_dir+0x1ac>
 800e2e8:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e2ec:	4b0d      	ldr	r3, [pc, #52]	; (800e324 <turn_dir+0x19c>)
 800e2ee:	edc3 7a00 	vstr	s15, [r3]
			if(t_pat == 0xfc) target_degree_z += 181;			//a目標角度+右180度
 800e2f2:	79fb      	ldrb	r3, [r7, #7]
 800e2f4:	2bfc      	cmp	r3, #252	; 0xfc
 800e2f6:	d109      	bne.n	800e30c <turn_dir+0x184>
 800e2f8:	4b0a      	ldr	r3, [pc, #40]	; (800e324 <turn_dir+0x19c>)
 800e2fa:	edd3 7a00 	vldr	s15, [r3]
 800e2fe:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 800e32c <turn_dir+0x1a4>
 800e302:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e306:	4b07      	ldr	r3, [pc, #28]	; (800e324 <turn_dir+0x19c>)
 800e308:	edc3 7a00 	vstr	s15, [r3]
}
 800e30c:	bf00      	nop
 800e30e:	370c      	adds	r7, #12
 800e310:	46bd      	mov	sp, r7
 800e312:	bd90      	pop	{r4, r7, pc}
 800e314:	f3af 8000 	nop.w
 800e318:	33333333 	.word	0x33333333
 800e31c:	40569333 	.word	0x40569333
 800e320:	20000c0c 	.word	0x20000c0c
 800e324:	20000bf8 	.word	0x20000bf8
 800e328:	42b50000 	.word	0x42b50000
 800e32c:	43350000 	.word	0x43350000
 800e330:	42350000 	.word	0x42350000
 800e334:	4307c000 	.word	0x4307c000

0800e338 <make_smap>:
//make_smap
//a歩数マップを作成する
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void make_smap(void){
 800e338:	b490      	push	{r4, r7}
 800e33a:	b08c      	sub	sp, #48	; 0x30
 800e33c:	af00      	add	r7, sp, #0
	//====a変数宣言====
	uint8_t x, y;											//for文用変数
	uint8_t m_temp_sample[16];

	//====a歩数マップのクリア====
	for(y = 0; y <= 15; y++){								//a各Y座標で実行
 800e33e:	2300      	movs	r3, #0
 800e340:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 800e344:	e01c      	b.n	800e380 <make_smap+0x48>
		for(x = 0; x <= 15; x++){							//a各X座標で実行
 800e346:	2300      	movs	r3, #0
 800e348:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800e34c:	e00f      	b.n	800e36e <make_smap+0x36>
			smap[y][x] = 0x03e7;							//a未記入部分は歩数最大とする
 800e34e:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800e352:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e356:	49ae      	ldr	r1, [pc, #696]	; (800e610 <make_smap+0x2d8>)
 800e358:	0112      	lsls	r2, r2, #4
 800e35a:	4413      	add	r3, r2
 800e35c:	f240 32e7 	movw	r2, #999	; 0x3e7
 800e360:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for(x = 0; x <= 15; x++){							//a各X座標で実行
 800e364:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e368:	3301      	adds	r3, #1
 800e36a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800e36e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e372:	2b0f      	cmp	r3, #15
 800e374:	d9eb      	bls.n	800e34e <make_smap+0x16>
	for(y = 0; y <= 15; y++){								//a各Y座標で実行
 800e376:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800e37a:	3301      	adds	r3, #1
 800e37c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 800e380:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800e384:	2b0f      	cmp	r3, #15
 800e386:	d9de      	bls.n	800e346 <make_smap+0xe>
		}
	}

	//====aゴール座標を0にする====
	m_step = 0;												//a歩数カウンタを0にする
 800e388:	4ba2      	ldr	r3, [pc, #648]	; (800e614 <make_smap+0x2dc>)
 800e38a:	2200      	movs	r2, #0
 800e38c:	801a      	strh	r2, [r3, #0]
	smap[goal_y][goal_x] = 0;
 800e38e:	4ba2      	ldr	r3, [pc, #648]	; (800e618 <make_smap+0x2e0>)
 800e390:	781b      	ldrb	r3, [r3, #0]
 800e392:	4618      	mov	r0, r3
 800e394:	4ba1      	ldr	r3, [pc, #644]	; (800e61c <make_smap+0x2e4>)
 800e396:	781b      	ldrb	r3, [r3, #0]
 800e398:	4619      	mov	r1, r3
 800e39a:	4a9d      	ldr	r2, [pc, #628]	; (800e610 <make_smap+0x2d8>)
 800e39c:	0103      	lsls	r3, r0, #4
 800e39e:	440b      	add	r3, r1
 800e3a0:	2100      	movs	r1, #0
 800e3a2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

	//====a歩数カウンタの重みづけ====
	int straight = 3;
 800e3a6:	2303      	movs	r3, #3
 800e3a8:	61bb      	str	r3, [r7, #24]
	int turn = 5;
 800e3aa:	2305      	movs	r3, #5
 800e3ac:	617b      	str	r3, [r7, #20]

	//====a自分の座標にたどり着くまでループ====
	do{
		//----aマップ全域を捜索----
		for(y = 0; y <= 15; y++){							//a各Y座標で実行
 800e3ae:	2300      	movs	r3, #0
 800e3b0:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 800e3b4:	e331      	b.n	800ea1a <make_smap+0x6e2>
			for(x = 0; x <= 15; x++){						//a各X座標で実行
 800e3b6:	2300      	movs	r3, #0
 800e3b8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800e3bc:	e323      	b.n	800ea06 <make_smap+0x6ce>
				//----a現在最大の歩数を発見したとき----
				if(smap[y][x] == m_step){					//a歩数カウンタm_stepの値が現在最大の歩数
 800e3be:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800e3c2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e3c6:	4992      	ldr	r1, [pc, #584]	; (800e610 <make_smap+0x2d8>)
 800e3c8:	0112      	lsls	r2, r2, #4
 800e3ca:	4413      	add	r3, r2
 800e3cc:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 800e3d0:	4b90      	ldr	r3, [pc, #576]	; (800e614 <make_smap+0x2dc>)
 800e3d2:	881b      	ldrh	r3, [r3, #0]
 800e3d4:	429a      	cmp	r2, r3
 800e3d6:	f040 8311 	bne.w	800e9fc <make_smap+0x6c4>
					uint8_t m_temp = map[y][x];				//map配列からマップデータを取り出す
 800e3da:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800e3de:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e3e2:	498f      	ldr	r1, [pc, #572]	; (800e620 <make_smap+0x2e8>)
 800e3e4:	0112      	lsls	r2, r2, #4
 800e3e6:	440a      	add	r2, r1
 800e3e8:	4413      	add	r3, r2
 800e3ea:	781b      	ldrb	r3, [r3, #0]
 800e3ec:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
					if(MF.FLAG.SCND){						//a二次走行用のマップを作成する場合（二次走行時はMF.FLAG.SCNDが立っている）
 800e3f0:	4b8c      	ldr	r3, [pc, #560]	; (800e624 <make_smap+0x2ec>)
 800e3f2:	881b      	ldrh	r3, [r3, #0]
 800e3f4:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800e3f8:	b2db      	uxtb	r3, r3
 800e3fa:	2b00      	cmp	r3, #0
 800e3fc:	d004      	beq.n	800e408 <make_smap+0xd0>
						m_temp >>= 4;						//a上位4bitを使うので4bit分右にシフトさせる
 800e3fe:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800e402:	091b      	lsrs	r3, r3, #4
 800e404:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
					}
					//----a北壁についての処理----
					if(!(m_temp & 0x08) && y != 15){		//a北壁がなく現在最北端でないとき
 800e408:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800e40c:	f003 0308 	and.w	r3, r3, #8
 800e410:	2b00      	cmp	r3, #0
 800e412:	f040 80b4 	bne.w	800e57e <make_smap+0x246>
 800e416:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800e41a:	2b0f      	cmp	r3, #15
 800e41c:	f000 80af 	beq.w	800e57e <make_smap+0x246>
//						if(smap[y+1][x] == 0x03e7){			//a北側が未記入なら
						if(smap[y+1][x] >= (smap[y][x]+turn)){		//a北側が記入後より大きいなら
 800e420:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800e424:	1c5a      	adds	r2, r3, #1
 800e426:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e42a:	4979      	ldr	r1, [pc, #484]	; (800e610 <make_smap+0x2d8>)
 800e42c:	0112      	lsls	r2, r2, #4
 800e42e:	4413      	add	r3, r2
 800e430:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800e434:	4618      	mov	r0, r3
 800e436:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800e43a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e43e:	4974      	ldr	r1, [pc, #464]	; (800e610 <make_smap+0x2d8>)
 800e440:	0112      	lsls	r2, r2, #4
 800e442:	4413      	add	r3, r2
 800e444:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800e448:	461a      	mov	r2, r3
 800e44a:	697b      	ldr	r3, [r7, #20]
 800e44c:	4413      	add	r3, r2
 800e44e:	4298      	cmp	r0, r3
 800e450:	f2c0 8095 	blt.w	800e57e <make_smap+0x246>
							smap[y+1][x] = smap[y][x] + turn;		//a次の歩数を書き込む
 800e454:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800e458:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e45c:	496c      	ldr	r1, [pc, #432]	; (800e610 <make_smap+0x2d8>)
 800e45e:	0112      	lsls	r2, r2, #4
 800e460:	4413      	add	r3, r2
 800e462:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 800e466:	697b      	ldr	r3, [r7, #20]
 800e468:	b299      	uxth	r1, r3
 800e46a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800e46e:	1c5a      	adds	r2, r3, #1
 800e470:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e474:	4401      	add	r1, r0
 800e476:	b288      	uxth	r0, r1
 800e478:	4965      	ldr	r1, [pc, #404]	; (800e610 <make_smap+0x2d8>)
 800e47a:	0112      	lsls	r2, r2, #4
 800e47c:	4413      	add	r3, r2
 800e47e:	4602      	mov	r2, r0
 800e480:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
							if(MF.FLAG.STRAIGHT){
 800e484:	4b67      	ldr	r3, [pc, #412]	; (800e624 <make_smap+0x2ec>)
 800e486:	881b      	ldrh	r3, [r3, #0]
 800e488:	f3c3 2380 	ubfx	r3, r3, #10, #1
 800e48c:	b2db      	uxtb	r3, r3
 800e48e:	2b00      	cmp	r3, #0
 800e490:	d075      	beq.n	800e57e <make_smap+0x246>
								//----a直線優先処理----
								for(int k=1; k<16-y; k++) {					//a現在座標から見て北のマスすべてにおいて
 800e492:	2301      	movs	r3, #1
 800e494:	62bb      	str	r3, [r7, #40]	; 0x28
 800e496:	e06b      	b.n	800e570 <make_smap+0x238>
									m_temp_sample[k] = map[y+k][x];				//map配列からマップデータを取り出す
 800e498:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800e49c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e49e:	441a      	add	r2, r3
 800e4a0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e4a4:	495e      	ldr	r1, [pc, #376]	; (800e620 <make_smap+0x2e8>)
 800e4a6:	0112      	lsls	r2, r2, #4
 800e4a8:	440a      	add	r2, r1
 800e4aa:	4413      	add	r3, r2
 800e4ac:	7819      	ldrb	r1, [r3, #0]
 800e4ae:	1d3a      	adds	r2, r7, #4
 800e4b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4b2:	4413      	add	r3, r2
 800e4b4:	460a      	mov	r2, r1
 800e4b6:	701a      	strb	r2, [r3, #0]
									if(MF.FLAG.SCND) m_temp_sample[k] >>= 4;		//a二次走行用のマップを作成する場合上位4bitを使うので4bit分右にシフトさせる
 800e4b8:	4b5a      	ldr	r3, [pc, #360]	; (800e624 <make_smap+0x2ec>)
 800e4ba:	881b      	ldrh	r3, [r3, #0]
 800e4bc:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800e4c0:	b2db      	uxtb	r3, r3
 800e4c2:	2b00      	cmp	r3, #0
 800e4c4:	d00a      	beq.n	800e4dc <make_smap+0x1a4>
 800e4c6:	1d3a      	adds	r2, r7, #4
 800e4c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4ca:	4413      	add	r3, r2
 800e4cc:	781b      	ldrb	r3, [r3, #0]
 800e4ce:	091b      	lsrs	r3, r3, #4
 800e4d0:	b2d9      	uxtb	r1, r3
 800e4d2:	1d3a      	adds	r2, r7, #4
 800e4d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4d6:	4413      	add	r3, r2
 800e4d8:	460a      	mov	r2, r1
 800e4da:	701a      	strb	r2, [r3, #0]
									if(!(m_temp_sample[k] & 0x08) && (y+k) != 15) {		//a北壁がなく現在最北端でないとき
 800e4dc:	1d3a      	adds	r2, r7, #4
 800e4de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4e0:	4413      	add	r3, r2
 800e4e2:	781b      	ldrb	r3, [r3, #0]
 800e4e4:	f003 0308 	and.w	r3, r3, #8
 800e4e8:	2b00      	cmp	r3, #0
 800e4ea:	d148      	bne.n	800e57e <make_smap+0x246>
 800e4ec:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800e4f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4f2:	4413      	add	r3, r2
 800e4f4:	2b0f      	cmp	r3, #15
 800e4f6:	d042      	beq.n	800e57e <make_smap+0x246>
//										if(smap[y+k+1][x] == 0x03e7) {						//a北側が未記入なら
										if(smap[y+k+1][x] >= (smap[y+k][x]+straight)){		//a北側が記入後より大きいなら
 800e4f8:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800e4fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4fe:	4413      	add	r3, r2
 800e500:	1c5a      	adds	r2, r3, #1
 800e502:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e506:	4942      	ldr	r1, [pc, #264]	; (800e610 <make_smap+0x2d8>)
 800e508:	0112      	lsls	r2, r2, #4
 800e50a:	4413      	add	r3, r2
 800e50c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800e510:	4618      	mov	r0, r3
 800e512:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800e516:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e518:	441a      	add	r2, r3
 800e51a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e51e:	493c      	ldr	r1, [pc, #240]	; (800e610 <make_smap+0x2d8>)
 800e520:	0112      	lsls	r2, r2, #4
 800e522:	4413      	add	r3, r2
 800e524:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800e528:	461a      	mov	r2, r3
 800e52a:	69bb      	ldr	r3, [r7, #24]
 800e52c:	4413      	add	r3, r2
 800e52e:	4298      	cmp	r0, r3
 800e530:	db1b      	blt.n	800e56a <make_smap+0x232>
											smap[y+k+1][x] = smap[y+k][x] + straight;		//a直線分インクリメントした値を次のマスの歩数マップに書き込む
 800e532:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800e536:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e538:	441a      	add	r2, r3
 800e53a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e53e:	4934      	ldr	r1, [pc, #208]	; (800e610 <make_smap+0x2d8>)
 800e540:	0112      	lsls	r2, r2, #4
 800e542:	4413      	add	r3, r2
 800e544:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 800e548:	69bb      	ldr	r3, [r7, #24]
 800e54a:	b299      	uxth	r1, r3
 800e54c:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800e550:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e552:	4413      	add	r3, r2
 800e554:	1c5a      	adds	r2, r3, #1
 800e556:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e55a:	4401      	add	r1, r0
 800e55c:	b288      	uxth	r0, r1
 800e55e:	492c      	ldr	r1, [pc, #176]	; (800e610 <make_smap+0x2d8>)
 800e560:	0112      	lsls	r2, r2, #4
 800e562:	4413      	add	r3, r2
 800e564:	4602      	mov	r2, r0
 800e566:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
								for(int k=1; k<16-y; k++) {					//a現在座標から見て北のマスすべてにおいて
 800e56a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e56c:	3301      	adds	r3, #1
 800e56e:	62bb      	str	r3, [r7, #40]	; 0x28
 800e570:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800e574:	f1c3 0310 	rsb	r3, r3, #16
 800e578:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e57a:	429a      	cmp	r2, r3
 800e57c:	db8c      	blt.n	800e498 <make_smap+0x160>
								}
							}
						}
					}
					//----a東壁についての処理----
					if(!(m_temp & 0x04) && x != 15){		//a東壁がなく現在最東端でないとき
 800e57e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800e582:	f003 0304 	and.w	r3, r3, #4
 800e586:	2b00      	cmp	r3, #0
 800e588:	f040 80c1 	bne.w	800e70e <make_smap+0x3d6>
 800e58c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e590:	2b0f      	cmp	r3, #15
 800e592:	f000 80bc 	beq.w	800e70e <make_smap+0x3d6>
//						if(smap[y][x+1] == 0x03e7){			//a東側が未記入なら
						if(smap[y][x+1] >= (smap[y][x]+turn)){	//a東側が記入後より大きいなら
 800e596:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800e59a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e59e:	3301      	adds	r3, #1
 800e5a0:	491b      	ldr	r1, [pc, #108]	; (800e610 <make_smap+0x2d8>)
 800e5a2:	0112      	lsls	r2, r2, #4
 800e5a4:	4413      	add	r3, r2
 800e5a6:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800e5aa:	4618      	mov	r0, r3
 800e5ac:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800e5b0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e5b4:	4916      	ldr	r1, [pc, #88]	; (800e610 <make_smap+0x2d8>)
 800e5b6:	0112      	lsls	r2, r2, #4
 800e5b8:	4413      	add	r3, r2
 800e5ba:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800e5be:	461a      	mov	r2, r3
 800e5c0:	697b      	ldr	r3, [r7, #20]
 800e5c2:	4413      	add	r3, r2
 800e5c4:	4298      	cmp	r0, r3
 800e5c6:	f2c0 80a2 	blt.w	800e70e <make_smap+0x3d6>
							smap[y][x+1] = smap[y][x] + turn;	//a次の歩数を書き込む
 800e5ca:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800e5ce:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e5d2:	490f      	ldr	r1, [pc, #60]	; (800e610 <make_smap+0x2d8>)
 800e5d4:	0112      	lsls	r2, r2, #4
 800e5d6:	4413      	add	r3, r2
 800e5d8:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 800e5dc:	697b      	ldr	r3, [r7, #20]
 800e5de:	b299      	uxth	r1, r3
 800e5e0:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800e5e4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e5e8:	3301      	adds	r3, #1
 800e5ea:	4401      	add	r1, r0
 800e5ec:	b288      	uxth	r0, r1
 800e5ee:	4908      	ldr	r1, [pc, #32]	; (800e610 <make_smap+0x2d8>)
 800e5f0:	0112      	lsls	r2, r2, #4
 800e5f2:	4413      	add	r3, r2
 800e5f4:	4602      	mov	r2, r0
 800e5f6:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
							if(MF.FLAG.STRAIGHT){
 800e5fa:	4b0a      	ldr	r3, [pc, #40]	; (800e624 <make_smap+0x2ec>)
 800e5fc:	881b      	ldrh	r3, [r3, #0]
 800e5fe:	f3c3 2380 	ubfx	r3, r3, #10, #1
 800e602:	b2db      	uxtb	r3, r3
 800e604:	2b00      	cmp	r3, #0
 800e606:	f000 8082 	beq.w	800e70e <make_smap+0x3d6>
								//----a直線優先処理----
								for(int k=1; k<16-x; k++) {					//a現在座標から見て東のマスすべてにおいて
 800e60a:	2301      	movs	r3, #1
 800e60c:	627b      	str	r3, [r7, #36]	; 0x24
 800e60e:	e077      	b.n	800e700 <make_smap+0x3c8>
 800e610:	20000d60 	.word	0x20000d60
 800e614:	2000034e 	.word	0x2000034e
 800e618:	20000b4c 	.word	0x20000b4c
 800e61c:	20000bb0 	.word	0x20000bb0
 800e620:	200001ac 	.word	0x200001ac
 800e624:	20000f68 	.word	0x20000f68
									m_temp_sample[k] = map[y][x+k];				//map配列からマップデータを取り出す
 800e628:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800e62c:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 800e630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e632:	440b      	add	r3, r1
 800e634:	49b6      	ldr	r1, [pc, #728]	; (800e910 <make_smap+0x5d8>)
 800e636:	0112      	lsls	r2, r2, #4
 800e638:	440a      	add	r2, r1
 800e63a:	4413      	add	r3, r2
 800e63c:	7819      	ldrb	r1, [r3, #0]
 800e63e:	1d3a      	adds	r2, r7, #4
 800e640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e642:	4413      	add	r3, r2
 800e644:	460a      	mov	r2, r1
 800e646:	701a      	strb	r2, [r3, #0]
									if(MF.FLAG.SCND) m_temp_sample[k] >>= 4;		//a二次走行用のマップを作成する場合上位4bitを使うので4bit分右にシフトさせる
 800e648:	4bb2      	ldr	r3, [pc, #712]	; (800e914 <make_smap+0x5dc>)
 800e64a:	881b      	ldrh	r3, [r3, #0]
 800e64c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800e650:	b2db      	uxtb	r3, r3
 800e652:	2b00      	cmp	r3, #0
 800e654:	d00a      	beq.n	800e66c <make_smap+0x334>
 800e656:	1d3a      	adds	r2, r7, #4
 800e658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e65a:	4413      	add	r3, r2
 800e65c:	781b      	ldrb	r3, [r3, #0]
 800e65e:	091b      	lsrs	r3, r3, #4
 800e660:	b2d9      	uxtb	r1, r3
 800e662:	1d3a      	adds	r2, r7, #4
 800e664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e666:	4413      	add	r3, r2
 800e668:	460a      	mov	r2, r1
 800e66a:	701a      	strb	r2, [r3, #0]
									if(!(m_temp_sample[k] & 0x04) && (x+k) != 15) {		//a東壁がなく現在最東端でないとき
 800e66c:	1d3a      	adds	r2, r7, #4
 800e66e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e670:	4413      	add	r3, r2
 800e672:	781b      	ldrb	r3, [r3, #0]
 800e674:	f003 0304 	and.w	r3, r3, #4
 800e678:	2b00      	cmp	r3, #0
 800e67a:	d148      	bne.n	800e70e <make_smap+0x3d6>
 800e67c:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800e680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e682:	4413      	add	r3, r2
 800e684:	2b0f      	cmp	r3, #15
 800e686:	d042      	beq.n	800e70e <make_smap+0x3d6>
//										if(smap[y][x+k+1] == 0x03e7) {						//a東側が未記入なら
										if(smap[y][x+k+1] >= (smap[y][x+k]+straight)){		//a東側が記入後より大きいなら
 800e688:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800e68c:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 800e690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e692:	440b      	add	r3, r1
 800e694:	3301      	adds	r3, #1
 800e696:	49a0      	ldr	r1, [pc, #640]	; (800e918 <make_smap+0x5e0>)
 800e698:	0112      	lsls	r2, r2, #4
 800e69a:	4413      	add	r3, r2
 800e69c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800e6a0:	4618      	mov	r0, r3
 800e6a2:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800e6a6:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 800e6aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6ac:	440b      	add	r3, r1
 800e6ae:	499a      	ldr	r1, [pc, #616]	; (800e918 <make_smap+0x5e0>)
 800e6b0:	0112      	lsls	r2, r2, #4
 800e6b2:	4413      	add	r3, r2
 800e6b4:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800e6b8:	461a      	mov	r2, r3
 800e6ba:	69bb      	ldr	r3, [r7, #24]
 800e6bc:	4413      	add	r3, r2
 800e6be:	4298      	cmp	r0, r3
 800e6c0:	db1b      	blt.n	800e6fa <make_smap+0x3c2>
											smap[y][x+k+1] = smap[y][x+k] + straight;		//a直線分インクリメントした値を次のマスの歩数マップに書き込む
 800e6c2:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800e6c6:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 800e6ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6cc:	440b      	add	r3, r1
 800e6ce:	4992      	ldr	r1, [pc, #584]	; (800e918 <make_smap+0x5e0>)
 800e6d0:	0112      	lsls	r2, r2, #4
 800e6d2:	4413      	add	r3, r2
 800e6d4:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 800e6d8:	69bb      	ldr	r3, [r7, #24]
 800e6da:	b299      	uxth	r1, r3
 800e6dc:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800e6e0:	f897 402f 	ldrb.w	r4, [r7, #47]	; 0x2f
 800e6e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6e6:	4423      	add	r3, r4
 800e6e8:	3301      	adds	r3, #1
 800e6ea:	4401      	add	r1, r0
 800e6ec:	b288      	uxth	r0, r1
 800e6ee:	498a      	ldr	r1, [pc, #552]	; (800e918 <make_smap+0x5e0>)
 800e6f0:	0112      	lsls	r2, r2, #4
 800e6f2:	4413      	add	r3, r2
 800e6f4:	4602      	mov	r2, r0
 800e6f6:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
								for(int k=1; k<16-x; k++) {					//a現在座標から見て東のマスすべてにおいて
 800e6fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6fc:	3301      	adds	r3, #1
 800e6fe:	627b      	str	r3, [r7, #36]	; 0x24
 800e700:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e704:	f1c3 0310 	rsb	r3, r3, #16
 800e708:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e70a:	429a      	cmp	r2, r3
 800e70c:	db8c      	blt.n	800e628 <make_smap+0x2f0>
								}
							}
						}
					}
					//----a南壁についての処理----
					if(!(m_temp & 0x02) && y != 0){			//a南壁がなく現在最南端でないとき
 800e70e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800e712:	f003 0302 	and.w	r3, r3, #2
 800e716:	2b00      	cmp	r3, #0
 800e718:	f040 80b1 	bne.w	800e87e <make_smap+0x546>
 800e71c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800e720:	2b00      	cmp	r3, #0
 800e722:	f000 80ac 	beq.w	800e87e <make_smap+0x546>
//						if(smap[y-1][x] == 0x03e7){			//a南側が未記入なら
						if(smap[y-1][x] >= (smap[y][x]+turn)){	//a南側が記入後より大きいなら
 800e726:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800e72a:	1e5a      	subs	r2, r3, #1
 800e72c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e730:	4979      	ldr	r1, [pc, #484]	; (800e918 <make_smap+0x5e0>)
 800e732:	0112      	lsls	r2, r2, #4
 800e734:	4413      	add	r3, r2
 800e736:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800e73a:	4618      	mov	r0, r3
 800e73c:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800e740:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e744:	4974      	ldr	r1, [pc, #464]	; (800e918 <make_smap+0x5e0>)
 800e746:	0112      	lsls	r2, r2, #4
 800e748:	4413      	add	r3, r2
 800e74a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800e74e:	461a      	mov	r2, r3
 800e750:	697b      	ldr	r3, [r7, #20]
 800e752:	4413      	add	r3, r2
 800e754:	4298      	cmp	r0, r3
 800e756:	f2c0 8092 	blt.w	800e87e <make_smap+0x546>
							smap[y-1][x] = smap[y][x] + turn;	//a次の歩数を書き込む
 800e75a:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800e75e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e762:	496d      	ldr	r1, [pc, #436]	; (800e918 <make_smap+0x5e0>)
 800e764:	0112      	lsls	r2, r2, #4
 800e766:	4413      	add	r3, r2
 800e768:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 800e76c:	697b      	ldr	r3, [r7, #20]
 800e76e:	b299      	uxth	r1, r3
 800e770:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800e774:	1e5a      	subs	r2, r3, #1
 800e776:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e77a:	4401      	add	r1, r0
 800e77c:	b288      	uxth	r0, r1
 800e77e:	4966      	ldr	r1, [pc, #408]	; (800e918 <make_smap+0x5e0>)
 800e780:	0112      	lsls	r2, r2, #4
 800e782:	4413      	add	r3, r2
 800e784:	4602      	mov	r2, r0
 800e786:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
							if(MF.FLAG.STRAIGHT){
 800e78a:	4b62      	ldr	r3, [pc, #392]	; (800e914 <make_smap+0x5dc>)
 800e78c:	881b      	ldrh	r3, [r3, #0]
 800e78e:	f3c3 2380 	ubfx	r3, r3, #10, #1
 800e792:	b2db      	uxtb	r3, r3
 800e794:	2b00      	cmp	r3, #0
 800e796:	d072      	beq.n	800e87e <make_smap+0x546>
								//----a直線優先処理----
								for(int k=1; k<y; k++) {						//a現在座標から見て南のマスすべてにおいて
 800e798:	2301      	movs	r3, #1
 800e79a:	623b      	str	r3, [r7, #32]
 800e79c:	e06a      	b.n	800e874 <make_smap+0x53c>
									m_temp_sample[k] = map[y-k][x];				//map配列からマップデータを取り出す
 800e79e:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800e7a2:	6a3b      	ldr	r3, [r7, #32]
 800e7a4:	1ad2      	subs	r2, r2, r3
 800e7a6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e7aa:	4959      	ldr	r1, [pc, #356]	; (800e910 <make_smap+0x5d8>)
 800e7ac:	0112      	lsls	r2, r2, #4
 800e7ae:	440a      	add	r2, r1
 800e7b0:	4413      	add	r3, r2
 800e7b2:	7819      	ldrb	r1, [r3, #0]
 800e7b4:	1d3a      	adds	r2, r7, #4
 800e7b6:	6a3b      	ldr	r3, [r7, #32]
 800e7b8:	4413      	add	r3, r2
 800e7ba:	460a      	mov	r2, r1
 800e7bc:	701a      	strb	r2, [r3, #0]
									if(MF.FLAG.SCND) m_temp_sample[k] >>= 4;		//a二次走行用のマップを作成する場合上位4bitを使うので4bit分右にシフトさせる
 800e7be:	4b55      	ldr	r3, [pc, #340]	; (800e914 <make_smap+0x5dc>)
 800e7c0:	881b      	ldrh	r3, [r3, #0]
 800e7c2:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800e7c6:	b2db      	uxtb	r3, r3
 800e7c8:	2b00      	cmp	r3, #0
 800e7ca:	d00a      	beq.n	800e7e2 <make_smap+0x4aa>
 800e7cc:	1d3a      	adds	r2, r7, #4
 800e7ce:	6a3b      	ldr	r3, [r7, #32]
 800e7d0:	4413      	add	r3, r2
 800e7d2:	781b      	ldrb	r3, [r3, #0]
 800e7d4:	091b      	lsrs	r3, r3, #4
 800e7d6:	b2d9      	uxtb	r1, r3
 800e7d8:	1d3a      	adds	r2, r7, #4
 800e7da:	6a3b      	ldr	r3, [r7, #32]
 800e7dc:	4413      	add	r3, r2
 800e7de:	460a      	mov	r2, r1
 800e7e0:	701a      	strb	r2, [r3, #0]
									if(!(m_temp_sample[k] & 0x02) && (y-k) != 0) {		//a南壁がなく現在最南端でないとき
 800e7e2:	1d3a      	adds	r2, r7, #4
 800e7e4:	6a3b      	ldr	r3, [r7, #32]
 800e7e6:	4413      	add	r3, r2
 800e7e8:	781b      	ldrb	r3, [r3, #0]
 800e7ea:	f003 0302 	and.w	r3, r3, #2
 800e7ee:	2b00      	cmp	r3, #0
 800e7f0:	d145      	bne.n	800e87e <make_smap+0x546>
 800e7f2:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800e7f6:	6a3a      	ldr	r2, [r7, #32]
 800e7f8:	429a      	cmp	r2, r3
 800e7fa:	d040      	beq.n	800e87e <make_smap+0x546>
//										if (smap[y-k-1][x] == 0x03e7) {						//a南側が未記入なら
										if(smap[y-k-1][x] >= (smap[y-k][x]+straight)){		//a南側が記入後より大きいなら
 800e7fc:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800e800:	6a3b      	ldr	r3, [r7, #32]
 800e802:	1ad3      	subs	r3, r2, r3
 800e804:	1e5a      	subs	r2, r3, #1
 800e806:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e80a:	4943      	ldr	r1, [pc, #268]	; (800e918 <make_smap+0x5e0>)
 800e80c:	0112      	lsls	r2, r2, #4
 800e80e:	4413      	add	r3, r2
 800e810:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800e814:	4618      	mov	r0, r3
 800e816:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800e81a:	6a3b      	ldr	r3, [r7, #32]
 800e81c:	1ad2      	subs	r2, r2, r3
 800e81e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e822:	493d      	ldr	r1, [pc, #244]	; (800e918 <make_smap+0x5e0>)
 800e824:	0112      	lsls	r2, r2, #4
 800e826:	4413      	add	r3, r2
 800e828:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800e82c:	461a      	mov	r2, r3
 800e82e:	69bb      	ldr	r3, [r7, #24]
 800e830:	4413      	add	r3, r2
 800e832:	4298      	cmp	r0, r3
 800e834:	db1b      	blt.n	800e86e <make_smap+0x536>
											smap[y-k-1][x] = smap[y-k][x] + straight;		//a直線分インクリメントした値を次のマスの歩数マップに書き込む
 800e836:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800e83a:	6a3b      	ldr	r3, [r7, #32]
 800e83c:	1ad2      	subs	r2, r2, r3
 800e83e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e842:	4935      	ldr	r1, [pc, #212]	; (800e918 <make_smap+0x5e0>)
 800e844:	0112      	lsls	r2, r2, #4
 800e846:	4413      	add	r3, r2
 800e848:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 800e84c:	69bb      	ldr	r3, [r7, #24]
 800e84e:	b299      	uxth	r1, r3
 800e850:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800e854:	6a3b      	ldr	r3, [r7, #32]
 800e856:	1ad3      	subs	r3, r2, r3
 800e858:	1e5a      	subs	r2, r3, #1
 800e85a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e85e:	4401      	add	r1, r0
 800e860:	b288      	uxth	r0, r1
 800e862:	492d      	ldr	r1, [pc, #180]	; (800e918 <make_smap+0x5e0>)
 800e864:	0112      	lsls	r2, r2, #4
 800e866:	4413      	add	r3, r2
 800e868:	4602      	mov	r2, r0
 800e86a:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
								for(int k=1; k<y; k++) {						//a現在座標から見て南のマスすべてにおいて
 800e86e:	6a3b      	ldr	r3, [r7, #32]
 800e870:	3301      	adds	r3, #1
 800e872:	623b      	str	r3, [r7, #32]
 800e874:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800e878:	6a3a      	ldr	r2, [r7, #32]
 800e87a:	429a      	cmp	r2, r3
 800e87c:	db8f      	blt.n	800e79e <make_smap+0x466>
								}
							}
						}
					}
					//----a西壁についての処理----
					if(!(m_temp & 0x01) && x != 0){			//a西壁がなく現在最西端でないとき
 800e87e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800e882:	f003 0301 	and.w	r3, r3, #1
 800e886:	2b00      	cmp	r3, #0
 800e888:	f040 80b8 	bne.w	800e9fc <make_smap+0x6c4>
 800e88c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e890:	2b00      	cmp	r3, #0
 800e892:	f000 80b3 	beq.w	800e9fc <make_smap+0x6c4>
//						if(smap[y][x-1] == 0x03e7){			//a西側が未記入なら
						if(smap[y][x-1] >= (smap[y][x]+turn)){	//a西側が記入後より大きいなら
 800e896:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800e89a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e89e:	3b01      	subs	r3, #1
 800e8a0:	491d      	ldr	r1, [pc, #116]	; (800e918 <make_smap+0x5e0>)
 800e8a2:	0112      	lsls	r2, r2, #4
 800e8a4:	4413      	add	r3, r2
 800e8a6:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800e8aa:	4618      	mov	r0, r3
 800e8ac:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800e8b0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e8b4:	4918      	ldr	r1, [pc, #96]	; (800e918 <make_smap+0x5e0>)
 800e8b6:	0112      	lsls	r2, r2, #4
 800e8b8:	4413      	add	r3, r2
 800e8ba:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800e8be:	461a      	mov	r2, r3
 800e8c0:	697b      	ldr	r3, [r7, #20]
 800e8c2:	4413      	add	r3, r2
 800e8c4:	4298      	cmp	r0, r3
 800e8c6:	f2c0 8099 	blt.w	800e9fc <make_smap+0x6c4>
							smap[y][x-1] = smap[y][x] + turn;	//a次の歩数を書き込む
 800e8ca:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800e8ce:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e8d2:	4911      	ldr	r1, [pc, #68]	; (800e918 <make_smap+0x5e0>)
 800e8d4:	0112      	lsls	r2, r2, #4
 800e8d6:	4413      	add	r3, r2
 800e8d8:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 800e8dc:	697b      	ldr	r3, [r7, #20]
 800e8de:	b299      	uxth	r1, r3
 800e8e0:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800e8e4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e8e8:	3b01      	subs	r3, #1
 800e8ea:	4401      	add	r1, r0
 800e8ec:	b288      	uxth	r0, r1
 800e8ee:	490a      	ldr	r1, [pc, #40]	; (800e918 <make_smap+0x5e0>)
 800e8f0:	0112      	lsls	r2, r2, #4
 800e8f2:	4413      	add	r3, r2
 800e8f4:	4602      	mov	r2, r0
 800e8f6:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
							if(MF.FLAG.STRAIGHT){
 800e8fa:	4b06      	ldr	r3, [pc, #24]	; (800e914 <make_smap+0x5dc>)
 800e8fc:	881b      	ldrh	r3, [r3, #0]
 800e8fe:	f3c3 2380 	ubfx	r3, r3, #10, #1
 800e902:	b2db      	uxtb	r3, r3
 800e904:	2b00      	cmp	r3, #0
 800e906:	d079      	beq.n	800e9fc <make_smap+0x6c4>
								//----a直線優先処理----
								for(int k=1; k<x; k++) {						//a現在座標から見て西のマスすべてにおいて
 800e908:	2301      	movs	r3, #1
 800e90a:	61fb      	str	r3, [r7, #28]
 800e90c:	e071      	b.n	800e9f2 <make_smap+0x6ba>
 800e90e:	bf00      	nop
 800e910:	200001ac 	.word	0x200001ac
 800e914:	20000f68 	.word	0x20000f68
 800e918:	20000d60 	.word	0x20000d60
									m_temp_sample[k] = map[y][x-k];				//map配列からマップデータを取り出す
 800e91c:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800e920:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 800e924:	69fb      	ldr	r3, [r7, #28]
 800e926:	1acb      	subs	r3, r1, r3
 800e928:	494d      	ldr	r1, [pc, #308]	; (800ea60 <make_smap+0x728>)
 800e92a:	0112      	lsls	r2, r2, #4
 800e92c:	440a      	add	r2, r1
 800e92e:	4413      	add	r3, r2
 800e930:	7819      	ldrb	r1, [r3, #0]
 800e932:	1d3a      	adds	r2, r7, #4
 800e934:	69fb      	ldr	r3, [r7, #28]
 800e936:	4413      	add	r3, r2
 800e938:	460a      	mov	r2, r1
 800e93a:	701a      	strb	r2, [r3, #0]
									if(MF.FLAG.SCND) m_temp_sample[k] >>= 4;		//a二次走行用のマップを作成する場合上位4bitを使うので4bit分右にシフトさせる
 800e93c:	4b49      	ldr	r3, [pc, #292]	; (800ea64 <make_smap+0x72c>)
 800e93e:	881b      	ldrh	r3, [r3, #0]
 800e940:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800e944:	b2db      	uxtb	r3, r3
 800e946:	2b00      	cmp	r3, #0
 800e948:	d00a      	beq.n	800e960 <make_smap+0x628>
 800e94a:	1d3a      	adds	r2, r7, #4
 800e94c:	69fb      	ldr	r3, [r7, #28]
 800e94e:	4413      	add	r3, r2
 800e950:	781b      	ldrb	r3, [r3, #0]
 800e952:	091b      	lsrs	r3, r3, #4
 800e954:	b2d9      	uxtb	r1, r3
 800e956:	1d3a      	adds	r2, r7, #4
 800e958:	69fb      	ldr	r3, [r7, #28]
 800e95a:	4413      	add	r3, r2
 800e95c:	460a      	mov	r2, r1
 800e95e:	701a      	strb	r2, [r3, #0]
									if(!(m_temp_sample[k] & 0x01) && (x-k) != 0) {		//a西壁がなく現在最西端でないとき
 800e960:	1d3a      	adds	r2, r7, #4
 800e962:	69fb      	ldr	r3, [r7, #28]
 800e964:	4413      	add	r3, r2
 800e966:	781b      	ldrb	r3, [r3, #0]
 800e968:	f003 0301 	and.w	r3, r3, #1
 800e96c:	2b00      	cmp	r3, #0
 800e96e:	d145      	bne.n	800e9fc <make_smap+0x6c4>
 800e970:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e974:	69fa      	ldr	r2, [r7, #28]
 800e976:	429a      	cmp	r2, r3
 800e978:	d040      	beq.n	800e9fc <make_smap+0x6c4>
//										if (smap[y][x-k-1] == 0x03e7) {						//a西側が未記入なら
										if(smap[y][x-k-1] >= (smap[y][x-k]+straight)){		//a西側が記入後より大きいなら
 800e97a:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800e97e:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 800e982:	69fb      	ldr	r3, [r7, #28]
 800e984:	1acb      	subs	r3, r1, r3
 800e986:	3b01      	subs	r3, #1
 800e988:	4937      	ldr	r1, [pc, #220]	; (800ea68 <make_smap+0x730>)
 800e98a:	0112      	lsls	r2, r2, #4
 800e98c:	4413      	add	r3, r2
 800e98e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800e992:	4618      	mov	r0, r3
 800e994:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800e998:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 800e99c:	69fb      	ldr	r3, [r7, #28]
 800e99e:	1acb      	subs	r3, r1, r3
 800e9a0:	4931      	ldr	r1, [pc, #196]	; (800ea68 <make_smap+0x730>)
 800e9a2:	0112      	lsls	r2, r2, #4
 800e9a4:	4413      	add	r3, r2
 800e9a6:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800e9aa:	461a      	mov	r2, r3
 800e9ac:	69bb      	ldr	r3, [r7, #24]
 800e9ae:	4413      	add	r3, r2
 800e9b0:	4298      	cmp	r0, r3
 800e9b2:	db1b      	blt.n	800e9ec <make_smap+0x6b4>
											smap[y][x-k-1] = smap[y][x-k] + straight;		//a直線分インクリメントした値を次のマスの歩数マップに書き込む
 800e9b4:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800e9b8:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 800e9bc:	69fb      	ldr	r3, [r7, #28]
 800e9be:	1acb      	subs	r3, r1, r3
 800e9c0:	4929      	ldr	r1, [pc, #164]	; (800ea68 <make_smap+0x730>)
 800e9c2:	0112      	lsls	r2, r2, #4
 800e9c4:	4413      	add	r3, r2
 800e9c6:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 800e9ca:	69bb      	ldr	r3, [r7, #24]
 800e9cc:	b299      	uxth	r1, r3
 800e9ce:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800e9d2:	f897 402f 	ldrb.w	r4, [r7, #47]	; 0x2f
 800e9d6:	69fb      	ldr	r3, [r7, #28]
 800e9d8:	1ae3      	subs	r3, r4, r3
 800e9da:	3b01      	subs	r3, #1
 800e9dc:	4401      	add	r1, r0
 800e9de:	b288      	uxth	r0, r1
 800e9e0:	4921      	ldr	r1, [pc, #132]	; (800ea68 <make_smap+0x730>)
 800e9e2:	0112      	lsls	r2, r2, #4
 800e9e4:	4413      	add	r3, r2
 800e9e6:	4602      	mov	r2, r0
 800e9e8:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
								for(int k=1; k<x; k++) {						//a現在座標から見て西のマスすべてにおいて
 800e9ec:	69fb      	ldr	r3, [r7, #28]
 800e9ee:	3301      	adds	r3, #1
 800e9f0:	61fb      	str	r3, [r7, #28]
 800e9f2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e9f6:	69fa      	ldr	r2, [r7, #28]
 800e9f8:	429a      	cmp	r2, r3
 800e9fa:	db8f      	blt.n	800e91c <make_smap+0x5e4>
			for(x = 0; x <= 15; x++){						//a各X座標で実行
 800e9fc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ea00:	3301      	adds	r3, #1
 800ea02:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800ea06:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ea0a:	2b0f      	cmp	r3, #15
 800ea0c:	f67f acd7 	bls.w	800e3be <make_smap+0x86>
		for(y = 0; y <= 15; y++){							//a各Y座標で実行
 800ea10:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800ea14:	3301      	adds	r3, #1
 800ea16:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 800ea1a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800ea1e:	2b0f      	cmp	r3, #15
 800ea20:	f67f acc9 	bls.w	800e3b6 <make_smap+0x7e>
					}
				}
			}
		}
		//====a歩数カウンタのインクリメント====
		m_step++;
 800ea24:	4b11      	ldr	r3, [pc, #68]	; (800ea6c <make_smap+0x734>)
 800ea26:	881b      	ldrh	r3, [r3, #0]
 800ea28:	3301      	adds	r3, #1
 800ea2a:	b29a      	uxth	r2, r3
 800ea2c:	4b0f      	ldr	r3, [pc, #60]	; (800ea6c <make_smap+0x734>)
 800ea2e:	801a      	strh	r2, [r3, #0]
	}while(smap[mouse.y][mouse.x] == 0x03e7);					//a現在座標が未記入ではなくなるまで実行
 800ea30:	4b0f      	ldr	r3, [pc, #60]	; (800ea70 <make_smap+0x738>)
 800ea32:	785b      	ldrb	r3, [r3, #1]
 800ea34:	b2db      	uxtb	r3, r3
 800ea36:	4618      	mov	r0, r3
 800ea38:	4b0d      	ldr	r3, [pc, #52]	; (800ea70 <make_smap+0x738>)
 800ea3a:	781b      	ldrb	r3, [r3, #0]
 800ea3c:	b2db      	uxtb	r3, r3
 800ea3e:	4619      	mov	r1, r3
 800ea40:	4a09      	ldr	r2, [pc, #36]	; (800ea68 <make_smap+0x730>)
 800ea42:	0103      	lsls	r3, r0, #4
 800ea44:	440b      	add	r3, r1
 800ea46:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ea4a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800ea4e:	4293      	cmp	r3, r2
 800ea50:	f43f acad 	beq.w	800e3ae <make_smap+0x76>
}
 800ea54:	bf00      	nop
 800ea56:	3730      	adds	r7, #48	; 0x30
 800ea58:	46bd      	mov	sp, r7
 800ea5a:	bc90      	pop	{r4, r7}
 800ea5c:	4770      	bx	lr
 800ea5e:	bf00      	nop
 800ea60:	200001ac 	.word	0x200001ac
 800ea64:	20000f68 	.word	0x20000f68
 800ea68:	20000d60 	.word	0x20000d60
 800ea6c:	2000034e 	.word	0x2000034e
 800ea70:	20000c0c 	.word	0x20000c0c

0800ea74 <make_route>:
//make_route
//a最短経路を導出する
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void make_route(){
 800ea74:	b580      	push	{r7, lr}
 800ea76:	b082      	sub	sp, #8
 800ea78:	af00      	add	r7, sp, #0

	//====a変数宣言====
	uint8_t x, y;												//X，Y座標
	uint8_t dir_temp =  mouse.dir;								//aマウスの方角を表すmouse.dirの値をdir_temp変数に退避させる
 800ea7a:	4b9f      	ldr	r3, [pc, #636]	; (800ecf8 <make_route+0x284>)
 800ea7c:	789b      	ldrb	r3, [r3, #2]
 800ea7e:	703b      	strb	r3, [r7, #0]

	//====a最短経路を初期化====
	uint16_t i;
	for(i = 0; i < 256; i++){
 800ea80:	2300      	movs	r3, #0
 800ea82:	80bb      	strh	r3, [r7, #4]
 800ea84:	e006      	b.n	800ea94 <make_route+0x20>
		route[i] = 0xff;										//routeを0xffで初期化
 800ea86:	88bb      	ldrh	r3, [r7, #4]
 800ea88:	4a9c      	ldr	r2, [pc, #624]	; (800ecfc <make_route+0x288>)
 800ea8a:	21ff      	movs	r1, #255	; 0xff
 800ea8c:	54d1      	strb	r1, [r2, r3]
	for(i = 0; i < 256; i++){
 800ea8e:	88bb      	ldrh	r3, [r7, #4]
 800ea90:	3301      	adds	r3, #1
 800ea92:	80bb      	strh	r3, [r7, #4]
 800ea94:	88bb      	ldrh	r3, [r7, #4]
 800ea96:	2bff      	cmp	r3, #255	; 0xff
 800ea98:	d9f5      	bls.n	800ea86 <make_route+0x12>
	}

	//====a歩数カウンタをセット====
	uint16_t m_step = smap[mouse.y][mouse.x];					//a現在座標の歩数マップ値を取得
 800ea9a:	4b97      	ldr	r3, [pc, #604]	; (800ecf8 <make_route+0x284>)
 800ea9c:	785b      	ldrb	r3, [r3, #1]
 800ea9e:	b2db      	uxtb	r3, r3
 800eaa0:	4618      	mov	r0, r3
 800eaa2:	4b95      	ldr	r3, [pc, #596]	; (800ecf8 <make_route+0x284>)
 800eaa4:	781b      	ldrb	r3, [r3, #0]
 800eaa6:	b2db      	uxtb	r3, r3
 800eaa8:	4619      	mov	r1, r3
 800eaaa:	4a95      	ldr	r2, [pc, #596]	; (800ed00 <make_route+0x28c>)
 800eaac:	0103      	lsls	r3, r0, #4
 800eaae:	440b      	add	r3, r1
 800eab0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800eab4:	807b      	strh	r3, [r7, #2]

	//====x, yに現在座標を書き込み====
	x = mouse.x;
 800eab6:	4b90      	ldr	r3, [pc, #576]	; (800ecf8 <make_route+0x284>)
 800eab8:	781b      	ldrb	r3, [r3, #0]
 800eaba:	71fb      	strb	r3, [r7, #7]
	y = mouse.y;
 800eabc:	4b8e      	ldr	r3, [pc, #568]	; (800ecf8 <make_route+0x284>)
 800eabe:	785b      	ldrb	r3, [r3, #1]
 800eac0:	71bb      	strb	r3, [r7, #6]

	//====a最短経路を導出====
	if(pass_mode == 4){
 800eac2:	4b90      	ldr	r3, [pc, #576]	; (800ed04 <make_route+0x290>)
 800eac4:	781b      	ldrb	r3, [r3, #0]
 800eac6:	2b04      	cmp	r3, #4
 800eac8:	d105      	bne.n	800ead6 <make_route+0x62>
		route[0] = 0x77;
 800eaca:	4b8c      	ldr	r3, [pc, #560]	; (800ecfc <make_route+0x288>)
 800eacc:	2277      	movs	r2, #119	; 0x77
 800eace:	701a      	strb	r2, [r3, #0]
		i = 1;
 800ead0:	2301      	movs	r3, #1
 800ead2:	80bb      	strh	r3, [r7, #4]
 800ead4:	e001      	b.n	800eada <make_route+0x66>
	}else{
		i = 0;
 800ead6:	2300      	movs	r3, #0
 800ead8:	80bb      	strh	r3, [r7, #4]
	}

	do{
		uint8_t m_temp = map[y][x];								//a比較用マップ情報の格納
 800eada:	79ba      	ldrb	r2, [r7, #6]
 800eadc:	79fb      	ldrb	r3, [r7, #7]
 800eade:	498a      	ldr	r1, [pc, #552]	; (800ed08 <make_route+0x294>)
 800eae0:	0112      	lsls	r2, r2, #4
 800eae2:	440a      	add	r2, r1
 800eae4:	4413      	add	r3, r2
 800eae6:	781b      	ldrb	r3, [r3, #0]
 800eae8:	707b      	strb	r3, [r7, #1]
		if(MF.FLAG.SCND){										//a二次走行用のマップを作成する場合（二次走行時はMF.FLAG.SCNDが立っている）
 800eaea:	4b88      	ldr	r3, [pc, #544]	; (800ed0c <make_route+0x298>)
 800eaec:	881b      	ldrh	r3, [r3, #0]
 800eaee:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800eaf2:	b2db      	uxtb	r3, r3
 800eaf4:	2b00      	cmp	r3, #0
 800eaf6:	d002      	beq.n	800eafe <make_route+0x8a>
			m_temp >>= 4;										//a上位4bitを使うので4bit分右にシフトさせる
 800eaf8:	787b      	ldrb	r3, [r7, #1]
 800eafa:	091b      	lsrs	r3, r3, #4
 800eafc:	707b      	strb	r3, [r7, #1]
		}
		//----a北を見る----
		if(!(m_temp & 0x08) && (smap[y+1][x] < m_step)){		//a北側に壁が無く、現在地より小さい歩数マップ値であれば
 800eafe:	787b      	ldrb	r3, [r7, #1]
 800eb00:	f003 0308 	and.w	r3, r3, #8
 800eb04:	2b00      	cmp	r3, #0
 800eb06:	d122      	bne.n	800eb4e <make_route+0xda>
 800eb08:	79bb      	ldrb	r3, [r7, #6]
 800eb0a:	1c5a      	adds	r2, r3, #1
 800eb0c:	79fb      	ldrb	r3, [r7, #7]
 800eb0e:	497c      	ldr	r1, [pc, #496]	; (800ed00 <make_route+0x28c>)
 800eb10:	0112      	lsls	r2, r2, #4
 800eb12:	4413      	add	r3, r2
 800eb14:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800eb18:	887a      	ldrh	r2, [r7, #2]
 800eb1a:	429a      	cmp	r2, r3
 800eb1c:	d917      	bls.n	800eb4e <make_route+0xda>
			route[i] = (0x00 - mouse.dir) & 0x03;				//route配列に進行方向を記録
 800eb1e:	4b76      	ldr	r3, [pc, #472]	; (800ecf8 <make_route+0x284>)
 800eb20:	789b      	ldrb	r3, [r3, #2]
 800eb22:	b2db      	uxtb	r3, r3
 800eb24:	425b      	negs	r3, r3
 800eb26:	b2da      	uxtb	r2, r3
 800eb28:	88bb      	ldrh	r3, [r7, #4]
 800eb2a:	f002 0203 	and.w	r2, r2, #3
 800eb2e:	b2d1      	uxtb	r1, r2
 800eb30:	4a72      	ldr	r2, [pc, #456]	; (800ecfc <make_route+0x288>)
 800eb32:	54d1      	strb	r1, [r2, r3]
			m_step = smap[y+1][x];								//a最大歩数マップ値を更新
 800eb34:	79bb      	ldrb	r3, [r7, #6]
 800eb36:	1c5a      	adds	r2, r3, #1
 800eb38:	79fb      	ldrb	r3, [r7, #7]
 800eb3a:	4971      	ldr	r1, [pc, #452]	; (800ed00 <make_route+0x28c>)
 800eb3c:	0112      	lsls	r2, r2, #4
 800eb3e:	4413      	add	r3, r2
 800eb40:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800eb44:	807b      	strh	r3, [r7, #2]
			y++;												//a北に進んだのでY座標をインクリメント
 800eb46:	79bb      	ldrb	r3, [r7, #6]
 800eb48:	3301      	adds	r3, #1
 800eb4a:	71bb      	strb	r3, [r7, #6]
 800eb4c:	e079      	b.n	800ec42 <make_route+0x1ce>
		}
		//----a東を見る----
		else if(!(m_temp & 0x04) && (smap[y][x+1] < m_step)){	//a東側に壁が無く、現在地より小さい歩数マップ値であれば
 800eb4e:	787b      	ldrb	r3, [r7, #1]
 800eb50:	f003 0304 	and.w	r3, r3, #4
 800eb54:	2b00      	cmp	r3, #0
 800eb56:	d123      	bne.n	800eba0 <make_route+0x12c>
 800eb58:	79ba      	ldrb	r2, [r7, #6]
 800eb5a:	79fb      	ldrb	r3, [r7, #7]
 800eb5c:	3301      	adds	r3, #1
 800eb5e:	4968      	ldr	r1, [pc, #416]	; (800ed00 <make_route+0x28c>)
 800eb60:	0112      	lsls	r2, r2, #4
 800eb62:	4413      	add	r3, r2
 800eb64:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800eb68:	887a      	ldrh	r2, [r7, #2]
 800eb6a:	429a      	cmp	r2, r3
 800eb6c:	d918      	bls.n	800eba0 <make_route+0x12c>
			route[i] = (0x01 - mouse.dir) & 0x03;				//route配列に進行方向を記録
 800eb6e:	4b62      	ldr	r3, [pc, #392]	; (800ecf8 <make_route+0x284>)
 800eb70:	789b      	ldrb	r3, [r3, #2]
 800eb72:	b2db      	uxtb	r3, r3
 800eb74:	f1c3 0301 	rsb	r3, r3, #1
 800eb78:	b2da      	uxtb	r2, r3
 800eb7a:	88bb      	ldrh	r3, [r7, #4]
 800eb7c:	f002 0203 	and.w	r2, r2, #3
 800eb80:	b2d1      	uxtb	r1, r2
 800eb82:	4a5e      	ldr	r2, [pc, #376]	; (800ecfc <make_route+0x288>)
 800eb84:	54d1      	strb	r1, [r2, r3]
			m_step = smap[y][x+1];								//a最大歩数マップ値を更新
 800eb86:	79ba      	ldrb	r2, [r7, #6]
 800eb88:	79fb      	ldrb	r3, [r7, #7]
 800eb8a:	3301      	adds	r3, #1
 800eb8c:	495c      	ldr	r1, [pc, #368]	; (800ed00 <make_route+0x28c>)
 800eb8e:	0112      	lsls	r2, r2, #4
 800eb90:	4413      	add	r3, r2
 800eb92:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800eb96:	807b      	strh	r3, [r7, #2]
			x++;												//a東に進んだのでX座標をインクリメント
 800eb98:	79fb      	ldrb	r3, [r7, #7]
 800eb9a:	3301      	adds	r3, #1
 800eb9c:	71fb      	strb	r3, [r7, #7]
 800eb9e:	e050      	b.n	800ec42 <make_route+0x1ce>
		}
		//----a南を見る----
		else if(!(m_temp & 0x02) && (smap[y-1][x] < m_step)){	//a南側に壁が無く、現在地より小さい歩数マップ値であれば
 800eba0:	787b      	ldrb	r3, [r7, #1]
 800eba2:	f003 0302 	and.w	r3, r3, #2
 800eba6:	2b00      	cmp	r3, #0
 800eba8:	d123      	bne.n	800ebf2 <make_route+0x17e>
 800ebaa:	79bb      	ldrb	r3, [r7, #6]
 800ebac:	1e5a      	subs	r2, r3, #1
 800ebae:	79fb      	ldrb	r3, [r7, #7]
 800ebb0:	4953      	ldr	r1, [pc, #332]	; (800ed00 <make_route+0x28c>)
 800ebb2:	0112      	lsls	r2, r2, #4
 800ebb4:	4413      	add	r3, r2
 800ebb6:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800ebba:	887a      	ldrh	r2, [r7, #2]
 800ebbc:	429a      	cmp	r2, r3
 800ebbe:	d918      	bls.n	800ebf2 <make_route+0x17e>
			route[i] = (0x02 - mouse.dir) & 0x03;				//route配列に進行方向を記録
 800ebc0:	4b4d      	ldr	r3, [pc, #308]	; (800ecf8 <make_route+0x284>)
 800ebc2:	789b      	ldrb	r3, [r3, #2]
 800ebc4:	b2db      	uxtb	r3, r3
 800ebc6:	f1c3 0302 	rsb	r3, r3, #2
 800ebca:	b2da      	uxtb	r2, r3
 800ebcc:	88bb      	ldrh	r3, [r7, #4]
 800ebce:	f002 0203 	and.w	r2, r2, #3
 800ebd2:	b2d1      	uxtb	r1, r2
 800ebd4:	4a49      	ldr	r2, [pc, #292]	; (800ecfc <make_route+0x288>)
 800ebd6:	54d1      	strb	r1, [r2, r3]
			m_step = smap[y-1][x];								//a最大歩数マップ値を更新
 800ebd8:	79bb      	ldrb	r3, [r7, #6]
 800ebda:	1e5a      	subs	r2, r3, #1
 800ebdc:	79fb      	ldrb	r3, [r7, #7]
 800ebde:	4948      	ldr	r1, [pc, #288]	; (800ed00 <make_route+0x28c>)
 800ebe0:	0112      	lsls	r2, r2, #4
 800ebe2:	4413      	add	r3, r2
 800ebe4:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800ebe8:	807b      	strh	r3, [r7, #2]
			y--;												//a南に進んだのでY座標をデクリメント
 800ebea:	79bb      	ldrb	r3, [r7, #6]
 800ebec:	3b01      	subs	r3, #1
 800ebee:	71bb      	strb	r3, [r7, #6]
 800ebf0:	e027      	b.n	800ec42 <make_route+0x1ce>
		}
		//----a西を見る----
		else if(!(m_temp & 0x01) && (smap[y][x-1] < m_step)){	//a西側に壁が無く、現在地より小さい歩数マップ値であれば
 800ebf2:	787b      	ldrb	r3, [r7, #1]
 800ebf4:	f003 0301 	and.w	r3, r3, #1
 800ebf8:	2b00      	cmp	r3, #0
 800ebfa:	d122      	bne.n	800ec42 <make_route+0x1ce>
 800ebfc:	79ba      	ldrb	r2, [r7, #6]
 800ebfe:	79fb      	ldrb	r3, [r7, #7]
 800ec00:	3b01      	subs	r3, #1
 800ec02:	493f      	ldr	r1, [pc, #252]	; (800ed00 <make_route+0x28c>)
 800ec04:	0112      	lsls	r2, r2, #4
 800ec06:	4413      	add	r3, r2
 800ec08:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800ec0c:	887a      	ldrh	r2, [r7, #2]
 800ec0e:	429a      	cmp	r2, r3
 800ec10:	d917      	bls.n	800ec42 <make_route+0x1ce>
			route[i] = (0x03 - mouse.dir) & 0x03;				//route配列に進行方向を記録
 800ec12:	4b39      	ldr	r3, [pc, #228]	; (800ecf8 <make_route+0x284>)
 800ec14:	789b      	ldrb	r3, [r3, #2]
 800ec16:	b2db      	uxtb	r3, r3
 800ec18:	f1c3 0303 	rsb	r3, r3, #3
 800ec1c:	b2da      	uxtb	r2, r3
 800ec1e:	88bb      	ldrh	r3, [r7, #4]
 800ec20:	f002 0203 	and.w	r2, r2, #3
 800ec24:	b2d1      	uxtb	r1, r2
 800ec26:	4a35      	ldr	r2, [pc, #212]	; (800ecfc <make_route+0x288>)
 800ec28:	54d1      	strb	r1, [r2, r3]
			m_step = smap[y][x-1];								//a最大歩数マップ値を更新
 800ec2a:	79ba      	ldrb	r2, [r7, #6]
 800ec2c:	79fb      	ldrb	r3, [r7, #7]
 800ec2e:	3b01      	subs	r3, #1
 800ec30:	4933      	ldr	r1, [pc, #204]	; (800ed00 <make_route+0x28c>)
 800ec32:	0112      	lsls	r2, r2, #4
 800ec34:	4413      	add	r3, r2
 800ec36:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800ec3a:	807b      	strh	r3, [r7, #2]
			x--;												//a西に進んだのでX座標をデクリメント
 800ec3c:	79fb      	ldrb	r3, [r7, #7]
 800ec3e:	3b01      	subs	r3, #1
 800ec40:	71fb      	strb	r3, [r7, #7]
				y--;												//a南に進んだのでY座標をデクリメント
			}*/

		}
		//----a格納データ形式変更----
		switch(route[i]){										//route配列に格納した要素値で分岐
 800ec42:	88bb      	ldrh	r3, [r7, #4]
 800ec44:	4a2d      	ldr	r2, [pc, #180]	; (800ecfc <make_route+0x288>)
 800ec46:	5cd3      	ldrb	r3, [r2, r3]
 800ec48:	2b03      	cmp	r3, #3
 800ec4a:	d83c      	bhi.n	800ecc6 <make_route+0x252>
 800ec4c:	a201      	add	r2, pc, #4	; (adr r2, 800ec54 <make_route+0x1e0>)
 800ec4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ec52:	bf00      	nop
 800ec54:	0800ec65 	.word	0x0800ec65
 800ec58:	0800ec91 	.word	0x0800ec91
 800ec5c:	0800eca3 	.word	0x0800eca3
 800ec60:	0800ecb5 	.word	0x0800ecb5
		case 0x00:												//a前進する場合
			if(pass_mode < 3){
 800ec64:	4b27      	ldr	r3, [pc, #156]	; (800ed04 <make_route+0x290>)
 800ec66:	781b      	ldrb	r3, [r3, #0]
 800ec68:	2b02      	cmp	r3, #2
 800ec6a:	d804      	bhi.n	800ec76 <make_route+0x202>
				route[i] = 0x88;									//a格納データ形式を変更
 800ec6c:	88bb      	ldrh	r3, [r7, #4]
 800ec6e:	4a23      	ldr	r2, [pc, #140]	; (800ecfc <make_route+0x288>)
 800ec70:	2188      	movs	r1, #136	; 0x88
 800ec72:	54d1      	strb	r1, [r2, r3]
			}else{
				route[i] = 0x77;
				route[i+1] = 0x77;
				i++;
			}
			break;
 800ec74:	e02c      	b.n	800ecd0 <make_route+0x25c>
				route[i] = 0x77;
 800ec76:	88bb      	ldrh	r3, [r7, #4]
 800ec78:	4a20      	ldr	r2, [pc, #128]	; (800ecfc <make_route+0x288>)
 800ec7a:	2177      	movs	r1, #119	; 0x77
 800ec7c:	54d1      	strb	r1, [r2, r3]
				route[i+1] = 0x77;
 800ec7e:	88bb      	ldrh	r3, [r7, #4]
 800ec80:	3301      	adds	r3, #1
 800ec82:	4a1e      	ldr	r2, [pc, #120]	; (800ecfc <make_route+0x288>)
 800ec84:	2177      	movs	r1, #119	; 0x77
 800ec86:	54d1      	strb	r1, [r2, r3]
				i++;
 800ec88:	88bb      	ldrh	r3, [r7, #4]
 800ec8a:	3301      	adds	r3, #1
 800ec8c:	80bb      	strh	r3, [r7, #4]
			break;
 800ec8e:	e01f      	b.n	800ecd0 <make_route+0x25c>
		case 0x01:												//a右折する場合
			turn_dir(DIR_TURN_R90, 0);								//a内部情報の方向を90度右回転
 800ec90:	2100      	movs	r1, #0
 800ec92:	2001      	movs	r0, #1
 800ec94:	f7ff fa78 	bl	800e188 <turn_dir>
			route[i] = 0x44;									//a格納データ形式を変更
 800ec98:	88bb      	ldrh	r3, [r7, #4]
 800ec9a:	4a18      	ldr	r2, [pc, #96]	; (800ecfc <make_route+0x288>)
 800ec9c:	2144      	movs	r1, #68	; 0x44
 800ec9e:	54d1      	strb	r1, [r2, r3]
			break;
 800eca0:	e016      	b.n	800ecd0 <make_route+0x25c>
		case 0x02:												//Uターンする場合
			turn_dir(DIR_TURN_180, 0);								//a内部情報の方向を180度回転
 800eca2:	2100      	movs	r1, #0
 800eca4:	2002      	movs	r0, #2
 800eca6:	f7ff fa6f 	bl	800e188 <turn_dir>
			route[i] = 0x22;									//a格納データ形式を変更
 800ecaa:	88bb      	ldrh	r3, [r7, #4]
 800ecac:	4a13      	ldr	r2, [pc, #76]	; (800ecfc <make_route+0x288>)
 800ecae:	2122      	movs	r1, #34	; 0x22
 800ecb0:	54d1      	strb	r1, [r2, r3]
			break;
 800ecb2:	e00d      	b.n	800ecd0 <make_route+0x25c>
		case 0x03:												//a左折する場合
			turn_dir(DIR_TURN_L90, 0);								//a内部情報の方向を90度左回転
 800ecb4:	2100      	movs	r1, #0
 800ecb6:	20ff      	movs	r0, #255	; 0xff
 800ecb8:	f7ff fa66 	bl	800e188 <turn_dir>
			route[i] = 0x11;									//a格納データ形式を変更
 800ecbc:	88bb      	ldrh	r3, [r7, #4]
 800ecbe:	4a0f      	ldr	r2, [pc, #60]	; (800ecfc <make_route+0x288>)
 800ecc0:	2111      	movs	r1, #17
 800ecc2:	54d1      	strb	r1, [r2, r3]
			break;
 800ecc4:	e004      	b.n	800ecd0 <make_route+0x25c>
		default:												//aそれ以外の場合
			route[i] = 0x00;									//a格納データ形式を変更
 800ecc6:	88bb      	ldrh	r3, [r7, #4]
 800ecc8:	4a0c      	ldr	r2, [pc, #48]	; (800ecfc <make_route+0x288>)
 800ecca:	2100      	movs	r1, #0
 800eccc:	54d1      	strb	r1, [r2, r3]
			break;
 800ecce:	bf00      	nop
		}
		i++;													//aカウンタをインクリメント
 800ecd0:	88bb      	ldrh	r3, [r7, #4]
 800ecd2:	3301      	adds	r3, #1
 800ecd4:	80bb      	strh	r3, [r7, #4]
	}while(smap[y][x] != 0);									//a進んだ先の歩数マップ値が0（=ゴール）になるまで実行
 800ecd6:	79ba      	ldrb	r2, [r7, #6]
 800ecd8:	79fb      	ldrb	r3, [r7, #7]
 800ecda:	4909      	ldr	r1, [pc, #36]	; (800ed00 <make_route+0x28c>)
 800ecdc:	0112      	lsls	r2, r2, #4
 800ecde:	4413      	add	r3, r2
 800ece0:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800ece4:	2b00      	cmp	r3, #0
 800ece6:	f47f aef8 	bne.w	800eada <make_route+0x66>
	mouse.dir = dir_temp;										//dir_tempに退避させた値をmouse.dirにリストア
 800ecea:	4a03      	ldr	r2, [pc, #12]	; (800ecf8 <make_route+0x284>)
 800ecec:	783b      	ldrb	r3, [r7, #0]
 800ecee:	7093      	strb	r3, [r2, #2]
}
 800ecf0:	bf00      	nop
 800ecf2:	3708      	adds	r7, #8
 800ecf4:	46bd      	mov	sp, r7
 800ecf6:	bd80      	pop	{r7, pc}
 800ecf8:	20000c0c 	.word	0x20000c0c
 800ecfc:	20000c54 	.word	0x20000c54
 800ed00:	20000d60 	.word	0x20000d60
 800ed04:	20000457 	.word	0x20000457
 800ed08:	200001ac 	.word	0x200001ac
 800ed0c:	20000f68 	.word	0x20000f68

0800ed10 <find_pregoal>:
//	未探索壁を含む＆現在座標から最も近いマス(=仮goal)を探す
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void find_pregoal()
{
 800ed10:	b480      	push	{r7}
 800ed12:	b085      	sub	sp, #20
 800ed14:	af00      	add	r7, sp, #0
	//====変数宣言====
	uint8_t x, y;															//for文用変数
	uint8_t m_temp;															//マップデータ一時保持
	//uint8_t m_temp_sample[16];
	uint8_t break_flag = 0;													//未知壁マスを見つけた時のループ脱出フラグ
 800ed16:	2300      	movs	r3, #0
 800ed18:	737b      	strb	r3, [r7, #13]

	//====歩数マップのクリア====
	for (y = 0; y <= 0x0f; y++) {											//各Y座標で実行
 800ed1a:	2300      	movs	r3, #0
 800ed1c:	73bb      	strb	r3, [r7, #14]
 800ed1e:	e014      	b.n	800ed4a <find_pregoal+0x3a>
		for (x = 0; x <= 0x0f; x++) {										//各X座標で実行
 800ed20:	2300      	movs	r3, #0
 800ed22:	73fb      	strb	r3, [r7, #15]
 800ed24:	e00b      	b.n	800ed3e <find_pregoal+0x2e>
			smap[y][x] = 0x03e7;											//未記入部分は歩数最大とする
 800ed26:	7bba      	ldrb	r2, [r7, #14]
 800ed28:	7bfb      	ldrb	r3, [r7, #15]
 800ed2a:	49a0      	ldr	r1, [pc, #640]	; (800efac <find_pregoal+0x29c>)
 800ed2c:	0112      	lsls	r2, r2, #4
 800ed2e:	4413      	add	r3, r2
 800ed30:	f240 32e7 	movw	r2, #999	; 0x3e7
 800ed34:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for (x = 0; x <= 0x0f; x++) {										//各X座標で実行
 800ed38:	7bfb      	ldrb	r3, [r7, #15]
 800ed3a:	3301      	adds	r3, #1
 800ed3c:	73fb      	strb	r3, [r7, #15]
 800ed3e:	7bfb      	ldrb	r3, [r7, #15]
 800ed40:	2b0f      	cmp	r3, #15
 800ed42:	d9f0      	bls.n	800ed26 <find_pregoal+0x16>
	for (y = 0; y <= 0x0f; y++) {											//各Y座標で実行
 800ed44:	7bbb      	ldrb	r3, [r7, #14]
 800ed46:	3301      	adds	r3, #1
 800ed48:	73bb      	strb	r3, [r7, #14]
 800ed4a:	7bbb      	ldrb	r3, [r7, #14]
 800ed4c:	2b0f      	cmp	r3, #15
 800ed4e:	d9e7      	bls.n	800ed20 <find_pregoal+0x10>
		}
	}

	//====探索完了フラグのクリア====
	MF2.FLAG.ALLMAP = 0;
 800ed50:	4a97      	ldr	r2, [pc, #604]	; (800efb0 <find_pregoal+0x2a0>)
 800ed52:	8813      	ldrh	r3, [r2, #0]
 800ed54:	f36f 0382 	bfc	r3, #2, #1
 800ed58:	8013      	strh	r3, [r2, #0]

	//====現在座標を0にする====
	smap[mouse.y][mouse.x] = 0;
 800ed5a:	4b96      	ldr	r3, [pc, #600]	; (800efb4 <find_pregoal+0x2a4>)
 800ed5c:	785b      	ldrb	r3, [r3, #1]
 800ed5e:	b2db      	uxtb	r3, r3
 800ed60:	4618      	mov	r0, r3
 800ed62:	4b94      	ldr	r3, [pc, #592]	; (800efb4 <find_pregoal+0x2a4>)
 800ed64:	781b      	ldrb	r3, [r3, #0]
 800ed66:	b2db      	uxtb	r3, r3
 800ed68:	4619      	mov	r1, r3
 800ed6a:	4a90      	ldr	r2, [pc, #576]	; (800efac <find_pregoal+0x29c>)
 800ed6c:	0103      	lsls	r3, r0, #4
 800ed6e:	440b      	add	r3, r1
 800ed70:	2100      	movs	r1, #0
 800ed72:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

	//====歩数カウンタを0にする====
	m_step = 0;																//現在記入した最大の歩数となる
 800ed76:	4b90      	ldr	r3, [pc, #576]	; (800efb8 <find_pregoal+0x2a8>)
 800ed78:	2200      	movs	r2, #0
 800ed7a:	801a      	strh	r2, [r3, #0]

	//====歩数カウンタの重みづけ====
	int straight = 3;
 800ed7c:	2303      	movs	r3, #3
 800ed7e:	60bb      	str	r3, [r7, #8]
	int turn = 1;
 800ed80:	2301      	movs	r3, #1
 800ed82:	607b      	str	r3, [r7, #4]

	//====自分の座標にたどり着くまでループ====
	do {
		//----マップ全域を捜索----
		for (y = 0; y <= 0x0f; y++) {										//各Y座標で実行
 800ed84:	2300      	movs	r3, #0
 800ed86:	73bb      	strb	r3, [r7, #14]
 800ed88:	e180      	b.n	800f08c <find_pregoal+0x37c>
			for (x = 0; x <= 0x0f; x++) {									//各X座標で実行
 800ed8a:	2300      	movs	r3, #0
 800ed8c:	73fb      	strb	r3, [r7, #15]
 800ed8e:	e173      	b.n	800f078 <find_pregoal+0x368>
				//----現在最大の歩数を発見したとき----
				if (smap[y][x] == m_step) {									//歩数格納変数m_stepの値が現在最大の歩数のとき
 800ed90:	7bba      	ldrb	r2, [r7, #14]
 800ed92:	7bfb      	ldrb	r3, [r7, #15]
 800ed94:	4985      	ldr	r1, [pc, #532]	; (800efac <find_pregoal+0x29c>)
 800ed96:	0112      	lsls	r2, r2, #4
 800ed98:	4413      	add	r3, r2
 800ed9a:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 800ed9e:	4b86      	ldr	r3, [pc, #536]	; (800efb8 <find_pregoal+0x2a8>)
 800eda0:	881b      	ldrh	r3, [r3, #0]
 800eda2:	429a      	cmp	r2, r3
 800eda4:	f040 8165 	bne.w	800f072 <find_pregoal+0x362>
					m_temp = map[y][x];										//map配列からマップデータを取り出す
 800eda8:	7bba      	ldrb	r2, [r7, #14]
 800edaa:	7bfb      	ldrb	r3, [r7, #15]
 800edac:	4983      	ldr	r1, [pc, #524]	; (800efbc <find_pregoal+0x2ac>)
 800edae:	0112      	lsls	r2, r2, #4
 800edb0:	440a      	add	r2, r1
 800edb2:	4413      	add	r3, r2
 800edb4:	781b      	ldrb	r3, [r3, #0]
 800edb6:	70fb      	strb	r3, [r7, #3]
					//----北壁についての処理----
					if (!(m_temp & 0x08) && y != 0x0f) {					//北壁がなく現在最北端でないとき
 800edb8:	78fb      	ldrb	r3, [r7, #3]
 800edba:	f003 0308 	and.w	r3, r3, #8
 800edbe:	2b00      	cmp	r3, #0
 800edc0:	d14d      	bne.n	800ee5e <find_pregoal+0x14e>
 800edc2:	7bbb      	ldrb	r3, [r7, #14]
 800edc4:	2b0f      	cmp	r3, #15
 800edc6:	d04a      	beq.n	800ee5e <find_pregoal+0x14e>
						if (smap[y + 1][x] == 0x03e7) {						//北側が未記入なら
 800edc8:	7bbb      	ldrb	r3, [r7, #14]
 800edca:	1c5a      	adds	r2, r3, #1
 800edcc:	7bfb      	ldrb	r3, [r7, #15]
 800edce:	4977      	ldr	r1, [pc, #476]	; (800efac <find_pregoal+0x29c>)
 800edd0:	0112      	lsls	r2, r2, #4
 800edd2:	4413      	add	r3, r2
 800edd4:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800edd8:	f240 32e7 	movw	r2, #999	; 0x3e7
 800eddc:	4293      	cmp	r3, r2
 800edde:	d13e      	bne.n	800ee5e <find_pregoal+0x14e>
							smap[y + 1][x] = smap[y][x] + turn;				//曲線分インクリメントした値を次のマスの歩数マップに書き込む
 800ede0:	7bba      	ldrb	r2, [r7, #14]
 800ede2:	7bfb      	ldrb	r3, [r7, #15]
 800ede4:	4971      	ldr	r1, [pc, #452]	; (800efac <find_pregoal+0x29c>)
 800ede6:	0112      	lsls	r2, r2, #4
 800ede8:	4413      	add	r3, r2
 800edea:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 800edee:	687b      	ldr	r3, [r7, #4]
 800edf0:	b299      	uxth	r1, r3
 800edf2:	7bbb      	ldrb	r3, [r7, #14]
 800edf4:	1c5a      	adds	r2, r3, #1
 800edf6:	7bfb      	ldrb	r3, [r7, #15]
 800edf8:	4401      	add	r1, r0
 800edfa:	b288      	uxth	r0, r1
 800edfc:	496b      	ldr	r1, [pc, #428]	; (800efac <find_pregoal+0x29c>)
 800edfe:	0112      	lsls	r2, r2, #4
 800ee00:	4413      	add	r3, r2
 800ee02:	4602      	mov	r2, r0
 800ee04:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
							if (((map[y + 1][x] & 0x0f ) << 4) != (map[y + 1][x] & 0xf0)) {		//map内の上位4bitと下位4bitが異なる場合
 800ee08:	7bbb      	ldrb	r3, [r7, #14]
 800ee0a:	1c5a      	adds	r2, r3, #1
 800ee0c:	7bfb      	ldrb	r3, [r7, #15]
 800ee0e:	496b      	ldr	r1, [pc, #428]	; (800efbc <find_pregoal+0x2ac>)
 800ee10:	0112      	lsls	r2, r2, #4
 800ee12:	440a      	add	r2, r1
 800ee14:	4413      	add	r3, r2
 800ee16:	781b      	ldrb	r3, [r3, #0]
 800ee18:	011b      	lsls	r3, r3, #4
 800ee1a:	b2da      	uxtb	r2, r3
 800ee1c:	7bbb      	ldrb	r3, [r7, #14]
 800ee1e:	1c59      	adds	r1, r3, #1
 800ee20:	7bfb      	ldrb	r3, [r7, #15]
 800ee22:	4866      	ldr	r0, [pc, #408]	; (800efbc <find_pregoal+0x2ac>)
 800ee24:	0109      	lsls	r1, r1, #4
 800ee26:	4401      	add	r1, r0
 800ee28:	440b      	add	r3, r1
 800ee2a:	781b      	ldrb	r3, [r3, #0]
 800ee2c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ee30:	429a      	cmp	r2, r3
 800ee32:	d014      	beq.n	800ee5e <find_pregoal+0x14e>
								break_flag = 1;								//for文を抜けるフラグを立てて
 800ee34:	2301      	movs	r3, #1
 800ee36:	737b      	strb	r3, [r7, #13]
								m_step2 = smap[y + 1][x];					//仮goalの歩数を記録
 800ee38:	7bbb      	ldrb	r3, [r7, #14]
 800ee3a:	1c5a      	adds	r2, r3, #1
 800ee3c:	7bfb      	ldrb	r3, [r7, #15]
 800ee3e:	495b      	ldr	r1, [pc, #364]	; (800efac <find_pregoal+0x29c>)
 800ee40:	0112      	lsls	r2, r2, #4
 800ee42:	4413      	add	r3, r2
 800ee44:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 800ee48:	4b5d      	ldr	r3, [pc, #372]	; (800efc0 <find_pregoal+0x2b0>)
 800ee4a:	801a      	strh	r2, [r3, #0]
								pregoal_x = x;
 800ee4c:	4a5d      	ldr	r2, [pc, #372]	; (800efc4 <find_pregoal+0x2b4>)
 800ee4e:	7bfb      	ldrb	r3, [r7, #15]
 800ee50:	7013      	strb	r3, [r2, #0]
								pregoal_y = y + 1;							//仮goalの座標を記録
 800ee52:	7bbb      	ldrb	r3, [r7, #14]
 800ee54:	3301      	adds	r3, #1
 800ee56:	b2da      	uxtb	r2, r3
 800ee58:	4b5b      	ldr	r3, [pc, #364]	; (800efc8 <find_pregoal+0x2b8>)
 800ee5a:	701a      	strb	r2, [r3, #0]
								break;
 800ee5c:	e110      	b.n	800f080 <find_pregoal+0x370>
							}
						}
					}
					//----東壁についての処理----
					if (!(m_temp & 0x04) && x != 0x0f) {					//東壁がなく現在最東端でないとき
 800ee5e:	78fb      	ldrb	r3, [r7, #3]
 800ee60:	f003 0304 	and.w	r3, r3, #4
 800ee64:	2b00      	cmp	r3, #0
 800ee66:	d14d      	bne.n	800ef04 <find_pregoal+0x1f4>
 800ee68:	7bfb      	ldrb	r3, [r7, #15]
 800ee6a:	2b0f      	cmp	r3, #15
 800ee6c:	d04a      	beq.n	800ef04 <find_pregoal+0x1f4>
						if (smap[y][x + 1] == 0x03e7) {						//東側が未記入なら
 800ee6e:	7bba      	ldrb	r2, [r7, #14]
 800ee70:	7bfb      	ldrb	r3, [r7, #15]
 800ee72:	3301      	adds	r3, #1
 800ee74:	494d      	ldr	r1, [pc, #308]	; (800efac <find_pregoal+0x29c>)
 800ee76:	0112      	lsls	r2, r2, #4
 800ee78:	4413      	add	r3, r2
 800ee7a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800ee7e:	f240 32e7 	movw	r2, #999	; 0x3e7
 800ee82:	4293      	cmp	r3, r2
 800ee84:	d13e      	bne.n	800ef04 <find_pregoal+0x1f4>
							smap[y][x + 1] = smap[y][x] + turn;				//曲線分インクリメントした値を次のマスの歩数マップに書き込む
 800ee86:	7bba      	ldrb	r2, [r7, #14]
 800ee88:	7bfb      	ldrb	r3, [r7, #15]
 800ee8a:	4948      	ldr	r1, [pc, #288]	; (800efac <find_pregoal+0x29c>)
 800ee8c:	0112      	lsls	r2, r2, #4
 800ee8e:	4413      	add	r3, r2
 800ee90:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 800ee94:	687b      	ldr	r3, [r7, #4]
 800ee96:	b299      	uxth	r1, r3
 800ee98:	7bba      	ldrb	r2, [r7, #14]
 800ee9a:	7bfb      	ldrb	r3, [r7, #15]
 800ee9c:	3301      	adds	r3, #1
 800ee9e:	4401      	add	r1, r0
 800eea0:	b288      	uxth	r0, r1
 800eea2:	4942      	ldr	r1, [pc, #264]	; (800efac <find_pregoal+0x29c>)
 800eea4:	0112      	lsls	r2, r2, #4
 800eea6:	4413      	add	r3, r2
 800eea8:	4602      	mov	r2, r0
 800eeaa:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
							if (((map[y][x + 1] & 0x0f) << 4) != (map[y][x + 1] & 0xf0)) {		//map内の上位4bitと下位4bitが異なる場合
 800eeae:	7bba      	ldrb	r2, [r7, #14]
 800eeb0:	7bfb      	ldrb	r3, [r7, #15]
 800eeb2:	3301      	adds	r3, #1
 800eeb4:	4941      	ldr	r1, [pc, #260]	; (800efbc <find_pregoal+0x2ac>)
 800eeb6:	0112      	lsls	r2, r2, #4
 800eeb8:	440a      	add	r2, r1
 800eeba:	4413      	add	r3, r2
 800eebc:	781b      	ldrb	r3, [r3, #0]
 800eebe:	011b      	lsls	r3, r3, #4
 800eec0:	b2da      	uxtb	r2, r3
 800eec2:	7bb9      	ldrb	r1, [r7, #14]
 800eec4:	7bfb      	ldrb	r3, [r7, #15]
 800eec6:	3301      	adds	r3, #1
 800eec8:	483c      	ldr	r0, [pc, #240]	; (800efbc <find_pregoal+0x2ac>)
 800eeca:	0109      	lsls	r1, r1, #4
 800eecc:	4401      	add	r1, r0
 800eece:	440b      	add	r3, r1
 800eed0:	781b      	ldrb	r3, [r3, #0]
 800eed2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800eed6:	429a      	cmp	r2, r3
 800eed8:	d014      	beq.n	800ef04 <find_pregoal+0x1f4>
								break_flag = 1;								//for文を抜けるフラグを立てて
 800eeda:	2301      	movs	r3, #1
 800eedc:	737b      	strb	r3, [r7, #13]
								m_step2 = smap[y][x + 1];					//仮ゴールの歩数を記録
 800eede:	7bba      	ldrb	r2, [r7, #14]
 800eee0:	7bfb      	ldrb	r3, [r7, #15]
 800eee2:	3301      	adds	r3, #1
 800eee4:	4931      	ldr	r1, [pc, #196]	; (800efac <find_pregoal+0x29c>)
 800eee6:	0112      	lsls	r2, r2, #4
 800eee8:	4413      	add	r3, r2
 800eeea:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 800eeee:	4b34      	ldr	r3, [pc, #208]	; (800efc0 <find_pregoal+0x2b0>)
 800eef0:	801a      	strh	r2, [r3, #0]
								pregoal_x = x + 1;
 800eef2:	7bfb      	ldrb	r3, [r7, #15]
 800eef4:	3301      	adds	r3, #1
 800eef6:	b2da      	uxtb	r2, r3
 800eef8:	4b32      	ldr	r3, [pc, #200]	; (800efc4 <find_pregoal+0x2b4>)
 800eefa:	701a      	strb	r2, [r3, #0]
								pregoal_y = y;								//仮goalの座標を記録
 800eefc:	4a32      	ldr	r2, [pc, #200]	; (800efc8 <find_pregoal+0x2b8>)
 800eefe:	7bbb      	ldrb	r3, [r7, #14]
 800ef00:	7013      	strb	r3, [r2, #0]
								break;
 800ef02:	e0bd      	b.n	800f080 <find_pregoal+0x370>
							}
						}
					}
					//----南壁についての処理----
					if (!(m_temp & 0x02) && y != 0) {						//南壁がなく現在最南端でないとき
 800ef04:	78fb      	ldrb	r3, [r7, #3]
 800ef06:	f003 0302 	and.w	r3, r3, #2
 800ef0a:	2b00      	cmp	r3, #0
 800ef0c:	d15e      	bne.n	800efcc <find_pregoal+0x2bc>
 800ef0e:	7bbb      	ldrb	r3, [r7, #14]
 800ef10:	2b00      	cmp	r3, #0
 800ef12:	d05b      	beq.n	800efcc <find_pregoal+0x2bc>
						if (smap[y - 1][x] == 0x03e7) {						//南側が未記入なら
 800ef14:	7bbb      	ldrb	r3, [r7, #14]
 800ef16:	1e5a      	subs	r2, r3, #1
 800ef18:	7bfb      	ldrb	r3, [r7, #15]
 800ef1a:	4924      	ldr	r1, [pc, #144]	; (800efac <find_pregoal+0x29c>)
 800ef1c:	0112      	lsls	r2, r2, #4
 800ef1e:	4413      	add	r3, r2
 800ef20:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800ef24:	f240 32e7 	movw	r2, #999	; 0x3e7
 800ef28:	4293      	cmp	r3, r2
 800ef2a:	d14f      	bne.n	800efcc <find_pregoal+0x2bc>
							smap[y - 1][x] = smap[y][x] + turn;				//曲線分インクリメントした値を次のマスの歩数マップに書き込む
 800ef2c:	7bba      	ldrb	r2, [r7, #14]
 800ef2e:	7bfb      	ldrb	r3, [r7, #15]
 800ef30:	491e      	ldr	r1, [pc, #120]	; (800efac <find_pregoal+0x29c>)
 800ef32:	0112      	lsls	r2, r2, #4
 800ef34:	4413      	add	r3, r2
 800ef36:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 800ef3a:	687b      	ldr	r3, [r7, #4]
 800ef3c:	b299      	uxth	r1, r3
 800ef3e:	7bbb      	ldrb	r3, [r7, #14]
 800ef40:	1e5a      	subs	r2, r3, #1
 800ef42:	7bfb      	ldrb	r3, [r7, #15]
 800ef44:	4401      	add	r1, r0
 800ef46:	b288      	uxth	r0, r1
 800ef48:	4918      	ldr	r1, [pc, #96]	; (800efac <find_pregoal+0x29c>)
 800ef4a:	0112      	lsls	r2, r2, #4
 800ef4c:	4413      	add	r3, r2
 800ef4e:	4602      	mov	r2, r0
 800ef50:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
							if (((map[y - 1][x] & 0x0f) << 4) != (map[y - 1][x] & 0xf0)) {		//map内の上位4bitと下位4bitが異なる場合
 800ef54:	7bbb      	ldrb	r3, [r7, #14]
 800ef56:	1e5a      	subs	r2, r3, #1
 800ef58:	7bfb      	ldrb	r3, [r7, #15]
 800ef5a:	4918      	ldr	r1, [pc, #96]	; (800efbc <find_pregoal+0x2ac>)
 800ef5c:	0112      	lsls	r2, r2, #4
 800ef5e:	440a      	add	r2, r1
 800ef60:	4413      	add	r3, r2
 800ef62:	781b      	ldrb	r3, [r3, #0]
 800ef64:	011b      	lsls	r3, r3, #4
 800ef66:	b2da      	uxtb	r2, r3
 800ef68:	7bbb      	ldrb	r3, [r7, #14]
 800ef6a:	1e59      	subs	r1, r3, #1
 800ef6c:	7bfb      	ldrb	r3, [r7, #15]
 800ef6e:	4813      	ldr	r0, [pc, #76]	; (800efbc <find_pregoal+0x2ac>)
 800ef70:	0109      	lsls	r1, r1, #4
 800ef72:	4401      	add	r1, r0
 800ef74:	440b      	add	r3, r1
 800ef76:	781b      	ldrb	r3, [r3, #0]
 800ef78:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ef7c:	429a      	cmp	r2, r3
 800ef7e:	d025      	beq.n	800efcc <find_pregoal+0x2bc>
								break_flag = 1;								//for文を抜けるフラグを立てて
 800ef80:	2301      	movs	r3, #1
 800ef82:	737b      	strb	r3, [r7, #13]
								m_step2 = smap[y - 1][x];					//仮ゴールの歩数を記録
 800ef84:	7bbb      	ldrb	r3, [r7, #14]
 800ef86:	1e5a      	subs	r2, r3, #1
 800ef88:	7bfb      	ldrb	r3, [r7, #15]
 800ef8a:	4908      	ldr	r1, [pc, #32]	; (800efac <find_pregoal+0x29c>)
 800ef8c:	0112      	lsls	r2, r2, #4
 800ef8e:	4413      	add	r3, r2
 800ef90:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 800ef94:	4b0a      	ldr	r3, [pc, #40]	; (800efc0 <find_pregoal+0x2b0>)
 800ef96:	801a      	strh	r2, [r3, #0]
								pregoal_x = x;
 800ef98:	4a0a      	ldr	r2, [pc, #40]	; (800efc4 <find_pregoal+0x2b4>)
 800ef9a:	7bfb      	ldrb	r3, [r7, #15]
 800ef9c:	7013      	strb	r3, [r2, #0]
								pregoal_y = y - 1;							//仮goalの座標を記録
 800ef9e:	7bbb      	ldrb	r3, [r7, #14]
 800efa0:	3b01      	subs	r3, #1
 800efa2:	b2da      	uxtb	r2, r3
 800efa4:	4b08      	ldr	r3, [pc, #32]	; (800efc8 <find_pregoal+0x2b8>)
 800efa6:	701a      	strb	r2, [r3, #0]
								break;
 800efa8:	e06a      	b.n	800f080 <find_pregoal+0x370>
 800efaa:	bf00      	nop
 800efac:	20000d60 	.word	0x20000d60
 800efb0:	20000f64 	.word	0x20000f64
 800efb4:	20000c0c 	.word	0x20000c0c
 800efb8:	2000034e 	.word	0x2000034e
 800efbc:	200001ac 	.word	0x200001ac
 800efc0:	20000c04 	.word	0x20000c04
 800efc4:	20000d5c 	.word	0x20000d5c
 800efc8:	200012a1 	.word	0x200012a1
							}
						}
					}
					//----西壁についての処理----
					if (!(m_temp & 0x01) && x != 0) {						//西壁がなく現在最西端でないとき
 800efcc:	78fb      	ldrb	r3, [r7, #3]
 800efce:	f003 0301 	and.w	r3, r3, #1
 800efd2:	2b00      	cmp	r3, #0
 800efd4:	d14d      	bne.n	800f072 <find_pregoal+0x362>
 800efd6:	7bfb      	ldrb	r3, [r7, #15]
 800efd8:	2b00      	cmp	r3, #0
 800efda:	d04a      	beq.n	800f072 <find_pregoal+0x362>
						if (smap[y][x - 1] == 0x03e7) {						//西側が未記入なら
 800efdc:	7bba      	ldrb	r2, [r7, #14]
 800efde:	7bfb      	ldrb	r3, [r7, #15]
 800efe0:	3b01      	subs	r3, #1
 800efe2:	493e      	ldr	r1, [pc, #248]	; (800f0dc <find_pregoal+0x3cc>)
 800efe4:	0112      	lsls	r2, r2, #4
 800efe6:	4413      	add	r3, r2
 800efe8:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800efec:	f240 32e7 	movw	r2, #999	; 0x3e7
 800eff0:	4293      	cmp	r3, r2
 800eff2:	d13e      	bne.n	800f072 <find_pregoal+0x362>
							smap[y][x - 1] = smap[y][x] + turn;				//次の歩数を書き込む
 800eff4:	7bba      	ldrb	r2, [r7, #14]
 800eff6:	7bfb      	ldrb	r3, [r7, #15]
 800eff8:	4938      	ldr	r1, [pc, #224]	; (800f0dc <find_pregoal+0x3cc>)
 800effa:	0112      	lsls	r2, r2, #4
 800effc:	4413      	add	r3, r2
 800effe:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 800f002:	687b      	ldr	r3, [r7, #4]
 800f004:	b299      	uxth	r1, r3
 800f006:	7bba      	ldrb	r2, [r7, #14]
 800f008:	7bfb      	ldrb	r3, [r7, #15]
 800f00a:	3b01      	subs	r3, #1
 800f00c:	4401      	add	r1, r0
 800f00e:	b288      	uxth	r0, r1
 800f010:	4932      	ldr	r1, [pc, #200]	; (800f0dc <find_pregoal+0x3cc>)
 800f012:	0112      	lsls	r2, r2, #4
 800f014:	4413      	add	r3, r2
 800f016:	4602      	mov	r2, r0
 800f018:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
							if (((map[y][x - 1] & 0x0f) << 4) != (map[y][x - 1] & 0xf0)) {		//map内の上位4bitと下位4bitが異なる場合
 800f01c:	7bba      	ldrb	r2, [r7, #14]
 800f01e:	7bfb      	ldrb	r3, [r7, #15]
 800f020:	3b01      	subs	r3, #1
 800f022:	492f      	ldr	r1, [pc, #188]	; (800f0e0 <find_pregoal+0x3d0>)
 800f024:	0112      	lsls	r2, r2, #4
 800f026:	440a      	add	r2, r1
 800f028:	4413      	add	r3, r2
 800f02a:	781b      	ldrb	r3, [r3, #0]
 800f02c:	011b      	lsls	r3, r3, #4
 800f02e:	b2da      	uxtb	r2, r3
 800f030:	7bb9      	ldrb	r1, [r7, #14]
 800f032:	7bfb      	ldrb	r3, [r7, #15]
 800f034:	3b01      	subs	r3, #1
 800f036:	482a      	ldr	r0, [pc, #168]	; (800f0e0 <find_pregoal+0x3d0>)
 800f038:	0109      	lsls	r1, r1, #4
 800f03a:	4401      	add	r1, r0
 800f03c:	440b      	add	r3, r1
 800f03e:	781b      	ldrb	r3, [r3, #0]
 800f040:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800f044:	429a      	cmp	r2, r3
 800f046:	d014      	beq.n	800f072 <find_pregoal+0x362>
								break_flag = 1;								//for文を抜けるフラグを立てて
 800f048:	2301      	movs	r3, #1
 800f04a:	737b      	strb	r3, [r7, #13]
								m_step2 = smap[y][x - 1];					//仮ゴールの歩数を記録
 800f04c:	7bba      	ldrb	r2, [r7, #14]
 800f04e:	7bfb      	ldrb	r3, [r7, #15]
 800f050:	3b01      	subs	r3, #1
 800f052:	4922      	ldr	r1, [pc, #136]	; (800f0dc <find_pregoal+0x3cc>)
 800f054:	0112      	lsls	r2, r2, #4
 800f056:	4413      	add	r3, r2
 800f058:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 800f05c:	4b21      	ldr	r3, [pc, #132]	; (800f0e4 <find_pregoal+0x3d4>)
 800f05e:	801a      	strh	r2, [r3, #0]
								pregoal_x = x - 1;
 800f060:	7bfb      	ldrb	r3, [r7, #15]
 800f062:	3b01      	subs	r3, #1
 800f064:	b2da      	uxtb	r2, r3
 800f066:	4b20      	ldr	r3, [pc, #128]	; (800f0e8 <find_pregoal+0x3d8>)
 800f068:	701a      	strb	r2, [r3, #0]
								pregoal_y = y;								//仮goalの座標を記録
 800f06a:	4a20      	ldr	r2, [pc, #128]	; (800f0ec <find_pregoal+0x3dc>)
 800f06c:	7bbb      	ldrb	r3, [r7, #14]
 800f06e:	7013      	strb	r3, [r2, #0]
								break;							}
 800f070:	e006      	b.n	800f080 <find_pregoal+0x370>
			for (x = 0; x <= 0x0f; x++) {									//各X座標で実行
 800f072:	7bfb      	ldrb	r3, [r7, #15]
 800f074:	3301      	adds	r3, #1
 800f076:	73fb      	strb	r3, [r7, #15]
 800f078:	7bfb      	ldrb	r3, [r7, #15]
 800f07a:	2b0f      	cmp	r3, #15
 800f07c:	f67f ae88 	bls.w	800ed90 <find_pregoal+0x80>
						}
					}
				}
			}
			if (break_flag) break;		//map内の上位4bitと下位4bitが異なる場合、for文を抜ける
 800f080:	7b7b      	ldrb	r3, [r7, #13]
 800f082:	2b00      	cmp	r3, #0
 800f084:	d107      	bne.n	800f096 <find_pregoal+0x386>
		for (y = 0; y <= 0x0f; y++) {										//各Y座標で実行
 800f086:	7bbb      	ldrb	r3, [r7, #14]
 800f088:	3301      	adds	r3, #1
 800f08a:	73bb      	strb	r3, [r7, #14]
 800f08c:	7bbb      	ldrb	r3, [r7, #14]
 800f08e:	2b0f      	cmp	r3, #15
 800f090:	f67f ae7b 	bls.w	800ed8a <find_pregoal+0x7a>
 800f094:	e000      	b.n	800f098 <find_pregoal+0x388>
			if (break_flag) break;		//map内の上位4bitと下位4bitが異なる場合、for文を抜ける
 800f096:	bf00      	nop
		}
		//====歩数カウンタのインクリメント====
		m_step++;
 800f098:	4b15      	ldr	r3, [pc, #84]	; (800f0f0 <find_pregoal+0x3e0>)
 800f09a:	881b      	ldrh	r3, [r3, #0]
 800f09c:	3301      	adds	r3, #1
 800f09e:	b29a      	uxth	r2, r3
 800f0a0:	4b13      	ldr	r3, [pc, #76]	; (800f0f0 <find_pregoal+0x3e0>)
 800f0a2:	801a      	strh	r2, [r3, #0]
		if(m_step > 500) MF2.FLAG.ALLMAP = 1;
 800f0a4:	4b12      	ldr	r3, [pc, #72]	; (800f0f0 <find_pregoal+0x3e0>)
 800f0a6:	881b      	ldrh	r3, [r3, #0]
 800f0a8:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800f0ac:	d904      	bls.n	800f0b8 <find_pregoal+0x3a8>
 800f0ae:	4a11      	ldr	r2, [pc, #68]	; (800f0f4 <find_pregoal+0x3e4>)
 800f0b0:	8813      	ldrh	r3, [r2, #0]
 800f0b2:	f043 0304 	orr.w	r3, r3, #4
 800f0b6:	8013      	strh	r3, [r2, #0]
	} while(break_flag == 0 && MF2.FLAG.ALLMAP != 1);		//未探索壁ありマスを見つけるまで実行
 800f0b8:	7b7b      	ldrb	r3, [r7, #13]
 800f0ba:	2b00      	cmp	r3, #0
 800f0bc:	d107      	bne.n	800f0ce <find_pregoal+0x3be>
 800f0be:	4b0d      	ldr	r3, [pc, #52]	; (800f0f4 <find_pregoal+0x3e4>)
 800f0c0:	881b      	ldrh	r3, [r3, #0]
 800f0c2:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800f0c6:	b2db      	uxtb	r3, r3
 800f0c8:	2b01      	cmp	r3, #1
 800f0ca:	f47f ae5b 	bne.w	800ed84 <find_pregoal+0x74>
}
 800f0ce:	bf00      	nop
 800f0d0:	3714      	adds	r7, #20
 800f0d2:	46bd      	mov	sp, r7
 800f0d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0d8:	4770      	bx	lr
 800f0da:	bf00      	nop
 800f0dc:	20000d60 	.word	0x20000d60
 800f0e0:	200001ac 	.word	0x200001ac
 800f0e4:	20000c04 	.word	0x20000c04
 800f0e8:	20000d5c 	.word	0x20000d5c
 800f0ec:	200012a1 	.word	0x200012a1
 800f0f0:	2000034e 	.word	0x2000034e
 800f0f4:	20000f64 	.word	0x20000f64

0800f0f8 <make_smap2>:
//	歩数マップを作成する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void make_smap2()
{
 800f0f8:	b480      	push	{r7}
 800f0fa:	b085      	sub	sp, #20
 800f0fc:	af00      	add	r7, sp, #0
	//====変数宣言====
	uint8_t x, y;															//for文用変数
	uint8_t m_temp;															//マップデータ一時保持

	//====歩数マップのクリア====
	for (y = 0; y <= 0x0f; y++) {											//各Y座標で実行
 800f0fe:	2300      	movs	r3, #0
 800f100:	73bb      	strb	r3, [r7, #14]
 800f102:	e014      	b.n	800f12e <make_smap2+0x36>
		for (x = 0; x <= 0x0f; x++) {										//各X座標で実行
 800f104:	2300      	movs	r3, #0
 800f106:	73fb      	strb	r3, [r7, #15]
 800f108:	e00b      	b.n	800f122 <make_smap2+0x2a>
			smap[y][x] = 0x03e7;											//未記入部分は歩数最大とする
 800f10a:	7bba      	ldrb	r2, [r7, #14]
 800f10c:	7bfb      	ldrb	r3, [r7, #15]
 800f10e:	4986      	ldr	r1, [pc, #536]	; (800f328 <make_smap2+0x230>)
 800f110:	0112      	lsls	r2, r2, #4
 800f112:	4413      	add	r3, r2
 800f114:	f240 32e7 	movw	r2, #999	; 0x3e7
 800f118:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for (x = 0; x <= 0x0f; x++) {										//各X座標で実行
 800f11c:	7bfb      	ldrb	r3, [r7, #15]
 800f11e:	3301      	adds	r3, #1
 800f120:	73fb      	strb	r3, [r7, #15]
 800f122:	7bfb      	ldrb	r3, [r7, #15]
 800f124:	2b0f      	cmp	r3, #15
 800f126:	d9f0      	bls.n	800f10a <make_smap2+0x12>
	for (y = 0; y <= 0x0f; y++) {											//各Y座標で実行
 800f128:	7bbb      	ldrb	r3, [r7, #14]
 800f12a:	3301      	adds	r3, #1
 800f12c:	73bb      	strb	r3, [r7, #14]
 800f12e:	7bbb      	ldrb	r3, [r7, #14]
 800f130:	2b0f      	cmp	r3, #15
 800f132:	d9e7      	bls.n	800f104 <make_smap2+0xc>
		}
	}

	//====仮ゴール座標を0にする====
	smap[pregoal_y][pregoal_x] = 0;
 800f134:	4b7d      	ldr	r3, [pc, #500]	; (800f32c <make_smap2+0x234>)
 800f136:	781b      	ldrb	r3, [r3, #0]
 800f138:	4618      	mov	r0, r3
 800f13a:	4b7d      	ldr	r3, [pc, #500]	; (800f330 <make_smap2+0x238>)
 800f13c:	781b      	ldrb	r3, [r3, #0]
 800f13e:	4619      	mov	r1, r3
 800f140:	4a79      	ldr	r2, [pc, #484]	; (800f328 <make_smap2+0x230>)
 800f142:	0103      	lsls	r3, r0, #4
 800f144:	440b      	add	r3, r1
 800f146:	2100      	movs	r1, #0
 800f148:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

	//====歩数カウンタを0にする====
	m_step = 0;																//現在記入した最大の歩数となる
 800f14c:	4b79      	ldr	r3, [pc, #484]	; (800f334 <make_smap2+0x23c>)
 800f14e:	2200      	movs	r2, #0
 800f150:	801a      	strh	r2, [r3, #0]

	//====歩数カウンタの重みづけ====
	int straight = 3;
 800f152:	2303      	movs	r3, #3
 800f154:	60bb      	str	r3, [r7, #8]
	int turn = 5;
 800f156:	2305      	movs	r3, #5
 800f158:	607b      	str	r3, [r7, #4]

	//====自分の座標にたどり着くまでループ====
	do {
		//----マップ全域を捜索----
		for (y = 0; y <= 0x0f; y++) {										//各Y座標で実行
 800f15a:	2300      	movs	r3, #0
 800f15c:	73bb      	strb	r3, [r7, #14]
 800f15e:	e0c0      	b.n	800f2e2 <make_smap2+0x1ea>
			for (x = 0; x <= 0x0f; x++) {									//各X座標で実行
 800f160:	2300      	movs	r3, #0
 800f162:	73fb      	strb	r3, [r7, #15]
 800f164:	e0b6      	b.n	800f2d4 <make_smap2+0x1dc>
				//----現在最大の歩数を発見したとき----
				if (smap[y][x] == m_step) {									//歩数格納変数m_stepの値が現在最大の歩数のとき
 800f166:	7bba      	ldrb	r2, [r7, #14]
 800f168:	7bfb      	ldrb	r3, [r7, #15]
 800f16a:	496f      	ldr	r1, [pc, #444]	; (800f328 <make_smap2+0x230>)
 800f16c:	0112      	lsls	r2, r2, #4
 800f16e:	4413      	add	r3, r2
 800f170:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 800f174:	4b6f      	ldr	r3, [pc, #444]	; (800f334 <make_smap2+0x23c>)
 800f176:	881b      	ldrh	r3, [r3, #0]
 800f178:	429a      	cmp	r2, r3
 800f17a:	f040 80a8 	bne.w	800f2ce <make_smap2+0x1d6>
					m_temp = map[y][x];										//map配列からマップデータを取り出す
 800f17e:	7bba      	ldrb	r2, [r7, #14]
 800f180:	7bfb      	ldrb	r3, [r7, #15]
 800f182:	496d      	ldr	r1, [pc, #436]	; (800f338 <make_smap2+0x240>)
 800f184:	0112      	lsls	r2, r2, #4
 800f186:	440a      	add	r2, r1
 800f188:	4413      	add	r3, r2
 800f18a:	781b      	ldrb	r3, [r3, #0]
 800f18c:	70fb      	strb	r3, [r7, #3]
					//----北壁についての処理----
					if (!(m_temp & 0x08) && y != 0x0f) {					//北壁がなく現在最北端でないとき
 800f18e:	78fb      	ldrb	r3, [r7, #3]
 800f190:	f003 0308 	and.w	r3, r3, #8
 800f194:	2b00      	cmp	r3, #0
 800f196:	d122      	bne.n	800f1de <make_smap2+0xe6>
 800f198:	7bbb      	ldrb	r3, [r7, #14]
 800f19a:	2b0f      	cmp	r3, #15
 800f19c:	d01f      	beq.n	800f1de <make_smap2+0xe6>
						if (smap[y + 1][x] == 0x03e7) {						//北側が未記入なら
 800f19e:	7bbb      	ldrb	r3, [r7, #14]
 800f1a0:	1c5a      	adds	r2, r3, #1
 800f1a2:	7bfb      	ldrb	r3, [r7, #15]
 800f1a4:	4960      	ldr	r1, [pc, #384]	; (800f328 <make_smap2+0x230>)
 800f1a6:	0112      	lsls	r2, r2, #4
 800f1a8:	4413      	add	r3, r2
 800f1aa:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800f1ae:	f240 32e7 	movw	r2, #999	; 0x3e7
 800f1b2:	4293      	cmp	r3, r2
 800f1b4:	d113      	bne.n	800f1de <make_smap2+0xe6>
							smap[y + 1][x] = smap[y][x] + turn;				//曲線分インクリメントした値を次のマスの歩数マップに書き込む
 800f1b6:	7bba      	ldrb	r2, [r7, #14]
 800f1b8:	7bfb      	ldrb	r3, [r7, #15]
 800f1ba:	495b      	ldr	r1, [pc, #364]	; (800f328 <make_smap2+0x230>)
 800f1bc:	0112      	lsls	r2, r2, #4
 800f1be:	4413      	add	r3, r2
 800f1c0:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 800f1c4:	687b      	ldr	r3, [r7, #4]
 800f1c6:	b299      	uxth	r1, r3
 800f1c8:	7bbb      	ldrb	r3, [r7, #14]
 800f1ca:	1c5a      	adds	r2, r3, #1
 800f1cc:	7bfb      	ldrb	r3, [r7, #15]
 800f1ce:	4401      	add	r1, r0
 800f1d0:	b288      	uxth	r0, r1
 800f1d2:	4955      	ldr	r1, [pc, #340]	; (800f328 <make_smap2+0x230>)
 800f1d4:	0112      	lsls	r2, r2, #4
 800f1d6:	4413      	add	r3, r2
 800f1d8:	4602      	mov	r2, r0
 800f1da:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
						}
					}
					//----東壁についての処理----
					if (!(m_temp & 0x04) && x != 0x0f) {					//東壁がなく現在最東端でないとき
 800f1de:	78fb      	ldrb	r3, [r7, #3]
 800f1e0:	f003 0304 	and.w	r3, r3, #4
 800f1e4:	2b00      	cmp	r3, #0
 800f1e6:	d122      	bne.n	800f22e <make_smap2+0x136>
 800f1e8:	7bfb      	ldrb	r3, [r7, #15]
 800f1ea:	2b0f      	cmp	r3, #15
 800f1ec:	d01f      	beq.n	800f22e <make_smap2+0x136>
						if (smap[y][x + 1] == 0x03e7) {						//東側が未記入なら
 800f1ee:	7bba      	ldrb	r2, [r7, #14]
 800f1f0:	7bfb      	ldrb	r3, [r7, #15]
 800f1f2:	3301      	adds	r3, #1
 800f1f4:	494c      	ldr	r1, [pc, #304]	; (800f328 <make_smap2+0x230>)
 800f1f6:	0112      	lsls	r2, r2, #4
 800f1f8:	4413      	add	r3, r2
 800f1fa:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800f1fe:	f240 32e7 	movw	r2, #999	; 0x3e7
 800f202:	4293      	cmp	r3, r2
 800f204:	d113      	bne.n	800f22e <make_smap2+0x136>
							smap[y][x + 1] = smap[y][x] + turn;				//曲線分インクリメントした値を次のマスの歩数マップに書き込む
 800f206:	7bba      	ldrb	r2, [r7, #14]
 800f208:	7bfb      	ldrb	r3, [r7, #15]
 800f20a:	4947      	ldr	r1, [pc, #284]	; (800f328 <make_smap2+0x230>)
 800f20c:	0112      	lsls	r2, r2, #4
 800f20e:	4413      	add	r3, r2
 800f210:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 800f214:	687b      	ldr	r3, [r7, #4]
 800f216:	b299      	uxth	r1, r3
 800f218:	7bba      	ldrb	r2, [r7, #14]
 800f21a:	7bfb      	ldrb	r3, [r7, #15]
 800f21c:	3301      	adds	r3, #1
 800f21e:	4401      	add	r1, r0
 800f220:	b288      	uxth	r0, r1
 800f222:	4941      	ldr	r1, [pc, #260]	; (800f328 <make_smap2+0x230>)
 800f224:	0112      	lsls	r2, r2, #4
 800f226:	4413      	add	r3, r2
 800f228:	4602      	mov	r2, r0
 800f22a:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
						}
					}
					//----南壁についての処理----
					if (!(m_temp & 0x02) && y != 0) {						//南壁がなく現在最南端でないとき
 800f22e:	78fb      	ldrb	r3, [r7, #3]
 800f230:	f003 0302 	and.w	r3, r3, #2
 800f234:	2b00      	cmp	r3, #0
 800f236:	d122      	bne.n	800f27e <make_smap2+0x186>
 800f238:	7bbb      	ldrb	r3, [r7, #14]
 800f23a:	2b00      	cmp	r3, #0
 800f23c:	d01f      	beq.n	800f27e <make_smap2+0x186>
						if (smap[y - 1][x] == 0x03e7) {						//南側が未記入なら
 800f23e:	7bbb      	ldrb	r3, [r7, #14]
 800f240:	1e5a      	subs	r2, r3, #1
 800f242:	7bfb      	ldrb	r3, [r7, #15]
 800f244:	4938      	ldr	r1, [pc, #224]	; (800f328 <make_smap2+0x230>)
 800f246:	0112      	lsls	r2, r2, #4
 800f248:	4413      	add	r3, r2
 800f24a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800f24e:	f240 32e7 	movw	r2, #999	; 0x3e7
 800f252:	4293      	cmp	r3, r2
 800f254:	d113      	bne.n	800f27e <make_smap2+0x186>
							smap[y - 1][x] = smap[y][x] + turn;				//曲線分インクリメントした値を次のマスの歩数マップに書き込む
 800f256:	7bba      	ldrb	r2, [r7, #14]
 800f258:	7bfb      	ldrb	r3, [r7, #15]
 800f25a:	4933      	ldr	r1, [pc, #204]	; (800f328 <make_smap2+0x230>)
 800f25c:	0112      	lsls	r2, r2, #4
 800f25e:	4413      	add	r3, r2
 800f260:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 800f264:	687b      	ldr	r3, [r7, #4]
 800f266:	b299      	uxth	r1, r3
 800f268:	7bbb      	ldrb	r3, [r7, #14]
 800f26a:	1e5a      	subs	r2, r3, #1
 800f26c:	7bfb      	ldrb	r3, [r7, #15]
 800f26e:	4401      	add	r1, r0
 800f270:	b288      	uxth	r0, r1
 800f272:	492d      	ldr	r1, [pc, #180]	; (800f328 <make_smap2+0x230>)
 800f274:	0112      	lsls	r2, r2, #4
 800f276:	4413      	add	r3, r2
 800f278:	4602      	mov	r2, r0
 800f27a:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
						}
					}
					//----西壁についての処理----
					if (!(m_temp & 0x01) && x != 0) {						//西壁がなく現在最西端でないとき
 800f27e:	78fb      	ldrb	r3, [r7, #3]
 800f280:	f003 0301 	and.w	r3, r3, #1
 800f284:	2b00      	cmp	r3, #0
 800f286:	d122      	bne.n	800f2ce <make_smap2+0x1d6>
 800f288:	7bfb      	ldrb	r3, [r7, #15]
 800f28a:	2b00      	cmp	r3, #0
 800f28c:	d01f      	beq.n	800f2ce <make_smap2+0x1d6>
						if (smap[y][x - 1] == 0x03e7) {						//西側が未記入なら
 800f28e:	7bba      	ldrb	r2, [r7, #14]
 800f290:	7bfb      	ldrb	r3, [r7, #15]
 800f292:	3b01      	subs	r3, #1
 800f294:	4924      	ldr	r1, [pc, #144]	; (800f328 <make_smap2+0x230>)
 800f296:	0112      	lsls	r2, r2, #4
 800f298:	4413      	add	r3, r2
 800f29a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800f29e:	f240 32e7 	movw	r2, #999	; 0x3e7
 800f2a2:	4293      	cmp	r3, r2
 800f2a4:	d113      	bne.n	800f2ce <make_smap2+0x1d6>
							smap[y][x - 1] = smap[y][x] + turn;				//次の歩数を書き込む
 800f2a6:	7bba      	ldrb	r2, [r7, #14]
 800f2a8:	7bfb      	ldrb	r3, [r7, #15]
 800f2aa:	491f      	ldr	r1, [pc, #124]	; (800f328 <make_smap2+0x230>)
 800f2ac:	0112      	lsls	r2, r2, #4
 800f2ae:	4413      	add	r3, r2
 800f2b0:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 800f2b4:	687b      	ldr	r3, [r7, #4]
 800f2b6:	b299      	uxth	r1, r3
 800f2b8:	7bba      	ldrb	r2, [r7, #14]
 800f2ba:	7bfb      	ldrb	r3, [r7, #15]
 800f2bc:	3b01      	subs	r3, #1
 800f2be:	4401      	add	r1, r0
 800f2c0:	b288      	uxth	r0, r1
 800f2c2:	4919      	ldr	r1, [pc, #100]	; (800f328 <make_smap2+0x230>)
 800f2c4:	0112      	lsls	r2, r2, #4
 800f2c6:	4413      	add	r3, r2
 800f2c8:	4602      	mov	r2, r0
 800f2ca:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			for (x = 0; x <= 0x0f; x++) {									//各X座標で実行
 800f2ce:	7bfb      	ldrb	r3, [r7, #15]
 800f2d0:	3301      	adds	r3, #1
 800f2d2:	73fb      	strb	r3, [r7, #15]
 800f2d4:	7bfb      	ldrb	r3, [r7, #15]
 800f2d6:	2b0f      	cmp	r3, #15
 800f2d8:	f67f af45 	bls.w	800f166 <make_smap2+0x6e>
		for (y = 0; y <= 0x0f; y++) {										//各Y座標で実行
 800f2dc:	7bbb      	ldrb	r3, [r7, #14]
 800f2de:	3301      	adds	r3, #1
 800f2e0:	73bb      	strb	r3, [r7, #14]
 800f2e2:	7bbb      	ldrb	r3, [r7, #14]
 800f2e4:	2b0f      	cmp	r3, #15
 800f2e6:	f67f af3b 	bls.w	800f160 <make_smap2+0x68>
					}
				}
			}
		}
		//====歩数カウンタのインクリメント====
		m_step++;
 800f2ea:	4b12      	ldr	r3, [pc, #72]	; (800f334 <make_smap2+0x23c>)
 800f2ec:	881b      	ldrh	r3, [r3, #0]
 800f2ee:	3301      	adds	r3, #1
 800f2f0:	b29a      	uxth	r2, r3
 800f2f2:	4b10      	ldr	r3, [pc, #64]	; (800f334 <make_smap2+0x23c>)
 800f2f4:	801a      	strh	r2, [r3, #0]
	} while (smap[mouse.y][mouse.x] == 0x03e7);		//現在座標が未記入ではなくなるまで実行
 800f2f6:	4b11      	ldr	r3, [pc, #68]	; (800f33c <make_smap2+0x244>)
 800f2f8:	785b      	ldrb	r3, [r3, #1]
 800f2fa:	b2db      	uxtb	r3, r3
 800f2fc:	4618      	mov	r0, r3
 800f2fe:	4b0f      	ldr	r3, [pc, #60]	; (800f33c <make_smap2+0x244>)
 800f300:	781b      	ldrb	r3, [r3, #0]
 800f302:	b2db      	uxtb	r3, r3
 800f304:	4619      	mov	r1, r3
 800f306:	4a08      	ldr	r2, [pc, #32]	; (800f328 <make_smap2+0x230>)
 800f308:	0103      	lsls	r3, r0, #4
 800f30a:	440b      	add	r3, r1
 800f30c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f310:	f240 32e7 	movw	r2, #999	; 0x3e7
 800f314:	4293      	cmp	r3, r2
 800f316:	f43f af20 	beq.w	800f15a <make_smap2+0x62>
}
 800f31a:	bf00      	nop
 800f31c:	3714      	adds	r7, #20
 800f31e:	46bd      	mov	sp, r7
 800f320:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f324:	4770      	bx	lr
 800f326:	bf00      	nop
 800f328:	20000d60 	.word	0x20000d60
 800f32c:	200012a1 	.word	0x200012a1
 800f330:	20000d5c 	.word	0x20000d5c
 800f334:	2000034e 	.word	0x2000034e
 800f338:	200001ac 	.word	0x200001ac
 800f33c:	20000c0c 	.word	0x20000c0c

0800f340 <pass_route2>:
//pass_route2
// route配列をpass圧縮する(半区画ベース)
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void pass_route2(void){
 800f340:	b480      	push	{r7}
 800f342:	b083      	sub	sp, #12
 800f344:	af00      	add	r7, sp, #0
	int i;
	uint8_t s_flag = 0;
 800f346:	2300      	movs	r3, #0
 800f348:	70fb      	strb	r3, [r7, #3]
	for(i = 0; i < 256; i++){
 800f34a:	2300      	movs	r3, #0
 800f34c:	607b      	str	r3, [r7, #4]
 800f34e:	e007      	b.n	800f360 <pass_route2+0x20>
		pass[i] = 0;								//pass配列の初期化
 800f350:	4a83      	ldr	r2, [pc, #524]	; (800f560 <pass_route2+0x220>)
 800f352:	687b      	ldr	r3, [r7, #4]
 800f354:	4413      	add	r3, r2
 800f356:	2200      	movs	r2, #0
 800f358:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < 256; i++){
 800f35a:	687b      	ldr	r3, [r7, #4]
 800f35c:	3301      	adds	r3, #1
 800f35e:	607b      	str	r3, [r7, #4]
 800f360:	687b      	ldr	r3, [r7, #4]
 800f362:	2bff      	cmp	r3, #255	; 0xff
 800f364:	ddf4      	ble.n	800f350 <pass_route2+0x10>
	}
	uint8_t p = 0;									//pass配列の配列番号用変数
 800f366:	2300      	movs	r3, #0
 800f368:	70bb      	strb	r3, [r7, #2]
	i = 0;
 800f36a:	2300      	movs	r3, #0
 800f36c:	607b      	str	r3, [r7, #4]
	uint8_t s = 0;									//a直線数カウント用変数
 800f36e:	2300      	movs	r3, #0
 800f370:	707b      	strb	r3, [r7, #1]
	while(route[i-1] != 0xff){
 800f372:	e0e8      	b.n	800f546 <pass_route2+0x206>
		s = 0;
 800f374:	2300      	movs	r3, #0
 800f376:	707b      	strb	r3, [r7, #1]
		if(route[i] == 0x44){
 800f378:	4a7a      	ldr	r2, [pc, #488]	; (800f564 <pass_route2+0x224>)
 800f37a:	687b      	ldr	r3, [r7, #4]
 800f37c:	4413      	add	r3, r2
 800f37e:	781b      	ldrb	r3, [r3, #0]
 800f380:	2b44      	cmp	r3, #68	; 0x44
 800f382:	d107      	bne.n	800f394 <pass_route2+0x54>
			pass[p] = -1;
 800f384:	78bb      	ldrb	r3, [r7, #2]
 800f386:	4a76      	ldr	r2, [pc, #472]	; (800f560 <pass_route2+0x220>)
 800f388:	21ff      	movs	r1, #255	; 0xff
 800f38a:	54d1      	strb	r1, [r2, r3]
			i++;
 800f38c:	687b      	ldr	r3, [r7, #4]
 800f38e:	3301      	adds	r3, #1
 800f390:	607b      	str	r3, [r7, #4]
 800f392:	e0d5      	b.n	800f540 <pass_route2+0x200>
		}else if(route[i] == 0x11){
 800f394:	4a73      	ldr	r2, [pc, #460]	; (800f564 <pass_route2+0x224>)
 800f396:	687b      	ldr	r3, [r7, #4]
 800f398:	4413      	add	r3, r2
 800f39a:	781b      	ldrb	r3, [r3, #0]
 800f39c:	2b11      	cmp	r3, #17
 800f39e:	d107      	bne.n	800f3b0 <pass_route2+0x70>
			pass[p] = -2;
 800f3a0:	78bb      	ldrb	r3, [r7, #2]
 800f3a2:	4a6f      	ldr	r2, [pc, #444]	; (800f560 <pass_route2+0x220>)
 800f3a4:	21fe      	movs	r1, #254	; 0xfe
 800f3a6:	54d1      	strb	r1, [r2, r3]
			i++;
 800f3a8:	687b      	ldr	r3, [r7, #4]
 800f3aa:	3301      	adds	r3, #1
 800f3ac:	607b      	str	r3, [r7, #4]
 800f3ae:	e0c7      	b.n	800f540 <pass_route2+0x200>
		}else if(route[i] == 0x77 && route[i+1] == 0x44 && route[i+2] == 0x77){
 800f3b0:	4a6c      	ldr	r2, [pc, #432]	; (800f564 <pass_route2+0x224>)
 800f3b2:	687b      	ldr	r3, [r7, #4]
 800f3b4:	4413      	add	r3, r2
 800f3b6:	781b      	ldrb	r3, [r3, #0]
 800f3b8:	2b77      	cmp	r3, #119	; 0x77
 800f3ba:	d115      	bne.n	800f3e8 <pass_route2+0xa8>
 800f3bc:	687b      	ldr	r3, [r7, #4]
 800f3be:	3301      	adds	r3, #1
 800f3c0:	4a68      	ldr	r2, [pc, #416]	; (800f564 <pass_route2+0x224>)
 800f3c2:	5cd3      	ldrb	r3, [r2, r3]
 800f3c4:	2b44      	cmp	r3, #68	; 0x44
 800f3c6:	d10f      	bne.n	800f3e8 <pass_route2+0xa8>
 800f3c8:	687b      	ldr	r3, [r7, #4]
 800f3ca:	3302      	adds	r3, #2
 800f3cc:	4a65      	ldr	r2, [pc, #404]	; (800f564 <pass_route2+0x224>)
 800f3ce:	5cd3      	ldrb	r3, [r2, r3]
 800f3d0:	2b77      	cmp	r3, #119	; 0x77
 800f3d2:	d109      	bne.n	800f3e8 <pass_route2+0xa8>
			s_flag = 0;
 800f3d4:	2300      	movs	r3, #0
 800f3d6:	70fb      	strb	r3, [r7, #3]
			pass[p] = -3;
 800f3d8:	78bb      	ldrb	r3, [r7, #2]
 800f3da:	4a61      	ldr	r2, [pc, #388]	; (800f560 <pass_route2+0x220>)
 800f3dc:	21fd      	movs	r1, #253	; 0xfd
 800f3de:	54d1      	strb	r1, [r2, r3]
			i = i + 3;
 800f3e0:	687b      	ldr	r3, [r7, #4]
 800f3e2:	3303      	adds	r3, #3
 800f3e4:	607b      	str	r3, [r7, #4]
 800f3e6:	e0ab      	b.n	800f540 <pass_route2+0x200>
		}else if(route[i] == 0x77 && route[i+1] == 0x11 && route[i+2] == 0x77){
 800f3e8:	4a5e      	ldr	r2, [pc, #376]	; (800f564 <pass_route2+0x224>)
 800f3ea:	687b      	ldr	r3, [r7, #4]
 800f3ec:	4413      	add	r3, r2
 800f3ee:	781b      	ldrb	r3, [r3, #0]
 800f3f0:	2b77      	cmp	r3, #119	; 0x77
 800f3f2:	d115      	bne.n	800f420 <pass_route2+0xe0>
 800f3f4:	687b      	ldr	r3, [r7, #4]
 800f3f6:	3301      	adds	r3, #1
 800f3f8:	4a5a      	ldr	r2, [pc, #360]	; (800f564 <pass_route2+0x224>)
 800f3fa:	5cd3      	ldrb	r3, [r2, r3]
 800f3fc:	2b11      	cmp	r3, #17
 800f3fe:	d10f      	bne.n	800f420 <pass_route2+0xe0>
 800f400:	687b      	ldr	r3, [r7, #4]
 800f402:	3302      	adds	r3, #2
 800f404:	4a57      	ldr	r2, [pc, #348]	; (800f564 <pass_route2+0x224>)
 800f406:	5cd3      	ldrb	r3, [r2, r3]
 800f408:	2b77      	cmp	r3, #119	; 0x77
 800f40a:	d109      	bne.n	800f420 <pass_route2+0xe0>
			s_flag = 0;
 800f40c:	2300      	movs	r3, #0
 800f40e:	70fb      	strb	r3, [r7, #3]
			pass[p] = -4;
 800f410:	78bb      	ldrb	r3, [r7, #2]
 800f412:	4a53      	ldr	r2, [pc, #332]	; (800f560 <pass_route2+0x220>)
 800f414:	21fc      	movs	r1, #252	; 0xfc
 800f416:	54d1      	strb	r1, [r2, r3]
			i = i + 3;
 800f418:	687b      	ldr	r3, [r7, #4]
 800f41a:	3303      	adds	r3, #3
 800f41c:	607b      	str	r3, [r7, #4]
 800f41e:	e08f      	b.n	800f540 <pass_route2+0x200>
		}else if(route[i] == 0x77 && route[i+1] == 0x44 && route[i+2] == 0x44 && route[i+3] == 0x77){
 800f420:	4a50      	ldr	r2, [pc, #320]	; (800f564 <pass_route2+0x224>)
 800f422:	687b      	ldr	r3, [r7, #4]
 800f424:	4413      	add	r3, r2
 800f426:	781b      	ldrb	r3, [r3, #0]
 800f428:	2b77      	cmp	r3, #119	; 0x77
 800f42a:	d11b      	bne.n	800f464 <pass_route2+0x124>
 800f42c:	687b      	ldr	r3, [r7, #4]
 800f42e:	3301      	adds	r3, #1
 800f430:	4a4c      	ldr	r2, [pc, #304]	; (800f564 <pass_route2+0x224>)
 800f432:	5cd3      	ldrb	r3, [r2, r3]
 800f434:	2b44      	cmp	r3, #68	; 0x44
 800f436:	d115      	bne.n	800f464 <pass_route2+0x124>
 800f438:	687b      	ldr	r3, [r7, #4]
 800f43a:	3302      	adds	r3, #2
 800f43c:	4a49      	ldr	r2, [pc, #292]	; (800f564 <pass_route2+0x224>)
 800f43e:	5cd3      	ldrb	r3, [r2, r3]
 800f440:	2b44      	cmp	r3, #68	; 0x44
 800f442:	d10f      	bne.n	800f464 <pass_route2+0x124>
 800f444:	687b      	ldr	r3, [r7, #4]
 800f446:	3303      	adds	r3, #3
 800f448:	4a46      	ldr	r2, [pc, #280]	; (800f564 <pass_route2+0x224>)
 800f44a:	5cd3      	ldrb	r3, [r2, r3]
 800f44c:	2b77      	cmp	r3, #119	; 0x77
 800f44e:	d109      	bne.n	800f464 <pass_route2+0x124>
			s_flag = 0;
 800f450:	2300      	movs	r3, #0
 800f452:	70fb      	strb	r3, [r7, #3]
			pass[p] = -5;
 800f454:	78bb      	ldrb	r3, [r7, #2]
 800f456:	4a42      	ldr	r2, [pc, #264]	; (800f560 <pass_route2+0x220>)
 800f458:	21fb      	movs	r1, #251	; 0xfb
 800f45a:	54d1      	strb	r1, [r2, r3]
			i = i + 4;
 800f45c:	687b      	ldr	r3, [r7, #4]
 800f45e:	3304      	adds	r3, #4
 800f460:	607b      	str	r3, [r7, #4]
 800f462:	e06d      	b.n	800f540 <pass_route2+0x200>
		}else if(route[i] == 0x77 && route[i+1] == 0x11 && route[i+2] == 0x11 && route[i+3] == 0x77){
 800f464:	4a3f      	ldr	r2, [pc, #252]	; (800f564 <pass_route2+0x224>)
 800f466:	687b      	ldr	r3, [r7, #4]
 800f468:	4413      	add	r3, r2
 800f46a:	781b      	ldrb	r3, [r3, #0]
 800f46c:	2b77      	cmp	r3, #119	; 0x77
 800f46e:	d11b      	bne.n	800f4a8 <pass_route2+0x168>
 800f470:	687b      	ldr	r3, [r7, #4]
 800f472:	3301      	adds	r3, #1
 800f474:	4a3b      	ldr	r2, [pc, #236]	; (800f564 <pass_route2+0x224>)
 800f476:	5cd3      	ldrb	r3, [r2, r3]
 800f478:	2b11      	cmp	r3, #17
 800f47a:	d115      	bne.n	800f4a8 <pass_route2+0x168>
 800f47c:	687b      	ldr	r3, [r7, #4]
 800f47e:	3302      	adds	r3, #2
 800f480:	4a38      	ldr	r2, [pc, #224]	; (800f564 <pass_route2+0x224>)
 800f482:	5cd3      	ldrb	r3, [r2, r3]
 800f484:	2b11      	cmp	r3, #17
 800f486:	d10f      	bne.n	800f4a8 <pass_route2+0x168>
 800f488:	687b      	ldr	r3, [r7, #4]
 800f48a:	3303      	adds	r3, #3
 800f48c:	4a35      	ldr	r2, [pc, #212]	; (800f564 <pass_route2+0x224>)
 800f48e:	5cd3      	ldrb	r3, [r2, r3]
 800f490:	2b77      	cmp	r3, #119	; 0x77
 800f492:	d109      	bne.n	800f4a8 <pass_route2+0x168>
			s_flag = 0;
 800f494:	2300      	movs	r3, #0
 800f496:	70fb      	strb	r3, [r7, #3]
			pass[p] = -6;
 800f498:	78bb      	ldrb	r3, [r7, #2]
 800f49a:	4a31      	ldr	r2, [pc, #196]	; (800f560 <pass_route2+0x220>)
 800f49c:	21fa      	movs	r1, #250	; 0xfa
 800f49e:	54d1      	strb	r1, [r2, r3]
			i = i + 4;
 800f4a0:	687b      	ldr	r3, [r7, #4]
 800f4a2:	3304      	adds	r3, #4
 800f4a4:	607b      	str	r3, [r7, #4]
 800f4a6:	e04b      	b.n	800f540 <pass_route2+0x200>
		}else if(route[i] == 0xff){
 800f4a8:	4a2e      	ldr	r2, [pc, #184]	; (800f564 <pass_route2+0x224>)
 800f4aa:	687b      	ldr	r3, [r7, #4]
 800f4ac:	4413      	add	r3, r2
 800f4ae:	781b      	ldrb	r3, [r3, #0]
 800f4b0:	2bff      	cmp	r3, #255	; 0xff
 800f4b2:	d107      	bne.n	800f4c4 <pass_route2+0x184>
			pass[p] = -114;
 800f4b4:	78bb      	ldrb	r3, [r7, #2]
 800f4b6:	4a2a      	ldr	r2, [pc, #168]	; (800f560 <pass_route2+0x220>)
 800f4b8:	218e      	movs	r1, #142	; 0x8e
 800f4ba:	54d1      	strb	r1, [r2, r3]
			i++;
 800f4bc:	687b      	ldr	r3, [r7, #4]
 800f4be:	3301      	adds	r3, #1
 800f4c0:	607b      	str	r3, [r7, #4]
 800f4c2:	e03d      	b.n	800f540 <pass_route2+0x200>
		}else if(route[i] == 0x77){
 800f4c4:	4a27      	ldr	r2, [pc, #156]	; (800f564 <pass_route2+0x224>)
 800f4c6:	687b      	ldr	r3, [r7, #4]
 800f4c8:	4413      	add	r3, r2
 800f4ca:	781b      	ldrb	r3, [r3, #0]
 800f4cc:	2b77      	cmp	r3, #119	; 0x77
 800f4ce:	d137      	bne.n	800f540 <pass_route2+0x200>
			if(s_flag){
 800f4d0:	78fb      	ldrb	r3, [r7, #3]
 800f4d2:	2b00      	cmp	r3, #0
 800f4d4:	d012      	beq.n	800f4fc <pass_route2+0x1bc>
				pass[p-1]++;
 800f4d6:	78bb      	ldrb	r3, [r7, #2]
 800f4d8:	3b01      	subs	r3, #1
 800f4da:	4a21      	ldr	r2, [pc, #132]	; (800f560 <pass_route2+0x220>)
 800f4dc:	56d2      	ldrsb	r2, [r2, r3]
 800f4de:	b2d2      	uxtb	r2, r2
 800f4e0:	3201      	adds	r2, #1
 800f4e2:	b2d2      	uxtb	r2, r2
 800f4e4:	b251      	sxtb	r1, r2
 800f4e6:	4a1e      	ldr	r2, [pc, #120]	; (800f560 <pass_route2+0x220>)
 800f4e8:	54d1      	strb	r1, [r2, r3]
				p--;
 800f4ea:	78bb      	ldrb	r3, [r7, #2]
 800f4ec:	3b01      	subs	r3, #1
 800f4ee:	70bb      	strb	r3, [r7, #2]
				s_flag = 0;
 800f4f0:	2300      	movs	r3, #0
 800f4f2:	70fb      	strb	r3, [r7, #3]
				i++;
 800f4f4:	687b      	ldr	r3, [r7, #4]
 800f4f6:	3301      	adds	r3, #1
 800f4f8:	607b      	str	r3, [r7, #4]
 800f4fa:	e021      	b.n	800f540 <pass_route2+0x200>
			}else{
				s++;
 800f4fc:	787b      	ldrb	r3, [r7, #1]
 800f4fe:	3301      	adds	r3, #1
 800f500:	707b      	strb	r3, [r7, #1]
				pass[p] = s;
 800f502:	78bb      	ldrb	r3, [r7, #2]
 800f504:	f997 1001 	ldrsb.w	r1, [r7, #1]
 800f508:	4a15      	ldr	r2, [pc, #84]	; (800f560 <pass_route2+0x220>)
 800f50a:	54d1      	strb	r1, [r2, r3]
				while(route[i+1] == 0x77){
 800f50c:	e00c      	b.n	800f528 <pass_route2+0x1e8>
					s_flag = 1;
 800f50e:	2301      	movs	r3, #1
 800f510:	70fb      	strb	r3, [r7, #3]
					pass[p] = s;
 800f512:	78bb      	ldrb	r3, [r7, #2]
 800f514:	f997 1001 	ldrsb.w	r1, [r7, #1]
 800f518:	4a11      	ldr	r2, [pc, #68]	; (800f560 <pass_route2+0x220>)
 800f51a:	54d1      	strb	r1, [r2, r3]
					i++;
 800f51c:	687b      	ldr	r3, [r7, #4]
 800f51e:	3301      	adds	r3, #1
 800f520:	607b      	str	r3, [r7, #4]
					s++;
 800f522:	787b      	ldrb	r3, [r7, #1]
 800f524:	3301      	adds	r3, #1
 800f526:	707b      	strb	r3, [r7, #1]
				while(route[i+1] == 0x77){
 800f528:	687b      	ldr	r3, [r7, #4]
 800f52a:	3301      	adds	r3, #1
 800f52c:	4a0d      	ldr	r2, [pc, #52]	; (800f564 <pass_route2+0x224>)
 800f52e:	5cd3      	ldrb	r3, [r2, r3]
 800f530:	2b77      	cmp	r3, #119	; 0x77
 800f532:	d0ec      	beq.n	800f50e <pass_route2+0x1ce>
				}
				if(!s_flag){
 800f534:	78fb      	ldrb	r3, [r7, #3]
 800f536:	2b00      	cmp	r3, #0
 800f538:	d102      	bne.n	800f540 <pass_route2+0x200>
					i++;
 800f53a:	687b      	ldr	r3, [r7, #4]
 800f53c:	3301      	adds	r3, #1
 800f53e:	607b      	str	r3, [r7, #4]
				}
			}
		}
		p++;
 800f540:	78bb      	ldrb	r3, [r7, #2]
 800f542:	3301      	adds	r3, #1
 800f544:	70bb      	strb	r3, [r7, #2]
	while(route[i-1] != 0xff){
 800f546:	687b      	ldr	r3, [r7, #4]
 800f548:	3b01      	subs	r3, #1
 800f54a:	4a06      	ldr	r2, [pc, #24]	; (800f564 <pass_route2+0x224>)
 800f54c:	5cd3      	ldrb	r3, [r2, r3]
 800f54e:	2bff      	cmp	r3, #255	; 0xff
 800f550:	f47f af10 	bne.w	800f374 <pass_route2+0x34>
	}
}
 800f554:	bf00      	nop
 800f556:	370c      	adds	r7, #12
 800f558:	46bd      	mov	sp, r7
 800f55a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f55e:	4770      	bx	lr
 800f560:	20000350 	.word	0x20000350
 800f564:	20000c54 	.word	0x20000c54

0800f568 <pass_route3>:
//pass_route3
// route配列をpass圧縮する(半区画ベース+斜めあり)
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void pass_route3(void){
 800f568:	b480      	push	{r7}
 800f56a:	b083      	sub	sp, #12
 800f56c:	af00      	add	r7, sp, #0
	int i;
	uint8_t s_flag = 0;
 800f56e:	2300      	movs	r3, #0
 800f570:	70fb      	strb	r3, [r7, #3]
	MF2.FLAG.V = 0;										//a斜めフラグの初期化
 800f572:	4a98      	ldr	r2, [pc, #608]	; (800f7d4 <pass_route3+0x26c>)
 800f574:	8813      	ldrh	r3, [r2, #0]
 800f576:	f36f 03c3 	bfc	r3, #3, #1
 800f57a:	8013      	strh	r3, [r2, #0]
	for(i = 0; i < 256; i++){
 800f57c:	2300      	movs	r3, #0
 800f57e:	607b      	str	r3, [r7, #4]
 800f580:	e007      	b.n	800f592 <pass_route3+0x2a>
		pass[i] = 0;								//pass配列の初期化
 800f582:	4a95      	ldr	r2, [pc, #596]	; (800f7d8 <pass_route3+0x270>)
 800f584:	687b      	ldr	r3, [r7, #4]
 800f586:	4413      	add	r3, r2
 800f588:	2200      	movs	r2, #0
 800f58a:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < 256; i++){
 800f58c:	687b      	ldr	r3, [r7, #4]
 800f58e:	3301      	adds	r3, #1
 800f590:	607b      	str	r3, [r7, #4]
 800f592:	687b      	ldr	r3, [r7, #4]
 800f594:	2bff      	cmp	r3, #255	; 0xff
 800f596:	ddf4      	ble.n	800f582 <pass_route3+0x1a>
	}
	uint8_t p = 0;									//pass配列の配列番号用変数
 800f598:	2300      	movs	r3, #0
 800f59a:	70bb      	strb	r3, [r7, #2]
	i = 0;
 800f59c:	2300      	movs	r3, #0
 800f59e:	607b      	str	r3, [r7, #4]
	uint8_t s = 0;									//a直線数カウント用変数
 800f5a0:	2300      	movs	r3, #0
 800f5a2:	707b      	strb	r3, [r7, #1]
	while(route[i-1] != 0xff){
 800f5a4:	e324      	b.n	800fbf0 <pass_route3+0x688>
		s = 0;
 800f5a6:	2300      	movs	r3, #0
 800f5a8:	707b      	strb	r3, [r7, #1]
		if(route[i] == 0x77 && route[i+1] == 0x44 && route[i+2] == 0x77){
 800f5aa:	4a8c      	ldr	r2, [pc, #560]	; (800f7dc <pass_route3+0x274>)
 800f5ac:	687b      	ldr	r3, [r7, #4]
 800f5ae:	4413      	add	r3, r2
 800f5b0:	781b      	ldrb	r3, [r3, #0]
 800f5b2:	2b77      	cmp	r3, #119	; 0x77
 800f5b4:	d11b      	bne.n	800f5ee <pass_route3+0x86>
 800f5b6:	687b      	ldr	r3, [r7, #4]
 800f5b8:	3301      	adds	r3, #1
 800f5ba:	4a88      	ldr	r2, [pc, #544]	; (800f7dc <pass_route3+0x274>)
 800f5bc:	5cd3      	ldrb	r3, [r2, r3]
 800f5be:	2b44      	cmp	r3, #68	; 0x44
 800f5c0:	d115      	bne.n	800f5ee <pass_route3+0x86>
 800f5c2:	687b      	ldr	r3, [r7, #4]
 800f5c4:	3302      	adds	r3, #2
 800f5c6:	4a85      	ldr	r2, [pc, #532]	; (800f7dc <pass_route3+0x274>)
 800f5c8:	5cd3      	ldrb	r3, [r2, r3]
 800f5ca:	2b77      	cmp	r3, #119	; 0x77
 800f5cc:	d10f      	bne.n	800f5ee <pass_route3+0x86>
			s_flag = 0;
 800f5ce:	2300      	movs	r3, #0
 800f5d0:	70fb      	strb	r3, [r7, #3]
			pass[p] = -3;							//a大回り右90
 800f5d2:	78bb      	ldrb	r3, [r7, #2]
 800f5d4:	4a80      	ldr	r2, [pc, #512]	; (800f7d8 <pass_route3+0x270>)
 800f5d6:	21fd      	movs	r1, #253	; 0xfd
 800f5d8:	54d1      	strb	r1, [r2, r3]
			if(i == 0){								//aスタート時の走行モード切り替えフラグ
 800f5da:	687b      	ldr	r3, [r7, #4]
 800f5dc:	2b00      	cmp	r3, #0
 800f5de:	d102      	bne.n	800f5e6 <pass_route3+0x7e>
				start_mode = 2;
 800f5e0:	4b7f      	ldr	r3, [pc, #508]	; (800f7e0 <pass_route3+0x278>)
 800f5e2:	2202      	movs	r2, #2
 800f5e4:	701a      	strb	r2, [r3, #0]
			}
			i = i + 3;
 800f5e6:	687b      	ldr	r3, [r7, #4]
 800f5e8:	3303      	adds	r3, #3
 800f5ea:	607b      	str	r3, [r7, #4]
 800f5ec:	e2fd      	b.n	800fbea <pass_route3+0x682>
		}else if(route[i] == 0x77 && route[i+1] == 0x11 && route[i+2] == 0x77){
 800f5ee:	4a7b      	ldr	r2, [pc, #492]	; (800f7dc <pass_route3+0x274>)
 800f5f0:	687b      	ldr	r3, [r7, #4]
 800f5f2:	4413      	add	r3, r2
 800f5f4:	781b      	ldrb	r3, [r3, #0]
 800f5f6:	2b77      	cmp	r3, #119	; 0x77
 800f5f8:	d11b      	bne.n	800f632 <pass_route3+0xca>
 800f5fa:	687b      	ldr	r3, [r7, #4]
 800f5fc:	3301      	adds	r3, #1
 800f5fe:	4a77      	ldr	r2, [pc, #476]	; (800f7dc <pass_route3+0x274>)
 800f600:	5cd3      	ldrb	r3, [r2, r3]
 800f602:	2b11      	cmp	r3, #17
 800f604:	d115      	bne.n	800f632 <pass_route3+0xca>
 800f606:	687b      	ldr	r3, [r7, #4]
 800f608:	3302      	adds	r3, #2
 800f60a:	4a74      	ldr	r2, [pc, #464]	; (800f7dc <pass_route3+0x274>)
 800f60c:	5cd3      	ldrb	r3, [r2, r3]
 800f60e:	2b77      	cmp	r3, #119	; 0x77
 800f610:	d10f      	bne.n	800f632 <pass_route3+0xca>
			s_flag = 0;
 800f612:	2300      	movs	r3, #0
 800f614:	70fb      	strb	r3, [r7, #3]
			pass[p] = -4;							//a大回り左90
 800f616:	78bb      	ldrb	r3, [r7, #2]
 800f618:	4a6f      	ldr	r2, [pc, #444]	; (800f7d8 <pass_route3+0x270>)
 800f61a:	21fc      	movs	r1, #252	; 0xfc
 800f61c:	54d1      	strb	r1, [r2, r3]
			if(i == 0){								//aスタート時の走行モード切り替えフラグ
 800f61e:	687b      	ldr	r3, [r7, #4]
 800f620:	2b00      	cmp	r3, #0
 800f622:	d102      	bne.n	800f62a <pass_route3+0xc2>
				start_mode = 2;
 800f624:	4b6e      	ldr	r3, [pc, #440]	; (800f7e0 <pass_route3+0x278>)
 800f626:	2202      	movs	r2, #2
 800f628:	701a      	strb	r2, [r3, #0]
			}
			i = i + 3;
 800f62a:	687b      	ldr	r3, [r7, #4]
 800f62c:	3303      	adds	r3, #3
 800f62e:	607b      	str	r3, [r7, #4]
 800f630:	e2db      	b.n	800fbea <pass_route3+0x682>
		}else if(route[i] == 0x77 && route[i+1] == 0x44 && route[i+2] == 0x44 && route[i+3] == 0x77){
 800f632:	4a6a      	ldr	r2, [pc, #424]	; (800f7dc <pass_route3+0x274>)
 800f634:	687b      	ldr	r3, [r7, #4]
 800f636:	4413      	add	r3, r2
 800f638:	781b      	ldrb	r3, [r3, #0]
 800f63a:	2b77      	cmp	r3, #119	; 0x77
 800f63c:	d11b      	bne.n	800f676 <pass_route3+0x10e>
 800f63e:	687b      	ldr	r3, [r7, #4]
 800f640:	3301      	adds	r3, #1
 800f642:	4a66      	ldr	r2, [pc, #408]	; (800f7dc <pass_route3+0x274>)
 800f644:	5cd3      	ldrb	r3, [r2, r3]
 800f646:	2b44      	cmp	r3, #68	; 0x44
 800f648:	d115      	bne.n	800f676 <pass_route3+0x10e>
 800f64a:	687b      	ldr	r3, [r7, #4]
 800f64c:	3302      	adds	r3, #2
 800f64e:	4a63      	ldr	r2, [pc, #396]	; (800f7dc <pass_route3+0x274>)
 800f650:	5cd3      	ldrb	r3, [r2, r3]
 800f652:	2b44      	cmp	r3, #68	; 0x44
 800f654:	d10f      	bne.n	800f676 <pass_route3+0x10e>
 800f656:	687b      	ldr	r3, [r7, #4]
 800f658:	3303      	adds	r3, #3
 800f65a:	4a60      	ldr	r2, [pc, #384]	; (800f7dc <pass_route3+0x274>)
 800f65c:	5cd3      	ldrb	r3, [r2, r3]
 800f65e:	2b77      	cmp	r3, #119	; 0x77
 800f660:	d109      	bne.n	800f676 <pass_route3+0x10e>
			s_flag = 0;
 800f662:	2300      	movs	r3, #0
 800f664:	70fb      	strb	r3, [r7, #3]
			pass[p] = -5;							//a大回り右180
 800f666:	78bb      	ldrb	r3, [r7, #2]
 800f668:	4a5b      	ldr	r2, [pc, #364]	; (800f7d8 <pass_route3+0x270>)
 800f66a:	21fb      	movs	r1, #251	; 0xfb
 800f66c:	54d1      	strb	r1, [r2, r3]
			i = i + 4;
 800f66e:	687b      	ldr	r3, [r7, #4]
 800f670:	3304      	adds	r3, #4
 800f672:	607b      	str	r3, [r7, #4]
 800f674:	e2b9      	b.n	800fbea <pass_route3+0x682>
		}else if(route[i] == 0x77 && route[i+1] == 0x11 && route[i+2] == 0x11 && route[i+3] == 0x77){
 800f676:	4a59      	ldr	r2, [pc, #356]	; (800f7dc <pass_route3+0x274>)
 800f678:	687b      	ldr	r3, [r7, #4]
 800f67a:	4413      	add	r3, r2
 800f67c:	781b      	ldrb	r3, [r3, #0]
 800f67e:	2b77      	cmp	r3, #119	; 0x77
 800f680:	d11b      	bne.n	800f6ba <pass_route3+0x152>
 800f682:	687b      	ldr	r3, [r7, #4]
 800f684:	3301      	adds	r3, #1
 800f686:	4a55      	ldr	r2, [pc, #340]	; (800f7dc <pass_route3+0x274>)
 800f688:	5cd3      	ldrb	r3, [r2, r3]
 800f68a:	2b11      	cmp	r3, #17
 800f68c:	d115      	bne.n	800f6ba <pass_route3+0x152>
 800f68e:	687b      	ldr	r3, [r7, #4]
 800f690:	3302      	adds	r3, #2
 800f692:	4a52      	ldr	r2, [pc, #328]	; (800f7dc <pass_route3+0x274>)
 800f694:	5cd3      	ldrb	r3, [r2, r3]
 800f696:	2b11      	cmp	r3, #17
 800f698:	d10f      	bne.n	800f6ba <pass_route3+0x152>
 800f69a:	687b      	ldr	r3, [r7, #4]
 800f69c:	3303      	adds	r3, #3
 800f69e:	4a4f      	ldr	r2, [pc, #316]	; (800f7dc <pass_route3+0x274>)
 800f6a0:	5cd3      	ldrb	r3, [r2, r3]
 800f6a2:	2b77      	cmp	r3, #119	; 0x77
 800f6a4:	d109      	bne.n	800f6ba <pass_route3+0x152>
			s_flag = 0;
 800f6a6:	2300      	movs	r3, #0
 800f6a8:	70fb      	strb	r3, [r7, #3]
			pass[p] = -6;							//a大回り左180
 800f6aa:	78bb      	ldrb	r3, [r7, #2]
 800f6ac:	4a4a      	ldr	r2, [pc, #296]	; (800f7d8 <pass_route3+0x270>)
 800f6ae:	21fa      	movs	r1, #250	; 0xfa
 800f6b0:	54d1      	strb	r1, [r2, r3]
			i = i + 4;
 800f6b2:	687b      	ldr	r3, [r7, #4]
 800f6b4:	3304      	adds	r3, #4
 800f6b6:	607b      	str	r3, [r7, #4]
 800f6b8:	e297      	b.n	800fbea <pass_route3+0x682>
		}else if(route[i] == 0x77 && route[i+1] == 0x44 && route[i+2] == 0x11){
 800f6ba:	4a48      	ldr	r2, [pc, #288]	; (800f7dc <pass_route3+0x274>)
 800f6bc:	687b      	ldr	r3, [r7, #4]
 800f6be:	4413      	add	r3, r2
 800f6c0:	781b      	ldrb	r3, [r3, #0]
 800f6c2:	2b77      	cmp	r3, #119	; 0x77
 800f6c4:	d120      	bne.n	800f708 <pass_route3+0x1a0>
 800f6c6:	687b      	ldr	r3, [r7, #4]
 800f6c8:	3301      	adds	r3, #1
 800f6ca:	4a44      	ldr	r2, [pc, #272]	; (800f7dc <pass_route3+0x274>)
 800f6cc:	5cd3      	ldrb	r3, [r2, r3]
 800f6ce:	2b44      	cmp	r3, #68	; 0x44
 800f6d0:	d11a      	bne.n	800f708 <pass_route3+0x1a0>
 800f6d2:	687b      	ldr	r3, [r7, #4]
 800f6d4:	3302      	adds	r3, #2
 800f6d6:	4a41      	ldr	r2, [pc, #260]	; (800f7dc <pass_route3+0x274>)
 800f6d8:	5cd3      	ldrb	r3, [r2, r3]
 800f6da:	2b11      	cmp	r3, #17
 800f6dc:	d114      	bne.n	800f708 <pass_route3+0x1a0>
			s_flag = 0;
 800f6de:	2300      	movs	r3, #0
 800f6e0:	70fb      	strb	r3, [r7, #3]
			pass[p] = -7;							//a斜め右V45in
 800f6e2:	78bb      	ldrb	r3, [r7, #2]
 800f6e4:	4a3c      	ldr	r2, [pc, #240]	; (800f7d8 <pass_route3+0x270>)
 800f6e6:	21f9      	movs	r1, #249	; 0xf9
 800f6e8:	54d1      	strb	r1, [r2, r3]
			MF2.FLAG.V = 1;
 800f6ea:	4a3a      	ldr	r2, [pc, #232]	; (800f7d4 <pass_route3+0x26c>)
 800f6ec:	8813      	ldrh	r3, [r2, #0]
 800f6ee:	f043 0308 	orr.w	r3, r3, #8
 800f6f2:	8013      	strh	r3, [r2, #0]
			if(i == 0){								//aスタート時の走行モード切り替えフラグ
 800f6f4:	687b      	ldr	r3, [r7, #4]
 800f6f6:	2b00      	cmp	r3, #0
 800f6f8:	d102      	bne.n	800f700 <pass_route3+0x198>
				start_mode = 2;
 800f6fa:	4b39      	ldr	r3, [pc, #228]	; (800f7e0 <pass_route3+0x278>)
 800f6fc:	2202      	movs	r2, #2
 800f6fe:	701a      	strb	r2, [r3, #0]
			}
			i = i + 2;
 800f700:	687b      	ldr	r3, [r7, #4]
 800f702:	3302      	adds	r3, #2
 800f704:	607b      	str	r3, [r7, #4]
 800f706:	e270      	b.n	800fbea <pass_route3+0x682>
		}else if(MF2.FLAG.V == 1 && route[i] == 0x44 && route[i+1] == 0x77){
 800f708:	4b32      	ldr	r3, [pc, #200]	; (800f7d4 <pass_route3+0x26c>)
 800f70a:	881b      	ldrh	r3, [r3, #0]
 800f70c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800f710:	b2db      	uxtb	r3, r3
 800f712:	2b01      	cmp	r3, #1
 800f714:	d11a      	bne.n	800f74c <pass_route3+0x1e4>
 800f716:	4a31      	ldr	r2, [pc, #196]	; (800f7dc <pass_route3+0x274>)
 800f718:	687b      	ldr	r3, [r7, #4]
 800f71a:	4413      	add	r3, r2
 800f71c:	781b      	ldrb	r3, [r3, #0]
 800f71e:	2b44      	cmp	r3, #68	; 0x44
 800f720:	d114      	bne.n	800f74c <pass_route3+0x1e4>
 800f722:	687b      	ldr	r3, [r7, #4]
 800f724:	3301      	adds	r3, #1
 800f726:	4a2d      	ldr	r2, [pc, #180]	; (800f7dc <pass_route3+0x274>)
 800f728:	5cd3      	ldrb	r3, [r2, r3]
 800f72a:	2b77      	cmp	r3, #119	; 0x77
 800f72c:	d10e      	bne.n	800f74c <pass_route3+0x1e4>
			s_flag = 0;
 800f72e:	2300      	movs	r3, #0
 800f730:	70fb      	strb	r3, [r7, #3]
			pass[p] = -7;							//a斜め右V45out
 800f732:	78bb      	ldrb	r3, [r7, #2]
 800f734:	4a28      	ldr	r2, [pc, #160]	; (800f7d8 <pass_route3+0x270>)
 800f736:	21f9      	movs	r1, #249	; 0xf9
 800f738:	54d1      	strb	r1, [r2, r3]
			MF2.FLAG.V = 0;
 800f73a:	4a26      	ldr	r2, [pc, #152]	; (800f7d4 <pass_route3+0x26c>)
 800f73c:	8813      	ldrh	r3, [r2, #0]
 800f73e:	f36f 03c3 	bfc	r3, #3, #1
 800f742:	8013      	strh	r3, [r2, #0]
			i = i + 2;
 800f744:	687b      	ldr	r3, [r7, #4]
 800f746:	3302      	adds	r3, #2
 800f748:	607b      	str	r3, [r7, #4]
 800f74a:	e24e      	b.n	800fbea <pass_route3+0x682>
		}else if(route[i] == 0x77 && route[i+1] == 0x11 && route[i+2] == 0x44){
 800f74c:	4a23      	ldr	r2, [pc, #140]	; (800f7dc <pass_route3+0x274>)
 800f74e:	687b      	ldr	r3, [r7, #4]
 800f750:	4413      	add	r3, r2
 800f752:	781b      	ldrb	r3, [r3, #0]
 800f754:	2b77      	cmp	r3, #119	; 0x77
 800f756:	d11a      	bne.n	800f78e <pass_route3+0x226>
 800f758:	687b      	ldr	r3, [r7, #4]
 800f75a:	3301      	adds	r3, #1
 800f75c:	4a1f      	ldr	r2, [pc, #124]	; (800f7dc <pass_route3+0x274>)
 800f75e:	5cd3      	ldrb	r3, [r2, r3]
 800f760:	2b11      	cmp	r3, #17
 800f762:	d114      	bne.n	800f78e <pass_route3+0x226>
 800f764:	687b      	ldr	r3, [r7, #4]
 800f766:	3302      	adds	r3, #2
 800f768:	4a1c      	ldr	r2, [pc, #112]	; (800f7dc <pass_route3+0x274>)
 800f76a:	5cd3      	ldrb	r3, [r2, r3]
 800f76c:	2b44      	cmp	r3, #68	; 0x44
 800f76e:	d10e      	bne.n	800f78e <pass_route3+0x226>
			s_flag = 0;
 800f770:	2300      	movs	r3, #0
 800f772:	70fb      	strb	r3, [r7, #3]
			pass[p] = -8;							//a斜め左V45in
 800f774:	78bb      	ldrb	r3, [r7, #2]
 800f776:	4a18      	ldr	r2, [pc, #96]	; (800f7d8 <pass_route3+0x270>)
 800f778:	21f8      	movs	r1, #248	; 0xf8
 800f77a:	54d1      	strb	r1, [r2, r3]
			MF2.FLAG.V = 1;
 800f77c:	4a15      	ldr	r2, [pc, #84]	; (800f7d4 <pass_route3+0x26c>)
 800f77e:	8813      	ldrh	r3, [r2, #0]
 800f780:	f043 0308 	orr.w	r3, r3, #8
 800f784:	8013      	strh	r3, [r2, #0]
			i = i + 2;
 800f786:	687b      	ldr	r3, [r7, #4]
 800f788:	3302      	adds	r3, #2
 800f78a:	607b      	str	r3, [r7, #4]
 800f78c:	e22d      	b.n	800fbea <pass_route3+0x682>
		}else if(MF2.FLAG.V == 1 && route[i] == 0x11 && route[i+1] == 0x77){
 800f78e:	4b11      	ldr	r3, [pc, #68]	; (800f7d4 <pass_route3+0x26c>)
 800f790:	881b      	ldrh	r3, [r3, #0]
 800f792:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800f796:	b2db      	uxtb	r3, r3
 800f798:	2b01      	cmp	r3, #1
 800f79a:	d123      	bne.n	800f7e4 <pass_route3+0x27c>
 800f79c:	4a0f      	ldr	r2, [pc, #60]	; (800f7dc <pass_route3+0x274>)
 800f79e:	687b      	ldr	r3, [r7, #4]
 800f7a0:	4413      	add	r3, r2
 800f7a2:	781b      	ldrb	r3, [r3, #0]
 800f7a4:	2b11      	cmp	r3, #17
 800f7a6:	d11d      	bne.n	800f7e4 <pass_route3+0x27c>
 800f7a8:	687b      	ldr	r3, [r7, #4]
 800f7aa:	3301      	adds	r3, #1
 800f7ac:	4a0b      	ldr	r2, [pc, #44]	; (800f7dc <pass_route3+0x274>)
 800f7ae:	5cd3      	ldrb	r3, [r2, r3]
 800f7b0:	2b77      	cmp	r3, #119	; 0x77
 800f7b2:	d117      	bne.n	800f7e4 <pass_route3+0x27c>
			s_flag = 0;
 800f7b4:	2300      	movs	r3, #0
 800f7b6:	70fb      	strb	r3, [r7, #3]
			pass[p] = -8;							//a斜め左V45out
 800f7b8:	78bb      	ldrb	r3, [r7, #2]
 800f7ba:	4a07      	ldr	r2, [pc, #28]	; (800f7d8 <pass_route3+0x270>)
 800f7bc:	21f8      	movs	r1, #248	; 0xf8
 800f7be:	54d1      	strb	r1, [r2, r3]
			MF2.FLAG.V = 0;
 800f7c0:	4a04      	ldr	r2, [pc, #16]	; (800f7d4 <pass_route3+0x26c>)
 800f7c2:	8813      	ldrh	r3, [r2, #0]
 800f7c4:	f36f 03c3 	bfc	r3, #3, #1
 800f7c8:	8013      	strh	r3, [r2, #0]
			i = i + 2;
 800f7ca:	687b      	ldr	r3, [r7, #4]
 800f7cc:	3302      	adds	r3, #2
 800f7ce:	607b      	str	r3, [r7, #4]
 800f7d0:	e20b      	b.n	800fbea <pass_route3+0x682>
 800f7d2:	bf00      	nop
 800f7d4:	20000f64 	.word	0x20000f64
 800f7d8:	20000350 	.word	0x20000350
 800f7dc:	20000c54 	.word	0x20000c54
 800f7e0:	200015c8 	.word	0x200015c8
		}else if(MF2.FLAG.V == 1 && route[i] == 0x44 && route[i+1] == 0x44 && route[i+2] == 0x11){
 800f7e4:	4b99      	ldr	r3, [pc, #612]	; (800fa4c <pass_route3+0x4e4>)
 800f7e6:	881b      	ldrh	r3, [r3, #0]
 800f7e8:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800f7ec:	b2db      	uxtb	r3, r3
 800f7ee:	2b01      	cmp	r3, #1
 800f7f0:	d120      	bne.n	800f834 <pass_route3+0x2cc>
 800f7f2:	4a97      	ldr	r2, [pc, #604]	; (800fa50 <pass_route3+0x4e8>)
 800f7f4:	687b      	ldr	r3, [r7, #4]
 800f7f6:	4413      	add	r3, r2
 800f7f8:	781b      	ldrb	r3, [r3, #0]
 800f7fa:	2b44      	cmp	r3, #68	; 0x44
 800f7fc:	d11a      	bne.n	800f834 <pass_route3+0x2cc>
 800f7fe:	687b      	ldr	r3, [r7, #4]
 800f800:	3301      	adds	r3, #1
 800f802:	4a93      	ldr	r2, [pc, #588]	; (800fa50 <pass_route3+0x4e8>)
 800f804:	5cd3      	ldrb	r3, [r2, r3]
 800f806:	2b44      	cmp	r3, #68	; 0x44
 800f808:	d114      	bne.n	800f834 <pass_route3+0x2cc>
 800f80a:	687b      	ldr	r3, [r7, #4]
 800f80c:	3302      	adds	r3, #2
 800f80e:	4a90      	ldr	r2, [pc, #576]	; (800fa50 <pass_route3+0x4e8>)
 800f810:	5cd3      	ldrb	r3, [r2, r3]
 800f812:	2b11      	cmp	r3, #17
 800f814:	d10e      	bne.n	800f834 <pass_route3+0x2cc>
			s_flag = 0;
 800f816:	2300      	movs	r3, #0
 800f818:	70fb      	strb	r3, [r7, #3]
			pass[p] = -9;							//a斜め右V90
 800f81a:	78bb      	ldrb	r3, [r7, #2]
 800f81c:	4a8d      	ldr	r2, [pc, #564]	; (800fa54 <pass_route3+0x4ec>)
 800f81e:	21f7      	movs	r1, #247	; 0xf7
 800f820:	54d1      	strb	r1, [r2, r3]
			MF2.FLAG.V = 1;
 800f822:	4a8a      	ldr	r2, [pc, #552]	; (800fa4c <pass_route3+0x4e4>)
 800f824:	8813      	ldrh	r3, [r2, #0]
 800f826:	f043 0308 	orr.w	r3, r3, #8
 800f82a:	8013      	strh	r3, [r2, #0]
			i = i + 2;
 800f82c:	687b      	ldr	r3, [r7, #4]
 800f82e:	3302      	adds	r3, #2
 800f830:	607b      	str	r3, [r7, #4]
 800f832:	e1da      	b.n	800fbea <pass_route3+0x682>
		}else if(MF2.FLAG.V == 1 && route[i] == 0x11 && route[i+1] == 0x11 && route[i+2] == 0x44){
 800f834:	4b85      	ldr	r3, [pc, #532]	; (800fa4c <pass_route3+0x4e4>)
 800f836:	881b      	ldrh	r3, [r3, #0]
 800f838:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800f83c:	b2db      	uxtb	r3, r3
 800f83e:	2b01      	cmp	r3, #1
 800f840:	d120      	bne.n	800f884 <pass_route3+0x31c>
 800f842:	4a83      	ldr	r2, [pc, #524]	; (800fa50 <pass_route3+0x4e8>)
 800f844:	687b      	ldr	r3, [r7, #4]
 800f846:	4413      	add	r3, r2
 800f848:	781b      	ldrb	r3, [r3, #0]
 800f84a:	2b11      	cmp	r3, #17
 800f84c:	d11a      	bne.n	800f884 <pass_route3+0x31c>
 800f84e:	687b      	ldr	r3, [r7, #4]
 800f850:	3301      	adds	r3, #1
 800f852:	4a7f      	ldr	r2, [pc, #508]	; (800fa50 <pass_route3+0x4e8>)
 800f854:	5cd3      	ldrb	r3, [r2, r3]
 800f856:	2b11      	cmp	r3, #17
 800f858:	d114      	bne.n	800f884 <pass_route3+0x31c>
 800f85a:	687b      	ldr	r3, [r7, #4]
 800f85c:	3302      	adds	r3, #2
 800f85e:	4a7c      	ldr	r2, [pc, #496]	; (800fa50 <pass_route3+0x4e8>)
 800f860:	5cd3      	ldrb	r3, [r2, r3]
 800f862:	2b44      	cmp	r3, #68	; 0x44
 800f864:	d10e      	bne.n	800f884 <pass_route3+0x31c>
			s_flag = 0;
 800f866:	2300      	movs	r3, #0
 800f868:	70fb      	strb	r3, [r7, #3]
			pass[p] = -10;							//a斜め左V90
 800f86a:	78bb      	ldrb	r3, [r7, #2]
 800f86c:	4a79      	ldr	r2, [pc, #484]	; (800fa54 <pass_route3+0x4ec>)
 800f86e:	21f6      	movs	r1, #246	; 0xf6
 800f870:	54d1      	strb	r1, [r2, r3]
			MF2.FLAG.V = 1;
 800f872:	4a76      	ldr	r2, [pc, #472]	; (800fa4c <pass_route3+0x4e4>)
 800f874:	8813      	ldrh	r3, [r2, #0]
 800f876:	f043 0308 	orr.w	r3, r3, #8
 800f87a:	8013      	strh	r3, [r2, #0]
			i = i + 2;
 800f87c:	687b      	ldr	r3, [r7, #4]
 800f87e:	3302      	adds	r3, #2
 800f880:	607b      	str	r3, [r7, #4]
 800f882:	e1b2      	b.n	800fbea <pass_route3+0x682>
		}else if(route[i] == 0x77 && route[i+1] == 0x44 && route[i+2] == 0x44 && route[i+3] == 0x11){
 800f884:	4a72      	ldr	r2, [pc, #456]	; (800fa50 <pass_route3+0x4e8>)
 800f886:	687b      	ldr	r3, [r7, #4]
 800f888:	4413      	add	r3, r2
 800f88a:	781b      	ldrb	r3, [r3, #0]
 800f88c:	2b77      	cmp	r3, #119	; 0x77
 800f88e:	d126      	bne.n	800f8de <pass_route3+0x376>
 800f890:	687b      	ldr	r3, [r7, #4]
 800f892:	3301      	adds	r3, #1
 800f894:	4a6e      	ldr	r2, [pc, #440]	; (800fa50 <pass_route3+0x4e8>)
 800f896:	5cd3      	ldrb	r3, [r2, r3]
 800f898:	2b44      	cmp	r3, #68	; 0x44
 800f89a:	d120      	bne.n	800f8de <pass_route3+0x376>
 800f89c:	687b      	ldr	r3, [r7, #4]
 800f89e:	3302      	adds	r3, #2
 800f8a0:	4a6b      	ldr	r2, [pc, #428]	; (800fa50 <pass_route3+0x4e8>)
 800f8a2:	5cd3      	ldrb	r3, [r2, r3]
 800f8a4:	2b44      	cmp	r3, #68	; 0x44
 800f8a6:	d11a      	bne.n	800f8de <pass_route3+0x376>
 800f8a8:	687b      	ldr	r3, [r7, #4]
 800f8aa:	3303      	adds	r3, #3
 800f8ac:	4a68      	ldr	r2, [pc, #416]	; (800fa50 <pass_route3+0x4e8>)
 800f8ae:	5cd3      	ldrb	r3, [r2, r3]
 800f8b0:	2b11      	cmp	r3, #17
 800f8b2:	d114      	bne.n	800f8de <pass_route3+0x376>
			s_flag = 0;
 800f8b4:	2300      	movs	r3, #0
 800f8b6:	70fb      	strb	r3, [r7, #3]
			pass[p] = -11;							//a斜め右V135in
 800f8b8:	78bb      	ldrb	r3, [r7, #2]
 800f8ba:	4a66      	ldr	r2, [pc, #408]	; (800fa54 <pass_route3+0x4ec>)
 800f8bc:	21f5      	movs	r1, #245	; 0xf5
 800f8be:	54d1      	strb	r1, [r2, r3]
			MF2.FLAG.V = 1;
 800f8c0:	4a62      	ldr	r2, [pc, #392]	; (800fa4c <pass_route3+0x4e4>)
 800f8c2:	8813      	ldrh	r3, [r2, #0]
 800f8c4:	f043 0308 	orr.w	r3, r3, #8
 800f8c8:	8013      	strh	r3, [r2, #0]
			if(i == 0){								//aスタート時の走行モード切り替えフラグ
 800f8ca:	687b      	ldr	r3, [r7, #4]
 800f8cc:	2b00      	cmp	r3, #0
 800f8ce:	d102      	bne.n	800f8d6 <pass_route3+0x36e>
				start_mode = 2;
 800f8d0:	4b61      	ldr	r3, [pc, #388]	; (800fa58 <pass_route3+0x4f0>)
 800f8d2:	2202      	movs	r2, #2
 800f8d4:	701a      	strb	r2, [r3, #0]
			}
			i = i + 3;
 800f8d6:	687b      	ldr	r3, [r7, #4]
 800f8d8:	3303      	adds	r3, #3
 800f8da:	607b      	str	r3, [r7, #4]
 800f8dc:	e185      	b.n	800fbea <pass_route3+0x682>
		}else if(MF2.FLAG.V == 1 && route[i] == 0x44 && route[i+1] == 0x44 && route[i+2] == 0x77){
 800f8de:	4b5b      	ldr	r3, [pc, #364]	; (800fa4c <pass_route3+0x4e4>)
 800f8e0:	881b      	ldrh	r3, [r3, #0]
 800f8e2:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800f8e6:	b2db      	uxtb	r3, r3
 800f8e8:	2b01      	cmp	r3, #1
 800f8ea:	d120      	bne.n	800f92e <pass_route3+0x3c6>
 800f8ec:	4a58      	ldr	r2, [pc, #352]	; (800fa50 <pass_route3+0x4e8>)
 800f8ee:	687b      	ldr	r3, [r7, #4]
 800f8f0:	4413      	add	r3, r2
 800f8f2:	781b      	ldrb	r3, [r3, #0]
 800f8f4:	2b44      	cmp	r3, #68	; 0x44
 800f8f6:	d11a      	bne.n	800f92e <pass_route3+0x3c6>
 800f8f8:	687b      	ldr	r3, [r7, #4]
 800f8fa:	3301      	adds	r3, #1
 800f8fc:	4a54      	ldr	r2, [pc, #336]	; (800fa50 <pass_route3+0x4e8>)
 800f8fe:	5cd3      	ldrb	r3, [r2, r3]
 800f900:	2b44      	cmp	r3, #68	; 0x44
 800f902:	d114      	bne.n	800f92e <pass_route3+0x3c6>
 800f904:	687b      	ldr	r3, [r7, #4]
 800f906:	3302      	adds	r3, #2
 800f908:	4a51      	ldr	r2, [pc, #324]	; (800fa50 <pass_route3+0x4e8>)
 800f90a:	5cd3      	ldrb	r3, [r2, r3]
 800f90c:	2b77      	cmp	r3, #119	; 0x77
 800f90e:	d10e      	bne.n	800f92e <pass_route3+0x3c6>
			s_flag = 0;
 800f910:	2300      	movs	r3, #0
 800f912:	70fb      	strb	r3, [r7, #3]
			pass[p] = -11;							//a斜め右V135out
 800f914:	78bb      	ldrb	r3, [r7, #2]
 800f916:	4a4f      	ldr	r2, [pc, #316]	; (800fa54 <pass_route3+0x4ec>)
 800f918:	21f5      	movs	r1, #245	; 0xf5
 800f91a:	54d1      	strb	r1, [r2, r3]
			MF2.FLAG.V = 0;
 800f91c:	4a4b      	ldr	r2, [pc, #300]	; (800fa4c <pass_route3+0x4e4>)
 800f91e:	8813      	ldrh	r3, [r2, #0]
 800f920:	f36f 03c3 	bfc	r3, #3, #1
 800f924:	8013      	strh	r3, [r2, #0]
			i = i + 3;
 800f926:	687b      	ldr	r3, [r7, #4]
 800f928:	3303      	adds	r3, #3
 800f92a:	607b      	str	r3, [r7, #4]
 800f92c:	e15d      	b.n	800fbea <pass_route3+0x682>
		}else if(route[i] == 0x77 && route[i+1] == 0x11 && route[i+2] == 0x11 && route[i+3] == 0x44){
 800f92e:	4a48      	ldr	r2, [pc, #288]	; (800fa50 <pass_route3+0x4e8>)
 800f930:	687b      	ldr	r3, [r7, #4]
 800f932:	4413      	add	r3, r2
 800f934:	781b      	ldrb	r3, [r3, #0]
 800f936:	2b77      	cmp	r3, #119	; 0x77
 800f938:	d120      	bne.n	800f97c <pass_route3+0x414>
 800f93a:	687b      	ldr	r3, [r7, #4]
 800f93c:	3301      	adds	r3, #1
 800f93e:	4a44      	ldr	r2, [pc, #272]	; (800fa50 <pass_route3+0x4e8>)
 800f940:	5cd3      	ldrb	r3, [r2, r3]
 800f942:	2b11      	cmp	r3, #17
 800f944:	d11a      	bne.n	800f97c <pass_route3+0x414>
 800f946:	687b      	ldr	r3, [r7, #4]
 800f948:	3302      	adds	r3, #2
 800f94a:	4a41      	ldr	r2, [pc, #260]	; (800fa50 <pass_route3+0x4e8>)
 800f94c:	5cd3      	ldrb	r3, [r2, r3]
 800f94e:	2b11      	cmp	r3, #17
 800f950:	d114      	bne.n	800f97c <pass_route3+0x414>
 800f952:	687b      	ldr	r3, [r7, #4]
 800f954:	3303      	adds	r3, #3
 800f956:	4a3e      	ldr	r2, [pc, #248]	; (800fa50 <pass_route3+0x4e8>)
 800f958:	5cd3      	ldrb	r3, [r2, r3]
 800f95a:	2b44      	cmp	r3, #68	; 0x44
 800f95c:	d10e      	bne.n	800f97c <pass_route3+0x414>
			s_flag = 0;
 800f95e:	2300      	movs	r3, #0
 800f960:	70fb      	strb	r3, [r7, #3]
			pass[p] = -12;							//a斜め左V135in
 800f962:	78bb      	ldrb	r3, [r7, #2]
 800f964:	4a3b      	ldr	r2, [pc, #236]	; (800fa54 <pass_route3+0x4ec>)
 800f966:	21f4      	movs	r1, #244	; 0xf4
 800f968:	54d1      	strb	r1, [r2, r3]
			MF2.FLAG.V = 1;
 800f96a:	4a38      	ldr	r2, [pc, #224]	; (800fa4c <pass_route3+0x4e4>)
 800f96c:	8813      	ldrh	r3, [r2, #0]
 800f96e:	f043 0308 	orr.w	r3, r3, #8
 800f972:	8013      	strh	r3, [r2, #0]
			i = i + 3;
 800f974:	687b      	ldr	r3, [r7, #4]
 800f976:	3303      	adds	r3, #3
 800f978:	607b      	str	r3, [r7, #4]
 800f97a:	e136      	b.n	800fbea <pass_route3+0x682>
		}else if(MF2.FLAG.V == 1 && route[i] == 0x11 && route[i+1] == 0x11 && route[i+2] == 0x77){
 800f97c:	4b33      	ldr	r3, [pc, #204]	; (800fa4c <pass_route3+0x4e4>)
 800f97e:	881b      	ldrh	r3, [r3, #0]
 800f980:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800f984:	b2db      	uxtb	r3, r3
 800f986:	2b01      	cmp	r3, #1
 800f988:	d120      	bne.n	800f9cc <pass_route3+0x464>
 800f98a:	4a31      	ldr	r2, [pc, #196]	; (800fa50 <pass_route3+0x4e8>)
 800f98c:	687b      	ldr	r3, [r7, #4]
 800f98e:	4413      	add	r3, r2
 800f990:	781b      	ldrb	r3, [r3, #0]
 800f992:	2b11      	cmp	r3, #17
 800f994:	d11a      	bne.n	800f9cc <pass_route3+0x464>
 800f996:	687b      	ldr	r3, [r7, #4]
 800f998:	3301      	adds	r3, #1
 800f99a:	4a2d      	ldr	r2, [pc, #180]	; (800fa50 <pass_route3+0x4e8>)
 800f99c:	5cd3      	ldrb	r3, [r2, r3]
 800f99e:	2b11      	cmp	r3, #17
 800f9a0:	d114      	bne.n	800f9cc <pass_route3+0x464>
 800f9a2:	687b      	ldr	r3, [r7, #4]
 800f9a4:	3302      	adds	r3, #2
 800f9a6:	4a2a      	ldr	r2, [pc, #168]	; (800fa50 <pass_route3+0x4e8>)
 800f9a8:	5cd3      	ldrb	r3, [r2, r3]
 800f9aa:	2b77      	cmp	r3, #119	; 0x77
 800f9ac:	d10e      	bne.n	800f9cc <pass_route3+0x464>
			s_flag = 0;
 800f9ae:	2300      	movs	r3, #0
 800f9b0:	70fb      	strb	r3, [r7, #3]
			pass[p] = -12;							//a斜め左V135out
 800f9b2:	78bb      	ldrb	r3, [r7, #2]
 800f9b4:	4a27      	ldr	r2, [pc, #156]	; (800fa54 <pass_route3+0x4ec>)
 800f9b6:	21f4      	movs	r1, #244	; 0xf4
 800f9b8:	54d1      	strb	r1, [r2, r3]
			MF2.FLAG.V = 0;
 800f9ba:	4a24      	ldr	r2, [pc, #144]	; (800fa4c <pass_route3+0x4e4>)
 800f9bc:	8813      	ldrh	r3, [r2, #0]
 800f9be:	f36f 03c3 	bfc	r3, #3, #1
 800f9c2:	8013      	strh	r3, [r2, #0]
			i = i + 3;
 800f9c4:	687b      	ldr	r3, [r7, #4]
 800f9c6:	3303      	adds	r3, #3
 800f9c8:	607b      	str	r3, [r7, #4]
 800f9ca:	e10e      	b.n	800fbea <pass_route3+0x682>
		}else if(route[i] == 0xff){
 800f9cc:	4a20      	ldr	r2, [pc, #128]	; (800fa50 <pass_route3+0x4e8>)
 800f9ce:	687b      	ldr	r3, [r7, #4]
 800f9d0:	4413      	add	r3, r2
 800f9d2:	781b      	ldrb	r3, [r3, #0]
 800f9d4:	2bff      	cmp	r3, #255	; 0xff
 800f9d6:	d16a      	bne.n	800faae <pass_route3+0x546>
			if(MF2.FLAG.V == 1){
 800f9d8:	4b1c      	ldr	r3, [pc, #112]	; (800fa4c <pass_route3+0x4e4>)
 800f9da:	881b      	ldrh	r3, [r3, #0]
 800f9dc:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800f9e0:	b2db      	uxtb	r3, r3
 800f9e2:	2b01      	cmp	r3, #1
 800f9e4:	d15b      	bne.n	800fa9e <pass_route3+0x536>
				if(pass[p-1] == -1 && pass[p-2] == -1){
 800f9e6:	78bb      	ldrb	r3, [r7, #2]
 800f9e8:	3b01      	subs	r3, #1
 800f9ea:	4a1a      	ldr	r2, [pc, #104]	; (800fa54 <pass_route3+0x4ec>)
 800f9ec:	56d3      	ldrsb	r3, [r2, r3]
 800f9ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f9f2:	d111      	bne.n	800fa18 <pass_route3+0x4b0>
 800f9f4:	78bb      	ldrb	r3, [r7, #2]
 800f9f6:	3b02      	subs	r3, #2
 800f9f8:	4a16      	ldr	r2, [pc, #88]	; (800fa54 <pass_route3+0x4ec>)
 800f9fa:	56d3      	ldrsb	r3, [r2, r3]
 800f9fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fa00:	d10a      	bne.n	800fa18 <pass_route3+0x4b0>
					pass[p-2] = -15;
 800fa02:	78bb      	ldrb	r3, [r7, #2]
 800fa04:	3b02      	subs	r3, #2
 800fa06:	4a13      	ldr	r2, [pc, #76]	; (800fa54 <pass_route3+0x4ec>)
 800fa08:	21f1      	movs	r1, #241	; 0xf1
 800fa0a:	54d1      	strb	r1, [r2, r3]
					pass[p-1] = -114;
 800fa0c:	78bb      	ldrb	r3, [r7, #2]
 800fa0e:	3b01      	subs	r3, #1
 800fa10:	4a10      	ldr	r2, [pc, #64]	; (800fa54 <pass_route3+0x4ec>)
 800fa12:	218e      	movs	r1, #142	; 0x8e
 800fa14:	54d1      	strb	r1, [r2, r3]
 800fa16:	e042      	b.n	800fa9e <pass_route3+0x536>
				}else if(pass[p-1] == -2 && pass[p-2] == -2){
 800fa18:	78bb      	ldrb	r3, [r7, #2]
 800fa1a:	3b01      	subs	r3, #1
 800fa1c:	4a0d      	ldr	r2, [pc, #52]	; (800fa54 <pass_route3+0x4ec>)
 800fa1e:	56d3      	ldrsb	r3, [r2, r3]
 800fa20:	f113 0f02 	cmn.w	r3, #2
 800fa24:	d11a      	bne.n	800fa5c <pass_route3+0x4f4>
 800fa26:	78bb      	ldrb	r3, [r7, #2]
 800fa28:	3b02      	subs	r3, #2
 800fa2a:	4a0a      	ldr	r2, [pc, #40]	; (800fa54 <pass_route3+0x4ec>)
 800fa2c:	56d3      	ldrsb	r3, [r2, r3]
 800fa2e:	f113 0f02 	cmn.w	r3, #2
 800fa32:	d113      	bne.n	800fa5c <pass_route3+0x4f4>
					pass[p-2] = -16;
 800fa34:	78bb      	ldrb	r3, [r7, #2]
 800fa36:	3b02      	subs	r3, #2
 800fa38:	4a06      	ldr	r2, [pc, #24]	; (800fa54 <pass_route3+0x4ec>)
 800fa3a:	21f0      	movs	r1, #240	; 0xf0
 800fa3c:	54d1      	strb	r1, [r2, r3]
					pass[p-1] = -114;
 800fa3e:	78bb      	ldrb	r3, [r7, #2]
 800fa40:	3b01      	subs	r3, #1
 800fa42:	4a04      	ldr	r2, [pc, #16]	; (800fa54 <pass_route3+0x4ec>)
 800fa44:	218e      	movs	r1, #142	; 0x8e
 800fa46:	54d1      	strb	r1, [r2, r3]
 800fa48:	e029      	b.n	800fa9e <pass_route3+0x536>
 800fa4a:	bf00      	nop
 800fa4c:	20000f64 	.word	0x20000f64
 800fa50:	20000c54 	.word	0x20000c54
 800fa54:	20000350 	.word	0x20000350
 800fa58:	200015c8 	.word	0x200015c8
				}else if(pass[p-1] == -1){
 800fa5c:	78bb      	ldrb	r3, [r7, #2]
 800fa5e:	3b01      	subs	r3, #1
 800fa60:	4a6a      	ldr	r2, [pc, #424]	; (800fc0c <pass_route3+0x6a4>)
 800fa62:	56d3      	ldrsb	r3, [r2, r3]
 800fa64:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fa68:	d109      	bne.n	800fa7e <pass_route3+0x516>
					pass[p-1] = -13;
 800fa6a:	78bb      	ldrb	r3, [r7, #2]
 800fa6c:	3b01      	subs	r3, #1
 800fa6e:	4a67      	ldr	r2, [pc, #412]	; (800fc0c <pass_route3+0x6a4>)
 800fa70:	21f3      	movs	r1, #243	; 0xf3
 800fa72:	54d1      	strb	r1, [r2, r3]
					pass[p] = -114;
 800fa74:	78bb      	ldrb	r3, [r7, #2]
 800fa76:	4a65      	ldr	r2, [pc, #404]	; (800fc0c <pass_route3+0x6a4>)
 800fa78:	218e      	movs	r1, #142	; 0x8e
 800fa7a:	54d1      	strb	r1, [r2, r3]
 800fa7c:	e00f      	b.n	800fa9e <pass_route3+0x536>
				}else if(pass[p-1] == -2){
 800fa7e:	78bb      	ldrb	r3, [r7, #2]
 800fa80:	3b01      	subs	r3, #1
 800fa82:	4a62      	ldr	r2, [pc, #392]	; (800fc0c <pass_route3+0x6a4>)
 800fa84:	56d3      	ldrsb	r3, [r2, r3]
 800fa86:	f113 0f02 	cmn.w	r3, #2
 800fa8a:	d108      	bne.n	800fa9e <pass_route3+0x536>
					pass[p-1] = -14;
 800fa8c:	78bb      	ldrb	r3, [r7, #2]
 800fa8e:	3b01      	subs	r3, #1
 800fa90:	4a5e      	ldr	r2, [pc, #376]	; (800fc0c <pass_route3+0x6a4>)
 800fa92:	21f2      	movs	r1, #242	; 0xf2
 800fa94:	54d1      	strb	r1, [r2, r3]
					pass[p] = -114;
 800fa96:	78bb      	ldrb	r3, [r7, #2]
 800fa98:	4a5c      	ldr	r2, [pc, #368]	; (800fc0c <pass_route3+0x6a4>)
 800fa9a:	218e      	movs	r1, #142	; 0x8e
 800fa9c:	54d1      	strb	r1, [r2, r3]
				}
			}
			pass[p] = -114;							//a終了用配列
 800fa9e:	78bb      	ldrb	r3, [r7, #2]
 800faa0:	4a5a      	ldr	r2, [pc, #360]	; (800fc0c <pass_route3+0x6a4>)
 800faa2:	218e      	movs	r1, #142	; 0x8e
 800faa4:	54d1      	strb	r1, [r2, r3]
			i++;
 800faa6:	687b      	ldr	r3, [r7, #4]
 800faa8:	3301      	adds	r3, #1
 800faaa:	607b      	str	r3, [r7, #4]
 800faac:	e09d      	b.n	800fbea <pass_route3+0x682>
		}else if(MF2.FLAG.V == 1 && route[i] == 0x44 && route[i+1] == 0x11){
 800faae:	4b58      	ldr	r3, [pc, #352]	; (800fc10 <pass_route3+0x6a8>)
 800fab0:	881b      	ldrh	r3, [r3, #0]
 800fab2:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800fab6:	b2db      	uxtb	r3, r3
 800fab8:	2b01      	cmp	r3, #1
 800faba:	d11a      	bne.n	800faf2 <pass_route3+0x58a>
 800fabc:	4a55      	ldr	r2, [pc, #340]	; (800fc14 <pass_route3+0x6ac>)
 800fabe:	687b      	ldr	r3, [r7, #4]
 800fac0:	4413      	add	r3, r2
 800fac2:	781b      	ldrb	r3, [r3, #0]
 800fac4:	2b44      	cmp	r3, #68	; 0x44
 800fac6:	d114      	bne.n	800faf2 <pass_route3+0x58a>
 800fac8:	687b      	ldr	r3, [r7, #4]
 800faca:	3301      	adds	r3, #1
 800facc:	4a51      	ldr	r2, [pc, #324]	; (800fc14 <pass_route3+0x6ac>)
 800face:	5cd3      	ldrb	r3, [r2, r3]
 800fad0:	2b11      	cmp	r3, #17
 800fad2:	d10e      	bne.n	800faf2 <pass_route3+0x58a>
			s_flag = 0;
 800fad4:	2300      	movs	r3, #0
 800fad6:	70fb      	strb	r3, [r7, #3]
			pass[p] = 64;							//a斜め半直線
 800fad8:	78bb      	ldrb	r3, [r7, #2]
 800fada:	4a4c      	ldr	r2, [pc, #304]	; (800fc0c <pass_route3+0x6a4>)
 800fadc:	2140      	movs	r1, #64	; 0x40
 800fade:	54d1      	strb	r1, [r2, r3]
			MF2.FLAG.V = 1;
 800fae0:	4a4b      	ldr	r2, [pc, #300]	; (800fc10 <pass_route3+0x6a8>)
 800fae2:	8813      	ldrh	r3, [r2, #0]
 800fae4:	f043 0308 	orr.w	r3, r3, #8
 800fae8:	8013      	strh	r3, [r2, #0]
			i++;
 800faea:	687b      	ldr	r3, [r7, #4]
 800faec:	3301      	adds	r3, #1
 800faee:	607b      	str	r3, [r7, #4]
 800faf0:	e07b      	b.n	800fbea <pass_route3+0x682>
		}else if(MF2.FLAG.V == 1 && route[i] == 0x11 && route[i+1] == 0x44){
 800faf2:	4b47      	ldr	r3, [pc, #284]	; (800fc10 <pass_route3+0x6a8>)
 800faf4:	881b      	ldrh	r3, [r3, #0]
 800faf6:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800fafa:	b2db      	uxtb	r3, r3
 800fafc:	2b01      	cmp	r3, #1
 800fafe:	d11a      	bne.n	800fb36 <pass_route3+0x5ce>
 800fb00:	4a44      	ldr	r2, [pc, #272]	; (800fc14 <pass_route3+0x6ac>)
 800fb02:	687b      	ldr	r3, [r7, #4]
 800fb04:	4413      	add	r3, r2
 800fb06:	781b      	ldrb	r3, [r3, #0]
 800fb08:	2b11      	cmp	r3, #17
 800fb0a:	d114      	bne.n	800fb36 <pass_route3+0x5ce>
 800fb0c:	687b      	ldr	r3, [r7, #4]
 800fb0e:	3301      	adds	r3, #1
 800fb10:	4a40      	ldr	r2, [pc, #256]	; (800fc14 <pass_route3+0x6ac>)
 800fb12:	5cd3      	ldrb	r3, [r2, r3]
 800fb14:	2b44      	cmp	r3, #68	; 0x44
 800fb16:	d10e      	bne.n	800fb36 <pass_route3+0x5ce>
			s_flag = 0;
 800fb18:	2300      	movs	r3, #0
 800fb1a:	70fb      	strb	r3, [r7, #3]
			pass[p] = 64;							//a斜め半直線
 800fb1c:	78bb      	ldrb	r3, [r7, #2]
 800fb1e:	4a3b      	ldr	r2, [pc, #236]	; (800fc0c <pass_route3+0x6a4>)
 800fb20:	2140      	movs	r1, #64	; 0x40
 800fb22:	54d1      	strb	r1, [r2, r3]
			MF2.FLAG.V = 1;
 800fb24:	4a3a      	ldr	r2, [pc, #232]	; (800fc10 <pass_route3+0x6a8>)
 800fb26:	8813      	ldrh	r3, [r2, #0]
 800fb28:	f043 0308 	orr.w	r3, r3, #8
 800fb2c:	8013      	strh	r3, [r2, #0]
			i++;
 800fb2e:	687b      	ldr	r3, [r7, #4]
 800fb30:	3301      	adds	r3, #1
 800fb32:	607b      	str	r3, [r7, #4]
 800fb34:	e059      	b.n	800fbea <pass_route3+0x682>
		}else if(route[i] == 0x44){
 800fb36:	4a37      	ldr	r2, [pc, #220]	; (800fc14 <pass_route3+0x6ac>)
 800fb38:	687b      	ldr	r3, [r7, #4]
 800fb3a:	4413      	add	r3, r2
 800fb3c:	781b      	ldrb	r3, [r3, #0]
 800fb3e:	2b44      	cmp	r3, #68	; 0x44
 800fb40:	d107      	bne.n	800fb52 <pass_route3+0x5ea>
			pass[p] = -1;							//a右スラローム
 800fb42:	78bb      	ldrb	r3, [r7, #2]
 800fb44:	4a31      	ldr	r2, [pc, #196]	; (800fc0c <pass_route3+0x6a4>)
 800fb46:	21ff      	movs	r1, #255	; 0xff
 800fb48:	54d1      	strb	r1, [r2, r3]
			i++;
 800fb4a:	687b      	ldr	r3, [r7, #4]
 800fb4c:	3301      	adds	r3, #1
 800fb4e:	607b      	str	r3, [r7, #4]
 800fb50:	e04b      	b.n	800fbea <pass_route3+0x682>
		}else if(route[i] == 0x11){
 800fb52:	4a30      	ldr	r2, [pc, #192]	; (800fc14 <pass_route3+0x6ac>)
 800fb54:	687b      	ldr	r3, [r7, #4]
 800fb56:	4413      	add	r3, r2
 800fb58:	781b      	ldrb	r3, [r3, #0]
 800fb5a:	2b11      	cmp	r3, #17
 800fb5c:	d107      	bne.n	800fb6e <pass_route3+0x606>
			pass[p] = -2;							//a左スラローム
 800fb5e:	78bb      	ldrb	r3, [r7, #2]
 800fb60:	4a2a      	ldr	r2, [pc, #168]	; (800fc0c <pass_route3+0x6a4>)
 800fb62:	21fe      	movs	r1, #254	; 0xfe
 800fb64:	54d1      	strb	r1, [r2, r3]
			i++;
 800fb66:	687b      	ldr	r3, [r7, #4]
 800fb68:	3301      	adds	r3, #1
 800fb6a:	607b      	str	r3, [r7, #4]
 800fb6c:	e03d      	b.n	800fbea <pass_route3+0x682>
		}else if(route[i] == 0x77){
 800fb6e:	4a29      	ldr	r2, [pc, #164]	; (800fc14 <pass_route3+0x6ac>)
 800fb70:	687b      	ldr	r3, [r7, #4]
 800fb72:	4413      	add	r3, r2
 800fb74:	781b      	ldrb	r3, [r3, #0]
 800fb76:	2b77      	cmp	r3, #119	; 0x77
 800fb78:	d137      	bne.n	800fbea <pass_route3+0x682>
			if(s_flag){
 800fb7a:	78fb      	ldrb	r3, [r7, #3]
 800fb7c:	2b00      	cmp	r3, #0
 800fb7e:	d012      	beq.n	800fba6 <pass_route3+0x63e>
				pass[p-1]++;						//aスラローム前半直線追加
 800fb80:	78bb      	ldrb	r3, [r7, #2]
 800fb82:	3b01      	subs	r3, #1
 800fb84:	4a21      	ldr	r2, [pc, #132]	; (800fc0c <pass_route3+0x6a4>)
 800fb86:	56d2      	ldrsb	r2, [r2, r3]
 800fb88:	b2d2      	uxtb	r2, r2
 800fb8a:	3201      	adds	r2, #1
 800fb8c:	b2d2      	uxtb	r2, r2
 800fb8e:	b251      	sxtb	r1, r2
 800fb90:	4a1e      	ldr	r2, [pc, #120]	; (800fc0c <pass_route3+0x6a4>)
 800fb92:	54d1      	strb	r1, [r2, r3]
				p--;
 800fb94:	78bb      	ldrb	r3, [r7, #2]
 800fb96:	3b01      	subs	r3, #1
 800fb98:	70bb      	strb	r3, [r7, #2]
				s_flag = 0;
 800fb9a:	2300      	movs	r3, #0
 800fb9c:	70fb      	strb	r3, [r7, #3]
				i++;
 800fb9e:	687b      	ldr	r3, [r7, #4]
 800fba0:	3301      	adds	r3, #1
 800fba2:	607b      	str	r3, [r7, #4]
 800fba4:	e021      	b.n	800fbea <pass_route3+0x682>
			}else{
				s++;
 800fba6:	787b      	ldrb	r3, [r7, #1]
 800fba8:	3301      	adds	r3, #1
 800fbaa:	707b      	strb	r3, [r7, #1]
				pass[p] = s;						//aもし半直線1つだけの場合whileには入らない
 800fbac:	78bb      	ldrb	r3, [r7, #2]
 800fbae:	f997 1001 	ldrsb.w	r1, [r7, #1]
 800fbb2:	4a16      	ldr	r2, [pc, #88]	; (800fc0c <pass_route3+0x6a4>)
 800fbb4:	54d1      	strb	r1, [r2, r3]
				while(route[i+1] == 0x77){
 800fbb6:	e00c      	b.n	800fbd2 <pass_route3+0x66a>
					s_flag = 1;
 800fbb8:	2301      	movs	r3, #1
 800fbba:	70fb      	strb	r3, [r7, #3]
					pass[p] = s;					//a半直線2つ以上続く場合、最後半直線は大回り用に残す
 800fbbc:	78bb      	ldrb	r3, [r7, #2]
 800fbbe:	f997 1001 	ldrsb.w	r1, [r7, #1]
 800fbc2:	4a12      	ldr	r2, [pc, #72]	; (800fc0c <pass_route3+0x6a4>)
 800fbc4:	54d1      	strb	r1, [r2, r3]
					i++;
 800fbc6:	687b      	ldr	r3, [r7, #4]
 800fbc8:	3301      	adds	r3, #1
 800fbca:	607b      	str	r3, [r7, #4]
					s++;
 800fbcc:	787b      	ldrb	r3, [r7, #1]
 800fbce:	3301      	adds	r3, #1
 800fbd0:	707b      	strb	r3, [r7, #1]
				while(route[i+1] == 0x77){
 800fbd2:	687b      	ldr	r3, [r7, #4]
 800fbd4:	3301      	adds	r3, #1
 800fbd6:	4a0f      	ldr	r2, [pc, #60]	; (800fc14 <pass_route3+0x6ac>)
 800fbd8:	5cd3      	ldrb	r3, [r2, r3]
 800fbda:	2b77      	cmp	r3, #119	; 0x77
 800fbdc:	d0ec      	beq.n	800fbb8 <pass_route3+0x650>
				}
				if(!s_flag){
 800fbde:	78fb      	ldrb	r3, [r7, #3]
 800fbe0:	2b00      	cmp	r3, #0
 800fbe2:	d102      	bne.n	800fbea <pass_route3+0x682>
					i++;
 800fbe4:	687b      	ldr	r3, [r7, #4]
 800fbe6:	3301      	adds	r3, #1
 800fbe8:	607b      	str	r3, [r7, #4]
				}
			}
		}
		p++;
 800fbea:	78bb      	ldrb	r3, [r7, #2]
 800fbec:	3301      	adds	r3, #1
 800fbee:	70bb      	strb	r3, [r7, #2]
	while(route[i-1] != 0xff){
 800fbf0:	687b      	ldr	r3, [r7, #4]
 800fbf2:	3b01      	subs	r3, #1
 800fbf4:	4a07      	ldr	r2, [pc, #28]	; (800fc14 <pass_route3+0x6ac>)
 800fbf6:	5cd3      	ldrb	r3, [r2, r3]
 800fbf8:	2bff      	cmp	r3, #255	; 0xff
 800fbfa:	f47f acd4 	bne.w	800f5a6 <pass_route3+0x3e>
	}
}
 800fbfe:	bf00      	nop
 800fc00:	370c      	adds	r7, #12
 800fc02:	46bd      	mov	sp, r7
 800fc04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc08:	4770      	bx	lr
 800fc0a:	bf00      	nop
 800fc0c:	20000350 	.word	0x20000350
 800fc10:	20000f64 	.word	0x20000f64
 800fc14:	20000c54 	.word	0x20000c54

0800fc18 <store_map_in_eeprom>:
//store_map_in_eeprom
// mapデータをeepromに格納する
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void store_map_in_eeprom(void){
 800fc18:	b580      	push	{r7, lr}
 800fc1a:	b082      	sub	sp, #8
 800fc1c:	af00      	add	r7, sp, #0
	printf("eprom func start \n");
 800fc1e:	4818      	ldr	r0, [pc, #96]	; (800fc80 <store_map_in_eeprom+0x68>)
 800fc20:	f000 ff28 	bl	8010a74 <puts>
	eeprom_enable_write();
 800fc24:	f7fa ff06 	bl	800aa34 <eeprom_enable_write>
	printf("eprom enable_write fin \n");
 800fc28:	4816      	ldr	r0, [pc, #88]	; (800fc84 <store_map_in_eeprom+0x6c>)
 800fc2a:	f000 ff23 	bl	8010a74 <puts>
	int i;
	for(i = 0; i < 16; i++){
 800fc2e:	2300      	movs	r3, #0
 800fc30:	607b      	str	r3, [r7, #4]
 800fc32:	e01b      	b.n	800fc6c <store_map_in_eeprom+0x54>
		int j;
		for(j = 0; j < 16; j++){
 800fc34:	2300      	movs	r3, #0
 800fc36:	603b      	str	r3, [r7, #0]
 800fc38:	e012      	b.n	800fc60 <store_map_in_eeprom+0x48>
			eeprom_write_halfword(i*16 + j, (uint16_t) map[i][j]);
 800fc3a:	687b      	ldr	r3, [r7, #4]
 800fc3c:	011a      	lsls	r2, r3, #4
 800fc3e:	683b      	ldr	r3, [r7, #0]
 800fc40:	4413      	add	r3, r2
 800fc42:	4618      	mov	r0, r3
 800fc44:	4a10      	ldr	r2, [pc, #64]	; (800fc88 <store_map_in_eeprom+0x70>)
 800fc46:	687b      	ldr	r3, [r7, #4]
 800fc48:	011b      	lsls	r3, r3, #4
 800fc4a:	441a      	add	r2, r3
 800fc4c:	683b      	ldr	r3, [r7, #0]
 800fc4e:	4413      	add	r3, r2
 800fc50:	781b      	ldrb	r3, [r3, #0]
 800fc52:	b29b      	uxth	r3, r3
 800fc54:	4619      	mov	r1, r3
 800fc56:	f7fa ff18 	bl	800aa8a <eeprom_write_halfword>
		for(j = 0; j < 16; j++){
 800fc5a:	683b      	ldr	r3, [r7, #0]
 800fc5c:	3301      	adds	r3, #1
 800fc5e:	603b      	str	r3, [r7, #0]
 800fc60:	683b      	ldr	r3, [r7, #0]
 800fc62:	2b0f      	cmp	r3, #15
 800fc64:	dde9      	ble.n	800fc3a <store_map_in_eeprom+0x22>
	for(i = 0; i < 16; i++){
 800fc66:	687b      	ldr	r3, [r7, #4]
 800fc68:	3301      	adds	r3, #1
 800fc6a:	607b      	str	r3, [r7, #4]
 800fc6c:	687b      	ldr	r3, [r7, #4]
 800fc6e:	2b0f      	cmp	r3, #15
 800fc70:	dde0      	ble.n	800fc34 <store_map_in_eeprom+0x1c>
		}
	}
	eeprom_disable_write();
 800fc72:	f7fa ff03 	bl	800aa7c <eeprom_disable_write>
}
 800fc76:	bf00      	nop
 800fc78:	3708      	adds	r7, #8
 800fc7a:	46bd      	mov	sp, r7
 800fc7c:	bd80      	pop	{r7, pc}
 800fc7e:	bf00      	nop
 800fc80:	08011fbc 	.word	0x08011fbc
 800fc84:	08011fd0 	.word	0x08011fd0
 800fc88:	200001ac 	.word	0x200001ac

0800fc8c <load_map_from_eeprom>:
//load_map_in_eeprom
// mapデータをeepromから取得する
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void load_map_from_eeprom(void){
 800fc8c:	b580      	push	{r7, lr}
 800fc8e:	b082      	sub	sp, #8
 800fc90:	af00      	add	r7, sp, #0
	int i;
	for(i = 0; i < 16; i++){
 800fc92:	2300      	movs	r3, #0
 800fc94:	607b      	str	r3, [r7, #4]
 800fc96:	e01c      	b.n	800fcd2 <load_map_from_eeprom+0x46>
		int j;
		for(j = 0; j < 16; j++){
 800fc98:	2300      	movs	r3, #0
 800fc9a:	603b      	str	r3, [r7, #0]
 800fc9c:	e013      	b.n	800fcc6 <load_map_from_eeprom+0x3a>
			map[i][j] = (uint8_t) eeprom_read_halfword(i*16 + j);
 800fc9e:	687b      	ldr	r3, [r7, #4]
 800fca0:	011a      	lsls	r2, r3, #4
 800fca2:	683b      	ldr	r3, [r7, #0]
 800fca4:	4413      	add	r3, r2
 800fca6:	4618      	mov	r0, r3
 800fca8:	f7fa ff0c 	bl	800aac4 <eeprom_read_halfword>
 800fcac:	4603      	mov	r3, r0
 800fcae:	b2d9      	uxtb	r1, r3
 800fcb0:	4a0b      	ldr	r2, [pc, #44]	; (800fce0 <load_map_from_eeprom+0x54>)
 800fcb2:	687b      	ldr	r3, [r7, #4]
 800fcb4:	011b      	lsls	r3, r3, #4
 800fcb6:	441a      	add	r2, r3
 800fcb8:	683b      	ldr	r3, [r7, #0]
 800fcba:	4413      	add	r3, r2
 800fcbc:	460a      	mov	r2, r1
 800fcbe:	701a      	strb	r2, [r3, #0]
		for(j = 0; j < 16; j++){
 800fcc0:	683b      	ldr	r3, [r7, #0]
 800fcc2:	3301      	adds	r3, #1
 800fcc4:	603b      	str	r3, [r7, #0]
 800fcc6:	683b      	ldr	r3, [r7, #0]
 800fcc8:	2b0f      	cmp	r3, #15
 800fcca:	dde8      	ble.n	800fc9e <load_map_from_eeprom+0x12>
	for(i = 0; i < 16; i++){
 800fccc:	687b      	ldr	r3, [r7, #4]
 800fcce:	3301      	adds	r3, #1
 800fcd0:	607b      	str	r3, [r7, #4]
 800fcd2:	687b      	ldr	r3, [r7, #4]
 800fcd4:	2b0f      	cmp	r3, #15
 800fcd6:	dddf      	ble.n	800fc98 <load_map_from_eeprom+0xc>
		}
	}
}
 800fcd8:	bf00      	nop
 800fcda:	3708      	adds	r7, #8
 800fcdc:	46bd      	mov	sp, r7
 800fcde:	bd80      	pop	{r7, pc}
 800fce0:	200001ac 	.word	0x200001ac

0800fce4 <sensor_init>:

#include "global.h"


void sensor_init(void){
 800fce4:	b480      	push	{r7}
 800fce6:	af00      	add	r7, sp, #0
	tp = 0;
 800fce8:	4b0e      	ldr	r3, [pc, #56]	; (800fd24 <sensor_init+0x40>)
 800fcea:	2200      	movs	r2, #0
 800fcec:	701a      	strb	r2, [r3, #0]
	ad_l = ad_r = ad_fr = ad_fl = 0;
 800fcee:	4b0e      	ldr	r3, [pc, #56]	; (800fd28 <sensor_init+0x44>)
 800fcf0:	2200      	movs	r2, #0
 800fcf2:	601a      	str	r2, [r3, #0]
 800fcf4:	4b0c      	ldr	r3, [pc, #48]	; (800fd28 <sensor_init+0x44>)
 800fcf6:	681b      	ldr	r3, [r3, #0]
 800fcf8:	4a0c      	ldr	r2, [pc, #48]	; (800fd2c <sensor_init+0x48>)
 800fcfa:	6013      	str	r3, [r2, #0]
 800fcfc:	4b0b      	ldr	r3, [pc, #44]	; (800fd2c <sensor_init+0x48>)
 800fcfe:	681b      	ldr	r3, [r3, #0]
 800fd00:	4a0b      	ldr	r2, [pc, #44]	; (800fd30 <sensor_init+0x4c>)
 800fd02:	6013      	str	r3, [r2, #0]
 800fd04:	4b0a      	ldr	r3, [pc, #40]	; (800fd30 <sensor_init+0x4c>)
 800fd06:	681b      	ldr	r3, [r3, #0]
 800fd08:	4a0a      	ldr	r2, [pc, #40]	; (800fd34 <sensor_init+0x50>)
 800fd0a:	6013      	str	r3, [r2, #0]
	base_l = base_r = 0;
 800fd0c:	4b0a      	ldr	r3, [pc, #40]	; (800fd38 <sensor_init+0x54>)
 800fd0e:	2200      	movs	r2, #0
 800fd10:	801a      	strh	r2, [r3, #0]
 800fd12:	4b09      	ldr	r3, [pc, #36]	; (800fd38 <sensor_init+0x54>)
 800fd14:	881a      	ldrh	r2, [r3, #0]
 800fd16:	4b09      	ldr	r3, [pc, #36]	; (800fd3c <sensor_init+0x58>)
 800fd18:	801a      	strh	r2, [r3, #0]
}
 800fd1a:	bf00      	nop
 800fd1c:	46bd      	mov	sp, r7
 800fd1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd22:	4770      	bx	lr
 800fd24:	200012a0 	.word	0x200012a0
 800fd28:	20000d54 	.word	0x20000d54
 800fd2c:	20000c00 	.word	0x20000c00
 800fd30:	20000f60 	.word	0x20000f60
 800fd34:	20000afc 	.word	0x20000afc
 800fd38:	200002c0 	.word	0x200002c0
 800fd3c:	2000034c 	.word	0x2000034c

0800fd40 <get_base>:


uint8_t get_base(){
 800fd40:	b480      	push	{r7}
 800fd42:	b083      	sub	sp, #12
 800fd44:	af00      	add	r7, sp, #0
	uint8_t res = 1;									//for return
 800fd46:	2301      	movs	r3, #1
 800fd48:	71fb      	strb	r3, [r7, #7]

	base_l = ad_l;										//sensor value base L
 800fd4a:	4b08      	ldr	r3, [pc, #32]	; (800fd6c <get_base+0x2c>)
 800fd4c:	681b      	ldr	r3, [r3, #0]
 800fd4e:	b29a      	uxth	r2, r3
 800fd50:	4b07      	ldr	r3, [pc, #28]	; (800fd70 <get_base+0x30>)
 800fd52:	801a      	strh	r2, [r3, #0]
	base_r = ad_r;										//sensor value base R
 800fd54:	4b07      	ldr	r3, [pc, #28]	; (800fd74 <get_base+0x34>)
 800fd56:	681b      	ldr	r3, [r3, #0]
 800fd58:	b29a      	uxth	r2, r3
 800fd5a:	4b07      	ldr	r3, [pc, #28]	; (800fd78 <get_base+0x38>)
 800fd5c:	801a      	strh	r2, [r3, #0]

	return res;											//
 800fd5e:	79fb      	ldrb	r3, [r7, #7]
}
 800fd60:	4618      	mov	r0, r3
 800fd62:	370c      	adds	r7, #12
 800fd64:	46bd      	mov	sp, r7
 800fd66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd6a:	4770      	bx	lr
 800fd6c:	20000afc 	.word	0x20000afc
 800fd70:	2000034c 	.word	0x2000034c
 800fd74:	20000f60 	.word	0x20000f60
 800fd78:	200002c0 	.word	0x200002c0

0800fd7c <get_wall_info>:


void get_wall_info(){
 800fd7c:	b480      	push	{r7}
 800fd7e:	af00      	add	r7, sp, #0

	//----reset----
	wall_info = 0x00;									//wall
 800fd80:	4b16      	ldr	r3, [pc, #88]	; (800fddc <get_wall_info+0x60>)
 800fd82:	2200      	movs	r2, #0
 800fd84:	701a      	strb	r2, [r3, #0]
	//----look forward----
	if(ad_fr > WALL_BASE_FR || ad_fl > WALL_BASE_FL){
 800fd86:	4b16      	ldr	r3, [pc, #88]	; (800fde0 <get_wall_info+0x64>)
 800fd88:	681b      	ldr	r3, [r3, #0]
 800fd8a:	2b6e      	cmp	r3, #110	; 0x6e
 800fd8c:	d803      	bhi.n	800fd96 <get_wall_info+0x1a>
 800fd8e:	4b15      	ldr	r3, [pc, #84]	; (800fde4 <get_wall_info+0x68>)
 800fd90:	681b      	ldr	r3, [r3, #0]
 800fd92:	2bc8      	cmp	r3, #200	; 0xc8
 800fd94:	d906      	bls.n	800fda4 <get_wall_info+0x28>
		wall_info |= 0x88;								//forward check
 800fd96:	4b11      	ldr	r3, [pc, #68]	; (800fddc <get_wall_info+0x60>)
 800fd98:	781b      	ldrb	r3, [r3, #0]
 800fd9a:	f063 0377 	orn	r3, r3, #119	; 0x77
 800fd9e:	b2da      	uxtb	r2, r3
 800fda0:	4b0e      	ldr	r3, [pc, #56]	; (800fddc <get_wall_info+0x60>)
 800fda2:	701a      	strb	r2, [r3, #0]
	}
	//----look right----
	if(ad_r > WALL_BASE_R){
 800fda4:	4b10      	ldr	r3, [pc, #64]	; (800fde8 <get_wall_info+0x6c>)
 800fda6:	681b      	ldr	r3, [r3, #0]
 800fda8:	2b78      	cmp	r3, #120	; 0x78
 800fdaa:	d906      	bls.n	800fdba <get_wall_info+0x3e>
		wall_info |= 0x44;								//right check
 800fdac:	4b0b      	ldr	r3, [pc, #44]	; (800fddc <get_wall_info+0x60>)
 800fdae:	781b      	ldrb	r3, [r3, #0]
 800fdb0:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 800fdb4:	b2da      	uxtb	r2, r3
 800fdb6:	4b09      	ldr	r3, [pc, #36]	; (800fddc <get_wall_info+0x60>)
 800fdb8:	701a      	strb	r2, [r3, #0]
	}
	//----look left----
	if(ad_l > WALL_BASE_L){
 800fdba:	4b0c      	ldr	r3, [pc, #48]	; (800fdec <get_wall_info+0x70>)
 800fdbc:	681b      	ldr	r3, [r3, #0]
 800fdbe:	2b96      	cmp	r3, #150	; 0x96
 800fdc0:	d906      	bls.n	800fdd0 <get_wall_info+0x54>
		wall_info |= 0x11;								//light check
 800fdc2:	4b06      	ldr	r3, [pc, #24]	; (800fddc <get_wall_info+0x60>)
 800fdc4:	781b      	ldrb	r3, [r3, #0]
 800fdc6:	f043 0311 	orr.w	r3, r3, #17
 800fdca:	b2da      	uxtb	r2, r3
 800fdcc:	4b03      	ldr	r3, [pc, #12]	; (800fddc <get_wall_info+0x60>)
 800fdce:	701a      	strb	r2, [r3, #0]
	}
}
 800fdd0:	bf00      	nop
 800fdd2:	46bd      	mov	sp, r7
 800fdd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdd8:	4770      	bx	lr
 800fdda:	bf00      	nop
 800fddc:	200002c8 	.word	0x200002c8
 800fde0:	20000c00 	.word	0x20000c00
 800fde4:	20000d54 	.word	0x20000d54
 800fde8:	20000f60 	.word	0x20000f60
 800fdec:	20000afc 	.word	0x20000afc

0800fdf0 <led_write>:
//led_write
//aモード選択用LEDのON-OFF
//a引数：led1(0=>OFF, 1=>ON), led2(0=>OFF, 1=>ON), led3(0=>OFF, 1=>ON)
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void led_write(uint8_t led1, uint8_t led2, uint8_t led3){
 800fdf0:	b580      	push	{r7, lr}
 800fdf2:	b082      	sub	sp, #8
 800fdf4:	af00      	add	r7, sp, #0
 800fdf6:	4603      	mov	r3, r0
 800fdf8:	71fb      	strb	r3, [r7, #7]
 800fdfa:	460b      	mov	r3, r1
 800fdfc:	71bb      	strb	r3, [r7, #6]
 800fdfe:	4613      	mov	r3, r2
 800fe00:	717b      	strb	r3, [r7, #5]
	if(led1) HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 800fe02:	79fb      	ldrb	r3, [r7, #7]
 800fe04:	2b00      	cmp	r3, #0
 800fe06:	d005      	beq.n	800fe14 <led_write+0x24>
 800fe08:	2201      	movs	r2, #1
 800fe0a:	2110      	movs	r1, #16
 800fe0c:	4814      	ldr	r0, [pc, #80]	; (800fe60 <led_write+0x70>)
 800fe0e:	f7f2 fa79 	bl	8002304 <HAL_GPIO_WritePin>
 800fe12:	e004      	b.n	800fe1e <led_write+0x2e>
	else HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 800fe14:	2200      	movs	r2, #0
 800fe16:	2110      	movs	r1, #16
 800fe18:	4811      	ldr	r0, [pc, #68]	; (800fe60 <led_write+0x70>)
 800fe1a:	f7f2 fa73 	bl	8002304 <HAL_GPIO_WritePin>

	if(led2) HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 800fe1e:	79bb      	ldrb	r3, [r7, #6]
 800fe20:	2b00      	cmp	r3, #0
 800fe22:	d005      	beq.n	800fe30 <led_write+0x40>
 800fe24:	2201      	movs	r2, #1
 800fe26:	2140      	movs	r1, #64	; 0x40
 800fe28:	480d      	ldr	r0, [pc, #52]	; (800fe60 <led_write+0x70>)
 800fe2a:	f7f2 fa6b 	bl	8002304 <HAL_GPIO_WritePin>
 800fe2e:	e004      	b.n	800fe3a <led_write+0x4a>
	else HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 800fe30:	2200      	movs	r2, #0
 800fe32:	2140      	movs	r1, #64	; 0x40
 800fe34:	480a      	ldr	r0, [pc, #40]	; (800fe60 <led_write+0x70>)
 800fe36:	f7f2 fa65 	bl	8002304 <HAL_GPIO_WritePin>

	if(led3) HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);
 800fe3a:	797b      	ldrb	r3, [r7, #5]
 800fe3c:	2b00      	cmp	r3, #0
 800fe3e:	d005      	beq.n	800fe4c <led_write+0x5c>
 800fe40:	2201      	movs	r2, #1
 800fe42:	2180      	movs	r1, #128	; 0x80
 800fe44:	4806      	ldr	r0, [pc, #24]	; (800fe60 <led_write+0x70>)
 800fe46:	f7f2 fa5d 	bl	8002304 <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
}
 800fe4a:	e004      	b.n	800fe56 <led_write+0x66>
	else HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 800fe4c:	2200      	movs	r2, #0
 800fe4e:	2180      	movs	r1, #128	; 0x80
 800fe50:	4803      	ldr	r0, [pc, #12]	; (800fe60 <led_write+0x70>)
 800fe52:	f7f2 fa57 	bl	8002304 <HAL_GPIO_WritePin>
}
 800fe56:	bf00      	nop
 800fe58:	3708      	adds	r7, #8
 800fe5a:	46bd      	mov	sp, r7
 800fe5c:	bd80      	pop	{r7, pc}
 800fe5e:	bf00      	nop
 800fe60:	40020000 	.word	0x40020000

0800fe64 <full_led_write>:
//full_led_write
//aフルカラーLEDの色選択
//a引数：fulled(0=>OFF, 1=>a赤, 2=>緑, 3=>青, 4=>青緑, 5=>紫, 6=>黄, 7=>白)
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void full_led_write(uint8_t fulled){
 800fe64:	b580      	push	{r7, lr}
 800fe66:	b082      	sub	sp, #8
 800fe68:	af00      	add	r7, sp, #0
 800fe6a:	4603      	mov	r3, r0
 800fe6c:	71fb      	strb	r3, [r7, #7]
	if(fulled == 0){
 800fe6e:	79fb      	ldrb	r3, [r7, #7]
 800fe70:	2b00      	cmp	r3, #0
 800fe72:	d112      	bne.n	800fe9a <full_led_write+0x36>
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
 800fe74:	2201      	movs	r2, #1
 800fe76:	f44f 7180 	mov.w	r1, #256	; 0x100
 800fe7a:	4856      	ldr	r0, [pc, #344]	; (800ffd4 <full_led_write+0x170>)
 800fe7c:	f7f2 fa42 	bl	8002304 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 800fe80:	2201      	movs	r2, #1
 800fe82:	f44f 7100 	mov.w	r1, #512	; 0x200
 800fe86:	4853      	ldr	r0, [pc, #332]	; (800ffd4 <full_led_write+0x170>)
 800fe88:	f7f2 fa3c 	bl	8002304 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 800fe8c:	2201      	movs	r2, #1
 800fe8e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800fe92:	4851      	ldr	r0, [pc, #324]	; (800ffd8 <full_led_write+0x174>)
 800fe94:	f7f2 fa36 	bl	8002304 <HAL_GPIO_WritePin>
	else if(fulled == 7){
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
	    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
	}
}
 800fe98:	e098      	b.n	800ffcc <full_led_write+0x168>
	else if(fulled == 1){
 800fe9a:	79fb      	ldrb	r3, [r7, #7]
 800fe9c:	2b01      	cmp	r3, #1
 800fe9e:	d112      	bne.n	800fec6 <full_led_write+0x62>
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
 800fea0:	2201      	movs	r2, #1
 800fea2:	f44f 7180 	mov.w	r1, #256	; 0x100
 800fea6:	484b      	ldr	r0, [pc, #300]	; (800ffd4 <full_led_write+0x170>)
 800fea8:	f7f2 fa2c 	bl	8002304 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 800feac:	2201      	movs	r2, #1
 800feae:	f44f 7100 	mov.w	r1, #512	; 0x200
 800feb2:	4848      	ldr	r0, [pc, #288]	; (800ffd4 <full_led_write+0x170>)
 800feb4:	f7f2 fa26 	bl	8002304 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800feb8:	2200      	movs	r2, #0
 800feba:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800febe:	4846      	ldr	r0, [pc, #280]	; (800ffd8 <full_led_write+0x174>)
 800fec0:	f7f2 fa20 	bl	8002304 <HAL_GPIO_WritePin>
}
 800fec4:	e082      	b.n	800ffcc <full_led_write+0x168>
	else if(fulled == 2){
 800fec6:	79fb      	ldrb	r3, [r7, #7]
 800fec8:	2b02      	cmp	r3, #2
 800feca:	d112      	bne.n	800fef2 <full_led_write+0x8e>
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
 800fecc:	2201      	movs	r2, #1
 800fece:	f44f 7180 	mov.w	r1, #256	; 0x100
 800fed2:	4840      	ldr	r0, [pc, #256]	; (800ffd4 <full_led_write+0x170>)
 800fed4:	f7f2 fa16 	bl	8002304 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 800fed8:	2200      	movs	r2, #0
 800feda:	f44f 7100 	mov.w	r1, #512	; 0x200
 800fede:	483d      	ldr	r0, [pc, #244]	; (800ffd4 <full_led_write+0x170>)
 800fee0:	f7f2 fa10 	bl	8002304 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 800fee4:	2201      	movs	r2, #1
 800fee6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800feea:	483b      	ldr	r0, [pc, #236]	; (800ffd8 <full_led_write+0x174>)
 800feec:	f7f2 fa0a 	bl	8002304 <HAL_GPIO_WritePin>
}
 800fef0:	e06c      	b.n	800ffcc <full_led_write+0x168>
	else if(fulled == 3){
 800fef2:	79fb      	ldrb	r3, [r7, #7]
 800fef4:	2b03      	cmp	r3, #3
 800fef6:	d112      	bne.n	800ff1e <full_led_write+0xba>
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 800fef8:	2200      	movs	r2, #0
 800fefa:	f44f 7180 	mov.w	r1, #256	; 0x100
 800fefe:	4835      	ldr	r0, [pc, #212]	; (800ffd4 <full_led_write+0x170>)
 800ff00:	f7f2 fa00 	bl	8002304 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 800ff04:	2201      	movs	r2, #1
 800ff06:	f44f 7100 	mov.w	r1, #512	; 0x200
 800ff0a:	4832      	ldr	r0, [pc, #200]	; (800ffd4 <full_led_write+0x170>)
 800ff0c:	f7f2 f9fa 	bl	8002304 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 800ff10:	2201      	movs	r2, #1
 800ff12:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800ff16:	4830      	ldr	r0, [pc, #192]	; (800ffd8 <full_led_write+0x174>)
 800ff18:	f7f2 f9f4 	bl	8002304 <HAL_GPIO_WritePin>
}
 800ff1c:	e056      	b.n	800ffcc <full_led_write+0x168>
	else if(fulled == 4){
 800ff1e:	79fb      	ldrb	r3, [r7, #7]
 800ff20:	2b04      	cmp	r3, #4
 800ff22:	d112      	bne.n	800ff4a <full_led_write+0xe6>
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 800ff24:	2200      	movs	r2, #0
 800ff26:	f44f 7180 	mov.w	r1, #256	; 0x100
 800ff2a:	482a      	ldr	r0, [pc, #168]	; (800ffd4 <full_led_write+0x170>)
 800ff2c:	f7f2 f9ea 	bl	8002304 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 800ff30:	2200      	movs	r2, #0
 800ff32:	f44f 7100 	mov.w	r1, #512	; 0x200
 800ff36:	4827      	ldr	r0, [pc, #156]	; (800ffd4 <full_led_write+0x170>)
 800ff38:	f7f2 f9e4 	bl	8002304 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 800ff3c:	2201      	movs	r2, #1
 800ff3e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800ff42:	4825      	ldr	r0, [pc, #148]	; (800ffd8 <full_led_write+0x174>)
 800ff44:	f7f2 f9de 	bl	8002304 <HAL_GPIO_WritePin>
}
 800ff48:	e040      	b.n	800ffcc <full_led_write+0x168>
	else if(fulled == 5){
 800ff4a:	79fb      	ldrb	r3, [r7, #7]
 800ff4c:	2b05      	cmp	r3, #5
 800ff4e:	d112      	bne.n	800ff76 <full_led_write+0x112>
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 800ff50:	2200      	movs	r2, #0
 800ff52:	f44f 7180 	mov.w	r1, #256	; 0x100
 800ff56:	481f      	ldr	r0, [pc, #124]	; (800ffd4 <full_led_write+0x170>)
 800ff58:	f7f2 f9d4 	bl	8002304 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 800ff5c:	2201      	movs	r2, #1
 800ff5e:	f44f 7100 	mov.w	r1, #512	; 0x200
 800ff62:	481c      	ldr	r0, [pc, #112]	; (800ffd4 <full_led_write+0x170>)
 800ff64:	f7f2 f9ce 	bl	8002304 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800ff68:	2200      	movs	r2, #0
 800ff6a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800ff6e:	481a      	ldr	r0, [pc, #104]	; (800ffd8 <full_led_write+0x174>)
 800ff70:	f7f2 f9c8 	bl	8002304 <HAL_GPIO_WritePin>
}
 800ff74:	e02a      	b.n	800ffcc <full_led_write+0x168>
	else if(fulled == 6){
 800ff76:	79fb      	ldrb	r3, [r7, #7]
 800ff78:	2b06      	cmp	r3, #6
 800ff7a:	d112      	bne.n	800ffa2 <full_led_write+0x13e>
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
 800ff7c:	2201      	movs	r2, #1
 800ff7e:	f44f 7180 	mov.w	r1, #256	; 0x100
 800ff82:	4814      	ldr	r0, [pc, #80]	; (800ffd4 <full_led_write+0x170>)
 800ff84:	f7f2 f9be 	bl	8002304 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 800ff88:	2200      	movs	r2, #0
 800ff8a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800ff8e:	4811      	ldr	r0, [pc, #68]	; (800ffd4 <full_led_write+0x170>)
 800ff90:	f7f2 f9b8 	bl	8002304 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800ff94:	2200      	movs	r2, #0
 800ff96:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800ff9a:	480f      	ldr	r0, [pc, #60]	; (800ffd8 <full_led_write+0x174>)
 800ff9c:	f7f2 f9b2 	bl	8002304 <HAL_GPIO_WritePin>
}
 800ffa0:	e014      	b.n	800ffcc <full_led_write+0x168>
	else if(fulled == 7){
 800ffa2:	79fb      	ldrb	r3, [r7, #7]
 800ffa4:	2b07      	cmp	r3, #7
 800ffa6:	d111      	bne.n	800ffcc <full_led_write+0x168>
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 800ffa8:	2200      	movs	r2, #0
 800ffaa:	f44f 7180 	mov.w	r1, #256	; 0x100
 800ffae:	4809      	ldr	r0, [pc, #36]	; (800ffd4 <full_led_write+0x170>)
 800ffb0:	f7f2 f9a8 	bl	8002304 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 800ffb4:	2200      	movs	r2, #0
 800ffb6:	f44f 7100 	mov.w	r1, #512	; 0x200
 800ffba:	4806      	ldr	r0, [pc, #24]	; (800ffd4 <full_led_write+0x170>)
 800ffbc:	f7f2 f9a2 	bl	8002304 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800ffc0:	2200      	movs	r2, #0
 800ffc2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800ffc6:	4804      	ldr	r0, [pc, #16]	; (800ffd8 <full_led_write+0x174>)
 800ffc8:	f7f2 f99c 	bl	8002304 <HAL_GPIO_WritePin>
}
 800ffcc:	bf00      	nop
 800ffce:	3708      	adds	r7, #8
 800ffd0:	46bd      	mov	sp, r7
 800ffd2:	bd80      	pop	{r7, pc}
 800ffd4:	40020400 	.word	0x40020400
 800ffd8:	40020800 	.word	0x40020800

0800ffdc <sensor_test>:
//sensor_test
//a壁センサーとジャイロセンサーの値確認
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void sensor_test(){
 800ffdc:	b580      	push	{r7, lr}
 800ffde:	b08c      	sub	sp, #48	; 0x30
 800ffe0:	af02      	add	r7, sp, #8

	int mode = 0;
 800ffe2:	2300      	movs	r3, #0
 800ffe4:	627b      	str	r3, [r7, #36]	; 0x24
	printf("Mode : %d\n", mode);
 800ffe6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ffe8:	4881      	ldr	r0, [pc, #516]	; (80101f0 <sensor_test+0x214>)
 800ffea:	f000 fccf 	bl	801098c <iprintf>

	while(1){
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 800ffee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fff0:	b2db      	uxtb	r3, r3
 800fff2:	f003 0301 	and.w	r3, r3, #1
 800fff6:	b2d8      	uxtb	r0, r3
 800fff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fffa:	b2db      	uxtb	r3, r3
 800fffc:	f003 0302 	and.w	r3, r3, #2
 8010000:	b2d9      	uxtb	r1, r3
 8010002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010004:	b2db      	uxtb	r3, r3
 8010006:	f003 0304 	and.w	r3, r3, #4
 801000a:	b2db      	uxtb	r3, r3
 801000c:	461a      	mov	r2, r3
 801000e:	f7ff feef 	bl	800fdf0 <led_write>
		  if(dist_r >= 20){
 8010012:	4b78      	ldr	r3, [pc, #480]	; (80101f4 <sensor_test+0x218>)
 8010014:	edd3 7a00 	vldr	s15, [r3]
 8010018:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 801001c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8010020:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010024:	db0f      	blt.n	8010046 <sensor_test+0x6a>
			  mode++;
 8010026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010028:	3301      	adds	r3, #1
 801002a:	627b      	str	r3, [r7, #36]	; 0x24
			  dist_r = 0;
 801002c:	4b71      	ldr	r3, [pc, #452]	; (80101f4 <sensor_test+0x218>)
 801002e:	f04f 0200 	mov.w	r2, #0
 8010032:	601a      	str	r2, [r3, #0]
			  if(mode > 7){
 8010034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010036:	2b07      	cmp	r3, #7
 8010038:	dd01      	ble.n	801003e <sensor_test+0x62>
				  mode = 0;
 801003a:	2300      	movs	r3, #0
 801003c:	627b      	str	r3, [r7, #36]	; 0x24
			  }
			  printf("Mode : %d\n", mode);
 801003e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8010040:	486b      	ldr	r0, [pc, #428]	; (80101f0 <sensor_test+0x214>)
 8010042:	f000 fca3 	bl	801098c <iprintf>
			  //buzzer(pitagola2[mode-1][0], pitagola2[mode-1][1]);
			  //buzzer(pitagola[2][0], pitagola[2][1]);
		  }
		  if(dist_r <= -20){
 8010046:	4b6b      	ldr	r3, [pc, #428]	; (80101f4 <sensor_test+0x218>)
 8010048:	edd3 7a00 	vldr	s15, [r3]
 801004c:	eebb 7a04 	vmov.f32	s14, #180	; 0xc1a00000 -20.0
 8010050:	eef4 7ac7 	vcmpe.f32	s15, s14
 8010054:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010058:	d80f      	bhi.n	801007a <sensor_test+0x9e>
			  mode--;
 801005a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801005c:	3b01      	subs	r3, #1
 801005e:	627b      	str	r3, [r7, #36]	; 0x24
			  dist_r = 0;
 8010060:	4b64      	ldr	r3, [pc, #400]	; (80101f4 <sensor_test+0x218>)
 8010062:	f04f 0200 	mov.w	r2, #0
 8010066:	601a      	str	r2, [r3, #0]
			  if(mode < 0){
 8010068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801006a:	2b00      	cmp	r3, #0
 801006c:	da01      	bge.n	8010072 <sensor_test+0x96>
				  mode = 7;
 801006e:	2307      	movs	r3, #7
 8010070:	627b      	str	r3, [r7, #36]	; 0x24
			  }
			  printf("Mode : %d\n", mode);
 8010072:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8010074:	485e      	ldr	r0, [pc, #376]	; (80101f0 <sensor_test+0x214>)
 8010076:	f000 fc89 	bl	801098c <iprintf>
			  //buzzer(pitagola2[mode-1][0], pitagola2[mode-1][1]);
			  //buzzer(pitagola[2][0], pitagola[2][1]);
		  }
		  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET){
 801007a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 801007e:	485e      	ldr	r0, [pc, #376]	; (80101f8 <sensor_test+0x21c>)
 8010080:	f7f2 f928 	bl	80022d4 <HAL_GPIO_ReadPin>
 8010084:	4603      	mov	r3, r0
 8010086:	2b00      	cmp	r3, #0
 8010088:	d1b1      	bne.n	800ffee <sensor_test+0x12>
			  HAL_Delay(50);
 801008a:	2032      	movs	r0, #50	; 0x32
 801008c:	f7f0 ffc6 	bl	800101c <HAL_Delay>
			  while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET);
 8010090:	bf00      	nop
 8010092:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8010096:	4858      	ldr	r0, [pc, #352]	; (80101f8 <sensor_test+0x21c>)
 8010098:	f7f2 f91c 	bl	80022d4 <HAL_GPIO_ReadPin>
 801009c:	4603      	mov	r3, r0
 801009e:	2b00      	cmp	r3, #0
 80100a0:	d0f7      	beq.n	8010092 <sensor_test+0xb6>

			  drive_ready();
 80100a2:	f7f4 fded 	bl	8004c80 <drive_ready>

			  switch(mode){
 80100a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80100a8:	2b07      	cmp	r3, #7
 80100aa:	d8a0      	bhi.n	800ffee <sensor_test+0x12>
 80100ac:	a201      	add	r2, pc, #4	; (adr r2, 80100b4 <sensor_test+0xd8>)
 80100ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80100b2:	bf00      	nop
 80100b4:	080100d5 	.word	0x080100d5
 80100b8:	080100db 	.word	0x080100db
 80100bc:	0801012d 	.word	0x0801012d
 80100c0:	0800ffef 	.word	0x0800ffef
 80100c4:	0800ffef 	.word	0x0800ffef
 80100c8:	0800ffef 	.word	0x0800ffef
 80100cc:	0800ffef 	.word	0x0800ffef
 80100d0:	0800ffef 	.word	0x0800ffef
				case 0:
					get_base();
 80100d4:	f7ff fe34 	bl	800fd40 <get_base>
					break;
 80100d8:	e089      	b.n	80101ee <sensor_test+0x212>
				case 1:
			  		  //----Wall sensor check----
			  		  printf("Wall Sensor Check.\n");
 80100da:	4848      	ldr	r0, [pc, #288]	; (80101fc <sensor_test+0x220>)
 80100dc:	f000 fcca 	bl	8010a74 <puts>
			  		  while(1){
			  			  get_wall_info();
 80100e0:	f7ff fe4c 	bl	800fd7c <get_wall_info>
			  			  led_write(wall_info & 0x11, wall_info & 0x88, wall_info & 0x44);
 80100e4:	4b46      	ldr	r3, [pc, #280]	; (8010200 <sensor_test+0x224>)
 80100e6:	781b      	ldrb	r3, [r3, #0]
 80100e8:	f003 0311 	and.w	r3, r3, #17
 80100ec:	b2d8      	uxtb	r0, r3
 80100ee:	4b44      	ldr	r3, [pc, #272]	; (8010200 <sensor_test+0x224>)
 80100f0:	781b      	ldrb	r3, [r3, #0]
 80100f2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80100f6:	b2d9      	uxtb	r1, r3
 80100f8:	4b41      	ldr	r3, [pc, #260]	; (8010200 <sensor_test+0x224>)
 80100fa:	781b      	ldrb	r3, [r3, #0]
 80100fc:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8010100:	b2db      	uxtb	r3, r3
 8010102:	461a      	mov	r2, r3
 8010104:	f7ff fe74 	bl	800fdf0 <led_write>
			  			  printf("ad_l : %d, ad_fl : %d, ad_fr : %d, ad_r : %d\n", ad_l, ad_fl, ad_fr, ad_r);
 8010108:	4b3e      	ldr	r3, [pc, #248]	; (8010204 <sensor_test+0x228>)
 801010a:	6819      	ldr	r1, [r3, #0]
 801010c:	4b3e      	ldr	r3, [pc, #248]	; (8010208 <sensor_test+0x22c>)
 801010e:	681a      	ldr	r2, [r3, #0]
 8010110:	4b3e      	ldr	r3, [pc, #248]	; (801020c <sensor_test+0x230>)
 8010112:	6818      	ldr	r0, [r3, #0]
 8010114:	4b3e      	ldr	r3, [pc, #248]	; (8010210 <sensor_test+0x234>)
 8010116:	681b      	ldr	r3, [r3, #0]
 8010118:	9300      	str	r3, [sp, #0]
 801011a:	4603      	mov	r3, r0
 801011c:	483d      	ldr	r0, [pc, #244]	; (8010214 <sensor_test+0x238>)
 801011e:	f000 fc35 	bl	801098c <iprintf>
			  			  HAL_Delay(333);
 8010122:	f240 104d 	movw	r0, #333	; 0x14d
 8010126:	f7f0 ff79 	bl	800101c <HAL_Delay>
			  			  get_wall_info();
 801012a:	e7d9      	b.n	80100e0 <sensor_test+0x104>
						}
					break;
				case 2:
					//----Gyro sensor check----
					printf("Gyro Sensor Check.\n");
 801012c:	483a      	ldr	r0, [pc, #232]	; (8010218 <sensor_test+0x23c>)
 801012e:	f000 fca1 	bl	8010a74 <puts>
					int accel_x, accel_y, accel_z;
					int gyro_x, gyro_y, gyro_z;
					int deg_x, deg_y, deg_z;
			  		  while(1){
			  			  accel_x = accel_read_x();
 8010132:	f7fa fd6f 	bl	800ac14 <accel_read_x>
 8010136:	eef0 7a40 	vmov.f32	s15, s0
 801013a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801013e:	ee17 3a90 	vmov	r3, s15
 8010142:	623b      	str	r3, [r7, #32]
			  			  accel_y = accel_read_y();
 8010144:	f7fa fd8c 	bl	800ac60 <accel_read_y>
 8010148:	eef0 7a40 	vmov.f32	s15, s0
 801014c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010150:	ee17 3a90 	vmov	r3, s15
 8010154:	61fb      	str	r3, [r7, #28]
			  			  accel_z = accel_read_z();
 8010156:	f7fa fda9 	bl	800acac <accel_read_z>
 801015a:	eef0 7a40 	vmov.f32	s15, s0
 801015e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010162:	ee17 3a90 	vmov	r3, s15
 8010166:	61bb      	str	r3, [r7, #24]
			  			  gyro_x = gyro_read_x();
 8010168:	f7fa fdca 	bl	800ad00 <gyro_read_x>
 801016c:	eef0 7a40 	vmov.f32	s15, s0
 8010170:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010174:	ee17 3a90 	vmov	r3, s15
 8010178:	617b      	str	r3, [r7, #20]
			  			  gyro_y = gyro_read_y();
 801017a:	f7fa fdfd 	bl	800ad78 <gyro_read_y>
 801017e:	eef0 7a40 	vmov.f32	s15, s0
 8010182:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010186:	ee17 3a90 	vmov	r3, s15
 801018a:	613b      	str	r3, [r7, #16]
			  			  gyro_z = gyro_read_z();
 801018c:	f7fa fe30 	bl	800adf0 <gyro_read_z>
 8010190:	eef0 7a40 	vmov.f32	s15, s0
 8010194:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010198:	ee17 3a90 	vmov	r3, s15
 801019c:	60fb      	str	r3, [r7, #12]
			  			  deg_x = degree_x;
 801019e:	4b1f      	ldr	r3, [pc, #124]	; (801021c <sensor_test+0x240>)
 80101a0:	edd3 7a00 	vldr	s15, [r3]
 80101a4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80101a8:	ee17 3a90 	vmov	r3, s15
 80101ac:	60bb      	str	r3, [r7, #8]
			  			  deg_y = degree_y;
 80101ae:	4b1c      	ldr	r3, [pc, #112]	; (8010220 <sensor_test+0x244>)
 80101b0:	edd3 7a00 	vldr	s15, [r3]
 80101b4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80101b8:	ee17 3a90 	vmov	r3, s15
 80101bc:	607b      	str	r3, [r7, #4]
			  			  deg_z = degree_z;
 80101be:	4b19      	ldr	r3, [pc, #100]	; (8010224 <sensor_test+0x248>)
 80101c0:	edd3 7a00 	vldr	s15, [r3]
 80101c4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80101c8:	ee17 3a90 	vmov	r3, s15
 80101cc:	603b      	str	r3, [r7, #0]

			  			  //printf("Accel x: %3d, y: %3d, z: %3d\n", accel_x, accel_y, accel_z);
			  			  printf("Gyro  x: %3d, y: %3d, z: %3d\n", gyro_x, gyro_y, gyro_z);
 80101ce:	68fb      	ldr	r3, [r7, #12]
 80101d0:	693a      	ldr	r2, [r7, #16]
 80101d2:	6979      	ldr	r1, [r7, #20]
 80101d4:	4814      	ldr	r0, [pc, #80]	; (8010228 <sensor_test+0x24c>)
 80101d6:	f000 fbd9 	bl	801098c <iprintf>
			  			  printf("Deg   x: %3d, y: %3d, z: %3d\n", deg_x, deg_y, deg_z);
 80101da:	683b      	ldr	r3, [r7, #0]
 80101dc:	687a      	ldr	r2, [r7, #4]
 80101de:	68b9      	ldr	r1, [r7, #8]
 80101e0:	4812      	ldr	r0, [pc, #72]	; (801022c <sensor_test+0x250>)
 80101e2:	f000 fbd3 	bl	801098c <iprintf>
			  			  HAL_Delay(111);
 80101e6:	206f      	movs	r0, #111	; 0x6f
 80101e8:	f7f0 ff18 	bl	800101c <HAL_Delay>
			  			  accel_x = accel_read_x();
 80101ec:	e7a1      	b.n	8010132 <sensor_test+0x156>
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 80101ee:	e6fe      	b.n	800ffee <sensor_test+0x12>
 80101f0:	08011fe8 	.word	0x08011fe8
 80101f4:	20000aec 	.word	0x20000aec
 80101f8:	40020000 	.word	0x40020000
 80101fc:	08011ff4 	.word	0x08011ff4
 8010200:	200002c8 	.word	0x200002c8
 8010204:	20000afc 	.word	0x20000afc
 8010208:	20000d54 	.word	0x20000d54
 801020c:	20000c00 	.word	0x20000c00
 8010210:	20000f60 	.word	0x20000f60
 8010214:	08012008 	.word	0x08012008
 8010218:	08012038 	.word	0x08012038
 801021c:	20000450 	.word	0x20000450
 8010220:	20000f70 	.word	0x20000f70
 8010224:	20000b5c 	.word	0x20000b5c
 8010228:	0801204c 	.word	0x0801204c
 801022c:	0801206c 	.word	0x0801206c

08010230 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8010230:	b480      	push	{r7}
 8010232:	b083      	sub	sp, #12
 8010234:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8010236:	2300      	movs	r3, #0
 8010238:	607b      	str	r3, [r7, #4]
 801023a:	4b10      	ldr	r3, [pc, #64]	; (801027c <HAL_MspInit+0x4c>)
 801023c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801023e:	4a0f      	ldr	r2, [pc, #60]	; (801027c <HAL_MspInit+0x4c>)
 8010240:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8010244:	6453      	str	r3, [r2, #68]	; 0x44
 8010246:	4b0d      	ldr	r3, [pc, #52]	; (801027c <HAL_MspInit+0x4c>)
 8010248:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801024a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801024e:	607b      	str	r3, [r7, #4]
 8010250:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8010252:	2300      	movs	r3, #0
 8010254:	603b      	str	r3, [r7, #0]
 8010256:	4b09      	ldr	r3, [pc, #36]	; (801027c <HAL_MspInit+0x4c>)
 8010258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801025a:	4a08      	ldr	r2, [pc, #32]	; (801027c <HAL_MspInit+0x4c>)
 801025c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8010260:	6413      	str	r3, [r2, #64]	; 0x40
 8010262:	4b06      	ldr	r3, [pc, #24]	; (801027c <HAL_MspInit+0x4c>)
 8010264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010266:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801026a:	603b      	str	r3, [r7, #0]
 801026c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 801026e:	bf00      	nop
 8010270:	370c      	adds	r7, #12
 8010272:	46bd      	mov	sp, r7
 8010274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010278:	4770      	bx	lr
 801027a:	bf00      	nop
 801027c:	40023800 	.word	0x40023800

08010280 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8010280:	b580      	push	{r7, lr}
 8010282:	b08a      	sub	sp, #40	; 0x28
 8010284:	af00      	add	r7, sp, #0
 8010286:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8010288:	f107 0314 	add.w	r3, r7, #20
 801028c:	2200      	movs	r2, #0
 801028e:	601a      	str	r2, [r3, #0]
 8010290:	605a      	str	r2, [r3, #4]
 8010292:	609a      	str	r2, [r3, #8]
 8010294:	60da      	str	r2, [r3, #12]
 8010296:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8010298:	687b      	ldr	r3, [r7, #4]
 801029a:	681b      	ldr	r3, [r3, #0]
 801029c:	4a17      	ldr	r2, [pc, #92]	; (80102fc <HAL_ADC_MspInit+0x7c>)
 801029e:	4293      	cmp	r3, r2
 80102a0:	d127      	bne.n	80102f2 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80102a2:	2300      	movs	r3, #0
 80102a4:	613b      	str	r3, [r7, #16]
 80102a6:	4b16      	ldr	r3, [pc, #88]	; (8010300 <HAL_ADC_MspInit+0x80>)
 80102a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80102aa:	4a15      	ldr	r2, [pc, #84]	; (8010300 <HAL_ADC_MspInit+0x80>)
 80102ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80102b0:	6453      	str	r3, [r2, #68]	; 0x44
 80102b2:	4b13      	ldr	r3, [pc, #76]	; (8010300 <HAL_ADC_MspInit+0x80>)
 80102b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80102b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80102ba:	613b      	str	r3, [r7, #16]
 80102bc:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80102be:	2300      	movs	r3, #0
 80102c0:	60fb      	str	r3, [r7, #12]
 80102c2:	4b0f      	ldr	r3, [pc, #60]	; (8010300 <HAL_ADC_MspInit+0x80>)
 80102c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80102c6:	4a0e      	ldr	r2, [pc, #56]	; (8010300 <HAL_ADC_MspInit+0x80>)
 80102c8:	f043 0301 	orr.w	r3, r3, #1
 80102cc:	6313      	str	r3, [r2, #48]	; 0x30
 80102ce:	4b0c      	ldr	r3, [pc, #48]	; (8010300 <HAL_ADC_MspInit+0x80>)
 80102d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80102d2:	f003 0301 	and.w	r3, r3, #1
 80102d6:	60fb      	str	r3, [r7, #12]
 80102d8:	68fb      	ldr	r3, [r7, #12]
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80102da:	230f      	movs	r3, #15
 80102dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80102de:	2303      	movs	r3, #3
 80102e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80102e2:	2300      	movs	r3, #0
 80102e4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80102e6:	f107 0314 	add.w	r3, r7, #20
 80102ea:	4619      	mov	r1, r3
 80102ec:	4805      	ldr	r0, [pc, #20]	; (8010304 <HAL_ADC_MspInit+0x84>)
 80102ee:	f7f1 fe57 	bl	8001fa0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80102f2:	bf00      	nop
 80102f4:	3728      	adds	r7, #40	; 0x28
 80102f6:	46bd      	mov	sp, r7
 80102f8:	bd80      	pop	{r7, pc}
 80102fa:	bf00      	nop
 80102fc:	40012000 	.word	0x40012000
 8010300:	40023800 	.word	0x40023800
 8010304:	40020000 	.word	0x40020000

08010308 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8010308:	b580      	push	{r7, lr}
 801030a:	b08a      	sub	sp, #40	; 0x28
 801030c:	af00      	add	r7, sp, #0
 801030e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8010310:	f107 0314 	add.w	r3, r7, #20
 8010314:	2200      	movs	r2, #0
 8010316:	601a      	str	r2, [r3, #0]
 8010318:	605a      	str	r2, [r3, #4]
 801031a:	609a      	str	r2, [r3, #8]
 801031c:	60da      	str	r2, [r3, #12]
 801031e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8010320:	687b      	ldr	r3, [r7, #4]
 8010322:	681b      	ldr	r3, [r3, #0]
 8010324:	4a19      	ldr	r2, [pc, #100]	; (801038c <HAL_SPI_MspInit+0x84>)
 8010326:	4293      	cmp	r3, r2
 8010328:	d12c      	bne.n	8010384 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 801032a:	2300      	movs	r3, #0
 801032c:	613b      	str	r3, [r7, #16]
 801032e:	4b18      	ldr	r3, [pc, #96]	; (8010390 <HAL_SPI_MspInit+0x88>)
 8010330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010332:	4a17      	ldr	r2, [pc, #92]	; (8010390 <HAL_SPI_MspInit+0x88>)
 8010334:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010338:	6413      	str	r3, [r2, #64]	; 0x40
 801033a:	4b15      	ldr	r3, [pc, #84]	; (8010390 <HAL_SPI_MspInit+0x88>)
 801033c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801033e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8010342:	613b      	str	r3, [r7, #16]
 8010344:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8010346:	2300      	movs	r3, #0
 8010348:	60fb      	str	r3, [r7, #12]
 801034a:	4b11      	ldr	r3, [pc, #68]	; (8010390 <HAL_SPI_MspInit+0x88>)
 801034c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801034e:	4a10      	ldr	r2, [pc, #64]	; (8010390 <HAL_SPI_MspInit+0x88>)
 8010350:	f043 0304 	orr.w	r3, r3, #4
 8010354:	6313      	str	r3, [r2, #48]	; 0x30
 8010356:	4b0e      	ldr	r3, [pc, #56]	; (8010390 <HAL_SPI_MspInit+0x88>)
 8010358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801035a:	f003 0304 	and.w	r3, r3, #4
 801035e:	60fb      	str	r3, [r7, #12]
 8010360:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration    
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8010362:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8010366:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010368:	2302      	movs	r3, #2
 801036a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801036c:	2300      	movs	r3, #0
 801036e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8010370:	2303      	movs	r3, #3
 8010372:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8010374:	2306      	movs	r3, #6
 8010376:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8010378:	f107 0314 	add.w	r3, r7, #20
 801037c:	4619      	mov	r1, r3
 801037e:	4805      	ldr	r0, [pc, #20]	; (8010394 <HAL_SPI_MspInit+0x8c>)
 8010380:	f7f1 fe0e 	bl	8001fa0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8010384:	bf00      	nop
 8010386:	3728      	adds	r7, #40	; 0x28
 8010388:	46bd      	mov	sp, r7
 801038a:	bd80      	pop	{r7, pc}
 801038c:	40003c00 	.word	0x40003c00
 8010390:	40023800 	.word	0x40023800
 8010394:	40020800 	.word	0x40020800

08010398 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8010398:	b580      	push	{r7, lr}
 801039a:	b086      	sub	sp, #24
 801039c:	af00      	add	r7, sp, #0
 801039e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80103a0:	687b      	ldr	r3, [r7, #4]
 80103a2:	681b      	ldr	r3, [r3, #0]
 80103a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80103a8:	d10e      	bne.n	80103c8 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80103aa:	2300      	movs	r3, #0
 80103ac:	617b      	str	r3, [r7, #20]
 80103ae:	4b20      	ldr	r3, [pc, #128]	; (8010430 <HAL_TIM_Base_MspInit+0x98>)
 80103b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80103b2:	4a1f      	ldr	r2, [pc, #124]	; (8010430 <HAL_TIM_Base_MspInit+0x98>)
 80103b4:	f043 0301 	orr.w	r3, r3, #1
 80103b8:	6413      	str	r3, [r2, #64]	; 0x40
 80103ba:	4b1d      	ldr	r3, [pc, #116]	; (8010430 <HAL_TIM_Base_MspInit+0x98>)
 80103bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80103be:	f003 0301 	and.w	r3, r3, #1
 80103c2:	617b      	str	r3, [r7, #20]
 80103c4:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 80103c6:	e02e      	b.n	8010426 <HAL_TIM_Base_MspInit+0x8e>
  else if(htim_base->Instance==TIM3)
 80103c8:	687b      	ldr	r3, [r7, #4]
 80103ca:	681b      	ldr	r3, [r3, #0]
 80103cc:	4a19      	ldr	r2, [pc, #100]	; (8010434 <HAL_TIM_Base_MspInit+0x9c>)
 80103ce:	4293      	cmp	r3, r2
 80103d0:	d10e      	bne.n	80103f0 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80103d2:	2300      	movs	r3, #0
 80103d4:	613b      	str	r3, [r7, #16]
 80103d6:	4b16      	ldr	r3, [pc, #88]	; (8010430 <HAL_TIM_Base_MspInit+0x98>)
 80103d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80103da:	4a15      	ldr	r2, [pc, #84]	; (8010430 <HAL_TIM_Base_MspInit+0x98>)
 80103dc:	f043 0302 	orr.w	r3, r3, #2
 80103e0:	6413      	str	r3, [r2, #64]	; 0x40
 80103e2:	4b13      	ldr	r3, [pc, #76]	; (8010430 <HAL_TIM_Base_MspInit+0x98>)
 80103e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80103e6:	f003 0302 	and.w	r3, r3, #2
 80103ea:	613b      	str	r3, [r7, #16]
 80103ec:	693b      	ldr	r3, [r7, #16]
}
 80103ee:	e01a      	b.n	8010426 <HAL_TIM_Base_MspInit+0x8e>
  else if(htim_base->Instance==TIM6)
 80103f0:	687b      	ldr	r3, [r7, #4]
 80103f2:	681b      	ldr	r3, [r3, #0]
 80103f4:	4a10      	ldr	r2, [pc, #64]	; (8010438 <HAL_TIM_Base_MspInit+0xa0>)
 80103f6:	4293      	cmp	r3, r2
 80103f8:	d115      	bne.n	8010426 <HAL_TIM_Base_MspInit+0x8e>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80103fa:	2300      	movs	r3, #0
 80103fc:	60fb      	str	r3, [r7, #12]
 80103fe:	4b0c      	ldr	r3, [pc, #48]	; (8010430 <HAL_TIM_Base_MspInit+0x98>)
 8010400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010402:	4a0b      	ldr	r2, [pc, #44]	; (8010430 <HAL_TIM_Base_MspInit+0x98>)
 8010404:	f043 0310 	orr.w	r3, r3, #16
 8010408:	6413      	str	r3, [r2, #64]	; 0x40
 801040a:	4b09      	ldr	r3, [pc, #36]	; (8010430 <HAL_TIM_Base_MspInit+0x98>)
 801040c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801040e:	f003 0310 	and.w	r3, r3, #16
 8010412:	60fb      	str	r3, [r7, #12]
 8010414:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8010416:	2200      	movs	r2, #0
 8010418:	2100      	movs	r1, #0
 801041a:	2036      	movs	r0, #54	; 0x36
 801041c:	f7f1 fab5 	bl	800198a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8010420:	2036      	movs	r0, #54	; 0x36
 8010422:	f7f1 face 	bl	80019c2 <HAL_NVIC_EnableIRQ>
}
 8010426:	bf00      	nop
 8010428:	3718      	adds	r7, #24
 801042a:	46bd      	mov	sp, r7
 801042c:	bd80      	pop	{r7, pc}
 801042e:	bf00      	nop
 8010430:	40023800 	.word	0x40023800
 8010434:	40000400 	.word	0x40000400
 8010438:	40001000 	.word	0x40001000

0801043c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 801043c:	b580      	push	{r7, lr}
 801043e:	b08c      	sub	sp, #48	; 0x30
 8010440:	af00      	add	r7, sp, #0
 8010442:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8010444:	f107 031c 	add.w	r3, r7, #28
 8010448:	2200      	movs	r2, #0
 801044a:	601a      	str	r2, [r3, #0]
 801044c:	605a      	str	r2, [r3, #4]
 801044e:	609a      	str	r2, [r3, #8]
 8010450:	60da      	str	r2, [r3, #12]
 8010452:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM4)
 8010454:	687b      	ldr	r3, [r7, #4]
 8010456:	681b      	ldr	r3, [r3, #0]
 8010458:	4a32      	ldr	r2, [pc, #200]	; (8010524 <HAL_TIM_Encoder_MspInit+0xe8>)
 801045a:	4293      	cmp	r3, r2
 801045c:	d12c      	bne.n	80104b8 <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 801045e:	2300      	movs	r3, #0
 8010460:	61bb      	str	r3, [r7, #24]
 8010462:	4b31      	ldr	r3, [pc, #196]	; (8010528 <HAL_TIM_Encoder_MspInit+0xec>)
 8010464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010466:	4a30      	ldr	r2, [pc, #192]	; (8010528 <HAL_TIM_Encoder_MspInit+0xec>)
 8010468:	f043 0304 	orr.w	r3, r3, #4
 801046c:	6413      	str	r3, [r2, #64]	; 0x40
 801046e:	4b2e      	ldr	r3, [pc, #184]	; (8010528 <HAL_TIM_Encoder_MspInit+0xec>)
 8010470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010472:	f003 0304 	and.w	r3, r3, #4
 8010476:	61bb      	str	r3, [r7, #24]
 8010478:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 801047a:	2300      	movs	r3, #0
 801047c:	617b      	str	r3, [r7, #20]
 801047e:	4b2a      	ldr	r3, [pc, #168]	; (8010528 <HAL_TIM_Encoder_MspInit+0xec>)
 8010480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010482:	4a29      	ldr	r2, [pc, #164]	; (8010528 <HAL_TIM_Encoder_MspInit+0xec>)
 8010484:	f043 0302 	orr.w	r3, r3, #2
 8010488:	6313      	str	r3, [r2, #48]	; 0x30
 801048a:	4b27      	ldr	r3, [pc, #156]	; (8010528 <HAL_TIM_Encoder_MspInit+0xec>)
 801048c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801048e:	f003 0302 	and.w	r3, r3, #2
 8010492:	617b      	str	r3, [r7, #20]
 8010494:	697b      	ldr	r3, [r7, #20]
    /**TIM4 GPIO Configuration    
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8010496:	23c0      	movs	r3, #192	; 0xc0
 8010498:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801049a:	2302      	movs	r3, #2
 801049c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801049e:	2300      	movs	r3, #0
 80104a0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80104a2:	2300      	movs	r3, #0
 80104a4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80104a6:	2302      	movs	r3, #2
 80104a8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80104aa:	f107 031c 	add.w	r3, r7, #28
 80104ae:	4619      	mov	r1, r3
 80104b0:	481e      	ldr	r0, [pc, #120]	; (801052c <HAL_TIM_Encoder_MspInit+0xf0>)
 80104b2:	f7f1 fd75 	bl	8001fa0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 80104b6:	e030      	b.n	801051a <HAL_TIM_Encoder_MspInit+0xde>
  else if(htim_encoder->Instance==TIM8)
 80104b8:	687b      	ldr	r3, [r7, #4]
 80104ba:	681b      	ldr	r3, [r3, #0]
 80104bc:	4a1c      	ldr	r2, [pc, #112]	; (8010530 <HAL_TIM_Encoder_MspInit+0xf4>)
 80104be:	4293      	cmp	r3, r2
 80104c0:	d12b      	bne.n	801051a <HAL_TIM_Encoder_MspInit+0xde>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80104c2:	2300      	movs	r3, #0
 80104c4:	613b      	str	r3, [r7, #16]
 80104c6:	4b18      	ldr	r3, [pc, #96]	; (8010528 <HAL_TIM_Encoder_MspInit+0xec>)
 80104c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80104ca:	4a17      	ldr	r2, [pc, #92]	; (8010528 <HAL_TIM_Encoder_MspInit+0xec>)
 80104cc:	f043 0302 	orr.w	r3, r3, #2
 80104d0:	6453      	str	r3, [r2, #68]	; 0x44
 80104d2:	4b15      	ldr	r3, [pc, #84]	; (8010528 <HAL_TIM_Encoder_MspInit+0xec>)
 80104d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80104d6:	f003 0302 	and.w	r3, r3, #2
 80104da:	613b      	str	r3, [r7, #16]
 80104dc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80104de:	2300      	movs	r3, #0
 80104e0:	60fb      	str	r3, [r7, #12]
 80104e2:	4b11      	ldr	r3, [pc, #68]	; (8010528 <HAL_TIM_Encoder_MspInit+0xec>)
 80104e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80104e6:	4a10      	ldr	r2, [pc, #64]	; (8010528 <HAL_TIM_Encoder_MspInit+0xec>)
 80104e8:	f043 0304 	orr.w	r3, r3, #4
 80104ec:	6313      	str	r3, [r2, #48]	; 0x30
 80104ee:	4b0e      	ldr	r3, [pc, #56]	; (8010528 <HAL_TIM_Encoder_MspInit+0xec>)
 80104f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80104f2:	f003 0304 	and.w	r3, r3, #4
 80104f6:	60fb      	str	r3, [r7, #12]
 80104f8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80104fa:	23c0      	movs	r3, #192	; 0xc0
 80104fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80104fe:	2302      	movs	r3, #2
 8010500:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010502:	2300      	movs	r3, #0
 8010504:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8010506:	2300      	movs	r3, #0
 8010508:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 801050a:	2303      	movs	r3, #3
 801050c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 801050e:	f107 031c 	add.w	r3, r7, #28
 8010512:	4619      	mov	r1, r3
 8010514:	4807      	ldr	r0, [pc, #28]	; (8010534 <HAL_TIM_Encoder_MspInit+0xf8>)
 8010516:	f7f1 fd43 	bl	8001fa0 <HAL_GPIO_Init>
}
 801051a:	bf00      	nop
 801051c:	3730      	adds	r7, #48	; 0x30
 801051e:	46bd      	mov	sp, r7
 8010520:	bd80      	pop	{r7, pc}
 8010522:	bf00      	nop
 8010524:	40000800 	.word	0x40000800
 8010528:	40023800 	.word	0x40023800
 801052c:	40020400 	.word	0x40020400
 8010530:	40010400 	.word	0x40010400
 8010534:	40020800 	.word	0x40020800

08010538 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8010538:	b580      	push	{r7, lr}
 801053a:	b08a      	sub	sp, #40	; 0x28
 801053c:	af00      	add	r7, sp, #0
 801053e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8010540:	f107 0314 	add.w	r3, r7, #20
 8010544:	2200      	movs	r2, #0
 8010546:	601a      	str	r2, [r3, #0]
 8010548:	605a      	str	r2, [r3, #4]
 801054a:	609a      	str	r2, [r3, #8]
 801054c:	60da      	str	r2, [r3, #12]
 801054e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8010550:	687b      	ldr	r3, [r7, #4]
 8010552:	681b      	ldr	r3, [r3, #0]
 8010554:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010558:	d13d      	bne.n	80105d6 <HAL_TIM_MspPostInit+0x9e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 801055a:	2300      	movs	r3, #0
 801055c:	613b      	str	r3, [r7, #16]
 801055e:	4b31      	ldr	r3, [pc, #196]	; (8010624 <HAL_TIM_MspPostInit+0xec>)
 8010560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010562:	4a30      	ldr	r2, [pc, #192]	; (8010624 <HAL_TIM_MspPostInit+0xec>)
 8010564:	f043 0301 	orr.w	r3, r3, #1
 8010568:	6313      	str	r3, [r2, #48]	; 0x30
 801056a:	4b2e      	ldr	r3, [pc, #184]	; (8010624 <HAL_TIM_MspPostInit+0xec>)
 801056c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801056e:	f003 0301 	and.w	r3, r3, #1
 8010572:	613b      	str	r3, [r7, #16]
 8010574:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8010576:	2300      	movs	r3, #0
 8010578:	60fb      	str	r3, [r7, #12]
 801057a:	4b2a      	ldr	r3, [pc, #168]	; (8010624 <HAL_TIM_MspPostInit+0xec>)
 801057c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801057e:	4a29      	ldr	r2, [pc, #164]	; (8010624 <HAL_TIM_MspPostInit+0xec>)
 8010580:	f043 0302 	orr.w	r3, r3, #2
 8010584:	6313      	str	r3, [r2, #48]	; 0x30
 8010586:	4b27      	ldr	r3, [pc, #156]	; (8010624 <HAL_TIM_MspPostInit+0xec>)
 8010588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801058a:	f003 0302 	and.w	r3, r3, #2
 801058e:	60fb      	str	r3, [r7, #12]
 8010590:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration    
    PA5     ------> TIM2_CH1
    PB11     ------> TIM2_CH4 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8010592:	2320      	movs	r3, #32
 8010594:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010596:	2302      	movs	r3, #2
 8010598:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801059a:	2300      	movs	r3, #0
 801059c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801059e:	2300      	movs	r3, #0
 80105a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80105a2:	2301      	movs	r3, #1
 80105a4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80105a6:	f107 0314 	add.w	r3, r7, #20
 80105aa:	4619      	mov	r1, r3
 80105ac:	481e      	ldr	r0, [pc, #120]	; (8010628 <HAL_TIM_MspPostInit+0xf0>)
 80105ae:	f7f1 fcf7 	bl	8001fa0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80105b2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80105b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80105b8:	2302      	movs	r3, #2
 80105ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80105bc:	2300      	movs	r3, #0
 80105be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80105c0:	2300      	movs	r3, #0
 80105c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80105c4:	2301      	movs	r3, #1
 80105c6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80105c8:	f107 0314 	add.w	r3, r7, #20
 80105cc:	4619      	mov	r1, r3
 80105ce:	4817      	ldr	r0, [pc, #92]	; (801062c <HAL_TIM_MspPostInit+0xf4>)
 80105d0:	f7f1 fce6 	bl	8001fa0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80105d4:	e022      	b.n	801061c <HAL_TIM_MspPostInit+0xe4>
  else if(htim->Instance==TIM3)
 80105d6:	687b      	ldr	r3, [r7, #4]
 80105d8:	681b      	ldr	r3, [r3, #0]
 80105da:	4a15      	ldr	r2, [pc, #84]	; (8010630 <HAL_TIM_MspPostInit+0xf8>)
 80105dc:	4293      	cmp	r3, r2
 80105de:	d11d      	bne.n	801061c <HAL_TIM_MspPostInit+0xe4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80105e0:	2300      	movs	r3, #0
 80105e2:	60bb      	str	r3, [r7, #8]
 80105e4:	4b0f      	ldr	r3, [pc, #60]	; (8010624 <HAL_TIM_MspPostInit+0xec>)
 80105e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80105e8:	4a0e      	ldr	r2, [pc, #56]	; (8010624 <HAL_TIM_MspPostInit+0xec>)
 80105ea:	f043 0302 	orr.w	r3, r3, #2
 80105ee:	6313      	str	r3, [r2, #48]	; 0x30
 80105f0:	4b0c      	ldr	r3, [pc, #48]	; (8010624 <HAL_TIM_MspPostInit+0xec>)
 80105f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80105f4:	f003 0302 	and.w	r3, r3, #2
 80105f8:	60bb      	str	r3, [r7, #8]
 80105fa:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80105fc:	2320      	movs	r3, #32
 80105fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010600:	2302      	movs	r3, #2
 8010602:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010604:	2300      	movs	r3, #0
 8010606:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8010608:	2300      	movs	r3, #0
 801060a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 801060c:	2302      	movs	r3, #2
 801060e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8010610:	f107 0314 	add.w	r3, r7, #20
 8010614:	4619      	mov	r1, r3
 8010616:	4805      	ldr	r0, [pc, #20]	; (801062c <HAL_TIM_MspPostInit+0xf4>)
 8010618:	f7f1 fcc2 	bl	8001fa0 <HAL_GPIO_Init>
}
 801061c:	bf00      	nop
 801061e:	3728      	adds	r7, #40	; 0x28
 8010620:	46bd      	mov	sp, r7
 8010622:	bd80      	pop	{r7, pc}
 8010624:	40023800 	.word	0x40023800
 8010628:	40020000 	.word	0x40020000
 801062c:	40020400 	.word	0x40020400
 8010630:	40000400 	.word	0x40000400

08010634 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8010634:	b580      	push	{r7, lr}
 8010636:	b08a      	sub	sp, #40	; 0x28
 8010638:	af00      	add	r7, sp, #0
 801063a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801063c:	f107 0314 	add.w	r3, r7, #20
 8010640:	2200      	movs	r2, #0
 8010642:	601a      	str	r2, [r3, #0]
 8010644:	605a      	str	r2, [r3, #4]
 8010646:	609a      	str	r2, [r3, #8]
 8010648:	60da      	str	r2, [r3, #12]
 801064a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 801064c:	687b      	ldr	r3, [r7, #4]
 801064e:	681b      	ldr	r3, [r3, #0]
 8010650:	4a19      	ldr	r2, [pc, #100]	; (80106b8 <HAL_UART_MspInit+0x84>)
 8010652:	4293      	cmp	r3, r2
 8010654:	d12c      	bne.n	80106b0 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8010656:	2300      	movs	r3, #0
 8010658:	613b      	str	r3, [r7, #16]
 801065a:	4b18      	ldr	r3, [pc, #96]	; (80106bc <HAL_UART_MspInit+0x88>)
 801065c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801065e:	4a17      	ldr	r2, [pc, #92]	; (80106bc <HAL_UART_MspInit+0x88>)
 8010660:	f043 0310 	orr.w	r3, r3, #16
 8010664:	6453      	str	r3, [r2, #68]	; 0x44
 8010666:	4b15      	ldr	r3, [pc, #84]	; (80106bc <HAL_UART_MspInit+0x88>)
 8010668:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801066a:	f003 0310 	and.w	r3, r3, #16
 801066e:	613b      	str	r3, [r7, #16]
 8010670:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8010672:	2300      	movs	r3, #0
 8010674:	60fb      	str	r3, [r7, #12]
 8010676:	4b11      	ldr	r3, [pc, #68]	; (80106bc <HAL_UART_MspInit+0x88>)
 8010678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801067a:	4a10      	ldr	r2, [pc, #64]	; (80106bc <HAL_UART_MspInit+0x88>)
 801067c:	f043 0301 	orr.w	r3, r3, #1
 8010680:	6313      	str	r3, [r2, #48]	; 0x30
 8010682:	4b0e      	ldr	r3, [pc, #56]	; (80106bc <HAL_UART_MspInit+0x88>)
 8010684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010686:	f003 0301 	and.w	r3, r3, #1
 801068a:	60fb      	str	r3, [r7, #12]
 801068c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 801068e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8010692:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010694:	2302      	movs	r3, #2
 8010696:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8010698:	2301      	movs	r3, #1
 801069a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801069c:	2303      	movs	r3, #3
 801069e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80106a0:	2307      	movs	r3, #7
 80106a2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80106a4:	f107 0314 	add.w	r3, r7, #20
 80106a8:	4619      	mov	r1, r3
 80106aa:	4805      	ldr	r0, [pc, #20]	; (80106c0 <HAL_UART_MspInit+0x8c>)
 80106ac:	f7f1 fc78 	bl	8001fa0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80106b0:	bf00      	nop
 80106b2:	3728      	adds	r7, #40	; 0x28
 80106b4:	46bd      	mov	sp, r7
 80106b6:	bd80      	pop	{r7, pc}
 80106b8:	40011000 	.word	0x40011000
 80106bc:	40023800 	.word	0x40023800
 80106c0:	40020000 	.word	0x40020000

080106c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80106c4:	b480      	push	{r7}
 80106c6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80106c8:	bf00      	nop
 80106ca:	46bd      	mov	sp, r7
 80106cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106d0:	4770      	bx	lr

080106d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80106d2:	b480      	push	{r7}
 80106d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80106d6:	e7fe      	b.n	80106d6 <HardFault_Handler+0x4>

080106d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80106d8:	b480      	push	{r7}
 80106da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80106dc:	e7fe      	b.n	80106dc <MemManage_Handler+0x4>

080106de <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80106de:	b480      	push	{r7}
 80106e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80106e2:	e7fe      	b.n	80106e2 <BusFault_Handler+0x4>

080106e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80106e4:	b480      	push	{r7}
 80106e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80106e8:	e7fe      	b.n	80106e8 <UsageFault_Handler+0x4>

080106ea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80106ea:	b480      	push	{r7}
 80106ec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80106ee:	bf00      	nop
 80106f0:	46bd      	mov	sp, r7
 80106f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106f6:	4770      	bx	lr

080106f8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80106f8:	b480      	push	{r7}
 80106fa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80106fc:	bf00      	nop
 80106fe:	46bd      	mov	sp, r7
 8010700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010704:	4770      	bx	lr

08010706 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8010706:	b480      	push	{r7}
 8010708:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 801070a:	bf00      	nop
 801070c:	46bd      	mov	sp, r7
 801070e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010712:	4770      	bx	lr

08010714 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8010714:	b580      	push	{r7, lr}
 8010716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8010718:	f7f0 fc60 	bl	8000fdc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 801071c:	bf00      	nop
 801071e:	bd80      	pop	{r7, pc}

08010720 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8010720:	b580      	push	{r7, lr}
 8010722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8010724:	4802      	ldr	r0, [pc, #8]	; (8010730 <TIM6_DAC_IRQHandler+0x10>)
 8010726:	f7f3 f948 	bl	80039ba <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 801072a:	bf00      	nop
 801072c:	bd80      	pop	{r7, pc}
 801072e:	bf00      	nop
 8010730:	20000bb4 	.word	0x20000bb4

08010734 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8010734:	b580      	push	{r7, lr}
 8010736:	b086      	sub	sp, #24
 8010738:	af00      	add	r7, sp, #0
 801073a:	60f8      	str	r0, [r7, #12]
 801073c:	60b9      	str	r1, [r7, #8]
 801073e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8010740:	2300      	movs	r3, #0
 8010742:	617b      	str	r3, [r7, #20]
 8010744:	e00a      	b.n	801075c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8010746:	f3af 8000 	nop.w
 801074a:	4601      	mov	r1, r0
 801074c:	68bb      	ldr	r3, [r7, #8]
 801074e:	1c5a      	adds	r2, r3, #1
 8010750:	60ba      	str	r2, [r7, #8]
 8010752:	b2ca      	uxtb	r2, r1
 8010754:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8010756:	697b      	ldr	r3, [r7, #20]
 8010758:	3301      	adds	r3, #1
 801075a:	617b      	str	r3, [r7, #20]
 801075c:	697a      	ldr	r2, [r7, #20]
 801075e:	687b      	ldr	r3, [r7, #4]
 8010760:	429a      	cmp	r2, r3
 8010762:	dbf0      	blt.n	8010746 <_read+0x12>
	}

return len;
 8010764:	687b      	ldr	r3, [r7, #4]
}
 8010766:	4618      	mov	r0, r3
 8010768:	3718      	adds	r7, #24
 801076a:	46bd      	mov	sp, r7
 801076c:	bd80      	pop	{r7, pc}

0801076e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 801076e:	b580      	push	{r7, lr}
 8010770:	b086      	sub	sp, #24
 8010772:	af00      	add	r7, sp, #0
 8010774:	60f8      	str	r0, [r7, #12]
 8010776:	60b9      	str	r1, [r7, #8]
 8010778:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 801077a:	2300      	movs	r3, #0
 801077c:	617b      	str	r3, [r7, #20]
 801077e:	e009      	b.n	8010794 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8010780:	68bb      	ldr	r3, [r7, #8]
 8010782:	1c5a      	adds	r2, r3, #1
 8010784:	60ba      	str	r2, [r7, #8]
 8010786:	781b      	ldrb	r3, [r3, #0]
 8010788:	4618      	mov	r0, r3
 801078a:	f7fa fb73 	bl	800ae74 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 801078e:	697b      	ldr	r3, [r7, #20]
 8010790:	3301      	adds	r3, #1
 8010792:	617b      	str	r3, [r7, #20]
 8010794:	697a      	ldr	r2, [r7, #20]
 8010796:	687b      	ldr	r3, [r7, #4]
 8010798:	429a      	cmp	r2, r3
 801079a:	dbf1      	blt.n	8010780 <_write+0x12>
	}
	return len;
 801079c:	687b      	ldr	r3, [r7, #4]
}
 801079e:	4618      	mov	r0, r3
 80107a0:	3718      	adds	r7, #24
 80107a2:	46bd      	mov	sp, r7
 80107a4:	bd80      	pop	{r7, pc}

080107a6 <_close>:

int _close(int file)
{
 80107a6:	b480      	push	{r7}
 80107a8:	b083      	sub	sp, #12
 80107aa:	af00      	add	r7, sp, #0
 80107ac:	6078      	str	r0, [r7, #4]
	return -1;
 80107ae:	f04f 33ff 	mov.w	r3, #4294967295
}
 80107b2:	4618      	mov	r0, r3
 80107b4:	370c      	adds	r7, #12
 80107b6:	46bd      	mov	sp, r7
 80107b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107bc:	4770      	bx	lr

080107be <_fstat>:


int _fstat(int file, struct stat *st)
{
 80107be:	b480      	push	{r7}
 80107c0:	b083      	sub	sp, #12
 80107c2:	af00      	add	r7, sp, #0
 80107c4:	6078      	str	r0, [r7, #4]
 80107c6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80107c8:	683b      	ldr	r3, [r7, #0]
 80107ca:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80107ce:	605a      	str	r2, [r3, #4]
	return 0;
 80107d0:	2300      	movs	r3, #0
}
 80107d2:	4618      	mov	r0, r3
 80107d4:	370c      	adds	r7, #12
 80107d6:	46bd      	mov	sp, r7
 80107d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107dc:	4770      	bx	lr

080107de <_isatty>:

int _isatty(int file)
{
 80107de:	b480      	push	{r7}
 80107e0:	b083      	sub	sp, #12
 80107e2:	af00      	add	r7, sp, #0
 80107e4:	6078      	str	r0, [r7, #4]
	return 1;
 80107e6:	2301      	movs	r3, #1
}
 80107e8:	4618      	mov	r0, r3
 80107ea:	370c      	adds	r7, #12
 80107ec:	46bd      	mov	sp, r7
 80107ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107f2:	4770      	bx	lr

080107f4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80107f4:	b480      	push	{r7}
 80107f6:	b085      	sub	sp, #20
 80107f8:	af00      	add	r7, sp, #0
 80107fa:	60f8      	str	r0, [r7, #12]
 80107fc:	60b9      	str	r1, [r7, #8]
 80107fe:	607a      	str	r2, [r7, #4]
	return 0;
 8010800:	2300      	movs	r3, #0
}
 8010802:	4618      	mov	r0, r3
 8010804:	3714      	adds	r7, #20
 8010806:	46bd      	mov	sp, r7
 8010808:	f85d 7b04 	ldr.w	r7, [sp], #4
 801080c:	4770      	bx	lr
	...

08010810 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8010810:	b580      	push	{r7, lr}
 8010812:	b084      	sub	sp, #16
 8010814:	af00      	add	r7, sp, #0
 8010816:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8010818:	4b11      	ldr	r3, [pc, #68]	; (8010860 <_sbrk+0x50>)
 801081a:	681b      	ldr	r3, [r3, #0]
 801081c:	2b00      	cmp	r3, #0
 801081e:	d102      	bne.n	8010826 <_sbrk+0x16>
		heap_end = &end;
 8010820:	4b0f      	ldr	r3, [pc, #60]	; (8010860 <_sbrk+0x50>)
 8010822:	4a10      	ldr	r2, [pc, #64]	; (8010864 <_sbrk+0x54>)
 8010824:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8010826:	4b0e      	ldr	r3, [pc, #56]	; (8010860 <_sbrk+0x50>)
 8010828:	681b      	ldr	r3, [r3, #0]
 801082a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 801082c:	4b0c      	ldr	r3, [pc, #48]	; (8010860 <_sbrk+0x50>)
 801082e:	681a      	ldr	r2, [r3, #0]
 8010830:	687b      	ldr	r3, [r7, #4]
 8010832:	4413      	add	r3, r2
 8010834:	466a      	mov	r2, sp
 8010836:	4293      	cmp	r3, r2
 8010838:	d907      	bls.n	801084a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 801083a:	f000 f875 	bl	8010928 <__errno>
 801083e:	4602      	mov	r2, r0
 8010840:	230c      	movs	r3, #12
 8010842:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8010844:	f04f 33ff 	mov.w	r3, #4294967295
 8010848:	e006      	b.n	8010858 <_sbrk+0x48>
	}

	heap_end += incr;
 801084a:	4b05      	ldr	r3, [pc, #20]	; (8010860 <_sbrk+0x50>)
 801084c:	681a      	ldr	r2, [r3, #0]
 801084e:	687b      	ldr	r3, [r7, #4]
 8010850:	4413      	add	r3, r2
 8010852:	4a03      	ldr	r2, [pc, #12]	; (8010860 <_sbrk+0x50>)
 8010854:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8010856:	68fb      	ldr	r3, [r7, #12]
}
 8010858:	4618      	mov	r0, r3
 801085a:	3710      	adds	r7, #16
 801085c:	46bd      	mov	sp, r7
 801085e:	bd80      	pop	{r7, pc}
 8010860:	20000114 	.word	0x20000114
 8010864:	200015e0 	.word	0x200015e0

08010868 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8010868:	b480      	push	{r7}
 801086a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 801086c:	4b16      	ldr	r3, [pc, #88]	; (80108c8 <SystemInit+0x60>)
 801086e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010872:	4a15      	ldr	r2, [pc, #84]	; (80108c8 <SystemInit+0x60>)
 8010874:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8010878:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 801087c:	4b13      	ldr	r3, [pc, #76]	; (80108cc <SystemInit+0x64>)
 801087e:	681b      	ldr	r3, [r3, #0]
 8010880:	4a12      	ldr	r2, [pc, #72]	; (80108cc <SystemInit+0x64>)
 8010882:	f043 0301 	orr.w	r3, r3, #1
 8010886:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8010888:	4b10      	ldr	r3, [pc, #64]	; (80108cc <SystemInit+0x64>)
 801088a:	2200      	movs	r2, #0
 801088c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 801088e:	4b0f      	ldr	r3, [pc, #60]	; (80108cc <SystemInit+0x64>)
 8010890:	681b      	ldr	r3, [r3, #0]
 8010892:	4a0e      	ldr	r2, [pc, #56]	; (80108cc <SystemInit+0x64>)
 8010894:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8010898:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801089c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 801089e:	4b0b      	ldr	r3, [pc, #44]	; (80108cc <SystemInit+0x64>)
 80108a0:	4a0b      	ldr	r2, [pc, #44]	; (80108d0 <SystemInit+0x68>)
 80108a2:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80108a4:	4b09      	ldr	r3, [pc, #36]	; (80108cc <SystemInit+0x64>)
 80108a6:	681b      	ldr	r3, [r3, #0]
 80108a8:	4a08      	ldr	r2, [pc, #32]	; (80108cc <SystemInit+0x64>)
 80108aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80108ae:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80108b0:	4b06      	ldr	r3, [pc, #24]	; (80108cc <SystemInit+0x64>)
 80108b2:	2200      	movs	r2, #0
 80108b4:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80108b6:	4b04      	ldr	r3, [pc, #16]	; (80108c8 <SystemInit+0x60>)
 80108b8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80108bc:	609a      	str	r2, [r3, #8]
#endif
}
 80108be:	bf00      	nop
 80108c0:	46bd      	mov	sp, r7
 80108c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108c6:	4770      	bx	lr
 80108c8:	e000ed00 	.word	0xe000ed00
 80108cc:	40023800 	.word	0x40023800
 80108d0:	24003010 	.word	0x24003010

080108d4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80108d4:	f8df d034 	ldr.w	sp, [pc, #52]	; 801090c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80108d8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80108da:	e003      	b.n	80108e4 <LoopCopyDataInit>

080108dc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80108dc:	4b0c      	ldr	r3, [pc, #48]	; (8010910 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80108de:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80108e0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80108e2:	3104      	adds	r1, #4

080108e4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80108e4:	480b      	ldr	r0, [pc, #44]	; (8010914 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80108e6:	4b0c      	ldr	r3, [pc, #48]	; (8010918 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80108e8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80108ea:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80108ec:	d3f6      	bcc.n	80108dc <CopyDataInit>
  ldr  r2, =_sbss
 80108ee:	4a0b      	ldr	r2, [pc, #44]	; (801091c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80108f0:	e002      	b.n	80108f8 <LoopFillZerobss>

080108f2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80108f2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80108f4:	f842 3b04 	str.w	r3, [r2], #4

080108f8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80108f8:	4b09      	ldr	r3, [pc, #36]	; (8010920 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80108fa:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80108fc:	d3f9      	bcc.n	80108f2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80108fe:	f7ff ffb3 	bl	8010868 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8010902:	f000 f817 	bl	8010934 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8010906:	f7fb fdd1 	bl	800c4ac <main>
  bx  lr    
 801090a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 801090c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8010910:	08012150 	.word	0x08012150
  ldr  r0, =_sdata
 8010914:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8010918:	200000ec 	.word	0x200000ec
  ldr  r2, =_sbss
 801091c:	200000ec 	.word	0x200000ec
  ldr  r3, = _ebss
 8010920:	200015dc 	.word	0x200015dc

08010924 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8010924:	e7fe      	b.n	8010924 <ADC_IRQHandler>
	...

08010928 <__errno>:
 8010928:	4b01      	ldr	r3, [pc, #4]	; (8010930 <__errno+0x8>)
 801092a:	6818      	ldr	r0, [r3, #0]
 801092c:	4770      	bx	lr
 801092e:	bf00      	nop
 8010930:	20000084 	.word	0x20000084

08010934 <__libc_init_array>:
 8010934:	b570      	push	{r4, r5, r6, lr}
 8010936:	4e0d      	ldr	r6, [pc, #52]	; (801096c <__libc_init_array+0x38>)
 8010938:	4c0d      	ldr	r4, [pc, #52]	; (8010970 <__libc_init_array+0x3c>)
 801093a:	1ba4      	subs	r4, r4, r6
 801093c:	10a4      	asrs	r4, r4, #2
 801093e:	2500      	movs	r5, #0
 8010940:	42a5      	cmp	r5, r4
 8010942:	d109      	bne.n	8010958 <__libc_init_array+0x24>
 8010944:	4e0b      	ldr	r6, [pc, #44]	; (8010974 <__libc_init_array+0x40>)
 8010946:	4c0c      	ldr	r4, [pc, #48]	; (8010978 <__libc_init_array+0x44>)
 8010948:	f001 f932 	bl	8011bb0 <_init>
 801094c:	1ba4      	subs	r4, r4, r6
 801094e:	10a4      	asrs	r4, r4, #2
 8010950:	2500      	movs	r5, #0
 8010952:	42a5      	cmp	r5, r4
 8010954:	d105      	bne.n	8010962 <__libc_init_array+0x2e>
 8010956:	bd70      	pop	{r4, r5, r6, pc}
 8010958:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801095c:	4798      	blx	r3
 801095e:	3501      	adds	r5, #1
 8010960:	e7ee      	b.n	8010940 <__libc_init_array+0xc>
 8010962:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8010966:	4798      	blx	r3
 8010968:	3501      	adds	r5, #1
 801096a:	e7f2      	b.n	8010952 <__libc_init_array+0x1e>
 801096c:	08012148 	.word	0x08012148
 8010970:	08012148 	.word	0x08012148
 8010974:	08012148 	.word	0x08012148
 8010978:	0801214c 	.word	0x0801214c

0801097c <memset>:
 801097c:	4402      	add	r2, r0
 801097e:	4603      	mov	r3, r0
 8010980:	4293      	cmp	r3, r2
 8010982:	d100      	bne.n	8010986 <memset+0xa>
 8010984:	4770      	bx	lr
 8010986:	f803 1b01 	strb.w	r1, [r3], #1
 801098a:	e7f9      	b.n	8010980 <memset+0x4>

0801098c <iprintf>:
 801098c:	b40f      	push	{r0, r1, r2, r3}
 801098e:	4b0a      	ldr	r3, [pc, #40]	; (80109b8 <iprintf+0x2c>)
 8010990:	b513      	push	{r0, r1, r4, lr}
 8010992:	681c      	ldr	r4, [r3, #0]
 8010994:	b124      	cbz	r4, 80109a0 <iprintf+0x14>
 8010996:	69a3      	ldr	r3, [r4, #24]
 8010998:	b913      	cbnz	r3, 80109a0 <iprintf+0x14>
 801099a:	4620      	mov	r0, r4
 801099c:	f000 fad8 	bl	8010f50 <__sinit>
 80109a0:	ab05      	add	r3, sp, #20
 80109a2:	9a04      	ldr	r2, [sp, #16]
 80109a4:	68a1      	ldr	r1, [r4, #8]
 80109a6:	9301      	str	r3, [sp, #4]
 80109a8:	4620      	mov	r0, r4
 80109aa:	f000 fc99 	bl	80112e0 <_vfiprintf_r>
 80109ae:	b002      	add	sp, #8
 80109b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80109b4:	b004      	add	sp, #16
 80109b6:	4770      	bx	lr
 80109b8:	20000084 	.word	0x20000084

080109bc <_puts_r>:
 80109bc:	b570      	push	{r4, r5, r6, lr}
 80109be:	460e      	mov	r6, r1
 80109c0:	4605      	mov	r5, r0
 80109c2:	b118      	cbz	r0, 80109cc <_puts_r+0x10>
 80109c4:	6983      	ldr	r3, [r0, #24]
 80109c6:	b90b      	cbnz	r3, 80109cc <_puts_r+0x10>
 80109c8:	f000 fac2 	bl	8010f50 <__sinit>
 80109cc:	69ab      	ldr	r3, [r5, #24]
 80109ce:	68ac      	ldr	r4, [r5, #8]
 80109d0:	b913      	cbnz	r3, 80109d8 <_puts_r+0x1c>
 80109d2:	4628      	mov	r0, r5
 80109d4:	f000 fabc 	bl	8010f50 <__sinit>
 80109d8:	4b23      	ldr	r3, [pc, #140]	; (8010a68 <_puts_r+0xac>)
 80109da:	429c      	cmp	r4, r3
 80109dc:	d117      	bne.n	8010a0e <_puts_r+0x52>
 80109de:	686c      	ldr	r4, [r5, #4]
 80109e0:	89a3      	ldrh	r3, [r4, #12]
 80109e2:	071b      	lsls	r3, r3, #28
 80109e4:	d51d      	bpl.n	8010a22 <_puts_r+0x66>
 80109e6:	6923      	ldr	r3, [r4, #16]
 80109e8:	b1db      	cbz	r3, 8010a22 <_puts_r+0x66>
 80109ea:	3e01      	subs	r6, #1
 80109ec:	68a3      	ldr	r3, [r4, #8]
 80109ee:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80109f2:	3b01      	subs	r3, #1
 80109f4:	60a3      	str	r3, [r4, #8]
 80109f6:	b9e9      	cbnz	r1, 8010a34 <_puts_r+0x78>
 80109f8:	2b00      	cmp	r3, #0
 80109fa:	da2e      	bge.n	8010a5a <_puts_r+0x9e>
 80109fc:	4622      	mov	r2, r4
 80109fe:	210a      	movs	r1, #10
 8010a00:	4628      	mov	r0, r5
 8010a02:	f000 f8f5 	bl	8010bf0 <__swbuf_r>
 8010a06:	3001      	adds	r0, #1
 8010a08:	d011      	beq.n	8010a2e <_puts_r+0x72>
 8010a0a:	200a      	movs	r0, #10
 8010a0c:	e011      	b.n	8010a32 <_puts_r+0x76>
 8010a0e:	4b17      	ldr	r3, [pc, #92]	; (8010a6c <_puts_r+0xb0>)
 8010a10:	429c      	cmp	r4, r3
 8010a12:	d101      	bne.n	8010a18 <_puts_r+0x5c>
 8010a14:	68ac      	ldr	r4, [r5, #8]
 8010a16:	e7e3      	b.n	80109e0 <_puts_r+0x24>
 8010a18:	4b15      	ldr	r3, [pc, #84]	; (8010a70 <_puts_r+0xb4>)
 8010a1a:	429c      	cmp	r4, r3
 8010a1c:	bf08      	it	eq
 8010a1e:	68ec      	ldreq	r4, [r5, #12]
 8010a20:	e7de      	b.n	80109e0 <_puts_r+0x24>
 8010a22:	4621      	mov	r1, r4
 8010a24:	4628      	mov	r0, r5
 8010a26:	f000 f935 	bl	8010c94 <__swsetup_r>
 8010a2a:	2800      	cmp	r0, #0
 8010a2c:	d0dd      	beq.n	80109ea <_puts_r+0x2e>
 8010a2e:	f04f 30ff 	mov.w	r0, #4294967295
 8010a32:	bd70      	pop	{r4, r5, r6, pc}
 8010a34:	2b00      	cmp	r3, #0
 8010a36:	da04      	bge.n	8010a42 <_puts_r+0x86>
 8010a38:	69a2      	ldr	r2, [r4, #24]
 8010a3a:	429a      	cmp	r2, r3
 8010a3c:	dc06      	bgt.n	8010a4c <_puts_r+0x90>
 8010a3e:	290a      	cmp	r1, #10
 8010a40:	d004      	beq.n	8010a4c <_puts_r+0x90>
 8010a42:	6823      	ldr	r3, [r4, #0]
 8010a44:	1c5a      	adds	r2, r3, #1
 8010a46:	6022      	str	r2, [r4, #0]
 8010a48:	7019      	strb	r1, [r3, #0]
 8010a4a:	e7cf      	b.n	80109ec <_puts_r+0x30>
 8010a4c:	4622      	mov	r2, r4
 8010a4e:	4628      	mov	r0, r5
 8010a50:	f000 f8ce 	bl	8010bf0 <__swbuf_r>
 8010a54:	3001      	adds	r0, #1
 8010a56:	d1c9      	bne.n	80109ec <_puts_r+0x30>
 8010a58:	e7e9      	b.n	8010a2e <_puts_r+0x72>
 8010a5a:	6823      	ldr	r3, [r4, #0]
 8010a5c:	200a      	movs	r0, #10
 8010a5e:	1c5a      	adds	r2, r3, #1
 8010a60:	6022      	str	r2, [r4, #0]
 8010a62:	7018      	strb	r0, [r3, #0]
 8010a64:	e7e5      	b.n	8010a32 <_puts_r+0x76>
 8010a66:	bf00      	nop
 8010a68:	080120c8 	.word	0x080120c8
 8010a6c:	080120e8 	.word	0x080120e8
 8010a70:	080120a8 	.word	0x080120a8

08010a74 <puts>:
 8010a74:	4b02      	ldr	r3, [pc, #8]	; (8010a80 <puts+0xc>)
 8010a76:	4601      	mov	r1, r0
 8010a78:	6818      	ldr	r0, [r3, #0]
 8010a7a:	f7ff bf9f 	b.w	80109bc <_puts_r>
 8010a7e:	bf00      	nop
 8010a80:	20000084 	.word	0x20000084

08010a84 <setbuf>:
 8010a84:	2900      	cmp	r1, #0
 8010a86:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010a8a:	bf0c      	ite	eq
 8010a8c:	2202      	moveq	r2, #2
 8010a8e:	2200      	movne	r2, #0
 8010a90:	f000 b800 	b.w	8010a94 <setvbuf>

08010a94 <setvbuf>:
 8010a94:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8010a98:	461d      	mov	r5, r3
 8010a9a:	4b51      	ldr	r3, [pc, #324]	; (8010be0 <setvbuf+0x14c>)
 8010a9c:	681e      	ldr	r6, [r3, #0]
 8010a9e:	4604      	mov	r4, r0
 8010aa0:	460f      	mov	r7, r1
 8010aa2:	4690      	mov	r8, r2
 8010aa4:	b126      	cbz	r6, 8010ab0 <setvbuf+0x1c>
 8010aa6:	69b3      	ldr	r3, [r6, #24]
 8010aa8:	b913      	cbnz	r3, 8010ab0 <setvbuf+0x1c>
 8010aaa:	4630      	mov	r0, r6
 8010aac:	f000 fa50 	bl	8010f50 <__sinit>
 8010ab0:	4b4c      	ldr	r3, [pc, #304]	; (8010be4 <setvbuf+0x150>)
 8010ab2:	429c      	cmp	r4, r3
 8010ab4:	d152      	bne.n	8010b5c <setvbuf+0xc8>
 8010ab6:	6874      	ldr	r4, [r6, #4]
 8010ab8:	f1b8 0f02 	cmp.w	r8, #2
 8010abc:	d006      	beq.n	8010acc <setvbuf+0x38>
 8010abe:	f1b8 0f01 	cmp.w	r8, #1
 8010ac2:	f200 8089 	bhi.w	8010bd8 <setvbuf+0x144>
 8010ac6:	2d00      	cmp	r5, #0
 8010ac8:	f2c0 8086 	blt.w	8010bd8 <setvbuf+0x144>
 8010acc:	4621      	mov	r1, r4
 8010ace:	4630      	mov	r0, r6
 8010ad0:	f000 f9d4 	bl	8010e7c <_fflush_r>
 8010ad4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010ad6:	b141      	cbz	r1, 8010aea <setvbuf+0x56>
 8010ad8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010adc:	4299      	cmp	r1, r3
 8010ade:	d002      	beq.n	8010ae6 <setvbuf+0x52>
 8010ae0:	4630      	mov	r0, r6
 8010ae2:	f000 fb2b 	bl	801113c <_free_r>
 8010ae6:	2300      	movs	r3, #0
 8010ae8:	6363      	str	r3, [r4, #52]	; 0x34
 8010aea:	2300      	movs	r3, #0
 8010aec:	61a3      	str	r3, [r4, #24]
 8010aee:	6063      	str	r3, [r4, #4]
 8010af0:	89a3      	ldrh	r3, [r4, #12]
 8010af2:	061b      	lsls	r3, r3, #24
 8010af4:	d503      	bpl.n	8010afe <setvbuf+0x6a>
 8010af6:	6921      	ldr	r1, [r4, #16]
 8010af8:	4630      	mov	r0, r6
 8010afa:	f000 fb1f 	bl	801113c <_free_r>
 8010afe:	89a3      	ldrh	r3, [r4, #12]
 8010b00:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8010b04:	f023 0303 	bic.w	r3, r3, #3
 8010b08:	f1b8 0f02 	cmp.w	r8, #2
 8010b0c:	81a3      	strh	r3, [r4, #12]
 8010b0e:	d05d      	beq.n	8010bcc <setvbuf+0x138>
 8010b10:	ab01      	add	r3, sp, #4
 8010b12:	466a      	mov	r2, sp
 8010b14:	4621      	mov	r1, r4
 8010b16:	4630      	mov	r0, r6
 8010b18:	f000 faa4 	bl	8011064 <__swhatbuf_r>
 8010b1c:	89a3      	ldrh	r3, [r4, #12]
 8010b1e:	4318      	orrs	r0, r3
 8010b20:	81a0      	strh	r0, [r4, #12]
 8010b22:	bb2d      	cbnz	r5, 8010b70 <setvbuf+0xdc>
 8010b24:	9d00      	ldr	r5, [sp, #0]
 8010b26:	4628      	mov	r0, r5
 8010b28:	f000 fb00 	bl	801112c <malloc>
 8010b2c:	4607      	mov	r7, r0
 8010b2e:	2800      	cmp	r0, #0
 8010b30:	d14e      	bne.n	8010bd0 <setvbuf+0x13c>
 8010b32:	f8dd 9000 	ldr.w	r9, [sp]
 8010b36:	45a9      	cmp	r9, r5
 8010b38:	d13c      	bne.n	8010bb4 <setvbuf+0x120>
 8010b3a:	f04f 30ff 	mov.w	r0, #4294967295
 8010b3e:	89a3      	ldrh	r3, [r4, #12]
 8010b40:	f043 0302 	orr.w	r3, r3, #2
 8010b44:	81a3      	strh	r3, [r4, #12]
 8010b46:	2300      	movs	r3, #0
 8010b48:	60a3      	str	r3, [r4, #8]
 8010b4a:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8010b4e:	6023      	str	r3, [r4, #0]
 8010b50:	6123      	str	r3, [r4, #16]
 8010b52:	2301      	movs	r3, #1
 8010b54:	6163      	str	r3, [r4, #20]
 8010b56:	b003      	add	sp, #12
 8010b58:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010b5c:	4b22      	ldr	r3, [pc, #136]	; (8010be8 <setvbuf+0x154>)
 8010b5e:	429c      	cmp	r4, r3
 8010b60:	d101      	bne.n	8010b66 <setvbuf+0xd2>
 8010b62:	68b4      	ldr	r4, [r6, #8]
 8010b64:	e7a8      	b.n	8010ab8 <setvbuf+0x24>
 8010b66:	4b21      	ldr	r3, [pc, #132]	; (8010bec <setvbuf+0x158>)
 8010b68:	429c      	cmp	r4, r3
 8010b6a:	bf08      	it	eq
 8010b6c:	68f4      	ldreq	r4, [r6, #12]
 8010b6e:	e7a3      	b.n	8010ab8 <setvbuf+0x24>
 8010b70:	2f00      	cmp	r7, #0
 8010b72:	d0d8      	beq.n	8010b26 <setvbuf+0x92>
 8010b74:	69b3      	ldr	r3, [r6, #24]
 8010b76:	b913      	cbnz	r3, 8010b7e <setvbuf+0xea>
 8010b78:	4630      	mov	r0, r6
 8010b7a:	f000 f9e9 	bl	8010f50 <__sinit>
 8010b7e:	f1b8 0f01 	cmp.w	r8, #1
 8010b82:	bf08      	it	eq
 8010b84:	89a3      	ldrheq	r3, [r4, #12]
 8010b86:	6027      	str	r7, [r4, #0]
 8010b88:	bf04      	itt	eq
 8010b8a:	f043 0301 	orreq.w	r3, r3, #1
 8010b8e:	81a3      	strheq	r3, [r4, #12]
 8010b90:	89a3      	ldrh	r3, [r4, #12]
 8010b92:	f013 0008 	ands.w	r0, r3, #8
 8010b96:	e9c4 7504 	strd	r7, r5, [r4, #16]
 8010b9a:	d01b      	beq.n	8010bd4 <setvbuf+0x140>
 8010b9c:	f013 0001 	ands.w	r0, r3, #1
 8010ba0:	bf18      	it	ne
 8010ba2:	426d      	negne	r5, r5
 8010ba4:	f04f 0300 	mov.w	r3, #0
 8010ba8:	bf1d      	ittte	ne
 8010baa:	60a3      	strne	r3, [r4, #8]
 8010bac:	61a5      	strne	r5, [r4, #24]
 8010bae:	4618      	movne	r0, r3
 8010bb0:	60a5      	streq	r5, [r4, #8]
 8010bb2:	e7d0      	b.n	8010b56 <setvbuf+0xc2>
 8010bb4:	4648      	mov	r0, r9
 8010bb6:	f000 fab9 	bl	801112c <malloc>
 8010bba:	4607      	mov	r7, r0
 8010bbc:	2800      	cmp	r0, #0
 8010bbe:	d0bc      	beq.n	8010b3a <setvbuf+0xa6>
 8010bc0:	89a3      	ldrh	r3, [r4, #12]
 8010bc2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010bc6:	81a3      	strh	r3, [r4, #12]
 8010bc8:	464d      	mov	r5, r9
 8010bca:	e7d3      	b.n	8010b74 <setvbuf+0xe0>
 8010bcc:	2000      	movs	r0, #0
 8010bce:	e7b6      	b.n	8010b3e <setvbuf+0xaa>
 8010bd0:	46a9      	mov	r9, r5
 8010bd2:	e7f5      	b.n	8010bc0 <setvbuf+0x12c>
 8010bd4:	60a0      	str	r0, [r4, #8]
 8010bd6:	e7be      	b.n	8010b56 <setvbuf+0xc2>
 8010bd8:	f04f 30ff 	mov.w	r0, #4294967295
 8010bdc:	e7bb      	b.n	8010b56 <setvbuf+0xc2>
 8010bde:	bf00      	nop
 8010be0:	20000084 	.word	0x20000084
 8010be4:	080120c8 	.word	0x080120c8
 8010be8:	080120e8 	.word	0x080120e8
 8010bec:	080120a8 	.word	0x080120a8

08010bf0 <__swbuf_r>:
 8010bf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010bf2:	460e      	mov	r6, r1
 8010bf4:	4614      	mov	r4, r2
 8010bf6:	4605      	mov	r5, r0
 8010bf8:	b118      	cbz	r0, 8010c02 <__swbuf_r+0x12>
 8010bfa:	6983      	ldr	r3, [r0, #24]
 8010bfc:	b90b      	cbnz	r3, 8010c02 <__swbuf_r+0x12>
 8010bfe:	f000 f9a7 	bl	8010f50 <__sinit>
 8010c02:	4b21      	ldr	r3, [pc, #132]	; (8010c88 <__swbuf_r+0x98>)
 8010c04:	429c      	cmp	r4, r3
 8010c06:	d12a      	bne.n	8010c5e <__swbuf_r+0x6e>
 8010c08:	686c      	ldr	r4, [r5, #4]
 8010c0a:	69a3      	ldr	r3, [r4, #24]
 8010c0c:	60a3      	str	r3, [r4, #8]
 8010c0e:	89a3      	ldrh	r3, [r4, #12]
 8010c10:	071a      	lsls	r2, r3, #28
 8010c12:	d52e      	bpl.n	8010c72 <__swbuf_r+0x82>
 8010c14:	6923      	ldr	r3, [r4, #16]
 8010c16:	b363      	cbz	r3, 8010c72 <__swbuf_r+0x82>
 8010c18:	6923      	ldr	r3, [r4, #16]
 8010c1a:	6820      	ldr	r0, [r4, #0]
 8010c1c:	1ac0      	subs	r0, r0, r3
 8010c1e:	6963      	ldr	r3, [r4, #20]
 8010c20:	b2f6      	uxtb	r6, r6
 8010c22:	4283      	cmp	r3, r0
 8010c24:	4637      	mov	r7, r6
 8010c26:	dc04      	bgt.n	8010c32 <__swbuf_r+0x42>
 8010c28:	4621      	mov	r1, r4
 8010c2a:	4628      	mov	r0, r5
 8010c2c:	f000 f926 	bl	8010e7c <_fflush_r>
 8010c30:	bb28      	cbnz	r0, 8010c7e <__swbuf_r+0x8e>
 8010c32:	68a3      	ldr	r3, [r4, #8]
 8010c34:	3b01      	subs	r3, #1
 8010c36:	60a3      	str	r3, [r4, #8]
 8010c38:	6823      	ldr	r3, [r4, #0]
 8010c3a:	1c5a      	adds	r2, r3, #1
 8010c3c:	6022      	str	r2, [r4, #0]
 8010c3e:	701e      	strb	r6, [r3, #0]
 8010c40:	6963      	ldr	r3, [r4, #20]
 8010c42:	3001      	adds	r0, #1
 8010c44:	4283      	cmp	r3, r0
 8010c46:	d004      	beq.n	8010c52 <__swbuf_r+0x62>
 8010c48:	89a3      	ldrh	r3, [r4, #12]
 8010c4a:	07db      	lsls	r3, r3, #31
 8010c4c:	d519      	bpl.n	8010c82 <__swbuf_r+0x92>
 8010c4e:	2e0a      	cmp	r6, #10
 8010c50:	d117      	bne.n	8010c82 <__swbuf_r+0x92>
 8010c52:	4621      	mov	r1, r4
 8010c54:	4628      	mov	r0, r5
 8010c56:	f000 f911 	bl	8010e7c <_fflush_r>
 8010c5a:	b190      	cbz	r0, 8010c82 <__swbuf_r+0x92>
 8010c5c:	e00f      	b.n	8010c7e <__swbuf_r+0x8e>
 8010c5e:	4b0b      	ldr	r3, [pc, #44]	; (8010c8c <__swbuf_r+0x9c>)
 8010c60:	429c      	cmp	r4, r3
 8010c62:	d101      	bne.n	8010c68 <__swbuf_r+0x78>
 8010c64:	68ac      	ldr	r4, [r5, #8]
 8010c66:	e7d0      	b.n	8010c0a <__swbuf_r+0x1a>
 8010c68:	4b09      	ldr	r3, [pc, #36]	; (8010c90 <__swbuf_r+0xa0>)
 8010c6a:	429c      	cmp	r4, r3
 8010c6c:	bf08      	it	eq
 8010c6e:	68ec      	ldreq	r4, [r5, #12]
 8010c70:	e7cb      	b.n	8010c0a <__swbuf_r+0x1a>
 8010c72:	4621      	mov	r1, r4
 8010c74:	4628      	mov	r0, r5
 8010c76:	f000 f80d 	bl	8010c94 <__swsetup_r>
 8010c7a:	2800      	cmp	r0, #0
 8010c7c:	d0cc      	beq.n	8010c18 <__swbuf_r+0x28>
 8010c7e:	f04f 37ff 	mov.w	r7, #4294967295
 8010c82:	4638      	mov	r0, r7
 8010c84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010c86:	bf00      	nop
 8010c88:	080120c8 	.word	0x080120c8
 8010c8c:	080120e8 	.word	0x080120e8
 8010c90:	080120a8 	.word	0x080120a8

08010c94 <__swsetup_r>:
 8010c94:	4b32      	ldr	r3, [pc, #200]	; (8010d60 <__swsetup_r+0xcc>)
 8010c96:	b570      	push	{r4, r5, r6, lr}
 8010c98:	681d      	ldr	r5, [r3, #0]
 8010c9a:	4606      	mov	r6, r0
 8010c9c:	460c      	mov	r4, r1
 8010c9e:	b125      	cbz	r5, 8010caa <__swsetup_r+0x16>
 8010ca0:	69ab      	ldr	r3, [r5, #24]
 8010ca2:	b913      	cbnz	r3, 8010caa <__swsetup_r+0x16>
 8010ca4:	4628      	mov	r0, r5
 8010ca6:	f000 f953 	bl	8010f50 <__sinit>
 8010caa:	4b2e      	ldr	r3, [pc, #184]	; (8010d64 <__swsetup_r+0xd0>)
 8010cac:	429c      	cmp	r4, r3
 8010cae:	d10f      	bne.n	8010cd0 <__swsetup_r+0x3c>
 8010cb0:	686c      	ldr	r4, [r5, #4]
 8010cb2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010cb6:	b29a      	uxth	r2, r3
 8010cb8:	0715      	lsls	r5, r2, #28
 8010cba:	d42c      	bmi.n	8010d16 <__swsetup_r+0x82>
 8010cbc:	06d0      	lsls	r0, r2, #27
 8010cbe:	d411      	bmi.n	8010ce4 <__swsetup_r+0x50>
 8010cc0:	2209      	movs	r2, #9
 8010cc2:	6032      	str	r2, [r6, #0]
 8010cc4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010cc8:	81a3      	strh	r3, [r4, #12]
 8010cca:	f04f 30ff 	mov.w	r0, #4294967295
 8010cce:	e03e      	b.n	8010d4e <__swsetup_r+0xba>
 8010cd0:	4b25      	ldr	r3, [pc, #148]	; (8010d68 <__swsetup_r+0xd4>)
 8010cd2:	429c      	cmp	r4, r3
 8010cd4:	d101      	bne.n	8010cda <__swsetup_r+0x46>
 8010cd6:	68ac      	ldr	r4, [r5, #8]
 8010cd8:	e7eb      	b.n	8010cb2 <__swsetup_r+0x1e>
 8010cda:	4b24      	ldr	r3, [pc, #144]	; (8010d6c <__swsetup_r+0xd8>)
 8010cdc:	429c      	cmp	r4, r3
 8010cde:	bf08      	it	eq
 8010ce0:	68ec      	ldreq	r4, [r5, #12]
 8010ce2:	e7e6      	b.n	8010cb2 <__swsetup_r+0x1e>
 8010ce4:	0751      	lsls	r1, r2, #29
 8010ce6:	d512      	bpl.n	8010d0e <__swsetup_r+0x7a>
 8010ce8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010cea:	b141      	cbz	r1, 8010cfe <__swsetup_r+0x6a>
 8010cec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010cf0:	4299      	cmp	r1, r3
 8010cf2:	d002      	beq.n	8010cfa <__swsetup_r+0x66>
 8010cf4:	4630      	mov	r0, r6
 8010cf6:	f000 fa21 	bl	801113c <_free_r>
 8010cfa:	2300      	movs	r3, #0
 8010cfc:	6363      	str	r3, [r4, #52]	; 0x34
 8010cfe:	89a3      	ldrh	r3, [r4, #12]
 8010d00:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8010d04:	81a3      	strh	r3, [r4, #12]
 8010d06:	2300      	movs	r3, #0
 8010d08:	6063      	str	r3, [r4, #4]
 8010d0a:	6923      	ldr	r3, [r4, #16]
 8010d0c:	6023      	str	r3, [r4, #0]
 8010d0e:	89a3      	ldrh	r3, [r4, #12]
 8010d10:	f043 0308 	orr.w	r3, r3, #8
 8010d14:	81a3      	strh	r3, [r4, #12]
 8010d16:	6923      	ldr	r3, [r4, #16]
 8010d18:	b94b      	cbnz	r3, 8010d2e <__swsetup_r+0x9a>
 8010d1a:	89a3      	ldrh	r3, [r4, #12]
 8010d1c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8010d20:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010d24:	d003      	beq.n	8010d2e <__swsetup_r+0x9a>
 8010d26:	4621      	mov	r1, r4
 8010d28:	4630      	mov	r0, r6
 8010d2a:	f000 f9bf 	bl	80110ac <__smakebuf_r>
 8010d2e:	89a2      	ldrh	r2, [r4, #12]
 8010d30:	f012 0301 	ands.w	r3, r2, #1
 8010d34:	d00c      	beq.n	8010d50 <__swsetup_r+0xbc>
 8010d36:	2300      	movs	r3, #0
 8010d38:	60a3      	str	r3, [r4, #8]
 8010d3a:	6963      	ldr	r3, [r4, #20]
 8010d3c:	425b      	negs	r3, r3
 8010d3e:	61a3      	str	r3, [r4, #24]
 8010d40:	6923      	ldr	r3, [r4, #16]
 8010d42:	b953      	cbnz	r3, 8010d5a <__swsetup_r+0xc6>
 8010d44:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010d48:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8010d4c:	d1ba      	bne.n	8010cc4 <__swsetup_r+0x30>
 8010d4e:	bd70      	pop	{r4, r5, r6, pc}
 8010d50:	0792      	lsls	r2, r2, #30
 8010d52:	bf58      	it	pl
 8010d54:	6963      	ldrpl	r3, [r4, #20]
 8010d56:	60a3      	str	r3, [r4, #8]
 8010d58:	e7f2      	b.n	8010d40 <__swsetup_r+0xac>
 8010d5a:	2000      	movs	r0, #0
 8010d5c:	e7f7      	b.n	8010d4e <__swsetup_r+0xba>
 8010d5e:	bf00      	nop
 8010d60:	20000084 	.word	0x20000084
 8010d64:	080120c8 	.word	0x080120c8
 8010d68:	080120e8 	.word	0x080120e8
 8010d6c:	080120a8 	.word	0x080120a8

08010d70 <__sflush_r>:
 8010d70:	898a      	ldrh	r2, [r1, #12]
 8010d72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010d76:	4605      	mov	r5, r0
 8010d78:	0710      	lsls	r0, r2, #28
 8010d7a:	460c      	mov	r4, r1
 8010d7c:	d458      	bmi.n	8010e30 <__sflush_r+0xc0>
 8010d7e:	684b      	ldr	r3, [r1, #4]
 8010d80:	2b00      	cmp	r3, #0
 8010d82:	dc05      	bgt.n	8010d90 <__sflush_r+0x20>
 8010d84:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8010d86:	2b00      	cmp	r3, #0
 8010d88:	dc02      	bgt.n	8010d90 <__sflush_r+0x20>
 8010d8a:	2000      	movs	r0, #0
 8010d8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010d90:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010d92:	2e00      	cmp	r6, #0
 8010d94:	d0f9      	beq.n	8010d8a <__sflush_r+0x1a>
 8010d96:	2300      	movs	r3, #0
 8010d98:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8010d9c:	682f      	ldr	r7, [r5, #0]
 8010d9e:	6a21      	ldr	r1, [r4, #32]
 8010da0:	602b      	str	r3, [r5, #0]
 8010da2:	d032      	beq.n	8010e0a <__sflush_r+0x9a>
 8010da4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8010da6:	89a3      	ldrh	r3, [r4, #12]
 8010da8:	075a      	lsls	r2, r3, #29
 8010daa:	d505      	bpl.n	8010db8 <__sflush_r+0x48>
 8010dac:	6863      	ldr	r3, [r4, #4]
 8010dae:	1ac0      	subs	r0, r0, r3
 8010db0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8010db2:	b10b      	cbz	r3, 8010db8 <__sflush_r+0x48>
 8010db4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8010db6:	1ac0      	subs	r0, r0, r3
 8010db8:	2300      	movs	r3, #0
 8010dba:	4602      	mov	r2, r0
 8010dbc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010dbe:	6a21      	ldr	r1, [r4, #32]
 8010dc0:	4628      	mov	r0, r5
 8010dc2:	47b0      	blx	r6
 8010dc4:	1c43      	adds	r3, r0, #1
 8010dc6:	89a3      	ldrh	r3, [r4, #12]
 8010dc8:	d106      	bne.n	8010dd8 <__sflush_r+0x68>
 8010dca:	6829      	ldr	r1, [r5, #0]
 8010dcc:	291d      	cmp	r1, #29
 8010dce:	d848      	bhi.n	8010e62 <__sflush_r+0xf2>
 8010dd0:	4a29      	ldr	r2, [pc, #164]	; (8010e78 <__sflush_r+0x108>)
 8010dd2:	40ca      	lsrs	r2, r1
 8010dd4:	07d6      	lsls	r6, r2, #31
 8010dd6:	d544      	bpl.n	8010e62 <__sflush_r+0xf2>
 8010dd8:	2200      	movs	r2, #0
 8010dda:	6062      	str	r2, [r4, #4]
 8010ddc:	04d9      	lsls	r1, r3, #19
 8010dde:	6922      	ldr	r2, [r4, #16]
 8010de0:	6022      	str	r2, [r4, #0]
 8010de2:	d504      	bpl.n	8010dee <__sflush_r+0x7e>
 8010de4:	1c42      	adds	r2, r0, #1
 8010de6:	d101      	bne.n	8010dec <__sflush_r+0x7c>
 8010de8:	682b      	ldr	r3, [r5, #0]
 8010dea:	b903      	cbnz	r3, 8010dee <__sflush_r+0x7e>
 8010dec:	6560      	str	r0, [r4, #84]	; 0x54
 8010dee:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010df0:	602f      	str	r7, [r5, #0]
 8010df2:	2900      	cmp	r1, #0
 8010df4:	d0c9      	beq.n	8010d8a <__sflush_r+0x1a>
 8010df6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010dfa:	4299      	cmp	r1, r3
 8010dfc:	d002      	beq.n	8010e04 <__sflush_r+0x94>
 8010dfe:	4628      	mov	r0, r5
 8010e00:	f000 f99c 	bl	801113c <_free_r>
 8010e04:	2000      	movs	r0, #0
 8010e06:	6360      	str	r0, [r4, #52]	; 0x34
 8010e08:	e7c0      	b.n	8010d8c <__sflush_r+0x1c>
 8010e0a:	2301      	movs	r3, #1
 8010e0c:	4628      	mov	r0, r5
 8010e0e:	47b0      	blx	r6
 8010e10:	1c41      	adds	r1, r0, #1
 8010e12:	d1c8      	bne.n	8010da6 <__sflush_r+0x36>
 8010e14:	682b      	ldr	r3, [r5, #0]
 8010e16:	2b00      	cmp	r3, #0
 8010e18:	d0c5      	beq.n	8010da6 <__sflush_r+0x36>
 8010e1a:	2b1d      	cmp	r3, #29
 8010e1c:	d001      	beq.n	8010e22 <__sflush_r+0xb2>
 8010e1e:	2b16      	cmp	r3, #22
 8010e20:	d101      	bne.n	8010e26 <__sflush_r+0xb6>
 8010e22:	602f      	str	r7, [r5, #0]
 8010e24:	e7b1      	b.n	8010d8a <__sflush_r+0x1a>
 8010e26:	89a3      	ldrh	r3, [r4, #12]
 8010e28:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010e2c:	81a3      	strh	r3, [r4, #12]
 8010e2e:	e7ad      	b.n	8010d8c <__sflush_r+0x1c>
 8010e30:	690f      	ldr	r7, [r1, #16]
 8010e32:	2f00      	cmp	r7, #0
 8010e34:	d0a9      	beq.n	8010d8a <__sflush_r+0x1a>
 8010e36:	0793      	lsls	r3, r2, #30
 8010e38:	680e      	ldr	r6, [r1, #0]
 8010e3a:	bf08      	it	eq
 8010e3c:	694b      	ldreq	r3, [r1, #20]
 8010e3e:	600f      	str	r7, [r1, #0]
 8010e40:	bf18      	it	ne
 8010e42:	2300      	movne	r3, #0
 8010e44:	eba6 0807 	sub.w	r8, r6, r7
 8010e48:	608b      	str	r3, [r1, #8]
 8010e4a:	f1b8 0f00 	cmp.w	r8, #0
 8010e4e:	dd9c      	ble.n	8010d8a <__sflush_r+0x1a>
 8010e50:	4643      	mov	r3, r8
 8010e52:	463a      	mov	r2, r7
 8010e54:	6a21      	ldr	r1, [r4, #32]
 8010e56:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8010e58:	4628      	mov	r0, r5
 8010e5a:	47b0      	blx	r6
 8010e5c:	2800      	cmp	r0, #0
 8010e5e:	dc06      	bgt.n	8010e6e <__sflush_r+0xfe>
 8010e60:	89a3      	ldrh	r3, [r4, #12]
 8010e62:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010e66:	81a3      	strh	r3, [r4, #12]
 8010e68:	f04f 30ff 	mov.w	r0, #4294967295
 8010e6c:	e78e      	b.n	8010d8c <__sflush_r+0x1c>
 8010e6e:	4407      	add	r7, r0
 8010e70:	eba8 0800 	sub.w	r8, r8, r0
 8010e74:	e7e9      	b.n	8010e4a <__sflush_r+0xda>
 8010e76:	bf00      	nop
 8010e78:	20400001 	.word	0x20400001

08010e7c <_fflush_r>:
 8010e7c:	b538      	push	{r3, r4, r5, lr}
 8010e7e:	690b      	ldr	r3, [r1, #16]
 8010e80:	4605      	mov	r5, r0
 8010e82:	460c      	mov	r4, r1
 8010e84:	b1db      	cbz	r3, 8010ebe <_fflush_r+0x42>
 8010e86:	b118      	cbz	r0, 8010e90 <_fflush_r+0x14>
 8010e88:	6983      	ldr	r3, [r0, #24]
 8010e8a:	b90b      	cbnz	r3, 8010e90 <_fflush_r+0x14>
 8010e8c:	f000 f860 	bl	8010f50 <__sinit>
 8010e90:	4b0c      	ldr	r3, [pc, #48]	; (8010ec4 <_fflush_r+0x48>)
 8010e92:	429c      	cmp	r4, r3
 8010e94:	d109      	bne.n	8010eaa <_fflush_r+0x2e>
 8010e96:	686c      	ldr	r4, [r5, #4]
 8010e98:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010e9c:	b17b      	cbz	r3, 8010ebe <_fflush_r+0x42>
 8010e9e:	4621      	mov	r1, r4
 8010ea0:	4628      	mov	r0, r5
 8010ea2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010ea6:	f7ff bf63 	b.w	8010d70 <__sflush_r>
 8010eaa:	4b07      	ldr	r3, [pc, #28]	; (8010ec8 <_fflush_r+0x4c>)
 8010eac:	429c      	cmp	r4, r3
 8010eae:	d101      	bne.n	8010eb4 <_fflush_r+0x38>
 8010eb0:	68ac      	ldr	r4, [r5, #8]
 8010eb2:	e7f1      	b.n	8010e98 <_fflush_r+0x1c>
 8010eb4:	4b05      	ldr	r3, [pc, #20]	; (8010ecc <_fflush_r+0x50>)
 8010eb6:	429c      	cmp	r4, r3
 8010eb8:	bf08      	it	eq
 8010eba:	68ec      	ldreq	r4, [r5, #12]
 8010ebc:	e7ec      	b.n	8010e98 <_fflush_r+0x1c>
 8010ebe:	2000      	movs	r0, #0
 8010ec0:	bd38      	pop	{r3, r4, r5, pc}
 8010ec2:	bf00      	nop
 8010ec4:	080120c8 	.word	0x080120c8
 8010ec8:	080120e8 	.word	0x080120e8
 8010ecc:	080120a8 	.word	0x080120a8

08010ed0 <std>:
 8010ed0:	2300      	movs	r3, #0
 8010ed2:	b510      	push	{r4, lr}
 8010ed4:	4604      	mov	r4, r0
 8010ed6:	e9c0 3300 	strd	r3, r3, [r0]
 8010eda:	6083      	str	r3, [r0, #8]
 8010edc:	8181      	strh	r1, [r0, #12]
 8010ede:	6643      	str	r3, [r0, #100]	; 0x64
 8010ee0:	81c2      	strh	r2, [r0, #14]
 8010ee2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8010ee6:	6183      	str	r3, [r0, #24]
 8010ee8:	4619      	mov	r1, r3
 8010eea:	2208      	movs	r2, #8
 8010eec:	305c      	adds	r0, #92	; 0x5c
 8010eee:	f7ff fd45 	bl	801097c <memset>
 8010ef2:	4b05      	ldr	r3, [pc, #20]	; (8010f08 <std+0x38>)
 8010ef4:	6263      	str	r3, [r4, #36]	; 0x24
 8010ef6:	4b05      	ldr	r3, [pc, #20]	; (8010f0c <std+0x3c>)
 8010ef8:	62a3      	str	r3, [r4, #40]	; 0x28
 8010efa:	4b05      	ldr	r3, [pc, #20]	; (8010f10 <std+0x40>)
 8010efc:	62e3      	str	r3, [r4, #44]	; 0x2c
 8010efe:	4b05      	ldr	r3, [pc, #20]	; (8010f14 <std+0x44>)
 8010f00:	6224      	str	r4, [r4, #32]
 8010f02:	6323      	str	r3, [r4, #48]	; 0x30
 8010f04:	bd10      	pop	{r4, pc}
 8010f06:	bf00      	nop
 8010f08:	0801183d 	.word	0x0801183d
 8010f0c:	0801185f 	.word	0x0801185f
 8010f10:	08011897 	.word	0x08011897
 8010f14:	080118bb 	.word	0x080118bb

08010f18 <_cleanup_r>:
 8010f18:	4901      	ldr	r1, [pc, #4]	; (8010f20 <_cleanup_r+0x8>)
 8010f1a:	f000 b885 	b.w	8011028 <_fwalk_reent>
 8010f1e:	bf00      	nop
 8010f20:	08010e7d 	.word	0x08010e7d

08010f24 <__sfmoreglue>:
 8010f24:	b570      	push	{r4, r5, r6, lr}
 8010f26:	1e4a      	subs	r2, r1, #1
 8010f28:	2568      	movs	r5, #104	; 0x68
 8010f2a:	4355      	muls	r5, r2
 8010f2c:	460e      	mov	r6, r1
 8010f2e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8010f32:	f000 f951 	bl	80111d8 <_malloc_r>
 8010f36:	4604      	mov	r4, r0
 8010f38:	b140      	cbz	r0, 8010f4c <__sfmoreglue+0x28>
 8010f3a:	2100      	movs	r1, #0
 8010f3c:	e9c0 1600 	strd	r1, r6, [r0]
 8010f40:	300c      	adds	r0, #12
 8010f42:	60a0      	str	r0, [r4, #8]
 8010f44:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8010f48:	f7ff fd18 	bl	801097c <memset>
 8010f4c:	4620      	mov	r0, r4
 8010f4e:	bd70      	pop	{r4, r5, r6, pc}

08010f50 <__sinit>:
 8010f50:	6983      	ldr	r3, [r0, #24]
 8010f52:	b510      	push	{r4, lr}
 8010f54:	4604      	mov	r4, r0
 8010f56:	bb33      	cbnz	r3, 8010fa6 <__sinit+0x56>
 8010f58:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8010f5c:	6503      	str	r3, [r0, #80]	; 0x50
 8010f5e:	4b12      	ldr	r3, [pc, #72]	; (8010fa8 <__sinit+0x58>)
 8010f60:	4a12      	ldr	r2, [pc, #72]	; (8010fac <__sinit+0x5c>)
 8010f62:	681b      	ldr	r3, [r3, #0]
 8010f64:	6282      	str	r2, [r0, #40]	; 0x28
 8010f66:	4298      	cmp	r0, r3
 8010f68:	bf04      	itt	eq
 8010f6a:	2301      	moveq	r3, #1
 8010f6c:	6183      	streq	r3, [r0, #24]
 8010f6e:	f000 f81f 	bl	8010fb0 <__sfp>
 8010f72:	6060      	str	r0, [r4, #4]
 8010f74:	4620      	mov	r0, r4
 8010f76:	f000 f81b 	bl	8010fb0 <__sfp>
 8010f7a:	60a0      	str	r0, [r4, #8]
 8010f7c:	4620      	mov	r0, r4
 8010f7e:	f000 f817 	bl	8010fb0 <__sfp>
 8010f82:	2200      	movs	r2, #0
 8010f84:	60e0      	str	r0, [r4, #12]
 8010f86:	2104      	movs	r1, #4
 8010f88:	6860      	ldr	r0, [r4, #4]
 8010f8a:	f7ff ffa1 	bl	8010ed0 <std>
 8010f8e:	2201      	movs	r2, #1
 8010f90:	2109      	movs	r1, #9
 8010f92:	68a0      	ldr	r0, [r4, #8]
 8010f94:	f7ff ff9c 	bl	8010ed0 <std>
 8010f98:	2202      	movs	r2, #2
 8010f9a:	2112      	movs	r1, #18
 8010f9c:	68e0      	ldr	r0, [r4, #12]
 8010f9e:	f7ff ff97 	bl	8010ed0 <std>
 8010fa2:	2301      	movs	r3, #1
 8010fa4:	61a3      	str	r3, [r4, #24]
 8010fa6:	bd10      	pop	{r4, pc}
 8010fa8:	080120a4 	.word	0x080120a4
 8010fac:	08010f19 	.word	0x08010f19

08010fb0 <__sfp>:
 8010fb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010fb2:	4b1b      	ldr	r3, [pc, #108]	; (8011020 <__sfp+0x70>)
 8010fb4:	681e      	ldr	r6, [r3, #0]
 8010fb6:	69b3      	ldr	r3, [r6, #24]
 8010fb8:	4607      	mov	r7, r0
 8010fba:	b913      	cbnz	r3, 8010fc2 <__sfp+0x12>
 8010fbc:	4630      	mov	r0, r6
 8010fbe:	f7ff ffc7 	bl	8010f50 <__sinit>
 8010fc2:	3648      	adds	r6, #72	; 0x48
 8010fc4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8010fc8:	3b01      	subs	r3, #1
 8010fca:	d503      	bpl.n	8010fd4 <__sfp+0x24>
 8010fcc:	6833      	ldr	r3, [r6, #0]
 8010fce:	b133      	cbz	r3, 8010fde <__sfp+0x2e>
 8010fd0:	6836      	ldr	r6, [r6, #0]
 8010fd2:	e7f7      	b.n	8010fc4 <__sfp+0x14>
 8010fd4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8010fd8:	b16d      	cbz	r5, 8010ff6 <__sfp+0x46>
 8010fda:	3468      	adds	r4, #104	; 0x68
 8010fdc:	e7f4      	b.n	8010fc8 <__sfp+0x18>
 8010fde:	2104      	movs	r1, #4
 8010fe0:	4638      	mov	r0, r7
 8010fe2:	f7ff ff9f 	bl	8010f24 <__sfmoreglue>
 8010fe6:	6030      	str	r0, [r6, #0]
 8010fe8:	2800      	cmp	r0, #0
 8010fea:	d1f1      	bne.n	8010fd0 <__sfp+0x20>
 8010fec:	230c      	movs	r3, #12
 8010fee:	603b      	str	r3, [r7, #0]
 8010ff0:	4604      	mov	r4, r0
 8010ff2:	4620      	mov	r0, r4
 8010ff4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010ff6:	4b0b      	ldr	r3, [pc, #44]	; (8011024 <__sfp+0x74>)
 8010ff8:	6665      	str	r5, [r4, #100]	; 0x64
 8010ffa:	e9c4 5500 	strd	r5, r5, [r4]
 8010ffe:	60a5      	str	r5, [r4, #8]
 8011000:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8011004:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8011008:	2208      	movs	r2, #8
 801100a:	4629      	mov	r1, r5
 801100c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8011010:	f7ff fcb4 	bl	801097c <memset>
 8011014:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8011018:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801101c:	e7e9      	b.n	8010ff2 <__sfp+0x42>
 801101e:	bf00      	nop
 8011020:	080120a4 	.word	0x080120a4
 8011024:	ffff0001 	.word	0xffff0001

08011028 <_fwalk_reent>:
 8011028:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801102c:	4680      	mov	r8, r0
 801102e:	4689      	mov	r9, r1
 8011030:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8011034:	2600      	movs	r6, #0
 8011036:	b914      	cbnz	r4, 801103e <_fwalk_reent+0x16>
 8011038:	4630      	mov	r0, r6
 801103a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801103e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8011042:	3f01      	subs	r7, #1
 8011044:	d501      	bpl.n	801104a <_fwalk_reent+0x22>
 8011046:	6824      	ldr	r4, [r4, #0]
 8011048:	e7f5      	b.n	8011036 <_fwalk_reent+0xe>
 801104a:	89ab      	ldrh	r3, [r5, #12]
 801104c:	2b01      	cmp	r3, #1
 801104e:	d907      	bls.n	8011060 <_fwalk_reent+0x38>
 8011050:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8011054:	3301      	adds	r3, #1
 8011056:	d003      	beq.n	8011060 <_fwalk_reent+0x38>
 8011058:	4629      	mov	r1, r5
 801105a:	4640      	mov	r0, r8
 801105c:	47c8      	blx	r9
 801105e:	4306      	orrs	r6, r0
 8011060:	3568      	adds	r5, #104	; 0x68
 8011062:	e7ee      	b.n	8011042 <_fwalk_reent+0x1a>

08011064 <__swhatbuf_r>:
 8011064:	b570      	push	{r4, r5, r6, lr}
 8011066:	460e      	mov	r6, r1
 8011068:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801106c:	2900      	cmp	r1, #0
 801106e:	b096      	sub	sp, #88	; 0x58
 8011070:	4614      	mov	r4, r2
 8011072:	461d      	mov	r5, r3
 8011074:	da07      	bge.n	8011086 <__swhatbuf_r+0x22>
 8011076:	2300      	movs	r3, #0
 8011078:	602b      	str	r3, [r5, #0]
 801107a:	89b3      	ldrh	r3, [r6, #12]
 801107c:	061a      	lsls	r2, r3, #24
 801107e:	d410      	bmi.n	80110a2 <__swhatbuf_r+0x3e>
 8011080:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011084:	e00e      	b.n	80110a4 <__swhatbuf_r+0x40>
 8011086:	466a      	mov	r2, sp
 8011088:	f000 fc3e 	bl	8011908 <_fstat_r>
 801108c:	2800      	cmp	r0, #0
 801108e:	dbf2      	blt.n	8011076 <__swhatbuf_r+0x12>
 8011090:	9a01      	ldr	r2, [sp, #4]
 8011092:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8011096:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801109a:	425a      	negs	r2, r3
 801109c:	415a      	adcs	r2, r3
 801109e:	602a      	str	r2, [r5, #0]
 80110a0:	e7ee      	b.n	8011080 <__swhatbuf_r+0x1c>
 80110a2:	2340      	movs	r3, #64	; 0x40
 80110a4:	2000      	movs	r0, #0
 80110a6:	6023      	str	r3, [r4, #0]
 80110a8:	b016      	add	sp, #88	; 0x58
 80110aa:	bd70      	pop	{r4, r5, r6, pc}

080110ac <__smakebuf_r>:
 80110ac:	898b      	ldrh	r3, [r1, #12]
 80110ae:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80110b0:	079d      	lsls	r5, r3, #30
 80110b2:	4606      	mov	r6, r0
 80110b4:	460c      	mov	r4, r1
 80110b6:	d507      	bpl.n	80110c8 <__smakebuf_r+0x1c>
 80110b8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80110bc:	6023      	str	r3, [r4, #0]
 80110be:	6123      	str	r3, [r4, #16]
 80110c0:	2301      	movs	r3, #1
 80110c2:	6163      	str	r3, [r4, #20]
 80110c4:	b002      	add	sp, #8
 80110c6:	bd70      	pop	{r4, r5, r6, pc}
 80110c8:	ab01      	add	r3, sp, #4
 80110ca:	466a      	mov	r2, sp
 80110cc:	f7ff ffca 	bl	8011064 <__swhatbuf_r>
 80110d0:	9900      	ldr	r1, [sp, #0]
 80110d2:	4605      	mov	r5, r0
 80110d4:	4630      	mov	r0, r6
 80110d6:	f000 f87f 	bl	80111d8 <_malloc_r>
 80110da:	b948      	cbnz	r0, 80110f0 <__smakebuf_r+0x44>
 80110dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80110e0:	059a      	lsls	r2, r3, #22
 80110e2:	d4ef      	bmi.n	80110c4 <__smakebuf_r+0x18>
 80110e4:	f023 0303 	bic.w	r3, r3, #3
 80110e8:	f043 0302 	orr.w	r3, r3, #2
 80110ec:	81a3      	strh	r3, [r4, #12]
 80110ee:	e7e3      	b.n	80110b8 <__smakebuf_r+0xc>
 80110f0:	4b0d      	ldr	r3, [pc, #52]	; (8011128 <__smakebuf_r+0x7c>)
 80110f2:	62b3      	str	r3, [r6, #40]	; 0x28
 80110f4:	89a3      	ldrh	r3, [r4, #12]
 80110f6:	6020      	str	r0, [r4, #0]
 80110f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80110fc:	81a3      	strh	r3, [r4, #12]
 80110fe:	9b00      	ldr	r3, [sp, #0]
 8011100:	6163      	str	r3, [r4, #20]
 8011102:	9b01      	ldr	r3, [sp, #4]
 8011104:	6120      	str	r0, [r4, #16]
 8011106:	b15b      	cbz	r3, 8011120 <__smakebuf_r+0x74>
 8011108:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801110c:	4630      	mov	r0, r6
 801110e:	f000 fc0d 	bl	801192c <_isatty_r>
 8011112:	b128      	cbz	r0, 8011120 <__smakebuf_r+0x74>
 8011114:	89a3      	ldrh	r3, [r4, #12]
 8011116:	f023 0303 	bic.w	r3, r3, #3
 801111a:	f043 0301 	orr.w	r3, r3, #1
 801111e:	81a3      	strh	r3, [r4, #12]
 8011120:	89a3      	ldrh	r3, [r4, #12]
 8011122:	431d      	orrs	r5, r3
 8011124:	81a5      	strh	r5, [r4, #12]
 8011126:	e7cd      	b.n	80110c4 <__smakebuf_r+0x18>
 8011128:	08010f19 	.word	0x08010f19

0801112c <malloc>:
 801112c:	4b02      	ldr	r3, [pc, #8]	; (8011138 <malloc+0xc>)
 801112e:	4601      	mov	r1, r0
 8011130:	6818      	ldr	r0, [r3, #0]
 8011132:	f000 b851 	b.w	80111d8 <_malloc_r>
 8011136:	bf00      	nop
 8011138:	20000084 	.word	0x20000084

0801113c <_free_r>:
 801113c:	b538      	push	{r3, r4, r5, lr}
 801113e:	4605      	mov	r5, r0
 8011140:	2900      	cmp	r1, #0
 8011142:	d045      	beq.n	80111d0 <_free_r+0x94>
 8011144:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011148:	1f0c      	subs	r4, r1, #4
 801114a:	2b00      	cmp	r3, #0
 801114c:	bfb8      	it	lt
 801114e:	18e4      	addlt	r4, r4, r3
 8011150:	f000 fc0e 	bl	8011970 <__malloc_lock>
 8011154:	4a1f      	ldr	r2, [pc, #124]	; (80111d4 <_free_r+0x98>)
 8011156:	6813      	ldr	r3, [r2, #0]
 8011158:	4610      	mov	r0, r2
 801115a:	b933      	cbnz	r3, 801116a <_free_r+0x2e>
 801115c:	6063      	str	r3, [r4, #4]
 801115e:	6014      	str	r4, [r2, #0]
 8011160:	4628      	mov	r0, r5
 8011162:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011166:	f000 bc04 	b.w	8011972 <__malloc_unlock>
 801116a:	42a3      	cmp	r3, r4
 801116c:	d90c      	bls.n	8011188 <_free_r+0x4c>
 801116e:	6821      	ldr	r1, [r4, #0]
 8011170:	1862      	adds	r2, r4, r1
 8011172:	4293      	cmp	r3, r2
 8011174:	bf04      	itt	eq
 8011176:	681a      	ldreq	r2, [r3, #0]
 8011178:	685b      	ldreq	r3, [r3, #4]
 801117a:	6063      	str	r3, [r4, #4]
 801117c:	bf04      	itt	eq
 801117e:	1852      	addeq	r2, r2, r1
 8011180:	6022      	streq	r2, [r4, #0]
 8011182:	6004      	str	r4, [r0, #0]
 8011184:	e7ec      	b.n	8011160 <_free_r+0x24>
 8011186:	4613      	mov	r3, r2
 8011188:	685a      	ldr	r2, [r3, #4]
 801118a:	b10a      	cbz	r2, 8011190 <_free_r+0x54>
 801118c:	42a2      	cmp	r2, r4
 801118e:	d9fa      	bls.n	8011186 <_free_r+0x4a>
 8011190:	6819      	ldr	r1, [r3, #0]
 8011192:	1858      	adds	r0, r3, r1
 8011194:	42a0      	cmp	r0, r4
 8011196:	d10b      	bne.n	80111b0 <_free_r+0x74>
 8011198:	6820      	ldr	r0, [r4, #0]
 801119a:	4401      	add	r1, r0
 801119c:	1858      	adds	r0, r3, r1
 801119e:	4282      	cmp	r2, r0
 80111a0:	6019      	str	r1, [r3, #0]
 80111a2:	d1dd      	bne.n	8011160 <_free_r+0x24>
 80111a4:	6810      	ldr	r0, [r2, #0]
 80111a6:	6852      	ldr	r2, [r2, #4]
 80111a8:	605a      	str	r2, [r3, #4]
 80111aa:	4401      	add	r1, r0
 80111ac:	6019      	str	r1, [r3, #0]
 80111ae:	e7d7      	b.n	8011160 <_free_r+0x24>
 80111b0:	d902      	bls.n	80111b8 <_free_r+0x7c>
 80111b2:	230c      	movs	r3, #12
 80111b4:	602b      	str	r3, [r5, #0]
 80111b6:	e7d3      	b.n	8011160 <_free_r+0x24>
 80111b8:	6820      	ldr	r0, [r4, #0]
 80111ba:	1821      	adds	r1, r4, r0
 80111bc:	428a      	cmp	r2, r1
 80111be:	bf04      	itt	eq
 80111c0:	6811      	ldreq	r1, [r2, #0]
 80111c2:	6852      	ldreq	r2, [r2, #4]
 80111c4:	6062      	str	r2, [r4, #4]
 80111c6:	bf04      	itt	eq
 80111c8:	1809      	addeq	r1, r1, r0
 80111ca:	6021      	streq	r1, [r4, #0]
 80111cc:	605c      	str	r4, [r3, #4]
 80111ce:	e7c7      	b.n	8011160 <_free_r+0x24>
 80111d0:	bd38      	pop	{r3, r4, r5, pc}
 80111d2:	bf00      	nop
 80111d4:	20000118 	.word	0x20000118

080111d8 <_malloc_r>:
 80111d8:	b570      	push	{r4, r5, r6, lr}
 80111da:	1ccd      	adds	r5, r1, #3
 80111dc:	f025 0503 	bic.w	r5, r5, #3
 80111e0:	3508      	adds	r5, #8
 80111e2:	2d0c      	cmp	r5, #12
 80111e4:	bf38      	it	cc
 80111e6:	250c      	movcc	r5, #12
 80111e8:	2d00      	cmp	r5, #0
 80111ea:	4606      	mov	r6, r0
 80111ec:	db01      	blt.n	80111f2 <_malloc_r+0x1a>
 80111ee:	42a9      	cmp	r1, r5
 80111f0:	d903      	bls.n	80111fa <_malloc_r+0x22>
 80111f2:	230c      	movs	r3, #12
 80111f4:	6033      	str	r3, [r6, #0]
 80111f6:	2000      	movs	r0, #0
 80111f8:	bd70      	pop	{r4, r5, r6, pc}
 80111fa:	f000 fbb9 	bl	8011970 <__malloc_lock>
 80111fe:	4a21      	ldr	r2, [pc, #132]	; (8011284 <_malloc_r+0xac>)
 8011200:	6814      	ldr	r4, [r2, #0]
 8011202:	4621      	mov	r1, r4
 8011204:	b991      	cbnz	r1, 801122c <_malloc_r+0x54>
 8011206:	4c20      	ldr	r4, [pc, #128]	; (8011288 <_malloc_r+0xb0>)
 8011208:	6823      	ldr	r3, [r4, #0]
 801120a:	b91b      	cbnz	r3, 8011214 <_malloc_r+0x3c>
 801120c:	4630      	mov	r0, r6
 801120e:	f000 fb05 	bl	801181c <_sbrk_r>
 8011212:	6020      	str	r0, [r4, #0]
 8011214:	4629      	mov	r1, r5
 8011216:	4630      	mov	r0, r6
 8011218:	f000 fb00 	bl	801181c <_sbrk_r>
 801121c:	1c43      	adds	r3, r0, #1
 801121e:	d124      	bne.n	801126a <_malloc_r+0x92>
 8011220:	230c      	movs	r3, #12
 8011222:	6033      	str	r3, [r6, #0]
 8011224:	4630      	mov	r0, r6
 8011226:	f000 fba4 	bl	8011972 <__malloc_unlock>
 801122a:	e7e4      	b.n	80111f6 <_malloc_r+0x1e>
 801122c:	680b      	ldr	r3, [r1, #0]
 801122e:	1b5b      	subs	r3, r3, r5
 8011230:	d418      	bmi.n	8011264 <_malloc_r+0x8c>
 8011232:	2b0b      	cmp	r3, #11
 8011234:	d90f      	bls.n	8011256 <_malloc_r+0x7e>
 8011236:	600b      	str	r3, [r1, #0]
 8011238:	50cd      	str	r5, [r1, r3]
 801123a:	18cc      	adds	r4, r1, r3
 801123c:	4630      	mov	r0, r6
 801123e:	f000 fb98 	bl	8011972 <__malloc_unlock>
 8011242:	f104 000b 	add.w	r0, r4, #11
 8011246:	1d23      	adds	r3, r4, #4
 8011248:	f020 0007 	bic.w	r0, r0, #7
 801124c:	1ac3      	subs	r3, r0, r3
 801124e:	d0d3      	beq.n	80111f8 <_malloc_r+0x20>
 8011250:	425a      	negs	r2, r3
 8011252:	50e2      	str	r2, [r4, r3]
 8011254:	e7d0      	b.n	80111f8 <_malloc_r+0x20>
 8011256:	428c      	cmp	r4, r1
 8011258:	684b      	ldr	r3, [r1, #4]
 801125a:	bf16      	itet	ne
 801125c:	6063      	strne	r3, [r4, #4]
 801125e:	6013      	streq	r3, [r2, #0]
 8011260:	460c      	movne	r4, r1
 8011262:	e7eb      	b.n	801123c <_malloc_r+0x64>
 8011264:	460c      	mov	r4, r1
 8011266:	6849      	ldr	r1, [r1, #4]
 8011268:	e7cc      	b.n	8011204 <_malloc_r+0x2c>
 801126a:	1cc4      	adds	r4, r0, #3
 801126c:	f024 0403 	bic.w	r4, r4, #3
 8011270:	42a0      	cmp	r0, r4
 8011272:	d005      	beq.n	8011280 <_malloc_r+0xa8>
 8011274:	1a21      	subs	r1, r4, r0
 8011276:	4630      	mov	r0, r6
 8011278:	f000 fad0 	bl	801181c <_sbrk_r>
 801127c:	3001      	adds	r0, #1
 801127e:	d0cf      	beq.n	8011220 <_malloc_r+0x48>
 8011280:	6025      	str	r5, [r4, #0]
 8011282:	e7db      	b.n	801123c <_malloc_r+0x64>
 8011284:	20000118 	.word	0x20000118
 8011288:	2000011c 	.word	0x2000011c

0801128c <__sfputc_r>:
 801128c:	6893      	ldr	r3, [r2, #8]
 801128e:	3b01      	subs	r3, #1
 8011290:	2b00      	cmp	r3, #0
 8011292:	b410      	push	{r4}
 8011294:	6093      	str	r3, [r2, #8]
 8011296:	da08      	bge.n	80112aa <__sfputc_r+0x1e>
 8011298:	6994      	ldr	r4, [r2, #24]
 801129a:	42a3      	cmp	r3, r4
 801129c:	db01      	blt.n	80112a2 <__sfputc_r+0x16>
 801129e:	290a      	cmp	r1, #10
 80112a0:	d103      	bne.n	80112aa <__sfputc_r+0x1e>
 80112a2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80112a6:	f7ff bca3 	b.w	8010bf0 <__swbuf_r>
 80112aa:	6813      	ldr	r3, [r2, #0]
 80112ac:	1c58      	adds	r0, r3, #1
 80112ae:	6010      	str	r0, [r2, #0]
 80112b0:	7019      	strb	r1, [r3, #0]
 80112b2:	4608      	mov	r0, r1
 80112b4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80112b8:	4770      	bx	lr

080112ba <__sfputs_r>:
 80112ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80112bc:	4606      	mov	r6, r0
 80112be:	460f      	mov	r7, r1
 80112c0:	4614      	mov	r4, r2
 80112c2:	18d5      	adds	r5, r2, r3
 80112c4:	42ac      	cmp	r4, r5
 80112c6:	d101      	bne.n	80112cc <__sfputs_r+0x12>
 80112c8:	2000      	movs	r0, #0
 80112ca:	e007      	b.n	80112dc <__sfputs_r+0x22>
 80112cc:	463a      	mov	r2, r7
 80112ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 80112d2:	4630      	mov	r0, r6
 80112d4:	f7ff ffda 	bl	801128c <__sfputc_r>
 80112d8:	1c43      	adds	r3, r0, #1
 80112da:	d1f3      	bne.n	80112c4 <__sfputs_r+0xa>
 80112dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080112e0 <_vfiprintf_r>:
 80112e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80112e4:	460c      	mov	r4, r1
 80112e6:	b09d      	sub	sp, #116	; 0x74
 80112e8:	4617      	mov	r7, r2
 80112ea:	461d      	mov	r5, r3
 80112ec:	4606      	mov	r6, r0
 80112ee:	b118      	cbz	r0, 80112f8 <_vfiprintf_r+0x18>
 80112f0:	6983      	ldr	r3, [r0, #24]
 80112f2:	b90b      	cbnz	r3, 80112f8 <_vfiprintf_r+0x18>
 80112f4:	f7ff fe2c 	bl	8010f50 <__sinit>
 80112f8:	4b7c      	ldr	r3, [pc, #496]	; (80114ec <_vfiprintf_r+0x20c>)
 80112fa:	429c      	cmp	r4, r3
 80112fc:	d158      	bne.n	80113b0 <_vfiprintf_r+0xd0>
 80112fe:	6874      	ldr	r4, [r6, #4]
 8011300:	89a3      	ldrh	r3, [r4, #12]
 8011302:	0718      	lsls	r0, r3, #28
 8011304:	d55e      	bpl.n	80113c4 <_vfiprintf_r+0xe4>
 8011306:	6923      	ldr	r3, [r4, #16]
 8011308:	2b00      	cmp	r3, #0
 801130a:	d05b      	beq.n	80113c4 <_vfiprintf_r+0xe4>
 801130c:	2300      	movs	r3, #0
 801130e:	9309      	str	r3, [sp, #36]	; 0x24
 8011310:	2320      	movs	r3, #32
 8011312:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011316:	2330      	movs	r3, #48	; 0x30
 8011318:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801131c:	9503      	str	r5, [sp, #12]
 801131e:	f04f 0b01 	mov.w	fp, #1
 8011322:	46b8      	mov	r8, r7
 8011324:	4645      	mov	r5, r8
 8011326:	f815 3b01 	ldrb.w	r3, [r5], #1
 801132a:	b10b      	cbz	r3, 8011330 <_vfiprintf_r+0x50>
 801132c:	2b25      	cmp	r3, #37	; 0x25
 801132e:	d154      	bne.n	80113da <_vfiprintf_r+0xfa>
 8011330:	ebb8 0a07 	subs.w	sl, r8, r7
 8011334:	d00b      	beq.n	801134e <_vfiprintf_r+0x6e>
 8011336:	4653      	mov	r3, sl
 8011338:	463a      	mov	r2, r7
 801133a:	4621      	mov	r1, r4
 801133c:	4630      	mov	r0, r6
 801133e:	f7ff ffbc 	bl	80112ba <__sfputs_r>
 8011342:	3001      	adds	r0, #1
 8011344:	f000 80c2 	beq.w	80114cc <_vfiprintf_r+0x1ec>
 8011348:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801134a:	4453      	add	r3, sl
 801134c:	9309      	str	r3, [sp, #36]	; 0x24
 801134e:	f898 3000 	ldrb.w	r3, [r8]
 8011352:	2b00      	cmp	r3, #0
 8011354:	f000 80ba 	beq.w	80114cc <_vfiprintf_r+0x1ec>
 8011358:	2300      	movs	r3, #0
 801135a:	f04f 32ff 	mov.w	r2, #4294967295
 801135e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011362:	9304      	str	r3, [sp, #16]
 8011364:	9307      	str	r3, [sp, #28]
 8011366:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801136a:	931a      	str	r3, [sp, #104]	; 0x68
 801136c:	46a8      	mov	r8, r5
 801136e:	2205      	movs	r2, #5
 8011370:	f818 1b01 	ldrb.w	r1, [r8], #1
 8011374:	485e      	ldr	r0, [pc, #376]	; (80114f0 <_vfiprintf_r+0x210>)
 8011376:	f7ee ff2b 	bl	80001d0 <memchr>
 801137a:	9b04      	ldr	r3, [sp, #16]
 801137c:	bb78      	cbnz	r0, 80113de <_vfiprintf_r+0xfe>
 801137e:	06d9      	lsls	r1, r3, #27
 8011380:	bf44      	itt	mi
 8011382:	2220      	movmi	r2, #32
 8011384:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8011388:	071a      	lsls	r2, r3, #28
 801138a:	bf44      	itt	mi
 801138c:	222b      	movmi	r2, #43	; 0x2b
 801138e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8011392:	782a      	ldrb	r2, [r5, #0]
 8011394:	2a2a      	cmp	r2, #42	; 0x2a
 8011396:	d02a      	beq.n	80113ee <_vfiprintf_r+0x10e>
 8011398:	9a07      	ldr	r2, [sp, #28]
 801139a:	46a8      	mov	r8, r5
 801139c:	2000      	movs	r0, #0
 801139e:	250a      	movs	r5, #10
 80113a0:	4641      	mov	r1, r8
 80113a2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80113a6:	3b30      	subs	r3, #48	; 0x30
 80113a8:	2b09      	cmp	r3, #9
 80113aa:	d969      	bls.n	8011480 <_vfiprintf_r+0x1a0>
 80113ac:	b360      	cbz	r0, 8011408 <_vfiprintf_r+0x128>
 80113ae:	e024      	b.n	80113fa <_vfiprintf_r+0x11a>
 80113b0:	4b50      	ldr	r3, [pc, #320]	; (80114f4 <_vfiprintf_r+0x214>)
 80113b2:	429c      	cmp	r4, r3
 80113b4:	d101      	bne.n	80113ba <_vfiprintf_r+0xda>
 80113b6:	68b4      	ldr	r4, [r6, #8]
 80113b8:	e7a2      	b.n	8011300 <_vfiprintf_r+0x20>
 80113ba:	4b4f      	ldr	r3, [pc, #316]	; (80114f8 <_vfiprintf_r+0x218>)
 80113bc:	429c      	cmp	r4, r3
 80113be:	bf08      	it	eq
 80113c0:	68f4      	ldreq	r4, [r6, #12]
 80113c2:	e79d      	b.n	8011300 <_vfiprintf_r+0x20>
 80113c4:	4621      	mov	r1, r4
 80113c6:	4630      	mov	r0, r6
 80113c8:	f7ff fc64 	bl	8010c94 <__swsetup_r>
 80113cc:	2800      	cmp	r0, #0
 80113ce:	d09d      	beq.n	801130c <_vfiprintf_r+0x2c>
 80113d0:	f04f 30ff 	mov.w	r0, #4294967295
 80113d4:	b01d      	add	sp, #116	; 0x74
 80113d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80113da:	46a8      	mov	r8, r5
 80113dc:	e7a2      	b.n	8011324 <_vfiprintf_r+0x44>
 80113de:	4a44      	ldr	r2, [pc, #272]	; (80114f0 <_vfiprintf_r+0x210>)
 80113e0:	1a80      	subs	r0, r0, r2
 80113e2:	fa0b f000 	lsl.w	r0, fp, r0
 80113e6:	4318      	orrs	r0, r3
 80113e8:	9004      	str	r0, [sp, #16]
 80113ea:	4645      	mov	r5, r8
 80113ec:	e7be      	b.n	801136c <_vfiprintf_r+0x8c>
 80113ee:	9a03      	ldr	r2, [sp, #12]
 80113f0:	1d11      	adds	r1, r2, #4
 80113f2:	6812      	ldr	r2, [r2, #0]
 80113f4:	9103      	str	r1, [sp, #12]
 80113f6:	2a00      	cmp	r2, #0
 80113f8:	db01      	blt.n	80113fe <_vfiprintf_r+0x11e>
 80113fa:	9207      	str	r2, [sp, #28]
 80113fc:	e004      	b.n	8011408 <_vfiprintf_r+0x128>
 80113fe:	4252      	negs	r2, r2
 8011400:	f043 0302 	orr.w	r3, r3, #2
 8011404:	9207      	str	r2, [sp, #28]
 8011406:	9304      	str	r3, [sp, #16]
 8011408:	f898 3000 	ldrb.w	r3, [r8]
 801140c:	2b2e      	cmp	r3, #46	; 0x2e
 801140e:	d10e      	bne.n	801142e <_vfiprintf_r+0x14e>
 8011410:	f898 3001 	ldrb.w	r3, [r8, #1]
 8011414:	2b2a      	cmp	r3, #42	; 0x2a
 8011416:	d138      	bne.n	801148a <_vfiprintf_r+0x1aa>
 8011418:	9b03      	ldr	r3, [sp, #12]
 801141a:	1d1a      	adds	r2, r3, #4
 801141c:	681b      	ldr	r3, [r3, #0]
 801141e:	9203      	str	r2, [sp, #12]
 8011420:	2b00      	cmp	r3, #0
 8011422:	bfb8      	it	lt
 8011424:	f04f 33ff 	movlt.w	r3, #4294967295
 8011428:	f108 0802 	add.w	r8, r8, #2
 801142c:	9305      	str	r3, [sp, #20]
 801142e:	4d33      	ldr	r5, [pc, #204]	; (80114fc <_vfiprintf_r+0x21c>)
 8011430:	f898 1000 	ldrb.w	r1, [r8]
 8011434:	2203      	movs	r2, #3
 8011436:	4628      	mov	r0, r5
 8011438:	f7ee feca 	bl	80001d0 <memchr>
 801143c:	b140      	cbz	r0, 8011450 <_vfiprintf_r+0x170>
 801143e:	2340      	movs	r3, #64	; 0x40
 8011440:	1b40      	subs	r0, r0, r5
 8011442:	fa03 f000 	lsl.w	r0, r3, r0
 8011446:	9b04      	ldr	r3, [sp, #16]
 8011448:	4303      	orrs	r3, r0
 801144a:	f108 0801 	add.w	r8, r8, #1
 801144e:	9304      	str	r3, [sp, #16]
 8011450:	f898 1000 	ldrb.w	r1, [r8]
 8011454:	482a      	ldr	r0, [pc, #168]	; (8011500 <_vfiprintf_r+0x220>)
 8011456:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801145a:	2206      	movs	r2, #6
 801145c:	f108 0701 	add.w	r7, r8, #1
 8011460:	f7ee feb6 	bl	80001d0 <memchr>
 8011464:	2800      	cmp	r0, #0
 8011466:	d037      	beq.n	80114d8 <_vfiprintf_r+0x1f8>
 8011468:	4b26      	ldr	r3, [pc, #152]	; (8011504 <_vfiprintf_r+0x224>)
 801146a:	bb1b      	cbnz	r3, 80114b4 <_vfiprintf_r+0x1d4>
 801146c:	9b03      	ldr	r3, [sp, #12]
 801146e:	3307      	adds	r3, #7
 8011470:	f023 0307 	bic.w	r3, r3, #7
 8011474:	3308      	adds	r3, #8
 8011476:	9303      	str	r3, [sp, #12]
 8011478:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801147a:	444b      	add	r3, r9
 801147c:	9309      	str	r3, [sp, #36]	; 0x24
 801147e:	e750      	b.n	8011322 <_vfiprintf_r+0x42>
 8011480:	fb05 3202 	mla	r2, r5, r2, r3
 8011484:	2001      	movs	r0, #1
 8011486:	4688      	mov	r8, r1
 8011488:	e78a      	b.n	80113a0 <_vfiprintf_r+0xc0>
 801148a:	2300      	movs	r3, #0
 801148c:	f108 0801 	add.w	r8, r8, #1
 8011490:	9305      	str	r3, [sp, #20]
 8011492:	4619      	mov	r1, r3
 8011494:	250a      	movs	r5, #10
 8011496:	4640      	mov	r0, r8
 8011498:	f810 2b01 	ldrb.w	r2, [r0], #1
 801149c:	3a30      	subs	r2, #48	; 0x30
 801149e:	2a09      	cmp	r2, #9
 80114a0:	d903      	bls.n	80114aa <_vfiprintf_r+0x1ca>
 80114a2:	2b00      	cmp	r3, #0
 80114a4:	d0c3      	beq.n	801142e <_vfiprintf_r+0x14e>
 80114a6:	9105      	str	r1, [sp, #20]
 80114a8:	e7c1      	b.n	801142e <_vfiprintf_r+0x14e>
 80114aa:	fb05 2101 	mla	r1, r5, r1, r2
 80114ae:	2301      	movs	r3, #1
 80114b0:	4680      	mov	r8, r0
 80114b2:	e7f0      	b.n	8011496 <_vfiprintf_r+0x1b6>
 80114b4:	ab03      	add	r3, sp, #12
 80114b6:	9300      	str	r3, [sp, #0]
 80114b8:	4622      	mov	r2, r4
 80114ba:	4b13      	ldr	r3, [pc, #76]	; (8011508 <_vfiprintf_r+0x228>)
 80114bc:	a904      	add	r1, sp, #16
 80114be:	4630      	mov	r0, r6
 80114c0:	f3af 8000 	nop.w
 80114c4:	f1b0 3fff 	cmp.w	r0, #4294967295
 80114c8:	4681      	mov	r9, r0
 80114ca:	d1d5      	bne.n	8011478 <_vfiprintf_r+0x198>
 80114cc:	89a3      	ldrh	r3, [r4, #12]
 80114ce:	065b      	lsls	r3, r3, #25
 80114d0:	f53f af7e 	bmi.w	80113d0 <_vfiprintf_r+0xf0>
 80114d4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80114d6:	e77d      	b.n	80113d4 <_vfiprintf_r+0xf4>
 80114d8:	ab03      	add	r3, sp, #12
 80114da:	9300      	str	r3, [sp, #0]
 80114dc:	4622      	mov	r2, r4
 80114de:	4b0a      	ldr	r3, [pc, #40]	; (8011508 <_vfiprintf_r+0x228>)
 80114e0:	a904      	add	r1, sp, #16
 80114e2:	4630      	mov	r0, r6
 80114e4:	f000 f888 	bl	80115f8 <_printf_i>
 80114e8:	e7ec      	b.n	80114c4 <_vfiprintf_r+0x1e4>
 80114ea:	bf00      	nop
 80114ec:	080120c8 	.word	0x080120c8
 80114f0:	08012108 	.word	0x08012108
 80114f4:	080120e8 	.word	0x080120e8
 80114f8:	080120a8 	.word	0x080120a8
 80114fc:	0801210e 	.word	0x0801210e
 8011500:	08012112 	.word	0x08012112
 8011504:	00000000 	.word	0x00000000
 8011508:	080112bb 	.word	0x080112bb

0801150c <_printf_common>:
 801150c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011510:	4691      	mov	r9, r2
 8011512:	461f      	mov	r7, r3
 8011514:	688a      	ldr	r2, [r1, #8]
 8011516:	690b      	ldr	r3, [r1, #16]
 8011518:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801151c:	4293      	cmp	r3, r2
 801151e:	bfb8      	it	lt
 8011520:	4613      	movlt	r3, r2
 8011522:	f8c9 3000 	str.w	r3, [r9]
 8011526:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801152a:	4606      	mov	r6, r0
 801152c:	460c      	mov	r4, r1
 801152e:	b112      	cbz	r2, 8011536 <_printf_common+0x2a>
 8011530:	3301      	adds	r3, #1
 8011532:	f8c9 3000 	str.w	r3, [r9]
 8011536:	6823      	ldr	r3, [r4, #0]
 8011538:	0699      	lsls	r1, r3, #26
 801153a:	bf42      	ittt	mi
 801153c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8011540:	3302      	addmi	r3, #2
 8011542:	f8c9 3000 	strmi.w	r3, [r9]
 8011546:	6825      	ldr	r5, [r4, #0]
 8011548:	f015 0506 	ands.w	r5, r5, #6
 801154c:	d107      	bne.n	801155e <_printf_common+0x52>
 801154e:	f104 0a19 	add.w	sl, r4, #25
 8011552:	68e3      	ldr	r3, [r4, #12]
 8011554:	f8d9 2000 	ldr.w	r2, [r9]
 8011558:	1a9b      	subs	r3, r3, r2
 801155a:	42ab      	cmp	r3, r5
 801155c:	dc28      	bgt.n	80115b0 <_printf_common+0xa4>
 801155e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8011562:	6822      	ldr	r2, [r4, #0]
 8011564:	3300      	adds	r3, #0
 8011566:	bf18      	it	ne
 8011568:	2301      	movne	r3, #1
 801156a:	0692      	lsls	r2, r2, #26
 801156c:	d42d      	bmi.n	80115ca <_printf_common+0xbe>
 801156e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8011572:	4639      	mov	r1, r7
 8011574:	4630      	mov	r0, r6
 8011576:	47c0      	blx	r8
 8011578:	3001      	adds	r0, #1
 801157a:	d020      	beq.n	80115be <_printf_common+0xb2>
 801157c:	6823      	ldr	r3, [r4, #0]
 801157e:	68e5      	ldr	r5, [r4, #12]
 8011580:	f8d9 2000 	ldr.w	r2, [r9]
 8011584:	f003 0306 	and.w	r3, r3, #6
 8011588:	2b04      	cmp	r3, #4
 801158a:	bf08      	it	eq
 801158c:	1aad      	subeq	r5, r5, r2
 801158e:	68a3      	ldr	r3, [r4, #8]
 8011590:	6922      	ldr	r2, [r4, #16]
 8011592:	bf0c      	ite	eq
 8011594:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8011598:	2500      	movne	r5, #0
 801159a:	4293      	cmp	r3, r2
 801159c:	bfc4      	itt	gt
 801159e:	1a9b      	subgt	r3, r3, r2
 80115a0:	18ed      	addgt	r5, r5, r3
 80115a2:	f04f 0900 	mov.w	r9, #0
 80115a6:	341a      	adds	r4, #26
 80115a8:	454d      	cmp	r5, r9
 80115aa:	d11a      	bne.n	80115e2 <_printf_common+0xd6>
 80115ac:	2000      	movs	r0, #0
 80115ae:	e008      	b.n	80115c2 <_printf_common+0xb6>
 80115b0:	2301      	movs	r3, #1
 80115b2:	4652      	mov	r2, sl
 80115b4:	4639      	mov	r1, r7
 80115b6:	4630      	mov	r0, r6
 80115b8:	47c0      	blx	r8
 80115ba:	3001      	adds	r0, #1
 80115bc:	d103      	bne.n	80115c6 <_printf_common+0xba>
 80115be:	f04f 30ff 	mov.w	r0, #4294967295
 80115c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80115c6:	3501      	adds	r5, #1
 80115c8:	e7c3      	b.n	8011552 <_printf_common+0x46>
 80115ca:	18e1      	adds	r1, r4, r3
 80115cc:	1c5a      	adds	r2, r3, #1
 80115ce:	2030      	movs	r0, #48	; 0x30
 80115d0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80115d4:	4422      	add	r2, r4
 80115d6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80115da:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80115de:	3302      	adds	r3, #2
 80115e0:	e7c5      	b.n	801156e <_printf_common+0x62>
 80115e2:	2301      	movs	r3, #1
 80115e4:	4622      	mov	r2, r4
 80115e6:	4639      	mov	r1, r7
 80115e8:	4630      	mov	r0, r6
 80115ea:	47c0      	blx	r8
 80115ec:	3001      	adds	r0, #1
 80115ee:	d0e6      	beq.n	80115be <_printf_common+0xb2>
 80115f0:	f109 0901 	add.w	r9, r9, #1
 80115f4:	e7d8      	b.n	80115a8 <_printf_common+0x9c>
	...

080115f8 <_printf_i>:
 80115f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80115fc:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8011600:	460c      	mov	r4, r1
 8011602:	7e09      	ldrb	r1, [r1, #24]
 8011604:	b085      	sub	sp, #20
 8011606:	296e      	cmp	r1, #110	; 0x6e
 8011608:	4617      	mov	r7, r2
 801160a:	4606      	mov	r6, r0
 801160c:	4698      	mov	r8, r3
 801160e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011610:	f000 80b3 	beq.w	801177a <_printf_i+0x182>
 8011614:	d822      	bhi.n	801165c <_printf_i+0x64>
 8011616:	2963      	cmp	r1, #99	; 0x63
 8011618:	d036      	beq.n	8011688 <_printf_i+0x90>
 801161a:	d80a      	bhi.n	8011632 <_printf_i+0x3a>
 801161c:	2900      	cmp	r1, #0
 801161e:	f000 80b9 	beq.w	8011794 <_printf_i+0x19c>
 8011622:	2958      	cmp	r1, #88	; 0x58
 8011624:	f000 8083 	beq.w	801172e <_printf_i+0x136>
 8011628:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801162c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8011630:	e032      	b.n	8011698 <_printf_i+0xa0>
 8011632:	2964      	cmp	r1, #100	; 0x64
 8011634:	d001      	beq.n	801163a <_printf_i+0x42>
 8011636:	2969      	cmp	r1, #105	; 0x69
 8011638:	d1f6      	bne.n	8011628 <_printf_i+0x30>
 801163a:	6820      	ldr	r0, [r4, #0]
 801163c:	6813      	ldr	r3, [r2, #0]
 801163e:	0605      	lsls	r5, r0, #24
 8011640:	f103 0104 	add.w	r1, r3, #4
 8011644:	d52a      	bpl.n	801169c <_printf_i+0xa4>
 8011646:	681b      	ldr	r3, [r3, #0]
 8011648:	6011      	str	r1, [r2, #0]
 801164a:	2b00      	cmp	r3, #0
 801164c:	da03      	bge.n	8011656 <_printf_i+0x5e>
 801164e:	222d      	movs	r2, #45	; 0x2d
 8011650:	425b      	negs	r3, r3
 8011652:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8011656:	486f      	ldr	r0, [pc, #444]	; (8011814 <_printf_i+0x21c>)
 8011658:	220a      	movs	r2, #10
 801165a:	e039      	b.n	80116d0 <_printf_i+0xd8>
 801165c:	2973      	cmp	r1, #115	; 0x73
 801165e:	f000 809d 	beq.w	801179c <_printf_i+0x1a4>
 8011662:	d808      	bhi.n	8011676 <_printf_i+0x7e>
 8011664:	296f      	cmp	r1, #111	; 0x6f
 8011666:	d020      	beq.n	80116aa <_printf_i+0xb2>
 8011668:	2970      	cmp	r1, #112	; 0x70
 801166a:	d1dd      	bne.n	8011628 <_printf_i+0x30>
 801166c:	6823      	ldr	r3, [r4, #0]
 801166e:	f043 0320 	orr.w	r3, r3, #32
 8011672:	6023      	str	r3, [r4, #0]
 8011674:	e003      	b.n	801167e <_printf_i+0x86>
 8011676:	2975      	cmp	r1, #117	; 0x75
 8011678:	d017      	beq.n	80116aa <_printf_i+0xb2>
 801167a:	2978      	cmp	r1, #120	; 0x78
 801167c:	d1d4      	bne.n	8011628 <_printf_i+0x30>
 801167e:	2378      	movs	r3, #120	; 0x78
 8011680:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8011684:	4864      	ldr	r0, [pc, #400]	; (8011818 <_printf_i+0x220>)
 8011686:	e055      	b.n	8011734 <_printf_i+0x13c>
 8011688:	6813      	ldr	r3, [r2, #0]
 801168a:	1d19      	adds	r1, r3, #4
 801168c:	681b      	ldr	r3, [r3, #0]
 801168e:	6011      	str	r1, [r2, #0]
 8011690:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011694:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8011698:	2301      	movs	r3, #1
 801169a:	e08c      	b.n	80117b6 <_printf_i+0x1be>
 801169c:	681b      	ldr	r3, [r3, #0]
 801169e:	6011      	str	r1, [r2, #0]
 80116a0:	f010 0f40 	tst.w	r0, #64	; 0x40
 80116a4:	bf18      	it	ne
 80116a6:	b21b      	sxthne	r3, r3
 80116a8:	e7cf      	b.n	801164a <_printf_i+0x52>
 80116aa:	6813      	ldr	r3, [r2, #0]
 80116ac:	6825      	ldr	r5, [r4, #0]
 80116ae:	1d18      	adds	r0, r3, #4
 80116b0:	6010      	str	r0, [r2, #0]
 80116b2:	0628      	lsls	r0, r5, #24
 80116b4:	d501      	bpl.n	80116ba <_printf_i+0xc2>
 80116b6:	681b      	ldr	r3, [r3, #0]
 80116b8:	e002      	b.n	80116c0 <_printf_i+0xc8>
 80116ba:	0668      	lsls	r0, r5, #25
 80116bc:	d5fb      	bpl.n	80116b6 <_printf_i+0xbe>
 80116be:	881b      	ldrh	r3, [r3, #0]
 80116c0:	4854      	ldr	r0, [pc, #336]	; (8011814 <_printf_i+0x21c>)
 80116c2:	296f      	cmp	r1, #111	; 0x6f
 80116c4:	bf14      	ite	ne
 80116c6:	220a      	movne	r2, #10
 80116c8:	2208      	moveq	r2, #8
 80116ca:	2100      	movs	r1, #0
 80116cc:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80116d0:	6865      	ldr	r5, [r4, #4]
 80116d2:	60a5      	str	r5, [r4, #8]
 80116d4:	2d00      	cmp	r5, #0
 80116d6:	f2c0 8095 	blt.w	8011804 <_printf_i+0x20c>
 80116da:	6821      	ldr	r1, [r4, #0]
 80116dc:	f021 0104 	bic.w	r1, r1, #4
 80116e0:	6021      	str	r1, [r4, #0]
 80116e2:	2b00      	cmp	r3, #0
 80116e4:	d13d      	bne.n	8011762 <_printf_i+0x16a>
 80116e6:	2d00      	cmp	r5, #0
 80116e8:	f040 808e 	bne.w	8011808 <_printf_i+0x210>
 80116ec:	4665      	mov	r5, ip
 80116ee:	2a08      	cmp	r2, #8
 80116f0:	d10b      	bne.n	801170a <_printf_i+0x112>
 80116f2:	6823      	ldr	r3, [r4, #0]
 80116f4:	07db      	lsls	r3, r3, #31
 80116f6:	d508      	bpl.n	801170a <_printf_i+0x112>
 80116f8:	6923      	ldr	r3, [r4, #16]
 80116fa:	6862      	ldr	r2, [r4, #4]
 80116fc:	429a      	cmp	r2, r3
 80116fe:	bfde      	ittt	le
 8011700:	2330      	movle	r3, #48	; 0x30
 8011702:	f805 3c01 	strble.w	r3, [r5, #-1]
 8011706:	f105 35ff 	addle.w	r5, r5, #4294967295
 801170a:	ebac 0305 	sub.w	r3, ip, r5
 801170e:	6123      	str	r3, [r4, #16]
 8011710:	f8cd 8000 	str.w	r8, [sp]
 8011714:	463b      	mov	r3, r7
 8011716:	aa03      	add	r2, sp, #12
 8011718:	4621      	mov	r1, r4
 801171a:	4630      	mov	r0, r6
 801171c:	f7ff fef6 	bl	801150c <_printf_common>
 8011720:	3001      	adds	r0, #1
 8011722:	d14d      	bne.n	80117c0 <_printf_i+0x1c8>
 8011724:	f04f 30ff 	mov.w	r0, #4294967295
 8011728:	b005      	add	sp, #20
 801172a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801172e:	4839      	ldr	r0, [pc, #228]	; (8011814 <_printf_i+0x21c>)
 8011730:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8011734:	6813      	ldr	r3, [r2, #0]
 8011736:	6821      	ldr	r1, [r4, #0]
 8011738:	1d1d      	adds	r5, r3, #4
 801173a:	681b      	ldr	r3, [r3, #0]
 801173c:	6015      	str	r5, [r2, #0]
 801173e:	060a      	lsls	r2, r1, #24
 8011740:	d50b      	bpl.n	801175a <_printf_i+0x162>
 8011742:	07ca      	lsls	r2, r1, #31
 8011744:	bf44      	itt	mi
 8011746:	f041 0120 	orrmi.w	r1, r1, #32
 801174a:	6021      	strmi	r1, [r4, #0]
 801174c:	b91b      	cbnz	r3, 8011756 <_printf_i+0x15e>
 801174e:	6822      	ldr	r2, [r4, #0]
 8011750:	f022 0220 	bic.w	r2, r2, #32
 8011754:	6022      	str	r2, [r4, #0]
 8011756:	2210      	movs	r2, #16
 8011758:	e7b7      	b.n	80116ca <_printf_i+0xd2>
 801175a:	064d      	lsls	r5, r1, #25
 801175c:	bf48      	it	mi
 801175e:	b29b      	uxthmi	r3, r3
 8011760:	e7ef      	b.n	8011742 <_printf_i+0x14a>
 8011762:	4665      	mov	r5, ip
 8011764:	fbb3 f1f2 	udiv	r1, r3, r2
 8011768:	fb02 3311 	mls	r3, r2, r1, r3
 801176c:	5cc3      	ldrb	r3, [r0, r3]
 801176e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8011772:	460b      	mov	r3, r1
 8011774:	2900      	cmp	r1, #0
 8011776:	d1f5      	bne.n	8011764 <_printf_i+0x16c>
 8011778:	e7b9      	b.n	80116ee <_printf_i+0xf6>
 801177a:	6813      	ldr	r3, [r2, #0]
 801177c:	6825      	ldr	r5, [r4, #0]
 801177e:	6961      	ldr	r1, [r4, #20]
 8011780:	1d18      	adds	r0, r3, #4
 8011782:	6010      	str	r0, [r2, #0]
 8011784:	0628      	lsls	r0, r5, #24
 8011786:	681b      	ldr	r3, [r3, #0]
 8011788:	d501      	bpl.n	801178e <_printf_i+0x196>
 801178a:	6019      	str	r1, [r3, #0]
 801178c:	e002      	b.n	8011794 <_printf_i+0x19c>
 801178e:	066a      	lsls	r2, r5, #25
 8011790:	d5fb      	bpl.n	801178a <_printf_i+0x192>
 8011792:	8019      	strh	r1, [r3, #0]
 8011794:	2300      	movs	r3, #0
 8011796:	6123      	str	r3, [r4, #16]
 8011798:	4665      	mov	r5, ip
 801179a:	e7b9      	b.n	8011710 <_printf_i+0x118>
 801179c:	6813      	ldr	r3, [r2, #0]
 801179e:	1d19      	adds	r1, r3, #4
 80117a0:	6011      	str	r1, [r2, #0]
 80117a2:	681d      	ldr	r5, [r3, #0]
 80117a4:	6862      	ldr	r2, [r4, #4]
 80117a6:	2100      	movs	r1, #0
 80117a8:	4628      	mov	r0, r5
 80117aa:	f7ee fd11 	bl	80001d0 <memchr>
 80117ae:	b108      	cbz	r0, 80117b4 <_printf_i+0x1bc>
 80117b0:	1b40      	subs	r0, r0, r5
 80117b2:	6060      	str	r0, [r4, #4]
 80117b4:	6863      	ldr	r3, [r4, #4]
 80117b6:	6123      	str	r3, [r4, #16]
 80117b8:	2300      	movs	r3, #0
 80117ba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80117be:	e7a7      	b.n	8011710 <_printf_i+0x118>
 80117c0:	6923      	ldr	r3, [r4, #16]
 80117c2:	462a      	mov	r2, r5
 80117c4:	4639      	mov	r1, r7
 80117c6:	4630      	mov	r0, r6
 80117c8:	47c0      	blx	r8
 80117ca:	3001      	adds	r0, #1
 80117cc:	d0aa      	beq.n	8011724 <_printf_i+0x12c>
 80117ce:	6823      	ldr	r3, [r4, #0]
 80117d0:	079b      	lsls	r3, r3, #30
 80117d2:	d413      	bmi.n	80117fc <_printf_i+0x204>
 80117d4:	68e0      	ldr	r0, [r4, #12]
 80117d6:	9b03      	ldr	r3, [sp, #12]
 80117d8:	4298      	cmp	r0, r3
 80117da:	bfb8      	it	lt
 80117dc:	4618      	movlt	r0, r3
 80117de:	e7a3      	b.n	8011728 <_printf_i+0x130>
 80117e0:	2301      	movs	r3, #1
 80117e2:	464a      	mov	r2, r9
 80117e4:	4639      	mov	r1, r7
 80117e6:	4630      	mov	r0, r6
 80117e8:	47c0      	blx	r8
 80117ea:	3001      	adds	r0, #1
 80117ec:	d09a      	beq.n	8011724 <_printf_i+0x12c>
 80117ee:	3501      	adds	r5, #1
 80117f0:	68e3      	ldr	r3, [r4, #12]
 80117f2:	9a03      	ldr	r2, [sp, #12]
 80117f4:	1a9b      	subs	r3, r3, r2
 80117f6:	42ab      	cmp	r3, r5
 80117f8:	dcf2      	bgt.n	80117e0 <_printf_i+0x1e8>
 80117fa:	e7eb      	b.n	80117d4 <_printf_i+0x1dc>
 80117fc:	2500      	movs	r5, #0
 80117fe:	f104 0919 	add.w	r9, r4, #25
 8011802:	e7f5      	b.n	80117f0 <_printf_i+0x1f8>
 8011804:	2b00      	cmp	r3, #0
 8011806:	d1ac      	bne.n	8011762 <_printf_i+0x16a>
 8011808:	7803      	ldrb	r3, [r0, #0]
 801180a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801180e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011812:	e76c      	b.n	80116ee <_printf_i+0xf6>
 8011814:	08012119 	.word	0x08012119
 8011818:	0801212a 	.word	0x0801212a

0801181c <_sbrk_r>:
 801181c:	b538      	push	{r3, r4, r5, lr}
 801181e:	4c06      	ldr	r4, [pc, #24]	; (8011838 <_sbrk_r+0x1c>)
 8011820:	2300      	movs	r3, #0
 8011822:	4605      	mov	r5, r0
 8011824:	4608      	mov	r0, r1
 8011826:	6023      	str	r3, [r4, #0]
 8011828:	f7fe fff2 	bl	8010810 <_sbrk>
 801182c:	1c43      	adds	r3, r0, #1
 801182e:	d102      	bne.n	8011836 <_sbrk_r+0x1a>
 8011830:	6823      	ldr	r3, [r4, #0]
 8011832:	b103      	cbz	r3, 8011836 <_sbrk_r+0x1a>
 8011834:	602b      	str	r3, [r5, #0]
 8011836:	bd38      	pop	{r3, r4, r5, pc}
 8011838:	200015d8 	.word	0x200015d8

0801183c <__sread>:
 801183c:	b510      	push	{r4, lr}
 801183e:	460c      	mov	r4, r1
 8011840:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011844:	f000 f896 	bl	8011974 <_read_r>
 8011848:	2800      	cmp	r0, #0
 801184a:	bfab      	itete	ge
 801184c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801184e:	89a3      	ldrhlt	r3, [r4, #12]
 8011850:	181b      	addge	r3, r3, r0
 8011852:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8011856:	bfac      	ite	ge
 8011858:	6563      	strge	r3, [r4, #84]	; 0x54
 801185a:	81a3      	strhlt	r3, [r4, #12]
 801185c:	bd10      	pop	{r4, pc}

0801185e <__swrite>:
 801185e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011862:	461f      	mov	r7, r3
 8011864:	898b      	ldrh	r3, [r1, #12]
 8011866:	05db      	lsls	r3, r3, #23
 8011868:	4605      	mov	r5, r0
 801186a:	460c      	mov	r4, r1
 801186c:	4616      	mov	r6, r2
 801186e:	d505      	bpl.n	801187c <__swrite+0x1e>
 8011870:	2302      	movs	r3, #2
 8011872:	2200      	movs	r2, #0
 8011874:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011878:	f000 f868 	bl	801194c <_lseek_r>
 801187c:	89a3      	ldrh	r3, [r4, #12]
 801187e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011882:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8011886:	81a3      	strh	r3, [r4, #12]
 8011888:	4632      	mov	r2, r6
 801188a:	463b      	mov	r3, r7
 801188c:	4628      	mov	r0, r5
 801188e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011892:	f000 b817 	b.w	80118c4 <_write_r>

08011896 <__sseek>:
 8011896:	b510      	push	{r4, lr}
 8011898:	460c      	mov	r4, r1
 801189a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801189e:	f000 f855 	bl	801194c <_lseek_r>
 80118a2:	1c43      	adds	r3, r0, #1
 80118a4:	89a3      	ldrh	r3, [r4, #12]
 80118a6:	bf15      	itete	ne
 80118a8:	6560      	strne	r0, [r4, #84]	; 0x54
 80118aa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80118ae:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80118b2:	81a3      	strheq	r3, [r4, #12]
 80118b4:	bf18      	it	ne
 80118b6:	81a3      	strhne	r3, [r4, #12]
 80118b8:	bd10      	pop	{r4, pc}

080118ba <__sclose>:
 80118ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80118be:	f000 b813 	b.w	80118e8 <_close_r>
	...

080118c4 <_write_r>:
 80118c4:	b538      	push	{r3, r4, r5, lr}
 80118c6:	4c07      	ldr	r4, [pc, #28]	; (80118e4 <_write_r+0x20>)
 80118c8:	4605      	mov	r5, r0
 80118ca:	4608      	mov	r0, r1
 80118cc:	4611      	mov	r1, r2
 80118ce:	2200      	movs	r2, #0
 80118d0:	6022      	str	r2, [r4, #0]
 80118d2:	461a      	mov	r2, r3
 80118d4:	f7fe ff4b 	bl	801076e <_write>
 80118d8:	1c43      	adds	r3, r0, #1
 80118da:	d102      	bne.n	80118e2 <_write_r+0x1e>
 80118dc:	6823      	ldr	r3, [r4, #0]
 80118de:	b103      	cbz	r3, 80118e2 <_write_r+0x1e>
 80118e0:	602b      	str	r3, [r5, #0]
 80118e2:	bd38      	pop	{r3, r4, r5, pc}
 80118e4:	200015d8 	.word	0x200015d8

080118e8 <_close_r>:
 80118e8:	b538      	push	{r3, r4, r5, lr}
 80118ea:	4c06      	ldr	r4, [pc, #24]	; (8011904 <_close_r+0x1c>)
 80118ec:	2300      	movs	r3, #0
 80118ee:	4605      	mov	r5, r0
 80118f0:	4608      	mov	r0, r1
 80118f2:	6023      	str	r3, [r4, #0]
 80118f4:	f7fe ff57 	bl	80107a6 <_close>
 80118f8:	1c43      	adds	r3, r0, #1
 80118fa:	d102      	bne.n	8011902 <_close_r+0x1a>
 80118fc:	6823      	ldr	r3, [r4, #0]
 80118fe:	b103      	cbz	r3, 8011902 <_close_r+0x1a>
 8011900:	602b      	str	r3, [r5, #0]
 8011902:	bd38      	pop	{r3, r4, r5, pc}
 8011904:	200015d8 	.word	0x200015d8

08011908 <_fstat_r>:
 8011908:	b538      	push	{r3, r4, r5, lr}
 801190a:	4c07      	ldr	r4, [pc, #28]	; (8011928 <_fstat_r+0x20>)
 801190c:	2300      	movs	r3, #0
 801190e:	4605      	mov	r5, r0
 8011910:	4608      	mov	r0, r1
 8011912:	4611      	mov	r1, r2
 8011914:	6023      	str	r3, [r4, #0]
 8011916:	f7fe ff52 	bl	80107be <_fstat>
 801191a:	1c43      	adds	r3, r0, #1
 801191c:	d102      	bne.n	8011924 <_fstat_r+0x1c>
 801191e:	6823      	ldr	r3, [r4, #0]
 8011920:	b103      	cbz	r3, 8011924 <_fstat_r+0x1c>
 8011922:	602b      	str	r3, [r5, #0]
 8011924:	bd38      	pop	{r3, r4, r5, pc}
 8011926:	bf00      	nop
 8011928:	200015d8 	.word	0x200015d8

0801192c <_isatty_r>:
 801192c:	b538      	push	{r3, r4, r5, lr}
 801192e:	4c06      	ldr	r4, [pc, #24]	; (8011948 <_isatty_r+0x1c>)
 8011930:	2300      	movs	r3, #0
 8011932:	4605      	mov	r5, r0
 8011934:	4608      	mov	r0, r1
 8011936:	6023      	str	r3, [r4, #0]
 8011938:	f7fe ff51 	bl	80107de <_isatty>
 801193c:	1c43      	adds	r3, r0, #1
 801193e:	d102      	bne.n	8011946 <_isatty_r+0x1a>
 8011940:	6823      	ldr	r3, [r4, #0]
 8011942:	b103      	cbz	r3, 8011946 <_isatty_r+0x1a>
 8011944:	602b      	str	r3, [r5, #0]
 8011946:	bd38      	pop	{r3, r4, r5, pc}
 8011948:	200015d8 	.word	0x200015d8

0801194c <_lseek_r>:
 801194c:	b538      	push	{r3, r4, r5, lr}
 801194e:	4c07      	ldr	r4, [pc, #28]	; (801196c <_lseek_r+0x20>)
 8011950:	4605      	mov	r5, r0
 8011952:	4608      	mov	r0, r1
 8011954:	4611      	mov	r1, r2
 8011956:	2200      	movs	r2, #0
 8011958:	6022      	str	r2, [r4, #0]
 801195a:	461a      	mov	r2, r3
 801195c:	f7fe ff4a 	bl	80107f4 <_lseek>
 8011960:	1c43      	adds	r3, r0, #1
 8011962:	d102      	bne.n	801196a <_lseek_r+0x1e>
 8011964:	6823      	ldr	r3, [r4, #0]
 8011966:	b103      	cbz	r3, 801196a <_lseek_r+0x1e>
 8011968:	602b      	str	r3, [r5, #0]
 801196a:	bd38      	pop	{r3, r4, r5, pc}
 801196c:	200015d8 	.word	0x200015d8

08011970 <__malloc_lock>:
 8011970:	4770      	bx	lr

08011972 <__malloc_unlock>:
 8011972:	4770      	bx	lr

08011974 <_read_r>:
 8011974:	b538      	push	{r3, r4, r5, lr}
 8011976:	4c07      	ldr	r4, [pc, #28]	; (8011994 <_read_r+0x20>)
 8011978:	4605      	mov	r5, r0
 801197a:	4608      	mov	r0, r1
 801197c:	4611      	mov	r1, r2
 801197e:	2200      	movs	r2, #0
 8011980:	6022      	str	r2, [r4, #0]
 8011982:	461a      	mov	r2, r3
 8011984:	f7fe fed6 	bl	8010734 <_read>
 8011988:	1c43      	adds	r3, r0, #1
 801198a:	d102      	bne.n	8011992 <_read_r+0x1e>
 801198c:	6823      	ldr	r3, [r4, #0]
 801198e:	b103      	cbz	r3, 8011992 <_read_r+0x1e>
 8011990:	602b      	str	r3, [r5, #0]
 8011992:	bd38      	pop	{r3, r4, r5, pc}
 8011994:	200015d8 	.word	0x200015d8

08011998 <sqrt>:
 8011998:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801199c:	ed2d 8b02 	vpush	{d8}
 80119a0:	b08b      	sub	sp, #44	; 0x2c
 80119a2:	ec55 4b10 	vmov	r4, r5, d0
 80119a6:	f000 f851 	bl	8011a4c <__ieee754_sqrt>
 80119aa:	4b26      	ldr	r3, [pc, #152]	; (8011a44 <sqrt+0xac>)
 80119ac:	eeb0 8a40 	vmov.f32	s16, s0
 80119b0:	eef0 8a60 	vmov.f32	s17, s1
 80119b4:	f993 6000 	ldrsb.w	r6, [r3]
 80119b8:	1c73      	adds	r3, r6, #1
 80119ba:	d02a      	beq.n	8011a12 <sqrt+0x7a>
 80119bc:	4622      	mov	r2, r4
 80119be:	462b      	mov	r3, r5
 80119c0:	4620      	mov	r0, r4
 80119c2:	4629      	mov	r1, r5
 80119c4:	f7ef f8aa 	bl	8000b1c <__aeabi_dcmpun>
 80119c8:	4607      	mov	r7, r0
 80119ca:	bb10      	cbnz	r0, 8011a12 <sqrt+0x7a>
 80119cc:	f04f 0800 	mov.w	r8, #0
 80119d0:	f04f 0900 	mov.w	r9, #0
 80119d4:	4642      	mov	r2, r8
 80119d6:	464b      	mov	r3, r9
 80119d8:	4620      	mov	r0, r4
 80119da:	4629      	mov	r1, r5
 80119dc:	f7ef f876 	bl	8000acc <__aeabi_dcmplt>
 80119e0:	b1b8      	cbz	r0, 8011a12 <sqrt+0x7a>
 80119e2:	2301      	movs	r3, #1
 80119e4:	9300      	str	r3, [sp, #0]
 80119e6:	4b18      	ldr	r3, [pc, #96]	; (8011a48 <sqrt+0xb0>)
 80119e8:	9301      	str	r3, [sp, #4]
 80119ea:	9708      	str	r7, [sp, #32]
 80119ec:	e9cd 4504 	strd	r4, r5, [sp, #16]
 80119f0:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80119f4:	b9b6      	cbnz	r6, 8011a24 <sqrt+0x8c>
 80119f6:	e9cd 8906 	strd	r8, r9, [sp, #24]
 80119fa:	4668      	mov	r0, sp
 80119fc:	f000 f8d6 	bl	8011bac <matherr>
 8011a00:	b1d0      	cbz	r0, 8011a38 <sqrt+0xa0>
 8011a02:	9b08      	ldr	r3, [sp, #32]
 8011a04:	b11b      	cbz	r3, 8011a0e <sqrt+0x76>
 8011a06:	f7fe ff8f 	bl	8010928 <__errno>
 8011a0a:	9b08      	ldr	r3, [sp, #32]
 8011a0c:	6003      	str	r3, [r0, #0]
 8011a0e:	ed9d 8b06 	vldr	d8, [sp, #24]
 8011a12:	eeb0 0a48 	vmov.f32	s0, s16
 8011a16:	eef0 0a68 	vmov.f32	s1, s17
 8011a1a:	b00b      	add	sp, #44	; 0x2c
 8011a1c:	ecbd 8b02 	vpop	{d8}
 8011a20:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011a24:	4642      	mov	r2, r8
 8011a26:	464b      	mov	r3, r9
 8011a28:	4640      	mov	r0, r8
 8011a2a:	4649      	mov	r1, r9
 8011a2c:	f7ee ff06 	bl	800083c <__aeabi_ddiv>
 8011a30:	2e02      	cmp	r6, #2
 8011a32:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8011a36:	d1e0      	bne.n	80119fa <sqrt+0x62>
 8011a38:	f7fe ff76 	bl	8010928 <__errno>
 8011a3c:	2321      	movs	r3, #33	; 0x21
 8011a3e:	6003      	str	r3, [r0, #0]
 8011a40:	e7df      	b.n	8011a02 <sqrt+0x6a>
 8011a42:	bf00      	nop
 8011a44:	200000e8 	.word	0x200000e8
 8011a48:	0801213b 	.word	0x0801213b

08011a4c <__ieee754_sqrt>:
 8011a4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011a50:	4955      	ldr	r1, [pc, #340]	; (8011ba8 <__ieee754_sqrt+0x15c>)
 8011a52:	ec55 4b10 	vmov	r4, r5, d0
 8011a56:	43a9      	bics	r1, r5
 8011a58:	462b      	mov	r3, r5
 8011a5a:	462a      	mov	r2, r5
 8011a5c:	d112      	bne.n	8011a84 <__ieee754_sqrt+0x38>
 8011a5e:	ee10 2a10 	vmov	r2, s0
 8011a62:	ee10 0a10 	vmov	r0, s0
 8011a66:	4629      	mov	r1, r5
 8011a68:	f7ee fdbe 	bl	80005e8 <__aeabi_dmul>
 8011a6c:	4602      	mov	r2, r0
 8011a6e:	460b      	mov	r3, r1
 8011a70:	4620      	mov	r0, r4
 8011a72:	4629      	mov	r1, r5
 8011a74:	f7ee fc02 	bl	800027c <__adddf3>
 8011a78:	4604      	mov	r4, r0
 8011a7a:	460d      	mov	r5, r1
 8011a7c:	ec45 4b10 	vmov	d0, r4, r5
 8011a80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011a84:	2d00      	cmp	r5, #0
 8011a86:	ee10 0a10 	vmov	r0, s0
 8011a8a:	4621      	mov	r1, r4
 8011a8c:	dc0f      	bgt.n	8011aae <__ieee754_sqrt+0x62>
 8011a8e:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8011a92:	4330      	orrs	r0, r6
 8011a94:	d0f2      	beq.n	8011a7c <__ieee754_sqrt+0x30>
 8011a96:	b155      	cbz	r5, 8011aae <__ieee754_sqrt+0x62>
 8011a98:	ee10 2a10 	vmov	r2, s0
 8011a9c:	4620      	mov	r0, r4
 8011a9e:	4629      	mov	r1, r5
 8011aa0:	f7ee fbea 	bl	8000278 <__aeabi_dsub>
 8011aa4:	4602      	mov	r2, r0
 8011aa6:	460b      	mov	r3, r1
 8011aa8:	f7ee fec8 	bl	800083c <__aeabi_ddiv>
 8011aac:	e7e4      	b.n	8011a78 <__ieee754_sqrt+0x2c>
 8011aae:	151b      	asrs	r3, r3, #20
 8011ab0:	d073      	beq.n	8011b9a <__ieee754_sqrt+0x14e>
 8011ab2:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8011ab6:	07dd      	lsls	r5, r3, #31
 8011ab8:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8011abc:	bf48      	it	mi
 8011abe:	0fc8      	lsrmi	r0, r1, #31
 8011ac0:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8011ac4:	bf44      	itt	mi
 8011ac6:	0049      	lslmi	r1, r1, #1
 8011ac8:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 8011acc:	2500      	movs	r5, #0
 8011ace:	1058      	asrs	r0, r3, #1
 8011ad0:	0fcb      	lsrs	r3, r1, #31
 8011ad2:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 8011ad6:	0049      	lsls	r1, r1, #1
 8011ad8:	2316      	movs	r3, #22
 8011ada:	462c      	mov	r4, r5
 8011adc:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8011ae0:	19a7      	adds	r7, r4, r6
 8011ae2:	4297      	cmp	r7, r2
 8011ae4:	bfde      	ittt	le
 8011ae6:	19bc      	addle	r4, r7, r6
 8011ae8:	1bd2      	suble	r2, r2, r7
 8011aea:	19ad      	addle	r5, r5, r6
 8011aec:	0fcf      	lsrs	r7, r1, #31
 8011aee:	3b01      	subs	r3, #1
 8011af0:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 8011af4:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8011af8:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8011afc:	d1f0      	bne.n	8011ae0 <__ieee754_sqrt+0x94>
 8011afe:	f04f 0c20 	mov.w	ip, #32
 8011b02:	469e      	mov	lr, r3
 8011b04:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8011b08:	42a2      	cmp	r2, r4
 8011b0a:	eb06 070e 	add.w	r7, r6, lr
 8011b0e:	dc02      	bgt.n	8011b16 <__ieee754_sqrt+0xca>
 8011b10:	d112      	bne.n	8011b38 <__ieee754_sqrt+0xec>
 8011b12:	428f      	cmp	r7, r1
 8011b14:	d810      	bhi.n	8011b38 <__ieee754_sqrt+0xec>
 8011b16:	2f00      	cmp	r7, #0
 8011b18:	eb07 0e06 	add.w	lr, r7, r6
 8011b1c:	da42      	bge.n	8011ba4 <__ieee754_sqrt+0x158>
 8011b1e:	f1be 0f00 	cmp.w	lr, #0
 8011b22:	db3f      	blt.n	8011ba4 <__ieee754_sqrt+0x158>
 8011b24:	f104 0801 	add.w	r8, r4, #1
 8011b28:	1b12      	subs	r2, r2, r4
 8011b2a:	428f      	cmp	r7, r1
 8011b2c:	bf88      	it	hi
 8011b2e:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8011b32:	1bc9      	subs	r1, r1, r7
 8011b34:	4433      	add	r3, r6
 8011b36:	4644      	mov	r4, r8
 8011b38:	0052      	lsls	r2, r2, #1
 8011b3a:	f1bc 0c01 	subs.w	ip, ip, #1
 8011b3e:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 8011b42:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8011b46:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8011b4a:	d1dd      	bne.n	8011b08 <__ieee754_sqrt+0xbc>
 8011b4c:	430a      	orrs	r2, r1
 8011b4e:	d006      	beq.n	8011b5e <__ieee754_sqrt+0x112>
 8011b50:	1c5c      	adds	r4, r3, #1
 8011b52:	bf13      	iteet	ne
 8011b54:	3301      	addne	r3, #1
 8011b56:	3501      	addeq	r5, #1
 8011b58:	4663      	moveq	r3, ip
 8011b5a:	f023 0301 	bicne.w	r3, r3, #1
 8011b5e:	106a      	asrs	r2, r5, #1
 8011b60:	085b      	lsrs	r3, r3, #1
 8011b62:	07e9      	lsls	r1, r5, #31
 8011b64:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8011b68:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8011b6c:	bf48      	it	mi
 8011b6e:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8011b72:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 8011b76:	461c      	mov	r4, r3
 8011b78:	e780      	b.n	8011a7c <__ieee754_sqrt+0x30>
 8011b7a:	0aca      	lsrs	r2, r1, #11
 8011b7c:	3815      	subs	r0, #21
 8011b7e:	0549      	lsls	r1, r1, #21
 8011b80:	2a00      	cmp	r2, #0
 8011b82:	d0fa      	beq.n	8011b7a <__ieee754_sqrt+0x12e>
 8011b84:	02d6      	lsls	r6, r2, #11
 8011b86:	d50a      	bpl.n	8011b9e <__ieee754_sqrt+0x152>
 8011b88:	f1c3 0420 	rsb	r4, r3, #32
 8011b8c:	fa21 f404 	lsr.w	r4, r1, r4
 8011b90:	1e5d      	subs	r5, r3, #1
 8011b92:	4099      	lsls	r1, r3
 8011b94:	4322      	orrs	r2, r4
 8011b96:	1b43      	subs	r3, r0, r5
 8011b98:	e78b      	b.n	8011ab2 <__ieee754_sqrt+0x66>
 8011b9a:	4618      	mov	r0, r3
 8011b9c:	e7f0      	b.n	8011b80 <__ieee754_sqrt+0x134>
 8011b9e:	0052      	lsls	r2, r2, #1
 8011ba0:	3301      	adds	r3, #1
 8011ba2:	e7ef      	b.n	8011b84 <__ieee754_sqrt+0x138>
 8011ba4:	46a0      	mov	r8, r4
 8011ba6:	e7bf      	b.n	8011b28 <__ieee754_sqrt+0xdc>
 8011ba8:	7ff00000 	.word	0x7ff00000

08011bac <matherr>:
 8011bac:	2000      	movs	r0, #0
 8011bae:	4770      	bx	lr

08011bb0 <_init>:
 8011bb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011bb2:	bf00      	nop
 8011bb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011bb6:	bc08      	pop	{r3}
 8011bb8:	469e      	mov	lr, r3
 8011bba:	4770      	bx	lr

08011bbc <_fini>:
 8011bbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011bbe:	bf00      	nop
 8011bc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011bc2:	bc08      	pop	{r3}
 8011bc4:	469e      	mov	lr, r3
 8011bc6:	4770      	bx	lr
