
mouse2019.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f28c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000590  0800f41c  0800f41c  0001f41c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f9ac  0800f9ac  0002016c  2**0
                  CONTENTS
  4 .ARM          00000008  0800f9ac  0800f9ac  0001f9ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f9b4  0800f9b4  0002016c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f9b4  0800f9b4  0001f9b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f9b8  0800f9b8  0001f9b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000016c  20000000  0800f9bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000eb0  2000016c  0800fb28  0002016c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000101c  0800fb28  0002101c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002016c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016213  00000000  00000000  0002019c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003044  00000000  00000000  000363af  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000013d0  00000000  00000000  000393f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001280  00000000  00000000  0003a7c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000224d7  00000000  00000000  0003ba48  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00010545  00000000  00000000  0005df1f  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c6fe5  00000000  00000000  0006e464  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00135449  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005be0  00000000  00000000  001354c4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000016c 	.word	0x2000016c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800f404 	.word	0x0800f404

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000170 	.word	0x20000170
 80001cc:	0800f404 	.word	0x0800f404

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ae:	f1a4 0401 	sub.w	r4, r4, #1
 80003b2:	d1e9      	bne.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__gedf2>:
 8000a0c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a10:	e006      	b.n	8000a20 <__cmpdf2+0x4>
 8000a12:	bf00      	nop

08000a14 <__ledf2>:
 8000a14:	f04f 0c01 	mov.w	ip, #1
 8000a18:	e002      	b.n	8000a20 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__cmpdf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a36:	d01b      	beq.n	8000a70 <__cmpdf2+0x54>
 8000a38:	b001      	add	sp, #4
 8000a3a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a3e:	bf0c      	ite	eq
 8000a40:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a44:	ea91 0f03 	teqne	r1, r3
 8000a48:	bf02      	ittt	eq
 8000a4a:	ea90 0f02 	teqeq	r0, r2
 8000a4e:	2000      	moveq	r0, #0
 8000a50:	4770      	bxeq	lr
 8000a52:	f110 0f00 	cmn.w	r0, #0
 8000a56:	ea91 0f03 	teq	r1, r3
 8000a5a:	bf58      	it	pl
 8000a5c:	4299      	cmppl	r1, r3
 8000a5e:	bf08      	it	eq
 8000a60:	4290      	cmpeq	r0, r2
 8000a62:	bf2c      	ite	cs
 8000a64:	17d8      	asrcs	r0, r3, #31
 8000a66:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a6a:	f040 0001 	orr.w	r0, r0, #1
 8000a6e:	4770      	bx	lr
 8000a70:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a78:	d102      	bne.n	8000a80 <__cmpdf2+0x64>
 8000a7a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a7e:	d107      	bne.n	8000a90 <__cmpdf2+0x74>
 8000a80:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d1d6      	bne.n	8000a38 <__cmpdf2+0x1c>
 8000a8a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a8e:	d0d3      	beq.n	8000a38 <__cmpdf2+0x1c>
 8000a90:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop

08000a98 <__aeabi_cdrcmple>:
 8000a98:	4684      	mov	ip, r0
 8000a9a:	4610      	mov	r0, r2
 8000a9c:	4662      	mov	r2, ip
 8000a9e:	468c      	mov	ip, r1
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4663      	mov	r3, ip
 8000aa4:	e000      	b.n	8000aa8 <__aeabi_cdcmpeq>
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdcmpeq>:
 8000aa8:	b501      	push	{r0, lr}
 8000aaa:	f7ff ffb7 	bl	8000a1c <__cmpdf2>
 8000aae:	2800      	cmp	r0, #0
 8000ab0:	bf48      	it	mi
 8000ab2:	f110 0f00 	cmnmi.w	r0, #0
 8000ab6:	bd01      	pop	{r0, pc}

08000ab8 <__aeabi_dcmpeq>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff fff4 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ac0:	bf0c      	ite	eq
 8000ac2:	2001      	moveq	r0, #1
 8000ac4:	2000      	movne	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_dcmplt>:
 8000acc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad0:	f7ff ffea 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ad4:	bf34      	ite	cc
 8000ad6:	2001      	movcc	r0, #1
 8000ad8:	2000      	movcs	r0, #0
 8000ada:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ade:	bf00      	nop

08000ae0 <__aeabi_dcmple>:
 8000ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae4:	f7ff ffe0 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ae8:	bf94      	ite	ls
 8000aea:	2001      	movls	r0, #1
 8000aec:	2000      	movhi	r0, #0
 8000aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af2:	bf00      	nop

08000af4 <__aeabi_dcmpge>:
 8000af4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af8:	f7ff ffce 	bl	8000a98 <__aeabi_cdrcmple>
 8000afc:	bf94      	ite	ls
 8000afe:	2001      	movls	r0, #1
 8000b00:	2000      	movhi	r0, #0
 8000b02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b06:	bf00      	nop

08000b08 <__aeabi_dcmpgt>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff ffc4 	bl	8000a98 <__aeabi_cdrcmple>
 8000b10:	bf34      	ite	cc
 8000b12:	2001      	movcc	r0, #1
 8000b14:	2000      	movcs	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmpun>:
 8000b1c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b24:	d102      	bne.n	8000b2c <__aeabi_dcmpun+0x10>
 8000b26:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b2a:	d10a      	bne.n	8000b42 <__aeabi_dcmpun+0x26>
 8000b2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x20>
 8000b36:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b3a:	d102      	bne.n	8000b42 <__aeabi_dcmpun+0x26>
 8000b3c:	f04f 0000 	mov.w	r0, #0
 8000b40:	4770      	bx	lr
 8000b42:	f04f 0001 	mov.w	r0, #1
 8000b46:	4770      	bx	lr

08000b48 <__aeabi_d2iz>:
 8000b48:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b4c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b50:	d215      	bcs.n	8000b7e <__aeabi_d2iz+0x36>
 8000b52:	d511      	bpl.n	8000b78 <__aeabi_d2iz+0x30>
 8000b54:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b58:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b5c:	d912      	bls.n	8000b84 <__aeabi_d2iz+0x3c>
 8000b5e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b62:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b66:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b6a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b6e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	4770      	bx	lr
 8000b78:	f04f 0000 	mov.w	r0, #0
 8000b7c:	4770      	bx	lr
 8000b7e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b82:	d105      	bne.n	8000b90 <__aeabi_d2iz+0x48>
 8000b84:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b88:	bf08      	it	eq
 8000b8a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b8e:	4770      	bx	lr
 8000b90:	f04f 0000 	mov.w	r0, #0
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop

08000b98 <__aeabi_d2f>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ba0:	bf24      	itt	cs
 8000ba2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ba6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000baa:	d90d      	bls.n	8000bc8 <__aeabi_d2f+0x30>
 8000bac:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bb0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bb4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bb8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bbc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bc0:	bf08      	it	eq
 8000bc2:	f020 0001 	biceq.w	r0, r0, #1
 8000bc6:	4770      	bx	lr
 8000bc8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bcc:	d121      	bne.n	8000c12 <__aeabi_d2f+0x7a>
 8000bce:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bd2:	bfbc      	itt	lt
 8000bd4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	4770      	bxlt	lr
 8000bda:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bde:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000be2:	f1c2 0218 	rsb	r2, r2, #24
 8000be6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bea:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bee:	fa20 f002 	lsr.w	r0, r0, r2
 8000bf2:	bf18      	it	ne
 8000bf4:	f040 0001 	orrne.w	r0, r0, #1
 8000bf8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bfc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c00:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c04:	ea40 000c 	orr.w	r0, r0, ip
 8000c08:	fa23 f302 	lsr.w	r3, r3, r2
 8000c0c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c10:	e7cc      	b.n	8000bac <__aeabi_d2f+0x14>
 8000c12:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c16:	d107      	bne.n	8000c28 <__aeabi_d2f+0x90>
 8000c18:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c1c:	bf1e      	ittt	ne
 8000c1e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c22:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c26:	4770      	bxne	lr
 8000c28:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c2c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c30:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c34:	4770      	bx	lr
 8000c36:	bf00      	nop

08000c38 <__aeabi_uldivmod>:
 8000c38:	b953      	cbnz	r3, 8000c50 <__aeabi_uldivmod+0x18>
 8000c3a:	b94a      	cbnz	r2, 8000c50 <__aeabi_uldivmod+0x18>
 8000c3c:	2900      	cmp	r1, #0
 8000c3e:	bf08      	it	eq
 8000c40:	2800      	cmpeq	r0, #0
 8000c42:	bf1c      	itt	ne
 8000c44:	f04f 31ff 	movne.w	r1, #4294967295
 8000c48:	f04f 30ff 	movne.w	r0, #4294967295
 8000c4c:	f000 b972 	b.w	8000f34 <__aeabi_idiv0>
 8000c50:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c54:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c58:	f000 f806 	bl	8000c68 <__udivmoddi4>
 8000c5c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c60:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c64:	b004      	add	sp, #16
 8000c66:	4770      	bx	lr

08000c68 <__udivmoddi4>:
 8000c68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c6c:	9e08      	ldr	r6, [sp, #32]
 8000c6e:	4604      	mov	r4, r0
 8000c70:	4688      	mov	r8, r1
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d14b      	bne.n	8000d0e <__udivmoddi4+0xa6>
 8000c76:	428a      	cmp	r2, r1
 8000c78:	4615      	mov	r5, r2
 8000c7a:	d967      	bls.n	8000d4c <__udivmoddi4+0xe4>
 8000c7c:	fab2 f282 	clz	r2, r2
 8000c80:	b14a      	cbz	r2, 8000c96 <__udivmoddi4+0x2e>
 8000c82:	f1c2 0720 	rsb	r7, r2, #32
 8000c86:	fa01 f302 	lsl.w	r3, r1, r2
 8000c8a:	fa20 f707 	lsr.w	r7, r0, r7
 8000c8e:	4095      	lsls	r5, r2
 8000c90:	ea47 0803 	orr.w	r8, r7, r3
 8000c94:	4094      	lsls	r4, r2
 8000c96:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c9a:	0c23      	lsrs	r3, r4, #16
 8000c9c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000ca0:	fa1f fc85 	uxth.w	ip, r5
 8000ca4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000ca8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cac:	fb07 f10c 	mul.w	r1, r7, ip
 8000cb0:	4299      	cmp	r1, r3
 8000cb2:	d909      	bls.n	8000cc8 <__udivmoddi4+0x60>
 8000cb4:	18eb      	adds	r3, r5, r3
 8000cb6:	f107 30ff 	add.w	r0, r7, #4294967295
 8000cba:	f080 811b 	bcs.w	8000ef4 <__udivmoddi4+0x28c>
 8000cbe:	4299      	cmp	r1, r3
 8000cc0:	f240 8118 	bls.w	8000ef4 <__udivmoddi4+0x28c>
 8000cc4:	3f02      	subs	r7, #2
 8000cc6:	442b      	add	r3, r5
 8000cc8:	1a5b      	subs	r3, r3, r1
 8000cca:	b2a4      	uxth	r4, r4
 8000ccc:	fbb3 f0fe 	udiv	r0, r3, lr
 8000cd0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000cd4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cd8:	fb00 fc0c 	mul.w	ip, r0, ip
 8000cdc:	45a4      	cmp	ip, r4
 8000cde:	d909      	bls.n	8000cf4 <__udivmoddi4+0x8c>
 8000ce0:	192c      	adds	r4, r5, r4
 8000ce2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ce6:	f080 8107 	bcs.w	8000ef8 <__udivmoddi4+0x290>
 8000cea:	45a4      	cmp	ip, r4
 8000cec:	f240 8104 	bls.w	8000ef8 <__udivmoddi4+0x290>
 8000cf0:	3802      	subs	r0, #2
 8000cf2:	442c      	add	r4, r5
 8000cf4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000cf8:	eba4 040c 	sub.w	r4, r4, ip
 8000cfc:	2700      	movs	r7, #0
 8000cfe:	b11e      	cbz	r6, 8000d08 <__udivmoddi4+0xa0>
 8000d00:	40d4      	lsrs	r4, r2
 8000d02:	2300      	movs	r3, #0
 8000d04:	e9c6 4300 	strd	r4, r3, [r6]
 8000d08:	4639      	mov	r1, r7
 8000d0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d0e:	428b      	cmp	r3, r1
 8000d10:	d909      	bls.n	8000d26 <__udivmoddi4+0xbe>
 8000d12:	2e00      	cmp	r6, #0
 8000d14:	f000 80eb 	beq.w	8000eee <__udivmoddi4+0x286>
 8000d18:	2700      	movs	r7, #0
 8000d1a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d1e:	4638      	mov	r0, r7
 8000d20:	4639      	mov	r1, r7
 8000d22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d26:	fab3 f783 	clz	r7, r3
 8000d2a:	2f00      	cmp	r7, #0
 8000d2c:	d147      	bne.n	8000dbe <__udivmoddi4+0x156>
 8000d2e:	428b      	cmp	r3, r1
 8000d30:	d302      	bcc.n	8000d38 <__udivmoddi4+0xd0>
 8000d32:	4282      	cmp	r2, r0
 8000d34:	f200 80fa 	bhi.w	8000f2c <__udivmoddi4+0x2c4>
 8000d38:	1a84      	subs	r4, r0, r2
 8000d3a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d3e:	2001      	movs	r0, #1
 8000d40:	4698      	mov	r8, r3
 8000d42:	2e00      	cmp	r6, #0
 8000d44:	d0e0      	beq.n	8000d08 <__udivmoddi4+0xa0>
 8000d46:	e9c6 4800 	strd	r4, r8, [r6]
 8000d4a:	e7dd      	b.n	8000d08 <__udivmoddi4+0xa0>
 8000d4c:	b902      	cbnz	r2, 8000d50 <__udivmoddi4+0xe8>
 8000d4e:	deff      	udf	#255	; 0xff
 8000d50:	fab2 f282 	clz	r2, r2
 8000d54:	2a00      	cmp	r2, #0
 8000d56:	f040 808f 	bne.w	8000e78 <__udivmoddi4+0x210>
 8000d5a:	1b49      	subs	r1, r1, r5
 8000d5c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d60:	fa1f f885 	uxth.w	r8, r5
 8000d64:	2701      	movs	r7, #1
 8000d66:	fbb1 fcfe 	udiv	ip, r1, lr
 8000d6a:	0c23      	lsrs	r3, r4, #16
 8000d6c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000d70:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d74:	fb08 f10c 	mul.w	r1, r8, ip
 8000d78:	4299      	cmp	r1, r3
 8000d7a:	d907      	bls.n	8000d8c <__udivmoddi4+0x124>
 8000d7c:	18eb      	adds	r3, r5, r3
 8000d7e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d82:	d202      	bcs.n	8000d8a <__udivmoddi4+0x122>
 8000d84:	4299      	cmp	r1, r3
 8000d86:	f200 80cd 	bhi.w	8000f24 <__udivmoddi4+0x2bc>
 8000d8a:	4684      	mov	ip, r0
 8000d8c:	1a59      	subs	r1, r3, r1
 8000d8e:	b2a3      	uxth	r3, r4
 8000d90:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d94:	fb0e 1410 	mls	r4, lr, r0, r1
 8000d98:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d9c:	fb08 f800 	mul.w	r8, r8, r0
 8000da0:	45a0      	cmp	r8, r4
 8000da2:	d907      	bls.n	8000db4 <__udivmoddi4+0x14c>
 8000da4:	192c      	adds	r4, r5, r4
 8000da6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000daa:	d202      	bcs.n	8000db2 <__udivmoddi4+0x14a>
 8000dac:	45a0      	cmp	r8, r4
 8000dae:	f200 80b6 	bhi.w	8000f1e <__udivmoddi4+0x2b6>
 8000db2:	4618      	mov	r0, r3
 8000db4:	eba4 0408 	sub.w	r4, r4, r8
 8000db8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000dbc:	e79f      	b.n	8000cfe <__udivmoddi4+0x96>
 8000dbe:	f1c7 0c20 	rsb	ip, r7, #32
 8000dc2:	40bb      	lsls	r3, r7
 8000dc4:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000dc8:	ea4e 0e03 	orr.w	lr, lr, r3
 8000dcc:	fa01 f407 	lsl.w	r4, r1, r7
 8000dd0:	fa20 f50c 	lsr.w	r5, r0, ip
 8000dd4:	fa21 f30c 	lsr.w	r3, r1, ip
 8000dd8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000ddc:	4325      	orrs	r5, r4
 8000dde:	fbb3 f9f8 	udiv	r9, r3, r8
 8000de2:	0c2c      	lsrs	r4, r5, #16
 8000de4:	fb08 3319 	mls	r3, r8, r9, r3
 8000de8:	fa1f fa8e 	uxth.w	sl, lr
 8000dec:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000df0:	fb09 f40a 	mul.w	r4, r9, sl
 8000df4:	429c      	cmp	r4, r3
 8000df6:	fa02 f207 	lsl.w	r2, r2, r7
 8000dfa:	fa00 f107 	lsl.w	r1, r0, r7
 8000dfe:	d90b      	bls.n	8000e18 <__udivmoddi4+0x1b0>
 8000e00:	eb1e 0303 	adds.w	r3, lr, r3
 8000e04:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e08:	f080 8087 	bcs.w	8000f1a <__udivmoddi4+0x2b2>
 8000e0c:	429c      	cmp	r4, r3
 8000e0e:	f240 8084 	bls.w	8000f1a <__udivmoddi4+0x2b2>
 8000e12:	f1a9 0902 	sub.w	r9, r9, #2
 8000e16:	4473      	add	r3, lr
 8000e18:	1b1b      	subs	r3, r3, r4
 8000e1a:	b2ad      	uxth	r5, r5
 8000e1c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e20:	fb08 3310 	mls	r3, r8, r0, r3
 8000e24:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e28:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e2c:	45a2      	cmp	sl, r4
 8000e2e:	d908      	bls.n	8000e42 <__udivmoddi4+0x1da>
 8000e30:	eb1e 0404 	adds.w	r4, lr, r4
 8000e34:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e38:	d26b      	bcs.n	8000f12 <__udivmoddi4+0x2aa>
 8000e3a:	45a2      	cmp	sl, r4
 8000e3c:	d969      	bls.n	8000f12 <__udivmoddi4+0x2aa>
 8000e3e:	3802      	subs	r0, #2
 8000e40:	4474      	add	r4, lr
 8000e42:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e46:	fba0 8902 	umull	r8, r9, r0, r2
 8000e4a:	eba4 040a 	sub.w	r4, r4, sl
 8000e4e:	454c      	cmp	r4, r9
 8000e50:	46c2      	mov	sl, r8
 8000e52:	464b      	mov	r3, r9
 8000e54:	d354      	bcc.n	8000f00 <__udivmoddi4+0x298>
 8000e56:	d051      	beq.n	8000efc <__udivmoddi4+0x294>
 8000e58:	2e00      	cmp	r6, #0
 8000e5a:	d069      	beq.n	8000f30 <__udivmoddi4+0x2c8>
 8000e5c:	ebb1 050a 	subs.w	r5, r1, sl
 8000e60:	eb64 0403 	sbc.w	r4, r4, r3
 8000e64:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000e68:	40fd      	lsrs	r5, r7
 8000e6a:	40fc      	lsrs	r4, r7
 8000e6c:	ea4c 0505 	orr.w	r5, ip, r5
 8000e70:	e9c6 5400 	strd	r5, r4, [r6]
 8000e74:	2700      	movs	r7, #0
 8000e76:	e747      	b.n	8000d08 <__udivmoddi4+0xa0>
 8000e78:	f1c2 0320 	rsb	r3, r2, #32
 8000e7c:	fa20 f703 	lsr.w	r7, r0, r3
 8000e80:	4095      	lsls	r5, r2
 8000e82:	fa01 f002 	lsl.w	r0, r1, r2
 8000e86:	fa21 f303 	lsr.w	r3, r1, r3
 8000e8a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e8e:	4338      	orrs	r0, r7
 8000e90:	0c01      	lsrs	r1, r0, #16
 8000e92:	fbb3 f7fe 	udiv	r7, r3, lr
 8000e96:	fa1f f885 	uxth.w	r8, r5
 8000e9a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000e9e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ea2:	fb07 f308 	mul.w	r3, r7, r8
 8000ea6:	428b      	cmp	r3, r1
 8000ea8:	fa04 f402 	lsl.w	r4, r4, r2
 8000eac:	d907      	bls.n	8000ebe <__udivmoddi4+0x256>
 8000eae:	1869      	adds	r1, r5, r1
 8000eb0:	f107 3cff 	add.w	ip, r7, #4294967295
 8000eb4:	d22f      	bcs.n	8000f16 <__udivmoddi4+0x2ae>
 8000eb6:	428b      	cmp	r3, r1
 8000eb8:	d92d      	bls.n	8000f16 <__udivmoddi4+0x2ae>
 8000eba:	3f02      	subs	r7, #2
 8000ebc:	4429      	add	r1, r5
 8000ebe:	1acb      	subs	r3, r1, r3
 8000ec0:	b281      	uxth	r1, r0
 8000ec2:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ec6:	fb0e 3310 	mls	r3, lr, r0, r3
 8000eca:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ece:	fb00 f308 	mul.w	r3, r0, r8
 8000ed2:	428b      	cmp	r3, r1
 8000ed4:	d907      	bls.n	8000ee6 <__udivmoddi4+0x27e>
 8000ed6:	1869      	adds	r1, r5, r1
 8000ed8:	f100 3cff 	add.w	ip, r0, #4294967295
 8000edc:	d217      	bcs.n	8000f0e <__udivmoddi4+0x2a6>
 8000ede:	428b      	cmp	r3, r1
 8000ee0:	d915      	bls.n	8000f0e <__udivmoddi4+0x2a6>
 8000ee2:	3802      	subs	r0, #2
 8000ee4:	4429      	add	r1, r5
 8000ee6:	1ac9      	subs	r1, r1, r3
 8000ee8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000eec:	e73b      	b.n	8000d66 <__udivmoddi4+0xfe>
 8000eee:	4637      	mov	r7, r6
 8000ef0:	4630      	mov	r0, r6
 8000ef2:	e709      	b.n	8000d08 <__udivmoddi4+0xa0>
 8000ef4:	4607      	mov	r7, r0
 8000ef6:	e6e7      	b.n	8000cc8 <__udivmoddi4+0x60>
 8000ef8:	4618      	mov	r0, r3
 8000efa:	e6fb      	b.n	8000cf4 <__udivmoddi4+0x8c>
 8000efc:	4541      	cmp	r1, r8
 8000efe:	d2ab      	bcs.n	8000e58 <__udivmoddi4+0x1f0>
 8000f00:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f04:	eb69 020e 	sbc.w	r2, r9, lr
 8000f08:	3801      	subs	r0, #1
 8000f0a:	4613      	mov	r3, r2
 8000f0c:	e7a4      	b.n	8000e58 <__udivmoddi4+0x1f0>
 8000f0e:	4660      	mov	r0, ip
 8000f10:	e7e9      	b.n	8000ee6 <__udivmoddi4+0x27e>
 8000f12:	4618      	mov	r0, r3
 8000f14:	e795      	b.n	8000e42 <__udivmoddi4+0x1da>
 8000f16:	4667      	mov	r7, ip
 8000f18:	e7d1      	b.n	8000ebe <__udivmoddi4+0x256>
 8000f1a:	4681      	mov	r9, r0
 8000f1c:	e77c      	b.n	8000e18 <__udivmoddi4+0x1b0>
 8000f1e:	3802      	subs	r0, #2
 8000f20:	442c      	add	r4, r5
 8000f22:	e747      	b.n	8000db4 <__udivmoddi4+0x14c>
 8000f24:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f28:	442b      	add	r3, r5
 8000f2a:	e72f      	b.n	8000d8c <__udivmoddi4+0x124>
 8000f2c:	4638      	mov	r0, r7
 8000f2e:	e708      	b.n	8000d42 <__udivmoddi4+0xda>
 8000f30:	4637      	mov	r7, r6
 8000f32:	e6e9      	b.n	8000d08 <__udivmoddi4+0xa0>

08000f34 <__aeabi_idiv0>:
 8000f34:	4770      	bx	lr
 8000f36:	bf00      	nop

08000f38 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f3c:	4b0e      	ldr	r3, [pc, #56]	; (8000f78 <HAL_Init+0x40>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	4a0d      	ldr	r2, [pc, #52]	; (8000f78 <HAL_Init+0x40>)
 8000f42:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f46:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f48:	4b0b      	ldr	r3, [pc, #44]	; (8000f78 <HAL_Init+0x40>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	4a0a      	ldr	r2, [pc, #40]	; (8000f78 <HAL_Init+0x40>)
 8000f4e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f52:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f54:	4b08      	ldr	r3, [pc, #32]	; (8000f78 <HAL_Init+0x40>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	4a07      	ldr	r2, [pc, #28]	; (8000f78 <HAL_Init+0x40>)
 8000f5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f5e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f60:	2003      	movs	r0, #3
 8000f62:	f000 fd07 	bl	8001974 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f66:	2000      	movs	r0, #0
 8000f68:	f000 f808 	bl	8000f7c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f6c:	f00c fd8a 	bl	800da84 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f70:	2300      	movs	r3, #0
}
 8000f72:	4618      	mov	r0, r3
 8000f74:	bd80      	pop	{r7, pc}
 8000f76:	bf00      	nop
 8000f78:	40023c00 	.word	0x40023c00

08000f7c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b082      	sub	sp, #8
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f84:	4b12      	ldr	r3, [pc, #72]	; (8000fd0 <HAL_InitTick+0x54>)
 8000f86:	681a      	ldr	r2, [r3, #0]
 8000f88:	4b12      	ldr	r3, [pc, #72]	; (8000fd4 <HAL_InitTick+0x58>)
 8000f8a:	781b      	ldrb	r3, [r3, #0]
 8000f8c:	4619      	mov	r1, r3
 8000f8e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f92:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f96:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	f000 fd1f 	bl	80019de <HAL_SYSTICK_Config>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d001      	beq.n	8000faa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	e00e      	b.n	8000fc8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	2b0f      	cmp	r3, #15
 8000fae:	d80a      	bhi.n	8000fc6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	6879      	ldr	r1, [r7, #4]
 8000fb4:	f04f 30ff 	mov.w	r0, #4294967295
 8000fb8:	f000 fce7 	bl	800198a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fbc:	4a06      	ldr	r2, [pc, #24]	; (8000fd8 <HAL_InitTick+0x5c>)
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	e000      	b.n	8000fc8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000fc6:	2301      	movs	r3, #1
}
 8000fc8:	4618      	mov	r0, r3
 8000fca:	3708      	adds	r7, #8
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd80      	pop	{r7, pc}
 8000fd0:	20000100 	.word	0x20000100
 8000fd4:	20000004 	.word	0x20000004
 8000fd8:	20000000 	.word	0x20000000

08000fdc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fe0:	4b06      	ldr	r3, [pc, #24]	; (8000ffc <HAL_IncTick+0x20>)
 8000fe2:	781b      	ldrb	r3, [r3, #0]
 8000fe4:	461a      	mov	r2, r3
 8000fe6:	4b06      	ldr	r3, [pc, #24]	; (8001000 <HAL_IncTick+0x24>)
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	4413      	add	r3, r2
 8000fec:	4a04      	ldr	r2, [pc, #16]	; (8001000 <HAL_IncTick+0x24>)
 8000fee:	6013      	str	r3, [r2, #0]
}
 8000ff0:	bf00      	nop
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff8:	4770      	bx	lr
 8000ffa:	bf00      	nop
 8000ffc:	20000004 	.word	0x20000004
 8001000:	200001a0 	.word	0x200001a0

08001004 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001004:	b480      	push	{r7}
 8001006:	af00      	add	r7, sp, #0
  return uwTick;
 8001008:	4b03      	ldr	r3, [pc, #12]	; (8001018 <HAL_GetTick+0x14>)
 800100a:	681b      	ldr	r3, [r3, #0]
}
 800100c:	4618      	mov	r0, r3
 800100e:	46bd      	mov	sp, r7
 8001010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop
 8001018:	200001a0 	.word	0x200001a0

0800101c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b084      	sub	sp, #16
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001024:	f7ff ffee 	bl	8001004 <HAL_GetTick>
 8001028:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001034:	d005      	beq.n	8001042 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001036:	4b09      	ldr	r3, [pc, #36]	; (800105c <HAL_Delay+0x40>)
 8001038:	781b      	ldrb	r3, [r3, #0]
 800103a:	461a      	mov	r2, r3
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	4413      	add	r3, r2
 8001040:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001042:	bf00      	nop
 8001044:	f7ff ffde 	bl	8001004 <HAL_GetTick>
 8001048:	4602      	mov	r2, r0
 800104a:	68bb      	ldr	r3, [r7, #8]
 800104c:	1ad3      	subs	r3, r2, r3
 800104e:	68fa      	ldr	r2, [r7, #12]
 8001050:	429a      	cmp	r2, r3
 8001052:	d8f7      	bhi.n	8001044 <HAL_Delay+0x28>
  {
  }
}
 8001054:	bf00      	nop
 8001056:	3710      	adds	r7, #16
 8001058:	46bd      	mov	sp, r7
 800105a:	bd80      	pop	{r7, pc}
 800105c:	20000004 	.word	0x20000004

08001060 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b084      	sub	sp, #16
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001068:	2300      	movs	r3, #0
 800106a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	2b00      	cmp	r3, #0
 8001070:	d101      	bne.n	8001076 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001072:	2301      	movs	r3, #1
 8001074:	e033      	b.n	80010de <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800107a:	2b00      	cmp	r3, #0
 800107c:	d109      	bne.n	8001092 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800107e:	6878      	ldr	r0, [r7, #4]
 8001080:	f00c fd28 	bl	800dad4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	2200      	movs	r2, #0
 8001088:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	2200      	movs	r2, #0
 800108e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001096:	f003 0310 	and.w	r3, r3, #16
 800109a:	2b00      	cmp	r3, #0
 800109c:	d118      	bne.n	80010d0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010a2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80010a6:	f023 0302 	bic.w	r3, r3, #2
 80010aa:	f043 0202 	orr.w	r2, r3, #2
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80010b2:	6878      	ldr	r0, [r7, #4]
 80010b4:	f000 fa92 	bl	80015dc <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	2200      	movs	r2, #0
 80010bc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010c2:	f023 0303 	bic.w	r3, r3, #3
 80010c6:	f043 0201 	orr.w	r2, r3, #1
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	641a      	str	r2, [r3, #64]	; 0x40
 80010ce:	e001      	b.n	80010d4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80010d0:	2301      	movs	r3, #1
 80010d2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	2200      	movs	r2, #0
 80010d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80010dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80010de:	4618      	mov	r0, r3
 80010e0:	3710      	adds	r7, #16
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}
	...

080010e8 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80010e8:	b480      	push	{r7}
 80010ea:	b085      	sub	sp, #20
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80010f0:	2300      	movs	r3, #0
 80010f2:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80010fa:	2b01      	cmp	r3, #1
 80010fc:	d101      	bne.n	8001102 <HAL_ADC_Start+0x1a>
 80010fe:	2302      	movs	r3, #2
 8001100:	e0a5      	b.n	800124e <HAL_ADC_Start+0x166>
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	2201      	movs	r2, #1
 8001106:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	689b      	ldr	r3, [r3, #8]
 8001110:	f003 0301 	and.w	r3, r3, #1
 8001114:	2b01      	cmp	r3, #1
 8001116:	d018      	beq.n	800114a <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	689a      	ldr	r2, [r3, #8]
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	f042 0201 	orr.w	r2, r2, #1
 8001126:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001128:	4b4c      	ldr	r3, [pc, #304]	; (800125c <HAL_ADC_Start+0x174>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	4a4c      	ldr	r2, [pc, #304]	; (8001260 <HAL_ADC_Start+0x178>)
 800112e:	fba2 2303 	umull	r2, r3, r2, r3
 8001132:	0c9a      	lsrs	r2, r3, #18
 8001134:	4613      	mov	r3, r2
 8001136:	005b      	lsls	r3, r3, #1
 8001138:	4413      	add	r3, r2
 800113a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 800113c:	e002      	b.n	8001144 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800113e:	68bb      	ldr	r3, [r7, #8]
 8001140:	3b01      	subs	r3, #1
 8001142:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001144:	68bb      	ldr	r3, [r7, #8]
 8001146:	2b00      	cmp	r3, #0
 8001148:	d1f9      	bne.n	800113e <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	689b      	ldr	r3, [r3, #8]
 8001150:	f003 0301 	and.w	r3, r3, #1
 8001154:	2b01      	cmp	r3, #1
 8001156:	d179      	bne.n	800124c <HAL_ADC_Start+0x164>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800115c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001160:	f023 0301 	bic.w	r3, r3, #1
 8001164:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	685b      	ldr	r3, [r3, #4]
 8001172:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001176:	2b00      	cmp	r3, #0
 8001178:	d007      	beq.n	800118a <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800117e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001182:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800118e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001192:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001196:	d106      	bne.n	80011a6 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800119c:	f023 0206 	bic.w	r2, r3, #6
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	645a      	str	r2, [r3, #68]	; 0x44
 80011a4:	e002      	b.n	80011ac <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	2200      	movs	r2, #0
 80011aa:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	2200      	movs	r2, #0
 80011b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80011b4:	4b2b      	ldr	r3, [pc, #172]	; (8001264 <HAL_ADC_Start+0x17c>)
 80011b6:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80011c0:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	685b      	ldr	r3, [r3, #4]
 80011c6:	f003 031f 	and.w	r3, r3, #31
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d12a      	bne.n	8001224 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	4a25      	ldr	r2, [pc, #148]	; (8001268 <HAL_ADC_Start+0x180>)
 80011d4:	4293      	cmp	r3, r2
 80011d6:	d015      	beq.n	8001204 <HAL_ADC_Start+0x11c>
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	4a23      	ldr	r2, [pc, #140]	; (800126c <HAL_ADC_Start+0x184>)
 80011de:	4293      	cmp	r3, r2
 80011e0:	d105      	bne.n	80011ee <HAL_ADC_Start+0x106>
 80011e2:	4b20      	ldr	r3, [pc, #128]	; (8001264 <HAL_ADC_Start+0x17c>)
 80011e4:	685b      	ldr	r3, [r3, #4]
 80011e6:	f003 031f 	and.w	r3, r3, #31
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d00a      	beq.n	8001204 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	4a1f      	ldr	r2, [pc, #124]	; (8001270 <HAL_ADC_Start+0x188>)
 80011f4:	4293      	cmp	r3, r2
 80011f6:	d129      	bne.n	800124c <HAL_ADC_Start+0x164>
 80011f8:	4b1a      	ldr	r3, [pc, #104]	; (8001264 <HAL_ADC_Start+0x17c>)
 80011fa:	685b      	ldr	r3, [r3, #4]
 80011fc:	f003 031f 	and.w	r3, r3, #31
 8001200:	2b0f      	cmp	r3, #15
 8001202:	d823      	bhi.n	800124c <HAL_ADC_Start+0x164>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	689b      	ldr	r3, [r3, #8]
 800120a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800120e:	2b00      	cmp	r3, #0
 8001210:	d11c      	bne.n	800124c <HAL_ADC_Start+0x164>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	689a      	ldr	r2, [r3, #8]
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001220:	609a      	str	r2, [r3, #8]
 8001222:	e013      	b.n	800124c <HAL_ADC_Start+0x164>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	4a0f      	ldr	r2, [pc, #60]	; (8001268 <HAL_ADC_Start+0x180>)
 800122a:	4293      	cmp	r3, r2
 800122c:	d10e      	bne.n	800124c <HAL_ADC_Start+0x164>
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	689b      	ldr	r3, [r3, #8]
 8001234:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001238:	2b00      	cmp	r3, #0
 800123a:	d107      	bne.n	800124c <HAL_ADC_Start+0x164>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	689a      	ldr	r2, [r3, #8]
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800124a:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 800124c:	2300      	movs	r3, #0
}
 800124e:	4618      	mov	r0, r3
 8001250:	3714      	adds	r7, #20
 8001252:	46bd      	mov	sp, r7
 8001254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001258:	4770      	bx	lr
 800125a:	bf00      	nop
 800125c:	20000100 	.word	0x20000100
 8001260:	431bde83 	.word	0x431bde83
 8001264:	40012300 	.word	0x40012300
 8001268:	40012000 	.word	0x40012000
 800126c:	40012100 	.word	0x40012100
 8001270:	40012200 	.word	0x40012200

08001274 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b084      	sub	sp, #16
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
 800127c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800127e:	2300      	movs	r3, #0
 8001280:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	689b      	ldr	r3, [r3, #8]
 8001288:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800128c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001290:	d113      	bne.n	80012ba <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	689b      	ldr	r3, [r3, #8]
 8001298:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800129c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80012a0:	d10b      	bne.n	80012ba <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012a6:	f043 0220 	orr.w	r2, r3, #32
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	2200      	movs	r2, #0
 80012b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 80012b6:	2301      	movs	r3, #1
 80012b8:	e05c      	b.n	8001374 <HAL_ADC_PollForConversion+0x100>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 80012ba:	f7ff fea3 	bl	8001004 <HAL_GetTick>
 80012be:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80012c0:	e01a      	b.n	80012f8 <HAL_ADC_PollForConversion+0x84>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80012c2:	683b      	ldr	r3, [r7, #0]
 80012c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012c8:	d016      	beq.n	80012f8 <HAL_ADC_PollForConversion+0x84>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d007      	beq.n	80012e0 <HAL_ADC_PollForConversion+0x6c>
 80012d0:	f7ff fe98 	bl	8001004 <HAL_GetTick>
 80012d4:	4602      	mov	r2, r0
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	1ad3      	subs	r3, r2, r3
 80012da:	683a      	ldr	r2, [r7, #0]
 80012dc:	429a      	cmp	r2, r3
 80012de:	d20b      	bcs.n	80012f8 <HAL_ADC_PollForConversion+0x84>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012e4:	f043 0204 	orr.w	r2, r3, #4
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	2200      	movs	r2, #0
 80012f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 80012f4:	2303      	movs	r3, #3
 80012f6:	e03d      	b.n	8001374 <HAL_ADC_PollForConversion+0x100>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	f003 0302 	and.w	r3, r3, #2
 8001302:	2b02      	cmp	r3, #2
 8001304:	d1dd      	bne.n	80012c2 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f06f 0212 	mvn.w	r2, #18
 800130e:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001314:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	689b      	ldr	r3, [r3, #8]
 8001322:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001326:	2b00      	cmp	r3, #0
 8001328:	d123      	bne.n	8001372 <HAL_ADC_PollForConversion+0xfe>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800132e:	2b00      	cmp	r3, #0
 8001330:	d11f      	bne.n	8001372 <HAL_ADC_PollForConversion+0xfe>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001338:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800133c:	2b00      	cmp	r3, #0
 800133e:	d006      	beq.n	800134e <HAL_ADC_PollForConversion+0xda>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	689b      	ldr	r3, [r3, #8]
 8001346:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800134a:	2b00      	cmp	r3, #0
 800134c:	d111      	bne.n	8001372 <HAL_ADC_PollForConversion+0xfe>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001352:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800135e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001362:	2b00      	cmp	r3, #0
 8001364:	d105      	bne.n	8001372 <HAL_ADC_PollForConversion+0xfe>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800136a:	f043 0201 	orr.w	r2, r3, #1
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001372:	2300      	movs	r3, #0
}
 8001374:	4618      	mov	r0, r3
 8001376:	3710      	adds	r7, #16
 8001378:	46bd      	mov	sp, r7
 800137a:	bd80      	pop	{r7, pc}

0800137c <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 800137c:	b480      	push	{r7}
 800137e:	b083      	sub	sp, #12
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800138a:	4618      	mov	r0, r3
 800138c:	370c      	adds	r7, #12
 800138e:	46bd      	mov	sp, r7
 8001390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001394:	4770      	bx	lr
	...

08001398 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001398:	b480      	push	{r7}
 800139a:	b085      	sub	sp, #20
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
 80013a0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80013a2:	2300      	movs	r3, #0
 80013a4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80013ac:	2b01      	cmp	r3, #1
 80013ae:	d101      	bne.n	80013b4 <HAL_ADC_ConfigChannel+0x1c>
 80013b0:	2302      	movs	r3, #2
 80013b2:	e105      	b.n	80015c0 <HAL_ADC_ConfigChannel+0x228>
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	2201      	movs	r2, #1
 80013b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	2b09      	cmp	r3, #9
 80013c2:	d925      	bls.n	8001410 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	68d9      	ldr	r1, [r3, #12]
 80013ca:	683b      	ldr	r3, [r7, #0]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	b29b      	uxth	r3, r3
 80013d0:	461a      	mov	r2, r3
 80013d2:	4613      	mov	r3, r2
 80013d4:	005b      	lsls	r3, r3, #1
 80013d6:	4413      	add	r3, r2
 80013d8:	3b1e      	subs	r3, #30
 80013da:	2207      	movs	r2, #7
 80013dc:	fa02 f303 	lsl.w	r3, r2, r3
 80013e0:	43da      	mvns	r2, r3
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	400a      	ands	r2, r1
 80013e8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	68d9      	ldr	r1, [r3, #12]
 80013f0:	683b      	ldr	r3, [r7, #0]
 80013f2:	689a      	ldr	r2, [r3, #8]
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	b29b      	uxth	r3, r3
 80013fa:	4618      	mov	r0, r3
 80013fc:	4603      	mov	r3, r0
 80013fe:	005b      	lsls	r3, r3, #1
 8001400:	4403      	add	r3, r0
 8001402:	3b1e      	subs	r3, #30
 8001404:	409a      	lsls	r2, r3
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	430a      	orrs	r2, r1
 800140c:	60da      	str	r2, [r3, #12]
 800140e:	e022      	b.n	8001456 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	6919      	ldr	r1, [r3, #16]
 8001416:	683b      	ldr	r3, [r7, #0]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	b29b      	uxth	r3, r3
 800141c:	461a      	mov	r2, r3
 800141e:	4613      	mov	r3, r2
 8001420:	005b      	lsls	r3, r3, #1
 8001422:	4413      	add	r3, r2
 8001424:	2207      	movs	r2, #7
 8001426:	fa02 f303 	lsl.w	r3, r2, r3
 800142a:	43da      	mvns	r2, r3
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	400a      	ands	r2, r1
 8001432:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	6919      	ldr	r1, [r3, #16]
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	689a      	ldr	r2, [r3, #8]
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	b29b      	uxth	r3, r3
 8001444:	4618      	mov	r0, r3
 8001446:	4603      	mov	r3, r0
 8001448:	005b      	lsls	r3, r3, #1
 800144a:	4403      	add	r3, r0
 800144c:	409a      	lsls	r2, r3
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	430a      	orrs	r2, r1
 8001454:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	685b      	ldr	r3, [r3, #4]
 800145a:	2b06      	cmp	r3, #6
 800145c:	d824      	bhi.n	80014a8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	685a      	ldr	r2, [r3, #4]
 8001468:	4613      	mov	r3, r2
 800146a:	009b      	lsls	r3, r3, #2
 800146c:	4413      	add	r3, r2
 800146e:	3b05      	subs	r3, #5
 8001470:	221f      	movs	r2, #31
 8001472:	fa02 f303 	lsl.w	r3, r2, r3
 8001476:	43da      	mvns	r2, r3
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	400a      	ands	r2, r1
 800147e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	b29b      	uxth	r3, r3
 800148c:	4618      	mov	r0, r3
 800148e:	683b      	ldr	r3, [r7, #0]
 8001490:	685a      	ldr	r2, [r3, #4]
 8001492:	4613      	mov	r3, r2
 8001494:	009b      	lsls	r3, r3, #2
 8001496:	4413      	add	r3, r2
 8001498:	3b05      	subs	r3, #5
 800149a:	fa00 f203 	lsl.w	r2, r0, r3
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	430a      	orrs	r2, r1
 80014a4:	635a      	str	r2, [r3, #52]	; 0x34
 80014a6:	e04c      	b.n	8001542 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	685b      	ldr	r3, [r3, #4]
 80014ac:	2b0c      	cmp	r3, #12
 80014ae:	d824      	bhi.n	80014fa <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	685a      	ldr	r2, [r3, #4]
 80014ba:	4613      	mov	r3, r2
 80014bc:	009b      	lsls	r3, r3, #2
 80014be:	4413      	add	r3, r2
 80014c0:	3b23      	subs	r3, #35	; 0x23
 80014c2:	221f      	movs	r2, #31
 80014c4:	fa02 f303 	lsl.w	r3, r2, r3
 80014c8:	43da      	mvns	r2, r3
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	400a      	ands	r2, r1
 80014d0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	b29b      	uxth	r3, r3
 80014de:	4618      	mov	r0, r3
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	685a      	ldr	r2, [r3, #4]
 80014e4:	4613      	mov	r3, r2
 80014e6:	009b      	lsls	r3, r3, #2
 80014e8:	4413      	add	r3, r2
 80014ea:	3b23      	subs	r3, #35	; 0x23
 80014ec:	fa00 f203 	lsl.w	r2, r0, r3
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	430a      	orrs	r2, r1
 80014f6:	631a      	str	r2, [r3, #48]	; 0x30
 80014f8:	e023      	b.n	8001542 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	685a      	ldr	r2, [r3, #4]
 8001504:	4613      	mov	r3, r2
 8001506:	009b      	lsls	r3, r3, #2
 8001508:	4413      	add	r3, r2
 800150a:	3b41      	subs	r3, #65	; 0x41
 800150c:	221f      	movs	r2, #31
 800150e:	fa02 f303 	lsl.w	r3, r2, r3
 8001512:	43da      	mvns	r2, r3
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	400a      	ands	r2, r1
 800151a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	b29b      	uxth	r3, r3
 8001528:	4618      	mov	r0, r3
 800152a:	683b      	ldr	r3, [r7, #0]
 800152c:	685a      	ldr	r2, [r3, #4]
 800152e:	4613      	mov	r3, r2
 8001530:	009b      	lsls	r3, r3, #2
 8001532:	4413      	add	r3, r2
 8001534:	3b41      	subs	r3, #65	; 0x41
 8001536:	fa00 f203 	lsl.w	r2, r0, r3
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	430a      	orrs	r2, r1
 8001540:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001542:	4b22      	ldr	r3, [pc, #136]	; (80015cc <HAL_ADC_ConfigChannel+0x234>)
 8001544:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	4a21      	ldr	r2, [pc, #132]	; (80015d0 <HAL_ADC_ConfigChannel+0x238>)
 800154c:	4293      	cmp	r3, r2
 800154e:	d109      	bne.n	8001564 <HAL_ADC_ConfigChannel+0x1cc>
 8001550:	683b      	ldr	r3, [r7, #0]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	2b12      	cmp	r3, #18
 8001556:	d105      	bne.n	8001564 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	685b      	ldr	r3, [r3, #4]
 800155c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	4a19      	ldr	r2, [pc, #100]	; (80015d0 <HAL_ADC_ConfigChannel+0x238>)
 800156a:	4293      	cmp	r3, r2
 800156c:	d123      	bne.n	80015b6 <HAL_ADC_ConfigChannel+0x21e>
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	2b10      	cmp	r3, #16
 8001574:	d003      	beq.n	800157e <HAL_ADC_ConfigChannel+0x1e6>
 8001576:	683b      	ldr	r3, [r7, #0]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	2b11      	cmp	r3, #17
 800157c:	d11b      	bne.n	80015b6 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	685b      	ldr	r3, [r3, #4]
 8001582:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800158a:	683b      	ldr	r3, [r7, #0]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	2b10      	cmp	r3, #16
 8001590:	d111      	bne.n	80015b6 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001592:	4b10      	ldr	r3, [pc, #64]	; (80015d4 <HAL_ADC_ConfigChannel+0x23c>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	4a10      	ldr	r2, [pc, #64]	; (80015d8 <HAL_ADC_ConfigChannel+0x240>)
 8001598:	fba2 2303 	umull	r2, r3, r2, r3
 800159c:	0c9a      	lsrs	r2, r3, #18
 800159e:	4613      	mov	r3, r2
 80015a0:	009b      	lsls	r3, r3, #2
 80015a2:	4413      	add	r3, r2
 80015a4:	005b      	lsls	r3, r3, #1
 80015a6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80015a8:	e002      	b.n	80015b0 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80015aa:	68bb      	ldr	r3, [r7, #8]
 80015ac:	3b01      	subs	r3, #1
 80015ae:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80015b0:	68bb      	ldr	r3, [r7, #8]
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d1f9      	bne.n	80015aa <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	2200      	movs	r2, #0
 80015ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80015be:	2300      	movs	r3, #0
}
 80015c0:	4618      	mov	r0, r3
 80015c2:	3714      	adds	r7, #20
 80015c4:	46bd      	mov	sp, r7
 80015c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ca:	4770      	bx	lr
 80015cc:	40012300 	.word	0x40012300
 80015d0:	40012000 	.word	0x40012000
 80015d4:	20000100 	.word	0x20000100
 80015d8:	431bde83 	.word	0x431bde83

080015dc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80015dc:	b480      	push	{r7}
 80015de:	b085      	sub	sp, #20
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80015e4:	4b79      	ldr	r3, [pc, #484]	; (80017cc <ADC_Init+0x1f0>)
 80015e6:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	685b      	ldr	r3, [r3, #4]
 80015ec:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	685a      	ldr	r2, [r3, #4]
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	685b      	ldr	r3, [r3, #4]
 80015fc:	431a      	orrs	r2, r3
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	685a      	ldr	r2, [r3, #4]
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001610:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	6859      	ldr	r1, [r3, #4]
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	691b      	ldr	r3, [r3, #16]
 800161c:	021a      	lsls	r2, r3, #8
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	430a      	orrs	r2, r1
 8001624:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	685a      	ldr	r2, [r3, #4]
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001634:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	6859      	ldr	r1, [r3, #4]
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	689a      	ldr	r2, [r3, #8]
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	430a      	orrs	r2, r1
 8001646:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	689a      	ldr	r2, [r3, #8]
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001656:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	6899      	ldr	r1, [r3, #8]
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	68da      	ldr	r2, [r3, #12]
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	430a      	orrs	r2, r1
 8001668:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800166e:	4a58      	ldr	r2, [pc, #352]	; (80017d0 <ADC_Init+0x1f4>)
 8001670:	4293      	cmp	r3, r2
 8001672:	d022      	beq.n	80016ba <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	689a      	ldr	r2, [r3, #8]
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001682:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	6899      	ldr	r1, [r3, #8]
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	430a      	orrs	r2, r1
 8001694:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	689a      	ldr	r2, [r3, #8]
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80016a4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	6899      	ldr	r1, [r3, #8]
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	430a      	orrs	r2, r1
 80016b6:	609a      	str	r2, [r3, #8]
 80016b8:	e00f      	b.n	80016da <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	689a      	ldr	r2, [r3, #8]
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80016c8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	689a      	ldr	r2, [r3, #8]
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80016d8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	689a      	ldr	r2, [r3, #8]
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f022 0202 	bic.w	r2, r2, #2
 80016e8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	6899      	ldr	r1, [r3, #8]
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	7e1b      	ldrb	r3, [r3, #24]
 80016f4:	005a      	lsls	r2, r3, #1
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	430a      	orrs	r2, r1
 80016fc:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001704:	2b00      	cmp	r3, #0
 8001706:	d01b      	beq.n	8001740 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	685a      	ldr	r2, [r3, #4]
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001716:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	685a      	ldr	r2, [r3, #4]
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001726:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	6859      	ldr	r1, [r3, #4]
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001732:	3b01      	subs	r3, #1
 8001734:	035a      	lsls	r2, r3, #13
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	430a      	orrs	r2, r1
 800173c:	605a      	str	r2, [r3, #4]
 800173e:	e007      	b.n	8001750 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	685a      	ldr	r2, [r3, #4]
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800174e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800175e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	69db      	ldr	r3, [r3, #28]
 800176a:	3b01      	subs	r3, #1
 800176c:	051a      	lsls	r2, r3, #20
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	430a      	orrs	r2, r1
 8001774:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	689a      	ldr	r2, [r3, #8]
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001784:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	6899      	ldr	r1, [r3, #8]
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001792:	025a      	lsls	r2, r3, #9
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	430a      	orrs	r2, r1
 800179a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	689a      	ldr	r2, [r3, #8]
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80017aa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	6899      	ldr	r1, [r3, #8]
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	695b      	ldr	r3, [r3, #20]
 80017b6:	029a      	lsls	r2, r3, #10
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	430a      	orrs	r2, r1
 80017be:	609a      	str	r2, [r3, #8]
}
 80017c0:	bf00      	nop
 80017c2:	3714      	adds	r7, #20
 80017c4:	46bd      	mov	sp, r7
 80017c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ca:	4770      	bx	lr
 80017cc:	40012300 	.word	0x40012300
 80017d0:	0f000001 	.word	0x0f000001

080017d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017d4:	b480      	push	{r7}
 80017d6:	b085      	sub	sp, #20
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	f003 0307 	and.w	r3, r3, #7
 80017e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017e4:	4b0c      	ldr	r3, [pc, #48]	; (8001818 <__NVIC_SetPriorityGrouping+0x44>)
 80017e6:	68db      	ldr	r3, [r3, #12]
 80017e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017ea:	68ba      	ldr	r2, [r7, #8]
 80017ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017f0:	4013      	ands	r3, r2
 80017f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017f8:	68bb      	ldr	r3, [r7, #8]
 80017fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017fc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001800:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001804:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001806:	4a04      	ldr	r2, [pc, #16]	; (8001818 <__NVIC_SetPriorityGrouping+0x44>)
 8001808:	68bb      	ldr	r3, [r7, #8]
 800180a:	60d3      	str	r3, [r2, #12]
}
 800180c:	bf00      	nop
 800180e:	3714      	adds	r7, #20
 8001810:	46bd      	mov	sp, r7
 8001812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001816:	4770      	bx	lr
 8001818:	e000ed00 	.word	0xe000ed00

0800181c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800181c:	b480      	push	{r7}
 800181e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001820:	4b04      	ldr	r3, [pc, #16]	; (8001834 <__NVIC_GetPriorityGrouping+0x18>)
 8001822:	68db      	ldr	r3, [r3, #12]
 8001824:	0a1b      	lsrs	r3, r3, #8
 8001826:	f003 0307 	and.w	r3, r3, #7
}
 800182a:	4618      	mov	r0, r3
 800182c:	46bd      	mov	sp, r7
 800182e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001832:	4770      	bx	lr
 8001834:	e000ed00 	.word	0xe000ed00

08001838 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001838:	b480      	push	{r7}
 800183a:	b083      	sub	sp, #12
 800183c:	af00      	add	r7, sp, #0
 800183e:	4603      	mov	r3, r0
 8001840:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001842:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001846:	2b00      	cmp	r3, #0
 8001848:	db0b      	blt.n	8001862 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800184a:	79fb      	ldrb	r3, [r7, #7]
 800184c:	f003 021f 	and.w	r2, r3, #31
 8001850:	4907      	ldr	r1, [pc, #28]	; (8001870 <__NVIC_EnableIRQ+0x38>)
 8001852:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001856:	095b      	lsrs	r3, r3, #5
 8001858:	2001      	movs	r0, #1
 800185a:	fa00 f202 	lsl.w	r2, r0, r2
 800185e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001862:	bf00      	nop
 8001864:	370c      	adds	r7, #12
 8001866:	46bd      	mov	sp, r7
 8001868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186c:	4770      	bx	lr
 800186e:	bf00      	nop
 8001870:	e000e100 	.word	0xe000e100

08001874 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001874:	b480      	push	{r7}
 8001876:	b083      	sub	sp, #12
 8001878:	af00      	add	r7, sp, #0
 800187a:	4603      	mov	r3, r0
 800187c:	6039      	str	r1, [r7, #0]
 800187e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001880:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001884:	2b00      	cmp	r3, #0
 8001886:	db0a      	blt.n	800189e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	b2da      	uxtb	r2, r3
 800188c:	490c      	ldr	r1, [pc, #48]	; (80018c0 <__NVIC_SetPriority+0x4c>)
 800188e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001892:	0112      	lsls	r2, r2, #4
 8001894:	b2d2      	uxtb	r2, r2
 8001896:	440b      	add	r3, r1
 8001898:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800189c:	e00a      	b.n	80018b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	b2da      	uxtb	r2, r3
 80018a2:	4908      	ldr	r1, [pc, #32]	; (80018c4 <__NVIC_SetPriority+0x50>)
 80018a4:	79fb      	ldrb	r3, [r7, #7]
 80018a6:	f003 030f 	and.w	r3, r3, #15
 80018aa:	3b04      	subs	r3, #4
 80018ac:	0112      	lsls	r2, r2, #4
 80018ae:	b2d2      	uxtb	r2, r2
 80018b0:	440b      	add	r3, r1
 80018b2:	761a      	strb	r2, [r3, #24]
}
 80018b4:	bf00      	nop
 80018b6:	370c      	adds	r7, #12
 80018b8:	46bd      	mov	sp, r7
 80018ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018be:	4770      	bx	lr
 80018c0:	e000e100 	.word	0xe000e100
 80018c4:	e000ed00 	.word	0xe000ed00

080018c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018c8:	b480      	push	{r7}
 80018ca:	b089      	sub	sp, #36	; 0x24
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	60f8      	str	r0, [r7, #12]
 80018d0:	60b9      	str	r1, [r7, #8]
 80018d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	f003 0307 	and.w	r3, r3, #7
 80018da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018dc:	69fb      	ldr	r3, [r7, #28]
 80018de:	f1c3 0307 	rsb	r3, r3, #7
 80018e2:	2b04      	cmp	r3, #4
 80018e4:	bf28      	it	cs
 80018e6:	2304      	movcs	r3, #4
 80018e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018ea:	69fb      	ldr	r3, [r7, #28]
 80018ec:	3304      	adds	r3, #4
 80018ee:	2b06      	cmp	r3, #6
 80018f0:	d902      	bls.n	80018f8 <NVIC_EncodePriority+0x30>
 80018f2:	69fb      	ldr	r3, [r7, #28]
 80018f4:	3b03      	subs	r3, #3
 80018f6:	e000      	b.n	80018fa <NVIC_EncodePriority+0x32>
 80018f8:	2300      	movs	r3, #0
 80018fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018fc:	f04f 32ff 	mov.w	r2, #4294967295
 8001900:	69bb      	ldr	r3, [r7, #24]
 8001902:	fa02 f303 	lsl.w	r3, r2, r3
 8001906:	43da      	mvns	r2, r3
 8001908:	68bb      	ldr	r3, [r7, #8]
 800190a:	401a      	ands	r2, r3
 800190c:	697b      	ldr	r3, [r7, #20]
 800190e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001910:	f04f 31ff 	mov.w	r1, #4294967295
 8001914:	697b      	ldr	r3, [r7, #20]
 8001916:	fa01 f303 	lsl.w	r3, r1, r3
 800191a:	43d9      	mvns	r1, r3
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001920:	4313      	orrs	r3, r2
         );
}
 8001922:	4618      	mov	r0, r3
 8001924:	3724      	adds	r7, #36	; 0x24
 8001926:	46bd      	mov	sp, r7
 8001928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192c:	4770      	bx	lr
	...

08001930 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b082      	sub	sp, #8
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	3b01      	subs	r3, #1
 800193c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001940:	d301      	bcc.n	8001946 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001942:	2301      	movs	r3, #1
 8001944:	e00f      	b.n	8001966 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001946:	4a0a      	ldr	r2, [pc, #40]	; (8001970 <SysTick_Config+0x40>)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	3b01      	subs	r3, #1
 800194c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800194e:	210f      	movs	r1, #15
 8001950:	f04f 30ff 	mov.w	r0, #4294967295
 8001954:	f7ff ff8e 	bl	8001874 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001958:	4b05      	ldr	r3, [pc, #20]	; (8001970 <SysTick_Config+0x40>)
 800195a:	2200      	movs	r2, #0
 800195c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800195e:	4b04      	ldr	r3, [pc, #16]	; (8001970 <SysTick_Config+0x40>)
 8001960:	2207      	movs	r2, #7
 8001962:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001964:	2300      	movs	r3, #0
}
 8001966:	4618      	mov	r0, r3
 8001968:	3708      	adds	r7, #8
 800196a:	46bd      	mov	sp, r7
 800196c:	bd80      	pop	{r7, pc}
 800196e:	bf00      	nop
 8001970:	e000e010 	.word	0xe000e010

08001974 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b082      	sub	sp, #8
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800197c:	6878      	ldr	r0, [r7, #4]
 800197e:	f7ff ff29 	bl	80017d4 <__NVIC_SetPriorityGrouping>
}
 8001982:	bf00      	nop
 8001984:	3708      	adds	r7, #8
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}

0800198a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800198a:	b580      	push	{r7, lr}
 800198c:	b086      	sub	sp, #24
 800198e:	af00      	add	r7, sp, #0
 8001990:	4603      	mov	r3, r0
 8001992:	60b9      	str	r1, [r7, #8]
 8001994:	607a      	str	r2, [r7, #4]
 8001996:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001998:	2300      	movs	r3, #0
 800199a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800199c:	f7ff ff3e 	bl	800181c <__NVIC_GetPriorityGrouping>
 80019a0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019a2:	687a      	ldr	r2, [r7, #4]
 80019a4:	68b9      	ldr	r1, [r7, #8]
 80019a6:	6978      	ldr	r0, [r7, #20]
 80019a8:	f7ff ff8e 	bl	80018c8 <NVIC_EncodePriority>
 80019ac:	4602      	mov	r2, r0
 80019ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019b2:	4611      	mov	r1, r2
 80019b4:	4618      	mov	r0, r3
 80019b6:	f7ff ff5d 	bl	8001874 <__NVIC_SetPriority>
}
 80019ba:	bf00      	nop
 80019bc:	3718      	adds	r7, #24
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd80      	pop	{r7, pc}

080019c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019c2:	b580      	push	{r7, lr}
 80019c4:	b082      	sub	sp, #8
 80019c6:	af00      	add	r7, sp, #0
 80019c8:	4603      	mov	r3, r0
 80019ca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019d0:	4618      	mov	r0, r3
 80019d2:	f7ff ff31 	bl	8001838 <__NVIC_EnableIRQ>
}
 80019d6:	bf00      	nop
 80019d8:	3708      	adds	r7, #8
 80019da:	46bd      	mov	sp, r7
 80019dc:	bd80      	pop	{r7, pc}

080019de <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019de:	b580      	push	{r7, lr}
 80019e0:	b082      	sub	sp, #8
 80019e2:	af00      	add	r7, sp, #0
 80019e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019e6:	6878      	ldr	r0, [r7, #4]
 80019e8:	f7ff ffa2 	bl	8001930 <SysTick_Config>
 80019ec:	4603      	mov	r3, r0
}
 80019ee:	4618      	mov	r0, r3
 80019f0:	3708      	adds	r7, #8
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}
	...

080019f8 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b086      	sub	sp, #24
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	60f8      	str	r0, [r7, #12]
 8001a00:	60b9      	str	r1, [r7, #8]
 8001a02:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001a06:	2301      	movs	r3, #1
 8001a08:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001a0a:	4b23      	ldr	r3, [pc, #140]	; (8001a98 <HAL_FLASH_Program+0xa0>)
 8001a0c:	7e1b      	ldrb	r3, [r3, #24]
 8001a0e:	2b01      	cmp	r3, #1
 8001a10:	d101      	bne.n	8001a16 <HAL_FLASH_Program+0x1e>
 8001a12:	2302      	movs	r3, #2
 8001a14:	e03b      	b.n	8001a8e <HAL_FLASH_Program+0x96>
 8001a16:	4b20      	ldr	r3, [pc, #128]	; (8001a98 <HAL_FLASH_Program+0xa0>)
 8001a18:	2201      	movs	r2, #1
 8001a1a:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001a1c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001a20:	f000 f870 	bl	8001b04 <FLASH_WaitForLastOperation>
 8001a24:	4603      	mov	r3, r0
 8001a26:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8001a28:	7dfb      	ldrb	r3, [r7, #23]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d12b      	bne.n	8001a86 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d105      	bne.n	8001a40 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8001a34:	783b      	ldrb	r3, [r7, #0]
 8001a36:	4619      	mov	r1, r3
 8001a38:	68b8      	ldr	r0, [r7, #8]
 8001a3a:	f000 f917 	bl	8001c6c <FLASH_Program_Byte>
 8001a3e:	e016      	b.n	8001a6e <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	2b01      	cmp	r3, #1
 8001a44:	d105      	bne.n	8001a52 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8001a46:	883b      	ldrh	r3, [r7, #0]
 8001a48:	4619      	mov	r1, r3
 8001a4a:	68b8      	ldr	r0, [r7, #8]
 8001a4c:	f000 f8ea 	bl	8001c24 <FLASH_Program_HalfWord>
 8001a50:	e00d      	b.n	8001a6e <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	2b02      	cmp	r3, #2
 8001a56:	d105      	bne.n	8001a64 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	4619      	mov	r1, r3
 8001a5c:	68b8      	ldr	r0, [r7, #8]
 8001a5e:	f000 f8bf 	bl	8001be0 <FLASH_Program_Word>
 8001a62:	e004      	b.n	8001a6e <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8001a64:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001a68:	68b8      	ldr	r0, [r7, #8]
 8001a6a:	f000 f88b 	bl	8001b84 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001a6e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001a72:	f000 f847 	bl	8001b04 <FLASH_WaitForLastOperation>
 8001a76:	4603      	mov	r3, r0
 8001a78:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8001a7a:	4b08      	ldr	r3, [pc, #32]	; (8001a9c <HAL_FLASH_Program+0xa4>)
 8001a7c:	691b      	ldr	r3, [r3, #16]
 8001a7e:	4a07      	ldr	r2, [pc, #28]	; (8001a9c <HAL_FLASH_Program+0xa4>)
 8001a80:	f023 0301 	bic.w	r3, r3, #1
 8001a84:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001a86:	4b04      	ldr	r3, [pc, #16]	; (8001a98 <HAL_FLASH_Program+0xa0>)
 8001a88:	2200      	movs	r2, #0
 8001a8a:	761a      	strb	r2, [r3, #24]
  
  return status;
 8001a8c:	7dfb      	ldrb	r3, [r7, #23]
}
 8001a8e:	4618      	mov	r0, r3
 8001a90:	3718      	adds	r7, #24
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}
 8001a96:	bf00      	nop
 8001a98:	200001a4 	.word	0x200001a4
 8001a9c:	40023c00 	.word	0x40023c00

08001aa0 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	b083      	sub	sp, #12
 8001aa4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001aaa:	4b0b      	ldr	r3, [pc, #44]	; (8001ad8 <HAL_FLASH_Unlock+0x38>)
 8001aac:	691b      	ldr	r3, [r3, #16]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	da0b      	bge.n	8001aca <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8001ab2:	4b09      	ldr	r3, [pc, #36]	; (8001ad8 <HAL_FLASH_Unlock+0x38>)
 8001ab4:	4a09      	ldr	r2, [pc, #36]	; (8001adc <HAL_FLASH_Unlock+0x3c>)
 8001ab6:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8001ab8:	4b07      	ldr	r3, [pc, #28]	; (8001ad8 <HAL_FLASH_Unlock+0x38>)
 8001aba:	4a09      	ldr	r2, [pc, #36]	; (8001ae0 <HAL_FLASH_Unlock+0x40>)
 8001abc:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001abe:	4b06      	ldr	r3, [pc, #24]	; (8001ad8 <HAL_FLASH_Unlock+0x38>)
 8001ac0:	691b      	ldr	r3, [r3, #16]
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	da01      	bge.n	8001aca <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8001aca:	79fb      	ldrb	r3, [r7, #7]
}
 8001acc:	4618      	mov	r0, r3
 8001ace:	370c      	adds	r7, #12
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad6:	4770      	bx	lr
 8001ad8:	40023c00 	.word	0x40023c00
 8001adc:	45670123 	.word	0x45670123
 8001ae0:	cdef89ab 	.word	0xcdef89ab

08001ae4 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8001ae8:	4b05      	ldr	r3, [pc, #20]	; (8001b00 <HAL_FLASH_Lock+0x1c>)
 8001aea:	691b      	ldr	r3, [r3, #16]
 8001aec:	4a04      	ldr	r2, [pc, #16]	; (8001b00 <HAL_FLASH_Lock+0x1c>)
 8001aee:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001af2:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8001af4:	2300      	movs	r3, #0
}
 8001af6:	4618      	mov	r0, r3
 8001af8:	46bd      	mov	sp, r7
 8001afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afe:	4770      	bx	lr
 8001b00:	40023c00 	.word	0x40023c00

08001b04 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b084      	sub	sp, #16
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001b10:	4b1a      	ldr	r3, [pc, #104]	; (8001b7c <FLASH_WaitForLastOperation+0x78>)
 8001b12:	2200      	movs	r2, #0
 8001b14:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8001b16:	f7ff fa75 	bl	8001004 <HAL_GetTick>
 8001b1a:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8001b1c:	e010      	b.n	8001b40 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b24:	d00c      	beq.n	8001b40 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d007      	beq.n	8001b3c <FLASH_WaitForLastOperation+0x38>
 8001b2c:	f7ff fa6a 	bl	8001004 <HAL_GetTick>
 8001b30:	4602      	mov	r2, r0
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	1ad3      	subs	r3, r2, r3
 8001b36:	687a      	ldr	r2, [r7, #4]
 8001b38:	429a      	cmp	r2, r3
 8001b3a:	d201      	bcs.n	8001b40 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8001b3c:	2303      	movs	r3, #3
 8001b3e:	e019      	b.n	8001b74 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8001b40:	4b0f      	ldr	r3, [pc, #60]	; (8001b80 <FLASH_WaitForLastOperation+0x7c>)
 8001b42:	68db      	ldr	r3, [r3, #12]
 8001b44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d1e8      	bne.n	8001b1e <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8001b4c:	4b0c      	ldr	r3, [pc, #48]	; (8001b80 <FLASH_WaitForLastOperation+0x7c>)
 8001b4e:	68db      	ldr	r3, [r3, #12]
 8001b50:	f003 0301 	and.w	r3, r3, #1
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d002      	beq.n	8001b5e <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8001b58:	4b09      	ldr	r3, [pc, #36]	; (8001b80 <FLASH_WaitForLastOperation+0x7c>)
 8001b5a:	2201      	movs	r2, #1
 8001b5c:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8001b5e:	4b08      	ldr	r3, [pc, #32]	; (8001b80 <FLASH_WaitForLastOperation+0x7c>)
 8001b60:	68db      	ldr	r3, [r3, #12]
 8001b62:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d003      	beq.n	8001b72 <FLASH_WaitForLastOperation+0x6e>
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8001b6a:	f000 f8a1 	bl	8001cb0 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8001b6e:	2301      	movs	r3, #1
 8001b70:	e000      	b.n	8001b74 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8001b72:	2300      	movs	r3, #0
  
}  
 8001b74:	4618      	mov	r0, r3
 8001b76:	3710      	adds	r7, #16
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	bd80      	pop	{r7, pc}
 8001b7c:	200001a4 	.word	0x200001a4
 8001b80:	40023c00 	.word	0x40023c00

08001b84 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8001b84:	b490      	push	{r4, r7}
 8001b86:	b084      	sub	sp, #16
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	60f8      	str	r0, [r7, #12]
 8001b8c:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001b90:	4b12      	ldr	r3, [pc, #72]	; (8001bdc <FLASH_Program_DoubleWord+0x58>)
 8001b92:	691b      	ldr	r3, [r3, #16]
 8001b94:	4a11      	ldr	r2, [pc, #68]	; (8001bdc <FLASH_Program_DoubleWord+0x58>)
 8001b96:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001b9a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8001b9c:	4b0f      	ldr	r3, [pc, #60]	; (8001bdc <FLASH_Program_DoubleWord+0x58>)
 8001b9e:	691b      	ldr	r3, [r3, #16]
 8001ba0:	4a0e      	ldr	r2, [pc, #56]	; (8001bdc <FLASH_Program_DoubleWord+0x58>)
 8001ba2:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8001ba6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001ba8:	4b0c      	ldr	r3, [pc, #48]	; (8001bdc <FLASH_Program_DoubleWord+0x58>)
 8001baa:	691b      	ldr	r3, [r3, #16]
 8001bac:	4a0b      	ldr	r2, [pc, #44]	; (8001bdc <FLASH_Program_DoubleWord+0x58>)
 8001bae:	f043 0301 	orr.w	r3, r3, #1
 8001bb2:	6113      	str	r3, [r2, #16]

  /* Program the double-word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	683a      	ldr	r2, [r7, #0]
 8001bb8:	601a      	str	r2, [r3, #0]
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8001bba:	e9d7 1200 	ldrd	r1, r2, [r7]
 8001bbe:	f04f 0300 	mov.w	r3, #0
 8001bc2:	f04f 0400 	mov.w	r4, #0
 8001bc6:	0013      	movs	r3, r2
 8001bc8:	2400      	movs	r4, #0
 8001bca:	68fa      	ldr	r2, [r7, #12]
 8001bcc:	3204      	adds	r2, #4
 8001bce:	6013      	str	r3, [r2, #0]
}
 8001bd0:	bf00      	nop
 8001bd2:	3710      	adds	r7, #16
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bc90      	pop	{r4, r7}
 8001bd8:	4770      	bx	lr
 8001bda:	bf00      	nop
 8001bdc:	40023c00 	.word	0x40023c00

08001be0 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8001be0:	b480      	push	{r7}
 8001be2:	b083      	sub	sp, #12
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
 8001be8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001bea:	4b0d      	ldr	r3, [pc, #52]	; (8001c20 <FLASH_Program_Word+0x40>)
 8001bec:	691b      	ldr	r3, [r3, #16]
 8001bee:	4a0c      	ldr	r2, [pc, #48]	; (8001c20 <FLASH_Program_Word+0x40>)
 8001bf0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001bf4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8001bf6:	4b0a      	ldr	r3, [pc, #40]	; (8001c20 <FLASH_Program_Word+0x40>)
 8001bf8:	691b      	ldr	r3, [r3, #16]
 8001bfa:	4a09      	ldr	r2, [pc, #36]	; (8001c20 <FLASH_Program_Word+0x40>)
 8001bfc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c00:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001c02:	4b07      	ldr	r3, [pc, #28]	; (8001c20 <FLASH_Program_Word+0x40>)
 8001c04:	691b      	ldr	r3, [r3, #16]
 8001c06:	4a06      	ldr	r2, [pc, #24]	; (8001c20 <FLASH_Program_Word+0x40>)
 8001c08:	f043 0301 	orr.w	r3, r3, #1
 8001c0c:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	683a      	ldr	r2, [r7, #0]
 8001c12:	601a      	str	r2, [r3, #0]
}
 8001c14:	bf00      	nop
 8001c16:	370c      	adds	r7, #12
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1e:	4770      	bx	lr
 8001c20:	40023c00 	.word	0x40023c00

08001c24 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8001c24:	b480      	push	{r7}
 8001c26:	b083      	sub	sp, #12
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
 8001c2c:	460b      	mov	r3, r1
 8001c2e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001c30:	4b0d      	ldr	r3, [pc, #52]	; (8001c68 <FLASH_Program_HalfWord+0x44>)
 8001c32:	691b      	ldr	r3, [r3, #16]
 8001c34:	4a0c      	ldr	r2, [pc, #48]	; (8001c68 <FLASH_Program_HalfWord+0x44>)
 8001c36:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001c3a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8001c3c:	4b0a      	ldr	r3, [pc, #40]	; (8001c68 <FLASH_Program_HalfWord+0x44>)
 8001c3e:	691b      	ldr	r3, [r3, #16]
 8001c40:	4a09      	ldr	r2, [pc, #36]	; (8001c68 <FLASH_Program_HalfWord+0x44>)
 8001c42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c46:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001c48:	4b07      	ldr	r3, [pc, #28]	; (8001c68 <FLASH_Program_HalfWord+0x44>)
 8001c4a:	691b      	ldr	r3, [r3, #16]
 8001c4c:	4a06      	ldr	r2, [pc, #24]	; (8001c68 <FLASH_Program_HalfWord+0x44>)
 8001c4e:	f043 0301 	orr.w	r3, r3, #1
 8001c52:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	887a      	ldrh	r2, [r7, #2]
 8001c58:	801a      	strh	r2, [r3, #0]
}
 8001c5a:	bf00      	nop
 8001c5c:	370c      	adds	r7, #12
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c64:	4770      	bx	lr
 8001c66:	bf00      	nop
 8001c68:	40023c00 	.word	0x40023c00

08001c6c <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	b083      	sub	sp, #12
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
 8001c74:	460b      	mov	r3, r1
 8001c76:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001c78:	4b0c      	ldr	r3, [pc, #48]	; (8001cac <FLASH_Program_Byte+0x40>)
 8001c7a:	691b      	ldr	r3, [r3, #16]
 8001c7c:	4a0b      	ldr	r2, [pc, #44]	; (8001cac <FLASH_Program_Byte+0x40>)
 8001c7e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001c82:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8001c84:	4b09      	ldr	r3, [pc, #36]	; (8001cac <FLASH_Program_Byte+0x40>)
 8001c86:	4a09      	ldr	r2, [pc, #36]	; (8001cac <FLASH_Program_Byte+0x40>)
 8001c88:	691b      	ldr	r3, [r3, #16]
 8001c8a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001c8c:	4b07      	ldr	r3, [pc, #28]	; (8001cac <FLASH_Program_Byte+0x40>)
 8001c8e:	691b      	ldr	r3, [r3, #16]
 8001c90:	4a06      	ldr	r2, [pc, #24]	; (8001cac <FLASH_Program_Byte+0x40>)
 8001c92:	f043 0301 	orr.w	r3, r3, #1
 8001c96:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	78fa      	ldrb	r2, [r7, #3]
 8001c9c:	701a      	strb	r2, [r3, #0]
}
 8001c9e:	bf00      	nop
 8001ca0:	370c      	adds	r7, #12
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca8:	4770      	bx	lr
 8001caa:	bf00      	nop
 8001cac:	40023c00 	.word	0x40023c00

08001cb0 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8001cb0:	b480      	push	{r7}
 8001cb2:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8001cb4:	4b27      	ldr	r3, [pc, #156]	; (8001d54 <FLASH_SetErrorCode+0xa4>)
 8001cb6:	68db      	ldr	r3, [r3, #12]
 8001cb8:	f003 0310 	and.w	r3, r3, #16
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d008      	beq.n	8001cd2 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8001cc0:	4b25      	ldr	r3, [pc, #148]	; (8001d58 <FLASH_SetErrorCode+0xa8>)
 8001cc2:	69db      	ldr	r3, [r3, #28]
 8001cc4:	f043 0310 	orr.w	r3, r3, #16
 8001cc8:	4a23      	ldr	r2, [pc, #140]	; (8001d58 <FLASH_SetErrorCode+0xa8>)
 8001cca:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8001ccc:	4b21      	ldr	r3, [pc, #132]	; (8001d54 <FLASH_SetErrorCode+0xa4>)
 8001cce:	2210      	movs	r2, #16
 8001cd0:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8001cd2:	4b20      	ldr	r3, [pc, #128]	; (8001d54 <FLASH_SetErrorCode+0xa4>)
 8001cd4:	68db      	ldr	r3, [r3, #12]
 8001cd6:	f003 0320 	and.w	r3, r3, #32
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d008      	beq.n	8001cf0 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8001cde:	4b1e      	ldr	r3, [pc, #120]	; (8001d58 <FLASH_SetErrorCode+0xa8>)
 8001ce0:	69db      	ldr	r3, [r3, #28]
 8001ce2:	f043 0308 	orr.w	r3, r3, #8
 8001ce6:	4a1c      	ldr	r2, [pc, #112]	; (8001d58 <FLASH_SetErrorCode+0xa8>)
 8001ce8:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8001cea:	4b1a      	ldr	r3, [pc, #104]	; (8001d54 <FLASH_SetErrorCode+0xa4>)
 8001cec:	2220      	movs	r2, #32
 8001cee:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8001cf0:	4b18      	ldr	r3, [pc, #96]	; (8001d54 <FLASH_SetErrorCode+0xa4>)
 8001cf2:	68db      	ldr	r3, [r3, #12]
 8001cf4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d008      	beq.n	8001d0e <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8001cfc:	4b16      	ldr	r3, [pc, #88]	; (8001d58 <FLASH_SetErrorCode+0xa8>)
 8001cfe:	69db      	ldr	r3, [r3, #28]
 8001d00:	f043 0304 	orr.w	r3, r3, #4
 8001d04:	4a14      	ldr	r2, [pc, #80]	; (8001d58 <FLASH_SetErrorCode+0xa8>)
 8001d06:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8001d08:	4b12      	ldr	r3, [pc, #72]	; (8001d54 <FLASH_SetErrorCode+0xa4>)
 8001d0a:	2240      	movs	r2, #64	; 0x40
 8001d0c:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8001d0e:	4b11      	ldr	r3, [pc, #68]	; (8001d54 <FLASH_SetErrorCode+0xa4>)
 8001d10:	68db      	ldr	r3, [r3, #12]
 8001d12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d008      	beq.n	8001d2c <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8001d1a:	4b0f      	ldr	r3, [pc, #60]	; (8001d58 <FLASH_SetErrorCode+0xa8>)
 8001d1c:	69db      	ldr	r3, [r3, #28]
 8001d1e:	f043 0302 	orr.w	r3, r3, #2
 8001d22:	4a0d      	ldr	r2, [pc, #52]	; (8001d58 <FLASH_SetErrorCode+0xa8>)
 8001d24:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8001d26:	4b0b      	ldr	r3, [pc, #44]	; (8001d54 <FLASH_SetErrorCode+0xa4>)
 8001d28:	2280      	movs	r2, #128	; 0x80
 8001d2a:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8001d2c:	4b09      	ldr	r3, [pc, #36]	; (8001d54 <FLASH_SetErrorCode+0xa4>)
 8001d2e:	68db      	ldr	r3, [r3, #12]
 8001d30:	f003 0302 	and.w	r3, r3, #2
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d008      	beq.n	8001d4a <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8001d38:	4b07      	ldr	r3, [pc, #28]	; (8001d58 <FLASH_SetErrorCode+0xa8>)
 8001d3a:	69db      	ldr	r3, [r3, #28]
 8001d3c:	f043 0320 	orr.w	r3, r3, #32
 8001d40:	4a05      	ldr	r2, [pc, #20]	; (8001d58 <FLASH_SetErrorCode+0xa8>)
 8001d42:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8001d44:	4b03      	ldr	r3, [pc, #12]	; (8001d54 <FLASH_SetErrorCode+0xa4>)
 8001d46:	2202      	movs	r2, #2
 8001d48:	60da      	str	r2, [r3, #12]
  }
}
 8001d4a:	bf00      	nop
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d52:	4770      	bx	lr
 8001d54:	40023c00 	.word	0x40023c00
 8001d58:	200001a4 	.word	0x200001a4

08001d5c <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b084      	sub	sp, #16
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
 8001d64:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001d66:	2301      	movs	r3, #1
 8001d68:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	60bb      	str	r3, [r7, #8]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001d6e:	4b31      	ldr	r3, [pc, #196]	; (8001e34 <HAL_FLASHEx_Erase+0xd8>)
 8001d70:	7e1b      	ldrb	r3, [r3, #24]
 8001d72:	2b01      	cmp	r3, #1
 8001d74:	d101      	bne.n	8001d7a <HAL_FLASHEx_Erase+0x1e>
 8001d76:	2302      	movs	r3, #2
 8001d78:	e058      	b.n	8001e2c <HAL_FLASHEx_Erase+0xd0>
 8001d7a:	4b2e      	ldr	r3, [pc, #184]	; (8001e34 <HAL_FLASHEx_Erase+0xd8>)
 8001d7c:	2201      	movs	r2, #1
 8001d7e:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001d80:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001d84:	f7ff febe 	bl	8001b04 <FLASH_WaitForLastOperation>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 8001d8c:	7bfb      	ldrb	r3, [r7, #15]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d148      	bne.n	8001e24 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	f04f 32ff 	mov.w	r2, #4294967295
 8001d98:	601a      	str	r2, [r3, #0]
    
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	2b01      	cmp	r3, #1
 8001da0:	d115      	bne.n	8001dce <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	691b      	ldr	r3, [r3, #16]
 8001da6:	b2da      	uxtb	r2, r3
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	4619      	mov	r1, r3
 8001dae:	4610      	mov	r0, r2
 8001db0:	f000 f844 	bl	8001e3c <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001db4:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001db8:	f7ff fea4 	bl	8001b04 <FLASH_WaitForLastOperation>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	73fb      	strb	r3, [r7, #15]
      
      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8001dc0:	4b1d      	ldr	r3, [pc, #116]	; (8001e38 <HAL_FLASHEx_Erase+0xdc>)
 8001dc2:	691b      	ldr	r3, [r3, #16]
 8001dc4:	4a1c      	ldr	r2, [pc, #112]	; (8001e38 <HAL_FLASHEx_Erase+0xdc>)
 8001dc6:	f023 0304 	bic.w	r3, r3, #4
 8001dca:	6113      	str	r3, [r2, #16]
 8001dcc:	e028      	b.n	8001e20 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	689b      	ldr	r3, [r3, #8]
 8001dd2:	60bb      	str	r3, [r7, #8]
 8001dd4:	e01c      	b.n	8001e10 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	691b      	ldr	r3, [r3, #16]
 8001dda:	b2db      	uxtb	r3, r3
 8001ddc:	4619      	mov	r1, r3
 8001dde:	68b8      	ldr	r0, [r7, #8]
 8001de0:	f000 f850 	bl	8001e84 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001de4:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001de8:	f7ff fe8c 	bl	8001b04 <FLASH_WaitForLastOperation>
 8001dec:	4603      	mov	r3, r0
 8001dee:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8001df0:	4b11      	ldr	r3, [pc, #68]	; (8001e38 <HAL_FLASHEx_Erase+0xdc>)
 8001df2:	691b      	ldr	r3, [r3, #16]
 8001df4:	4a10      	ldr	r2, [pc, #64]	; (8001e38 <HAL_FLASHEx_Erase+0xdc>)
 8001df6:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 8001dfa:	6113      	str	r3, [r2, #16]

        if(status != HAL_OK) 
 8001dfc:	7bfb      	ldrb	r3, [r7, #15]
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d003      	beq.n	8001e0a <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	68ba      	ldr	r2, [r7, #8]
 8001e06:	601a      	str	r2, [r3, #0]
          break;
 8001e08:	e00a      	b.n	8001e20 <HAL_FLASHEx_Erase+0xc4>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8001e0a:	68bb      	ldr	r3, [r7, #8]
 8001e0c:	3301      	adds	r3, #1
 8001e0e:	60bb      	str	r3, [r7, #8]
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	68da      	ldr	r2, [r3, #12]
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	689b      	ldr	r3, [r3, #8]
 8001e18:	4413      	add	r3, r2
 8001e1a:	68ba      	ldr	r2, [r7, #8]
 8001e1c:	429a      	cmp	r2, r3
 8001e1e:	d3da      	bcc.n	8001dd6 <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();    
 8001e20:	f000 f878 	bl	8001f14 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001e24:	4b03      	ldr	r3, [pc, #12]	; (8001e34 <HAL_FLASHEx_Erase+0xd8>)
 8001e26:	2200      	movs	r2, #0
 8001e28:	761a      	strb	r2, [r3, #24]

  return status;
 8001e2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	3710      	adds	r7, #16
 8001e30:	46bd      	mov	sp, r7
 8001e32:	bd80      	pop	{r7, pc}
 8001e34:	200001a4 	.word	0x200001a4
 8001e38:	40023c00 	.word	0x40023c00

08001e3c <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	b083      	sub	sp, #12
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	4603      	mov	r3, r0
 8001e44:	6039      	str	r1, [r7, #0]
 8001e46:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));
  
  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001e48:	4b0d      	ldr	r3, [pc, #52]	; (8001e80 <FLASH_MassErase+0x44>)
 8001e4a:	691b      	ldr	r3, [r3, #16]
 8001e4c:	4a0c      	ldr	r2, [pc, #48]	; (8001e80 <FLASH_MassErase+0x44>)
 8001e4e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001e52:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 8001e54:	4b0a      	ldr	r3, [pc, #40]	; (8001e80 <FLASH_MassErase+0x44>)
 8001e56:	691b      	ldr	r3, [r3, #16]
 8001e58:	4a09      	ldr	r2, [pc, #36]	; (8001e80 <FLASH_MassErase+0x44>)
 8001e5a:	f043 0304 	orr.w	r3, r3, #4
 8001e5e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8U);
 8001e60:	4b07      	ldr	r3, [pc, #28]	; (8001e80 <FLASH_MassErase+0x44>)
 8001e62:	691a      	ldr	r2, [r3, #16]
 8001e64:	79fb      	ldrb	r3, [r7, #7]
 8001e66:	021b      	lsls	r3, r3, #8
 8001e68:	4313      	orrs	r3, r2
 8001e6a:	4a05      	ldr	r2, [pc, #20]	; (8001e80 <FLASH_MassErase+0x44>)
 8001e6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e70:	6113      	str	r3, [r2, #16]
}
 8001e72:	bf00      	nop
 8001e74:	370c      	adds	r7, #12
 8001e76:	46bd      	mov	sp, r7
 8001e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7c:	4770      	bx	lr
 8001e7e:	bf00      	nop
 8001e80:	40023c00 	.word	0x40023c00

08001e84 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8001e84:	b480      	push	{r7}
 8001e86:	b085      	sub	sp, #20
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
 8001e8c:	460b      	mov	r3, r1
 8001e8e:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8001e90:	2300      	movs	r3, #0
 8001e92:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8001e94:	78fb      	ldrb	r3, [r7, #3]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d102      	bne.n	8001ea0 <FLASH_Erase_Sector+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	60fb      	str	r3, [r7, #12]
 8001e9e:	e010      	b.n	8001ec2 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8001ea0:	78fb      	ldrb	r3, [r7, #3]
 8001ea2:	2b01      	cmp	r3, #1
 8001ea4:	d103      	bne.n	8001eae <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8001ea6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001eaa:	60fb      	str	r3, [r7, #12]
 8001eac:	e009      	b.n	8001ec2 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8001eae:	78fb      	ldrb	r3, [r7, #3]
 8001eb0:	2b02      	cmp	r3, #2
 8001eb2:	d103      	bne.n	8001ebc <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8001eb4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001eb8:	60fb      	str	r3, [r7, #12]
 8001eba:	e002      	b.n	8001ec2 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8001ebc:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001ec0:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001ec2:	4b13      	ldr	r3, [pc, #76]	; (8001f10 <FLASH_Erase_Sector+0x8c>)
 8001ec4:	691b      	ldr	r3, [r3, #16]
 8001ec6:	4a12      	ldr	r2, [pc, #72]	; (8001f10 <FLASH_Erase_Sector+0x8c>)
 8001ec8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001ecc:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8001ece:	4b10      	ldr	r3, [pc, #64]	; (8001f10 <FLASH_Erase_Sector+0x8c>)
 8001ed0:	691a      	ldr	r2, [r3, #16]
 8001ed2:	490f      	ldr	r1, [pc, #60]	; (8001f10 <FLASH_Erase_Sector+0x8c>)
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	4313      	orrs	r3, r2
 8001ed8:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8001eda:	4b0d      	ldr	r3, [pc, #52]	; (8001f10 <FLASH_Erase_Sector+0x8c>)
 8001edc:	691b      	ldr	r3, [r3, #16]
 8001ede:	4a0c      	ldr	r2, [pc, #48]	; (8001f10 <FLASH_Erase_Sector+0x8c>)
 8001ee0:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001ee4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8001ee6:	4b0a      	ldr	r3, [pc, #40]	; (8001f10 <FLASH_Erase_Sector+0x8c>)
 8001ee8:	691a      	ldr	r2, [r3, #16]
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	00db      	lsls	r3, r3, #3
 8001eee:	4313      	orrs	r3, r2
 8001ef0:	4a07      	ldr	r2, [pc, #28]	; (8001f10 <FLASH_Erase_Sector+0x8c>)
 8001ef2:	f043 0302 	orr.w	r3, r3, #2
 8001ef6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8001ef8:	4b05      	ldr	r3, [pc, #20]	; (8001f10 <FLASH_Erase_Sector+0x8c>)
 8001efa:	691b      	ldr	r3, [r3, #16]
 8001efc:	4a04      	ldr	r2, [pc, #16]	; (8001f10 <FLASH_Erase_Sector+0x8c>)
 8001efe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f02:	6113      	str	r3, [r2, #16]
}
 8001f04:	bf00      	nop
 8001f06:	3714      	adds	r7, #20
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0e:	4770      	bx	lr
 8001f10:	40023c00 	.word	0x40023c00

08001f14 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8001f14:	b480      	push	{r7}
 8001f16:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN)!= RESET)
 8001f18:	4b20      	ldr	r3, [pc, #128]	; (8001f9c <FLASH_FlushCaches+0x88>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d017      	beq.n	8001f54 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8001f24:	4b1d      	ldr	r3, [pc, #116]	; (8001f9c <FLASH_FlushCaches+0x88>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4a1c      	ldr	r2, [pc, #112]	; (8001f9c <FLASH_FlushCaches+0x88>)
 8001f2a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001f2e:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8001f30:	4b1a      	ldr	r3, [pc, #104]	; (8001f9c <FLASH_FlushCaches+0x88>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4a19      	ldr	r2, [pc, #100]	; (8001f9c <FLASH_FlushCaches+0x88>)
 8001f36:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001f3a:	6013      	str	r3, [r2, #0]
 8001f3c:	4b17      	ldr	r3, [pc, #92]	; (8001f9c <FLASH_FlushCaches+0x88>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4a16      	ldr	r2, [pc, #88]	; (8001f9c <FLASH_FlushCaches+0x88>)
 8001f42:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001f46:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001f48:	4b14      	ldr	r3, [pc, #80]	; (8001f9c <FLASH_FlushCaches+0x88>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4a13      	ldr	r2, [pc, #76]	; (8001f9c <FLASH_FlushCaches+0x88>)
 8001f4e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f52:	6013      	str	r3, [r2, #0]
  }
  
  /* Flush data cache */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8001f54:	4b11      	ldr	r3, [pc, #68]	; (8001f9c <FLASH_FlushCaches+0x88>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d017      	beq.n	8001f90 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8001f60:	4b0e      	ldr	r3, [pc, #56]	; (8001f9c <FLASH_FlushCaches+0x88>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	4a0d      	ldr	r2, [pc, #52]	; (8001f9c <FLASH_FlushCaches+0x88>)
 8001f66:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001f6a:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8001f6c:	4b0b      	ldr	r3, [pc, #44]	; (8001f9c <FLASH_FlushCaches+0x88>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	4a0a      	ldr	r2, [pc, #40]	; (8001f9c <FLASH_FlushCaches+0x88>)
 8001f72:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001f76:	6013      	str	r3, [r2, #0]
 8001f78:	4b08      	ldr	r3, [pc, #32]	; (8001f9c <FLASH_FlushCaches+0x88>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4a07      	ldr	r2, [pc, #28]	; (8001f9c <FLASH_FlushCaches+0x88>)
 8001f7e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001f82:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8001f84:	4b05      	ldr	r3, [pc, #20]	; (8001f9c <FLASH_FlushCaches+0x88>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	4a04      	ldr	r2, [pc, #16]	; (8001f9c <FLASH_FlushCaches+0x88>)
 8001f8a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001f8e:	6013      	str	r3, [r2, #0]
  }
}
 8001f90:	bf00      	nop
 8001f92:	46bd      	mov	sp, r7
 8001f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f98:	4770      	bx	lr
 8001f9a:	bf00      	nop
 8001f9c:	40023c00 	.word	0x40023c00

08001fa0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	b089      	sub	sp, #36	; 0x24
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
 8001fa8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001faa:	2300      	movs	r3, #0
 8001fac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	61fb      	str	r3, [r7, #28]
 8001fba:	e16b      	b.n	8002294 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001fbc:	2201      	movs	r2, #1
 8001fbe:	69fb      	ldr	r3, [r7, #28]
 8001fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	697a      	ldr	r2, [r7, #20]
 8001fcc:	4013      	ands	r3, r2
 8001fce:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001fd0:	693a      	ldr	r2, [r7, #16]
 8001fd2:	697b      	ldr	r3, [r7, #20]
 8001fd4:	429a      	cmp	r2, r3
 8001fd6:	f040 815a 	bne.w	800228e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	685b      	ldr	r3, [r3, #4]
 8001fde:	2b02      	cmp	r3, #2
 8001fe0:	d003      	beq.n	8001fea <HAL_GPIO_Init+0x4a>
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	685b      	ldr	r3, [r3, #4]
 8001fe6:	2b12      	cmp	r3, #18
 8001fe8:	d123      	bne.n	8002032 <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001fea:	69fb      	ldr	r3, [r7, #28]
 8001fec:	08da      	lsrs	r2, r3, #3
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	3208      	adds	r2, #8
 8001ff2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ff6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001ff8:	69fb      	ldr	r3, [r7, #28]
 8001ffa:	f003 0307 	and.w	r3, r3, #7
 8001ffe:	009b      	lsls	r3, r3, #2
 8002000:	220f      	movs	r2, #15
 8002002:	fa02 f303 	lsl.w	r3, r2, r3
 8002006:	43db      	mvns	r3, r3
 8002008:	69ba      	ldr	r2, [r7, #24]
 800200a:	4013      	ands	r3, r2
 800200c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	691a      	ldr	r2, [r3, #16]
 8002012:	69fb      	ldr	r3, [r7, #28]
 8002014:	f003 0307 	and.w	r3, r3, #7
 8002018:	009b      	lsls	r3, r3, #2
 800201a:	fa02 f303 	lsl.w	r3, r2, r3
 800201e:	69ba      	ldr	r2, [r7, #24]
 8002020:	4313      	orrs	r3, r2
 8002022:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002024:	69fb      	ldr	r3, [r7, #28]
 8002026:	08da      	lsrs	r2, r3, #3
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	3208      	adds	r2, #8
 800202c:	69b9      	ldr	r1, [r7, #24]
 800202e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002038:	69fb      	ldr	r3, [r7, #28]
 800203a:	005b      	lsls	r3, r3, #1
 800203c:	2203      	movs	r2, #3
 800203e:	fa02 f303 	lsl.w	r3, r2, r3
 8002042:	43db      	mvns	r3, r3
 8002044:	69ba      	ldr	r2, [r7, #24]
 8002046:	4013      	ands	r3, r2
 8002048:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	685b      	ldr	r3, [r3, #4]
 800204e:	f003 0203 	and.w	r2, r3, #3
 8002052:	69fb      	ldr	r3, [r7, #28]
 8002054:	005b      	lsls	r3, r3, #1
 8002056:	fa02 f303 	lsl.w	r3, r2, r3
 800205a:	69ba      	ldr	r2, [r7, #24]
 800205c:	4313      	orrs	r3, r2
 800205e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	69ba      	ldr	r2, [r7, #24]
 8002064:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	2b01      	cmp	r3, #1
 800206c:	d00b      	beq.n	8002086 <HAL_GPIO_Init+0xe6>
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	685b      	ldr	r3, [r3, #4]
 8002072:	2b02      	cmp	r3, #2
 8002074:	d007      	beq.n	8002086 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800207a:	2b11      	cmp	r3, #17
 800207c:	d003      	beq.n	8002086 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	2b12      	cmp	r3, #18
 8002084:	d130      	bne.n	80020e8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	689b      	ldr	r3, [r3, #8]
 800208a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800208c:	69fb      	ldr	r3, [r7, #28]
 800208e:	005b      	lsls	r3, r3, #1
 8002090:	2203      	movs	r2, #3
 8002092:	fa02 f303 	lsl.w	r3, r2, r3
 8002096:	43db      	mvns	r3, r3
 8002098:	69ba      	ldr	r2, [r7, #24]
 800209a:	4013      	ands	r3, r2
 800209c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	68da      	ldr	r2, [r3, #12]
 80020a2:	69fb      	ldr	r3, [r7, #28]
 80020a4:	005b      	lsls	r3, r3, #1
 80020a6:	fa02 f303 	lsl.w	r3, r2, r3
 80020aa:	69ba      	ldr	r2, [r7, #24]
 80020ac:	4313      	orrs	r3, r2
 80020ae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	69ba      	ldr	r2, [r7, #24]
 80020b4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	685b      	ldr	r3, [r3, #4]
 80020ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80020bc:	2201      	movs	r2, #1
 80020be:	69fb      	ldr	r3, [r7, #28]
 80020c0:	fa02 f303 	lsl.w	r3, r2, r3
 80020c4:	43db      	mvns	r3, r3
 80020c6:	69ba      	ldr	r2, [r7, #24]
 80020c8:	4013      	ands	r3, r2
 80020ca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	091b      	lsrs	r3, r3, #4
 80020d2:	f003 0201 	and.w	r2, r3, #1
 80020d6:	69fb      	ldr	r3, [r7, #28]
 80020d8:	fa02 f303 	lsl.w	r3, r2, r3
 80020dc:	69ba      	ldr	r2, [r7, #24]
 80020de:	4313      	orrs	r3, r2
 80020e0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	69ba      	ldr	r2, [r7, #24]
 80020e6:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	68db      	ldr	r3, [r3, #12]
 80020ec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80020ee:	69fb      	ldr	r3, [r7, #28]
 80020f0:	005b      	lsls	r3, r3, #1
 80020f2:	2203      	movs	r2, #3
 80020f4:	fa02 f303 	lsl.w	r3, r2, r3
 80020f8:	43db      	mvns	r3, r3
 80020fa:	69ba      	ldr	r2, [r7, #24]
 80020fc:	4013      	ands	r3, r2
 80020fe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	689a      	ldr	r2, [r3, #8]
 8002104:	69fb      	ldr	r3, [r7, #28]
 8002106:	005b      	lsls	r3, r3, #1
 8002108:	fa02 f303 	lsl.w	r3, r2, r3
 800210c:	69ba      	ldr	r2, [r7, #24]
 800210e:	4313      	orrs	r3, r2
 8002110:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	69ba      	ldr	r2, [r7, #24]
 8002116:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002120:	2b00      	cmp	r3, #0
 8002122:	f000 80b4 	beq.w	800228e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002126:	2300      	movs	r3, #0
 8002128:	60fb      	str	r3, [r7, #12]
 800212a:	4b5f      	ldr	r3, [pc, #380]	; (80022a8 <HAL_GPIO_Init+0x308>)
 800212c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800212e:	4a5e      	ldr	r2, [pc, #376]	; (80022a8 <HAL_GPIO_Init+0x308>)
 8002130:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002134:	6453      	str	r3, [r2, #68]	; 0x44
 8002136:	4b5c      	ldr	r3, [pc, #368]	; (80022a8 <HAL_GPIO_Init+0x308>)
 8002138:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800213a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800213e:	60fb      	str	r3, [r7, #12]
 8002140:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002142:	4a5a      	ldr	r2, [pc, #360]	; (80022ac <HAL_GPIO_Init+0x30c>)
 8002144:	69fb      	ldr	r3, [r7, #28]
 8002146:	089b      	lsrs	r3, r3, #2
 8002148:	3302      	adds	r3, #2
 800214a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800214e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002150:	69fb      	ldr	r3, [r7, #28]
 8002152:	f003 0303 	and.w	r3, r3, #3
 8002156:	009b      	lsls	r3, r3, #2
 8002158:	220f      	movs	r2, #15
 800215a:	fa02 f303 	lsl.w	r3, r2, r3
 800215e:	43db      	mvns	r3, r3
 8002160:	69ba      	ldr	r2, [r7, #24]
 8002162:	4013      	ands	r3, r2
 8002164:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	4a51      	ldr	r2, [pc, #324]	; (80022b0 <HAL_GPIO_Init+0x310>)
 800216a:	4293      	cmp	r3, r2
 800216c:	d02b      	beq.n	80021c6 <HAL_GPIO_Init+0x226>
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	4a50      	ldr	r2, [pc, #320]	; (80022b4 <HAL_GPIO_Init+0x314>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d025      	beq.n	80021c2 <HAL_GPIO_Init+0x222>
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	4a4f      	ldr	r2, [pc, #316]	; (80022b8 <HAL_GPIO_Init+0x318>)
 800217a:	4293      	cmp	r3, r2
 800217c:	d01f      	beq.n	80021be <HAL_GPIO_Init+0x21e>
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	4a4e      	ldr	r2, [pc, #312]	; (80022bc <HAL_GPIO_Init+0x31c>)
 8002182:	4293      	cmp	r3, r2
 8002184:	d019      	beq.n	80021ba <HAL_GPIO_Init+0x21a>
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	4a4d      	ldr	r2, [pc, #308]	; (80022c0 <HAL_GPIO_Init+0x320>)
 800218a:	4293      	cmp	r3, r2
 800218c:	d013      	beq.n	80021b6 <HAL_GPIO_Init+0x216>
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	4a4c      	ldr	r2, [pc, #304]	; (80022c4 <HAL_GPIO_Init+0x324>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d00d      	beq.n	80021b2 <HAL_GPIO_Init+0x212>
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	4a4b      	ldr	r2, [pc, #300]	; (80022c8 <HAL_GPIO_Init+0x328>)
 800219a:	4293      	cmp	r3, r2
 800219c:	d007      	beq.n	80021ae <HAL_GPIO_Init+0x20e>
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	4a4a      	ldr	r2, [pc, #296]	; (80022cc <HAL_GPIO_Init+0x32c>)
 80021a2:	4293      	cmp	r3, r2
 80021a4:	d101      	bne.n	80021aa <HAL_GPIO_Init+0x20a>
 80021a6:	2307      	movs	r3, #7
 80021a8:	e00e      	b.n	80021c8 <HAL_GPIO_Init+0x228>
 80021aa:	2308      	movs	r3, #8
 80021ac:	e00c      	b.n	80021c8 <HAL_GPIO_Init+0x228>
 80021ae:	2306      	movs	r3, #6
 80021b0:	e00a      	b.n	80021c8 <HAL_GPIO_Init+0x228>
 80021b2:	2305      	movs	r3, #5
 80021b4:	e008      	b.n	80021c8 <HAL_GPIO_Init+0x228>
 80021b6:	2304      	movs	r3, #4
 80021b8:	e006      	b.n	80021c8 <HAL_GPIO_Init+0x228>
 80021ba:	2303      	movs	r3, #3
 80021bc:	e004      	b.n	80021c8 <HAL_GPIO_Init+0x228>
 80021be:	2302      	movs	r3, #2
 80021c0:	e002      	b.n	80021c8 <HAL_GPIO_Init+0x228>
 80021c2:	2301      	movs	r3, #1
 80021c4:	e000      	b.n	80021c8 <HAL_GPIO_Init+0x228>
 80021c6:	2300      	movs	r3, #0
 80021c8:	69fa      	ldr	r2, [r7, #28]
 80021ca:	f002 0203 	and.w	r2, r2, #3
 80021ce:	0092      	lsls	r2, r2, #2
 80021d0:	4093      	lsls	r3, r2
 80021d2:	69ba      	ldr	r2, [r7, #24]
 80021d4:	4313      	orrs	r3, r2
 80021d6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80021d8:	4934      	ldr	r1, [pc, #208]	; (80022ac <HAL_GPIO_Init+0x30c>)
 80021da:	69fb      	ldr	r3, [r7, #28]
 80021dc:	089b      	lsrs	r3, r3, #2
 80021de:	3302      	adds	r3, #2
 80021e0:	69ba      	ldr	r2, [r7, #24]
 80021e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80021e6:	4b3a      	ldr	r3, [pc, #232]	; (80022d0 <HAL_GPIO_Init+0x330>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021ec:	693b      	ldr	r3, [r7, #16]
 80021ee:	43db      	mvns	r3, r3
 80021f0:	69ba      	ldr	r2, [r7, #24]
 80021f2:	4013      	ands	r3, r2
 80021f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	685b      	ldr	r3, [r3, #4]
 80021fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d003      	beq.n	800220a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002202:	69ba      	ldr	r2, [r7, #24]
 8002204:	693b      	ldr	r3, [r7, #16]
 8002206:	4313      	orrs	r3, r2
 8002208:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800220a:	4a31      	ldr	r2, [pc, #196]	; (80022d0 <HAL_GPIO_Init+0x330>)
 800220c:	69bb      	ldr	r3, [r7, #24]
 800220e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002210:	4b2f      	ldr	r3, [pc, #188]	; (80022d0 <HAL_GPIO_Init+0x330>)
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002216:	693b      	ldr	r3, [r7, #16]
 8002218:	43db      	mvns	r3, r3
 800221a:	69ba      	ldr	r2, [r7, #24]
 800221c:	4013      	ands	r3, r2
 800221e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	685b      	ldr	r3, [r3, #4]
 8002224:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002228:	2b00      	cmp	r3, #0
 800222a:	d003      	beq.n	8002234 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800222c:	69ba      	ldr	r2, [r7, #24]
 800222e:	693b      	ldr	r3, [r7, #16]
 8002230:	4313      	orrs	r3, r2
 8002232:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002234:	4a26      	ldr	r2, [pc, #152]	; (80022d0 <HAL_GPIO_Init+0x330>)
 8002236:	69bb      	ldr	r3, [r7, #24]
 8002238:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800223a:	4b25      	ldr	r3, [pc, #148]	; (80022d0 <HAL_GPIO_Init+0x330>)
 800223c:	689b      	ldr	r3, [r3, #8]
 800223e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002240:	693b      	ldr	r3, [r7, #16]
 8002242:	43db      	mvns	r3, r3
 8002244:	69ba      	ldr	r2, [r7, #24]
 8002246:	4013      	ands	r3, r2
 8002248:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	685b      	ldr	r3, [r3, #4]
 800224e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002252:	2b00      	cmp	r3, #0
 8002254:	d003      	beq.n	800225e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002256:	69ba      	ldr	r2, [r7, #24]
 8002258:	693b      	ldr	r3, [r7, #16]
 800225a:	4313      	orrs	r3, r2
 800225c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800225e:	4a1c      	ldr	r2, [pc, #112]	; (80022d0 <HAL_GPIO_Init+0x330>)
 8002260:	69bb      	ldr	r3, [r7, #24]
 8002262:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002264:	4b1a      	ldr	r3, [pc, #104]	; (80022d0 <HAL_GPIO_Init+0x330>)
 8002266:	68db      	ldr	r3, [r3, #12]
 8002268:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800226a:	693b      	ldr	r3, [r7, #16]
 800226c:	43db      	mvns	r3, r3
 800226e:	69ba      	ldr	r2, [r7, #24]
 8002270:	4013      	ands	r3, r2
 8002272:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	685b      	ldr	r3, [r3, #4]
 8002278:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800227c:	2b00      	cmp	r3, #0
 800227e:	d003      	beq.n	8002288 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002280:	69ba      	ldr	r2, [r7, #24]
 8002282:	693b      	ldr	r3, [r7, #16]
 8002284:	4313      	orrs	r3, r2
 8002286:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002288:	4a11      	ldr	r2, [pc, #68]	; (80022d0 <HAL_GPIO_Init+0x330>)
 800228a:	69bb      	ldr	r3, [r7, #24]
 800228c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800228e:	69fb      	ldr	r3, [r7, #28]
 8002290:	3301      	adds	r3, #1
 8002292:	61fb      	str	r3, [r7, #28]
 8002294:	69fb      	ldr	r3, [r7, #28]
 8002296:	2b0f      	cmp	r3, #15
 8002298:	f67f ae90 	bls.w	8001fbc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800229c:	bf00      	nop
 800229e:	3724      	adds	r7, #36	; 0x24
 80022a0:	46bd      	mov	sp, r7
 80022a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a6:	4770      	bx	lr
 80022a8:	40023800 	.word	0x40023800
 80022ac:	40013800 	.word	0x40013800
 80022b0:	40020000 	.word	0x40020000
 80022b4:	40020400 	.word	0x40020400
 80022b8:	40020800 	.word	0x40020800
 80022bc:	40020c00 	.word	0x40020c00
 80022c0:	40021000 	.word	0x40021000
 80022c4:	40021400 	.word	0x40021400
 80022c8:	40021800 	.word	0x40021800
 80022cc:	40021c00 	.word	0x40021c00
 80022d0:	40013c00 	.word	0x40013c00

080022d4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80022d4:	b480      	push	{r7}
 80022d6:	b085      	sub	sp, #20
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
 80022dc:	460b      	mov	r3, r1
 80022de:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	691a      	ldr	r2, [r3, #16]
 80022e4:	887b      	ldrh	r3, [r7, #2]
 80022e6:	4013      	ands	r3, r2
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d002      	beq.n	80022f2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80022ec:	2301      	movs	r3, #1
 80022ee:	73fb      	strb	r3, [r7, #15]
 80022f0:	e001      	b.n	80022f6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80022f2:	2300      	movs	r3, #0
 80022f4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80022f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80022f8:	4618      	mov	r0, r3
 80022fa:	3714      	adds	r7, #20
 80022fc:	46bd      	mov	sp, r7
 80022fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002302:	4770      	bx	lr

08002304 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002304:	b480      	push	{r7}
 8002306:	b083      	sub	sp, #12
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
 800230c:	460b      	mov	r3, r1
 800230e:	807b      	strh	r3, [r7, #2]
 8002310:	4613      	mov	r3, r2
 8002312:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002314:	787b      	ldrb	r3, [r7, #1]
 8002316:	2b00      	cmp	r3, #0
 8002318:	d003      	beq.n	8002322 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800231a:	887a      	ldrh	r2, [r7, #2]
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002320:	e003      	b.n	800232a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002322:	887b      	ldrh	r3, [r7, #2]
 8002324:	041a      	lsls	r2, r3, #16
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	619a      	str	r2, [r3, #24]
}
 800232a:	bf00      	nop
 800232c:	370c      	adds	r7, #12
 800232e:	46bd      	mov	sp, r7
 8002330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002334:	4770      	bx	lr
	...

08002338 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b086      	sub	sp, #24
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2b00      	cmp	r3, #0
 8002344:	d101      	bne.n	800234a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002346:	2301      	movs	r3, #1
 8002348:	e22d      	b.n	80027a6 <HAL_RCC_OscConfig+0x46e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f003 0301 	and.w	r3, r3, #1
 8002352:	2b00      	cmp	r3, #0
 8002354:	d075      	beq.n	8002442 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002356:	4ba3      	ldr	r3, [pc, #652]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 8002358:	689b      	ldr	r3, [r3, #8]
 800235a:	f003 030c 	and.w	r3, r3, #12
 800235e:	2b04      	cmp	r3, #4
 8002360:	d00c      	beq.n	800237c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002362:	4ba0      	ldr	r3, [pc, #640]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 8002364:	689b      	ldr	r3, [r3, #8]
 8002366:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800236a:	2b08      	cmp	r3, #8
 800236c:	d112      	bne.n	8002394 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800236e:	4b9d      	ldr	r3, [pc, #628]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002376:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800237a:	d10b      	bne.n	8002394 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800237c:	4b99      	ldr	r3, [pc, #612]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002384:	2b00      	cmp	r3, #0
 8002386:	d05b      	beq.n	8002440 <HAL_RCC_OscConfig+0x108>
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	685b      	ldr	r3, [r3, #4]
 800238c:	2b00      	cmp	r3, #0
 800238e:	d157      	bne.n	8002440 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002390:	2301      	movs	r3, #1
 8002392:	e208      	b.n	80027a6 <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800239c:	d106      	bne.n	80023ac <HAL_RCC_OscConfig+0x74>
 800239e:	4b91      	ldr	r3, [pc, #580]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	4a90      	ldr	r2, [pc, #576]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 80023a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023a8:	6013      	str	r3, [r2, #0]
 80023aa:	e01d      	b.n	80023e8 <HAL_RCC_OscConfig+0xb0>
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80023b4:	d10c      	bne.n	80023d0 <HAL_RCC_OscConfig+0x98>
 80023b6:	4b8b      	ldr	r3, [pc, #556]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	4a8a      	ldr	r2, [pc, #552]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 80023bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80023c0:	6013      	str	r3, [r2, #0]
 80023c2:	4b88      	ldr	r3, [pc, #544]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	4a87      	ldr	r2, [pc, #540]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 80023c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023cc:	6013      	str	r3, [r2, #0]
 80023ce:	e00b      	b.n	80023e8 <HAL_RCC_OscConfig+0xb0>
 80023d0:	4b84      	ldr	r3, [pc, #528]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	4a83      	ldr	r2, [pc, #524]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 80023d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023da:	6013      	str	r3, [r2, #0]
 80023dc:	4b81      	ldr	r3, [pc, #516]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	4a80      	ldr	r2, [pc, #512]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 80023e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	685b      	ldr	r3, [r3, #4]
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d013      	beq.n	8002418 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023f0:	f7fe fe08 	bl	8001004 <HAL_GetTick>
 80023f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023f6:	e008      	b.n	800240a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80023f8:	f7fe fe04 	bl	8001004 <HAL_GetTick>
 80023fc:	4602      	mov	r2, r0
 80023fe:	693b      	ldr	r3, [r7, #16]
 8002400:	1ad3      	subs	r3, r2, r3
 8002402:	2b64      	cmp	r3, #100	; 0x64
 8002404:	d901      	bls.n	800240a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002406:	2303      	movs	r3, #3
 8002408:	e1cd      	b.n	80027a6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800240a:	4b76      	ldr	r3, [pc, #472]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002412:	2b00      	cmp	r3, #0
 8002414:	d0f0      	beq.n	80023f8 <HAL_RCC_OscConfig+0xc0>
 8002416:	e014      	b.n	8002442 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002418:	f7fe fdf4 	bl	8001004 <HAL_GetTick>
 800241c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800241e:	e008      	b.n	8002432 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002420:	f7fe fdf0 	bl	8001004 <HAL_GetTick>
 8002424:	4602      	mov	r2, r0
 8002426:	693b      	ldr	r3, [r7, #16]
 8002428:	1ad3      	subs	r3, r2, r3
 800242a:	2b64      	cmp	r3, #100	; 0x64
 800242c:	d901      	bls.n	8002432 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800242e:	2303      	movs	r3, #3
 8002430:	e1b9      	b.n	80027a6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002432:	4b6c      	ldr	r3, [pc, #432]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800243a:	2b00      	cmp	r3, #0
 800243c:	d1f0      	bne.n	8002420 <HAL_RCC_OscConfig+0xe8>
 800243e:	e000      	b.n	8002442 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002440:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f003 0302 	and.w	r3, r3, #2
 800244a:	2b00      	cmp	r3, #0
 800244c:	d063      	beq.n	8002516 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800244e:	4b65      	ldr	r3, [pc, #404]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 8002450:	689b      	ldr	r3, [r3, #8]
 8002452:	f003 030c 	and.w	r3, r3, #12
 8002456:	2b00      	cmp	r3, #0
 8002458:	d00b      	beq.n	8002472 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800245a:	4b62      	ldr	r3, [pc, #392]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 800245c:	689b      	ldr	r3, [r3, #8]
 800245e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002462:	2b08      	cmp	r3, #8
 8002464:	d11c      	bne.n	80024a0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002466:	4b5f      	ldr	r3, [pc, #380]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800246e:	2b00      	cmp	r3, #0
 8002470:	d116      	bne.n	80024a0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002472:	4b5c      	ldr	r3, [pc, #368]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f003 0302 	and.w	r3, r3, #2
 800247a:	2b00      	cmp	r3, #0
 800247c:	d005      	beq.n	800248a <HAL_RCC_OscConfig+0x152>
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	68db      	ldr	r3, [r3, #12]
 8002482:	2b01      	cmp	r3, #1
 8002484:	d001      	beq.n	800248a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002486:	2301      	movs	r3, #1
 8002488:	e18d      	b.n	80027a6 <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800248a:	4b56      	ldr	r3, [pc, #344]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	691b      	ldr	r3, [r3, #16]
 8002496:	00db      	lsls	r3, r3, #3
 8002498:	4952      	ldr	r1, [pc, #328]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 800249a:	4313      	orrs	r3, r2
 800249c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800249e:	e03a      	b.n	8002516 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	68db      	ldr	r3, [r3, #12]
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d020      	beq.n	80024ea <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80024a8:	4b4f      	ldr	r3, [pc, #316]	; (80025e8 <HAL_RCC_OscConfig+0x2b0>)
 80024aa:	2201      	movs	r2, #1
 80024ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024ae:	f7fe fda9 	bl	8001004 <HAL_GetTick>
 80024b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024b4:	e008      	b.n	80024c8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80024b6:	f7fe fda5 	bl	8001004 <HAL_GetTick>
 80024ba:	4602      	mov	r2, r0
 80024bc:	693b      	ldr	r3, [r7, #16]
 80024be:	1ad3      	subs	r3, r2, r3
 80024c0:	2b02      	cmp	r3, #2
 80024c2:	d901      	bls.n	80024c8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80024c4:	2303      	movs	r3, #3
 80024c6:	e16e      	b.n	80027a6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024c8:	4b46      	ldr	r3, [pc, #280]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f003 0302 	and.w	r3, r3, #2
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d0f0      	beq.n	80024b6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024d4:	4b43      	ldr	r3, [pc, #268]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	691b      	ldr	r3, [r3, #16]
 80024e0:	00db      	lsls	r3, r3, #3
 80024e2:	4940      	ldr	r1, [pc, #256]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 80024e4:	4313      	orrs	r3, r2
 80024e6:	600b      	str	r3, [r1, #0]
 80024e8:	e015      	b.n	8002516 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80024ea:	4b3f      	ldr	r3, [pc, #252]	; (80025e8 <HAL_RCC_OscConfig+0x2b0>)
 80024ec:	2200      	movs	r2, #0
 80024ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024f0:	f7fe fd88 	bl	8001004 <HAL_GetTick>
 80024f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024f6:	e008      	b.n	800250a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80024f8:	f7fe fd84 	bl	8001004 <HAL_GetTick>
 80024fc:	4602      	mov	r2, r0
 80024fe:	693b      	ldr	r3, [r7, #16]
 8002500:	1ad3      	subs	r3, r2, r3
 8002502:	2b02      	cmp	r3, #2
 8002504:	d901      	bls.n	800250a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002506:	2303      	movs	r3, #3
 8002508:	e14d      	b.n	80027a6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800250a:	4b36      	ldr	r3, [pc, #216]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f003 0302 	and.w	r3, r3, #2
 8002512:	2b00      	cmp	r3, #0
 8002514:	d1f0      	bne.n	80024f8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f003 0308 	and.w	r3, r3, #8
 800251e:	2b00      	cmp	r3, #0
 8002520:	d030      	beq.n	8002584 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	695b      	ldr	r3, [r3, #20]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d016      	beq.n	8002558 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800252a:	4b30      	ldr	r3, [pc, #192]	; (80025ec <HAL_RCC_OscConfig+0x2b4>)
 800252c:	2201      	movs	r2, #1
 800252e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002530:	f7fe fd68 	bl	8001004 <HAL_GetTick>
 8002534:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002536:	e008      	b.n	800254a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002538:	f7fe fd64 	bl	8001004 <HAL_GetTick>
 800253c:	4602      	mov	r2, r0
 800253e:	693b      	ldr	r3, [r7, #16]
 8002540:	1ad3      	subs	r3, r2, r3
 8002542:	2b02      	cmp	r3, #2
 8002544:	d901      	bls.n	800254a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002546:	2303      	movs	r3, #3
 8002548:	e12d      	b.n	80027a6 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800254a:	4b26      	ldr	r3, [pc, #152]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 800254c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800254e:	f003 0302 	and.w	r3, r3, #2
 8002552:	2b00      	cmp	r3, #0
 8002554:	d0f0      	beq.n	8002538 <HAL_RCC_OscConfig+0x200>
 8002556:	e015      	b.n	8002584 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002558:	4b24      	ldr	r3, [pc, #144]	; (80025ec <HAL_RCC_OscConfig+0x2b4>)
 800255a:	2200      	movs	r2, #0
 800255c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800255e:	f7fe fd51 	bl	8001004 <HAL_GetTick>
 8002562:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002564:	e008      	b.n	8002578 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002566:	f7fe fd4d 	bl	8001004 <HAL_GetTick>
 800256a:	4602      	mov	r2, r0
 800256c:	693b      	ldr	r3, [r7, #16]
 800256e:	1ad3      	subs	r3, r2, r3
 8002570:	2b02      	cmp	r3, #2
 8002572:	d901      	bls.n	8002578 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002574:	2303      	movs	r3, #3
 8002576:	e116      	b.n	80027a6 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002578:	4b1a      	ldr	r3, [pc, #104]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 800257a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800257c:	f003 0302 	and.w	r3, r3, #2
 8002580:	2b00      	cmp	r3, #0
 8002582:	d1f0      	bne.n	8002566 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f003 0304 	and.w	r3, r3, #4
 800258c:	2b00      	cmp	r3, #0
 800258e:	f000 80a0 	beq.w	80026d2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002592:	2300      	movs	r3, #0
 8002594:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002596:	4b13      	ldr	r3, [pc, #76]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 8002598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800259a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d10f      	bne.n	80025c2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025a2:	2300      	movs	r3, #0
 80025a4:	60fb      	str	r3, [r7, #12]
 80025a6:	4b0f      	ldr	r3, [pc, #60]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 80025a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025aa:	4a0e      	ldr	r2, [pc, #56]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 80025ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025b0:	6413      	str	r3, [r2, #64]	; 0x40
 80025b2:	4b0c      	ldr	r3, [pc, #48]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 80025b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025ba:	60fb      	str	r3, [r7, #12]
 80025bc:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80025be:	2301      	movs	r3, #1
 80025c0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025c2:	4b0b      	ldr	r3, [pc, #44]	; (80025f0 <HAL_RCC_OscConfig+0x2b8>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d121      	bne.n	8002612 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80025ce:	4b08      	ldr	r3, [pc, #32]	; (80025f0 <HAL_RCC_OscConfig+0x2b8>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	4a07      	ldr	r2, [pc, #28]	; (80025f0 <HAL_RCC_OscConfig+0x2b8>)
 80025d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80025da:	f7fe fd13 	bl	8001004 <HAL_GetTick>
 80025de:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025e0:	e011      	b.n	8002606 <HAL_RCC_OscConfig+0x2ce>
 80025e2:	bf00      	nop
 80025e4:	40023800 	.word	0x40023800
 80025e8:	42470000 	.word	0x42470000
 80025ec:	42470e80 	.word	0x42470e80
 80025f0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025f4:	f7fe fd06 	bl	8001004 <HAL_GetTick>
 80025f8:	4602      	mov	r2, r0
 80025fa:	693b      	ldr	r3, [r7, #16]
 80025fc:	1ad3      	subs	r3, r2, r3
 80025fe:	2b02      	cmp	r3, #2
 8002600:	d901      	bls.n	8002606 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002602:	2303      	movs	r3, #3
 8002604:	e0cf      	b.n	80027a6 <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002606:	4b6a      	ldr	r3, [pc, #424]	; (80027b0 <HAL_RCC_OscConfig+0x478>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800260e:	2b00      	cmp	r3, #0
 8002610:	d0f0      	beq.n	80025f4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	689b      	ldr	r3, [r3, #8]
 8002616:	2b01      	cmp	r3, #1
 8002618:	d106      	bne.n	8002628 <HAL_RCC_OscConfig+0x2f0>
 800261a:	4b66      	ldr	r3, [pc, #408]	; (80027b4 <HAL_RCC_OscConfig+0x47c>)
 800261c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800261e:	4a65      	ldr	r2, [pc, #404]	; (80027b4 <HAL_RCC_OscConfig+0x47c>)
 8002620:	f043 0301 	orr.w	r3, r3, #1
 8002624:	6713      	str	r3, [r2, #112]	; 0x70
 8002626:	e01c      	b.n	8002662 <HAL_RCC_OscConfig+0x32a>
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	689b      	ldr	r3, [r3, #8]
 800262c:	2b05      	cmp	r3, #5
 800262e:	d10c      	bne.n	800264a <HAL_RCC_OscConfig+0x312>
 8002630:	4b60      	ldr	r3, [pc, #384]	; (80027b4 <HAL_RCC_OscConfig+0x47c>)
 8002632:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002634:	4a5f      	ldr	r2, [pc, #380]	; (80027b4 <HAL_RCC_OscConfig+0x47c>)
 8002636:	f043 0304 	orr.w	r3, r3, #4
 800263a:	6713      	str	r3, [r2, #112]	; 0x70
 800263c:	4b5d      	ldr	r3, [pc, #372]	; (80027b4 <HAL_RCC_OscConfig+0x47c>)
 800263e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002640:	4a5c      	ldr	r2, [pc, #368]	; (80027b4 <HAL_RCC_OscConfig+0x47c>)
 8002642:	f043 0301 	orr.w	r3, r3, #1
 8002646:	6713      	str	r3, [r2, #112]	; 0x70
 8002648:	e00b      	b.n	8002662 <HAL_RCC_OscConfig+0x32a>
 800264a:	4b5a      	ldr	r3, [pc, #360]	; (80027b4 <HAL_RCC_OscConfig+0x47c>)
 800264c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800264e:	4a59      	ldr	r2, [pc, #356]	; (80027b4 <HAL_RCC_OscConfig+0x47c>)
 8002650:	f023 0301 	bic.w	r3, r3, #1
 8002654:	6713      	str	r3, [r2, #112]	; 0x70
 8002656:	4b57      	ldr	r3, [pc, #348]	; (80027b4 <HAL_RCC_OscConfig+0x47c>)
 8002658:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800265a:	4a56      	ldr	r2, [pc, #344]	; (80027b4 <HAL_RCC_OscConfig+0x47c>)
 800265c:	f023 0304 	bic.w	r3, r3, #4
 8002660:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	689b      	ldr	r3, [r3, #8]
 8002666:	2b00      	cmp	r3, #0
 8002668:	d015      	beq.n	8002696 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800266a:	f7fe fccb 	bl	8001004 <HAL_GetTick>
 800266e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002670:	e00a      	b.n	8002688 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002672:	f7fe fcc7 	bl	8001004 <HAL_GetTick>
 8002676:	4602      	mov	r2, r0
 8002678:	693b      	ldr	r3, [r7, #16]
 800267a:	1ad3      	subs	r3, r2, r3
 800267c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002680:	4293      	cmp	r3, r2
 8002682:	d901      	bls.n	8002688 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002684:	2303      	movs	r3, #3
 8002686:	e08e      	b.n	80027a6 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002688:	4b4a      	ldr	r3, [pc, #296]	; (80027b4 <HAL_RCC_OscConfig+0x47c>)
 800268a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800268c:	f003 0302 	and.w	r3, r3, #2
 8002690:	2b00      	cmp	r3, #0
 8002692:	d0ee      	beq.n	8002672 <HAL_RCC_OscConfig+0x33a>
 8002694:	e014      	b.n	80026c0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002696:	f7fe fcb5 	bl	8001004 <HAL_GetTick>
 800269a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800269c:	e00a      	b.n	80026b4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800269e:	f7fe fcb1 	bl	8001004 <HAL_GetTick>
 80026a2:	4602      	mov	r2, r0
 80026a4:	693b      	ldr	r3, [r7, #16]
 80026a6:	1ad3      	subs	r3, r2, r3
 80026a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80026ac:	4293      	cmp	r3, r2
 80026ae:	d901      	bls.n	80026b4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80026b0:	2303      	movs	r3, #3
 80026b2:	e078      	b.n	80027a6 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026b4:	4b3f      	ldr	r3, [pc, #252]	; (80027b4 <HAL_RCC_OscConfig+0x47c>)
 80026b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026b8:	f003 0302 	and.w	r3, r3, #2
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d1ee      	bne.n	800269e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80026c0:	7dfb      	ldrb	r3, [r7, #23]
 80026c2:	2b01      	cmp	r3, #1
 80026c4:	d105      	bne.n	80026d2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026c6:	4b3b      	ldr	r3, [pc, #236]	; (80027b4 <HAL_RCC_OscConfig+0x47c>)
 80026c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ca:	4a3a      	ldr	r2, [pc, #232]	; (80027b4 <HAL_RCC_OscConfig+0x47c>)
 80026cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80026d0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	699b      	ldr	r3, [r3, #24]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d064      	beq.n	80027a4 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80026da:	4b36      	ldr	r3, [pc, #216]	; (80027b4 <HAL_RCC_OscConfig+0x47c>)
 80026dc:	689b      	ldr	r3, [r3, #8]
 80026de:	f003 030c 	and.w	r3, r3, #12
 80026e2:	2b08      	cmp	r3, #8
 80026e4:	d05c      	beq.n	80027a0 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	699b      	ldr	r3, [r3, #24]
 80026ea:	2b02      	cmp	r3, #2
 80026ec:	d141      	bne.n	8002772 <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026ee:	4b32      	ldr	r3, [pc, #200]	; (80027b8 <HAL_RCC_OscConfig+0x480>)
 80026f0:	2200      	movs	r2, #0
 80026f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026f4:	f7fe fc86 	bl	8001004 <HAL_GetTick>
 80026f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026fa:	e008      	b.n	800270e <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026fc:	f7fe fc82 	bl	8001004 <HAL_GetTick>
 8002700:	4602      	mov	r2, r0
 8002702:	693b      	ldr	r3, [r7, #16]
 8002704:	1ad3      	subs	r3, r2, r3
 8002706:	2b02      	cmp	r3, #2
 8002708:	d901      	bls.n	800270e <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 800270a:	2303      	movs	r3, #3
 800270c:	e04b      	b.n	80027a6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800270e:	4b29      	ldr	r3, [pc, #164]	; (80027b4 <HAL_RCC_OscConfig+0x47c>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002716:	2b00      	cmp	r3, #0
 8002718:	d1f0      	bne.n	80026fc <HAL_RCC_OscConfig+0x3c4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	69da      	ldr	r2, [r3, #28]
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6a1b      	ldr	r3, [r3, #32]
 8002722:	431a      	orrs	r2, r3
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002728:	019b      	lsls	r3, r3, #6
 800272a:	431a      	orrs	r2, r3
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002730:	085b      	lsrs	r3, r3, #1
 8002732:	3b01      	subs	r3, #1
 8002734:	041b      	lsls	r3, r3, #16
 8002736:	431a      	orrs	r2, r3
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800273c:	061b      	lsls	r3, r3, #24
 800273e:	491d      	ldr	r1, [pc, #116]	; (80027b4 <HAL_RCC_OscConfig+0x47c>)
 8002740:	4313      	orrs	r3, r2
 8002742:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002744:	4b1c      	ldr	r3, [pc, #112]	; (80027b8 <HAL_RCC_OscConfig+0x480>)
 8002746:	2201      	movs	r2, #1
 8002748:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800274a:	f7fe fc5b 	bl	8001004 <HAL_GetTick>
 800274e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002750:	e008      	b.n	8002764 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002752:	f7fe fc57 	bl	8001004 <HAL_GetTick>
 8002756:	4602      	mov	r2, r0
 8002758:	693b      	ldr	r3, [r7, #16]
 800275a:	1ad3      	subs	r3, r2, r3
 800275c:	2b02      	cmp	r3, #2
 800275e:	d901      	bls.n	8002764 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8002760:	2303      	movs	r3, #3
 8002762:	e020      	b.n	80027a6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002764:	4b13      	ldr	r3, [pc, #76]	; (80027b4 <HAL_RCC_OscConfig+0x47c>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800276c:	2b00      	cmp	r3, #0
 800276e:	d0f0      	beq.n	8002752 <HAL_RCC_OscConfig+0x41a>
 8002770:	e018      	b.n	80027a4 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002772:	4b11      	ldr	r3, [pc, #68]	; (80027b8 <HAL_RCC_OscConfig+0x480>)
 8002774:	2200      	movs	r2, #0
 8002776:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002778:	f7fe fc44 	bl	8001004 <HAL_GetTick>
 800277c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800277e:	e008      	b.n	8002792 <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002780:	f7fe fc40 	bl	8001004 <HAL_GetTick>
 8002784:	4602      	mov	r2, r0
 8002786:	693b      	ldr	r3, [r7, #16]
 8002788:	1ad3      	subs	r3, r2, r3
 800278a:	2b02      	cmp	r3, #2
 800278c:	d901      	bls.n	8002792 <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 800278e:	2303      	movs	r3, #3
 8002790:	e009      	b.n	80027a6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002792:	4b08      	ldr	r3, [pc, #32]	; (80027b4 <HAL_RCC_OscConfig+0x47c>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800279a:	2b00      	cmp	r3, #0
 800279c:	d1f0      	bne.n	8002780 <HAL_RCC_OscConfig+0x448>
 800279e:	e001      	b.n	80027a4 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80027a0:	2301      	movs	r3, #1
 80027a2:	e000      	b.n	80027a6 <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 80027a4:	2300      	movs	r3, #0
}
 80027a6:	4618      	mov	r0, r3
 80027a8:	3718      	adds	r7, #24
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bd80      	pop	{r7, pc}
 80027ae:	bf00      	nop
 80027b0:	40007000 	.word	0x40007000
 80027b4:	40023800 	.word	0x40023800
 80027b8:	42470060 	.word	0x42470060

080027bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b084      	sub	sp, #16
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
 80027c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d101      	bne.n	80027d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80027cc:	2301      	movs	r3, #1
 80027ce:	e0ca      	b.n	8002966 <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80027d0:	4b67      	ldr	r3, [pc, #412]	; (8002970 <HAL_RCC_ClockConfig+0x1b4>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f003 030f 	and.w	r3, r3, #15
 80027d8:	683a      	ldr	r2, [r7, #0]
 80027da:	429a      	cmp	r2, r3
 80027dc:	d90c      	bls.n	80027f8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027de:	4b64      	ldr	r3, [pc, #400]	; (8002970 <HAL_RCC_ClockConfig+0x1b4>)
 80027e0:	683a      	ldr	r2, [r7, #0]
 80027e2:	b2d2      	uxtb	r2, r2
 80027e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80027e6:	4b62      	ldr	r3, [pc, #392]	; (8002970 <HAL_RCC_ClockConfig+0x1b4>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f003 030f 	and.w	r3, r3, #15
 80027ee:	683a      	ldr	r2, [r7, #0]
 80027f0:	429a      	cmp	r2, r3
 80027f2:	d001      	beq.n	80027f8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80027f4:	2301      	movs	r3, #1
 80027f6:	e0b6      	b.n	8002966 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f003 0302 	and.w	r3, r3, #2
 8002800:	2b00      	cmp	r3, #0
 8002802:	d020      	beq.n	8002846 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f003 0304 	and.w	r3, r3, #4
 800280c:	2b00      	cmp	r3, #0
 800280e:	d005      	beq.n	800281c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002810:	4b58      	ldr	r3, [pc, #352]	; (8002974 <HAL_RCC_ClockConfig+0x1b8>)
 8002812:	689b      	ldr	r3, [r3, #8]
 8002814:	4a57      	ldr	r2, [pc, #348]	; (8002974 <HAL_RCC_ClockConfig+0x1b8>)
 8002816:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800281a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f003 0308 	and.w	r3, r3, #8
 8002824:	2b00      	cmp	r3, #0
 8002826:	d005      	beq.n	8002834 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002828:	4b52      	ldr	r3, [pc, #328]	; (8002974 <HAL_RCC_ClockConfig+0x1b8>)
 800282a:	689b      	ldr	r3, [r3, #8]
 800282c:	4a51      	ldr	r2, [pc, #324]	; (8002974 <HAL_RCC_ClockConfig+0x1b8>)
 800282e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002832:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002834:	4b4f      	ldr	r3, [pc, #316]	; (8002974 <HAL_RCC_ClockConfig+0x1b8>)
 8002836:	689b      	ldr	r3, [r3, #8]
 8002838:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	689b      	ldr	r3, [r3, #8]
 8002840:	494c      	ldr	r1, [pc, #304]	; (8002974 <HAL_RCC_ClockConfig+0x1b8>)
 8002842:	4313      	orrs	r3, r2
 8002844:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f003 0301 	and.w	r3, r3, #1
 800284e:	2b00      	cmp	r3, #0
 8002850:	d044      	beq.n	80028dc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	685b      	ldr	r3, [r3, #4]
 8002856:	2b01      	cmp	r3, #1
 8002858:	d107      	bne.n	800286a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800285a:	4b46      	ldr	r3, [pc, #280]	; (8002974 <HAL_RCC_ClockConfig+0x1b8>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002862:	2b00      	cmp	r3, #0
 8002864:	d119      	bne.n	800289a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002866:	2301      	movs	r3, #1
 8002868:	e07d      	b.n	8002966 <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	685b      	ldr	r3, [r3, #4]
 800286e:	2b02      	cmp	r3, #2
 8002870:	d003      	beq.n	800287a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002876:	2b03      	cmp	r3, #3
 8002878:	d107      	bne.n	800288a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800287a:	4b3e      	ldr	r3, [pc, #248]	; (8002974 <HAL_RCC_ClockConfig+0x1b8>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002882:	2b00      	cmp	r3, #0
 8002884:	d109      	bne.n	800289a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002886:	2301      	movs	r3, #1
 8002888:	e06d      	b.n	8002966 <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800288a:	4b3a      	ldr	r3, [pc, #232]	; (8002974 <HAL_RCC_ClockConfig+0x1b8>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f003 0302 	and.w	r3, r3, #2
 8002892:	2b00      	cmp	r3, #0
 8002894:	d101      	bne.n	800289a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002896:	2301      	movs	r3, #1
 8002898:	e065      	b.n	8002966 <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800289a:	4b36      	ldr	r3, [pc, #216]	; (8002974 <HAL_RCC_ClockConfig+0x1b8>)
 800289c:	689b      	ldr	r3, [r3, #8]
 800289e:	f023 0203 	bic.w	r2, r3, #3
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	4933      	ldr	r1, [pc, #204]	; (8002974 <HAL_RCC_ClockConfig+0x1b8>)
 80028a8:	4313      	orrs	r3, r2
 80028aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80028ac:	f7fe fbaa 	bl	8001004 <HAL_GetTick>
 80028b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028b2:	e00a      	b.n	80028ca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028b4:	f7fe fba6 	bl	8001004 <HAL_GetTick>
 80028b8:	4602      	mov	r2, r0
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	1ad3      	subs	r3, r2, r3
 80028be:	f241 3288 	movw	r2, #5000	; 0x1388
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d901      	bls.n	80028ca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80028c6:	2303      	movs	r3, #3
 80028c8:	e04d      	b.n	8002966 <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028ca:	4b2a      	ldr	r3, [pc, #168]	; (8002974 <HAL_RCC_ClockConfig+0x1b8>)
 80028cc:	689b      	ldr	r3, [r3, #8]
 80028ce:	f003 020c 	and.w	r2, r3, #12
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	685b      	ldr	r3, [r3, #4]
 80028d6:	009b      	lsls	r3, r3, #2
 80028d8:	429a      	cmp	r2, r3
 80028da:	d1eb      	bne.n	80028b4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80028dc:	4b24      	ldr	r3, [pc, #144]	; (8002970 <HAL_RCC_ClockConfig+0x1b4>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f003 030f 	and.w	r3, r3, #15
 80028e4:	683a      	ldr	r2, [r7, #0]
 80028e6:	429a      	cmp	r2, r3
 80028e8:	d20c      	bcs.n	8002904 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028ea:	4b21      	ldr	r3, [pc, #132]	; (8002970 <HAL_RCC_ClockConfig+0x1b4>)
 80028ec:	683a      	ldr	r2, [r7, #0]
 80028ee:	b2d2      	uxtb	r2, r2
 80028f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80028f2:	4b1f      	ldr	r3, [pc, #124]	; (8002970 <HAL_RCC_ClockConfig+0x1b4>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f003 030f 	and.w	r3, r3, #15
 80028fa:	683a      	ldr	r2, [r7, #0]
 80028fc:	429a      	cmp	r2, r3
 80028fe:	d001      	beq.n	8002904 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002900:	2301      	movs	r3, #1
 8002902:	e030      	b.n	8002966 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f003 0304 	and.w	r3, r3, #4
 800290c:	2b00      	cmp	r3, #0
 800290e:	d008      	beq.n	8002922 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002910:	4b18      	ldr	r3, [pc, #96]	; (8002974 <HAL_RCC_ClockConfig+0x1b8>)
 8002912:	689b      	ldr	r3, [r3, #8]
 8002914:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	68db      	ldr	r3, [r3, #12]
 800291c:	4915      	ldr	r1, [pc, #84]	; (8002974 <HAL_RCC_ClockConfig+0x1b8>)
 800291e:	4313      	orrs	r3, r2
 8002920:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f003 0308 	and.w	r3, r3, #8
 800292a:	2b00      	cmp	r3, #0
 800292c:	d009      	beq.n	8002942 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800292e:	4b11      	ldr	r3, [pc, #68]	; (8002974 <HAL_RCC_ClockConfig+0x1b8>)
 8002930:	689b      	ldr	r3, [r3, #8]
 8002932:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	691b      	ldr	r3, [r3, #16]
 800293a:	00db      	lsls	r3, r3, #3
 800293c:	490d      	ldr	r1, [pc, #52]	; (8002974 <HAL_RCC_ClockConfig+0x1b8>)
 800293e:	4313      	orrs	r3, r2
 8002940:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002942:	f000 f81d 	bl	8002980 <HAL_RCC_GetSysClockFreq>
 8002946:	4601      	mov	r1, r0
 8002948:	4b0a      	ldr	r3, [pc, #40]	; (8002974 <HAL_RCC_ClockConfig+0x1b8>)
 800294a:	689b      	ldr	r3, [r3, #8]
 800294c:	091b      	lsrs	r3, r3, #4
 800294e:	f003 030f 	and.w	r3, r3, #15
 8002952:	4a09      	ldr	r2, [pc, #36]	; (8002978 <HAL_RCC_ClockConfig+0x1bc>)
 8002954:	5cd3      	ldrb	r3, [r2, r3]
 8002956:	fa21 f303 	lsr.w	r3, r1, r3
 800295a:	4a08      	ldr	r2, [pc, #32]	; (800297c <HAL_RCC_ClockConfig+0x1c0>)
 800295c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 800295e:	2000      	movs	r0, #0
 8002960:	f7fe fb0c 	bl	8000f7c <HAL_InitTick>

  return HAL_OK;
 8002964:	2300      	movs	r3, #0
}
 8002966:	4618      	mov	r0, r3
 8002968:	3710      	adds	r7, #16
 800296a:	46bd      	mov	sp, r7
 800296c:	bd80      	pop	{r7, pc}
 800296e:	bf00      	nop
 8002970:	40023c00 	.word	0x40023c00
 8002974:	40023800 	.word	0x40023800
 8002978:	0800f8f8 	.word	0x0800f8f8
 800297c:	20000100 	.word	0x20000100

08002980 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002980:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002982:	b085      	sub	sp, #20
 8002984:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002986:	2300      	movs	r3, #0
 8002988:	607b      	str	r3, [r7, #4]
 800298a:	2300      	movs	r3, #0
 800298c:	60fb      	str	r3, [r7, #12]
 800298e:	2300      	movs	r3, #0
 8002990:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002992:	2300      	movs	r3, #0
 8002994:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002996:	4b50      	ldr	r3, [pc, #320]	; (8002ad8 <HAL_RCC_GetSysClockFreq+0x158>)
 8002998:	689b      	ldr	r3, [r3, #8]
 800299a:	f003 030c 	and.w	r3, r3, #12
 800299e:	2b04      	cmp	r3, #4
 80029a0:	d007      	beq.n	80029b2 <HAL_RCC_GetSysClockFreq+0x32>
 80029a2:	2b08      	cmp	r3, #8
 80029a4:	d008      	beq.n	80029b8 <HAL_RCC_GetSysClockFreq+0x38>
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	f040 808d 	bne.w	8002ac6 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80029ac:	4b4b      	ldr	r3, [pc, #300]	; (8002adc <HAL_RCC_GetSysClockFreq+0x15c>)
 80029ae:	60bb      	str	r3, [r7, #8]
       break;
 80029b0:	e08c      	b.n	8002acc <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80029b2:	4b4b      	ldr	r3, [pc, #300]	; (8002ae0 <HAL_RCC_GetSysClockFreq+0x160>)
 80029b4:	60bb      	str	r3, [r7, #8]
      break;
 80029b6:	e089      	b.n	8002acc <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80029b8:	4b47      	ldr	r3, [pc, #284]	; (8002ad8 <HAL_RCC_GetSysClockFreq+0x158>)
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80029c0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80029c2:	4b45      	ldr	r3, [pc, #276]	; (8002ad8 <HAL_RCC_GetSysClockFreq+0x158>)
 80029c4:	685b      	ldr	r3, [r3, #4]
 80029c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d023      	beq.n	8002a16 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80029ce:	4b42      	ldr	r3, [pc, #264]	; (8002ad8 <HAL_RCC_GetSysClockFreq+0x158>)
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	099b      	lsrs	r3, r3, #6
 80029d4:	f04f 0400 	mov.w	r4, #0
 80029d8:	f240 11ff 	movw	r1, #511	; 0x1ff
 80029dc:	f04f 0200 	mov.w	r2, #0
 80029e0:	ea03 0501 	and.w	r5, r3, r1
 80029e4:	ea04 0602 	and.w	r6, r4, r2
 80029e8:	4a3d      	ldr	r2, [pc, #244]	; (8002ae0 <HAL_RCC_GetSysClockFreq+0x160>)
 80029ea:	fb02 f106 	mul.w	r1, r2, r6
 80029ee:	2200      	movs	r2, #0
 80029f0:	fb02 f205 	mul.w	r2, r2, r5
 80029f4:	440a      	add	r2, r1
 80029f6:	493a      	ldr	r1, [pc, #232]	; (8002ae0 <HAL_RCC_GetSysClockFreq+0x160>)
 80029f8:	fba5 0101 	umull	r0, r1, r5, r1
 80029fc:	1853      	adds	r3, r2, r1
 80029fe:	4619      	mov	r1, r3
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	f04f 0400 	mov.w	r4, #0
 8002a06:	461a      	mov	r2, r3
 8002a08:	4623      	mov	r3, r4
 8002a0a:	f7fe f915 	bl	8000c38 <__aeabi_uldivmod>
 8002a0e:	4603      	mov	r3, r0
 8002a10:	460c      	mov	r4, r1
 8002a12:	60fb      	str	r3, [r7, #12]
 8002a14:	e049      	b.n	8002aaa <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a16:	4b30      	ldr	r3, [pc, #192]	; (8002ad8 <HAL_RCC_GetSysClockFreq+0x158>)
 8002a18:	685b      	ldr	r3, [r3, #4]
 8002a1a:	099b      	lsrs	r3, r3, #6
 8002a1c:	f04f 0400 	mov.w	r4, #0
 8002a20:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002a24:	f04f 0200 	mov.w	r2, #0
 8002a28:	ea03 0501 	and.w	r5, r3, r1
 8002a2c:	ea04 0602 	and.w	r6, r4, r2
 8002a30:	4629      	mov	r1, r5
 8002a32:	4632      	mov	r2, r6
 8002a34:	f04f 0300 	mov.w	r3, #0
 8002a38:	f04f 0400 	mov.w	r4, #0
 8002a3c:	0154      	lsls	r4, r2, #5
 8002a3e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002a42:	014b      	lsls	r3, r1, #5
 8002a44:	4619      	mov	r1, r3
 8002a46:	4622      	mov	r2, r4
 8002a48:	1b49      	subs	r1, r1, r5
 8002a4a:	eb62 0206 	sbc.w	r2, r2, r6
 8002a4e:	f04f 0300 	mov.w	r3, #0
 8002a52:	f04f 0400 	mov.w	r4, #0
 8002a56:	0194      	lsls	r4, r2, #6
 8002a58:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002a5c:	018b      	lsls	r3, r1, #6
 8002a5e:	1a5b      	subs	r3, r3, r1
 8002a60:	eb64 0402 	sbc.w	r4, r4, r2
 8002a64:	f04f 0100 	mov.w	r1, #0
 8002a68:	f04f 0200 	mov.w	r2, #0
 8002a6c:	00e2      	lsls	r2, r4, #3
 8002a6e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002a72:	00d9      	lsls	r1, r3, #3
 8002a74:	460b      	mov	r3, r1
 8002a76:	4614      	mov	r4, r2
 8002a78:	195b      	adds	r3, r3, r5
 8002a7a:	eb44 0406 	adc.w	r4, r4, r6
 8002a7e:	f04f 0100 	mov.w	r1, #0
 8002a82:	f04f 0200 	mov.w	r2, #0
 8002a86:	02a2      	lsls	r2, r4, #10
 8002a88:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002a8c:	0299      	lsls	r1, r3, #10
 8002a8e:	460b      	mov	r3, r1
 8002a90:	4614      	mov	r4, r2
 8002a92:	4618      	mov	r0, r3
 8002a94:	4621      	mov	r1, r4
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	f04f 0400 	mov.w	r4, #0
 8002a9c:	461a      	mov	r2, r3
 8002a9e:	4623      	mov	r3, r4
 8002aa0:	f7fe f8ca 	bl	8000c38 <__aeabi_uldivmod>
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	460c      	mov	r4, r1
 8002aa8:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002aaa:	4b0b      	ldr	r3, [pc, #44]	; (8002ad8 <HAL_RCC_GetSysClockFreq+0x158>)
 8002aac:	685b      	ldr	r3, [r3, #4]
 8002aae:	0c1b      	lsrs	r3, r3, #16
 8002ab0:	f003 0303 	and.w	r3, r3, #3
 8002ab4:	3301      	adds	r3, #1
 8002ab6:	005b      	lsls	r3, r3, #1
 8002ab8:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002aba:	68fa      	ldr	r2, [r7, #12]
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ac2:	60bb      	str	r3, [r7, #8]
      break;
 8002ac4:	e002      	b.n	8002acc <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002ac6:	4b05      	ldr	r3, [pc, #20]	; (8002adc <HAL_RCC_GetSysClockFreq+0x15c>)
 8002ac8:	60bb      	str	r3, [r7, #8]
      break;
 8002aca:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002acc:	68bb      	ldr	r3, [r7, #8]
}
 8002ace:	4618      	mov	r0, r3
 8002ad0:	3714      	adds	r7, #20
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002ad6:	bf00      	nop
 8002ad8:	40023800 	.word	0x40023800
 8002adc:	00f42400 	.word	0x00f42400
 8002ae0:	017d7840 	.word	0x017d7840

08002ae4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ae8:	4b03      	ldr	r3, [pc, #12]	; (8002af8 <HAL_RCC_GetHCLKFreq+0x14>)
 8002aea:	681b      	ldr	r3, [r3, #0]
}
 8002aec:	4618      	mov	r0, r3
 8002aee:	46bd      	mov	sp, r7
 8002af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af4:	4770      	bx	lr
 8002af6:	bf00      	nop
 8002af8:	20000100 	.word	0x20000100

08002afc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002b00:	f7ff fff0 	bl	8002ae4 <HAL_RCC_GetHCLKFreq>
 8002b04:	4601      	mov	r1, r0
 8002b06:	4b05      	ldr	r3, [pc, #20]	; (8002b1c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002b08:	689b      	ldr	r3, [r3, #8]
 8002b0a:	0a9b      	lsrs	r3, r3, #10
 8002b0c:	f003 0307 	and.w	r3, r3, #7
 8002b10:	4a03      	ldr	r2, [pc, #12]	; (8002b20 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002b12:	5cd3      	ldrb	r3, [r2, r3]
 8002b14:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002b18:	4618      	mov	r0, r3
 8002b1a:	bd80      	pop	{r7, pc}
 8002b1c:	40023800 	.word	0x40023800
 8002b20:	0800f908 	.word	0x0800f908

08002b24 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002b28:	f7ff ffdc 	bl	8002ae4 <HAL_RCC_GetHCLKFreq>
 8002b2c:	4601      	mov	r1, r0
 8002b2e:	4b05      	ldr	r3, [pc, #20]	; (8002b44 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002b30:	689b      	ldr	r3, [r3, #8]
 8002b32:	0b5b      	lsrs	r3, r3, #13
 8002b34:	f003 0307 	and.w	r3, r3, #7
 8002b38:	4a03      	ldr	r2, [pc, #12]	; (8002b48 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002b3a:	5cd3      	ldrb	r3, [r2, r3]
 8002b3c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002b40:	4618      	mov	r0, r3
 8002b42:	bd80      	pop	{r7, pc}
 8002b44:	40023800 	.word	0x40023800
 8002b48:	0800f908 	.word	0x0800f908

08002b4c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b082      	sub	sp, #8
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d101      	bne.n	8002b5e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	e056      	b.n	8002c0c <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	2200      	movs	r2, #0
 8002b62:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002b6a:	b2db      	uxtb	r3, r3
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d106      	bne.n	8002b7e <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2200      	movs	r2, #0
 8002b74:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002b78:	6878      	ldr	r0, [r7, #4]
 8002b7a:	f00a ffef 	bl	800db5c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	2202      	movs	r2, #2
 8002b82:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	681a      	ldr	r2, [r3, #0]
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002b94:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	685a      	ldr	r2, [r3, #4]
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	689b      	ldr	r3, [r3, #8]
 8002b9e:	431a      	orrs	r2, r3
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	68db      	ldr	r3, [r3, #12]
 8002ba4:	431a      	orrs	r2, r3
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	691b      	ldr	r3, [r3, #16]
 8002baa:	431a      	orrs	r2, r3
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	695b      	ldr	r3, [r3, #20]
 8002bb0:	431a      	orrs	r2, r3
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	699b      	ldr	r3, [r3, #24]
 8002bb6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002bba:	431a      	orrs	r2, r3
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	69db      	ldr	r3, [r3, #28]
 8002bc0:	431a      	orrs	r2, r3
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6a1b      	ldr	r3, [r3, #32]
 8002bc6:	ea42 0103 	orr.w	r1, r2, r3
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	430a      	orrs	r2, r1
 8002bd4:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	699b      	ldr	r3, [r3, #24]
 8002bda:	0c1b      	lsrs	r3, r3, #16
 8002bdc:	f003 0104 	and.w	r1, r3, #4
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	430a      	orrs	r2, r1
 8002bea:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	69da      	ldr	r2, [r3, #28]
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002bfa:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2200      	movs	r2, #0
 8002c00:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	2201      	movs	r2, #1
 8002c06:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002c0a:	2300      	movs	r3, #0
}
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	3708      	adds	r7, #8
 8002c10:	46bd      	mov	sp, r7
 8002c12:	bd80      	pop	{r7, pc}

08002c14 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b088      	sub	sp, #32
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	60f8      	str	r0, [r7, #12]
 8002c1c:	60b9      	str	r1, [r7, #8]
 8002c1e:	603b      	str	r3, [r7, #0]
 8002c20:	4613      	mov	r3, r2
 8002c22:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002c24:	2300      	movs	r3, #0
 8002c26:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002c2e:	2b01      	cmp	r3, #1
 8002c30:	d101      	bne.n	8002c36 <HAL_SPI_Transmit+0x22>
 8002c32:	2302      	movs	r3, #2
 8002c34:	e11e      	b.n	8002e74 <HAL_SPI_Transmit+0x260>
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	2201      	movs	r2, #1
 8002c3a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002c3e:	f7fe f9e1 	bl	8001004 <HAL_GetTick>
 8002c42:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002c44:	88fb      	ldrh	r3, [r7, #6]
 8002c46:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002c4e:	b2db      	uxtb	r3, r3
 8002c50:	2b01      	cmp	r3, #1
 8002c52:	d002      	beq.n	8002c5a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002c54:	2302      	movs	r3, #2
 8002c56:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002c58:	e103      	b.n	8002e62 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002c5a:	68bb      	ldr	r3, [r7, #8]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d002      	beq.n	8002c66 <HAL_SPI_Transmit+0x52>
 8002c60:	88fb      	ldrh	r3, [r7, #6]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d102      	bne.n	8002c6c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002c66:	2301      	movs	r3, #1
 8002c68:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002c6a:	e0fa      	b.n	8002e62 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	2203      	movs	r2, #3
 8002c70:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	2200      	movs	r2, #0
 8002c78:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	68ba      	ldr	r2, [r7, #8]
 8002c7e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	88fa      	ldrh	r2, [r7, #6]
 8002c84:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	88fa      	ldrh	r2, [r7, #6]
 8002c8a:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	2200      	movs	r2, #0
 8002c90:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	2200      	movs	r2, #0
 8002c96:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	689b      	ldr	r3, [r3, #8]
 8002cae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002cb2:	d107      	bne.n	8002cc4 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	681a      	ldr	r2, [r3, #0]
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002cc2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cce:	2b40      	cmp	r3, #64	; 0x40
 8002cd0:	d007      	beq.n	8002ce2 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	681a      	ldr	r2, [r3, #0]
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002ce0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	68db      	ldr	r3, [r3, #12]
 8002ce6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002cea:	d14b      	bne.n	8002d84 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	685b      	ldr	r3, [r3, #4]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d002      	beq.n	8002cfa <HAL_SPI_Transmit+0xe6>
 8002cf4:	8afb      	ldrh	r3, [r7, #22]
 8002cf6:	2b01      	cmp	r3, #1
 8002cf8:	d13e      	bne.n	8002d78 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cfe:	881a      	ldrh	r2, [r3, #0]
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d0a:	1c9a      	adds	r2, r3, #2
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d14:	b29b      	uxth	r3, r3
 8002d16:	3b01      	subs	r3, #1
 8002d18:	b29a      	uxth	r2, r3
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002d1e:	e02b      	b.n	8002d78 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	689b      	ldr	r3, [r3, #8]
 8002d26:	f003 0302 	and.w	r3, r3, #2
 8002d2a:	2b02      	cmp	r3, #2
 8002d2c:	d112      	bne.n	8002d54 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d32:	881a      	ldrh	r2, [r3, #0]
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d3e:	1c9a      	adds	r2, r3, #2
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d48:	b29b      	uxth	r3, r3
 8002d4a:	3b01      	subs	r3, #1
 8002d4c:	b29a      	uxth	r2, r3
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	86da      	strh	r2, [r3, #54]	; 0x36
 8002d52:	e011      	b.n	8002d78 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002d54:	f7fe f956 	bl	8001004 <HAL_GetTick>
 8002d58:	4602      	mov	r2, r0
 8002d5a:	69bb      	ldr	r3, [r7, #24]
 8002d5c:	1ad3      	subs	r3, r2, r3
 8002d5e:	683a      	ldr	r2, [r7, #0]
 8002d60:	429a      	cmp	r2, r3
 8002d62:	d803      	bhi.n	8002d6c <HAL_SPI_Transmit+0x158>
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d6a:	d102      	bne.n	8002d72 <HAL_SPI_Transmit+0x15e>
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d102      	bne.n	8002d78 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8002d72:	2303      	movs	r3, #3
 8002d74:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002d76:	e074      	b.n	8002e62 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d7c:	b29b      	uxth	r3, r3
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d1ce      	bne.n	8002d20 <HAL_SPI_Transmit+0x10c>
 8002d82:	e04c      	b.n	8002e1e <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	685b      	ldr	r3, [r3, #4]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d002      	beq.n	8002d92 <HAL_SPI_Transmit+0x17e>
 8002d8c:	8afb      	ldrh	r3, [r7, #22]
 8002d8e:	2b01      	cmp	r3, #1
 8002d90:	d140      	bne.n	8002e14 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	330c      	adds	r3, #12
 8002d9c:	7812      	ldrb	r2, [r2, #0]
 8002d9e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002da4:	1c5a      	adds	r2, r3, #1
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002dae:	b29b      	uxth	r3, r3
 8002db0:	3b01      	subs	r3, #1
 8002db2:	b29a      	uxth	r2, r3
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002db8:	e02c      	b.n	8002e14 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	689b      	ldr	r3, [r3, #8]
 8002dc0:	f003 0302 	and.w	r3, r3, #2
 8002dc4:	2b02      	cmp	r3, #2
 8002dc6:	d113      	bne.n	8002df0 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	330c      	adds	r3, #12
 8002dd2:	7812      	ldrb	r2, [r2, #0]
 8002dd4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dda:	1c5a      	adds	r2, r3, #1
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002de4:	b29b      	uxth	r3, r3
 8002de6:	3b01      	subs	r3, #1
 8002de8:	b29a      	uxth	r2, r3
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	86da      	strh	r2, [r3, #54]	; 0x36
 8002dee:	e011      	b.n	8002e14 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002df0:	f7fe f908 	bl	8001004 <HAL_GetTick>
 8002df4:	4602      	mov	r2, r0
 8002df6:	69bb      	ldr	r3, [r7, #24]
 8002df8:	1ad3      	subs	r3, r2, r3
 8002dfa:	683a      	ldr	r2, [r7, #0]
 8002dfc:	429a      	cmp	r2, r3
 8002dfe:	d803      	bhi.n	8002e08 <HAL_SPI_Transmit+0x1f4>
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e06:	d102      	bne.n	8002e0e <HAL_SPI_Transmit+0x1fa>
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d102      	bne.n	8002e14 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8002e0e:	2303      	movs	r3, #3
 8002e10:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002e12:	e026      	b.n	8002e62 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e18:	b29b      	uxth	r3, r3
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d1cd      	bne.n	8002dba <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002e1e:	69ba      	ldr	r2, [r7, #24]
 8002e20:	6839      	ldr	r1, [r7, #0]
 8002e22:	68f8      	ldr	r0, [r7, #12]
 8002e24:	f000 fba4 	bl	8003570 <SPI_EndRxTxTransaction>
 8002e28:	4603      	mov	r3, r0
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d002      	beq.n	8002e34 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	2220      	movs	r2, #32
 8002e32:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	689b      	ldr	r3, [r3, #8]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d10a      	bne.n	8002e52 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	613b      	str	r3, [r7, #16]
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	68db      	ldr	r3, [r3, #12]
 8002e46:	613b      	str	r3, [r7, #16]
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	689b      	ldr	r3, [r3, #8]
 8002e4e:	613b      	str	r3, [r7, #16]
 8002e50:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d002      	beq.n	8002e60 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	77fb      	strb	r3, [r7, #31]
 8002e5e:	e000      	b.n	8002e62 <HAL_SPI_Transmit+0x24e>
  }

error:
 8002e60:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	2201      	movs	r2, #1
 8002e66:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002e72:	7ffb      	ldrb	r3, [r7, #31]
}
 8002e74:	4618      	mov	r0, r3
 8002e76:	3720      	adds	r7, #32
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	bd80      	pop	{r7, pc}

08002e7c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b088      	sub	sp, #32
 8002e80:	af02      	add	r7, sp, #8
 8002e82:	60f8      	str	r0, [r7, #12]
 8002e84:	60b9      	str	r1, [r7, #8]
 8002e86:	603b      	str	r3, [r7, #0]
 8002e88:	4613      	mov	r3, r2
 8002e8a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	685b      	ldr	r3, [r3, #4]
 8002e94:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002e98:	d112      	bne.n	8002ec0 <HAL_SPI_Receive+0x44>
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	689b      	ldr	r3, [r3, #8]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d10e      	bne.n	8002ec0 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	2204      	movs	r2, #4
 8002ea6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002eaa:	88fa      	ldrh	r2, [r7, #6]
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	9300      	str	r3, [sp, #0]
 8002eb0:	4613      	mov	r3, r2
 8002eb2:	68ba      	ldr	r2, [r7, #8]
 8002eb4:	68b9      	ldr	r1, [r7, #8]
 8002eb6:	68f8      	ldr	r0, [r7, #12]
 8002eb8:	f000 f8e9 	bl	800308e <HAL_SPI_TransmitReceive>
 8002ebc:	4603      	mov	r3, r0
 8002ebe:	e0e2      	b.n	8003086 <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002ec6:	2b01      	cmp	r3, #1
 8002ec8:	d101      	bne.n	8002ece <HAL_SPI_Receive+0x52>
 8002eca:	2302      	movs	r3, #2
 8002ecc:	e0db      	b.n	8003086 <HAL_SPI_Receive+0x20a>
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	2201      	movs	r2, #1
 8002ed2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002ed6:	f7fe f895 	bl	8001004 <HAL_GetTick>
 8002eda:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002ee2:	b2db      	uxtb	r3, r3
 8002ee4:	2b01      	cmp	r3, #1
 8002ee6:	d002      	beq.n	8002eee <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8002ee8:	2302      	movs	r3, #2
 8002eea:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002eec:	e0c2      	b.n	8003074 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 8002eee:	68bb      	ldr	r3, [r7, #8]
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d002      	beq.n	8002efa <HAL_SPI_Receive+0x7e>
 8002ef4:	88fb      	ldrh	r3, [r7, #6]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d102      	bne.n	8002f00 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8002efa:	2301      	movs	r3, #1
 8002efc:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002efe:	e0b9      	b.n	8003074 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	2204      	movs	r2, #4
 8002f04:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	68ba      	ldr	r2, [r7, #8]
 8002f12:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	88fa      	ldrh	r2, [r7, #6]
 8002f18:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	88fa      	ldrh	r2, [r7, #6]
 8002f1e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	2200      	movs	r2, #0
 8002f24:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	2200      	movs	r2, #0
 8002f2a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	2200      	movs	r2, #0
 8002f30:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	2200      	movs	r2, #0
 8002f36:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	689b      	ldr	r3, [r3, #8]
 8002f42:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f46:	d107      	bne.n	8002f58 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	681a      	ldr	r2, [r3, #0]
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002f56:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f62:	2b40      	cmp	r3, #64	; 0x40
 8002f64:	d007      	beq.n	8002f76 <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	681a      	ldr	r2, [r3, #0]
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002f74:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	68db      	ldr	r3, [r3, #12]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d162      	bne.n	8003044 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002f7e:	e02e      	b.n	8002fde <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	689b      	ldr	r3, [r3, #8]
 8002f86:	f003 0301 	and.w	r3, r3, #1
 8002f8a:	2b01      	cmp	r3, #1
 8002f8c:	d115      	bne.n	8002fba <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f103 020c 	add.w	r2, r3, #12
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f9a:	7812      	ldrb	r2, [r2, #0]
 8002f9c:	b2d2      	uxtb	r2, r2
 8002f9e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fa4:	1c5a      	adds	r2, r3, #1
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002fae:	b29b      	uxth	r3, r3
 8002fb0:	3b01      	subs	r3, #1
 8002fb2:	b29a      	uxth	r2, r3
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002fb8:	e011      	b.n	8002fde <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002fba:	f7fe f823 	bl	8001004 <HAL_GetTick>
 8002fbe:	4602      	mov	r2, r0
 8002fc0:	693b      	ldr	r3, [r7, #16]
 8002fc2:	1ad3      	subs	r3, r2, r3
 8002fc4:	683a      	ldr	r2, [r7, #0]
 8002fc6:	429a      	cmp	r2, r3
 8002fc8:	d803      	bhi.n	8002fd2 <HAL_SPI_Receive+0x156>
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fd0:	d102      	bne.n	8002fd8 <HAL_SPI_Receive+0x15c>
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d102      	bne.n	8002fde <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 8002fd8:	2303      	movs	r3, #3
 8002fda:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002fdc:	e04a      	b.n	8003074 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002fe2:	b29b      	uxth	r3, r3
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d1cb      	bne.n	8002f80 <HAL_SPI_Receive+0x104>
 8002fe8:	e031      	b.n	800304e <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	689b      	ldr	r3, [r3, #8]
 8002ff0:	f003 0301 	and.w	r3, r3, #1
 8002ff4:	2b01      	cmp	r3, #1
 8002ff6:	d113      	bne.n	8003020 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	68da      	ldr	r2, [r3, #12]
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003002:	b292      	uxth	r2, r2
 8003004:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800300a:	1c9a      	adds	r2, r3, #2
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003014:	b29b      	uxth	r3, r3
 8003016:	3b01      	subs	r3, #1
 8003018:	b29a      	uxth	r2, r3
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800301e:	e011      	b.n	8003044 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003020:	f7fd fff0 	bl	8001004 <HAL_GetTick>
 8003024:	4602      	mov	r2, r0
 8003026:	693b      	ldr	r3, [r7, #16]
 8003028:	1ad3      	subs	r3, r2, r3
 800302a:	683a      	ldr	r2, [r7, #0]
 800302c:	429a      	cmp	r2, r3
 800302e:	d803      	bhi.n	8003038 <HAL_SPI_Receive+0x1bc>
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003036:	d102      	bne.n	800303e <HAL_SPI_Receive+0x1c2>
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	2b00      	cmp	r3, #0
 800303c:	d102      	bne.n	8003044 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 800303e:	2303      	movs	r3, #3
 8003040:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003042:	e017      	b.n	8003074 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003048:	b29b      	uxth	r3, r3
 800304a:	2b00      	cmp	r3, #0
 800304c:	d1cd      	bne.n	8002fea <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800304e:	693a      	ldr	r2, [r7, #16]
 8003050:	6839      	ldr	r1, [r7, #0]
 8003052:	68f8      	ldr	r0, [r7, #12]
 8003054:	f000 fa27 	bl	80034a6 <SPI_EndRxTransaction>
 8003058:	4603      	mov	r3, r0
 800305a:	2b00      	cmp	r3, #0
 800305c:	d002      	beq.n	8003064 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	2220      	movs	r2, #32
 8003062:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003068:	2b00      	cmp	r3, #0
 800306a:	d002      	beq.n	8003072 <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 800306c:	2301      	movs	r3, #1
 800306e:	75fb      	strb	r3, [r7, #23]
 8003070:	e000      	b.n	8003074 <HAL_SPI_Receive+0x1f8>
  }

error :
 8003072:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	2201      	movs	r2, #1
 8003078:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	2200      	movs	r2, #0
 8003080:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003084:	7dfb      	ldrb	r3, [r7, #23]
}
 8003086:	4618      	mov	r0, r3
 8003088:	3718      	adds	r7, #24
 800308a:	46bd      	mov	sp, r7
 800308c:	bd80      	pop	{r7, pc}

0800308e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800308e:	b580      	push	{r7, lr}
 8003090:	b08c      	sub	sp, #48	; 0x30
 8003092:	af00      	add	r7, sp, #0
 8003094:	60f8      	str	r0, [r7, #12]
 8003096:	60b9      	str	r1, [r7, #8]
 8003098:	607a      	str	r2, [r7, #4]
 800309a:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800309c:	2301      	movs	r3, #1
 800309e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80030a0:	2300      	movs	r3, #0
 80030a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80030ac:	2b01      	cmp	r3, #1
 80030ae:	d101      	bne.n	80030b4 <HAL_SPI_TransmitReceive+0x26>
 80030b0:	2302      	movs	r3, #2
 80030b2:	e18a      	b.n	80033ca <HAL_SPI_TransmitReceive+0x33c>
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	2201      	movs	r2, #1
 80030b8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80030bc:	f7fd ffa2 	bl	8001004 <HAL_GetTick>
 80030c0:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80030c8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	685b      	ldr	r3, [r3, #4]
 80030d0:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80030d2:	887b      	ldrh	r3, [r7, #2]
 80030d4:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80030d6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80030da:	2b01      	cmp	r3, #1
 80030dc:	d00f      	beq.n	80030fe <HAL_SPI_TransmitReceive+0x70>
 80030de:	69fb      	ldr	r3, [r7, #28]
 80030e0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80030e4:	d107      	bne.n	80030f6 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	689b      	ldr	r3, [r3, #8]
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d103      	bne.n	80030f6 <HAL_SPI_TransmitReceive+0x68>
 80030ee:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80030f2:	2b04      	cmp	r3, #4
 80030f4:	d003      	beq.n	80030fe <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80030f6:	2302      	movs	r3, #2
 80030f8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80030fc:	e15b      	b.n	80033b6 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80030fe:	68bb      	ldr	r3, [r7, #8]
 8003100:	2b00      	cmp	r3, #0
 8003102:	d005      	beq.n	8003110 <HAL_SPI_TransmitReceive+0x82>
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2b00      	cmp	r3, #0
 8003108:	d002      	beq.n	8003110 <HAL_SPI_TransmitReceive+0x82>
 800310a:	887b      	ldrh	r3, [r7, #2]
 800310c:	2b00      	cmp	r3, #0
 800310e:	d103      	bne.n	8003118 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003110:	2301      	movs	r3, #1
 8003112:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003116:	e14e      	b.n	80033b6 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800311e:	b2db      	uxtb	r3, r3
 8003120:	2b04      	cmp	r3, #4
 8003122:	d003      	beq.n	800312c <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	2205      	movs	r2, #5
 8003128:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	2200      	movs	r2, #0
 8003130:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	687a      	ldr	r2, [r7, #4]
 8003136:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	887a      	ldrh	r2, [r7, #2]
 800313c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	887a      	ldrh	r2, [r7, #2]
 8003142:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	68ba      	ldr	r2, [r7, #8]
 8003148:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	887a      	ldrh	r2, [r7, #2]
 800314e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	887a      	ldrh	r2, [r7, #2]
 8003154:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	2200      	movs	r2, #0
 800315a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	2200      	movs	r2, #0
 8003160:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800316c:	2b40      	cmp	r3, #64	; 0x40
 800316e:	d007      	beq.n	8003180 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	681a      	ldr	r2, [r3, #0]
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800317e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	68db      	ldr	r3, [r3, #12]
 8003184:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003188:	d178      	bne.n	800327c <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	685b      	ldr	r3, [r3, #4]
 800318e:	2b00      	cmp	r3, #0
 8003190:	d002      	beq.n	8003198 <HAL_SPI_TransmitReceive+0x10a>
 8003192:	8b7b      	ldrh	r3, [r7, #26]
 8003194:	2b01      	cmp	r3, #1
 8003196:	d166      	bne.n	8003266 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800319c:	881a      	ldrh	r2, [r3, #0]
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031a8:	1c9a      	adds	r2, r3, #2
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80031b2:	b29b      	uxth	r3, r3
 80031b4:	3b01      	subs	r3, #1
 80031b6:	b29a      	uxth	r2, r3
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80031bc:	e053      	b.n	8003266 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	689b      	ldr	r3, [r3, #8]
 80031c4:	f003 0302 	and.w	r3, r3, #2
 80031c8:	2b02      	cmp	r3, #2
 80031ca:	d11b      	bne.n	8003204 <HAL_SPI_TransmitReceive+0x176>
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80031d0:	b29b      	uxth	r3, r3
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d016      	beq.n	8003204 <HAL_SPI_TransmitReceive+0x176>
 80031d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031d8:	2b01      	cmp	r3, #1
 80031da:	d113      	bne.n	8003204 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031e0:	881a      	ldrh	r2, [r3, #0]
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ec:	1c9a      	adds	r2, r3, #2
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80031f6:	b29b      	uxth	r3, r3
 80031f8:	3b01      	subs	r3, #1
 80031fa:	b29a      	uxth	r2, r3
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003200:	2300      	movs	r3, #0
 8003202:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	689b      	ldr	r3, [r3, #8]
 800320a:	f003 0301 	and.w	r3, r3, #1
 800320e:	2b01      	cmp	r3, #1
 8003210:	d119      	bne.n	8003246 <HAL_SPI_TransmitReceive+0x1b8>
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003216:	b29b      	uxth	r3, r3
 8003218:	2b00      	cmp	r3, #0
 800321a:	d014      	beq.n	8003246 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	68da      	ldr	r2, [r3, #12]
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003226:	b292      	uxth	r2, r2
 8003228:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800322e:	1c9a      	adds	r2, r3, #2
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003238:	b29b      	uxth	r3, r3
 800323a:	3b01      	subs	r3, #1
 800323c:	b29a      	uxth	r2, r3
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003242:	2301      	movs	r3, #1
 8003244:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003246:	f7fd fedd 	bl	8001004 <HAL_GetTick>
 800324a:	4602      	mov	r2, r0
 800324c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800324e:	1ad3      	subs	r3, r2, r3
 8003250:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003252:	429a      	cmp	r2, r3
 8003254:	d807      	bhi.n	8003266 <HAL_SPI_TransmitReceive+0x1d8>
 8003256:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003258:	f1b3 3fff 	cmp.w	r3, #4294967295
 800325c:	d003      	beq.n	8003266 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800325e:	2303      	movs	r3, #3
 8003260:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003264:	e0a7      	b.n	80033b6 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800326a:	b29b      	uxth	r3, r3
 800326c:	2b00      	cmp	r3, #0
 800326e:	d1a6      	bne.n	80031be <HAL_SPI_TransmitReceive+0x130>
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003274:	b29b      	uxth	r3, r3
 8003276:	2b00      	cmp	r3, #0
 8003278:	d1a1      	bne.n	80031be <HAL_SPI_TransmitReceive+0x130>
 800327a:	e07c      	b.n	8003376 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	685b      	ldr	r3, [r3, #4]
 8003280:	2b00      	cmp	r3, #0
 8003282:	d002      	beq.n	800328a <HAL_SPI_TransmitReceive+0x1fc>
 8003284:	8b7b      	ldrh	r3, [r7, #26]
 8003286:	2b01      	cmp	r3, #1
 8003288:	d16b      	bne.n	8003362 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	330c      	adds	r3, #12
 8003294:	7812      	ldrb	r2, [r2, #0]
 8003296:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800329c:	1c5a      	adds	r2, r3, #1
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80032a6:	b29b      	uxth	r3, r3
 80032a8:	3b01      	subs	r3, #1
 80032aa:	b29a      	uxth	r2, r3
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80032b0:	e057      	b.n	8003362 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	689b      	ldr	r3, [r3, #8]
 80032b8:	f003 0302 	and.w	r3, r3, #2
 80032bc:	2b02      	cmp	r3, #2
 80032be:	d11c      	bne.n	80032fa <HAL_SPI_TransmitReceive+0x26c>
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80032c4:	b29b      	uxth	r3, r3
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d017      	beq.n	80032fa <HAL_SPI_TransmitReceive+0x26c>
 80032ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032cc:	2b01      	cmp	r3, #1
 80032ce:	d114      	bne.n	80032fa <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	330c      	adds	r3, #12
 80032da:	7812      	ldrb	r2, [r2, #0]
 80032dc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032e2:	1c5a      	adds	r2, r3, #1
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80032ec:	b29b      	uxth	r3, r3
 80032ee:	3b01      	subs	r3, #1
 80032f0:	b29a      	uxth	r2, r3
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80032f6:	2300      	movs	r3, #0
 80032f8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	689b      	ldr	r3, [r3, #8]
 8003300:	f003 0301 	and.w	r3, r3, #1
 8003304:	2b01      	cmp	r3, #1
 8003306:	d119      	bne.n	800333c <HAL_SPI_TransmitReceive+0x2ae>
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800330c:	b29b      	uxth	r3, r3
 800330e:	2b00      	cmp	r3, #0
 8003310:	d014      	beq.n	800333c <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	68da      	ldr	r2, [r3, #12]
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800331c:	b2d2      	uxtb	r2, r2
 800331e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003324:	1c5a      	adds	r2, r3, #1
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800332e:	b29b      	uxth	r3, r3
 8003330:	3b01      	subs	r3, #1
 8003332:	b29a      	uxth	r2, r3
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003338:	2301      	movs	r3, #1
 800333a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800333c:	f7fd fe62 	bl	8001004 <HAL_GetTick>
 8003340:	4602      	mov	r2, r0
 8003342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003344:	1ad3      	subs	r3, r2, r3
 8003346:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003348:	429a      	cmp	r2, r3
 800334a:	d803      	bhi.n	8003354 <HAL_SPI_TransmitReceive+0x2c6>
 800334c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800334e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003352:	d102      	bne.n	800335a <HAL_SPI_TransmitReceive+0x2cc>
 8003354:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003356:	2b00      	cmp	r3, #0
 8003358:	d103      	bne.n	8003362 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800335a:	2303      	movs	r3, #3
 800335c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003360:	e029      	b.n	80033b6 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003366:	b29b      	uxth	r3, r3
 8003368:	2b00      	cmp	r3, #0
 800336a:	d1a2      	bne.n	80032b2 <HAL_SPI_TransmitReceive+0x224>
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003370:	b29b      	uxth	r3, r3
 8003372:	2b00      	cmp	r3, #0
 8003374:	d19d      	bne.n	80032b2 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003376:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003378:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800337a:	68f8      	ldr	r0, [r7, #12]
 800337c:	f000 f8f8 	bl	8003570 <SPI_EndRxTxTransaction>
 8003380:	4603      	mov	r3, r0
 8003382:	2b00      	cmp	r3, #0
 8003384:	d006      	beq.n	8003394 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8003386:	2301      	movs	r3, #1
 8003388:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	2220      	movs	r2, #32
 8003390:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003392:	e010      	b.n	80033b6 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	689b      	ldr	r3, [r3, #8]
 8003398:	2b00      	cmp	r3, #0
 800339a:	d10b      	bne.n	80033b4 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800339c:	2300      	movs	r3, #0
 800339e:	617b      	str	r3, [r7, #20]
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	68db      	ldr	r3, [r3, #12]
 80033a6:	617b      	str	r3, [r7, #20]
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	689b      	ldr	r3, [r3, #8]
 80033ae:	617b      	str	r3, [r7, #20]
 80033b0:	697b      	ldr	r3, [r7, #20]
 80033b2:	e000      	b.n	80033b6 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80033b4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	2201      	movs	r2, #1
 80033ba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	2200      	movs	r2, #0
 80033c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80033c6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80033ca:	4618      	mov	r0, r3
 80033cc:	3730      	adds	r7, #48	; 0x30
 80033ce:	46bd      	mov	sp, r7
 80033d0:	bd80      	pop	{r7, pc}

080033d2 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80033d2:	b580      	push	{r7, lr}
 80033d4:	b084      	sub	sp, #16
 80033d6:	af00      	add	r7, sp, #0
 80033d8:	60f8      	str	r0, [r7, #12]
 80033da:	60b9      	str	r1, [r7, #8]
 80033dc:	603b      	str	r3, [r7, #0]
 80033de:	4613      	mov	r3, r2
 80033e0:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80033e2:	e04c      	b.n	800347e <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033ea:	d048      	beq.n	800347e <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80033ec:	f7fd fe0a 	bl	8001004 <HAL_GetTick>
 80033f0:	4602      	mov	r2, r0
 80033f2:	69bb      	ldr	r3, [r7, #24]
 80033f4:	1ad3      	subs	r3, r2, r3
 80033f6:	683a      	ldr	r2, [r7, #0]
 80033f8:	429a      	cmp	r2, r3
 80033fa:	d902      	bls.n	8003402 <SPI_WaitFlagStateUntilTimeout+0x30>
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d13d      	bne.n	800347e <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	685a      	ldr	r2, [r3, #4]
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003410:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	685b      	ldr	r3, [r3, #4]
 8003416:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800341a:	d111      	bne.n	8003440 <SPI_WaitFlagStateUntilTimeout+0x6e>
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	689b      	ldr	r3, [r3, #8]
 8003420:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003424:	d004      	beq.n	8003430 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	689b      	ldr	r3, [r3, #8]
 800342a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800342e:	d107      	bne.n	8003440 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	681a      	ldr	r2, [r3, #0]
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800343e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003444:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003448:	d10f      	bne.n	800346a <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	681a      	ldr	r2, [r3, #0]
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003458:	601a      	str	r2, [r3, #0]
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	681a      	ldr	r2, [r3, #0]
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003468:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	2201      	movs	r2, #1
 800346e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	2200      	movs	r2, #0
 8003476:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800347a:	2303      	movs	r3, #3
 800347c:	e00f      	b.n	800349e <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	689a      	ldr	r2, [r3, #8]
 8003484:	68bb      	ldr	r3, [r7, #8]
 8003486:	4013      	ands	r3, r2
 8003488:	68ba      	ldr	r2, [r7, #8]
 800348a:	429a      	cmp	r2, r3
 800348c:	bf0c      	ite	eq
 800348e:	2301      	moveq	r3, #1
 8003490:	2300      	movne	r3, #0
 8003492:	b2db      	uxtb	r3, r3
 8003494:	461a      	mov	r2, r3
 8003496:	79fb      	ldrb	r3, [r7, #7]
 8003498:	429a      	cmp	r2, r3
 800349a:	d1a3      	bne.n	80033e4 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800349c:	2300      	movs	r3, #0
}
 800349e:	4618      	mov	r0, r3
 80034a0:	3710      	adds	r7, #16
 80034a2:	46bd      	mov	sp, r7
 80034a4:	bd80      	pop	{r7, pc}

080034a6 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80034a6:	b580      	push	{r7, lr}
 80034a8:	b086      	sub	sp, #24
 80034aa:	af02      	add	r7, sp, #8
 80034ac:	60f8      	str	r0, [r7, #12]
 80034ae:	60b9      	str	r1, [r7, #8]
 80034b0:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	685b      	ldr	r3, [r3, #4]
 80034b6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80034ba:	d111      	bne.n	80034e0 <SPI_EndRxTransaction+0x3a>
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	689b      	ldr	r3, [r3, #8]
 80034c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80034c4:	d004      	beq.n	80034d0 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	689b      	ldr	r3, [r3, #8]
 80034ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034ce:	d107      	bne.n	80034e0 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	681a      	ldr	r2, [r3, #0]
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80034de:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	685b      	ldr	r3, [r3, #4]
 80034e4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80034e8:	d12a      	bne.n	8003540 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	689b      	ldr	r3, [r3, #8]
 80034ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034f2:	d012      	beq.n	800351a <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	9300      	str	r3, [sp, #0]
 80034f8:	68bb      	ldr	r3, [r7, #8]
 80034fa:	2200      	movs	r2, #0
 80034fc:	2180      	movs	r1, #128	; 0x80
 80034fe:	68f8      	ldr	r0, [r7, #12]
 8003500:	f7ff ff67 	bl	80033d2 <SPI_WaitFlagStateUntilTimeout>
 8003504:	4603      	mov	r3, r0
 8003506:	2b00      	cmp	r3, #0
 8003508:	d02d      	beq.n	8003566 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800350e:	f043 0220 	orr.w	r2, r3, #32
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8003516:	2303      	movs	r3, #3
 8003518:	e026      	b.n	8003568 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	9300      	str	r3, [sp, #0]
 800351e:	68bb      	ldr	r3, [r7, #8]
 8003520:	2200      	movs	r2, #0
 8003522:	2101      	movs	r1, #1
 8003524:	68f8      	ldr	r0, [r7, #12]
 8003526:	f7ff ff54 	bl	80033d2 <SPI_WaitFlagStateUntilTimeout>
 800352a:	4603      	mov	r3, r0
 800352c:	2b00      	cmp	r3, #0
 800352e:	d01a      	beq.n	8003566 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003534:	f043 0220 	orr.w	r2, r3, #32
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800353c:	2303      	movs	r3, #3
 800353e:	e013      	b.n	8003568 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	9300      	str	r3, [sp, #0]
 8003544:	68bb      	ldr	r3, [r7, #8]
 8003546:	2200      	movs	r2, #0
 8003548:	2101      	movs	r1, #1
 800354a:	68f8      	ldr	r0, [r7, #12]
 800354c:	f7ff ff41 	bl	80033d2 <SPI_WaitFlagStateUntilTimeout>
 8003550:	4603      	mov	r3, r0
 8003552:	2b00      	cmp	r3, #0
 8003554:	d007      	beq.n	8003566 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800355a:	f043 0220 	orr.w	r2, r3, #32
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003562:	2303      	movs	r3, #3
 8003564:	e000      	b.n	8003568 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8003566:	2300      	movs	r3, #0
}
 8003568:	4618      	mov	r0, r3
 800356a:	3710      	adds	r7, #16
 800356c:	46bd      	mov	sp, r7
 800356e:	bd80      	pop	{r7, pc}

08003570 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b088      	sub	sp, #32
 8003574:	af02      	add	r7, sp, #8
 8003576:	60f8      	str	r0, [r7, #12]
 8003578:	60b9      	str	r1, [r7, #8]
 800357a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800357c:	4b1b      	ldr	r3, [pc, #108]	; (80035ec <SPI_EndRxTxTransaction+0x7c>)
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4a1b      	ldr	r2, [pc, #108]	; (80035f0 <SPI_EndRxTxTransaction+0x80>)
 8003582:	fba2 2303 	umull	r2, r3, r2, r3
 8003586:	0d5b      	lsrs	r3, r3, #21
 8003588:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800358c:	fb02 f303 	mul.w	r3, r2, r3
 8003590:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	685b      	ldr	r3, [r3, #4]
 8003596:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800359a:	d112      	bne.n	80035c2 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	9300      	str	r3, [sp, #0]
 80035a0:	68bb      	ldr	r3, [r7, #8]
 80035a2:	2200      	movs	r2, #0
 80035a4:	2180      	movs	r1, #128	; 0x80
 80035a6:	68f8      	ldr	r0, [r7, #12]
 80035a8:	f7ff ff13 	bl	80033d2 <SPI_WaitFlagStateUntilTimeout>
 80035ac:	4603      	mov	r3, r0
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d016      	beq.n	80035e0 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035b6:	f043 0220 	orr.w	r2, r3, #32
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80035be:	2303      	movs	r3, #3
 80035c0:	e00f      	b.n	80035e2 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80035c2:	697b      	ldr	r3, [r7, #20]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d00a      	beq.n	80035de <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80035c8:	697b      	ldr	r3, [r7, #20]
 80035ca:	3b01      	subs	r3, #1
 80035cc:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	689b      	ldr	r3, [r3, #8]
 80035d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035d8:	2b80      	cmp	r3, #128	; 0x80
 80035da:	d0f2      	beq.n	80035c2 <SPI_EndRxTxTransaction+0x52>
 80035dc:	e000      	b.n	80035e0 <SPI_EndRxTxTransaction+0x70>
        break;
 80035de:	bf00      	nop
  }

  return HAL_OK;
 80035e0:	2300      	movs	r3, #0
}
 80035e2:	4618      	mov	r0, r3
 80035e4:	3718      	adds	r7, #24
 80035e6:	46bd      	mov	sp, r7
 80035e8:	bd80      	pop	{r7, pc}
 80035ea:	bf00      	nop
 80035ec:	20000100 	.word	0x20000100
 80035f0:	165e9f81 	.word	0x165e9f81

080035f4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b082      	sub	sp, #8
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d101      	bne.n	8003606 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003602:	2301      	movs	r3, #1
 8003604:	e01d      	b.n	8003642 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800360c:	b2db      	uxtb	r3, r3
 800360e:	2b00      	cmp	r3, #0
 8003610:	d106      	bne.n	8003620 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2200      	movs	r2, #0
 8003616:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800361a:	6878      	ldr	r0, [r7, #4]
 800361c:	f00a fae6 	bl	800dbec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2202      	movs	r2, #2
 8003624:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681a      	ldr	r2, [r3, #0]
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	3304      	adds	r3, #4
 8003630:	4619      	mov	r1, r3
 8003632:	4610      	mov	r0, r2
 8003634:	f000 fc70 	bl	8003f18 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2201      	movs	r2, #1
 800363c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003640:	2300      	movs	r3, #0
}
 8003642:	4618      	mov	r0, r3
 8003644:	3708      	adds	r7, #8
 8003646:	46bd      	mov	sp, r7
 8003648:	bd80      	pop	{r7, pc}

0800364a <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800364a:	b480      	push	{r7}
 800364c:	b085      	sub	sp, #20
 800364e:	af00      	add	r7, sp, #0
 8003650:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	68da      	ldr	r2, [r3, #12]
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f042 0201 	orr.w	r2, r2, #1
 8003660:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	689b      	ldr	r3, [r3, #8]
 8003668:	f003 0307 	and.w	r3, r3, #7
 800366c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	2b06      	cmp	r3, #6
 8003672:	d007      	beq.n	8003684 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	681a      	ldr	r2, [r3, #0]
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f042 0201 	orr.w	r2, r2, #1
 8003682:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003684:	2300      	movs	r3, #0
}
 8003686:	4618      	mov	r0, r3
 8003688:	3714      	adds	r7, #20
 800368a:	46bd      	mov	sp, r7
 800368c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003690:	4770      	bx	lr

08003692 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003692:	b580      	push	{r7, lr}
 8003694:	b082      	sub	sp, #8
 8003696:	af00      	add	r7, sp, #0
 8003698:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2b00      	cmp	r3, #0
 800369e:	d101      	bne.n	80036a4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80036a0:	2301      	movs	r3, #1
 80036a2:	e01d      	b.n	80036e0 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036aa:	b2db      	uxtb	r3, r3
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d106      	bne.n	80036be <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2200      	movs	r2, #0
 80036b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80036b8:	6878      	ldr	r0, [r7, #4]
 80036ba:	f000 f815 	bl	80036e8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	2202      	movs	r2, #2
 80036c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681a      	ldr	r2, [r3, #0]
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	3304      	adds	r3, #4
 80036ce:	4619      	mov	r1, r3
 80036d0:	4610      	mov	r0, r2
 80036d2:	f000 fc21 	bl	8003f18 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2201      	movs	r2, #1
 80036da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80036de:	2300      	movs	r3, #0
}
 80036e0:	4618      	mov	r0, r3
 80036e2:	3708      	adds	r7, #8
 80036e4:	46bd      	mov	sp, r7
 80036e6:	bd80      	pop	{r7, pc}

080036e8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80036e8:	b480      	push	{r7}
 80036ea:	b083      	sub	sp, #12
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80036f0:	bf00      	nop
 80036f2:	370c      	adds	r7, #12
 80036f4:	46bd      	mov	sp, r7
 80036f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fa:	4770      	bx	lr

080036fc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b084      	sub	sp, #16
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
 8003704:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	2201      	movs	r2, #1
 800370c:	6839      	ldr	r1, [r7, #0]
 800370e:	4618      	mov	r0, r3
 8003710:	f000 feec 	bl	80044ec <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	4a15      	ldr	r2, [pc, #84]	; (8003770 <HAL_TIM_PWM_Start+0x74>)
 800371a:	4293      	cmp	r3, r2
 800371c:	d004      	beq.n	8003728 <HAL_TIM_PWM_Start+0x2c>
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	4a14      	ldr	r2, [pc, #80]	; (8003774 <HAL_TIM_PWM_Start+0x78>)
 8003724:	4293      	cmp	r3, r2
 8003726:	d101      	bne.n	800372c <HAL_TIM_PWM_Start+0x30>
 8003728:	2301      	movs	r3, #1
 800372a:	e000      	b.n	800372e <HAL_TIM_PWM_Start+0x32>
 800372c:	2300      	movs	r3, #0
 800372e:	2b00      	cmp	r3, #0
 8003730:	d007      	beq.n	8003742 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003740:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	689b      	ldr	r3, [r3, #8]
 8003748:	f003 0307 	and.w	r3, r3, #7
 800374c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	2b06      	cmp	r3, #6
 8003752:	d007      	beq.n	8003764 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	681a      	ldr	r2, [r3, #0]
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f042 0201 	orr.w	r2, r2, #1
 8003762:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003764:	2300      	movs	r3, #0
}
 8003766:	4618      	mov	r0, r3
 8003768:	3710      	adds	r7, #16
 800376a:	46bd      	mov	sp, r7
 800376c:	bd80      	pop	{r7, pc}
 800376e:	bf00      	nop
 8003770:	40010000 	.word	0x40010000
 8003774:	40010400 	.word	0x40010400

08003778 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	b082      	sub	sp, #8
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
 8003780:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	2200      	movs	r2, #0
 8003788:	6839      	ldr	r1, [r7, #0]
 800378a:	4618      	mov	r0, r3
 800378c:	f000 feae 	bl	80044ec <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	4a22      	ldr	r2, [pc, #136]	; (8003820 <HAL_TIM_PWM_Stop+0xa8>)
 8003796:	4293      	cmp	r3, r2
 8003798:	d004      	beq.n	80037a4 <HAL_TIM_PWM_Stop+0x2c>
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	4a21      	ldr	r2, [pc, #132]	; (8003824 <HAL_TIM_PWM_Stop+0xac>)
 80037a0:	4293      	cmp	r3, r2
 80037a2:	d101      	bne.n	80037a8 <HAL_TIM_PWM_Stop+0x30>
 80037a4:	2301      	movs	r3, #1
 80037a6:	e000      	b.n	80037aa <HAL_TIM_PWM_Stop+0x32>
 80037a8:	2300      	movs	r3, #0
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d017      	beq.n	80037de <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	6a1a      	ldr	r2, [r3, #32]
 80037b4:	f241 1311 	movw	r3, #4369	; 0x1111
 80037b8:	4013      	ands	r3, r2
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d10f      	bne.n	80037de <HAL_TIM_PWM_Stop+0x66>
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	6a1a      	ldr	r2, [r3, #32]
 80037c4:	f240 4344 	movw	r3, #1092	; 0x444
 80037c8:	4013      	ands	r3, r2
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d107      	bne.n	80037de <HAL_TIM_PWM_Stop+0x66>
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80037dc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	6a1a      	ldr	r2, [r3, #32]
 80037e4:	f241 1311 	movw	r3, #4369	; 0x1111
 80037e8:	4013      	ands	r3, r2
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d10f      	bne.n	800380e <HAL_TIM_PWM_Stop+0x96>
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	6a1a      	ldr	r2, [r3, #32]
 80037f4:	f240 4344 	movw	r3, #1092	; 0x444
 80037f8:	4013      	ands	r3, r2
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d107      	bne.n	800380e <HAL_TIM_PWM_Stop+0x96>
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	681a      	ldr	r2, [r3, #0]
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f022 0201 	bic.w	r2, r2, #1
 800380c:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	2201      	movs	r2, #1
 8003812:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8003816:	2300      	movs	r3, #0
}
 8003818:	4618      	mov	r0, r3
 800381a:	3708      	adds	r7, #8
 800381c:	46bd      	mov	sp, r7
 800381e:	bd80      	pop	{r7, pc}
 8003820:	40010000 	.word	0x40010000
 8003824:	40010400 	.word	0x40010400

08003828 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	b086      	sub	sp, #24
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
 8003830:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	2b00      	cmp	r3, #0
 8003836:	d101      	bne.n	800383c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003838:	2301      	movs	r3, #1
 800383a:	e083      	b.n	8003944 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003842:	b2db      	uxtb	r3, r3
 8003844:	2b00      	cmp	r3, #0
 8003846:	d106      	bne.n	8003856 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2200      	movs	r2, #0
 800384c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003850:	6878      	ldr	r0, [r7, #4]
 8003852:	f00a fa1d 	bl	800dc90 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2202      	movs	r2, #2
 800385a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	689b      	ldr	r3, [r3, #8]
 8003864:	687a      	ldr	r2, [r7, #4]
 8003866:	6812      	ldr	r2, [r2, #0]
 8003868:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800386c:	f023 0307 	bic.w	r3, r3, #7
 8003870:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681a      	ldr	r2, [r3, #0]
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	3304      	adds	r3, #4
 800387a:	4619      	mov	r1, r3
 800387c:	4610      	mov	r0, r2
 800387e:	f000 fb4b 	bl	8003f18 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	689b      	ldr	r3, [r3, #8]
 8003888:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	699b      	ldr	r3, [r3, #24]
 8003890:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	6a1b      	ldr	r3, [r3, #32]
 8003898:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	697a      	ldr	r2, [r7, #20]
 80038a0:	4313      	orrs	r3, r2
 80038a2:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80038a4:	693b      	ldr	r3, [r7, #16]
 80038a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038aa:	f023 0303 	bic.w	r3, r3, #3
 80038ae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	689a      	ldr	r2, [r3, #8]
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	699b      	ldr	r3, [r3, #24]
 80038b8:	021b      	lsls	r3, r3, #8
 80038ba:	4313      	orrs	r3, r2
 80038bc:	693a      	ldr	r2, [r7, #16]
 80038be:	4313      	orrs	r3, r2
 80038c0:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80038c2:	693b      	ldr	r3, [r7, #16]
 80038c4:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80038c8:	f023 030c 	bic.w	r3, r3, #12
 80038cc:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80038ce:	693b      	ldr	r3, [r7, #16]
 80038d0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80038d4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80038d8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	68da      	ldr	r2, [r3, #12]
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	69db      	ldr	r3, [r3, #28]
 80038e2:	021b      	lsls	r3, r3, #8
 80038e4:	4313      	orrs	r3, r2
 80038e6:	693a      	ldr	r2, [r7, #16]
 80038e8:	4313      	orrs	r3, r2
 80038ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	691b      	ldr	r3, [r3, #16]
 80038f0:	011a      	lsls	r2, r3, #4
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	6a1b      	ldr	r3, [r3, #32]
 80038f6:	031b      	lsls	r3, r3, #12
 80038f8:	4313      	orrs	r3, r2
 80038fa:	693a      	ldr	r2, [r7, #16]
 80038fc:	4313      	orrs	r3, r2
 80038fe:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8003906:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800390e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	685a      	ldr	r2, [r3, #4]
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	695b      	ldr	r3, [r3, #20]
 8003918:	011b      	lsls	r3, r3, #4
 800391a:	4313      	orrs	r3, r2
 800391c:	68fa      	ldr	r2, [r7, #12]
 800391e:	4313      	orrs	r3, r2
 8003920:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	697a      	ldr	r2, [r7, #20]
 8003928:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	693a      	ldr	r2, [r7, #16]
 8003930:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	68fa      	ldr	r2, [r7, #12]
 8003938:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	2201      	movs	r2, #1
 800393e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003942:	2300      	movs	r3, #0
}
 8003944:	4618      	mov	r0, r3
 8003946:	3718      	adds	r7, #24
 8003948:	46bd      	mov	sp, r7
 800394a:	bd80      	pop	{r7, pc}

0800394c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800394c:	b580      	push	{r7, lr}
 800394e:	b082      	sub	sp, #8
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
 8003954:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 8003956:	683b      	ldr	r3, [r7, #0]
 8003958:	2b00      	cmp	r3, #0
 800395a:	d002      	beq.n	8003962 <HAL_TIM_Encoder_Start+0x16>
 800395c:	2b04      	cmp	r3, #4
 800395e:	d008      	beq.n	8003972 <HAL_TIM_Encoder_Start+0x26>
 8003960:	e00f      	b.n	8003982 <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	2201      	movs	r2, #1
 8003968:	2100      	movs	r1, #0
 800396a:	4618      	mov	r0, r3
 800396c:	f000 fdbe 	bl	80044ec <TIM_CCxChannelCmd>
      break;
 8003970:	e016      	b.n	80039a0 <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	2201      	movs	r2, #1
 8003978:	2104      	movs	r1, #4
 800397a:	4618      	mov	r0, r3
 800397c:	f000 fdb6 	bl	80044ec <TIM_CCxChannelCmd>
      break;
 8003980:	e00e      	b.n	80039a0 <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	2201      	movs	r2, #1
 8003988:	2100      	movs	r1, #0
 800398a:	4618      	mov	r0, r3
 800398c:	f000 fdae 	bl	80044ec <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	2201      	movs	r2, #1
 8003996:	2104      	movs	r1, #4
 8003998:	4618      	mov	r0, r3
 800399a:	f000 fda7 	bl	80044ec <TIM_CCxChannelCmd>
      break;
 800399e:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	681a      	ldr	r2, [r3, #0]
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f042 0201 	orr.w	r2, r2, #1
 80039ae:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80039b0:	2300      	movs	r3, #0
}
 80039b2:	4618      	mov	r0, r3
 80039b4:	3708      	adds	r7, #8
 80039b6:	46bd      	mov	sp, r7
 80039b8:	bd80      	pop	{r7, pc}

080039ba <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80039ba:	b580      	push	{r7, lr}
 80039bc:	b082      	sub	sp, #8
 80039be:	af00      	add	r7, sp, #0
 80039c0:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	691b      	ldr	r3, [r3, #16]
 80039c8:	f003 0302 	and.w	r3, r3, #2
 80039cc:	2b02      	cmp	r3, #2
 80039ce:	d122      	bne.n	8003a16 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	68db      	ldr	r3, [r3, #12]
 80039d6:	f003 0302 	and.w	r3, r3, #2
 80039da:	2b02      	cmp	r3, #2
 80039dc:	d11b      	bne.n	8003a16 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f06f 0202 	mvn.w	r2, #2
 80039e6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2201      	movs	r2, #1
 80039ec:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	699b      	ldr	r3, [r3, #24]
 80039f4:	f003 0303 	and.w	r3, r3, #3
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d003      	beq.n	8003a04 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80039fc:	6878      	ldr	r0, [r7, #4]
 80039fe:	f000 fa6c 	bl	8003eda <HAL_TIM_IC_CaptureCallback>
 8003a02:	e005      	b.n	8003a10 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a04:	6878      	ldr	r0, [r7, #4]
 8003a06:	f000 fa5e 	bl	8003ec6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a0a:	6878      	ldr	r0, [r7, #4]
 8003a0c:	f000 fa6f 	bl	8003eee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2200      	movs	r2, #0
 8003a14:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	691b      	ldr	r3, [r3, #16]
 8003a1c:	f003 0304 	and.w	r3, r3, #4
 8003a20:	2b04      	cmp	r3, #4
 8003a22:	d122      	bne.n	8003a6a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	68db      	ldr	r3, [r3, #12]
 8003a2a:	f003 0304 	and.w	r3, r3, #4
 8003a2e:	2b04      	cmp	r3, #4
 8003a30:	d11b      	bne.n	8003a6a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f06f 0204 	mvn.w	r2, #4
 8003a3a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2202      	movs	r2, #2
 8003a40:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	699b      	ldr	r3, [r3, #24]
 8003a48:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d003      	beq.n	8003a58 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a50:	6878      	ldr	r0, [r7, #4]
 8003a52:	f000 fa42 	bl	8003eda <HAL_TIM_IC_CaptureCallback>
 8003a56:	e005      	b.n	8003a64 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a58:	6878      	ldr	r0, [r7, #4]
 8003a5a:	f000 fa34 	bl	8003ec6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a5e:	6878      	ldr	r0, [r7, #4]
 8003a60:	f000 fa45 	bl	8003eee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2200      	movs	r2, #0
 8003a68:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	691b      	ldr	r3, [r3, #16]
 8003a70:	f003 0308 	and.w	r3, r3, #8
 8003a74:	2b08      	cmp	r3, #8
 8003a76:	d122      	bne.n	8003abe <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	68db      	ldr	r3, [r3, #12]
 8003a7e:	f003 0308 	and.w	r3, r3, #8
 8003a82:	2b08      	cmp	r3, #8
 8003a84:	d11b      	bne.n	8003abe <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f06f 0208 	mvn.w	r2, #8
 8003a8e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2204      	movs	r2, #4
 8003a94:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	69db      	ldr	r3, [r3, #28]
 8003a9c:	f003 0303 	and.w	r3, r3, #3
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d003      	beq.n	8003aac <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003aa4:	6878      	ldr	r0, [r7, #4]
 8003aa6:	f000 fa18 	bl	8003eda <HAL_TIM_IC_CaptureCallback>
 8003aaa:	e005      	b.n	8003ab8 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003aac:	6878      	ldr	r0, [r7, #4]
 8003aae:	f000 fa0a 	bl	8003ec6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ab2:	6878      	ldr	r0, [r7, #4]
 8003ab4:	f000 fa1b 	bl	8003eee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2200      	movs	r2, #0
 8003abc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	691b      	ldr	r3, [r3, #16]
 8003ac4:	f003 0310 	and.w	r3, r3, #16
 8003ac8:	2b10      	cmp	r3, #16
 8003aca:	d122      	bne.n	8003b12 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	68db      	ldr	r3, [r3, #12]
 8003ad2:	f003 0310 	and.w	r3, r3, #16
 8003ad6:	2b10      	cmp	r3, #16
 8003ad8:	d11b      	bne.n	8003b12 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f06f 0210 	mvn.w	r2, #16
 8003ae2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2208      	movs	r2, #8
 8003ae8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	69db      	ldr	r3, [r3, #28]
 8003af0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d003      	beq.n	8003b00 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003af8:	6878      	ldr	r0, [r7, #4]
 8003afa:	f000 f9ee 	bl	8003eda <HAL_TIM_IC_CaptureCallback>
 8003afe:	e005      	b.n	8003b0c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b00:	6878      	ldr	r0, [r7, #4]
 8003b02:	f000 f9e0 	bl	8003ec6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b06:	6878      	ldr	r0, [r7, #4]
 8003b08:	f000 f9f1 	bl	8003eee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2200      	movs	r2, #0
 8003b10:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	691b      	ldr	r3, [r3, #16]
 8003b18:	f003 0301 	and.w	r3, r3, #1
 8003b1c:	2b01      	cmp	r3, #1
 8003b1e:	d10e      	bne.n	8003b3e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	68db      	ldr	r3, [r3, #12]
 8003b26:	f003 0301 	and.w	r3, r3, #1
 8003b2a:	2b01      	cmp	r3, #1
 8003b2c:	d107      	bne.n	8003b3e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f06f 0201 	mvn.w	r2, #1
 8003b36:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003b38:	6878      	ldr	r0, [r7, #4]
 8003b3a:	f005 fa49 	bl	8008fd0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	691b      	ldr	r3, [r3, #16]
 8003b44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b48:	2b80      	cmp	r3, #128	; 0x80
 8003b4a:	d10e      	bne.n	8003b6a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	68db      	ldr	r3, [r3, #12]
 8003b52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b56:	2b80      	cmp	r3, #128	; 0x80
 8003b58:	d107      	bne.n	8003b6a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003b62:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003b64:	6878      	ldr	r0, [r7, #4]
 8003b66:	f000 fd35 	bl	80045d4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	691b      	ldr	r3, [r3, #16]
 8003b70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b74:	2b40      	cmp	r3, #64	; 0x40
 8003b76:	d10e      	bne.n	8003b96 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	68db      	ldr	r3, [r3, #12]
 8003b7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b82:	2b40      	cmp	r3, #64	; 0x40
 8003b84:	d107      	bne.n	8003b96 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003b8e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003b90:	6878      	ldr	r0, [r7, #4]
 8003b92:	f000 f9b6 	bl	8003f02 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	691b      	ldr	r3, [r3, #16]
 8003b9c:	f003 0320 	and.w	r3, r3, #32
 8003ba0:	2b20      	cmp	r3, #32
 8003ba2:	d10e      	bne.n	8003bc2 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	68db      	ldr	r3, [r3, #12]
 8003baa:	f003 0320 	and.w	r3, r3, #32
 8003bae:	2b20      	cmp	r3, #32
 8003bb0:	d107      	bne.n	8003bc2 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f06f 0220 	mvn.w	r2, #32
 8003bba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003bbc:	6878      	ldr	r0, [r7, #4]
 8003bbe:	f000 fcff 	bl	80045c0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003bc2:	bf00      	nop
 8003bc4:	3708      	adds	r7, #8
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	bd80      	pop	{r7, pc}
	...

08003bcc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b084      	sub	sp, #16
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	60f8      	str	r0, [r7, #12]
 8003bd4:	60b9      	str	r1, [r7, #8]
 8003bd6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003bde:	2b01      	cmp	r3, #1
 8003be0:	d101      	bne.n	8003be6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003be2:	2302      	movs	r3, #2
 8003be4:	e0b4      	b.n	8003d50 <HAL_TIM_PWM_ConfigChannel+0x184>
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	2201      	movs	r2, #1
 8003bea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	2202      	movs	r2, #2
 8003bf2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	2b0c      	cmp	r3, #12
 8003bfa:	f200 809f 	bhi.w	8003d3c <HAL_TIM_PWM_ConfigChannel+0x170>
 8003bfe:	a201      	add	r2, pc, #4	; (adr r2, 8003c04 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8003c00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c04:	08003c39 	.word	0x08003c39
 8003c08:	08003d3d 	.word	0x08003d3d
 8003c0c:	08003d3d 	.word	0x08003d3d
 8003c10:	08003d3d 	.word	0x08003d3d
 8003c14:	08003c79 	.word	0x08003c79
 8003c18:	08003d3d 	.word	0x08003d3d
 8003c1c:	08003d3d 	.word	0x08003d3d
 8003c20:	08003d3d 	.word	0x08003d3d
 8003c24:	08003cbb 	.word	0x08003cbb
 8003c28:	08003d3d 	.word	0x08003d3d
 8003c2c:	08003d3d 	.word	0x08003d3d
 8003c30:	08003d3d 	.word	0x08003d3d
 8003c34:	08003cfb 	.word	0x08003cfb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	68b9      	ldr	r1, [r7, #8]
 8003c3e:	4618      	mov	r0, r3
 8003c40:	f000 fa0a 	bl	8004058 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	699a      	ldr	r2, [r3, #24]
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f042 0208 	orr.w	r2, r2, #8
 8003c52:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	699a      	ldr	r2, [r3, #24]
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f022 0204 	bic.w	r2, r2, #4
 8003c62:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	6999      	ldr	r1, [r3, #24]
 8003c6a:	68bb      	ldr	r3, [r7, #8]
 8003c6c:	691a      	ldr	r2, [r3, #16]
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	430a      	orrs	r2, r1
 8003c74:	619a      	str	r2, [r3, #24]
      break;
 8003c76:	e062      	b.n	8003d3e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	68b9      	ldr	r1, [r7, #8]
 8003c7e:	4618      	mov	r0, r3
 8003c80:	f000 fa5a 	bl	8004138 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	699a      	ldr	r2, [r3, #24]
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003c92:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	699a      	ldr	r2, [r3, #24]
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ca2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	6999      	ldr	r1, [r3, #24]
 8003caa:	68bb      	ldr	r3, [r7, #8]
 8003cac:	691b      	ldr	r3, [r3, #16]
 8003cae:	021a      	lsls	r2, r3, #8
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	430a      	orrs	r2, r1
 8003cb6:	619a      	str	r2, [r3, #24]
      break;
 8003cb8:	e041      	b.n	8003d3e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	68b9      	ldr	r1, [r7, #8]
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	f000 faaf 	bl	8004224 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	69da      	ldr	r2, [r3, #28]
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f042 0208 	orr.w	r2, r2, #8
 8003cd4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	69da      	ldr	r2, [r3, #28]
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f022 0204 	bic.w	r2, r2, #4
 8003ce4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	69d9      	ldr	r1, [r3, #28]
 8003cec:	68bb      	ldr	r3, [r7, #8]
 8003cee:	691a      	ldr	r2, [r3, #16]
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	430a      	orrs	r2, r1
 8003cf6:	61da      	str	r2, [r3, #28]
      break;
 8003cf8:	e021      	b.n	8003d3e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	68b9      	ldr	r1, [r7, #8]
 8003d00:	4618      	mov	r0, r3
 8003d02:	f000 fb03 	bl	800430c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	69da      	ldr	r2, [r3, #28]
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003d14:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	69da      	ldr	r2, [r3, #28]
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d24:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	69d9      	ldr	r1, [r3, #28]
 8003d2c:	68bb      	ldr	r3, [r7, #8]
 8003d2e:	691b      	ldr	r3, [r3, #16]
 8003d30:	021a      	lsls	r2, r3, #8
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	430a      	orrs	r2, r1
 8003d38:	61da      	str	r2, [r3, #28]
      break;
 8003d3a:	e000      	b.n	8003d3e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8003d3c:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	2201      	movs	r2, #1
 8003d42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	2200      	movs	r2, #0
 8003d4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003d4e:	2300      	movs	r3, #0
}
 8003d50:	4618      	mov	r0, r3
 8003d52:	3710      	adds	r7, #16
 8003d54:	46bd      	mov	sp, r7
 8003d56:	bd80      	pop	{r7, pc}

08003d58 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b084      	sub	sp, #16
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
 8003d60:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d68:	2b01      	cmp	r3, #1
 8003d6a:	d101      	bne.n	8003d70 <HAL_TIM_ConfigClockSource+0x18>
 8003d6c:	2302      	movs	r3, #2
 8003d6e:	e0a6      	b.n	8003ebe <HAL_TIM_ConfigClockSource+0x166>
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2201      	movs	r2, #1
 8003d74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2202      	movs	r2, #2
 8003d7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	689b      	ldr	r3, [r3, #8]
 8003d86:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003d8e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003d96:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	68fa      	ldr	r2, [r7, #12]
 8003d9e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	2b40      	cmp	r3, #64	; 0x40
 8003da6:	d067      	beq.n	8003e78 <HAL_TIM_ConfigClockSource+0x120>
 8003da8:	2b40      	cmp	r3, #64	; 0x40
 8003daa:	d80b      	bhi.n	8003dc4 <HAL_TIM_ConfigClockSource+0x6c>
 8003dac:	2b10      	cmp	r3, #16
 8003dae:	d073      	beq.n	8003e98 <HAL_TIM_ConfigClockSource+0x140>
 8003db0:	2b10      	cmp	r3, #16
 8003db2:	d802      	bhi.n	8003dba <HAL_TIM_ConfigClockSource+0x62>
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d06f      	beq.n	8003e98 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8003db8:	e078      	b.n	8003eac <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003dba:	2b20      	cmp	r3, #32
 8003dbc:	d06c      	beq.n	8003e98 <HAL_TIM_ConfigClockSource+0x140>
 8003dbe:	2b30      	cmp	r3, #48	; 0x30
 8003dc0:	d06a      	beq.n	8003e98 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8003dc2:	e073      	b.n	8003eac <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003dc4:	2b70      	cmp	r3, #112	; 0x70
 8003dc6:	d00d      	beq.n	8003de4 <HAL_TIM_ConfigClockSource+0x8c>
 8003dc8:	2b70      	cmp	r3, #112	; 0x70
 8003dca:	d804      	bhi.n	8003dd6 <HAL_TIM_ConfigClockSource+0x7e>
 8003dcc:	2b50      	cmp	r3, #80	; 0x50
 8003dce:	d033      	beq.n	8003e38 <HAL_TIM_ConfigClockSource+0xe0>
 8003dd0:	2b60      	cmp	r3, #96	; 0x60
 8003dd2:	d041      	beq.n	8003e58 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8003dd4:	e06a      	b.n	8003eac <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003dd6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003dda:	d066      	beq.n	8003eaa <HAL_TIM_ConfigClockSource+0x152>
 8003ddc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003de0:	d017      	beq.n	8003e12 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8003de2:	e063      	b.n	8003eac <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6818      	ldr	r0, [r3, #0]
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	6899      	ldr	r1, [r3, #8]
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	685a      	ldr	r2, [r3, #4]
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	68db      	ldr	r3, [r3, #12]
 8003df4:	f000 fb5a 	bl	80044ac <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	689b      	ldr	r3, [r3, #8]
 8003dfe:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003e06:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	68fa      	ldr	r2, [r7, #12]
 8003e0e:	609a      	str	r2, [r3, #8]
      break;
 8003e10:	e04c      	b.n	8003eac <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6818      	ldr	r0, [r3, #0]
 8003e16:	683b      	ldr	r3, [r7, #0]
 8003e18:	6899      	ldr	r1, [r3, #8]
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	685a      	ldr	r2, [r3, #4]
 8003e1e:	683b      	ldr	r3, [r7, #0]
 8003e20:	68db      	ldr	r3, [r3, #12]
 8003e22:	f000 fb43 	bl	80044ac <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	689a      	ldr	r2, [r3, #8]
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003e34:	609a      	str	r2, [r3, #8]
      break;
 8003e36:	e039      	b.n	8003eac <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	6818      	ldr	r0, [r3, #0]
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	6859      	ldr	r1, [r3, #4]
 8003e40:	683b      	ldr	r3, [r7, #0]
 8003e42:	68db      	ldr	r3, [r3, #12]
 8003e44:	461a      	mov	r2, r3
 8003e46:	f000 fab7 	bl	80043b8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	2150      	movs	r1, #80	; 0x50
 8003e50:	4618      	mov	r0, r3
 8003e52:	f000 fb10 	bl	8004476 <TIM_ITRx_SetConfig>
      break;
 8003e56:	e029      	b.n	8003eac <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6818      	ldr	r0, [r3, #0]
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	6859      	ldr	r1, [r3, #4]
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	68db      	ldr	r3, [r3, #12]
 8003e64:	461a      	mov	r2, r3
 8003e66:	f000 fad6 	bl	8004416 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	2160      	movs	r1, #96	; 0x60
 8003e70:	4618      	mov	r0, r3
 8003e72:	f000 fb00 	bl	8004476 <TIM_ITRx_SetConfig>
      break;
 8003e76:	e019      	b.n	8003eac <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6818      	ldr	r0, [r3, #0]
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	6859      	ldr	r1, [r3, #4]
 8003e80:	683b      	ldr	r3, [r7, #0]
 8003e82:	68db      	ldr	r3, [r3, #12]
 8003e84:	461a      	mov	r2, r3
 8003e86:	f000 fa97 	bl	80043b8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	2140      	movs	r1, #64	; 0x40
 8003e90:	4618      	mov	r0, r3
 8003e92:	f000 faf0 	bl	8004476 <TIM_ITRx_SetConfig>
      break;
 8003e96:	e009      	b.n	8003eac <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681a      	ldr	r2, [r3, #0]
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	4619      	mov	r1, r3
 8003ea2:	4610      	mov	r0, r2
 8003ea4:	f000 fae7 	bl	8004476 <TIM_ITRx_SetConfig>
      break;
 8003ea8:	e000      	b.n	8003eac <HAL_TIM_ConfigClockSource+0x154>
      break;
 8003eaa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2201      	movs	r2, #1
 8003eb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003ebc:	2300      	movs	r3, #0
}
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	3710      	adds	r7, #16
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	bd80      	pop	{r7, pc}

08003ec6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003ec6:	b480      	push	{r7}
 8003ec8:	b083      	sub	sp, #12
 8003eca:	af00      	add	r7, sp, #0
 8003ecc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003ece:	bf00      	nop
 8003ed0:	370c      	adds	r7, #12
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed8:	4770      	bx	lr

08003eda <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003eda:	b480      	push	{r7}
 8003edc:	b083      	sub	sp, #12
 8003ede:	af00      	add	r7, sp, #0
 8003ee0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003ee2:	bf00      	nop
 8003ee4:	370c      	adds	r7, #12
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eec:	4770      	bx	lr

08003eee <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003eee:	b480      	push	{r7}
 8003ef0:	b083      	sub	sp, #12
 8003ef2:	af00      	add	r7, sp, #0
 8003ef4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003ef6:	bf00      	nop
 8003ef8:	370c      	adds	r7, #12
 8003efa:	46bd      	mov	sp, r7
 8003efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f00:	4770      	bx	lr

08003f02 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003f02:	b480      	push	{r7}
 8003f04:	b083      	sub	sp, #12
 8003f06:	af00      	add	r7, sp, #0
 8003f08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003f0a:	bf00      	nop
 8003f0c:	370c      	adds	r7, #12
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f14:	4770      	bx	lr
	...

08003f18 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003f18:	b480      	push	{r7}
 8003f1a:	b085      	sub	sp, #20
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
 8003f20:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	4a40      	ldr	r2, [pc, #256]	; (800402c <TIM_Base_SetConfig+0x114>)
 8003f2c:	4293      	cmp	r3, r2
 8003f2e:	d013      	beq.n	8003f58 <TIM_Base_SetConfig+0x40>
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f36:	d00f      	beq.n	8003f58 <TIM_Base_SetConfig+0x40>
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	4a3d      	ldr	r2, [pc, #244]	; (8004030 <TIM_Base_SetConfig+0x118>)
 8003f3c:	4293      	cmp	r3, r2
 8003f3e:	d00b      	beq.n	8003f58 <TIM_Base_SetConfig+0x40>
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	4a3c      	ldr	r2, [pc, #240]	; (8004034 <TIM_Base_SetConfig+0x11c>)
 8003f44:	4293      	cmp	r3, r2
 8003f46:	d007      	beq.n	8003f58 <TIM_Base_SetConfig+0x40>
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	4a3b      	ldr	r2, [pc, #236]	; (8004038 <TIM_Base_SetConfig+0x120>)
 8003f4c:	4293      	cmp	r3, r2
 8003f4e:	d003      	beq.n	8003f58 <TIM_Base_SetConfig+0x40>
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	4a3a      	ldr	r2, [pc, #232]	; (800403c <TIM_Base_SetConfig+0x124>)
 8003f54:	4293      	cmp	r3, r2
 8003f56:	d108      	bne.n	8003f6a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f5e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003f60:	683b      	ldr	r3, [r7, #0]
 8003f62:	685b      	ldr	r3, [r3, #4]
 8003f64:	68fa      	ldr	r2, [r7, #12]
 8003f66:	4313      	orrs	r3, r2
 8003f68:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	4a2f      	ldr	r2, [pc, #188]	; (800402c <TIM_Base_SetConfig+0x114>)
 8003f6e:	4293      	cmp	r3, r2
 8003f70:	d02b      	beq.n	8003fca <TIM_Base_SetConfig+0xb2>
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f78:	d027      	beq.n	8003fca <TIM_Base_SetConfig+0xb2>
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	4a2c      	ldr	r2, [pc, #176]	; (8004030 <TIM_Base_SetConfig+0x118>)
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	d023      	beq.n	8003fca <TIM_Base_SetConfig+0xb2>
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	4a2b      	ldr	r2, [pc, #172]	; (8004034 <TIM_Base_SetConfig+0x11c>)
 8003f86:	4293      	cmp	r3, r2
 8003f88:	d01f      	beq.n	8003fca <TIM_Base_SetConfig+0xb2>
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	4a2a      	ldr	r2, [pc, #168]	; (8004038 <TIM_Base_SetConfig+0x120>)
 8003f8e:	4293      	cmp	r3, r2
 8003f90:	d01b      	beq.n	8003fca <TIM_Base_SetConfig+0xb2>
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	4a29      	ldr	r2, [pc, #164]	; (800403c <TIM_Base_SetConfig+0x124>)
 8003f96:	4293      	cmp	r3, r2
 8003f98:	d017      	beq.n	8003fca <TIM_Base_SetConfig+0xb2>
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	4a28      	ldr	r2, [pc, #160]	; (8004040 <TIM_Base_SetConfig+0x128>)
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d013      	beq.n	8003fca <TIM_Base_SetConfig+0xb2>
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	4a27      	ldr	r2, [pc, #156]	; (8004044 <TIM_Base_SetConfig+0x12c>)
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d00f      	beq.n	8003fca <TIM_Base_SetConfig+0xb2>
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	4a26      	ldr	r2, [pc, #152]	; (8004048 <TIM_Base_SetConfig+0x130>)
 8003fae:	4293      	cmp	r3, r2
 8003fb0:	d00b      	beq.n	8003fca <TIM_Base_SetConfig+0xb2>
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	4a25      	ldr	r2, [pc, #148]	; (800404c <TIM_Base_SetConfig+0x134>)
 8003fb6:	4293      	cmp	r3, r2
 8003fb8:	d007      	beq.n	8003fca <TIM_Base_SetConfig+0xb2>
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	4a24      	ldr	r2, [pc, #144]	; (8004050 <TIM_Base_SetConfig+0x138>)
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	d003      	beq.n	8003fca <TIM_Base_SetConfig+0xb2>
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	4a23      	ldr	r2, [pc, #140]	; (8004054 <TIM_Base_SetConfig+0x13c>)
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	d108      	bne.n	8003fdc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003fd0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	68db      	ldr	r3, [r3, #12]
 8003fd6:	68fa      	ldr	r2, [r7, #12]
 8003fd8:	4313      	orrs	r3, r2
 8003fda:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003fe2:	683b      	ldr	r3, [r7, #0]
 8003fe4:	695b      	ldr	r3, [r3, #20]
 8003fe6:	4313      	orrs	r3, r2
 8003fe8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	68fa      	ldr	r2, [r7, #12]
 8003fee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	689a      	ldr	r2, [r3, #8]
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003ff8:	683b      	ldr	r3, [r7, #0]
 8003ffa:	681a      	ldr	r2, [r3, #0]
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	4a0a      	ldr	r2, [pc, #40]	; (800402c <TIM_Base_SetConfig+0x114>)
 8004004:	4293      	cmp	r3, r2
 8004006:	d003      	beq.n	8004010 <TIM_Base_SetConfig+0xf8>
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	4a0c      	ldr	r2, [pc, #48]	; (800403c <TIM_Base_SetConfig+0x124>)
 800400c:	4293      	cmp	r3, r2
 800400e:	d103      	bne.n	8004018 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	691a      	ldr	r2, [r3, #16]
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2201      	movs	r2, #1
 800401c:	615a      	str	r2, [r3, #20]
}
 800401e:	bf00      	nop
 8004020:	3714      	adds	r7, #20
 8004022:	46bd      	mov	sp, r7
 8004024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004028:	4770      	bx	lr
 800402a:	bf00      	nop
 800402c:	40010000 	.word	0x40010000
 8004030:	40000400 	.word	0x40000400
 8004034:	40000800 	.word	0x40000800
 8004038:	40000c00 	.word	0x40000c00
 800403c:	40010400 	.word	0x40010400
 8004040:	40014000 	.word	0x40014000
 8004044:	40014400 	.word	0x40014400
 8004048:	40014800 	.word	0x40014800
 800404c:	40001800 	.word	0x40001800
 8004050:	40001c00 	.word	0x40001c00
 8004054:	40002000 	.word	0x40002000

08004058 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004058:	b480      	push	{r7}
 800405a:	b087      	sub	sp, #28
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
 8004060:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6a1b      	ldr	r3, [r3, #32]
 8004066:	f023 0201 	bic.w	r2, r3, #1
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6a1b      	ldr	r3, [r3, #32]
 8004072:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	685b      	ldr	r3, [r3, #4]
 8004078:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	699b      	ldr	r3, [r3, #24]
 800407e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004086:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	f023 0303 	bic.w	r3, r3, #3
 800408e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	68fa      	ldr	r2, [r7, #12]
 8004096:	4313      	orrs	r3, r2
 8004098:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800409a:	697b      	ldr	r3, [r7, #20]
 800409c:	f023 0302 	bic.w	r3, r3, #2
 80040a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80040a2:	683b      	ldr	r3, [r7, #0]
 80040a4:	689b      	ldr	r3, [r3, #8]
 80040a6:	697a      	ldr	r2, [r7, #20]
 80040a8:	4313      	orrs	r3, r2
 80040aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	4a20      	ldr	r2, [pc, #128]	; (8004130 <TIM_OC1_SetConfig+0xd8>)
 80040b0:	4293      	cmp	r3, r2
 80040b2:	d003      	beq.n	80040bc <TIM_OC1_SetConfig+0x64>
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	4a1f      	ldr	r2, [pc, #124]	; (8004134 <TIM_OC1_SetConfig+0xdc>)
 80040b8:	4293      	cmp	r3, r2
 80040ba:	d10c      	bne.n	80040d6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80040bc:	697b      	ldr	r3, [r7, #20]
 80040be:	f023 0308 	bic.w	r3, r3, #8
 80040c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	68db      	ldr	r3, [r3, #12]
 80040c8:	697a      	ldr	r2, [r7, #20]
 80040ca:	4313      	orrs	r3, r2
 80040cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80040ce:	697b      	ldr	r3, [r7, #20]
 80040d0:	f023 0304 	bic.w	r3, r3, #4
 80040d4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	4a15      	ldr	r2, [pc, #84]	; (8004130 <TIM_OC1_SetConfig+0xd8>)
 80040da:	4293      	cmp	r3, r2
 80040dc:	d003      	beq.n	80040e6 <TIM_OC1_SetConfig+0x8e>
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	4a14      	ldr	r2, [pc, #80]	; (8004134 <TIM_OC1_SetConfig+0xdc>)
 80040e2:	4293      	cmp	r3, r2
 80040e4:	d111      	bne.n	800410a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80040e6:	693b      	ldr	r3, [r7, #16]
 80040e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80040ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80040ee:	693b      	ldr	r3, [r7, #16]
 80040f0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80040f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80040f6:	683b      	ldr	r3, [r7, #0]
 80040f8:	695b      	ldr	r3, [r3, #20]
 80040fa:	693a      	ldr	r2, [r7, #16]
 80040fc:	4313      	orrs	r3, r2
 80040fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	699b      	ldr	r3, [r3, #24]
 8004104:	693a      	ldr	r2, [r7, #16]
 8004106:	4313      	orrs	r3, r2
 8004108:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	693a      	ldr	r2, [r7, #16]
 800410e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	68fa      	ldr	r2, [r7, #12]
 8004114:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004116:	683b      	ldr	r3, [r7, #0]
 8004118:	685a      	ldr	r2, [r3, #4]
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	697a      	ldr	r2, [r7, #20]
 8004122:	621a      	str	r2, [r3, #32]
}
 8004124:	bf00      	nop
 8004126:	371c      	adds	r7, #28
 8004128:	46bd      	mov	sp, r7
 800412a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412e:	4770      	bx	lr
 8004130:	40010000 	.word	0x40010000
 8004134:	40010400 	.word	0x40010400

08004138 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004138:	b480      	push	{r7}
 800413a:	b087      	sub	sp, #28
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
 8004140:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6a1b      	ldr	r3, [r3, #32]
 8004146:	f023 0210 	bic.w	r2, r3, #16
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6a1b      	ldr	r3, [r3, #32]
 8004152:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	685b      	ldr	r3, [r3, #4]
 8004158:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	699b      	ldr	r3, [r3, #24]
 800415e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004166:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800416e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	021b      	lsls	r3, r3, #8
 8004176:	68fa      	ldr	r2, [r7, #12]
 8004178:	4313      	orrs	r3, r2
 800417a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800417c:	697b      	ldr	r3, [r7, #20]
 800417e:	f023 0320 	bic.w	r3, r3, #32
 8004182:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004184:	683b      	ldr	r3, [r7, #0]
 8004186:	689b      	ldr	r3, [r3, #8]
 8004188:	011b      	lsls	r3, r3, #4
 800418a:	697a      	ldr	r2, [r7, #20]
 800418c:	4313      	orrs	r3, r2
 800418e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	4a22      	ldr	r2, [pc, #136]	; (800421c <TIM_OC2_SetConfig+0xe4>)
 8004194:	4293      	cmp	r3, r2
 8004196:	d003      	beq.n	80041a0 <TIM_OC2_SetConfig+0x68>
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	4a21      	ldr	r2, [pc, #132]	; (8004220 <TIM_OC2_SetConfig+0xe8>)
 800419c:	4293      	cmp	r3, r2
 800419e:	d10d      	bne.n	80041bc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80041a0:	697b      	ldr	r3, [r7, #20]
 80041a2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80041a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80041a8:	683b      	ldr	r3, [r7, #0]
 80041aa:	68db      	ldr	r3, [r3, #12]
 80041ac:	011b      	lsls	r3, r3, #4
 80041ae:	697a      	ldr	r2, [r7, #20]
 80041b0:	4313      	orrs	r3, r2
 80041b2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80041b4:	697b      	ldr	r3, [r7, #20]
 80041b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80041ba:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	4a17      	ldr	r2, [pc, #92]	; (800421c <TIM_OC2_SetConfig+0xe4>)
 80041c0:	4293      	cmp	r3, r2
 80041c2:	d003      	beq.n	80041cc <TIM_OC2_SetConfig+0x94>
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	4a16      	ldr	r2, [pc, #88]	; (8004220 <TIM_OC2_SetConfig+0xe8>)
 80041c8:	4293      	cmp	r3, r2
 80041ca:	d113      	bne.n	80041f4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80041cc:	693b      	ldr	r3, [r7, #16]
 80041ce:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80041d2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80041d4:	693b      	ldr	r3, [r7, #16]
 80041d6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80041da:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	695b      	ldr	r3, [r3, #20]
 80041e0:	009b      	lsls	r3, r3, #2
 80041e2:	693a      	ldr	r2, [r7, #16]
 80041e4:	4313      	orrs	r3, r2
 80041e6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	699b      	ldr	r3, [r3, #24]
 80041ec:	009b      	lsls	r3, r3, #2
 80041ee:	693a      	ldr	r2, [r7, #16]
 80041f0:	4313      	orrs	r3, r2
 80041f2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	693a      	ldr	r2, [r7, #16]
 80041f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	68fa      	ldr	r2, [r7, #12]
 80041fe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	685a      	ldr	r2, [r3, #4]
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	697a      	ldr	r2, [r7, #20]
 800420c:	621a      	str	r2, [r3, #32]
}
 800420e:	bf00      	nop
 8004210:	371c      	adds	r7, #28
 8004212:	46bd      	mov	sp, r7
 8004214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004218:	4770      	bx	lr
 800421a:	bf00      	nop
 800421c:	40010000 	.word	0x40010000
 8004220:	40010400 	.word	0x40010400

08004224 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004224:	b480      	push	{r7}
 8004226:	b087      	sub	sp, #28
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
 800422c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6a1b      	ldr	r3, [r3, #32]
 8004232:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6a1b      	ldr	r3, [r3, #32]
 800423e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	685b      	ldr	r3, [r3, #4]
 8004244:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	69db      	ldr	r3, [r3, #28]
 800424a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004252:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	f023 0303 	bic.w	r3, r3, #3
 800425a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800425c:	683b      	ldr	r3, [r7, #0]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	68fa      	ldr	r2, [r7, #12]
 8004262:	4313      	orrs	r3, r2
 8004264:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004266:	697b      	ldr	r3, [r7, #20]
 8004268:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800426c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800426e:	683b      	ldr	r3, [r7, #0]
 8004270:	689b      	ldr	r3, [r3, #8]
 8004272:	021b      	lsls	r3, r3, #8
 8004274:	697a      	ldr	r2, [r7, #20]
 8004276:	4313      	orrs	r3, r2
 8004278:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	4a21      	ldr	r2, [pc, #132]	; (8004304 <TIM_OC3_SetConfig+0xe0>)
 800427e:	4293      	cmp	r3, r2
 8004280:	d003      	beq.n	800428a <TIM_OC3_SetConfig+0x66>
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	4a20      	ldr	r2, [pc, #128]	; (8004308 <TIM_OC3_SetConfig+0xe4>)
 8004286:	4293      	cmp	r3, r2
 8004288:	d10d      	bne.n	80042a6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800428a:	697b      	ldr	r3, [r7, #20]
 800428c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004290:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	68db      	ldr	r3, [r3, #12]
 8004296:	021b      	lsls	r3, r3, #8
 8004298:	697a      	ldr	r2, [r7, #20]
 800429a:	4313      	orrs	r3, r2
 800429c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800429e:	697b      	ldr	r3, [r7, #20]
 80042a0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80042a4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	4a16      	ldr	r2, [pc, #88]	; (8004304 <TIM_OC3_SetConfig+0xe0>)
 80042aa:	4293      	cmp	r3, r2
 80042ac:	d003      	beq.n	80042b6 <TIM_OC3_SetConfig+0x92>
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	4a15      	ldr	r2, [pc, #84]	; (8004308 <TIM_OC3_SetConfig+0xe4>)
 80042b2:	4293      	cmp	r3, r2
 80042b4:	d113      	bne.n	80042de <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80042b6:	693b      	ldr	r3, [r7, #16]
 80042b8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80042bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80042be:	693b      	ldr	r3, [r7, #16]
 80042c0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80042c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80042c6:	683b      	ldr	r3, [r7, #0]
 80042c8:	695b      	ldr	r3, [r3, #20]
 80042ca:	011b      	lsls	r3, r3, #4
 80042cc:	693a      	ldr	r2, [r7, #16]
 80042ce:	4313      	orrs	r3, r2
 80042d0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80042d2:	683b      	ldr	r3, [r7, #0]
 80042d4:	699b      	ldr	r3, [r3, #24]
 80042d6:	011b      	lsls	r3, r3, #4
 80042d8:	693a      	ldr	r2, [r7, #16]
 80042da:	4313      	orrs	r3, r2
 80042dc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	693a      	ldr	r2, [r7, #16]
 80042e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	68fa      	ldr	r2, [r7, #12]
 80042e8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80042ea:	683b      	ldr	r3, [r7, #0]
 80042ec:	685a      	ldr	r2, [r3, #4]
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	697a      	ldr	r2, [r7, #20]
 80042f6:	621a      	str	r2, [r3, #32]
}
 80042f8:	bf00      	nop
 80042fa:	371c      	adds	r7, #28
 80042fc:	46bd      	mov	sp, r7
 80042fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004302:	4770      	bx	lr
 8004304:	40010000 	.word	0x40010000
 8004308:	40010400 	.word	0x40010400

0800430c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800430c:	b480      	push	{r7}
 800430e:	b087      	sub	sp, #28
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
 8004314:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6a1b      	ldr	r3, [r3, #32]
 800431a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6a1b      	ldr	r3, [r3, #32]
 8004326:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	685b      	ldr	r3, [r3, #4]
 800432c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	69db      	ldr	r3, [r3, #28]
 8004332:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800433a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004342:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004344:	683b      	ldr	r3, [r7, #0]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	021b      	lsls	r3, r3, #8
 800434a:	68fa      	ldr	r2, [r7, #12]
 800434c:	4313      	orrs	r3, r2
 800434e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004350:	693b      	ldr	r3, [r7, #16]
 8004352:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004356:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	689b      	ldr	r3, [r3, #8]
 800435c:	031b      	lsls	r3, r3, #12
 800435e:	693a      	ldr	r2, [r7, #16]
 8004360:	4313      	orrs	r3, r2
 8004362:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	4a12      	ldr	r2, [pc, #72]	; (80043b0 <TIM_OC4_SetConfig+0xa4>)
 8004368:	4293      	cmp	r3, r2
 800436a:	d003      	beq.n	8004374 <TIM_OC4_SetConfig+0x68>
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	4a11      	ldr	r2, [pc, #68]	; (80043b4 <TIM_OC4_SetConfig+0xa8>)
 8004370:	4293      	cmp	r3, r2
 8004372:	d109      	bne.n	8004388 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004374:	697b      	ldr	r3, [r7, #20]
 8004376:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800437a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	695b      	ldr	r3, [r3, #20]
 8004380:	019b      	lsls	r3, r3, #6
 8004382:	697a      	ldr	r2, [r7, #20]
 8004384:	4313      	orrs	r3, r2
 8004386:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	697a      	ldr	r2, [r7, #20]
 800438c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	68fa      	ldr	r2, [r7, #12]
 8004392:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	685a      	ldr	r2, [r3, #4]
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	693a      	ldr	r2, [r7, #16]
 80043a0:	621a      	str	r2, [r3, #32]
}
 80043a2:	bf00      	nop
 80043a4:	371c      	adds	r7, #28
 80043a6:	46bd      	mov	sp, r7
 80043a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ac:	4770      	bx	lr
 80043ae:	bf00      	nop
 80043b0:	40010000 	.word	0x40010000
 80043b4:	40010400 	.word	0x40010400

080043b8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80043b8:	b480      	push	{r7}
 80043ba:	b087      	sub	sp, #28
 80043bc:	af00      	add	r7, sp, #0
 80043be:	60f8      	str	r0, [r7, #12]
 80043c0:	60b9      	str	r1, [r7, #8]
 80043c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	6a1b      	ldr	r3, [r3, #32]
 80043c8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	6a1b      	ldr	r3, [r3, #32]
 80043ce:	f023 0201 	bic.w	r2, r3, #1
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	699b      	ldr	r3, [r3, #24]
 80043da:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80043dc:	693b      	ldr	r3, [r7, #16]
 80043de:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80043e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	011b      	lsls	r3, r3, #4
 80043e8:	693a      	ldr	r2, [r7, #16]
 80043ea:	4313      	orrs	r3, r2
 80043ec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80043ee:	697b      	ldr	r3, [r7, #20]
 80043f0:	f023 030a 	bic.w	r3, r3, #10
 80043f4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80043f6:	697a      	ldr	r2, [r7, #20]
 80043f8:	68bb      	ldr	r3, [r7, #8]
 80043fa:	4313      	orrs	r3, r2
 80043fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	693a      	ldr	r2, [r7, #16]
 8004402:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	697a      	ldr	r2, [r7, #20]
 8004408:	621a      	str	r2, [r3, #32]
}
 800440a:	bf00      	nop
 800440c:	371c      	adds	r7, #28
 800440e:	46bd      	mov	sp, r7
 8004410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004414:	4770      	bx	lr

08004416 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004416:	b480      	push	{r7}
 8004418:	b087      	sub	sp, #28
 800441a:	af00      	add	r7, sp, #0
 800441c:	60f8      	str	r0, [r7, #12]
 800441e:	60b9      	str	r1, [r7, #8]
 8004420:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	6a1b      	ldr	r3, [r3, #32]
 8004426:	f023 0210 	bic.w	r2, r3, #16
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	699b      	ldr	r3, [r3, #24]
 8004432:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	6a1b      	ldr	r3, [r3, #32]
 8004438:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800443a:	697b      	ldr	r3, [r7, #20]
 800443c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004440:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	031b      	lsls	r3, r3, #12
 8004446:	697a      	ldr	r2, [r7, #20]
 8004448:	4313      	orrs	r3, r2
 800444a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800444c:	693b      	ldr	r3, [r7, #16]
 800444e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004452:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004454:	68bb      	ldr	r3, [r7, #8]
 8004456:	011b      	lsls	r3, r3, #4
 8004458:	693a      	ldr	r2, [r7, #16]
 800445a:	4313      	orrs	r3, r2
 800445c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	697a      	ldr	r2, [r7, #20]
 8004462:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	693a      	ldr	r2, [r7, #16]
 8004468:	621a      	str	r2, [r3, #32]
}
 800446a:	bf00      	nop
 800446c:	371c      	adds	r7, #28
 800446e:	46bd      	mov	sp, r7
 8004470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004474:	4770      	bx	lr

08004476 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004476:	b480      	push	{r7}
 8004478:	b085      	sub	sp, #20
 800447a:	af00      	add	r7, sp, #0
 800447c:	6078      	str	r0, [r7, #4]
 800447e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	689b      	ldr	r3, [r3, #8]
 8004484:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800448c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800448e:	683a      	ldr	r2, [r7, #0]
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	4313      	orrs	r3, r2
 8004494:	f043 0307 	orr.w	r3, r3, #7
 8004498:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	68fa      	ldr	r2, [r7, #12]
 800449e:	609a      	str	r2, [r3, #8]
}
 80044a0:	bf00      	nop
 80044a2:	3714      	adds	r7, #20
 80044a4:	46bd      	mov	sp, r7
 80044a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044aa:	4770      	bx	lr

080044ac <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80044ac:	b480      	push	{r7}
 80044ae:	b087      	sub	sp, #28
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	60f8      	str	r0, [r7, #12]
 80044b4:	60b9      	str	r1, [r7, #8]
 80044b6:	607a      	str	r2, [r7, #4]
 80044b8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	689b      	ldr	r3, [r3, #8]
 80044be:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80044c0:	697b      	ldr	r3, [r7, #20]
 80044c2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80044c6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80044c8:	683b      	ldr	r3, [r7, #0]
 80044ca:	021a      	lsls	r2, r3, #8
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	431a      	orrs	r2, r3
 80044d0:	68bb      	ldr	r3, [r7, #8]
 80044d2:	4313      	orrs	r3, r2
 80044d4:	697a      	ldr	r2, [r7, #20]
 80044d6:	4313      	orrs	r3, r2
 80044d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	697a      	ldr	r2, [r7, #20]
 80044de:	609a      	str	r2, [r3, #8]
}
 80044e0:	bf00      	nop
 80044e2:	371c      	adds	r7, #28
 80044e4:	46bd      	mov	sp, r7
 80044e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ea:	4770      	bx	lr

080044ec <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80044ec:	b480      	push	{r7}
 80044ee:	b087      	sub	sp, #28
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	60f8      	str	r0, [r7, #12]
 80044f4:	60b9      	str	r1, [r7, #8]
 80044f6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80044f8:	68bb      	ldr	r3, [r7, #8]
 80044fa:	f003 031f 	and.w	r3, r3, #31
 80044fe:	2201      	movs	r2, #1
 8004500:	fa02 f303 	lsl.w	r3, r2, r3
 8004504:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	6a1a      	ldr	r2, [r3, #32]
 800450a:	697b      	ldr	r3, [r7, #20]
 800450c:	43db      	mvns	r3, r3
 800450e:	401a      	ands	r2, r3
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	6a1a      	ldr	r2, [r3, #32]
 8004518:	68bb      	ldr	r3, [r7, #8]
 800451a:	f003 031f 	and.w	r3, r3, #31
 800451e:	6879      	ldr	r1, [r7, #4]
 8004520:	fa01 f303 	lsl.w	r3, r1, r3
 8004524:	431a      	orrs	r2, r3
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	621a      	str	r2, [r3, #32]
}
 800452a:	bf00      	nop
 800452c:	371c      	adds	r7, #28
 800452e:	46bd      	mov	sp, r7
 8004530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004534:	4770      	bx	lr

08004536 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004536:	b480      	push	{r7}
 8004538:	b085      	sub	sp, #20
 800453a:	af00      	add	r7, sp, #0
 800453c:	6078      	str	r0, [r7, #4]
 800453e:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004546:	2b01      	cmp	r3, #1
 8004548:	d101      	bne.n	800454e <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800454a:	2302      	movs	r3, #2
 800454c:	e032      	b.n	80045b4 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	2201      	movs	r2, #1
 8004552:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	2202      	movs	r2, #2
 800455a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	685b      	ldr	r3, [r3, #4]
 8004564:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	689b      	ldr	r3, [r3, #8]
 800456c:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004574:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004576:	683b      	ldr	r3, [r7, #0]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	68fa      	ldr	r2, [r7, #12]
 800457c:	4313      	orrs	r3, r2
 800457e:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8004580:	68bb      	ldr	r3, [r7, #8]
 8004582:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004586:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004588:	683b      	ldr	r3, [r7, #0]
 800458a:	685b      	ldr	r3, [r3, #4]
 800458c:	68ba      	ldr	r2, [r7, #8]
 800458e:	4313      	orrs	r3, r2
 8004590:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	68fa      	ldr	r2, [r7, #12]
 8004598:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	68ba      	ldr	r2, [r7, #8]
 80045a0:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	2201      	movs	r2, #1
 80045a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	2200      	movs	r2, #0
 80045ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80045b2:	2300      	movs	r3, #0
}
 80045b4:	4618      	mov	r0, r3
 80045b6:	3714      	adds	r7, #20
 80045b8:	46bd      	mov	sp, r7
 80045ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045be:	4770      	bx	lr

080045c0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80045c0:	b480      	push	{r7}
 80045c2:	b083      	sub	sp, #12
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80045c8:	bf00      	nop
 80045ca:	370c      	adds	r7, #12
 80045cc:	46bd      	mov	sp, r7
 80045ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d2:	4770      	bx	lr

080045d4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80045d4:	b480      	push	{r7}
 80045d6:	b083      	sub	sp, #12
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80045dc:	bf00      	nop
 80045de:	370c      	adds	r7, #12
 80045e0:	46bd      	mov	sp, r7
 80045e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e6:	4770      	bx	lr

080045e8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80045e8:	b580      	push	{r7, lr}
 80045ea:	b082      	sub	sp, #8
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d101      	bne.n	80045fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80045f6:	2301      	movs	r3, #1
 80045f8:	e03f      	b.n	800467a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004600:	b2db      	uxtb	r3, r3
 8004602:	2b00      	cmp	r3, #0
 8004604:	d106      	bne.n	8004614 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	2200      	movs	r2, #0
 800460a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800460e:	6878      	ldr	r0, [r7, #4]
 8004610:	f009 fc3a 	bl	800de88 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2224      	movs	r2, #36	; 0x24
 8004618:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	68da      	ldr	r2, [r3, #12]
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800462a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800462c:	6878      	ldr	r0, [r7, #4]
 800462e:	f000 f90b 	bl	8004848 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	691a      	ldr	r2, [r3, #16]
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004640:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	695a      	ldr	r2, [r3, #20]
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004650:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	68da      	ldr	r2, [r3, #12]
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004660:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	2200      	movs	r2, #0
 8004666:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2220      	movs	r2, #32
 800466c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2220      	movs	r2, #32
 8004674:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8004678:	2300      	movs	r3, #0
}
 800467a:	4618      	mov	r0, r3
 800467c:	3708      	adds	r7, #8
 800467e:	46bd      	mov	sp, r7
 8004680:	bd80      	pop	{r7, pc}

08004682 <HAL_UART_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004682:	b580      	push	{r7, lr}
 8004684:	b088      	sub	sp, #32
 8004686:	af02      	add	r7, sp, #8
 8004688:	60f8      	str	r0, [r7, #12]
 800468a:	60b9      	str	r1, [r7, #8]
 800468c:	603b      	str	r3, [r7, #0]
 800468e:	4613      	mov	r3, r2
 8004690:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8004692:	2300      	movs	r3, #0
 8004694:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800469c:	b2db      	uxtb	r3, r3
 800469e:	2b20      	cmp	r3, #32
 80046a0:	f040 8083 	bne.w	80047aa <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 80046a4:	68bb      	ldr	r3, [r7, #8]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d002      	beq.n	80046b0 <HAL_UART_Transmit+0x2e>
 80046aa:	88fb      	ldrh	r3, [r7, #6]
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d101      	bne.n	80046b4 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80046b0:	2301      	movs	r3, #1
 80046b2:	e07b      	b.n	80047ac <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80046ba:	2b01      	cmp	r3, #1
 80046bc:	d101      	bne.n	80046c2 <HAL_UART_Transmit+0x40>
 80046be:	2302      	movs	r3, #2
 80046c0:	e074      	b.n	80047ac <HAL_UART_Transmit+0x12a>
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	2201      	movs	r2, #1
 80046c6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	2200      	movs	r2, #0
 80046ce:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	2221      	movs	r2, #33	; 0x21
 80046d4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80046d8:	f7fc fc94 	bl	8001004 <HAL_GetTick>
 80046dc:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	88fa      	ldrh	r2, [r7, #6]
 80046e2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	88fa      	ldrh	r2, [r7, #6]
 80046e8:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80046ea:	e042      	b.n	8004772 <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80046f0:	b29b      	uxth	r3, r3
 80046f2:	3b01      	subs	r3, #1
 80046f4:	b29a      	uxth	r2, r3
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	689b      	ldr	r3, [r3, #8]
 80046fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004702:	d122      	bne.n	800474a <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004704:	683b      	ldr	r3, [r7, #0]
 8004706:	9300      	str	r3, [sp, #0]
 8004708:	697b      	ldr	r3, [r7, #20]
 800470a:	2200      	movs	r2, #0
 800470c:	2180      	movs	r1, #128	; 0x80
 800470e:	68f8      	ldr	r0, [r7, #12]
 8004710:	f000 f850 	bl	80047b4 <UART_WaitOnFlagUntilTimeout>
 8004714:	4603      	mov	r3, r0
 8004716:	2b00      	cmp	r3, #0
 8004718:	d001      	beq.n	800471e <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 800471a:	2303      	movs	r3, #3
 800471c:	e046      	b.n	80047ac <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800471e:	68bb      	ldr	r3, [r7, #8]
 8004720:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8004722:	693b      	ldr	r3, [r7, #16]
 8004724:	881b      	ldrh	r3, [r3, #0]
 8004726:	461a      	mov	r2, r3
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004730:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	691b      	ldr	r3, [r3, #16]
 8004736:	2b00      	cmp	r3, #0
 8004738:	d103      	bne.n	8004742 <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 800473a:	68bb      	ldr	r3, [r7, #8]
 800473c:	3302      	adds	r3, #2
 800473e:	60bb      	str	r3, [r7, #8]
 8004740:	e017      	b.n	8004772 <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 8004742:	68bb      	ldr	r3, [r7, #8]
 8004744:	3301      	adds	r3, #1
 8004746:	60bb      	str	r3, [r7, #8]
 8004748:	e013      	b.n	8004772 <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	9300      	str	r3, [sp, #0]
 800474e:	697b      	ldr	r3, [r7, #20]
 8004750:	2200      	movs	r2, #0
 8004752:	2180      	movs	r1, #128	; 0x80
 8004754:	68f8      	ldr	r0, [r7, #12]
 8004756:	f000 f82d 	bl	80047b4 <UART_WaitOnFlagUntilTimeout>
 800475a:	4603      	mov	r3, r0
 800475c:	2b00      	cmp	r3, #0
 800475e:	d001      	beq.n	8004764 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8004760:	2303      	movs	r3, #3
 8004762:	e023      	b.n	80047ac <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8004764:	68bb      	ldr	r3, [r7, #8]
 8004766:	1c5a      	adds	r2, r3, #1
 8004768:	60ba      	str	r2, [r7, #8]
 800476a:	781a      	ldrb	r2, [r3, #0]
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004776:	b29b      	uxth	r3, r3
 8004778:	2b00      	cmp	r3, #0
 800477a:	d1b7      	bne.n	80046ec <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800477c:	683b      	ldr	r3, [r7, #0]
 800477e:	9300      	str	r3, [sp, #0]
 8004780:	697b      	ldr	r3, [r7, #20]
 8004782:	2200      	movs	r2, #0
 8004784:	2140      	movs	r1, #64	; 0x40
 8004786:	68f8      	ldr	r0, [r7, #12]
 8004788:	f000 f814 	bl	80047b4 <UART_WaitOnFlagUntilTimeout>
 800478c:	4603      	mov	r3, r0
 800478e:	2b00      	cmp	r3, #0
 8004790:	d001      	beq.n	8004796 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8004792:	2303      	movs	r3, #3
 8004794:	e00a      	b.n	80047ac <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	2220      	movs	r2, #32
 800479a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	2200      	movs	r2, #0
 80047a2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 80047a6:	2300      	movs	r3, #0
 80047a8:	e000      	b.n	80047ac <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80047aa:	2302      	movs	r3, #2
  }
}
 80047ac:	4618      	mov	r0, r3
 80047ae:	3718      	adds	r7, #24
 80047b0:	46bd      	mov	sp, r7
 80047b2:	bd80      	pop	{r7, pc}

080047b4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80047b4:	b580      	push	{r7, lr}
 80047b6:	b084      	sub	sp, #16
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	60f8      	str	r0, [r7, #12]
 80047bc:	60b9      	str	r1, [r7, #8]
 80047be:	603b      	str	r3, [r7, #0]
 80047c0:	4613      	mov	r3, r2
 80047c2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80047c4:	e02c      	b.n	8004820 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047c6:	69bb      	ldr	r3, [r7, #24]
 80047c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047cc:	d028      	beq.n	8004820 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80047ce:	69bb      	ldr	r3, [r7, #24]
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d007      	beq.n	80047e4 <UART_WaitOnFlagUntilTimeout+0x30>
 80047d4:	f7fc fc16 	bl	8001004 <HAL_GetTick>
 80047d8:	4602      	mov	r2, r0
 80047da:	683b      	ldr	r3, [r7, #0]
 80047dc:	1ad3      	subs	r3, r2, r3
 80047de:	69ba      	ldr	r2, [r7, #24]
 80047e0:	429a      	cmp	r2, r3
 80047e2:	d21d      	bcs.n	8004820 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	68da      	ldr	r2, [r3, #12]
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80047f2:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	695a      	ldr	r2, [r3, #20]
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f022 0201 	bic.w	r2, r2, #1
 8004802:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	2220      	movs	r2, #32
 8004808:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	2220      	movs	r2, #32
 8004810:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	2200      	movs	r2, #0
 8004818:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 800481c:	2303      	movs	r3, #3
 800481e:	e00f      	b.n	8004840 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	681a      	ldr	r2, [r3, #0]
 8004826:	68bb      	ldr	r3, [r7, #8]
 8004828:	4013      	ands	r3, r2
 800482a:	68ba      	ldr	r2, [r7, #8]
 800482c:	429a      	cmp	r2, r3
 800482e:	bf0c      	ite	eq
 8004830:	2301      	moveq	r3, #1
 8004832:	2300      	movne	r3, #0
 8004834:	b2db      	uxtb	r3, r3
 8004836:	461a      	mov	r2, r3
 8004838:	79fb      	ldrb	r3, [r7, #7]
 800483a:	429a      	cmp	r2, r3
 800483c:	d0c3      	beq.n	80047c6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800483e:	2300      	movs	r3, #0
}
 8004840:	4618      	mov	r0, r3
 8004842:	3710      	adds	r7, #16
 8004844:	46bd      	mov	sp, r7
 8004846:	bd80      	pop	{r7, pc}

08004848 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004848:	b5b0      	push	{r4, r5, r7, lr}
 800484a:	b084      	sub	sp, #16
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	691b      	ldr	r3, [r3, #16]
 8004856:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	68da      	ldr	r2, [r3, #12]
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	430a      	orrs	r2, r1
 8004864:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	689a      	ldr	r2, [r3, #8]
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	691b      	ldr	r3, [r3, #16]
 800486e:	431a      	orrs	r2, r3
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	695b      	ldr	r3, [r3, #20]
 8004874:	431a      	orrs	r2, r3
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	69db      	ldr	r3, [r3, #28]
 800487a:	4313      	orrs	r3, r2
 800487c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	68db      	ldr	r3, [r3, #12]
 8004884:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8004888:	f023 030c 	bic.w	r3, r3, #12
 800488c:	687a      	ldr	r2, [r7, #4]
 800488e:	6812      	ldr	r2, [r2, #0]
 8004890:	68f9      	ldr	r1, [r7, #12]
 8004892:	430b      	orrs	r3, r1
 8004894:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	695b      	ldr	r3, [r3, #20]
 800489c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	699a      	ldr	r2, [r3, #24]
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	430a      	orrs	r2, r1
 80048aa:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	69db      	ldr	r3, [r3, #28]
 80048b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80048b4:	f040 80e4 	bne.w	8004a80 <UART_SetConfig+0x238>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	4aab      	ldr	r2, [pc, #684]	; (8004b6c <UART_SetConfig+0x324>)
 80048be:	4293      	cmp	r3, r2
 80048c0:	d004      	beq.n	80048cc <UART_SetConfig+0x84>
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	4aaa      	ldr	r2, [pc, #680]	; (8004b70 <UART_SetConfig+0x328>)
 80048c8:	4293      	cmp	r3, r2
 80048ca:	d16c      	bne.n	80049a6 <UART_SetConfig+0x15e>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80048cc:	f7fe f92a 	bl	8002b24 <HAL_RCC_GetPCLK2Freq>
 80048d0:	4602      	mov	r2, r0
 80048d2:	4613      	mov	r3, r2
 80048d4:	009b      	lsls	r3, r3, #2
 80048d6:	4413      	add	r3, r2
 80048d8:	009a      	lsls	r2, r3, #2
 80048da:	441a      	add	r2, r3
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	685b      	ldr	r3, [r3, #4]
 80048e0:	005b      	lsls	r3, r3, #1
 80048e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80048e6:	4aa3      	ldr	r2, [pc, #652]	; (8004b74 <UART_SetConfig+0x32c>)
 80048e8:	fba2 2303 	umull	r2, r3, r2, r3
 80048ec:	095b      	lsrs	r3, r3, #5
 80048ee:	011c      	lsls	r4, r3, #4
 80048f0:	f7fe f918 	bl	8002b24 <HAL_RCC_GetPCLK2Freq>
 80048f4:	4602      	mov	r2, r0
 80048f6:	4613      	mov	r3, r2
 80048f8:	009b      	lsls	r3, r3, #2
 80048fa:	4413      	add	r3, r2
 80048fc:	009a      	lsls	r2, r3, #2
 80048fe:	441a      	add	r2, r3
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	685b      	ldr	r3, [r3, #4]
 8004904:	005b      	lsls	r3, r3, #1
 8004906:	fbb2 f5f3 	udiv	r5, r2, r3
 800490a:	f7fe f90b 	bl	8002b24 <HAL_RCC_GetPCLK2Freq>
 800490e:	4602      	mov	r2, r0
 8004910:	4613      	mov	r3, r2
 8004912:	009b      	lsls	r3, r3, #2
 8004914:	4413      	add	r3, r2
 8004916:	009a      	lsls	r2, r3, #2
 8004918:	441a      	add	r2, r3
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	685b      	ldr	r3, [r3, #4]
 800491e:	005b      	lsls	r3, r3, #1
 8004920:	fbb2 f3f3 	udiv	r3, r2, r3
 8004924:	4a93      	ldr	r2, [pc, #588]	; (8004b74 <UART_SetConfig+0x32c>)
 8004926:	fba2 2303 	umull	r2, r3, r2, r3
 800492a:	095b      	lsrs	r3, r3, #5
 800492c:	2264      	movs	r2, #100	; 0x64
 800492e:	fb02 f303 	mul.w	r3, r2, r3
 8004932:	1aeb      	subs	r3, r5, r3
 8004934:	00db      	lsls	r3, r3, #3
 8004936:	3332      	adds	r3, #50	; 0x32
 8004938:	4a8e      	ldr	r2, [pc, #568]	; (8004b74 <UART_SetConfig+0x32c>)
 800493a:	fba2 2303 	umull	r2, r3, r2, r3
 800493e:	095b      	lsrs	r3, r3, #5
 8004940:	005b      	lsls	r3, r3, #1
 8004942:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004946:	441c      	add	r4, r3
 8004948:	f7fe f8ec 	bl	8002b24 <HAL_RCC_GetPCLK2Freq>
 800494c:	4602      	mov	r2, r0
 800494e:	4613      	mov	r3, r2
 8004950:	009b      	lsls	r3, r3, #2
 8004952:	4413      	add	r3, r2
 8004954:	009a      	lsls	r2, r3, #2
 8004956:	441a      	add	r2, r3
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	685b      	ldr	r3, [r3, #4]
 800495c:	005b      	lsls	r3, r3, #1
 800495e:	fbb2 f5f3 	udiv	r5, r2, r3
 8004962:	f7fe f8df 	bl	8002b24 <HAL_RCC_GetPCLK2Freq>
 8004966:	4602      	mov	r2, r0
 8004968:	4613      	mov	r3, r2
 800496a:	009b      	lsls	r3, r3, #2
 800496c:	4413      	add	r3, r2
 800496e:	009a      	lsls	r2, r3, #2
 8004970:	441a      	add	r2, r3
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	685b      	ldr	r3, [r3, #4]
 8004976:	005b      	lsls	r3, r3, #1
 8004978:	fbb2 f3f3 	udiv	r3, r2, r3
 800497c:	4a7d      	ldr	r2, [pc, #500]	; (8004b74 <UART_SetConfig+0x32c>)
 800497e:	fba2 2303 	umull	r2, r3, r2, r3
 8004982:	095b      	lsrs	r3, r3, #5
 8004984:	2264      	movs	r2, #100	; 0x64
 8004986:	fb02 f303 	mul.w	r3, r2, r3
 800498a:	1aeb      	subs	r3, r5, r3
 800498c:	00db      	lsls	r3, r3, #3
 800498e:	3332      	adds	r3, #50	; 0x32
 8004990:	4a78      	ldr	r2, [pc, #480]	; (8004b74 <UART_SetConfig+0x32c>)
 8004992:	fba2 2303 	umull	r2, r3, r2, r3
 8004996:	095b      	lsrs	r3, r3, #5
 8004998:	f003 0207 	and.w	r2, r3, #7
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	4422      	add	r2, r4
 80049a2:	609a      	str	r2, [r3, #8]
 80049a4:	e154      	b.n	8004c50 <UART_SetConfig+0x408>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80049a6:	f7fe f8a9 	bl	8002afc <HAL_RCC_GetPCLK1Freq>
 80049aa:	4602      	mov	r2, r0
 80049ac:	4613      	mov	r3, r2
 80049ae:	009b      	lsls	r3, r3, #2
 80049b0:	4413      	add	r3, r2
 80049b2:	009a      	lsls	r2, r3, #2
 80049b4:	441a      	add	r2, r3
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	685b      	ldr	r3, [r3, #4]
 80049ba:	005b      	lsls	r3, r3, #1
 80049bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80049c0:	4a6c      	ldr	r2, [pc, #432]	; (8004b74 <UART_SetConfig+0x32c>)
 80049c2:	fba2 2303 	umull	r2, r3, r2, r3
 80049c6:	095b      	lsrs	r3, r3, #5
 80049c8:	011c      	lsls	r4, r3, #4
 80049ca:	f7fe f897 	bl	8002afc <HAL_RCC_GetPCLK1Freq>
 80049ce:	4602      	mov	r2, r0
 80049d0:	4613      	mov	r3, r2
 80049d2:	009b      	lsls	r3, r3, #2
 80049d4:	4413      	add	r3, r2
 80049d6:	009a      	lsls	r2, r3, #2
 80049d8:	441a      	add	r2, r3
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	685b      	ldr	r3, [r3, #4]
 80049de:	005b      	lsls	r3, r3, #1
 80049e0:	fbb2 f5f3 	udiv	r5, r2, r3
 80049e4:	f7fe f88a 	bl	8002afc <HAL_RCC_GetPCLK1Freq>
 80049e8:	4602      	mov	r2, r0
 80049ea:	4613      	mov	r3, r2
 80049ec:	009b      	lsls	r3, r3, #2
 80049ee:	4413      	add	r3, r2
 80049f0:	009a      	lsls	r2, r3, #2
 80049f2:	441a      	add	r2, r3
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	685b      	ldr	r3, [r3, #4]
 80049f8:	005b      	lsls	r3, r3, #1
 80049fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80049fe:	4a5d      	ldr	r2, [pc, #372]	; (8004b74 <UART_SetConfig+0x32c>)
 8004a00:	fba2 2303 	umull	r2, r3, r2, r3
 8004a04:	095b      	lsrs	r3, r3, #5
 8004a06:	2264      	movs	r2, #100	; 0x64
 8004a08:	fb02 f303 	mul.w	r3, r2, r3
 8004a0c:	1aeb      	subs	r3, r5, r3
 8004a0e:	00db      	lsls	r3, r3, #3
 8004a10:	3332      	adds	r3, #50	; 0x32
 8004a12:	4a58      	ldr	r2, [pc, #352]	; (8004b74 <UART_SetConfig+0x32c>)
 8004a14:	fba2 2303 	umull	r2, r3, r2, r3
 8004a18:	095b      	lsrs	r3, r3, #5
 8004a1a:	005b      	lsls	r3, r3, #1
 8004a1c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004a20:	441c      	add	r4, r3
 8004a22:	f7fe f86b 	bl	8002afc <HAL_RCC_GetPCLK1Freq>
 8004a26:	4602      	mov	r2, r0
 8004a28:	4613      	mov	r3, r2
 8004a2a:	009b      	lsls	r3, r3, #2
 8004a2c:	4413      	add	r3, r2
 8004a2e:	009a      	lsls	r2, r3, #2
 8004a30:	441a      	add	r2, r3
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	685b      	ldr	r3, [r3, #4]
 8004a36:	005b      	lsls	r3, r3, #1
 8004a38:	fbb2 f5f3 	udiv	r5, r2, r3
 8004a3c:	f7fe f85e 	bl	8002afc <HAL_RCC_GetPCLK1Freq>
 8004a40:	4602      	mov	r2, r0
 8004a42:	4613      	mov	r3, r2
 8004a44:	009b      	lsls	r3, r3, #2
 8004a46:	4413      	add	r3, r2
 8004a48:	009a      	lsls	r2, r3, #2
 8004a4a:	441a      	add	r2, r3
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	685b      	ldr	r3, [r3, #4]
 8004a50:	005b      	lsls	r3, r3, #1
 8004a52:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a56:	4a47      	ldr	r2, [pc, #284]	; (8004b74 <UART_SetConfig+0x32c>)
 8004a58:	fba2 2303 	umull	r2, r3, r2, r3
 8004a5c:	095b      	lsrs	r3, r3, #5
 8004a5e:	2264      	movs	r2, #100	; 0x64
 8004a60:	fb02 f303 	mul.w	r3, r2, r3
 8004a64:	1aeb      	subs	r3, r5, r3
 8004a66:	00db      	lsls	r3, r3, #3
 8004a68:	3332      	adds	r3, #50	; 0x32
 8004a6a:	4a42      	ldr	r2, [pc, #264]	; (8004b74 <UART_SetConfig+0x32c>)
 8004a6c:	fba2 2303 	umull	r2, r3, r2, r3
 8004a70:	095b      	lsrs	r3, r3, #5
 8004a72:	f003 0207 	and.w	r2, r3, #7
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	4422      	add	r2, r4
 8004a7c:	609a      	str	r2, [r3, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 8004a7e:	e0e7      	b.n	8004c50 <UART_SetConfig+0x408>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	4a39      	ldr	r2, [pc, #228]	; (8004b6c <UART_SetConfig+0x324>)
 8004a86:	4293      	cmp	r3, r2
 8004a88:	d004      	beq.n	8004a94 <UART_SetConfig+0x24c>
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	4a38      	ldr	r2, [pc, #224]	; (8004b70 <UART_SetConfig+0x328>)
 8004a90:	4293      	cmp	r3, r2
 8004a92:	d171      	bne.n	8004b78 <UART_SetConfig+0x330>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8004a94:	f7fe f846 	bl	8002b24 <HAL_RCC_GetPCLK2Freq>
 8004a98:	4602      	mov	r2, r0
 8004a9a:	4613      	mov	r3, r2
 8004a9c:	009b      	lsls	r3, r3, #2
 8004a9e:	4413      	add	r3, r2
 8004aa0:	009a      	lsls	r2, r3, #2
 8004aa2:	441a      	add	r2, r3
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	685b      	ldr	r3, [r3, #4]
 8004aa8:	009b      	lsls	r3, r3, #2
 8004aaa:	fbb2 f3f3 	udiv	r3, r2, r3
 8004aae:	4a31      	ldr	r2, [pc, #196]	; (8004b74 <UART_SetConfig+0x32c>)
 8004ab0:	fba2 2303 	umull	r2, r3, r2, r3
 8004ab4:	095b      	lsrs	r3, r3, #5
 8004ab6:	011c      	lsls	r4, r3, #4
 8004ab8:	f7fe f834 	bl	8002b24 <HAL_RCC_GetPCLK2Freq>
 8004abc:	4602      	mov	r2, r0
 8004abe:	4613      	mov	r3, r2
 8004ac0:	009b      	lsls	r3, r3, #2
 8004ac2:	4413      	add	r3, r2
 8004ac4:	009a      	lsls	r2, r3, #2
 8004ac6:	441a      	add	r2, r3
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	685b      	ldr	r3, [r3, #4]
 8004acc:	009b      	lsls	r3, r3, #2
 8004ace:	fbb2 f5f3 	udiv	r5, r2, r3
 8004ad2:	f7fe f827 	bl	8002b24 <HAL_RCC_GetPCLK2Freq>
 8004ad6:	4602      	mov	r2, r0
 8004ad8:	4613      	mov	r3, r2
 8004ada:	009b      	lsls	r3, r3, #2
 8004adc:	4413      	add	r3, r2
 8004ade:	009a      	lsls	r2, r3, #2
 8004ae0:	441a      	add	r2, r3
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	685b      	ldr	r3, [r3, #4]
 8004ae6:	009b      	lsls	r3, r3, #2
 8004ae8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004aec:	4a21      	ldr	r2, [pc, #132]	; (8004b74 <UART_SetConfig+0x32c>)
 8004aee:	fba2 2303 	umull	r2, r3, r2, r3
 8004af2:	095b      	lsrs	r3, r3, #5
 8004af4:	2264      	movs	r2, #100	; 0x64
 8004af6:	fb02 f303 	mul.w	r3, r2, r3
 8004afa:	1aeb      	subs	r3, r5, r3
 8004afc:	011b      	lsls	r3, r3, #4
 8004afe:	3332      	adds	r3, #50	; 0x32
 8004b00:	4a1c      	ldr	r2, [pc, #112]	; (8004b74 <UART_SetConfig+0x32c>)
 8004b02:	fba2 2303 	umull	r2, r3, r2, r3
 8004b06:	095b      	lsrs	r3, r3, #5
 8004b08:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004b0c:	441c      	add	r4, r3
 8004b0e:	f7fe f809 	bl	8002b24 <HAL_RCC_GetPCLK2Freq>
 8004b12:	4602      	mov	r2, r0
 8004b14:	4613      	mov	r3, r2
 8004b16:	009b      	lsls	r3, r3, #2
 8004b18:	4413      	add	r3, r2
 8004b1a:	009a      	lsls	r2, r3, #2
 8004b1c:	441a      	add	r2, r3
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	685b      	ldr	r3, [r3, #4]
 8004b22:	009b      	lsls	r3, r3, #2
 8004b24:	fbb2 f5f3 	udiv	r5, r2, r3
 8004b28:	f7fd fffc 	bl	8002b24 <HAL_RCC_GetPCLK2Freq>
 8004b2c:	4602      	mov	r2, r0
 8004b2e:	4613      	mov	r3, r2
 8004b30:	009b      	lsls	r3, r3, #2
 8004b32:	4413      	add	r3, r2
 8004b34:	009a      	lsls	r2, r3, #2
 8004b36:	441a      	add	r2, r3
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	685b      	ldr	r3, [r3, #4]
 8004b3c:	009b      	lsls	r3, r3, #2
 8004b3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b42:	4a0c      	ldr	r2, [pc, #48]	; (8004b74 <UART_SetConfig+0x32c>)
 8004b44:	fba2 2303 	umull	r2, r3, r2, r3
 8004b48:	095b      	lsrs	r3, r3, #5
 8004b4a:	2264      	movs	r2, #100	; 0x64
 8004b4c:	fb02 f303 	mul.w	r3, r2, r3
 8004b50:	1aeb      	subs	r3, r5, r3
 8004b52:	011b      	lsls	r3, r3, #4
 8004b54:	3332      	adds	r3, #50	; 0x32
 8004b56:	4a07      	ldr	r2, [pc, #28]	; (8004b74 <UART_SetConfig+0x32c>)
 8004b58:	fba2 2303 	umull	r2, r3, r2, r3
 8004b5c:	095b      	lsrs	r3, r3, #5
 8004b5e:	f003 020f 	and.w	r2, r3, #15
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	4422      	add	r2, r4
 8004b68:	609a      	str	r2, [r3, #8]
 8004b6a:	e071      	b.n	8004c50 <UART_SetConfig+0x408>
 8004b6c:	40011000 	.word	0x40011000
 8004b70:	40011400 	.word	0x40011400
 8004b74:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8004b78:	f7fd ffc0 	bl	8002afc <HAL_RCC_GetPCLK1Freq>
 8004b7c:	4602      	mov	r2, r0
 8004b7e:	4613      	mov	r3, r2
 8004b80:	009b      	lsls	r3, r3, #2
 8004b82:	4413      	add	r3, r2
 8004b84:	009a      	lsls	r2, r3, #2
 8004b86:	441a      	add	r2, r3
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	685b      	ldr	r3, [r3, #4]
 8004b8c:	009b      	lsls	r3, r3, #2
 8004b8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b92:	4a31      	ldr	r2, [pc, #196]	; (8004c58 <UART_SetConfig+0x410>)
 8004b94:	fba2 2303 	umull	r2, r3, r2, r3
 8004b98:	095b      	lsrs	r3, r3, #5
 8004b9a:	011c      	lsls	r4, r3, #4
 8004b9c:	f7fd ffae 	bl	8002afc <HAL_RCC_GetPCLK1Freq>
 8004ba0:	4602      	mov	r2, r0
 8004ba2:	4613      	mov	r3, r2
 8004ba4:	009b      	lsls	r3, r3, #2
 8004ba6:	4413      	add	r3, r2
 8004ba8:	009a      	lsls	r2, r3, #2
 8004baa:	441a      	add	r2, r3
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	685b      	ldr	r3, [r3, #4]
 8004bb0:	009b      	lsls	r3, r3, #2
 8004bb2:	fbb2 f5f3 	udiv	r5, r2, r3
 8004bb6:	f7fd ffa1 	bl	8002afc <HAL_RCC_GetPCLK1Freq>
 8004bba:	4602      	mov	r2, r0
 8004bbc:	4613      	mov	r3, r2
 8004bbe:	009b      	lsls	r3, r3, #2
 8004bc0:	4413      	add	r3, r2
 8004bc2:	009a      	lsls	r2, r3, #2
 8004bc4:	441a      	add	r2, r3
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	685b      	ldr	r3, [r3, #4]
 8004bca:	009b      	lsls	r3, r3, #2
 8004bcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bd0:	4a21      	ldr	r2, [pc, #132]	; (8004c58 <UART_SetConfig+0x410>)
 8004bd2:	fba2 2303 	umull	r2, r3, r2, r3
 8004bd6:	095b      	lsrs	r3, r3, #5
 8004bd8:	2264      	movs	r2, #100	; 0x64
 8004bda:	fb02 f303 	mul.w	r3, r2, r3
 8004bde:	1aeb      	subs	r3, r5, r3
 8004be0:	011b      	lsls	r3, r3, #4
 8004be2:	3332      	adds	r3, #50	; 0x32
 8004be4:	4a1c      	ldr	r2, [pc, #112]	; (8004c58 <UART_SetConfig+0x410>)
 8004be6:	fba2 2303 	umull	r2, r3, r2, r3
 8004bea:	095b      	lsrs	r3, r3, #5
 8004bec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004bf0:	441c      	add	r4, r3
 8004bf2:	f7fd ff83 	bl	8002afc <HAL_RCC_GetPCLK1Freq>
 8004bf6:	4602      	mov	r2, r0
 8004bf8:	4613      	mov	r3, r2
 8004bfa:	009b      	lsls	r3, r3, #2
 8004bfc:	4413      	add	r3, r2
 8004bfe:	009a      	lsls	r2, r3, #2
 8004c00:	441a      	add	r2, r3
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	685b      	ldr	r3, [r3, #4]
 8004c06:	009b      	lsls	r3, r3, #2
 8004c08:	fbb2 f5f3 	udiv	r5, r2, r3
 8004c0c:	f7fd ff76 	bl	8002afc <HAL_RCC_GetPCLK1Freq>
 8004c10:	4602      	mov	r2, r0
 8004c12:	4613      	mov	r3, r2
 8004c14:	009b      	lsls	r3, r3, #2
 8004c16:	4413      	add	r3, r2
 8004c18:	009a      	lsls	r2, r3, #2
 8004c1a:	441a      	add	r2, r3
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	685b      	ldr	r3, [r3, #4]
 8004c20:	009b      	lsls	r3, r3, #2
 8004c22:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c26:	4a0c      	ldr	r2, [pc, #48]	; (8004c58 <UART_SetConfig+0x410>)
 8004c28:	fba2 2303 	umull	r2, r3, r2, r3
 8004c2c:	095b      	lsrs	r3, r3, #5
 8004c2e:	2264      	movs	r2, #100	; 0x64
 8004c30:	fb02 f303 	mul.w	r3, r2, r3
 8004c34:	1aeb      	subs	r3, r5, r3
 8004c36:	011b      	lsls	r3, r3, #4
 8004c38:	3332      	adds	r3, #50	; 0x32
 8004c3a:	4a07      	ldr	r2, [pc, #28]	; (8004c58 <UART_SetConfig+0x410>)
 8004c3c:	fba2 2303 	umull	r2, r3, r2, r3
 8004c40:	095b      	lsrs	r3, r3, #5
 8004c42:	f003 020f 	and.w	r2, r3, #15
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	4422      	add	r2, r4
 8004c4c:	609a      	str	r2, [r3, #8]
}
 8004c4e:	e7ff      	b.n	8004c50 <UART_SetConfig+0x408>
 8004c50:	bf00      	nop
 8004c52:	3710      	adds	r7, #16
 8004c54:	46bd      	mov	sp, r7
 8004c56:	bdb0      	pop	{r4, r5, r7, pc}
 8004c58:	51eb851f 	.word	0x51eb851f

08004c5c <drive_init>:
//drive_init
// 走行系の変数の初期化
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void drive_init(void){
 8004c5c:	b480      	push	{r7}
 8004c5e:	af00      	add	r7, sp, #0
	MF.FLAGS = 0;
 8004c60:	4b03      	ldr	r3, [pc, #12]	; (8004c70 <drive_init+0x14>)
 8004c62:	2200      	movs	r2, #0
 8004c64:	801a      	strh	r2, [r3, #0]
}
 8004c66:	bf00      	nop
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6e:	4770      	bx	lr
 8004c70:	20000fe8 	.word	0x20000fe8

08004c74 <drive_ready>:
//drive_ready
// 走行前のLED点滅&ジャイロのドリフト計算
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void drive_ready(void){
 8004c74:	b580      	push	{r7, lr}
 8004c76:	af00      	add	r7, sp, #0
	  while(ad_fl <= WALL_BASE_FL){
 8004c78:	e00f      	b.n	8004c9a <drive_ready+0x26>
		  led_write(1, 1, 1);
 8004c7a:	2201      	movs	r2, #1
 8004c7c:	2101      	movs	r1, #1
 8004c7e:	2001      	movs	r0, #1
 8004c80:	f008 fce0 	bl	800d644 <led_write>
		  HAL_Delay(200);
 8004c84:	20c8      	movs	r0, #200	; 0xc8
 8004c86:	f7fc f9c9 	bl	800101c <HAL_Delay>
		  led_write(0, 0, 0);
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	2100      	movs	r1, #0
 8004c8e:	2000      	movs	r0, #0
 8004c90:	f008 fcd8 	bl	800d644 <led_write>
		  HAL_Delay(200);
 8004c94:	20c8      	movs	r0, #200	; 0xc8
 8004c96:	f7fc f9c1 	bl	800101c <HAL_Delay>
	  while(ad_fl <= WALL_BASE_FL){
 8004c9a:	4b08      	ldr	r3, [pc, #32]	; (8004cbc <drive_ready+0x48>)
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	2bfa      	cmp	r3, #250	; 0xfa
 8004ca0:	d9eb      	bls.n	8004c7a <drive_ready+0x6>
	  }
	  gyro_drift_flag = 1;
 8004ca2:	4b07      	ldr	r3, [pc, #28]	; (8004cc0 <drive_ready+0x4c>)
 8004ca4:	2201      	movs	r2, #1
 8004ca6:	701a      	strb	r2, [r3, #0]
	  HAL_Delay(2000);
 8004ca8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8004cac:	f7fc f9b6 	bl	800101c <HAL_Delay>
	  degree_z = 0;
 8004cb0:	4b04      	ldr	r3, [pc, #16]	; (8004cc4 <drive_ready+0x50>)
 8004cb2:	f04f 0200 	mov.w	r2, #0
 8004cb6:	601a      	str	r2, [r3, #0]
}
 8004cb8:	bf00      	nop
 8004cba:	bd80      	pop	{r7, pc}
 8004cbc:	20000dd8 	.word	0x20000dd8
 8004cc0:	20000b20 	.word	0x20000b20
 8004cc4:	20000bdc 	.word	0x20000bdc

08004cc8 <drive_start>:
//drive_start
// 走行開始前に走行距離と機体角度を初期化
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void drive_start(void){
 8004cc8:	b480      	push	{r7}
 8004cca:	af00      	add	r7, sp, #0
	dist_l = dist_r = 0;		//走行距離の初期化
 8004ccc:	f04f 0300 	mov.w	r3, #0
 8004cd0:	4a0e      	ldr	r2, [pc, #56]	; (8004d0c <drive_start+0x44>)
 8004cd2:	6013      	str	r3, [r2, #0]
 8004cd4:	4a0e      	ldr	r2, [pc, #56]	; (8004d10 <drive_start+0x48>)
 8004cd6:	6013      	str	r3, [r2, #0]
	if(H_accel_flag == 0) target_speed_l = target_speed_r = 0;		//モータ出力の初期化
 8004cd8:	4b0e      	ldr	r3, [pc, #56]	; (8004d14 <drive_start+0x4c>)
 8004cda:	781b      	ldrb	r3, [r3, #0]
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d105      	bne.n	8004cec <drive_start+0x24>
 8004ce0:	f04f 0300 	mov.w	r3, #0
 8004ce4:	4a0c      	ldr	r2, [pc, #48]	; (8004d18 <drive_start+0x50>)
 8004ce6:	6013      	str	r3, [r2, #0]
 8004ce8:	4a0c      	ldr	r2, [pc, #48]	; (8004d1c <drive_start+0x54>)
 8004cea:	6013      	str	r3, [r2, #0]
	MF.FLAG.DRV = 1;
 8004cec:	4a0c      	ldr	r2, [pc, #48]	; (8004d20 <drive_start+0x58>)
 8004cee:	8813      	ldrh	r3, [r2, #0]
 8004cf0:	f043 0302 	orr.w	r3, r3, #2
 8004cf4:	8013      	strh	r3, [r2, #0]
	MF.FLAG.SPD = 1;
 8004cf6:	4a0a      	ldr	r2, [pc, #40]	; (8004d20 <drive_start+0x58>)
 8004cf8:	8813      	ldrh	r3, [r2, #0]
 8004cfa:	f043 0304 	orr.w	r3, r3, #4
 8004cfe:	8013      	strh	r3, [r2, #0]
}
 8004d00:	bf00      	nop
 8004d02:	46bd      	mov	sp, r7
 8004d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d08:	4770      	bx	lr
 8004d0a:	bf00      	nop
 8004d0c:	20000b6c 	.word	0x20000b6c
 8004d10:	20001004 	.word	0x20001004
 8004d14:	20000349 	.word	0x20000349
 8004d18:	20000220 	.word	0x20000220
 8004d1c:	20000c80 	.word	0x20000c80
 8004d20:	20000fe8 	.word	0x20000fe8

08004d24 <drive_stop>:
//drive_stop
// 走行を終了する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void drive_stop(void){
 8004d24:	b480      	push	{r7}
 8004d26:	af00      	add	r7, sp, #0
	dist_l = dist_r = 0;		//a走行距離の初期化
 8004d28:	f04f 0300 	mov.w	r3, #0
 8004d2c:	4a0c      	ldr	r2, [pc, #48]	; (8004d60 <drive_stop+0x3c>)
 8004d2e:	6013      	str	r3, [r2, #0]
 8004d30:	4a0c      	ldr	r2, [pc, #48]	; (8004d64 <drive_stop+0x40>)
 8004d32:	6013      	str	r3, [r2, #0]
	pulse_l = pulse_r = 0;		//aモータ出力の初期化
 8004d34:	f04f 0300 	mov.w	r3, #0
 8004d38:	4a0b      	ldr	r2, [pc, #44]	; (8004d68 <drive_stop+0x44>)
 8004d3a:	6013      	str	r3, [r2, #0]
 8004d3c:	4a0b      	ldr	r2, [pc, #44]	; (8004d6c <drive_stop+0x48>)
 8004d3e:	6013      	str	r3, [r2, #0]
	MF.FLAG.DRV = 0;
 8004d40:	4a0b      	ldr	r2, [pc, #44]	; (8004d70 <drive_stop+0x4c>)
 8004d42:	8813      	ldrh	r3, [r2, #0]
 8004d44:	f36f 0341 	bfc	r3, #1, #1
 8004d48:	8013      	strh	r3, [r2, #0]
	MF.FLAG.SPD = 0;
 8004d4a:	4a09      	ldr	r2, [pc, #36]	; (8004d70 <drive_stop+0x4c>)
 8004d4c:	8813      	ldrh	r3, [r2, #0]
 8004d4e:	f36f 0382 	bfc	r3, #2, #1
 8004d52:	8013      	strh	r3, [r2, #0]
}
 8004d54:	bf00      	nop
 8004d56:	46bd      	mov	sp, r7
 8004d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5c:	4770      	bx	lr
 8004d5e:	bf00      	nop
 8004d60:	20000b6c 	.word	0x20000b6c
 8004d64:	20001004 	.word	0x20001004
 8004d68:	200007fc 	.word	0x200007fc
 8004d6c:	20000c28 	.word	0x20000c28
 8004d70:	20000fe8 	.word	0x20000fe8

08004d74 <control_start>:
//control_start
// wallとgyroの姿勢制御を開始する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void control_start(){
 8004d74:	b480      	push	{r7}
 8004d76:	af00      	add	r7, sp, #0
	MF.FLAG.WCTRL = 1;										//wall制御を有効にする
 8004d78:	4a07      	ldr	r2, [pc, #28]	; (8004d98 <control_start+0x24>)
 8004d7a:	8813      	ldrh	r3, [r2, #0]
 8004d7c:	f043 0308 	orr.w	r3, r3, #8
 8004d80:	8013      	strh	r3, [r2, #0]
	MF.FLAG.GCTRL = 1;										//gyro制御を有効にする
 8004d82:	4a05      	ldr	r2, [pc, #20]	; (8004d98 <control_start+0x24>)
 8004d84:	8813      	ldrh	r3, [r2, #0]
 8004d86:	f043 0310 	orr.w	r3, r3, #16
 8004d8a:	8013      	strh	r3, [r2, #0]
}
 8004d8c:	bf00      	nop
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d94:	4770      	bx	lr
 8004d96:	bf00      	nop
 8004d98:	20000fe8 	.word	0x20000fe8

08004d9c <control_stop>:
//control_stop
// wallとgyroの姿勢制御を停止する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void control_stop(){
 8004d9c:	b480      	push	{r7}
 8004d9e:	af00      	add	r7, sp, #0
	MF.FLAG.WCTRL = 0;										//wall制御を無効にする
 8004da0:	4a07      	ldr	r2, [pc, #28]	; (8004dc0 <control_stop+0x24>)
 8004da2:	8813      	ldrh	r3, [r2, #0]
 8004da4:	f36f 03c3 	bfc	r3, #3, #1
 8004da8:	8013      	strh	r3, [r2, #0]
	MF.FLAG.GCTRL = 0;										//gyro制御を無効にする
 8004daa:	4a05      	ldr	r2, [pc, #20]	; (8004dc0 <control_stop+0x24>)
 8004dac:	8813      	ldrh	r3, [r2, #0]
 8004dae:	f36f 1304 	bfc	r3, #4, #1
 8004db2:	8013      	strh	r3, [r2, #0]
}
 8004db4:	bf00      	nop
 8004db6:	46bd      	mov	sp, r7
 8004db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dbc:	4770      	bx	lr
 8004dbe:	bf00      	nop
 8004dc0:	20000fe8 	.word	0x20000fe8

08004dc4 <drive_dir>:
//drive_dir
// wheel turn dir for each wheel
// 引数:1車輪選択(0=>L, 1=>R), 2回転方向選択(0=>CW, 1=>CWW, 2=>ShortBrake, 3=>free)
// 戻り値: なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void drive_dir(uint8_t wheel, uint8_t dir){
 8004dc4:	b580      	push	{r7, lr}
 8004dc6:	b082      	sub	sp, #8
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	4603      	mov	r3, r0
 8004dcc:	460a      	mov	r2, r1
 8004dce:	71fb      	strb	r3, [r7, #7]
 8004dd0:	4613      	mov	r3, r2
 8004dd2:	71bb      	strb	r3, [r7, #6]
	if(wheel == 0){
 8004dd4:	79fb      	ldrb	r3, [r7, #7]
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d13e      	bne.n	8004e58 <drive_dir+0x94>
		if(dir == 0){
 8004dda:	79bb      	ldrb	r3, [r7, #6]
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d10f      	bne.n	8004e00 <drive_dir+0x3c>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_SET);		//L_CW
 8004de0:	2201      	movs	r2, #1
 8004de2:	2120      	movs	r1, #32
 8004de4:	483f      	ldr	r0, [pc, #252]	; (8004ee4 <drive_dir+0x120>)
 8004de6:	f7fd fa8d 	bl	8002304 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET);	//L_CCW
 8004dea:	2200      	movs	r2, #0
 8004dec:	2110      	movs	r1, #16
 8004dee:	483d      	ldr	r0, [pc, #244]	; (8004ee4 <drive_dir+0x120>)
 8004df0:	f7fd fa88 	bl	8002304 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);		//STBY
 8004df4:	2201      	movs	r2, #1
 8004df6:	2101      	movs	r1, #1
 8004df8:	483b      	ldr	r0, [pc, #236]	; (8004ee8 <drive_dir+0x124>)
 8004dfa:	f7fd fa83 	bl	8002304 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);		//STBY
		}else{
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);	//STBY
		}
	}
}
 8004dfe:	e06c      	b.n	8004eda <drive_dir+0x116>
		}else if(dir == 1){
 8004e00:	79bb      	ldrb	r3, [r7, #6]
 8004e02:	2b01      	cmp	r3, #1
 8004e04:	d10f      	bne.n	8004e26 <drive_dir+0x62>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET);	//L_CW
 8004e06:	2200      	movs	r2, #0
 8004e08:	2120      	movs	r1, #32
 8004e0a:	4836      	ldr	r0, [pc, #216]	; (8004ee4 <drive_dir+0x120>)
 8004e0c:	f7fd fa7a 	bl	8002304 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_SET);		//L_CCW
 8004e10:	2201      	movs	r2, #1
 8004e12:	2110      	movs	r1, #16
 8004e14:	4833      	ldr	r0, [pc, #204]	; (8004ee4 <drive_dir+0x120>)
 8004e16:	f7fd fa75 	bl	8002304 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);		//STBY
 8004e1a:	2201      	movs	r2, #1
 8004e1c:	2101      	movs	r1, #1
 8004e1e:	4832      	ldr	r0, [pc, #200]	; (8004ee8 <drive_dir+0x124>)
 8004e20:	f7fd fa70 	bl	8002304 <HAL_GPIO_WritePin>
}
 8004e24:	e059      	b.n	8004eda <drive_dir+0x116>
		}else if(dir == 2){
 8004e26:	79bb      	ldrb	r3, [r7, #6]
 8004e28:	2b02      	cmp	r3, #2
 8004e2a:	d10f      	bne.n	8004e4c <drive_dir+0x88>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_SET);		//L_CW
 8004e2c:	2201      	movs	r2, #1
 8004e2e:	2120      	movs	r1, #32
 8004e30:	482c      	ldr	r0, [pc, #176]	; (8004ee4 <drive_dir+0x120>)
 8004e32:	f7fd fa67 	bl	8002304 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_SET);		//L_CCW
 8004e36:	2201      	movs	r2, #1
 8004e38:	2110      	movs	r1, #16
 8004e3a:	482a      	ldr	r0, [pc, #168]	; (8004ee4 <drive_dir+0x120>)
 8004e3c:	f7fd fa62 	bl	8002304 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);		//STBY
 8004e40:	2201      	movs	r2, #1
 8004e42:	2101      	movs	r1, #1
 8004e44:	4828      	ldr	r0, [pc, #160]	; (8004ee8 <drive_dir+0x124>)
 8004e46:	f7fd fa5d 	bl	8002304 <HAL_GPIO_WritePin>
}
 8004e4a:	e046      	b.n	8004eda <drive_dir+0x116>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);	//STBY
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	2101      	movs	r1, #1
 8004e50:	4825      	ldr	r0, [pc, #148]	; (8004ee8 <drive_dir+0x124>)
 8004e52:	f7fd fa57 	bl	8002304 <HAL_GPIO_WritePin>
}
 8004e56:	e040      	b.n	8004eda <drive_dir+0x116>
		if(dir == 0){
 8004e58:	79bb      	ldrb	r3, [r7, #6]
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d110      	bne.n	8004e80 <drive_dir+0xbc>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);		//R_CW
 8004e5e:	2201      	movs	r2, #1
 8004e60:	2102      	movs	r1, #2
 8004e62:	4821      	ldr	r0, [pc, #132]	; (8004ee8 <drive_dir+0x124>)
 8004e64:	f7fd fa4e 	bl	8002304 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);	//R_CCW
 8004e68:	2200      	movs	r2, #0
 8004e6a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004e6e:	481e      	ldr	r0, [pc, #120]	; (8004ee8 <drive_dir+0x124>)
 8004e70:	f7fd fa48 	bl	8002304 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);		//STBY
 8004e74:	2201      	movs	r2, #1
 8004e76:	2101      	movs	r1, #1
 8004e78:	481b      	ldr	r0, [pc, #108]	; (8004ee8 <drive_dir+0x124>)
 8004e7a:	f7fd fa43 	bl	8002304 <HAL_GPIO_WritePin>
}
 8004e7e:	e02c      	b.n	8004eda <drive_dir+0x116>
		}else if(dir == 1){
 8004e80:	79bb      	ldrb	r3, [r7, #6]
 8004e82:	2b01      	cmp	r3, #1
 8004e84:	d110      	bne.n	8004ea8 <drive_dir+0xe4>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);	//R_CW
 8004e86:	2200      	movs	r2, #0
 8004e88:	2102      	movs	r1, #2
 8004e8a:	4817      	ldr	r0, [pc, #92]	; (8004ee8 <drive_dir+0x124>)
 8004e8c:	f7fd fa3a 	bl	8002304 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);	//R_CCW
 8004e90:	2201      	movs	r2, #1
 8004e92:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004e96:	4814      	ldr	r0, [pc, #80]	; (8004ee8 <drive_dir+0x124>)
 8004e98:	f7fd fa34 	bl	8002304 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);		//STBY
 8004e9c:	2201      	movs	r2, #1
 8004e9e:	2101      	movs	r1, #1
 8004ea0:	4811      	ldr	r0, [pc, #68]	; (8004ee8 <drive_dir+0x124>)
 8004ea2:	f7fd fa2f 	bl	8002304 <HAL_GPIO_WritePin>
}
 8004ea6:	e018      	b.n	8004eda <drive_dir+0x116>
		}else if(dir == 2){
 8004ea8:	79bb      	ldrb	r3, [r7, #6]
 8004eaa:	2b02      	cmp	r3, #2
 8004eac:	d110      	bne.n	8004ed0 <drive_dir+0x10c>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);		//R_CW
 8004eae:	2201      	movs	r2, #1
 8004eb0:	2102      	movs	r1, #2
 8004eb2:	480d      	ldr	r0, [pc, #52]	; (8004ee8 <drive_dir+0x124>)
 8004eb4:	f7fd fa26 	bl	8002304 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);	//R_CCW
 8004eb8:	2201      	movs	r2, #1
 8004eba:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004ebe:	480a      	ldr	r0, [pc, #40]	; (8004ee8 <drive_dir+0x124>)
 8004ec0:	f7fd fa20 	bl	8002304 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);		//STBY
 8004ec4:	2201      	movs	r2, #1
 8004ec6:	2101      	movs	r1, #1
 8004ec8:	4807      	ldr	r0, [pc, #28]	; (8004ee8 <drive_dir+0x124>)
 8004eca:	f7fd fa1b 	bl	8002304 <HAL_GPIO_WritePin>
}
 8004ece:	e004      	b.n	8004eda <drive_dir+0x116>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);	//STBY
 8004ed0:	2200      	movs	r2, #0
 8004ed2:	2101      	movs	r1, #1
 8004ed4:	4804      	ldr	r0, [pc, #16]	; (8004ee8 <drive_dir+0x124>)
 8004ed6:	f7fd fa15 	bl	8002304 <HAL_GPIO_WritePin>
}
 8004eda:	bf00      	nop
 8004edc:	3708      	adds	r7, #8
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	bd80      	pop	{r7, pc}
 8004ee2:	bf00      	nop
 8004ee4:	40020800 	.word	0x40020800
 8004ee8:	40020400 	.word	0x40020400

08004eec <driveA>:
//driveA
// 指定距離、指定加速度で加速走行する
// 引数1：accel_p 加速度, 引数2：speed_min_p 最低速度, 引数3：speed_max_p 最高速度, 引数4：dist 走行距離
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void driveA(uint16_t accel_p, uint16_t speed_min_p, uint16_t speed_max_p, uint16_t dist){
 8004eec:	b590      	push	{r4, r7, lr}
 8004eee:	b083      	sub	sp, #12
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	4604      	mov	r4, r0
 8004ef4:	4608      	mov	r0, r1
 8004ef6:	4611      	mov	r1, r2
 8004ef8:	461a      	mov	r2, r3
 8004efa:	4623      	mov	r3, r4
 8004efc:	80fb      	strh	r3, [r7, #6]
 8004efe:	4603      	mov	r3, r0
 8004f00:	80bb      	strh	r3, [r7, #4]
 8004f02:	460b      	mov	r3, r1
 8004f04:	807b      	strh	r3, [r7, #2]
 8004f06:	4613      	mov	r3, r2
 8004f08:	803b      	strh	r3, [r7, #0]

	speed_min_l = speed_min_r = speed_min_p;
 8004f0a:	88bb      	ldrh	r3, [r7, #4]
 8004f0c:	ee07 3a90 	vmov	s15, r3
 8004f10:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f14:	4b25      	ldr	r3, [pc, #148]	; (8004fac <driveA+0xc0>)
 8004f16:	edc3 7a00 	vstr	s15, [r3]
 8004f1a:	4b25      	ldr	r3, [pc, #148]	; (8004fb0 <driveA+0xc4>)
 8004f1c:	edc3 7a00 	vstr	s15, [r3]
	speed_max_l = speed_max_r = speed_max_p;
 8004f20:	887b      	ldrh	r3, [r7, #2]
 8004f22:	ee07 3a90 	vmov	s15, r3
 8004f26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f2a:	4b22      	ldr	r3, [pc, #136]	; (8004fb4 <driveA+0xc8>)
 8004f2c:	edc3 7a00 	vstr	s15, [r3]
 8004f30:	4b21      	ldr	r3, [pc, #132]	; (8004fb8 <driveA+0xcc>)
 8004f32:	edc3 7a00 	vstr	s15, [r3]
	accel_l = accel_r = accel_p;							//引数の各パラメータをグローバル変数化
 8004f36:	88fb      	ldrh	r3, [r7, #6]
 8004f38:	ee07 3a90 	vmov	s15, r3
 8004f3c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f40:	4b1e      	ldr	r3, [pc, #120]	; (8004fbc <driveA+0xd0>)
 8004f42:	edc3 7a00 	vstr	s15, [r3]
 8004f46:	4b1e      	ldr	r3, [pc, #120]	; (8004fc0 <driveA+0xd4>)
 8004f48:	edc3 7a00 	vstr	s15, [r3]
	if(H_accel_flag == 1)target_speed_l = target_speed_r = speed_min_p;
 8004f4c:	4b1d      	ldr	r3, [pc, #116]	; (8004fc4 <driveA+0xd8>)
 8004f4e:	781b      	ldrb	r3, [r3, #0]
 8004f50:	2b01      	cmp	r3, #1
 8004f52:	d10a      	bne.n	8004f6a <driveA+0x7e>
 8004f54:	88bb      	ldrh	r3, [r7, #4]
 8004f56:	ee07 3a90 	vmov	s15, r3
 8004f5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f5e:	4b1a      	ldr	r3, [pc, #104]	; (8004fc8 <driveA+0xdc>)
 8004f60:	edc3 7a00 	vstr	s15, [r3]
 8004f64:	4b19      	ldr	r3, [pc, #100]	; (8004fcc <driveA+0xe0>)
 8004f66:	edc3 7a00 	vstr	s15, [r3]

	drive_start();											//走行開始
 8004f6a:	f7ff fead 	bl	8004cc8 <drive_start>

	//----走行----
	while((dist_l < dist) || (dist_r < dist));				//左右のモータが指定距離以上進むまで待機
 8004f6e:	bf00      	nop
 8004f70:	883b      	ldrh	r3, [r7, #0]
 8004f72:	ee07 3a90 	vmov	s15, r3
 8004f76:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004f7a:	4b15      	ldr	r3, [pc, #84]	; (8004fd0 <driveA+0xe4>)
 8004f7c:	edd3 7a00 	vldr	s15, [r3]
 8004f80:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004f84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f88:	dcf2      	bgt.n	8004f70 <driveA+0x84>
 8004f8a:	883b      	ldrh	r3, [r7, #0]
 8004f8c:	ee07 3a90 	vmov	s15, r3
 8004f90:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004f94:	4b0f      	ldr	r3, [pc, #60]	; (8004fd4 <driveA+0xe8>)
 8004f96:	edd3 7a00 	vldr	s15, [r3]
 8004f9a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004f9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004fa2:	dce5      	bgt.n	8004f70 <driveA+0x84>

//	drive_stop();
}
 8004fa4:	bf00      	nop
 8004fa6:	370c      	adds	r7, #12
 8004fa8:	46bd      	mov	sp, r7
 8004faa:	bd90      	pop	{r4, r7, pc}
 8004fac:	20000fec 	.word	0x20000fec
 8004fb0:	20000bd4 	.word	0x20000bd4
 8004fb4:	20000224 	.word	0x20000224
 8004fb8:	200007f8 	.word	0x200007f8
 8004fbc:	20000b64 	.word	0x20000b64
 8004fc0:	20000ddc 	.word	0x20000ddc
 8004fc4:	20000349 	.word	0x20000349
 8004fc8:	20000220 	.word	0x20000220
 8004fcc:	20000c80 	.word	0x20000c80
 8004fd0:	20001004 	.word	0x20001004
 8004fd4:	20000b6c 	.word	0x20000b6c

08004fd8 <driveD>:
//driveD
// 指定距離、指定減速度で減速走行する
// 引数1：accel_p 加速度, 引数2：speed_min_p 最低速度, 引数3：speed_max_p 最高速度, 引数4：dist 走行距離
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void driveD(int16_t accel_p, uint16_t speed_min_p, uint16_t speed_max_p, uint16_t dist){
 8004fd8:	b590      	push	{r4, r7, lr}
 8004fda:	b085      	sub	sp, #20
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	4604      	mov	r4, r0
 8004fe0:	4608      	mov	r0, r1
 8004fe2:	4611      	mov	r1, r2
 8004fe4:	461a      	mov	r2, r3
 8004fe6:	4623      	mov	r3, r4
 8004fe8:	80fb      	strh	r3, [r7, #6]
 8004fea:	4603      	mov	r3, r0
 8004fec:	80bb      	strh	r3, [r7, #4]
 8004fee:	460b      	mov	r3, r1
 8004ff0:	807b      	strh	r3, [r7, #2]
 8004ff2:	4613      	mov	r3, r2
 8004ff4:	803b      	strh	r3, [r7, #0]

	float speed_0 = speed_l;								//等速走行距離を計算するためにmain.cより参照
 8004ff6:	4b53      	ldr	r3, [pc, #332]	; (8005144 <driveD+0x16c>)
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	60fb      	str	r3, [r7, #12]
	speed_min_l = speed_min_r = speed_min_p;
 8004ffc:	88bb      	ldrh	r3, [r7, #4]
 8004ffe:	ee07 3a90 	vmov	s15, r3
 8005002:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005006:	4b50      	ldr	r3, [pc, #320]	; (8005148 <driveD+0x170>)
 8005008:	edc3 7a00 	vstr	s15, [r3]
 800500c:	4b4f      	ldr	r3, [pc, #316]	; (800514c <driveD+0x174>)
 800500e:	edc3 7a00 	vstr	s15, [r3]
	speed_max_l = speed_max_r = speed_max_p;
 8005012:	887b      	ldrh	r3, [r7, #2]
 8005014:	ee07 3a90 	vmov	s15, r3
 8005018:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800501c:	4b4c      	ldr	r3, [pc, #304]	; (8005150 <driveD+0x178>)
 800501e:	edc3 7a00 	vstr	s15, [r3]
 8005022:	4b4c      	ldr	r3, [pc, #304]	; (8005154 <driveD+0x17c>)
 8005024:	edc3 7a00 	vstr	s15, [r3]
	accel_l = accel_r = accel_p;							//引数の各パラメータをグローバル変数化
 8005028:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800502c:	ee07 3a90 	vmov	s15, r3
 8005030:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005034:	4b48      	ldr	r3, [pc, #288]	; (8005158 <driveD+0x180>)
 8005036:	edc3 7a00 	vstr	s15, [r3]
 800503a:	4b48      	ldr	r3, [pc, #288]	; (800515c <driveD+0x184>)
 800503c:	edc3 7a00 	vstr	s15, [r3]

	int16_t c_dist = dist - (speed_min_l*speed_min_l  - speed_0*speed_0)/(2*accel_l);			//等速走行距離 = 総距離 - 減速に必要な距離
 8005040:	883b      	ldrh	r3, [r7, #0]
 8005042:	ee07 3a90 	vmov	s15, r3
 8005046:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800504a:	4b40      	ldr	r3, [pc, #256]	; (800514c <driveD+0x174>)
 800504c:	edd3 6a00 	vldr	s13, [r3]
 8005050:	4b3e      	ldr	r3, [pc, #248]	; (800514c <driveD+0x174>)
 8005052:	edd3 7a00 	vldr	s15, [r3]
 8005056:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800505a:	ed97 6a03 	vldr	s12, [r7, #12]
 800505e:	edd7 7a03 	vldr	s15, [r7, #12]
 8005062:	ee66 7a27 	vmul.f32	s15, s12, s15
 8005066:	ee36 6ae7 	vsub.f32	s12, s13, s15
 800506a:	4b3c      	ldr	r3, [pc, #240]	; (800515c <driveD+0x184>)
 800506c:	edd3 7a00 	vldr	s15, [r3]
 8005070:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8005074:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8005078:	ee77 7a67 	vsub.f32	s15, s14, s15
 800507c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005080:	ee17 3a90 	vmov	r3, s15
 8005084:	817b      	strh	r3, [r7, #10]

	accel_l = accel_r = 0;
 8005086:	f04f 0300 	mov.w	r3, #0
 800508a:	4a33      	ldr	r2, [pc, #204]	; (8005158 <driveD+0x180>)
 800508c:	6013      	str	r3, [r2, #0]
 800508e:	4a33      	ldr	r2, [pc, #204]	; (800515c <driveD+0x184>)
 8005090:	6013      	str	r3, [r2, #0]
	dist_l = dist_r = 0;
 8005092:	f04f 0300 	mov.w	r3, #0
 8005096:	4a32      	ldr	r2, [pc, #200]	; (8005160 <driveD+0x188>)
 8005098:	6013      	str	r3, [r2, #0]
 800509a:	4a32      	ldr	r2, [pc, #200]	; (8005164 <driveD+0x18c>)
 800509c:	6013      	str	r3, [r2, #0]
	if(c_dist > 0){
 800509e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	dd1c      	ble.n	80050e0 <driveD+0x108>
		//----等速走行----
		while((dist_l < c_dist) || (dist_r < c_dist));	//a左右のモータが等速分の距離以上進むまで待機
 80050a6:	bf00      	nop
 80050a8:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80050ac:	ee07 3a90 	vmov	s15, r3
 80050b0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80050b4:	4b2b      	ldr	r3, [pc, #172]	; (8005164 <driveD+0x18c>)
 80050b6:	edd3 7a00 	vldr	s15, [r3]
 80050ba:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80050be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050c2:	dcf1      	bgt.n	80050a8 <driveD+0xd0>
 80050c4:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80050c8:	ee07 3a90 	vmov	s15, r3
 80050cc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80050d0:	4b23      	ldr	r3, [pc, #140]	; (8005160 <driveD+0x188>)
 80050d2:	edd3 7a00 	vldr	s15, [r3]
 80050d6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80050da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050de:	dce3      	bgt.n	80050a8 <driveD+0xd0>
	}
	accel_l = accel_r = accel_p;
 80050e0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80050e4:	ee07 3a90 	vmov	s15, r3
 80050e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80050ec:	4b1a      	ldr	r3, [pc, #104]	; (8005158 <driveD+0x180>)
 80050ee:	edc3 7a00 	vstr	s15, [r3]
 80050f2:	4b1a      	ldr	r3, [pc, #104]	; (800515c <driveD+0x184>)
 80050f4:	edc3 7a00 	vstr	s15, [r3]
	//----減速走行----
	while((dist_l < dist) || (dist_r < dist));			//a左右のモータが減速分の距離以上進むまで待機
 80050f8:	bf00      	nop
 80050fa:	883b      	ldrh	r3, [r7, #0]
 80050fc:	ee07 3a90 	vmov	s15, r3
 8005100:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005104:	4b17      	ldr	r3, [pc, #92]	; (8005164 <driveD+0x18c>)
 8005106:	edd3 7a00 	vldr	s15, [r3]
 800510a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800510e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005112:	dcf2      	bgt.n	80050fa <driveD+0x122>
 8005114:	883b      	ldrh	r3, [r7, #0]
 8005116:	ee07 3a90 	vmov	s15, r3
 800511a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800511e:	4b10      	ldr	r3, [pc, #64]	; (8005160 <driveD+0x188>)
 8005120:	edd3 7a00 	vldr	s15, [r3]
 8005124:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005128:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800512c:	dce5      	bgt.n	80050fa <driveD+0x122>

	if(H_accel_flag != 1)drive_stop();											//走行停止
 800512e:	4b0e      	ldr	r3, [pc, #56]	; (8005168 <driveD+0x190>)
 8005130:	781b      	ldrb	r3, [r3, #0]
 8005132:	2b01      	cmp	r3, #1
 8005134:	d001      	beq.n	800513a <driveD+0x162>
 8005136:	f7ff fdf5 	bl	8004d24 <drive_stop>
}
 800513a:	bf00      	nop
 800513c:	3714      	adds	r7, #20
 800513e:	46bd      	mov	sp, r7
 8005140:	bd90      	pop	{r4, r7, pc}
 8005142:	bf00      	nop
 8005144:	20000b70 	.word	0x20000b70
 8005148:	20000fec 	.word	0x20000fec
 800514c:	20000bd4 	.word	0x20000bd4
 8005150:	20000224 	.word	0x20000224
 8005154:	200007f8 	.word	0x200007f8
 8005158:	20000b64 	.word	0x20000b64
 800515c:	20000ddc 	.word	0x20000ddc
 8005160:	20000b6c 	.word	0x20000b6c
 8005164:	20001004 	.word	0x20001004
 8005168:	20000349 	.word	0x20000349

0800516c <driveU>:
//driveU
// 指定距離分等速走行して停止する
// 引数1：dist …… 走行距離
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void driveU(uint16_t dist){
 800516c:	b480      	push	{r7}
 800516e:	b083      	sub	sp, #12
 8005170:	af00      	add	r7, sp, #0
 8005172:	4603      	mov	r3, r0
 8005174:	80fb      	strh	r3, [r7, #6]

	accel_l = accel_r = 0;									//等速走行のため加速度は0
 8005176:	f04f 0300 	mov.w	r3, #0
 800517a:	4a28      	ldr	r2, [pc, #160]	; (800521c <driveU+0xb0>)
 800517c:	6013      	str	r3, [r2, #0]
 800517e:	4a28      	ldr	r2, [pc, #160]	; (8005220 <driveU+0xb4>)
 8005180:	6013      	str	r3, [r2, #0]
	dist_l = dist_r = 0;
 8005182:	f04f 0300 	mov.w	r3, #0
 8005186:	4a27      	ldr	r2, [pc, #156]	; (8005224 <driveU+0xb8>)
 8005188:	6013      	str	r3, [r2, #0]
 800518a:	4a27      	ldr	r2, [pc, #156]	; (8005228 <driveU+0xbc>)
 800518c:	6013      	str	r3, [r2, #0]

	//----走行----
	while((dist_l < dist) || (dist_r < dist)){				//左右のモータが指定パルス以上進むまで待機
 800518e:	e024      	b.n	80051da <driveU+0x6e>
		if(MF.FLAG.WEDGE == 1){
 8005190:	4b26      	ldr	r3, [pc, #152]	; (800522c <driveU+0xc0>)
 8005192:	881b      	ldrh	r3, [r3, #0]
 8005194:	f3c3 23c0 	ubfx	r3, r3, #11, #1
 8005198:	b2db      	uxtb	r3, r3
 800519a:	2b01      	cmp	r3, #1
 800519c:	d11d      	bne.n	80051da <driveU+0x6e>
			if(ad_l < WALL_BASE_L-30 || ad_r < WALL_BASE_R-10){
 800519e:	4b24      	ldr	r3, [pc, #144]	; (8005230 <driveU+0xc4>)
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	2b45      	cmp	r3, #69	; 0x45
 80051a4:	d903      	bls.n	80051ae <driveU+0x42>
 80051a6:	4b23      	ldr	r3, [pc, #140]	; (8005234 <driveU+0xc8>)
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	2b59      	cmp	r3, #89	; 0x59
 80051ac:	d815      	bhi.n	80051da <driveU+0x6e>
				while((dist_l < W_DIST) || (dist_r < W_DIST));	//左右のモータが壁切れ用指定距離以上進むまで待機
 80051ae:	bf00      	nop
 80051b0:	4b1d      	ldr	r3, [pc, #116]	; (8005228 <driveU+0xbc>)
 80051b2:	edd3 7a00 	vldr	s15, [r3]
 80051b6:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8005238 <driveU+0xcc>
 80051ba:	eef4 7ac7 	vcmpe.f32	s15, s14
 80051be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051c2:	d4f5      	bmi.n	80051b0 <driveU+0x44>
 80051c4:	4b17      	ldr	r3, [pc, #92]	; (8005224 <driveU+0xb8>)
 80051c6:	edd3 7a00 	vldr	s15, [r3]
 80051ca:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8005238 <driveU+0xcc>
 80051ce:	eef4 7ac7 	vcmpe.f32	s15, s14
 80051d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051d6:	d4eb      	bmi.n	80051b0 <driveU+0x44>
			break;
 80051d8:	e019      	b.n	800520e <driveU+0xa2>
	while((dist_l < dist) || (dist_r < dist)){				//左右のモータが指定パルス以上進むまで待機
 80051da:	88fb      	ldrh	r3, [r7, #6]
 80051dc:	ee07 3a90 	vmov	s15, r3
 80051e0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80051e4:	4b10      	ldr	r3, [pc, #64]	; (8005228 <driveU+0xbc>)
 80051e6:	edd3 7a00 	vldr	s15, [r3]
 80051ea:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80051ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051f2:	dccd      	bgt.n	8005190 <driveU+0x24>
 80051f4:	88fb      	ldrh	r3, [r7, #6]
 80051f6:	ee07 3a90 	vmov	s15, r3
 80051fa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80051fe:	4b09      	ldr	r3, [pc, #36]	; (8005224 <driveU+0xb8>)
 8005200:	edd3 7a00 	vldr	s15, [r3]
 8005204:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005208:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800520c:	dcc0      	bgt.n	8005190 <driveU+0x24>
			}
		}
	}
}
 800520e:	bf00      	nop
 8005210:	370c      	adds	r7, #12
 8005212:	46bd      	mov	sp, r7
 8005214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005218:	4770      	bx	lr
 800521a:	bf00      	nop
 800521c:	20000b64 	.word	0x20000b64
 8005220:	20000ddc 	.word	0x20000ddc
 8005224:	20000b6c 	.word	0x20000b6c
 8005228:	20001004 	.word	0x20001004
 800522c:	20000fe8 	.word	0x20000fe8
 8005230:	20000b7c 	.word	0x20000b7c
 8005234:	20000fe4 	.word	0x20000fe4
 8005238:	428c0000 	.word	0x428c0000

0800523c <driveC>:
//driveC
// 指定距離分デフォルト速度で走行して停止する
// 引数1：dist …… 走行距離
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void driveC(uint16_t dist){
 800523c:	b580      	push	{r7, lr}
 800523e:	b082      	sub	sp, #8
 8005240:	af00      	add	r7, sp, #0
 8005242:	4603      	mov	r3, r0
 8005244:	80fb      	strh	r3, [r7, #6]

	speed_min_l = speed_min_r = 150;
 8005246:	4b19      	ldr	r3, [pc, #100]	; (80052ac <driveC+0x70>)
 8005248:	4a19      	ldr	r2, [pc, #100]	; (80052b0 <driveC+0x74>)
 800524a:	6013      	str	r3, [r2, #0]
 800524c:	4a19      	ldr	r2, [pc, #100]	; (80052b4 <driveC+0x78>)
 800524e:	6013      	str	r3, [r2, #0]
	speed_max_l = speed_max_r = 150;
 8005250:	4b16      	ldr	r3, [pc, #88]	; (80052ac <driveC+0x70>)
 8005252:	4a19      	ldr	r2, [pc, #100]	; (80052b8 <driveC+0x7c>)
 8005254:	6013      	str	r3, [r2, #0]
 8005256:	4a19      	ldr	r2, [pc, #100]	; (80052bc <driveC+0x80>)
 8005258:	6013      	str	r3, [r2, #0]
	accel_l = accel_r = 0;												//等速走行のため加速度は0
 800525a:	f04f 0300 	mov.w	r3, #0
 800525e:	4a18      	ldr	r2, [pc, #96]	; (80052c0 <driveC+0x84>)
 8005260:	6013      	str	r3, [r2, #0]
 8005262:	4a18      	ldr	r2, [pc, #96]	; (80052c4 <driveC+0x88>)
 8005264:	6013      	str	r3, [r2, #0]

	drive_start();											//走行開始
 8005266:	f7ff fd2f 	bl	8004cc8 <drive_start>
//	MF.FLAG.LOG = 1;
	//====回転====
	while((dist_l < dist) || (dist_r < dist));			//左右のモータが定速分の距離以上進むまで待機
 800526a:	bf00      	nop
 800526c:	88fb      	ldrh	r3, [r7, #6]
 800526e:	ee07 3a90 	vmov	s15, r3
 8005272:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005276:	4b14      	ldr	r3, [pc, #80]	; (80052c8 <driveC+0x8c>)
 8005278:	edd3 7a00 	vldr	s15, [r3]
 800527c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005280:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005284:	dcf2      	bgt.n	800526c <driveC+0x30>
 8005286:	88fb      	ldrh	r3, [r7, #6]
 8005288:	ee07 3a90 	vmov	s15, r3
 800528c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005290:	4b0e      	ldr	r3, [pc, #56]	; (80052cc <driveC+0x90>)
 8005292:	edd3 7a00 	vldr	s15, [r3]
 8005296:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800529a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800529e:	dce5      	bgt.n	800526c <driveC+0x30>

	drive_stop();											//走行停止
 80052a0:	f7ff fd40 	bl	8004d24 <drive_stop>
	for(int i=0; i<log_allay; i++){
		printf("r:	%d\n", get_speed_r[i]);
		HAL_Delay(5);
	}
*/
}
 80052a4:	bf00      	nop
 80052a6:	3708      	adds	r7, #8
 80052a8:	46bd      	mov	sp, r7
 80052aa:	bd80      	pop	{r7, pc}
 80052ac:	43160000 	.word	0x43160000
 80052b0:	20000fec 	.word	0x20000fec
 80052b4:	20000bd4 	.word	0x20000bd4
 80052b8:	20000224 	.word	0x20000224
 80052bc:	200007f8 	.word	0x200007f8
 80052c0:	20000b64 	.word	0x20000b64
 80052c4:	20000ddc 	.word	0x20000ddc
 80052c8:	20001004 	.word	0x20001004
 80052cc:	20000b6c 	.word	0x20000b6c

080052d0 <driveC2>:
//driveC2
// 指定距離分デフォルト逆回転速度で走行して停止する
// 引数1：dist …… 走行距離
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void driveC2(uint16_t dist){
 80052d0:	b580      	push	{r7, lr}
 80052d2:	b082      	sub	sp, #8
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	4603      	mov	r3, r0
 80052d8:	80fb      	strh	r3, [r7, #6]

	speed_min_l = speed_min_r = -250;
 80052da:	4b1a      	ldr	r3, [pc, #104]	; (8005344 <driveC2+0x74>)
 80052dc:	4a1a      	ldr	r2, [pc, #104]	; (8005348 <driveC2+0x78>)
 80052de:	6013      	str	r3, [r2, #0]
 80052e0:	4a1a      	ldr	r2, [pc, #104]	; (800534c <driveC2+0x7c>)
 80052e2:	6013      	str	r3, [r2, #0]
	speed_max_l = speed_max_r = -250;
 80052e4:	4b17      	ldr	r3, [pc, #92]	; (8005344 <driveC2+0x74>)
 80052e6:	4a1a      	ldr	r2, [pc, #104]	; (8005350 <driveC2+0x80>)
 80052e8:	6013      	str	r3, [r2, #0]
 80052ea:	4a1a      	ldr	r2, [pc, #104]	; (8005354 <driveC2+0x84>)
 80052ec:	6013      	str	r3, [r2, #0]
	accel_l = accel_r = 0;									//等速走行のため加速度は0
 80052ee:	f04f 0300 	mov.w	r3, #0
 80052f2:	4a19      	ldr	r2, [pc, #100]	; (8005358 <driveC2+0x88>)
 80052f4:	6013      	str	r3, [r2, #0]
 80052f6:	4a19      	ldr	r2, [pc, #100]	; (800535c <driveC2+0x8c>)
 80052f8:	6013      	str	r3, [r2, #0]

	drive_start();											//走行開始
 80052fa:	f7ff fce5 	bl	8004cc8 <drive_start>
//	MF.FLAG.LOG = 1;
	//====回転====
	while((dist_l > (-1*dist)) || (dist_r > (-1*dist)));	//左右のモータが定速分の逆走距離以上進むまで待機
 80052fe:	bf00      	nop
 8005300:	88fb      	ldrh	r3, [r7, #6]
 8005302:	425b      	negs	r3, r3
 8005304:	ee07 3a90 	vmov	s15, r3
 8005308:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800530c:	4b14      	ldr	r3, [pc, #80]	; (8005360 <driveC2+0x90>)
 800530e:	edd3 7a00 	vldr	s15, [r3]
 8005312:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005316:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800531a:	d4f1      	bmi.n	8005300 <driveC2+0x30>
 800531c:	88fb      	ldrh	r3, [r7, #6]
 800531e:	425b      	negs	r3, r3
 8005320:	ee07 3a90 	vmov	s15, r3
 8005324:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005328:	4b0e      	ldr	r3, [pc, #56]	; (8005364 <driveC2+0x94>)
 800532a:	edd3 7a00 	vldr	s15, [r3]
 800532e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005332:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005336:	d4e3      	bmi.n	8005300 <driveC2+0x30>

	drive_stop();											//走行停止
 8005338:	f7ff fcf4 	bl	8004d24 <drive_stop>
	for(int i=0; i<log_allay; i++){
		printf("r:	%d\n", get_speed_r[i]);
		HAL_Delay(5);
	}
*/
}
 800533c:	bf00      	nop
 800533e:	3708      	adds	r7, #8
 8005340:	46bd      	mov	sp, r7
 8005342:	bd80      	pop	{r7, pc}
 8005344:	c37a0000 	.word	0xc37a0000
 8005348:	20000fec 	.word	0x20000fec
 800534c:	20000bd4 	.word	0x20000bd4
 8005350:	20000224 	.word	0x20000224
 8005354:	200007f8 	.word	0x200007f8
 8005358:	20000b64 	.word	0x20000b64
 800535c:	20000ddc 	.word	0x20000ddc
 8005360:	20001004 	.word	0x20001004
 8005364:	20000b6c 	.word	0x20000b6c

08005368 <set_position>:
//set_position
// 機体の尻を壁に当てて場所を区画中央に合わせる
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void set_position(){
 8005368:	b580      	push	{r7, lr}
 800536a:	af00      	add	r7, sp, #0

  driveC2(SETPOS_BACK);         //尻を当てる程度に後退。回転後に停止する
 800536c:	2096      	movs	r0, #150	; 0x96
 800536e:	f7ff ffaf 	bl	80052d0 <driveC2>
  degree_z = target_degree_z;
 8005372:	4b04      	ldr	r3, [pc, #16]	; (8005384 <set_position+0x1c>)
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	4a04      	ldr	r2, [pc, #16]	; (8005388 <set_position+0x20>)
 8005378:	6013      	str	r3, [r2, #0]
  driveC(SETPOS_SET);           //デフォルト速度で区画中心になる分回転。回転後に停止する
 800537a:	2023      	movs	r0, #35	; 0x23
 800537c:	f7ff ff5e 	bl	800523c <driveC>
}
 8005380:	bf00      	nop
 8005382:	bd80      	pop	{r7, pc}
 8005384:	20000c7c 	.word	0x20000c7c
 8005388:	20000bdc 	.word	0x20000bdc

0800538c <start_sectionA>:
//start_sectionA
// スタート区画分加速しながら走行する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void start_sectionA(void){
 800538c:	b580      	push	{r7, lr}
 800538e:	af00      	add	r7, sp, #0

	control_start();
 8005390:	f7ff fcf0 	bl	8004d74 <control_start>
	if(start_flag == 0){
 8005394:	4b11      	ldr	r3, [pc, #68]	; (80053dc <start_sectionA+0x50>)
 8005396:	781b      	ldrb	r3, [r3, #0]
 8005398:	b2db      	uxtb	r3, r3
 800539a:	2b00      	cmp	r3, #0
 800539c:	d108      	bne.n	80053b0 <start_sectionA+0x24>
		driveA(4000, SPEED_MIN, SPEED_RUN, SEC_START);					//スタート区画分加速しながら走行。走行後は停止しない
 800539e:	237d      	movs	r3, #125	; 0x7d
 80053a0:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80053a4:	2164      	movs	r1, #100	; 0x64
 80053a6:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 80053aa:	f7ff fd9f 	bl	8004eec <driveA>
 80053ae:	e007      	b.n	80053c0 <start_sectionA+0x34>
	}else{
		driveA(4000, SPEED_MIN, SPEED_RUN, SEC_HALF);					//半区画分加速しながら走行。走行後は停止しない
 80053b0:	235a      	movs	r3, #90	; 0x5a
 80053b2:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80053b6:	2164      	movs	r1, #100	; 0x64
 80053b8:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 80053bc:	f7ff fd96 	bl	8004eec <driveA>
	}
	start_flag = 1;
 80053c0:	4b06      	ldr	r3, [pc, #24]	; (80053dc <start_sectionA+0x50>)
 80053c2:	2201      	movs	r2, #1
 80053c4:	701a      	strb	r2, [r3, #0]
	if(MF.FLAG.SCND == 0)get_wall_info();								//壁情報を取得，片壁制御の有効・無効の判断
 80053c6:	4b06      	ldr	r3, [pc, #24]	; (80053e0 <start_sectionA+0x54>)
 80053c8:	881b      	ldrh	r3, [r3, #0]
 80053ca:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80053ce:	b2db      	uxtb	r3, r3
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d101      	bne.n	80053d8 <start_sectionA+0x4c>
 80053d4:	f008 f8fc 	bl	800d5d0 <get_wall_info>
}
 80053d8:	bf00      	nop
 80053da:	bd80      	pop	{r7, pc}
 80053dc:	20001008 	.word	0x20001008
 80053e0:	20000fe8 	.word	0x20000fe8

080053e4 <half_sectionA>:
//half_sectionA
// 半区画分加速しながら走行する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void half_sectionA(void){
 80053e4:	b580      	push	{r7, lr}
 80053e6:	af00      	add	r7, sp, #0

	control_start();
 80053e8:	f7ff fcc4 	bl	8004d74 <control_start>
	driveA(4000, SPEED_MIN, SPEED_RUN, SEC_HALF);						//半区画分加速しながら走行。走行後は停止しない
 80053ec:	235a      	movs	r3, #90	; 0x5a
 80053ee:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80053f2:	2164      	movs	r1, #100	; 0x64
 80053f4:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 80053f8:	f7ff fd78 	bl	8004eec <driveA>
	if(MF.FLAG.SCND == 0)get_wall_info();								//壁情報を取得，片壁制御の有効・無効の判断
 80053fc:	4b05      	ldr	r3, [pc, #20]	; (8005414 <half_sectionA+0x30>)
 80053fe:	881b      	ldrh	r3, [r3, #0]
 8005400:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8005404:	b2db      	uxtb	r3, r3
 8005406:	2b00      	cmp	r3, #0
 8005408:	d101      	bne.n	800540e <half_sectionA+0x2a>
 800540a:	f008 f8e1 	bl	800d5d0 <get_wall_info>
}
 800540e:	bf00      	nop
 8005410:	bd80      	pop	{r7, pc}
 8005412:	bf00      	nop
 8005414:	20000fe8 	.word	0x20000fe8

08005418 <half_sectionD>:
//half_sectionD
// 半区画分減速しながら走行し停止する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void half_sectionD(void){
 8005418:	b580      	push	{r7, lr}
 800541a:	af00      	add	r7, sp, #0

	control_start();
 800541c:	f7ff fcaa 	bl	8004d74 <control_start>
	driveD(-4000, SPEED_MIN, SPEED_RUN, SEC_HALF);						//半区画分指定減速度で減速走行。走行後は停止する
 8005420:	235a      	movs	r3, #90	; 0x5a
 8005422:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8005426:	2164      	movs	r1, #100	; 0x64
 8005428:	4802      	ldr	r0, [pc, #8]	; (8005434 <half_sectionD+0x1c>)
 800542a:	f7ff fdd5 	bl	8004fd8 <driveD>
}
 800542e:	bf00      	nop
 8005430:	bd80      	pop	{r7, pc}
 8005432:	bf00      	nop
 8005434:	fffff060 	.word	0xfffff060

08005438 <start_sectionA2>:
//start_sectionA2
// スタート区画分加速しながら走行する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void start_sectionA2(void){
 8005438:	b580      	push	{r7, lr}
 800543a:	af00      	add	r7, sp, #0

	control_start();
 800543c:	f7ff fc9a 	bl	8004d74 <control_start>
	if(start_flag == 0){
 8005440:	4b11      	ldr	r3, [pc, #68]	; (8005488 <start_sectionA2+0x50>)
 8005442:	781b      	ldrb	r3, [r3, #0]
 8005444:	b2db      	uxtb	r3, r3
 8005446:	2b00      	cmp	r3, #0
 8005448:	d108      	bne.n	800545c <start_sectionA2+0x24>
		driveA(8000, SPEED_MIN, SPEED_HIGH, SEC_START);					//スタート区画分加速しながら走行。走行後は停止しない
 800544a:	237d      	movs	r3, #125	; 0x7d
 800544c:	f44f 7248 	mov.w	r2, #800	; 0x320
 8005450:	2164      	movs	r1, #100	; 0x64
 8005452:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 8005456:	f7ff fd49 	bl	8004eec <driveA>
 800545a:	e007      	b.n	800546c <start_sectionA2+0x34>
	}else{
		driveA(8000, SPEED_MIN, SPEED_HIGH, SEC_HALF);					//半区画分加速しながら走行。走行後は停止しない
 800545c:	235a      	movs	r3, #90	; 0x5a
 800545e:	f44f 7248 	mov.w	r2, #800	; 0x320
 8005462:	2164      	movs	r1, #100	; 0x64
 8005464:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 8005468:	f7ff fd40 	bl	8004eec <driveA>
	}
	start_flag = 1;
 800546c:	4b06      	ldr	r3, [pc, #24]	; (8005488 <start_sectionA2+0x50>)
 800546e:	2201      	movs	r2, #1
 8005470:	701a      	strb	r2, [r3, #0]
	if(MF.FLAG.SCND == 0)get_wall_info();								//壁情報を取得，片壁制御の有効・無効の判断
 8005472:	4b06      	ldr	r3, [pc, #24]	; (800548c <start_sectionA2+0x54>)
 8005474:	881b      	ldrh	r3, [r3, #0]
 8005476:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800547a:	b2db      	uxtb	r3, r3
 800547c:	2b00      	cmp	r3, #0
 800547e:	d101      	bne.n	8005484 <start_sectionA2+0x4c>
 8005480:	f008 f8a6 	bl	800d5d0 <get_wall_info>
}
 8005484:	bf00      	nop
 8005486:	bd80      	pop	{r7, pc}
 8005488:	20001008 	.word	0x20001008
 800548c:	20000fe8 	.word	0x20000fe8

08005490 <half_sectionA2>:
//half_sectionA2
// 半区画分加速しながら走行する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void half_sectionA2(void){
 8005490:	b580      	push	{r7, lr}
 8005492:	af00      	add	r7, sp, #0
	full_led_write(1);
 8005494:	2001      	movs	r0, #1
 8005496:	f008 f90f 	bl	800d6b8 <full_led_write>
	control_start();
 800549a:	f7ff fc6b 	bl	8004d74 <control_start>
	driveA(8000, SPEED_MIN, SPEED_HIGH, SEC_HALF);						//半区画分加速しながら走行。走行後は停止しない
 800549e:	235a      	movs	r3, #90	; 0x5a
 80054a0:	f44f 7248 	mov.w	r2, #800	; 0x320
 80054a4:	2164      	movs	r1, #100	; 0x64
 80054a6:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 80054aa:	f7ff fd1f 	bl	8004eec <driveA>
	if(MF.FLAG.SCND == 0)get_wall_info();								//壁情報を取得，片壁制御の有効・無効の判断
 80054ae:	4b05      	ldr	r3, [pc, #20]	; (80054c4 <half_sectionA2+0x34>)
 80054b0:	881b      	ldrh	r3, [r3, #0]
 80054b2:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80054b6:	b2db      	uxtb	r3, r3
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d101      	bne.n	80054c0 <half_sectionA2+0x30>
 80054bc:	f008 f888 	bl	800d5d0 <get_wall_info>
}
 80054c0:	bf00      	nop
 80054c2:	bd80      	pop	{r7, pc}
 80054c4:	20000fe8 	.word	0x20000fe8

080054c8 <half_sectionD2>:
//half_sectionD2
// 半区画分減速しながら走行し停止する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void half_sectionD2(void){
 80054c8:	b580      	push	{r7, lr}
 80054ca:	af00      	add	r7, sp, #0
	full_led_write(3);
 80054cc:	2003      	movs	r0, #3
 80054ce:	f008 f8f3 	bl	800d6b8 <full_led_write>
	control_start();
 80054d2:	f7ff fc4f 	bl	8004d74 <control_start>
	driveD(-8000, SPEED_MIN, SPEED_HIGH, SEC_HALF);						//半区画分指定減速度で減速走行。走行後は停止する
 80054d6:	235a      	movs	r3, #90	; 0x5a
 80054d8:	f44f 7248 	mov.w	r2, #800	; 0x320
 80054dc:	2164      	movs	r1, #100	; 0x64
 80054de:	4802      	ldr	r0, [pc, #8]	; (80054e8 <half_sectionD2+0x20>)
 80054e0:	f7ff fd7a 	bl	8004fd8 <driveD>
}
 80054e4:	bf00      	nop
 80054e6:	bd80      	pop	{r7, pc}
 80054e8:	ffffe0c0 	.word	0xffffe0c0

080054ec <half_sectionA3>:
//half_sectionA3
// 半区画分加速しながら走行する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void half_sectionA3(void){
 80054ec:	b580      	push	{r7, lr}
 80054ee:	af00      	add	r7, sp, #0
	full_led_write(1);
 80054f0:	2001      	movs	r0, #1
 80054f2:	f008 f8e1 	bl	800d6b8 <full_led_write>
	control_start();
 80054f6:	f7ff fc3d 	bl	8004d74 <control_start>
	driveA(10000, SPEED_MIN, SPEED_HIGH_HIGH, SEC_HALF);				//半区画分加速しながら走行。走行後は停止しない
 80054fa:	235a      	movs	r3, #90	; 0x5a
 80054fc:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8005500:	2164      	movs	r1, #100	; 0x64
 8005502:	f242 7010 	movw	r0, #10000	; 0x2710
 8005506:	f7ff fcf1 	bl	8004eec <driveA>
	if(MF.FLAG.SCND == 0)get_wall_info();								//壁情報を取得，片壁制御の有効・無効の判断
 800550a:	4b05      	ldr	r3, [pc, #20]	; (8005520 <half_sectionA3+0x34>)
 800550c:	881b      	ldrh	r3, [r3, #0]
 800550e:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8005512:	b2db      	uxtb	r3, r3
 8005514:	2b00      	cmp	r3, #0
 8005516:	d101      	bne.n	800551c <half_sectionA3+0x30>
 8005518:	f008 f85a 	bl	800d5d0 <get_wall_info>
}
 800551c:	bf00      	nop
 800551e:	bd80      	pop	{r7, pc}
 8005520:	20000fe8 	.word	0x20000fe8

08005524 <half_sectionD3>:
//half_sectionD3
// 半区画分減速しながら走行し停止する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void half_sectionD3(void){
 8005524:	b580      	push	{r7, lr}
 8005526:	af00      	add	r7, sp, #0
	full_led_write(3);
 8005528:	2003      	movs	r0, #3
 800552a:	f008 f8c5 	bl	800d6b8 <full_led_write>
	control_start();
 800552e:	f7ff fc21 	bl	8004d74 <control_start>
	driveD(-10000, SPEED_MIN, SPEED_HIGH_HIGH, SEC_HALF);						//半区画分指定減速度で減速走行。走行後は停止する
 8005532:	235a      	movs	r3, #90	; 0x5a
 8005534:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8005538:	2164      	movs	r1, #100	; 0x64
 800553a:	4802      	ldr	r0, [pc, #8]	; (8005544 <half_sectionD3+0x20>)
 800553c:	f7ff fd4c 	bl	8004fd8 <driveD>
}
 8005540:	bf00      	nop
 8005542:	bd80      	pop	{r7, pc}
 8005544:	ffffd8f0 	.word	0xffffd8f0

08005548 <half_sectionU>:
//half_sectionU
// 等速で半区画分進む
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void half_sectionU(void){
 8005548:	b580      	push	{r7, lr}
 800554a:	af00      	add	r7, sp, #0
	full_led_write(7);
 800554c:	2007      	movs	r0, #7
 800554e:	f008 f8b3 	bl	800d6b8 <full_led_write>
	control_start();
 8005552:	f7ff fc0f 	bl	8004d74 <control_start>
	driveU(SEC_HALF);													//半区画分等速走行。走行後は停止しない
 8005556:	205a      	movs	r0, #90	; 0x5a
 8005558:	f7ff fe08 	bl	800516c <driveU>
}
 800555c:	bf00      	nop
 800555e:	bd80      	pop	{r7, pc}

08005560 <one_section>:
//one_section
// 1区画分進んで停止する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void one_section(void){
 8005560:	b580      	push	{r7, lr}
 8005562:	af00      	add	r7, sp, #0

	half_sectionA();													//半区画分加速走行
 8005564:	f7ff ff3e 	bl	80053e4 <half_sectionA>
	half_sectionD();													//半区画分減速走行のち停止
 8005568:	f7ff ff56 	bl	8005418 <half_sectionD>
}
 800556c:	bf00      	nop
 800556e:	bd80      	pop	{r7, pc}

08005570 <one_sectionA>:
//one_sectionA
// 1区画分加速する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void one_sectionA(void){
 8005570:	b580      	push	{r7, lr}
 8005572:	af00      	add	r7, sp, #0
	full_led_write(5);
 8005574:	2005      	movs	r0, #5
 8005576:	f008 f89f 	bl	800d6b8 <full_led_write>
	control_start();
 800557a:	f7ff fbfb 	bl	8004d74 <control_start>
	driveA(accel_hs, SPEED_RUN, speed_max_hs, SEC_HALF*2);				//1区画分加速走行。走行後は停止しない
 800557e:	4b0c      	ldr	r3, [pc, #48]	; (80055b0 <one_sectionA+0x40>)
 8005580:	881b      	ldrh	r3, [r3, #0]
 8005582:	b21b      	sxth	r3, r3
 8005584:	b298      	uxth	r0, r3
 8005586:	4b0b      	ldr	r3, [pc, #44]	; (80055b4 <one_sectionA+0x44>)
 8005588:	881b      	ldrh	r3, [r3, #0]
 800558a:	b21b      	sxth	r3, r3
 800558c:	b29a      	uxth	r2, r3
 800558e:	23b4      	movs	r3, #180	; 0xb4
 8005590:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8005594:	f7ff fcaa 	bl	8004eec <driveA>
	if(MF.FLAG.SCND == 0)get_wall_info();								//壁情報を取得，片壁制御の有効・無効の判断
 8005598:	4b07      	ldr	r3, [pc, #28]	; (80055b8 <one_sectionA+0x48>)
 800559a:	881b      	ldrh	r3, [r3, #0]
 800559c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80055a0:	b2db      	uxtb	r3, r3
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d101      	bne.n	80055aa <one_sectionA+0x3a>
 80055a6:	f008 f813 	bl	800d5d0 <get_wall_info>
}
 80055aa:	bf00      	nop
 80055ac:	bd80      	pop	{r7, pc}
 80055ae:	bf00      	nop
 80055b0:	200004d4 	.word	0x200004d4
 80055b4:	20000ffc 	.word	0x20000ffc
 80055b8:	20000fe8 	.word	0x20000fe8

080055bc <one_sectionD>:
//one_sectionD
// 1区画分減速する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void one_sectionD(void){
 80055bc:	b580      	push	{r7, lr}
 80055be:	af00      	add	r7, sp, #0
	full_led_write(2);
 80055c0:	2002      	movs	r0, #2
 80055c2:	f008 f879 	bl	800d6b8 <full_led_write>
	control_start();
 80055c6:	f7ff fbd5 	bl	8004d74 <control_start>
	driveD(-1*accel_hs, SPEED_RUN, speed_max_hs, SEC_HALF*2);			//1区画分減速走行。走行後は停止しない
 80055ca:	4b0d      	ldr	r3, [pc, #52]	; (8005600 <one_sectionD+0x44>)
 80055cc:	881b      	ldrh	r3, [r3, #0]
 80055ce:	b21b      	sxth	r3, r3
 80055d0:	b29b      	uxth	r3, r3
 80055d2:	425b      	negs	r3, r3
 80055d4:	b29b      	uxth	r3, r3
 80055d6:	b218      	sxth	r0, r3
 80055d8:	4b0a      	ldr	r3, [pc, #40]	; (8005604 <one_sectionD+0x48>)
 80055da:	881b      	ldrh	r3, [r3, #0]
 80055dc:	b21b      	sxth	r3, r3
 80055de:	b29a      	uxth	r2, r3
 80055e0:	23b4      	movs	r3, #180	; 0xb4
 80055e2:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80055e6:	f7ff fcf7 	bl	8004fd8 <driveD>
	if(MF.FLAG.SCND == 0)get_wall_info();								//壁情報を取得，片壁制御の有効・無効の判断
 80055ea:	4b07      	ldr	r3, [pc, #28]	; (8005608 <one_sectionD+0x4c>)
 80055ec:	881b      	ldrh	r3, [r3, #0]
 80055ee:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80055f2:	b2db      	uxtb	r3, r3
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d101      	bne.n	80055fc <one_sectionD+0x40>
 80055f8:	f007 ffea 	bl	800d5d0 <get_wall_info>
}
 80055fc:	bf00      	nop
 80055fe:	bd80      	pop	{r7, pc}
 8005600:	200004d4 	.word	0x200004d4
 8005604:	20000ffc 	.word	0x20000ffc
 8005608:	20000fe8 	.word	0x20000fe8

0800560c <one_sectionU>:
//one_sectionU
// 等速で1区画分進む
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void one_sectionU(void){
 800560c:	b580      	push	{r7, lr}
 800560e:	af00      	add	r7, sp, #0
	full_led_write(7);
 8005610:	2007      	movs	r0, #7
 8005612:	f008 f851 	bl	800d6b8 <full_led_write>
	control_start();
 8005616:	f7ff fbad 	bl	8004d74 <control_start>
	driveU(SEC_HALF*2);													//1区画分等速走行。走行後は停止しない
 800561a:	20b4      	movs	r0, #180	; 0xb4
 800561c:	f7ff fda6 	bl	800516c <driveU>
	if(MF.FLAG.SCND == 0)get_wall_info();								//壁情報を取得
 8005620:	4b05      	ldr	r3, [pc, #20]	; (8005638 <one_sectionU+0x2c>)
 8005622:	881b      	ldrh	r3, [r3, #0]
 8005624:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8005628:	b2db      	uxtb	r3, r3
 800562a:	2b00      	cmp	r3, #0
 800562c:	d101      	bne.n	8005632 <one_sectionU+0x26>
 800562e:	f007 ffcf 	bl	800d5d0 <get_wall_info>
}
 8005632:	bf00      	nop
 8005634:	bd80      	pop	{r7, pc}
 8005636:	bf00      	nop
 8005638:	20000fe8 	.word	0x20000fe8
 800563c:	00000000 	.word	0x00000000

08005640 <rotate_R90>:
//rotate_R90
// 右に90度回転する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void rotate_R90(void){
 8005640:	b598      	push	{r3, r4, r7, lr}
 8005642:	af00      	add	r7, sp, #0
	target_omega_z = 800;
 8005644:	4b50      	ldr	r3, [pc, #320]	; (8005788 <rotate_R90+0x148>)
 8005646:	4a51      	ldr	r2, [pc, #324]	; (800578c <rotate_R90+0x14c>)
 8005648:	601a      	str	r2, [r3, #0]
	accel_l = 3000;
 800564a:	4b51      	ldr	r3, [pc, #324]	; (8005790 <rotate_R90+0x150>)
 800564c:	4a51      	ldr	r2, [pc, #324]	; (8005794 <rotate_R90+0x154>)
 800564e:	601a      	str	r2, [r3, #0]
	accel_r = -3000;
 8005650:	4b51      	ldr	r3, [pc, #324]	; (8005798 <rotate_R90+0x158>)
 8005652:	4a52      	ldr	r2, [pc, #328]	; (800579c <rotate_R90+0x15c>)
 8005654:	601a      	str	r2, [r3, #0]
	speed_max_l = target_omega_z/180*M_PI * TREAD/2;
 8005656:	4b4c      	ldr	r3, [pc, #304]	; (8005788 <rotate_R90+0x148>)
 8005658:	edd3 7a00 	vldr	s15, [r3]
 800565c:	ed9f 7a50 	vldr	s14, [pc, #320]	; 80057a0 <rotate_R90+0x160>
 8005660:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8005664:	ee16 0a90 	vmov	r0, s13
 8005668:	f7fa ff66 	bl	8000538 <__aeabi_f2d>
 800566c:	a344      	add	r3, pc, #272	; (adr r3, 8005780 <rotate_R90+0x140>)
 800566e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005672:	f7fa ffb9 	bl	80005e8 <__aeabi_dmul>
 8005676:	4603      	mov	r3, r0
 8005678:	460c      	mov	r4, r1
 800567a:	4618      	mov	r0, r3
 800567c:	4621      	mov	r1, r4
 800567e:	f04f 0200 	mov.w	r2, #0
 8005682:	4b48      	ldr	r3, [pc, #288]	; (80057a4 <rotate_R90+0x164>)
 8005684:	f7fa ffb0 	bl	80005e8 <__aeabi_dmul>
 8005688:	4603      	mov	r3, r0
 800568a:	460c      	mov	r4, r1
 800568c:	4618      	mov	r0, r3
 800568e:	4621      	mov	r1, r4
 8005690:	f04f 0200 	mov.w	r2, #0
 8005694:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005698:	f7fb f8d0 	bl	800083c <__aeabi_ddiv>
 800569c:	4603      	mov	r3, r0
 800569e:	460c      	mov	r4, r1
 80056a0:	4618      	mov	r0, r3
 80056a2:	4621      	mov	r1, r4
 80056a4:	f7fb fa78 	bl	8000b98 <__aeabi_d2f>
 80056a8:	4602      	mov	r2, r0
 80056aa:	4b3f      	ldr	r3, [pc, #252]	; (80057a8 <rotate_R90+0x168>)
 80056ac:	601a      	str	r2, [r3, #0]
	speed_min_r = -1*target_omega_z/180*M_PI * TREAD/2;
 80056ae:	4b36      	ldr	r3, [pc, #216]	; (8005788 <rotate_R90+0x148>)
 80056b0:	edd3 7a00 	vldr	s15, [r3]
 80056b4:	eef1 7a67 	vneg.f32	s15, s15
 80056b8:	ed9f 7a39 	vldr	s14, [pc, #228]	; 80057a0 <rotate_R90+0x160>
 80056bc:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80056c0:	ee16 0a90 	vmov	r0, s13
 80056c4:	f7fa ff38 	bl	8000538 <__aeabi_f2d>
 80056c8:	a32d      	add	r3, pc, #180	; (adr r3, 8005780 <rotate_R90+0x140>)
 80056ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056ce:	f7fa ff8b 	bl	80005e8 <__aeabi_dmul>
 80056d2:	4603      	mov	r3, r0
 80056d4:	460c      	mov	r4, r1
 80056d6:	4618      	mov	r0, r3
 80056d8:	4621      	mov	r1, r4
 80056da:	f04f 0200 	mov.w	r2, #0
 80056de:	4b31      	ldr	r3, [pc, #196]	; (80057a4 <rotate_R90+0x164>)
 80056e0:	f7fa ff82 	bl	80005e8 <__aeabi_dmul>
 80056e4:	4603      	mov	r3, r0
 80056e6:	460c      	mov	r4, r1
 80056e8:	4618      	mov	r0, r3
 80056ea:	4621      	mov	r1, r4
 80056ec:	f04f 0200 	mov.w	r2, #0
 80056f0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80056f4:	f7fb f8a2 	bl	800083c <__aeabi_ddiv>
 80056f8:	4603      	mov	r3, r0
 80056fa:	460c      	mov	r4, r1
 80056fc:	4618      	mov	r0, r3
 80056fe:	4621      	mov	r1, r4
 8005700:	f7fb fa4a 	bl	8000b98 <__aeabi_d2f>
 8005704:	4602      	mov	r2, r0
 8005706:	4b29      	ldr	r3, [pc, #164]	; (80057ac <rotate_R90+0x16c>)
 8005708:	601a      	str	r2, [r3, #0]

	drive_start();											//走行開始
 800570a:	f7ff fadd 	bl	8004cc8 <drive_start>
	control_stop();
 800570e:	f7ff fb45 	bl	8004d9c <control_stop>
	while(degree_z > target_degree_z-80);
 8005712:	bf00      	nop
 8005714:	4b26      	ldr	r3, [pc, #152]	; (80057b0 <rotate_R90+0x170>)
 8005716:	edd3 7a00 	vldr	s15, [r3]
 800571a:	ed9f 7a26 	vldr	s14, [pc, #152]	; 80057b4 <rotate_R90+0x174>
 800571e:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8005722:	4b25      	ldr	r3, [pc, #148]	; (80057b8 <rotate_R90+0x178>)
 8005724:	edd3 7a00 	vldr	s15, [r3]
 8005728:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800572c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005730:	d4f0      	bmi.n	8005714 <rotate_R90+0xd4>

	accel_l = -30000;
 8005732:	4b17      	ldr	r3, [pc, #92]	; (8005790 <rotate_R90+0x150>)
 8005734:	4a21      	ldr	r2, [pc, #132]	; (80057bc <rotate_R90+0x17c>)
 8005736:	601a      	str	r2, [r3, #0]
	accel_r = 30000;
 8005738:	4b17      	ldr	r3, [pc, #92]	; (8005798 <rotate_R90+0x158>)
 800573a:	4a21      	ldr	r2, [pc, #132]	; (80057c0 <rotate_R90+0x180>)
 800573c:	601a      	str	r2, [r3, #0]
	speed_min_l = 100;
 800573e:	4b21      	ldr	r3, [pc, #132]	; (80057c4 <rotate_R90+0x184>)
 8005740:	4a21      	ldr	r2, [pc, #132]	; (80057c8 <rotate_R90+0x188>)
 8005742:	601a      	str	r2, [r3, #0]
	speed_max_r = -100;
 8005744:	4b21      	ldr	r3, [pc, #132]	; (80057cc <rotate_R90+0x18c>)
 8005746:	4a22      	ldr	r2, [pc, #136]	; (80057d0 <rotate_R90+0x190>)
 8005748:	601a      	str	r2, [r3, #0]

	while(degree_z > target_degree_z-90);
 800574a:	bf00      	nop
 800574c:	4b18      	ldr	r3, [pc, #96]	; (80057b0 <rotate_R90+0x170>)
 800574e:	edd3 7a00 	vldr	s15, [r3]
 8005752:	ed9f 7a20 	vldr	s14, [pc, #128]	; 80057d4 <rotate_R90+0x194>
 8005756:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800575a:	4b17      	ldr	r3, [pc, #92]	; (80057b8 <rotate_R90+0x178>)
 800575c:	edd3 7a00 	vldr	s15, [r3]
 8005760:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005764:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005768:	d4f0      	bmi.n	800574c <rotate_R90+0x10c>

	turn_dir(DIR_TURN_R90, 1);									//マイクロマウス内部位置情報でも左回転処理&目標角度左90度
 800576a:	2101      	movs	r1, #1
 800576c:	2001      	movs	r0, #1
 800576e:	f006 fc83 	bl	800c078 <turn_dir>
	drive_stop();
 8005772:	f7ff fad7 	bl	8004d24 <drive_stop>
}
 8005776:	bf00      	nop
 8005778:	bd98      	pop	{r3, r4, r7, pc}
 800577a:	bf00      	nop
 800577c:	f3af 8000 	nop.w
 8005780:	54442d18 	.word	0x54442d18
 8005784:	400921fb 	.word	0x400921fb
 8005788:	20000228 	.word	0x20000228
 800578c:	44480000 	.word	0x44480000
 8005790:	20000ddc 	.word	0x20000ddc
 8005794:	453b8000 	.word	0x453b8000
 8005798:	20000b64 	.word	0x20000b64
 800579c:	c53b8000 	.word	0xc53b8000
 80057a0:	43340000 	.word	0x43340000
 80057a4:	40508000 	.word	0x40508000
 80057a8:	200007f8 	.word	0x200007f8
 80057ac:	20000fec 	.word	0x20000fec
 80057b0:	20000c7c 	.word	0x20000c7c
 80057b4:	42a00000 	.word	0x42a00000
 80057b8:	20000bdc 	.word	0x20000bdc
 80057bc:	c6ea6000 	.word	0xc6ea6000
 80057c0:	46ea6000 	.word	0x46ea6000
 80057c4:	20000bd4 	.word	0x20000bd4
 80057c8:	42c80000 	.word	0x42c80000
 80057cc:	20000224 	.word	0x20000224
 80057d0:	c2c80000 	.word	0xc2c80000
 80057d4:	42b40000 	.word	0x42b40000

080057d8 <rotate_L90>:
//rotate_L90
// 左に90度回転する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void rotate_L90(void){
 80057d8:	b598      	push	{r3, r4, r7, lr}
 80057da:	af00      	add	r7, sp, #0
	target_omega_z = 800;
 80057dc:	4b50      	ldr	r3, [pc, #320]	; (8005920 <rotate_L90+0x148>)
 80057de:	4a51      	ldr	r2, [pc, #324]	; (8005924 <rotate_L90+0x14c>)
 80057e0:	601a      	str	r2, [r3, #0]
	accel_l = -3000;
 80057e2:	4b51      	ldr	r3, [pc, #324]	; (8005928 <rotate_L90+0x150>)
 80057e4:	4a51      	ldr	r2, [pc, #324]	; (800592c <rotate_L90+0x154>)
 80057e6:	601a      	str	r2, [r3, #0]
	accel_r = 3000;
 80057e8:	4b51      	ldr	r3, [pc, #324]	; (8005930 <rotate_L90+0x158>)
 80057ea:	4a52      	ldr	r2, [pc, #328]	; (8005934 <rotate_L90+0x15c>)
 80057ec:	601a      	str	r2, [r3, #0]
	speed_min_l = -1*target_omega_z/180*M_PI * TREAD/2;
 80057ee:	4b4c      	ldr	r3, [pc, #304]	; (8005920 <rotate_L90+0x148>)
 80057f0:	edd3 7a00 	vldr	s15, [r3]
 80057f4:	eef1 7a67 	vneg.f32	s15, s15
 80057f8:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 8005938 <rotate_L90+0x160>
 80057fc:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8005800:	ee16 0a90 	vmov	r0, s13
 8005804:	f7fa fe98 	bl	8000538 <__aeabi_f2d>
 8005808:	a343      	add	r3, pc, #268	; (adr r3, 8005918 <rotate_L90+0x140>)
 800580a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800580e:	f7fa feeb 	bl	80005e8 <__aeabi_dmul>
 8005812:	4603      	mov	r3, r0
 8005814:	460c      	mov	r4, r1
 8005816:	4618      	mov	r0, r3
 8005818:	4621      	mov	r1, r4
 800581a:	f04f 0200 	mov.w	r2, #0
 800581e:	4b47      	ldr	r3, [pc, #284]	; (800593c <rotate_L90+0x164>)
 8005820:	f7fa fee2 	bl	80005e8 <__aeabi_dmul>
 8005824:	4603      	mov	r3, r0
 8005826:	460c      	mov	r4, r1
 8005828:	4618      	mov	r0, r3
 800582a:	4621      	mov	r1, r4
 800582c:	f04f 0200 	mov.w	r2, #0
 8005830:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005834:	f7fb f802 	bl	800083c <__aeabi_ddiv>
 8005838:	4603      	mov	r3, r0
 800583a:	460c      	mov	r4, r1
 800583c:	4618      	mov	r0, r3
 800583e:	4621      	mov	r1, r4
 8005840:	f7fb f9aa 	bl	8000b98 <__aeabi_d2f>
 8005844:	4602      	mov	r2, r0
 8005846:	4b3e      	ldr	r3, [pc, #248]	; (8005940 <rotate_L90+0x168>)
 8005848:	601a      	str	r2, [r3, #0]
	speed_max_r = target_omega_z/180*M_PI * TREAD/2;
 800584a:	4b35      	ldr	r3, [pc, #212]	; (8005920 <rotate_L90+0x148>)
 800584c:	edd3 7a00 	vldr	s15, [r3]
 8005850:	ed9f 7a39 	vldr	s14, [pc, #228]	; 8005938 <rotate_L90+0x160>
 8005854:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8005858:	ee16 0a90 	vmov	r0, s13
 800585c:	f7fa fe6c 	bl	8000538 <__aeabi_f2d>
 8005860:	a32d      	add	r3, pc, #180	; (adr r3, 8005918 <rotate_L90+0x140>)
 8005862:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005866:	f7fa febf 	bl	80005e8 <__aeabi_dmul>
 800586a:	4603      	mov	r3, r0
 800586c:	460c      	mov	r4, r1
 800586e:	4618      	mov	r0, r3
 8005870:	4621      	mov	r1, r4
 8005872:	f04f 0200 	mov.w	r2, #0
 8005876:	4b31      	ldr	r3, [pc, #196]	; (800593c <rotate_L90+0x164>)
 8005878:	f7fa feb6 	bl	80005e8 <__aeabi_dmul>
 800587c:	4603      	mov	r3, r0
 800587e:	460c      	mov	r4, r1
 8005880:	4618      	mov	r0, r3
 8005882:	4621      	mov	r1, r4
 8005884:	f04f 0200 	mov.w	r2, #0
 8005888:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800588c:	f7fa ffd6 	bl	800083c <__aeabi_ddiv>
 8005890:	4603      	mov	r3, r0
 8005892:	460c      	mov	r4, r1
 8005894:	4618      	mov	r0, r3
 8005896:	4621      	mov	r1, r4
 8005898:	f7fb f97e 	bl	8000b98 <__aeabi_d2f>
 800589c:	4602      	mov	r2, r0
 800589e:	4b29      	ldr	r3, [pc, #164]	; (8005944 <rotate_L90+0x16c>)
 80058a0:	601a      	str	r2, [r3, #0]

	drive_start();											//走行開始
 80058a2:	f7ff fa11 	bl	8004cc8 <drive_start>
	control_stop();
 80058a6:	f7ff fa79 	bl	8004d9c <control_stop>
	while(degree_z < target_degree_z+80);
 80058aa:	bf00      	nop
 80058ac:	4b26      	ldr	r3, [pc, #152]	; (8005948 <rotate_L90+0x170>)
 80058ae:	edd3 7a00 	vldr	s15, [r3]
 80058b2:	ed9f 7a26 	vldr	s14, [pc, #152]	; 800594c <rotate_L90+0x174>
 80058b6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80058ba:	4b25      	ldr	r3, [pc, #148]	; (8005950 <rotate_L90+0x178>)
 80058bc:	edd3 7a00 	vldr	s15, [r3]
 80058c0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80058c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80058c8:	dcf0      	bgt.n	80058ac <rotate_L90+0xd4>

	accel_l = 30000;
 80058ca:	4b17      	ldr	r3, [pc, #92]	; (8005928 <rotate_L90+0x150>)
 80058cc:	4a21      	ldr	r2, [pc, #132]	; (8005954 <rotate_L90+0x17c>)
 80058ce:	601a      	str	r2, [r3, #0]
	accel_r = -30000;
 80058d0:	4b17      	ldr	r3, [pc, #92]	; (8005930 <rotate_L90+0x158>)
 80058d2:	4a21      	ldr	r2, [pc, #132]	; (8005958 <rotate_L90+0x180>)
 80058d4:	601a      	str	r2, [r3, #0]
	speed_max_l = -100;
 80058d6:	4b21      	ldr	r3, [pc, #132]	; (800595c <rotate_L90+0x184>)
 80058d8:	4a21      	ldr	r2, [pc, #132]	; (8005960 <rotate_L90+0x188>)
 80058da:	601a      	str	r2, [r3, #0]
	speed_min_r = 100;
 80058dc:	4b21      	ldr	r3, [pc, #132]	; (8005964 <rotate_L90+0x18c>)
 80058de:	4a22      	ldr	r2, [pc, #136]	; (8005968 <rotate_L90+0x190>)
 80058e0:	601a      	str	r2, [r3, #0]

	while(degree_z < target_degree_z+90);
 80058e2:	bf00      	nop
 80058e4:	4b18      	ldr	r3, [pc, #96]	; (8005948 <rotate_L90+0x170>)
 80058e6:	edd3 7a00 	vldr	s15, [r3]
 80058ea:	ed9f 7a20 	vldr	s14, [pc, #128]	; 800596c <rotate_L90+0x194>
 80058ee:	ee37 7a87 	vadd.f32	s14, s15, s14
 80058f2:	4b17      	ldr	r3, [pc, #92]	; (8005950 <rotate_L90+0x178>)
 80058f4:	edd3 7a00 	vldr	s15, [r3]
 80058f8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80058fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005900:	dcf0      	bgt.n	80058e4 <rotate_L90+0x10c>

	turn_dir(DIR_TURN_L90, 1);									//マイクロマウス内部位置情報でも右回転処理&目標角度右90度
 8005902:	2101      	movs	r1, #1
 8005904:	20ff      	movs	r0, #255	; 0xff
 8005906:	f006 fbb7 	bl	800c078 <turn_dir>
	drive_stop();
 800590a:	f7ff fa0b 	bl	8004d24 <drive_stop>
}
 800590e:	bf00      	nop
 8005910:	bd98      	pop	{r3, r4, r7, pc}
 8005912:	bf00      	nop
 8005914:	f3af 8000 	nop.w
 8005918:	54442d18 	.word	0x54442d18
 800591c:	400921fb 	.word	0x400921fb
 8005920:	20000228 	.word	0x20000228
 8005924:	44480000 	.word	0x44480000
 8005928:	20000ddc 	.word	0x20000ddc
 800592c:	c53b8000 	.word	0xc53b8000
 8005930:	20000b64 	.word	0x20000b64
 8005934:	453b8000 	.word	0x453b8000
 8005938:	43340000 	.word	0x43340000
 800593c:	40508000 	.word	0x40508000
 8005940:	20000bd4 	.word	0x20000bd4
 8005944:	20000224 	.word	0x20000224
 8005948:	20000c7c 	.word	0x20000c7c
 800594c:	42a00000 	.word	0x42a00000
 8005950:	20000bdc 	.word	0x20000bdc
 8005954:	46ea6000 	.word	0x46ea6000
 8005958:	c6ea6000 	.word	0xc6ea6000
 800595c:	200007f8 	.word	0x200007f8
 8005960:	c2c80000 	.word	0xc2c80000
 8005964:	20000fec 	.word	0x20000fec
 8005968:	42c80000 	.word	0x42c80000
 800596c:	42b40000 	.word	0x42b40000

08005970 <rotate_180>:
//rotate_180
// 180度回転する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void rotate_180(void){
 8005970:	b598      	push	{r3, r4, r7, lr}
 8005972:	af00      	add	r7, sp, #0

	full_led_write(2);
 8005974:	2002      	movs	r0, #2
 8005976:	f007 fe9f 	bl	800d6b8 <full_led_write>
	target_omega_z = 800;
 800597a:	4b4f      	ldr	r3, [pc, #316]	; (8005ab8 <rotate_180+0x148>)
 800597c:	4a4f      	ldr	r2, [pc, #316]	; (8005abc <rotate_180+0x14c>)
 800597e:	601a      	str	r2, [r3, #0]
	accel_l = 3000;
 8005980:	4b4f      	ldr	r3, [pc, #316]	; (8005ac0 <rotate_180+0x150>)
 8005982:	4a50      	ldr	r2, [pc, #320]	; (8005ac4 <rotate_180+0x154>)
 8005984:	601a      	str	r2, [r3, #0]
	accel_r = -3000;
 8005986:	4b50      	ldr	r3, [pc, #320]	; (8005ac8 <rotate_180+0x158>)
 8005988:	4a50      	ldr	r2, [pc, #320]	; (8005acc <rotate_180+0x15c>)
 800598a:	601a      	str	r2, [r3, #0]
	speed_max_l = target_omega_z/180*M_PI * TREAD/2;
 800598c:	4b4a      	ldr	r3, [pc, #296]	; (8005ab8 <rotate_180+0x148>)
 800598e:	edd3 7a00 	vldr	s15, [r3]
 8005992:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 8005ad0 <rotate_180+0x160>
 8005996:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800599a:	ee16 0a90 	vmov	r0, s13
 800599e:	f7fa fdcb 	bl	8000538 <__aeabi_f2d>
 80059a2:	a343      	add	r3, pc, #268	; (adr r3, 8005ab0 <rotate_180+0x140>)
 80059a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059a8:	f7fa fe1e 	bl	80005e8 <__aeabi_dmul>
 80059ac:	4603      	mov	r3, r0
 80059ae:	460c      	mov	r4, r1
 80059b0:	4618      	mov	r0, r3
 80059b2:	4621      	mov	r1, r4
 80059b4:	f04f 0200 	mov.w	r2, #0
 80059b8:	4b46      	ldr	r3, [pc, #280]	; (8005ad4 <rotate_180+0x164>)
 80059ba:	f7fa fe15 	bl	80005e8 <__aeabi_dmul>
 80059be:	4603      	mov	r3, r0
 80059c0:	460c      	mov	r4, r1
 80059c2:	4618      	mov	r0, r3
 80059c4:	4621      	mov	r1, r4
 80059c6:	f04f 0200 	mov.w	r2, #0
 80059ca:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80059ce:	f7fa ff35 	bl	800083c <__aeabi_ddiv>
 80059d2:	4603      	mov	r3, r0
 80059d4:	460c      	mov	r4, r1
 80059d6:	4618      	mov	r0, r3
 80059d8:	4621      	mov	r1, r4
 80059da:	f7fb f8dd 	bl	8000b98 <__aeabi_d2f>
 80059de:	4602      	mov	r2, r0
 80059e0:	4b3d      	ldr	r3, [pc, #244]	; (8005ad8 <rotate_180+0x168>)
 80059e2:	601a      	str	r2, [r3, #0]
	speed_min_r = -1*target_omega_z/180*M_PI * TREAD/2;
 80059e4:	4b34      	ldr	r3, [pc, #208]	; (8005ab8 <rotate_180+0x148>)
 80059e6:	edd3 7a00 	vldr	s15, [r3]
 80059ea:	eef1 7a67 	vneg.f32	s15, s15
 80059ee:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8005ad0 <rotate_180+0x160>
 80059f2:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80059f6:	ee16 0a90 	vmov	r0, s13
 80059fa:	f7fa fd9d 	bl	8000538 <__aeabi_f2d>
 80059fe:	a32c      	add	r3, pc, #176	; (adr r3, 8005ab0 <rotate_180+0x140>)
 8005a00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a04:	f7fa fdf0 	bl	80005e8 <__aeabi_dmul>
 8005a08:	4603      	mov	r3, r0
 8005a0a:	460c      	mov	r4, r1
 8005a0c:	4618      	mov	r0, r3
 8005a0e:	4621      	mov	r1, r4
 8005a10:	f04f 0200 	mov.w	r2, #0
 8005a14:	4b2f      	ldr	r3, [pc, #188]	; (8005ad4 <rotate_180+0x164>)
 8005a16:	f7fa fde7 	bl	80005e8 <__aeabi_dmul>
 8005a1a:	4603      	mov	r3, r0
 8005a1c:	460c      	mov	r4, r1
 8005a1e:	4618      	mov	r0, r3
 8005a20:	4621      	mov	r1, r4
 8005a22:	f04f 0200 	mov.w	r2, #0
 8005a26:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005a2a:	f7fa ff07 	bl	800083c <__aeabi_ddiv>
 8005a2e:	4603      	mov	r3, r0
 8005a30:	460c      	mov	r4, r1
 8005a32:	4618      	mov	r0, r3
 8005a34:	4621      	mov	r1, r4
 8005a36:	f7fb f8af 	bl	8000b98 <__aeabi_d2f>
 8005a3a:	4602      	mov	r2, r0
 8005a3c:	4b27      	ldr	r3, [pc, #156]	; (8005adc <rotate_180+0x16c>)
 8005a3e:	601a      	str	r2, [r3, #0]

	drive_start();											//走行開始
 8005a40:	f7ff f942 	bl	8004cc8 <drive_start>
	control_stop();
 8005a44:	f7ff f9aa 	bl	8004d9c <control_stop>
	while(degree_z > target_degree_z-170);
 8005a48:	bf00      	nop
 8005a4a:	4b25      	ldr	r3, [pc, #148]	; (8005ae0 <rotate_180+0x170>)
 8005a4c:	edd3 7a00 	vldr	s15, [r3]
 8005a50:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8005ae4 <rotate_180+0x174>
 8005a54:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8005a58:	4b23      	ldr	r3, [pc, #140]	; (8005ae8 <rotate_180+0x178>)
 8005a5a:	edd3 7a00 	vldr	s15, [r3]
 8005a5e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005a62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a66:	d4f0      	bmi.n	8005a4a <rotate_180+0xda>

	accel_l = -30000;
 8005a68:	4b15      	ldr	r3, [pc, #84]	; (8005ac0 <rotate_180+0x150>)
 8005a6a:	4a20      	ldr	r2, [pc, #128]	; (8005aec <rotate_180+0x17c>)
 8005a6c:	601a      	str	r2, [r3, #0]
	accel_r = 30000;
 8005a6e:	4b16      	ldr	r3, [pc, #88]	; (8005ac8 <rotate_180+0x158>)
 8005a70:	4a1f      	ldr	r2, [pc, #124]	; (8005af0 <rotate_180+0x180>)
 8005a72:	601a      	str	r2, [r3, #0]
	speed_min_l = 100;
 8005a74:	4b1f      	ldr	r3, [pc, #124]	; (8005af4 <rotate_180+0x184>)
 8005a76:	4a20      	ldr	r2, [pc, #128]	; (8005af8 <rotate_180+0x188>)
 8005a78:	601a      	str	r2, [r3, #0]
	speed_max_r = -100;
 8005a7a:	4b20      	ldr	r3, [pc, #128]	; (8005afc <rotate_180+0x18c>)
 8005a7c:	4a20      	ldr	r2, [pc, #128]	; (8005b00 <rotate_180+0x190>)
 8005a7e:	601a      	str	r2, [r3, #0]

	while(degree_z > target_degree_z-180);
 8005a80:	bf00      	nop
 8005a82:	4b17      	ldr	r3, [pc, #92]	; (8005ae0 <rotate_180+0x170>)
 8005a84:	edd3 7a00 	vldr	s15, [r3]
 8005a88:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8005ad0 <rotate_180+0x160>
 8005a8c:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8005a90:	4b15      	ldr	r3, [pc, #84]	; (8005ae8 <rotate_180+0x178>)
 8005a92:	edd3 7a00 	vldr	s15, [r3]
 8005a96:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005a9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a9e:	d4f0      	bmi.n	8005a82 <rotate_180+0x112>

	turn_dir(DIR_TURN_180, 1);									//マイクロマウス内部位置情報でも180度回転処理&目標角度左180度
 8005aa0:	2101      	movs	r1, #1
 8005aa2:	2002      	movs	r0, #2
 8005aa4:	f006 fae8 	bl	800c078 <turn_dir>
	drive_stop();
 8005aa8:	f7ff f93c 	bl	8004d24 <drive_stop>

}
 8005aac:	bf00      	nop
 8005aae:	bd98      	pop	{r3, r4, r7, pc}
 8005ab0:	54442d18 	.word	0x54442d18
 8005ab4:	400921fb 	.word	0x400921fb
 8005ab8:	20000228 	.word	0x20000228
 8005abc:	44480000 	.word	0x44480000
 8005ac0:	20000ddc 	.word	0x20000ddc
 8005ac4:	453b8000 	.word	0x453b8000
 8005ac8:	20000b64 	.word	0x20000b64
 8005acc:	c53b8000 	.word	0xc53b8000
 8005ad0:	43340000 	.word	0x43340000
 8005ad4:	40508000 	.word	0x40508000
 8005ad8:	200007f8 	.word	0x200007f8
 8005adc:	20000fec 	.word	0x20000fec
 8005ae0:	20000c7c 	.word	0x20000c7c
 8005ae4:	432a0000 	.word	0x432a0000
 8005ae8:	20000bdc 	.word	0x20000bdc
 8005aec:	c6ea6000 	.word	0xc6ea6000
 8005af0:	46ea6000 	.word	0x46ea6000
 8005af4:	20000bd4 	.word	0x20000bd4
 8005af8:	42c80000 	.word	0x42c80000
 8005afc:	20000224 	.word	0x20000224
 8005b00:	c2c80000 	.word	0xc2c80000

08005b04 <slalom_R90>:
//slalom_R90
// スラロームで左に90度回転する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void slalom_R90(void){
 8005b04:	b580      	push	{r7, lr}
 8005b06:	af00      	add	r7, sp, #0
	full_led_write(5);
 8005b08:	2005      	movs	r0, #5
 8005b0a:	f007 fdd5 	bl	800d6b8 <full_led_write>
	MF.FLAG.GYRO = 0;
 8005b0e:	4a61      	ldr	r2, [pc, #388]	; (8005c94 <slalom_R90+0x190>)
 8005b10:	8813      	ldrh	r3, [r2, #0]
 8005b12:	f36f 2308 	bfc	r3, #8, #1
 8005b16:	8013      	strh	r3, [r2, #0]

	accel_l = -10000;
 8005b18:	4b5f      	ldr	r3, [pc, #380]	; (8005c98 <slalom_R90+0x194>)
 8005b1a:	4a60      	ldr	r2, [pc, #384]	; (8005c9c <slalom_R90+0x198>)
 8005b1c:	601a      	str	r2, [r3, #0]
	accel_r = -10000;
 8005b1e:	4b60      	ldr	r3, [pc, #384]	; (8005ca0 <slalom_R90+0x19c>)
 8005b20:	4a5e      	ldr	r2, [pc, #376]	; (8005c9c <slalom_R90+0x198>)
 8005b22:	601a      	str	r2, [r3, #0]
	speed_min_l = 400;
 8005b24:	4b5f      	ldr	r3, [pc, #380]	; (8005ca4 <slalom_R90+0x1a0>)
 8005b26:	4a60      	ldr	r2, [pc, #384]	; (8005ca8 <slalom_R90+0x1a4>)
 8005b28:	601a      	str	r2, [r3, #0]
	speed_min_r = 400;
 8005b2a:	4b60      	ldr	r3, [pc, #384]	; (8005cac <slalom_R90+0x1a8>)
 8005b2c:	4a5e      	ldr	r2, [pc, #376]	; (8005ca8 <slalom_R90+0x1a4>)
 8005b2e:	601a      	str	r2, [r3, #0]

	control_start();
 8005b30:	f7ff f920 	bl	8004d74 <control_start>
	dist_l = dist_r = 0;
 8005b34:	f04f 0300 	mov.w	r3, #0
 8005b38:	4a5d      	ldr	r2, [pc, #372]	; (8005cb0 <slalom_R90+0x1ac>)
 8005b3a:	6013      	str	r3, [r2, #0]
 8005b3c:	4a5d      	ldr	r2, [pc, #372]	; (8005cb4 <slalom_R90+0x1b0>)
 8005b3e:	6013      	str	r3, [r2, #0]
	while(dist_l < SLALOM_OFFSET/*19+10*/ && dist_r < SLALOM_OFFSET/*19+10*/);
 8005b40:	bf00      	nop
 8005b42:	4b5c      	ldr	r3, [pc, #368]	; (8005cb4 <slalom_R90+0x1b0>)
 8005b44:	edd3 7a00 	vldr	s15, [r3]
 8005b48:	eeb3 7a07 	vmov.f32	s14, #55	; 0x41b80000  23.0
 8005b4c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005b50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b54:	d509      	bpl.n	8005b6a <slalom_R90+0x66>
 8005b56:	4b56      	ldr	r3, [pc, #344]	; (8005cb0 <slalom_R90+0x1ac>)
 8005b58:	edd3 7a00 	vldr	s15, [r3]
 8005b5c:	eeb3 7a07 	vmov.f32	s14, #55	; 0x41b80000  23.0
 8005b60:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005b64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b68:	d4eb      	bmi.n	8005b42 <slalom_R90+0x3e>
	drive_stop();
 8005b6a:	f7ff f8db 	bl	8004d24 <drive_stop>
	control_stop();
 8005b6e:	f7ff f915 	bl	8004d9c <control_stop>

	MF.FLAG.GYRO = 1;
 8005b72:	4a48      	ldr	r2, [pc, #288]	; (8005c94 <slalom_R90+0x190>)
 8005b74:	8813      	ldrh	r3, [r2, #0]
 8005b76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b7a:	8013      	strh	r3, [r2, #0]

	target_degaccel_z = 4000;
 8005b7c:	4b4e      	ldr	r3, [pc, #312]	; (8005cb8 <slalom_R90+0x1b4>)
 8005b7e:	4a4f      	ldr	r2, [pc, #316]	; (8005cbc <slalom_R90+0x1b8>)
 8005b80:	601a      	str	r2, [r3, #0]
	target_omega_z = 0;
 8005b82:	4b4f      	ldr	r3, [pc, #316]	; (8005cc0 <slalom_R90+0x1bc>)
 8005b84:	f04f 0200 	mov.w	r2, #0
 8005b88:	601a      	str	r2, [r3, #0]
	omega_max = 550;
 8005b8a:	4b4e      	ldr	r3, [pc, #312]	; (8005cc4 <slalom_R90+0x1c0>)
 8005b8c:	4a4e      	ldr	r2, [pc, #312]	; (8005cc8 <slalom_R90+0x1c4>)
 8005b8e:	601a      	str	r2, [r3, #0]
	speed_G = 400;
 8005b90:	4b4e      	ldr	r3, [pc, #312]	; (8005ccc <slalom_R90+0x1c8>)
 8005b92:	4a45      	ldr	r2, [pc, #276]	; (8005ca8 <slalom_R90+0x1a4>)
 8005b94:	601a      	str	r2, [r3, #0]

	MF.FLAG.DRV = 1;
 8005b96:	4a3f      	ldr	r2, [pc, #252]	; (8005c94 <slalom_R90+0x190>)
 8005b98:	8813      	ldrh	r3, [r2, #0]
 8005b9a:	f043 0302 	orr.w	r3, r3, #2
 8005b9e:	8013      	strh	r3, [r2, #0]
	while(degree_z > target_degree_z-38);
 8005ba0:	bf00      	nop
 8005ba2:	4b4b      	ldr	r3, [pc, #300]	; (8005cd0 <slalom_R90+0x1cc>)
 8005ba4:	edd3 7a00 	vldr	s15, [r3]
 8005ba8:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 8005cd4 <slalom_R90+0x1d0>
 8005bac:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8005bb0:	4b49      	ldr	r3, [pc, #292]	; (8005cd8 <slalom_R90+0x1d4>)
 8005bb2:	edd3 7a00 	vldr	s15, [r3]
 8005bb6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005bba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005bbe:	d4f0      	bmi.n	8005ba2 <slalom_R90+0x9e>

	target_degaccel_z = 0;
 8005bc0:	4b3d      	ldr	r3, [pc, #244]	; (8005cb8 <slalom_R90+0x1b4>)
 8005bc2:	f04f 0200 	mov.w	r2, #0
 8005bc6:	601a      	str	r2, [r3, #0]

	while(degree_z > target_degree_z-65);
 8005bc8:	bf00      	nop
 8005bca:	4b41      	ldr	r3, [pc, #260]	; (8005cd0 <slalom_R90+0x1cc>)
 8005bcc:	edd3 7a00 	vldr	s15, [r3]
 8005bd0:	ed9f 7a42 	vldr	s14, [pc, #264]	; 8005cdc <slalom_R90+0x1d8>
 8005bd4:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8005bd8:	4b3f      	ldr	r3, [pc, #252]	; (8005cd8 <slalom_R90+0x1d4>)
 8005bda:	edd3 7a00 	vldr	s15, [r3]
 8005bde:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005be2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005be6:	d4f0      	bmi.n	8005bca <slalom_R90+0xc6>

	target_degaccel_z = -4000;
 8005be8:	4b33      	ldr	r3, [pc, #204]	; (8005cb8 <slalom_R90+0x1b4>)
 8005bea:	4a3d      	ldr	r2, [pc, #244]	; (8005ce0 <slalom_R90+0x1dc>)
 8005bec:	601a      	str	r2, [r3, #0]

	while(degree_z > target_degree_z-90);
 8005bee:	bf00      	nop
 8005bf0:	4b37      	ldr	r3, [pc, #220]	; (8005cd0 <slalom_R90+0x1cc>)
 8005bf2:	edd3 7a00 	vldr	s15, [r3]
 8005bf6:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8005ce4 <slalom_R90+0x1e0>
 8005bfa:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8005bfe:	4b36      	ldr	r3, [pc, #216]	; (8005cd8 <slalom_R90+0x1d4>)
 8005c00:	edd3 7a00 	vldr	s15, [r3]
 8005c04:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005c08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c0c:	d4f0      	bmi.n	8005bf0 <slalom_R90+0xec>
	turn_dir(DIR_TURN_R90, 1);									//マイクロマウス内部位置情報でも左回転処理&目標角度左90度
 8005c0e:	2101      	movs	r1, #1
 8005c10:	2001      	movs	r0, #1
 8005c12:	f006 fa31 	bl	800c078 <turn_dir>

	MF.FLAG.GYRO = 0;
 8005c16:	4a1f      	ldr	r2, [pc, #124]	; (8005c94 <slalom_R90+0x190>)
 8005c18:	8813      	ldrh	r3, [r2, #0]
 8005c1a:	f36f 2308 	bfc	r3, #8, #1
 8005c1e:	8013      	strh	r3, [r2, #0]

	accel_l = 10000;
 8005c20:	4b1d      	ldr	r3, [pc, #116]	; (8005c98 <slalom_R90+0x194>)
 8005c22:	4a31      	ldr	r2, [pc, #196]	; (8005ce8 <slalom_R90+0x1e4>)
 8005c24:	601a      	str	r2, [r3, #0]
	accel_r = 10000;
 8005c26:	4b1e      	ldr	r3, [pc, #120]	; (8005ca0 <slalom_R90+0x19c>)
 8005c28:	4a2f      	ldr	r2, [pc, #188]	; (8005ce8 <slalom_R90+0x1e4>)
 8005c2a:	601a      	str	r2, [r3, #0]
	speed_max_l = SPEED_RUN;
 8005c2c:	4b2f      	ldr	r3, [pc, #188]	; (8005cec <slalom_R90+0x1e8>)
 8005c2e:	4a1e      	ldr	r2, [pc, #120]	; (8005ca8 <slalom_R90+0x1a4>)
 8005c30:	601a      	str	r2, [r3, #0]
	speed_max_r = SPEED_RUN;
 8005c32:	4b2f      	ldr	r3, [pc, #188]	; (8005cf0 <slalom_R90+0x1ec>)
 8005c34:	4a1c      	ldr	r2, [pc, #112]	; (8005ca8 <slalom_R90+0x1a4>)
 8005c36:	601a      	str	r2, [r3, #0]
	dist_l = dist_r = 0;		//走行距離の初期化
 8005c38:	f04f 0300 	mov.w	r3, #0
 8005c3c:	4a1c      	ldr	r2, [pc, #112]	; (8005cb0 <slalom_R90+0x1ac>)
 8005c3e:	6013      	str	r3, [r2, #0]
 8005c40:	4a1c      	ldr	r2, [pc, #112]	; (8005cb4 <slalom_R90+0x1b0>)
 8005c42:	6013      	str	r3, [r2, #0]
	MF.FLAG.SPD = 1;
 8005c44:	4a13      	ldr	r2, [pc, #76]	; (8005c94 <slalom_R90+0x190>)
 8005c46:	8813      	ldrh	r3, [r2, #0]
 8005c48:	f043 0304 	orr.w	r3, r3, #4
 8005c4c:	8013      	strh	r3, [r2, #0]

	control_start();
 8005c4e:	f7ff f891 	bl	8004d74 <control_start>
	while(dist_l < SLALOM_OFFSET && dist_r < SLALOM_OFFSET);
 8005c52:	bf00      	nop
 8005c54:	4b17      	ldr	r3, [pc, #92]	; (8005cb4 <slalom_R90+0x1b0>)
 8005c56:	edd3 7a00 	vldr	s15, [r3]
 8005c5a:	eeb3 7a07 	vmov.f32	s14, #55	; 0x41b80000  23.0
 8005c5e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005c62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c66:	d509      	bpl.n	8005c7c <slalom_R90+0x178>
 8005c68:	4b11      	ldr	r3, [pc, #68]	; (8005cb0 <slalom_R90+0x1ac>)
 8005c6a:	edd3 7a00 	vldr	s15, [r3]
 8005c6e:	eeb3 7a07 	vmov.f32	s14, #55	; 0x41b80000  23.0
 8005c72:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005c76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c7a:	d4eb      	bmi.n	8005c54 <slalom_R90+0x150>
	if(MF.FLAG.SCND == 0)get_wall_info();					//壁情報を取得，片壁制御の有効・無効の判断
 8005c7c:	4b05      	ldr	r3, [pc, #20]	; (8005c94 <slalom_R90+0x190>)
 8005c7e:	881b      	ldrh	r3, [r3, #0]
 8005c80:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8005c84:	b2db      	uxtb	r3, r3
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d101      	bne.n	8005c8e <slalom_R90+0x18a>
 8005c8a:	f007 fca1 	bl	800d5d0 <get_wall_info>
}
 8005c8e:	bf00      	nop
 8005c90:	bd80      	pop	{r7, pc}
 8005c92:	bf00      	nop
 8005c94:	20000fe8 	.word	0x20000fe8
 8005c98:	20000ddc 	.word	0x20000ddc
 8005c9c:	c61c4000 	.word	0xc61c4000
 8005ca0:	20000b64 	.word	0x20000b64
 8005ca4:	20000bd4 	.word	0x20000bd4
 8005ca8:	43c80000 	.word	0x43c80000
 8005cac:	20000fec 	.word	0x20000fec
 8005cb0:	20000b6c 	.word	0x20000b6c
 8005cb4:	20001004 	.word	0x20001004
 8005cb8:	20000bd8 	.word	0x20000bd8
 8005cbc:	457a0000 	.word	0x457a0000
 8005cc0:	20000228 	.word	0x20000228
 8005cc4:	20000b68 	.word	0x20000b68
 8005cc8:	44098000 	.word	0x44098000
 8005ccc:	20000b74 	.word	0x20000b74
 8005cd0:	20000c7c 	.word	0x20000c7c
 8005cd4:	42180000 	.word	0x42180000
 8005cd8:	20000bdc 	.word	0x20000bdc
 8005cdc:	42820000 	.word	0x42820000
 8005ce0:	c57a0000 	.word	0xc57a0000
 8005ce4:	42b40000 	.word	0x42b40000
 8005ce8:	461c4000 	.word	0x461c4000
 8005cec:	200007f8 	.word	0x200007f8
 8005cf0:	20000224 	.word	0x20000224

08005cf4 <slalom_L90>:
//slalom_L90
// スラロームで右に90度回転する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void slalom_L90(void){
 8005cf4:	b580      	push	{r7, lr}
 8005cf6:	af00      	add	r7, sp, #0
	full_led_write(6);
 8005cf8:	2006      	movs	r0, #6
 8005cfa:	f007 fcdd 	bl	800d6b8 <full_led_write>
	MF.FLAG.GYRO = 0;
 8005cfe:	4a61      	ldr	r2, [pc, #388]	; (8005e84 <slalom_L90+0x190>)
 8005d00:	8813      	ldrh	r3, [r2, #0]
 8005d02:	f36f 2308 	bfc	r3, #8, #1
 8005d06:	8013      	strh	r3, [r2, #0]

	accel_l = -10000;
 8005d08:	4b5f      	ldr	r3, [pc, #380]	; (8005e88 <slalom_L90+0x194>)
 8005d0a:	4a60      	ldr	r2, [pc, #384]	; (8005e8c <slalom_L90+0x198>)
 8005d0c:	601a      	str	r2, [r3, #0]
	accel_r = -10000;
 8005d0e:	4b60      	ldr	r3, [pc, #384]	; (8005e90 <slalom_L90+0x19c>)
 8005d10:	4a5e      	ldr	r2, [pc, #376]	; (8005e8c <slalom_L90+0x198>)
 8005d12:	601a      	str	r2, [r3, #0]
	speed_min_l = 400;
 8005d14:	4b5f      	ldr	r3, [pc, #380]	; (8005e94 <slalom_L90+0x1a0>)
 8005d16:	4a60      	ldr	r2, [pc, #384]	; (8005e98 <slalom_L90+0x1a4>)
 8005d18:	601a      	str	r2, [r3, #0]
	speed_min_r = 400;
 8005d1a:	4b60      	ldr	r3, [pc, #384]	; (8005e9c <slalom_L90+0x1a8>)
 8005d1c:	4a5e      	ldr	r2, [pc, #376]	; (8005e98 <slalom_L90+0x1a4>)
 8005d1e:	601a      	str	r2, [r3, #0]

	control_start();
 8005d20:	f7ff f828 	bl	8004d74 <control_start>
	dist_l = dist_r = 0;
 8005d24:	f04f 0300 	mov.w	r3, #0
 8005d28:	4a5d      	ldr	r2, [pc, #372]	; (8005ea0 <slalom_L90+0x1ac>)
 8005d2a:	6013      	str	r3, [r2, #0]
 8005d2c:	4a5d      	ldr	r2, [pc, #372]	; (8005ea4 <slalom_L90+0x1b0>)
 8005d2e:	6013      	str	r3, [r2, #0]
	while(dist_l < SLALOM_OFFSET && dist_r < SLALOM_OFFSET);
 8005d30:	bf00      	nop
 8005d32:	4b5c      	ldr	r3, [pc, #368]	; (8005ea4 <slalom_L90+0x1b0>)
 8005d34:	edd3 7a00 	vldr	s15, [r3]
 8005d38:	eeb3 7a07 	vmov.f32	s14, #55	; 0x41b80000  23.0
 8005d3c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005d40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d44:	d509      	bpl.n	8005d5a <slalom_L90+0x66>
 8005d46:	4b56      	ldr	r3, [pc, #344]	; (8005ea0 <slalom_L90+0x1ac>)
 8005d48:	edd3 7a00 	vldr	s15, [r3]
 8005d4c:	eeb3 7a07 	vmov.f32	s14, #55	; 0x41b80000  23.0
 8005d50:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005d54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d58:	d4eb      	bmi.n	8005d32 <slalom_L90+0x3e>
	drive_stop();
 8005d5a:	f7fe ffe3 	bl	8004d24 <drive_stop>
	control_stop();
 8005d5e:	f7ff f81d 	bl	8004d9c <control_stop>

	MF.FLAG.GYRO = 1;
 8005d62:	4a48      	ldr	r2, [pc, #288]	; (8005e84 <slalom_L90+0x190>)
 8005d64:	8813      	ldrh	r3, [r2, #0]
 8005d66:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005d6a:	8013      	strh	r3, [r2, #0]

	target_degaccel_z = -4000;
 8005d6c:	4b4e      	ldr	r3, [pc, #312]	; (8005ea8 <slalom_L90+0x1b4>)
 8005d6e:	4a4f      	ldr	r2, [pc, #316]	; (8005eac <slalom_L90+0x1b8>)
 8005d70:	601a      	str	r2, [r3, #0]
	target_omega_z = 0;
 8005d72:	4b4f      	ldr	r3, [pc, #316]	; (8005eb0 <slalom_L90+0x1bc>)
 8005d74:	f04f 0200 	mov.w	r2, #0
 8005d78:	601a      	str	r2, [r3, #0]
	omega_min = -550;
 8005d7a:	4b4e      	ldr	r3, [pc, #312]	; (8005eb4 <slalom_L90+0x1c0>)
 8005d7c:	4a4e      	ldr	r2, [pc, #312]	; (8005eb8 <slalom_L90+0x1c4>)
 8005d7e:	601a      	str	r2, [r3, #0]
	speed_G = 400;
 8005d80:	4b4e      	ldr	r3, [pc, #312]	; (8005ebc <slalom_L90+0x1c8>)
 8005d82:	4a45      	ldr	r2, [pc, #276]	; (8005e98 <slalom_L90+0x1a4>)
 8005d84:	601a      	str	r2, [r3, #0]

	MF.FLAG.DRV = 1;
 8005d86:	4a3f      	ldr	r2, [pc, #252]	; (8005e84 <slalom_L90+0x190>)
 8005d88:	8813      	ldrh	r3, [r2, #0]
 8005d8a:	f043 0302 	orr.w	r3, r3, #2
 8005d8e:	8013      	strh	r3, [r2, #0]
	while(degree_z < target_degree_z+38);
 8005d90:	bf00      	nop
 8005d92:	4b4b      	ldr	r3, [pc, #300]	; (8005ec0 <slalom_L90+0x1cc>)
 8005d94:	edd3 7a00 	vldr	s15, [r3]
 8005d98:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 8005ec4 <slalom_L90+0x1d0>
 8005d9c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005da0:	4b49      	ldr	r3, [pc, #292]	; (8005ec8 <slalom_L90+0x1d4>)
 8005da2:	edd3 7a00 	vldr	s15, [r3]
 8005da6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005daa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005dae:	dcf0      	bgt.n	8005d92 <slalom_L90+0x9e>

	target_degaccel_z = 0;
 8005db0:	4b3d      	ldr	r3, [pc, #244]	; (8005ea8 <slalom_L90+0x1b4>)
 8005db2:	f04f 0200 	mov.w	r2, #0
 8005db6:	601a      	str	r2, [r3, #0]

	while(degree_z < target_degree_z+65);
 8005db8:	bf00      	nop
 8005dba:	4b41      	ldr	r3, [pc, #260]	; (8005ec0 <slalom_L90+0x1cc>)
 8005dbc:	edd3 7a00 	vldr	s15, [r3]
 8005dc0:	ed9f 7a42 	vldr	s14, [pc, #264]	; 8005ecc <slalom_L90+0x1d8>
 8005dc4:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005dc8:	4b3f      	ldr	r3, [pc, #252]	; (8005ec8 <slalom_L90+0x1d4>)
 8005dca:	edd3 7a00 	vldr	s15, [r3]
 8005dce:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005dd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005dd6:	dcf0      	bgt.n	8005dba <slalom_L90+0xc6>

	target_degaccel_z = 4000;
 8005dd8:	4b33      	ldr	r3, [pc, #204]	; (8005ea8 <slalom_L90+0x1b4>)
 8005dda:	4a3d      	ldr	r2, [pc, #244]	; (8005ed0 <slalom_L90+0x1dc>)
 8005ddc:	601a      	str	r2, [r3, #0]

	while(degree_z < target_degree_z+90);
 8005dde:	bf00      	nop
 8005de0:	4b37      	ldr	r3, [pc, #220]	; (8005ec0 <slalom_L90+0x1cc>)
 8005de2:	edd3 7a00 	vldr	s15, [r3]
 8005de6:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8005ed4 <slalom_L90+0x1e0>
 8005dea:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005dee:	4b36      	ldr	r3, [pc, #216]	; (8005ec8 <slalom_L90+0x1d4>)
 8005df0:	edd3 7a00 	vldr	s15, [r3]
 8005df4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005df8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005dfc:	dcf0      	bgt.n	8005de0 <slalom_L90+0xec>
	turn_dir(DIR_TURN_L90, 1);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8005dfe:	2101      	movs	r1, #1
 8005e00:	20ff      	movs	r0, #255	; 0xff
 8005e02:	f006 f939 	bl	800c078 <turn_dir>

	MF.FLAG.GYRO = 0;
 8005e06:	4a1f      	ldr	r2, [pc, #124]	; (8005e84 <slalom_L90+0x190>)
 8005e08:	8813      	ldrh	r3, [r2, #0]
 8005e0a:	f36f 2308 	bfc	r3, #8, #1
 8005e0e:	8013      	strh	r3, [r2, #0]

	accel_l = 10000;
 8005e10:	4b1d      	ldr	r3, [pc, #116]	; (8005e88 <slalom_L90+0x194>)
 8005e12:	4a31      	ldr	r2, [pc, #196]	; (8005ed8 <slalom_L90+0x1e4>)
 8005e14:	601a      	str	r2, [r3, #0]
	accel_r = 10000;
 8005e16:	4b1e      	ldr	r3, [pc, #120]	; (8005e90 <slalom_L90+0x19c>)
 8005e18:	4a2f      	ldr	r2, [pc, #188]	; (8005ed8 <slalom_L90+0x1e4>)
 8005e1a:	601a      	str	r2, [r3, #0]
	speed_max_l = SPEED_RUN;
 8005e1c:	4b2f      	ldr	r3, [pc, #188]	; (8005edc <slalom_L90+0x1e8>)
 8005e1e:	4a1e      	ldr	r2, [pc, #120]	; (8005e98 <slalom_L90+0x1a4>)
 8005e20:	601a      	str	r2, [r3, #0]
	speed_max_r = SPEED_RUN;
 8005e22:	4b2f      	ldr	r3, [pc, #188]	; (8005ee0 <slalom_L90+0x1ec>)
 8005e24:	4a1c      	ldr	r2, [pc, #112]	; (8005e98 <slalom_L90+0x1a4>)
 8005e26:	601a      	str	r2, [r3, #0]
	dist_l = dist_r = 0;		//走行距離の初期化
 8005e28:	f04f 0300 	mov.w	r3, #0
 8005e2c:	4a1c      	ldr	r2, [pc, #112]	; (8005ea0 <slalom_L90+0x1ac>)
 8005e2e:	6013      	str	r3, [r2, #0]
 8005e30:	4a1c      	ldr	r2, [pc, #112]	; (8005ea4 <slalom_L90+0x1b0>)
 8005e32:	6013      	str	r3, [r2, #0]
	MF.FLAG.SPD = 1;
 8005e34:	4a13      	ldr	r2, [pc, #76]	; (8005e84 <slalom_L90+0x190>)
 8005e36:	8813      	ldrh	r3, [r2, #0]
 8005e38:	f043 0304 	orr.w	r3, r3, #4
 8005e3c:	8013      	strh	r3, [r2, #0]
	control_start();
 8005e3e:	f7fe ff99 	bl	8004d74 <control_start>
	while(dist_l < SLALOM_OFFSET/*19+5*/ && dist_r < SLALOM_OFFSET/*19+5*/);
 8005e42:	bf00      	nop
 8005e44:	4b17      	ldr	r3, [pc, #92]	; (8005ea4 <slalom_L90+0x1b0>)
 8005e46:	edd3 7a00 	vldr	s15, [r3]
 8005e4a:	eeb3 7a07 	vmov.f32	s14, #55	; 0x41b80000  23.0
 8005e4e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005e52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e56:	d509      	bpl.n	8005e6c <slalom_L90+0x178>
 8005e58:	4b11      	ldr	r3, [pc, #68]	; (8005ea0 <slalom_L90+0x1ac>)
 8005e5a:	edd3 7a00 	vldr	s15, [r3]
 8005e5e:	eeb3 7a07 	vmov.f32	s14, #55	; 0x41b80000  23.0
 8005e62:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005e66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e6a:	d4eb      	bmi.n	8005e44 <slalom_L90+0x150>
	if(MF.FLAG.SCND == 0)get_wall_info();					//壁情報を取得，片壁制御の有効・無効の判断
 8005e6c:	4b05      	ldr	r3, [pc, #20]	; (8005e84 <slalom_L90+0x190>)
 8005e6e:	881b      	ldrh	r3, [r3, #0]
 8005e70:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8005e74:	b2db      	uxtb	r3, r3
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d101      	bne.n	8005e7e <slalom_L90+0x18a>
 8005e7a:	f007 fba9 	bl	800d5d0 <get_wall_info>
}
 8005e7e:	bf00      	nop
 8005e80:	bd80      	pop	{r7, pc}
 8005e82:	bf00      	nop
 8005e84:	20000fe8 	.word	0x20000fe8
 8005e88:	20000ddc 	.word	0x20000ddc
 8005e8c:	c61c4000 	.word	0xc61c4000
 8005e90:	20000b64 	.word	0x20000b64
 8005e94:	20000bd4 	.word	0x20000bd4
 8005e98:	43c80000 	.word	0x43c80000
 8005e9c:	20000fec 	.word	0x20000fec
 8005ea0:	20000b6c 	.word	0x20000b6c
 8005ea4:	20001004 	.word	0x20001004
 8005ea8:	20000bd8 	.word	0x20000bd8
 8005eac:	c57a0000 	.word	0xc57a0000
 8005eb0:	20000228 	.word	0x20000228
 8005eb4:	20000338 	.word	0x20000338
 8005eb8:	c4098000 	.word	0xc4098000
 8005ebc:	20000b74 	.word	0x20000b74
 8005ec0:	20000c7c 	.word	0x20000c7c
 8005ec4:	42180000 	.word	0x42180000
 8005ec8:	20000bdc 	.word	0x20000bdc
 8005ecc:	42820000 	.word	0x42820000
 8005ed0:	457a0000 	.word	0x457a0000
 8005ed4:	42b40000 	.word	0x42b40000
 8005ed8:	461c4000 	.word	0x461c4000
 8005edc:	200007f8 	.word	0x200007f8
 8005ee0:	20000224 	.word	0x20000224

08005ee4 <slalom_R902>:
//slalom_R902
// スラロームで左に90度回転する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void slalom_R902(void){
 8005ee4:	b580      	push	{r7, lr}
 8005ee6:	af00      	add	r7, sp, #0
	//MF.FLAG.LOG = 1;

	MF.FLAG.GYRO = 0;
 8005ee8:	4a52      	ldr	r2, [pc, #328]	; (8006034 <slalom_R902+0x150>)
 8005eea:	8813      	ldrh	r3, [r2, #0]
 8005eec:	f36f 2308 	bfc	r3, #8, #1
 8005ef0:	8013      	strh	r3, [r2, #0]

	accel_l = 10000;
 8005ef2:	4b51      	ldr	r3, [pc, #324]	; (8006038 <slalom_R902+0x154>)
 8005ef4:	4a51      	ldr	r2, [pc, #324]	; (800603c <slalom_R902+0x158>)
 8005ef6:	601a      	str	r2, [r3, #0]
	accel_r = 10000;
 8005ef8:	4b51      	ldr	r3, [pc, #324]	; (8006040 <slalom_R902+0x15c>)
 8005efa:	4a50      	ldr	r2, [pc, #320]	; (800603c <slalom_R902+0x158>)
 8005efc:	601a      	str	r2, [r3, #0]
	speed_max_l = 800;
 8005efe:	4b51      	ldr	r3, [pc, #324]	; (8006044 <slalom_R902+0x160>)
 8005f00:	4a51      	ldr	r2, [pc, #324]	; (8006048 <slalom_R902+0x164>)
 8005f02:	601a      	str	r2, [r3, #0]
	speed_max_r = 800;
 8005f04:	4b51      	ldr	r3, [pc, #324]	; (800604c <slalom_R902+0x168>)
 8005f06:	4a50      	ldr	r2, [pc, #320]	; (8006048 <slalom_R902+0x164>)
 8005f08:	601a      	str	r2, [r3, #0]

//	control_start();
//	while(dist_l < 10 && dist_r < 10);
	drive_stop();
 8005f0a:	f7fe ff0b 	bl	8004d24 <drive_stop>
	control_stop();
 8005f0e:	f7fe ff45 	bl	8004d9c <control_stop>

	MF.FLAG.GYRO = 1;
 8005f12:	4a48      	ldr	r2, [pc, #288]	; (8006034 <slalom_R902+0x150>)
 8005f14:	8813      	ldrh	r3, [r2, #0]
 8005f16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005f1a:	8013      	strh	r3, [r2, #0]

	target_degaccel_z = 20000;
 8005f1c:	4b4c      	ldr	r3, [pc, #304]	; (8006050 <slalom_R902+0x16c>)
 8005f1e:	4a4d      	ldr	r2, [pc, #308]	; (8006054 <slalom_R902+0x170>)
 8005f20:	601a      	str	r2, [r3, #0]
	target_omega_z = 0;
 8005f22:	4b4d      	ldr	r3, [pc, #308]	; (8006058 <slalom_R902+0x174>)
 8005f24:	f04f 0200 	mov.w	r2, #0
 8005f28:	601a      	str	r2, [r3, #0]
	omega_max = 800;
 8005f2a:	4b4c      	ldr	r3, [pc, #304]	; (800605c <slalom_R902+0x178>)
 8005f2c:	4a46      	ldr	r2, [pc, #280]	; (8006048 <slalom_R902+0x164>)
 8005f2e:	601a      	str	r2, [r3, #0]
	speed_G = 800;
 8005f30:	4b4b      	ldr	r3, [pc, #300]	; (8006060 <slalom_R902+0x17c>)
 8005f32:	4a45      	ldr	r2, [pc, #276]	; (8006048 <slalom_R902+0x164>)
 8005f34:	601a      	str	r2, [r3, #0]

	MF.FLAG.DRV = 1;
 8005f36:	4a3f      	ldr	r2, [pc, #252]	; (8006034 <slalom_R902+0x150>)
 8005f38:	8813      	ldrh	r3, [r2, #0]
 8005f3a:	f043 0302 	orr.w	r3, r3, #2
 8005f3e:	8013      	strh	r3, [r2, #0]
	while(degree_z > target_degree_z-32);
 8005f40:	bf00      	nop
 8005f42:	4b48      	ldr	r3, [pc, #288]	; (8006064 <slalom_R902+0x180>)
 8005f44:	edd3 7a00 	vldr	s15, [r3]
 8005f48:	ed9f 7a47 	vldr	s14, [pc, #284]	; 8006068 <slalom_R902+0x184>
 8005f4c:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8005f50:	4b46      	ldr	r3, [pc, #280]	; (800606c <slalom_R902+0x188>)
 8005f52:	edd3 7a00 	vldr	s15, [r3]
 8005f56:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005f5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f5e:	d4f0      	bmi.n	8005f42 <slalom_R902+0x5e>

	target_degaccel_z = 0;
 8005f60:	4b3b      	ldr	r3, [pc, #236]	; (8006050 <slalom_R902+0x16c>)
 8005f62:	f04f 0200 	mov.w	r2, #0
 8005f66:	601a      	str	r2, [r3, #0]

	while(degree_z > target_degree_z-66);
 8005f68:	bf00      	nop
 8005f6a:	4b3e      	ldr	r3, [pc, #248]	; (8006064 <slalom_R902+0x180>)
 8005f6c:	edd3 7a00 	vldr	s15, [r3]
 8005f70:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 8006070 <slalom_R902+0x18c>
 8005f74:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8005f78:	4b3c      	ldr	r3, [pc, #240]	; (800606c <slalom_R902+0x188>)
 8005f7a:	edd3 7a00 	vldr	s15, [r3]
 8005f7e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005f82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f86:	d4f0      	bmi.n	8005f6a <slalom_R902+0x86>

	target_degaccel_z = -20000;
 8005f88:	4b31      	ldr	r3, [pc, #196]	; (8006050 <slalom_R902+0x16c>)
 8005f8a:	4a3a      	ldr	r2, [pc, #232]	; (8006074 <slalom_R902+0x190>)
 8005f8c:	601a      	str	r2, [r3, #0]

	while(degree_z > target_degree_z-80);
 8005f8e:	bf00      	nop
 8005f90:	4b34      	ldr	r3, [pc, #208]	; (8006064 <slalom_R902+0x180>)
 8005f92:	edd3 7a00 	vldr	s15, [r3]
 8005f96:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8006078 <slalom_R902+0x194>
 8005f9a:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8005f9e:	4b33      	ldr	r3, [pc, #204]	; (800606c <slalom_R902+0x188>)
 8005fa0:	edd3 7a00 	vldr	s15, [r3]
 8005fa4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005fa8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005fac:	d4f0      	bmi.n	8005f90 <slalom_R902+0xac>
	turn_dir(DIR_TURN_R90, 1);									//マイクロマウス内部位置情報でも左回転処理&目標角度左90度
 8005fae:	2101      	movs	r1, #1
 8005fb0:	2001      	movs	r0, #1
 8005fb2:	f006 f861 	bl	800c078 <turn_dir>

	MF.FLAG.GYRO = 0;
 8005fb6:	4a1f      	ldr	r2, [pc, #124]	; (8006034 <slalom_R902+0x150>)
 8005fb8:	8813      	ldrh	r3, [r2, #0]
 8005fba:	f36f 2308 	bfc	r3, #8, #1
 8005fbe:	8013      	strh	r3, [r2, #0]

	accel_l = 10000;
 8005fc0:	4b1d      	ldr	r3, [pc, #116]	; (8006038 <slalom_R902+0x154>)
 8005fc2:	4a1e      	ldr	r2, [pc, #120]	; (800603c <slalom_R902+0x158>)
 8005fc4:	601a      	str	r2, [r3, #0]
	accel_r = 10000;
 8005fc6:	4b1e      	ldr	r3, [pc, #120]	; (8006040 <slalom_R902+0x15c>)
 8005fc8:	4a1c      	ldr	r2, [pc, #112]	; (800603c <slalom_R902+0x158>)
 8005fca:	601a      	str	r2, [r3, #0]
	speed_max_l = SPEED_HIGH;
 8005fcc:	4b1d      	ldr	r3, [pc, #116]	; (8006044 <slalom_R902+0x160>)
 8005fce:	4a1e      	ldr	r2, [pc, #120]	; (8006048 <slalom_R902+0x164>)
 8005fd0:	601a      	str	r2, [r3, #0]
	speed_max_r = SPEED_HIGH;
 8005fd2:	4b1e      	ldr	r3, [pc, #120]	; (800604c <slalom_R902+0x168>)
 8005fd4:	4a1c      	ldr	r2, [pc, #112]	; (8006048 <slalom_R902+0x164>)
 8005fd6:	601a      	str	r2, [r3, #0]
	dist_l = dist_r = 0;
 8005fd8:	f04f 0300 	mov.w	r3, #0
 8005fdc:	4a27      	ldr	r2, [pc, #156]	; (800607c <slalom_R902+0x198>)
 8005fde:	6013      	str	r3, [r2, #0]
 8005fe0:	4a27      	ldr	r2, [pc, #156]	; (8006080 <slalom_R902+0x19c>)
 8005fe2:	6013      	str	r3, [r2, #0]
	MF.FLAG.SPD = 1;
 8005fe4:	4a13      	ldr	r2, [pc, #76]	; (8006034 <slalom_R902+0x150>)
 8005fe6:	8813      	ldrh	r3, [r2, #0]
 8005fe8:	f043 0304 	orr.w	r3, r3, #4
 8005fec:	8013      	strh	r3, [r2, #0]
	control_start();
 8005fee:	f7fe fec1 	bl	8004d74 <control_start>
	while(dist_l < 34 && dist_r < 34);
 8005ff2:	bf00      	nop
 8005ff4:	4b22      	ldr	r3, [pc, #136]	; (8006080 <slalom_R902+0x19c>)
 8005ff6:	edd3 7a00 	vldr	s15, [r3]
 8005ffa:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8006084 <slalom_R902+0x1a0>
 8005ffe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006002:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006006:	d509      	bpl.n	800601c <slalom_R902+0x138>
 8006008:	4b1c      	ldr	r3, [pc, #112]	; (800607c <slalom_R902+0x198>)
 800600a:	edd3 7a00 	vldr	s15, [r3]
 800600e:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8006084 <slalom_R902+0x1a0>
 8006012:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006016:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800601a:	d4eb      	bmi.n	8005ff4 <slalom_R902+0x110>
	if(MF.FLAG.SCND == 0)get_wall_info();					//壁情報を取得，片壁制御の有効・無効の判断
 800601c:	4b05      	ldr	r3, [pc, #20]	; (8006034 <slalom_R902+0x150>)
 800601e:	881b      	ldrh	r3, [r3, #0]
 8006020:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8006024:	b2db      	uxtb	r3, r3
 8006026:	2b00      	cmp	r3, #0
 8006028:	d101      	bne.n	800602e <slalom_R902+0x14a>
 800602a:	f007 fad1 	bl	800d5d0 <get_wall_info>
}
 800602e:	bf00      	nop
 8006030:	bd80      	pop	{r7, pc}
 8006032:	bf00      	nop
 8006034:	20000fe8 	.word	0x20000fe8
 8006038:	20000ddc 	.word	0x20000ddc
 800603c:	461c4000 	.word	0x461c4000
 8006040:	20000b64 	.word	0x20000b64
 8006044:	200007f8 	.word	0x200007f8
 8006048:	44480000 	.word	0x44480000
 800604c:	20000224 	.word	0x20000224
 8006050:	20000bd8 	.word	0x20000bd8
 8006054:	469c4000 	.word	0x469c4000
 8006058:	20000228 	.word	0x20000228
 800605c:	20000b68 	.word	0x20000b68
 8006060:	20000b74 	.word	0x20000b74
 8006064:	20000c7c 	.word	0x20000c7c
 8006068:	42000000 	.word	0x42000000
 800606c:	20000bdc 	.word	0x20000bdc
 8006070:	42840000 	.word	0x42840000
 8006074:	c69c4000 	.word	0xc69c4000
 8006078:	42a00000 	.word	0x42a00000
 800607c:	20000b6c 	.word	0x20000b6c
 8006080:	20001004 	.word	0x20001004
 8006084:	42080000 	.word	0x42080000

08006088 <slalom_L902>:
//slalom_L90
// スラロームで右に90度回転する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void slalom_L902(void){
 8006088:	b5b0      	push	{r4, r5, r7, lr}
 800608a:	af00      	add	r7, sp, #0
	MF.FLAG.GYRO = 0;
 800608c:	4a5a      	ldr	r2, [pc, #360]	; (80061f8 <slalom_L902+0x170>)
 800608e:	8813      	ldrh	r3, [r2, #0]
 8006090:	f36f 2308 	bfc	r3, #8, #1
 8006094:	8013      	strh	r3, [r2, #0]

	accel_l = 10000;
 8006096:	4b59      	ldr	r3, [pc, #356]	; (80061fc <slalom_L902+0x174>)
 8006098:	4a59      	ldr	r2, [pc, #356]	; (8006200 <slalom_L902+0x178>)
 800609a:	601a      	str	r2, [r3, #0]
	accel_r = 10000;
 800609c:	4b59      	ldr	r3, [pc, #356]	; (8006204 <slalom_L902+0x17c>)
 800609e:	4a58      	ldr	r2, [pc, #352]	; (8006200 <slalom_L902+0x178>)
 80060a0:	601a      	str	r2, [r3, #0]
	speed_max_l = 800;
 80060a2:	4b59      	ldr	r3, [pc, #356]	; (8006208 <slalom_L902+0x180>)
 80060a4:	4a59      	ldr	r2, [pc, #356]	; (800620c <slalom_L902+0x184>)
 80060a6:	601a      	str	r2, [r3, #0]
	speed_max_r = 800;
 80060a8:	4b59      	ldr	r3, [pc, #356]	; (8006210 <slalom_L902+0x188>)
 80060aa:	4a58      	ldr	r2, [pc, #352]	; (800620c <slalom_L902+0x184>)
 80060ac:	601a      	str	r2, [r3, #0]

//	control_start();
//	while(dist_l < 18.5 && dist_r < 18.5);
	drive_stop();
 80060ae:	f7fe fe39 	bl	8004d24 <drive_stop>
	control_stop();
 80060b2:	f7fe fe73 	bl	8004d9c <control_stop>

	MF.FLAG.GYRO = 1;
 80060b6:	4a50      	ldr	r2, [pc, #320]	; (80061f8 <slalom_L902+0x170>)
 80060b8:	8813      	ldrh	r3, [r2, #0]
 80060ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80060be:	8013      	strh	r3, [r2, #0]

	target_degaccel_z = -20000;
 80060c0:	4b54      	ldr	r3, [pc, #336]	; (8006214 <slalom_L902+0x18c>)
 80060c2:	4a55      	ldr	r2, [pc, #340]	; (8006218 <slalom_L902+0x190>)
 80060c4:	601a      	str	r2, [r3, #0]
	target_omega_z = 0;
 80060c6:	4b55      	ldr	r3, [pc, #340]	; (800621c <slalom_L902+0x194>)
 80060c8:	f04f 0200 	mov.w	r2, #0
 80060cc:	601a      	str	r2, [r3, #0]
	omega_min = -800;
 80060ce:	4b54      	ldr	r3, [pc, #336]	; (8006220 <slalom_L902+0x198>)
 80060d0:	4a54      	ldr	r2, [pc, #336]	; (8006224 <slalom_L902+0x19c>)
 80060d2:	601a      	str	r2, [r3, #0]
	speed_G = 800;
 80060d4:	4b54      	ldr	r3, [pc, #336]	; (8006228 <slalom_L902+0x1a0>)
 80060d6:	4a4d      	ldr	r2, [pc, #308]	; (800620c <slalom_L902+0x184>)
 80060d8:	601a      	str	r2, [r3, #0]

	MF.FLAG.DRV = 1;
 80060da:	4a47      	ldr	r2, [pc, #284]	; (80061f8 <slalom_L902+0x170>)
 80060dc:	8813      	ldrh	r3, [r2, #0]
 80060de:	f043 0302 	orr.w	r3, r3, #2
 80060e2:	8013      	strh	r3, [r2, #0]
	while(degree_z < target_degree_z+32);
 80060e4:	bf00      	nop
 80060e6:	4b51      	ldr	r3, [pc, #324]	; (800622c <slalom_L902+0x1a4>)
 80060e8:	edd3 7a00 	vldr	s15, [r3]
 80060ec:	ed9f 7a50 	vldr	s14, [pc, #320]	; 8006230 <slalom_L902+0x1a8>
 80060f0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80060f4:	4b4f      	ldr	r3, [pc, #316]	; (8006234 <slalom_L902+0x1ac>)
 80060f6:	edd3 7a00 	vldr	s15, [r3]
 80060fa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80060fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006102:	dcf0      	bgt.n	80060e6 <slalom_L902+0x5e>

	target_degaccel_z = 0;
 8006104:	4b43      	ldr	r3, [pc, #268]	; (8006214 <slalom_L902+0x18c>)
 8006106:	f04f 0200 	mov.w	r2, #0
 800610a:	601a      	str	r2, [r3, #0]

	while(degree_z < target_degree_z+66.3);
 800610c:	bf00      	nop
 800610e:	4b49      	ldr	r3, [pc, #292]	; (8006234 <slalom_L902+0x1ac>)
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	4618      	mov	r0, r3
 8006114:	f7fa fa10 	bl	8000538 <__aeabi_f2d>
 8006118:	4604      	mov	r4, r0
 800611a:	460d      	mov	r5, r1
 800611c:	4b43      	ldr	r3, [pc, #268]	; (800622c <slalom_L902+0x1a4>)
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	4618      	mov	r0, r3
 8006122:	f7fa fa09 	bl	8000538 <__aeabi_f2d>
 8006126:	a332      	add	r3, pc, #200	; (adr r3, 80061f0 <slalom_L902+0x168>)
 8006128:	e9d3 2300 	ldrd	r2, r3, [r3]
 800612c:	f7fa f8a6 	bl	800027c <__adddf3>
 8006130:	4602      	mov	r2, r0
 8006132:	460b      	mov	r3, r1
 8006134:	4620      	mov	r0, r4
 8006136:	4629      	mov	r1, r5
 8006138:	f7fa fcc8 	bl	8000acc <__aeabi_dcmplt>
 800613c:	4603      	mov	r3, r0
 800613e:	2b00      	cmp	r3, #0
 8006140:	d1e5      	bne.n	800610e <slalom_L902+0x86>

	target_degaccel_z = 20000;
 8006142:	4b34      	ldr	r3, [pc, #208]	; (8006214 <slalom_L902+0x18c>)
 8006144:	4a3c      	ldr	r2, [pc, #240]	; (8006238 <slalom_L902+0x1b0>)
 8006146:	601a      	str	r2, [r3, #0]

	while(degree_z < target_degree_z+80);
 8006148:	bf00      	nop
 800614a:	4b38      	ldr	r3, [pc, #224]	; (800622c <slalom_L902+0x1a4>)
 800614c:	edd3 7a00 	vldr	s15, [r3]
 8006150:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 800623c <slalom_L902+0x1b4>
 8006154:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006158:	4b36      	ldr	r3, [pc, #216]	; (8006234 <slalom_L902+0x1ac>)
 800615a:	edd3 7a00 	vldr	s15, [r3]
 800615e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006162:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006166:	dcf0      	bgt.n	800614a <slalom_L902+0xc2>
	turn_dir(DIR_TURN_L90, 1);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8006168:	2101      	movs	r1, #1
 800616a:	20ff      	movs	r0, #255	; 0xff
 800616c:	f005 ff84 	bl	800c078 <turn_dir>

	MF.FLAG.GYRO = 0;
 8006170:	4a21      	ldr	r2, [pc, #132]	; (80061f8 <slalom_L902+0x170>)
 8006172:	8813      	ldrh	r3, [r2, #0]
 8006174:	f36f 2308 	bfc	r3, #8, #1
 8006178:	8013      	strh	r3, [r2, #0]

	accel_l = 10000;
 800617a:	4b20      	ldr	r3, [pc, #128]	; (80061fc <slalom_L902+0x174>)
 800617c:	4a20      	ldr	r2, [pc, #128]	; (8006200 <slalom_L902+0x178>)
 800617e:	601a      	str	r2, [r3, #0]
	accel_r = 10000;
 8006180:	4b20      	ldr	r3, [pc, #128]	; (8006204 <slalom_L902+0x17c>)
 8006182:	4a1f      	ldr	r2, [pc, #124]	; (8006200 <slalom_L902+0x178>)
 8006184:	601a      	str	r2, [r3, #0]
	speed_max_l = SPEED_HIGH;
 8006186:	4b20      	ldr	r3, [pc, #128]	; (8006208 <slalom_L902+0x180>)
 8006188:	4a20      	ldr	r2, [pc, #128]	; (800620c <slalom_L902+0x184>)
 800618a:	601a      	str	r2, [r3, #0]
	speed_max_r = SPEED_HIGH;
 800618c:	4b20      	ldr	r3, [pc, #128]	; (8006210 <slalom_L902+0x188>)
 800618e:	4a1f      	ldr	r2, [pc, #124]	; (800620c <slalom_L902+0x184>)
 8006190:	601a      	str	r2, [r3, #0]
	dist_l = dist_r = 0;
 8006192:	f04f 0300 	mov.w	r3, #0
 8006196:	4a2a      	ldr	r2, [pc, #168]	; (8006240 <slalom_L902+0x1b8>)
 8006198:	6013      	str	r3, [r2, #0]
 800619a:	4a2a      	ldr	r2, [pc, #168]	; (8006244 <slalom_L902+0x1bc>)
 800619c:	6013      	str	r3, [r2, #0]
	MF.FLAG.SPD = 1;
 800619e:	4a16      	ldr	r2, [pc, #88]	; (80061f8 <slalom_L902+0x170>)
 80061a0:	8813      	ldrh	r3, [r2, #0]
 80061a2:	f043 0304 	orr.w	r3, r3, #4
 80061a6:	8013      	strh	r3, [r2, #0]
	control_start();
 80061a8:	f7fe fde4 	bl	8004d74 <control_start>
	while(dist_l < 34 && dist_r < 34);
 80061ac:	bf00      	nop
 80061ae:	4b25      	ldr	r3, [pc, #148]	; (8006244 <slalom_L902+0x1bc>)
 80061b0:	edd3 7a00 	vldr	s15, [r3]
 80061b4:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8006248 <slalom_L902+0x1c0>
 80061b8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80061bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80061c0:	d509      	bpl.n	80061d6 <slalom_L902+0x14e>
 80061c2:	4b1f      	ldr	r3, [pc, #124]	; (8006240 <slalom_L902+0x1b8>)
 80061c4:	edd3 7a00 	vldr	s15, [r3]
 80061c8:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8006248 <slalom_L902+0x1c0>
 80061cc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80061d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80061d4:	d4eb      	bmi.n	80061ae <slalom_L902+0x126>
	if(MF.FLAG.SCND == 0)get_wall_info();					//壁情報を取得，片壁制御の有効・無効の判断
 80061d6:	4b08      	ldr	r3, [pc, #32]	; (80061f8 <slalom_L902+0x170>)
 80061d8:	881b      	ldrh	r3, [r3, #0]
 80061da:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80061de:	b2db      	uxtb	r3, r3
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d101      	bne.n	80061e8 <slalom_L902+0x160>
 80061e4:	f007 f9f4 	bl	800d5d0 <get_wall_info>
}
 80061e8:	bf00      	nop
 80061ea:	bdb0      	pop	{r4, r5, r7, pc}
 80061ec:	f3af 8000 	nop.w
 80061f0:	33333333 	.word	0x33333333
 80061f4:	40509333 	.word	0x40509333
 80061f8:	20000fe8 	.word	0x20000fe8
 80061fc:	20000ddc 	.word	0x20000ddc
 8006200:	461c4000 	.word	0x461c4000
 8006204:	20000b64 	.word	0x20000b64
 8006208:	200007f8 	.word	0x200007f8
 800620c:	44480000 	.word	0x44480000
 8006210:	20000224 	.word	0x20000224
 8006214:	20000bd8 	.word	0x20000bd8
 8006218:	c69c4000 	.word	0xc69c4000
 800621c:	20000228 	.word	0x20000228
 8006220:	20000338 	.word	0x20000338
 8006224:	c4480000 	.word	0xc4480000
 8006228:	20000b74 	.word	0x20000b74
 800622c:	20000c7c 	.word	0x20000c7c
 8006230:	42000000 	.word	0x42000000
 8006234:	20000bdc 	.word	0x20000bdc
 8006238:	469c4000 	.word	0x469c4000
 800623c:	42a00000 	.word	0x42a00000
 8006240:	20000b6c 	.word	0x20000b6c
 8006244:	20001004 	.word	0x20001004
 8006248:	42080000 	.word	0x42080000

0800624c <Lslalom_R90>:
//Lslalom_R90
// スラロームで右に90度回転する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void Lslalom_R90(void){
 800624c:	b580      	push	{r7, lr}
 800624e:	af00      	add	r7, sp, #0
	MF.FLAG.GYRO = 0;
 8006250:	4a60      	ldr	r2, [pc, #384]	; (80063d4 <Lslalom_R90+0x188>)
 8006252:	8813      	ldrh	r3, [r2, #0]
 8006254:	f36f 2308 	bfc	r3, #8, #1
 8006258:	8013      	strh	r3, [r2, #0]

	accel_l = 10000;
 800625a:	4b5f      	ldr	r3, [pc, #380]	; (80063d8 <Lslalom_R90+0x18c>)
 800625c:	4a5f      	ldr	r2, [pc, #380]	; (80063dc <Lslalom_R90+0x190>)
 800625e:	601a      	str	r2, [r3, #0]
	accel_r = 10000;
 8006260:	4b5f      	ldr	r3, [pc, #380]	; (80063e0 <Lslalom_R90+0x194>)
 8006262:	4a5e      	ldr	r2, [pc, #376]	; (80063dc <Lslalom_R90+0x190>)
 8006264:	601a      	str	r2, [r3, #0]
	speed_max_l = 400;
 8006266:	4b5f      	ldr	r3, [pc, #380]	; (80063e4 <Lslalom_R90+0x198>)
 8006268:	4a5f      	ldr	r2, [pc, #380]	; (80063e8 <Lslalom_R90+0x19c>)
 800626a:	601a      	str	r2, [r3, #0]
	speed_max_r = 400;
 800626c:	4b5f      	ldr	r3, [pc, #380]	; (80063ec <Lslalom_R90+0x1a0>)
 800626e:	4a5e      	ldr	r2, [pc, #376]	; (80063e8 <Lslalom_R90+0x19c>)
 8006270:	601a      	str	r2, [r3, #0]

	control_start();
 8006272:	f7fe fd7f 	bl	8004d74 <control_start>
	dist_l = dist_r = 0;
 8006276:	f04f 0300 	mov.w	r3, #0
 800627a:	4a5d      	ldr	r2, [pc, #372]	; (80063f0 <Lslalom_R90+0x1a4>)
 800627c:	6013      	str	r3, [r2, #0]
 800627e:	4a5d      	ldr	r2, [pc, #372]	; (80063f4 <Lslalom_R90+0x1a8>)
 8006280:	6013      	str	r3, [r2, #0]
	while(dist_l < 24 && dist_r < 24);
 8006282:	bf00      	nop
 8006284:	4b5b      	ldr	r3, [pc, #364]	; (80063f4 <Lslalom_R90+0x1a8>)
 8006286:	edd3 7a00 	vldr	s15, [r3]
 800628a:	eeb3 7a08 	vmov.f32	s14, #56	; 0x41c00000  24.0
 800628e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006292:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006296:	d509      	bpl.n	80062ac <Lslalom_R90+0x60>
 8006298:	4b55      	ldr	r3, [pc, #340]	; (80063f0 <Lslalom_R90+0x1a4>)
 800629a:	edd3 7a00 	vldr	s15, [r3]
 800629e:	eeb3 7a08 	vmov.f32	s14, #56	; 0x41c00000  24.0
 80062a2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80062a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80062aa:	d4eb      	bmi.n	8006284 <Lslalom_R90+0x38>
	drive_stop();
 80062ac:	f7fe fd3a 	bl	8004d24 <drive_stop>
	control_stop();
 80062b0:	f7fe fd74 	bl	8004d9c <control_stop>

	MF.FLAG.GYRO = 1;
 80062b4:	4a47      	ldr	r2, [pc, #284]	; (80063d4 <Lslalom_R90+0x188>)
 80062b6:	8813      	ldrh	r3, [r2, #0]
 80062b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80062bc:	8013      	strh	r3, [r2, #0]

	target_degaccel_z = 1000;
 80062be:	4b4e      	ldr	r3, [pc, #312]	; (80063f8 <Lslalom_R90+0x1ac>)
 80062c0:	4a4e      	ldr	r2, [pc, #312]	; (80063fc <Lslalom_R90+0x1b0>)
 80062c2:	601a      	str	r2, [r3, #0]
	target_omega_z = 0;
 80062c4:	4b4e      	ldr	r3, [pc, #312]	; (8006400 <Lslalom_R90+0x1b4>)
 80062c6:	f04f 0200 	mov.w	r2, #0
 80062ca:	601a      	str	r2, [r3, #0]
	omega_max = 250;
 80062cc:	4b4d      	ldr	r3, [pc, #308]	; (8006404 <Lslalom_R90+0x1b8>)
 80062ce:	4a4e      	ldr	r2, [pc, #312]	; (8006408 <Lslalom_R90+0x1bc>)
 80062d0:	601a      	str	r2, [r3, #0]
	speed_G = 400;
 80062d2:	4b4e      	ldr	r3, [pc, #312]	; (800640c <Lslalom_R90+0x1c0>)
 80062d4:	4a44      	ldr	r2, [pc, #272]	; (80063e8 <Lslalom_R90+0x19c>)
 80062d6:	601a      	str	r2, [r3, #0]

	MF.FLAG.DRV = 1;
 80062d8:	4a3e      	ldr	r2, [pc, #248]	; (80063d4 <Lslalom_R90+0x188>)
 80062da:	8813      	ldrh	r3, [r2, #0]
 80062dc:	f043 0302 	orr.w	r3, r3, #2
 80062e0:	8013      	strh	r3, [r2, #0]
	while(degree_z > target_degree_z-30);
 80062e2:	bf00      	nop
 80062e4:	4b4a      	ldr	r3, [pc, #296]	; (8006410 <Lslalom_R90+0x1c4>)
 80062e6:	edd3 7a00 	vldr	s15, [r3]
 80062ea:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 80062ee:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80062f2:	4b48      	ldr	r3, [pc, #288]	; (8006414 <Lslalom_R90+0x1c8>)
 80062f4:	edd3 7a00 	vldr	s15, [r3]
 80062f8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80062fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006300:	d4f0      	bmi.n	80062e4 <Lslalom_R90+0x98>

	target_degaccel_z = 0;
 8006302:	4b3d      	ldr	r3, [pc, #244]	; (80063f8 <Lslalom_R90+0x1ac>)
 8006304:	f04f 0200 	mov.w	r2, #0
 8006308:	601a      	str	r2, [r3, #0]

	while(degree_z > target_degree_z-70);
 800630a:	bf00      	nop
 800630c:	4b40      	ldr	r3, [pc, #256]	; (8006410 <Lslalom_R90+0x1c4>)
 800630e:	edd3 7a00 	vldr	s15, [r3]
 8006312:	ed9f 7a41 	vldr	s14, [pc, #260]	; 8006418 <Lslalom_R90+0x1cc>
 8006316:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800631a:	4b3e      	ldr	r3, [pc, #248]	; (8006414 <Lslalom_R90+0x1c8>)
 800631c:	edd3 7a00 	vldr	s15, [r3]
 8006320:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006324:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006328:	d4f0      	bmi.n	800630c <Lslalom_R90+0xc0>

	target_degaccel_z = -1000;
 800632a:	4b33      	ldr	r3, [pc, #204]	; (80063f8 <Lslalom_R90+0x1ac>)
 800632c:	4a3b      	ldr	r2, [pc, #236]	; (800641c <Lslalom_R90+0x1d0>)
 800632e:	601a      	str	r2, [r3, #0]

	while(degree_z > target_degree_z-90);
 8006330:	bf00      	nop
 8006332:	4b37      	ldr	r3, [pc, #220]	; (8006410 <Lslalom_R90+0x1c4>)
 8006334:	edd3 7a00 	vldr	s15, [r3]
 8006338:	ed9f 7a39 	vldr	s14, [pc, #228]	; 8006420 <Lslalom_R90+0x1d4>
 800633c:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8006340:	4b34      	ldr	r3, [pc, #208]	; (8006414 <Lslalom_R90+0x1c8>)
 8006342:	edd3 7a00 	vldr	s15, [r3]
 8006346:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800634a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800634e:	d4f0      	bmi.n	8006332 <Lslalom_R90+0xe6>
	turn_dir(DIR_TURN_R90, 1);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8006350:	2101      	movs	r1, #1
 8006352:	2001      	movs	r0, #1
 8006354:	f005 fe90 	bl	800c078 <turn_dir>

	MF.FLAG.GYRO = 0;
 8006358:	4a1e      	ldr	r2, [pc, #120]	; (80063d4 <Lslalom_R90+0x188>)
 800635a:	8813      	ldrh	r3, [r2, #0]
 800635c:	f36f 2308 	bfc	r3, #8, #1
 8006360:	8013      	strh	r3, [r2, #0]

	accel_l = 10000;
 8006362:	4b1d      	ldr	r3, [pc, #116]	; (80063d8 <Lslalom_R90+0x18c>)
 8006364:	4a1d      	ldr	r2, [pc, #116]	; (80063dc <Lslalom_R90+0x190>)
 8006366:	601a      	str	r2, [r3, #0]
	accel_r = 10000;
 8006368:	4b1d      	ldr	r3, [pc, #116]	; (80063e0 <Lslalom_R90+0x194>)
 800636a:	4a1c      	ldr	r2, [pc, #112]	; (80063dc <Lslalom_R90+0x190>)
 800636c:	601a      	str	r2, [r3, #0]
	speed_max_l = SPEED_RUN;
 800636e:	4b1d      	ldr	r3, [pc, #116]	; (80063e4 <Lslalom_R90+0x198>)
 8006370:	4a1d      	ldr	r2, [pc, #116]	; (80063e8 <Lslalom_R90+0x19c>)
 8006372:	601a      	str	r2, [r3, #0]
	speed_max_r = SPEED_RUN;
 8006374:	4b1d      	ldr	r3, [pc, #116]	; (80063ec <Lslalom_R90+0x1a0>)
 8006376:	4a1c      	ldr	r2, [pc, #112]	; (80063e8 <Lslalom_R90+0x19c>)
 8006378:	601a      	str	r2, [r3, #0]
	dist_l = dist_r = 0;
 800637a:	f04f 0300 	mov.w	r3, #0
 800637e:	4a1c      	ldr	r2, [pc, #112]	; (80063f0 <Lslalom_R90+0x1a4>)
 8006380:	6013      	str	r3, [r2, #0]
 8006382:	4a1c      	ldr	r2, [pc, #112]	; (80063f4 <Lslalom_R90+0x1a8>)
 8006384:	6013      	str	r3, [r2, #0]
	MF.FLAG.SPD = 1;
 8006386:	4a13      	ldr	r2, [pc, #76]	; (80063d4 <Lslalom_R90+0x188>)
 8006388:	8813      	ldrh	r3, [r2, #0]
 800638a:	f043 0304 	orr.w	r3, r3, #4
 800638e:	8013      	strh	r3, [r2, #0]
	control_start();
 8006390:	f7fe fcf0 	bl	8004d74 <control_start>
	while(dist_l < 24 && dist_r < 24);
 8006394:	bf00      	nop
 8006396:	4b17      	ldr	r3, [pc, #92]	; (80063f4 <Lslalom_R90+0x1a8>)
 8006398:	edd3 7a00 	vldr	s15, [r3]
 800639c:	eeb3 7a08 	vmov.f32	s14, #56	; 0x41c00000  24.0
 80063a0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80063a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80063a8:	d509      	bpl.n	80063be <Lslalom_R90+0x172>
 80063aa:	4b11      	ldr	r3, [pc, #68]	; (80063f0 <Lslalom_R90+0x1a4>)
 80063ac:	edd3 7a00 	vldr	s15, [r3]
 80063b0:	eeb3 7a08 	vmov.f32	s14, #56	; 0x41c00000  24.0
 80063b4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80063b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80063bc:	d4eb      	bmi.n	8006396 <Lslalom_R90+0x14a>
	if(MF.FLAG.SCND == 0)get_wall_info();					//壁情報を取得，片壁制御の有効・無効の判断
 80063be:	4b05      	ldr	r3, [pc, #20]	; (80063d4 <Lslalom_R90+0x188>)
 80063c0:	881b      	ldrh	r3, [r3, #0]
 80063c2:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80063c6:	b2db      	uxtb	r3, r3
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d101      	bne.n	80063d0 <Lslalom_R90+0x184>
 80063cc:	f007 f900 	bl	800d5d0 <get_wall_info>
}
 80063d0:	bf00      	nop
 80063d2:	bd80      	pop	{r7, pc}
 80063d4:	20000fe8 	.word	0x20000fe8
 80063d8:	20000ddc 	.word	0x20000ddc
 80063dc:	461c4000 	.word	0x461c4000
 80063e0:	20000b64 	.word	0x20000b64
 80063e4:	200007f8 	.word	0x200007f8
 80063e8:	43c80000 	.word	0x43c80000
 80063ec:	20000224 	.word	0x20000224
 80063f0:	20000b6c 	.word	0x20000b6c
 80063f4:	20001004 	.word	0x20001004
 80063f8:	20000bd8 	.word	0x20000bd8
 80063fc:	447a0000 	.word	0x447a0000
 8006400:	20000228 	.word	0x20000228
 8006404:	20000b68 	.word	0x20000b68
 8006408:	437a0000 	.word	0x437a0000
 800640c:	20000b74 	.word	0x20000b74
 8006410:	20000c7c 	.word	0x20000c7c
 8006414:	20000bdc 	.word	0x20000bdc
 8006418:	428c0000 	.word	0x428c0000
 800641c:	c47a0000 	.word	0xc47a0000
 8006420:	42b40000 	.word	0x42b40000

08006424 <Lslalom_L90>:
//Lslalom_L90
// 大回りスラロームで右に90度回転する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void Lslalom_L90(void){
 8006424:	b580      	push	{r7, lr}
 8006426:	af00      	add	r7, sp, #0
	MF.FLAG.GYRO = 0;
 8006428:	4a60      	ldr	r2, [pc, #384]	; (80065ac <Lslalom_L90+0x188>)
 800642a:	8813      	ldrh	r3, [r2, #0]
 800642c:	f36f 2308 	bfc	r3, #8, #1
 8006430:	8013      	strh	r3, [r2, #0]

	accel_l = 10000;
 8006432:	4b5f      	ldr	r3, [pc, #380]	; (80065b0 <Lslalom_L90+0x18c>)
 8006434:	4a5f      	ldr	r2, [pc, #380]	; (80065b4 <Lslalom_L90+0x190>)
 8006436:	601a      	str	r2, [r3, #0]
	accel_r = 10000;
 8006438:	4b5f      	ldr	r3, [pc, #380]	; (80065b8 <Lslalom_L90+0x194>)
 800643a:	4a5e      	ldr	r2, [pc, #376]	; (80065b4 <Lslalom_L90+0x190>)
 800643c:	601a      	str	r2, [r3, #0]
	speed_max_l = 400;
 800643e:	4b5f      	ldr	r3, [pc, #380]	; (80065bc <Lslalom_L90+0x198>)
 8006440:	4a5f      	ldr	r2, [pc, #380]	; (80065c0 <Lslalom_L90+0x19c>)
 8006442:	601a      	str	r2, [r3, #0]
	speed_max_r = 400;
 8006444:	4b5f      	ldr	r3, [pc, #380]	; (80065c4 <Lslalom_L90+0x1a0>)
 8006446:	4a5e      	ldr	r2, [pc, #376]	; (80065c0 <Lslalom_L90+0x19c>)
 8006448:	601a      	str	r2, [r3, #0]

	control_start();
 800644a:	f7fe fc93 	bl	8004d74 <control_start>
	dist_l = dist_r = 0;
 800644e:	f04f 0300 	mov.w	r3, #0
 8006452:	4a5d      	ldr	r2, [pc, #372]	; (80065c8 <Lslalom_L90+0x1a4>)
 8006454:	6013      	str	r3, [r2, #0]
 8006456:	4a5d      	ldr	r2, [pc, #372]	; (80065cc <Lslalom_L90+0x1a8>)
 8006458:	6013      	str	r3, [r2, #0]
	while(dist_l < 24 && dist_r < 24);
 800645a:	bf00      	nop
 800645c:	4b5b      	ldr	r3, [pc, #364]	; (80065cc <Lslalom_L90+0x1a8>)
 800645e:	edd3 7a00 	vldr	s15, [r3]
 8006462:	eeb3 7a08 	vmov.f32	s14, #56	; 0x41c00000  24.0
 8006466:	eef4 7ac7 	vcmpe.f32	s15, s14
 800646a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800646e:	d509      	bpl.n	8006484 <Lslalom_L90+0x60>
 8006470:	4b55      	ldr	r3, [pc, #340]	; (80065c8 <Lslalom_L90+0x1a4>)
 8006472:	edd3 7a00 	vldr	s15, [r3]
 8006476:	eeb3 7a08 	vmov.f32	s14, #56	; 0x41c00000  24.0
 800647a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800647e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006482:	d4eb      	bmi.n	800645c <Lslalom_L90+0x38>
	drive_stop();
 8006484:	f7fe fc4e 	bl	8004d24 <drive_stop>
	control_stop();
 8006488:	f7fe fc88 	bl	8004d9c <control_stop>

	MF.FLAG.GYRO = 1;
 800648c:	4a47      	ldr	r2, [pc, #284]	; (80065ac <Lslalom_L90+0x188>)
 800648e:	8813      	ldrh	r3, [r2, #0]
 8006490:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006494:	8013      	strh	r3, [r2, #0]

	target_degaccel_z = -1000;
 8006496:	4b4e      	ldr	r3, [pc, #312]	; (80065d0 <Lslalom_L90+0x1ac>)
 8006498:	4a4e      	ldr	r2, [pc, #312]	; (80065d4 <Lslalom_L90+0x1b0>)
 800649a:	601a      	str	r2, [r3, #0]
	target_omega_z = 0;
 800649c:	4b4e      	ldr	r3, [pc, #312]	; (80065d8 <Lslalom_L90+0x1b4>)
 800649e:	f04f 0200 	mov.w	r2, #0
 80064a2:	601a      	str	r2, [r3, #0]
	omega_min = -250;
 80064a4:	4b4d      	ldr	r3, [pc, #308]	; (80065dc <Lslalom_L90+0x1b8>)
 80064a6:	4a4e      	ldr	r2, [pc, #312]	; (80065e0 <Lslalom_L90+0x1bc>)
 80064a8:	601a      	str	r2, [r3, #0]
	speed_G = 400;
 80064aa:	4b4e      	ldr	r3, [pc, #312]	; (80065e4 <Lslalom_L90+0x1c0>)
 80064ac:	4a44      	ldr	r2, [pc, #272]	; (80065c0 <Lslalom_L90+0x19c>)
 80064ae:	601a      	str	r2, [r3, #0]

	MF.FLAG.DRV = 1;
 80064b0:	4a3e      	ldr	r2, [pc, #248]	; (80065ac <Lslalom_L90+0x188>)
 80064b2:	8813      	ldrh	r3, [r2, #0]
 80064b4:	f043 0302 	orr.w	r3, r3, #2
 80064b8:	8013      	strh	r3, [r2, #0]
	while(degree_z < target_degree_z+30);
 80064ba:	bf00      	nop
 80064bc:	4b4a      	ldr	r3, [pc, #296]	; (80065e8 <Lslalom_L90+0x1c4>)
 80064be:	edd3 7a00 	vldr	s15, [r3]
 80064c2:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 80064c6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80064ca:	4b48      	ldr	r3, [pc, #288]	; (80065ec <Lslalom_L90+0x1c8>)
 80064cc:	edd3 7a00 	vldr	s15, [r3]
 80064d0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80064d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80064d8:	dcf0      	bgt.n	80064bc <Lslalom_L90+0x98>

	target_degaccel_z = 0;
 80064da:	4b3d      	ldr	r3, [pc, #244]	; (80065d0 <Lslalom_L90+0x1ac>)
 80064dc:	f04f 0200 	mov.w	r2, #0
 80064e0:	601a      	str	r2, [r3, #0]

	while(degree_z < target_degree_z+70);
 80064e2:	bf00      	nop
 80064e4:	4b40      	ldr	r3, [pc, #256]	; (80065e8 <Lslalom_L90+0x1c4>)
 80064e6:	edd3 7a00 	vldr	s15, [r3]
 80064ea:	ed9f 7a41 	vldr	s14, [pc, #260]	; 80065f0 <Lslalom_L90+0x1cc>
 80064ee:	ee37 7a87 	vadd.f32	s14, s15, s14
 80064f2:	4b3e      	ldr	r3, [pc, #248]	; (80065ec <Lslalom_L90+0x1c8>)
 80064f4:	edd3 7a00 	vldr	s15, [r3]
 80064f8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80064fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006500:	dcf0      	bgt.n	80064e4 <Lslalom_L90+0xc0>

	target_degaccel_z = 1000;
 8006502:	4b33      	ldr	r3, [pc, #204]	; (80065d0 <Lslalom_L90+0x1ac>)
 8006504:	4a3b      	ldr	r2, [pc, #236]	; (80065f4 <Lslalom_L90+0x1d0>)
 8006506:	601a      	str	r2, [r3, #0]

	while(degree_z < target_degree_z+90);
 8006508:	bf00      	nop
 800650a:	4b37      	ldr	r3, [pc, #220]	; (80065e8 <Lslalom_L90+0x1c4>)
 800650c:	edd3 7a00 	vldr	s15, [r3]
 8006510:	ed9f 7a39 	vldr	s14, [pc, #228]	; 80065f8 <Lslalom_L90+0x1d4>
 8006514:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006518:	4b34      	ldr	r3, [pc, #208]	; (80065ec <Lslalom_L90+0x1c8>)
 800651a:	edd3 7a00 	vldr	s15, [r3]
 800651e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006522:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006526:	dcf0      	bgt.n	800650a <Lslalom_L90+0xe6>
	turn_dir(DIR_TURN_L90, 1);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8006528:	2101      	movs	r1, #1
 800652a:	20ff      	movs	r0, #255	; 0xff
 800652c:	f005 fda4 	bl	800c078 <turn_dir>

	MF.FLAG.GYRO = 0;
 8006530:	4a1e      	ldr	r2, [pc, #120]	; (80065ac <Lslalom_L90+0x188>)
 8006532:	8813      	ldrh	r3, [r2, #0]
 8006534:	f36f 2308 	bfc	r3, #8, #1
 8006538:	8013      	strh	r3, [r2, #0]

	accel_l = 10000;
 800653a:	4b1d      	ldr	r3, [pc, #116]	; (80065b0 <Lslalom_L90+0x18c>)
 800653c:	4a1d      	ldr	r2, [pc, #116]	; (80065b4 <Lslalom_L90+0x190>)
 800653e:	601a      	str	r2, [r3, #0]
	accel_r = 10000;
 8006540:	4b1d      	ldr	r3, [pc, #116]	; (80065b8 <Lslalom_L90+0x194>)
 8006542:	4a1c      	ldr	r2, [pc, #112]	; (80065b4 <Lslalom_L90+0x190>)
 8006544:	601a      	str	r2, [r3, #0]
	speed_max_l = SPEED_RUN;
 8006546:	4b1d      	ldr	r3, [pc, #116]	; (80065bc <Lslalom_L90+0x198>)
 8006548:	4a1d      	ldr	r2, [pc, #116]	; (80065c0 <Lslalom_L90+0x19c>)
 800654a:	601a      	str	r2, [r3, #0]
	speed_max_r = SPEED_RUN;
 800654c:	4b1d      	ldr	r3, [pc, #116]	; (80065c4 <Lslalom_L90+0x1a0>)
 800654e:	4a1c      	ldr	r2, [pc, #112]	; (80065c0 <Lslalom_L90+0x19c>)
 8006550:	601a      	str	r2, [r3, #0]
	dist_l = dist_r = 0;
 8006552:	f04f 0300 	mov.w	r3, #0
 8006556:	4a1c      	ldr	r2, [pc, #112]	; (80065c8 <Lslalom_L90+0x1a4>)
 8006558:	6013      	str	r3, [r2, #0]
 800655a:	4a1c      	ldr	r2, [pc, #112]	; (80065cc <Lslalom_L90+0x1a8>)
 800655c:	6013      	str	r3, [r2, #0]
	MF.FLAG.SPD = 1;
 800655e:	4a13      	ldr	r2, [pc, #76]	; (80065ac <Lslalom_L90+0x188>)
 8006560:	8813      	ldrh	r3, [r2, #0]
 8006562:	f043 0304 	orr.w	r3, r3, #4
 8006566:	8013      	strh	r3, [r2, #0]
	control_start();
 8006568:	f7fe fc04 	bl	8004d74 <control_start>
	while(dist_l < 24 && dist_r < 24);
 800656c:	bf00      	nop
 800656e:	4b17      	ldr	r3, [pc, #92]	; (80065cc <Lslalom_L90+0x1a8>)
 8006570:	edd3 7a00 	vldr	s15, [r3]
 8006574:	eeb3 7a08 	vmov.f32	s14, #56	; 0x41c00000  24.0
 8006578:	eef4 7ac7 	vcmpe.f32	s15, s14
 800657c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006580:	d509      	bpl.n	8006596 <Lslalom_L90+0x172>
 8006582:	4b11      	ldr	r3, [pc, #68]	; (80065c8 <Lslalom_L90+0x1a4>)
 8006584:	edd3 7a00 	vldr	s15, [r3]
 8006588:	eeb3 7a08 	vmov.f32	s14, #56	; 0x41c00000  24.0
 800658c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006590:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006594:	d4eb      	bmi.n	800656e <Lslalom_L90+0x14a>
	if(MF.FLAG.SCND == 0)get_wall_info();					//壁情報を取得，片壁制御の有効・無効の判断
 8006596:	4b05      	ldr	r3, [pc, #20]	; (80065ac <Lslalom_L90+0x188>)
 8006598:	881b      	ldrh	r3, [r3, #0]
 800659a:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800659e:	b2db      	uxtb	r3, r3
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d101      	bne.n	80065a8 <Lslalom_L90+0x184>
 80065a4:	f007 f814 	bl	800d5d0 <get_wall_info>
}
 80065a8:	bf00      	nop
 80065aa:	bd80      	pop	{r7, pc}
 80065ac:	20000fe8 	.word	0x20000fe8
 80065b0:	20000ddc 	.word	0x20000ddc
 80065b4:	461c4000 	.word	0x461c4000
 80065b8:	20000b64 	.word	0x20000b64
 80065bc:	200007f8 	.word	0x200007f8
 80065c0:	43c80000 	.word	0x43c80000
 80065c4:	20000224 	.word	0x20000224
 80065c8:	20000b6c 	.word	0x20000b6c
 80065cc:	20001004 	.word	0x20001004
 80065d0:	20000bd8 	.word	0x20000bd8
 80065d4:	c47a0000 	.word	0xc47a0000
 80065d8:	20000228 	.word	0x20000228
 80065dc:	20000338 	.word	0x20000338
 80065e0:	c37a0000 	.word	0xc37a0000
 80065e4:	20000b74 	.word	0x20000b74
 80065e8:	20000c7c 	.word	0x20000c7c
 80065ec:	20000bdc 	.word	0x20000bdc
 80065f0:	428c0000 	.word	0x428c0000
 80065f4:	447a0000 	.word	0x447a0000
 80065f8:	42b40000 	.word	0x42b40000

080065fc <Lslalom_R902>:
//Lslalom_R902
// スラロームで右に90度回転する High Speed
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void Lslalom_R902(void){
 80065fc:	b580      	push	{r7, lr}
 80065fe:	af00      	add	r7, sp, #0
	MF.FLAG.GYRO = 0;
 8006600:	4a60      	ldr	r2, [pc, #384]	; (8006784 <Lslalom_R902+0x188>)
 8006602:	8813      	ldrh	r3, [r2, #0]
 8006604:	f36f 2308 	bfc	r3, #8, #1
 8006608:	8013      	strh	r3, [r2, #0]

	accel_l = 10000;
 800660a:	4b5f      	ldr	r3, [pc, #380]	; (8006788 <Lslalom_R902+0x18c>)
 800660c:	4a5f      	ldr	r2, [pc, #380]	; (800678c <Lslalom_R902+0x190>)
 800660e:	601a      	str	r2, [r3, #0]
	accel_r = 10000;
 8006610:	4b5f      	ldr	r3, [pc, #380]	; (8006790 <Lslalom_R902+0x194>)
 8006612:	4a5e      	ldr	r2, [pc, #376]	; (800678c <Lslalom_R902+0x190>)
 8006614:	601a      	str	r2, [r3, #0]
	speed_max_l = 800;
 8006616:	4b5f      	ldr	r3, [pc, #380]	; (8006794 <Lslalom_R902+0x198>)
 8006618:	4a5f      	ldr	r2, [pc, #380]	; (8006798 <Lslalom_R902+0x19c>)
 800661a:	601a      	str	r2, [r3, #0]
	speed_max_r = 800;
 800661c:	4b5f      	ldr	r3, [pc, #380]	; (800679c <Lslalom_R902+0x1a0>)
 800661e:	4a5e      	ldr	r2, [pc, #376]	; (8006798 <Lslalom_R902+0x19c>)
 8006620:	601a      	str	r2, [r3, #0]

	control_start();
 8006622:	f7fe fba7 	bl	8004d74 <control_start>
	dist_l = dist_r = 0;
 8006626:	f04f 0300 	mov.w	r3, #0
 800662a:	4a5d      	ldr	r2, [pc, #372]	; (80067a0 <Lslalom_R902+0x1a4>)
 800662c:	6013      	str	r3, [r2, #0]
 800662e:	4a5d      	ldr	r2, [pc, #372]	; (80067a4 <Lslalom_R902+0x1a8>)
 8006630:	6013      	str	r3, [r2, #0]
	while(dist_l < 20 && dist_r < 20);
 8006632:	bf00      	nop
 8006634:	4b5b      	ldr	r3, [pc, #364]	; (80067a4 <Lslalom_R902+0x1a8>)
 8006636:	edd3 7a00 	vldr	s15, [r3]
 800663a:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 800663e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006642:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006646:	d509      	bpl.n	800665c <Lslalom_R902+0x60>
 8006648:	4b55      	ldr	r3, [pc, #340]	; (80067a0 <Lslalom_R902+0x1a4>)
 800664a:	edd3 7a00 	vldr	s15, [r3]
 800664e:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8006652:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006656:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800665a:	d4eb      	bmi.n	8006634 <Lslalom_R902+0x38>
	drive_stop();
 800665c:	f7fe fb62 	bl	8004d24 <drive_stop>
	control_stop();
 8006660:	f7fe fb9c 	bl	8004d9c <control_stop>

	MF.FLAG.GYRO = 1;
 8006664:	4a47      	ldr	r2, [pc, #284]	; (8006784 <Lslalom_R902+0x188>)
 8006666:	8813      	ldrh	r3, [r2, #0]
 8006668:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800666c:	8013      	strh	r3, [r2, #0]

	target_degaccel_z = 3000;
 800666e:	4b4e      	ldr	r3, [pc, #312]	; (80067a8 <Lslalom_R902+0x1ac>)
 8006670:	4a4e      	ldr	r2, [pc, #312]	; (80067ac <Lslalom_R902+0x1b0>)
 8006672:	601a      	str	r2, [r3, #0]
	target_omega_z = 0;
 8006674:	4b4e      	ldr	r3, [pc, #312]	; (80067b0 <Lslalom_R902+0x1b4>)
 8006676:	f04f 0200 	mov.w	r2, #0
 800667a:	601a      	str	r2, [r3, #0]
	omega_max = 450;
 800667c:	4b4d      	ldr	r3, [pc, #308]	; (80067b4 <Lslalom_R902+0x1b8>)
 800667e:	4a4e      	ldr	r2, [pc, #312]	; (80067b8 <Lslalom_R902+0x1bc>)
 8006680:	601a      	str	r2, [r3, #0]
	speed_G = 800;
 8006682:	4b4e      	ldr	r3, [pc, #312]	; (80067bc <Lslalom_R902+0x1c0>)
 8006684:	4a44      	ldr	r2, [pc, #272]	; (8006798 <Lslalom_R902+0x19c>)
 8006686:	601a      	str	r2, [r3, #0]

	MF.FLAG.DRV = 1;
 8006688:	4a3e      	ldr	r2, [pc, #248]	; (8006784 <Lslalom_R902+0x188>)
 800668a:	8813      	ldrh	r3, [r2, #0]
 800668c:	f043 0302 	orr.w	r3, r3, #2
 8006690:	8013      	strh	r3, [r2, #0]
	while(degree_z > target_degree_z-35);
 8006692:	bf00      	nop
 8006694:	4b4a      	ldr	r3, [pc, #296]	; (80067c0 <Lslalom_R902+0x1c4>)
 8006696:	edd3 7a00 	vldr	s15, [r3]
 800669a:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 80067c4 <Lslalom_R902+0x1c8>
 800669e:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80066a2:	4b49      	ldr	r3, [pc, #292]	; (80067c8 <Lslalom_R902+0x1cc>)
 80066a4:	edd3 7a00 	vldr	s15, [r3]
 80066a8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80066ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80066b0:	d4f0      	bmi.n	8006694 <Lslalom_R902+0x98>

	target_degaccel_z = 0;
 80066b2:	4b3d      	ldr	r3, [pc, #244]	; (80067a8 <Lslalom_R902+0x1ac>)
 80066b4:	f04f 0200 	mov.w	r2, #0
 80066b8:	601a      	str	r2, [r3, #0]

	while(degree_z > target_degree_z-60);
 80066ba:	bf00      	nop
 80066bc:	4b40      	ldr	r3, [pc, #256]	; (80067c0 <Lslalom_R902+0x1c4>)
 80066be:	edd3 7a00 	vldr	s15, [r3]
 80066c2:	ed9f 7a42 	vldr	s14, [pc, #264]	; 80067cc <Lslalom_R902+0x1d0>
 80066c6:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80066ca:	4b3f      	ldr	r3, [pc, #252]	; (80067c8 <Lslalom_R902+0x1cc>)
 80066cc:	edd3 7a00 	vldr	s15, [r3]
 80066d0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80066d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80066d8:	d4f0      	bmi.n	80066bc <Lslalom_R902+0xc0>

	target_degaccel_z = -3000;
 80066da:	4b33      	ldr	r3, [pc, #204]	; (80067a8 <Lslalom_R902+0x1ac>)
 80066dc:	4a3c      	ldr	r2, [pc, #240]	; (80067d0 <Lslalom_R902+0x1d4>)
 80066de:	601a      	str	r2, [r3, #0]

	while(degree_z > target_degree_z-90);
 80066e0:	bf00      	nop
 80066e2:	4b37      	ldr	r3, [pc, #220]	; (80067c0 <Lslalom_R902+0x1c4>)
 80066e4:	edd3 7a00 	vldr	s15, [r3]
 80066e8:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 80067d4 <Lslalom_R902+0x1d8>
 80066ec:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80066f0:	4b35      	ldr	r3, [pc, #212]	; (80067c8 <Lslalom_R902+0x1cc>)
 80066f2:	edd3 7a00 	vldr	s15, [r3]
 80066f6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80066fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80066fe:	d4f0      	bmi.n	80066e2 <Lslalom_R902+0xe6>
	turn_dir(DIR_TURN_R90, 1);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8006700:	2101      	movs	r1, #1
 8006702:	2001      	movs	r0, #1
 8006704:	f005 fcb8 	bl	800c078 <turn_dir>

	MF.FLAG.GYRO = 0;
 8006708:	4a1e      	ldr	r2, [pc, #120]	; (8006784 <Lslalom_R902+0x188>)
 800670a:	8813      	ldrh	r3, [r2, #0]
 800670c:	f36f 2308 	bfc	r3, #8, #1
 8006710:	8013      	strh	r3, [r2, #0]

	accel_l = 10000;
 8006712:	4b1d      	ldr	r3, [pc, #116]	; (8006788 <Lslalom_R902+0x18c>)
 8006714:	4a1d      	ldr	r2, [pc, #116]	; (800678c <Lslalom_R902+0x190>)
 8006716:	601a      	str	r2, [r3, #0]
	accel_r = 10000;
 8006718:	4b1d      	ldr	r3, [pc, #116]	; (8006790 <Lslalom_R902+0x194>)
 800671a:	4a1c      	ldr	r2, [pc, #112]	; (800678c <Lslalom_R902+0x190>)
 800671c:	601a      	str	r2, [r3, #0]
	speed_max_l = SPEED_HIGH;
 800671e:	4b1d      	ldr	r3, [pc, #116]	; (8006794 <Lslalom_R902+0x198>)
 8006720:	4a1d      	ldr	r2, [pc, #116]	; (8006798 <Lslalom_R902+0x19c>)
 8006722:	601a      	str	r2, [r3, #0]
	speed_max_r = SPEED_HIGH;
 8006724:	4b1d      	ldr	r3, [pc, #116]	; (800679c <Lslalom_R902+0x1a0>)
 8006726:	4a1c      	ldr	r2, [pc, #112]	; (8006798 <Lslalom_R902+0x19c>)
 8006728:	601a      	str	r2, [r3, #0]
	dist_l = dist_r = 0;
 800672a:	f04f 0300 	mov.w	r3, #0
 800672e:	4a1c      	ldr	r2, [pc, #112]	; (80067a0 <Lslalom_R902+0x1a4>)
 8006730:	6013      	str	r3, [r2, #0]
 8006732:	4a1c      	ldr	r2, [pc, #112]	; (80067a4 <Lslalom_R902+0x1a8>)
 8006734:	6013      	str	r3, [r2, #0]
	MF.FLAG.SPD = 1;
 8006736:	4a13      	ldr	r2, [pc, #76]	; (8006784 <Lslalom_R902+0x188>)
 8006738:	8813      	ldrh	r3, [r2, #0]
 800673a:	f043 0304 	orr.w	r3, r3, #4
 800673e:	8013      	strh	r3, [r2, #0]
	control_start();
 8006740:	f7fe fb18 	bl	8004d74 <control_start>
	while(dist_l < 20 && dist_r < 20);
 8006744:	bf00      	nop
 8006746:	4b17      	ldr	r3, [pc, #92]	; (80067a4 <Lslalom_R902+0x1a8>)
 8006748:	edd3 7a00 	vldr	s15, [r3]
 800674c:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8006750:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006754:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006758:	d509      	bpl.n	800676e <Lslalom_R902+0x172>
 800675a:	4b11      	ldr	r3, [pc, #68]	; (80067a0 <Lslalom_R902+0x1a4>)
 800675c:	edd3 7a00 	vldr	s15, [r3]
 8006760:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8006764:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006768:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800676c:	d4eb      	bmi.n	8006746 <Lslalom_R902+0x14a>
	if(MF.FLAG.SCND == 0)get_wall_info();					//壁情報を取得，片壁制御の有効・無効の判断
 800676e:	4b05      	ldr	r3, [pc, #20]	; (8006784 <Lslalom_R902+0x188>)
 8006770:	881b      	ldrh	r3, [r3, #0]
 8006772:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8006776:	b2db      	uxtb	r3, r3
 8006778:	2b00      	cmp	r3, #0
 800677a:	d101      	bne.n	8006780 <Lslalom_R902+0x184>
 800677c:	f006 ff28 	bl	800d5d0 <get_wall_info>
}
 8006780:	bf00      	nop
 8006782:	bd80      	pop	{r7, pc}
 8006784:	20000fe8 	.word	0x20000fe8
 8006788:	20000ddc 	.word	0x20000ddc
 800678c:	461c4000 	.word	0x461c4000
 8006790:	20000b64 	.word	0x20000b64
 8006794:	200007f8 	.word	0x200007f8
 8006798:	44480000 	.word	0x44480000
 800679c:	20000224 	.word	0x20000224
 80067a0:	20000b6c 	.word	0x20000b6c
 80067a4:	20001004 	.word	0x20001004
 80067a8:	20000bd8 	.word	0x20000bd8
 80067ac:	453b8000 	.word	0x453b8000
 80067b0:	20000228 	.word	0x20000228
 80067b4:	20000b68 	.word	0x20000b68
 80067b8:	43e10000 	.word	0x43e10000
 80067bc:	20000b74 	.word	0x20000b74
 80067c0:	20000c7c 	.word	0x20000c7c
 80067c4:	420c0000 	.word	0x420c0000
 80067c8:	20000bdc 	.word	0x20000bdc
 80067cc:	42700000 	.word	0x42700000
 80067d0:	c53b8000 	.word	0xc53b8000
 80067d4:	42b40000 	.word	0x42b40000

080067d8 <Lslalom_L902>:
//Lslalom_L902
// 大回りスラロームで右に90度回転する High Speed
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void Lslalom_L902(void){
 80067d8:	b580      	push	{r7, lr}
 80067da:	af00      	add	r7, sp, #0
	MF.FLAG.GYRO = 0;
 80067dc:	4a60      	ldr	r2, [pc, #384]	; (8006960 <Lslalom_L902+0x188>)
 80067de:	8813      	ldrh	r3, [r2, #0]
 80067e0:	f36f 2308 	bfc	r3, #8, #1
 80067e4:	8013      	strh	r3, [r2, #0]

	accel_l = 10000;
 80067e6:	4b5f      	ldr	r3, [pc, #380]	; (8006964 <Lslalom_L902+0x18c>)
 80067e8:	4a5f      	ldr	r2, [pc, #380]	; (8006968 <Lslalom_L902+0x190>)
 80067ea:	601a      	str	r2, [r3, #0]
	accel_r = 10000;
 80067ec:	4b5f      	ldr	r3, [pc, #380]	; (800696c <Lslalom_L902+0x194>)
 80067ee:	4a5e      	ldr	r2, [pc, #376]	; (8006968 <Lslalom_L902+0x190>)
 80067f0:	601a      	str	r2, [r3, #0]
	speed_max_l = 800;
 80067f2:	4b5f      	ldr	r3, [pc, #380]	; (8006970 <Lslalom_L902+0x198>)
 80067f4:	4a5f      	ldr	r2, [pc, #380]	; (8006974 <Lslalom_L902+0x19c>)
 80067f6:	601a      	str	r2, [r3, #0]
	speed_max_r = 800;
 80067f8:	4b5f      	ldr	r3, [pc, #380]	; (8006978 <Lslalom_L902+0x1a0>)
 80067fa:	4a5e      	ldr	r2, [pc, #376]	; (8006974 <Lslalom_L902+0x19c>)
 80067fc:	601a      	str	r2, [r3, #0]

	control_start();
 80067fe:	f7fe fab9 	bl	8004d74 <control_start>
	dist_l = dist_r = 0;
 8006802:	f04f 0300 	mov.w	r3, #0
 8006806:	4a5d      	ldr	r2, [pc, #372]	; (800697c <Lslalom_L902+0x1a4>)
 8006808:	6013      	str	r3, [r2, #0]
 800680a:	4a5d      	ldr	r2, [pc, #372]	; (8006980 <Lslalom_L902+0x1a8>)
 800680c:	6013      	str	r3, [r2, #0]
	while(dist_l < 20 && dist_r < 20);
 800680e:	bf00      	nop
 8006810:	4b5b      	ldr	r3, [pc, #364]	; (8006980 <Lslalom_L902+0x1a8>)
 8006812:	edd3 7a00 	vldr	s15, [r3]
 8006816:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 800681a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800681e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006822:	d509      	bpl.n	8006838 <Lslalom_L902+0x60>
 8006824:	4b55      	ldr	r3, [pc, #340]	; (800697c <Lslalom_L902+0x1a4>)
 8006826:	edd3 7a00 	vldr	s15, [r3]
 800682a:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 800682e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006832:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006836:	d4eb      	bmi.n	8006810 <Lslalom_L902+0x38>
	drive_stop();
 8006838:	f7fe fa74 	bl	8004d24 <drive_stop>
	control_stop();
 800683c:	f7fe faae 	bl	8004d9c <control_stop>

	MF.FLAG.GYRO = 1;
 8006840:	4a47      	ldr	r2, [pc, #284]	; (8006960 <Lslalom_L902+0x188>)
 8006842:	8813      	ldrh	r3, [r2, #0]
 8006844:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006848:	8013      	strh	r3, [r2, #0]

	target_degaccel_z = -3000;
 800684a:	4b4e      	ldr	r3, [pc, #312]	; (8006984 <Lslalom_L902+0x1ac>)
 800684c:	4a4e      	ldr	r2, [pc, #312]	; (8006988 <Lslalom_L902+0x1b0>)
 800684e:	601a      	str	r2, [r3, #0]
	target_omega_z = 0;
 8006850:	4b4e      	ldr	r3, [pc, #312]	; (800698c <Lslalom_L902+0x1b4>)
 8006852:	f04f 0200 	mov.w	r2, #0
 8006856:	601a      	str	r2, [r3, #0]
	omega_min = -450;
 8006858:	4b4d      	ldr	r3, [pc, #308]	; (8006990 <Lslalom_L902+0x1b8>)
 800685a:	4a4e      	ldr	r2, [pc, #312]	; (8006994 <Lslalom_L902+0x1bc>)
 800685c:	601a      	str	r2, [r3, #0]
	speed_G = 800;
 800685e:	4b4e      	ldr	r3, [pc, #312]	; (8006998 <Lslalom_L902+0x1c0>)
 8006860:	4a44      	ldr	r2, [pc, #272]	; (8006974 <Lslalom_L902+0x19c>)
 8006862:	601a      	str	r2, [r3, #0]

	MF.FLAG.DRV = 1;
 8006864:	4a3e      	ldr	r2, [pc, #248]	; (8006960 <Lslalom_L902+0x188>)
 8006866:	8813      	ldrh	r3, [r2, #0]
 8006868:	f043 0302 	orr.w	r3, r3, #2
 800686c:	8013      	strh	r3, [r2, #0]
	while(degree_z < target_degree_z+35);
 800686e:	bf00      	nop
 8006870:	4b4a      	ldr	r3, [pc, #296]	; (800699c <Lslalom_L902+0x1c4>)
 8006872:	edd3 7a00 	vldr	s15, [r3]
 8006876:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 80069a0 <Lslalom_L902+0x1c8>
 800687a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800687e:	4b49      	ldr	r3, [pc, #292]	; (80069a4 <Lslalom_L902+0x1cc>)
 8006880:	edd3 7a00 	vldr	s15, [r3]
 8006884:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006888:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800688c:	dcf0      	bgt.n	8006870 <Lslalom_L902+0x98>

	target_degaccel_z = 0;
 800688e:	4b3d      	ldr	r3, [pc, #244]	; (8006984 <Lslalom_L902+0x1ac>)
 8006890:	f04f 0200 	mov.w	r2, #0
 8006894:	601a      	str	r2, [r3, #0]

	while(degree_z < target_degree_z+60);
 8006896:	bf00      	nop
 8006898:	4b40      	ldr	r3, [pc, #256]	; (800699c <Lslalom_L902+0x1c4>)
 800689a:	edd3 7a00 	vldr	s15, [r3]
 800689e:	ed9f 7a42 	vldr	s14, [pc, #264]	; 80069a8 <Lslalom_L902+0x1d0>
 80068a2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80068a6:	4b3f      	ldr	r3, [pc, #252]	; (80069a4 <Lslalom_L902+0x1cc>)
 80068a8:	edd3 7a00 	vldr	s15, [r3]
 80068ac:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80068b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80068b4:	dcf0      	bgt.n	8006898 <Lslalom_L902+0xc0>

	target_degaccel_z = 3000;
 80068b6:	4b33      	ldr	r3, [pc, #204]	; (8006984 <Lslalom_L902+0x1ac>)
 80068b8:	4a3c      	ldr	r2, [pc, #240]	; (80069ac <Lslalom_L902+0x1d4>)
 80068ba:	601a      	str	r2, [r3, #0]

	while(degree_z < target_degree_z+90);
 80068bc:	bf00      	nop
 80068be:	4b37      	ldr	r3, [pc, #220]	; (800699c <Lslalom_L902+0x1c4>)
 80068c0:	edd3 7a00 	vldr	s15, [r3]
 80068c4:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 80069b0 <Lslalom_L902+0x1d8>
 80068c8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80068cc:	4b35      	ldr	r3, [pc, #212]	; (80069a4 <Lslalom_L902+0x1cc>)
 80068ce:	edd3 7a00 	vldr	s15, [r3]
 80068d2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80068d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80068da:	dcf0      	bgt.n	80068be <Lslalom_L902+0xe6>
	turn_dir(DIR_TURN_L90, 1);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 80068dc:	2101      	movs	r1, #1
 80068de:	20ff      	movs	r0, #255	; 0xff
 80068e0:	f005 fbca 	bl	800c078 <turn_dir>

	MF.FLAG.GYRO = 0;
 80068e4:	4a1e      	ldr	r2, [pc, #120]	; (8006960 <Lslalom_L902+0x188>)
 80068e6:	8813      	ldrh	r3, [r2, #0]
 80068e8:	f36f 2308 	bfc	r3, #8, #1
 80068ec:	8013      	strh	r3, [r2, #0]

	accel_l = 10000;
 80068ee:	4b1d      	ldr	r3, [pc, #116]	; (8006964 <Lslalom_L902+0x18c>)
 80068f0:	4a1d      	ldr	r2, [pc, #116]	; (8006968 <Lslalom_L902+0x190>)
 80068f2:	601a      	str	r2, [r3, #0]
	accel_r = 10000;
 80068f4:	4b1d      	ldr	r3, [pc, #116]	; (800696c <Lslalom_L902+0x194>)
 80068f6:	4a1c      	ldr	r2, [pc, #112]	; (8006968 <Lslalom_L902+0x190>)
 80068f8:	601a      	str	r2, [r3, #0]
	speed_max_l = SPEED_HIGH;
 80068fa:	4b1d      	ldr	r3, [pc, #116]	; (8006970 <Lslalom_L902+0x198>)
 80068fc:	4a1d      	ldr	r2, [pc, #116]	; (8006974 <Lslalom_L902+0x19c>)
 80068fe:	601a      	str	r2, [r3, #0]
	speed_max_r = SPEED_HIGH;
 8006900:	4b1d      	ldr	r3, [pc, #116]	; (8006978 <Lslalom_L902+0x1a0>)
 8006902:	4a1c      	ldr	r2, [pc, #112]	; (8006974 <Lslalom_L902+0x19c>)
 8006904:	601a      	str	r2, [r3, #0]
	dist_l = dist_r = 0;
 8006906:	f04f 0300 	mov.w	r3, #0
 800690a:	4a1c      	ldr	r2, [pc, #112]	; (800697c <Lslalom_L902+0x1a4>)
 800690c:	6013      	str	r3, [r2, #0]
 800690e:	4a1c      	ldr	r2, [pc, #112]	; (8006980 <Lslalom_L902+0x1a8>)
 8006910:	6013      	str	r3, [r2, #0]
	MF.FLAG.SPD = 1;
 8006912:	4a13      	ldr	r2, [pc, #76]	; (8006960 <Lslalom_L902+0x188>)
 8006914:	8813      	ldrh	r3, [r2, #0]
 8006916:	f043 0304 	orr.w	r3, r3, #4
 800691a:	8013      	strh	r3, [r2, #0]
	control_start();
 800691c:	f7fe fa2a 	bl	8004d74 <control_start>
	while(dist_l < 20 && dist_r < 20);
 8006920:	bf00      	nop
 8006922:	4b17      	ldr	r3, [pc, #92]	; (8006980 <Lslalom_L902+0x1a8>)
 8006924:	edd3 7a00 	vldr	s15, [r3]
 8006928:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 800692c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006930:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006934:	d509      	bpl.n	800694a <Lslalom_L902+0x172>
 8006936:	4b11      	ldr	r3, [pc, #68]	; (800697c <Lslalom_L902+0x1a4>)
 8006938:	edd3 7a00 	vldr	s15, [r3]
 800693c:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8006940:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006944:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006948:	d4eb      	bmi.n	8006922 <Lslalom_L902+0x14a>
	if(MF.FLAG.SCND == 0)get_wall_info();					//壁情報を取得，片壁制御の有効・無効の判断
 800694a:	4b05      	ldr	r3, [pc, #20]	; (8006960 <Lslalom_L902+0x188>)
 800694c:	881b      	ldrh	r3, [r3, #0]
 800694e:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8006952:	b2db      	uxtb	r3, r3
 8006954:	2b00      	cmp	r3, #0
 8006956:	d101      	bne.n	800695c <Lslalom_L902+0x184>
 8006958:	f006 fe3a 	bl	800d5d0 <get_wall_info>
}
 800695c:	bf00      	nop
 800695e:	bd80      	pop	{r7, pc}
 8006960:	20000fe8 	.word	0x20000fe8
 8006964:	20000ddc 	.word	0x20000ddc
 8006968:	461c4000 	.word	0x461c4000
 800696c:	20000b64 	.word	0x20000b64
 8006970:	200007f8 	.word	0x200007f8
 8006974:	44480000 	.word	0x44480000
 8006978:	20000224 	.word	0x20000224
 800697c:	20000b6c 	.word	0x20000b6c
 8006980:	20001004 	.word	0x20001004
 8006984:	20000bd8 	.word	0x20000bd8
 8006988:	c53b8000 	.word	0xc53b8000
 800698c:	20000228 	.word	0x20000228
 8006990:	20000338 	.word	0x20000338
 8006994:	c3e10000 	.word	0xc3e10000
 8006998:	20000b74 	.word	0x20000b74
 800699c:	20000c7c 	.word	0x20000c7c
 80069a0:	420c0000 	.word	0x420c0000
 80069a4:	20000bdc 	.word	0x20000bdc
 80069a8:	42700000 	.word	0x42700000
 80069ac:	453b8000 	.word	0x453b8000
 80069b0:	42b40000 	.word	0x42b40000

080069b4 <Lslalom_R903>:
//Lslalom_R903
// スラロームで右に90度回転する High High Speed
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void Lslalom_R903(void){
 80069b4:	b580      	push	{r7, lr}
 80069b6:	af00      	add	r7, sp, #0
	MF.FLAG.GYRO = 0;
 80069b8:	4a60      	ldr	r2, [pc, #384]	; (8006b3c <Lslalom_R903+0x188>)
 80069ba:	8813      	ldrh	r3, [r2, #0]
 80069bc:	f36f 2308 	bfc	r3, #8, #1
 80069c0:	8013      	strh	r3, [r2, #0]

	accel_l = 10000;
 80069c2:	4b5f      	ldr	r3, [pc, #380]	; (8006b40 <Lslalom_R903+0x18c>)
 80069c4:	4a5f      	ldr	r2, [pc, #380]	; (8006b44 <Lslalom_R903+0x190>)
 80069c6:	601a      	str	r2, [r3, #0]
	accel_r = 10000;
 80069c8:	4b5f      	ldr	r3, [pc, #380]	; (8006b48 <Lslalom_R903+0x194>)
 80069ca:	4a5e      	ldr	r2, [pc, #376]	; (8006b44 <Lslalom_R903+0x190>)
 80069cc:	601a      	str	r2, [r3, #0]
	speed_max_l = 1200;
 80069ce:	4b5f      	ldr	r3, [pc, #380]	; (8006b4c <Lslalom_R903+0x198>)
 80069d0:	4a5f      	ldr	r2, [pc, #380]	; (8006b50 <Lslalom_R903+0x19c>)
 80069d2:	601a      	str	r2, [r3, #0]
	speed_max_r = 1200;
 80069d4:	4b5f      	ldr	r3, [pc, #380]	; (8006b54 <Lslalom_R903+0x1a0>)
 80069d6:	4a5e      	ldr	r2, [pc, #376]	; (8006b50 <Lslalom_R903+0x19c>)
 80069d8:	601a      	str	r2, [r3, #0]

	control_start();
 80069da:	f7fe f9cb 	bl	8004d74 <control_start>
	dist_l = dist_r = 0;
 80069de:	f04f 0300 	mov.w	r3, #0
 80069e2:	4a5d      	ldr	r2, [pc, #372]	; (8006b58 <Lslalom_R903+0x1a4>)
 80069e4:	6013      	str	r3, [r2, #0]
 80069e6:	4a5d      	ldr	r2, [pc, #372]	; (8006b5c <Lslalom_R903+0x1a8>)
 80069e8:	6013      	str	r3, [r2, #0]
	while(dist_l < 17 && dist_r < 17);
 80069ea:	bf00      	nop
 80069ec:	4b5b      	ldr	r3, [pc, #364]	; (8006b5c <Lslalom_R903+0x1a8>)
 80069ee:	edd3 7a00 	vldr	s15, [r3]
 80069f2:	eeb3 7a01 	vmov.f32	s14, #49	; 0x41880000  17.0
 80069f6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80069fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80069fe:	d509      	bpl.n	8006a14 <Lslalom_R903+0x60>
 8006a00:	4b55      	ldr	r3, [pc, #340]	; (8006b58 <Lslalom_R903+0x1a4>)
 8006a02:	edd3 7a00 	vldr	s15, [r3]
 8006a06:	eeb3 7a01 	vmov.f32	s14, #49	; 0x41880000  17.0
 8006a0a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006a0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006a12:	d4eb      	bmi.n	80069ec <Lslalom_R903+0x38>
	drive_stop();
 8006a14:	f7fe f986 	bl	8004d24 <drive_stop>
	control_stop();
 8006a18:	f7fe f9c0 	bl	8004d9c <control_stop>

	MF.FLAG.GYRO = 1;
 8006a1c:	4a47      	ldr	r2, [pc, #284]	; (8006b3c <Lslalom_R903+0x188>)
 8006a1e:	8813      	ldrh	r3, [r2, #0]
 8006a20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006a24:	8013      	strh	r3, [r2, #0]

	target_degaccel_z = 7000;
 8006a26:	4b4e      	ldr	r3, [pc, #312]	; (8006b60 <Lslalom_R903+0x1ac>)
 8006a28:	4a4e      	ldr	r2, [pc, #312]	; (8006b64 <Lslalom_R903+0x1b0>)
 8006a2a:	601a      	str	r2, [r3, #0]
	target_omega_z = 0;
 8006a2c:	4b4e      	ldr	r3, [pc, #312]	; (8006b68 <Lslalom_R903+0x1b4>)
 8006a2e:	f04f 0200 	mov.w	r2, #0
 8006a32:	601a      	str	r2, [r3, #0]
	omega_max = 700;
 8006a34:	4b4d      	ldr	r3, [pc, #308]	; (8006b6c <Lslalom_R903+0x1b8>)
 8006a36:	4a4e      	ldr	r2, [pc, #312]	; (8006b70 <Lslalom_R903+0x1bc>)
 8006a38:	601a      	str	r2, [r3, #0]
	speed_G = 1200;
 8006a3a:	4b4e      	ldr	r3, [pc, #312]	; (8006b74 <Lslalom_R903+0x1c0>)
 8006a3c:	4a44      	ldr	r2, [pc, #272]	; (8006b50 <Lslalom_R903+0x19c>)
 8006a3e:	601a      	str	r2, [r3, #0]

	MF.FLAG.DRV = 1;
 8006a40:	4a3e      	ldr	r2, [pc, #248]	; (8006b3c <Lslalom_R903+0x188>)
 8006a42:	8813      	ldrh	r3, [r2, #0]
 8006a44:	f043 0302 	orr.w	r3, r3, #2
 8006a48:	8013      	strh	r3, [r2, #0]
	while(degree_z > target_degree_z-40);
 8006a4a:	bf00      	nop
 8006a4c:	4b4a      	ldr	r3, [pc, #296]	; (8006b78 <Lslalom_R903+0x1c4>)
 8006a4e:	edd3 7a00 	vldr	s15, [r3]
 8006a52:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 8006b7c <Lslalom_R903+0x1c8>
 8006a56:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8006a5a:	4b49      	ldr	r3, [pc, #292]	; (8006b80 <Lslalom_R903+0x1cc>)
 8006a5c:	edd3 7a00 	vldr	s15, [r3]
 8006a60:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006a64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006a68:	d4f0      	bmi.n	8006a4c <Lslalom_R903+0x98>

	target_degaccel_z = 0;
 8006a6a:	4b3d      	ldr	r3, [pc, #244]	; (8006b60 <Lslalom_R903+0x1ac>)
 8006a6c:	f04f 0200 	mov.w	r2, #0
 8006a70:	601a      	str	r2, [r3, #0]

	while(degree_z > target_degree_z-55);
 8006a72:	bf00      	nop
 8006a74:	4b40      	ldr	r3, [pc, #256]	; (8006b78 <Lslalom_R903+0x1c4>)
 8006a76:	edd3 7a00 	vldr	s15, [r3]
 8006a7a:	ed9f 7a42 	vldr	s14, [pc, #264]	; 8006b84 <Lslalom_R903+0x1d0>
 8006a7e:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8006a82:	4b3f      	ldr	r3, [pc, #252]	; (8006b80 <Lslalom_R903+0x1cc>)
 8006a84:	edd3 7a00 	vldr	s15, [r3]
 8006a88:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006a8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006a90:	d4f0      	bmi.n	8006a74 <Lslalom_R903+0xc0>

	target_degaccel_z = -7000;
 8006a92:	4b33      	ldr	r3, [pc, #204]	; (8006b60 <Lslalom_R903+0x1ac>)
 8006a94:	4a3c      	ldr	r2, [pc, #240]	; (8006b88 <Lslalom_R903+0x1d4>)
 8006a96:	601a      	str	r2, [r3, #0]

	while(degree_z > target_degree_z-90);
 8006a98:	bf00      	nop
 8006a9a:	4b37      	ldr	r3, [pc, #220]	; (8006b78 <Lslalom_R903+0x1c4>)
 8006a9c:	edd3 7a00 	vldr	s15, [r3]
 8006aa0:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 8006b8c <Lslalom_R903+0x1d8>
 8006aa4:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8006aa8:	4b35      	ldr	r3, [pc, #212]	; (8006b80 <Lslalom_R903+0x1cc>)
 8006aaa:	edd3 7a00 	vldr	s15, [r3]
 8006aae:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006ab2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ab6:	d4f0      	bmi.n	8006a9a <Lslalom_R903+0xe6>
	turn_dir(DIR_TURN_R90, 1);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8006ab8:	2101      	movs	r1, #1
 8006aba:	2001      	movs	r0, #1
 8006abc:	f005 fadc 	bl	800c078 <turn_dir>

	MF.FLAG.GYRO = 0;
 8006ac0:	4a1e      	ldr	r2, [pc, #120]	; (8006b3c <Lslalom_R903+0x188>)
 8006ac2:	8813      	ldrh	r3, [r2, #0]
 8006ac4:	f36f 2308 	bfc	r3, #8, #1
 8006ac8:	8013      	strh	r3, [r2, #0]

	accel_l = 10000;
 8006aca:	4b1d      	ldr	r3, [pc, #116]	; (8006b40 <Lslalom_R903+0x18c>)
 8006acc:	4a1d      	ldr	r2, [pc, #116]	; (8006b44 <Lslalom_R903+0x190>)
 8006ace:	601a      	str	r2, [r3, #0]
	accel_r = 10000;
 8006ad0:	4b1d      	ldr	r3, [pc, #116]	; (8006b48 <Lslalom_R903+0x194>)
 8006ad2:	4a1c      	ldr	r2, [pc, #112]	; (8006b44 <Lslalom_R903+0x190>)
 8006ad4:	601a      	str	r2, [r3, #0]
	speed_max_l = SPEED_HIGH_HIGH;
 8006ad6:	4b1d      	ldr	r3, [pc, #116]	; (8006b4c <Lslalom_R903+0x198>)
 8006ad8:	4a1d      	ldr	r2, [pc, #116]	; (8006b50 <Lslalom_R903+0x19c>)
 8006ada:	601a      	str	r2, [r3, #0]
	speed_max_r = SPEED_HIGH_HIGH;
 8006adc:	4b1d      	ldr	r3, [pc, #116]	; (8006b54 <Lslalom_R903+0x1a0>)
 8006ade:	4a1c      	ldr	r2, [pc, #112]	; (8006b50 <Lslalom_R903+0x19c>)
 8006ae0:	601a      	str	r2, [r3, #0]
	dist_l = dist_r = 0;
 8006ae2:	f04f 0300 	mov.w	r3, #0
 8006ae6:	4a1c      	ldr	r2, [pc, #112]	; (8006b58 <Lslalom_R903+0x1a4>)
 8006ae8:	6013      	str	r3, [r2, #0]
 8006aea:	4a1c      	ldr	r2, [pc, #112]	; (8006b5c <Lslalom_R903+0x1a8>)
 8006aec:	6013      	str	r3, [r2, #0]
	MF.FLAG.SPD = 1;
 8006aee:	4a13      	ldr	r2, [pc, #76]	; (8006b3c <Lslalom_R903+0x188>)
 8006af0:	8813      	ldrh	r3, [r2, #0]
 8006af2:	f043 0304 	orr.w	r3, r3, #4
 8006af6:	8013      	strh	r3, [r2, #0]
	control_start();
 8006af8:	f7fe f93c 	bl	8004d74 <control_start>
	while(dist_l < 17 && dist_r < 17);
 8006afc:	bf00      	nop
 8006afe:	4b17      	ldr	r3, [pc, #92]	; (8006b5c <Lslalom_R903+0x1a8>)
 8006b00:	edd3 7a00 	vldr	s15, [r3]
 8006b04:	eeb3 7a01 	vmov.f32	s14, #49	; 0x41880000  17.0
 8006b08:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006b0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b10:	d509      	bpl.n	8006b26 <Lslalom_R903+0x172>
 8006b12:	4b11      	ldr	r3, [pc, #68]	; (8006b58 <Lslalom_R903+0x1a4>)
 8006b14:	edd3 7a00 	vldr	s15, [r3]
 8006b18:	eeb3 7a01 	vmov.f32	s14, #49	; 0x41880000  17.0
 8006b1c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006b20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b24:	d4eb      	bmi.n	8006afe <Lslalom_R903+0x14a>
	if(MF.FLAG.SCND == 0)get_wall_info();					//壁情報を取得，片壁制御の有効・無効の判断
 8006b26:	4b05      	ldr	r3, [pc, #20]	; (8006b3c <Lslalom_R903+0x188>)
 8006b28:	881b      	ldrh	r3, [r3, #0]
 8006b2a:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8006b2e:	b2db      	uxtb	r3, r3
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d101      	bne.n	8006b38 <Lslalom_R903+0x184>
 8006b34:	f006 fd4c 	bl	800d5d0 <get_wall_info>
}
 8006b38:	bf00      	nop
 8006b3a:	bd80      	pop	{r7, pc}
 8006b3c:	20000fe8 	.word	0x20000fe8
 8006b40:	20000ddc 	.word	0x20000ddc
 8006b44:	461c4000 	.word	0x461c4000
 8006b48:	20000b64 	.word	0x20000b64
 8006b4c:	200007f8 	.word	0x200007f8
 8006b50:	44960000 	.word	0x44960000
 8006b54:	20000224 	.word	0x20000224
 8006b58:	20000b6c 	.word	0x20000b6c
 8006b5c:	20001004 	.word	0x20001004
 8006b60:	20000bd8 	.word	0x20000bd8
 8006b64:	45dac000 	.word	0x45dac000
 8006b68:	20000228 	.word	0x20000228
 8006b6c:	20000b68 	.word	0x20000b68
 8006b70:	442f0000 	.word	0x442f0000
 8006b74:	20000b74 	.word	0x20000b74
 8006b78:	20000c7c 	.word	0x20000c7c
 8006b7c:	42200000 	.word	0x42200000
 8006b80:	20000bdc 	.word	0x20000bdc
 8006b84:	425c0000 	.word	0x425c0000
 8006b88:	c5dac000 	.word	0xc5dac000
 8006b8c:	42b40000 	.word	0x42b40000

08006b90 <Lslalom_L903>:
//Lslalom_L903
// 大回りスラロームで右に90度回転する High High Speed
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void Lslalom_L903(void){
 8006b90:	b580      	push	{r7, lr}
 8006b92:	af00      	add	r7, sp, #0
	MF.FLAG.GYRO = 0;
 8006b94:	4a60      	ldr	r2, [pc, #384]	; (8006d18 <Lslalom_L903+0x188>)
 8006b96:	8813      	ldrh	r3, [r2, #0]
 8006b98:	f36f 2308 	bfc	r3, #8, #1
 8006b9c:	8013      	strh	r3, [r2, #0]

	accel_l = 10000;
 8006b9e:	4b5f      	ldr	r3, [pc, #380]	; (8006d1c <Lslalom_L903+0x18c>)
 8006ba0:	4a5f      	ldr	r2, [pc, #380]	; (8006d20 <Lslalom_L903+0x190>)
 8006ba2:	601a      	str	r2, [r3, #0]
	accel_r = 10000;
 8006ba4:	4b5f      	ldr	r3, [pc, #380]	; (8006d24 <Lslalom_L903+0x194>)
 8006ba6:	4a5e      	ldr	r2, [pc, #376]	; (8006d20 <Lslalom_L903+0x190>)
 8006ba8:	601a      	str	r2, [r3, #0]
	speed_max_l = 1200;
 8006baa:	4b5f      	ldr	r3, [pc, #380]	; (8006d28 <Lslalom_L903+0x198>)
 8006bac:	4a5f      	ldr	r2, [pc, #380]	; (8006d2c <Lslalom_L903+0x19c>)
 8006bae:	601a      	str	r2, [r3, #0]
	speed_max_r = 1200;
 8006bb0:	4b5f      	ldr	r3, [pc, #380]	; (8006d30 <Lslalom_L903+0x1a0>)
 8006bb2:	4a5e      	ldr	r2, [pc, #376]	; (8006d2c <Lslalom_L903+0x19c>)
 8006bb4:	601a      	str	r2, [r3, #0]

	control_start();
 8006bb6:	f7fe f8dd 	bl	8004d74 <control_start>
	dist_l = dist_r = 0;
 8006bba:	f04f 0300 	mov.w	r3, #0
 8006bbe:	4a5d      	ldr	r2, [pc, #372]	; (8006d34 <Lslalom_L903+0x1a4>)
 8006bc0:	6013      	str	r3, [r2, #0]
 8006bc2:	4a5d      	ldr	r2, [pc, #372]	; (8006d38 <Lslalom_L903+0x1a8>)
 8006bc4:	6013      	str	r3, [r2, #0]
	while(dist_l < 17 && dist_r < 17);
 8006bc6:	bf00      	nop
 8006bc8:	4b5b      	ldr	r3, [pc, #364]	; (8006d38 <Lslalom_L903+0x1a8>)
 8006bca:	edd3 7a00 	vldr	s15, [r3]
 8006bce:	eeb3 7a01 	vmov.f32	s14, #49	; 0x41880000  17.0
 8006bd2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006bd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006bda:	d509      	bpl.n	8006bf0 <Lslalom_L903+0x60>
 8006bdc:	4b55      	ldr	r3, [pc, #340]	; (8006d34 <Lslalom_L903+0x1a4>)
 8006bde:	edd3 7a00 	vldr	s15, [r3]
 8006be2:	eeb3 7a01 	vmov.f32	s14, #49	; 0x41880000  17.0
 8006be6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006bea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006bee:	d4eb      	bmi.n	8006bc8 <Lslalom_L903+0x38>
	drive_stop();
 8006bf0:	f7fe f898 	bl	8004d24 <drive_stop>
	control_stop();
 8006bf4:	f7fe f8d2 	bl	8004d9c <control_stop>

	MF.FLAG.GYRO = 1;
 8006bf8:	4a47      	ldr	r2, [pc, #284]	; (8006d18 <Lslalom_L903+0x188>)
 8006bfa:	8813      	ldrh	r3, [r2, #0]
 8006bfc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006c00:	8013      	strh	r3, [r2, #0]

	target_degaccel_z = -7000;
 8006c02:	4b4e      	ldr	r3, [pc, #312]	; (8006d3c <Lslalom_L903+0x1ac>)
 8006c04:	4a4e      	ldr	r2, [pc, #312]	; (8006d40 <Lslalom_L903+0x1b0>)
 8006c06:	601a      	str	r2, [r3, #0]
	target_omega_z = 0;
 8006c08:	4b4e      	ldr	r3, [pc, #312]	; (8006d44 <Lslalom_L903+0x1b4>)
 8006c0a:	f04f 0200 	mov.w	r2, #0
 8006c0e:	601a      	str	r2, [r3, #0]
	omega_min = -700;
 8006c10:	4b4d      	ldr	r3, [pc, #308]	; (8006d48 <Lslalom_L903+0x1b8>)
 8006c12:	4a4e      	ldr	r2, [pc, #312]	; (8006d4c <Lslalom_L903+0x1bc>)
 8006c14:	601a      	str	r2, [r3, #0]
	speed_G = 1200;
 8006c16:	4b4e      	ldr	r3, [pc, #312]	; (8006d50 <Lslalom_L903+0x1c0>)
 8006c18:	4a44      	ldr	r2, [pc, #272]	; (8006d2c <Lslalom_L903+0x19c>)
 8006c1a:	601a      	str	r2, [r3, #0]

	MF.FLAG.DRV = 1;
 8006c1c:	4a3e      	ldr	r2, [pc, #248]	; (8006d18 <Lslalom_L903+0x188>)
 8006c1e:	8813      	ldrh	r3, [r2, #0]
 8006c20:	f043 0302 	orr.w	r3, r3, #2
 8006c24:	8013      	strh	r3, [r2, #0]
	while(degree_z < target_degree_z+40);
 8006c26:	bf00      	nop
 8006c28:	4b4a      	ldr	r3, [pc, #296]	; (8006d54 <Lslalom_L903+0x1c4>)
 8006c2a:	edd3 7a00 	vldr	s15, [r3]
 8006c2e:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 8006d58 <Lslalom_L903+0x1c8>
 8006c32:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006c36:	4b49      	ldr	r3, [pc, #292]	; (8006d5c <Lslalom_L903+0x1cc>)
 8006c38:	edd3 7a00 	vldr	s15, [r3]
 8006c3c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006c40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c44:	dcf0      	bgt.n	8006c28 <Lslalom_L903+0x98>

	target_degaccel_z = 0;
 8006c46:	4b3d      	ldr	r3, [pc, #244]	; (8006d3c <Lslalom_L903+0x1ac>)
 8006c48:	f04f 0200 	mov.w	r2, #0
 8006c4c:	601a      	str	r2, [r3, #0]

	while(degree_z < target_degree_z+55);
 8006c4e:	bf00      	nop
 8006c50:	4b40      	ldr	r3, [pc, #256]	; (8006d54 <Lslalom_L903+0x1c4>)
 8006c52:	edd3 7a00 	vldr	s15, [r3]
 8006c56:	ed9f 7a42 	vldr	s14, [pc, #264]	; 8006d60 <Lslalom_L903+0x1d0>
 8006c5a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006c5e:	4b3f      	ldr	r3, [pc, #252]	; (8006d5c <Lslalom_L903+0x1cc>)
 8006c60:	edd3 7a00 	vldr	s15, [r3]
 8006c64:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006c68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c6c:	dcf0      	bgt.n	8006c50 <Lslalom_L903+0xc0>

	target_degaccel_z = 7000;
 8006c6e:	4b33      	ldr	r3, [pc, #204]	; (8006d3c <Lslalom_L903+0x1ac>)
 8006c70:	4a3c      	ldr	r2, [pc, #240]	; (8006d64 <Lslalom_L903+0x1d4>)
 8006c72:	601a      	str	r2, [r3, #0]

	while(degree_z < target_degree_z+90);
 8006c74:	bf00      	nop
 8006c76:	4b37      	ldr	r3, [pc, #220]	; (8006d54 <Lslalom_L903+0x1c4>)
 8006c78:	edd3 7a00 	vldr	s15, [r3]
 8006c7c:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 8006d68 <Lslalom_L903+0x1d8>
 8006c80:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006c84:	4b35      	ldr	r3, [pc, #212]	; (8006d5c <Lslalom_L903+0x1cc>)
 8006c86:	edd3 7a00 	vldr	s15, [r3]
 8006c8a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006c8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c92:	dcf0      	bgt.n	8006c76 <Lslalom_L903+0xe6>
	turn_dir(DIR_TURN_L90, 1);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8006c94:	2101      	movs	r1, #1
 8006c96:	20ff      	movs	r0, #255	; 0xff
 8006c98:	f005 f9ee 	bl	800c078 <turn_dir>

	MF.FLAG.GYRO = 0;
 8006c9c:	4a1e      	ldr	r2, [pc, #120]	; (8006d18 <Lslalom_L903+0x188>)
 8006c9e:	8813      	ldrh	r3, [r2, #0]
 8006ca0:	f36f 2308 	bfc	r3, #8, #1
 8006ca4:	8013      	strh	r3, [r2, #0]

	accel_l = 10000;
 8006ca6:	4b1d      	ldr	r3, [pc, #116]	; (8006d1c <Lslalom_L903+0x18c>)
 8006ca8:	4a1d      	ldr	r2, [pc, #116]	; (8006d20 <Lslalom_L903+0x190>)
 8006caa:	601a      	str	r2, [r3, #0]
	accel_r = 10000;
 8006cac:	4b1d      	ldr	r3, [pc, #116]	; (8006d24 <Lslalom_L903+0x194>)
 8006cae:	4a1c      	ldr	r2, [pc, #112]	; (8006d20 <Lslalom_L903+0x190>)
 8006cb0:	601a      	str	r2, [r3, #0]
	speed_max_l = SPEED_HIGH_HIGH;
 8006cb2:	4b1d      	ldr	r3, [pc, #116]	; (8006d28 <Lslalom_L903+0x198>)
 8006cb4:	4a1d      	ldr	r2, [pc, #116]	; (8006d2c <Lslalom_L903+0x19c>)
 8006cb6:	601a      	str	r2, [r3, #0]
	speed_max_r = SPEED_HIGH_HIGH;
 8006cb8:	4b1d      	ldr	r3, [pc, #116]	; (8006d30 <Lslalom_L903+0x1a0>)
 8006cba:	4a1c      	ldr	r2, [pc, #112]	; (8006d2c <Lslalom_L903+0x19c>)
 8006cbc:	601a      	str	r2, [r3, #0]
	dist_l = dist_r = 0;
 8006cbe:	f04f 0300 	mov.w	r3, #0
 8006cc2:	4a1c      	ldr	r2, [pc, #112]	; (8006d34 <Lslalom_L903+0x1a4>)
 8006cc4:	6013      	str	r3, [r2, #0]
 8006cc6:	4a1c      	ldr	r2, [pc, #112]	; (8006d38 <Lslalom_L903+0x1a8>)
 8006cc8:	6013      	str	r3, [r2, #0]
	MF.FLAG.SPD = 1;
 8006cca:	4a13      	ldr	r2, [pc, #76]	; (8006d18 <Lslalom_L903+0x188>)
 8006ccc:	8813      	ldrh	r3, [r2, #0]
 8006cce:	f043 0304 	orr.w	r3, r3, #4
 8006cd2:	8013      	strh	r3, [r2, #0]
	control_start();
 8006cd4:	f7fe f84e 	bl	8004d74 <control_start>
	while(dist_l < 17 && dist_r < 17);
 8006cd8:	bf00      	nop
 8006cda:	4b17      	ldr	r3, [pc, #92]	; (8006d38 <Lslalom_L903+0x1a8>)
 8006cdc:	edd3 7a00 	vldr	s15, [r3]
 8006ce0:	eeb3 7a01 	vmov.f32	s14, #49	; 0x41880000  17.0
 8006ce4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006ce8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006cec:	d509      	bpl.n	8006d02 <Lslalom_L903+0x172>
 8006cee:	4b11      	ldr	r3, [pc, #68]	; (8006d34 <Lslalom_L903+0x1a4>)
 8006cf0:	edd3 7a00 	vldr	s15, [r3]
 8006cf4:	eeb3 7a01 	vmov.f32	s14, #49	; 0x41880000  17.0
 8006cf8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006cfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006d00:	d4eb      	bmi.n	8006cda <Lslalom_L903+0x14a>
	if(MF.FLAG.SCND == 0)get_wall_info();					//壁情報を取得，片壁制御の有効・無効の判断
 8006d02:	4b05      	ldr	r3, [pc, #20]	; (8006d18 <Lslalom_L903+0x188>)
 8006d04:	881b      	ldrh	r3, [r3, #0]
 8006d06:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8006d0a:	b2db      	uxtb	r3, r3
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d101      	bne.n	8006d14 <Lslalom_L903+0x184>
 8006d10:	f006 fc5e 	bl	800d5d0 <get_wall_info>
}
 8006d14:	bf00      	nop
 8006d16:	bd80      	pop	{r7, pc}
 8006d18:	20000fe8 	.word	0x20000fe8
 8006d1c:	20000ddc 	.word	0x20000ddc
 8006d20:	461c4000 	.word	0x461c4000
 8006d24:	20000b64 	.word	0x20000b64
 8006d28:	200007f8 	.word	0x200007f8
 8006d2c:	44960000 	.word	0x44960000
 8006d30:	20000224 	.word	0x20000224
 8006d34:	20000b6c 	.word	0x20000b6c
 8006d38:	20001004 	.word	0x20001004
 8006d3c:	20000bd8 	.word	0x20000bd8
 8006d40:	c5dac000 	.word	0xc5dac000
 8006d44:	20000228 	.word	0x20000228
 8006d48:	20000338 	.word	0x20000338
 8006d4c:	c42f0000 	.word	0xc42f0000
 8006d50:	20000b74 	.word	0x20000b74
 8006d54:	20000c7c 	.word	0x20000c7c
 8006d58:	42200000 	.word	0x42200000
 8006d5c:	20000bdc 	.word	0x20000bdc
 8006d60:	425c0000 	.word	0x425c0000
 8006d64:	45dac000 	.word	0x45dac000
 8006d68:	42b40000 	.word	0x42b40000

08006d6c <Lslalom_R180>:
//Lslalom_R180
// スラロームで右に180度回転する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void Lslalom_R180(void){
 8006d6c:	b580      	push	{r7, lr}
 8006d6e:	af00      	add	r7, sp, #0
	MF.FLAG.GYRO = 0;
 8006d70:	4a62      	ldr	r2, [pc, #392]	; (8006efc <Lslalom_R180+0x190>)
 8006d72:	8813      	ldrh	r3, [r2, #0]
 8006d74:	f36f 2308 	bfc	r3, #8, #1
 8006d78:	8013      	strh	r3, [r2, #0]

	accel_l = 10000;
 8006d7a:	4b61      	ldr	r3, [pc, #388]	; (8006f00 <Lslalom_R180+0x194>)
 8006d7c:	4a61      	ldr	r2, [pc, #388]	; (8006f04 <Lslalom_R180+0x198>)
 8006d7e:	601a      	str	r2, [r3, #0]
	accel_r = 10000;
 8006d80:	4b61      	ldr	r3, [pc, #388]	; (8006f08 <Lslalom_R180+0x19c>)
 8006d82:	4a60      	ldr	r2, [pc, #384]	; (8006f04 <Lslalom_R180+0x198>)
 8006d84:	601a      	str	r2, [r3, #0]
	speed_max_l = 400;
 8006d86:	4b61      	ldr	r3, [pc, #388]	; (8006f0c <Lslalom_R180+0x1a0>)
 8006d88:	4a61      	ldr	r2, [pc, #388]	; (8006f10 <Lslalom_R180+0x1a4>)
 8006d8a:	601a      	str	r2, [r3, #0]
	speed_max_r = 400;
 8006d8c:	4b61      	ldr	r3, [pc, #388]	; (8006f14 <Lslalom_R180+0x1a8>)
 8006d8e:	4a60      	ldr	r2, [pc, #384]	; (8006f10 <Lslalom_R180+0x1a4>)
 8006d90:	601a      	str	r2, [r3, #0]

	control_start();
 8006d92:	f7fd ffef 	bl	8004d74 <control_start>
	dist_l = dist_r = 0;
 8006d96:	f04f 0300 	mov.w	r3, #0
 8006d9a:	4a5f      	ldr	r2, [pc, #380]	; (8006f18 <Lslalom_R180+0x1ac>)
 8006d9c:	6013      	str	r3, [r2, #0]
 8006d9e:	4a5f      	ldr	r2, [pc, #380]	; (8006f1c <Lslalom_R180+0x1b0>)
 8006da0:	6013      	str	r3, [r2, #0]
	while(dist_l < 60 && dist_r < 60);
 8006da2:	bf00      	nop
 8006da4:	4b5d      	ldr	r3, [pc, #372]	; (8006f1c <Lslalom_R180+0x1b0>)
 8006da6:	edd3 7a00 	vldr	s15, [r3]
 8006daa:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 8006f20 <Lslalom_R180+0x1b4>
 8006dae:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006db2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006db6:	d509      	bpl.n	8006dcc <Lslalom_R180+0x60>
 8006db8:	4b57      	ldr	r3, [pc, #348]	; (8006f18 <Lslalom_R180+0x1ac>)
 8006dba:	edd3 7a00 	vldr	s15, [r3]
 8006dbe:	ed9f 7a58 	vldr	s14, [pc, #352]	; 8006f20 <Lslalom_R180+0x1b4>
 8006dc2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006dc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006dca:	d4eb      	bmi.n	8006da4 <Lslalom_R180+0x38>
	drive_stop();
 8006dcc:	f7fd ffaa 	bl	8004d24 <drive_stop>
	control_stop();
 8006dd0:	f7fd ffe4 	bl	8004d9c <control_stop>

	MF.FLAG.GYRO = 1;
 8006dd4:	4a49      	ldr	r2, [pc, #292]	; (8006efc <Lslalom_R180+0x190>)
 8006dd6:	8813      	ldrh	r3, [r2, #0]
 8006dd8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006ddc:	8013      	strh	r3, [r2, #0]

	target_degaccel_z = 2000;
 8006dde:	4b51      	ldr	r3, [pc, #324]	; (8006f24 <Lslalom_R180+0x1b8>)
 8006de0:	4a51      	ldr	r2, [pc, #324]	; (8006f28 <Lslalom_R180+0x1bc>)
 8006de2:	601a      	str	r2, [r3, #0]
	target_omega_z = 0;
 8006de4:	4b51      	ldr	r3, [pc, #324]	; (8006f2c <Lslalom_R180+0x1c0>)
 8006de6:	f04f 0200 	mov.w	r2, #0
 8006dea:	601a      	str	r2, [r3, #0]
	omega_max = 260;
 8006dec:	4b50      	ldr	r3, [pc, #320]	; (8006f30 <Lslalom_R180+0x1c4>)
 8006dee:	4a51      	ldr	r2, [pc, #324]	; (8006f34 <Lslalom_R180+0x1c8>)
 8006df0:	601a      	str	r2, [r3, #0]
	speed_G = 400;
 8006df2:	4b51      	ldr	r3, [pc, #324]	; (8006f38 <Lslalom_R180+0x1cc>)
 8006df4:	4a46      	ldr	r2, [pc, #280]	; (8006f10 <Lslalom_R180+0x1a4>)
 8006df6:	601a      	str	r2, [r3, #0]

	MF.FLAG.DRV = 1;
 8006df8:	4a40      	ldr	r2, [pc, #256]	; (8006efc <Lslalom_R180+0x190>)
 8006dfa:	8813      	ldrh	r3, [r2, #0]
 8006dfc:	f043 0302 	orr.w	r3, r3, #2
 8006e00:	8013      	strh	r3, [r2, #0]
	while(degree_z > target_degree_z-20);
 8006e02:	bf00      	nop
 8006e04:	4b4d      	ldr	r3, [pc, #308]	; (8006f3c <Lslalom_R180+0x1d0>)
 8006e06:	edd3 7a00 	vldr	s15, [r3]
 8006e0a:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8006e0e:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8006e12:	4b4b      	ldr	r3, [pc, #300]	; (8006f40 <Lslalom_R180+0x1d4>)
 8006e14:	edd3 7a00 	vldr	s15, [r3]
 8006e18:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006e1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006e20:	d4f0      	bmi.n	8006e04 <Lslalom_R180+0x98>

	target_degaccel_z = 0;
 8006e22:	4b40      	ldr	r3, [pc, #256]	; (8006f24 <Lslalom_R180+0x1b8>)
 8006e24:	f04f 0200 	mov.w	r2, #0
 8006e28:	601a      	str	r2, [r3, #0]

	while(degree_z > target_degree_z-170);
 8006e2a:	bf00      	nop
 8006e2c:	4b43      	ldr	r3, [pc, #268]	; (8006f3c <Lslalom_R180+0x1d0>)
 8006e2e:	edd3 7a00 	vldr	s15, [r3]
 8006e32:	ed9f 7a44 	vldr	s14, [pc, #272]	; 8006f44 <Lslalom_R180+0x1d8>
 8006e36:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8006e3a:	4b41      	ldr	r3, [pc, #260]	; (8006f40 <Lslalom_R180+0x1d4>)
 8006e3c:	edd3 7a00 	vldr	s15, [r3]
 8006e40:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006e44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006e48:	d4f0      	bmi.n	8006e2c <Lslalom_R180+0xc0>

	target_degaccel_z = -2000;
 8006e4a:	4b36      	ldr	r3, [pc, #216]	; (8006f24 <Lslalom_R180+0x1b8>)
 8006e4c:	4a3e      	ldr	r2, [pc, #248]	; (8006f48 <Lslalom_R180+0x1dc>)
 8006e4e:	601a      	str	r2, [r3, #0]

	while(degree_z > target_degree_z-180);
 8006e50:	bf00      	nop
 8006e52:	4b3a      	ldr	r3, [pc, #232]	; (8006f3c <Lslalom_R180+0x1d0>)
 8006e54:	edd3 7a00 	vldr	s15, [r3]
 8006e58:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 8006f4c <Lslalom_R180+0x1e0>
 8006e5c:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8006e60:	4b37      	ldr	r3, [pc, #220]	; (8006f40 <Lslalom_R180+0x1d4>)
 8006e62:	edd3 7a00 	vldr	s15, [r3]
 8006e66:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006e6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006e6e:	d4f0      	bmi.n	8006e52 <Lslalom_R180+0xe6>
	turn_dir(DIR_TURN_R90, 1);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8006e70:	2101      	movs	r1, #1
 8006e72:	2001      	movs	r0, #1
 8006e74:	f005 f900 	bl	800c078 <turn_dir>
	turn_dir(DIR_TURN_R90, 1);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8006e78:	2101      	movs	r1, #1
 8006e7a:	2001      	movs	r0, #1
 8006e7c:	f005 f8fc 	bl	800c078 <turn_dir>

	MF.FLAG.GYRO = 0;
 8006e80:	4a1e      	ldr	r2, [pc, #120]	; (8006efc <Lslalom_R180+0x190>)
 8006e82:	8813      	ldrh	r3, [r2, #0]
 8006e84:	f36f 2308 	bfc	r3, #8, #1
 8006e88:	8013      	strh	r3, [r2, #0]

	accel_l = 10000;
 8006e8a:	4b1d      	ldr	r3, [pc, #116]	; (8006f00 <Lslalom_R180+0x194>)
 8006e8c:	4a1d      	ldr	r2, [pc, #116]	; (8006f04 <Lslalom_R180+0x198>)
 8006e8e:	601a      	str	r2, [r3, #0]
	accel_r = 10000;
 8006e90:	4b1d      	ldr	r3, [pc, #116]	; (8006f08 <Lslalom_R180+0x19c>)
 8006e92:	4a1c      	ldr	r2, [pc, #112]	; (8006f04 <Lslalom_R180+0x198>)
 8006e94:	601a      	str	r2, [r3, #0]
	speed_max_l = SPEED_RUN;
 8006e96:	4b1d      	ldr	r3, [pc, #116]	; (8006f0c <Lslalom_R180+0x1a0>)
 8006e98:	4a1d      	ldr	r2, [pc, #116]	; (8006f10 <Lslalom_R180+0x1a4>)
 8006e9a:	601a      	str	r2, [r3, #0]
	speed_max_r = SPEED_RUN;
 8006e9c:	4b1d      	ldr	r3, [pc, #116]	; (8006f14 <Lslalom_R180+0x1a8>)
 8006e9e:	4a1c      	ldr	r2, [pc, #112]	; (8006f10 <Lslalom_R180+0x1a4>)
 8006ea0:	601a      	str	r2, [r3, #0]
	dist_l = dist_r = 0;
 8006ea2:	f04f 0300 	mov.w	r3, #0
 8006ea6:	4a1c      	ldr	r2, [pc, #112]	; (8006f18 <Lslalom_R180+0x1ac>)
 8006ea8:	6013      	str	r3, [r2, #0]
 8006eaa:	4a1c      	ldr	r2, [pc, #112]	; (8006f1c <Lslalom_R180+0x1b0>)
 8006eac:	6013      	str	r3, [r2, #0]
	MF.FLAG.SPD = 1;
 8006eae:	4a13      	ldr	r2, [pc, #76]	; (8006efc <Lslalom_R180+0x190>)
 8006eb0:	8813      	ldrh	r3, [r2, #0]
 8006eb2:	f043 0304 	orr.w	r3, r3, #4
 8006eb6:	8013      	strh	r3, [r2, #0]
	control_start();
 8006eb8:	f7fd ff5c 	bl	8004d74 <control_start>
	while(dist_l < 60 && dist_r < 60);
 8006ebc:	bf00      	nop
 8006ebe:	4b17      	ldr	r3, [pc, #92]	; (8006f1c <Lslalom_R180+0x1b0>)
 8006ec0:	edd3 7a00 	vldr	s15, [r3]
 8006ec4:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8006f20 <Lslalom_R180+0x1b4>
 8006ec8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006ecc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ed0:	d509      	bpl.n	8006ee6 <Lslalom_R180+0x17a>
 8006ed2:	4b11      	ldr	r3, [pc, #68]	; (8006f18 <Lslalom_R180+0x1ac>)
 8006ed4:	edd3 7a00 	vldr	s15, [r3]
 8006ed8:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8006f20 <Lslalom_R180+0x1b4>
 8006edc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006ee0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ee4:	d4eb      	bmi.n	8006ebe <Lslalom_R180+0x152>
	if(MF.FLAG.SCND == 0)get_wall_info();					//壁情報を取得，片壁制御の有効・無効の判断
 8006ee6:	4b05      	ldr	r3, [pc, #20]	; (8006efc <Lslalom_R180+0x190>)
 8006ee8:	881b      	ldrh	r3, [r3, #0]
 8006eea:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8006eee:	b2db      	uxtb	r3, r3
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d101      	bne.n	8006ef8 <Lslalom_R180+0x18c>
 8006ef4:	f006 fb6c 	bl	800d5d0 <get_wall_info>
}
 8006ef8:	bf00      	nop
 8006efa:	bd80      	pop	{r7, pc}
 8006efc:	20000fe8 	.word	0x20000fe8
 8006f00:	20000ddc 	.word	0x20000ddc
 8006f04:	461c4000 	.word	0x461c4000
 8006f08:	20000b64 	.word	0x20000b64
 8006f0c:	200007f8 	.word	0x200007f8
 8006f10:	43c80000 	.word	0x43c80000
 8006f14:	20000224 	.word	0x20000224
 8006f18:	20000b6c 	.word	0x20000b6c
 8006f1c:	20001004 	.word	0x20001004
 8006f20:	42700000 	.word	0x42700000
 8006f24:	20000bd8 	.word	0x20000bd8
 8006f28:	44fa0000 	.word	0x44fa0000
 8006f2c:	20000228 	.word	0x20000228
 8006f30:	20000b68 	.word	0x20000b68
 8006f34:	43820000 	.word	0x43820000
 8006f38:	20000b74 	.word	0x20000b74
 8006f3c:	20000c7c 	.word	0x20000c7c
 8006f40:	20000bdc 	.word	0x20000bdc
 8006f44:	432a0000 	.word	0x432a0000
 8006f48:	c4fa0000 	.word	0xc4fa0000
 8006f4c:	43340000 	.word	0x43340000

08006f50 <Lslalom_L180>:
//Lslalom_L180
// 大回りスラロームで右に180度回転する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void Lslalom_L180(void){
 8006f50:	b580      	push	{r7, lr}
 8006f52:	af00      	add	r7, sp, #0
	MF.FLAG.GYRO = 0;
 8006f54:	4a62      	ldr	r2, [pc, #392]	; (80070e0 <Lslalom_L180+0x190>)
 8006f56:	8813      	ldrh	r3, [r2, #0]
 8006f58:	f36f 2308 	bfc	r3, #8, #1
 8006f5c:	8013      	strh	r3, [r2, #0]

	accel_l = 10000;
 8006f5e:	4b61      	ldr	r3, [pc, #388]	; (80070e4 <Lslalom_L180+0x194>)
 8006f60:	4a61      	ldr	r2, [pc, #388]	; (80070e8 <Lslalom_L180+0x198>)
 8006f62:	601a      	str	r2, [r3, #0]
	accel_r = 10000;
 8006f64:	4b61      	ldr	r3, [pc, #388]	; (80070ec <Lslalom_L180+0x19c>)
 8006f66:	4a60      	ldr	r2, [pc, #384]	; (80070e8 <Lslalom_L180+0x198>)
 8006f68:	601a      	str	r2, [r3, #0]
	speed_max_l = 400;
 8006f6a:	4b61      	ldr	r3, [pc, #388]	; (80070f0 <Lslalom_L180+0x1a0>)
 8006f6c:	4a61      	ldr	r2, [pc, #388]	; (80070f4 <Lslalom_L180+0x1a4>)
 8006f6e:	601a      	str	r2, [r3, #0]
	speed_max_r = 400;
 8006f70:	4b61      	ldr	r3, [pc, #388]	; (80070f8 <Lslalom_L180+0x1a8>)
 8006f72:	4a60      	ldr	r2, [pc, #384]	; (80070f4 <Lslalom_L180+0x1a4>)
 8006f74:	601a      	str	r2, [r3, #0]

	control_start();
 8006f76:	f7fd fefd 	bl	8004d74 <control_start>
	dist_l = dist_r = 0;
 8006f7a:	f04f 0300 	mov.w	r3, #0
 8006f7e:	4a5f      	ldr	r2, [pc, #380]	; (80070fc <Lslalom_L180+0x1ac>)
 8006f80:	6013      	str	r3, [r2, #0]
 8006f82:	4a5f      	ldr	r2, [pc, #380]	; (8007100 <Lslalom_L180+0x1b0>)
 8006f84:	6013      	str	r3, [r2, #0]
	while(dist_l < 60 && dist_r < 60);
 8006f86:	bf00      	nop
 8006f88:	4b5d      	ldr	r3, [pc, #372]	; (8007100 <Lslalom_L180+0x1b0>)
 8006f8a:	edd3 7a00 	vldr	s15, [r3]
 8006f8e:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 8007104 <Lslalom_L180+0x1b4>
 8006f92:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006f96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006f9a:	d509      	bpl.n	8006fb0 <Lslalom_L180+0x60>
 8006f9c:	4b57      	ldr	r3, [pc, #348]	; (80070fc <Lslalom_L180+0x1ac>)
 8006f9e:	edd3 7a00 	vldr	s15, [r3]
 8006fa2:	ed9f 7a58 	vldr	s14, [pc, #352]	; 8007104 <Lslalom_L180+0x1b4>
 8006fa6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006faa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006fae:	d4eb      	bmi.n	8006f88 <Lslalom_L180+0x38>
	drive_stop();
 8006fb0:	f7fd feb8 	bl	8004d24 <drive_stop>
	control_stop();
 8006fb4:	f7fd fef2 	bl	8004d9c <control_stop>

	MF.FLAG.GYRO = 1;
 8006fb8:	4a49      	ldr	r2, [pc, #292]	; (80070e0 <Lslalom_L180+0x190>)
 8006fba:	8813      	ldrh	r3, [r2, #0]
 8006fbc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006fc0:	8013      	strh	r3, [r2, #0]

	target_degaccel_z = -2000;
 8006fc2:	4b51      	ldr	r3, [pc, #324]	; (8007108 <Lslalom_L180+0x1b8>)
 8006fc4:	4a51      	ldr	r2, [pc, #324]	; (800710c <Lslalom_L180+0x1bc>)
 8006fc6:	601a      	str	r2, [r3, #0]
	target_omega_z = 0;
 8006fc8:	4b51      	ldr	r3, [pc, #324]	; (8007110 <Lslalom_L180+0x1c0>)
 8006fca:	f04f 0200 	mov.w	r2, #0
 8006fce:	601a      	str	r2, [r3, #0]
	omega_min = -260;
 8006fd0:	4b50      	ldr	r3, [pc, #320]	; (8007114 <Lslalom_L180+0x1c4>)
 8006fd2:	4a51      	ldr	r2, [pc, #324]	; (8007118 <Lslalom_L180+0x1c8>)
 8006fd4:	601a      	str	r2, [r3, #0]
	speed_G = 400;
 8006fd6:	4b51      	ldr	r3, [pc, #324]	; (800711c <Lslalom_L180+0x1cc>)
 8006fd8:	4a46      	ldr	r2, [pc, #280]	; (80070f4 <Lslalom_L180+0x1a4>)
 8006fda:	601a      	str	r2, [r3, #0]

	MF.FLAG.DRV = 1;
 8006fdc:	4a40      	ldr	r2, [pc, #256]	; (80070e0 <Lslalom_L180+0x190>)
 8006fde:	8813      	ldrh	r3, [r2, #0]
 8006fe0:	f043 0302 	orr.w	r3, r3, #2
 8006fe4:	8013      	strh	r3, [r2, #0]
	while(degree_z < target_degree_z+20);
 8006fe6:	bf00      	nop
 8006fe8:	4b4d      	ldr	r3, [pc, #308]	; (8007120 <Lslalom_L180+0x1d0>)
 8006fea:	edd3 7a00 	vldr	s15, [r3]
 8006fee:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8006ff2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006ff6:	4b4b      	ldr	r3, [pc, #300]	; (8007124 <Lslalom_L180+0x1d4>)
 8006ff8:	edd3 7a00 	vldr	s15, [r3]
 8006ffc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007000:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007004:	dcf0      	bgt.n	8006fe8 <Lslalom_L180+0x98>

	target_degaccel_z = 0;
 8007006:	4b40      	ldr	r3, [pc, #256]	; (8007108 <Lslalom_L180+0x1b8>)
 8007008:	f04f 0200 	mov.w	r2, #0
 800700c:	601a      	str	r2, [r3, #0]

	while(degree_z < target_degree_z+170);
 800700e:	bf00      	nop
 8007010:	4b43      	ldr	r3, [pc, #268]	; (8007120 <Lslalom_L180+0x1d0>)
 8007012:	edd3 7a00 	vldr	s15, [r3]
 8007016:	ed9f 7a44 	vldr	s14, [pc, #272]	; 8007128 <Lslalom_L180+0x1d8>
 800701a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800701e:	4b41      	ldr	r3, [pc, #260]	; (8007124 <Lslalom_L180+0x1d4>)
 8007020:	edd3 7a00 	vldr	s15, [r3]
 8007024:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007028:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800702c:	dcf0      	bgt.n	8007010 <Lslalom_L180+0xc0>

	target_degaccel_z = 2000;
 800702e:	4b36      	ldr	r3, [pc, #216]	; (8007108 <Lslalom_L180+0x1b8>)
 8007030:	4a3e      	ldr	r2, [pc, #248]	; (800712c <Lslalom_L180+0x1dc>)
 8007032:	601a      	str	r2, [r3, #0]

	while(degree_z < target_degree_z+180);
 8007034:	bf00      	nop
 8007036:	4b3a      	ldr	r3, [pc, #232]	; (8007120 <Lslalom_L180+0x1d0>)
 8007038:	edd3 7a00 	vldr	s15, [r3]
 800703c:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 8007130 <Lslalom_L180+0x1e0>
 8007040:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007044:	4b37      	ldr	r3, [pc, #220]	; (8007124 <Lslalom_L180+0x1d4>)
 8007046:	edd3 7a00 	vldr	s15, [r3]
 800704a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800704e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007052:	dcf0      	bgt.n	8007036 <Lslalom_L180+0xe6>
	turn_dir(DIR_TURN_L90, 1);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8007054:	2101      	movs	r1, #1
 8007056:	20ff      	movs	r0, #255	; 0xff
 8007058:	f005 f80e 	bl	800c078 <turn_dir>
	turn_dir(DIR_TURN_L90, 1);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 800705c:	2101      	movs	r1, #1
 800705e:	20ff      	movs	r0, #255	; 0xff
 8007060:	f005 f80a 	bl	800c078 <turn_dir>

	MF.FLAG.GYRO = 0;
 8007064:	4a1e      	ldr	r2, [pc, #120]	; (80070e0 <Lslalom_L180+0x190>)
 8007066:	8813      	ldrh	r3, [r2, #0]
 8007068:	f36f 2308 	bfc	r3, #8, #1
 800706c:	8013      	strh	r3, [r2, #0]

	accel_l = 10000;
 800706e:	4b1d      	ldr	r3, [pc, #116]	; (80070e4 <Lslalom_L180+0x194>)
 8007070:	4a1d      	ldr	r2, [pc, #116]	; (80070e8 <Lslalom_L180+0x198>)
 8007072:	601a      	str	r2, [r3, #0]
	accel_r = 10000;
 8007074:	4b1d      	ldr	r3, [pc, #116]	; (80070ec <Lslalom_L180+0x19c>)
 8007076:	4a1c      	ldr	r2, [pc, #112]	; (80070e8 <Lslalom_L180+0x198>)
 8007078:	601a      	str	r2, [r3, #0]
	speed_max_l = SPEED_RUN;
 800707a:	4b1d      	ldr	r3, [pc, #116]	; (80070f0 <Lslalom_L180+0x1a0>)
 800707c:	4a1d      	ldr	r2, [pc, #116]	; (80070f4 <Lslalom_L180+0x1a4>)
 800707e:	601a      	str	r2, [r3, #0]
	speed_max_r = SPEED_RUN;
 8007080:	4b1d      	ldr	r3, [pc, #116]	; (80070f8 <Lslalom_L180+0x1a8>)
 8007082:	4a1c      	ldr	r2, [pc, #112]	; (80070f4 <Lslalom_L180+0x1a4>)
 8007084:	601a      	str	r2, [r3, #0]
	dist_l = dist_r = 0;
 8007086:	f04f 0300 	mov.w	r3, #0
 800708a:	4a1c      	ldr	r2, [pc, #112]	; (80070fc <Lslalom_L180+0x1ac>)
 800708c:	6013      	str	r3, [r2, #0]
 800708e:	4a1c      	ldr	r2, [pc, #112]	; (8007100 <Lslalom_L180+0x1b0>)
 8007090:	6013      	str	r3, [r2, #0]
	MF.FLAG.SPD = 1;
 8007092:	4a13      	ldr	r2, [pc, #76]	; (80070e0 <Lslalom_L180+0x190>)
 8007094:	8813      	ldrh	r3, [r2, #0]
 8007096:	f043 0304 	orr.w	r3, r3, #4
 800709a:	8013      	strh	r3, [r2, #0]
	control_start();
 800709c:	f7fd fe6a 	bl	8004d74 <control_start>
	while(dist_l < 60 && dist_r < 60);
 80070a0:	bf00      	nop
 80070a2:	4b17      	ldr	r3, [pc, #92]	; (8007100 <Lslalom_L180+0x1b0>)
 80070a4:	edd3 7a00 	vldr	s15, [r3]
 80070a8:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8007104 <Lslalom_L180+0x1b4>
 80070ac:	eef4 7ac7 	vcmpe.f32	s15, s14
 80070b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80070b4:	d509      	bpl.n	80070ca <Lslalom_L180+0x17a>
 80070b6:	4b11      	ldr	r3, [pc, #68]	; (80070fc <Lslalom_L180+0x1ac>)
 80070b8:	edd3 7a00 	vldr	s15, [r3]
 80070bc:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8007104 <Lslalom_L180+0x1b4>
 80070c0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80070c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80070c8:	d4eb      	bmi.n	80070a2 <Lslalom_L180+0x152>
	if(MF.FLAG.SCND == 0)get_wall_info();					//壁情報を取得，片壁制御の有効・無効の判断
 80070ca:	4b05      	ldr	r3, [pc, #20]	; (80070e0 <Lslalom_L180+0x190>)
 80070cc:	881b      	ldrh	r3, [r3, #0]
 80070ce:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80070d2:	b2db      	uxtb	r3, r3
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d101      	bne.n	80070dc <Lslalom_L180+0x18c>
 80070d8:	f006 fa7a 	bl	800d5d0 <get_wall_info>
}
 80070dc:	bf00      	nop
 80070de:	bd80      	pop	{r7, pc}
 80070e0:	20000fe8 	.word	0x20000fe8
 80070e4:	20000ddc 	.word	0x20000ddc
 80070e8:	461c4000 	.word	0x461c4000
 80070ec:	20000b64 	.word	0x20000b64
 80070f0:	200007f8 	.word	0x200007f8
 80070f4:	43c80000 	.word	0x43c80000
 80070f8:	20000224 	.word	0x20000224
 80070fc:	20000b6c 	.word	0x20000b6c
 8007100:	20001004 	.word	0x20001004
 8007104:	42700000 	.word	0x42700000
 8007108:	20000bd8 	.word	0x20000bd8
 800710c:	c4fa0000 	.word	0xc4fa0000
 8007110:	20000228 	.word	0x20000228
 8007114:	20000338 	.word	0x20000338
 8007118:	c3820000 	.word	0xc3820000
 800711c:	20000b74 	.word	0x20000b74
 8007120:	20000c7c 	.word	0x20000c7c
 8007124:	20000bdc 	.word	0x20000bdc
 8007128:	432a0000 	.word	0x432a0000
 800712c:	44fa0000 	.word	0x44fa0000
 8007130:	43340000 	.word	0x43340000

08007134 <v_R45>:
//v_R45
// 区画中心から左に45度回転する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void v_R45(void){
 8007134:	b580      	push	{r7, lr}
 8007136:	af00      	add	r7, sp, #0
	//MF.FLAG.LOG = 1;

	full_led_write(2);
 8007138:	2002      	movs	r0, #2
 800713a:	f006 fabd 	bl	800d6b8 <full_led_write>
	MF.FLAG.GYRO = 0;
 800713e:	4a53      	ldr	r2, [pc, #332]	; (800728c <v_R45+0x158>)
 8007140:	8813      	ldrh	r3, [r2, #0]
 8007142:	f36f 2308 	bfc	r3, #8, #1
 8007146:	8013      	strh	r3, [r2, #0]

	accel_l = 5000;
 8007148:	4b51      	ldr	r3, [pc, #324]	; (8007290 <v_R45+0x15c>)
 800714a:	4a52      	ldr	r2, [pc, #328]	; (8007294 <v_R45+0x160>)
 800714c:	601a      	str	r2, [r3, #0]
	accel_r = 5000;
 800714e:	4b52      	ldr	r3, [pc, #328]	; (8007298 <v_R45+0x164>)
 8007150:	4a50      	ldr	r2, [pc, #320]	; (8007294 <v_R45+0x160>)
 8007152:	601a      	str	r2, [r3, #0]
	speed_max_l = 600;
 8007154:	4b51      	ldr	r3, [pc, #324]	; (800729c <v_R45+0x168>)
 8007156:	4a52      	ldr	r2, [pc, #328]	; (80072a0 <v_R45+0x16c>)
 8007158:	601a      	str	r2, [r3, #0]
	speed_max_r = 600;
 800715a:	4b52      	ldr	r3, [pc, #328]	; (80072a4 <v_R45+0x170>)
 800715c:	4a50      	ldr	r2, [pc, #320]	; (80072a0 <v_R45+0x16c>)
 800715e:	601a      	str	r2, [r3, #0]

	drive_start();											//走行開始
 8007160:	f7fd fdb2 	bl	8004cc8 <drive_start>
//	control_start();
	while(dist_l < 25 && dist_r < 25);
 8007164:	bf00      	nop
 8007166:	4b50      	ldr	r3, [pc, #320]	; (80072a8 <v_R45+0x174>)
 8007168:	edd3 7a00 	vldr	s15, [r3]
 800716c:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8007170:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007174:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007178:	d509      	bpl.n	800718e <v_R45+0x5a>
 800717a:	4b4c      	ldr	r3, [pc, #304]	; (80072ac <v_R45+0x178>)
 800717c:	edd3 7a00 	vldr	s15, [r3]
 8007180:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8007184:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007188:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800718c:	d4eb      	bmi.n	8007166 <v_R45+0x32>
	drive_stop();
 800718e:	f7fd fdc9 	bl	8004d24 <drive_stop>
	control_stop();
 8007192:	f7fd fe03 	bl	8004d9c <control_stop>

	full_led_write(3);
 8007196:	2003      	movs	r0, #3
 8007198:	f006 fa8e 	bl	800d6b8 <full_led_write>
	MF.FLAG.GYRO = 1;
 800719c:	4a3b      	ldr	r2, [pc, #236]	; (800728c <v_R45+0x158>)
 800719e:	8813      	ldrh	r3, [r2, #0]
 80071a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80071a4:	8013      	strh	r3, [r2, #0]

	target_degaccel_z = 6000;
 80071a6:	4b42      	ldr	r3, [pc, #264]	; (80072b0 <v_R45+0x17c>)
 80071a8:	4a42      	ldr	r2, [pc, #264]	; (80072b4 <v_R45+0x180>)
 80071aa:	601a      	str	r2, [r3, #0]
	omega_max = 300;
 80071ac:	4b42      	ldr	r3, [pc, #264]	; (80072b8 <v_R45+0x184>)
 80071ae:	4a43      	ldr	r2, [pc, #268]	; (80072bc <v_R45+0x188>)
 80071b0:	601a      	str	r2, [r3, #0]
	speed_G = 600;
 80071b2:	4b43      	ldr	r3, [pc, #268]	; (80072c0 <v_R45+0x18c>)
 80071b4:	4a3a      	ldr	r2, [pc, #232]	; (80072a0 <v_R45+0x16c>)
 80071b6:	601a      	str	r2, [r3, #0]

	degree_z = 0;				//a機体角度の初期化
 80071b8:	4b42      	ldr	r3, [pc, #264]	; (80072c4 <v_R45+0x190>)
 80071ba:	f04f 0200 	mov.w	r2, #0
 80071be:	601a      	str	r2, [r3, #0]
	pulse_l = pulse_r = 0;		//aモータ出力の初期化
 80071c0:	f04f 0300 	mov.w	r3, #0
 80071c4:	4a40      	ldr	r2, [pc, #256]	; (80072c8 <v_R45+0x194>)
 80071c6:	6013      	str	r3, [r2, #0]
 80071c8:	4a40      	ldr	r2, [pc, #256]	; (80072cc <v_R45+0x198>)
 80071ca:	6013      	str	r3, [r2, #0]
	MF.FLAG.DRV = 1;
 80071cc:	4a2f      	ldr	r2, [pc, #188]	; (800728c <v_R45+0x158>)
 80071ce:	8813      	ldrh	r3, [r2, #0]
 80071d0:	f043 0302 	orr.w	r3, r3, #2
 80071d4:	8013      	strh	r3, [r2, #0]
	while(degree_z > -7.5);
 80071d6:	bf00      	nop
 80071d8:	4b3a      	ldr	r3, [pc, #232]	; (80072c4 <v_R45+0x190>)
 80071da:	edd3 7a00 	vldr	s15, [r3]
 80071de:	eeb9 7a0e 	vmov.f32	s14, #158	; 0xc0f00000 -7.5
 80071e2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80071e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80071ea:	dcf5      	bgt.n	80071d8 <v_R45+0xa4>

	full_led_write(4);
 80071ec:	2004      	movs	r0, #4
 80071ee:	f006 fa63 	bl	800d6b8 <full_led_write>
	MF.FLAG.GYRO = 1;
 80071f2:	4a26      	ldr	r2, [pc, #152]	; (800728c <v_R45+0x158>)
 80071f4:	8813      	ldrh	r3, [r2, #0]
 80071f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80071fa:	8013      	strh	r3, [r2, #0]

	target_degaccel_z = 0;
 80071fc:	4b2c      	ldr	r3, [pc, #176]	; (80072b0 <v_R45+0x17c>)
 80071fe:	f04f 0200 	mov.w	r2, #0
 8007202:	601a      	str	r2, [r3, #0]

//	degree_z = 0;				//a機体角度の初期化
	pulse_l = pulse_r = 0;		//aモータ出力の初期化
 8007204:	f04f 0300 	mov.w	r3, #0
 8007208:	4a2f      	ldr	r2, [pc, #188]	; (80072c8 <v_R45+0x194>)
 800720a:	6013      	str	r3, [r2, #0]
 800720c:	4a2f      	ldr	r2, [pc, #188]	; (80072cc <v_R45+0x198>)
 800720e:	6013      	str	r3, [r2, #0]
	MF.FLAG.DRV = 1;
 8007210:	4a1e      	ldr	r2, [pc, #120]	; (800728c <v_R45+0x158>)
 8007212:	8813      	ldrh	r3, [r2, #0]
 8007214:	f043 0302 	orr.w	r3, r3, #2
 8007218:	8013      	strh	r3, [r2, #0]
	while(degree_z > -37.5);
 800721a:	bf00      	nop
 800721c:	4b29      	ldr	r3, [pc, #164]	; (80072c4 <v_R45+0x190>)
 800721e:	edd3 7a00 	vldr	s15, [r3]
 8007222:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 80072d0 <v_R45+0x19c>
 8007226:	eef4 7ac7 	vcmpe.f32	s15, s14
 800722a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800722e:	dcf5      	bgt.n	800721c <v_R45+0xe8>

	full_led_write(5);
 8007230:	2005      	movs	r0, #5
 8007232:	f006 fa41 	bl	800d6b8 <full_led_write>
	MF.FLAG.GYRO = 1;
 8007236:	4a15      	ldr	r2, [pc, #84]	; (800728c <v_R45+0x158>)
 8007238:	8813      	ldrh	r3, [r2, #0]
 800723a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800723e:	8013      	strh	r3, [r2, #0]

	target_degaccel_z = -6000;
 8007240:	4b1b      	ldr	r3, [pc, #108]	; (80072b0 <v_R45+0x17c>)
 8007242:	4a24      	ldr	r2, [pc, #144]	; (80072d4 <v_R45+0x1a0>)
 8007244:	601a      	str	r2, [r3, #0]

//	degree_z = 0;				//a機体角度の初期化
	pulse_l = pulse_r = 0;		//aモータ出力の初期化
 8007246:	f04f 0300 	mov.w	r3, #0
 800724a:	4a1f      	ldr	r2, [pc, #124]	; (80072c8 <v_R45+0x194>)
 800724c:	6013      	str	r3, [r2, #0]
 800724e:	4a1f      	ldr	r2, [pc, #124]	; (80072cc <v_R45+0x198>)
 8007250:	6013      	str	r3, [r2, #0]
	MF.FLAG.DRV = 1;
 8007252:	4a0e      	ldr	r2, [pc, #56]	; (800728c <v_R45+0x158>)
 8007254:	8813      	ldrh	r3, [r2, #0]
 8007256:	f043 0302 	orr.w	r3, r3, #2
 800725a:	8013      	strh	r3, [r2, #0]
	while(degree_z > -45);
 800725c:	bf00      	nop
 800725e:	4b19      	ldr	r3, [pc, #100]	; (80072c4 <v_R45+0x190>)
 8007260:	edd3 7a00 	vldr	s15, [r3]
 8007264:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 80072d8 <v_R45+0x1a4>
 8007268:	eef4 7ac7 	vcmpe.f32	s15, s14
 800726c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007270:	dcf5      	bgt.n	800725e <v_R45+0x12a>

	full_led_write(6);
 8007272:	2006      	movs	r0, #6
 8007274:	f006 fa20 	bl	800d6b8 <full_led_write>
	MF.FLAG.GYRO = 0;
 8007278:	4a04      	ldr	r2, [pc, #16]	; (800728c <v_R45+0x158>)
 800727a:	8813      	ldrh	r3, [r2, #0]
 800727c:	f36f 2308 	bfc	r3, #8, #1
 8007280:	8013      	strh	r3, [r2, #0]
	drive_start();											//走行開始
	control_start();
	while(dist_l < 34 && dist_r < 34);
	turn_dir(DIR_TURN_R90);									//マイクロマウス内部位置情報でも左回転処理
	get_wall_info();										//壁情報を取得，片壁制御の有効・無効の判断
*/	drive_stop();
 8007282:	f7fd fd4f 	bl	8004d24 <drive_stop>
}
 8007286:	bf00      	nop
 8007288:	bd80      	pop	{r7, pc}
 800728a:	bf00      	nop
 800728c:	20000fe8 	.word	0x20000fe8
 8007290:	20000ddc 	.word	0x20000ddc
 8007294:	459c4000 	.word	0x459c4000
 8007298:	20000b64 	.word	0x20000b64
 800729c:	200007f8 	.word	0x200007f8
 80072a0:	44160000 	.word	0x44160000
 80072a4:	20000224 	.word	0x20000224
 80072a8:	20001004 	.word	0x20001004
 80072ac:	20000b6c 	.word	0x20000b6c
 80072b0:	20000bd8 	.word	0x20000bd8
 80072b4:	45bb8000 	.word	0x45bb8000
 80072b8:	20000b68 	.word	0x20000b68
 80072bc:	43960000 	.word	0x43960000
 80072c0:	20000b74 	.word	0x20000b74
 80072c4:	20000bdc 	.word	0x20000bdc
 80072c8:	200007fc 	.word	0x200007fc
 80072cc:	20000c28 	.word	0x20000c28
 80072d0:	c2160000 	.word	0xc2160000
 80072d4:	c5bb8000 	.word	0xc5bb8000
 80072d8:	c2340000 	.word	0xc2340000

080072dc <test_select>:
//test_select
// 走行系テスト選択
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void test_select(void){
 80072dc:	b580      	push	{r7, lr}
 80072de:	b082      	sub	sp, #8
 80072e0:	af00      	add	r7, sp, #0
	int mode = 0;
 80072e2:	2300      	movs	r3, #0
 80072e4:	607b      	str	r3, [r7, #4]
	printf("Test Select, Mode : %d\n", mode);
 80072e6:	6879      	ldr	r1, [r7, #4]
 80072e8:	483b      	ldr	r0, [pc, #236]	; (80073d8 <test_select+0xfc>)
 80072ea:	f006 ff79 	bl	800e1e0 <iprintf>

	while(1){
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	b2db      	uxtb	r3, r3
 80072f2:	f003 0301 	and.w	r3, r3, #1
 80072f6:	b2d8      	uxtb	r0, r3
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	b2db      	uxtb	r3, r3
 80072fc:	f003 0302 	and.w	r3, r3, #2
 8007300:	b2d9      	uxtb	r1, r3
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	b2db      	uxtb	r3, r3
 8007306:	f003 0304 	and.w	r3, r3, #4
 800730a:	b2db      	uxtb	r3, r3
 800730c:	461a      	mov	r2, r3
 800730e:	f006 f999 	bl	800d644 <led_write>
		  if(dist_r >= 20){
 8007312:	4b32      	ldr	r3, [pc, #200]	; (80073dc <test_select+0x100>)
 8007314:	edd3 7a00 	vldr	s15, [r3]
 8007318:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 800731c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007320:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007324:	db0f      	blt.n	8007346 <test_select+0x6a>
			  mode++;
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	3301      	adds	r3, #1
 800732a:	607b      	str	r3, [r7, #4]
			  dist_r = 0;
 800732c:	4b2b      	ldr	r3, [pc, #172]	; (80073dc <test_select+0x100>)
 800732e:	f04f 0200 	mov.w	r2, #0
 8007332:	601a      	str	r2, [r3, #0]
			  if(mode > 7){
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	2b07      	cmp	r3, #7
 8007338:	dd01      	ble.n	800733e <test_select+0x62>
				  mode = 0;
 800733a:	2300      	movs	r3, #0
 800733c:	607b      	str	r3, [r7, #4]
			  }
			  printf("Mode : %d\n", mode);
 800733e:	6879      	ldr	r1, [r7, #4]
 8007340:	4827      	ldr	r0, [pc, #156]	; (80073e0 <test_select+0x104>)
 8007342:	f006 ff4d 	bl	800e1e0 <iprintf>
			  //buzzer(pitagola2[mode-1][0], pitagola2[mode-1][1]);
			  //buzzer(pitagola[2][0], pitagola[2][1]);
		  }
		  if(dist_r <= -20){
 8007346:	4b25      	ldr	r3, [pc, #148]	; (80073dc <test_select+0x100>)
 8007348:	edd3 7a00 	vldr	s15, [r3]
 800734c:	eebb 7a04 	vmov.f32	s14, #180	; 0xc1a00000 -20.0
 8007350:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007354:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007358:	d80f      	bhi.n	800737a <test_select+0x9e>
			  mode--;
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	3b01      	subs	r3, #1
 800735e:	607b      	str	r3, [r7, #4]
			  dist_r = 0;
 8007360:	4b1e      	ldr	r3, [pc, #120]	; (80073dc <test_select+0x100>)
 8007362:	f04f 0200 	mov.w	r2, #0
 8007366:	601a      	str	r2, [r3, #0]
			  if(mode < 0){
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	2b00      	cmp	r3, #0
 800736c:	da01      	bge.n	8007372 <test_select+0x96>
				  mode = 7;
 800736e:	2307      	movs	r3, #7
 8007370:	607b      	str	r3, [r7, #4]
			  }
			  printf("Mode : %d\n", mode);
 8007372:	6879      	ldr	r1, [r7, #4]
 8007374:	481a      	ldr	r0, [pc, #104]	; (80073e0 <test_select+0x104>)
 8007376:	f006 ff33 	bl	800e1e0 <iprintf>
			  //buzzer(pitagola2[mode-1][0], pitagola2[mode-1][1]);
			  //buzzer(pitagola[2][0], pitagola[2][1]);
		  }
		  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET){
 800737a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800737e:	4819      	ldr	r0, [pc, #100]	; (80073e4 <test_select+0x108>)
 8007380:	f7fa ffa8 	bl	80022d4 <HAL_GPIO_ReadPin>
 8007384:	4603      	mov	r3, r0
 8007386:	2b00      	cmp	r3, #0
 8007388:	d1b1      	bne.n	80072ee <test_select+0x12>
			  HAL_Delay(50);
 800738a:	2032      	movs	r0, #50	; 0x32
 800738c:	f7f9 fe46 	bl	800101c <HAL_Delay>
			  while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET);
 8007390:	bf00      	nop
 8007392:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007396:	4813      	ldr	r0, [pc, #76]	; (80073e4 <test_select+0x108>)
 8007398:	f7fa ff9c 	bl	80022d4 <HAL_GPIO_ReadPin>
 800739c:	4603      	mov	r3, r0
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d0f7      	beq.n	8007392 <test_select+0xb6>
			  switch(mode){
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	3b01      	subs	r3, #1
 80073a6:	2b03      	cmp	r3, #3
 80073a8:	d8a1      	bhi.n	80072ee <test_select+0x12>
 80073aa:	a201      	add	r2, pc, #4	; (adr r2, 80073b0 <test_select+0xd4>)
 80073ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073b0:	080073c1 	.word	0x080073c1
 80073b4:	080073c7 	.word	0x080073c7
 80073b8:	080073cd 	.word	0x080073cd
 80073bc:	080073d3 	.word	0x080073d3
				case 1:
					init_test();
 80073c0:	f000 f812 	bl	80073e8 <init_test>
					break;
 80073c4:	e007      	b.n	80073d6 <test_select+0xfa>

				case 2:
					slalom_test();
 80073c6:	f000 f90d 	bl	80075e4 <slalom_test>
					break;
 80073ca:	e004      	b.n	80073d6 <test_select+0xfa>

				case 3:
					sample_course_run();
 80073cc:	f000 fefc 	bl	80081c8 <sample_course_run>
					break;
 80073d0:	e001      	b.n	80073d6 <test_select+0xfa>
				case 4:
					v_test();
 80073d2:	f000 fb0b 	bl	80079ec <v_test>
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 80073d6:	e78a      	b.n	80072ee <test_select+0x12>
 80073d8:	0800f41c 	.word	0x0800f41c
 80073dc:	20000b6c 	.word	0x20000b6c
 80073e0:	0800f434 	.word	0x0800f434
 80073e4:	40020000 	.word	0x40020000

080073e8 <init_test>:
//init_test
// 初期基幹関数走行テスト
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void init_test(void){
 80073e8:	b580      	push	{r7, lr}
 80073ea:	b086      	sub	sp, #24
 80073ec:	af00      	add	r7, sp, #0

	int mode = 0;
 80073ee:	2300      	movs	r3, #0
 80073f0:	617b      	str	r3, [r7, #20]
	printf("Test Init Run, Mode : %d\n", mode);
 80073f2:	6979      	ldr	r1, [r7, #20]
 80073f4:	486d      	ldr	r0, [pc, #436]	; (80075ac <init_test+0x1c4>)
 80073f6:	f006 fef3 	bl	800e1e0 <iprintf>

	while(1){
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 80073fa:	697b      	ldr	r3, [r7, #20]
 80073fc:	b2db      	uxtb	r3, r3
 80073fe:	f003 0301 	and.w	r3, r3, #1
 8007402:	b2d8      	uxtb	r0, r3
 8007404:	697b      	ldr	r3, [r7, #20]
 8007406:	b2db      	uxtb	r3, r3
 8007408:	f003 0302 	and.w	r3, r3, #2
 800740c:	b2d9      	uxtb	r1, r3
 800740e:	697b      	ldr	r3, [r7, #20]
 8007410:	b2db      	uxtb	r3, r3
 8007412:	f003 0304 	and.w	r3, r3, #4
 8007416:	b2db      	uxtb	r3, r3
 8007418:	461a      	mov	r2, r3
 800741a:	f006 f913 	bl	800d644 <led_write>
		  if(dist_r >= 20){
 800741e:	4b64      	ldr	r3, [pc, #400]	; (80075b0 <init_test+0x1c8>)
 8007420:	edd3 7a00 	vldr	s15, [r3]
 8007424:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8007428:	eef4 7ac7 	vcmpe.f32	s15, s14
 800742c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007430:	db0f      	blt.n	8007452 <init_test+0x6a>
			  mode++;
 8007432:	697b      	ldr	r3, [r7, #20]
 8007434:	3301      	adds	r3, #1
 8007436:	617b      	str	r3, [r7, #20]
			  dist_r = 0;
 8007438:	4b5d      	ldr	r3, [pc, #372]	; (80075b0 <init_test+0x1c8>)
 800743a:	f04f 0200 	mov.w	r2, #0
 800743e:	601a      	str	r2, [r3, #0]
			  if(mode > 7){
 8007440:	697b      	ldr	r3, [r7, #20]
 8007442:	2b07      	cmp	r3, #7
 8007444:	dd01      	ble.n	800744a <init_test+0x62>
				  mode = 0;
 8007446:	2300      	movs	r3, #0
 8007448:	617b      	str	r3, [r7, #20]
			  }
			  printf("Mode : %d\n", mode);
 800744a:	6979      	ldr	r1, [r7, #20]
 800744c:	4859      	ldr	r0, [pc, #356]	; (80075b4 <init_test+0x1cc>)
 800744e:	f006 fec7 	bl	800e1e0 <iprintf>
			  //buzzer(pitagola2[mode-1][0], pitagola2[mode-1][1]);
			  //buzzer(pitagola[2][0], pitagola[2][1]);
		  }
		  if(dist_r <= -20){
 8007452:	4b57      	ldr	r3, [pc, #348]	; (80075b0 <init_test+0x1c8>)
 8007454:	edd3 7a00 	vldr	s15, [r3]
 8007458:	eebb 7a04 	vmov.f32	s14, #180	; 0xc1a00000 -20.0
 800745c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007460:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007464:	d80f      	bhi.n	8007486 <init_test+0x9e>
			  mode--;
 8007466:	697b      	ldr	r3, [r7, #20]
 8007468:	3b01      	subs	r3, #1
 800746a:	617b      	str	r3, [r7, #20]
			  dist_r = 0;
 800746c:	4b50      	ldr	r3, [pc, #320]	; (80075b0 <init_test+0x1c8>)
 800746e:	f04f 0200 	mov.w	r2, #0
 8007472:	601a      	str	r2, [r3, #0]
			  if(mode < 0){
 8007474:	697b      	ldr	r3, [r7, #20]
 8007476:	2b00      	cmp	r3, #0
 8007478:	da01      	bge.n	800747e <init_test+0x96>
				  mode = 7;
 800747a:	2307      	movs	r3, #7
 800747c:	617b      	str	r3, [r7, #20]
			  }
			  printf("Mode : %d\n", mode);
 800747e:	6979      	ldr	r1, [r7, #20]
 8007480:	484c      	ldr	r0, [pc, #304]	; (80075b4 <init_test+0x1cc>)
 8007482:	f006 fead 	bl	800e1e0 <iprintf>
			  //buzzer(pitagola2[mode-1][0], pitagola2[mode-1][1]);
			  //buzzer(pitagola[2][0], pitagola[2][1]);
		  }
		  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET){
 8007486:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800748a:	484b      	ldr	r0, [pc, #300]	; (80075b8 <init_test+0x1d0>)
 800748c:	f7fa ff22 	bl	80022d4 <HAL_GPIO_ReadPin>
 8007490:	4603      	mov	r3, r0
 8007492:	2b00      	cmp	r3, #0
 8007494:	d1b1      	bne.n	80073fa <init_test+0x12>
			  HAL_Delay(50);
 8007496:	2032      	movs	r0, #50	; 0x32
 8007498:	f7f9 fdc0 	bl	800101c <HAL_Delay>
			  while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET);
 800749c:	bf00      	nop
 800749e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80074a2:	4845      	ldr	r0, [pc, #276]	; (80075b8 <init_test+0x1d0>)
 80074a4:	f7fa ff16 	bl	80022d4 <HAL_GPIO_ReadPin>
 80074a8:	4603      	mov	r3, r0
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d0f7      	beq.n	800749e <init_test+0xb6>
			  drive_ready();
 80074ae:	f7fd fbe1 	bl	8004c74 <drive_ready>

			  switch(mode){
 80074b2:	697b      	ldr	r3, [r7, #20]
 80074b4:	2b07      	cmp	r3, #7
 80074b6:	d8a0      	bhi.n	80073fa <init_test+0x12>
 80074b8:	a201      	add	r2, pc, #4	; (adr r2, 80074c0 <init_test+0xd8>)
 80074ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074be:	bf00      	nop
 80074c0:	080074e1 	.word	0x080074e1
 80074c4:	080074e7 	.word	0x080074e7
 80074c8:	08007507 	.word	0x08007507
 80074cc:	08007525 	.word	0x08007525
 80074d0:	08007543 	.word	0x08007543
 80074d4:	08007561 	.word	0x08007561
 80074d8:	0800758b 	.word	0x0800758b
 80074dc:	08007591 	.word	0x08007591
				case 0:
					get_base();
 80074e0:	f006 f858 	bl	800d594 <get_base>
					break;
 80074e4:	e061      	b.n	80075aa <init_test+0x1c2>
				case 1:
					//----4区画等速走行----
					printf("4 Section, Forward, Constant Speed.\n");
 80074e6:	4835      	ldr	r0, [pc, #212]	; (80075bc <init_test+0x1d4>)
 80074e8:	f006 feee 	bl	800e2c8 <puts>
					for(int i = 0; i < 1; i++){
 80074ec:	2300      	movs	r3, #0
 80074ee:	613b      	str	r3, [r7, #16]
 80074f0:	e005      	b.n	80074fe <init_test+0x116>
						driveC(SEC_HALF*2);	//一区画のパルス分デフォルトインターバルで走行
 80074f2:	20b4      	movs	r0, #180	; 0xb4
 80074f4:	f7fd fea2 	bl	800523c <driveC>
					for(int i = 0; i < 1; i++){
 80074f8:	693b      	ldr	r3, [r7, #16]
 80074fa:	3301      	adds	r3, #1
 80074fc:	613b      	str	r3, [r7, #16]
 80074fe:	693b      	ldr	r3, [r7, #16]
 8007500:	2b00      	cmp	r3, #0
 8007502:	ddf6      	ble.n	80074f2 <init_test+0x10a>
					}
					break;
 8007504:	e051      	b.n	80075aa <init_test+0x1c2>
				case 2:
					//----right90度回転----
					printf("Rotate R90.\n");
 8007506:	482e      	ldr	r0, [pc, #184]	; (80075c0 <init_test+0x1d8>)
 8007508:	f006 fede 	bl	800e2c8 <puts>
					for(int i = 0; i < 32; i++){
 800750c:	2300      	movs	r3, #0
 800750e:	60fb      	str	r3, [r7, #12]
 8007510:	e004      	b.n	800751c <init_test+0x134>
						rotate_R90();				//16回右90度回転、つまり4周回転
 8007512:	f7fe f895 	bl	8005640 <rotate_R90>
					for(int i = 0; i < 32; i++){
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	3301      	adds	r3, #1
 800751a:	60fb      	str	r3, [r7, #12]
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	2b1f      	cmp	r3, #31
 8007520:	ddf7      	ble.n	8007512 <init_test+0x12a>
					}
					break;
 8007522:	e042      	b.n	80075aa <init_test+0x1c2>
				case 3:
					//----left90度回転----
					printf("Rotate L90.\n");
 8007524:	4827      	ldr	r0, [pc, #156]	; (80075c4 <init_test+0x1dc>)
 8007526:	f006 fecf 	bl	800e2c8 <puts>
					for(int i = 0; i < 32; i++){
 800752a:	2300      	movs	r3, #0
 800752c:	60bb      	str	r3, [r7, #8]
 800752e:	e004      	b.n	800753a <init_test+0x152>
						rotate_L90();				//16回左90度回転、つまり4周回転
 8007530:	f7fe f952 	bl	80057d8 <rotate_L90>
					for(int i = 0; i < 32; i++){
 8007534:	68bb      	ldr	r3, [r7, #8]
 8007536:	3301      	adds	r3, #1
 8007538:	60bb      	str	r3, [r7, #8]
 800753a:	68bb      	ldr	r3, [r7, #8]
 800753c:	2b1f      	cmp	r3, #31
 800753e:	ddf7      	ble.n	8007530 <init_test+0x148>
					}
					break;
 8007540:	e033      	b.n	80075aa <init_test+0x1c2>
				case 4:
					//----180度回転----
					printf("Rotate 180.\n");
 8007542:	4821      	ldr	r0, [pc, #132]	; (80075c8 <init_test+0x1e0>)
 8007544:	f006 fec0 	bl	800e2c8 <puts>
					for(int i = 0; i < 16; i++){
 8007548:	2300      	movs	r3, #0
 800754a:	607b      	str	r3, [r7, #4]
 800754c:	e004      	b.n	8007558 <init_test+0x170>
						rotate_180();				//8回右180度回転、つまり4周回転
 800754e:	f7fe fa0f 	bl	8005970 <rotate_180>
					for(int i = 0; i < 16; i++){
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	3301      	adds	r3, #1
 8007556:	607b      	str	r3, [r7, #4]
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	2b0f      	cmp	r3, #15
 800755c:	ddf7      	ble.n	800754e <init_test+0x166>
					}
					break;
 800755e:	e024      	b.n	80075aa <init_test+0x1c2>
				case 5:
					//----4区画連続走行----
					printf("4 Section, Forward, Continuous.\n");
 8007560:	481a      	ldr	r0, [pc, #104]	; (80075cc <init_test+0x1e4>)
 8007562:	f006 feb1 	bl	800e2c8 <puts>
					get_base();
 8007566:	f006 f815 	bl	800d594 <get_base>
					half_sectionA();				//半区画のパルス分加速しながら走行
 800756a:	f7fd ff3b 	bl	80053e4 <half_sectionA>
					for(int i = 0; i < 6-1; i++){
 800756e:	2300      	movs	r3, #0
 8007570:	603b      	str	r3, [r7, #0]
 8007572:	e004      	b.n	800757e <init_test+0x196>
						one_sectionU();			//一区画のパルス分等速走行
 8007574:	f7fe f84a 	bl	800560c <one_sectionU>
					for(int i = 0; i < 6-1; i++){
 8007578:	683b      	ldr	r3, [r7, #0]
 800757a:	3301      	adds	r3, #1
 800757c:	603b      	str	r3, [r7, #0]
 800757e:	683b      	ldr	r3, [r7, #0]
 8007580:	2b04      	cmp	r3, #4
 8007582:	ddf7      	ble.n	8007574 <init_test+0x18c>
					}
					half_sectionD();				//半区画のパルス分減速しながら走行。走行後は停止する
 8007584:	f7fd ff48 	bl	8005418 <half_sectionD>
					break;
 8007588:	e00f      	b.n	80075aa <init_test+0x1c2>
				case 6:
					set_position();
 800758a:	f7fd feed 	bl	8005368 <set_position>
					break;
 800758e:	e00c      	b.n	80075aa <init_test+0x1c2>
				case 7:
					target_degree_z = degree_z;
 8007590:	4b0f      	ldr	r3, [pc, #60]	; (80075d0 <init_test+0x1e8>)
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	4a0f      	ldr	r2, [pc, #60]	; (80075d4 <init_test+0x1ec>)
 8007596:	6013      	str	r3, [r2, #0]
					accel_l = 5000;
 8007598:	4b0f      	ldr	r3, [pc, #60]	; (80075d8 <init_test+0x1f0>)
 800759a:	4a10      	ldr	r2, [pc, #64]	; (80075dc <init_test+0x1f4>)
 800759c:	601a      	str	r2, [r3, #0]

					MF.FLAG.ENKAI = 1;
 800759e:	4a10      	ldr	r2, [pc, #64]	; (80075e0 <init_test+0x1f8>)
 80075a0:	8813      	ldrh	r3, [r2, #0]
 80075a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80075a6:	8013      	strh	r3, [r2, #0]

					while(1);
 80075a8:	e7fe      	b.n	80075a8 <init_test+0x1c0>
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 80075aa:	e726      	b.n	80073fa <init_test+0x12>
 80075ac:	0800f440 	.word	0x0800f440
 80075b0:	20000b6c 	.word	0x20000b6c
 80075b4:	0800f434 	.word	0x0800f434
 80075b8:	40020000 	.word	0x40020000
 80075bc:	0800f45c 	.word	0x0800f45c
 80075c0:	0800f480 	.word	0x0800f480
 80075c4:	0800f48c 	.word	0x0800f48c
 80075c8:	0800f498 	.word	0x0800f498
 80075cc:	0800f4a4 	.word	0x0800f4a4
 80075d0:	20000bdc 	.word	0x20000bdc
 80075d4:	20000c7c 	.word	0x20000c7c
 80075d8:	20000ddc 	.word	0x20000ddc
 80075dc:	459c4000 	.word	0x459c4000
 80075e0:	20000fe8 	.word	0x20000fe8

080075e4 <slalom_test>:
//slalom_test
// スラローム走行テスト
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void slalom_test(void){
 80075e4:	b580      	push	{r7, lr}
 80075e6:	b090      	sub	sp, #64	; 0x40
 80075e8:	af00      	add	r7, sp, #0

	int mode = 0;
 80075ea:	2300      	movs	r3, #0
 80075ec:	63fb      	str	r3, [r7, #60]	; 0x3c
	printf("Test Slalom Run, Mode : %d\n", mode);
 80075ee:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80075f0:	48bf      	ldr	r0, [pc, #764]	; (80078f0 <slalom_test+0x30c>)
 80075f2:	f006 fdf5 	bl	800e1e0 <iprintf>

	while(1){
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 80075f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80075f8:	b2db      	uxtb	r3, r3
 80075fa:	f003 0301 	and.w	r3, r3, #1
 80075fe:	b2d8      	uxtb	r0, r3
 8007600:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007602:	b2db      	uxtb	r3, r3
 8007604:	f003 0302 	and.w	r3, r3, #2
 8007608:	b2d9      	uxtb	r1, r3
 800760a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800760c:	b2db      	uxtb	r3, r3
 800760e:	f003 0304 	and.w	r3, r3, #4
 8007612:	b2db      	uxtb	r3, r3
 8007614:	461a      	mov	r2, r3
 8007616:	f006 f815 	bl	800d644 <led_write>
		  if(dist_r >= 20){
 800761a:	4bb6      	ldr	r3, [pc, #728]	; (80078f4 <slalom_test+0x310>)
 800761c:	edd3 7a00 	vldr	s15, [r3]
 8007620:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8007624:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007628:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800762c:	db0f      	blt.n	800764e <slalom_test+0x6a>
			  mode++;
 800762e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007630:	3301      	adds	r3, #1
 8007632:	63fb      	str	r3, [r7, #60]	; 0x3c
			  dist_r = 0;
 8007634:	4baf      	ldr	r3, [pc, #700]	; (80078f4 <slalom_test+0x310>)
 8007636:	f04f 0200 	mov.w	r2, #0
 800763a:	601a      	str	r2, [r3, #0]
			  if(mode > 15){
 800763c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800763e:	2b0f      	cmp	r3, #15
 8007640:	dd01      	ble.n	8007646 <slalom_test+0x62>
				  mode = 0;
 8007642:	2300      	movs	r3, #0
 8007644:	63fb      	str	r3, [r7, #60]	; 0x3c
			  }
			  printf("Mode : %d\n", mode);
 8007646:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007648:	48ab      	ldr	r0, [pc, #684]	; (80078f8 <slalom_test+0x314>)
 800764a:	f006 fdc9 	bl	800e1e0 <iprintf>
			  //buzzer(pitagola2[mode-1][0], pitagola2[mode-1][1]);
			  //buzzer(pitagola[2][0], pitagola[2][1]);
		  }
		  if(dist_r <= -20){
 800764e:	4ba9      	ldr	r3, [pc, #676]	; (80078f4 <slalom_test+0x310>)
 8007650:	edd3 7a00 	vldr	s15, [r3]
 8007654:	eebb 7a04 	vmov.f32	s14, #180	; 0xc1a00000 -20.0
 8007658:	eef4 7ac7 	vcmpe.f32	s15, s14
 800765c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007660:	d80f      	bhi.n	8007682 <slalom_test+0x9e>
			  mode--;
 8007662:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007664:	3b01      	subs	r3, #1
 8007666:	63fb      	str	r3, [r7, #60]	; 0x3c
			  dist_r = 0;
 8007668:	4ba2      	ldr	r3, [pc, #648]	; (80078f4 <slalom_test+0x310>)
 800766a:	f04f 0200 	mov.w	r2, #0
 800766e:	601a      	str	r2, [r3, #0]
			  if(mode < 0){
 8007670:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007672:	2b00      	cmp	r3, #0
 8007674:	da01      	bge.n	800767a <slalom_test+0x96>
				  mode = 15;
 8007676:	230f      	movs	r3, #15
 8007678:	63fb      	str	r3, [r7, #60]	; 0x3c
			  }
			  printf("Mode : %d\n", mode);
 800767a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800767c:	489e      	ldr	r0, [pc, #632]	; (80078f8 <slalom_test+0x314>)
 800767e:	f006 fdaf 	bl	800e1e0 <iprintf>
			  //buzzer(pitagola2[mode-1][0], pitagola2[mode-1][1]);
			  //buzzer(pitagola[2][0], pitagola[2][1]);
		  }
		  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET){
 8007682:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007686:	489d      	ldr	r0, [pc, #628]	; (80078fc <slalom_test+0x318>)
 8007688:	f7fa fe24 	bl	80022d4 <HAL_GPIO_ReadPin>
 800768c:	4603      	mov	r3, r0
 800768e:	2b00      	cmp	r3, #0
 8007690:	d1b1      	bne.n	80075f6 <slalom_test+0x12>
			  HAL_Delay(50);
 8007692:	2032      	movs	r0, #50	; 0x32
 8007694:	f7f9 fcc2 	bl	800101c <HAL_Delay>
			  while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET);
 8007698:	bf00      	nop
 800769a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800769e:	4897      	ldr	r0, [pc, #604]	; (80078fc <slalom_test+0x318>)
 80076a0:	f7fa fe18 	bl	80022d4 <HAL_GPIO_ReadPin>
 80076a4:	4603      	mov	r3, r0
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d0f7      	beq.n	800769a <slalom_test+0xb6>
			  drive_ready();
 80076aa:	f7fd fae3 	bl	8004c74 <drive_ready>

			  switch(mode){
 80076ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80076b0:	2b0e      	cmp	r3, #14
 80076b2:	d8a0      	bhi.n	80075f6 <slalom_test+0x12>
 80076b4:	a201      	add	r2, pc, #4	; (adr r2, 80076bc <slalom_test+0xd8>)
 80076b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076ba:	bf00      	nop
 80076bc:	080076f9 	.word	0x080076f9
 80076c0:	080076ff 	.word	0x080076ff
 80076c4:	08007729 	.word	0x08007729
 80076c8:	08007753 	.word	0x08007753
 80076cc:	08007779 	.word	0x08007779
 80076d0:	0800779f 	.word	0x0800779f
 80076d4:	080077db 	.word	0x080077db
 80076d8:	08007817 	.word	0x08007817
 80076dc:	08007849 	.word	0x08007849
 80076e0:	0800787b 	.word	0x0800787b
 80076e4:	080078ad 	.word	0x080078ad
 80076e8:	080078df 	.word	0x080078df
 80076ec:	08007947 	.word	0x08007947
 80076f0:	08007979 	.word	0x08007979
 80076f4:	080079ab 	.word	0x080079ab
				case 0:
					get_base();
 80076f8:	f005 ff4c 	bl	800d594 <get_base>
					break;
 80076fc:	e16e      	b.n	80079dc <slalom_test+0x3f8>
				case 1:
					//----slalom右折----
					printf("slalom turn right .\n");
 80076fe:	4880      	ldr	r0, [pc, #512]	; (8007900 <slalom_test+0x31c>)
 8007700:	f006 fde2 	bl	800e2c8 <puts>
					half_sectionA();
 8007704:	f7fd fe6e 	bl	80053e4 <half_sectionA>
					for(int i = 0; i < 32; i++){
 8007708:	2300      	movs	r3, #0
 800770a:	63bb      	str	r3, [r7, #56]	; 0x38
 800770c:	e006      	b.n	800771c <slalom_test+0x138>
						slalom_R90();	//一区画のパルス分デフォルトインターバルで走行
 800770e:	f7fe f9f9 	bl	8005b04 <slalom_R90>
						one_sectionU();
 8007712:	f7fd ff7b 	bl	800560c <one_sectionU>
					for(int i = 0; i < 32; i++){
 8007716:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007718:	3301      	adds	r3, #1
 800771a:	63bb      	str	r3, [r7, #56]	; 0x38
 800771c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800771e:	2b1f      	cmp	r3, #31
 8007720:	ddf5      	ble.n	800770e <slalom_test+0x12a>
					}
					half_sectionD();
 8007722:	f7fd fe79 	bl	8005418 <half_sectionD>
					break;
 8007726:	e159      	b.n	80079dc <slalom_test+0x3f8>
				case 2:
					//----slalom左折----
					printf("slalom turn left .\n");
 8007728:	4876      	ldr	r0, [pc, #472]	; (8007904 <slalom_test+0x320>)
 800772a:	f006 fdcd 	bl	800e2c8 <puts>
					half_sectionA();
 800772e:	f7fd fe59 	bl	80053e4 <half_sectionA>
					for(int i = 0; i < 32; i++){
 8007732:	2300      	movs	r3, #0
 8007734:	637b      	str	r3, [r7, #52]	; 0x34
 8007736:	e006      	b.n	8007746 <slalom_test+0x162>
						slalom_L90();				//16回右90度回転、つまり4周回転
 8007738:	f7fe fadc 	bl	8005cf4 <slalom_L90>
						one_sectionU();
 800773c:	f7fd ff66 	bl	800560c <one_sectionU>
					for(int i = 0; i < 32; i++){
 8007740:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007742:	3301      	adds	r3, #1
 8007744:	637b      	str	r3, [r7, #52]	; 0x34
 8007746:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007748:	2b1f      	cmp	r3, #31
 800774a:	ddf5      	ble.n	8007738 <slalom_test+0x154>
					}
					half_sectionD();
 800774c:	f7fd fe64 	bl	8005418 <half_sectionD>
					break;
 8007750:	e144      	b.n	80079dc <slalom_test+0x3f8>
				case 3:
					//----slalom右折----
					printf("slalom turn right .\n");
 8007752:	486b      	ldr	r0, [pc, #428]	; (8007900 <slalom_test+0x31c>)
 8007754:	f006 fdb8 	bl	800e2c8 <puts>
					half_sectionA();
 8007758:	f7fd fe44 	bl	80053e4 <half_sectionA>
					for(int i = 0; i < 1; i++){
 800775c:	2300      	movs	r3, #0
 800775e:	633b      	str	r3, [r7, #48]	; 0x30
 8007760:	e004      	b.n	800776c <slalom_test+0x188>
						slalom_R90();	//一区画のパルス分デフォルトインターバルで走行
 8007762:	f7fe f9cf 	bl	8005b04 <slalom_R90>
					for(int i = 0; i < 1; i++){
 8007766:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007768:	3301      	adds	r3, #1
 800776a:	633b      	str	r3, [r7, #48]	; 0x30
 800776c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800776e:	2b00      	cmp	r3, #0
 8007770:	ddf7      	ble.n	8007762 <slalom_test+0x17e>
					}
					half_sectionD();
 8007772:	f7fd fe51 	bl	8005418 <half_sectionD>
					break;
 8007776:	e131      	b.n	80079dc <slalom_test+0x3f8>
				case 4:
					//----slalom左折----
					printf("slalom turn left .\n");
 8007778:	4862      	ldr	r0, [pc, #392]	; (8007904 <slalom_test+0x320>)
 800777a:	f006 fda5 	bl	800e2c8 <puts>
					half_sectionA();
 800777e:	f7fd fe31 	bl	80053e4 <half_sectionA>
					for(int i = 0; i < 1; i++){
 8007782:	2300      	movs	r3, #0
 8007784:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007786:	e004      	b.n	8007792 <slalom_test+0x1ae>
						slalom_L90();				//16回右90度回転、つまり4周回転
 8007788:	f7fe fab4 	bl	8005cf4 <slalom_L90>
					for(int i = 0; i < 1; i++){
 800778c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800778e:	3301      	adds	r3, #1
 8007790:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007792:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007794:	2b00      	cmp	r3, #0
 8007796:	ddf7      	ble.n	8007788 <slalom_test+0x1a4>
					}
					half_sectionD();
 8007798:	f7fd fe3e 	bl	8005418 <half_sectionD>
					break;
 800779c:	e11e      	b.n	80079dc <slalom_test+0x3f8>
				case 5:
					//----slalom2右折 High Speed----
					printf("slalom turn right High Speed .\n");
 800779e:	485a      	ldr	r0, [pc, #360]	; (8007908 <slalom_test+0x324>)
 80077a0:	f006 fd92 	bl	800e2c8 <puts>
					half_sectionA2();
 80077a4:	f7fd fe74 	bl	8005490 <half_sectionA2>
					for(int i = 0; i < 16; i++){
 80077a8:	2300      	movs	r3, #0
 80077aa:	62bb      	str	r3, [r7, #40]	; 0x28
 80077ac:	e00c      	b.n	80077c8 <slalom_test+0x1e4>
						full_led_write(1);
 80077ae:	2001      	movs	r0, #1
 80077b0:	f005 ff82 	bl	800d6b8 <full_led_write>
						slalom_R902();				//16回右90度回転、つまり4周回転
 80077b4:	f7fe fb96 	bl	8005ee4 <slalom_R902>
						full_led_write(2);
 80077b8:	2002      	movs	r0, #2
 80077ba:	f005 ff7d 	bl	800d6b8 <full_led_write>
						one_sectionU();
 80077be:	f7fd ff25 	bl	800560c <one_sectionU>
					for(int i = 0; i < 16; i++){
 80077c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077c4:	3301      	adds	r3, #1
 80077c6:	62bb      	str	r3, [r7, #40]	; 0x28
 80077c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077ca:	2b0f      	cmp	r3, #15
 80077cc:	ddef      	ble.n	80077ae <slalom_test+0x1ca>
					}
					full_led_write(3);
 80077ce:	2003      	movs	r0, #3
 80077d0:	f005 ff72 	bl	800d6b8 <full_led_write>
					half_sectionD2();
 80077d4:	f7fd fe78 	bl	80054c8 <half_sectionD2>
					break;
 80077d8:	e100      	b.n	80079dc <slalom_test+0x3f8>
				case 6:
					//----slalom2左折 High Speed----
					printf("slalom turn left High Speed .\n");
 80077da:	484c      	ldr	r0, [pc, #304]	; (800790c <slalom_test+0x328>)
 80077dc:	f006 fd74 	bl	800e2c8 <puts>
					half_sectionA2();
 80077e0:	f7fd fe56 	bl	8005490 <half_sectionA2>
					for(int i = 0; i < 16; i++){
 80077e4:	2300      	movs	r3, #0
 80077e6:	627b      	str	r3, [r7, #36]	; 0x24
 80077e8:	e00c      	b.n	8007804 <slalom_test+0x220>
						full_led_write(1);
 80077ea:	2001      	movs	r0, #1
 80077ec:	f005 ff64 	bl	800d6b8 <full_led_write>
						slalom_L902();				//16回左90度回転、つまり4周回転
 80077f0:	f7fe fc4a 	bl	8006088 <slalom_L902>
						full_led_write(2);
 80077f4:	2002      	movs	r0, #2
 80077f6:	f005 ff5f 	bl	800d6b8 <full_led_write>
						one_sectionU();
 80077fa:	f7fd ff07 	bl	800560c <one_sectionU>
					for(int i = 0; i < 16; i++){
 80077fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007800:	3301      	adds	r3, #1
 8007802:	627b      	str	r3, [r7, #36]	; 0x24
 8007804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007806:	2b0f      	cmp	r3, #15
 8007808:	ddef      	ble.n	80077ea <slalom_test+0x206>
					}
					full_led_write(3);
 800780a:	2003      	movs	r0, #3
 800780c:	f005 ff54 	bl	800d6b8 <full_led_write>
					half_sectionD2();
 8007810:	f7fd fe5a 	bl	80054c8 <half_sectionD2>
					break;
 8007814:	e0e2      	b.n	80079dc <slalom_test+0x3f8>
				case 7:
					//----Lslalom右折----
					printf("Lslalom turn right .\n");
 8007816:	483e      	ldr	r0, [pc, #248]	; (8007910 <slalom_test+0x32c>)
 8007818:	f006 fd56 	bl	800e2c8 <puts>
					half_sectionA();
 800781c:	f7fd fde2 	bl	80053e4 <half_sectionA>
					for(int i = 0; i < 16; i++){
 8007820:	2300      	movs	r3, #0
 8007822:	623b      	str	r3, [r7, #32]
 8007824:	e007      	b.n	8007836 <slalom_test+0x252>
						full_led_write(2);
 8007826:	2002      	movs	r0, #2
 8007828:	f005 ff46 	bl	800d6b8 <full_led_write>
						Lslalom_R90();				//16回右90度回転、つまり4周回転
 800782c:	f7fe fd0e 	bl	800624c <Lslalom_R90>
					for(int i = 0; i < 16; i++){
 8007830:	6a3b      	ldr	r3, [r7, #32]
 8007832:	3301      	adds	r3, #1
 8007834:	623b      	str	r3, [r7, #32]
 8007836:	6a3b      	ldr	r3, [r7, #32]
 8007838:	2b0f      	cmp	r3, #15
 800783a:	ddf4      	ble.n	8007826 <slalom_test+0x242>
					}
					full_led_write(3);
 800783c:	2003      	movs	r0, #3
 800783e:	f005 ff3b 	bl	800d6b8 <full_led_write>
					half_sectionD();
 8007842:	f7fd fde9 	bl	8005418 <half_sectionD>
					break;
 8007846:	e0c9      	b.n	80079dc <slalom_test+0x3f8>
				case 8:
					//----Lslalom左折----
					printf("Lslalom turn left .\n");
 8007848:	4832      	ldr	r0, [pc, #200]	; (8007914 <slalom_test+0x330>)
 800784a:	f006 fd3d 	bl	800e2c8 <puts>
					half_sectionA();
 800784e:	f7fd fdc9 	bl	80053e4 <half_sectionA>
					for(int i = 0; i < 16; i++){
 8007852:	2300      	movs	r3, #0
 8007854:	61fb      	str	r3, [r7, #28]
 8007856:	e007      	b.n	8007868 <slalom_test+0x284>
						full_led_write(2);
 8007858:	2002      	movs	r0, #2
 800785a:	f005 ff2d 	bl	800d6b8 <full_led_write>
						Lslalom_L90();				//16回左90度回転、つまり4周回転
 800785e:	f7fe fde1 	bl	8006424 <Lslalom_L90>
					for(int i = 0; i < 16; i++){
 8007862:	69fb      	ldr	r3, [r7, #28]
 8007864:	3301      	adds	r3, #1
 8007866:	61fb      	str	r3, [r7, #28]
 8007868:	69fb      	ldr	r3, [r7, #28]
 800786a:	2b0f      	cmp	r3, #15
 800786c:	ddf4      	ble.n	8007858 <slalom_test+0x274>
					}
					full_led_write(3);
 800786e:	2003      	movs	r0, #3
 8007870:	f005 ff22 	bl	800d6b8 <full_led_write>
					half_sectionD();
 8007874:	f7fd fdd0 	bl	8005418 <half_sectionD>
					break;
 8007878:	e0b0      	b.n	80079dc <slalom_test+0x3f8>
				case 9:
					//----Lslalom2右折 High Speed----
					printf("Lslalom turn right High Speed .\n");
 800787a:	4827      	ldr	r0, [pc, #156]	; (8007918 <slalom_test+0x334>)
 800787c:	f006 fd24 	bl	800e2c8 <puts>
					half_sectionA2();
 8007880:	f7fd fe06 	bl	8005490 <half_sectionA2>
					for(int i = 0; i < 16; i++){
 8007884:	2300      	movs	r3, #0
 8007886:	61bb      	str	r3, [r7, #24]
 8007888:	e007      	b.n	800789a <slalom_test+0x2b6>
						full_led_write(2);
 800788a:	2002      	movs	r0, #2
 800788c:	f005 ff14 	bl	800d6b8 <full_led_write>
						Lslalom_R902();				//16回右90度回転、つまり4周回転
 8007890:	f7fe feb4 	bl	80065fc <Lslalom_R902>
					for(int i = 0; i < 16; i++){
 8007894:	69bb      	ldr	r3, [r7, #24]
 8007896:	3301      	adds	r3, #1
 8007898:	61bb      	str	r3, [r7, #24]
 800789a:	69bb      	ldr	r3, [r7, #24]
 800789c:	2b0f      	cmp	r3, #15
 800789e:	ddf4      	ble.n	800788a <slalom_test+0x2a6>
					}
					full_led_write(3);
 80078a0:	2003      	movs	r0, #3
 80078a2:	f005 ff09 	bl	800d6b8 <full_led_write>
					half_sectionD2();
 80078a6:	f7fd fe0f 	bl	80054c8 <half_sectionD2>
					break;
 80078aa:	e097      	b.n	80079dc <slalom_test+0x3f8>
				case 10:
					//----Lslalom2左折 High Speed----
					printf("Lslalom turn left High Speed .\n");
 80078ac:	481b      	ldr	r0, [pc, #108]	; (800791c <slalom_test+0x338>)
 80078ae:	f006 fd0b 	bl	800e2c8 <puts>
					half_sectionA2();
 80078b2:	f7fd fded 	bl	8005490 <half_sectionA2>
					for(int i = 0; i < 16; i++){
 80078b6:	2300      	movs	r3, #0
 80078b8:	617b      	str	r3, [r7, #20]
 80078ba:	e007      	b.n	80078cc <slalom_test+0x2e8>
						full_led_write(2);
 80078bc:	2002      	movs	r0, #2
 80078be:	f005 fefb 	bl	800d6b8 <full_led_write>
						Lslalom_L902();				//16回左90度回転、つまり4周回転
 80078c2:	f7fe ff89 	bl	80067d8 <Lslalom_L902>
					for(int i = 0; i < 16; i++){
 80078c6:	697b      	ldr	r3, [r7, #20]
 80078c8:	3301      	adds	r3, #1
 80078ca:	617b      	str	r3, [r7, #20]
 80078cc:	697b      	ldr	r3, [r7, #20]
 80078ce:	2b0f      	cmp	r3, #15
 80078d0:	ddf4      	ble.n	80078bc <slalom_test+0x2d8>
					}
					full_led_write(3);
 80078d2:	2003      	movs	r0, #3
 80078d4:	f005 fef0 	bl	800d6b8 <full_led_write>
					half_sectionD2();
 80078d8:	f7fd fdf6 	bl	80054c8 <half_sectionD2>
					break;
 80078dc:	e07e      	b.n	80079dc <slalom_test+0x3f8>
				case 11:
					//----Lslalom3右折 High High Speed----
					printf("Lslalom turn right High High Speed .\n");
 80078de:	4810      	ldr	r0, [pc, #64]	; (8007920 <slalom_test+0x33c>)
 80078e0:	f006 fcf2 	bl	800e2c8 <puts>
					half_sectionA3();
 80078e4:	f7fd fe02 	bl	80054ec <half_sectionA3>
					for(int i = 0; i < 16; i++){
 80078e8:	2300      	movs	r3, #0
 80078ea:	613b      	str	r3, [r7, #16]
 80078ec:	e022      	b.n	8007934 <slalom_test+0x350>
 80078ee:	bf00      	nop
 80078f0:	0800f4c4 	.word	0x0800f4c4
 80078f4:	20000b6c 	.word	0x20000b6c
 80078f8:	0800f434 	.word	0x0800f434
 80078fc:	40020000 	.word	0x40020000
 8007900:	0800f4e0 	.word	0x0800f4e0
 8007904:	0800f4f4 	.word	0x0800f4f4
 8007908:	0800f508 	.word	0x0800f508
 800790c:	0800f528 	.word	0x0800f528
 8007910:	0800f548 	.word	0x0800f548
 8007914:	0800f560 	.word	0x0800f560
 8007918:	0800f574 	.word	0x0800f574
 800791c:	0800f594 	.word	0x0800f594
 8007920:	0800f5b4 	.word	0x0800f5b4
						full_led_write(2);
 8007924:	2002      	movs	r0, #2
 8007926:	f005 fec7 	bl	800d6b8 <full_led_write>
						Lslalom_R903();				//16回右90度回転、つまり4周回転
 800792a:	f7ff f843 	bl	80069b4 <Lslalom_R903>
					for(int i = 0; i < 16; i++){
 800792e:	693b      	ldr	r3, [r7, #16]
 8007930:	3301      	adds	r3, #1
 8007932:	613b      	str	r3, [r7, #16]
 8007934:	693b      	ldr	r3, [r7, #16]
 8007936:	2b0f      	cmp	r3, #15
 8007938:	ddf4      	ble.n	8007924 <slalom_test+0x340>
					}
					full_led_write(3);
 800793a:	2003      	movs	r0, #3
 800793c:	f005 febc 	bl	800d6b8 <full_led_write>
					half_sectionD3();
 8007940:	f7fd fdf0 	bl	8005524 <half_sectionD3>
					break;
 8007944:	e04a      	b.n	80079dc <slalom_test+0x3f8>
				case 12:
					//----Lslalom3左折 High High Speed----
					printf("Lslalom turn left High High Speed .\n");
 8007946:	4826      	ldr	r0, [pc, #152]	; (80079e0 <slalom_test+0x3fc>)
 8007948:	f006 fcbe 	bl	800e2c8 <puts>
					half_sectionA3();
 800794c:	f7fd fdce 	bl	80054ec <half_sectionA3>
					for(int i = 0; i < 16; i++){
 8007950:	2300      	movs	r3, #0
 8007952:	60fb      	str	r3, [r7, #12]
 8007954:	e007      	b.n	8007966 <slalom_test+0x382>
						full_led_write(2);
 8007956:	2002      	movs	r0, #2
 8007958:	f005 feae 	bl	800d6b8 <full_led_write>
						Lslalom_L903();				//16回左90度回転、つまり4周回転
 800795c:	f7ff f918 	bl	8006b90 <Lslalom_L903>
					for(int i = 0; i < 16; i++){
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	3301      	adds	r3, #1
 8007964:	60fb      	str	r3, [r7, #12]
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	2b0f      	cmp	r3, #15
 800796a:	ddf4      	ble.n	8007956 <slalom_test+0x372>
					}
					full_led_write(3);
 800796c:	2003      	movs	r0, #3
 800796e:	f005 fea3 	bl	800d6b8 <full_led_write>
					half_sectionD3();
 8007972:	f7fd fdd7 	bl	8005524 <half_sectionD3>
					break;
 8007976:	e031      	b.n	80079dc <slalom_test+0x3f8>
				case 13:
					//----Lslalom右180----
					printf("Lslalom turn right & right .\n");
 8007978:	481a      	ldr	r0, [pc, #104]	; (80079e4 <slalom_test+0x400>)
 800797a:	f006 fca5 	bl	800e2c8 <puts>
					half_sectionA();
 800797e:	f7fd fd31 	bl	80053e4 <half_sectionA>
					for(int i = 0; i < 16; i++){
 8007982:	2300      	movs	r3, #0
 8007984:	60bb      	str	r3, [r7, #8]
 8007986:	e007      	b.n	8007998 <slalom_test+0x3b4>
						full_led_write(2);
 8007988:	2002      	movs	r0, #2
 800798a:	f005 fe95 	bl	800d6b8 <full_led_write>
						Lslalom_R180();				//16回右180度回転、つまり4周回転
 800798e:	f7ff f9ed 	bl	8006d6c <Lslalom_R180>
					for(int i = 0; i < 16; i++){
 8007992:	68bb      	ldr	r3, [r7, #8]
 8007994:	3301      	adds	r3, #1
 8007996:	60bb      	str	r3, [r7, #8]
 8007998:	68bb      	ldr	r3, [r7, #8]
 800799a:	2b0f      	cmp	r3, #15
 800799c:	ddf4      	ble.n	8007988 <slalom_test+0x3a4>
					}
					full_led_write(3);
 800799e:	2003      	movs	r0, #3
 80079a0:	f005 fe8a 	bl	800d6b8 <full_led_write>
					half_sectionD();
 80079a4:	f7fd fd38 	bl	8005418 <half_sectionD>
					break;
 80079a8:	e018      	b.n	80079dc <slalom_test+0x3f8>
				case 14:
					//----Lslalom左180----
					printf("Lslalom turn left & left .\n");
 80079aa:	480f      	ldr	r0, [pc, #60]	; (80079e8 <slalom_test+0x404>)
 80079ac:	f006 fc8c 	bl	800e2c8 <puts>
					half_sectionA();
 80079b0:	f7fd fd18 	bl	80053e4 <half_sectionA>
					for(int i = 0; i < 16; i++){
 80079b4:	2300      	movs	r3, #0
 80079b6:	607b      	str	r3, [r7, #4]
 80079b8:	e007      	b.n	80079ca <slalom_test+0x3e6>
						full_led_write(2);
 80079ba:	2002      	movs	r0, #2
 80079bc:	f005 fe7c 	bl	800d6b8 <full_led_write>
						Lslalom_L180();				//16回左180度回転、つまり4周回転
 80079c0:	f7ff fac6 	bl	8006f50 <Lslalom_L180>
					for(int i = 0; i < 16; i++){
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	3301      	adds	r3, #1
 80079c8:	607b      	str	r3, [r7, #4]
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	2b0f      	cmp	r3, #15
 80079ce:	ddf4      	ble.n	80079ba <slalom_test+0x3d6>
					}
					full_led_write(3);
 80079d0:	2003      	movs	r0, #3
 80079d2:	f005 fe71 	bl	800d6b8 <full_led_write>
					half_sectionD();
 80079d6:	f7fd fd1f 	bl	8005418 <half_sectionD>
					break;
 80079da:	bf00      	nop
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 80079dc:	e60b      	b.n	80075f6 <slalom_test+0x12>
 80079de:	bf00      	nop
 80079e0:	0800f5dc 	.word	0x0800f5dc
 80079e4:	0800f600 	.word	0x0800f600
 80079e8:	0800f620 	.word	0x0800f620

080079ec <v_test>:
//v_test
// スラローム走行テスト
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void v_test(void){
 80079ec:	b580      	push	{r7, lr}
 80079ee:	b082      	sub	sp, #8
 80079f0:	af00      	add	r7, sp, #0

	int mode = 0;
 80079f2:	2300      	movs	r3, #0
 80079f4:	607b      	str	r3, [r7, #4]
	printf("Test V Run, Mode : %d\n", mode);
 80079f6:	6879      	ldr	r1, [r7, #4]
 80079f8:	484a      	ldr	r0, [pc, #296]	; (8007b24 <v_test+0x138>)
 80079fa:	f006 fbf1 	bl	800e1e0 <iprintf>

	while(1){
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	b2db      	uxtb	r3, r3
 8007a02:	f003 0301 	and.w	r3, r3, #1
 8007a06:	b2d8      	uxtb	r0, r3
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	b2db      	uxtb	r3, r3
 8007a0c:	f003 0302 	and.w	r3, r3, #2
 8007a10:	b2d9      	uxtb	r1, r3
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	b2db      	uxtb	r3, r3
 8007a16:	f003 0304 	and.w	r3, r3, #4
 8007a1a:	b2db      	uxtb	r3, r3
 8007a1c:	461a      	mov	r2, r3
 8007a1e:	f005 fe11 	bl	800d644 <led_write>
		  if(dist_r >= 20){
 8007a22:	4b41      	ldr	r3, [pc, #260]	; (8007b28 <v_test+0x13c>)
 8007a24:	edd3 7a00 	vldr	s15, [r3]
 8007a28:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8007a2c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007a30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a34:	db0f      	blt.n	8007a56 <v_test+0x6a>
			  mode++;
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	3301      	adds	r3, #1
 8007a3a:	607b      	str	r3, [r7, #4]
			  dist_r = 0;
 8007a3c:	4b3a      	ldr	r3, [pc, #232]	; (8007b28 <v_test+0x13c>)
 8007a3e:	f04f 0200 	mov.w	r2, #0
 8007a42:	601a      	str	r2, [r3, #0]
			  if(mode > 7){
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	2b07      	cmp	r3, #7
 8007a48:	dd01      	ble.n	8007a4e <v_test+0x62>
				  mode = 0;
 8007a4a:	2300      	movs	r3, #0
 8007a4c:	607b      	str	r3, [r7, #4]
			  }
			  printf("Mode : %d\n", mode);
 8007a4e:	6879      	ldr	r1, [r7, #4]
 8007a50:	4836      	ldr	r0, [pc, #216]	; (8007b2c <v_test+0x140>)
 8007a52:	f006 fbc5 	bl	800e1e0 <iprintf>
			  //buzzer(pitagola2[mode-1][0], pitagola2[mode-1][1]);
			  //buzzer(pitagola[2][0], pitagola[2][1]);
		  }
		  if(dist_r <= -20){
 8007a56:	4b34      	ldr	r3, [pc, #208]	; (8007b28 <v_test+0x13c>)
 8007a58:	edd3 7a00 	vldr	s15, [r3]
 8007a5c:	eebb 7a04 	vmov.f32	s14, #180	; 0xc1a00000 -20.0
 8007a60:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007a64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a68:	d80f      	bhi.n	8007a8a <v_test+0x9e>
			  mode--;
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	3b01      	subs	r3, #1
 8007a6e:	607b      	str	r3, [r7, #4]
			  dist_r = 0;
 8007a70:	4b2d      	ldr	r3, [pc, #180]	; (8007b28 <v_test+0x13c>)
 8007a72:	f04f 0200 	mov.w	r2, #0
 8007a76:	601a      	str	r2, [r3, #0]
			  if(mode < 0){
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	da01      	bge.n	8007a82 <v_test+0x96>
				  mode = 7;
 8007a7e:	2307      	movs	r3, #7
 8007a80:	607b      	str	r3, [r7, #4]
			  }
			  printf("Mode : %d\n", mode);
 8007a82:	6879      	ldr	r1, [r7, #4]
 8007a84:	4829      	ldr	r0, [pc, #164]	; (8007b2c <v_test+0x140>)
 8007a86:	f006 fbab 	bl	800e1e0 <iprintf>
			  //buzzer(pitagola2[mode-1][0], pitagola2[mode-1][1]);
			  //buzzer(pitagola[2][0], pitagola[2][1]);
		  }
		  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET){
 8007a8a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007a8e:	4828      	ldr	r0, [pc, #160]	; (8007b30 <v_test+0x144>)
 8007a90:	f7fa fc20 	bl	80022d4 <HAL_GPIO_ReadPin>
 8007a94:	4603      	mov	r3, r0
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d1b1      	bne.n	80079fe <v_test+0x12>
			  HAL_Delay(50);
 8007a9a:	2032      	movs	r0, #50	; 0x32
 8007a9c:	f7f9 fabe 	bl	800101c <HAL_Delay>
			  while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET);
 8007aa0:	bf00      	nop
 8007aa2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007aa6:	4822      	ldr	r0, [pc, #136]	; (8007b30 <v_test+0x144>)
 8007aa8:	f7fa fc14 	bl	80022d4 <HAL_GPIO_ReadPin>
 8007aac:	4603      	mov	r3, r0
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d0f7      	beq.n	8007aa2 <v_test+0xb6>
			  drive_ready();
 8007ab2:	f7fd f8df 	bl	8004c74 <drive_ready>

			  switch(mode){
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	2b07      	cmp	r3, #7
 8007aba:	d8a0      	bhi.n	80079fe <v_test+0x12>
 8007abc:	a201      	add	r2, pc, #4	; (adr r2, 8007ac4 <v_test+0xd8>)
 8007abe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ac2:	bf00      	nop
 8007ac4:	08007ae5 	.word	0x08007ae5
 8007ac8:	08007aeb 	.word	0x08007aeb
 8007acc:	080079ff 	.word	0x080079ff
 8007ad0:	080079ff 	.word	0x080079ff
 8007ad4:	080079ff 	.word	0x080079ff
 8007ad8:	080079ff 	.word	0x080079ff
 8007adc:	080079ff 	.word	0x080079ff
 8007ae0:	080079ff 	.word	0x080079ff
				case 0:
					get_base();
 8007ae4:	f005 fd56 	bl	800d594 <get_base>
					break;
 8007ae8:	e01a      	b.n	8007b20 <v_test+0x134>
				case 1:
					//----V左45----
					printf("V 45 right .\n");
 8007aea:	4812      	ldr	r0, [pc, #72]	; (8007b34 <v_test+0x148>)
 8007aec:	f006 fbec 	bl	800e2c8 <puts>
					full_led_write(7);
 8007af0:	2007      	movs	r0, #7
 8007af2:	f005 fde1 	bl	800d6b8 <full_led_write>
					half_sectionA();
 8007af6:	f7fd fc75 	bl	80053e4 <half_sectionA>
					for(int i = 0; i < 1; i++){
 8007afa:	2300      	movs	r3, #0
 8007afc:	603b      	str	r3, [r7, #0]
 8007afe:	e006      	b.n	8007b0e <v_test+0x122>
						v_R45();
 8007b00:	f7ff fb18 	bl	8007134 <v_R45>
						v_R45();
 8007b04:	f7ff fb16 	bl	8007134 <v_R45>
					for(int i = 0; i < 1; i++){
 8007b08:	683b      	ldr	r3, [r7, #0]
 8007b0a:	3301      	adds	r3, #1
 8007b0c:	603b      	str	r3, [r7, #0]
 8007b0e:	683b      	ldr	r3, [r7, #0]
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	ddf5      	ble.n	8007b00 <v_test+0x114>
					}
					full_led_write(7);
 8007b14:	2007      	movs	r0, #7
 8007b16:	f005 fdcf 	bl	800d6b8 <full_led_write>
					half_sectionD();
 8007b1a:	f7fd fc7d 	bl	8005418 <half_sectionD>
					break;
 8007b1e:	bf00      	nop
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 8007b20:	e76d      	b.n	80079fe <v_test+0x12>
 8007b22:	bf00      	nop
 8007b24:	0800f63c 	.word	0x0800f63c
 8007b28:	20000b6c 	.word	0x20000b6c
 8007b2c:	0800f434 	.word	0x0800f434
 8007b30:	40020000 	.word	0x40020000
 8007b34:	0800f654 	.word	0x0800f654

08007b38 <simple_run>:
//simple_run
// 超信地走行モード
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void simple_run(void){
 8007b38:	b580      	push	{r7, lr}
 8007b3a:	b082      	sub	sp, #8
 8007b3c:	af00      	add	r7, sp, #0

	int mode = 0;
 8007b3e:	2300      	movs	r3, #0
 8007b40:	607b      	str	r3, [r7, #4]
	printf("Simple Run, Mode : %d\n", mode);
 8007b42:	6879      	ldr	r1, [r7, #4]
 8007b44:	4874      	ldr	r0, [pc, #464]	; (8007d18 <simple_run+0x1e0>)
 8007b46:	f006 fb4b 	bl	800e1e0 <iprintf>

	while(1){

		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	b2db      	uxtb	r3, r3
 8007b4e:	f003 0301 	and.w	r3, r3, #1
 8007b52:	b2d8      	uxtb	r0, r3
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	b2db      	uxtb	r3, r3
 8007b58:	f003 0302 	and.w	r3, r3, #2
 8007b5c:	b2d9      	uxtb	r1, r3
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	b2db      	uxtb	r3, r3
 8007b62:	f003 0304 	and.w	r3, r3, #4
 8007b66:	b2db      	uxtb	r3, r3
 8007b68:	461a      	mov	r2, r3
 8007b6a:	f005 fd6b 	bl	800d644 <led_write>
		  if(dist_r >= 20){
 8007b6e:	4b6b      	ldr	r3, [pc, #428]	; (8007d1c <simple_run+0x1e4>)
 8007b70:	edd3 7a00 	vldr	s15, [r3]
 8007b74:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8007b78:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007b7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b80:	db0f      	blt.n	8007ba2 <simple_run+0x6a>
			  mode++;
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	3301      	adds	r3, #1
 8007b86:	607b      	str	r3, [r7, #4]
			  dist_r = 0;
 8007b88:	4b64      	ldr	r3, [pc, #400]	; (8007d1c <simple_run+0x1e4>)
 8007b8a:	f04f 0200 	mov.w	r2, #0
 8007b8e:	601a      	str	r2, [r3, #0]
			  if(mode > 7){
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	2b07      	cmp	r3, #7
 8007b94:	dd01      	ble.n	8007b9a <simple_run+0x62>
				  mode = 0;
 8007b96:	2300      	movs	r3, #0
 8007b98:	607b      	str	r3, [r7, #4]
			  }
			  printf("Mode : %d\n", mode);
 8007b9a:	6879      	ldr	r1, [r7, #4]
 8007b9c:	4860      	ldr	r0, [pc, #384]	; (8007d20 <simple_run+0x1e8>)
 8007b9e:	f006 fb1f 	bl	800e1e0 <iprintf>
			  //buzzer(pitagola2[mode-1][0], pitagola2[mode-1][1]);
			  //buzzer(pitagola[2][0], pitagola[2][1]);
		  }
		  if(dist_r <= -20){
 8007ba2:	4b5e      	ldr	r3, [pc, #376]	; (8007d1c <simple_run+0x1e4>)
 8007ba4:	edd3 7a00 	vldr	s15, [r3]
 8007ba8:	eebb 7a04 	vmov.f32	s14, #180	; 0xc1a00000 -20.0
 8007bac:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007bb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007bb4:	d80f      	bhi.n	8007bd6 <simple_run+0x9e>
			  mode--;
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	3b01      	subs	r3, #1
 8007bba:	607b      	str	r3, [r7, #4]
			  dist_r = 0;
 8007bbc:	4b57      	ldr	r3, [pc, #348]	; (8007d1c <simple_run+0x1e4>)
 8007bbe:	f04f 0200 	mov.w	r2, #0
 8007bc2:	601a      	str	r2, [r3, #0]
			  if(mode < 0){
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	da01      	bge.n	8007bce <simple_run+0x96>
				  mode = 7;
 8007bca:	2307      	movs	r3, #7
 8007bcc:	607b      	str	r3, [r7, #4]
			  }
			  printf("Mode : %d\n", mode);
 8007bce:	6879      	ldr	r1, [r7, #4]
 8007bd0:	4853      	ldr	r0, [pc, #332]	; (8007d20 <simple_run+0x1e8>)
 8007bd2:	f006 fb05 	bl	800e1e0 <iprintf>
			  //buzzer(pitagola2[mode-1][0], pitagola2[mode-1][1]);
			  //buzzer(pitagola[2][0], pitagola[2][1]);
		  }
		  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET){
 8007bd6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007bda:	4852      	ldr	r0, [pc, #328]	; (8007d24 <simple_run+0x1ec>)
 8007bdc:	f7fa fb7a 	bl	80022d4 <HAL_GPIO_ReadPin>
 8007be0:	4603      	mov	r3, r0
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d1b1      	bne.n	8007b4a <simple_run+0x12>
			  HAL_Delay(50);
 8007be6:	2032      	movs	r0, #50	; 0x32
 8007be8:	f7f9 fa18 	bl	800101c <HAL_Delay>
			  while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET);
 8007bec:	bf00      	nop
 8007bee:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007bf2:	484c      	ldr	r0, [pc, #304]	; (8007d24 <simple_run+0x1ec>)
 8007bf4:	f7fa fb6e 	bl	80022d4 <HAL_GPIO_ReadPin>
 8007bf8:	4603      	mov	r3, r0
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d0f7      	beq.n	8007bee <simple_run+0xb6>
			  drive_ready();
 8007bfe:	f7fd f839 	bl	8004c74 <drive_ready>

			  switch(mode){
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	2b07      	cmp	r3, #7
 8007c06:	d8a0      	bhi.n	8007b4a <simple_run+0x12>
 8007c08:	a201      	add	r2, pc, #4	; (adr r2, 8007c10 <simple_run+0xd8>)
 8007c0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c0e:	bf00      	nop
 8007c10:	08007b4b 	.word	0x08007b4b
 8007c14:	08007c31 	.word	0x08007c31
 8007c18:	08007c7d 	.word	0x08007c7d
 8007c1c:	08007cc9 	.word	0x08007cc9
 8007c20:	08007b4b 	.word	0x08007b4b
 8007c24:	08007b4b 	.word	0x08007b4b
 8007c28:	08007b4b 	.word	0x08007b4b
 8007c2c:	08007b4b 	.word	0x08007b4b

				case 0:
					break;
				case 1:
					//----一次探索走行----
					printf("First Run.\n");
 8007c30:	483d      	ldr	r0, [pc, #244]	; (8007d28 <simple_run+0x1f0>)
 8007c32:	f006 fb49 	bl	800e2c8 <puts>

					MF.FLAG.SCND = 0;
 8007c36:	4a3d      	ldr	r2, [pc, #244]	; (8007d2c <simple_run+0x1f4>)
 8007c38:	8813      	ldrh	r3, [r2, #0]
 8007c3a:	f36f 1345 	bfc	r3, #5, #1
 8007c3e:	8013      	strh	r3, [r2, #0]
					goal_x = GOAL_X;
 8007c40:	4b3b      	ldr	r3, [pc, #236]	; (8007d30 <simple_run+0x1f8>)
 8007c42:	2209      	movs	r2, #9
 8007c44:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 8007c46:	4b3b      	ldr	r3, [pc, #236]	; (8007d34 <simple_run+0x1fc>)
 8007c48:	2206      	movs	r2, #6
 8007c4a:	701a      	strb	r2, [r3, #0]

					get_base();
 8007c4c:	f005 fca2 	bl	800d594 <get_base>

					searchA();
 8007c50:	f003 f808 	bl	800ac64 <searchA>
					HAL_Delay(2000);
 8007c54:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8007c58:	f7f9 f9e0 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 8007c5c:	4b35      	ldr	r3, [pc, #212]	; (8007d34 <simple_run+0x1fc>)
 8007c5e:	2200      	movs	r2, #0
 8007c60:	701a      	strb	r2, [r3, #0]
 8007c62:	4b34      	ldr	r3, [pc, #208]	; (8007d34 <simple_run+0x1fc>)
 8007c64:	781a      	ldrb	r2, [r3, #0]
 8007c66:	4b32      	ldr	r3, [pc, #200]	; (8007d30 <simple_run+0x1f8>)
 8007c68:	701a      	strb	r2, [r3, #0]
					searchA();
 8007c6a:	f002 fffb 	bl	800ac64 <searchA>

					goal_x = GOAL_X;
 8007c6e:	4b30      	ldr	r3, [pc, #192]	; (8007d30 <simple_run+0x1f8>)
 8007c70:	2209      	movs	r2, #9
 8007c72:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 8007c74:	4b2f      	ldr	r3, [pc, #188]	; (8007d34 <simple_run+0x1fc>)
 8007c76:	2206      	movs	r2, #6
 8007c78:	701a      	strb	r2, [r3, #0]

					break;
 8007c7a:	e04b      	b.n	8007d14 <simple_run+0x1dc>

				case 2:
					//----一次探索連続走行----
					printf("First Run. (Continuous)\n");
 8007c7c:	482e      	ldr	r0, [pc, #184]	; (8007d38 <simple_run+0x200>)
 8007c7e:	f006 fb23 	bl	800e2c8 <puts>

					MF.FLAG.SCND = 0;
 8007c82:	4a2a      	ldr	r2, [pc, #168]	; (8007d2c <simple_run+0x1f4>)
 8007c84:	8813      	ldrh	r3, [r2, #0]
 8007c86:	f36f 1345 	bfc	r3, #5, #1
 8007c8a:	8013      	strh	r3, [r2, #0]
					goal_x = GOAL_X;
 8007c8c:	4b28      	ldr	r3, [pc, #160]	; (8007d30 <simple_run+0x1f8>)
 8007c8e:	2209      	movs	r2, #9
 8007c90:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 8007c92:	4b28      	ldr	r3, [pc, #160]	; (8007d34 <simple_run+0x1fc>)
 8007c94:	2206      	movs	r2, #6
 8007c96:	701a      	strb	r2, [r3, #0]

					get_base();
 8007c98:	f005 fc7c 	bl	800d594 <get_base>

					searchB();
 8007c9c:	f003 f864 	bl	800ad68 <searchB>
					HAL_Delay(2000);
 8007ca0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8007ca4:	f7f9 f9ba 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 8007ca8:	4b22      	ldr	r3, [pc, #136]	; (8007d34 <simple_run+0x1fc>)
 8007caa:	2200      	movs	r2, #0
 8007cac:	701a      	strb	r2, [r3, #0]
 8007cae:	4b21      	ldr	r3, [pc, #132]	; (8007d34 <simple_run+0x1fc>)
 8007cb0:	781a      	ldrb	r2, [r3, #0]
 8007cb2:	4b1f      	ldr	r3, [pc, #124]	; (8007d30 <simple_run+0x1f8>)
 8007cb4:	701a      	strb	r2, [r3, #0]
					searchB();
 8007cb6:	f003 f857 	bl	800ad68 <searchB>

					goal_x = GOAL_X;
 8007cba:	4b1d      	ldr	r3, [pc, #116]	; (8007d30 <simple_run+0x1f8>)
 8007cbc:	2209      	movs	r2, #9
 8007cbe:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 8007cc0:	4b1c      	ldr	r3, [pc, #112]	; (8007d34 <simple_run+0x1fc>)
 8007cc2:	2206      	movs	r2, #6
 8007cc4:	701a      	strb	r2, [r3, #0]

					break;
 8007cc6:	e025      	b.n	8007d14 <simple_run+0x1dc>

				case 3:
					//----二次探索走行----
					printf("Second Run. (Continuous)\n");
 8007cc8:	481c      	ldr	r0, [pc, #112]	; (8007d3c <simple_run+0x204>)
 8007cca:	f006 fafd 	bl	800e2c8 <puts>

					MF.FLAG.SCND = 1;
 8007cce:	4a17      	ldr	r2, [pc, #92]	; (8007d2c <simple_run+0x1f4>)
 8007cd0:	8813      	ldrh	r3, [r2, #0]
 8007cd2:	f043 0320 	orr.w	r3, r3, #32
 8007cd6:	8013      	strh	r3, [r2, #0]
					goal_x = GOAL_X;
 8007cd8:	4b15      	ldr	r3, [pc, #84]	; (8007d30 <simple_run+0x1f8>)
 8007cda:	2209      	movs	r2, #9
 8007cdc:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 8007cde:	4b15      	ldr	r3, [pc, #84]	; (8007d34 <simple_run+0x1fc>)
 8007ce0:	2206      	movs	r2, #6
 8007ce2:	701a      	strb	r2, [r3, #0]

					get_base();
 8007ce4:	f005 fc56 	bl	800d594 <get_base>

					searchB();
 8007ce8:	f003 f83e 	bl	800ad68 <searchB>
					HAL_Delay(2000);
 8007cec:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8007cf0:	f7f9 f994 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 8007cf4:	4b0f      	ldr	r3, [pc, #60]	; (8007d34 <simple_run+0x1fc>)
 8007cf6:	2200      	movs	r2, #0
 8007cf8:	701a      	strb	r2, [r3, #0]
 8007cfa:	4b0e      	ldr	r3, [pc, #56]	; (8007d34 <simple_run+0x1fc>)
 8007cfc:	781a      	ldrb	r2, [r3, #0]
 8007cfe:	4b0c      	ldr	r3, [pc, #48]	; (8007d30 <simple_run+0x1f8>)
 8007d00:	701a      	strb	r2, [r3, #0]
					searchB();
 8007d02:	f003 f831 	bl	800ad68 <searchB>

					goal_x = GOAL_X;
 8007d06:	4b0a      	ldr	r3, [pc, #40]	; (8007d30 <simple_run+0x1f8>)
 8007d08:	2209      	movs	r2, #9
 8007d0a:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 8007d0c:	4b09      	ldr	r3, [pc, #36]	; (8007d34 <simple_run+0x1fc>)
 8007d0e:	2206      	movs	r2, #6
 8007d10:	701a      	strb	r2, [r3, #0]

					break;
 8007d12:	bf00      	nop
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 8007d14:	e719      	b.n	8007b4a <simple_run+0x12>
 8007d16:	bf00      	nop
 8007d18:	0800f664 	.word	0x0800f664
 8007d1c:	20000b6c 	.word	0x20000b6c
 8007d20:	0800f434 	.word	0x0800f434
 8007d24:	40020000 	.word	0x40020000
 8007d28:	0800f67c 	.word	0x0800f67c
 8007d2c:	20000fe8 	.word	0x20000fe8
 8007d30:	20000c31 	.word	0x20000c31
 8007d34:	20000bcc 	.word	0x20000bcc
 8007d38:	0800f688 	.word	0x0800f688
 8007d3c:	0800f6a0 	.word	0x0800f6a0

08007d40 <slalom_run>:
//slalom_run
// スラローム走行モード
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void slalom_run(void){
 8007d40:	b580      	push	{r7, lr}
 8007d42:	b082      	sub	sp, #8
 8007d44:	af00      	add	r7, sp, #0

	int mode = 0;
 8007d46:	2300      	movs	r3, #0
 8007d48:	607b      	str	r3, [r7, #4]
	printf("Slalom Run, Mode : %d\n", mode);
 8007d4a:	6879      	ldr	r1, [r7, #4]
 8007d4c:	48b1      	ldr	r0, [pc, #708]	; (8008014 <slalom_run+0x2d4>)
 8007d4e:	f006 fa47 	bl	800e1e0 <iprintf>

	while(1){
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	b2db      	uxtb	r3, r3
 8007d56:	f003 0301 	and.w	r3, r3, #1
 8007d5a:	b2d8      	uxtb	r0, r3
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	b2db      	uxtb	r3, r3
 8007d60:	f003 0302 	and.w	r3, r3, #2
 8007d64:	b2d9      	uxtb	r1, r3
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	b2db      	uxtb	r3, r3
 8007d6a:	f003 0304 	and.w	r3, r3, #4
 8007d6e:	b2db      	uxtb	r3, r3
 8007d70:	461a      	mov	r2, r3
 8007d72:	f005 fc67 	bl	800d644 <led_write>
		  if(dist_r >= 20){
 8007d76:	4ba8      	ldr	r3, [pc, #672]	; (8008018 <slalom_run+0x2d8>)
 8007d78:	edd3 7a00 	vldr	s15, [r3]
 8007d7c:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8007d80:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007d84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007d88:	db0f      	blt.n	8007daa <slalom_run+0x6a>
			  mode++;
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	3301      	adds	r3, #1
 8007d8e:	607b      	str	r3, [r7, #4]
			  dist_r = 0;
 8007d90:	4ba1      	ldr	r3, [pc, #644]	; (8008018 <slalom_run+0x2d8>)
 8007d92:	f04f 0200 	mov.w	r2, #0
 8007d96:	601a      	str	r2, [r3, #0]
			  if(mode > 7){
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	2b07      	cmp	r3, #7
 8007d9c:	dd01      	ble.n	8007da2 <slalom_run+0x62>
				  mode = 0;
 8007d9e:	2300      	movs	r3, #0
 8007da0:	607b      	str	r3, [r7, #4]
			  }
			  printf("Mode : %d\n", mode);
 8007da2:	6879      	ldr	r1, [r7, #4]
 8007da4:	489d      	ldr	r0, [pc, #628]	; (800801c <slalom_run+0x2dc>)
 8007da6:	f006 fa1b 	bl	800e1e0 <iprintf>
			  //buzzer(pitagola2[mode-1][0], pitagola2[mode-1][1]);
			  //buzzer(pitagola[2][0], pitagola[2][1]);
		  }
		  if(dist_r <= -20){
 8007daa:	4b9b      	ldr	r3, [pc, #620]	; (8008018 <slalom_run+0x2d8>)
 8007dac:	edd3 7a00 	vldr	s15, [r3]
 8007db0:	eebb 7a04 	vmov.f32	s14, #180	; 0xc1a00000 -20.0
 8007db4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007db8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007dbc:	d80f      	bhi.n	8007dde <slalom_run+0x9e>
			  mode--;
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	3b01      	subs	r3, #1
 8007dc2:	607b      	str	r3, [r7, #4]
			  dist_r = 0;
 8007dc4:	4b94      	ldr	r3, [pc, #592]	; (8008018 <slalom_run+0x2d8>)
 8007dc6:	f04f 0200 	mov.w	r2, #0
 8007dca:	601a      	str	r2, [r3, #0]
			  if(mode < 0){
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	da01      	bge.n	8007dd6 <slalom_run+0x96>
				  mode = 7;
 8007dd2:	2307      	movs	r3, #7
 8007dd4:	607b      	str	r3, [r7, #4]
			  }
			  printf("Mode : %d\n", mode);
 8007dd6:	6879      	ldr	r1, [r7, #4]
 8007dd8:	4890      	ldr	r0, [pc, #576]	; (800801c <slalom_run+0x2dc>)
 8007dda:	f006 fa01 	bl	800e1e0 <iprintf>
			  //buzzer(pitagola2[mode-1][0], pitagola2[mode-1][1]);
			  //buzzer(pitagola[2][0], pitagola[2][1]);
		  }
		  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET){
 8007dde:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007de2:	488f      	ldr	r0, [pc, #572]	; (8008020 <slalom_run+0x2e0>)
 8007de4:	f7fa fa76 	bl	80022d4 <HAL_GPIO_ReadPin>
 8007de8:	4603      	mov	r3, r0
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d1b1      	bne.n	8007d52 <slalom_run+0x12>
			  HAL_Delay(50);
 8007dee:	2032      	movs	r0, #50	; 0x32
 8007df0:	f7f9 f914 	bl	800101c <HAL_Delay>
			  while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET);
 8007df4:	bf00      	nop
 8007df6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007dfa:	4889      	ldr	r0, [pc, #548]	; (8008020 <slalom_run+0x2e0>)
 8007dfc:	f7fa fa6a 	bl	80022d4 <HAL_GPIO_ReadPin>
 8007e00:	4603      	mov	r3, r0
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d0f7      	beq.n	8007df6 <slalom_run+0xb6>
			  drive_ready();
 8007e06:	f7fc ff35 	bl	8004c74 <drive_ready>

			  switch(mode){
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	2b07      	cmp	r3, #7
 8007e0e:	d8a0      	bhi.n	8007d52 <slalom_run+0x12>
 8007e10:	a201      	add	r2, pc, #4	; (adr r2, 8007e18 <slalom_run+0xd8>)
 8007e12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e16:	bf00      	nop
 8007e18:	08007e39 	.word	0x08007e39
 8007e1c:	08007e8b 	.word	0x08007e8b
 8007e20:	08007edd 	.word	0x08007edd
 8007e24:	08007f49 	.word	0x08007f49
 8007e28:	08007faf 	.word	0x08007faf
 8007e2c:	08008049 	.word	0x08008049
 8007e30:	080080ad 	.word	0x080080ad
 8007e34:	0800812b 	.word	0x0800812b

			  case 0:
					//----一次探索スラローム走行----
					printf("First Run. (Slalom)\n");
 8007e38:	487a      	ldr	r0, [pc, #488]	; (8008024 <slalom_run+0x2e4>)
 8007e3a:	f006 fa45 	bl	800e2c8 <puts>

					MF.FLAG.SCND = 0;
 8007e3e:	4a7a      	ldr	r2, [pc, #488]	; (8008028 <slalom_run+0x2e8>)
 8007e40:	8813      	ldrh	r3, [r2, #0]
 8007e42:	f36f 1345 	bfc	r3, #5, #1
 8007e46:	8013      	strh	r3, [r2, #0]
					start_flag = 0;
 8007e48:	4b78      	ldr	r3, [pc, #480]	; (800802c <slalom_run+0x2ec>)
 8007e4a:	2200      	movs	r2, #0
 8007e4c:	701a      	strb	r2, [r3, #0]
					goal_x = GOAL_X;
 8007e4e:	4b78      	ldr	r3, [pc, #480]	; (8008030 <slalom_run+0x2f0>)
 8007e50:	2209      	movs	r2, #9
 8007e52:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 8007e54:	4b77      	ldr	r3, [pc, #476]	; (8008034 <slalom_run+0x2f4>)
 8007e56:	2206      	movs	r2, #6
 8007e58:	701a      	strb	r2, [r3, #0]

					get_base();
 8007e5a:	f005 fb9b 	bl	800d594 <get_base>

					searchC();
 8007e5e:	f003 f80d 	bl	800ae7c <searchC>
					HAL_Delay(2000);
 8007e62:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8007e66:	f7f9 f8d9 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 8007e6a:	4b72      	ldr	r3, [pc, #456]	; (8008034 <slalom_run+0x2f4>)
 8007e6c:	2200      	movs	r2, #0
 8007e6e:	701a      	strb	r2, [r3, #0]
 8007e70:	4b70      	ldr	r3, [pc, #448]	; (8008034 <slalom_run+0x2f4>)
 8007e72:	781a      	ldrb	r2, [r3, #0]
 8007e74:	4b6e      	ldr	r3, [pc, #440]	; (8008030 <slalom_run+0x2f0>)
 8007e76:	701a      	strb	r2, [r3, #0]
					searchC();
 8007e78:	f003 f800 	bl	800ae7c <searchC>

					goal_x = GOAL_X;
 8007e7c:	4b6c      	ldr	r3, [pc, #432]	; (8008030 <slalom_run+0x2f0>)
 8007e7e:	2209      	movs	r2, #9
 8007e80:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 8007e82:	4b6c      	ldr	r3, [pc, #432]	; (8008034 <slalom_run+0x2f4>)
 8007e84:	2206      	movs	r2, #6
 8007e86:	701a      	strb	r2, [r3, #0]
					break;
 8007e88:	e18e      	b.n	80081a8 <slalom_run+0x468>

				case 1:
					//----二次探索スラローム走行----
					printf("Second Run. (Slalom)\n");
 8007e8a:	486b      	ldr	r0, [pc, #428]	; (8008038 <slalom_run+0x2f8>)
 8007e8c:	f006 fa1c 	bl	800e2c8 <puts>

					MF.FLAG.SCND = 1;
 8007e90:	4a65      	ldr	r2, [pc, #404]	; (8008028 <slalom_run+0x2e8>)
 8007e92:	8813      	ldrh	r3, [r2, #0]
 8007e94:	f043 0320 	orr.w	r3, r3, #32
 8007e98:	8013      	strh	r3, [r2, #0]
					start_flag = 0;
 8007e9a:	4b64      	ldr	r3, [pc, #400]	; (800802c <slalom_run+0x2ec>)
 8007e9c:	2200      	movs	r2, #0
 8007e9e:	701a      	strb	r2, [r3, #0]
					goal_x = GOAL_X;
 8007ea0:	4b63      	ldr	r3, [pc, #396]	; (8008030 <slalom_run+0x2f0>)
 8007ea2:	2209      	movs	r2, #9
 8007ea4:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 8007ea6:	4b63      	ldr	r3, [pc, #396]	; (8008034 <slalom_run+0x2f4>)
 8007ea8:	2206      	movs	r2, #6
 8007eaa:	701a      	strb	r2, [r3, #0]

					get_base();
 8007eac:	f005 fb72 	bl	800d594 <get_base>

					searchC();
 8007eb0:	f002 ffe4 	bl	800ae7c <searchC>
					HAL_Delay(2000);
 8007eb4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8007eb8:	f7f9 f8b0 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 8007ebc:	4b5d      	ldr	r3, [pc, #372]	; (8008034 <slalom_run+0x2f4>)
 8007ebe:	2200      	movs	r2, #0
 8007ec0:	701a      	strb	r2, [r3, #0]
 8007ec2:	4b5c      	ldr	r3, [pc, #368]	; (8008034 <slalom_run+0x2f4>)
 8007ec4:	781a      	ldrb	r2, [r3, #0]
 8007ec6:	4b5a      	ldr	r3, [pc, #360]	; (8008030 <slalom_run+0x2f0>)
 8007ec8:	701a      	strb	r2, [r3, #0]
					searchC();
 8007eca:	f002 ffd7 	bl	800ae7c <searchC>

					goal_x = GOAL_X;
 8007ece:	4b58      	ldr	r3, [pc, #352]	; (8008030 <slalom_run+0x2f0>)
 8007ed0:	2209      	movs	r2, #9
 8007ed2:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 8007ed4:	4b57      	ldr	r3, [pc, #348]	; (8008034 <slalom_run+0x2f4>)
 8007ed6:	2206      	movs	r2, #6
 8007ed8:	701a      	strb	r2, [r3, #0]
					break;
 8007eda:	e165      	b.n	80081a8 <slalom_run+0x468>

				case 2:
					//----二次探索スラローム走行+既知区間加速----
					printf("Second Run. (Slalom+accel)\n");
 8007edc:	4857      	ldr	r0, [pc, #348]	; (800803c <slalom_run+0x2fc>)
 8007ede:	f006 f9f3 	bl	800e2c8 <puts>

					MF.FLAG.SCND = 1;
 8007ee2:	4a51      	ldr	r2, [pc, #324]	; (8008028 <slalom_run+0x2e8>)
 8007ee4:	8813      	ldrh	r3, [r2, #0]
 8007ee6:	f043 0320 	orr.w	r3, r3, #32
 8007eea:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 8007eec:	4a4e      	ldr	r2, [pc, #312]	; (8008028 <slalom_run+0x2e8>)
 8007eee:	8813      	ldrh	r3, [r2, #0]
 8007ef0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007ef4:	8013      	strh	r3, [r2, #0]
					start_flag = 0;
 8007ef6:	4b4d      	ldr	r3, [pc, #308]	; (800802c <slalom_run+0x2ec>)
 8007ef8:	2200      	movs	r2, #0
 8007efa:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 8007efc:	4b50      	ldr	r3, [pc, #320]	; (8008040 <slalom_run+0x300>)
 8007efe:	f241 3288 	movw	r2, #5000	; 0x1388
 8007f02:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 600;
 8007f04:	4b4f      	ldr	r3, [pc, #316]	; (8008044 <slalom_run+0x304>)
 8007f06:	f44f 7216 	mov.w	r2, #600	; 0x258
 8007f0a:	801a      	strh	r2, [r3, #0]
					goal_x = GOAL_X;
 8007f0c:	4b48      	ldr	r3, [pc, #288]	; (8008030 <slalom_run+0x2f0>)
 8007f0e:	2209      	movs	r2, #9
 8007f10:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 8007f12:	4b48      	ldr	r3, [pc, #288]	; (8008034 <slalom_run+0x2f4>)
 8007f14:	2206      	movs	r2, #6
 8007f16:	701a      	strb	r2, [r3, #0]

					get_base();
 8007f18:	f005 fb3c 	bl	800d594 <get_base>

					searchD();
 8007f1c:	f003 f900 	bl	800b120 <searchD>
					HAL_Delay(2000);
 8007f20:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8007f24:	f7f9 f87a 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 8007f28:	4b42      	ldr	r3, [pc, #264]	; (8008034 <slalom_run+0x2f4>)
 8007f2a:	2200      	movs	r2, #0
 8007f2c:	701a      	strb	r2, [r3, #0]
 8007f2e:	4b41      	ldr	r3, [pc, #260]	; (8008034 <slalom_run+0x2f4>)
 8007f30:	781a      	ldrb	r2, [r3, #0]
 8007f32:	4b3f      	ldr	r3, [pc, #252]	; (8008030 <slalom_run+0x2f0>)
 8007f34:	701a      	strb	r2, [r3, #0]
					searchD();
 8007f36:	f003 f8f3 	bl	800b120 <searchD>

					goal_x = GOAL_X;
 8007f3a:	4b3d      	ldr	r3, [pc, #244]	; (8008030 <slalom_run+0x2f0>)
 8007f3c:	2209      	movs	r2, #9
 8007f3e:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 8007f40:	4b3c      	ldr	r3, [pc, #240]	; (8008034 <slalom_run+0x2f4>)
 8007f42:	2206      	movs	r2, #6
 8007f44:	701a      	strb	r2, [r3, #0]
					break;
 8007f46:	e12f      	b.n	80081a8 <slalom_run+0x468>

				case 3:
					//----二次探索スラローム走行+既知区間加速----
					printf("Second Run. (Slalom+accel)\n");
 8007f48:	483c      	ldr	r0, [pc, #240]	; (800803c <slalom_run+0x2fc>)
 8007f4a:	f006 f9bd 	bl	800e2c8 <puts>

					MF.FLAG.SCND = 1;
 8007f4e:	4a36      	ldr	r2, [pc, #216]	; (8008028 <slalom_run+0x2e8>)
 8007f50:	8813      	ldrh	r3, [r2, #0]
 8007f52:	f043 0320 	orr.w	r3, r3, #32
 8007f56:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 8007f58:	4a33      	ldr	r2, [pc, #204]	; (8008028 <slalom_run+0x2e8>)
 8007f5a:	8813      	ldrh	r3, [r2, #0]
 8007f5c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007f60:	8013      	strh	r3, [r2, #0]
					accel_hs = 5000;
 8007f62:	4b37      	ldr	r3, [pc, #220]	; (8008040 <slalom_run+0x300>)
 8007f64:	f241 3288 	movw	r2, #5000	; 0x1388
 8007f68:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1000;
 8007f6a:	4b36      	ldr	r3, [pc, #216]	; (8008044 <slalom_run+0x304>)
 8007f6c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007f70:	801a      	strh	r2, [r3, #0]
					goal_x = GOAL_X;
 8007f72:	4b2f      	ldr	r3, [pc, #188]	; (8008030 <slalom_run+0x2f0>)
 8007f74:	2209      	movs	r2, #9
 8007f76:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 8007f78:	4b2e      	ldr	r3, [pc, #184]	; (8008034 <slalom_run+0x2f4>)
 8007f7a:	2206      	movs	r2, #6
 8007f7c:	701a      	strb	r2, [r3, #0]

					get_base();
 8007f7e:	f005 fb09 	bl	800d594 <get_base>

					searchD();
 8007f82:	f003 f8cd 	bl	800b120 <searchD>
					HAL_Delay(2000);
 8007f86:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8007f8a:	f7f9 f847 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 8007f8e:	4b29      	ldr	r3, [pc, #164]	; (8008034 <slalom_run+0x2f4>)
 8007f90:	2200      	movs	r2, #0
 8007f92:	701a      	strb	r2, [r3, #0]
 8007f94:	4b27      	ldr	r3, [pc, #156]	; (8008034 <slalom_run+0x2f4>)
 8007f96:	781a      	ldrb	r2, [r3, #0]
 8007f98:	4b25      	ldr	r3, [pc, #148]	; (8008030 <slalom_run+0x2f0>)
 8007f9a:	701a      	strb	r2, [r3, #0]
					searchD();
 8007f9c:	f003 f8c0 	bl	800b120 <searchD>

					goal_x = GOAL_X;
 8007fa0:	4b23      	ldr	r3, [pc, #140]	; (8008030 <slalom_run+0x2f0>)
 8007fa2:	2209      	movs	r2, #9
 8007fa4:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 8007fa6:	4b23      	ldr	r3, [pc, #140]	; (8008034 <slalom_run+0x2f4>)
 8007fa8:	2206      	movs	r2, #6
 8007faa:	701a      	strb	r2, [r3, #0]
					break;
 8007fac:	e0fc      	b.n	80081a8 <slalom_run+0x468>

				case 4:
					//----二次探索スラローム走行+既知区間加速----
					printf("Second Run. (Slalom+accel)\n");
 8007fae:	4823      	ldr	r0, [pc, #140]	; (800803c <slalom_run+0x2fc>)
 8007fb0:	f006 f98a 	bl	800e2c8 <puts>

					MF.FLAG.SCND = 1;
 8007fb4:	4a1c      	ldr	r2, [pc, #112]	; (8008028 <slalom_run+0x2e8>)
 8007fb6:	8813      	ldrh	r3, [r2, #0]
 8007fb8:	f043 0320 	orr.w	r3, r3, #32
 8007fbc:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 8007fbe:	4a1a      	ldr	r2, [pc, #104]	; (8008028 <slalom_run+0x2e8>)
 8007fc0:	8813      	ldrh	r3, [r2, #0]
 8007fc2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007fc6:	8013      	strh	r3, [r2, #0]
					accel_hs = 5000;
 8007fc8:	4b1d      	ldr	r3, [pc, #116]	; (8008040 <slalom_run+0x300>)
 8007fca:	f241 3288 	movw	r2, #5000	; 0x1388
 8007fce:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1500;
 8007fd0:	4b1c      	ldr	r3, [pc, #112]	; (8008044 <slalom_run+0x304>)
 8007fd2:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8007fd6:	801a      	strh	r2, [r3, #0]
					goal_x = GOAL_X;
 8007fd8:	4b15      	ldr	r3, [pc, #84]	; (8008030 <slalom_run+0x2f0>)
 8007fda:	2209      	movs	r2, #9
 8007fdc:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 8007fde:	4b15      	ldr	r3, [pc, #84]	; (8008034 <slalom_run+0x2f4>)
 8007fe0:	2206      	movs	r2, #6
 8007fe2:	701a      	strb	r2, [r3, #0]

					get_base();
 8007fe4:	f005 fad6 	bl	800d594 <get_base>

					searchD();
 8007fe8:	f003 f89a 	bl	800b120 <searchD>
					HAL_Delay(2000);
 8007fec:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8007ff0:	f7f9 f814 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 8007ff4:	4b0f      	ldr	r3, [pc, #60]	; (8008034 <slalom_run+0x2f4>)
 8007ff6:	2200      	movs	r2, #0
 8007ff8:	701a      	strb	r2, [r3, #0]
 8007ffa:	4b0e      	ldr	r3, [pc, #56]	; (8008034 <slalom_run+0x2f4>)
 8007ffc:	781a      	ldrb	r2, [r3, #0]
 8007ffe:	4b0c      	ldr	r3, [pc, #48]	; (8008030 <slalom_run+0x2f0>)
 8008000:	701a      	strb	r2, [r3, #0]
					searchD();
 8008002:	f003 f88d 	bl	800b120 <searchD>

					goal_x = GOAL_X;
 8008006:	4b0a      	ldr	r3, [pc, #40]	; (8008030 <slalom_run+0x2f0>)
 8008008:	2209      	movs	r2, #9
 800800a:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800800c:	4b09      	ldr	r3, [pc, #36]	; (8008034 <slalom_run+0x2f4>)
 800800e:	2206      	movs	r2, #6
 8008010:	701a      	strb	r2, [r3, #0]
					break;
 8008012:	e0c9      	b.n	80081a8 <slalom_run+0x468>
 8008014:	0800f6bc 	.word	0x0800f6bc
 8008018:	20000b6c 	.word	0x20000b6c
 800801c:	0800f434 	.word	0x0800f434
 8008020:	40020000 	.word	0x40020000
 8008024:	0800f6d4 	.word	0x0800f6d4
 8008028:	20000fe8 	.word	0x20000fe8
 800802c:	20001008 	.word	0x20001008
 8008030:	20000c31 	.word	0x20000c31
 8008034:	20000bcc 	.word	0x20000bcc
 8008038:	0800f6e8 	.word	0x0800f6e8
 800803c:	0800f700 	.word	0x0800f700
 8008040:	200004d4 	.word	0x200004d4
 8008044:	20000ffc 	.word	0x20000ffc

				case 5:
					//----二次走行スラローム+直線優先----
					printf("High Speed Run. (Slalom)\n");
 8008048:	4858      	ldr	r0, [pc, #352]	; (80081ac <slalom_run+0x46c>)
 800804a:	f006 f93d 	bl	800e2c8 <puts>

					MF.FLAG.SCND = 1;
 800804e:	4a58      	ldr	r2, [pc, #352]	; (80081b0 <slalom_run+0x470>)
 8008050:	8813      	ldrh	r3, [r2, #0]
 8008052:	f043 0320 	orr.w	r3, r3, #32
 8008056:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 8008058:	4a55      	ldr	r2, [pc, #340]	; (80081b0 <slalom_run+0x470>)
 800805a:	8813      	ldrh	r3, [r2, #0]
 800805c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008060:	8013      	strh	r3, [r2, #0]
					start_flag = 0;
 8008062:	4b54      	ldr	r3, [pc, #336]	; (80081b4 <slalom_run+0x474>)
 8008064:	2200      	movs	r2, #0
 8008066:	701a      	strb	r2, [r3, #0]
					goal_x = GOAL_X;
 8008068:	4b53      	ldr	r3, [pc, #332]	; (80081b8 <slalom_run+0x478>)
 800806a:	2209      	movs	r2, #9
 800806c:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800806e:	4b53      	ldr	r3, [pc, #332]	; (80081bc <slalom_run+0x47c>)
 8008070:	2206      	movs	r2, #6
 8008072:	701a      	strb	r2, [r3, #0]

					get_base();
 8008074:	f005 fa8e 	bl	800d594 <get_base>

					HAL_Delay(5000);
 8008078:	f241 3088 	movw	r0, #5000	; 0x1388
 800807c:	f7f8 ffce 	bl	800101c <HAL_Delay>
					searchC();
 8008080:	f002 fefc 	bl	800ae7c <searchC>
					HAL_Delay(2000);
 8008084:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8008088:	f7f8 ffc8 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800808c:	4b4b      	ldr	r3, [pc, #300]	; (80081bc <slalom_run+0x47c>)
 800808e:	2200      	movs	r2, #0
 8008090:	701a      	strb	r2, [r3, #0]
 8008092:	4b4a      	ldr	r3, [pc, #296]	; (80081bc <slalom_run+0x47c>)
 8008094:	781a      	ldrb	r2, [r3, #0]
 8008096:	4b48      	ldr	r3, [pc, #288]	; (80081b8 <slalom_run+0x478>)
 8008098:	701a      	strb	r2, [r3, #0]
					searchC();
 800809a:	f002 feef 	bl	800ae7c <searchC>

					goal_x = GOAL_X;
 800809e:	4b46      	ldr	r3, [pc, #280]	; (80081b8 <slalom_run+0x478>)
 80080a0:	2209      	movs	r2, #9
 80080a2:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 80080a4:	4b45      	ldr	r3, [pc, #276]	; (80081bc <slalom_run+0x47c>)
 80080a6:	2206      	movs	r2, #6
 80080a8:	701a      	strb	r2, [r3, #0]
					break;
 80080aa:	e07d      	b.n	80081a8 <slalom_run+0x468>

				case 6:
					//----二次走行スラロームHigh Speed+直線優先+既知区間加速----
					printf("High Speed Run. (Slalom)\n");
 80080ac:	483f      	ldr	r0, [pc, #252]	; (80081ac <slalom_run+0x46c>)
 80080ae:	f006 f90b 	bl	800e2c8 <puts>

					MF.FLAG.SCND = 1;
 80080b2:	4a3f      	ldr	r2, [pc, #252]	; (80081b0 <slalom_run+0x470>)
 80080b4:	8813      	ldrh	r3, [r2, #0]
 80080b6:	f043 0320 	orr.w	r3, r3, #32
 80080ba:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 80080bc:	4a3c      	ldr	r2, [pc, #240]	; (80081b0 <slalom_run+0x470>)
 80080be:	8813      	ldrh	r3, [r2, #0]
 80080c0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80080c4:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 80080c6:	4a3a      	ldr	r2, [pc, #232]	; (80081b0 <slalom_run+0x470>)
 80080c8:	8813      	ldrh	r3, [r2, #0]
 80080ca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80080ce:	8013      	strh	r3, [r2, #0]
					accel_hs = 5000;
 80080d0:	4b3b      	ldr	r3, [pc, #236]	; (80081c0 <slalom_run+0x480>)
 80080d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80080d6:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1200;
 80080d8:	4b3a      	ldr	r3, [pc, #232]	; (80081c4 <slalom_run+0x484>)
 80080da:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 80080de:	801a      	strh	r2, [r3, #0]
					start_flag = 0;
 80080e0:	4b34      	ldr	r3, [pc, #208]	; (80081b4 <slalom_run+0x474>)
 80080e2:	2200      	movs	r2, #0
 80080e4:	701a      	strb	r2, [r3, #0]
					goal_x = GOAL_X;
 80080e6:	4b34      	ldr	r3, [pc, #208]	; (80081b8 <slalom_run+0x478>)
 80080e8:	2209      	movs	r2, #9
 80080ea:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 80080ec:	4b33      	ldr	r3, [pc, #204]	; (80081bc <slalom_run+0x47c>)
 80080ee:	2206      	movs	r2, #6
 80080f0:	701a      	strb	r2, [r3, #0]

					get_base();
 80080f2:	f005 fa4f 	bl	800d594 <get_base>

					HAL_Delay(5000);
 80080f6:	f241 3088 	movw	r0, #5000	; 0x1388
 80080fa:	f7f8 ff8f 	bl	800101c <HAL_Delay>
					searchD2();
 80080fe:	f003 f8f7 	bl	800b2f0 <searchD2>
					HAL_Delay(2000);
 8008102:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8008106:	f7f8 ff89 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800810a:	4b2c      	ldr	r3, [pc, #176]	; (80081bc <slalom_run+0x47c>)
 800810c:	2200      	movs	r2, #0
 800810e:	701a      	strb	r2, [r3, #0]
 8008110:	4b2a      	ldr	r3, [pc, #168]	; (80081bc <slalom_run+0x47c>)
 8008112:	781a      	ldrb	r2, [r3, #0]
 8008114:	4b28      	ldr	r3, [pc, #160]	; (80081b8 <slalom_run+0x478>)
 8008116:	701a      	strb	r2, [r3, #0]
					searchD2();
 8008118:	f003 f8ea 	bl	800b2f0 <searchD2>

					goal_x = GOAL_X;
 800811c:	4b26      	ldr	r3, [pc, #152]	; (80081b8 <slalom_run+0x478>)
 800811e:	2209      	movs	r2, #9
 8008120:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 8008122:	4b26      	ldr	r3, [pc, #152]	; (80081bc <slalom_run+0x47c>)
 8008124:	2206      	movs	r2, #6
 8008126:	701a      	strb	r2, [r3, #0]
					break;
 8008128:	e03e      	b.n	80081a8 <slalom_run+0x468>

				case 7:
					//----二次走行スラロームHigh Speed+直線優先+既知区間加速----
					printf("High Speed Run. (Slalom)\n");
 800812a:	4820      	ldr	r0, [pc, #128]	; (80081ac <slalom_run+0x46c>)
 800812c:	f006 f8cc 	bl	800e2c8 <puts>

					MF.FLAG.SCND = 1;
 8008130:	4a1f      	ldr	r2, [pc, #124]	; (80081b0 <slalom_run+0x470>)
 8008132:	8813      	ldrh	r3, [r2, #0]
 8008134:	f043 0320 	orr.w	r3, r3, #32
 8008138:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800813a:	4a1d      	ldr	r2, [pc, #116]	; (80081b0 <slalom_run+0x470>)
 800813c:	8813      	ldrh	r3, [r2, #0]
 800813e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008142:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 8008144:	4a1a      	ldr	r2, [pc, #104]	; (80081b0 <slalom_run+0x470>)
 8008146:	8813      	ldrh	r3, [r2, #0]
 8008148:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800814c:	8013      	strh	r3, [r2, #0]
					accel_hs = 5000;
 800814e:	4b1c      	ldr	r3, [pc, #112]	; (80081c0 <slalom_run+0x480>)
 8008150:	f241 3288 	movw	r2, #5000	; 0x1388
 8008154:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1600;
 8008156:	4b1b      	ldr	r3, [pc, #108]	; (80081c4 <slalom_run+0x484>)
 8008158:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800815c:	801a      	strh	r2, [r3, #0]
					start_flag = 0;
 800815e:	4b15      	ldr	r3, [pc, #84]	; (80081b4 <slalom_run+0x474>)
 8008160:	2200      	movs	r2, #0
 8008162:	701a      	strb	r2, [r3, #0]
					goal_x = GOAL_X;
 8008164:	4b14      	ldr	r3, [pc, #80]	; (80081b8 <slalom_run+0x478>)
 8008166:	2209      	movs	r2, #9
 8008168:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800816a:	4b14      	ldr	r3, [pc, #80]	; (80081bc <slalom_run+0x47c>)
 800816c:	2206      	movs	r2, #6
 800816e:	701a      	strb	r2, [r3, #0]

					get_base();
 8008170:	f005 fa10 	bl	800d594 <get_base>

					HAL_Delay(5000);
 8008174:	f241 3088 	movw	r0, #5000	; 0x1388
 8008178:	f7f8 ff50 	bl	800101c <HAL_Delay>
					searchD2();
 800817c:	f003 f8b8 	bl	800b2f0 <searchD2>
					HAL_Delay(2000);
 8008180:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8008184:	f7f8 ff4a 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 8008188:	4b0c      	ldr	r3, [pc, #48]	; (80081bc <slalom_run+0x47c>)
 800818a:	2200      	movs	r2, #0
 800818c:	701a      	strb	r2, [r3, #0]
 800818e:	4b0b      	ldr	r3, [pc, #44]	; (80081bc <slalom_run+0x47c>)
 8008190:	781a      	ldrb	r2, [r3, #0]
 8008192:	4b09      	ldr	r3, [pc, #36]	; (80081b8 <slalom_run+0x478>)
 8008194:	701a      	strb	r2, [r3, #0]
					searchD2();
 8008196:	f003 f8ab 	bl	800b2f0 <searchD2>

					goal_x = GOAL_X;
 800819a:	4b07      	ldr	r3, [pc, #28]	; (80081b8 <slalom_run+0x478>)
 800819c:	2209      	movs	r2, #9
 800819e:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 80081a0:	4b06      	ldr	r3, [pc, #24]	; (80081bc <slalom_run+0x47c>)
 80081a2:	2206      	movs	r2, #6
 80081a4:	701a      	strb	r2, [r3, #0]
					break;
 80081a6:	bf00      	nop
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 80081a8:	e5d3      	b.n	8007d52 <slalom_run+0x12>
 80081aa:	bf00      	nop
 80081ac:	0800f71c 	.word	0x0800f71c
 80081b0:	20000fe8 	.word	0x20000fe8
 80081b4:	20001008 	.word	0x20001008
 80081b8:	20000c31 	.word	0x20000c31
 80081bc:	20000bcc 	.word	0x20000bcc
 80081c0:	200004d4 	.word	0x200004d4
 80081c4:	20000ffc 	.word	0x20000ffc

080081c8 <sample_course_run>:
//sample_course_run
// 試験走行モード
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void sample_course_run(void){
 80081c8:	b580      	push	{r7, lr}
 80081ca:	b082      	sub	sp, #8
 80081cc:	af00      	add	r7, sp, #0

	int mode = 0;
 80081ce:	2300      	movs	r3, #0
 80081d0:	607b      	str	r3, [r7, #4]
	printf("Sample Course Run, Mode : %d\n", mode);
 80081d2:	6879      	ldr	r1, [r7, #4]
 80081d4:	487a      	ldr	r0, [pc, #488]	; (80083c0 <sample_course_run+0x1f8>)
 80081d6:	f006 f803 	bl	800e1e0 <iprintf>

	while(1){
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	b2db      	uxtb	r3, r3
 80081de:	f003 0301 	and.w	r3, r3, #1
 80081e2:	b2d8      	uxtb	r0, r3
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	b2db      	uxtb	r3, r3
 80081e8:	f003 0302 	and.w	r3, r3, #2
 80081ec:	b2d9      	uxtb	r1, r3
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	b2db      	uxtb	r3, r3
 80081f2:	f003 0304 	and.w	r3, r3, #4
 80081f6:	b2db      	uxtb	r3, r3
 80081f8:	461a      	mov	r2, r3
 80081fa:	f005 fa23 	bl	800d644 <led_write>
		  if(dist_r >= 20){
 80081fe:	4b71      	ldr	r3, [pc, #452]	; (80083c4 <sample_course_run+0x1fc>)
 8008200:	edd3 7a00 	vldr	s15, [r3]
 8008204:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8008208:	eef4 7ac7 	vcmpe.f32	s15, s14
 800820c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008210:	db0f      	blt.n	8008232 <sample_course_run+0x6a>
			  mode++;
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	3301      	adds	r3, #1
 8008216:	607b      	str	r3, [r7, #4]
			  dist_r = 0;
 8008218:	4b6a      	ldr	r3, [pc, #424]	; (80083c4 <sample_course_run+0x1fc>)
 800821a:	f04f 0200 	mov.w	r2, #0
 800821e:	601a      	str	r2, [r3, #0]
			  if(mode > 7){
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	2b07      	cmp	r3, #7
 8008224:	dd01      	ble.n	800822a <sample_course_run+0x62>
				  mode = 0;
 8008226:	2300      	movs	r3, #0
 8008228:	607b      	str	r3, [r7, #4]
			  }
			  printf("Mode : %d\n", mode);
 800822a:	6879      	ldr	r1, [r7, #4]
 800822c:	4866      	ldr	r0, [pc, #408]	; (80083c8 <sample_course_run+0x200>)
 800822e:	f005 ffd7 	bl	800e1e0 <iprintf>
			  //buzzer(pitagola2[mode-1][0], pitagola2[mode-1][1]);
			  //buzzer(pitagola[2][0], pitagola[2][1]);
		  }
		  if(dist_r <= -20){
 8008232:	4b64      	ldr	r3, [pc, #400]	; (80083c4 <sample_course_run+0x1fc>)
 8008234:	edd3 7a00 	vldr	s15, [r3]
 8008238:	eebb 7a04 	vmov.f32	s14, #180	; 0xc1a00000 -20.0
 800823c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008240:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008244:	d80f      	bhi.n	8008266 <sample_course_run+0x9e>
			  mode--;
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	3b01      	subs	r3, #1
 800824a:	607b      	str	r3, [r7, #4]
			  dist_r = 0;
 800824c:	4b5d      	ldr	r3, [pc, #372]	; (80083c4 <sample_course_run+0x1fc>)
 800824e:	f04f 0200 	mov.w	r2, #0
 8008252:	601a      	str	r2, [r3, #0]
			  if(mode < 0){
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	2b00      	cmp	r3, #0
 8008258:	da01      	bge.n	800825e <sample_course_run+0x96>
				  mode = 7;
 800825a:	2307      	movs	r3, #7
 800825c:	607b      	str	r3, [r7, #4]
			  }
			  printf("Mode : %d\n", mode);
 800825e:	6879      	ldr	r1, [r7, #4]
 8008260:	4859      	ldr	r0, [pc, #356]	; (80083c8 <sample_course_run+0x200>)
 8008262:	f005 ffbd 	bl	800e1e0 <iprintf>
			  //buzzer(pitagola2[mode-1][0], pitagola2[mode-1][1]);
			  //buzzer(pitagola[2][0], pitagola[2][1]);
		  }
		  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET){
 8008266:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800826a:	4858      	ldr	r0, [pc, #352]	; (80083cc <sample_course_run+0x204>)
 800826c:	f7fa f832 	bl	80022d4 <HAL_GPIO_ReadPin>
 8008270:	4603      	mov	r3, r0
 8008272:	2b00      	cmp	r3, #0
 8008274:	d1b1      	bne.n	80081da <sample_course_run+0x12>
			  HAL_Delay(50);
 8008276:	2032      	movs	r0, #50	; 0x32
 8008278:	f7f8 fed0 	bl	800101c <HAL_Delay>
			  while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET);
 800827c:	bf00      	nop
 800827e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8008282:	4852      	ldr	r0, [pc, #328]	; (80083cc <sample_course_run+0x204>)
 8008284:	f7fa f826 	bl	80022d4 <HAL_GPIO_ReadPin>
 8008288:	4603      	mov	r3, r0
 800828a:	2b00      	cmp	r3, #0
 800828c:	d0f7      	beq.n	800827e <sample_course_run+0xb6>
			  drive_ready();
 800828e:	f7fc fcf1 	bl	8004c74 <drive_ready>

			  switch(mode){
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	2b07      	cmp	r3, #7
 8008296:	d8a0      	bhi.n	80081da <sample_course_run+0x12>
 8008298:	a201      	add	r2, pc, #4	; (adr r2, 80082a0 <sample_course_run+0xd8>)
 800829a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800829e:	bf00      	nop
 80082a0:	080082c1 	.word	0x080082c1
 80082a4:	080082c7 	.word	0x080082c7
 80082a8:	080082e9 	.word	0x080082e9
 80082ac:	0800830b 	.word	0x0800830b
 80082b0:	080081db 	.word	0x080081db
 80082b4:	0800831d 	.word	0x0800831d
 80082b8:	0800836d 	.word	0x0800836d
 80082bc:	080081db 	.word	0x080081db
				case 0:
					get_base();
 80082c0:	f005 f968 	bl	800d594 <get_base>
					break;
 80082c4:	e07a      	b.n	80083bc <sample_course_run+0x1f4>

				case 1:
					//----サンプルコース1　超信地----
					half_sectionA();
 80082c6:	f7fd f88d 	bl	80053e4 <half_sectionA>
					half_sectionD();
 80082ca:	f7fd f8a5 	bl	8005418 <half_sectionD>
					rotate_R90();
 80082ce:	f7fd f9b7 	bl	8005640 <rotate_R90>
					half_sectionA();
 80082d2:	f7fd f887 	bl	80053e4 <half_sectionA>
					half_sectionD();
 80082d6:	f7fd f89f 	bl	8005418 <half_sectionD>
					rotate_R90();
 80082da:	f7fd f9b1 	bl	8005640 <rotate_R90>
					half_sectionA();
 80082de:	f7fd f881 	bl	80053e4 <half_sectionA>
					half_sectionD();
 80082e2:	f7fd f899 	bl	8005418 <half_sectionD>
					break;
 80082e6:	e069      	b.n	80083bc <sample_course_run+0x1f4>

				case 2:
					//----サンプルコース1　超信地----
					half_sectionA();
 80082e8:	f7fd f87c 	bl	80053e4 <half_sectionA>
					half_sectionD();
 80082ec:	f7fd f894 	bl	8005418 <half_sectionD>
					rotate_L90();
 80082f0:	f7fd fa72 	bl	80057d8 <rotate_L90>
					half_sectionA();
 80082f4:	f7fd f876 	bl	80053e4 <half_sectionA>
					half_sectionD();
 80082f8:	f7fd f88e 	bl	8005418 <half_sectionD>
					rotate_L90();
 80082fc:	f7fd fa6c 	bl	80057d8 <rotate_L90>
					half_sectionA();
 8008300:	f7fd f870 	bl	80053e4 <half_sectionA>
					half_sectionD();
 8008304:	f7fd f888 	bl	8005418 <half_sectionD>
					break;
 8008308:	e058      	b.n	80083bc <sample_course_run+0x1f4>

				case 3:
					//---サンプルコース2　スラローム----
					half_sectionA();
 800830a:	f7fd f86b 	bl	80053e4 <half_sectionA>
					slalom_R90();
 800830e:	f7fd fbf9 	bl	8005b04 <slalom_R90>
					slalom_R90();
 8008312:	f7fd fbf7 	bl	8005b04 <slalom_R90>
					half_sectionD();
 8008316:	f7fd f87f 	bl	8005418 <half_sectionD>
					break;
 800831a:	e04f      	b.n	80083bc <sample_course_run+0x1f4>
					goal_y = GOAL_Y;
*/					break;

				case 5:
					//----スラローム走行&全面探索スラローム走行----
					printf("Slalom Run & All Map Run.\n");
 800831c:	482c      	ldr	r0, [pc, #176]	; (80083d0 <sample_course_run+0x208>)
 800831e:	f005 ffd3 	bl	800e2c8 <puts>

					MF.FLAG.SCND = 0;
 8008322:	4a2c      	ldr	r2, [pc, #176]	; (80083d4 <sample_course_run+0x20c>)
 8008324:	8813      	ldrh	r3, [r2, #0]
 8008326:	f36f 1345 	bfc	r3, #5, #1
 800832a:	8013      	strh	r3, [r2, #0]
					goal_x = GOAL_X;
 800832c:	4b2a      	ldr	r3, [pc, #168]	; (80083d8 <sample_course_run+0x210>)
 800832e:	2209      	movs	r2, #9
 8008330:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 8008332:	4b2a      	ldr	r3, [pc, #168]	; (80083dc <sample_course_run+0x214>)
 8008334:	2206      	movs	r2, #6
 8008336:	701a      	strb	r2, [r3, #0]

					get_base();
 8008338:	f005 f92c 	bl	800d594 <get_base>

					searchC();
 800833c:	f002 fd9e 	bl	800ae7c <searchC>
					HAL_Delay(2000);
 8008340:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8008344:	f7f8 fe6a 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 8008348:	4b24      	ldr	r3, [pc, #144]	; (80083dc <sample_course_run+0x214>)
 800834a:	2200      	movs	r2, #0
 800834c:	701a      	strb	r2, [r3, #0]
 800834e:	4b23      	ldr	r3, [pc, #140]	; (80083dc <sample_course_run+0x214>)
 8008350:	781a      	ldrb	r2, [r3, #0]
 8008352:	4b21      	ldr	r3, [pc, #132]	; (80083d8 <sample_course_run+0x210>)
 8008354:	701a      	strb	r2, [r3, #0]
					searchE();
 8008356:	f003 f8b3 	bl	800b4c0 <searchE>

					searchC();
 800835a:	f002 fd8f 	bl	800ae7c <searchC>
					goal_x = GOAL_X;
 800835e:	4b1e      	ldr	r3, [pc, #120]	; (80083d8 <sample_course_run+0x210>)
 8008360:	2209      	movs	r2, #9
 8008362:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 8008364:	4b1d      	ldr	r3, [pc, #116]	; (80083dc <sample_course_run+0x214>)
 8008366:	2206      	movs	r2, #6
 8008368:	701a      	strb	r2, [r3, #0]

					break;
 800836a:	e027      	b.n	80083bc <sample_course_run+0x1f4>

				case 6:
					//----スラローム走行&全面探索スラローム走行----
					printf("Slalom Run & All Map Run.\n");
 800836c:	4818      	ldr	r0, [pc, #96]	; (80083d0 <sample_course_run+0x208>)
 800836e:	f005 ffab 	bl	800e2c8 <puts>

					MF.FLAG.SCND = 0;
 8008372:	4a18      	ldr	r2, [pc, #96]	; (80083d4 <sample_course_run+0x20c>)
 8008374:	8813      	ldrh	r3, [r2, #0]
 8008376:	f36f 1345 	bfc	r3, #5, #1
 800837a:	8013      	strh	r3, [r2, #0]
					goal_x = 7;
 800837c:	4b16      	ldr	r3, [pc, #88]	; (80083d8 <sample_course_run+0x210>)
 800837e:	2207      	movs	r2, #7
 8008380:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 8008382:	4b16      	ldr	r3, [pc, #88]	; (80083dc <sample_course_run+0x214>)
 8008384:	2207      	movs	r2, #7
 8008386:	701a      	strb	r2, [r3, #0]

					get_base();
 8008388:	f005 f904 	bl	800d594 <get_base>

					searchC();
 800838c:	f002 fd76 	bl	800ae7c <searchC>
					HAL_Delay(2000);
 8008390:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8008394:	f7f8 fe42 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 8008398:	4b10      	ldr	r3, [pc, #64]	; (80083dc <sample_course_run+0x214>)
 800839a:	2200      	movs	r2, #0
 800839c:	701a      	strb	r2, [r3, #0]
 800839e:	4b0f      	ldr	r3, [pc, #60]	; (80083dc <sample_course_run+0x214>)
 80083a0:	781a      	ldrb	r2, [r3, #0]
 80083a2:	4b0d      	ldr	r3, [pc, #52]	; (80083d8 <sample_course_run+0x210>)
 80083a4:	701a      	strb	r2, [r3, #0]
					searchE();
 80083a6:	f003 f88b 	bl	800b4c0 <searchE>

					searchC();
 80083aa:	f002 fd67 	bl	800ae7c <searchC>
					goal_x = 7;
 80083ae:	4b0a      	ldr	r3, [pc, #40]	; (80083d8 <sample_course_run+0x210>)
 80083b0:	2207      	movs	r2, #7
 80083b2:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 80083b4:	4b09      	ldr	r3, [pc, #36]	; (80083dc <sample_course_run+0x214>)
 80083b6:	2207      	movs	r2, #7
 80083b8:	701a      	strb	r2, [r3, #0]

					break;
 80083ba:	bf00      	nop
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 80083bc:	e70d      	b.n	80081da <sample_course_run+0x12>
 80083be:	bf00      	nop
 80083c0:	0800f738 	.word	0x0800f738
 80083c4:	20000b6c 	.word	0x20000b6c
 80083c8:	0800f434 	.word	0x0800f434
 80083cc:	40020000 	.word	0x40020000
 80083d0:	0800f758 	.word	0x0800f758
 80083d4:	20000fe8 	.word	0x20000fe8
 80083d8:	20000c31 	.word	0x20000c31
 80083dc:	20000bcc 	.word	0x20000bcc

080083e0 <perfect_run>:
//perfect_run
// 本番用走行モード
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void perfect_run(void){
 80083e0:	b580      	push	{r7, lr}
 80083e2:	b082      	sub	sp, #8
 80083e4:	af00      	add	r7, sp, #0

	int mode = 0;
 80083e6:	2300      	movs	r3, #0
 80083e8:	607b      	str	r3, [r7, #4]
	printf("Perfect Run, Mode : %d\n", mode);
 80083ea:	6879      	ldr	r1, [r7, #4]
 80083ec:	4892      	ldr	r0, [pc, #584]	; (8008638 <perfect_run+0x258>)
 80083ee:	f005 fef7 	bl	800e1e0 <iprintf>

	while(1){
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	b2db      	uxtb	r3, r3
 80083f6:	f003 0301 	and.w	r3, r3, #1
 80083fa:	b2d8      	uxtb	r0, r3
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	b2db      	uxtb	r3, r3
 8008400:	f003 0302 	and.w	r3, r3, #2
 8008404:	b2d9      	uxtb	r1, r3
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	b2db      	uxtb	r3, r3
 800840a:	f003 0304 	and.w	r3, r3, #4
 800840e:	b2db      	uxtb	r3, r3
 8008410:	461a      	mov	r2, r3
 8008412:	f005 f917 	bl	800d644 <led_write>
		  if(dist_r >= 20){
 8008416:	4b89      	ldr	r3, [pc, #548]	; (800863c <perfect_run+0x25c>)
 8008418:	edd3 7a00 	vldr	s15, [r3]
 800841c:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8008420:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008424:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008428:	db0f      	blt.n	800844a <perfect_run+0x6a>
			  mode++;
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	3301      	adds	r3, #1
 800842e:	607b      	str	r3, [r7, #4]
			  dist_r = 0;
 8008430:	4b82      	ldr	r3, [pc, #520]	; (800863c <perfect_run+0x25c>)
 8008432:	f04f 0200 	mov.w	r2, #0
 8008436:	601a      	str	r2, [r3, #0]
			  if(mode > 7){
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	2b07      	cmp	r3, #7
 800843c:	dd01      	ble.n	8008442 <perfect_run+0x62>
				  mode = 0;
 800843e:	2300      	movs	r3, #0
 8008440:	607b      	str	r3, [r7, #4]
			  }
			  printf("Mode : %d\n", mode);
 8008442:	6879      	ldr	r1, [r7, #4]
 8008444:	487e      	ldr	r0, [pc, #504]	; (8008640 <perfect_run+0x260>)
 8008446:	f005 fecb 	bl	800e1e0 <iprintf>
			  //buzzer(pitagola2[mode-1][0], pitagola2[mode-1][1]);
			  //buzzer(pitagola[2][0], pitagola[2][1]);
		  }
		  if(dist_r <= -20){
 800844a:	4b7c      	ldr	r3, [pc, #496]	; (800863c <perfect_run+0x25c>)
 800844c:	edd3 7a00 	vldr	s15, [r3]
 8008450:	eebb 7a04 	vmov.f32	s14, #180	; 0xc1a00000 -20.0
 8008454:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008458:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800845c:	d80f      	bhi.n	800847e <perfect_run+0x9e>
			  mode--;
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	3b01      	subs	r3, #1
 8008462:	607b      	str	r3, [r7, #4]
			  dist_r = 0;
 8008464:	4b75      	ldr	r3, [pc, #468]	; (800863c <perfect_run+0x25c>)
 8008466:	f04f 0200 	mov.w	r2, #0
 800846a:	601a      	str	r2, [r3, #0]
			  if(mode < 0){
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	2b00      	cmp	r3, #0
 8008470:	da01      	bge.n	8008476 <perfect_run+0x96>
				  mode = 7;
 8008472:	2307      	movs	r3, #7
 8008474:	607b      	str	r3, [r7, #4]
			  }
			  printf("Mode : %d\n", mode);
 8008476:	6879      	ldr	r1, [r7, #4]
 8008478:	4871      	ldr	r0, [pc, #452]	; (8008640 <perfect_run+0x260>)
 800847a:	f005 feb1 	bl	800e1e0 <iprintf>
			  //buzzer(pitagola2[mode-1][0], pitagola2[mode-1][1]);
			  //buzzer(pitagola[2][0], pitagola[2][1]);
		  }
		  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET){
 800847e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8008482:	4870      	ldr	r0, [pc, #448]	; (8008644 <perfect_run+0x264>)
 8008484:	f7f9 ff26 	bl	80022d4 <HAL_GPIO_ReadPin>
 8008488:	4603      	mov	r3, r0
 800848a:	2b00      	cmp	r3, #0
 800848c:	d1b1      	bne.n	80083f2 <perfect_run+0x12>
			  HAL_Delay(50);
 800848e:	2032      	movs	r0, #50	; 0x32
 8008490:	f7f8 fdc4 	bl	800101c <HAL_Delay>
			  while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET);
 8008494:	bf00      	nop
 8008496:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800849a:	486a      	ldr	r0, [pc, #424]	; (8008644 <perfect_run+0x264>)
 800849c:	f7f9 ff1a 	bl	80022d4 <HAL_GPIO_ReadPin>
 80084a0:	4603      	mov	r3, r0
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d0f7      	beq.n	8008496 <perfect_run+0xb6>
			  switch(mode){
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	2b07      	cmp	r3, #7
 80084aa:	d8a2      	bhi.n	80083f2 <perfect_run+0x12>
 80084ac:	a201      	add	r2, pc, #4	; (adr r2, 80084b4 <perfect_run+0xd4>)
 80084ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084b2:	bf00      	nop
 80084b4:	080083f3 	.word	0x080083f3
 80084b8:	080084d5 	.word	0x080084d5
 80084bc:	08008521 	.word	0x08008521
 80084c0:	0800856d 	.word	0x0800856d
 80084c4:	080085b9 	.word	0x080085b9
 80084c8:	080083f3 	.word	0x080083f3
 80084cc:	080083f3 	.word	0x080083f3
 80084d0:	08008605 	.word	0x08008605
				case 0:
					break;

				case 1:
					//----一次探索連続走行----
					printf("First Run. (Continuous)\n");
 80084d4:	485c      	ldr	r0, [pc, #368]	; (8008648 <perfect_run+0x268>)
 80084d6:	f005 fef7 	bl	800e2c8 <puts>

					MF.FLAG.SCND = 0;
 80084da:	4a5c      	ldr	r2, [pc, #368]	; (800864c <perfect_run+0x26c>)
 80084dc:	8813      	ldrh	r3, [r2, #0]
 80084de:	f36f 1345 	bfc	r3, #5, #1
 80084e2:	8013      	strh	r3, [r2, #0]
					goal_x = 7;
 80084e4:	4b5a      	ldr	r3, [pc, #360]	; (8008650 <perfect_run+0x270>)
 80084e6:	2207      	movs	r2, #7
 80084e8:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 80084ea:	4b5a      	ldr	r3, [pc, #360]	; (8008654 <perfect_run+0x274>)
 80084ec:	2207      	movs	r2, #7
 80084ee:	701a      	strb	r2, [r3, #0]

					get_base();
 80084f0:	f005 f850 	bl	800d594 <get_base>

					searchB();
 80084f4:	f002 fc38 	bl	800ad68 <searchB>
					HAL_Delay(2000);
 80084f8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80084fc:	f7f8 fd8e 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 8008500:	4b54      	ldr	r3, [pc, #336]	; (8008654 <perfect_run+0x274>)
 8008502:	2200      	movs	r2, #0
 8008504:	701a      	strb	r2, [r3, #0]
 8008506:	4b53      	ldr	r3, [pc, #332]	; (8008654 <perfect_run+0x274>)
 8008508:	781a      	ldrb	r2, [r3, #0]
 800850a:	4b51      	ldr	r3, [pc, #324]	; (8008650 <perfect_run+0x270>)
 800850c:	701a      	strb	r2, [r3, #0]
					searchB();
 800850e:	f002 fc2b 	bl	800ad68 <searchB>

					goal_x = 7;
 8008512:	4b4f      	ldr	r3, [pc, #316]	; (8008650 <perfect_run+0x270>)
 8008514:	2207      	movs	r2, #7
 8008516:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 8008518:	4b4e      	ldr	r3, [pc, #312]	; (8008654 <perfect_run+0x274>)
 800851a:	2207      	movs	r2, #7
 800851c:	701a      	strb	r2, [r3, #0]

					break;
 800851e:	e089      	b.n	8008634 <perfect_run+0x254>

				case 2:
					//----二次探索走行----
					printf("Second Run. (Continuous)\n");
 8008520:	484d      	ldr	r0, [pc, #308]	; (8008658 <perfect_run+0x278>)
 8008522:	f005 fed1 	bl	800e2c8 <puts>

					MF.FLAG.SCND = 1;
 8008526:	4a49      	ldr	r2, [pc, #292]	; (800864c <perfect_run+0x26c>)
 8008528:	8813      	ldrh	r3, [r2, #0]
 800852a:	f043 0320 	orr.w	r3, r3, #32
 800852e:	8013      	strh	r3, [r2, #0]
					goal_x = 7;
 8008530:	4b47      	ldr	r3, [pc, #284]	; (8008650 <perfect_run+0x270>)
 8008532:	2207      	movs	r2, #7
 8008534:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 8008536:	4b47      	ldr	r3, [pc, #284]	; (8008654 <perfect_run+0x274>)
 8008538:	2207      	movs	r2, #7
 800853a:	701a      	strb	r2, [r3, #0]

					get_base();
 800853c:	f005 f82a 	bl	800d594 <get_base>

					searchB();
 8008540:	f002 fc12 	bl	800ad68 <searchB>
					HAL_Delay(2000);
 8008544:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8008548:	f7f8 fd68 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800854c:	4b41      	ldr	r3, [pc, #260]	; (8008654 <perfect_run+0x274>)
 800854e:	2200      	movs	r2, #0
 8008550:	701a      	strb	r2, [r3, #0]
 8008552:	4b40      	ldr	r3, [pc, #256]	; (8008654 <perfect_run+0x274>)
 8008554:	781a      	ldrb	r2, [r3, #0]
 8008556:	4b3e      	ldr	r3, [pc, #248]	; (8008650 <perfect_run+0x270>)
 8008558:	701a      	strb	r2, [r3, #0]
					searchB();
 800855a:	f002 fc05 	bl	800ad68 <searchB>

					goal_x = 7;
 800855e:	4b3c      	ldr	r3, [pc, #240]	; (8008650 <perfect_run+0x270>)
 8008560:	2207      	movs	r2, #7
 8008562:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 8008564:	4b3b      	ldr	r3, [pc, #236]	; (8008654 <perfect_run+0x274>)
 8008566:	2207      	movs	r2, #7
 8008568:	701a      	strb	r2, [r3, #0]

					break;
 800856a:	e063      	b.n	8008634 <perfect_run+0x254>

				case 3:
					//----一次探索スラローム走行----
					printf("First Run. (Slalom)\n");
 800856c:	483b      	ldr	r0, [pc, #236]	; (800865c <perfect_run+0x27c>)
 800856e:	f005 feab 	bl	800e2c8 <puts>

					MF.FLAG.SCND = 0;
 8008572:	4a36      	ldr	r2, [pc, #216]	; (800864c <perfect_run+0x26c>)
 8008574:	8813      	ldrh	r3, [r2, #0]
 8008576:	f36f 1345 	bfc	r3, #5, #1
 800857a:	8013      	strh	r3, [r2, #0]
					goal_x = 7;
 800857c:	4b34      	ldr	r3, [pc, #208]	; (8008650 <perfect_run+0x270>)
 800857e:	2207      	movs	r2, #7
 8008580:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 8008582:	4b34      	ldr	r3, [pc, #208]	; (8008654 <perfect_run+0x274>)
 8008584:	2207      	movs	r2, #7
 8008586:	701a      	strb	r2, [r3, #0]

					get_base();
 8008588:	f005 f804 	bl	800d594 <get_base>

					searchC();
 800858c:	f002 fc76 	bl	800ae7c <searchC>
					HAL_Delay(2000);
 8008590:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8008594:	f7f8 fd42 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 8008598:	4b2e      	ldr	r3, [pc, #184]	; (8008654 <perfect_run+0x274>)
 800859a:	2200      	movs	r2, #0
 800859c:	701a      	strb	r2, [r3, #0]
 800859e:	4b2d      	ldr	r3, [pc, #180]	; (8008654 <perfect_run+0x274>)
 80085a0:	781a      	ldrb	r2, [r3, #0]
 80085a2:	4b2b      	ldr	r3, [pc, #172]	; (8008650 <perfect_run+0x270>)
 80085a4:	701a      	strb	r2, [r3, #0]
					searchC();
 80085a6:	f002 fc69 	bl	800ae7c <searchC>

					goal_x = 7;
 80085aa:	4b29      	ldr	r3, [pc, #164]	; (8008650 <perfect_run+0x270>)
 80085ac:	2207      	movs	r2, #7
 80085ae:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 80085b0:	4b28      	ldr	r3, [pc, #160]	; (8008654 <perfect_run+0x274>)
 80085b2:	2207      	movs	r2, #7
 80085b4:	701a      	strb	r2, [r3, #0]

					break;
 80085b6:	e03d      	b.n	8008634 <perfect_run+0x254>

				case 4:
					//---二次探索スラローム走行----
					printf("Second Run. (Slalom)\n");
 80085b8:	4829      	ldr	r0, [pc, #164]	; (8008660 <perfect_run+0x280>)
 80085ba:	f005 fe85 	bl	800e2c8 <puts>

					MF.FLAG.SCND = 1;
 80085be:	4a23      	ldr	r2, [pc, #140]	; (800864c <perfect_run+0x26c>)
 80085c0:	8813      	ldrh	r3, [r2, #0]
 80085c2:	f043 0320 	orr.w	r3, r3, #32
 80085c6:	8013      	strh	r3, [r2, #0]
					goal_x = 7;
 80085c8:	4b21      	ldr	r3, [pc, #132]	; (8008650 <perfect_run+0x270>)
 80085ca:	2207      	movs	r2, #7
 80085cc:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 80085ce:	4b21      	ldr	r3, [pc, #132]	; (8008654 <perfect_run+0x274>)
 80085d0:	2207      	movs	r2, #7
 80085d2:	701a      	strb	r2, [r3, #0]

					get_base();
 80085d4:	f004 ffde 	bl	800d594 <get_base>

					searchC();
 80085d8:	f002 fc50 	bl	800ae7c <searchC>
					HAL_Delay(2000);
 80085dc:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80085e0:	f7f8 fd1c 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 80085e4:	4b1b      	ldr	r3, [pc, #108]	; (8008654 <perfect_run+0x274>)
 80085e6:	2200      	movs	r2, #0
 80085e8:	701a      	strb	r2, [r3, #0]
 80085ea:	4b1a      	ldr	r3, [pc, #104]	; (8008654 <perfect_run+0x274>)
 80085ec:	781a      	ldrb	r2, [r3, #0]
 80085ee:	4b18      	ldr	r3, [pc, #96]	; (8008650 <perfect_run+0x270>)
 80085f0:	701a      	strb	r2, [r3, #0]
					searchC();
 80085f2:	f002 fc43 	bl	800ae7c <searchC>

					goal_x = 7;
 80085f6:	4b16      	ldr	r3, [pc, #88]	; (8008650 <perfect_run+0x270>)
 80085f8:	2207      	movs	r2, #7
 80085fa:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 80085fc:	4b15      	ldr	r3, [pc, #84]	; (8008654 <perfect_run+0x274>)
 80085fe:	2207      	movs	r2, #7
 8008600:	701a      	strb	r2, [r3, #0]

					break;
 8008602:	e017      	b.n	8008634 <perfect_run+0x254>
					break;

				case 6:
					break;
				case 7:
			  		  for(int i=0; i<m_select; i++){
 8008604:	2300      	movs	r3, #0
 8008606:	603b      	str	r3, [r7, #0]
 8008608:	e00e      	b.n	8008628 <perfect_run+0x248>
			  			  buzzer(mario_select[i][0], mario_select[i][1]);
 800860a:	4a16      	ldr	r2, [pc, #88]	; (8008664 <perfect_run+0x284>)
 800860c:	683b      	ldr	r3, [r7, #0]
 800860e:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8008612:	4a14      	ldr	r2, [pc, #80]	; (8008664 <perfect_run+0x284>)
 8008614:	683b      	ldr	r3, [r7, #0]
 8008616:	00db      	lsls	r3, r3, #3
 8008618:	4413      	add	r3, r2
 800861a:	685b      	ldr	r3, [r3, #4]
 800861c:	4619      	mov	r1, r3
 800861e:	f002 fa95 	bl	800ab4c <buzzer>
			  		  for(int i=0; i<m_select; i++){
 8008622:	683b      	ldr	r3, [r7, #0]
 8008624:	3301      	adds	r3, #1
 8008626:	603b      	str	r3, [r7, #0]
 8008628:	683b      	ldr	r3, [r7, #0]
 800862a:	2b01      	cmp	r3, #1
 800862c:	dded      	ble.n	800860a <perfect_run+0x22a>
			  		  }
					perfect_slalom();
 800862e:	f000 f81b 	bl	8008668 <perfect_slalom>
					break;
 8008632:	bf00      	nop
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 8008634:	e6dd      	b.n	80083f2 <perfect_run+0x12>
 8008636:	bf00      	nop
 8008638:	0800f774 	.word	0x0800f774
 800863c:	20000b6c 	.word	0x20000b6c
 8008640:	0800f434 	.word	0x0800f434
 8008644:	40020000 	.word	0x40020000
 8008648:	0800f688 	.word	0x0800f688
 800864c:	20000fe8 	.word	0x20000fe8
 8008650:	20000c31 	.word	0x20000c31
 8008654:	20000bcc 	.word	0x20000bcc
 8008658:	0800f6a0 	.word	0x0800f6a0
 800865c:	0800f6d4 	.word	0x0800f6d4
 8008660:	0800f6e8 	.word	0x0800f6e8
 8008664:	20000040 	.word	0x20000040

08008668 <perfect_slalom>:
//perfect_slalom
// 本番用スラローム走行モード
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void perfect_slalom(void){
 8008668:	b580      	push	{r7, lr}
 800866a:	b086      	sub	sp, #24
 800866c:	af00      	add	r7, sp, #0

	int mode = 0;
 800866e:	2300      	movs	r3, #0
 8008670:	617b      	str	r3, [r7, #20]
	printf("Perfect Slalom, Mode : %d\n", mode);
 8008672:	6979      	ldr	r1, [r7, #20]
 8008674:	48b4      	ldr	r0, [pc, #720]	; (8008948 <perfect_slalom+0x2e0>)
 8008676:	f005 fdb3 	bl	800e1e0 <iprintf>

	while(1){
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 800867a:	697b      	ldr	r3, [r7, #20]
 800867c:	b2db      	uxtb	r3, r3
 800867e:	f003 0301 	and.w	r3, r3, #1
 8008682:	b2d8      	uxtb	r0, r3
 8008684:	697b      	ldr	r3, [r7, #20]
 8008686:	b2db      	uxtb	r3, r3
 8008688:	f003 0302 	and.w	r3, r3, #2
 800868c:	b2d9      	uxtb	r1, r3
 800868e:	697b      	ldr	r3, [r7, #20]
 8008690:	b2db      	uxtb	r3, r3
 8008692:	f003 0304 	and.w	r3, r3, #4
 8008696:	b2db      	uxtb	r3, r3
 8008698:	461a      	mov	r2, r3
 800869a:	f004 ffd3 	bl	800d644 <led_write>
		  if(dist_r >= 20){
 800869e:	4bab      	ldr	r3, [pc, #684]	; (800894c <perfect_slalom+0x2e4>)
 80086a0:	edd3 7a00 	vldr	s15, [r3]
 80086a4:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 80086a8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80086ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80086b0:	db24      	blt.n	80086fc <perfect_slalom+0x94>
			  mode++;
 80086b2:	697b      	ldr	r3, [r7, #20]
 80086b4:	3301      	adds	r3, #1
 80086b6:	617b      	str	r3, [r7, #20]
			  dist_r = 0;
 80086b8:	4ba4      	ldr	r3, [pc, #656]	; (800894c <perfect_slalom+0x2e4>)
 80086ba:	f04f 0200 	mov.w	r2, #0
 80086be:	601a      	str	r2, [r3, #0]
			  if(mode > 7){
 80086c0:	697b      	ldr	r3, [r7, #20]
 80086c2:	2b07      	cmp	r3, #7
 80086c4:	dd01      	ble.n	80086ca <perfect_slalom+0x62>
				  mode = 0;
 80086c6:	2300      	movs	r3, #0
 80086c8:	617b      	str	r3, [r7, #20]
			  }
			  printf("Mode : %d\n", mode);
 80086ca:	6979      	ldr	r1, [r7, #20]
 80086cc:	48a0      	ldr	r0, [pc, #640]	; (8008950 <perfect_slalom+0x2e8>)
 80086ce:	f005 fd87 	bl	800e1e0 <iprintf>
	  		  for(int i=0; i<m_select; i++){
 80086d2:	2300      	movs	r3, #0
 80086d4:	613b      	str	r3, [r7, #16]
 80086d6:	e00e      	b.n	80086f6 <perfect_slalom+0x8e>
	  			  buzzer(mario_select[i][0], mario_select[i][1]);
 80086d8:	4a9e      	ldr	r2, [pc, #632]	; (8008954 <perfect_slalom+0x2ec>)
 80086da:	693b      	ldr	r3, [r7, #16]
 80086dc:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80086e0:	4a9c      	ldr	r2, [pc, #624]	; (8008954 <perfect_slalom+0x2ec>)
 80086e2:	693b      	ldr	r3, [r7, #16]
 80086e4:	00db      	lsls	r3, r3, #3
 80086e6:	4413      	add	r3, r2
 80086e8:	685b      	ldr	r3, [r3, #4]
 80086ea:	4619      	mov	r1, r3
 80086ec:	f002 fa2e 	bl	800ab4c <buzzer>
	  		  for(int i=0; i<m_select; i++){
 80086f0:	693b      	ldr	r3, [r7, #16]
 80086f2:	3301      	adds	r3, #1
 80086f4:	613b      	str	r3, [r7, #16]
 80086f6:	693b      	ldr	r3, [r7, #16]
 80086f8:	2b01      	cmp	r3, #1
 80086fa:	dded      	ble.n	80086d8 <perfect_slalom+0x70>
	  		  }
		  }
		  if(dist_r <= -20){
 80086fc:	4b93      	ldr	r3, [pc, #588]	; (800894c <perfect_slalom+0x2e4>)
 80086fe:	edd3 7a00 	vldr	s15, [r3]
 8008702:	eebb 7a04 	vmov.f32	s14, #180	; 0xc1a00000 -20.0
 8008706:	eef4 7ac7 	vcmpe.f32	s15, s14
 800870a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800870e:	d824      	bhi.n	800875a <perfect_slalom+0xf2>
			  mode--;
 8008710:	697b      	ldr	r3, [r7, #20]
 8008712:	3b01      	subs	r3, #1
 8008714:	617b      	str	r3, [r7, #20]
			  dist_r = 0;
 8008716:	4b8d      	ldr	r3, [pc, #564]	; (800894c <perfect_slalom+0x2e4>)
 8008718:	f04f 0200 	mov.w	r2, #0
 800871c:	601a      	str	r2, [r3, #0]
			  if(mode < 0){
 800871e:	697b      	ldr	r3, [r7, #20]
 8008720:	2b00      	cmp	r3, #0
 8008722:	da01      	bge.n	8008728 <perfect_slalom+0xc0>
				  mode = 7;
 8008724:	2307      	movs	r3, #7
 8008726:	617b      	str	r3, [r7, #20]
			  }
			  printf("Mode : %d\n", mode);
 8008728:	6979      	ldr	r1, [r7, #20]
 800872a:	4889      	ldr	r0, [pc, #548]	; (8008950 <perfect_slalom+0x2e8>)
 800872c:	f005 fd58 	bl	800e1e0 <iprintf>
	  		  for(int i=0; i<m_select; i++){
 8008730:	2300      	movs	r3, #0
 8008732:	60fb      	str	r3, [r7, #12]
 8008734:	e00e      	b.n	8008754 <perfect_slalom+0xec>
	  			  buzzer(mario_select[i][0], mario_select[i][1]);
 8008736:	4a87      	ldr	r2, [pc, #540]	; (8008954 <perfect_slalom+0x2ec>)
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800873e:	4a85      	ldr	r2, [pc, #532]	; (8008954 <perfect_slalom+0x2ec>)
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	00db      	lsls	r3, r3, #3
 8008744:	4413      	add	r3, r2
 8008746:	685b      	ldr	r3, [r3, #4]
 8008748:	4619      	mov	r1, r3
 800874a:	f002 f9ff 	bl	800ab4c <buzzer>
	  		  for(int i=0; i<m_select; i++){
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	3301      	adds	r3, #1
 8008752:	60fb      	str	r3, [r7, #12]
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	2b01      	cmp	r3, #1
 8008758:	dded      	ble.n	8008736 <perfect_slalom+0xce>
	  		  }
		  }
		  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET){
 800875a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800875e:	487e      	ldr	r0, [pc, #504]	; (8008958 <perfect_slalom+0x2f0>)
 8008760:	f7f9 fdb8 	bl	80022d4 <HAL_GPIO_ReadPin>
 8008764:	4603      	mov	r3, r0
 8008766:	2b00      	cmp	r3, #0
 8008768:	d187      	bne.n	800867a <perfect_slalom+0x12>
			  HAL_Delay(50);
 800876a:	2032      	movs	r0, #50	; 0x32
 800876c:	f7f8 fc56 	bl	800101c <HAL_Delay>
			  while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET);
 8008770:	bf00      	nop
 8008772:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8008776:	4878      	ldr	r0, [pc, #480]	; (8008958 <perfect_slalom+0x2f0>)
 8008778:	f7f9 fdac 	bl	80022d4 <HAL_GPIO_ReadPin>
 800877c:	4603      	mov	r3, r0
 800877e:	2b00      	cmp	r3, #0
 8008780:	d0f7      	beq.n	8008772 <perfect_slalom+0x10a>
			  for(int i=0; i<m_ok; i++){
 8008782:	2300      	movs	r3, #0
 8008784:	60bb      	str	r3, [r7, #8]
 8008786:	e00e      	b.n	80087a6 <perfect_slalom+0x13e>
	  			  buzzer(mario_ok[i][0], mario_ok[i][1]);
 8008788:	4a74      	ldr	r2, [pc, #464]	; (800895c <perfect_slalom+0x2f4>)
 800878a:	68bb      	ldr	r3, [r7, #8]
 800878c:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8008790:	4a72      	ldr	r2, [pc, #456]	; (800895c <perfect_slalom+0x2f4>)
 8008792:	68bb      	ldr	r3, [r7, #8]
 8008794:	00db      	lsls	r3, r3, #3
 8008796:	4413      	add	r3, r2
 8008798:	685b      	ldr	r3, [r3, #4]
 800879a:	4619      	mov	r1, r3
 800879c:	f002 f9d6 	bl	800ab4c <buzzer>
			  for(int i=0; i<m_ok; i++){
 80087a0:	68bb      	ldr	r3, [r7, #8]
 80087a2:	3301      	adds	r3, #1
 80087a4:	60bb      	str	r3, [r7, #8]
 80087a6:	68bb      	ldr	r3, [r7, #8]
 80087a8:	2b06      	cmp	r3, #6
 80087aa:	dded      	ble.n	8008788 <perfect_slalom+0x120>
	  		  }

			  drive_ready();
 80087ac:	f7fc fa62 	bl	8004c74 <drive_ready>
	  		  for(int i=0; i<m_start; i++){
 80087b0:	2300      	movs	r3, #0
 80087b2:	607b      	str	r3, [r7, #4]
 80087b4:	e011      	b.n	80087da <perfect_slalom+0x172>
	  			  buzzer(mario_start[i][0], mario_start[i][1]);
 80087b6:	4a6a      	ldr	r2, [pc, #424]	; (8008960 <perfect_slalom+0x2f8>)
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80087be:	4a68      	ldr	r2, [pc, #416]	; (8008960 <perfect_slalom+0x2f8>)
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	00db      	lsls	r3, r3, #3
 80087c4:	4413      	add	r3, r2
 80087c6:	685b      	ldr	r3, [r3, #4]
 80087c8:	4619      	mov	r1, r3
 80087ca:	f002 f9bf 	bl	800ab4c <buzzer>
	  			  full_led_write(1);
 80087ce:	2001      	movs	r0, #1
 80087d0:	f004 ff72 	bl	800d6b8 <full_led_write>
	  		  for(int i=0; i<m_start; i++){
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	3301      	adds	r3, #1
 80087d8:	607b      	str	r3, [r7, #4]
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	2b06      	cmp	r3, #6
 80087de:	ddea      	ble.n	80087b6 <perfect_slalom+0x14e>
	  		  }

			  switch(mode){
 80087e0:	697b      	ldr	r3, [r7, #20]
 80087e2:	2b07      	cmp	r3, #7
 80087e4:	f63f af49 	bhi.w	800867a <perfect_slalom+0x12>
 80087e8:	a201      	add	r2, pc, #4	; (adr r2, 80087f0 <perfect_slalom+0x188>)
 80087ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087ee:	bf00      	nop
 80087f0:	0800867b 	.word	0x0800867b
 80087f4:	08008811 	.word	0x08008811
 80087f8:	08008867 	.word	0x08008867
 80087fc:	080088d7 	.word	0x080088d7
 8008800:	08008985 	.word	0x08008985
 8008804:	080089f5 	.word	0x080089f5
 8008808:	08008a55 	.word	0x08008a55
 800880c:	08008ac5 	.word	0x08008ac5
				case 0:
					break;

				case 1:
					//----一次探索スラローム走行----
					printf("First Run.\n");
 8008810:	4854      	ldr	r0, [pc, #336]	; (8008964 <perfect_slalom+0x2fc>)
 8008812:	f005 fd59 	bl	800e2c8 <puts>
					MF.FLAG.SCND = 0;
 8008816:	4a54      	ldr	r2, [pc, #336]	; (8008968 <perfect_slalom+0x300>)
 8008818:	8813      	ldrh	r3, [r2, #0]
 800881a:	f36f 1345 	bfc	r3, #5, #1
 800881e:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 0;
 8008820:	4a51      	ldr	r2, [pc, #324]	; (8008968 <perfect_slalom+0x300>)
 8008822:	8813      	ldrh	r3, [r2, #0]
 8008824:	f36f 2349 	bfc	r3, #9, #1
 8008828:	8013      	strh	r3, [r2, #0]

					goal_x = 7;
 800882a:	4b50      	ldr	r3, [pc, #320]	; (800896c <perfect_slalom+0x304>)
 800882c:	2207      	movs	r2, #7
 800882e:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 8008830:	4b4f      	ldr	r3, [pc, #316]	; (8008970 <perfect_slalom+0x308>)
 8008832:	2207      	movs	r2, #7
 8008834:	701a      	strb	r2, [r3, #0]

					get_base();
 8008836:	f004 fead 	bl	800d594 <get_base>

					searchC();
 800883a:	f002 fb1f 	bl	800ae7c <searchC>
					HAL_Delay(2000);
 800883e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8008842:	f7f8 fbeb 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 8008846:	4b4a      	ldr	r3, [pc, #296]	; (8008970 <perfect_slalom+0x308>)
 8008848:	2200      	movs	r2, #0
 800884a:	701a      	strb	r2, [r3, #0]
 800884c:	4b48      	ldr	r3, [pc, #288]	; (8008970 <perfect_slalom+0x308>)
 800884e:	781a      	ldrb	r2, [r3, #0]
 8008850:	4b46      	ldr	r3, [pc, #280]	; (800896c <perfect_slalom+0x304>)
 8008852:	701a      	strb	r2, [r3, #0]
					searchC();
 8008854:	f002 fb12 	bl	800ae7c <searchC>

					goal_x = 7;
 8008858:	4b44      	ldr	r3, [pc, #272]	; (800896c <perfect_slalom+0x304>)
 800885a:	2207      	movs	r2, #7
 800885c:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800885e:	4b44      	ldr	r3, [pc, #272]	; (8008970 <perfect_slalom+0x308>)
 8008860:	2207      	movs	r2, #7
 8008862:	701a      	strb	r2, [r3, #0]
					break;
 8008864:	e166      	b.n	8008b34 <perfect_slalom+0x4cc>

				case 2:
					//----二次走行スラローム+既知区間加速走行 speed1----
					printf("First Run. (Continuous)\n");
 8008866:	4843      	ldr	r0, [pc, #268]	; (8008974 <perfect_slalom+0x30c>)
 8008868:	f005 fd2e 	bl	800e2c8 <puts>
					MF.FLAG.SCND = 1;
 800886c:	4a3e      	ldr	r2, [pc, #248]	; (8008968 <perfect_slalom+0x300>)
 800886e:	8813      	ldrh	r3, [r2, #0]
 8008870:	f043 0320 	orr.w	r3, r3, #32
 8008874:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 8008876:	4a3c      	ldr	r2, [pc, #240]	; (8008968 <perfect_slalom+0x300>)
 8008878:	8813      	ldrh	r3, [r2, #0]
 800887a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800887e:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 8008880:	4a39      	ldr	r2, [pc, #228]	; (8008968 <perfect_slalom+0x300>)
 8008882:	8813      	ldrh	r3, [r2, #0]
 8008884:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008888:	8013      	strh	r3, [r2, #0]

					accel_hs = 3000;
 800888a:	4b3b      	ldr	r3, [pc, #236]	; (8008978 <perfect_slalom+0x310>)
 800888c:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8008890:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 600;
 8008892:	4b3a      	ldr	r3, [pc, #232]	; (800897c <perfect_slalom+0x314>)
 8008894:	f44f 7216 	mov.w	r2, #600	; 0x258
 8008898:	801a      	strh	r2, [r3, #0]
					goal_x = 7;
 800889a:	4b34      	ldr	r3, [pc, #208]	; (800896c <perfect_slalom+0x304>)
 800889c:	2207      	movs	r2, #7
 800889e:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 80088a0:	4b33      	ldr	r3, [pc, #204]	; (8008970 <perfect_slalom+0x308>)
 80088a2:	2207      	movs	r2, #7
 80088a4:	701a      	strb	r2, [r3, #0]

					get_base();
 80088a6:	f004 fe75 	bl	800d594 <get_base>

					searchD();
 80088aa:	f002 fc39 	bl	800b120 <searchD>
					HAL_Delay(2000);
 80088ae:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80088b2:	f7f8 fbb3 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 80088b6:	4b2e      	ldr	r3, [pc, #184]	; (8008970 <perfect_slalom+0x308>)
 80088b8:	2200      	movs	r2, #0
 80088ba:	701a      	strb	r2, [r3, #0]
 80088bc:	4b2c      	ldr	r3, [pc, #176]	; (8008970 <perfect_slalom+0x308>)
 80088be:	781a      	ldrb	r2, [r3, #0]
 80088c0:	4b2a      	ldr	r3, [pc, #168]	; (800896c <perfect_slalom+0x304>)
 80088c2:	701a      	strb	r2, [r3, #0]
					searchD();
 80088c4:	f002 fc2c 	bl	800b120 <searchD>

					goal_x = 7;
 80088c8:	4b28      	ldr	r3, [pc, #160]	; (800896c <perfect_slalom+0x304>)
 80088ca:	2207      	movs	r2, #7
 80088cc:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 80088ce:	4b28      	ldr	r3, [pc, #160]	; (8008970 <perfect_slalom+0x308>)
 80088d0:	2207      	movs	r2, #7
 80088d2:	701a      	strb	r2, [r3, #0]
					break;
 80088d4:	e12e      	b.n	8008b34 <perfect_slalom+0x4cc>

				case 3:
					//----二次探索スラローム+既知区間加速走行 speed2----
					printf("Second Run. (Continuous)\n");
 80088d6:	482a      	ldr	r0, [pc, #168]	; (8008980 <perfect_slalom+0x318>)
 80088d8:	f005 fcf6 	bl	800e2c8 <puts>
					MF.FLAG.SCND = 1;
 80088dc:	4a22      	ldr	r2, [pc, #136]	; (8008968 <perfect_slalom+0x300>)
 80088de:	8813      	ldrh	r3, [r2, #0]
 80088e0:	f043 0320 	orr.w	r3, r3, #32
 80088e4:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 80088e6:	4a20      	ldr	r2, [pc, #128]	; (8008968 <perfect_slalom+0x300>)
 80088e8:	8813      	ldrh	r3, [r2, #0]
 80088ea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80088ee:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 80088f0:	4a1d      	ldr	r2, [pc, #116]	; (8008968 <perfect_slalom+0x300>)
 80088f2:	8813      	ldrh	r3, [r2, #0]
 80088f4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80088f8:	8013      	strh	r3, [r2, #0]

					accel_hs = 3000;
 80088fa:	4b1f      	ldr	r3, [pc, #124]	; (8008978 <perfect_slalom+0x310>)
 80088fc:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8008900:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1000;
 8008902:	4b1e      	ldr	r3, [pc, #120]	; (800897c <perfect_slalom+0x314>)
 8008904:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008908:	801a      	strh	r2, [r3, #0]
					goal_x = 7;
 800890a:	4b18      	ldr	r3, [pc, #96]	; (800896c <perfect_slalom+0x304>)
 800890c:	2207      	movs	r2, #7
 800890e:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 8008910:	4b17      	ldr	r3, [pc, #92]	; (8008970 <perfect_slalom+0x308>)
 8008912:	2207      	movs	r2, #7
 8008914:	701a      	strb	r2, [r3, #0]

					get_base();
 8008916:	f004 fe3d 	bl	800d594 <get_base>

					searchD();
 800891a:	f002 fc01 	bl	800b120 <searchD>
					HAL_Delay(2000);
 800891e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8008922:	f7f8 fb7b 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 8008926:	4b12      	ldr	r3, [pc, #72]	; (8008970 <perfect_slalom+0x308>)
 8008928:	2200      	movs	r2, #0
 800892a:	701a      	strb	r2, [r3, #0]
 800892c:	4b10      	ldr	r3, [pc, #64]	; (8008970 <perfect_slalom+0x308>)
 800892e:	781a      	ldrb	r2, [r3, #0]
 8008930:	4b0e      	ldr	r3, [pc, #56]	; (800896c <perfect_slalom+0x304>)
 8008932:	701a      	strb	r2, [r3, #0]
					searchD();
 8008934:	f002 fbf4 	bl	800b120 <searchD>

					goal_x = 7;
 8008938:	4b0c      	ldr	r3, [pc, #48]	; (800896c <perfect_slalom+0x304>)
 800893a:	2207      	movs	r2, #7
 800893c:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800893e:	4b0c      	ldr	r3, [pc, #48]	; (8008970 <perfect_slalom+0x308>)
 8008940:	2207      	movs	r2, #7
 8008942:	701a      	strb	r2, [r3, #0]
					break;
 8008944:	e0f6      	b.n	8008b34 <perfect_slalom+0x4cc>
 8008946:	bf00      	nop
 8008948:	0800f78c 	.word	0x0800f78c
 800894c:	20000b6c 	.word	0x20000b6c
 8008950:	0800f434 	.word	0x0800f434
 8008954:	20000040 	.word	0x20000040
 8008958:	40020000 	.word	0x40020000
 800895c:	20000050 	.word	0x20000050
 8008960:	20000008 	.word	0x20000008
 8008964:	0800f67c 	.word	0x0800f67c
 8008968:	20000fe8 	.word	0x20000fe8
 800896c:	20000c31 	.word	0x20000c31
 8008970:	20000bcc 	.word	0x20000bcc
 8008974:	0800f688 	.word	0x0800f688
 8008978:	200004d4 	.word	0x200004d4
 800897c:	20000ffc 	.word	0x20000ffc
 8008980:	0800f6a0 	.word	0x0800f6a0

				case 4:
					//----二次探索スラローム+既知区間加速走行 speed3----
					printf("First Run. (Slalom)\n");
 8008984:	486c      	ldr	r0, [pc, #432]	; (8008b38 <perfect_slalom+0x4d0>)
 8008986:	f005 fc9f 	bl	800e2c8 <puts>
					MF.FLAG.SCND = 1;
 800898a:	4a6c      	ldr	r2, [pc, #432]	; (8008b3c <perfect_slalom+0x4d4>)
 800898c:	8813      	ldrh	r3, [r2, #0]
 800898e:	f043 0320 	orr.w	r3, r3, #32
 8008992:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 8008994:	4a69      	ldr	r2, [pc, #420]	; (8008b3c <perfect_slalom+0x4d4>)
 8008996:	8813      	ldrh	r3, [r2, #0]
 8008998:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800899c:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800899e:	4a67      	ldr	r2, [pc, #412]	; (8008b3c <perfect_slalom+0x4d4>)
 80089a0:	8813      	ldrh	r3, [r2, #0]
 80089a2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80089a6:	8013      	strh	r3, [r2, #0]

					accel_hs = 3000;
 80089a8:	4b65      	ldr	r3, [pc, #404]	; (8008b40 <perfect_slalom+0x4d8>)
 80089aa:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80089ae:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1200;
 80089b0:	4b64      	ldr	r3, [pc, #400]	; (8008b44 <perfect_slalom+0x4dc>)
 80089b2:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 80089b6:	801a      	strh	r2, [r3, #0]
					goal_x = 7;
 80089b8:	4b63      	ldr	r3, [pc, #396]	; (8008b48 <perfect_slalom+0x4e0>)
 80089ba:	2207      	movs	r2, #7
 80089bc:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 80089be:	4b63      	ldr	r3, [pc, #396]	; (8008b4c <perfect_slalom+0x4e4>)
 80089c0:	2207      	movs	r2, #7
 80089c2:	701a      	strb	r2, [r3, #0]

					get_base();
 80089c4:	f004 fde6 	bl	800d594 <get_base>

					searchD();
 80089c8:	f002 fbaa 	bl	800b120 <searchD>
					HAL_Delay(2000);
 80089cc:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80089d0:	f7f8 fb24 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 80089d4:	4b5d      	ldr	r3, [pc, #372]	; (8008b4c <perfect_slalom+0x4e4>)
 80089d6:	2200      	movs	r2, #0
 80089d8:	701a      	strb	r2, [r3, #0]
 80089da:	4b5c      	ldr	r3, [pc, #368]	; (8008b4c <perfect_slalom+0x4e4>)
 80089dc:	781a      	ldrb	r2, [r3, #0]
 80089de:	4b5a      	ldr	r3, [pc, #360]	; (8008b48 <perfect_slalom+0x4e0>)
 80089e0:	701a      	strb	r2, [r3, #0]
					searchD();
 80089e2:	f002 fb9d 	bl	800b120 <searchD>

					goal_x = 7;
 80089e6:	4b58      	ldr	r3, [pc, #352]	; (8008b48 <perfect_slalom+0x4e0>)
 80089e8:	2207      	movs	r2, #7
 80089ea:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 80089ec:	4b57      	ldr	r3, [pc, #348]	; (8008b4c <perfect_slalom+0x4e4>)
 80089ee:	2207      	movs	r2, #7
 80089f0:	701a      	strb	r2, [r3, #0]
					break;
 80089f2:	e09f      	b.n	8008b34 <perfect_slalom+0x4cc>

				case 5:
					//----二次探索スラロームHigh Speed----
					printf("Second Run. (Slalom)\n");
 80089f4:	4856      	ldr	r0, [pc, #344]	; (8008b50 <perfect_slalom+0x4e8>)
 80089f6:	f005 fc67 	bl	800e2c8 <puts>
					MF.FLAG.SCND = 1;
 80089fa:	4a50      	ldr	r2, [pc, #320]	; (8008b3c <perfect_slalom+0x4d4>)
 80089fc:	8813      	ldrh	r3, [r2, #0]
 80089fe:	f043 0320 	orr.w	r3, r3, #32
 8008a02:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 0;
 8008a04:	4a4d      	ldr	r2, [pc, #308]	; (8008b3c <perfect_slalom+0x4d4>)
 8008a06:	8813      	ldrh	r3, [r2, #0]
 8008a08:	f36f 2349 	bfc	r3, #9, #1
 8008a0c:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 8008a0e:	4a4b      	ldr	r2, [pc, #300]	; (8008b3c <perfect_slalom+0x4d4>)
 8008a10:	8813      	ldrh	r3, [r2, #0]
 8008a12:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008a16:	8013      	strh	r3, [r2, #0]

					goal_x = 7;
 8008a18:	4b4b      	ldr	r3, [pc, #300]	; (8008b48 <perfect_slalom+0x4e0>)
 8008a1a:	2207      	movs	r2, #7
 8008a1c:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 8008a1e:	4b4b      	ldr	r3, [pc, #300]	; (8008b4c <perfect_slalom+0x4e4>)
 8008a20:	2207      	movs	r2, #7
 8008a22:	701a      	strb	r2, [r3, #0]

					get_base();
 8008a24:	f004 fdb6 	bl	800d594 <get_base>

					searchC2();
 8008a28:	f002 fad4 	bl	800afd4 <searchC2>
					HAL_Delay(2000);
 8008a2c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8008a30:	f7f8 faf4 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 8008a34:	4b45      	ldr	r3, [pc, #276]	; (8008b4c <perfect_slalom+0x4e4>)
 8008a36:	2200      	movs	r2, #0
 8008a38:	701a      	strb	r2, [r3, #0]
 8008a3a:	4b44      	ldr	r3, [pc, #272]	; (8008b4c <perfect_slalom+0x4e4>)
 8008a3c:	781a      	ldrb	r2, [r3, #0]
 8008a3e:	4b42      	ldr	r3, [pc, #264]	; (8008b48 <perfect_slalom+0x4e0>)
 8008a40:	701a      	strb	r2, [r3, #0]
					searchC2();
 8008a42:	f002 fac7 	bl	800afd4 <searchC2>

					goal_x = 7;
 8008a46:	4b40      	ldr	r3, [pc, #256]	; (8008b48 <perfect_slalom+0x4e0>)
 8008a48:	2207      	movs	r2, #7
 8008a4a:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 8008a4c:	4b3f      	ldr	r3, [pc, #252]	; (8008b4c <perfect_slalom+0x4e4>)
 8008a4e:	2207      	movs	r2, #7
 8008a50:	701a      	strb	r2, [r3, #0]
					break;
 8008a52:	e06f      	b.n	8008b34 <perfect_slalom+0x4cc>

				case 6:
					//----二次探索スラロームHigh Speed----
					printf("Second Run. (Slalom)\n");
 8008a54:	483e      	ldr	r0, [pc, #248]	; (8008b50 <perfect_slalom+0x4e8>)
 8008a56:	f005 fc37 	bl	800e2c8 <puts>
					MF.FLAG.SCND = 1;
 8008a5a:	4a38      	ldr	r2, [pc, #224]	; (8008b3c <perfect_slalom+0x4d4>)
 8008a5c:	8813      	ldrh	r3, [r2, #0]
 8008a5e:	f043 0320 	orr.w	r3, r3, #32
 8008a62:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 8008a64:	4a35      	ldr	r2, [pc, #212]	; (8008b3c <perfect_slalom+0x4d4>)
 8008a66:	8813      	ldrh	r3, [r2, #0]
 8008a68:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008a6c:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 8008a6e:	4a33      	ldr	r2, [pc, #204]	; (8008b3c <perfect_slalom+0x4d4>)
 8008a70:	8813      	ldrh	r3, [r2, #0]
 8008a72:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008a76:	8013      	strh	r3, [r2, #0]

					accel_hs = 3000;
 8008a78:	4b31      	ldr	r3, [pc, #196]	; (8008b40 <perfect_slalom+0x4d8>)
 8008a7a:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8008a7e:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1200;
 8008a80:	4b30      	ldr	r3, [pc, #192]	; (8008b44 <perfect_slalom+0x4dc>)
 8008a82:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8008a86:	801a      	strh	r2, [r3, #0]
					goal_x = 7;
 8008a88:	4b2f      	ldr	r3, [pc, #188]	; (8008b48 <perfect_slalom+0x4e0>)
 8008a8a:	2207      	movs	r2, #7
 8008a8c:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 8008a8e:	4b2f      	ldr	r3, [pc, #188]	; (8008b4c <perfect_slalom+0x4e4>)
 8008a90:	2207      	movs	r2, #7
 8008a92:	701a      	strb	r2, [r3, #0]

					get_base();
 8008a94:	f004 fd7e 	bl	800d594 <get_base>

					searchD2();
 8008a98:	f002 fc2a 	bl	800b2f0 <searchD2>
					HAL_Delay(2000);
 8008a9c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8008aa0:	f7f8 fabc 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 8008aa4:	4b29      	ldr	r3, [pc, #164]	; (8008b4c <perfect_slalom+0x4e4>)
 8008aa6:	2200      	movs	r2, #0
 8008aa8:	701a      	strb	r2, [r3, #0]
 8008aaa:	4b28      	ldr	r3, [pc, #160]	; (8008b4c <perfect_slalom+0x4e4>)
 8008aac:	781a      	ldrb	r2, [r3, #0]
 8008aae:	4b26      	ldr	r3, [pc, #152]	; (8008b48 <perfect_slalom+0x4e0>)
 8008ab0:	701a      	strb	r2, [r3, #0]
					searchD2();
 8008ab2:	f002 fc1d 	bl	800b2f0 <searchD2>

					goal_x = 7;
 8008ab6:	4b24      	ldr	r3, [pc, #144]	; (8008b48 <perfect_slalom+0x4e0>)
 8008ab8:	2207      	movs	r2, #7
 8008aba:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 8008abc:	4b23      	ldr	r3, [pc, #140]	; (8008b4c <perfect_slalom+0x4e4>)
 8008abe:	2207      	movs	r2, #7
 8008ac0:	701a      	strb	r2, [r3, #0]
					break;
 8008ac2:	e037      	b.n	8008b34 <perfect_slalom+0x4cc>

				case 7:
					//----二次探索スラロームHigh Speed + 既知区間加速----
					printf("Second Run. (Slalom)\n");
 8008ac4:	4822      	ldr	r0, [pc, #136]	; (8008b50 <perfect_slalom+0x4e8>)
 8008ac6:	f005 fbff 	bl	800e2c8 <puts>
					MF.FLAG.SCND = 1;
 8008aca:	4a1c      	ldr	r2, [pc, #112]	; (8008b3c <perfect_slalom+0x4d4>)
 8008acc:	8813      	ldrh	r3, [r2, #0]
 8008ace:	f043 0320 	orr.w	r3, r3, #32
 8008ad2:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 8008ad4:	4a19      	ldr	r2, [pc, #100]	; (8008b3c <perfect_slalom+0x4d4>)
 8008ad6:	8813      	ldrh	r3, [r2, #0]
 8008ad8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008adc:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 8008ade:	4a17      	ldr	r2, [pc, #92]	; (8008b3c <perfect_slalom+0x4d4>)
 8008ae0:	8813      	ldrh	r3, [r2, #0]
 8008ae2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008ae6:	8013      	strh	r3, [r2, #0]

					accel_hs = 3000;
 8008ae8:	4b15      	ldr	r3, [pc, #84]	; (8008b40 <perfect_slalom+0x4d8>)
 8008aea:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8008aee:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1600;
 8008af0:	4b14      	ldr	r3, [pc, #80]	; (8008b44 <perfect_slalom+0x4dc>)
 8008af2:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8008af6:	801a      	strh	r2, [r3, #0]
					goal_x = 7;
 8008af8:	4b13      	ldr	r3, [pc, #76]	; (8008b48 <perfect_slalom+0x4e0>)
 8008afa:	2207      	movs	r2, #7
 8008afc:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 8008afe:	4b13      	ldr	r3, [pc, #76]	; (8008b4c <perfect_slalom+0x4e4>)
 8008b00:	2207      	movs	r2, #7
 8008b02:	701a      	strb	r2, [r3, #0]

					get_base();
 8008b04:	f004 fd46 	bl	800d594 <get_base>

					searchD2();
 8008b08:	f002 fbf2 	bl	800b2f0 <searchD2>
					HAL_Delay(2000);
 8008b0c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8008b10:	f7f8 fa84 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 8008b14:	4b0d      	ldr	r3, [pc, #52]	; (8008b4c <perfect_slalom+0x4e4>)
 8008b16:	2200      	movs	r2, #0
 8008b18:	701a      	strb	r2, [r3, #0]
 8008b1a:	4b0c      	ldr	r3, [pc, #48]	; (8008b4c <perfect_slalom+0x4e4>)
 8008b1c:	781a      	ldrb	r2, [r3, #0]
 8008b1e:	4b0a      	ldr	r3, [pc, #40]	; (8008b48 <perfect_slalom+0x4e0>)
 8008b20:	701a      	strb	r2, [r3, #0]
					searchD2();
 8008b22:	f002 fbe5 	bl	800b2f0 <searchD2>

					goal_x = 7;
 8008b26:	4b08      	ldr	r3, [pc, #32]	; (8008b48 <perfect_slalom+0x4e0>)
 8008b28:	2207      	movs	r2, #7
 8008b2a:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 8008b2c:	4b07      	ldr	r3, [pc, #28]	; (8008b4c <perfect_slalom+0x4e4>)
 8008b2e:	2207      	movs	r2, #7
 8008b30:	701a      	strb	r2, [r3, #0]
					break;
 8008b32:	bf00      	nop
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 8008b34:	e5a1      	b.n	800867a <perfect_slalom+0x12>
 8008b36:	bf00      	nop
 8008b38:	0800f6d4 	.word	0x0800f6d4
 8008b3c:	20000fe8 	.word	0x20000fe8
 8008b40:	200004d4 	.word	0x200004d4
 8008b44:	20000ffc 	.word	0x20000ffc
 8008b48:	20000c31 	.word	0x20000c31
 8008b4c:	20000bcc 	.word	0x20000bcc
 8008b50:	0800f6e8 	.word	0x0800f6e8

08008b54 <eeprom_enable_write>:
//eeprom_enable_write
// eepromとして使うflashメモリ領域をeraseし，書き込みを有効にする
// 引数：なし
// 戻り値：問題が起こらなければHAL_OKを返す
//+++++++++++++++++++++++++++++++++++++++++++++++
HAL_StatusTypeDef eeprom_enable_write(void){
 8008b54:	b580      	push	{r7, lr}
 8008b56:	b088      	sub	sp, #32
 8008b58:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status;
  FLASH_EraseInitTypeDef EraseInitStruct;
  uint32_t PageError = 0;
 8008b5a:	2300      	movs	r3, #0
 8008b5c:	607b      	str	r3, [r7, #4]
  EraseInitStruct.TypeErase = FLASH_TYPEERASE_SECTORS;
 8008b5e:	2300      	movs	r3, #0
 8008b60:	60bb      	str	r3, [r7, #8]
  //EraseInitStruct.Banks = FLASH_BANK_1;
  //EraseInitStruct.Sector = EEPROM_START_ADDRESS;
  EraseInitStruct.Sector = FLASH_SECTOR_11;
 8008b62:	230b      	movs	r3, #11
 8008b64:	613b      	str	r3, [r7, #16]
  EraseInitStruct.NbSectors = 1;
 8008b66:	2301      	movs	r3, #1
 8008b68:	617b      	str	r3, [r7, #20]
  EraseInitStruct.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 8008b6a:	2302      	movs	r3, #2
 8008b6c:	61bb      	str	r3, [r7, #24]

  status = HAL_FLASH_Unlock();
 8008b6e:	f7f8 ff97 	bl	8001aa0 <HAL_FLASH_Unlock>
 8008b72:	4603      	mov	r3, r0
 8008b74:	77fb      	strb	r3, [r7, #31]
  if(status != HAL_OK) return status;
 8008b76:	7ffb      	ldrb	r3, [r7, #31]
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d001      	beq.n	8008b80 <eeprom_enable_write+0x2c>
 8008b7c:	7ffb      	ldrb	r3, [r7, #31]
 8008b7e:	e009      	b.n	8008b94 <eeprom_enable_write+0x40>
  status = HAL_FLASHEx_Erase(&EraseInitStruct, &PageError);
 8008b80:	1d3a      	adds	r2, r7, #4
 8008b82:	f107 0308 	add.w	r3, r7, #8
 8008b86:	4611      	mov	r1, r2
 8008b88:	4618      	mov	r0, r3
 8008b8a:	f7f9 f8e7 	bl	8001d5c <HAL_FLASHEx_Erase>
 8008b8e:	4603      	mov	r3, r0
 8008b90:	77fb      	strb	r3, [r7, #31]
  return status;
 8008b92:	7ffb      	ldrb	r3, [r7, #31]
}
 8008b94:	4618      	mov	r0, r3
 8008b96:	3720      	adds	r7, #32
 8008b98:	46bd      	mov	sp, r7
 8008b9a:	bd80      	pop	{r7, pc}

08008b9c <eeprom_disable_write>:
//eeprom_disable_write
// eepromとして使うflashメモリ領域への書き込みを無効にする
// 引数：なし
// 戻り値：問題が起こらなければHAL_OKを返す
//+++++++++++++++++++++++++++++++++++++++++++++++
HAL_StatusTypeDef eeprom_disable_write(void){
 8008b9c:	b580      	push	{r7, lr}
 8008b9e:	af00      	add	r7, sp, #0
  return HAL_FLASH_Lock();
 8008ba0:	f7f8 ffa0 	bl	8001ae4 <HAL_FLASH_Lock>
 8008ba4:	4603      	mov	r3, r0
}
 8008ba6:	4618      	mov	r0, r3
 8008ba8:	bd80      	pop	{r7, pc}

08008baa <eeprom_write_halfword>:
//eeprom_write_halfword
// eepromとして使うflashメモリ領域へ2バイトの値を書き込む
// 引数：address …… eepromとして使うflashメモリ領域の先頭アドレスからのオフセット，data …… 書き込みたいuin16_t型データ
// 戻り値：問題が起こらなければHAL_OKを返す
//+++++++++++++++++++++++++++++++++++++++++++++++
HAL_StatusTypeDef eeprom_write_halfword(uint32_t address, uint16_t data){
 8008baa:	b590      	push	{r4, r7, lr}
 8008bac:	b085      	sub	sp, #20
 8008bae:	af00      	add	r7, sp, #0
 8008bb0:	6078      	str	r0, [r7, #4]
 8008bb2:	460b      	mov	r3, r1
 8008bb4:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status;
  address = address*2 + EEPROM_START_ADDRESS;
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	f103 6380 	add.w	r3, r3, #67108864	; 0x4000000
 8008bbc:	f503 23e0 	add.w	r3, r3, #458752	; 0x70000
 8008bc0:	005b      	lsls	r3, r3, #1
 8008bc2:	607b      	str	r3, [r7, #4]
  status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, address, data);
 8008bc4:	887b      	ldrh	r3, [r7, #2]
 8008bc6:	f04f 0400 	mov.w	r4, #0
 8008bca:	461a      	mov	r2, r3
 8008bcc:	4623      	mov	r3, r4
 8008bce:	6879      	ldr	r1, [r7, #4]
 8008bd0:	2001      	movs	r0, #1
 8008bd2:	f7f8 ff11 	bl	80019f8 <HAL_FLASH_Program>
 8008bd6:	4603      	mov	r3, r0
 8008bd8:	73fb      	strb	r3, [r7, #15]
  return status;
 8008bda:	7bfb      	ldrb	r3, [r7, #15]
}
 8008bdc:	4618      	mov	r0, r3
 8008bde:	3714      	adds	r7, #20
 8008be0:	46bd      	mov	sp, r7
 8008be2:	bd90      	pop	{r4, r7, pc}

08008be4 <eeprom_read_halfword>:
//eeprom_read_halfword
// eepromとして使うflashメモリ領域から2バイトの値を読み込む
// 引数：address …… eepromとして使うflashメモリ領域の先頭アドレスからのオフセット
// 戻り値：読み込んだuin16_t型データ
//+++++++++++++++++++++++++++++++++++++++++++++++
uint16_t eeprom_read_halfword(uint32_t address){
 8008be4:	b480      	push	{r7}
 8008be6:	b085      	sub	sp, #20
 8008be8:	af00      	add	r7, sp, #0
 8008bea:	6078      	str	r0, [r7, #4]
  uint16_t val = 0;
 8008bec:	2300      	movs	r3, #0
 8008bee:	81fb      	strh	r3, [r7, #14]
  address = address*2 + EEPROM_START_ADDRESS;
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	f103 6380 	add.w	r3, r3, #67108864	; 0x4000000
 8008bf6:	f503 23e0 	add.w	r3, r3, #458752	; 0x70000
 8008bfa:	005b      	lsls	r3, r3, #1
 8008bfc:	607b      	str	r3, [r7, #4]
  val = *(__IO uint16_t *)address;
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	881b      	ldrh	r3, [r3, #0]
 8008c02:	81fb      	strh	r3, [r7, #14]
  return val;
 8008c04:	89fb      	ldrh	r3, [r7, #14]
}
 8008c06:	4618      	mov	r0, r3
 8008c08:	3714      	adds	r7, #20
 8008c0a:	46bd      	mov	sp, r7
 8008c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c10:	4770      	bx	lr
	...

08008c14 <gyro_init>:
#include "global.h"

SPI_HandleTypeDef hspi3;


void gyro_init(void){
 8008c14:	b580      	push	{r7, lr}
 8008c16:	b082      	sub	sp, #8
 8008c18:	af00      	add	r7, sp, #0
  uint8_t who_am_i;

  HAL_Delay(100); 					// wait start up
 8008c1a:	2064      	movs	r0, #100	; 0x64
 8008c1c:	f7f8 f9fe 	bl	800101c <HAL_Delay>
  who_am_i = read_byte(WHO_AM_I); 	// 1. read who am i
 8008c20:	2075      	movs	r0, #117	; 0x75
 8008c22:	f000 f82f 	bl	8008c84 <read_byte>
 8008c26:	4603      	mov	r3, r0
 8008c28:	71fb      	strb	r3, [r7, #7]
  printf("0x%x\r\n",who_am_i); 		// 2. check who am i value
 8008c2a:	79fb      	ldrb	r3, [r7, #7]
 8008c2c:	4619      	mov	r1, r3
 8008c2e:	4813      	ldr	r0, [pc, #76]	; (8008c7c <gyro_init+0x68>)
 8008c30:	f005 fad6 	bl	800e1e0 <iprintf>

  // 2. error check
  if (who_am_i != 0x98){
 8008c34:	79fb      	ldrb	r3, [r7, #7]
 8008c36:	2b98      	cmp	r3, #152	; 0x98
 8008c38:	d003      	beq.n	8008c42 <gyro_init+0x2e>
    while(1){
      printf("gyro_error\r");
 8008c3a:	4811      	ldr	r0, [pc, #68]	; (8008c80 <gyro_init+0x6c>)
 8008c3c:	f005 fad0 	bl	800e1e0 <iprintf>
 8008c40:	e7fb      	b.n	8008c3a <gyro_init+0x26>
    }
  }

  HAL_Delay(50); // wait
 8008c42:	2032      	movs	r0, #50	; 0x32
 8008c44:	f7f8 f9ea 	bl	800101c <HAL_Delay>
  write_byte(PWR_MGMT_1, 0x00); 	// 3. set pwr_might
 8008c48:	2100      	movs	r1, #0
 8008c4a:	206b      	movs	r0, #107	; 0x6b
 8008c4c:	f000 f846 	bl	8008cdc <write_byte>

  HAL_Delay(50);
 8008c50:	2032      	movs	r0, #50	; 0x32
 8008c52:	f7f8 f9e3 	bl	800101c <HAL_Delay>
  write_byte(CONFIG, 0x00); 		// 4. set config
 8008c56:	2100      	movs	r1, #0
 8008c58:	201a      	movs	r0, #26
 8008c5a:	f000 f83f 	bl	8008cdc <write_byte>

  HAL_Delay(50);
 8008c5e:	2032      	movs	r0, #50	; 0x32
 8008c60:	f7f8 f9dc 	bl	800101c <HAL_Delay>
  write_byte(GYRO_CONFIG, 0x18); 	// 5. set gyro config
 8008c64:	2118      	movs	r1, #24
 8008c66:	201b      	movs	r0, #27
 8008c68:	f000 f838 	bl	8008cdc <write_byte>

  HAL_Delay(50);
 8008c6c:	2032      	movs	r0, #50	; 0x32
 8008c6e:	f7f8 f9d5 	bl	800101c <HAL_Delay>
}
 8008c72:	bf00      	nop
 8008c74:	3708      	adds	r7, #8
 8008c76:	46bd      	mov	sp, r7
 8008c78:	bd80      	pop	{r7, pc}
 8008c7a:	bf00      	nop
 8008c7c:	0800f7a8 	.word	0x0800f7a8
 8008c80:	0800f7b0 	.word	0x0800f7b0

08008c84 <read_byte>:


uint8_t read_byte(uint8_t reg){
 8008c84:	b580      	push	{r7, lr}
 8008c86:	b084      	sub	sp, #16
 8008c88:	af00      	add	r7, sp, #0
 8008c8a:	4603      	mov	r3, r0
 8008c8c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret,val;
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET ); 	//cs = Low;
 8008c8e:	2200      	movs	r2, #0
 8008c90:	2104      	movs	r1, #4
 8008c92:	4810      	ldr	r0, [pc, #64]	; (8008cd4 <read_byte+0x50>)
 8008c94:	f7f9 fb36 	bl	8002304 <HAL_GPIO_WritePin>
  ret = reg | 0x80;  // MSB = 1
 8008c98:	79fb      	ldrb	r3, [r7, #7]
 8008c9a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008c9e:	b2db      	uxtb	r3, r3
 8008ca0:	73fb      	strb	r3, [r7, #15]
  HAL_SPI_Transmit(&hspi3, &ret,1,100); 					// sent 1byte(address)
 8008ca2:	f107 010f 	add.w	r1, r7, #15
 8008ca6:	2364      	movs	r3, #100	; 0x64
 8008ca8:	2201      	movs	r2, #1
 8008caa:	480b      	ldr	r0, [pc, #44]	; (8008cd8 <read_byte+0x54>)
 8008cac:	f7f9 ffb2 	bl	8002c14 <HAL_SPI_Transmit>
  HAL_SPI_Receive(&hspi3,&val,1,100); 						// read 1byte(read data)
 8008cb0:	f107 010e 	add.w	r1, r7, #14
 8008cb4:	2364      	movs	r3, #100	; 0x64
 8008cb6:	2201      	movs	r2, #1
 8008cb8:	4807      	ldr	r0, [pc, #28]	; (8008cd8 <read_byte+0x54>)
 8008cba:	f7fa f8df 	bl	8002e7c <HAL_SPI_Receive>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_SET );  	//cs = High;
 8008cbe:	2201      	movs	r2, #1
 8008cc0:	2104      	movs	r1, #4
 8008cc2:	4804      	ldr	r0, [pc, #16]	; (8008cd4 <read_byte+0x50>)
 8008cc4:	f7f9 fb1e 	bl	8002304 <HAL_GPIO_WritePin>
  return val;
 8008cc8:	7bbb      	ldrb	r3, [r7, #14]
}
 8008cca:	4618      	mov	r0, r3
 8008ccc:	3710      	adds	r7, #16
 8008cce:	46bd      	mov	sp, r7
 8008cd0:	bd80      	pop	{r7, pc}
 8008cd2:	bf00      	nop
 8008cd4:	40020c00 	.word	0x40020c00
 8008cd8:	200001c4 	.word	0x200001c4

08008cdc <write_byte>:


void write_byte(uint8_t reg, uint8_t val){
 8008cdc:	b580      	push	{r7, lr}
 8008cde:	b084      	sub	sp, #16
 8008ce0:	af00      	add	r7, sp, #0
 8008ce2:	4603      	mov	r3, r0
 8008ce4:	460a      	mov	r2, r1
 8008ce6:	71fb      	strb	r3, [r7, #7]
 8008ce8:	4613      	mov	r3, r2
 8008cea:	71bb      	strb	r3, [r7, #6]
  uint8_t ret;
  ret = reg & 0x7F ; // MSB = 0
 8008cec:	79fb      	ldrb	r3, [r7, #7]
 8008cee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008cf2:	b2db      	uxtb	r3, r3
 8008cf4:	73fb      	strb	r3, [r7, #15]
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET); 	// cs = Low;
 8008cf6:	2200      	movs	r2, #0
 8008cf8:	2104      	movs	r1, #4
 8008cfa:	480c      	ldr	r0, [pc, #48]	; (8008d2c <write_byte+0x50>)
 8008cfc:	f7f9 fb02 	bl	8002304 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi3, &ret,1,100); 					// sent 1byte(address)
 8008d00:	f107 010f 	add.w	r1, r7, #15
 8008d04:	2364      	movs	r3, #100	; 0x64
 8008d06:	2201      	movs	r2, #1
 8008d08:	4809      	ldr	r0, [pc, #36]	; (8008d30 <write_byte+0x54>)
 8008d0a:	f7f9 ff83 	bl	8002c14 <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi3, &val,1,100); 					// read 1byte(write data)
 8008d0e:	1db9      	adds	r1, r7, #6
 8008d10:	2364      	movs	r3, #100	; 0x64
 8008d12:	2201      	movs	r2, #1
 8008d14:	4806      	ldr	r0, [pc, #24]	; (8008d30 <write_byte+0x54>)
 8008d16:	f7f9 ff7d 	bl	8002c14 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_SET); 		// cs = High;
 8008d1a:	2201      	movs	r2, #1
 8008d1c:	2104      	movs	r1, #4
 8008d1e:	4803      	ldr	r0, [pc, #12]	; (8008d2c <write_byte+0x50>)
 8008d20:	f7f9 faf0 	bl	8002304 <HAL_GPIO_WritePin>
}
 8008d24:	bf00      	nop
 8008d26:	3710      	adds	r7, #16
 8008d28:	46bd      	mov	sp, r7
 8008d2a:	bd80      	pop	{r7, pc}
 8008d2c:	40020c00 	.word	0x40020c00
 8008d30:	200001c4 	.word	0x200001c4

08008d34 <accel_read_x>:


float accel_read_x(void){
 8008d34:	b590      	push	{r4, r7, lr}
 8008d36:	b083      	sub	sp, #12
 8008d38:	af00      	add	r7, sp, #0
  int16_t accel_x;
  float accel;

  // H:8bit shift, Link h and l
  accel_x = (int16_t)((int16_t)(read_byte(ACCEL_XOUT_H) << 8) | read_byte(ACCEL_XOUT_L));
 8008d3a:	203b      	movs	r0, #59	; 0x3b
 8008d3c:	f7ff ffa2 	bl	8008c84 <read_byte>
 8008d40:	4603      	mov	r3, r0
 8008d42:	021b      	lsls	r3, r3, #8
 8008d44:	b21c      	sxth	r4, r3
 8008d46:	203c      	movs	r0, #60	; 0x3c
 8008d48:	f7ff ff9c 	bl	8008c84 <read_byte>
 8008d4c:	4603      	mov	r3, r0
 8008d4e:	b21b      	sxth	r3, r3
 8008d50:	4323      	orrs	r3, r4
 8008d52:	80fb      	strh	r3, [r7, #6]

  accel = (float)(accel_x / ACCEL_FACTOR); // dps to accel
 8008d54:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	da01      	bge.n	8008d60 <accel_read_x+0x2c>
 8008d5c:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 8008d60:	12db      	asrs	r3, r3, #11
 8008d62:	b21b      	sxth	r3, r3
 8008d64:	ee07 3a90 	vmov	s15, r3
 8008d68:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008d6c:	edc7 7a00 	vstr	s15, [r7]
  return accel;
 8008d70:	683b      	ldr	r3, [r7, #0]
 8008d72:	ee07 3a90 	vmov	s15, r3
}
 8008d76:	eeb0 0a67 	vmov.f32	s0, s15
 8008d7a:	370c      	adds	r7, #12
 8008d7c:	46bd      	mov	sp, r7
 8008d7e:	bd90      	pop	{r4, r7, pc}

08008d80 <accel_read_y>:


float accel_read_y(void){
 8008d80:	b590      	push	{r4, r7, lr}
 8008d82:	b083      	sub	sp, #12
 8008d84:	af00      	add	r7, sp, #0
  int16_t accel_y;
  float accel;

  // H:8bit shift, Link h and l
  accel_y = (int16_t)((int16_t)(read_byte(ACCEL_YOUT_H) << 8) | read_byte(ACCEL_YOUT_L));
 8008d86:	203d      	movs	r0, #61	; 0x3d
 8008d88:	f7ff ff7c 	bl	8008c84 <read_byte>
 8008d8c:	4603      	mov	r3, r0
 8008d8e:	021b      	lsls	r3, r3, #8
 8008d90:	b21c      	sxth	r4, r3
 8008d92:	203e      	movs	r0, #62	; 0x3e
 8008d94:	f7ff ff76 	bl	8008c84 <read_byte>
 8008d98:	4603      	mov	r3, r0
 8008d9a:	b21b      	sxth	r3, r3
 8008d9c:	4323      	orrs	r3, r4
 8008d9e:	80fb      	strh	r3, [r7, #6]

  accel = (float)(accel_y / ACCEL_FACTOR); // dps to accel
 8008da0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	da01      	bge.n	8008dac <accel_read_y+0x2c>
 8008da8:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 8008dac:	12db      	asrs	r3, r3, #11
 8008dae:	b21b      	sxth	r3, r3
 8008db0:	ee07 3a90 	vmov	s15, r3
 8008db4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008db8:	edc7 7a00 	vstr	s15, [r7]
  return accel;
 8008dbc:	683b      	ldr	r3, [r7, #0]
 8008dbe:	ee07 3a90 	vmov	s15, r3
}
 8008dc2:	eeb0 0a67 	vmov.f32	s0, s15
 8008dc6:	370c      	adds	r7, #12
 8008dc8:	46bd      	mov	sp, r7
 8008dca:	bd90      	pop	{r4, r7, pc}

08008dcc <accel_read_z>:


float accel_read_z(void){
 8008dcc:	b590      	push	{r4, r7, lr}
 8008dce:	b083      	sub	sp, #12
 8008dd0:	af00      	add	r7, sp, #0
  int16_t accel_z;
  float accel;

  // H:8bit shift, Link h and l
  accel_z = (int16_t)((int16_t)(read_byte(ACCEL_ZOUT_H) << 8) | read_byte(ACCEL_ZOUT_L));
 8008dd2:	203f      	movs	r0, #63	; 0x3f
 8008dd4:	f7ff ff56 	bl	8008c84 <read_byte>
 8008dd8:	4603      	mov	r3, r0
 8008dda:	021b      	lsls	r3, r3, #8
 8008ddc:	b21c      	sxth	r4, r3
 8008dde:	2040      	movs	r0, #64	; 0x40
 8008de0:	f7ff ff50 	bl	8008c84 <read_byte>
 8008de4:	4603      	mov	r3, r0
 8008de6:	b21b      	sxth	r3, r3
 8008de8:	4323      	orrs	r3, r4
 8008dea:	80fb      	strh	r3, [r7, #6]

  accel = (float)(accel_z / ACCEL_FACTOR-7); // dps to accel
 8008dec:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	da01      	bge.n	8008df8 <accel_read_z+0x2c>
 8008df4:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 8008df8:	12db      	asrs	r3, r3, #11
 8008dfa:	b21b      	sxth	r3, r3
 8008dfc:	3b07      	subs	r3, #7
 8008dfe:	ee07 3a90 	vmov	s15, r3
 8008e02:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008e06:	edc7 7a00 	vstr	s15, [r7]
  return accel;
 8008e0a:	683b      	ldr	r3, [r7, #0]
 8008e0c:	ee07 3a90 	vmov	s15, r3
}
 8008e10:	eeb0 0a67 	vmov.f32	s0, s15
 8008e14:	370c      	adds	r7, #12
 8008e16:	46bd      	mov	sp, r7
 8008e18:	bd90      	pop	{r4, r7, pc}
 8008e1a:	0000      	movs	r0, r0
 8008e1c:	0000      	movs	r0, r0
	...

08008e20 <gyro_read_x>:


float gyro_read_x(void){
 8008e20:	b590      	push	{r4, r7, lr}
 8008e22:	b083      	sub	sp, #12
 8008e24:	af00      	add	r7, sp, #0
  int16_t gyro_x;
  float omega;

  // H:8bit shift, Link h and l
  gyro_x = (int16_t)((int16_t)(read_byte(GYRO_XOUT_H) << 8) | read_byte(GYRO_XOUT_L));
 8008e26:	2043      	movs	r0, #67	; 0x43
 8008e28:	f7ff ff2c 	bl	8008c84 <read_byte>
 8008e2c:	4603      	mov	r3, r0
 8008e2e:	021b      	lsls	r3, r3, #8
 8008e30:	b21c      	sxth	r4, r3
 8008e32:	2044      	movs	r0, #68	; 0x44
 8008e34:	f7ff ff26 	bl	8008c84 <read_byte>
 8008e38:	4603      	mov	r3, r0
 8008e3a:	b21b      	sxth	r3, r3
 8008e3c:	4323      	orrs	r3, r4
 8008e3e:	80fb      	strh	r3, [r7, #6]

  omega = (float)(gyro_x / GYRO_FACTOR+1.4); // dps to deg/sec
 8008e40:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008e44:	4618      	mov	r0, r3
 8008e46:	f7f7 fb65 	bl	8000514 <__aeabi_i2d>
 8008e4a:	a30f      	add	r3, pc, #60	; (adr r3, 8008e88 <gyro_read_x+0x68>)
 8008e4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e50:	f7f7 fcf4 	bl	800083c <__aeabi_ddiv>
 8008e54:	4603      	mov	r3, r0
 8008e56:	460c      	mov	r4, r1
 8008e58:	4618      	mov	r0, r3
 8008e5a:	4621      	mov	r1, r4
 8008e5c:	a30c      	add	r3, pc, #48	; (adr r3, 8008e90 <gyro_read_x+0x70>)
 8008e5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e62:	f7f7 fa0b 	bl	800027c <__adddf3>
 8008e66:	4603      	mov	r3, r0
 8008e68:	460c      	mov	r4, r1
 8008e6a:	4618      	mov	r0, r3
 8008e6c:	4621      	mov	r1, r4
 8008e6e:	f7f7 fe93 	bl	8000b98 <__aeabi_d2f>
 8008e72:	4603      	mov	r3, r0
 8008e74:	603b      	str	r3, [r7, #0]
  return omega;
 8008e76:	683b      	ldr	r3, [r7, #0]
 8008e78:	ee07 3a90 	vmov	s15, r3
}
 8008e7c:	eeb0 0a67 	vmov.f32	s0, s15
 8008e80:	370c      	adds	r7, #12
 8008e82:	46bd      	mov	sp, r7
 8008e84:	bd90      	pop	{r4, r7, pc}
 8008e86:	bf00      	nop
 8008e88:	66666666 	.word	0x66666666
 8008e8c:	40306666 	.word	0x40306666
 8008e90:	66666666 	.word	0x66666666
 8008e94:	3ff66666 	.word	0x3ff66666

08008e98 <gyro_read_y>:


float gyro_read_y(void){
 8008e98:	b590      	push	{r4, r7, lr}
 8008e9a:	b083      	sub	sp, #12
 8008e9c:	af00      	add	r7, sp, #0
  int16_t gyro_y;
  float omega;

  // H:8bit shift, Link h and l
  gyro_y = (int16_t)((int16_t)(read_byte(GYRO_YOUT_H) << 8) | read_byte(GYRO_YOUT_L));
 8008e9e:	2045      	movs	r0, #69	; 0x45
 8008ea0:	f7ff fef0 	bl	8008c84 <read_byte>
 8008ea4:	4603      	mov	r3, r0
 8008ea6:	021b      	lsls	r3, r3, #8
 8008ea8:	b21c      	sxth	r4, r3
 8008eaa:	2046      	movs	r0, #70	; 0x46
 8008eac:	f7ff feea 	bl	8008c84 <read_byte>
 8008eb0:	4603      	mov	r3, r0
 8008eb2:	b21b      	sxth	r3, r3
 8008eb4:	4323      	orrs	r3, r4
 8008eb6:	80fb      	strh	r3, [r7, #6]

  omega = (float)(gyro_y / GYRO_FACTOR-0.75); // dps to deg/sec
 8008eb8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008ebc:	4618      	mov	r0, r3
 8008ebe:	f7f7 fb29 	bl	8000514 <__aeabi_i2d>
 8008ec2:	a310      	add	r3, pc, #64	; (adr r3, 8008f04 <gyro_read_y+0x6c>)
 8008ec4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ec8:	f7f7 fcb8 	bl	800083c <__aeabi_ddiv>
 8008ecc:	4603      	mov	r3, r0
 8008ece:	460c      	mov	r4, r1
 8008ed0:	4618      	mov	r0, r3
 8008ed2:	4621      	mov	r1, r4
 8008ed4:	f04f 0200 	mov.w	r2, #0
 8008ed8:	4b09      	ldr	r3, [pc, #36]	; (8008f00 <gyro_read_y+0x68>)
 8008eda:	f7f7 f9cd 	bl	8000278 <__aeabi_dsub>
 8008ede:	4603      	mov	r3, r0
 8008ee0:	460c      	mov	r4, r1
 8008ee2:	4618      	mov	r0, r3
 8008ee4:	4621      	mov	r1, r4
 8008ee6:	f7f7 fe57 	bl	8000b98 <__aeabi_d2f>
 8008eea:	4603      	mov	r3, r0
 8008eec:	603b      	str	r3, [r7, #0]
  return omega;
 8008eee:	683b      	ldr	r3, [r7, #0]
 8008ef0:	ee07 3a90 	vmov	s15, r3
}
 8008ef4:	eeb0 0a67 	vmov.f32	s0, s15
 8008ef8:	370c      	adds	r7, #12
 8008efa:	46bd      	mov	sp, r7
 8008efc:	bd90      	pop	{r4, r7, pc}
 8008efe:	bf00      	nop
 8008f00:	3fe80000 	.word	0x3fe80000
 8008f04:	66666666 	.word	0x66666666
 8008f08:	40306666 	.word	0x40306666
 8008f0c:	00000000 	.word	0x00000000

08008f10 <gyro_read_z>:


float gyro_read_z(void){
 8008f10:	b5b0      	push	{r4, r5, r7, lr}
 8008f12:	b082      	sub	sp, #8
 8008f14:	af00      	add	r7, sp, #0
  int16_t gyro_z;
  float omega;

  // H:8bit shift, Link h and l
  gyro_z = (int16_t)((int16_t)(read_byte(GYRO_ZOUT_H) << 8) | read_byte(GYRO_ZOUT_L));
 8008f16:	2047      	movs	r0, #71	; 0x47
 8008f18:	f7ff feb4 	bl	8008c84 <read_byte>
 8008f1c:	4603      	mov	r3, r0
 8008f1e:	021b      	lsls	r3, r3, #8
 8008f20:	b21c      	sxth	r4, r3
 8008f22:	2048      	movs	r0, #72	; 0x48
 8008f24:	f7ff feae 	bl	8008c84 <read_byte>
 8008f28:	4603      	mov	r3, r0
 8008f2a:	b21b      	sxth	r3, r3
 8008f2c:	4323      	orrs	r3, r4
 8008f2e:	80fb      	strh	r3, [r7, #6]

//  omega = (float)(gyro_z / GYRO_FACTOR+1.15); // dps to deg/sec
  omega = (float)(gyro_z / GYRO_FACTOR-gyro_drift_value); // dps to deg/sec
 8008f30:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008f34:	4618      	mov	r0, r3
 8008f36:	f7f7 faed 	bl	8000514 <__aeabi_i2d>
 8008f3a:	a314      	add	r3, pc, #80	; (adr r3, 8008f8c <gyro_read_z+0x7c>)
 8008f3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f40:	f7f7 fc7c 	bl	800083c <__aeabi_ddiv>
 8008f44:	4603      	mov	r3, r0
 8008f46:	460c      	mov	r4, r1
 8008f48:	4625      	mov	r5, r4
 8008f4a:	461c      	mov	r4, r3
 8008f4c:	4b0e      	ldr	r3, [pc, #56]	; (8008f88 <gyro_read_z+0x78>)
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	4618      	mov	r0, r3
 8008f52:	f7f7 faf1 	bl	8000538 <__aeabi_f2d>
 8008f56:	4602      	mov	r2, r0
 8008f58:	460b      	mov	r3, r1
 8008f5a:	4620      	mov	r0, r4
 8008f5c:	4629      	mov	r1, r5
 8008f5e:	f7f7 f98b 	bl	8000278 <__aeabi_dsub>
 8008f62:	4603      	mov	r3, r0
 8008f64:	460c      	mov	r4, r1
 8008f66:	4618      	mov	r0, r3
 8008f68:	4621      	mov	r1, r4
 8008f6a:	f7f7 fe15 	bl	8000b98 <__aeabi_d2f>
 8008f6e:	4603      	mov	r3, r0
 8008f70:	603b      	str	r3, [r7, #0]
  return omega;
 8008f72:	683b      	ldr	r3, [r7, #0]
 8008f74:	ee07 3a90 	vmov	s15, r3
}
 8008f78:	eeb0 0a67 	vmov.f32	s0, s15
 8008f7c:	3708      	adds	r7, #8
 8008f7e:	46bd      	mov	sp, r7
 8008f80:	bdb0      	pop	{r4, r5, r7, pc}
 8008f82:	bf00      	nop
 8008f84:	f3af 8000 	nop.w
 8008f88:	20000c74 	.word	0x20000c74
 8008f8c:	66666666 	.word	0x66666666
 8008f90:	40306666 	.word	0x40306666

08008f94 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int __io_putchar(int c) {
 8008f94:	b580      	push	{r7, lr}
 8008f96:	b084      	sub	sp, #16
 8008f98:	af00      	add	r7, sp, #0
 8008f9a:	6078      	str	r0, [r7, #4]
  if( c == '\n' ) {
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	2b0a      	cmp	r3, #10
 8008fa0:	d108      	bne.n	8008fb4 <__io_putchar+0x20>
    int _c = '\r';
 8008fa2:	230d      	movs	r3, #13
 8008fa4:	60fb      	str	r3, [r7, #12]
    HAL_UART_Transmit(&huart1, &_c, 1, 1);
 8008fa6:	f107 010c 	add.w	r1, r7, #12
 8008faa:	2301      	movs	r3, #1
 8008fac:	2201      	movs	r2, #1
 8008fae:	4807      	ldr	r0, [pc, #28]	; (8008fcc <__io_putchar+0x38>)
 8008fb0:	f7fb fb67 	bl	8004682 <HAL_UART_Transmit>
  }
  HAL_UART_Transmit(&huart1, &c, 1, 1);
 8008fb4:	1d39      	adds	r1, r7, #4
 8008fb6:	2301      	movs	r3, #1
 8008fb8:	2201      	movs	r2, #1
 8008fba:	4804      	ldr	r0, [pc, #16]	; (8008fcc <__io_putchar+0x38>)
 8008fbc:	f7fb fb61 	bl	8004682 <HAL_UART_Transmit>
  return 0;
 8008fc0:	2300      	movs	r3, #0
}
 8008fc2:	4618      	mov	r0, r3
 8008fc4:	3710      	adds	r7, #16
 8008fc6:	46bd      	mov	sp, r7
 8008fc8:	bd80      	pop	{r7, pc}
 8008fca:	bf00      	nop
 8008fcc:	20000be4 	.word	0x20000be4

08008fd0 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008fd0:	b5b0      	push	{r4, r5, r7, lr}
 8008fd2:	ed2d 8b02 	vpush	{d8}
 8008fd6:	b08c      	sub	sp, #48	; 0x30
 8008fd8:	af00      	add	r7, sp, #0
 8008fda:	6078      	str	r0, [r7, #4]
	TIM_OC_InitTypeDef ConfigOC;
	ConfigOC.OCMode = TIM_OCMODE_PWM1;
 8008fdc:	2360      	movs	r3, #96	; 0x60
 8008fde:	60fb      	str	r3, [r7, #12]
	ConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8008fe0:	2300      	movs	r3, #0
 8008fe2:	617b      	str	r3, [r7, #20]
	ConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8008fe4:	2300      	movs	r3, #0
 8008fe6:	61fb      	str	r3, [r7, #28]

	if(htim == &htim6){
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	4ab5      	ldr	r2, [pc, #724]	; (80092c0 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8008fec:	4293      	cmp	r3, r2
 8008fee:	f041 806a 	bne.w	800a0c6 <HAL_TIM_PeriodElapsedCallback+0x10f6>
		cnt_l = TIM4 -> CNT;
 8008ff2:	4bb4      	ldr	r3, [pc, #720]	; (80092c4 <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 8008ff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ff6:	ee07 3a90 	vmov	s15, r3
 8008ffa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ffe:	4bb2      	ldr	r3, [pc, #712]	; (80092c8 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 8009000:	edc3 7a00 	vstr	s15, [r3]
		cnt_r = TIM8 -> CNT;
 8009004:	4bb1      	ldr	r3, [pc, #708]	; (80092cc <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 8009006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009008:	ee07 3a90 	vmov	s15, r3
 800900c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009010:	4baf      	ldr	r3, [pc, #700]	; (80092d0 <HAL_TIM_PeriodElapsedCallback+0x300>)
 8009012:	edc3 7a00 	vstr	s15, [r3]
		if(cnt_l > 40000) cnt_l = cnt_l - 65535;		//0=>65505の値飛び検出用
 8009016:	4bac      	ldr	r3, [pc, #688]	; (80092c8 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 8009018:	edd3 7a00 	vldr	s15, [r3]
 800901c:	ed9f 7aad 	vldr	s14, [pc, #692]	; 80092d4 <HAL_TIM_PeriodElapsedCallback+0x304>
 8009020:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009024:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009028:	dd09      	ble.n	800903e <HAL_TIM_PeriodElapsedCallback+0x6e>
 800902a:	4ba7      	ldr	r3, [pc, #668]	; (80092c8 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 800902c:	edd3 7a00 	vldr	s15, [r3]
 8009030:	ed9f 7aa9 	vldr	s14, [pc, #676]	; 80092d8 <HAL_TIM_PeriodElapsedCallback+0x308>
 8009034:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009038:	4ba3      	ldr	r3, [pc, #652]	; (80092c8 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 800903a:	edc3 7a00 	vstr	s15, [r3]
		if(cnt_r > 40000) cnt_r = cnt_r - 65535;		//0=>65505の値飛び検出用
 800903e:	4ba4      	ldr	r3, [pc, #656]	; (80092d0 <HAL_TIM_PeriodElapsedCallback+0x300>)
 8009040:	edd3 7a00 	vldr	s15, [r3]
 8009044:	ed9f 7aa3 	vldr	s14, [pc, #652]	; 80092d4 <HAL_TIM_PeriodElapsedCallback+0x304>
 8009048:	eef4 7ac7 	vcmpe.f32	s15, s14
 800904c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009050:	dd09      	ble.n	8009066 <HAL_TIM_PeriodElapsedCallback+0x96>
 8009052:	4b9f      	ldr	r3, [pc, #636]	; (80092d0 <HAL_TIM_PeriodElapsedCallback+0x300>)
 8009054:	edd3 7a00 	vldr	s15, [r3]
 8009058:	ed9f 7a9f 	vldr	s14, [pc, #636]	; 80092d8 <HAL_TIM_PeriodElapsedCallback+0x308>
 800905c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009060:	4b9b      	ldr	r3, [pc, #620]	; (80092d0 <HAL_TIM_PeriodElapsedCallback+0x300>)
 8009062:	edc3 7a00 	vstr	s15, [r3]
		cnt_r = cnt_r * -1;								//回転方向合わせ
 8009066:	4b9a      	ldr	r3, [pc, #616]	; (80092d0 <HAL_TIM_PeriodElapsedCallback+0x300>)
 8009068:	edd3 7a00 	vldr	s15, [r3]
 800906c:	eef1 7a67 	vneg.f32	s15, s15
 8009070:	4b97      	ldr	r3, [pc, #604]	; (80092d0 <HAL_TIM_PeriodElapsedCallback+0x300>)
 8009072:	edc3 7a00 	vstr	s15, [r3]

		dist_l = dist_l + cnt_l * (DIAMETER * M_PI * 11 / 40 / 4096 / 4);
 8009076:	4b99      	ldr	r3, [pc, #612]	; (80092dc <HAL_TIM_PeriodElapsedCallback+0x30c>)
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	4618      	mov	r0, r3
 800907c:	f7f7 fa5c 	bl	8000538 <__aeabi_f2d>
 8009080:	4604      	mov	r4, r0
 8009082:	460d      	mov	r5, r1
 8009084:	4b90      	ldr	r3, [pc, #576]	; (80092c8 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	4618      	mov	r0, r3
 800908a:	f7f7 fa55 	bl	8000538 <__aeabi_f2d>
 800908e:	a388      	add	r3, pc, #544	; (adr r3, 80092b0 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8009090:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009094:	f7f7 faa8 	bl	80005e8 <__aeabi_dmul>
 8009098:	4602      	mov	r2, r0
 800909a:	460b      	mov	r3, r1
 800909c:	4620      	mov	r0, r4
 800909e:	4629      	mov	r1, r5
 80090a0:	f7f7 f8ec 	bl	800027c <__adddf3>
 80090a4:	4603      	mov	r3, r0
 80090a6:	460c      	mov	r4, r1
 80090a8:	4618      	mov	r0, r3
 80090aa:	4621      	mov	r1, r4
 80090ac:	f7f7 fd74 	bl	8000b98 <__aeabi_d2f>
 80090b0:	4602      	mov	r2, r0
 80090b2:	4b8a      	ldr	r3, [pc, #552]	; (80092dc <HAL_TIM_PeriodElapsedCallback+0x30c>)
 80090b4:	601a      	str	r2, [r3, #0]
		dist_r = dist_r + cnt_r * (DIAMETER * M_PI * 11 / 40 / 4096 / 4);
 80090b6:	4b8a      	ldr	r3, [pc, #552]	; (80092e0 <HAL_TIM_PeriodElapsedCallback+0x310>)
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	4618      	mov	r0, r3
 80090bc:	f7f7 fa3c 	bl	8000538 <__aeabi_f2d>
 80090c0:	4604      	mov	r4, r0
 80090c2:	460d      	mov	r5, r1
 80090c4:	4b82      	ldr	r3, [pc, #520]	; (80092d0 <HAL_TIM_PeriodElapsedCallback+0x300>)
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	4618      	mov	r0, r3
 80090ca:	f7f7 fa35 	bl	8000538 <__aeabi_f2d>
 80090ce:	a378      	add	r3, pc, #480	; (adr r3, 80092b0 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 80090d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090d4:	f7f7 fa88 	bl	80005e8 <__aeabi_dmul>
 80090d8:	4602      	mov	r2, r0
 80090da:	460b      	mov	r3, r1
 80090dc:	4620      	mov	r0, r4
 80090de:	4629      	mov	r1, r5
 80090e0:	f7f7 f8cc 	bl	800027c <__adddf3>
 80090e4:	4603      	mov	r3, r0
 80090e6:	460c      	mov	r4, r1
 80090e8:	4618      	mov	r0, r3
 80090ea:	4621      	mov	r1, r4
 80090ec:	f7f7 fd54 	bl	8000b98 <__aeabi_d2f>
 80090f0:	4602      	mov	r2, r0
 80090f2:	4b7b      	ldr	r3, [pc, #492]	; (80092e0 <HAL_TIM_PeriodElapsedCallback+0x310>)
 80090f4:	601a      	str	r2, [r3, #0]

		speed_l = cnt_l * (DIAMETER * M_PI * 11 / 40 / 4096 / 4) / 0.001;
 80090f6:	4b74      	ldr	r3, [pc, #464]	; (80092c8 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	4618      	mov	r0, r3
 80090fc:	f7f7 fa1c 	bl	8000538 <__aeabi_f2d>
 8009100:	a36b      	add	r3, pc, #428	; (adr r3, 80092b0 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8009102:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009106:	f7f7 fa6f 	bl	80005e8 <__aeabi_dmul>
 800910a:	4603      	mov	r3, r0
 800910c:	460c      	mov	r4, r1
 800910e:	4618      	mov	r0, r3
 8009110:	4621      	mov	r1, r4
 8009112:	a369      	add	r3, pc, #420	; (adr r3, 80092b8 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 8009114:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009118:	f7f7 fb90 	bl	800083c <__aeabi_ddiv>
 800911c:	4603      	mov	r3, r0
 800911e:	460c      	mov	r4, r1
 8009120:	4618      	mov	r0, r3
 8009122:	4621      	mov	r1, r4
 8009124:	f7f7 fd38 	bl	8000b98 <__aeabi_d2f>
 8009128:	4602      	mov	r2, r0
 800912a:	4b6e      	ldr	r3, [pc, #440]	; (80092e4 <HAL_TIM_PeriodElapsedCallback+0x314>)
 800912c:	601a      	str	r2, [r3, #0]
		speed_r = cnt_r * (DIAMETER * M_PI * 11 / 40 / 4096 / 4) / 0.001;
 800912e:	4b68      	ldr	r3, [pc, #416]	; (80092d0 <HAL_TIM_PeriodElapsedCallback+0x300>)
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	4618      	mov	r0, r3
 8009134:	f7f7 fa00 	bl	8000538 <__aeabi_f2d>
 8009138:	a35d      	add	r3, pc, #372	; (adr r3, 80092b0 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 800913a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800913e:	f7f7 fa53 	bl	80005e8 <__aeabi_dmul>
 8009142:	4603      	mov	r3, r0
 8009144:	460c      	mov	r4, r1
 8009146:	4618      	mov	r0, r3
 8009148:	4621      	mov	r1, r4
 800914a:	a35b      	add	r3, pc, #364	; (adr r3, 80092b8 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 800914c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009150:	f7f7 fb74 	bl	800083c <__aeabi_ddiv>
 8009154:	4603      	mov	r3, r0
 8009156:	460c      	mov	r4, r1
 8009158:	4618      	mov	r0, r3
 800915a:	4621      	mov	r1, r4
 800915c:	f7f7 fd1c 	bl	8000b98 <__aeabi_d2f>
 8009160:	4602      	mov	r2, r0
 8009162:	4b61      	ldr	r3, [pc, #388]	; (80092e8 <HAL_TIM_PeriodElapsedCallback+0x318>)
 8009164:	601a      	str	r2, [r3, #0]

		TIM4 -> CNT = 0;
 8009166:	4b57      	ldr	r3, [pc, #348]	; (80092c4 <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 8009168:	2200      	movs	r2, #0
 800916a:	625a      	str	r2, [r3, #36]	; 0x24
		TIM8 -> CNT = 0;
 800916c:	4b57      	ldr	r3, [pc, #348]	; (80092cc <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 800916e:	2200      	movs	r2, #0
 8009170:	625a      	str	r2, [r3, #36]	; 0x24

		if(MF.FLAG.SPD){
 8009172:	4b5e      	ldr	r3, [pc, #376]	; (80092ec <HAL_TIM_PeriodElapsedCallback+0x31c>)
 8009174:	881b      	ldrh	r3, [r3, #0]
 8009176:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800917a:	b2db      	uxtb	r3, r3
 800917c:	2b00      	cmp	r3, #0
 800917e:	f000 80fe 	beq.w	800937e <HAL_TIM_PeriodElapsedCallback+0x3ae>
			target_speed_l += accel_l * 0.001;
 8009182:	4b5b      	ldr	r3, [pc, #364]	; (80092f0 <HAL_TIM_PeriodElapsedCallback+0x320>)
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	4618      	mov	r0, r3
 8009188:	f7f7 f9d6 	bl	8000538 <__aeabi_f2d>
 800918c:	a34a      	add	r3, pc, #296	; (adr r3, 80092b8 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 800918e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009192:	f7f7 fa29 	bl	80005e8 <__aeabi_dmul>
 8009196:	4603      	mov	r3, r0
 8009198:	460c      	mov	r4, r1
 800919a:	4625      	mov	r5, r4
 800919c:	461c      	mov	r4, r3
 800919e:	4b55      	ldr	r3, [pc, #340]	; (80092f4 <HAL_TIM_PeriodElapsedCallback+0x324>)
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	4618      	mov	r0, r3
 80091a4:	f7f7 f9c8 	bl	8000538 <__aeabi_f2d>
 80091a8:	4602      	mov	r2, r0
 80091aa:	460b      	mov	r3, r1
 80091ac:	4620      	mov	r0, r4
 80091ae:	4629      	mov	r1, r5
 80091b0:	f7f7 f864 	bl	800027c <__adddf3>
 80091b4:	4603      	mov	r3, r0
 80091b6:	460c      	mov	r4, r1
 80091b8:	4618      	mov	r0, r3
 80091ba:	4621      	mov	r1, r4
 80091bc:	f7f7 fcec 	bl	8000b98 <__aeabi_d2f>
 80091c0:	4602      	mov	r2, r0
 80091c2:	4b4c      	ldr	r3, [pc, #304]	; (80092f4 <HAL_TIM_PeriodElapsedCallback+0x324>)
 80091c4:	601a      	str	r2, [r3, #0]
			target_speed_l = max(min(target_speed_l, speed_max_l), speed_min_l);
 80091c6:	4b4b      	ldr	r3, [pc, #300]	; (80092f4 <HAL_TIM_PeriodElapsedCallback+0x324>)
 80091c8:	ed93 7a00 	vldr	s14, [r3]
 80091cc:	4b4a      	ldr	r3, [pc, #296]	; (80092f8 <HAL_TIM_PeriodElapsedCallback+0x328>)
 80091ce:	edd3 7a00 	vldr	s15, [r3]
 80091d2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80091d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80091da:	dd03      	ble.n	80091e4 <HAL_TIM_PeriodElapsedCallback+0x214>
 80091dc:	4b46      	ldr	r3, [pc, #280]	; (80092f8 <HAL_TIM_PeriodElapsedCallback+0x328>)
 80091de:	edd3 7a00 	vldr	s15, [r3]
 80091e2:	e002      	b.n	80091ea <HAL_TIM_PeriodElapsedCallback+0x21a>
 80091e4:	4b43      	ldr	r3, [pc, #268]	; (80092f4 <HAL_TIM_PeriodElapsedCallback+0x324>)
 80091e6:	edd3 7a00 	vldr	s15, [r3]
 80091ea:	4b44      	ldr	r3, [pc, #272]	; (80092fc <HAL_TIM_PeriodElapsedCallback+0x32c>)
 80091ec:	ed93 7a00 	vldr	s14, [r3]
 80091f0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80091f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80091f8:	dd10      	ble.n	800921c <HAL_TIM_PeriodElapsedCallback+0x24c>
 80091fa:	4b3e      	ldr	r3, [pc, #248]	; (80092f4 <HAL_TIM_PeriodElapsedCallback+0x324>)
 80091fc:	ed93 7a00 	vldr	s14, [r3]
 8009200:	4b3d      	ldr	r3, [pc, #244]	; (80092f8 <HAL_TIM_PeriodElapsedCallback+0x328>)
 8009202:	edd3 7a00 	vldr	s15, [r3]
 8009206:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800920a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800920e:	dd02      	ble.n	8009216 <HAL_TIM_PeriodElapsedCallback+0x246>
 8009210:	4b39      	ldr	r3, [pc, #228]	; (80092f8 <HAL_TIM_PeriodElapsedCallback+0x328>)
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	e004      	b.n	8009220 <HAL_TIM_PeriodElapsedCallback+0x250>
 8009216:	4b37      	ldr	r3, [pc, #220]	; (80092f4 <HAL_TIM_PeriodElapsedCallback+0x324>)
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	e001      	b.n	8009220 <HAL_TIM_PeriodElapsedCallback+0x250>
 800921c:	4b37      	ldr	r3, [pc, #220]	; (80092fc <HAL_TIM_PeriodElapsedCallback+0x32c>)
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	4a34      	ldr	r2, [pc, #208]	; (80092f4 <HAL_TIM_PeriodElapsedCallback+0x324>)
 8009222:	6013      	str	r3, [r2, #0]
			epsilon_l = target_speed_l - speed_l;
 8009224:	4b33      	ldr	r3, [pc, #204]	; (80092f4 <HAL_TIM_PeriodElapsedCallback+0x324>)
 8009226:	ed93 7a00 	vldr	s14, [r3]
 800922a:	4b2e      	ldr	r3, [pc, #184]	; (80092e4 <HAL_TIM_PeriodElapsedCallback+0x314>)
 800922c:	edd3 7a00 	vldr	s15, [r3]
 8009230:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009234:	4b32      	ldr	r3, [pc, #200]	; (8009300 <HAL_TIM_PeriodElapsedCallback+0x330>)
 8009236:	edc3 7a00 	vstr	s15, [r3]
			pulse_l = Kp * epsilon_l;
 800923a:	4b31      	ldr	r3, [pc, #196]	; (8009300 <HAL_TIM_PeriodElapsedCallback+0x330>)
 800923c:	edd3 7a00 	vldr	s15, [r3]
 8009240:	eeb0 7a04 	vmov.f32	s14, #4	; 0x40200000  2.5
 8009244:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009248:	4b2e      	ldr	r3, [pc, #184]	; (8009304 <HAL_TIM_PeriodElapsedCallback+0x334>)
 800924a:	edc3 7a00 	vstr	s15, [r3]

			target_speed_r += accel_r * 0.001;
 800924e:	4b2e      	ldr	r3, [pc, #184]	; (8009308 <HAL_TIM_PeriodElapsedCallback+0x338>)
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	4618      	mov	r0, r3
 8009254:	f7f7 f970 	bl	8000538 <__aeabi_f2d>
 8009258:	a317      	add	r3, pc, #92	; (adr r3, 80092b8 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 800925a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800925e:	f7f7 f9c3 	bl	80005e8 <__aeabi_dmul>
 8009262:	4603      	mov	r3, r0
 8009264:	460c      	mov	r4, r1
 8009266:	4625      	mov	r5, r4
 8009268:	461c      	mov	r4, r3
 800926a:	4b28      	ldr	r3, [pc, #160]	; (800930c <HAL_TIM_PeriodElapsedCallback+0x33c>)
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	4618      	mov	r0, r3
 8009270:	f7f7 f962 	bl	8000538 <__aeabi_f2d>
 8009274:	4602      	mov	r2, r0
 8009276:	460b      	mov	r3, r1
 8009278:	4620      	mov	r0, r4
 800927a:	4629      	mov	r1, r5
 800927c:	f7f6 fffe 	bl	800027c <__adddf3>
 8009280:	4603      	mov	r3, r0
 8009282:	460c      	mov	r4, r1
 8009284:	4618      	mov	r0, r3
 8009286:	4621      	mov	r1, r4
 8009288:	f7f7 fc86 	bl	8000b98 <__aeabi_d2f>
 800928c:	4602      	mov	r2, r0
 800928e:	4b1f      	ldr	r3, [pc, #124]	; (800930c <HAL_TIM_PeriodElapsedCallback+0x33c>)
 8009290:	601a      	str	r2, [r3, #0]
			target_speed_r = max(min(target_speed_r, speed_max_r), speed_min_r);
 8009292:	4b1e      	ldr	r3, [pc, #120]	; (800930c <HAL_TIM_PeriodElapsedCallback+0x33c>)
 8009294:	ed93 7a00 	vldr	s14, [r3]
 8009298:	4b1d      	ldr	r3, [pc, #116]	; (8009310 <HAL_TIM_PeriodElapsedCallback+0x340>)
 800929a:	edd3 7a00 	vldr	s15, [r3]
 800929e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80092a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80092a6:	dd35      	ble.n	8009314 <HAL_TIM_PeriodElapsedCallback+0x344>
 80092a8:	4b19      	ldr	r3, [pc, #100]	; (8009310 <HAL_TIM_PeriodElapsedCallback+0x340>)
 80092aa:	edd3 7a00 	vldr	s15, [r3]
 80092ae:	e034      	b.n	800931a <HAL_TIM_PeriodElapsedCallback+0x34a>
 80092b0:	775e3793 	.word	0x775e3793
 80092b4:	3f552a9e 	.word	0x3f552a9e
 80092b8:	d2f1a9fc 	.word	0xd2f1a9fc
 80092bc:	3f50624d 	.word	0x3f50624d
 80092c0:	20000c34 	.word	0x20000c34
 80092c4:	40000800 	.word	0x40000800
 80092c8:	2000032c 	.word	0x2000032c
 80092cc:	40010400 	.word	0x40010400
 80092d0:	20000c2c 	.word	0x20000c2c
 80092d4:	471c4000 	.word	0x471c4000
 80092d8:	477fff00 	.word	0x477fff00
 80092dc:	20001004 	.word	0x20001004
 80092e0:	20000b6c 	.word	0x20000b6c
 80092e4:	20000b70 	.word	0x20000b70
 80092e8:	2000033c 	.word	0x2000033c
 80092ec:	20000fe8 	.word	0x20000fe8
 80092f0:	20000ddc 	.word	0x20000ddc
 80092f4:	20000c80 	.word	0x20000c80
 80092f8:	200007f8 	.word	0x200007f8
 80092fc:	20000bd4 	.word	0x20000bd4
 8009300:	20000be0 	.word	0x20000be0
 8009304:	20000c28 	.word	0x20000c28
 8009308:	20000b64 	.word	0x20000b64
 800930c:	20000220 	.word	0x20000220
 8009310:	20000224 	.word	0x20000224
 8009314:	4b9a      	ldr	r3, [pc, #616]	; (8009580 <HAL_TIM_PeriodElapsedCallback+0x5b0>)
 8009316:	edd3 7a00 	vldr	s15, [r3]
 800931a:	4b9a      	ldr	r3, [pc, #616]	; (8009584 <HAL_TIM_PeriodElapsedCallback+0x5b4>)
 800931c:	ed93 7a00 	vldr	s14, [r3]
 8009320:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009324:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009328:	dd10      	ble.n	800934c <HAL_TIM_PeriodElapsedCallback+0x37c>
 800932a:	4b95      	ldr	r3, [pc, #596]	; (8009580 <HAL_TIM_PeriodElapsedCallback+0x5b0>)
 800932c:	ed93 7a00 	vldr	s14, [r3]
 8009330:	4b95      	ldr	r3, [pc, #596]	; (8009588 <HAL_TIM_PeriodElapsedCallback+0x5b8>)
 8009332:	edd3 7a00 	vldr	s15, [r3]
 8009336:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800933a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800933e:	dd02      	ble.n	8009346 <HAL_TIM_PeriodElapsedCallback+0x376>
 8009340:	4b91      	ldr	r3, [pc, #580]	; (8009588 <HAL_TIM_PeriodElapsedCallback+0x5b8>)
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	e004      	b.n	8009350 <HAL_TIM_PeriodElapsedCallback+0x380>
 8009346:	4b8e      	ldr	r3, [pc, #568]	; (8009580 <HAL_TIM_PeriodElapsedCallback+0x5b0>)
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	e001      	b.n	8009350 <HAL_TIM_PeriodElapsedCallback+0x380>
 800934c:	4b8d      	ldr	r3, [pc, #564]	; (8009584 <HAL_TIM_PeriodElapsedCallback+0x5b4>)
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	4a8b      	ldr	r2, [pc, #556]	; (8009580 <HAL_TIM_PeriodElapsedCallback+0x5b0>)
 8009352:	6013      	str	r3, [r2, #0]
			epsilon_r = target_speed_r - speed_r;
 8009354:	4b8a      	ldr	r3, [pc, #552]	; (8009580 <HAL_TIM_PeriodElapsedCallback+0x5b0>)
 8009356:	ed93 7a00 	vldr	s14, [r3]
 800935a:	4b8c      	ldr	r3, [pc, #560]	; (800958c <HAL_TIM_PeriodElapsedCallback+0x5bc>)
 800935c:	edd3 7a00 	vldr	s15, [r3]
 8009360:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009364:	4b8a      	ldr	r3, [pc, #552]	; (8009590 <HAL_TIM_PeriodElapsedCallback+0x5c0>)
 8009366:	edc3 7a00 	vstr	s15, [r3]
			pulse_r = Kp * epsilon_r;
 800936a:	4b89      	ldr	r3, [pc, #548]	; (8009590 <HAL_TIM_PeriodElapsedCallback+0x5c0>)
 800936c:	edd3 7a00 	vldr	s15, [r3]
 8009370:	eeb0 7a04 	vmov.f32	s14, #4	; 0x40200000  2.5
 8009374:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009378:	4b86      	ldr	r3, [pc, #536]	; (8009594 <HAL_TIM_PeriodElapsedCallback+0x5c4>)
 800937a:	edc3 7a00 	vstr	s15, [r3]
		}

		log_cnt ++;
 800937e:	4b86      	ldr	r3, [pc, #536]	; (8009598 <HAL_TIM_PeriodElapsedCallback+0x5c8>)
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	3301      	adds	r3, #1
 8009384:	4a84      	ldr	r2, [pc, #528]	; (8009598 <HAL_TIM_PeriodElapsedCallback+0x5c8>)
 8009386:	6013      	str	r3, [r2, #0]

		if(log_cnt >= 5 && MF.FLAG.LOG){
 8009388:	4b83      	ldr	r3, [pc, #524]	; (8009598 <HAL_TIM_PeriodElapsedCallback+0x5c8>)
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	2b04      	cmp	r3, #4
 800938e:	dd2a      	ble.n	80093e6 <HAL_TIM_PeriodElapsedCallback+0x416>
 8009390:	4b82      	ldr	r3, [pc, #520]	; (800959c <HAL_TIM_PeriodElapsedCallback+0x5cc>)
 8009392:	881b      	ldrh	r3, [r3, #0]
 8009394:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8009398:	b2db      	uxtb	r3, r3
 800939a:	2b00      	cmp	r3, #0
 800939c:	d023      	beq.n	80093e6 <HAL_TIM_PeriodElapsedCallback+0x416>
			log_cnt = 0;
 800939e:	4b7e      	ldr	r3, [pc, #504]	; (8009598 <HAL_TIM_PeriodElapsedCallback+0x5c8>)
 80093a0:	2200      	movs	r2, #0
 80093a2:	601a      	str	r2, [r3, #0]
			if(get_cnt < log_allay){
 80093a4:	4b7e      	ldr	r3, [pc, #504]	; (80095a0 <HAL_TIM_PeriodElapsedCallback+0x5d0>)
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	2bc7      	cmp	r3, #199	; 0xc7
 80093aa:	dc1c      	bgt.n	80093e6 <HAL_TIM_PeriodElapsedCallback+0x416>
				get_speed_l[get_cnt] = speed_l;
 80093ac:	4b7d      	ldr	r3, [pc, #500]	; (80095a4 <HAL_TIM_PeriodElapsedCallback+0x5d4>)
 80093ae:	edd3 7a00 	vldr	s15, [r3]
 80093b2:	4b7b      	ldr	r3, [pc, #492]	; (80095a0 <HAL_TIM_PeriodElapsedCallback+0x5d0>)
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80093ba:	ee17 1a90 	vmov	r1, s15
 80093be:	4a7a      	ldr	r2, [pc, #488]	; (80095a8 <HAL_TIM_PeriodElapsedCallback+0x5d8>)
 80093c0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				get_speed_r[get_cnt] = speed_r;
 80093c4:	4b71      	ldr	r3, [pc, #452]	; (800958c <HAL_TIM_PeriodElapsedCallback+0x5bc>)
 80093c6:	edd3 7a00 	vldr	s15, [r3]
 80093ca:	4b75      	ldr	r3, [pc, #468]	; (80095a0 <HAL_TIM_PeriodElapsedCallback+0x5d0>)
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80093d2:	ee17 1a90 	vmov	r1, s15
 80093d6:	4a75      	ldr	r2, [pc, #468]	; (80095ac <HAL_TIM_PeriodElapsedCallback+0x5dc>)
 80093d8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				get_cnt++;
 80093dc:	4b70      	ldr	r3, [pc, #448]	; (80095a0 <HAL_TIM_PeriodElapsedCallback+0x5d0>)
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	3301      	adds	r3, #1
 80093e2:	4a6f      	ldr	r2, [pc, #444]	; (80095a0 <HAL_TIM_PeriodElapsedCallback+0x5d0>)
 80093e4:	6013      	str	r3, [r2, #0]
//		degree_x += accel_read_x() * 0.001;
//		degree_y += accel_read_y() * 0.001;
//		degree_z += accel_read_z() * 0.001;
//		degree_x += gyro_read_x() * 0.001;
//		degree_y += gyro_read_y() * 0.001;
		degree_z += gyro_read_z() * 0.001;
 80093e6:	f7ff fd93 	bl	8008f10 <gyro_read_z>
 80093ea:	ee10 3a10 	vmov	r3, s0
 80093ee:	4618      	mov	r0, r3
 80093f0:	f7f7 f8a2 	bl	8000538 <__aeabi_f2d>
 80093f4:	a35e      	add	r3, pc, #376	; (adr r3, 8009570 <HAL_TIM_PeriodElapsedCallback+0x5a0>)
 80093f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093fa:	f7f7 f8f5 	bl	80005e8 <__aeabi_dmul>
 80093fe:	4603      	mov	r3, r0
 8009400:	460c      	mov	r4, r1
 8009402:	4625      	mov	r5, r4
 8009404:	461c      	mov	r4, r3
 8009406:	4b6a      	ldr	r3, [pc, #424]	; (80095b0 <HAL_TIM_PeriodElapsedCallback+0x5e0>)
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	4618      	mov	r0, r3
 800940c:	f7f7 f894 	bl	8000538 <__aeabi_f2d>
 8009410:	4602      	mov	r2, r0
 8009412:	460b      	mov	r3, r1
 8009414:	4620      	mov	r0, r4
 8009416:	4629      	mov	r1, r5
 8009418:	f7f6 ff30 	bl	800027c <__adddf3>
 800941c:	4603      	mov	r3, r0
 800941e:	460c      	mov	r4, r1
 8009420:	4618      	mov	r0, r3
 8009422:	4621      	mov	r1, r4
 8009424:	f7f7 fbb8 	bl	8000b98 <__aeabi_d2f>
 8009428:	4602      	mov	r2, r0
 800942a:	4b61      	ldr	r3, [pc, #388]	; (80095b0 <HAL_TIM_PeriodElapsedCallback+0x5e0>)
 800942c:	601a      	str	r2, [r3, #0]

		//gyro ドリフト量計算
		if(gyro_drift_flag == 1){
 800942e:	4b61      	ldr	r3, [pc, #388]	; (80095b4 <HAL_TIM_PeriodElapsedCallback+0x5e4>)
 8009430:	781b      	ldrb	r3, [r3, #0]
 8009432:	b2db      	uxtb	r3, r3
 8009434:	2b01      	cmp	r3, #1
 8009436:	d14b      	bne.n	80094d0 <HAL_TIM_PeriodElapsedCallback+0x500>
			gyro_cnt ++;
 8009438:	4b5f      	ldr	r3, [pc, #380]	; (80095b8 <HAL_TIM_PeriodElapsedCallback+0x5e8>)
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	3301      	adds	r3, #1
 800943e:	4a5e      	ldr	r2, [pc, #376]	; (80095b8 <HAL_TIM_PeriodElapsedCallback+0x5e8>)
 8009440:	6013      	str	r3, [r2, #0]
			if(gyro_cnt >= 2)dif_omega_z += old_omega_z - gyro_read_z();
 8009442:	4b5d      	ldr	r3, [pc, #372]	; (80095b8 <HAL_TIM_PeriodElapsedCallback+0x5e8>)
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	2b01      	cmp	r3, #1
 8009448:	dd10      	ble.n	800946c <HAL_TIM_PeriodElapsedCallback+0x49c>
 800944a:	4b5c      	ldr	r3, [pc, #368]	; (80095bc <HAL_TIM_PeriodElapsedCallback+0x5ec>)
 800944c:	ed93 8a00 	vldr	s16, [r3]
 8009450:	f7ff fd5e 	bl	8008f10 <gyro_read_z>
 8009454:	eef0 7a40 	vmov.f32	s15, s0
 8009458:	ee38 7a67 	vsub.f32	s14, s16, s15
 800945c:	4b58      	ldr	r3, [pc, #352]	; (80095c0 <HAL_TIM_PeriodElapsedCallback+0x5f0>)
 800945e:	edd3 7a00 	vldr	s15, [r3]
 8009462:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009466:	4b56      	ldr	r3, [pc, #344]	; (80095c0 <HAL_TIM_PeriodElapsedCallback+0x5f0>)
 8009468:	edc3 7a00 	vstr	s15, [r3]
			old_omega_z = gyro_read_z();
 800946c:	f7ff fd50 	bl	8008f10 <gyro_read_z>
 8009470:	eef0 7a40 	vmov.f32	s15, s0
 8009474:	4b51      	ldr	r3, [pc, #324]	; (80095bc <HAL_TIM_PeriodElapsedCallback+0x5ec>)
 8009476:	edc3 7a00 	vstr	s15, [r3]
			full_led_write(6);
 800947a:	2006      	movs	r0, #6
 800947c:	f004 f91c 	bl	800d6b8 <full_led_write>
			if(gyro_cnt >= 1001) {
 8009480:	4b4d      	ldr	r3, [pc, #308]	; (80095b8 <HAL_TIM_PeriodElapsedCallback+0x5e8>)
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009488:	dd1a      	ble.n	80094c0 <HAL_TIM_PeriodElapsedCallback+0x4f0>
				gyro_drift_flag = 0;
 800948a:	4b4a      	ldr	r3, [pc, #296]	; (80095b4 <HAL_TIM_PeriodElapsedCallback+0x5e4>)
 800948c:	2200      	movs	r2, #0
 800948e:	701a      	strb	r2, [r3, #0]
				gyro_drift_value = dif_omega_z / gyro_cnt-1;
 8009490:	4b4b      	ldr	r3, [pc, #300]	; (80095c0 <HAL_TIM_PeriodElapsedCallback+0x5f0>)
 8009492:	edd3 6a00 	vldr	s13, [r3]
 8009496:	4b48      	ldr	r3, [pc, #288]	; (80095b8 <HAL_TIM_PeriodElapsedCallback+0x5e8>)
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	ee07 3a90 	vmov	s15, r3
 800949e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80094a2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80094a6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80094aa:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80094ae:	4b45      	ldr	r3, [pc, #276]	; (80095c4 <HAL_TIM_PeriodElapsedCallback+0x5f4>)
 80094b0:	edc3 7a00 	vstr	s15, [r3]
				gyro_cnt = 0;
 80094b4:	4b40      	ldr	r3, [pc, #256]	; (80095b8 <HAL_TIM_PeriodElapsedCallback+0x5e8>)
 80094b6:	2200      	movs	r2, #0
 80094b8:	601a      	str	r2, [r3, #0]
				full_led_write(4);
 80094ba:	2004      	movs	r0, #4
 80094bc:	f004 f8fc 	bl	800d6b8 <full_led_write>
			}
			degree_z = 0;
 80094c0:	4b3b      	ldr	r3, [pc, #236]	; (80095b0 <HAL_TIM_PeriodElapsedCallback+0x5e0>)
 80094c2:	f04f 0200 	mov.w	r2, #0
 80094c6:	601a      	str	r2, [r3, #0]
			target_degree_z = 0;
 80094c8:	4b3f      	ldr	r3, [pc, #252]	; (80095c8 <HAL_TIM_PeriodElapsedCallback+0x5f8>)
 80094ca:	f04f 0200 	mov.w	r2, #0
 80094ce:	601a      	str	r2, [r3, #0]
		}


		if(MF.FLAG.ENKAI){
 80094d0:	4b32      	ldr	r3, [pc, #200]	; (800959c <HAL_TIM_PeriodElapsedCallback+0x5cc>)
 80094d2:	881b      	ldrh	r3, [r3, #0]
 80094d4:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80094d8:	b2db      	uxtb	r3, r3
 80094da:	2b00      	cmp	r3, #0
 80094dc:	f000 80d3 	beq.w	8009686 <HAL_TIM_PeriodElapsedCallback+0x6b6>
			target_dist = TREAD*M_PI/360*(degree_z-target_degree_z);
 80094e0:	4b33      	ldr	r3, [pc, #204]	; (80095b0 <HAL_TIM_PeriodElapsedCallback+0x5e0>)
 80094e2:	ed93 7a00 	vldr	s14, [r3]
 80094e6:	4b38      	ldr	r3, [pc, #224]	; (80095c8 <HAL_TIM_PeriodElapsedCallback+0x5f8>)
 80094e8:	edd3 7a00 	vldr	s15, [r3]
 80094ec:	ee77 7a67 	vsub.f32	s15, s14, s15
 80094f0:	ee17 0a90 	vmov	r0, s15
 80094f4:	f7f7 f820 	bl	8000538 <__aeabi_f2d>
 80094f8:	a31f      	add	r3, pc, #124	; (adr r3, 8009578 <HAL_TIM_PeriodElapsedCallback+0x5a8>)
 80094fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094fe:	f7f7 f873 	bl	80005e8 <__aeabi_dmul>
 8009502:	4603      	mov	r3, r0
 8009504:	460c      	mov	r4, r1
 8009506:	4618      	mov	r0, r3
 8009508:	4621      	mov	r1, r4
 800950a:	f7f7 fb45 	bl	8000b98 <__aeabi_d2f>
 800950e:	4602      	mov	r2, r0
 8009510:	4b2e      	ldr	r3, [pc, #184]	; (80095cc <HAL_TIM_PeriodElapsedCallback+0x5fc>)
 8009512:	601a      	str	r2, [r3, #0]
			if(target_dist > 0){
 8009514:	4b2d      	ldr	r3, [pc, #180]	; (80095cc <HAL_TIM_PeriodElapsedCallback+0x5fc>)
 8009516:	edd3 7a00 	vldr	s15, [r3]
 800951a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800951e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009522:	dd59      	ble.n	80095d8 <HAL_TIM_PeriodElapsedCallback+0x608>
				target_speed_l = sqrt(2*accel_l*target_dist);
 8009524:	4b2a      	ldr	r3, [pc, #168]	; (80095d0 <HAL_TIM_PeriodElapsedCallback+0x600>)
 8009526:	edd3 7a00 	vldr	s15, [r3]
 800952a:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800952e:	4b27      	ldr	r3, [pc, #156]	; (80095cc <HAL_TIM_PeriodElapsedCallback+0x5fc>)
 8009530:	edd3 7a00 	vldr	s15, [r3]
 8009534:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009538:	ee17 0a90 	vmov	r0, s15
 800953c:	f7f6 fffc 	bl	8000538 <__aeabi_f2d>
 8009540:	4603      	mov	r3, r0
 8009542:	460c      	mov	r4, r1
 8009544:	ec44 3b10 	vmov	d0, r3, r4
 8009548:	f005 fe50 	bl	800f1ec <sqrt>
 800954c:	ec54 3b10 	vmov	r3, r4, d0
 8009550:	4618      	mov	r0, r3
 8009552:	4621      	mov	r1, r4
 8009554:	f7f7 fb20 	bl	8000b98 <__aeabi_d2f>
 8009558:	4602      	mov	r2, r0
 800955a:	4b1e      	ldr	r3, [pc, #120]	; (80095d4 <HAL_TIM_PeriodElapsedCallback+0x604>)
 800955c:	601a      	str	r2, [r3, #0]
				target_speed_r = -1 * target_speed_l;
 800955e:	4b1d      	ldr	r3, [pc, #116]	; (80095d4 <HAL_TIM_PeriodElapsedCallback+0x604>)
 8009560:	edd3 7a00 	vldr	s15, [r3]
 8009564:	eef1 7a67 	vneg.f32	s15, s15
 8009568:	4b05      	ldr	r3, [pc, #20]	; (8009580 <HAL_TIM_PeriodElapsedCallback+0x5b0>)
 800956a:	edc3 7a00 	vstr	s15, [r3]
 800956e:	e060      	b.n	8009632 <HAL_TIM_PeriodElapsedCallback+0x662>
 8009570:	d2f1a9fc 	.word	0xd2f1a9fc
 8009574:	3f50624d 	.word	0x3f50624d
 8009578:	d7653223 	.word	0xd7653223
 800957c:	3fe26e40 	.word	0x3fe26e40
 8009580:	20000220 	.word	0x20000220
 8009584:	20000fec 	.word	0x20000fec
 8009588:	20000224 	.word	0x20000224
 800958c:	2000033c 	.word	0x2000033c
 8009590:	20000c8c 	.word	0x20000c8c
 8009594:	200007fc 	.word	0x200007fc
 8009598:	20000188 	.word	0x20000188
 800959c:	20000fe8 	.word	0x20000fe8
 80095a0:	20000190 	.word	0x20000190
 80095a4:	20000b70 	.word	0x20000b70
 80095a8:	20000800 	.word	0x20000800
 80095ac:	200004d8 	.word	0x200004d8
 80095b0:	20000bdc 	.word	0x20000bdc
 80095b4:	20000b20 	.word	0x20000b20
 80095b8:	2000018c 	.word	0x2000018c
 80095bc:	2000100c 	.word	0x2000100c
 80095c0:	20000c24 	.word	0x20000c24
 80095c4:	20000c74 	.word	0x20000c74
 80095c8:	20000c7c 	.word	0x20000c7c
 80095cc:	20000ff8 	.word	0x20000ff8
 80095d0:	20000ddc 	.word	0x20000ddc
 80095d4:	20000c80 	.word	0x20000c80
			}else{
				target_speed_l = sqrt(2*accel_l*target_dist*-1)*-1;
 80095d8:	4bcb      	ldr	r3, [pc, #812]	; (8009908 <HAL_TIM_PeriodElapsedCallback+0x938>)
 80095da:	edd3 7a00 	vldr	s15, [r3]
 80095de:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80095e2:	4bca      	ldr	r3, [pc, #808]	; (800990c <HAL_TIM_PeriodElapsedCallback+0x93c>)
 80095e4:	edd3 7a00 	vldr	s15, [r3]
 80095e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80095ec:	eef1 7a67 	vneg.f32	s15, s15
 80095f0:	ee17 3a90 	vmov	r3, s15
 80095f4:	4618      	mov	r0, r3
 80095f6:	f7f6 ff9f 	bl	8000538 <__aeabi_f2d>
 80095fa:	4603      	mov	r3, r0
 80095fc:	460c      	mov	r4, r1
 80095fe:	ec44 3b10 	vmov	d0, r3, r4
 8009602:	f005 fdf3 	bl	800f1ec <sqrt>
 8009606:	ec54 3b10 	vmov	r3, r4, d0
 800960a:	4618      	mov	r0, r3
 800960c:	4621      	mov	r1, r4
 800960e:	f7f7 fac3 	bl	8000b98 <__aeabi_d2f>
 8009612:	4603      	mov	r3, r0
 8009614:	ee07 3a90 	vmov	s15, r3
 8009618:	eef1 7a67 	vneg.f32	s15, s15
 800961c:	4bbc      	ldr	r3, [pc, #752]	; (8009910 <HAL_TIM_PeriodElapsedCallback+0x940>)
 800961e:	edc3 7a00 	vstr	s15, [r3]
				target_speed_r = -1 * target_speed_l;
 8009622:	4bbb      	ldr	r3, [pc, #748]	; (8009910 <HAL_TIM_PeriodElapsedCallback+0x940>)
 8009624:	edd3 7a00 	vldr	s15, [r3]
 8009628:	eef1 7a67 	vneg.f32	s15, s15
 800962c:	4bb9      	ldr	r3, [pc, #740]	; (8009914 <HAL_TIM_PeriodElapsedCallback+0x944>)
 800962e:	edc3 7a00 	vstr	s15, [r3]
			}

			epsilon_l = target_speed_l - speed_l;
 8009632:	4bb7      	ldr	r3, [pc, #732]	; (8009910 <HAL_TIM_PeriodElapsedCallback+0x940>)
 8009634:	ed93 7a00 	vldr	s14, [r3]
 8009638:	4bb7      	ldr	r3, [pc, #732]	; (8009918 <HAL_TIM_PeriodElapsedCallback+0x948>)
 800963a:	edd3 7a00 	vldr	s15, [r3]
 800963e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009642:	4bb6      	ldr	r3, [pc, #728]	; (800991c <HAL_TIM_PeriodElapsedCallback+0x94c>)
 8009644:	edc3 7a00 	vstr	s15, [r3]
			pulse_l = Kp * epsilon_l;
 8009648:	4bb4      	ldr	r3, [pc, #720]	; (800991c <HAL_TIM_PeriodElapsedCallback+0x94c>)
 800964a:	edd3 7a00 	vldr	s15, [r3]
 800964e:	eeb0 7a04 	vmov.f32	s14, #4	; 0x40200000  2.5
 8009652:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009656:	4bb2      	ldr	r3, [pc, #712]	; (8009920 <HAL_TIM_PeriodElapsedCallback+0x950>)
 8009658:	edc3 7a00 	vstr	s15, [r3]
			epsilon_r = target_speed_r - speed_r;
 800965c:	4bad      	ldr	r3, [pc, #692]	; (8009914 <HAL_TIM_PeriodElapsedCallback+0x944>)
 800965e:	ed93 7a00 	vldr	s14, [r3]
 8009662:	4bb0      	ldr	r3, [pc, #704]	; (8009924 <HAL_TIM_PeriodElapsedCallback+0x954>)
 8009664:	edd3 7a00 	vldr	s15, [r3]
 8009668:	ee77 7a67 	vsub.f32	s15, s14, s15
 800966c:	4bae      	ldr	r3, [pc, #696]	; (8009928 <HAL_TIM_PeriodElapsedCallback+0x958>)
 800966e:	edc3 7a00 	vstr	s15, [r3]
			pulse_r = Kp * epsilon_r;
 8009672:	4bad      	ldr	r3, [pc, #692]	; (8009928 <HAL_TIM_PeriodElapsedCallback+0x958>)
 8009674:	edd3 7a00 	vldr	s15, [r3]
 8009678:	eeb0 7a04 	vmov.f32	s14, #4	; 0x40200000  2.5
 800967c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009680:	4baa      	ldr	r3, [pc, #680]	; (800992c <HAL_TIM_PeriodElapsedCallback+0x95c>)
 8009682:	edc3 7a00 	vstr	s15, [r3]
		}

		if(MF.FLAG.GYRO){
 8009686:	4baa      	ldr	r3, [pc, #680]	; (8009930 <HAL_TIM_PeriodElapsedCallback+0x960>)
 8009688:	881b      	ldrh	r3, [r3, #0]
 800968a:	f3c3 2300 	ubfx	r3, r3, #8, #1
 800968e:	b2db      	uxtb	r3, r3
 8009690:	2b00      	cmp	r3, #0
 8009692:	f000 80ed 	beq.w	8009870 <HAL_TIM_PeriodElapsedCallback+0x8a0>
			target_omega_z += target_degaccel_z * 0.001;
 8009696:	4ba7      	ldr	r3, [pc, #668]	; (8009934 <HAL_TIM_PeriodElapsedCallback+0x964>)
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	4618      	mov	r0, r3
 800969c:	f7f6 ff4c 	bl	8000538 <__aeabi_f2d>
 80096a0:	a395      	add	r3, pc, #596	; (adr r3, 80098f8 <HAL_TIM_PeriodElapsedCallback+0x928>)
 80096a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096a6:	f7f6 ff9f 	bl	80005e8 <__aeabi_dmul>
 80096aa:	4603      	mov	r3, r0
 80096ac:	460c      	mov	r4, r1
 80096ae:	4625      	mov	r5, r4
 80096b0:	461c      	mov	r4, r3
 80096b2:	4ba1      	ldr	r3, [pc, #644]	; (8009938 <HAL_TIM_PeriodElapsedCallback+0x968>)
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	4618      	mov	r0, r3
 80096b8:	f7f6 ff3e 	bl	8000538 <__aeabi_f2d>
 80096bc:	4602      	mov	r2, r0
 80096be:	460b      	mov	r3, r1
 80096c0:	4620      	mov	r0, r4
 80096c2:	4629      	mov	r1, r5
 80096c4:	f7f6 fdda 	bl	800027c <__adddf3>
 80096c8:	4603      	mov	r3, r0
 80096ca:	460c      	mov	r4, r1
 80096cc:	4618      	mov	r0, r3
 80096ce:	4621      	mov	r1, r4
 80096d0:	f7f7 fa62 	bl	8000b98 <__aeabi_d2f>
 80096d4:	4602      	mov	r2, r0
 80096d6:	4b98      	ldr	r3, [pc, #608]	; (8009938 <HAL_TIM_PeriodElapsedCallback+0x968>)
 80096d8:	601a      	str	r2, [r3, #0]
			target_omega_z = max(min(target_omega_z, omega_max), omega_min);
 80096da:	4b97      	ldr	r3, [pc, #604]	; (8009938 <HAL_TIM_PeriodElapsedCallback+0x968>)
 80096dc:	ed93 7a00 	vldr	s14, [r3]
 80096e0:	4b96      	ldr	r3, [pc, #600]	; (800993c <HAL_TIM_PeriodElapsedCallback+0x96c>)
 80096e2:	edd3 7a00 	vldr	s15, [r3]
 80096e6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80096ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80096ee:	dd03      	ble.n	80096f8 <HAL_TIM_PeriodElapsedCallback+0x728>
 80096f0:	4b92      	ldr	r3, [pc, #584]	; (800993c <HAL_TIM_PeriodElapsedCallback+0x96c>)
 80096f2:	edd3 7a00 	vldr	s15, [r3]
 80096f6:	e002      	b.n	80096fe <HAL_TIM_PeriodElapsedCallback+0x72e>
 80096f8:	4b8f      	ldr	r3, [pc, #572]	; (8009938 <HAL_TIM_PeriodElapsedCallback+0x968>)
 80096fa:	edd3 7a00 	vldr	s15, [r3]
 80096fe:	4b90      	ldr	r3, [pc, #576]	; (8009940 <HAL_TIM_PeriodElapsedCallback+0x970>)
 8009700:	ed93 7a00 	vldr	s14, [r3]
 8009704:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009708:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800970c:	dd10      	ble.n	8009730 <HAL_TIM_PeriodElapsedCallback+0x760>
 800970e:	4b8a      	ldr	r3, [pc, #552]	; (8009938 <HAL_TIM_PeriodElapsedCallback+0x968>)
 8009710:	ed93 7a00 	vldr	s14, [r3]
 8009714:	4b89      	ldr	r3, [pc, #548]	; (800993c <HAL_TIM_PeriodElapsedCallback+0x96c>)
 8009716:	edd3 7a00 	vldr	s15, [r3]
 800971a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800971e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009722:	dd02      	ble.n	800972a <HAL_TIM_PeriodElapsedCallback+0x75a>
 8009724:	4b85      	ldr	r3, [pc, #532]	; (800993c <HAL_TIM_PeriodElapsedCallback+0x96c>)
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	e004      	b.n	8009734 <HAL_TIM_PeriodElapsedCallback+0x764>
 800972a:	4b83      	ldr	r3, [pc, #524]	; (8009938 <HAL_TIM_PeriodElapsedCallback+0x968>)
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	e001      	b.n	8009734 <HAL_TIM_PeriodElapsedCallback+0x764>
 8009730:	4b83      	ldr	r3, [pc, #524]	; (8009940 <HAL_TIM_PeriodElapsedCallback+0x970>)
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	4a80      	ldr	r2, [pc, #512]	; (8009938 <HAL_TIM_PeriodElapsedCallback+0x968>)
 8009736:	6013      	str	r3, [r2, #0]
			target_speed_l = speed_G + target_omega_z/180*M_PI*TREAD/2;
 8009738:	4b82      	ldr	r3, [pc, #520]	; (8009944 <HAL_TIM_PeriodElapsedCallback+0x974>)
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	4618      	mov	r0, r3
 800973e:	f7f6 fefb 	bl	8000538 <__aeabi_f2d>
 8009742:	4604      	mov	r4, r0
 8009744:	460d      	mov	r5, r1
 8009746:	4b7c      	ldr	r3, [pc, #496]	; (8009938 <HAL_TIM_PeriodElapsedCallback+0x968>)
 8009748:	edd3 7a00 	vldr	s15, [r3]
 800974c:	ed9f 7a7e 	vldr	s14, [pc, #504]	; 8009948 <HAL_TIM_PeriodElapsedCallback+0x978>
 8009750:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8009754:	ee16 0a90 	vmov	r0, s13
 8009758:	f7f6 feee 	bl	8000538 <__aeabi_f2d>
 800975c:	a368      	add	r3, pc, #416	; (adr r3, 8009900 <HAL_TIM_PeriodElapsedCallback+0x930>)
 800975e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009762:	f7f6 ff41 	bl	80005e8 <__aeabi_dmul>
 8009766:	4602      	mov	r2, r0
 8009768:	460b      	mov	r3, r1
 800976a:	4610      	mov	r0, r2
 800976c:	4619      	mov	r1, r3
 800976e:	f04f 0200 	mov.w	r2, #0
 8009772:	4b76      	ldr	r3, [pc, #472]	; (800994c <HAL_TIM_PeriodElapsedCallback+0x97c>)
 8009774:	f7f6 ff38 	bl	80005e8 <__aeabi_dmul>
 8009778:	4602      	mov	r2, r0
 800977a:	460b      	mov	r3, r1
 800977c:	4610      	mov	r0, r2
 800977e:	4619      	mov	r1, r3
 8009780:	f04f 0200 	mov.w	r2, #0
 8009784:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009788:	f7f7 f858 	bl	800083c <__aeabi_ddiv>
 800978c:	4602      	mov	r2, r0
 800978e:	460b      	mov	r3, r1
 8009790:	4620      	mov	r0, r4
 8009792:	4629      	mov	r1, r5
 8009794:	f7f6 fd72 	bl	800027c <__adddf3>
 8009798:	4603      	mov	r3, r0
 800979a:	460c      	mov	r4, r1
 800979c:	4618      	mov	r0, r3
 800979e:	4621      	mov	r1, r4
 80097a0:	f7f7 f9fa 	bl	8000b98 <__aeabi_d2f>
 80097a4:	4602      	mov	r2, r0
 80097a6:	4b5a      	ldr	r3, [pc, #360]	; (8009910 <HAL_TIM_PeriodElapsedCallback+0x940>)
 80097a8:	601a      	str	r2, [r3, #0]
			target_speed_r = speed_G - target_omega_z/180*M_PI*TREAD/2;
 80097aa:	4b66      	ldr	r3, [pc, #408]	; (8009944 <HAL_TIM_PeriodElapsedCallback+0x974>)
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	4618      	mov	r0, r3
 80097b0:	f7f6 fec2 	bl	8000538 <__aeabi_f2d>
 80097b4:	4604      	mov	r4, r0
 80097b6:	460d      	mov	r5, r1
 80097b8:	4b5f      	ldr	r3, [pc, #380]	; (8009938 <HAL_TIM_PeriodElapsedCallback+0x968>)
 80097ba:	edd3 7a00 	vldr	s15, [r3]
 80097be:	ed9f 7a62 	vldr	s14, [pc, #392]	; 8009948 <HAL_TIM_PeriodElapsedCallback+0x978>
 80097c2:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80097c6:	ee16 0a90 	vmov	r0, s13
 80097ca:	f7f6 feb5 	bl	8000538 <__aeabi_f2d>
 80097ce:	a34c      	add	r3, pc, #304	; (adr r3, 8009900 <HAL_TIM_PeriodElapsedCallback+0x930>)
 80097d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097d4:	f7f6 ff08 	bl	80005e8 <__aeabi_dmul>
 80097d8:	4602      	mov	r2, r0
 80097da:	460b      	mov	r3, r1
 80097dc:	4610      	mov	r0, r2
 80097de:	4619      	mov	r1, r3
 80097e0:	f04f 0200 	mov.w	r2, #0
 80097e4:	4b59      	ldr	r3, [pc, #356]	; (800994c <HAL_TIM_PeriodElapsedCallback+0x97c>)
 80097e6:	f7f6 feff 	bl	80005e8 <__aeabi_dmul>
 80097ea:	4602      	mov	r2, r0
 80097ec:	460b      	mov	r3, r1
 80097ee:	4610      	mov	r0, r2
 80097f0:	4619      	mov	r1, r3
 80097f2:	f04f 0200 	mov.w	r2, #0
 80097f6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80097fa:	f7f7 f81f 	bl	800083c <__aeabi_ddiv>
 80097fe:	4602      	mov	r2, r0
 8009800:	460b      	mov	r3, r1
 8009802:	4620      	mov	r0, r4
 8009804:	4629      	mov	r1, r5
 8009806:	f7f6 fd37 	bl	8000278 <__aeabi_dsub>
 800980a:	4603      	mov	r3, r0
 800980c:	460c      	mov	r4, r1
 800980e:	4618      	mov	r0, r3
 8009810:	4621      	mov	r1, r4
 8009812:	f7f7 f9c1 	bl	8000b98 <__aeabi_d2f>
 8009816:	4602      	mov	r2, r0
 8009818:	4b3e      	ldr	r3, [pc, #248]	; (8009914 <HAL_TIM_PeriodElapsedCallback+0x944>)
 800981a:	601a      	str	r2, [r3, #0]

			epsilon_l = target_speed_l - speed_l;
 800981c:	4b3c      	ldr	r3, [pc, #240]	; (8009910 <HAL_TIM_PeriodElapsedCallback+0x940>)
 800981e:	ed93 7a00 	vldr	s14, [r3]
 8009822:	4b3d      	ldr	r3, [pc, #244]	; (8009918 <HAL_TIM_PeriodElapsedCallback+0x948>)
 8009824:	edd3 7a00 	vldr	s15, [r3]
 8009828:	ee77 7a67 	vsub.f32	s15, s14, s15
 800982c:	4b3b      	ldr	r3, [pc, #236]	; (800991c <HAL_TIM_PeriodElapsedCallback+0x94c>)
 800982e:	edc3 7a00 	vstr	s15, [r3]
			pulse_l = Kp * epsilon_l;
 8009832:	4b3a      	ldr	r3, [pc, #232]	; (800991c <HAL_TIM_PeriodElapsedCallback+0x94c>)
 8009834:	edd3 7a00 	vldr	s15, [r3]
 8009838:	eeb0 7a04 	vmov.f32	s14, #4	; 0x40200000  2.5
 800983c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009840:	4b37      	ldr	r3, [pc, #220]	; (8009920 <HAL_TIM_PeriodElapsedCallback+0x950>)
 8009842:	edc3 7a00 	vstr	s15, [r3]
			epsilon_r = target_speed_r - speed_r;
 8009846:	4b33      	ldr	r3, [pc, #204]	; (8009914 <HAL_TIM_PeriodElapsedCallback+0x944>)
 8009848:	ed93 7a00 	vldr	s14, [r3]
 800984c:	4b35      	ldr	r3, [pc, #212]	; (8009924 <HAL_TIM_PeriodElapsedCallback+0x954>)
 800984e:	edd3 7a00 	vldr	s15, [r3]
 8009852:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009856:	4b34      	ldr	r3, [pc, #208]	; (8009928 <HAL_TIM_PeriodElapsedCallback+0x958>)
 8009858:	edc3 7a00 	vstr	s15, [r3]
			pulse_r = Kp * epsilon_r;
 800985c:	4b32      	ldr	r3, [pc, #200]	; (8009928 <HAL_TIM_PeriodElapsedCallback+0x958>)
 800985e:	edd3 7a00 	vldr	s15, [r3]
 8009862:	eeb0 7a04 	vmov.f32	s14, #4	; 0x40200000  2.5
 8009866:	ee67 7a87 	vmul.f32	s15, s15, s14
 800986a:	4b30      	ldr	r3, [pc, #192]	; (800992c <HAL_TIM_PeriodElapsedCallback+0x95c>)
 800986c:	edc3 7a00 	vstr	s15, [r3]
		}


		//ADchange interrupt
		uint16_t delay;
		tp = (tp+1)%3;
 8009870:	4b37      	ldr	r3, [pc, #220]	; (8009950 <HAL_TIM_PeriodElapsedCallback+0x980>)
 8009872:	781b      	ldrb	r3, [r3, #0]
 8009874:	1c5a      	adds	r2, r3, #1
 8009876:	4b37      	ldr	r3, [pc, #220]	; (8009954 <HAL_TIM_PeriodElapsedCallback+0x984>)
 8009878:	fb83 3102 	smull	r3, r1, r3, r2
 800987c:	17d3      	asrs	r3, r2, #31
 800987e:	1ac9      	subs	r1, r1, r3
 8009880:	460b      	mov	r3, r1
 8009882:	005b      	lsls	r3, r3, #1
 8009884:	440b      	add	r3, r1
 8009886:	1ad1      	subs	r1, r2, r3
 8009888:	b2ca      	uxtb	r2, r1
 800988a:	4b31      	ldr	r3, [pc, #196]	; (8009950 <HAL_TIM_PeriodElapsedCallback+0x980>)
 800988c:	701a      	strb	r2, [r3, #0]

		switch(tp){
 800988e:	4b30      	ldr	r3, [pc, #192]	; (8009950 <HAL_TIM_PeriodElapsedCallback+0x980>)
 8009890:	781b      	ldrb	r3, [r3, #0]
 8009892:	2b01      	cmp	r3, #1
 8009894:	d07f      	beq.n	8009996 <HAL_TIM_PeriodElapsedCallback+0x9c6>
 8009896:	2b02      	cmp	r3, #2
 8009898:	f000 80bc 	beq.w	8009a14 <HAL_TIM_PeriodElapsedCallback+0xa44>
 800989c:	2b00      	cmp	r3, #0
 800989e:	f040 81fd 	bne.w	8009c9c <HAL_TIM_PeriodElapsedCallback+0xccc>
		  case 0:
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_SET); 	//L
 80098a2:	2201      	movs	r2, #1
 80098a4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80098a8:	482b      	ldr	r0, [pc, #172]	; (8009958 <HAL_TIM_PeriodElapsedCallback+0x988>)
 80098aa:	f7f8 fd2b 	bl	8002304 <HAL_GPIO_WritePin>
				for(delay=0; delay<sensor_wait; delay++);
 80098ae:	2300      	movs	r3, #0
 80098b0:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80098b2:	e002      	b.n	80098ba <HAL_TIM_PeriodElapsedCallback+0x8ea>
 80098b4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80098b6:	3301      	adds	r3, #1
 80098b8:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80098ba:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80098bc:	f640 12c3 	movw	r2, #2499	; 0x9c3
 80098c0:	4293      	cmp	r3, r2
 80098c2:	d9f7      	bls.n	80098b4 <HAL_TIM_PeriodElapsedCallback+0x8e4>
				ad_l = get_adc_value(&hadc1, ADC_CHANNEL_3);			//L
 80098c4:	2103      	movs	r1, #3
 80098c6:	4825      	ldr	r0, [pc, #148]	; (800995c <HAL_TIM_PeriodElapsedCallback+0x98c>)
 80098c8:	f001 f980 	bl	800abcc <get_adc_value>
 80098cc:	4603      	mov	r3, r0
 80098ce:	461a      	mov	r2, r3
 80098d0:	4b23      	ldr	r3, [pc, #140]	; (8009960 <HAL_TIM_PeriodElapsedCallback+0x990>)
 80098d2:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 80098d4:	2200      	movs	r2, #0
 80098d6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80098da:	481f      	ldr	r0, [pc, #124]	; (8009958 <HAL_TIM_PeriodElapsedCallback+0x988>)
 80098dc:	f7f8 fd12 	bl	8002304 <HAL_GPIO_WritePin>

				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);  	//R
 80098e0:	2201      	movs	r2, #1
 80098e2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80098e6:	481f      	ldr	r0, [pc, #124]	; (8009964 <HAL_TIM_PeriodElapsedCallback+0x994>)
 80098e8:	f7f8 fd0c 	bl	8002304 <HAL_GPIO_WritePin>
				for(delay=0; delay<sensor_wait; delay++);
 80098ec:	2300      	movs	r3, #0
 80098ee:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80098f0:	e03d      	b.n	800996e <HAL_TIM_PeriodElapsedCallback+0x99e>
 80098f2:	bf00      	nop
 80098f4:	f3af 8000 	nop.w
 80098f8:	d2f1a9fc 	.word	0xd2f1a9fc
 80098fc:	3f50624d 	.word	0x3f50624d
 8009900:	54442d18 	.word	0x54442d18
 8009904:	400921fb 	.word	0x400921fb
 8009908:	20000ddc 	.word	0x20000ddc
 800990c:	20000ff8 	.word	0x20000ff8
 8009910:	20000c80 	.word	0x20000c80
 8009914:	20000220 	.word	0x20000220
 8009918:	20000b70 	.word	0x20000b70
 800991c:	20000be0 	.word	0x20000be0
 8009920:	20000c28 	.word	0x20000c28
 8009924:	2000033c 	.word	0x2000033c
 8009928:	20000c8c 	.word	0x20000c8c
 800992c:	200007fc 	.word	0x200007fc
 8009930:	20000fe8 	.word	0x20000fe8
 8009934:	20000bd8 	.word	0x20000bd8
 8009938:	20000228 	.word	0x20000228
 800993c:	20000b68 	.word	0x20000b68
 8009940:	20000338 	.word	0x20000338
 8009944:	20000b74 	.word	0x20000b74
 8009948:	43340000 	.word	0x43340000
 800994c:	40508000 	.word	0x40508000
 8009950:	20000fff 	.word	0x20000fff
 8009954:	55555556 	.word	0x55555556
 8009958:	40020800 	.word	0x40020800
 800995c:	20000b80 	.word	0x20000b80
 8009960:	20000b7c 	.word	0x20000b7c
 8009964:	40020000 	.word	0x40020000
 8009968:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800996a:	3301      	adds	r3, #1
 800996c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800996e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8009970:	f640 12c3 	movw	r2, #2499	; 0x9c3
 8009974:	4293      	cmp	r3, r2
 8009976:	d9f7      	bls.n	8009968 <HAL_TIM_PeriodElapsedCallback+0x998>
				ad_r = get_adc_value(&hadc1, ADC_CHANNEL_1);			//R
 8009978:	2101      	movs	r1, #1
 800997a:	48ae      	ldr	r0, [pc, #696]	; (8009c34 <HAL_TIM_PeriodElapsedCallback+0xc64>)
 800997c:	f001 f926 	bl	800abcc <get_adc_value>
 8009980:	4603      	mov	r3, r0
 8009982:	461a      	mov	r2, r3
 8009984:	4bac      	ldr	r3, [pc, #688]	; (8009c38 <HAL_TIM_PeriodElapsedCallback+0xc68>)
 8009986:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8009988:	2200      	movs	r2, #0
 800998a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800998e:	48ab      	ldr	r0, [pc, #684]	; (8009c3c <HAL_TIM_PeriodElapsedCallback+0xc6c>)
 8009990:	f7f8 fcb8 	bl	8002304 <HAL_GPIO_WritePin>
			break;
 8009994:	e182      	b.n	8009c9c <HAL_TIM_PeriodElapsedCallback+0xccc>

		  case 1:
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_SET); 	//FL
 8009996:	2201      	movs	r2, #1
 8009998:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800999c:	48a8      	ldr	r0, [pc, #672]	; (8009c40 <HAL_TIM_PeriodElapsedCallback+0xc70>)
 800999e:	f7f8 fcb1 	bl	8002304 <HAL_GPIO_WritePin>
				for(delay=0; delay<sensor_wait; delay++);
 80099a2:	2300      	movs	r3, #0
 80099a4:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80099a6:	e002      	b.n	80099ae <HAL_TIM_PeriodElapsedCallback+0x9de>
 80099a8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80099aa:	3301      	adds	r3, #1
 80099ac:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80099ae:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80099b0:	f640 12c3 	movw	r2, #2499	; 0x9c3
 80099b4:	4293      	cmp	r3, r2
 80099b6:	d9f7      	bls.n	80099a8 <HAL_TIM_PeriodElapsedCallback+0x9d8>
				ad_fl = get_adc_value(&hadc1, ADC_CHANNEL_2);			//FL
 80099b8:	2102      	movs	r1, #2
 80099ba:	489e      	ldr	r0, [pc, #632]	; (8009c34 <HAL_TIM_PeriodElapsedCallback+0xc64>)
 80099bc:	f001 f906 	bl	800abcc <get_adc_value>
 80099c0:	4603      	mov	r3, r0
 80099c2:	461a      	mov	r2, r3
 80099c4:	4b9f      	ldr	r3, [pc, #636]	; (8009c44 <HAL_TIM_PeriodElapsedCallback+0xc74>)
 80099c6:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET);
 80099c8:	2200      	movs	r2, #0
 80099ca:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80099ce:	489c      	ldr	r0, [pc, #624]	; (8009c40 <HAL_TIM_PeriodElapsedCallback+0xc70>)
 80099d0:	f7f8 fc98 	bl	8002304 <HAL_GPIO_WritePin>

				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);   	//FR
 80099d4:	2201      	movs	r2, #1
 80099d6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80099da:	4899      	ldr	r0, [pc, #612]	; (8009c40 <HAL_TIM_PeriodElapsedCallback+0xc70>)
 80099dc:	f7f8 fc92 	bl	8002304 <HAL_GPIO_WritePin>
				for(delay=0; delay<sensor_wait; delay++);
 80099e0:	2300      	movs	r3, #0
 80099e2:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80099e4:	e002      	b.n	80099ec <HAL_TIM_PeriodElapsedCallback+0xa1c>
 80099e6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80099e8:	3301      	adds	r3, #1
 80099ea:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80099ec:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80099ee:	f640 12c3 	movw	r2, #2499	; 0x9c3
 80099f2:	4293      	cmp	r3, r2
 80099f4:	d9f7      	bls.n	80099e6 <HAL_TIM_PeriodElapsedCallback+0xa16>
				ad_fr = get_adc_value(&hadc1, ADC_CHANNEL_0);			//FR
 80099f6:	2100      	movs	r1, #0
 80099f8:	488e      	ldr	r0, [pc, #568]	; (8009c34 <HAL_TIM_PeriodElapsedCallback+0xc64>)
 80099fa:	f001 f8e7 	bl	800abcc <get_adc_value>
 80099fe:	4603      	mov	r3, r0
 8009a00:	461a      	mov	r2, r3
 8009a02:	4b91      	ldr	r3, [pc, #580]	; (8009c48 <HAL_TIM_PeriodElapsedCallback+0xc78>)
 8009a04:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 8009a06:	2200      	movs	r2, #0
 8009a08:	f44f 7100 	mov.w	r1, #512	; 0x200
 8009a0c:	488c      	ldr	r0, [pc, #560]	; (8009c40 <HAL_TIM_PeriodElapsedCallback+0xc70>)
 8009a0e:	f7f8 fc79 	bl	8002304 <HAL_GPIO_WritePin>
			break;
 8009a12:	e143      	b.n	8009c9c <HAL_TIM_PeriodElapsedCallback+0xccc>

		  case 2:
				//
				if(MF.FLAG.WCTRL){
 8009a14:	4b8d      	ldr	r3, [pc, #564]	; (8009c4c <HAL_TIM_PeriodElapsedCallback+0xc7c>)
 8009a16:	881b      	ldrh	r3, [r3, #0]
 8009a18:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8009a1c:	b2db      	uxtb	r3, r3
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	f000 80bf 	beq.w	8009ba2 <HAL_TIM_PeriodElapsedCallback+0xbd2>
					int16_t dwl_tmp = 0, dwr_tmp = 0;
 8009a24:	2300      	movs	r3, #0
 8009a26:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8009a28:	2300      	movs	r3, #0
 8009a2a:	857b      	strh	r3, [r7, #42]	; 0x2a
					dif_l = (int32_t) ad_l - base_l;
 8009a2c:	4b88      	ldr	r3, [pc, #544]	; (8009c50 <HAL_TIM_PeriodElapsedCallback+0xc80>)
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	b29a      	uxth	r2, r3
 8009a32:	4b88      	ldr	r3, [pc, #544]	; (8009c54 <HAL_TIM_PeriodElapsedCallback+0xc84>)
 8009a34:	881b      	ldrh	r3, [r3, #0]
 8009a36:	1ad3      	subs	r3, r2, r3
 8009a38:	b29b      	uxth	r3, r3
 8009a3a:	b21a      	sxth	r2, r3
 8009a3c:	4b86      	ldr	r3, [pc, #536]	; (8009c58 <HAL_TIM_PeriodElapsedCallback+0xc88>)
 8009a3e:	801a      	strh	r2, [r3, #0]
					dif_r = (int32_t) ad_r - base_r;
 8009a40:	4b7d      	ldr	r3, [pc, #500]	; (8009c38 <HAL_TIM_PeriodElapsedCallback+0xc68>)
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	b29a      	uxth	r2, r3
 8009a46:	4b85      	ldr	r3, [pc, #532]	; (8009c5c <HAL_TIM_PeriodElapsedCallback+0xc8c>)
 8009a48:	881b      	ldrh	r3, [r3, #0]
 8009a4a:	1ad3      	subs	r3, r2, r3
 8009a4c:	b29b      	uxth	r3, r3
 8009a4e:	b21a      	sxth	r2, r3
 8009a50:	4b83      	ldr	r3, [pc, #524]	; (8009c60 <HAL_TIM_PeriodElapsedCallback+0xc90>)
 8009a52:	801a      	strh	r2, [r3, #0]

					if(CTRL_BASE_L < dif_l || CTRL_BASE_R < dif_r){
 8009a54:	4b80      	ldr	r3, [pc, #512]	; (8009c58 <HAL_TIM_PeriodElapsedCallback+0xc88>)
 8009a56:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009a5a:	2b32      	cmp	r3, #50	; 0x32
 8009a5c:	dc04      	bgt.n	8009a68 <HAL_TIM_PeriodElapsedCallback+0xa98>
 8009a5e:	4b80      	ldr	r3, [pc, #512]	; (8009c60 <HAL_TIM_PeriodElapsedCallback+0xc90>)
 8009a60:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009a64:	2b19      	cmp	r3, #25
 8009a66:	dd76      	ble.n	8009b56 <HAL_TIM_PeriodElapsedCallback+0xb86>
						if(CTRL_BASE_L < dif_l){
 8009a68:	4b7b      	ldr	r3, [pc, #492]	; (8009c58 <HAL_TIM_PeriodElapsedCallback+0xc88>)
 8009a6a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009a6e:	2b32      	cmp	r3, #50	; 0x32
 8009a70:	dd38      	ble.n	8009ae4 <HAL_TIM_PeriodElapsedCallback+0xb14>
							dwl_tmp += CTRL_CONT_W * 0.5 * dif_l;				//a比例制御値を決定
 8009a72:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8009a76:	4618      	mov	r0, r3
 8009a78:	f7f6 fd4c 	bl	8000514 <__aeabi_i2d>
 8009a7c:	4604      	mov	r4, r0
 8009a7e:	460d      	mov	r5, r1
 8009a80:	4b75      	ldr	r3, [pc, #468]	; (8009c58 <HAL_TIM_PeriodElapsedCallback+0xc88>)
 8009a82:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009a86:	4618      	mov	r0, r3
 8009a88:	f7f6 fd44 	bl	8000514 <__aeabi_i2d>
 8009a8c:	f04f 0200 	mov.w	r2, #0
 8009a90:	4b74      	ldr	r3, [pc, #464]	; (8009c64 <HAL_TIM_PeriodElapsedCallback+0xc94>)
 8009a92:	f7f6 fda9 	bl	80005e8 <__aeabi_dmul>
 8009a96:	4602      	mov	r2, r0
 8009a98:	460b      	mov	r3, r1
 8009a9a:	4620      	mov	r0, r4
 8009a9c:	4629      	mov	r1, r5
 8009a9e:	f7f6 fbed 	bl	800027c <__adddf3>
 8009aa2:	4603      	mov	r3, r0
 8009aa4:	460c      	mov	r4, r1
 8009aa6:	4618      	mov	r0, r3
 8009aa8:	4621      	mov	r1, r4
 8009aaa:	f7f7 f84d 	bl	8000b48 <__aeabi_d2iz>
 8009aae:	4603      	mov	r3, r0
 8009ab0:	85bb      	strh	r3, [r7, #44]	; 0x2c
							dwr_tmp += -1 * CTRL_CONT_W * dif_l;		//a比例制御値を決定
 8009ab2:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8009ab6:	ee07 3a90 	vmov	s15, r3
 8009aba:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009abe:	4b66      	ldr	r3, [pc, #408]	; (8009c58 <HAL_TIM_PeriodElapsedCallback+0xc88>)
 8009ac0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009ac4:	ee07 3a90 	vmov	s15, r3
 8009ac8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009acc:	eefe 6a00 	vmov.f32	s13, #224	; 0xbf000000 -0.5
 8009ad0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8009ad4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009ad8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009adc:	ee17 3a90 	vmov	r3, s15
 8009ae0:	857b      	strh	r3, [r7, #42]	; 0x2a
 8009ae2:	e034      	b.n	8009b4e <HAL_TIM_PeriodElapsedCallback+0xb7e>
						}
						else if(CTRL_BASE_R < dif_r){
 8009ae4:	4b5e      	ldr	r3, [pc, #376]	; (8009c60 <HAL_TIM_PeriodElapsedCallback+0xc90>)
 8009ae6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009aea:	2b19      	cmp	r3, #25
 8009aec:	dd2f      	ble.n	8009b4e <HAL_TIM_PeriodElapsedCallback+0xb7e>
							dwl_tmp += -1 * CTRL_CONT_W * dif_r;		//a比例制御値を決定
 8009aee:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8009af2:	ee07 3a90 	vmov	s15, r3
 8009af6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009afa:	4b59      	ldr	r3, [pc, #356]	; (8009c60 <HAL_TIM_PeriodElapsedCallback+0xc90>)
 8009afc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009b00:	ee07 3a90 	vmov	s15, r3
 8009b04:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009b08:	eefe 6a00 	vmov.f32	s13, #224	; 0xbf000000 -0.5
 8009b0c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8009b10:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009b14:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009b18:	ee17 3a90 	vmov	r3, s15
 8009b1c:	85bb      	strh	r3, [r7, #44]	; 0x2c
							dwr_tmp += CTRL_CONT_W * dif_r;				//a比例制御値を決定
 8009b1e:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8009b22:	ee07 3a90 	vmov	s15, r3
 8009b26:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009b2a:	4b4d      	ldr	r3, [pc, #308]	; (8009c60 <HAL_TIM_PeriodElapsedCallback+0xc90>)
 8009b2c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009b30:	ee07 3a90 	vmov	s15, r3
 8009b34:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009b38:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8009b3c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8009b40:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009b44:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009b48:	ee17 3a90 	vmov	r3, s15
 8009b4c:	857b      	strh	r3, [r7, #42]	; 0x2a
						}
						W_G_flag = 1;
 8009b4e:	4b46      	ldr	r3, [pc, #280]	; (8009c68 <HAL_TIM_PeriodElapsedCallback+0xc98>)
 8009b50:	2201      	movs	r2, #1
 8009b52:	701a      	strb	r2, [r3, #0]
 8009b54:	e002      	b.n	8009b5c <HAL_TIM_PeriodElapsedCallback+0xb8c>
					}else{
						W_G_flag = 0;
 8009b56:	4b44      	ldr	r3, [pc, #272]	; (8009c68 <HAL_TIM_PeriodElapsedCallback+0xc98>)
 8009b58:	2200      	movs	r2, #0
 8009b5a:	701a      	strb	r2, [r3, #0]
					}
					dwl = max(min(CTRL_MAX_W, dwl_tmp), -1 * CTRL_MAX_W);
 8009b5c:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8009b60:	f513 7f7a 	cmn.w	r3, #1000	; 0x3e8
 8009b64:	dd08      	ble.n	8009b78 <HAL_TIM_PeriodElapsedCallback+0xba8>
 8009b66:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8009b6a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009b6e:	bfa8      	it	ge
 8009b70:	f44f 737a 	movge.w	r3, #1000	; 0x3e8
 8009b74:	b21b      	sxth	r3, r3
 8009b76:	e000      	b.n	8009b7a <HAL_TIM_PeriodElapsedCallback+0xbaa>
 8009b78:	4b3c      	ldr	r3, [pc, #240]	; (8009c6c <HAL_TIM_PeriodElapsedCallback+0xc9c>)
 8009b7a:	4a3d      	ldr	r2, [pc, #244]	; (8009c70 <HAL_TIM_PeriodElapsedCallback+0xca0>)
 8009b7c:	8013      	strh	r3, [r2, #0]
					dwr = max(min(CTRL_MAX_W, dwr_tmp), -1 * CTRL_MAX_W);
 8009b7e:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8009b82:	f513 7f7a 	cmn.w	r3, #1000	; 0x3e8
 8009b86:	dd08      	ble.n	8009b9a <HAL_TIM_PeriodElapsedCallback+0xbca>
 8009b88:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8009b8c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009b90:	bfa8      	it	ge
 8009b92:	f44f 737a 	movge.w	r3, #1000	; 0x3e8
 8009b96:	b21b      	sxth	r3, r3
 8009b98:	e000      	b.n	8009b9c <HAL_TIM_PeriodElapsedCallback+0xbcc>
 8009b9a:	4b34      	ldr	r3, [pc, #208]	; (8009c6c <HAL_TIM_PeriodElapsedCallback+0xc9c>)
 8009b9c:	4a35      	ldr	r2, [pc, #212]	; (8009c74 <HAL_TIM_PeriodElapsedCallback+0xca4>)
 8009b9e:	8013      	strh	r3, [r2, #0]
 8009ba0:	e006      	b.n	8009bb0 <HAL_TIM_PeriodElapsedCallback+0xbe0>
				}else{
					//a制御フラグがなければ壁制御値0
					dwl = dwr = 0;
 8009ba2:	2100      	movs	r1, #0
 8009ba4:	4b33      	ldr	r3, [pc, #204]	; (8009c74 <HAL_TIM_PeriodElapsedCallback+0xca4>)
 8009ba6:	460a      	mov	r2, r1
 8009ba8:	801a      	strh	r2, [r3, #0]
 8009baa:	4b31      	ldr	r3, [pc, #196]	; (8009c70 <HAL_TIM_PeriodElapsedCallback+0xca0>)
 8009bac:	460a      	mov	r2, r1
 8009bae:	801a      	strh	r2, [r3, #0]
				}

				if(MF.FLAG.GCTRL){
 8009bb0:	4b26      	ldr	r3, [pc, #152]	; (8009c4c <HAL_TIM_PeriodElapsedCallback+0xc7c>)
 8009bb2:	881b      	ldrh	r3, [r3, #0]
 8009bb4:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8009bb8:	b2db      	uxtb	r3, r3
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d066      	beq.n	8009c8c <HAL_TIM_PeriodElapsedCallback+0xcbc>
				}

					dg = CTRL_CONT_G * gyro_read_z();			//a角速度制御
					dg = CTRL_CONT_G * degree_z;				//a角度制御
*/
					dg = CTRL_CONT_G * (degree_z - target_degree_z);		//角度制御(目標角度はスタートを0度とし、旋回量と対応付け)
 8009bbe:	4b2e      	ldr	r3, [pc, #184]	; (8009c78 <HAL_TIM_PeriodElapsedCallback+0xca8>)
 8009bc0:	ed93 7a00 	vldr	s14, [r3]
 8009bc4:	4b2d      	ldr	r3, [pc, #180]	; (8009c7c <HAL_TIM_PeriodElapsedCallback+0xcac>)
 8009bc6:	edd3 7a00 	vldr	s15, [r3]
 8009bca:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009bce:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009bd2:	ee17 3a90 	vmov	r3, s15
 8009bd6:	b21a      	sxth	r2, r3
 8009bd8:	4b29      	ldr	r3, [pc, #164]	; (8009c80 <HAL_TIM_PeriodElapsedCallback+0xcb0>)
 8009bda:	801a      	strh	r2, [r3, #0]

					dg = max(min(CTRL_MAX_G, dg), -1 * CTRL_MAX_G);
 8009bdc:	4b28      	ldr	r3, [pc, #160]	; (8009c80 <HAL_TIM_PeriodElapsedCallback+0xcb0>)
 8009bde:	881b      	ldrh	r3, [r3, #0]
 8009be0:	b21b      	sxth	r3, r3
 8009be2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009be6:	da05      	bge.n	8009bf4 <HAL_TIM_PeriodElapsedCallback+0xc24>
 8009be8:	4b25      	ldr	r3, [pc, #148]	; (8009c80 <HAL_TIM_PeriodElapsedCallback+0xcb0>)
 8009bea:	881b      	ldrh	r3, [r3, #0]
 8009bec:	b21b      	sxth	r3, r3
 8009bee:	f513 7f7a 	cmn.w	r3, #1000	; 0x3e8
 8009bf2:	dd0c      	ble.n	8009c0e <HAL_TIM_PeriodElapsedCallback+0xc3e>
 8009bf4:	4b22      	ldr	r3, [pc, #136]	; (8009c80 <HAL_TIM_PeriodElapsedCallback+0xcb0>)
 8009bf6:	881b      	ldrh	r3, [r3, #0]
 8009bf8:	b21b      	sxth	r3, r3
 8009bfa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009bfe:	da03      	bge.n	8009c08 <HAL_TIM_PeriodElapsedCallback+0xc38>
 8009c00:	4b1f      	ldr	r3, [pc, #124]	; (8009c80 <HAL_TIM_PeriodElapsedCallback+0xcb0>)
 8009c02:	881b      	ldrh	r3, [r3, #0]
 8009c04:	b21b      	sxth	r3, r3
 8009c06:	e003      	b.n	8009c10 <HAL_TIM_PeriodElapsedCallback+0xc40>
 8009c08:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8009c0c:	e000      	b.n	8009c10 <HAL_TIM_PeriodElapsedCallback+0xc40>
 8009c0e:	4b17      	ldr	r3, [pc, #92]	; (8009c6c <HAL_TIM_PeriodElapsedCallback+0xc9c>)
 8009c10:	4a1b      	ldr	r2, [pc, #108]	; (8009c80 <HAL_TIM_PeriodElapsedCallback+0xcb0>)
 8009c12:	8013      	strh	r3, [r2, #0]
					dgl = dg;
 8009c14:	4b1a      	ldr	r3, [pc, #104]	; (8009c80 <HAL_TIM_PeriodElapsedCallback+0xcb0>)
 8009c16:	881b      	ldrh	r3, [r3, #0]
 8009c18:	b21a      	sxth	r2, r3
 8009c1a:	4b1a      	ldr	r3, [pc, #104]	; (8009c84 <HAL_TIM_PeriodElapsedCallback+0xcb4>)
 8009c1c:	801a      	strh	r2, [r3, #0]
					dgr = -1*dg;
 8009c1e:	4b18      	ldr	r3, [pc, #96]	; (8009c80 <HAL_TIM_PeriodElapsedCallback+0xcb0>)
 8009c20:	881b      	ldrh	r3, [r3, #0]
 8009c22:	b21b      	sxth	r3, r3
 8009c24:	b29b      	uxth	r3, r3
 8009c26:	425b      	negs	r3, r3
 8009c28:	b29b      	uxth	r3, r3
 8009c2a:	b21a      	sxth	r2, r3
 8009c2c:	4b16      	ldr	r3, [pc, #88]	; (8009c88 <HAL_TIM_PeriodElapsedCallback+0xcb8>)
 8009c2e:	801a      	strh	r2, [r3, #0]
				}else{
					//a制御フラグがなければ壁制御値0
					dgl = dgr = 0;
				}
				break;
 8009c30:	e033      	b.n	8009c9a <HAL_TIM_PeriodElapsedCallback+0xcca>
 8009c32:	bf00      	nop
 8009c34:	20000b80 	.word	0x20000b80
 8009c38:	20000fe4 	.word	0x20000fe4
 8009c3c:	40020000 	.word	0x40020000
 8009c40:	40020800 	.word	0x40020800
 8009c44:	20000dd8 	.word	0x20000dd8
 8009c48:	20000c84 	.word	0x20000c84
 8009c4c:	20000fe8 	.word	0x20000fe8
 8009c50:	20000b7c 	.word	0x20000b7c
 8009c54:	200003cc 	.word	0x200003cc
 8009c58:	20000bd0 	.word	0x20000bd0
 8009c5c:	20000340 	.word	0x20000340
 8009c60:	20000c32 	.word	0x20000c32
 8009c64:	3fd00000 	.word	0x3fd00000
 8009c68:	20000c78 	.word	0x20000c78
 8009c6c:	fffffc18 	.word	0xfffffc18
 8009c70:	20000b78 	.word	0x20000b78
 8009c74:	20000ff4 	.word	0x20000ff4
 8009c78:	20000bdc 	.word	0x20000bdc
 8009c7c:	20000c7c 	.word	0x20000c7c
 8009c80:	20000c94 	.word	0x20000c94
 8009c84:	2000021c 	.word	0x2000021c
 8009c88:	20000bce 	.word	0x20000bce
					dgl = dgr = 0;
 8009c8c:	2100      	movs	r1, #0
 8009c8e:	4bb6      	ldr	r3, [pc, #728]	; (8009f68 <HAL_TIM_PeriodElapsedCallback+0xf98>)
 8009c90:	460a      	mov	r2, r1
 8009c92:	801a      	strh	r2, [r3, #0]
 8009c94:	4bb5      	ldr	r3, [pc, #724]	; (8009f6c <HAL_TIM_PeriodElapsedCallback+0xf9c>)
 8009c96:	460a      	mov	r2, r1
 8009c98:	801a      	strh	r2, [r3, #0]
				break;
 8009c9a:	bf00      	nop
		}


		if(MF.FLAG.DRV){
 8009c9c:	4bb4      	ldr	r3, [pc, #720]	; (8009f70 <HAL_TIM_PeriodElapsedCallback+0xfa0>)
 8009c9e:	881b      	ldrh	r3, [r3, #0]
 8009ca0:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8009ca4:	b2db      	uxtb	r3, r3
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	f000 8193 	beq.w	8009fd2 <HAL_TIM_PeriodElapsedCallback+0x1002>
			if(W_G_flag == 0){
 8009cac:	4bb1      	ldr	r3, [pc, #708]	; (8009f74 <HAL_TIM_PeriodElapsedCallback+0xfa4>)
 8009cae:	781b      	ldrb	r3, [r3, #0]
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	d130      	bne.n	8009d16 <HAL_TIM_PeriodElapsedCallback+0xd46>
				pulse_l = pulse_l + dgl + dwl;
 8009cb4:	4bad      	ldr	r3, [pc, #692]	; (8009f6c <HAL_TIM_PeriodElapsedCallback+0xf9c>)
 8009cb6:	881b      	ldrh	r3, [r3, #0]
 8009cb8:	b21b      	sxth	r3, r3
 8009cba:	ee07 3a90 	vmov	s15, r3
 8009cbe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009cc2:	4bad      	ldr	r3, [pc, #692]	; (8009f78 <HAL_TIM_PeriodElapsedCallback+0xfa8>)
 8009cc4:	edd3 7a00 	vldr	s15, [r3]
 8009cc8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009ccc:	4bab      	ldr	r3, [pc, #684]	; (8009f7c <HAL_TIM_PeriodElapsedCallback+0xfac>)
 8009cce:	881b      	ldrh	r3, [r3, #0]
 8009cd0:	b21b      	sxth	r3, r3
 8009cd2:	ee07 3a90 	vmov	s15, r3
 8009cd6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009cda:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009cde:	4ba6      	ldr	r3, [pc, #664]	; (8009f78 <HAL_TIM_PeriodElapsedCallback+0xfa8>)
 8009ce0:	edc3 7a00 	vstr	s15, [r3]
				pulse_r = pulse_r + dgr + dwr;
 8009ce4:	4ba0      	ldr	r3, [pc, #640]	; (8009f68 <HAL_TIM_PeriodElapsedCallback+0xf98>)
 8009ce6:	881b      	ldrh	r3, [r3, #0]
 8009ce8:	b21b      	sxth	r3, r3
 8009cea:	ee07 3a90 	vmov	s15, r3
 8009cee:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009cf2:	4ba3      	ldr	r3, [pc, #652]	; (8009f80 <HAL_TIM_PeriodElapsedCallback+0xfb0>)
 8009cf4:	edd3 7a00 	vldr	s15, [r3]
 8009cf8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009cfc:	4ba1      	ldr	r3, [pc, #644]	; (8009f84 <HAL_TIM_PeriodElapsedCallback+0xfb4>)
 8009cfe:	881b      	ldrh	r3, [r3, #0]
 8009d00:	b21b      	sxth	r3, r3
 8009d02:	ee07 3a90 	vmov	s15, r3
 8009d06:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009d0a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009d0e:	4b9c      	ldr	r3, [pc, #624]	; (8009f80 <HAL_TIM_PeriodElapsedCallback+0xfb0>)
 8009d10:	edc3 7a00 	vstr	s15, [r3]
 8009d14:	e01d      	b.n	8009d52 <HAL_TIM_PeriodElapsedCallback+0xd82>
			}else{
				pulse_l = pulse_l + dwl;
 8009d16:	4b99      	ldr	r3, [pc, #612]	; (8009f7c <HAL_TIM_PeriodElapsedCallback+0xfac>)
 8009d18:	881b      	ldrh	r3, [r3, #0]
 8009d1a:	b21b      	sxth	r3, r3
 8009d1c:	ee07 3a90 	vmov	s15, r3
 8009d20:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009d24:	4b94      	ldr	r3, [pc, #592]	; (8009f78 <HAL_TIM_PeriodElapsedCallback+0xfa8>)
 8009d26:	edd3 7a00 	vldr	s15, [r3]
 8009d2a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009d2e:	4b92      	ldr	r3, [pc, #584]	; (8009f78 <HAL_TIM_PeriodElapsedCallback+0xfa8>)
 8009d30:	edc3 7a00 	vstr	s15, [r3]
				pulse_r = pulse_r + dwr;
 8009d34:	4b93      	ldr	r3, [pc, #588]	; (8009f84 <HAL_TIM_PeriodElapsedCallback+0xfb4>)
 8009d36:	881b      	ldrh	r3, [r3, #0]
 8009d38:	b21b      	sxth	r3, r3
 8009d3a:	ee07 3a90 	vmov	s15, r3
 8009d3e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009d42:	4b8f      	ldr	r3, [pc, #572]	; (8009f80 <HAL_TIM_PeriodElapsedCallback+0xfb0>)
 8009d44:	edd3 7a00 	vldr	s15, [r3]
 8009d48:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009d4c:	4b8c      	ldr	r3, [pc, #560]	; (8009f80 <HAL_TIM_PeriodElapsedCallback+0xfb0>)
 8009d4e:	edc3 7a00 	vstr	s15, [r3]
			}
			pulse_l = min(max(pulse_l, -1000), 1000);
 8009d52:	4b89      	ldr	r3, [pc, #548]	; (8009f78 <HAL_TIM_PeriodElapsedCallback+0xfa8>)
 8009d54:	edd3 7a00 	vldr	s15, [r3]
 8009d58:	ed9f 7a8b 	vldr	s14, [pc, #556]	; 8009f88 <HAL_TIM_PeriodElapsedCallback+0xfb8>
 8009d5c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009d60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009d64:	bfcc      	ite	gt
 8009d66:	2301      	movgt	r3, #1
 8009d68:	2300      	movle	r3, #0
 8009d6a:	b2db      	uxtb	r3, r3
 8009d6c:	f083 0301 	eor.w	r3, r3, #1
 8009d70:	b2db      	uxtb	r3, r3
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	d111      	bne.n	8009d9a <HAL_TIM_PeriodElapsedCallback+0xdca>
 8009d76:	4b80      	ldr	r3, [pc, #512]	; (8009f78 <HAL_TIM_PeriodElapsedCallback+0xfa8>)
 8009d78:	edd3 7a00 	vldr	s15, [r3]
 8009d7c:	ed9f 7a83 	vldr	s14, [pc, #524]	; 8009f8c <HAL_TIM_PeriodElapsedCallback+0xfbc>
 8009d80:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009d84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009d88:	bfcc      	ite	gt
 8009d8a:	2301      	movgt	r3, #1
 8009d8c:	2300      	movle	r3, #0
 8009d8e:	b2db      	uxtb	r3, r3
 8009d90:	f083 0301 	eor.w	r3, r3, #1
 8009d94:	b2db      	uxtb	r3, r3
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d00e      	beq.n	8009db8 <HAL_TIM_PeriodElapsedCallback+0xde8>
 8009d9a:	4b77      	ldr	r3, [pc, #476]	; (8009f78 <HAL_TIM_PeriodElapsedCallback+0xfa8>)
 8009d9c:	edd3 7a00 	vldr	s15, [r3]
 8009da0:	ed9f 7a79 	vldr	s14, [pc, #484]	; 8009f88 <HAL_TIM_PeriodElapsedCallback+0xfb8>
 8009da4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009da8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009dac:	dd02      	ble.n	8009db4 <HAL_TIM_PeriodElapsedCallback+0xde4>
 8009dae:	4b72      	ldr	r3, [pc, #456]	; (8009f78 <HAL_TIM_PeriodElapsedCallback+0xfa8>)
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	e002      	b.n	8009dba <HAL_TIM_PeriodElapsedCallback+0xdea>
 8009db4:	4b76      	ldr	r3, [pc, #472]	; (8009f90 <HAL_TIM_PeriodElapsedCallback+0xfc0>)
 8009db6:	e000      	b.n	8009dba <HAL_TIM_PeriodElapsedCallback+0xdea>
 8009db8:	4b76      	ldr	r3, [pc, #472]	; (8009f94 <HAL_TIM_PeriodElapsedCallback+0xfc4>)
 8009dba:	4a6f      	ldr	r2, [pc, #444]	; (8009f78 <HAL_TIM_PeriodElapsedCallback+0xfa8>)
 8009dbc:	6013      	str	r3, [r2, #0]
			pulse_r = min(max(pulse_r, -1000), 1000);
 8009dbe:	4b70      	ldr	r3, [pc, #448]	; (8009f80 <HAL_TIM_PeriodElapsedCallback+0xfb0>)
 8009dc0:	edd3 7a00 	vldr	s15, [r3]
 8009dc4:	ed9f 7a70 	vldr	s14, [pc, #448]	; 8009f88 <HAL_TIM_PeriodElapsedCallback+0xfb8>
 8009dc8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009dcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009dd0:	bfcc      	ite	gt
 8009dd2:	2301      	movgt	r3, #1
 8009dd4:	2300      	movle	r3, #0
 8009dd6:	b2db      	uxtb	r3, r3
 8009dd8:	f083 0301 	eor.w	r3, r3, #1
 8009ddc:	b2db      	uxtb	r3, r3
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	d111      	bne.n	8009e06 <HAL_TIM_PeriodElapsedCallback+0xe36>
 8009de2:	4b67      	ldr	r3, [pc, #412]	; (8009f80 <HAL_TIM_PeriodElapsedCallback+0xfb0>)
 8009de4:	edd3 7a00 	vldr	s15, [r3]
 8009de8:	ed9f 7a68 	vldr	s14, [pc, #416]	; 8009f8c <HAL_TIM_PeriodElapsedCallback+0xfbc>
 8009dec:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009df0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009df4:	bfcc      	ite	gt
 8009df6:	2301      	movgt	r3, #1
 8009df8:	2300      	movle	r3, #0
 8009dfa:	b2db      	uxtb	r3, r3
 8009dfc:	f083 0301 	eor.w	r3, r3, #1
 8009e00:	b2db      	uxtb	r3, r3
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d00e      	beq.n	8009e24 <HAL_TIM_PeriodElapsedCallback+0xe54>
 8009e06:	4b5e      	ldr	r3, [pc, #376]	; (8009f80 <HAL_TIM_PeriodElapsedCallback+0xfb0>)
 8009e08:	edd3 7a00 	vldr	s15, [r3]
 8009e0c:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 8009f88 <HAL_TIM_PeriodElapsedCallback+0xfb8>
 8009e10:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009e14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009e18:	dd02      	ble.n	8009e20 <HAL_TIM_PeriodElapsedCallback+0xe50>
 8009e1a:	4b59      	ldr	r3, [pc, #356]	; (8009f80 <HAL_TIM_PeriodElapsedCallback+0xfb0>)
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	e002      	b.n	8009e26 <HAL_TIM_PeriodElapsedCallback+0xe56>
 8009e20:	4b5b      	ldr	r3, [pc, #364]	; (8009f90 <HAL_TIM_PeriodElapsedCallback+0xfc0>)
 8009e22:	e000      	b.n	8009e26 <HAL_TIM_PeriodElapsedCallback+0xe56>
 8009e24:	4b5b      	ldr	r3, [pc, #364]	; (8009f94 <HAL_TIM_PeriodElapsedCallback+0xfc4>)
 8009e26:	4a56      	ldr	r2, [pc, #344]	; (8009f80 <HAL_TIM_PeriodElapsedCallback+0xfb0>)
 8009e28:	6013      	str	r3, [r2, #0]

			if(pulse_l > 0){
 8009e2a:	4b53      	ldr	r3, [pc, #332]	; (8009f78 <HAL_TIM_PeriodElapsedCallback+0xfa8>)
 8009e2c:	edd3 7a00 	vldr	s15, [r3]
 8009e30:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8009e34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009e38:	dd17      	ble.n	8009e6a <HAL_TIM_PeriodElapsedCallback+0xe9a>
				drive_dir(0, 0);
 8009e3a:	2100      	movs	r1, #0
 8009e3c:	2000      	movs	r0, #0
 8009e3e:	f7fa ffc1 	bl	8004dc4 <drive_dir>
				ConfigOC.Pulse = pulse_l;
 8009e42:	4b4d      	ldr	r3, [pc, #308]	; (8009f78 <HAL_TIM_PeriodElapsedCallback+0xfa8>)
 8009e44:	edd3 7a00 	vldr	s15, [r3]
 8009e48:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009e4c:	ee17 3a90 	vmov	r3, s15
 8009e50:	613b      	str	r3, [r7, #16]
				HAL_TIM_PWM_ConfigChannel(&htim2, &ConfigOC, TIM_CHANNEL_1);
 8009e52:	f107 030c 	add.w	r3, r7, #12
 8009e56:	2200      	movs	r2, #0
 8009e58:	4619      	mov	r1, r3
 8009e5a:	484f      	ldr	r0, [pc, #316]	; (8009f98 <HAL_TIM_PeriodElapsedCallback+0xfc8>)
 8009e5c:	f7f9 feb6 	bl	8003bcc <HAL_TIM_PWM_ConfigChannel>
				HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_1);
 8009e60:	2100      	movs	r1, #0
 8009e62:	484d      	ldr	r0, [pc, #308]	; (8009f98 <HAL_TIM_PeriodElapsedCallback+0xfc8>)
 8009e64:	f7f9 fc4a 	bl	80036fc <HAL_TIM_PWM_Start>
 8009e68:	e020      	b.n	8009eac <HAL_TIM_PeriodElapsedCallback+0xedc>
			}
			else if(pulse_l < 0){
 8009e6a:	4b43      	ldr	r3, [pc, #268]	; (8009f78 <HAL_TIM_PeriodElapsedCallback+0xfa8>)
 8009e6c:	edd3 7a00 	vldr	s15, [r3]
 8009e70:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8009e74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009e78:	d518      	bpl.n	8009eac <HAL_TIM_PeriodElapsedCallback+0xedc>
				drive_dir(0, 1);
 8009e7a:	2101      	movs	r1, #1
 8009e7c:	2000      	movs	r0, #0
 8009e7e:	f7fa ffa1 	bl	8004dc4 <drive_dir>
				ConfigOC.Pulse = -pulse_l;
 8009e82:	4b3d      	ldr	r3, [pc, #244]	; (8009f78 <HAL_TIM_PeriodElapsedCallback+0xfa8>)
 8009e84:	edd3 7a00 	vldr	s15, [r3]
 8009e88:	eef1 7a67 	vneg.f32	s15, s15
 8009e8c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009e90:	ee17 3a90 	vmov	r3, s15
 8009e94:	613b      	str	r3, [r7, #16]
				HAL_TIM_PWM_ConfigChannel(&htim2, &ConfigOC, TIM_CHANNEL_1);
 8009e96:	f107 030c 	add.w	r3, r7, #12
 8009e9a:	2200      	movs	r2, #0
 8009e9c:	4619      	mov	r1, r3
 8009e9e:	483e      	ldr	r0, [pc, #248]	; (8009f98 <HAL_TIM_PeriodElapsedCallback+0xfc8>)
 8009ea0:	f7f9 fe94 	bl	8003bcc <HAL_TIM_PWM_ConfigChannel>
				HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_1);
 8009ea4:	2100      	movs	r1, #0
 8009ea6:	483c      	ldr	r0, [pc, #240]	; (8009f98 <HAL_TIM_PeriodElapsedCallback+0xfc8>)
 8009ea8:	f7f9 fc28 	bl	80036fc <HAL_TIM_PWM_Start>
			}

			if(pulse_r > 0){
 8009eac:	4b34      	ldr	r3, [pc, #208]	; (8009f80 <HAL_TIM_PeriodElapsedCallback+0xfb0>)
 8009eae:	edd3 7a00 	vldr	s15, [r3]
 8009eb2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8009eb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009eba:	dd17      	ble.n	8009eec <HAL_TIM_PeriodElapsedCallback+0xf1c>
				drive_dir(1, 0);
 8009ebc:	2100      	movs	r1, #0
 8009ebe:	2001      	movs	r0, #1
 8009ec0:	f7fa ff80 	bl	8004dc4 <drive_dir>
				ConfigOC.Pulse = pulse_r;
 8009ec4:	4b2e      	ldr	r3, [pc, #184]	; (8009f80 <HAL_TIM_PeriodElapsedCallback+0xfb0>)
 8009ec6:	edd3 7a00 	vldr	s15, [r3]
 8009eca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009ece:	ee17 3a90 	vmov	r3, s15
 8009ed2:	613b      	str	r3, [r7, #16]
				HAL_TIM_PWM_ConfigChannel(&htim2, &ConfigOC, TIM_CHANNEL_4);
 8009ed4:	f107 030c 	add.w	r3, r7, #12
 8009ed8:	220c      	movs	r2, #12
 8009eda:	4619      	mov	r1, r3
 8009edc:	482e      	ldr	r0, [pc, #184]	; (8009f98 <HAL_TIM_PeriodElapsedCallback+0xfc8>)
 8009ede:	f7f9 fe75 	bl	8003bcc <HAL_TIM_PWM_ConfigChannel>
				HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_4);
 8009ee2:	210c      	movs	r1, #12
 8009ee4:	482c      	ldr	r0, [pc, #176]	; (8009f98 <HAL_TIM_PeriodElapsedCallback+0xfc8>)
 8009ee6:	f7f9 fc09 	bl	80036fc <HAL_TIM_PWM_Start>
 8009eea:	e020      	b.n	8009f2e <HAL_TIM_PeriodElapsedCallback+0xf5e>
			}
			else if(pulse_r < 0){
 8009eec:	4b24      	ldr	r3, [pc, #144]	; (8009f80 <HAL_TIM_PeriodElapsedCallback+0xfb0>)
 8009eee:	edd3 7a00 	vldr	s15, [r3]
 8009ef2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8009ef6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009efa:	d518      	bpl.n	8009f2e <HAL_TIM_PeriodElapsedCallback+0xf5e>
				drive_dir(1, 1);
 8009efc:	2101      	movs	r1, #1
 8009efe:	2001      	movs	r0, #1
 8009f00:	f7fa ff60 	bl	8004dc4 <drive_dir>
				ConfigOC.Pulse = -pulse_r;
 8009f04:	4b1e      	ldr	r3, [pc, #120]	; (8009f80 <HAL_TIM_PeriodElapsedCallback+0xfb0>)
 8009f06:	edd3 7a00 	vldr	s15, [r3]
 8009f0a:	eef1 7a67 	vneg.f32	s15, s15
 8009f0e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009f12:	ee17 3a90 	vmov	r3, s15
 8009f16:	613b      	str	r3, [r7, #16]
				HAL_TIM_PWM_ConfigChannel(&htim2, &ConfigOC, TIM_CHANNEL_4);
 8009f18:	f107 030c 	add.w	r3, r7, #12
 8009f1c:	220c      	movs	r2, #12
 8009f1e:	4619      	mov	r1, r3
 8009f20:	481d      	ldr	r0, [pc, #116]	; (8009f98 <HAL_TIM_PeriodElapsedCallback+0xfc8>)
 8009f22:	f7f9 fe53 	bl	8003bcc <HAL_TIM_PWM_ConfigChannel>
				HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_4);
 8009f26:	210c      	movs	r1, #12
 8009f28:	481b      	ldr	r0, [pc, #108]	; (8009f98 <HAL_TIM_PeriodElapsedCallback+0xfc8>)
 8009f2a:	f7f9 fbe7 	bl	80036fc <HAL_TIM_PWM_Start>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);
			}else{
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
			}
*/			//----look forward----
			if(ad_fr > WALL_BASE_FR || ad_fl > WALL_BASE_FL){
 8009f2e:	4b1b      	ldr	r3, [pc, #108]	; (8009f9c <HAL_TIM_PeriodElapsedCallback+0xfcc>)
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	2b96      	cmp	r3, #150	; 0x96
 8009f34:	d803      	bhi.n	8009f3e <HAL_TIM_PeriodElapsedCallback+0xf6e>
 8009f36:	4b1a      	ldr	r3, [pc, #104]	; (8009fa0 <HAL_TIM_PeriodElapsedCallback+0xfd0>)
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	2bfa      	cmp	r3, #250	; 0xfa
 8009f3c:	d905      	bls.n	8009f4a <HAL_TIM_PeriodElapsedCallback+0xf7a>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 8009f3e:	2201      	movs	r2, #1
 8009f40:	2140      	movs	r1, #64	; 0x40
 8009f42:	4818      	ldr	r0, [pc, #96]	; (8009fa4 <HAL_TIM_PeriodElapsedCallback+0xfd4>)
 8009f44:	f7f8 f9de 	bl	8002304 <HAL_GPIO_WritePin>
 8009f48:	e004      	b.n	8009f54 <HAL_TIM_PeriodElapsedCallback+0xf84>
			}else{
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 8009f4a:	2200      	movs	r2, #0
 8009f4c:	2140      	movs	r1, #64	; 0x40
 8009f4e:	4815      	ldr	r0, [pc, #84]	; (8009fa4 <HAL_TIM_PeriodElapsedCallback+0xfd4>)
 8009f50:	f7f8 f9d8 	bl	8002304 <HAL_GPIO_WritePin>
			}
			//----look forwardL----
			if(ad_fl > WALL_BASE_FL){
 8009f54:	4b12      	ldr	r3, [pc, #72]	; (8009fa0 <HAL_TIM_PeriodElapsedCallback+0xfd0>)
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	2bfa      	cmp	r3, #250	; 0xfa
 8009f5a:	d925      	bls.n	8009fa8 <HAL_TIM_PeriodElapsedCallback+0xfd8>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8009f5c:	2201      	movs	r2, #1
 8009f5e:	2110      	movs	r1, #16
 8009f60:	4810      	ldr	r0, [pc, #64]	; (8009fa4 <HAL_TIM_PeriodElapsedCallback+0xfd4>)
 8009f62:	f7f8 f9cf 	bl	8002304 <HAL_GPIO_WritePin>
 8009f66:	e024      	b.n	8009fb2 <HAL_TIM_PeriodElapsedCallback+0xfe2>
 8009f68:	20000bce 	.word	0x20000bce
 8009f6c:	2000021c 	.word	0x2000021c
 8009f70:	20000fe8 	.word	0x20000fe8
 8009f74:	20000c78 	.word	0x20000c78
 8009f78:	20000c28 	.word	0x20000c28
 8009f7c:	20000b78 	.word	0x20000b78
 8009f80:	200007fc 	.word	0x200007fc
 8009f84:	20000ff4 	.word	0x20000ff4
 8009f88:	c47a0000 	.word	0xc47a0000
 8009f8c:	447a0000 	.word	0x447a0000
 8009f90:	c47a0000 	.word	0xc47a0000
 8009f94:	447a0000 	.word	0x447a0000
 8009f98:	20000c98 	.word	0x20000c98
 8009f9c:	20000c84 	.word	0x20000c84
 8009fa0:	20000dd8 	.word	0x20000dd8
 8009fa4:	40020000 	.word	0x40020000
			}else{
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8009fa8:	2200      	movs	r2, #0
 8009faa:	2110      	movs	r1, #16
 8009fac:	4849      	ldr	r0, [pc, #292]	; (800a0d4 <HAL_TIM_PeriodElapsedCallback+0x1104>)
 8009fae:	f7f8 f9a9 	bl	8002304 <HAL_GPIO_WritePin>
			}
			//----look forward-R---
			if(ad_fr > WALL_BASE_FR){
 8009fb2:	4b49      	ldr	r3, [pc, #292]	; (800a0d8 <HAL_TIM_PeriodElapsedCallback+0x1108>)
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	2b96      	cmp	r3, #150	; 0x96
 8009fb8:	d905      	bls.n	8009fc6 <HAL_TIM_PeriodElapsedCallback+0xff6>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);
 8009fba:	2201      	movs	r2, #1
 8009fbc:	2180      	movs	r1, #128	; 0x80
 8009fbe:	4845      	ldr	r0, [pc, #276]	; (800a0d4 <HAL_TIM_PeriodElapsedCallback+0x1104>)
 8009fc0:	f7f8 f9a0 	bl	8002304 <HAL_GPIO_WritePin>
 8009fc4:	e00d      	b.n	8009fe2 <HAL_TIM_PeriodElapsedCallback+0x1012>
			}else{
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 8009fc6:	2200      	movs	r2, #0
 8009fc8:	2180      	movs	r1, #128	; 0x80
 8009fca:	4842      	ldr	r0, [pc, #264]	; (800a0d4 <HAL_TIM_PeriodElapsedCallback+0x1104>)
 8009fcc:	f7f8 f99a 	bl	8002304 <HAL_GPIO_WritePin>
 8009fd0:	e007      	b.n	8009fe2 <HAL_TIM_PeriodElapsedCallback+0x1012>
			}
		}else{
			drive_dir(0, 2);
 8009fd2:	2102      	movs	r1, #2
 8009fd4:	2000      	movs	r0, #0
 8009fd6:	f7fa fef5 	bl	8004dc4 <drive_dir>
			drive_dir(1, 2);
 8009fda:	2102      	movs	r1, #2
 8009fdc:	2001      	movs	r0, #1
 8009fde:	f7fa fef1 	bl	8004dc4 <drive_dir>
		}


		//wall check
		//----look right----
		if(ad_r > WALL_BASE_R){
 8009fe2:	4b3e      	ldr	r3, [pc, #248]	; (800a0dc <HAL_TIM_PeriodElapsedCallback+0x110c>)
 8009fe4:	681b      	ldr	r3, [r3, #0]
 8009fe6:	2b64      	cmp	r3, #100	; 0x64
 8009fe8:	d906      	bls.n	8009ff8 <HAL_TIM_PeriodElapsedCallback+0x1028>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 8009fea:	2201      	movs	r2, #1
 8009fec:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8009ff0:	483b      	ldr	r0, [pc, #236]	; (800a0e0 <HAL_TIM_PeriodElapsedCallback+0x1110>)
 8009ff2:	f7f8 f987 	bl	8002304 <HAL_GPIO_WritePin>
 8009ff6:	e005      	b.n	800a004 <HAL_TIM_PeriodElapsedCallback+0x1034>
		}else{
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 8009ff8:	2200      	movs	r2, #0
 8009ffa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8009ffe:	4838      	ldr	r0, [pc, #224]	; (800a0e0 <HAL_TIM_PeriodElapsedCallback+0x1110>)
 800a000:	f7f8 f980 	bl	8002304 <HAL_GPIO_WritePin>
		}
		//----look left----
		if(ad_l > WALL_BASE_L){
 800a004:	4b37      	ldr	r3, [pc, #220]	; (800a0e4 <HAL_TIM_PeriodElapsedCallback+0x1114>)
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	2b64      	cmp	r3, #100	; 0x64
 800a00a:	d905      	bls.n	800a018 <HAL_TIM_PeriodElapsedCallback+0x1048>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);
 800a00c:	2201      	movs	r2, #1
 800a00e:	2104      	movs	r1, #4
 800a010:	4835      	ldr	r0, [pc, #212]	; (800a0e8 <HAL_TIM_PeriodElapsedCallback+0x1118>)
 800a012:	f7f8 f977 	bl	8002304 <HAL_GPIO_WritePin>
 800a016:	e004      	b.n	800a022 <HAL_TIM_PeriodElapsedCallback+0x1052>
		}else{
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 800a018:	2200      	movs	r2, #0
 800a01a:	2104      	movs	r1, #4
 800a01c:	4832      	ldr	r0, [pc, #200]	; (800a0e8 <HAL_TIM_PeriodElapsedCallback+0x1118>)
 800a01e:	f7f8 f971 	bl	8002304 <HAL_GPIO_WritePin>
		}


		//battery check
		if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12) == GPIO_PIN_RESET) {	//2.1V以下で赤ランプ点灯=>LiPoが約7Vを下回るとランプ点灯
 800a022:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800a026:	482e      	ldr	r0, [pc, #184]	; (800a0e0 <HAL_TIM_PeriodElapsedCallback+0x1110>)
 800a028:	f7f8 f954 	bl	80022d4 <HAL_GPIO_ReadPin>
 800a02c:	4603      	mov	r3, r0
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d105      	bne.n	800a03e <HAL_TIM_PeriodElapsedCallback+0x106e>
		   HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_SET);
 800a032:	2201      	movs	r2, #1
 800a034:	2108      	movs	r1, #8
 800a036:	482c      	ldr	r0, [pc, #176]	; (800a0e8 <HAL_TIM_PeriodElapsedCallback+0x1118>)
 800a038:	f7f8 f964 	bl	8002304 <HAL_GPIO_WritePin>
 800a03c:	e004      	b.n	800a048 <HAL_TIM_PeriodElapsedCallback+0x1078>
		} else {
		   HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
 800a03e:	2200      	movs	r2, #0
 800a040:	2108      	movs	r1, #8
 800a042:	4829      	ldr	r0, [pc, #164]	; (800a0e8 <HAL_TIM_PeriodElapsedCallback+0x1118>)
 800a044:	f7f8 f95e 	bl	8002304 <HAL_GPIO_WritePin>
		}


		//fail safe
		if(degree_z >= target_degree_z+360 || degree_z <= target_degree_z-360 || dist_r > 360*2 || dist_l > 360*2){	//360度以上回転発生でFail Safe
 800a048:	4b28      	ldr	r3, [pc, #160]	; (800a0ec <HAL_TIM_PeriodElapsedCallback+0x111c>)
 800a04a:	edd3 7a00 	vldr	s15, [r3]
 800a04e:	ed9f 7a28 	vldr	s14, [pc, #160]	; 800a0f0 <HAL_TIM_PeriodElapsedCallback+0x1120>
 800a052:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a056:	4b27      	ldr	r3, [pc, #156]	; (800a0f4 <HAL_TIM_PeriodElapsedCallback+0x1124>)
 800a058:	edd3 7a00 	vldr	s15, [r3]
 800a05c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800a060:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a064:	d923      	bls.n	800a0ae <HAL_TIM_PeriodElapsedCallback+0x10de>
 800a066:	4b21      	ldr	r3, [pc, #132]	; (800a0ec <HAL_TIM_PeriodElapsedCallback+0x111c>)
 800a068:	edd3 7a00 	vldr	s15, [r3]
 800a06c:	ed9f 7a20 	vldr	s14, [pc, #128]	; 800a0f0 <HAL_TIM_PeriodElapsedCallback+0x1120>
 800a070:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800a074:	4b1f      	ldr	r3, [pc, #124]	; (800a0f4 <HAL_TIM_PeriodElapsedCallback+0x1124>)
 800a076:	edd3 7a00 	vldr	s15, [r3]
 800a07a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800a07e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a082:	da14      	bge.n	800a0ae <HAL_TIM_PeriodElapsedCallback+0x10de>
 800a084:	4b1c      	ldr	r3, [pc, #112]	; (800a0f8 <HAL_TIM_PeriodElapsedCallback+0x1128>)
 800a086:	edd3 7a00 	vldr	s15, [r3]
 800a08a:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 800a0fc <HAL_TIM_PeriodElapsedCallback+0x112c>
 800a08e:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a092:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a096:	dc0a      	bgt.n	800a0ae <HAL_TIM_PeriodElapsedCallback+0x10de>
 800a098:	4b19      	ldr	r3, [pc, #100]	; (800a100 <HAL_TIM_PeriodElapsedCallback+0x1130>)
 800a09a:	edd3 7a00 	vldr	s15, [r3]
 800a09e:	ed9f 7a17 	vldr	s14, [pc, #92]	; 800a0fc <HAL_TIM_PeriodElapsedCallback+0x112c>
 800a0a2:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a0a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a0aa:	dc00      	bgt.n	800a0ae <HAL_TIM_PeriodElapsedCallback+0x10de>
			   drive_dir(1, 2);
			   full_led_write(1);
		   }
		}
	}
}
 800a0ac:	e00b      	b.n	800a0c6 <HAL_TIM_PeriodElapsedCallback+0x10f6>
			   drive_dir(0, 2);
 800a0ae:	2102      	movs	r1, #2
 800a0b0:	2000      	movs	r0, #0
 800a0b2:	f7fa fe87 	bl	8004dc4 <drive_dir>
			   drive_dir(1, 2);
 800a0b6:	2102      	movs	r1, #2
 800a0b8:	2001      	movs	r0, #1
 800a0ba:	f7fa fe83 	bl	8004dc4 <drive_dir>
			   full_led_write(1);
 800a0be:	2001      	movs	r0, #1
 800a0c0:	f003 fafa 	bl	800d6b8 <full_led_write>
			   drive_dir(0, 2);
 800a0c4:	e7f3      	b.n	800a0ae <HAL_TIM_PeriodElapsedCallback+0x10de>
}
 800a0c6:	bf00      	nop
 800a0c8:	3730      	adds	r7, #48	; 0x30
 800a0ca:	46bd      	mov	sp, r7
 800a0cc:	ecbd 8b02 	vpop	{d8}
 800a0d0:	bdb0      	pop	{r4, r5, r7, pc}
 800a0d2:	bf00      	nop
 800a0d4:	40020000 	.word	0x40020000
 800a0d8:	20000c84 	.word	0x20000c84
 800a0dc:	20000fe4 	.word	0x20000fe4
 800a0e0:	40020400 	.word	0x40020400
 800a0e4:	20000b7c 	.word	0x20000b7c
 800a0e8:	40020800 	.word	0x40020800
 800a0ec:	20000c7c 	.word	0x20000c7c
 800a0f0:	43b40000 	.word	0x43b40000
 800a0f4:	20000bdc 	.word	0x20000bdc
 800a0f8:	20000b6c 	.word	0x20000b6c
 800a0fc:	44340000 	.word	0x44340000
 800a100:	20001004 	.word	0x20001004

0800a104 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800a104:	b580      	push	{r7, lr}
 800a106:	b084      	sub	sp, #16
 800a108:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800a10a:	f7f6 ff15 	bl	8000f38 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800a10e:	f000 f96b 	bl	800a3e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800a112:	f000 fc5d 	bl	800a9d0 <MX_GPIO_Init>
  MX_ADC1_Init();
 800a116:	f000 f9d1 	bl	800a4bc <MX_ADC1_Init>
  MX_TIM2_Init();
 800a11a:	f000 fa57 	bl	800a5cc <MX_TIM2_Init>
  MX_TIM3_Init();
 800a11e:	f000 fad5 	bl	800a6cc <MX_TIM3_Init>
  MX_TIM4_Init();
 800a122:	f000 fb49 	bl	800a7b8 <MX_TIM4_Init>
  MX_TIM6_Init();
 800a126:	f000 fb9b 	bl	800a860 <MX_TIM6_Init>
  MX_TIM8_Init();
 800a12a:	f000 fbcf 	bl	800a8cc <MX_TIM8_Init>
  MX_SPI3_Init();
 800a12e:	f000 fa17 	bl	800a560 <MX_SPI3_Init>
  MX_USART1_UART_Init();
 800a132:	f000 fc23 	bl	800a97c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  drive_init();
 800a136:	f7fa fd91 	bl	8004c5c <drive_init>
  gyro_init();
 800a13a:	f7fe fd6b 	bl	8008c14 <gyro_init>
  search_init();
 800a13e:	f000 fd75 	bl	800ac2c <search_init>
  sensor_init();
 800a142:	f003 f9f9 	bl	800d538 <sensor_init>

  printf("*** Welcome to WMMC ! ***\n");
 800a146:	4893      	ldr	r0, [pc, #588]	; (800a394 <main+0x290>)
 800a148:	f004 f8be 	bl	800e2c8 <puts>

  setbuf(stdout, NULL);
 800a14c:	4b92      	ldr	r3, [pc, #584]	; (800a398 <main+0x294>)
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	689b      	ldr	r3, [r3, #8]
 800a152:	2100      	movs	r1, #0
 800a154:	4618      	mov	r0, r3
 800a156:	f004 f8bf 	bl	800e2d8 <setbuf>
  HAL_TIM_Encoder_Start(&htim4,TIM_CHANNEL_ALL);
 800a15a:	213c      	movs	r1, #60	; 0x3c
 800a15c:	488f      	ldr	r0, [pc, #572]	; (800a39c <main+0x298>)
 800a15e:	f7f9 fbf5 	bl	800394c <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim8,TIM_CHANNEL_ALL);
 800a162:	213c      	movs	r1, #60	; 0x3c
 800a164:	488e      	ldr	r0, [pc, #568]	; (800a3a0 <main+0x29c>)
 800a166:	f7f9 fbf1 	bl	800394c <HAL_TIM_Encoder_Start>
  HAL_TIM_Base_Start_IT(&htim6);
 800a16a:	488e      	ldr	r0, [pc, #568]	; (800a3a4 <main+0x2a0>)
 800a16c:	f7f9 fa6d 	bl	800364a <HAL_TIM_Base_Start_IT>

  int mode = 0;
 800a170:	2300      	movs	r3, #0
 800a172:	60fb      	str	r3, [r7, #12]
  printf("Mode : %d\n", mode);
 800a174:	68f9      	ldr	r1, [r7, #12]
 800a176:	488c      	ldr	r0, [pc, #560]	; (800a3a8 <main+0x2a4>)
 800a178:	f004 f832 	bl	800e1e0 <iprintf>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 800a17c:	68fb      	ldr	r3, [r7, #12]
 800a17e:	b2db      	uxtb	r3, r3
 800a180:	f003 0301 	and.w	r3, r3, #1
 800a184:	b2d8      	uxtb	r0, r3
 800a186:	68fb      	ldr	r3, [r7, #12]
 800a188:	b2db      	uxtb	r3, r3
 800a18a:	f003 0302 	and.w	r3, r3, #2
 800a18e:	b2d9      	uxtb	r1, r3
 800a190:	68fb      	ldr	r3, [r7, #12]
 800a192:	b2db      	uxtb	r3, r3
 800a194:	f003 0304 	and.w	r3, r3, #4
 800a198:	b2db      	uxtb	r3, r3
 800a19a:	461a      	mov	r2, r3
 800a19c:	f003 fa52 	bl	800d644 <led_write>
	  if(dist_r >= 20){
 800a1a0:	4b82      	ldr	r3, [pc, #520]	; (800a3ac <main+0x2a8>)
 800a1a2:	edd3 7a00 	vldr	s15, [r3]
 800a1a6:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 800a1aa:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a1ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a1b2:	db0f      	blt.n	800a1d4 <main+0xd0>
		  mode++;
 800a1b4:	68fb      	ldr	r3, [r7, #12]
 800a1b6:	3301      	adds	r3, #1
 800a1b8:	60fb      	str	r3, [r7, #12]
		  dist_r = 0;
 800a1ba:	4b7c      	ldr	r3, [pc, #496]	; (800a3ac <main+0x2a8>)
 800a1bc:	f04f 0200 	mov.w	r2, #0
 800a1c0:	601a      	str	r2, [r3, #0]
		  if(mode > 7){
 800a1c2:	68fb      	ldr	r3, [r7, #12]
 800a1c4:	2b07      	cmp	r3, #7
 800a1c6:	dd01      	ble.n	800a1cc <main+0xc8>
			  mode = 0;
 800a1c8:	2300      	movs	r3, #0
 800a1ca:	60fb      	str	r3, [r7, #12]
		  }
		  printf("Mode : %d\n", mode);
 800a1cc:	68f9      	ldr	r1, [r7, #12]
 800a1ce:	4876      	ldr	r0, [pc, #472]	; (800a3a8 <main+0x2a4>)
 800a1d0:	f004 f806 	bl	800e1e0 <iprintf>
		  //buzzer(pitagola2[mode-1][0], pitagola2[mode-1][1]);
		  //buzzer(pitagola[2][0], pitagola[2][1]);
	  }
	  if(dist_r <= -20){
 800a1d4:	4b75      	ldr	r3, [pc, #468]	; (800a3ac <main+0x2a8>)
 800a1d6:	edd3 7a00 	vldr	s15, [r3]
 800a1da:	eebb 7a04 	vmov.f32	s14, #180	; 0xc1a00000 -20.0
 800a1de:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a1e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a1e6:	d80f      	bhi.n	800a208 <main+0x104>
		  mode--;
 800a1e8:	68fb      	ldr	r3, [r7, #12]
 800a1ea:	3b01      	subs	r3, #1
 800a1ec:	60fb      	str	r3, [r7, #12]
		  dist_r = 0;
 800a1ee:	4b6f      	ldr	r3, [pc, #444]	; (800a3ac <main+0x2a8>)
 800a1f0:	f04f 0200 	mov.w	r2, #0
 800a1f4:	601a      	str	r2, [r3, #0]
		  if(mode < 0){
 800a1f6:	68fb      	ldr	r3, [r7, #12]
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	da01      	bge.n	800a200 <main+0xfc>
			  mode = 7;
 800a1fc:	2307      	movs	r3, #7
 800a1fe:	60fb      	str	r3, [r7, #12]
		  }
		  printf("Mode : %d\n", mode);
 800a200:	68f9      	ldr	r1, [r7, #12]
 800a202:	4869      	ldr	r0, [pc, #420]	; (800a3a8 <main+0x2a4>)
 800a204:	f003 ffec 	bl	800e1e0 <iprintf>
		  //buzzer(pitagola2[mode-1][0], pitagola2[mode-1][1]);
		  //buzzer(pitagola[2][0], pitagola[2][1]);
	  }
	  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET){
 800a208:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800a20c:	4868      	ldr	r0, [pc, #416]	; (800a3b0 <main+0x2ac>)
 800a20e:	f7f8 f861 	bl	80022d4 <HAL_GPIO_ReadPin>
 800a212:	4603      	mov	r3, r0
 800a214:	2b00      	cmp	r3, #0
 800a216:	d1b1      	bne.n	800a17c <main+0x78>
		  HAL_Delay(50);
 800a218:	2032      	movs	r0, #50	; 0x32
 800a21a:	f7f6 feff 	bl	800101c <HAL_Delay>
		  while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET);
 800a21e:	bf00      	nop
 800a220:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800a224:	4862      	ldr	r0, [pc, #392]	; (800a3b0 <main+0x2ac>)
 800a226:	f7f8 f855 	bl	80022d4 <HAL_GPIO_ReadPin>
 800a22a:	4603      	mov	r3, r0
 800a22c:	2b00      	cmp	r3, #0
 800a22e:	d0f7      	beq.n	800a220 <main+0x11c>
		  switch(mode){
 800a230:	68fb      	ldr	r3, [r7, #12]
 800a232:	2b07      	cmp	r3, #7
 800a234:	d8a2      	bhi.n	800a17c <main+0x78>
 800a236:	a201      	add	r2, pc, #4	; (adr r2, 800a23c <main+0x138>)
 800a238:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a23c:	0800a25d 	.word	0x0800a25d
 800a240:	0800a267 	.word	0x0800a267
 800a244:	0800a273 	.word	0x0800a273
 800a248:	0800a27f 	.word	0x0800a27f
 800a24c:	0800a2ef 	.word	0x0800a2ef
 800a250:	0800a2f5 	.word	0x0800a2f5
 800a254:	0800a321 	.word	0x0800a321
 800a258:	0800a363 	.word	0x0800a363

		  	  case 0:
		  		  HAL_Delay(5000);
 800a25c:	f241 3088 	movw	r0, #5000	; 0x1388
 800a260:	f7f6 fedc 	bl	800101c <HAL_Delay>
		  		  break;
 800a264:	e095      	b.n	800a392 <main+0x28e>

		  	  case 1:
		  		  //----a超新地走行----
		  		  printf("Simple Run.\n");
 800a266:	4853      	ldr	r0, [pc, #332]	; (800a3b4 <main+0x2b0>)
 800a268:	f004 f82e 	bl	800e2c8 <puts>
		  		  //MF.FLAG.WEDGE = 1;
		  		  simple_run();
 800a26c:	f7fd fc64 	bl	8007b38 <simple_run>
		  		  break;
 800a270:	e08f      	b.n	800a392 <main+0x28e>

		  	  case 2:
		  		  //----aスラローム走行----
		  		  printf("slalom Run.\n");
 800a272:	4851      	ldr	r0, [pc, #324]	; (800a3b8 <main+0x2b4>)
 800a274:	f004 f828 	bl	800e2c8 <puts>
		  		  //MF.FLAG.WEDGE = 1;
		  		  slalom_run();
 800a278:	f7fd fd62 	bl	8007d40 <slalom_run>
		  		  break;
 800a27c:	e089      	b.n	800a392 <main+0x28e>

		  	  case 3:
				  drive_ready();
 800a27e:	f7fa fcf9 	bl	8004c74 <drive_ready>
		  		  //----aスラローム走行&pass圧縮----
				  printf("First Run. (Slalom)\n");
 800a282:	484e      	ldr	r0, [pc, #312]	; (800a3bc <main+0x2b8>)
 800a284:	f004 f820 	bl	800e2c8 <puts>

				  MF.FLAG.SCND = 1;
 800a288:	4a4d      	ldr	r2, [pc, #308]	; (800a3c0 <main+0x2bc>)
 800a28a:	8813      	ldrh	r3, [r2, #0]
 800a28c:	f043 0320 	orr.w	r3, r3, #32
 800a290:	8013      	strh	r3, [r2, #0]
				  MF.FLAG.ACCL2 = 1;
 800a292:	4a4b      	ldr	r2, [pc, #300]	; (800a3c0 <main+0x2bc>)
 800a294:	8813      	ldrh	r3, [r2, #0]
 800a296:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a29a:	8013      	strh	r3, [r2, #0]
				  start_flag = 0;
 800a29c:	4b49      	ldr	r3, [pc, #292]	; (800a3c4 <main+0x2c0>)
 800a29e:	2200      	movs	r2, #0
 800a2a0:	701a      	strb	r2, [r3, #0]
				  accel_hs = 5000;
 800a2a2:	4b49      	ldr	r3, [pc, #292]	; (800a3c8 <main+0x2c4>)
 800a2a4:	f241 3288 	movw	r2, #5000	; 0x1388
 800a2a8:	801a      	strh	r2, [r3, #0]
				  speed_max_hs = 800;
 800a2aa:	4b48      	ldr	r3, [pc, #288]	; (800a3cc <main+0x2c8>)
 800a2ac:	f44f 7248 	mov.w	r2, #800	; 0x320
 800a2b0:	801a      	strh	r2, [r3, #0]
				  goal_x = GOAL_X;
 800a2b2:	4b47      	ldr	r3, [pc, #284]	; (800a3d0 <main+0x2cc>)
 800a2b4:	2209      	movs	r2, #9
 800a2b6:	701a      	strb	r2, [r3, #0]
				  goal_y = GOAL_Y;
 800a2b8:	4b46      	ldr	r3, [pc, #280]	; (800a3d4 <main+0x2d0>)
 800a2ba:	2206      	movs	r2, #6
 800a2bc:	701a      	strb	r2, [r3, #0]

				  get_base();
 800a2be:	f003 f969 	bl	800d594 <get_base>

				  searchF();
 800a2c2:	f001 f99b 	bl	800b5fc <searchF>
				  HAL_Delay(2000);
 800a2c6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800a2ca:	f7f6 fea7 	bl	800101c <HAL_Delay>

				  goal_x = goal_y = 0;
 800a2ce:	4b41      	ldr	r3, [pc, #260]	; (800a3d4 <main+0x2d0>)
 800a2d0:	2200      	movs	r2, #0
 800a2d2:	701a      	strb	r2, [r3, #0]
 800a2d4:	4b3f      	ldr	r3, [pc, #252]	; (800a3d4 <main+0x2d0>)
 800a2d6:	781a      	ldrb	r2, [r3, #0]
 800a2d8:	4b3d      	ldr	r3, [pc, #244]	; (800a3d0 <main+0x2cc>)
 800a2da:	701a      	strb	r2, [r3, #0]
				  searchF();
 800a2dc:	f001 f98e 	bl	800b5fc <searchF>

				  goal_x = GOAL_X;
 800a2e0:	4b3b      	ldr	r3, [pc, #236]	; (800a3d0 <main+0x2cc>)
 800a2e2:	2209      	movs	r2, #9
 800a2e4:	701a      	strb	r2, [r3, #0]
				  goal_y = GOAL_Y;
 800a2e6:	4b3b      	ldr	r3, [pc, #236]	; (800a3d4 <main+0x2d0>)
 800a2e8:	2206      	movs	r2, #6
 800a2ea:	701a      	strb	r2, [r3, #0]
		  		  break;
 800a2ec:	e051      	b.n	800a392 <main+0x28e>

		  	  case 4:
		  		  //----aテストモード選択----
		  		  test_select();
 800a2ee:	f7fc fff5 	bl	80072dc <test_select>
		  		  break;
 800a2f2:	e04e      	b.n	800a392 <main+0x28e>

		  	  case 5:
		  		  //----sensor check----
		  		  printf("Sensor Check.\n");
 800a2f4:	4838      	ldr	r0, [pc, #224]	; (800a3d8 <main+0x2d4>)
 800a2f6:	f003 ffe7 	bl	800e2c8 <puts>
		  		  sensor_test();
 800a2fa:	f003 fa99 	bl	800d830 <sensor_test>
		  		  break;
 800a2fe:	e048      	b.n	800a392 <main+0x28e>

		  	  case 6:
		  		  //----pitagola sound----
				  while(ad_fl <= WALL_BASE_FL){
					  led_write(1, 1, 1);
 800a300:	2201      	movs	r2, #1
 800a302:	2101      	movs	r1, #1
 800a304:	2001      	movs	r0, #1
 800a306:	f003 f99d 	bl	800d644 <led_write>
					  HAL_Delay(200);
 800a30a:	20c8      	movs	r0, #200	; 0xc8
 800a30c:	f7f6 fe86 	bl	800101c <HAL_Delay>
					  led_write(0, 0, 0);
 800a310:	2200      	movs	r2, #0
 800a312:	2100      	movs	r1, #0
 800a314:	2000      	movs	r0, #0
 800a316:	f003 f995 	bl	800d644 <led_write>
					  HAL_Delay(200);
 800a31a:	20c8      	movs	r0, #200	; 0xc8
 800a31c:	f7f6 fe7e 	bl	800101c <HAL_Delay>
				  while(ad_fl <= WALL_BASE_FL){
 800a320:	4b2e      	ldr	r3, [pc, #184]	; (800a3dc <main+0x2d8>)
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	2bfa      	cmp	r3, #250	; 0xfa
 800a326:	d9eb      	bls.n	800a300 <main+0x1fc>
				  }
				  HAL_Delay(200);
 800a328:	20c8      	movs	r0, #200	; 0xc8
 800a32a:	f7f6 fe77 	bl	800101c <HAL_Delay>
		  		  }
				  HAL_Delay(2000);
				  for(int i=0; i<m_ok; i++){
		  			  buzzer(mario_ok[i][0], mario_ok[i][1]);
		  		  }
*/				  HAL_Delay(2000);
 800a32e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800a332:	f7f6 fe73 	bl	800101c <HAL_Delay>
				  for(int i=0; i<m_goal; i++){
 800a336:	2300      	movs	r3, #0
 800a338:	60bb      	str	r3, [r7, #8]
 800a33a:	e00e      	b.n	800a35a <main+0x256>
		  			  buzzer(mario_goal[i][0], mario_goal[i][1]);
 800a33c:	4a28      	ldr	r2, [pc, #160]	; (800a3e0 <main+0x2dc>)
 800a33e:	68bb      	ldr	r3, [r7, #8]
 800a340:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800a344:	4a26      	ldr	r2, [pc, #152]	; (800a3e0 <main+0x2dc>)
 800a346:	68bb      	ldr	r3, [r7, #8]
 800a348:	00db      	lsls	r3, r3, #3
 800a34a:	4413      	add	r3, r2
 800a34c:	685b      	ldr	r3, [r3, #4]
 800a34e:	4619      	mov	r1, r3
 800a350:	f000 fbfc 	bl	800ab4c <buzzer>
				  for(int i=0; i<m_goal; i++){
 800a354:	68bb      	ldr	r3, [r7, #8]
 800a356:	3301      	adds	r3, #1
 800a358:	60bb      	str	r3, [r7, #8]
 800a35a:	68bb      	ldr	r3, [r7, #8]
 800a35c:	2b0e      	cmp	r3, #14
 800a35e:	dded      	ble.n	800a33c <main+0x238>
		  		  }
		  		  break;
 800a360:	e017      	b.n	800a392 <main+0x28e>

		  	  case 7:
		  		  //----a本番走行用----
		  		  //MF.FLAG.WEDGE = 1;
		  		  for(int i=0; i<m_select; i++){
 800a362:	2300      	movs	r3, #0
 800a364:	607b      	str	r3, [r7, #4]
 800a366:	e00e      	b.n	800a386 <main+0x282>
		  			  buzzer(mario_select[i][0], mario_select[i][1]);
 800a368:	4a1e      	ldr	r2, [pc, #120]	; (800a3e4 <main+0x2e0>)
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800a370:	4a1c      	ldr	r2, [pc, #112]	; (800a3e4 <main+0x2e0>)
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	00db      	lsls	r3, r3, #3
 800a376:	4413      	add	r3, r2
 800a378:	685b      	ldr	r3, [r3, #4]
 800a37a:	4619      	mov	r1, r3
 800a37c:	f000 fbe6 	bl	800ab4c <buzzer>
		  		  for(int i=0; i<m_select; i++){
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	3301      	adds	r3, #1
 800a384:	607b      	str	r3, [r7, #4]
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	2b01      	cmp	r3, #1
 800a38a:	dded      	ble.n	800a368 <main+0x264>
		  		  }
		  		  perfect_run();
 800a38c:	f7fe f828 	bl	80083e0 <perfect_run>
		  		  break;
 800a390:	bf00      	nop
	  led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 800a392:	e6f3      	b.n	800a17c <main+0x78>
 800a394:	0800f7bc 	.word	0x0800f7bc
 800a398:	20000104 	.word	0x20000104
 800a39c:	2000038c 	.word	0x2000038c
 800a3a0:	2000034c 	.word	0x2000034c
 800a3a4:	20000c34 	.word	0x20000c34
 800a3a8:	0800f7d8 	.word	0x0800f7d8
 800a3ac:	20000b6c 	.word	0x20000b6c
 800a3b0:	40020000 	.word	0x40020000
 800a3b4:	0800f7e4 	.word	0x0800f7e4
 800a3b8:	0800f7f0 	.word	0x0800f7f0
 800a3bc:	0800f7fc 	.word	0x0800f7fc
 800a3c0:	20000fe8 	.word	0x20000fe8
 800a3c4:	20001008 	.word	0x20001008
 800a3c8:	200004d4 	.word	0x200004d4
 800a3cc:	20000ffc 	.word	0x20000ffc
 800a3d0:	20000c31 	.word	0x20000c31
 800a3d4:	20000bcc 	.word	0x20000bcc
 800a3d8:	0800f810 	.word	0x0800f810
 800a3dc:	20000dd8 	.word	0x20000dd8
 800a3e0:	20000088 	.word	0x20000088
 800a3e4:	20000040 	.word	0x20000040

0800a3e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800a3e8:	b580      	push	{r7, lr}
 800a3ea:	b094      	sub	sp, #80	; 0x50
 800a3ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800a3ee:	f107 0320 	add.w	r3, r7, #32
 800a3f2:	2230      	movs	r2, #48	; 0x30
 800a3f4:	2100      	movs	r1, #0
 800a3f6:	4618      	mov	r0, r3
 800a3f8:	f003 feea 	bl	800e1d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800a3fc:	f107 030c 	add.w	r3, r7, #12
 800a400:	2200      	movs	r2, #0
 800a402:	601a      	str	r2, [r3, #0]
 800a404:	605a      	str	r2, [r3, #4]
 800a406:	609a      	str	r2, [r3, #8]
 800a408:	60da      	str	r2, [r3, #12]
 800a40a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800a40c:	2300      	movs	r3, #0
 800a40e:	60bb      	str	r3, [r7, #8]
 800a410:	4b28      	ldr	r3, [pc, #160]	; (800a4b4 <SystemClock_Config+0xcc>)
 800a412:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a414:	4a27      	ldr	r2, [pc, #156]	; (800a4b4 <SystemClock_Config+0xcc>)
 800a416:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a41a:	6413      	str	r3, [r2, #64]	; 0x40
 800a41c:	4b25      	ldr	r3, [pc, #148]	; (800a4b4 <SystemClock_Config+0xcc>)
 800a41e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a420:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a424:	60bb      	str	r3, [r7, #8]
 800a426:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800a428:	2300      	movs	r3, #0
 800a42a:	607b      	str	r3, [r7, #4]
 800a42c:	4b22      	ldr	r3, [pc, #136]	; (800a4b8 <SystemClock_Config+0xd0>)
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	4a21      	ldr	r2, [pc, #132]	; (800a4b8 <SystemClock_Config+0xd0>)
 800a432:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a436:	6013      	str	r3, [r2, #0]
 800a438:	4b1f      	ldr	r3, [pc, #124]	; (800a4b8 <SystemClock_Config+0xd0>)
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a440:	607b      	str	r3, [r7, #4]
 800a442:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800a444:	2302      	movs	r3, #2
 800a446:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800a448:	2301      	movs	r3, #1
 800a44a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800a44c:	2310      	movs	r3, #16
 800a44e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800a450:	2302      	movs	r3, #2
 800a452:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800a454:	2300      	movs	r3, #0
 800a456:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800a458:	2308      	movs	r3, #8
 800a45a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800a45c:	23a8      	movs	r3, #168	; 0xa8
 800a45e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800a460:	2302      	movs	r3, #2
 800a462:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800a464:	2304      	movs	r3, #4
 800a466:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800a468:	f107 0320 	add.w	r3, r7, #32
 800a46c:	4618      	mov	r0, r3
 800a46e:	f7f7 ff63 	bl	8002338 <HAL_RCC_OscConfig>
 800a472:	4603      	mov	r3, r0
 800a474:	2b00      	cmp	r3, #0
 800a476:	d001      	beq.n	800a47c <SystemClock_Config+0x94>
  {
    Error_Handler();
 800a478:	f000 fbd1 	bl	800ac1e <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800a47c:	230f      	movs	r3, #15
 800a47e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800a480:	2302      	movs	r3, #2
 800a482:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800a484:	2300      	movs	r3, #0
 800a486:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800a488:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800a48c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800a48e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a492:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800a494:	f107 030c 	add.w	r3, r7, #12
 800a498:	2105      	movs	r1, #5
 800a49a:	4618      	mov	r0, r3
 800a49c:	f7f8 f98e 	bl	80027bc <HAL_RCC_ClockConfig>
 800a4a0:	4603      	mov	r3, r0
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	d001      	beq.n	800a4aa <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800a4a6:	f000 fbba 	bl	800ac1e <Error_Handler>
  }
}
 800a4aa:	bf00      	nop
 800a4ac:	3750      	adds	r7, #80	; 0x50
 800a4ae:	46bd      	mov	sp, r7
 800a4b0:	bd80      	pop	{r7, pc}
 800a4b2:	bf00      	nop
 800a4b4:	40023800 	.word	0x40023800
 800a4b8:	40007000 	.word	0x40007000

0800a4bc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800a4bc:	b580      	push	{r7, lr}
 800a4be:	b084      	sub	sp, #16
 800a4c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800a4c2:	463b      	mov	r3, r7
 800a4c4:	2200      	movs	r2, #0
 800a4c6:	601a      	str	r2, [r3, #0]
 800a4c8:	605a      	str	r2, [r3, #4]
 800a4ca:	609a      	str	r2, [r3, #8]
 800a4cc:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 800a4ce:	4b21      	ldr	r3, [pc, #132]	; (800a554 <MX_ADC1_Init+0x98>)
 800a4d0:	4a21      	ldr	r2, [pc, #132]	; (800a558 <MX_ADC1_Init+0x9c>)
 800a4d2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800a4d4:	4b1f      	ldr	r3, [pc, #124]	; (800a554 <MX_ADC1_Init+0x98>)
 800a4d6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800a4da:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800a4dc:	4b1d      	ldr	r3, [pc, #116]	; (800a554 <MX_ADC1_Init+0x98>)
 800a4de:	2200      	movs	r2, #0
 800a4e0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800a4e2:	4b1c      	ldr	r3, [pc, #112]	; (800a554 <MX_ADC1_Init+0x98>)
 800a4e4:	2200      	movs	r2, #0
 800a4e6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800a4e8:	4b1a      	ldr	r3, [pc, #104]	; (800a554 <MX_ADC1_Init+0x98>)
 800a4ea:	2200      	movs	r2, #0
 800a4ec:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800a4ee:	4b19      	ldr	r3, [pc, #100]	; (800a554 <MX_ADC1_Init+0x98>)
 800a4f0:	2200      	movs	r2, #0
 800a4f2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800a4f6:	4b17      	ldr	r3, [pc, #92]	; (800a554 <MX_ADC1_Init+0x98>)
 800a4f8:	2200      	movs	r2, #0
 800a4fa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800a4fc:	4b15      	ldr	r3, [pc, #84]	; (800a554 <MX_ADC1_Init+0x98>)
 800a4fe:	4a17      	ldr	r2, [pc, #92]	; (800a55c <MX_ADC1_Init+0xa0>)
 800a500:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800a502:	4b14      	ldr	r3, [pc, #80]	; (800a554 <MX_ADC1_Init+0x98>)
 800a504:	2200      	movs	r2, #0
 800a506:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800a508:	4b12      	ldr	r3, [pc, #72]	; (800a554 <MX_ADC1_Init+0x98>)
 800a50a:	2201      	movs	r2, #1
 800a50c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800a50e:	4b11      	ldr	r3, [pc, #68]	; (800a554 <MX_ADC1_Init+0x98>)
 800a510:	2200      	movs	r2, #0
 800a512:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800a516:	4b0f      	ldr	r3, [pc, #60]	; (800a554 <MX_ADC1_Init+0x98>)
 800a518:	2201      	movs	r2, #1
 800a51a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800a51c:	480d      	ldr	r0, [pc, #52]	; (800a554 <MX_ADC1_Init+0x98>)
 800a51e:	f7f6 fd9f 	bl	8001060 <HAL_ADC_Init>
 800a522:	4603      	mov	r3, r0
 800a524:	2b00      	cmp	r3, #0
 800a526:	d001      	beq.n	800a52c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800a528:	f000 fb79 	bl	800ac1e <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800a52c:	2300      	movs	r3, #0
 800a52e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800a530:	2301      	movs	r3, #1
 800a532:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800a534:	2300      	movs	r3, #0
 800a536:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800a538:	463b      	mov	r3, r7
 800a53a:	4619      	mov	r1, r3
 800a53c:	4805      	ldr	r0, [pc, #20]	; (800a554 <MX_ADC1_Init+0x98>)
 800a53e:	f7f6 ff2b 	bl	8001398 <HAL_ADC_ConfigChannel>
 800a542:	4603      	mov	r3, r0
 800a544:	2b00      	cmp	r3, #0
 800a546:	d001      	beq.n	800a54c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800a548:	f000 fb69 	bl	800ac1e <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800a54c:	bf00      	nop
 800a54e:	3710      	adds	r7, #16
 800a550:	46bd      	mov	sp, r7
 800a552:	bd80      	pop	{r7, pc}
 800a554:	20000b80 	.word	0x20000b80
 800a558:	40012000 	.word	0x40012000
 800a55c:	0f000001 	.word	0x0f000001

0800a560 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 800a560:	b580      	push	{r7, lr}
 800a562:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 800a564:	4b17      	ldr	r3, [pc, #92]	; (800a5c4 <MX_SPI3_Init+0x64>)
 800a566:	4a18      	ldr	r2, [pc, #96]	; (800a5c8 <MX_SPI3_Init+0x68>)
 800a568:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800a56a:	4b16      	ldr	r3, [pc, #88]	; (800a5c4 <MX_SPI3_Init+0x64>)
 800a56c:	f44f 7282 	mov.w	r2, #260	; 0x104
 800a570:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800a572:	4b14      	ldr	r3, [pc, #80]	; (800a5c4 <MX_SPI3_Init+0x64>)
 800a574:	2200      	movs	r2, #0
 800a576:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 800a578:	4b12      	ldr	r3, [pc, #72]	; (800a5c4 <MX_SPI3_Init+0x64>)
 800a57a:	2200      	movs	r2, #0
 800a57c:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800a57e:	4b11      	ldr	r3, [pc, #68]	; (800a5c4 <MX_SPI3_Init+0x64>)
 800a580:	2200      	movs	r2, #0
 800a582:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800a584:	4b0f      	ldr	r3, [pc, #60]	; (800a5c4 <MX_SPI3_Init+0x64>)
 800a586:	2200      	movs	r2, #0
 800a588:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800a58a:	4b0e      	ldr	r3, [pc, #56]	; (800a5c4 <MX_SPI3_Init+0x64>)
 800a58c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a590:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800a592:	4b0c      	ldr	r3, [pc, #48]	; (800a5c4 <MX_SPI3_Init+0x64>)
 800a594:	2218      	movs	r2, #24
 800a596:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800a598:	4b0a      	ldr	r3, [pc, #40]	; (800a5c4 <MX_SPI3_Init+0x64>)
 800a59a:	2200      	movs	r2, #0
 800a59c:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800a59e:	4b09      	ldr	r3, [pc, #36]	; (800a5c4 <MX_SPI3_Init+0x64>)
 800a5a0:	2200      	movs	r2, #0
 800a5a2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a5a4:	4b07      	ldr	r3, [pc, #28]	; (800a5c4 <MX_SPI3_Init+0x64>)
 800a5a6:	2200      	movs	r2, #0
 800a5a8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 800a5aa:	4b06      	ldr	r3, [pc, #24]	; (800a5c4 <MX_SPI3_Init+0x64>)
 800a5ac:	220a      	movs	r2, #10
 800a5ae:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800a5b0:	4804      	ldr	r0, [pc, #16]	; (800a5c4 <MX_SPI3_Init+0x64>)
 800a5b2:	f7f8 facb 	bl	8002b4c <HAL_SPI_Init>
 800a5b6:	4603      	mov	r3, r0
 800a5b8:	2b00      	cmp	r3, #0
 800a5ba:	d001      	beq.n	800a5c0 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 800a5bc:	f000 fb2f 	bl	800ac1e <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800a5c0:	bf00      	nop
 800a5c2:	bd80      	pop	{r7, pc}
 800a5c4:	200001c4 	.word	0x200001c4
 800a5c8:	40003c00 	.word	0x40003c00

0800a5cc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800a5cc:	b580      	push	{r7, lr}
 800a5ce:	b08e      	sub	sp, #56	; 0x38
 800a5d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800a5d2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800a5d6:	2200      	movs	r2, #0
 800a5d8:	601a      	str	r2, [r3, #0]
 800a5da:	605a      	str	r2, [r3, #4]
 800a5dc:	609a      	str	r2, [r3, #8]
 800a5de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800a5e0:	f107 0320 	add.w	r3, r7, #32
 800a5e4:	2200      	movs	r2, #0
 800a5e6:	601a      	str	r2, [r3, #0]
 800a5e8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800a5ea:	1d3b      	adds	r3, r7, #4
 800a5ec:	2200      	movs	r2, #0
 800a5ee:	601a      	str	r2, [r3, #0]
 800a5f0:	605a      	str	r2, [r3, #4]
 800a5f2:	609a      	str	r2, [r3, #8]
 800a5f4:	60da      	str	r2, [r3, #12]
 800a5f6:	611a      	str	r2, [r3, #16]
 800a5f8:	615a      	str	r2, [r3, #20]
 800a5fa:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800a5fc:	4b32      	ldr	r3, [pc, #200]	; (800a6c8 <MX_TIM2_Init+0xfc>)
 800a5fe:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800a602:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800a604:	4b30      	ldr	r3, [pc, #192]	; (800a6c8 <MX_TIM2_Init+0xfc>)
 800a606:	2200      	movs	r2, #0
 800a608:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a60a:	4b2f      	ldr	r3, [pc, #188]	; (800a6c8 <MX_TIM2_Init+0xfc>)
 800a60c:	2200      	movs	r2, #0
 800a60e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 800a610:	4b2d      	ldr	r3, [pc, #180]	; (800a6c8 <MX_TIM2_Init+0xfc>)
 800a612:	f240 32e7 	movw	r2, #999	; 0x3e7
 800a616:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800a618:	4b2b      	ldr	r3, [pc, #172]	; (800a6c8 <MX_TIM2_Init+0xfc>)
 800a61a:	2200      	movs	r2, #0
 800a61c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800a61e:	4b2a      	ldr	r3, [pc, #168]	; (800a6c8 <MX_TIM2_Init+0xfc>)
 800a620:	2200      	movs	r2, #0
 800a622:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800a624:	4828      	ldr	r0, [pc, #160]	; (800a6c8 <MX_TIM2_Init+0xfc>)
 800a626:	f7f8 ffe5 	bl	80035f4 <HAL_TIM_Base_Init>
 800a62a:	4603      	mov	r3, r0
 800a62c:	2b00      	cmp	r3, #0
 800a62e:	d001      	beq.n	800a634 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 800a630:	f000 faf5 	bl	800ac1e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800a634:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a638:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800a63a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800a63e:	4619      	mov	r1, r3
 800a640:	4821      	ldr	r0, [pc, #132]	; (800a6c8 <MX_TIM2_Init+0xfc>)
 800a642:	f7f9 fb89 	bl	8003d58 <HAL_TIM_ConfigClockSource>
 800a646:	4603      	mov	r3, r0
 800a648:	2b00      	cmp	r3, #0
 800a64a:	d001      	beq.n	800a650 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 800a64c:	f000 fae7 	bl	800ac1e <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800a650:	481d      	ldr	r0, [pc, #116]	; (800a6c8 <MX_TIM2_Init+0xfc>)
 800a652:	f7f9 f81e 	bl	8003692 <HAL_TIM_PWM_Init>
 800a656:	4603      	mov	r3, r0
 800a658:	2b00      	cmp	r3, #0
 800a65a:	d001      	beq.n	800a660 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 800a65c:	f000 fadf 	bl	800ac1e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800a660:	2300      	movs	r3, #0
 800a662:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800a664:	2300      	movs	r3, #0
 800a666:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800a668:	f107 0320 	add.w	r3, r7, #32
 800a66c:	4619      	mov	r1, r3
 800a66e:	4816      	ldr	r0, [pc, #88]	; (800a6c8 <MX_TIM2_Init+0xfc>)
 800a670:	f7f9 ff61 	bl	8004536 <HAL_TIMEx_MasterConfigSynchronization>
 800a674:	4603      	mov	r3, r0
 800a676:	2b00      	cmp	r3, #0
 800a678:	d001      	beq.n	800a67e <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800a67a:	f000 fad0 	bl	800ac1e <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800a67e:	2360      	movs	r3, #96	; 0x60
 800a680:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800a682:	2300      	movs	r3, #0
 800a684:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800a686:	2300      	movs	r3, #0
 800a688:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800a68a:	2300      	movs	r3, #0
 800a68c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800a68e:	1d3b      	adds	r3, r7, #4
 800a690:	2200      	movs	r2, #0
 800a692:	4619      	mov	r1, r3
 800a694:	480c      	ldr	r0, [pc, #48]	; (800a6c8 <MX_TIM2_Init+0xfc>)
 800a696:	f7f9 fa99 	bl	8003bcc <HAL_TIM_PWM_ConfigChannel>
 800a69a:	4603      	mov	r3, r0
 800a69c:	2b00      	cmp	r3, #0
 800a69e:	d001      	beq.n	800a6a4 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 800a6a0:	f000 fabd 	bl	800ac1e <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800a6a4:	1d3b      	adds	r3, r7, #4
 800a6a6:	220c      	movs	r2, #12
 800a6a8:	4619      	mov	r1, r3
 800a6aa:	4807      	ldr	r0, [pc, #28]	; (800a6c8 <MX_TIM2_Init+0xfc>)
 800a6ac:	f7f9 fa8e 	bl	8003bcc <HAL_TIM_PWM_ConfigChannel>
 800a6b0:	4603      	mov	r3, r0
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	d001      	beq.n	800a6ba <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 800a6b6:	f000 fab2 	bl	800ac1e <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800a6ba:	4803      	ldr	r0, [pc, #12]	; (800a6c8 <MX_TIM2_Init+0xfc>)
 800a6bc:	f003 fb66 	bl	800dd8c <HAL_TIM_MspPostInit>

}
 800a6c0:	bf00      	nop
 800a6c2:	3738      	adds	r7, #56	; 0x38
 800a6c4:	46bd      	mov	sp, r7
 800a6c6:	bd80      	pop	{r7, pc}
 800a6c8:	20000c98 	.word	0x20000c98

0800a6cc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800a6cc:	b580      	push	{r7, lr}
 800a6ce:	b08e      	sub	sp, #56	; 0x38
 800a6d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800a6d2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800a6d6:	2200      	movs	r2, #0
 800a6d8:	601a      	str	r2, [r3, #0]
 800a6da:	605a      	str	r2, [r3, #4]
 800a6dc:	609a      	str	r2, [r3, #8]
 800a6de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800a6e0:	f107 0320 	add.w	r3, r7, #32
 800a6e4:	2200      	movs	r2, #0
 800a6e6:	601a      	str	r2, [r3, #0]
 800a6e8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800a6ea:	1d3b      	adds	r3, r7, #4
 800a6ec:	2200      	movs	r2, #0
 800a6ee:	601a      	str	r2, [r3, #0]
 800a6f0:	605a      	str	r2, [r3, #4]
 800a6f2:	609a      	str	r2, [r3, #8]
 800a6f4:	60da      	str	r2, [r3, #12]
 800a6f6:	611a      	str	r2, [r3, #16]
 800a6f8:	615a      	str	r2, [r3, #20]
 800a6fa:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800a6fc:	4b2c      	ldr	r3, [pc, #176]	; (800a7b0 <MX_TIM3_Init+0xe4>)
 800a6fe:	4a2d      	ldr	r2, [pc, #180]	; (800a7b4 <MX_TIM3_Init+0xe8>)
 800a700:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 64-1;
 800a702:	4b2b      	ldr	r3, [pc, #172]	; (800a7b0 <MX_TIM3_Init+0xe4>)
 800a704:	223f      	movs	r2, #63	; 0x3f
 800a706:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a708:	4b29      	ldr	r3, [pc, #164]	; (800a7b0 <MX_TIM3_Init+0xe4>)
 800a70a:	2200      	movs	r2, #0
 800a70c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0;
 800a70e:	4b28      	ldr	r3, [pc, #160]	; (800a7b0 <MX_TIM3_Init+0xe4>)
 800a710:	2200      	movs	r2, #0
 800a712:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800a714:	4b26      	ldr	r3, [pc, #152]	; (800a7b0 <MX_TIM3_Init+0xe4>)
 800a716:	2200      	movs	r2, #0
 800a718:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800a71a:	4b25      	ldr	r3, [pc, #148]	; (800a7b0 <MX_TIM3_Init+0xe4>)
 800a71c:	2200      	movs	r2, #0
 800a71e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800a720:	4823      	ldr	r0, [pc, #140]	; (800a7b0 <MX_TIM3_Init+0xe4>)
 800a722:	f7f8 ff67 	bl	80035f4 <HAL_TIM_Base_Init>
 800a726:	4603      	mov	r3, r0
 800a728:	2b00      	cmp	r3, #0
 800a72a:	d001      	beq.n	800a730 <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 800a72c:	f000 fa77 	bl	800ac1e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800a730:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a734:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800a736:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800a73a:	4619      	mov	r1, r3
 800a73c:	481c      	ldr	r0, [pc, #112]	; (800a7b0 <MX_TIM3_Init+0xe4>)
 800a73e:	f7f9 fb0b 	bl	8003d58 <HAL_TIM_ConfigClockSource>
 800a742:	4603      	mov	r3, r0
 800a744:	2b00      	cmp	r3, #0
 800a746:	d001      	beq.n	800a74c <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 800a748:	f000 fa69 	bl	800ac1e <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800a74c:	4818      	ldr	r0, [pc, #96]	; (800a7b0 <MX_TIM3_Init+0xe4>)
 800a74e:	f7f8 ffa0 	bl	8003692 <HAL_TIM_PWM_Init>
 800a752:	4603      	mov	r3, r0
 800a754:	2b00      	cmp	r3, #0
 800a756:	d001      	beq.n	800a75c <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 800a758:	f000 fa61 	bl	800ac1e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800a75c:	2300      	movs	r3, #0
 800a75e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800a760:	2300      	movs	r3, #0
 800a762:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800a764:	f107 0320 	add.w	r3, r7, #32
 800a768:	4619      	mov	r1, r3
 800a76a:	4811      	ldr	r0, [pc, #68]	; (800a7b0 <MX_TIM3_Init+0xe4>)
 800a76c:	f7f9 fee3 	bl	8004536 <HAL_TIMEx_MasterConfigSynchronization>
 800a770:	4603      	mov	r3, r0
 800a772:	2b00      	cmp	r3, #0
 800a774:	d001      	beq.n	800a77a <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 800a776:	f000 fa52 	bl	800ac1e <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800a77a:	2360      	movs	r3, #96	; 0x60
 800a77c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800a77e:	2300      	movs	r3, #0
 800a780:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800a782:	2300      	movs	r3, #0
 800a784:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800a786:	2300      	movs	r3, #0
 800a788:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800a78a:	1d3b      	adds	r3, r7, #4
 800a78c:	2204      	movs	r2, #4
 800a78e:	4619      	mov	r1, r3
 800a790:	4807      	ldr	r0, [pc, #28]	; (800a7b0 <MX_TIM3_Init+0xe4>)
 800a792:	f7f9 fa1b 	bl	8003bcc <HAL_TIM_PWM_ConfigChannel>
 800a796:	4603      	mov	r3, r0
 800a798:	2b00      	cmp	r3, #0
 800a79a:	d001      	beq.n	800a7a0 <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 800a79c:	f000 fa3f 	bl	800ac1e <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800a7a0:	4803      	ldr	r0, [pc, #12]	; (800a7b0 <MX_TIM3_Init+0xe4>)
 800a7a2:	f003 faf3 	bl	800dd8c <HAL_TIM_MspPostInit>

}
 800a7a6:	bf00      	nop
 800a7a8:	3738      	adds	r7, #56	; 0x38
 800a7aa:	46bd      	mov	sp, r7
 800a7ac:	bd80      	pop	{r7, pc}
 800a7ae:	bf00      	nop
 800a7b0:	20000b24 	.word	0x20000b24
 800a7b4:	40000400 	.word	0x40000400

0800a7b8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800a7b8:	b580      	push	{r7, lr}
 800a7ba:	b08c      	sub	sp, #48	; 0x30
 800a7bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800a7be:	f107 030c 	add.w	r3, r7, #12
 800a7c2:	2224      	movs	r2, #36	; 0x24
 800a7c4:	2100      	movs	r1, #0
 800a7c6:	4618      	mov	r0, r3
 800a7c8:	f003 fd02 	bl	800e1d0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800a7cc:	1d3b      	adds	r3, r7, #4
 800a7ce:	2200      	movs	r2, #0
 800a7d0:	601a      	str	r2, [r3, #0]
 800a7d2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800a7d4:	4b20      	ldr	r3, [pc, #128]	; (800a858 <MX_TIM4_Init+0xa0>)
 800a7d6:	4a21      	ldr	r2, [pc, #132]	; (800a85c <MX_TIM4_Init+0xa4>)
 800a7d8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800a7da:	4b1f      	ldr	r3, [pc, #124]	; (800a858 <MX_TIM4_Init+0xa0>)
 800a7dc:	2200      	movs	r2, #0
 800a7de:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a7e0:	4b1d      	ldr	r3, [pc, #116]	; (800a858 <MX_TIM4_Init+0xa0>)
 800a7e2:	2200      	movs	r2, #0
 800a7e4:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800a7e6:	4b1c      	ldr	r3, [pc, #112]	; (800a858 <MX_TIM4_Init+0xa0>)
 800a7e8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a7ec:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800a7ee:	4b1a      	ldr	r3, [pc, #104]	; (800a858 <MX_TIM4_Init+0xa0>)
 800a7f0:	2200      	movs	r2, #0
 800a7f2:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800a7f4:	4b18      	ldr	r3, [pc, #96]	; (800a858 <MX_TIM4_Init+0xa0>)
 800a7f6:	2200      	movs	r2, #0
 800a7f8:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800a7fa:	2303      	movs	r3, #3
 800a7fc:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800a7fe:	2300      	movs	r3, #0
 800a800:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800a802:	2301      	movs	r3, #1
 800a804:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800a806:	2300      	movs	r3, #0
 800a808:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800a80a:	2300      	movs	r3, #0
 800a80c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800a80e:	2300      	movs	r3, #0
 800a810:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800a812:	2301      	movs	r3, #1
 800a814:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800a816:	2300      	movs	r3, #0
 800a818:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800a81a:	2300      	movs	r3, #0
 800a81c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 800a81e:	f107 030c 	add.w	r3, r7, #12
 800a822:	4619      	mov	r1, r3
 800a824:	480c      	ldr	r0, [pc, #48]	; (800a858 <MX_TIM4_Init+0xa0>)
 800a826:	f7f8 ffff 	bl	8003828 <HAL_TIM_Encoder_Init>
 800a82a:	4603      	mov	r3, r0
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	d001      	beq.n	800a834 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 800a830:	f000 f9f5 	bl	800ac1e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800a834:	2300      	movs	r3, #0
 800a836:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800a838:	2300      	movs	r3, #0
 800a83a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800a83c:	1d3b      	adds	r3, r7, #4
 800a83e:	4619      	mov	r1, r3
 800a840:	4805      	ldr	r0, [pc, #20]	; (800a858 <MX_TIM4_Init+0xa0>)
 800a842:	f7f9 fe78 	bl	8004536 <HAL_TIMEx_MasterConfigSynchronization>
 800a846:	4603      	mov	r3, r0
 800a848:	2b00      	cmp	r3, #0
 800a84a:	d001      	beq.n	800a850 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 800a84c:	f000 f9e7 	bl	800ac1e <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800a850:	bf00      	nop
 800a852:	3730      	adds	r7, #48	; 0x30
 800a854:	46bd      	mov	sp, r7
 800a856:	bd80      	pop	{r7, pc}
 800a858:	2000038c 	.word	0x2000038c
 800a85c:	40000800 	.word	0x40000800

0800a860 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 800a860:	b580      	push	{r7, lr}
 800a862:	b082      	sub	sp, #8
 800a864:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800a866:	463b      	mov	r3, r7
 800a868:	2200      	movs	r2, #0
 800a86a:	601a      	str	r2, [r3, #0]
 800a86c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800a86e:	4b15      	ldr	r3, [pc, #84]	; (800a8c4 <MX_TIM6_Init+0x64>)
 800a870:	4a15      	ldr	r2, [pc, #84]	; (800a8c8 <MX_TIM6_Init+0x68>)
 800a872:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 84-1;
 800a874:	4b13      	ldr	r3, [pc, #76]	; (800a8c4 <MX_TIM6_Init+0x64>)
 800a876:	2253      	movs	r2, #83	; 0x53
 800a878:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a87a:	4b12      	ldr	r3, [pc, #72]	; (800a8c4 <MX_TIM6_Init+0x64>)
 800a87c:	2200      	movs	r2, #0
 800a87e:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000-1;
 800a880:	4b10      	ldr	r3, [pc, #64]	; (800a8c4 <MX_TIM6_Init+0x64>)
 800a882:	f240 32e7 	movw	r2, #999	; 0x3e7
 800a886:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800a888:	4b0e      	ldr	r3, [pc, #56]	; (800a8c4 <MX_TIM6_Init+0x64>)
 800a88a:	2200      	movs	r2, #0
 800a88c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800a88e:	480d      	ldr	r0, [pc, #52]	; (800a8c4 <MX_TIM6_Init+0x64>)
 800a890:	f7f8 feb0 	bl	80035f4 <HAL_TIM_Base_Init>
 800a894:	4603      	mov	r3, r0
 800a896:	2b00      	cmp	r3, #0
 800a898:	d001      	beq.n	800a89e <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 800a89a:	f000 f9c0 	bl	800ac1e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800a89e:	2300      	movs	r3, #0
 800a8a0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800a8a2:	2300      	movs	r3, #0
 800a8a4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800a8a6:	463b      	mov	r3, r7
 800a8a8:	4619      	mov	r1, r3
 800a8aa:	4806      	ldr	r0, [pc, #24]	; (800a8c4 <MX_TIM6_Init+0x64>)
 800a8ac:	f7f9 fe43 	bl	8004536 <HAL_TIMEx_MasterConfigSynchronization>
 800a8b0:	4603      	mov	r3, r0
 800a8b2:	2b00      	cmp	r3, #0
 800a8b4:	d001      	beq.n	800a8ba <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 800a8b6:	f000 f9b2 	bl	800ac1e <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800a8ba:	bf00      	nop
 800a8bc:	3708      	adds	r7, #8
 800a8be:	46bd      	mov	sp, r7
 800a8c0:	bd80      	pop	{r7, pc}
 800a8c2:	bf00      	nop
 800a8c4:	20000c34 	.word	0x20000c34
 800a8c8:	40001000 	.word	0x40001000

0800a8cc <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 800a8cc:	b580      	push	{r7, lr}
 800a8ce:	b08c      	sub	sp, #48	; 0x30
 800a8d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800a8d2:	f107 030c 	add.w	r3, r7, #12
 800a8d6:	2224      	movs	r2, #36	; 0x24
 800a8d8:	2100      	movs	r1, #0
 800a8da:	4618      	mov	r0, r3
 800a8dc:	f003 fc78 	bl	800e1d0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800a8e0:	1d3b      	adds	r3, r7, #4
 800a8e2:	2200      	movs	r2, #0
 800a8e4:	601a      	str	r2, [r3, #0]
 800a8e6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800a8e8:	4b22      	ldr	r3, [pc, #136]	; (800a974 <MX_TIM8_Init+0xa8>)
 800a8ea:	4a23      	ldr	r2, [pc, #140]	; (800a978 <MX_TIM8_Init+0xac>)
 800a8ec:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 800a8ee:	4b21      	ldr	r3, [pc, #132]	; (800a974 <MX_TIM8_Init+0xa8>)
 800a8f0:	2200      	movs	r2, #0
 800a8f2:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a8f4:	4b1f      	ldr	r3, [pc, #124]	; (800a974 <MX_TIM8_Init+0xa8>)
 800a8f6:	2200      	movs	r2, #0
 800a8f8:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 800a8fa:	4b1e      	ldr	r3, [pc, #120]	; (800a974 <MX_TIM8_Init+0xa8>)
 800a8fc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a900:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800a902:	4b1c      	ldr	r3, [pc, #112]	; (800a974 <MX_TIM8_Init+0xa8>)
 800a904:	2200      	movs	r2, #0
 800a906:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800a908:	4b1a      	ldr	r3, [pc, #104]	; (800a974 <MX_TIM8_Init+0xa8>)
 800a90a:	2200      	movs	r2, #0
 800a90c:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800a90e:	4b19      	ldr	r3, [pc, #100]	; (800a974 <MX_TIM8_Init+0xa8>)
 800a910:	2200      	movs	r2, #0
 800a912:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800a914:	2303      	movs	r3, #3
 800a916:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800a918:	2300      	movs	r3, #0
 800a91a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800a91c:	2301      	movs	r3, #1
 800a91e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800a920:	2300      	movs	r3, #0
 800a922:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800a924:	2300      	movs	r3, #0
 800a926:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800a928:	2300      	movs	r3, #0
 800a92a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800a92c:	2301      	movs	r3, #1
 800a92e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800a930:	2300      	movs	r3, #0
 800a932:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800a934:	2300      	movs	r3, #0
 800a936:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 800a938:	f107 030c 	add.w	r3, r7, #12
 800a93c:	4619      	mov	r1, r3
 800a93e:	480d      	ldr	r0, [pc, #52]	; (800a974 <MX_TIM8_Init+0xa8>)
 800a940:	f7f8 ff72 	bl	8003828 <HAL_TIM_Encoder_Init>
 800a944:	4603      	mov	r3, r0
 800a946:	2b00      	cmp	r3, #0
 800a948:	d001      	beq.n	800a94e <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 800a94a:	f000 f968 	bl	800ac1e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800a94e:	2300      	movs	r3, #0
 800a950:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800a952:	2300      	movs	r3, #0
 800a954:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800a956:	1d3b      	adds	r3, r7, #4
 800a958:	4619      	mov	r1, r3
 800a95a:	4806      	ldr	r0, [pc, #24]	; (800a974 <MX_TIM8_Init+0xa8>)
 800a95c:	f7f9 fdeb 	bl	8004536 <HAL_TIMEx_MasterConfigSynchronization>
 800a960:	4603      	mov	r3, r0
 800a962:	2b00      	cmp	r3, #0
 800a964:	d001      	beq.n	800a96a <MX_TIM8_Init+0x9e>
  {
    Error_Handler();
 800a966:	f000 f95a 	bl	800ac1e <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 800a96a:	bf00      	nop
 800a96c:	3730      	adds	r7, #48	; 0x30
 800a96e:	46bd      	mov	sp, r7
 800a970:	bd80      	pop	{r7, pc}
 800a972:	bf00      	nop
 800a974:	2000034c 	.word	0x2000034c
 800a978:	40010400 	.word	0x40010400

0800a97c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800a97c:	b580      	push	{r7, lr}
 800a97e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800a980:	4b11      	ldr	r3, [pc, #68]	; (800a9c8 <MX_USART1_UART_Init+0x4c>)
 800a982:	4a12      	ldr	r2, [pc, #72]	; (800a9cc <MX_USART1_UART_Init+0x50>)
 800a984:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800a986:	4b10      	ldr	r3, [pc, #64]	; (800a9c8 <MX_USART1_UART_Init+0x4c>)
 800a988:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800a98c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800a98e:	4b0e      	ldr	r3, [pc, #56]	; (800a9c8 <MX_USART1_UART_Init+0x4c>)
 800a990:	2200      	movs	r2, #0
 800a992:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800a994:	4b0c      	ldr	r3, [pc, #48]	; (800a9c8 <MX_USART1_UART_Init+0x4c>)
 800a996:	2200      	movs	r2, #0
 800a998:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800a99a:	4b0b      	ldr	r3, [pc, #44]	; (800a9c8 <MX_USART1_UART_Init+0x4c>)
 800a99c:	2200      	movs	r2, #0
 800a99e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800a9a0:	4b09      	ldr	r3, [pc, #36]	; (800a9c8 <MX_USART1_UART_Init+0x4c>)
 800a9a2:	220c      	movs	r2, #12
 800a9a4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800a9a6:	4b08      	ldr	r3, [pc, #32]	; (800a9c8 <MX_USART1_UART_Init+0x4c>)
 800a9a8:	2200      	movs	r2, #0
 800a9aa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800a9ac:	4b06      	ldr	r3, [pc, #24]	; (800a9c8 <MX_USART1_UART_Init+0x4c>)
 800a9ae:	2200      	movs	r2, #0
 800a9b0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800a9b2:	4805      	ldr	r0, [pc, #20]	; (800a9c8 <MX_USART1_UART_Init+0x4c>)
 800a9b4:	f7f9 fe18 	bl	80045e8 <HAL_UART_Init>
 800a9b8:	4603      	mov	r3, r0
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	d001      	beq.n	800a9c2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800a9be:	f000 f92e 	bl	800ac1e <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800a9c2:	bf00      	nop
 800a9c4:	bd80      	pop	{r7, pc}
 800a9c6:	bf00      	nop
 800a9c8:	20000be4 	.word	0x20000be4
 800a9cc:	40011000 	.word	0x40011000

0800a9d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800a9d0:	b580      	push	{r7, lr}
 800a9d2:	b08a      	sub	sp, #40	; 0x28
 800a9d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a9d6:	f107 0314 	add.w	r3, r7, #20
 800a9da:	2200      	movs	r2, #0
 800a9dc:	601a      	str	r2, [r3, #0]
 800a9de:	605a      	str	r2, [r3, #4]
 800a9e0:	609a      	str	r2, [r3, #8]
 800a9e2:	60da      	str	r2, [r3, #12]
 800a9e4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800a9e6:	2300      	movs	r3, #0
 800a9e8:	613b      	str	r3, [r7, #16]
 800a9ea:	4b53      	ldr	r3, [pc, #332]	; (800ab38 <MX_GPIO_Init+0x168>)
 800a9ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a9ee:	4a52      	ldr	r2, [pc, #328]	; (800ab38 <MX_GPIO_Init+0x168>)
 800a9f0:	f043 0304 	orr.w	r3, r3, #4
 800a9f4:	6313      	str	r3, [r2, #48]	; 0x30
 800a9f6:	4b50      	ldr	r3, [pc, #320]	; (800ab38 <MX_GPIO_Init+0x168>)
 800a9f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a9fa:	f003 0304 	and.w	r3, r3, #4
 800a9fe:	613b      	str	r3, [r7, #16]
 800aa00:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800aa02:	2300      	movs	r3, #0
 800aa04:	60fb      	str	r3, [r7, #12]
 800aa06:	4b4c      	ldr	r3, [pc, #304]	; (800ab38 <MX_GPIO_Init+0x168>)
 800aa08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa0a:	4a4b      	ldr	r2, [pc, #300]	; (800ab38 <MX_GPIO_Init+0x168>)
 800aa0c:	f043 0301 	orr.w	r3, r3, #1
 800aa10:	6313      	str	r3, [r2, #48]	; 0x30
 800aa12:	4b49      	ldr	r3, [pc, #292]	; (800ab38 <MX_GPIO_Init+0x168>)
 800aa14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa16:	f003 0301 	and.w	r3, r3, #1
 800aa1a:	60fb      	str	r3, [r7, #12]
 800aa1c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800aa1e:	2300      	movs	r3, #0
 800aa20:	60bb      	str	r3, [r7, #8]
 800aa22:	4b45      	ldr	r3, [pc, #276]	; (800ab38 <MX_GPIO_Init+0x168>)
 800aa24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa26:	4a44      	ldr	r2, [pc, #272]	; (800ab38 <MX_GPIO_Init+0x168>)
 800aa28:	f043 0302 	orr.w	r3, r3, #2
 800aa2c:	6313      	str	r3, [r2, #48]	; 0x30
 800aa2e:	4b42      	ldr	r3, [pc, #264]	; (800ab38 <MX_GPIO_Init+0x168>)
 800aa30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa32:	f003 0302 	and.w	r3, r3, #2
 800aa36:	60bb      	str	r3, [r7, #8]
 800aa38:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800aa3a:	2300      	movs	r3, #0
 800aa3c:	607b      	str	r3, [r7, #4]
 800aa3e:	4b3e      	ldr	r3, [pc, #248]	; (800ab38 <MX_GPIO_Init+0x168>)
 800aa40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa42:	4a3d      	ldr	r2, [pc, #244]	; (800ab38 <MX_GPIO_Init+0x168>)
 800aa44:	f043 0308 	orr.w	r3, r3, #8
 800aa48:	6313      	str	r3, [r2, #48]	; 0x30
 800aa4a:	4b3b      	ldr	r3, [pc, #236]	; (800ab38 <MX_GPIO_Init+0x168>)
 800aa4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa4e:	f003 0308 	and.w	r3, r3, #8
 800aa52:	607b      	str	r3, [r7, #4]
 800aa54:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_2 
 800aa56:	2200      	movs	r2, #0
 800aa58:	f24e 213c 	movw	r1, #57916	; 0xe23c
 800aa5c:	4837      	ldr	r0, [pc, #220]	; (800ab3c <MX_GPIO_Init+0x16c>)
 800aa5e:	f7f7 fc51 	bl	8002304 <HAL_GPIO_WritePin>
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8, GPIO_PIN_RESET);
 800aa62:	2200      	movs	r2, #0
 800aa64:	f44f 71e8 	mov.w	r1, #464	; 0x1d0
 800aa68:	4835      	ldr	r0, [pc, #212]	; (800ab40 <MX_GPIO_Init+0x170>)
 800aa6a:	f7f7 fc4b 	bl	8002304 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_13 
 800aa6e:	2200      	movs	r2, #0
 800aa70:	f242 7103 	movw	r1, #9987	; 0x2703
 800aa74:	4833      	ldr	r0, [pc, #204]	; (800ab44 <MX_GPIO_Init+0x174>)
 800aa76:	f7f7 fc45 	bl	8002304 <HAL_GPIO_WritePin>
                          |GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 800aa7a:	2200      	movs	r2, #0
 800aa7c:	2104      	movs	r1, #4
 800aa7e:	4832      	ldr	r0, [pc, #200]	; (800ab48 <MX_GPIO_Init+0x178>)
 800aa80:	f7f7 fc40 	bl	8002304 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 PC2 
                           PC3 PC4 PC5 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_2 
 800aa84:	f24e 233c 	movw	r3, #57916	; 0xe23c
 800aa88:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800aa8a:	2301      	movs	r3, #1
 800aa8c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800aa8e:	2300      	movs	r3, #0
 800aa90:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800aa92:	2300      	movs	r3, #0
 800aa94:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800aa96:	f107 0314 	add.w	r3, r7, #20
 800aa9a:	4619      	mov	r1, r3
 800aa9c:	4827      	ldr	r0, [pc, #156]	; (800ab3c <MX_GPIO_Init+0x16c>)
 800aa9e:	f7f7 fa7f 	bl	8001fa0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA6 PA7 PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 800aaa2:	f44f 73e8 	mov.w	r3, #464	; 0x1d0
 800aaa6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800aaa8:	2301      	movs	r3, #1
 800aaaa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800aaac:	2300      	movs	r3, #0
 800aaae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800aab0:	2300      	movs	r3, #0
 800aab2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800aab4:	f107 0314 	add.w	r3, r7, #20
 800aab8:	4619      	mov	r1, r3
 800aaba:	4821      	ldr	r0, [pc, #132]	; (800ab40 <MX_GPIO_Init+0x170>)
 800aabc:	f7f7 fa70 	bl	8001fa0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB10 PB13 
                           PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_13 
 800aac0:	f242 7303 	movw	r3, #9987	; 0x2703
 800aac4:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800aac6:	2301      	movs	r3, #1
 800aac8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800aaca:	2300      	movs	r3, #0
 800aacc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800aace:	2300      	movs	r3, #0
 800aad0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800aad2:	f107 0314 	add.w	r3, r7, #20
 800aad6:	4619      	mov	r1, r3
 800aad8:	481a      	ldr	r0, [pc, #104]	; (800ab44 <MX_GPIO_Init+0x174>)
 800aada:	f7f7 fa61 	bl	8001fa0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 800aade:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800aae2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800aae4:	2300      	movs	r3, #0
 800aae6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800aae8:	2301      	movs	r3, #1
 800aaea:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800aaec:	f107 0314 	add.w	r3, r7, #20
 800aaf0:	4619      	mov	r1, r3
 800aaf2:	4814      	ldr	r0, [pc, #80]	; (800ab44 <MX_GPIO_Init+0x174>)
 800aaf4:	f7f7 fa54 	bl	8001fa0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 800aaf8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800aafc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800aafe:	2300      	movs	r3, #0
 800ab00:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ab02:	2300      	movs	r3, #0
 800ab04:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ab06:	f107 0314 	add.w	r3, r7, #20
 800ab0a:	4619      	mov	r1, r3
 800ab0c:	480c      	ldr	r0, [pc, #48]	; (800ab40 <MX_GPIO_Init+0x170>)
 800ab0e:	f7f7 fa47 	bl	8001fa0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800ab12:	2304      	movs	r3, #4
 800ab14:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800ab16:	2301      	movs	r3, #1
 800ab18:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ab1a:	2300      	movs	r3, #0
 800ab1c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ab1e:	2300      	movs	r3, #0
 800ab20:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800ab22:	f107 0314 	add.w	r3, r7, #20
 800ab26:	4619      	mov	r1, r3
 800ab28:	4807      	ldr	r0, [pc, #28]	; (800ab48 <MX_GPIO_Init+0x178>)
 800ab2a:	f7f7 fa39 	bl	8001fa0 <HAL_GPIO_Init>

}
 800ab2e:	bf00      	nop
 800ab30:	3728      	adds	r7, #40	; 0x28
 800ab32:	46bd      	mov	sp, r7
 800ab34:	bd80      	pop	{r7, pc}
 800ab36:	bf00      	nop
 800ab38:	40023800 	.word	0x40023800
 800ab3c:	40020800 	.word	0x40020800
 800ab40:	40020000 	.word	0x40020000
 800ab44:	40020400 	.word	0x40020400
 800ab48:	40020c00 	.word	0x40020c00

0800ab4c <buzzer>:

/* USER CODE BEGIN 4 */
void buzzer(int sound, int length){
 800ab4c:	b580      	push	{r7, lr}
 800ab4e:	b08a      	sub	sp, #40	; 0x28
 800ab50:	af00      	add	r7, sp, #0
 800ab52:	6078      	str	r0, [r7, #4]
 800ab54:	6039      	str	r1, [r7, #0]
	TIM_OC_InitTypeDef ConfigOC;
	ConfigOC.OCMode = TIM_OCMODE_PWM1;
 800ab56:	2360      	movs	r3, #96	; 0x60
 800ab58:	60fb      	str	r3, [r7, #12]
	ConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800ab5a:	2300      	movs	r3, #0
 800ab5c:	617b      	str	r3, [r7, #20]
	ConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800ab5e:	2300      	movs	r3, #0
 800ab60:	61fb      	str	r3, [r7, #28]

	hz = 1000000 / sound;
 800ab62:	4a15      	ldr	r2, [pc, #84]	; (800abb8 <buzzer+0x6c>)
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	fb92 f3f3 	sdiv	r3, r2, r3
 800ab6a:	4a14      	ldr	r2, [pc, #80]	; (800abbc <buzzer+0x70>)
 800ab6c:	6013      	str	r3, [r2, #0]
	TIM3 -> ARR = hz;
 800ab6e:	4b13      	ldr	r3, [pc, #76]	; (800abbc <buzzer+0x70>)
 800ab70:	681a      	ldr	r2, [r3, #0]
 800ab72:	4b13      	ldr	r3, [pc, #76]	; (800abc0 <buzzer+0x74>)
 800ab74:	62da      	str	r2, [r3, #44]	; 0x2c
    ConfigOC.Pulse = hz / 10;
 800ab76:	4b11      	ldr	r3, [pc, #68]	; (800abbc <buzzer+0x70>)
 800ab78:	681b      	ldr	r3, [r3, #0]
 800ab7a:	4a12      	ldr	r2, [pc, #72]	; (800abc4 <buzzer+0x78>)
 800ab7c:	fb82 1203 	smull	r1, r2, r2, r3
 800ab80:	1092      	asrs	r2, r2, #2
 800ab82:	17db      	asrs	r3, r3, #31
 800ab84:	1ad3      	subs	r3, r2, r3
 800ab86:	613b      	str	r3, [r7, #16]
    HAL_TIM_PWM_ConfigChannel(&htim3, &ConfigOC, TIM_CHANNEL_2);
 800ab88:	f107 030c 	add.w	r3, r7, #12
 800ab8c:	2204      	movs	r2, #4
 800ab8e:	4619      	mov	r1, r3
 800ab90:	480d      	ldr	r0, [pc, #52]	; (800abc8 <buzzer+0x7c>)
 800ab92:	f7f9 f81b 	bl	8003bcc <HAL_TIM_PWM_ConfigChannel>
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 800ab96:	2104      	movs	r1, #4
 800ab98:	480b      	ldr	r0, [pc, #44]	; (800abc8 <buzzer+0x7c>)
 800ab9a:	f7f8 fdaf 	bl	80036fc <HAL_TIM_PWM_Start>

	HAL_Delay(length);
 800ab9e:	683b      	ldr	r3, [r7, #0]
 800aba0:	4618      	mov	r0, r3
 800aba2:	f7f6 fa3b 	bl	800101c <HAL_Delay>
    HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_2);
 800aba6:	2104      	movs	r1, #4
 800aba8:	4807      	ldr	r0, [pc, #28]	; (800abc8 <buzzer+0x7c>)
 800abaa:	f7f8 fde5 	bl	8003778 <HAL_TIM_PWM_Stop>
}
 800abae:	bf00      	nop
 800abb0:	3728      	adds	r7, #40	; 0x28
 800abb2:	46bd      	mov	sp, r7
 800abb4:	bd80      	pop	{r7, pc}
 800abb6:	bf00      	nop
 800abb8:	000f4240 	.word	0x000f4240
 800abbc:	20000344 	.word	0x20000344
 800abc0:	40000400 	.word	0x40000400
 800abc4:	66666667 	.word	0x66666667
 800abc8:	20000b24 	.word	0x20000b24

0800abcc <get_adc_value>:


int get_adc_value(ADC_HandleTypeDef *hadc, uint32_t channel){
 800abcc:	b580      	push	{r7, lr}
 800abce:	b086      	sub	sp, #24
 800abd0:	af00      	add	r7, sp, #0
 800abd2:	6078      	str	r0, [r7, #4]
 800abd4:	6039      	str	r1, [r7, #0]

  ADC_ChannelConfTypeDef sConfig = {0};
 800abd6:	f107 0308 	add.w	r3, r7, #8
 800abda:	2200      	movs	r2, #0
 800abdc:	601a      	str	r2, [r3, #0]
 800abde:	605a      	str	r2, [r3, #4]
 800abe0:	609a      	str	r2, [r3, #8]
 800abe2:	60da      	str	r2, [r3, #12]

  sConfig.Channel = channel;
 800abe4:	683b      	ldr	r3, [r7, #0]
 800abe6:	60bb      	str	r3, [r7, #8]
  sConfig.Rank = 1;
 800abe8:	2301      	movs	r3, #1
 800abea:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800abec:	2300      	movs	r3, #0
 800abee:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800abf0:	2300      	movs	r3, #0
 800abf2:	617b      	str	r3, [r7, #20]

  HAL_ADC_ConfigChannel(hadc, &sConfig);
 800abf4:	f107 0308 	add.w	r3, r7, #8
 800abf8:	4619      	mov	r1, r3
 800abfa:	6878      	ldr	r0, [r7, #4]
 800abfc:	f7f6 fbcc 	bl	8001398 <HAL_ADC_ConfigChannel>

  HAL_ADC_Start(hadc);                    //
 800ac00:	6878      	ldr	r0, [r7, #4]
 800ac02:	f7f6 fa71 	bl	80010e8 <HAL_ADC_Start>
  HAL_ADC_PollForConversion(hadc, 100);   //wait for ADC
 800ac06:	2164      	movs	r1, #100	; 0x64
 800ac08:	6878      	ldr	r0, [r7, #4]
 800ac0a:	f7f6 fb33 	bl	8001274 <HAL_ADC_PollForConversion>
  return HAL_ADC_GetValue(hadc);          //
 800ac0e:	6878      	ldr	r0, [r7, #4]
 800ac10:	f7f6 fbb4 	bl	800137c <HAL_ADC_GetValue>
 800ac14:	4603      	mov	r3, r0
}
 800ac16:	4618      	mov	r0, r3
 800ac18:	3718      	adds	r7, #24
 800ac1a:	46bd      	mov	sp, r7
 800ac1c:	bd80      	pop	{r7, pc}

0800ac1e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800ac1e:	b480      	push	{r7}
 800ac20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800ac22:	bf00      	nop
 800ac24:	46bd      	mov	sp, r7
 800ac26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac2a:	4770      	bx	lr

0800ac2c <search_init>:

#include "global.h"

void search_init(void){
 800ac2c:	b580      	push	{r7, lr}
 800ac2e:	af00      	add	r7, sp, #0

	//----a探索系----
	goal_x = GOAL_X;        		//GOAL_Xはglobal.hにマクロ定義あり
 800ac30:	4b09      	ldr	r3, [pc, #36]	; (800ac58 <search_init+0x2c>)
 800ac32:	2209      	movs	r2, #9
 800ac34:	701a      	strb	r2, [r3, #0]
	goal_y = GOAL_Y;        		//GOAL_Yはglobal.hにマクロ定義あり
 800ac36:	4b09      	ldr	r3, [pc, #36]	; (800ac5c <search_init+0x30>)
 800ac38:	2206      	movs	r2, #6
 800ac3a:	701a      	strb	r2, [r3, #0]
	map_Init();						//aマップの初期化
 800ac3c:	f001 f888 	bl	800bd50 <map_Init>
	mouse.x = 0;
 800ac40:	4b07      	ldr	r3, [pc, #28]	; (800ac60 <search_init+0x34>)
 800ac42:	2200      	movs	r2, #0
 800ac44:	701a      	strb	r2, [r3, #0]
	mouse.y = 0;					//a現在地の初期化
 800ac46:	4b06      	ldr	r3, [pc, #24]	; (800ac60 <search_init+0x34>)
 800ac48:	2200      	movs	r2, #0
 800ac4a:	705a      	strb	r2, [r3, #1]
	mouse.dir = 0;					//aマウスの向きの初期化
 800ac4c:	4b04      	ldr	r3, [pc, #16]	; (800ac60 <search_init+0x34>)
 800ac4e:	2200      	movs	r2, #0
 800ac50:	709a      	strb	r2, [r3, #2]
}
 800ac52:	bf00      	nop
 800ac54:	bd80      	pop	{r7, pc}
 800ac56:	bf00      	nop
 800ac58:	20000c31 	.word	0x20000c31
 800ac5c:	20000bcc 	.word	0x20000bcc
 800ac60:	20000c90 	.word	0x20000c90

0800ac64 <searchA>:
//searchA
//a1区画走行でgoal座標に進む
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void searchA(){
 800ac64:	b580      	push	{r7, lr}
 800ac66:	af00      	add	r7, sp, #0

	if(MF.FLAG.SCND){
 800ac68:	4b37      	ldr	r3, [pc, #220]	; (800ad48 <searchA+0xe4>)
 800ac6a:	881b      	ldrh	r3, [r3, #0]
 800ac6c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800ac70:	b2db      	uxtb	r3, r3
 800ac72:	2b00      	cmp	r3, #0
 800ac74:	d001      	beq.n	800ac7a <searchA+0x16>
		load_map_from_eeprom();
 800ac76:	f002 fc33 	bl	800d4e0 <load_map_from_eeprom>
	}

	//====aスタート位置壁情報取得====
	get_wall_info();										//a壁情報の初期化, 後壁はなくなる
 800ac7a:	f002 fca9 	bl	800d5d0 <get_wall_info>
	wall_info &= ~0x88;										//a前壁は存在するはずがないので削除する
 800ac7e:	4b33      	ldr	r3, [pc, #204]	; (800ad4c <searchA+0xe8>)
 800ac80:	781b      	ldrb	r3, [r3, #0]
 800ac82:	f003 0377 	and.w	r3, r3, #119	; 0x77
 800ac86:	b2da      	uxtb	r2, r3
 800ac88:	4b30      	ldr	r3, [pc, #192]	; (800ad4c <searchA+0xe8>)
 800ac8a:	701a      	strb	r2, [r3, #0]
	write_map();											//a壁情報を地図に記入
 800ac8c:	f001 f8cc 	bl	800be28 <write_map>

	//====a歩数マップ・経路作成====
	r_cnt = 0;												//a経路カウンタの初期化
 800ac90:	4b2f      	ldr	r3, [pc, #188]	; (800ad50 <searchA+0xec>)
 800ac92:	2200      	movs	r2, #0
 800ac94:	701a      	strb	r2, [r3, #0]
	make_smap();											//a歩数マップ作成
 800ac96:	f001 fa57 	bl	800c148 <make_smap>
	make_route();											//a最短経路探索（route配列に動作が格納される）
 800ac9a:	f001 fd93 	bl	800c7c4 <make_route>

	//====a探索走行====
	do{
		//----a進行----
		switch(route[r_cnt++]){								//route配列によって進行を決定。経路カウンタを進める
 800ac9e:	4b2c      	ldr	r3, [pc, #176]	; (800ad50 <searchA+0xec>)
 800aca0:	781b      	ldrb	r3, [r3, #0]
 800aca2:	1c5a      	adds	r2, r3, #1
 800aca4:	b2d1      	uxtb	r1, r2
 800aca6:	4a2a      	ldr	r2, [pc, #168]	; (800ad50 <searchA+0xec>)
 800aca8:	7011      	strb	r1, [r2, #0]
 800acaa:	461a      	mov	r2, r3
 800acac:	4b29      	ldr	r3, [pc, #164]	; (800ad54 <searchA+0xf0>)
 800acae:	5c9b      	ldrb	r3, [r3, r2]
 800acb0:	2b22      	cmp	r3, #34	; 0x22
 800acb2:	d00b      	beq.n	800accc <searchA+0x68>
 800acb4:	2b22      	cmp	r3, #34	; 0x22
 800acb6:	dc02      	bgt.n	800acbe <searchA+0x5a>
 800acb8:	2b11      	cmp	r3, #17
 800acba:	d012      	beq.n	800ace2 <searchA+0x7e>
 800acbc:	e015      	b.n	800acea <searchA+0x86>
 800acbe:	2b44      	cmp	r3, #68	; 0x44
 800acc0:	d001      	beq.n	800acc6 <searchA+0x62>
 800acc2:	2b88      	cmp	r3, #136	; 0x88
			//----a前進----
			case 0x88:
				break;
 800acc4:	e011      	b.n	800acea <searchA+0x86>
			//----a右折----
			case 0x44:
				rotate_R90();								//a右回転
 800acc6:	f7fa fcbb 	bl	8005640 <rotate_R90>
				break;
 800acca:	e00e      	b.n	800acea <searchA+0x86>
			//----180回転----
			case 0x22:
				rotate_180();								//180度回転
 800accc:	f7fa fe50 	bl	8005970 <rotate_180>
				if(wall_info & 0x88){
 800acd0:	4b1e      	ldr	r3, [pc, #120]	; (800ad4c <searchA+0xe8>)
 800acd2:	781b      	ldrb	r3, [r3, #0]
 800acd4:	f003 0388 	and.w	r3, r3, #136	; 0x88
 800acd8:	2b00      	cmp	r3, #0
 800acda:	d005      	beq.n	800ace8 <searchA+0x84>
					set_position();
 800acdc:	f7fa fb44 	bl	8005368 <set_position>
				}
				break;
 800ace0:	e002      	b.n	800ace8 <searchA+0x84>
			//----a左折----
			case 0x11:
				rotate_L90();								//a左回転
 800ace2:	f7fa fd79 	bl	80057d8 <rotate_L90>
				break;
 800ace6:	e000      	b.n	800acea <searchA+0x86>
				break;
 800ace8:	bf00      	nop
		}

		drive_wait();
 800acea:	2032      	movs	r0, #50	; 0x32
 800acec:	f7f6 f996 	bl	800101c <HAL_Delay>
		one_section();										//a前進する
 800acf0:	f7fa fc36 	bl	8005560 <one_section>
		drive_wait();
 800acf4:	2032      	movs	r0, #50	; 0x32
 800acf6:	f7f6 f991 	bl	800101c <HAL_Delay>

		adv_pos();											//aマイクロマウス内部位置情報でも前進処理
 800acfa:	f000 fd45 	bl	800b788 <adv_pos>
		conf_route();										//a最短経路で進行可能か判定
 800acfe:	f001 f809 	bl	800bd14 <conf_route>

	}while((mouse.x != goal_x) || (mouse.y != goal_y));		//a現在座標とgoal座標が等しくなるまで実行
 800ad02:	4b15      	ldr	r3, [pc, #84]	; (800ad58 <searchA+0xf4>)
 800ad04:	781b      	ldrb	r3, [r3, #0]
 800ad06:	b2da      	uxtb	r2, r3
 800ad08:	4b14      	ldr	r3, [pc, #80]	; (800ad5c <searchA+0xf8>)
 800ad0a:	781b      	ldrb	r3, [r3, #0]
 800ad0c:	429a      	cmp	r2, r3
 800ad0e:	d1c6      	bne.n	800ac9e <searchA+0x3a>
 800ad10:	4b11      	ldr	r3, [pc, #68]	; (800ad58 <searchA+0xf4>)
 800ad12:	785b      	ldrb	r3, [r3, #1]
 800ad14:	b2da      	uxtb	r2, r3
 800ad16:	4b12      	ldr	r3, [pc, #72]	; (800ad60 <searchA+0xfc>)
 800ad18:	781b      	ldrb	r3, [r3, #0]
 800ad1a:	429a      	cmp	r2, r3
 800ad1c:	d1bf      	bne.n	800ac9e <searchA+0x3a>

	printf("goal\n");
 800ad1e:	4811      	ldr	r0, [pc, #68]	; (800ad64 <searchA+0x100>)
 800ad20:	f003 fad2 	bl	800e2c8 <puts>
	HAL_Delay(2000);										//aスタートでは***2秒以上***停止しなくてはならない
 800ad24:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800ad28:	f7f6 f978 	bl	800101c <HAL_Delay>
	rotate_180();											//180度回転
 800ad2c:	f7fa fe20 	bl	8005970 <rotate_180>

	if(!MF.FLAG.SCND){
 800ad30:	4b05      	ldr	r3, [pc, #20]	; (800ad48 <searchA+0xe4>)
 800ad32:	881b      	ldrh	r3, [r3, #0]
 800ad34:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800ad38:	b2db      	uxtb	r3, r3
 800ad3a:	2b00      	cmp	r3, #0
 800ad3c:	d101      	bne.n	800ad42 <searchA+0xde>
		store_map_in_eeprom();
 800ad3e:	f002 fb95 	bl	800d46c <store_map_in_eeprom>
	}
}
 800ad42:	bf00      	nop
 800ad44:	bd80      	pop	{r7, pc}
 800ad46:	bf00      	nop
 800ad48:	20000fe8 	.word	0x20000fe8
 800ad4c:	20000348 	.word	0x20000348
 800ad50:	20001010 	.word	0x20001010
 800ad54:	20000cd8 	.word	0x20000cd8
 800ad58:	20000c90 	.word	0x20000c90
 800ad5c:	20000c31 	.word	0x20000c31
 800ad60:	20000bcc 	.word	0x20000bcc
 800ad64:	0800f820 	.word	0x0800f820

0800ad68 <searchB>:
//searchB
//a連続走行でgoal座標に進む
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void searchB(){
 800ad68:	b580      	push	{r7, lr}
 800ad6a:	af00      	add	r7, sp, #0

	if(MF.FLAG.SCND){
 800ad6c:	4b3c      	ldr	r3, [pc, #240]	; (800ae60 <searchB+0xf8>)
 800ad6e:	881b      	ldrh	r3, [r3, #0]
 800ad70:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800ad74:	b2db      	uxtb	r3, r3
 800ad76:	2b00      	cmp	r3, #0
 800ad78:	d001      	beq.n	800ad7e <searchB+0x16>
		load_map_from_eeprom();
 800ad7a:	f002 fbb1 	bl	800d4e0 <load_map_from_eeprom>
	}

	//====aスタート位置壁情報取得====
	get_wall_info();										//a壁情報の初期化, 後壁はなくなる
 800ad7e:	f002 fc27 	bl	800d5d0 <get_wall_info>
	wall_info &= ~0x88;										//a前壁は存在するはずがないので削除する
 800ad82:	4b38      	ldr	r3, [pc, #224]	; (800ae64 <searchB+0xfc>)
 800ad84:	781b      	ldrb	r3, [r3, #0]
 800ad86:	f003 0377 	and.w	r3, r3, #119	; 0x77
 800ad8a:	b2da      	uxtb	r2, r3
 800ad8c:	4b35      	ldr	r3, [pc, #212]	; (800ae64 <searchB+0xfc>)
 800ad8e:	701a      	strb	r2, [r3, #0]
	write_map();											//a壁情報を地図に記入
 800ad90:	f001 f84a 	bl	800be28 <write_map>

	//====a前に壁が無い想定で問答無用で前進====
	start_sectionA();
 800ad94:	f7fa fafa 	bl	800538c <start_sectionA>
	adv_pos();
 800ad98:	f000 fcf6 	bl	800b788 <adv_pos>

	//====a歩数マップ・経路作成====
	write_map();											//a壁情報を地図に記入
 800ad9c:	f001 f844 	bl	800be28 <write_map>
	r_cnt = 0;												//a経路カウンタの初期化
 800ada0:	4b31      	ldr	r3, [pc, #196]	; (800ae68 <searchB+0x100>)
 800ada2:	2200      	movs	r2, #0
 800ada4:	701a      	strb	r2, [r3, #0]
	make_smap();											//a歩数マップ作成
 800ada6:	f001 f9cf 	bl	800c148 <make_smap>
	make_route();											//a最短経路探索（route配列に動作が格納される）
 800adaa:	f001 fd0b 	bl	800c7c4 <make_route>

	//====a探索走行====
	do{
		//----a進行----
		switch(route[r_cnt++]){								//route配列によって進行を決定。経路カウンタを進める
 800adae:	4b2e      	ldr	r3, [pc, #184]	; (800ae68 <searchB+0x100>)
 800adb0:	781b      	ldrb	r3, [r3, #0]
 800adb2:	1c5a      	adds	r2, r3, #1
 800adb4:	b2d1      	uxtb	r1, r2
 800adb6:	4a2c      	ldr	r2, [pc, #176]	; (800ae68 <searchB+0x100>)
 800adb8:	7011      	strb	r1, [r2, #0]
 800adba:	461a      	mov	r2, r3
 800adbc:	4b2b      	ldr	r3, [pc, #172]	; (800ae6c <searchB+0x104>)
 800adbe:	5c9b      	ldrb	r3, [r3, r2]
 800adc0:	2b22      	cmp	r3, #34	; 0x22
 800adc2:	d012      	beq.n	800adea <searchB+0x82>
 800adc4:	2b22      	cmp	r3, #34	; 0x22
 800adc6:	dc02      	bgt.n	800adce <searchB+0x66>
 800adc8:	2b11      	cmp	r3, #17
 800adca:	d01d      	beq.n	800ae08 <searchB+0xa0>
 800adcc:	e023      	b.n	800ae16 <searchB+0xae>
 800adce:	2b44      	cmp	r3, #68	; 0x44
 800add0:	d004      	beq.n	800addc <searchB+0x74>
 800add2:	2b88      	cmp	r3, #136	; 0x88
 800add4:	d11f      	bne.n	800ae16 <searchB+0xae>
			//----a前進----
			case 0x88:
				one_sectionU();
 800add6:	f7fa fc19 	bl	800560c <one_sectionU>
				break;
 800adda:	e01c      	b.n	800ae16 <searchB+0xae>
			//----a右折----
			case 0x44:
				half_sectionD();
 800addc:	f7fa fb1c 	bl	8005418 <half_sectionD>
				rotate_R90();
 800ade0:	f7fa fc2e 	bl	8005640 <rotate_R90>
				half_sectionA();
 800ade4:	f7fa fafe 	bl	80053e4 <half_sectionA>
				break;
 800ade8:	e015      	b.n	800ae16 <searchB+0xae>
			//----180回転----
			case 0x22:
				half_sectionD();
 800adea:	f7fa fb15 	bl	8005418 <half_sectionD>
				rotate_180();
 800adee:	f7fa fdbf 	bl	8005970 <rotate_180>
				if(wall_info & 0x88){
 800adf2:	4b1c      	ldr	r3, [pc, #112]	; (800ae64 <searchB+0xfc>)
 800adf4:	781b      	ldrb	r3, [r3, #0]
 800adf6:	f003 0388 	and.w	r3, r3, #136	; 0x88
 800adfa:	2b00      	cmp	r3, #0
 800adfc:	d001      	beq.n	800ae02 <searchB+0x9a>
					set_position();
 800adfe:	f7fa fab3 	bl	8005368 <set_position>
				}
				half_sectionA();
 800ae02:	f7fa faef 	bl	80053e4 <half_sectionA>
				break;
 800ae06:	e006      	b.n	800ae16 <searchB+0xae>
			//----a左折----
			case 0x11:
				half_sectionD();
 800ae08:	f7fa fb06 	bl	8005418 <half_sectionD>
				rotate_L90();
 800ae0c:	f7fa fce4 	bl	80057d8 <rotate_L90>
				half_sectionA();
 800ae10:	f7fa fae8 	bl	80053e4 <half_sectionA>
				break;
 800ae14:	bf00      	nop
		}
		adv_pos();
 800ae16:	f000 fcb7 	bl	800b788 <adv_pos>
		conf_route();
 800ae1a:	f000 ff7b 	bl	800bd14 <conf_route>

	}while((mouse.x != goal_x) || (mouse.y != goal_y));
 800ae1e:	4b14      	ldr	r3, [pc, #80]	; (800ae70 <searchB+0x108>)
 800ae20:	781b      	ldrb	r3, [r3, #0]
 800ae22:	b2da      	uxtb	r2, r3
 800ae24:	4b13      	ldr	r3, [pc, #76]	; (800ae74 <searchB+0x10c>)
 800ae26:	781b      	ldrb	r3, [r3, #0]
 800ae28:	429a      	cmp	r2, r3
 800ae2a:	d1c0      	bne.n	800adae <searchB+0x46>
 800ae2c:	4b10      	ldr	r3, [pc, #64]	; (800ae70 <searchB+0x108>)
 800ae2e:	785b      	ldrb	r3, [r3, #1]
 800ae30:	b2da      	uxtb	r2, r3
 800ae32:	4b11      	ldr	r3, [pc, #68]	; (800ae78 <searchB+0x110>)
 800ae34:	781b      	ldrb	r3, [r3, #0]
 800ae36:	429a      	cmp	r2, r3
 800ae38:	d1b9      	bne.n	800adae <searchB+0x46>

	half_sectionD();
 800ae3a:	f7fa faed 	bl	8005418 <half_sectionD>

	HAL_Delay(2000);
 800ae3e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800ae42:	f7f6 f8eb 	bl	800101c <HAL_Delay>
	rotate_180();											//180度回転
 800ae46:	f7fa fd93 	bl	8005970 <rotate_180>

	if(!MF.FLAG.SCND){
 800ae4a:	4b05      	ldr	r3, [pc, #20]	; (800ae60 <searchB+0xf8>)
 800ae4c:	881b      	ldrh	r3, [r3, #0]
 800ae4e:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800ae52:	b2db      	uxtb	r3, r3
 800ae54:	2b00      	cmp	r3, #0
 800ae56:	d101      	bne.n	800ae5c <searchB+0xf4>
		store_map_in_eeprom();
 800ae58:	f002 fb08 	bl	800d46c <store_map_in_eeprom>
	}
}
 800ae5c:	bf00      	nop
 800ae5e:	bd80      	pop	{r7, pc}
 800ae60:	20000fe8 	.word	0x20000fe8
 800ae64:	20000348 	.word	0x20000348
 800ae68:	20001010 	.word	0x20001010
 800ae6c:	20000cd8 	.word	0x20000cd8
 800ae70:	20000c90 	.word	0x20000c90
 800ae74:	20000c31 	.word	0x20000c31
 800ae78:	20000bcc 	.word	0x20000bcc

0800ae7c <searchC>:
//searchC
//aスラローム走行でgoal座標に進む
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void searchC(){
 800ae7c:	b580      	push	{r7, lr}
 800ae7e:	af00      	add	r7, sp, #0

	if(MF.FLAG.SCND){
 800ae80:	4b4d      	ldr	r3, [pc, #308]	; (800afb8 <searchC+0x13c>)
 800ae82:	881b      	ldrh	r3, [r3, #0]
 800ae84:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800ae88:	b2db      	uxtb	r3, r3
 800ae8a:	2b00      	cmp	r3, #0
 800ae8c:	d001      	beq.n	800ae92 <searchC+0x16>
		load_map_from_eeprom();
 800ae8e:	f002 fb27 	bl	800d4e0 <load_map_from_eeprom>
	}

	//====aスタート位置壁情報取得====
	if(MF.FLAG.SCND == 0)get_wall_info();										//a壁情報の初期化, 後壁はなくなる
 800ae92:	4b49      	ldr	r3, [pc, #292]	; (800afb8 <searchC+0x13c>)
 800ae94:	881b      	ldrh	r3, [r3, #0]
 800ae96:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800ae9a:	b2db      	uxtb	r3, r3
 800ae9c:	2b00      	cmp	r3, #0
 800ae9e:	d101      	bne.n	800aea4 <searchC+0x28>
 800aea0:	f002 fb96 	bl	800d5d0 <get_wall_info>
	if(MF.FLAG.SCND == 0)wall_info &= ~0x88;										//a前壁は存在するはずがないので削除する
 800aea4:	4b44      	ldr	r3, [pc, #272]	; (800afb8 <searchC+0x13c>)
 800aea6:	881b      	ldrh	r3, [r3, #0]
 800aea8:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800aeac:	b2db      	uxtb	r3, r3
 800aeae:	2b00      	cmp	r3, #0
 800aeb0:	d106      	bne.n	800aec0 <searchC+0x44>
 800aeb2:	4b42      	ldr	r3, [pc, #264]	; (800afbc <searchC+0x140>)
 800aeb4:	781b      	ldrb	r3, [r3, #0]
 800aeb6:	f003 0377 	and.w	r3, r3, #119	; 0x77
 800aeba:	b2da      	uxtb	r2, r3
 800aebc:	4b3f      	ldr	r3, [pc, #252]	; (800afbc <searchC+0x140>)
 800aebe:	701a      	strb	r2, [r3, #0]
	if(MF.FLAG.SCND == 0)write_map();											//a壁情報を地図に記入
 800aec0:	4b3d      	ldr	r3, [pc, #244]	; (800afb8 <searchC+0x13c>)
 800aec2:	881b      	ldrh	r3, [r3, #0]
 800aec4:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800aec8:	b2db      	uxtb	r3, r3
 800aeca:	2b00      	cmp	r3, #0
 800aecc:	d101      	bne.n	800aed2 <searchC+0x56>
 800aece:	f000 ffab 	bl	800be28 <write_map>

	//====a前に壁が無い想定で問答無用で前進====
	start_sectionA();
 800aed2:	f7fa fa5b 	bl	800538c <start_sectionA>
	adv_pos();
 800aed6:	f000 fc57 	bl	800b788 <adv_pos>

	//====a歩数マップ・経路作成====
	if(MF.FLAG.SCND == 0)write_map();											//a壁情報を地図に記入
 800aeda:	4b37      	ldr	r3, [pc, #220]	; (800afb8 <searchC+0x13c>)
 800aedc:	881b      	ldrh	r3, [r3, #0]
 800aede:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800aee2:	b2db      	uxtb	r3, r3
 800aee4:	2b00      	cmp	r3, #0
 800aee6:	d101      	bne.n	800aeec <searchC+0x70>
 800aee8:	f000 ff9e 	bl	800be28 <write_map>
	r_cnt = 0;												//a経路カウンタの初期化
 800aeec:	4b34      	ldr	r3, [pc, #208]	; (800afc0 <searchC+0x144>)
 800aeee:	2200      	movs	r2, #0
 800aef0:	701a      	strb	r2, [r3, #0]
	make_smap();											//a歩数マップ作成
 800aef2:	f001 f929 	bl	800c148 <make_smap>
	make_route();											//a最短経路探索（route配列に動作が格納される）
 800aef6:	f001 fc65 	bl	800c7c4 <make_route>

	//====a探索走行====
	do{
		//----a進行----
		switch(route[r_cnt++]){								//route配列によって進行を決定。経路カウンタを進める
 800aefa:	4b31      	ldr	r3, [pc, #196]	; (800afc0 <searchC+0x144>)
 800aefc:	781b      	ldrb	r3, [r3, #0]
 800aefe:	1c5a      	adds	r2, r3, #1
 800af00:	b2d1      	uxtb	r1, r2
 800af02:	4a2f      	ldr	r2, [pc, #188]	; (800afc0 <searchC+0x144>)
 800af04:	7011      	strb	r1, [r2, #0]
 800af06:	461a      	mov	r2, r3
 800af08:	4b2e      	ldr	r3, [pc, #184]	; (800afc4 <searchC+0x148>)
 800af0a:	5c9b      	ldrb	r3, [r3, r2]
 800af0c:	2b22      	cmp	r3, #34	; 0x22
 800af0e:	d00e      	beq.n	800af2e <searchC+0xb2>
 800af10:	2b22      	cmp	r3, #34	; 0x22
 800af12:	dc02      	bgt.n	800af1a <searchC+0x9e>
 800af14:	2b11      	cmp	r3, #17
 800af16:	d020      	beq.n	800af5a <searchC+0xde>
 800af18:	e022      	b.n	800af60 <searchC+0xe4>
 800af1a:	2b44      	cmp	r3, #68	; 0x44
 800af1c:	d004      	beq.n	800af28 <searchC+0xac>
 800af1e:	2b88      	cmp	r3, #136	; 0x88
 800af20:	d11e      	bne.n	800af60 <searchC+0xe4>
			//----a前進----
			case 0x88:
				one_sectionU();
 800af22:	f7fa fb73 	bl	800560c <one_sectionU>
				break;
 800af26:	e01b      	b.n	800af60 <searchC+0xe4>
			//----a右折スラローム----
			case 0x44:
				slalom_R90();
 800af28:	f7fa fdec 	bl	8005b04 <slalom_R90>

				break;
 800af2c:	e018      	b.n	800af60 <searchC+0xe4>
			//----180回転----
			case 0x22:
				half_sectionD();
 800af2e:	f7fa fa73 	bl	8005418 <half_sectionD>
				rotate_180();
 800af32:	f7fa fd1d 	bl	8005970 <rotate_180>
				if(wall_info & 0x88 && MF.FLAG.SCND == 0){
 800af36:	4b21      	ldr	r3, [pc, #132]	; (800afbc <searchC+0x140>)
 800af38:	781b      	ldrb	r3, [r3, #0]
 800af3a:	f003 0388 	and.w	r3, r3, #136	; 0x88
 800af3e:	2b00      	cmp	r3, #0
 800af40:	d008      	beq.n	800af54 <searchC+0xd8>
 800af42:	4b1d      	ldr	r3, [pc, #116]	; (800afb8 <searchC+0x13c>)
 800af44:	881b      	ldrh	r3, [r3, #0]
 800af46:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800af4a:	b2db      	uxtb	r3, r3
 800af4c:	2b00      	cmp	r3, #0
 800af4e:	d101      	bne.n	800af54 <searchC+0xd8>
					set_position();
 800af50:	f7fa fa0a 	bl	8005368 <set_position>
				}
				half_sectionA();
 800af54:	f7fa fa46 	bl	80053e4 <half_sectionA>
				break;
 800af58:	e002      	b.n	800af60 <searchC+0xe4>
			//----a左折スラローム----
			case 0x11:
				slalom_L90();
 800af5a:	f7fa fecb 	bl	8005cf4 <slalom_L90>
				break;
 800af5e:	bf00      	nop
		}
		adv_pos();
 800af60:	f000 fc12 	bl	800b788 <adv_pos>
		if(MF.FLAG.SCND == 0)conf_route();
 800af64:	4b14      	ldr	r3, [pc, #80]	; (800afb8 <searchC+0x13c>)
 800af66:	881b      	ldrh	r3, [r3, #0]
 800af68:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800af6c:	b2db      	uxtb	r3, r3
 800af6e:	2b00      	cmp	r3, #0
 800af70:	d101      	bne.n	800af76 <searchC+0xfa>
 800af72:	f000 fecf 	bl	800bd14 <conf_route>

	}while((mouse.x != goal_x) || (mouse.y != goal_y));
 800af76:	4b14      	ldr	r3, [pc, #80]	; (800afc8 <searchC+0x14c>)
 800af78:	781b      	ldrb	r3, [r3, #0]
 800af7a:	b2da      	uxtb	r2, r3
 800af7c:	4b13      	ldr	r3, [pc, #76]	; (800afcc <searchC+0x150>)
 800af7e:	781b      	ldrb	r3, [r3, #0]
 800af80:	429a      	cmp	r2, r3
 800af82:	d1ba      	bne.n	800aefa <searchC+0x7e>
 800af84:	4b10      	ldr	r3, [pc, #64]	; (800afc8 <searchC+0x14c>)
 800af86:	785b      	ldrb	r3, [r3, #1]
 800af88:	b2da      	uxtb	r2, r3
 800af8a:	4b11      	ldr	r3, [pc, #68]	; (800afd0 <searchC+0x154>)
 800af8c:	781b      	ldrb	r3, [r3, #0]
 800af8e:	429a      	cmp	r2, r3
 800af90:	d1b3      	bne.n	800aefa <searchC+0x7e>

	half_sectionD();
 800af92:	f7fa fa41 	bl	8005418 <half_sectionD>

	HAL_Delay(2000);
 800af96:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800af9a:	f7f6 f83f 	bl	800101c <HAL_Delay>
	rotate_180();											//180度回転
 800af9e:	f7fa fce7 	bl	8005970 <rotate_180>

	if(!MF.FLAG.SCND){
 800afa2:	4b05      	ldr	r3, [pc, #20]	; (800afb8 <searchC+0x13c>)
 800afa4:	881b      	ldrh	r3, [r3, #0]
 800afa6:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800afaa:	b2db      	uxtb	r3, r3
 800afac:	2b00      	cmp	r3, #0
 800afae:	d101      	bne.n	800afb4 <searchC+0x138>
		store_map_in_eeprom();
 800afb0:	f002 fa5c 	bl	800d46c <store_map_in_eeprom>
	}
}
 800afb4:	bf00      	nop
 800afb6:	bd80      	pop	{r7, pc}
 800afb8:	20000fe8 	.word	0x20000fe8
 800afbc:	20000348 	.word	0x20000348
 800afc0:	20001010 	.word	0x20001010
 800afc4:	20000cd8 	.word	0x20000cd8
 800afc8:	20000c90 	.word	0x20000c90
 800afcc:	20000c31 	.word	0x20000c31
 800afd0:	20000bcc 	.word	0x20000bcc

0800afd4 <searchC2>:
//searchC2
//aスラローム走行でgoal座標に進む
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void searchC2(){
 800afd4:	b580      	push	{r7, lr}
 800afd6:	af00      	add	r7, sp, #0

	if(MF.FLAG.SCND){
 800afd8:	4b4a      	ldr	r3, [pc, #296]	; (800b104 <searchC2+0x130>)
 800afda:	881b      	ldrh	r3, [r3, #0]
 800afdc:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800afe0:	b2db      	uxtb	r3, r3
 800afe2:	2b00      	cmp	r3, #0
 800afe4:	d001      	beq.n	800afea <searchC2+0x16>
		load_map_from_eeprom();
 800afe6:	f002 fa7b 	bl	800d4e0 <load_map_from_eeprom>
	}

	//====aスタート位置壁情報取得====
	if(MF.FLAG.SCND == 0)get_wall_info();										//a壁情報の初期化, 後壁はなくなる
 800afea:	4b46      	ldr	r3, [pc, #280]	; (800b104 <searchC2+0x130>)
 800afec:	881b      	ldrh	r3, [r3, #0]
 800afee:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800aff2:	b2db      	uxtb	r3, r3
 800aff4:	2b00      	cmp	r3, #0
 800aff6:	d101      	bne.n	800affc <searchC2+0x28>
 800aff8:	f002 faea 	bl	800d5d0 <get_wall_info>
	if(MF.FLAG.SCND == 0)wall_info &= ~0x88;										//a前壁は存在するはずがないので削除する
 800affc:	4b41      	ldr	r3, [pc, #260]	; (800b104 <searchC2+0x130>)
 800affe:	881b      	ldrh	r3, [r3, #0]
 800b000:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800b004:	b2db      	uxtb	r3, r3
 800b006:	2b00      	cmp	r3, #0
 800b008:	d106      	bne.n	800b018 <searchC2+0x44>
 800b00a:	4b3f      	ldr	r3, [pc, #252]	; (800b108 <searchC2+0x134>)
 800b00c:	781b      	ldrb	r3, [r3, #0]
 800b00e:	f003 0377 	and.w	r3, r3, #119	; 0x77
 800b012:	b2da      	uxtb	r2, r3
 800b014:	4b3c      	ldr	r3, [pc, #240]	; (800b108 <searchC2+0x134>)
 800b016:	701a      	strb	r2, [r3, #0]
	if(MF.FLAG.SCND == 0)write_map();											//a壁情報を地図に記入
 800b018:	4b3a      	ldr	r3, [pc, #232]	; (800b104 <searchC2+0x130>)
 800b01a:	881b      	ldrh	r3, [r3, #0]
 800b01c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800b020:	b2db      	uxtb	r3, r3
 800b022:	2b00      	cmp	r3, #0
 800b024:	d101      	bne.n	800b02a <searchC2+0x56>
 800b026:	f000 feff 	bl	800be28 <write_map>

	//====a前に壁が無い想定で問答無用で前進====
	start_sectionA2();
 800b02a:	f7fa fa05 	bl	8005438 <start_sectionA2>
	adv_pos();
 800b02e:	f000 fbab 	bl	800b788 <adv_pos>

	//====a歩数マップ・経路作成====
	if(MF.FLAG.SCND == 0)write_map();											//a壁情報を地図に記入
 800b032:	4b34      	ldr	r3, [pc, #208]	; (800b104 <searchC2+0x130>)
 800b034:	881b      	ldrh	r3, [r3, #0]
 800b036:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800b03a:	b2db      	uxtb	r3, r3
 800b03c:	2b00      	cmp	r3, #0
 800b03e:	d101      	bne.n	800b044 <searchC2+0x70>
 800b040:	f000 fef2 	bl	800be28 <write_map>
	r_cnt = 0;												//a経路カウンタの初期化
 800b044:	4b31      	ldr	r3, [pc, #196]	; (800b10c <searchC2+0x138>)
 800b046:	2200      	movs	r2, #0
 800b048:	701a      	strb	r2, [r3, #0]
	make_smap();											//a歩数マップ作成
 800b04a:	f001 f87d 	bl	800c148 <make_smap>
	make_route();											//a最短経路探索（route配列に動作が格納される）
 800b04e:	f001 fbb9 	bl	800c7c4 <make_route>

	//====a探索走行====
	do{
		//----a進行----
		switch(route[r_cnt++]){								//route配列によって進行を決定。経路カウンタを進める
 800b052:	4b2e      	ldr	r3, [pc, #184]	; (800b10c <searchC2+0x138>)
 800b054:	781b      	ldrb	r3, [r3, #0]
 800b056:	1c5a      	adds	r2, r3, #1
 800b058:	b2d1      	uxtb	r1, r2
 800b05a:	4a2c      	ldr	r2, [pc, #176]	; (800b10c <searchC2+0x138>)
 800b05c:	7011      	strb	r1, [r2, #0]
 800b05e:	461a      	mov	r2, r3
 800b060:	4b2b      	ldr	r3, [pc, #172]	; (800b110 <searchC2+0x13c>)
 800b062:	5c9b      	ldrb	r3, [r3, r2]
 800b064:	2b22      	cmp	r3, #34	; 0x22
 800b066:	d00e      	beq.n	800b086 <searchC2+0xb2>
 800b068:	2b22      	cmp	r3, #34	; 0x22
 800b06a:	dc02      	bgt.n	800b072 <searchC2+0x9e>
 800b06c:	2b11      	cmp	r3, #17
 800b06e:	d019      	beq.n	800b0a4 <searchC2+0xd0>
 800b070:	e01b      	b.n	800b0aa <searchC2+0xd6>
 800b072:	2b44      	cmp	r3, #68	; 0x44
 800b074:	d004      	beq.n	800b080 <searchC2+0xac>
 800b076:	2b88      	cmp	r3, #136	; 0x88
 800b078:	d117      	bne.n	800b0aa <searchC2+0xd6>
			//----a前進----
			case 0x88:
				one_sectionU();
 800b07a:	f7fa fac7 	bl	800560c <one_sectionU>
				break;
 800b07e:	e014      	b.n	800b0aa <searchC2+0xd6>
			//----a右折スラローム----
			case 0x44:
				slalom_R902();
 800b080:	f7fa ff30 	bl	8005ee4 <slalom_R902>

				break;
 800b084:	e011      	b.n	800b0aa <searchC2+0xd6>
			//----180回転----
			case 0x22:
				half_sectionD2();
 800b086:	f7fa fa1f 	bl	80054c8 <half_sectionD2>
				rotate_180();
 800b08a:	f7fa fc71 	bl	8005970 <rotate_180>
				if(wall_info & 0x88){
 800b08e:	4b1e      	ldr	r3, [pc, #120]	; (800b108 <searchC2+0x134>)
 800b090:	781b      	ldrb	r3, [r3, #0]
 800b092:	f003 0388 	and.w	r3, r3, #136	; 0x88
 800b096:	2b00      	cmp	r3, #0
 800b098:	d001      	beq.n	800b09e <searchC2+0xca>
					set_position();
 800b09a:	f7fa f965 	bl	8005368 <set_position>
				}
				half_sectionA2();
 800b09e:	f7fa f9f7 	bl	8005490 <half_sectionA2>
				break;
 800b0a2:	e002      	b.n	800b0aa <searchC2+0xd6>
			//----a左折スラローム----
			case 0x11:
				slalom_L902();
 800b0a4:	f7fa fff0 	bl	8006088 <slalom_L902>
				break;
 800b0a8:	bf00      	nop
		}
		adv_pos();
 800b0aa:	f000 fb6d 	bl	800b788 <adv_pos>
		if(MF.FLAG.SCND == 0)conf_route();
 800b0ae:	4b15      	ldr	r3, [pc, #84]	; (800b104 <searchC2+0x130>)
 800b0b0:	881b      	ldrh	r3, [r3, #0]
 800b0b2:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800b0b6:	b2db      	uxtb	r3, r3
 800b0b8:	2b00      	cmp	r3, #0
 800b0ba:	d101      	bne.n	800b0c0 <searchC2+0xec>
 800b0bc:	f000 fe2a 	bl	800bd14 <conf_route>

	}while((mouse.x != goal_x) || (mouse.y != goal_y));
 800b0c0:	4b14      	ldr	r3, [pc, #80]	; (800b114 <searchC2+0x140>)
 800b0c2:	781b      	ldrb	r3, [r3, #0]
 800b0c4:	b2da      	uxtb	r2, r3
 800b0c6:	4b14      	ldr	r3, [pc, #80]	; (800b118 <searchC2+0x144>)
 800b0c8:	781b      	ldrb	r3, [r3, #0]
 800b0ca:	429a      	cmp	r2, r3
 800b0cc:	d1c1      	bne.n	800b052 <searchC2+0x7e>
 800b0ce:	4b11      	ldr	r3, [pc, #68]	; (800b114 <searchC2+0x140>)
 800b0d0:	785b      	ldrb	r3, [r3, #1]
 800b0d2:	b2da      	uxtb	r2, r3
 800b0d4:	4b11      	ldr	r3, [pc, #68]	; (800b11c <searchC2+0x148>)
 800b0d6:	781b      	ldrb	r3, [r3, #0]
 800b0d8:	429a      	cmp	r2, r3
 800b0da:	d1ba      	bne.n	800b052 <searchC2+0x7e>

	half_sectionD2();
 800b0dc:	f7fa f9f4 	bl	80054c8 <half_sectionD2>

	HAL_Delay(2000);
 800b0e0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800b0e4:	f7f5 ff9a 	bl	800101c <HAL_Delay>
	rotate_180();											//180度回転
 800b0e8:	f7fa fc42 	bl	8005970 <rotate_180>

	if(!MF.FLAG.SCND){
 800b0ec:	4b05      	ldr	r3, [pc, #20]	; (800b104 <searchC2+0x130>)
 800b0ee:	881b      	ldrh	r3, [r3, #0]
 800b0f0:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800b0f4:	b2db      	uxtb	r3, r3
 800b0f6:	2b00      	cmp	r3, #0
 800b0f8:	d101      	bne.n	800b0fe <searchC2+0x12a>
		store_map_in_eeprom();
 800b0fa:	f002 f9b7 	bl	800d46c <store_map_in_eeprom>
	}
}
 800b0fe:	bf00      	nop
 800b100:	bd80      	pop	{r7, pc}
 800b102:	bf00      	nop
 800b104:	20000fe8 	.word	0x20000fe8
 800b108:	20000348 	.word	0x20000348
 800b10c:	20001010 	.word	0x20001010
 800b110:	20000cd8 	.word	0x20000cd8
 800b114:	20000c90 	.word	0x20000c90
 800b118:	20000c31 	.word	0x20000c31
 800b11c:	20000bcc 	.word	0x20000bcc

0800b120 <searchD>:
//searchD
//aスラローム走行+既知区間加速でgoal座標に進む
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void searchD(){
 800b120:	b580      	push	{r7, lr}
 800b122:	af00      	add	r7, sp, #0

	if(MF.FLAG.SCND){
 800b124:	4b6a      	ldr	r3, [pc, #424]	; (800b2d0 <searchD+0x1b0>)
 800b126:	881b      	ldrh	r3, [r3, #0]
 800b128:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800b12c:	b2db      	uxtb	r3, r3
 800b12e:	2b00      	cmp	r3, #0
 800b130:	d001      	beq.n	800b136 <searchD+0x16>
		load_map_from_eeprom();
 800b132:	f002 f9d5 	bl	800d4e0 <load_map_from_eeprom>
	}

	//====aスタート位置壁情報取得====
	if(MF.FLAG.SCND == 0)get_wall_info();										//a壁情報の初期化, 後壁はなくなる
 800b136:	4b66      	ldr	r3, [pc, #408]	; (800b2d0 <searchD+0x1b0>)
 800b138:	881b      	ldrh	r3, [r3, #0]
 800b13a:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800b13e:	b2db      	uxtb	r3, r3
 800b140:	2b00      	cmp	r3, #0
 800b142:	d101      	bne.n	800b148 <searchD+0x28>
 800b144:	f002 fa44 	bl	800d5d0 <get_wall_info>
	if(MF.FLAG.SCND == 0)wall_info &= ~0x88;										//a前壁は存在するはずがないので削除する
 800b148:	4b61      	ldr	r3, [pc, #388]	; (800b2d0 <searchD+0x1b0>)
 800b14a:	881b      	ldrh	r3, [r3, #0]
 800b14c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800b150:	b2db      	uxtb	r3, r3
 800b152:	2b00      	cmp	r3, #0
 800b154:	d106      	bne.n	800b164 <searchD+0x44>
 800b156:	4b5f      	ldr	r3, [pc, #380]	; (800b2d4 <searchD+0x1b4>)
 800b158:	781b      	ldrb	r3, [r3, #0]
 800b15a:	f003 0377 	and.w	r3, r3, #119	; 0x77
 800b15e:	b2da      	uxtb	r2, r3
 800b160:	4b5c      	ldr	r3, [pc, #368]	; (800b2d4 <searchD+0x1b4>)
 800b162:	701a      	strb	r2, [r3, #0]
	if(MF.FLAG.SCND == 0)write_map();											//a壁情報を地図に記入
 800b164:	4b5a      	ldr	r3, [pc, #360]	; (800b2d0 <searchD+0x1b0>)
 800b166:	881b      	ldrh	r3, [r3, #0]
 800b168:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800b16c:	b2db      	uxtb	r3, r3
 800b16e:	2b00      	cmp	r3, #0
 800b170:	d101      	bne.n	800b176 <searchD+0x56>
 800b172:	f000 fe59 	bl	800be28 <write_map>

	//====a前に壁が無い想定で問答無用で前進====
	start_sectionA();
 800b176:	f7fa f909 	bl	800538c <start_sectionA>
	adv_pos();
 800b17a:	f000 fb05 	bl	800b788 <adv_pos>

	//====a歩数マップ・経路作成====
	if(MF.FLAG.SCND == 0)write_map();											//a壁情報を地図に記入
 800b17e:	4b54      	ldr	r3, [pc, #336]	; (800b2d0 <searchD+0x1b0>)
 800b180:	881b      	ldrh	r3, [r3, #0]
 800b182:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800b186:	b2db      	uxtb	r3, r3
 800b188:	2b00      	cmp	r3, #0
 800b18a:	d101      	bne.n	800b190 <searchD+0x70>
 800b18c:	f000 fe4c 	bl	800be28 <write_map>
	r_cnt = 0;												//a経路カウンタの初期化
 800b190:	4b51      	ldr	r3, [pc, #324]	; (800b2d8 <searchD+0x1b8>)
 800b192:	2200      	movs	r2, #0
 800b194:	701a      	strb	r2, [r3, #0]
	make_smap();											//a歩数マップ作成
 800b196:	f000 ffd7 	bl	800c148 <make_smap>
	make_route();											//a最短経路探索（route配列に動作が格納される）
 800b19a:	f001 fb13 	bl	800c7c4 <make_route>

	H_accel_flag = 0;
 800b19e:	4b4f      	ldr	r3, [pc, #316]	; (800b2dc <searchD+0x1bc>)
 800b1a0:	2200      	movs	r2, #0
 800b1a2:	701a      	strb	r2, [r3, #0]

	//====a探索走行====
	do{
		//----a進行----
		switch(route[r_cnt++]){								//route配列によって進行を決定。経路カウンタを進める
 800b1a4:	4b4c      	ldr	r3, [pc, #304]	; (800b2d8 <searchD+0x1b8>)
 800b1a6:	781b      	ldrb	r3, [r3, #0]
 800b1a8:	1c5a      	adds	r2, r3, #1
 800b1aa:	b2d1      	uxtb	r1, r2
 800b1ac:	4a4a      	ldr	r2, [pc, #296]	; (800b2d8 <searchD+0x1b8>)
 800b1ae:	7011      	strb	r1, [r2, #0]
 800b1b0:	461a      	mov	r2, r3
 800b1b2:	4b4b      	ldr	r3, [pc, #300]	; (800b2e0 <searchD+0x1c0>)
 800b1b4:	5c9b      	ldrb	r3, [r3, r2]
 800b1b6:	2b22      	cmp	r3, #34	; 0x22
 800b1b8:	d053      	beq.n	800b262 <searchD+0x142>
 800b1ba:	2b22      	cmp	r3, #34	; 0x22
 800b1bc:	dc02      	bgt.n	800b1c4 <searchD+0xa4>
 800b1be:	2b11      	cmp	r3, #17
 800b1c0:	d056      	beq.n	800b270 <searchD+0x150>
 800b1c2:	e058      	b.n	800b276 <searchD+0x156>
 800b1c4:	2b44      	cmp	r3, #68	; 0x44
 800b1c6:	d049      	beq.n	800b25c <searchD+0x13c>
 800b1c8:	2b88      	cmp	r3, #136	; 0x88
 800b1ca:	d154      	bne.n	800b276 <searchD+0x156>
			//----a前進----
			case 0x88:
				if(MF.FLAG.SCND == 1 && MF.FLAG.ACCL2 == 1){
 800b1cc:	4b40      	ldr	r3, [pc, #256]	; (800b2d0 <searchD+0x1b0>)
 800b1ce:	881b      	ldrh	r3, [r3, #0]
 800b1d0:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800b1d4:	b2db      	uxtb	r3, r3
 800b1d6:	2b01      	cmp	r3, #1
 800b1d8:	d13c      	bne.n	800b254 <searchD+0x134>
 800b1da:	4b3d      	ldr	r3, [pc, #244]	; (800b2d0 <searchD+0x1b0>)
 800b1dc:	881b      	ldrh	r3, [r3, #0]
 800b1de:	f3c3 2340 	ubfx	r3, r3, #9, #1
 800b1e2:	b2db      	uxtb	r3, r3
 800b1e4:	2b01      	cmp	r3, #1
 800b1e6:	d135      	bne.n	800b254 <searchD+0x134>
					if(((route[r_cnt-1] & route[r_cnt]) == 0x88) && (route[r_cnt] != 0xff) && (H_accel_flag == 0)){
 800b1e8:	4b3b      	ldr	r3, [pc, #236]	; (800b2d8 <searchD+0x1b8>)
 800b1ea:	781b      	ldrb	r3, [r3, #0]
 800b1ec:	3b01      	subs	r3, #1
 800b1ee:	4a3c      	ldr	r2, [pc, #240]	; (800b2e0 <searchD+0x1c0>)
 800b1f0:	5cd2      	ldrb	r2, [r2, r3]
 800b1f2:	4b39      	ldr	r3, [pc, #228]	; (800b2d8 <searchD+0x1b8>)
 800b1f4:	781b      	ldrb	r3, [r3, #0]
 800b1f6:	4619      	mov	r1, r3
 800b1f8:	4b39      	ldr	r3, [pc, #228]	; (800b2e0 <searchD+0x1c0>)
 800b1fa:	5c5b      	ldrb	r3, [r3, r1]
 800b1fc:	4013      	ands	r3, r2
 800b1fe:	b2db      	uxtb	r3, r3
 800b200:	2b88      	cmp	r3, #136	; 0x88
 800b202:	d110      	bne.n	800b226 <searchD+0x106>
 800b204:	4b34      	ldr	r3, [pc, #208]	; (800b2d8 <searchD+0x1b8>)
 800b206:	781b      	ldrb	r3, [r3, #0]
 800b208:	461a      	mov	r2, r3
 800b20a:	4b35      	ldr	r3, [pc, #212]	; (800b2e0 <searchD+0x1c0>)
 800b20c:	5c9b      	ldrb	r3, [r3, r2]
 800b20e:	2bff      	cmp	r3, #255	; 0xff
 800b210:	d009      	beq.n	800b226 <searchD+0x106>
 800b212:	4b32      	ldr	r3, [pc, #200]	; (800b2dc <searchD+0x1bc>)
 800b214:	781b      	ldrb	r3, [r3, #0]
 800b216:	2b00      	cmp	r3, #0
 800b218:	d105      	bne.n	800b226 <searchD+0x106>
						one_sectionA();
 800b21a:	f7fa f9a9 	bl	8005570 <one_sectionA>
						H_accel_flag = 1;
 800b21e:	4b2f      	ldr	r3, [pc, #188]	; (800b2dc <searchD+0x1bc>)
 800b220:	2201      	movs	r2, #1
 800b222:	701a      	strb	r2, [r3, #0]
 800b224:	e015      	b.n	800b252 <searchD+0x132>
					}
					else if((route[r_cnt] & 0x55) && (H_accel_flag == 1)){
 800b226:	4b2c      	ldr	r3, [pc, #176]	; (800b2d8 <searchD+0x1b8>)
 800b228:	781b      	ldrb	r3, [r3, #0]
 800b22a:	461a      	mov	r2, r3
 800b22c:	4b2c      	ldr	r3, [pc, #176]	; (800b2e0 <searchD+0x1c0>)
 800b22e:	5c9b      	ldrb	r3, [r3, r2]
 800b230:	f003 0355 	and.w	r3, r3, #85	; 0x55
 800b234:	2b00      	cmp	r3, #0
 800b236:	d009      	beq.n	800b24c <searchD+0x12c>
 800b238:	4b28      	ldr	r3, [pc, #160]	; (800b2dc <searchD+0x1bc>)
 800b23a:	781b      	ldrb	r3, [r3, #0]
 800b23c:	2b01      	cmp	r3, #1
 800b23e:	d105      	bne.n	800b24c <searchD+0x12c>
						one_sectionD();
 800b240:	f7fa f9bc 	bl	80055bc <one_sectionD>
						H_accel_flag = 0;
 800b244:	4b25      	ldr	r3, [pc, #148]	; (800b2dc <searchD+0x1bc>)
 800b246:	2200      	movs	r2, #0
 800b248:	701a      	strb	r2, [r3, #0]
 800b24a:	e002      	b.n	800b252 <searchD+0x132>
					}else{
						one_sectionU();
 800b24c:	f7fa f9de 	bl	800560c <one_sectionU>
					if(((route[r_cnt-1] & route[r_cnt]) == 0x88) && (route[r_cnt] != 0xff) && (H_accel_flag == 0)){
 800b250:	e003      	b.n	800b25a <searchD+0x13a>
 800b252:	e002      	b.n	800b25a <searchD+0x13a>
					}
				}else{
					one_sectionU();
 800b254:	f7fa f9da 	bl	800560c <one_sectionU>
				}
				break;
 800b258:	e00d      	b.n	800b276 <searchD+0x156>
 800b25a:	e00c      	b.n	800b276 <searchD+0x156>
			//----a右折スラローム----
			case 0x44:
				slalom_R90();
 800b25c:	f7fa fc52 	bl	8005b04 <slalom_R90>

				break;
 800b260:	e009      	b.n	800b276 <searchD+0x156>
			//----180回転----
			case 0x22:
				half_sectionD();
 800b262:	f7fa f8d9 	bl	8005418 <half_sectionD>
				rotate_180();
 800b266:	f7fa fb83 	bl	8005970 <rotate_180>
/*				if(wall_info & 0x88){
					set_position2(0);
				}
*/				half_sectionA();
 800b26a:	f7fa f8bb 	bl	80053e4 <half_sectionA>
				break;
 800b26e:	e002      	b.n	800b276 <searchD+0x156>
			//----a左折スラローム----
			case 0x11:
				slalom_L90();
 800b270:	f7fa fd40 	bl	8005cf4 <slalom_L90>
				break;
 800b274:	bf00      	nop
		}
		adv_pos();
 800b276:	f000 fa87 	bl	800b788 <adv_pos>
		if(MF.FLAG.SCND == 0)conf_route();
 800b27a:	4b15      	ldr	r3, [pc, #84]	; (800b2d0 <searchD+0x1b0>)
 800b27c:	881b      	ldrh	r3, [r3, #0]
 800b27e:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800b282:	b2db      	uxtb	r3, r3
 800b284:	2b00      	cmp	r3, #0
 800b286:	d101      	bne.n	800b28c <searchD+0x16c>
 800b288:	f000 fd44 	bl	800bd14 <conf_route>

	}while((mouse.x != goal_x) || (mouse.y != goal_y));
 800b28c:	4b15      	ldr	r3, [pc, #84]	; (800b2e4 <searchD+0x1c4>)
 800b28e:	781b      	ldrb	r3, [r3, #0]
 800b290:	b2da      	uxtb	r2, r3
 800b292:	4b15      	ldr	r3, [pc, #84]	; (800b2e8 <searchD+0x1c8>)
 800b294:	781b      	ldrb	r3, [r3, #0]
 800b296:	429a      	cmp	r2, r3
 800b298:	d184      	bne.n	800b1a4 <searchD+0x84>
 800b29a:	4b12      	ldr	r3, [pc, #72]	; (800b2e4 <searchD+0x1c4>)
 800b29c:	785b      	ldrb	r3, [r3, #1]
 800b29e:	b2da      	uxtb	r2, r3
 800b2a0:	4b12      	ldr	r3, [pc, #72]	; (800b2ec <searchD+0x1cc>)
 800b2a2:	781b      	ldrb	r3, [r3, #0]
 800b2a4:	429a      	cmp	r2, r3
 800b2a6:	f47f af7d 	bne.w	800b1a4 <searchD+0x84>

	half_sectionD();
 800b2aa:	f7fa f8b5 	bl	8005418 <half_sectionD>

	HAL_Delay(2000);
 800b2ae:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800b2b2:	f7f5 feb3 	bl	800101c <HAL_Delay>
	rotate_180();											//180度回転
 800b2b6:	f7fa fb5b 	bl	8005970 <rotate_180>

	if(!MF.FLAG.SCND){
 800b2ba:	4b05      	ldr	r3, [pc, #20]	; (800b2d0 <searchD+0x1b0>)
 800b2bc:	881b      	ldrh	r3, [r3, #0]
 800b2be:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800b2c2:	b2db      	uxtb	r3, r3
 800b2c4:	2b00      	cmp	r3, #0
 800b2c6:	d101      	bne.n	800b2cc <searchD+0x1ac>
		store_map_in_eeprom();
 800b2c8:	f002 f8d0 	bl	800d46c <store_map_in_eeprom>
	}
}
 800b2cc:	bf00      	nop
 800b2ce:	bd80      	pop	{r7, pc}
 800b2d0:	20000fe8 	.word	0x20000fe8
 800b2d4:	20000348 	.word	0x20000348
 800b2d8:	20001010 	.word	0x20001010
 800b2dc:	20000349 	.word	0x20000349
 800b2e0:	20000cd8 	.word	0x20000cd8
 800b2e4:	20000c90 	.word	0x20000c90
 800b2e8:	20000c31 	.word	0x20000c31
 800b2ec:	20000bcc 	.word	0x20000bcc

0800b2f0 <searchD2>:
//searchD2
//aスラローム走行+既知区間加速でgoal座標に進む
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void searchD2(){
 800b2f0:	b580      	push	{r7, lr}
 800b2f2:	af00      	add	r7, sp, #0

	if(MF.FLAG.SCND){
 800b2f4:	4b6a      	ldr	r3, [pc, #424]	; (800b4a0 <searchD2+0x1b0>)
 800b2f6:	881b      	ldrh	r3, [r3, #0]
 800b2f8:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800b2fc:	b2db      	uxtb	r3, r3
 800b2fe:	2b00      	cmp	r3, #0
 800b300:	d001      	beq.n	800b306 <searchD2+0x16>
		load_map_from_eeprom();
 800b302:	f002 f8ed 	bl	800d4e0 <load_map_from_eeprom>
	}

	//====aスタート位置壁情報取得====
	if(MF.FLAG.SCND == 0)get_wall_info();										//a壁情報の初期化, 後壁はなくなる
 800b306:	4b66      	ldr	r3, [pc, #408]	; (800b4a0 <searchD2+0x1b0>)
 800b308:	881b      	ldrh	r3, [r3, #0]
 800b30a:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800b30e:	b2db      	uxtb	r3, r3
 800b310:	2b00      	cmp	r3, #0
 800b312:	d101      	bne.n	800b318 <searchD2+0x28>
 800b314:	f002 f95c 	bl	800d5d0 <get_wall_info>
	if(MF.FLAG.SCND == 0)wall_info &= ~0x88;										//a前壁は存在するはずがないので削除する
 800b318:	4b61      	ldr	r3, [pc, #388]	; (800b4a0 <searchD2+0x1b0>)
 800b31a:	881b      	ldrh	r3, [r3, #0]
 800b31c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800b320:	b2db      	uxtb	r3, r3
 800b322:	2b00      	cmp	r3, #0
 800b324:	d106      	bne.n	800b334 <searchD2+0x44>
 800b326:	4b5f      	ldr	r3, [pc, #380]	; (800b4a4 <searchD2+0x1b4>)
 800b328:	781b      	ldrb	r3, [r3, #0]
 800b32a:	f003 0377 	and.w	r3, r3, #119	; 0x77
 800b32e:	b2da      	uxtb	r2, r3
 800b330:	4b5c      	ldr	r3, [pc, #368]	; (800b4a4 <searchD2+0x1b4>)
 800b332:	701a      	strb	r2, [r3, #0]
	if(MF.FLAG.SCND == 0)write_map();											//a壁情報を地図に記入
 800b334:	4b5a      	ldr	r3, [pc, #360]	; (800b4a0 <searchD2+0x1b0>)
 800b336:	881b      	ldrh	r3, [r3, #0]
 800b338:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800b33c:	b2db      	uxtb	r3, r3
 800b33e:	2b00      	cmp	r3, #0
 800b340:	d101      	bne.n	800b346 <searchD2+0x56>
 800b342:	f000 fd71 	bl	800be28 <write_map>

	//====a前に壁が無い想定で問答無用で前進====
	start_sectionA2();
 800b346:	f7fa f877 	bl	8005438 <start_sectionA2>
	adv_pos();
 800b34a:	f000 fa1d 	bl	800b788 <adv_pos>

	//====a歩数マップ・経路作成====
	if(MF.FLAG.SCND == 0)write_map();											//a壁情報を地図に記入
 800b34e:	4b54      	ldr	r3, [pc, #336]	; (800b4a0 <searchD2+0x1b0>)
 800b350:	881b      	ldrh	r3, [r3, #0]
 800b352:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800b356:	b2db      	uxtb	r3, r3
 800b358:	2b00      	cmp	r3, #0
 800b35a:	d101      	bne.n	800b360 <searchD2+0x70>
 800b35c:	f000 fd64 	bl	800be28 <write_map>
	r_cnt = 0;												//a経路カウンタの初期化
 800b360:	4b51      	ldr	r3, [pc, #324]	; (800b4a8 <searchD2+0x1b8>)
 800b362:	2200      	movs	r2, #0
 800b364:	701a      	strb	r2, [r3, #0]
	make_smap();											//a歩数マップ作成
 800b366:	f000 feef 	bl	800c148 <make_smap>
	make_route();											//a最短経路探索（route配列に動作が格納される）
 800b36a:	f001 fa2b 	bl	800c7c4 <make_route>

	H_accel_flag = 0;
 800b36e:	4b4f      	ldr	r3, [pc, #316]	; (800b4ac <searchD2+0x1bc>)
 800b370:	2200      	movs	r2, #0
 800b372:	701a      	strb	r2, [r3, #0]

	//====a探索走行====
	do{
		//----a進行----
		switch(route[r_cnt++]){								//route配列によって進行を決定。経路カウンタを進める
 800b374:	4b4c      	ldr	r3, [pc, #304]	; (800b4a8 <searchD2+0x1b8>)
 800b376:	781b      	ldrb	r3, [r3, #0]
 800b378:	1c5a      	adds	r2, r3, #1
 800b37a:	b2d1      	uxtb	r1, r2
 800b37c:	4a4a      	ldr	r2, [pc, #296]	; (800b4a8 <searchD2+0x1b8>)
 800b37e:	7011      	strb	r1, [r2, #0]
 800b380:	461a      	mov	r2, r3
 800b382:	4b4b      	ldr	r3, [pc, #300]	; (800b4b0 <searchD2+0x1c0>)
 800b384:	5c9b      	ldrb	r3, [r3, r2]
 800b386:	2b22      	cmp	r3, #34	; 0x22
 800b388:	d053      	beq.n	800b432 <searchD2+0x142>
 800b38a:	2b22      	cmp	r3, #34	; 0x22
 800b38c:	dc02      	bgt.n	800b394 <searchD2+0xa4>
 800b38e:	2b11      	cmp	r3, #17
 800b390:	d056      	beq.n	800b440 <searchD2+0x150>
 800b392:	e058      	b.n	800b446 <searchD2+0x156>
 800b394:	2b44      	cmp	r3, #68	; 0x44
 800b396:	d049      	beq.n	800b42c <searchD2+0x13c>
 800b398:	2b88      	cmp	r3, #136	; 0x88
 800b39a:	d154      	bne.n	800b446 <searchD2+0x156>
			//----a前進----
			case 0x88:
				if(MF.FLAG.SCND == 1 && MF.FLAG.ACCL2 == 1){
 800b39c:	4b40      	ldr	r3, [pc, #256]	; (800b4a0 <searchD2+0x1b0>)
 800b39e:	881b      	ldrh	r3, [r3, #0]
 800b3a0:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800b3a4:	b2db      	uxtb	r3, r3
 800b3a6:	2b01      	cmp	r3, #1
 800b3a8:	d13c      	bne.n	800b424 <searchD2+0x134>
 800b3aa:	4b3d      	ldr	r3, [pc, #244]	; (800b4a0 <searchD2+0x1b0>)
 800b3ac:	881b      	ldrh	r3, [r3, #0]
 800b3ae:	f3c3 2340 	ubfx	r3, r3, #9, #1
 800b3b2:	b2db      	uxtb	r3, r3
 800b3b4:	2b01      	cmp	r3, #1
 800b3b6:	d135      	bne.n	800b424 <searchD2+0x134>
					if(((route[r_cnt-1] & route[r_cnt]) == 0x88) && (route[r_cnt] != 0xff) && (H_accel_flag == 0)){
 800b3b8:	4b3b      	ldr	r3, [pc, #236]	; (800b4a8 <searchD2+0x1b8>)
 800b3ba:	781b      	ldrb	r3, [r3, #0]
 800b3bc:	3b01      	subs	r3, #1
 800b3be:	4a3c      	ldr	r2, [pc, #240]	; (800b4b0 <searchD2+0x1c0>)
 800b3c0:	5cd2      	ldrb	r2, [r2, r3]
 800b3c2:	4b39      	ldr	r3, [pc, #228]	; (800b4a8 <searchD2+0x1b8>)
 800b3c4:	781b      	ldrb	r3, [r3, #0]
 800b3c6:	4619      	mov	r1, r3
 800b3c8:	4b39      	ldr	r3, [pc, #228]	; (800b4b0 <searchD2+0x1c0>)
 800b3ca:	5c5b      	ldrb	r3, [r3, r1]
 800b3cc:	4013      	ands	r3, r2
 800b3ce:	b2db      	uxtb	r3, r3
 800b3d0:	2b88      	cmp	r3, #136	; 0x88
 800b3d2:	d110      	bne.n	800b3f6 <searchD2+0x106>
 800b3d4:	4b34      	ldr	r3, [pc, #208]	; (800b4a8 <searchD2+0x1b8>)
 800b3d6:	781b      	ldrb	r3, [r3, #0]
 800b3d8:	461a      	mov	r2, r3
 800b3da:	4b35      	ldr	r3, [pc, #212]	; (800b4b0 <searchD2+0x1c0>)
 800b3dc:	5c9b      	ldrb	r3, [r3, r2]
 800b3de:	2bff      	cmp	r3, #255	; 0xff
 800b3e0:	d009      	beq.n	800b3f6 <searchD2+0x106>
 800b3e2:	4b32      	ldr	r3, [pc, #200]	; (800b4ac <searchD2+0x1bc>)
 800b3e4:	781b      	ldrb	r3, [r3, #0]
 800b3e6:	2b00      	cmp	r3, #0
 800b3e8:	d105      	bne.n	800b3f6 <searchD2+0x106>
						one_sectionA();
 800b3ea:	f7fa f8c1 	bl	8005570 <one_sectionA>
						H_accel_flag = 1;
 800b3ee:	4b2f      	ldr	r3, [pc, #188]	; (800b4ac <searchD2+0x1bc>)
 800b3f0:	2201      	movs	r2, #1
 800b3f2:	701a      	strb	r2, [r3, #0]
 800b3f4:	e015      	b.n	800b422 <searchD2+0x132>
					}
					else if((route[r_cnt] & 0x55) && (H_accel_flag == 1)){
 800b3f6:	4b2c      	ldr	r3, [pc, #176]	; (800b4a8 <searchD2+0x1b8>)
 800b3f8:	781b      	ldrb	r3, [r3, #0]
 800b3fa:	461a      	mov	r2, r3
 800b3fc:	4b2c      	ldr	r3, [pc, #176]	; (800b4b0 <searchD2+0x1c0>)
 800b3fe:	5c9b      	ldrb	r3, [r3, r2]
 800b400:	f003 0355 	and.w	r3, r3, #85	; 0x55
 800b404:	2b00      	cmp	r3, #0
 800b406:	d009      	beq.n	800b41c <searchD2+0x12c>
 800b408:	4b28      	ldr	r3, [pc, #160]	; (800b4ac <searchD2+0x1bc>)
 800b40a:	781b      	ldrb	r3, [r3, #0]
 800b40c:	2b01      	cmp	r3, #1
 800b40e:	d105      	bne.n	800b41c <searchD2+0x12c>
						one_sectionD();
 800b410:	f7fa f8d4 	bl	80055bc <one_sectionD>
						H_accel_flag = 0;
 800b414:	4b25      	ldr	r3, [pc, #148]	; (800b4ac <searchD2+0x1bc>)
 800b416:	2200      	movs	r2, #0
 800b418:	701a      	strb	r2, [r3, #0]
 800b41a:	e002      	b.n	800b422 <searchD2+0x132>
					}else{
						one_sectionU();
 800b41c:	f7fa f8f6 	bl	800560c <one_sectionU>
					if(((route[r_cnt-1] & route[r_cnt]) == 0x88) && (route[r_cnt] != 0xff) && (H_accel_flag == 0)){
 800b420:	e003      	b.n	800b42a <searchD2+0x13a>
 800b422:	e002      	b.n	800b42a <searchD2+0x13a>
					}
				}else{
					one_sectionU();
 800b424:	f7fa f8f2 	bl	800560c <one_sectionU>
				}
				break;
 800b428:	e00d      	b.n	800b446 <searchD2+0x156>
 800b42a:	e00c      	b.n	800b446 <searchD2+0x156>
			//----a右折スラローム----
			case 0x44:
				slalom_R902();
 800b42c:	f7fa fd5a 	bl	8005ee4 <slalom_R902>

				break;
 800b430:	e009      	b.n	800b446 <searchD2+0x156>
			//----180回転----
			case 0x22:
				half_sectionD2();
 800b432:	f7fa f849 	bl	80054c8 <half_sectionD2>
				rotate_180();
 800b436:	f7fa fa9b 	bl	8005970 <rotate_180>
/*				if(wall_info & 0x88){
					set_position2(0);
				}
*/				half_sectionA2();
 800b43a:	f7fa f829 	bl	8005490 <half_sectionA2>
				break;
 800b43e:	e002      	b.n	800b446 <searchD2+0x156>
			//----a左折スラローム----
			case 0x11:
				slalom_L902();
 800b440:	f7fa fe22 	bl	8006088 <slalom_L902>
				break;
 800b444:	bf00      	nop
		}
		adv_pos();
 800b446:	f000 f99f 	bl	800b788 <adv_pos>
		if(MF.FLAG.SCND == 0)conf_route();
 800b44a:	4b15      	ldr	r3, [pc, #84]	; (800b4a0 <searchD2+0x1b0>)
 800b44c:	881b      	ldrh	r3, [r3, #0]
 800b44e:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800b452:	b2db      	uxtb	r3, r3
 800b454:	2b00      	cmp	r3, #0
 800b456:	d101      	bne.n	800b45c <searchD2+0x16c>
 800b458:	f000 fc5c 	bl	800bd14 <conf_route>

	}while((mouse.x != goal_x) || (mouse.y != goal_y));
 800b45c:	4b15      	ldr	r3, [pc, #84]	; (800b4b4 <searchD2+0x1c4>)
 800b45e:	781b      	ldrb	r3, [r3, #0]
 800b460:	b2da      	uxtb	r2, r3
 800b462:	4b15      	ldr	r3, [pc, #84]	; (800b4b8 <searchD2+0x1c8>)
 800b464:	781b      	ldrb	r3, [r3, #0]
 800b466:	429a      	cmp	r2, r3
 800b468:	d184      	bne.n	800b374 <searchD2+0x84>
 800b46a:	4b12      	ldr	r3, [pc, #72]	; (800b4b4 <searchD2+0x1c4>)
 800b46c:	785b      	ldrb	r3, [r3, #1]
 800b46e:	b2da      	uxtb	r2, r3
 800b470:	4b12      	ldr	r3, [pc, #72]	; (800b4bc <searchD2+0x1cc>)
 800b472:	781b      	ldrb	r3, [r3, #0]
 800b474:	429a      	cmp	r2, r3
 800b476:	f47f af7d 	bne.w	800b374 <searchD2+0x84>

	half_sectionD2();
 800b47a:	f7fa f825 	bl	80054c8 <half_sectionD2>

	HAL_Delay(2000);
 800b47e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800b482:	f7f5 fdcb 	bl	800101c <HAL_Delay>
	rotate_180();											//180度回転
 800b486:	f7fa fa73 	bl	8005970 <rotate_180>

	if(!MF.FLAG.SCND){
 800b48a:	4b05      	ldr	r3, [pc, #20]	; (800b4a0 <searchD2+0x1b0>)
 800b48c:	881b      	ldrh	r3, [r3, #0]
 800b48e:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800b492:	b2db      	uxtb	r3, r3
 800b494:	2b00      	cmp	r3, #0
 800b496:	d101      	bne.n	800b49c <searchD2+0x1ac>
		store_map_in_eeprom();
 800b498:	f001 ffe8 	bl	800d46c <store_map_in_eeprom>
	}
}
 800b49c:	bf00      	nop
 800b49e:	bd80      	pop	{r7, pc}
 800b4a0:	20000fe8 	.word	0x20000fe8
 800b4a4:	20000348 	.word	0x20000348
 800b4a8:	20001010 	.word	0x20001010
 800b4ac:	20000349 	.word	0x20000349
 800b4b0:	20000cd8 	.word	0x20000cd8
 800b4b4:	20000c90 	.word	0x20000c90
 800b4b8:	20000c31 	.word	0x20000c31
 800b4bc:	20000bcc 	.word	0x20000bcc

0800b4c0 <searchE>:
//searchE
//a未知壁を含むマスを仮goal座標とし、スラローム連続走行で全マスに進む。仮goalを連続的に変化させる。全面探索終了後は半区画減速
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void searchE(){
 800b4c0:	b580      	push	{r7, lr}
 800b4c2:	b082      	sub	sp, #8
 800b4c4:	af00      	add	r7, sp, #0

	int i = 0;
 800b4c6:	2300      	movs	r3, #0
 800b4c8:	607b      	str	r3, [r7, #4]
	int j = 0;
 800b4ca:	2300      	movs	r3, #0
 800b4cc:	603b      	str	r3, [r7, #0]
	do {
		if(i == 0){
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	2b00      	cmp	r3, #0
 800b4d2:	d111      	bne.n	800b4f8 <searchE+0x38>
			//====a前に壁が無い想定で問答無用で前進====
			half_sectionA();
 800b4d4:	f7f9 ff86 	bl	80053e4 <half_sectionA>
			adv_pos();
 800b4d8:	f000 f956 	bl	800b788 <adv_pos>
			write_map();														//地図の初期化
 800b4dc:	f000 fca4 	bl	800be28 <write_map>

			//====a歩数等初期化====
			m_step = r_cnt = 0;													//歩数と経路カウンタの初期化
 800b4e0:	4b3e      	ldr	r3, [pc, #248]	; (800b5dc <searchE+0x11c>)
 800b4e2:	2200      	movs	r2, #0
 800b4e4:	701a      	strb	r2, [r3, #0]
 800b4e6:	4b3e      	ldr	r3, [pc, #248]	; (800b5e0 <searchE+0x120>)
 800b4e8:	2200      	movs	r2, #0
 800b4ea:	801a      	strh	r2, [r3, #0]
			find_pregoal();														//仮goalまでの歩数マップの初期化
 800b4ec:	f001 fa9c 	bl	800ca28 <find_pregoal>
			make_smap2();
 800b4f0:	f001 fc86 	bl	800ce00 <make_smap2>
			make_route();														//最短経路探索(route配列に動作が格納される)
 800b4f4:	f001 f966 	bl	800c7c4 <make_route>
		}

		//====a探索走行====
		do {
			//----a進行----
			switch (route[r_cnt++]) {										//route配列によって進行を決定。経路カウンタを進める
 800b4f8:	4b38      	ldr	r3, [pc, #224]	; (800b5dc <searchE+0x11c>)
 800b4fa:	781b      	ldrb	r3, [r3, #0]
 800b4fc:	1c5a      	adds	r2, r3, #1
 800b4fe:	b2d1      	uxtb	r1, r2
 800b500:	4a36      	ldr	r2, [pc, #216]	; (800b5dc <searchE+0x11c>)
 800b502:	7011      	strb	r1, [r2, #0]
 800b504:	461a      	mov	r2, r3
 800b506:	4b37      	ldr	r3, [pc, #220]	; (800b5e4 <searchE+0x124>)
 800b508:	5c9b      	ldrb	r3, [r3, r2]
 800b50a:	2b22      	cmp	r3, #34	; 0x22
 800b50c:	d00e      	beq.n	800b52c <searchE+0x6c>
 800b50e:	2b22      	cmp	r3, #34	; 0x22
 800b510:	dc02      	bgt.n	800b518 <searchE+0x58>
 800b512:	2b11      	cmp	r3, #17
 800b514:	d011      	beq.n	800b53a <searchE+0x7a>
 800b516:	e013      	b.n	800b540 <searchE+0x80>
 800b518:	2b44      	cmp	r3, #68	; 0x44
 800b51a:	d004      	beq.n	800b526 <searchE+0x66>
 800b51c:	2b88      	cmp	r3, #136	; 0x88
 800b51e:	d10f      	bne.n	800b540 <searchE+0x80>
				//----a前進----
			case 0x88:
				one_sectionU();
 800b520:	f7fa f874 	bl	800560c <one_sectionU>
				break;
 800b524:	e00c      	b.n	800b540 <searchE+0x80>
				//----a右折----
			case 0x44:
				slalom_R90();
 800b526:	f7fa faed 	bl	8005b04 <slalom_R90>
				break;
 800b52a:	e009      	b.n	800b540 <searchE+0x80>
				//----180回転----
			case 0x22:
				half_sectionD();
 800b52c:	f7f9 ff74 	bl	8005418 <half_sectionD>
				rotate_180();
 800b530:	f7fa fa1e 	bl	8005970 <rotate_180>
/*				if(wall_info & 0x88){
					set_position2(0);
				}
*/				half_sectionA();
 800b534:	f7f9 ff56 	bl	80053e4 <half_sectionA>
				break;
 800b538:	e002      	b.n	800b540 <searchE+0x80>
				//----a左折----
			case 0x11:
				slalom_L90();
 800b53a:	f7fa fbdb 	bl	8005cf4 <slalom_L90>
				break;
 800b53e:	bf00      	nop
			}
			adv_pos();														//aマイクロマウス内部位置情報でも前進処理
 800b540:	f000 f922 	bl	800b788 <adv_pos>
			j++;
 800b544:	683b      	ldr	r3, [r7, #0]
 800b546:	3301      	adds	r3, #1
 800b548:	603b      	str	r3, [r7, #0]
			if (j > 150) break;												//a移動マス数が250以上になった場合全面探索を中止
 800b54a:	683b      	ldr	r3, [r7, #0]
 800b54c:	2b96      	cmp	r3, #150	; 0x96
 800b54e:	dc0e      	bgt.n	800b56e <searchE+0xae>

		} while ((mouse.x != pregoal_x) || (mouse.y != pregoal_y));			//a現在座標と仮goal座標が等しくなるまで実行
 800b550:	4b25      	ldr	r3, [pc, #148]	; (800b5e8 <searchE+0x128>)
 800b552:	781b      	ldrb	r3, [r3, #0]
 800b554:	b2da      	uxtb	r2, r3
 800b556:	4b25      	ldr	r3, [pc, #148]	; (800b5ec <searchE+0x12c>)
 800b558:	781b      	ldrb	r3, [r3, #0]
 800b55a:	429a      	cmp	r2, r3
 800b55c:	d1cc      	bne.n	800b4f8 <searchE+0x38>
 800b55e:	4b22      	ldr	r3, [pc, #136]	; (800b5e8 <searchE+0x128>)
 800b560:	785b      	ldrb	r3, [r3, #1]
 800b562:	b2da      	uxtb	r2, r3
 800b564:	4b22      	ldr	r3, [pc, #136]	; (800b5f0 <searchE+0x130>)
 800b566:	781b      	ldrb	r3, [r3, #0]
 800b568:	429a      	cmp	r2, r3
 800b56a:	d1c5      	bne.n	800b4f8 <searchE+0x38>
 800b56c:	e000      	b.n	800b570 <searchE+0xb0>
			if (j > 150) break;												//a移動マス数が250以上になった場合全面探索を中止
 800b56e:	bf00      	nop

		get_wall_info();													//a壁情報の初期化, 後壁はなくなる
 800b570:	f002 f82e 	bl	800d5d0 <get_wall_info>
		write_map();														//a地図の初期化
 800b574:	f000 fc58 	bl	800be28 <write_map>
		//printf("get pregoal, x = %d, y = %d\n", mouse.x, mouse.y);

		//====a歩数等初期化====
		m_step = r_cnt = 0;													//a歩数と経路カウンタの初期化
 800b578:	4b18      	ldr	r3, [pc, #96]	; (800b5dc <searchE+0x11c>)
 800b57a:	2200      	movs	r2, #0
 800b57c:	701a      	strb	r2, [r3, #0]
 800b57e:	4b18      	ldr	r3, [pc, #96]	; (800b5e0 <searchE+0x120>)
 800b580:	2200      	movs	r2, #0
 800b582:	801a      	strh	r2, [r3, #0]

		find_pregoal();														//a仮goalまでの歩数マップの初期化
 800b584:	f001 fa50 	bl	800ca28 <find_pregoal>
		if (allmap_comp_flag) {
 800b588:	4b1a      	ldr	r3, [pc, #104]	; (800b5f4 <searchE+0x134>)
 800b58a:	781b      	ldrb	r3, [r3, #0]
 800b58c:	2b00      	cmp	r3, #0
 800b58e:	d002      	beq.n	800b596 <searchE+0xd6>
			//printf("get allmap_comp_flag\n");
			half_sectionD();
 800b590:	f7f9 ff42 	bl	8005418 <half_sectionD>
			break;
 800b594:	e00e      	b.n	800b5b4 <searchE+0xf4>
		}
		make_smap2();
 800b596:	f001 fc33 	bl	800ce00 <make_smap2>
		make_route();														//a最短経路探索(route配列に動作が格納される)
 800b59a:	f001 f913 	bl	800c7c4 <make_route>

		if (j > 150) {
 800b59e:	683b      	ldr	r3, [r7, #0]
 800b5a0:	2b96      	cmp	r3, #150	; 0x96
 800b5a2:	dc06      	bgt.n	800b5b2 <searchE+0xf2>
			//printf("j = %d\n", j);
			break;															//a移動マス数が250以上になった場合全面探索を中止
		}
		i++;
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	3301      	adds	r3, #1
 800b5a8:	607b      	str	r3, [r7, #4]
		//printf("i = %d\n", i);

	} while (i < 150);														//a仮goalへの到着が130回以上になった場合全面探索を中止
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	2b95      	cmp	r3, #149	; 0x95
 800b5ae:	dd8e      	ble.n	800b4ce <searchE+0xe>
 800b5b0:	e000      	b.n	800b5b4 <searchE+0xf4>
			break;															//a移動マス数が250以上になった場合全面探索を中止
 800b5b2:	bf00      	nop
	//printf("i = %d\n", i);
	//printf("fin\n");

	HAL_Delay(2000);
 800b5b4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800b5b8:	f7f5 fd30 	bl	800101c <HAL_Delay>
	rotate_180();											//180度回転
 800b5bc:	f7fa f9d8 	bl	8005970 <rotate_180>

	if(!MF.FLAG.SCND){
 800b5c0:	4b0d      	ldr	r3, [pc, #52]	; (800b5f8 <searchE+0x138>)
 800b5c2:	881b      	ldrh	r3, [r3, #0]
 800b5c4:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800b5c8:	b2db      	uxtb	r3, r3
 800b5ca:	2b00      	cmp	r3, #0
 800b5cc:	d101      	bne.n	800b5d2 <searchE+0x112>
		store_map_in_eeprom();
 800b5ce:	f001 ff4d 	bl	800d46c <store_map_in_eeprom>
	}
}
 800b5d2:	bf00      	nop
 800b5d4:	3708      	adds	r7, #8
 800b5d6:	46bd      	mov	sp, r7
 800b5d8:	bd80      	pop	{r7, pc}
 800b5da:	bf00      	nop
 800b5dc:	20001010 	.word	0x20001010
 800b5e0:	200003ce 	.word	0x200003ce
 800b5e4:	20000cd8 	.word	0x20000cd8
 800b5e8:	20000c90 	.word	0x20000c90
 800b5ec:	20000de0 	.word	0x20000de0
 800b5f0:	20001000 	.word	0x20001000
 800b5f4:	20000c30 	.word	0x20000c30
 800b5f8:	20000fe8 	.word	0x20000fe8

0800b5fc <searchF>:
//searchF
//aスラローム走行(+既知区間加速)+pass圧縮でgoal座標に進む
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void searchF(){
 800b5fc:	b580      	push	{r7, lr}
 800b5fe:	b082      	sub	sp, #8
 800b600:	af00      	add	r7, sp, #0

	if(MF.FLAG.SCND){
 800b602:	4b5a      	ldr	r3, [pc, #360]	; (800b76c <searchF+0x170>)
 800b604:	881b      	ldrh	r3, [r3, #0]
 800b606:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800b60a:	b2db      	uxtb	r3, r3
 800b60c:	2b00      	cmp	r3, #0
 800b60e:	d001      	beq.n	800b614 <searchF+0x18>
		load_map_from_eeprom();
 800b610:	f001 ff66 	bl	800d4e0 <load_map_from_eeprom>
	}

	//====a1区画前進====
	adv_pos();
 800b614:	f000 f8b8 	bl	800b788 <adv_pos>

	//====a歩数マップ・経路作成====
	make_smap();											//a歩数マップ作成
 800b618:	f000 fd96 	bl	800c148 <make_smap>
	make_route();											//a最短経路探索（route配列に動作が格納される）
 800b61c:	f001 f8d2 	bl	800c7c4 <make_route>

	//====pass圧縮====
	p_cnt = 0;												//a経路カウンタの初期化
 800b620:	4b53      	ldr	r3, [pc, #332]	; (800b770 <searchF+0x174>)
 800b622:	2200      	movs	r2, #0
 800b624:	701a      	strb	r2, [r3, #0]
	pass_route();
 800b626:	f001 fd0f 	bl	800d048 <pass_route>

	//====a前に壁が無い想定で問答無用で前進====
	start_sectionA();
 800b62a:	f7f9 feaf 	bl	800538c <start_sectionA>

	H_accel_flag = 0;
 800b62e:	4b51      	ldr	r3, [pc, #324]	; (800b774 <searchF+0x178>)
 800b630:	2200      	movs	r2, #0
 800b632:	701a      	strb	r2, [r3, #0]

	//====a探索走行====
	do{
		//----a進行----
		switch(pass[p_cnt++]){								//route配列によって進行を決定。経路カウンタを進める
 800b634:	4b4e      	ldr	r3, [pc, #312]	; (800b770 <searchF+0x174>)
 800b636:	781b      	ldrb	r3, [r3, #0]
 800b638:	1c5a      	adds	r2, r3, #1
 800b63a:	b2d1      	uxtb	r1, r2
 800b63c:	4a4c      	ldr	r2, [pc, #304]	; (800b770 <searchF+0x174>)
 800b63e:	7011      	strb	r1, [r2, #0]
 800b640:	461a      	mov	r2, r3
 800b642:	4b4d      	ldr	r3, [pc, #308]	; (800b778 <searchF+0x17c>)
 800b644:	569b      	ldrsb	r3, [r3, r2]
 800b646:	3306      	adds	r3, #6
 800b648:	2b05      	cmp	r3, #5
 800b64a:	d831      	bhi.n	800b6b0 <searchF+0xb4>
 800b64c:	a201      	add	r2, pc, #4	; (adr r2, 800b654 <searchF+0x58>)
 800b64e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b652:	bf00      	nop
 800b654:	0800b6a3 	.word	0x0800b6a3
 800b658:	0800b695 	.word	0x0800b695
 800b65c:	0800b687 	.word	0x0800b687
 800b660:	0800b679 	.word	0x0800b679
 800b664:	0800b673 	.word	0x0800b673
 800b668:	0800b66d 	.word	0x0800b66d
			//----a右スラローム----
			case -1:
				slalom_R90();
 800b66c:	f7fa fa4a 	bl	8005b04 <slalom_R90>
				break;
 800b670:	e047      	b.n	800b702 <searchF+0x106>

			//----a左スラローム----
			case -2:
				slalom_L90();
 800b672:	f7fa fb3f 	bl	8005cf4 <slalom_L90>
				break;
 800b676:	e044      	b.n	800b702 <searchF+0x106>

			//----a大回り右90----
			case -3:
				half_sectionU();
 800b678:	f7f9 ff66 	bl	8005548 <half_sectionU>
				Lslalom_R90();
 800b67c:	f7fa fde6 	bl	800624c <Lslalom_R90>
				half_sectionU();
 800b680:	f7f9 ff62 	bl	8005548 <half_sectionU>
				break;
 800b684:	e03d      	b.n	800b702 <searchF+0x106>

			//----a大回り左90----
			case -4:
				half_sectionU();
 800b686:	f7f9 ff5f 	bl	8005548 <half_sectionU>
				Lslalom_L90();
 800b68a:	f7fa fecb 	bl	8006424 <Lslalom_L90>
				half_sectionU();
 800b68e:	f7f9 ff5b 	bl	8005548 <half_sectionU>
				break;
 800b692:	e036      	b.n	800b702 <searchF+0x106>

			//----a大回り右180----
			case -5:
				half_sectionU();
 800b694:	f7f9 ff58 	bl	8005548 <half_sectionU>
				Lslalom_R180();
 800b698:	f7fb fb68 	bl	8006d6c <Lslalom_R180>
				half_sectionU();
 800b69c:	f7f9 ff54 	bl	8005548 <half_sectionU>
				break;
 800b6a0:	e02f      	b.n	800b702 <searchF+0x106>

			//----a大回り左180----
			case -6:
				half_sectionU();
 800b6a2:	f7f9 ff51 	bl	8005548 <half_sectionU>
				Lslalom_L180();
 800b6a6:	f7fb fc53 	bl	8006f50 <Lslalom_L180>
				half_sectionU();
 800b6aa:	f7f9 ff4d 	bl	8005548 <half_sectionU>
				break;
 800b6ae:	e028      	b.n	800b702 <searchF+0x106>

			//----a前進----
			default:
				if(pass[p_cnt-1] == 1){
 800b6b0:	4b2f      	ldr	r3, [pc, #188]	; (800b770 <searchF+0x174>)
 800b6b2:	781b      	ldrb	r3, [r3, #0]
 800b6b4:	3b01      	subs	r3, #1
 800b6b6:	4a30      	ldr	r2, [pc, #192]	; (800b778 <searchF+0x17c>)
 800b6b8:	56d3      	ldrsb	r3, [r2, r3]
 800b6ba:	2b01      	cmp	r3, #1
 800b6bc:	d102      	bne.n	800b6c4 <searchF+0xc8>
					one_sectionU();
 800b6be:	f7f9 ffa5 	bl	800560c <one_sectionU>
					}
					one_sectionD();
					H_accel_flag = 0;
					full_led_write(3);
				}
				break;
 800b6c2:	e01d      	b.n	800b700 <searchF+0x104>
					one_sectionA();
 800b6c4:	f7f9 ff54 	bl	8005570 <one_sectionA>
					H_accel_flag = 1;
 800b6c8:	4b2a      	ldr	r3, [pc, #168]	; (800b774 <searchF+0x178>)
 800b6ca:	2201      	movs	r2, #1
 800b6cc:	701a      	strb	r2, [r3, #0]
					for(k = 0; k < pass[p_cnt-1]-2; k++){
 800b6ce:	2300      	movs	r3, #0
 800b6d0:	607b      	str	r3, [r7, #4]
 800b6d2:	e004      	b.n	800b6de <searchF+0xe2>
						one_sectionU();
 800b6d4:	f7f9 ff9a 	bl	800560c <one_sectionU>
					for(k = 0; k < pass[p_cnt-1]-2; k++){
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	3301      	adds	r3, #1
 800b6dc:	607b      	str	r3, [r7, #4]
 800b6de:	4b24      	ldr	r3, [pc, #144]	; (800b770 <searchF+0x174>)
 800b6e0:	781b      	ldrb	r3, [r3, #0]
 800b6e2:	3b01      	subs	r3, #1
 800b6e4:	4a24      	ldr	r2, [pc, #144]	; (800b778 <searchF+0x17c>)
 800b6e6:	56d3      	ldrsb	r3, [r2, r3]
 800b6e8:	3b02      	subs	r3, #2
 800b6ea:	687a      	ldr	r2, [r7, #4]
 800b6ec:	429a      	cmp	r2, r3
 800b6ee:	dbf1      	blt.n	800b6d4 <searchF+0xd8>
					one_sectionD();
 800b6f0:	f7f9 ff64 	bl	80055bc <one_sectionD>
					H_accel_flag = 0;
 800b6f4:	4b1f      	ldr	r3, [pc, #124]	; (800b774 <searchF+0x178>)
 800b6f6:	2200      	movs	r2, #0
 800b6f8:	701a      	strb	r2, [r3, #0]
					full_led_write(3);
 800b6fa:	2003      	movs	r0, #3
 800b6fc:	f001 ffdc 	bl	800d6b8 <full_led_write>
				break;
 800b700:	bf00      	nop
		}
		adv_pos2(pass[p_cnt-1]);
 800b702:	4b1b      	ldr	r3, [pc, #108]	; (800b770 <searchF+0x174>)
 800b704:	781b      	ldrb	r3, [r3, #0]
 800b706:	3b01      	subs	r3, #1
 800b708:	4a1b      	ldr	r2, [pc, #108]	; (800b778 <searchF+0x17c>)
 800b70a:	56d3      	ldrsb	r3, [r2, r3]
 800b70c:	4618      	mov	r0, r3
 800b70e:	f000 f875 	bl	800b7fc <adv_pos2>
		if(MF.FLAG.SCND == 0)conf_route();
 800b712:	4b16      	ldr	r3, [pc, #88]	; (800b76c <searchF+0x170>)
 800b714:	881b      	ldrh	r3, [r3, #0]
 800b716:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800b71a:	b2db      	uxtb	r3, r3
 800b71c:	2b00      	cmp	r3, #0
 800b71e:	d101      	bne.n	800b724 <searchF+0x128>
 800b720:	f000 faf8 	bl	800bd14 <conf_route>

	}while((mouse.x != goal_x) || (mouse.y != goal_y));
 800b724:	4b15      	ldr	r3, [pc, #84]	; (800b77c <searchF+0x180>)
 800b726:	781b      	ldrb	r3, [r3, #0]
 800b728:	b2da      	uxtb	r2, r3
 800b72a:	4b15      	ldr	r3, [pc, #84]	; (800b780 <searchF+0x184>)
 800b72c:	781b      	ldrb	r3, [r3, #0]
 800b72e:	429a      	cmp	r2, r3
 800b730:	d180      	bne.n	800b634 <searchF+0x38>
 800b732:	4b12      	ldr	r3, [pc, #72]	; (800b77c <searchF+0x180>)
 800b734:	785b      	ldrb	r3, [r3, #1]
 800b736:	b2da      	uxtb	r2, r3
 800b738:	4b12      	ldr	r3, [pc, #72]	; (800b784 <searchF+0x188>)
 800b73a:	781b      	ldrb	r3, [r3, #0]
 800b73c:	429a      	cmp	r2, r3
 800b73e:	f47f af79 	bne.w	800b634 <searchF+0x38>

	half_sectionD();
 800b742:	f7f9 fe69 	bl	8005418 <half_sectionD>

	HAL_Delay(2000);
 800b746:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800b74a:	f7f5 fc67 	bl	800101c <HAL_Delay>
	rotate_180();											//180度回転
 800b74e:	f7fa f90f 	bl	8005970 <rotate_180>

	if(!MF.FLAG.SCND){
 800b752:	4b06      	ldr	r3, [pc, #24]	; (800b76c <searchF+0x170>)
 800b754:	881b      	ldrh	r3, [r3, #0]
 800b756:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800b75a:	b2db      	uxtb	r3, r3
 800b75c:	2b00      	cmp	r3, #0
 800b75e:	d101      	bne.n	800b764 <searchF+0x168>
		store_map_in_eeprom();
 800b760:	f001 fe84 	bl	800d46c <store_map_in_eeprom>
	}
}
 800b764:	bf00      	nop
 800b766:	3708      	adds	r7, #8
 800b768:	46bd      	mov	sp, r7
 800b76a:	bd80      	pop	{r7, pc}
 800b76c:	20000fe8 	.word	0x20000fe8
 800b770:	20000330 	.word	0x20000330
 800b774:	20000349 	.word	0x20000349
 800b778:	200003d0 	.word	0x200003d0
 800b77c:	20000c90 	.word	0x20000c90
 800b780:	20000c31 	.word	0x20000c31
 800b784:	20000bcc 	.word	0x20000bcc

0800b788 <adv_pos>:
//adv_pos
//aマイクロマウス内部位置情報で前進させる
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void adv_pos(){
 800b788:	b480      	push	{r7}
 800b78a:	af00      	add	r7, sp, #0

	switch(mouse.dir){										//aマイクロマウスが現在向いている方向で判定
 800b78c:	4b1a      	ldr	r3, [pc, #104]	; (800b7f8 <adv_pos+0x70>)
 800b78e:	789b      	ldrb	r3, [r3, #2]
 800b790:	b2db      	uxtb	r3, r3
 800b792:	2b03      	cmp	r3, #3
 800b794:	d82a      	bhi.n	800b7ec <adv_pos+0x64>
 800b796:	a201      	add	r2, pc, #4	; (adr r2, 800b79c <adv_pos+0x14>)
 800b798:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b79c:	0800b7ad 	.word	0x0800b7ad
 800b7a0:	0800b7bd 	.word	0x0800b7bd
 800b7a4:	0800b7cd 	.word	0x0800b7cd
 800b7a8:	0800b7dd 	.word	0x0800b7dd
	case 0x00:												//a北方向に向いている場合
		mouse.y++;											//Y座標をインクリメント
 800b7ac:	4b12      	ldr	r3, [pc, #72]	; (800b7f8 <adv_pos+0x70>)
 800b7ae:	785b      	ldrb	r3, [r3, #1]
 800b7b0:	b2db      	uxtb	r3, r3
 800b7b2:	3301      	adds	r3, #1
 800b7b4:	b2da      	uxtb	r2, r3
 800b7b6:	4b10      	ldr	r3, [pc, #64]	; (800b7f8 <adv_pos+0x70>)
 800b7b8:	705a      	strb	r2, [r3, #1]
		break;
 800b7ba:	e017      	b.n	800b7ec <adv_pos+0x64>
	case 0x01:												//a東方向に向いている場合
		mouse.x++;											//X座標をインクリメント
 800b7bc:	4b0e      	ldr	r3, [pc, #56]	; (800b7f8 <adv_pos+0x70>)
 800b7be:	781b      	ldrb	r3, [r3, #0]
 800b7c0:	b2db      	uxtb	r3, r3
 800b7c2:	3301      	adds	r3, #1
 800b7c4:	b2da      	uxtb	r2, r3
 800b7c6:	4b0c      	ldr	r3, [pc, #48]	; (800b7f8 <adv_pos+0x70>)
 800b7c8:	701a      	strb	r2, [r3, #0]
		break;
 800b7ca:	e00f      	b.n	800b7ec <adv_pos+0x64>
	case 0x02:												//a南方向に向いている場合
		mouse.y--;											//Y座標をデクリメント
 800b7cc:	4b0a      	ldr	r3, [pc, #40]	; (800b7f8 <adv_pos+0x70>)
 800b7ce:	785b      	ldrb	r3, [r3, #1]
 800b7d0:	b2db      	uxtb	r3, r3
 800b7d2:	3b01      	subs	r3, #1
 800b7d4:	b2da      	uxtb	r2, r3
 800b7d6:	4b08      	ldr	r3, [pc, #32]	; (800b7f8 <adv_pos+0x70>)
 800b7d8:	705a      	strb	r2, [r3, #1]
		break;
 800b7da:	e007      	b.n	800b7ec <adv_pos+0x64>
	case 0x03:												//a西方向に向いている場合
		mouse.x--;											//X座標をデクリメント
 800b7dc:	4b06      	ldr	r3, [pc, #24]	; (800b7f8 <adv_pos+0x70>)
 800b7de:	781b      	ldrb	r3, [r3, #0]
 800b7e0:	b2db      	uxtb	r3, r3
 800b7e2:	3b01      	subs	r3, #1
 800b7e4:	b2da      	uxtb	r2, r3
 800b7e6:	4b04      	ldr	r3, [pc, #16]	; (800b7f8 <adv_pos+0x70>)
 800b7e8:	701a      	strb	r2, [r3, #0]
		break;
 800b7ea:	bf00      	nop
	}
}
 800b7ec:	bf00      	nop
 800b7ee:	46bd      	mov	sp, r7
 800b7f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7f4:	4770      	bx	lr
 800b7f6:	bf00      	nop
 800b7f8:	20000c90 	.word	0x20000c90

0800b7fc <adv_pos2>:
//adv_pos2
//aマイクロマウス内部位置情報で前進させる(pass圧縮対応版)
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void adv_pos2(int8_t pass_pat){
 800b7fc:	b480      	push	{r7}
 800b7fe:	b085      	sub	sp, #20
 800b800:	af00      	add	r7, sp, #0
 800b802:	4603      	mov	r3, r0
 800b804:	71fb      	strb	r3, [r7, #7]
	int k;

	switch(mouse.dir){										//aマイクロマウスが現在向いている方向で判定
 800b806:	4ba0      	ldr	r3, [pc, #640]	; (800ba88 <adv_pos2+0x28c>)
 800b808:	789b      	ldrb	r3, [r3, #2]
 800b80a:	b2db      	uxtb	r3, r3
 800b80c:	2b03      	cmp	r3, #3
 800b80e:	f200 8275 	bhi.w	800bcfc <adv_pos2+0x500>
 800b812:	a201      	add	r2, pc, #4	; (adr r2, 800b818 <adv_pos2+0x1c>)
 800b814:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b818:	0800b829 	.word	0x0800b829
 800b81c:	0800b955 	.word	0x0800b955
 800b820:	0800ba95 	.word	0x0800ba95
 800b824:	0800bbc9 	.word	0x0800bbc9
	case 0x00:												//a北方向に向いている場合
		switch(pass_pat){										//aマイクロマウスが現在向いている方向で判定
 800b828:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b82c:	3306      	adds	r3, #6
 800b82e:	2b05      	cmp	r3, #5
 800b830:	d87c      	bhi.n	800b92c <adv_pos2+0x130>
 800b832:	a201      	add	r2, pc, #4	; (adr r2, 800b838 <adv_pos2+0x3c>)
 800b834:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b838:	0800b8f3 	.word	0x0800b8f3
 800b83c:	0800b8b9 	.word	0x0800b8b9
 800b840:	0800b88d 	.word	0x0800b88d
 800b844:	0800b861 	.word	0x0800b861
 800b848:	0800b851 	.word	0x0800b851
 800b84c:	0800b851 	.word	0x0800b851
		//----a右スラローム----
		case -1:
		case -2:
			mouse.y++;											//Y座標をインクリメント
 800b850:	4b8d      	ldr	r3, [pc, #564]	; (800ba88 <adv_pos2+0x28c>)
 800b852:	785b      	ldrb	r3, [r3, #1]
 800b854:	b2db      	uxtb	r3, r3
 800b856:	3301      	adds	r3, #1
 800b858:	b2da      	uxtb	r2, r3
 800b85a:	4b8b      	ldr	r3, [pc, #556]	; (800ba88 <adv_pos2+0x28c>)
 800b85c:	705a      	strb	r2, [r3, #1]
			break;
 800b85e:	e078      	b.n	800b952 <adv_pos2+0x156>

		//----a大回り右90----
		case -3:
			mouse.x--;											//X座標をデクリメント
 800b860:	4b89      	ldr	r3, [pc, #548]	; (800ba88 <adv_pos2+0x28c>)
 800b862:	781b      	ldrb	r3, [r3, #0]
 800b864:	b2db      	uxtb	r3, r3
 800b866:	3b01      	subs	r3, #1
 800b868:	b2da      	uxtb	r2, r3
 800b86a:	4b87      	ldr	r3, [pc, #540]	; (800ba88 <adv_pos2+0x28c>)
 800b86c:	701a      	strb	r2, [r3, #0]
			mouse.y++;											//Y座標をインクリメント
 800b86e:	4b86      	ldr	r3, [pc, #536]	; (800ba88 <adv_pos2+0x28c>)
 800b870:	785b      	ldrb	r3, [r3, #1]
 800b872:	b2db      	uxtb	r3, r3
 800b874:	3301      	adds	r3, #1
 800b876:	b2da      	uxtb	r2, r3
 800b878:	4b83      	ldr	r3, [pc, #524]	; (800ba88 <adv_pos2+0x28c>)
 800b87a:	705a      	strb	r2, [r3, #1]
			mouse.y++;											//Y座標をインクリメント
 800b87c:	4b82      	ldr	r3, [pc, #520]	; (800ba88 <adv_pos2+0x28c>)
 800b87e:	785b      	ldrb	r3, [r3, #1]
 800b880:	b2db      	uxtb	r3, r3
 800b882:	3301      	adds	r3, #1
 800b884:	b2da      	uxtb	r2, r3
 800b886:	4b80      	ldr	r3, [pc, #512]	; (800ba88 <adv_pos2+0x28c>)
 800b888:	705a      	strb	r2, [r3, #1]
			break;
 800b88a:	e062      	b.n	800b952 <adv_pos2+0x156>

		//----a大回り左90----
		case -4:
			mouse.x++;											//X座標をインクリメント
 800b88c:	4b7e      	ldr	r3, [pc, #504]	; (800ba88 <adv_pos2+0x28c>)
 800b88e:	781b      	ldrb	r3, [r3, #0]
 800b890:	b2db      	uxtb	r3, r3
 800b892:	3301      	adds	r3, #1
 800b894:	b2da      	uxtb	r2, r3
 800b896:	4b7c      	ldr	r3, [pc, #496]	; (800ba88 <adv_pos2+0x28c>)
 800b898:	701a      	strb	r2, [r3, #0]
			mouse.y++;											//Y座標をインクリメント
 800b89a:	4b7b      	ldr	r3, [pc, #492]	; (800ba88 <adv_pos2+0x28c>)
 800b89c:	785b      	ldrb	r3, [r3, #1]
 800b89e:	b2db      	uxtb	r3, r3
 800b8a0:	3301      	adds	r3, #1
 800b8a2:	b2da      	uxtb	r2, r3
 800b8a4:	4b78      	ldr	r3, [pc, #480]	; (800ba88 <adv_pos2+0x28c>)
 800b8a6:	705a      	strb	r2, [r3, #1]
			mouse.y++;											//Y座標をインクリメント
 800b8a8:	4b77      	ldr	r3, [pc, #476]	; (800ba88 <adv_pos2+0x28c>)
 800b8aa:	785b      	ldrb	r3, [r3, #1]
 800b8ac:	b2db      	uxtb	r3, r3
 800b8ae:	3301      	adds	r3, #1
 800b8b0:	b2da      	uxtb	r2, r3
 800b8b2:	4b75      	ldr	r3, [pc, #468]	; (800ba88 <adv_pos2+0x28c>)
 800b8b4:	705a      	strb	r2, [r3, #1]
			break;
 800b8b6:	e04c      	b.n	800b952 <adv_pos2+0x156>

		//----a大回り右180----
		case -5:
			mouse.y--;											//Y座標をデクリメント
 800b8b8:	4b73      	ldr	r3, [pc, #460]	; (800ba88 <adv_pos2+0x28c>)
 800b8ba:	785b      	ldrb	r3, [r3, #1]
 800b8bc:	b2db      	uxtb	r3, r3
 800b8be:	3b01      	subs	r3, #1
 800b8c0:	b2da      	uxtb	r2, r3
 800b8c2:	4b71      	ldr	r3, [pc, #452]	; (800ba88 <adv_pos2+0x28c>)
 800b8c4:	705a      	strb	r2, [r3, #1]
			mouse.x--;											//X座標をデクリメント
 800b8c6:	4b70      	ldr	r3, [pc, #448]	; (800ba88 <adv_pos2+0x28c>)
 800b8c8:	781b      	ldrb	r3, [r3, #0]
 800b8ca:	b2db      	uxtb	r3, r3
 800b8cc:	3b01      	subs	r3, #1
 800b8ce:	b2da      	uxtb	r2, r3
 800b8d0:	4b6d      	ldr	r3, [pc, #436]	; (800ba88 <adv_pos2+0x28c>)
 800b8d2:	701a      	strb	r2, [r3, #0]
			mouse.y++;											//Y座標をインクリメント
 800b8d4:	4b6c      	ldr	r3, [pc, #432]	; (800ba88 <adv_pos2+0x28c>)
 800b8d6:	785b      	ldrb	r3, [r3, #1]
 800b8d8:	b2db      	uxtb	r3, r3
 800b8da:	3301      	adds	r3, #1
 800b8dc:	b2da      	uxtb	r2, r3
 800b8de:	4b6a      	ldr	r3, [pc, #424]	; (800ba88 <adv_pos2+0x28c>)
 800b8e0:	705a      	strb	r2, [r3, #1]
			mouse.y++;											//Y座標をインクリメント
 800b8e2:	4b69      	ldr	r3, [pc, #420]	; (800ba88 <adv_pos2+0x28c>)
 800b8e4:	785b      	ldrb	r3, [r3, #1]
 800b8e6:	b2db      	uxtb	r3, r3
 800b8e8:	3301      	adds	r3, #1
 800b8ea:	b2da      	uxtb	r2, r3
 800b8ec:	4b66      	ldr	r3, [pc, #408]	; (800ba88 <adv_pos2+0x28c>)
 800b8ee:	705a      	strb	r2, [r3, #1]
			break;
 800b8f0:	e02f      	b.n	800b952 <adv_pos2+0x156>

		//----a大回り左180----
		case -6:
			mouse.y--;											//Y座標をデクリメント
 800b8f2:	4b65      	ldr	r3, [pc, #404]	; (800ba88 <adv_pos2+0x28c>)
 800b8f4:	785b      	ldrb	r3, [r3, #1]
 800b8f6:	b2db      	uxtb	r3, r3
 800b8f8:	3b01      	subs	r3, #1
 800b8fa:	b2da      	uxtb	r2, r3
 800b8fc:	4b62      	ldr	r3, [pc, #392]	; (800ba88 <adv_pos2+0x28c>)
 800b8fe:	705a      	strb	r2, [r3, #1]
			mouse.x++;											//X座標をインクリメント
 800b900:	4b61      	ldr	r3, [pc, #388]	; (800ba88 <adv_pos2+0x28c>)
 800b902:	781b      	ldrb	r3, [r3, #0]
 800b904:	b2db      	uxtb	r3, r3
 800b906:	3301      	adds	r3, #1
 800b908:	b2da      	uxtb	r2, r3
 800b90a:	4b5f      	ldr	r3, [pc, #380]	; (800ba88 <adv_pos2+0x28c>)
 800b90c:	701a      	strb	r2, [r3, #0]
			mouse.y++;											//Y座標をインクリメント
 800b90e:	4b5e      	ldr	r3, [pc, #376]	; (800ba88 <adv_pos2+0x28c>)
 800b910:	785b      	ldrb	r3, [r3, #1]
 800b912:	b2db      	uxtb	r3, r3
 800b914:	3301      	adds	r3, #1
 800b916:	b2da      	uxtb	r2, r3
 800b918:	4b5b      	ldr	r3, [pc, #364]	; (800ba88 <adv_pos2+0x28c>)
 800b91a:	705a      	strb	r2, [r3, #1]
			mouse.y++;											//Y座標をインクリメント
 800b91c:	4b5a      	ldr	r3, [pc, #360]	; (800ba88 <adv_pos2+0x28c>)
 800b91e:	785b      	ldrb	r3, [r3, #1]
 800b920:	b2db      	uxtb	r3, r3
 800b922:	3301      	adds	r3, #1
 800b924:	b2da      	uxtb	r2, r3
 800b926:	4b58      	ldr	r3, [pc, #352]	; (800ba88 <adv_pos2+0x28c>)
 800b928:	705a      	strb	r2, [r3, #1]
			break;
 800b92a:	e012      	b.n	800b952 <adv_pos2+0x156>

		//----a前進----
		default:
			for(k = 0; k < pass_pat; k++){
 800b92c:	2300      	movs	r3, #0
 800b92e:	60fb      	str	r3, [r7, #12]
 800b930:	e009      	b.n	800b946 <adv_pos2+0x14a>
				mouse.y++;											//Y座標をインクリメント
 800b932:	4b55      	ldr	r3, [pc, #340]	; (800ba88 <adv_pos2+0x28c>)
 800b934:	785b      	ldrb	r3, [r3, #1]
 800b936:	b2db      	uxtb	r3, r3
 800b938:	3301      	adds	r3, #1
 800b93a:	b2da      	uxtb	r2, r3
 800b93c:	4b52      	ldr	r3, [pc, #328]	; (800ba88 <adv_pos2+0x28c>)
 800b93e:	705a      	strb	r2, [r3, #1]
			for(k = 0; k < pass_pat; k++){
 800b940:	68fb      	ldr	r3, [r7, #12]
 800b942:	3301      	adds	r3, #1
 800b944:	60fb      	str	r3, [r7, #12]
 800b946:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b94a:	68fa      	ldr	r2, [r7, #12]
 800b94c:	429a      	cmp	r2, r3
 800b94e:	dbf0      	blt.n	800b932 <adv_pos2+0x136>
			}
			break;
 800b950:	bf00      	nop
		}
		break;
 800b952:	e1d3      	b.n	800bcfc <adv_pos2+0x500>

	case 0x01:												//a東方向に向いている場合
		switch(pass_pat){										//aマイクロマウスが現在向いている方向で判定
 800b954:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b958:	3306      	adds	r3, #6
 800b95a:	2b05      	cmp	r3, #5
 800b95c:	d87c      	bhi.n	800ba58 <adv_pos2+0x25c>
 800b95e:	a201      	add	r2, pc, #4	; (adr r2, 800b964 <adv_pos2+0x168>)
 800b960:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b964:	0800ba1f 	.word	0x0800ba1f
 800b968:	0800b9e5 	.word	0x0800b9e5
 800b96c:	0800b9b9 	.word	0x0800b9b9
 800b970:	0800b98d 	.word	0x0800b98d
 800b974:	0800b97d 	.word	0x0800b97d
 800b978:	0800b97d 	.word	0x0800b97d
		//----a右スラローム----
		case -1:
		case -2:
			mouse.x++;											//X座標をインクリメント
 800b97c:	4b42      	ldr	r3, [pc, #264]	; (800ba88 <adv_pos2+0x28c>)
 800b97e:	781b      	ldrb	r3, [r3, #0]
 800b980:	b2db      	uxtb	r3, r3
 800b982:	3301      	adds	r3, #1
 800b984:	b2da      	uxtb	r2, r3
 800b986:	4b40      	ldr	r3, [pc, #256]	; (800ba88 <adv_pos2+0x28c>)
 800b988:	701a      	strb	r2, [r3, #0]
			break;
 800b98a:	e07c      	b.n	800ba86 <adv_pos2+0x28a>

		//----a大回り右90----
		case -3:
			mouse.y++;											//Y座標をインクリメント
 800b98c:	4b3e      	ldr	r3, [pc, #248]	; (800ba88 <adv_pos2+0x28c>)
 800b98e:	785b      	ldrb	r3, [r3, #1]
 800b990:	b2db      	uxtb	r3, r3
 800b992:	3301      	adds	r3, #1
 800b994:	b2da      	uxtb	r2, r3
 800b996:	4b3c      	ldr	r3, [pc, #240]	; (800ba88 <adv_pos2+0x28c>)
 800b998:	705a      	strb	r2, [r3, #1]
			mouse.x++;											//X座標をインクリメント
 800b99a:	4b3b      	ldr	r3, [pc, #236]	; (800ba88 <adv_pos2+0x28c>)
 800b99c:	781b      	ldrb	r3, [r3, #0]
 800b99e:	b2db      	uxtb	r3, r3
 800b9a0:	3301      	adds	r3, #1
 800b9a2:	b2da      	uxtb	r2, r3
 800b9a4:	4b38      	ldr	r3, [pc, #224]	; (800ba88 <adv_pos2+0x28c>)
 800b9a6:	701a      	strb	r2, [r3, #0]
			mouse.x++;											//X座標をインクリメント
 800b9a8:	4b37      	ldr	r3, [pc, #220]	; (800ba88 <adv_pos2+0x28c>)
 800b9aa:	781b      	ldrb	r3, [r3, #0]
 800b9ac:	b2db      	uxtb	r3, r3
 800b9ae:	3301      	adds	r3, #1
 800b9b0:	b2da      	uxtb	r2, r3
 800b9b2:	4b35      	ldr	r3, [pc, #212]	; (800ba88 <adv_pos2+0x28c>)
 800b9b4:	701a      	strb	r2, [r3, #0]
			break;
 800b9b6:	e066      	b.n	800ba86 <adv_pos2+0x28a>

		//----a大回り左90----
		case -4:
			mouse.y--;											//Y座標をデクリメント
 800b9b8:	4b33      	ldr	r3, [pc, #204]	; (800ba88 <adv_pos2+0x28c>)
 800b9ba:	785b      	ldrb	r3, [r3, #1]
 800b9bc:	b2db      	uxtb	r3, r3
 800b9be:	3b01      	subs	r3, #1
 800b9c0:	b2da      	uxtb	r2, r3
 800b9c2:	4b31      	ldr	r3, [pc, #196]	; (800ba88 <adv_pos2+0x28c>)
 800b9c4:	705a      	strb	r2, [r3, #1]
			mouse.x++;											//X座標をインクリメント
 800b9c6:	4b30      	ldr	r3, [pc, #192]	; (800ba88 <adv_pos2+0x28c>)
 800b9c8:	781b      	ldrb	r3, [r3, #0]
 800b9ca:	b2db      	uxtb	r3, r3
 800b9cc:	3301      	adds	r3, #1
 800b9ce:	b2da      	uxtb	r2, r3
 800b9d0:	4b2d      	ldr	r3, [pc, #180]	; (800ba88 <adv_pos2+0x28c>)
 800b9d2:	701a      	strb	r2, [r3, #0]
			mouse.x++;											//X座標をインクリメント
 800b9d4:	4b2c      	ldr	r3, [pc, #176]	; (800ba88 <adv_pos2+0x28c>)
 800b9d6:	781b      	ldrb	r3, [r3, #0]
 800b9d8:	b2db      	uxtb	r3, r3
 800b9da:	3301      	adds	r3, #1
 800b9dc:	b2da      	uxtb	r2, r3
 800b9de:	4b2a      	ldr	r3, [pc, #168]	; (800ba88 <adv_pos2+0x28c>)
 800b9e0:	701a      	strb	r2, [r3, #0]
			break;
 800b9e2:	e050      	b.n	800ba86 <adv_pos2+0x28a>

		//----a大回り右180----
		case -5:
			mouse.x--;											//X座標をデクリメント
 800b9e4:	4b28      	ldr	r3, [pc, #160]	; (800ba88 <adv_pos2+0x28c>)
 800b9e6:	781b      	ldrb	r3, [r3, #0]
 800b9e8:	b2db      	uxtb	r3, r3
 800b9ea:	3b01      	subs	r3, #1
 800b9ec:	b2da      	uxtb	r2, r3
 800b9ee:	4b26      	ldr	r3, [pc, #152]	; (800ba88 <adv_pos2+0x28c>)
 800b9f0:	701a      	strb	r2, [r3, #0]
			mouse.y++;											//Y座標をインクリメント
 800b9f2:	4b25      	ldr	r3, [pc, #148]	; (800ba88 <adv_pos2+0x28c>)
 800b9f4:	785b      	ldrb	r3, [r3, #1]
 800b9f6:	b2db      	uxtb	r3, r3
 800b9f8:	3301      	adds	r3, #1
 800b9fa:	b2da      	uxtb	r2, r3
 800b9fc:	4b22      	ldr	r3, [pc, #136]	; (800ba88 <adv_pos2+0x28c>)
 800b9fe:	705a      	strb	r2, [r3, #1]
			mouse.x++;											//X座標をインクリメント
 800ba00:	4b21      	ldr	r3, [pc, #132]	; (800ba88 <adv_pos2+0x28c>)
 800ba02:	781b      	ldrb	r3, [r3, #0]
 800ba04:	b2db      	uxtb	r3, r3
 800ba06:	3301      	adds	r3, #1
 800ba08:	b2da      	uxtb	r2, r3
 800ba0a:	4b1f      	ldr	r3, [pc, #124]	; (800ba88 <adv_pos2+0x28c>)
 800ba0c:	701a      	strb	r2, [r3, #0]
			mouse.x++;											//X座標をインクリメント
 800ba0e:	4b1e      	ldr	r3, [pc, #120]	; (800ba88 <adv_pos2+0x28c>)
 800ba10:	781b      	ldrb	r3, [r3, #0]
 800ba12:	b2db      	uxtb	r3, r3
 800ba14:	3301      	adds	r3, #1
 800ba16:	b2da      	uxtb	r2, r3
 800ba18:	4b1b      	ldr	r3, [pc, #108]	; (800ba88 <adv_pos2+0x28c>)
 800ba1a:	701a      	strb	r2, [r3, #0]
			break;
 800ba1c:	e033      	b.n	800ba86 <adv_pos2+0x28a>

		//----a大回り左180----
		case -6:
			mouse.x--;											//X座標をデクリメント
 800ba1e:	4b1a      	ldr	r3, [pc, #104]	; (800ba88 <adv_pos2+0x28c>)
 800ba20:	781b      	ldrb	r3, [r3, #0]
 800ba22:	b2db      	uxtb	r3, r3
 800ba24:	3b01      	subs	r3, #1
 800ba26:	b2da      	uxtb	r2, r3
 800ba28:	4b17      	ldr	r3, [pc, #92]	; (800ba88 <adv_pos2+0x28c>)
 800ba2a:	701a      	strb	r2, [r3, #0]
			mouse.y--;											//Y座標をデクリメント
 800ba2c:	4b16      	ldr	r3, [pc, #88]	; (800ba88 <adv_pos2+0x28c>)
 800ba2e:	785b      	ldrb	r3, [r3, #1]
 800ba30:	b2db      	uxtb	r3, r3
 800ba32:	3b01      	subs	r3, #1
 800ba34:	b2da      	uxtb	r2, r3
 800ba36:	4b14      	ldr	r3, [pc, #80]	; (800ba88 <adv_pos2+0x28c>)
 800ba38:	705a      	strb	r2, [r3, #1]
			mouse.x++;											//X座標をインクリメント
 800ba3a:	4b13      	ldr	r3, [pc, #76]	; (800ba88 <adv_pos2+0x28c>)
 800ba3c:	781b      	ldrb	r3, [r3, #0]
 800ba3e:	b2db      	uxtb	r3, r3
 800ba40:	3301      	adds	r3, #1
 800ba42:	b2da      	uxtb	r2, r3
 800ba44:	4b10      	ldr	r3, [pc, #64]	; (800ba88 <adv_pos2+0x28c>)
 800ba46:	701a      	strb	r2, [r3, #0]
			mouse.x++;											//X座標をインクリメント
 800ba48:	4b0f      	ldr	r3, [pc, #60]	; (800ba88 <adv_pos2+0x28c>)
 800ba4a:	781b      	ldrb	r3, [r3, #0]
 800ba4c:	b2db      	uxtb	r3, r3
 800ba4e:	3301      	adds	r3, #1
 800ba50:	b2da      	uxtb	r2, r3
 800ba52:	4b0d      	ldr	r3, [pc, #52]	; (800ba88 <adv_pos2+0x28c>)
 800ba54:	701a      	strb	r2, [r3, #0]
			break;
 800ba56:	e016      	b.n	800ba86 <adv_pos2+0x28a>

		//----a前進----
		default:
			for(k = 0; k < pass[p_cnt-1]; k++){
 800ba58:	2300      	movs	r3, #0
 800ba5a:	60fb      	str	r3, [r7, #12]
 800ba5c:	e009      	b.n	800ba72 <adv_pos2+0x276>
				mouse.x++;											//X座標をインクリメント
 800ba5e:	4b0a      	ldr	r3, [pc, #40]	; (800ba88 <adv_pos2+0x28c>)
 800ba60:	781b      	ldrb	r3, [r3, #0]
 800ba62:	b2db      	uxtb	r3, r3
 800ba64:	3301      	adds	r3, #1
 800ba66:	b2da      	uxtb	r2, r3
 800ba68:	4b07      	ldr	r3, [pc, #28]	; (800ba88 <adv_pos2+0x28c>)
 800ba6a:	701a      	strb	r2, [r3, #0]
			for(k = 0; k < pass[p_cnt-1]; k++){
 800ba6c:	68fb      	ldr	r3, [r7, #12]
 800ba6e:	3301      	adds	r3, #1
 800ba70:	60fb      	str	r3, [r7, #12]
 800ba72:	4b06      	ldr	r3, [pc, #24]	; (800ba8c <adv_pos2+0x290>)
 800ba74:	781b      	ldrb	r3, [r3, #0]
 800ba76:	3b01      	subs	r3, #1
 800ba78:	4a05      	ldr	r2, [pc, #20]	; (800ba90 <adv_pos2+0x294>)
 800ba7a:	56d3      	ldrsb	r3, [r2, r3]
 800ba7c:	461a      	mov	r2, r3
 800ba7e:	68fb      	ldr	r3, [r7, #12]
 800ba80:	4293      	cmp	r3, r2
 800ba82:	dbec      	blt.n	800ba5e <adv_pos2+0x262>
			}
			break;
 800ba84:	bf00      	nop
		}
		break;
 800ba86:	e139      	b.n	800bcfc <adv_pos2+0x500>
 800ba88:	20000c90 	.word	0x20000c90
 800ba8c:	20000330 	.word	0x20000330
 800ba90:	200003d0 	.word	0x200003d0

	case 0x02:												//a南方向に向いている場合
		switch(pass_pat){										//aマイクロマウスが現在向いている方向で判定
 800ba94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ba98:	3306      	adds	r3, #6
 800ba9a:	2b05      	cmp	r3, #5
 800ba9c:	d87c      	bhi.n	800bb98 <adv_pos2+0x39c>
 800ba9e:	a201      	add	r2, pc, #4	; (adr r2, 800baa4 <adv_pos2+0x2a8>)
 800baa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800baa4:	0800bb5f 	.word	0x0800bb5f
 800baa8:	0800bb25 	.word	0x0800bb25
 800baac:	0800baf9 	.word	0x0800baf9
 800bab0:	0800bacd 	.word	0x0800bacd
 800bab4:	0800babd 	.word	0x0800babd
 800bab8:	0800babd 	.word	0x0800babd
		//----a右スラローム----
		case -1:
		case -2:
			mouse.y--;											//Y座標をデクリメント
 800babc:	4b92      	ldr	r3, [pc, #584]	; (800bd08 <adv_pos2+0x50c>)
 800babe:	785b      	ldrb	r3, [r3, #1]
 800bac0:	b2db      	uxtb	r3, r3
 800bac2:	3b01      	subs	r3, #1
 800bac4:	b2da      	uxtb	r2, r3
 800bac6:	4b90      	ldr	r3, [pc, #576]	; (800bd08 <adv_pos2+0x50c>)
 800bac8:	705a      	strb	r2, [r3, #1]
			break;
 800baca:	e07c      	b.n	800bbc6 <adv_pos2+0x3ca>

		//----a大回り右90----
		case -3:
			mouse.x++;											//X座標をインクリメント
 800bacc:	4b8e      	ldr	r3, [pc, #568]	; (800bd08 <adv_pos2+0x50c>)
 800bace:	781b      	ldrb	r3, [r3, #0]
 800bad0:	b2db      	uxtb	r3, r3
 800bad2:	3301      	adds	r3, #1
 800bad4:	b2da      	uxtb	r2, r3
 800bad6:	4b8c      	ldr	r3, [pc, #560]	; (800bd08 <adv_pos2+0x50c>)
 800bad8:	701a      	strb	r2, [r3, #0]
			mouse.y--;											//Y座標をデクリメント
 800bada:	4b8b      	ldr	r3, [pc, #556]	; (800bd08 <adv_pos2+0x50c>)
 800badc:	785b      	ldrb	r3, [r3, #1]
 800bade:	b2db      	uxtb	r3, r3
 800bae0:	3b01      	subs	r3, #1
 800bae2:	b2da      	uxtb	r2, r3
 800bae4:	4b88      	ldr	r3, [pc, #544]	; (800bd08 <adv_pos2+0x50c>)
 800bae6:	705a      	strb	r2, [r3, #1]
			mouse.y--;											//Y座標をデクリメント
 800bae8:	4b87      	ldr	r3, [pc, #540]	; (800bd08 <adv_pos2+0x50c>)
 800baea:	785b      	ldrb	r3, [r3, #1]
 800baec:	b2db      	uxtb	r3, r3
 800baee:	3b01      	subs	r3, #1
 800baf0:	b2da      	uxtb	r2, r3
 800baf2:	4b85      	ldr	r3, [pc, #532]	; (800bd08 <adv_pos2+0x50c>)
 800baf4:	705a      	strb	r2, [r3, #1]
			break;
 800baf6:	e066      	b.n	800bbc6 <adv_pos2+0x3ca>

		//----a大回り左90----
		case -4:
			mouse.x--;											//Y座標をデクリメント
 800baf8:	4b83      	ldr	r3, [pc, #524]	; (800bd08 <adv_pos2+0x50c>)
 800bafa:	781b      	ldrb	r3, [r3, #0]
 800bafc:	b2db      	uxtb	r3, r3
 800bafe:	3b01      	subs	r3, #1
 800bb00:	b2da      	uxtb	r2, r3
 800bb02:	4b81      	ldr	r3, [pc, #516]	; (800bd08 <adv_pos2+0x50c>)
 800bb04:	701a      	strb	r2, [r3, #0]
			mouse.y--;											//Y座標をデクリメント
 800bb06:	4b80      	ldr	r3, [pc, #512]	; (800bd08 <adv_pos2+0x50c>)
 800bb08:	785b      	ldrb	r3, [r3, #1]
 800bb0a:	b2db      	uxtb	r3, r3
 800bb0c:	3b01      	subs	r3, #1
 800bb0e:	b2da      	uxtb	r2, r3
 800bb10:	4b7d      	ldr	r3, [pc, #500]	; (800bd08 <adv_pos2+0x50c>)
 800bb12:	705a      	strb	r2, [r3, #1]
			mouse.y--;											//Y座標をデクリメント
 800bb14:	4b7c      	ldr	r3, [pc, #496]	; (800bd08 <adv_pos2+0x50c>)
 800bb16:	785b      	ldrb	r3, [r3, #1]
 800bb18:	b2db      	uxtb	r3, r3
 800bb1a:	3b01      	subs	r3, #1
 800bb1c:	b2da      	uxtb	r2, r3
 800bb1e:	4b7a      	ldr	r3, [pc, #488]	; (800bd08 <adv_pos2+0x50c>)
 800bb20:	705a      	strb	r2, [r3, #1]
			break;
 800bb22:	e050      	b.n	800bbc6 <adv_pos2+0x3ca>

		//----a大回り右180----
		case -5:
			mouse.y++;											//Y座標をインクリメント
 800bb24:	4b78      	ldr	r3, [pc, #480]	; (800bd08 <adv_pos2+0x50c>)
 800bb26:	785b      	ldrb	r3, [r3, #1]
 800bb28:	b2db      	uxtb	r3, r3
 800bb2a:	3301      	adds	r3, #1
 800bb2c:	b2da      	uxtb	r2, r3
 800bb2e:	4b76      	ldr	r3, [pc, #472]	; (800bd08 <adv_pos2+0x50c>)
 800bb30:	705a      	strb	r2, [r3, #1]
			mouse.x++;											//X座標をインクリメント
 800bb32:	4b75      	ldr	r3, [pc, #468]	; (800bd08 <adv_pos2+0x50c>)
 800bb34:	781b      	ldrb	r3, [r3, #0]
 800bb36:	b2db      	uxtb	r3, r3
 800bb38:	3301      	adds	r3, #1
 800bb3a:	b2da      	uxtb	r2, r3
 800bb3c:	4b72      	ldr	r3, [pc, #456]	; (800bd08 <adv_pos2+0x50c>)
 800bb3e:	701a      	strb	r2, [r3, #0]
			mouse.y--;											//Y座標をデクリメント
 800bb40:	4b71      	ldr	r3, [pc, #452]	; (800bd08 <adv_pos2+0x50c>)
 800bb42:	785b      	ldrb	r3, [r3, #1]
 800bb44:	b2db      	uxtb	r3, r3
 800bb46:	3b01      	subs	r3, #1
 800bb48:	b2da      	uxtb	r2, r3
 800bb4a:	4b6f      	ldr	r3, [pc, #444]	; (800bd08 <adv_pos2+0x50c>)
 800bb4c:	705a      	strb	r2, [r3, #1]
			mouse.y--;											//Y座標をデクリメント
 800bb4e:	4b6e      	ldr	r3, [pc, #440]	; (800bd08 <adv_pos2+0x50c>)
 800bb50:	785b      	ldrb	r3, [r3, #1]
 800bb52:	b2db      	uxtb	r3, r3
 800bb54:	3b01      	subs	r3, #1
 800bb56:	b2da      	uxtb	r2, r3
 800bb58:	4b6b      	ldr	r3, [pc, #428]	; (800bd08 <adv_pos2+0x50c>)
 800bb5a:	705a      	strb	r2, [r3, #1]
			break;
 800bb5c:	e033      	b.n	800bbc6 <adv_pos2+0x3ca>

		//----a大回り左180----
		case -6:
			mouse.y++;											//Y座標をインクリメント
 800bb5e:	4b6a      	ldr	r3, [pc, #424]	; (800bd08 <adv_pos2+0x50c>)
 800bb60:	785b      	ldrb	r3, [r3, #1]
 800bb62:	b2db      	uxtb	r3, r3
 800bb64:	3301      	adds	r3, #1
 800bb66:	b2da      	uxtb	r2, r3
 800bb68:	4b67      	ldr	r3, [pc, #412]	; (800bd08 <adv_pos2+0x50c>)
 800bb6a:	705a      	strb	r2, [r3, #1]
			mouse.x--;											//X座標をデクリメント
 800bb6c:	4b66      	ldr	r3, [pc, #408]	; (800bd08 <adv_pos2+0x50c>)
 800bb6e:	781b      	ldrb	r3, [r3, #0]
 800bb70:	b2db      	uxtb	r3, r3
 800bb72:	3b01      	subs	r3, #1
 800bb74:	b2da      	uxtb	r2, r3
 800bb76:	4b64      	ldr	r3, [pc, #400]	; (800bd08 <adv_pos2+0x50c>)
 800bb78:	701a      	strb	r2, [r3, #0]
			mouse.y--;											//Y座標をデクリメント
 800bb7a:	4b63      	ldr	r3, [pc, #396]	; (800bd08 <adv_pos2+0x50c>)
 800bb7c:	785b      	ldrb	r3, [r3, #1]
 800bb7e:	b2db      	uxtb	r3, r3
 800bb80:	3b01      	subs	r3, #1
 800bb82:	b2da      	uxtb	r2, r3
 800bb84:	4b60      	ldr	r3, [pc, #384]	; (800bd08 <adv_pos2+0x50c>)
 800bb86:	705a      	strb	r2, [r3, #1]
			mouse.y--;											//Y座標をデクリメント
 800bb88:	4b5f      	ldr	r3, [pc, #380]	; (800bd08 <adv_pos2+0x50c>)
 800bb8a:	785b      	ldrb	r3, [r3, #1]
 800bb8c:	b2db      	uxtb	r3, r3
 800bb8e:	3b01      	subs	r3, #1
 800bb90:	b2da      	uxtb	r2, r3
 800bb92:	4b5d      	ldr	r3, [pc, #372]	; (800bd08 <adv_pos2+0x50c>)
 800bb94:	705a      	strb	r2, [r3, #1]
			break;
 800bb96:	e016      	b.n	800bbc6 <adv_pos2+0x3ca>

		//----a前進----
		default:
			for(k = 0; k < pass[p_cnt-1]; k++){
 800bb98:	2300      	movs	r3, #0
 800bb9a:	60fb      	str	r3, [r7, #12]
 800bb9c:	e009      	b.n	800bbb2 <adv_pos2+0x3b6>
				mouse.y--;											//Y座標をデクリメント
 800bb9e:	4b5a      	ldr	r3, [pc, #360]	; (800bd08 <adv_pos2+0x50c>)
 800bba0:	785b      	ldrb	r3, [r3, #1]
 800bba2:	b2db      	uxtb	r3, r3
 800bba4:	3b01      	subs	r3, #1
 800bba6:	b2da      	uxtb	r2, r3
 800bba8:	4b57      	ldr	r3, [pc, #348]	; (800bd08 <adv_pos2+0x50c>)
 800bbaa:	705a      	strb	r2, [r3, #1]
			for(k = 0; k < pass[p_cnt-1]; k++){
 800bbac:	68fb      	ldr	r3, [r7, #12]
 800bbae:	3301      	adds	r3, #1
 800bbb0:	60fb      	str	r3, [r7, #12]
 800bbb2:	4b56      	ldr	r3, [pc, #344]	; (800bd0c <adv_pos2+0x510>)
 800bbb4:	781b      	ldrb	r3, [r3, #0]
 800bbb6:	3b01      	subs	r3, #1
 800bbb8:	4a55      	ldr	r2, [pc, #340]	; (800bd10 <adv_pos2+0x514>)
 800bbba:	56d3      	ldrsb	r3, [r2, r3]
 800bbbc:	461a      	mov	r2, r3
 800bbbe:	68fb      	ldr	r3, [r7, #12]
 800bbc0:	4293      	cmp	r3, r2
 800bbc2:	dbec      	blt.n	800bb9e <adv_pos2+0x3a2>
			}
			break;
 800bbc4:	bf00      	nop
		}
		break;
 800bbc6:	e099      	b.n	800bcfc <adv_pos2+0x500>

	case 0x03:												//a西方向に向いている場合
		switch(pass_pat){										//aマイクロマウスが現在向いている方向で判定
 800bbc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bbcc:	3306      	adds	r3, #6
 800bbce:	2b05      	cmp	r3, #5
 800bbd0:	d87c      	bhi.n	800bccc <adv_pos2+0x4d0>
 800bbd2:	a201      	add	r2, pc, #4	; (adr r2, 800bbd8 <adv_pos2+0x3dc>)
 800bbd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bbd8:	0800bc93 	.word	0x0800bc93
 800bbdc:	0800bc59 	.word	0x0800bc59
 800bbe0:	0800bc2d 	.word	0x0800bc2d
 800bbe4:	0800bc01 	.word	0x0800bc01
 800bbe8:	0800bbf1 	.word	0x0800bbf1
 800bbec:	0800bbf1 	.word	0x0800bbf1
		//----a右スラローム----
		case -1:
		case -2:
			mouse.x--;											//X座標をデクリメント
 800bbf0:	4b45      	ldr	r3, [pc, #276]	; (800bd08 <adv_pos2+0x50c>)
 800bbf2:	781b      	ldrb	r3, [r3, #0]
 800bbf4:	b2db      	uxtb	r3, r3
 800bbf6:	3b01      	subs	r3, #1
 800bbf8:	b2da      	uxtb	r2, r3
 800bbfa:	4b43      	ldr	r3, [pc, #268]	; (800bd08 <adv_pos2+0x50c>)
 800bbfc:	701a      	strb	r2, [r3, #0]
			break;
 800bbfe:	e07c      	b.n	800bcfa <adv_pos2+0x4fe>

		//----a大回り右90----
		case -3:
			mouse.y--;											//Y座標をデクリメント
 800bc00:	4b41      	ldr	r3, [pc, #260]	; (800bd08 <adv_pos2+0x50c>)
 800bc02:	785b      	ldrb	r3, [r3, #1]
 800bc04:	b2db      	uxtb	r3, r3
 800bc06:	3b01      	subs	r3, #1
 800bc08:	b2da      	uxtb	r2, r3
 800bc0a:	4b3f      	ldr	r3, [pc, #252]	; (800bd08 <adv_pos2+0x50c>)
 800bc0c:	705a      	strb	r2, [r3, #1]
			mouse.x--;											//X座標をデクリメント
 800bc0e:	4b3e      	ldr	r3, [pc, #248]	; (800bd08 <adv_pos2+0x50c>)
 800bc10:	781b      	ldrb	r3, [r3, #0]
 800bc12:	b2db      	uxtb	r3, r3
 800bc14:	3b01      	subs	r3, #1
 800bc16:	b2da      	uxtb	r2, r3
 800bc18:	4b3b      	ldr	r3, [pc, #236]	; (800bd08 <adv_pos2+0x50c>)
 800bc1a:	701a      	strb	r2, [r3, #0]
			mouse.x--;											//X座標をデクリメント
 800bc1c:	4b3a      	ldr	r3, [pc, #232]	; (800bd08 <adv_pos2+0x50c>)
 800bc1e:	781b      	ldrb	r3, [r3, #0]
 800bc20:	b2db      	uxtb	r3, r3
 800bc22:	3b01      	subs	r3, #1
 800bc24:	b2da      	uxtb	r2, r3
 800bc26:	4b38      	ldr	r3, [pc, #224]	; (800bd08 <adv_pos2+0x50c>)
 800bc28:	701a      	strb	r2, [r3, #0]
			break;
 800bc2a:	e066      	b.n	800bcfa <adv_pos2+0x4fe>

		//----a大回り左90----
		case -4:
			mouse.y++;											//Y座標をインクリメント
 800bc2c:	4b36      	ldr	r3, [pc, #216]	; (800bd08 <adv_pos2+0x50c>)
 800bc2e:	785b      	ldrb	r3, [r3, #1]
 800bc30:	b2db      	uxtb	r3, r3
 800bc32:	3301      	adds	r3, #1
 800bc34:	b2da      	uxtb	r2, r3
 800bc36:	4b34      	ldr	r3, [pc, #208]	; (800bd08 <adv_pos2+0x50c>)
 800bc38:	705a      	strb	r2, [r3, #1]
			mouse.x--;											//X座標をデクリメント
 800bc3a:	4b33      	ldr	r3, [pc, #204]	; (800bd08 <adv_pos2+0x50c>)
 800bc3c:	781b      	ldrb	r3, [r3, #0]
 800bc3e:	b2db      	uxtb	r3, r3
 800bc40:	3b01      	subs	r3, #1
 800bc42:	b2da      	uxtb	r2, r3
 800bc44:	4b30      	ldr	r3, [pc, #192]	; (800bd08 <adv_pos2+0x50c>)
 800bc46:	701a      	strb	r2, [r3, #0]
			mouse.x--;											//X座標をデクリメント
 800bc48:	4b2f      	ldr	r3, [pc, #188]	; (800bd08 <adv_pos2+0x50c>)
 800bc4a:	781b      	ldrb	r3, [r3, #0]
 800bc4c:	b2db      	uxtb	r3, r3
 800bc4e:	3b01      	subs	r3, #1
 800bc50:	b2da      	uxtb	r2, r3
 800bc52:	4b2d      	ldr	r3, [pc, #180]	; (800bd08 <adv_pos2+0x50c>)
 800bc54:	701a      	strb	r2, [r3, #0]
			break;
 800bc56:	e050      	b.n	800bcfa <adv_pos2+0x4fe>

		//----a大回り右180----
		case -5:
			mouse.x++;											//X座標をインクリメント
 800bc58:	4b2b      	ldr	r3, [pc, #172]	; (800bd08 <adv_pos2+0x50c>)
 800bc5a:	781b      	ldrb	r3, [r3, #0]
 800bc5c:	b2db      	uxtb	r3, r3
 800bc5e:	3301      	adds	r3, #1
 800bc60:	b2da      	uxtb	r2, r3
 800bc62:	4b29      	ldr	r3, [pc, #164]	; (800bd08 <adv_pos2+0x50c>)
 800bc64:	701a      	strb	r2, [r3, #0]
			mouse.y--;											//Y座標をデクリメント
 800bc66:	4b28      	ldr	r3, [pc, #160]	; (800bd08 <adv_pos2+0x50c>)
 800bc68:	785b      	ldrb	r3, [r3, #1]
 800bc6a:	b2db      	uxtb	r3, r3
 800bc6c:	3b01      	subs	r3, #1
 800bc6e:	b2da      	uxtb	r2, r3
 800bc70:	4b25      	ldr	r3, [pc, #148]	; (800bd08 <adv_pos2+0x50c>)
 800bc72:	705a      	strb	r2, [r3, #1]
			mouse.x--;											//X座標をデクリメント
 800bc74:	4b24      	ldr	r3, [pc, #144]	; (800bd08 <adv_pos2+0x50c>)
 800bc76:	781b      	ldrb	r3, [r3, #0]
 800bc78:	b2db      	uxtb	r3, r3
 800bc7a:	3b01      	subs	r3, #1
 800bc7c:	b2da      	uxtb	r2, r3
 800bc7e:	4b22      	ldr	r3, [pc, #136]	; (800bd08 <adv_pos2+0x50c>)
 800bc80:	701a      	strb	r2, [r3, #0]
			mouse.x--;											//X座標をデクリメント
 800bc82:	4b21      	ldr	r3, [pc, #132]	; (800bd08 <adv_pos2+0x50c>)
 800bc84:	781b      	ldrb	r3, [r3, #0]
 800bc86:	b2db      	uxtb	r3, r3
 800bc88:	3b01      	subs	r3, #1
 800bc8a:	b2da      	uxtb	r2, r3
 800bc8c:	4b1e      	ldr	r3, [pc, #120]	; (800bd08 <adv_pos2+0x50c>)
 800bc8e:	701a      	strb	r2, [r3, #0]
			break;
 800bc90:	e033      	b.n	800bcfa <adv_pos2+0x4fe>

		//----a大回り左180----
		case -6:
			mouse.x++;											//X座標をインクリメント
 800bc92:	4b1d      	ldr	r3, [pc, #116]	; (800bd08 <adv_pos2+0x50c>)
 800bc94:	781b      	ldrb	r3, [r3, #0]
 800bc96:	b2db      	uxtb	r3, r3
 800bc98:	3301      	adds	r3, #1
 800bc9a:	b2da      	uxtb	r2, r3
 800bc9c:	4b1a      	ldr	r3, [pc, #104]	; (800bd08 <adv_pos2+0x50c>)
 800bc9e:	701a      	strb	r2, [r3, #0]
			mouse.y++;											//Y座標をインクリメント
 800bca0:	4b19      	ldr	r3, [pc, #100]	; (800bd08 <adv_pos2+0x50c>)
 800bca2:	785b      	ldrb	r3, [r3, #1]
 800bca4:	b2db      	uxtb	r3, r3
 800bca6:	3301      	adds	r3, #1
 800bca8:	b2da      	uxtb	r2, r3
 800bcaa:	4b17      	ldr	r3, [pc, #92]	; (800bd08 <adv_pos2+0x50c>)
 800bcac:	705a      	strb	r2, [r3, #1]
			mouse.x--;											//X座標をデクリメント
 800bcae:	4b16      	ldr	r3, [pc, #88]	; (800bd08 <adv_pos2+0x50c>)
 800bcb0:	781b      	ldrb	r3, [r3, #0]
 800bcb2:	b2db      	uxtb	r3, r3
 800bcb4:	3b01      	subs	r3, #1
 800bcb6:	b2da      	uxtb	r2, r3
 800bcb8:	4b13      	ldr	r3, [pc, #76]	; (800bd08 <adv_pos2+0x50c>)
 800bcba:	701a      	strb	r2, [r3, #0]
			mouse.x--;											//X座標をデクリメント
 800bcbc:	4b12      	ldr	r3, [pc, #72]	; (800bd08 <adv_pos2+0x50c>)
 800bcbe:	781b      	ldrb	r3, [r3, #0]
 800bcc0:	b2db      	uxtb	r3, r3
 800bcc2:	3b01      	subs	r3, #1
 800bcc4:	b2da      	uxtb	r2, r3
 800bcc6:	4b10      	ldr	r3, [pc, #64]	; (800bd08 <adv_pos2+0x50c>)
 800bcc8:	701a      	strb	r2, [r3, #0]
			break;
 800bcca:	e016      	b.n	800bcfa <adv_pos2+0x4fe>

		//----a前進----
		default:
			for(k = 0; k < pass[p_cnt-1]; k++){
 800bccc:	2300      	movs	r3, #0
 800bcce:	60fb      	str	r3, [r7, #12]
 800bcd0:	e009      	b.n	800bce6 <adv_pos2+0x4ea>
				mouse.x--;											//X座標をデクリメント
 800bcd2:	4b0d      	ldr	r3, [pc, #52]	; (800bd08 <adv_pos2+0x50c>)
 800bcd4:	781b      	ldrb	r3, [r3, #0]
 800bcd6:	b2db      	uxtb	r3, r3
 800bcd8:	3b01      	subs	r3, #1
 800bcda:	b2da      	uxtb	r2, r3
 800bcdc:	4b0a      	ldr	r3, [pc, #40]	; (800bd08 <adv_pos2+0x50c>)
 800bcde:	701a      	strb	r2, [r3, #0]
			for(k = 0; k < pass[p_cnt-1]; k++){
 800bce0:	68fb      	ldr	r3, [r7, #12]
 800bce2:	3301      	adds	r3, #1
 800bce4:	60fb      	str	r3, [r7, #12]
 800bce6:	4b09      	ldr	r3, [pc, #36]	; (800bd0c <adv_pos2+0x510>)
 800bce8:	781b      	ldrb	r3, [r3, #0]
 800bcea:	3b01      	subs	r3, #1
 800bcec:	4a08      	ldr	r2, [pc, #32]	; (800bd10 <adv_pos2+0x514>)
 800bcee:	56d3      	ldrsb	r3, [r2, r3]
 800bcf0:	461a      	mov	r2, r3
 800bcf2:	68fb      	ldr	r3, [r7, #12]
 800bcf4:	4293      	cmp	r3, r2
 800bcf6:	dbec      	blt.n	800bcd2 <adv_pos2+0x4d6>
			}
			break;
 800bcf8:	bf00      	nop
		}
		break;
 800bcfa:	bf00      	nop
	}
}
 800bcfc:	bf00      	nop
 800bcfe:	3714      	adds	r7, #20
 800bd00:	46bd      	mov	sp, r7
 800bd02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd06:	4770      	bx	lr
 800bd08:	20000c90 	.word	0x20000c90
 800bd0c:	20000330 	.word	0x20000330
 800bd10:	200003d0 	.word	0x200003d0

0800bd14 <conf_route>:
//conf_route
//a進路を判定する
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void conf_route(){
 800bd14:	b580      	push	{r7, lr}
 800bd16:	af00      	add	r7, sp, #0

	//----a壁情報書き込み----
	write_map();
 800bd18:	f000 f886 	bl	800be28 <write_map>

	//----a最短経路上に壁があれば進路変更----
	if(wall_info & route[r_cnt]){
 800bd1c:	4b09      	ldr	r3, [pc, #36]	; (800bd44 <conf_route+0x30>)
 800bd1e:	781b      	ldrb	r3, [r3, #0]
 800bd20:	461a      	mov	r2, r3
 800bd22:	4b09      	ldr	r3, [pc, #36]	; (800bd48 <conf_route+0x34>)
 800bd24:	5c9a      	ldrb	r2, [r3, r2]
 800bd26:	4b09      	ldr	r3, [pc, #36]	; (800bd4c <conf_route+0x38>)
 800bd28:	781b      	ldrb	r3, [r3, #0]
 800bd2a:	4013      	ands	r3, r2
 800bd2c:	b2db      	uxtb	r3, r3
 800bd2e:	2b00      	cmp	r3, #0
 800bd30:	d006      	beq.n	800bd40 <conf_route+0x2c>
		make_smap();										//a歩数マップを更新
 800bd32:	f000 fa09 	bl	800c148 <make_smap>
		make_route();										//a最短経路を更新
 800bd36:	f000 fd45 	bl	800c7c4 <make_route>
		r_cnt = 0;											//a経路カウンタを0に
 800bd3a:	4b02      	ldr	r3, [pc, #8]	; (800bd44 <conf_route+0x30>)
 800bd3c:	2200      	movs	r2, #0
 800bd3e:	701a      	strb	r2, [r3, #0]
	}
}
 800bd40:	bf00      	nop
 800bd42:	bd80      	pop	{r7, pc}
 800bd44:	20001010 	.word	0x20001010
 800bd48:	20000cd8 	.word	0x20000cd8
 800bd4c:	20000348 	.word	0x20000348

0800bd50 <map_Init>:
//map_Init
//aマップ格納配列map[][]の初期化をする
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void map_Init(){
 800bd50:	b480      	push	{r7}
 800bd52:	b083      	sub	sp, #12
 800bd54:	af00      	add	r7, sp, #0
	//====a変数宣言====
	uint8_t x, y;											//for文用変数

	//====a初期化開始====
	//aマップのクリア
	for(y = 0; y <= 15; y++){								//a各Y座標で実行
 800bd56:	2300      	movs	r3, #0
 800bd58:	71bb      	strb	r3, [r7, #6]
 800bd5a:	e013      	b.n	800bd84 <map_Init+0x34>
		for(x = 0; x <= 15; x++){							//a各X座標で実行
 800bd5c:	2300      	movs	r3, #0
 800bd5e:	71fb      	strb	r3, [r7, #7]
 800bd60:	e00a      	b.n	800bd78 <map_Init+0x28>
			map[y][x] = 0xf0;								//a上位4ビット（2次走行時）を壁あり，下位4ビット（1次走行時）を壁なしとする。
 800bd62:	79ba      	ldrb	r2, [r7, #6]
 800bd64:	79fb      	ldrb	r3, [r7, #7]
 800bd66:	492f      	ldr	r1, [pc, #188]	; (800be24 <map_Init+0xd4>)
 800bd68:	0112      	lsls	r2, r2, #4
 800bd6a:	440a      	add	r2, r1
 800bd6c:	4413      	add	r3, r2
 800bd6e:	22f0      	movs	r2, #240	; 0xf0
 800bd70:	701a      	strb	r2, [r3, #0]
		for(x = 0; x <= 15; x++){							//a各X座標で実行
 800bd72:	79fb      	ldrb	r3, [r7, #7]
 800bd74:	3301      	adds	r3, #1
 800bd76:	71fb      	strb	r3, [r7, #7]
 800bd78:	79fb      	ldrb	r3, [r7, #7]
 800bd7a:	2b0f      	cmp	r3, #15
 800bd7c:	d9f1      	bls.n	800bd62 <map_Init+0x12>
	for(y = 0; y <= 15; y++){								//a各Y座標で実行
 800bd7e:	79bb      	ldrb	r3, [r7, #6]
 800bd80:	3301      	adds	r3, #1
 800bd82:	71bb      	strb	r3, [r7, #6]
 800bd84:	79bb      	ldrb	r3, [r7, #6]
 800bd86:	2b0f      	cmp	r3, #15
 800bd88:	d9e8      	bls.n	800bd5c <map_Init+0xc>
		}
	}

	//a確定壁の配置
	for(y = 0; y <= 15; y++){								//a各Y座標で実行
 800bd8a:	2300      	movs	r3, #0
 800bd8c:	71bb      	strb	r3, [r7, #6]
 800bd8e:	e020      	b.n	800bdd2 <map_Init+0x82>
		map[y][0] |= 0xf1;									//a最西に壁を配置
 800bd90:	79bb      	ldrb	r3, [r7, #6]
 800bd92:	4a24      	ldr	r2, [pc, #144]	; (800be24 <map_Init+0xd4>)
 800bd94:	011b      	lsls	r3, r3, #4
 800bd96:	4413      	add	r3, r2
 800bd98:	781a      	ldrb	r2, [r3, #0]
 800bd9a:	79bb      	ldrb	r3, [r7, #6]
 800bd9c:	f062 020e 	orn	r2, r2, #14
 800bda0:	b2d1      	uxtb	r1, r2
 800bda2:	4a20      	ldr	r2, [pc, #128]	; (800be24 <map_Init+0xd4>)
 800bda4:	011b      	lsls	r3, r3, #4
 800bda6:	4413      	add	r3, r2
 800bda8:	460a      	mov	r2, r1
 800bdaa:	701a      	strb	r2, [r3, #0]
		map[y][15] |= 0xf4;									//a最東に壁を配置
 800bdac:	79bb      	ldrb	r3, [r7, #6]
 800bdae:	4a1d      	ldr	r2, [pc, #116]	; (800be24 <map_Init+0xd4>)
 800bdb0:	011b      	lsls	r3, r3, #4
 800bdb2:	4413      	add	r3, r2
 800bdb4:	330f      	adds	r3, #15
 800bdb6:	781a      	ldrb	r2, [r3, #0]
 800bdb8:	79bb      	ldrb	r3, [r7, #6]
 800bdba:	f062 020b 	orn	r2, r2, #11
 800bdbe:	b2d1      	uxtb	r1, r2
 800bdc0:	4a18      	ldr	r2, [pc, #96]	; (800be24 <map_Init+0xd4>)
 800bdc2:	011b      	lsls	r3, r3, #4
 800bdc4:	4413      	add	r3, r2
 800bdc6:	330f      	adds	r3, #15
 800bdc8:	460a      	mov	r2, r1
 800bdca:	701a      	strb	r2, [r3, #0]
	for(y = 0; y <= 15; y++){								//a各Y座標で実行
 800bdcc:	79bb      	ldrb	r3, [r7, #6]
 800bdce:	3301      	adds	r3, #1
 800bdd0:	71bb      	strb	r3, [r7, #6]
 800bdd2:	79bb      	ldrb	r3, [r7, #6]
 800bdd4:	2b0f      	cmp	r3, #15
 800bdd6:	d9db      	bls.n	800bd90 <map_Init+0x40>
	}
	for(x = 0; x <= 15; x++){								//a各X座標で実行
 800bdd8:	2300      	movs	r3, #0
 800bdda:	71fb      	strb	r3, [r7, #7]
 800bddc:	e019      	b.n	800be12 <map_Init+0xc2>
		map[0][x] |= 0xf2;									//a最南に壁を配置
 800bdde:	79fb      	ldrb	r3, [r7, #7]
 800bde0:	4a10      	ldr	r2, [pc, #64]	; (800be24 <map_Init+0xd4>)
 800bde2:	5cd2      	ldrb	r2, [r2, r3]
 800bde4:	79fb      	ldrb	r3, [r7, #7]
 800bde6:	f062 020d 	orn	r2, r2, #13
 800bdea:	b2d1      	uxtb	r1, r2
 800bdec:	4a0d      	ldr	r2, [pc, #52]	; (800be24 <map_Init+0xd4>)
 800bdee:	54d1      	strb	r1, [r2, r3]
		map[15][x] |= 0xf8;									//a最北に壁を配置
 800bdf0:	79fb      	ldrb	r3, [r7, #7]
 800bdf2:	4a0c      	ldr	r2, [pc, #48]	; (800be24 <map_Init+0xd4>)
 800bdf4:	4413      	add	r3, r2
 800bdf6:	f893 20f0 	ldrb.w	r2, [r3, #240]	; 0xf0
 800bdfa:	79fb      	ldrb	r3, [r7, #7]
 800bdfc:	f062 0207 	orn	r2, r2, #7
 800be00:	b2d1      	uxtb	r1, r2
 800be02:	4a08      	ldr	r2, [pc, #32]	; (800be24 <map_Init+0xd4>)
 800be04:	4413      	add	r3, r2
 800be06:	460a      	mov	r2, r1
 800be08:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
	for(x = 0; x <= 15; x++){								//a各X座標で実行
 800be0c:	79fb      	ldrb	r3, [r7, #7]
 800be0e:	3301      	adds	r3, #1
 800be10:	71fb      	strb	r3, [r7, #7]
 800be12:	79fb      	ldrb	r3, [r7, #7]
 800be14:	2b0f      	cmp	r3, #15
 800be16:	d9e2      	bls.n	800bdde <map_Init+0x8e>
	}
}
 800be18:	bf00      	nop
 800be1a:	370c      	adds	r7, #12
 800be1c:	46bd      	mov	sp, r7
 800be1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be22:	4770      	bx	lr
 800be24:	2000022c 	.word	0x2000022c

0800be28 <write_map>:
//write_map
//aマップデータを書き込む
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void write_map(){
 800be28:	b490      	push	{r4, r7}
 800be2a:	b082      	sub	sp, #8
 800be2c:	af00      	add	r7, sp, #0

	//====a変数宣言====
	uint8_t m_temp;											//a向きを補正した壁情報

	//====a壁情報の補正格納====
	m_temp = (wall_info >> mouse.dir) & 0x0f;				//aセンサ壁情報をmouse.dirで向きを補正させて下位4bit分を残す
 800be2e:	4b8f      	ldr	r3, [pc, #572]	; (800c06c <write_map+0x244>)
 800be30:	781b      	ldrb	r3, [r3, #0]
 800be32:	461a      	mov	r2, r3
 800be34:	4b8e      	ldr	r3, [pc, #568]	; (800c070 <write_map+0x248>)
 800be36:	789b      	ldrb	r3, [r3, #2]
 800be38:	b2db      	uxtb	r3, r3
 800be3a:	fa42 f303 	asr.w	r3, r2, r3
 800be3e:	b2db      	uxtb	r3, r3
 800be40:	f003 030f 	and.w	r3, r3, #15
 800be44:	71fb      	strb	r3, [r7, #7]
	m_temp |= (m_temp << 4);								//a上位4bitに下位4bitをコピー。この作業でm_tempにNESW順で壁が格納
 800be46:	79fb      	ldrb	r3, [r7, #7]
 800be48:	011b      	lsls	r3, r3, #4
 800be4a:	b25a      	sxtb	r2, r3
 800be4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800be50:	4313      	orrs	r3, r2
 800be52:	b25b      	sxtb	r3, r3
 800be54:	71fb      	strb	r3, [r7, #7]

	//====aデータの書き込み====
	map[mouse.y][mouse.x] = m_temp; 						//a現在地に壁情報書き込み
 800be56:	4b86      	ldr	r3, [pc, #536]	; (800c070 <write_map+0x248>)
 800be58:	785b      	ldrb	r3, [r3, #1]
 800be5a:	b2db      	uxtb	r3, r3
 800be5c:	4618      	mov	r0, r3
 800be5e:	4b84      	ldr	r3, [pc, #528]	; (800c070 <write_map+0x248>)
 800be60:	781b      	ldrb	r3, [r3, #0]
 800be62:	b2db      	uxtb	r3, r3
 800be64:	4619      	mov	r1, r3
 800be66:	4a83      	ldr	r2, [pc, #524]	; (800c074 <write_map+0x24c>)
 800be68:	0103      	lsls	r3, r0, #4
 800be6a:	4413      	add	r3, r2
 800be6c:	440b      	add	r3, r1
 800be6e:	79fa      	ldrb	r2, [r7, #7]
 800be70:	701a      	strb	r2, [r3, #0]
	//----a周辺に書き込む----
	//a北側について
	if(mouse.y != 15){										//a現在最北端でないとき
 800be72:	4b7f      	ldr	r3, [pc, #508]	; (800c070 <write_map+0x248>)
 800be74:	785b      	ldrb	r3, [r3, #1]
 800be76:	b2db      	uxtb	r3, r3
 800be78:	2b0f      	cmp	r3, #15
 800be7a:	d039      	beq.n	800bef0 <write_map+0xc8>
		if(m_temp & 0x88){									//a北壁がある場合
 800be7c:	79fb      	ldrb	r3, [r7, #7]
 800be7e:	f003 0388 	and.w	r3, r3, #136	; 0x88
 800be82:	2b00      	cmp	r3, #0
 800be84:	d01a      	beq.n	800bebc <write_map+0x94>
			map[mouse.y + 1][mouse.x] |= 0x22;				//a北側の区画から見て南壁ありを書き込む
 800be86:	4b7a      	ldr	r3, [pc, #488]	; (800c070 <write_map+0x248>)
 800be88:	785b      	ldrb	r3, [r3, #1]
 800be8a:	b2d8      	uxtb	r0, r3
 800be8c:	4603      	mov	r3, r0
 800be8e:	3301      	adds	r3, #1
 800be90:	4a77      	ldr	r2, [pc, #476]	; (800c070 <write_map+0x248>)
 800be92:	7812      	ldrb	r2, [r2, #0]
 800be94:	b2d1      	uxtb	r1, r2
 800be96:	460c      	mov	r4, r1
 800be98:	4a76      	ldr	r2, [pc, #472]	; (800c074 <write_map+0x24c>)
 800be9a:	011b      	lsls	r3, r3, #4
 800be9c:	4413      	add	r3, r2
 800be9e:	4423      	add	r3, r4
 800bea0:	781a      	ldrb	r2, [r3, #0]
 800bea2:	4603      	mov	r3, r0
 800bea4:	3301      	adds	r3, #1
 800bea6:	4608      	mov	r0, r1
 800bea8:	f042 0222 	orr.w	r2, r2, #34	; 0x22
 800beac:	b2d1      	uxtb	r1, r2
 800beae:	4a71      	ldr	r2, [pc, #452]	; (800c074 <write_map+0x24c>)
 800beb0:	011b      	lsls	r3, r3, #4
 800beb2:	4413      	add	r3, r2
 800beb4:	4403      	add	r3, r0
 800beb6:	460a      	mov	r2, r1
 800beb8:	701a      	strb	r2, [r3, #0]
 800beba:	e019      	b.n	800bef0 <write_map+0xc8>
		}else{												//a北壁がない場合
			map[mouse.y + 1][mouse.x] &= 0xDD;				//a北側の区画から見て南壁なしを書き込む
 800bebc:	4b6c      	ldr	r3, [pc, #432]	; (800c070 <write_map+0x248>)
 800bebe:	785b      	ldrb	r3, [r3, #1]
 800bec0:	b2d8      	uxtb	r0, r3
 800bec2:	4603      	mov	r3, r0
 800bec4:	3301      	adds	r3, #1
 800bec6:	4a6a      	ldr	r2, [pc, #424]	; (800c070 <write_map+0x248>)
 800bec8:	7812      	ldrb	r2, [r2, #0]
 800beca:	b2d1      	uxtb	r1, r2
 800becc:	460c      	mov	r4, r1
 800bece:	4a69      	ldr	r2, [pc, #420]	; (800c074 <write_map+0x24c>)
 800bed0:	011b      	lsls	r3, r3, #4
 800bed2:	4413      	add	r3, r2
 800bed4:	4423      	add	r3, r4
 800bed6:	781a      	ldrb	r2, [r3, #0]
 800bed8:	4603      	mov	r3, r0
 800beda:	3301      	adds	r3, #1
 800bedc:	4608      	mov	r0, r1
 800bede:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 800bee2:	b2d1      	uxtb	r1, r2
 800bee4:	4a63      	ldr	r2, [pc, #396]	; (800c074 <write_map+0x24c>)
 800bee6:	011b      	lsls	r3, r3, #4
 800bee8:	4413      	add	r3, r2
 800beea:	4403      	add	r3, r0
 800beec:	460a      	mov	r2, r1
 800beee:	701a      	strb	r2, [r3, #0]
		}
	}
	//a東側について
	if(mouse.x != 15){										//a現在最東端でないとき
 800bef0:	4b5f      	ldr	r3, [pc, #380]	; (800c070 <write_map+0x248>)
 800bef2:	781b      	ldrb	r3, [r3, #0]
 800bef4:	b2db      	uxtb	r3, r3
 800bef6:	2b0f      	cmp	r3, #15
 800bef8:	d037      	beq.n	800bf6a <write_map+0x142>
		if(m_temp & 0x44){									//a東壁がある場合
 800befa:	79fb      	ldrb	r3, [r7, #7]
 800befc:	f003 0344 	and.w	r3, r3, #68	; 0x44
 800bf00:	2b00      	cmp	r3, #0
 800bf02:	d019      	beq.n	800bf38 <write_map+0x110>
			map[mouse.y][mouse.x + 1] |= 0x11;				//a東側の区画から見て西壁ありを書き込む
 800bf04:	4b5a      	ldr	r3, [pc, #360]	; (800c070 <write_map+0x248>)
 800bf06:	785b      	ldrb	r3, [r3, #1]
 800bf08:	b2dc      	uxtb	r4, r3
 800bf0a:	4622      	mov	r2, r4
 800bf0c:	4b58      	ldr	r3, [pc, #352]	; (800c070 <write_map+0x248>)
 800bf0e:	781b      	ldrb	r3, [r3, #0]
 800bf10:	b2d8      	uxtb	r0, r3
 800bf12:	4603      	mov	r3, r0
 800bf14:	3301      	adds	r3, #1
 800bf16:	4957      	ldr	r1, [pc, #348]	; (800c074 <write_map+0x24c>)
 800bf18:	0112      	lsls	r2, r2, #4
 800bf1a:	440a      	add	r2, r1
 800bf1c:	4413      	add	r3, r2
 800bf1e:	781a      	ldrb	r2, [r3, #0]
 800bf20:	4603      	mov	r3, r0
 800bf22:	3301      	adds	r3, #1
 800bf24:	f042 0211 	orr.w	r2, r2, #17
 800bf28:	b2d0      	uxtb	r0, r2
 800bf2a:	4952      	ldr	r1, [pc, #328]	; (800c074 <write_map+0x24c>)
 800bf2c:	0122      	lsls	r2, r4, #4
 800bf2e:	440a      	add	r2, r1
 800bf30:	4413      	add	r3, r2
 800bf32:	4602      	mov	r2, r0
 800bf34:	701a      	strb	r2, [r3, #0]
 800bf36:	e018      	b.n	800bf6a <write_map+0x142>
		}else{												//a北壁がない場合
			map[mouse.y][mouse.x + 1] &= 0xEE;				//a東側の区画から見て西壁なしを書き込む
 800bf38:	4b4d      	ldr	r3, [pc, #308]	; (800c070 <write_map+0x248>)
 800bf3a:	785b      	ldrb	r3, [r3, #1]
 800bf3c:	b2dc      	uxtb	r4, r3
 800bf3e:	4622      	mov	r2, r4
 800bf40:	4b4b      	ldr	r3, [pc, #300]	; (800c070 <write_map+0x248>)
 800bf42:	781b      	ldrb	r3, [r3, #0]
 800bf44:	b2d8      	uxtb	r0, r3
 800bf46:	4603      	mov	r3, r0
 800bf48:	3301      	adds	r3, #1
 800bf4a:	494a      	ldr	r1, [pc, #296]	; (800c074 <write_map+0x24c>)
 800bf4c:	0112      	lsls	r2, r2, #4
 800bf4e:	440a      	add	r2, r1
 800bf50:	4413      	add	r3, r2
 800bf52:	781a      	ldrb	r2, [r3, #0]
 800bf54:	4603      	mov	r3, r0
 800bf56:	3301      	adds	r3, #1
 800bf58:	f022 0211 	bic.w	r2, r2, #17
 800bf5c:	b2d0      	uxtb	r0, r2
 800bf5e:	4945      	ldr	r1, [pc, #276]	; (800c074 <write_map+0x24c>)
 800bf60:	0122      	lsls	r2, r4, #4
 800bf62:	440a      	add	r2, r1
 800bf64:	4413      	add	r3, r2
 800bf66:	4602      	mov	r2, r0
 800bf68:	701a      	strb	r2, [r3, #0]
		}
	}
	//a南壁について
	if(mouse.y != 0){										//a現在最南端でないとき
 800bf6a:	4b41      	ldr	r3, [pc, #260]	; (800c070 <write_map+0x248>)
 800bf6c:	785b      	ldrb	r3, [r3, #1]
 800bf6e:	b2db      	uxtb	r3, r3
 800bf70:	2b00      	cmp	r3, #0
 800bf72:	d039      	beq.n	800bfe8 <write_map+0x1c0>
		if(m_temp & 0x22){									//a南壁がある場合
 800bf74:	79fb      	ldrb	r3, [r7, #7]
 800bf76:	f003 0322 	and.w	r3, r3, #34	; 0x22
 800bf7a:	2b00      	cmp	r3, #0
 800bf7c:	d01a      	beq.n	800bfb4 <write_map+0x18c>
			map[mouse.y - 1][mouse.x] |= 0x88;				//a南側の区画から見て北壁ありを書き込む
 800bf7e:	4b3c      	ldr	r3, [pc, #240]	; (800c070 <write_map+0x248>)
 800bf80:	785b      	ldrb	r3, [r3, #1]
 800bf82:	b2d8      	uxtb	r0, r3
 800bf84:	4603      	mov	r3, r0
 800bf86:	3b01      	subs	r3, #1
 800bf88:	4a39      	ldr	r2, [pc, #228]	; (800c070 <write_map+0x248>)
 800bf8a:	7812      	ldrb	r2, [r2, #0]
 800bf8c:	b2d1      	uxtb	r1, r2
 800bf8e:	460c      	mov	r4, r1
 800bf90:	4a38      	ldr	r2, [pc, #224]	; (800c074 <write_map+0x24c>)
 800bf92:	011b      	lsls	r3, r3, #4
 800bf94:	4413      	add	r3, r2
 800bf96:	4423      	add	r3, r4
 800bf98:	781a      	ldrb	r2, [r3, #0]
 800bf9a:	4603      	mov	r3, r0
 800bf9c:	3b01      	subs	r3, #1
 800bf9e:	4608      	mov	r0, r1
 800bfa0:	f062 0277 	orn	r2, r2, #119	; 0x77
 800bfa4:	b2d1      	uxtb	r1, r2
 800bfa6:	4a33      	ldr	r2, [pc, #204]	; (800c074 <write_map+0x24c>)
 800bfa8:	011b      	lsls	r3, r3, #4
 800bfaa:	4413      	add	r3, r2
 800bfac:	4403      	add	r3, r0
 800bfae:	460a      	mov	r2, r1
 800bfb0:	701a      	strb	r2, [r3, #0]
 800bfb2:	e019      	b.n	800bfe8 <write_map+0x1c0>
		}else{												//a南壁がない場合
			map[mouse.y - 1][mouse.x] &= 0x77;				//a南側の区画から見て北壁なしを書き込む
 800bfb4:	4b2e      	ldr	r3, [pc, #184]	; (800c070 <write_map+0x248>)
 800bfb6:	785b      	ldrb	r3, [r3, #1]
 800bfb8:	b2d8      	uxtb	r0, r3
 800bfba:	4603      	mov	r3, r0
 800bfbc:	3b01      	subs	r3, #1
 800bfbe:	4a2c      	ldr	r2, [pc, #176]	; (800c070 <write_map+0x248>)
 800bfc0:	7812      	ldrb	r2, [r2, #0]
 800bfc2:	b2d1      	uxtb	r1, r2
 800bfc4:	460c      	mov	r4, r1
 800bfc6:	4a2b      	ldr	r2, [pc, #172]	; (800c074 <write_map+0x24c>)
 800bfc8:	011b      	lsls	r3, r3, #4
 800bfca:	4413      	add	r3, r2
 800bfcc:	4423      	add	r3, r4
 800bfce:	781a      	ldrb	r2, [r3, #0]
 800bfd0:	4603      	mov	r3, r0
 800bfd2:	3b01      	subs	r3, #1
 800bfd4:	4608      	mov	r0, r1
 800bfd6:	f002 0277 	and.w	r2, r2, #119	; 0x77
 800bfda:	b2d1      	uxtb	r1, r2
 800bfdc:	4a25      	ldr	r2, [pc, #148]	; (800c074 <write_map+0x24c>)
 800bfde:	011b      	lsls	r3, r3, #4
 800bfe0:	4413      	add	r3, r2
 800bfe2:	4403      	add	r3, r0
 800bfe4:	460a      	mov	r2, r1
 800bfe6:	701a      	strb	r2, [r3, #0]
		}
	}
	//a西側について
	if(mouse.x != 0){										//a現在最西端でないとき
 800bfe8:	4b21      	ldr	r3, [pc, #132]	; (800c070 <write_map+0x248>)
 800bfea:	781b      	ldrb	r3, [r3, #0]
 800bfec:	b2db      	uxtb	r3, r3
 800bfee:	2b00      	cmp	r3, #0
 800bff0:	d037      	beq.n	800c062 <write_map+0x23a>
		if(m_temp & 0x11){									//a西壁がある場合
 800bff2:	79fb      	ldrb	r3, [r7, #7]
 800bff4:	f003 0311 	and.w	r3, r3, #17
 800bff8:	2b00      	cmp	r3, #0
 800bffa:	d019      	beq.n	800c030 <write_map+0x208>
			map[mouse.y][mouse.x - 1] |= 0x44;				//a西側の区画から見て東壁ありを書き込む
 800bffc:	4b1c      	ldr	r3, [pc, #112]	; (800c070 <write_map+0x248>)
 800bffe:	785b      	ldrb	r3, [r3, #1]
 800c000:	b2dc      	uxtb	r4, r3
 800c002:	4622      	mov	r2, r4
 800c004:	4b1a      	ldr	r3, [pc, #104]	; (800c070 <write_map+0x248>)
 800c006:	781b      	ldrb	r3, [r3, #0]
 800c008:	b2d8      	uxtb	r0, r3
 800c00a:	4603      	mov	r3, r0
 800c00c:	3b01      	subs	r3, #1
 800c00e:	4919      	ldr	r1, [pc, #100]	; (800c074 <write_map+0x24c>)
 800c010:	0112      	lsls	r2, r2, #4
 800c012:	440a      	add	r2, r1
 800c014:	4413      	add	r3, r2
 800c016:	781a      	ldrb	r2, [r3, #0]
 800c018:	4603      	mov	r3, r0
 800c01a:	3b01      	subs	r3, #1
 800c01c:	f042 0244 	orr.w	r2, r2, #68	; 0x44
 800c020:	b2d0      	uxtb	r0, r2
 800c022:	4914      	ldr	r1, [pc, #80]	; (800c074 <write_map+0x24c>)
 800c024:	0122      	lsls	r2, r4, #4
 800c026:	440a      	add	r2, r1
 800c028:	4413      	add	r3, r2
 800c02a:	4602      	mov	r2, r0
 800c02c:	701a      	strb	r2, [r3, #0]
		}else{												//a西壁がない場合
			map[mouse.y][mouse.x - 1] &= 0xBB;				//a西側の区画から見て東側なしを書き込む
		}
	}
}
 800c02e:	e018      	b.n	800c062 <write_map+0x23a>
			map[mouse.y][mouse.x - 1] &= 0xBB;				//a西側の区画から見て東側なしを書き込む
 800c030:	4b0f      	ldr	r3, [pc, #60]	; (800c070 <write_map+0x248>)
 800c032:	785b      	ldrb	r3, [r3, #1]
 800c034:	b2dc      	uxtb	r4, r3
 800c036:	4622      	mov	r2, r4
 800c038:	4b0d      	ldr	r3, [pc, #52]	; (800c070 <write_map+0x248>)
 800c03a:	781b      	ldrb	r3, [r3, #0]
 800c03c:	b2d8      	uxtb	r0, r3
 800c03e:	4603      	mov	r3, r0
 800c040:	3b01      	subs	r3, #1
 800c042:	490c      	ldr	r1, [pc, #48]	; (800c074 <write_map+0x24c>)
 800c044:	0112      	lsls	r2, r2, #4
 800c046:	440a      	add	r2, r1
 800c048:	4413      	add	r3, r2
 800c04a:	781a      	ldrb	r2, [r3, #0]
 800c04c:	4603      	mov	r3, r0
 800c04e:	3b01      	subs	r3, #1
 800c050:	f022 0244 	bic.w	r2, r2, #68	; 0x44
 800c054:	b2d0      	uxtb	r0, r2
 800c056:	4907      	ldr	r1, [pc, #28]	; (800c074 <write_map+0x24c>)
 800c058:	0122      	lsls	r2, r4, #4
 800c05a:	440a      	add	r2, r1
 800c05c:	4413      	add	r3, r2
 800c05e:	4602      	mov	r2, r0
 800c060:	701a      	strb	r2, [r3, #0]
}
 800c062:	bf00      	nop
 800c064:	3708      	adds	r7, #8
 800c066:	46bd      	mov	sp, r7
 800c068:	bc90      	pop	{r4, r7}
 800c06a:	4770      	bx	lr
 800c06c:	20000348 	.word	0x20000348
 800c070:	20000c90 	.word	0x20000c90
 800c074:	2000022c 	.word	0x2000022c

0800c078 <turn_dir>:
//turn_dir
//aマウスの方向を変更する
//a引数1：t_pat …… 回転方向(search.hでマクロ定義)
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void turn_dir(uint8_t t_pat, uint8_t t_mode){
 800c078:	b590      	push	{r4, r7, lr}
 800c07a:	b083      	sub	sp, #12
 800c07c:	af00      	add	r7, sp, #0
 800c07e:	4603      	mov	r3, r0
 800c080:	460a      	mov	r2, r1
 800c082:	71fb      	strb	r3, [r7, #7]
 800c084:	4613      	mov	r3, r2
 800c086:	71bb      	strb	r3, [r7, #6]

	//====a方向を変更====
	mouse.dir = (mouse.dir + t_pat) & 0x03;					//a指定された分mouse.dirを回転させる
 800c088:	4b2d      	ldr	r3, [pc, #180]	; (800c140 <turn_dir+0xc8>)
 800c08a:	789b      	ldrb	r3, [r3, #2]
 800c08c:	b2da      	uxtb	r2, r3
 800c08e:	79fb      	ldrb	r3, [r7, #7]
 800c090:	4413      	add	r3, r2
 800c092:	b2db      	uxtb	r3, r3
 800c094:	f003 0303 	and.w	r3, r3, #3
 800c098:	b2da      	uxtb	r2, r3
 800c09a:	4b29      	ldr	r3, [pc, #164]	; (800c140 <turn_dir+0xc8>)
 800c09c:	709a      	strb	r2, [r3, #2]
	if(t_mode == 1){
 800c09e:	79bb      	ldrb	r3, [r7, #6]
 800c0a0:	2b01      	cmp	r3, #1
 800c0a2:	d141      	bne.n	800c128 <turn_dir+0xb0>
		if(t_pat == 0x01) target_degree_z -= 90.4;				//目標角度+右90度
 800c0a4:	79fb      	ldrb	r3, [r7, #7]
 800c0a6:	2b01      	cmp	r3, #1
 800c0a8:	d112      	bne.n	800c0d0 <turn_dir+0x58>
 800c0aa:	4b26      	ldr	r3, [pc, #152]	; (800c144 <turn_dir+0xcc>)
 800c0ac:	681b      	ldr	r3, [r3, #0]
 800c0ae:	4618      	mov	r0, r3
 800c0b0:	f7f4 fa42 	bl	8000538 <__aeabi_f2d>
 800c0b4:	a31e      	add	r3, pc, #120	; (adr r3, 800c130 <turn_dir+0xb8>)
 800c0b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0ba:	f7f4 f8dd 	bl	8000278 <__aeabi_dsub>
 800c0be:	4603      	mov	r3, r0
 800c0c0:	460c      	mov	r4, r1
 800c0c2:	4618      	mov	r0, r3
 800c0c4:	4621      	mov	r1, r4
 800c0c6:	f7f4 fd67 	bl	8000b98 <__aeabi_d2f>
 800c0ca:	4602      	mov	r2, r0
 800c0cc:	4b1d      	ldr	r3, [pc, #116]	; (800c144 <turn_dir+0xcc>)
 800c0ce:	601a      	str	r2, [r3, #0]
		if(t_pat == 0xff) target_degree_z += 90.4;				//目標角度+左90度
 800c0d0:	79fb      	ldrb	r3, [r7, #7]
 800c0d2:	2bff      	cmp	r3, #255	; 0xff
 800c0d4:	d112      	bne.n	800c0fc <turn_dir+0x84>
 800c0d6:	4b1b      	ldr	r3, [pc, #108]	; (800c144 <turn_dir+0xcc>)
 800c0d8:	681b      	ldr	r3, [r3, #0]
 800c0da:	4618      	mov	r0, r3
 800c0dc:	f7f4 fa2c 	bl	8000538 <__aeabi_f2d>
 800c0e0:	a313      	add	r3, pc, #76	; (adr r3, 800c130 <turn_dir+0xb8>)
 800c0e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0e6:	f7f4 f8c9 	bl	800027c <__adddf3>
 800c0ea:	4603      	mov	r3, r0
 800c0ec:	460c      	mov	r4, r1
 800c0ee:	4618      	mov	r0, r3
 800c0f0:	4621      	mov	r1, r4
 800c0f2:	f7f4 fd51 	bl	8000b98 <__aeabi_d2f>
 800c0f6:	4602      	mov	r2, r0
 800c0f8:	4b12      	ldr	r3, [pc, #72]	; (800c144 <turn_dir+0xcc>)
 800c0fa:	601a      	str	r2, [r3, #0]
		if(t_pat == 0x02) target_degree_z -= 180.8;				//目標角度+右180度
 800c0fc:	79fb      	ldrb	r3, [r7, #7]
 800c0fe:	2b02      	cmp	r3, #2
 800c100:	d112      	bne.n	800c128 <turn_dir+0xb0>
 800c102:	4b10      	ldr	r3, [pc, #64]	; (800c144 <turn_dir+0xcc>)
 800c104:	681b      	ldr	r3, [r3, #0]
 800c106:	4618      	mov	r0, r3
 800c108:	f7f4 fa16 	bl	8000538 <__aeabi_f2d>
 800c10c:	a30a      	add	r3, pc, #40	; (adr r3, 800c138 <turn_dir+0xc0>)
 800c10e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c112:	f7f4 f8b1 	bl	8000278 <__aeabi_dsub>
 800c116:	4603      	mov	r3, r0
 800c118:	460c      	mov	r4, r1
 800c11a:	4618      	mov	r0, r3
 800c11c:	4621      	mov	r1, r4
 800c11e:	f7f4 fd3b 	bl	8000b98 <__aeabi_d2f>
 800c122:	4602      	mov	r2, r0
 800c124:	4b07      	ldr	r3, [pc, #28]	; (800c144 <turn_dir+0xcc>)
 800c126:	601a      	str	r2, [r3, #0]
	}
}
 800c128:	bf00      	nop
 800c12a:	370c      	adds	r7, #12
 800c12c:	46bd      	mov	sp, r7
 800c12e:	bd90      	pop	{r4, r7, pc}
 800c130:	9999999a 	.word	0x9999999a
 800c134:	40569999 	.word	0x40569999
 800c138:	9999999a 	.word	0x9999999a
 800c13c:	40669999 	.word	0x40669999
 800c140:	20000c90 	.word	0x20000c90
 800c144:	20000c7c 	.word	0x20000c7c

0800c148 <make_smap>:
//make_smap
//a歩数マップを作成する
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void make_smap(void){
 800c148:	b490      	push	{r4, r7}
 800c14a:	b08c      	sub	sp, #48	; 0x30
 800c14c:	af00      	add	r7, sp, #0
	//====a変数宣言====
	uint8_t x, y;											//for文用変数
	uint8_t m_temp_sample[16];

	//====a歩数マップのクリア====
	for(y = 0; y <= 15; y++){								//a各Y座標で実行
 800c14e:	2300      	movs	r3, #0
 800c150:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 800c154:	e01c      	b.n	800c190 <make_smap+0x48>
		for(x = 0; x <= 15; x++){							//a各X座標で実行
 800c156:	2300      	movs	r3, #0
 800c158:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800c15c:	e00f      	b.n	800c17e <make_smap+0x36>
			smap[y][x] = 0x03e7;							//a未記入部分は歩数最大とする
 800c15e:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800c162:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c166:	499c      	ldr	r1, [pc, #624]	; (800c3d8 <make_smap+0x290>)
 800c168:	0112      	lsls	r2, r2, #4
 800c16a:	4413      	add	r3, r2
 800c16c:	f240 32e7 	movw	r2, #999	; 0x3e7
 800c170:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for(x = 0; x <= 15; x++){							//a各X座標で実行
 800c174:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c178:	3301      	adds	r3, #1
 800c17a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800c17e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c182:	2b0f      	cmp	r3, #15
 800c184:	d9eb      	bls.n	800c15e <make_smap+0x16>
	for(y = 0; y <= 15; y++){								//a各Y座標で実行
 800c186:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800c18a:	3301      	adds	r3, #1
 800c18c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 800c190:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800c194:	2b0f      	cmp	r3, #15
 800c196:	d9de      	bls.n	800c156 <make_smap+0xe>
		}
	}

	//====aゴール座標を0にする====
	m_step = 0;												//a歩数カウンタを0にする
 800c198:	4b90      	ldr	r3, [pc, #576]	; (800c3dc <make_smap+0x294>)
 800c19a:	2200      	movs	r2, #0
 800c19c:	801a      	strh	r2, [r3, #0]
	smap[goal_y][goal_x] = 0;
 800c19e:	4b90      	ldr	r3, [pc, #576]	; (800c3e0 <make_smap+0x298>)
 800c1a0:	781b      	ldrb	r3, [r3, #0]
 800c1a2:	4618      	mov	r0, r3
 800c1a4:	4b8f      	ldr	r3, [pc, #572]	; (800c3e4 <make_smap+0x29c>)
 800c1a6:	781b      	ldrb	r3, [r3, #0]
 800c1a8:	4619      	mov	r1, r3
 800c1aa:	4a8b      	ldr	r2, [pc, #556]	; (800c3d8 <make_smap+0x290>)
 800c1ac:	0103      	lsls	r3, r0, #4
 800c1ae:	440b      	add	r3, r1
 800c1b0:	2100      	movs	r1, #0
 800c1b2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

	//====a歩数カウンタの重みづけ====
	int straight = 3;
 800c1b6:	2303      	movs	r3, #3
 800c1b8:	61bb      	str	r3, [r7, #24]
	int turn = 5;
 800c1ba:	2305      	movs	r3, #5
 800c1bc:	617b      	str	r3, [r7, #20]

	//====a自分の座標にたどり着くまでループ====
	do{
		//----aマップ全域を捜索----
		for(y = 0; y <= 15; y++){							//a各Y座標で実行
 800c1be:	2300      	movs	r3, #0
 800c1c0:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 800c1c4:	e2d1      	b.n	800c76a <make_smap+0x622>
			for(x = 0; x <= 15; x++){						//a各X座標で実行
 800c1c6:	2300      	movs	r3, #0
 800c1c8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800c1cc:	e2c3      	b.n	800c756 <make_smap+0x60e>
				//----a現在最大の歩数を発見したとき----
				if(smap[y][x] == m_step){					//a歩数カウンタm_stepの値が現在最大の歩数
 800c1ce:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800c1d2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c1d6:	4980      	ldr	r1, [pc, #512]	; (800c3d8 <make_smap+0x290>)
 800c1d8:	0112      	lsls	r2, r2, #4
 800c1da:	4413      	add	r3, r2
 800c1dc:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 800c1e0:	4b7e      	ldr	r3, [pc, #504]	; (800c3dc <make_smap+0x294>)
 800c1e2:	881b      	ldrh	r3, [r3, #0]
 800c1e4:	429a      	cmp	r2, r3
 800c1e6:	f040 82b1 	bne.w	800c74c <make_smap+0x604>
					uint8_t m_temp = map[y][x];				//map配列からマップデータを取り出す
 800c1ea:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800c1ee:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c1f2:	497d      	ldr	r1, [pc, #500]	; (800c3e8 <make_smap+0x2a0>)
 800c1f4:	0112      	lsls	r2, r2, #4
 800c1f6:	440a      	add	r2, r1
 800c1f8:	4413      	add	r3, r2
 800c1fa:	781b      	ldrb	r3, [r3, #0]
 800c1fc:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
					if(MF.FLAG.SCND){						//a二次走行用のマップを作成する場合（二次走行時はMF.FLAG.SCNDが立っている）
 800c200:	4b7a      	ldr	r3, [pc, #488]	; (800c3ec <make_smap+0x2a4>)
 800c202:	881b      	ldrh	r3, [r3, #0]
 800c204:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800c208:	b2db      	uxtb	r3, r3
 800c20a:	2b00      	cmp	r3, #0
 800c20c:	d004      	beq.n	800c218 <make_smap+0xd0>
						m_temp >>= 4;						//a上位4bitを使うので4bit分右にシフトさせる
 800c20e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800c212:	091b      	lsrs	r3, r3, #4
 800c214:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
					}
					//----a北壁についての処理----
					if(!(m_temp & 0x08) && y != 15){		//a北壁がなく現在最北端でないとき
 800c218:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800c21c:	f003 0308 	and.w	r3, r3, #8
 800c220:	2b00      	cmp	r3, #0
 800c222:	f040 809c 	bne.w	800c35e <make_smap+0x216>
 800c226:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800c22a:	2b0f      	cmp	r3, #15
 800c22c:	f000 8097 	beq.w	800c35e <make_smap+0x216>
						if(smap[y+1][x] == 0x03e7){			//a北側が未記入なら
 800c230:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800c234:	1c5a      	adds	r2, r3, #1
 800c236:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c23a:	4967      	ldr	r1, [pc, #412]	; (800c3d8 <make_smap+0x290>)
 800c23c:	0112      	lsls	r2, r2, #4
 800c23e:	4413      	add	r3, r2
 800c240:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800c244:	f240 32e7 	movw	r2, #999	; 0x3e7
 800c248:	4293      	cmp	r3, r2
 800c24a:	f040 8088 	bne.w	800c35e <make_smap+0x216>
							smap[y+1][x] = smap[y][x] + turn;		//a次の歩数を書き込む
 800c24e:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800c252:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c256:	4960      	ldr	r1, [pc, #384]	; (800c3d8 <make_smap+0x290>)
 800c258:	0112      	lsls	r2, r2, #4
 800c25a:	4413      	add	r3, r2
 800c25c:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 800c260:	697b      	ldr	r3, [r7, #20]
 800c262:	b299      	uxth	r1, r3
 800c264:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800c268:	1c5a      	adds	r2, r3, #1
 800c26a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c26e:	4401      	add	r1, r0
 800c270:	b288      	uxth	r0, r1
 800c272:	4959      	ldr	r1, [pc, #356]	; (800c3d8 <make_smap+0x290>)
 800c274:	0112      	lsls	r2, r2, #4
 800c276:	4413      	add	r3, r2
 800c278:	4602      	mov	r2, r0
 800c27a:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
							if(MF.FLAG.STRAIGHT){
 800c27e:	4b5b      	ldr	r3, [pc, #364]	; (800c3ec <make_smap+0x2a4>)
 800c280:	881b      	ldrh	r3, [r3, #0]
 800c282:	f3c3 2380 	ubfx	r3, r3, #10, #1
 800c286:	b2db      	uxtb	r3, r3
 800c288:	2b00      	cmp	r3, #0
 800c28a:	d068      	beq.n	800c35e <make_smap+0x216>
								//----a直線優先処理----
								for (int k = 1; k < 16-y; k++) {					//a現在座標から見て北のマスすべてにおいて
 800c28c:	2301      	movs	r3, #1
 800c28e:	62bb      	str	r3, [r7, #40]	; 0x28
 800c290:	e05e      	b.n	800c350 <make_smap+0x208>
									m_temp_sample[k] = map[y + k][x];				//map配列からマップデータを取り出す
 800c292:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800c296:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c298:	441a      	add	r2, r3
 800c29a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c29e:	4952      	ldr	r1, [pc, #328]	; (800c3e8 <make_smap+0x2a0>)
 800c2a0:	0112      	lsls	r2, r2, #4
 800c2a2:	440a      	add	r2, r1
 800c2a4:	4413      	add	r3, r2
 800c2a6:	7819      	ldrb	r1, [r3, #0]
 800c2a8:	1d3a      	adds	r2, r7, #4
 800c2aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2ac:	4413      	add	r3, r2
 800c2ae:	460a      	mov	r2, r1
 800c2b0:	701a      	strb	r2, [r3, #0]
									if (MF.FLAG.SCND) m_temp_sample[k] >>= 4;		//a二次走行用のマップを作成する場合上位4bitを使うので4bit分右にシフトさせる
 800c2b2:	4b4e      	ldr	r3, [pc, #312]	; (800c3ec <make_smap+0x2a4>)
 800c2b4:	881b      	ldrh	r3, [r3, #0]
 800c2b6:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800c2ba:	b2db      	uxtb	r3, r3
 800c2bc:	2b00      	cmp	r3, #0
 800c2be:	d00a      	beq.n	800c2d6 <make_smap+0x18e>
 800c2c0:	1d3a      	adds	r2, r7, #4
 800c2c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2c4:	4413      	add	r3, r2
 800c2c6:	781b      	ldrb	r3, [r3, #0]
 800c2c8:	091b      	lsrs	r3, r3, #4
 800c2ca:	b2d9      	uxtb	r1, r3
 800c2cc:	1d3a      	adds	r2, r7, #4
 800c2ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2d0:	4413      	add	r3, r2
 800c2d2:	460a      	mov	r2, r1
 800c2d4:	701a      	strb	r2, [r3, #0]
									if (!(m_temp_sample[k] & 0x08) && (y + k) != 0x0f) {		//a北壁がなく現在最北端でないとき
 800c2d6:	1d3a      	adds	r2, r7, #4
 800c2d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2da:	4413      	add	r3, r2
 800c2dc:	781b      	ldrb	r3, [r3, #0]
 800c2de:	f003 0308 	and.w	r3, r3, #8
 800c2e2:	2b00      	cmp	r3, #0
 800c2e4:	d13b      	bne.n	800c35e <make_smap+0x216>
 800c2e6:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800c2ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2ec:	4413      	add	r3, r2
 800c2ee:	2b0f      	cmp	r3, #15
 800c2f0:	d035      	beq.n	800c35e <make_smap+0x216>
										if (smap[y + k + 1][x] == 0x03e7) {						//a北側が未記入なら
 800c2f2:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800c2f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2f8:	4413      	add	r3, r2
 800c2fa:	1c5a      	adds	r2, r3, #1
 800c2fc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c300:	4935      	ldr	r1, [pc, #212]	; (800c3d8 <make_smap+0x290>)
 800c302:	0112      	lsls	r2, r2, #4
 800c304:	4413      	add	r3, r2
 800c306:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800c30a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800c30e:	4293      	cmp	r3, r2
 800c310:	d11b      	bne.n	800c34a <make_smap+0x202>
											smap[y + k + 1][x] = smap[y + k][x] + straight;		//a直線分インクリメントした値を次のマスの歩数マップに書き込む
 800c312:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800c316:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c318:	441a      	add	r2, r3
 800c31a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c31e:	492e      	ldr	r1, [pc, #184]	; (800c3d8 <make_smap+0x290>)
 800c320:	0112      	lsls	r2, r2, #4
 800c322:	4413      	add	r3, r2
 800c324:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 800c328:	69bb      	ldr	r3, [r7, #24]
 800c32a:	b299      	uxth	r1, r3
 800c32c:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800c330:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c332:	4413      	add	r3, r2
 800c334:	1c5a      	adds	r2, r3, #1
 800c336:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c33a:	4401      	add	r1, r0
 800c33c:	b288      	uxth	r0, r1
 800c33e:	4926      	ldr	r1, [pc, #152]	; (800c3d8 <make_smap+0x290>)
 800c340:	0112      	lsls	r2, r2, #4
 800c342:	4413      	add	r3, r2
 800c344:	4602      	mov	r2, r0
 800c346:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
								for (int k = 1; k < 16-y; k++) {					//a現在座標から見て北のマスすべてにおいて
 800c34a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c34c:	3301      	adds	r3, #1
 800c34e:	62bb      	str	r3, [r7, #40]	; 0x28
 800c350:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800c354:	f1c3 0310 	rsb	r3, r3, #16
 800c358:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c35a:	429a      	cmp	r2, r3
 800c35c:	db99      	blt.n	800c292 <make_smap+0x14a>
								}
							}
						}
					}
					//----a東壁についての処理----
					if(!(m_temp & 0x04) && x != 15){		//a東壁がなく現在最東端でないとき
 800c35e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800c362:	f003 0304 	and.w	r3, r3, #4
 800c366:	2b00      	cmp	r3, #0
 800c368:	f040 80a8 	bne.w	800c4bc <make_smap+0x374>
 800c36c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c370:	2b0f      	cmp	r3, #15
 800c372:	f000 80a3 	beq.w	800c4bc <make_smap+0x374>
						if(smap[y][x+1] == 0x03e7){			//a東側が未記入なら
 800c376:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800c37a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c37e:	3301      	adds	r3, #1
 800c380:	4915      	ldr	r1, [pc, #84]	; (800c3d8 <make_smap+0x290>)
 800c382:	0112      	lsls	r2, r2, #4
 800c384:	4413      	add	r3, r2
 800c386:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800c38a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800c38e:	4293      	cmp	r3, r2
 800c390:	f040 8094 	bne.w	800c4bc <make_smap+0x374>
							smap[y][x+1] = smap[y][x] + turn;	//a次の歩数を書き込む
 800c394:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800c398:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c39c:	490e      	ldr	r1, [pc, #56]	; (800c3d8 <make_smap+0x290>)
 800c39e:	0112      	lsls	r2, r2, #4
 800c3a0:	4413      	add	r3, r2
 800c3a2:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 800c3a6:	697b      	ldr	r3, [r7, #20]
 800c3a8:	b299      	uxth	r1, r3
 800c3aa:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800c3ae:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c3b2:	3301      	adds	r3, #1
 800c3b4:	4401      	add	r1, r0
 800c3b6:	b288      	uxth	r0, r1
 800c3b8:	4907      	ldr	r1, [pc, #28]	; (800c3d8 <make_smap+0x290>)
 800c3ba:	0112      	lsls	r2, r2, #4
 800c3bc:	4413      	add	r3, r2
 800c3be:	4602      	mov	r2, r0
 800c3c0:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
							if(MF.FLAG.STRAIGHT){
 800c3c4:	4b09      	ldr	r3, [pc, #36]	; (800c3ec <make_smap+0x2a4>)
 800c3c6:	881b      	ldrh	r3, [r3, #0]
 800c3c8:	f3c3 2380 	ubfx	r3, r3, #10, #1
 800c3cc:	b2db      	uxtb	r3, r3
 800c3ce:	2b00      	cmp	r3, #0
 800c3d0:	d074      	beq.n	800c4bc <make_smap+0x374>
								//----a直線優先処理----
								for (int k = 1; k < 16 - x; k++) {					//a現在座標から見て東のマスすべてにおいて
 800c3d2:	2301      	movs	r3, #1
 800c3d4:	627b      	str	r3, [r7, #36]	; 0x24
 800c3d6:	e06a      	b.n	800c4ae <make_smap+0x366>
 800c3d8:	20000de4 	.word	0x20000de4
 800c3dc:	200003ce 	.word	0x200003ce
 800c3e0:	20000bcc 	.word	0x20000bcc
 800c3e4:	20000c31 	.word	0x20000c31
 800c3e8:	2000022c 	.word	0x2000022c
 800c3ec:	20000fe8 	.word	0x20000fe8
									m_temp_sample[k] = map[y][x + k];				//map配列からマップデータを取り出す
 800c3f0:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800c3f4:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 800c3f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3fa:	440b      	add	r3, r1
 800c3fc:	499e      	ldr	r1, [pc, #632]	; (800c678 <make_smap+0x530>)
 800c3fe:	0112      	lsls	r2, r2, #4
 800c400:	440a      	add	r2, r1
 800c402:	4413      	add	r3, r2
 800c404:	7819      	ldrb	r1, [r3, #0]
 800c406:	1d3a      	adds	r2, r7, #4
 800c408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c40a:	4413      	add	r3, r2
 800c40c:	460a      	mov	r2, r1
 800c40e:	701a      	strb	r2, [r3, #0]
									if (MF.FLAG.SCND) m_temp_sample[k] >>= 4;		//a二次走行用のマップを作成する場合上位4bitを使うので4bit分右にシフトさせる
 800c410:	4b9a      	ldr	r3, [pc, #616]	; (800c67c <make_smap+0x534>)
 800c412:	881b      	ldrh	r3, [r3, #0]
 800c414:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800c418:	b2db      	uxtb	r3, r3
 800c41a:	2b00      	cmp	r3, #0
 800c41c:	d00a      	beq.n	800c434 <make_smap+0x2ec>
 800c41e:	1d3a      	adds	r2, r7, #4
 800c420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c422:	4413      	add	r3, r2
 800c424:	781b      	ldrb	r3, [r3, #0]
 800c426:	091b      	lsrs	r3, r3, #4
 800c428:	b2d9      	uxtb	r1, r3
 800c42a:	1d3a      	adds	r2, r7, #4
 800c42c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c42e:	4413      	add	r3, r2
 800c430:	460a      	mov	r2, r1
 800c432:	701a      	strb	r2, [r3, #0]
									if (!(m_temp_sample[k] & 0x04) && (x + k) != 0x0f) {		//a東壁がなく現在最東端でないとき
 800c434:	1d3a      	adds	r2, r7, #4
 800c436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c438:	4413      	add	r3, r2
 800c43a:	781b      	ldrb	r3, [r3, #0]
 800c43c:	f003 0304 	and.w	r3, r3, #4
 800c440:	2b00      	cmp	r3, #0
 800c442:	d13b      	bne.n	800c4bc <make_smap+0x374>
 800c444:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800c448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c44a:	4413      	add	r3, r2
 800c44c:	2b0f      	cmp	r3, #15
 800c44e:	d035      	beq.n	800c4bc <make_smap+0x374>
										if (smap[y][x + k + 1] == 0x03e7) {						//a東側が未記入なら
 800c450:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800c454:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 800c458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c45a:	440b      	add	r3, r1
 800c45c:	3301      	adds	r3, #1
 800c45e:	4988      	ldr	r1, [pc, #544]	; (800c680 <make_smap+0x538>)
 800c460:	0112      	lsls	r2, r2, #4
 800c462:	4413      	add	r3, r2
 800c464:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800c468:	f240 32e7 	movw	r2, #999	; 0x3e7
 800c46c:	4293      	cmp	r3, r2
 800c46e:	d11b      	bne.n	800c4a8 <make_smap+0x360>
											smap[y][x + k + 1] = smap[y][x + k] + straight;		//a直線分インクリメントした値を次のマスの歩数マップに書き込む
 800c470:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800c474:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 800c478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c47a:	440b      	add	r3, r1
 800c47c:	4980      	ldr	r1, [pc, #512]	; (800c680 <make_smap+0x538>)
 800c47e:	0112      	lsls	r2, r2, #4
 800c480:	4413      	add	r3, r2
 800c482:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 800c486:	69bb      	ldr	r3, [r7, #24]
 800c488:	b299      	uxth	r1, r3
 800c48a:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800c48e:	f897 402f 	ldrb.w	r4, [r7, #47]	; 0x2f
 800c492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c494:	4423      	add	r3, r4
 800c496:	3301      	adds	r3, #1
 800c498:	4401      	add	r1, r0
 800c49a:	b288      	uxth	r0, r1
 800c49c:	4978      	ldr	r1, [pc, #480]	; (800c680 <make_smap+0x538>)
 800c49e:	0112      	lsls	r2, r2, #4
 800c4a0:	4413      	add	r3, r2
 800c4a2:	4602      	mov	r2, r0
 800c4a4:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
								for (int k = 1; k < 16 - x; k++) {					//a現在座標から見て東のマスすべてにおいて
 800c4a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4aa:	3301      	adds	r3, #1
 800c4ac:	627b      	str	r3, [r7, #36]	; 0x24
 800c4ae:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c4b2:	f1c3 0310 	rsb	r3, r3, #16
 800c4b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c4b8:	429a      	cmp	r2, r3
 800c4ba:	db99      	blt.n	800c3f0 <make_smap+0x2a8>
								}
							}
						}
					}
					//----a南壁についての処理----
					if(!(m_temp & 0x02) && y != 0){			//a南壁がなく現在最南端でないとき
 800c4bc:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800c4c0:	f003 0302 	and.w	r3, r3, #2
 800c4c4:	2b00      	cmp	r3, #0
 800c4c6:	f040 809a 	bne.w	800c5fe <make_smap+0x4b6>
 800c4ca:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800c4ce:	2b00      	cmp	r3, #0
 800c4d0:	f000 8095 	beq.w	800c5fe <make_smap+0x4b6>
						if(smap[y-1][x] == 0x03e7){			//a南側が未記入なら
 800c4d4:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800c4d8:	1e5a      	subs	r2, r3, #1
 800c4da:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c4de:	4968      	ldr	r1, [pc, #416]	; (800c680 <make_smap+0x538>)
 800c4e0:	0112      	lsls	r2, r2, #4
 800c4e2:	4413      	add	r3, r2
 800c4e4:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800c4e8:	f240 32e7 	movw	r2, #999	; 0x3e7
 800c4ec:	4293      	cmp	r3, r2
 800c4ee:	f040 8086 	bne.w	800c5fe <make_smap+0x4b6>
							smap[y-1][x] = smap[y][x] + turn;	//a次の歩数を書き込む
 800c4f2:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800c4f6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c4fa:	4961      	ldr	r1, [pc, #388]	; (800c680 <make_smap+0x538>)
 800c4fc:	0112      	lsls	r2, r2, #4
 800c4fe:	4413      	add	r3, r2
 800c500:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 800c504:	697b      	ldr	r3, [r7, #20]
 800c506:	b299      	uxth	r1, r3
 800c508:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800c50c:	1e5a      	subs	r2, r3, #1
 800c50e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c512:	4401      	add	r1, r0
 800c514:	b288      	uxth	r0, r1
 800c516:	495a      	ldr	r1, [pc, #360]	; (800c680 <make_smap+0x538>)
 800c518:	0112      	lsls	r2, r2, #4
 800c51a:	4413      	add	r3, r2
 800c51c:	4602      	mov	r2, r0
 800c51e:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
							if(MF.FLAG.STRAIGHT){
 800c522:	4b56      	ldr	r3, [pc, #344]	; (800c67c <make_smap+0x534>)
 800c524:	881b      	ldrh	r3, [r3, #0]
 800c526:	f3c3 2380 	ubfx	r3, r3, #10, #1
 800c52a:	b2db      	uxtb	r3, r3
 800c52c:	2b00      	cmp	r3, #0
 800c52e:	d066      	beq.n	800c5fe <make_smap+0x4b6>
								//----a直線優先処理----
								for (int k = 1; k < y; k++) {						//a現在座標から見て南のマスすべてにおいて
 800c530:	2301      	movs	r3, #1
 800c532:	623b      	str	r3, [r7, #32]
 800c534:	e05e      	b.n	800c5f4 <make_smap+0x4ac>
									m_temp_sample[k] = map[y - k][x];				//map配列からマップデータを取り出す
 800c536:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800c53a:	6a3b      	ldr	r3, [r7, #32]
 800c53c:	1ad2      	subs	r2, r2, r3
 800c53e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c542:	494d      	ldr	r1, [pc, #308]	; (800c678 <make_smap+0x530>)
 800c544:	0112      	lsls	r2, r2, #4
 800c546:	440a      	add	r2, r1
 800c548:	4413      	add	r3, r2
 800c54a:	7819      	ldrb	r1, [r3, #0]
 800c54c:	1d3a      	adds	r2, r7, #4
 800c54e:	6a3b      	ldr	r3, [r7, #32]
 800c550:	4413      	add	r3, r2
 800c552:	460a      	mov	r2, r1
 800c554:	701a      	strb	r2, [r3, #0]
									if (MF.FLAG.SCND) m_temp_sample[k] >>= 4;		//a二次走行用のマップを作成する場合上位4bitを使うので4bit分右にシフトさせる
 800c556:	4b49      	ldr	r3, [pc, #292]	; (800c67c <make_smap+0x534>)
 800c558:	881b      	ldrh	r3, [r3, #0]
 800c55a:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800c55e:	b2db      	uxtb	r3, r3
 800c560:	2b00      	cmp	r3, #0
 800c562:	d00a      	beq.n	800c57a <make_smap+0x432>
 800c564:	1d3a      	adds	r2, r7, #4
 800c566:	6a3b      	ldr	r3, [r7, #32]
 800c568:	4413      	add	r3, r2
 800c56a:	781b      	ldrb	r3, [r3, #0]
 800c56c:	091b      	lsrs	r3, r3, #4
 800c56e:	b2d9      	uxtb	r1, r3
 800c570:	1d3a      	adds	r2, r7, #4
 800c572:	6a3b      	ldr	r3, [r7, #32]
 800c574:	4413      	add	r3, r2
 800c576:	460a      	mov	r2, r1
 800c578:	701a      	strb	r2, [r3, #0]
									if (!(m_temp_sample[k] & 0x02) && (y - k) != 0x0f) {		//a南壁がなく現在最南端でないとき
 800c57a:	1d3a      	adds	r2, r7, #4
 800c57c:	6a3b      	ldr	r3, [r7, #32]
 800c57e:	4413      	add	r3, r2
 800c580:	781b      	ldrb	r3, [r3, #0]
 800c582:	f003 0302 	and.w	r3, r3, #2
 800c586:	2b00      	cmp	r3, #0
 800c588:	d139      	bne.n	800c5fe <make_smap+0x4b6>
 800c58a:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800c58e:	6a3b      	ldr	r3, [r7, #32]
 800c590:	1ad3      	subs	r3, r2, r3
 800c592:	2b0f      	cmp	r3, #15
 800c594:	d033      	beq.n	800c5fe <make_smap+0x4b6>
										if (smap[y - k - 1][x] == 0x03e7) {						//a南側が未記入なら
 800c596:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800c59a:	6a3b      	ldr	r3, [r7, #32]
 800c59c:	1ad3      	subs	r3, r2, r3
 800c59e:	1e5a      	subs	r2, r3, #1
 800c5a0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c5a4:	4936      	ldr	r1, [pc, #216]	; (800c680 <make_smap+0x538>)
 800c5a6:	0112      	lsls	r2, r2, #4
 800c5a8:	4413      	add	r3, r2
 800c5aa:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800c5ae:	f240 32e7 	movw	r2, #999	; 0x3e7
 800c5b2:	4293      	cmp	r3, r2
 800c5b4:	d11b      	bne.n	800c5ee <make_smap+0x4a6>
											smap[y - k - 1][x] = smap[y - k][x] + straight;		//a直線分インクリメントした値を次のマスの歩数マップに書き込む
 800c5b6:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800c5ba:	6a3b      	ldr	r3, [r7, #32]
 800c5bc:	1ad2      	subs	r2, r2, r3
 800c5be:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c5c2:	492f      	ldr	r1, [pc, #188]	; (800c680 <make_smap+0x538>)
 800c5c4:	0112      	lsls	r2, r2, #4
 800c5c6:	4413      	add	r3, r2
 800c5c8:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 800c5cc:	69bb      	ldr	r3, [r7, #24]
 800c5ce:	b299      	uxth	r1, r3
 800c5d0:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800c5d4:	6a3b      	ldr	r3, [r7, #32]
 800c5d6:	1ad3      	subs	r3, r2, r3
 800c5d8:	1e5a      	subs	r2, r3, #1
 800c5da:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c5de:	4401      	add	r1, r0
 800c5e0:	b288      	uxth	r0, r1
 800c5e2:	4927      	ldr	r1, [pc, #156]	; (800c680 <make_smap+0x538>)
 800c5e4:	0112      	lsls	r2, r2, #4
 800c5e6:	4413      	add	r3, r2
 800c5e8:	4602      	mov	r2, r0
 800c5ea:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
								for (int k = 1; k < y; k++) {						//a現在座標から見て南のマスすべてにおいて
 800c5ee:	6a3b      	ldr	r3, [r7, #32]
 800c5f0:	3301      	adds	r3, #1
 800c5f2:	623b      	str	r3, [r7, #32]
 800c5f4:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800c5f8:	6a3a      	ldr	r2, [r7, #32]
 800c5fa:	429a      	cmp	r2, r3
 800c5fc:	db9b      	blt.n	800c536 <make_smap+0x3ee>
								}
							}
						}
					}
					//----a西壁についての処理----
					if(!(m_temp & 0x01) && x != 0){			//a西壁がなく現在最西端でないとき
 800c5fe:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800c602:	f003 0301 	and.w	r3, r3, #1
 800c606:	2b00      	cmp	r3, #0
 800c608:	f040 80a0 	bne.w	800c74c <make_smap+0x604>
 800c60c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c610:	2b00      	cmp	r3, #0
 800c612:	f000 809b 	beq.w	800c74c <make_smap+0x604>
						if(smap[y][x-1] == 0x03e7){			//a西側が未記入なら
 800c616:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800c61a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c61e:	3b01      	subs	r3, #1
 800c620:	4917      	ldr	r1, [pc, #92]	; (800c680 <make_smap+0x538>)
 800c622:	0112      	lsls	r2, r2, #4
 800c624:	4413      	add	r3, r2
 800c626:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800c62a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800c62e:	4293      	cmp	r3, r2
 800c630:	f040 808c 	bne.w	800c74c <make_smap+0x604>
							smap[y][x-1] = smap[y][x] + turn;	//a次の歩数を書き込む
 800c634:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800c638:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c63c:	4910      	ldr	r1, [pc, #64]	; (800c680 <make_smap+0x538>)
 800c63e:	0112      	lsls	r2, r2, #4
 800c640:	4413      	add	r3, r2
 800c642:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 800c646:	697b      	ldr	r3, [r7, #20]
 800c648:	b299      	uxth	r1, r3
 800c64a:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800c64e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c652:	3b01      	subs	r3, #1
 800c654:	4401      	add	r1, r0
 800c656:	b288      	uxth	r0, r1
 800c658:	4909      	ldr	r1, [pc, #36]	; (800c680 <make_smap+0x538>)
 800c65a:	0112      	lsls	r2, r2, #4
 800c65c:	4413      	add	r3, r2
 800c65e:	4602      	mov	r2, r0
 800c660:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
							if(MF.FLAG.STRAIGHT){
 800c664:	4b05      	ldr	r3, [pc, #20]	; (800c67c <make_smap+0x534>)
 800c666:	881b      	ldrh	r3, [r3, #0]
 800c668:	f3c3 2380 	ubfx	r3, r3, #10, #1
 800c66c:	b2db      	uxtb	r3, r3
 800c66e:	2b00      	cmp	r3, #0
 800c670:	d06c      	beq.n	800c74c <make_smap+0x604>
								//----a直線優先処理----
								for (int k = 1; k < x; k++) {						//a現在座標から見て西のマスすべてにおいて
 800c672:	2301      	movs	r3, #1
 800c674:	61fb      	str	r3, [r7, #28]
 800c676:	e064      	b.n	800c742 <make_smap+0x5fa>
 800c678:	2000022c 	.word	0x2000022c
 800c67c:	20000fe8 	.word	0x20000fe8
 800c680:	20000de4 	.word	0x20000de4
									m_temp_sample[k] = map[y][x - k];				//map配列からマップデータを取り出す
 800c684:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800c688:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 800c68c:	69fb      	ldr	r3, [r7, #28]
 800c68e:	1acb      	subs	r3, r1, r3
 800c690:	4947      	ldr	r1, [pc, #284]	; (800c7b0 <make_smap+0x668>)
 800c692:	0112      	lsls	r2, r2, #4
 800c694:	440a      	add	r2, r1
 800c696:	4413      	add	r3, r2
 800c698:	7819      	ldrb	r1, [r3, #0]
 800c69a:	1d3a      	adds	r2, r7, #4
 800c69c:	69fb      	ldr	r3, [r7, #28]
 800c69e:	4413      	add	r3, r2
 800c6a0:	460a      	mov	r2, r1
 800c6a2:	701a      	strb	r2, [r3, #0]
									if (MF.FLAG.SCND) m_temp_sample[k] >>= 4;		//a二次走行用のマップを作成する場合上位4bitを使うので4bit分右にシフトさせる
 800c6a4:	4b43      	ldr	r3, [pc, #268]	; (800c7b4 <make_smap+0x66c>)
 800c6a6:	881b      	ldrh	r3, [r3, #0]
 800c6a8:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800c6ac:	b2db      	uxtb	r3, r3
 800c6ae:	2b00      	cmp	r3, #0
 800c6b0:	d00a      	beq.n	800c6c8 <make_smap+0x580>
 800c6b2:	1d3a      	adds	r2, r7, #4
 800c6b4:	69fb      	ldr	r3, [r7, #28]
 800c6b6:	4413      	add	r3, r2
 800c6b8:	781b      	ldrb	r3, [r3, #0]
 800c6ba:	091b      	lsrs	r3, r3, #4
 800c6bc:	b2d9      	uxtb	r1, r3
 800c6be:	1d3a      	adds	r2, r7, #4
 800c6c0:	69fb      	ldr	r3, [r7, #28]
 800c6c2:	4413      	add	r3, r2
 800c6c4:	460a      	mov	r2, r1
 800c6c6:	701a      	strb	r2, [r3, #0]
									if (!(m_temp_sample[k] & 0x01) && (x - k) != 0x0f) {		//a西壁がなく現在最西端でないとき
 800c6c8:	1d3a      	adds	r2, r7, #4
 800c6ca:	69fb      	ldr	r3, [r7, #28]
 800c6cc:	4413      	add	r3, r2
 800c6ce:	781b      	ldrb	r3, [r3, #0]
 800c6d0:	f003 0301 	and.w	r3, r3, #1
 800c6d4:	2b00      	cmp	r3, #0
 800c6d6:	d139      	bne.n	800c74c <make_smap+0x604>
 800c6d8:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800c6dc:	69fb      	ldr	r3, [r7, #28]
 800c6de:	1ad3      	subs	r3, r2, r3
 800c6e0:	2b0f      	cmp	r3, #15
 800c6e2:	d033      	beq.n	800c74c <make_smap+0x604>
										if (smap[y][x - k - 1] == 0x03e7) {						//a西側が未記入なら
 800c6e4:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800c6e8:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 800c6ec:	69fb      	ldr	r3, [r7, #28]
 800c6ee:	1acb      	subs	r3, r1, r3
 800c6f0:	3b01      	subs	r3, #1
 800c6f2:	4931      	ldr	r1, [pc, #196]	; (800c7b8 <make_smap+0x670>)
 800c6f4:	0112      	lsls	r2, r2, #4
 800c6f6:	4413      	add	r3, r2
 800c6f8:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800c6fc:	f240 32e7 	movw	r2, #999	; 0x3e7
 800c700:	4293      	cmp	r3, r2
 800c702:	d11b      	bne.n	800c73c <make_smap+0x5f4>
											smap[y][x - k - 1] = smap[y][x - k] + straight;		//a直線分インクリメントした値を次のマスの歩数マップに書き込む
 800c704:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800c708:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 800c70c:	69fb      	ldr	r3, [r7, #28]
 800c70e:	1acb      	subs	r3, r1, r3
 800c710:	4929      	ldr	r1, [pc, #164]	; (800c7b8 <make_smap+0x670>)
 800c712:	0112      	lsls	r2, r2, #4
 800c714:	4413      	add	r3, r2
 800c716:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 800c71a:	69bb      	ldr	r3, [r7, #24]
 800c71c:	b299      	uxth	r1, r3
 800c71e:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800c722:	f897 402f 	ldrb.w	r4, [r7, #47]	; 0x2f
 800c726:	69fb      	ldr	r3, [r7, #28]
 800c728:	1ae3      	subs	r3, r4, r3
 800c72a:	3b01      	subs	r3, #1
 800c72c:	4401      	add	r1, r0
 800c72e:	b288      	uxth	r0, r1
 800c730:	4921      	ldr	r1, [pc, #132]	; (800c7b8 <make_smap+0x670>)
 800c732:	0112      	lsls	r2, r2, #4
 800c734:	4413      	add	r3, r2
 800c736:	4602      	mov	r2, r0
 800c738:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
								for (int k = 1; k < x; k++) {						//a現在座標から見て西のマスすべてにおいて
 800c73c:	69fb      	ldr	r3, [r7, #28]
 800c73e:	3301      	adds	r3, #1
 800c740:	61fb      	str	r3, [r7, #28]
 800c742:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c746:	69fa      	ldr	r2, [r7, #28]
 800c748:	429a      	cmp	r2, r3
 800c74a:	db9b      	blt.n	800c684 <make_smap+0x53c>
			for(x = 0; x <= 15; x++){						//a各X座標で実行
 800c74c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c750:	3301      	adds	r3, #1
 800c752:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800c756:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c75a:	2b0f      	cmp	r3, #15
 800c75c:	f67f ad37 	bls.w	800c1ce <make_smap+0x86>
		for(y = 0; y <= 15; y++){							//a各Y座標で実行
 800c760:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800c764:	3301      	adds	r3, #1
 800c766:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 800c76a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800c76e:	2b0f      	cmp	r3, #15
 800c770:	f67f ad29 	bls.w	800c1c6 <make_smap+0x7e>
					}
				}
			}
		}
		//====a歩数カウンタのインクリメント====
		m_step++;
 800c774:	4b11      	ldr	r3, [pc, #68]	; (800c7bc <make_smap+0x674>)
 800c776:	881b      	ldrh	r3, [r3, #0]
 800c778:	3301      	adds	r3, #1
 800c77a:	b29a      	uxth	r2, r3
 800c77c:	4b0f      	ldr	r3, [pc, #60]	; (800c7bc <make_smap+0x674>)
 800c77e:	801a      	strh	r2, [r3, #0]
	}while(smap[mouse.y][mouse.x] == 0x03e7);					//a現在座標が未記入ではなくなるまで実行
 800c780:	4b0f      	ldr	r3, [pc, #60]	; (800c7c0 <make_smap+0x678>)
 800c782:	785b      	ldrb	r3, [r3, #1]
 800c784:	b2db      	uxtb	r3, r3
 800c786:	4618      	mov	r0, r3
 800c788:	4b0d      	ldr	r3, [pc, #52]	; (800c7c0 <make_smap+0x678>)
 800c78a:	781b      	ldrb	r3, [r3, #0]
 800c78c:	b2db      	uxtb	r3, r3
 800c78e:	4619      	mov	r1, r3
 800c790:	4a09      	ldr	r2, [pc, #36]	; (800c7b8 <make_smap+0x670>)
 800c792:	0103      	lsls	r3, r0, #4
 800c794:	440b      	add	r3, r1
 800c796:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c79a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800c79e:	4293      	cmp	r3, r2
 800c7a0:	f43f ad0d 	beq.w	800c1be <make_smap+0x76>
}
 800c7a4:	bf00      	nop
 800c7a6:	3730      	adds	r7, #48	; 0x30
 800c7a8:	46bd      	mov	sp, r7
 800c7aa:	bc90      	pop	{r4, r7}
 800c7ac:	4770      	bx	lr
 800c7ae:	bf00      	nop
 800c7b0:	2000022c 	.word	0x2000022c
 800c7b4:	20000fe8 	.word	0x20000fe8
 800c7b8:	20000de4 	.word	0x20000de4
 800c7bc:	200003ce 	.word	0x200003ce
 800c7c0:	20000c90 	.word	0x20000c90

0800c7c4 <make_route>:
//make_route
//a最短経路を導出する
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void make_route(){
 800c7c4:	b580      	push	{r7, lr}
 800c7c6:	b082      	sub	sp, #8
 800c7c8:	af00      	add	r7, sp, #0

	//====a変数宣言====
	uint8_t x, y;												//X，Y座標
	uint8_t dir_temp =  mouse.dir;								//aマウスの方角を表すmouse.dirの値をdir_temp変数に退避させる
 800c7ca:	4b92      	ldr	r3, [pc, #584]	; (800ca14 <make_route+0x250>)
 800c7cc:	789b      	ldrb	r3, [r3, #2]
 800c7ce:	703b      	strb	r3, [r7, #0]

	//====a最短経路を初期化====
	uint16_t i;
	for(i = 0; i < 256; i++){
 800c7d0:	2300      	movs	r3, #0
 800c7d2:	80bb      	strh	r3, [r7, #4]
 800c7d4:	e006      	b.n	800c7e4 <make_route+0x20>
		route[i] = 0xff;										//routeを0xffで初期化
 800c7d6:	88bb      	ldrh	r3, [r7, #4]
 800c7d8:	4a8f      	ldr	r2, [pc, #572]	; (800ca18 <make_route+0x254>)
 800c7da:	21ff      	movs	r1, #255	; 0xff
 800c7dc:	54d1      	strb	r1, [r2, r3]
	for(i = 0; i < 256; i++){
 800c7de:	88bb      	ldrh	r3, [r7, #4]
 800c7e0:	3301      	adds	r3, #1
 800c7e2:	80bb      	strh	r3, [r7, #4]
 800c7e4:	88bb      	ldrh	r3, [r7, #4]
 800c7e6:	2bff      	cmp	r3, #255	; 0xff
 800c7e8:	d9f5      	bls.n	800c7d6 <make_route+0x12>
	}

	//====a歩数カウンタをセット====
	uint16_t m_step = smap[mouse.y][mouse.x];					//a現在座標の歩数マップ値を取得
 800c7ea:	4b8a      	ldr	r3, [pc, #552]	; (800ca14 <make_route+0x250>)
 800c7ec:	785b      	ldrb	r3, [r3, #1]
 800c7ee:	b2db      	uxtb	r3, r3
 800c7f0:	4618      	mov	r0, r3
 800c7f2:	4b88      	ldr	r3, [pc, #544]	; (800ca14 <make_route+0x250>)
 800c7f4:	781b      	ldrb	r3, [r3, #0]
 800c7f6:	b2db      	uxtb	r3, r3
 800c7f8:	4619      	mov	r1, r3
 800c7fa:	4a88      	ldr	r2, [pc, #544]	; (800ca1c <make_route+0x258>)
 800c7fc:	0103      	lsls	r3, r0, #4
 800c7fe:	440b      	add	r3, r1
 800c800:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c804:	807b      	strh	r3, [r7, #2]

	//====x, yに現在座標を書き込み====
	x = mouse.x;
 800c806:	4b83      	ldr	r3, [pc, #524]	; (800ca14 <make_route+0x250>)
 800c808:	781b      	ldrb	r3, [r3, #0]
 800c80a:	71fb      	strb	r3, [r7, #7]
	y = mouse.y;
 800c80c:	4b81      	ldr	r3, [pc, #516]	; (800ca14 <make_route+0x250>)
 800c80e:	785b      	ldrb	r3, [r3, #1]
 800c810:	71bb      	strb	r3, [r7, #6]

	//====a最短経路を導出====
	i = 0;
 800c812:	2300      	movs	r3, #0
 800c814:	80bb      	strh	r3, [r7, #4]
	do{
		uint8_t m_temp = map[y][x];								//a比較用マップ情報の格納
 800c816:	79ba      	ldrb	r2, [r7, #6]
 800c818:	79fb      	ldrb	r3, [r7, #7]
 800c81a:	4981      	ldr	r1, [pc, #516]	; (800ca20 <make_route+0x25c>)
 800c81c:	0112      	lsls	r2, r2, #4
 800c81e:	440a      	add	r2, r1
 800c820:	4413      	add	r3, r2
 800c822:	781b      	ldrb	r3, [r3, #0]
 800c824:	707b      	strb	r3, [r7, #1]
		if(MF.FLAG.SCND){										//a二次走行用のマップを作成する場合（二次走行時はMF.FLAG.SCNDが立っている）
 800c826:	4b7f      	ldr	r3, [pc, #508]	; (800ca24 <make_route+0x260>)
 800c828:	881b      	ldrh	r3, [r3, #0]
 800c82a:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800c82e:	b2db      	uxtb	r3, r3
 800c830:	2b00      	cmp	r3, #0
 800c832:	d002      	beq.n	800c83a <make_route+0x76>
			m_temp >>= 4;										//a上位4bitを使うので4bit分右にシフトさせる
 800c834:	787b      	ldrb	r3, [r7, #1]
 800c836:	091b      	lsrs	r3, r3, #4
 800c838:	707b      	strb	r3, [r7, #1]
		}
		//----a北を見る----
		if(!(m_temp & 0x08) && (smap[y+1][x] < m_step)){		//a北側に壁が無く、現在地より小さい歩数マップ値であれば
 800c83a:	787b      	ldrb	r3, [r7, #1]
 800c83c:	f003 0308 	and.w	r3, r3, #8
 800c840:	2b00      	cmp	r3, #0
 800c842:	d122      	bne.n	800c88a <make_route+0xc6>
 800c844:	79bb      	ldrb	r3, [r7, #6]
 800c846:	1c5a      	adds	r2, r3, #1
 800c848:	79fb      	ldrb	r3, [r7, #7]
 800c84a:	4974      	ldr	r1, [pc, #464]	; (800ca1c <make_route+0x258>)
 800c84c:	0112      	lsls	r2, r2, #4
 800c84e:	4413      	add	r3, r2
 800c850:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800c854:	887a      	ldrh	r2, [r7, #2]
 800c856:	429a      	cmp	r2, r3
 800c858:	d917      	bls.n	800c88a <make_route+0xc6>
			route[i] = (0x00 - mouse.dir) & 0x03;				//route配列に進行方向を記録
 800c85a:	4b6e      	ldr	r3, [pc, #440]	; (800ca14 <make_route+0x250>)
 800c85c:	789b      	ldrb	r3, [r3, #2]
 800c85e:	b2db      	uxtb	r3, r3
 800c860:	425b      	negs	r3, r3
 800c862:	b2da      	uxtb	r2, r3
 800c864:	88bb      	ldrh	r3, [r7, #4]
 800c866:	f002 0203 	and.w	r2, r2, #3
 800c86a:	b2d1      	uxtb	r1, r2
 800c86c:	4a6a      	ldr	r2, [pc, #424]	; (800ca18 <make_route+0x254>)
 800c86e:	54d1      	strb	r1, [r2, r3]
			m_step = smap[y+1][x];								//a最大歩数マップ値を更新
 800c870:	79bb      	ldrb	r3, [r7, #6]
 800c872:	1c5a      	adds	r2, r3, #1
 800c874:	79fb      	ldrb	r3, [r7, #7]
 800c876:	4969      	ldr	r1, [pc, #420]	; (800ca1c <make_route+0x258>)
 800c878:	0112      	lsls	r2, r2, #4
 800c87a:	4413      	add	r3, r2
 800c87c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800c880:	807b      	strh	r3, [r7, #2]
			y++;												//a北に進んだのでY座標をインクリメント
 800c882:	79bb      	ldrb	r3, [r7, #6]
 800c884:	3301      	adds	r3, #1
 800c886:	71bb      	strb	r3, [r7, #6]
 800c888:	e079      	b.n	800c97e <make_route+0x1ba>
		}
		//----a東を見る----
		else if(!(m_temp & 0x04) && (smap[y][x+1] < m_step)){	//a東側に壁が無く、現在地より小さい歩数マップ値であれば
 800c88a:	787b      	ldrb	r3, [r7, #1]
 800c88c:	f003 0304 	and.w	r3, r3, #4
 800c890:	2b00      	cmp	r3, #0
 800c892:	d123      	bne.n	800c8dc <make_route+0x118>
 800c894:	79ba      	ldrb	r2, [r7, #6]
 800c896:	79fb      	ldrb	r3, [r7, #7]
 800c898:	3301      	adds	r3, #1
 800c89a:	4960      	ldr	r1, [pc, #384]	; (800ca1c <make_route+0x258>)
 800c89c:	0112      	lsls	r2, r2, #4
 800c89e:	4413      	add	r3, r2
 800c8a0:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800c8a4:	887a      	ldrh	r2, [r7, #2]
 800c8a6:	429a      	cmp	r2, r3
 800c8a8:	d918      	bls.n	800c8dc <make_route+0x118>
			route[i] = (0x01 - mouse.dir) & 0x03;				//route配列に進行方向を記録
 800c8aa:	4b5a      	ldr	r3, [pc, #360]	; (800ca14 <make_route+0x250>)
 800c8ac:	789b      	ldrb	r3, [r3, #2]
 800c8ae:	b2db      	uxtb	r3, r3
 800c8b0:	f1c3 0301 	rsb	r3, r3, #1
 800c8b4:	b2da      	uxtb	r2, r3
 800c8b6:	88bb      	ldrh	r3, [r7, #4]
 800c8b8:	f002 0203 	and.w	r2, r2, #3
 800c8bc:	b2d1      	uxtb	r1, r2
 800c8be:	4a56      	ldr	r2, [pc, #344]	; (800ca18 <make_route+0x254>)
 800c8c0:	54d1      	strb	r1, [r2, r3]
			m_step = smap[y][x+1];								//a最大歩数マップ値を更新
 800c8c2:	79ba      	ldrb	r2, [r7, #6]
 800c8c4:	79fb      	ldrb	r3, [r7, #7]
 800c8c6:	3301      	adds	r3, #1
 800c8c8:	4954      	ldr	r1, [pc, #336]	; (800ca1c <make_route+0x258>)
 800c8ca:	0112      	lsls	r2, r2, #4
 800c8cc:	4413      	add	r3, r2
 800c8ce:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800c8d2:	807b      	strh	r3, [r7, #2]
			x++;												//a東に進んだのでX座標をインクリメント
 800c8d4:	79fb      	ldrb	r3, [r7, #7]
 800c8d6:	3301      	adds	r3, #1
 800c8d8:	71fb      	strb	r3, [r7, #7]
 800c8da:	e050      	b.n	800c97e <make_route+0x1ba>
		}
		//----a南を見る----
		else if(!(m_temp & 0x02) && (smap[y-1][x] < m_step)){	//a南側に壁が無く、現在地より小さい歩数マップ値であれば
 800c8dc:	787b      	ldrb	r3, [r7, #1]
 800c8de:	f003 0302 	and.w	r3, r3, #2
 800c8e2:	2b00      	cmp	r3, #0
 800c8e4:	d123      	bne.n	800c92e <make_route+0x16a>
 800c8e6:	79bb      	ldrb	r3, [r7, #6]
 800c8e8:	1e5a      	subs	r2, r3, #1
 800c8ea:	79fb      	ldrb	r3, [r7, #7]
 800c8ec:	494b      	ldr	r1, [pc, #300]	; (800ca1c <make_route+0x258>)
 800c8ee:	0112      	lsls	r2, r2, #4
 800c8f0:	4413      	add	r3, r2
 800c8f2:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800c8f6:	887a      	ldrh	r2, [r7, #2]
 800c8f8:	429a      	cmp	r2, r3
 800c8fa:	d918      	bls.n	800c92e <make_route+0x16a>
			route[i] = (0x02 - mouse.dir) & 0x03;				//route配列に進行方向を記録
 800c8fc:	4b45      	ldr	r3, [pc, #276]	; (800ca14 <make_route+0x250>)
 800c8fe:	789b      	ldrb	r3, [r3, #2]
 800c900:	b2db      	uxtb	r3, r3
 800c902:	f1c3 0302 	rsb	r3, r3, #2
 800c906:	b2da      	uxtb	r2, r3
 800c908:	88bb      	ldrh	r3, [r7, #4]
 800c90a:	f002 0203 	and.w	r2, r2, #3
 800c90e:	b2d1      	uxtb	r1, r2
 800c910:	4a41      	ldr	r2, [pc, #260]	; (800ca18 <make_route+0x254>)
 800c912:	54d1      	strb	r1, [r2, r3]
			m_step = smap[y-1][x];								//a最大歩数マップ値を更新
 800c914:	79bb      	ldrb	r3, [r7, #6]
 800c916:	1e5a      	subs	r2, r3, #1
 800c918:	79fb      	ldrb	r3, [r7, #7]
 800c91a:	4940      	ldr	r1, [pc, #256]	; (800ca1c <make_route+0x258>)
 800c91c:	0112      	lsls	r2, r2, #4
 800c91e:	4413      	add	r3, r2
 800c920:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800c924:	807b      	strh	r3, [r7, #2]
			y--;												//a南に進んだのでY座標をデクリメント
 800c926:	79bb      	ldrb	r3, [r7, #6]
 800c928:	3b01      	subs	r3, #1
 800c92a:	71bb      	strb	r3, [r7, #6]
 800c92c:	e027      	b.n	800c97e <make_route+0x1ba>
		}
		//----a西を見る----
		else if(!(m_temp & 0x01) && (smap[y][x-1] < m_step)){	//a西側に壁が無く、現在地より小さい歩数マップ値であれば
 800c92e:	787b      	ldrb	r3, [r7, #1]
 800c930:	f003 0301 	and.w	r3, r3, #1
 800c934:	2b00      	cmp	r3, #0
 800c936:	d122      	bne.n	800c97e <make_route+0x1ba>
 800c938:	79ba      	ldrb	r2, [r7, #6]
 800c93a:	79fb      	ldrb	r3, [r7, #7]
 800c93c:	3b01      	subs	r3, #1
 800c93e:	4937      	ldr	r1, [pc, #220]	; (800ca1c <make_route+0x258>)
 800c940:	0112      	lsls	r2, r2, #4
 800c942:	4413      	add	r3, r2
 800c944:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800c948:	887a      	ldrh	r2, [r7, #2]
 800c94a:	429a      	cmp	r2, r3
 800c94c:	d917      	bls.n	800c97e <make_route+0x1ba>
			route[i] = (0x03 - mouse.dir) & 0x03;				//route配列に進行方向を記録
 800c94e:	4b31      	ldr	r3, [pc, #196]	; (800ca14 <make_route+0x250>)
 800c950:	789b      	ldrb	r3, [r3, #2]
 800c952:	b2db      	uxtb	r3, r3
 800c954:	f1c3 0303 	rsb	r3, r3, #3
 800c958:	b2da      	uxtb	r2, r3
 800c95a:	88bb      	ldrh	r3, [r7, #4]
 800c95c:	f002 0203 	and.w	r2, r2, #3
 800c960:	b2d1      	uxtb	r1, r2
 800c962:	4a2d      	ldr	r2, [pc, #180]	; (800ca18 <make_route+0x254>)
 800c964:	54d1      	strb	r1, [r2, r3]
			m_step = smap[y][x-1];								//a最大歩数マップ値を更新
 800c966:	79ba      	ldrb	r2, [r7, #6]
 800c968:	79fb      	ldrb	r3, [r7, #7]
 800c96a:	3b01      	subs	r3, #1
 800c96c:	492b      	ldr	r1, [pc, #172]	; (800ca1c <make_route+0x258>)
 800c96e:	0112      	lsls	r2, r2, #4
 800c970:	4413      	add	r3, r2
 800c972:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800c976:	807b      	strh	r3, [r7, #2]
			x--;												//a西に進んだのでX座標をデクリメント
 800c978:	79fb      	ldrb	r3, [r7, #7]
 800c97a:	3b01      	subs	r3, #1
 800c97c:	71fb      	strb	r3, [r7, #7]
				y--;												//a南に進んだのでY座標をデクリメント
			}*/

		}
		//----a格納データ形式変更----
		switch(route[i]){										//route配列に格納した要素値で分岐
 800c97e:	88bb      	ldrh	r3, [r7, #4]
 800c980:	4a25      	ldr	r2, [pc, #148]	; (800ca18 <make_route+0x254>)
 800c982:	5cd3      	ldrb	r3, [r2, r3]
 800c984:	2b03      	cmp	r3, #3
 800c986:	d82b      	bhi.n	800c9e0 <make_route+0x21c>
 800c988:	a201      	add	r2, pc, #4	; (adr r2, 800c990 <make_route+0x1cc>)
 800c98a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c98e:	bf00      	nop
 800c990:	0800c9a1 	.word	0x0800c9a1
 800c994:	0800c9ab 	.word	0x0800c9ab
 800c998:	0800c9bd 	.word	0x0800c9bd
 800c99c:	0800c9cf 	.word	0x0800c9cf
		case 0x00:												//a前進する場合
			route[i] = 0x88;									//a格納データ形式を変更
 800c9a0:	88bb      	ldrh	r3, [r7, #4]
 800c9a2:	4a1d      	ldr	r2, [pc, #116]	; (800ca18 <make_route+0x254>)
 800c9a4:	2188      	movs	r1, #136	; 0x88
 800c9a6:	54d1      	strb	r1, [r2, r3]
			break;
 800c9a8:	e01f      	b.n	800c9ea <make_route+0x226>
		case 0x01:												//a右折する場合
			turn_dir(DIR_TURN_R90, 0);								//a内部情報の方向を90度右回転
 800c9aa:	2100      	movs	r1, #0
 800c9ac:	2001      	movs	r0, #1
 800c9ae:	f7ff fb63 	bl	800c078 <turn_dir>
			route[i] = 0x44;									//a格納データ形式を変更
 800c9b2:	88bb      	ldrh	r3, [r7, #4]
 800c9b4:	4a18      	ldr	r2, [pc, #96]	; (800ca18 <make_route+0x254>)
 800c9b6:	2144      	movs	r1, #68	; 0x44
 800c9b8:	54d1      	strb	r1, [r2, r3]
			break;
 800c9ba:	e016      	b.n	800c9ea <make_route+0x226>
		case 0x02:												//Uターンする場合
			turn_dir(DIR_TURN_180, 0);								//a内部情報の方向を180度回転
 800c9bc:	2100      	movs	r1, #0
 800c9be:	2002      	movs	r0, #2
 800c9c0:	f7ff fb5a 	bl	800c078 <turn_dir>
			route[i] = 0x22;									//a格納データ形式を変更
 800c9c4:	88bb      	ldrh	r3, [r7, #4]
 800c9c6:	4a14      	ldr	r2, [pc, #80]	; (800ca18 <make_route+0x254>)
 800c9c8:	2122      	movs	r1, #34	; 0x22
 800c9ca:	54d1      	strb	r1, [r2, r3]
			break;
 800c9cc:	e00d      	b.n	800c9ea <make_route+0x226>
		case 0x03:												//a左折する場合
			turn_dir(DIR_TURN_L90, 0);								//a内部情報の方向を90度左回転
 800c9ce:	2100      	movs	r1, #0
 800c9d0:	20ff      	movs	r0, #255	; 0xff
 800c9d2:	f7ff fb51 	bl	800c078 <turn_dir>
			route[i] = 0x11;									//a格納データ形式を変更
 800c9d6:	88bb      	ldrh	r3, [r7, #4]
 800c9d8:	4a0f      	ldr	r2, [pc, #60]	; (800ca18 <make_route+0x254>)
 800c9da:	2111      	movs	r1, #17
 800c9dc:	54d1      	strb	r1, [r2, r3]
			break;
 800c9de:	e004      	b.n	800c9ea <make_route+0x226>
		default:												//aそれ以外の場合
			route[i] = 0x00;									//a格納データ形式を変更
 800c9e0:	88bb      	ldrh	r3, [r7, #4]
 800c9e2:	4a0d      	ldr	r2, [pc, #52]	; (800ca18 <make_route+0x254>)
 800c9e4:	2100      	movs	r1, #0
 800c9e6:	54d1      	strb	r1, [r2, r3]
			break;
 800c9e8:	bf00      	nop
		}
		i++;													//aカウンタをインクリメント
 800c9ea:	88bb      	ldrh	r3, [r7, #4]
 800c9ec:	3301      	adds	r3, #1
 800c9ee:	80bb      	strh	r3, [r7, #4]
	}while(smap[y][x] != 0);									//a進んだ先の歩数マップ値が0（=ゴール）になるまで実行
 800c9f0:	79ba      	ldrb	r2, [r7, #6]
 800c9f2:	79fb      	ldrb	r3, [r7, #7]
 800c9f4:	4909      	ldr	r1, [pc, #36]	; (800ca1c <make_route+0x258>)
 800c9f6:	0112      	lsls	r2, r2, #4
 800c9f8:	4413      	add	r3, r2
 800c9fa:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800c9fe:	2b00      	cmp	r3, #0
 800ca00:	f47f af09 	bne.w	800c816 <make_route+0x52>
	mouse.dir = dir_temp;										//dir_tempに退避させた値をmouse.dirにリストア
 800ca04:	4a03      	ldr	r2, [pc, #12]	; (800ca14 <make_route+0x250>)
 800ca06:	783b      	ldrb	r3, [r7, #0]
 800ca08:	7093      	strb	r3, [r2, #2]
}
 800ca0a:	bf00      	nop
 800ca0c:	3708      	adds	r7, #8
 800ca0e:	46bd      	mov	sp, r7
 800ca10:	bd80      	pop	{r7, pc}
 800ca12:	bf00      	nop
 800ca14:	20000c90 	.word	0x20000c90
 800ca18:	20000cd8 	.word	0x20000cd8
 800ca1c:	20000de4 	.word	0x20000de4
 800ca20:	2000022c 	.word	0x2000022c
 800ca24:	20000fe8 	.word	0x20000fe8

0800ca28 <find_pregoal>:
//	未探索壁を含む＆現在座標から最も近いマス(=仮goal)を探す
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void find_pregoal()
{
 800ca28:	b480      	push	{r7}
 800ca2a:	b085      	sub	sp, #20
 800ca2c:	af00      	add	r7, sp, #0
	//====変数宣言====
	uint8_t x, y;															//for文用変数
	uint8_t m_temp;															//マップデータ一時保持
	//uint8_t m_temp_sample[16];
	uint8_t break_flag = 0;													//未知壁マスを見つけた時のループ脱出フラグ
 800ca2e:	2300      	movs	r3, #0
 800ca30:	737b      	strb	r3, [r7, #13]

	//====歩数マップのクリア====
	for (y = 0; y <= 0x0f; y++) {											//各Y座標で実行
 800ca32:	2300      	movs	r3, #0
 800ca34:	73bb      	strb	r3, [r7, #14]
 800ca36:	e014      	b.n	800ca62 <find_pregoal+0x3a>
		for (x = 0; x <= 0x0f; x++) {										//各X座標で実行
 800ca38:	2300      	movs	r3, #0
 800ca3a:	73fb      	strb	r3, [r7, #15]
 800ca3c:	e00b      	b.n	800ca56 <find_pregoal+0x2e>
			smap[y][x] = 0x03e7;											//未記入部分は歩数最大とする
 800ca3e:	7bba      	ldrb	r2, [r7, #14]
 800ca40:	7bfb      	ldrb	r3, [r7, #15]
 800ca42:	499f      	ldr	r1, [pc, #636]	; (800ccc0 <find_pregoal+0x298>)
 800ca44:	0112      	lsls	r2, r2, #4
 800ca46:	4413      	add	r3, r2
 800ca48:	f240 32e7 	movw	r2, #999	; 0x3e7
 800ca4c:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for (x = 0; x <= 0x0f; x++) {										//各X座標で実行
 800ca50:	7bfb      	ldrb	r3, [r7, #15]
 800ca52:	3301      	adds	r3, #1
 800ca54:	73fb      	strb	r3, [r7, #15]
 800ca56:	7bfb      	ldrb	r3, [r7, #15]
 800ca58:	2b0f      	cmp	r3, #15
 800ca5a:	d9f0      	bls.n	800ca3e <find_pregoal+0x16>
	for (y = 0; y <= 0x0f; y++) {											//各Y座標で実行
 800ca5c:	7bbb      	ldrb	r3, [r7, #14]
 800ca5e:	3301      	adds	r3, #1
 800ca60:	73bb      	strb	r3, [r7, #14]
 800ca62:	7bbb      	ldrb	r3, [r7, #14]
 800ca64:	2b0f      	cmp	r3, #15
 800ca66:	d9e7      	bls.n	800ca38 <find_pregoal+0x10>
		}
	}

	//====探索完了フラグのクリア====
	allmap_comp_flag = 0;
 800ca68:	4b96      	ldr	r3, [pc, #600]	; (800ccc4 <find_pregoal+0x29c>)
 800ca6a:	2200      	movs	r2, #0
 800ca6c:	701a      	strb	r2, [r3, #0]

	//====現在座標を0にする====
	smap[mouse.y][mouse.x] = 0;
 800ca6e:	4b96      	ldr	r3, [pc, #600]	; (800ccc8 <find_pregoal+0x2a0>)
 800ca70:	785b      	ldrb	r3, [r3, #1]
 800ca72:	b2db      	uxtb	r3, r3
 800ca74:	4618      	mov	r0, r3
 800ca76:	4b94      	ldr	r3, [pc, #592]	; (800ccc8 <find_pregoal+0x2a0>)
 800ca78:	781b      	ldrb	r3, [r3, #0]
 800ca7a:	b2db      	uxtb	r3, r3
 800ca7c:	4619      	mov	r1, r3
 800ca7e:	4a90      	ldr	r2, [pc, #576]	; (800ccc0 <find_pregoal+0x298>)
 800ca80:	0103      	lsls	r3, r0, #4
 800ca82:	440b      	add	r3, r1
 800ca84:	2100      	movs	r1, #0
 800ca86:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

	//====歩数カウンタを0にする====
	m_step = 0;																//現在記入した最大の歩数となる
 800ca8a:	4b90      	ldr	r3, [pc, #576]	; (800cccc <find_pregoal+0x2a4>)
 800ca8c:	2200      	movs	r2, #0
 800ca8e:	801a      	strh	r2, [r3, #0]

	//====歩数カウンタの重みづけ====
	int straight = 3;
 800ca90:	2303      	movs	r3, #3
 800ca92:	60bb      	str	r3, [r7, #8]
	int turn = 1;
 800ca94:	2301      	movs	r3, #1
 800ca96:	607b      	str	r3, [r7, #4]

	//====自分の座標にたどり着くまでループ====
	do {
		//----マップ全域を捜索----
		for (y = 0; y <= 0x0f; y++) {										//各Y座標で実行
 800ca98:	2300      	movs	r3, #0
 800ca9a:	73bb      	strb	r3, [r7, #14]
 800ca9c:	e180      	b.n	800cda0 <find_pregoal+0x378>
			for (x = 0; x <= 0x0f; x++) {									//各X座標で実行
 800ca9e:	2300      	movs	r3, #0
 800caa0:	73fb      	strb	r3, [r7, #15]
 800caa2:	e173      	b.n	800cd8c <find_pregoal+0x364>
				//----現在最大の歩数を発見したとき----
				if (smap[y][x] == m_step) {									//歩数格納変数m_stepの値が現在最大の歩数のとき
 800caa4:	7bba      	ldrb	r2, [r7, #14]
 800caa6:	7bfb      	ldrb	r3, [r7, #15]
 800caa8:	4985      	ldr	r1, [pc, #532]	; (800ccc0 <find_pregoal+0x298>)
 800caaa:	0112      	lsls	r2, r2, #4
 800caac:	4413      	add	r3, r2
 800caae:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 800cab2:	4b86      	ldr	r3, [pc, #536]	; (800cccc <find_pregoal+0x2a4>)
 800cab4:	881b      	ldrh	r3, [r3, #0]
 800cab6:	429a      	cmp	r2, r3
 800cab8:	f040 8165 	bne.w	800cd86 <find_pregoal+0x35e>
					m_temp = map[y][x];										//map配列からマップデータを取り出す
 800cabc:	7bba      	ldrb	r2, [r7, #14]
 800cabe:	7bfb      	ldrb	r3, [r7, #15]
 800cac0:	4983      	ldr	r1, [pc, #524]	; (800ccd0 <find_pregoal+0x2a8>)
 800cac2:	0112      	lsls	r2, r2, #4
 800cac4:	440a      	add	r2, r1
 800cac6:	4413      	add	r3, r2
 800cac8:	781b      	ldrb	r3, [r3, #0]
 800caca:	70fb      	strb	r3, [r7, #3]
					//----北壁についての処理----
					if (!(m_temp & 0x08) && y != 0x0f) {					//北壁がなく現在最北端でないとき
 800cacc:	78fb      	ldrb	r3, [r7, #3]
 800cace:	f003 0308 	and.w	r3, r3, #8
 800cad2:	2b00      	cmp	r3, #0
 800cad4:	d14d      	bne.n	800cb72 <find_pregoal+0x14a>
 800cad6:	7bbb      	ldrb	r3, [r7, #14]
 800cad8:	2b0f      	cmp	r3, #15
 800cada:	d04a      	beq.n	800cb72 <find_pregoal+0x14a>
						if (smap[y + 1][x] == 0x03e7) {						//北側が未記入なら
 800cadc:	7bbb      	ldrb	r3, [r7, #14]
 800cade:	1c5a      	adds	r2, r3, #1
 800cae0:	7bfb      	ldrb	r3, [r7, #15]
 800cae2:	4977      	ldr	r1, [pc, #476]	; (800ccc0 <find_pregoal+0x298>)
 800cae4:	0112      	lsls	r2, r2, #4
 800cae6:	4413      	add	r3, r2
 800cae8:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800caec:	f240 32e7 	movw	r2, #999	; 0x3e7
 800caf0:	4293      	cmp	r3, r2
 800caf2:	d13e      	bne.n	800cb72 <find_pregoal+0x14a>
							smap[y + 1][x] = smap[y][x] + turn;				//曲線分インクリメントした値を次のマスの歩数マップに書き込む
 800caf4:	7bba      	ldrb	r2, [r7, #14]
 800caf6:	7bfb      	ldrb	r3, [r7, #15]
 800caf8:	4971      	ldr	r1, [pc, #452]	; (800ccc0 <find_pregoal+0x298>)
 800cafa:	0112      	lsls	r2, r2, #4
 800cafc:	4413      	add	r3, r2
 800cafe:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 800cb02:	687b      	ldr	r3, [r7, #4]
 800cb04:	b299      	uxth	r1, r3
 800cb06:	7bbb      	ldrb	r3, [r7, #14]
 800cb08:	1c5a      	adds	r2, r3, #1
 800cb0a:	7bfb      	ldrb	r3, [r7, #15]
 800cb0c:	4401      	add	r1, r0
 800cb0e:	b288      	uxth	r0, r1
 800cb10:	496b      	ldr	r1, [pc, #428]	; (800ccc0 <find_pregoal+0x298>)
 800cb12:	0112      	lsls	r2, r2, #4
 800cb14:	4413      	add	r3, r2
 800cb16:	4602      	mov	r2, r0
 800cb18:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
							if (((map[y + 1][x] & 0x0f ) << 4) != (map[y + 1][x] & 0xf0)) {		//map内の上位4bitと下位4bitが異なる場合
 800cb1c:	7bbb      	ldrb	r3, [r7, #14]
 800cb1e:	1c5a      	adds	r2, r3, #1
 800cb20:	7bfb      	ldrb	r3, [r7, #15]
 800cb22:	496b      	ldr	r1, [pc, #428]	; (800ccd0 <find_pregoal+0x2a8>)
 800cb24:	0112      	lsls	r2, r2, #4
 800cb26:	440a      	add	r2, r1
 800cb28:	4413      	add	r3, r2
 800cb2a:	781b      	ldrb	r3, [r3, #0]
 800cb2c:	011b      	lsls	r3, r3, #4
 800cb2e:	b2da      	uxtb	r2, r3
 800cb30:	7bbb      	ldrb	r3, [r7, #14]
 800cb32:	1c59      	adds	r1, r3, #1
 800cb34:	7bfb      	ldrb	r3, [r7, #15]
 800cb36:	4866      	ldr	r0, [pc, #408]	; (800ccd0 <find_pregoal+0x2a8>)
 800cb38:	0109      	lsls	r1, r1, #4
 800cb3a:	4401      	add	r1, r0
 800cb3c:	440b      	add	r3, r1
 800cb3e:	781b      	ldrb	r3, [r3, #0]
 800cb40:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800cb44:	429a      	cmp	r2, r3
 800cb46:	d014      	beq.n	800cb72 <find_pregoal+0x14a>
								break_flag = 1;								//for文を抜けるフラグを立てて
 800cb48:	2301      	movs	r3, #1
 800cb4a:	737b      	strb	r3, [r7, #13]
								m_step2 = smap[y + 1][x];					//仮goalの歩数を記録
 800cb4c:	7bbb      	ldrb	r3, [r7, #14]
 800cb4e:	1c5a      	adds	r2, r3, #1
 800cb50:	7bfb      	ldrb	r3, [r7, #15]
 800cb52:	495b      	ldr	r1, [pc, #364]	; (800ccc0 <find_pregoal+0x298>)
 800cb54:	0112      	lsls	r2, r2, #4
 800cb56:	4413      	add	r3, r2
 800cb58:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 800cb5c:	4b5d      	ldr	r3, [pc, #372]	; (800ccd4 <find_pregoal+0x2ac>)
 800cb5e:	801a      	strh	r2, [r3, #0]
								pregoal_x = x;
 800cb60:	4a5d      	ldr	r2, [pc, #372]	; (800ccd8 <find_pregoal+0x2b0>)
 800cb62:	7bfb      	ldrb	r3, [r7, #15]
 800cb64:	7013      	strb	r3, [r2, #0]
								pregoal_y = y + 1;							//仮goalの座標を記録
 800cb66:	7bbb      	ldrb	r3, [r7, #14]
 800cb68:	3301      	adds	r3, #1
 800cb6a:	b2da      	uxtb	r2, r3
 800cb6c:	4b5b      	ldr	r3, [pc, #364]	; (800ccdc <find_pregoal+0x2b4>)
 800cb6e:	701a      	strb	r2, [r3, #0]
								break;
 800cb70:	e110      	b.n	800cd94 <find_pregoal+0x36c>
							}
						}
					}
					//----東壁についての処理----
					if (!(m_temp & 0x04) && x != 0x0f) {					//東壁がなく現在最東端でないとき
 800cb72:	78fb      	ldrb	r3, [r7, #3]
 800cb74:	f003 0304 	and.w	r3, r3, #4
 800cb78:	2b00      	cmp	r3, #0
 800cb7a:	d14d      	bne.n	800cc18 <find_pregoal+0x1f0>
 800cb7c:	7bfb      	ldrb	r3, [r7, #15]
 800cb7e:	2b0f      	cmp	r3, #15
 800cb80:	d04a      	beq.n	800cc18 <find_pregoal+0x1f0>
						if (smap[y][x + 1] == 0x03e7) {						//東側が未記入なら
 800cb82:	7bba      	ldrb	r2, [r7, #14]
 800cb84:	7bfb      	ldrb	r3, [r7, #15]
 800cb86:	3301      	adds	r3, #1
 800cb88:	494d      	ldr	r1, [pc, #308]	; (800ccc0 <find_pregoal+0x298>)
 800cb8a:	0112      	lsls	r2, r2, #4
 800cb8c:	4413      	add	r3, r2
 800cb8e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800cb92:	f240 32e7 	movw	r2, #999	; 0x3e7
 800cb96:	4293      	cmp	r3, r2
 800cb98:	d13e      	bne.n	800cc18 <find_pregoal+0x1f0>
							smap[y][x + 1] = smap[y][x] + turn;				//曲線分インクリメントした値を次のマスの歩数マップに書き込む
 800cb9a:	7bba      	ldrb	r2, [r7, #14]
 800cb9c:	7bfb      	ldrb	r3, [r7, #15]
 800cb9e:	4948      	ldr	r1, [pc, #288]	; (800ccc0 <find_pregoal+0x298>)
 800cba0:	0112      	lsls	r2, r2, #4
 800cba2:	4413      	add	r3, r2
 800cba4:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	b299      	uxth	r1, r3
 800cbac:	7bba      	ldrb	r2, [r7, #14]
 800cbae:	7bfb      	ldrb	r3, [r7, #15]
 800cbb0:	3301      	adds	r3, #1
 800cbb2:	4401      	add	r1, r0
 800cbb4:	b288      	uxth	r0, r1
 800cbb6:	4942      	ldr	r1, [pc, #264]	; (800ccc0 <find_pregoal+0x298>)
 800cbb8:	0112      	lsls	r2, r2, #4
 800cbba:	4413      	add	r3, r2
 800cbbc:	4602      	mov	r2, r0
 800cbbe:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
							if (((map[y][x + 1] & 0x0f) << 4) != (map[y][x + 1] & 0xf0)) {		//map内の上位4bitと下位4bitが異なる場合
 800cbc2:	7bba      	ldrb	r2, [r7, #14]
 800cbc4:	7bfb      	ldrb	r3, [r7, #15]
 800cbc6:	3301      	adds	r3, #1
 800cbc8:	4941      	ldr	r1, [pc, #260]	; (800ccd0 <find_pregoal+0x2a8>)
 800cbca:	0112      	lsls	r2, r2, #4
 800cbcc:	440a      	add	r2, r1
 800cbce:	4413      	add	r3, r2
 800cbd0:	781b      	ldrb	r3, [r3, #0]
 800cbd2:	011b      	lsls	r3, r3, #4
 800cbd4:	b2da      	uxtb	r2, r3
 800cbd6:	7bb9      	ldrb	r1, [r7, #14]
 800cbd8:	7bfb      	ldrb	r3, [r7, #15]
 800cbda:	3301      	adds	r3, #1
 800cbdc:	483c      	ldr	r0, [pc, #240]	; (800ccd0 <find_pregoal+0x2a8>)
 800cbde:	0109      	lsls	r1, r1, #4
 800cbe0:	4401      	add	r1, r0
 800cbe2:	440b      	add	r3, r1
 800cbe4:	781b      	ldrb	r3, [r3, #0]
 800cbe6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800cbea:	429a      	cmp	r2, r3
 800cbec:	d014      	beq.n	800cc18 <find_pregoal+0x1f0>
								break_flag = 1;								//for文を抜けるフラグを立てて
 800cbee:	2301      	movs	r3, #1
 800cbf0:	737b      	strb	r3, [r7, #13]
								m_step2 = smap[y][x + 1];					//仮ゴールの歩数を記録
 800cbf2:	7bba      	ldrb	r2, [r7, #14]
 800cbf4:	7bfb      	ldrb	r3, [r7, #15]
 800cbf6:	3301      	adds	r3, #1
 800cbf8:	4931      	ldr	r1, [pc, #196]	; (800ccc0 <find_pregoal+0x298>)
 800cbfa:	0112      	lsls	r2, r2, #4
 800cbfc:	4413      	add	r3, r2
 800cbfe:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 800cc02:	4b34      	ldr	r3, [pc, #208]	; (800ccd4 <find_pregoal+0x2ac>)
 800cc04:	801a      	strh	r2, [r3, #0]
								pregoal_x = x + 1;
 800cc06:	7bfb      	ldrb	r3, [r7, #15]
 800cc08:	3301      	adds	r3, #1
 800cc0a:	b2da      	uxtb	r2, r3
 800cc0c:	4b32      	ldr	r3, [pc, #200]	; (800ccd8 <find_pregoal+0x2b0>)
 800cc0e:	701a      	strb	r2, [r3, #0]
								pregoal_y = y;								//仮goalの座標を記録
 800cc10:	4a32      	ldr	r2, [pc, #200]	; (800ccdc <find_pregoal+0x2b4>)
 800cc12:	7bbb      	ldrb	r3, [r7, #14]
 800cc14:	7013      	strb	r3, [r2, #0]
								break;
 800cc16:	e0bd      	b.n	800cd94 <find_pregoal+0x36c>
							}
						}
					}
					//----南壁についての処理----
					if (!(m_temp & 0x02) && y != 0) {						//南壁がなく現在最南端でないとき
 800cc18:	78fb      	ldrb	r3, [r7, #3]
 800cc1a:	f003 0302 	and.w	r3, r3, #2
 800cc1e:	2b00      	cmp	r3, #0
 800cc20:	d15e      	bne.n	800cce0 <find_pregoal+0x2b8>
 800cc22:	7bbb      	ldrb	r3, [r7, #14]
 800cc24:	2b00      	cmp	r3, #0
 800cc26:	d05b      	beq.n	800cce0 <find_pregoal+0x2b8>
						if (smap[y - 1][x] == 0x03e7) {						//南側が未記入なら
 800cc28:	7bbb      	ldrb	r3, [r7, #14]
 800cc2a:	1e5a      	subs	r2, r3, #1
 800cc2c:	7bfb      	ldrb	r3, [r7, #15]
 800cc2e:	4924      	ldr	r1, [pc, #144]	; (800ccc0 <find_pregoal+0x298>)
 800cc30:	0112      	lsls	r2, r2, #4
 800cc32:	4413      	add	r3, r2
 800cc34:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800cc38:	f240 32e7 	movw	r2, #999	; 0x3e7
 800cc3c:	4293      	cmp	r3, r2
 800cc3e:	d14f      	bne.n	800cce0 <find_pregoal+0x2b8>
							smap[y - 1][x] = smap[y][x] + turn;				//曲線分インクリメントした値を次のマスの歩数マップに書き込む
 800cc40:	7bba      	ldrb	r2, [r7, #14]
 800cc42:	7bfb      	ldrb	r3, [r7, #15]
 800cc44:	491e      	ldr	r1, [pc, #120]	; (800ccc0 <find_pregoal+0x298>)
 800cc46:	0112      	lsls	r2, r2, #4
 800cc48:	4413      	add	r3, r2
 800cc4a:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	b299      	uxth	r1, r3
 800cc52:	7bbb      	ldrb	r3, [r7, #14]
 800cc54:	1e5a      	subs	r2, r3, #1
 800cc56:	7bfb      	ldrb	r3, [r7, #15]
 800cc58:	4401      	add	r1, r0
 800cc5a:	b288      	uxth	r0, r1
 800cc5c:	4918      	ldr	r1, [pc, #96]	; (800ccc0 <find_pregoal+0x298>)
 800cc5e:	0112      	lsls	r2, r2, #4
 800cc60:	4413      	add	r3, r2
 800cc62:	4602      	mov	r2, r0
 800cc64:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
							if (((map[y - 1][x] & 0x0f) << 4) != (map[y - 1][x] & 0xf0)) {		//map内の上位4bitと下位4bitが異なる場合
 800cc68:	7bbb      	ldrb	r3, [r7, #14]
 800cc6a:	1e5a      	subs	r2, r3, #1
 800cc6c:	7bfb      	ldrb	r3, [r7, #15]
 800cc6e:	4918      	ldr	r1, [pc, #96]	; (800ccd0 <find_pregoal+0x2a8>)
 800cc70:	0112      	lsls	r2, r2, #4
 800cc72:	440a      	add	r2, r1
 800cc74:	4413      	add	r3, r2
 800cc76:	781b      	ldrb	r3, [r3, #0]
 800cc78:	011b      	lsls	r3, r3, #4
 800cc7a:	b2da      	uxtb	r2, r3
 800cc7c:	7bbb      	ldrb	r3, [r7, #14]
 800cc7e:	1e59      	subs	r1, r3, #1
 800cc80:	7bfb      	ldrb	r3, [r7, #15]
 800cc82:	4813      	ldr	r0, [pc, #76]	; (800ccd0 <find_pregoal+0x2a8>)
 800cc84:	0109      	lsls	r1, r1, #4
 800cc86:	4401      	add	r1, r0
 800cc88:	440b      	add	r3, r1
 800cc8a:	781b      	ldrb	r3, [r3, #0]
 800cc8c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800cc90:	429a      	cmp	r2, r3
 800cc92:	d025      	beq.n	800cce0 <find_pregoal+0x2b8>
								break_flag = 1;								//for文を抜けるフラグを立てて
 800cc94:	2301      	movs	r3, #1
 800cc96:	737b      	strb	r3, [r7, #13]
								m_step2 = smap[y - 1][x];					//仮ゴールの歩数を記録
 800cc98:	7bbb      	ldrb	r3, [r7, #14]
 800cc9a:	1e5a      	subs	r2, r3, #1
 800cc9c:	7bfb      	ldrb	r3, [r7, #15]
 800cc9e:	4908      	ldr	r1, [pc, #32]	; (800ccc0 <find_pregoal+0x298>)
 800cca0:	0112      	lsls	r2, r2, #4
 800cca2:	4413      	add	r3, r2
 800cca4:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 800cca8:	4b0a      	ldr	r3, [pc, #40]	; (800ccd4 <find_pregoal+0x2ac>)
 800ccaa:	801a      	strh	r2, [r3, #0]
								pregoal_x = x;
 800ccac:	4a0a      	ldr	r2, [pc, #40]	; (800ccd8 <find_pregoal+0x2b0>)
 800ccae:	7bfb      	ldrb	r3, [r7, #15]
 800ccb0:	7013      	strb	r3, [r2, #0]
								pregoal_y = y - 1;							//仮goalの座標を記録
 800ccb2:	7bbb      	ldrb	r3, [r7, #14]
 800ccb4:	3b01      	subs	r3, #1
 800ccb6:	b2da      	uxtb	r2, r3
 800ccb8:	4b08      	ldr	r3, [pc, #32]	; (800ccdc <find_pregoal+0x2b4>)
 800ccba:	701a      	strb	r2, [r3, #0]
								break;
 800ccbc:	e06a      	b.n	800cd94 <find_pregoal+0x36c>
 800ccbe:	bf00      	nop
 800ccc0:	20000de4 	.word	0x20000de4
 800ccc4:	20000c30 	.word	0x20000c30
 800ccc8:	20000c90 	.word	0x20000c90
 800cccc:	200003ce 	.word	0x200003ce
 800ccd0:	2000022c 	.word	0x2000022c
 800ccd4:	20000c88 	.word	0x20000c88
 800ccd8:	20000de0 	.word	0x20000de0
 800ccdc:	20001000 	.word	0x20001000
							}
						}
					}
					//----西壁についての処理----
					if (!(m_temp & 0x01) && x != 0) {						//西壁がなく現在最西端でないとき
 800cce0:	78fb      	ldrb	r3, [r7, #3]
 800cce2:	f003 0301 	and.w	r3, r3, #1
 800cce6:	2b00      	cmp	r3, #0
 800cce8:	d14d      	bne.n	800cd86 <find_pregoal+0x35e>
 800ccea:	7bfb      	ldrb	r3, [r7, #15]
 800ccec:	2b00      	cmp	r3, #0
 800ccee:	d04a      	beq.n	800cd86 <find_pregoal+0x35e>
						if (smap[y][x - 1] == 0x03e7) {						//西側が未記入なら
 800ccf0:	7bba      	ldrb	r2, [r7, #14]
 800ccf2:	7bfb      	ldrb	r3, [r7, #15]
 800ccf4:	3b01      	subs	r3, #1
 800ccf6:	493b      	ldr	r1, [pc, #236]	; (800cde4 <find_pregoal+0x3bc>)
 800ccf8:	0112      	lsls	r2, r2, #4
 800ccfa:	4413      	add	r3, r2
 800ccfc:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800cd00:	f240 32e7 	movw	r2, #999	; 0x3e7
 800cd04:	4293      	cmp	r3, r2
 800cd06:	d13e      	bne.n	800cd86 <find_pregoal+0x35e>
							smap[y][x - 1] = smap[y][x] + turn;				//次の歩数を書き込む
 800cd08:	7bba      	ldrb	r2, [r7, #14]
 800cd0a:	7bfb      	ldrb	r3, [r7, #15]
 800cd0c:	4935      	ldr	r1, [pc, #212]	; (800cde4 <find_pregoal+0x3bc>)
 800cd0e:	0112      	lsls	r2, r2, #4
 800cd10:	4413      	add	r3, r2
 800cd12:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 800cd16:	687b      	ldr	r3, [r7, #4]
 800cd18:	b299      	uxth	r1, r3
 800cd1a:	7bba      	ldrb	r2, [r7, #14]
 800cd1c:	7bfb      	ldrb	r3, [r7, #15]
 800cd1e:	3b01      	subs	r3, #1
 800cd20:	4401      	add	r1, r0
 800cd22:	b288      	uxth	r0, r1
 800cd24:	492f      	ldr	r1, [pc, #188]	; (800cde4 <find_pregoal+0x3bc>)
 800cd26:	0112      	lsls	r2, r2, #4
 800cd28:	4413      	add	r3, r2
 800cd2a:	4602      	mov	r2, r0
 800cd2c:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
							if (((map[y][x - 1] & 0x0f) << 4) != (map[y][x - 1] & 0xf0)) {		//map内の上位4bitと下位4bitが異なる場合
 800cd30:	7bba      	ldrb	r2, [r7, #14]
 800cd32:	7bfb      	ldrb	r3, [r7, #15]
 800cd34:	3b01      	subs	r3, #1
 800cd36:	492c      	ldr	r1, [pc, #176]	; (800cde8 <find_pregoal+0x3c0>)
 800cd38:	0112      	lsls	r2, r2, #4
 800cd3a:	440a      	add	r2, r1
 800cd3c:	4413      	add	r3, r2
 800cd3e:	781b      	ldrb	r3, [r3, #0]
 800cd40:	011b      	lsls	r3, r3, #4
 800cd42:	b2da      	uxtb	r2, r3
 800cd44:	7bb9      	ldrb	r1, [r7, #14]
 800cd46:	7bfb      	ldrb	r3, [r7, #15]
 800cd48:	3b01      	subs	r3, #1
 800cd4a:	4827      	ldr	r0, [pc, #156]	; (800cde8 <find_pregoal+0x3c0>)
 800cd4c:	0109      	lsls	r1, r1, #4
 800cd4e:	4401      	add	r1, r0
 800cd50:	440b      	add	r3, r1
 800cd52:	781b      	ldrb	r3, [r3, #0]
 800cd54:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800cd58:	429a      	cmp	r2, r3
 800cd5a:	d014      	beq.n	800cd86 <find_pregoal+0x35e>
								break_flag = 1;								//for文を抜けるフラグを立てて
 800cd5c:	2301      	movs	r3, #1
 800cd5e:	737b      	strb	r3, [r7, #13]
								m_step2 = smap[y][x - 1];					//仮ゴールの歩数を記録
 800cd60:	7bba      	ldrb	r2, [r7, #14]
 800cd62:	7bfb      	ldrb	r3, [r7, #15]
 800cd64:	3b01      	subs	r3, #1
 800cd66:	491f      	ldr	r1, [pc, #124]	; (800cde4 <find_pregoal+0x3bc>)
 800cd68:	0112      	lsls	r2, r2, #4
 800cd6a:	4413      	add	r3, r2
 800cd6c:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 800cd70:	4b1e      	ldr	r3, [pc, #120]	; (800cdec <find_pregoal+0x3c4>)
 800cd72:	801a      	strh	r2, [r3, #0]
								pregoal_x = x - 1;
 800cd74:	7bfb      	ldrb	r3, [r7, #15]
 800cd76:	3b01      	subs	r3, #1
 800cd78:	b2da      	uxtb	r2, r3
 800cd7a:	4b1d      	ldr	r3, [pc, #116]	; (800cdf0 <find_pregoal+0x3c8>)
 800cd7c:	701a      	strb	r2, [r3, #0]
								pregoal_y = y;								//仮goalの座標を記録
 800cd7e:	4a1d      	ldr	r2, [pc, #116]	; (800cdf4 <find_pregoal+0x3cc>)
 800cd80:	7bbb      	ldrb	r3, [r7, #14]
 800cd82:	7013      	strb	r3, [r2, #0]
								break;							}
 800cd84:	e006      	b.n	800cd94 <find_pregoal+0x36c>
			for (x = 0; x <= 0x0f; x++) {									//各X座標で実行
 800cd86:	7bfb      	ldrb	r3, [r7, #15]
 800cd88:	3301      	adds	r3, #1
 800cd8a:	73fb      	strb	r3, [r7, #15]
 800cd8c:	7bfb      	ldrb	r3, [r7, #15]
 800cd8e:	2b0f      	cmp	r3, #15
 800cd90:	f67f ae88 	bls.w	800caa4 <find_pregoal+0x7c>
						}
					}
				}
			}
			if (break_flag) break;		//map内の上位4bitと下位4bitが異なる場合、for文を抜ける
 800cd94:	7b7b      	ldrb	r3, [r7, #13]
 800cd96:	2b00      	cmp	r3, #0
 800cd98:	d107      	bne.n	800cdaa <find_pregoal+0x382>
		for (y = 0; y <= 0x0f; y++) {										//各Y座標で実行
 800cd9a:	7bbb      	ldrb	r3, [r7, #14]
 800cd9c:	3301      	adds	r3, #1
 800cd9e:	73bb      	strb	r3, [r7, #14]
 800cda0:	7bbb      	ldrb	r3, [r7, #14]
 800cda2:	2b0f      	cmp	r3, #15
 800cda4:	f67f ae7b 	bls.w	800ca9e <find_pregoal+0x76>
 800cda8:	e000      	b.n	800cdac <find_pregoal+0x384>
			if (break_flag) break;		//map内の上位4bitと下位4bitが異なる場合、for文を抜ける
 800cdaa:	bf00      	nop
		}
		//====歩数カウンタのインクリメント====
		m_step++;
 800cdac:	4b12      	ldr	r3, [pc, #72]	; (800cdf8 <find_pregoal+0x3d0>)
 800cdae:	881b      	ldrh	r3, [r3, #0]
 800cdb0:	3301      	adds	r3, #1
 800cdb2:	b29a      	uxth	r2, r3
 800cdb4:	4b10      	ldr	r3, [pc, #64]	; (800cdf8 <find_pregoal+0x3d0>)
 800cdb6:	801a      	strh	r2, [r3, #0]
		if (m_step > 500) allmap_comp_flag = 1;
 800cdb8:	4b0f      	ldr	r3, [pc, #60]	; (800cdf8 <find_pregoal+0x3d0>)
 800cdba:	881b      	ldrh	r3, [r3, #0]
 800cdbc:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800cdc0:	d902      	bls.n	800cdc8 <find_pregoal+0x3a0>
 800cdc2:	4b0e      	ldr	r3, [pc, #56]	; (800cdfc <find_pregoal+0x3d4>)
 800cdc4:	2201      	movs	r2, #1
 800cdc6:	701a      	strb	r2, [r3, #0]
	} while (break_flag == 0 && allmap_comp_flag != 1);		//未探索壁ありマスを見つけるまで実行
 800cdc8:	7b7b      	ldrb	r3, [r7, #13]
 800cdca:	2b00      	cmp	r3, #0
 800cdcc:	d104      	bne.n	800cdd8 <find_pregoal+0x3b0>
 800cdce:	4b0b      	ldr	r3, [pc, #44]	; (800cdfc <find_pregoal+0x3d4>)
 800cdd0:	781b      	ldrb	r3, [r3, #0]
 800cdd2:	2b01      	cmp	r3, #1
 800cdd4:	f47f ae60 	bne.w	800ca98 <find_pregoal+0x70>
}
 800cdd8:	bf00      	nop
 800cdda:	3714      	adds	r7, #20
 800cddc:	46bd      	mov	sp, r7
 800cdde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cde2:	4770      	bx	lr
 800cde4:	20000de4 	.word	0x20000de4
 800cde8:	2000022c 	.word	0x2000022c
 800cdec:	20000c88 	.word	0x20000c88
 800cdf0:	20000de0 	.word	0x20000de0
 800cdf4:	20001000 	.word	0x20001000
 800cdf8:	200003ce 	.word	0x200003ce
 800cdfc:	20000c30 	.word	0x20000c30

0800ce00 <make_smap2>:
//	歩数マップを作成する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void make_smap2()
{
 800ce00:	b480      	push	{r7}
 800ce02:	b085      	sub	sp, #20
 800ce04:	af00      	add	r7, sp, #0
	//====変数宣言====
	uint8_t x, y;															//for文用変数
	uint8_t m_temp;															//マップデータ一時保持

	//====歩数マップのクリア====
	for (y = 0; y <= 0x0f; y++) {											//各Y座標で実行
 800ce06:	2300      	movs	r3, #0
 800ce08:	73bb      	strb	r3, [r7, #14]
 800ce0a:	e014      	b.n	800ce36 <make_smap2+0x36>
		for (x = 0; x <= 0x0f; x++) {										//各X座標で実行
 800ce0c:	2300      	movs	r3, #0
 800ce0e:	73fb      	strb	r3, [r7, #15]
 800ce10:	e00b      	b.n	800ce2a <make_smap2+0x2a>
			smap[y][x] = 0x03e7;											//未記入部分は歩数最大とする
 800ce12:	7bba      	ldrb	r2, [r7, #14]
 800ce14:	7bfb      	ldrb	r3, [r7, #15]
 800ce16:	4986      	ldr	r1, [pc, #536]	; (800d030 <make_smap2+0x230>)
 800ce18:	0112      	lsls	r2, r2, #4
 800ce1a:	4413      	add	r3, r2
 800ce1c:	f240 32e7 	movw	r2, #999	; 0x3e7
 800ce20:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for (x = 0; x <= 0x0f; x++) {										//各X座標で実行
 800ce24:	7bfb      	ldrb	r3, [r7, #15]
 800ce26:	3301      	adds	r3, #1
 800ce28:	73fb      	strb	r3, [r7, #15]
 800ce2a:	7bfb      	ldrb	r3, [r7, #15]
 800ce2c:	2b0f      	cmp	r3, #15
 800ce2e:	d9f0      	bls.n	800ce12 <make_smap2+0x12>
	for (y = 0; y <= 0x0f; y++) {											//各Y座標で実行
 800ce30:	7bbb      	ldrb	r3, [r7, #14]
 800ce32:	3301      	adds	r3, #1
 800ce34:	73bb      	strb	r3, [r7, #14]
 800ce36:	7bbb      	ldrb	r3, [r7, #14]
 800ce38:	2b0f      	cmp	r3, #15
 800ce3a:	d9e7      	bls.n	800ce0c <make_smap2+0xc>
		}
	}

	//====仮ゴール座標を0にする====
	smap[pregoal_y][pregoal_x] = 0;
 800ce3c:	4b7d      	ldr	r3, [pc, #500]	; (800d034 <make_smap2+0x234>)
 800ce3e:	781b      	ldrb	r3, [r3, #0]
 800ce40:	4618      	mov	r0, r3
 800ce42:	4b7d      	ldr	r3, [pc, #500]	; (800d038 <make_smap2+0x238>)
 800ce44:	781b      	ldrb	r3, [r3, #0]
 800ce46:	4619      	mov	r1, r3
 800ce48:	4a79      	ldr	r2, [pc, #484]	; (800d030 <make_smap2+0x230>)
 800ce4a:	0103      	lsls	r3, r0, #4
 800ce4c:	440b      	add	r3, r1
 800ce4e:	2100      	movs	r1, #0
 800ce50:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

	//====歩数カウンタを0にする====
	m_step = 0;																//現在記入した最大の歩数となる
 800ce54:	4b79      	ldr	r3, [pc, #484]	; (800d03c <make_smap2+0x23c>)
 800ce56:	2200      	movs	r2, #0
 800ce58:	801a      	strh	r2, [r3, #0]

	//====歩数カウンタの重みづけ====
	int straight = 3;
 800ce5a:	2303      	movs	r3, #3
 800ce5c:	60bb      	str	r3, [r7, #8]
	int turn = 5;
 800ce5e:	2305      	movs	r3, #5
 800ce60:	607b      	str	r3, [r7, #4]

	//====自分の座標にたどり着くまでループ====
	do {
		//----マップ全域を捜索----
		for (y = 0; y <= 0x0f; y++) {										//各Y座標で実行
 800ce62:	2300      	movs	r3, #0
 800ce64:	73bb      	strb	r3, [r7, #14]
 800ce66:	e0c0      	b.n	800cfea <make_smap2+0x1ea>
			for (x = 0; x <= 0x0f; x++) {									//各X座標で実行
 800ce68:	2300      	movs	r3, #0
 800ce6a:	73fb      	strb	r3, [r7, #15]
 800ce6c:	e0b6      	b.n	800cfdc <make_smap2+0x1dc>
				//----現在最大の歩数を発見したとき----
				if (smap[y][x] == m_step) {									//歩数格納変数m_stepの値が現在最大の歩数のとき
 800ce6e:	7bba      	ldrb	r2, [r7, #14]
 800ce70:	7bfb      	ldrb	r3, [r7, #15]
 800ce72:	496f      	ldr	r1, [pc, #444]	; (800d030 <make_smap2+0x230>)
 800ce74:	0112      	lsls	r2, r2, #4
 800ce76:	4413      	add	r3, r2
 800ce78:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 800ce7c:	4b6f      	ldr	r3, [pc, #444]	; (800d03c <make_smap2+0x23c>)
 800ce7e:	881b      	ldrh	r3, [r3, #0]
 800ce80:	429a      	cmp	r2, r3
 800ce82:	f040 80a8 	bne.w	800cfd6 <make_smap2+0x1d6>
					m_temp = map[y][x];										//map配列からマップデータを取り出す
 800ce86:	7bba      	ldrb	r2, [r7, #14]
 800ce88:	7bfb      	ldrb	r3, [r7, #15]
 800ce8a:	496d      	ldr	r1, [pc, #436]	; (800d040 <make_smap2+0x240>)
 800ce8c:	0112      	lsls	r2, r2, #4
 800ce8e:	440a      	add	r2, r1
 800ce90:	4413      	add	r3, r2
 800ce92:	781b      	ldrb	r3, [r3, #0]
 800ce94:	70fb      	strb	r3, [r7, #3]
					//----北壁についての処理----
					if (!(m_temp & 0x08) && y != 0x0f) {					//北壁がなく現在最北端でないとき
 800ce96:	78fb      	ldrb	r3, [r7, #3]
 800ce98:	f003 0308 	and.w	r3, r3, #8
 800ce9c:	2b00      	cmp	r3, #0
 800ce9e:	d122      	bne.n	800cee6 <make_smap2+0xe6>
 800cea0:	7bbb      	ldrb	r3, [r7, #14]
 800cea2:	2b0f      	cmp	r3, #15
 800cea4:	d01f      	beq.n	800cee6 <make_smap2+0xe6>
						if (smap[y + 1][x] == 0x03e7) {						//北側が未記入なら
 800cea6:	7bbb      	ldrb	r3, [r7, #14]
 800cea8:	1c5a      	adds	r2, r3, #1
 800ceaa:	7bfb      	ldrb	r3, [r7, #15]
 800ceac:	4960      	ldr	r1, [pc, #384]	; (800d030 <make_smap2+0x230>)
 800ceae:	0112      	lsls	r2, r2, #4
 800ceb0:	4413      	add	r3, r2
 800ceb2:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800ceb6:	f240 32e7 	movw	r2, #999	; 0x3e7
 800ceba:	4293      	cmp	r3, r2
 800cebc:	d113      	bne.n	800cee6 <make_smap2+0xe6>
							smap[y + 1][x] = smap[y][x] + turn;				//曲線分インクリメントした値を次のマスの歩数マップに書き込む
 800cebe:	7bba      	ldrb	r2, [r7, #14]
 800cec0:	7bfb      	ldrb	r3, [r7, #15]
 800cec2:	495b      	ldr	r1, [pc, #364]	; (800d030 <make_smap2+0x230>)
 800cec4:	0112      	lsls	r2, r2, #4
 800cec6:	4413      	add	r3, r2
 800cec8:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	b299      	uxth	r1, r3
 800ced0:	7bbb      	ldrb	r3, [r7, #14]
 800ced2:	1c5a      	adds	r2, r3, #1
 800ced4:	7bfb      	ldrb	r3, [r7, #15]
 800ced6:	4401      	add	r1, r0
 800ced8:	b288      	uxth	r0, r1
 800ceda:	4955      	ldr	r1, [pc, #340]	; (800d030 <make_smap2+0x230>)
 800cedc:	0112      	lsls	r2, r2, #4
 800cede:	4413      	add	r3, r2
 800cee0:	4602      	mov	r2, r0
 800cee2:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
						}
					}
					//----東壁についての処理----
					if (!(m_temp & 0x04) && x != 0x0f) {					//東壁がなく現在最東端でないとき
 800cee6:	78fb      	ldrb	r3, [r7, #3]
 800cee8:	f003 0304 	and.w	r3, r3, #4
 800ceec:	2b00      	cmp	r3, #0
 800ceee:	d122      	bne.n	800cf36 <make_smap2+0x136>
 800cef0:	7bfb      	ldrb	r3, [r7, #15]
 800cef2:	2b0f      	cmp	r3, #15
 800cef4:	d01f      	beq.n	800cf36 <make_smap2+0x136>
						if (smap[y][x + 1] == 0x03e7) {						//東側が未記入なら
 800cef6:	7bba      	ldrb	r2, [r7, #14]
 800cef8:	7bfb      	ldrb	r3, [r7, #15]
 800cefa:	3301      	adds	r3, #1
 800cefc:	494c      	ldr	r1, [pc, #304]	; (800d030 <make_smap2+0x230>)
 800cefe:	0112      	lsls	r2, r2, #4
 800cf00:	4413      	add	r3, r2
 800cf02:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800cf06:	f240 32e7 	movw	r2, #999	; 0x3e7
 800cf0a:	4293      	cmp	r3, r2
 800cf0c:	d113      	bne.n	800cf36 <make_smap2+0x136>
							smap[y][x + 1] = smap[y][x] + turn;				//曲線分インクリメントした値を次のマスの歩数マップに書き込む
 800cf0e:	7bba      	ldrb	r2, [r7, #14]
 800cf10:	7bfb      	ldrb	r3, [r7, #15]
 800cf12:	4947      	ldr	r1, [pc, #284]	; (800d030 <make_smap2+0x230>)
 800cf14:	0112      	lsls	r2, r2, #4
 800cf16:	4413      	add	r3, r2
 800cf18:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	b299      	uxth	r1, r3
 800cf20:	7bba      	ldrb	r2, [r7, #14]
 800cf22:	7bfb      	ldrb	r3, [r7, #15]
 800cf24:	3301      	adds	r3, #1
 800cf26:	4401      	add	r1, r0
 800cf28:	b288      	uxth	r0, r1
 800cf2a:	4941      	ldr	r1, [pc, #260]	; (800d030 <make_smap2+0x230>)
 800cf2c:	0112      	lsls	r2, r2, #4
 800cf2e:	4413      	add	r3, r2
 800cf30:	4602      	mov	r2, r0
 800cf32:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
						}
					}
					//----南壁についての処理----
					if (!(m_temp & 0x02) && y != 0) {						//南壁がなく現在最南端でないとき
 800cf36:	78fb      	ldrb	r3, [r7, #3]
 800cf38:	f003 0302 	and.w	r3, r3, #2
 800cf3c:	2b00      	cmp	r3, #0
 800cf3e:	d122      	bne.n	800cf86 <make_smap2+0x186>
 800cf40:	7bbb      	ldrb	r3, [r7, #14]
 800cf42:	2b00      	cmp	r3, #0
 800cf44:	d01f      	beq.n	800cf86 <make_smap2+0x186>
						if (smap[y - 1][x] == 0x03e7) {						//南側が未記入なら
 800cf46:	7bbb      	ldrb	r3, [r7, #14]
 800cf48:	1e5a      	subs	r2, r3, #1
 800cf4a:	7bfb      	ldrb	r3, [r7, #15]
 800cf4c:	4938      	ldr	r1, [pc, #224]	; (800d030 <make_smap2+0x230>)
 800cf4e:	0112      	lsls	r2, r2, #4
 800cf50:	4413      	add	r3, r2
 800cf52:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800cf56:	f240 32e7 	movw	r2, #999	; 0x3e7
 800cf5a:	4293      	cmp	r3, r2
 800cf5c:	d113      	bne.n	800cf86 <make_smap2+0x186>
							smap[y - 1][x] = smap[y][x] + turn;				//曲線分インクリメントした値を次のマスの歩数マップに書き込む
 800cf5e:	7bba      	ldrb	r2, [r7, #14]
 800cf60:	7bfb      	ldrb	r3, [r7, #15]
 800cf62:	4933      	ldr	r1, [pc, #204]	; (800d030 <make_smap2+0x230>)
 800cf64:	0112      	lsls	r2, r2, #4
 800cf66:	4413      	add	r3, r2
 800cf68:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	b299      	uxth	r1, r3
 800cf70:	7bbb      	ldrb	r3, [r7, #14]
 800cf72:	1e5a      	subs	r2, r3, #1
 800cf74:	7bfb      	ldrb	r3, [r7, #15]
 800cf76:	4401      	add	r1, r0
 800cf78:	b288      	uxth	r0, r1
 800cf7a:	492d      	ldr	r1, [pc, #180]	; (800d030 <make_smap2+0x230>)
 800cf7c:	0112      	lsls	r2, r2, #4
 800cf7e:	4413      	add	r3, r2
 800cf80:	4602      	mov	r2, r0
 800cf82:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
						}
					}
					//----西壁についての処理----
					if (!(m_temp & 0x01) && x != 0) {						//西壁がなく現在最西端でないとき
 800cf86:	78fb      	ldrb	r3, [r7, #3]
 800cf88:	f003 0301 	and.w	r3, r3, #1
 800cf8c:	2b00      	cmp	r3, #0
 800cf8e:	d122      	bne.n	800cfd6 <make_smap2+0x1d6>
 800cf90:	7bfb      	ldrb	r3, [r7, #15]
 800cf92:	2b00      	cmp	r3, #0
 800cf94:	d01f      	beq.n	800cfd6 <make_smap2+0x1d6>
						if (smap[y][x - 1] == 0x03e7) {						//西側が未記入なら
 800cf96:	7bba      	ldrb	r2, [r7, #14]
 800cf98:	7bfb      	ldrb	r3, [r7, #15]
 800cf9a:	3b01      	subs	r3, #1
 800cf9c:	4924      	ldr	r1, [pc, #144]	; (800d030 <make_smap2+0x230>)
 800cf9e:	0112      	lsls	r2, r2, #4
 800cfa0:	4413      	add	r3, r2
 800cfa2:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800cfa6:	f240 32e7 	movw	r2, #999	; 0x3e7
 800cfaa:	4293      	cmp	r3, r2
 800cfac:	d113      	bne.n	800cfd6 <make_smap2+0x1d6>
							smap[y][x - 1] = smap[y][x] + turn;				//次の歩数を書き込む
 800cfae:	7bba      	ldrb	r2, [r7, #14]
 800cfb0:	7bfb      	ldrb	r3, [r7, #15]
 800cfb2:	491f      	ldr	r1, [pc, #124]	; (800d030 <make_smap2+0x230>)
 800cfb4:	0112      	lsls	r2, r2, #4
 800cfb6:	4413      	add	r3, r2
 800cfb8:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	b299      	uxth	r1, r3
 800cfc0:	7bba      	ldrb	r2, [r7, #14]
 800cfc2:	7bfb      	ldrb	r3, [r7, #15]
 800cfc4:	3b01      	subs	r3, #1
 800cfc6:	4401      	add	r1, r0
 800cfc8:	b288      	uxth	r0, r1
 800cfca:	4919      	ldr	r1, [pc, #100]	; (800d030 <make_smap2+0x230>)
 800cfcc:	0112      	lsls	r2, r2, #4
 800cfce:	4413      	add	r3, r2
 800cfd0:	4602      	mov	r2, r0
 800cfd2:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			for (x = 0; x <= 0x0f; x++) {									//各X座標で実行
 800cfd6:	7bfb      	ldrb	r3, [r7, #15]
 800cfd8:	3301      	adds	r3, #1
 800cfda:	73fb      	strb	r3, [r7, #15]
 800cfdc:	7bfb      	ldrb	r3, [r7, #15]
 800cfde:	2b0f      	cmp	r3, #15
 800cfe0:	f67f af45 	bls.w	800ce6e <make_smap2+0x6e>
		for (y = 0; y <= 0x0f; y++) {										//各Y座標で実行
 800cfe4:	7bbb      	ldrb	r3, [r7, #14]
 800cfe6:	3301      	adds	r3, #1
 800cfe8:	73bb      	strb	r3, [r7, #14]
 800cfea:	7bbb      	ldrb	r3, [r7, #14]
 800cfec:	2b0f      	cmp	r3, #15
 800cfee:	f67f af3b 	bls.w	800ce68 <make_smap2+0x68>
					}
				}
			}
		}
		//====歩数カウンタのインクリメント====
		m_step++;
 800cff2:	4b12      	ldr	r3, [pc, #72]	; (800d03c <make_smap2+0x23c>)
 800cff4:	881b      	ldrh	r3, [r3, #0]
 800cff6:	3301      	adds	r3, #1
 800cff8:	b29a      	uxth	r2, r3
 800cffa:	4b10      	ldr	r3, [pc, #64]	; (800d03c <make_smap2+0x23c>)
 800cffc:	801a      	strh	r2, [r3, #0]
	} while (smap[mouse.y][mouse.x] == 0x03e7);		//現在座標が未記入ではなくなるまで実行
 800cffe:	4b11      	ldr	r3, [pc, #68]	; (800d044 <make_smap2+0x244>)
 800d000:	785b      	ldrb	r3, [r3, #1]
 800d002:	b2db      	uxtb	r3, r3
 800d004:	4618      	mov	r0, r3
 800d006:	4b0f      	ldr	r3, [pc, #60]	; (800d044 <make_smap2+0x244>)
 800d008:	781b      	ldrb	r3, [r3, #0]
 800d00a:	b2db      	uxtb	r3, r3
 800d00c:	4619      	mov	r1, r3
 800d00e:	4a08      	ldr	r2, [pc, #32]	; (800d030 <make_smap2+0x230>)
 800d010:	0103      	lsls	r3, r0, #4
 800d012:	440b      	add	r3, r1
 800d014:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d018:	f240 32e7 	movw	r2, #999	; 0x3e7
 800d01c:	4293      	cmp	r3, r2
 800d01e:	f43f af20 	beq.w	800ce62 <make_smap2+0x62>
}
 800d022:	bf00      	nop
 800d024:	3714      	adds	r7, #20
 800d026:	46bd      	mov	sp, r7
 800d028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d02c:	4770      	bx	lr
 800d02e:	bf00      	nop
 800d030:	20000de4 	.word	0x20000de4
 800d034:	20001000 	.word	0x20001000
 800d038:	20000de0 	.word	0x20000de0
 800d03c:	200003ce 	.word	0x200003ce
 800d040:	2000022c 	.word	0x2000022c
 800d044:	20000c90 	.word	0x20000c90

0800d048 <pass_route>:
//pass_route
// route配列をpass圧縮する
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void pass_route(void){
 800d048:	b480      	push	{r7}
 800d04a:	b083      	sub	sp, #12
 800d04c:	af00      	add	r7, sp, #0
	int i;
	for(i = 0; i < 256; i++){
 800d04e:	2300      	movs	r3, #0
 800d050:	607b      	str	r3, [r7, #4]
 800d052:	e007      	b.n	800d064 <pass_route+0x1c>
		pass[i] = 0;								//pass配列の初期化
 800d054:	4a9b      	ldr	r2, [pc, #620]	; (800d2c4 <pass_route+0x27c>)
 800d056:	687b      	ldr	r3, [r7, #4]
 800d058:	4413      	add	r3, r2
 800d05a:	2200      	movs	r2, #0
 800d05c:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < 256; i++){
 800d05e:	687b      	ldr	r3, [r7, #4]
 800d060:	3301      	adds	r3, #1
 800d062:	607b      	str	r3, [r7, #4]
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	2bff      	cmp	r3, #255	; 0xff
 800d068:	ddf4      	ble.n	800d054 <pass_route+0xc>
	}
	uint8_t p = 0;									//pass配列の配列番号用変数
 800d06a:	2300      	movs	r3, #0
 800d06c:	70fb      	strb	r3, [r7, #3]
	i = 0;
 800d06e:	2300      	movs	r3, #0
 800d070:	607b      	str	r3, [r7, #4]
	uint8_t s = 0;									//a直線数カウント用変数
 800d072:	2300      	movs	r3, #0
 800d074:	70bb      	strb	r3, [r7, #2]
	while(route[i] != 0xff){
 800d076:	e1e7      	b.n	800d448 <pass_route+0x400>
		s = 0;
 800d078:	2300      	movs	r3, #0
 800d07a:	70bb      	strb	r3, [r7, #2]
		switch(route[i]){
 800d07c:	4a92      	ldr	r2, [pc, #584]	; (800d2c8 <pass_route+0x280>)
 800d07e:	687b      	ldr	r3, [r7, #4]
 800d080:	4413      	add	r3, r2
 800d082:	781b      	ldrb	r3, [r3, #0]
 800d084:	2b44      	cmp	r3, #68	; 0x44
 800d086:	f000 81cc 	beq.w	800d422 <pass_route+0x3da>
 800d08a:	2b88      	cmp	r3, #136	; 0x88
 800d08c:	d003      	beq.n	800d096 <pass_route+0x4e>
 800d08e:	2b11      	cmp	r3, #17
 800d090:	f000 81cf 	beq.w	800d432 <pass_route+0x3ea>
 800d094:	e1d5      	b.n	800d442 <pass_route+0x3fa>
		case 0x88:										//aまず直進
			s++;
 800d096:	78bb      	ldrb	r3, [r7, #2]
 800d098:	3301      	adds	r3, #1
 800d09a:	70bb      	strb	r3, [r7, #2]
			switch(route[i+1]){
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	3301      	adds	r3, #1
 800d0a0:	4a89      	ldr	r2, [pc, #548]	; (800d2c8 <pass_route+0x280>)
 800d0a2:	5cd3      	ldrb	r3, [r2, r3]
 800d0a4:	2b44      	cmp	r3, #68	; 0x44
 800d0a6:	d01a      	beq.n	800d0de <pass_route+0x96>
 800d0a8:	2b88      	cmp	r3, #136	; 0x88
 800d0aa:	d009      	beq.n	800d0c0 <pass_route+0x78>
 800d0ac:	2b11      	cmp	r3, #17
 800d0ae:	f000 80d6 	beq.w	800d25e <pass_route+0x216>
 800d0b2:	e198      	b.n	800d3e6 <pass_route+0x39e>
			case 0x88:									//a直進→直進
				while(route[i+2] == 0x88){				//aさらに直進であるならば
					s++;								//a直進カウンタ+1
 800d0b4:	78bb      	ldrb	r3, [r7, #2]
 800d0b6:	3301      	adds	r3, #1
 800d0b8:	70bb      	strb	r3, [r7, #2]
					i++;
 800d0ba:	687b      	ldr	r3, [r7, #4]
 800d0bc:	3301      	adds	r3, #1
 800d0be:	607b      	str	r3, [r7, #4]
				while(route[i+2] == 0x88){				//aさらに直進であるならば
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	3302      	adds	r3, #2
 800d0c4:	4a80      	ldr	r2, [pc, #512]	; (800d2c8 <pass_route+0x280>)
 800d0c6:	5cd3      	ldrb	r3, [r2, r3]
 800d0c8:	2b88      	cmp	r3, #136	; 0x88
 800d0ca:	d0f3      	beq.n	800d0b4 <pass_route+0x6c>
				}
				pass[p] = s;							//pass配列に直進数を代入
 800d0cc:	78fb      	ldrb	r3, [r7, #3]
 800d0ce:	f997 1002 	ldrsb.w	r1, [r7, #2]
 800d0d2:	4a7c      	ldr	r2, [pc, #496]	; (800d2c4 <pass_route+0x27c>)
 800d0d4:	54d1      	strb	r1, [r2, r3]
				i++;
 800d0d6:	687b      	ldr	r3, [r7, #4]
 800d0d8:	3301      	adds	r3, #1
 800d0da:	607b      	str	r3, [r7, #4]
				break;
 800d0dc:	e1a0      	b.n	800d420 <pass_route+0x3d8>

			case 0x44:									//a直進→右
				switch(route[i+2]){
 800d0de:	687b      	ldr	r3, [r7, #4]
 800d0e0:	3302      	adds	r3, #2
 800d0e2:	4a79      	ldr	r2, [pc, #484]	; (800d2c8 <pass_route+0x280>)
 800d0e4:	5cd3      	ldrb	r3, [r2, r3]
 800d0e6:	2b44      	cmp	r3, #68	; 0x44
 800d0e8:	d00c      	beq.n	800d104 <pass_route+0xbc>
 800d0ea:	2b88      	cmp	r3, #136	; 0x88
 800d0ec:	d002      	beq.n	800d0f4 <pass_route+0xac>
 800d0ee:	2b11      	cmp	r3, #17
 800d0f0:	d055      	beq.n	800d19e <pass_route+0x156>
 800d0f2:	e08a      	b.n	800d20a <pass_route+0x1c2>
				case 0x88:								//a直進→右→直進　=　大回り右90度
					pass[p] = -3;
 800d0f4:	78fb      	ldrb	r3, [r7, #3]
 800d0f6:	4a73      	ldr	r2, [pc, #460]	; (800d2c4 <pass_route+0x27c>)
 800d0f8:	21fd      	movs	r1, #253	; 0xfd
 800d0fa:	54d1      	strb	r1, [r2, r3]
					i = i + 3;
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	3303      	adds	r3, #3
 800d100:	607b      	str	r3, [r7, #4]
					break;
 800d102:	e0ab      	b.n	800d25c <pass_route+0x214>

				case 0x44:								//a直進→右→右
					if(route[i+3] == 0x88){				//a直進→右→右→直進　=　大回り右180度
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	3303      	adds	r3, #3
 800d108:	4a6f      	ldr	r2, [pc, #444]	; (800d2c8 <pass_route+0x280>)
 800d10a:	5cd3      	ldrb	r3, [r2, r3]
 800d10c:	2b88      	cmp	r3, #136	; 0x88
 800d10e:	d107      	bne.n	800d120 <pass_route+0xd8>
						pass[p] = -5;
 800d110:	78fb      	ldrb	r3, [r7, #3]
 800d112:	4a6c      	ldr	r2, [pc, #432]	; (800d2c4 <pass_route+0x27c>)
 800d114:	21fb      	movs	r1, #251	; 0xfb
 800d116:	54d1      	strb	r1, [r2, r3]
						i = i + 4;
 800d118:	687b      	ldr	r3, [r7, #4]
 800d11a:	3304      	adds	r3, #4
 800d11c:	607b      	str	r3, [r7, #4]
							pass[p+3] = -2;				//a直進→右→右→左(左以外は存在しない)　そのまま保存
							p = p + 3;
						}
						i = i + 4;
					}
					break;
 800d11e:	e09d      	b.n	800d25c <pass_route+0x214>
						if(p > 0 && pass[p-1] > 0){
 800d120:	78fb      	ldrb	r3, [r7, #3]
 800d122:	2b00      	cmp	r3, #0
 800d124:	d021      	beq.n	800d16a <pass_route+0x122>
 800d126:	78fb      	ldrb	r3, [r7, #3]
 800d128:	3b01      	subs	r3, #1
 800d12a:	4a66      	ldr	r2, [pc, #408]	; (800d2c4 <pass_route+0x27c>)
 800d12c:	56d3      	ldrsb	r3, [r2, r3]
 800d12e:	2b00      	cmp	r3, #0
 800d130:	dd1b      	ble.n	800d16a <pass_route+0x122>
							pass[p-1]++;
 800d132:	78fb      	ldrb	r3, [r7, #3]
 800d134:	3b01      	subs	r3, #1
 800d136:	4a63      	ldr	r2, [pc, #396]	; (800d2c4 <pass_route+0x27c>)
 800d138:	56d2      	ldrsb	r2, [r2, r3]
 800d13a:	b2d2      	uxtb	r2, r2
 800d13c:	3201      	adds	r2, #1
 800d13e:	b2d2      	uxtb	r2, r2
 800d140:	b251      	sxtb	r1, r2
 800d142:	4a60      	ldr	r2, [pc, #384]	; (800d2c4 <pass_route+0x27c>)
 800d144:	54d1      	strb	r1, [r2, r3]
							pass[p] = -1;
 800d146:	78fb      	ldrb	r3, [r7, #3]
 800d148:	4a5e      	ldr	r2, [pc, #376]	; (800d2c4 <pass_route+0x27c>)
 800d14a:	21ff      	movs	r1, #255	; 0xff
 800d14c:	54d1      	strb	r1, [r2, r3]
							pass[p+1] = -1;
 800d14e:	78fb      	ldrb	r3, [r7, #3]
 800d150:	3301      	adds	r3, #1
 800d152:	4a5c      	ldr	r2, [pc, #368]	; (800d2c4 <pass_route+0x27c>)
 800d154:	21ff      	movs	r1, #255	; 0xff
 800d156:	54d1      	strb	r1, [r2, r3]
							pass[p+2] = -2;				//a直進→右→右→左(左以外は存在しない)　そのまま保存　直前が直進の場合
 800d158:	78fb      	ldrb	r3, [r7, #3]
 800d15a:	3302      	adds	r3, #2
 800d15c:	4a59      	ldr	r2, [pc, #356]	; (800d2c4 <pass_route+0x27c>)
 800d15e:	21fe      	movs	r1, #254	; 0xfe
 800d160:	54d1      	strb	r1, [r2, r3]
							p = p + 2;
 800d162:	78fb      	ldrb	r3, [r7, #3]
 800d164:	3302      	adds	r3, #2
 800d166:	70fb      	strb	r3, [r7, #3]
 800d168:	e015      	b.n	800d196 <pass_route+0x14e>
							pass[p] = 1;
 800d16a:	78fb      	ldrb	r3, [r7, #3]
 800d16c:	4a55      	ldr	r2, [pc, #340]	; (800d2c4 <pass_route+0x27c>)
 800d16e:	2101      	movs	r1, #1
 800d170:	54d1      	strb	r1, [r2, r3]
							pass[p+1] = -1;
 800d172:	78fb      	ldrb	r3, [r7, #3]
 800d174:	3301      	adds	r3, #1
 800d176:	4a53      	ldr	r2, [pc, #332]	; (800d2c4 <pass_route+0x27c>)
 800d178:	21ff      	movs	r1, #255	; 0xff
 800d17a:	54d1      	strb	r1, [r2, r3]
							pass[p+2] = -1;
 800d17c:	78fb      	ldrb	r3, [r7, #3]
 800d17e:	3302      	adds	r3, #2
 800d180:	4a50      	ldr	r2, [pc, #320]	; (800d2c4 <pass_route+0x27c>)
 800d182:	21ff      	movs	r1, #255	; 0xff
 800d184:	54d1      	strb	r1, [r2, r3]
							pass[p+3] = -2;				//a直進→右→右→左(左以外は存在しない)　そのまま保存
 800d186:	78fb      	ldrb	r3, [r7, #3]
 800d188:	3303      	adds	r3, #3
 800d18a:	4a4e      	ldr	r2, [pc, #312]	; (800d2c4 <pass_route+0x27c>)
 800d18c:	21fe      	movs	r1, #254	; 0xfe
 800d18e:	54d1      	strb	r1, [r2, r3]
							p = p + 3;
 800d190:	78fb      	ldrb	r3, [r7, #3]
 800d192:	3303      	adds	r3, #3
 800d194:	70fb      	strb	r3, [r7, #3]
						i = i + 4;
 800d196:	687b      	ldr	r3, [r7, #4]
 800d198:	3304      	adds	r3, #4
 800d19a:	607b      	str	r3, [r7, #4]
					break;
 800d19c:	e05e      	b.n	800d25c <pass_route+0x214>

				case 0x11:								//a直進→右→左
					if(p > 0 && pass[p-1] > 0){
 800d19e:	78fb      	ldrb	r3, [r7, #3]
 800d1a0:	2b00      	cmp	r3, #0
 800d1a2:	d01c      	beq.n	800d1de <pass_route+0x196>
 800d1a4:	78fb      	ldrb	r3, [r7, #3]
 800d1a6:	3b01      	subs	r3, #1
 800d1a8:	4a46      	ldr	r2, [pc, #280]	; (800d2c4 <pass_route+0x27c>)
 800d1aa:	56d3      	ldrsb	r3, [r2, r3]
 800d1ac:	2b00      	cmp	r3, #0
 800d1ae:	dd16      	ble.n	800d1de <pass_route+0x196>
						pass[p-1]++;
 800d1b0:	78fb      	ldrb	r3, [r7, #3]
 800d1b2:	3b01      	subs	r3, #1
 800d1b4:	4a43      	ldr	r2, [pc, #268]	; (800d2c4 <pass_route+0x27c>)
 800d1b6:	56d2      	ldrsb	r2, [r2, r3]
 800d1b8:	b2d2      	uxtb	r2, r2
 800d1ba:	3201      	adds	r2, #1
 800d1bc:	b2d2      	uxtb	r2, r2
 800d1be:	b251      	sxtb	r1, r2
 800d1c0:	4a40      	ldr	r2, [pc, #256]	; (800d2c4 <pass_route+0x27c>)
 800d1c2:	54d1      	strb	r1, [r2, r3]
						pass[p] = -1;
 800d1c4:	78fb      	ldrb	r3, [r7, #3]
 800d1c6:	4a3f      	ldr	r2, [pc, #252]	; (800d2c4 <pass_route+0x27c>)
 800d1c8:	21ff      	movs	r1, #255	; 0xff
 800d1ca:	54d1      	strb	r1, [r2, r3]
						pass[p+1] = -2;					//a直進→右→左　そのまま保存　　直前が直進の場合
 800d1cc:	78fb      	ldrb	r3, [r7, #3]
 800d1ce:	3301      	adds	r3, #1
 800d1d0:	4a3c      	ldr	r2, [pc, #240]	; (800d2c4 <pass_route+0x27c>)
 800d1d2:	21fe      	movs	r1, #254	; 0xfe
 800d1d4:	54d1      	strb	r1, [r2, r3]
						p++;
 800d1d6:	78fb      	ldrb	r3, [r7, #3]
 800d1d8:	3301      	adds	r3, #1
 800d1da:	70fb      	strb	r3, [r7, #3]
 800d1dc:	e011      	b.n	800d202 <pass_route+0x1ba>
					}else{
						pass[p] = s;
 800d1de:	78fb      	ldrb	r3, [r7, #3]
 800d1e0:	f997 1002 	ldrsb.w	r1, [r7, #2]
 800d1e4:	4a37      	ldr	r2, [pc, #220]	; (800d2c4 <pass_route+0x27c>)
 800d1e6:	54d1      	strb	r1, [r2, r3]
						pass[p+1] = -1;
 800d1e8:	78fb      	ldrb	r3, [r7, #3]
 800d1ea:	3301      	adds	r3, #1
 800d1ec:	4a35      	ldr	r2, [pc, #212]	; (800d2c4 <pass_route+0x27c>)
 800d1ee:	21ff      	movs	r1, #255	; 0xff
 800d1f0:	54d1      	strb	r1, [r2, r3]
						pass[p+2] = -2;					//a直進→右→左　そのまま保存
 800d1f2:	78fb      	ldrb	r3, [r7, #3]
 800d1f4:	3302      	adds	r3, #2
 800d1f6:	4a33      	ldr	r2, [pc, #204]	; (800d2c4 <pass_route+0x27c>)
 800d1f8:	21fe      	movs	r1, #254	; 0xfe
 800d1fa:	54d1      	strb	r1, [r2, r3]
						p = p + 2;
 800d1fc:	78fb      	ldrb	r3, [r7, #3]
 800d1fe:	3302      	adds	r3, #2
 800d200:	70fb      	strb	r3, [r7, #3]
					}
					i = i + 3;
 800d202:	687b      	ldr	r3, [r7, #4]
 800d204:	3303      	adds	r3, #3
 800d206:	607b      	str	r3, [r7, #4]
					break;
 800d208:	e028      	b.n	800d25c <pass_route+0x214>

				default:								//a直進→右→終了
					if(p > 0 && pass[p-1] > 0){
 800d20a:	78fb      	ldrb	r3, [r7, #3]
 800d20c:	2b00      	cmp	r3, #0
 800d20e:	d014      	beq.n	800d23a <pass_route+0x1f2>
 800d210:	78fb      	ldrb	r3, [r7, #3]
 800d212:	3b01      	subs	r3, #1
 800d214:	4a2b      	ldr	r2, [pc, #172]	; (800d2c4 <pass_route+0x27c>)
 800d216:	56d3      	ldrsb	r3, [r2, r3]
 800d218:	2b00      	cmp	r3, #0
 800d21a:	dd0e      	ble.n	800d23a <pass_route+0x1f2>
						pass[p-1]++;
 800d21c:	78fb      	ldrb	r3, [r7, #3]
 800d21e:	3b01      	subs	r3, #1
 800d220:	4a28      	ldr	r2, [pc, #160]	; (800d2c4 <pass_route+0x27c>)
 800d222:	56d2      	ldrsb	r2, [r2, r3]
 800d224:	b2d2      	uxtb	r2, r2
 800d226:	3201      	adds	r2, #1
 800d228:	b2d2      	uxtb	r2, r2
 800d22a:	b251      	sxtb	r1, r2
 800d22c:	4a25      	ldr	r2, [pc, #148]	; (800d2c4 <pass_route+0x27c>)
 800d22e:	54d1      	strb	r1, [r2, r3]
						pass[p] = -1;					//a直進→右→終了　　直前が直進の場合
 800d230:	78fb      	ldrb	r3, [r7, #3]
 800d232:	4a24      	ldr	r2, [pc, #144]	; (800d2c4 <pass_route+0x27c>)
 800d234:	21ff      	movs	r1, #255	; 0xff
 800d236:	54d1      	strb	r1, [r2, r3]
 800d238:	e00c      	b.n	800d254 <pass_route+0x20c>
					}else{
						pass[p] = s;
 800d23a:	78fb      	ldrb	r3, [r7, #3]
 800d23c:	f997 1002 	ldrsb.w	r1, [r7, #2]
 800d240:	4a20      	ldr	r2, [pc, #128]	; (800d2c4 <pass_route+0x27c>)
 800d242:	54d1      	strb	r1, [r2, r3]
						pass[p+1] = -1;					//a直進→右→終了
 800d244:	78fb      	ldrb	r3, [r7, #3]
 800d246:	3301      	adds	r3, #1
 800d248:	4a1e      	ldr	r2, [pc, #120]	; (800d2c4 <pass_route+0x27c>)
 800d24a:	21ff      	movs	r1, #255	; 0xff
 800d24c:	54d1      	strb	r1, [r2, r3]
						p++;
 800d24e:	78fb      	ldrb	r3, [r7, #3]
 800d250:	3301      	adds	r3, #1
 800d252:	70fb      	strb	r3, [r7, #3]
					}
					i = i + 2;
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	3302      	adds	r3, #2
 800d258:	607b      	str	r3, [r7, #4]
					break;
 800d25a:	bf00      	nop
				}
				break;
 800d25c:	e0e0      	b.n	800d420 <pass_route+0x3d8>

			case 0x11:									//a直進→左
				switch(route[i+2]){
 800d25e:	687b      	ldr	r3, [r7, #4]
 800d260:	3302      	adds	r3, #2
 800d262:	4a19      	ldr	r2, [pc, #100]	; (800d2c8 <pass_route+0x280>)
 800d264:	5cd3      	ldrb	r3, [r2, r3]
 800d266:	2b44      	cmp	r3, #68	; 0x44
 800d268:	d00c      	beq.n	800d284 <pass_route+0x23c>
 800d26a:	2b88      	cmp	r3, #136	; 0x88
 800d26c:	d002      	beq.n	800d274 <pass_route+0x22c>
 800d26e:	2b11      	cmp	r3, #17
 800d270:	d042      	beq.n	800d2f8 <pass_route+0x2b0>
 800d272:	e08e      	b.n	800d392 <pass_route+0x34a>
				case 0x88:								//a直進→左→直進　=　大回り左90度
					pass[p] = -4;
 800d274:	78fb      	ldrb	r3, [r7, #3]
 800d276:	4a13      	ldr	r2, [pc, #76]	; (800d2c4 <pass_route+0x27c>)
 800d278:	21fc      	movs	r1, #252	; 0xfc
 800d27a:	54d1      	strb	r1, [r2, r3]
					i = i + 3;
 800d27c:	687b      	ldr	r3, [r7, #4]
 800d27e:	3303      	adds	r3, #3
 800d280:	607b      	str	r3, [r7, #4]
					break;
 800d282:	e0af      	b.n	800d3e4 <pass_route+0x39c>

				case 0x44:								//a直進→左→右
					if(p > 0 && pass[p-1] > 0){
 800d284:	78fb      	ldrb	r3, [r7, #3]
 800d286:	2b00      	cmp	r3, #0
 800d288:	d020      	beq.n	800d2cc <pass_route+0x284>
 800d28a:	78fb      	ldrb	r3, [r7, #3]
 800d28c:	3b01      	subs	r3, #1
 800d28e:	4a0d      	ldr	r2, [pc, #52]	; (800d2c4 <pass_route+0x27c>)
 800d290:	56d3      	ldrsb	r3, [r2, r3]
 800d292:	2b00      	cmp	r3, #0
 800d294:	dd1a      	ble.n	800d2cc <pass_route+0x284>
						pass[p-1]++;
 800d296:	78fb      	ldrb	r3, [r7, #3]
 800d298:	3b01      	subs	r3, #1
 800d29a:	4a0a      	ldr	r2, [pc, #40]	; (800d2c4 <pass_route+0x27c>)
 800d29c:	56d2      	ldrsb	r2, [r2, r3]
 800d29e:	b2d2      	uxtb	r2, r2
 800d2a0:	3201      	adds	r2, #1
 800d2a2:	b2d2      	uxtb	r2, r2
 800d2a4:	b251      	sxtb	r1, r2
 800d2a6:	4a07      	ldr	r2, [pc, #28]	; (800d2c4 <pass_route+0x27c>)
 800d2a8:	54d1      	strb	r1, [r2, r3]
						pass[p] = -2;
 800d2aa:	78fb      	ldrb	r3, [r7, #3]
 800d2ac:	4a05      	ldr	r2, [pc, #20]	; (800d2c4 <pass_route+0x27c>)
 800d2ae:	21fe      	movs	r1, #254	; 0xfe
 800d2b0:	54d1      	strb	r1, [r2, r3]
						pass[p+1] = -1;					//a直進→左→右　そのまま保存　　直前が直進の場合
 800d2b2:	78fb      	ldrb	r3, [r7, #3]
 800d2b4:	3301      	adds	r3, #1
 800d2b6:	4a03      	ldr	r2, [pc, #12]	; (800d2c4 <pass_route+0x27c>)
 800d2b8:	21ff      	movs	r1, #255	; 0xff
 800d2ba:	54d1      	strb	r1, [r2, r3]
						p++;
 800d2bc:	78fb      	ldrb	r3, [r7, #3]
 800d2be:	3301      	adds	r3, #1
 800d2c0:	70fb      	strb	r3, [r7, #3]
 800d2c2:	e015      	b.n	800d2f0 <pass_route+0x2a8>
 800d2c4:	200003d0 	.word	0x200003d0
 800d2c8:	20000cd8 	.word	0x20000cd8
					}else{
						pass[p] = s;
 800d2cc:	78fb      	ldrb	r3, [r7, #3]
 800d2ce:	f997 1002 	ldrsb.w	r1, [r7, #2]
 800d2d2:	4a64      	ldr	r2, [pc, #400]	; (800d464 <pass_route+0x41c>)
 800d2d4:	54d1      	strb	r1, [r2, r3]
						pass[p+1] = -2;
 800d2d6:	78fb      	ldrb	r3, [r7, #3]
 800d2d8:	3301      	adds	r3, #1
 800d2da:	4a62      	ldr	r2, [pc, #392]	; (800d464 <pass_route+0x41c>)
 800d2dc:	21fe      	movs	r1, #254	; 0xfe
 800d2de:	54d1      	strb	r1, [r2, r3]
						pass[p+2] = -1;					//a直進→左→右　そのまま保存
 800d2e0:	78fb      	ldrb	r3, [r7, #3]
 800d2e2:	3302      	adds	r3, #2
 800d2e4:	4a5f      	ldr	r2, [pc, #380]	; (800d464 <pass_route+0x41c>)
 800d2e6:	21ff      	movs	r1, #255	; 0xff
 800d2e8:	54d1      	strb	r1, [r2, r3]
						p = p + 2;
 800d2ea:	78fb      	ldrb	r3, [r7, #3]
 800d2ec:	3302      	adds	r3, #2
 800d2ee:	70fb      	strb	r3, [r7, #3]
					}
					i = i + 3;
 800d2f0:	687b      	ldr	r3, [r7, #4]
 800d2f2:	3303      	adds	r3, #3
 800d2f4:	607b      	str	r3, [r7, #4]
					break;
 800d2f6:	e075      	b.n	800d3e4 <pass_route+0x39c>

				case 0x11:								//a直進→左→左
					if(route[i+3] == 0x88){				//a直進→左→左→直進　=　大回り左180度
 800d2f8:	687b      	ldr	r3, [r7, #4]
 800d2fa:	3303      	adds	r3, #3
 800d2fc:	4a5a      	ldr	r2, [pc, #360]	; (800d468 <pass_route+0x420>)
 800d2fe:	5cd3      	ldrb	r3, [r2, r3]
 800d300:	2b88      	cmp	r3, #136	; 0x88
 800d302:	d107      	bne.n	800d314 <pass_route+0x2cc>
						pass[p] = -6;
 800d304:	78fb      	ldrb	r3, [r7, #3]
 800d306:	4a57      	ldr	r2, [pc, #348]	; (800d464 <pass_route+0x41c>)
 800d308:	21fa      	movs	r1, #250	; 0xfa
 800d30a:	54d1      	strb	r1, [r2, r3]
						i = i + 4;
 800d30c:	687b      	ldr	r3, [r7, #4]
 800d30e:	3304      	adds	r3, #4
 800d310:	607b      	str	r3, [r7, #4]
							pass[p+3] = -1;				//a直進→左→左→右(右以外は存在しない)　そのまま保存
							p = p + 3;
						}
						i = i + 4;
					}
					break;
 800d312:	e067      	b.n	800d3e4 <pass_route+0x39c>
						if(p > 0 && pass[p-1] > 0){
 800d314:	78fb      	ldrb	r3, [r7, #3]
 800d316:	2b00      	cmp	r3, #0
 800d318:	d021      	beq.n	800d35e <pass_route+0x316>
 800d31a:	78fb      	ldrb	r3, [r7, #3]
 800d31c:	3b01      	subs	r3, #1
 800d31e:	4a51      	ldr	r2, [pc, #324]	; (800d464 <pass_route+0x41c>)
 800d320:	56d3      	ldrsb	r3, [r2, r3]
 800d322:	2b00      	cmp	r3, #0
 800d324:	dd1b      	ble.n	800d35e <pass_route+0x316>
							pass[p-1]++;
 800d326:	78fb      	ldrb	r3, [r7, #3]
 800d328:	3b01      	subs	r3, #1
 800d32a:	4a4e      	ldr	r2, [pc, #312]	; (800d464 <pass_route+0x41c>)
 800d32c:	56d2      	ldrsb	r2, [r2, r3]
 800d32e:	b2d2      	uxtb	r2, r2
 800d330:	3201      	adds	r2, #1
 800d332:	b2d2      	uxtb	r2, r2
 800d334:	b251      	sxtb	r1, r2
 800d336:	4a4b      	ldr	r2, [pc, #300]	; (800d464 <pass_route+0x41c>)
 800d338:	54d1      	strb	r1, [r2, r3]
							pass[p] = -2;
 800d33a:	78fb      	ldrb	r3, [r7, #3]
 800d33c:	4a49      	ldr	r2, [pc, #292]	; (800d464 <pass_route+0x41c>)
 800d33e:	21fe      	movs	r1, #254	; 0xfe
 800d340:	54d1      	strb	r1, [r2, r3]
							pass[p+1] = -2;
 800d342:	78fb      	ldrb	r3, [r7, #3]
 800d344:	3301      	adds	r3, #1
 800d346:	4a47      	ldr	r2, [pc, #284]	; (800d464 <pass_route+0x41c>)
 800d348:	21fe      	movs	r1, #254	; 0xfe
 800d34a:	54d1      	strb	r1, [r2, r3]
							pass[p+2] = -1;				//a直進→左→左→右(右以外は存在しない)　そのまま保存　　直前が直進の場合
 800d34c:	78fb      	ldrb	r3, [r7, #3]
 800d34e:	3302      	adds	r3, #2
 800d350:	4a44      	ldr	r2, [pc, #272]	; (800d464 <pass_route+0x41c>)
 800d352:	21ff      	movs	r1, #255	; 0xff
 800d354:	54d1      	strb	r1, [r2, r3]
							p = p + 2;
 800d356:	78fb      	ldrb	r3, [r7, #3]
 800d358:	3302      	adds	r3, #2
 800d35a:	70fb      	strb	r3, [r7, #3]
 800d35c:	e015      	b.n	800d38a <pass_route+0x342>
							pass[p] = 1;
 800d35e:	78fb      	ldrb	r3, [r7, #3]
 800d360:	4a40      	ldr	r2, [pc, #256]	; (800d464 <pass_route+0x41c>)
 800d362:	2101      	movs	r1, #1
 800d364:	54d1      	strb	r1, [r2, r3]
							pass[p+1] = -2;
 800d366:	78fb      	ldrb	r3, [r7, #3]
 800d368:	3301      	adds	r3, #1
 800d36a:	4a3e      	ldr	r2, [pc, #248]	; (800d464 <pass_route+0x41c>)
 800d36c:	21fe      	movs	r1, #254	; 0xfe
 800d36e:	54d1      	strb	r1, [r2, r3]
							pass[p+2] = -2;
 800d370:	78fb      	ldrb	r3, [r7, #3]
 800d372:	3302      	adds	r3, #2
 800d374:	4a3b      	ldr	r2, [pc, #236]	; (800d464 <pass_route+0x41c>)
 800d376:	21fe      	movs	r1, #254	; 0xfe
 800d378:	54d1      	strb	r1, [r2, r3]
							pass[p+3] = -1;				//a直進→左→左→右(右以外は存在しない)　そのまま保存
 800d37a:	78fb      	ldrb	r3, [r7, #3]
 800d37c:	3303      	adds	r3, #3
 800d37e:	4a39      	ldr	r2, [pc, #228]	; (800d464 <pass_route+0x41c>)
 800d380:	21ff      	movs	r1, #255	; 0xff
 800d382:	54d1      	strb	r1, [r2, r3]
							p = p + 3;
 800d384:	78fb      	ldrb	r3, [r7, #3]
 800d386:	3303      	adds	r3, #3
 800d388:	70fb      	strb	r3, [r7, #3]
						i = i + 4;
 800d38a:	687b      	ldr	r3, [r7, #4]
 800d38c:	3304      	adds	r3, #4
 800d38e:	607b      	str	r3, [r7, #4]
					break;
 800d390:	e028      	b.n	800d3e4 <pass_route+0x39c>

				default:								//a直進→左→終了
					if(p > 0 && pass[p-1] > 0){
 800d392:	78fb      	ldrb	r3, [r7, #3]
 800d394:	2b00      	cmp	r3, #0
 800d396:	d014      	beq.n	800d3c2 <pass_route+0x37a>
 800d398:	78fb      	ldrb	r3, [r7, #3]
 800d39a:	3b01      	subs	r3, #1
 800d39c:	4a31      	ldr	r2, [pc, #196]	; (800d464 <pass_route+0x41c>)
 800d39e:	56d3      	ldrsb	r3, [r2, r3]
 800d3a0:	2b00      	cmp	r3, #0
 800d3a2:	dd0e      	ble.n	800d3c2 <pass_route+0x37a>
						pass[p-1]++;
 800d3a4:	78fb      	ldrb	r3, [r7, #3]
 800d3a6:	3b01      	subs	r3, #1
 800d3a8:	4a2e      	ldr	r2, [pc, #184]	; (800d464 <pass_route+0x41c>)
 800d3aa:	56d2      	ldrsb	r2, [r2, r3]
 800d3ac:	b2d2      	uxtb	r2, r2
 800d3ae:	3201      	adds	r2, #1
 800d3b0:	b2d2      	uxtb	r2, r2
 800d3b2:	b251      	sxtb	r1, r2
 800d3b4:	4a2b      	ldr	r2, [pc, #172]	; (800d464 <pass_route+0x41c>)
 800d3b6:	54d1      	strb	r1, [r2, r3]
						pass[p] = -2;					//a直進→左→終了　そのまま保存　　直前が直進の場合
 800d3b8:	78fb      	ldrb	r3, [r7, #3]
 800d3ba:	4a2a      	ldr	r2, [pc, #168]	; (800d464 <pass_route+0x41c>)
 800d3bc:	21fe      	movs	r1, #254	; 0xfe
 800d3be:	54d1      	strb	r1, [r2, r3]
 800d3c0:	e00c      	b.n	800d3dc <pass_route+0x394>
					}else{
						pass[p] = s;
 800d3c2:	78fb      	ldrb	r3, [r7, #3]
 800d3c4:	f997 1002 	ldrsb.w	r1, [r7, #2]
 800d3c8:	4a26      	ldr	r2, [pc, #152]	; (800d464 <pass_route+0x41c>)
 800d3ca:	54d1      	strb	r1, [r2, r3]
						pass[p+1] = -2;					//a直進→左→終了　そのまま保存
 800d3cc:	78fb      	ldrb	r3, [r7, #3]
 800d3ce:	3301      	adds	r3, #1
 800d3d0:	4a24      	ldr	r2, [pc, #144]	; (800d464 <pass_route+0x41c>)
 800d3d2:	21fe      	movs	r1, #254	; 0xfe
 800d3d4:	54d1      	strb	r1, [r2, r3]
						p++;
 800d3d6:	78fb      	ldrb	r3, [r7, #3]
 800d3d8:	3301      	adds	r3, #1
 800d3da:	70fb      	strb	r3, [r7, #3]
					}
					i = i + 2;
 800d3dc:	687b      	ldr	r3, [r7, #4]
 800d3de:	3302      	adds	r3, #2
 800d3e0:	607b      	str	r3, [r7, #4]
					break;
 800d3e2:	bf00      	nop
				}
				break;
 800d3e4:	e01c      	b.n	800d420 <pass_route+0x3d8>

			default:									//a直進→終了
				if(p > 0 && pass[p-1] > 0){
 800d3e6:	78fb      	ldrb	r3, [r7, #3]
 800d3e8:	2b00      	cmp	r3, #0
 800d3ea:	d010      	beq.n	800d40e <pass_route+0x3c6>
 800d3ec:	78fb      	ldrb	r3, [r7, #3]
 800d3ee:	3b01      	subs	r3, #1
 800d3f0:	4a1c      	ldr	r2, [pc, #112]	; (800d464 <pass_route+0x41c>)
 800d3f2:	56d3      	ldrsb	r3, [r2, r3]
 800d3f4:	2b00      	cmp	r3, #0
 800d3f6:	dd0a      	ble.n	800d40e <pass_route+0x3c6>
					pass[p-1]++;						//a直進→終了　そのまま保存　　直前が直進の場合
 800d3f8:	78fb      	ldrb	r3, [r7, #3]
 800d3fa:	3b01      	subs	r3, #1
 800d3fc:	4a19      	ldr	r2, [pc, #100]	; (800d464 <pass_route+0x41c>)
 800d3fe:	56d2      	ldrsb	r2, [r2, r3]
 800d400:	b2d2      	uxtb	r2, r2
 800d402:	3201      	adds	r2, #1
 800d404:	b2d2      	uxtb	r2, r2
 800d406:	b251      	sxtb	r1, r2
 800d408:	4a16      	ldr	r2, [pc, #88]	; (800d464 <pass_route+0x41c>)
 800d40a:	54d1      	strb	r1, [r2, r3]
 800d40c:	e004      	b.n	800d418 <pass_route+0x3d0>
				}else{
					pass[p] = s;						//a直進→終了　そのまま保存
 800d40e:	78fb      	ldrb	r3, [r7, #3]
 800d410:	f997 1002 	ldrsb.w	r1, [r7, #2]
 800d414:	4a13      	ldr	r2, [pc, #76]	; (800d464 <pass_route+0x41c>)
 800d416:	54d1      	strb	r1, [r2, r3]
				}
				i++;
 800d418:	687b      	ldr	r3, [r7, #4]
 800d41a:	3301      	adds	r3, #1
 800d41c:	607b      	str	r3, [r7, #4]
			}
			break;
 800d41e:	e010      	b.n	800d442 <pass_route+0x3fa>
 800d420:	e00f      	b.n	800d442 <pass_route+0x3fa>

		case 0x44:										//a右　=　右スラローム
			pass[p] = -1;
 800d422:	78fb      	ldrb	r3, [r7, #3]
 800d424:	4a0f      	ldr	r2, [pc, #60]	; (800d464 <pass_route+0x41c>)
 800d426:	21ff      	movs	r1, #255	; 0xff
 800d428:	54d1      	strb	r1, [r2, r3]
			i++;
 800d42a:	687b      	ldr	r3, [r7, #4]
 800d42c:	3301      	adds	r3, #1
 800d42e:	607b      	str	r3, [r7, #4]
			break;
 800d430:	e007      	b.n	800d442 <pass_route+0x3fa>

		case 0x11:										//a左　=　左スラローム
			pass[p] = -2;
 800d432:	78fb      	ldrb	r3, [r7, #3]
 800d434:	4a0b      	ldr	r2, [pc, #44]	; (800d464 <pass_route+0x41c>)
 800d436:	21fe      	movs	r1, #254	; 0xfe
 800d438:	54d1      	strb	r1, [r2, r3]
			i++;
 800d43a:	687b      	ldr	r3, [r7, #4]
 800d43c:	3301      	adds	r3, #1
 800d43e:	607b      	str	r3, [r7, #4]
			break;
 800d440:	bf00      	nop
		}
		p++;											//pass配列数カウンタ+1
 800d442:	78fb      	ldrb	r3, [r7, #3]
 800d444:	3301      	adds	r3, #1
 800d446:	70fb      	strb	r3, [r7, #3]
	while(route[i] != 0xff){
 800d448:	4a07      	ldr	r2, [pc, #28]	; (800d468 <pass_route+0x420>)
 800d44a:	687b      	ldr	r3, [r7, #4]
 800d44c:	4413      	add	r3, r2
 800d44e:	781b      	ldrb	r3, [r3, #0]
 800d450:	2bff      	cmp	r3, #255	; 0xff
 800d452:	f47f ae11 	bne.w	800d078 <pass_route+0x30>
	}
}
 800d456:	bf00      	nop
 800d458:	370c      	adds	r7, #12
 800d45a:	46bd      	mov	sp, r7
 800d45c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d460:	4770      	bx	lr
 800d462:	bf00      	nop
 800d464:	200003d0 	.word	0x200003d0
 800d468:	20000cd8 	.word	0x20000cd8

0800d46c <store_map_in_eeprom>:
//store_map_in_eeprom
// mapデータをeepromに格納する
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void store_map_in_eeprom(void){
 800d46c:	b580      	push	{r7, lr}
 800d46e:	b082      	sub	sp, #8
 800d470:	af00      	add	r7, sp, #0
	printf("eprom func start \n");
 800d472:	4818      	ldr	r0, [pc, #96]	; (800d4d4 <store_map_in_eeprom+0x68>)
 800d474:	f000 ff28 	bl	800e2c8 <puts>
	eeprom_enable_write();
 800d478:	f7fb fb6c 	bl	8008b54 <eeprom_enable_write>
	printf("eprom enable_write fin \n");
 800d47c:	4816      	ldr	r0, [pc, #88]	; (800d4d8 <store_map_in_eeprom+0x6c>)
 800d47e:	f000 ff23 	bl	800e2c8 <puts>
	int i;
	for(i = 0; i < 16; i++){
 800d482:	2300      	movs	r3, #0
 800d484:	607b      	str	r3, [r7, #4]
 800d486:	e01b      	b.n	800d4c0 <store_map_in_eeprom+0x54>
		int j;
		for(j = 0; j < 16; j++){
 800d488:	2300      	movs	r3, #0
 800d48a:	603b      	str	r3, [r7, #0]
 800d48c:	e012      	b.n	800d4b4 <store_map_in_eeprom+0x48>
			eeprom_write_halfword(i*16 + j, (uint16_t) map[i][j]);
 800d48e:	687b      	ldr	r3, [r7, #4]
 800d490:	011a      	lsls	r2, r3, #4
 800d492:	683b      	ldr	r3, [r7, #0]
 800d494:	4413      	add	r3, r2
 800d496:	4618      	mov	r0, r3
 800d498:	4a10      	ldr	r2, [pc, #64]	; (800d4dc <store_map_in_eeprom+0x70>)
 800d49a:	687b      	ldr	r3, [r7, #4]
 800d49c:	011b      	lsls	r3, r3, #4
 800d49e:	441a      	add	r2, r3
 800d4a0:	683b      	ldr	r3, [r7, #0]
 800d4a2:	4413      	add	r3, r2
 800d4a4:	781b      	ldrb	r3, [r3, #0]
 800d4a6:	b29b      	uxth	r3, r3
 800d4a8:	4619      	mov	r1, r3
 800d4aa:	f7fb fb7e 	bl	8008baa <eeprom_write_halfword>
		for(j = 0; j < 16; j++){
 800d4ae:	683b      	ldr	r3, [r7, #0]
 800d4b0:	3301      	adds	r3, #1
 800d4b2:	603b      	str	r3, [r7, #0]
 800d4b4:	683b      	ldr	r3, [r7, #0]
 800d4b6:	2b0f      	cmp	r3, #15
 800d4b8:	dde9      	ble.n	800d48e <store_map_in_eeprom+0x22>
	for(i = 0; i < 16; i++){
 800d4ba:	687b      	ldr	r3, [r7, #4]
 800d4bc:	3301      	adds	r3, #1
 800d4be:	607b      	str	r3, [r7, #4]
 800d4c0:	687b      	ldr	r3, [r7, #4]
 800d4c2:	2b0f      	cmp	r3, #15
 800d4c4:	dde0      	ble.n	800d488 <store_map_in_eeprom+0x1c>
		}
	}
	eeprom_disable_write();
 800d4c6:	f7fb fb69 	bl	8008b9c <eeprom_disable_write>
}
 800d4ca:	bf00      	nop
 800d4cc:	3708      	adds	r7, #8
 800d4ce:	46bd      	mov	sp, r7
 800d4d0:	bd80      	pop	{r7, pc}
 800d4d2:	bf00      	nop
 800d4d4:	0800f828 	.word	0x0800f828
 800d4d8:	0800f83c 	.word	0x0800f83c
 800d4dc:	2000022c 	.word	0x2000022c

0800d4e0 <load_map_from_eeprom>:
//load_map_in_eeprom
// mapデータをeepromから取得する
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void load_map_from_eeprom(void){
 800d4e0:	b580      	push	{r7, lr}
 800d4e2:	b082      	sub	sp, #8
 800d4e4:	af00      	add	r7, sp, #0
	int i;
	for(i = 0; i < 16; i++){
 800d4e6:	2300      	movs	r3, #0
 800d4e8:	607b      	str	r3, [r7, #4]
 800d4ea:	e01c      	b.n	800d526 <load_map_from_eeprom+0x46>
		int j;
		for(j = 0; j < 16; j++){
 800d4ec:	2300      	movs	r3, #0
 800d4ee:	603b      	str	r3, [r7, #0]
 800d4f0:	e013      	b.n	800d51a <load_map_from_eeprom+0x3a>
			map[i][j] = (uint8_t) eeprom_read_halfword(i*16 + j);
 800d4f2:	687b      	ldr	r3, [r7, #4]
 800d4f4:	011a      	lsls	r2, r3, #4
 800d4f6:	683b      	ldr	r3, [r7, #0]
 800d4f8:	4413      	add	r3, r2
 800d4fa:	4618      	mov	r0, r3
 800d4fc:	f7fb fb72 	bl	8008be4 <eeprom_read_halfword>
 800d500:	4603      	mov	r3, r0
 800d502:	b2d9      	uxtb	r1, r3
 800d504:	4a0b      	ldr	r2, [pc, #44]	; (800d534 <load_map_from_eeprom+0x54>)
 800d506:	687b      	ldr	r3, [r7, #4]
 800d508:	011b      	lsls	r3, r3, #4
 800d50a:	441a      	add	r2, r3
 800d50c:	683b      	ldr	r3, [r7, #0]
 800d50e:	4413      	add	r3, r2
 800d510:	460a      	mov	r2, r1
 800d512:	701a      	strb	r2, [r3, #0]
		for(j = 0; j < 16; j++){
 800d514:	683b      	ldr	r3, [r7, #0]
 800d516:	3301      	adds	r3, #1
 800d518:	603b      	str	r3, [r7, #0]
 800d51a:	683b      	ldr	r3, [r7, #0]
 800d51c:	2b0f      	cmp	r3, #15
 800d51e:	dde8      	ble.n	800d4f2 <load_map_from_eeprom+0x12>
	for(i = 0; i < 16; i++){
 800d520:	687b      	ldr	r3, [r7, #4]
 800d522:	3301      	adds	r3, #1
 800d524:	607b      	str	r3, [r7, #4]
 800d526:	687b      	ldr	r3, [r7, #4]
 800d528:	2b0f      	cmp	r3, #15
 800d52a:	dddf      	ble.n	800d4ec <load_map_from_eeprom+0xc>
		}
	}
}
 800d52c:	bf00      	nop
 800d52e:	3708      	adds	r7, #8
 800d530:	46bd      	mov	sp, r7
 800d532:	bd80      	pop	{r7, pc}
 800d534:	2000022c 	.word	0x2000022c

0800d538 <sensor_init>:

#include "global.h"


void sensor_init(void){
 800d538:	b480      	push	{r7}
 800d53a:	af00      	add	r7, sp, #0
	tp = 0;
 800d53c:	4b0e      	ldr	r3, [pc, #56]	; (800d578 <sensor_init+0x40>)
 800d53e:	2200      	movs	r2, #0
 800d540:	701a      	strb	r2, [r3, #0]
	ad_l = ad_r = ad_fr = ad_fl = 0;
 800d542:	4b0e      	ldr	r3, [pc, #56]	; (800d57c <sensor_init+0x44>)
 800d544:	2200      	movs	r2, #0
 800d546:	601a      	str	r2, [r3, #0]
 800d548:	4b0c      	ldr	r3, [pc, #48]	; (800d57c <sensor_init+0x44>)
 800d54a:	681b      	ldr	r3, [r3, #0]
 800d54c:	4a0c      	ldr	r2, [pc, #48]	; (800d580 <sensor_init+0x48>)
 800d54e:	6013      	str	r3, [r2, #0]
 800d550:	4b0b      	ldr	r3, [pc, #44]	; (800d580 <sensor_init+0x48>)
 800d552:	681b      	ldr	r3, [r3, #0]
 800d554:	4a0b      	ldr	r2, [pc, #44]	; (800d584 <sensor_init+0x4c>)
 800d556:	6013      	str	r3, [r2, #0]
 800d558:	4b0a      	ldr	r3, [pc, #40]	; (800d584 <sensor_init+0x4c>)
 800d55a:	681b      	ldr	r3, [r3, #0]
 800d55c:	4a0a      	ldr	r2, [pc, #40]	; (800d588 <sensor_init+0x50>)
 800d55e:	6013      	str	r3, [r2, #0]
	base_l = base_r = 0;
 800d560:	4b0a      	ldr	r3, [pc, #40]	; (800d58c <sensor_init+0x54>)
 800d562:	2200      	movs	r2, #0
 800d564:	801a      	strh	r2, [r3, #0]
 800d566:	4b09      	ldr	r3, [pc, #36]	; (800d58c <sensor_init+0x54>)
 800d568:	881a      	ldrh	r2, [r3, #0]
 800d56a:	4b09      	ldr	r3, [pc, #36]	; (800d590 <sensor_init+0x58>)
 800d56c:	801a      	strh	r2, [r3, #0]
}
 800d56e:	bf00      	nop
 800d570:	46bd      	mov	sp, r7
 800d572:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d576:	4770      	bx	lr
 800d578:	20000fff 	.word	0x20000fff
 800d57c:	20000dd8 	.word	0x20000dd8
 800d580:	20000c84 	.word	0x20000c84
 800d584:	20000fe4 	.word	0x20000fe4
 800d588:	20000b7c 	.word	0x20000b7c
 800d58c:	20000340 	.word	0x20000340
 800d590:	200003cc 	.word	0x200003cc

0800d594 <get_base>:


uint8_t get_base(){
 800d594:	b480      	push	{r7}
 800d596:	b083      	sub	sp, #12
 800d598:	af00      	add	r7, sp, #0
	uint8_t res = 1;									//for return
 800d59a:	2301      	movs	r3, #1
 800d59c:	71fb      	strb	r3, [r7, #7]

	base_l = ad_l;										//sensor value base L
 800d59e:	4b08      	ldr	r3, [pc, #32]	; (800d5c0 <get_base+0x2c>)
 800d5a0:	681b      	ldr	r3, [r3, #0]
 800d5a2:	b29a      	uxth	r2, r3
 800d5a4:	4b07      	ldr	r3, [pc, #28]	; (800d5c4 <get_base+0x30>)
 800d5a6:	801a      	strh	r2, [r3, #0]
	base_r = ad_r;										//sensor value base R
 800d5a8:	4b07      	ldr	r3, [pc, #28]	; (800d5c8 <get_base+0x34>)
 800d5aa:	681b      	ldr	r3, [r3, #0]
 800d5ac:	b29a      	uxth	r2, r3
 800d5ae:	4b07      	ldr	r3, [pc, #28]	; (800d5cc <get_base+0x38>)
 800d5b0:	801a      	strh	r2, [r3, #0]

	return res;											//
 800d5b2:	79fb      	ldrb	r3, [r7, #7]
}
 800d5b4:	4618      	mov	r0, r3
 800d5b6:	370c      	adds	r7, #12
 800d5b8:	46bd      	mov	sp, r7
 800d5ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5be:	4770      	bx	lr
 800d5c0:	20000b7c 	.word	0x20000b7c
 800d5c4:	200003cc 	.word	0x200003cc
 800d5c8:	20000fe4 	.word	0x20000fe4
 800d5cc:	20000340 	.word	0x20000340

0800d5d0 <get_wall_info>:


void get_wall_info(){
 800d5d0:	b480      	push	{r7}
 800d5d2:	af00      	add	r7, sp, #0

	//----reset----
	wall_info = 0x00;									//wall
 800d5d4:	4b16      	ldr	r3, [pc, #88]	; (800d630 <get_wall_info+0x60>)
 800d5d6:	2200      	movs	r2, #0
 800d5d8:	701a      	strb	r2, [r3, #0]
	//----look forward----
	if(ad_fr > WALL_BASE_FR || ad_fl > WALL_BASE_FL){
 800d5da:	4b16      	ldr	r3, [pc, #88]	; (800d634 <get_wall_info+0x64>)
 800d5dc:	681b      	ldr	r3, [r3, #0]
 800d5de:	2b96      	cmp	r3, #150	; 0x96
 800d5e0:	d803      	bhi.n	800d5ea <get_wall_info+0x1a>
 800d5e2:	4b15      	ldr	r3, [pc, #84]	; (800d638 <get_wall_info+0x68>)
 800d5e4:	681b      	ldr	r3, [r3, #0]
 800d5e6:	2bfa      	cmp	r3, #250	; 0xfa
 800d5e8:	d906      	bls.n	800d5f8 <get_wall_info+0x28>
		wall_info |= 0x88;								//forward check
 800d5ea:	4b11      	ldr	r3, [pc, #68]	; (800d630 <get_wall_info+0x60>)
 800d5ec:	781b      	ldrb	r3, [r3, #0]
 800d5ee:	f063 0377 	orn	r3, r3, #119	; 0x77
 800d5f2:	b2da      	uxtb	r2, r3
 800d5f4:	4b0e      	ldr	r3, [pc, #56]	; (800d630 <get_wall_info+0x60>)
 800d5f6:	701a      	strb	r2, [r3, #0]
	}
	//----look right----
	if(ad_r > WALL_BASE_R){
 800d5f8:	4b10      	ldr	r3, [pc, #64]	; (800d63c <get_wall_info+0x6c>)
 800d5fa:	681b      	ldr	r3, [r3, #0]
 800d5fc:	2b64      	cmp	r3, #100	; 0x64
 800d5fe:	d906      	bls.n	800d60e <get_wall_info+0x3e>
		wall_info |= 0x44;								//right check
 800d600:	4b0b      	ldr	r3, [pc, #44]	; (800d630 <get_wall_info+0x60>)
 800d602:	781b      	ldrb	r3, [r3, #0]
 800d604:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 800d608:	b2da      	uxtb	r2, r3
 800d60a:	4b09      	ldr	r3, [pc, #36]	; (800d630 <get_wall_info+0x60>)
 800d60c:	701a      	strb	r2, [r3, #0]
	}
	//----look left----
	if(ad_l > WALL_BASE_L){
 800d60e:	4b0c      	ldr	r3, [pc, #48]	; (800d640 <get_wall_info+0x70>)
 800d610:	681b      	ldr	r3, [r3, #0]
 800d612:	2b64      	cmp	r3, #100	; 0x64
 800d614:	d906      	bls.n	800d624 <get_wall_info+0x54>
		wall_info |= 0x11;								//light check
 800d616:	4b06      	ldr	r3, [pc, #24]	; (800d630 <get_wall_info+0x60>)
 800d618:	781b      	ldrb	r3, [r3, #0]
 800d61a:	f043 0311 	orr.w	r3, r3, #17
 800d61e:	b2da      	uxtb	r2, r3
 800d620:	4b03      	ldr	r3, [pc, #12]	; (800d630 <get_wall_info+0x60>)
 800d622:	701a      	strb	r2, [r3, #0]
	}
}
 800d624:	bf00      	nop
 800d626:	46bd      	mov	sp, r7
 800d628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d62c:	4770      	bx	lr
 800d62e:	bf00      	nop
 800d630:	20000348 	.word	0x20000348
 800d634:	20000c84 	.word	0x20000c84
 800d638:	20000dd8 	.word	0x20000dd8
 800d63c:	20000fe4 	.word	0x20000fe4
 800d640:	20000b7c 	.word	0x20000b7c

0800d644 <led_write>:
//led_write
//aモード選択用LEDのON-OFF
//a引数：led1(0=>OFF, 1=>ON), led2(0=>OFF, 1=>ON), led3(0=>OFF, 1=>ON)
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void led_write(uint8_t led1, uint8_t led2, uint8_t led3){
 800d644:	b580      	push	{r7, lr}
 800d646:	b082      	sub	sp, #8
 800d648:	af00      	add	r7, sp, #0
 800d64a:	4603      	mov	r3, r0
 800d64c:	71fb      	strb	r3, [r7, #7]
 800d64e:	460b      	mov	r3, r1
 800d650:	71bb      	strb	r3, [r7, #6]
 800d652:	4613      	mov	r3, r2
 800d654:	717b      	strb	r3, [r7, #5]
	if(led1) HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 800d656:	79fb      	ldrb	r3, [r7, #7]
 800d658:	2b00      	cmp	r3, #0
 800d65a:	d005      	beq.n	800d668 <led_write+0x24>
 800d65c:	2201      	movs	r2, #1
 800d65e:	2110      	movs	r1, #16
 800d660:	4814      	ldr	r0, [pc, #80]	; (800d6b4 <led_write+0x70>)
 800d662:	f7f4 fe4f 	bl	8002304 <HAL_GPIO_WritePin>
 800d666:	e004      	b.n	800d672 <led_write+0x2e>
	else HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 800d668:	2200      	movs	r2, #0
 800d66a:	2110      	movs	r1, #16
 800d66c:	4811      	ldr	r0, [pc, #68]	; (800d6b4 <led_write+0x70>)
 800d66e:	f7f4 fe49 	bl	8002304 <HAL_GPIO_WritePin>

	if(led2) HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 800d672:	79bb      	ldrb	r3, [r7, #6]
 800d674:	2b00      	cmp	r3, #0
 800d676:	d005      	beq.n	800d684 <led_write+0x40>
 800d678:	2201      	movs	r2, #1
 800d67a:	2140      	movs	r1, #64	; 0x40
 800d67c:	480d      	ldr	r0, [pc, #52]	; (800d6b4 <led_write+0x70>)
 800d67e:	f7f4 fe41 	bl	8002304 <HAL_GPIO_WritePin>
 800d682:	e004      	b.n	800d68e <led_write+0x4a>
	else HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 800d684:	2200      	movs	r2, #0
 800d686:	2140      	movs	r1, #64	; 0x40
 800d688:	480a      	ldr	r0, [pc, #40]	; (800d6b4 <led_write+0x70>)
 800d68a:	f7f4 fe3b 	bl	8002304 <HAL_GPIO_WritePin>

	if(led3) HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);
 800d68e:	797b      	ldrb	r3, [r7, #5]
 800d690:	2b00      	cmp	r3, #0
 800d692:	d005      	beq.n	800d6a0 <led_write+0x5c>
 800d694:	2201      	movs	r2, #1
 800d696:	2180      	movs	r1, #128	; 0x80
 800d698:	4806      	ldr	r0, [pc, #24]	; (800d6b4 <led_write+0x70>)
 800d69a:	f7f4 fe33 	bl	8002304 <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
}
 800d69e:	e004      	b.n	800d6aa <led_write+0x66>
	else HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 800d6a0:	2200      	movs	r2, #0
 800d6a2:	2180      	movs	r1, #128	; 0x80
 800d6a4:	4803      	ldr	r0, [pc, #12]	; (800d6b4 <led_write+0x70>)
 800d6a6:	f7f4 fe2d 	bl	8002304 <HAL_GPIO_WritePin>
}
 800d6aa:	bf00      	nop
 800d6ac:	3708      	adds	r7, #8
 800d6ae:	46bd      	mov	sp, r7
 800d6b0:	bd80      	pop	{r7, pc}
 800d6b2:	bf00      	nop
 800d6b4:	40020000 	.word	0x40020000

0800d6b8 <full_led_write>:
//full_led_write
//aフルカラーLEDの色選択
//a引数：fulled(0=>OFF, 1=>a赤, 2=>緑, 3=>青, 4=>青緑, 5=>紫, 6=>黄, 7=>白)
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void full_led_write(uint8_t fulled){
 800d6b8:	b580      	push	{r7, lr}
 800d6ba:	b082      	sub	sp, #8
 800d6bc:	af00      	add	r7, sp, #0
 800d6be:	4603      	mov	r3, r0
 800d6c0:	71fb      	strb	r3, [r7, #7]
	if(fulled == 0){
 800d6c2:	79fb      	ldrb	r3, [r7, #7]
 800d6c4:	2b00      	cmp	r3, #0
 800d6c6:	d112      	bne.n	800d6ee <full_led_write+0x36>
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
 800d6c8:	2201      	movs	r2, #1
 800d6ca:	f44f 7180 	mov.w	r1, #256	; 0x100
 800d6ce:	4856      	ldr	r0, [pc, #344]	; (800d828 <full_led_write+0x170>)
 800d6d0:	f7f4 fe18 	bl	8002304 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 800d6d4:	2201      	movs	r2, #1
 800d6d6:	f44f 7100 	mov.w	r1, #512	; 0x200
 800d6da:	4853      	ldr	r0, [pc, #332]	; (800d828 <full_led_write+0x170>)
 800d6dc:	f7f4 fe12 	bl	8002304 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 800d6e0:	2201      	movs	r2, #1
 800d6e2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800d6e6:	4851      	ldr	r0, [pc, #324]	; (800d82c <full_led_write+0x174>)
 800d6e8:	f7f4 fe0c 	bl	8002304 <HAL_GPIO_WritePin>
	else if(fulled == 7){
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
	    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
	}
}
 800d6ec:	e098      	b.n	800d820 <full_led_write+0x168>
	else if(fulled == 1){
 800d6ee:	79fb      	ldrb	r3, [r7, #7]
 800d6f0:	2b01      	cmp	r3, #1
 800d6f2:	d112      	bne.n	800d71a <full_led_write+0x62>
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
 800d6f4:	2201      	movs	r2, #1
 800d6f6:	f44f 7180 	mov.w	r1, #256	; 0x100
 800d6fa:	484b      	ldr	r0, [pc, #300]	; (800d828 <full_led_write+0x170>)
 800d6fc:	f7f4 fe02 	bl	8002304 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 800d700:	2201      	movs	r2, #1
 800d702:	f44f 7100 	mov.w	r1, #512	; 0x200
 800d706:	4848      	ldr	r0, [pc, #288]	; (800d828 <full_led_write+0x170>)
 800d708:	f7f4 fdfc 	bl	8002304 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800d70c:	2200      	movs	r2, #0
 800d70e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800d712:	4846      	ldr	r0, [pc, #280]	; (800d82c <full_led_write+0x174>)
 800d714:	f7f4 fdf6 	bl	8002304 <HAL_GPIO_WritePin>
}
 800d718:	e082      	b.n	800d820 <full_led_write+0x168>
	else if(fulled == 2){
 800d71a:	79fb      	ldrb	r3, [r7, #7]
 800d71c:	2b02      	cmp	r3, #2
 800d71e:	d112      	bne.n	800d746 <full_led_write+0x8e>
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
 800d720:	2201      	movs	r2, #1
 800d722:	f44f 7180 	mov.w	r1, #256	; 0x100
 800d726:	4840      	ldr	r0, [pc, #256]	; (800d828 <full_led_write+0x170>)
 800d728:	f7f4 fdec 	bl	8002304 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 800d72c:	2200      	movs	r2, #0
 800d72e:	f44f 7100 	mov.w	r1, #512	; 0x200
 800d732:	483d      	ldr	r0, [pc, #244]	; (800d828 <full_led_write+0x170>)
 800d734:	f7f4 fde6 	bl	8002304 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 800d738:	2201      	movs	r2, #1
 800d73a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800d73e:	483b      	ldr	r0, [pc, #236]	; (800d82c <full_led_write+0x174>)
 800d740:	f7f4 fde0 	bl	8002304 <HAL_GPIO_WritePin>
}
 800d744:	e06c      	b.n	800d820 <full_led_write+0x168>
	else if(fulled == 3){
 800d746:	79fb      	ldrb	r3, [r7, #7]
 800d748:	2b03      	cmp	r3, #3
 800d74a:	d112      	bne.n	800d772 <full_led_write+0xba>
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 800d74c:	2200      	movs	r2, #0
 800d74e:	f44f 7180 	mov.w	r1, #256	; 0x100
 800d752:	4835      	ldr	r0, [pc, #212]	; (800d828 <full_led_write+0x170>)
 800d754:	f7f4 fdd6 	bl	8002304 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 800d758:	2201      	movs	r2, #1
 800d75a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800d75e:	4832      	ldr	r0, [pc, #200]	; (800d828 <full_led_write+0x170>)
 800d760:	f7f4 fdd0 	bl	8002304 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 800d764:	2201      	movs	r2, #1
 800d766:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800d76a:	4830      	ldr	r0, [pc, #192]	; (800d82c <full_led_write+0x174>)
 800d76c:	f7f4 fdca 	bl	8002304 <HAL_GPIO_WritePin>
}
 800d770:	e056      	b.n	800d820 <full_led_write+0x168>
	else if(fulled == 4){
 800d772:	79fb      	ldrb	r3, [r7, #7]
 800d774:	2b04      	cmp	r3, #4
 800d776:	d112      	bne.n	800d79e <full_led_write+0xe6>
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 800d778:	2200      	movs	r2, #0
 800d77a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800d77e:	482a      	ldr	r0, [pc, #168]	; (800d828 <full_led_write+0x170>)
 800d780:	f7f4 fdc0 	bl	8002304 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 800d784:	2200      	movs	r2, #0
 800d786:	f44f 7100 	mov.w	r1, #512	; 0x200
 800d78a:	4827      	ldr	r0, [pc, #156]	; (800d828 <full_led_write+0x170>)
 800d78c:	f7f4 fdba 	bl	8002304 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 800d790:	2201      	movs	r2, #1
 800d792:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800d796:	4825      	ldr	r0, [pc, #148]	; (800d82c <full_led_write+0x174>)
 800d798:	f7f4 fdb4 	bl	8002304 <HAL_GPIO_WritePin>
}
 800d79c:	e040      	b.n	800d820 <full_led_write+0x168>
	else if(fulled == 5){
 800d79e:	79fb      	ldrb	r3, [r7, #7]
 800d7a0:	2b05      	cmp	r3, #5
 800d7a2:	d112      	bne.n	800d7ca <full_led_write+0x112>
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 800d7a4:	2200      	movs	r2, #0
 800d7a6:	f44f 7180 	mov.w	r1, #256	; 0x100
 800d7aa:	481f      	ldr	r0, [pc, #124]	; (800d828 <full_led_write+0x170>)
 800d7ac:	f7f4 fdaa 	bl	8002304 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 800d7b0:	2201      	movs	r2, #1
 800d7b2:	f44f 7100 	mov.w	r1, #512	; 0x200
 800d7b6:	481c      	ldr	r0, [pc, #112]	; (800d828 <full_led_write+0x170>)
 800d7b8:	f7f4 fda4 	bl	8002304 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800d7bc:	2200      	movs	r2, #0
 800d7be:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800d7c2:	481a      	ldr	r0, [pc, #104]	; (800d82c <full_led_write+0x174>)
 800d7c4:	f7f4 fd9e 	bl	8002304 <HAL_GPIO_WritePin>
}
 800d7c8:	e02a      	b.n	800d820 <full_led_write+0x168>
	else if(fulled == 6){
 800d7ca:	79fb      	ldrb	r3, [r7, #7]
 800d7cc:	2b06      	cmp	r3, #6
 800d7ce:	d112      	bne.n	800d7f6 <full_led_write+0x13e>
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
 800d7d0:	2201      	movs	r2, #1
 800d7d2:	f44f 7180 	mov.w	r1, #256	; 0x100
 800d7d6:	4814      	ldr	r0, [pc, #80]	; (800d828 <full_led_write+0x170>)
 800d7d8:	f7f4 fd94 	bl	8002304 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 800d7dc:	2200      	movs	r2, #0
 800d7de:	f44f 7100 	mov.w	r1, #512	; 0x200
 800d7e2:	4811      	ldr	r0, [pc, #68]	; (800d828 <full_led_write+0x170>)
 800d7e4:	f7f4 fd8e 	bl	8002304 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800d7e8:	2200      	movs	r2, #0
 800d7ea:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800d7ee:	480f      	ldr	r0, [pc, #60]	; (800d82c <full_led_write+0x174>)
 800d7f0:	f7f4 fd88 	bl	8002304 <HAL_GPIO_WritePin>
}
 800d7f4:	e014      	b.n	800d820 <full_led_write+0x168>
	else if(fulled == 7){
 800d7f6:	79fb      	ldrb	r3, [r7, #7]
 800d7f8:	2b07      	cmp	r3, #7
 800d7fa:	d111      	bne.n	800d820 <full_led_write+0x168>
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 800d7fc:	2200      	movs	r2, #0
 800d7fe:	f44f 7180 	mov.w	r1, #256	; 0x100
 800d802:	4809      	ldr	r0, [pc, #36]	; (800d828 <full_led_write+0x170>)
 800d804:	f7f4 fd7e 	bl	8002304 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 800d808:	2200      	movs	r2, #0
 800d80a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800d80e:	4806      	ldr	r0, [pc, #24]	; (800d828 <full_led_write+0x170>)
 800d810:	f7f4 fd78 	bl	8002304 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800d814:	2200      	movs	r2, #0
 800d816:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800d81a:	4804      	ldr	r0, [pc, #16]	; (800d82c <full_led_write+0x174>)
 800d81c:	f7f4 fd72 	bl	8002304 <HAL_GPIO_WritePin>
}
 800d820:	bf00      	nop
 800d822:	3708      	adds	r7, #8
 800d824:	46bd      	mov	sp, r7
 800d826:	bd80      	pop	{r7, pc}
 800d828:	40020400 	.word	0x40020400
 800d82c:	40020800 	.word	0x40020800

0800d830 <sensor_test>:
//sensor_test
//a壁センサーとジャイロセンサーの値確認
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void sensor_test(){
 800d830:	b580      	push	{r7, lr}
 800d832:	b08c      	sub	sp, #48	; 0x30
 800d834:	af02      	add	r7, sp, #8

	int mode = 0;
 800d836:	2300      	movs	r3, #0
 800d838:	627b      	str	r3, [r7, #36]	; 0x24
	printf("Mode : %d\n", mode);
 800d83a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d83c:	4881      	ldr	r0, [pc, #516]	; (800da44 <sensor_test+0x214>)
 800d83e:	f000 fccf 	bl	800e1e0 <iprintf>

	while(1){
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 800d842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d844:	b2db      	uxtb	r3, r3
 800d846:	f003 0301 	and.w	r3, r3, #1
 800d84a:	b2d8      	uxtb	r0, r3
 800d84c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d84e:	b2db      	uxtb	r3, r3
 800d850:	f003 0302 	and.w	r3, r3, #2
 800d854:	b2d9      	uxtb	r1, r3
 800d856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d858:	b2db      	uxtb	r3, r3
 800d85a:	f003 0304 	and.w	r3, r3, #4
 800d85e:	b2db      	uxtb	r3, r3
 800d860:	461a      	mov	r2, r3
 800d862:	f7ff feef 	bl	800d644 <led_write>
		  if(dist_r >= 20){
 800d866:	4b78      	ldr	r3, [pc, #480]	; (800da48 <sensor_test+0x218>)
 800d868:	edd3 7a00 	vldr	s15, [r3]
 800d86c:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 800d870:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d874:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d878:	db0f      	blt.n	800d89a <sensor_test+0x6a>
			  mode++;
 800d87a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d87c:	3301      	adds	r3, #1
 800d87e:	627b      	str	r3, [r7, #36]	; 0x24
			  dist_r = 0;
 800d880:	4b71      	ldr	r3, [pc, #452]	; (800da48 <sensor_test+0x218>)
 800d882:	f04f 0200 	mov.w	r2, #0
 800d886:	601a      	str	r2, [r3, #0]
			  if(mode > 7){
 800d888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d88a:	2b07      	cmp	r3, #7
 800d88c:	dd01      	ble.n	800d892 <sensor_test+0x62>
				  mode = 0;
 800d88e:	2300      	movs	r3, #0
 800d890:	627b      	str	r3, [r7, #36]	; 0x24
			  }
			  printf("Mode : %d\n", mode);
 800d892:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d894:	486b      	ldr	r0, [pc, #428]	; (800da44 <sensor_test+0x214>)
 800d896:	f000 fca3 	bl	800e1e0 <iprintf>
			  //buzzer(pitagola2[mode-1][0], pitagola2[mode-1][1]);
			  //buzzer(pitagola[2][0], pitagola[2][1]);
		  }
		  if(dist_r <= -20){
 800d89a:	4b6b      	ldr	r3, [pc, #428]	; (800da48 <sensor_test+0x218>)
 800d89c:	edd3 7a00 	vldr	s15, [r3]
 800d8a0:	eebb 7a04 	vmov.f32	s14, #180	; 0xc1a00000 -20.0
 800d8a4:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d8a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d8ac:	d80f      	bhi.n	800d8ce <sensor_test+0x9e>
			  mode--;
 800d8ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8b0:	3b01      	subs	r3, #1
 800d8b2:	627b      	str	r3, [r7, #36]	; 0x24
			  dist_r = 0;
 800d8b4:	4b64      	ldr	r3, [pc, #400]	; (800da48 <sensor_test+0x218>)
 800d8b6:	f04f 0200 	mov.w	r2, #0
 800d8ba:	601a      	str	r2, [r3, #0]
			  if(mode < 0){
 800d8bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8be:	2b00      	cmp	r3, #0
 800d8c0:	da01      	bge.n	800d8c6 <sensor_test+0x96>
				  mode = 7;
 800d8c2:	2307      	movs	r3, #7
 800d8c4:	627b      	str	r3, [r7, #36]	; 0x24
			  }
			  printf("Mode : %d\n", mode);
 800d8c6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d8c8:	485e      	ldr	r0, [pc, #376]	; (800da44 <sensor_test+0x214>)
 800d8ca:	f000 fc89 	bl	800e1e0 <iprintf>
			  //buzzer(pitagola2[mode-1][0], pitagola2[mode-1][1]);
			  //buzzer(pitagola[2][0], pitagola[2][1]);
		  }
		  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET){
 800d8ce:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800d8d2:	485e      	ldr	r0, [pc, #376]	; (800da4c <sensor_test+0x21c>)
 800d8d4:	f7f4 fcfe 	bl	80022d4 <HAL_GPIO_ReadPin>
 800d8d8:	4603      	mov	r3, r0
 800d8da:	2b00      	cmp	r3, #0
 800d8dc:	d1b1      	bne.n	800d842 <sensor_test+0x12>
			  HAL_Delay(50);
 800d8de:	2032      	movs	r0, #50	; 0x32
 800d8e0:	f7f3 fb9c 	bl	800101c <HAL_Delay>
			  while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET);
 800d8e4:	bf00      	nop
 800d8e6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800d8ea:	4858      	ldr	r0, [pc, #352]	; (800da4c <sensor_test+0x21c>)
 800d8ec:	f7f4 fcf2 	bl	80022d4 <HAL_GPIO_ReadPin>
 800d8f0:	4603      	mov	r3, r0
 800d8f2:	2b00      	cmp	r3, #0
 800d8f4:	d0f7      	beq.n	800d8e6 <sensor_test+0xb6>

			  drive_ready();
 800d8f6:	f7f7 f9bd 	bl	8004c74 <drive_ready>

			  switch(mode){
 800d8fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8fc:	2b07      	cmp	r3, #7
 800d8fe:	d8a0      	bhi.n	800d842 <sensor_test+0x12>
 800d900:	a201      	add	r2, pc, #4	; (adr r2, 800d908 <sensor_test+0xd8>)
 800d902:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d906:	bf00      	nop
 800d908:	0800d929 	.word	0x0800d929
 800d90c:	0800d92f 	.word	0x0800d92f
 800d910:	0800d981 	.word	0x0800d981
 800d914:	0800d843 	.word	0x0800d843
 800d918:	0800d843 	.word	0x0800d843
 800d91c:	0800d843 	.word	0x0800d843
 800d920:	0800d843 	.word	0x0800d843
 800d924:	0800d843 	.word	0x0800d843
				case 0:
					get_base();
 800d928:	f7ff fe34 	bl	800d594 <get_base>
					break;
 800d92c:	e089      	b.n	800da42 <sensor_test+0x212>
				case 1:
			  		  //----Wall sensor check----
			  		  printf("Wall Sensor Check.\n");
 800d92e:	4848      	ldr	r0, [pc, #288]	; (800da50 <sensor_test+0x220>)
 800d930:	f000 fcca 	bl	800e2c8 <puts>
			  		  while(1){
			  			  get_wall_info();
 800d934:	f7ff fe4c 	bl	800d5d0 <get_wall_info>
			  			  led_write(wall_info & 0x11, wall_info & 0x88, wall_info & 0x44);
 800d938:	4b46      	ldr	r3, [pc, #280]	; (800da54 <sensor_test+0x224>)
 800d93a:	781b      	ldrb	r3, [r3, #0]
 800d93c:	f003 0311 	and.w	r3, r3, #17
 800d940:	b2d8      	uxtb	r0, r3
 800d942:	4b44      	ldr	r3, [pc, #272]	; (800da54 <sensor_test+0x224>)
 800d944:	781b      	ldrb	r3, [r3, #0]
 800d946:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800d94a:	b2d9      	uxtb	r1, r3
 800d94c:	4b41      	ldr	r3, [pc, #260]	; (800da54 <sensor_test+0x224>)
 800d94e:	781b      	ldrb	r3, [r3, #0]
 800d950:	f003 0344 	and.w	r3, r3, #68	; 0x44
 800d954:	b2db      	uxtb	r3, r3
 800d956:	461a      	mov	r2, r3
 800d958:	f7ff fe74 	bl	800d644 <led_write>
			  			  printf("ad_l : %d, ad_fl : %d, ad_fr : %d, ad_r : %d\n", ad_l, ad_fl, ad_fr, ad_r);
 800d95c:	4b3e      	ldr	r3, [pc, #248]	; (800da58 <sensor_test+0x228>)
 800d95e:	6819      	ldr	r1, [r3, #0]
 800d960:	4b3e      	ldr	r3, [pc, #248]	; (800da5c <sensor_test+0x22c>)
 800d962:	681a      	ldr	r2, [r3, #0]
 800d964:	4b3e      	ldr	r3, [pc, #248]	; (800da60 <sensor_test+0x230>)
 800d966:	6818      	ldr	r0, [r3, #0]
 800d968:	4b3e      	ldr	r3, [pc, #248]	; (800da64 <sensor_test+0x234>)
 800d96a:	681b      	ldr	r3, [r3, #0]
 800d96c:	9300      	str	r3, [sp, #0]
 800d96e:	4603      	mov	r3, r0
 800d970:	483d      	ldr	r0, [pc, #244]	; (800da68 <sensor_test+0x238>)
 800d972:	f000 fc35 	bl	800e1e0 <iprintf>
			  			  HAL_Delay(333);
 800d976:	f240 104d 	movw	r0, #333	; 0x14d
 800d97a:	f7f3 fb4f 	bl	800101c <HAL_Delay>
			  			  get_wall_info();
 800d97e:	e7d9      	b.n	800d934 <sensor_test+0x104>
						}
					break;
				case 2:
					//----Gyro sensor check----
					printf("Gyro Sensor Check.\n");
 800d980:	483a      	ldr	r0, [pc, #232]	; (800da6c <sensor_test+0x23c>)
 800d982:	f000 fca1 	bl	800e2c8 <puts>
					int accel_x, accel_y, accel_z;
					int gyro_x, gyro_y, gyro_z;
					int deg_x, deg_y, deg_z;
			  		  while(1){
			  			  accel_x = accel_read_x();
 800d986:	f7fb f9d5 	bl	8008d34 <accel_read_x>
 800d98a:	eef0 7a40 	vmov.f32	s15, s0
 800d98e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d992:	ee17 3a90 	vmov	r3, s15
 800d996:	623b      	str	r3, [r7, #32]
			  			  accel_y = accel_read_y();
 800d998:	f7fb f9f2 	bl	8008d80 <accel_read_y>
 800d99c:	eef0 7a40 	vmov.f32	s15, s0
 800d9a0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d9a4:	ee17 3a90 	vmov	r3, s15
 800d9a8:	61fb      	str	r3, [r7, #28]
			  			  accel_z = accel_read_z();
 800d9aa:	f7fb fa0f 	bl	8008dcc <accel_read_z>
 800d9ae:	eef0 7a40 	vmov.f32	s15, s0
 800d9b2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d9b6:	ee17 3a90 	vmov	r3, s15
 800d9ba:	61bb      	str	r3, [r7, #24]
			  			  gyro_x = gyro_read_x();
 800d9bc:	f7fb fa30 	bl	8008e20 <gyro_read_x>
 800d9c0:	eef0 7a40 	vmov.f32	s15, s0
 800d9c4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d9c8:	ee17 3a90 	vmov	r3, s15
 800d9cc:	617b      	str	r3, [r7, #20]
			  			  gyro_y = gyro_read_y();
 800d9ce:	f7fb fa63 	bl	8008e98 <gyro_read_y>
 800d9d2:	eef0 7a40 	vmov.f32	s15, s0
 800d9d6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d9da:	ee17 3a90 	vmov	r3, s15
 800d9de:	613b      	str	r3, [r7, #16]
			  			  gyro_z = gyro_read_z();
 800d9e0:	f7fb fa96 	bl	8008f10 <gyro_read_z>
 800d9e4:	eef0 7a40 	vmov.f32	s15, s0
 800d9e8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d9ec:	ee17 3a90 	vmov	r3, s15
 800d9f0:	60fb      	str	r3, [r7, #12]
			  			  deg_x = degree_x;
 800d9f2:	4b1f      	ldr	r3, [pc, #124]	; (800da70 <sensor_test+0x240>)
 800d9f4:	edd3 7a00 	vldr	s15, [r3]
 800d9f8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d9fc:	ee17 3a90 	vmov	r3, s15
 800da00:	60bb      	str	r3, [r7, #8]
			  			  deg_y = degree_y;
 800da02:	4b1c      	ldr	r3, [pc, #112]	; (800da74 <sensor_test+0x244>)
 800da04:	edd3 7a00 	vldr	s15, [r3]
 800da08:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800da0c:	ee17 3a90 	vmov	r3, s15
 800da10:	607b      	str	r3, [r7, #4]
			  			  deg_z = degree_z;
 800da12:	4b19      	ldr	r3, [pc, #100]	; (800da78 <sensor_test+0x248>)
 800da14:	edd3 7a00 	vldr	s15, [r3]
 800da18:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800da1c:	ee17 3a90 	vmov	r3, s15
 800da20:	603b      	str	r3, [r7, #0]

			  			  //printf("Accel x: %3d, y: %3d, z: %3d\n", accel_x, accel_y, accel_z);
			  			  printf("Gyro  x: %3d, y: %3d, z: %3d\n", gyro_x, gyro_y, gyro_z);
 800da22:	68fb      	ldr	r3, [r7, #12]
 800da24:	693a      	ldr	r2, [r7, #16]
 800da26:	6979      	ldr	r1, [r7, #20]
 800da28:	4814      	ldr	r0, [pc, #80]	; (800da7c <sensor_test+0x24c>)
 800da2a:	f000 fbd9 	bl	800e1e0 <iprintf>
			  			  printf("Deg   x: %3d, y: %3d, z: %3d\n", deg_x, deg_y, deg_z);
 800da2e:	683b      	ldr	r3, [r7, #0]
 800da30:	687a      	ldr	r2, [r7, #4]
 800da32:	68b9      	ldr	r1, [r7, #8]
 800da34:	4812      	ldr	r0, [pc, #72]	; (800da80 <sensor_test+0x250>)
 800da36:	f000 fbd3 	bl	800e1e0 <iprintf>
			  			  HAL_Delay(111);
 800da3a:	206f      	movs	r0, #111	; 0x6f
 800da3c:	f7f3 faee 	bl	800101c <HAL_Delay>
			  			  accel_x = accel_read_x();
 800da40:	e7a1      	b.n	800d986 <sensor_test+0x156>
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 800da42:	e6fe      	b.n	800d842 <sensor_test+0x12>
 800da44:	0800f854 	.word	0x0800f854
 800da48:	20000b6c 	.word	0x20000b6c
 800da4c:	40020000 	.word	0x40020000
 800da50:	0800f860 	.word	0x0800f860
 800da54:	20000348 	.word	0x20000348
 800da58:	20000b7c 	.word	0x20000b7c
 800da5c:	20000dd8 	.word	0x20000dd8
 800da60:	20000c84 	.word	0x20000c84
 800da64:	20000fe4 	.word	0x20000fe4
 800da68:	0800f874 	.word	0x0800f874
 800da6c:	0800f8a4 	.word	0x0800f8a4
 800da70:	200004d0 	.word	0x200004d0
 800da74:	20000ff0 	.word	0x20000ff0
 800da78:	20000bdc 	.word	0x20000bdc
 800da7c:	0800f8b8 	.word	0x0800f8b8
 800da80:	0800f8d8 	.word	0x0800f8d8

0800da84 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800da84:	b480      	push	{r7}
 800da86:	b083      	sub	sp, #12
 800da88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800da8a:	2300      	movs	r3, #0
 800da8c:	607b      	str	r3, [r7, #4]
 800da8e:	4b10      	ldr	r3, [pc, #64]	; (800dad0 <HAL_MspInit+0x4c>)
 800da90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800da92:	4a0f      	ldr	r2, [pc, #60]	; (800dad0 <HAL_MspInit+0x4c>)
 800da94:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800da98:	6453      	str	r3, [r2, #68]	; 0x44
 800da9a:	4b0d      	ldr	r3, [pc, #52]	; (800dad0 <HAL_MspInit+0x4c>)
 800da9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800da9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800daa2:	607b      	str	r3, [r7, #4]
 800daa4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800daa6:	2300      	movs	r3, #0
 800daa8:	603b      	str	r3, [r7, #0]
 800daaa:	4b09      	ldr	r3, [pc, #36]	; (800dad0 <HAL_MspInit+0x4c>)
 800daac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800daae:	4a08      	ldr	r2, [pc, #32]	; (800dad0 <HAL_MspInit+0x4c>)
 800dab0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800dab4:	6413      	str	r3, [r2, #64]	; 0x40
 800dab6:	4b06      	ldr	r3, [pc, #24]	; (800dad0 <HAL_MspInit+0x4c>)
 800dab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800daba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800dabe:	603b      	str	r3, [r7, #0]
 800dac0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800dac2:	bf00      	nop
 800dac4:	370c      	adds	r7, #12
 800dac6:	46bd      	mov	sp, r7
 800dac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dacc:	4770      	bx	lr
 800dace:	bf00      	nop
 800dad0:	40023800 	.word	0x40023800

0800dad4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800dad4:	b580      	push	{r7, lr}
 800dad6:	b08a      	sub	sp, #40	; 0x28
 800dad8:	af00      	add	r7, sp, #0
 800dada:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800dadc:	f107 0314 	add.w	r3, r7, #20
 800dae0:	2200      	movs	r2, #0
 800dae2:	601a      	str	r2, [r3, #0]
 800dae4:	605a      	str	r2, [r3, #4]
 800dae6:	609a      	str	r2, [r3, #8]
 800dae8:	60da      	str	r2, [r3, #12]
 800daea:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800daec:	687b      	ldr	r3, [r7, #4]
 800daee:	681b      	ldr	r3, [r3, #0]
 800daf0:	4a17      	ldr	r2, [pc, #92]	; (800db50 <HAL_ADC_MspInit+0x7c>)
 800daf2:	4293      	cmp	r3, r2
 800daf4:	d127      	bne.n	800db46 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800daf6:	2300      	movs	r3, #0
 800daf8:	613b      	str	r3, [r7, #16]
 800dafa:	4b16      	ldr	r3, [pc, #88]	; (800db54 <HAL_ADC_MspInit+0x80>)
 800dafc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dafe:	4a15      	ldr	r2, [pc, #84]	; (800db54 <HAL_ADC_MspInit+0x80>)
 800db00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800db04:	6453      	str	r3, [r2, #68]	; 0x44
 800db06:	4b13      	ldr	r3, [pc, #76]	; (800db54 <HAL_ADC_MspInit+0x80>)
 800db08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800db0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800db0e:	613b      	str	r3, [r7, #16]
 800db10:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800db12:	2300      	movs	r3, #0
 800db14:	60fb      	str	r3, [r7, #12]
 800db16:	4b0f      	ldr	r3, [pc, #60]	; (800db54 <HAL_ADC_MspInit+0x80>)
 800db18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800db1a:	4a0e      	ldr	r2, [pc, #56]	; (800db54 <HAL_ADC_MspInit+0x80>)
 800db1c:	f043 0301 	orr.w	r3, r3, #1
 800db20:	6313      	str	r3, [r2, #48]	; 0x30
 800db22:	4b0c      	ldr	r3, [pc, #48]	; (800db54 <HAL_ADC_MspInit+0x80>)
 800db24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800db26:	f003 0301 	and.w	r3, r3, #1
 800db2a:	60fb      	str	r3, [r7, #12]
 800db2c:	68fb      	ldr	r3, [r7, #12]
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 800db2e:	230f      	movs	r3, #15
 800db30:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800db32:	2303      	movs	r3, #3
 800db34:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800db36:	2300      	movs	r3, #0
 800db38:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800db3a:	f107 0314 	add.w	r3, r7, #20
 800db3e:	4619      	mov	r1, r3
 800db40:	4805      	ldr	r0, [pc, #20]	; (800db58 <HAL_ADC_MspInit+0x84>)
 800db42:	f7f4 fa2d 	bl	8001fa0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800db46:	bf00      	nop
 800db48:	3728      	adds	r7, #40	; 0x28
 800db4a:	46bd      	mov	sp, r7
 800db4c:	bd80      	pop	{r7, pc}
 800db4e:	bf00      	nop
 800db50:	40012000 	.word	0x40012000
 800db54:	40023800 	.word	0x40023800
 800db58:	40020000 	.word	0x40020000

0800db5c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800db5c:	b580      	push	{r7, lr}
 800db5e:	b08a      	sub	sp, #40	; 0x28
 800db60:	af00      	add	r7, sp, #0
 800db62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800db64:	f107 0314 	add.w	r3, r7, #20
 800db68:	2200      	movs	r2, #0
 800db6a:	601a      	str	r2, [r3, #0]
 800db6c:	605a      	str	r2, [r3, #4]
 800db6e:	609a      	str	r2, [r3, #8]
 800db70:	60da      	str	r2, [r3, #12]
 800db72:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 800db74:	687b      	ldr	r3, [r7, #4]
 800db76:	681b      	ldr	r3, [r3, #0]
 800db78:	4a19      	ldr	r2, [pc, #100]	; (800dbe0 <HAL_SPI_MspInit+0x84>)
 800db7a:	4293      	cmp	r3, r2
 800db7c:	d12c      	bne.n	800dbd8 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800db7e:	2300      	movs	r3, #0
 800db80:	613b      	str	r3, [r7, #16]
 800db82:	4b18      	ldr	r3, [pc, #96]	; (800dbe4 <HAL_SPI_MspInit+0x88>)
 800db84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800db86:	4a17      	ldr	r2, [pc, #92]	; (800dbe4 <HAL_SPI_MspInit+0x88>)
 800db88:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800db8c:	6413      	str	r3, [r2, #64]	; 0x40
 800db8e:	4b15      	ldr	r3, [pc, #84]	; (800dbe4 <HAL_SPI_MspInit+0x88>)
 800db90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800db92:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800db96:	613b      	str	r3, [r7, #16]
 800db98:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800db9a:	2300      	movs	r3, #0
 800db9c:	60fb      	str	r3, [r7, #12]
 800db9e:	4b11      	ldr	r3, [pc, #68]	; (800dbe4 <HAL_SPI_MspInit+0x88>)
 800dba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dba2:	4a10      	ldr	r2, [pc, #64]	; (800dbe4 <HAL_SPI_MspInit+0x88>)
 800dba4:	f043 0304 	orr.w	r3, r3, #4
 800dba8:	6313      	str	r3, [r2, #48]	; 0x30
 800dbaa:	4b0e      	ldr	r3, [pc, #56]	; (800dbe4 <HAL_SPI_MspInit+0x88>)
 800dbac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dbae:	f003 0304 	and.w	r3, r3, #4
 800dbb2:	60fb      	str	r3, [r7, #12]
 800dbb4:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration    
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 800dbb6:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800dbba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800dbbc:	2302      	movs	r3, #2
 800dbbe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800dbc0:	2300      	movs	r3, #0
 800dbc2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800dbc4:	2303      	movs	r3, #3
 800dbc6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800dbc8:	2306      	movs	r3, #6
 800dbca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800dbcc:	f107 0314 	add.w	r3, r7, #20
 800dbd0:	4619      	mov	r1, r3
 800dbd2:	4805      	ldr	r0, [pc, #20]	; (800dbe8 <HAL_SPI_MspInit+0x8c>)
 800dbd4:	f7f4 f9e4 	bl	8001fa0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 800dbd8:	bf00      	nop
 800dbda:	3728      	adds	r7, #40	; 0x28
 800dbdc:	46bd      	mov	sp, r7
 800dbde:	bd80      	pop	{r7, pc}
 800dbe0:	40003c00 	.word	0x40003c00
 800dbe4:	40023800 	.word	0x40023800
 800dbe8:	40020800 	.word	0x40020800

0800dbec <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800dbec:	b580      	push	{r7, lr}
 800dbee:	b086      	sub	sp, #24
 800dbf0:	af00      	add	r7, sp, #0
 800dbf2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800dbf4:	687b      	ldr	r3, [r7, #4]
 800dbf6:	681b      	ldr	r3, [r3, #0]
 800dbf8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800dbfc:	d10e      	bne.n	800dc1c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800dbfe:	2300      	movs	r3, #0
 800dc00:	617b      	str	r3, [r7, #20]
 800dc02:	4b20      	ldr	r3, [pc, #128]	; (800dc84 <HAL_TIM_Base_MspInit+0x98>)
 800dc04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dc06:	4a1f      	ldr	r2, [pc, #124]	; (800dc84 <HAL_TIM_Base_MspInit+0x98>)
 800dc08:	f043 0301 	orr.w	r3, r3, #1
 800dc0c:	6413      	str	r3, [r2, #64]	; 0x40
 800dc0e:	4b1d      	ldr	r3, [pc, #116]	; (800dc84 <HAL_TIM_Base_MspInit+0x98>)
 800dc10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dc12:	f003 0301 	and.w	r3, r3, #1
 800dc16:	617b      	str	r3, [r7, #20]
 800dc18:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 800dc1a:	e02e      	b.n	800dc7a <HAL_TIM_Base_MspInit+0x8e>
  else if(htim_base->Instance==TIM3)
 800dc1c:	687b      	ldr	r3, [r7, #4]
 800dc1e:	681b      	ldr	r3, [r3, #0]
 800dc20:	4a19      	ldr	r2, [pc, #100]	; (800dc88 <HAL_TIM_Base_MspInit+0x9c>)
 800dc22:	4293      	cmp	r3, r2
 800dc24:	d10e      	bne.n	800dc44 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800dc26:	2300      	movs	r3, #0
 800dc28:	613b      	str	r3, [r7, #16]
 800dc2a:	4b16      	ldr	r3, [pc, #88]	; (800dc84 <HAL_TIM_Base_MspInit+0x98>)
 800dc2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dc2e:	4a15      	ldr	r2, [pc, #84]	; (800dc84 <HAL_TIM_Base_MspInit+0x98>)
 800dc30:	f043 0302 	orr.w	r3, r3, #2
 800dc34:	6413      	str	r3, [r2, #64]	; 0x40
 800dc36:	4b13      	ldr	r3, [pc, #76]	; (800dc84 <HAL_TIM_Base_MspInit+0x98>)
 800dc38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dc3a:	f003 0302 	and.w	r3, r3, #2
 800dc3e:	613b      	str	r3, [r7, #16]
 800dc40:	693b      	ldr	r3, [r7, #16]
}
 800dc42:	e01a      	b.n	800dc7a <HAL_TIM_Base_MspInit+0x8e>
  else if(htim_base->Instance==TIM6)
 800dc44:	687b      	ldr	r3, [r7, #4]
 800dc46:	681b      	ldr	r3, [r3, #0]
 800dc48:	4a10      	ldr	r2, [pc, #64]	; (800dc8c <HAL_TIM_Base_MspInit+0xa0>)
 800dc4a:	4293      	cmp	r3, r2
 800dc4c:	d115      	bne.n	800dc7a <HAL_TIM_Base_MspInit+0x8e>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800dc4e:	2300      	movs	r3, #0
 800dc50:	60fb      	str	r3, [r7, #12]
 800dc52:	4b0c      	ldr	r3, [pc, #48]	; (800dc84 <HAL_TIM_Base_MspInit+0x98>)
 800dc54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dc56:	4a0b      	ldr	r2, [pc, #44]	; (800dc84 <HAL_TIM_Base_MspInit+0x98>)
 800dc58:	f043 0310 	orr.w	r3, r3, #16
 800dc5c:	6413      	str	r3, [r2, #64]	; 0x40
 800dc5e:	4b09      	ldr	r3, [pc, #36]	; (800dc84 <HAL_TIM_Base_MspInit+0x98>)
 800dc60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dc62:	f003 0310 	and.w	r3, r3, #16
 800dc66:	60fb      	str	r3, [r7, #12]
 800dc68:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800dc6a:	2200      	movs	r2, #0
 800dc6c:	2100      	movs	r1, #0
 800dc6e:	2036      	movs	r0, #54	; 0x36
 800dc70:	f7f3 fe8b 	bl	800198a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800dc74:	2036      	movs	r0, #54	; 0x36
 800dc76:	f7f3 fea4 	bl	80019c2 <HAL_NVIC_EnableIRQ>
}
 800dc7a:	bf00      	nop
 800dc7c:	3718      	adds	r7, #24
 800dc7e:	46bd      	mov	sp, r7
 800dc80:	bd80      	pop	{r7, pc}
 800dc82:	bf00      	nop
 800dc84:	40023800 	.word	0x40023800
 800dc88:	40000400 	.word	0x40000400
 800dc8c:	40001000 	.word	0x40001000

0800dc90 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800dc90:	b580      	push	{r7, lr}
 800dc92:	b08c      	sub	sp, #48	; 0x30
 800dc94:	af00      	add	r7, sp, #0
 800dc96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800dc98:	f107 031c 	add.w	r3, r7, #28
 800dc9c:	2200      	movs	r2, #0
 800dc9e:	601a      	str	r2, [r3, #0]
 800dca0:	605a      	str	r2, [r3, #4]
 800dca2:	609a      	str	r2, [r3, #8]
 800dca4:	60da      	str	r2, [r3, #12]
 800dca6:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM4)
 800dca8:	687b      	ldr	r3, [r7, #4]
 800dcaa:	681b      	ldr	r3, [r3, #0]
 800dcac:	4a32      	ldr	r2, [pc, #200]	; (800dd78 <HAL_TIM_Encoder_MspInit+0xe8>)
 800dcae:	4293      	cmp	r3, r2
 800dcb0:	d12c      	bne.n	800dd0c <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800dcb2:	2300      	movs	r3, #0
 800dcb4:	61bb      	str	r3, [r7, #24]
 800dcb6:	4b31      	ldr	r3, [pc, #196]	; (800dd7c <HAL_TIM_Encoder_MspInit+0xec>)
 800dcb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dcba:	4a30      	ldr	r2, [pc, #192]	; (800dd7c <HAL_TIM_Encoder_MspInit+0xec>)
 800dcbc:	f043 0304 	orr.w	r3, r3, #4
 800dcc0:	6413      	str	r3, [r2, #64]	; 0x40
 800dcc2:	4b2e      	ldr	r3, [pc, #184]	; (800dd7c <HAL_TIM_Encoder_MspInit+0xec>)
 800dcc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dcc6:	f003 0304 	and.w	r3, r3, #4
 800dcca:	61bb      	str	r3, [r7, #24]
 800dccc:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800dcce:	2300      	movs	r3, #0
 800dcd0:	617b      	str	r3, [r7, #20]
 800dcd2:	4b2a      	ldr	r3, [pc, #168]	; (800dd7c <HAL_TIM_Encoder_MspInit+0xec>)
 800dcd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dcd6:	4a29      	ldr	r2, [pc, #164]	; (800dd7c <HAL_TIM_Encoder_MspInit+0xec>)
 800dcd8:	f043 0302 	orr.w	r3, r3, #2
 800dcdc:	6313      	str	r3, [r2, #48]	; 0x30
 800dcde:	4b27      	ldr	r3, [pc, #156]	; (800dd7c <HAL_TIM_Encoder_MspInit+0xec>)
 800dce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dce2:	f003 0302 	and.w	r3, r3, #2
 800dce6:	617b      	str	r3, [r7, #20]
 800dce8:	697b      	ldr	r3, [r7, #20]
    /**TIM4 GPIO Configuration    
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800dcea:	23c0      	movs	r3, #192	; 0xc0
 800dcec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800dcee:	2302      	movs	r3, #2
 800dcf0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800dcf2:	2300      	movs	r3, #0
 800dcf4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800dcf6:	2300      	movs	r3, #0
 800dcf8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800dcfa:	2302      	movs	r3, #2
 800dcfc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800dcfe:	f107 031c 	add.w	r3, r7, #28
 800dd02:	4619      	mov	r1, r3
 800dd04:	481e      	ldr	r0, [pc, #120]	; (800dd80 <HAL_TIM_Encoder_MspInit+0xf0>)
 800dd06:	f7f4 f94b 	bl	8001fa0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 800dd0a:	e030      	b.n	800dd6e <HAL_TIM_Encoder_MspInit+0xde>
  else if(htim_encoder->Instance==TIM8)
 800dd0c:	687b      	ldr	r3, [r7, #4]
 800dd0e:	681b      	ldr	r3, [r3, #0]
 800dd10:	4a1c      	ldr	r2, [pc, #112]	; (800dd84 <HAL_TIM_Encoder_MspInit+0xf4>)
 800dd12:	4293      	cmp	r3, r2
 800dd14:	d12b      	bne.n	800dd6e <HAL_TIM_Encoder_MspInit+0xde>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800dd16:	2300      	movs	r3, #0
 800dd18:	613b      	str	r3, [r7, #16]
 800dd1a:	4b18      	ldr	r3, [pc, #96]	; (800dd7c <HAL_TIM_Encoder_MspInit+0xec>)
 800dd1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dd1e:	4a17      	ldr	r2, [pc, #92]	; (800dd7c <HAL_TIM_Encoder_MspInit+0xec>)
 800dd20:	f043 0302 	orr.w	r3, r3, #2
 800dd24:	6453      	str	r3, [r2, #68]	; 0x44
 800dd26:	4b15      	ldr	r3, [pc, #84]	; (800dd7c <HAL_TIM_Encoder_MspInit+0xec>)
 800dd28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dd2a:	f003 0302 	and.w	r3, r3, #2
 800dd2e:	613b      	str	r3, [r7, #16]
 800dd30:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800dd32:	2300      	movs	r3, #0
 800dd34:	60fb      	str	r3, [r7, #12]
 800dd36:	4b11      	ldr	r3, [pc, #68]	; (800dd7c <HAL_TIM_Encoder_MspInit+0xec>)
 800dd38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dd3a:	4a10      	ldr	r2, [pc, #64]	; (800dd7c <HAL_TIM_Encoder_MspInit+0xec>)
 800dd3c:	f043 0304 	orr.w	r3, r3, #4
 800dd40:	6313      	str	r3, [r2, #48]	; 0x30
 800dd42:	4b0e      	ldr	r3, [pc, #56]	; (800dd7c <HAL_TIM_Encoder_MspInit+0xec>)
 800dd44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dd46:	f003 0304 	and.w	r3, r3, #4
 800dd4a:	60fb      	str	r3, [r7, #12]
 800dd4c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800dd4e:	23c0      	movs	r3, #192	; 0xc0
 800dd50:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800dd52:	2302      	movs	r3, #2
 800dd54:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800dd56:	2300      	movs	r3, #0
 800dd58:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800dd5a:	2300      	movs	r3, #0
 800dd5c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800dd5e:	2303      	movs	r3, #3
 800dd60:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800dd62:	f107 031c 	add.w	r3, r7, #28
 800dd66:	4619      	mov	r1, r3
 800dd68:	4807      	ldr	r0, [pc, #28]	; (800dd88 <HAL_TIM_Encoder_MspInit+0xf8>)
 800dd6a:	f7f4 f919 	bl	8001fa0 <HAL_GPIO_Init>
}
 800dd6e:	bf00      	nop
 800dd70:	3730      	adds	r7, #48	; 0x30
 800dd72:	46bd      	mov	sp, r7
 800dd74:	bd80      	pop	{r7, pc}
 800dd76:	bf00      	nop
 800dd78:	40000800 	.word	0x40000800
 800dd7c:	40023800 	.word	0x40023800
 800dd80:	40020400 	.word	0x40020400
 800dd84:	40010400 	.word	0x40010400
 800dd88:	40020800 	.word	0x40020800

0800dd8c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800dd8c:	b580      	push	{r7, lr}
 800dd8e:	b08a      	sub	sp, #40	; 0x28
 800dd90:	af00      	add	r7, sp, #0
 800dd92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800dd94:	f107 0314 	add.w	r3, r7, #20
 800dd98:	2200      	movs	r2, #0
 800dd9a:	601a      	str	r2, [r3, #0]
 800dd9c:	605a      	str	r2, [r3, #4]
 800dd9e:	609a      	str	r2, [r3, #8]
 800dda0:	60da      	str	r2, [r3, #12]
 800dda2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 800dda4:	687b      	ldr	r3, [r7, #4]
 800dda6:	681b      	ldr	r3, [r3, #0]
 800dda8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ddac:	d13d      	bne.n	800de2a <HAL_TIM_MspPostInit+0x9e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ddae:	2300      	movs	r3, #0
 800ddb0:	613b      	str	r3, [r7, #16]
 800ddb2:	4b31      	ldr	r3, [pc, #196]	; (800de78 <HAL_TIM_MspPostInit+0xec>)
 800ddb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ddb6:	4a30      	ldr	r2, [pc, #192]	; (800de78 <HAL_TIM_MspPostInit+0xec>)
 800ddb8:	f043 0301 	orr.w	r3, r3, #1
 800ddbc:	6313      	str	r3, [r2, #48]	; 0x30
 800ddbe:	4b2e      	ldr	r3, [pc, #184]	; (800de78 <HAL_TIM_MspPostInit+0xec>)
 800ddc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ddc2:	f003 0301 	and.w	r3, r3, #1
 800ddc6:	613b      	str	r3, [r7, #16]
 800ddc8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800ddca:	2300      	movs	r3, #0
 800ddcc:	60fb      	str	r3, [r7, #12]
 800ddce:	4b2a      	ldr	r3, [pc, #168]	; (800de78 <HAL_TIM_MspPostInit+0xec>)
 800ddd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ddd2:	4a29      	ldr	r2, [pc, #164]	; (800de78 <HAL_TIM_MspPostInit+0xec>)
 800ddd4:	f043 0302 	orr.w	r3, r3, #2
 800ddd8:	6313      	str	r3, [r2, #48]	; 0x30
 800ddda:	4b27      	ldr	r3, [pc, #156]	; (800de78 <HAL_TIM_MspPostInit+0xec>)
 800dddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ddde:	f003 0302 	and.w	r3, r3, #2
 800dde2:	60fb      	str	r3, [r7, #12]
 800dde4:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration    
    PA5     ------> TIM2_CH1
    PB11     ------> TIM2_CH4 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800dde6:	2320      	movs	r3, #32
 800dde8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ddea:	2302      	movs	r3, #2
 800ddec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ddee:	2300      	movs	r3, #0
 800ddf0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ddf2:	2300      	movs	r3, #0
 800ddf4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800ddf6:	2301      	movs	r3, #1
 800ddf8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ddfa:	f107 0314 	add.w	r3, r7, #20
 800ddfe:	4619      	mov	r1, r3
 800de00:	481e      	ldr	r0, [pc, #120]	; (800de7c <HAL_TIM_MspPostInit+0xf0>)
 800de02:	f7f4 f8cd 	bl	8001fa0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800de06:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800de0a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800de0c:	2302      	movs	r3, #2
 800de0e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800de10:	2300      	movs	r3, #0
 800de12:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800de14:	2300      	movs	r3, #0
 800de16:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800de18:	2301      	movs	r3, #1
 800de1a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800de1c:	f107 0314 	add.w	r3, r7, #20
 800de20:	4619      	mov	r1, r3
 800de22:	4817      	ldr	r0, [pc, #92]	; (800de80 <HAL_TIM_MspPostInit+0xf4>)
 800de24:	f7f4 f8bc 	bl	8001fa0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800de28:	e022      	b.n	800de70 <HAL_TIM_MspPostInit+0xe4>
  else if(htim->Instance==TIM3)
 800de2a:	687b      	ldr	r3, [r7, #4]
 800de2c:	681b      	ldr	r3, [r3, #0]
 800de2e:	4a15      	ldr	r2, [pc, #84]	; (800de84 <HAL_TIM_MspPostInit+0xf8>)
 800de30:	4293      	cmp	r3, r2
 800de32:	d11d      	bne.n	800de70 <HAL_TIM_MspPostInit+0xe4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800de34:	2300      	movs	r3, #0
 800de36:	60bb      	str	r3, [r7, #8]
 800de38:	4b0f      	ldr	r3, [pc, #60]	; (800de78 <HAL_TIM_MspPostInit+0xec>)
 800de3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800de3c:	4a0e      	ldr	r2, [pc, #56]	; (800de78 <HAL_TIM_MspPostInit+0xec>)
 800de3e:	f043 0302 	orr.w	r3, r3, #2
 800de42:	6313      	str	r3, [r2, #48]	; 0x30
 800de44:	4b0c      	ldr	r3, [pc, #48]	; (800de78 <HAL_TIM_MspPostInit+0xec>)
 800de46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800de48:	f003 0302 	and.w	r3, r3, #2
 800de4c:	60bb      	str	r3, [r7, #8]
 800de4e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800de50:	2320      	movs	r3, #32
 800de52:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800de54:	2302      	movs	r3, #2
 800de56:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800de58:	2300      	movs	r3, #0
 800de5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800de5c:	2300      	movs	r3, #0
 800de5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800de60:	2302      	movs	r3, #2
 800de62:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800de64:	f107 0314 	add.w	r3, r7, #20
 800de68:	4619      	mov	r1, r3
 800de6a:	4805      	ldr	r0, [pc, #20]	; (800de80 <HAL_TIM_MspPostInit+0xf4>)
 800de6c:	f7f4 f898 	bl	8001fa0 <HAL_GPIO_Init>
}
 800de70:	bf00      	nop
 800de72:	3728      	adds	r7, #40	; 0x28
 800de74:	46bd      	mov	sp, r7
 800de76:	bd80      	pop	{r7, pc}
 800de78:	40023800 	.word	0x40023800
 800de7c:	40020000 	.word	0x40020000
 800de80:	40020400 	.word	0x40020400
 800de84:	40000400 	.word	0x40000400

0800de88 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800de88:	b580      	push	{r7, lr}
 800de8a:	b08a      	sub	sp, #40	; 0x28
 800de8c:	af00      	add	r7, sp, #0
 800de8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800de90:	f107 0314 	add.w	r3, r7, #20
 800de94:	2200      	movs	r2, #0
 800de96:	601a      	str	r2, [r3, #0]
 800de98:	605a      	str	r2, [r3, #4]
 800de9a:	609a      	str	r2, [r3, #8]
 800de9c:	60da      	str	r2, [r3, #12]
 800de9e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800dea0:	687b      	ldr	r3, [r7, #4]
 800dea2:	681b      	ldr	r3, [r3, #0]
 800dea4:	4a19      	ldr	r2, [pc, #100]	; (800df0c <HAL_UART_MspInit+0x84>)
 800dea6:	4293      	cmp	r3, r2
 800dea8:	d12c      	bne.n	800df04 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800deaa:	2300      	movs	r3, #0
 800deac:	613b      	str	r3, [r7, #16]
 800deae:	4b18      	ldr	r3, [pc, #96]	; (800df10 <HAL_UART_MspInit+0x88>)
 800deb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800deb2:	4a17      	ldr	r2, [pc, #92]	; (800df10 <HAL_UART_MspInit+0x88>)
 800deb4:	f043 0310 	orr.w	r3, r3, #16
 800deb8:	6453      	str	r3, [r2, #68]	; 0x44
 800deba:	4b15      	ldr	r3, [pc, #84]	; (800df10 <HAL_UART_MspInit+0x88>)
 800debc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800debe:	f003 0310 	and.w	r3, r3, #16
 800dec2:	613b      	str	r3, [r7, #16]
 800dec4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800dec6:	2300      	movs	r3, #0
 800dec8:	60fb      	str	r3, [r7, #12]
 800deca:	4b11      	ldr	r3, [pc, #68]	; (800df10 <HAL_UART_MspInit+0x88>)
 800decc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dece:	4a10      	ldr	r2, [pc, #64]	; (800df10 <HAL_UART_MspInit+0x88>)
 800ded0:	f043 0301 	orr.w	r3, r3, #1
 800ded4:	6313      	str	r3, [r2, #48]	; 0x30
 800ded6:	4b0e      	ldr	r3, [pc, #56]	; (800df10 <HAL_UART_MspInit+0x88>)
 800ded8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800deda:	f003 0301 	and.w	r3, r3, #1
 800dede:	60fb      	str	r3, [r7, #12]
 800dee0:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800dee2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800dee6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800dee8:	2302      	movs	r3, #2
 800deea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800deec:	2301      	movs	r3, #1
 800deee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800def0:	2303      	movs	r3, #3
 800def2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800def4:	2307      	movs	r3, #7
 800def6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800def8:	f107 0314 	add.w	r3, r7, #20
 800defc:	4619      	mov	r1, r3
 800defe:	4805      	ldr	r0, [pc, #20]	; (800df14 <HAL_UART_MspInit+0x8c>)
 800df00:	f7f4 f84e 	bl	8001fa0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800df04:	bf00      	nop
 800df06:	3728      	adds	r7, #40	; 0x28
 800df08:	46bd      	mov	sp, r7
 800df0a:	bd80      	pop	{r7, pc}
 800df0c:	40011000 	.word	0x40011000
 800df10:	40023800 	.word	0x40023800
 800df14:	40020000 	.word	0x40020000

0800df18 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800df18:	b480      	push	{r7}
 800df1a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800df1c:	bf00      	nop
 800df1e:	46bd      	mov	sp, r7
 800df20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df24:	4770      	bx	lr

0800df26 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800df26:	b480      	push	{r7}
 800df28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800df2a:	e7fe      	b.n	800df2a <HardFault_Handler+0x4>

0800df2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800df2c:	b480      	push	{r7}
 800df2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800df30:	e7fe      	b.n	800df30 <MemManage_Handler+0x4>

0800df32 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800df32:	b480      	push	{r7}
 800df34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800df36:	e7fe      	b.n	800df36 <BusFault_Handler+0x4>

0800df38 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800df38:	b480      	push	{r7}
 800df3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800df3c:	e7fe      	b.n	800df3c <UsageFault_Handler+0x4>

0800df3e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800df3e:	b480      	push	{r7}
 800df40:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800df42:	bf00      	nop
 800df44:	46bd      	mov	sp, r7
 800df46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df4a:	4770      	bx	lr

0800df4c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800df4c:	b480      	push	{r7}
 800df4e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800df50:	bf00      	nop
 800df52:	46bd      	mov	sp, r7
 800df54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df58:	4770      	bx	lr

0800df5a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800df5a:	b480      	push	{r7}
 800df5c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800df5e:	bf00      	nop
 800df60:	46bd      	mov	sp, r7
 800df62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df66:	4770      	bx	lr

0800df68 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800df68:	b580      	push	{r7, lr}
 800df6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800df6c:	f7f3 f836 	bl	8000fdc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800df70:	bf00      	nop
 800df72:	bd80      	pop	{r7, pc}

0800df74 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800df74:	b580      	push	{r7, lr}
 800df76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800df78:	4802      	ldr	r0, [pc, #8]	; (800df84 <TIM6_DAC_IRQHandler+0x10>)
 800df7a:	f7f5 fd1e 	bl	80039ba <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800df7e:	bf00      	nop
 800df80:	bd80      	pop	{r7, pc}
 800df82:	bf00      	nop
 800df84:	20000c34 	.word	0x20000c34

0800df88 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800df88:	b580      	push	{r7, lr}
 800df8a:	b086      	sub	sp, #24
 800df8c:	af00      	add	r7, sp, #0
 800df8e:	60f8      	str	r0, [r7, #12]
 800df90:	60b9      	str	r1, [r7, #8]
 800df92:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800df94:	2300      	movs	r3, #0
 800df96:	617b      	str	r3, [r7, #20]
 800df98:	e00a      	b.n	800dfb0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800df9a:	f3af 8000 	nop.w
 800df9e:	4601      	mov	r1, r0
 800dfa0:	68bb      	ldr	r3, [r7, #8]
 800dfa2:	1c5a      	adds	r2, r3, #1
 800dfa4:	60ba      	str	r2, [r7, #8]
 800dfa6:	b2ca      	uxtb	r2, r1
 800dfa8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800dfaa:	697b      	ldr	r3, [r7, #20]
 800dfac:	3301      	adds	r3, #1
 800dfae:	617b      	str	r3, [r7, #20]
 800dfb0:	697a      	ldr	r2, [r7, #20]
 800dfb2:	687b      	ldr	r3, [r7, #4]
 800dfb4:	429a      	cmp	r2, r3
 800dfb6:	dbf0      	blt.n	800df9a <_read+0x12>
	}

return len;
 800dfb8:	687b      	ldr	r3, [r7, #4]
}
 800dfba:	4618      	mov	r0, r3
 800dfbc:	3718      	adds	r7, #24
 800dfbe:	46bd      	mov	sp, r7
 800dfc0:	bd80      	pop	{r7, pc}

0800dfc2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800dfc2:	b580      	push	{r7, lr}
 800dfc4:	b086      	sub	sp, #24
 800dfc6:	af00      	add	r7, sp, #0
 800dfc8:	60f8      	str	r0, [r7, #12]
 800dfca:	60b9      	str	r1, [r7, #8]
 800dfcc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800dfce:	2300      	movs	r3, #0
 800dfd0:	617b      	str	r3, [r7, #20]
 800dfd2:	e009      	b.n	800dfe8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800dfd4:	68bb      	ldr	r3, [r7, #8]
 800dfd6:	1c5a      	adds	r2, r3, #1
 800dfd8:	60ba      	str	r2, [r7, #8]
 800dfda:	781b      	ldrb	r3, [r3, #0]
 800dfdc:	4618      	mov	r0, r3
 800dfde:	f7fa ffd9 	bl	8008f94 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800dfe2:	697b      	ldr	r3, [r7, #20]
 800dfe4:	3301      	adds	r3, #1
 800dfe6:	617b      	str	r3, [r7, #20]
 800dfe8:	697a      	ldr	r2, [r7, #20]
 800dfea:	687b      	ldr	r3, [r7, #4]
 800dfec:	429a      	cmp	r2, r3
 800dfee:	dbf1      	blt.n	800dfd4 <_write+0x12>
	}
	return len;
 800dff0:	687b      	ldr	r3, [r7, #4]
}
 800dff2:	4618      	mov	r0, r3
 800dff4:	3718      	adds	r7, #24
 800dff6:	46bd      	mov	sp, r7
 800dff8:	bd80      	pop	{r7, pc}

0800dffa <_close>:

int _close(int file)
{
 800dffa:	b480      	push	{r7}
 800dffc:	b083      	sub	sp, #12
 800dffe:	af00      	add	r7, sp, #0
 800e000:	6078      	str	r0, [r7, #4]
	return -1;
 800e002:	f04f 33ff 	mov.w	r3, #4294967295
}
 800e006:	4618      	mov	r0, r3
 800e008:	370c      	adds	r7, #12
 800e00a:	46bd      	mov	sp, r7
 800e00c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e010:	4770      	bx	lr

0800e012 <_fstat>:


int _fstat(int file, struct stat *st)
{
 800e012:	b480      	push	{r7}
 800e014:	b083      	sub	sp, #12
 800e016:	af00      	add	r7, sp, #0
 800e018:	6078      	str	r0, [r7, #4]
 800e01a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800e01c:	683b      	ldr	r3, [r7, #0]
 800e01e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800e022:	605a      	str	r2, [r3, #4]
	return 0;
 800e024:	2300      	movs	r3, #0
}
 800e026:	4618      	mov	r0, r3
 800e028:	370c      	adds	r7, #12
 800e02a:	46bd      	mov	sp, r7
 800e02c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e030:	4770      	bx	lr

0800e032 <_isatty>:

int _isatty(int file)
{
 800e032:	b480      	push	{r7}
 800e034:	b083      	sub	sp, #12
 800e036:	af00      	add	r7, sp, #0
 800e038:	6078      	str	r0, [r7, #4]
	return 1;
 800e03a:	2301      	movs	r3, #1
}
 800e03c:	4618      	mov	r0, r3
 800e03e:	370c      	adds	r7, #12
 800e040:	46bd      	mov	sp, r7
 800e042:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e046:	4770      	bx	lr

0800e048 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800e048:	b480      	push	{r7}
 800e04a:	b085      	sub	sp, #20
 800e04c:	af00      	add	r7, sp, #0
 800e04e:	60f8      	str	r0, [r7, #12]
 800e050:	60b9      	str	r1, [r7, #8]
 800e052:	607a      	str	r2, [r7, #4]
	return 0;
 800e054:	2300      	movs	r3, #0
}
 800e056:	4618      	mov	r0, r3
 800e058:	3714      	adds	r7, #20
 800e05a:	46bd      	mov	sp, r7
 800e05c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e060:	4770      	bx	lr
	...

0800e064 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800e064:	b580      	push	{r7, lr}
 800e066:	b084      	sub	sp, #16
 800e068:	af00      	add	r7, sp, #0
 800e06a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800e06c:	4b11      	ldr	r3, [pc, #68]	; (800e0b4 <_sbrk+0x50>)
 800e06e:	681b      	ldr	r3, [r3, #0]
 800e070:	2b00      	cmp	r3, #0
 800e072:	d102      	bne.n	800e07a <_sbrk+0x16>
		heap_end = &end;
 800e074:	4b0f      	ldr	r3, [pc, #60]	; (800e0b4 <_sbrk+0x50>)
 800e076:	4a10      	ldr	r2, [pc, #64]	; (800e0b8 <_sbrk+0x54>)
 800e078:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800e07a:	4b0e      	ldr	r3, [pc, #56]	; (800e0b4 <_sbrk+0x50>)
 800e07c:	681b      	ldr	r3, [r3, #0]
 800e07e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800e080:	4b0c      	ldr	r3, [pc, #48]	; (800e0b4 <_sbrk+0x50>)
 800e082:	681a      	ldr	r2, [r3, #0]
 800e084:	687b      	ldr	r3, [r7, #4]
 800e086:	4413      	add	r3, r2
 800e088:	466a      	mov	r2, sp
 800e08a:	4293      	cmp	r3, r2
 800e08c:	d907      	bls.n	800e09e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800e08e:	f000 f875 	bl	800e17c <__errno>
 800e092:	4602      	mov	r2, r0
 800e094:	230c      	movs	r3, #12
 800e096:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 800e098:	f04f 33ff 	mov.w	r3, #4294967295
 800e09c:	e006      	b.n	800e0ac <_sbrk+0x48>
	}

	heap_end += incr;
 800e09e:	4b05      	ldr	r3, [pc, #20]	; (800e0b4 <_sbrk+0x50>)
 800e0a0:	681a      	ldr	r2, [r3, #0]
 800e0a2:	687b      	ldr	r3, [r7, #4]
 800e0a4:	4413      	add	r3, r2
 800e0a6:	4a03      	ldr	r2, [pc, #12]	; (800e0b4 <_sbrk+0x50>)
 800e0a8:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800e0aa:	68fb      	ldr	r3, [r7, #12]
}
 800e0ac:	4618      	mov	r0, r3
 800e0ae:	3710      	adds	r7, #16
 800e0b0:	46bd      	mov	sp, r7
 800e0b2:	bd80      	pop	{r7, pc}
 800e0b4:	20000194 	.word	0x20000194
 800e0b8:	20001020 	.word	0x20001020

0800e0bc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800e0bc:	b480      	push	{r7}
 800e0be:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800e0c0:	4b16      	ldr	r3, [pc, #88]	; (800e11c <SystemInit+0x60>)
 800e0c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e0c6:	4a15      	ldr	r2, [pc, #84]	; (800e11c <SystemInit+0x60>)
 800e0c8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800e0cc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800e0d0:	4b13      	ldr	r3, [pc, #76]	; (800e120 <SystemInit+0x64>)
 800e0d2:	681b      	ldr	r3, [r3, #0]
 800e0d4:	4a12      	ldr	r2, [pc, #72]	; (800e120 <SystemInit+0x64>)
 800e0d6:	f043 0301 	orr.w	r3, r3, #1
 800e0da:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800e0dc:	4b10      	ldr	r3, [pc, #64]	; (800e120 <SystemInit+0x64>)
 800e0de:	2200      	movs	r2, #0
 800e0e0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800e0e2:	4b0f      	ldr	r3, [pc, #60]	; (800e120 <SystemInit+0x64>)
 800e0e4:	681b      	ldr	r3, [r3, #0]
 800e0e6:	4a0e      	ldr	r2, [pc, #56]	; (800e120 <SystemInit+0x64>)
 800e0e8:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800e0ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800e0f0:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800e0f2:	4b0b      	ldr	r3, [pc, #44]	; (800e120 <SystemInit+0x64>)
 800e0f4:	4a0b      	ldr	r2, [pc, #44]	; (800e124 <SystemInit+0x68>)
 800e0f6:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800e0f8:	4b09      	ldr	r3, [pc, #36]	; (800e120 <SystemInit+0x64>)
 800e0fa:	681b      	ldr	r3, [r3, #0]
 800e0fc:	4a08      	ldr	r2, [pc, #32]	; (800e120 <SystemInit+0x64>)
 800e0fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800e102:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800e104:	4b06      	ldr	r3, [pc, #24]	; (800e120 <SystemInit+0x64>)
 800e106:	2200      	movs	r2, #0
 800e108:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800e10a:	4b04      	ldr	r3, [pc, #16]	; (800e11c <SystemInit+0x60>)
 800e10c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800e110:	609a      	str	r2, [r3, #8]
#endif
}
 800e112:	bf00      	nop
 800e114:	46bd      	mov	sp, r7
 800e116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e11a:	4770      	bx	lr
 800e11c:	e000ed00 	.word	0xe000ed00
 800e120:	40023800 	.word	0x40023800
 800e124:	24003010 	.word	0x24003010

0800e128 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800e128:	f8df d034 	ldr.w	sp, [pc, #52]	; 800e160 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800e12c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800e12e:	e003      	b.n	800e138 <LoopCopyDataInit>

0800e130 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800e130:	4b0c      	ldr	r3, [pc, #48]	; (800e164 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800e132:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800e134:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800e136:	3104      	adds	r1, #4

0800e138 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800e138:	480b      	ldr	r0, [pc, #44]	; (800e168 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800e13a:	4b0c      	ldr	r3, [pc, #48]	; (800e16c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800e13c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800e13e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800e140:	d3f6      	bcc.n	800e130 <CopyDataInit>
  ldr  r2, =_sbss
 800e142:	4a0b      	ldr	r2, [pc, #44]	; (800e170 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800e144:	e002      	b.n	800e14c <LoopFillZerobss>

0800e146 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800e146:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800e148:	f842 3b04 	str.w	r3, [r2], #4

0800e14c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800e14c:	4b09      	ldr	r3, [pc, #36]	; (800e174 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800e14e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800e150:	d3f9      	bcc.n	800e146 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800e152:	f7ff ffb3 	bl	800e0bc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800e156:	f000 f817 	bl	800e188 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800e15a:	f7fb ffd3 	bl	800a104 <main>
  bx  lr    
 800e15e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800e160:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800e164:	0800f9bc 	.word	0x0800f9bc
  ldr  r0, =_sdata
 800e168:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800e16c:	2000016c 	.word	0x2000016c
  ldr  r2, =_sbss
 800e170:	2000016c 	.word	0x2000016c
  ldr  r3, = _ebss
 800e174:	2000101c 	.word	0x2000101c

0800e178 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800e178:	e7fe      	b.n	800e178 <ADC_IRQHandler>
	...

0800e17c <__errno>:
 800e17c:	4b01      	ldr	r3, [pc, #4]	; (800e184 <__errno+0x8>)
 800e17e:	6818      	ldr	r0, [r3, #0]
 800e180:	4770      	bx	lr
 800e182:	bf00      	nop
 800e184:	20000104 	.word	0x20000104

0800e188 <__libc_init_array>:
 800e188:	b570      	push	{r4, r5, r6, lr}
 800e18a:	4e0d      	ldr	r6, [pc, #52]	; (800e1c0 <__libc_init_array+0x38>)
 800e18c:	4c0d      	ldr	r4, [pc, #52]	; (800e1c4 <__libc_init_array+0x3c>)
 800e18e:	1ba4      	subs	r4, r4, r6
 800e190:	10a4      	asrs	r4, r4, #2
 800e192:	2500      	movs	r5, #0
 800e194:	42a5      	cmp	r5, r4
 800e196:	d109      	bne.n	800e1ac <__libc_init_array+0x24>
 800e198:	4e0b      	ldr	r6, [pc, #44]	; (800e1c8 <__libc_init_array+0x40>)
 800e19a:	4c0c      	ldr	r4, [pc, #48]	; (800e1cc <__libc_init_array+0x44>)
 800e19c:	f001 f932 	bl	800f404 <_init>
 800e1a0:	1ba4      	subs	r4, r4, r6
 800e1a2:	10a4      	asrs	r4, r4, #2
 800e1a4:	2500      	movs	r5, #0
 800e1a6:	42a5      	cmp	r5, r4
 800e1a8:	d105      	bne.n	800e1b6 <__libc_init_array+0x2e>
 800e1aa:	bd70      	pop	{r4, r5, r6, pc}
 800e1ac:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800e1b0:	4798      	blx	r3
 800e1b2:	3501      	adds	r5, #1
 800e1b4:	e7ee      	b.n	800e194 <__libc_init_array+0xc>
 800e1b6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800e1ba:	4798      	blx	r3
 800e1bc:	3501      	adds	r5, #1
 800e1be:	e7f2      	b.n	800e1a6 <__libc_init_array+0x1e>
 800e1c0:	0800f9b4 	.word	0x0800f9b4
 800e1c4:	0800f9b4 	.word	0x0800f9b4
 800e1c8:	0800f9b4 	.word	0x0800f9b4
 800e1cc:	0800f9b8 	.word	0x0800f9b8

0800e1d0 <memset>:
 800e1d0:	4402      	add	r2, r0
 800e1d2:	4603      	mov	r3, r0
 800e1d4:	4293      	cmp	r3, r2
 800e1d6:	d100      	bne.n	800e1da <memset+0xa>
 800e1d8:	4770      	bx	lr
 800e1da:	f803 1b01 	strb.w	r1, [r3], #1
 800e1de:	e7f9      	b.n	800e1d4 <memset+0x4>

0800e1e0 <iprintf>:
 800e1e0:	b40f      	push	{r0, r1, r2, r3}
 800e1e2:	4b0a      	ldr	r3, [pc, #40]	; (800e20c <iprintf+0x2c>)
 800e1e4:	b513      	push	{r0, r1, r4, lr}
 800e1e6:	681c      	ldr	r4, [r3, #0]
 800e1e8:	b124      	cbz	r4, 800e1f4 <iprintf+0x14>
 800e1ea:	69a3      	ldr	r3, [r4, #24]
 800e1ec:	b913      	cbnz	r3, 800e1f4 <iprintf+0x14>
 800e1ee:	4620      	mov	r0, r4
 800e1f0:	f000 fad8 	bl	800e7a4 <__sinit>
 800e1f4:	ab05      	add	r3, sp, #20
 800e1f6:	9a04      	ldr	r2, [sp, #16]
 800e1f8:	68a1      	ldr	r1, [r4, #8]
 800e1fa:	9301      	str	r3, [sp, #4]
 800e1fc:	4620      	mov	r0, r4
 800e1fe:	f000 fc99 	bl	800eb34 <_vfiprintf_r>
 800e202:	b002      	add	sp, #8
 800e204:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e208:	b004      	add	sp, #16
 800e20a:	4770      	bx	lr
 800e20c:	20000104 	.word	0x20000104

0800e210 <_puts_r>:
 800e210:	b570      	push	{r4, r5, r6, lr}
 800e212:	460e      	mov	r6, r1
 800e214:	4605      	mov	r5, r0
 800e216:	b118      	cbz	r0, 800e220 <_puts_r+0x10>
 800e218:	6983      	ldr	r3, [r0, #24]
 800e21a:	b90b      	cbnz	r3, 800e220 <_puts_r+0x10>
 800e21c:	f000 fac2 	bl	800e7a4 <__sinit>
 800e220:	69ab      	ldr	r3, [r5, #24]
 800e222:	68ac      	ldr	r4, [r5, #8]
 800e224:	b913      	cbnz	r3, 800e22c <_puts_r+0x1c>
 800e226:	4628      	mov	r0, r5
 800e228:	f000 fabc 	bl	800e7a4 <__sinit>
 800e22c:	4b23      	ldr	r3, [pc, #140]	; (800e2bc <_puts_r+0xac>)
 800e22e:	429c      	cmp	r4, r3
 800e230:	d117      	bne.n	800e262 <_puts_r+0x52>
 800e232:	686c      	ldr	r4, [r5, #4]
 800e234:	89a3      	ldrh	r3, [r4, #12]
 800e236:	071b      	lsls	r3, r3, #28
 800e238:	d51d      	bpl.n	800e276 <_puts_r+0x66>
 800e23a:	6923      	ldr	r3, [r4, #16]
 800e23c:	b1db      	cbz	r3, 800e276 <_puts_r+0x66>
 800e23e:	3e01      	subs	r6, #1
 800e240:	68a3      	ldr	r3, [r4, #8]
 800e242:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800e246:	3b01      	subs	r3, #1
 800e248:	60a3      	str	r3, [r4, #8]
 800e24a:	b9e9      	cbnz	r1, 800e288 <_puts_r+0x78>
 800e24c:	2b00      	cmp	r3, #0
 800e24e:	da2e      	bge.n	800e2ae <_puts_r+0x9e>
 800e250:	4622      	mov	r2, r4
 800e252:	210a      	movs	r1, #10
 800e254:	4628      	mov	r0, r5
 800e256:	f000 f8f5 	bl	800e444 <__swbuf_r>
 800e25a:	3001      	adds	r0, #1
 800e25c:	d011      	beq.n	800e282 <_puts_r+0x72>
 800e25e:	200a      	movs	r0, #10
 800e260:	e011      	b.n	800e286 <_puts_r+0x76>
 800e262:	4b17      	ldr	r3, [pc, #92]	; (800e2c0 <_puts_r+0xb0>)
 800e264:	429c      	cmp	r4, r3
 800e266:	d101      	bne.n	800e26c <_puts_r+0x5c>
 800e268:	68ac      	ldr	r4, [r5, #8]
 800e26a:	e7e3      	b.n	800e234 <_puts_r+0x24>
 800e26c:	4b15      	ldr	r3, [pc, #84]	; (800e2c4 <_puts_r+0xb4>)
 800e26e:	429c      	cmp	r4, r3
 800e270:	bf08      	it	eq
 800e272:	68ec      	ldreq	r4, [r5, #12]
 800e274:	e7de      	b.n	800e234 <_puts_r+0x24>
 800e276:	4621      	mov	r1, r4
 800e278:	4628      	mov	r0, r5
 800e27a:	f000 f935 	bl	800e4e8 <__swsetup_r>
 800e27e:	2800      	cmp	r0, #0
 800e280:	d0dd      	beq.n	800e23e <_puts_r+0x2e>
 800e282:	f04f 30ff 	mov.w	r0, #4294967295
 800e286:	bd70      	pop	{r4, r5, r6, pc}
 800e288:	2b00      	cmp	r3, #0
 800e28a:	da04      	bge.n	800e296 <_puts_r+0x86>
 800e28c:	69a2      	ldr	r2, [r4, #24]
 800e28e:	429a      	cmp	r2, r3
 800e290:	dc06      	bgt.n	800e2a0 <_puts_r+0x90>
 800e292:	290a      	cmp	r1, #10
 800e294:	d004      	beq.n	800e2a0 <_puts_r+0x90>
 800e296:	6823      	ldr	r3, [r4, #0]
 800e298:	1c5a      	adds	r2, r3, #1
 800e29a:	6022      	str	r2, [r4, #0]
 800e29c:	7019      	strb	r1, [r3, #0]
 800e29e:	e7cf      	b.n	800e240 <_puts_r+0x30>
 800e2a0:	4622      	mov	r2, r4
 800e2a2:	4628      	mov	r0, r5
 800e2a4:	f000 f8ce 	bl	800e444 <__swbuf_r>
 800e2a8:	3001      	adds	r0, #1
 800e2aa:	d1c9      	bne.n	800e240 <_puts_r+0x30>
 800e2ac:	e7e9      	b.n	800e282 <_puts_r+0x72>
 800e2ae:	6823      	ldr	r3, [r4, #0]
 800e2b0:	200a      	movs	r0, #10
 800e2b2:	1c5a      	adds	r2, r3, #1
 800e2b4:	6022      	str	r2, [r4, #0]
 800e2b6:	7018      	strb	r0, [r3, #0]
 800e2b8:	e7e5      	b.n	800e286 <_puts_r+0x76>
 800e2ba:	bf00      	nop
 800e2bc:	0800f934 	.word	0x0800f934
 800e2c0:	0800f954 	.word	0x0800f954
 800e2c4:	0800f914 	.word	0x0800f914

0800e2c8 <puts>:
 800e2c8:	4b02      	ldr	r3, [pc, #8]	; (800e2d4 <puts+0xc>)
 800e2ca:	4601      	mov	r1, r0
 800e2cc:	6818      	ldr	r0, [r3, #0]
 800e2ce:	f7ff bf9f 	b.w	800e210 <_puts_r>
 800e2d2:	bf00      	nop
 800e2d4:	20000104 	.word	0x20000104

0800e2d8 <setbuf>:
 800e2d8:	2900      	cmp	r1, #0
 800e2da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e2de:	bf0c      	ite	eq
 800e2e0:	2202      	moveq	r2, #2
 800e2e2:	2200      	movne	r2, #0
 800e2e4:	f000 b800 	b.w	800e2e8 <setvbuf>

0800e2e8 <setvbuf>:
 800e2e8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e2ec:	461d      	mov	r5, r3
 800e2ee:	4b51      	ldr	r3, [pc, #324]	; (800e434 <setvbuf+0x14c>)
 800e2f0:	681e      	ldr	r6, [r3, #0]
 800e2f2:	4604      	mov	r4, r0
 800e2f4:	460f      	mov	r7, r1
 800e2f6:	4690      	mov	r8, r2
 800e2f8:	b126      	cbz	r6, 800e304 <setvbuf+0x1c>
 800e2fa:	69b3      	ldr	r3, [r6, #24]
 800e2fc:	b913      	cbnz	r3, 800e304 <setvbuf+0x1c>
 800e2fe:	4630      	mov	r0, r6
 800e300:	f000 fa50 	bl	800e7a4 <__sinit>
 800e304:	4b4c      	ldr	r3, [pc, #304]	; (800e438 <setvbuf+0x150>)
 800e306:	429c      	cmp	r4, r3
 800e308:	d152      	bne.n	800e3b0 <setvbuf+0xc8>
 800e30a:	6874      	ldr	r4, [r6, #4]
 800e30c:	f1b8 0f02 	cmp.w	r8, #2
 800e310:	d006      	beq.n	800e320 <setvbuf+0x38>
 800e312:	f1b8 0f01 	cmp.w	r8, #1
 800e316:	f200 8089 	bhi.w	800e42c <setvbuf+0x144>
 800e31a:	2d00      	cmp	r5, #0
 800e31c:	f2c0 8086 	blt.w	800e42c <setvbuf+0x144>
 800e320:	4621      	mov	r1, r4
 800e322:	4630      	mov	r0, r6
 800e324:	f000 f9d4 	bl	800e6d0 <_fflush_r>
 800e328:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e32a:	b141      	cbz	r1, 800e33e <setvbuf+0x56>
 800e32c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e330:	4299      	cmp	r1, r3
 800e332:	d002      	beq.n	800e33a <setvbuf+0x52>
 800e334:	4630      	mov	r0, r6
 800e336:	f000 fb2b 	bl	800e990 <_free_r>
 800e33a:	2300      	movs	r3, #0
 800e33c:	6363      	str	r3, [r4, #52]	; 0x34
 800e33e:	2300      	movs	r3, #0
 800e340:	61a3      	str	r3, [r4, #24]
 800e342:	6063      	str	r3, [r4, #4]
 800e344:	89a3      	ldrh	r3, [r4, #12]
 800e346:	061b      	lsls	r3, r3, #24
 800e348:	d503      	bpl.n	800e352 <setvbuf+0x6a>
 800e34a:	6921      	ldr	r1, [r4, #16]
 800e34c:	4630      	mov	r0, r6
 800e34e:	f000 fb1f 	bl	800e990 <_free_r>
 800e352:	89a3      	ldrh	r3, [r4, #12]
 800e354:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 800e358:	f023 0303 	bic.w	r3, r3, #3
 800e35c:	f1b8 0f02 	cmp.w	r8, #2
 800e360:	81a3      	strh	r3, [r4, #12]
 800e362:	d05d      	beq.n	800e420 <setvbuf+0x138>
 800e364:	ab01      	add	r3, sp, #4
 800e366:	466a      	mov	r2, sp
 800e368:	4621      	mov	r1, r4
 800e36a:	4630      	mov	r0, r6
 800e36c:	f000 faa4 	bl	800e8b8 <__swhatbuf_r>
 800e370:	89a3      	ldrh	r3, [r4, #12]
 800e372:	4318      	orrs	r0, r3
 800e374:	81a0      	strh	r0, [r4, #12]
 800e376:	bb2d      	cbnz	r5, 800e3c4 <setvbuf+0xdc>
 800e378:	9d00      	ldr	r5, [sp, #0]
 800e37a:	4628      	mov	r0, r5
 800e37c:	f000 fb00 	bl	800e980 <malloc>
 800e380:	4607      	mov	r7, r0
 800e382:	2800      	cmp	r0, #0
 800e384:	d14e      	bne.n	800e424 <setvbuf+0x13c>
 800e386:	f8dd 9000 	ldr.w	r9, [sp]
 800e38a:	45a9      	cmp	r9, r5
 800e38c:	d13c      	bne.n	800e408 <setvbuf+0x120>
 800e38e:	f04f 30ff 	mov.w	r0, #4294967295
 800e392:	89a3      	ldrh	r3, [r4, #12]
 800e394:	f043 0302 	orr.w	r3, r3, #2
 800e398:	81a3      	strh	r3, [r4, #12]
 800e39a:	2300      	movs	r3, #0
 800e39c:	60a3      	str	r3, [r4, #8]
 800e39e:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800e3a2:	6023      	str	r3, [r4, #0]
 800e3a4:	6123      	str	r3, [r4, #16]
 800e3a6:	2301      	movs	r3, #1
 800e3a8:	6163      	str	r3, [r4, #20]
 800e3aa:	b003      	add	sp, #12
 800e3ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e3b0:	4b22      	ldr	r3, [pc, #136]	; (800e43c <setvbuf+0x154>)
 800e3b2:	429c      	cmp	r4, r3
 800e3b4:	d101      	bne.n	800e3ba <setvbuf+0xd2>
 800e3b6:	68b4      	ldr	r4, [r6, #8]
 800e3b8:	e7a8      	b.n	800e30c <setvbuf+0x24>
 800e3ba:	4b21      	ldr	r3, [pc, #132]	; (800e440 <setvbuf+0x158>)
 800e3bc:	429c      	cmp	r4, r3
 800e3be:	bf08      	it	eq
 800e3c0:	68f4      	ldreq	r4, [r6, #12]
 800e3c2:	e7a3      	b.n	800e30c <setvbuf+0x24>
 800e3c4:	2f00      	cmp	r7, #0
 800e3c6:	d0d8      	beq.n	800e37a <setvbuf+0x92>
 800e3c8:	69b3      	ldr	r3, [r6, #24]
 800e3ca:	b913      	cbnz	r3, 800e3d2 <setvbuf+0xea>
 800e3cc:	4630      	mov	r0, r6
 800e3ce:	f000 f9e9 	bl	800e7a4 <__sinit>
 800e3d2:	f1b8 0f01 	cmp.w	r8, #1
 800e3d6:	bf08      	it	eq
 800e3d8:	89a3      	ldrheq	r3, [r4, #12]
 800e3da:	6027      	str	r7, [r4, #0]
 800e3dc:	bf04      	itt	eq
 800e3de:	f043 0301 	orreq.w	r3, r3, #1
 800e3e2:	81a3      	strheq	r3, [r4, #12]
 800e3e4:	89a3      	ldrh	r3, [r4, #12]
 800e3e6:	f013 0008 	ands.w	r0, r3, #8
 800e3ea:	e9c4 7504 	strd	r7, r5, [r4, #16]
 800e3ee:	d01b      	beq.n	800e428 <setvbuf+0x140>
 800e3f0:	f013 0001 	ands.w	r0, r3, #1
 800e3f4:	bf18      	it	ne
 800e3f6:	426d      	negne	r5, r5
 800e3f8:	f04f 0300 	mov.w	r3, #0
 800e3fc:	bf1d      	ittte	ne
 800e3fe:	60a3      	strne	r3, [r4, #8]
 800e400:	61a5      	strne	r5, [r4, #24]
 800e402:	4618      	movne	r0, r3
 800e404:	60a5      	streq	r5, [r4, #8]
 800e406:	e7d0      	b.n	800e3aa <setvbuf+0xc2>
 800e408:	4648      	mov	r0, r9
 800e40a:	f000 fab9 	bl	800e980 <malloc>
 800e40e:	4607      	mov	r7, r0
 800e410:	2800      	cmp	r0, #0
 800e412:	d0bc      	beq.n	800e38e <setvbuf+0xa6>
 800e414:	89a3      	ldrh	r3, [r4, #12]
 800e416:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e41a:	81a3      	strh	r3, [r4, #12]
 800e41c:	464d      	mov	r5, r9
 800e41e:	e7d3      	b.n	800e3c8 <setvbuf+0xe0>
 800e420:	2000      	movs	r0, #0
 800e422:	e7b6      	b.n	800e392 <setvbuf+0xaa>
 800e424:	46a9      	mov	r9, r5
 800e426:	e7f5      	b.n	800e414 <setvbuf+0x12c>
 800e428:	60a0      	str	r0, [r4, #8]
 800e42a:	e7be      	b.n	800e3aa <setvbuf+0xc2>
 800e42c:	f04f 30ff 	mov.w	r0, #4294967295
 800e430:	e7bb      	b.n	800e3aa <setvbuf+0xc2>
 800e432:	bf00      	nop
 800e434:	20000104 	.word	0x20000104
 800e438:	0800f934 	.word	0x0800f934
 800e43c:	0800f954 	.word	0x0800f954
 800e440:	0800f914 	.word	0x0800f914

0800e444 <__swbuf_r>:
 800e444:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e446:	460e      	mov	r6, r1
 800e448:	4614      	mov	r4, r2
 800e44a:	4605      	mov	r5, r0
 800e44c:	b118      	cbz	r0, 800e456 <__swbuf_r+0x12>
 800e44e:	6983      	ldr	r3, [r0, #24]
 800e450:	b90b      	cbnz	r3, 800e456 <__swbuf_r+0x12>
 800e452:	f000 f9a7 	bl	800e7a4 <__sinit>
 800e456:	4b21      	ldr	r3, [pc, #132]	; (800e4dc <__swbuf_r+0x98>)
 800e458:	429c      	cmp	r4, r3
 800e45a:	d12a      	bne.n	800e4b2 <__swbuf_r+0x6e>
 800e45c:	686c      	ldr	r4, [r5, #4]
 800e45e:	69a3      	ldr	r3, [r4, #24]
 800e460:	60a3      	str	r3, [r4, #8]
 800e462:	89a3      	ldrh	r3, [r4, #12]
 800e464:	071a      	lsls	r2, r3, #28
 800e466:	d52e      	bpl.n	800e4c6 <__swbuf_r+0x82>
 800e468:	6923      	ldr	r3, [r4, #16]
 800e46a:	b363      	cbz	r3, 800e4c6 <__swbuf_r+0x82>
 800e46c:	6923      	ldr	r3, [r4, #16]
 800e46e:	6820      	ldr	r0, [r4, #0]
 800e470:	1ac0      	subs	r0, r0, r3
 800e472:	6963      	ldr	r3, [r4, #20]
 800e474:	b2f6      	uxtb	r6, r6
 800e476:	4283      	cmp	r3, r0
 800e478:	4637      	mov	r7, r6
 800e47a:	dc04      	bgt.n	800e486 <__swbuf_r+0x42>
 800e47c:	4621      	mov	r1, r4
 800e47e:	4628      	mov	r0, r5
 800e480:	f000 f926 	bl	800e6d0 <_fflush_r>
 800e484:	bb28      	cbnz	r0, 800e4d2 <__swbuf_r+0x8e>
 800e486:	68a3      	ldr	r3, [r4, #8]
 800e488:	3b01      	subs	r3, #1
 800e48a:	60a3      	str	r3, [r4, #8]
 800e48c:	6823      	ldr	r3, [r4, #0]
 800e48e:	1c5a      	adds	r2, r3, #1
 800e490:	6022      	str	r2, [r4, #0]
 800e492:	701e      	strb	r6, [r3, #0]
 800e494:	6963      	ldr	r3, [r4, #20]
 800e496:	3001      	adds	r0, #1
 800e498:	4283      	cmp	r3, r0
 800e49a:	d004      	beq.n	800e4a6 <__swbuf_r+0x62>
 800e49c:	89a3      	ldrh	r3, [r4, #12]
 800e49e:	07db      	lsls	r3, r3, #31
 800e4a0:	d519      	bpl.n	800e4d6 <__swbuf_r+0x92>
 800e4a2:	2e0a      	cmp	r6, #10
 800e4a4:	d117      	bne.n	800e4d6 <__swbuf_r+0x92>
 800e4a6:	4621      	mov	r1, r4
 800e4a8:	4628      	mov	r0, r5
 800e4aa:	f000 f911 	bl	800e6d0 <_fflush_r>
 800e4ae:	b190      	cbz	r0, 800e4d6 <__swbuf_r+0x92>
 800e4b0:	e00f      	b.n	800e4d2 <__swbuf_r+0x8e>
 800e4b2:	4b0b      	ldr	r3, [pc, #44]	; (800e4e0 <__swbuf_r+0x9c>)
 800e4b4:	429c      	cmp	r4, r3
 800e4b6:	d101      	bne.n	800e4bc <__swbuf_r+0x78>
 800e4b8:	68ac      	ldr	r4, [r5, #8]
 800e4ba:	e7d0      	b.n	800e45e <__swbuf_r+0x1a>
 800e4bc:	4b09      	ldr	r3, [pc, #36]	; (800e4e4 <__swbuf_r+0xa0>)
 800e4be:	429c      	cmp	r4, r3
 800e4c0:	bf08      	it	eq
 800e4c2:	68ec      	ldreq	r4, [r5, #12]
 800e4c4:	e7cb      	b.n	800e45e <__swbuf_r+0x1a>
 800e4c6:	4621      	mov	r1, r4
 800e4c8:	4628      	mov	r0, r5
 800e4ca:	f000 f80d 	bl	800e4e8 <__swsetup_r>
 800e4ce:	2800      	cmp	r0, #0
 800e4d0:	d0cc      	beq.n	800e46c <__swbuf_r+0x28>
 800e4d2:	f04f 37ff 	mov.w	r7, #4294967295
 800e4d6:	4638      	mov	r0, r7
 800e4d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e4da:	bf00      	nop
 800e4dc:	0800f934 	.word	0x0800f934
 800e4e0:	0800f954 	.word	0x0800f954
 800e4e4:	0800f914 	.word	0x0800f914

0800e4e8 <__swsetup_r>:
 800e4e8:	4b32      	ldr	r3, [pc, #200]	; (800e5b4 <__swsetup_r+0xcc>)
 800e4ea:	b570      	push	{r4, r5, r6, lr}
 800e4ec:	681d      	ldr	r5, [r3, #0]
 800e4ee:	4606      	mov	r6, r0
 800e4f0:	460c      	mov	r4, r1
 800e4f2:	b125      	cbz	r5, 800e4fe <__swsetup_r+0x16>
 800e4f4:	69ab      	ldr	r3, [r5, #24]
 800e4f6:	b913      	cbnz	r3, 800e4fe <__swsetup_r+0x16>
 800e4f8:	4628      	mov	r0, r5
 800e4fa:	f000 f953 	bl	800e7a4 <__sinit>
 800e4fe:	4b2e      	ldr	r3, [pc, #184]	; (800e5b8 <__swsetup_r+0xd0>)
 800e500:	429c      	cmp	r4, r3
 800e502:	d10f      	bne.n	800e524 <__swsetup_r+0x3c>
 800e504:	686c      	ldr	r4, [r5, #4]
 800e506:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e50a:	b29a      	uxth	r2, r3
 800e50c:	0715      	lsls	r5, r2, #28
 800e50e:	d42c      	bmi.n	800e56a <__swsetup_r+0x82>
 800e510:	06d0      	lsls	r0, r2, #27
 800e512:	d411      	bmi.n	800e538 <__swsetup_r+0x50>
 800e514:	2209      	movs	r2, #9
 800e516:	6032      	str	r2, [r6, #0]
 800e518:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e51c:	81a3      	strh	r3, [r4, #12]
 800e51e:	f04f 30ff 	mov.w	r0, #4294967295
 800e522:	e03e      	b.n	800e5a2 <__swsetup_r+0xba>
 800e524:	4b25      	ldr	r3, [pc, #148]	; (800e5bc <__swsetup_r+0xd4>)
 800e526:	429c      	cmp	r4, r3
 800e528:	d101      	bne.n	800e52e <__swsetup_r+0x46>
 800e52a:	68ac      	ldr	r4, [r5, #8]
 800e52c:	e7eb      	b.n	800e506 <__swsetup_r+0x1e>
 800e52e:	4b24      	ldr	r3, [pc, #144]	; (800e5c0 <__swsetup_r+0xd8>)
 800e530:	429c      	cmp	r4, r3
 800e532:	bf08      	it	eq
 800e534:	68ec      	ldreq	r4, [r5, #12]
 800e536:	e7e6      	b.n	800e506 <__swsetup_r+0x1e>
 800e538:	0751      	lsls	r1, r2, #29
 800e53a:	d512      	bpl.n	800e562 <__swsetup_r+0x7a>
 800e53c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e53e:	b141      	cbz	r1, 800e552 <__swsetup_r+0x6a>
 800e540:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e544:	4299      	cmp	r1, r3
 800e546:	d002      	beq.n	800e54e <__swsetup_r+0x66>
 800e548:	4630      	mov	r0, r6
 800e54a:	f000 fa21 	bl	800e990 <_free_r>
 800e54e:	2300      	movs	r3, #0
 800e550:	6363      	str	r3, [r4, #52]	; 0x34
 800e552:	89a3      	ldrh	r3, [r4, #12]
 800e554:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800e558:	81a3      	strh	r3, [r4, #12]
 800e55a:	2300      	movs	r3, #0
 800e55c:	6063      	str	r3, [r4, #4]
 800e55e:	6923      	ldr	r3, [r4, #16]
 800e560:	6023      	str	r3, [r4, #0]
 800e562:	89a3      	ldrh	r3, [r4, #12]
 800e564:	f043 0308 	orr.w	r3, r3, #8
 800e568:	81a3      	strh	r3, [r4, #12]
 800e56a:	6923      	ldr	r3, [r4, #16]
 800e56c:	b94b      	cbnz	r3, 800e582 <__swsetup_r+0x9a>
 800e56e:	89a3      	ldrh	r3, [r4, #12]
 800e570:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800e574:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e578:	d003      	beq.n	800e582 <__swsetup_r+0x9a>
 800e57a:	4621      	mov	r1, r4
 800e57c:	4630      	mov	r0, r6
 800e57e:	f000 f9bf 	bl	800e900 <__smakebuf_r>
 800e582:	89a2      	ldrh	r2, [r4, #12]
 800e584:	f012 0301 	ands.w	r3, r2, #1
 800e588:	d00c      	beq.n	800e5a4 <__swsetup_r+0xbc>
 800e58a:	2300      	movs	r3, #0
 800e58c:	60a3      	str	r3, [r4, #8]
 800e58e:	6963      	ldr	r3, [r4, #20]
 800e590:	425b      	negs	r3, r3
 800e592:	61a3      	str	r3, [r4, #24]
 800e594:	6923      	ldr	r3, [r4, #16]
 800e596:	b953      	cbnz	r3, 800e5ae <__swsetup_r+0xc6>
 800e598:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e59c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800e5a0:	d1ba      	bne.n	800e518 <__swsetup_r+0x30>
 800e5a2:	bd70      	pop	{r4, r5, r6, pc}
 800e5a4:	0792      	lsls	r2, r2, #30
 800e5a6:	bf58      	it	pl
 800e5a8:	6963      	ldrpl	r3, [r4, #20]
 800e5aa:	60a3      	str	r3, [r4, #8]
 800e5ac:	e7f2      	b.n	800e594 <__swsetup_r+0xac>
 800e5ae:	2000      	movs	r0, #0
 800e5b0:	e7f7      	b.n	800e5a2 <__swsetup_r+0xba>
 800e5b2:	bf00      	nop
 800e5b4:	20000104 	.word	0x20000104
 800e5b8:	0800f934 	.word	0x0800f934
 800e5bc:	0800f954 	.word	0x0800f954
 800e5c0:	0800f914 	.word	0x0800f914

0800e5c4 <__sflush_r>:
 800e5c4:	898a      	ldrh	r2, [r1, #12]
 800e5c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e5ca:	4605      	mov	r5, r0
 800e5cc:	0710      	lsls	r0, r2, #28
 800e5ce:	460c      	mov	r4, r1
 800e5d0:	d458      	bmi.n	800e684 <__sflush_r+0xc0>
 800e5d2:	684b      	ldr	r3, [r1, #4]
 800e5d4:	2b00      	cmp	r3, #0
 800e5d6:	dc05      	bgt.n	800e5e4 <__sflush_r+0x20>
 800e5d8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800e5da:	2b00      	cmp	r3, #0
 800e5dc:	dc02      	bgt.n	800e5e4 <__sflush_r+0x20>
 800e5de:	2000      	movs	r0, #0
 800e5e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e5e4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e5e6:	2e00      	cmp	r6, #0
 800e5e8:	d0f9      	beq.n	800e5de <__sflush_r+0x1a>
 800e5ea:	2300      	movs	r3, #0
 800e5ec:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800e5f0:	682f      	ldr	r7, [r5, #0]
 800e5f2:	6a21      	ldr	r1, [r4, #32]
 800e5f4:	602b      	str	r3, [r5, #0]
 800e5f6:	d032      	beq.n	800e65e <__sflush_r+0x9a>
 800e5f8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800e5fa:	89a3      	ldrh	r3, [r4, #12]
 800e5fc:	075a      	lsls	r2, r3, #29
 800e5fe:	d505      	bpl.n	800e60c <__sflush_r+0x48>
 800e600:	6863      	ldr	r3, [r4, #4]
 800e602:	1ac0      	subs	r0, r0, r3
 800e604:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e606:	b10b      	cbz	r3, 800e60c <__sflush_r+0x48>
 800e608:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e60a:	1ac0      	subs	r0, r0, r3
 800e60c:	2300      	movs	r3, #0
 800e60e:	4602      	mov	r2, r0
 800e610:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e612:	6a21      	ldr	r1, [r4, #32]
 800e614:	4628      	mov	r0, r5
 800e616:	47b0      	blx	r6
 800e618:	1c43      	adds	r3, r0, #1
 800e61a:	89a3      	ldrh	r3, [r4, #12]
 800e61c:	d106      	bne.n	800e62c <__sflush_r+0x68>
 800e61e:	6829      	ldr	r1, [r5, #0]
 800e620:	291d      	cmp	r1, #29
 800e622:	d848      	bhi.n	800e6b6 <__sflush_r+0xf2>
 800e624:	4a29      	ldr	r2, [pc, #164]	; (800e6cc <__sflush_r+0x108>)
 800e626:	40ca      	lsrs	r2, r1
 800e628:	07d6      	lsls	r6, r2, #31
 800e62a:	d544      	bpl.n	800e6b6 <__sflush_r+0xf2>
 800e62c:	2200      	movs	r2, #0
 800e62e:	6062      	str	r2, [r4, #4]
 800e630:	04d9      	lsls	r1, r3, #19
 800e632:	6922      	ldr	r2, [r4, #16]
 800e634:	6022      	str	r2, [r4, #0]
 800e636:	d504      	bpl.n	800e642 <__sflush_r+0x7e>
 800e638:	1c42      	adds	r2, r0, #1
 800e63a:	d101      	bne.n	800e640 <__sflush_r+0x7c>
 800e63c:	682b      	ldr	r3, [r5, #0]
 800e63e:	b903      	cbnz	r3, 800e642 <__sflush_r+0x7e>
 800e640:	6560      	str	r0, [r4, #84]	; 0x54
 800e642:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e644:	602f      	str	r7, [r5, #0]
 800e646:	2900      	cmp	r1, #0
 800e648:	d0c9      	beq.n	800e5de <__sflush_r+0x1a>
 800e64a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e64e:	4299      	cmp	r1, r3
 800e650:	d002      	beq.n	800e658 <__sflush_r+0x94>
 800e652:	4628      	mov	r0, r5
 800e654:	f000 f99c 	bl	800e990 <_free_r>
 800e658:	2000      	movs	r0, #0
 800e65a:	6360      	str	r0, [r4, #52]	; 0x34
 800e65c:	e7c0      	b.n	800e5e0 <__sflush_r+0x1c>
 800e65e:	2301      	movs	r3, #1
 800e660:	4628      	mov	r0, r5
 800e662:	47b0      	blx	r6
 800e664:	1c41      	adds	r1, r0, #1
 800e666:	d1c8      	bne.n	800e5fa <__sflush_r+0x36>
 800e668:	682b      	ldr	r3, [r5, #0]
 800e66a:	2b00      	cmp	r3, #0
 800e66c:	d0c5      	beq.n	800e5fa <__sflush_r+0x36>
 800e66e:	2b1d      	cmp	r3, #29
 800e670:	d001      	beq.n	800e676 <__sflush_r+0xb2>
 800e672:	2b16      	cmp	r3, #22
 800e674:	d101      	bne.n	800e67a <__sflush_r+0xb6>
 800e676:	602f      	str	r7, [r5, #0]
 800e678:	e7b1      	b.n	800e5de <__sflush_r+0x1a>
 800e67a:	89a3      	ldrh	r3, [r4, #12]
 800e67c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e680:	81a3      	strh	r3, [r4, #12]
 800e682:	e7ad      	b.n	800e5e0 <__sflush_r+0x1c>
 800e684:	690f      	ldr	r7, [r1, #16]
 800e686:	2f00      	cmp	r7, #0
 800e688:	d0a9      	beq.n	800e5de <__sflush_r+0x1a>
 800e68a:	0793      	lsls	r3, r2, #30
 800e68c:	680e      	ldr	r6, [r1, #0]
 800e68e:	bf08      	it	eq
 800e690:	694b      	ldreq	r3, [r1, #20]
 800e692:	600f      	str	r7, [r1, #0]
 800e694:	bf18      	it	ne
 800e696:	2300      	movne	r3, #0
 800e698:	eba6 0807 	sub.w	r8, r6, r7
 800e69c:	608b      	str	r3, [r1, #8]
 800e69e:	f1b8 0f00 	cmp.w	r8, #0
 800e6a2:	dd9c      	ble.n	800e5de <__sflush_r+0x1a>
 800e6a4:	4643      	mov	r3, r8
 800e6a6:	463a      	mov	r2, r7
 800e6a8:	6a21      	ldr	r1, [r4, #32]
 800e6aa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800e6ac:	4628      	mov	r0, r5
 800e6ae:	47b0      	blx	r6
 800e6b0:	2800      	cmp	r0, #0
 800e6b2:	dc06      	bgt.n	800e6c2 <__sflush_r+0xfe>
 800e6b4:	89a3      	ldrh	r3, [r4, #12]
 800e6b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e6ba:	81a3      	strh	r3, [r4, #12]
 800e6bc:	f04f 30ff 	mov.w	r0, #4294967295
 800e6c0:	e78e      	b.n	800e5e0 <__sflush_r+0x1c>
 800e6c2:	4407      	add	r7, r0
 800e6c4:	eba8 0800 	sub.w	r8, r8, r0
 800e6c8:	e7e9      	b.n	800e69e <__sflush_r+0xda>
 800e6ca:	bf00      	nop
 800e6cc:	20400001 	.word	0x20400001

0800e6d0 <_fflush_r>:
 800e6d0:	b538      	push	{r3, r4, r5, lr}
 800e6d2:	690b      	ldr	r3, [r1, #16]
 800e6d4:	4605      	mov	r5, r0
 800e6d6:	460c      	mov	r4, r1
 800e6d8:	b1db      	cbz	r3, 800e712 <_fflush_r+0x42>
 800e6da:	b118      	cbz	r0, 800e6e4 <_fflush_r+0x14>
 800e6dc:	6983      	ldr	r3, [r0, #24]
 800e6de:	b90b      	cbnz	r3, 800e6e4 <_fflush_r+0x14>
 800e6e0:	f000 f860 	bl	800e7a4 <__sinit>
 800e6e4:	4b0c      	ldr	r3, [pc, #48]	; (800e718 <_fflush_r+0x48>)
 800e6e6:	429c      	cmp	r4, r3
 800e6e8:	d109      	bne.n	800e6fe <_fflush_r+0x2e>
 800e6ea:	686c      	ldr	r4, [r5, #4]
 800e6ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e6f0:	b17b      	cbz	r3, 800e712 <_fflush_r+0x42>
 800e6f2:	4621      	mov	r1, r4
 800e6f4:	4628      	mov	r0, r5
 800e6f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e6fa:	f7ff bf63 	b.w	800e5c4 <__sflush_r>
 800e6fe:	4b07      	ldr	r3, [pc, #28]	; (800e71c <_fflush_r+0x4c>)
 800e700:	429c      	cmp	r4, r3
 800e702:	d101      	bne.n	800e708 <_fflush_r+0x38>
 800e704:	68ac      	ldr	r4, [r5, #8]
 800e706:	e7f1      	b.n	800e6ec <_fflush_r+0x1c>
 800e708:	4b05      	ldr	r3, [pc, #20]	; (800e720 <_fflush_r+0x50>)
 800e70a:	429c      	cmp	r4, r3
 800e70c:	bf08      	it	eq
 800e70e:	68ec      	ldreq	r4, [r5, #12]
 800e710:	e7ec      	b.n	800e6ec <_fflush_r+0x1c>
 800e712:	2000      	movs	r0, #0
 800e714:	bd38      	pop	{r3, r4, r5, pc}
 800e716:	bf00      	nop
 800e718:	0800f934 	.word	0x0800f934
 800e71c:	0800f954 	.word	0x0800f954
 800e720:	0800f914 	.word	0x0800f914

0800e724 <std>:
 800e724:	2300      	movs	r3, #0
 800e726:	b510      	push	{r4, lr}
 800e728:	4604      	mov	r4, r0
 800e72a:	e9c0 3300 	strd	r3, r3, [r0]
 800e72e:	6083      	str	r3, [r0, #8]
 800e730:	8181      	strh	r1, [r0, #12]
 800e732:	6643      	str	r3, [r0, #100]	; 0x64
 800e734:	81c2      	strh	r2, [r0, #14]
 800e736:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e73a:	6183      	str	r3, [r0, #24]
 800e73c:	4619      	mov	r1, r3
 800e73e:	2208      	movs	r2, #8
 800e740:	305c      	adds	r0, #92	; 0x5c
 800e742:	f7ff fd45 	bl	800e1d0 <memset>
 800e746:	4b05      	ldr	r3, [pc, #20]	; (800e75c <std+0x38>)
 800e748:	6263      	str	r3, [r4, #36]	; 0x24
 800e74a:	4b05      	ldr	r3, [pc, #20]	; (800e760 <std+0x3c>)
 800e74c:	62a3      	str	r3, [r4, #40]	; 0x28
 800e74e:	4b05      	ldr	r3, [pc, #20]	; (800e764 <std+0x40>)
 800e750:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e752:	4b05      	ldr	r3, [pc, #20]	; (800e768 <std+0x44>)
 800e754:	6224      	str	r4, [r4, #32]
 800e756:	6323      	str	r3, [r4, #48]	; 0x30
 800e758:	bd10      	pop	{r4, pc}
 800e75a:	bf00      	nop
 800e75c:	0800f091 	.word	0x0800f091
 800e760:	0800f0b3 	.word	0x0800f0b3
 800e764:	0800f0eb 	.word	0x0800f0eb
 800e768:	0800f10f 	.word	0x0800f10f

0800e76c <_cleanup_r>:
 800e76c:	4901      	ldr	r1, [pc, #4]	; (800e774 <_cleanup_r+0x8>)
 800e76e:	f000 b885 	b.w	800e87c <_fwalk_reent>
 800e772:	bf00      	nop
 800e774:	0800e6d1 	.word	0x0800e6d1

0800e778 <__sfmoreglue>:
 800e778:	b570      	push	{r4, r5, r6, lr}
 800e77a:	1e4a      	subs	r2, r1, #1
 800e77c:	2568      	movs	r5, #104	; 0x68
 800e77e:	4355      	muls	r5, r2
 800e780:	460e      	mov	r6, r1
 800e782:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800e786:	f000 f951 	bl	800ea2c <_malloc_r>
 800e78a:	4604      	mov	r4, r0
 800e78c:	b140      	cbz	r0, 800e7a0 <__sfmoreglue+0x28>
 800e78e:	2100      	movs	r1, #0
 800e790:	e9c0 1600 	strd	r1, r6, [r0]
 800e794:	300c      	adds	r0, #12
 800e796:	60a0      	str	r0, [r4, #8]
 800e798:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800e79c:	f7ff fd18 	bl	800e1d0 <memset>
 800e7a0:	4620      	mov	r0, r4
 800e7a2:	bd70      	pop	{r4, r5, r6, pc}

0800e7a4 <__sinit>:
 800e7a4:	6983      	ldr	r3, [r0, #24]
 800e7a6:	b510      	push	{r4, lr}
 800e7a8:	4604      	mov	r4, r0
 800e7aa:	bb33      	cbnz	r3, 800e7fa <__sinit+0x56>
 800e7ac:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800e7b0:	6503      	str	r3, [r0, #80]	; 0x50
 800e7b2:	4b12      	ldr	r3, [pc, #72]	; (800e7fc <__sinit+0x58>)
 800e7b4:	4a12      	ldr	r2, [pc, #72]	; (800e800 <__sinit+0x5c>)
 800e7b6:	681b      	ldr	r3, [r3, #0]
 800e7b8:	6282      	str	r2, [r0, #40]	; 0x28
 800e7ba:	4298      	cmp	r0, r3
 800e7bc:	bf04      	itt	eq
 800e7be:	2301      	moveq	r3, #1
 800e7c0:	6183      	streq	r3, [r0, #24]
 800e7c2:	f000 f81f 	bl	800e804 <__sfp>
 800e7c6:	6060      	str	r0, [r4, #4]
 800e7c8:	4620      	mov	r0, r4
 800e7ca:	f000 f81b 	bl	800e804 <__sfp>
 800e7ce:	60a0      	str	r0, [r4, #8]
 800e7d0:	4620      	mov	r0, r4
 800e7d2:	f000 f817 	bl	800e804 <__sfp>
 800e7d6:	2200      	movs	r2, #0
 800e7d8:	60e0      	str	r0, [r4, #12]
 800e7da:	2104      	movs	r1, #4
 800e7dc:	6860      	ldr	r0, [r4, #4]
 800e7de:	f7ff ffa1 	bl	800e724 <std>
 800e7e2:	2201      	movs	r2, #1
 800e7e4:	2109      	movs	r1, #9
 800e7e6:	68a0      	ldr	r0, [r4, #8]
 800e7e8:	f7ff ff9c 	bl	800e724 <std>
 800e7ec:	2202      	movs	r2, #2
 800e7ee:	2112      	movs	r1, #18
 800e7f0:	68e0      	ldr	r0, [r4, #12]
 800e7f2:	f7ff ff97 	bl	800e724 <std>
 800e7f6:	2301      	movs	r3, #1
 800e7f8:	61a3      	str	r3, [r4, #24]
 800e7fa:	bd10      	pop	{r4, pc}
 800e7fc:	0800f910 	.word	0x0800f910
 800e800:	0800e76d 	.word	0x0800e76d

0800e804 <__sfp>:
 800e804:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e806:	4b1b      	ldr	r3, [pc, #108]	; (800e874 <__sfp+0x70>)
 800e808:	681e      	ldr	r6, [r3, #0]
 800e80a:	69b3      	ldr	r3, [r6, #24]
 800e80c:	4607      	mov	r7, r0
 800e80e:	b913      	cbnz	r3, 800e816 <__sfp+0x12>
 800e810:	4630      	mov	r0, r6
 800e812:	f7ff ffc7 	bl	800e7a4 <__sinit>
 800e816:	3648      	adds	r6, #72	; 0x48
 800e818:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800e81c:	3b01      	subs	r3, #1
 800e81e:	d503      	bpl.n	800e828 <__sfp+0x24>
 800e820:	6833      	ldr	r3, [r6, #0]
 800e822:	b133      	cbz	r3, 800e832 <__sfp+0x2e>
 800e824:	6836      	ldr	r6, [r6, #0]
 800e826:	e7f7      	b.n	800e818 <__sfp+0x14>
 800e828:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800e82c:	b16d      	cbz	r5, 800e84a <__sfp+0x46>
 800e82e:	3468      	adds	r4, #104	; 0x68
 800e830:	e7f4      	b.n	800e81c <__sfp+0x18>
 800e832:	2104      	movs	r1, #4
 800e834:	4638      	mov	r0, r7
 800e836:	f7ff ff9f 	bl	800e778 <__sfmoreglue>
 800e83a:	6030      	str	r0, [r6, #0]
 800e83c:	2800      	cmp	r0, #0
 800e83e:	d1f1      	bne.n	800e824 <__sfp+0x20>
 800e840:	230c      	movs	r3, #12
 800e842:	603b      	str	r3, [r7, #0]
 800e844:	4604      	mov	r4, r0
 800e846:	4620      	mov	r0, r4
 800e848:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e84a:	4b0b      	ldr	r3, [pc, #44]	; (800e878 <__sfp+0x74>)
 800e84c:	6665      	str	r5, [r4, #100]	; 0x64
 800e84e:	e9c4 5500 	strd	r5, r5, [r4]
 800e852:	60a5      	str	r5, [r4, #8]
 800e854:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800e858:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800e85c:	2208      	movs	r2, #8
 800e85e:	4629      	mov	r1, r5
 800e860:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800e864:	f7ff fcb4 	bl	800e1d0 <memset>
 800e868:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800e86c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800e870:	e7e9      	b.n	800e846 <__sfp+0x42>
 800e872:	bf00      	nop
 800e874:	0800f910 	.word	0x0800f910
 800e878:	ffff0001 	.word	0xffff0001

0800e87c <_fwalk_reent>:
 800e87c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e880:	4680      	mov	r8, r0
 800e882:	4689      	mov	r9, r1
 800e884:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800e888:	2600      	movs	r6, #0
 800e88a:	b914      	cbnz	r4, 800e892 <_fwalk_reent+0x16>
 800e88c:	4630      	mov	r0, r6
 800e88e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e892:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800e896:	3f01      	subs	r7, #1
 800e898:	d501      	bpl.n	800e89e <_fwalk_reent+0x22>
 800e89a:	6824      	ldr	r4, [r4, #0]
 800e89c:	e7f5      	b.n	800e88a <_fwalk_reent+0xe>
 800e89e:	89ab      	ldrh	r3, [r5, #12]
 800e8a0:	2b01      	cmp	r3, #1
 800e8a2:	d907      	bls.n	800e8b4 <_fwalk_reent+0x38>
 800e8a4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e8a8:	3301      	adds	r3, #1
 800e8aa:	d003      	beq.n	800e8b4 <_fwalk_reent+0x38>
 800e8ac:	4629      	mov	r1, r5
 800e8ae:	4640      	mov	r0, r8
 800e8b0:	47c8      	blx	r9
 800e8b2:	4306      	orrs	r6, r0
 800e8b4:	3568      	adds	r5, #104	; 0x68
 800e8b6:	e7ee      	b.n	800e896 <_fwalk_reent+0x1a>

0800e8b8 <__swhatbuf_r>:
 800e8b8:	b570      	push	{r4, r5, r6, lr}
 800e8ba:	460e      	mov	r6, r1
 800e8bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e8c0:	2900      	cmp	r1, #0
 800e8c2:	b096      	sub	sp, #88	; 0x58
 800e8c4:	4614      	mov	r4, r2
 800e8c6:	461d      	mov	r5, r3
 800e8c8:	da07      	bge.n	800e8da <__swhatbuf_r+0x22>
 800e8ca:	2300      	movs	r3, #0
 800e8cc:	602b      	str	r3, [r5, #0]
 800e8ce:	89b3      	ldrh	r3, [r6, #12]
 800e8d0:	061a      	lsls	r2, r3, #24
 800e8d2:	d410      	bmi.n	800e8f6 <__swhatbuf_r+0x3e>
 800e8d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e8d8:	e00e      	b.n	800e8f8 <__swhatbuf_r+0x40>
 800e8da:	466a      	mov	r2, sp
 800e8dc:	f000 fc3e 	bl	800f15c <_fstat_r>
 800e8e0:	2800      	cmp	r0, #0
 800e8e2:	dbf2      	blt.n	800e8ca <__swhatbuf_r+0x12>
 800e8e4:	9a01      	ldr	r2, [sp, #4]
 800e8e6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800e8ea:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800e8ee:	425a      	negs	r2, r3
 800e8f0:	415a      	adcs	r2, r3
 800e8f2:	602a      	str	r2, [r5, #0]
 800e8f4:	e7ee      	b.n	800e8d4 <__swhatbuf_r+0x1c>
 800e8f6:	2340      	movs	r3, #64	; 0x40
 800e8f8:	2000      	movs	r0, #0
 800e8fa:	6023      	str	r3, [r4, #0]
 800e8fc:	b016      	add	sp, #88	; 0x58
 800e8fe:	bd70      	pop	{r4, r5, r6, pc}

0800e900 <__smakebuf_r>:
 800e900:	898b      	ldrh	r3, [r1, #12]
 800e902:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e904:	079d      	lsls	r5, r3, #30
 800e906:	4606      	mov	r6, r0
 800e908:	460c      	mov	r4, r1
 800e90a:	d507      	bpl.n	800e91c <__smakebuf_r+0x1c>
 800e90c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800e910:	6023      	str	r3, [r4, #0]
 800e912:	6123      	str	r3, [r4, #16]
 800e914:	2301      	movs	r3, #1
 800e916:	6163      	str	r3, [r4, #20]
 800e918:	b002      	add	sp, #8
 800e91a:	bd70      	pop	{r4, r5, r6, pc}
 800e91c:	ab01      	add	r3, sp, #4
 800e91e:	466a      	mov	r2, sp
 800e920:	f7ff ffca 	bl	800e8b8 <__swhatbuf_r>
 800e924:	9900      	ldr	r1, [sp, #0]
 800e926:	4605      	mov	r5, r0
 800e928:	4630      	mov	r0, r6
 800e92a:	f000 f87f 	bl	800ea2c <_malloc_r>
 800e92e:	b948      	cbnz	r0, 800e944 <__smakebuf_r+0x44>
 800e930:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e934:	059a      	lsls	r2, r3, #22
 800e936:	d4ef      	bmi.n	800e918 <__smakebuf_r+0x18>
 800e938:	f023 0303 	bic.w	r3, r3, #3
 800e93c:	f043 0302 	orr.w	r3, r3, #2
 800e940:	81a3      	strh	r3, [r4, #12]
 800e942:	e7e3      	b.n	800e90c <__smakebuf_r+0xc>
 800e944:	4b0d      	ldr	r3, [pc, #52]	; (800e97c <__smakebuf_r+0x7c>)
 800e946:	62b3      	str	r3, [r6, #40]	; 0x28
 800e948:	89a3      	ldrh	r3, [r4, #12]
 800e94a:	6020      	str	r0, [r4, #0]
 800e94c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e950:	81a3      	strh	r3, [r4, #12]
 800e952:	9b00      	ldr	r3, [sp, #0]
 800e954:	6163      	str	r3, [r4, #20]
 800e956:	9b01      	ldr	r3, [sp, #4]
 800e958:	6120      	str	r0, [r4, #16]
 800e95a:	b15b      	cbz	r3, 800e974 <__smakebuf_r+0x74>
 800e95c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e960:	4630      	mov	r0, r6
 800e962:	f000 fc0d 	bl	800f180 <_isatty_r>
 800e966:	b128      	cbz	r0, 800e974 <__smakebuf_r+0x74>
 800e968:	89a3      	ldrh	r3, [r4, #12]
 800e96a:	f023 0303 	bic.w	r3, r3, #3
 800e96e:	f043 0301 	orr.w	r3, r3, #1
 800e972:	81a3      	strh	r3, [r4, #12]
 800e974:	89a3      	ldrh	r3, [r4, #12]
 800e976:	431d      	orrs	r5, r3
 800e978:	81a5      	strh	r5, [r4, #12]
 800e97a:	e7cd      	b.n	800e918 <__smakebuf_r+0x18>
 800e97c:	0800e76d 	.word	0x0800e76d

0800e980 <malloc>:
 800e980:	4b02      	ldr	r3, [pc, #8]	; (800e98c <malloc+0xc>)
 800e982:	4601      	mov	r1, r0
 800e984:	6818      	ldr	r0, [r3, #0]
 800e986:	f000 b851 	b.w	800ea2c <_malloc_r>
 800e98a:	bf00      	nop
 800e98c:	20000104 	.word	0x20000104

0800e990 <_free_r>:
 800e990:	b538      	push	{r3, r4, r5, lr}
 800e992:	4605      	mov	r5, r0
 800e994:	2900      	cmp	r1, #0
 800e996:	d045      	beq.n	800ea24 <_free_r+0x94>
 800e998:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e99c:	1f0c      	subs	r4, r1, #4
 800e99e:	2b00      	cmp	r3, #0
 800e9a0:	bfb8      	it	lt
 800e9a2:	18e4      	addlt	r4, r4, r3
 800e9a4:	f000 fc0e 	bl	800f1c4 <__malloc_lock>
 800e9a8:	4a1f      	ldr	r2, [pc, #124]	; (800ea28 <_free_r+0x98>)
 800e9aa:	6813      	ldr	r3, [r2, #0]
 800e9ac:	4610      	mov	r0, r2
 800e9ae:	b933      	cbnz	r3, 800e9be <_free_r+0x2e>
 800e9b0:	6063      	str	r3, [r4, #4]
 800e9b2:	6014      	str	r4, [r2, #0]
 800e9b4:	4628      	mov	r0, r5
 800e9b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e9ba:	f000 bc04 	b.w	800f1c6 <__malloc_unlock>
 800e9be:	42a3      	cmp	r3, r4
 800e9c0:	d90c      	bls.n	800e9dc <_free_r+0x4c>
 800e9c2:	6821      	ldr	r1, [r4, #0]
 800e9c4:	1862      	adds	r2, r4, r1
 800e9c6:	4293      	cmp	r3, r2
 800e9c8:	bf04      	itt	eq
 800e9ca:	681a      	ldreq	r2, [r3, #0]
 800e9cc:	685b      	ldreq	r3, [r3, #4]
 800e9ce:	6063      	str	r3, [r4, #4]
 800e9d0:	bf04      	itt	eq
 800e9d2:	1852      	addeq	r2, r2, r1
 800e9d4:	6022      	streq	r2, [r4, #0]
 800e9d6:	6004      	str	r4, [r0, #0]
 800e9d8:	e7ec      	b.n	800e9b4 <_free_r+0x24>
 800e9da:	4613      	mov	r3, r2
 800e9dc:	685a      	ldr	r2, [r3, #4]
 800e9de:	b10a      	cbz	r2, 800e9e4 <_free_r+0x54>
 800e9e0:	42a2      	cmp	r2, r4
 800e9e2:	d9fa      	bls.n	800e9da <_free_r+0x4a>
 800e9e4:	6819      	ldr	r1, [r3, #0]
 800e9e6:	1858      	adds	r0, r3, r1
 800e9e8:	42a0      	cmp	r0, r4
 800e9ea:	d10b      	bne.n	800ea04 <_free_r+0x74>
 800e9ec:	6820      	ldr	r0, [r4, #0]
 800e9ee:	4401      	add	r1, r0
 800e9f0:	1858      	adds	r0, r3, r1
 800e9f2:	4282      	cmp	r2, r0
 800e9f4:	6019      	str	r1, [r3, #0]
 800e9f6:	d1dd      	bne.n	800e9b4 <_free_r+0x24>
 800e9f8:	6810      	ldr	r0, [r2, #0]
 800e9fa:	6852      	ldr	r2, [r2, #4]
 800e9fc:	605a      	str	r2, [r3, #4]
 800e9fe:	4401      	add	r1, r0
 800ea00:	6019      	str	r1, [r3, #0]
 800ea02:	e7d7      	b.n	800e9b4 <_free_r+0x24>
 800ea04:	d902      	bls.n	800ea0c <_free_r+0x7c>
 800ea06:	230c      	movs	r3, #12
 800ea08:	602b      	str	r3, [r5, #0]
 800ea0a:	e7d3      	b.n	800e9b4 <_free_r+0x24>
 800ea0c:	6820      	ldr	r0, [r4, #0]
 800ea0e:	1821      	adds	r1, r4, r0
 800ea10:	428a      	cmp	r2, r1
 800ea12:	bf04      	itt	eq
 800ea14:	6811      	ldreq	r1, [r2, #0]
 800ea16:	6852      	ldreq	r2, [r2, #4]
 800ea18:	6062      	str	r2, [r4, #4]
 800ea1a:	bf04      	itt	eq
 800ea1c:	1809      	addeq	r1, r1, r0
 800ea1e:	6021      	streq	r1, [r4, #0]
 800ea20:	605c      	str	r4, [r3, #4]
 800ea22:	e7c7      	b.n	800e9b4 <_free_r+0x24>
 800ea24:	bd38      	pop	{r3, r4, r5, pc}
 800ea26:	bf00      	nop
 800ea28:	20000198 	.word	0x20000198

0800ea2c <_malloc_r>:
 800ea2c:	b570      	push	{r4, r5, r6, lr}
 800ea2e:	1ccd      	adds	r5, r1, #3
 800ea30:	f025 0503 	bic.w	r5, r5, #3
 800ea34:	3508      	adds	r5, #8
 800ea36:	2d0c      	cmp	r5, #12
 800ea38:	bf38      	it	cc
 800ea3a:	250c      	movcc	r5, #12
 800ea3c:	2d00      	cmp	r5, #0
 800ea3e:	4606      	mov	r6, r0
 800ea40:	db01      	blt.n	800ea46 <_malloc_r+0x1a>
 800ea42:	42a9      	cmp	r1, r5
 800ea44:	d903      	bls.n	800ea4e <_malloc_r+0x22>
 800ea46:	230c      	movs	r3, #12
 800ea48:	6033      	str	r3, [r6, #0]
 800ea4a:	2000      	movs	r0, #0
 800ea4c:	bd70      	pop	{r4, r5, r6, pc}
 800ea4e:	f000 fbb9 	bl	800f1c4 <__malloc_lock>
 800ea52:	4a21      	ldr	r2, [pc, #132]	; (800ead8 <_malloc_r+0xac>)
 800ea54:	6814      	ldr	r4, [r2, #0]
 800ea56:	4621      	mov	r1, r4
 800ea58:	b991      	cbnz	r1, 800ea80 <_malloc_r+0x54>
 800ea5a:	4c20      	ldr	r4, [pc, #128]	; (800eadc <_malloc_r+0xb0>)
 800ea5c:	6823      	ldr	r3, [r4, #0]
 800ea5e:	b91b      	cbnz	r3, 800ea68 <_malloc_r+0x3c>
 800ea60:	4630      	mov	r0, r6
 800ea62:	f000 fb05 	bl	800f070 <_sbrk_r>
 800ea66:	6020      	str	r0, [r4, #0]
 800ea68:	4629      	mov	r1, r5
 800ea6a:	4630      	mov	r0, r6
 800ea6c:	f000 fb00 	bl	800f070 <_sbrk_r>
 800ea70:	1c43      	adds	r3, r0, #1
 800ea72:	d124      	bne.n	800eabe <_malloc_r+0x92>
 800ea74:	230c      	movs	r3, #12
 800ea76:	6033      	str	r3, [r6, #0]
 800ea78:	4630      	mov	r0, r6
 800ea7a:	f000 fba4 	bl	800f1c6 <__malloc_unlock>
 800ea7e:	e7e4      	b.n	800ea4a <_malloc_r+0x1e>
 800ea80:	680b      	ldr	r3, [r1, #0]
 800ea82:	1b5b      	subs	r3, r3, r5
 800ea84:	d418      	bmi.n	800eab8 <_malloc_r+0x8c>
 800ea86:	2b0b      	cmp	r3, #11
 800ea88:	d90f      	bls.n	800eaaa <_malloc_r+0x7e>
 800ea8a:	600b      	str	r3, [r1, #0]
 800ea8c:	50cd      	str	r5, [r1, r3]
 800ea8e:	18cc      	adds	r4, r1, r3
 800ea90:	4630      	mov	r0, r6
 800ea92:	f000 fb98 	bl	800f1c6 <__malloc_unlock>
 800ea96:	f104 000b 	add.w	r0, r4, #11
 800ea9a:	1d23      	adds	r3, r4, #4
 800ea9c:	f020 0007 	bic.w	r0, r0, #7
 800eaa0:	1ac3      	subs	r3, r0, r3
 800eaa2:	d0d3      	beq.n	800ea4c <_malloc_r+0x20>
 800eaa4:	425a      	negs	r2, r3
 800eaa6:	50e2      	str	r2, [r4, r3]
 800eaa8:	e7d0      	b.n	800ea4c <_malloc_r+0x20>
 800eaaa:	428c      	cmp	r4, r1
 800eaac:	684b      	ldr	r3, [r1, #4]
 800eaae:	bf16      	itet	ne
 800eab0:	6063      	strne	r3, [r4, #4]
 800eab2:	6013      	streq	r3, [r2, #0]
 800eab4:	460c      	movne	r4, r1
 800eab6:	e7eb      	b.n	800ea90 <_malloc_r+0x64>
 800eab8:	460c      	mov	r4, r1
 800eaba:	6849      	ldr	r1, [r1, #4]
 800eabc:	e7cc      	b.n	800ea58 <_malloc_r+0x2c>
 800eabe:	1cc4      	adds	r4, r0, #3
 800eac0:	f024 0403 	bic.w	r4, r4, #3
 800eac4:	42a0      	cmp	r0, r4
 800eac6:	d005      	beq.n	800ead4 <_malloc_r+0xa8>
 800eac8:	1a21      	subs	r1, r4, r0
 800eaca:	4630      	mov	r0, r6
 800eacc:	f000 fad0 	bl	800f070 <_sbrk_r>
 800ead0:	3001      	adds	r0, #1
 800ead2:	d0cf      	beq.n	800ea74 <_malloc_r+0x48>
 800ead4:	6025      	str	r5, [r4, #0]
 800ead6:	e7db      	b.n	800ea90 <_malloc_r+0x64>
 800ead8:	20000198 	.word	0x20000198
 800eadc:	2000019c 	.word	0x2000019c

0800eae0 <__sfputc_r>:
 800eae0:	6893      	ldr	r3, [r2, #8]
 800eae2:	3b01      	subs	r3, #1
 800eae4:	2b00      	cmp	r3, #0
 800eae6:	b410      	push	{r4}
 800eae8:	6093      	str	r3, [r2, #8]
 800eaea:	da08      	bge.n	800eafe <__sfputc_r+0x1e>
 800eaec:	6994      	ldr	r4, [r2, #24]
 800eaee:	42a3      	cmp	r3, r4
 800eaf0:	db01      	blt.n	800eaf6 <__sfputc_r+0x16>
 800eaf2:	290a      	cmp	r1, #10
 800eaf4:	d103      	bne.n	800eafe <__sfputc_r+0x1e>
 800eaf6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800eafa:	f7ff bca3 	b.w	800e444 <__swbuf_r>
 800eafe:	6813      	ldr	r3, [r2, #0]
 800eb00:	1c58      	adds	r0, r3, #1
 800eb02:	6010      	str	r0, [r2, #0]
 800eb04:	7019      	strb	r1, [r3, #0]
 800eb06:	4608      	mov	r0, r1
 800eb08:	f85d 4b04 	ldr.w	r4, [sp], #4
 800eb0c:	4770      	bx	lr

0800eb0e <__sfputs_r>:
 800eb0e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eb10:	4606      	mov	r6, r0
 800eb12:	460f      	mov	r7, r1
 800eb14:	4614      	mov	r4, r2
 800eb16:	18d5      	adds	r5, r2, r3
 800eb18:	42ac      	cmp	r4, r5
 800eb1a:	d101      	bne.n	800eb20 <__sfputs_r+0x12>
 800eb1c:	2000      	movs	r0, #0
 800eb1e:	e007      	b.n	800eb30 <__sfputs_r+0x22>
 800eb20:	463a      	mov	r2, r7
 800eb22:	f814 1b01 	ldrb.w	r1, [r4], #1
 800eb26:	4630      	mov	r0, r6
 800eb28:	f7ff ffda 	bl	800eae0 <__sfputc_r>
 800eb2c:	1c43      	adds	r3, r0, #1
 800eb2e:	d1f3      	bne.n	800eb18 <__sfputs_r+0xa>
 800eb30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800eb34 <_vfiprintf_r>:
 800eb34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eb38:	460c      	mov	r4, r1
 800eb3a:	b09d      	sub	sp, #116	; 0x74
 800eb3c:	4617      	mov	r7, r2
 800eb3e:	461d      	mov	r5, r3
 800eb40:	4606      	mov	r6, r0
 800eb42:	b118      	cbz	r0, 800eb4c <_vfiprintf_r+0x18>
 800eb44:	6983      	ldr	r3, [r0, #24]
 800eb46:	b90b      	cbnz	r3, 800eb4c <_vfiprintf_r+0x18>
 800eb48:	f7ff fe2c 	bl	800e7a4 <__sinit>
 800eb4c:	4b7c      	ldr	r3, [pc, #496]	; (800ed40 <_vfiprintf_r+0x20c>)
 800eb4e:	429c      	cmp	r4, r3
 800eb50:	d158      	bne.n	800ec04 <_vfiprintf_r+0xd0>
 800eb52:	6874      	ldr	r4, [r6, #4]
 800eb54:	89a3      	ldrh	r3, [r4, #12]
 800eb56:	0718      	lsls	r0, r3, #28
 800eb58:	d55e      	bpl.n	800ec18 <_vfiprintf_r+0xe4>
 800eb5a:	6923      	ldr	r3, [r4, #16]
 800eb5c:	2b00      	cmp	r3, #0
 800eb5e:	d05b      	beq.n	800ec18 <_vfiprintf_r+0xe4>
 800eb60:	2300      	movs	r3, #0
 800eb62:	9309      	str	r3, [sp, #36]	; 0x24
 800eb64:	2320      	movs	r3, #32
 800eb66:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800eb6a:	2330      	movs	r3, #48	; 0x30
 800eb6c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800eb70:	9503      	str	r5, [sp, #12]
 800eb72:	f04f 0b01 	mov.w	fp, #1
 800eb76:	46b8      	mov	r8, r7
 800eb78:	4645      	mov	r5, r8
 800eb7a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800eb7e:	b10b      	cbz	r3, 800eb84 <_vfiprintf_r+0x50>
 800eb80:	2b25      	cmp	r3, #37	; 0x25
 800eb82:	d154      	bne.n	800ec2e <_vfiprintf_r+0xfa>
 800eb84:	ebb8 0a07 	subs.w	sl, r8, r7
 800eb88:	d00b      	beq.n	800eba2 <_vfiprintf_r+0x6e>
 800eb8a:	4653      	mov	r3, sl
 800eb8c:	463a      	mov	r2, r7
 800eb8e:	4621      	mov	r1, r4
 800eb90:	4630      	mov	r0, r6
 800eb92:	f7ff ffbc 	bl	800eb0e <__sfputs_r>
 800eb96:	3001      	adds	r0, #1
 800eb98:	f000 80c2 	beq.w	800ed20 <_vfiprintf_r+0x1ec>
 800eb9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800eb9e:	4453      	add	r3, sl
 800eba0:	9309      	str	r3, [sp, #36]	; 0x24
 800eba2:	f898 3000 	ldrb.w	r3, [r8]
 800eba6:	2b00      	cmp	r3, #0
 800eba8:	f000 80ba 	beq.w	800ed20 <_vfiprintf_r+0x1ec>
 800ebac:	2300      	movs	r3, #0
 800ebae:	f04f 32ff 	mov.w	r2, #4294967295
 800ebb2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ebb6:	9304      	str	r3, [sp, #16]
 800ebb8:	9307      	str	r3, [sp, #28]
 800ebba:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ebbe:	931a      	str	r3, [sp, #104]	; 0x68
 800ebc0:	46a8      	mov	r8, r5
 800ebc2:	2205      	movs	r2, #5
 800ebc4:	f818 1b01 	ldrb.w	r1, [r8], #1
 800ebc8:	485e      	ldr	r0, [pc, #376]	; (800ed44 <_vfiprintf_r+0x210>)
 800ebca:	f7f1 fb01 	bl	80001d0 <memchr>
 800ebce:	9b04      	ldr	r3, [sp, #16]
 800ebd0:	bb78      	cbnz	r0, 800ec32 <_vfiprintf_r+0xfe>
 800ebd2:	06d9      	lsls	r1, r3, #27
 800ebd4:	bf44      	itt	mi
 800ebd6:	2220      	movmi	r2, #32
 800ebd8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800ebdc:	071a      	lsls	r2, r3, #28
 800ebde:	bf44      	itt	mi
 800ebe0:	222b      	movmi	r2, #43	; 0x2b
 800ebe2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800ebe6:	782a      	ldrb	r2, [r5, #0]
 800ebe8:	2a2a      	cmp	r2, #42	; 0x2a
 800ebea:	d02a      	beq.n	800ec42 <_vfiprintf_r+0x10e>
 800ebec:	9a07      	ldr	r2, [sp, #28]
 800ebee:	46a8      	mov	r8, r5
 800ebf0:	2000      	movs	r0, #0
 800ebf2:	250a      	movs	r5, #10
 800ebf4:	4641      	mov	r1, r8
 800ebf6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ebfa:	3b30      	subs	r3, #48	; 0x30
 800ebfc:	2b09      	cmp	r3, #9
 800ebfe:	d969      	bls.n	800ecd4 <_vfiprintf_r+0x1a0>
 800ec00:	b360      	cbz	r0, 800ec5c <_vfiprintf_r+0x128>
 800ec02:	e024      	b.n	800ec4e <_vfiprintf_r+0x11a>
 800ec04:	4b50      	ldr	r3, [pc, #320]	; (800ed48 <_vfiprintf_r+0x214>)
 800ec06:	429c      	cmp	r4, r3
 800ec08:	d101      	bne.n	800ec0e <_vfiprintf_r+0xda>
 800ec0a:	68b4      	ldr	r4, [r6, #8]
 800ec0c:	e7a2      	b.n	800eb54 <_vfiprintf_r+0x20>
 800ec0e:	4b4f      	ldr	r3, [pc, #316]	; (800ed4c <_vfiprintf_r+0x218>)
 800ec10:	429c      	cmp	r4, r3
 800ec12:	bf08      	it	eq
 800ec14:	68f4      	ldreq	r4, [r6, #12]
 800ec16:	e79d      	b.n	800eb54 <_vfiprintf_r+0x20>
 800ec18:	4621      	mov	r1, r4
 800ec1a:	4630      	mov	r0, r6
 800ec1c:	f7ff fc64 	bl	800e4e8 <__swsetup_r>
 800ec20:	2800      	cmp	r0, #0
 800ec22:	d09d      	beq.n	800eb60 <_vfiprintf_r+0x2c>
 800ec24:	f04f 30ff 	mov.w	r0, #4294967295
 800ec28:	b01d      	add	sp, #116	; 0x74
 800ec2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ec2e:	46a8      	mov	r8, r5
 800ec30:	e7a2      	b.n	800eb78 <_vfiprintf_r+0x44>
 800ec32:	4a44      	ldr	r2, [pc, #272]	; (800ed44 <_vfiprintf_r+0x210>)
 800ec34:	1a80      	subs	r0, r0, r2
 800ec36:	fa0b f000 	lsl.w	r0, fp, r0
 800ec3a:	4318      	orrs	r0, r3
 800ec3c:	9004      	str	r0, [sp, #16]
 800ec3e:	4645      	mov	r5, r8
 800ec40:	e7be      	b.n	800ebc0 <_vfiprintf_r+0x8c>
 800ec42:	9a03      	ldr	r2, [sp, #12]
 800ec44:	1d11      	adds	r1, r2, #4
 800ec46:	6812      	ldr	r2, [r2, #0]
 800ec48:	9103      	str	r1, [sp, #12]
 800ec4a:	2a00      	cmp	r2, #0
 800ec4c:	db01      	blt.n	800ec52 <_vfiprintf_r+0x11e>
 800ec4e:	9207      	str	r2, [sp, #28]
 800ec50:	e004      	b.n	800ec5c <_vfiprintf_r+0x128>
 800ec52:	4252      	negs	r2, r2
 800ec54:	f043 0302 	orr.w	r3, r3, #2
 800ec58:	9207      	str	r2, [sp, #28]
 800ec5a:	9304      	str	r3, [sp, #16]
 800ec5c:	f898 3000 	ldrb.w	r3, [r8]
 800ec60:	2b2e      	cmp	r3, #46	; 0x2e
 800ec62:	d10e      	bne.n	800ec82 <_vfiprintf_r+0x14e>
 800ec64:	f898 3001 	ldrb.w	r3, [r8, #1]
 800ec68:	2b2a      	cmp	r3, #42	; 0x2a
 800ec6a:	d138      	bne.n	800ecde <_vfiprintf_r+0x1aa>
 800ec6c:	9b03      	ldr	r3, [sp, #12]
 800ec6e:	1d1a      	adds	r2, r3, #4
 800ec70:	681b      	ldr	r3, [r3, #0]
 800ec72:	9203      	str	r2, [sp, #12]
 800ec74:	2b00      	cmp	r3, #0
 800ec76:	bfb8      	it	lt
 800ec78:	f04f 33ff 	movlt.w	r3, #4294967295
 800ec7c:	f108 0802 	add.w	r8, r8, #2
 800ec80:	9305      	str	r3, [sp, #20]
 800ec82:	4d33      	ldr	r5, [pc, #204]	; (800ed50 <_vfiprintf_r+0x21c>)
 800ec84:	f898 1000 	ldrb.w	r1, [r8]
 800ec88:	2203      	movs	r2, #3
 800ec8a:	4628      	mov	r0, r5
 800ec8c:	f7f1 faa0 	bl	80001d0 <memchr>
 800ec90:	b140      	cbz	r0, 800eca4 <_vfiprintf_r+0x170>
 800ec92:	2340      	movs	r3, #64	; 0x40
 800ec94:	1b40      	subs	r0, r0, r5
 800ec96:	fa03 f000 	lsl.w	r0, r3, r0
 800ec9a:	9b04      	ldr	r3, [sp, #16]
 800ec9c:	4303      	orrs	r3, r0
 800ec9e:	f108 0801 	add.w	r8, r8, #1
 800eca2:	9304      	str	r3, [sp, #16]
 800eca4:	f898 1000 	ldrb.w	r1, [r8]
 800eca8:	482a      	ldr	r0, [pc, #168]	; (800ed54 <_vfiprintf_r+0x220>)
 800ecaa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ecae:	2206      	movs	r2, #6
 800ecb0:	f108 0701 	add.w	r7, r8, #1
 800ecb4:	f7f1 fa8c 	bl	80001d0 <memchr>
 800ecb8:	2800      	cmp	r0, #0
 800ecba:	d037      	beq.n	800ed2c <_vfiprintf_r+0x1f8>
 800ecbc:	4b26      	ldr	r3, [pc, #152]	; (800ed58 <_vfiprintf_r+0x224>)
 800ecbe:	bb1b      	cbnz	r3, 800ed08 <_vfiprintf_r+0x1d4>
 800ecc0:	9b03      	ldr	r3, [sp, #12]
 800ecc2:	3307      	adds	r3, #7
 800ecc4:	f023 0307 	bic.w	r3, r3, #7
 800ecc8:	3308      	adds	r3, #8
 800ecca:	9303      	str	r3, [sp, #12]
 800eccc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ecce:	444b      	add	r3, r9
 800ecd0:	9309      	str	r3, [sp, #36]	; 0x24
 800ecd2:	e750      	b.n	800eb76 <_vfiprintf_r+0x42>
 800ecd4:	fb05 3202 	mla	r2, r5, r2, r3
 800ecd8:	2001      	movs	r0, #1
 800ecda:	4688      	mov	r8, r1
 800ecdc:	e78a      	b.n	800ebf4 <_vfiprintf_r+0xc0>
 800ecde:	2300      	movs	r3, #0
 800ece0:	f108 0801 	add.w	r8, r8, #1
 800ece4:	9305      	str	r3, [sp, #20]
 800ece6:	4619      	mov	r1, r3
 800ece8:	250a      	movs	r5, #10
 800ecea:	4640      	mov	r0, r8
 800ecec:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ecf0:	3a30      	subs	r2, #48	; 0x30
 800ecf2:	2a09      	cmp	r2, #9
 800ecf4:	d903      	bls.n	800ecfe <_vfiprintf_r+0x1ca>
 800ecf6:	2b00      	cmp	r3, #0
 800ecf8:	d0c3      	beq.n	800ec82 <_vfiprintf_r+0x14e>
 800ecfa:	9105      	str	r1, [sp, #20]
 800ecfc:	e7c1      	b.n	800ec82 <_vfiprintf_r+0x14e>
 800ecfe:	fb05 2101 	mla	r1, r5, r1, r2
 800ed02:	2301      	movs	r3, #1
 800ed04:	4680      	mov	r8, r0
 800ed06:	e7f0      	b.n	800ecea <_vfiprintf_r+0x1b6>
 800ed08:	ab03      	add	r3, sp, #12
 800ed0a:	9300      	str	r3, [sp, #0]
 800ed0c:	4622      	mov	r2, r4
 800ed0e:	4b13      	ldr	r3, [pc, #76]	; (800ed5c <_vfiprintf_r+0x228>)
 800ed10:	a904      	add	r1, sp, #16
 800ed12:	4630      	mov	r0, r6
 800ed14:	f3af 8000 	nop.w
 800ed18:	f1b0 3fff 	cmp.w	r0, #4294967295
 800ed1c:	4681      	mov	r9, r0
 800ed1e:	d1d5      	bne.n	800eccc <_vfiprintf_r+0x198>
 800ed20:	89a3      	ldrh	r3, [r4, #12]
 800ed22:	065b      	lsls	r3, r3, #25
 800ed24:	f53f af7e 	bmi.w	800ec24 <_vfiprintf_r+0xf0>
 800ed28:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ed2a:	e77d      	b.n	800ec28 <_vfiprintf_r+0xf4>
 800ed2c:	ab03      	add	r3, sp, #12
 800ed2e:	9300      	str	r3, [sp, #0]
 800ed30:	4622      	mov	r2, r4
 800ed32:	4b0a      	ldr	r3, [pc, #40]	; (800ed5c <_vfiprintf_r+0x228>)
 800ed34:	a904      	add	r1, sp, #16
 800ed36:	4630      	mov	r0, r6
 800ed38:	f000 f888 	bl	800ee4c <_printf_i>
 800ed3c:	e7ec      	b.n	800ed18 <_vfiprintf_r+0x1e4>
 800ed3e:	bf00      	nop
 800ed40:	0800f934 	.word	0x0800f934
 800ed44:	0800f974 	.word	0x0800f974
 800ed48:	0800f954 	.word	0x0800f954
 800ed4c:	0800f914 	.word	0x0800f914
 800ed50:	0800f97a 	.word	0x0800f97a
 800ed54:	0800f97e 	.word	0x0800f97e
 800ed58:	00000000 	.word	0x00000000
 800ed5c:	0800eb0f 	.word	0x0800eb0f

0800ed60 <_printf_common>:
 800ed60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ed64:	4691      	mov	r9, r2
 800ed66:	461f      	mov	r7, r3
 800ed68:	688a      	ldr	r2, [r1, #8]
 800ed6a:	690b      	ldr	r3, [r1, #16]
 800ed6c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ed70:	4293      	cmp	r3, r2
 800ed72:	bfb8      	it	lt
 800ed74:	4613      	movlt	r3, r2
 800ed76:	f8c9 3000 	str.w	r3, [r9]
 800ed7a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ed7e:	4606      	mov	r6, r0
 800ed80:	460c      	mov	r4, r1
 800ed82:	b112      	cbz	r2, 800ed8a <_printf_common+0x2a>
 800ed84:	3301      	adds	r3, #1
 800ed86:	f8c9 3000 	str.w	r3, [r9]
 800ed8a:	6823      	ldr	r3, [r4, #0]
 800ed8c:	0699      	lsls	r1, r3, #26
 800ed8e:	bf42      	ittt	mi
 800ed90:	f8d9 3000 	ldrmi.w	r3, [r9]
 800ed94:	3302      	addmi	r3, #2
 800ed96:	f8c9 3000 	strmi.w	r3, [r9]
 800ed9a:	6825      	ldr	r5, [r4, #0]
 800ed9c:	f015 0506 	ands.w	r5, r5, #6
 800eda0:	d107      	bne.n	800edb2 <_printf_common+0x52>
 800eda2:	f104 0a19 	add.w	sl, r4, #25
 800eda6:	68e3      	ldr	r3, [r4, #12]
 800eda8:	f8d9 2000 	ldr.w	r2, [r9]
 800edac:	1a9b      	subs	r3, r3, r2
 800edae:	42ab      	cmp	r3, r5
 800edb0:	dc28      	bgt.n	800ee04 <_printf_common+0xa4>
 800edb2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800edb6:	6822      	ldr	r2, [r4, #0]
 800edb8:	3300      	adds	r3, #0
 800edba:	bf18      	it	ne
 800edbc:	2301      	movne	r3, #1
 800edbe:	0692      	lsls	r2, r2, #26
 800edc0:	d42d      	bmi.n	800ee1e <_printf_common+0xbe>
 800edc2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800edc6:	4639      	mov	r1, r7
 800edc8:	4630      	mov	r0, r6
 800edca:	47c0      	blx	r8
 800edcc:	3001      	adds	r0, #1
 800edce:	d020      	beq.n	800ee12 <_printf_common+0xb2>
 800edd0:	6823      	ldr	r3, [r4, #0]
 800edd2:	68e5      	ldr	r5, [r4, #12]
 800edd4:	f8d9 2000 	ldr.w	r2, [r9]
 800edd8:	f003 0306 	and.w	r3, r3, #6
 800eddc:	2b04      	cmp	r3, #4
 800edde:	bf08      	it	eq
 800ede0:	1aad      	subeq	r5, r5, r2
 800ede2:	68a3      	ldr	r3, [r4, #8]
 800ede4:	6922      	ldr	r2, [r4, #16]
 800ede6:	bf0c      	ite	eq
 800ede8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800edec:	2500      	movne	r5, #0
 800edee:	4293      	cmp	r3, r2
 800edf0:	bfc4      	itt	gt
 800edf2:	1a9b      	subgt	r3, r3, r2
 800edf4:	18ed      	addgt	r5, r5, r3
 800edf6:	f04f 0900 	mov.w	r9, #0
 800edfa:	341a      	adds	r4, #26
 800edfc:	454d      	cmp	r5, r9
 800edfe:	d11a      	bne.n	800ee36 <_printf_common+0xd6>
 800ee00:	2000      	movs	r0, #0
 800ee02:	e008      	b.n	800ee16 <_printf_common+0xb6>
 800ee04:	2301      	movs	r3, #1
 800ee06:	4652      	mov	r2, sl
 800ee08:	4639      	mov	r1, r7
 800ee0a:	4630      	mov	r0, r6
 800ee0c:	47c0      	blx	r8
 800ee0e:	3001      	adds	r0, #1
 800ee10:	d103      	bne.n	800ee1a <_printf_common+0xba>
 800ee12:	f04f 30ff 	mov.w	r0, #4294967295
 800ee16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ee1a:	3501      	adds	r5, #1
 800ee1c:	e7c3      	b.n	800eda6 <_printf_common+0x46>
 800ee1e:	18e1      	adds	r1, r4, r3
 800ee20:	1c5a      	adds	r2, r3, #1
 800ee22:	2030      	movs	r0, #48	; 0x30
 800ee24:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ee28:	4422      	add	r2, r4
 800ee2a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ee2e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ee32:	3302      	adds	r3, #2
 800ee34:	e7c5      	b.n	800edc2 <_printf_common+0x62>
 800ee36:	2301      	movs	r3, #1
 800ee38:	4622      	mov	r2, r4
 800ee3a:	4639      	mov	r1, r7
 800ee3c:	4630      	mov	r0, r6
 800ee3e:	47c0      	blx	r8
 800ee40:	3001      	adds	r0, #1
 800ee42:	d0e6      	beq.n	800ee12 <_printf_common+0xb2>
 800ee44:	f109 0901 	add.w	r9, r9, #1
 800ee48:	e7d8      	b.n	800edfc <_printf_common+0x9c>
	...

0800ee4c <_printf_i>:
 800ee4c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ee50:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800ee54:	460c      	mov	r4, r1
 800ee56:	7e09      	ldrb	r1, [r1, #24]
 800ee58:	b085      	sub	sp, #20
 800ee5a:	296e      	cmp	r1, #110	; 0x6e
 800ee5c:	4617      	mov	r7, r2
 800ee5e:	4606      	mov	r6, r0
 800ee60:	4698      	mov	r8, r3
 800ee62:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ee64:	f000 80b3 	beq.w	800efce <_printf_i+0x182>
 800ee68:	d822      	bhi.n	800eeb0 <_printf_i+0x64>
 800ee6a:	2963      	cmp	r1, #99	; 0x63
 800ee6c:	d036      	beq.n	800eedc <_printf_i+0x90>
 800ee6e:	d80a      	bhi.n	800ee86 <_printf_i+0x3a>
 800ee70:	2900      	cmp	r1, #0
 800ee72:	f000 80b9 	beq.w	800efe8 <_printf_i+0x19c>
 800ee76:	2958      	cmp	r1, #88	; 0x58
 800ee78:	f000 8083 	beq.w	800ef82 <_printf_i+0x136>
 800ee7c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ee80:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800ee84:	e032      	b.n	800eeec <_printf_i+0xa0>
 800ee86:	2964      	cmp	r1, #100	; 0x64
 800ee88:	d001      	beq.n	800ee8e <_printf_i+0x42>
 800ee8a:	2969      	cmp	r1, #105	; 0x69
 800ee8c:	d1f6      	bne.n	800ee7c <_printf_i+0x30>
 800ee8e:	6820      	ldr	r0, [r4, #0]
 800ee90:	6813      	ldr	r3, [r2, #0]
 800ee92:	0605      	lsls	r5, r0, #24
 800ee94:	f103 0104 	add.w	r1, r3, #4
 800ee98:	d52a      	bpl.n	800eef0 <_printf_i+0xa4>
 800ee9a:	681b      	ldr	r3, [r3, #0]
 800ee9c:	6011      	str	r1, [r2, #0]
 800ee9e:	2b00      	cmp	r3, #0
 800eea0:	da03      	bge.n	800eeaa <_printf_i+0x5e>
 800eea2:	222d      	movs	r2, #45	; 0x2d
 800eea4:	425b      	negs	r3, r3
 800eea6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800eeaa:	486f      	ldr	r0, [pc, #444]	; (800f068 <_printf_i+0x21c>)
 800eeac:	220a      	movs	r2, #10
 800eeae:	e039      	b.n	800ef24 <_printf_i+0xd8>
 800eeb0:	2973      	cmp	r1, #115	; 0x73
 800eeb2:	f000 809d 	beq.w	800eff0 <_printf_i+0x1a4>
 800eeb6:	d808      	bhi.n	800eeca <_printf_i+0x7e>
 800eeb8:	296f      	cmp	r1, #111	; 0x6f
 800eeba:	d020      	beq.n	800eefe <_printf_i+0xb2>
 800eebc:	2970      	cmp	r1, #112	; 0x70
 800eebe:	d1dd      	bne.n	800ee7c <_printf_i+0x30>
 800eec0:	6823      	ldr	r3, [r4, #0]
 800eec2:	f043 0320 	orr.w	r3, r3, #32
 800eec6:	6023      	str	r3, [r4, #0]
 800eec8:	e003      	b.n	800eed2 <_printf_i+0x86>
 800eeca:	2975      	cmp	r1, #117	; 0x75
 800eecc:	d017      	beq.n	800eefe <_printf_i+0xb2>
 800eece:	2978      	cmp	r1, #120	; 0x78
 800eed0:	d1d4      	bne.n	800ee7c <_printf_i+0x30>
 800eed2:	2378      	movs	r3, #120	; 0x78
 800eed4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800eed8:	4864      	ldr	r0, [pc, #400]	; (800f06c <_printf_i+0x220>)
 800eeda:	e055      	b.n	800ef88 <_printf_i+0x13c>
 800eedc:	6813      	ldr	r3, [r2, #0]
 800eede:	1d19      	adds	r1, r3, #4
 800eee0:	681b      	ldr	r3, [r3, #0]
 800eee2:	6011      	str	r1, [r2, #0]
 800eee4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800eee8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800eeec:	2301      	movs	r3, #1
 800eeee:	e08c      	b.n	800f00a <_printf_i+0x1be>
 800eef0:	681b      	ldr	r3, [r3, #0]
 800eef2:	6011      	str	r1, [r2, #0]
 800eef4:	f010 0f40 	tst.w	r0, #64	; 0x40
 800eef8:	bf18      	it	ne
 800eefa:	b21b      	sxthne	r3, r3
 800eefc:	e7cf      	b.n	800ee9e <_printf_i+0x52>
 800eefe:	6813      	ldr	r3, [r2, #0]
 800ef00:	6825      	ldr	r5, [r4, #0]
 800ef02:	1d18      	adds	r0, r3, #4
 800ef04:	6010      	str	r0, [r2, #0]
 800ef06:	0628      	lsls	r0, r5, #24
 800ef08:	d501      	bpl.n	800ef0e <_printf_i+0xc2>
 800ef0a:	681b      	ldr	r3, [r3, #0]
 800ef0c:	e002      	b.n	800ef14 <_printf_i+0xc8>
 800ef0e:	0668      	lsls	r0, r5, #25
 800ef10:	d5fb      	bpl.n	800ef0a <_printf_i+0xbe>
 800ef12:	881b      	ldrh	r3, [r3, #0]
 800ef14:	4854      	ldr	r0, [pc, #336]	; (800f068 <_printf_i+0x21c>)
 800ef16:	296f      	cmp	r1, #111	; 0x6f
 800ef18:	bf14      	ite	ne
 800ef1a:	220a      	movne	r2, #10
 800ef1c:	2208      	moveq	r2, #8
 800ef1e:	2100      	movs	r1, #0
 800ef20:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ef24:	6865      	ldr	r5, [r4, #4]
 800ef26:	60a5      	str	r5, [r4, #8]
 800ef28:	2d00      	cmp	r5, #0
 800ef2a:	f2c0 8095 	blt.w	800f058 <_printf_i+0x20c>
 800ef2e:	6821      	ldr	r1, [r4, #0]
 800ef30:	f021 0104 	bic.w	r1, r1, #4
 800ef34:	6021      	str	r1, [r4, #0]
 800ef36:	2b00      	cmp	r3, #0
 800ef38:	d13d      	bne.n	800efb6 <_printf_i+0x16a>
 800ef3a:	2d00      	cmp	r5, #0
 800ef3c:	f040 808e 	bne.w	800f05c <_printf_i+0x210>
 800ef40:	4665      	mov	r5, ip
 800ef42:	2a08      	cmp	r2, #8
 800ef44:	d10b      	bne.n	800ef5e <_printf_i+0x112>
 800ef46:	6823      	ldr	r3, [r4, #0]
 800ef48:	07db      	lsls	r3, r3, #31
 800ef4a:	d508      	bpl.n	800ef5e <_printf_i+0x112>
 800ef4c:	6923      	ldr	r3, [r4, #16]
 800ef4e:	6862      	ldr	r2, [r4, #4]
 800ef50:	429a      	cmp	r2, r3
 800ef52:	bfde      	ittt	le
 800ef54:	2330      	movle	r3, #48	; 0x30
 800ef56:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ef5a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800ef5e:	ebac 0305 	sub.w	r3, ip, r5
 800ef62:	6123      	str	r3, [r4, #16]
 800ef64:	f8cd 8000 	str.w	r8, [sp]
 800ef68:	463b      	mov	r3, r7
 800ef6a:	aa03      	add	r2, sp, #12
 800ef6c:	4621      	mov	r1, r4
 800ef6e:	4630      	mov	r0, r6
 800ef70:	f7ff fef6 	bl	800ed60 <_printf_common>
 800ef74:	3001      	adds	r0, #1
 800ef76:	d14d      	bne.n	800f014 <_printf_i+0x1c8>
 800ef78:	f04f 30ff 	mov.w	r0, #4294967295
 800ef7c:	b005      	add	sp, #20
 800ef7e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ef82:	4839      	ldr	r0, [pc, #228]	; (800f068 <_printf_i+0x21c>)
 800ef84:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800ef88:	6813      	ldr	r3, [r2, #0]
 800ef8a:	6821      	ldr	r1, [r4, #0]
 800ef8c:	1d1d      	adds	r5, r3, #4
 800ef8e:	681b      	ldr	r3, [r3, #0]
 800ef90:	6015      	str	r5, [r2, #0]
 800ef92:	060a      	lsls	r2, r1, #24
 800ef94:	d50b      	bpl.n	800efae <_printf_i+0x162>
 800ef96:	07ca      	lsls	r2, r1, #31
 800ef98:	bf44      	itt	mi
 800ef9a:	f041 0120 	orrmi.w	r1, r1, #32
 800ef9e:	6021      	strmi	r1, [r4, #0]
 800efa0:	b91b      	cbnz	r3, 800efaa <_printf_i+0x15e>
 800efa2:	6822      	ldr	r2, [r4, #0]
 800efa4:	f022 0220 	bic.w	r2, r2, #32
 800efa8:	6022      	str	r2, [r4, #0]
 800efaa:	2210      	movs	r2, #16
 800efac:	e7b7      	b.n	800ef1e <_printf_i+0xd2>
 800efae:	064d      	lsls	r5, r1, #25
 800efb0:	bf48      	it	mi
 800efb2:	b29b      	uxthmi	r3, r3
 800efb4:	e7ef      	b.n	800ef96 <_printf_i+0x14a>
 800efb6:	4665      	mov	r5, ip
 800efb8:	fbb3 f1f2 	udiv	r1, r3, r2
 800efbc:	fb02 3311 	mls	r3, r2, r1, r3
 800efc0:	5cc3      	ldrb	r3, [r0, r3]
 800efc2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800efc6:	460b      	mov	r3, r1
 800efc8:	2900      	cmp	r1, #0
 800efca:	d1f5      	bne.n	800efb8 <_printf_i+0x16c>
 800efcc:	e7b9      	b.n	800ef42 <_printf_i+0xf6>
 800efce:	6813      	ldr	r3, [r2, #0]
 800efd0:	6825      	ldr	r5, [r4, #0]
 800efd2:	6961      	ldr	r1, [r4, #20]
 800efd4:	1d18      	adds	r0, r3, #4
 800efd6:	6010      	str	r0, [r2, #0]
 800efd8:	0628      	lsls	r0, r5, #24
 800efda:	681b      	ldr	r3, [r3, #0]
 800efdc:	d501      	bpl.n	800efe2 <_printf_i+0x196>
 800efde:	6019      	str	r1, [r3, #0]
 800efe0:	e002      	b.n	800efe8 <_printf_i+0x19c>
 800efe2:	066a      	lsls	r2, r5, #25
 800efe4:	d5fb      	bpl.n	800efde <_printf_i+0x192>
 800efe6:	8019      	strh	r1, [r3, #0]
 800efe8:	2300      	movs	r3, #0
 800efea:	6123      	str	r3, [r4, #16]
 800efec:	4665      	mov	r5, ip
 800efee:	e7b9      	b.n	800ef64 <_printf_i+0x118>
 800eff0:	6813      	ldr	r3, [r2, #0]
 800eff2:	1d19      	adds	r1, r3, #4
 800eff4:	6011      	str	r1, [r2, #0]
 800eff6:	681d      	ldr	r5, [r3, #0]
 800eff8:	6862      	ldr	r2, [r4, #4]
 800effa:	2100      	movs	r1, #0
 800effc:	4628      	mov	r0, r5
 800effe:	f7f1 f8e7 	bl	80001d0 <memchr>
 800f002:	b108      	cbz	r0, 800f008 <_printf_i+0x1bc>
 800f004:	1b40      	subs	r0, r0, r5
 800f006:	6060      	str	r0, [r4, #4]
 800f008:	6863      	ldr	r3, [r4, #4]
 800f00a:	6123      	str	r3, [r4, #16]
 800f00c:	2300      	movs	r3, #0
 800f00e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f012:	e7a7      	b.n	800ef64 <_printf_i+0x118>
 800f014:	6923      	ldr	r3, [r4, #16]
 800f016:	462a      	mov	r2, r5
 800f018:	4639      	mov	r1, r7
 800f01a:	4630      	mov	r0, r6
 800f01c:	47c0      	blx	r8
 800f01e:	3001      	adds	r0, #1
 800f020:	d0aa      	beq.n	800ef78 <_printf_i+0x12c>
 800f022:	6823      	ldr	r3, [r4, #0]
 800f024:	079b      	lsls	r3, r3, #30
 800f026:	d413      	bmi.n	800f050 <_printf_i+0x204>
 800f028:	68e0      	ldr	r0, [r4, #12]
 800f02a:	9b03      	ldr	r3, [sp, #12]
 800f02c:	4298      	cmp	r0, r3
 800f02e:	bfb8      	it	lt
 800f030:	4618      	movlt	r0, r3
 800f032:	e7a3      	b.n	800ef7c <_printf_i+0x130>
 800f034:	2301      	movs	r3, #1
 800f036:	464a      	mov	r2, r9
 800f038:	4639      	mov	r1, r7
 800f03a:	4630      	mov	r0, r6
 800f03c:	47c0      	blx	r8
 800f03e:	3001      	adds	r0, #1
 800f040:	d09a      	beq.n	800ef78 <_printf_i+0x12c>
 800f042:	3501      	adds	r5, #1
 800f044:	68e3      	ldr	r3, [r4, #12]
 800f046:	9a03      	ldr	r2, [sp, #12]
 800f048:	1a9b      	subs	r3, r3, r2
 800f04a:	42ab      	cmp	r3, r5
 800f04c:	dcf2      	bgt.n	800f034 <_printf_i+0x1e8>
 800f04e:	e7eb      	b.n	800f028 <_printf_i+0x1dc>
 800f050:	2500      	movs	r5, #0
 800f052:	f104 0919 	add.w	r9, r4, #25
 800f056:	e7f5      	b.n	800f044 <_printf_i+0x1f8>
 800f058:	2b00      	cmp	r3, #0
 800f05a:	d1ac      	bne.n	800efb6 <_printf_i+0x16a>
 800f05c:	7803      	ldrb	r3, [r0, #0]
 800f05e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f062:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f066:	e76c      	b.n	800ef42 <_printf_i+0xf6>
 800f068:	0800f985 	.word	0x0800f985
 800f06c:	0800f996 	.word	0x0800f996

0800f070 <_sbrk_r>:
 800f070:	b538      	push	{r3, r4, r5, lr}
 800f072:	4c06      	ldr	r4, [pc, #24]	; (800f08c <_sbrk_r+0x1c>)
 800f074:	2300      	movs	r3, #0
 800f076:	4605      	mov	r5, r0
 800f078:	4608      	mov	r0, r1
 800f07a:	6023      	str	r3, [r4, #0]
 800f07c:	f7fe fff2 	bl	800e064 <_sbrk>
 800f080:	1c43      	adds	r3, r0, #1
 800f082:	d102      	bne.n	800f08a <_sbrk_r+0x1a>
 800f084:	6823      	ldr	r3, [r4, #0]
 800f086:	b103      	cbz	r3, 800f08a <_sbrk_r+0x1a>
 800f088:	602b      	str	r3, [r5, #0]
 800f08a:	bd38      	pop	{r3, r4, r5, pc}
 800f08c:	20001018 	.word	0x20001018

0800f090 <__sread>:
 800f090:	b510      	push	{r4, lr}
 800f092:	460c      	mov	r4, r1
 800f094:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f098:	f000 f896 	bl	800f1c8 <_read_r>
 800f09c:	2800      	cmp	r0, #0
 800f09e:	bfab      	itete	ge
 800f0a0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800f0a2:	89a3      	ldrhlt	r3, [r4, #12]
 800f0a4:	181b      	addge	r3, r3, r0
 800f0a6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800f0aa:	bfac      	ite	ge
 800f0ac:	6563      	strge	r3, [r4, #84]	; 0x54
 800f0ae:	81a3      	strhlt	r3, [r4, #12]
 800f0b0:	bd10      	pop	{r4, pc}

0800f0b2 <__swrite>:
 800f0b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f0b6:	461f      	mov	r7, r3
 800f0b8:	898b      	ldrh	r3, [r1, #12]
 800f0ba:	05db      	lsls	r3, r3, #23
 800f0bc:	4605      	mov	r5, r0
 800f0be:	460c      	mov	r4, r1
 800f0c0:	4616      	mov	r6, r2
 800f0c2:	d505      	bpl.n	800f0d0 <__swrite+0x1e>
 800f0c4:	2302      	movs	r3, #2
 800f0c6:	2200      	movs	r2, #0
 800f0c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f0cc:	f000 f868 	bl	800f1a0 <_lseek_r>
 800f0d0:	89a3      	ldrh	r3, [r4, #12]
 800f0d2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f0d6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f0da:	81a3      	strh	r3, [r4, #12]
 800f0dc:	4632      	mov	r2, r6
 800f0de:	463b      	mov	r3, r7
 800f0e0:	4628      	mov	r0, r5
 800f0e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f0e6:	f000 b817 	b.w	800f118 <_write_r>

0800f0ea <__sseek>:
 800f0ea:	b510      	push	{r4, lr}
 800f0ec:	460c      	mov	r4, r1
 800f0ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f0f2:	f000 f855 	bl	800f1a0 <_lseek_r>
 800f0f6:	1c43      	adds	r3, r0, #1
 800f0f8:	89a3      	ldrh	r3, [r4, #12]
 800f0fa:	bf15      	itete	ne
 800f0fc:	6560      	strne	r0, [r4, #84]	; 0x54
 800f0fe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800f102:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800f106:	81a3      	strheq	r3, [r4, #12]
 800f108:	bf18      	it	ne
 800f10a:	81a3      	strhne	r3, [r4, #12]
 800f10c:	bd10      	pop	{r4, pc}

0800f10e <__sclose>:
 800f10e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f112:	f000 b813 	b.w	800f13c <_close_r>
	...

0800f118 <_write_r>:
 800f118:	b538      	push	{r3, r4, r5, lr}
 800f11a:	4c07      	ldr	r4, [pc, #28]	; (800f138 <_write_r+0x20>)
 800f11c:	4605      	mov	r5, r0
 800f11e:	4608      	mov	r0, r1
 800f120:	4611      	mov	r1, r2
 800f122:	2200      	movs	r2, #0
 800f124:	6022      	str	r2, [r4, #0]
 800f126:	461a      	mov	r2, r3
 800f128:	f7fe ff4b 	bl	800dfc2 <_write>
 800f12c:	1c43      	adds	r3, r0, #1
 800f12e:	d102      	bne.n	800f136 <_write_r+0x1e>
 800f130:	6823      	ldr	r3, [r4, #0]
 800f132:	b103      	cbz	r3, 800f136 <_write_r+0x1e>
 800f134:	602b      	str	r3, [r5, #0]
 800f136:	bd38      	pop	{r3, r4, r5, pc}
 800f138:	20001018 	.word	0x20001018

0800f13c <_close_r>:
 800f13c:	b538      	push	{r3, r4, r5, lr}
 800f13e:	4c06      	ldr	r4, [pc, #24]	; (800f158 <_close_r+0x1c>)
 800f140:	2300      	movs	r3, #0
 800f142:	4605      	mov	r5, r0
 800f144:	4608      	mov	r0, r1
 800f146:	6023      	str	r3, [r4, #0]
 800f148:	f7fe ff57 	bl	800dffa <_close>
 800f14c:	1c43      	adds	r3, r0, #1
 800f14e:	d102      	bne.n	800f156 <_close_r+0x1a>
 800f150:	6823      	ldr	r3, [r4, #0]
 800f152:	b103      	cbz	r3, 800f156 <_close_r+0x1a>
 800f154:	602b      	str	r3, [r5, #0]
 800f156:	bd38      	pop	{r3, r4, r5, pc}
 800f158:	20001018 	.word	0x20001018

0800f15c <_fstat_r>:
 800f15c:	b538      	push	{r3, r4, r5, lr}
 800f15e:	4c07      	ldr	r4, [pc, #28]	; (800f17c <_fstat_r+0x20>)
 800f160:	2300      	movs	r3, #0
 800f162:	4605      	mov	r5, r0
 800f164:	4608      	mov	r0, r1
 800f166:	4611      	mov	r1, r2
 800f168:	6023      	str	r3, [r4, #0]
 800f16a:	f7fe ff52 	bl	800e012 <_fstat>
 800f16e:	1c43      	adds	r3, r0, #1
 800f170:	d102      	bne.n	800f178 <_fstat_r+0x1c>
 800f172:	6823      	ldr	r3, [r4, #0]
 800f174:	b103      	cbz	r3, 800f178 <_fstat_r+0x1c>
 800f176:	602b      	str	r3, [r5, #0]
 800f178:	bd38      	pop	{r3, r4, r5, pc}
 800f17a:	bf00      	nop
 800f17c:	20001018 	.word	0x20001018

0800f180 <_isatty_r>:
 800f180:	b538      	push	{r3, r4, r5, lr}
 800f182:	4c06      	ldr	r4, [pc, #24]	; (800f19c <_isatty_r+0x1c>)
 800f184:	2300      	movs	r3, #0
 800f186:	4605      	mov	r5, r0
 800f188:	4608      	mov	r0, r1
 800f18a:	6023      	str	r3, [r4, #0]
 800f18c:	f7fe ff51 	bl	800e032 <_isatty>
 800f190:	1c43      	adds	r3, r0, #1
 800f192:	d102      	bne.n	800f19a <_isatty_r+0x1a>
 800f194:	6823      	ldr	r3, [r4, #0]
 800f196:	b103      	cbz	r3, 800f19a <_isatty_r+0x1a>
 800f198:	602b      	str	r3, [r5, #0]
 800f19a:	bd38      	pop	{r3, r4, r5, pc}
 800f19c:	20001018 	.word	0x20001018

0800f1a0 <_lseek_r>:
 800f1a0:	b538      	push	{r3, r4, r5, lr}
 800f1a2:	4c07      	ldr	r4, [pc, #28]	; (800f1c0 <_lseek_r+0x20>)
 800f1a4:	4605      	mov	r5, r0
 800f1a6:	4608      	mov	r0, r1
 800f1a8:	4611      	mov	r1, r2
 800f1aa:	2200      	movs	r2, #0
 800f1ac:	6022      	str	r2, [r4, #0]
 800f1ae:	461a      	mov	r2, r3
 800f1b0:	f7fe ff4a 	bl	800e048 <_lseek>
 800f1b4:	1c43      	adds	r3, r0, #1
 800f1b6:	d102      	bne.n	800f1be <_lseek_r+0x1e>
 800f1b8:	6823      	ldr	r3, [r4, #0]
 800f1ba:	b103      	cbz	r3, 800f1be <_lseek_r+0x1e>
 800f1bc:	602b      	str	r3, [r5, #0]
 800f1be:	bd38      	pop	{r3, r4, r5, pc}
 800f1c0:	20001018 	.word	0x20001018

0800f1c4 <__malloc_lock>:
 800f1c4:	4770      	bx	lr

0800f1c6 <__malloc_unlock>:
 800f1c6:	4770      	bx	lr

0800f1c8 <_read_r>:
 800f1c8:	b538      	push	{r3, r4, r5, lr}
 800f1ca:	4c07      	ldr	r4, [pc, #28]	; (800f1e8 <_read_r+0x20>)
 800f1cc:	4605      	mov	r5, r0
 800f1ce:	4608      	mov	r0, r1
 800f1d0:	4611      	mov	r1, r2
 800f1d2:	2200      	movs	r2, #0
 800f1d4:	6022      	str	r2, [r4, #0]
 800f1d6:	461a      	mov	r2, r3
 800f1d8:	f7fe fed6 	bl	800df88 <_read>
 800f1dc:	1c43      	adds	r3, r0, #1
 800f1de:	d102      	bne.n	800f1e6 <_read_r+0x1e>
 800f1e0:	6823      	ldr	r3, [r4, #0]
 800f1e2:	b103      	cbz	r3, 800f1e6 <_read_r+0x1e>
 800f1e4:	602b      	str	r3, [r5, #0]
 800f1e6:	bd38      	pop	{r3, r4, r5, pc}
 800f1e8:	20001018 	.word	0x20001018

0800f1ec <sqrt>:
 800f1ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f1f0:	ed2d 8b02 	vpush	{d8}
 800f1f4:	b08b      	sub	sp, #44	; 0x2c
 800f1f6:	ec55 4b10 	vmov	r4, r5, d0
 800f1fa:	f000 f851 	bl	800f2a0 <__ieee754_sqrt>
 800f1fe:	4b26      	ldr	r3, [pc, #152]	; (800f298 <sqrt+0xac>)
 800f200:	eeb0 8a40 	vmov.f32	s16, s0
 800f204:	eef0 8a60 	vmov.f32	s17, s1
 800f208:	f993 6000 	ldrsb.w	r6, [r3]
 800f20c:	1c73      	adds	r3, r6, #1
 800f20e:	d02a      	beq.n	800f266 <sqrt+0x7a>
 800f210:	4622      	mov	r2, r4
 800f212:	462b      	mov	r3, r5
 800f214:	4620      	mov	r0, r4
 800f216:	4629      	mov	r1, r5
 800f218:	f7f1 fc80 	bl	8000b1c <__aeabi_dcmpun>
 800f21c:	4607      	mov	r7, r0
 800f21e:	bb10      	cbnz	r0, 800f266 <sqrt+0x7a>
 800f220:	f04f 0800 	mov.w	r8, #0
 800f224:	f04f 0900 	mov.w	r9, #0
 800f228:	4642      	mov	r2, r8
 800f22a:	464b      	mov	r3, r9
 800f22c:	4620      	mov	r0, r4
 800f22e:	4629      	mov	r1, r5
 800f230:	f7f1 fc4c 	bl	8000acc <__aeabi_dcmplt>
 800f234:	b1b8      	cbz	r0, 800f266 <sqrt+0x7a>
 800f236:	2301      	movs	r3, #1
 800f238:	9300      	str	r3, [sp, #0]
 800f23a:	4b18      	ldr	r3, [pc, #96]	; (800f29c <sqrt+0xb0>)
 800f23c:	9301      	str	r3, [sp, #4]
 800f23e:	9708      	str	r7, [sp, #32]
 800f240:	e9cd 4504 	strd	r4, r5, [sp, #16]
 800f244:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800f248:	b9b6      	cbnz	r6, 800f278 <sqrt+0x8c>
 800f24a:	e9cd 8906 	strd	r8, r9, [sp, #24]
 800f24e:	4668      	mov	r0, sp
 800f250:	f000 f8d6 	bl	800f400 <matherr>
 800f254:	b1d0      	cbz	r0, 800f28c <sqrt+0xa0>
 800f256:	9b08      	ldr	r3, [sp, #32]
 800f258:	b11b      	cbz	r3, 800f262 <sqrt+0x76>
 800f25a:	f7fe ff8f 	bl	800e17c <__errno>
 800f25e:	9b08      	ldr	r3, [sp, #32]
 800f260:	6003      	str	r3, [r0, #0]
 800f262:	ed9d 8b06 	vldr	d8, [sp, #24]
 800f266:	eeb0 0a48 	vmov.f32	s0, s16
 800f26a:	eef0 0a68 	vmov.f32	s1, s17
 800f26e:	b00b      	add	sp, #44	; 0x2c
 800f270:	ecbd 8b02 	vpop	{d8}
 800f274:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f278:	4642      	mov	r2, r8
 800f27a:	464b      	mov	r3, r9
 800f27c:	4640      	mov	r0, r8
 800f27e:	4649      	mov	r1, r9
 800f280:	f7f1 fadc 	bl	800083c <__aeabi_ddiv>
 800f284:	2e02      	cmp	r6, #2
 800f286:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800f28a:	d1e0      	bne.n	800f24e <sqrt+0x62>
 800f28c:	f7fe ff76 	bl	800e17c <__errno>
 800f290:	2321      	movs	r3, #33	; 0x21
 800f292:	6003      	str	r3, [r0, #0]
 800f294:	e7df      	b.n	800f256 <sqrt+0x6a>
 800f296:	bf00      	nop
 800f298:	20000168 	.word	0x20000168
 800f29c:	0800f9a7 	.word	0x0800f9a7

0800f2a0 <__ieee754_sqrt>:
 800f2a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f2a4:	4955      	ldr	r1, [pc, #340]	; (800f3fc <__ieee754_sqrt+0x15c>)
 800f2a6:	ec55 4b10 	vmov	r4, r5, d0
 800f2aa:	43a9      	bics	r1, r5
 800f2ac:	462b      	mov	r3, r5
 800f2ae:	462a      	mov	r2, r5
 800f2b0:	d112      	bne.n	800f2d8 <__ieee754_sqrt+0x38>
 800f2b2:	ee10 2a10 	vmov	r2, s0
 800f2b6:	ee10 0a10 	vmov	r0, s0
 800f2ba:	4629      	mov	r1, r5
 800f2bc:	f7f1 f994 	bl	80005e8 <__aeabi_dmul>
 800f2c0:	4602      	mov	r2, r0
 800f2c2:	460b      	mov	r3, r1
 800f2c4:	4620      	mov	r0, r4
 800f2c6:	4629      	mov	r1, r5
 800f2c8:	f7f0 ffd8 	bl	800027c <__adddf3>
 800f2cc:	4604      	mov	r4, r0
 800f2ce:	460d      	mov	r5, r1
 800f2d0:	ec45 4b10 	vmov	d0, r4, r5
 800f2d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f2d8:	2d00      	cmp	r5, #0
 800f2da:	ee10 0a10 	vmov	r0, s0
 800f2de:	4621      	mov	r1, r4
 800f2e0:	dc0f      	bgt.n	800f302 <__ieee754_sqrt+0x62>
 800f2e2:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800f2e6:	4330      	orrs	r0, r6
 800f2e8:	d0f2      	beq.n	800f2d0 <__ieee754_sqrt+0x30>
 800f2ea:	b155      	cbz	r5, 800f302 <__ieee754_sqrt+0x62>
 800f2ec:	ee10 2a10 	vmov	r2, s0
 800f2f0:	4620      	mov	r0, r4
 800f2f2:	4629      	mov	r1, r5
 800f2f4:	f7f0 ffc0 	bl	8000278 <__aeabi_dsub>
 800f2f8:	4602      	mov	r2, r0
 800f2fa:	460b      	mov	r3, r1
 800f2fc:	f7f1 fa9e 	bl	800083c <__aeabi_ddiv>
 800f300:	e7e4      	b.n	800f2cc <__ieee754_sqrt+0x2c>
 800f302:	151b      	asrs	r3, r3, #20
 800f304:	d073      	beq.n	800f3ee <__ieee754_sqrt+0x14e>
 800f306:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800f30a:	07dd      	lsls	r5, r3, #31
 800f30c:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800f310:	bf48      	it	mi
 800f312:	0fc8      	lsrmi	r0, r1, #31
 800f314:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800f318:	bf44      	itt	mi
 800f31a:	0049      	lslmi	r1, r1, #1
 800f31c:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 800f320:	2500      	movs	r5, #0
 800f322:	1058      	asrs	r0, r3, #1
 800f324:	0fcb      	lsrs	r3, r1, #31
 800f326:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 800f32a:	0049      	lsls	r1, r1, #1
 800f32c:	2316      	movs	r3, #22
 800f32e:	462c      	mov	r4, r5
 800f330:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 800f334:	19a7      	adds	r7, r4, r6
 800f336:	4297      	cmp	r7, r2
 800f338:	bfde      	ittt	le
 800f33a:	19bc      	addle	r4, r7, r6
 800f33c:	1bd2      	suble	r2, r2, r7
 800f33e:	19ad      	addle	r5, r5, r6
 800f340:	0fcf      	lsrs	r7, r1, #31
 800f342:	3b01      	subs	r3, #1
 800f344:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 800f348:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800f34c:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800f350:	d1f0      	bne.n	800f334 <__ieee754_sqrt+0x94>
 800f352:	f04f 0c20 	mov.w	ip, #32
 800f356:	469e      	mov	lr, r3
 800f358:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800f35c:	42a2      	cmp	r2, r4
 800f35e:	eb06 070e 	add.w	r7, r6, lr
 800f362:	dc02      	bgt.n	800f36a <__ieee754_sqrt+0xca>
 800f364:	d112      	bne.n	800f38c <__ieee754_sqrt+0xec>
 800f366:	428f      	cmp	r7, r1
 800f368:	d810      	bhi.n	800f38c <__ieee754_sqrt+0xec>
 800f36a:	2f00      	cmp	r7, #0
 800f36c:	eb07 0e06 	add.w	lr, r7, r6
 800f370:	da42      	bge.n	800f3f8 <__ieee754_sqrt+0x158>
 800f372:	f1be 0f00 	cmp.w	lr, #0
 800f376:	db3f      	blt.n	800f3f8 <__ieee754_sqrt+0x158>
 800f378:	f104 0801 	add.w	r8, r4, #1
 800f37c:	1b12      	subs	r2, r2, r4
 800f37e:	428f      	cmp	r7, r1
 800f380:	bf88      	it	hi
 800f382:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800f386:	1bc9      	subs	r1, r1, r7
 800f388:	4433      	add	r3, r6
 800f38a:	4644      	mov	r4, r8
 800f38c:	0052      	lsls	r2, r2, #1
 800f38e:	f1bc 0c01 	subs.w	ip, ip, #1
 800f392:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 800f396:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800f39a:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800f39e:	d1dd      	bne.n	800f35c <__ieee754_sqrt+0xbc>
 800f3a0:	430a      	orrs	r2, r1
 800f3a2:	d006      	beq.n	800f3b2 <__ieee754_sqrt+0x112>
 800f3a4:	1c5c      	adds	r4, r3, #1
 800f3a6:	bf13      	iteet	ne
 800f3a8:	3301      	addne	r3, #1
 800f3aa:	3501      	addeq	r5, #1
 800f3ac:	4663      	moveq	r3, ip
 800f3ae:	f023 0301 	bicne.w	r3, r3, #1
 800f3b2:	106a      	asrs	r2, r5, #1
 800f3b4:	085b      	lsrs	r3, r3, #1
 800f3b6:	07e9      	lsls	r1, r5, #31
 800f3b8:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800f3bc:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800f3c0:	bf48      	it	mi
 800f3c2:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800f3c6:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 800f3ca:	461c      	mov	r4, r3
 800f3cc:	e780      	b.n	800f2d0 <__ieee754_sqrt+0x30>
 800f3ce:	0aca      	lsrs	r2, r1, #11
 800f3d0:	3815      	subs	r0, #21
 800f3d2:	0549      	lsls	r1, r1, #21
 800f3d4:	2a00      	cmp	r2, #0
 800f3d6:	d0fa      	beq.n	800f3ce <__ieee754_sqrt+0x12e>
 800f3d8:	02d6      	lsls	r6, r2, #11
 800f3da:	d50a      	bpl.n	800f3f2 <__ieee754_sqrt+0x152>
 800f3dc:	f1c3 0420 	rsb	r4, r3, #32
 800f3e0:	fa21 f404 	lsr.w	r4, r1, r4
 800f3e4:	1e5d      	subs	r5, r3, #1
 800f3e6:	4099      	lsls	r1, r3
 800f3e8:	4322      	orrs	r2, r4
 800f3ea:	1b43      	subs	r3, r0, r5
 800f3ec:	e78b      	b.n	800f306 <__ieee754_sqrt+0x66>
 800f3ee:	4618      	mov	r0, r3
 800f3f0:	e7f0      	b.n	800f3d4 <__ieee754_sqrt+0x134>
 800f3f2:	0052      	lsls	r2, r2, #1
 800f3f4:	3301      	adds	r3, #1
 800f3f6:	e7ef      	b.n	800f3d8 <__ieee754_sqrt+0x138>
 800f3f8:	46a0      	mov	r8, r4
 800f3fa:	e7bf      	b.n	800f37c <__ieee754_sqrt+0xdc>
 800f3fc:	7ff00000 	.word	0x7ff00000

0800f400 <matherr>:
 800f400:	2000      	movs	r0, #0
 800f402:	4770      	bx	lr

0800f404 <_init>:
 800f404:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f406:	bf00      	nop
 800f408:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f40a:	bc08      	pop	{r3}
 800f40c:	469e      	mov	lr, r3
 800f40e:	4770      	bx	lr

0800f410 <_fini>:
 800f410:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f412:	bf00      	nop
 800f414:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f416:	bc08      	pop	{r3}
 800f418:	469e      	mov	lr, r3
 800f41a:	4770      	bx	lr
