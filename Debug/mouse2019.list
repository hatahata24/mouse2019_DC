
mouse2019.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ac94  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000374  0800ae24  0800ae24  0001ae24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b198  0800b198  000200cc  2**0
                  CONTENTS
  4 .ARM          00000008  0800b198  0800b198  0001b198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b1a0  0800b1a0  000200cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b1a0  0800b1a0  0001b1a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b1a4  0800b1a4  0001b1a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000cc  20000000  0800b1a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000d70  200000cc  0800b274  000200cc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000e3c  0800b274  00020e3c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200cc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014f99  00000000  00000000  000200fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002f9f  00000000  00000000  00035095  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001260  00000000  00000000  00038038  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001110  00000000  00000000  00039298  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00022363  00000000  00000000  0003a3a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000f3ad  00000000  00000000  0005c70b  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c6971  00000000  00000000  0006bab8  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00132429  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000055fc  00000000  00000000  001324a4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000cc 	.word	0x200000cc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800ae0c 	.word	0x0800ae0c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000d0 	.word	0x200000d0
 80001cc:	0800ae0c 	.word	0x0800ae0c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ae:	f1a4 0401 	sub.w	r4, r4, #1
 80003b2:	d1e9      	bne.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__gedf2>:
 8000a0c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a10:	e006      	b.n	8000a20 <__cmpdf2+0x4>
 8000a12:	bf00      	nop

08000a14 <__ledf2>:
 8000a14:	f04f 0c01 	mov.w	ip, #1
 8000a18:	e002      	b.n	8000a20 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__cmpdf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a36:	d01b      	beq.n	8000a70 <__cmpdf2+0x54>
 8000a38:	b001      	add	sp, #4
 8000a3a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a3e:	bf0c      	ite	eq
 8000a40:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a44:	ea91 0f03 	teqne	r1, r3
 8000a48:	bf02      	ittt	eq
 8000a4a:	ea90 0f02 	teqeq	r0, r2
 8000a4e:	2000      	moveq	r0, #0
 8000a50:	4770      	bxeq	lr
 8000a52:	f110 0f00 	cmn.w	r0, #0
 8000a56:	ea91 0f03 	teq	r1, r3
 8000a5a:	bf58      	it	pl
 8000a5c:	4299      	cmppl	r1, r3
 8000a5e:	bf08      	it	eq
 8000a60:	4290      	cmpeq	r0, r2
 8000a62:	bf2c      	ite	cs
 8000a64:	17d8      	asrcs	r0, r3, #31
 8000a66:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a6a:	f040 0001 	orr.w	r0, r0, #1
 8000a6e:	4770      	bx	lr
 8000a70:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a78:	d102      	bne.n	8000a80 <__cmpdf2+0x64>
 8000a7a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a7e:	d107      	bne.n	8000a90 <__cmpdf2+0x74>
 8000a80:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d1d6      	bne.n	8000a38 <__cmpdf2+0x1c>
 8000a8a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a8e:	d0d3      	beq.n	8000a38 <__cmpdf2+0x1c>
 8000a90:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop

08000a98 <__aeabi_cdrcmple>:
 8000a98:	4684      	mov	ip, r0
 8000a9a:	4610      	mov	r0, r2
 8000a9c:	4662      	mov	r2, ip
 8000a9e:	468c      	mov	ip, r1
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4663      	mov	r3, ip
 8000aa4:	e000      	b.n	8000aa8 <__aeabi_cdcmpeq>
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdcmpeq>:
 8000aa8:	b501      	push	{r0, lr}
 8000aaa:	f7ff ffb7 	bl	8000a1c <__cmpdf2>
 8000aae:	2800      	cmp	r0, #0
 8000ab0:	bf48      	it	mi
 8000ab2:	f110 0f00 	cmnmi.w	r0, #0
 8000ab6:	bd01      	pop	{r0, pc}

08000ab8 <__aeabi_dcmpeq>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff fff4 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ac0:	bf0c      	ite	eq
 8000ac2:	2001      	moveq	r0, #1
 8000ac4:	2000      	movne	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_dcmplt>:
 8000acc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad0:	f7ff ffea 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ad4:	bf34      	ite	cc
 8000ad6:	2001      	movcc	r0, #1
 8000ad8:	2000      	movcs	r0, #0
 8000ada:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ade:	bf00      	nop

08000ae0 <__aeabi_dcmple>:
 8000ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae4:	f7ff ffe0 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ae8:	bf94      	ite	ls
 8000aea:	2001      	movls	r0, #1
 8000aec:	2000      	movhi	r0, #0
 8000aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af2:	bf00      	nop

08000af4 <__aeabi_dcmpge>:
 8000af4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af8:	f7ff ffce 	bl	8000a98 <__aeabi_cdrcmple>
 8000afc:	bf94      	ite	ls
 8000afe:	2001      	movls	r0, #1
 8000b00:	2000      	movhi	r0, #0
 8000b02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b06:	bf00      	nop

08000b08 <__aeabi_dcmpgt>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff ffc4 	bl	8000a98 <__aeabi_cdrcmple>
 8000b10:	bf34      	ite	cc
 8000b12:	2001      	movcc	r0, #1
 8000b14:	2000      	movcs	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmpun>:
 8000b1c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b24:	d102      	bne.n	8000b2c <__aeabi_dcmpun+0x10>
 8000b26:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b2a:	d10a      	bne.n	8000b42 <__aeabi_dcmpun+0x26>
 8000b2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x20>
 8000b36:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b3a:	d102      	bne.n	8000b42 <__aeabi_dcmpun+0x26>
 8000b3c:	f04f 0000 	mov.w	r0, #0
 8000b40:	4770      	bx	lr
 8000b42:	f04f 0001 	mov.w	r0, #1
 8000b46:	4770      	bx	lr

08000b48 <__aeabi_d2f>:
 8000b48:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b4c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b50:	bf24      	itt	cs
 8000b52:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b56:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b5a:	d90d      	bls.n	8000b78 <__aeabi_d2f+0x30>
 8000b5c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b60:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b64:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b68:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b6c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b70:	bf08      	it	eq
 8000b72:	f020 0001 	biceq.w	r0, r0, #1
 8000b76:	4770      	bx	lr
 8000b78:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b7c:	d121      	bne.n	8000bc2 <__aeabi_d2f+0x7a>
 8000b7e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b82:	bfbc      	itt	lt
 8000b84:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b88:	4770      	bxlt	lr
 8000b8a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b8e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b92:	f1c2 0218 	rsb	r2, r2, #24
 8000b96:	f1c2 0c20 	rsb	ip, r2, #32
 8000b9a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b9e:	fa20 f002 	lsr.w	r0, r0, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	f040 0001 	orrne.w	r0, r0, #1
 8000ba8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bac:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bb0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bb4:	ea40 000c 	orr.w	r0, r0, ip
 8000bb8:	fa23 f302 	lsr.w	r3, r3, r2
 8000bbc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bc0:	e7cc      	b.n	8000b5c <__aeabi_d2f+0x14>
 8000bc2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bc6:	d107      	bne.n	8000bd8 <__aeabi_d2f+0x90>
 8000bc8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bcc:	bf1e      	ittt	ne
 8000bce:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bd2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bd6:	4770      	bxne	lr
 8000bd8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bdc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000be0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b972 	b.w	8000ee4 <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9e08      	ldr	r6, [sp, #32]
 8000c1e:	4604      	mov	r4, r0
 8000c20:	4688      	mov	r8, r1
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d14b      	bne.n	8000cbe <__udivmoddi4+0xa6>
 8000c26:	428a      	cmp	r2, r1
 8000c28:	4615      	mov	r5, r2
 8000c2a:	d967      	bls.n	8000cfc <__udivmoddi4+0xe4>
 8000c2c:	fab2 f282 	clz	r2, r2
 8000c30:	b14a      	cbz	r2, 8000c46 <__udivmoddi4+0x2e>
 8000c32:	f1c2 0720 	rsb	r7, r2, #32
 8000c36:	fa01 f302 	lsl.w	r3, r1, r2
 8000c3a:	fa20 f707 	lsr.w	r7, r0, r7
 8000c3e:	4095      	lsls	r5, r2
 8000c40:	ea47 0803 	orr.w	r8, r7, r3
 8000c44:	4094      	lsls	r4, r2
 8000c46:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c4a:	0c23      	lsrs	r3, r4, #16
 8000c4c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000c50:	fa1f fc85 	uxth.w	ip, r5
 8000c54:	fb0e 8817 	mls	r8, lr, r7, r8
 8000c58:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c5c:	fb07 f10c 	mul.w	r1, r7, ip
 8000c60:	4299      	cmp	r1, r3
 8000c62:	d909      	bls.n	8000c78 <__udivmoddi4+0x60>
 8000c64:	18eb      	adds	r3, r5, r3
 8000c66:	f107 30ff 	add.w	r0, r7, #4294967295
 8000c6a:	f080 811b 	bcs.w	8000ea4 <__udivmoddi4+0x28c>
 8000c6e:	4299      	cmp	r1, r3
 8000c70:	f240 8118 	bls.w	8000ea4 <__udivmoddi4+0x28c>
 8000c74:	3f02      	subs	r7, #2
 8000c76:	442b      	add	r3, r5
 8000c78:	1a5b      	subs	r3, r3, r1
 8000c7a:	b2a4      	uxth	r4, r4
 8000c7c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c80:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c84:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c88:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c8c:	45a4      	cmp	ip, r4
 8000c8e:	d909      	bls.n	8000ca4 <__udivmoddi4+0x8c>
 8000c90:	192c      	adds	r4, r5, r4
 8000c92:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c96:	f080 8107 	bcs.w	8000ea8 <__udivmoddi4+0x290>
 8000c9a:	45a4      	cmp	ip, r4
 8000c9c:	f240 8104 	bls.w	8000ea8 <__udivmoddi4+0x290>
 8000ca0:	3802      	subs	r0, #2
 8000ca2:	442c      	add	r4, r5
 8000ca4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000ca8:	eba4 040c 	sub.w	r4, r4, ip
 8000cac:	2700      	movs	r7, #0
 8000cae:	b11e      	cbz	r6, 8000cb8 <__udivmoddi4+0xa0>
 8000cb0:	40d4      	lsrs	r4, r2
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	e9c6 4300 	strd	r4, r3, [r6]
 8000cb8:	4639      	mov	r1, r7
 8000cba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cbe:	428b      	cmp	r3, r1
 8000cc0:	d909      	bls.n	8000cd6 <__udivmoddi4+0xbe>
 8000cc2:	2e00      	cmp	r6, #0
 8000cc4:	f000 80eb 	beq.w	8000e9e <__udivmoddi4+0x286>
 8000cc8:	2700      	movs	r7, #0
 8000cca:	e9c6 0100 	strd	r0, r1, [r6]
 8000cce:	4638      	mov	r0, r7
 8000cd0:	4639      	mov	r1, r7
 8000cd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd6:	fab3 f783 	clz	r7, r3
 8000cda:	2f00      	cmp	r7, #0
 8000cdc:	d147      	bne.n	8000d6e <__udivmoddi4+0x156>
 8000cde:	428b      	cmp	r3, r1
 8000ce0:	d302      	bcc.n	8000ce8 <__udivmoddi4+0xd0>
 8000ce2:	4282      	cmp	r2, r0
 8000ce4:	f200 80fa 	bhi.w	8000edc <__udivmoddi4+0x2c4>
 8000ce8:	1a84      	subs	r4, r0, r2
 8000cea:	eb61 0303 	sbc.w	r3, r1, r3
 8000cee:	2001      	movs	r0, #1
 8000cf0:	4698      	mov	r8, r3
 8000cf2:	2e00      	cmp	r6, #0
 8000cf4:	d0e0      	beq.n	8000cb8 <__udivmoddi4+0xa0>
 8000cf6:	e9c6 4800 	strd	r4, r8, [r6]
 8000cfa:	e7dd      	b.n	8000cb8 <__udivmoddi4+0xa0>
 8000cfc:	b902      	cbnz	r2, 8000d00 <__udivmoddi4+0xe8>
 8000cfe:	deff      	udf	#255	; 0xff
 8000d00:	fab2 f282 	clz	r2, r2
 8000d04:	2a00      	cmp	r2, #0
 8000d06:	f040 808f 	bne.w	8000e28 <__udivmoddi4+0x210>
 8000d0a:	1b49      	subs	r1, r1, r5
 8000d0c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d10:	fa1f f885 	uxth.w	r8, r5
 8000d14:	2701      	movs	r7, #1
 8000d16:	fbb1 fcfe 	udiv	ip, r1, lr
 8000d1a:	0c23      	lsrs	r3, r4, #16
 8000d1c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000d20:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d24:	fb08 f10c 	mul.w	r1, r8, ip
 8000d28:	4299      	cmp	r1, r3
 8000d2a:	d907      	bls.n	8000d3c <__udivmoddi4+0x124>
 8000d2c:	18eb      	adds	r3, r5, r3
 8000d2e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d32:	d202      	bcs.n	8000d3a <__udivmoddi4+0x122>
 8000d34:	4299      	cmp	r1, r3
 8000d36:	f200 80cd 	bhi.w	8000ed4 <__udivmoddi4+0x2bc>
 8000d3a:	4684      	mov	ip, r0
 8000d3c:	1a59      	subs	r1, r3, r1
 8000d3e:	b2a3      	uxth	r3, r4
 8000d40:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d44:	fb0e 1410 	mls	r4, lr, r0, r1
 8000d48:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d4c:	fb08 f800 	mul.w	r8, r8, r0
 8000d50:	45a0      	cmp	r8, r4
 8000d52:	d907      	bls.n	8000d64 <__udivmoddi4+0x14c>
 8000d54:	192c      	adds	r4, r5, r4
 8000d56:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d5a:	d202      	bcs.n	8000d62 <__udivmoddi4+0x14a>
 8000d5c:	45a0      	cmp	r8, r4
 8000d5e:	f200 80b6 	bhi.w	8000ece <__udivmoddi4+0x2b6>
 8000d62:	4618      	mov	r0, r3
 8000d64:	eba4 0408 	sub.w	r4, r4, r8
 8000d68:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d6c:	e79f      	b.n	8000cae <__udivmoddi4+0x96>
 8000d6e:	f1c7 0c20 	rsb	ip, r7, #32
 8000d72:	40bb      	lsls	r3, r7
 8000d74:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000d78:	ea4e 0e03 	orr.w	lr, lr, r3
 8000d7c:	fa01 f407 	lsl.w	r4, r1, r7
 8000d80:	fa20 f50c 	lsr.w	r5, r0, ip
 8000d84:	fa21 f30c 	lsr.w	r3, r1, ip
 8000d88:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000d8c:	4325      	orrs	r5, r4
 8000d8e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000d92:	0c2c      	lsrs	r4, r5, #16
 8000d94:	fb08 3319 	mls	r3, r8, r9, r3
 8000d98:	fa1f fa8e 	uxth.w	sl, lr
 8000d9c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000da0:	fb09 f40a 	mul.w	r4, r9, sl
 8000da4:	429c      	cmp	r4, r3
 8000da6:	fa02 f207 	lsl.w	r2, r2, r7
 8000daa:	fa00 f107 	lsl.w	r1, r0, r7
 8000dae:	d90b      	bls.n	8000dc8 <__udivmoddi4+0x1b0>
 8000db0:	eb1e 0303 	adds.w	r3, lr, r3
 8000db4:	f109 30ff 	add.w	r0, r9, #4294967295
 8000db8:	f080 8087 	bcs.w	8000eca <__udivmoddi4+0x2b2>
 8000dbc:	429c      	cmp	r4, r3
 8000dbe:	f240 8084 	bls.w	8000eca <__udivmoddi4+0x2b2>
 8000dc2:	f1a9 0902 	sub.w	r9, r9, #2
 8000dc6:	4473      	add	r3, lr
 8000dc8:	1b1b      	subs	r3, r3, r4
 8000dca:	b2ad      	uxth	r5, r5
 8000dcc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dd0:	fb08 3310 	mls	r3, r8, r0, r3
 8000dd4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000dd8:	fb00 fa0a 	mul.w	sl, r0, sl
 8000ddc:	45a2      	cmp	sl, r4
 8000dde:	d908      	bls.n	8000df2 <__udivmoddi4+0x1da>
 8000de0:	eb1e 0404 	adds.w	r4, lr, r4
 8000de4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000de8:	d26b      	bcs.n	8000ec2 <__udivmoddi4+0x2aa>
 8000dea:	45a2      	cmp	sl, r4
 8000dec:	d969      	bls.n	8000ec2 <__udivmoddi4+0x2aa>
 8000dee:	3802      	subs	r0, #2
 8000df0:	4474      	add	r4, lr
 8000df2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000df6:	fba0 8902 	umull	r8, r9, r0, r2
 8000dfa:	eba4 040a 	sub.w	r4, r4, sl
 8000dfe:	454c      	cmp	r4, r9
 8000e00:	46c2      	mov	sl, r8
 8000e02:	464b      	mov	r3, r9
 8000e04:	d354      	bcc.n	8000eb0 <__udivmoddi4+0x298>
 8000e06:	d051      	beq.n	8000eac <__udivmoddi4+0x294>
 8000e08:	2e00      	cmp	r6, #0
 8000e0a:	d069      	beq.n	8000ee0 <__udivmoddi4+0x2c8>
 8000e0c:	ebb1 050a 	subs.w	r5, r1, sl
 8000e10:	eb64 0403 	sbc.w	r4, r4, r3
 8000e14:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000e18:	40fd      	lsrs	r5, r7
 8000e1a:	40fc      	lsrs	r4, r7
 8000e1c:	ea4c 0505 	orr.w	r5, ip, r5
 8000e20:	e9c6 5400 	strd	r5, r4, [r6]
 8000e24:	2700      	movs	r7, #0
 8000e26:	e747      	b.n	8000cb8 <__udivmoddi4+0xa0>
 8000e28:	f1c2 0320 	rsb	r3, r2, #32
 8000e2c:	fa20 f703 	lsr.w	r7, r0, r3
 8000e30:	4095      	lsls	r5, r2
 8000e32:	fa01 f002 	lsl.w	r0, r1, r2
 8000e36:	fa21 f303 	lsr.w	r3, r1, r3
 8000e3a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e3e:	4338      	orrs	r0, r7
 8000e40:	0c01      	lsrs	r1, r0, #16
 8000e42:	fbb3 f7fe 	udiv	r7, r3, lr
 8000e46:	fa1f f885 	uxth.w	r8, r5
 8000e4a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000e4e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e52:	fb07 f308 	mul.w	r3, r7, r8
 8000e56:	428b      	cmp	r3, r1
 8000e58:	fa04 f402 	lsl.w	r4, r4, r2
 8000e5c:	d907      	bls.n	8000e6e <__udivmoddi4+0x256>
 8000e5e:	1869      	adds	r1, r5, r1
 8000e60:	f107 3cff 	add.w	ip, r7, #4294967295
 8000e64:	d22f      	bcs.n	8000ec6 <__udivmoddi4+0x2ae>
 8000e66:	428b      	cmp	r3, r1
 8000e68:	d92d      	bls.n	8000ec6 <__udivmoddi4+0x2ae>
 8000e6a:	3f02      	subs	r7, #2
 8000e6c:	4429      	add	r1, r5
 8000e6e:	1acb      	subs	r3, r1, r3
 8000e70:	b281      	uxth	r1, r0
 8000e72:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e76:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e7a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e7e:	fb00 f308 	mul.w	r3, r0, r8
 8000e82:	428b      	cmp	r3, r1
 8000e84:	d907      	bls.n	8000e96 <__udivmoddi4+0x27e>
 8000e86:	1869      	adds	r1, r5, r1
 8000e88:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e8c:	d217      	bcs.n	8000ebe <__udivmoddi4+0x2a6>
 8000e8e:	428b      	cmp	r3, r1
 8000e90:	d915      	bls.n	8000ebe <__udivmoddi4+0x2a6>
 8000e92:	3802      	subs	r0, #2
 8000e94:	4429      	add	r1, r5
 8000e96:	1ac9      	subs	r1, r1, r3
 8000e98:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000e9c:	e73b      	b.n	8000d16 <__udivmoddi4+0xfe>
 8000e9e:	4637      	mov	r7, r6
 8000ea0:	4630      	mov	r0, r6
 8000ea2:	e709      	b.n	8000cb8 <__udivmoddi4+0xa0>
 8000ea4:	4607      	mov	r7, r0
 8000ea6:	e6e7      	b.n	8000c78 <__udivmoddi4+0x60>
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	e6fb      	b.n	8000ca4 <__udivmoddi4+0x8c>
 8000eac:	4541      	cmp	r1, r8
 8000eae:	d2ab      	bcs.n	8000e08 <__udivmoddi4+0x1f0>
 8000eb0:	ebb8 0a02 	subs.w	sl, r8, r2
 8000eb4:	eb69 020e 	sbc.w	r2, r9, lr
 8000eb8:	3801      	subs	r0, #1
 8000eba:	4613      	mov	r3, r2
 8000ebc:	e7a4      	b.n	8000e08 <__udivmoddi4+0x1f0>
 8000ebe:	4660      	mov	r0, ip
 8000ec0:	e7e9      	b.n	8000e96 <__udivmoddi4+0x27e>
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	e795      	b.n	8000df2 <__udivmoddi4+0x1da>
 8000ec6:	4667      	mov	r7, ip
 8000ec8:	e7d1      	b.n	8000e6e <__udivmoddi4+0x256>
 8000eca:	4681      	mov	r9, r0
 8000ecc:	e77c      	b.n	8000dc8 <__udivmoddi4+0x1b0>
 8000ece:	3802      	subs	r0, #2
 8000ed0:	442c      	add	r4, r5
 8000ed2:	e747      	b.n	8000d64 <__udivmoddi4+0x14c>
 8000ed4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ed8:	442b      	add	r3, r5
 8000eda:	e72f      	b.n	8000d3c <__udivmoddi4+0x124>
 8000edc:	4638      	mov	r0, r7
 8000ede:	e708      	b.n	8000cf2 <__udivmoddi4+0xda>
 8000ee0:	4637      	mov	r7, r6
 8000ee2:	e6e9      	b.n	8000cb8 <__udivmoddi4+0xa0>

08000ee4 <__aeabi_idiv0>:
 8000ee4:	4770      	bx	lr
 8000ee6:	bf00      	nop

08000ee8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000eec:	4b0e      	ldr	r3, [pc, #56]	; (8000f28 <HAL_Init+0x40>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	4a0d      	ldr	r2, [pc, #52]	; (8000f28 <HAL_Init+0x40>)
 8000ef2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ef6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ef8:	4b0b      	ldr	r3, [pc, #44]	; (8000f28 <HAL_Init+0x40>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	4a0a      	ldr	r2, [pc, #40]	; (8000f28 <HAL_Init+0x40>)
 8000efe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f02:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f04:	4b08      	ldr	r3, [pc, #32]	; (8000f28 <HAL_Init+0x40>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	4a07      	ldr	r2, [pc, #28]	; (8000f28 <HAL_Init+0x40>)
 8000f0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f0e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f10:	2003      	movs	r0, #3
 8000f12:	f000 fd07 	bl	8001924 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f16:	2000      	movs	r0, #0
 8000f18:	f000 f808 	bl	8000f2c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f1c:	f008 fab6 	bl	800948c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f20:	2300      	movs	r3, #0
}
 8000f22:	4618      	mov	r0, r3
 8000f24:	bd80      	pop	{r7, pc}
 8000f26:	bf00      	nop
 8000f28:	40023c00 	.word	0x40023c00

08000f2c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b082      	sub	sp, #8
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f34:	4b12      	ldr	r3, [pc, #72]	; (8000f80 <HAL_InitTick+0x54>)
 8000f36:	681a      	ldr	r2, [r3, #0]
 8000f38:	4b12      	ldr	r3, [pc, #72]	; (8000f84 <HAL_InitTick+0x58>)
 8000f3a:	781b      	ldrb	r3, [r3, #0]
 8000f3c:	4619      	mov	r1, r3
 8000f3e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f42:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f46:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	f000 fd1f 	bl	800198e <HAL_SYSTICK_Config>
 8000f50:	4603      	mov	r3, r0
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d001      	beq.n	8000f5a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f56:	2301      	movs	r3, #1
 8000f58:	e00e      	b.n	8000f78 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	2b0f      	cmp	r3, #15
 8000f5e:	d80a      	bhi.n	8000f76 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f60:	2200      	movs	r2, #0
 8000f62:	6879      	ldr	r1, [r7, #4]
 8000f64:	f04f 30ff 	mov.w	r0, #4294967295
 8000f68:	f000 fce7 	bl	800193a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f6c:	4a06      	ldr	r2, [pc, #24]	; (8000f88 <HAL_InitTick+0x5c>)
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f72:	2300      	movs	r3, #0
 8000f74:	e000      	b.n	8000f78 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f76:	2301      	movs	r3, #1
}
 8000f78:	4618      	mov	r0, r3
 8000f7a:	3708      	adds	r7, #8
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bd80      	pop	{r7, pc}
 8000f80:	20000060 	.word	0x20000060
 8000f84:	20000004 	.word	0x20000004
 8000f88:	20000000 	.word	0x20000000

08000f8c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f90:	4b06      	ldr	r3, [pc, #24]	; (8000fac <HAL_IncTick+0x20>)
 8000f92:	781b      	ldrb	r3, [r3, #0]
 8000f94:	461a      	mov	r2, r3
 8000f96:	4b06      	ldr	r3, [pc, #24]	; (8000fb0 <HAL_IncTick+0x24>)
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	4413      	add	r3, r2
 8000f9c:	4a04      	ldr	r2, [pc, #16]	; (8000fb0 <HAL_IncTick+0x24>)
 8000f9e:	6013      	str	r3, [r2, #0]
}
 8000fa0:	bf00      	nop
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa8:	4770      	bx	lr
 8000faa:	bf00      	nop
 8000fac:	20000004 	.word	0x20000004
 8000fb0:	200000fc 	.word	0x200000fc

08000fb4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	af00      	add	r7, sp, #0
  return uwTick;
 8000fb8:	4b03      	ldr	r3, [pc, #12]	; (8000fc8 <HAL_GetTick+0x14>)
 8000fba:	681b      	ldr	r3, [r3, #0]
}
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc4:	4770      	bx	lr
 8000fc6:	bf00      	nop
 8000fc8:	200000fc 	.word	0x200000fc

08000fcc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b084      	sub	sp, #16
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fd4:	f7ff ffee 	bl	8000fb4 <HAL_GetTick>
 8000fd8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fe4:	d005      	beq.n	8000ff2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000fe6:	4b09      	ldr	r3, [pc, #36]	; (800100c <HAL_Delay+0x40>)
 8000fe8:	781b      	ldrb	r3, [r3, #0]
 8000fea:	461a      	mov	r2, r3
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	4413      	add	r3, r2
 8000ff0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000ff2:	bf00      	nop
 8000ff4:	f7ff ffde 	bl	8000fb4 <HAL_GetTick>
 8000ff8:	4602      	mov	r2, r0
 8000ffa:	68bb      	ldr	r3, [r7, #8]
 8000ffc:	1ad3      	subs	r3, r2, r3
 8000ffe:	68fa      	ldr	r2, [r7, #12]
 8001000:	429a      	cmp	r2, r3
 8001002:	d8f7      	bhi.n	8000ff4 <HAL_Delay+0x28>
  {
  }
}
 8001004:	bf00      	nop
 8001006:	3710      	adds	r7, #16
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}
 800100c:	20000004 	.word	0x20000004

08001010 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b084      	sub	sp, #16
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001018:	2300      	movs	r3, #0
 800101a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	2b00      	cmp	r3, #0
 8001020:	d101      	bne.n	8001026 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001022:	2301      	movs	r3, #1
 8001024:	e033      	b.n	800108e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800102a:	2b00      	cmp	r3, #0
 800102c:	d109      	bne.n	8001042 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800102e:	6878      	ldr	r0, [r7, #4]
 8001030:	f008 fa54 	bl	80094dc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	2200      	movs	r2, #0
 8001038:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	2200      	movs	r2, #0
 800103e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001046:	f003 0310 	and.w	r3, r3, #16
 800104a:	2b00      	cmp	r3, #0
 800104c:	d118      	bne.n	8001080 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001052:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001056:	f023 0302 	bic.w	r3, r3, #2
 800105a:	f043 0202 	orr.w	r2, r3, #2
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001062:	6878      	ldr	r0, [r7, #4]
 8001064:	f000 fa92 	bl	800158c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	2200      	movs	r2, #0
 800106c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001072:	f023 0303 	bic.w	r3, r3, #3
 8001076:	f043 0201 	orr.w	r2, r3, #1
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	641a      	str	r2, [r3, #64]	; 0x40
 800107e:	e001      	b.n	8001084 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001080:	2301      	movs	r3, #1
 8001082:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	2200      	movs	r2, #0
 8001088:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800108c:	7bfb      	ldrb	r3, [r7, #15]
}
 800108e:	4618      	mov	r0, r3
 8001090:	3710      	adds	r7, #16
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}
	...

08001098 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001098:	b480      	push	{r7}
 800109a:	b085      	sub	sp, #20
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80010a0:	2300      	movs	r3, #0
 80010a2:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80010aa:	2b01      	cmp	r3, #1
 80010ac:	d101      	bne.n	80010b2 <HAL_ADC_Start+0x1a>
 80010ae:	2302      	movs	r3, #2
 80010b0:	e0a5      	b.n	80011fe <HAL_ADC_Start+0x166>
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	2201      	movs	r2, #1
 80010b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	689b      	ldr	r3, [r3, #8]
 80010c0:	f003 0301 	and.w	r3, r3, #1
 80010c4:	2b01      	cmp	r3, #1
 80010c6:	d018      	beq.n	80010fa <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	689a      	ldr	r2, [r3, #8]
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	f042 0201 	orr.w	r2, r2, #1
 80010d6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80010d8:	4b4c      	ldr	r3, [pc, #304]	; (800120c <HAL_ADC_Start+0x174>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	4a4c      	ldr	r2, [pc, #304]	; (8001210 <HAL_ADC_Start+0x178>)
 80010de:	fba2 2303 	umull	r2, r3, r2, r3
 80010e2:	0c9a      	lsrs	r2, r3, #18
 80010e4:	4613      	mov	r3, r2
 80010e6:	005b      	lsls	r3, r3, #1
 80010e8:	4413      	add	r3, r2
 80010ea:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80010ec:	e002      	b.n	80010f4 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80010ee:	68bb      	ldr	r3, [r7, #8]
 80010f0:	3b01      	subs	r3, #1
 80010f2:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80010f4:	68bb      	ldr	r3, [r7, #8]
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d1f9      	bne.n	80010ee <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	689b      	ldr	r3, [r3, #8]
 8001100:	f003 0301 	and.w	r3, r3, #1
 8001104:	2b01      	cmp	r3, #1
 8001106:	d179      	bne.n	80011fc <HAL_ADC_Start+0x164>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800110c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001110:	f023 0301 	bic.w	r3, r3, #1
 8001114:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	685b      	ldr	r3, [r3, #4]
 8001122:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001126:	2b00      	cmp	r3, #0
 8001128:	d007      	beq.n	800113a <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800112e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001132:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800113e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001142:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001146:	d106      	bne.n	8001156 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800114c:	f023 0206 	bic.w	r2, r3, #6
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	645a      	str	r2, [r3, #68]	; 0x44
 8001154:	e002      	b.n	800115c <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	2200      	movs	r2, #0
 800115a:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	2200      	movs	r2, #0
 8001160:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001164:	4b2b      	ldr	r3, [pc, #172]	; (8001214 <HAL_ADC_Start+0x17c>)
 8001166:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001170:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	685b      	ldr	r3, [r3, #4]
 8001176:	f003 031f 	and.w	r3, r3, #31
 800117a:	2b00      	cmp	r3, #0
 800117c:	d12a      	bne.n	80011d4 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	4a25      	ldr	r2, [pc, #148]	; (8001218 <HAL_ADC_Start+0x180>)
 8001184:	4293      	cmp	r3, r2
 8001186:	d015      	beq.n	80011b4 <HAL_ADC_Start+0x11c>
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	4a23      	ldr	r2, [pc, #140]	; (800121c <HAL_ADC_Start+0x184>)
 800118e:	4293      	cmp	r3, r2
 8001190:	d105      	bne.n	800119e <HAL_ADC_Start+0x106>
 8001192:	4b20      	ldr	r3, [pc, #128]	; (8001214 <HAL_ADC_Start+0x17c>)
 8001194:	685b      	ldr	r3, [r3, #4]
 8001196:	f003 031f 	and.w	r3, r3, #31
 800119a:	2b00      	cmp	r3, #0
 800119c:	d00a      	beq.n	80011b4 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	4a1f      	ldr	r2, [pc, #124]	; (8001220 <HAL_ADC_Start+0x188>)
 80011a4:	4293      	cmp	r3, r2
 80011a6:	d129      	bne.n	80011fc <HAL_ADC_Start+0x164>
 80011a8:	4b1a      	ldr	r3, [pc, #104]	; (8001214 <HAL_ADC_Start+0x17c>)
 80011aa:	685b      	ldr	r3, [r3, #4]
 80011ac:	f003 031f 	and.w	r3, r3, #31
 80011b0:	2b0f      	cmp	r3, #15
 80011b2:	d823      	bhi.n	80011fc <HAL_ADC_Start+0x164>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	689b      	ldr	r3, [r3, #8]
 80011ba:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d11c      	bne.n	80011fc <HAL_ADC_Start+0x164>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	689a      	ldr	r2, [r3, #8]
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80011d0:	609a      	str	r2, [r3, #8]
 80011d2:	e013      	b.n	80011fc <HAL_ADC_Start+0x164>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	4a0f      	ldr	r2, [pc, #60]	; (8001218 <HAL_ADC_Start+0x180>)
 80011da:	4293      	cmp	r3, r2
 80011dc:	d10e      	bne.n	80011fc <HAL_ADC_Start+0x164>
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	689b      	ldr	r3, [r3, #8]
 80011e4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d107      	bne.n	80011fc <HAL_ADC_Start+0x164>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	689a      	ldr	r2, [r3, #8]
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80011fa:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 80011fc:	2300      	movs	r3, #0
}
 80011fe:	4618      	mov	r0, r3
 8001200:	3714      	adds	r7, #20
 8001202:	46bd      	mov	sp, r7
 8001204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001208:	4770      	bx	lr
 800120a:	bf00      	nop
 800120c:	20000060 	.word	0x20000060
 8001210:	431bde83 	.word	0x431bde83
 8001214:	40012300 	.word	0x40012300
 8001218:	40012000 	.word	0x40012000
 800121c:	40012100 	.word	0x40012100
 8001220:	40012200 	.word	0x40012200

08001224 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b084      	sub	sp, #16
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
 800122c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800122e:	2300      	movs	r3, #0
 8001230:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	689b      	ldr	r3, [r3, #8]
 8001238:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800123c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001240:	d113      	bne.n	800126a <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	689b      	ldr	r3, [r3, #8]
 8001248:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800124c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001250:	d10b      	bne.n	800126a <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001256:	f043 0220 	orr.w	r2, r3, #32
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	2200      	movs	r2, #0
 8001262:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8001266:	2301      	movs	r3, #1
 8001268:	e05c      	b.n	8001324 <HAL_ADC_PollForConversion+0x100>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 800126a:	f7ff fea3 	bl	8000fb4 <HAL_GetTick>
 800126e:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001270:	e01a      	b.n	80012a8 <HAL_ADC_PollForConversion+0x84>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001278:	d016      	beq.n	80012a8 <HAL_ADC_PollForConversion+0x84>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 800127a:	683b      	ldr	r3, [r7, #0]
 800127c:	2b00      	cmp	r3, #0
 800127e:	d007      	beq.n	8001290 <HAL_ADC_PollForConversion+0x6c>
 8001280:	f7ff fe98 	bl	8000fb4 <HAL_GetTick>
 8001284:	4602      	mov	r2, r0
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	1ad3      	subs	r3, r2, r3
 800128a:	683a      	ldr	r2, [r7, #0]
 800128c:	429a      	cmp	r2, r3
 800128e:	d20b      	bcs.n	80012a8 <HAL_ADC_PollForConversion+0x84>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001294:	f043 0204 	orr.w	r2, r3, #4
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	2200      	movs	r2, #0
 80012a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 80012a4:	2303      	movs	r3, #3
 80012a6:	e03d      	b.n	8001324 <HAL_ADC_PollForConversion+0x100>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	f003 0302 	and.w	r3, r3, #2
 80012b2:	2b02      	cmp	r3, #2
 80012b4:	d1dd      	bne.n	8001272 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	f06f 0212 	mvn.w	r2, #18
 80012be:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012c4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	689b      	ldr	r3, [r3, #8]
 80012d2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d123      	bne.n	8001322 <HAL_ADC_PollForConversion+0xfe>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d11f      	bne.n	8001322 <HAL_ADC_PollForConversion+0xfe>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012e8:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d006      	beq.n	80012fe <HAL_ADC_PollForConversion+0xda>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	689b      	ldr	r3, [r3, #8]
 80012f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d111      	bne.n	8001322 <HAL_ADC_PollForConversion+0xfe>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001302:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800130e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001312:	2b00      	cmp	r3, #0
 8001314:	d105      	bne.n	8001322 <HAL_ADC_PollForConversion+0xfe>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800131a:	f043 0201 	orr.w	r2, r3, #1
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001322:	2300      	movs	r3, #0
}
 8001324:	4618      	mov	r0, r3
 8001326:	3710      	adds	r7, #16
 8001328:	46bd      	mov	sp, r7
 800132a:	bd80      	pop	{r7, pc}

0800132c <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 800132c:	b480      	push	{r7}
 800132e:	b083      	sub	sp, #12
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800133a:	4618      	mov	r0, r3
 800133c:	370c      	adds	r7, #12
 800133e:	46bd      	mov	sp, r7
 8001340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001344:	4770      	bx	lr
	...

08001348 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001348:	b480      	push	{r7}
 800134a:	b085      	sub	sp, #20
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
 8001350:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001352:	2300      	movs	r3, #0
 8001354:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800135c:	2b01      	cmp	r3, #1
 800135e:	d101      	bne.n	8001364 <HAL_ADC_ConfigChannel+0x1c>
 8001360:	2302      	movs	r3, #2
 8001362:	e105      	b.n	8001570 <HAL_ADC_ConfigChannel+0x228>
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	2201      	movs	r2, #1
 8001368:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	2b09      	cmp	r3, #9
 8001372:	d925      	bls.n	80013c0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	68d9      	ldr	r1, [r3, #12]
 800137a:	683b      	ldr	r3, [r7, #0]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	b29b      	uxth	r3, r3
 8001380:	461a      	mov	r2, r3
 8001382:	4613      	mov	r3, r2
 8001384:	005b      	lsls	r3, r3, #1
 8001386:	4413      	add	r3, r2
 8001388:	3b1e      	subs	r3, #30
 800138a:	2207      	movs	r2, #7
 800138c:	fa02 f303 	lsl.w	r3, r2, r3
 8001390:	43da      	mvns	r2, r3
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	400a      	ands	r2, r1
 8001398:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	68d9      	ldr	r1, [r3, #12]
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	689a      	ldr	r2, [r3, #8]
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	b29b      	uxth	r3, r3
 80013aa:	4618      	mov	r0, r3
 80013ac:	4603      	mov	r3, r0
 80013ae:	005b      	lsls	r3, r3, #1
 80013b0:	4403      	add	r3, r0
 80013b2:	3b1e      	subs	r3, #30
 80013b4:	409a      	lsls	r2, r3
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	430a      	orrs	r2, r1
 80013bc:	60da      	str	r2, [r3, #12]
 80013be:	e022      	b.n	8001406 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	6919      	ldr	r1, [r3, #16]
 80013c6:	683b      	ldr	r3, [r7, #0]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	b29b      	uxth	r3, r3
 80013cc:	461a      	mov	r2, r3
 80013ce:	4613      	mov	r3, r2
 80013d0:	005b      	lsls	r3, r3, #1
 80013d2:	4413      	add	r3, r2
 80013d4:	2207      	movs	r2, #7
 80013d6:	fa02 f303 	lsl.w	r3, r2, r3
 80013da:	43da      	mvns	r2, r3
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	400a      	ands	r2, r1
 80013e2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	6919      	ldr	r1, [r3, #16]
 80013ea:	683b      	ldr	r3, [r7, #0]
 80013ec:	689a      	ldr	r2, [r3, #8]
 80013ee:	683b      	ldr	r3, [r7, #0]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	b29b      	uxth	r3, r3
 80013f4:	4618      	mov	r0, r3
 80013f6:	4603      	mov	r3, r0
 80013f8:	005b      	lsls	r3, r3, #1
 80013fa:	4403      	add	r3, r0
 80013fc:	409a      	lsls	r2, r3
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	430a      	orrs	r2, r1
 8001404:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001406:	683b      	ldr	r3, [r7, #0]
 8001408:	685b      	ldr	r3, [r3, #4]
 800140a:	2b06      	cmp	r3, #6
 800140c:	d824      	bhi.n	8001458 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	685a      	ldr	r2, [r3, #4]
 8001418:	4613      	mov	r3, r2
 800141a:	009b      	lsls	r3, r3, #2
 800141c:	4413      	add	r3, r2
 800141e:	3b05      	subs	r3, #5
 8001420:	221f      	movs	r2, #31
 8001422:	fa02 f303 	lsl.w	r3, r2, r3
 8001426:	43da      	mvns	r2, r3
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	400a      	ands	r2, r1
 800142e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	b29b      	uxth	r3, r3
 800143c:	4618      	mov	r0, r3
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	685a      	ldr	r2, [r3, #4]
 8001442:	4613      	mov	r3, r2
 8001444:	009b      	lsls	r3, r3, #2
 8001446:	4413      	add	r3, r2
 8001448:	3b05      	subs	r3, #5
 800144a:	fa00 f203 	lsl.w	r2, r0, r3
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	430a      	orrs	r2, r1
 8001454:	635a      	str	r2, [r3, #52]	; 0x34
 8001456:	e04c      	b.n	80014f2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	685b      	ldr	r3, [r3, #4]
 800145c:	2b0c      	cmp	r3, #12
 800145e:	d824      	bhi.n	80014aa <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001466:	683b      	ldr	r3, [r7, #0]
 8001468:	685a      	ldr	r2, [r3, #4]
 800146a:	4613      	mov	r3, r2
 800146c:	009b      	lsls	r3, r3, #2
 800146e:	4413      	add	r3, r2
 8001470:	3b23      	subs	r3, #35	; 0x23
 8001472:	221f      	movs	r2, #31
 8001474:	fa02 f303 	lsl.w	r3, r2, r3
 8001478:	43da      	mvns	r2, r3
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	400a      	ands	r2, r1
 8001480:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	b29b      	uxth	r3, r3
 800148e:	4618      	mov	r0, r3
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	685a      	ldr	r2, [r3, #4]
 8001494:	4613      	mov	r3, r2
 8001496:	009b      	lsls	r3, r3, #2
 8001498:	4413      	add	r3, r2
 800149a:	3b23      	subs	r3, #35	; 0x23
 800149c:	fa00 f203 	lsl.w	r2, r0, r3
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	430a      	orrs	r2, r1
 80014a6:	631a      	str	r2, [r3, #48]	; 0x30
 80014a8:	e023      	b.n	80014f2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	685a      	ldr	r2, [r3, #4]
 80014b4:	4613      	mov	r3, r2
 80014b6:	009b      	lsls	r3, r3, #2
 80014b8:	4413      	add	r3, r2
 80014ba:	3b41      	subs	r3, #65	; 0x41
 80014bc:	221f      	movs	r2, #31
 80014be:	fa02 f303 	lsl.w	r3, r2, r3
 80014c2:	43da      	mvns	r2, r3
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	400a      	ands	r2, r1
 80014ca:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	b29b      	uxth	r3, r3
 80014d8:	4618      	mov	r0, r3
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	685a      	ldr	r2, [r3, #4]
 80014de:	4613      	mov	r3, r2
 80014e0:	009b      	lsls	r3, r3, #2
 80014e2:	4413      	add	r3, r2
 80014e4:	3b41      	subs	r3, #65	; 0x41
 80014e6:	fa00 f203 	lsl.w	r2, r0, r3
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	430a      	orrs	r2, r1
 80014f0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80014f2:	4b22      	ldr	r3, [pc, #136]	; (800157c <HAL_ADC_ConfigChannel+0x234>)
 80014f4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	4a21      	ldr	r2, [pc, #132]	; (8001580 <HAL_ADC_ConfigChannel+0x238>)
 80014fc:	4293      	cmp	r3, r2
 80014fe:	d109      	bne.n	8001514 <HAL_ADC_ConfigChannel+0x1cc>
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	2b12      	cmp	r3, #18
 8001506:	d105      	bne.n	8001514 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	685b      	ldr	r3, [r3, #4]
 800150c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	4a19      	ldr	r2, [pc, #100]	; (8001580 <HAL_ADC_ConfigChannel+0x238>)
 800151a:	4293      	cmp	r3, r2
 800151c:	d123      	bne.n	8001566 <HAL_ADC_ConfigChannel+0x21e>
 800151e:	683b      	ldr	r3, [r7, #0]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	2b10      	cmp	r3, #16
 8001524:	d003      	beq.n	800152e <HAL_ADC_ConfigChannel+0x1e6>
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	2b11      	cmp	r3, #17
 800152c:	d11b      	bne.n	8001566 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	685b      	ldr	r3, [r3, #4]
 8001532:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	2b10      	cmp	r3, #16
 8001540:	d111      	bne.n	8001566 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001542:	4b10      	ldr	r3, [pc, #64]	; (8001584 <HAL_ADC_ConfigChannel+0x23c>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	4a10      	ldr	r2, [pc, #64]	; (8001588 <HAL_ADC_ConfigChannel+0x240>)
 8001548:	fba2 2303 	umull	r2, r3, r2, r3
 800154c:	0c9a      	lsrs	r2, r3, #18
 800154e:	4613      	mov	r3, r2
 8001550:	009b      	lsls	r3, r3, #2
 8001552:	4413      	add	r3, r2
 8001554:	005b      	lsls	r3, r3, #1
 8001556:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001558:	e002      	b.n	8001560 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800155a:	68bb      	ldr	r3, [r7, #8]
 800155c:	3b01      	subs	r3, #1
 800155e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001560:	68bb      	ldr	r3, [r7, #8]
 8001562:	2b00      	cmp	r3, #0
 8001564:	d1f9      	bne.n	800155a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	2200      	movs	r2, #0
 800156a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800156e:	2300      	movs	r3, #0
}
 8001570:	4618      	mov	r0, r3
 8001572:	3714      	adds	r7, #20
 8001574:	46bd      	mov	sp, r7
 8001576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157a:	4770      	bx	lr
 800157c:	40012300 	.word	0x40012300
 8001580:	40012000 	.word	0x40012000
 8001584:	20000060 	.word	0x20000060
 8001588:	431bde83 	.word	0x431bde83

0800158c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800158c:	b480      	push	{r7}
 800158e:	b085      	sub	sp, #20
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001594:	4b79      	ldr	r3, [pc, #484]	; (800177c <ADC_Init+0x1f0>)
 8001596:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	685b      	ldr	r3, [r3, #4]
 800159c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	685a      	ldr	r2, [r3, #4]
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	685b      	ldr	r3, [r3, #4]
 80015ac:	431a      	orrs	r2, r3
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	685a      	ldr	r2, [r3, #4]
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80015c0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	6859      	ldr	r1, [r3, #4]
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	691b      	ldr	r3, [r3, #16]
 80015cc:	021a      	lsls	r2, r3, #8
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	430a      	orrs	r2, r1
 80015d4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	685a      	ldr	r2, [r3, #4]
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80015e4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	6859      	ldr	r1, [r3, #4]
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	689a      	ldr	r2, [r3, #8]
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	430a      	orrs	r2, r1
 80015f6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	689a      	ldr	r2, [r3, #8]
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001606:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	6899      	ldr	r1, [r3, #8]
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	68da      	ldr	r2, [r3, #12]
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	430a      	orrs	r2, r1
 8001618:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800161e:	4a58      	ldr	r2, [pc, #352]	; (8001780 <ADC_Init+0x1f4>)
 8001620:	4293      	cmp	r3, r2
 8001622:	d022      	beq.n	800166a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	689a      	ldr	r2, [r3, #8]
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001632:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	6899      	ldr	r1, [r3, #8]
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	430a      	orrs	r2, r1
 8001644:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	689a      	ldr	r2, [r3, #8]
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001654:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	6899      	ldr	r1, [r3, #8]
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	430a      	orrs	r2, r1
 8001666:	609a      	str	r2, [r3, #8]
 8001668:	e00f      	b.n	800168a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	689a      	ldr	r2, [r3, #8]
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001678:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	689a      	ldr	r2, [r3, #8]
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001688:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	689a      	ldr	r2, [r3, #8]
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f022 0202 	bic.w	r2, r2, #2
 8001698:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	6899      	ldr	r1, [r3, #8]
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	7e1b      	ldrb	r3, [r3, #24]
 80016a4:	005a      	lsls	r2, r3, #1
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	430a      	orrs	r2, r1
 80016ac:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d01b      	beq.n	80016f0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	685a      	ldr	r2, [r3, #4]
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80016c6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	685a      	ldr	r2, [r3, #4]
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80016d6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	6859      	ldr	r1, [r3, #4]
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016e2:	3b01      	subs	r3, #1
 80016e4:	035a      	lsls	r2, r3, #13
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	430a      	orrs	r2, r1
 80016ec:	605a      	str	r2, [r3, #4]
 80016ee:	e007      	b.n	8001700 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	685a      	ldr	r2, [r3, #4]
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80016fe:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800170e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	69db      	ldr	r3, [r3, #28]
 800171a:	3b01      	subs	r3, #1
 800171c:	051a      	lsls	r2, r3, #20
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	430a      	orrs	r2, r1
 8001724:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	689a      	ldr	r2, [r3, #8]
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001734:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	6899      	ldr	r1, [r3, #8]
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001742:	025a      	lsls	r2, r3, #9
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	430a      	orrs	r2, r1
 800174a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	689a      	ldr	r2, [r3, #8]
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800175a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	6899      	ldr	r1, [r3, #8]
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	695b      	ldr	r3, [r3, #20]
 8001766:	029a      	lsls	r2, r3, #10
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	430a      	orrs	r2, r1
 800176e:	609a      	str	r2, [r3, #8]
}
 8001770:	bf00      	nop
 8001772:	3714      	adds	r7, #20
 8001774:	46bd      	mov	sp, r7
 8001776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177a:	4770      	bx	lr
 800177c:	40012300 	.word	0x40012300
 8001780:	0f000001 	.word	0x0f000001

08001784 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001784:	b480      	push	{r7}
 8001786:	b085      	sub	sp, #20
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	f003 0307 	and.w	r3, r3, #7
 8001792:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001794:	4b0c      	ldr	r3, [pc, #48]	; (80017c8 <__NVIC_SetPriorityGrouping+0x44>)
 8001796:	68db      	ldr	r3, [r3, #12]
 8001798:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800179a:	68ba      	ldr	r2, [r7, #8]
 800179c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017a0:	4013      	ands	r3, r2
 80017a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017a8:	68bb      	ldr	r3, [r7, #8]
 80017aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80017b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017b6:	4a04      	ldr	r2, [pc, #16]	; (80017c8 <__NVIC_SetPriorityGrouping+0x44>)
 80017b8:	68bb      	ldr	r3, [r7, #8]
 80017ba:	60d3      	str	r3, [r2, #12]
}
 80017bc:	bf00      	nop
 80017be:	3714      	adds	r7, #20
 80017c0:	46bd      	mov	sp, r7
 80017c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c6:	4770      	bx	lr
 80017c8:	e000ed00 	.word	0xe000ed00

080017cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017cc:	b480      	push	{r7}
 80017ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017d0:	4b04      	ldr	r3, [pc, #16]	; (80017e4 <__NVIC_GetPriorityGrouping+0x18>)
 80017d2:	68db      	ldr	r3, [r3, #12]
 80017d4:	0a1b      	lsrs	r3, r3, #8
 80017d6:	f003 0307 	and.w	r3, r3, #7
}
 80017da:	4618      	mov	r0, r3
 80017dc:	46bd      	mov	sp, r7
 80017de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e2:	4770      	bx	lr
 80017e4:	e000ed00 	.word	0xe000ed00

080017e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017e8:	b480      	push	{r7}
 80017ea:	b083      	sub	sp, #12
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	4603      	mov	r3, r0
 80017f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	db0b      	blt.n	8001812 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017fa:	79fb      	ldrb	r3, [r7, #7]
 80017fc:	f003 021f 	and.w	r2, r3, #31
 8001800:	4907      	ldr	r1, [pc, #28]	; (8001820 <__NVIC_EnableIRQ+0x38>)
 8001802:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001806:	095b      	lsrs	r3, r3, #5
 8001808:	2001      	movs	r0, #1
 800180a:	fa00 f202 	lsl.w	r2, r0, r2
 800180e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001812:	bf00      	nop
 8001814:	370c      	adds	r7, #12
 8001816:	46bd      	mov	sp, r7
 8001818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181c:	4770      	bx	lr
 800181e:	bf00      	nop
 8001820:	e000e100 	.word	0xe000e100

08001824 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001824:	b480      	push	{r7}
 8001826:	b083      	sub	sp, #12
 8001828:	af00      	add	r7, sp, #0
 800182a:	4603      	mov	r3, r0
 800182c:	6039      	str	r1, [r7, #0]
 800182e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001830:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001834:	2b00      	cmp	r3, #0
 8001836:	db0a      	blt.n	800184e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	b2da      	uxtb	r2, r3
 800183c:	490c      	ldr	r1, [pc, #48]	; (8001870 <__NVIC_SetPriority+0x4c>)
 800183e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001842:	0112      	lsls	r2, r2, #4
 8001844:	b2d2      	uxtb	r2, r2
 8001846:	440b      	add	r3, r1
 8001848:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800184c:	e00a      	b.n	8001864 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800184e:	683b      	ldr	r3, [r7, #0]
 8001850:	b2da      	uxtb	r2, r3
 8001852:	4908      	ldr	r1, [pc, #32]	; (8001874 <__NVIC_SetPriority+0x50>)
 8001854:	79fb      	ldrb	r3, [r7, #7]
 8001856:	f003 030f 	and.w	r3, r3, #15
 800185a:	3b04      	subs	r3, #4
 800185c:	0112      	lsls	r2, r2, #4
 800185e:	b2d2      	uxtb	r2, r2
 8001860:	440b      	add	r3, r1
 8001862:	761a      	strb	r2, [r3, #24]
}
 8001864:	bf00      	nop
 8001866:	370c      	adds	r7, #12
 8001868:	46bd      	mov	sp, r7
 800186a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186e:	4770      	bx	lr
 8001870:	e000e100 	.word	0xe000e100
 8001874:	e000ed00 	.word	0xe000ed00

08001878 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001878:	b480      	push	{r7}
 800187a:	b089      	sub	sp, #36	; 0x24
 800187c:	af00      	add	r7, sp, #0
 800187e:	60f8      	str	r0, [r7, #12]
 8001880:	60b9      	str	r1, [r7, #8]
 8001882:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	f003 0307 	and.w	r3, r3, #7
 800188a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800188c:	69fb      	ldr	r3, [r7, #28]
 800188e:	f1c3 0307 	rsb	r3, r3, #7
 8001892:	2b04      	cmp	r3, #4
 8001894:	bf28      	it	cs
 8001896:	2304      	movcs	r3, #4
 8001898:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800189a:	69fb      	ldr	r3, [r7, #28]
 800189c:	3304      	adds	r3, #4
 800189e:	2b06      	cmp	r3, #6
 80018a0:	d902      	bls.n	80018a8 <NVIC_EncodePriority+0x30>
 80018a2:	69fb      	ldr	r3, [r7, #28]
 80018a4:	3b03      	subs	r3, #3
 80018a6:	e000      	b.n	80018aa <NVIC_EncodePriority+0x32>
 80018a8:	2300      	movs	r3, #0
 80018aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018ac:	f04f 32ff 	mov.w	r2, #4294967295
 80018b0:	69bb      	ldr	r3, [r7, #24]
 80018b2:	fa02 f303 	lsl.w	r3, r2, r3
 80018b6:	43da      	mvns	r2, r3
 80018b8:	68bb      	ldr	r3, [r7, #8]
 80018ba:	401a      	ands	r2, r3
 80018bc:	697b      	ldr	r3, [r7, #20]
 80018be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018c0:	f04f 31ff 	mov.w	r1, #4294967295
 80018c4:	697b      	ldr	r3, [r7, #20]
 80018c6:	fa01 f303 	lsl.w	r3, r1, r3
 80018ca:	43d9      	mvns	r1, r3
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018d0:	4313      	orrs	r3, r2
         );
}
 80018d2:	4618      	mov	r0, r3
 80018d4:	3724      	adds	r7, #36	; 0x24
 80018d6:	46bd      	mov	sp, r7
 80018d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018dc:	4770      	bx	lr
	...

080018e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b082      	sub	sp, #8
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	3b01      	subs	r3, #1
 80018ec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80018f0:	d301      	bcc.n	80018f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018f2:	2301      	movs	r3, #1
 80018f4:	e00f      	b.n	8001916 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018f6:	4a0a      	ldr	r2, [pc, #40]	; (8001920 <SysTick_Config+0x40>)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	3b01      	subs	r3, #1
 80018fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018fe:	210f      	movs	r1, #15
 8001900:	f04f 30ff 	mov.w	r0, #4294967295
 8001904:	f7ff ff8e 	bl	8001824 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001908:	4b05      	ldr	r3, [pc, #20]	; (8001920 <SysTick_Config+0x40>)
 800190a:	2200      	movs	r2, #0
 800190c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800190e:	4b04      	ldr	r3, [pc, #16]	; (8001920 <SysTick_Config+0x40>)
 8001910:	2207      	movs	r2, #7
 8001912:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001914:	2300      	movs	r3, #0
}
 8001916:	4618      	mov	r0, r3
 8001918:	3708      	adds	r7, #8
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}
 800191e:	bf00      	nop
 8001920:	e000e010 	.word	0xe000e010

08001924 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b082      	sub	sp, #8
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800192c:	6878      	ldr	r0, [r7, #4]
 800192e:	f7ff ff29 	bl	8001784 <__NVIC_SetPriorityGrouping>
}
 8001932:	bf00      	nop
 8001934:	3708      	adds	r7, #8
 8001936:	46bd      	mov	sp, r7
 8001938:	bd80      	pop	{r7, pc}

0800193a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800193a:	b580      	push	{r7, lr}
 800193c:	b086      	sub	sp, #24
 800193e:	af00      	add	r7, sp, #0
 8001940:	4603      	mov	r3, r0
 8001942:	60b9      	str	r1, [r7, #8]
 8001944:	607a      	str	r2, [r7, #4]
 8001946:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001948:	2300      	movs	r3, #0
 800194a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800194c:	f7ff ff3e 	bl	80017cc <__NVIC_GetPriorityGrouping>
 8001950:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001952:	687a      	ldr	r2, [r7, #4]
 8001954:	68b9      	ldr	r1, [r7, #8]
 8001956:	6978      	ldr	r0, [r7, #20]
 8001958:	f7ff ff8e 	bl	8001878 <NVIC_EncodePriority>
 800195c:	4602      	mov	r2, r0
 800195e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001962:	4611      	mov	r1, r2
 8001964:	4618      	mov	r0, r3
 8001966:	f7ff ff5d 	bl	8001824 <__NVIC_SetPriority>
}
 800196a:	bf00      	nop
 800196c:	3718      	adds	r7, #24
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}

08001972 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001972:	b580      	push	{r7, lr}
 8001974:	b082      	sub	sp, #8
 8001976:	af00      	add	r7, sp, #0
 8001978:	4603      	mov	r3, r0
 800197a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800197c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001980:	4618      	mov	r0, r3
 8001982:	f7ff ff31 	bl	80017e8 <__NVIC_EnableIRQ>
}
 8001986:	bf00      	nop
 8001988:	3708      	adds	r7, #8
 800198a:	46bd      	mov	sp, r7
 800198c:	bd80      	pop	{r7, pc}

0800198e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800198e:	b580      	push	{r7, lr}
 8001990:	b082      	sub	sp, #8
 8001992:	af00      	add	r7, sp, #0
 8001994:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001996:	6878      	ldr	r0, [r7, #4]
 8001998:	f7ff ffa2 	bl	80018e0 <SysTick_Config>
 800199c:	4603      	mov	r3, r0
}
 800199e:	4618      	mov	r0, r3
 80019a0:	3708      	adds	r7, #8
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}
	...

080019a8 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b086      	sub	sp, #24
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	60f8      	str	r0, [r7, #12]
 80019b0:	60b9      	str	r1, [r7, #8]
 80019b2:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 80019b6:	2301      	movs	r3, #1
 80019b8:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80019ba:	4b23      	ldr	r3, [pc, #140]	; (8001a48 <HAL_FLASH_Program+0xa0>)
 80019bc:	7e1b      	ldrb	r3, [r3, #24]
 80019be:	2b01      	cmp	r3, #1
 80019c0:	d101      	bne.n	80019c6 <HAL_FLASH_Program+0x1e>
 80019c2:	2302      	movs	r3, #2
 80019c4:	e03b      	b.n	8001a3e <HAL_FLASH_Program+0x96>
 80019c6:	4b20      	ldr	r3, [pc, #128]	; (8001a48 <HAL_FLASH_Program+0xa0>)
 80019c8:	2201      	movs	r2, #1
 80019ca:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80019cc:	f24c 3050 	movw	r0, #50000	; 0xc350
 80019d0:	f000 f870 	bl	8001ab4 <FLASH_WaitForLastOperation>
 80019d4:	4603      	mov	r3, r0
 80019d6:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 80019d8:	7dfb      	ldrb	r3, [r7, #23]
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d12b      	bne.n	8001a36 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d105      	bne.n	80019f0 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 80019e4:	783b      	ldrb	r3, [r7, #0]
 80019e6:	4619      	mov	r1, r3
 80019e8:	68b8      	ldr	r0, [r7, #8]
 80019ea:	f000 f917 	bl	8001c1c <FLASH_Program_Byte>
 80019ee:	e016      	b.n	8001a1e <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	2b01      	cmp	r3, #1
 80019f4:	d105      	bne.n	8001a02 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 80019f6:	883b      	ldrh	r3, [r7, #0]
 80019f8:	4619      	mov	r1, r3
 80019fa:	68b8      	ldr	r0, [r7, #8]
 80019fc:	f000 f8ea 	bl	8001bd4 <FLASH_Program_HalfWord>
 8001a00:	e00d      	b.n	8001a1e <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	2b02      	cmp	r3, #2
 8001a06:	d105      	bne.n	8001a14 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	4619      	mov	r1, r3
 8001a0c:	68b8      	ldr	r0, [r7, #8]
 8001a0e:	f000 f8bf 	bl	8001b90 <FLASH_Program_Word>
 8001a12:	e004      	b.n	8001a1e <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8001a14:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001a18:	68b8      	ldr	r0, [r7, #8]
 8001a1a:	f000 f88b 	bl	8001b34 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001a1e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001a22:	f000 f847 	bl	8001ab4 <FLASH_WaitForLastOperation>
 8001a26:	4603      	mov	r3, r0
 8001a28:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8001a2a:	4b08      	ldr	r3, [pc, #32]	; (8001a4c <HAL_FLASH_Program+0xa4>)
 8001a2c:	691b      	ldr	r3, [r3, #16]
 8001a2e:	4a07      	ldr	r2, [pc, #28]	; (8001a4c <HAL_FLASH_Program+0xa4>)
 8001a30:	f023 0301 	bic.w	r3, r3, #1
 8001a34:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001a36:	4b04      	ldr	r3, [pc, #16]	; (8001a48 <HAL_FLASH_Program+0xa0>)
 8001a38:	2200      	movs	r2, #0
 8001a3a:	761a      	strb	r2, [r3, #24]
  
  return status;
 8001a3c:	7dfb      	ldrb	r3, [r7, #23]
}
 8001a3e:	4618      	mov	r0, r3
 8001a40:	3718      	adds	r7, #24
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd80      	pop	{r7, pc}
 8001a46:	bf00      	nop
 8001a48:	20000100 	.word	0x20000100
 8001a4c:	40023c00 	.word	0x40023c00

08001a50 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8001a50:	b480      	push	{r7}
 8001a52:	b083      	sub	sp, #12
 8001a54:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8001a56:	2300      	movs	r3, #0
 8001a58:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001a5a:	4b0b      	ldr	r3, [pc, #44]	; (8001a88 <HAL_FLASH_Unlock+0x38>)
 8001a5c:	691b      	ldr	r3, [r3, #16]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	da0b      	bge.n	8001a7a <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8001a62:	4b09      	ldr	r3, [pc, #36]	; (8001a88 <HAL_FLASH_Unlock+0x38>)
 8001a64:	4a09      	ldr	r2, [pc, #36]	; (8001a8c <HAL_FLASH_Unlock+0x3c>)
 8001a66:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8001a68:	4b07      	ldr	r3, [pc, #28]	; (8001a88 <HAL_FLASH_Unlock+0x38>)
 8001a6a:	4a09      	ldr	r2, [pc, #36]	; (8001a90 <HAL_FLASH_Unlock+0x40>)
 8001a6c:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001a6e:	4b06      	ldr	r3, [pc, #24]	; (8001a88 <HAL_FLASH_Unlock+0x38>)
 8001a70:	691b      	ldr	r3, [r3, #16]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	da01      	bge.n	8001a7a <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8001a76:	2301      	movs	r3, #1
 8001a78:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8001a7a:	79fb      	ldrb	r3, [r7, #7]
}
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	370c      	adds	r7, #12
 8001a80:	46bd      	mov	sp, r7
 8001a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a86:	4770      	bx	lr
 8001a88:	40023c00 	.word	0x40023c00
 8001a8c:	45670123 	.word	0x45670123
 8001a90:	cdef89ab 	.word	0xcdef89ab

08001a94 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8001a94:	b480      	push	{r7}
 8001a96:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8001a98:	4b05      	ldr	r3, [pc, #20]	; (8001ab0 <HAL_FLASH_Lock+0x1c>)
 8001a9a:	691b      	ldr	r3, [r3, #16]
 8001a9c:	4a04      	ldr	r2, [pc, #16]	; (8001ab0 <HAL_FLASH_Lock+0x1c>)
 8001a9e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001aa2:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8001aa4:	2300      	movs	r3, #0
}
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aae:	4770      	bx	lr
 8001ab0:	40023c00 	.word	0x40023c00

08001ab4 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b084      	sub	sp, #16
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001abc:	2300      	movs	r3, #0
 8001abe:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001ac0:	4b1a      	ldr	r3, [pc, #104]	; (8001b2c <FLASH_WaitForLastOperation+0x78>)
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8001ac6:	f7ff fa75 	bl	8000fb4 <HAL_GetTick>
 8001aca:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8001acc:	e010      	b.n	8001af0 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ad4:	d00c      	beq.n	8001af0 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d007      	beq.n	8001aec <FLASH_WaitForLastOperation+0x38>
 8001adc:	f7ff fa6a 	bl	8000fb4 <HAL_GetTick>
 8001ae0:	4602      	mov	r2, r0
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	1ad3      	subs	r3, r2, r3
 8001ae6:	687a      	ldr	r2, [r7, #4]
 8001ae8:	429a      	cmp	r2, r3
 8001aea:	d201      	bcs.n	8001af0 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8001aec:	2303      	movs	r3, #3
 8001aee:	e019      	b.n	8001b24 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8001af0:	4b0f      	ldr	r3, [pc, #60]	; (8001b30 <FLASH_WaitForLastOperation+0x7c>)
 8001af2:	68db      	ldr	r3, [r3, #12]
 8001af4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d1e8      	bne.n	8001ace <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8001afc:	4b0c      	ldr	r3, [pc, #48]	; (8001b30 <FLASH_WaitForLastOperation+0x7c>)
 8001afe:	68db      	ldr	r3, [r3, #12]
 8001b00:	f003 0301 	and.w	r3, r3, #1
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d002      	beq.n	8001b0e <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8001b08:	4b09      	ldr	r3, [pc, #36]	; (8001b30 <FLASH_WaitForLastOperation+0x7c>)
 8001b0a:	2201      	movs	r2, #1
 8001b0c:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8001b0e:	4b08      	ldr	r3, [pc, #32]	; (8001b30 <FLASH_WaitForLastOperation+0x7c>)
 8001b10:	68db      	ldr	r3, [r3, #12]
 8001b12:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d003      	beq.n	8001b22 <FLASH_WaitForLastOperation+0x6e>
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8001b1a:	f000 f8a1 	bl	8001c60 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8001b1e:	2301      	movs	r3, #1
 8001b20:	e000      	b.n	8001b24 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8001b22:	2300      	movs	r3, #0
  
}  
 8001b24:	4618      	mov	r0, r3
 8001b26:	3710      	adds	r7, #16
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bd80      	pop	{r7, pc}
 8001b2c:	20000100 	.word	0x20000100
 8001b30:	40023c00 	.word	0x40023c00

08001b34 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8001b34:	b490      	push	{r4, r7}
 8001b36:	b084      	sub	sp, #16
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	60f8      	str	r0, [r7, #12]
 8001b3c:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001b40:	4b12      	ldr	r3, [pc, #72]	; (8001b8c <FLASH_Program_DoubleWord+0x58>)
 8001b42:	691b      	ldr	r3, [r3, #16]
 8001b44:	4a11      	ldr	r2, [pc, #68]	; (8001b8c <FLASH_Program_DoubleWord+0x58>)
 8001b46:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001b4a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8001b4c:	4b0f      	ldr	r3, [pc, #60]	; (8001b8c <FLASH_Program_DoubleWord+0x58>)
 8001b4e:	691b      	ldr	r3, [r3, #16]
 8001b50:	4a0e      	ldr	r2, [pc, #56]	; (8001b8c <FLASH_Program_DoubleWord+0x58>)
 8001b52:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8001b56:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001b58:	4b0c      	ldr	r3, [pc, #48]	; (8001b8c <FLASH_Program_DoubleWord+0x58>)
 8001b5a:	691b      	ldr	r3, [r3, #16]
 8001b5c:	4a0b      	ldr	r2, [pc, #44]	; (8001b8c <FLASH_Program_DoubleWord+0x58>)
 8001b5e:	f043 0301 	orr.w	r3, r3, #1
 8001b62:	6113      	str	r3, [r2, #16]

  /* Program the double-word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	683a      	ldr	r2, [r7, #0]
 8001b68:	601a      	str	r2, [r3, #0]
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8001b6a:	e9d7 1200 	ldrd	r1, r2, [r7]
 8001b6e:	f04f 0300 	mov.w	r3, #0
 8001b72:	f04f 0400 	mov.w	r4, #0
 8001b76:	0013      	movs	r3, r2
 8001b78:	2400      	movs	r4, #0
 8001b7a:	68fa      	ldr	r2, [r7, #12]
 8001b7c:	3204      	adds	r2, #4
 8001b7e:	6013      	str	r3, [r2, #0]
}
 8001b80:	bf00      	nop
 8001b82:	3710      	adds	r7, #16
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bc90      	pop	{r4, r7}
 8001b88:	4770      	bx	lr
 8001b8a:	bf00      	nop
 8001b8c:	40023c00 	.word	0x40023c00

08001b90 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8001b90:	b480      	push	{r7}
 8001b92:	b083      	sub	sp, #12
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
 8001b98:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001b9a:	4b0d      	ldr	r3, [pc, #52]	; (8001bd0 <FLASH_Program_Word+0x40>)
 8001b9c:	691b      	ldr	r3, [r3, #16]
 8001b9e:	4a0c      	ldr	r2, [pc, #48]	; (8001bd0 <FLASH_Program_Word+0x40>)
 8001ba0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001ba4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8001ba6:	4b0a      	ldr	r3, [pc, #40]	; (8001bd0 <FLASH_Program_Word+0x40>)
 8001ba8:	691b      	ldr	r3, [r3, #16]
 8001baa:	4a09      	ldr	r2, [pc, #36]	; (8001bd0 <FLASH_Program_Word+0x40>)
 8001bac:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001bb0:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001bb2:	4b07      	ldr	r3, [pc, #28]	; (8001bd0 <FLASH_Program_Word+0x40>)
 8001bb4:	691b      	ldr	r3, [r3, #16]
 8001bb6:	4a06      	ldr	r2, [pc, #24]	; (8001bd0 <FLASH_Program_Word+0x40>)
 8001bb8:	f043 0301 	orr.w	r3, r3, #1
 8001bbc:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	683a      	ldr	r2, [r7, #0]
 8001bc2:	601a      	str	r2, [r3, #0]
}
 8001bc4:	bf00      	nop
 8001bc6:	370c      	adds	r7, #12
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bce:	4770      	bx	lr
 8001bd0:	40023c00 	.word	0x40023c00

08001bd4 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	b083      	sub	sp, #12
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
 8001bdc:	460b      	mov	r3, r1
 8001bde:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001be0:	4b0d      	ldr	r3, [pc, #52]	; (8001c18 <FLASH_Program_HalfWord+0x44>)
 8001be2:	691b      	ldr	r3, [r3, #16]
 8001be4:	4a0c      	ldr	r2, [pc, #48]	; (8001c18 <FLASH_Program_HalfWord+0x44>)
 8001be6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001bea:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8001bec:	4b0a      	ldr	r3, [pc, #40]	; (8001c18 <FLASH_Program_HalfWord+0x44>)
 8001bee:	691b      	ldr	r3, [r3, #16]
 8001bf0:	4a09      	ldr	r2, [pc, #36]	; (8001c18 <FLASH_Program_HalfWord+0x44>)
 8001bf2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bf6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001bf8:	4b07      	ldr	r3, [pc, #28]	; (8001c18 <FLASH_Program_HalfWord+0x44>)
 8001bfa:	691b      	ldr	r3, [r3, #16]
 8001bfc:	4a06      	ldr	r2, [pc, #24]	; (8001c18 <FLASH_Program_HalfWord+0x44>)
 8001bfe:	f043 0301 	orr.w	r3, r3, #1
 8001c02:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	887a      	ldrh	r2, [r7, #2]
 8001c08:	801a      	strh	r2, [r3, #0]
}
 8001c0a:	bf00      	nop
 8001c0c:	370c      	adds	r7, #12
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c14:	4770      	bx	lr
 8001c16:	bf00      	nop
 8001c18:	40023c00 	.word	0x40023c00

08001c1c <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	b083      	sub	sp, #12
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
 8001c24:	460b      	mov	r3, r1
 8001c26:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001c28:	4b0c      	ldr	r3, [pc, #48]	; (8001c5c <FLASH_Program_Byte+0x40>)
 8001c2a:	691b      	ldr	r3, [r3, #16]
 8001c2c:	4a0b      	ldr	r2, [pc, #44]	; (8001c5c <FLASH_Program_Byte+0x40>)
 8001c2e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001c32:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8001c34:	4b09      	ldr	r3, [pc, #36]	; (8001c5c <FLASH_Program_Byte+0x40>)
 8001c36:	4a09      	ldr	r2, [pc, #36]	; (8001c5c <FLASH_Program_Byte+0x40>)
 8001c38:	691b      	ldr	r3, [r3, #16]
 8001c3a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001c3c:	4b07      	ldr	r3, [pc, #28]	; (8001c5c <FLASH_Program_Byte+0x40>)
 8001c3e:	691b      	ldr	r3, [r3, #16]
 8001c40:	4a06      	ldr	r2, [pc, #24]	; (8001c5c <FLASH_Program_Byte+0x40>)
 8001c42:	f043 0301 	orr.w	r3, r3, #1
 8001c46:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	78fa      	ldrb	r2, [r7, #3]
 8001c4c:	701a      	strb	r2, [r3, #0]
}
 8001c4e:	bf00      	nop
 8001c50:	370c      	adds	r7, #12
 8001c52:	46bd      	mov	sp, r7
 8001c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c58:	4770      	bx	lr
 8001c5a:	bf00      	nop
 8001c5c:	40023c00 	.word	0x40023c00

08001c60 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8001c60:	b480      	push	{r7}
 8001c62:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8001c64:	4b27      	ldr	r3, [pc, #156]	; (8001d04 <FLASH_SetErrorCode+0xa4>)
 8001c66:	68db      	ldr	r3, [r3, #12]
 8001c68:	f003 0310 	and.w	r3, r3, #16
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d008      	beq.n	8001c82 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8001c70:	4b25      	ldr	r3, [pc, #148]	; (8001d08 <FLASH_SetErrorCode+0xa8>)
 8001c72:	69db      	ldr	r3, [r3, #28]
 8001c74:	f043 0310 	orr.w	r3, r3, #16
 8001c78:	4a23      	ldr	r2, [pc, #140]	; (8001d08 <FLASH_SetErrorCode+0xa8>)
 8001c7a:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8001c7c:	4b21      	ldr	r3, [pc, #132]	; (8001d04 <FLASH_SetErrorCode+0xa4>)
 8001c7e:	2210      	movs	r2, #16
 8001c80:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8001c82:	4b20      	ldr	r3, [pc, #128]	; (8001d04 <FLASH_SetErrorCode+0xa4>)
 8001c84:	68db      	ldr	r3, [r3, #12]
 8001c86:	f003 0320 	and.w	r3, r3, #32
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d008      	beq.n	8001ca0 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8001c8e:	4b1e      	ldr	r3, [pc, #120]	; (8001d08 <FLASH_SetErrorCode+0xa8>)
 8001c90:	69db      	ldr	r3, [r3, #28]
 8001c92:	f043 0308 	orr.w	r3, r3, #8
 8001c96:	4a1c      	ldr	r2, [pc, #112]	; (8001d08 <FLASH_SetErrorCode+0xa8>)
 8001c98:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8001c9a:	4b1a      	ldr	r3, [pc, #104]	; (8001d04 <FLASH_SetErrorCode+0xa4>)
 8001c9c:	2220      	movs	r2, #32
 8001c9e:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8001ca0:	4b18      	ldr	r3, [pc, #96]	; (8001d04 <FLASH_SetErrorCode+0xa4>)
 8001ca2:	68db      	ldr	r3, [r3, #12]
 8001ca4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d008      	beq.n	8001cbe <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8001cac:	4b16      	ldr	r3, [pc, #88]	; (8001d08 <FLASH_SetErrorCode+0xa8>)
 8001cae:	69db      	ldr	r3, [r3, #28]
 8001cb0:	f043 0304 	orr.w	r3, r3, #4
 8001cb4:	4a14      	ldr	r2, [pc, #80]	; (8001d08 <FLASH_SetErrorCode+0xa8>)
 8001cb6:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8001cb8:	4b12      	ldr	r3, [pc, #72]	; (8001d04 <FLASH_SetErrorCode+0xa4>)
 8001cba:	2240      	movs	r2, #64	; 0x40
 8001cbc:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8001cbe:	4b11      	ldr	r3, [pc, #68]	; (8001d04 <FLASH_SetErrorCode+0xa4>)
 8001cc0:	68db      	ldr	r3, [r3, #12]
 8001cc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d008      	beq.n	8001cdc <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8001cca:	4b0f      	ldr	r3, [pc, #60]	; (8001d08 <FLASH_SetErrorCode+0xa8>)
 8001ccc:	69db      	ldr	r3, [r3, #28]
 8001cce:	f043 0302 	orr.w	r3, r3, #2
 8001cd2:	4a0d      	ldr	r2, [pc, #52]	; (8001d08 <FLASH_SetErrorCode+0xa8>)
 8001cd4:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8001cd6:	4b0b      	ldr	r3, [pc, #44]	; (8001d04 <FLASH_SetErrorCode+0xa4>)
 8001cd8:	2280      	movs	r2, #128	; 0x80
 8001cda:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8001cdc:	4b09      	ldr	r3, [pc, #36]	; (8001d04 <FLASH_SetErrorCode+0xa4>)
 8001cde:	68db      	ldr	r3, [r3, #12]
 8001ce0:	f003 0302 	and.w	r3, r3, #2
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d008      	beq.n	8001cfa <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8001ce8:	4b07      	ldr	r3, [pc, #28]	; (8001d08 <FLASH_SetErrorCode+0xa8>)
 8001cea:	69db      	ldr	r3, [r3, #28]
 8001cec:	f043 0320 	orr.w	r3, r3, #32
 8001cf0:	4a05      	ldr	r2, [pc, #20]	; (8001d08 <FLASH_SetErrorCode+0xa8>)
 8001cf2:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8001cf4:	4b03      	ldr	r3, [pc, #12]	; (8001d04 <FLASH_SetErrorCode+0xa4>)
 8001cf6:	2202      	movs	r2, #2
 8001cf8:	60da      	str	r2, [r3, #12]
  }
}
 8001cfa:	bf00      	nop
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d02:	4770      	bx	lr
 8001d04:	40023c00 	.word	0x40023c00
 8001d08:	20000100 	.word	0x20000100

08001d0c <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b084      	sub	sp, #16
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
 8001d14:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001d16:	2301      	movs	r3, #1
 8001d18:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	60bb      	str	r3, [r7, #8]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001d1e:	4b31      	ldr	r3, [pc, #196]	; (8001de4 <HAL_FLASHEx_Erase+0xd8>)
 8001d20:	7e1b      	ldrb	r3, [r3, #24]
 8001d22:	2b01      	cmp	r3, #1
 8001d24:	d101      	bne.n	8001d2a <HAL_FLASHEx_Erase+0x1e>
 8001d26:	2302      	movs	r3, #2
 8001d28:	e058      	b.n	8001ddc <HAL_FLASHEx_Erase+0xd0>
 8001d2a:	4b2e      	ldr	r3, [pc, #184]	; (8001de4 <HAL_FLASHEx_Erase+0xd8>)
 8001d2c:	2201      	movs	r2, #1
 8001d2e:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001d30:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001d34:	f7ff febe 	bl	8001ab4 <FLASH_WaitForLastOperation>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 8001d3c:	7bfb      	ldrb	r3, [r7, #15]
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d148      	bne.n	8001dd4 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	f04f 32ff 	mov.w	r2, #4294967295
 8001d48:	601a      	str	r2, [r3, #0]
    
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	2b01      	cmp	r3, #1
 8001d50:	d115      	bne.n	8001d7e <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	691b      	ldr	r3, [r3, #16]
 8001d56:	b2da      	uxtb	r2, r3
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	4619      	mov	r1, r3
 8001d5e:	4610      	mov	r0, r2
 8001d60:	f000 f844 	bl	8001dec <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001d64:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001d68:	f7ff fea4 	bl	8001ab4 <FLASH_WaitForLastOperation>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	73fb      	strb	r3, [r7, #15]
      
      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8001d70:	4b1d      	ldr	r3, [pc, #116]	; (8001de8 <HAL_FLASHEx_Erase+0xdc>)
 8001d72:	691b      	ldr	r3, [r3, #16]
 8001d74:	4a1c      	ldr	r2, [pc, #112]	; (8001de8 <HAL_FLASHEx_Erase+0xdc>)
 8001d76:	f023 0304 	bic.w	r3, r3, #4
 8001d7a:	6113      	str	r3, [r2, #16]
 8001d7c:	e028      	b.n	8001dd0 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	689b      	ldr	r3, [r3, #8]
 8001d82:	60bb      	str	r3, [r7, #8]
 8001d84:	e01c      	b.n	8001dc0 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	691b      	ldr	r3, [r3, #16]
 8001d8a:	b2db      	uxtb	r3, r3
 8001d8c:	4619      	mov	r1, r3
 8001d8e:	68b8      	ldr	r0, [r7, #8]
 8001d90:	f000 f850 	bl	8001e34 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001d94:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001d98:	f7ff fe8c 	bl	8001ab4 <FLASH_WaitForLastOperation>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8001da0:	4b11      	ldr	r3, [pc, #68]	; (8001de8 <HAL_FLASHEx_Erase+0xdc>)
 8001da2:	691b      	ldr	r3, [r3, #16]
 8001da4:	4a10      	ldr	r2, [pc, #64]	; (8001de8 <HAL_FLASHEx_Erase+0xdc>)
 8001da6:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 8001daa:	6113      	str	r3, [r2, #16]

        if(status != HAL_OK) 
 8001dac:	7bfb      	ldrb	r3, [r7, #15]
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d003      	beq.n	8001dba <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	68ba      	ldr	r2, [r7, #8]
 8001db6:	601a      	str	r2, [r3, #0]
          break;
 8001db8:	e00a      	b.n	8001dd0 <HAL_FLASHEx_Erase+0xc4>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8001dba:	68bb      	ldr	r3, [r7, #8]
 8001dbc:	3301      	adds	r3, #1
 8001dbe:	60bb      	str	r3, [r7, #8]
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	68da      	ldr	r2, [r3, #12]
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	689b      	ldr	r3, [r3, #8]
 8001dc8:	4413      	add	r3, r2
 8001dca:	68ba      	ldr	r2, [r7, #8]
 8001dcc:	429a      	cmp	r2, r3
 8001dce:	d3da      	bcc.n	8001d86 <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();    
 8001dd0:	f000 f878 	bl	8001ec4 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001dd4:	4b03      	ldr	r3, [pc, #12]	; (8001de4 <HAL_FLASHEx_Erase+0xd8>)
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	761a      	strb	r2, [r3, #24]

  return status;
 8001dda:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ddc:	4618      	mov	r0, r3
 8001dde:	3710      	adds	r7, #16
 8001de0:	46bd      	mov	sp, r7
 8001de2:	bd80      	pop	{r7, pc}
 8001de4:	20000100 	.word	0x20000100
 8001de8:	40023c00 	.word	0x40023c00

08001dec <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8001dec:	b480      	push	{r7}
 8001dee:	b083      	sub	sp, #12
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	4603      	mov	r3, r0
 8001df4:	6039      	str	r1, [r7, #0]
 8001df6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));
  
  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001df8:	4b0d      	ldr	r3, [pc, #52]	; (8001e30 <FLASH_MassErase+0x44>)
 8001dfa:	691b      	ldr	r3, [r3, #16]
 8001dfc:	4a0c      	ldr	r2, [pc, #48]	; (8001e30 <FLASH_MassErase+0x44>)
 8001dfe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001e02:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 8001e04:	4b0a      	ldr	r3, [pc, #40]	; (8001e30 <FLASH_MassErase+0x44>)
 8001e06:	691b      	ldr	r3, [r3, #16]
 8001e08:	4a09      	ldr	r2, [pc, #36]	; (8001e30 <FLASH_MassErase+0x44>)
 8001e0a:	f043 0304 	orr.w	r3, r3, #4
 8001e0e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8U);
 8001e10:	4b07      	ldr	r3, [pc, #28]	; (8001e30 <FLASH_MassErase+0x44>)
 8001e12:	691a      	ldr	r2, [r3, #16]
 8001e14:	79fb      	ldrb	r3, [r7, #7]
 8001e16:	021b      	lsls	r3, r3, #8
 8001e18:	4313      	orrs	r3, r2
 8001e1a:	4a05      	ldr	r2, [pc, #20]	; (8001e30 <FLASH_MassErase+0x44>)
 8001e1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e20:	6113      	str	r3, [r2, #16]
}
 8001e22:	bf00      	nop
 8001e24:	370c      	adds	r7, #12
 8001e26:	46bd      	mov	sp, r7
 8001e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2c:	4770      	bx	lr
 8001e2e:	bf00      	nop
 8001e30:	40023c00 	.word	0x40023c00

08001e34 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8001e34:	b480      	push	{r7}
 8001e36:	b085      	sub	sp, #20
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
 8001e3c:	460b      	mov	r3, r1
 8001e3e:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8001e40:	2300      	movs	r3, #0
 8001e42:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8001e44:	78fb      	ldrb	r3, [r7, #3]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d102      	bne.n	8001e50 <FLASH_Erase_Sector+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	60fb      	str	r3, [r7, #12]
 8001e4e:	e010      	b.n	8001e72 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8001e50:	78fb      	ldrb	r3, [r7, #3]
 8001e52:	2b01      	cmp	r3, #1
 8001e54:	d103      	bne.n	8001e5e <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8001e56:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001e5a:	60fb      	str	r3, [r7, #12]
 8001e5c:	e009      	b.n	8001e72 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8001e5e:	78fb      	ldrb	r3, [r7, #3]
 8001e60:	2b02      	cmp	r3, #2
 8001e62:	d103      	bne.n	8001e6c <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8001e64:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001e68:	60fb      	str	r3, [r7, #12]
 8001e6a:	e002      	b.n	8001e72 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8001e6c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001e70:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001e72:	4b13      	ldr	r3, [pc, #76]	; (8001ec0 <FLASH_Erase_Sector+0x8c>)
 8001e74:	691b      	ldr	r3, [r3, #16]
 8001e76:	4a12      	ldr	r2, [pc, #72]	; (8001ec0 <FLASH_Erase_Sector+0x8c>)
 8001e78:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001e7c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8001e7e:	4b10      	ldr	r3, [pc, #64]	; (8001ec0 <FLASH_Erase_Sector+0x8c>)
 8001e80:	691a      	ldr	r2, [r3, #16]
 8001e82:	490f      	ldr	r1, [pc, #60]	; (8001ec0 <FLASH_Erase_Sector+0x8c>)
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	4313      	orrs	r3, r2
 8001e88:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8001e8a:	4b0d      	ldr	r3, [pc, #52]	; (8001ec0 <FLASH_Erase_Sector+0x8c>)
 8001e8c:	691b      	ldr	r3, [r3, #16]
 8001e8e:	4a0c      	ldr	r2, [pc, #48]	; (8001ec0 <FLASH_Erase_Sector+0x8c>)
 8001e90:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001e94:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8001e96:	4b0a      	ldr	r3, [pc, #40]	; (8001ec0 <FLASH_Erase_Sector+0x8c>)
 8001e98:	691a      	ldr	r2, [r3, #16]
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	00db      	lsls	r3, r3, #3
 8001e9e:	4313      	orrs	r3, r2
 8001ea0:	4a07      	ldr	r2, [pc, #28]	; (8001ec0 <FLASH_Erase_Sector+0x8c>)
 8001ea2:	f043 0302 	orr.w	r3, r3, #2
 8001ea6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8001ea8:	4b05      	ldr	r3, [pc, #20]	; (8001ec0 <FLASH_Erase_Sector+0x8c>)
 8001eaa:	691b      	ldr	r3, [r3, #16]
 8001eac:	4a04      	ldr	r2, [pc, #16]	; (8001ec0 <FLASH_Erase_Sector+0x8c>)
 8001eae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001eb2:	6113      	str	r3, [r2, #16]
}
 8001eb4:	bf00      	nop
 8001eb6:	3714      	adds	r7, #20
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebe:	4770      	bx	lr
 8001ec0:	40023c00 	.word	0x40023c00

08001ec4 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN)!= RESET)
 8001ec8:	4b20      	ldr	r3, [pc, #128]	; (8001f4c <FLASH_FlushCaches+0x88>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d017      	beq.n	8001f04 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8001ed4:	4b1d      	ldr	r3, [pc, #116]	; (8001f4c <FLASH_FlushCaches+0x88>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4a1c      	ldr	r2, [pc, #112]	; (8001f4c <FLASH_FlushCaches+0x88>)
 8001eda:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001ede:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8001ee0:	4b1a      	ldr	r3, [pc, #104]	; (8001f4c <FLASH_FlushCaches+0x88>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	4a19      	ldr	r2, [pc, #100]	; (8001f4c <FLASH_FlushCaches+0x88>)
 8001ee6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001eea:	6013      	str	r3, [r2, #0]
 8001eec:	4b17      	ldr	r3, [pc, #92]	; (8001f4c <FLASH_FlushCaches+0x88>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	4a16      	ldr	r2, [pc, #88]	; (8001f4c <FLASH_FlushCaches+0x88>)
 8001ef2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001ef6:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001ef8:	4b14      	ldr	r3, [pc, #80]	; (8001f4c <FLASH_FlushCaches+0x88>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	4a13      	ldr	r2, [pc, #76]	; (8001f4c <FLASH_FlushCaches+0x88>)
 8001efe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f02:	6013      	str	r3, [r2, #0]
  }
  
  /* Flush data cache */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8001f04:	4b11      	ldr	r3, [pc, #68]	; (8001f4c <FLASH_FlushCaches+0x88>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d017      	beq.n	8001f40 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8001f10:	4b0e      	ldr	r3, [pc, #56]	; (8001f4c <FLASH_FlushCaches+0x88>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	4a0d      	ldr	r2, [pc, #52]	; (8001f4c <FLASH_FlushCaches+0x88>)
 8001f16:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001f1a:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8001f1c:	4b0b      	ldr	r3, [pc, #44]	; (8001f4c <FLASH_FlushCaches+0x88>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	4a0a      	ldr	r2, [pc, #40]	; (8001f4c <FLASH_FlushCaches+0x88>)
 8001f22:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001f26:	6013      	str	r3, [r2, #0]
 8001f28:	4b08      	ldr	r3, [pc, #32]	; (8001f4c <FLASH_FlushCaches+0x88>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4a07      	ldr	r2, [pc, #28]	; (8001f4c <FLASH_FlushCaches+0x88>)
 8001f2e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001f32:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8001f34:	4b05      	ldr	r3, [pc, #20]	; (8001f4c <FLASH_FlushCaches+0x88>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4a04      	ldr	r2, [pc, #16]	; (8001f4c <FLASH_FlushCaches+0x88>)
 8001f3a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001f3e:	6013      	str	r3, [r2, #0]
  }
}
 8001f40:	bf00      	nop
 8001f42:	46bd      	mov	sp, r7
 8001f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f48:	4770      	bx	lr
 8001f4a:	bf00      	nop
 8001f4c:	40023c00 	.word	0x40023c00

08001f50 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f50:	b480      	push	{r7}
 8001f52:	b089      	sub	sp, #36	; 0x24
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
 8001f58:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001f5e:	2300      	movs	r3, #0
 8001f60:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001f62:	2300      	movs	r3, #0
 8001f64:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f66:	2300      	movs	r3, #0
 8001f68:	61fb      	str	r3, [r7, #28]
 8001f6a:	e16b      	b.n	8002244 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001f6c:	2201      	movs	r2, #1
 8001f6e:	69fb      	ldr	r3, [r7, #28]
 8001f70:	fa02 f303 	lsl.w	r3, r2, r3
 8001f74:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	697a      	ldr	r2, [r7, #20]
 8001f7c:	4013      	ands	r3, r2
 8001f7e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001f80:	693a      	ldr	r2, [r7, #16]
 8001f82:	697b      	ldr	r3, [r7, #20]
 8001f84:	429a      	cmp	r2, r3
 8001f86:	f040 815a 	bne.w	800223e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	685b      	ldr	r3, [r3, #4]
 8001f8e:	2b02      	cmp	r3, #2
 8001f90:	d003      	beq.n	8001f9a <HAL_GPIO_Init+0x4a>
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	685b      	ldr	r3, [r3, #4]
 8001f96:	2b12      	cmp	r3, #18
 8001f98:	d123      	bne.n	8001fe2 <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f9a:	69fb      	ldr	r3, [r7, #28]
 8001f9c:	08da      	lsrs	r2, r3, #3
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	3208      	adds	r2, #8
 8001fa2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fa6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001fa8:	69fb      	ldr	r3, [r7, #28]
 8001faa:	f003 0307 	and.w	r3, r3, #7
 8001fae:	009b      	lsls	r3, r3, #2
 8001fb0:	220f      	movs	r2, #15
 8001fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb6:	43db      	mvns	r3, r3
 8001fb8:	69ba      	ldr	r2, [r7, #24]
 8001fba:	4013      	ands	r3, r2
 8001fbc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	691a      	ldr	r2, [r3, #16]
 8001fc2:	69fb      	ldr	r3, [r7, #28]
 8001fc4:	f003 0307 	and.w	r3, r3, #7
 8001fc8:	009b      	lsls	r3, r3, #2
 8001fca:	fa02 f303 	lsl.w	r3, r2, r3
 8001fce:	69ba      	ldr	r2, [r7, #24]
 8001fd0:	4313      	orrs	r3, r2
 8001fd2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001fd4:	69fb      	ldr	r3, [r7, #28]
 8001fd6:	08da      	lsrs	r2, r3, #3
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	3208      	adds	r2, #8
 8001fdc:	69b9      	ldr	r1, [r7, #24]
 8001fde:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001fe8:	69fb      	ldr	r3, [r7, #28]
 8001fea:	005b      	lsls	r3, r3, #1
 8001fec:	2203      	movs	r2, #3
 8001fee:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff2:	43db      	mvns	r3, r3
 8001ff4:	69ba      	ldr	r2, [r7, #24]
 8001ff6:	4013      	ands	r3, r2
 8001ff8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	685b      	ldr	r3, [r3, #4]
 8001ffe:	f003 0203 	and.w	r2, r3, #3
 8002002:	69fb      	ldr	r3, [r7, #28]
 8002004:	005b      	lsls	r3, r3, #1
 8002006:	fa02 f303 	lsl.w	r3, r2, r3
 800200a:	69ba      	ldr	r2, [r7, #24]
 800200c:	4313      	orrs	r3, r2
 800200e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	69ba      	ldr	r2, [r7, #24]
 8002014:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	685b      	ldr	r3, [r3, #4]
 800201a:	2b01      	cmp	r3, #1
 800201c:	d00b      	beq.n	8002036 <HAL_GPIO_Init+0xe6>
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	685b      	ldr	r3, [r3, #4]
 8002022:	2b02      	cmp	r3, #2
 8002024:	d007      	beq.n	8002036 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800202a:	2b11      	cmp	r3, #17
 800202c:	d003      	beq.n	8002036 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	685b      	ldr	r3, [r3, #4]
 8002032:	2b12      	cmp	r3, #18
 8002034:	d130      	bne.n	8002098 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	689b      	ldr	r3, [r3, #8]
 800203a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800203c:	69fb      	ldr	r3, [r7, #28]
 800203e:	005b      	lsls	r3, r3, #1
 8002040:	2203      	movs	r2, #3
 8002042:	fa02 f303 	lsl.w	r3, r2, r3
 8002046:	43db      	mvns	r3, r3
 8002048:	69ba      	ldr	r2, [r7, #24]
 800204a:	4013      	ands	r3, r2
 800204c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	68da      	ldr	r2, [r3, #12]
 8002052:	69fb      	ldr	r3, [r7, #28]
 8002054:	005b      	lsls	r3, r3, #1
 8002056:	fa02 f303 	lsl.w	r3, r2, r3
 800205a:	69ba      	ldr	r2, [r7, #24]
 800205c:	4313      	orrs	r3, r2
 800205e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	69ba      	ldr	r2, [r7, #24]
 8002064:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800206c:	2201      	movs	r2, #1
 800206e:	69fb      	ldr	r3, [r7, #28]
 8002070:	fa02 f303 	lsl.w	r3, r2, r3
 8002074:	43db      	mvns	r3, r3
 8002076:	69ba      	ldr	r2, [r7, #24]
 8002078:	4013      	ands	r3, r2
 800207a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	091b      	lsrs	r3, r3, #4
 8002082:	f003 0201 	and.w	r2, r3, #1
 8002086:	69fb      	ldr	r3, [r7, #28]
 8002088:	fa02 f303 	lsl.w	r3, r2, r3
 800208c:	69ba      	ldr	r2, [r7, #24]
 800208e:	4313      	orrs	r3, r2
 8002090:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	69ba      	ldr	r2, [r7, #24]
 8002096:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	68db      	ldr	r3, [r3, #12]
 800209c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800209e:	69fb      	ldr	r3, [r7, #28]
 80020a0:	005b      	lsls	r3, r3, #1
 80020a2:	2203      	movs	r2, #3
 80020a4:	fa02 f303 	lsl.w	r3, r2, r3
 80020a8:	43db      	mvns	r3, r3
 80020aa:	69ba      	ldr	r2, [r7, #24]
 80020ac:	4013      	ands	r3, r2
 80020ae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	689a      	ldr	r2, [r3, #8]
 80020b4:	69fb      	ldr	r3, [r7, #28]
 80020b6:	005b      	lsls	r3, r3, #1
 80020b8:	fa02 f303 	lsl.w	r3, r2, r3
 80020bc:	69ba      	ldr	r2, [r7, #24]
 80020be:	4313      	orrs	r3, r2
 80020c0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	69ba      	ldr	r2, [r7, #24]
 80020c6:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	f000 80b4 	beq.w	800223e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020d6:	2300      	movs	r3, #0
 80020d8:	60fb      	str	r3, [r7, #12]
 80020da:	4b5f      	ldr	r3, [pc, #380]	; (8002258 <HAL_GPIO_Init+0x308>)
 80020dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020de:	4a5e      	ldr	r2, [pc, #376]	; (8002258 <HAL_GPIO_Init+0x308>)
 80020e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80020e4:	6453      	str	r3, [r2, #68]	; 0x44
 80020e6:	4b5c      	ldr	r3, [pc, #368]	; (8002258 <HAL_GPIO_Init+0x308>)
 80020e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020ee:	60fb      	str	r3, [r7, #12]
 80020f0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80020f2:	4a5a      	ldr	r2, [pc, #360]	; (800225c <HAL_GPIO_Init+0x30c>)
 80020f4:	69fb      	ldr	r3, [r7, #28]
 80020f6:	089b      	lsrs	r3, r3, #2
 80020f8:	3302      	adds	r3, #2
 80020fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002100:	69fb      	ldr	r3, [r7, #28]
 8002102:	f003 0303 	and.w	r3, r3, #3
 8002106:	009b      	lsls	r3, r3, #2
 8002108:	220f      	movs	r2, #15
 800210a:	fa02 f303 	lsl.w	r3, r2, r3
 800210e:	43db      	mvns	r3, r3
 8002110:	69ba      	ldr	r2, [r7, #24]
 8002112:	4013      	ands	r3, r2
 8002114:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	4a51      	ldr	r2, [pc, #324]	; (8002260 <HAL_GPIO_Init+0x310>)
 800211a:	4293      	cmp	r3, r2
 800211c:	d02b      	beq.n	8002176 <HAL_GPIO_Init+0x226>
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	4a50      	ldr	r2, [pc, #320]	; (8002264 <HAL_GPIO_Init+0x314>)
 8002122:	4293      	cmp	r3, r2
 8002124:	d025      	beq.n	8002172 <HAL_GPIO_Init+0x222>
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	4a4f      	ldr	r2, [pc, #316]	; (8002268 <HAL_GPIO_Init+0x318>)
 800212a:	4293      	cmp	r3, r2
 800212c:	d01f      	beq.n	800216e <HAL_GPIO_Init+0x21e>
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	4a4e      	ldr	r2, [pc, #312]	; (800226c <HAL_GPIO_Init+0x31c>)
 8002132:	4293      	cmp	r3, r2
 8002134:	d019      	beq.n	800216a <HAL_GPIO_Init+0x21a>
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	4a4d      	ldr	r2, [pc, #308]	; (8002270 <HAL_GPIO_Init+0x320>)
 800213a:	4293      	cmp	r3, r2
 800213c:	d013      	beq.n	8002166 <HAL_GPIO_Init+0x216>
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	4a4c      	ldr	r2, [pc, #304]	; (8002274 <HAL_GPIO_Init+0x324>)
 8002142:	4293      	cmp	r3, r2
 8002144:	d00d      	beq.n	8002162 <HAL_GPIO_Init+0x212>
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	4a4b      	ldr	r2, [pc, #300]	; (8002278 <HAL_GPIO_Init+0x328>)
 800214a:	4293      	cmp	r3, r2
 800214c:	d007      	beq.n	800215e <HAL_GPIO_Init+0x20e>
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	4a4a      	ldr	r2, [pc, #296]	; (800227c <HAL_GPIO_Init+0x32c>)
 8002152:	4293      	cmp	r3, r2
 8002154:	d101      	bne.n	800215a <HAL_GPIO_Init+0x20a>
 8002156:	2307      	movs	r3, #7
 8002158:	e00e      	b.n	8002178 <HAL_GPIO_Init+0x228>
 800215a:	2308      	movs	r3, #8
 800215c:	e00c      	b.n	8002178 <HAL_GPIO_Init+0x228>
 800215e:	2306      	movs	r3, #6
 8002160:	e00a      	b.n	8002178 <HAL_GPIO_Init+0x228>
 8002162:	2305      	movs	r3, #5
 8002164:	e008      	b.n	8002178 <HAL_GPIO_Init+0x228>
 8002166:	2304      	movs	r3, #4
 8002168:	e006      	b.n	8002178 <HAL_GPIO_Init+0x228>
 800216a:	2303      	movs	r3, #3
 800216c:	e004      	b.n	8002178 <HAL_GPIO_Init+0x228>
 800216e:	2302      	movs	r3, #2
 8002170:	e002      	b.n	8002178 <HAL_GPIO_Init+0x228>
 8002172:	2301      	movs	r3, #1
 8002174:	e000      	b.n	8002178 <HAL_GPIO_Init+0x228>
 8002176:	2300      	movs	r3, #0
 8002178:	69fa      	ldr	r2, [r7, #28]
 800217a:	f002 0203 	and.w	r2, r2, #3
 800217e:	0092      	lsls	r2, r2, #2
 8002180:	4093      	lsls	r3, r2
 8002182:	69ba      	ldr	r2, [r7, #24]
 8002184:	4313      	orrs	r3, r2
 8002186:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002188:	4934      	ldr	r1, [pc, #208]	; (800225c <HAL_GPIO_Init+0x30c>)
 800218a:	69fb      	ldr	r3, [r7, #28]
 800218c:	089b      	lsrs	r3, r3, #2
 800218e:	3302      	adds	r3, #2
 8002190:	69ba      	ldr	r2, [r7, #24]
 8002192:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002196:	4b3a      	ldr	r3, [pc, #232]	; (8002280 <HAL_GPIO_Init+0x330>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800219c:	693b      	ldr	r3, [r7, #16]
 800219e:	43db      	mvns	r3, r3
 80021a0:	69ba      	ldr	r2, [r7, #24]
 80021a2:	4013      	ands	r3, r2
 80021a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	685b      	ldr	r3, [r3, #4]
 80021aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d003      	beq.n	80021ba <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80021b2:	69ba      	ldr	r2, [r7, #24]
 80021b4:	693b      	ldr	r3, [r7, #16]
 80021b6:	4313      	orrs	r3, r2
 80021b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80021ba:	4a31      	ldr	r2, [pc, #196]	; (8002280 <HAL_GPIO_Init+0x330>)
 80021bc:	69bb      	ldr	r3, [r7, #24]
 80021be:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80021c0:	4b2f      	ldr	r3, [pc, #188]	; (8002280 <HAL_GPIO_Init+0x330>)
 80021c2:	685b      	ldr	r3, [r3, #4]
 80021c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021c6:	693b      	ldr	r3, [r7, #16]
 80021c8:	43db      	mvns	r3, r3
 80021ca:	69ba      	ldr	r2, [r7, #24]
 80021cc:	4013      	ands	r3, r2
 80021ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d003      	beq.n	80021e4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80021dc:	69ba      	ldr	r2, [r7, #24]
 80021de:	693b      	ldr	r3, [r7, #16]
 80021e0:	4313      	orrs	r3, r2
 80021e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80021e4:	4a26      	ldr	r2, [pc, #152]	; (8002280 <HAL_GPIO_Init+0x330>)
 80021e6:	69bb      	ldr	r3, [r7, #24]
 80021e8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80021ea:	4b25      	ldr	r3, [pc, #148]	; (8002280 <HAL_GPIO_Init+0x330>)
 80021ec:	689b      	ldr	r3, [r3, #8]
 80021ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021f0:	693b      	ldr	r3, [r7, #16]
 80021f2:	43db      	mvns	r3, r3
 80021f4:	69ba      	ldr	r2, [r7, #24]
 80021f6:	4013      	ands	r3, r2
 80021f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002202:	2b00      	cmp	r3, #0
 8002204:	d003      	beq.n	800220e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002206:	69ba      	ldr	r2, [r7, #24]
 8002208:	693b      	ldr	r3, [r7, #16]
 800220a:	4313      	orrs	r3, r2
 800220c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800220e:	4a1c      	ldr	r2, [pc, #112]	; (8002280 <HAL_GPIO_Init+0x330>)
 8002210:	69bb      	ldr	r3, [r7, #24]
 8002212:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002214:	4b1a      	ldr	r3, [pc, #104]	; (8002280 <HAL_GPIO_Init+0x330>)
 8002216:	68db      	ldr	r3, [r3, #12]
 8002218:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800221a:	693b      	ldr	r3, [r7, #16]
 800221c:	43db      	mvns	r3, r3
 800221e:	69ba      	ldr	r2, [r7, #24]
 8002220:	4013      	ands	r3, r2
 8002222:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	685b      	ldr	r3, [r3, #4]
 8002228:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800222c:	2b00      	cmp	r3, #0
 800222e:	d003      	beq.n	8002238 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002230:	69ba      	ldr	r2, [r7, #24]
 8002232:	693b      	ldr	r3, [r7, #16]
 8002234:	4313      	orrs	r3, r2
 8002236:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002238:	4a11      	ldr	r2, [pc, #68]	; (8002280 <HAL_GPIO_Init+0x330>)
 800223a:	69bb      	ldr	r3, [r7, #24]
 800223c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800223e:	69fb      	ldr	r3, [r7, #28]
 8002240:	3301      	adds	r3, #1
 8002242:	61fb      	str	r3, [r7, #28]
 8002244:	69fb      	ldr	r3, [r7, #28]
 8002246:	2b0f      	cmp	r3, #15
 8002248:	f67f ae90 	bls.w	8001f6c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800224c:	bf00      	nop
 800224e:	3724      	adds	r7, #36	; 0x24
 8002250:	46bd      	mov	sp, r7
 8002252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002256:	4770      	bx	lr
 8002258:	40023800 	.word	0x40023800
 800225c:	40013800 	.word	0x40013800
 8002260:	40020000 	.word	0x40020000
 8002264:	40020400 	.word	0x40020400
 8002268:	40020800 	.word	0x40020800
 800226c:	40020c00 	.word	0x40020c00
 8002270:	40021000 	.word	0x40021000
 8002274:	40021400 	.word	0x40021400
 8002278:	40021800 	.word	0x40021800
 800227c:	40021c00 	.word	0x40021c00
 8002280:	40013c00 	.word	0x40013c00

08002284 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002284:	b480      	push	{r7}
 8002286:	b085      	sub	sp, #20
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
 800228c:	460b      	mov	r3, r1
 800228e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	691a      	ldr	r2, [r3, #16]
 8002294:	887b      	ldrh	r3, [r7, #2]
 8002296:	4013      	ands	r3, r2
 8002298:	2b00      	cmp	r3, #0
 800229a:	d002      	beq.n	80022a2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800229c:	2301      	movs	r3, #1
 800229e:	73fb      	strb	r3, [r7, #15]
 80022a0:	e001      	b.n	80022a6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80022a2:	2300      	movs	r3, #0
 80022a4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80022a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80022a8:	4618      	mov	r0, r3
 80022aa:	3714      	adds	r7, #20
 80022ac:	46bd      	mov	sp, r7
 80022ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b2:	4770      	bx	lr

080022b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80022b4:	b480      	push	{r7}
 80022b6:	b083      	sub	sp, #12
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
 80022bc:	460b      	mov	r3, r1
 80022be:	807b      	strh	r3, [r7, #2]
 80022c0:	4613      	mov	r3, r2
 80022c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80022c4:	787b      	ldrb	r3, [r7, #1]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d003      	beq.n	80022d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80022ca:	887a      	ldrh	r2, [r7, #2]
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80022d0:	e003      	b.n	80022da <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80022d2:	887b      	ldrh	r3, [r7, #2]
 80022d4:	041a      	lsls	r2, r3, #16
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	619a      	str	r2, [r3, #24]
}
 80022da:	bf00      	nop
 80022dc:	370c      	adds	r7, #12
 80022de:	46bd      	mov	sp, r7
 80022e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e4:	4770      	bx	lr
	...

080022e8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b086      	sub	sp, #24
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d101      	bne.n	80022fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80022f6:	2301      	movs	r3, #1
 80022f8:	e22d      	b.n	8002756 <HAL_RCC_OscConfig+0x46e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f003 0301 	and.w	r3, r3, #1
 8002302:	2b00      	cmp	r3, #0
 8002304:	d075      	beq.n	80023f2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002306:	4ba3      	ldr	r3, [pc, #652]	; (8002594 <HAL_RCC_OscConfig+0x2ac>)
 8002308:	689b      	ldr	r3, [r3, #8]
 800230a:	f003 030c 	and.w	r3, r3, #12
 800230e:	2b04      	cmp	r3, #4
 8002310:	d00c      	beq.n	800232c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002312:	4ba0      	ldr	r3, [pc, #640]	; (8002594 <HAL_RCC_OscConfig+0x2ac>)
 8002314:	689b      	ldr	r3, [r3, #8]
 8002316:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800231a:	2b08      	cmp	r3, #8
 800231c:	d112      	bne.n	8002344 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800231e:	4b9d      	ldr	r3, [pc, #628]	; (8002594 <HAL_RCC_OscConfig+0x2ac>)
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002326:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800232a:	d10b      	bne.n	8002344 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800232c:	4b99      	ldr	r3, [pc, #612]	; (8002594 <HAL_RCC_OscConfig+0x2ac>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002334:	2b00      	cmp	r3, #0
 8002336:	d05b      	beq.n	80023f0 <HAL_RCC_OscConfig+0x108>
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	685b      	ldr	r3, [r3, #4]
 800233c:	2b00      	cmp	r3, #0
 800233e:	d157      	bne.n	80023f0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002340:	2301      	movs	r3, #1
 8002342:	e208      	b.n	8002756 <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800234c:	d106      	bne.n	800235c <HAL_RCC_OscConfig+0x74>
 800234e:	4b91      	ldr	r3, [pc, #580]	; (8002594 <HAL_RCC_OscConfig+0x2ac>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	4a90      	ldr	r2, [pc, #576]	; (8002594 <HAL_RCC_OscConfig+0x2ac>)
 8002354:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002358:	6013      	str	r3, [r2, #0]
 800235a:	e01d      	b.n	8002398 <HAL_RCC_OscConfig+0xb0>
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	685b      	ldr	r3, [r3, #4]
 8002360:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002364:	d10c      	bne.n	8002380 <HAL_RCC_OscConfig+0x98>
 8002366:	4b8b      	ldr	r3, [pc, #556]	; (8002594 <HAL_RCC_OscConfig+0x2ac>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	4a8a      	ldr	r2, [pc, #552]	; (8002594 <HAL_RCC_OscConfig+0x2ac>)
 800236c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002370:	6013      	str	r3, [r2, #0]
 8002372:	4b88      	ldr	r3, [pc, #544]	; (8002594 <HAL_RCC_OscConfig+0x2ac>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	4a87      	ldr	r2, [pc, #540]	; (8002594 <HAL_RCC_OscConfig+0x2ac>)
 8002378:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800237c:	6013      	str	r3, [r2, #0]
 800237e:	e00b      	b.n	8002398 <HAL_RCC_OscConfig+0xb0>
 8002380:	4b84      	ldr	r3, [pc, #528]	; (8002594 <HAL_RCC_OscConfig+0x2ac>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4a83      	ldr	r2, [pc, #524]	; (8002594 <HAL_RCC_OscConfig+0x2ac>)
 8002386:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800238a:	6013      	str	r3, [r2, #0]
 800238c:	4b81      	ldr	r3, [pc, #516]	; (8002594 <HAL_RCC_OscConfig+0x2ac>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	4a80      	ldr	r2, [pc, #512]	; (8002594 <HAL_RCC_OscConfig+0x2ac>)
 8002392:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002396:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	2b00      	cmp	r3, #0
 800239e:	d013      	beq.n	80023c8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023a0:	f7fe fe08 	bl	8000fb4 <HAL_GetTick>
 80023a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023a6:	e008      	b.n	80023ba <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80023a8:	f7fe fe04 	bl	8000fb4 <HAL_GetTick>
 80023ac:	4602      	mov	r2, r0
 80023ae:	693b      	ldr	r3, [r7, #16]
 80023b0:	1ad3      	subs	r3, r2, r3
 80023b2:	2b64      	cmp	r3, #100	; 0x64
 80023b4:	d901      	bls.n	80023ba <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80023b6:	2303      	movs	r3, #3
 80023b8:	e1cd      	b.n	8002756 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023ba:	4b76      	ldr	r3, [pc, #472]	; (8002594 <HAL_RCC_OscConfig+0x2ac>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d0f0      	beq.n	80023a8 <HAL_RCC_OscConfig+0xc0>
 80023c6:	e014      	b.n	80023f2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023c8:	f7fe fdf4 	bl	8000fb4 <HAL_GetTick>
 80023cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023ce:	e008      	b.n	80023e2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80023d0:	f7fe fdf0 	bl	8000fb4 <HAL_GetTick>
 80023d4:	4602      	mov	r2, r0
 80023d6:	693b      	ldr	r3, [r7, #16]
 80023d8:	1ad3      	subs	r3, r2, r3
 80023da:	2b64      	cmp	r3, #100	; 0x64
 80023dc:	d901      	bls.n	80023e2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80023de:	2303      	movs	r3, #3
 80023e0:	e1b9      	b.n	8002756 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023e2:	4b6c      	ldr	r3, [pc, #432]	; (8002594 <HAL_RCC_OscConfig+0x2ac>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d1f0      	bne.n	80023d0 <HAL_RCC_OscConfig+0xe8>
 80023ee:	e000      	b.n	80023f2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f003 0302 	and.w	r3, r3, #2
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d063      	beq.n	80024c6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80023fe:	4b65      	ldr	r3, [pc, #404]	; (8002594 <HAL_RCC_OscConfig+0x2ac>)
 8002400:	689b      	ldr	r3, [r3, #8]
 8002402:	f003 030c 	and.w	r3, r3, #12
 8002406:	2b00      	cmp	r3, #0
 8002408:	d00b      	beq.n	8002422 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800240a:	4b62      	ldr	r3, [pc, #392]	; (8002594 <HAL_RCC_OscConfig+0x2ac>)
 800240c:	689b      	ldr	r3, [r3, #8]
 800240e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002412:	2b08      	cmp	r3, #8
 8002414:	d11c      	bne.n	8002450 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002416:	4b5f      	ldr	r3, [pc, #380]	; (8002594 <HAL_RCC_OscConfig+0x2ac>)
 8002418:	685b      	ldr	r3, [r3, #4]
 800241a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800241e:	2b00      	cmp	r3, #0
 8002420:	d116      	bne.n	8002450 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002422:	4b5c      	ldr	r3, [pc, #368]	; (8002594 <HAL_RCC_OscConfig+0x2ac>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f003 0302 	and.w	r3, r3, #2
 800242a:	2b00      	cmp	r3, #0
 800242c:	d005      	beq.n	800243a <HAL_RCC_OscConfig+0x152>
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	68db      	ldr	r3, [r3, #12]
 8002432:	2b01      	cmp	r3, #1
 8002434:	d001      	beq.n	800243a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002436:	2301      	movs	r3, #1
 8002438:	e18d      	b.n	8002756 <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800243a:	4b56      	ldr	r3, [pc, #344]	; (8002594 <HAL_RCC_OscConfig+0x2ac>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	691b      	ldr	r3, [r3, #16]
 8002446:	00db      	lsls	r3, r3, #3
 8002448:	4952      	ldr	r1, [pc, #328]	; (8002594 <HAL_RCC_OscConfig+0x2ac>)
 800244a:	4313      	orrs	r3, r2
 800244c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800244e:	e03a      	b.n	80024c6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	68db      	ldr	r3, [r3, #12]
 8002454:	2b00      	cmp	r3, #0
 8002456:	d020      	beq.n	800249a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002458:	4b4f      	ldr	r3, [pc, #316]	; (8002598 <HAL_RCC_OscConfig+0x2b0>)
 800245a:	2201      	movs	r2, #1
 800245c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800245e:	f7fe fda9 	bl	8000fb4 <HAL_GetTick>
 8002462:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002464:	e008      	b.n	8002478 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002466:	f7fe fda5 	bl	8000fb4 <HAL_GetTick>
 800246a:	4602      	mov	r2, r0
 800246c:	693b      	ldr	r3, [r7, #16]
 800246e:	1ad3      	subs	r3, r2, r3
 8002470:	2b02      	cmp	r3, #2
 8002472:	d901      	bls.n	8002478 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002474:	2303      	movs	r3, #3
 8002476:	e16e      	b.n	8002756 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002478:	4b46      	ldr	r3, [pc, #280]	; (8002594 <HAL_RCC_OscConfig+0x2ac>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f003 0302 	and.w	r3, r3, #2
 8002480:	2b00      	cmp	r3, #0
 8002482:	d0f0      	beq.n	8002466 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002484:	4b43      	ldr	r3, [pc, #268]	; (8002594 <HAL_RCC_OscConfig+0x2ac>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	691b      	ldr	r3, [r3, #16]
 8002490:	00db      	lsls	r3, r3, #3
 8002492:	4940      	ldr	r1, [pc, #256]	; (8002594 <HAL_RCC_OscConfig+0x2ac>)
 8002494:	4313      	orrs	r3, r2
 8002496:	600b      	str	r3, [r1, #0]
 8002498:	e015      	b.n	80024c6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800249a:	4b3f      	ldr	r3, [pc, #252]	; (8002598 <HAL_RCC_OscConfig+0x2b0>)
 800249c:	2200      	movs	r2, #0
 800249e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024a0:	f7fe fd88 	bl	8000fb4 <HAL_GetTick>
 80024a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024a6:	e008      	b.n	80024ba <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80024a8:	f7fe fd84 	bl	8000fb4 <HAL_GetTick>
 80024ac:	4602      	mov	r2, r0
 80024ae:	693b      	ldr	r3, [r7, #16]
 80024b0:	1ad3      	subs	r3, r2, r3
 80024b2:	2b02      	cmp	r3, #2
 80024b4:	d901      	bls.n	80024ba <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80024b6:	2303      	movs	r3, #3
 80024b8:	e14d      	b.n	8002756 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024ba:	4b36      	ldr	r3, [pc, #216]	; (8002594 <HAL_RCC_OscConfig+0x2ac>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f003 0302 	and.w	r3, r3, #2
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d1f0      	bne.n	80024a8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f003 0308 	and.w	r3, r3, #8
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d030      	beq.n	8002534 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	695b      	ldr	r3, [r3, #20]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d016      	beq.n	8002508 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80024da:	4b30      	ldr	r3, [pc, #192]	; (800259c <HAL_RCC_OscConfig+0x2b4>)
 80024dc:	2201      	movs	r2, #1
 80024de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024e0:	f7fe fd68 	bl	8000fb4 <HAL_GetTick>
 80024e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024e6:	e008      	b.n	80024fa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80024e8:	f7fe fd64 	bl	8000fb4 <HAL_GetTick>
 80024ec:	4602      	mov	r2, r0
 80024ee:	693b      	ldr	r3, [r7, #16]
 80024f0:	1ad3      	subs	r3, r2, r3
 80024f2:	2b02      	cmp	r3, #2
 80024f4:	d901      	bls.n	80024fa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80024f6:	2303      	movs	r3, #3
 80024f8:	e12d      	b.n	8002756 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024fa:	4b26      	ldr	r3, [pc, #152]	; (8002594 <HAL_RCC_OscConfig+0x2ac>)
 80024fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80024fe:	f003 0302 	and.w	r3, r3, #2
 8002502:	2b00      	cmp	r3, #0
 8002504:	d0f0      	beq.n	80024e8 <HAL_RCC_OscConfig+0x200>
 8002506:	e015      	b.n	8002534 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002508:	4b24      	ldr	r3, [pc, #144]	; (800259c <HAL_RCC_OscConfig+0x2b4>)
 800250a:	2200      	movs	r2, #0
 800250c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800250e:	f7fe fd51 	bl	8000fb4 <HAL_GetTick>
 8002512:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002514:	e008      	b.n	8002528 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002516:	f7fe fd4d 	bl	8000fb4 <HAL_GetTick>
 800251a:	4602      	mov	r2, r0
 800251c:	693b      	ldr	r3, [r7, #16]
 800251e:	1ad3      	subs	r3, r2, r3
 8002520:	2b02      	cmp	r3, #2
 8002522:	d901      	bls.n	8002528 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002524:	2303      	movs	r3, #3
 8002526:	e116      	b.n	8002756 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002528:	4b1a      	ldr	r3, [pc, #104]	; (8002594 <HAL_RCC_OscConfig+0x2ac>)
 800252a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800252c:	f003 0302 	and.w	r3, r3, #2
 8002530:	2b00      	cmp	r3, #0
 8002532:	d1f0      	bne.n	8002516 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f003 0304 	and.w	r3, r3, #4
 800253c:	2b00      	cmp	r3, #0
 800253e:	f000 80a0 	beq.w	8002682 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002542:	2300      	movs	r3, #0
 8002544:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002546:	4b13      	ldr	r3, [pc, #76]	; (8002594 <HAL_RCC_OscConfig+0x2ac>)
 8002548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800254a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800254e:	2b00      	cmp	r3, #0
 8002550:	d10f      	bne.n	8002572 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002552:	2300      	movs	r3, #0
 8002554:	60fb      	str	r3, [r7, #12]
 8002556:	4b0f      	ldr	r3, [pc, #60]	; (8002594 <HAL_RCC_OscConfig+0x2ac>)
 8002558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800255a:	4a0e      	ldr	r2, [pc, #56]	; (8002594 <HAL_RCC_OscConfig+0x2ac>)
 800255c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002560:	6413      	str	r3, [r2, #64]	; 0x40
 8002562:	4b0c      	ldr	r3, [pc, #48]	; (8002594 <HAL_RCC_OscConfig+0x2ac>)
 8002564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002566:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800256a:	60fb      	str	r3, [r7, #12]
 800256c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800256e:	2301      	movs	r3, #1
 8002570:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002572:	4b0b      	ldr	r3, [pc, #44]	; (80025a0 <HAL_RCC_OscConfig+0x2b8>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800257a:	2b00      	cmp	r3, #0
 800257c:	d121      	bne.n	80025c2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800257e:	4b08      	ldr	r3, [pc, #32]	; (80025a0 <HAL_RCC_OscConfig+0x2b8>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	4a07      	ldr	r2, [pc, #28]	; (80025a0 <HAL_RCC_OscConfig+0x2b8>)
 8002584:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002588:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800258a:	f7fe fd13 	bl	8000fb4 <HAL_GetTick>
 800258e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002590:	e011      	b.n	80025b6 <HAL_RCC_OscConfig+0x2ce>
 8002592:	bf00      	nop
 8002594:	40023800 	.word	0x40023800
 8002598:	42470000 	.word	0x42470000
 800259c:	42470e80 	.word	0x42470e80
 80025a0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025a4:	f7fe fd06 	bl	8000fb4 <HAL_GetTick>
 80025a8:	4602      	mov	r2, r0
 80025aa:	693b      	ldr	r3, [r7, #16]
 80025ac:	1ad3      	subs	r3, r2, r3
 80025ae:	2b02      	cmp	r3, #2
 80025b0:	d901      	bls.n	80025b6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80025b2:	2303      	movs	r3, #3
 80025b4:	e0cf      	b.n	8002756 <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025b6:	4b6a      	ldr	r3, [pc, #424]	; (8002760 <HAL_RCC_OscConfig+0x478>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d0f0      	beq.n	80025a4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	689b      	ldr	r3, [r3, #8]
 80025c6:	2b01      	cmp	r3, #1
 80025c8:	d106      	bne.n	80025d8 <HAL_RCC_OscConfig+0x2f0>
 80025ca:	4b66      	ldr	r3, [pc, #408]	; (8002764 <HAL_RCC_OscConfig+0x47c>)
 80025cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025ce:	4a65      	ldr	r2, [pc, #404]	; (8002764 <HAL_RCC_OscConfig+0x47c>)
 80025d0:	f043 0301 	orr.w	r3, r3, #1
 80025d4:	6713      	str	r3, [r2, #112]	; 0x70
 80025d6:	e01c      	b.n	8002612 <HAL_RCC_OscConfig+0x32a>
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	689b      	ldr	r3, [r3, #8]
 80025dc:	2b05      	cmp	r3, #5
 80025de:	d10c      	bne.n	80025fa <HAL_RCC_OscConfig+0x312>
 80025e0:	4b60      	ldr	r3, [pc, #384]	; (8002764 <HAL_RCC_OscConfig+0x47c>)
 80025e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025e4:	4a5f      	ldr	r2, [pc, #380]	; (8002764 <HAL_RCC_OscConfig+0x47c>)
 80025e6:	f043 0304 	orr.w	r3, r3, #4
 80025ea:	6713      	str	r3, [r2, #112]	; 0x70
 80025ec:	4b5d      	ldr	r3, [pc, #372]	; (8002764 <HAL_RCC_OscConfig+0x47c>)
 80025ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025f0:	4a5c      	ldr	r2, [pc, #368]	; (8002764 <HAL_RCC_OscConfig+0x47c>)
 80025f2:	f043 0301 	orr.w	r3, r3, #1
 80025f6:	6713      	str	r3, [r2, #112]	; 0x70
 80025f8:	e00b      	b.n	8002612 <HAL_RCC_OscConfig+0x32a>
 80025fa:	4b5a      	ldr	r3, [pc, #360]	; (8002764 <HAL_RCC_OscConfig+0x47c>)
 80025fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025fe:	4a59      	ldr	r2, [pc, #356]	; (8002764 <HAL_RCC_OscConfig+0x47c>)
 8002600:	f023 0301 	bic.w	r3, r3, #1
 8002604:	6713      	str	r3, [r2, #112]	; 0x70
 8002606:	4b57      	ldr	r3, [pc, #348]	; (8002764 <HAL_RCC_OscConfig+0x47c>)
 8002608:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800260a:	4a56      	ldr	r2, [pc, #344]	; (8002764 <HAL_RCC_OscConfig+0x47c>)
 800260c:	f023 0304 	bic.w	r3, r3, #4
 8002610:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	689b      	ldr	r3, [r3, #8]
 8002616:	2b00      	cmp	r3, #0
 8002618:	d015      	beq.n	8002646 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800261a:	f7fe fccb 	bl	8000fb4 <HAL_GetTick>
 800261e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002620:	e00a      	b.n	8002638 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002622:	f7fe fcc7 	bl	8000fb4 <HAL_GetTick>
 8002626:	4602      	mov	r2, r0
 8002628:	693b      	ldr	r3, [r7, #16]
 800262a:	1ad3      	subs	r3, r2, r3
 800262c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002630:	4293      	cmp	r3, r2
 8002632:	d901      	bls.n	8002638 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002634:	2303      	movs	r3, #3
 8002636:	e08e      	b.n	8002756 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002638:	4b4a      	ldr	r3, [pc, #296]	; (8002764 <HAL_RCC_OscConfig+0x47c>)
 800263a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800263c:	f003 0302 	and.w	r3, r3, #2
 8002640:	2b00      	cmp	r3, #0
 8002642:	d0ee      	beq.n	8002622 <HAL_RCC_OscConfig+0x33a>
 8002644:	e014      	b.n	8002670 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002646:	f7fe fcb5 	bl	8000fb4 <HAL_GetTick>
 800264a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800264c:	e00a      	b.n	8002664 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800264e:	f7fe fcb1 	bl	8000fb4 <HAL_GetTick>
 8002652:	4602      	mov	r2, r0
 8002654:	693b      	ldr	r3, [r7, #16]
 8002656:	1ad3      	subs	r3, r2, r3
 8002658:	f241 3288 	movw	r2, #5000	; 0x1388
 800265c:	4293      	cmp	r3, r2
 800265e:	d901      	bls.n	8002664 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002660:	2303      	movs	r3, #3
 8002662:	e078      	b.n	8002756 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002664:	4b3f      	ldr	r3, [pc, #252]	; (8002764 <HAL_RCC_OscConfig+0x47c>)
 8002666:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002668:	f003 0302 	and.w	r3, r3, #2
 800266c:	2b00      	cmp	r3, #0
 800266e:	d1ee      	bne.n	800264e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002670:	7dfb      	ldrb	r3, [r7, #23]
 8002672:	2b01      	cmp	r3, #1
 8002674:	d105      	bne.n	8002682 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002676:	4b3b      	ldr	r3, [pc, #236]	; (8002764 <HAL_RCC_OscConfig+0x47c>)
 8002678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800267a:	4a3a      	ldr	r2, [pc, #232]	; (8002764 <HAL_RCC_OscConfig+0x47c>)
 800267c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002680:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	699b      	ldr	r3, [r3, #24]
 8002686:	2b00      	cmp	r3, #0
 8002688:	d064      	beq.n	8002754 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800268a:	4b36      	ldr	r3, [pc, #216]	; (8002764 <HAL_RCC_OscConfig+0x47c>)
 800268c:	689b      	ldr	r3, [r3, #8]
 800268e:	f003 030c 	and.w	r3, r3, #12
 8002692:	2b08      	cmp	r3, #8
 8002694:	d05c      	beq.n	8002750 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	699b      	ldr	r3, [r3, #24]
 800269a:	2b02      	cmp	r3, #2
 800269c:	d141      	bne.n	8002722 <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800269e:	4b32      	ldr	r3, [pc, #200]	; (8002768 <HAL_RCC_OscConfig+0x480>)
 80026a0:	2200      	movs	r2, #0
 80026a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026a4:	f7fe fc86 	bl	8000fb4 <HAL_GetTick>
 80026a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026aa:	e008      	b.n	80026be <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026ac:	f7fe fc82 	bl	8000fb4 <HAL_GetTick>
 80026b0:	4602      	mov	r2, r0
 80026b2:	693b      	ldr	r3, [r7, #16]
 80026b4:	1ad3      	subs	r3, r2, r3
 80026b6:	2b02      	cmp	r3, #2
 80026b8:	d901      	bls.n	80026be <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 80026ba:	2303      	movs	r3, #3
 80026bc:	e04b      	b.n	8002756 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026be:	4b29      	ldr	r3, [pc, #164]	; (8002764 <HAL_RCC_OscConfig+0x47c>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d1f0      	bne.n	80026ac <HAL_RCC_OscConfig+0x3c4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	69da      	ldr	r2, [r3, #28]
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6a1b      	ldr	r3, [r3, #32]
 80026d2:	431a      	orrs	r2, r3
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026d8:	019b      	lsls	r3, r3, #6
 80026da:	431a      	orrs	r2, r3
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026e0:	085b      	lsrs	r3, r3, #1
 80026e2:	3b01      	subs	r3, #1
 80026e4:	041b      	lsls	r3, r3, #16
 80026e6:	431a      	orrs	r2, r3
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026ec:	061b      	lsls	r3, r3, #24
 80026ee:	491d      	ldr	r1, [pc, #116]	; (8002764 <HAL_RCC_OscConfig+0x47c>)
 80026f0:	4313      	orrs	r3, r2
 80026f2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80026f4:	4b1c      	ldr	r3, [pc, #112]	; (8002768 <HAL_RCC_OscConfig+0x480>)
 80026f6:	2201      	movs	r2, #1
 80026f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026fa:	f7fe fc5b 	bl	8000fb4 <HAL_GetTick>
 80026fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002700:	e008      	b.n	8002714 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002702:	f7fe fc57 	bl	8000fb4 <HAL_GetTick>
 8002706:	4602      	mov	r2, r0
 8002708:	693b      	ldr	r3, [r7, #16]
 800270a:	1ad3      	subs	r3, r2, r3
 800270c:	2b02      	cmp	r3, #2
 800270e:	d901      	bls.n	8002714 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8002710:	2303      	movs	r3, #3
 8002712:	e020      	b.n	8002756 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002714:	4b13      	ldr	r3, [pc, #76]	; (8002764 <HAL_RCC_OscConfig+0x47c>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800271c:	2b00      	cmp	r3, #0
 800271e:	d0f0      	beq.n	8002702 <HAL_RCC_OscConfig+0x41a>
 8002720:	e018      	b.n	8002754 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002722:	4b11      	ldr	r3, [pc, #68]	; (8002768 <HAL_RCC_OscConfig+0x480>)
 8002724:	2200      	movs	r2, #0
 8002726:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002728:	f7fe fc44 	bl	8000fb4 <HAL_GetTick>
 800272c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800272e:	e008      	b.n	8002742 <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002730:	f7fe fc40 	bl	8000fb4 <HAL_GetTick>
 8002734:	4602      	mov	r2, r0
 8002736:	693b      	ldr	r3, [r7, #16]
 8002738:	1ad3      	subs	r3, r2, r3
 800273a:	2b02      	cmp	r3, #2
 800273c:	d901      	bls.n	8002742 <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 800273e:	2303      	movs	r3, #3
 8002740:	e009      	b.n	8002756 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002742:	4b08      	ldr	r3, [pc, #32]	; (8002764 <HAL_RCC_OscConfig+0x47c>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800274a:	2b00      	cmp	r3, #0
 800274c:	d1f0      	bne.n	8002730 <HAL_RCC_OscConfig+0x448>
 800274e:	e001      	b.n	8002754 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8002750:	2301      	movs	r3, #1
 8002752:	e000      	b.n	8002756 <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 8002754:	2300      	movs	r3, #0
}
 8002756:	4618      	mov	r0, r3
 8002758:	3718      	adds	r7, #24
 800275a:	46bd      	mov	sp, r7
 800275c:	bd80      	pop	{r7, pc}
 800275e:	bf00      	nop
 8002760:	40007000 	.word	0x40007000
 8002764:	40023800 	.word	0x40023800
 8002768:	42470060 	.word	0x42470060

0800276c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b084      	sub	sp, #16
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
 8002774:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	2b00      	cmp	r3, #0
 800277a:	d101      	bne.n	8002780 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800277c:	2301      	movs	r3, #1
 800277e:	e0ca      	b.n	8002916 <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002780:	4b67      	ldr	r3, [pc, #412]	; (8002920 <HAL_RCC_ClockConfig+0x1b4>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f003 030f 	and.w	r3, r3, #15
 8002788:	683a      	ldr	r2, [r7, #0]
 800278a:	429a      	cmp	r2, r3
 800278c:	d90c      	bls.n	80027a8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800278e:	4b64      	ldr	r3, [pc, #400]	; (8002920 <HAL_RCC_ClockConfig+0x1b4>)
 8002790:	683a      	ldr	r2, [r7, #0]
 8002792:	b2d2      	uxtb	r2, r2
 8002794:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002796:	4b62      	ldr	r3, [pc, #392]	; (8002920 <HAL_RCC_ClockConfig+0x1b4>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f003 030f 	and.w	r3, r3, #15
 800279e:	683a      	ldr	r2, [r7, #0]
 80027a0:	429a      	cmp	r2, r3
 80027a2:	d001      	beq.n	80027a8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80027a4:	2301      	movs	r3, #1
 80027a6:	e0b6      	b.n	8002916 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f003 0302 	and.w	r3, r3, #2
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d020      	beq.n	80027f6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f003 0304 	and.w	r3, r3, #4
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d005      	beq.n	80027cc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80027c0:	4b58      	ldr	r3, [pc, #352]	; (8002924 <HAL_RCC_ClockConfig+0x1b8>)
 80027c2:	689b      	ldr	r3, [r3, #8]
 80027c4:	4a57      	ldr	r2, [pc, #348]	; (8002924 <HAL_RCC_ClockConfig+0x1b8>)
 80027c6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80027ca:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f003 0308 	and.w	r3, r3, #8
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d005      	beq.n	80027e4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80027d8:	4b52      	ldr	r3, [pc, #328]	; (8002924 <HAL_RCC_ClockConfig+0x1b8>)
 80027da:	689b      	ldr	r3, [r3, #8]
 80027dc:	4a51      	ldr	r2, [pc, #324]	; (8002924 <HAL_RCC_ClockConfig+0x1b8>)
 80027de:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80027e2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027e4:	4b4f      	ldr	r3, [pc, #316]	; (8002924 <HAL_RCC_ClockConfig+0x1b8>)
 80027e6:	689b      	ldr	r3, [r3, #8]
 80027e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	689b      	ldr	r3, [r3, #8]
 80027f0:	494c      	ldr	r1, [pc, #304]	; (8002924 <HAL_RCC_ClockConfig+0x1b8>)
 80027f2:	4313      	orrs	r3, r2
 80027f4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f003 0301 	and.w	r3, r3, #1
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d044      	beq.n	800288c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	685b      	ldr	r3, [r3, #4]
 8002806:	2b01      	cmp	r3, #1
 8002808:	d107      	bne.n	800281a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800280a:	4b46      	ldr	r3, [pc, #280]	; (8002924 <HAL_RCC_ClockConfig+0x1b8>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002812:	2b00      	cmp	r3, #0
 8002814:	d119      	bne.n	800284a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002816:	2301      	movs	r3, #1
 8002818:	e07d      	b.n	8002916 <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	685b      	ldr	r3, [r3, #4]
 800281e:	2b02      	cmp	r3, #2
 8002820:	d003      	beq.n	800282a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002826:	2b03      	cmp	r3, #3
 8002828:	d107      	bne.n	800283a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800282a:	4b3e      	ldr	r3, [pc, #248]	; (8002924 <HAL_RCC_ClockConfig+0x1b8>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002832:	2b00      	cmp	r3, #0
 8002834:	d109      	bne.n	800284a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002836:	2301      	movs	r3, #1
 8002838:	e06d      	b.n	8002916 <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800283a:	4b3a      	ldr	r3, [pc, #232]	; (8002924 <HAL_RCC_ClockConfig+0x1b8>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f003 0302 	and.w	r3, r3, #2
 8002842:	2b00      	cmp	r3, #0
 8002844:	d101      	bne.n	800284a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002846:	2301      	movs	r3, #1
 8002848:	e065      	b.n	8002916 <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800284a:	4b36      	ldr	r3, [pc, #216]	; (8002924 <HAL_RCC_ClockConfig+0x1b8>)
 800284c:	689b      	ldr	r3, [r3, #8]
 800284e:	f023 0203 	bic.w	r2, r3, #3
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	685b      	ldr	r3, [r3, #4]
 8002856:	4933      	ldr	r1, [pc, #204]	; (8002924 <HAL_RCC_ClockConfig+0x1b8>)
 8002858:	4313      	orrs	r3, r2
 800285a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800285c:	f7fe fbaa 	bl	8000fb4 <HAL_GetTick>
 8002860:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002862:	e00a      	b.n	800287a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002864:	f7fe fba6 	bl	8000fb4 <HAL_GetTick>
 8002868:	4602      	mov	r2, r0
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	1ad3      	subs	r3, r2, r3
 800286e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002872:	4293      	cmp	r3, r2
 8002874:	d901      	bls.n	800287a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002876:	2303      	movs	r3, #3
 8002878:	e04d      	b.n	8002916 <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800287a:	4b2a      	ldr	r3, [pc, #168]	; (8002924 <HAL_RCC_ClockConfig+0x1b8>)
 800287c:	689b      	ldr	r3, [r3, #8]
 800287e:	f003 020c 	and.w	r2, r3, #12
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	685b      	ldr	r3, [r3, #4]
 8002886:	009b      	lsls	r3, r3, #2
 8002888:	429a      	cmp	r2, r3
 800288a:	d1eb      	bne.n	8002864 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800288c:	4b24      	ldr	r3, [pc, #144]	; (8002920 <HAL_RCC_ClockConfig+0x1b4>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f003 030f 	and.w	r3, r3, #15
 8002894:	683a      	ldr	r2, [r7, #0]
 8002896:	429a      	cmp	r2, r3
 8002898:	d20c      	bcs.n	80028b4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800289a:	4b21      	ldr	r3, [pc, #132]	; (8002920 <HAL_RCC_ClockConfig+0x1b4>)
 800289c:	683a      	ldr	r2, [r7, #0]
 800289e:	b2d2      	uxtb	r2, r2
 80028a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80028a2:	4b1f      	ldr	r3, [pc, #124]	; (8002920 <HAL_RCC_ClockConfig+0x1b4>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f003 030f 	and.w	r3, r3, #15
 80028aa:	683a      	ldr	r2, [r7, #0]
 80028ac:	429a      	cmp	r2, r3
 80028ae:	d001      	beq.n	80028b4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80028b0:	2301      	movs	r3, #1
 80028b2:	e030      	b.n	8002916 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f003 0304 	and.w	r3, r3, #4
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d008      	beq.n	80028d2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80028c0:	4b18      	ldr	r3, [pc, #96]	; (8002924 <HAL_RCC_ClockConfig+0x1b8>)
 80028c2:	689b      	ldr	r3, [r3, #8]
 80028c4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	68db      	ldr	r3, [r3, #12]
 80028cc:	4915      	ldr	r1, [pc, #84]	; (8002924 <HAL_RCC_ClockConfig+0x1b8>)
 80028ce:	4313      	orrs	r3, r2
 80028d0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f003 0308 	and.w	r3, r3, #8
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d009      	beq.n	80028f2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80028de:	4b11      	ldr	r3, [pc, #68]	; (8002924 <HAL_RCC_ClockConfig+0x1b8>)
 80028e0:	689b      	ldr	r3, [r3, #8]
 80028e2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	691b      	ldr	r3, [r3, #16]
 80028ea:	00db      	lsls	r3, r3, #3
 80028ec:	490d      	ldr	r1, [pc, #52]	; (8002924 <HAL_RCC_ClockConfig+0x1b8>)
 80028ee:	4313      	orrs	r3, r2
 80028f0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80028f2:	f000 f81d 	bl	8002930 <HAL_RCC_GetSysClockFreq>
 80028f6:	4601      	mov	r1, r0
 80028f8:	4b0a      	ldr	r3, [pc, #40]	; (8002924 <HAL_RCC_ClockConfig+0x1b8>)
 80028fa:	689b      	ldr	r3, [r3, #8]
 80028fc:	091b      	lsrs	r3, r3, #4
 80028fe:	f003 030f 	and.w	r3, r3, #15
 8002902:	4a09      	ldr	r2, [pc, #36]	; (8002928 <HAL_RCC_ClockConfig+0x1bc>)
 8002904:	5cd3      	ldrb	r3, [r2, r3]
 8002906:	fa21 f303 	lsr.w	r3, r1, r3
 800290a:	4a08      	ldr	r2, [pc, #32]	; (800292c <HAL_RCC_ClockConfig+0x1c0>)
 800290c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 800290e:	2000      	movs	r0, #0
 8002910:	f7fe fb0c 	bl	8000f2c <HAL_InitTick>

  return HAL_OK;
 8002914:	2300      	movs	r3, #0
}
 8002916:	4618      	mov	r0, r3
 8002918:	3710      	adds	r7, #16
 800291a:	46bd      	mov	sp, r7
 800291c:	bd80      	pop	{r7, pc}
 800291e:	bf00      	nop
 8002920:	40023c00 	.word	0x40023c00
 8002924:	40023800 	.word	0x40023800
 8002928:	0800b0e4 	.word	0x0800b0e4
 800292c:	20000060 	.word	0x20000060

08002930 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002930:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002932:	b085      	sub	sp, #20
 8002934:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002936:	2300      	movs	r3, #0
 8002938:	607b      	str	r3, [r7, #4]
 800293a:	2300      	movs	r3, #0
 800293c:	60fb      	str	r3, [r7, #12]
 800293e:	2300      	movs	r3, #0
 8002940:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002942:	2300      	movs	r3, #0
 8002944:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002946:	4b50      	ldr	r3, [pc, #320]	; (8002a88 <HAL_RCC_GetSysClockFreq+0x158>)
 8002948:	689b      	ldr	r3, [r3, #8]
 800294a:	f003 030c 	and.w	r3, r3, #12
 800294e:	2b04      	cmp	r3, #4
 8002950:	d007      	beq.n	8002962 <HAL_RCC_GetSysClockFreq+0x32>
 8002952:	2b08      	cmp	r3, #8
 8002954:	d008      	beq.n	8002968 <HAL_RCC_GetSysClockFreq+0x38>
 8002956:	2b00      	cmp	r3, #0
 8002958:	f040 808d 	bne.w	8002a76 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800295c:	4b4b      	ldr	r3, [pc, #300]	; (8002a8c <HAL_RCC_GetSysClockFreq+0x15c>)
 800295e:	60bb      	str	r3, [r7, #8]
       break;
 8002960:	e08c      	b.n	8002a7c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002962:	4b4b      	ldr	r3, [pc, #300]	; (8002a90 <HAL_RCC_GetSysClockFreq+0x160>)
 8002964:	60bb      	str	r3, [r7, #8]
      break;
 8002966:	e089      	b.n	8002a7c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002968:	4b47      	ldr	r3, [pc, #284]	; (8002a88 <HAL_RCC_GetSysClockFreq+0x158>)
 800296a:	685b      	ldr	r3, [r3, #4]
 800296c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002970:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002972:	4b45      	ldr	r3, [pc, #276]	; (8002a88 <HAL_RCC_GetSysClockFreq+0x158>)
 8002974:	685b      	ldr	r3, [r3, #4]
 8002976:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800297a:	2b00      	cmp	r3, #0
 800297c:	d023      	beq.n	80029c6 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800297e:	4b42      	ldr	r3, [pc, #264]	; (8002a88 <HAL_RCC_GetSysClockFreq+0x158>)
 8002980:	685b      	ldr	r3, [r3, #4]
 8002982:	099b      	lsrs	r3, r3, #6
 8002984:	f04f 0400 	mov.w	r4, #0
 8002988:	f240 11ff 	movw	r1, #511	; 0x1ff
 800298c:	f04f 0200 	mov.w	r2, #0
 8002990:	ea03 0501 	and.w	r5, r3, r1
 8002994:	ea04 0602 	and.w	r6, r4, r2
 8002998:	4a3d      	ldr	r2, [pc, #244]	; (8002a90 <HAL_RCC_GetSysClockFreq+0x160>)
 800299a:	fb02 f106 	mul.w	r1, r2, r6
 800299e:	2200      	movs	r2, #0
 80029a0:	fb02 f205 	mul.w	r2, r2, r5
 80029a4:	440a      	add	r2, r1
 80029a6:	493a      	ldr	r1, [pc, #232]	; (8002a90 <HAL_RCC_GetSysClockFreq+0x160>)
 80029a8:	fba5 0101 	umull	r0, r1, r5, r1
 80029ac:	1853      	adds	r3, r2, r1
 80029ae:	4619      	mov	r1, r3
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	f04f 0400 	mov.w	r4, #0
 80029b6:	461a      	mov	r2, r3
 80029b8:	4623      	mov	r3, r4
 80029ba:	f7fe f915 	bl	8000be8 <__aeabi_uldivmod>
 80029be:	4603      	mov	r3, r0
 80029c0:	460c      	mov	r4, r1
 80029c2:	60fb      	str	r3, [r7, #12]
 80029c4:	e049      	b.n	8002a5a <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80029c6:	4b30      	ldr	r3, [pc, #192]	; (8002a88 <HAL_RCC_GetSysClockFreq+0x158>)
 80029c8:	685b      	ldr	r3, [r3, #4]
 80029ca:	099b      	lsrs	r3, r3, #6
 80029cc:	f04f 0400 	mov.w	r4, #0
 80029d0:	f240 11ff 	movw	r1, #511	; 0x1ff
 80029d4:	f04f 0200 	mov.w	r2, #0
 80029d8:	ea03 0501 	and.w	r5, r3, r1
 80029dc:	ea04 0602 	and.w	r6, r4, r2
 80029e0:	4629      	mov	r1, r5
 80029e2:	4632      	mov	r2, r6
 80029e4:	f04f 0300 	mov.w	r3, #0
 80029e8:	f04f 0400 	mov.w	r4, #0
 80029ec:	0154      	lsls	r4, r2, #5
 80029ee:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80029f2:	014b      	lsls	r3, r1, #5
 80029f4:	4619      	mov	r1, r3
 80029f6:	4622      	mov	r2, r4
 80029f8:	1b49      	subs	r1, r1, r5
 80029fa:	eb62 0206 	sbc.w	r2, r2, r6
 80029fe:	f04f 0300 	mov.w	r3, #0
 8002a02:	f04f 0400 	mov.w	r4, #0
 8002a06:	0194      	lsls	r4, r2, #6
 8002a08:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002a0c:	018b      	lsls	r3, r1, #6
 8002a0e:	1a5b      	subs	r3, r3, r1
 8002a10:	eb64 0402 	sbc.w	r4, r4, r2
 8002a14:	f04f 0100 	mov.w	r1, #0
 8002a18:	f04f 0200 	mov.w	r2, #0
 8002a1c:	00e2      	lsls	r2, r4, #3
 8002a1e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002a22:	00d9      	lsls	r1, r3, #3
 8002a24:	460b      	mov	r3, r1
 8002a26:	4614      	mov	r4, r2
 8002a28:	195b      	adds	r3, r3, r5
 8002a2a:	eb44 0406 	adc.w	r4, r4, r6
 8002a2e:	f04f 0100 	mov.w	r1, #0
 8002a32:	f04f 0200 	mov.w	r2, #0
 8002a36:	02a2      	lsls	r2, r4, #10
 8002a38:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002a3c:	0299      	lsls	r1, r3, #10
 8002a3e:	460b      	mov	r3, r1
 8002a40:	4614      	mov	r4, r2
 8002a42:	4618      	mov	r0, r3
 8002a44:	4621      	mov	r1, r4
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	f04f 0400 	mov.w	r4, #0
 8002a4c:	461a      	mov	r2, r3
 8002a4e:	4623      	mov	r3, r4
 8002a50:	f7fe f8ca 	bl	8000be8 <__aeabi_uldivmod>
 8002a54:	4603      	mov	r3, r0
 8002a56:	460c      	mov	r4, r1
 8002a58:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002a5a:	4b0b      	ldr	r3, [pc, #44]	; (8002a88 <HAL_RCC_GetSysClockFreq+0x158>)
 8002a5c:	685b      	ldr	r3, [r3, #4]
 8002a5e:	0c1b      	lsrs	r3, r3, #16
 8002a60:	f003 0303 	and.w	r3, r3, #3
 8002a64:	3301      	adds	r3, #1
 8002a66:	005b      	lsls	r3, r3, #1
 8002a68:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002a6a:	68fa      	ldr	r2, [r7, #12]
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a72:	60bb      	str	r3, [r7, #8]
      break;
 8002a74:	e002      	b.n	8002a7c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002a76:	4b05      	ldr	r3, [pc, #20]	; (8002a8c <HAL_RCC_GetSysClockFreq+0x15c>)
 8002a78:	60bb      	str	r3, [r7, #8]
      break;
 8002a7a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a7c:	68bb      	ldr	r3, [r7, #8]
}
 8002a7e:	4618      	mov	r0, r3
 8002a80:	3714      	adds	r7, #20
 8002a82:	46bd      	mov	sp, r7
 8002a84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002a86:	bf00      	nop
 8002a88:	40023800 	.word	0x40023800
 8002a8c:	00f42400 	.word	0x00f42400
 8002a90:	017d7840 	.word	0x017d7840

08002a94 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a94:	b480      	push	{r7}
 8002a96:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a98:	4b03      	ldr	r3, [pc, #12]	; (8002aa8 <HAL_RCC_GetHCLKFreq+0x14>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
}
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa4:	4770      	bx	lr
 8002aa6:	bf00      	nop
 8002aa8:	20000060 	.word	0x20000060

08002aac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002ab0:	f7ff fff0 	bl	8002a94 <HAL_RCC_GetHCLKFreq>
 8002ab4:	4601      	mov	r1, r0
 8002ab6:	4b05      	ldr	r3, [pc, #20]	; (8002acc <HAL_RCC_GetPCLK1Freq+0x20>)
 8002ab8:	689b      	ldr	r3, [r3, #8]
 8002aba:	0a9b      	lsrs	r3, r3, #10
 8002abc:	f003 0307 	and.w	r3, r3, #7
 8002ac0:	4a03      	ldr	r2, [pc, #12]	; (8002ad0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ac2:	5cd3      	ldrb	r3, [r2, r3]
 8002ac4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002ac8:	4618      	mov	r0, r3
 8002aca:	bd80      	pop	{r7, pc}
 8002acc:	40023800 	.word	0x40023800
 8002ad0:	0800b0f4 	.word	0x0800b0f4

08002ad4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002ad8:	f7ff ffdc 	bl	8002a94 <HAL_RCC_GetHCLKFreq>
 8002adc:	4601      	mov	r1, r0
 8002ade:	4b05      	ldr	r3, [pc, #20]	; (8002af4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002ae0:	689b      	ldr	r3, [r3, #8]
 8002ae2:	0b5b      	lsrs	r3, r3, #13
 8002ae4:	f003 0307 	and.w	r3, r3, #7
 8002ae8:	4a03      	ldr	r2, [pc, #12]	; (8002af8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002aea:	5cd3      	ldrb	r3, [r2, r3]
 8002aec:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002af0:	4618      	mov	r0, r3
 8002af2:	bd80      	pop	{r7, pc}
 8002af4:	40023800 	.word	0x40023800
 8002af8:	0800b0f4 	.word	0x0800b0f4

08002afc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b082      	sub	sp, #8
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d101      	bne.n	8002b0e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	e056      	b.n	8002bbc <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	2200      	movs	r2, #0
 8002b12:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002b1a:	b2db      	uxtb	r3, r3
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d106      	bne.n	8002b2e <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2200      	movs	r2, #0
 8002b24:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002b28:	6878      	ldr	r0, [r7, #4]
 8002b2a:	f006 fd1b 	bl	8009564 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	2202      	movs	r2, #2
 8002b32:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	681a      	ldr	r2, [r3, #0]
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002b44:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	685a      	ldr	r2, [r3, #4]
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	689b      	ldr	r3, [r3, #8]
 8002b4e:	431a      	orrs	r2, r3
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	68db      	ldr	r3, [r3, #12]
 8002b54:	431a      	orrs	r2, r3
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	691b      	ldr	r3, [r3, #16]
 8002b5a:	431a      	orrs	r2, r3
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	695b      	ldr	r3, [r3, #20]
 8002b60:	431a      	orrs	r2, r3
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	699b      	ldr	r3, [r3, #24]
 8002b66:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b6a:	431a      	orrs	r2, r3
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	69db      	ldr	r3, [r3, #28]
 8002b70:	431a      	orrs	r2, r3
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6a1b      	ldr	r3, [r3, #32]
 8002b76:	ea42 0103 	orr.w	r1, r2, r3
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	430a      	orrs	r2, r1
 8002b84:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	699b      	ldr	r3, [r3, #24]
 8002b8a:	0c1b      	lsrs	r3, r3, #16
 8002b8c:	f003 0104 	and.w	r1, r3, #4
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	430a      	orrs	r2, r1
 8002b9a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	69da      	ldr	r2, [r3, #28]
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002baa:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2200      	movs	r2, #0
 8002bb0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	2201      	movs	r2, #1
 8002bb6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002bba:	2300      	movs	r3, #0
}
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	3708      	adds	r7, #8
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	bd80      	pop	{r7, pc}

08002bc4 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b088      	sub	sp, #32
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	60f8      	str	r0, [r7, #12]
 8002bcc:	60b9      	str	r1, [r7, #8]
 8002bce:	603b      	str	r3, [r7, #0]
 8002bd0:	4613      	mov	r3, r2
 8002bd2:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002bde:	2b01      	cmp	r3, #1
 8002be0:	d101      	bne.n	8002be6 <HAL_SPI_Transmit+0x22>
 8002be2:	2302      	movs	r3, #2
 8002be4:	e11e      	b.n	8002e24 <HAL_SPI_Transmit+0x260>
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	2201      	movs	r2, #1
 8002bea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002bee:	f7fe f9e1 	bl	8000fb4 <HAL_GetTick>
 8002bf2:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002bf4:	88fb      	ldrh	r3, [r7, #6]
 8002bf6:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002bfe:	b2db      	uxtb	r3, r3
 8002c00:	2b01      	cmp	r3, #1
 8002c02:	d002      	beq.n	8002c0a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002c04:	2302      	movs	r3, #2
 8002c06:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002c08:	e103      	b.n	8002e12 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002c0a:	68bb      	ldr	r3, [r7, #8]
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d002      	beq.n	8002c16 <HAL_SPI_Transmit+0x52>
 8002c10:	88fb      	ldrh	r3, [r7, #6]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d102      	bne.n	8002c1c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002c16:	2301      	movs	r3, #1
 8002c18:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002c1a:	e0fa      	b.n	8002e12 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	2203      	movs	r2, #3
 8002c20:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	2200      	movs	r2, #0
 8002c28:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	68ba      	ldr	r2, [r7, #8]
 8002c2e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	88fa      	ldrh	r2, [r7, #6]
 8002c34:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	88fa      	ldrh	r2, [r7, #6]
 8002c3a:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	2200      	movs	r2, #0
 8002c40:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	2200      	movs	r2, #0
 8002c46:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	2200      	movs	r2, #0
 8002c52:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	2200      	movs	r2, #0
 8002c58:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	689b      	ldr	r3, [r3, #8]
 8002c5e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c62:	d107      	bne.n	8002c74 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	681a      	ldr	r2, [r3, #0]
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002c72:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c7e:	2b40      	cmp	r3, #64	; 0x40
 8002c80:	d007      	beq.n	8002c92 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	681a      	ldr	r2, [r3, #0]
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002c90:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	68db      	ldr	r3, [r3, #12]
 8002c96:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002c9a:	d14b      	bne.n	8002d34 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	685b      	ldr	r3, [r3, #4]
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d002      	beq.n	8002caa <HAL_SPI_Transmit+0xe6>
 8002ca4:	8afb      	ldrh	r3, [r7, #22]
 8002ca6:	2b01      	cmp	r3, #1
 8002ca8:	d13e      	bne.n	8002d28 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cae:	881a      	ldrh	r2, [r3, #0]
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cba:	1c9a      	adds	r2, r3, #2
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002cc4:	b29b      	uxth	r3, r3
 8002cc6:	3b01      	subs	r3, #1
 8002cc8:	b29a      	uxth	r2, r3
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002cce:	e02b      	b.n	8002d28 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	689b      	ldr	r3, [r3, #8]
 8002cd6:	f003 0302 	and.w	r3, r3, #2
 8002cda:	2b02      	cmp	r3, #2
 8002cdc:	d112      	bne.n	8002d04 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ce2:	881a      	ldrh	r2, [r3, #0]
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cee:	1c9a      	adds	r2, r3, #2
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002cf8:	b29b      	uxth	r3, r3
 8002cfa:	3b01      	subs	r3, #1
 8002cfc:	b29a      	uxth	r2, r3
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	86da      	strh	r2, [r3, #54]	; 0x36
 8002d02:	e011      	b.n	8002d28 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002d04:	f7fe f956 	bl	8000fb4 <HAL_GetTick>
 8002d08:	4602      	mov	r2, r0
 8002d0a:	69bb      	ldr	r3, [r7, #24]
 8002d0c:	1ad3      	subs	r3, r2, r3
 8002d0e:	683a      	ldr	r2, [r7, #0]
 8002d10:	429a      	cmp	r2, r3
 8002d12:	d803      	bhi.n	8002d1c <HAL_SPI_Transmit+0x158>
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d1a:	d102      	bne.n	8002d22 <HAL_SPI_Transmit+0x15e>
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d102      	bne.n	8002d28 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8002d22:	2303      	movs	r3, #3
 8002d24:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002d26:	e074      	b.n	8002e12 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d2c:	b29b      	uxth	r3, r3
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d1ce      	bne.n	8002cd0 <HAL_SPI_Transmit+0x10c>
 8002d32:	e04c      	b.n	8002dce <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	685b      	ldr	r3, [r3, #4]
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d002      	beq.n	8002d42 <HAL_SPI_Transmit+0x17e>
 8002d3c:	8afb      	ldrh	r3, [r7, #22]
 8002d3e:	2b01      	cmp	r3, #1
 8002d40:	d140      	bne.n	8002dc4 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	330c      	adds	r3, #12
 8002d4c:	7812      	ldrb	r2, [r2, #0]
 8002d4e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d54:	1c5a      	adds	r2, r3, #1
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d5e:	b29b      	uxth	r3, r3
 8002d60:	3b01      	subs	r3, #1
 8002d62:	b29a      	uxth	r2, r3
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002d68:	e02c      	b.n	8002dc4 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	689b      	ldr	r3, [r3, #8]
 8002d70:	f003 0302 	and.w	r3, r3, #2
 8002d74:	2b02      	cmp	r3, #2
 8002d76:	d113      	bne.n	8002da0 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	330c      	adds	r3, #12
 8002d82:	7812      	ldrb	r2, [r2, #0]
 8002d84:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d8a:	1c5a      	adds	r2, r3, #1
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d94:	b29b      	uxth	r3, r3
 8002d96:	3b01      	subs	r3, #1
 8002d98:	b29a      	uxth	r2, r3
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	86da      	strh	r2, [r3, #54]	; 0x36
 8002d9e:	e011      	b.n	8002dc4 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002da0:	f7fe f908 	bl	8000fb4 <HAL_GetTick>
 8002da4:	4602      	mov	r2, r0
 8002da6:	69bb      	ldr	r3, [r7, #24]
 8002da8:	1ad3      	subs	r3, r2, r3
 8002daa:	683a      	ldr	r2, [r7, #0]
 8002dac:	429a      	cmp	r2, r3
 8002dae:	d803      	bhi.n	8002db8 <HAL_SPI_Transmit+0x1f4>
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002db6:	d102      	bne.n	8002dbe <HAL_SPI_Transmit+0x1fa>
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d102      	bne.n	8002dc4 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8002dbe:	2303      	movs	r3, #3
 8002dc0:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002dc2:	e026      	b.n	8002e12 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002dc8:	b29b      	uxth	r3, r3
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d1cd      	bne.n	8002d6a <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002dce:	69ba      	ldr	r2, [r7, #24]
 8002dd0:	6839      	ldr	r1, [r7, #0]
 8002dd2:	68f8      	ldr	r0, [r7, #12]
 8002dd4:	f000 fba4 	bl	8003520 <SPI_EndRxTxTransaction>
 8002dd8:	4603      	mov	r3, r0
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d002      	beq.n	8002de4 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	2220      	movs	r2, #32
 8002de2:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	689b      	ldr	r3, [r3, #8]
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d10a      	bne.n	8002e02 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002dec:	2300      	movs	r3, #0
 8002dee:	613b      	str	r3, [r7, #16]
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	68db      	ldr	r3, [r3, #12]
 8002df6:	613b      	str	r3, [r7, #16]
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	689b      	ldr	r3, [r3, #8]
 8002dfe:	613b      	str	r3, [r7, #16]
 8002e00:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d002      	beq.n	8002e10 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	77fb      	strb	r3, [r7, #31]
 8002e0e:	e000      	b.n	8002e12 <HAL_SPI_Transmit+0x24e>
  }

error:
 8002e10:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	2201      	movs	r2, #1
 8002e16:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002e22:	7ffb      	ldrb	r3, [r7, #31]
}
 8002e24:	4618      	mov	r0, r3
 8002e26:	3720      	adds	r7, #32
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	bd80      	pop	{r7, pc}

08002e2c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b088      	sub	sp, #32
 8002e30:	af02      	add	r7, sp, #8
 8002e32:	60f8      	str	r0, [r7, #12]
 8002e34:	60b9      	str	r1, [r7, #8]
 8002e36:	603b      	str	r3, [r7, #0]
 8002e38:	4613      	mov	r3, r2
 8002e3a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	685b      	ldr	r3, [r3, #4]
 8002e44:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002e48:	d112      	bne.n	8002e70 <HAL_SPI_Receive+0x44>
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	689b      	ldr	r3, [r3, #8]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d10e      	bne.n	8002e70 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	2204      	movs	r2, #4
 8002e56:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002e5a:	88fa      	ldrh	r2, [r7, #6]
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	9300      	str	r3, [sp, #0]
 8002e60:	4613      	mov	r3, r2
 8002e62:	68ba      	ldr	r2, [r7, #8]
 8002e64:	68b9      	ldr	r1, [r7, #8]
 8002e66:	68f8      	ldr	r0, [r7, #12]
 8002e68:	f000 f8e9 	bl	800303e <HAL_SPI_TransmitReceive>
 8002e6c:	4603      	mov	r3, r0
 8002e6e:	e0e2      	b.n	8003036 <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002e76:	2b01      	cmp	r3, #1
 8002e78:	d101      	bne.n	8002e7e <HAL_SPI_Receive+0x52>
 8002e7a:	2302      	movs	r3, #2
 8002e7c:	e0db      	b.n	8003036 <HAL_SPI_Receive+0x20a>
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	2201      	movs	r2, #1
 8002e82:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002e86:	f7fe f895 	bl	8000fb4 <HAL_GetTick>
 8002e8a:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002e92:	b2db      	uxtb	r3, r3
 8002e94:	2b01      	cmp	r3, #1
 8002e96:	d002      	beq.n	8002e9e <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8002e98:	2302      	movs	r3, #2
 8002e9a:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002e9c:	e0c2      	b.n	8003024 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 8002e9e:	68bb      	ldr	r3, [r7, #8]
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d002      	beq.n	8002eaa <HAL_SPI_Receive+0x7e>
 8002ea4:	88fb      	ldrh	r3, [r7, #6]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d102      	bne.n	8002eb0 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8002eaa:	2301      	movs	r3, #1
 8002eac:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002eae:	e0b9      	b.n	8003024 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	2204      	movs	r2, #4
 8002eb4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	2200      	movs	r2, #0
 8002ebc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	68ba      	ldr	r2, [r7, #8]
 8002ec2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	88fa      	ldrh	r2, [r7, #6]
 8002ec8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	88fa      	ldrh	r2, [r7, #6]
 8002ece:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	2200      	movs	r2, #0
 8002eda:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	2200      	movs	r2, #0
 8002ee0:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	2200      	movs	r2, #0
 8002eec:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	689b      	ldr	r3, [r3, #8]
 8002ef2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002ef6:	d107      	bne.n	8002f08 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	681a      	ldr	r2, [r3, #0]
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002f06:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f12:	2b40      	cmp	r3, #64	; 0x40
 8002f14:	d007      	beq.n	8002f26 <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	681a      	ldr	r2, [r3, #0]
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002f24:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	68db      	ldr	r3, [r3, #12]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d162      	bne.n	8002ff4 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002f2e:	e02e      	b.n	8002f8e <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	689b      	ldr	r3, [r3, #8]
 8002f36:	f003 0301 	and.w	r3, r3, #1
 8002f3a:	2b01      	cmp	r3, #1
 8002f3c:	d115      	bne.n	8002f6a <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f103 020c 	add.w	r2, r3, #12
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f4a:	7812      	ldrb	r2, [r2, #0]
 8002f4c:	b2d2      	uxtb	r2, r2
 8002f4e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f54:	1c5a      	adds	r2, r3, #1
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f5e:	b29b      	uxth	r3, r3
 8002f60:	3b01      	subs	r3, #1
 8002f62:	b29a      	uxth	r2, r3
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002f68:	e011      	b.n	8002f8e <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002f6a:	f7fe f823 	bl	8000fb4 <HAL_GetTick>
 8002f6e:	4602      	mov	r2, r0
 8002f70:	693b      	ldr	r3, [r7, #16]
 8002f72:	1ad3      	subs	r3, r2, r3
 8002f74:	683a      	ldr	r2, [r7, #0]
 8002f76:	429a      	cmp	r2, r3
 8002f78:	d803      	bhi.n	8002f82 <HAL_SPI_Receive+0x156>
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f80:	d102      	bne.n	8002f88 <HAL_SPI_Receive+0x15c>
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d102      	bne.n	8002f8e <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 8002f88:	2303      	movs	r3, #3
 8002f8a:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002f8c:	e04a      	b.n	8003024 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f92:	b29b      	uxth	r3, r3
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d1cb      	bne.n	8002f30 <HAL_SPI_Receive+0x104>
 8002f98:	e031      	b.n	8002ffe <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	689b      	ldr	r3, [r3, #8]
 8002fa0:	f003 0301 	and.w	r3, r3, #1
 8002fa4:	2b01      	cmp	r3, #1
 8002fa6:	d113      	bne.n	8002fd0 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	68da      	ldr	r2, [r3, #12]
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fb2:	b292      	uxth	r2, r2
 8002fb4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fba:	1c9a      	adds	r2, r3, #2
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002fc4:	b29b      	uxth	r3, r3
 8002fc6:	3b01      	subs	r3, #1
 8002fc8:	b29a      	uxth	r2, r3
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002fce:	e011      	b.n	8002ff4 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002fd0:	f7fd fff0 	bl	8000fb4 <HAL_GetTick>
 8002fd4:	4602      	mov	r2, r0
 8002fd6:	693b      	ldr	r3, [r7, #16]
 8002fd8:	1ad3      	subs	r3, r2, r3
 8002fda:	683a      	ldr	r2, [r7, #0]
 8002fdc:	429a      	cmp	r2, r3
 8002fde:	d803      	bhi.n	8002fe8 <HAL_SPI_Receive+0x1bc>
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fe6:	d102      	bne.n	8002fee <HAL_SPI_Receive+0x1c2>
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d102      	bne.n	8002ff4 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 8002fee:	2303      	movs	r3, #3
 8002ff0:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002ff2:	e017      	b.n	8003024 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ff8:	b29b      	uxth	r3, r3
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d1cd      	bne.n	8002f9a <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002ffe:	693a      	ldr	r2, [r7, #16]
 8003000:	6839      	ldr	r1, [r7, #0]
 8003002:	68f8      	ldr	r0, [r7, #12]
 8003004:	f000 fa27 	bl	8003456 <SPI_EndRxTransaction>
 8003008:	4603      	mov	r3, r0
 800300a:	2b00      	cmp	r3, #0
 800300c:	d002      	beq.n	8003014 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	2220      	movs	r2, #32
 8003012:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003018:	2b00      	cmp	r3, #0
 800301a:	d002      	beq.n	8003022 <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 800301c:	2301      	movs	r3, #1
 800301e:	75fb      	strb	r3, [r7, #23]
 8003020:	e000      	b.n	8003024 <HAL_SPI_Receive+0x1f8>
  }

error :
 8003022:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	2201      	movs	r2, #1
 8003028:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	2200      	movs	r2, #0
 8003030:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003034:	7dfb      	ldrb	r3, [r7, #23]
}
 8003036:	4618      	mov	r0, r3
 8003038:	3718      	adds	r7, #24
 800303a:	46bd      	mov	sp, r7
 800303c:	bd80      	pop	{r7, pc}

0800303e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800303e:	b580      	push	{r7, lr}
 8003040:	b08c      	sub	sp, #48	; 0x30
 8003042:	af00      	add	r7, sp, #0
 8003044:	60f8      	str	r0, [r7, #12]
 8003046:	60b9      	str	r1, [r7, #8]
 8003048:	607a      	str	r2, [r7, #4]
 800304a:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800304c:	2301      	movs	r3, #1
 800304e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003050:	2300      	movs	r3, #0
 8003052:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800305c:	2b01      	cmp	r3, #1
 800305e:	d101      	bne.n	8003064 <HAL_SPI_TransmitReceive+0x26>
 8003060:	2302      	movs	r3, #2
 8003062:	e18a      	b.n	800337a <HAL_SPI_TransmitReceive+0x33c>
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	2201      	movs	r2, #1
 8003068:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800306c:	f7fd ffa2 	bl	8000fb4 <HAL_GetTick>
 8003070:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003078:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	685b      	ldr	r3, [r3, #4]
 8003080:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003082:	887b      	ldrh	r3, [r7, #2]
 8003084:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003086:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800308a:	2b01      	cmp	r3, #1
 800308c:	d00f      	beq.n	80030ae <HAL_SPI_TransmitReceive+0x70>
 800308e:	69fb      	ldr	r3, [r7, #28]
 8003090:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003094:	d107      	bne.n	80030a6 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	689b      	ldr	r3, [r3, #8]
 800309a:	2b00      	cmp	r3, #0
 800309c:	d103      	bne.n	80030a6 <HAL_SPI_TransmitReceive+0x68>
 800309e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80030a2:	2b04      	cmp	r3, #4
 80030a4:	d003      	beq.n	80030ae <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80030a6:	2302      	movs	r3, #2
 80030a8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80030ac:	e15b      	b.n	8003366 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80030ae:	68bb      	ldr	r3, [r7, #8]
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d005      	beq.n	80030c0 <HAL_SPI_TransmitReceive+0x82>
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d002      	beq.n	80030c0 <HAL_SPI_TransmitReceive+0x82>
 80030ba:	887b      	ldrh	r3, [r7, #2]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d103      	bne.n	80030c8 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80030c0:	2301      	movs	r3, #1
 80030c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80030c6:	e14e      	b.n	8003366 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80030ce:	b2db      	uxtb	r3, r3
 80030d0:	2b04      	cmp	r3, #4
 80030d2:	d003      	beq.n	80030dc <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	2205      	movs	r2, #5
 80030d8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	2200      	movs	r2, #0
 80030e0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	687a      	ldr	r2, [r7, #4]
 80030e6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	887a      	ldrh	r2, [r7, #2]
 80030ec:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	887a      	ldrh	r2, [r7, #2]
 80030f2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	68ba      	ldr	r2, [r7, #8]
 80030f8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	887a      	ldrh	r2, [r7, #2]
 80030fe:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	887a      	ldrh	r2, [r7, #2]
 8003104:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	2200      	movs	r2, #0
 800310a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	2200      	movs	r2, #0
 8003110:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800311c:	2b40      	cmp	r3, #64	; 0x40
 800311e:	d007      	beq.n	8003130 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	681a      	ldr	r2, [r3, #0]
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800312e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	68db      	ldr	r3, [r3, #12]
 8003134:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003138:	d178      	bne.n	800322c <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d002      	beq.n	8003148 <HAL_SPI_TransmitReceive+0x10a>
 8003142:	8b7b      	ldrh	r3, [r7, #26]
 8003144:	2b01      	cmp	r3, #1
 8003146:	d166      	bne.n	8003216 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800314c:	881a      	ldrh	r2, [r3, #0]
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003158:	1c9a      	adds	r2, r3, #2
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003162:	b29b      	uxth	r3, r3
 8003164:	3b01      	subs	r3, #1
 8003166:	b29a      	uxth	r2, r3
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800316c:	e053      	b.n	8003216 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	689b      	ldr	r3, [r3, #8]
 8003174:	f003 0302 	and.w	r3, r3, #2
 8003178:	2b02      	cmp	r3, #2
 800317a:	d11b      	bne.n	80031b4 <HAL_SPI_TransmitReceive+0x176>
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003180:	b29b      	uxth	r3, r3
 8003182:	2b00      	cmp	r3, #0
 8003184:	d016      	beq.n	80031b4 <HAL_SPI_TransmitReceive+0x176>
 8003186:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003188:	2b01      	cmp	r3, #1
 800318a:	d113      	bne.n	80031b4 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003190:	881a      	ldrh	r2, [r3, #0]
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800319c:	1c9a      	adds	r2, r3, #2
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80031a6:	b29b      	uxth	r3, r3
 80031a8:	3b01      	subs	r3, #1
 80031aa:	b29a      	uxth	r2, r3
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80031b0:	2300      	movs	r3, #0
 80031b2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	689b      	ldr	r3, [r3, #8]
 80031ba:	f003 0301 	and.w	r3, r3, #1
 80031be:	2b01      	cmp	r3, #1
 80031c0:	d119      	bne.n	80031f6 <HAL_SPI_TransmitReceive+0x1b8>
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80031c6:	b29b      	uxth	r3, r3
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d014      	beq.n	80031f6 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	68da      	ldr	r2, [r3, #12]
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031d6:	b292      	uxth	r2, r2
 80031d8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031de:	1c9a      	adds	r2, r3, #2
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80031e8:	b29b      	uxth	r3, r3
 80031ea:	3b01      	subs	r3, #1
 80031ec:	b29a      	uxth	r2, r3
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80031f2:	2301      	movs	r3, #1
 80031f4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80031f6:	f7fd fedd 	bl	8000fb4 <HAL_GetTick>
 80031fa:	4602      	mov	r2, r0
 80031fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031fe:	1ad3      	subs	r3, r2, r3
 8003200:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003202:	429a      	cmp	r2, r3
 8003204:	d807      	bhi.n	8003216 <HAL_SPI_TransmitReceive+0x1d8>
 8003206:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003208:	f1b3 3fff 	cmp.w	r3, #4294967295
 800320c:	d003      	beq.n	8003216 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800320e:	2303      	movs	r3, #3
 8003210:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003214:	e0a7      	b.n	8003366 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800321a:	b29b      	uxth	r3, r3
 800321c:	2b00      	cmp	r3, #0
 800321e:	d1a6      	bne.n	800316e <HAL_SPI_TransmitReceive+0x130>
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003224:	b29b      	uxth	r3, r3
 8003226:	2b00      	cmp	r3, #0
 8003228:	d1a1      	bne.n	800316e <HAL_SPI_TransmitReceive+0x130>
 800322a:	e07c      	b.n	8003326 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	685b      	ldr	r3, [r3, #4]
 8003230:	2b00      	cmp	r3, #0
 8003232:	d002      	beq.n	800323a <HAL_SPI_TransmitReceive+0x1fc>
 8003234:	8b7b      	ldrh	r3, [r7, #26]
 8003236:	2b01      	cmp	r3, #1
 8003238:	d16b      	bne.n	8003312 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	330c      	adds	r3, #12
 8003244:	7812      	ldrb	r2, [r2, #0]
 8003246:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800324c:	1c5a      	adds	r2, r3, #1
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003256:	b29b      	uxth	r3, r3
 8003258:	3b01      	subs	r3, #1
 800325a:	b29a      	uxth	r2, r3
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003260:	e057      	b.n	8003312 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	689b      	ldr	r3, [r3, #8]
 8003268:	f003 0302 	and.w	r3, r3, #2
 800326c:	2b02      	cmp	r3, #2
 800326e:	d11c      	bne.n	80032aa <HAL_SPI_TransmitReceive+0x26c>
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003274:	b29b      	uxth	r3, r3
 8003276:	2b00      	cmp	r3, #0
 8003278:	d017      	beq.n	80032aa <HAL_SPI_TransmitReceive+0x26c>
 800327a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800327c:	2b01      	cmp	r3, #1
 800327e:	d114      	bne.n	80032aa <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	330c      	adds	r3, #12
 800328a:	7812      	ldrb	r2, [r2, #0]
 800328c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003292:	1c5a      	adds	r2, r3, #1
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800329c:	b29b      	uxth	r3, r3
 800329e:	3b01      	subs	r3, #1
 80032a0:	b29a      	uxth	r2, r3
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80032a6:	2300      	movs	r3, #0
 80032a8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	689b      	ldr	r3, [r3, #8]
 80032b0:	f003 0301 	and.w	r3, r3, #1
 80032b4:	2b01      	cmp	r3, #1
 80032b6:	d119      	bne.n	80032ec <HAL_SPI_TransmitReceive+0x2ae>
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80032bc:	b29b      	uxth	r3, r3
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d014      	beq.n	80032ec <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	68da      	ldr	r2, [r3, #12]
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032cc:	b2d2      	uxtb	r2, r2
 80032ce:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032d4:	1c5a      	adds	r2, r3, #1
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80032de:	b29b      	uxth	r3, r3
 80032e0:	3b01      	subs	r3, #1
 80032e2:	b29a      	uxth	r2, r3
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80032e8:	2301      	movs	r3, #1
 80032ea:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80032ec:	f7fd fe62 	bl	8000fb4 <HAL_GetTick>
 80032f0:	4602      	mov	r2, r0
 80032f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032f4:	1ad3      	subs	r3, r2, r3
 80032f6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80032f8:	429a      	cmp	r2, r3
 80032fa:	d803      	bhi.n	8003304 <HAL_SPI_TransmitReceive+0x2c6>
 80032fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003302:	d102      	bne.n	800330a <HAL_SPI_TransmitReceive+0x2cc>
 8003304:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003306:	2b00      	cmp	r3, #0
 8003308:	d103      	bne.n	8003312 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800330a:	2303      	movs	r3, #3
 800330c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003310:	e029      	b.n	8003366 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003316:	b29b      	uxth	r3, r3
 8003318:	2b00      	cmp	r3, #0
 800331a:	d1a2      	bne.n	8003262 <HAL_SPI_TransmitReceive+0x224>
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003320:	b29b      	uxth	r3, r3
 8003322:	2b00      	cmp	r3, #0
 8003324:	d19d      	bne.n	8003262 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003326:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003328:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800332a:	68f8      	ldr	r0, [r7, #12]
 800332c:	f000 f8f8 	bl	8003520 <SPI_EndRxTxTransaction>
 8003330:	4603      	mov	r3, r0
 8003332:	2b00      	cmp	r3, #0
 8003334:	d006      	beq.n	8003344 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8003336:	2301      	movs	r3, #1
 8003338:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	2220      	movs	r2, #32
 8003340:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003342:	e010      	b.n	8003366 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	689b      	ldr	r3, [r3, #8]
 8003348:	2b00      	cmp	r3, #0
 800334a:	d10b      	bne.n	8003364 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800334c:	2300      	movs	r3, #0
 800334e:	617b      	str	r3, [r7, #20]
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	68db      	ldr	r3, [r3, #12]
 8003356:	617b      	str	r3, [r7, #20]
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	689b      	ldr	r3, [r3, #8]
 800335e:	617b      	str	r3, [r7, #20]
 8003360:	697b      	ldr	r3, [r7, #20]
 8003362:	e000      	b.n	8003366 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8003364:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	2201      	movs	r2, #1
 800336a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	2200      	movs	r2, #0
 8003372:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003376:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800337a:	4618      	mov	r0, r3
 800337c:	3730      	adds	r7, #48	; 0x30
 800337e:	46bd      	mov	sp, r7
 8003380:	bd80      	pop	{r7, pc}

08003382 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003382:	b580      	push	{r7, lr}
 8003384:	b084      	sub	sp, #16
 8003386:	af00      	add	r7, sp, #0
 8003388:	60f8      	str	r0, [r7, #12]
 800338a:	60b9      	str	r1, [r7, #8]
 800338c:	603b      	str	r3, [r7, #0]
 800338e:	4613      	mov	r3, r2
 8003390:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003392:	e04c      	b.n	800342e <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	f1b3 3fff 	cmp.w	r3, #4294967295
 800339a:	d048      	beq.n	800342e <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800339c:	f7fd fe0a 	bl	8000fb4 <HAL_GetTick>
 80033a0:	4602      	mov	r2, r0
 80033a2:	69bb      	ldr	r3, [r7, #24]
 80033a4:	1ad3      	subs	r3, r2, r3
 80033a6:	683a      	ldr	r2, [r7, #0]
 80033a8:	429a      	cmp	r2, r3
 80033aa:	d902      	bls.n	80033b2 <SPI_WaitFlagStateUntilTimeout+0x30>
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d13d      	bne.n	800342e <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	685a      	ldr	r2, [r3, #4]
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80033c0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	685b      	ldr	r3, [r3, #4]
 80033c6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80033ca:	d111      	bne.n	80033f0 <SPI_WaitFlagStateUntilTimeout+0x6e>
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	689b      	ldr	r3, [r3, #8]
 80033d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80033d4:	d004      	beq.n	80033e0 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	689b      	ldr	r3, [r3, #8]
 80033da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033de:	d107      	bne.n	80033f0 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	681a      	ldr	r2, [r3, #0]
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80033ee:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80033f8:	d10f      	bne.n	800341a <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	681a      	ldr	r2, [r3, #0]
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003408:	601a      	str	r2, [r3, #0]
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	681a      	ldr	r2, [r3, #0]
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003418:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	2201      	movs	r2, #1
 800341e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	2200      	movs	r2, #0
 8003426:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800342a:	2303      	movs	r3, #3
 800342c:	e00f      	b.n	800344e <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	689a      	ldr	r2, [r3, #8]
 8003434:	68bb      	ldr	r3, [r7, #8]
 8003436:	4013      	ands	r3, r2
 8003438:	68ba      	ldr	r2, [r7, #8]
 800343a:	429a      	cmp	r2, r3
 800343c:	bf0c      	ite	eq
 800343e:	2301      	moveq	r3, #1
 8003440:	2300      	movne	r3, #0
 8003442:	b2db      	uxtb	r3, r3
 8003444:	461a      	mov	r2, r3
 8003446:	79fb      	ldrb	r3, [r7, #7]
 8003448:	429a      	cmp	r2, r3
 800344a:	d1a3      	bne.n	8003394 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800344c:	2300      	movs	r3, #0
}
 800344e:	4618      	mov	r0, r3
 8003450:	3710      	adds	r7, #16
 8003452:	46bd      	mov	sp, r7
 8003454:	bd80      	pop	{r7, pc}

08003456 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003456:	b580      	push	{r7, lr}
 8003458:	b086      	sub	sp, #24
 800345a:	af02      	add	r7, sp, #8
 800345c:	60f8      	str	r0, [r7, #12]
 800345e:	60b9      	str	r1, [r7, #8]
 8003460:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	685b      	ldr	r3, [r3, #4]
 8003466:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800346a:	d111      	bne.n	8003490 <SPI_EndRxTransaction+0x3a>
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	689b      	ldr	r3, [r3, #8]
 8003470:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003474:	d004      	beq.n	8003480 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	689b      	ldr	r3, [r3, #8]
 800347a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800347e:	d107      	bne.n	8003490 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	681a      	ldr	r2, [r3, #0]
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800348e:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	685b      	ldr	r3, [r3, #4]
 8003494:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003498:	d12a      	bne.n	80034f0 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	689b      	ldr	r3, [r3, #8]
 800349e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034a2:	d012      	beq.n	80034ca <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	9300      	str	r3, [sp, #0]
 80034a8:	68bb      	ldr	r3, [r7, #8]
 80034aa:	2200      	movs	r2, #0
 80034ac:	2180      	movs	r1, #128	; 0x80
 80034ae:	68f8      	ldr	r0, [r7, #12]
 80034b0:	f7ff ff67 	bl	8003382 <SPI_WaitFlagStateUntilTimeout>
 80034b4:	4603      	mov	r3, r0
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d02d      	beq.n	8003516 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034be:	f043 0220 	orr.w	r2, r3, #32
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80034c6:	2303      	movs	r3, #3
 80034c8:	e026      	b.n	8003518 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	9300      	str	r3, [sp, #0]
 80034ce:	68bb      	ldr	r3, [r7, #8]
 80034d0:	2200      	movs	r2, #0
 80034d2:	2101      	movs	r1, #1
 80034d4:	68f8      	ldr	r0, [r7, #12]
 80034d6:	f7ff ff54 	bl	8003382 <SPI_WaitFlagStateUntilTimeout>
 80034da:	4603      	mov	r3, r0
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d01a      	beq.n	8003516 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034e4:	f043 0220 	orr.w	r2, r3, #32
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80034ec:	2303      	movs	r3, #3
 80034ee:	e013      	b.n	8003518 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	9300      	str	r3, [sp, #0]
 80034f4:	68bb      	ldr	r3, [r7, #8]
 80034f6:	2200      	movs	r2, #0
 80034f8:	2101      	movs	r1, #1
 80034fa:	68f8      	ldr	r0, [r7, #12]
 80034fc:	f7ff ff41 	bl	8003382 <SPI_WaitFlagStateUntilTimeout>
 8003500:	4603      	mov	r3, r0
 8003502:	2b00      	cmp	r3, #0
 8003504:	d007      	beq.n	8003516 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800350a:	f043 0220 	orr.w	r2, r3, #32
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003512:	2303      	movs	r3, #3
 8003514:	e000      	b.n	8003518 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8003516:	2300      	movs	r3, #0
}
 8003518:	4618      	mov	r0, r3
 800351a:	3710      	adds	r7, #16
 800351c:	46bd      	mov	sp, r7
 800351e:	bd80      	pop	{r7, pc}

08003520 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	b088      	sub	sp, #32
 8003524:	af02      	add	r7, sp, #8
 8003526:	60f8      	str	r0, [r7, #12]
 8003528:	60b9      	str	r1, [r7, #8]
 800352a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800352c:	4b1b      	ldr	r3, [pc, #108]	; (800359c <SPI_EndRxTxTransaction+0x7c>)
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	4a1b      	ldr	r2, [pc, #108]	; (80035a0 <SPI_EndRxTxTransaction+0x80>)
 8003532:	fba2 2303 	umull	r2, r3, r2, r3
 8003536:	0d5b      	lsrs	r3, r3, #21
 8003538:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800353c:	fb02 f303 	mul.w	r3, r2, r3
 8003540:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	685b      	ldr	r3, [r3, #4]
 8003546:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800354a:	d112      	bne.n	8003572 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	9300      	str	r3, [sp, #0]
 8003550:	68bb      	ldr	r3, [r7, #8]
 8003552:	2200      	movs	r2, #0
 8003554:	2180      	movs	r1, #128	; 0x80
 8003556:	68f8      	ldr	r0, [r7, #12]
 8003558:	f7ff ff13 	bl	8003382 <SPI_WaitFlagStateUntilTimeout>
 800355c:	4603      	mov	r3, r0
 800355e:	2b00      	cmp	r3, #0
 8003560:	d016      	beq.n	8003590 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003566:	f043 0220 	orr.w	r2, r3, #32
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800356e:	2303      	movs	r3, #3
 8003570:	e00f      	b.n	8003592 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003572:	697b      	ldr	r3, [r7, #20]
 8003574:	2b00      	cmp	r3, #0
 8003576:	d00a      	beq.n	800358e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8003578:	697b      	ldr	r3, [r7, #20]
 800357a:	3b01      	subs	r3, #1
 800357c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	689b      	ldr	r3, [r3, #8]
 8003584:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003588:	2b80      	cmp	r3, #128	; 0x80
 800358a:	d0f2      	beq.n	8003572 <SPI_EndRxTxTransaction+0x52>
 800358c:	e000      	b.n	8003590 <SPI_EndRxTxTransaction+0x70>
        break;
 800358e:	bf00      	nop
  }

  return HAL_OK;
 8003590:	2300      	movs	r3, #0
}
 8003592:	4618      	mov	r0, r3
 8003594:	3718      	adds	r7, #24
 8003596:	46bd      	mov	sp, r7
 8003598:	bd80      	pop	{r7, pc}
 800359a:	bf00      	nop
 800359c:	20000060 	.word	0x20000060
 80035a0:	165e9f81 	.word	0x165e9f81

080035a4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b082      	sub	sp, #8
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d101      	bne.n	80035b6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80035b2:	2301      	movs	r3, #1
 80035b4:	e01d      	b.n	80035f2 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035bc:	b2db      	uxtb	r3, r3
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d106      	bne.n	80035d0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	2200      	movs	r2, #0
 80035c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80035ca:	6878      	ldr	r0, [r7, #4]
 80035cc:	f006 f812 	bl	80095f4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2202      	movs	r2, #2
 80035d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681a      	ldr	r2, [r3, #0]
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	3304      	adds	r3, #4
 80035e0:	4619      	mov	r1, r3
 80035e2:	4610      	mov	r0, r2
 80035e4:	f000 fc18 	bl	8003e18 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2201      	movs	r2, #1
 80035ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80035f0:	2300      	movs	r3, #0
}
 80035f2:	4618      	mov	r0, r3
 80035f4:	3708      	adds	r7, #8
 80035f6:	46bd      	mov	sp, r7
 80035f8:	bd80      	pop	{r7, pc}

080035fa <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80035fa:	b480      	push	{r7}
 80035fc:	b085      	sub	sp, #20
 80035fe:	af00      	add	r7, sp, #0
 8003600:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	68da      	ldr	r2, [r3, #12]
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f042 0201 	orr.w	r2, r2, #1
 8003610:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	689b      	ldr	r3, [r3, #8]
 8003618:	f003 0307 	and.w	r3, r3, #7
 800361c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	2b06      	cmp	r3, #6
 8003622:	d007      	beq.n	8003634 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	681a      	ldr	r2, [r3, #0]
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f042 0201 	orr.w	r2, r2, #1
 8003632:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003634:	2300      	movs	r3, #0
}
 8003636:	4618      	mov	r0, r3
 8003638:	3714      	adds	r7, #20
 800363a:	46bd      	mov	sp, r7
 800363c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003640:	4770      	bx	lr

08003642 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003642:	b580      	push	{r7, lr}
 8003644:	b082      	sub	sp, #8
 8003646:	af00      	add	r7, sp, #0
 8003648:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	2b00      	cmp	r3, #0
 800364e:	d101      	bne.n	8003654 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003650:	2301      	movs	r3, #1
 8003652:	e01d      	b.n	8003690 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800365a:	b2db      	uxtb	r3, r3
 800365c:	2b00      	cmp	r3, #0
 800365e:	d106      	bne.n	800366e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2200      	movs	r2, #0
 8003664:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003668:	6878      	ldr	r0, [r7, #4]
 800366a:	f000 f815 	bl	8003698 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	2202      	movs	r2, #2
 8003672:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681a      	ldr	r2, [r3, #0]
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	3304      	adds	r3, #4
 800367e:	4619      	mov	r1, r3
 8003680:	4610      	mov	r0, r2
 8003682:	f000 fbc9 	bl	8003e18 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	2201      	movs	r2, #1
 800368a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800368e:	2300      	movs	r3, #0
}
 8003690:	4618      	mov	r0, r3
 8003692:	3708      	adds	r7, #8
 8003694:	46bd      	mov	sp, r7
 8003696:	bd80      	pop	{r7, pc}

08003698 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003698:	b480      	push	{r7}
 800369a:	b083      	sub	sp, #12
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80036a0:	bf00      	nop
 80036a2:	370c      	adds	r7, #12
 80036a4:	46bd      	mov	sp, r7
 80036a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036aa:	4770      	bx	lr

080036ac <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b084      	sub	sp, #16
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
 80036b4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	2201      	movs	r2, #1
 80036bc:	6839      	ldr	r1, [r7, #0]
 80036be:	4618      	mov	r0, r3
 80036c0:	f000 fe94 	bl	80043ec <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	4a15      	ldr	r2, [pc, #84]	; (8003720 <HAL_TIM_PWM_Start+0x74>)
 80036ca:	4293      	cmp	r3, r2
 80036cc:	d004      	beq.n	80036d8 <HAL_TIM_PWM_Start+0x2c>
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	4a14      	ldr	r2, [pc, #80]	; (8003724 <HAL_TIM_PWM_Start+0x78>)
 80036d4:	4293      	cmp	r3, r2
 80036d6:	d101      	bne.n	80036dc <HAL_TIM_PWM_Start+0x30>
 80036d8:	2301      	movs	r3, #1
 80036da:	e000      	b.n	80036de <HAL_TIM_PWM_Start+0x32>
 80036dc:	2300      	movs	r3, #0
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d007      	beq.n	80036f2 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80036f0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	689b      	ldr	r3, [r3, #8]
 80036f8:	f003 0307 	and.w	r3, r3, #7
 80036fc:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	2b06      	cmp	r3, #6
 8003702:	d007      	beq.n	8003714 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	681a      	ldr	r2, [r3, #0]
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f042 0201 	orr.w	r2, r2, #1
 8003712:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003714:	2300      	movs	r3, #0
}
 8003716:	4618      	mov	r0, r3
 8003718:	3710      	adds	r7, #16
 800371a:	46bd      	mov	sp, r7
 800371c:	bd80      	pop	{r7, pc}
 800371e:	bf00      	nop
 8003720:	40010000 	.word	0x40010000
 8003724:	40010400 	.word	0x40010400

08003728 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b086      	sub	sp, #24
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
 8003730:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	2b00      	cmp	r3, #0
 8003736:	d101      	bne.n	800373c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003738:	2301      	movs	r3, #1
 800373a:	e083      	b.n	8003844 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003742:	b2db      	uxtb	r3, r3
 8003744:	2b00      	cmp	r3, #0
 8003746:	d106      	bne.n	8003756 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2200      	movs	r2, #0
 800374c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003750:	6878      	ldr	r0, [r7, #4]
 8003752:	f005 ffa1 	bl	8009698 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2202      	movs	r2, #2
 800375a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	689b      	ldr	r3, [r3, #8]
 8003764:	687a      	ldr	r2, [r7, #4]
 8003766:	6812      	ldr	r2, [r2, #0]
 8003768:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800376c:	f023 0307 	bic.w	r3, r3, #7
 8003770:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681a      	ldr	r2, [r3, #0]
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	3304      	adds	r3, #4
 800377a:	4619      	mov	r1, r3
 800377c:	4610      	mov	r0, r2
 800377e:	f000 fb4b 	bl	8003e18 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	689b      	ldr	r3, [r3, #8]
 8003788:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	699b      	ldr	r3, [r3, #24]
 8003790:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	6a1b      	ldr	r3, [r3, #32]
 8003798:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	697a      	ldr	r2, [r7, #20]
 80037a0:	4313      	orrs	r3, r2
 80037a2:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80037a4:	693b      	ldr	r3, [r7, #16]
 80037a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037aa:	f023 0303 	bic.w	r3, r3, #3
 80037ae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80037b0:	683b      	ldr	r3, [r7, #0]
 80037b2:	689a      	ldr	r2, [r3, #8]
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	699b      	ldr	r3, [r3, #24]
 80037b8:	021b      	lsls	r3, r3, #8
 80037ba:	4313      	orrs	r3, r2
 80037bc:	693a      	ldr	r2, [r7, #16]
 80037be:	4313      	orrs	r3, r2
 80037c0:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80037c2:	693b      	ldr	r3, [r7, #16]
 80037c4:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80037c8:	f023 030c 	bic.w	r3, r3, #12
 80037cc:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80037ce:	693b      	ldr	r3, [r7, #16]
 80037d0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80037d4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80037d8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80037da:	683b      	ldr	r3, [r7, #0]
 80037dc:	68da      	ldr	r2, [r3, #12]
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	69db      	ldr	r3, [r3, #28]
 80037e2:	021b      	lsls	r3, r3, #8
 80037e4:	4313      	orrs	r3, r2
 80037e6:	693a      	ldr	r2, [r7, #16]
 80037e8:	4313      	orrs	r3, r2
 80037ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	691b      	ldr	r3, [r3, #16]
 80037f0:	011a      	lsls	r2, r3, #4
 80037f2:	683b      	ldr	r3, [r7, #0]
 80037f4:	6a1b      	ldr	r3, [r3, #32]
 80037f6:	031b      	lsls	r3, r3, #12
 80037f8:	4313      	orrs	r3, r2
 80037fa:	693a      	ldr	r2, [r7, #16]
 80037fc:	4313      	orrs	r3, r2
 80037fe:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8003806:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800380e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	685a      	ldr	r2, [r3, #4]
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	695b      	ldr	r3, [r3, #20]
 8003818:	011b      	lsls	r3, r3, #4
 800381a:	4313      	orrs	r3, r2
 800381c:	68fa      	ldr	r2, [r7, #12]
 800381e:	4313      	orrs	r3, r2
 8003820:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	697a      	ldr	r2, [r7, #20]
 8003828:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	693a      	ldr	r2, [r7, #16]
 8003830:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	68fa      	ldr	r2, [r7, #12]
 8003838:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2201      	movs	r2, #1
 800383e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003842:	2300      	movs	r3, #0
}
 8003844:	4618      	mov	r0, r3
 8003846:	3718      	adds	r7, #24
 8003848:	46bd      	mov	sp, r7
 800384a:	bd80      	pop	{r7, pc}

0800384c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b082      	sub	sp, #8
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
 8003854:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	2b00      	cmp	r3, #0
 800385a:	d002      	beq.n	8003862 <HAL_TIM_Encoder_Start+0x16>
 800385c:	2b04      	cmp	r3, #4
 800385e:	d008      	beq.n	8003872 <HAL_TIM_Encoder_Start+0x26>
 8003860:	e00f      	b.n	8003882 <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	2201      	movs	r2, #1
 8003868:	2100      	movs	r1, #0
 800386a:	4618      	mov	r0, r3
 800386c:	f000 fdbe 	bl	80043ec <TIM_CCxChannelCmd>
      break;
 8003870:	e016      	b.n	80038a0 <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	2201      	movs	r2, #1
 8003878:	2104      	movs	r1, #4
 800387a:	4618      	mov	r0, r3
 800387c:	f000 fdb6 	bl	80043ec <TIM_CCxChannelCmd>
      break;
 8003880:	e00e      	b.n	80038a0 <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	2201      	movs	r2, #1
 8003888:	2100      	movs	r1, #0
 800388a:	4618      	mov	r0, r3
 800388c:	f000 fdae 	bl	80043ec <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	2201      	movs	r2, #1
 8003896:	2104      	movs	r1, #4
 8003898:	4618      	mov	r0, r3
 800389a:	f000 fda7 	bl	80043ec <TIM_CCxChannelCmd>
      break;
 800389e:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	681a      	ldr	r2, [r3, #0]
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f042 0201 	orr.w	r2, r2, #1
 80038ae:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80038b0:	2300      	movs	r3, #0
}
 80038b2:	4618      	mov	r0, r3
 80038b4:	3708      	adds	r7, #8
 80038b6:	46bd      	mov	sp, r7
 80038b8:	bd80      	pop	{r7, pc}

080038ba <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80038ba:	b580      	push	{r7, lr}
 80038bc:	b082      	sub	sp, #8
 80038be:	af00      	add	r7, sp, #0
 80038c0:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	691b      	ldr	r3, [r3, #16]
 80038c8:	f003 0302 	and.w	r3, r3, #2
 80038cc:	2b02      	cmp	r3, #2
 80038ce:	d122      	bne.n	8003916 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	68db      	ldr	r3, [r3, #12]
 80038d6:	f003 0302 	and.w	r3, r3, #2
 80038da:	2b02      	cmp	r3, #2
 80038dc:	d11b      	bne.n	8003916 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f06f 0202 	mvn.w	r2, #2
 80038e6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2201      	movs	r2, #1
 80038ec:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	699b      	ldr	r3, [r3, #24]
 80038f4:	f003 0303 	and.w	r3, r3, #3
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d003      	beq.n	8003904 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80038fc:	6878      	ldr	r0, [r7, #4]
 80038fe:	f000 fa6c 	bl	8003dda <HAL_TIM_IC_CaptureCallback>
 8003902:	e005      	b.n	8003910 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003904:	6878      	ldr	r0, [r7, #4]
 8003906:	f000 fa5e 	bl	8003dc6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800390a:	6878      	ldr	r0, [r7, #4]
 800390c:	f000 fa6f 	bl	8003dee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2200      	movs	r2, #0
 8003914:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	691b      	ldr	r3, [r3, #16]
 800391c:	f003 0304 	and.w	r3, r3, #4
 8003920:	2b04      	cmp	r3, #4
 8003922:	d122      	bne.n	800396a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	68db      	ldr	r3, [r3, #12]
 800392a:	f003 0304 	and.w	r3, r3, #4
 800392e:	2b04      	cmp	r3, #4
 8003930:	d11b      	bne.n	800396a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f06f 0204 	mvn.w	r2, #4
 800393a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2202      	movs	r2, #2
 8003940:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	699b      	ldr	r3, [r3, #24]
 8003948:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800394c:	2b00      	cmp	r3, #0
 800394e:	d003      	beq.n	8003958 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003950:	6878      	ldr	r0, [r7, #4]
 8003952:	f000 fa42 	bl	8003dda <HAL_TIM_IC_CaptureCallback>
 8003956:	e005      	b.n	8003964 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003958:	6878      	ldr	r0, [r7, #4]
 800395a:	f000 fa34 	bl	8003dc6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800395e:	6878      	ldr	r0, [r7, #4]
 8003960:	f000 fa45 	bl	8003dee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2200      	movs	r2, #0
 8003968:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	691b      	ldr	r3, [r3, #16]
 8003970:	f003 0308 	and.w	r3, r3, #8
 8003974:	2b08      	cmp	r3, #8
 8003976:	d122      	bne.n	80039be <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	68db      	ldr	r3, [r3, #12]
 800397e:	f003 0308 	and.w	r3, r3, #8
 8003982:	2b08      	cmp	r3, #8
 8003984:	d11b      	bne.n	80039be <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f06f 0208 	mvn.w	r2, #8
 800398e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2204      	movs	r2, #4
 8003994:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	69db      	ldr	r3, [r3, #28]
 800399c:	f003 0303 	and.w	r3, r3, #3
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d003      	beq.n	80039ac <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80039a4:	6878      	ldr	r0, [r7, #4]
 80039a6:	f000 fa18 	bl	8003dda <HAL_TIM_IC_CaptureCallback>
 80039aa:	e005      	b.n	80039b8 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80039ac:	6878      	ldr	r0, [r7, #4]
 80039ae:	f000 fa0a 	bl	8003dc6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039b2:	6878      	ldr	r0, [r7, #4]
 80039b4:	f000 fa1b 	bl	8003dee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2200      	movs	r2, #0
 80039bc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	691b      	ldr	r3, [r3, #16]
 80039c4:	f003 0310 	and.w	r3, r3, #16
 80039c8:	2b10      	cmp	r3, #16
 80039ca:	d122      	bne.n	8003a12 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	68db      	ldr	r3, [r3, #12]
 80039d2:	f003 0310 	and.w	r3, r3, #16
 80039d6:	2b10      	cmp	r3, #16
 80039d8:	d11b      	bne.n	8003a12 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f06f 0210 	mvn.w	r2, #16
 80039e2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2208      	movs	r2, #8
 80039e8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	69db      	ldr	r3, [r3, #28]
 80039f0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d003      	beq.n	8003a00 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80039f8:	6878      	ldr	r0, [r7, #4]
 80039fa:	f000 f9ee 	bl	8003dda <HAL_TIM_IC_CaptureCallback>
 80039fe:	e005      	b.n	8003a0c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a00:	6878      	ldr	r0, [r7, #4]
 8003a02:	f000 f9e0 	bl	8003dc6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a06:	6878      	ldr	r0, [r7, #4]
 8003a08:	f000 f9f1 	bl	8003dee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2200      	movs	r2, #0
 8003a10:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	691b      	ldr	r3, [r3, #16]
 8003a18:	f003 0301 	and.w	r3, r3, #1
 8003a1c:	2b01      	cmp	r3, #1
 8003a1e:	d10e      	bne.n	8003a3e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	68db      	ldr	r3, [r3, #12]
 8003a26:	f003 0301 	and.w	r3, r3, #1
 8003a2a:	2b01      	cmp	r3, #1
 8003a2c:	d107      	bne.n	8003a3e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f06f 0201 	mvn.w	r2, #1
 8003a36:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003a38:	6878      	ldr	r0, [r7, #4]
 8003a3a:	f003 f89d 	bl	8006b78 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	691b      	ldr	r3, [r3, #16]
 8003a44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a48:	2b80      	cmp	r3, #128	; 0x80
 8003a4a:	d10e      	bne.n	8003a6a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	68db      	ldr	r3, [r3, #12]
 8003a52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a56:	2b80      	cmp	r3, #128	; 0x80
 8003a58:	d107      	bne.n	8003a6a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003a62:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003a64:	6878      	ldr	r0, [r7, #4]
 8003a66:	f000 fd35 	bl	80044d4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	691b      	ldr	r3, [r3, #16]
 8003a70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a74:	2b40      	cmp	r3, #64	; 0x40
 8003a76:	d10e      	bne.n	8003a96 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	68db      	ldr	r3, [r3, #12]
 8003a7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a82:	2b40      	cmp	r3, #64	; 0x40
 8003a84:	d107      	bne.n	8003a96 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003a8e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003a90:	6878      	ldr	r0, [r7, #4]
 8003a92:	f000 f9b6 	bl	8003e02 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	691b      	ldr	r3, [r3, #16]
 8003a9c:	f003 0320 	and.w	r3, r3, #32
 8003aa0:	2b20      	cmp	r3, #32
 8003aa2:	d10e      	bne.n	8003ac2 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	68db      	ldr	r3, [r3, #12]
 8003aaa:	f003 0320 	and.w	r3, r3, #32
 8003aae:	2b20      	cmp	r3, #32
 8003ab0:	d107      	bne.n	8003ac2 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f06f 0220 	mvn.w	r2, #32
 8003aba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003abc:	6878      	ldr	r0, [r7, #4]
 8003abe:	f000 fcff 	bl	80044c0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003ac2:	bf00      	nop
 8003ac4:	3708      	adds	r7, #8
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	bd80      	pop	{r7, pc}
	...

08003acc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b084      	sub	sp, #16
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	60f8      	str	r0, [r7, #12]
 8003ad4:	60b9      	str	r1, [r7, #8]
 8003ad6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ade:	2b01      	cmp	r3, #1
 8003ae0:	d101      	bne.n	8003ae6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003ae2:	2302      	movs	r3, #2
 8003ae4:	e0b4      	b.n	8003c50 <HAL_TIM_PWM_ConfigChannel+0x184>
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	2201      	movs	r2, #1
 8003aea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	2202      	movs	r2, #2
 8003af2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	2b0c      	cmp	r3, #12
 8003afa:	f200 809f 	bhi.w	8003c3c <HAL_TIM_PWM_ConfigChannel+0x170>
 8003afe:	a201      	add	r2, pc, #4	; (adr r2, 8003b04 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8003b00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b04:	08003b39 	.word	0x08003b39
 8003b08:	08003c3d 	.word	0x08003c3d
 8003b0c:	08003c3d 	.word	0x08003c3d
 8003b10:	08003c3d 	.word	0x08003c3d
 8003b14:	08003b79 	.word	0x08003b79
 8003b18:	08003c3d 	.word	0x08003c3d
 8003b1c:	08003c3d 	.word	0x08003c3d
 8003b20:	08003c3d 	.word	0x08003c3d
 8003b24:	08003bbb 	.word	0x08003bbb
 8003b28:	08003c3d 	.word	0x08003c3d
 8003b2c:	08003c3d 	.word	0x08003c3d
 8003b30:	08003c3d 	.word	0x08003c3d
 8003b34:	08003bfb 	.word	0x08003bfb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	68b9      	ldr	r1, [r7, #8]
 8003b3e:	4618      	mov	r0, r3
 8003b40:	f000 fa0a 	bl	8003f58 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	699a      	ldr	r2, [r3, #24]
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f042 0208 	orr.w	r2, r2, #8
 8003b52:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	699a      	ldr	r2, [r3, #24]
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f022 0204 	bic.w	r2, r2, #4
 8003b62:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	6999      	ldr	r1, [r3, #24]
 8003b6a:	68bb      	ldr	r3, [r7, #8]
 8003b6c:	691a      	ldr	r2, [r3, #16]
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	430a      	orrs	r2, r1
 8003b74:	619a      	str	r2, [r3, #24]
      break;
 8003b76:	e062      	b.n	8003c3e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	68b9      	ldr	r1, [r7, #8]
 8003b7e:	4618      	mov	r0, r3
 8003b80:	f000 fa5a 	bl	8004038 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	699a      	ldr	r2, [r3, #24]
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003b92:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	699a      	ldr	r2, [r3, #24]
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ba2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	6999      	ldr	r1, [r3, #24]
 8003baa:	68bb      	ldr	r3, [r7, #8]
 8003bac:	691b      	ldr	r3, [r3, #16]
 8003bae:	021a      	lsls	r2, r3, #8
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	430a      	orrs	r2, r1
 8003bb6:	619a      	str	r2, [r3, #24]
      break;
 8003bb8:	e041      	b.n	8003c3e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	68b9      	ldr	r1, [r7, #8]
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	f000 faaf 	bl	8004124 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	69da      	ldr	r2, [r3, #28]
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f042 0208 	orr.w	r2, r2, #8
 8003bd4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	69da      	ldr	r2, [r3, #28]
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f022 0204 	bic.w	r2, r2, #4
 8003be4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	69d9      	ldr	r1, [r3, #28]
 8003bec:	68bb      	ldr	r3, [r7, #8]
 8003bee:	691a      	ldr	r2, [r3, #16]
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	430a      	orrs	r2, r1
 8003bf6:	61da      	str	r2, [r3, #28]
      break;
 8003bf8:	e021      	b.n	8003c3e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	68b9      	ldr	r1, [r7, #8]
 8003c00:	4618      	mov	r0, r3
 8003c02:	f000 fb03 	bl	800420c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	69da      	ldr	r2, [r3, #28]
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003c14:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	69da      	ldr	r2, [r3, #28]
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c24:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	69d9      	ldr	r1, [r3, #28]
 8003c2c:	68bb      	ldr	r3, [r7, #8]
 8003c2e:	691b      	ldr	r3, [r3, #16]
 8003c30:	021a      	lsls	r2, r3, #8
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	430a      	orrs	r2, r1
 8003c38:	61da      	str	r2, [r3, #28]
      break;
 8003c3a:	e000      	b.n	8003c3e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8003c3c:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	2201      	movs	r2, #1
 8003c42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	2200      	movs	r2, #0
 8003c4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003c4e:	2300      	movs	r3, #0
}
 8003c50:	4618      	mov	r0, r3
 8003c52:	3710      	adds	r7, #16
 8003c54:	46bd      	mov	sp, r7
 8003c56:	bd80      	pop	{r7, pc}

08003c58 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b084      	sub	sp, #16
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
 8003c60:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c68:	2b01      	cmp	r3, #1
 8003c6a:	d101      	bne.n	8003c70 <HAL_TIM_ConfigClockSource+0x18>
 8003c6c:	2302      	movs	r3, #2
 8003c6e:	e0a6      	b.n	8003dbe <HAL_TIM_ConfigClockSource+0x166>
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2201      	movs	r2, #1
 8003c74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2202      	movs	r2, #2
 8003c7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	689b      	ldr	r3, [r3, #8]
 8003c86:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003c8e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003c96:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	68fa      	ldr	r2, [r7, #12]
 8003c9e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	2b40      	cmp	r3, #64	; 0x40
 8003ca6:	d067      	beq.n	8003d78 <HAL_TIM_ConfigClockSource+0x120>
 8003ca8:	2b40      	cmp	r3, #64	; 0x40
 8003caa:	d80b      	bhi.n	8003cc4 <HAL_TIM_ConfigClockSource+0x6c>
 8003cac:	2b10      	cmp	r3, #16
 8003cae:	d073      	beq.n	8003d98 <HAL_TIM_ConfigClockSource+0x140>
 8003cb0:	2b10      	cmp	r3, #16
 8003cb2:	d802      	bhi.n	8003cba <HAL_TIM_ConfigClockSource+0x62>
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d06f      	beq.n	8003d98 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8003cb8:	e078      	b.n	8003dac <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003cba:	2b20      	cmp	r3, #32
 8003cbc:	d06c      	beq.n	8003d98 <HAL_TIM_ConfigClockSource+0x140>
 8003cbe:	2b30      	cmp	r3, #48	; 0x30
 8003cc0:	d06a      	beq.n	8003d98 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8003cc2:	e073      	b.n	8003dac <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003cc4:	2b70      	cmp	r3, #112	; 0x70
 8003cc6:	d00d      	beq.n	8003ce4 <HAL_TIM_ConfigClockSource+0x8c>
 8003cc8:	2b70      	cmp	r3, #112	; 0x70
 8003cca:	d804      	bhi.n	8003cd6 <HAL_TIM_ConfigClockSource+0x7e>
 8003ccc:	2b50      	cmp	r3, #80	; 0x50
 8003cce:	d033      	beq.n	8003d38 <HAL_TIM_ConfigClockSource+0xe0>
 8003cd0:	2b60      	cmp	r3, #96	; 0x60
 8003cd2:	d041      	beq.n	8003d58 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8003cd4:	e06a      	b.n	8003dac <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003cd6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003cda:	d066      	beq.n	8003daa <HAL_TIM_ConfigClockSource+0x152>
 8003cdc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ce0:	d017      	beq.n	8003d12 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8003ce2:	e063      	b.n	8003dac <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6818      	ldr	r0, [r3, #0]
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	6899      	ldr	r1, [r3, #8]
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	685a      	ldr	r2, [r3, #4]
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	68db      	ldr	r3, [r3, #12]
 8003cf4:	f000 fb5a 	bl	80043ac <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	689b      	ldr	r3, [r3, #8]
 8003cfe:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003d06:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	68fa      	ldr	r2, [r7, #12]
 8003d0e:	609a      	str	r2, [r3, #8]
      break;
 8003d10:	e04c      	b.n	8003dac <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6818      	ldr	r0, [r3, #0]
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	6899      	ldr	r1, [r3, #8]
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	685a      	ldr	r2, [r3, #4]
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	68db      	ldr	r3, [r3, #12]
 8003d22:	f000 fb43 	bl	80043ac <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	689a      	ldr	r2, [r3, #8]
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003d34:	609a      	str	r2, [r3, #8]
      break;
 8003d36:	e039      	b.n	8003dac <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6818      	ldr	r0, [r3, #0]
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	6859      	ldr	r1, [r3, #4]
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	68db      	ldr	r3, [r3, #12]
 8003d44:	461a      	mov	r2, r3
 8003d46:	f000 fab7 	bl	80042b8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	2150      	movs	r1, #80	; 0x50
 8003d50:	4618      	mov	r0, r3
 8003d52:	f000 fb10 	bl	8004376 <TIM_ITRx_SetConfig>
      break;
 8003d56:	e029      	b.n	8003dac <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6818      	ldr	r0, [r3, #0]
 8003d5c:	683b      	ldr	r3, [r7, #0]
 8003d5e:	6859      	ldr	r1, [r3, #4]
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	68db      	ldr	r3, [r3, #12]
 8003d64:	461a      	mov	r2, r3
 8003d66:	f000 fad6 	bl	8004316 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	2160      	movs	r1, #96	; 0x60
 8003d70:	4618      	mov	r0, r3
 8003d72:	f000 fb00 	bl	8004376 <TIM_ITRx_SetConfig>
      break;
 8003d76:	e019      	b.n	8003dac <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6818      	ldr	r0, [r3, #0]
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	6859      	ldr	r1, [r3, #4]
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	68db      	ldr	r3, [r3, #12]
 8003d84:	461a      	mov	r2, r3
 8003d86:	f000 fa97 	bl	80042b8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	2140      	movs	r1, #64	; 0x40
 8003d90:	4618      	mov	r0, r3
 8003d92:	f000 faf0 	bl	8004376 <TIM_ITRx_SetConfig>
      break;
 8003d96:	e009      	b.n	8003dac <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681a      	ldr	r2, [r3, #0]
 8003d9c:	683b      	ldr	r3, [r7, #0]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	4619      	mov	r1, r3
 8003da2:	4610      	mov	r0, r2
 8003da4:	f000 fae7 	bl	8004376 <TIM_ITRx_SetConfig>
      break;
 8003da8:	e000      	b.n	8003dac <HAL_TIM_ConfigClockSource+0x154>
      break;
 8003daa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2201      	movs	r2, #1
 8003db0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2200      	movs	r2, #0
 8003db8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003dbc:	2300      	movs	r3, #0
}
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	3710      	adds	r7, #16
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	bd80      	pop	{r7, pc}

08003dc6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003dc6:	b480      	push	{r7}
 8003dc8:	b083      	sub	sp, #12
 8003dca:	af00      	add	r7, sp, #0
 8003dcc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003dce:	bf00      	nop
 8003dd0:	370c      	adds	r7, #12
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd8:	4770      	bx	lr

08003dda <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003dda:	b480      	push	{r7}
 8003ddc:	b083      	sub	sp, #12
 8003dde:	af00      	add	r7, sp, #0
 8003de0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003de2:	bf00      	nop
 8003de4:	370c      	adds	r7, #12
 8003de6:	46bd      	mov	sp, r7
 8003de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dec:	4770      	bx	lr

08003dee <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003dee:	b480      	push	{r7}
 8003df0:	b083      	sub	sp, #12
 8003df2:	af00      	add	r7, sp, #0
 8003df4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003df6:	bf00      	nop
 8003df8:	370c      	adds	r7, #12
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e00:	4770      	bx	lr

08003e02 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003e02:	b480      	push	{r7}
 8003e04:	b083      	sub	sp, #12
 8003e06:	af00      	add	r7, sp, #0
 8003e08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003e0a:	bf00      	nop
 8003e0c:	370c      	adds	r7, #12
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e14:	4770      	bx	lr
	...

08003e18 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003e18:	b480      	push	{r7}
 8003e1a:	b085      	sub	sp, #20
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
 8003e20:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	4a40      	ldr	r2, [pc, #256]	; (8003f2c <TIM_Base_SetConfig+0x114>)
 8003e2c:	4293      	cmp	r3, r2
 8003e2e:	d013      	beq.n	8003e58 <TIM_Base_SetConfig+0x40>
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e36:	d00f      	beq.n	8003e58 <TIM_Base_SetConfig+0x40>
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	4a3d      	ldr	r2, [pc, #244]	; (8003f30 <TIM_Base_SetConfig+0x118>)
 8003e3c:	4293      	cmp	r3, r2
 8003e3e:	d00b      	beq.n	8003e58 <TIM_Base_SetConfig+0x40>
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	4a3c      	ldr	r2, [pc, #240]	; (8003f34 <TIM_Base_SetConfig+0x11c>)
 8003e44:	4293      	cmp	r3, r2
 8003e46:	d007      	beq.n	8003e58 <TIM_Base_SetConfig+0x40>
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	4a3b      	ldr	r2, [pc, #236]	; (8003f38 <TIM_Base_SetConfig+0x120>)
 8003e4c:	4293      	cmp	r3, r2
 8003e4e:	d003      	beq.n	8003e58 <TIM_Base_SetConfig+0x40>
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	4a3a      	ldr	r2, [pc, #232]	; (8003f3c <TIM_Base_SetConfig+0x124>)
 8003e54:	4293      	cmp	r3, r2
 8003e56:	d108      	bne.n	8003e6a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e5e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	685b      	ldr	r3, [r3, #4]
 8003e64:	68fa      	ldr	r2, [r7, #12]
 8003e66:	4313      	orrs	r3, r2
 8003e68:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	4a2f      	ldr	r2, [pc, #188]	; (8003f2c <TIM_Base_SetConfig+0x114>)
 8003e6e:	4293      	cmp	r3, r2
 8003e70:	d02b      	beq.n	8003eca <TIM_Base_SetConfig+0xb2>
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e78:	d027      	beq.n	8003eca <TIM_Base_SetConfig+0xb2>
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	4a2c      	ldr	r2, [pc, #176]	; (8003f30 <TIM_Base_SetConfig+0x118>)
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	d023      	beq.n	8003eca <TIM_Base_SetConfig+0xb2>
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	4a2b      	ldr	r2, [pc, #172]	; (8003f34 <TIM_Base_SetConfig+0x11c>)
 8003e86:	4293      	cmp	r3, r2
 8003e88:	d01f      	beq.n	8003eca <TIM_Base_SetConfig+0xb2>
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	4a2a      	ldr	r2, [pc, #168]	; (8003f38 <TIM_Base_SetConfig+0x120>)
 8003e8e:	4293      	cmp	r3, r2
 8003e90:	d01b      	beq.n	8003eca <TIM_Base_SetConfig+0xb2>
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	4a29      	ldr	r2, [pc, #164]	; (8003f3c <TIM_Base_SetConfig+0x124>)
 8003e96:	4293      	cmp	r3, r2
 8003e98:	d017      	beq.n	8003eca <TIM_Base_SetConfig+0xb2>
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	4a28      	ldr	r2, [pc, #160]	; (8003f40 <TIM_Base_SetConfig+0x128>)
 8003e9e:	4293      	cmp	r3, r2
 8003ea0:	d013      	beq.n	8003eca <TIM_Base_SetConfig+0xb2>
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	4a27      	ldr	r2, [pc, #156]	; (8003f44 <TIM_Base_SetConfig+0x12c>)
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	d00f      	beq.n	8003eca <TIM_Base_SetConfig+0xb2>
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	4a26      	ldr	r2, [pc, #152]	; (8003f48 <TIM_Base_SetConfig+0x130>)
 8003eae:	4293      	cmp	r3, r2
 8003eb0:	d00b      	beq.n	8003eca <TIM_Base_SetConfig+0xb2>
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	4a25      	ldr	r2, [pc, #148]	; (8003f4c <TIM_Base_SetConfig+0x134>)
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d007      	beq.n	8003eca <TIM_Base_SetConfig+0xb2>
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	4a24      	ldr	r2, [pc, #144]	; (8003f50 <TIM_Base_SetConfig+0x138>)
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d003      	beq.n	8003eca <TIM_Base_SetConfig+0xb2>
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	4a23      	ldr	r2, [pc, #140]	; (8003f54 <TIM_Base_SetConfig+0x13c>)
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	d108      	bne.n	8003edc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ed0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	68db      	ldr	r3, [r3, #12]
 8003ed6:	68fa      	ldr	r2, [r7, #12]
 8003ed8:	4313      	orrs	r3, r2
 8003eda:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	695b      	ldr	r3, [r3, #20]
 8003ee6:	4313      	orrs	r3, r2
 8003ee8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	68fa      	ldr	r2, [r7, #12]
 8003eee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003ef0:	683b      	ldr	r3, [r7, #0]
 8003ef2:	689a      	ldr	r2, [r3, #8]
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	681a      	ldr	r2, [r3, #0]
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	4a0a      	ldr	r2, [pc, #40]	; (8003f2c <TIM_Base_SetConfig+0x114>)
 8003f04:	4293      	cmp	r3, r2
 8003f06:	d003      	beq.n	8003f10 <TIM_Base_SetConfig+0xf8>
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	4a0c      	ldr	r2, [pc, #48]	; (8003f3c <TIM_Base_SetConfig+0x124>)
 8003f0c:	4293      	cmp	r3, r2
 8003f0e:	d103      	bne.n	8003f18 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	691a      	ldr	r2, [r3, #16]
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2201      	movs	r2, #1
 8003f1c:	615a      	str	r2, [r3, #20]
}
 8003f1e:	bf00      	nop
 8003f20:	3714      	adds	r7, #20
 8003f22:	46bd      	mov	sp, r7
 8003f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f28:	4770      	bx	lr
 8003f2a:	bf00      	nop
 8003f2c:	40010000 	.word	0x40010000
 8003f30:	40000400 	.word	0x40000400
 8003f34:	40000800 	.word	0x40000800
 8003f38:	40000c00 	.word	0x40000c00
 8003f3c:	40010400 	.word	0x40010400
 8003f40:	40014000 	.word	0x40014000
 8003f44:	40014400 	.word	0x40014400
 8003f48:	40014800 	.word	0x40014800
 8003f4c:	40001800 	.word	0x40001800
 8003f50:	40001c00 	.word	0x40001c00
 8003f54:	40002000 	.word	0x40002000

08003f58 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003f58:	b480      	push	{r7}
 8003f5a:	b087      	sub	sp, #28
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
 8003f60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6a1b      	ldr	r3, [r3, #32]
 8003f66:	f023 0201 	bic.w	r2, r3, #1
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6a1b      	ldr	r3, [r3, #32]
 8003f72:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	685b      	ldr	r3, [r3, #4]
 8003f78:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	699b      	ldr	r3, [r3, #24]
 8003f7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	f023 0303 	bic.w	r3, r3, #3
 8003f8e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	68fa      	ldr	r2, [r7, #12]
 8003f96:	4313      	orrs	r3, r2
 8003f98:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003f9a:	697b      	ldr	r3, [r7, #20]
 8003f9c:	f023 0302 	bic.w	r3, r3, #2
 8003fa0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	689b      	ldr	r3, [r3, #8]
 8003fa6:	697a      	ldr	r2, [r7, #20]
 8003fa8:	4313      	orrs	r3, r2
 8003faa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	4a20      	ldr	r2, [pc, #128]	; (8004030 <TIM_OC1_SetConfig+0xd8>)
 8003fb0:	4293      	cmp	r3, r2
 8003fb2:	d003      	beq.n	8003fbc <TIM_OC1_SetConfig+0x64>
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	4a1f      	ldr	r2, [pc, #124]	; (8004034 <TIM_OC1_SetConfig+0xdc>)
 8003fb8:	4293      	cmp	r3, r2
 8003fba:	d10c      	bne.n	8003fd6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003fbc:	697b      	ldr	r3, [r7, #20]
 8003fbe:	f023 0308 	bic.w	r3, r3, #8
 8003fc2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003fc4:	683b      	ldr	r3, [r7, #0]
 8003fc6:	68db      	ldr	r3, [r3, #12]
 8003fc8:	697a      	ldr	r2, [r7, #20]
 8003fca:	4313      	orrs	r3, r2
 8003fcc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003fce:	697b      	ldr	r3, [r7, #20]
 8003fd0:	f023 0304 	bic.w	r3, r3, #4
 8003fd4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	4a15      	ldr	r2, [pc, #84]	; (8004030 <TIM_OC1_SetConfig+0xd8>)
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	d003      	beq.n	8003fe6 <TIM_OC1_SetConfig+0x8e>
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	4a14      	ldr	r2, [pc, #80]	; (8004034 <TIM_OC1_SetConfig+0xdc>)
 8003fe2:	4293      	cmp	r3, r2
 8003fe4:	d111      	bne.n	800400a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003fe6:	693b      	ldr	r3, [r7, #16]
 8003fe8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003fec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003fee:	693b      	ldr	r3, [r7, #16]
 8003ff0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003ff4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003ff6:	683b      	ldr	r3, [r7, #0]
 8003ff8:	695b      	ldr	r3, [r3, #20]
 8003ffa:	693a      	ldr	r2, [r7, #16]
 8003ffc:	4313      	orrs	r3, r2
 8003ffe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004000:	683b      	ldr	r3, [r7, #0]
 8004002:	699b      	ldr	r3, [r3, #24]
 8004004:	693a      	ldr	r2, [r7, #16]
 8004006:	4313      	orrs	r3, r2
 8004008:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	693a      	ldr	r2, [r7, #16]
 800400e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	68fa      	ldr	r2, [r7, #12]
 8004014:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	685a      	ldr	r2, [r3, #4]
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	697a      	ldr	r2, [r7, #20]
 8004022:	621a      	str	r2, [r3, #32]
}
 8004024:	bf00      	nop
 8004026:	371c      	adds	r7, #28
 8004028:	46bd      	mov	sp, r7
 800402a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402e:	4770      	bx	lr
 8004030:	40010000 	.word	0x40010000
 8004034:	40010400 	.word	0x40010400

08004038 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004038:	b480      	push	{r7}
 800403a:	b087      	sub	sp, #28
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
 8004040:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6a1b      	ldr	r3, [r3, #32]
 8004046:	f023 0210 	bic.w	r2, r3, #16
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6a1b      	ldr	r3, [r3, #32]
 8004052:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	685b      	ldr	r3, [r3, #4]
 8004058:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	699b      	ldr	r3, [r3, #24]
 800405e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004066:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800406e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	021b      	lsls	r3, r3, #8
 8004076:	68fa      	ldr	r2, [r7, #12]
 8004078:	4313      	orrs	r3, r2
 800407a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800407c:	697b      	ldr	r3, [r7, #20]
 800407e:	f023 0320 	bic.w	r3, r3, #32
 8004082:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	689b      	ldr	r3, [r3, #8]
 8004088:	011b      	lsls	r3, r3, #4
 800408a:	697a      	ldr	r2, [r7, #20]
 800408c:	4313      	orrs	r3, r2
 800408e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	4a22      	ldr	r2, [pc, #136]	; (800411c <TIM_OC2_SetConfig+0xe4>)
 8004094:	4293      	cmp	r3, r2
 8004096:	d003      	beq.n	80040a0 <TIM_OC2_SetConfig+0x68>
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	4a21      	ldr	r2, [pc, #132]	; (8004120 <TIM_OC2_SetConfig+0xe8>)
 800409c:	4293      	cmp	r3, r2
 800409e:	d10d      	bne.n	80040bc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80040a0:	697b      	ldr	r3, [r7, #20]
 80040a2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80040a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	68db      	ldr	r3, [r3, #12]
 80040ac:	011b      	lsls	r3, r3, #4
 80040ae:	697a      	ldr	r2, [r7, #20]
 80040b0:	4313      	orrs	r3, r2
 80040b2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80040b4:	697b      	ldr	r3, [r7, #20]
 80040b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80040ba:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	4a17      	ldr	r2, [pc, #92]	; (800411c <TIM_OC2_SetConfig+0xe4>)
 80040c0:	4293      	cmp	r3, r2
 80040c2:	d003      	beq.n	80040cc <TIM_OC2_SetConfig+0x94>
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	4a16      	ldr	r2, [pc, #88]	; (8004120 <TIM_OC2_SetConfig+0xe8>)
 80040c8:	4293      	cmp	r3, r2
 80040ca:	d113      	bne.n	80040f4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80040cc:	693b      	ldr	r3, [r7, #16]
 80040ce:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80040d2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80040d4:	693b      	ldr	r3, [r7, #16]
 80040d6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80040da:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	695b      	ldr	r3, [r3, #20]
 80040e0:	009b      	lsls	r3, r3, #2
 80040e2:	693a      	ldr	r2, [r7, #16]
 80040e4:	4313      	orrs	r3, r2
 80040e6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	699b      	ldr	r3, [r3, #24]
 80040ec:	009b      	lsls	r3, r3, #2
 80040ee:	693a      	ldr	r2, [r7, #16]
 80040f0:	4313      	orrs	r3, r2
 80040f2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	693a      	ldr	r2, [r7, #16]
 80040f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	68fa      	ldr	r2, [r7, #12]
 80040fe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	685a      	ldr	r2, [r3, #4]
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	697a      	ldr	r2, [r7, #20]
 800410c:	621a      	str	r2, [r3, #32]
}
 800410e:	bf00      	nop
 8004110:	371c      	adds	r7, #28
 8004112:	46bd      	mov	sp, r7
 8004114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004118:	4770      	bx	lr
 800411a:	bf00      	nop
 800411c:	40010000 	.word	0x40010000
 8004120:	40010400 	.word	0x40010400

08004124 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004124:	b480      	push	{r7}
 8004126:	b087      	sub	sp, #28
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
 800412c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6a1b      	ldr	r3, [r3, #32]
 8004132:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6a1b      	ldr	r3, [r3, #32]
 800413e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	685b      	ldr	r3, [r3, #4]
 8004144:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	69db      	ldr	r3, [r3, #28]
 800414a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004152:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	f023 0303 	bic.w	r3, r3, #3
 800415a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	68fa      	ldr	r2, [r7, #12]
 8004162:	4313      	orrs	r3, r2
 8004164:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004166:	697b      	ldr	r3, [r7, #20]
 8004168:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800416c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800416e:	683b      	ldr	r3, [r7, #0]
 8004170:	689b      	ldr	r3, [r3, #8]
 8004172:	021b      	lsls	r3, r3, #8
 8004174:	697a      	ldr	r2, [r7, #20]
 8004176:	4313      	orrs	r3, r2
 8004178:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	4a21      	ldr	r2, [pc, #132]	; (8004204 <TIM_OC3_SetConfig+0xe0>)
 800417e:	4293      	cmp	r3, r2
 8004180:	d003      	beq.n	800418a <TIM_OC3_SetConfig+0x66>
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	4a20      	ldr	r2, [pc, #128]	; (8004208 <TIM_OC3_SetConfig+0xe4>)
 8004186:	4293      	cmp	r3, r2
 8004188:	d10d      	bne.n	80041a6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800418a:	697b      	ldr	r3, [r7, #20]
 800418c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004190:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004192:	683b      	ldr	r3, [r7, #0]
 8004194:	68db      	ldr	r3, [r3, #12]
 8004196:	021b      	lsls	r3, r3, #8
 8004198:	697a      	ldr	r2, [r7, #20]
 800419a:	4313      	orrs	r3, r2
 800419c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800419e:	697b      	ldr	r3, [r7, #20]
 80041a0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80041a4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	4a16      	ldr	r2, [pc, #88]	; (8004204 <TIM_OC3_SetConfig+0xe0>)
 80041aa:	4293      	cmp	r3, r2
 80041ac:	d003      	beq.n	80041b6 <TIM_OC3_SetConfig+0x92>
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	4a15      	ldr	r2, [pc, #84]	; (8004208 <TIM_OC3_SetConfig+0xe4>)
 80041b2:	4293      	cmp	r3, r2
 80041b4:	d113      	bne.n	80041de <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80041b6:	693b      	ldr	r3, [r7, #16]
 80041b8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80041bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80041be:	693b      	ldr	r3, [r7, #16]
 80041c0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80041c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	695b      	ldr	r3, [r3, #20]
 80041ca:	011b      	lsls	r3, r3, #4
 80041cc:	693a      	ldr	r2, [r7, #16]
 80041ce:	4313      	orrs	r3, r2
 80041d0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80041d2:	683b      	ldr	r3, [r7, #0]
 80041d4:	699b      	ldr	r3, [r3, #24]
 80041d6:	011b      	lsls	r3, r3, #4
 80041d8:	693a      	ldr	r2, [r7, #16]
 80041da:	4313      	orrs	r3, r2
 80041dc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	693a      	ldr	r2, [r7, #16]
 80041e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	68fa      	ldr	r2, [r7, #12]
 80041e8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80041ea:	683b      	ldr	r3, [r7, #0]
 80041ec:	685a      	ldr	r2, [r3, #4]
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	697a      	ldr	r2, [r7, #20]
 80041f6:	621a      	str	r2, [r3, #32]
}
 80041f8:	bf00      	nop
 80041fa:	371c      	adds	r7, #28
 80041fc:	46bd      	mov	sp, r7
 80041fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004202:	4770      	bx	lr
 8004204:	40010000 	.word	0x40010000
 8004208:	40010400 	.word	0x40010400

0800420c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800420c:	b480      	push	{r7}
 800420e:	b087      	sub	sp, #28
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
 8004214:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6a1b      	ldr	r3, [r3, #32]
 800421a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6a1b      	ldr	r3, [r3, #32]
 8004226:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	685b      	ldr	r3, [r3, #4]
 800422c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	69db      	ldr	r3, [r3, #28]
 8004232:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800423a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004242:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004244:	683b      	ldr	r3, [r7, #0]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	021b      	lsls	r3, r3, #8
 800424a:	68fa      	ldr	r2, [r7, #12]
 800424c:	4313      	orrs	r3, r2
 800424e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004250:	693b      	ldr	r3, [r7, #16]
 8004252:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004256:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	689b      	ldr	r3, [r3, #8]
 800425c:	031b      	lsls	r3, r3, #12
 800425e:	693a      	ldr	r2, [r7, #16]
 8004260:	4313      	orrs	r3, r2
 8004262:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	4a12      	ldr	r2, [pc, #72]	; (80042b0 <TIM_OC4_SetConfig+0xa4>)
 8004268:	4293      	cmp	r3, r2
 800426a:	d003      	beq.n	8004274 <TIM_OC4_SetConfig+0x68>
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	4a11      	ldr	r2, [pc, #68]	; (80042b4 <TIM_OC4_SetConfig+0xa8>)
 8004270:	4293      	cmp	r3, r2
 8004272:	d109      	bne.n	8004288 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004274:	697b      	ldr	r3, [r7, #20]
 8004276:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800427a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	695b      	ldr	r3, [r3, #20]
 8004280:	019b      	lsls	r3, r3, #6
 8004282:	697a      	ldr	r2, [r7, #20]
 8004284:	4313      	orrs	r3, r2
 8004286:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	697a      	ldr	r2, [r7, #20]
 800428c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	68fa      	ldr	r2, [r7, #12]
 8004292:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004294:	683b      	ldr	r3, [r7, #0]
 8004296:	685a      	ldr	r2, [r3, #4]
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	693a      	ldr	r2, [r7, #16]
 80042a0:	621a      	str	r2, [r3, #32]
}
 80042a2:	bf00      	nop
 80042a4:	371c      	adds	r7, #28
 80042a6:	46bd      	mov	sp, r7
 80042a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ac:	4770      	bx	lr
 80042ae:	bf00      	nop
 80042b0:	40010000 	.word	0x40010000
 80042b4:	40010400 	.word	0x40010400

080042b8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80042b8:	b480      	push	{r7}
 80042ba:	b087      	sub	sp, #28
 80042bc:	af00      	add	r7, sp, #0
 80042be:	60f8      	str	r0, [r7, #12]
 80042c0:	60b9      	str	r1, [r7, #8]
 80042c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	6a1b      	ldr	r3, [r3, #32]
 80042c8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	6a1b      	ldr	r3, [r3, #32]
 80042ce:	f023 0201 	bic.w	r2, r3, #1
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	699b      	ldr	r3, [r3, #24]
 80042da:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80042dc:	693b      	ldr	r3, [r7, #16]
 80042de:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80042e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	011b      	lsls	r3, r3, #4
 80042e8:	693a      	ldr	r2, [r7, #16]
 80042ea:	4313      	orrs	r3, r2
 80042ec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80042ee:	697b      	ldr	r3, [r7, #20]
 80042f0:	f023 030a 	bic.w	r3, r3, #10
 80042f4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80042f6:	697a      	ldr	r2, [r7, #20]
 80042f8:	68bb      	ldr	r3, [r7, #8]
 80042fa:	4313      	orrs	r3, r2
 80042fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	693a      	ldr	r2, [r7, #16]
 8004302:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	697a      	ldr	r2, [r7, #20]
 8004308:	621a      	str	r2, [r3, #32]
}
 800430a:	bf00      	nop
 800430c:	371c      	adds	r7, #28
 800430e:	46bd      	mov	sp, r7
 8004310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004314:	4770      	bx	lr

08004316 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004316:	b480      	push	{r7}
 8004318:	b087      	sub	sp, #28
 800431a:	af00      	add	r7, sp, #0
 800431c:	60f8      	str	r0, [r7, #12]
 800431e:	60b9      	str	r1, [r7, #8]
 8004320:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	6a1b      	ldr	r3, [r3, #32]
 8004326:	f023 0210 	bic.w	r2, r3, #16
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	699b      	ldr	r3, [r3, #24]
 8004332:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	6a1b      	ldr	r3, [r3, #32]
 8004338:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800433a:	697b      	ldr	r3, [r7, #20]
 800433c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004340:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	031b      	lsls	r3, r3, #12
 8004346:	697a      	ldr	r2, [r7, #20]
 8004348:	4313      	orrs	r3, r2
 800434a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800434c:	693b      	ldr	r3, [r7, #16]
 800434e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004352:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004354:	68bb      	ldr	r3, [r7, #8]
 8004356:	011b      	lsls	r3, r3, #4
 8004358:	693a      	ldr	r2, [r7, #16]
 800435a:	4313      	orrs	r3, r2
 800435c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	697a      	ldr	r2, [r7, #20]
 8004362:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	693a      	ldr	r2, [r7, #16]
 8004368:	621a      	str	r2, [r3, #32]
}
 800436a:	bf00      	nop
 800436c:	371c      	adds	r7, #28
 800436e:	46bd      	mov	sp, r7
 8004370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004374:	4770      	bx	lr

08004376 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004376:	b480      	push	{r7}
 8004378:	b085      	sub	sp, #20
 800437a:	af00      	add	r7, sp, #0
 800437c:	6078      	str	r0, [r7, #4]
 800437e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	689b      	ldr	r3, [r3, #8]
 8004384:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800438c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800438e:	683a      	ldr	r2, [r7, #0]
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	4313      	orrs	r3, r2
 8004394:	f043 0307 	orr.w	r3, r3, #7
 8004398:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	68fa      	ldr	r2, [r7, #12]
 800439e:	609a      	str	r2, [r3, #8]
}
 80043a0:	bf00      	nop
 80043a2:	3714      	adds	r7, #20
 80043a4:	46bd      	mov	sp, r7
 80043a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043aa:	4770      	bx	lr

080043ac <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80043ac:	b480      	push	{r7}
 80043ae:	b087      	sub	sp, #28
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	60f8      	str	r0, [r7, #12]
 80043b4:	60b9      	str	r1, [r7, #8]
 80043b6:	607a      	str	r2, [r7, #4]
 80043b8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	689b      	ldr	r3, [r3, #8]
 80043be:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80043c0:	697b      	ldr	r3, [r7, #20]
 80043c2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80043c6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80043c8:	683b      	ldr	r3, [r7, #0]
 80043ca:	021a      	lsls	r2, r3, #8
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	431a      	orrs	r2, r3
 80043d0:	68bb      	ldr	r3, [r7, #8]
 80043d2:	4313      	orrs	r3, r2
 80043d4:	697a      	ldr	r2, [r7, #20]
 80043d6:	4313      	orrs	r3, r2
 80043d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	697a      	ldr	r2, [r7, #20]
 80043de:	609a      	str	r2, [r3, #8]
}
 80043e0:	bf00      	nop
 80043e2:	371c      	adds	r7, #28
 80043e4:	46bd      	mov	sp, r7
 80043e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ea:	4770      	bx	lr

080043ec <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80043ec:	b480      	push	{r7}
 80043ee:	b087      	sub	sp, #28
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	60f8      	str	r0, [r7, #12]
 80043f4:	60b9      	str	r1, [r7, #8]
 80043f6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80043f8:	68bb      	ldr	r3, [r7, #8]
 80043fa:	f003 031f 	and.w	r3, r3, #31
 80043fe:	2201      	movs	r2, #1
 8004400:	fa02 f303 	lsl.w	r3, r2, r3
 8004404:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	6a1a      	ldr	r2, [r3, #32]
 800440a:	697b      	ldr	r3, [r7, #20]
 800440c:	43db      	mvns	r3, r3
 800440e:	401a      	ands	r2, r3
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	6a1a      	ldr	r2, [r3, #32]
 8004418:	68bb      	ldr	r3, [r7, #8]
 800441a:	f003 031f 	and.w	r3, r3, #31
 800441e:	6879      	ldr	r1, [r7, #4]
 8004420:	fa01 f303 	lsl.w	r3, r1, r3
 8004424:	431a      	orrs	r2, r3
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	621a      	str	r2, [r3, #32]
}
 800442a:	bf00      	nop
 800442c:	371c      	adds	r7, #28
 800442e:	46bd      	mov	sp, r7
 8004430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004434:	4770      	bx	lr

08004436 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004436:	b480      	push	{r7}
 8004438:	b085      	sub	sp, #20
 800443a:	af00      	add	r7, sp, #0
 800443c:	6078      	str	r0, [r7, #4]
 800443e:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004446:	2b01      	cmp	r3, #1
 8004448:	d101      	bne.n	800444e <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800444a:	2302      	movs	r3, #2
 800444c:	e032      	b.n	80044b4 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	2201      	movs	r2, #1
 8004452:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	2202      	movs	r2, #2
 800445a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	685b      	ldr	r3, [r3, #4]
 8004464:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	689b      	ldr	r3, [r3, #8]
 800446c:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004474:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	68fa      	ldr	r2, [r7, #12]
 800447c:	4313      	orrs	r3, r2
 800447e:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8004480:	68bb      	ldr	r3, [r7, #8]
 8004482:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004486:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	685b      	ldr	r3, [r3, #4]
 800448c:	68ba      	ldr	r2, [r7, #8]
 800448e:	4313      	orrs	r3, r2
 8004490:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	68fa      	ldr	r2, [r7, #12]
 8004498:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	68ba      	ldr	r2, [r7, #8]
 80044a0:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	2201      	movs	r2, #1
 80044a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	2200      	movs	r2, #0
 80044ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80044b2:	2300      	movs	r3, #0
}
 80044b4:	4618      	mov	r0, r3
 80044b6:	3714      	adds	r7, #20
 80044b8:	46bd      	mov	sp, r7
 80044ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044be:	4770      	bx	lr

080044c0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80044c0:	b480      	push	{r7}
 80044c2:	b083      	sub	sp, #12
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80044c8:	bf00      	nop
 80044ca:	370c      	adds	r7, #12
 80044cc:	46bd      	mov	sp, r7
 80044ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d2:	4770      	bx	lr

080044d4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80044d4:	b480      	push	{r7}
 80044d6:	b083      	sub	sp, #12
 80044d8:	af00      	add	r7, sp, #0
 80044da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80044dc:	bf00      	nop
 80044de:	370c      	adds	r7, #12
 80044e0:	46bd      	mov	sp, r7
 80044e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e6:	4770      	bx	lr

080044e8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80044e8:	b580      	push	{r7, lr}
 80044ea:	b082      	sub	sp, #8
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d101      	bne.n	80044fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80044f6:	2301      	movs	r3, #1
 80044f8:	e03f      	b.n	800457a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004500:	b2db      	uxtb	r3, r3
 8004502:	2b00      	cmp	r3, #0
 8004504:	d106      	bne.n	8004514 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	2200      	movs	r2, #0
 800450a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800450e:	6878      	ldr	r0, [r7, #4]
 8004510:	f005 f9be 	bl	8009890 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2224      	movs	r2, #36	; 0x24
 8004518:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	68da      	ldr	r2, [r3, #12]
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800452a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800452c:	6878      	ldr	r0, [r7, #4]
 800452e:	f000 f90b 	bl	8004748 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	691a      	ldr	r2, [r3, #16]
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004540:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	695a      	ldr	r2, [r3, #20]
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004550:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	68da      	ldr	r2, [r3, #12]
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004560:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	2200      	movs	r2, #0
 8004566:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2220      	movs	r2, #32
 800456c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2220      	movs	r2, #32
 8004574:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8004578:	2300      	movs	r3, #0
}
 800457a:	4618      	mov	r0, r3
 800457c:	3708      	adds	r7, #8
 800457e:	46bd      	mov	sp, r7
 8004580:	bd80      	pop	{r7, pc}

08004582 <HAL_UART_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004582:	b580      	push	{r7, lr}
 8004584:	b088      	sub	sp, #32
 8004586:	af02      	add	r7, sp, #8
 8004588:	60f8      	str	r0, [r7, #12]
 800458a:	60b9      	str	r1, [r7, #8]
 800458c:	603b      	str	r3, [r7, #0]
 800458e:	4613      	mov	r3, r2
 8004590:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8004592:	2300      	movs	r3, #0
 8004594:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800459c:	b2db      	uxtb	r3, r3
 800459e:	2b20      	cmp	r3, #32
 80045a0:	f040 8083 	bne.w	80046aa <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 80045a4:	68bb      	ldr	r3, [r7, #8]
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d002      	beq.n	80045b0 <HAL_UART_Transmit+0x2e>
 80045aa:	88fb      	ldrh	r3, [r7, #6]
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d101      	bne.n	80045b4 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80045b0:	2301      	movs	r3, #1
 80045b2:	e07b      	b.n	80046ac <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80045ba:	2b01      	cmp	r3, #1
 80045bc:	d101      	bne.n	80045c2 <HAL_UART_Transmit+0x40>
 80045be:	2302      	movs	r3, #2
 80045c0:	e074      	b.n	80046ac <HAL_UART_Transmit+0x12a>
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	2201      	movs	r2, #1
 80045c6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	2200      	movs	r2, #0
 80045ce:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	2221      	movs	r2, #33	; 0x21
 80045d4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80045d8:	f7fc fcec 	bl	8000fb4 <HAL_GetTick>
 80045dc:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	88fa      	ldrh	r2, [r7, #6]
 80045e2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	88fa      	ldrh	r2, [r7, #6]
 80045e8:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80045ea:	e042      	b.n	8004672 <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80045f0:	b29b      	uxth	r3, r3
 80045f2:	3b01      	subs	r3, #1
 80045f4:	b29a      	uxth	r2, r3
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	689b      	ldr	r3, [r3, #8]
 80045fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004602:	d122      	bne.n	800464a <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	9300      	str	r3, [sp, #0]
 8004608:	697b      	ldr	r3, [r7, #20]
 800460a:	2200      	movs	r2, #0
 800460c:	2180      	movs	r1, #128	; 0x80
 800460e:	68f8      	ldr	r0, [r7, #12]
 8004610:	f000 f850 	bl	80046b4 <UART_WaitOnFlagUntilTimeout>
 8004614:	4603      	mov	r3, r0
 8004616:	2b00      	cmp	r3, #0
 8004618:	d001      	beq.n	800461e <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 800461a:	2303      	movs	r3, #3
 800461c:	e046      	b.n	80046ac <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800461e:	68bb      	ldr	r3, [r7, #8]
 8004620:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8004622:	693b      	ldr	r3, [r7, #16]
 8004624:	881b      	ldrh	r3, [r3, #0]
 8004626:	461a      	mov	r2, r3
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004630:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	691b      	ldr	r3, [r3, #16]
 8004636:	2b00      	cmp	r3, #0
 8004638:	d103      	bne.n	8004642 <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 800463a:	68bb      	ldr	r3, [r7, #8]
 800463c:	3302      	adds	r3, #2
 800463e:	60bb      	str	r3, [r7, #8]
 8004640:	e017      	b.n	8004672 <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 8004642:	68bb      	ldr	r3, [r7, #8]
 8004644:	3301      	adds	r3, #1
 8004646:	60bb      	str	r3, [r7, #8]
 8004648:	e013      	b.n	8004672 <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800464a:	683b      	ldr	r3, [r7, #0]
 800464c:	9300      	str	r3, [sp, #0]
 800464e:	697b      	ldr	r3, [r7, #20]
 8004650:	2200      	movs	r2, #0
 8004652:	2180      	movs	r1, #128	; 0x80
 8004654:	68f8      	ldr	r0, [r7, #12]
 8004656:	f000 f82d 	bl	80046b4 <UART_WaitOnFlagUntilTimeout>
 800465a:	4603      	mov	r3, r0
 800465c:	2b00      	cmp	r3, #0
 800465e:	d001      	beq.n	8004664 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8004660:	2303      	movs	r3, #3
 8004662:	e023      	b.n	80046ac <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8004664:	68bb      	ldr	r3, [r7, #8]
 8004666:	1c5a      	adds	r2, r3, #1
 8004668:	60ba      	str	r2, [r7, #8]
 800466a:	781a      	ldrb	r2, [r3, #0]
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004676:	b29b      	uxth	r3, r3
 8004678:	2b00      	cmp	r3, #0
 800467a:	d1b7      	bne.n	80045ec <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	9300      	str	r3, [sp, #0]
 8004680:	697b      	ldr	r3, [r7, #20]
 8004682:	2200      	movs	r2, #0
 8004684:	2140      	movs	r1, #64	; 0x40
 8004686:	68f8      	ldr	r0, [r7, #12]
 8004688:	f000 f814 	bl	80046b4 <UART_WaitOnFlagUntilTimeout>
 800468c:	4603      	mov	r3, r0
 800468e:	2b00      	cmp	r3, #0
 8004690:	d001      	beq.n	8004696 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8004692:	2303      	movs	r3, #3
 8004694:	e00a      	b.n	80046ac <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	2220      	movs	r2, #32
 800469a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	2200      	movs	r2, #0
 80046a2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 80046a6:	2300      	movs	r3, #0
 80046a8:	e000      	b.n	80046ac <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80046aa:	2302      	movs	r3, #2
  }
}
 80046ac:	4618      	mov	r0, r3
 80046ae:	3718      	adds	r7, #24
 80046b0:	46bd      	mov	sp, r7
 80046b2:	bd80      	pop	{r7, pc}

080046b4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80046b4:	b580      	push	{r7, lr}
 80046b6:	b084      	sub	sp, #16
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	60f8      	str	r0, [r7, #12]
 80046bc:	60b9      	str	r1, [r7, #8]
 80046be:	603b      	str	r3, [r7, #0]
 80046c0:	4613      	mov	r3, r2
 80046c2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80046c4:	e02c      	b.n	8004720 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80046c6:	69bb      	ldr	r3, [r7, #24]
 80046c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046cc:	d028      	beq.n	8004720 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80046ce:	69bb      	ldr	r3, [r7, #24]
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d007      	beq.n	80046e4 <UART_WaitOnFlagUntilTimeout+0x30>
 80046d4:	f7fc fc6e 	bl	8000fb4 <HAL_GetTick>
 80046d8:	4602      	mov	r2, r0
 80046da:	683b      	ldr	r3, [r7, #0]
 80046dc:	1ad3      	subs	r3, r2, r3
 80046de:	69ba      	ldr	r2, [r7, #24]
 80046e0:	429a      	cmp	r2, r3
 80046e2:	d21d      	bcs.n	8004720 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	68da      	ldr	r2, [r3, #12]
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80046f2:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	695a      	ldr	r2, [r3, #20]
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f022 0201 	bic.w	r2, r2, #1
 8004702:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	2220      	movs	r2, #32
 8004708:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	2220      	movs	r2, #32
 8004710:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	2200      	movs	r2, #0
 8004718:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 800471c:	2303      	movs	r3, #3
 800471e:	e00f      	b.n	8004740 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	681a      	ldr	r2, [r3, #0]
 8004726:	68bb      	ldr	r3, [r7, #8]
 8004728:	4013      	ands	r3, r2
 800472a:	68ba      	ldr	r2, [r7, #8]
 800472c:	429a      	cmp	r2, r3
 800472e:	bf0c      	ite	eq
 8004730:	2301      	moveq	r3, #1
 8004732:	2300      	movne	r3, #0
 8004734:	b2db      	uxtb	r3, r3
 8004736:	461a      	mov	r2, r3
 8004738:	79fb      	ldrb	r3, [r7, #7]
 800473a:	429a      	cmp	r2, r3
 800473c:	d0c3      	beq.n	80046c6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800473e:	2300      	movs	r3, #0
}
 8004740:	4618      	mov	r0, r3
 8004742:	3710      	adds	r7, #16
 8004744:	46bd      	mov	sp, r7
 8004746:	bd80      	pop	{r7, pc}

08004748 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004748:	b5b0      	push	{r4, r5, r7, lr}
 800474a:	b084      	sub	sp, #16
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	691b      	ldr	r3, [r3, #16]
 8004756:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	68da      	ldr	r2, [r3, #12]
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	430a      	orrs	r2, r1
 8004764:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	689a      	ldr	r2, [r3, #8]
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	691b      	ldr	r3, [r3, #16]
 800476e:	431a      	orrs	r2, r3
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	695b      	ldr	r3, [r3, #20]
 8004774:	431a      	orrs	r2, r3
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	69db      	ldr	r3, [r3, #28]
 800477a:	4313      	orrs	r3, r2
 800477c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	68db      	ldr	r3, [r3, #12]
 8004784:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8004788:	f023 030c 	bic.w	r3, r3, #12
 800478c:	687a      	ldr	r2, [r7, #4]
 800478e:	6812      	ldr	r2, [r2, #0]
 8004790:	68f9      	ldr	r1, [r7, #12]
 8004792:	430b      	orrs	r3, r1
 8004794:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	695b      	ldr	r3, [r3, #20]
 800479c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	699a      	ldr	r2, [r3, #24]
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	430a      	orrs	r2, r1
 80047aa:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	69db      	ldr	r3, [r3, #28]
 80047b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80047b4:	f040 80e4 	bne.w	8004980 <UART_SetConfig+0x238>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	4aab      	ldr	r2, [pc, #684]	; (8004a6c <UART_SetConfig+0x324>)
 80047be:	4293      	cmp	r3, r2
 80047c0:	d004      	beq.n	80047cc <UART_SetConfig+0x84>
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	4aaa      	ldr	r2, [pc, #680]	; (8004a70 <UART_SetConfig+0x328>)
 80047c8:	4293      	cmp	r3, r2
 80047ca:	d16c      	bne.n	80048a6 <UART_SetConfig+0x15e>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80047cc:	f7fe f982 	bl	8002ad4 <HAL_RCC_GetPCLK2Freq>
 80047d0:	4602      	mov	r2, r0
 80047d2:	4613      	mov	r3, r2
 80047d4:	009b      	lsls	r3, r3, #2
 80047d6:	4413      	add	r3, r2
 80047d8:	009a      	lsls	r2, r3, #2
 80047da:	441a      	add	r2, r3
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	685b      	ldr	r3, [r3, #4]
 80047e0:	005b      	lsls	r3, r3, #1
 80047e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80047e6:	4aa3      	ldr	r2, [pc, #652]	; (8004a74 <UART_SetConfig+0x32c>)
 80047e8:	fba2 2303 	umull	r2, r3, r2, r3
 80047ec:	095b      	lsrs	r3, r3, #5
 80047ee:	011c      	lsls	r4, r3, #4
 80047f0:	f7fe f970 	bl	8002ad4 <HAL_RCC_GetPCLK2Freq>
 80047f4:	4602      	mov	r2, r0
 80047f6:	4613      	mov	r3, r2
 80047f8:	009b      	lsls	r3, r3, #2
 80047fa:	4413      	add	r3, r2
 80047fc:	009a      	lsls	r2, r3, #2
 80047fe:	441a      	add	r2, r3
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	685b      	ldr	r3, [r3, #4]
 8004804:	005b      	lsls	r3, r3, #1
 8004806:	fbb2 f5f3 	udiv	r5, r2, r3
 800480a:	f7fe f963 	bl	8002ad4 <HAL_RCC_GetPCLK2Freq>
 800480e:	4602      	mov	r2, r0
 8004810:	4613      	mov	r3, r2
 8004812:	009b      	lsls	r3, r3, #2
 8004814:	4413      	add	r3, r2
 8004816:	009a      	lsls	r2, r3, #2
 8004818:	441a      	add	r2, r3
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	685b      	ldr	r3, [r3, #4]
 800481e:	005b      	lsls	r3, r3, #1
 8004820:	fbb2 f3f3 	udiv	r3, r2, r3
 8004824:	4a93      	ldr	r2, [pc, #588]	; (8004a74 <UART_SetConfig+0x32c>)
 8004826:	fba2 2303 	umull	r2, r3, r2, r3
 800482a:	095b      	lsrs	r3, r3, #5
 800482c:	2264      	movs	r2, #100	; 0x64
 800482e:	fb02 f303 	mul.w	r3, r2, r3
 8004832:	1aeb      	subs	r3, r5, r3
 8004834:	00db      	lsls	r3, r3, #3
 8004836:	3332      	adds	r3, #50	; 0x32
 8004838:	4a8e      	ldr	r2, [pc, #568]	; (8004a74 <UART_SetConfig+0x32c>)
 800483a:	fba2 2303 	umull	r2, r3, r2, r3
 800483e:	095b      	lsrs	r3, r3, #5
 8004840:	005b      	lsls	r3, r3, #1
 8004842:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004846:	441c      	add	r4, r3
 8004848:	f7fe f944 	bl	8002ad4 <HAL_RCC_GetPCLK2Freq>
 800484c:	4602      	mov	r2, r0
 800484e:	4613      	mov	r3, r2
 8004850:	009b      	lsls	r3, r3, #2
 8004852:	4413      	add	r3, r2
 8004854:	009a      	lsls	r2, r3, #2
 8004856:	441a      	add	r2, r3
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	685b      	ldr	r3, [r3, #4]
 800485c:	005b      	lsls	r3, r3, #1
 800485e:	fbb2 f5f3 	udiv	r5, r2, r3
 8004862:	f7fe f937 	bl	8002ad4 <HAL_RCC_GetPCLK2Freq>
 8004866:	4602      	mov	r2, r0
 8004868:	4613      	mov	r3, r2
 800486a:	009b      	lsls	r3, r3, #2
 800486c:	4413      	add	r3, r2
 800486e:	009a      	lsls	r2, r3, #2
 8004870:	441a      	add	r2, r3
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	685b      	ldr	r3, [r3, #4]
 8004876:	005b      	lsls	r3, r3, #1
 8004878:	fbb2 f3f3 	udiv	r3, r2, r3
 800487c:	4a7d      	ldr	r2, [pc, #500]	; (8004a74 <UART_SetConfig+0x32c>)
 800487e:	fba2 2303 	umull	r2, r3, r2, r3
 8004882:	095b      	lsrs	r3, r3, #5
 8004884:	2264      	movs	r2, #100	; 0x64
 8004886:	fb02 f303 	mul.w	r3, r2, r3
 800488a:	1aeb      	subs	r3, r5, r3
 800488c:	00db      	lsls	r3, r3, #3
 800488e:	3332      	adds	r3, #50	; 0x32
 8004890:	4a78      	ldr	r2, [pc, #480]	; (8004a74 <UART_SetConfig+0x32c>)
 8004892:	fba2 2303 	umull	r2, r3, r2, r3
 8004896:	095b      	lsrs	r3, r3, #5
 8004898:	f003 0207 	and.w	r2, r3, #7
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	4422      	add	r2, r4
 80048a2:	609a      	str	r2, [r3, #8]
 80048a4:	e154      	b.n	8004b50 <UART_SetConfig+0x408>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80048a6:	f7fe f901 	bl	8002aac <HAL_RCC_GetPCLK1Freq>
 80048aa:	4602      	mov	r2, r0
 80048ac:	4613      	mov	r3, r2
 80048ae:	009b      	lsls	r3, r3, #2
 80048b0:	4413      	add	r3, r2
 80048b2:	009a      	lsls	r2, r3, #2
 80048b4:	441a      	add	r2, r3
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	685b      	ldr	r3, [r3, #4]
 80048ba:	005b      	lsls	r3, r3, #1
 80048bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80048c0:	4a6c      	ldr	r2, [pc, #432]	; (8004a74 <UART_SetConfig+0x32c>)
 80048c2:	fba2 2303 	umull	r2, r3, r2, r3
 80048c6:	095b      	lsrs	r3, r3, #5
 80048c8:	011c      	lsls	r4, r3, #4
 80048ca:	f7fe f8ef 	bl	8002aac <HAL_RCC_GetPCLK1Freq>
 80048ce:	4602      	mov	r2, r0
 80048d0:	4613      	mov	r3, r2
 80048d2:	009b      	lsls	r3, r3, #2
 80048d4:	4413      	add	r3, r2
 80048d6:	009a      	lsls	r2, r3, #2
 80048d8:	441a      	add	r2, r3
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	685b      	ldr	r3, [r3, #4]
 80048de:	005b      	lsls	r3, r3, #1
 80048e0:	fbb2 f5f3 	udiv	r5, r2, r3
 80048e4:	f7fe f8e2 	bl	8002aac <HAL_RCC_GetPCLK1Freq>
 80048e8:	4602      	mov	r2, r0
 80048ea:	4613      	mov	r3, r2
 80048ec:	009b      	lsls	r3, r3, #2
 80048ee:	4413      	add	r3, r2
 80048f0:	009a      	lsls	r2, r3, #2
 80048f2:	441a      	add	r2, r3
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	685b      	ldr	r3, [r3, #4]
 80048f8:	005b      	lsls	r3, r3, #1
 80048fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80048fe:	4a5d      	ldr	r2, [pc, #372]	; (8004a74 <UART_SetConfig+0x32c>)
 8004900:	fba2 2303 	umull	r2, r3, r2, r3
 8004904:	095b      	lsrs	r3, r3, #5
 8004906:	2264      	movs	r2, #100	; 0x64
 8004908:	fb02 f303 	mul.w	r3, r2, r3
 800490c:	1aeb      	subs	r3, r5, r3
 800490e:	00db      	lsls	r3, r3, #3
 8004910:	3332      	adds	r3, #50	; 0x32
 8004912:	4a58      	ldr	r2, [pc, #352]	; (8004a74 <UART_SetConfig+0x32c>)
 8004914:	fba2 2303 	umull	r2, r3, r2, r3
 8004918:	095b      	lsrs	r3, r3, #5
 800491a:	005b      	lsls	r3, r3, #1
 800491c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004920:	441c      	add	r4, r3
 8004922:	f7fe f8c3 	bl	8002aac <HAL_RCC_GetPCLK1Freq>
 8004926:	4602      	mov	r2, r0
 8004928:	4613      	mov	r3, r2
 800492a:	009b      	lsls	r3, r3, #2
 800492c:	4413      	add	r3, r2
 800492e:	009a      	lsls	r2, r3, #2
 8004930:	441a      	add	r2, r3
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	685b      	ldr	r3, [r3, #4]
 8004936:	005b      	lsls	r3, r3, #1
 8004938:	fbb2 f5f3 	udiv	r5, r2, r3
 800493c:	f7fe f8b6 	bl	8002aac <HAL_RCC_GetPCLK1Freq>
 8004940:	4602      	mov	r2, r0
 8004942:	4613      	mov	r3, r2
 8004944:	009b      	lsls	r3, r3, #2
 8004946:	4413      	add	r3, r2
 8004948:	009a      	lsls	r2, r3, #2
 800494a:	441a      	add	r2, r3
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	685b      	ldr	r3, [r3, #4]
 8004950:	005b      	lsls	r3, r3, #1
 8004952:	fbb2 f3f3 	udiv	r3, r2, r3
 8004956:	4a47      	ldr	r2, [pc, #284]	; (8004a74 <UART_SetConfig+0x32c>)
 8004958:	fba2 2303 	umull	r2, r3, r2, r3
 800495c:	095b      	lsrs	r3, r3, #5
 800495e:	2264      	movs	r2, #100	; 0x64
 8004960:	fb02 f303 	mul.w	r3, r2, r3
 8004964:	1aeb      	subs	r3, r5, r3
 8004966:	00db      	lsls	r3, r3, #3
 8004968:	3332      	adds	r3, #50	; 0x32
 800496a:	4a42      	ldr	r2, [pc, #264]	; (8004a74 <UART_SetConfig+0x32c>)
 800496c:	fba2 2303 	umull	r2, r3, r2, r3
 8004970:	095b      	lsrs	r3, r3, #5
 8004972:	f003 0207 	and.w	r2, r3, #7
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	4422      	add	r2, r4
 800497c:	609a      	str	r2, [r3, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 800497e:	e0e7      	b.n	8004b50 <UART_SetConfig+0x408>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	4a39      	ldr	r2, [pc, #228]	; (8004a6c <UART_SetConfig+0x324>)
 8004986:	4293      	cmp	r3, r2
 8004988:	d004      	beq.n	8004994 <UART_SetConfig+0x24c>
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	4a38      	ldr	r2, [pc, #224]	; (8004a70 <UART_SetConfig+0x328>)
 8004990:	4293      	cmp	r3, r2
 8004992:	d171      	bne.n	8004a78 <UART_SetConfig+0x330>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8004994:	f7fe f89e 	bl	8002ad4 <HAL_RCC_GetPCLK2Freq>
 8004998:	4602      	mov	r2, r0
 800499a:	4613      	mov	r3, r2
 800499c:	009b      	lsls	r3, r3, #2
 800499e:	4413      	add	r3, r2
 80049a0:	009a      	lsls	r2, r3, #2
 80049a2:	441a      	add	r2, r3
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	685b      	ldr	r3, [r3, #4]
 80049a8:	009b      	lsls	r3, r3, #2
 80049aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80049ae:	4a31      	ldr	r2, [pc, #196]	; (8004a74 <UART_SetConfig+0x32c>)
 80049b0:	fba2 2303 	umull	r2, r3, r2, r3
 80049b4:	095b      	lsrs	r3, r3, #5
 80049b6:	011c      	lsls	r4, r3, #4
 80049b8:	f7fe f88c 	bl	8002ad4 <HAL_RCC_GetPCLK2Freq>
 80049bc:	4602      	mov	r2, r0
 80049be:	4613      	mov	r3, r2
 80049c0:	009b      	lsls	r3, r3, #2
 80049c2:	4413      	add	r3, r2
 80049c4:	009a      	lsls	r2, r3, #2
 80049c6:	441a      	add	r2, r3
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	685b      	ldr	r3, [r3, #4]
 80049cc:	009b      	lsls	r3, r3, #2
 80049ce:	fbb2 f5f3 	udiv	r5, r2, r3
 80049d2:	f7fe f87f 	bl	8002ad4 <HAL_RCC_GetPCLK2Freq>
 80049d6:	4602      	mov	r2, r0
 80049d8:	4613      	mov	r3, r2
 80049da:	009b      	lsls	r3, r3, #2
 80049dc:	4413      	add	r3, r2
 80049de:	009a      	lsls	r2, r3, #2
 80049e0:	441a      	add	r2, r3
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	685b      	ldr	r3, [r3, #4]
 80049e6:	009b      	lsls	r3, r3, #2
 80049e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80049ec:	4a21      	ldr	r2, [pc, #132]	; (8004a74 <UART_SetConfig+0x32c>)
 80049ee:	fba2 2303 	umull	r2, r3, r2, r3
 80049f2:	095b      	lsrs	r3, r3, #5
 80049f4:	2264      	movs	r2, #100	; 0x64
 80049f6:	fb02 f303 	mul.w	r3, r2, r3
 80049fa:	1aeb      	subs	r3, r5, r3
 80049fc:	011b      	lsls	r3, r3, #4
 80049fe:	3332      	adds	r3, #50	; 0x32
 8004a00:	4a1c      	ldr	r2, [pc, #112]	; (8004a74 <UART_SetConfig+0x32c>)
 8004a02:	fba2 2303 	umull	r2, r3, r2, r3
 8004a06:	095b      	lsrs	r3, r3, #5
 8004a08:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004a0c:	441c      	add	r4, r3
 8004a0e:	f7fe f861 	bl	8002ad4 <HAL_RCC_GetPCLK2Freq>
 8004a12:	4602      	mov	r2, r0
 8004a14:	4613      	mov	r3, r2
 8004a16:	009b      	lsls	r3, r3, #2
 8004a18:	4413      	add	r3, r2
 8004a1a:	009a      	lsls	r2, r3, #2
 8004a1c:	441a      	add	r2, r3
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	685b      	ldr	r3, [r3, #4]
 8004a22:	009b      	lsls	r3, r3, #2
 8004a24:	fbb2 f5f3 	udiv	r5, r2, r3
 8004a28:	f7fe f854 	bl	8002ad4 <HAL_RCC_GetPCLK2Freq>
 8004a2c:	4602      	mov	r2, r0
 8004a2e:	4613      	mov	r3, r2
 8004a30:	009b      	lsls	r3, r3, #2
 8004a32:	4413      	add	r3, r2
 8004a34:	009a      	lsls	r2, r3, #2
 8004a36:	441a      	add	r2, r3
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	685b      	ldr	r3, [r3, #4]
 8004a3c:	009b      	lsls	r3, r3, #2
 8004a3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a42:	4a0c      	ldr	r2, [pc, #48]	; (8004a74 <UART_SetConfig+0x32c>)
 8004a44:	fba2 2303 	umull	r2, r3, r2, r3
 8004a48:	095b      	lsrs	r3, r3, #5
 8004a4a:	2264      	movs	r2, #100	; 0x64
 8004a4c:	fb02 f303 	mul.w	r3, r2, r3
 8004a50:	1aeb      	subs	r3, r5, r3
 8004a52:	011b      	lsls	r3, r3, #4
 8004a54:	3332      	adds	r3, #50	; 0x32
 8004a56:	4a07      	ldr	r2, [pc, #28]	; (8004a74 <UART_SetConfig+0x32c>)
 8004a58:	fba2 2303 	umull	r2, r3, r2, r3
 8004a5c:	095b      	lsrs	r3, r3, #5
 8004a5e:	f003 020f 	and.w	r2, r3, #15
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	4422      	add	r2, r4
 8004a68:	609a      	str	r2, [r3, #8]
 8004a6a:	e071      	b.n	8004b50 <UART_SetConfig+0x408>
 8004a6c:	40011000 	.word	0x40011000
 8004a70:	40011400 	.word	0x40011400
 8004a74:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8004a78:	f7fe f818 	bl	8002aac <HAL_RCC_GetPCLK1Freq>
 8004a7c:	4602      	mov	r2, r0
 8004a7e:	4613      	mov	r3, r2
 8004a80:	009b      	lsls	r3, r3, #2
 8004a82:	4413      	add	r3, r2
 8004a84:	009a      	lsls	r2, r3, #2
 8004a86:	441a      	add	r2, r3
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	685b      	ldr	r3, [r3, #4]
 8004a8c:	009b      	lsls	r3, r3, #2
 8004a8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a92:	4a31      	ldr	r2, [pc, #196]	; (8004b58 <UART_SetConfig+0x410>)
 8004a94:	fba2 2303 	umull	r2, r3, r2, r3
 8004a98:	095b      	lsrs	r3, r3, #5
 8004a9a:	011c      	lsls	r4, r3, #4
 8004a9c:	f7fe f806 	bl	8002aac <HAL_RCC_GetPCLK1Freq>
 8004aa0:	4602      	mov	r2, r0
 8004aa2:	4613      	mov	r3, r2
 8004aa4:	009b      	lsls	r3, r3, #2
 8004aa6:	4413      	add	r3, r2
 8004aa8:	009a      	lsls	r2, r3, #2
 8004aaa:	441a      	add	r2, r3
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	685b      	ldr	r3, [r3, #4]
 8004ab0:	009b      	lsls	r3, r3, #2
 8004ab2:	fbb2 f5f3 	udiv	r5, r2, r3
 8004ab6:	f7fd fff9 	bl	8002aac <HAL_RCC_GetPCLK1Freq>
 8004aba:	4602      	mov	r2, r0
 8004abc:	4613      	mov	r3, r2
 8004abe:	009b      	lsls	r3, r3, #2
 8004ac0:	4413      	add	r3, r2
 8004ac2:	009a      	lsls	r2, r3, #2
 8004ac4:	441a      	add	r2, r3
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	685b      	ldr	r3, [r3, #4]
 8004aca:	009b      	lsls	r3, r3, #2
 8004acc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ad0:	4a21      	ldr	r2, [pc, #132]	; (8004b58 <UART_SetConfig+0x410>)
 8004ad2:	fba2 2303 	umull	r2, r3, r2, r3
 8004ad6:	095b      	lsrs	r3, r3, #5
 8004ad8:	2264      	movs	r2, #100	; 0x64
 8004ada:	fb02 f303 	mul.w	r3, r2, r3
 8004ade:	1aeb      	subs	r3, r5, r3
 8004ae0:	011b      	lsls	r3, r3, #4
 8004ae2:	3332      	adds	r3, #50	; 0x32
 8004ae4:	4a1c      	ldr	r2, [pc, #112]	; (8004b58 <UART_SetConfig+0x410>)
 8004ae6:	fba2 2303 	umull	r2, r3, r2, r3
 8004aea:	095b      	lsrs	r3, r3, #5
 8004aec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004af0:	441c      	add	r4, r3
 8004af2:	f7fd ffdb 	bl	8002aac <HAL_RCC_GetPCLK1Freq>
 8004af6:	4602      	mov	r2, r0
 8004af8:	4613      	mov	r3, r2
 8004afa:	009b      	lsls	r3, r3, #2
 8004afc:	4413      	add	r3, r2
 8004afe:	009a      	lsls	r2, r3, #2
 8004b00:	441a      	add	r2, r3
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	685b      	ldr	r3, [r3, #4]
 8004b06:	009b      	lsls	r3, r3, #2
 8004b08:	fbb2 f5f3 	udiv	r5, r2, r3
 8004b0c:	f7fd ffce 	bl	8002aac <HAL_RCC_GetPCLK1Freq>
 8004b10:	4602      	mov	r2, r0
 8004b12:	4613      	mov	r3, r2
 8004b14:	009b      	lsls	r3, r3, #2
 8004b16:	4413      	add	r3, r2
 8004b18:	009a      	lsls	r2, r3, #2
 8004b1a:	441a      	add	r2, r3
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	685b      	ldr	r3, [r3, #4]
 8004b20:	009b      	lsls	r3, r3, #2
 8004b22:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b26:	4a0c      	ldr	r2, [pc, #48]	; (8004b58 <UART_SetConfig+0x410>)
 8004b28:	fba2 2303 	umull	r2, r3, r2, r3
 8004b2c:	095b      	lsrs	r3, r3, #5
 8004b2e:	2264      	movs	r2, #100	; 0x64
 8004b30:	fb02 f303 	mul.w	r3, r2, r3
 8004b34:	1aeb      	subs	r3, r5, r3
 8004b36:	011b      	lsls	r3, r3, #4
 8004b38:	3332      	adds	r3, #50	; 0x32
 8004b3a:	4a07      	ldr	r2, [pc, #28]	; (8004b58 <UART_SetConfig+0x410>)
 8004b3c:	fba2 2303 	umull	r2, r3, r2, r3
 8004b40:	095b      	lsrs	r3, r3, #5
 8004b42:	f003 020f 	and.w	r2, r3, #15
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	4422      	add	r2, r4
 8004b4c:	609a      	str	r2, [r3, #8]
}
 8004b4e:	e7ff      	b.n	8004b50 <UART_SetConfig+0x408>
 8004b50:	bf00      	nop
 8004b52:	3710      	adds	r7, #16
 8004b54:	46bd      	mov	sp, r7
 8004b56:	bdb0      	pop	{r4, r5, r7, pc}
 8004b58:	51eb851f 	.word	0x51eb851f

08004b5c <drive_init>:
//drive_init
//a走行系の変数の初期化
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void drive_init(void){
 8004b5c:	b480      	push	{r7}
 8004b5e:	af00      	add	r7, sp, #0
	MF.FLAGS = 0;
 8004b60:	4b03      	ldr	r3, [pc, #12]	; (8004b70 <drive_init+0x14>)
 8004b62:	2200      	movs	r2, #0
 8004b64:	801a      	strh	r2, [r3, #0]
}
 8004b66:	bf00      	nop
 8004b68:	46bd      	mov	sp, r7
 8004b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6e:	4770      	bx	lr
 8004b70:	20000e18 	.word	0x20000e18

08004b74 <drive_start>:
//drive_start
//a走行開始前に走行距離と機体角度を初期化
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void drive_start(void){
 8004b74:	b480      	push	{r7}
 8004b76:	af00      	add	r7, sp, #0
	dist_l = dist_r = 0;		//a走行距離の初期化
 8004b78:	f04f 0300 	mov.w	r3, #0
 8004b7c:	4a08      	ldr	r2, [pc, #32]	; (8004ba0 <drive_start+0x2c>)
 8004b7e:	6013      	str	r3, [r2, #0]
 8004b80:	4a08      	ldr	r2, [pc, #32]	; (8004ba4 <drive_start+0x30>)
 8004b82:	6013      	str	r3, [r2, #0]
	degree_z = 0;				//a機体角度の初期化
 8004b84:	4b08      	ldr	r3, [pc, #32]	; (8004ba8 <drive_start+0x34>)
 8004b86:	f04f 0200 	mov.w	r2, #0
 8004b8a:	601a      	str	r2, [r3, #0]
	MF.FLAG.DRV = 1;
 8004b8c:	4a07      	ldr	r2, [pc, #28]	; (8004bac <drive_start+0x38>)
 8004b8e:	8813      	ldrh	r3, [r2, #0]
 8004b90:	f043 0302 	orr.w	r3, r3, #2
 8004b94:	8013      	strh	r3, [r2, #0]
}
 8004b96:	bf00      	nop
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9e:	4770      	bx	lr
 8004ba0:	200009b8 	.word	0x200009b8
 8004ba4:	20000e2c 	.word	0x20000e2c
 8004ba8:	20000a20 	.word	0x20000a20
 8004bac:	20000e18 	.word	0x20000e18

08004bb0 <drive_stop>:
//a走行を終了する
//a（タイマを止めてタイマカウント値を0にリセットする）
//a引数1：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void drive_stop(void){
 8004bb0:	b480      	push	{r7}
 8004bb2:	af00      	add	r7, sp, #0
	dist_l = dist_r = 0;		//a走行距離の初期化
 8004bb4:	f04f 0300 	mov.w	r3, #0
 8004bb8:	4a08      	ldr	r2, [pc, #32]	; (8004bdc <drive_stop+0x2c>)
 8004bba:	6013      	str	r3, [r2, #0]
 8004bbc:	4a08      	ldr	r2, [pc, #32]	; (8004be0 <drive_stop+0x30>)
 8004bbe:	6013      	str	r3, [r2, #0]
	degree_z = 0;				//a機体角度の初期化
 8004bc0:	4b08      	ldr	r3, [pc, #32]	; (8004be4 <drive_stop+0x34>)
 8004bc2:	f04f 0200 	mov.w	r2, #0
 8004bc6:	601a      	str	r2, [r3, #0]
	MF.FLAG.DRV = 0;
 8004bc8:	4a07      	ldr	r2, [pc, #28]	; (8004be8 <drive_stop+0x38>)
 8004bca:	8813      	ldrh	r3, [r2, #0]
 8004bcc:	f36f 0341 	bfc	r3, #1, #1
 8004bd0:	8013      	strh	r3, [r2, #0]
}
 8004bd2:	bf00      	nop
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bda:	4770      	bx	lr
 8004bdc:	200009b8 	.word	0x200009b8
 8004be0:	20000e2c 	.word	0x20000e2c
 8004be4:	20000a20 	.word	0x20000a20
 8004be8:	20000e18 	.word	0x20000e18

08004bec <drive_dir>:
//drive_dir
// wheel turn dir for each wheel
//a引数:1車輪選択(0=>L, 1=>R), 2回転方向選択(0=>CW, 1=>CWW, 2=>ShortBrake, 3=>free)
//a戻り値: nothing
//+++++++++++++++++++++++++++++++++++++++++++++++
void drive_dir(uint8_t wheel, uint8_t dir){
 8004bec:	b580      	push	{r7, lr}
 8004bee:	b082      	sub	sp, #8
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	4603      	mov	r3, r0
 8004bf4:	460a      	mov	r2, r1
 8004bf6:	71fb      	strb	r3, [r7, #7]
 8004bf8:	4613      	mov	r3, r2
 8004bfa:	71bb      	strb	r3, [r7, #6]
	if(wheel == 0){
 8004bfc:	79fb      	ldrb	r3, [r7, #7]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d13e      	bne.n	8004c80 <drive_dir+0x94>
		if(dir == 0){
 8004c02:	79bb      	ldrb	r3, [r7, #6]
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d10f      	bne.n	8004c28 <drive_dir+0x3c>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_SET);		//L_CW
 8004c08:	2201      	movs	r2, #1
 8004c0a:	2120      	movs	r1, #32
 8004c0c:	483f      	ldr	r0, [pc, #252]	; (8004d0c <drive_dir+0x120>)
 8004c0e:	f7fd fb51 	bl	80022b4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET);	//L_CCW
 8004c12:	2200      	movs	r2, #0
 8004c14:	2110      	movs	r1, #16
 8004c16:	483d      	ldr	r0, [pc, #244]	; (8004d0c <drive_dir+0x120>)
 8004c18:	f7fd fb4c 	bl	80022b4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);		//STBY
 8004c1c:	2201      	movs	r2, #1
 8004c1e:	2101      	movs	r1, #1
 8004c20:	483b      	ldr	r0, [pc, #236]	; (8004d10 <drive_dir+0x124>)
 8004c22:	f7fd fb47 	bl	80022b4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);		//STBY
		}else{
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);	//STBY
		}
	}
}
 8004c26:	e06c      	b.n	8004d02 <drive_dir+0x116>
		}else if(dir == 1){
 8004c28:	79bb      	ldrb	r3, [r7, #6]
 8004c2a:	2b01      	cmp	r3, #1
 8004c2c:	d10f      	bne.n	8004c4e <drive_dir+0x62>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET);	//L_CW
 8004c2e:	2200      	movs	r2, #0
 8004c30:	2120      	movs	r1, #32
 8004c32:	4836      	ldr	r0, [pc, #216]	; (8004d0c <drive_dir+0x120>)
 8004c34:	f7fd fb3e 	bl	80022b4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_SET);		//L_CCW
 8004c38:	2201      	movs	r2, #1
 8004c3a:	2110      	movs	r1, #16
 8004c3c:	4833      	ldr	r0, [pc, #204]	; (8004d0c <drive_dir+0x120>)
 8004c3e:	f7fd fb39 	bl	80022b4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);		//STBY
 8004c42:	2201      	movs	r2, #1
 8004c44:	2101      	movs	r1, #1
 8004c46:	4832      	ldr	r0, [pc, #200]	; (8004d10 <drive_dir+0x124>)
 8004c48:	f7fd fb34 	bl	80022b4 <HAL_GPIO_WritePin>
}
 8004c4c:	e059      	b.n	8004d02 <drive_dir+0x116>
		}else if(dir == 2){
 8004c4e:	79bb      	ldrb	r3, [r7, #6]
 8004c50:	2b02      	cmp	r3, #2
 8004c52:	d10f      	bne.n	8004c74 <drive_dir+0x88>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_SET);		//L_CW
 8004c54:	2201      	movs	r2, #1
 8004c56:	2120      	movs	r1, #32
 8004c58:	482c      	ldr	r0, [pc, #176]	; (8004d0c <drive_dir+0x120>)
 8004c5a:	f7fd fb2b 	bl	80022b4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_SET);		//L_CCW
 8004c5e:	2201      	movs	r2, #1
 8004c60:	2110      	movs	r1, #16
 8004c62:	482a      	ldr	r0, [pc, #168]	; (8004d0c <drive_dir+0x120>)
 8004c64:	f7fd fb26 	bl	80022b4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);		//STBY
 8004c68:	2201      	movs	r2, #1
 8004c6a:	2101      	movs	r1, #1
 8004c6c:	4828      	ldr	r0, [pc, #160]	; (8004d10 <drive_dir+0x124>)
 8004c6e:	f7fd fb21 	bl	80022b4 <HAL_GPIO_WritePin>
}
 8004c72:	e046      	b.n	8004d02 <drive_dir+0x116>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);	//STBY
 8004c74:	2200      	movs	r2, #0
 8004c76:	2101      	movs	r1, #1
 8004c78:	4825      	ldr	r0, [pc, #148]	; (8004d10 <drive_dir+0x124>)
 8004c7a:	f7fd fb1b 	bl	80022b4 <HAL_GPIO_WritePin>
}
 8004c7e:	e040      	b.n	8004d02 <drive_dir+0x116>
		if(dir == 0){
 8004c80:	79bb      	ldrb	r3, [r7, #6]
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d110      	bne.n	8004ca8 <drive_dir+0xbc>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);		//R_CW
 8004c86:	2201      	movs	r2, #1
 8004c88:	2102      	movs	r1, #2
 8004c8a:	4821      	ldr	r0, [pc, #132]	; (8004d10 <drive_dir+0x124>)
 8004c8c:	f7fd fb12 	bl	80022b4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);	//R_CCW
 8004c90:	2200      	movs	r2, #0
 8004c92:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004c96:	481e      	ldr	r0, [pc, #120]	; (8004d10 <drive_dir+0x124>)
 8004c98:	f7fd fb0c 	bl	80022b4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);		//STBY
 8004c9c:	2201      	movs	r2, #1
 8004c9e:	2101      	movs	r1, #1
 8004ca0:	481b      	ldr	r0, [pc, #108]	; (8004d10 <drive_dir+0x124>)
 8004ca2:	f7fd fb07 	bl	80022b4 <HAL_GPIO_WritePin>
}
 8004ca6:	e02c      	b.n	8004d02 <drive_dir+0x116>
		}else if(dir == 1){
 8004ca8:	79bb      	ldrb	r3, [r7, #6]
 8004caa:	2b01      	cmp	r3, #1
 8004cac:	d110      	bne.n	8004cd0 <drive_dir+0xe4>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);	//R_CW
 8004cae:	2200      	movs	r2, #0
 8004cb0:	2102      	movs	r1, #2
 8004cb2:	4817      	ldr	r0, [pc, #92]	; (8004d10 <drive_dir+0x124>)
 8004cb4:	f7fd fafe 	bl	80022b4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);	//R_CCW
 8004cb8:	2201      	movs	r2, #1
 8004cba:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004cbe:	4814      	ldr	r0, [pc, #80]	; (8004d10 <drive_dir+0x124>)
 8004cc0:	f7fd faf8 	bl	80022b4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);		//STBY
 8004cc4:	2201      	movs	r2, #1
 8004cc6:	2101      	movs	r1, #1
 8004cc8:	4811      	ldr	r0, [pc, #68]	; (8004d10 <drive_dir+0x124>)
 8004cca:	f7fd faf3 	bl	80022b4 <HAL_GPIO_WritePin>
}
 8004cce:	e018      	b.n	8004d02 <drive_dir+0x116>
		}else if(dir == 2){
 8004cd0:	79bb      	ldrb	r3, [r7, #6]
 8004cd2:	2b02      	cmp	r3, #2
 8004cd4:	d110      	bne.n	8004cf8 <drive_dir+0x10c>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);		//R_CW
 8004cd6:	2201      	movs	r2, #1
 8004cd8:	2102      	movs	r1, #2
 8004cda:	480d      	ldr	r0, [pc, #52]	; (8004d10 <drive_dir+0x124>)
 8004cdc:	f7fd faea 	bl	80022b4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);	//R_CCW
 8004ce0:	2201      	movs	r2, #1
 8004ce2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004ce6:	480a      	ldr	r0, [pc, #40]	; (8004d10 <drive_dir+0x124>)
 8004ce8:	f7fd fae4 	bl	80022b4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);		//STBY
 8004cec:	2201      	movs	r2, #1
 8004cee:	2101      	movs	r1, #1
 8004cf0:	4807      	ldr	r0, [pc, #28]	; (8004d10 <drive_dir+0x124>)
 8004cf2:	f7fd fadf 	bl	80022b4 <HAL_GPIO_WritePin>
}
 8004cf6:	e004      	b.n	8004d02 <drive_dir+0x116>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);	//STBY
 8004cf8:	2200      	movs	r2, #0
 8004cfa:	2101      	movs	r1, #1
 8004cfc:	4804      	ldr	r0, [pc, #16]	; (8004d10 <drive_dir+0x124>)
 8004cfe:	f7fd fad9 	bl	80022b4 <HAL_GPIO_WritePin>
}
 8004d02:	bf00      	nop
 8004d04:	3708      	adds	r7, #8
 8004d06:	46bd      	mov	sp, r7
 8004d08:	bd80      	pop	{r7, pc}
 8004d0a:	bf00      	nop
 8004d0c:	40020800 	.word	0x40020800
 8004d10:	40020400 	.word	0x40020400

08004d14 <driveA>:
//driveA
// a指定距離、指定加速度で加速走行する
// a引数1：accel_p 加速度, 引数2：speed_min_p 最低速度, 引数3：speed_max_p 最高速度, 引数4：dist 走行距離
// a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void driveA(uint16_t accel_p, uint16_t speed_min_p, uint16_t speed_max_p, uint16_t dist){
 8004d14:	b590      	push	{r4, r7, lr}
 8004d16:	b083      	sub	sp, #12
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	4604      	mov	r4, r0
 8004d1c:	4608      	mov	r0, r1
 8004d1e:	4611      	mov	r1, r2
 8004d20:	461a      	mov	r2, r3
 8004d22:	4623      	mov	r3, r4
 8004d24:	80fb      	strh	r3, [r7, #6]
 8004d26:	4603      	mov	r3, r0
 8004d28:	80bb      	strh	r3, [r7, #4]
 8004d2a:	460b      	mov	r3, r1
 8004d2c:	807b      	strh	r3, [r7, #2]
 8004d2e:	4613      	mov	r3, r2
 8004d30:	803b      	strh	r3, [r7, #0]

	speed_min_l = speed_min_r = speed_min_p;
 8004d32:	88bb      	ldrh	r3, [r7, #4]
 8004d34:	ee07 3a90 	vmov	s15, r3
 8004d38:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d3c:	4b25      	ldr	r3, [pc, #148]	; (8004dd4 <driveA+0xc0>)
 8004d3e:	edc3 7a00 	vstr	s15, [r3]
 8004d42:	4b25      	ldr	r3, [pc, #148]	; (8004dd8 <driveA+0xc4>)
 8004d44:	edc3 7a00 	vstr	s15, [r3]
	speed_max_l = speed_max_r = speed_max_p;
 8004d48:	887b      	ldrh	r3, [r7, #2]
 8004d4a:	ee07 3a90 	vmov	s15, r3
 8004d4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d52:	4b22      	ldr	r3, [pc, #136]	; (8004ddc <driveA+0xc8>)
 8004d54:	edc3 7a00 	vstr	s15, [r3]
 8004d58:	4b21      	ldr	r3, [pc, #132]	; (8004de0 <driveA+0xcc>)
 8004d5a:	edc3 7a00 	vstr	s15, [r3]
	accel_l = accel_r = accel_p;							//a引数の各パラメータをグローバル変数化
 8004d5e:	88fb      	ldrh	r3, [r7, #6]
 8004d60:	ee07 3a90 	vmov	s15, r3
 8004d64:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d68:	4b1e      	ldr	r3, [pc, #120]	; (8004de4 <driveA+0xd0>)
 8004d6a:	edc3 7a00 	vstr	s15, [r3]
 8004d6e:	4b1e      	ldr	r3, [pc, #120]	; (8004de8 <driveA+0xd4>)
 8004d70:	edc3 7a00 	vstr	s15, [r3]
	target_speed_l = target_speed_r = speed_min_p;
 8004d74:	88bb      	ldrh	r3, [r7, #4]
 8004d76:	ee07 3a90 	vmov	s15, r3
 8004d7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d7e:	4b1b      	ldr	r3, [pc, #108]	; (8004dec <driveA+0xd8>)
 8004d80:	edc3 7a00 	vstr	s15, [r3]
 8004d84:	4b1a      	ldr	r3, [pc, #104]	; (8004df0 <driveA+0xdc>)
 8004d86:	edc3 7a00 	vstr	s15, [r3]

	//if(MF.FLAG.STRT == 0) speed_l = speed_r = 100;		//a最初の加速の際だけspeedを定義
	drive_start();											//a走行開始
 8004d8a:	f7ff fef3 	bl	8004b74 <drive_start>

	//----a走行----
	while((dist_l < dist) || (dist_r < dist));				//a左右のモータが指定距離以上進むまで待機
 8004d8e:	bf00      	nop
 8004d90:	883b      	ldrh	r3, [r7, #0]
 8004d92:	ee07 3a90 	vmov	s15, r3
 8004d96:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004d9a:	4b16      	ldr	r3, [pc, #88]	; (8004df4 <driveA+0xe0>)
 8004d9c:	edd3 7a00 	vldr	s15, [r3]
 8004da0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004da4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004da8:	dcf2      	bgt.n	8004d90 <driveA+0x7c>
 8004daa:	883b      	ldrh	r3, [r7, #0]
 8004dac:	ee07 3a90 	vmov	s15, r3
 8004db0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004db4:	4b10      	ldr	r3, [pc, #64]	; (8004df8 <driveA+0xe4>)
 8004db6:	edd3 7a00 	vldr	s15, [r3]
 8004dba:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004dbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004dc2:	dce5      	bgt.n	8004d90 <driveA+0x7c>

	drive_stop();											//a走行停止
 8004dc4:	f7ff fef4 	bl	8004bb0 <drive_stop>
	//MF.FLAG.STRT = 1;										//2回目以降の加速の際はspeedは既存のスピードを用いる
	get_wall_info();										//a壁情報を取得，片壁制御の有効・無効の判断
 8004dc8:	f004 fb26 	bl	8009418 <get_wall_info>
}
 8004dcc:	bf00      	nop
 8004dce:	370c      	adds	r7, #12
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	bd90      	pop	{r4, r7, pc}
 8004dd4:	20000e1c 	.word	0x20000e1c
 8004dd8:	20000a18 	.word	0x20000a18
 8004ddc:	2000017c 	.word	0x2000017c
 8004de0:	20000648 	.word	0x20000648
 8004de4:	200009b0 	.word	0x200009b0
 8004de8:	20000c10 	.word	0x20000c10
 8004dec:	20000178 	.word	0x20000178
 8004df0:	20000ab8 	.word	0x20000ab8
 8004df4:	20000e2c 	.word	0x20000e2c
 8004df8:	200009b8 	.word	0x200009b8

08004dfc <driveD>:
//driveD
//a指定距離、指定減速度で減速走行する
//a引数1：accel_p 加速度, 引数2：speed_min_p 最低速度, 引数3：speed_max_p 最高速度, 引数4：dist 走行距離
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void driveD(int16_t accel_p, uint16_t speed_min_p, uint16_t speed_max_p, uint16_t dist){
 8004dfc:	b590      	push	{r4, r7, lr}
 8004dfe:	b085      	sub	sp, #20
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	4604      	mov	r4, r0
 8004e04:	4608      	mov	r0, r1
 8004e06:	4611      	mov	r1, r2
 8004e08:	461a      	mov	r2, r3
 8004e0a:	4623      	mov	r3, r4
 8004e0c:	80fb      	strh	r3, [r7, #6]
 8004e0e:	4603      	mov	r3, r0
 8004e10:	80bb      	strh	r3, [r7, #4]
 8004e12:	460b      	mov	r3, r1
 8004e14:	807b      	strh	r3, [r7, #2]
 8004e16:	4613      	mov	r3, r2
 8004e18:	803b      	strh	r3, [r7, #0]

	float speed_0 = speed_l;								//直線パルス数を計算するためにTIM15より参照
 8004e1a:	4b4f      	ldr	r3, [pc, #316]	; (8004f58 <driveD+0x15c>)
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	60fb      	str	r3, [r7, #12]
	speed_min_l = speed_min_r = speed_min_p;
 8004e20:	88bb      	ldrh	r3, [r7, #4]
 8004e22:	ee07 3a90 	vmov	s15, r3
 8004e26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e2a:	4b4c      	ldr	r3, [pc, #304]	; (8004f5c <driveD+0x160>)
 8004e2c:	edc3 7a00 	vstr	s15, [r3]
 8004e30:	4b4b      	ldr	r3, [pc, #300]	; (8004f60 <driveD+0x164>)
 8004e32:	edc3 7a00 	vstr	s15, [r3]
	speed_max_l = speed_max_r = speed_max_p;
 8004e36:	887b      	ldrh	r3, [r7, #2]
 8004e38:	ee07 3a90 	vmov	s15, r3
 8004e3c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e40:	4b48      	ldr	r3, [pc, #288]	; (8004f64 <driveD+0x168>)
 8004e42:	edc3 7a00 	vstr	s15, [r3]
 8004e46:	4b48      	ldr	r3, [pc, #288]	; (8004f68 <driveD+0x16c>)
 8004e48:	edc3 7a00 	vstr	s15, [r3]
	accel_l = accel_r = accel_p;										//引数の各パラメータをグローバル変数化
 8004e4c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004e50:	ee07 3a90 	vmov	s15, r3
 8004e54:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004e58:	4b44      	ldr	r3, [pc, #272]	; (8004f6c <driveD+0x170>)
 8004e5a:	edc3 7a00 	vstr	s15, [r3]
 8004e5e:	4b44      	ldr	r3, [pc, #272]	; (8004f70 <driveD+0x174>)
 8004e60:	edc3 7a00 	vstr	s15, [r3]

	drive_start();											//走行開始
 8004e64:	f7ff fe86 	bl	8004b74 <drive_start>

	int16_t c_dist = dist - (speed_min_l*speed_min_l  - speed_0*speed_0)/(2*accel_l);			//等速走行距離 = 総距離 - 減速に必要な距離
 8004e68:	883b      	ldrh	r3, [r7, #0]
 8004e6a:	ee07 3a90 	vmov	s15, r3
 8004e6e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004e72:	4b3b      	ldr	r3, [pc, #236]	; (8004f60 <driveD+0x164>)
 8004e74:	edd3 6a00 	vldr	s13, [r3]
 8004e78:	4b39      	ldr	r3, [pc, #228]	; (8004f60 <driveD+0x164>)
 8004e7a:	edd3 7a00 	vldr	s15, [r3]
 8004e7e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8004e82:	ed97 6a03 	vldr	s12, [r7, #12]
 8004e86:	edd7 7a03 	vldr	s15, [r7, #12]
 8004e8a:	ee66 7a27 	vmul.f32	s15, s12, s15
 8004e8e:	ee36 6ae7 	vsub.f32	s12, s13, s15
 8004e92:	4b37      	ldr	r3, [pc, #220]	; (8004f70 <driveD+0x174>)
 8004e94:	edd3 7a00 	vldr	s15, [r3]
 8004e98:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8004e9c:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8004ea0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004ea4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004ea8:	ee17 3a90 	vmov	r3, s15
 8004eac:	817b      	strh	r3, [r7, #10]

	accel_l = accel_r = 0;
 8004eae:	f04f 0300 	mov.w	r3, #0
 8004eb2:	4a2e      	ldr	r2, [pc, #184]	; (8004f6c <driveD+0x170>)
 8004eb4:	6013      	str	r3, [r2, #0]
 8004eb6:	4a2e      	ldr	r2, [pc, #184]	; (8004f70 <driveD+0x174>)
 8004eb8:	6013      	str	r3, [r2, #0]
	if(c_dist > 0){
 8004eba:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	dd1c      	ble.n	8004efc <driveD+0x100>
		//----等速走行----
		while((dist_l < c_dist) || (dist_r < c_dist));	//a左右のモータが等速分の距離以上進むまで待機
 8004ec2:	bf00      	nop
 8004ec4:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8004ec8:	ee07 3a90 	vmov	s15, r3
 8004ecc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004ed0:	4b28      	ldr	r3, [pc, #160]	; (8004f74 <driveD+0x178>)
 8004ed2:	edd3 7a00 	vldr	s15, [r3]
 8004ed6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004eda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ede:	dcf1      	bgt.n	8004ec4 <driveD+0xc8>
 8004ee0:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8004ee4:	ee07 3a90 	vmov	s15, r3
 8004ee8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004eec:	4b22      	ldr	r3, [pc, #136]	; (8004f78 <driveD+0x17c>)
 8004eee:	edd3 7a00 	vldr	s15, [r3]
 8004ef2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004ef6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004efa:	dce3      	bgt.n	8004ec4 <driveD+0xc8>
	}
	accel_l = accel_r = accel_p;
 8004efc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004f00:	ee07 3a90 	vmov	s15, r3
 8004f04:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004f08:	4b18      	ldr	r3, [pc, #96]	; (8004f6c <driveD+0x170>)
 8004f0a:	edc3 7a00 	vstr	s15, [r3]
 8004f0e:	4b18      	ldr	r3, [pc, #96]	; (8004f70 <driveD+0x174>)
 8004f10:	edc3 7a00 	vstr	s15, [r3]
	//dist_l = 0;
	//dist_r = 0;
	//----減速走行----
	while((dist_l < dist) || (dist_r < dist));			//a左右のモータが減速分の距離以上進むまで待機
 8004f14:	bf00      	nop
 8004f16:	883b      	ldrh	r3, [r7, #0]
 8004f18:	ee07 3a90 	vmov	s15, r3
 8004f1c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004f20:	4b14      	ldr	r3, [pc, #80]	; (8004f74 <driveD+0x178>)
 8004f22:	edd3 7a00 	vldr	s15, [r3]
 8004f26:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004f2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f2e:	dcf2      	bgt.n	8004f16 <driveD+0x11a>
 8004f30:	883b      	ldrh	r3, [r7, #0]
 8004f32:	ee07 3a90 	vmov	s15, r3
 8004f36:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004f3a:	4b0f      	ldr	r3, [pc, #60]	; (8004f78 <driveD+0x17c>)
 8004f3c:	edd3 7a00 	vldr	s15, [r3]
 8004f40:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004f44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f48:	dce5      	bgt.n	8004f16 <driveD+0x11a>

	//MF.FLAG.STRT = 0;
	drive_stop();											//走行停止
 8004f4a:	f7ff fe31 	bl	8004bb0 <drive_stop>
}
 8004f4e:	bf00      	nop
 8004f50:	3714      	adds	r7, #20
 8004f52:	46bd      	mov	sp, r7
 8004f54:	bd90      	pop	{r4, r7, pc}
 8004f56:	bf00      	nop
 8004f58:	200009bc 	.word	0x200009bc
 8004f5c:	20000e1c 	.word	0x20000e1c
 8004f60:	20000a18 	.word	0x20000a18
 8004f64:	2000017c 	.word	0x2000017c
 8004f68:	20000648 	.word	0x20000648
 8004f6c:	200009b0 	.word	0x200009b0
 8004f70:	20000c10 	.word	0x20000c10
 8004f74:	20000e2c 	.word	0x20000e2c
 8004f78:	200009b8 	.word	0x200009b8

08004f7c <driveU>:
//driveU
// 指定パルス分等速走行して停止する
// 引数1：dist …… 走行するパルス
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void driveU(uint16_t dist){
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	b082      	sub	sp, #8
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	4603      	mov	r3, r0
 8004f84:	80fb      	strh	r3, [r7, #6]

	accel_l = accel_r = 0;												//等速走行のため加速度は0
 8004f86:	f04f 0300 	mov.w	r3, #0
 8004f8a:	4a14      	ldr	r2, [pc, #80]	; (8004fdc <driveU+0x60>)
 8004f8c:	6013      	str	r3, [r2, #0]
 8004f8e:	4a14      	ldr	r2, [pc, #80]	; (8004fe0 <driveU+0x64>)
 8004f90:	6013      	str	r3, [r2, #0]
	drive_start();											//走行開始
 8004f92:	f7ff fdef 	bl	8004b74 <drive_start>

	//----走行----
	while((dist_l < dist) || (dist_r < dist));			//左右のモータが指定パルス以上進むまで待機
 8004f96:	bf00      	nop
 8004f98:	88fb      	ldrh	r3, [r7, #6]
 8004f9a:	ee07 3a90 	vmov	s15, r3
 8004f9e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004fa2:	4b10      	ldr	r3, [pc, #64]	; (8004fe4 <driveU+0x68>)
 8004fa4:	edd3 7a00 	vldr	s15, [r3]
 8004fa8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004fac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004fb0:	dcf2      	bgt.n	8004f98 <driveU+0x1c>
 8004fb2:	88fb      	ldrh	r3, [r7, #6]
 8004fb4:	ee07 3a90 	vmov	s15, r3
 8004fb8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004fbc:	4b0a      	ldr	r3, [pc, #40]	; (8004fe8 <driveU+0x6c>)
 8004fbe:	edd3 7a00 	vldr	s15, [r3]
 8004fc2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004fc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004fca:	dce5      	bgt.n	8004f98 <driveU+0x1c>

	drive_stop();											//走行停止
 8004fcc:	f7ff fdf0 	bl	8004bb0 <drive_stop>
	get_wall_info();										//壁情報を取得，片壁制御の有効・無効の判断
 8004fd0:	f004 fa22 	bl	8009418 <get_wall_info>
}
 8004fd4:	bf00      	nop
 8004fd6:	3708      	adds	r7, #8
 8004fd8:	46bd      	mov	sp, r7
 8004fda:	bd80      	pop	{r7, pc}
 8004fdc:	200009b0 	.word	0x200009b0
 8004fe0:	20000c10 	.word	0x20000c10
 8004fe4:	20000e2c 	.word	0x20000e2c
 8004fe8:	200009b8 	.word	0x200009b8

08004fec <driveC>:
//driveC
// 指定パルス分デフォルト速度で走行して停止する
// 引数1：dist …… 走行するパルス
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void driveC(uint16_t dist){
 8004fec:	b580      	push	{r7, lr}
 8004fee:	b082      	sub	sp, #8
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	4603      	mov	r3, r0
 8004ff4:	80fb      	strh	r3, [r7, #6]

	speed_min_l = speed_min_r = 150;
 8004ff6:	4b19      	ldr	r3, [pc, #100]	; (800505c <driveC+0x70>)
 8004ff8:	4a19      	ldr	r2, [pc, #100]	; (8005060 <driveC+0x74>)
 8004ffa:	6013      	str	r3, [r2, #0]
 8004ffc:	4a19      	ldr	r2, [pc, #100]	; (8005064 <driveC+0x78>)
 8004ffe:	6013      	str	r3, [r2, #0]
	speed_max_l = speed_max_r = 300;
 8005000:	4b19      	ldr	r3, [pc, #100]	; (8005068 <driveC+0x7c>)
 8005002:	4a1a      	ldr	r2, [pc, #104]	; (800506c <driveC+0x80>)
 8005004:	6013      	str	r3, [r2, #0]
 8005006:	4a1a      	ldr	r2, [pc, #104]	; (8005070 <driveC+0x84>)
 8005008:	6013      	str	r3, [r2, #0]
	accel_l = accel_r = 0;												//等速走行のため加速度は0
 800500a:	f04f 0300 	mov.w	r3, #0
 800500e:	4a19      	ldr	r2, [pc, #100]	; (8005074 <driveC+0x88>)
 8005010:	6013      	str	r3, [r2, #0]
 8005012:	4a19      	ldr	r2, [pc, #100]	; (8005078 <driveC+0x8c>)
 8005014:	6013      	str	r3, [r2, #0]

	drive_start();											//走行開始
 8005016:	f7ff fdad 	bl	8004b74 <drive_start>

	//====回転====
	while((dist_l < dist) || (dist_r < dist));			//左右のモータが定速分のパルス以上進むまで待機
 800501a:	bf00      	nop
 800501c:	88fb      	ldrh	r3, [r7, #6]
 800501e:	ee07 3a90 	vmov	s15, r3
 8005022:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005026:	4b15      	ldr	r3, [pc, #84]	; (800507c <driveC+0x90>)
 8005028:	edd3 7a00 	vldr	s15, [r3]
 800502c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005030:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005034:	dcf2      	bgt.n	800501c <driveC+0x30>
 8005036:	88fb      	ldrh	r3, [r7, #6]
 8005038:	ee07 3a90 	vmov	s15, r3
 800503c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005040:	4b0f      	ldr	r3, [pc, #60]	; (8005080 <driveC+0x94>)
 8005042:	edd3 7a00 	vldr	s15, [r3]
 8005046:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800504a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800504e:	dce5      	bgt.n	800501c <driveC+0x30>

	drive_stop();											//走行停止
 8005050:	f7ff fdae 	bl	8004bb0 <drive_stop>
}
 8005054:	bf00      	nop
 8005056:	3708      	adds	r7, #8
 8005058:	46bd      	mov	sp, r7
 800505a:	bd80      	pop	{r7, pc}
 800505c:	43160000 	.word	0x43160000
 8005060:	20000e1c 	.word	0x20000e1c
 8005064:	20000a18 	.word	0x20000a18
 8005068:	43960000 	.word	0x43960000
 800506c:	2000017c 	.word	0x2000017c
 8005070:	20000648 	.word	0x20000648
 8005074:	200009b0 	.word	0x200009b0
 8005078:	20000c10 	.word	0x20000c10
 800507c:	20000e2c 	.word	0x20000e2c
 8005080:	200009b8 	.word	0x200009b8

08005084 <half_sectionA>:
//half_sectionA
// a半区画分加速しながら走行する
// a引数：なし
// a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void half_sectionA(void){
 8005084:	b580      	push	{r7, lr}
 8005086:	af00      	add	r7, sp, #0

	MF.FLAG.WCTRL = 1;										//wall制御を有効にする
 8005088:	4a0c      	ldr	r2, [pc, #48]	; (80050bc <half_sectionA+0x38>)
 800508a:	8813      	ldrh	r3, [r2, #0]
 800508c:	f043 0304 	orr.w	r3, r3, #4
 8005090:	8013      	strh	r3, [r2, #0]
	MF.FLAG.GCTRL = 1;										//gyro制御を有効にする
 8005092:	4a0a      	ldr	r2, [pc, #40]	; (80050bc <half_sectionA+0x38>)
 8005094:	8813      	ldrh	r3, [r2, #0]
 8005096:	f043 0308 	orr.w	r3, r3, #8
 800509a:	8013      	strh	r3, [r2, #0]

	target_omega_z = 0;
 800509c:	4b08      	ldr	r3, [pc, #32]	; (80050c0 <half_sectionA+0x3c>)
 800509e:	f04f 0200 	mov.w	r2, #0
 80050a2:	601a      	str	r2, [r3, #0]
	driveA(1000, 10, 400, SEC_HALF);					//半区画のパルス分加速しながら走行。走行後は停止しない
 80050a4:	235a      	movs	r3, #90	; 0x5a
 80050a6:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80050aa:	210a      	movs	r1, #10
 80050ac:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80050b0:	f7ff fe30 	bl	8004d14 <driveA>
	get_wall_info();										//壁情報を取得，片壁制御の有効・無効の判断
 80050b4:	f004 f9b0 	bl	8009418 <get_wall_info>
}
 80050b8:	bf00      	nop
 80050ba:	bd80      	pop	{r7, pc}
 80050bc:	20000e18 	.word	0x20000e18
 80050c0:	20000180 	.word	0x20000180

080050c4 <half_sectionD>:
//half_sectionD
// 半区画分減速しながら走行し停止する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void half_sectionD(void){
 80050c4:	b580      	push	{r7, lr}
 80050c6:	af00      	add	r7, sp, #0

	MF.FLAG.WCTRL = 1;										//wall制御を有効にする
 80050c8:	4a0b      	ldr	r2, [pc, #44]	; (80050f8 <half_sectionD+0x34>)
 80050ca:	8813      	ldrh	r3, [r2, #0]
 80050cc:	f043 0304 	orr.w	r3, r3, #4
 80050d0:	8013      	strh	r3, [r2, #0]
	MF.FLAG.GCTRL = 1;										//gyro制御を有効にする
 80050d2:	4a09      	ldr	r2, [pc, #36]	; (80050f8 <half_sectionD+0x34>)
 80050d4:	8813      	ldrh	r3, [r2, #0]
 80050d6:	f043 0308 	orr.w	r3, r3, #8
 80050da:	8013      	strh	r3, [r2, #0]

	target_omega_z = 0;
 80050dc:	4b07      	ldr	r3, [pc, #28]	; (80050fc <half_sectionD+0x38>)
 80050de:	f04f 0200 	mov.w	r2, #0
 80050e2:	601a      	str	r2, [r3, #0]
	driveD(-1000, 10, 400, SEC_HALF);				//指定パルス分指定減速度で減速走行。走行後は停止する
 80050e4:	235a      	movs	r3, #90	; 0x5a
 80050e6:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80050ea:	210a      	movs	r1, #10
 80050ec:	4804      	ldr	r0, [pc, #16]	; (8005100 <half_sectionD+0x3c>)
 80050ee:	f7ff fe85 	bl	8004dfc <driveD>
}
 80050f2:	bf00      	nop
 80050f4:	bd80      	pop	{r7, pc}
 80050f6:	bf00      	nop
 80050f8:	20000e18 	.word	0x20000e18
 80050fc:	20000180 	.word	0x20000180
 8005100:	fffffc18 	.word	0xfffffc18

08005104 <one_section>:
//one_section
//a1区画分進んで停止する
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void one_section(void){
 8005104:	b580      	push	{r7, lr}
 8005106:	af00      	add	r7, sp, #0

	half_sectionA();										//半区画分加速走行
 8005108:	f7ff ffbc 	bl	8005084 <half_sectionA>
	half_sectionD();										//半区画分減速走行のち停止
 800510c:	f7ff ffda 	bl	80050c4 <half_sectionD>
}
 8005110:	bf00      	nop
 8005112:	bd80      	pop	{r7, pc}

08005114 <one_sectionA>:
//one_sectionA
//a1区画分加速する
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void one_sectionA(void){
 8005114:	b580      	push	{r7, lr}
 8005116:	af00      	add	r7, sp, #0

	MF.FLAG.WCTRL = 1;										//wall制御を有効にする
 8005118:	4a0f      	ldr	r2, [pc, #60]	; (8005158 <one_sectionA+0x44>)
 800511a:	8813      	ldrh	r3, [r2, #0]
 800511c:	f043 0304 	orr.w	r3, r3, #4
 8005120:	8013      	strh	r3, [r2, #0]
	MF.FLAG.GCTRL = 1;										//gyro制御を有効にする
 8005122:	4a0d      	ldr	r2, [pc, #52]	; (8005158 <one_sectionA+0x44>)
 8005124:	8813      	ldrh	r3, [r2, #0]
 8005126:	f043 0308 	orr.w	r3, r3, #8
 800512a:	8013      	strh	r3, [r2, #0]

	target_omega_z = 0;
 800512c:	4b0b      	ldr	r3, [pc, #44]	; (800515c <one_sectionA+0x48>)
 800512e:	f04f 0200 	mov.w	r2, #0
 8005132:	601a      	str	r2, [r3, #0]

	driveA(accel_hs, 400, speed_max_hs, SEC_HALF*2);			//1区画のパルス分加速走行。走行後は停止しない
 8005134:	4b0a      	ldr	r3, [pc, #40]	; (8005160 <one_sectionA+0x4c>)
 8005136:	881b      	ldrh	r3, [r3, #0]
 8005138:	b21b      	sxth	r3, r3
 800513a:	b298      	uxth	r0, r3
 800513c:	4b09      	ldr	r3, [pc, #36]	; (8005164 <one_sectionA+0x50>)
 800513e:	881b      	ldrh	r3, [r3, #0]
 8005140:	b21b      	sxth	r3, r3
 8005142:	b29a      	uxth	r2, r3
 8005144:	23b4      	movs	r3, #180	; 0xb4
 8005146:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800514a:	f7ff fde3 	bl	8004d14 <driveA>
	get_wall_info();												//壁情報を取得，片壁制御の有効・無効の判断
 800514e:	f004 f963 	bl	8009418 <get_wall_info>
}
 8005152:	bf00      	nop
 8005154:	bd80      	pop	{r7, pc}
 8005156:	bf00      	nop
 8005158:	20000e18 	.word	0x20000e18
 800515c:	20000180 	.word	0x20000180
 8005160:	20000324 	.word	0x20000324
 8005164:	20000e28 	.word	0x20000e28

08005168 <one_sectionD>:
//one_sectionD
//a1区画分減速する
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void one_sectionD(void){
 8005168:	b580      	push	{r7, lr}
 800516a:	af00      	add	r7, sp, #0

	MF.FLAG.WCTRL = 1;										//wall制御を有効にする
 800516c:	4a10      	ldr	r2, [pc, #64]	; (80051b0 <one_sectionD+0x48>)
 800516e:	8813      	ldrh	r3, [r2, #0]
 8005170:	f043 0304 	orr.w	r3, r3, #4
 8005174:	8013      	strh	r3, [r2, #0]
	MF.FLAG.GCTRL = 1;										//gyro制御を有効にする
 8005176:	4a0e      	ldr	r2, [pc, #56]	; (80051b0 <one_sectionD+0x48>)
 8005178:	8813      	ldrh	r3, [r2, #0]
 800517a:	f043 0308 	orr.w	r3, r3, #8
 800517e:	8013      	strh	r3, [r2, #0]

	target_omega_z = 0;
 8005180:	4b0c      	ldr	r3, [pc, #48]	; (80051b4 <one_sectionD+0x4c>)
 8005182:	f04f 0200 	mov.w	r2, #0
 8005186:	601a      	str	r2, [r3, #0]

	driveD(-1*accel_hs, 400, speed_max_hs, SEC_HALF*2);		//1区画のパルス分減速走行。走行後は停止しない
 8005188:	4b0b      	ldr	r3, [pc, #44]	; (80051b8 <one_sectionD+0x50>)
 800518a:	881b      	ldrh	r3, [r3, #0]
 800518c:	b21b      	sxth	r3, r3
 800518e:	b29b      	uxth	r3, r3
 8005190:	425b      	negs	r3, r3
 8005192:	b29b      	uxth	r3, r3
 8005194:	b218      	sxth	r0, r3
 8005196:	4b09      	ldr	r3, [pc, #36]	; (80051bc <one_sectionD+0x54>)
 8005198:	881b      	ldrh	r3, [r3, #0]
 800519a:	b21b      	sxth	r3, r3
 800519c:	b29a      	uxth	r2, r3
 800519e:	23b4      	movs	r3, #180	; 0xb4
 80051a0:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80051a4:	f7ff fe2a 	bl	8004dfc <driveD>
	get_wall_info();												//壁情報を取得，片壁制御の有効・無効の判断
 80051a8:	f004 f936 	bl	8009418 <get_wall_info>
}
 80051ac:	bf00      	nop
 80051ae:	bd80      	pop	{r7, pc}
 80051b0:	20000e18 	.word	0x20000e18
 80051b4:	20000180 	.word	0x20000180
 80051b8:	20000324 	.word	0x20000324
 80051bc:	20000e28 	.word	0x20000e28

080051c0 <one_sectionU>:
//one_sectionU
//a等速で1区画分進む
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void one_sectionU(void){
 80051c0:	b580      	push	{r7, lr}
 80051c2:	af00      	add	r7, sp, #0

	MF.FLAG.WCTRL = 1;										//wall制御を有効にする
 80051c4:	4a08      	ldr	r2, [pc, #32]	; (80051e8 <one_sectionU+0x28>)
 80051c6:	8813      	ldrh	r3, [r2, #0]
 80051c8:	f043 0304 	orr.w	r3, r3, #4
 80051cc:	8013      	strh	r3, [r2, #0]
	MF.FLAG.GCTRL = 1;										//gyro制御を有効にする
 80051ce:	4a06      	ldr	r2, [pc, #24]	; (80051e8 <one_sectionU+0x28>)
 80051d0:	8813      	ldrh	r3, [r2, #0]
 80051d2:	f043 0308 	orr.w	r3, r3, #8
 80051d6:	8013      	strh	r3, [r2, #0]

	driveU(SEC_HALF*2);										//半区画のパルス分等速走行。走行後は停止しない
 80051d8:	20b4      	movs	r0, #180	; 0xb4
 80051da:	f7ff fecf 	bl	8004f7c <driveU>
	get_wall_info();										//壁情報を取得
 80051de:	f004 f91b 	bl	8009418 <get_wall_info>
}
 80051e2:	bf00      	nop
 80051e4:	bd80      	pop	{r7, pc}
 80051e6:	bf00      	nop
 80051e8:	20000e18 	.word	0x20000e18
 80051ec:	00000000 	.word	0x00000000

080051f0 <rotate_R90>:
//rotate_R90
//a右に90度回転する
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void rotate_R90(void){
 80051f0:	b598      	push	{r3, r4, r7, lr}
 80051f2:	af00      	add	r7, sp, #0
	target_omega_z = 800;
 80051f4:	4b4a      	ldr	r3, [pc, #296]	; (8005320 <rotate_R90+0x130>)
 80051f6:	4a4b      	ldr	r2, [pc, #300]	; (8005324 <rotate_R90+0x134>)
 80051f8:	601a      	str	r2, [r3, #0]
	accel_l = 3000;
 80051fa:	4b4b      	ldr	r3, [pc, #300]	; (8005328 <rotate_R90+0x138>)
 80051fc:	4a4b      	ldr	r2, [pc, #300]	; (800532c <rotate_R90+0x13c>)
 80051fe:	601a      	str	r2, [r3, #0]
	accel_r = -3000;
 8005200:	4b4b      	ldr	r3, [pc, #300]	; (8005330 <rotate_R90+0x140>)
 8005202:	4a4c      	ldr	r2, [pc, #304]	; (8005334 <rotate_R90+0x144>)
 8005204:	601a      	str	r2, [r3, #0]
	speed_max_l = target_omega_z/180*M_PI * TREAD/2;
 8005206:	4b46      	ldr	r3, [pc, #280]	; (8005320 <rotate_R90+0x130>)
 8005208:	edd3 7a00 	vldr	s15, [r3]
 800520c:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 8005338 <rotate_R90+0x148>
 8005210:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8005214:	ee16 0a90 	vmov	r0, s13
 8005218:	f7fb f98e 	bl	8000538 <__aeabi_f2d>
 800521c:	a33e      	add	r3, pc, #248	; (adr r3, 8005318 <rotate_R90+0x128>)
 800521e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005222:	f7fb f9e1 	bl	80005e8 <__aeabi_dmul>
 8005226:	4603      	mov	r3, r0
 8005228:	460c      	mov	r4, r1
 800522a:	4618      	mov	r0, r3
 800522c:	4621      	mov	r1, r4
 800522e:	f04f 0200 	mov.w	r2, #0
 8005232:	4b42      	ldr	r3, [pc, #264]	; (800533c <rotate_R90+0x14c>)
 8005234:	f7fb f9d8 	bl	80005e8 <__aeabi_dmul>
 8005238:	4603      	mov	r3, r0
 800523a:	460c      	mov	r4, r1
 800523c:	4618      	mov	r0, r3
 800523e:	4621      	mov	r1, r4
 8005240:	f04f 0200 	mov.w	r2, #0
 8005244:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005248:	f7fb faf8 	bl	800083c <__aeabi_ddiv>
 800524c:	4603      	mov	r3, r0
 800524e:	460c      	mov	r4, r1
 8005250:	4618      	mov	r0, r3
 8005252:	4621      	mov	r1, r4
 8005254:	f7fb fc78 	bl	8000b48 <__aeabi_d2f>
 8005258:	4602      	mov	r2, r0
 800525a:	4b39      	ldr	r3, [pc, #228]	; (8005340 <rotate_R90+0x150>)
 800525c:	601a      	str	r2, [r3, #0]
	speed_min_r = -1*target_omega_z/180*M_PI * TREAD/2;
 800525e:	4b30      	ldr	r3, [pc, #192]	; (8005320 <rotate_R90+0x130>)
 8005260:	edd3 7a00 	vldr	s15, [r3]
 8005264:	eef1 7a67 	vneg.f32	s15, s15
 8005268:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8005338 <rotate_R90+0x148>
 800526c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8005270:	ee16 0a90 	vmov	r0, s13
 8005274:	f7fb f960 	bl	8000538 <__aeabi_f2d>
 8005278:	a327      	add	r3, pc, #156	; (adr r3, 8005318 <rotate_R90+0x128>)
 800527a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800527e:	f7fb f9b3 	bl	80005e8 <__aeabi_dmul>
 8005282:	4603      	mov	r3, r0
 8005284:	460c      	mov	r4, r1
 8005286:	4618      	mov	r0, r3
 8005288:	4621      	mov	r1, r4
 800528a:	f04f 0200 	mov.w	r2, #0
 800528e:	4b2b      	ldr	r3, [pc, #172]	; (800533c <rotate_R90+0x14c>)
 8005290:	f7fb f9aa 	bl	80005e8 <__aeabi_dmul>
 8005294:	4603      	mov	r3, r0
 8005296:	460c      	mov	r4, r1
 8005298:	4618      	mov	r0, r3
 800529a:	4621      	mov	r1, r4
 800529c:	f04f 0200 	mov.w	r2, #0
 80052a0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80052a4:	f7fb faca 	bl	800083c <__aeabi_ddiv>
 80052a8:	4603      	mov	r3, r0
 80052aa:	460c      	mov	r4, r1
 80052ac:	4618      	mov	r0, r3
 80052ae:	4621      	mov	r1, r4
 80052b0:	f7fb fc4a 	bl	8000b48 <__aeabi_d2f>
 80052b4:	4602      	mov	r2, r0
 80052b6:	4b23      	ldr	r3, [pc, #140]	; (8005344 <rotate_R90+0x154>)
 80052b8:	601a      	str	r2, [r3, #0]

	drive_start();											//走行開始
 80052ba:	f7ff fc5b 	bl	8004b74 <drive_start>
	while(degree_z > -80);
 80052be:	bf00      	nop
 80052c0:	4b21      	ldr	r3, [pc, #132]	; (8005348 <rotate_R90+0x158>)
 80052c2:	edd3 7a00 	vldr	s15, [r3]
 80052c6:	ed9f 7a21 	vldr	s14, [pc, #132]	; 800534c <rotate_R90+0x15c>
 80052ca:	eef4 7ac7 	vcmpe.f32	s15, s14
 80052ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80052d2:	dcf5      	bgt.n	80052c0 <rotate_R90+0xd0>
	drive_stop();
 80052d4:	f7ff fc6c 	bl	8004bb0 <drive_stop>

	accel_l = 3000;
 80052d8:	4b13      	ldr	r3, [pc, #76]	; (8005328 <rotate_R90+0x138>)
 80052da:	4a14      	ldr	r2, [pc, #80]	; (800532c <rotate_R90+0x13c>)
 80052dc:	601a      	str	r2, [r3, #0]
	accel_r = -3000;
 80052de:	4b14      	ldr	r3, [pc, #80]	; (8005330 <rotate_R90+0x140>)
 80052e0:	4a14      	ldr	r2, [pc, #80]	; (8005334 <rotate_R90+0x144>)
 80052e2:	601a      	str	r2, [r3, #0]
	speed_max_l = 100;
 80052e4:	4b16      	ldr	r3, [pc, #88]	; (8005340 <rotate_R90+0x150>)
 80052e6:	4a1a      	ldr	r2, [pc, #104]	; (8005350 <rotate_R90+0x160>)
 80052e8:	601a      	str	r2, [r3, #0]
	speed_min_r = -100;
 80052ea:	4b16      	ldr	r3, [pc, #88]	; (8005344 <rotate_R90+0x154>)
 80052ec:	4a19      	ldr	r2, [pc, #100]	; (8005354 <rotate_R90+0x164>)
 80052ee:	601a      	str	r2, [r3, #0]

	drive_start();											//走行開始
 80052f0:	f7ff fc40 	bl	8004b74 <drive_start>
	while(degree_z > -90+80);
 80052f4:	bf00      	nop
 80052f6:	4b14      	ldr	r3, [pc, #80]	; (8005348 <rotate_R90+0x158>)
 80052f8:	edd3 7a00 	vldr	s15, [r3]
 80052fc:	eeba 7a04 	vmov.f32	s14, #164	; 0xc1200000 -10.0
 8005300:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005304:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005308:	dcf5      	bgt.n	80052f6 <rotate_R90+0x106>

	turn_dir(DIR_TURN_R90);									//マイクロマウス内部位置情報でも左回転処理
 800530a:	2001      	movs	r0, #1
 800530c:	f003 fd62 	bl	8008dd4 <turn_dir>
	drive_stop();
 8005310:	f7ff fc4e 	bl	8004bb0 <drive_stop>
}
 8005314:	bf00      	nop
 8005316:	bd98      	pop	{r3, r4, r7, pc}
 8005318:	54442d18 	.word	0x54442d18
 800531c:	400921fb 	.word	0x400921fb
 8005320:	20000180 	.word	0x20000180
 8005324:	44480000 	.word	0x44480000
 8005328:	20000c10 	.word	0x20000c10
 800532c:	453b8000 	.word	0x453b8000
 8005330:	200009b0 	.word	0x200009b0
 8005334:	c53b8000 	.word	0xc53b8000
 8005338:	43340000 	.word	0x43340000
 800533c:	40508000 	.word	0x40508000
 8005340:	20000648 	.word	0x20000648
 8005344:	20000e1c 	.word	0x20000e1c
 8005348:	20000a20 	.word	0x20000a20
 800534c:	c2a00000 	.word	0xc2a00000
 8005350:	42c80000 	.word	0x42c80000
 8005354:	c2c80000 	.word	0xc2c80000

08005358 <rotate_L90>:
//rotate_L90
//a左に90度回転する
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void rotate_L90(void){
 8005358:	b598      	push	{r3, r4, r7, lr}
 800535a:	af00      	add	r7, sp, #0
	target_omega_z = 800;
 800535c:	4b4a      	ldr	r3, [pc, #296]	; (8005488 <rotate_L90+0x130>)
 800535e:	4a4b      	ldr	r2, [pc, #300]	; (800548c <rotate_L90+0x134>)
 8005360:	601a      	str	r2, [r3, #0]
	accel_l = -3000;
 8005362:	4b4b      	ldr	r3, [pc, #300]	; (8005490 <rotate_L90+0x138>)
 8005364:	4a4b      	ldr	r2, [pc, #300]	; (8005494 <rotate_L90+0x13c>)
 8005366:	601a      	str	r2, [r3, #0]
	accel_r = 3000;
 8005368:	4b4b      	ldr	r3, [pc, #300]	; (8005498 <rotate_L90+0x140>)
 800536a:	4a4c      	ldr	r2, [pc, #304]	; (800549c <rotate_L90+0x144>)
 800536c:	601a      	str	r2, [r3, #0]
	speed_min_l = -1*target_omega_z/180*M_PI * TREAD/2;
 800536e:	4b46      	ldr	r3, [pc, #280]	; (8005488 <rotate_L90+0x130>)
 8005370:	edd3 7a00 	vldr	s15, [r3]
 8005374:	eef1 7a67 	vneg.f32	s15, s15
 8005378:	ed9f 7a49 	vldr	s14, [pc, #292]	; 80054a0 <rotate_L90+0x148>
 800537c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8005380:	ee16 0a90 	vmov	r0, s13
 8005384:	f7fb f8d8 	bl	8000538 <__aeabi_f2d>
 8005388:	a33d      	add	r3, pc, #244	; (adr r3, 8005480 <rotate_L90+0x128>)
 800538a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800538e:	f7fb f92b 	bl	80005e8 <__aeabi_dmul>
 8005392:	4603      	mov	r3, r0
 8005394:	460c      	mov	r4, r1
 8005396:	4618      	mov	r0, r3
 8005398:	4621      	mov	r1, r4
 800539a:	f04f 0200 	mov.w	r2, #0
 800539e:	4b41      	ldr	r3, [pc, #260]	; (80054a4 <rotate_L90+0x14c>)
 80053a0:	f7fb f922 	bl	80005e8 <__aeabi_dmul>
 80053a4:	4603      	mov	r3, r0
 80053a6:	460c      	mov	r4, r1
 80053a8:	4618      	mov	r0, r3
 80053aa:	4621      	mov	r1, r4
 80053ac:	f04f 0200 	mov.w	r2, #0
 80053b0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80053b4:	f7fb fa42 	bl	800083c <__aeabi_ddiv>
 80053b8:	4603      	mov	r3, r0
 80053ba:	460c      	mov	r4, r1
 80053bc:	4618      	mov	r0, r3
 80053be:	4621      	mov	r1, r4
 80053c0:	f7fb fbc2 	bl	8000b48 <__aeabi_d2f>
 80053c4:	4602      	mov	r2, r0
 80053c6:	4b38      	ldr	r3, [pc, #224]	; (80054a8 <rotate_L90+0x150>)
 80053c8:	601a      	str	r2, [r3, #0]
	speed_max_r = target_omega_z/180*M_PI * TREAD/2;
 80053ca:	4b2f      	ldr	r3, [pc, #188]	; (8005488 <rotate_L90+0x130>)
 80053cc:	edd3 7a00 	vldr	s15, [r3]
 80053d0:	ed9f 7a33 	vldr	s14, [pc, #204]	; 80054a0 <rotate_L90+0x148>
 80053d4:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80053d8:	ee16 0a90 	vmov	r0, s13
 80053dc:	f7fb f8ac 	bl	8000538 <__aeabi_f2d>
 80053e0:	a327      	add	r3, pc, #156	; (adr r3, 8005480 <rotate_L90+0x128>)
 80053e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053e6:	f7fb f8ff 	bl	80005e8 <__aeabi_dmul>
 80053ea:	4603      	mov	r3, r0
 80053ec:	460c      	mov	r4, r1
 80053ee:	4618      	mov	r0, r3
 80053f0:	4621      	mov	r1, r4
 80053f2:	f04f 0200 	mov.w	r2, #0
 80053f6:	4b2b      	ldr	r3, [pc, #172]	; (80054a4 <rotate_L90+0x14c>)
 80053f8:	f7fb f8f6 	bl	80005e8 <__aeabi_dmul>
 80053fc:	4603      	mov	r3, r0
 80053fe:	460c      	mov	r4, r1
 8005400:	4618      	mov	r0, r3
 8005402:	4621      	mov	r1, r4
 8005404:	f04f 0200 	mov.w	r2, #0
 8005408:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800540c:	f7fb fa16 	bl	800083c <__aeabi_ddiv>
 8005410:	4603      	mov	r3, r0
 8005412:	460c      	mov	r4, r1
 8005414:	4618      	mov	r0, r3
 8005416:	4621      	mov	r1, r4
 8005418:	f7fb fb96 	bl	8000b48 <__aeabi_d2f>
 800541c:	4602      	mov	r2, r0
 800541e:	4b23      	ldr	r3, [pc, #140]	; (80054ac <rotate_L90+0x154>)
 8005420:	601a      	str	r2, [r3, #0]

	drive_start();											//走行開始
 8005422:	f7ff fba7 	bl	8004b74 <drive_start>
	while(degree_z < 80);
 8005426:	bf00      	nop
 8005428:	4b21      	ldr	r3, [pc, #132]	; (80054b0 <rotate_L90+0x158>)
 800542a:	edd3 7a00 	vldr	s15, [r3]
 800542e:	ed9f 7a21 	vldr	s14, [pc, #132]	; 80054b4 <rotate_L90+0x15c>
 8005432:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005436:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800543a:	d4f5      	bmi.n	8005428 <rotate_L90+0xd0>
	drive_stop();
 800543c:	f7ff fbb8 	bl	8004bb0 <drive_stop>

	accel_l = -3000;
 8005440:	4b13      	ldr	r3, [pc, #76]	; (8005490 <rotate_L90+0x138>)
 8005442:	4a14      	ldr	r2, [pc, #80]	; (8005494 <rotate_L90+0x13c>)
 8005444:	601a      	str	r2, [r3, #0]
	accel_r = 3000;
 8005446:	4b14      	ldr	r3, [pc, #80]	; (8005498 <rotate_L90+0x140>)
 8005448:	4a14      	ldr	r2, [pc, #80]	; (800549c <rotate_L90+0x144>)
 800544a:	601a      	str	r2, [r3, #0]
	speed_min_l = -100;
 800544c:	4b16      	ldr	r3, [pc, #88]	; (80054a8 <rotate_L90+0x150>)
 800544e:	4a1a      	ldr	r2, [pc, #104]	; (80054b8 <rotate_L90+0x160>)
 8005450:	601a      	str	r2, [r3, #0]
	speed_max_r = 100;
 8005452:	4b16      	ldr	r3, [pc, #88]	; (80054ac <rotate_L90+0x154>)
 8005454:	4a19      	ldr	r2, [pc, #100]	; (80054bc <rotate_L90+0x164>)
 8005456:	601a      	str	r2, [r3, #0]

	drive_start();											//走行開始
 8005458:	f7ff fb8c 	bl	8004b74 <drive_start>
	while(degree_z < 90-80);
 800545c:	bf00      	nop
 800545e:	4b14      	ldr	r3, [pc, #80]	; (80054b0 <rotate_L90+0x158>)
 8005460:	edd3 7a00 	vldr	s15, [r3]
 8005464:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8005468:	eef4 7ac7 	vcmpe.f32	s15, s14
 800546c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005470:	d4f5      	bmi.n	800545e <rotate_L90+0x106>

	turn_dir(DIR_TURN_L90);									//マイクロマウス内部位置情報でも左回転処理
 8005472:	20ff      	movs	r0, #255	; 0xff
 8005474:	f003 fcae 	bl	8008dd4 <turn_dir>
	drive_stop();
 8005478:	f7ff fb9a 	bl	8004bb0 <drive_stop>
}
 800547c:	bf00      	nop
 800547e:	bd98      	pop	{r3, r4, r7, pc}
 8005480:	54442d18 	.word	0x54442d18
 8005484:	400921fb 	.word	0x400921fb
 8005488:	20000180 	.word	0x20000180
 800548c:	44480000 	.word	0x44480000
 8005490:	20000c10 	.word	0x20000c10
 8005494:	c53b8000 	.word	0xc53b8000
 8005498:	200009b0 	.word	0x200009b0
 800549c:	453b8000 	.word	0x453b8000
 80054a0:	43340000 	.word	0x43340000
 80054a4:	40508000 	.word	0x40508000
 80054a8:	20000a18 	.word	0x20000a18
 80054ac:	2000017c 	.word	0x2000017c
 80054b0:	20000a20 	.word	0x20000a20
 80054b4:	42a00000 	.word	0x42a00000
 80054b8:	c2c80000 	.word	0xc2c80000
 80054bc:	42c80000 	.word	0x42c80000

080054c0 <rotate_180>:
//rotate_180
//a180度回転する
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void rotate_180(void){
 80054c0:	b598      	push	{r3, r4, r7, lr}
 80054c2:	af00      	add	r7, sp, #0
	target_omega_z = 800;
 80054c4:	4b4a      	ldr	r3, [pc, #296]	; (80055f0 <rotate_180+0x130>)
 80054c6:	4a4b      	ldr	r2, [pc, #300]	; (80055f4 <rotate_180+0x134>)
 80054c8:	601a      	str	r2, [r3, #0]
	accel_l = 3000;
 80054ca:	4b4b      	ldr	r3, [pc, #300]	; (80055f8 <rotate_180+0x138>)
 80054cc:	4a4b      	ldr	r2, [pc, #300]	; (80055fc <rotate_180+0x13c>)
 80054ce:	601a      	str	r2, [r3, #0]
	accel_r = -3000;
 80054d0:	4b4b      	ldr	r3, [pc, #300]	; (8005600 <rotate_180+0x140>)
 80054d2:	4a4c      	ldr	r2, [pc, #304]	; (8005604 <rotate_180+0x144>)
 80054d4:	601a      	str	r2, [r3, #0]
	speed_max_l = target_omega_z/180*M_PI * TREAD/2;
 80054d6:	4b46      	ldr	r3, [pc, #280]	; (80055f0 <rotate_180+0x130>)
 80054d8:	edd3 7a00 	vldr	s15, [r3]
 80054dc:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 8005608 <rotate_180+0x148>
 80054e0:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80054e4:	ee16 0a90 	vmov	r0, s13
 80054e8:	f7fb f826 	bl	8000538 <__aeabi_f2d>
 80054ec:	a33e      	add	r3, pc, #248	; (adr r3, 80055e8 <rotate_180+0x128>)
 80054ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054f2:	f7fb f879 	bl	80005e8 <__aeabi_dmul>
 80054f6:	4603      	mov	r3, r0
 80054f8:	460c      	mov	r4, r1
 80054fa:	4618      	mov	r0, r3
 80054fc:	4621      	mov	r1, r4
 80054fe:	f04f 0200 	mov.w	r2, #0
 8005502:	4b42      	ldr	r3, [pc, #264]	; (800560c <rotate_180+0x14c>)
 8005504:	f7fb f870 	bl	80005e8 <__aeabi_dmul>
 8005508:	4603      	mov	r3, r0
 800550a:	460c      	mov	r4, r1
 800550c:	4618      	mov	r0, r3
 800550e:	4621      	mov	r1, r4
 8005510:	f04f 0200 	mov.w	r2, #0
 8005514:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005518:	f7fb f990 	bl	800083c <__aeabi_ddiv>
 800551c:	4603      	mov	r3, r0
 800551e:	460c      	mov	r4, r1
 8005520:	4618      	mov	r0, r3
 8005522:	4621      	mov	r1, r4
 8005524:	f7fb fb10 	bl	8000b48 <__aeabi_d2f>
 8005528:	4602      	mov	r2, r0
 800552a:	4b39      	ldr	r3, [pc, #228]	; (8005610 <rotate_180+0x150>)
 800552c:	601a      	str	r2, [r3, #0]
	speed_min_r = -1*target_omega_z/180*M_PI * TREAD/2;
 800552e:	4b30      	ldr	r3, [pc, #192]	; (80055f0 <rotate_180+0x130>)
 8005530:	edd3 7a00 	vldr	s15, [r3]
 8005534:	eef1 7a67 	vneg.f32	s15, s15
 8005538:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8005608 <rotate_180+0x148>
 800553c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8005540:	ee16 0a90 	vmov	r0, s13
 8005544:	f7fa fff8 	bl	8000538 <__aeabi_f2d>
 8005548:	a327      	add	r3, pc, #156	; (adr r3, 80055e8 <rotate_180+0x128>)
 800554a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800554e:	f7fb f84b 	bl	80005e8 <__aeabi_dmul>
 8005552:	4603      	mov	r3, r0
 8005554:	460c      	mov	r4, r1
 8005556:	4618      	mov	r0, r3
 8005558:	4621      	mov	r1, r4
 800555a:	f04f 0200 	mov.w	r2, #0
 800555e:	4b2b      	ldr	r3, [pc, #172]	; (800560c <rotate_180+0x14c>)
 8005560:	f7fb f842 	bl	80005e8 <__aeabi_dmul>
 8005564:	4603      	mov	r3, r0
 8005566:	460c      	mov	r4, r1
 8005568:	4618      	mov	r0, r3
 800556a:	4621      	mov	r1, r4
 800556c:	f04f 0200 	mov.w	r2, #0
 8005570:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005574:	f7fb f962 	bl	800083c <__aeabi_ddiv>
 8005578:	4603      	mov	r3, r0
 800557a:	460c      	mov	r4, r1
 800557c:	4618      	mov	r0, r3
 800557e:	4621      	mov	r1, r4
 8005580:	f7fb fae2 	bl	8000b48 <__aeabi_d2f>
 8005584:	4602      	mov	r2, r0
 8005586:	4b23      	ldr	r3, [pc, #140]	; (8005614 <rotate_180+0x154>)
 8005588:	601a      	str	r2, [r3, #0]

	drive_start();											//走行開始
 800558a:	f7ff faf3 	bl	8004b74 <drive_start>
	while(degree_z > -170);
 800558e:	bf00      	nop
 8005590:	4b21      	ldr	r3, [pc, #132]	; (8005618 <rotate_180+0x158>)
 8005592:	edd3 7a00 	vldr	s15, [r3]
 8005596:	ed9f 7a21 	vldr	s14, [pc, #132]	; 800561c <rotate_180+0x15c>
 800559a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800559e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80055a2:	dcf5      	bgt.n	8005590 <rotate_180+0xd0>
	drive_stop();
 80055a4:	f7ff fb04 	bl	8004bb0 <drive_stop>

	accel_l = 3000;
 80055a8:	4b13      	ldr	r3, [pc, #76]	; (80055f8 <rotate_180+0x138>)
 80055aa:	4a14      	ldr	r2, [pc, #80]	; (80055fc <rotate_180+0x13c>)
 80055ac:	601a      	str	r2, [r3, #0]
	accel_r = -3000;
 80055ae:	4b14      	ldr	r3, [pc, #80]	; (8005600 <rotate_180+0x140>)
 80055b0:	4a14      	ldr	r2, [pc, #80]	; (8005604 <rotate_180+0x144>)
 80055b2:	601a      	str	r2, [r3, #0]
	speed_max_l = 100;
 80055b4:	4b16      	ldr	r3, [pc, #88]	; (8005610 <rotate_180+0x150>)
 80055b6:	4a1a      	ldr	r2, [pc, #104]	; (8005620 <rotate_180+0x160>)
 80055b8:	601a      	str	r2, [r3, #0]
	speed_min_r = -100;
 80055ba:	4b16      	ldr	r3, [pc, #88]	; (8005614 <rotate_180+0x154>)
 80055bc:	4a19      	ldr	r2, [pc, #100]	; (8005624 <rotate_180+0x164>)
 80055be:	601a      	str	r2, [r3, #0]

	drive_start();											//走行開始
 80055c0:	f7ff fad8 	bl	8004b74 <drive_start>
	while(degree_z > -180+170);
 80055c4:	bf00      	nop
 80055c6:	4b14      	ldr	r3, [pc, #80]	; (8005618 <rotate_180+0x158>)
 80055c8:	edd3 7a00 	vldr	s15, [r3]
 80055cc:	eeba 7a04 	vmov.f32	s14, #164	; 0xc1200000 -10.0
 80055d0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80055d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80055d8:	dcf5      	bgt.n	80055c6 <rotate_180+0x106>

	turn_dir(DIR_TURN_180);									//マイクロマウス内部位置情報でも180度回転処理
 80055da:	2002      	movs	r0, #2
 80055dc:	f003 fbfa 	bl	8008dd4 <turn_dir>
	drive_stop();
 80055e0:	f7ff fae6 	bl	8004bb0 <drive_stop>
}
 80055e4:	bf00      	nop
 80055e6:	bd98      	pop	{r3, r4, r7, pc}
 80055e8:	54442d18 	.word	0x54442d18
 80055ec:	400921fb 	.word	0x400921fb
 80055f0:	20000180 	.word	0x20000180
 80055f4:	44480000 	.word	0x44480000
 80055f8:	20000c10 	.word	0x20000c10
 80055fc:	453b8000 	.word	0x453b8000
 8005600:	200009b0 	.word	0x200009b0
 8005604:	c53b8000 	.word	0xc53b8000
 8005608:	43340000 	.word	0x43340000
 800560c:	40508000 	.word	0x40508000
 8005610:	20000648 	.word	0x20000648
 8005614:	20000e1c 	.word	0x20000e1c
 8005618:	20000a20 	.word	0x20000a20
 800561c:	c32a0000 	.word	0xc32a0000
 8005620:	42c80000 	.word	0x42c80000
 8005624:	c2c80000 	.word	0xc2c80000

08005628 <slalom_R90>:
//slalom_R90
//aスラロームで左に90度回転する
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void slalom_R90(void){
 8005628:	b580      	push	{r7, lr}
 800562a:	af00      	add	r7, sp, #0
	MF.FLAG.GYRO = 0;
 800562c:	4a5a      	ldr	r2, [pc, #360]	; (8005798 <slalom_R90+0x170>)
 800562e:	8813      	ldrh	r3, [r2, #0]
 8005630:	f36f 13c7 	bfc	r3, #7, #1
 8005634:	8013      	strh	r3, [r2, #0]

	accel_l = 3000;
 8005636:	4b59      	ldr	r3, [pc, #356]	; (800579c <slalom_R90+0x174>)
 8005638:	4a59      	ldr	r2, [pc, #356]	; (80057a0 <slalom_R90+0x178>)
 800563a:	601a      	str	r2, [r3, #0]
	accel_r = 3000;
 800563c:	4b59      	ldr	r3, [pc, #356]	; (80057a4 <slalom_R90+0x17c>)
 800563e:	4a58      	ldr	r2, [pc, #352]	; (80057a0 <slalom_R90+0x178>)
 8005640:	601a      	str	r2, [r3, #0]
	speed_max_l = 400;
 8005642:	4b59      	ldr	r3, [pc, #356]	; (80057a8 <slalom_R90+0x180>)
 8005644:	4a59      	ldr	r2, [pc, #356]	; (80057ac <slalom_R90+0x184>)
 8005646:	601a      	str	r2, [r3, #0]
	speed_max_r = 400;
 8005648:	4b59      	ldr	r3, [pc, #356]	; (80057b0 <slalom_R90+0x188>)
 800564a:	4a58      	ldr	r2, [pc, #352]	; (80057ac <slalom_R90+0x184>)
 800564c:	601a      	str	r2, [r3, #0]

	drive_start();											//走行開始
 800564e:	f7ff fa91 	bl	8004b74 <drive_start>
	while(dist_l < 18.5 && dist_r < 18.5);
 8005652:	bf00      	nop
 8005654:	4b57      	ldr	r3, [pc, #348]	; (80057b4 <slalom_R90+0x18c>)
 8005656:	edd3 7a00 	vldr	s15, [r3]
 800565a:	ed9f 7a57 	vldr	s14, [pc, #348]	; 80057b8 <slalom_R90+0x190>
 800565e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005662:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005666:	d509      	bpl.n	800567c <slalom_R90+0x54>
 8005668:	4b54      	ldr	r3, [pc, #336]	; (80057bc <slalom_R90+0x194>)
 800566a:	edd3 7a00 	vldr	s15, [r3]
 800566e:	ed9f 7a52 	vldr	s14, [pc, #328]	; 80057b8 <slalom_R90+0x190>
 8005672:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005676:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800567a:	d4eb      	bmi.n	8005654 <slalom_R90+0x2c>
	drive_stop();
 800567c:	f7ff fa98 	bl	8004bb0 <drive_stop>

	MF.FLAG.GYRO = 1;
 8005680:	4a45      	ldr	r2, [pc, #276]	; (8005798 <slalom_R90+0x170>)
 8005682:	8813      	ldrh	r3, [r2, #0]
 8005684:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005688:	8013      	strh	r3, [r2, #0]

	target_degaccel_z = 4000;
 800568a:	4b4d      	ldr	r3, [pc, #308]	; (80057c0 <slalom_R90+0x198>)
 800568c:	4a4d      	ldr	r2, [pc, #308]	; (80057c4 <slalom_R90+0x19c>)
 800568e:	601a      	str	r2, [r3, #0]
	omega_max = 550;
 8005690:	4b4d      	ldr	r3, [pc, #308]	; (80057c8 <slalom_R90+0x1a0>)
 8005692:	4a4e      	ldr	r2, [pc, #312]	; (80057cc <slalom_R90+0x1a4>)
 8005694:	601a      	str	r2, [r3, #0]
	speed_G = 400;
 8005696:	4b4e      	ldr	r3, [pc, #312]	; (80057d0 <slalom_R90+0x1a8>)
 8005698:	4a44      	ldr	r2, [pc, #272]	; (80057ac <slalom_R90+0x184>)
 800569a:	601a      	str	r2, [r3, #0]

	drive_start();											//走行開始
 800569c:	f7ff fa6a 	bl	8004b74 <drive_start>
	while(degree_z > -38.087);
 80056a0:	bf00      	nop
 80056a2:	4b4c      	ldr	r3, [pc, #304]	; (80057d4 <slalom_R90+0x1ac>)
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	4618      	mov	r0, r3
 80056a8:	f7fa ff46 	bl	8000538 <__aeabi_f2d>
 80056ac:	a336      	add	r3, pc, #216	; (adr r3, 8005788 <slalom_R90+0x160>)
 80056ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056b2:	f7fb fa29 	bl	8000b08 <__aeabi_dcmpgt>
 80056b6:	4603      	mov	r3, r0
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d1f2      	bne.n	80056a2 <slalom_R90+0x7a>
	drive_stop();
 80056bc:	f7ff fa78 	bl	8004bb0 <drive_stop>

	MF.FLAG.GYRO = 1;
 80056c0:	4a35      	ldr	r2, [pc, #212]	; (8005798 <slalom_R90+0x170>)
 80056c2:	8813      	ldrh	r3, [r2, #0]
 80056c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80056c8:	8013      	strh	r3, [r2, #0]

	target_degaccel_z = 0;
 80056ca:	4b3d      	ldr	r3, [pc, #244]	; (80057c0 <slalom_R90+0x198>)
 80056cc:	f04f 0200 	mov.w	r2, #0
 80056d0:	601a      	str	r2, [r3, #0]

	drive_start();											//走行開始
 80056d2:	f7ff fa4f 	bl	8004b74 <drive_start>
	while(degree_z > -19);
 80056d6:	bf00      	nop
 80056d8:	4b3e      	ldr	r3, [pc, #248]	; (80057d4 <slalom_R90+0x1ac>)
 80056da:	edd3 7a00 	vldr	s15, [r3]
 80056de:	eebb 7a03 	vmov.f32	s14, #179	; 0xc1980000 -19.0
 80056e2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80056e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80056ea:	dcf5      	bgt.n	80056d8 <slalom_R90+0xb0>
	drive_stop();
 80056ec:	f7ff fa60 	bl	8004bb0 <drive_stop>

	MF.FLAG.GYRO = 1;
 80056f0:	4a29      	ldr	r2, [pc, #164]	; (8005798 <slalom_R90+0x170>)
 80056f2:	8813      	ldrh	r3, [r2, #0]
 80056f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80056f8:	8013      	strh	r3, [r2, #0]

	target_degaccel_z = -4000;
 80056fa:	4b31      	ldr	r3, [pc, #196]	; (80057c0 <slalom_R90+0x198>)
 80056fc:	4a36      	ldr	r2, [pc, #216]	; (80057d8 <slalom_R90+0x1b0>)
 80056fe:	601a      	str	r2, [r3, #0]

	drive_start();											//走行開始
 8005700:	f7ff fa38 	bl	8004b74 <drive_start>
	while(degree_z > -31.913);
 8005704:	bf00      	nop
 8005706:	4b33      	ldr	r3, [pc, #204]	; (80057d4 <slalom_R90+0x1ac>)
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	4618      	mov	r0, r3
 800570c:	f7fa ff14 	bl	8000538 <__aeabi_f2d>
 8005710:	a31f      	add	r3, pc, #124	; (adr r3, 8005790 <slalom_R90+0x168>)
 8005712:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005716:	f7fb f9f7 	bl	8000b08 <__aeabi_dcmpgt>
 800571a:	4603      	mov	r3, r0
 800571c:	2b00      	cmp	r3, #0
 800571e:	d1f2      	bne.n	8005706 <slalom_R90+0xde>
	drive_stop();
 8005720:	f7ff fa46 	bl	8004bb0 <drive_stop>

	MF.FLAG.GYRO = 0;
 8005724:	4a1c      	ldr	r2, [pc, #112]	; (8005798 <slalom_R90+0x170>)
 8005726:	8813      	ldrh	r3, [r2, #0]
 8005728:	f36f 13c7 	bfc	r3, #7, #1
 800572c:	8013      	strh	r3, [r2, #0]

	accel_l = 3000;
 800572e:	4b1b      	ldr	r3, [pc, #108]	; (800579c <slalom_R90+0x174>)
 8005730:	4a1b      	ldr	r2, [pc, #108]	; (80057a0 <slalom_R90+0x178>)
 8005732:	601a      	str	r2, [r3, #0]
	accel_r = 3000;
 8005734:	4b1b      	ldr	r3, [pc, #108]	; (80057a4 <slalom_R90+0x17c>)
 8005736:	4a1a      	ldr	r2, [pc, #104]	; (80057a0 <slalom_R90+0x178>)
 8005738:	601a      	str	r2, [r3, #0]
	speed_max_l = 400;
 800573a:	4b1b      	ldr	r3, [pc, #108]	; (80057a8 <slalom_R90+0x180>)
 800573c:	4a1b      	ldr	r2, [pc, #108]	; (80057ac <slalom_R90+0x184>)
 800573e:	601a      	str	r2, [r3, #0]
	speed_max_r = 400;
 8005740:	4b1b      	ldr	r3, [pc, #108]	; (80057b0 <slalom_R90+0x188>)
 8005742:	4a1a      	ldr	r2, [pc, #104]	; (80057ac <slalom_R90+0x184>)
 8005744:	601a      	str	r2, [r3, #0]
	drive_start();											//走行開始
 8005746:	f7ff fa15 	bl	8004b74 <drive_start>
	while(dist_l < 18.5 && dist_r < 18.5);
 800574a:	bf00      	nop
 800574c:	4b19      	ldr	r3, [pc, #100]	; (80057b4 <slalom_R90+0x18c>)
 800574e:	edd3 7a00 	vldr	s15, [r3]
 8005752:	ed9f 7a19 	vldr	s14, [pc, #100]	; 80057b8 <slalom_R90+0x190>
 8005756:	eef4 7ac7 	vcmpe.f32	s15, s14
 800575a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800575e:	d509      	bpl.n	8005774 <slalom_R90+0x14c>
 8005760:	4b16      	ldr	r3, [pc, #88]	; (80057bc <slalom_R90+0x194>)
 8005762:	edd3 7a00 	vldr	s15, [r3]
 8005766:	ed9f 7a14 	vldr	s14, [pc, #80]	; 80057b8 <slalom_R90+0x190>
 800576a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800576e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005772:	d4eb      	bmi.n	800574c <slalom_R90+0x124>
	turn_dir(DIR_TURN_R90);									//マイクロマウス内部位置情報でも左回転処理
 8005774:	2001      	movs	r0, #1
 8005776:	f003 fb2d 	bl	8008dd4 <turn_dir>
	drive_stop();
 800577a:	f7ff fa19 	bl	8004bb0 <drive_stop>
}
 800577e:	bf00      	nop
 8005780:	bd80      	pop	{r7, pc}
 8005782:	bf00      	nop
 8005784:	f3af 8000 	nop.w
 8005788:	d0e56042 	.word	0xd0e56042
 800578c:	c0430b22 	.word	0xc0430b22
 8005790:	5e353f7d 	.word	0x5e353f7d
 8005794:	c03fe9ba 	.word	0xc03fe9ba
 8005798:	20000e18 	.word	0x20000e18
 800579c:	20000c10 	.word	0x20000c10
 80057a0:	453b8000 	.word	0x453b8000
 80057a4:	200009b0 	.word	0x200009b0
 80057a8:	20000648 	.word	0x20000648
 80057ac:	43c80000 	.word	0x43c80000
 80057b0:	2000017c 	.word	0x2000017c
 80057b4:	20000e2c 	.word	0x20000e2c
 80057b8:	41940000 	.word	0x41940000
 80057bc:	200009b8 	.word	0x200009b8
 80057c0:	20000a1c 	.word	0x20000a1c
 80057c4:	457a0000 	.word	0x457a0000
 80057c8:	200009b4 	.word	0x200009b4
 80057cc:	44098000 	.word	0x44098000
 80057d0:	200009c0 	.word	0x200009c0
 80057d4:	20000a20 	.word	0x20000a20
 80057d8:	c57a0000 	.word	0xc57a0000
 80057dc:	00000000 	.word	0x00000000

080057e0 <slalom_L90>:
//slalom_L90
//aスラロームで右に90度回転する
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void slalom_L90(void){
 80057e0:	b580      	push	{r7, lr}
 80057e2:	af00      	add	r7, sp, #0
	MF.FLAG.GYRO = 0;
 80057e4:	4a5a      	ldr	r2, [pc, #360]	; (8005950 <slalom_L90+0x170>)
 80057e6:	8813      	ldrh	r3, [r2, #0]
 80057e8:	f36f 13c7 	bfc	r3, #7, #1
 80057ec:	8013      	strh	r3, [r2, #0]

	accel_l = 3000;
 80057ee:	4b59      	ldr	r3, [pc, #356]	; (8005954 <slalom_L90+0x174>)
 80057f0:	4a59      	ldr	r2, [pc, #356]	; (8005958 <slalom_L90+0x178>)
 80057f2:	601a      	str	r2, [r3, #0]
	accel_r = 3000;
 80057f4:	4b59      	ldr	r3, [pc, #356]	; (800595c <slalom_L90+0x17c>)
 80057f6:	4a58      	ldr	r2, [pc, #352]	; (8005958 <slalom_L90+0x178>)
 80057f8:	601a      	str	r2, [r3, #0]
	speed_max_l = 400;
 80057fa:	4b59      	ldr	r3, [pc, #356]	; (8005960 <slalom_L90+0x180>)
 80057fc:	4a59      	ldr	r2, [pc, #356]	; (8005964 <slalom_L90+0x184>)
 80057fe:	601a      	str	r2, [r3, #0]
	speed_max_r = 400;
 8005800:	4b59      	ldr	r3, [pc, #356]	; (8005968 <slalom_L90+0x188>)
 8005802:	4a58      	ldr	r2, [pc, #352]	; (8005964 <slalom_L90+0x184>)
 8005804:	601a      	str	r2, [r3, #0]

	drive_start();											//走行開始
 8005806:	f7ff f9b5 	bl	8004b74 <drive_start>
	while(dist_l < 18.5 && dist_r < 18.5);
 800580a:	bf00      	nop
 800580c:	4b57      	ldr	r3, [pc, #348]	; (800596c <slalom_L90+0x18c>)
 800580e:	edd3 7a00 	vldr	s15, [r3]
 8005812:	ed9f 7a57 	vldr	s14, [pc, #348]	; 8005970 <slalom_L90+0x190>
 8005816:	eef4 7ac7 	vcmpe.f32	s15, s14
 800581a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800581e:	d509      	bpl.n	8005834 <slalom_L90+0x54>
 8005820:	4b54      	ldr	r3, [pc, #336]	; (8005974 <slalom_L90+0x194>)
 8005822:	edd3 7a00 	vldr	s15, [r3]
 8005826:	ed9f 7a52 	vldr	s14, [pc, #328]	; 8005970 <slalom_L90+0x190>
 800582a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800582e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005832:	d4eb      	bmi.n	800580c <slalom_L90+0x2c>
	drive_stop();
 8005834:	f7ff f9bc 	bl	8004bb0 <drive_stop>

	MF.FLAG.GYRO = 1;
 8005838:	4a45      	ldr	r2, [pc, #276]	; (8005950 <slalom_L90+0x170>)
 800583a:	8813      	ldrh	r3, [r2, #0]
 800583c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005840:	8013      	strh	r3, [r2, #0]

	target_degaccel_z = -4000;
 8005842:	4b4d      	ldr	r3, [pc, #308]	; (8005978 <slalom_L90+0x198>)
 8005844:	4a4d      	ldr	r2, [pc, #308]	; (800597c <slalom_L90+0x19c>)
 8005846:	601a      	str	r2, [r3, #0]
	omega_min = -550;
 8005848:	4b4d      	ldr	r3, [pc, #308]	; (8005980 <slalom_L90+0x1a0>)
 800584a:	4a4e      	ldr	r2, [pc, #312]	; (8005984 <slalom_L90+0x1a4>)
 800584c:	601a      	str	r2, [r3, #0]
	speed_G = 400;
 800584e:	4b4e      	ldr	r3, [pc, #312]	; (8005988 <slalom_L90+0x1a8>)
 8005850:	4a44      	ldr	r2, [pc, #272]	; (8005964 <slalom_L90+0x184>)
 8005852:	601a      	str	r2, [r3, #0]

	drive_start();											//走行開始
 8005854:	f7ff f98e 	bl	8004b74 <drive_start>
	while(degree_z < 38.087);
 8005858:	bf00      	nop
 800585a:	4b4c      	ldr	r3, [pc, #304]	; (800598c <slalom_L90+0x1ac>)
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	4618      	mov	r0, r3
 8005860:	f7fa fe6a 	bl	8000538 <__aeabi_f2d>
 8005864:	a336      	add	r3, pc, #216	; (adr r3, 8005940 <slalom_L90+0x160>)
 8005866:	e9d3 2300 	ldrd	r2, r3, [r3]
 800586a:	f7fb f92f 	bl	8000acc <__aeabi_dcmplt>
 800586e:	4603      	mov	r3, r0
 8005870:	2b00      	cmp	r3, #0
 8005872:	d1f2      	bne.n	800585a <slalom_L90+0x7a>
	drive_stop();
 8005874:	f7ff f99c 	bl	8004bb0 <drive_stop>

	MF.FLAG.GYRO = 1;
 8005878:	4a35      	ldr	r2, [pc, #212]	; (8005950 <slalom_L90+0x170>)
 800587a:	8813      	ldrh	r3, [r2, #0]
 800587c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005880:	8013      	strh	r3, [r2, #0]

	target_degaccel_z = 0;
 8005882:	4b3d      	ldr	r3, [pc, #244]	; (8005978 <slalom_L90+0x198>)
 8005884:	f04f 0200 	mov.w	r2, #0
 8005888:	601a      	str	r2, [r3, #0]

	drive_start();											//走行開始
 800588a:	f7ff f973 	bl	8004b74 <drive_start>
	while(degree_z < 19);
 800588e:	bf00      	nop
 8005890:	4b3e      	ldr	r3, [pc, #248]	; (800598c <slalom_L90+0x1ac>)
 8005892:	edd3 7a00 	vldr	s15, [r3]
 8005896:	eeb3 7a03 	vmov.f32	s14, #51	; 0x41980000  19.0
 800589a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800589e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80058a2:	d4f5      	bmi.n	8005890 <slalom_L90+0xb0>
	drive_stop();
 80058a4:	f7ff f984 	bl	8004bb0 <drive_stop>

	MF.FLAG.GYRO = 1;
 80058a8:	4a29      	ldr	r2, [pc, #164]	; (8005950 <slalom_L90+0x170>)
 80058aa:	8813      	ldrh	r3, [r2, #0]
 80058ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80058b0:	8013      	strh	r3, [r2, #0]

	target_degaccel_z = 4000;
 80058b2:	4b31      	ldr	r3, [pc, #196]	; (8005978 <slalom_L90+0x198>)
 80058b4:	4a36      	ldr	r2, [pc, #216]	; (8005990 <slalom_L90+0x1b0>)
 80058b6:	601a      	str	r2, [r3, #0]

	drive_start();											//走行開始
 80058b8:	f7ff f95c 	bl	8004b74 <drive_start>
	while(degree_z < 31.913);
 80058bc:	bf00      	nop
 80058be:	4b33      	ldr	r3, [pc, #204]	; (800598c <slalom_L90+0x1ac>)
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	4618      	mov	r0, r3
 80058c4:	f7fa fe38 	bl	8000538 <__aeabi_f2d>
 80058c8:	a31f      	add	r3, pc, #124	; (adr r3, 8005948 <slalom_L90+0x168>)
 80058ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058ce:	f7fb f8fd 	bl	8000acc <__aeabi_dcmplt>
 80058d2:	4603      	mov	r3, r0
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d1f2      	bne.n	80058be <slalom_L90+0xde>
	drive_stop();
 80058d8:	f7ff f96a 	bl	8004bb0 <drive_stop>

	MF.FLAG.GYRO = 0;
 80058dc:	4a1c      	ldr	r2, [pc, #112]	; (8005950 <slalom_L90+0x170>)
 80058de:	8813      	ldrh	r3, [r2, #0]
 80058e0:	f36f 13c7 	bfc	r3, #7, #1
 80058e4:	8013      	strh	r3, [r2, #0]

	accel_l = 3000;
 80058e6:	4b1b      	ldr	r3, [pc, #108]	; (8005954 <slalom_L90+0x174>)
 80058e8:	4a1b      	ldr	r2, [pc, #108]	; (8005958 <slalom_L90+0x178>)
 80058ea:	601a      	str	r2, [r3, #0]
	accel_r = 3000;
 80058ec:	4b1b      	ldr	r3, [pc, #108]	; (800595c <slalom_L90+0x17c>)
 80058ee:	4a1a      	ldr	r2, [pc, #104]	; (8005958 <slalom_L90+0x178>)
 80058f0:	601a      	str	r2, [r3, #0]
	speed_max_l = 400;
 80058f2:	4b1b      	ldr	r3, [pc, #108]	; (8005960 <slalom_L90+0x180>)
 80058f4:	4a1b      	ldr	r2, [pc, #108]	; (8005964 <slalom_L90+0x184>)
 80058f6:	601a      	str	r2, [r3, #0]
	speed_max_r = 400;
 80058f8:	4b1b      	ldr	r3, [pc, #108]	; (8005968 <slalom_L90+0x188>)
 80058fa:	4a1a      	ldr	r2, [pc, #104]	; (8005964 <slalom_L90+0x184>)
 80058fc:	601a      	str	r2, [r3, #0]
	drive_start();											//走行開始
 80058fe:	f7ff f939 	bl	8004b74 <drive_start>
	while(dist_l < 18.5 && dist_r < 18.5);
 8005902:	bf00      	nop
 8005904:	4b19      	ldr	r3, [pc, #100]	; (800596c <slalom_L90+0x18c>)
 8005906:	edd3 7a00 	vldr	s15, [r3]
 800590a:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8005970 <slalom_L90+0x190>
 800590e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005912:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005916:	d509      	bpl.n	800592c <slalom_L90+0x14c>
 8005918:	4b16      	ldr	r3, [pc, #88]	; (8005974 <slalom_L90+0x194>)
 800591a:	edd3 7a00 	vldr	s15, [r3]
 800591e:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8005970 <slalom_L90+0x190>
 8005922:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005926:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800592a:	d4eb      	bmi.n	8005904 <slalom_L90+0x124>
	turn_dir(DIR_TURN_L90);									//マイクロマウス内部位置情報でも左回転処理
 800592c:	20ff      	movs	r0, #255	; 0xff
 800592e:	f003 fa51 	bl	8008dd4 <turn_dir>
	drive_stop();
 8005932:	f7ff f93d 	bl	8004bb0 <drive_stop>
}
 8005936:	bf00      	nop
 8005938:	bd80      	pop	{r7, pc}
 800593a:	bf00      	nop
 800593c:	f3af 8000 	nop.w
 8005940:	d0e56042 	.word	0xd0e56042
 8005944:	40430b22 	.word	0x40430b22
 8005948:	5e353f7d 	.word	0x5e353f7d
 800594c:	403fe9ba 	.word	0x403fe9ba
 8005950:	20000e18 	.word	0x20000e18
 8005954:	20000c10 	.word	0x20000c10
 8005958:	453b8000 	.word	0x453b8000
 800595c:	200009b0 	.word	0x200009b0
 8005960:	20000648 	.word	0x20000648
 8005964:	43c80000 	.word	0x43c80000
 8005968:	2000017c 	.word	0x2000017c
 800596c:	20000e2c 	.word	0x20000e2c
 8005970:	41940000 	.word	0x41940000
 8005974:	200009b8 	.word	0x200009b8
 8005978:	20000a1c 	.word	0x20000a1c
 800597c:	c57a0000 	.word	0xc57a0000
 8005980:	2000028c 	.word	0x2000028c
 8005984:	c4098000 	.word	0xc4098000
 8005988:	200009c0 	.word	0x200009c0
 800598c:	20000a20 	.word	0x20000a20
 8005990:	457a0000 	.word	0x457a0000

08005994 <init_test>:
//init_test
//a初期基幹関数走行テスト
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void init_test(void){
 8005994:	b580      	push	{r7, lr}
 8005996:	b086      	sub	sp, #24
 8005998:	af00      	add	r7, sp, #0

	int mode = 0;
 800599a:	2300      	movs	r3, #0
 800599c:	617b      	str	r3, [r7, #20]
	printf("Test Init Run, Mode : %d\n", mode);
 800599e:	6979      	ldr	r1, [r7, #20]
 80059a0:	4868      	ldr	r0, [pc, #416]	; (8005b44 <init_test+0x1b0>)
 80059a2:	f004 f921 	bl	8009be8 <iprintf>

	while(1){
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 80059a6:	697b      	ldr	r3, [r7, #20]
 80059a8:	b2db      	uxtb	r3, r3
 80059aa:	f003 0301 	and.w	r3, r3, #1
 80059ae:	b2d8      	uxtb	r0, r3
 80059b0:	697b      	ldr	r3, [r7, #20]
 80059b2:	b2db      	uxtb	r3, r3
 80059b4:	f003 0302 	and.w	r3, r3, #2
 80059b8:	b2d9      	uxtb	r1, r3
 80059ba:	697b      	ldr	r3, [r7, #20]
 80059bc:	b2db      	uxtb	r3, r3
 80059be:	f003 0304 	and.w	r3, r3, #4
 80059c2:	b2db      	uxtb	r3, r3
 80059c4:	461a      	mov	r2, r3
 80059c6:	f002 fd87 	bl	80084d8 <led_write>
		  if(dist_r >= 20){
 80059ca:	4b5f      	ldr	r3, [pc, #380]	; (8005b48 <init_test+0x1b4>)
 80059cc:	edd3 7a00 	vldr	s15, [r3]
 80059d0:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 80059d4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80059d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80059dc:	db0f      	blt.n	80059fe <init_test+0x6a>
			  mode++;
 80059de:	697b      	ldr	r3, [r7, #20]
 80059e0:	3301      	adds	r3, #1
 80059e2:	617b      	str	r3, [r7, #20]
			  dist_r = 0;
 80059e4:	4b58      	ldr	r3, [pc, #352]	; (8005b48 <init_test+0x1b4>)
 80059e6:	f04f 0200 	mov.w	r2, #0
 80059ea:	601a      	str	r2, [r3, #0]
			  if(mode > 7){
 80059ec:	697b      	ldr	r3, [r7, #20]
 80059ee:	2b07      	cmp	r3, #7
 80059f0:	dd01      	ble.n	80059f6 <init_test+0x62>
				  mode = 0;
 80059f2:	2300      	movs	r3, #0
 80059f4:	617b      	str	r3, [r7, #20]
			  }
			  printf("Mode : %d\n", mode);
 80059f6:	6979      	ldr	r1, [r7, #20]
 80059f8:	4854      	ldr	r0, [pc, #336]	; (8005b4c <init_test+0x1b8>)
 80059fa:	f004 f8f5 	bl	8009be8 <iprintf>
			  //buzzer(pitagola2[mode-1][0], pitagola2[mode-1][1]);
			  //buzzer(pitagola[2][0], pitagola[2][1]);
		  }
		  if(dist_r <= -20){
 80059fe:	4b52      	ldr	r3, [pc, #328]	; (8005b48 <init_test+0x1b4>)
 8005a00:	edd3 7a00 	vldr	s15, [r3]
 8005a04:	eebb 7a04 	vmov.f32	s14, #180	; 0xc1a00000 -20.0
 8005a08:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005a0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a10:	d80f      	bhi.n	8005a32 <init_test+0x9e>
			  mode--;
 8005a12:	697b      	ldr	r3, [r7, #20]
 8005a14:	3b01      	subs	r3, #1
 8005a16:	617b      	str	r3, [r7, #20]
			  dist_r = 0;
 8005a18:	4b4b      	ldr	r3, [pc, #300]	; (8005b48 <init_test+0x1b4>)
 8005a1a:	f04f 0200 	mov.w	r2, #0
 8005a1e:	601a      	str	r2, [r3, #0]
			  if(mode < 0){
 8005a20:	697b      	ldr	r3, [r7, #20]
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	da01      	bge.n	8005a2a <init_test+0x96>
				  mode = 7;
 8005a26:	2307      	movs	r3, #7
 8005a28:	617b      	str	r3, [r7, #20]
			  }
			  printf("Mode : %d\n", mode);
 8005a2a:	6979      	ldr	r1, [r7, #20]
 8005a2c:	4847      	ldr	r0, [pc, #284]	; (8005b4c <init_test+0x1b8>)
 8005a2e:	f004 f8db 	bl	8009be8 <iprintf>
			  //buzzer(pitagola2[mode-1][0], pitagola2[mode-1][1]);
			  //buzzer(pitagola[2][0], pitagola[2][1]);
		  }
		  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET){
 8005a32:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005a36:	4846      	ldr	r0, [pc, #280]	; (8005b50 <init_test+0x1bc>)
 8005a38:	f7fc fc24 	bl	8002284 <HAL_GPIO_ReadPin>
 8005a3c:	4603      	mov	r3, r0
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d1b1      	bne.n	80059a6 <init_test+0x12>
			  HAL_Delay(50);
 8005a42:	2032      	movs	r0, #50	; 0x32
 8005a44:	f7fb fac2 	bl	8000fcc <HAL_Delay>
			  while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET);
 8005a48:	bf00      	nop
 8005a4a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005a4e:	4840      	ldr	r0, [pc, #256]	; (8005b50 <init_test+0x1bc>)
 8005a50:	f7fc fc18 	bl	8002284 <HAL_GPIO_ReadPin>
 8005a54:	4603      	mov	r3, r0
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d0f7      	beq.n	8005a4a <init_test+0xb6>
			  switch(mode){
 8005a5a:	697b      	ldr	r3, [r7, #20]
 8005a5c:	2b07      	cmp	r3, #7
 8005a5e:	d8a2      	bhi.n	80059a6 <init_test+0x12>
 8005a60:	a201      	add	r2, pc, #4	; (adr r2, 8005a68 <init_test+0xd4>)
 8005a62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a66:	bf00      	nop
 8005a68:	080059a7 	.word	0x080059a7
 8005a6c:	08005a89 	.word	0x08005a89
 8005a70:	08005aa9 	.word	0x08005aa9
 8005a74:	08005ac7 	.word	0x08005ac7
 8005a78:	08005ae5 	.word	0x08005ae5
 8005a7c:	08005b03 	.word	0x08005b03
 8005a80:	080059a7 	.word	0x080059a7
 8005a84:	08005b29 	.word	0x08005b29
				case 0:
					break;
				case 1:
					//----4区画等速走行----
					printf("4 Section, Forward, Constant Speed.\n");
 8005a88:	4832      	ldr	r0, [pc, #200]	; (8005b54 <init_test+0x1c0>)
 8005a8a:	f004 f921 	bl	8009cd0 <puts>
					for(int i = 0; i < 1; i++){
 8005a8e:	2300      	movs	r3, #0
 8005a90:	613b      	str	r3, [r7, #16]
 8005a92:	e005      	b.n	8005aa0 <init_test+0x10c>
						driveC(SEC_HALF*2);	//一区画のパルス分デフォルトインターバルで走行
 8005a94:	20b4      	movs	r0, #180	; 0xb4
 8005a96:	f7ff faa9 	bl	8004fec <driveC>
					for(int i = 0; i < 1; i++){
 8005a9a:	693b      	ldr	r3, [r7, #16]
 8005a9c:	3301      	adds	r3, #1
 8005a9e:	613b      	str	r3, [r7, #16]
 8005aa0:	693b      	ldr	r3, [r7, #16]
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	ddf6      	ble.n	8005a94 <init_test+0x100>
					}
					break;
 8005aa6:	e04c      	b.n	8005b42 <init_test+0x1ae>
				case 2:
					//----right90度回転----
					printf("Rotate R90.\n");
 8005aa8:	482b      	ldr	r0, [pc, #172]	; (8005b58 <init_test+0x1c4>)
 8005aaa:	f004 f911 	bl	8009cd0 <puts>
					for(int i = 0; i < 16; i++){
 8005aae:	2300      	movs	r3, #0
 8005ab0:	60fb      	str	r3, [r7, #12]
 8005ab2:	e004      	b.n	8005abe <init_test+0x12a>
						rotate_R90();				//16回右90度回転、つまり4周回転
 8005ab4:	f7ff fb9c 	bl	80051f0 <rotate_R90>
					for(int i = 0; i < 16; i++){
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	3301      	adds	r3, #1
 8005abc:	60fb      	str	r3, [r7, #12]
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	2b0f      	cmp	r3, #15
 8005ac2:	ddf7      	ble.n	8005ab4 <init_test+0x120>
					}
					break;
 8005ac4:	e03d      	b.n	8005b42 <init_test+0x1ae>
				case 3:
					//----left90度回転----
					printf("Rotate L90.\n");
 8005ac6:	4825      	ldr	r0, [pc, #148]	; (8005b5c <init_test+0x1c8>)
 8005ac8:	f004 f902 	bl	8009cd0 <puts>
					for(int i = 0; i < 16; i++){
 8005acc:	2300      	movs	r3, #0
 8005ace:	60bb      	str	r3, [r7, #8]
 8005ad0:	e004      	b.n	8005adc <init_test+0x148>
						rotate_L90();				//16回左90度回転、つまり4周回転
 8005ad2:	f7ff fc41 	bl	8005358 <rotate_L90>
					for(int i = 0; i < 16; i++){
 8005ad6:	68bb      	ldr	r3, [r7, #8]
 8005ad8:	3301      	adds	r3, #1
 8005ada:	60bb      	str	r3, [r7, #8]
 8005adc:	68bb      	ldr	r3, [r7, #8]
 8005ade:	2b0f      	cmp	r3, #15
 8005ae0:	ddf7      	ble.n	8005ad2 <init_test+0x13e>
					}
					break;
 8005ae2:	e02e      	b.n	8005b42 <init_test+0x1ae>
				case 4:
					//----180度回転----
					printf("Rotate 180.\n");
 8005ae4:	481e      	ldr	r0, [pc, #120]	; (8005b60 <init_test+0x1cc>)
 8005ae6:	f004 f8f3 	bl	8009cd0 <puts>
					for(int i = 0; i < 8; i++){
 8005aea:	2300      	movs	r3, #0
 8005aec:	607b      	str	r3, [r7, #4]
 8005aee:	e004      	b.n	8005afa <init_test+0x166>
						rotate_180();				//8回右180度回転、つまり4周回転
 8005af0:	f7ff fce6 	bl	80054c0 <rotate_180>
					for(int i = 0; i < 8; i++){
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	3301      	adds	r3, #1
 8005af8:	607b      	str	r3, [r7, #4]
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	2b07      	cmp	r3, #7
 8005afe:	ddf7      	ble.n	8005af0 <init_test+0x15c>
					}
					break;
 8005b00:	e01f      	b.n	8005b42 <init_test+0x1ae>
				case 5:
					//----4区画連続走行----
					printf("4 Section, Forward, Continuous.\n");
 8005b02:	4818      	ldr	r0, [pc, #96]	; (8005b64 <init_test+0x1d0>)
 8005b04:	f004 f8e4 	bl	8009cd0 <puts>
					half_sectionA();				//半区画のパルス分加速しながら走行
 8005b08:	f7ff fabc 	bl	8005084 <half_sectionA>
					for(int i = 0; i < 2-1; i++){
 8005b0c:	2300      	movs	r3, #0
 8005b0e:	603b      	str	r3, [r7, #0]
 8005b10:	e004      	b.n	8005b1c <init_test+0x188>
						one_sectionU();			//一区画のパルス分等速走行
 8005b12:	f7ff fb55 	bl	80051c0 <one_sectionU>
					for(int i = 0; i < 2-1; i++){
 8005b16:	683b      	ldr	r3, [r7, #0]
 8005b18:	3301      	adds	r3, #1
 8005b1a:	603b      	str	r3, [r7, #0]
 8005b1c:	683b      	ldr	r3, [r7, #0]
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	ddf7      	ble.n	8005b12 <init_test+0x17e>
					}
					half_sectionD();				//半区画のパルス分減速しながら走行。走行後は停止する
 8005b22:	f7ff facf 	bl	80050c4 <half_sectionD>
					break;
 8005b26:	e00c      	b.n	8005b42 <init_test+0x1ae>
				case 6:
					break;
				case 7:
					target_degree_z = degree_z;
 8005b28:	4b0f      	ldr	r3, [pc, #60]	; (8005b68 <init_test+0x1d4>)
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	4a0f      	ldr	r2, [pc, #60]	; (8005b6c <init_test+0x1d8>)
 8005b2e:	6013      	str	r3, [r2, #0]
					accel_l = 5000;
 8005b30:	4b0f      	ldr	r3, [pc, #60]	; (8005b70 <init_test+0x1dc>)
 8005b32:	4a10      	ldr	r2, [pc, #64]	; (8005b74 <init_test+0x1e0>)
 8005b34:	601a      	str	r2, [r3, #0]

					MF.FLAG.ENKAI = 1;
 8005b36:	4a10      	ldr	r2, [pc, #64]	; (8005b78 <init_test+0x1e4>)
 8005b38:	8813      	ldrh	r3, [r2, #0]
 8005b3a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005b3e:	8013      	strh	r3, [r2, #0]

					while(1);
 8005b40:	e7fe      	b.n	8005b40 <init_test+0x1ac>
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 8005b42:	e730      	b.n	80059a6 <init_test+0x12>
 8005b44:	0800ae24 	.word	0x0800ae24
 8005b48:	200009b8 	.word	0x200009b8
 8005b4c:	0800ae40 	.word	0x0800ae40
 8005b50:	40020000 	.word	0x40020000
 8005b54:	0800ae4c 	.word	0x0800ae4c
 8005b58:	0800ae70 	.word	0x0800ae70
 8005b5c:	0800ae7c 	.word	0x0800ae7c
 8005b60:	0800ae88 	.word	0x0800ae88
 8005b64:	0800ae94 	.word	0x0800ae94
 8005b68:	20000a20 	.word	0x20000a20
 8005b6c:	20000ab4 	.word	0x20000ab4
 8005b70:	20000c10 	.word	0x20000c10
 8005b74:	459c4000 	.word	0x459c4000
 8005b78:	20000e18 	.word	0x20000e18

08005b7c <slalom_test>:
//slalom_test
//aスラローム走行テスト
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void slalom_test(void){
 8005b7c:	b580      	push	{r7, lr}
 8005b7e:	b086      	sub	sp, #24
 8005b80:	af00      	add	r7, sp, #0

	int mode = 0;
 8005b82:	2300      	movs	r3, #0
 8005b84:	617b      	str	r3, [r7, #20]
	printf("Test Slalom Run, Mode : %d\n", mode);
 8005b86:	6979      	ldr	r1, [r7, #20]
 8005b88:	4866      	ldr	r0, [pc, #408]	; (8005d24 <slalom_test+0x1a8>)
 8005b8a:	f004 f82d 	bl	8009be8 <iprintf>

	while(1){
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 8005b8e:	697b      	ldr	r3, [r7, #20]
 8005b90:	b2db      	uxtb	r3, r3
 8005b92:	f003 0301 	and.w	r3, r3, #1
 8005b96:	b2d8      	uxtb	r0, r3
 8005b98:	697b      	ldr	r3, [r7, #20]
 8005b9a:	b2db      	uxtb	r3, r3
 8005b9c:	f003 0302 	and.w	r3, r3, #2
 8005ba0:	b2d9      	uxtb	r1, r3
 8005ba2:	697b      	ldr	r3, [r7, #20]
 8005ba4:	b2db      	uxtb	r3, r3
 8005ba6:	f003 0304 	and.w	r3, r3, #4
 8005baa:	b2db      	uxtb	r3, r3
 8005bac:	461a      	mov	r2, r3
 8005bae:	f002 fc93 	bl	80084d8 <led_write>
		  if(dist_r >= 20){
 8005bb2:	4b5d      	ldr	r3, [pc, #372]	; (8005d28 <slalom_test+0x1ac>)
 8005bb4:	edd3 7a00 	vldr	s15, [r3]
 8005bb8:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8005bbc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005bc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005bc4:	db0f      	blt.n	8005be6 <slalom_test+0x6a>
			  mode++;
 8005bc6:	697b      	ldr	r3, [r7, #20]
 8005bc8:	3301      	adds	r3, #1
 8005bca:	617b      	str	r3, [r7, #20]
			  dist_r = 0;
 8005bcc:	4b56      	ldr	r3, [pc, #344]	; (8005d28 <slalom_test+0x1ac>)
 8005bce:	f04f 0200 	mov.w	r2, #0
 8005bd2:	601a      	str	r2, [r3, #0]
			  if(mode > 7){
 8005bd4:	697b      	ldr	r3, [r7, #20]
 8005bd6:	2b07      	cmp	r3, #7
 8005bd8:	dd01      	ble.n	8005bde <slalom_test+0x62>
				  mode = 0;
 8005bda:	2300      	movs	r3, #0
 8005bdc:	617b      	str	r3, [r7, #20]
			  }
			  printf("Mode : %d\n", mode);
 8005bde:	6979      	ldr	r1, [r7, #20]
 8005be0:	4852      	ldr	r0, [pc, #328]	; (8005d2c <slalom_test+0x1b0>)
 8005be2:	f004 f801 	bl	8009be8 <iprintf>
			  //buzzer(pitagola2[mode-1][0], pitagola2[mode-1][1]);
			  //buzzer(pitagola[2][0], pitagola[2][1]);
		  }
		  if(dist_r <= -20){
 8005be6:	4b50      	ldr	r3, [pc, #320]	; (8005d28 <slalom_test+0x1ac>)
 8005be8:	edd3 7a00 	vldr	s15, [r3]
 8005bec:	eebb 7a04 	vmov.f32	s14, #180	; 0xc1a00000 -20.0
 8005bf0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005bf4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005bf8:	d80f      	bhi.n	8005c1a <slalom_test+0x9e>
			  mode--;
 8005bfa:	697b      	ldr	r3, [r7, #20]
 8005bfc:	3b01      	subs	r3, #1
 8005bfe:	617b      	str	r3, [r7, #20]
			  dist_r = 0;
 8005c00:	4b49      	ldr	r3, [pc, #292]	; (8005d28 <slalom_test+0x1ac>)
 8005c02:	f04f 0200 	mov.w	r2, #0
 8005c06:	601a      	str	r2, [r3, #0]
			  if(mode < 0){
 8005c08:	697b      	ldr	r3, [r7, #20]
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	da01      	bge.n	8005c12 <slalom_test+0x96>
				  mode = 7;
 8005c0e:	2307      	movs	r3, #7
 8005c10:	617b      	str	r3, [r7, #20]
			  }
			  printf("Mode : %d\n", mode);
 8005c12:	6979      	ldr	r1, [r7, #20]
 8005c14:	4845      	ldr	r0, [pc, #276]	; (8005d2c <slalom_test+0x1b0>)
 8005c16:	f003 ffe7 	bl	8009be8 <iprintf>
			  //buzzer(pitagola2[mode-1][0], pitagola2[mode-1][1]);
			  //buzzer(pitagola[2][0], pitagola[2][1]);
		  }
		  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET){
 8005c1a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005c1e:	4844      	ldr	r0, [pc, #272]	; (8005d30 <slalom_test+0x1b4>)
 8005c20:	f7fc fb30 	bl	8002284 <HAL_GPIO_ReadPin>
 8005c24:	4603      	mov	r3, r0
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d1b1      	bne.n	8005b8e <slalom_test+0x12>
			  HAL_Delay(50);
 8005c2a:	2032      	movs	r0, #50	; 0x32
 8005c2c:	f7fb f9ce 	bl	8000fcc <HAL_Delay>
			  while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET);
 8005c30:	bf00      	nop
 8005c32:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005c36:	483e      	ldr	r0, [pc, #248]	; (8005d30 <slalom_test+0x1b4>)
 8005c38:	f7fc fb24 	bl	8002284 <HAL_GPIO_ReadPin>
 8005c3c:	4603      	mov	r3, r0
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d0f7      	beq.n	8005c32 <slalom_test+0xb6>
			  switch(mode){
 8005c42:	697b      	ldr	r3, [r7, #20]
 8005c44:	2b07      	cmp	r3, #7
 8005c46:	d8a2      	bhi.n	8005b8e <slalom_test+0x12>
 8005c48:	a201      	add	r2, pc, #4	; (adr r2, 8005c50 <slalom_test+0xd4>)
 8005c4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c4e:	bf00      	nop
 8005c50:	08005b8f 	.word	0x08005b8f
 8005c54:	08005c71 	.word	0x08005c71
 8005c58:	08005c8f 	.word	0x08005c8f
 8005c5c:	08005cad 	.word	0x08005cad
 8005c60:	08005cd3 	.word	0x08005cd3
 8005c64:	08005cfd 	.word	0x08005cfd
 8005c68:	08005b8f 	.word	0x08005b8f
 8005c6c:	08005b8f 	.word	0x08005b8f
				case 0:
					break;
				case 1:
					//----slalom右折----
					printf("slalom turn right .\n");
 8005c70:	4830      	ldr	r0, [pc, #192]	; (8005d34 <slalom_test+0x1b8>)
 8005c72:	f004 f82d 	bl	8009cd0 <puts>
					for(int i = 0; i < 4; i++){
 8005c76:	2300      	movs	r3, #0
 8005c78:	613b      	str	r3, [r7, #16]
 8005c7a:	e004      	b.n	8005c86 <slalom_test+0x10a>
						slalom_R90();	//一区画のパルス分デフォルトインターバルで走行
 8005c7c:	f7ff fcd4 	bl	8005628 <slalom_R90>
					for(int i = 0; i < 4; i++){
 8005c80:	693b      	ldr	r3, [r7, #16]
 8005c82:	3301      	adds	r3, #1
 8005c84:	613b      	str	r3, [r7, #16]
 8005c86:	693b      	ldr	r3, [r7, #16]
 8005c88:	2b03      	cmp	r3, #3
 8005c8a:	ddf7      	ble.n	8005c7c <slalom_test+0x100>
					}
					break;
 8005c8c:	e049      	b.n	8005d22 <slalom_test+0x1a6>
				case 2:
					//----slalom左折----
					printf("slalom turn left .\n");
 8005c8e:	482a      	ldr	r0, [pc, #168]	; (8005d38 <slalom_test+0x1bc>)
 8005c90:	f004 f81e 	bl	8009cd0 <puts>
					for(int i = 0; i < 4	; i++){
 8005c94:	2300      	movs	r3, #0
 8005c96:	60fb      	str	r3, [r7, #12]
 8005c98:	e004      	b.n	8005ca4 <slalom_test+0x128>
						slalom_L90();				//16回右90度回転、つまり4周回転
 8005c9a:	f7ff fda1 	bl	80057e0 <slalom_L90>
					for(int i = 0; i < 4	; i++){
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	3301      	adds	r3, #1
 8005ca2:	60fb      	str	r3, [r7, #12]
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	2b03      	cmp	r3, #3
 8005ca8:	ddf7      	ble.n	8005c9a <slalom_test+0x11e>
					}
					break;
 8005caa:	e03a      	b.n	8005d22 <slalom_test+0x1a6>
				case 3:
					//----slalom右折----
					printf("slalom turn right .\n");
 8005cac:	4821      	ldr	r0, [pc, #132]	; (8005d34 <slalom_test+0x1b8>)
 8005cae:	f004 f80f 	bl	8009cd0 <puts>
					for(int i = 0; i < 8; i++){
 8005cb2:	2300      	movs	r3, #0
 8005cb4:	60bb      	str	r3, [r7, #8]
 8005cb6:	e008      	b.n	8005cca <slalom_test+0x14e>
						half_sectionA();
 8005cb8:	f7ff f9e4 	bl	8005084 <half_sectionA>
						slalom_R90();	//一区画のパルス分デフォルトインターバルで走行
 8005cbc:	f7ff fcb4 	bl	8005628 <slalom_R90>
						half_sectionD();
 8005cc0:	f7ff fa00 	bl	80050c4 <half_sectionD>
					for(int i = 0; i < 8; i++){
 8005cc4:	68bb      	ldr	r3, [r7, #8]
 8005cc6:	3301      	adds	r3, #1
 8005cc8:	60bb      	str	r3, [r7, #8]
 8005cca:	68bb      	ldr	r3, [r7, #8]
 8005ccc:	2b07      	cmp	r3, #7
 8005cce:	ddf3      	ble.n	8005cb8 <slalom_test+0x13c>
					}
					break;
 8005cd0:	e027      	b.n	8005d22 <slalom_test+0x1a6>
				case 4:
					//----slalom左折----
					printf("slalom turn left .\n");
 8005cd2:	4819      	ldr	r0, [pc, #100]	; (8005d38 <slalom_test+0x1bc>)
 8005cd4:	f003 fffc 	bl	8009cd0 <puts>
					for(int i = 0; i < 8; i++){
 8005cd8:	2300      	movs	r3, #0
 8005cda:	607b      	str	r3, [r7, #4]
 8005cdc:	e00a      	b.n	8005cf4 <slalom_test+0x178>
						half_sectionA();
 8005cde:	f7ff f9d1 	bl	8005084 <half_sectionA>
						slalom_L90();				//16回右90度回転、つまり4周回転
 8005ce2:	f7ff fd7d 	bl	80057e0 <slalom_L90>
						half_sectionD();
 8005ce6:	f7ff f9ed 	bl	80050c4 <half_sectionD>
						rotate_180();				//8回右180度回転、つまり4周回転
 8005cea:	f7ff fbe9 	bl	80054c0 <rotate_180>
					for(int i = 0; i < 8; i++){
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	3301      	adds	r3, #1
 8005cf2:	607b      	str	r3, [r7, #4]
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	2b07      	cmp	r3, #7
 8005cf8:	ddf1      	ble.n	8005cde <slalom_test+0x162>
					}
					break;
 8005cfa:	e012      	b.n	8005d22 <slalom_test+0x1a6>
				case 5:
					//----4区画連続走行----
					printf("4 Section, Forward, Continuous.\n");
 8005cfc:	480f      	ldr	r0, [pc, #60]	; (8005d3c <slalom_test+0x1c0>)
 8005cfe:	f003 ffe7 	bl	8009cd0 <puts>
					half_sectionA();				//半区画のパルス分加速しながら走行
 8005d02:	f7ff f9bf 	bl	8005084 <half_sectionA>
					for(int i = 0; i < 4-1; i++){
 8005d06:	2300      	movs	r3, #0
 8005d08:	603b      	str	r3, [r7, #0]
 8005d0a:	e004      	b.n	8005d16 <slalom_test+0x19a>
						one_sectionU();			//一区画のパルス分等速走行
 8005d0c:	f7ff fa58 	bl	80051c0 <one_sectionU>
					for(int i = 0; i < 4-1; i++){
 8005d10:	683b      	ldr	r3, [r7, #0]
 8005d12:	3301      	adds	r3, #1
 8005d14:	603b      	str	r3, [r7, #0]
 8005d16:	683b      	ldr	r3, [r7, #0]
 8005d18:	2b02      	cmp	r3, #2
 8005d1a:	ddf7      	ble.n	8005d0c <slalom_test+0x190>
					}
					half_sectionD();				//半区画のパルス分減速しながら走行。走行後は停止する
 8005d1c:	f7ff f9d2 	bl	80050c4 <half_sectionD>
					break;
 8005d20:	bf00      	nop
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 8005d22:	e734      	b.n	8005b8e <slalom_test+0x12>
 8005d24:	0800aeb4 	.word	0x0800aeb4
 8005d28:	200009b8 	.word	0x200009b8
 8005d2c:	0800ae40 	.word	0x0800ae40
 8005d30:	40020000 	.word	0x40020000
 8005d34:	0800aed0 	.word	0x0800aed0
 8005d38:	0800aee4 	.word	0x0800aee4
 8005d3c:	0800ae94 	.word	0x0800ae94

08005d40 <test_select>:
		}
	}
}


void test_select(void){
 8005d40:	b580      	push	{r7, lr}
 8005d42:	b082      	sub	sp, #8
 8005d44:	af00      	add	r7, sp, #0
	int mode = 0;
 8005d46:	2300      	movs	r3, #0
 8005d48:	607b      	str	r3, [r7, #4]
	printf("Test Select, Mode : %d\n", mode);
 8005d4a:	6879      	ldr	r1, [r7, #4]
 8005d4c:	4836      	ldr	r0, [pc, #216]	; (8005e28 <test_select+0xe8>)
 8005d4e:	f003 ff4b 	bl	8009be8 <iprintf>

	while(1){
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	b2db      	uxtb	r3, r3
 8005d56:	f003 0301 	and.w	r3, r3, #1
 8005d5a:	b2d8      	uxtb	r0, r3
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	b2db      	uxtb	r3, r3
 8005d60:	f003 0302 	and.w	r3, r3, #2
 8005d64:	b2d9      	uxtb	r1, r3
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	b2db      	uxtb	r3, r3
 8005d6a:	f003 0304 	and.w	r3, r3, #4
 8005d6e:	b2db      	uxtb	r3, r3
 8005d70:	461a      	mov	r2, r3
 8005d72:	f002 fbb1 	bl	80084d8 <led_write>
		  if(dist_r >= 20){
 8005d76:	4b2d      	ldr	r3, [pc, #180]	; (8005e2c <test_select+0xec>)
 8005d78:	edd3 7a00 	vldr	s15, [r3]
 8005d7c:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8005d80:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005d84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d88:	db0f      	blt.n	8005daa <test_select+0x6a>
			  mode++;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	3301      	adds	r3, #1
 8005d8e:	607b      	str	r3, [r7, #4]
			  dist_r = 0;
 8005d90:	4b26      	ldr	r3, [pc, #152]	; (8005e2c <test_select+0xec>)
 8005d92:	f04f 0200 	mov.w	r2, #0
 8005d96:	601a      	str	r2, [r3, #0]
			  if(mode > 7){
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	2b07      	cmp	r3, #7
 8005d9c:	dd01      	ble.n	8005da2 <test_select+0x62>
				  mode = 0;
 8005d9e:	2300      	movs	r3, #0
 8005da0:	607b      	str	r3, [r7, #4]
			  }
			  printf("Mode : %d\n", mode);
 8005da2:	6879      	ldr	r1, [r7, #4]
 8005da4:	4822      	ldr	r0, [pc, #136]	; (8005e30 <test_select+0xf0>)
 8005da6:	f003 ff1f 	bl	8009be8 <iprintf>
			  //buzzer(pitagola2[mode-1][0], pitagola2[mode-1][1]);
			  //buzzer(pitagola[2][0], pitagola[2][1]);
		  }
		  if(dist_r <= -20){
 8005daa:	4b20      	ldr	r3, [pc, #128]	; (8005e2c <test_select+0xec>)
 8005dac:	edd3 7a00 	vldr	s15, [r3]
 8005db0:	eebb 7a04 	vmov.f32	s14, #180	; 0xc1a00000 -20.0
 8005db4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005db8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005dbc:	d80f      	bhi.n	8005dde <test_select+0x9e>
			  mode--;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	3b01      	subs	r3, #1
 8005dc2:	607b      	str	r3, [r7, #4]
			  dist_r = 0;
 8005dc4:	4b19      	ldr	r3, [pc, #100]	; (8005e2c <test_select+0xec>)
 8005dc6:	f04f 0200 	mov.w	r2, #0
 8005dca:	601a      	str	r2, [r3, #0]
			  if(mode < 0){
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	da01      	bge.n	8005dd6 <test_select+0x96>
				  mode = 7;
 8005dd2:	2307      	movs	r3, #7
 8005dd4:	607b      	str	r3, [r7, #4]
			  }
			  printf("Mode : %d\n", mode);
 8005dd6:	6879      	ldr	r1, [r7, #4]
 8005dd8:	4815      	ldr	r0, [pc, #84]	; (8005e30 <test_select+0xf0>)
 8005dda:	f003 ff05 	bl	8009be8 <iprintf>
			  //buzzer(pitagola2[mode-1][0], pitagola2[mode-1][1]);
			  //buzzer(pitagola[2][0], pitagola[2][1]);
		  }
		  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET){
 8005dde:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005de2:	4814      	ldr	r0, [pc, #80]	; (8005e34 <test_select+0xf4>)
 8005de4:	f7fc fa4e 	bl	8002284 <HAL_GPIO_ReadPin>
 8005de8:	4603      	mov	r3, r0
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d1b1      	bne.n	8005d52 <test_select+0x12>
			  HAL_Delay(50);
 8005dee:	2032      	movs	r0, #50	; 0x32
 8005df0:	f7fb f8ec 	bl	8000fcc <HAL_Delay>
			  while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET);
 8005df4:	bf00      	nop
 8005df6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005dfa:	480e      	ldr	r0, [pc, #56]	; (8005e34 <test_select+0xf4>)
 8005dfc:	f7fc fa42 	bl	8002284 <HAL_GPIO_ReadPin>
 8005e00:	4603      	mov	r3, r0
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d0f7      	beq.n	8005df6 <test_select+0xb6>
			  switch(mode){
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	2b02      	cmp	r3, #2
 8005e0a:	d006      	beq.n	8005e1a <test_select+0xda>
 8005e0c:	2b03      	cmp	r3, #3
 8005e0e:	d007      	beq.n	8005e20 <test_select+0xe0>
 8005e10:	2b01      	cmp	r3, #1
 8005e12:	d108      	bne.n	8005e26 <test_select+0xe6>
				case 1:
					init_test();
 8005e14:	f7ff fdbe 	bl	8005994 <init_test>
					break;
 8005e18:	e005      	b.n	8005e26 <test_select+0xe6>

				case 2:
					slalom_test();
 8005e1a:	f7ff feaf 	bl	8005b7c <slalom_test>
					break;
 8005e1e:	e002      	b.n	8005e26 <test_select+0xe6>

				case 3:
					sample_course_run();
 8005e20:	f000 f9e6 	bl	80061f0 <sample_course_run>
					break;
 8005e24:	bf00      	nop
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 8005e26:	e794      	b.n	8005d52 <test_select+0x12>
 8005e28:	0800aef8 	.word	0x0800aef8
 8005e2c:	200009b8 	.word	0x200009b8
 8005e30:	0800ae40 	.word	0x0800ae40
 8005e34:	40020000 	.word	0x40020000

08005e38 <simple_run>:
//simple_run
//a超新地走行モード
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void simple_run(void){
 8005e38:	b580      	push	{r7, lr}
 8005e3a:	b082      	sub	sp, #8
 8005e3c:	af00      	add	r7, sp, #0

	int mode = 0;
 8005e3e:	2300      	movs	r3, #0
 8005e40:	607b      	str	r3, [r7, #4]
	printf("Simple Run, Mode : %d\n", mode);
 8005e42:	6879      	ldr	r1, [r7, #4]
 8005e44:	4873      	ldr	r0, [pc, #460]	; (8006014 <simple_run+0x1dc>)
 8005e46:	f003 fecf 	bl	8009be8 <iprintf>

	while(1){

		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	b2db      	uxtb	r3, r3
 8005e4e:	f003 0301 	and.w	r3, r3, #1
 8005e52:	b2d8      	uxtb	r0, r3
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	b2db      	uxtb	r3, r3
 8005e58:	f003 0302 	and.w	r3, r3, #2
 8005e5c:	b2d9      	uxtb	r1, r3
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	b2db      	uxtb	r3, r3
 8005e62:	f003 0304 	and.w	r3, r3, #4
 8005e66:	b2db      	uxtb	r3, r3
 8005e68:	461a      	mov	r2, r3
 8005e6a:	f002 fb35 	bl	80084d8 <led_write>
		  if(dist_r >= 20){
 8005e6e:	4b6a      	ldr	r3, [pc, #424]	; (8006018 <simple_run+0x1e0>)
 8005e70:	edd3 7a00 	vldr	s15, [r3]
 8005e74:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8005e78:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005e7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e80:	db0f      	blt.n	8005ea2 <simple_run+0x6a>
			  mode++;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	3301      	adds	r3, #1
 8005e86:	607b      	str	r3, [r7, #4]
			  dist_r = 0;
 8005e88:	4b63      	ldr	r3, [pc, #396]	; (8006018 <simple_run+0x1e0>)
 8005e8a:	f04f 0200 	mov.w	r2, #0
 8005e8e:	601a      	str	r2, [r3, #0]
			  if(mode > 7){
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	2b07      	cmp	r3, #7
 8005e94:	dd01      	ble.n	8005e9a <simple_run+0x62>
				  mode = 0;
 8005e96:	2300      	movs	r3, #0
 8005e98:	607b      	str	r3, [r7, #4]
			  }
			  printf("Mode : %d\n", mode);
 8005e9a:	6879      	ldr	r1, [r7, #4]
 8005e9c:	485f      	ldr	r0, [pc, #380]	; (800601c <simple_run+0x1e4>)
 8005e9e:	f003 fea3 	bl	8009be8 <iprintf>
			  //buzzer(pitagola2[mode-1][0], pitagola2[mode-1][1]);
			  //buzzer(pitagola[2][0], pitagola[2][1]);
		  }
		  if(dist_r <= -20){
 8005ea2:	4b5d      	ldr	r3, [pc, #372]	; (8006018 <simple_run+0x1e0>)
 8005ea4:	edd3 7a00 	vldr	s15, [r3]
 8005ea8:	eebb 7a04 	vmov.f32	s14, #180	; 0xc1a00000 -20.0
 8005eac:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005eb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005eb4:	d80f      	bhi.n	8005ed6 <simple_run+0x9e>
			  mode--;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	3b01      	subs	r3, #1
 8005eba:	607b      	str	r3, [r7, #4]
			  dist_r = 0;
 8005ebc:	4b56      	ldr	r3, [pc, #344]	; (8006018 <simple_run+0x1e0>)
 8005ebe:	f04f 0200 	mov.w	r2, #0
 8005ec2:	601a      	str	r2, [r3, #0]
			  if(mode < 0){
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	da01      	bge.n	8005ece <simple_run+0x96>
				  mode = 7;
 8005eca:	2307      	movs	r3, #7
 8005ecc:	607b      	str	r3, [r7, #4]
			  }
			  printf("Mode : %d\n", mode);
 8005ece:	6879      	ldr	r1, [r7, #4]
 8005ed0:	4852      	ldr	r0, [pc, #328]	; (800601c <simple_run+0x1e4>)
 8005ed2:	f003 fe89 	bl	8009be8 <iprintf>
			  //buzzer(pitagola2[mode-1][0], pitagola2[mode-1][1]);
			  //buzzer(pitagola[2][0], pitagola[2][1]);
		  }
		  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET){
 8005ed6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005eda:	4851      	ldr	r0, [pc, #324]	; (8006020 <simple_run+0x1e8>)
 8005edc:	f7fc f9d2 	bl	8002284 <HAL_GPIO_ReadPin>
 8005ee0:	4603      	mov	r3, r0
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d1b1      	bne.n	8005e4a <simple_run+0x12>
			  HAL_Delay(50);
 8005ee6:	2032      	movs	r0, #50	; 0x32
 8005ee8:	f7fb f870 	bl	8000fcc <HAL_Delay>
			  while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET);
 8005eec:	bf00      	nop
 8005eee:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005ef2:	484b      	ldr	r0, [pc, #300]	; (8006020 <simple_run+0x1e8>)
 8005ef4:	f7fc f9c6 	bl	8002284 <HAL_GPIO_ReadPin>
 8005ef8:	4603      	mov	r3, r0
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d0f7      	beq.n	8005eee <simple_run+0xb6>
			  switch(mode){
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	2b07      	cmp	r3, #7
 8005f02:	d8a2      	bhi.n	8005e4a <simple_run+0x12>
 8005f04:	a201      	add	r2, pc, #4	; (adr r2, 8005f0c <simple_run+0xd4>)
 8005f06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f0a:	bf00      	nop
 8005f0c:	08005e4b 	.word	0x08005e4b
 8005f10:	08005f2d 	.word	0x08005f2d
 8005f14:	08005f79 	.word	0x08005f79
 8005f18:	08005fc5 	.word	0x08005fc5
 8005f1c:	08005e4b 	.word	0x08005e4b
 8005f20:	08005e4b 	.word	0x08005e4b
 8005f24:	08005e4b 	.word	0x08005e4b
 8005f28:	08005e4b 	.word	0x08005e4b

				case 0:
					break;
				case 1:
					//----a一次探索走行----
					printf("First Run.\n");
 8005f2c:	483d      	ldr	r0, [pc, #244]	; (8006024 <simple_run+0x1ec>)
 8005f2e:	f003 fecf 	bl	8009cd0 <puts>

					MF.FLAG.SCND = 0;
 8005f32:	4a3d      	ldr	r2, [pc, #244]	; (8006028 <simple_run+0x1f0>)
 8005f34:	8813      	ldrh	r3, [r2, #0]
 8005f36:	f36f 1304 	bfc	r3, #4, #1
 8005f3a:	8013      	strh	r3, [r2, #0]
					goal_x = GOAL_X;
 8005f3c:	4b3b      	ldr	r3, [pc, #236]	; (800602c <simple_run+0x1f4>)
 8005f3e:	2201      	movs	r2, #1
 8005f40:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 8005f42:	4b3b      	ldr	r3, [pc, #236]	; (8006030 <simple_run+0x1f8>)
 8005f44:	2200      	movs	r2, #0
 8005f46:	701a      	strb	r2, [r3, #0]

					get_base();
 8005f48:	f003 fa48 	bl	80093dc <get_base>

					searchA();
 8005f4c:	f002 fb22 	bl	8008594 <searchA>
					HAL_Delay(500);
 8005f50:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005f54:	f7fb f83a 	bl	8000fcc <HAL_Delay>

					goal_x = goal_y = 0;
 8005f58:	4b35      	ldr	r3, [pc, #212]	; (8006030 <simple_run+0x1f8>)
 8005f5a:	2200      	movs	r2, #0
 8005f5c:	701a      	strb	r2, [r3, #0]
 8005f5e:	4b34      	ldr	r3, [pc, #208]	; (8006030 <simple_run+0x1f8>)
 8005f60:	781a      	ldrb	r2, [r3, #0]
 8005f62:	4b32      	ldr	r3, [pc, #200]	; (800602c <simple_run+0x1f4>)
 8005f64:	701a      	strb	r2, [r3, #0]
					searchA();
 8005f66:	f002 fb15 	bl	8008594 <searchA>

					goal_x = GOAL_X;
 8005f6a:	4b30      	ldr	r3, [pc, #192]	; (800602c <simple_run+0x1f4>)
 8005f6c:	2201      	movs	r2, #1
 8005f6e:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 8005f70:	4b2f      	ldr	r3, [pc, #188]	; (8006030 <simple_run+0x1f8>)
 8005f72:	2200      	movs	r2, #0
 8005f74:	701a      	strb	r2, [r3, #0]

					break;
 8005f76:	e04b      	b.n	8006010 <simple_run+0x1d8>

				case 2:
					//----a一次探索連続走行----
					printf("First Run. (Continuous)\n");
 8005f78:	482e      	ldr	r0, [pc, #184]	; (8006034 <simple_run+0x1fc>)
 8005f7a:	f003 fea9 	bl	8009cd0 <puts>

					MF.FLAG.SCND = 0;
 8005f7e:	4a2a      	ldr	r2, [pc, #168]	; (8006028 <simple_run+0x1f0>)
 8005f80:	8813      	ldrh	r3, [r2, #0]
 8005f82:	f36f 1304 	bfc	r3, #4, #1
 8005f86:	8013      	strh	r3, [r2, #0]
					goal_x = GOAL_X;
 8005f88:	4b28      	ldr	r3, [pc, #160]	; (800602c <simple_run+0x1f4>)
 8005f8a:	2201      	movs	r2, #1
 8005f8c:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 8005f8e:	4b28      	ldr	r3, [pc, #160]	; (8006030 <simple_run+0x1f8>)
 8005f90:	2200      	movs	r2, #0
 8005f92:	701a      	strb	r2, [r3, #0]

					get_base();
 8005f94:	f003 fa22 	bl	80093dc <get_base>

					searchB();
 8005f98:	f002 fb74 	bl	8008684 <searchB>
					HAL_Delay(500);
 8005f9c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005fa0:	f7fb f814 	bl	8000fcc <HAL_Delay>

					goal_x = goal_y = 0;
 8005fa4:	4b22      	ldr	r3, [pc, #136]	; (8006030 <simple_run+0x1f8>)
 8005fa6:	2200      	movs	r2, #0
 8005fa8:	701a      	strb	r2, [r3, #0]
 8005faa:	4b21      	ldr	r3, [pc, #132]	; (8006030 <simple_run+0x1f8>)
 8005fac:	781a      	ldrb	r2, [r3, #0]
 8005fae:	4b1f      	ldr	r3, [pc, #124]	; (800602c <simple_run+0x1f4>)
 8005fb0:	701a      	strb	r2, [r3, #0]
					searchB();
 8005fb2:	f002 fb67 	bl	8008684 <searchB>

					goal_x = GOAL_X;
 8005fb6:	4b1d      	ldr	r3, [pc, #116]	; (800602c <simple_run+0x1f4>)
 8005fb8:	2201      	movs	r2, #1
 8005fba:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 8005fbc:	4b1c      	ldr	r3, [pc, #112]	; (8006030 <simple_run+0x1f8>)
 8005fbe:	2200      	movs	r2, #0
 8005fc0:	701a      	strb	r2, [r3, #0]

					break;
 8005fc2:	e025      	b.n	8006010 <simple_run+0x1d8>

				case 3:
					//----a二次探索走行----
					printf("Second Run. (Continuous)\n");
 8005fc4:	481c      	ldr	r0, [pc, #112]	; (8006038 <simple_run+0x200>)
 8005fc6:	f003 fe83 	bl	8009cd0 <puts>

					MF.FLAG.SCND = 1;
 8005fca:	4a17      	ldr	r2, [pc, #92]	; (8006028 <simple_run+0x1f0>)
 8005fcc:	8813      	ldrh	r3, [r2, #0]
 8005fce:	f043 0310 	orr.w	r3, r3, #16
 8005fd2:	8013      	strh	r3, [r2, #0]
					goal_x = GOAL_X;
 8005fd4:	4b15      	ldr	r3, [pc, #84]	; (800602c <simple_run+0x1f4>)
 8005fd6:	2201      	movs	r2, #1
 8005fd8:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 8005fda:	4b15      	ldr	r3, [pc, #84]	; (8006030 <simple_run+0x1f8>)
 8005fdc:	2200      	movs	r2, #0
 8005fde:	701a      	strb	r2, [r3, #0]

					get_base();
 8005fe0:	f003 f9fc 	bl	80093dc <get_base>

					searchB();
 8005fe4:	f002 fb4e 	bl	8008684 <searchB>
					HAL_Delay(500);
 8005fe8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005fec:	f7fa ffee 	bl	8000fcc <HAL_Delay>

					goal_x = goal_y = 0;
 8005ff0:	4b0f      	ldr	r3, [pc, #60]	; (8006030 <simple_run+0x1f8>)
 8005ff2:	2200      	movs	r2, #0
 8005ff4:	701a      	strb	r2, [r3, #0]
 8005ff6:	4b0e      	ldr	r3, [pc, #56]	; (8006030 <simple_run+0x1f8>)
 8005ff8:	781a      	ldrb	r2, [r3, #0]
 8005ffa:	4b0c      	ldr	r3, [pc, #48]	; (800602c <simple_run+0x1f4>)
 8005ffc:	701a      	strb	r2, [r3, #0]
					searchB();
 8005ffe:	f002 fb41 	bl	8008684 <searchB>

					goal_x = GOAL_X;
 8006002:	4b0a      	ldr	r3, [pc, #40]	; (800602c <simple_run+0x1f4>)
 8006004:	2201      	movs	r2, #1
 8006006:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 8006008:	4b09      	ldr	r3, [pc, #36]	; (8006030 <simple_run+0x1f8>)
 800600a:	2200      	movs	r2, #0
 800600c:	701a      	strb	r2, [r3, #0]

					break;
 800600e:	bf00      	nop
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 8006010:	e71b      	b.n	8005e4a <simple_run+0x12>
 8006012:	bf00      	nop
 8006014:	0800af10 	.word	0x0800af10
 8006018:	200009b8 	.word	0x200009b8
 800601c:	0800ae40 	.word	0x0800ae40
 8006020:	40020000 	.word	0x40020000
 8006024:	0800af28 	.word	0x0800af28
 8006028:	20000e18 	.word	0x20000e18
 800602c:	20000a70 	.word	0x20000a70
 8006030:	20000a14 	.word	0x20000a14
 8006034:	0800af34 	.word	0x0800af34
 8006038:	0800af4c 	.word	0x0800af4c

0800603c <slalom_run>:
//slalom_run
//aスラローム走行モード
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void slalom_run(void){
 800603c:	b580      	push	{r7, lr}
 800603e:	b082      	sub	sp, #8
 8006040:	af00      	add	r7, sp, #0

	int mode = 0;
 8006042:	2300      	movs	r3, #0
 8006044:	607b      	str	r3, [r7, #4]
	printf("Slalom Run, Mode : %d\n", mode);
 8006046:	6879      	ldr	r1, [r7, #4]
 8006048:	4860      	ldr	r0, [pc, #384]	; (80061cc <slalom_run+0x190>)
 800604a:	f003 fdcd 	bl	8009be8 <iprintf>

	while(1){
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	b2db      	uxtb	r3, r3
 8006052:	f003 0301 	and.w	r3, r3, #1
 8006056:	b2d8      	uxtb	r0, r3
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	b2db      	uxtb	r3, r3
 800605c:	f003 0302 	and.w	r3, r3, #2
 8006060:	b2d9      	uxtb	r1, r3
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	b2db      	uxtb	r3, r3
 8006066:	f003 0304 	and.w	r3, r3, #4
 800606a:	b2db      	uxtb	r3, r3
 800606c:	461a      	mov	r2, r3
 800606e:	f002 fa33 	bl	80084d8 <led_write>
		  if(dist_r >= 20){
 8006072:	4b57      	ldr	r3, [pc, #348]	; (80061d0 <slalom_run+0x194>)
 8006074:	edd3 7a00 	vldr	s15, [r3]
 8006078:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 800607c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006080:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006084:	db0f      	blt.n	80060a6 <slalom_run+0x6a>
			  mode++;
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	3301      	adds	r3, #1
 800608a:	607b      	str	r3, [r7, #4]
			  dist_r = 0;
 800608c:	4b50      	ldr	r3, [pc, #320]	; (80061d0 <slalom_run+0x194>)
 800608e:	f04f 0200 	mov.w	r2, #0
 8006092:	601a      	str	r2, [r3, #0]
			  if(mode > 7){
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	2b07      	cmp	r3, #7
 8006098:	dd01      	ble.n	800609e <slalom_run+0x62>
				  mode = 0;
 800609a:	2300      	movs	r3, #0
 800609c:	607b      	str	r3, [r7, #4]
			  }
			  printf("Mode : %d\n", mode);
 800609e:	6879      	ldr	r1, [r7, #4]
 80060a0:	484c      	ldr	r0, [pc, #304]	; (80061d4 <slalom_run+0x198>)
 80060a2:	f003 fda1 	bl	8009be8 <iprintf>
			  //buzzer(pitagola2[mode-1][0], pitagola2[mode-1][1]);
			  //buzzer(pitagola[2][0], pitagola[2][1]);
		  }
		  if(dist_r <= -20){
 80060a6:	4b4a      	ldr	r3, [pc, #296]	; (80061d0 <slalom_run+0x194>)
 80060a8:	edd3 7a00 	vldr	s15, [r3]
 80060ac:	eebb 7a04 	vmov.f32	s14, #180	; 0xc1a00000 -20.0
 80060b0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80060b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80060b8:	d80f      	bhi.n	80060da <slalom_run+0x9e>
			  mode--;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	3b01      	subs	r3, #1
 80060be:	607b      	str	r3, [r7, #4]
			  dist_r = 0;
 80060c0:	4b43      	ldr	r3, [pc, #268]	; (80061d0 <slalom_run+0x194>)
 80060c2:	f04f 0200 	mov.w	r2, #0
 80060c6:	601a      	str	r2, [r3, #0]
			  if(mode < 0){
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	da01      	bge.n	80060d2 <slalom_run+0x96>
				  mode = 7;
 80060ce:	2307      	movs	r3, #7
 80060d0:	607b      	str	r3, [r7, #4]
			  }
			  printf("Mode : %d\n", mode);
 80060d2:	6879      	ldr	r1, [r7, #4]
 80060d4:	483f      	ldr	r0, [pc, #252]	; (80061d4 <slalom_run+0x198>)
 80060d6:	f003 fd87 	bl	8009be8 <iprintf>
			  //buzzer(pitagola2[mode-1][0], pitagola2[mode-1][1]);
			  //buzzer(pitagola[2][0], pitagola[2][1]);
		  }
		  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET){
 80060da:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80060de:	483e      	ldr	r0, [pc, #248]	; (80061d8 <slalom_run+0x19c>)
 80060e0:	f7fc f8d0 	bl	8002284 <HAL_GPIO_ReadPin>
 80060e4:	4603      	mov	r3, r0
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d1b1      	bne.n	800604e <slalom_run+0x12>
			  HAL_Delay(50);
 80060ea:	2032      	movs	r0, #50	; 0x32
 80060ec:	f7fa ff6e 	bl	8000fcc <HAL_Delay>
			  while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET);
 80060f0:	bf00      	nop
 80060f2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80060f6:	4838      	ldr	r0, [pc, #224]	; (80061d8 <slalom_run+0x19c>)
 80060f8:	f7fc f8c4 	bl	8002284 <HAL_GPIO_ReadPin>
 80060fc:	4603      	mov	r3, r0
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d0f7      	beq.n	80060f2 <slalom_run+0xb6>
			  switch(mode){
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	2b07      	cmp	r3, #7
 8006106:	d8a2      	bhi.n	800604e <slalom_run+0x12>
 8006108:	a201      	add	r2, pc, #4	; (adr r2, 8006110 <slalom_run+0xd4>)
 800610a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800610e:	bf00      	nop
 8006110:	0800604f 	.word	0x0800604f
 8006114:	08006131 	.word	0x08006131
 8006118:	0800617d 	.word	0x0800617d
 800611c:	0800604f 	.word	0x0800604f
 8006120:	0800604f 	.word	0x0800604f
 8006124:	0800604f 	.word	0x0800604f
 8006128:	0800604f 	.word	0x0800604f
 800612c:	0800604f 	.word	0x0800604f
				case 0:
					break;

				case 1:
					//----a一次探索スラローム走行----
					printf("First Run. (Slalom)\n");
 8006130:	482a      	ldr	r0, [pc, #168]	; (80061dc <slalom_run+0x1a0>)
 8006132:	f003 fdcd 	bl	8009cd0 <puts>

					MF.FLAG.SCND = 0;
 8006136:	4a2a      	ldr	r2, [pc, #168]	; (80061e0 <slalom_run+0x1a4>)
 8006138:	8813      	ldrh	r3, [r2, #0]
 800613a:	f36f 1304 	bfc	r3, #4, #1
 800613e:	8013      	strh	r3, [r2, #0]
					goal_x = GOAL_X;
 8006140:	4b28      	ldr	r3, [pc, #160]	; (80061e4 <slalom_run+0x1a8>)
 8006142:	2201      	movs	r2, #1
 8006144:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 8006146:	4b28      	ldr	r3, [pc, #160]	; (80061e8 <slalom_run+0x1ac>)
 8006148:	2200      	movs	r2, #0
 800614a:	701a      	strb	r2, [r3, #0]

					get_base();
 800614c:	f003 f946 	bl	80093dc <get_base>

					searchC();
 8006150:	f002 fb1a 	bl	8008788 <searchC>
					HAL_Delay(500);
 8006154:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006158:	f7fa ff38 	bl	8000fcc <HAL_Delay>

					goal_x = goal_y = 0;
 800615c:	4b22      	ldr	r3, [pc, #136]	; (80061e8 <slalom_run+0x1ac>)
 800615e:	2200      	movs	r2, #0
 8006160:	701a      	strb	r2, [r3, #0]
 8006162:	4b21      	ldr	r3, [pc, #132]	; (80061e8 <slalom_run+0x1ac>)
 8006164:	781a      	ldrb	r2, [r3, #0]
 8006166:	4b1f      	ldr	r3, [pc, #124]	; (80061e4 <slalom_run+0x1a8>)
 8006168:	701a      	strb	r2, [r3, #0]
					searchC();
 800616a:	f002 fb0d 	bl	8008788 <searchC>

					goal_x = GOAL_X;
 800616e:	4b1d      	ldr	r3, [pc, #116]	; (80061e4 <slalom_run+0x1a8>)
 8006170:	2201      	movs	r2, #1
 8006172:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 8006174:	4b1c      	ldr	r3, [pc, #112]	; (80061e8 <slalom_run+0x1ac>)
 8006176:	2200      	movs	r2, #0
 8006178:	701a      	strb	r2, [r3, #0]
					break;
 800617a:	e025      	b.n	80061c8 <slalom_run+0x18c>

				case 2:
					//---a二次探索スラローム走行----
					printf("Second Run. (Slalom)\n");
 800617c:	481b      	ldr	r0, [pc, #108]	; (80061ec <slalom_run+0x1b0>)
 800617e:	f003 fda7 	bl	8009cd0 <puts>

					MF.FLAG.SCND = 1;
 8006182:	4a17      	ldr	r2, [pc, #92]	; (80061e0 <slalom_run+0x1a4>)
 8006184:	8813      	ldrh	r3, [r2, #0]
 8006186:	f043 0310 	orr.w	r3, r3, #16
 800618a:	8013      	strh	r3, [r2, #0]
					goal_x = GOAL_X;
 800618c:	4b15      	ldr	r3, [pc, #84]	; (80061e4 <slalom_run+0x1a8>)
 800618e:	2201      	movs	r2, #1
 8006190:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 8006192:	4b15      	ldr	r3, [pc, #84]	; (80061e8 <slalom_run+0x1ac>)
 8006194:	2200      	movs	r2, #0
 8006196:	701a      	strb	r2, [r3, #0]

					get_base();
 8006198:	f003 f920 	bl	80093dc <get_base>

					searchC();
 800619c:	f002 faf4 	bl	8008788 <searchC>
					HAL_Delay(500);
 80061a0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80061a4:	f7fa ff12 	bl	8000fcc <HAL_Delay>

					goal_x = goal_y = 0;
 80061a8:	4b0f      	ldr	r3, [pc, #60]	; (80061e8 <slalom_run+0x1ac>)
 80061aa:	2200      	movs	r2, #0
 80061ac:	701a      	strb	r2, [r3, #0]
 80061ae:	4b0e      	ldr	r3, [pc, #56]	; (80061e8 <slalom_run+0x1ac>)
 80061b0:	781a      	ldrb	r2, [r3, #0]
 80061b2:	4b0c      	ldr	r3, [pc, #48]	; (80061e4 <slalom_run+0x1a8>)
 80061b4:	701a      	strb	r2, [r3, #0]
					searchC();
 80061b6:	f002 fae7 	bl	8008788 <searchC>

					goal_x = GOAL_X;
 80061ba:	4b0a      	ldr	r3, [pc, #40]	; (80061e4 <slalom_run+0x1a8>)
 80061bc:	2201      	movs	r2, #1
 80061be:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 80061c0:	4b09      	ldr	r3, [pc, #36]	; (80061e8 <slalom_run+0x1ac>)
 80061c2:	2200      	movs	r2, #0
 80061c4:	701a      	strb	r2, [r3, #0]
					break;
 80061c6:	bf00      	nop
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 80061c8:	e741      	b.n	800604e <slalom_run+0x12>
 80061ca:	bf00      	nop
 80061cc:	0800af68 	.word	0x0800af68
 80061d0:	200009b8 	.word	0x200009b8
 80061d4:	0800ae40 	.word	0x0800ae40
 80061d8:	40020000 	.word	0x40020000
 80061dc:	0800af80 	.word	0x0800af80
 80061e0:	20000e18 	.word	0x20000e18
 80061e4:	20000a70 	.word	0x20000a70
 80061e8:	20000a14 	.word	0x20000a14
 80061ec:	0800af94 	.word	0x0800af94

080061f0 <sample_course_run>:
//sample_course_run
//a試験走行モード
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void sample_course_run(void){
 80061f0:	b580      	push	{r7, lr}
 80061f2:	b082      	sub	sp, #8
 80061f4:	af00      	add	r7, sp, #0

	int mode = 0;
 80061f6:	2300      	movs	r3, #0
 80061f8:	607b      	str	r3, [r7, #4]
	printf("Sample Course Run, Mode : %d\n", mode);
 80061fa:	6879      	ldr	r1, [r7, #4]
 80061fc:	4857      	ldr	r0, [pc, #348]	; (800635c <sample_course_run+0x16c>)
 80061fe:	f003 fcf3 	bl	8009be8 <iprintf>

	while(1){
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	b2db      	uxtb	r3, r3
 8006206:	f003 0301 	and.w	r3, r3, #1
 800620a:	b2d8      	uxtb	r0, r3
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	b2db      	uxtb	r3, r3
 8006210:	f003 0302 	and.w	r3, r3, #2
 8006214:	b2d9      	uxtb	r1, r3
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	b2db      	uxtb	r3, r3
 800621a:	f003 0304 	and.w	r3, r3, #4
 800621e:	b2db      	uxtb	r3, r3
 8006220:	461a      	mov	r2, r3
 8006222:	f002 f959 	bl	80084d8 <led_write>
		  if(dist_r >= 20){
 8006226:	4b4e      	ldr	r3, [pc, #312]	; (8006360 <sample_course_run+0x170>)
 8006228:	edd3 7a00 	vldr	s15, [r3]
 800622c:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8006230:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006234:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006238:	db0f      	blt.n	800625a <sample_course_run+0x6a>
			  mode++;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	3301      	adds	r3, #1
 800623e:	607b      	str	r3, [r7, #4]
			  dist_r = 0;
 8006240:	4b47      	ldr	r3, [pc, #284]	; (8006360 <sample_course_run+0x170>)
 8006242:	f04f 0200 	mov.w	r2, #0
 8006246:	601a      	str	r2, [r3, #0]
			  if(mode > 7){
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	2b07      	cmp	r3, #7
 800624c:	dd01      	ble.n	8006252 <sample_course_run+0x62>
				  mode = 0;
 800624e:	2300      	movs	r3, #0
 8006250:	607b      	str	r3, [r7, #4]
			  }
			  printf("Mode : %d\n", mode);
 8006252:	6879      	ldr	r1, [r7, #4]
 8006254:	4843      	ldr	r0, [pc, #268]	; (8006364 <sample_course_run+0x174>)
 8006256:	f003 fcc7 	bl	8009be8 <iprintf>
			  //buzzer(pitagola2[mode-1][0], pitagola2[mode-1][1]);
			  //buzzer(pitagola[2][0], pitagola[2][1]);
		  }
		  if(dist_r <= -20){
 800625a:	4b41      	ldr	r3, [pc, #260]	; (8006360 <sample_course_run+0x170>)
 800625c:	edd3 7a00 	vldr	s15, [r3]
 8006260:	eebb 7a04 	vmov.f32	s14, #180	; 0xc1a00000 -20.0
 8006264:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006268:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800626c:	d80f      	bhi.n	800628e <sample_course_run+0x9e>
			  mode--;
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	3b01      	subs	r3, #1
 8006272:	607b      	str	r3, [r7, #4]
			  dist_r = 0;
 8006274:	4b3a      	ldr	r3, [pc, #232]	; (8006360 <sample_course_run+0x170>)
 8006276:	f04f 0200 	mov.w	r2, #0
 800627a:	601a      	str	r2, [r3, #0]
			  if(mode < 0){
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	2b00      	cmp	r3, #0
 8006280:	da01      	bge.n	8006286 <sample_course_run+0x96>
				  mode = 7;
 8006282:	2307      	movs	r3, #7
 8006284:	607b      	str	r3, [r7, #4]
			  }
			  printf("Mode : %d\n", mode);
 8006286:	6879      	ldr	r1, [r7, #4]
 8006288:	4836      	ldr	r0, [pc, #216]	; (8006364 <sample_course_run+0x174>)
 800628a:	f003 fcad 	bl	8009be8 <iprintf>
			  //buzzer(pitagola2[mode-1][0], pitagola2[mode-1][1]);
			  //buzzer(pitagola[2][0], pitagola[2][1]);
		  }
		  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET){
 800628e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006292:	4835      	ldr	r0, [pc, #212]	; (8006368 <sample_course_run+0x178>)
 8006294:	f7fb fff6 	bl	8002284 <HAL_GPIO_ReadPin>
 8006298:	4603      	mov	r3, r0
 800629a:	2b00      	cmp	r3, #0
 800629c:	d1b1      	bne.n	8006202 <sample_course_run+0x12>
			  HAL_Delay(50);
 800629e:	2032      	movs	r0, #50	; 0x32
 80062a0:	f7fa fe94 	bl	8000fcc <HAL_Delay>
			  while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET);
 80062a4:	bf00      	nop
 80062a6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80062aa:	482f      	ldr	r0, [pc, #188]	; (8006368 <sample_course_run+0x178>)
 80062ac:	f7fb ffea 	bl	8002284 <HAL_GPIO_ReadPin>
 80062b0:	4603      	mov	r3, r0
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d0f7      	beq.n	80062a6 <sample_course_run+0xb6>
			  switch(mode){
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	2b07      	cmp	r3, #7
 80062ba:	d8a2      	bhi.n	8006202 <sample_course_run+0x12>
 80062bc:	a201      	add	r2, pc, #4	; (adr r2, 80062c4 <sample_course_run+0xd4>)
 80062be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062c2:	bf00      	nop
 80062c4:	08006203 	.word	0x08006203
 80062c8:	080062e5 	.word	0x080062e5
 80062cc:	08006317 	.word	0x08006317
 80062d0:	08006349 	.word	0x08006349
 80062d4:	08006203 	.word	0x08006203
 80062d8:	08006203 	.word	0x08006203
 80062dc:	08006203 	.word	0x08006203
 80062e0:	08006203 	.word	0x08006203
				case 0:
					break;

				case 1:
					//----aサンプルコース1　超信地----
					half_sectionA();
 80062e4:	f7fe fece 	bl	8005084 <half_sectionA>
					half_sectionD();
 80062e8:	f7fe feec 	bl	80050c4 <half_sectionD>
					rotate_R90();
 80062ec:	f7fe ff80 	bl	80051f0 <rotate_R90>
					HAL_Delay(1000);
 80062f0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80062f4:	f7fa fe6a 	bl	8000fcc <HAL_Delay>
					half_sectionA();
 80062f8:	f7fe fec4 	bl	8005084 <half_sectionA>
					half_sectionD();
 80062fc:	f7fe fee2 	bl	80050c4 <half_sectionD>
					rotate_R90();
 8006300:	f7fe ff76 	bl	80051f0 <rotate_R90>
					HAL_Delay(1000);
 8006304:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006308:	f7fa fe60 	bl	8000fcc <HAL_Delay>
					half_sectionA();
 800630c:	f7fe feba 	bl	8005084 <half_sectionA>
					half_sectionD();
 8006310:	f7fe fed8 	bl	80050c4 <half_sectionD>
					break;
 8006314:	e021      	b.n	800635a <sample_course_run+0x16a>

				case 2:
					//----aサンプルコース1　超信地----
					half_sectionA();
 8006316:	f7fe feb5 	bl	8005084 <half_sectionA>
					half_sectionD();
 800631a:	f7fe fed3 	bl	80050c4 <half_sectionD>
					rotate_L90();
 800631e:	f7ff f81b 	bl	8005358 <rotate_L90>
					HAL_Delay(1000);
 8006322:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006326:	f7fa fe51 	bl	8000fcc <HAL_Delay>
					half_sectionA();
 800632a:	f7fe feab 	bl	8005084 <half_sectionA>
					half_sectionD();
 800632e:	f7fe fec9 	bl	80050c4 <half_sectionD>
					rotate_L90();
 8006332:	f7ff f811 	bl	8005358 <rotate_L90>
					HAL_Delay(1000);
 8006336:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800633a:	f7fa fe47 	bl	8000fcc <HAL_Delay>
					half_sectionA();
 800633e:	f7fe fea1 	bl	8005084 <half_sectionA>
					half_sectionD();
 8006342:	f7fe febf 	bl	80050c4 <half_sectionD>
					break;
 8006346:	e008      	b.n	800635a <sample_course_run+0x16a>

				case 3:
					//---aサンプルコース2　スラローム----
					half_sectionA();
 8006348:	f7fe fe9c 	bl	8005084 <half_sectionA>
					slalom_R90();
 800634c:	f7ff f96c 	bl	8005628 <slalom_R90>
					slalom_R90();
 8006350:	f7ff f96a 	bl	8005628 <slalom_R90>
					half_sectionD();
 8006354:	f7fe feb6 	bl	80050c4 <half_sectionD>
					break;
 8006358:	bf00      	nop
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 800635a:	e752      	b.n	8006202 <sample_course_run+0x12>
 800635c:	0800afac 	.word	0x0800afac
 8006360:	200009b8 	.word	0x200009b8
 8006364:	0800ae40 	.word	0x0800ae40
 8006368:	40020000 	.word	0x40020000

0800636c <perfect_run>:
//perfect_run
//a本番用走行モード
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void perfect_run(void){
 800636c:	b580      	push	{r7, lr}
 800636e:	b082      	sub	sp, #8
 8006370:	af00      	add	r7, sp, #0

	int mode = 0;
 8006372:	2300      	movs	r3, #0
 8006374:	607b      	str	r3, [r7, #4]
	printf("Perfect Run, Mode : %d\n", mode);
 8006376:	6879      	ldr	r1, [r7, #4]
 8006378:	4887      	ldr	r0, [pc, #540]	; (8006598 <perfect_run+0x22c>)
 800637a:	f003 fc35 	bl	8009be8 <iprintf>

	while(1){
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	b2db      	uxtb	r3, r3
 8006382:	f003 0301 	and.w	r3, r3, #1
 8006386:	b2d8      	uxtb	r0, r3
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	b2db      	uxtb	r3, r3
 800638c:	f003 0302 	and.w	r3, r3, #2
 8006390:	b2d9      	uxtb	r1, r3
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	b2db      	uxtb	r3, r3
 8006396:	f003 0304 	and.w	r3, r3, #4
 800639a:	b2db      	uxtb	r3, r3
 800639c:	461a      	mov	r2, r3
 800639e:	f002 f89b 	bl	80084d8 <led_write>
		  if(dist_r >= 20){
 80063a2:	4b7e      	ldr	r3, [pc, #504]	; (800659c <perfect_run+0x230>)
 80063a4:	edd3 7a00 	vldr	s15, [r3]
 80063a8:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 80063ac:	eef4 7ac7 	vcmpe.f32	s15, s14
 80063b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80063b4:	db0f      	blt.n	80063d6 <perfect_run+0x6a>
			  mode++;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	3301      	adds	r3, #1
 80063ba:	607b      	str	r3, [r7, #4]
			  dist_r = 0;
 80063bc:	4b77      	ldr	r3, [pc, #476]	; (800659c <perfect_run+0x230>)
 80063be:	f04f 0200 	mov.w	r2, #0
 80063c2:	601a      	str	r2, [r3, #0]
			  if(mode > 7){
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	2b07      	cmp	r3, #7
 80063c8:	dd01      	ble.n	80063ce <perfect_run+0x62>
				  mode = 0;
 80063ca:	2300      	movs	r3, #0
 80063cc:	607b      	str	r3, [r7, #4]
			  }
			  printf("Mode : %d\n", mode);
 80063ce:	6879      	ldr	r1, [r7, #4]
 80063d0:	4873      	ldr	r0, [pc, #460]	; (80065a0 <perfect_run+0x234>)
 80063d2:	f003 fc09 	bl	8009be8 <iprintf>
			  //buzzer(pitagola2[mode-1][0], pitagola2[mode-1][1]);
			  //buzzer(pitagola[2][0], pitagola[2][1]);
		  }
		  if(dist_r <= -20){
 80063d6:	4b71      	ldr	r3, [pc, #452]	; (800659c <perfect_run+0x230>)
 80063d8:	edd3 7a00 	vldr	s15, [r3]
 80063dc:	eebb 7a04 	vmov.f32	s14, #180	; 0xc1a00000 -20.0
 80063e0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80063e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80063e8:	d80f      	bhi.n	800640a <perfect_run+0x9e>
			  mode--;
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	3b01      	subs	r3, #1
 80063ee:	607b      	str	r3, [r7, #4]
			  dist_r = 0;
 80063f0:	4b6a      	ldr	r3, [pc, #424]	; (800659c <perfect_run+0x230>)
 80063f2:	f04f 0200 	mov.w	r2, #0
 80063f6:	601a      	str	r2, [r3, #0]
			  if(mode < 0){
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	da01      	bge.n	8006402 <perfect_run+0x96>
				  mode = 7;
 80063fe:	2307      	movs	r3, #7
 8006400:	607b      	str	r3, [r7, #4]
			  }
			  printf("Mode : %d\n", mode);
 8006402:	6879      	ldr	r1, [r7, #4]
 8006404:	4866      	ldr	r0, [pc, #408]	; (80065a0 <perfect_run+0x234>)
 8006406:	f003 fbef 	bl	8009be8 <iprintf>
			  //buzzer(pitagola2[mode-1][0], pitagola2[mode-1][1]);
			  //buzzer(pitagola[2][0], pitagola[2][1]);
		  }
		  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET){
 800640a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800640e:	4865      	ldr	r0, [pc, #404]	; (80065a4 <perfect_run+0x238>)
 8006410:	f7fb ff38 	bl	8002284 <HAL_GPIO_ReadPin>
 8006414:	4603      	mov	r3, r0
 8006416:	2b00      	cmp	r3, #0
 8006418:	d1b1      	bne.n	800637e <perfect_run+0x12>
			  HAL_Delay(50);
 800641a:	2032      	movs	r0, #50	; 0x32
 800641c:	f7fa fdd6 	bl	8000fcc <HAL_Delay>
			  while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET);
 8006420:	bf00      	nop
 8006422:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006426:	485f      	ldr	r0, [pc, #380]	; (80065a4 <perfect_run+0x238>)
 8006428:	f7fb ff2c 	bl	8002284 <HAL_GPIO_ReadPin>
 800642c:	4603      	mov	r3, r0
 800642e:	2b00      	cmp	r3, #0
 8006430:	d0f7      	beq.n	8006422 <perfect_run+0xb6>
			  switch(mode){
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	2b07      	cmp	r3, #7
 8006436:	d8a2      	bhi.n	800637e <perfect_run+0x12>
 8006438:	a201      	add	r2, pc, #4	; (adr r2, 8006440 <perfect_run+0xd4>)
 800643a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800643e:	bf00      	nop
 8006440:	0800637f 	.word	0x0800637f
 8006444:	08006461 	.word	0x08006461
 8006448:	080064ad 	.word	0x080064ad
 800644c:	080064f9 	.word	0x080064f9
 8006450:	08006545 	.word	0x08006545
 8006454:	0800637f 	.word	0x0800637f
 8006458:	0800637f 	.word	0x0800637f
 800645c:	08006591 	.word	0x08006591
				case 0:
					break;

				case 1:
					//----a一次探索連続走行----
					printf("First Run. (Continuous)\n");
 8006460:	4851      	ldr	r0, [pc, #324]	; (80065a8 <perfect_run+0x23c>)
 8006462:	f003 fc35 	bl	8009cd0 <puts>

					MF.FLAG.SCND = 0;
 8006466:	4a51      	ldr	r2, [pc, #324]	; (80065ac <perfect_run+0x240>)
 8006468:	8813      	ldrh	r3, [r2, #0]
 800646a:	f36f 1304 	bfc	r3, #4, #1
 800646e:	8013      	strh	r3, [r2, #0]
					goal_x = 7;
 8006470:	4b4f      	ldr	r3, [pc, #316]	; (80065b0 <perfect_run+0x244>)
 8006472:	2207      	movs	r2, #7
 8006474:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 8006476:	4b4f      	ldr	r3, [pc, #316]	; (80065b4 <perfect_run+0x248>)
 8006478:	2207      	movs	r2, #7
 800647a:	701a      	strb	r2, [r3, #0]

					get_base();
 800647c:	f002 ffae 	bl	80093dc <get_base>

					searchB();
 8006480:	f002 f900 	bl	8008684 <searchB>
					HAL_Delay(500);
 8006484:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006488:	f7fa fda0 	bl	8000fcc <HAL_Delay>

					goal_x = goal_y = 0;
 800648c:	4b49      	ldr	r3, [pc, #292]	; (80065b4 <perfect_run+0x248>)
 800648e:	2200      	movs	r2, #0
 8006490:	701a      	strb	r2, [r3, #0]
 8006492:	4b48      	ldr	r3, [pc, #288]	; (80065b4 <perfect_run+0x248>)
 8006494:	781a      	ldrb	r2, [r3, #0]
 8006496:	4b46      	ldr	r3, [pc, #280]	; (80065b0 <perfect_run+0x244>)
 8006498:	701a      	strb	r2, [r3, #0]
					searchB();
 800649a:	f002 f8f3 	bl	8008684 <searchB>

					goal_x = 7;
 800649e:	4b44      	ldr	r3, [pc, #272]	; (80065b0 <perfect_run+0x244>)
 80064a0:	2207      	movs	r2, #7
 80064a2:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 80064a4:	4b43      	ldr	r3, [pc, #268]	; (80065b4 <perfect_run+0x248>)
 80064a6:	2207      	movs	r2, #7
 80064a8:	701a      	strb	r2, [r3, #0]

					break;
 80064aa:	e074      	b.n	8006596 <perfect_run+0x22a>

				case 2:
					//----a二次探索走行----
					printf("Second Run. (Continuous)\n");
 80064ac:	4842      	ldr	r0, [pc, #264]	; (80065b8 <perfect_run+0x24c>)
 80064ae:	f003 fc0f 	bl	8009cd0 <puts>

					MF.FLAG.SCND = 1;
 80064b2:	4a3e      	ldr	r2, [pc, #248]	; (80065ac <perfect_run+0x240>)
 80064b4:	8813      	ldrh	r3, [r2, #0]
 80064b6:	f043 0310 	orr.w	r3, r3, #16
 80064ba:	8013      	strh	r3, [r2, #0]
					goal_x = 7;
 80064bc:	4b3c      	ldr	r3, [pc, #240]	; (80065b0 <perfect_run+0x244>)
 80064be:	2207      	movs	r2, #7
 80064c0:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 80064c2:	4b3c      	ldr	r3, [pc, #240]	; (80065b4 <perfect_run+0x248>)
 80064c4:	2207      	movs	r2, #7
 80064c6:	701a      	strb	r2, [r3, #0]

					get_base();
 80064c8:	f002 ff88 	bl	80093dc <get_base>

					searchB();
 80064cc:	f002 f8da 	bl	8008684 <searchB>
					HAL_Delay(500);
 80064d0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80064d4:	f7fa fd7a 	bl	8000fcc <HAL_Delay>

					goal_x = goal_y = 0;
 80064d8:	4b36      	ldr	r3, [pc, #216]	; (80065b4 <perfect_run+0x248>)
 80064da:	2200      	movs	r2, #0
 80064dc:	701a      	strb	r2, [r3, #0]
 80064de:	4b35      	ldr	r3, [pc, #212]	; (80065b4 <perfect_run+0x248>)
 80064e0:	781a      	ldrb	r2, [r3, #0]
 80064e2:	4b33      	ldr	r3, [pc, #204]	; (80065b0 <perfect_run+0x244>)
 80064e4:	701a      	strb	r2, [r3, #0]
					searchB();
 80064e6:	f002 f8cd 	bl	8008684 <searchB>

					goal_x = 7;
 80064ea:	4b31      	ldr	r3, [pc, #196]	; (80065b0 <perfect_run+0x244>)
 80064ec:	2207      	movs	r2, #7
 80064ee:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 80064f0:	4b30      	ldr	r3, [pc, #192]	; (80065b4 <perfect_run+0x248>)
 80064f2:	2207      	movs	r2, #7
 80064f4:	701a      	strb	r2, [r3, #0]

					break;
 80064f6:	e04e      	b.n	8006596 <perfect_run+0x22a>

				case 3:
					//----a一次探索スラローム走行----
					printf("First Run. (Slalom)\n");
 80064f8:	4830      	ldr	r0, [pc, #192]	; (80065bc <perfect_run+0x250>)
 80064fa:	f003 fbe9 	bl	8009cd0 <puts>

					MF.FLAG.SCND = 0;
 80064fe:	4a2b      	ldr	r2, [pc, #172]	; (80065ac <perfect_run+0x240>)
 8006500:	8813      	ldrh	r3, [r2, #0]
 8006502:	f36f 1304 	bfc	r3, #4, #1
 8006506:	8013      	strh	r3, [r2, #0]
					goal_x = 7;
 8006508:	4b29      	ldr	r3, [pc, #164]	; (80065b0 <perfect_run+0x244>)
 800650a:	2207      	movs	r2, #7
 800650c:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800650e:	4b29      	ldr	r3, [pc, #164]	; (80065b4 <perfect_run+0x248>)
 8006510:	2207      	movs	r2, #7
 8006512:	701a      	strb	r2, [r3, #0]

					get_base();
 8006514:	f002 ff62 	bl	80093dc <get_base>

					searchC();
 8006518:	f002 f936 	bl	8008788 <searchC>
					HAL_Delay(500);
 800651c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006520:	f7fa fd54 	bl	8000fcc <HAL_Delay>

					goal_x = goal_y = 0;
 8006524:	4b23      	ldr	r3, [pc, #140]	; (80065b4 <perfect_run+0x248>)
 8006526:	2200      	movs	r2, #0
 8006528:	701a      	strb	r2, [r3, #0]
 800652a:	4b22      	ldr	r3, [pc, #136]	; (80065b4 <perfect_run+0x248>)
 800652c:	781a      	ldrb	r2, [r3, #0]
 800652e:	4b20      	ldr	r3, [pc, #128]	; (80065b0 <perfect_run+0x244>)
 8006530:	701a      	strb	r2, [r3, #0]
					searchC();
 8006532:	f002 f929 	bl	8008788 <searchC>

					goal_x = 7;
 8006536:	4b1e      	ldr	r3, [pc, #120]	; (80065b0 <perfect_run+0x244>)
 8006538:	2207      	movs	r2, #7
 800653a:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800653c:	4b1d      	ldr	r3, [pc, #116]	; (80065b4 <perfect_run+0x248>)
 800653e:	2207      	movs	r2, #7
 8006540:	701a      	strb	r2, [r3, #0]

					break;
 8006542:	e028      	b.n	8006596 <perfect_run+0x22a>

				case 4:
					//---a二次探索スラローム走行----
					printf("Second Run. (Slalom)\n");
 8006544:	481e      	ldr	r0, [pc, #120]	; (80065c0 <perfect_run+0x254>)
 8006546:	f003 fbc3 	bl	8009cd0 <puts>

					MF.FLAG.SCND = 1;
 800654a:	4a18      	ldr	r2, [pc, #96]	; (80065ac <perfect_run+0x240>)
 800654c:	8813      	ldrh	r3, [r2, #0]
 800654e:	f043 0310 	orr.w	r3, r3, #16
 8006552:	8013      	strh	r3, [r2, #0]
					goal_x = 7;
 8006554:	4b16      	ldr	r3, [pc, #88]	; (80065b0 <perfect_run+0x244>)
 8006556:	2207      	movs	r2, #7
 8006558:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800655a:	4b16      	ldr	r3, [pc, #88]	; (80065b4 <perfect_run+0x248>)
 800655c:	2207      	movs	r2, #7
 800655e:	701a      	strb	r2, [r3, #0]

					get_base();
 8006560:	f002 ff3c 	bl	80093dc <get_base>

					searchC();
 8006564:	f002 f910 	bl	8008788 <searchC>
					HAL_Delay(500);
 8006568:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800656c:	f7fa fd2e 	bl	8000fcc <HAL_Delay>

					goal_x = goal_y = 0;
 8006570:	4b10      	ldr	r3, [pc, #64]	; (80065b4 <perfect_run+0x248>)
 8006572:	2200      	movs	r2, #0
 8006574:	701a      	strb	r2, [r3, #0]
 8006576:	4b0f      	ldr	r3, [pc, #60]	; (80065b4 <perfect_run+0x248>)
 8006578:	781a      	ldrb	r2, [r3, #0]
 800657a:	4b0d      	ldr	r3, [pc, #52]	; (80065b0 <perfect_run+0x244>)
 800657c:	701a      	strb	r2, [r3, #0]
					searchC();
 800657e:	f002 f903 	bl	8008788 <searchC>

					goal_x = 7;
 8006582:	4b0b      	ldr	r3, [pc, #44]	; (80065b0 <perfect_run+0x244>)
 8006584:	2207      	movs	r2, #7
 8006586:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 8006588:	4b0a      	ldr	r3, [pc, #40]	; (80065b4 <perfect_run+0x248>)
 800658a:	2207      	movs	r2, #7
 800658c:	701a      	strb	r2, [r3, #0]

					break;
 800658e:	e002      	b.n	8006596 <perfect_run+0x22a>
					break;

				case 6:
					break;
				case 7:
					perfect_slalom();
 8006590:	f000 f818 	bl	80065c4 <perfect_slalom>
					break;
 8006594:	bf00      	nop
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 8006596:	e6f2      	b.n	800637e <perfect_run+0x12>
 8006598:	0800afcc 	.word	0x0800afcc
 800659c:	200009b8 	.word	0x200009b8
 80065a0:	0800ae40 	.word	0x0800ae40
 80065a4:	40020000 	.word	0x40020000
 80065a8:	0800af34 	.word	0x0800af34
 80065ac:	20000e18 	.word	0x20000e18
 80065b0:	20000a70 	.word	0x20000a70
 80065b4:	20000a14 	.word	0x20000a14
 80065b8:	0800af4c 	.word	0x0800af4c
 80065bc:	0800af80 	.word	0x0800af80
 80065c0:	0800af94 	.word	0x0800af94

080065c4 <perfect_slalom>:
//perfect_slalom
//a本番用スラローム走行モード
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void perfect_slalom(void){
 80065c4:	b580      	push	{r7, lr}
 80065c6:	b082      	sub	sp, #8
 80065c8:	af00      	add	r7, sp, #0

	int mode = 0;
 80065ca:	2300      	movs	r3, #0
 80065cc:	607b      	str	r3, [r7, #4]
	printf("Perfect Slalom, Mode : %d\n", mode);
 80065ce:	6879      	ldr	r1, [r7, #4]
 80065d0:	48b5      	ldr	r0, [pc, #724]	; (80068a8 <perfect_slalom+0x2e4>)
 80065d2:	f003 fb09 	bl	8009be8 <iprintf>

	while(1){
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	b2db      	uxtb	r3, r3
 80065da:	f003 0301 	and.w	r3, r3, #1
 80065de:	b2d8      	uxtb	r0, r3
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	b2db      	uxtb	r3, r3
 80065e4:	f003 0302 	and.w	r3, r3, #2
 80065e8:	b2d9      	uxtb	r1, r3
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	b2db      	uxtb	r3, r3
 80065ee:	f003 0304 	and.w	r3, r3, #4
 80065f2:	b2db      	uxtb	r3, r3
 80065f4:	461a      	mov	r2, r3
 80065f6:	f001 ff6f 	bl	80084d8 <led_write>
		  if(dist_r >= 20){
 80065fa:	4bac      	ldr	r3, [pc, #688]	; (80068ac <perfect_slalom+0x2e8>)
 80065fc:	edd3 7a00 	vldr	s15, [r3]
 8006600:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8006604:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006608:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800660c:	db0f      	blt.n	800662e <perfect_slalom+0x6a>
			  mode++;
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	3301      	adds	r3, #1
 8006612:	607b      	str	r3, [r7, #4]
			  dist_r = 0;
 8006614:	4ba5      	ldr	r3, [pc, #660]	; (80068ac <perfect_slalom+0x2e8>)
 8006616:	f04f 0200 	mov.w	r2, #0
 800661a:	601a      	str	r2, [r3, #0]
			  if(mode > 7){
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	2b07      	cmp	r3, #7
 8006620:	dd01      	ble.n	8006626 <perfect_slalom+0x62>
				  mode = 0;
 8006622:	2300      	movs	r3, #0
 8006624:	607b      	str	r3, [r7, #4]
			  }
			  printf("Mode : %d\n", mode);
 8006626:	6879      	ldr	r1, [r7, #4]
 8006628:	48a1      	ldr	r0, [pc, #644]	; (80068b0 <perfect_slalom+0x2ec>)
 800662a:	f003 fadd 	bl	8009be8 <iprintf>
			  //buzzer(pitagola2[mode-1][0], pitagola2[mode-1][1]);
			  //buzzer(pitagola[2][0], pitagola[2][1]);
		  }
		  if(dist_r <= -20){
 800662e:	4b9f      	ldr	r3, [pc, #636]	; (80068ac <perfect_slalom+0x2e8>)
 8006630:	edd3 7a00 	vldr	s15, [r3]
 8006634:	eebb 7a04 	vmov.f32	s14, #180	; 0xc1a00000 -20.0
 8006638:	eef4 7ac7 	vcmpe.f32	s15, s14
 800663c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006640:	d80f      	bhi.n	8006662 <perfect_slalom+0x9e>
			  mode--;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	3b01      	subs	r3, #1
 8006646:	607b      	str	r3, [r7, #4]
			  dist_r = 0;
 8006648:	4b98      	ldr	r3, [pc, #608]	; (80068ac <perfect_slalom+0x2e8>)
 800664a:	f04f 0200 	mov.w	r2, #0
 800664e:	601a      	str	r2, [r3, #0]
			  if(mode < 0){
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	2b00      	cmp	r3, #0
 8006654:	da01      	bge.n	800665a <perfect_slalom+0x96>
				  mode = 7;
 8006656:	2307      	movs	r3, #7
 8006658:	607b      	str	r3, [r7, #4]
			  }
			  printf("Mode : %d\n", mode);
 800665a:	6879      	ldr	r1, [r7, #4]
 800665c:	4894      	ldr	r0, [pc, #592]	; (80068b0 <perfect_slalom+0x2ec>)
 800665e:	f003 fac3 	bl	8009be8 <iprintf>
			  //buzzer(pitagola2[mode-1][0], pitagola2[mode-1][1]);
			  //buzzer(pitagola[2][0], pitagola[2][1]);
		  }
		  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET){
 8006662:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006666:	4893      	ldr	r0, [pc, #588]	; (80068b4 <perfect_slalom+0x2f0>)
 8006668:	f7fb fe0c 	bl	8002284 <HAL_GPIO_ReadPin>
 800666c:	4603      	mov	r3, r0
 800666e:	2b00      	cmp	r3, #0
 8006670:	d1b1      	bne.n	80065d6 <perfect_slalom+0x12>
			  HAL_Delay(50);
 8006672:	2032      	movs	r0, #50	; 0x32
 8006674:	f7fa fcaa 	bl	8000fcc <HAL_Delay>
			  while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET);
 8006678:	bf00      	nop
 800667a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800667e:	488d      	ldr	r0, [pc, #564]	; (80068b4 <perfect_slalom+0x2f0>)
 8006680:	f7fb fe00 	bl	8002284 <HAL_GPIO_ReadPin>
 8006684:	4603      	mov	r3, r0
 8006686:	2b00      	cmp	r3, #0
 8006688:	d0f7      	beq.n	800667a <perfect_slalom+0xb6>
			  switch(mode){
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	2b07      	cmp	r3, #7
 800668e:	d8a2      	bhi.n	80065d6 <perfect_slalom+0x12>
 8006690:	a201      	add	r2, pc, #4	; (adr r2, 8006698 <perfect_slalom+0xd4>)
 8006692:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006696:	bf00      	nop
 8006698:	080065d7 	.word	0x080065d7
 800669c:	080066b9 	.word	0x080066b9
 80066a0:	0800670f 	.word	0x0800670f
 80066a4:	08006775 	.word	0x08006775
 80066a8:	080067db 	.word	0x080067db
 80066ac:	08006841 	.word	0x08006841
 80066b0:	080065d7 	.word	0x080065d7
 80066b4:	080065d7 	.word	0x080065d7
				case 0:
					break;

				case 1:
					//----a一次探索スラローム走行----
					printf("First Run.\n");
 80066b8:	487f      	ldr	r0, [pc, #508]	; (80068b8 <perfect_slalom+0x2f4>)
 80066ba:	f003 fb09 	bl	8009cd0 <puts>
					MF.FLAG.SCND = 0;
 80066be:	4a7f      	ldr	r2, [pc, #508]	; (80068bc <perfect_slalom+0x2f8>)
 80066c0:	8813      	ldrh	r3, [r2, #0]
 80066c2:	f36f 1304 	bfc	r3, #4, #1
 80066c6:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 0;
 80066c8:	4a7c      	ldr	r2, [pc, #496]	; (80068bc <perfect_slalom+0x2f8>)
 80066ca:	8813      	ldrh	r3, [r2, #0]
 80066cc:	f36f 2308 	bfc	r3, #8, #1
 80066d0:	8013      	strh	r3, [r2, #0]

					goal_x = 7;
 80066d2:	4b7b      	ldr	r3, [pc, #492]	; (80068c0 <perfect_slalom+0x2fc>)
 80066d4:	2207      	movs	r2, #7
 80066d6:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 80066d8:	4b7a      	ldr	r3, [pc, #488]	; (80068c4 <perfect_slalom+0x300>)
 80066da:	2207      	movs	r2, #7
 80066dc:	701a      	strb	r2, [r3, #0]

					get_base();
 80066de:	f002 fe7d 	bl	80093dc <get_base>

					searchC();
 80066e2:	f002 f851 	bl	8008788 <searchC>
					HAL_Delay(500);
 80066e6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80066ea:	f7fa fc6f 	bl	8000fcc <HAL_Delay>

					goal_x = goal_y = 0;
 80066ee:	4b75      	ldr	r3, [pc, #468]	; (80068c4 <perfect_slalom+0x300>)
 80066f0:	2200      	movs	r2, #0
 80066f2:	701a      	strb	r2, [r3, #0]
 80066f4:	4b73      	ldr	r3, [pc, #460]	; (80068c4 <perfect_slalom+0x300>)
 80066f6:	781a      	ldrb	r2, [r3, #0]
 80066f8:	4b71      	ldr	r3, [pc, #452]	; (80068c0 <perfect_slalom+0x2fc>)
 80066fa:	701a      	strb	r2, [r3, #0]
					searchC();
 80066fc:	f002 f844 	bl	8008788 <searchC>

					goal_x = 7;
 8006700:	4b6f      	ldr	r3, [pc, #444]	; (80068c0 <perfect_slalom+0x2fc>)
 8006702:	2207      	movs	r2, #7
 8006704:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 8006706:	4b6f      	ldr	r3, [pc, #444]	; (80068c4 <perfect_slalom+0x300>)
 8006708:	2207      	movs	r2, #7
 800670a:	701a      	strb	r2, [r3, #0]
					break;
 800670c:	e0cb      	b.n	80068a6 <perfect_slalom+0x2e2>

				case 2:
					//----a二次探索スラローム+既知区間加速走行 speed1----
					printf("First Run. (Continuous)\n");
 800670e:	486e      	ldr	r0, [pc, #440]	; (80068c8 <perfect_slalom+0x304>)
 8006710:	f003 fade 	bl	8009cd0 <puts>
					MF.FLAG.SCND = 1;
 8006714:	4a69      	ldr	r2, [pc, #420]	; (80068bc <perfect_slalom+0x2f8>)
 8006716:	8813      	ldrh	r3, [r2, #0]
 8006718:	f043 0310 	orr.w	r3, r3, #16
 800671c:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800671e:	4a67      	ldr	r2, [pc, #412]	; (80068bc <perfect_slalom+0x2f8>)
 8006720:	8813      	ldrh	r3, [r2, #0]
 8006722:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006726:	8013      	strh	r3, [r2, #0]

					accel_hs = 3000;
 8006728:	4b68      	ldr	r3, [pc, #416]	; (80068cc <perfect_slalom+0x308>)
 800672a:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800672e:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 600;
 8006730:	4b67      	ldr	r3, [pc, #412]	; (80068d0 <perfect_slalom+0x30c>)
 8006732:	f44f 7216 	mov.w	r2, #600	; 0x258
 8006736:	801a      	strh	r2, [r3, #0]
					goal_x = 7;
 8006738:	4b61      	ldr	r3, [pc, #388]	; (80068c0 <perfect_slalom+0x2fc>)
 800673a:	2207      	movs	r2, #7
 800673c:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800673e:	4b61      	ldr	r3, [pc, #388]	; (80068c4 <perfect_slalom+0x300>)
 8006740:	2207      	movs	r2, #7
 8006742:	701a      	strb	r2, [r3, #0]

					get_base();
 8006744:	f002 fe4a 	bl	80093dc <get_base>

					searchC2();
 8006748:	f002 f898 	bl	800887c <searchC2>
					HAL_Delay(500);
 800674c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006750:	f7fa fc3c 	bl	8000fcc <HAL_Delay>

					goal_x = goal_y = 0;
 8006754:	4b5b      	ldr	r3, [pc, #364]	; (80068c4 <perfect_slalom+0x300>)
 8006756:	2200      	movs	r2, #0
 8006758:	701a      	strb	r2, [r3, #0]
 800675a:	4b5a      	ldr	r3, [pc, #360]	; (80068c4 <perfect_slalom+0x300>)
 800675c:	781a      	ldrb	r2, [r3, #0]
 800675e:	4b58      	ldr	r3, [pc, #352]	; (80068c0 <perfect_slalom+0x2fc>)
 8006760:	701a      	strb	r2, [r3, #0]
					searchC2();
 8006762:	f002 f88b 	bl	800887c <searchC2>

					goal_x = 7;
 8006766:	4b56      	ldr	r3, [pc, #344]	; (80068c0 <perfect_slalom+0x2fc>)
 8006768:	2207      	movs	r2, #7
 800676a:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800676c:	4b55      	ldr	r3, [pc, #340]	; (80068c4 <perfect_slalom+0x300>)
 800676e:	2207      	movs	r2, #7
 8006770:	701a      	strb	r2, [r3, #0]
					break;
 8006772:	e098      	b.n	80068a6 <perfect_slalom+0x2e2>

				case 3:
					//----a二次探索スラローム+既知区間加速走行 speed2----
					printf("Second Run. (Continuous)\n");
 8006774:	4857      	ldr	r0, [pc, #348]	; (80068d4 <perfect_slalom+0x310>)
 8006776:	f003 faab 	bl	8009cd0 <puts>
					MF.FLAG.SCND = 1;
 800677a:	4a50      	ldr	r2, [pc, #320]	; (80068bc <perfect_slalom+0x2f8>)
 800677c:	8813      	ldrh	r3, [r2, #0]
 800677e:	f043 0310 	orr.w	r3, r3, #16
 8006782:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 8006784:	4a4d      	ldr	r2, [pc, #308]	; (80068bc <perfect_slalom+0x2f8>)
 8006786:	8813      	ldrh	r3, [r2, #0]
 8006788:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800678c:	8013      	strh	r3, [r2, #0]

					accel_hs = 3000;
 800678e:	4b4f      	ldr	r3, [pc, #316]	; (80068cc <perfect_slalom+0x308>)
 8006790:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8006794:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 800;
 8006796:	4b4e      	ldr	r3, [pc, #312]	; (80068d0 <perfect_slalom+0x30c>)
 8006798:	f44f 7248 	mov.w	r2, #800	; 0x320
 800679c:	801a      	strh	r2, [r3, #0]
					goal_x = 7;
 800679e:	4b48      	ldr	r3, [pc, #288]	; (80068c0 <perfect_slalom+0x2fc>)
 80067a0:	2207      	movs	r2, #7
 80067a2:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 80067a4:	4b47      	ldr	r3, [pc, #284]	; (80068c4 <perfect_slalom+0x300>)
 80067a6:	2207      	movs	r2, #7
 80067a8:	701a      	strb	r2, [r3, #0]

					get_base();
 80067aa:	f002 fe17 	bl	80093dc <get_base>

					searchC2();
 80067ae:	f002 f865 	bl	800887c <searchC2>
					HAL_Delay(500);
 80067b2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80067b6:	f7fa fc09 	bl	8000fcc <HAL_Delay>

					goal_x = goal_y = 0;
 80067ba:	4b42      	ldr	r3, [pc, #264]	; (80068c4 <perfect_slalom+0x300>)
 80067bc:	2200      	movs	r2, #0
 80067be:	701a      	strb	r2, [r3, #0]
 80067c0:	4b40      	ldr	r3, [pc, #256]	; (80068c4 <perfect_slalom+0x300>)
 80067c2:	781a      	ldrb	r2, [r3, #0]
 80067c4:	4b3e      	ldr	r3, [pc, #248]	; (80068c0 <perfect_slalom+0x2fc>)
 80067c6:	701a      	strb	r2, [r3, #0]
					searchC2();
 80067c8:	f002 f858 	bl	800887c <searchC2>

					goal_x = 7;
 80067cc:	4b3c      	ldr	r3, [pc, #240]	; (80068c0 <perfect_slalom+0x2fc>)
 80067ce:	2207      	movs	r2, #7
 80067d0:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 80067d2:	4b3c      	ldr	r3, [pc, #240]	; (80068c4 <perfect_slalom+0x300>)
 80067d4:	2207      	movs	r2, #7
 80067d6:	701a      	strb	r2, [r3, #0]
					break;
 80067d8:	e065      	b.n	80068a6 <perfect_slalom+0x2e2>

				case 4:
					//----a二次探索スラローム+既知区間加速走行 speed3----
					printf("First Run. (Slalom)\n");
 80067da:	483f      	ldr	r0, [pc, #252]	; (80068d8 <perfect_slalom+0x314>)
 80067dc:	f003 fa78 	bl	8009cd0 <puts>
					MF.FLAG.SCND = 1;
 80067e0:	4a36      	ldr	r2, [pc, #216]	; (80068bc <perfect_slalom+0x2f8>)
 80067e2:	8813      	ldrh	r3, [r2, #0]
 80067e4:	f043 0310 	orr.w	r3, r3, #16
 80067e8:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 80067ea:	4a34      	ldr	r2, [pc, #208]	; (80068bc <perfect_slalom+0x2f8>)
 80067ec:	8813      	ldrh	r3, [r2, #0]
 80067ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80067f2:	8013      	strh	r3, [r2, #0]

					accel_hs = 3000;
 80067f4:	4b35      	ldr	r3, [pc, #212]	; (80068cc <perfect_slalom+0x308>)
 80067f6:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80067fa:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1000;
 80067fc:	4b34      	ldr	r3, [pc, #208]	; (80068d0 <perfect_slalom+0x30c>)
 80067fe:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006802:	801a      	strh	r2, [r3, #0]
					goal_x = 7;
 8006804:	4b2e      	ldr	r3, [pc, #184]	; (80068c0 <perfect_slalom+0x2fc>)
 8006806:	2207      	movs	r2, #7
 8006808:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800680a:	4b2e      	ldr	r3, [pc, #184]	; (80068c4 <perfect_slalom+0x300>)
 800680c:	2207      	movs	r2, #7
 800680e:	701a      	strb	r2, [r3, #0]

					get_base();
 8006810:	f002 fde4 	bl	80093dc <get_base>

					searchC2();
 8006814:	f002 f832 	bl	800887c <searchC2>
					HAL_Delay(500);
 8006818:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800681c:	f7fa fbd6 	bl	8000fcc <HAL_Delay>

					goal_x = goal_y = 0;
 8006820:	4b28      	ldr	r3, [pc, #160]	; (80068c4 <perfect_slalom+0x300>)
 8006822:	2200      	movs	r2, #0
 8006824:	701a      	strb	r2, [r3, #0]
 8006826:	4b27      	ldr	r3, [pc, #156]	; (80068c4 <perfect_slalom+0x300>)
 8006828:	781a      	ldrb	r2, [r3, #0]
 800682a:	4b25      	ldr	r3, [pc, #148]	; (80068c0 <perfect_slalom+0x2fc>)
 800682c:	701a      	strb	r2, [r3, #0]
					searchC2();
 800682e:	f002 f825 	bl	800887c <searchC2>

					goal_x = 7;
 8006832:	4b23      	ldr	r3, [pc, #140]	; (80068c0 <perfect_slalom+0x2fc>)
 8006834:	2207      	movs	r2, #7
 8006836:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 8006838:	4b22      	ldr	r3, [pc, #136]	; (80068c4 <perfect_slalom+0x300>)
 800683a:	2207      	movs	r2, #7
 800683c:	701a      	strb	r2, [r3, #0]
					break;
 800683e:	e032      	b.n	80068a6 <perfect_slalom+0x2e2>

				case 5:
					//----a二次探索スラローム+既知区間加速走行 speed4----
					printf("Second Run. (Slalom)\n");
 8006840:	4826      	ldr	r0, [pc, #152]	; (80068dc <perfect_slalom+0x318>)
 8006842:	f003 fa45 	bl	8009cd0 <puts>
					MF.FLAG.SCND = 1;
 8006846:	4a1d      	ldr	r2, [pc, #116]	; (80068bc <perfect_slalom+0x2f8>)
 8006848:	8813      	ldrh	r3, [r2, #0]
 800684a:	f043 0310 	orr.w	r3, r3, #16
 800684e:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 8006850:	4a1a      	ldr	r2, [pc, #104]	; (80068bc <perfect_slalom+0x2f8>)
 8006852:	8813      	ldrh	r3, [r2, #0]
 8006854:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006858:	8013      	strh	r3, [r2, #0]

					accel_hs = 3000;
 800685a:	4b1c      	ldr	r3, [pc, #112]	; (80068cc <perfect_slalom+0x308>)
 800685c:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8006860:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1100;
 8006862:	4b1b      	ldr	r3, [pc, #108]	; (80068d0 <perfect_slalom+0x30c>)
 8006864:	f240 424c 	movw	r2, #1100	; 0x44c
 8006868:	801a      	strh	r2, [r3, #0]
					goal_x = 7;
 800686a:	4b15      	ldr	r3, [pc, #84]	; (80068c0 <perfect_slalom+0x2fc>)
 800686c:	2207      	movs	r2, #7
 800686e:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 8006870:	4b14      	ldr	r3, [pc, #80]	; (80068c4 <perfect_slalom+0x300>)
 8006872:	2207      	movs	r2, #7
 8006874:	701a      	strb	r2, [r3, #0]

					get_base();
 8006876:	f002 fdb1 	bl	80093dc <get_base>

					searchC2();
 800687a:	f001 ffff 	bl	800887c <searchC2>
					HAL_Delay(500);
 800687e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006882:	f7fa fba3 	bl	8000fcc <HAL_Delay>

					goal_x = goal_y = 0;
 8006886:	4b0f      	ldr	r3, [pc, #60]	; (80068c4 <perfect_slalom+0x300>)
 8006888:	2200      	movs	r2, #0
 800688a:	701a      	strb	r2, [r3, #0]
 800688c:	4b0d      	ldr	r3, [pc, #52]	; (80068c4 <perfect_slalom+0x300>)
 800688e:	781a      	ldrb	r2, [r3, #0]
 8006890:	4b0b      	ldr	r3, [pc, #44]	; (80068c0 <perfect_slalom+0x2fc>)
 8006892:	701a      	strb	r2, [r3, #0]
					searchC2();
 8006894:	f001 fff2 	bl	800887c <searchC2>

					goal_x = 7;
 8006898:	4b09      	ldr	r3, [pc, #36]	; (80068c0 <perfect_slalom+0x2fc>)
 800689a:	2207      	movs	r2, #7
 800689c:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800689e:	4b09      	ldr	r3, [pc, #36]	; (80068c4 <perfect_slalom+0x300>)
 80068a0:	2207      	movs	r2, #7
 80068a2:	701a      	strb	r2, [r3, #0]
					break;
 80068a4:	bf00      	nop
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 80068a6:	e696      	b.n	80065d6 <perfect_slalom+0x12>
 80068a8:	0800afe4 	.word	0x0800afe4
 80068ac:	200009b8 	.word	0x200009b8
 80068b0:	0800ae40 	.word	0x0800ae40
 80068b4:	40020000 	.word	0x40020000
 80068b8:	0800af28 	.word	0x0800af28
 80068bc:	20000e18 	.word	0x20000e18
 80068c0:	20000a70 	.word	0x20000a70
 80068c4:	20000a14 	.word	0x20000a14
 80068c8:	0800af34 	.word	0x0800af34
 80068cc:	20000324 	.word	0x20000324
 80068d0:	20000e28 	.word	0x20000e28
 80068d4:	0800af4c 	.word	0x0800af4c
 80068d8:	0800af80 	.word	0x0800af80
 80068dc:	0800af94 	.word	0x0800af94

080068e0 <eeprom_enable_write>:
//eeprom_enable_write
// eepromとして使うflashメモリ領域をeraseし，書き込みを有効にする
// 引数：なし
// 戻り値：問題が起こらなければHAL_OKを返す
//+++++++++++++++++++++++++++++++++++++++++++++++
HAL_StatusTypeDef eeprom_enable_write(void){
 80068e0:	b580      	push	{r7, lr}
 80068e2:	b088      	sub	sp, #32
 80068e4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status;
  FLASH_EraseInitTypeDef EraseInitStruct;
  uint32_t PageError = 0;
 80068e6:	2300      	movs	r3, #0
 80068e8:	607b      	str	r3, [r7, #4]
  EraseInitStruct.TypeErase = FLASH_TYPEERASE_SECTORS;
 80068ea:	2300      	movs	r3, #0
 80068ec:	60bb      	str	r3, [r7, #8]
  //EraseInitStruct.Banks = FLASH_BANK_1;
  //EraseInitStruct.Sector = EEPROM_START_ADDRESS;
  EraseInitStruct.Sector = FLASH_SECTOR_11;
 80068ee:	230b      	movs	r3, #11
 80068f0:	613b      	str	r3, [r7, #16]
  EraseInitStruct.NbSectors = 1;
 80068f2:	2301      	movs	r3, #1
 80068f4:	617b      	str	r3, [r7, #20]
  EraseInitStruct.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 80068f6:	2302      	movs	r3, #2
 80068f8:	61bb      	str	r3, [r7, #24]

  status = HAL_FLASH_Unlock();
 80068fa:	f7fb f8a9 	bl	8001a50 <HAL_FLASH_Unlock>
 80068fe:	4603      	mov	r3, r0
 8006900:	77fb      	strb	r3, [r7, #31]
  if(status != HAL_OK) return status;
 8006902:	7ffb      	ldrb	r3, [r7, #31]
 8006904:	2b00      	cmp	r3, #0
 8006906:	d001      	beq.n	800690c <eeprom_enable_write+0x2c>
 8006908:	7ffb      	ldrb	r3, [r7, #31]
 800690a:	e009      	b.n	8006920 <eeprom_enable_write+0x40>
  status = HAL_FLASHEx_Erase(&EraseInitStruct, &PageError);
 800690c:	1d3a      	adds	r2, r7, #4
 800690e:	f107 0308 	add.w	r3, r7, #8
 8006912:	4611      	mov	r1, r2
 8006914:	4618      	mov	r0, r3
 8006916:	f7fb f9f9 	bl	8001d0c <HAL_FLASHEx_Erase>
 800691a:	4603      	mov	r3, r0
 800691c:	77fb      	strb	r3, [r7, #31]
  return status;
 800691e:	7ffb      	ldrb	r3, [r7, #31]
}
 8006920:	4618      	mov	r0, r3
 8006922:	3720      	adds	r7, #32
 8006924:	46bd      	mov	sp, r7
 8006926:	bd80      	pop	{r7, pc}

08006928 <eeprom_disable_write>:
//eeprom_disable_write
// eepromとして使うflashメモリ領域への書き込みを無効にする
// 引数：なし
// 戻り値：問題が起こらなければHAL_OKを返す
//+++++++++++++++++++++++++++++++++++++++++++++++
HAL_StatusTypeDef eeprom_disable_write(void){
 8006928:	b580      	push	{r7, lr}
 800692a:	af00      	add	r7, sp, #0
  return HAL_FLASH_Lock();
 800692c:	f7fb f8b2 	bl	8001a94 <HAL_FLASH_Lock>
 8006930:	4603      	mov	r3, r0
}
 8006932:	4618      	mov	r0, r3
 8006934:	bd80      	pop	{r7, pc}

08006936 <eeprom_write_halfword>:
//eeprom_write_halfword
// eepromとして使うflashメモリ領域へ2バイトの値を書き込む
// 引数：address …… eepromとして使うflashメモリ領域の先頭アドレスからのオフセット，data …… 書き込みたいuin16_t型データ
// 戻り値：問題が起こらなければHAL_OKを返す
//+++++++++++++++++++++++++++++++++++++++++++++++
HAL_StatusTypeDef eeprom_write_halfword(uint32_t address, uint16_t data){
 8006936:	b590      	push	{r4, r7, lr}
 8006938:	b085      	sub	sp, #20
 800693a:	af00      	add	r7, sp, #0
 800693c:	6078      	str	r0, [r7, #4]
 800693e:	460b      	mov	r3, r1
 8006940:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status;
  address = address*2 + EEPROM_START_ADDRESS;
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	f103 6380 	add.w	r3, r3, #67108864	; 0x4000000
 8006948:	f503 23e0 	add.w	r3, r3, #458752	; 0x70000
 800694c:	005b      	lsls	r3, r3, #1
 800694e:	607b      	str	r3, [r7, #4]
  status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, address, data);
 8006950:	887b      	ldrh	r3, [r7, #2]
 8006952:	f04f 0400 	mov.w	r4, #0
 8006956:	461a      	mov	r2, r3
 8006958:	4623      	mov	r3, r4
 800695a:	6879      	ldr	r1, [r7, #4]
 800695c:	2001      	movs	r0, #1
 800695e:	f7fb f823 	bl	80019a8 <HAL_FLASH_Program>
 8006962:	4603      	mov	r3, r0
 8006964:	73fb      	strb	r3, [r7, #15]
  return status;
 8006966:	7bfb      	ldrb	r3, [r7, #15]
}
 8006968:	4618      	mov	r0, r3
 800696a:	3714      	adds	r7, #20
 800696c:	46bd      	mov	sp, r7
 800696e:	bd90      	pop	{r4, r7, pc}

08006970 <eeprom_read_halfword>:
//eeprom_read_halfword
// eepromとして使うflashメモリ領域から2バイトの値を読み込む
// 引数：address …… eepromとして使うflashメモリ領域の先頭アドレスからのオフセット
// 戻り値：読み込んだuin16_t型データ
//+++++++++++++++++++++++++++++++++++++++++++++++
uint16_t eeprom_read_halfword(uint32_t address){
 8006970:	b480      	push	{r7}
 8006972:	b085      	sub	sp, #20
 8006974:	af00      	add	r7, sp, #0
 8006976:	6078      	str	r0, [r7, #4]
  uint16_t val = 0;
 8006978:	2300      	movs	r3, #0
 800697a:	81fb      	strh	r3, [r7, #14]
  address = address*2 + EEPROM_START_ADDRESS;
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	f103 6380 	add.w	r3, r3, #67108864	; 0x4000000
 8006982:	f503 23e0 	add.w	r3, r3, #458752	; 0x70000
 8006986:	005b      	lsls	r3, r3, #1
 8006988:	607b      	str	r3, [r7, #4]
  val = *(__IO uint16_t *)address;
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	881b      	ldrh	r3, [r3, #0]
 800698e:	81fb      	strh	r3, [r7, #14]
  return val;
 8006990:	89fb      	ldrh	r3, [r7, #14]
}
 8006992:	4618      	mov	r0, r3
 8006994:	3714      	adds	r7, #20
 8006996:	46bd      	mov	sp, r7
 8006998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800699c:	4770      	bx	lr
	...

080069a0 <gyro_init>:
#include "global.h"

SPI_HandleTypeDef hspi3;


void gyro_init(void){
 80069a0:	b580      	push	{r7, lr}
 80069a2:	b082      	sub	sp, #8
 80069a4:	af00      	add	r7, sp, #0
  uint8_t who_am_i;

  HAL_Delay(100); // wait start up
 80069a6:	2064      	movs	r0, #100	; 0x64
 80069a8:	f7fa fb10 	bl	8000fcc <HAL_Delay>
  who_am_i = read_byte(WHO_AM_I); // 1. read who am i
 80069ac:	2075      	movs	r0, #117	; 0x75
 80069ae:	f000 f82f 	bl	8006a10 <read_byte>
 80069b2:	4603      	mov	r3, r0
 80069b4:	71fb      	strb	r3, [r7, #7]
  printf("0x%x\r\n",who_am_i); // 2. check who am i value
 80069b6:	79fb      	ldrb	r3, [r7, #7]
 80069b8:	4619      	mov	r1, r3
 80069ba:	4813      	ldr	r0, [pc, #76]	; (8006a08 <gyro_init+0x68>)
 80069bc:	f003 f914 	bl	8009be8 <iprintf>

  // 2. error check
  if (who_am_i != 0x98){
 80069c0:	79fb      	ldrb	r3, [r7, #7]
 80069c2:	2b98      	cmp	r3, #152	; 0x98
 80069c4:	d003      	beq.n	80069ce <gyro_init+0x2e>
    while(1){
      printf( "gyro_error\r");
 80069c6:	4811      	ldr	r0, [pc, #68]	; (8006a0c <gyro_init+0x6c>)
 80069c8:	f003 f90e 	bl	8009be8 <iprintf>
 80069cc:	e7fb      	b.n	80069c6 <gyro_init+0x26>
    }
  }

  HAL_Delay(50); // wait
 80069ce:	2032      	movs	r0, #50	; 0x32
 80069d0:	f7fa fafc 	bl	8000fcc <HAL_Delay>
  write_byte(PWR_MGMT_1, 0x00); // 3. set pwr_might
 80069d4:	2100      	movs	r1, #0
 80069d6:	206b      	movs	r0, #107	; 0x6b
 80069d8:	f000 f846 	bl	8006a68 <write_byte>

  HAL_Delay(50);
 80069dc:	2032      	movs	r0, #50	; 0x32
 80069de:	f7fa faf5 	bl	8000fcc <HAL_Delay>
  write_byte(CONFIG, 0x00); // 4. set config
 80069e2:	2100      	movs	r1, #0
 80069e4:	201a      	movs	r0, #26
 80069e6:	f000 f83f 	bl	8006a68 <write_byte>

  HAL_Delay(50);
 80069ea:	2032      	movs	r0, #50	; 0x32
 80069ec:	f7fa faee 	bl	8000fcc <HAL_Delay>
  write_byte(GYRO_CONFIG, 0x18); // 5. set gyro config
 80069f0:	2118      	movs	r1, #24
 80069f2:	201b      	movs	r0, #27
 80069f4:	f000 f838 	bl	8006a68 <write_byte>

  HAL_Delay(50);
 80069f8:	2032      	movs	r0, #50	; 0x32
 80069fa:	f7fa fae7 	bl	8000fcc <HAL_Delay>
}
 80069fe:	bf00      	nop
 8006a00:	3708      	adds	r7, #8
 8006a02:	46bd      	mov	sp, r7
 8006a04:	bd80      	pop	{r7, pc}
 8006a06:	bf00      	nop
 8006a08:	0800b000 	.word	0x0800b000
 8006a0c:	0800b008 	.word	0x0800b008

08006a10 <read_byte>:


uint8_t read_byte(uint8_t reg){
 8006a10:	b580      	push	{r7, lr}
 8006a12:	b084      	sub	sp, #16
 8006a14:	af00      	add	r7, sp, #0
 8006a16:	4603      	mov	r3, r0
 8006a18:	71fb      	strb	r3, [r7, #7]
  uint8_t ret,val;
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET ); //cs = Low;
 8006a1a:	2200      	movs	r2, #0
 8006a1c:	2104      	movs	r1, #4
 8006a1e:	4810      	ldr	r0, [pc, #64]	; (8006a60 <read_byte+0x50>)
 8006a20:	f7fb fc48 	bl	80022b4 <HAL_GPIO_WritePin>
  ret = reg | 0x80;  // MSB = 1
 8006a24:	79fb      	ldrb	r3, [r7, #7]
 8006a26:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006a2a:	b2db      	uxtb	r3, r3
 8006a2c:	73fb      	strb	r3, [r7, #15]
  HAL_SPI_Transmit(&hspi3, &ret,1,100); // sent 1byte(address)
 8006a2e:	f107 010f 	add.w	r1, r7, #15
 8006a32:	2364      	movs	r3, #100	; 0x64
 8006a34:	2201      	movs	r2, #1
 8006a36:	480b      	ldr	r0, [pc, #44]	; (8006a64 <read_byte+0x54>)
 8006a38:	f7fc f8c4 	bl	8002bc4 <HAL_SPI_Transmit>
  HAL_SPI_Receive(&hspi3,&val,1,100); // read 1byte(read data)
 8006a3c:	f107 010e 	add.w	r1, r7, #14
 8006a40:	2364      	movs	r3, #100	; 0x64
 8006a42:	2201      	movs	r2, #1
 8006a44:	4807      	ldr	r0, [pc, #28]	; (8006a64 <read_byte+0x54>)
 8006a46:	f7fc f9f1 	bl	8002e2c <HAL_SPI_Receive>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_SET );  //cs = High;
 8006a4a:	2201      	movs	r2, #1
 8006a4c:	2104      	movs	r1, #4
 8006a4e:	4804      	ldr	r0, [pc, #16]	; (8006a60 <read_byte+0x50>)
 8006a50:	f7fb fc30 	bl	80022b4 <HAL_GPIO_WritePin>
  return val;
 8006a54:	7bbb      	ldrb	r3, [r7, #14]
}
 8006a56:	4618      	mov	r0, r3
 8006a58:	3710      	adds	r7, #16
 8006a5a:	46bd      	mov	sp, r7
 8006a5c:	bd80      	pop	{r7, pc}
 8006a5e:	bf00      	nop
 8006a60:	40020c00 	.word	0x40020c00
 8006a64:	20000120 	.word	0x20000120

08006a68 <write_byte>:


void write_byte(uint8_t reg, uint8_t val){
 8006a68:	b580      	push	{r7, lr}
 8006a6a:	b084      	sub	sp, #16
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	4603      	mov	r3, r0
 8006a70:	460a      	mov	r2, r1
 8006a72:	71fb      	strb	r3, [r7, #7]
 8006a74:	4613      	mov	r3, r2
 8006a76:	71bb      	strb	r3, [r7, #6]
  uint8_t ret;
  ret = reg & 0x7F ; // MSB = 0
 8006a78:	79fb      	ldrb	r3, [r7, #7]
 8006a7a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006a7e:	b2db      	uxtb	r3, r3
 8006a80:	73fb      	strb	r3, [r7, #15]
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET); // cs = Low;
 8006a82:	2200      	movs	r2, #0
 8006a84:	2104      	movs	r1, #4
 8006a86:	480c      	ldr	r0, [pc, #48]	; (8006ab8 <write_byte+0x50>)
 8006a88:	f7fb fc14 	bl	80022b4 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi3, &ret,1,100); // sent 1byte(address)
 8006a8c:	f107 010f 	add.w	r1, r7, #15
 8006a90:	2364      	movs	r3, #100	; 0x64
 8006a92:	2201      	movs	r2, #1
 8006a94:	4809      	ldr	r0, [pc, #36]	; (8006abc <write_byte+0x54>)
 8006a96:	f7fc f895 	bl	8002bc4 <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi3, &val,1,100); // read 1byte(write data)
 8006a9a:	1db9      	adds	r1, r7, #6
 8006a9c:	2364      	movs	r3, #100	; 0x64
 8006a9e:	2201      	movs	r2, #1
 8006aa0:	4806      	ldr	r0, [pc, #24]	; (8006abc <write_byte+0x54>)
 8006aa2:	f7fc f88f 	bl	8002bc4 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_SET); // cs = High;
 8006aa6:	2201      	movs	r2, #1
 8006aa8:	2104      	movs	r1, #4
 8006aaa:	4803      	ldr	r0, [pc, #12]	; (8006ab8 <write_byte+0x50>)
 8006aac:	f7fb fc02 	bl	80022b4 <HAL_GPIO_WritePin>
}
 8006ab0:	bf00      	nop
 8006ab2:	3710      	adds	r7, #16
 8006ab4:	46bd      	mov	sp, r7
 8006ab6:	bd80      	pop	{r7, pc}
 8006ab8:	40020c00 	.word	0x40020c00
 8006abc:	20000120 	.word	0x20000120

08006ac0 <gyro_read_z>:


float gyro_read_z(void){
 8006ac0:	b590      	push	{r4, r7, lr}
 8006ac2:	b083      	sub	sp, #12
 8006ac4:	af00      	add	r7, sp, #0
  int16_t gyro_z;
  float omega;

  // H:8bit shift, Link h and l
  gyro_z = (int16_t)((int16_t)(read_byte(GYRO_ZOUT_H) << 8) | read_byte(GYRO_ZOUT_L));
 8006ac6:	2047      	movs	r0, #71	; 0x47
 8006ac8:	f7ff ffa2 	bl	8006a10 <read_byte>
 8006acc:	4603      	mov	r3, r0
 8006ace:	021b      	lsls	r3, r3, #8
 8006ad0:	b21c      	sxth	r4, r3
 8006ad2:	2048      	movs	r0, #72	; 0x48
 8006ad4:	f7ff ff9c 	bl	8006a10 <read_byte>
 8006ad8:	4603      	mov	r3, r0
 8006ada:	b21b      	sxth	r3, r3
 8006adc:	4323      	orrs	r3, r4
 8006ade:	80fb      	strh	r3, [r7, #6]

  omega = (float)(gyro_z / GYRO_FACTOR+1.15); // dps to deg/sec
 8006ae0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006ae4:	4618      	mov	r0, r3
 8006ae6:	f7f9 fd15 	bl	8000514 <__aeabi_i2d>
 8006aea:	a30f      	add	r3, pc, #60	; (adr r3, 8006b28 <gyro_read_z+0x68>)
 8006aec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006af0:	f7f9 fea4 	bl	800083c <__aeabi_ddiv>
 8006af4:	4603      	mov	r3, r0
 8006af6:	460c      	mov	r4, r1
 8006af8:	4618      	mov	r0, r3
 8006afa:	4621      	mov	r1, r4
 8006afc:	a30c      	add	r3, pc, #48	; (adr r3, 8006b30 <gyro_read_z+0x70>)
 8006afe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b02:	f7f9 fbbb 	bl	800027c <__adddf3>
 8006b06:	4603      	mov	r3, r0
 8006b08:	460c      	mov	r4, r1
 8006b0a:	4618      	mov	r0, r3
 8006b0c:	4621      	mov	r1, r4
 8006b0e:	f7fa f81b 	bl	8000b48 <__aeabi_d2f>
 8006b12:	4603      	mov	r3, r0
 8006b14:	603b      	str	r3, [r7, #0]
  return omega;
 8006b16:	683b      	ldr	r3, [r7, #0]
 8006b18:	ee07 3a90 	vmov	s15, r3
}
 8006b1c:	eeb0 0a67 	vmov.f32	s0, s15
 8006b20:	370c      	adds	r7, #12
 8006b22:	46bd      	mov	sp, r7
 8006b24:	bd90      	pop	{r4, r7, pc}
 8006b26:	bf00      	nop
 8006b28:	66666666 	.word	0x66666666
 8006b2c:	40306666 	.word	0x40306666
 8006b30:	66666666 	.word	0x66666666
 8006b34:	3ff26666 	.word	0x3ff26666

08006b38 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int __io_putchar(int c) {
 8006b38:	b580      	push	{r7, lr}
 8006b3a:	b084      	sub	sp, #16
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	6078      	str	r0, [r7, #4]
  if( c == '\n' ) {
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	2b0a      	cmp	r3, #10
 8006b44:	d108      	bne.n	8006b58 <__io_putchar+0x20>
    int _c = '\r';
 8006b46:	230d      	movs	r3, #13
 8006b48:	60fb      	str	r3, [r7, #12]
    HAL_UART_Transmit(&huart1, &_c, 1, 1);
 8006b4a:	f107 010c 	add.w	r1, r7, #12
 8006b4e:	2301      	movs	r3, #1
 8006b50:	2201      	movs	r2, #1
 8006b52:	4807      	ldr	r0, [pc, #28]	; (8006b70 <__io_putchar+0x38>)
 8006b54:	f7fd fd15 	bl	8004582 <HAL_UART_Transmit>
  }
  HAL_UART_Transmit(&huart1, &c, 1, 1);
 8006b58:	1d39      	adds	r1, r7, #4
 8006b5a:	2301      	movs	r3, #1
 8006b5c:	2201      	movs	r2, #1
 8006b5e:	4804      	ldr	r0, [pc, #16]	; (8006b70 <__io_putchar+0x38>)
 8006b60:	f7fd fd0f 	bl	8004582 <HAL_UART_Transmit>
  return 0;
 8006b64:	2300      	movs	r3, #0
}
 8006b66:	4618      	mov	r0, r3
 8006b68:	3710      	adds	r7, #16
 8006b6a:	46bd      	mov	sp, r7
 8006b6c:	bd80      	pop	{r7, pc}
 8006b6e:	bf00      	nop
 8006b70:	20000a28 	.word	0x20000a28
 8006b74:	00000000 	.word	0x00000000

08006b78 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006b78:	b5b0      	push	{r4, r5, r7, lr}
 8006b7a:	b08c      	sub	sp, #48	; 0x30
 8006b7c:	af00      	add	r7, sp, #0
 8006b7e:	6078      	str	r0, [r7, #4]
	TIM_OC_InitTypeDef ConfigOC;
	ConfigOC.OCMode = TIM_OCMODE_PWM1;
 8006b80:	2360      	movs	r3, #96	; 0x60
 8006b82:	60fb      	str	r3, [r7, #12]
	ConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8006b84:	2300      	movs	r3, #0
 8006b86:	617b      	str	r3, [r7, #20]
	ConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8006b88:	2300      	movs	r3, #0
 8006b8a:	61fb      	str	r3, [r7, #28]

	if(htim == &htim6){
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	4aae      	ldr	r2, [pc, #696]	; (8006e48 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8006b90:	4293      	cmp	r3, r2
 8006b92:	f040 8728 	bne.w	80079e6 <HAL_TIM_PeriodElapsedCallback+0xe6e>
		cnt_l = TIM4 -> CNT;
 8006b96:	4bad      	ldr	r3, [pc, #692]	; (8006e4c <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8006b98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b9a:	ee07 3a90 	vmov	s15, r3
 8006b9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ba2:	4bab      	ldr	r3, [pc, #684]	; (8006e50 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8006ba4:	edc3 7a00 	vstr	s15, [r3]
		cnt_r = TIM8 -> CNT;
 8006ba8:	4baa      	ldr	r3, [pc, #680]	; (8006e54 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8006baa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bac:	ee07 3a90 	vmov	s15, r3
 8006bb0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006bb4:	4ba8      	ldr	r3, [pc, #672]	; (8006e58 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8006bb6:	edc3 7a00 	vstr	s15, [r3]
		if(cnt_l > 40000) cnt_l = cnt_l - 65535;
 8006bba:	4ba5      	ldr	r3, [pc, #660]	; (8006e50 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8006bbc:	edd3 7a00 	vldr	s15, [r3]
 8006bc0:	ed9f 7aa6 	vldr	s14, [pc, #664]	; 8006e5c <HAL_TIM_PeriodElapsedCallback+0x2e4>
 8006bc4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006bc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006bcc:	dd09      	ble.n	8006be2 <HAL_TIM_PeriodElapsedCallback+0x6a>
 8006bce:	4ba0      	ldr	r3, [pc, #640]	; (8006e50 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8006bd0:	edd3 7a00 	vldr	s15, [r3]
 8006bd4:	ed9f 7aa2 	vldr	s14, [pc, #648]	; 8006e60 <HAL_TIM_PeriodElapsedCallback+0x2e8>
 8006bd8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006bdc:	4b9c      	ldr	r3, [pc, #624]	; (8006e50 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8006bde:	edc3 7a00 	vstr	s15, [r3]
		if(cnt_r > 40000) cnt_r = cnt_r - 65535;
 8006be2:	4b9d      	ldr	r3, [pc, #628]	; (8006e58 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8006be4:	edd3 7a00 	vldr	s15, [r3]
 8006be8:	ed9f 7a9c 	vldr	s14, [pc, #624]	; 8006e5c <HAL_TIM_PeriodElapsedCallback+0x2e4>
 8006bec:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006bf0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006bf4:	dd09      	ble.n	8006c0a <HAL_TIM_PeriodElapsedCallback+0x92>
 8006bf6:	4b98      	ldr	r3, [pc, #608]	; (8006e58 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8006bf8:	edd3 7a00 	vldr	s15, [r3]
 8006bfc:	ed9f 7a98 	vldr	s14, [pc, #608]	; 8006e60 <HAL_TIM_PeriodElapsedCallback+0x2e8>
 8006c00:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006c04:	4b94      	ldr	r3, [pc, #592]	; (8006e58 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8006c06:	edc3 7a00 	vstr	s15, [r3]
		cnt_r = cnt_r * -1;
 8006c0a:	4b93      	ldr	r3, [pc, #588]	; (8006e58 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8006c0c:	edd3 7a00 	vldr	s15, [r3]
 8006c10:	eef1 7a67 	vneg.f32	s15, s15
 8006c14:	4b90      	ldr	r3, [pc, #576]	; (8006e58 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8006c16:	edc3 7a00 	vstr	s15, [r3]

		dist_l = dist_l + cnt_l * (DIAMETER * M_PI * 11 / 40 / 4096 / 4);
 8006c1a:	4b92      	ldr	r3, [pc, #584]	; (8006e64 <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	4618      	mov	r0, r3
 8006c20:	f7f9 fc8a 	bl	8000538 <__aeabi_f2d>
 8006c24:	4604      	mov	r4, r0
 8006c26:	460d      	mov	r5, r1
 8006c28:	4b89      	ldr	r3, [pc, #548]	; (8006e50 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	4618      	mov	r0, r3
 8006c2e:	f7f9 fc83 	bl	8000538 <__aeabi_f2d>
 8006c32:	a381      	add	r3, pc, #516	; (adr r3, 8006e38 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8006c34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c38:	f7f9 fcd6 	bl	80005e8 <__aeabi_dmul>
 8006c3c:	4602      	mov	r2, r0
 8006c3e:	460b      	mov	r3, r1
 8006c40:	4620      	mov	r0, r4
 8006c42:	4629      	mov	r1, r5
 8006c44:	f7f9 fb1a 	bl	800027c <__adddf3>
 8006c48:	4603      	mov	r3, r0
 8006c4a:	460c      	mov	r4, r1
 8006c4c:	4618      	mov	r0, r3
 8006c4e:	4621      	mov	r1, r4
 8006c50:	f7f9 ff7a 	bl	8000b48 <__aeabi_d2f>
 8006c54:	4602      	mov	r2, r0
 8006c56:	4b83      	ldr	r3, [pc, #524]	; (8006e64 <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8006c58:	601a      	str	r2, [r3, #0]
		dist_r = dist_r + cnt_r * (DIAMETER * M_PI * 11 / 40 / 4096 / 4);
 8006c5a:	4b83      	ldr	r3, [pc, #524]	; (8006e68 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	4618      	mov	r0, r3
 8006c60:	f7f9 fc6a 	bl	8000538 <__aeabi_f2d>
 8006c64:	4604      	mov	r4, r0
 8006c66:	460d      	mov	r5, r1
 8006c68:	4b7b      	ldr	r3, [pc, #492]	; (8006e58 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	4618      	mov	r0, r3
 8006c6e:	f7f9 fc63 	bl	8000538 <__aeabi_f2d>
 8006c72:	a371      	add	r3, pc, #452	; (adr r3, 8006e38 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8006c74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c78:	f7f9 fcb6 	bl	80005e8 <__aeabi_dmul>
 8006c7c:	4602      	mov	r2, r0
 8006c7e:	460b      	mov	r3, r1
 8006c80:	4620      	mov	r0, r4
 8006c82:	4629      	mov	r1, r5
 8006c84:	f7f9 fafa 	bl	800027c <__adddf3>
 8006c88:	4603      	mov	r3, r0
 8006c8a:	460c      	mov	r4, r1
 8006c8c:	4618      	mov	r0, r3
 8006c8e:	4621      	mov	r1, r4
 8006c90:	f7f9 ff5a 	bl	8000b48 <__aeabi_d2f>
 8006c94:	4602      	mov	r2, r0
 8006c96:	4b74      	ldr	r3, [pc, #464]	; (8006e68 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8006c98:	601a      	str	r2, [r3, #0]

		speed_l = cnt_l * (DIAMETER * M_PI * 11 / 40 / 4096 / 4) / 0.001;
 8006c9a:	4b6d      	ldr	r3, [pc, #436]	; (8006e50 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	4618      	mov	r0, r3
 8006ca0:	f7f9 fc4a 	bl	8000538 <__aeabi_f2d>
 8006ca4:	a364      	add	r3, pc, #400	; (adr r3, 8006e38 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8006ca6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006caa:	f7f9 fc9d 	bl	80005e8 <__aeabi_dmul>
 8006cae:	4603      	mov	r3, r0
 8006cb0:	460c      	mov	r4, r1
 8006cb2:	4618      	mov	r0, r3
 8006cb4:	4621      	mov	r1, r4
 8006cb6:	a362      	add	r3, pc, #392	; (adr r3, 8006e40 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8006cb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cbc:	f7f9 fdbe 	bl	800083c <__aeabi_ddiv>
 8006cc0:	4603      	mov	r3, r0
 8006cc2:	460c      	mov	r4, r1
 8006cc4:	4618      	mov	r0, r3
 8006cc6:	4621      	mov	r1, r4
 8006cc8:	f7f9 ff3e 	bl	8000b48 <__aeabi_d2f>
 8006ccc:	4602      	mov	r2, r0
 8006cce:	4b67      	ldr	r3, [pc, #412]	; (8006e6c <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 8006cd0:	601a      	str	r2, [r3, #0]
		speed_r = cnt_r * (DIAMETER * M_PI * 11 / 40 / 4096 / 4) / 0.001;
 8006cd2:	4b61      	ldr	r3, [pc, #388]	; (8006e58 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	4618      	mov	r0, r3
 8006cd8:	f7f9 fc2e 	bl	8000538 <__aeabi_f2d>
 8006cdc:	a356      	add	r3, pc, #344	; (adr r3, 8006e38 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8006cde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ce2:	f7f9 fc81 	bl	80005e8 <__aeabi_dmul>
 8006ce6:	4603      	mov	r3, r0
 8006ce8:	460c      	mov	r4, r1
 8006cea:	4618      	mov	r0, r3
 8006cec:	4621      	mov	r1, r4
 8006cee:	a354      	add	r3, pc, #336	; (adr r3, 8006e40 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8006cf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cf4:	f7f9 fda2 	bl	800083c <__aeabi_ddiv>
 8006cf8:	4603      	mov	r3, r0
 8006cfa:	460c      	mov	r4, r1
 8006cfc:	4618      	mov	r0, r3
 8006cfe:	4621      	mov	r1, r4
 8006d00:	f7f9 ff22 	bl	8000b48 <__aeabi_d2f>
 8006d04:	4602      	mov	r2, r0
 8006d06:	4b5a      	ldr	r3, [pc, #360]	; (8006e70 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 8006d08:	601a      	str	r2, [r3, #0]

		TIM4 -> CNT = 0;
 8006d0a:	4b50      	ldr	r3, [pc, #320]	; (8006e4c <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8006d0c:	2200      	movs	r2, #0
 8006d0e:	625a      	str	r2, [r3, #36]	; 0x24
		TIM8 -> CNT = 0;
 8006d10:	4b50      	ldr	r3, [pc, #320]	; (8006e54 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8006d12:	2200      	movs	r2, #0
 8006d14:	625a      	str	r2, [r3, #36]	; 0x24

		if(MF.FLAG.DRV){
 8006d16:	4b57      	ldr	r3, [pc, #348]	; (8006e74 <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 8006d18:	881b      	ldrh	r3, [r3, #0]
 8006d1a:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8006d1e:	b2db      	uxtb	r3, r3
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	f000 81af 	beq.w	8007084 <HAL_TIM_PeriodElapsedCallback+0x50c>
			target_speed_l += accel_l * 0.001;
 8006d26:	4b54      	ldr	r3, [pc, #336]	; (8006e78 <HAL_TIM_PeriodElapsedCallback+0x300>)
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	4618      	mov	r0, r3
 8006d2c:	f7f9 fc04 	bl	8000538 <__aeabi_f2d>
 8006d30:	a343      	add	r3, pc, #268	; (adr r3, 8006e40 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8006d32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d36:	f7f9 fc57 	bl	80005e8 <__aeabi_dmul>
 8006d3a:	4603      	mov	r3, r0
 8006d3c:	460c      	mov	r4, r1
 8006d3e:	4625      	mov	r5, r4
 8006d40:	461c      	mov	r4, r3
 8006d42:	4b4e      	ldr	r3, [pc, #312]	; (8006e7c <HAL_TIM_PeriodElapsedCallback+0x304>)
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	4618      	mov	r0, r3
 8006d48:	f7f9 fbf6 	bl	8000538 <__aeabi_f2d>
 8006d4c:	4602      	mov	r2, r0
 8006d4e:	460b      	mov	r3, r1
 8006d50:	4620      	mov	r0, r4
 8006d52:	4629      	mov	r1, r5
 8006d54:	f7f9 fa92 	bl	800027c <__adddf3>
 8006d58:	4603      	mov	r3, r0
 8006d5a:	460c      	mov	r4, r1
 8006d5c:	4618      	mov	r0, r3
 8006d5e:	4621      	mov	r1, r4
 8006d60:	f7f9 fef2 	bl	8000b48 <__aeabi_d2f>
 8006d64:	4602      	mov	r2, r0
 8006d66:	4b45      	ldr	r3, [pc, #276]	; (8006e7c <HAL_TIM_PeriodElapsedCallback+0x304>)
 8006d68:	601a      	str	r2, [r3, #0]
			target_speed_l = max(min(target_speed_l, speed_max_l), speed_min_l);
 8006d6a:	4b44      	ldr	r3, [pc, #272]	; (8006e7c <HAL_TIM_PeriodElapsedCallback+0x304>)
 8006d6c:	ed93 7a00 	vldr	s14, [r3]
 8006d70:	4b43      	ldr	r3, [pc, #268]	; (8006e80 <HAL_TIM_PeriodElapsedCallback+0x308>)
 8006d72:	edd3 7a00 	vldr	s15, [r3]
 8006d76:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006d7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006d7e:	dd03      	ble.n	8006d88 <HAL_TIM_PeriodElapsedCallback+0x210>
 8006d80:	4b3f      	ldr	r3, [pc, #252]	; (8006e80 <HAL_TIM_PeriodElapsedCallback+0x308>)
 8006d82:	edd3 7a00 	vldr	s15, [r3]
 8006d86:	e002      	b.n	8006d8e <HAL_TIM_PeriodElapsedCallback+0x216>
 8006d88:	4b3c      	ldr	r3, [pc, #240]	; (8006e7c <HAL_TIM_PeriodElapsedCallback+0x304>)
 8006d8a:	edd3 7a00 	vldr	s15, [r3]
 8006d8e:	4b3d      	ldr	r3, [pc, #244]	; (8006e84 <HAL_TIM_PeriodElapsedCallback+0x30c>)
 8006d90:	ed93 7a00 	vldr	s14, [r3]
 8006d94:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006d98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006d9c:	dd10      	ble.n	8006dc0 <HAL_TIM_PeriodElapsedCallback+0x248>
 8006d9e:	4b37      	ldr	r3, [pc, #220]	; (8006e7c <HAL_TIM_PeriodElapsedCallback+0x304>)
 8006da0:	ed93 7a00 	vldr	s14, [r3]
 8006da4:	4b36      	ldr	r3, [pc, #216]	; (8006e80 <HAL_TIM_PeriodElapsedCallback+0x308>)
 8006da6:	edd3 7a00 	vldr	s15, [r3]
 8006daa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006dae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006db2:	dd02      	ble.n	8006dba <HAL_TIM_PeriodElapsedCallback+0x242>
 8006db4:	4b32      	ldr	r3, [pc, #200]	; (8006e80 <HAL_TIM_PeriodElapsedCallback+0x308>)
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	e004      	b.n	8006dc4 <HAL_TIM_PeriodElapsedCallback+0x24c>
 8006dba:	4b30      	ldr	r3, [pc, #192]	; (8006e7c <HAL_TIM_PeriodElapsedCallback+0x304>)
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	e001      	b.n	8006dc4 <HAL_TIM_PeriodElapsedCallback+0x24c>
 8006dc0:	4b30      	ldr	r3, [pc, #192]	; (8006e84 <HAL_TIM_PeriodElapsedCallback+0x30c>)
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	4a2d      	ldr	r2, [pc, #180]	; (8006e7c <HAL_TIM_PeriodElapsedCallback+0x304>)
 8006dc6:	6013      	str	r3, [r2, #0]
			epsilon_l = target_speed_l - speed_l;
 8006dc8:	4b2c      	ldr	r3, [pc, #176]	; (8006e7c <HAL_TIM_PeriodElapsedCallback+0x304>)
 8006dca:	ed93 7a00 	vldr	s14, [r3]
 8006dce:	4b27      	ldr	r3, [pc, #156]	; (8006e6c <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 8006dd0:	edd3 7a00 	vldr	s15, [r3]
 8006dd4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006dd8:	4b2b      	ldr	r3, [pc, #172]	; (8006e88 <HAL_TIM_PeriodElapsedCallback+0x310>)
 8006dda:	edc3 7a00 	vstr	s15, [r3]
			pulse_l = Kp * epsilon_l;
 8006dde:	4b2a      	ldr	r3, [pc, #168]	; (8006e88 <HAL_TIM_PeriodElapsedCallback+0x310>)
 8006de0:	edd3 7a00 	vldr	s15, [r3]
 8006de4:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8006de8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006dec:	4b27      	ldr	r3, [pc, #156]	; (8006e8c <HAL_TIM_PeriodElapsedCallback+0x314>)
 8006dee:	edc3 7a00 	vstr	s15, [r3]
			if(pulse_l > 0){
 8006df2:	4b26      	ldr	r3, [pc, #152]	; (8006e8c <HAL_TIM_PeriodElapsedCallback+0x314>)
 8006df4:	edd3 7a00 	vldr	s15, [r3]
 8006df8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006dfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006e00:	dd48      	ble.n	8006e94 <HAL_TIM_PeriodElapsedCallback+0x31c>
				drive_dir(0, 0);
 8006e02:	2100      	movs	r1, #0
 8006e04:	2000      	movs	r0, #0
 8006e06:	f7fd fef1 	bl	8004bec <drive_dir>
				ConfigOC.Pulse = pulse_l;
 8006e0a:	4b20      	ldr	r3, [pc, #128]	; (8006e8c <HAL_TIM_PeriodElapsedCallback+0x314>)
 8006e0c:	edd3 7a00 	vldr	s15, [r3]
 8006e10:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006e14:	ee17 3a90 	vmov	r3, s15
 8006e18:	613b      	str	r3, [r7, #16]
				HAL_TIM_PWM_ConfigChannel(&htim2, &ConfigOC, TIM_CHANNEL_1);
 8006e1a:	f107 030c 	add.w	r3, r7, #12
 8006e1e:	2200      	movs	r2, #0
 8006e20:	4619      	mov	r1, r3
 8006e22:	481b      	ldr	r0, [pc, #108]	; (8006e90 <HAL_TIM_PeriodElapsedCallback+0x318>)
 8006e24:	f7fc fe52 	bl	8003acc <HAL_TIM_PWM_ConfigChannel>
				HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_1);
 8006e28:	2100      	movs	r1, #0
 8006e2a:	4819      	ldr	r0, [pc, #100]	; (8006e90 <HAL_TIM_PeriodElapsedCallback+0x318>)
 8006e2c:	f7fc fc3e 	bl	80036ac <HAL_TIM_PWM_Start>
 8006e30:	e051      	b.n	8006ed6 <HAL_TIM_PeriodElapsedCallback+0x35e>
 8006e32:	bf00      	nop
 8006e34:	f3af 8000 	nop.w
 8006e38:	c1239813 	.word	0xc1239813
 8006e3c:	3f54e844 	.word	0x3f54e844
 8006e40:	d2f1a9fc 	.word	0xd2f1a9fc
 8006e44:	3f50624d 	.word	0x3f50624d
 8006e48:	20000a74 	.word	0x20000a74
 8006e4c:	40000800 	.word	0x40000800
 8006e50:	20000284 	.word	0x20000284
 8006e54:	40010400 	.word	0x40010400
 8006e58:	20000a6c 	.word	0x20000a6c
 8006e5c:	471c4000 	.word	0x471c4000
 8006e60:	477fff00 	.word	0x477fff00
 8006e64:	20000e2c 	.word	0x20000e2c
 8006e68:	200009b8 	.word	0x200009b8
 8006e6c:	200009bc 	.word	0x200009bc
 8006e70:	20000290 	.word	0x20000290
 8006e74:	20000e18 	.word	0x20000e18
 8006e78:	20000c10 	.word	0x20000c10
 8006e7c:	20000ab8 	.word	0x20000ab8
 8006e80:	20000648 	.word	0x20000648
 8006e84:	20000a18 	.word	0x20000a18
 8006e88:	20000a24 	.word	0x20000a24
 8006e8c:	20000a68 	.word	0x20000a68
 8006e90:	20000acc 	.word	0x20000acc
			}
			else if(pulse_l < 0){
 8006e94:	4bbe      	ldr	r3, [pc, #760]	; (8007190 <HAL_TIM_PeriodElapsedCallback+0x618>)
 8006e96:	edd3 7a00 	vldr	s15, [r3]
 8006e9a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006e9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ea2:	d518      	bpl.n	8006ed6 <HAL_TIM_PeriodElapsedCallback+0x35e>
				drive_dir(0, 1);
 8006ea4:	2101      	movs	r1, #1
 8006ea6:	2000      	movs	r0, #0
 8006ea8:	f7fd fea0 	bl	8004bec <drive_dir>
				ConfigOC.Pulse = -pulse_l;
 8006eac:	4bb8      	ldr	r3, [pc, #736]	; (8007190 <HAL_TIM_PeriodElapsedCallback+0x618>)
 8006eae:	edd3 7a00 	vldr	s15, [r3]
 8006eb2:	eef1 7a67 	vneg.f32	s15, s15
 8006eb6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006eba:	ee17 3a90 	vmov	r3, s15
 8006ebe:	613b      	str	r3, [r7, #16]
				HAL_TIM_PWM_ConfigChannel(&htim2, &ConfigOC, TIM_CHANNEL_1);
 8006ec0:	f107 030c 	add.w	r3, r7, #12
 8006ec4:	2200      	movs	r2, #0
 8006ec6:	4619      	mov	r1, r3
 8006ec8:	48b2      	ldr	r0, [pc, #712]	; (8007194 <HAL_TIM_PeriodElapsedCallback+0x61c>)
 8006eca:	f7fc fdff 	bl	8003acc <HAL_TIM_PWM_ConfigChannel>
				HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_1);
 8006ece:	2100      	movs	r1, #0
 8006ed0:	48b0      	ldr	r0, [pc, #704]	; (8007194 <HAL_TIM_PeriodElapsedCallback+0x61c>)
 8006ed2:	f7fc fbeb 	bl	80036ac <HAL_TIM_PWM_Start>
			}

			target_speed_r += accel_r * 0.001;
 8006ed6:	4bb0      	ldr	r3, [pc, #704]	; (8007198 <HAL_TIM_PeriodElapsedCallback+0x620>)
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	4618      	mov	r0, r3
 8006edc:	f7f9 fb2c 	bl	8000538 <__aeabi_f2d>
 8006ee0:	a3a7      	add	r3, pc, #668	; (adr r3, 8007180 <HAL_TIM_PeriodElapsedCallback+0x608>)
 8006ee2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ee6:	f7f9 fb7f 	bl	80005e8 <__aeabi_dmul>
 8006eea:	4603      	mov	r3, r0
 8006eec:	460c      	mov	r4, r1
 8006eee:	4625      	mov	r5, r4
 8006ef0:	461c      	mov	r4, r3
 8006ef2:	4baa      	ldr	r3, [pc, #680]	; (800719c <HAL_TIM_PeriodElapsedCallback+0x624>)
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	4618      	mov	r0, r3
 8006ef8:	f7f9 fb1e 	bl	8000538 <__aeabi_f2d>
 8006efc:	4602      	mov	r2, r0
 8006efe:	460b      	mov	r3, r1
 8006f00:	4620      	mov	r0, r4
 8006f02:	4629      	mov	r1, r5
 8006f04:	f7f9 f9ba 	bl	800027c <__adddf3>
 8006f08:	4603      	mov	r3, r0
 8006f0a:	460c      	mov	r4, r1
 8006f0c:	4618      	mov	r0, r3
 8006f0e:	4621      	mov	r1, r4
 8006f10:	f7f9 fe1a 	bl	8000b48 <__aeabi_d2f>
 8006f14:	4602      	mov	r2, r0
 8006f16:	4ba1      	ldr	r3, [pc, #644]	; (800719c <HAL_TIM_PeriodElapsedCallback+0x624>)
 8006f18:	601a      	str	r2, [r3, #0]
			target_speed_r = max(min(target_speed_r, speed_max_r), speed_min_r);
 8006f1a:	4ba0      	ldr	r3, [pc, #640]	; (800719c <HAL_TIM_PeriodElapsedCallback+0x624>)
 8006f1c:	ed93 7a00 	vldr	s14, [r3]
 8006f20:	4b9f      	ldr	r3, [pc, #636]	; (80071a0 <HAL_TIM_PeriodElapsedCallback+0x628>)
 8006f22:	edd3 7a00 	vldr	s15, [r3]
 8006f26:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006f2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006f2e:	dd03      	ble.n	8006f38 <HAL_TIM_PeriodElapsedCallback+0x3c0>
 8006f30:	4b9b      	ldr	r3, [pc, #620]	; (80071a0 <HAL_TIM_PeriodElapsedCallback+0x628>)
 8006f32:	edd3 7a00 	vldr	s15, [r3]
 8006f36:	e002      	b.n	8006f3e <HAL_TIM_PeriodElapsedCallback+0x3c6>
 8006f38:	4b98      	ldr	r3, [pc, #608]	; (800719c <HAL_TIM_PeriodElapsedCallback+0x624>)
 8006f3a:	edd3 7a00 	vldr	s15, [r3]
 8006f3e:	4b99      	ldr	r3, [pc, #612]	; (80071a4 <HAL_TIM_PeriodElapsedCallback+0x62c>)
 8006f40:	ed93 7a00 	vldr	s14, [r3]
 8006f44:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006f48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006f4c:	dd10      	ble.n	8006f70 <HAL_TIM_PeriodElapsedCallback+0x3f8>
 8006f4e:	4b93      	ldr	r3, [pc, #588]	; (800719c <HAL_TIM_PeriodElapsedCallback+0x624>)
 8006f50:	ed93 7a00 	vldr	s14, [r3]
 8006f54:	4b92      	ldr	r3, [pc, #584]	; (80071a0 <HAL_TIM_PeriodElapsedCallback+0x628>)
 8006f56:	edd3 7a00 	vldr	s15, [r3]
 8006f5a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006f5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006f62:	dd02      	ble.n	8006f6a <HAL_TIM_PeriodElapsedCallback+0x3f2>
 8006f64:	4b8e      	ldr	r3, [pc, #568]	; (80071a0 <HAL_TIM_PeriodElapsedCallback+0x628>)
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	e004      	b.n	8006f74 <HAL_TIM_PeriodElapsedCallback+0x3fc>
 8006f6a:	4b8c      	ldr	r3, [pc, #560]	; (800719c <HAL_TIM_PeriodElapsedCallback+0x624>)
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	e001      	b.n	8006f74 <HAL_TIM_PeriodElapsedCallback+0x3fc>
 8006f70:	4b8c      	ldr	r3, [pc, #560]	; (80071a4 <HAL_TIM_PeriodElapsedCallback+0x62c>)
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	4a89      	ldr	r2, [pc, #548]	; (800719c <HAL_TIM_PeriodElapsedCallback+0x624>)
 8006f76:	6013      	str	r3, [r2, #0]
			epsilon_r = target_speed_r - speed_r;
 8006f78:	4b88      	ldr	r3, [pc, #544]	; (800719c <HAL_TIM_PeriodElapsedCallback+0x624>)
 8006f7a:	ed93 7a00 	vldr	s14, [r3]
 8006f7e:	4b8a      	ldr	r3, [pc, #552]	; (80071a8 <HAL_TIM_PeriodElapsedCallback+0x630>)
 8006f80:	edd3 7a00 	vldr	s15, [r3]
 8006f84:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006f88:	4b88      	ldr	r3, [pc, #544]	; (80071ac <HAL_TIM_PeriodElapsedCallback+0x634>)
 8006f8a:	edc3 7a00 	vstr	s15, [r3]
			pulse_r = Kp * epsilon_r;
 8006f8e:	4b87      	ldr	r3, [pc, #540]	; (80071ac <HAL_TIM_PeriodElapsedCallback+0x634>)
 8006f90:	edd3 7a00 	vldr	s15, [r3]
 8006f94:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8006f98:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006f9c:	4b84      	ldr	r3, [pc, #528]	; (80071b0 <HAL_TIM_PeriodElapsedCallback+0x638>)
 8006f9e:	edc3 7a00 	vstr	s15, [r3]
			if(pulse_r > 0){
 8006fa2:	4b83      	ldr	r3, [pc, #524]	; (80071b0 <HAL_TIM_PeriodElapsedCallback+0x638>)
 8006fa4:	edd3 7a00 	vldr	s15, [r3]
 8006fa8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006fac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006fb0:	dd17      	ble.n	8006fe2 <HAL_TIM_PeriodElapsedCallback+0x46a>
				drive_dir(1, 0);
 8006fb2:	2100      	movs	r1, #0
 8006fb4:	2001      	movs	r0, #1
 8006fb6:	f7fd fe19 	bl	8004bec <drive_dir>
				ConfigOC.Pulse = pulse_r;
 8006fba:	4b7d      	ldr	r3, [pc, #500]	; (80071b0 <HAL_TIM_PeriodElapsedCallback+0x638>)
 8006fbc:	edd3 7a00 	vldr	s15, [r3]
 8006fc0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006fc4:	ee17 3a90 	vmov	r3, s15
 8006fc8:	613b      	str	r3, [r7, #16]
				HAL_TIM_PWM_ConfigChannel(&htim2, &ConfigOC, TIM_CHANNEL_4);
 8006fca:	f107 030c 	add.w	r3, r7, #12
 8006fce:	220c      	movs	r2, #12
 8006fd0:	4619      	mov	r1, r3
 8006fd2:	4870      	ldr	r0, [pc, #448]	; (8007194 <HAL_TIM_PeriodElapsedCallback+0x61c>)
 8006fd4:	f7fc fd7a 	bl	8003acc <HAL_TIM_PWM_ConfigChannel>
				HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_4);
 8006fd8:	210c      	movs	r1, #12
 8006fda:	486e      	ldr	r0, [pc, #440]	; (8007194 <HAL_TIM_PeriodElapsedCallback+0x61c>)
 8006fdc:	f7fc fb66 	bl	80036ac <HAL_TIM_PWM_Start>
 8006fe0:	e020      	b.n	8007024 <HAL_TIM_PeriodElapsedCallback+0x4ac>
			}
			else if(pulse_r < 0){
 8006fe2:	4b73      	ldr	r3, [pc, #460]	; (80071b0 <HAL_TIM_PeriodElapsedCallback+0x638>)
 8006fe4:	edd3 7a00 	vldr	s15, [r3]
 8006fe8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006fec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ff0:	d518      	bpl.n	8007024 <HAL_TIM_PeriodElapsedCallback+0x4ac>
				drive_dir(1, 1);
 8006ff2:	2101      	movs	r1, #1
 8006ff4:	2001      	movs	r0, #1
 8006ff6:	f7fd fdf9 	bl	8004bec <drive_dir>
				ConfigOC.Pulse = -pulse_r;
 8006ffa:	4b6d      	ldr	r3, [pc, #436]	; (80071b0 <HAL_TIM_PeriodElapsedCallback+0x638>)
 8006ffc:	edd3 7a00 	vldr	s15, [r3]
 8007000:	eef1 7a67 	vneg.f32	s15, s15
 8007004:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007008:	ee17 3a90 	vmov	r3, s15
 800700c:	613b      	str	r3, [r7, #16]
				HAL_TIM_PWM_ConfigChannel(&htim2, &ConfigOC, TIM_CHANNEL_4);
 800700e:	f107 030c 	add.w	r3, r7, #12
 8007012:	220c      	movs	r2, #12
 8007014:	4619      	mov	r1, r3
 8007016:	485f      	ldr	r0, [pc, #380]	; (8007194 <HAL_TIM_PeriodElapsedCallback+0x61c>)
 8007018:	f7fc fd58 	bl	8003acc <HAL_TIM_PWM_ConfigChannel>
				HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_4);
 800701c:	210c      	movs	r1, #12
 800701e:	485d      	ldr	r0, [pc, #372]	; (8007194 <HAL_TIM_PeriodElapsedCallback+0x61c>)
 8007020:	f7fc fb44 	bl	80036ac <HAL_TIM_PWM_Start>
			}
			if(cnt >= 5 && MF.FLAG.LOG){
 8007024:	4b63      	ldr	r3, [pc, #396]	; (80071b4 <HAL_TIM_PeriodElapsedCallback+0x63c>)
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	2b04      	cmp	r3, #4
 800702a:	dd33      	ble.n	8007094 <HAL_TIM_PeriodElapsedCallback+0x51c>
 800702c:	4b62      	ldr	r3, [pc, #392]	; (80071b8 <HAL_TIM_PeriodElapsedCallback+0x640>)
 800702e:	881b      	ldrh	r3, [r3, #0]
 8007030:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8007034:	b2db      	uxtb	r3, r3
 8007036:	2b00      	cmp	r3, #0
 8007038:	d02c      	beq.n	8007094 <HAL_TIM_PeriodElapsedCallback+0x51c>
				cnt = 0;
 800703a:	4b5e      	ldr	r3, [pc, #376]	; (80071b4 <HAL_TIM_PeriodElapsedCallback+0x63c>)
 800703c:	2200      	movs	r2, #0
 800703e:	601a      	str	r2, [r3, #0]
				if(get_cnt < log_allay){
 8007040:	4b5e      	ldr	r3, [pc, #376]	; (80071bc <HAL_TIM_PeriodElapsedCallback+0x644>)
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	2bc7      	cmp	r3, #199	; 0xc7
 8007046:	dc25      	bgt.n	8007094 <HAL_TIM_PeriodElapsedCallback+0x51c>
					get_speed_l[get_cnt] = speed_l;
 8007048:	4b5d      	ldr	r3, [pc, #372]	; (80071c0 <HAL_TIM_PeriodElapsedCallback+0x648>)
 800704a:	edd3 7a00 	vldr	s15, [r3]
 800704e:	4b5b      	ldr	r3, [pc, #364]	; (80071bc <HAL_TIM_PeriodElapsedCallback+0x644>)
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007056:	ee17 1a90 	vmov	r1, s15
 800705a:	4a5a      	ldr	r2, [pc, #360]	; (80071c4 <HAL_TIM_PeriodElapsedCallback+0x64c>)
 800705c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					get_speed_r[get_cnt] = speed_r;
 8007060:	4b51      	ldr	r3, [pc, #324]	; (80071a8 <HAL_TIM_PeriodElapsedCallback+0x630>)
 8007062:	edd3 7a00 	vldr	s15, [r3]
 8007066:	4b55      	ldr	r3, [pc, #340]	; (80071bc <HAL_TIM_PeriodElapsedCallback+0x644>)
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800706e:	ee17 1a90 	vmov	r1, s15
 8007072:	4a55      	ldr	r2, [pc, #340]	; (80071c8 <HAL_TIM_PeriodElapsedCallback+0x650>)
 8007074:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					get_cnt++;
 8007078:	4b50      	ldr	r3, [pc, #320]	; (80071bc <HAL_TIM_PeriodElapsedCallback+0x644>)
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	3301      	adds	r3, #1
 800707e:	4a4f      	ldr	r2, [pc, #316]	; (80071bc <HAL_TIM_PeriodElapsedCallback+0x644>)
 8007080:	6013      	str	r3, [r2, #0]
 8007082:	e007      	b.n	8007094 <HAL_TIM_PeriodElapsedCallback+0x51c>
				}
			}
		}else{
			drive_dir(0, 2);
 8007084:	2102      	movs	r1, #2
 8007086:	2000      	movs	r0, #0
 8007088:	f7fd fdb0 	bl	8004bec <drive_dir>
			drive_dir(1, 2);
 800708c:	2102      	movs	r1, #2
 800708e:	2001      	movs	r0, #1
 8007090:	f7fd fdac 	bl	8004bec <drive_dir>
		}

		//gyro interrupt
		degree_z += gyro_read_z() * 0.001;
 8007094:	f7ff fd14 	bl	8006ac0 <gyro_read_z>
 8007098:	ee10 3a10 	vmov	r3, s0
 800709c:	4618      	mov	r0, r3
 800709e:	f7f9 fa4b 	bl	8000538 <__aeabi_f2d>
 80070a2:	a337      	add	r3, pc, #220	; (adr r3, 8007180 <HAL_TIM_PeriodElapsedCallback+0x608>)
 80070a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070a8:	f7f9 fa9e 	bl	80005e8 <__aeabi_dmul>
 80070ac:	4603      	mov	r3, r0
 80070ae:	460c      	mov	r4, r1
 80070b0:	4625      	mov	r5, r4
 80070b2:	461c      	mov	r4, r3
 80070b4:	4b45      	ldr	r3, [pc, #276]	; (80071cc <HAL_TIM_PeriodElapsedCallback+0x654>)
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	4618      	mov	r0, r3
 80070ba:	f7f9 fa3d 	bl	8000538 <__aeabi_f2d>
 80070be:	4602      	mov	r2, r0
 80070c0:	460b      	mov	r3, r1
 80070c2:	4620      	mov	r0, r4
 80070c4:	4629      	mov	r1, r5
 80070c6:	f7f9 f8d9 	bl	800027c <__adddf3>
 80070ca:	4603      	mov	r3, r0
 80070cc:	460c      	mov	r4, r1
 80070ce:	4618      	mov	r0, r3
 80070d0:	4621      	mov	r1, r4
 80070d2:	f7f9 fd39 	bl	8000b48 <__aeabi_d2f>
 80070d6:	4602      	mov	r2, r0
 80070d8:	4b3c      	ldr	r3, [pc, #240]	; (80071cc <HAL_TIM_PeriodElapsedCallback+0x654>)
 80070da:	601a      	str	r2, [r3, #0]

		if(MF.FLAG.ENKAI){
 80070dc:	4b36      	ldr	r3, [pc, #216]	; (80071b8 <HAL_TIM_PeriodElapsedCallback+0x640>)
 80070de:	881b      	ldrh	r3, [r3, #0]
 80070e0:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80070e4:	b2db      	uxtb	r3, r3
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	f000 8153 	beq.w	8007392 <HAL_TIM_PeriodElapsedCallback+0x81a>
			target_dist = TREAD*M_PI/360*(degree_z-target_degree_z);
 80070ec:	4b37      	ldr	r3, [pc, #220]	; (80071cc <HAL_TIM_PeriodElapsedCallback+0x654>)
 80070ee:	ed93 7a00 	vldr	s14, [r3]
 80070f2:	4b37      	ldr	r3, [pc, #220]	; (80071d0 <HAL_TIM_PeriodElapsedCallback+0x658>)
 80070f4:	edd3 7a00 	vldr	s15, [r3]
 80070f8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80070fc:	ee17 0a90 	vmov	r0, s15
 8007100:	f7f9 fa1a 	bl	8000538 <__aeabi_f2d>
 8007104:	a320      	add	r3, pc, #128	; (adr r3, 8007188 <HAL_TIM_PeriodElapsedCallback+0x610>)
 8007106:	e9d3 2300 	ldrd	r2, r3, [r3]
 800710a:	f7f9 fa6d 	bl	80005e8 <__aeabi_dmul>
 800710e:	4603      	mov	r3, r0
 8007110:	460c      	mov	r4, r1
 8007112:	4618      	mov	r0, r3
 8007114:	4621      	mov	r1, r4
 8007116:	f7f9 fd17 	bl	8000b48 <__aeabi_d2f>
 800711a:	4602      	mov	r2, r0
 800711c:	4b2d      	ldr	r3, [pc, #180]	; (80071d4 <HAL_TIM_PeriodElapsedCallback+0x65c>)
 800711e:	601a      	str	r2, [r3, #0]
			if(target_dist > 0){
 8007120:	4b2c      	ldr	r3, [pc, #176]	; (80071d4 <HAL_TIM_PeriodElapsedCallback+0x65c>)
 8007122:	edd3 7a00 	vldr	s15, [r3]
 8007126:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800712a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800712e:	dd57      	ble.n	80071e0 <HAL_TIM_PeriodElapsedCallback+0x668>
				target_speed_l = sqrt(2*accel_l*target_dist);
 8007130:	4b29      	ldr	r3, [pc, #164]	; (80071d8 <HAL_TIM_PeriodElapsedCallback+0x660>)
 8007132:	edd3 7a00 	vldr	s15, [r3]
 8007136:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800713a:	4b26      	ldr	r3, [pc, #152]	; (80071d4 <HAL_TIM_PeriodElapsedCallback+0x65c>)
 800713c:	edd3 7a00 	vldr	s15, [r3]
 8007140:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007144:	ee17 0a90 	vmov	r0, s15
 8007148:	f7f9 f9f6 	bl	8000538 <__aeabi_f2d>
 800714c:	4603      	mov	r3, r0
 800714e:	460c      	mov	r4, r1
 8007150:	ec44 3b10 	vmov	d0, r3, r4
 8007154:	f003 fd4e 	bl	800abf4 <sqrt>
 8007158:	ec54 3b10 	vmov	r3, r4, d0
 800715c:	4618      	mov	r0, r3
 800715e:	4621      	mov	r1, r4
 8007160:	f7f9 fcf2 	bl	8000b48 <__aeabi_d2f>
 8007164:	4602      	mov	r2, r0
 8007166:	4b1d      	ldr	r3, [pc, #116]	; (80071dc <HAL_TIM_PeriodElapsedCallback+0x664>)
 8007168:	601a      	str	r2, [r3, #0]
				target_speed_r = -1 * target_speed_l;
 800716a:	4b1c      	ldr	r3, [pc, #112]	; (80071dc <HAL_TIM_PeriodElapsedCallback+0x664>)
 800716c:	edd3 7a00 	vldr	s15, [r3]
 8007170:	eef1 7a67 	vneg.f32	s15, s15
 8007174:	4b09      	ldr	r3, [pc, #36]	; (800719c <HAL_TIM_PeriodElapsedCallback+0x624>)
 8007176:	edc3 7a00 	vstr	s15, [r3]
 800717a:	e05e      	b.n	800723a <HAL_TIM_PeriodElapsedCallback+0x6c2>
 800717c:	f3af 8000 	nop.w
 8007180:	d2f1a9fc 	.word	0xd2f1a9fc
 8007184:	3f50624d 	.word	0x3f50624d
 8007188:	d7653223 	.word	0xd7653223
 800718c:	3fe26e40 	.word	0x3fe26e40
 8007190:	20000a68 	.word	0x20000a68
 8007194:	20000acc 	.word	0x20000acc
 8007198:	200009b0 	.word	0x200009b0
 800719c:	20000178 	.word	0x20000178
 80071a0:	2000017c 	.word	0x2000017c
 80071a4:	20000e1c 	.word	0x20000e1c
 80071a8:	20000290 	.word	0x20000290
 80071ac:	20000ac4 	.word	0x20000ac4
 80071b0:	2000064c 	.word	0x2000064c
 80071b4:	200000e8 	.word	0x200000e8
 80071b8:	20000e18 	.word	0x20000e18
 80071bc:	200000ec 	.word	0x200000ec
 80071c0:	200009bc 	.word	0x200009bc
 80071c4:	20000650 	.word	0x20000650
 80071c8:	20000328 	.word	0x20000328
 80071cc:	20000a20 	.word	0x20000a20
 80071d0:	20000ab4 	.word	0x20000ab4
 80071d4:	20000e24 	.word	0x20000e24
 80071d8:	20000c10 	.word	0x20000c10
 80071dc:	20000ab8 	.word	0x20000ab8
			}else{
				target_speed_l = sqrt(2*accel_l*target_dist*-1)*-1;
 80071e0:	4b99      	ldr	r3, [pc, #612]	; (8007448 <HAL_TIM_PeriodElapsedCallback+0x8d0>)
 80071e2:	edd3 7a00 	vldr	s15, [r3]
 80071e6:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80071ea:	4b98      	ldr	r3, [pc, #608]	; (800744c <HAL_TIM_PeriodElapsedCallback+0x8d4>)
 80071ec:	edd3 7a00 	vldr	s15, [r3]
 80071f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80071f4:	eef1 7a67 	vneg.f32	s15, s15
 80071f8:	ee17 3a90 	vmov	r3, s15
 80071fc:	4618      	mov	r0, r3
 80071fe:	f7f9 f99b 	bl	8000538 <__aeabi_f2d>
 8007202:	4603      	mov	r3, r0
 8007204:	460c      	mov	r4, r1
 8007206:	ec44 3b10 	vmov	d0, r3, r4
 800720a:	f003 fcf3 	bl	800abf4 <sqrt>
 800720e:	ec54 3b10 	vmov	r3, r4, d0
 8007212:	4618      	mov	r0, r3
 8007214:	4621      	mov	r1, r4
 8007216:	f7f9 fc97 	bl	8000b48 <__aeabi_d2f>
 800721a:	4603      	mov	r3, r0
 800721c:	ee07 3a90 	vmov	s15, r3
 8007220:	eef1 7a67 	vneg.f32	s15, s15
 8007224:	4b8a      	ldr	r3, [pc, #552]	; (8007450 <HAL_TIM_PeriodElapsedCallback+0x8d8>)
 8007226:	edc3 7a00 	vstr	s15, [r3]
				target_speed_r = -1 * target_speed_l;
 800722a:	4b89      	ldr	r3, [pc, #548]	; (8007450 <HAL_TIM_PeriodElapsedCallback+0x8d8>)
 800722c:	edd3 7a00 	vldr	s15, [r3]
 8007230:	eef1 7a67 	vneg.f32	s15, s15
 8007234:	4b87      	ldr	r3, [pc, #540]	; (8007454 <HAL_TIM_PeriodElapsedCallback+0x8dc>)
 8007236:	edc3 7a00 	vstr	s15, [r3]
			}

			epsilon_l = target_speed_l - speed_l;
 800723a:	4b85      	ldr	r3, [pc, #532]	; (8007450 <HAL_TIM_PeriodElapsedCallback+0x8d8>)
 800723c:	ed93 7a00 	vldr	s14, [r3]
 8007240:	4b85      	ldr	r3, [pc, #532]	; (8007458 <HAL_TIM_PeriodElapsedCallback+0x8e0>)
 8007242:	edd3 7a00 	vldr	s15, [r3]
 8007246:	ee77 7a67 	vsub.f32	s15, s14, s15
 800724a:	4b84      	ldr	r3, [pc, #528]	; (800745c <HAL_TIM_PeriodElapsedCallback+0x8e4>)
 800724c:	edc3 7a00 	vstr	s15, [r3]
			pulse_l = Kp * epsilon_l;
 8007250:	4b82      	ldr	r3, [pc, #520]	; (800745c <HAL_TIM_PeriodElapsedCallback+0x8e4>)
 8007252:	edd3 7a00 	vldr	s15, [r3]
 8007256:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 800725a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800725e:	4b80      	ldr	r3, [pc, #512]	; (8007460 <HAL_TIM_PeriodElapsedCallback+0x8e8>)
 8007260:	edc3 7a00 	vstr	s15, [r3]
			if(pulse_l > 0){
 8007264:	4b7e      	ldr	r3, [pc, #504]	; (8007460 <HAL_TIM_PeriodElapsedCallback+0x8e8>)
 8007266:	edd3 7a00 	vldr	s15, [r3]
 800726a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800726e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007272:	dd17      	ble.n	80072a4 <HAL_TIM_PeriodElapsedCallback+0x72c>
				drive_dir(0, 0);
 8007274:	2100      	movs	r1, #0
 8007276:	2000      	movs	r0, #0
 8007278:	f7fd fcb8 	bl	8004bec <drive_dir>
				ConfigOC.Pulse = pulse_l;
 800727c:	4b78      	ldr	r3, [pc, #480]	; (8007460 <HAL_TIM_PeriodElapsedCallback+0x8e8>)
 800727e:	edd3 7a00 	vldr	s15, [r3]
 8007282:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007286:	ee17 3a90 	vmov	r3, s15
 800728a:	613b      	str	r3, [r7, #16]
				HAL_TIM_PWM_ConfigChannel(&htim2, &ConfigOC, TIM_CHANNEL_1);
 800728c:	f107 030c 	add.w	r3, r7, #12
 8007290:	2200      	movs	r2, #0
 8007292:	4619      	mov	r1, r3
 8007294:	4873      	ldr	r0, [pc, #460]	; (8007464 <HAL_TIM_PeriodElapsedCallback+0x8ec>)
 8007296:	f7fc fc19 	bl	8003acc <HAL_TIM_PWM_ConfigChannel>
				HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_1);
 800729a:	2100      	movs	r1, #0
 800729c:	4871      	ldr	r0, [pc, #452]	; (8007464 <HAL_TIM_PeriodElapsedCallback+0x8ec>)
 800729e:	f7fc fa05 	bl	80036ac <HAL_TIM_PWM_Start>
 80072a2:	e020      	b.n	80072e6 <HAL_TIM_PeriodElapsedCallback+0x76e>
			}
			else if(pulse_l < 0){
 80072a4:	4b6e      	ldr	r3, [pc, #440]	; (8007460 <HAL_TIM_PeriodElapsedCallback+0x8e8>)
 80072a6:	edd3 7a00 	vldr	s15, [r3]
 80072aa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80072ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80072b2:	d518      	bpl.n	80072e6 <HAL_TIM_PeriodElapsedCallback+0x76e>
				drive_dir(0, 1);
 80072b4:	2101      	movs	r1, #1
 80072b6:	2000      	movs	r0, #0
 80072b8:	f7fd fc98 	bl	8004bec <drive_dir>
				ConfigOC.Pulse = -pulse_l;
 80072bc:	4b68      	ldr	r3, [pc, #416]	; (8007460 <HAL_TIM_PeriodElapsedCallback+0x8e8>)
 80072be:	edd3 7a00 	vldr	s15, [r3]
 80072c2:	eef1 7a67 	vneg.f32	s15, s15
 80072c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80072ca:	ee17 3a90 	vmov	r3, s15
 80072ce:	613b      	str	r3, [r7, #16]
				HAL_TIM_PWM_ConfigChannel(&htim2, &ConfigOC, TIM_CHANNEL_1);
 80072d0:	f107 030c 	add.w	r3, r7, #12
 80072d4:	2200      	movs	r2, #0
 80072d6:	4619      	mov	r1, r3
 80072d8:	4862      	ldr	r0, [pc, #392]	; (8007464 <HAL_TIM_PeriodElapsedCallback+0x8ec>)
 80072da:	f7fc fbf7 	bl	8003acc <HAL_TIM_PWM_ConfigChannel>
				HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_1);
 80072de:	2100      	movs	r1, #0
 80072e0:	4860      	ldr	r0, [pc, #384]	; (8007464 <HAL_TIM_PeriodElapsedCallback+0x8ec>)
 80072e2:	f7fc f9e3 	bl	80036ac <HAL_TIM_PWM_Start>
			}

			epsilon_r = target_speed_r - speed_r;
 80072e6:	4b5b      	ldr	r3, [pc, #364]	; (8007454 <HAL_TIM_PeriodElapsedCallback+0x8dc>)
 80072e8:	ed93 7a00 	vldr	s14, [r3]
 80072ec:	4b5e      	ldr	r3, [pc, #376]	; (8007468 <HAL_TIM_PeriodElapsedCallback+0x8f0>)
 80072ee:	edd3 7a00 	vldr	s15, [r3]
 80072f2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80072f6:	4b5d      	ldr	r3, [pc, #372]	; (800746c <HAL_TIM_PeriodElapsedCallback+0x8f4>)
 80072f8:	edc3 7a00 	vstr	s15, [r3]
			pulse_r = Kp * epsilon_r;
 80072fc:	4b5b      	ldr	r3, [pc, #364]	; (800746c <HAL_TIM_PeriodElapsedCallback+0x8f4>)
 80072fe:	edd3 7a00 	vldr	s15, [r3]
 8007302:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8007306:	ee67 7a87 	vmul.f32	s15, s15, s14
 800730a:	4b59      	ldr	r3, [pc, #356]	; (8007470 <HAL_TIM_PeriodElapsedCallback+0x8f8>)
 800730c:	edc3 7a00 	vstr	s15, [r3]
			if(pulse_r > 0){
 8007310:	4b57      	ldr	r3, [pc, #348]	; (8007470 <HAL_TIM_PeriodElapsedCallback+0x8f8>)
 8007312:	edd3 7a00 	vldr	s15, [r3]
 8007316:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800731a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800731e:	dd17      	ble.n	8007350 <HAL_TIM_PeriodElapsedCallback+0x7d8>
				drive_dir(1, 0);
 8007320:	2100      	movs	r1, #0
 8007322:	2001      	movs	r0, #1
 8007324:	f7fd fc62 	bl	8004bec <drive_dir>
				ConfigOC.Pulse = pulse_r;
 8007328:	4b51      	ldr	r3, [pc, #324]	; (8007470 <HAL_TIM_PeriodElapsedCallback+0x8f8>)
 800732a:	edd3 7a00 	vldr	s15, [r3]
 800732e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007332:	ee17 3a90 	vmov	r3, s15
 8007336:	613b      	str	r3, [r7, #16]
				HAL_TIM_PWM_ConfigChannel(&htim2, &ConfigOC, TIM_CHANNEL_4);
 8007338:	f107 030c 	add.w	r3, r7, #12
 800733c:	220c      	movs	r2, #12
 800733e:	4619      	mov	r1, r3
 8007340:	4848      	ldr	r0, [pc, #288]	; (8007464 <HAL_TIM_PeriodElapsedCallback+0x8ec>)
 8007342:	f7fc fbc3 	bl	8003acc <HAL_TIM_PWM_ConfigChannel>
				HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_4);
 8007346:	210c      	movs	r1, #12
 8007348:	4846      	ldr	r0, [pc, #280]	; (8007464 <HAL_TIM_PeriodElapsedCallback+0x8ec>)
 800734a:	f7fc f9af 	bl	80036ac <HAL_TIM_PWM_Start>
 800734e:	e020      	b.n	8007392 <HAL_TIM_PeriodElapsedCallback+0x81a>
			}
			else if(pulse_r < 0){
 8007350:	4b47      	ldr	r3, [pc, #284]	; (8007470 <HAL_TIM_PeriodElapsedCallback+0x8f8>)
 8007352:	edd3 7a00 	vldr	s15, [r3]
 8007356:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800735a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800735e:	d518      	bpl.n	8007392 <HAL_TIM_PeriodElapsedCallback+0x81a>
				drive_dir(1, 1);
 8007360:	2101      	movs	r1, #1
 8007362:	2001      	movs	r0, #1
 8007364:	f7fd fc42 	bl	8004bec <drive_dir>
				ConfigOC.Pulse = -pulse_r;
 8007368:	4b41      	ldr	r3, [pc, #260]	; (8007470 <HAL_TIM_PeriodElapsedCallback+0x8f8>)
 800736a:	edd3 7a00 	vldr	s15, [r3]
 800736e:	eef1 7a67 	vneg.f32	s15, s15
 8007372:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007376:	ee17 3a90 	vmov	r3, s15
 800737a:	613b      	str	r3, [r7, #16]
				HAL_TIM_PWM_ConfigChannel(&htim2, &ConfigOC, TIM_CHANNEL_4);
 800737c:	f107 030c 	add.w	r3, r7, #12
 8007380:	220c      	movs	r2, #12
 8007382:	4619      	mov	r1, r3
 8007384:	4837      	ldr	r0, [pc, #220]	; (8007464 <HAL_TIM_PeriodElapsedCallback+0x8ec>)
 8007386:	f7fc fba1 	bl	8003acc <HAL_TIM_PWM_ConfigChannel>
				HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_4);
 800738a:	210c      	movs	r1, #12
 800738c:	4835      	ldr	r0, [pc, #212]	; (8007464 <HAL_TIM_PeriodElapsedCallback+0x8ec>)
 800738e:	f7fc f98d 	bl	80036ac <HAL_TIM_PWM_Start>
			}
		}

		if(MF.FLAG.GYRO){
 8007392:	4b38      	ldr	r3, [pc, #224]	; (8007474 <HAL_TIM_PeriodElapsedCallback+0x8fc>)
 8007394:	881b      	ldrh	r3, [r3, #0]
 8007396:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800739a:	b2db      	uxtb	r3, r3
 800739c:	2b00      	cmp	r3, #0
 800739e:	f000 8195 	beq.w	80076cc <HAL_TIM_PeriodElapsedCallback+0xb54>
			target_omega_z += target_degaccel_z * 0.001;
 80073a2:	4b35      	ldr	r3, [pc, #212]	; (8007478 <HAL_TIM_PeriodElapsedCallback+0x900>)
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	4618      	mov	r0, r3
 80073a8:	f7f9 f8c6 	bl	8000538 <__aeabi_f2d>
 80073ac:	a324      	add	r3, pc, #144	; (adr r3, 8007440 <HAL_TIM_PeriodElapsedCallback+0x8c8>)
 80073ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073b2:	f7f9 f919 	bl	80005e8 <__aeabi_dmul>
 80073b6:	4603      	mov	r3, r0
 80073b8:	460c      	mov	r4, r1
 80073ba:	4625      	mov	r5, r4
 80073bc:	461c      	mov	r4, r3
 80073be:	4b2f      	ldr	r3, [pc, #188]	; (800747c <HAL_TIM_PeriodElapsedCallback+0x904>)
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	4618      	mov	r0, r3
 80073c4:	f7f9 f8b8 	bl	8000538 <__aeabi_f2d>
 80073c8:	4602      	mov	r2, r0
 80073ca:	460b      	mov	r3, r1
 80073cc:	4620      	mov	r0, r4
 80073ce:	4629      	mov	r1, r5
 80073d0:	f7f8 ff54 	bl	800027c <__adddf3>
 80073d4:	4603      	mov	r3, r0
 80073d6:	460c      	mov	r4, r1
 80073d8:	4618      	mov	r0, r3
 80073da:	4621      	mov	r1, r4
 80073dc:	f7f9 fbb4 	bl	8000b48 <__aeabi_d2f>
 80073e0:	4602      	mov	r2, r0
 80073e2:	4b26      	ldr	r3, [pc, #152]	; (800747c <HAL_TIM_PeriodElapsedCallback+0x904>)
 80073e4:	601a      	str	r2, [r3, #0]
			target_omega_z = max(min(target_omega_z, omega_max), omega_min);
 80073e6:	4b25      	ldr	r3, [pc, #148]	; (800747c <HAL_TIM_PeriodElapsedCallback+0x904>)
 80073e8:	ed93 7a00 	vldr	s14, [r3]
 80073ec:	4b24      	ldr	r3, [pc, #144]	; (8007480 <HAL_TIM_PeriodElapsedCallback+0x908>)
 80073ee:	edd3 7a00 	vldr	s15, [r3]
 80073f2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80073f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80073fa:	dd03      	ble.n	8007404 <HAL_TIM_PeriodElapsedCallback+0x88c>
 80073fc:	4b20      	ldr	r3, [pc, #128]	; (8007480 <HAL_TIM_PeriodElapsedCallback+0x908>)
 80073fe:	edd3 7a00 	vldr	s15, [r3]
 8007402:	e002      	b.n	800740a <HAL_TIM_PeriodElapsedCallback+0x892>
 8007404:	4b1d      	ldr	r3, [pc, #116]	; (800747c <HAL_TIM_PeriodElapsedCallback+0x904>)
 8007406:	edd3 7a00 	vldr	s15, [r3]
 800740a:	4b1e      	ldr	r3, [pc, #120]	; (8007484 <HAL_TIM_PeriodElapsedCallback+0x90c>)
 800740c:	ed93 7a00 	vldr	s14, [r3]
 8007410:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007414:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007418:	dd36      	ble.n	8007488 <HAL_TIM_PeriodElapsedCallback+0x910>
 800741a:	4b18      	ldr	r3, [pc, #96]	; (800747c <HAL_TIM_PeriodElapsedCallback+0x904>)
 800741c:	ed93 7a00 	vldr	s14, [r3]
 8007420:	4b17      	ldr	r3, [pc, #92]	; (8007480 <HAL_TIM_PeriodElapsedCallback+0x908>)
 8007422:	edd3 7a00 	vldr	s15, [r3]
 8007426:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800742a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800742e:	dd02      	ble.n	8007436 <HAL_TIM_PeriodElapsedCallback+0x8be>
 8007430:	4b13      	ldr	r3, [pc, #76]	; (8007480 <HAL_TIM_PeriodElapsedCallback+0x908>)
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	e02a      	b.n	800748c <HAL_TIM_PeriodElapsedCallback+0x914>
 8007436:	4b11      	ldr	r3, [pc, #68]	; (800747c <HAL_TIM_PeriodElapsedCallback+0x904>)
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	e027      	b.n	800748c <HAL_TIM_PeriodElapsedCallback+0x914>
 800743c:	f3af 8000 	nop.w
 8007440:	d2f1a9fc 	.word	0xd2f1a9fc
 8007444:	3f50624d 	.word	0x3f50624d
 8007448:	20000c10 	.word	0x20000c10
 800744c:	20000e24 	.word	0x20000e24
 8007450:	20000ab8 	.word	0x20000ab8
 8007454:	20000178 	.word	0x20000178
 8007458:	200009bc 	.word	0x200009bc
 800745c:	20000a24 	.word	0x20000a24
 8007460:	20000a68 	.word	0x20000a68
 8007464:	20000acc 	.word	0x20000acc
 8007468:	20000290 	.word	0x20000290
 800746c:	20000ac4 	.word	0x20000ac4
 8007470:	2000064c 	.word	0x2000064c
 8007474:	20000e18 	.word	0x20000e18
 8007478:	20000a1c 	.word	0x20000a1c
 800747c:	20000180 	.word	0x20000180
 8007480:	200009b4 	.word	0x200009b4
 8007484:	2000028c 	.word	0x2000028c
 8007488:	4bc3      	ldr	r3, [pc, #780]	; (8007798 <HAL_TIM_PeriodElapsedCallback+0xc20>)
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	4ac3      	ldr	r2, [pc, #780]	; (800779c <HAL_TIM_PeriodElapsedCallback+0xc24>)
 800748e:	6013      	str	r3, [r2, #0]
			target_speed_l = speed_G + target_omega_z/180*M_PI*TREAD/2;
 8007490:	4bc3      	ldr	r3, [pc, #780]	; (80077a0 <HAL_TIM_PeriodElapsedCallback+0xc28>)
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	4618      	mov	r0, r3
 8007496:	f7f9 f84f 	bl	8000538 <__aeabi_f2d>
 800749a:	4604      	mov	r4, r0
 800749c:	460d      	mov	r5, r1
 800749e:	4bbf      	ldr	r3, [pc, #764]	; (800779c <HAL_TIM_PeriodElapsedCallback+0xc24>)
 80074a0:	edd3 7a00 	vldr	s15, [r3]
 80074a4:	ed9f 7abf 	vldr	s14, [pc, #764]	; 80077a4 <HAL_TIM_PeriodElapsedCallback+0xc2c>
 80074a8:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80074ac:	ee16 0a90 	vmov	r0, s13
 80074b0:	f7f9 f842 	bl	8000538 <__aeabi_f2d>
 80074b4:	a3b6      	add	r3, pc, #728	; (adr r3, 8007790 <HAL_TIM_PeriodElapsedCallback+0xc18>)
 80074b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074ba:	f7f9 f895 	bl	80005e8 <__aeabi_dmul>
 80074be:	4602      	mov	r2, r0
 80074c0:	460b      	mov	r3, r1
 80074c2:	4610      	mov	r0, r2
 80074c4:	4619      	mov	r1, r3
 80074c6:	f04f 0200 	mov.w	r2, #0
 80074ca:	4bb7      	ldr	r3, [pc, #732]	; (80077a8 <HAL_TIM_PeriodElapsedCallback+0xc30>)
 80074cc:	f7f9 f88c 	bl	80005e8 <__aeabi_dmul>
 80074d0:	4602      	mov	r2, r0
 80074d2:	460b      	mov	r3, r1
 80074d4:	4610      	mov	r0, r2
 80074d6:	4619      	mov	r1, r3
 80074d8:	f04f 0200 	mov.w	r2, #0
 80074dc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80074e0:	f7f9 f9ac 	bl	800083c <__aeabi_ddiv>
 80074e4:	4602      	mov	r2, r0
 80074e6:	460b      	mov	r3, r1
 80074e8:	4620      	mov	r0, r4
 80074ea:	4629      	mov	r1, r5
 80074ec:	f7f8 fec6 	bl	800027c <__adddf3>
 80074f0:	4603      	mov	r3, r0
 80074f2:	460c      	mov	r4, r1
 80074f4:	4618      	mov	r0, r3
 80074f6:	4621      	mov	r1, r4
 80074f8:	f7f9 fb26 	bl	8000b48 <__aeabi_d2f>
 80074fc:	4602      	mov	r2, r0
 80074fe:	4bab      	ldr	r3, [pc, #684]	; (80077ac <HAL_TIM_PeriodElapsedCallback+0xc34>)
 8007500:	601a      	str	r2, [r3, #0]
			target_speed_r = speed_G - target_omega_z/180*M_PI*TREAD/2;
 8007502:	4ba7      	ldr	r3, [pc, #668]	; (80077a0 <HAL_TIM_PeriodElapsedCallback+0xc28>)
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	4618      	mov	r0, r3
 8007508:	f7f9 f816 	bl	8000538 <__aeabi_f2d>
 800750c:	4604      	mov	r4, r0
 800750e:	460d      	mov	r5, r1
 8007510:	4ba2      	ldr	r3, [pc, #648]	; (800779c <HAL_TIM_PeriodElapsedCallback+0xc24>)
 8007512:	edd3 7a00 	vldr	s15, [r3]
 8007516:	ed9f 7aa3 	vldr	s14, [pc, #652]	; 80077a4 <HAL_TIM_PeriodElapsedCallback+0xc2c>
 800751a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800751e:	ee16 0a90 	vmov	r0, s13
 8007522:	f7f9 f809 	bl	8000538 <__aeabi_f2d>
 8007526:	a39a      	add	r3, pc, #616	; (adr r3, 8007790 <HAL_TIM_PeriodElapsedCallback+0xc18>)
 8007528:	e9d3 2300 	ldrd	r2, r3, [r3]
 800752c:	f7f9 f85c 	bl	80005e8 <__aeabi_dmul>
 8007530:	4602      	mov	r2, r0
 8007532:	460b      	mov	r3, r1
 8007534:	4610      	mov	r0, r2
 8007536:	4619      	mov	r1, r3
 8007538:	f04f 0200 	mov.w	r2, #0
 800753c:	4b9a      	ldr	r3, [pc, #616]	; (80077a8 <HAL_TIM_PeriodElapsedCallback+0xc30>)
 800753e:	f7f9 f853 	bl	80005e8 <__aeabi_dmul>
 8007542:	4602      	mov	r2, r0
 8007544:	460b      	mov	r3, r1
 8007546:	4610      	mov	r0, r2
 8007548:	4619      	mov	r1, r3
 800754a:	f04f 0200 	mov.w	r2, #0
 800754e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007552:	f7f9 f973 	bl	800083c <__aeabi_ddiv>
 8007556:	4602      	mov	r2, r0
 8007558:	460b      	mov	r3, r1
 800755a:	4620      	mov	r0, r4
 800755c:	4629      	mov	r1, r5
 800755e:	f7f8 fe8b 	bl	8000278 <__aeabi_dsub>
 8007562:	4603      	mov	r3, r0
 8007564:	460c      	mov	r4, r1
 8007566:	4618      	mov	r0, r3
 8007568:	4621      	mov	r1, r4
 800756a:	f7f9 faed 	bl	8000b48 <__aeabi_d2f>
 800756e:	4602      	mov	r2, r0
 8007570:	4b8f      	ldr	r3, [pc, #572]	; (80077b0 <HAL_TIM_PeriodElapsedCallback+0xc38>)
 8007572:	601a      	str	r2, [r3, #0]

			epsilon_l = target_speed_l - speed_l;
 8007574:	4b8d      	ldr	r3, [pc, #564]	; (80077ac <HAL_TIM_PeriodElapsedCallback+0xc34>)
 8007576:	ed93 7a00 	vldr	s14, [r3]
 800757a:	4b8e      	ldr	r3, [pc, #568]	; (80077b4 <HAL_TIM_PeriodElapsedCallback+0xc3c>)
 800757c:	edd3 7a00 	vldr	s15, [r3]
 8007580:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007584:	4b8c      	ldr	r3, [pc, #560]	; (80077b8 <HAL_TIM_PeriodElapsedCallback+0xc40>)
 8007586:	edc3 7a00 	vstr	s15, [r3]
			pulse_l = Kp * epsilon_l;
 800758a:	4b8b      	ldr	r3, [pc, #556]	; (80077b8 <HAL_TIM_PeriodElapsedCallback+0xc40>)
 800758c:	edd3 7a00 	vldr	s15, [r3]
 8007590:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8007594:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007598:	4b88      	ldr	r3, [pc, #544]	; (80077bc <HAL_TIM_PeriodElapsedCallback+0xc44>)
 800759a:	edc3 7a00 	vstr	s15, [r3]
			if(pulse_l > 0){
 800759e:	4b87      	ldr	r3, [pc, #540]	; (80077bc <HAL_TIM_PeriodElapsedCallback+0xc44>)
 80075a0:	edd3 7a00 	vldr	s15, [r3]
 80075a4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80075a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80075ac:	dd17      	ble.n	80075de <HAL_TIM_PeriodElapsedCallback+0xa66>
				drive_dir(0, 0);
 80075ae:	2100      	movs	r1, #0
 80075b0:	2000      	movs	r0, #0
 80075b2:	f7fd fb1b 	bl	8004bec <drive_dir>
				ConfigOC.Pulse = pulse_l;
 80075b6:	4b81      	ldr	r3, [pc, #516]	; (80077bc <HAL_TIM_PeriodElapsedCallback+0xc44>)
 80075b8:	edd3 7a00 	vldr	s15, [r3]
 80075bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80075c0:	ee17 3a90 	vmov	r3, s15
 80075c4:	613b      	str	r3, [r7, #16]
				HAL_TIM_PWM_ConfigChannel(&htim2, &ConfigOC, TIM_CHANNEL_1);
 80075c6:	f107 030c 	add.w	r3, r7, #12
 80075ca:	2200      	movs	r2, #0
 80075cc:	4619      	mov	r1, r3
 80075ce:	487c      	ldr	r0, [pc, #496]	; (80077c0 <HAL_TIM_PeriodElapsedCallback+0xc48>)
 80075d0:	f7fc fa7c 	bl	8003acc <HAL_TIM_PWM_ConfigChannel>
				HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_1);
 80075d4:	2100      	movs	r1, #0
 80075d6:	487a      	ldr	r0, [pc, #488]	; (80077c0 <HAL_TIM_PeriodElapsedCallback+0xc48>)
 80075d8:	f7fc f868 	bl	80036ac <HAL_TIM_PWM_Start>
 80075dc:	e020      	b.n	8007620 <HAL_TIM_PeriodElapsedCallback+0xaa8>
			}
			else if(pulse_l < 0){
 80075de:	4b77      	ldr	r3, [pc, #476]	; (80077bc <HAL_TIM_PeriodElapsedCallback+0xc44>)
 80075e0:	edd3 7a00 	vldr	s15, [r3]
 80075e4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80075e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80075ec:	d518      	bpl.n	8007620 <HAL_TIM_PeriodElapsedCallback+0xaa8>
				drive_dir(0, 1);
 80075ee:	2101      	movs	r1, #1
 80075f0:	2000      	movs	r0, #0
 80075f2:	f7fd fafb 	bl	8004bec <drive_dir>
				ConfigOC.Pulse = -pulse_l;
 80075f6:	4b71      	ldr	r3, [pc, #452]	; (80077bc <HAL_TIM_PeriodElapsedCallback+0xc44>)
 80075f8:	edd3 7a00 	vldr	s15, [r3]
 80075fc:	eef1 7a67 	vneg.f32	s15, s15
 8007600:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007604:	ee17 3a90 	vmov	r3, s15
 8007608:	613b      	str	r3, [r7, #16]
				HAL_TIM_PWM_ConfigChannel(&htim2, &ConfigOC, TIM_CHANNEL_1);
 800760a:	f107 030c 	add.w	r3, r7, #12
 800760e:	2200      	movs	r2, #0
 8007610:	4619      	mov	r1, r3
 8007612:	486b      	ldr	r0, [pc, #428]	; (80077c0 <HAL_TIM_PeriodElapsedCallback+0xc48>)
 8007614:	f7fc fa5a 	bl	8003acc <HAL_TIM_PWM_ConfigChannel>
				HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_1);
 8007618:	2100      	movs	r1, #0
 800761a:	4869      	ldr	r0, [pc, #420]	; (80077c0 <HAL_TIM_PeriodElapsedCallback+0xc48>)
 800761c:	f7fc f846 	bl	80036ac <HAL_TIM_PWM_Start>
			}

			epsilon_r = target_speed_r - speed_r;
 8007620:	4b63      	ldr	r3, [pc, #396]	; (80077b0 <HAL_TIM_PeriodElapsedCallback+0xc38>)
 8007622:	ed93 7a00 	vldr	s14, [r3]
 8007626:	4b67      	ldr	r3, [pc, #412]	; (80077c4 <HAL_TIM_PeriodElapsedCallback+0xc4c>)
 8007628:	edd3 7a00 	vldr	s15, [r3]
 800762c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007630:	4b65      	ldr	r3, [pc, #404]	; (80077c8 <HAL_TIM_PeriodElapsedCallback+0xc50>)
 8007632:	edc3 7a00 	vstr	s15, [r3]
			pulse_r = Kp * epsilon_r;
 8007636:	4b64      	ldr	r3, [pc, #400]	; (80077c8 <HAL_TIM_PeriodElapsedCallback+0xc50>)
 8007638:	edd3 7a00 	vldr	s15, [r3]
 800763c:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8007640:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007644:	4b61      	ldr	r3, [pc, #388]	; (80077cc <HAL_TIM_PeriodElapsedCallback+0xc54>)
 8007646:	edc3 7a00 	vstr	s15, [r3]
			if(pulse_r > 0){
 800764a:	4b60      	ldr	r3, [pc, #384]	; (80077cc <HAL_TIM_PeriodElapsedCallback+0xc54>)
 800764c:	edd3 7a00 	vldr	s15, [r3]
 8007650:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007654:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007658:	dd17      	ble.n	800768a <HAL_TIM_PeriodElapsedCallback+0xb12>
				drive_dir(1, 0);
 800765a:	2100      	movs	r1, #0
 800765c:	2001      	movs	r0, #1
 800765e:	f7fd fac5 	bl	8004bec <drive_dir>
				ConfigOC.Pulse = pulse_r;
 8007662:	4b5a      	ldr	r3, [pc, #360]	; (80077cc <HAL_TIM_PeriodElapsedCallback+0xc54>)
 8007664:	edd3 7a00 	vldr	s15, [r3]
 8007668:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800766c:	ee17 3a90 	vmov	r3, s15
 8007670:	613b      	str	r3, [r7, #16]
				HAL_TIM_PWM_ConfigChannel(&htim2, &ConfigOC, TIM_CHANNEL_4);
 8007672:	f107 030c 	add.w	r3, r7, #12
 8007676:	220c      	movs	r2, #12
 8007678:	4619      	mov	r1, r3
 800767a:	4851      	ldr	r0, [pc, #324]	; (80077c0 <HAL_TIM_PeriodElapsedCallback+0xc48>)
 800767c:	f7fc fa26 	bl	8003acc <HAL_TIM_PWM_ConfigChannel>
				HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_4);
 8007680:	210c      	movs	r1, #12
 8007682:	484f      	ldr	r0, [pc, #316]	; (80077c0 <HAL_TIM_PeriodElapsedCallback+0xc48>)
 8007684:	f7fc f812 	bl	80036ac <HAL_TIM_PWM_Start>
 8007688:	e020      	b.n	80076cc <HAL_TIM_PeriodElapsedCallback+0xb54>
			}
			else if(pulse_r < 0){
 800768a:	4b50      	ldr	r3, [pc, #320]	; (80077cc <HAL_TIM_PeriodElapsedCallback+0xc54>)
 800768c:	edd3 7a00 	vldr	s15, [r3]
 8007690:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007694:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007698:	d518      	bpl.n	80076cc <HAL_TIM_PeriodElapsedCallback+0xb54>
				drive_dir(1, 1);
 800769a:	2101      	movs	r1, #1
 800769c:	2001      	movs	r0, #1
 800769e:	f7fd faa5 	bl	8004bec <drive_dir>
				ConfigOC.Pulse = -pulse_r;
 80076a2:	4b4a      	ldr	r3, [pc, #296]	; (80077cc <HAL_TIM_PeriodElapsedCallback+0xc54>)
 80076a4:	edd3 7a00 	vldr	s15, [r3]
 80076a8:	eef1 7a67 	vneg.f32	s15, s15
 80076ac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80076b0:	ee17 3a90 	vmov	r3, s15
 80076b4:	613b      	str	r3, [r7, #16]
				HAL_TIM_PWM_ConfigChannel(&htim2, &ConfigOC, TIM_CHANNEL_4);
 80076b6:	f107 030c 	add.w	r3, r7, #12
 80076ba:	220c      	movs	r2, #12
 80076bc:	4619      	mov	r1, r3
 80076be:	4840      	ldr	r0, [pc, #256]	; (80077c0 <HAL_TIM_PeriodElapsedCallback+0xc48>)
 80076c0:	f7fc fa04 	bl	8003acc <HAL_TIM_PWM_ConfigChannel>
				HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_4);
 80076c4:	210c      	movs	r1, #12
 80076c6:	483e      	ldr	r0, [pc, #248]	; (80077c0 <HAL_TIM_PeriodElapsedCallback+0xc48>)
 80076c8:	f7fb fff0 	bl	80036ac <HAL_TIM_PWM_Start>
			}
		}


		//ADchange interrupt
		uint16_t delay = 0;
 80076cc:	2300      	movs	r3, #0
 80076ce:	85fb      	strh	r3, [r7, #46]	; 0x2e
		tp = (tp+1)%2;
 80076d0:	4b3f      	ldr	r3, [pc, #252]	; (80077d0 <HAL_TIM_PeriodElapsedCallback+0xc58>)
 80076d2:	781b      	ldrb	r3, [r3, #0]
 80076d4:	3301      	adds	r3, #1
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	f003 0301 	and.w	r3, r3, #1
 80076dc:	bfb8      	it	lt
 80076de:	425b      	neglt	r3, r3
 80076e0:	b2da      	uxtb	r2, r3
 80076e2:	4b3b      	ldr	r3, [pc, #236]	; (80077d0 <HAL_TIM_PeriodElapsedCallback+0xc58>)
 80076e4:	701a      	strb	r2, [r3, #0]

		switch(tp){
 80076e6:	4b3a      	ldr	r3, [pc, #232]	; (80077d0 <HAL_TIM_PeriodElapsedCallback+0xc58>)
 80076e8:	781b      	ldrb	r3, [r3, #0]
 80076ea:	2b01      	cmp	r3, #1
 80076ec:	d044      	beq.n	8007778 <HAL_TIM_PeriodElapsedCallback+0xc00>
 80076ee:	2b02      	cmp	r3, #2
 80076f0:	f000 80b0 	beq.w	8007854 <HAL_TIM_PeriodElapsedCallback+0xcdc>
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	f040 8163 	bne.w	80079c0 <HAL_TIM_PeriodElapsedCallback+0xe48>
		  case 0:
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_SET); 	//L
 80076fa:	2201      	movs	r2, #1
 80076fc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8007700:	4834      	ldr	r0, [pc, #208]	; (80077d4 <HAL_TIM_PeriodElapsedCallback+0xc5c>)
 8007702:	f7fa fdd7 	bl	80022b4 <HAL_GPIO_WritePin>
				for(delay=0; delay<sensor_wait; delay++);
 8007706:	2300      	movs	r3, #0
 8007708:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800770a:	e002      	b.n	8007712 <HAL_TIM_PeriodElapsedCallback+0xb9a>
 800770c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800770e:	3301      	adds	r3, #1
 8007710:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8007712:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007714:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8007718:	4293      	cmp	r3, r2
 800771a:	d9f7      	bls.n	800770c <HAL_TIM_PeriodElapsedCallback+0xb94>
				ad_l = get_adc_value(&hadc1, ADC_CHANNEL_3);			//L
 800771c:	2103      	movs	r1, #3
 800771e:	482e      	ldr	r0, [pc, #184]	; (80077d8 <HAL_TIM_PeriodElapsedCallback+0xc60>)
 8007720:	f000 feb0 	bl	8008484 <get_adc_value>
 8007724:	4603      	mov	r3, r0
 8007726:	461a      	mov	r2, r3
 8007728:	4b2c      	ldr	r3, [pc, #176]	; (80077dc <HAL_TIM_PeriodElapsedCallback+0xc64>)
 800772a:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 800772c:	2200      	movs	r2, #0
 800772e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8007732:	4828      	ldr	r0, [pc, #160]	; (80077d4 <HAL_TIM_PeriodElapsedCallback+0xc5c>)
 8007734:	f7fa fdbe 	bl	80022b4 <HAL_GPIO_WritePin>

				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);  	//R
 8007738:	2201      	movs	r2, #1
 800773a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800773e:	4828      	ldr	r0, [pc, #160]	; (80077e0 <HAL_TIM_PeriodElapsedCallback+0xc68>)
 8007740:	f7fa fdb8 	bl	80022b4 <HAL_GPIO_WritePin>
				for(delay=0; delay<sensor_wait; delay++);
 8007744:	2300      	movs	r3, #0
 8007746:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8007748:	e002      	b.n	8007750 <HAL_TIM_PeriodElapsedCallback+0xbd8>
 800774a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800774c:	3301      	adds	r3, #1
 800774e:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8007750:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007752:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8007756:	4293      	cmp	r3, r2
 8007758:	d9f7      	bls.n	800774a <HAL_TIM_PeriodElapsedCallback+0xbd2>
				ad_r = get_adc_value(&hadc1, ADC_CHANNEL_1);			//R
 800775a:	2101      	movs	r1, #1
 800775c:	481e      	ldr	r0, [pc, #120]	; (80077d8 <HAL_TIM_PeriodElapsedCallback+0xc60>)
 800775e:	f000 fe91 	bl	8008484 <get_adc_value>
 8007762:	4603      	mov	r3, r0
 8007764:	461a      	mov	r2, r3
 8007766:	4b1f      	ldr	r3, [pc, #124]	; (80077e4 <HAL_TIM_PeriodElapsedCallback+0xc6c>)
 8007768:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 800776a:	2200      	movs	r2, #0
 800776c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007770:	481b      	ldr	r0, [pc, #108]	; (80077e0 <HAL_TIM_PeriodElapsedCallback+0xc68>)
 8007772:	f7fa fd9f 	bl	80022b4 <HAL_GPIO_WritePin>
			break;
 8007776:	e123      	b.n	80079c0 <HAL_TIM_PeriodElapsedCallback+0xe48>

		  case 1:
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_SET); 	//FL
 8007778:	2201      	movs	r2, #1
 800777a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800777e:	4815      	ldr	r0, [pc, #84]	; (80077d4 <HAL_TIM_PeriodElapsedCallback+0xc5c>)
 8007780:	f7fa fd98 	bl	80022b4 <HAL_GPIO_WritePin>
				for(delay=0; delay<sensor_wait; delay++);
 8007784:	2300      	movs	r3, #0
 8007786:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8007788:	e031      	b.n	80077ee <HAL_TIM_PeriodElapsedCallback+0xc76>
 800778a:	bf00      	nop
 800778c:	f3af 8000 	nop.w
 8007790:	54442d18 	.word	0x54442d18
 8007794:	400921fb 	.word	0x400921fb
 8007798:	2000028c 	.word	0x2000028c
 800779c:	20000180 	.word	0x20000180
 80077a0:	200009c0 	.word	0x200009c0
 80077a4:	43340000 	.word	0x43340000
 80077a8:	40508000 	.word	0x40508000
 80077ac:	20000ab8 	.word	0x20000ab8
 80077b0:	20000178 	.word	0x20000178
 80077b4:	200009bc 	.word	0x200009bc
 80077b8:	20000a24 	.word	0x20000a24
 80077bc:	20000a68 	.word	0x20000a68
 80077c0:	20000acc 	.word	0x20000acc
 80077c4:	20000290 	.word	0x20000290
 80077c8:	20000ac4 	.word	0x20000ac4
 80077cc:	2000064c 	.word	0x2000064c
 80077d0:	20000e2b 	.word	0x20000e2b
 80077d4:	40020800 	.word	0x40020800
 80077d8:	200009c8 	.word	0x200009c8
 80077dc:	200009c4 	.word	0x200009c4
 80077e0:	40020000 	.word	0x40020000
 80077e4:	20000e14 	.word	0x20000e14
 80077e8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80077ea:	3301      	adds	r3, #1
 80077ec:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80077ee:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80077f0:	f640 32b7 	movw	r2, #2999	; 0xbb7
 80077f4:	4293      	cmp	r3, r2
 80077f6:	d9f7      	bls.n	80077e8 <HAL_TIM_PeriodElapsedCallback+0xc70>
				ad_fl = get_adc_value(&hadc1, ADC_CHANNEL_2);			//FL
 80077f8:	2102      	movs	r1, #2
 80077fa:	487d      	ldr	r0, [pc, #500]	; (80079f0 <HAL_TIM_PeriodElapsedCallback+0xe78>)
 80077fc:	f000 fe42 	bl	8008484 <get_adc_value>
 8007800:	4603      	mov	r3, r0
 8007802:	461a      	mov	r2, r3
 8007804:	4b7b      	ldr	r3, [pc, #492]	; (80079f4 <HAL_TIM_PeriodElapsedCallback+0xe7c>)
 8007806:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET);
 8007808:	2200      	movs	r2, #0
 800780a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800780e:	487a      	ldr	r0, [pc, #488]	; (80079f8 <HAL_TIM_PeriodElapsedCallback+0xe80>)
 8007810:	f7fa fd50 	bl	80022b4 <HAL_GPIO_WritePin>

				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);   	//FR
 8007814:	2201      	movs	r2, #1
 8007816:	f44f 7100 	mov.w	r1, #512	; 0x200
 800781a:	4877      	ldr	r0, [pc, #476]	; (80079f8 <HAL_TIM_PeriodElapsedCallback+0xe80>)
 800781c:	f7fa fd4a 	bl	80022b4 <HAL_GPIO_WritePin>
				for(delay=0; delay<sensor_wait; delay++);
 8007820:	2300      	movs	r3, #0
 8007822:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8007824:	e002      	b.n	800782c <HAL_TIM_PeriodElapsedCallback+0xcb4>
 8007826:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007828:	3301      	adds	r3, #1
 800782a:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800782c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800782e:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8007832:	4293      	cmp	r3, r2
 8007834:	d9f7      	bls.n	8007826 <HAL_TIM_PeriodElapsedCallback+0xcae>
				ad_fr = get_adc_value(&hadc1, ADC_CHANNEL_0);			//FR
 8007836:	2100      	movs	r1, #0
 8007838:	486d      	ldr	r0, [pc, #436]	; (80079f0 <HAL_TIM_PeriodElapsedCallback+0xe78>)
 800783a:	f000 fe23 	bl	8008484 <get_adc_value>
 800783e:	4603      	mov	r3, r0
 8007840:	461a      	mov	r2, r3
 8007842:	4b6e      	ldr	r3, [pc, #440]	; (80079fc <HAL_TIM_PeriodElapsedCallback+0xe84>)
 8007844:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 8007846:	2200      	movs	r2, #0
 8007848:	f44f 7100 	mov.w	r1, #512	; 0x200
 800784c:	486a      	ldr	r0, [pc, #424]	; (80079f8 <HAL_TIM_PeriodElapsedCallback+0xe80>)
 800784e:	f7fa fd31 	bl	80022b4 <HAL_GPIO_WritePin>
			break;
 8007852:	e0b5      	b.n	80079c0 <HAL_TIM_PeriodElapsedCallback+0xe48>

		  case 2:
				//
				if(MF.FLAG.WCTRL){
 8007854:	4b6a      	ldr	r3, [pc, #424]	; (8007a00 <HAL_TIM_PeriodElapsedCallback+0xe88>)
 8007856:	881b      	ldrh	r3, [r3, #0]
 8007858:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800785c:	b2db      	uxtb	r3, r3
 800785e:	2b00      	cmp	r3, #0
 8007860:	f000 80a6 	beq.w	80079b0 <HAL_TIM_PeriodElapsedCallback+0xe38>
					int16_t dl_tmp = 0, dr_tmp = 0;
 8007864:	2300      	movs	r3, #0
 8007866:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8007868:	2300      	movs	r3, #0
 800786a:	857b      	strh	r3, [r7, #42]	; 0x2a
					dif_l = (int32_t) ad_l - base_l;
 800786c:	4b65      	ldr	r3, [pc, #404]	; (8007a04 <HAL_TIM_PeriodElapsedCallback+0xe8c>)
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	b29a      	uxth	r2, r3
 8007872:	4b65      	ldr	r3, [pc, #404]	; (8007a08 <HAL_TIM_PeriodElapsedCallback+0xe90>)
 8007874:	881b      	ldrh	r3, [r3, #0]
 8007876:	1ad3      	subs	r3, r2, r3
 8007878:	b29b      	uxth	r3, r3
 800787a:	b21a      	sxth	r2, r3
 800787c:	4b63      	ldr	r3, [pc, #396]	; (8007a0c <HAL_TIM_PeriodElapsedCallback+0xe94>)
 800787e:	801a      	strh	r2, [r3, #0]
					dif_r = (int32_t) ad_r - base_r;
 8007880:	4b63      	ldr	r3, [pc, #396]	; (8007a10 <HAL_TIM_PeriodElapsedCallback+0xe98>)
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	b29a      	uxth	r2, r3
 8007886:	4b63      	ldr	r3, [pc, #396]	; (8007a14 <HAL_TIM_PeriodElapsedCallback+0xe9c>)
 8007888:	881b      	ldrh	r3, [r3, #0]
 800788a:	1ad3      	subs	r3, r2, r3
 800788c:	b29b      	uxth	r3, r3
 800788e:	b21a      	sxth	r2, r3
 8007890:	4b61      	ldr	r3, [pc, #388]	; (8007a18 <HAL_TIM_PeriodElapsedCallback+0xea0>)
 8007892:	801a      	strh	r2, [r3, #0]

					if(CTRL_BASE_L < dif_l){
 8007894:	4b5d      	ldr	r3, [pc, #372]	; (8007a0c <HAL_TIM_PeriodElapsedCallback+0xe94>)
 8007896:	f9b3 3000 	ldrsh.w	r3, [r3]
 800789a:	2b32      	cmp	r3, #50	; 0x32
 800789c:	dd30      	ble.n	8007900 <HAL_TIM_PeriodElapsedCallback+0xd88>
						dl_tmp += CTRL_CONT * dif_l;			//a比例制御値を決定
 800789e:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 80078a2:	ee07 3a90 	vmov	s15, r3
 80078a6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80078aa:	4b58      	ldr	r3, [pc, #352]	; (8007a0c <HAL_TIM_PeriodElapsedCallback+0xe94>)
 80078ac:	f9b3 3000 	ldrsh.w	r3, [r3]
 80078b0:	ee07 3a90 	vmov	s15, r3
 80078b4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80078b8:	eddf 6a58 	vldr	s13, [pc, #352]	; 8007a1c <HAL_TIM_PeriodElapsedCallback+0xea4>
 80078bc:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80078c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80078c4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80078c8:	ee17 3a90 	vmov	r3, s15
 80078cc:	85bb      	strh	r3, [r7, #44]	; 0x2c
						dr_tmp += -1 * CTRL_CONT * dif_l;		//a比例制御値を決定
 80078ce:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80078d2:	ee07 3a90 	vmov	s15, r3
 80078d6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80078da:	4b4c      	ldr	r3, [pc, #304]	; (8007a0c <HAL_TIM_PeriodElapsedCallback+0xe94>)
 80078dc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80078e0:	ee07 3a90 	vmov	s15, r3
 80078e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80078e8:	eddf 6a4d 	vldr	s13, [pc, #308]	; 8007a20 <HAL_TIM_PeriodElapsedCallback+0xea8>
 80078ec:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80078f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80078f4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80078f8:	ee17 3a90 	vmov	r3, s15
 80078fc:	857b      	strh	r3, [r7, #42]	; 0x2a
 80078fe:	e034      	b.n	800796a <HAL_TIM_PeriodElapsedCallback+0xdf2>
					}
					else if(CTRL_BASE_R < dif_r){
 8007900:	4b45      	ldr	r3, [pc, #276]	; (8007a18 <HAL_TIM_PeriodElapsedCallback+0xea0>)
 8007902:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007906:	2b32      	cmp	r3, #50	; 0x32
 8007908:	dd2f      	ble.n	800796a <HAL_TIM_PeriodElapsedCallback+0xdf2>
						dl_tmp += -1 * CTRL_CONT * dif_r;		//a比例制御値を決定
 800790a:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 800790e:	ee07 3a90 	vmov	s15, r3
 8007912:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007916:	4b40      	ldr	r3, [pc, #256]	; (8007a18 <HAL_TIM_PeriodElapsedCallback+0xea0>)
 8007918:	f9b3 3000 	ldrsh.w	r3, [r3]
 800791c:	ee07 3a90 	vmov	s15, r3
 8007920:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007924:	eddf 6a3e 	vldr	s13, [pc, #248]	; 8007a20 <HAL_TIM_PeriodElapsedCallback+0xea8>
 8007928:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800792c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007930:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007934:	ee17 3a90 	vmov	r3, s15
 8007938:	85bb      	strh	r3, [r7, #44]	; 0x2c
						dr_tmp += CTRL_CONT * dif_r;			//a比例制御値を決定
 800793a:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800793e:	ee07 3a90 	vmov	s15, r3
 8007942:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007946:	4b34      	ldr	r3, [pc, #208]	; (8007a18 <HAL_TIM_PeriodElapsedCallback+0xea0>)
 8007948:	f9b3 3000 	ldrsh.w	r3, [r3]
 800794c:	ee07 3a90 	vmov	s15, r3
 8007950:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007954:	eddf 6a31 	vldr	s13, [pc, #196]	; 8007a1c <HAL_TIM_PeriodElapsedCallback+0xea4>
 8007958:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800795c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007960:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007964:	ee17 3a90 	vmov	r3, s15
 8007968:	857b      	strh	r3, [r7, #42]	; 0x2a
					}
					dl = max(min(CTRL_MAX, dl_tmp), -1 * CTRL_MAX);
 800796a:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 800796e:	4a2d      	ldr	r2, [pc, #180]	; (8007a24 <HAL_TIM_PeriodElapsedCallback+0xeac>)
 8007970:	4293      	cmp	r3, r2
 8007972:	db08      	blt.n	8007986 <HAL_TIM_PeriodElapsedCallback+0xe0e>
 8007974:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8007978:	f640 52ac 	movw	r2, #3500	; 0xdac
 800797c:	4293      	cmp	r3, r2
 800797e:	bfa8      	it	ge
 8007980:	4613      	movge	r3, r2
 8007982:	b21b      	sxth	r3, r3
 8007984:	e000      	b.n	8007988 <HAL_TIM_PeriodElapsedCallback+0xe10>
 8007986:	4b28      	ldr	r3, [pc, #160]	; (8007a28 <HAL_TIM_PeriodElapsedCallback+0xeb0>)
 8007988:	4a28      	ldr	r2, [pc, #160]	; (8007a2c <HAL_TIM_PeriodElapsedCallback+0xeb4>)
 800798a:	8013      	strh	r3, [r2, #0]
					dr = max(min(CTRL_MAX, dr_tmp), -1 * CTRL_MAX);
 800798c:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8007990:	4a24      	ldr	r2, [pc, #144]	; (8007a24 <HAL_TIM_PeriodElapsedCallback+0xeac>)
 8007992:	4293      	cmp	r3, r2
 8007994:	db08      	blt.n	80079a8 <HAL_TIM_PeriodElapsedCallback+0xe30>
 8007996:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800799a:	f640 52ac 	movw	r2, #3500	; 0xdac
 800799e:	4293      	cmp	r3, r2
 80079a0:	bfa8      	it	ge
 80079a2:	4613      	movge	r3, r2
 80079a4:	b21b      	sxth	r3, r3
 80079a6:	e000      	b.n	80079aa <HAL_TIM_PeriodElapsedCallback+0xe32>
 80079a8:	4b1f      	ldr	r3, [pc, #124]	; (8007a28 <HAL_TIM_PeriodElapsedCallback+0xeb0>)
 80079aa:	4a21      	ldr	r2, [pc, #132]	; (8007a30 <HAL_TIM_PeriodElapsedCallback+0xeb8>)
 80079ac:	8013      	strh	r3, [r2, #0]
				}else{
					//a制御フラグがなければ壁制御値0
					dl = dr = 0;
				}
				break;
 80079ae:	e006      	b.n	80079be <HAL_TIM_PeriodElapsedCallback+0xe46>
					dl = dr = 0;
 80079b0:	2100      	movs	r1, #0
 80079b2:	4b1f      	ldr	r3, [pc, #124]	; (8007a30 <HAL_TIM_PeriodElapsedCallback+0xeb8>)
 80079b4:	460a      	mov	r2, r1
 80079b6:	801a      	strh	r2, [r3, #0]
 80079b8:	4b1c      	ldr	r3, [pc, #112]	; (8007a2c <HAL_TIM_PeriodElapsedCallback+0xeb4>)
 80079ba:	460a      	mov	r2, r1
 80079bc:	801a      	strh	r2, [r3, #0]
				break;
 80079be:	bf00      	nop
		}

		//battery check
		if( HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12) == GPIO_PIN_RESET) {	//2.1V以下で赤ランプ点灯
 80079c0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80079c4:	481b      	ldr	r0, [pc, #108]	; (8007a34 <HAL_TIM_PeriodElapsedCallback+0xebc>)
 80079c6:	f7fa fc5d 	bl	8002284 <HAL_GPIO_ReadPin>
 80079ca:	4603      	mov	r3, r0
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d105      	bne.n	80079dc <HAL_TIM_PeriodElapsedCallback+0xe64>
		   HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_SET);
 80079d0:	2201      	movs	r2, #1
 80079d2:	2108      	movs	r1, #8
 80079d4:	4808      	ldr	r0, [pc, #32]	; (80079f8 <HAL_TIM_PeriodElapsedCallback+0xe80>)
 80079d6:	f7fa fc6d 	bl	80022b4 <HAL_GPIO_WritePin>
		} else {
		   HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
		}
	}
}
 80079da:	e004      	b.n	80079e6 <HAL_TIM_PeriodElapsedCallback+0xe6e>
		   HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
 80079dc:	2200      	movs	r2, #0
 80079de:	2108      	movs	r1, #8
 80079e0:	4805      	ldr	r0, [pc, #20]	; (80079f8 <HAL_TIM_PeriodElapsedCallback+0xe80>)
 80079e2:	f7fa fc67 	bl	80022b4 <HAL_GPIO_WritePin>
}
 80079e6:	bf00      	nop
 80079e8:	3730      	adds	r7, #48	; 0x30
 80079ea:	46bd      	mov	sp, r7
 80079ec:	bdb0      	pop	{r4, r5, r7, pc}
 80079ee:	bf00      	nop
 80079f0:	200009c8 	.word	0x200009c8
 80079f4:	20000c0c 	.word	0x20000c0c
 80079f8:	40020800 	.word	0x40020800
 80079fc:	20000ac0 	.word	0x20000ac0
 8007a00:	20000e18 	.word	0x20000e18
 8007a04:	200009c4 	.word	0x200009c4
 8007a08:	20000320 	.word	0x20000320
 8007a0c:	20000a16 	.word	0x20000a16
 8007a10:	20000e14 	.word	0x20000e14
 8007a14:	20000294 	.word	0x20000294
 8007a18:	20000a72 	.word	0x20000a72
 8007a1c:	3ecccccd 	.word	0x3ecccccd
 8007a20:	becccccd 	.word	0xbecccccd
 8007a24:	fffff255 	.word	0xfffff255
 8007a28:	fffff254 	.word	0xfffff254
 8007a2c:	20000abc 	.word	0x20000abc
 8007a30:	20000e20 	.word	0x20000e20
 8007a34:	40020400 	.word	0x40020400

08007a38 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8007a38:	b580      	push	{r7, lr}
 8007a3a:	b084      	sub	sp, #16
 8007a3c:	af02      	add	r7, sp, #8
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8007a3e:	f7f9 fa53 	bl	8000ee8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8007a42:	f000 f937 	bl	8007cb4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8007a46:	f000 fc29 	bl	800829c <MX_GPIO_Init>
  MX_ADC1_Init();
 8007a4a:	f000 f99d 	bl	8007d88 <MX_ADC1_Init>
  MX_TIM2_Init();
 8007a4e:	f000 fa23 	bl	8007e98 <MX_TIM2_Init>
  MX_TIM3_Init();
 8007a52:	f000 faa1 	bl	8007f98 <MX_TIM3_Init>
  MX_TIM4_Init();
 8007a56:	f000 fb15 	bl	8008084 <MX_TIM4_Init>
  MX_TIM6_Init();
 8007a5a:	f000 fb67 	bl	800812c <MX_TIM6_Init>
  MX_TIM8_Init();
 8007a5e:	f000 fb9b 	bl	8008198 <MX_TIM8_Init>
  MX_SPI3_Init();
 8007a62:	f000 f9e3 	bl	8007e2c <MX_SPI3_Init>
  MX_USART1_UART_Init();
 8007a66:	f000 fbef 	bl	8008248 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  drive_init();
 8007a6a:	f7fd f877 	bl	8004b5c <drive_init>
  gyro_init();
 8007a6e:	f7fe ff97 	bl	80069a0 <gyro_init>
  search_init();
 8007a72:	f000 fd73 	bl	800855c <search_init>
  sensor_init();
 8007a76:	f001 fc83 	bl	8009380 <sensor_init>

  printf("*** Welcome to WMMC ! ***\n");
 8007a7a:	487a      	ldr	r0, [pc, #488]	; (8007c64 <main+0x22c>)
 8007a7c:	f002 f928 	bl	8009cd0 <puts>

  setbuf(stdout, NULL);
 8007a80:	4b79      	ldr	r3, [pc, #484]	; (8007c68 <main+0x230>)
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	689b      	ldr	r3, [r3, #8]
 8007a86:	2100      	movs	r1, #0
 8007a88:	4618      	mov	r0, r3
 8007a8a:	f002 f929 	bl	8009ce0 <setbuf>
  HAL_TIM_Encoder_Start(&htim4,TIM_CHANNEL_ALL);
 8007a8e:	213c      	movs	r1, #60	; 0x3c
 8007a90:	4876      	ldr	r0, [pc, #472]	; (8007c6c <main+0x234>)
 8007a92:	f7fb fedb 	bl	800384c <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim8,TIM_CHANNEL_ALL);
 8007a96:	213c      	movs	r1, #60	; 0x3c
 8007a98:	4875      	ldr	r0, [pc, #468]	; (8007c70 <main+0x238>)
 8007a9a:	f7fb fed7 	bl	800384c <HAL_TIM_Encoder_Start>
  HAL_TIM_Base_Start_IT(&htim6);
 8007a9e:	4875      	ldr	r0, [pc, #468]	; (8007c74 <main+0x23c>)
 8007aa0:	f7fb fdab 	bl	80035fa <HAL_TIM_Base_Start_IT>
/*  TIM_OC_InitTypeDef ConfigOC;
  ConfigOC.OCMode = TIM_OCMODE_PWM1;
  ConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
  ConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
*/
  int mode = 0;
 8007aa4:	2300      	movs	r3, #0
 8007aa6:	607b      	str	r3, [r7, #4]
  printf("Mode : %d\n", mode);
 8007aa8:	6879      	ldr	r1, [r7, #4]
 8007aaa:	4873      	ldr	r0, [pc, #460]	; (8007c78 <main+0x240>)
 8007aac:	f002 f89c 	bl	8009be8 <iprintf>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	b2db      	uxtb	r3, r3
 8007ab4:	f003 0301 	and.w	r3, r3, #1
 8007ab8:	b2d8      	uxtb	r0, r3
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	b2db      	uxtb	r3, r3
 8007abe:	f003 0302 	and.w	r3, r3, #2
 8007ac2:	b2d9      	uxtb	r1, r3
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	b2db      	uxtb	r3, r3
 8007ac8:	f003 0304 	and.w	r3, r3, #4
 8007acc:	b2db      	uxtb	r3, r3
 8007ace:	461a      	mov	r2, r3
 8007ad0:	f000 fd02 	bl	80084d8 <led_write>
	  if(dist_r >= 20){
 8007ad4:	4b69      	ldr	r3, [pc, #420]	; (8007c7c <main+0x244>)
 8007ad6:	edd3 7a00 	vldr	s15, [r3]
 8007ada:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8007ade:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007ae2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007ae6:	db0f      	blt.n	8007b08 <main+0xd0>
		  mode++;
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	3301      	adds	r3, #1
 8007aec:	607b      	str	r3, [r7, #4]
		  dist_r = 0;
 8007aee:	4b63      	ldr	r3, [pc, #396]	; (8007c7c <main+0x244>)
 8007af0:	f04f 0200 	mov.w	r2, #0
 8007af4:	601a      	str	r2, [r3, #0]
		  if(mode > 7){
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	2b07      	cmp	r3, #7
 8007afa:	dd01      	ble.n	8007b00 <main+0xc8>
			  mode = 0;
 8007afc:	2300      	movs	r3, #0
 8007afe:	607b      	str	r3, [r7, #4]
		  }
		  printf("Mode : %d\n", mode);
 8007b00:	6879      	ldr	r1, [r7, #4]
 8007b02:	485d      	ldr	r0, [pc, #372]	; (8007c78 <main+0x240>)
 8007b04:	f002 f870 	bl	8009be8 <iprintf>
		  //buzzer(pitagola2[mode-1][0], pitagola2[mode-1][1]);
		  //buzzer(pitagola[2][0], pitagola[2][1]);
	  }
	  if(dist_r <= -20){
 8007b08:	4b5c      	ldr	r3, [pc, #368]	; (8007c7c <main+0x244>)
 8007b0a:	edd3 7a00 	vldr	s15, [r3]
 8007b0e:	eebb 7a04 	vmov.f32	s14, #180	; 0xc1a00000 -20.0
 8007b12:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007b16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b1a:	d80f      	bhi.n	8007b3c <main+0x104>
		  mode--;
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	3b01      	subs	r3, #1
 8007b20:	607b      	str	r3, [r7, #4]
		  dist_r = 0;
 8007b22:	4b56      	ldr	r3, [pc, #344]	; (8007c7c <main+0x244>)
 8007b24:	f04f 0200 	mov.w	r2, #0
 8007b28:	601a      	str	r2, [r3, #0]
		  if(mode < 0){
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	da01      	bge.n	8007b34 <main+0xfc>
			  mode = 7;
 8007b30:	2307      	movs	r3, #7
 8007b32:	607b      	str	r3, [r7, #4]
		  }
		  printf("Mode : %d\n", mode);
 8007b34:	6879      	ldr	r1, [r7, #4]
 8007b36:	4850      	ldr	r0, [pc, #320]	; (8007c78 <main+0x240>)
 8007b38:	f002 f856 	bl	8009be8 <iprintf>
		  //buzzer(pitagola2[mode-1][0], pitagola2[mode-1][1]);
		  //buzzer(pitagola[2][0], pitagola[2][1]);
	  }
	  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET){
 8007b3c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007b40:	484f      	ldr	r0, [pc, #316]	; (8007c80 <main+0x248>)
 8007b42:	f7fa fb9f 	bl	8002284 <HAL_GPIO_ReadPin>
 8007b46:	4603      	mov	r3, r0
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d1b1      	bne.n	8007ab0 <main+0x78>
		  HAL_Delay(50);
 8007b4c:	2032      	movs	r0, #50	; 0x32
 8007b4e:	f7f9 fa3d 	bl	8000fcc <HAL_Delay>
		  while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET);
 8007b52:	bf00      	nop
 8007b54:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007b58:	4849      	ldr	r0, [pc, #292]	; (8007c80 <main+0x248>)
 8007b5a:	f7fa fb93 	bl	8002284 <HAL_GPIO_ReadPin>
 8007b5e:	4603      	mov	r3, r0
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d0f7      	beq.n	8007b54 <main+0x11c>
		  switch(mode){
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	2b07      	cmp	r3, #7
 8007b68:	d8a2      	bhi.n	8007ab0 <main+0x78>
 8007b6a:	a201      	add	r2, pc, #4	; (adr r2, 8007b70 <main+0x138>)
 8007b6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b70:	08007b91 	.word	0x08007b91
 8007b74:	08007b9b 	.word	0x08007b9b
 8007b78:	08007ba7 	.word	0x08007ba7
 8007b7c:	08007bb3 	.word	0x08007bb3
 8007b80:	08007bc5 	.word	0x08007bc5
 8007b84:	08007bcb 	.word	0x08007bcb
 8007b88:	08007c1d 	.word	0x08007c1d
 8007b8c:	08007c5b 	.word	0x08007c5b

		  	  case 0:
		  		  HAL_Delay(5000);
 8007b90:	f241 3088 	movw	r0, #5000	; 0x1388
 8007b94:	f7f9 fa1a 	bl	8000fcc <HAL_Delay>
		  		  break;
 8007b98:	e062      	b.n	8007c60 <main+0x228>

		  	  case 1:
		  		  //----a超新地走行----
		  		  printf("Simple Run.\n");
 8007b9a:	483a      	ldr	r0, [pc, #232]	; (8007c84 <main+0x24c>)
 8007b9c:	f002 f898 	bl	8009cd0 <puts>
		  		  simple_run();
 8007ba0:	f7fe f94a 	bl	8005e38 <simple_run>
		  		  break;
 8007ba4:	e05c      	b.n	8007c60 <main+0x228>

		  	  case 2:
		  		  //----aスラローム走行----
		  		  printf("slalom Run.\n");
 8007ba6:	4838      	ldr	r0, [pc, #224]	; (8007c88 <main+0x250>)
 8007ba8:	f002 f892 	bl	8009cd0 <puts>
		  		  slalom_run();
 8007bac:	f7fe fa46 	bl	800603c <slalom_run>
		  		  break;
 8007bb0:	e056      	b.n	8007c60 <main+0x228>

		  	  case 3:
		  		  //----flash 動作確認----
		  		  printf("eprom start \n");
 8007bb2:	4836      	ldr	r0, [pc, #216]	; (8007c8c <main+0x254>)
 8007bb4:	f002 f88c 	bl	8009cd0 <puts>
		  		  store_map_in_eeprom();
 8007bb8:	f001 fb7c 	bl	80092b4 <store_map_in_eeprom>
		  		  printf("eprom fin \n");
 8007bbc:	4834      	ldr	r0, [pc, #208]	; (8007c90 <main+0x258>)
 8007bbe:	f002 f887 	bl	8009cd0 <puts>
		  		  break;
 8007bc2:	e04d      	b.n	8007c60 <main+0x228>

		  	  case 4:
		  		  //----aテストモード選択----
		  		  test_select();
 8007bc4:	f7fe f8bc 	bl	8005d40 <test_select>
		  		  break;
 8007bc8:	e04a      	b.n	8007c60 <main+0x228>

		  	  case 5:
		  		  //----sensor check----
		  		  printf("Sensor Check.\n");
 8007bca:	4832      	ldr	r0, [pc, #200]	; (8007c94 <main+0x25c>)
 8007bcc:	f002 f880 	bl	8009cd0 <puts>
		  		  while(1){
		  			  get_wall_info();
 8007bd0:	f001 fc22 	bl	8009418 <get_wall_info>
		  			  led_write(wall_info & 0x11, wall_info & 0x88, wall_info & 0x44);
 8007bd4:	4b30      	ldr	r3, [pc, #192]	; (8007c98 <main+0x260>)
 8007bd6:	781b      	ldrb	r3, [r3, #0]
 8007bd8:	f003 0311 	and.w	r3, r3, #17
 8007bdc:	b2d8      	uxtb	r0, r3
 8007bde:	4b2e      	ldr	r3, [pc, #184]	; (8007c98 <main+0x260>)
 8007be0:	781b      	ldrb	r3, [r3, #0]
 8007be2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007be6:	b2d9      	uxtb	r1, r3
 8007be8:	4b2b      	ldr	r3, [pc, #172]	; (8007c98 <main+0x260>)
 8007bea:	781b      	ldrb	r3, [r3, #0]
 8007bec:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8007bf0:	b2db      	uxtb	r3, r3
 8007bf2:	461a      	mov	r2, r3
 8007bf4:	f000 fc70 	bl	80084d8 <led_write>
		  			  printf("ad_l : %d, ad_fl : %d, ad_fr : %d, ad_r : %d\n", ad_l, ad_fl, ad_fr, ad_r);
 8007bf8:	4b28      	ldr	r3, [pc, #160]	; (8007c9c <main+0x264>)
 8007bfa:	6819      	ldr	r1, [r3, #0]
 8007bfc:	4b28      	ldr	r3, [pc, #160]	; (8007ca0 <main+0x268>)
 8007bfe:	681a      	ldr	r2, [r3, #0]
 8007c00:	4b28      	ldr	r3, [pc, #160]	; (8007ca4 <main+0x26c>)
 8007c02:	6818      	ldr	r0, [r3, #0]
 8007c04:	4b28      	ldr	r3, [pc, #160]	; (8007ca8 <main+0x270>)
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	9300      	str	r3, [sp, #0]
 8007c0a:	4603      	mov	r3, r0
 8007c0c:	4827      	ldr	r0, [pc, #156]	; (8007cac <main+0x274>)
 8007c0e:	f001 ffeb 	bl	8009be8 <iprintf>
		  			  HAL_Delay(333);
 8007c12:	f240 104d 	movw	r0, #333	; 0x14d
 8007c16:	f7f9 f9d9 	bl	8000fcc <HAL_Delay>
		  			  get_wall_info();
 8007c1a:	e7d9      	b.n	8007bd0 <main+0x198>
					}
					break;

		  	  case 6:
		  		  //----pitagola sound----
		  		  while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_SET);
 8007c1c:	bf00      	nop
 8007c1e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007c22:	4817      	ldr	r0, [pc, #92]	; (8007c80 <main+0x248>)
 8007c24:	f7fa fb2e 	bl	8002284 <HAL_GPIO_ReadPin>
 8007c28:	4603      	mov	r3, r0
 8007c2a:	2b01      	cmp	r3, #1
 8007c2c:	d0f7      	beq.n	8007c1e <main+0x1e6>
		  		  for(int i=0; i<pita; i++){
 8007c2e:	2300      	movs	r3, #0
 8007c30:	603b      	str	r3, [r7, #0]
 8007c32:	e00e      	b.n	8007c52 <main+0x21a>
		  			  buzzer(pitagola[i][0], pitagola[i][1]);
 8007c34:	4a1e      	ldr	r2, [pc, #120]	; (8007cb0 <main+0x278>)
 8007c36:	683b      	ldr	r3, [r7, #0]
 8007c38:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8007c3c:	4a1c      	ldr	r2, [pc, #112]	; (8007cb0 <main+0x278>)
 8007c3e:	683b      	ldr	r3, [r7, #0]
 8007c40:	00db      	lsls	r3, r3, #3
 8007c42:	4413      	add	r3, r2
 8007c44:	685b      	ldr	r3, [r3, #4]
 8007c46:	4619      	mov	r1, r3
 8007c48:	f000 fbe6 	bl	8008418 <buzzer>
		  		  for(int i=0; i<pita; i++){
 8007c4c:	683b      	ldr	r3, [r7, #0]
 8007c4e:	3301      	adds	r3, #1
 8007c50:	603b      	str	r3, [r7, #0]
 8007c52:	683b      	ldr	r3, [r7, #0]
 8007c54:	2b0a      	cmp	r3, #10
 8007c56:	dded      	ble.n	8007c34 <main+0x1fc>
		  		  }
		  		  break;
 8007c58:	e002      	b.n	8007c60 <main+0x228>

		  	  case 7:
		  		  //----a本番走行用----
		  		  perfect_run();
 8007c5a:	f7fe fb87 	bl	800636c <perfect_run>
		  		  break;
 8007c5e:	bf00      	nop
	  led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 8007c60:	e726      	b.n	8007ab0 <main+0x78>
 8007c62:	bf00      	nop
 8007c64:	0800b014 	.word	0x0800b014
 8007c68:	20000064 	.word	0x20000064
 8007c6c:	200002e0 	.word	0x200002e0
 8007c70:	200002a0 	.word	0x200002a0
 8007c74:	20000a74 	.word	0x20000a74
 8007c78:	0800b030 	.word	0x0800b030
 8007c7c:	200009b8 	.word	0x200009b8
 8007c80:	40020000 	.word	0x40020000
 8007c84:	0800b03c 	.word	0x0800b03c
 8007c88:	0800b048 	.word	0x0800b048
 8007c8c:	0800b054 	.word	0x0800b054
 8007c90:	0800b064 	.word	0x0800b064
 8007c94:	0800b070 	.word	0x0800b070
 8007c98:	2000029c 	.word	0x2000029c
 8007c9c:	200009c4 	.word	0x200009c4
 8007ca0:	20000c0c 	.word	0x20000c0c
 8007ca4:	20000ac0 	.word	0x20000ac0
 8007ca8:	20000e14 	.word	0x20000e14
 8007cac:	0800b080 	.word	0x0800b080
 8007cb0:	20000008 	.word	0x20000008

08007cb4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8007cb4:	b580      	push	{r7, lr}
 8007cb6:	b094      	sub	sp, #80	; 0x50
 8007cb8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8007cba:	f107 0320 	add.w	r3, r7, #32
 8007cbe:	2230      	movs	r2, #48	; 0x30
 8007cc0:	2100      	movs	r1, #0
 8007cc2:	4618      	mov	r0, r3
 8007cc4:	f001 ff88 	bl	8009bd8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8007cc8:	f107 030c 	add.w	r3, r7, #12
 8007ccc:	2200      	movs	r2, #0
 8007cce:	601a      	str	r2, [r3, #0]
 8007cd0:	605a      	str	r2, [r3, #4]
 8007cd2:	609a      	str	r2, [r3, #8]
 8007cd4:	60da      	str	r2, [r3, #12]
 8007cd6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8007cd8:	2300      	movs	r3, #0
 8007cda:	60bb      	str	r3, [r7, #8]
 8007cdc:	4b28      	ldr	r3, [pc, #160]	; (8007d80 <SystemClock_Config+0xcc>)
 8007cde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ce0:	4a27      	ldr	r2, [pc, #156]	; (8007d80 <SystemClock_Config+0xcc>)
 8007ce2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007ce6:	6413      	str	r3, [r2, #64]	; 0x40
 8007ce8:	4b25      	ldr	r3, [pc, #148]	; (8007d80 <SystemClock_Config+0xcc>)
 8007cea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007cf0:	60bb      	str	r3, [r7, #8]
 8007cf2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8007cf4:	2300      	movs	r3, #0
 8007cf6:	607b      	str	r3, [r7, #4]
 8007cf8:	4b22      	ldr	r3, [pc, #136]	; (8007d84 <SystemClock_Config+0xd0>)
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	4a21      	ldr	r2, [pc, #132]	; (8007d84 <SystemClock_Config+0xd0>)
 8007cfe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007d02:	6013      	str	r3, [r2, #0]
 8007d04:	4b1f      	ldr	r3, [pc, #124]	; (8007d84 <SystemClock_Config+0xd0>)
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007d0c:	607b      	str	r3, [r7, #4]
 8007d0e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8007d10:	2302      	movs	r3, #2
 8007d12:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8007d14:	2301      	movs	r3, #1
 8007d16:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8007d18:	2310      	movs	r3, #16
 8007d1a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8007d1c:	2302      	movs	r3, #2
 8007d1e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8007d20:	2300      	movs	r3, #0
 8007d22:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8007d24:	2308      	movs	r3, #8
 8007d26:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8007d28:	23a8      	movs	r3, #168	; 0xa8
 8007d2a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8007d2c:	2302      	movs	r3, #2
 8007d2e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8007d30:	2304      	movs	r3, #4
 8007d32:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8007d34:	f107 0320 	add.w	r3, r7, #32
 8007d38:	4618      	mov	r0, r3
 8007d3a:	f7fa fad5 	bl	80022e8 <HAL_RCC_OscConfig>
 8007d3e:	4603      	mov	r3, r0
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d001      	beq.n	8007d48 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8007d44:	f000 fc02 	bl	800854c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8007d48:	230f      	movs	r3, #15
 8007d4a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8007d4c:	2302      	movs	r3, #2
 8007d4e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8007d50:	2300      	movs	r3, #0
 8007d52:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8007d54:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8007d58:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8007d5a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007d5e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8007d60:	f107 030c 	add.w	r3, r7, #12
 8007d64:	2105      	movs	r1, #5
 8007d66:	4618      	mov	r0, r3
 8007d68:	f7fa fd00 	bl	800276c <HAL_RCC_ClockConfig>
 8007d6c:	4603      	mov	r3, r0
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d001      	beq.n	8007d76 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8007d72:	f000 fbeb 	bl	800854c <Error_Handler>
  }
}
 8007d76:	bf00      	nop
 8007d78:	3750      	adds	r7, #80	; 0x50
 8007d7a:	46bd      	mov	sp, r7
 8007d7c:	bd80      	pop	{r7, pc}
 8007d7e:	bf00      	nop
 8007d80:	40023800 	.word	0x40023800
 8007d84:	40007000 	.word	0x40007000

08007d88 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8007d88:	b580      	push	{r7, lr}
 8007d8a:	b084      	sub	sp, #16
 8007d8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8007d8e:	463b      	mov	r3, r7
 8007d90:	2200      	movs	r2, #0
 8007d92:	601a      	str	r2, [r3, #0]
 8007d94:	605a      	str	r2, [r3, #4]
 8007d96:	609a      	str	r2, [r3, #8]
 8007d98:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 8007d9a:	4b21      	ldr	r3, [pc, #132]	; (8007e20 <MX_ADC1_Init+0x98>)
 8007d9c:	4a21      	ldr	r2, [pc, #132]	; (8007e24 <MX_ADC1_Init+0x9c>)
 8007d9e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8007da0:	4b1f      	ldr	r3, [pc, #124]	; (8007e20 <MX_ADC1_Init+0x98>)
 8007da2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8007da6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8007da8:	4b1d      	ldr	r3, [pc, #116]	; (8007e20 <MX_ADC1_Init+0x98>)
 8007daa:	2200      	movs	r2, #0
 8007dac:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8007dae:	4b1c      	ldr	r3, [pc, #112]	; (8007e20 <MX_ADC1_Init+0x98>)
 8007db0:	2200      	movs	r2, #0
 8007db2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8007db4:	4b1a      	ldr	r3, [pc, #104]	; (8007e20 <MX_ADC1_Init+0x98>)
 8007db6:	2200      	movs	r2, #0
 8007db8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8007dba:	4b19      	ldr	r3, [pc, #100]	; (8007e20 <MX_ADC1_Init+0x98>)
 8007dbc:	2200      	movs	r2, #0
 8007dbe:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8007dc2:	4b17      	ldr	r3, [pc, #92]	; (8007e20 <MX_ADC1_Init+0x98>)
 8007dc4:	2200      	movs	r2, #0
 8007dc6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8007dc8:	4b15      	ldr	r3, [pc, #84]	; (8007e20 <MX_ADC1_Init+0x98>)
 8007dca:	4a17      	ldr	r2, [pc, #92]	; (8007e28 <MX_ADC1_Init+0xa0>)
 8007dcc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8007dce:	4b14      	ldr	r3, [pc, #80]	; (8007e20 <MX_ADC1_Init+0x98>)
 8007dd0:	2200      	movs	r2, #0
 8007dd2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8007dd4:	4b12      	ldr	r3, [pc, #72]	; (8007e20 <MX_ADC1_Init+0x98>)
 8007dd6:	2201      	movs	r2, #1
 8007dd8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8007dda:	4b11      	ldr	r3, [pc, #68]	; (8007e20 <MX_ADC1_Init+0x98>)
 8007ddc:	2200      	movs	r2, #0
 8007dde:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8007de2:	4b0f      	ldr	r3, [pc, #60]	; (8007e20 <MX_ADC1_Init+0x98>)
 8007de4:	2201      	movs	r2, #1
 8007de6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8007de8:	480d      	ldr	r0, [pc, #52]	; (8007e20 <MX_ADC1_Init+0x98>)
 8007dea:	f7f9 f911 	bl	8001010 <HAL_ADC_Init>
 8007dee:	4603      	mov	r3, r0
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d001      	beq.n	8007df8 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8007df4:	f000 fbaa 	bl	800854c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8007df8:	2300      	movs	r3, #0
 8007dfa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8007dfc:	2301      	movs	r3, #1
 8007dfe:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8007e00:	2300      	movs	r3, #0
 8007e02:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8007e04:	463b      	mov	r3, r7
 8007e06:	4619      	mov	r1, r3
 8007e08:	4805      	ldr	r0, [pc, #20]	; (8007e20 <MX_ADC1_Init+0x98>)
 8007e0a:	f7f9 fa9d 	bl	8001348 <HAL_ADC_ConfigChannel>
 8007e0e:	4603      	mov	r3, r0
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d001      	beq.n	8007e18 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8007e14:	f000 fb9a 	bl	800854c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8007e18:	bf00      	nop
 8007e1a:	3710      	adds	r7, #16
 8007e1c:	46bd      	mov	sp, r7
 8007e1e:	bd80      	pop	{r7, pc}
 8007e20:	200009c8 	.word	0x200009c8
 8007e24:	40012000 	.word	0x40012000
 8007e28:	0f000001 	.word	0x0f000001

08007e2c <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8007e2c:	b580      	push	{r7, lr}
 8007e2e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8007e30:	4b17      	ldr	r3, [pc, #92]	; (8007e90 <MX_SPI3_Init+0x64>)
 8007e32:	4a18      	ldr	r2, [pc, #96]	; (8007e94 <MX_SPI3_Init+0x68>)
 8007e34:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8007e36:	4b16      	ldr	r3, [pc, #88]	; (8007e90 <MX_SPI3_Init+0x64>)
 8007e38:	f44f 7282 	mov.w	r2, #260	; 0x104
 8007e3c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8007e3e:	4b14      	ldr	r3, [pc, #80]	; (8007e90 <MX_SPI3_Init+0x64>)
 8007e40:	2200      	movs	r2, #0
 8007e42:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8007e44:	4b12      	ldr	r3, [pc, #72]	; (8007e90 <MX_SPI3_Init+0x64>)
 8007e46:	2200      	movs	r2, #0
 8007e48:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8007e4a:	4b11      	ldr	r3, [pc, #68]	; (8007e90 <MX_SPI3_Init+0x64>)
 8007e4c:	2200      	movs	r2, #0
 8007e4e:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8007e50:	4b0f      	ldr	r3, [pc, #60]	; (8007e90 <MX_SPI3_Init+0x64>)
 8007e52:	2200      	movs	r2, #0
 8007e54:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8007e56:	4b0e      	ldr	r3, [pc, #56]	; (8007e90 <MX_SPI3_Init+0x64>)
 8007e58:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007e5c:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8007e5e:	4b0c      	ldr	r3, [pc, #48]	; (8007e90 <MX_SPI3_Init+0x64>)
 8007e60:	2218      	movs	r2, #24
 8007e62:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8007e64:	4b0a      	ldr	r3, [pc, #40]	; (8007e90 <MX_SPI3_Init+0x64>)
 8007e66:	2200      	movs	r2, #0
 8007e68:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8007e6a:	4b09      	ldr	r3, [pc, #36]	; (8007e90 <MX_SPI3_Init+0x64>)
 8007e6c:	2200      	movs	r2, #0
 8007e6e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007e70:	4b07      	ldr	r3, [pc, #28]	; (8007e90 <MX_SPI3_Init+0x64>)
 8007e72:	2200      	movs	r2, #0
 8007e74:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8007e76:	4b06      	ldr	r3, [pc, #24]	; (8007e90 <MX_SPI3_Init+0x64>)
 8007e78:	220a      	movs	r2, #10
 8007e7a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8007e7c:	4804      	ldr	r0, [pc, #16]	; (8007e90 <MX_SPI3_Init+0x64>)
 8007e7e:	f7fa fe3d 	bl	8002afc <HAL_SPI_Init>
 8007e82:	4603      	mov	r3, r0
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d001      	beq.n	8007e8c <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8007e88:	f000 fb60 	bl	800854c <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8007e8c:	bf00      	nop
 8007e8e:	bd80      	pop	{r7, pc}
 8007e90:	20000120 	.word	0x20000120
 8007e94:	40003c00 	.word	0x40003c00

08007e98 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8007e98:	b580      	push	{r7, lr}
 8007e9a:	b08e      	sub	sp, #56	; 0x38
 8007e9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8007e9e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007ea2:	2200      	movs	r2, #0
 8007ea4:	601a      	str	r2, [r3, #0]
 8007ea6:	605a      	str	r2, [r3, #4]
 8007ea8:	609a      	str	r2, [r3, #8]
 8007eaa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007eac:	f107 0320 	add.w	r3, r7, #32
 8007eb0:	2200      	movs	r2, #0
 8007eb2:	601a      	str	r2, [r3, #0]
 8007eb4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8007eb6:	1d3b      	adds	r3, r7, #4
 8007eb8:	2200      	movs	r2, #0
 8007eba:	601a      	str	r2, [r3, #0]
 8007ebc:	605a      	str	r2, [r3, #4]
 8007ebe:	609a      	str	r2, [r3, #8]
 8007ec0:	60da      	str	r2, [r3, #12]
 8007ec2:	611a      	str	r2, [r3, #16]
 8007ec4:	615a      	str	r2, [r3, #20]
 8007ec6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8007ec8:	4b32      	ldr	r3, [pc, #200]	; (8007f94 <MX_TIM2_Init+0xfc>)
 8007eca:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8007ece:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8007ed0:	4b30      	ldr	r3, [pc, #192]	; (8007f94 <MX_TIM2_Init+0xfc>)
 8007ed2:	2200      	movs	r2, #0
 8007ed4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007ed6:	4b2f      	ldr	r3, [pc, #188]	; (8007f94 <MX_TIM2_Init+0xfc>)
 8007ed8:	2200      	movs	r2, #0
 8007eda:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8007edc:	4b2d      	ldr	r3, [pc, #180]	; (8007f94 <MX_TIM2_Init+0xfc>)
 8007ede:	f240 32e7 	movw	r2, #999	; 0x3e7
 8007ee2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007ee4:	4b2b      	ldr	r3, [pc, #172]	; (8007f94 <MX_TIM2_Init+0xfc>)
 8007ee6:	2200      	movs	r2, #0
 8007ee8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007eea:	4b2a      	ldr	r3, [pc, #168]	; (8007f94 <MX_TIM2_Init+0xfc>)
 8007eec:	2200      	movs	r2, #0
 8007eee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8007ef0:	4828      	ldr	r0, [pc, #160]	; (8007f94 <MX_TIM2_Init+0xfc>)
 8007ef2:	f7fb fb57 	bl	80035a4 <HAL_TIM_Base_Init>
 8007ef6:	4603      	mov	r3, r0
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d001      	beq.n	8007f00 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8007efc:	f000 fb26 	bl	800854c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8007f00:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007f04:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8007f06:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007f0a:	4619      	mov	r1, r3
 8007f0c:	4821      	ldr	r0, [pc, #132]	; (8007f94 <MX_TIM2_Init+0xfc>)
 8007f0e:	f7fb fea3 	bl	8003c58 <HAL_TIM_ConfigClockSource>
 8007f12:	4603      	mov	r3, r0
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d001      	beq.n	8007f1c <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8007f18:	f000 fb18 	bl	800854c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8007f1c:	481d      	ldr	r0, [pc, #116]	; (8007f94 <MX_TIM2_Init+0xfc>)
 8007f1e:	f7fb fb90 	bl	8003642 <HAL_TIM_PWM_Init>
 8007f22:	4603      	mov	r3, r0
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d001      	beq.n	8007f2c <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8007f28:	f000 fb10 	bl	800854c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8007f2c:	2300      	movs	r3, #0
 8007f2e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007f30:	2300      	movs	r3, #0
 8007f32:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8007f34:	f107 0320 	add.w	r3, r7, #32
 8007f38:	4619      	mov	r1, r3
 8007f3a:	4816      	ldr	r0, [pc, #88]	; (8007f94 <MX_TIM2_Init+0xfc>)
 8007f3c:	f7fc fa7b 	bl	8004436 <HAL_TIMEx_MasterConfigSynchronization>
 8007f40:	4603      	mov	r3, r0
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d001      	beq.n	8007f4a <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8007f46:	f000 fb01 	bl	800854c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8007f4a:	2360      	movs	r3, #96	; 0x60
 8007f4c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8007f4e:	2300      	movs	r3, #0
 8007f50:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8007f52:	2300      	movs	r3, #0
 8007f54:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8007f56:	2300      	movs	r3, #0
 8007f58:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8007f5a:	1d3b      	adds	r3, r7, #4
 8007f5c:	2200      	movs	r2, #0
 8007f5e:	4619      	mov	r1, r3
 8007f60:	480c      	ldr	r0, [pc, #48]	; (8007f94 <MX_TIM2_Init+0xfc>)
 8007f62:	f7fb fdb3 	bl	8003acc <HAL_TIM_PWM_ConfigChannel>
 8007f66:	4603      	mov	r3, r0
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d001      	beq.n	8007f70 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8007f6c:	f000 faee 	bl	800854c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8007f70:	1d3b      	adds	r3, r7, #4
 8007f72:	220c      	movs	r2, #12
 8007f74:	4619      	mov	r1, r3
 8007f76:	4807      	ldr	r0, [pc, #28]	; (8007f94 <MX_TIM2_Init+0xfc>)
 8007f78:	f7fb fda8 	bl	8003acc <HAL_TIM_PWM_ConfigChannel>
 8007f7c:	4603      	mov	r3, r0
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d001      	beq.n	8007f86 <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 8007f82:	f000 fae3 	bl	800854c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8007f86:	4803      	ldr	r0, [pc, #12]	; (8007f94 <MX_TIM2_Init+0xfc>)
 8007f88:	f001 fc04 	bl	8009794 <HAL_TIM_MspPostInit>

}
 8007f8c:	bf00      	nop
 8007f8e:	3738      	adds	r7, #56	; 0x38
 8007f90:	46bd      	mov	sp, r7
 8007f92:	bd80      	pop	{r7, pc}
 8007f94:	20000acc 	.word	0x20000acc

08007f98 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8007f98:	b580      	push	{r7, lr}
 8007f9a:	b08e      	sub	sp, #56	; 0x38
 8007f9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8007f9e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007fa2:	2200      	movs	r2, #0
 8007fa4:	601a      	str	r2, [r3, #0]
 8007fa6:	605a      	str	r2, [r3, #4]
 8007fa8:	609a      	str	r2, [r3, #8]
 8007faa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007fac:	f107 0320 	add.w	r3, r7, #32
 8007fb0:	2200      	movs	r2, #0
 8007fb2:	601a      	str	r2, [r3, #0]
 8007fb4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8007fb6:	1d3b      	adds	r3, r7, #4
 8007fb8:	2200      	movs	r2, #0
 8007fba:	601a      	str	r2, [r3, #0]
 8007fbc:	605a      	str	r2, [r3, #4]
 8007fbe:	609a      	str	r2, [r3, #8]
 8007fc0:	60da      	str	r2, [r3, #12]
 8007fc2:	611a      	str	r2, [r3, #16]
 8007fc4:	615a      	str	r2, [r3, #20]
 8007fc6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8007fc8:	4b2c      	ldr	r3, [pc, #176]	; (800807c <MX_TIM3_Init+0xe4>)
 8007fca:	4a2d      	ldr	r2, [pc, #180]	; (8008080 <MX_TIM3_Init+0xe8>)
 8007fcc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 64-1;
 8007fce:	4b2b      	ldr	r3, [pc, #172]	; (800807c <MX_TIM3_Init+0xe4>)
 8007fd0:	223f      	movs	r2, #63	; 0x3f
 8007fd2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007fd4:	4b29      	ldr	r3, [pc, #164]	; (800807c <MX_TIM3_Init+0xe4>)
 8007fd6:	2200      	movs	r2, #0
 8007fd8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0;
 8007fda:	4b28      	ldr	r3, [pc, #160]	; (800807c <MX_TIM3_Init+0xe4>)
 8007fdc:	2200      	movs	r2, #0
 8007fde:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007fe0:	4b26      	ldr	r3, [pc, #152]	; (800807c <MX_TIM3_Init+0xe4>)
 8007fe2:	2200      	movs	r2, #0
 8007fe4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007fe6:	4b25      	ldr	r3, [pc, #148]	; (800807c <MX_TIM3_Init+0xe4>)
 8007fe8:	2200      	movs	r2, #0
 8007fea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8007fec:	4823      	ldr	r0, [pc, #140]	; (800807c <MX_TIM3_Init+0xe4>)
 8007fee:	f7fb fad9 	bl	80035a4 <HAL_TIM_Base_Init>
 8007ff2:	4603      	mov	r3, r0
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d001      	beq.n	8007ffc <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 8007ff8:	f000 faa8 	bl	800854c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8007ffc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008000:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8008002:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008006:	4619      	mov	r1, r3
 8008008:	481c      	ldr	r0, [pc, #112]	; (800807c <MX_TIM3_Init+0xe4>)
 800800a:	f7fb fe25 	bl	8003c58 <HAL_TIM_ConfigClockSource>
 800800e:	4603      	mov	r3, r0
 8008010:	2b00      	cmp	r3, #0
 8008012:	d001      	beq.n	8008018 <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 8008014:	f000 fa9a 	bl	800854c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8008018:	4818      	ldr	r0, [pc, #96]	; (800807c <MX_TIM3_Init+0xe4>)
 800801a:	f7fb fb12 	bl	8003642 <HAL_TIM_PWM_Init>
 800801e:	4603      	mov	r3, r0
 8008020:	2b00      	cmp	r3, #0
 8008022:	d001      	beq.n	8008028 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 8008024:	f000 fa92 	bl	800854c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8008028:	2300      	movs	r3, #0
 800802a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800802c:	2300      	movs	r3, #0
 800802e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8008030:	f107 0320 	add.w	r3, r7, #32
 8008034:	4619      	mov	r1, r3
 8008036:	4811      	ldr	r0, [pc, #68]	; (800807c <MX_TIM3_Init+0xe4>)
 8008038:	f7fc f9fd 	bl	8004436 <HAL_TIMEx_MasterConfigSynchronization>
 800803c:	4603      	mov	r3, r0
 800803e:	2b00      	cmp	r3, #0
 8008040:	d001      	beq.n	8008046 <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 8008042:	f000 fa83 	bl	800854c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8008046:	2360      	movs	r3, #96	; 0x60
 8008048:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800804a:	2300      	movs	r3, #0
 800804c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800804e:	2300      	movs	r3, #0
 8008050:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8008052:	2300      	movs	r3, #0
 8008054:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8008056:	1d3b      	adds	r3, r7, #4
 8008058:	2204      	movs	r2, #4
 800805a:	4619      	mov	r1, r3
 800805c:	4807      	ldr	r0, [pc, #28]	; (800807c <MX_TIM3_Init+0xe4>)
 800805e:	f7fb fd35 	bl	8003acc <HAL_TIM_PWM_ConfigChannel>
 8008062:	4603      	mov	r3, r0
 8008064:	2b00      	cmp	r3, #0
 8008066:	d001      	beq.n	800806c <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 8008068:	f000 fa70 	bl	800854c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800806c:	4803      	ldr	r0, [pc, #12]	; (800807c <MX_TIM3_Init+0xe4>)
 800806e:	f001 fb91 	bl	8009794 <HAL_TIM_MspPostInit>

}
 8008072:	bf00      	nop
 8008074:	3738      	adds	r7, #56	; 0x38
 8008076:	46bd      	mov	sp, r7
 8008078:	bd80      	pop	{r7, pc}
 800807a:	bf00      	nop
 800807c:	20000970 	.word	0x20000970
 8008080:	40000400 	.word	0x40000400

08008084 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8008084:	b580      	push	{r7, lr}
 8008086:	b08c      	sub	sp, #48	; 0x30
 8008088:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800808a:	f107 030c 	add.w	r3, r7, #12
 800808e:	2224      	movs	r2, #36	; 0x24
 8008090:	2100      	movs	r1, #0
 8008092:	4618      	mov	r0, r3
 8008094:	f001 fda0 	bl	8009bd8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008098:	1d3b      	adds	r3, r7, #4
 800809a:	2200      	movs	r2, #0
 800809c:	601a      	str	r2, [r3, #0]
 800809e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80080a0:	4b20      	ldr	r3, [pc, #128]	; (8008124 <MX_TIM4_Init+0xa0>)
 80080a2:	4a21      	ldr	r2, [pc, #132]	; (8008128 <MX_TIM4_Init+0xa4>)
 80080a4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80080a6:	4b1f      	ldr	r3, [pc, #124]	; (8008124 <MX_TIM4_Init+0xa0>)
 80080a8:	2200      	movs	r2, #0
 80080aa:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80080ac:	4b1d      	ldr	r3, [pc, #116]	; (8008124 <MX_TIM4_Init+0xa0>)
 80080ae:	2200      	movs	r2, #0
 80080b0:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80080b2:	4b1c      	ldr	r3, [pc, #112]	; (8008124 <MX_TIM4_Init+0xa0>)
 80080b4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80080b8:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80080ba:	4b1a      	ldr	r3, [pc, #104]	; (8008124 <MX_TIM4_Init+0xa0>)
 80080bc:	2200      	movs	r2, #0
 80080be:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80080c0:	4b18      	ldr	r3, [pc, #96]	; (8008124 <MX_TIM4_Init+0xa0>)
 80080c2:	2200      	movs	r2, #0
 80080c4:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80080c6:	2303      	movs	r3, #3
 80080c8:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80080ca:	2300      	movs	r3, #0
 80080cc:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80080ce:	2301      	movs	r3, #1
 80080d0:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80080d2:	2300      	movs	r3, #0
 80080d4:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80080d6:	2300      	movs	r3, #0
 80080d8:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80080da:	2300      	movs	r3, #0
 80080dc:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80080de:	2301      	movs	r3, #1
 80080e0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80080e2:	2300      	movs	r3, #0
 80080e4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80080e6:	2300      	movs	r3, #0
 80080e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80080ea:	f107 030c 	add.w	r3, r7, #12
 80080ee:	4619      	mov	r1, r3
 80080f0:	480c      	ldr	r0, [pc, #48]	; (8008124 <MX_TIM4_Init+0xa0>)
 80080f2:	f7fb fb19 	bl	8003728 <HAL_TIM_Encoder_Init>
 80080f6:	4603      	mov	r3, r0
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d001      	beq.n	8008100 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 80080fc:	f000 fa26 	bl	800854c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8008100:	2300      	movs	r3, #0
 8008102:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008104:	2300      	movs	r3, #0
 8008106:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8008108:	1d3b      	adds	r3, r7, #4
 800810a:	4619      	mov	r1, r3
 800810c:	4805      	ldr	r0, [pc, #20]	; (8008124 <MX_TIM4_Init+0xa0>)
 800810e:	f7fc f992 	bl	8004436 <HAL_TIMEx_MasterConfigSynchronization>
 8008112:	4603      	mov	r3, r0
 8008114:	2b00      	cmp	r3, #0
 8008116:	d001      	beq.n	800811c <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8008118:	f000 fa18 	bl	800854c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800811c:	bf00      	nop
 800811e:	3730      	adds	r7, #48	; 0x30
 8008120:	46bd      	mov	sp, r7
 8008122:	bd80      	pop	{r7, pc}
 8008124:	200002e0 	.word	0x200002e0
 8008128:	40000800 	.word	0x40000800

0800812c <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 800812c:	b580      	push	{r7, lr}
 800812e:	b082      	sub	sp, #8
 8008130:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008132:	463b      	mov	r3, r7
 8008134:	2200      	movs	r2, #0
 8008136:	601a      	str	r2, [r3, #0]
 8008138:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800813a:	4b15      	ldr	r3, [pc, #84]	; (8008190 <MX_TIM6_Init+0x64>)
 800813c:	4a15      	ldr	r2, [pc, #84]	; (8008194 <MX_TIM6_Init+0x68>)
 800813e:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 84-1;
 8008140:	4b13      	ldr	r3, [pc, #76]	; (8008190 <MX_TIM6_Init+0x64>)
 8008142:	2253      	movs	r2, #83	; 0x53
 8008144:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008146:	4b12      	ldr	r3, [pc, #72]	; (8008190 <MX_TIM6_Init+0x64>)
 8008148:	2200      	movs	r2, #0
 800814a:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000-1;
 800814c:	4b10      	ldr	r3, [pc, #64]	; (8008190 <MX_TIM6_Init+0x64>)
 800814e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8008152:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008154:	4b0e      	ldr	r3, [pc, #56]	; (8008190 <MX_TIM6_Init+0x64>)
 8008156:	2200      	movs	r2, #0
 8008158:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800815a:	480d      	ldr	r0, [pc, #52]	; (8008190 <MX_TIM6_Init+0x64>)
 800815c:	f7fb fa22 	bl	80035a4 <HAL_TIM_Base_Init>
 8008160:	4603      	mov	r3, r0
 8008162:	2b00      	cmp	r3, #0
 8008164:	d001      	beq.n	800816a <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8008166:	f000 f9f1 	bl	800854c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800816a:	2300      	movs	r3, #0
 800816c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800816e:	2300      	movs	r3, #0
 8008170:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8008172:	463b      	mov	r3, r7
 8008174:	4619      	mov	r1, r3
 8008176:	4806      	ldr	r0, [pc, #24]	; (8008190 <MX_TIM6_Init+0x64>)
 8008178:	f7fc f95d 	bl	8004436 <HAL_TIMEx_MasterConfigSynchronization>
 800817c:	4603      	mov	r3, r0
 800817e:	2b00      	cmp	r3, #0
 8008180:	d001      	beq.n	8008186 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8008182:	f000 f9e3 	bl	800854c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8008186:	bf00      	nop
 8008188:	3708      	adds	r7, #8
 800818a:	46bd      	mov	sp, r7
 800818c:	bd80      	pop	{r7, pc}
 800818e:	bf00      	nop
 8008190:	20000a74 	.word	0x20000a74
 8008194:	40001000 	.word	0x40001000

08008198 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8008198:	b580      	push	{r7, lr}
 800819a:	b08c      	sub	sp, #48	; 0x30
 800819c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800819e:	f107 030c 	add.w	r3, r7, #12
 80081a2:	2224      	movs	r2, #36	; 0x24
 80081a4:	2100      	movs	r1, #0
 80081a6:	4618      	mov	r0, r3
 80081a8:	f001 fd16 	bl	8009bd8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80081ac:	1d3b      	adds	r3, r7, #4
 80081ae:	2200      	movs	r2, #0
 80081b0:	601a      	str	r2, [r3, #0]
 80081b2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80081b4:	4b22      	ldr	r3, [pc, #136]	; (8008240 <MX_TIM8_Init+0xa8>)
 80081b6:	4a23      	ldr	r2, [pc, #140]	; (8008244 <MX_TIM8_Init+0xac>)
 80081b8:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80081ba:	4b21      	ldr	r3, [pc, #132]	; (8008240 <MX_TIM8_Init+0xa8>)
 80081bc:	2200      	movs	r2, #0
 80081be:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80081c0:	4b1f      	ldr	r3, [pc, #124]	; (8008240 <MX_TIM8_Init+0xa8>)
 80081c2:	2200      	movs	r2, #0
 80081c4:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 80081c6:	4b1e      	ldr	r3, [pc, #120]	; (8008240 <MX_TIM8_Init+0xa8>)
 80081c8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80081cc:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80081ce:	4b1c      	ldr	r3, [pc, #112]	; (8008240 <MX_TIM8_Init+0xa8>)
 80081d0:	2200      	movs	r2, #0
 80081d2:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80081d4:	4b1a      	ldr	r3, [pc, #104]	; (8008240 <MX_TIM8_Init+0xa8>)
 80081d6:	2200      	movs	r2, #0
 80081d8:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80081da:	4b19      	ldr	r3, [pc, #100]	; (8008240 <MX_TIM8_Init+0xa8>)
 80081dc:	2200      	movs	r2, #0
 80081de:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80081e0:	2303      	movs	r3, #3
 80081e2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80081e4:	2300      	movs	r3, #0
 80081e6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80081e8:	2301      	movs	r3, #1
 80081ea:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80081ec:	2300      	movs	r3, #0
 80081ee:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80081f0:	2300      	movs	r3, #0
 80081f2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80081f4:	2300      	movs	r3, #0
 80081f6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80081f8:	2301      	movs	r3, #1
 80081fa:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80081fc:	2300      	movs	r3, #0
 80081fe:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8008200:	2300      	movs	r3, #0
 8008202:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8008204:	f107 030c 	add.w	r3, r7, #12
 8008208:	4619      	mov	r1, r3
 800820a:	480d      	ldr	r0, [pc, #52]	; (8008240 <MX_TIM8_Init+0xa8>)
 800820c:	f7fb fa8c 	bl	8003728 <HAL_TIM_Encoder_Init>
 8008210:	4603      	mov	r3, r0
 8008212:	2b00      	cmp	r3, #0
 8008214:	d001      	beq.n	800821a <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 8008216:	f000 f999 	bl	800854c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800821a:	2300      	movs	r3, #0
 800821c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800821e:	2300      	movs	r3, #0
 8008220:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8008222:	1d3b      	adds	r3, r7, #4
 8008224:	4619      	mov	r1, r3
 8008226:	4806      	ldr	r0, [pc, #24]	; (8008240 <MX_TIM8_Init+0xa8>)
 8008228:	f7fc f905 	bl	8004436 <HAL_TIMEx_MasterConfigSynchronization>
 800822c:	4603      	mov	r3, r0
 800822e:	2b00      	cmp	r3, #0
 8008230:	d001      	beq.n	8008236 <MX_TIM8_Init+0x9e>
  {
    Error_Handler();
 8008232:	f000 f98b 	bl	800854c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8008236:	bf00      	nop
 8008238:	3730      	adds	r7, #48	; 0x30
 800823a:	46bd      	mov	sp, r7
 800823c:	bd80      	pop	{r7, pc}
 800823e:	bf00      	nop
 8008240:	200002a0 	.word	0x200002a0
 8008244:	40010400 	.word	0x40010400

08008248 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8008248:	b580      	push	{r7, lr}
 800824a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800824c:	4b11      	ldr	r3, [pc, #68]	; (8008294 <MX_USART1_UART_Init+0x4c>)
 800824e:	4a12      	ldr	r2, [pc, #72]	; (8008298 <MX_USART1_UART_Init+0x50>)
 8008250:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8008252:	4b10      	ldr	r3, [pc, #64]	; (8008294 <MX_USART1_UART_Init+0x4c>)
 8008254:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8008258:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800825a:	4b0e      	ldr	r3, [pc, #56]	; (8008294 <MX_USART1_UART_Init+0x4c>)
 800825c:	2200      	movs	r2, #0
 800825e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8008260:	4b0c      	ldr	r3, [pc, #48]	; (8008294 <MX_USART1_UART_Init+0x4c>)
 8008262:	2200      	movs	r2, #0
 8008264:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8008266:	4b0b      	ldr	r3, [pc, #44]	; (8008294 <MX_USART1_UART_Init+0x4c>)
 8008268:	2200      	movs	r2, #0
 800826a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800826c:	4b09      	ldr	r3, [pc, #36]	; (8008294 <MX_USART1_UART_Init+0x4c>)
 800826e:	220c      	movs	r2, #12
 8008270:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8008272:	4b08      	ldr	r3, [pc, #32]	; (8008294 <MX_USART1_UART_Init+0x4c>)
 8008274:	2200      	movs	r2, #0
 8008276:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8008278:	4b06      	ldr	r3, [pc, #24]	; (8008294 <MX_USART1_UART_Init+0x4c>)
 800827a:	2200      	movs	r2, #0
 800827c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800827e:	4805      	ldr	r0, [pc, #20]	; (8008294 <MX_USART1_UART_Init+0x4c>)
 8008280:	f7fc f932 	bl	80044e8 <HAL_UART_Init>
 8008284:	4603      	mov	r3, r0
 8008286:	2b00      	cmp	r3, #0
 8008288:	d001      	beq.n	800828e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800828a:	f000 f95f 	bl	800854c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800828e:	bf00      	nop
 8008290:	bd80      	pop	{r7, pc}
 8008292:	bf00      	nop
 8008294:	20000a28 	.word	0x20000a28
 8008298:	40011000 	.word	0x40011000

0800829c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800829c:	b580      	push	{r7, lr}
 800829e:	b08a      	sub	sp, #40	; 0x28
 80082a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80082a2:	f107 0314 	add.w	r3, r7, #20
 80082a6:	2200      	movs	r2, #0
 80082a8:	601a      	str	r2, [r3, #0]
 80082aa:	605a      	str	r2, [r3, #4]
 80082ac:	609a      	str	r2, [r3, #8]
 80082ae:	60da      	str	r2, [r3, #12]
 80082b0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80082b2:	2300      	movs	r3, #0
 80082b4:	613b      	str	r3, [r7, #16]
 80082b6:	4b53      	ldr	r3, [pc, #332]	; (8008404 <MX_GPIO_Init+0x168>)
 80082b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082ba:	4a52      	ldr	r2, [pc, #328]	; (8008404 <MX_GPIO_Init+0x168>)
 80082bc:	f043 0304 	orr.w	r3, r3, #4
 80082c0:	6313      	str	r3, [r2, #48]	; 0x30
 80082c2:	4b50      	ldr	r3, [pc, #320]	; (8008404 <MX_GPIO_Init+0x168>)
 80082c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082c6:	f003 0304 	and.w	r3, r3, #4
 80082ca:	613b      	str	r3, [r7, #16]
 80082cc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80082ce:	2300      	movs	r3, #0
 80082d0:	60fb      	str	r3, [r7, #12]
 80082d2:	4b4c      	ldr	r3, [pc, #304]	; (8008404 <MX_GPIO_Init+0x168>)
 80082d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082d6:	4a4b      	ldr	r2, [pc, #300]	; (8008404 <MX_GPIO_Init+0x168>)
 80082d8:	f043 0301 	orr.w	r3, r3, #1
 80082dc:	6313      	str	r3, [r2, #48]	; 0x30
 80082de:	4b49      	ldr	r3, [pc, #292]	; (8008404 <MX_GPIO_Init+0x168>)
 80082e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082e2:	f003 0301 	and.w	r3, r3, #1
 80082e6:	60fb      	str	r3, [r7, #12]
 80082e8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80082ea:	2300      	movs	r3, #0
 80082ec:	60bb      	str	r3, [r7, #8]
 80082ee:	4b45      	ldr	r3, [pc, #276]	; (8008404 <MX_GPIO_Init+0x168>)
 80082f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082f2:	4a44      	ldr	r2, [pc, #272]	; (8008404 <MX_GPIO_Init+0x168>)
 80082f4:	f043 0302 	orr.w	r3, r3, #2
 80082f8:	6313      	str	r3, [r2, #48]	; 0x30
 80082fa:	4b42      	ldr	r3, [pc, #264]	; (8008404 <MX_GPIO_Init+0x168>)
 80082fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082fe:	f003 0302 	and.w	r3, r3, #2
 8008302:	60bb      	str	r3, [r7, #8]
 8008304:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8008306:	2300      	movs	r3, #0
 8008308:	607b      	str	r3, [r7, #4]
 800830a:	4b3e      	ldr	r3, [pc, #248]	; (8008404 <MX_GPIO_Init+0x168>)
 800830c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800830e:	4a3d      	ldr	r2, [pc, #244]	; (8008404 <MX_GPIO_Init+0x168>)
 8008310:	f043 0308 	orr.w	r3, r3, #8
 8008314:	6313      	str	r3, [r2, #48]	; 0x30
 8008316:	4b3b      	ldr	r3, [pc, #236]	; (8008404 <MX_GPIO_Init+0x168>)
 8008318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800831a:	f003 0308 	and.w	r3, r3, #8
 800831e:	607b      	str	r3, [r7, #4]
 8008320:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_2 
 8008322:	2200      	movs	r2, #0
 8008324:	f24e 213c 	movw	r1, #57916	; 0xe23c
 8008328:	4837      	ldr	r0, [pc, #220]	; (8008408 <MX_GPIO_Init+0x16c>)
 800832a:	f7f9 ffc3 	bl	80022b4 <HAL_GPIO_WritePin>
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8, GPIO_PIN_RESET);
 800832e:	2200      	movs	r2, #0
 8008330:	f44f 71e8 	mov.w	r1, #464	; 0x1d0
 8008334:	4835      	ldr	r0, [pc, #212]	; (800840c <MX_GPIO_Init+0x170>)
 8008336:	f7f9 ffbd 	bl	80022b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_13 
 800833a:	2200      	movs	r2, #0
 800833c:	f242 7103 	movw	r1, #9987	; 0x2703
 8008340:	4833      	ldr	r0, [pc, #204]	; (8008410 <MX_GPIO_Init+0x174>)
 8008342:	f7f9 ffb7 	bl	80022b4 <HAL_GPIO_WritePin>
                          |GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 8008346:	2200      	movs	r2, #0
 8008348:	2104      	movs	r1, #4
 800834a:	4832      	ldr	r0, [pc, #200]	; (8008414 <MX_GPIO_Init+0x178>)
 800834c:	f7f9 ffb2 	bl	80022b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 PC2 
                           PC3 PC4 PC5 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_2 
 8008350:	f24e 233c 	movw	r3, #57916	; 0xe23c
 8008354:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008356:	2301      	movs	r3, #1
 8008358:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800835a:	2300      	movs	r3, #0
 800835c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800835e:	2300      	movs	r3, #0
 8008360:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008362:	f107 0314 	add.w	r3, r7, #20
 8008366:	4619      	mov	r1, r3
 8008368:	4827      	ldr	r0, [pc, #156]	; (8008408 <MX_GPIO_Init+0x16c>)
 800836a:	f7f9 fdf1 	bl	8001f50 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA6 PA7 PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 800836e:	f44f 73e8 	mov.w	r3, #464	; 0x1d0
 8008372:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008374:	2301      	movs	r3, #1
 8008376:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008378:	2300      	movs	r3, #0
 800837a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800837c:	2300      	movs	r3, #0
 800837e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008380:	f107 0314 	add.w	r3, r7, #20
 8008384:	4619      	mov	r1, r3
 8008386:	4821      	ldr	r0, [pc, #132]	; (800840c <MX_GPIO_Init+0x170>)
 8008388:	f7f9 fde2 	bl	8001f50 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB10 PB13 
                           PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_13 
 800838c:	f242 7303 	movw	r3, #9987	; 0x2703
 8008390:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008392:	2301      	movs	r3, #1
 8008394:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008396:	2300      	movs	r3, #0
 8008398:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800839a:	2300      	movs	r3, #0
 800839c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800839e:	f107 0314 	add.w	r3, r7, #20
 80083a2:	4619      	mov	r1, r3
 80083a4:	481a      	ldr	r0, [pc, #104]	; (8008410 <MX_GPIO_Init+0x174>)
 80083a6:	f7f9 fdd3 	bl	8001f50 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 80083aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80083ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80083b0:	2300      	movs	r3, #0
 80083b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80083b4:	2301      	movs	r3, #1
 80083b6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80083b8:	f107 0314 	add.w	r3, r7, #20
 80083bc:	4619      	mov	r1, r3
 80083be:	4814      	ldr	r0, [pc, #80]	; (8008410 <MX_GPIO_Init+0x174>)
 80083c0:	f7f9 fdc6 	bl	8001f50 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 80083c4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80083c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80083ca:	2300      	movs	r3, #0
 80083cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80083ce:	2300      	movs	r3, #0
 80083d0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80083d2:	f107 0314 	add.w	r3, r7, #20
 80083d6:	4619      	mov	r1, r3
 80083d8:	480c      	ldr	r0, [pc, #48]	; (800840c <MX_GPIO_Init+0x170>)
 80083da:	f7f9 fdb9 	bl	8001f50 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80083de:	2304      	movs	r3, #4
 80083e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80083e2:	2301      	movs	r3, #1
 80083e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80083e6:	2300      	movs	r3, #0
 80083e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80083ea:	2300      	movs	r3, #0
 80083ec:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80083ee:	f107 0314 	add.w	r3, r7, #20
 80083f2:	4619      	mov	r1, r3
 80083f4:	4807      	ldr	r0, [pc, #28]	; (8008414 <MX_GPIO_Init+0x178>)
 80083f6:	f7f9 fdab 	bl	8001f50 <HAL_GPIO_Init>

}
 80083fa:	bf00      	nop
 80083fc:	3728      	adds	r7, #40	; 0x28
 80083fe:	46bd      	mov	sp, r7
 8008400:	bd80      	pop	{r7, pc}
 8008402:	bf00      	nop
 8008404:	40023800 	.word	0x40023800
 8008408:	40020800 	.word	0x40020800
 800840c:	40020000 	.word	0x40020000
 8008410:	40020400 	.word	0x40020400
 8008414:	40020c00 	.word	0x40020c00

08008418 <buzzer>:

/* USER CODE BEGIN 4 */
void buzzer(int sound, int length){
 8008418:	b580      	push	{r7, lr}
 800841a:	b08a      	sub	sp, #40	; 0x28
 800841c:	af00      	add	r7, sp, #0
 800841e:	6078      	str	r0, [r7, #4]
 8008420:	6039      	str	r1, [r7, #0]
	TIM_OC_InitTypeDef ConfigOC;
	ConfigOC.OCMode = TIM_OCMODE_PWM1;
 8008422:	2360      	movs	r3, #96	; 0x60
 8008424:	60fb      	str	r3, [r7, #12]
	ConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8008426:	2300      	movs	r3, #0
 8008428:	617b      	str	r3, [r7, #20]
	ConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800842a:	2300      	movs	r3, #0
 800842c:	61fb      	str	r3, [r7, #28]

	hz = 1000000 / sound;
 800842e:	4a11      	ldr	r2, [pc, #68]	; (8008474 <buzzer+0x5c>)
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	fb92 f3f3 	sdiv	r3, r2, r3
 8008436:	4a10      	ldr	r2, [pc, #64]	; (8008478 <buzzer+0x60>)
 8008438:	6013      	str	r3, [r2, #0]
	TIM3 -> ARR = hz;
 800843a:	4b0f      	ldr	r3, [pc, #60]	; (8008478 <buzzer+0x60>)
 800843c:	681a      	ldr	r2, [r3, #0]
 800843e:	4b0f      	ldr	r3, [pc, #60]	; (800847c <buzzer+0x64>)
 8008440:	62da      	str	r2, [r3, #44]	; 0x2c
    ConfigOC.Pulse = hz / 2;
 8008442:	4b0d      	ldr	r3, [pc, #52]	; (8008478 <buzzer+0x60>)
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	0fda      	lsrs	r2, r3, #31
 8008448:	4413      	add	r3, r2
 800844a:	105b      	asrs	r3, r3, #1
 800844c:	613b      	str	r3, [r7, #16]
    HAL_TIM_PWM_ConfigChannel(&htim3, &ConfigOC, TIM_CHANNEL_2);
 800844e:	f107 030c 	add.w	r3, r7, #12
 8008452:	2204      	movs	r2, #4
 8008454:	4619      	mov	r1, r3
 8008456:	480a      	ldr	r0, [pc, #40]	; (8008480 <buzzer+0x68>)
 8008458:	f7fb fb38 	bl	8003acc <HAL_TIM_PWM_ConfigChannel>
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 800845c:	2104      	movs	r1, #4
 800845e:	4808      	ldr	r0, [pc, #32]	; (8008480 <buzzer+0x68>)
 8008460:	f7fb f924 	bl	80036ac <HAL_TIM_PWM_Start>

	HAL_Delay(length);
 8008464:	683b      	ldr	r3, [r7, #0]
 8008466:	4618      	mov	r0, r3
 8008468:	f7f8 fdb0 	bl	8000fcc <HAL_Delay>
}
 800846c:	bf00      	nop
 800846e:	3728      	adds	r7, #40	; 0x28
 8008470:	46bd      	mov	sp, r7
 8008472:	bd80      	pop	{r7, pc}
 8008474:	000f4240 	.word	0x000f4240
 8008478:	20000298 	.word	0x20000298
 800847c:	40000400 	.word	0x40000400
 8008480:	20000970 	.word	0x20000970

08008484 <get_adc_value>:

int get_adc_value(ADC_HandleTypeDef *hadc, uint32_t channel){
 8008484:	b580      	push	{r7, lr}
 8008486:	b086      	sub	sp, #24
 8008488:	af00      	add	r7, sp, #0
 800848a:	6078      	str	r0, [r7, #4]
 800848c:	6039      	str	r1, [r7, #0]

  ADC_ChannelConfTypeDef sConfig = {0};
 800848e:	f107 0308 	add.w	r3, r7, #8
 8008492:	2200      	movs	r2, #0
 8008494:	601a      	str	r2, [r3, #0]
 8008496:	605a      	str	r2, [r3, #4]
 8008498:	609a      	str	r2, [r3, #8]
 800849a:	60da      	str	r2, [r3, #12]

  sConfig.Channel = channel;
 800849c:	683b      	ldr	r3, [r7, #0]
 800849e:	60bb      	str	r3, [r7, #8]
  sConfig.Rank = 1;
 80084a0:	2301      	movs	r3, #1
 80084a2:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80084a4:	2300      	movs	r3, #0
 80084a6:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80084a8:	2300      	movs	r3, #0
 80084aa:	617b      	str	r3, [r7, #20]

  HAL_ADC_ConfigChannel(hadc, &sConfig);
 80084ac:	f107 0308 	add.w	r3, r7, #8
 80084b0:	4619      	mov	r1, r3
 80084b2:	6878      	ldr	r0, [r7, #4]
 80084b4:	f7f8 ff48 	bl	8001348 <HAL_ADC_ConfigChannel>

  HAL_ADC_Start(hadc);                    //
 80084b8:	6878      	ldr	r0, [r7, #4]
 80084ba:	f7f8 fded 	bl	8001098 <HAL_ADC_Start>
  HAL_ADC_PollForConversion(hadc, 100);   //wait for ADC
 80084be:	2164      	movs	r1, #100	; 0x64
 80084c0:	6878      	ldr	r0, [r7, #4]
 80084c2:	f7f8 feaf 	bl	8001224 <HAL_ADC_PollForConversion>
  return HAL_ADC_GetValue(hadc);          //
 80084c6:	6878      	ldr	r0, [r7, #4]
 80084c8:	f7f8 ff30 	bl	800132c <HAL_ADC_GetValue>
 80084cc:	4603      	mov	r3, r0
}
 80084ce:	4618      	mov	r0, r3
 80084d0:	3718      	adds	r7, #24
 80084d2:	46bd      	mov	sp, r7
 80084d4:	bd80      	pop	{r7, pc}
	...

080084d8 <led_write>:

void led_write(uint8_t led1, uint8_t led2, uint8_t led3){
 80084d8:	b580      	push	{r7, lr}
 80084da:	b082      	sub	sp, #8
 80084dc:	af00      	add	r7, sp, #0
 80084de:	4603      	mov	r3, r0
 80084e0:	71fb      	strb	r3, [r7, #7]
 80084e2:	460b      	mov	r3, r1
 80084e4:	71bb      	strb	r3, [r7, #6]
 80084e6:	4613      	mov	r3, r2
 80084e8:	717b      	strb	r3, [r7, #5]
	if(led1) HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 80084ea:	79fb      	ldrb	r3, [r7, #7]
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d005      	beq.n	80084fc <led_write+0x24>
 80084f0:	2201      	movs	r2, #1
 80084f2:	2110      	movs	r1, #16
 80084f4:	4814      	ldr	r0, [pc, #80]	; (8008548 <led_write+0x70>)
 80084f6:	f7f9 fedd 	bl	80022b4 <HAL_GPIO_WritePin>
 80084fa:	e004      	b.n	8008506 <led_write+0x2e>
	else HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80084fc:	2200      	movs	r2, #0
 80084fe:	2110      	movs	r1, #16
 8008500:	4811      	ldr	r0, [pc, #68]	; (8008548 <led_write+0x70>)
 8008502:	f7f9 fed7 	bl	80022b4 <HAL_GPIO_WritePin>
	if(led2) HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 8008506:	79bb      	ldrb	r3, [r7, #6]
 8008508:	2b00      	cmp	r3, #0
 800850a:	d005      	beq.n	8008518 <led_write+0x40>
 800850c:	2201      	movs	r2, #1
 800850e:	2140      	movs	r1, #64	; 0x40
 8008510:	480d      	ldr	r0, [pc, #52]	; (8008548 <led_write+0x70>)
 8008512:	f7f9 fecf 	bl	80022b4 <HAL_GPIO_WritePin>
 8008516:	e004      	b.n	8008522 <led_write+0x4a>
	else HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 8008518:	2200      	movs	r2, #0
 800851a:	2140      	movs	r1, #64	; 0x40
 800851c:	480a      	ldr	r0, [pc, #40]	; (8008548 <led_write+0x70>)
 800851e:	f7f9 fec9 	bl	80022b4 <HAL_GPIO_WritePin>
	if(led3) HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);
 8008522:	797b      	ldrb	r3, [r7, #5]
 8008524:	2b00      	cmp	r3, #0
 8008526:	d005      	beq.n	8008534 <led_write+0x5c>
 8008528:	2201      	movs	r2, #1
 800852a:	2180      	movs	r1, #128	; 0x80
 800852c:	4806      	ldr	r0, [pc, #24]	; (8008548 <led_write+0x70>)
 800852e:	f7f9 fec1 	bl	80022b4 <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
}
 8008532:	e004      	b.n	800853e <led_write+0x66>
	else HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 8008534:	2200      	movs	r2, #0
 8008536:	2180      	movs	r1, #128	; 0x80
 8008538:	4803      	ldr	r0, [pc, #12]	; (8008548 <led_write+0x70>)
 800853a:	f7f9 febb 	bl	80022b4 <HAL_GPIO_WritePin>
}
 800853e:	bf00      	nop
 8008540:	3708      	adds	r7, #8
 8008542:	46bd      	mov	sp, r7
 8008544:	bd80      	pop	{r7, pc}
 8008546:	bf00      	nop
 8008548:	40020000 	.word	0x40020000

0800854c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800854c:	b480      	push	{r7}
 800854e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8008550:	bf00      	nop
 8008552:	46bd      	mov	sp, r7
 8008554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008558:	4770      	bx	lr
	...

0800855c <search_init>:

#include "global.h"

void search_init(void){
 800855c:	b580      	push	{r7, lr}
 800855e:	af00      	add	r7, sp, #0

	//----a探索系----
	goal_x = GOAL_X;        		//GOAL_Xはglobal.hにマクロ定義あり
 8008560:	4b09      	ldr	r3, [pc, #36]	; (8008588 <search_init+0x2c>)
 8008562:	2201      	movs	r2, #1
 8008564:	701a      	strb	r2, [r3, #0]
	goal_y = GOAL_Y;        		//GOAL_Yはglobal.hにマクロ定義あり
 8008566:	4b09      	ldr	r3, [pc, #36]	; (800858c <search_init+0x30>)
 8008568:	2200      	movs	r2, #0
 800856a:	701a      	strb	r2, [r3, #0]
	map_Init();						//aマップの初期化
 800856c:	f000 fa9e 	bl	8008aac <map_Init>
	mouse.x = 0;
 8008570:	4b07      	ldr	r3, [pc, #28]	; (8008590 <search_init+0x34>)
 8008572:	2200      	movs	r2, #0
 8008574:	701a      	strb	r2, [r3, #0]
	mouse.y = 0;					//a現在地の初期化
 8008576:	4b06      	ldr	r3, [pc, #24]	; (8008590 <search_init+0x34>)
 8008578:	2200      	movs	r2, #0
 800857a:	705a      	strb	r2, [r3, #1]
	mouse.dir = 0;					//aマウスの向きの初期化
 800857c:	4b04      	ldr	r3, [pc, #16]	; (8008590 <search_init+0x34>)
 800857e:	2200      	movs	r2, #0
 8008580:	709a      	strb	r2, [r3, #2]
}
 8008582:	bf00      	nop
 8008584:	bd80      	pop	{r7, pc}
 8008586:	bf00      	nop
 8008588:	20000a70 	.word	0x20000a70
 800858c:	20000a14 	.word	0x20000a14
 8008590:	20000ac8 	.word	0x20000ac8

08008594 <searchA>:
//searchA
//a1区画走行でgoal座標に進む
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void searchA(){
 8008594:	b580      	push	{r7, lr}
 8008596:	af00      	add	r7, sp, #0

	if(MF.FLAG.SCND){
 8008598:	4b32      	ldr	r3, [pc, #200]	; (8008664 <searchA+0xd0>)
 800859a:	881b      	ldrh	r3, [r3, #0]
 800859c:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80085a0:	b2db      	uxtb	r3, r3
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d001      	beq.n	80085aa <searchA+0x16>
		load_map_from_eeprom();
 80085a6:	f000 febf 	bl	8009328 <load_map_from_eeprom>
	}

	//====aスタート位置壁情報取得====
	get_wall_info();										//a壁情報の初期化, 後壁はなくなる
 80085aa:	f000 ff35 	bl	8009418 <get_wall_info>
	wall_info &= ~0x88;										//a前壁は存在するはずがないので削除する
 80085ae:	4b2e      	ldr	r3, [pc, #184]	; (8008668 <searchA+0xd4>)
 80085b0:	781b      	ldrb	r3, [r3, #0]
 80085b2:	f003 0377 	and.w	r3, r3, #119	; 0x77
 80085b6:	b2da      	uxtb	r2, r3
 80085b8:	4b2b      	ldr	r3, [pc, #172]	; (8008668 <searchA+0xd4>)
 80085ba:	701a      	strb	r2, [r3, #0]
	write_map();											//a壁情報を地図に記入
 80085bc:	f000 fae2 	bl	8008b84 <write_map>

	//====a歩数マップ・経路作成====
	r_cnt = 0;												//a経路カウンタの初期化
 80085c0:	4b2a      	ldr	r3, [pc, #168]	; (800866c <searchA+0xd8>)
 80085c2:	2200      	movs	r2, #0
 80085c4:	701a      	strb	r2, [r3, #0]
	make_smap();											//a歩数マップ作成
 80085c6:	f000 fc1d 	bl	8008e04 <make_smap>
	make_route();											//a最短経路探索（route配列に動作が格納される）
 80085ca:	f000 fd45 	bl	8009058 <make_route>

	//====a探索走行====
	do{
		//----a進行----
		switch(route[r_cnt++]){								//route配列によって進行を決定。経路カウンタを進める
 80085ce:	4b27      	ldr	r3, [pc, #156]	; (800866c <searchA+0xd8>)
 80085d0:	781b      	ldrb	r3, [r3, #0]
 80085d2:	1c5a      	adds	r2, r3, #1
 80085d4:	b2d1      	uxtb	r1, r2
 80085d6:	4a25      	ldr	r2, [pc, #148]	; (800866c <searchA+0xd8>)
 80085d8:	7011      	strb	r1, [r2, #0]
 80085da:	461a      	mov	r2, r3
 80085dc:	4b24      	ldr	r3, [pc, #144]	; (8008670 <searchA+0xdc>)
 80085de:	5c9b      	ldrb	r3, [r3, r2]
 80085e0:	2b22      	cmp	r3, #34	; 0x22
 80085e2:	d00b      	beq.n	80085fc <searchA+0x68>
 80085e4:	2b22      	cmp	r3, #34	; 0x22
 80085e6:	dc02      	bgt.n	80085ee <searchA+0x5a>
 80085e8:	2b11      	cmp	r3, #17
 80085ea:	d00a      	beq.n	8008602 <searchA+0x6e>
 80085ec:	e00c      	b.n	8008608 <searchA+0x74>
 80085ee:	2b44      	cmp	r3, #68	; 0x44
 80085f0:	d001      	beq.n	80085f6 <searchA+0x62>
 80085f2:	2b88      	cmp	r3, #136	; 0x88
			//----a前進----
			case 0x88:
				break;
 80085f4:	e008      	b.n	8008608 <searchA+0x74>
			//----a右折----
			case 0x44:
				rotate_R90();								//a右回転
 80085f6:	f7fc fdfb 	bl	80051f0 <rotate_R90>
				break;
 80085fa:	e005      	b.n	8008608 <searchA+0x74>
			//----180回転----
			case 0x22:
				rotate_180();								//180度回転
 80085fc:	f7fc ff60 	bl	80054c0 <rotate_180>
/*				if(wall_info & 0x88){
					set_position(0);
				}
*/				break;
 8008600:	e002      	b.n	8008608 <searchA+0x74>
			//----a左折----
			case 0x11:
				rotate_L90();								//a左回転
 8008602:	f7fc fea9 	bl	8005358 <rotate_L90>
				break;
 8008606:	bf00      	nop
		}

		drive_wait();
 8008608:	2032      	movs	r0, #50	; 0x32
 800860a:	f7f8 fcdf 	bl	8000fcc <HAL_Delay>
		one_section();										//a前進する
 800860e:	f7fc fd79 	bl	8005104 <one_section>
		drive_wait();
 8008612:	2032      	movs	r0, #50	; 0x32
 8008614:	f7f8 fcda 	bl	8000fcc <HAL_Delay>

		adv_pos();											//aマイクロマウス内部位置情報でも前進処理
 8008618:	f000 f9f0 	bl	80089fc <adv_pos>
		conf_route();										//a最短経路で進行可能か判定
 800861c:	f000 fa28 	bl	8008a70 <conf_route>

	}while((mouse.x != goal_x) || (mouse.y != goal_y));		//a現在座標とgoal座標が等しくなるまで実行
 8008620:	4b14      	ldr	r3, [pc, #80]	; (8008674 <searchA+0xe0>)
 8008622:	781b      	ldrb	r3, [r3, #0]
 8008624:	b2da      	uxtb	r2, r3
 8008626:	4b14      	ldr	r3, [pc, #80]	; (8008678 <searchA+0xe4>)
 8008628:	781b      	ldrb	r3, [r3, #0]
 800862a:	429a      	cmp	r2, r3
 800862c:	d1cf      	bne.n	80085ce <searchA+0x3a>
 800862e:	4b11      	ldr	r3, [pc, #68]	; (8008674 <searchA+0xe0>)
 8008630:	785b      	ldrb	r3, [r3, #1]
 8008632:	b2da      	uxtb	r2, r3
 8008634:	4b11      	ldr	r3, [pc, #68]	; (800867c <searchA+0xe8>)
 8008636:	781b      	ldrb	r3, [r3, #0]
 8008638:	429a      	cmp	r2, r3
 800863a:	d1c8      	bne.n	80085ce <searchA+0x3a>

	printf("goal\n");
 800863c:	4810      	ldr	r0, [pc, #64]	; (8008680 <searchA+0xec>)
 800863e:	f001 fb47 	bl	8009cd0 <puts>
	HAL_Delay(2000);										//aスタートでは***2秒以上***停止しなくてはならない
 8008642:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8008646:	f7f8 fcc1 	bl	8000fcc <HAL_Delay>
	rotate_180();											//180度回転
 800864a:	f7fc ff39 	bl	80054c0 <rotate_180>

	if(!MF.FLAG.SCND){
 800864e:	4b05      	ldr	r3, [pc, #20]	; (8008664 <searchA+0xd0>)
 8008650:	881b      	ldrh	r3, [r3, #0]
 8008652:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8008656:	b2db      	uxtb	r3, r3
 8008658:	2b00      	cmp	r3, #0
 800865a:	d101      	bne.n	8008660 <searchA+0xcc>
		store_map_in_eeprom();
 800865c:	f000 fe2a 	bl	80092b4 <store_map_in_eeprom>
	}
}
 8008660:	bf00      	nop
 8008662:	bd80      	pop	{r7, pc}
 8008664:	20000e18 	.word	0x20000e18
 8008668:	2000029c 	.word	0x2000029c
 800866c:	20000e30 	.word	0x20000e30
 8008670:	20000b0c 	.word	0x20000b0c
 8008674:	20000ac8 	.word	0x20000ac8
 8008678:	20000a70 	.word	0x20000a70
 800867c:	20000a14 	.word	0x20000a14
 8008680:	0800b0b0 	.word	0x0800b0b0

08008684 <searchB>:
//searchB
//a連続走行でgoal座標に進む
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void searchB(){
 8008684:	b580      	push	{r7, lr}
 8008686:	af00      	add	r7, sp, #0

	if(MF.FLAG.SCND){
 8008688:	4b38      	ldr	r3, [pc, #224]	; (800876c <searchB+0xe8>)
 800868a:	881b      	ldrh	r3, [r3, #0]
 800868c:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8008690:	b2db      	uxtb	r3, r3
 8008692:	2b00      	cmp	r3, #0
 8008694:	d001      	beq.n	800869a <searchB+0x16>
		load_map_from_eeprom();
 8008696:	f000 fe47 	bl	8009328 <load_map_from_eeprom>
	}

	//====aスタート位置壁情報取得====
	get_wall_info();										//a壁情報の初期化, 後壁はなくなる
 800869a:	f000 febd 	bl	8009418 <get_wall_info>
	wall_info &= ~0x88;										//a前壁は存在するはずがないので削除する
 800869e:	4b34      	ldr	r3, [pc, #208]	; (8008770 <searchB+0xec>)
 80086a0:	781b      	ldrb	r3, [r3, #0]
 80086a2:	f003 0377 	and.w	r3, r3, #119	; 0x77
 80086a6:	b2da      	uxtb	r2, r3
 80086a8:	4b31      	ldr	r3, [pc, #196]	; (8008770 <searchB+0xec>)
 80086aa:	701a      	strb	r2, [r3, #0]
	write_map();											//a壁情報を地図に記入
 80086ac:	f000 fa6a 	bl	8008b84 <write_map>

	//====a前に壁が無い想定で問答無用で前進====
	half_sectionA();
 80086b0:	f7fc fce8 	bl	8005084 <half_sectionA>
	adv_pos();
 80086b4:	f000 f9a2 	bl	80089fc <adv_pos>

	//====a歩数マップ・経路作成====
	write_map();											//a壁情報を地図に記入
 80086b8:	f000 fa64 	bl	8008b84 <write_map>
	r_cnt = 0;												//a経路カウンタの初期化
 80086bc:	4b2d      	ldr	r3, [pc, #180]	; (8008774 <searchB+0xf0>)
 80086be:	2200      	movs	r2, #0
 80086c0:	701a      	strb	r2, [r3, #0]
	make_smap();											//a歩数マップ作成
 80086c2:	f000 fb9f 	bl	8008e04 <make_smap>
	make_route();											//a最短経路探索（route配列に動作が格納される）
 80086c6:	f000 fcc7 	bl	8009058 <make_route>

	//====a探索走行====
	do{
		//----a進行----
		switch(route[r_cnt++]){								//route配列によって進行を決定。経路カウンタを進める
 80086ca:	4b2a      	ldr	r3, [pc, #168]	; (8008774 <searchB+0xf0>)
 80086cc:	781b      	ldrb	r3, [r3, #0]
 80086ce:	1c5a      	adds	r2, r3, #1
 80086d0:	b2d1      	uxtb	r1, r2
 80086d2:	4a28      	ldr	r2, [pc, #160]	; (8008774 <searchB+0xf0>)
 80086d4:	7011      	strb	r1, [r2, #0]
 80086d6:	461a      	mov	r2, r3
 80086d8:	4b27      	ldr	r3, [pc, #156]	; (8008778 <searchB+0xf4>)
 80086da:	5c9b      	ldrb	r3, [r3, r2]
 80086dc:	2b22      	cmp	r3, #34	; 0x22
 80086de:	d012      	beq.n	8008706 <searchB+0x82>
 80086e0:	2b22      	cmp	r3, #34	; 0x22
 80086e2:	dc02      	bgt.n	80086ea <searchB+0x66>
 80086e4:	2b11      	cmp	r3, #17
 80086e6:	d015      	beq.n	8008714 <searchB+0x90>
 80086e8:	e01b      	b.n	8008722 <searchB+0x9e>
 80086ea:	2b44      	cmp	r3, #68	; 0x44
 80086ec:	d004      	beq.n	80086f8 <searchB+0x74>
 80086ee:	2b88      	cmp	r3, #136	; 0x88
 80086f0:	d117      	bne.n	8008722 <searchB+0x9e>
			//----a前進----
			case 0x88:
				one_sectionU();
 80086f2:	f7fc fd65 	bl	80051c0 <one_sectionU>
				break;
 80086f6:	e014      	b.n	8008722 <searchB+0x9e>
			//----a右折----
			case 0x44:
				half_sectionD();
 80086f8:	f7fc fce4 	bl	80050c4 <half_sectionD>
				rotate_R90();
 80086fc:	f7fc fd78 	bl	80051f0 <rotate_R90>
				half_sectionA();
 8008700:	f7fc fcc0 	bl	8005084 <half_sectionA>
				break;
 8008704:	e00d      	b.n	8008722 <searchB+0x9e>
			//----180回転----
			case 0x22:
				half_sectionD();
 8008706:	f7fc fcdd 	bl	80050c4 <half_sectionD>
				rotate_180();
 800870a:	f7fc fed9 	bl	80054c0 <rotate_180>
/*				if(wall_info & 0x88){
					set_position(0);
				}
*/				half_sectionA();
 800870e:	f7fc fcb9 	bl	8005084 <half_sectionA>
				break;
 8008712:	e006      	b.n	8008722 <searchB+0x9e>
			//----a左折----
			case 0x11:
				half_sectionD();
 8008714:	f7fc fcd6 	bl	80050c4 <half_sectionD>
				rotate_L90();
 8008718:	f7fc fe1e 	bl	8005358 <rotate_L90>
				half_sectionA();
 800871c:	f7fc fcb2 	bl	8005084 <half_sectionA>
				break;
 8008720:	bf00      	nop
		}
		adv_pos();
 8008722:	f000 f96b 	bl	80089fc <adv_pos>
		conf_route();
 8008726:	f000 f9a3 	bl	8008a70 <conf_route>

	}while((mouse.x != goal_x) || (mouse.y != goal_y));
 800872a:	4b14      	ldr	r3, [pc, #80]	; (800877c <searchB+0xf8>)
 800872c:	781b      	ldrb	r3, [r3, #0]
 800872e:	b2da      	uxtb	r2, r3
 8008730:	4b13      	ldr	r3, [pc, #76]	; (8008780 <searchB+0xfc>)
 8008732:	781b      	ldrb	r3, [r3, #0]
 8008734:	429a      	cmp	r2, r3
 8008736:	d1c8      	bne.n	80086ca <searchB+0x46>
 8008738:	4b10      	ldr	r3, [pc, #64]	; (800877c <searchB+0xf8>)
 800873a:	785b      	ldrb	r3, [r3, #1]
 800873c:	b2da      	uxtb	r2, r3
 800873e:	4b11      	ldr	r3, [pc, #68]	; (8008784 <searchB+0x100>)
 8008740:	781b      	ldrb	r3, [r3, #0]
 8008742:	429a      	cmp	r2, r3
 8008744:	d1c1      	bne.n	80086ca <searchB+0x46>

	half_sectionD();
 8008746:	f7fc fcbd 	bl	80050c4 <half_sectionD>

	HAL_Delay(2000);
 800874a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800874e:	f7f8 fc3d 	bl	8000fcc <HAL_Delay>
	rotate_180();											//180度回転
 8008752:	f7fc feb5 	bl	80054c0 <rotate_180>

	if(!MF.FLAG.SCND){
 8008756:	4b05      	ldr	r3, [pc, #20]	; (800876c <searchB+0xe8>)
 8008758:	881b      	ldrh	r3, [r3, #0]
 800875a:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800875e:	b2db      	uxtb	r3, r3
 8008760:	2b00      	cmp	r3, #0
 8008762:	d101      	bne.n	8008768 <searchB+0xe4>
		store_map_in_eeprom();
 8008764:	f000 fda6 	bl	80092b4 <store_map_in_eeprom>
	}
}
 8008768:	bf00      	nop
 800876a:	bd80      	pop	{r7, pc}
 800876c:	20000e18 	.word	0x20000e18
 8008770:	2000029c 	.word	0x2000029c
 8008774:	20000e30 	.word	0x20000e30
 8008778:	20000b0c 	.word	0x20000b0c
 800877c:	20000ac8 	.word	0x20000ac8
 8008780:	20000a70 	.word	0x20000a70
 8008784:	20000a14 	.word	0x20000a14

08008788 <searchC>:
//searchC
//aスラローム走行でgoal座標に進む
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void searchC(){
 8008788:	b580      	push	{r7, lr}
 800878a:	af00      	add	r7, sp, #0

	if(MF.FLAG.SCND){
 800878c:	4b34      	ldr	r3, [pc, #208]	; (8008860 <searchC+0xd8>)
 800878e:	881b      	ldrh	r3, [r3, #0]
 8008790:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8008794:	b2db      	uxtb	r3, r3
 8008796:	2b00      	cmp	r3, #0
 8008798:	d001      	beq.n	800879e <searchC+0x16>
		load_map_from_eeprom();
 800879a:	f000 fdc5 	bl	8009328 <load_map_from_eeprom>
	}

	//====aスタート位置壁情報取得====
	get_wall_info();										//a壁情報の初期化, 後壁はなくなる
 800879e:	f000 fe3b 	bl	8009418 <get_wall_info>
	wall_info &= ~0x88;										//a前壁は存在するはずがないので削除する
 80087a2:	4b30      	ldr	r3, [pc, #192]	; (8008864 <searchC+0xdc>)
 80087a4:	781b      	ldrb	r3, [r3, #0]
 80087a6:	f003 0377 	and.w	r3, r3, #119	; 0x77
 80087aa:	b2da      	uxtb	r2, r3
 80087ac:	4b2d      	ldr	r3, [pc, #180]	; (8008864 <searchC+0xdc>)
 80087ae:	701a      	strb	r2, [r3, #0]
	write_map();											//a壁情報を地図に記入
 80087b0:	f000 f9e8 	bl	8008b84 <write_map>

	//====a前に壁が無い想定で問答無用で前進====
	half_sectionA();
 80087b4:	f7fc fc66 	bl	8005084 <half_sectionA>
	adv_pos();
 80087b8:	f000 f920 	bl	80089fc <adv_pos>

	//====a歩数マップ・経路作成====
	write_map();											//a壁情報を地図に記入
 80087bc:	f000 f9e2 	bl	8008b84 <write_map>
	r_cnt = 0;												//a経路カウンタの初期化
 80087c0:	4b29      	ldr	r3, [pc, #164]	; (8008868 <searchC+0xe0>)
 80087c2:	2200      	movs	r2, #0
 80087c4:	701a      	strb	r2, [r3, #0]
	make_smap();											//a歩数マップ作成
 80087c6:	f000 fb1d 	bl	8008e04 <make_smap>
	make_route();											//a最短経路探索（route配列に動作が格納される）
 80087ca:	f000 fc45 	bl	8009058 <make_route>

	//====a探索走行====
	do{
		//----a進行----
		switch(route[r_cnt++]){								//route配列によって進行を決定。経路カウンタを進める
 80087ce:	4b26      	ldr	r3, [pc, #152]	; (8008868 <searchC+0xe0>)
 80087d0:	781b      	ldrb	r3, [r3, #0]
 80087d2:	1c5a      	adds	r2, r3, #1
 80087d4:	b2d1      	uxtb	r1, r2
 80087d6:	4a24      	ldr	r2, [pc, #144]	; (8008868 <searchC+0xe0>)
 80087d8:	7011      	strb	r1, [r2, #0]
 80087da:	461a      	mov	r2, r3
 80087dc:	4b23      	ldr	r3, [pc, #140]	; (800886c <searchC+0xe4>)
 80087de:	5c9b      	ldrb	r3, [r3, r2]
 80087e0:	2b22      	cmp	r3, #34	; 0x22
 80087e2:	d00e      	beq.n	8008802 <searchC+0x7a>
 80087e4:	2b22      	cmp	r3, #34	; 0x22
 80087e6:	dc02      	bgt.n	80087ee <searchC+0x66>
 80087e8:	2b11      	cmp	r3, #17
 80087ea:	d011      	beq.n	8008810 <searchC+0x88>
 80087ec:	e013      	b.n	8008816 <searchC+0x8e>
 80087ee:	2b44      	cmp	r3, #68	; 0x44
 80087f0:	d004      	beq.n	80087fc <searchC+0x74>
 80087f2:	2b88      	cmp	r3, #136	; 0x88
 80087f4:	d10f      	bne.n	8008816 <searchC+0x8e>
			//----a前進----
			case 0x88:
				one_sectionU();
 80087f6:	f7fc fce3 	bl	80051c0 <one_sectionU>
				break;
 80087fa:	e00c      	b.n	8008816 <searchC+0x8e>
			//----a右折スラローム----
			case 0x44:
				slalom_R90();
 80087fc:	f7fc ff14 	bl	8005628 <slalom_R90>

				break;
 8008800:	e009      	b.n	8008816 <searchC+0x8e>
			//----180回転----
			case 0x22:
				half_sectionD();
 8008802:	f7fc fc5f 	bl	80050c4 <half_sectionD>
				rotate_180();
 8008806:	f7fc fe5b 	bl	80054c0 <rotate_180>
/*				if(wall_info & 0x88){
					set_position(0);
				}
*/				half_sectionA();
 800880a:	f7fc fc3b 	bl	8005084 <half_sectionA>
				break;
 800880e:	e002      	b.n	8008816 <searchC+0x8e>
			//----a左折スラローム----
			case 0x11:
				slalom_L90();
 8008810:	f7fc ffe6 	bl	80057e0 <slalom_L90>
				break;
 8008814:	bf00      	nop
		}
		adv_pos();
 8008816:	f000 f8f1 	bl	80089fc <adv_pos>
		conf_route();
 800881a:	f000 f929 	bl	8008a70 <conf_route>

	}while((mouse.x != goal_x) || (mouse.y != goal_y));
 800881e:	4b14      	ldr	r3, [pc, #80]	; (8008870 <searchC+0xe8>)
 8008820:	781b      	ldrb	r3, [r3, #0]
 8008822:	b2da      	uxtb	r2, r3
 8008824:	4b13      	ldr	r3, [pc, #76]	; (8008874 <searchC+0xec>)
 8008826:	781b      	ldrb	r3, [r3, #0]
 8008828:	429a      	cmp	r2, r3
 800882a:	d1d0      	bne.n	80087ce <searchC+0x46>
 800882c:	4b10      	ldr	r3, [pc, #64]	; (8008870 <searchC+0xe8>)
 800882e:	785b      	ldrb	r3, [r3, #1]
 8008830:	b2da      	uxtb	r2, r3
 8008832:	4b11      	ldr	r3, [pc, #68]	; (8008878 <searchC+0xf0>)
 8008834:	781b      	ldrb	r3, [r3, #0]
 8008836:	429a      	cmp	r2, r3
 8008838:	d1c9      	bne.n	80087ce <searchC+0x46>

	half_sectionD();
 800883a:	f7fc fc43 	bl	80050c4 <half_sectionD>

	HAL_Delay(2000);
 800883e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8008842:	f7f8 fbc3 	bl	8000fcc <HAL_Delay>
	rotate_180();											//180度回転
 8008846:	f7fc fe3b 	bl	80054c0 <rotate_180>

	if(!MF.FLAG.SCND){
 800884a:	4b05      	ldr	r3, [pc, #20]	; (8008860 <searchC+0xd8>)
 800884c:	881b      	ldrh	r3, [r3, #0]
 800884e:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8008852:	b2db      	uxtb	r3, r3
 8008854:	2b00      	cmp	r3, #0
 8008856:	d101      	bne.n	800885c <searchC+0xd4>
		store_map_in_eeprom();
 8008858:	f000 fd2c 	bl	80092b4 <store_map_in_eeprom>
	}
}
 800885c:	bf00      	nop
 800885e:	bd80      	pop	{r7, pc}
 8008860:	20000e18 	.word	0x20000e18
 8008864:	2000029c 	.word	0x2000029c
 8008868:	20000e30 	.word	0x20000e30
 800886c:	20000b0c 	.word	0x20000b0c
 8008870:	20000ac8 	.word	0x20000ac8
 8008874:	20000a70 	.word	0x20000a70
 8008878:	20000a14 	.word	0x20000a14

0800887c <searchC2>:
//searchC2
//aスラローム走行+既知区間加速でgoal座標に進む
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void searchC2(void){
 800887c:	b580      	push	{r7, lr}
 800887e:	af00      	add	r7, sp, #0

	if(MF.FLAG.SCND){
 8008880:	4b56      	ldr	r3, [pc, #344]	; (80089dc <searchC2+0x160>)
 8008882:	881b      	ldrh	r3, [r3, #0]
 8008884:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8008888:	b2db      	uxtb	r3, r3
 800888a:	2b00      	cmp	r3, #0
 800888c:	d001      	beq.n	8008892 <searchC2+0x16>
		load_map_from_eeprom();
 800888e:	f000 fd4b 	bl	8009328 <load_map_from_eeprom>
	}

	//====aスタート位置壁情報取得====
	get_wall_info();										//a壁情報の初期化, 後壁はなくなる
 8008892:	f000 fdc1 	bl	8009418 <get_wall_info>
	wall_info &= ~0x88;										//a前壁は存在するはずがないので削除する
 8008896:	4b52      	ldr	r3, [pc, #328]	; (80089e0 <searchC2+0x164>)
 8008898:	781b      	ldrb	r3, [r3, #0]
 800889a:	f003 0377 	and.w	r3, r3, #119	; 0x77
 800889e:	b2da      	uxtb	r2, r3
 80088a0:	4b4f      	ldr	r3, [pc, #316]	; (80089e0 <searchC2+0x164>)
 80088a2:	701a      	strb	r2, [r3, #0]
	write_map();											//a壁情報を地図に記入
 80088a4:	f000 f96e 	bl	8008b84 <write_map>

	//====a前に壁が無い想定で問答無用で前進====
	half_sectionA();
 80088a8:	f7fc fbec 	bl	8005084 <half_sectionA>
	adv_pos();
 80088ac:	f000 f8a6 	bl	80089fc <adv_pos>

	//====a歩数マップ・経路作成====
	write_map();											//a壁情報を地図に記入
 80088b0:	f000 f968 	bl	8008b84 <write_map>
	r_cnt = 0;												//a経路カウンタの初期化
 80088b4:	4b4b      	ldr	r3, [pc, #300]	; (80089e4 <searchC2+0x168>)
 80088b6:	2200      	movs	r2, #0
 80088b8:	701a      	strb	r2, [r3, #0]
	make_smap();											//a歩数マップ作成
 80088ba:	f000 faa3 	bl	8008e04 <make_smap>
	make_route();											//a最短経路探索（route配列に動作が格納される）
 80088be:	f000 fbcb 	bl	8009058 <make_route>

	H_accel_flag = 0;
 80088c2:	4b49      	ldr	r3, [pc, #292]	; (80089e8 <searchC2+0x16c>)
 80088c4:	2200      	movs	r2, #0
 80088c6:	701a      	strb	r2, [r3, #0]

	//====a探索走行====
	do{
		//----a進行----
		switch(route[r_cnt++]){								//route配列によって進行を決定。経路カウンタを進める
 80088c8:	4b46      	ldr	r3, [pc, #280]	; (80089e4 <searchC2+0x168>)
 80088ca:	781b      	ldrb	r3, [r3, #0]
 80088cc:	1c5a      	adds	r2, r3, #1
 80088ce:	b2d1      	uxtb	r1, r2
 80088d0:	4a44      	ldr	r2, [pc, #272]	; (80089e4 <searchC2+0x168>)
 80088d2:	7011      	strb	r1, [r2, #0]
 80088d4:	461a      	mov	r2, r3
 80088d6:	4b45      	ldr	r3, [pc, #276]	; (80089ec <searchC2+0x170>)
 80088d8:	5c9b      	ldrb	r3, [r3, r2]
 80088da:	2b22      	cmp	r3, #34	; 0x22
 80088dc:	d04f      	beq.n	800897e <searchC2+0x102>
 80088de:	2b22      	cmp	r3, #34	; 0x22
 80088e0:	dc02      	bgt.n	80088e8 <searchC2+0x6c>
 80088e2:	2b11      	cmp	r3, #17
 80088e4:	d052      	beq.n	800898c <searchC2+0x110>
 80088e6:	e054      	b.n	8008992 <searchC2+0x116>
 80088e8:	2b44      	cmp	r3, #68	; 0x44
 80088ea:	d045      	beq.n	8008978 <searchC2+0xfc>
 80088ec:	2b88      	cmp	r3, #136	; 0x88
 80088ee:	d150      	bne.n	8008992 <searchC2+0x116>
			//----a前進----
			case 0x88:
				if(MF.FLAG.SCND == 1 && MF.FLAG.ACCL2 == 1){
 80088f0:	4b3a      	ldr	r3, [pc, #232]	; (80089dc <searchC2+0x160>)
 80088f2:	881b      	ldrh	r3, [r3, #0]
 80088f4:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80088f8:	b2db      	uxtb	r3, r3
 80088fa:	2b01      	cmp	r3, #1
 80088fc:	d138      	bne.n	8008970 <searchC2+0xf4>
 80088fe:	4b37      	ldr	r3, [pc, #220]	; (80089dc <searchC2+0x160>)
 8008900:	881b      	ldrh	r3, [r3, #0]
 8008902:	f3c3 2300 	ubfx	r3, r3, #8, #1
 8008906:	b2db      	uxtb	r3, r3
 8008908:	2b01      	cmp	r3, #1
 800890a:	d131      	bne.n	8008970 <searchC2+0xf4>
					if(((route[r_cnt-1] & route[r_cnt]) == 0x88) && (route[r_cnt] != 0xff)){
 800890c:	4b35      	ldr	r3, [pc, #212]	; (80089e4 <searchC2+0x168>)
 800890e:	781b      	ldrb	r3, [r3, #0]
 8008910:	3b01      	subs	r3, #1
 8008912:	4a36      	ldr	r2, [pc, #216]	; (80089ec <searchC2+0x170>)
 8008914:	5cd2      	ldrb	r2, [r2, r3]
 8008916:	4b33      	ldr	r3, [pc, #204]	; (80089e4 <searchC2+0x168>)
 8008918:	781b      	ldrb	r3, [r3, #0]
 800891a:	4619      	mov	r1, r3
 800891c:	4b33      	ldr	r3, [pc, #204]	; (80089ec <searchC2+0x170>)
 800891e:	5c5b      	ldrb	r3, [r3, r1]
 8008920:	4013      	ands	r3, r2
 8008922:	b2db      	uxtb	r3, r3
 8008924:	2b88      	cmp	r3, #136	; 0x88
 8008926:	d10c      	bne.n	8008942 <searchC2+0xc6>
 8008928:	4b2e      	ldr	r3, [pc, #184]	; (80089e4 <searchC2+0x168>)
 800892a:	781b      	ldrb	r3, [r3, #0]
 800892c:	461a      	mov	r2, r3
 800892e:	4b2f      	ldr	r3, [pc, #188]	; (80089ec <searchC2+0x170>)
 8008930:	5c9b      	ldrb	r3, [r3, r2]
 8008932:	2bff      	cmp	r3, #255	; 0xff
 8008934:	d005      	beq.n	8008942 <searchC2+0xc6>
						one_sectionA();
 8008936:	f7fc fbed 	bl	8005114 <one_sectionA>
						H_accel_flag = 1;
 800893a:	4b2b      	ldr	r3, [pc, #172]	; (80089e8 <searchC2+0x16c>)
 800893c:	2201      	movs	r2, #1
 800893e:	701a      	strb	r2, [r3, #0]
 8008940:	e015      	b.n	800896e <searchC2+0xf2>
					}
					else if((route[r_cnt] & 0x55) && (H_accel_flag == 1)){
 8008942:	4b28      	ldr	r3, [pc, #160]	; (80089e4 <searchC2+0x168>)
 8008944:	781b      	ldrb	r3, [r3, #0]
 8008946:	461a      	mov	r2, r3
 8008948:	4b28      	ldr	r3, [pc, #160]	; (80089ec <searchC2+0x170>)
 800894a:	5c9b      	ldrb	r3, [r3, r2]
 800894c:	f003 0355 	and.w	r3, r3, #85	; 0x55
 8008950:	2b00      	cmp	r3, #0
 8008952:	d009      	beq.n	8008968 <searchC2+0xec>
 8008954:	4b24      	ldr	r3, [pc, #144]	; (80089e8 <searchC2+0x16c>)
 8008956:	781b      	ldrb	r3, [r3, #0]
 8008958:	2b01      	cmp	r3, #1
 800895a:	d105      	bne.n	8008968 <searchC2+0xec>
						one_sectionD();
 800895c:	f7fc fc04 	bl	8005168 <one_sectionD>
						H_accel_flag = 0;
 8008960:	4b21      	ldr	r3, [pc, #132]	; (80089e8 <searchC2+0x16c>)
 8008962:	2200      	movs	r2, #0
 8008964:	701a      	strb	r2, [r3, #0]
 8008966:	e002      	b.n	800896e <searchC2+0xf2>
					}else{
						one_sectionU();
 8008968:	f7fc fc2a 	bl	80051c0 <one_sectionU>
					if(((route[r_cnt-1] & route[r_cnt]) == 0x88) && (route[r_cnt] != 0xff)){
 800896c:	e003      	b.n	8008976 <searchC2+0xfa>
 800896e:	e002      	b.n	8008976 <searchC2+0xfa>
					}
				}else{
					one_sectionU();
 8008970:	f7fc fc26 	bl	80051c0 <one_sectionU>
				}
				break;
 8008974:	e00d      	b.n	8008992 <searchC2+0x116>
 8008976:	e00c      	b.n	8008992 <searchC2+0x116>
			//----a右折スラローム----
			case 0x44:
				slalom_R90();
 8008978:	f7fc fe56 	bl	8005628 <slalom_R90>

				break;
 800897c:	e009      	b.n	8008992 <searchC2+0x116>
			//----180回転----
			case 0x22:
				half_sectionD();
 800897e:	f7fc fba1 	bl	80050c4 <half_sectionD>
				rotate_180();
 8008982:	f7fc fd9d 	bl	80054c0 <rotate_180>
/*				if(wall_info & 0x88){
					set_position2(0);
				}
*/				half_sectionA();
 8008986:	f7fc fb7d 	bl	8005084 <half_sectionA>
				break;
 800898a:	e002      	b.n	8008992 <searchC2+0x116>
			//----a左折スラローム----
			case 0x11:
				slalom_L90();
 800898c:	f7fc ff28 	bl	80057e0 <slalom_L90>
				break;
 8008990:	bf00      	nop
		}
		adv_pos();
 8008992:	f000 f833 	bl	80089fc <adv_pos>
		conf_route();
 8008996:	f000 f86b 	bl	8008a70 <conf_route>

	}while((mouse.x != goal_x) || (mouse.y != goal_y));
 800899a:	4b15      	ldr	r3, [pc, #84]	; (80089f0 <searchC2+0x174>)
 800899c:	781b      	ldrb	r3, [r3, #0]
 800899e:	b2da      	uxtb	r2, r3
 80089a0:	4b14      	ldr	r3, [pc, #80]	; (80089f4 <searchC2+0x178>)
 80089a2:	781b      	ldrb	r3, [r3, #0]
 80089a4:	429a      	cmp	r2, r3
 80089a6:	d18f      	bne.n	80088c8 <searchC2+0x4c>
 80089a8:	4b11      	ldr	r3, [pc, #68]	; (80089f0 <searchC2+0x174>)
 80089aa:	785b      	ldrb	r3, [r3, #1]
 80089ac:	b2da      	uxtb	r2, r3
 80089ae:	4b12      	ldr	r3, [pc, #72]	; (80089f8 <searchC2+0x17c>)
 80089b0:	781b      	ldrb	r3, [r3, #0]
 80089b2:	429a      	cmp	r2, r3
 80089b4:	d188      	bne.n	80088c8 <searchC2+0x4c>

	half_sectionD();
 80089b6:	f7fc fb85 	bl	80050c4 <half_sectionD>

	HAL_Delay(2000);
 80089ba:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80089be:	f7f8 fb05 	bl	8000fcc <HAL_Delay>
	rotate_180();											//180度回転
 80089c2:	f7fc fd7d 	bl	80054c0 <rotate_180>

	if(!MF.FLAG.SCND){
 80089c6:	4b05      	ldr	r3, [pc, #20]	; (80089dc <searchC2+0x160>)
 80089c8:	881b      	ldrh	r3, [r3, #0]
 80089ca:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80089ce:	b2db      	uxtb	r3, r3
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d101      	bne.n	80089d8 <searchC2+0x15c>
		store_map_in_eeprom();
 80089d4:	f000 fc6e 	bl	80092b4 <store_map_in_eeprom>
	}
}
 80089d8:	bf00      	nop
 80089da:	bd80      	pop	{r7, pc}
 80089dc:	20000e18 	.word	0x20000e18
 80089e0:	2000029c 	.word	0x2000029c
 80089e4:	20000e30 	.word	0x20000e30
 80089e8:	2000029d 	.word	0x2000029d
 80089ec:	20000b0c 	.word	0x20000b0c
 80089f0:	20000ac8 	.word	0x20000ac8
 80089f4:	20000a70 	.word	0x20000a70
 80089f8:	20000a14 	.word	0x20000a14

080089fc <adv_pos>:
//adv_pos
//aマイクロマウス内部位置情報で前進させる
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void adv_pos(){
 80089fc:	b480      	push	{r7}
 80089fe:	af00      	add	r7, sp, #0

	switch(mouse.dir){										//aマイクロマウスが現在向いている方向で判定
 8008a00:	4b1a      	ldr	r3, [pc, #104]	; (8008a6c <adv_pos+0x70>)
 8008a02:	789b      	ldrb	r3, [r3, #2]
 8008a04:	b2db      	uxtb	r3, r3
 8008a06:	2b03      	cmp	r3, #3
 8008a08:	d82a      	bhi.n	8008a60 <adv_pos+0x64>
 8008a0a:	a201      	add	r2, pc, #4	; (adr r2, 8008a10 <adv_pos+0x14>)
 8008a0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a10:	08008a21 	.word	0x08008a21
 8008a14:	08008a31 	.word	0x08008a31
 8008a18:	08008a41 	.word	0x08008a41
 8008a1c:	08008a51 	.word	0x08008a51
	case 0x00:												//a北方向に向いている場合
		mouse.y++;											//Y座標をインクリメント
 8008a20:	4b12      	ldr	r3, [pc, #72]	; (8008a6c <adv_pos+0x70>)
 8008a22:	785b      	ldrb	r3, [r3, #1]
 8008a24:	b2db      	uxtb	r3, r3
 8008a26:	3301      	adds	r3, #1
 8008a28:	b2da      	uxtb	r2, r3
 8008a2a:	4b10      	ldr	r3, [pc, #64]	; (8008a6c <adv_pos+0x70>)
 8008a2c:	705a      	strb	r2, [r3, #1]
		break;
 8008a2e:	e017      	b.n	8008a60 <adv_pos+0x64>
	case 0x01:												//a東方向に向いている場合
		mouse.x++;											//X座標をインクリメント
 8008a30:	4b0e      	ldr	r3, [pc, #56]	; (8008a6c <adv_pos+0x70>)
 8008a32:	781b      	ldrb	r3, [r3, #0]
 8008a34:	b2db      	uxtb	r3, r3
 8008a36:	3301      	adds	r3, #1
 8008a38:	b2da      	uxtb	r2, r3
 8008a3a:	4b0c      	ldr	r3, [pc, #48]	; (8008a6c <adv_pos+0x70>)
 8008a3c:	701a      	strb	r2, [r3, #0]
		break;
 8008a3e:	e00f      	b.n	8008a60 <adv_pos+0x64>
	case 0x02:												//a南方向に向いている場合
		mouse.y--;											//Y座標をデクリメント
 8008a40:	4b0a      	ldr	r3, [pc, #40]	; (8008a6c <adv_pos+0x70>)
 8008a42:	785b      	ldrb	r3, [r3, #1]
 8008a44:	b2db      	uxtb	r3, r3
 8008a46:	3b01      	subs	r3, #1
 8008a48:	b2da      	uxtb	r2, r3
 8008a4a:	4b08      	ldr	r3, [pc, #32]	; (8008a6c <adv_pos+0x70>)
 8008a4c:	705a      	strb	r2, [r3, #1]
		break;
 8008a4e:	e007      	b.n	8008a60 <adv_pos+0x64>
	case 0x03:												//a西方向に向いている場合
		mouse.x--;											//X座標をデクリメント
 8008a50:	4b06      	ldr	r3, [pc, #24]	; (8008a6c <adv_pos+0x70>)
 8008a52:	781b      	ldrb	r3, [r3, #0]
 8008a54:	b2db      	uxtb	r3, r3
 8008a56:	3b01      	subs	r3, #1
 8008a58:	b2da      	uxtb	r2, r3
 8008a5a:	4b04      	ldr	r3, [pc, #16]	; (8008a6c <adv_pos+0x70>)
 8008a5c:	701a      	strb	r2, [r3, #0]
		break;
 8008a5e:	bf00      	nop
	}
}
 8008a60:	bf00      	nop
 8008a62:	46bd      	mov	sp, r7
 8008a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a68:	4770      	bx	lr
 8008a6a:	bf00      	nop
 8008a6c:	20000ac8 	.word	0x20000ac8

08008a70 <conf_route>:
//conf_route
//a進路を判定する
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void conf_route(){
 8008a70:	b580      	push	{r7, lr}
 8008a72:	af00      	add	r7, sp, #0

	//----a壁情報書き込み----
	write_map();
 8008a74:	f000 f886 	bl	8008b84 <write_map>

	//----a最短経路上に壁があれば進路変更----
	if(wall_info & route[r_cnt]){
 8008a78:	4b09      	ldr	r3, [pc, #36]	; (8008aa0 <conf_route+0x30>)
 8008a7a:	781b      	ldrb	r3, [r3, #0]
 8008a7c:	461a      	mov	r2, r3
 8008a7e:	4b09      	ldr	r3, [pc, #36]	; (8008aa4 <conf_route+0x34>)
 8008a80:	5c9a      	ldrb	r2, [r3, r2]
 8008a82:	4b09      	ldr	r3, [pc, #36]	; (8008aa8 <conf_route+0x38>)
 8008a84:	781b      	ldrb	r3, [r3, #0]
 8008a86:	4013      	ands	r3, r2
 8008a88:	b2db      	uxtb	r3, r3
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d006      	beq.n	8008a9c <conf_route+0x2c>
		make_smap();										//a歩数マップを更新
 8008a8e:	f000 f9b9 	bl	8008e04 <make_smap>
		make_route();										//a最短経路を更新
 8008a92:	f000 fae1 	bl	8009058 <make_route>
		r_cnt = 0;											//a経路カウンタを0に
 8008a96:	4b02      	ldr	r3, [pc, #8]	; (8008aa0 <conf_route+0x30>)
 8008a98:	2200      	movs	r2, #0
 8008a9a:	701a      	strb	r2, [r3, #0]
	}
}
 8008a9c:	bf00      	nop
 8008a9e:	bd80      	pop	{r7, pc}
 8008aa0:	20000e30 	.word	0x20000e30
 8008aa4:	20000b0c 	.word	0x20000b0c
 8008aa8:	2000029c 	.word	0x2000029c

08008aac <map_Init>:
//map_Init
//aマップ格納配列map[][]の初期化をする
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void map_Init(){
 8008aac:	b480      	push	{r7}
 8008aae:	b083      	sub	sp, #12
 8008ab0:	af00      	add	r7, sp, #0
	//====a変数宣言====
	uint8_t x, y;											//for文用変数

	//====a初期化開始====
	//aマップのクリア
	for(y = 0; y <= 15; y++){								//a各Y座標で実行
 8008ab2:	2300      	movs	r3, #0
 8008ab4:	71bb      	strb	r3, [r7, #6]
 8008ab6:	e013      	b.n	8008ae0 <map_Init+0x34>
		for(x = 0; x <= 15; x++){							//a各X座標で実行
 8008ab8:	2300      	movs	r3, #0
 8008aba:	71fb      	strb	r3, [r7, #7]
 8008abc:	e00a      	b.n	8008ad4 <map_Init+0x28>
			map[y][x] = 0xf0;								//a上位4ビット（2次走行時）を壁あり，下位4ビット（1次走行時）を壁なしとする。
 8008abe:	79ba      	ldrb	r2, [r7, #6]
 8008ac0:	79fb      	ldrb	r3, [r7, #7]
 8008ac2:	492f      	ldr	r1, [pc, #188]	; (8008b80 <map_Init+0xd4>)
 8008ac4:	0112      	lsls	r2, r2, #4
 8008ac6:	440a      	add	r2, r1
 8008ac8:	4413      	add	r3, r2
 8008aca:	22f0      	movs	r2, #240	; 0xf0
 8008acc:	701a      	strb	r2, [r3, #0]
		for(x = 0; x <= 15; x++){							//a各X座標で実行
 8008ace:	79fb      	ldrb	r3, [r7, #7]
 8008ad0:	3301      	adds	r3, #1
 8008ad2:	71fb      	strb	r3, [r7, #7]
 8008ad4:	79fb      	ldrb	r3, [r7, #7]
 8008ad6:	2b0f      	cmp	r3, #15
 8008ad8:	d9f1      	bls.n	8008abe <map_Init+0x12>
	for(y = 0; y <= 15; y++){								//a各Y座標で実行
 8008ada:	79bb      	ldrb	r3, [r7, #6]
 8008adc:	3301      	adds	r3, #1
 8008ade:	71bb      	strb	r3, [r7, #6]
 8008ae0:	79bb      	ldrb	r3, [r7, #6]
 8008ae2:	2b0f      	cmp	r3, #15
 8008ae4:	d9e8      	bls.n	8008ab8 <map_Init+0xc>
		}
	}

	//a確定壁の配置
	for(y = 0; y <= 15; y++){								//a各Y座標で実行
 8008ae6:	2300      	movs	r3, #0
 8008ae8:	71bb      	strb	r3, [r7, #6]
 8008aea:	e020      	b.n	8008b2e <map_Init+0x82>
		map[y][0] |= 0xf1;									//a最西に壁を配置
 8008aec:	79bb      	ldrb	r3, [r7, #6]
 8008aee:	4a24      	ldr	r2, [pc, #144]	; (8008b80 <map_Init+0xd4>)
 8008af0:	011b      	lsls	r3, r3, #4
 8008af2:	4413      	add	r3, r2
 8008af4:	781a      	ldrb	r2, [r3, #0]
 8008af6:	79bb      	ldrb	r3, [r7, #6]
 8008af8:	f062 020e 	orn	r2, r2, #14
 8008afc:	b2d1      	uxtb	r1, r2
 8008afe:	4a20      	ldr	r2, [pc, #128]	; (8008b80 <map_Init+0xd4>)
 8008b00:	011b      	lsls	r3, r3, #4
 8008b02:	4413      	add	r3, r2
 8008b04:	460a      	mov	r2, r1
 8008b06:	701a      	strb	r2, [r3, #0]
		map[y][15] |= 0xf4;									//a最東に壁を配置
 8008b08:	79bb      	ldrb	r3, [r7, #6]
 8008b0a:	4a1d      	ldr	r2, [pc, #116]	; (8008b80 <map_Init+0xd4>)
 8008b0c:	011b      	lsls	r3, r3, #4
 8008b0e:	4413      	add	r3, r2
 8008b10:	330f      	adds	r3, #15
 8008b12:	781a      	ldrb	r2, [r3, #0]
 8008b14:	79bb      	ldrb	r3, [r7, #6]
 8008b16:	f062 020b 	orn	r2, r2, #11
 8008b1a:	b2d1      	uxtb	r1, r2
 8008b1c:	4a18      	ldr	r2, [pc, #96]	; (8008b80 <map_Init+0xd4>)
 8008b1e:	011b      	lsls	r3, r3, #4
 8008b20:	4413      	add	r3, r2
 8008b22:	330f      	adds	r3, #15
 8008b24:	460a      	mov	r2, r1
 8008b26:	701a      	strb	r2, [r3, #0]
	for(y = 0; y <= 15; y++){								//a各Y座標で実行
 8008b28:	79bb      	ldrb	r3, [r7, #6]
 8008b2a:	3301      	adds	r3, #1
 8008b2c:	71bb      	strb	r3, [r7, #6]
 8008b2e:	79bb      	ldrb	r3, [r7, #6]
 8008b30:	2b0f      	cmp	r3, #15
 8008b32:	d9db      	bls.n	8008aec <map_Init+0x40>
	}
	for(x = 0; x <= 15; x++){								//a各X座標で実行
 8008b34:	2300      	movs	r3, #0
 8008b36:	71fb      	strb	r3, [r7, #7]
 8008b38:	e019      	b.n	8008b6e <map_Init+0xc2>
		map[0][x] |= 0xf2;									//a最南に壁を配置
 8008b3a:	79fb      	ldrb	r3, [r7, #7]
 8008b3c:	4a10      	ldr	r2, [pc, #64]	; (8008b80 <map_Init+0xd4>)
 8008b3e:	5cd2      	ldrb	r2, [r2, r3]
 8008b40:	79fb      	ldrb	r3, [r7, #7]
 8008b42:	f062 020d 	orn	r2, r2, #13
 8008b46:	b2d1      	uxtb	r1, r2
 8008b48:	4a0d      	ldr	r2, [pc, #52]	; (8008b80 <map_Init+0xd4>)
 8008b4a:	54d1      	strb	r1, [r2, r3]
		map[15][x] |= 0xf8;									//a最北に壁を配置
 8008b4c:	79fb      	ldrb	r3, [r7, #7]
 8008b4e:	4a0c      	ldr	r2, [pc, #48]	; (8008b80 <map_Init+0xd4>)
 8008b50:	4413      	add	r3, r2
 8008b52:	f893 20f0 	ldrb.w	r2, [r3, #240]	; 0xf0
 8008b56:	79fb      	ldrb	r3, [r7, #7]
 8008b58:	f062 0207 	orn	r2, r2, #7
 8008b5c:	b2d1      	uxtb	r1, r2
 8008b5e:	4a08      	ldr	r2, [pc, #32]	; (8008b80 <map_Init+0xd4>)
 8008b60:	4413      	add	r3, r2
 8008b62:	460a      	mov	r2, r1
 8008b64:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
	for(x = 0; x <= 15; x++){								//a各X座標で実行
 8008b68:	79fb      	ldrb	r3, [r7, #7]
 8008b6a:	3301      	adds	r3, #1
 8008b6c:	71fb      	strb	r3, [r7, #7]
 8008b6e:	79fb      	ldrb	r3, [r7, #7]
 8008b70:	2b0f      	cmp	r3, #15
 8008b72:	d9e2      	bls.n	8008b3a <map_Init+0x8e>
	}
}
 8008b74:	bf00      	nop
 8008b76:	370c      	adds	r7, #12
 8008b78:	46bd      	mov	sp, r7
 8008b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b7e:	4770      	bx	lr
 8008b80:	20000184 	.word	0x20000184

08008b84 <write_map>:
//write_map
//aマップデータを書き込む
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void write_map(){
 8008b84:	b490      	push	{r4, r7}
 8008b86:	b082      	sub	sp, #8
 8008b88:	af00      	add	r7, sp, #0

	//====a変数宣言====
	uint8_t m_temp;											//a向きを補正した壁情報

	//====a壁情報の補正格納====
	m_temp = (wall_info >> mouse.dir) & 0x0f;				//aセンサ壁情報をmouse.dirで向きを補正させて下位4bit分を残す
 8008b8a:	4b8f      	ldr	r3, [pc, #572]	; (8008dc8 <write_map+0x244>)
 8008b8c:	781b      	ldrb	r3, [r3, #0]
 8008b8e:	461a      	mov	r2, r3
 8008b90:	4b8e      	ldr	r3, [pc, #568]	; (8008dcc <write_map+0x248>)
 8008b92:	789b      	ldrb	r3, [r3, #2]
 8008b94:	b2db      	uxtb	r3, r3
 8008b96:	fa42 f303 	asr.w	r3, r2, r3
 8008b9a:	b2db      	uxtb	r3, r3
 8008b9c:	f003 030f 	and.w	r3, r3, #15
 8008ba0:	71fb      	strb	r3, [r7, #7]
	m_temp |= (m_temp << 4);								//a上位4bitに下位4bitをコピー。この作業でm_tempにNESW順で壁が格納
 8008ba2:	79fb      	ldrb	r3, [r7, #7]
 8008ba4:	011b      	lsls	r3, r3, #4
 8008ba6:	b25a      	sxtb	r2, r3
 8008ba8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008bac:	4313      	orrs	r3, r2
 8008bae:	b25b      	sxtb	r3, r3
 8008bb0:	71fb      	strb	r3, [r7, #7]

	//====aデータの書き込み====
	map[mouse.y][mouse.x] = m_temp; 						//a現在地に壁情報書き込み
 8008bb2:	4b86      	ldr	r3, [pc, #536]	; (8008dcc <write_map+0x248>)
 8008bb4:	785b      	ldrb	r3, [r3, #1]
 8008bb6:	b2db      	uxtb	r3, r3
 8008bb8:	4618      	mov	r0, r3
 8008bba:	4b84      	ldr	r3, [pc, #528]	; (8008dcc <write_map+0x248>)
 8008bbc:	781b      	ldrb	r3, [r3, #0]
 8008bbe:	b2db      	uxtb	r3, r3
 8008bc0:	4619      	mov	r1, r3
 8008bc2:	4a83      	ldr	r2, [pc, #524]	; (8008dd0 <write_map+0x24c>)
 8008bc4:	0103      	lsls	r3, r0, #4
 8008bc6:	4413      	add	r3, r2
 8008bc8:	440b      	add	r3, r1
 8008bca:	79fa      	ldrb	r2, [r7, #7]
 8008bcc:	701a      	strb	r2, [r3, #0]
	//----a周辺に書き込む----
	//a北側について
	if(mouse.y != 15){										//a現在最北端でないとき
 8008bce:	4b7f      	ldr	r3, [pc, #508]	; (8008dcc <write_map+0x248>)
 8008bd0:	785b      	ldrb	r3, [r3, #1]
 8008bd2:	b2db      	uxtb	r3, r3
 8008bd4:	2b0f      	cmp	r3, #15
 8008bd6:	d039      	beq.n	8008c4c <write_map+0xc8>
		if(m_temp & 0x88){									//a北壁がある場合
 8008bd8:	79fb      	ldrb	r3, [r7, #7]
 8008bda:	f003 0388 	and.w	r3, r3, #136	; 0x88
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d01a      	beq.n	8008c18 <write_map+0x94>
			map[mouse.y + 1][mouse.x] |= 0x22;				//a北側の区画から見て南壁ありを書き込む
 8008be2:	4b7a      	ldr	r3, [pc, #488]	; (8008dcc <write_map+0x248>)
 8008be4:	785b      	ldrb	r3, [r3, #1]
 8008be6:	b2d8      	uxtb	r0, r3
 8008be8:	4603      	mov	r3, r0
 8008bea:	3301      	adds	r3, #1
 8008bec:	4a77      	ldr	r2, [pc, #476]	; (8008dcc <write_map+0x248>)
 8008bee:	7812      	ldrb	r2, [r2, #0]
 8008bf0:	b2d1      	uxtb	r1, r2
 8008bf2:	460c      	mov	r4, r1
 8008bf4:	4a76      	ldr	r2, [pc, #472]	; (8008dd0 <write_map+0x24c>)
 8008bf6:	011b      	lsls	r3, r3, #4
 8008bf8:	4413      	add	r3, r2
 8008bfa:	4423      	add	r3, r4
 8008bfc:	781a      	ldrb	r2, [r3, #0]
 8008bfe:	4603      	mov	r3, r0
 8008c00:	3301      	adds	r3, #1
 8008c02:	4608      	mov	r0, r1
 8008c04:	f042 0222 	orr.w	r2, r2, #34	; 0x22
 8008c08:	b2d1      	uxtb	r1, r2
 8008c0a:	4a71      	ldr	r2, [pc, #452]	; (8008dd0 <write_map+0x24c>)
 8008c0c:	011b      	lsls	r3, r3, #4
 8008c0e:	4413      	add	r3, r2
 8008c10:	4403      	add	r3, r0
 8008c12:	460a      	mov	r2, r1
 8008c14:	701a      	strb	r2, [r3, #0]
 8008c16:	e019      	b.n	8008c4c <write_map+0xc8>
		}else{												//a北壁がない場合
			map[mouse.y + 1][mouse.x] &= 0xDD;				//a北側の区画から見て南壁なしを書き込む
 8008c18:	4b6c      	ldr	r3, [pc, #432]	; (8008dcc <write_map+0x248>)
 8008c1a:	785b      	ldrb	r3, [r3, #1]
 8008c1c:	b2d8      	uxtb	r0, r3
 8008c1e:	4603      	mov	r3, r0
 8008c20:	3301      	adds	r3, #1
 8008c22:	4a6a      	ldr	r2, [pc, #424]	; (8008dcc <write_map+0x248>)
 8008c24:	7812      	ldrb	r2, [r2, #0]
 8008c26:	b2d1      	uxtb	r1, r2
 8008c28:	460c      	mov	r4, r1
 8008c2a:	4a69      	ldr	r2, [pc, #420]	; (8008dd0 <write_map+0x24c>)
 8008c2c:	011b      	lsls	r3, r3, #4
 8008c2e:	4413      	add	r3, r2
 8008c30:	4423      	add	r3, r4
 8008c32:	781a      	ldrb	r2, [r3, #0]
 8008c34:	4603      	mov	r3, r0
 8008c36:	3301      	adds	r3, #1
 8008c38:	4608      	mov	r0, r1
 8008c3a:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 8008c3e:	b2d1      	uxtb	r1, r2
 8008c40:	4a63      	ldr	r2, [pc, #396]	; (8008dd0 <write_map+0x24c>)
 8008c42:	011b      	lsls	r3, r3, #4
 8008c44:	4413      	add	r3, r2
 8008c46:	4403      	add	r3, r0
 8008c48:	460a      	mov	r2, r1
 8008c4a:	701a      	strb	r2, [r3, #0]
		}
	}
	//a東側について
	if(mouse.x != 15){										//a現在最東端でないとき
 8008c4c:	4b5f      	ldr	r3, [pc, #380]	; (8008dcc <write_map+0x248>)
 8008c4e:	781b      	ldrb	r3, [r3, #0]
 8008c50:	b2db      	uxtb	r3, r3
 8008c52:	2b0f      	cmp	r3, #15
 8008c54:	d037      	beq.n	8008cc6 <write_map+0x142>
		if(m_temp & 0x44){									//a東壁がある場合
 8008c56:	79fb      	ldrb	r3, [r7, #7]
 8008c58:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d019      	beq.n	8008c94 <write_map+0x110>
			map[mouse.y][mouse.x + 1] |= 0x11;				//a東側の区画から見て西壁ありを書き込む
 8008c60:	4b5a      	ldr	r3, [pc, #360]	; (8008dcc <write_map+0x248>)
 8008c62:	785b      	ldrb	r3, [r3, #1]
 8008c64:	b2dc      	uxtb	r4, r3
 8008c66:	4622      	mov	r2, r4
 8008c68:	4b58      	ldr	r3, [pc, #352]	; (8008dcc <write_map+0x248>)
 8008c6a:	781b      	ldrb	r3, [r3, #0]
 8008c6c:	b2d8      	uxtb	r0, r3
 8008c6e:	4603      	mov	r3, r0
 8008c70:	3301      	adds	r3, #1
 8008c72:	4957      	ldr	r1, [pc, #348]	; (8008dd0 <write_map+0x24c>)
 8008c74:	0112      	lsls	r2, r2, #4
 8008c76:	440a      	add	r2, r1
 8008c78:	4413      	add	r3, r2
 8008c7a:	781a      	ldrb	r2, [r3, #0]
 8008c7c:	4603      	mov	r3, r0
 8008c7e:	3301      	adds	r3, #1
 8008c80:	f042 0211 	orr.w	r2, r2, #17
 8008c84:	b2d0      	uxtb	r0, r2
 8008c86:	4952      	ldr	r1, [pc, #328]	; (8008dd0 <write_map+0x24c>)
 8008c88:	0122      	lsls	r2, r4, #4
 8008c8a:	440a      	add	r2, r1
 8008c8c:	4413      	add	r3, r2
 8008c8e:	4602      	mov	r2, r0
 8008c90:	701a      	strb	r2, [r3, #0]
 8008c92:	e018      	b.n	8008cc6 <write_map+0x142>
		}else{												//a北壁がない場合
			map[mouse.y][mouse.x + 1] &= 0xEE;				//a東側の区画から見て西壁なしを書き込む
 8008c94:	4b4d      	ldr	r3, [pc, #308]	; (8008dcc <write_map+0x248>)
 8008c96:	785b      	ldrb	r3, [r3, #1]
 8008c98:	b2dc      	uxtb	r4, r3
 8008c9a:	4622      	mov	r2, r4
 8008c9c:	4b4b      	ldr	r3, [pc, #300]	; (8008dcc <write_map+0x248>)
 8008c9e:	781b      	ldrb	r3, [r3, #0]
 8008ca0:	b2d8      	uxtb	r0, r3
 8008ca2:	4603      	mov	r3, r0
 8008ca4:	3301      	adds	r3, #1
 8008ca6:	494a      	ldr	r1, [pc, #296]	; (8008dd0 <write_map+0x24c>)
 8008ca8:	0112      	lsls	r2, r2, #4
 8008caa:	440a      	add	r2, r1
 8008cac:	4413      	add	r3, r2
 8008cae:	781a      	ldrb	r2, [r3, #0]
 8008cb0:	4603      	mov	r3, r0
 8008cb2:	3301      	adds	r3, #1
 8008cb4:	f022 0211 	bic.w	r2, r2, #17
 8008cb8:	b2d0      	uxtb	r0, r2
 8008cba:	4945      	ldr	r1, [pc, #276]	; (8008dd0 <write_map+0x24c>)
 8008cbc:	0122      	lsls	r2, r4, #4
 8008cbe:	440a      	add	r2, r1
 8008cc0:	4413      	add	r3, r2
 8008cc2:	4602      	mov	r2, r0
 8008cc4:	701a      	strb	r2, [r3, #0]
		}
	}
	//a南壁について
	if(mouse.y != 0){										//a現在最南端でないとき
 8008cc6:	4b41      	ldr	r3, [pc, #260]	; (8008dcc <write_map+0x248>)
 8008cc8:	785b      	ldrb	r3, [r3, #1]
 8008cca:	b2db      	uxtb	r3, r3
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d039      	beq.n	8008d44 <write_map+0x1c0>
		if(m_temp & 0x22){									//a南壁がある場合
 8008cd0:	79fb      	ldrb	r3, [r7, #7]
 8008cd2:	f003 0322 	and.w	r3, r3, #34	; 0x22
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d01a      	beq.n	8008d10 <write_map+0x18c>
			map[mouse.y - 1][mouse.x] |= 0x88;				//a南側の区画から見て北壁ありを書き込む
 8008cda:	4b3c      	ldr	r3, [pc, #240]	; (8008dcc <write_map+0x248>)
 8008cdc:	785b      	ldrb	r3, [r3, #1]
 8008cde:	b2d8      	uxtb	r0, r3
 8008ce0:	4603      	mov	r3, r0
 8008ce2:	3b01      	subs	r3, #1
 8008ce4:	4a39      	ldr	r2, [pc, #228]	; (8008dcc <write_map+0x248>)
 8008ce6:	7812      	ldrb	r2, [r2, #0]
 8008ce8:	b2d1      	uxtb	r1, r2
 8008cea:	460c      	mov	r4, r1
 8008cec:	4a38      	ldr	r2, [pc, #224]	; (8008dd0 <write_map+0x24c>)
 8008cee:	011b      	lsls	r3, r3, #4
 8008cf0:	4413      	add	r3, r2
 8008cf2:	4423      	add	r3, r4
 8008cf4:	781a      	ldrb	r2, [r3, #0]
 8008cf6:	4603      	mov	r3, r0
 8008cf8:	3b01      	subs	r3, #1
 8008cfa:	4608      	mov	r0, r1
 8008cfc:	f062 0277 	orn	r2, r2, #119	; 0x77
 8008d00:	b2d1      	uxtb	r1, r2
 8008d02:	4a33      	ldr	r2, [pc, #204]	; (8008dd0 <write_map+0x24c>)
 8008d04:	011b      	lsls	r3, r3, #4
 8008d06:	4413      	add	r3, r2
 8008d08:	4403      	add	r3, r0
 8008d0a:	460a      	mov	r2, r1
 8008d0c:	701a      	strb	r2, [r3, #0]
 8008d0e:	e019      	b.n	8008d44 <write_map+0x1c0>
		}else{												//a南壁がない場合
			map[mouse.y - 1][mouse.x] &= 0x77;				//a南側の区画から見て北壁なしを書き込む
 8008d10:	4b2e      	ldr	r3, [pc, #184]	; (8008dcc <write_map+0x248>)
 8008d12:	785b      	ldrb	r3, [r3, #1]
 8008d14:	b2d8      	uxtb	r0, r3
 8008d16:	4603      	mov	r3, r0
 8008d18:	3b01      	subs	r3, #1
 8008d1a:	4a2c      	ldr	r2, [pc, #176]	; (8008dcc <write_map+0x248>)
 8008d1c:	7812      	ldrb	r2, [r2, #0]
 8008d1e:	b2d1      	uxtb	r1, r2
 8008d20:	460c      	mov	r4, r1
 8008d22:	4a2b      	ldr	r2, [pc, #172]	; (8008dd0 <write_map+0x24c>)
 8008d24:	011b      	lsls	r3, r3, #4
 8008d26:	4413      	add	r3, r2
 8008d28:	4423      	add	r3, r4
 8008d2a:	781a      	ldrb	r2, [r3, #0]
 8008d2c:	4603      	mov	r3, r0
 8008d2e:	3b01      	subs	r3, #1
 8008d30:	4608      	mov	r0, r1
 8008d32:	f002 0277 	and.w	r2, r2, #119	; 0x77
 8008d36:	b2d1      	uxtb	r1, r2
 8008d38:	4a25      	ldr	r2, [pc, #148]	; (8008dd0 <write_map+0x24c>)
 8008d3a:	011b      	lsls	r3, r3, #4
 8008d3c:	4413      	add	r3, r2
 8008d3e:	4403      	add	r3, r0
 8008d40:	460a      	mov	r2, r1
 8008d42:	701a      	strb	r2, [r3, #0]
		}
	}
	//a西側について
	if(mouse.x != 0){										//a現在最西端でないとき
 8008d44:	4b21      	ldr	r3, [pc, #132]	; (8008dcc <write_map+0x248>)
 8008d46:	781b      	ldrb	r3, [r3, #0]
 8008d48:	b2db      	uxtb	r3, r3
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d037      	beq.n	8008dbe <write_map+0x23a>
		if(m_temp & 0x11){									//a西壁がある場合
 8008d4e:	79fb      	ldrb	r3, [r7, #7]
 8008d50:	f003 0311 	and.w	r3, r3, #17
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d019      	beq.n	8008d8c <write_map+0x208>
			map[mouse.y][mouse.x - 1] |= 0x44;				//a西側の区画から見て東壁ありを書き込む
 8008d58:	4b1c      	ldr	r3, [pc, #112]	; (8008dcc <write_map+0x248>)
 8008d5a:	785b      	ldrb	r3, [r3, #1]
 8008d5c:	b2dc      	uxtb	r4, r3
 8008d5e:	4622      	mov	r2, r4
 8008d60:	4b1a      	ldr	r3, [pc, #104]	; (8008dcc <write_map+0x248>)
 8008d62:	781b      	ldrb	r3, [r3, #0]
 8008d64:	b2d8      	uxtb	r0, r3
 8008d66:	4603      	mov	r3, r0
 8008d68:	3b01      	subs	r3, #1
 8008d6a:	4919      	ldr	r1, [pc, #100]	; (8008dd0 <write_map+0x24c>)
 8008d6c:	0112      	lsls	r2, r2, #4
 8008d6e:	440a      	add	r2, r1
 8008d70:	4413      	add	r3, r2
 8008d72:	781a      	ldrb	r2, [r3, #0]
 8008d74:	4603      	mov	r3, r0
 8008d76:	3b01      	subs	r3, #1
 8008d78:	f042 0244 	orr.w	r2, r2, #68	; 0x44
 8008d7c:	b2d0      	uxtb	r0, r2
 8008d7e:	4914      	ldr	r1, [pc, #80]	; (8008dd0 <write_map+0x24c>)
 8008d80:	0122      	lsls	r2, r4, #4
 8008d82:	440a      	add	r2, r1
 8008d84:	4413      	add	r3, r2
 8008d86:	4602      	mov	r2, r0
 8008d88:	701a      	strb	r2, [r3, #0]
		}else{												//a西壁がない場合
			map[mouse.y][mouse.x - 1] &= 0xBB;				//a西側の区画から見て東側なしを書き込む
		}
	}
}
 8008d8a:	e018      	b.n	8008dbe <write_map+0x23a>
			map[mouse.y][mouse.x - 1] &= 0xBB;				//a西側の区画から見て東側なしを書き込む
 8008d8c:	4b0f      	ldr	r3, [pc, #60]	; (8008dcc <write_map+0x248>)
 8008d8e:	785b      	ldrb	r3, [r3, #1]
 8008d90:	b2dc      	uxtb	r4, r3
 8008d92:	4622      	mov	r2, r4
 8008d94:	4b0d      	ldr	r3, [pc, #52]	; (8008dcc <write_map+0x248>)
 8008d96:	781b      	ldrb	r3, [r3, #0]
 8008d98:	b2d8      	uxtb	r0, r3
 8008d9a:	4603      	mov	r3, r0
 8008d9c:	3b01      	subs	r3, #1
 8008d9e:	490c      	ldr	r1, [pc, #48]	; (8008dd0 <write_map+0x24c>)
 8008da0:	0112      	lsls	r2, r2, #4
 8008da2:	440a      	add	r2, r1
 8008da4:	4413      	add	r3, r2
 8008da6:	781a      	ldrb	r2, [r3, #0]
 8008da8:	4603      	mov	r3, r0
 8008daa:	3b01      	subs	r3, #1
 8008dac:	f022 0244 	bic.w	r2, r2, #68	; 0x44
 8008db0:	b2d0      	uxtb	r0, r2
 8008db2:	4907      	ldr	r1, [pc, #28]	; (8008dd0 <write_map+0x24c>)
 8008db4:	0122      	lsls	r2, r4, #4
 8008db6:	440a      	add	r2, r1
 8008db8:	4413      	add	r3, r2
 8008dba:	4602      	mov	r2, r0
 8008dbc:	701a      	strb	r2, [r3, #0]
}
 8008dbe:	bf00      	nop
 8008dc0:	3708      	adds	r7, #8
 8008dc2:	46bd      	mov	sp, r7
 8008dc4:	bc90      	pop	{r4, r7}
 8008dc6:	4770      	bx	lr
 8008dc8:	2000029c 	.word	0x2000029c
 8008dcc:	20000ac8 	.word	0x20000ac8
 8008dd0:	20000184 	.word	0x20000184

08008dd4 <turn_dir>:
//turn_dir
//aマウスの方向を変更する
//a引数1：t_pat …… 回転方向(drive.hでマクロ定義)
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void turn_dir(uint8_t t_pat){
 8008dd4:	b480      	push	{r7}
 8008dd6:	b083      	sub	sp, #12
 8008dd8:	af00      	add	r7, sp, #0
 8008dda:	4603      	mov	r3, r0
 8008ddc:	71fb      	strb	r3, [r7, #7]

	//====a方向を変更====
	mouse.dir = (mouse.dir + t_pat) & 0x03;					//a指定された分mouse.dirを回転させる
 8008dde:	4b08      	ldr	r3, [pc, #32]	; (8008e00 <turn_dir+0x2c>)
 8008de0:	789b      	ldrb	r3, [r3, #2]
 8008de2:	b2da      	uxtb	r2, r3
 8008de4:	79fb      	ldrb	r3, [r7, #7]
 8008de6:	4413      	add	r3, r2
 8008de8:	b2db      	uxtb	r3, r3
 8008dea:	f003 0303 	and.w	r3, r3, #3
 8008dee:	b2da      	uxtb	r2, r3
 8008df0:	4b03      	ldr	r3, [pc, #12]	; (8008e00 <turn_dir+0x2c>)
 8008df2:	709a      	strb	r2, [r3, #2]
}
 8008df4:	bf00      	nop
 8008df6:	370c      	adds	r7, #12
 8008df8:	46bd      	mov	sp, r7
 8008dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dfe:	4770      	bx	lr
 8008e00:	20000ac8 	.word	0x20000ac8

08008e04 <make_smap>:
//make_smap
//a歩数マップを作成する
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void make_smap(void){
 8008e04:	b480      	push	{r7}
 8008e06:	b089      	sub	sp, #36	; 0x24
 8008e08:	af00      	add	r7, sp, #0
	//====a変数宣言====
	uint8_t x, y;											//for文用変数
	uint8_t m_temp_sample[16];

	//====a歩数マップのクリア====
	for(y = 0; y <= 15; y++){								//a各Y座標で実行
 8008e0a:	2300      	movs	r3, #0
 8008e0c:	77bb      	strb	r3, [r7, #30]
 8008e0e:	e014      	b.n	8008e3a <make_smap+0x36>
		for(x = 0; x <= 15; x++){							//a各X座標で実行
 8008e10:	2300      	movs	r3, #0
 8008e12:	77fb      	strb	r3, [r7, #31]
 8008e14:	e00b      	b.n	8008e2e <make_smap+0x2a>
			smap[y][x] = 0x03e7;							//a未記入部分は歩数最大とする
 8008e16:	7fba      	ldrb	r2, [r7, #30]
 8008e18:	7ffb      	ldrb	r3, [r7, #31]
 8008e1a:	4988      	ldr	r1, [pc, #544]	; (800903c <make_smap+0x238>)
 8008e1c:	0112      	lsls	r2, r2, #4
 8008e1e:	4413      	add	r3, r2
 8008e20:	f240 32e7 	movw	r2, #999	; 0x3e7
 8008e24:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for(x = 0; x <= 15; x++){							//a各X座標で実行
 8008e28:	7ffb      	ldrb	r3, [r7, #31]
 8008e2a:	3301      	adds	r3, #1
 8008e2c:	77fb      	strb	r3, [r7, #31]
 8008e2e:	7ffb      	ldrb	r3, [r7, #31]
 8008e30:	2b0f      	cmp	r3, #15
 8008e32:	d9f0      	bls.n	8008e16 <make_smap+0x12>
	for(y = 0; y <= 15; y++){								//a各Y座標で実行
 8008e34:	7fbb      	ldrb	r3, [r7, #30]
 8008e36:	3301      	adds	r3, #1
 8008e38:	77bb      	strb	r3, [r7, #30]
 8008e3a:	7fbb      	ldrb	r3, [r7, #30]
 8008e3c:	2b0f      	cmp	r3, #15
 8008e3e:	d9e7      	bls.n	8008e10 <make_smap+0xc>
		}
	}

	//====aゴール座標を0にする====
	m_step = 0;												//a歩数カウンタを0にする
 8008e40:	4b7f      	ldr	r3, [pc, #508]	; (8009040 <make_smap+0x23c>)
 8008e42:	2200      	movs	r2, #0
 8008e44:	801a      	strh	r2, [r3, #0]
	smap[goal_y][goal_x] = 0;
 8008e46:	4b7f      	ldr	r3, [pc, #508]	; (8009044 <make_smap+0x240>)
 8008e48:	781b      	ldrb	r3, [r3, #0]
 8008e4a:	4618      	mov	r0, r3
 8008e4c:	4b7e      	ldr	r3, [pc, #504]	; (8009048 <make_smap+0x244>)
 8008e4e:	781b      	ldrb	r3, [r3, #0]
 8008e50:	4619      	mov	r1, r3
 8008e52:	4a7a      	ldr	r2, [pc, #488]	; (800903c <make_smap+0x238>)
 8008e54:	0103      	lsls	r3, r0, #4
 8008e56:	440b      	add	r3, r1
 8008e58:	2100      	movs	r1, #0
 8008e5a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

	//====a歩数カウンタの重みづけ====
	int straight = 3;
 8008e5e:	2303      	movs	r3, #3
 8008e60:	61bb      	str	r3, [r7, #24]
	int turn = 5;
 8008e62:	2305      	movs	r3, #5
 8008e64:	617b      	str	r3, [r7, #20]

	//====a自分の座標にたどり着くまでループ====
	do{
		//----aマップ全域を捜索----
		for(y = 0; y <= 15; y++){							//a各Y座標で実行
 8008e66:	2300      	movs	r3, #0
 8008e68:	77bb      	strb	r3, [r7, #30]
 8008e6a:	e0c4      	b.n	8008ff6 <make_smap+0x1f2>
			for(x = 0; x <= 15; x++){						//a各X座標で実行
 8008e6c:	2300      	movs	r3, #0
 8008e6e:	77fb      	strb	r3, [r7, #31]
 8008e70:	e0ba      	b.n	8008fe8 <make_smap+0x1e4>
				//----a現在最大の歩数を発見したとき----
				if(smap[y][x] == m_step){					//a歩数カウンタm_stepの値が現在最大の歩数
 8008e72:	7fba      	ldrb	r2, [r7, #30]
 8008e74:	7ffb      	ldrb	r3, [r7, #31]
 8008e76:	4971      	ldr	r1, [pc, #452]	; (800903c <make_smap+0x238>)
 8008e78:	0112      	lsls	r2, r2, #4
 8008e7a:	4413      	add	r3, r2
 8008e7c:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8008e80:	4b6f      	ldr	r3, [pc, #444]	; (8009040 <make_smap+0x23c>)
 8008e82:	881b      	ldrh	r3, [r3, #0]
 8008e84:	429a      	cmp	r2, r3
 8008e86:	f040 80ac 	bne.w	8008fe2 <make_smap+0x1de>
					uint8_t m_temp = map[y][x];				//map配列からマップデータを取り出す
 8008e8a:	7fba      	ldrb	r2, [r7, #30]
 8008e8c:	7ffb      	ldrb	r3, [r7, #31]
 8008e8e:	496f      	ldr	r1, [pc, #444]	; (800904c <make_smap+0x248>)
 8008e90:	0112      	lsls	r2, r2, #4
 8008e92:	440a      	add	r2, r1
 8008e94:	4413      	add	r3, r2
 8008e96:	781b      	ldrb	r3, [r3, #0]
 8008e98:	777b      	strb	r3, [r7, #29]
					if(MF.FLAG.SCND){						//a二次走行用のマップを作成する場合（二次走行時はMF.FLAG.SCNDが立っている）
 8008e9a:	4b6d      	ldr	r3, [pc, #436]	; (8009050 <make_smap+0x24c>)
 8008e9c:	881b      	ldrh	r3, [r3, #0]
 8008e9e:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8008ea2:	b2db      	uxtb	r3, r3
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d002      	beq.n	8008eae <make_smap+0xaa>
						m_temp >>= 4;						//a上位4bitを使うので4bit分右にシフトさせる
 8008ea8:	7f7b      	ldrb	r3, [r7, #29]
 8008eaa:	091b      	lsrs	r3, r3, #4
 8008eac:	777b      	strb	r3, [r7, #29]
					}
					//----a北壁についての処理----
					if(!(m_temp & 0x08) && y != 15){		//a北壁がなく現在最北端でないとき
 8008eae:	7f7b      	ldrb	r3, [r7, #29]
 8008eb0:	f003 0308 	and.w	r3, r3, #8
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d122      	bne.n	8008efe <make_smap+0xfa>
 8008eb8:	7fbb      	ldrb	r3, [r7, #30]
 8008eba:	2b0f      	cmp	r3, #15
 8008ebc:	d01f      	beq.n	8008efe <make_smap+0xfa>
						if(smap[y+1][x] == 0x03e7){			//a北側が未記入なら
 8008ebe:	7fbb      	ldrb	r3, [r7, #30]
 8008ec0:	1c5a      	adds	r2, r3, #1
 8008ec2:	7ffb      	ldrb	r3, [r7, #31]
 8008ec4:	495d      	ldr	r1, [pc, #372]	; (800903c <make_smap+0x238>)
 8008ec6:	0112      	lsls	r2, r2, #4
 8008ec8:	4413      	add	r3, r2
 8008eca:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8008ece:	f240 32e7 	movw	r2, #999	; 0x3e7
 8008ed2:	4293      	cmp	r3, r2
 8008ed4:	d113      	bne.n	8008efe <make_smap+0xfa>
							smap[y+1][x] = smap[y][x] + turn;		//a次の歩数を書き込む
 8008ed6:	7fba      	ldrb	r2, [r7, #30]
 8008ed8:	7ffb      	ldrb	r3, [r7, #31]
 8008eda:	4958      	ldr	r1, [pc, #352]	; (800903c <make_smap+0x238>)
 8008edc:	0112      	lsls	r2, r2, #4
 8008ede:	4413      	add	r3, r2
 8008ee0:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 8008ee4:	697b      	ldr	r3, [r7, #20]
 8008ee6:	b299      	uxth	r1, r3
 8008ee8:	7fbb      	ldrb	r3, [r7, #30]
 8008eea:	1c5a      	adds	r2, r3, #1
 8008eec:	7ffb      	ldrb	r3, [r7, #31]
 8008eee:	4401      	add	r1, r0
 8008ef0:	b288      	uxth	r0, r1
 8008ef2:	4952      	ldr	r1, [pc, #328]	; (800903c <make_smap+0x238>)
 8008ef4:	0112      	lsls	r2, r2, #4
 8008ef6:	4413      	add	r3, r2
 8008ef8:	4602      	mov	r2, r0
 8008efa:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
								}
							}
*/						}
					}
					//----a東壁についての処理----
					if(!(m_temp & 0x04) && x != 15){		//a東壁がなく現在最東端でないとき
 8008efe:	7f7b      	ldrb	r3, [r7, #29]
 8008f00:	f003 0304 	and.w	r3, r3, #4
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d120      	bne.n	8008f4a <make_smap+0x146>
 8008f08:	7ffb      	ldrb	r3, [r7, #31]
 8008f0a:	2b0f      	cmp	r3, #15
 8008f0c:	d01d      	beq.n	8008f4a <make_smap+0x146>
						if(smap[y][x+1] == 0x03e7){			//a東側が未記入なら
 8008f0e:	7fba      	ldrb	r2, [r7, #30]
 8008f10:	7ffb      	ldrb	r3, [r7, #31]
 8008f12:	3301      	adds	r3, #1
 8008f14:	4949      	ldr	r1, [pc, #292]	; (800903c <make_smap+0x238>)
 8008f16:	0112      	lsls	r2, r2, #4
 8008f18:	4413      	add	r3, r2
 8008f1a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8008f1e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8008f22:	4293      	cmp	r3, r2
 8008f24:	d111      	bne.n	8008f4a <make_smap+0x146>
							smap[y][x+1] = smap[y][x] + 1;	//a次の歩数を書き込む
 8008f26:	7fba      	ldrb	r2, [r7, #30]
 8008f28:	7ffb      	ldrb	r3, [r7, #31]
 8008f2a:	4944      	ldr	r1, [pc, #272]	; (800903c <make_smap+0x238>)
 8008f2c:	0112      	lsls	r2, r2, #4
 8008f2e:	4413      	add	r3, r2
 8008f30:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
 8008f34:	7fba      	ldrb	r2, [r7, #30]
 8008f36:	7ffb      	ldrb	r3, [r7, #31]
 8008f38:	3301      	adds	r3, #1
 8008f3a:	3101      	adds	r1, #1
 8008f3c:	b288      	uxth	r0, r1
 8008f3e:	493f      	ldr	r1, [pc, #252]	; (800903c <make_smap+0x238>)
 8008f40:	0112      	lsls	r2, r2, #4
 8008f42:	4413      	add	r3, r2
 8008f44:	4602      	mov	r2, r0
 8008f46:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
								}
							}
*/						}
					}
					//----a南壁についての処理----
					if(!(m_temp & 0x02) && y != 0){			//a南壁がなく現在最南端でないとき
 8008f4a:	7f7b      	ldrb	r3, [r7, #29]
 8008f4c:	f003 0302 	and.w	r3, r3, #2
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d120      	bne.n	8008f96 <make_smap+0x192>
 8008f54:	7fbb      	ldrb	r3, [r7, #30]
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d01d      	beq.n	8008f96 <make_smap+0x192>
						if(smap[y-1][x] == 0x03e7){			//a南側が未記入なら
 8008f5a:	7fbb      	ldrb	r3, [r7, #30]
 8008f5c:	1e5a      	subs	r2, r3, #1
 8008f5e:	7ffb      	ldrb	r3, [r7, #31]
 8008f60:	4936      	ldr	r1, [pc, #216]	; (800903c <make_smap+0x238>)
 8008f62:	0112      	lsls	r2, r2, #4
 8008f64:	4413      	add	r3, r2
 8008f66:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8008f6a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8008f6e:	4293      	cmp	r3, r2
 8008f70:	d111      	bne.n	8008f96 <make_smap+0x192>
							smap[y-1][x] = smap[y][x] + 1;	//a次の歩数を書き込む
 8008f72:	7fba      	ldrb	r2, [r7, #30]
 8008f74:	7ffb      	ldrb	r3, [r7, #31]
 8008f76:	4931      	ldr	r1, [pc, #196]	; (800903c <make_smap+0x238>)
 8008f78:	0112      	lsls	r2, r2, #4
 8008f7a:	4413      	add	r3, r2
 8008f7c:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
 8008f80:	7fbb      	ldrb	r3, [r7, #30]
 8008f82:	1e5a      	subs	r2, r3, #1
 8008f84:	7ffb      	ldrb	r3, [r7, #31]
 8008f86:	3101      	adds	r1, #1
 8008f88:	b288      	uxth	r0, r1
 8008f8a:	492c      	ldr	r1, [pc, #176]	; (800903c <make_smap+0x238>)
 8008f8c:	0112      	lsls	r2, r2, #4
 8008f8e:	4413      	add	r3, r2
 8008f90:	4602      	mov	r2, r0
 8008f92:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
								}
							}
*/						}
					}
					//----a西壁についての処理----
					if(!(m_temp & 0x01) && x != 0){			//a西壁がなく現在最西端でないとき
 8008f96:	7f7b      	ldrb	r3, [r7, #29]
 8008f98:	f003 0301 	and.w	r3, r3, #1
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d120      	bne.n	8008fe2 <make_smap+0x1de>
 8008fa0:	7ffb      	ldrb	r3, [r7, #31]
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d01d      	beq.n	8008fe2 <make_smap+0x1de>
						if(smap[y][x-1] == 0x03e7){			//a西側が未記入なら
 8008fa6:	7fba      	ldrb	r2, [r7, #30]
 8008fa8:	7ffb      	ldrb	r3, [r7, #31]
 8008faa:	3b01      	subs	r3, #1
 8008fac:	4923      	ldr	r1, [pc, #140]	; (800903c <make_smap+0x238>)
 8008fae:	0112      	lsls	r2, r2, #4
 8008fb0:	4413      	add	r3, r2
 8008fb2:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8008fb6:	f240 32e7 	movw	r2, #999	; 0x3e7
 8008fba:	4293      	cmp	r3, r2
 8008fbc:	d111      	bne.n	8008fe2 <make_smap+0x1de>
							smap[y][x-1] = smap[y][x] + 1;	//a次の歩数を書き込む
 8008fbe:	7fba      	ldrb	r2, [r7, #30]
 8008fc0:	7ffb      	ldrb	r3, [r7, #31]
 8008fc2:	491e      	ldr	r1, [pc, #120]	; (800903c <make_smap+0x238>)
 8008fc4:	0112      	lsls	r2, r2, #4
 8008fc6:	4413      	add	r3, r2
 8008fc8:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
 8008fcc:	7fba      	ldrb	r2, [r7, #30]
 8008fce:	7ffb      	ldrb	r3, [r7, #31]
 8008fd0:	3b01      	subs	r3, #1
 8008fd2:	3101      	adds	r1, #1
 8008fd4:	b288      	uxth	r0, r1
 8008fd6:	4919      	ldr	r1, [pc, #100]	; (800903c <make_smap+0x238>)
 8008fd8:	0112      	lsls	r2, r2, #4
 8008fda:	4413      	add	r3, r2
 8008fdc:	4602      	mov	r2, r0
 8008fde:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			for(x = 0; x <= 15; x++){						//a各X座標で実行
 8008fe2:	7ffb      	ldrb	r3, [r7, #31]
 8008fe4:	3301      	adds	r3, #1
 8008fe6:	77fb      	strb	r3, [r7, #31]
 8008fe8:	7ffb      	ldrb	r3, [r7, #31]
 8008fea:	2b0f      	cmp	r3, #15
 8008fec:	f67f af41 	bls.w	8008e72 <make_smap+0x6e>
		for(y = 0; y <= 15; y++){							//a各Y座標で実行
 8008ff0:	7fbb      	ldrb	r3, [r7, #30]
 8008ff2:	3301      	adds	r3, #1
 8008ff4:	77bb      	strb	r3, [r7, #30]
 8008ff6:	7fbb      	ldrb	r3, [r7, #30]
 8008ff8:	2b0f      	cmp	r3, #15
 8008ffa:	f67f af37 	bls.w	8008e6c <make_smap+0x68>
					}
				}
			}
		}
		//====a歩数カウンタのインクリメント====
		m_step++;
 8008ffe:	4b10      	ldr	r3, [pc, #64]	; (8009040 <make_smap+0x23c>)
 8009000:	881b      	ldrh	r3, [r3, #0]
 8009002:	3301      	adds	r3, #1
 8009004:	b29a      	uxth	r2, r3
 8009006:	4b0e      	ldr	r3, [pc, #56]	; (8009040 <make_smap+0x23c>)
 8009008:	801a      	strh	r2, [r3, #0]
	}while(smap[mouse.y][mouse.x] == 0x03e7);					//a現在座標が未記入ではなくなるまで実行
 800900a:	4b12      	ldr	r3, [pc, #72]	; (8009054 <make_smap+0x250>)
 800900c:	785b      	ldrb	r3, [r3, #1]
 800900e:	b2db      	uxtb	r3, r3
 8009010:	4618      	mov	r0, r3
 8009012:	4b10      	ldr	r3, [pc, #64]	; (8009054 <make_smap+0x250>)
 8009014:	781b      	ldrb	r3, [r3, #0]
 8009016:	b2db      	uxtb	r3, r3
 8009018:	4619      	mov	r1, r3
 800901a:	4a08      	ldr	r2, [pc, #32]	; (800903c <make_smap+0x238>)
 800901c:	0103      	lsls	r3, r0, #4
 800901e:	440b      	add	r3, r1
 8009020:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009024:	f240 32e7 	movw	r2, #999	; 0x3e7
 8009028:	4293      	cmp	r3, r2
 800902a:	f43f af1c 	beq.w	8008e66 <make_smap+0x62>
}
 800902e:	bf00      	nop
 8009030:	3724      	adds	r7, #36	; 0x24
 8009032:	46bd      	mov	sp, r7
 8009034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009038:	4770      	bx	lr
 800903a:	bf00      	nop
 800903c:	20000c14 	.word	0x20000c14
 8009040:	20000322 	.word	0x20000322
 8009044:	20000a14 	.word	0x20000a14
 8009048:	20000a70 	.word	0x20000a70
 800904c:	20000184 	.word	0x20000184
 8009050:	20000e18 	.word	0x20000e18
 8009054:	20000ac8 	.word	0x20000ac8

08009058 <make_route>:
//make_route
//a最短経路を導出する
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void make_route(){
 8009058:	b580      	push	{r7, lr}
 800905a:	b082      	sub	sp, #8
 800905c:	af00      	add	r7, sp, #0

	//====a変数宣言====
	uint8_t x, y;												//X，Y座標
	uint8_t dir_temp =  mouse.dir;								//aマウスの方角を表すmouse.dirの値をdir_temp変数に退避させる
 800905e:	4b90      	ldr	r3, [pc, #576]	; (80092a0 <make_route+0x248>)
 8009060:	789b      	ldrb	r3, [r3, #2]
 8009062:	703b      	strb	r3, [r7, #0]

	//====a最短経路を初期化====
	uint16_t i;
	for(i = 0; i < 256; i++){
 8009064:	2300      	movs	r3, #0
 8009066:	80bb      	strh	r3, [r7, #4]
 8009068:	e006      	b.n	8009078 <make_route+0x20>
		route[i] = 0xff;										//routeを0xffで初期化
 800906a:	88bb      	ldrh	r3, [r7, #4]
 800906c:	4a8d      	ldr	r2, [pc, #564]	; (80092a4 <make_route+0x24c>)
 800906e:	21ff      	movs	r1, #255	; 0xff
 8009070:	54d1      	strb	r1, [r2, r3]
	for(i = 0; i < 256; i++){
 8009072:	88bb      	ldrh	r3, [r7, #4]
 8009074:	3301      	adds	r3, #1
 8009076:	80bb      	strh	r3, [r7, #4]
 8009078:	88bb      	ldrh	r3, [r7, #4]
 800907a:	2bff      	cmp	r3, #255	; 0xff
 800907c:	d9f5      	bls.n	800906a <make_route+0x12>
	}

	//====a歩数カウンタをセット====
	uint16_t m_step = smap[mouse.y][mouse.x];					//a現在座標の歩数マップ値を取得
 800907e:	4b88      	ldr	r3, [pc, #544]	; (80092a0 <make_route+0x248>)
 8009080:	785b      	ldrb	r3, [r3, #1]
 8009082:	b2db      	uxtb	r3, r3
 8009084:	4618      	mov	r0, r3
 8009086:	4b86      	ldr	r3, [pc, #536]	; (80092a0 <make_route+0x248>)
 8009088:	781b      	ldrb	r3, [r3, #0]
 800908a:	b2db      	uxtb	r3, r3
 800908c:	4619      	mov	r1, r3
 800908e:	4a86      	ldr	r2, [pc, #536]	; (80092a8 <make_route+0x250>)
 8009090:	0103      	lsls	r3, r0, #4
 8009092:	440b      	add	r3, r1
 8009094:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009098:	807b      	strh	r3, [r7, #2]

	//====x, yに現在座標を書き込み====
	x = mouse.x;
 800909a:	4b81      	ldr	r3, [pc, #516]	; (80092a0 <make_route+0x248>)
 800909c:	781b      	ldrb	r3, [r3, #0]
 800909e:	71fb      	strb	r3, [r7, #7]
	y = mouse.y;
 80090a0:	4b7f      	ldr	r3, [pc, #508]	; (80092a0 <make_route+0x248>)
 80090a2:	785b      	ldrb	r3, [r3, #1]
 80090a4:	71bb      	strb	r3, [r7, #6]

	//====a最短経路を導出====
	i = 0;
 80090a6:	2300      	movs	r3, #0
 80090a8:	80bb      	strh	r3, [r7, #4]
	do{
		uint8_t m_temp = map[y][x];								//a比較用マップ情報の格納
 80090aa:	79ba      	ldrb	r2, [r7, #6]
 80090ac:	79fb      	ldrb	r3, [r7, #7]
 80090ae:	497f      	ldr	r1, [pc, #508]	; (80092ac <make_route+0x254>)
 80090b0:	0112      	lsls	r2, r2, #4
 80090b2:	440a      	add	r2, r1
 80090b4:	4413      	add	r3, r2
 80090b6:	781b      	ldrb	r3, [r3, #0]
 80090b8:	707b      	strb	r3, [r7, #1]
		if(MF.FLAG.SCND){										//a二次走行用のマップを作成する場合（二次走行時はMF.FLAG.SCNDが立っている）
 80090ba:	4b7d      	ldr	r3, [pc, #500]	; (80092b0 <make_route+0x258>)
 80090bc:	881b      	ldrh	r3, [r3, #0]
 80090be:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80090c2:	b2db      	uxtb	r3, r3
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d002      	beq.n	80090ce <make_route+0x76>
			m_temp >>= 4;										//a上位4bitを使うので4bit分右にシフトさせる
 80090c8:	787b      	ldrb	r3, [r7, #1]
 80090ca:	091b      	lsrs	r3, r3, #4
 80090cc:	707b      	strb	r3, [r7, #1]
		}
		//----a北を見る----
		if(!(m_temp & 0x08) && (smap[y+1][x] < m_step)){		//a北側に壁が無く、現在地より小さい歩数マップ値であれば
 80090ce:	787b      	ldrb	r3, [r7, #1]
 80090d0:	f003 0308 	and.w	r3, r3, #8
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d122      	bne.n	800911e <make_route+0xc6>
 80090d8:	79bb      	ldrb	r3, [r7, #6]
 80090da:	1c5a      	adds	r2, r3, #1
 80090dc:	79fb      	ldrb	r3, [r7, #7]
 80090de:	4972      	ldr	r1, [pc, #456]	; (80092a8 <make_route+0x250>)
 80090e0:	0112      	lsls	r2, r2, #4
 80090e2:	4413      	add	r3, r2
 80090e4:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80090e8:	887a      	ldrh	r2, [r7, #2]
 80090ea:	429a      	cmp	r2, r3
 80090ec:	d917      	bls.n	800911e <make_route+0xc6>
			route[i] = (0x00 - mouse.dir) & 0x03;				//route配列に進行方向を記録
 80090ee:	4b6c      	ldr	r3, [pc, #432]	; (80092a0 <make_route+0x248>)
 80090f0:	789b      	ldrb	r3, [r3, #2]
 80090f2:	b2db      	uxtb	r3, r3
 80090f4:	425b      	negs	r3, r3
 80090f6:	b2da      	uxtb	r2, r3
 80090f8:	88bb      	ldrh	r3, [r7, #4]
 80090fa:	f002 0203 	and.w	r2, r2, #3
 80090fe:	b2d1      	uxtb	r1, r2
 8009100:	4a68      	ldr	r2, [pc, #416]	; (80092a4 <make_route+0x24c>)
 8009102:	54d1      	strb	r1, [r2, r3]
			m_step = smap[y+1][x];								//a最大歩数マップ値を更新
 8009104:	79bb      	ldrb	r3, [r7, #6]
 8009106:	1c5a      	adds	r2, r3, #1
 8009108:	79fb      	ldrb	r3, [r7, #7]
 800910a:	4967      	ldr	r1, [pc, #412]	; (80092a8 <make_route+0x250>)
 800910c:	0112      	lsls	r2, r2, #4
 800910e:	4413      	add	r3, r2
 8009110:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8009114:	807b      	strh	r3, [r7, #2]
			y++;												//a北に進んだのでY座標をインクリメント
 8009116:	79bb      	ldrb	r3, [r7, #6]
 8009118:	3301      	adds	r3, #1
 800911a:	71bb      	strb	r3, [r7, #6]
 800911c:	e079      	b.n	8009212 <make_route+0x1ba>
		}
		//----a東を見る----
		else if(!(m_temp & 0x04) && (smap[y][x+1] < m_step)){	//a東側に壁が無く、現在地より小さい歩数マップ値であれば
 800911e:	787b      	ldrb	r3, [r7, #1]
 8009120:	f003 0304 	and.w	r3, r3, #4
 8009124:	2b00      	cmp	r3, #0
 8009126:	d123      	bne.n	8009170 <make_route+0x118>
 8009128:	79ba      	ldrb	r2, [r7, #6]
 800912a:	79fb      	ldrb	r3, [r7, #7]
 800912c:	3301      	adds	r3, #1
 800912e:	495e      	ldr	r1, [pc, #376]	; (80092a8 <make_route+0x250>)
 8009130:	0112      	lsls	r2, r2, #4
 8009132:	4413      	add	r3, r2
 8009134:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8009138:	887a      	ldrh	r2, [r7, #2]
 800913a:	429a      	cmp	r2, r3
 800913c:	d918      	bls.n	8009170 <make_route+0x118>
			route[i] = (0x01 - mouse.dir) & 0x03;				//route配列に進行方向を記録
 800913e:	4b58      	ldr	r3, [pc, #352]	; (80092a0 <make_route+0x248>)
 8009140:	789b      	ldrb	r3, [r3, #2]
 8009142:	b2db      	uxtb	r3, r3
 8009144:	f1c3 0301 	rsb	r3, r3, #1
 8009148:	b2da      	uxtb	r2, r3
 800914a:	88bb      	ldrh	r3, [r7, #4]
 800914c:	f002 0203 	and.w	r2, r2, #3
 8009150:	b2d1      	uxtb	r1, r2
 8009152:	4a54      	ldr	r2, [pc, #336]	; (80092a4 <make_route+0x24c>)
 8009154:	54d1      	strb	r1, [r2, r3]
			m_step = smap[y][x+1];								//a最大歩数マップ値を更新
 8009156:	79ba      	ldrb	r2, [r7, #6]
 8009158:	79fb      	ldrb	r3, [r7, #7]
 800915a:	3301      	adds	r3, #1
 800915c:	4952      	ldr	r1, [pc, #328]	; (80092a8 <make_route+0x250>)
 800915e:	0112      	lsls	r2, r2, #4
 8009160:	4413      	add	r3, r2
 8009162:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8009166:	807b      	strh	r3, [r7, #2]
			x++;												//a東に進んだのでX座標をインクリメント
 8009168:	79fb      	ldrb	r3, [r7, #7]
 800916a:	3301      	adds	r3, #1
 800916c:	71fb      	strb	r3, [r7, #7]
 800916e:	e050      	b.n	8009212 <make_route+0x1ba>
		}
		//----a南を見る----
		else if(!(m_temp & 0x02) && (smap[y-1][x] < m_step)){	//a南側に壁が無く、現在地より小さい歩数マップ値であれば
 8009170:	787b      	ldrb	r3, [r7, #1]
 8009172:	f003 0302 	and.w	r3, r3, #2
 8009176:	2b00      	cmp	r3, #0
 8009178:	d123      	bne.n	80091c2 <make_route+0x16a>
 800917a:	79bb      	ldrb	r3, [r7, #6]
 800917c:	1e5a      	subs	r2, r3, #1
 800917e:	79fb      	ldrb	r3, [r7, #7]
 8009180:	4949      	ldr	r1, [pc, #292]	; (80092a8 <make_route+0x250>)
 8009182:	0112      	lsls	r2, r2, #4
 8009184:	4413      	add	r3, r2
 8009186:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800918a:	887a      	ldrh	r2, [r7, #2]
 800918c:	429a      	cmp	r2, r3
 800918e:	d918      	bls.n	80091c2 <make_route+0x16a>
			route[i] = (0x02 - mouse.dir) & 0x03;				//route配列に進行方向を記録
 8009190:	4b43      	ldr	r3, [pc, #268]	; (80092a0 <make_route+0x248>)
 8009192:	789b      	ldrb	r3, [r3, #2]
 8009194:	b2db      	uxtb	r3, r3
 8009196:	f1c3 0302 	rsb	r3, r3, #2
 800919a:	b2da      	uxtb	r2, r3
 800919c:	88bb      	ldrh	r3, [r7, #4]
 800919e:	f002 0203 	and.w	r2, r2, #3
 80091a2:	b2d1      	uxtb	r1, r2
 80091a4:	4a3f      	ldr	r2, [pc, #252]	; (80092a4 <make_route+0x24c>)
 80091a6:	54d1      	strb	r1, [r2, r3]
			m_step = smap[y-1][x];								//a最大歩数マップ値を更新
 80091a8:	79bb      	ldrb	r3, [r7, #6]
 80091aa:	1e5a      	subs	r2, r3, #1
 80091ac:	79fb      	ldrb	r3, [r7, #7]
 80091ae:	493e      	ldr	r1, [pc, #248]	; (80092a8 <make_route+0x250>)
 80091b0:	0112      	lsls	r2, r2, #4
 80091b2:	4413      	add	r3, r2
 80091b4:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80091b8:	807b      	strh	r3, [r7, #2]
			y--;												//a南に進んだのでY座標をデクリメント
 80091ba:	79bb      	ldrb	r3, [r7, #6]
 80091bc:	3b01      	subs	r3, #1
 80091be:	71bb      	strb	r3, [r7, #6]
 80091c0:	e027      	b.n	8009212 <make_route+0x1ba>
		}
		//----a西を見る----
		else if(!(m_temp & 0x01) && (smap[y][x-1] < m_step)){	//a西側に壁が無く、現在地より小さい歩数マップ値であれば
 80091c2:	787b      	ldrb	r3, [r7, #1]
 80091c4:	f003 0301 	and.w	r3, r3, #1
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d122      	bne.n	8009212 <make_route+0x1ba>
 80091cc:	79ba      	ldrb	r2, [r7, #6]
 80091ce:	79fb      	ldrb	r3, [r7, #7]
 80091d0:	3b01      	subs	r3, #1
 80091d2:	4935      	ldr	r1, [pc, #212]	; (80092a8 <make_route+0x250>)
 80091d4:	0112      	lsls	r2, r2, #4
 80091d6:	4413      	add	r3, r2
 80091d8:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80091dc:	887a      	ldrh	r2, [r7, #2]
 80091de:	429a      	cmp	r2, r3
 80091e0:	d917      	bls.n	8009212 <make_route+0x1ba>
			route[i] = (0x03 - mouse.dir) & 0x03;				//route配列に進行方向を記録
 80091e2:	4b2f      	ldr	r3, [pc, #188]	; (80092a0 <make_route+0x248>)
 80091e4:	789b      	ldrb	r3, [r3, #2]
 80091e6:	b2db      	uxtb	r3, r3
 80091e8:	f1c3 0303 	rsb	r3, r3, #3
 80091ec:	b2da      	uxtb	r2, r3
 80091ee:	88bb      	ldrh	r3, [r7, #4]
 80091f0:	f002 0203 	and.w	r2, r2, #3
 80091f4:	b2d1      	uxtb	r1, r2
 80091f6:	4a2b      	ldr	r2, [pc, #172]	; (80092a4 <make_route+0x24c>)
 80091f8:	54d1      	strb	r1, [r2, r3]
			m_step = smap[y][x-1];								//a最大歩数マップ値を更新
 80091fa:	79ba      	ldrb	r2, [r7, #6]
 80091fc:	79fb      	ldrb	r3, [r7, #7]
 80091fe:	3b01      	subs	r3, #1
 8009200:	4929      	ldr	r1, [pc, #164]	; (80092a8 <make_route+0x250>)
 8009202:	0112      	lsls	r2, r2, #4
 8009204:	4413      	add	r3, r2
 8009206:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800920a:	807b      	strh	r3, [r7, #2]
			x--;												//a西に進んだのでX座標をデクリメント
 800920c:	79fb      	ldrb	r3, [r7, #7]
 800920e:	3b01      	subs	r3, #1
 8009210:	71fb      	strb	r3, [r7, #7]
				y--;												//a南に進んだのでY座標をデクリメント
			}*/

		}
		//----a格納データ形式変更----
		switch(route[i]){										//route配列に格納した要素値で分岐
 8009212:	88bb      	ldrh	r3, [r7, #4]
 8009214:	4a23      	ldr	r2, [pc, #140]	; (80092a4 <make_route+0x24c>)
 8009216:	5cd3      	ldrb	r3, [r2, r3]
 8009218:	2b03      	cmp	r3, #3
 800921a:	d828      	bhi.n	800926e <make_route+0x216>
 800921c:	a201      	add	r2, pc, #4	; (adr r2, 8009224 <make_route+0x1cc>)
 800921e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009222:	bf00      	nop
 8009224:	08009235 	.word	0x08009235
 8009228:	0800923f 	.word	0x0800923f
 800922c:	0800924f 	.word	0x0800924f
 8009230:	0800925f 	.word	0x0800925f
		case 0x00:												//a前進する場合
			route[i] = 0x88;									//a格納データ形式を変更
 8009234:	88bb      	ldrh	r3, [r7, #4]
 8009236:	4a1b      	ldr	r2, [pc, #108]	; (80092a4 <make_route+0x24c>)
 8009238:	2188      	movs	r1, #136	; 0x88
 800923a:	54d1      	strb	r1, [r2, r3]
			break;
 800923c:	e01c      	b.n	8009278 <make_route+0x220>
		case 0x01:												//a右折する場合
			turn_dir(DIR_TURN_R90);								//a内部情報の方向を90度右回転
 800923e:	2001      	movs	r0, #1
 8009240:	f7ff fdc8 	bl	8008dd4 <turn_dir>
			route[i] = 0x44;									//a格納データ形式を変更
 8009244:	88bb      	ldrh	r3, [r7, #4]
 8009246:	4a17      	ldr	r2, [pc, #92]	; (80092a4 <make_route+0x24c>)
 8009248:	2144      	movs	r1, #68	; 0x44
 800924a:	54d1      	strb	r1, [r2, r3]
			break;
 800924c:	e014      	b.n	8009278 <make_route+0x220>
		case 0x02:												//Uターンする場合
			turn_dir(DIR_TURN_180);								//a内部情報の方向を180度回転
 800924e:	2002      	movs	r0, #2
 8009250:	f7ff fdc0 	bl	8008dd4 <turn_dir>
			route[i] = 0x22;									//a格納データ形式を変更
 8009254:	88bb      	ldrh	r3, [r7, #4]
 8009256:	4a13      	ldr	r2, [pc, #76]	; (80092a4 <make_route+0x24c>)
 8009258:	2122      	movs	r1, #34	; 0x22
 800925a:	54d1      	strb	r1, [r2, r3]
			break;
 800925c:	e00c      	b.n	8009278 <make_route+0x220>
		case 0x03:												//a左折する場合
			turn_dir(DIR_TURN_L90);								//a内部情報の方向を90度右回転
 800925e:	20ff      	movs	r0, #255	; 0xff
 8009260:	f7ff fdb8 	bl	8008dd4 <turn_dir>
			route[i] = 0x11;									//a格納データ形式を変更
 8009264:	88bb      	ldrh	r3, [r7, #4]
 8009266:	4a0f      	ldr	r2, [pc, #60]	; (80092a4 <make_route+0x24c>)
 8009268:	2111      	movs	r1, #17
 800926a:	54d1      	strb	r1, [r2, r3]
			break;
 800926c:	e004      	b.n	8009278 <make_route+0x220>
		default:												//aそれ以外の場合
			route[i] = 0x00;									//a格納データ形式を変更
 800926e:	88bb      	ldrh	r3, [r7, #4]
 8009270:	4a0c      	ldr	r2, [pc, #48]	; (80092a4 <make_route+0x24c>)
 8009272:	2100      	movs	r1, #0
 8009274:	54d1      	strb	r1, [r2, r3]
			break;
 8009276:	bf00      	nop
		}
		i++;													//aカウンタをインクリメント
 8009278:	88bb      	ldrh	r3, [r7, #4]
 800927a:	3301      	adds	r3, #1
 800927c:	80bb      	strh	r3, [r7, #4]
	}while(smap[y][x] != 0);									//a進んだ先の歩数マップ値が0（=ゴール）になるまで実行
 800927e:	79ba      	ldrb	r2, [r7, #6]
 8009280:	79fb      	ldrb	r3, [r7, #7]
 8009282:	4909      	ldr	r1, [pc, #36]	; (80092a8 <make_route+0x250>)
 8009284:	0112      	lsls	r2, r2, #4
 8009286:	4413      	add	r3, r2
 8009288:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800928c:	2b00      	cmp	r3, #0
 800928e:	f47f af0c 	bne.w	80090aa <make_route+0x52>
	mouse.dir = dir_temp;										//dir_tempに退避させた値をmouse.dirにリストア
 8009292:	4a03      	ldr	r2, [pc, #12]	; (80092a0 <make_route+0x248>)
 8009294:	783b      	ldrb	r3, [r7, #0]
 8009296:	7093      	strb	r3, [r2, #2]
}
 8009298:	bf00      	nop
 800929a:	3708      	adds	r7, #8
 800929c:	46bd      	mov	sp, r7
 800929e:	bd80      	pop	{r7, pc}
 80092a0:	20000ac8 	.word	0x20000ac8
 80092a4:	20000b0c 	.word	0x20000b0c
 80092a8:	20000c14 	.word	0x20000c14
 80092ac:	20000184 	.word	0x20000184
 80092b0:	20000e18 	.word	0x20000e18

080092b4 <store_map_in_eeprom>:
//store_map_in_eeprom
// mapデータをeepromに格納する
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void store_map_in_eeprom(void){
 80092b4:	b580      	push	{r7, lr}
 80092b6:	b082      	sub	sp, #8
 80092b8:	af00      	add	r7, sp, #0
	printf("eprom func start \n");
 80092ba:	4818      	ldr	r0, [pc, #96]	; (800931c <store_map_in_eeprom+0x68>)
 80092bc:	f000 fd08 	bl	8009cd0 <puts>
	eeprom_enable_write();
 80092c0:	f7fd fb0e 	bl	80068e0 <eeprom_enable_write>
	printf("eprom enable_write fin \n");
 80092c4:	4816      	ldr	r0, [pc, #88]	; (8009320 <store_map_in_eeprom+0x6c>)
 80092c6:	f000 fd03 	bl	8009cd0 <puts>
	int i;
	for(i = 0; i < 16; i++){
 80092ca:	2300      	movs	r3, #0
 80092cc:	607b      	str	r3, [r7, #4]
 80092ce:	e01b      	b.n	8009308 <store_map_in_eeprom+0x54>
		int j;
		for(j = 0; j < 16; j++){
 80092d0:	2300      	movs	r3, #0
 80092d2:	603b      	str	r3, [r7, #0]
 80092d4:	e012      	b.n	80092fc <store_map_in_eeprom+0x48>
			eeprom_write_halfword(i*16 + j, (uint16_t) map[i][j]);
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	011a      	lsls	r2, r3, #4
 80092da:	683b      	ldr	r3, [r7, #0]
 80092dc:	4413      	add	r3, r2
 80092de:	4618      	mov	r0, r3
 80092e0:	4a10      	ldr	r2, [pc, #64]	; (8009324 <store_map_in_eeprom+0x70>)
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	011b      	lsls	r3, r3, #4
 80092e6:	441a      	add	r2, r3
 80092e8:	683b      	ldr	r3, [r7, #0]
 80092ea:	4413      	add	r3, r2
 80092ec:	781b      	ldrb	r3, [r3, #0]
 80092ee:	b29b      	uxth	r3, r3
 80092f0:	4619      	mov	r1, r3
 80092f2:	f7fd fb20 	bl	8006936 <eeprom_write_halfword>
		for(j = 0; j < 16; j++){
 80092f6:	683b      	ldr	r3, [r7, #0]
 80092f8:	3301      	adds	r3, #1
 80092fa:	603b      	str	r3, [r7, #0]
 80092fc:	683b      	ldr	r3, [r7, #0]
 80092fe:	2b0f      	cmp	r3, #15
 8009300:	dde9      	ble.n	80092d6 <store_map_in_eeprom+0x22>
	for(i = 0; i < 16; i++){
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	3301      	adds	r3, #1
 8009306:	607b      	str	r3, [r7, #4]
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	2b0f      	cmp	r3, #15
 800930c:	dde0      	ble.n	80092d0 <store_map_in_eeprom+0x1c>
		}
	}
	eeprom_disable_write();
 800930e:	f7fd fb0b 	bl	8006928 <eeprom_disable_write>
}
 8009312:	bf00      	nop
 8009314:	3708      	adds	r7, #8
 8009316:	46bd      	mov	sp, r7
 8009318:	bd80      	pop	{r7, pc}
 800931a:	bf00      	nop
 800931c:	0800b0b8 	.word	0x0800b0b8
 8009320:	0800b0cc 	.word	0x0800b0cc
 8009324:	20000184 	.word	0x20000184

08009328 <load_map_from_eeprom>:
//load_map_in_eeprom
// mapデータをeepromから取得する
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void load_map_from_eeprom(void){
 8009328:	b580      	push	{r7, lr}
 800932a:	b082      	sub	sp, #8
 800932c:	af00      	add	r7, sp, #0
	int i;
	for(i = 0; i < 16; i++){
 800932e:	2300      	movs	r3, #0
 8009330:	607b      	str	r3, [r7, #4]
 8009332:	e01c      	b.n	800936e <load_map_from_eeprom+0x46>
		int j;
		for(j = 0; j < 16; j++){
 8009334:	2300      	movs	r3, #0
 8009336:	603b      	str	r3, [r7, #0]
 8009338:	e013      	b.n	8009362 <load_map_from_eeprom+0x3a>
			map[i][j] = (uint8_t) eeprom_read_halfword(i*16 + j);
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	011a      	lsls	r2, r3, #4
 800933e:	683b      	ldr	r3, [r7, #0]
 8009340:	4413      	add	r3, r2
 8009342:	4618      	mov	r0, r3
 8009344:	f7fd fb14 	bl	8006970 <eeprom_read_halfword>
 8009348:	4603      	mov	r3, r0
 800934a:	b2d9      	uxtb	r1, r3
 800934c:	4a0b      	ldr	r2, [pc, #44]	; (800937c <load_map_from_eeprom+0x54>)
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	011b      	lsls	r3, r3, #4
 8009352:	441a      	add	r2, r3
 8009354:	683b      	ldr	r3, [r7, #0]
 8009356:	4413      	add	r3, r2
 8009358:	460a      	mov	r2, r1
 800935a:	701a      	strb	r2, [r3, #0]
		for(j = 0; j < 16; j++){
 800935c:	683b      	ldr	r3, [r7, #0]
 800935e:	3301      	adds	r3, #1
 8009360:	603b      	str	r3, [r7, #0]
 8009362:	683b      	ldr	r3, [r7, #0]
 8009364:	2b0f      	cmp	r3, #15
 8009366:	dde8      	ble.n	800933a <load_map_from_eeprom+0x12>
	for(i = 0; i < 16; i++){
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	3301      	adds	r3, #1
 800936c:	607b      	str	r3, [r7, #4]
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	2b0f      	cmp	r3, #15
 8009372:	dddf      	ble.n	8009334 <load_map_from_eeprom+0xc>
		}
	}
}
 8009374:	bf00      	nop
 8009376:	3708      	adds	r7, #8
 8009378:	46bd      	mov	sp, r7
 800937a:	bd80      	pop	{r7, pc}
 800937c:	20000184 	.word	0x20000184

08009380 <sensor_init>:

#include "global.h"


void sensor_init(void){
 8009380:	b480      	push	{r7}
 8009382:	af00      	add	r7, sp, #0

	tp = 0;
 8009384:	4b0e      	ldr	r3, [pc, #56]	; (80093c0 <sensor_init+0x40>)
 8009386:	2200      	movs	r2, #0
 8009388:	701a      	strb	r2, [r3, #0]
	ad_l = ad_r = ad_fr = ad_fl = 0;
 800938a:	4b0e      	ldr	r3, [pc, #56]	; (80093c4 <sensor_init+0x44>)
 800938c:	2200      	movs	r2, #0
 800938e:	601a      	str	r2, [r3, #0]
 8009390:	4b0c      	ldr	r3, [pc, #48]	; (80093c4 <sensor_init+0x44>)
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	4a0c      	ldr	r2, [pc, #48]	; (80093c8 <sensor_init+0x48>)
 8009396:	6013      	str	r3, [r2, #0]
 8009398:	4b0b      	ldr	r3, [pc, #44]	; (80093c8 <sensor_init+0x48>)
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	4a0b      	ldr	r2, [pc, #44]	; (80093cc <sensor_init+0x4c>)
 800939e:	6013      	str	r3, [r2, #0]
 80093a0:	4b0a      	ldr	r3, [pc, #40]	; (80093cc <sensor_init+0x4c>)
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	4a0a      	ldr	r2, [pc, #40]	; (80093d0 <sensor_init+0x50>)
 80093a6:	6013      	str	r3, [r2, #0]
	base_l = base_r = 0;
 80093a8:	4b0a      	ldr	r3, [pc, #40]	; (80093d4 <sensor_init+0x54>)
 80093aa:	2200      	movs	r2, #0
 80093ac:	801a      	strh	r2, [r3, #0]
 80093ae:	4b09      	ldr	r3, [pc, #36]	; (80093d4 <sensor_init+0x54>)
 80093b0:	881a      	ldrh	r2, [r3, #0]
 80093b2:	4b09      	ldr	r3, [pc, #36]	; (80093d8 <sensor_init+0x58>)
 80093b4:	801a      	strh	r2, [r3, #0]
}
 80093b6:	bf00      	nop
 80093b8:	46bd      	mov	sp, r7
 80093ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093be:	4770      	bx	lr
 80093c0:	20000e2b 	.word	0x20000e2b
 80093c4:	20000c0c 	.word	0x20000c0c
 80093c8:	20000ac0 	.word	0x20000ac0
 80093cc:	20000e14 	.word	0x20000e14
 80093d0:	200009c4 	.word	0x200009c4
 80093d4:	20000294 	.word	0x20000294
 80093d8:	20000320 	.word	0x20000320

080093dc <get_base>:


uint8_t get_base(){
 80093dc:	b480      	push	{r7}
 80093de:	b083      	sub	sp, #12
 80093e0:	af00      	add	r7, sp, #0
	uint8_t res = 1;									//for return
 80093e2:	2301      	movs	r3, #1
 80093e4:	71fb      	strb	r3, [r7, #7]

	base_l = ad_l;										//sensor value base L
 80093e6:	4b08      	ldr	r3, [pc, #32]	; (8009408 <get_base+0x2c>)
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	b29a      	uxth	r2, r3
 80093ec:	4b07      	ldr	r3, [pc, #28]	; (800940c <get_base+0x30>)
 80093ee:	801a      	strh	r2, [r3, #0]
	base_r = ad_r;										//sensor value base R
 80093f0:	4b07      	ldr	r3, [pc, #28]	; (8009410 <get_base+0x34>)
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	b29a      	uxth	r2, r3
 80093f6:	4b07      	ldr	r3, [pc, #28]	; (8009414 <get_base+0x38>)
 80093f8:	801a      	strh	r2, [r3, #0]

	return res;											//
 80093fa:	79fb      	ldrb	r3, [r7, #7]
}
 80093fc:	4618      	mov	r0, r3
 80093fe:	370c      	adds	r7, #12
 8009400:	46bd      	mov	sp, r7
 8009402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009406:	4770      	bx	lr
 8009408:	200009c4 	.word	0x200009c4
 800940c:	20000320 	.word	0x20000320
 8009410:	20000e14 	.word	0x20000e14
 8009414:	20000294 	.word	0x20000294

08009418 <get_wall_info>:


void get_wall_info(){
 8009418:	b480      	push	{r7}
 800941a:	af00      	add	r7, sp, #0

	//----reset----
	wall_info = 0x00;									//wall
 800941c:	4b16      	ldr	r3, [pc, #88]	; (8009478 <get_wall_info+0x60>)
 800941e:	2200      	movs	r2, #0
 8009420:	701a      	strb	r2, [r3, #0]
	//----look forward----
	if(ad_fr > WALL_BASE_FR || ad_fl > WALL_BASE_FL){
 8009422:	4b16      	ldr	r3, [pc, #88]	; (800947c <get_wall_info+0x64>)
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	2b28      	cmp	r3, #40	; 0x28
 8009428:	d803      	bhi.n	8009432 <get_wall_info+0x1a>
 800942a:	4b15      	ldr	r3, [pc, #84]	; (8009480 <get_wall_info+0x68>)
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	2b96      	cmp	r3, #150	; 0x96
 8009430:	d906      	bls.n	8009440 <get_wall_info+0x28>
		wall_info |= 0x88;								//forward check
 8009432:	4b11      	ldr	r3, [pc, #68]	; (8009478 <get_wall_info+0x60>)
 8009434:	781b      	ldrb	r3, [r3, #0]
 8009436:	f063 0377 	orn	r3, r3, #119	; 0x77
 800943a:	b2da      	uxtb	r2, r3
 800943c:	4b0e      	ldr	r3, [pc, #56]	; (8009478 <get_wall_info+0x60>)
 800943e:	701a      	strb	r2, [r3, #0]
	}
	//----look right----
	if(ad_r > WALL_BASE_R){
 8009440:	4b10      	ldr	r3, [pc, #64]	; (8009484 <get_wall_info+0x6c>)
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	2b32      	cmp	r3, #50	; 0x32
 8009446:	d906      	bls.n	8009456 <get_wall_info+0x3e>
		wall_info |= 0x44;								//right check
 8009448:	4b0b      	ldr	r3, [pc, #44]	; (8009478 <get_wall_info+0x60>)
 800944a:	781b      	ldrb	r3, [r3, #0]
 800944c:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8009450:	b2da      	uxtb	r2, r3
 8009452:	4b09      	ldr	r3, [pc, #36]	; (8009478 <get_wall_info+0x60>)
 8009454:	701a      	strb	r2, [r3, #0]
	}
	//----look left----
	if(ad_l > WALL_BASE_L){
 8009456:	4b0c      	ldr	r3, [pc, #48]	; (8009488 <get_wall_info+0x70>)
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	2b64      	cmp	r3, #100	; 0x64
 800945c:	d906      	bls.n	800946c <get_wall_info+0x54>
		wall_info |= 0x11;								//light check
 800945e:	4b06      	ldr	r3, [pc, #24]	; (8009478 <get_wall_info+0x60>)
 8009460:	781b      	ldrb	r3, [r3, #0]
 8009462:	f043 0311 	orr.w	r3, r3, #17
 8009466:	b2da      	uxtb	r2, r3
 8009468:	4b03      	ldr	r3, [pc, #12]	; (8009478 <get_wall_info+0x60>)
 800946a:	701a      	strb	r2, [r3, #0]
	}
}
 800946c:	bf00      	nop
 800946e:	46bd      	mov	sp, r7
 8009470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009474:	4770      	bx	lr
 8009476:	bf00      	nop
 8009478:	2000029c 	.word	0x2000029c
 800947c:	20000ac0 	.word	0x20000ac0
 8009480:	20000c0c 	.word	0x20000c0c
 8009484:	20000e14 	.word	0x20000e14
 8009488:	200009c4 	.word	0x200009c4

0800948c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800948c:	b480      	push	{r7}
 800948e:	b083      	sub	sp, #12
 8009490:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009492:	2300      	movs	r3, #0
 8009494:	607b      	str	r3, [r7, #4]
 8009496:	4b10      	ldr	r3, [pc, #64]	; (80094d8 <HAL_MspInit+0x4c>)
 8009498:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800949a:	4a0f      	ldr	r2, [pc, #60]	; (80094d8 <HAL_MspInit+0x4c>)
 800949c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80094a0:	6453      	str	r3, [r2, #68]	; 0x44
 80094a2:	4b0d      	ldr	r3, [pc, #52]	; (80094d8 <HAL_MspInit+0x4c>)
 80094a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80094a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80094aa:	607b      	str	r3, [r7, #4]
 80094ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80094ae:	2300      	movs	r3, #0
 80094b0:	603b      	str	r3, [r7, #0]
 80094b2:	4b09      	ldr	r3, [pc, #36]	; (80094d8 <HAL_MspInit+0x4c>)
 80094b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094b6:	4a08      	ldr	r2, [pc, #32]	; (80094d8 <HAL_MspInit+0x4c>)
 80094b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80094bc:	6413      	str	r3, [r2, #64]	; 0x40
 80094be:	4b06      	ldr	r3, [pc, #24]	; (80094d8 <HAL_MspInit+0x4c>)
 80094c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80094c6:	603b      	str	r3, [r7, #0]
 80094c8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80094ca:	bf00      	nop
 80094cc:	370c      	adds	r7, #12
 80094ce:	46bd      	mov	sp, r7
 80094d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094d4:	4770      	bx	lr
 80094d6:	bf00      	nop
 80094d8:	40023800 	.word	0x40023800

080094dc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80094dc:	b580      	push	{r7, lr}
 80094de:	b08a      	sub	sp, #40	; 0x28
 80094e0:	af00      	add	r7, sp, #0
 80094e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80094e4:	f107 0314 	add.w	r3, r7, #20
 80094e8:	2200      	movs	r2, #0
 80094ea:	601a      	str	r2, [r3, #0]
 80094ec:	605a      	str	r2, [r3, #4]
 80094ee:	609a      	str	r2, [r3, #8]
 80094f0:	60da      	str	r2, [r3, #12]
 80094f2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	4a17      	ldr	r2, [pc, #92]	; (8009558 <HAL_ADC_MspInit+0x7c>)
 80094fa:	4293      	cmp	r3, r2
 80094fc:	d127      	bne.n	800954e <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80094fe:	2300      	movs	r3, #0
 8009500:	613b      	str	r3, [r7, #16]
 8009502:	4b16      	ldr	r3, [pc, #88]	; (800955c <HAL_ADC_MspInit+0x80>)
 8009504:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009506:	4a15      	ldr	r2, [pc, #84]	; (800955c <HAL_ADC_MspInit+0x80>)
 8009508:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800950c:	6453      	str	r3, [r2, #68]	; 0x44
 800950e:	4b13      	ldr	r3, [pc, #76]	; (800955c <HAL_ADC_MspInit+0x80>)
 8009510:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009512:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009516:	613b      	str	r3, [r7, #16]
 8009518:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800951a:	2300      	movs	r3, #0
 800951c:	60fb      	str	r3, [r7, #12]
 800951e:	4b0f      	ldr	r3, [pc, #60]	; (800955c <HAL_ADC_MspInit+0x80>)
 8009520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009522:	4a0e      	ldr	r2, [pc, #56]	; (800955c <HAL_ADC_MspInit+0x80>)
 8009524:	f043 0301 	orr.w	r3, r3, #1
 8009528:	6313      	str	r3, [r2, #48]	; 0x30
 800952a:	4b0c      	ldr	r3, [pc, #48]	; (800955c <HAL_ADC_MspInit+0x80>)
 800952c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800952e:	f003 0301 	and.w	r3, r3, #1
 8009532:	60fb      	str	r3, [r7, #12]
 8009534:	68fb      	ldr	r3, [r7, #12]
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8009536:	230f      	movs	r3, #15
 8009538:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800953a:	2303      	movs	r3, #3
 800953c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800953e:	2300      	movs	r3, #0
 8009540:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009542:	f107 0314 	add.w	r3, r7, #20
 8009546:	4619      	mov	r1, r3
 8009548:	4805      	ldr	r0, [pc, #20]	; (8009560 <HAL_ADC_MspInit+0x84>)
 800954a:	f7f8 fd01 	bl	8001f50 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800954e:	bf00      	nop
 8009550:	3728      	adds	r7, #40	; 0x28
 8009552:	46bd      	mov	sp, r7
 8009554:	bd80      	pop	{r7, pc}
 8009556:	bf00      	nop
 8009558:	40012000 	.word	0x40012000
 800955c:	40023800 	.word	0x40023800
 8009560:	40020000 	.word	0x40020000

08009564 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8009564:	b580      	push	{r7, lr}
 8009566:	b08a      	sub	sp, #40	; 0x28
 8009568:	af00      	add	r7, sp, #0
 800956a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800956c:	f107 0314 	add.w	r3, r7, #20
 8009570:	2200      	movs	r2, #0
 8009572:	601a      	str	r2, [r3, #0]
 8009574:	605a      	str	r2, [r3, #4]
 8009576:	609a      	str	r2, [r3, #8]
 8009578:	60da      	str	r2, [r3, #12]
 800957a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	4a19      	ldr	r2, [pc, #100]	; (80095e8 <HAL_SPI_MspInit+0x84>)
 8009582:	4293      	cmp	r3, r2
 8009584:	d12c      	bne.n	80095e0 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8009586:	2300      	movs	r3, #0
 8009588:	613b      	str	r3, [r7, #16]
 800958a:	4b18      	ldr	r3, [pc, #96]	; (80095ec <HAL_SPI_MspInit+0x88>)
 800958c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800958e:	4a17      	ldr	r2, [pc, #92]	; (80095ec <HAL_SPI_MspInit+0x88>)
 8009590:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009594:	6413      	str	r3, [r2, #64]	; 0x40
 8009596:	4b15      	ldr	r3, [pc, #84]	; (80095ec <HAL_SPI_MspInit+0x88>)
 8009598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800959a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800959e:	613b      	str	r3, [r7, #16]
 80095a0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80095a2:	2300      	movs	r3, #0
 80095a4:	60fb      	str	r3, [r7, #12]
 80095a6:	4b11      	ldr	r3, [pc, #68]	; (80095ec <HAL_SPI_MspInit+0x88>)
 80095a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095aa:	4a10      	ldr	r2, [pc, #64]	; (80095ec <HAL_SPI_MspInit+0x88>)
 80095ac:	f043 0304 	orr.w	r3, r3, #4
 80095b0:	6313      	str	r3, [r2, #48]	; 0x30
 80095b2:	4b0e      	ldr	r3, [pc, #56]	; (80095ec <HAL_SPI_MspInit+0x88>)
 80095b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095b6:	f003 0304 	and.w	r3, r3, #4
 80095ba:	60fb      	str	r3, [r7, #12]
 80095bc:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration    
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80095be:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80095c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80095c4:	2302      	movs	r3, #2
 80095c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80095c8:	2300      	movs	r3, #0
 80095ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80095cc:	2303      	movs	r3, #3
 80095ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80095d0:	2306      	movs	r3, #6
 80095d2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80095d4:	f107 0314 	add.w	r3, r7, #20
 80095d8:	4619      	mov	r1, r3
 80095da:	4805      	ldr	r0, [pc, #20]	; (80095f0 <HAL_SPI_MspInit+0x8c>)
 80095dc:	f7f8 fcb8 	bl	8001f50 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80095e0:	bf00      	nop
 80095e2:	3728      	adds	r7, #40	; 0x28
 80095e4:	46bd      	mov	sp, r7
 80095e6:	bd80      	pop	{r7, pc}
 80095e8:	40003c00 	.word	0x40003c00
 80095ec:	40023800 	.word	0x40023800
 80095f0:	40020800 	.word	0x40020800

080095f4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80095f4:	b580      	push	{r7, lr}
 80095f6:	b086      	sub	sp, #24
 80095f8:	af00      	add	r7, sp, #0
 80095fa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009604:	d10e      	bne.n	8009624 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8009606:	2300      	movs	r3, #0
 8009608:	617b      	str	r3, [r7, #20]
 800960a:	4b20      	ldr	r3, [pc, #128]	; (800968c <HAL_TIM_Base_MspInit+0x98>)
 800960c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800960e:	4a1f      	ldr	r2, [pc, #124]	; (800968c <HAL_TIM_Base_MspInit+0x98>)
 8009610:	f043 0301 	orr.w	r3, r3, #1
 8009614:	6413      	str	r3, [r2, #64]	; 0x40
 8009616:	4b1d      	ldr	r3, [pc, #116]	; (800968c <HAL_TIM_Base_MspInit+0x98>)
 8009618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800961a:	f003 0301 	and.w	r3, r3, #1
 800961e:	617b      	str	r3, [r7, #20]
 8009620:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8009622:	e02e      	b.n	8009682 <HAL_TIM_Base_MspInit+0x8e>
  else if(htim_base->Instance==TIM3)
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	4a19      	ldr	r2, [pc, #100]	; (8009690 <HAL_TIM_Base_MspInit+0x9c>)
 800962a:	4293      	cmp	r3, r2
 800962c:	d10e      	bne.n	800964c <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800962e:	2300      	movs	r3, #0
 8009630:	613b      	str	r3, [r7, #16]
 8009632:	4b16      	ldr	r3, [pc, #88]	; (800968c <HAL_TIM_Base_MspInit+0x98>)
 8009634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009636:	4a15      	ldr	r2, [pc, #84]	; (800968c <HAL_TIM_Base_MspInit+0x98>)
 8009638:	f043 0302 	orr.w	r3, r3, #2
 800963c:	6413      	str	r3, [r2, #64]	; 0x40
 800963e:	4b13      	ldr	r3, [pc, #76]	; (800968c <HAL_TIM_Base_MspInit+0x98>)
 8009640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009642:	f003 0302 	and.w	r3, r3, #2
 8009646:	613b      	str	r3, [r7, #16]
 8009648:	693b      	ldr	r3, [r7, #16]
}
 800964a:	e01a      	b.n	8009682 <HAL_TIM_Base_MspInit+0x8e>
  else if(htim_base->Instance==TIM6)
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	4a10      	ldr	r2, [pc, #64]	; (8009694 <HAL_TIM_Base_MspInit+0xa0>)
 8009652:	4293      	cmp	r3, r2
 8009654:	d115      	bne.n	8009682 <HAL_TIM_Base_MspInit+0x8e>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8009656:	2300      	movs	r3, #0
 8009658:	60fb      	str	r3, [r7, #12]
 800965a:	4b0c      	ldr	r3, [pc, #48]	; (800968c <HAL_TIM_Base_MspInit+0x98>)
 800965c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800965e:	4a0b      	ldr	r2, [pc, #44]	; (800968c <HAL_TIM_Base_MspInit+0x98>)
 8009660:	f043 0310 	orr.w	r3, r3, #16
 8009664:	6413      	str	r3, [r2, #64]	; 0x40
 8009666:	4b09      	ldr	r3, [pc, #36]	; (800968c <HAL_TIM_Base_MspInit+0x98>)
 8009668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800966a:	f003 0310 	and.w	r3, r3, #16
 800966e:	60fb      	str	r3, [r7, #12]
 8009670:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8009672:	2200      	movs	r2, #0
 8009674:	2100      	movs	r1, #0
 8009676:	2036      	movs	r0, #54	; 0x36
 8009678:	f7f8 f95f 	bl	800193a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800967c:	2036      	movs	r0, #54	; 0x36
 800967e:	f7f8 f978 	bl	8001972 <HAL_NVIC_EnableIRQ>
}
 8009682:	bf00      	nop
 8009684:	3718      	adds	r7, #24
 8009686:	46bd      	mov	sp, r7
 8009688:	bd80      	pop	{r7, pc}
 800968a:	bf00      	nop
 800968c:	40023800 	.word	0x40023800
 8009690:	40000400 	.word	0x40000400
 8009694:	40001000 	.word	0x40001000

08009698 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8009698:	b580      	push	{r7, lr}
 800969a:	b08c      	sub	sp, #48	; 0x30
 800969c:	af00      	add	r7, sp, #0
 800969e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80096a0:	f107 031c 	add.w	r3, r7, #28
 80096a4:	2200      	movs	r2, #0
 80096a6:	601a      	str	r2, [r3, #0]
 80096a8:	605a      	str	r2, [r3, #4]
 80096aa:	609a      	str	r2, [r3, #8]
 80096ac:	60da      	str	r2, [r3, #12]
 80096ae:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM4)
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	4a32      	ldr	r2, [pc, #200]	; (8009780 <HAL_TIM_Encoder_MspInit+0xe8>)
 80096b6:	4293      	cmp	r3, r2
 80096b8:	d12c      	bne.n	8009714 <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80096ba:	2300      	movs	r3, #0
 80096bc:	61bb      	str	r3, [r7, #24]
 80096be:	4b31      	ldr	r3, [pc, #196]	; (8009784 <HAL_TIM_Encoder_MspInit+0xec>)
 80096c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096c2:	4a30      	ldr	r2, [pc, #192]	; (8009784 <HAL_TIM_Encoder_MspInit+0xec>)
 80096c4:	f043 0304 	orr.w	r3, r3, #4
 80096c8:	6413      	str	r3, [r2, #64]	; 0x40
 80096ca:	4b2e      	ldr	r3, [pc, #184]	; (8009784 <HAL_TIM_Encoder_MspInit+0xec>)
 80096cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096ce:	f003 0304 	and.w	r3, r3, #4
 80096d2:	61bb      	str	r3, [r7, #24]
 80096d4:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80096d6:	2300      	movs	r3, #0
 80096d8:	617b      	str	r3, [r7, #20]
 80096da:	4b2a      	ldr	r3, [pc, #168]	; (8009784 <HAL_TIM_Encoder_MspInit+0xec>)
 80096dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096de:	4a29      	ldr	r2, [pc, #164]	; (8009784 <HAL_TIM_Encoder_MspInit+0xec>)
 80096e0:	f043 0302 	orr.w	r3, r3, #2
 80096e4:	6313      	str	r3, [r2, #48]	; 0x30
 80096e6:	4b27      	ldr	r3, [pc, #156]	; (8009784 <HAL_TIM_Encoder_MspInit+0xec>)
 80096e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096ea:	f003 0302 	and.w	r3, r3, #2
 80096ee:	617b      	str	r3, [r7, #20]
 80096f0:	697b      	ldr	r3, [r7, #20]
    /**TIM4 GPIO Configuration    
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80096f2:	23c0      	movs	r3, #192	; 0xc0
 80096f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80096f6:	2302      	movs	r3, #2
 80096f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80096fa:	2300      	movs	r3, #0
 80096fc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80096fe:	2300      	movs	r3, #0
 8009700:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8009702:	2302      	movs	r3, #2
 8009704:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009706:	f107 031c 	add.w	r3, r7, #28
 800970a:	4619      	mov	r1, r3
 800970c:	481e      	ldr	r0, [pc, #120]	; (8009788 <HAL_TIM_Encoder_MspInit+0xf0>)
 800970e:	f7f8 fc1f 	bl	8001f50 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8009712:	e030      	b.n	8009776 <HAL_TIM_Encoder_MspInit+0xde>
  else if(htim_encoder->Instance==TIM8)
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	4a1c      	ldr	r2, [pc, #112]	; (800978c <HAL_TIM_Encoder_MspInit+0xf4>)
 800971a:	4293      	cmp	r3, r2
 800971c:	d12b      	bne.n	8009776 <HAL_TIM_Encoder_MspInit+0xde>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800971e:	2300      	movs	r3, #0
 8009720:	613b      	str	r3, [r7, #16]
 8009722:	4b18      	ldr	r3, [pc, #96]	; (8009784 <HAL_TIM_Encoder_MspInit+0xec>)
 8009724:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009726:	4a17      	ldr	r2, [pc, #92]	; (8009784 <HAL_TIM_Encoder_MspInit+0xec>)
 8009728:	f043 0302 	orr.w	r3, r3, #2
 800972c:	6453      	str	r3, [r2, #68]	; 0x44
 800972e:	4b15      	ldr	r3, [pc, #84]	; (8009784 <HAL_TIM_Encoder_MspInit+0xec>)
 8009730:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009732:	f003 0302 	and.w	r3, r3, #2
 8009736:	613b      	str	r3, [r7, #16]
 8009738:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800973a:	2300      	movs	r3, #0
 800973c:	60fb      	str	r3, [r7, #12]
 800973e:	4b11      	ldr	r3, [pc, #68]	; (8009784 <HAL_TIM_Encoder_MspInit+0xec>)
 8009740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009742:	4a10      	ldr	r2, [pc, #64]	; (8009784 <HAL_TIM_Encoder_MspInit+0xec>)
 8009744:	f043 0304 	orr.w	r3, r3, #4
 8009748:	6313      	str	r3, [r2, #48]	; 0x30
 800974a:	4b0e      	ldr	r3, [pc, #56]	; (8009784 <HAL_TIM_Encoder_MspInit+0xec>)
 800974c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800974e:	f003 0304 	and.w	r3, r3, #4
 8009752:	60fb      	str	r3, [r7, #12]
 8009754:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8009756:	23c0      	movs	r3, #192	; 0xc0
 8009758:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800975a:	2302      	movs	r3, #2
 800975c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800975e:	2300      	movs	r3, #0
 8009760:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009762:	2300      	movs	r3, #0
 8009764:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8009766:	2303      	movs	r3, #3
 8009768:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800976a:	f107 031c 	add.w	r3, r7, #28
 800976e:	4619      	mov	r1, r3
 8009770:	4807      	ldr	r0, [pc, #28]	; (8009790 <HAL_TIM_Encoder_MspInit+0xf8>)
 8009772:	f7f8 fbed 	bl	8001f50 <HAL_GPIO_Init>
}
 8009776:	bf00      	nop
 8009778:	3730      	adds	r7, #48	; 0x30
 800977a:	46bd      	mov	sp, r7
 800977c:	bd80      	pop	{r7, pc}
 800977e:	bf00      	nop
 8009780:	40000800 	.word	0x40000800
 8009784:	40023800 	.word	0x40023800
 8009788:	40020400 	.word	0x40020400
 800978c:	40010400 	.word	0x40010400
 8009790:	40020800 	.word	0x40020800

08009794 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8009794:	b580      	push	{r7, lr}
 8009796:	b08a      	sub	sp, #40	; 0x28
 8009798:	af00      	add	r7, sp, #0
 800979a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800979c:	f107 0314 	add.w	r3, r7, #20
 80097a0:	2200      	movs	r2, #0
 80097a2:	601a      	str	r2, [r3, #0]
 80097a4:	605a      	str	r2, [r3, #4]
 80097a6:	609a      	str	r2, [r3, #8]
 80097a8:	60da      	str	r2, [r3, #12]
 80097aa:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80097b4:	d13d      	bne.n	8009832 <HAL_TIM_MspPostInit+0x9e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80097b6:	2300      	movs	r3, #0
 80097b8:	613b      	str	r3, [r7, #16]
 80097ba:	4b31      	ldr	r3, [pc, #196]	; (8009880 <HAL_TIM_MspPostInit+0xec>)
 80097bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80097be:	4a30      	ldr	r2, [pc, #192]	; (8009880 <HAL_TIM_MspPostInit+0xec>)
 80097c0:	f043 0301 	orr.w	r3, r3, #1
 80097c4:	6313      	str	r3, [r2, #48]	; 0x30
 80097c6:	4b2e      	ldr	r3, [pc, #184]	; (8009880 <HAL_TIM_MspPostInit+0xec>)
 80097c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80097ca:	f003 0301 	and.w	r3, r3, #1
 80097ce:	613b      	str	r3, [r7, #16]
 80097d0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80097d2:	2300      	movs	r3, #0
 80097d4:	60fb      	str	r3, [r7, #12]
 80097d6:	4b2a      	ldr	r3, [pc, #168]	; (8009880 <HAL_TIM_MspPostInit+0xec>)
 80097d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80097da:	4a29      	ldr	r2, [pc, #164]	; (8009880 <HAL_TIM_MspPostInit+0xec>)
 80097dc:	f043 0302 	orr.w	r3, r3, #2
 80097e0:	6313      	str	r3, [r2, #48]	; 0x30
 80097e2:	4b27      	ldr	r3, [pc, #156]	; (8009880 <HAL_TIM_MspPostInit+0xec>)
 80097e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80097e6:	f003 0302 	and.w	r3, r3, #2
 80097ea:	60fb      	str	r3, [r7, #12]
 80097ec:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration    
    PA5     ------> TIM2_CH1
    PB11     ------> TIM2_CH4 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80097ee:	2320      	movs	r3, #32
 80097f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80097f2:	2302      	movs	r3, #2
 80097f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80097f6:	2300      	movs	r3, #0
 80097f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80097fa:	2300      	movs	r3, #0
 80097fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80097fe:	2301      	movs	r3, #1
 8009800:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009802:	f107 0314 	add.w	r3, r7, #20
 8009806:	4619      	mov	r1, r3
 8009808:	481e      	ldr	r0, [pc, #120]	; (8009884 <HAL_TIM_MspPostInit+0xf0>)
 800980a:	f7f8 fba1 	bl	8001f50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800980e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009812:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009814:	2302      	movs	r3, #2
 8009816:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009818:	2300      	movs	r3, #0
 800981a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800981c:	2300      	movs	r3, #0
 800981e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8009820:	2301      	movs	r3, #1
 8009822:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009824:	f107 0314 	add.w	r3, r7, #20
 8009828:	4619      	mov	r1, r3
 800982a:	4817      	ldr	r0, [pc, #92]	; (8009888 <HAL_TIM_MspPostInit+0xf4>)
 800982c:	f7f8 fb90 	bl	8001f50 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8009830:	e022      	b.n	8009878 <HAL_TIM_MspPostInit+0xe4>
  else if(htim->Instance==TIM3)
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	4a15      	ldr	r2, [pc, #84]	; (800988c <HAL_TIM_MspPostInit+0xf8>)
 8009838:	4293      	cmp	r3, r2
 800983a:	d11d      	bne.n	8009878 <HAL_TIM_MspPostInit+0xe4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800983c:	2300      	movs	r3, #0
 800983e:	60bb      	str	r3, [r7, #8]
 8009840:	4b0f      	ldr	r3, [pc, #60]	; (8009880 <HAL_TIM_MspPostInit+0xec>)
 8009842:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009844:	4a0e      	ldr	r2, [pc, #56]	; (8009880 <HAL_TIM_MspPostInit+0xec>)
 8009846:	f043 0302 	orr.w	r3, r3, #2
 800984a:	6313      	str	r3, [r2, #48]	; 0x30
 800984c:	4b0c      	ldr	r3, [pc, #48]	; (8009880 <HAL_TIM_MspPostInit+0xec>)
 800984e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009850:	f003 0302 	and.w	r3, r3, #2
 8009854:	60bb      	str	r3, [r7, #8]
 8009856:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8009858:	2320      	movs	r3, #32
 800985a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800985c:	2302      	movs	r3, #2
 800985e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009860:	2300      	movs	r3, #0
 8009862:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009864:	2300      	movs	r3, #0
 8009866:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8009868:	2302      	movs	r3, #2
 800986a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800986c:	f107 0314 	add.w	r3, r7, #20
 8009870:	4619      	mov	r1, r3
 8009872:	4805      	ldr	r0, [pc, #20]	; (8009888 <HAL_TIM_MspPostInit+0xf4>)
 8009874:	f7f8 fb6c 	bl	8001f50 <HAL_GPIO_Init>
}
 8009878:	bf00      	nop
 800987a:	3728      	adds	r7, #40	; 0x28
 800987c:	46bd      	mov	sp, r7
 800987e:	bd80      	pop	{r7, pc}
 8009880:	40023800 	.word	0x40023800
 8009884:	40020000 	.word	0x40020000
 8009888:	40020400 	.word	0x40020400
 800988c:	40000400 	.word	0x40000400

08009890 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8009890:	b580      	push	{r7, lr}
 8009892:	b08a      	sub	sp, #40	; 0x28
 8009894:	af00      	add	r7, sp, #0
 8009896:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009898:	f107 0314 	add.w	r3, r7, #20
 800989c:	2200      	movs	r2, #0
 800989e:	601a      	str	r2, [r3, #0]
 80098a0:	605a      	str	r2, [r3, #4]
 80098a2:	609a      	str	r2, [r3, #8]
 80098a4:	60da      	str	r2, [r3, #12]
 80098a6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	4a19      	ldr	r2, [pc, #100]	; (8009914 <HAL_UART_MspInit+0x84>)
 80098ae:	4293      	cmp	r3, r2
 80098b0:	d12c      	bne.n	800990c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80098b2:	2300      	movs	r3, #0
 80098b4:	613b      	str	r3, [r7, #16]
 80098b6:	4b18      	ldr	r3, [pc, #96]	; (8009918 <HAL_UART_MspInit+0x88>)
 80098b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80098ba:	4a17      	ldr	r2, [pc, #92]	; (8009918 <HAL_UART_MspInit+0x88>)
 80098bc:	f043 0310 	orr.w	r3, r3, #16
 80098c0:	6453      	str	r3, [r2, #68]	; 0x44
 80098c2:	4b15      	ldr	r3, [pc, #84]	; (8009918 <HAL_UART_MspInit+0x88>)
 80098c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80098c6:	f003 0310 	and.w	r3, r3, #16
 80098ca:	613b      	str	r3, [r7, #16]
 80098cc:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80098ce:	2300      	movs	r3, #0
 80098d0:	60fb      	str	r3, [r7, #12]
 80098d2:	4b11      	ldr	r3, [pc, #68]	; (8009918 <HAL_UART_MspInit+0x88>)
 80098d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80098d6:	4a10      	ldr	r2, [pc, #64]	; (8009918 <HAL_UART_MspInit+0x88>)
 80098d8:	f043 0301 	orr.w	r3, r3, #1
 80098dc:	6313      	str	r3, [r2, #48]	; 0x30
 80098de:	4b0e      	ldr	r3, [pc, #56]	; (8009918 <HAL_UART_MspInit+0x88>)
 80098e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80098e2:	f003 0301 	and.w	r3, r3, #1
 80098e6:	60fb      	str	r3, [r7, #12]
 80098e8:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80098ea:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80098ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80098f0:	2302      	movs	r3, #2
 80098f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80098f4:	2301      	movs	r3, #1
 80098f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80098f8:	2303      	movs	r3, #3
 80098fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80098fc:	2307      	movs	r3, #7
 80098fe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009900:	f107 0314 	add.w	r3, r7, #20
 8009904:	4619      	mov	r1, r3
 8009906:	4805      	ldr	r0, [pc, #20]	; (800991c <HAL_UART_MspInit+0x8c>)
 8009908:	f7f8 fb22 	bl	8001f50 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800990c:	bf00      	nop
 800990e:	3728      	adds	r7, #40	; 0x28
 8009910:	46bd      	mov	sp, r7
 8009912:	bd80      	pop	{r7, pc}
 8009914:	40011000 	.word	0x40011000
 8009918:	40023800 	.word	0x40023800
 800991c:	40020000 	.word	0x40020000

08009920 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8009920:	b480      	push	{r7}
 8009922:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8009924:	bf00      	nop
 8009926:	46bd      	mov	sp, r7
 8009928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800992c:	4770      	bx	lr

0800992e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800992e:	b480      	push	{r7}
 8009930:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8009932:	e7fe      	b.n	8009932 <HardFault_Handler+0x4>

08009934 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8009934:	b480      	push	{r7}
 8009936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8009938:	e7fe      	b.n	8009938 <MemManage_Handler+0x4>

0800993a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800993a:	b480      	push	{r7}
 800993c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800993e:	e7fe      	b.n	800993e <BusFault_Handler+0x4>

08009940 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8009940:	b480      	push	{r7}
 8009942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8009944:	e7fe      	b.n	8009944 <UsageFault_Handler+0x4>

08009946 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8009946:	b480      	push	{r7}
 8009948:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800994a:	bf00      	nop
 800994c:	46bd      	mov	sp, r7
 800994e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009952:	4770      	bx	lr

08009954 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8009954:	b480      	push	{r7}
 8009956:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8009958:	bf00      	nop
 800995a:	46bd      	mov	sp, r7
 800995c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009960:	4770      	bx	lr

08009962 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8009962:	b480      	push	{r7}
 8009964:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8009966:	bf00      	nop
 8009968:	46bd      	mov	sp, r7
 800996a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800996e:	4770      	bx	lr

08009970 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8009970:	b580      	push	{r7, lr}
 8009972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8009974:	f7f7 fb0a 	bl	8000f8c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8009978:	bf00      	nop
 800997a:	bd80      	pop	{r7, pc}

0800997c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800997c:	b580      	push	{r7, lr}
 800997e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8009980:	4802      	ldr	r0, [pc, #8]	; (800998c <TIM6_DAC_IRQHandler+0x10>)
 8009982:	f7f9 ff9a 	bl	80038ba <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8009986:	bf00      	nop
 8009988:	bd80      	pop	{r7, pc}
 800998a:	bf00      	nop
 800998c:	20000a74 	.word	0x20000a74

08009990 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8009990:	b580      	push	{r7, lr}
 8009992:	b086      	sub	sp, #24
 8009994:	af00      	add	r7, sp, #0
 8009996:	60f8      	str	r0, [r7, #12]
 8009998:	60b9      	str	r1, [r7, #8]
 800999a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800999c:	2300      	movs	r3, #0
 800999e:	617b      	str	r3, [r7, #20]
 80099a0:	e00a      	b.n	80099b8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80099a2:	f3af 8000 	nop.w
 80099a6:	4601      	mov	r1, r0
 80099a8:	68bb      	ldr	r3, [r7, #8]
 80099aa:	1c5a      	adds	r2, r3, #1
 80099ac:	60ba      	str	r2, [r7, #8]
 80099ae:	b2ca      	uxtb	r2, r1
 80099b0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80099b2:	697b      	ldr	r3, [r7, #20]
 80099b4:	3301      	adds	r3, #1
 80099b6:	617b      	str	r3, [r7, #20]
 80099b8:	697a      	ldr	r2, [r7, #20]
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	429a      	cmp	r2, r3
 80099be:	dbf0      	blt.n	80099a2 <_read+0x12>
	}

return len;
 80099c0:	687b      	ldr	r3, [r7, #4]
}
 80099c2:	4618      	mov	r0, r3
 80099c4:	3718      	adds	r7, #24
 80099c6:	46bd      	mov	sp, r7
 80099c8:	bd80      	pop	{r7, pc}

080099ca <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80099ca:	b580      	push	{r7, lr}
 80099cc:	b086      	sub	sp, #24
 80099ce:	af00      	add	r7, sp, #0
 80099d0:	60f8      	str	r0, [r7, #12]
 80099d2:	60b9      	str	r1, [r7, #8]
 80099d4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80099d6:	2300      	movs	r3, #0
 80099d8:	617b      	str	r3, [r7, #20]
 80099da:	e009      	b.n	80099f0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80099dc:	68bb      	ldr	r3, [r7, #8]
 80099de:	1c5a      	adds	r2, r3, #1
 80099e0:	60ba      	str	r2, [r7, #8]
 80099e2:	781b      	ldrb	r3, [r3, #0]
 80099e4:	4618      	mov	r0, r3
 80099e6:	f7fd f8a7 	bl	8006b38 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80099ea:	697b      	ldr	r3, [r7, #20]
 80099ec:	3301      	adds	r3, #1
 80099ee:	617b      	str	r3, [r7, #20]
 80099f0:	697a      	ldr	r2, [r7, #20]
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	429a      	cmp	r2, r3
 80099f6:	dbf1      	blt.n	80099dc <_write+0x12>
	}
	return len;
 80099f8:	687b      	ldr	r3, [r7, #4]
}
 80099fa:	4618      	mov	r0, r3
 80099fc:	3718      	adds	r7, #24
 80099fe:	46bd      	mov	sp, r7
 8009a00:	bd80      	pop	{r7, pc}

08009a02 <_close>:

int _close(int file)
{
 8009a02:	b480      	push	{r7}
 8009a04:	b083      	sub	sp, #12
 8009a06:	af00      	add	r7, sp, #0
 8009a08:	6078      	str	r0, [r7, #4]
	return -1;
 8009a0a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8009a0e:	4618      	mov	r0, r3
 8009a10:	370c      	adds	r7, #12
 8009a12:	46bd      	mov	sp, r7
 8009a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a18:	4770      	bx	lr

08009a1a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8009a1a:	b480      	push	{r7}
 8009a1c:	b083      	sub	sp, #12
 8009a1e:	af00      	add	r7, sp, #0
 8009a20:	6078      	str	r0, [r7, #4]
 8009a22:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8009a24:	683b      	ldr	r3, [r7, #0]
 8009a26:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8009a2a:	605a      	str	r2, [r3, #4]
	return 0;
 8009a2c:	2300      	movs	r3, #0
}
 8009a2e:	4618      	mov	r0, r3
 8009a30:	370c      	adds	r7, #12
 8009a32:	46bd      	mov	sp, r7
 8009a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a38:	4770      	bx	lr

08009a3a <_isatty>:

int _isatty(int file)
{
 8009a3a:	b480      	push	{r7}
 8009a3c:	b083      	sub	sp, #12
 8009a3e:	af00      	add	r7, sp, #0
 8009a40:	6078      	str	r0, [r7, #4]
	return 1;
 8009a42:	2301      	movs	r3, #1
}
 8009a44:	4618      	mov	r0, r3
 8009a46:	370c      	adds	r7, #12
 8009a48:	46bd      	mov	sp, r7
 8009a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a4e:	4770      	bx	lr

08009a50 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8009a50:	b480      	push	{r7}
 8009a52:	b085      	sub	sp, #20
 8009a54:	af00      	add	r7, sp, #0
 8009a56:	60f8      	str	r0, [r7, #12]
 8009a58:	60b9      	str	r1, [r7, #8]
 8009a5a:	607a      	str	r2, [r7, #4]
	return 0;
 8009a5c:	2300      	movs	r3, #0
}
 8009a5e:	4618      	mov	r0, r3
 8009a60:	3714      	adds	r7, #20
 8009a62:	46bd      	mov	sp, r7
 8009a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a68:	4770      	bx	lr
	...

08009a6c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8009a6c:	b580      	push	{r7, lr}
 8009a6e:	b084      	sub	sp, #16
 8009a70:	af00      	add	r7, sp, #0
 8009a72:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8009a74:	4b11      	ldr	r3, [pc, #68]	; (8009abc <_sbrk+0x50>)
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	d102      	bne.n	8009a82 <_sbrk+0x16>
		heap_end = &end;
 8009a7c:	4b0f      	ldr	r3, [pc, #60]	; (8009abc <_sbrk+0x50>)
 8009a7e:	4a10      	ldr	r2, [pc, #64]	; (8009ac0 <_sbrk+0x54>)
 8009a80:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8009a82:	4b0e      	ldr	r3, [pc, #56]	; (8009abc <_sbrk+0x50>)
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8009a88:	4b0c      	ldr	r3, [pc, #48]	; (8009abc <_sbrk+0x50>)
 8009a8a:	681a      	ldr	r2, [r3, #0]
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	4413      	add	r3, r2
 8009a90:	466a      	mov	r2, sp
 8009a92:	4293      	cmp	r3, r2
 8009a94:	d907      	bls.n	8009aa6 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8009a96:	f000 f875 	bl	8009b84 <__errno>
 8009a9a:	4602      	mov	r2, r0
 8009a9c:	230c      	movs	r3, #12
 8009a9e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8009aa0:	f04f 33ff 	mov.w	r3, #4294967295
 8009aa4:	e006      	b.n	8009ab4 <_sbrk+0x48>
	}

	heap_end += incr;
 8009aa6:	4b05      	ldr	r3, [pc, #20]	; (8009abc <_sbrk+0x50>)
 8009aa8:	681a      	ldr	r2, [r3, #0]
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	4413      	add	r3, r2
 8009aae:	4a03      	ldr	r2, [pc, #12]	; (8009abc <_sbrk+0x50>)
 8009ab0:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8009ab2:	68fb      	ldr	r3, [r7, #12]
}
 8009ab4:	4618      	mov	r0, r3
 8009ab6:	3710      	adds	r7, #16
 8009ab8:	46bd      	mov	sp, r7
 8009aba:	bd80      	pop	{r7, pc}
 8009abc:	200000f0 	.word	0x200000f0
 8009ac0:	20000e40 	.word	0x20000e40

08009ac4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8009ac4:	b480      	push	{r7}
 8009ac6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8009ac8:	4b16      	ldr	r3, [pc, #88]	; (8009b24 <SystemInit+0x60>)
 8009aca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009ace:	4a15      	ldr	r2, [pc, #84]	; (8009b24 <SystemInit+0x60>)
 8009ad0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009ad4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8009ad8:	4b13      	ldr	r3, [pc, #76]	; (8009b28 <SystemInit+0x64>)
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	4a12      	ldr	r2, [pc, #72]	; (8009b28 <SystemInit+0x64>)
 8009ade:	f043 0301 	orr.w	r3, r3, #1
 8009ae2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8009ae4:	4b10      	ldr	r3, [pc, #64]	; (8009b28 <SystemInit+0x64>)
 8009ae6:	2200      	movs	r2, #0
 8009ae8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8009aea:	4b0f      	ldr	r3, [pc, #60]	; (8009b28 <SystemInit+0x64>)
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	4a0e      	ldr	r2, [pc, #56]	; (8009b28 <SystemInit+0x64>)
 8009af0:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8009af4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009af8:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8009afa:	4b0b      	ldr	r3, [pc, #44]	; (8009b28 <SystemInit+0x64>)
 8009afc:	4a0b      	ldr	r2, [pc, #44]	; (8009b2c <SystemInit+0x68>)
 8009afe:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8009b00:	4b09      	ldr	r3, [pc, #36]	; (8009b28 <SystemInit+0x64>)
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	4a08      	ldr	r2, [pc, #32]	; (8009b28 <SystemInit+0x64>)
 8009b06:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009b0a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8009b0c:	4b06      	ldr	r3, [pc, #24]	; (8009b28 <SystemInit+0x64>)
 8009b0e:	2200      	movs	r2, #0
 8009b10:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8009b12:	4b04      	ldr	r3, [pc, #16]	; (8009b24 <SystemInit+0x60>)
 8009b14:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8009b18:	609a      	str	r2, [r3, #8]
#endif
}
 8009b1a:	bf00      	nop
 8009b1c:	46bd      	mov	sp, r7
 8009b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b22:	4770      	bx	lr
 8009b24:	e000ed00 	.word	0xe000ed00
 8009b28:	40023800 	.word	0x40023800
 8009b2c:	24003010 	.word	0x24003010

08009b30 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8009b30:	f8df d034 	ldr.w	sp, [pc, #52]	; 8009b68 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8009b34:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8009b36:	e003      	b.n	8009b40 <LoopCopyDataInit>

08009b38 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8009b38:	4b0c      	ldr	r3, [pc, #48]	; (8009b6c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8009b3a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8009b3c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8009b3e:	3104      	adds	r1, #4

08009b40 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8009b40:	480b      	ldr	r0, [pc, #44]	; (8009b70 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8009b42:	4b0c      	ldr	r3, [pc, #48]	; (8009b74 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8009b44:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8009b46:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8009b48:	d3f6      	bcc.n	8009b38 <CopyDataInit>
  ldr  r2, =_sbss
 8009b4a:	4a0b      	ldr	r2, [pc, #44]	; (8009b78 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8009b4c:	e002      	b.n	8009b54 <LoopFillZerobss>

08009b4e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8009b4e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8009b50:	f842 3b04 	str.w	r3, [r2], #4

08009b54 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8009b54:	4b09      	ldr	r3, [pc, #36]	; (8009b7c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8009b56:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8009b58:	d3f9      	bcc.n	8009b4e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8009b5a:	f7ff ffb3 	bl	8009ac4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8009b5e:	f000 f817 	bl	8009b90 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8009b62:	f7fd ff69 	bl	8007a38 <main>
  bx  lr    
 8009b66:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8009b68:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8009b6c:	0800b1a8 	.word	0x0800b1a8
  ldr  r0, =_sdata
 8009b70:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8009b74:	200000cc 	.word	0x200000cc
  ldr  r2, =_sbss
 8009b78:	200000cc 	.word	0x200000cc
  ldr  r3, = _ebss
 8009b7c:	20000e3c 	.word	0x20000e3c

08009b80 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8009b80:	e7fe      	b.n	8009b80 <ADC_IRQHandler>
	...

08009b84 <__errno>:
 8009b84:	4b01      	ldr	r3, [pc, #4]	; (8009b8c <__errno+0x8>)
 8009b86:	6818      	ldr	r0, [r3, #0]
 8009b88:	4770      	bx	lr
 8009b8a:	bf00      	nop
 8009b8c:	20000064 	.word	0x20000064

08009b90 <__libc_init_array>:
 8009b90:	b570      	push	{r4, r5, r6, lr}
 8009b92:	4e0d      	ldr	r6, [pc, #52]	; (8009bc8 <__libc_init_array+0x38>)
 8009b94:	4c0d      	ldr	r4, [pc, #52]	; (8009bcc <__libc_init_array+0x3c>)
 8009b96:	1ba4      	subs	r4, r4, r6
 8009b98:	10a4      	asrs	r4, r4, #2
 8009b9a:	2500      	movs	r5, #0
 8009b9c:	42a5      	cmp	r5, r4
 8009b9e:	d109      	bne.n	8009bb4 <__libc_init_array+0x24>
 8009ba0:	4e0b      	ldr	r6, [pc, #44]	; (8009bd0 <__libc_init_array+0x40>)
 8009ba2:	4c0c      	ldr	r4, [pc, #48]	; (8009bd4 <__libc_init_array+0x44>)
 8009ba4:	f001 f932 	bl	800ae0c <_init>
 8009ba8:	1ba4      	subs	r4, r4, r6
 8009baa:	10a4      	asrs	r4, r4, #2
 8009bac:	2500      	movs	r5, #0
 8009bae:	42a5      	cmp	r5, r4
 8009bb0:	d105      	bne.n	8009bbe <__libc_init_array+0x2e>
 8009bb2:	bd70      	pop	{r4, r5, r6, pc}
 8009bb4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009bb8:	4798      	blx	r3
 8009bba:	3501      	adds	r5, #1
 8009bbc:	e7ee      	b.n	8009b9c <__libc_init_array+0xc>
 8009bbe:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009bc2:	4798      	blx	r3
 8009bc4:	3501      	adds	r5, #1
 8009bc6:	e7f2      	b.n	8009bae <__libc_init_array+0x1e>
 8009bc8:	0800b1a0 	.word	0x0800b1a0
 8009bcc:	0800b1a0 	.word	0x0800b1a0
 8009bd0:	0800b1a0 	.word	0x0800b1a0
 8009bd4:	0800b1a4 	.word	0x0800b1a4

08009bd8 <memset>:
 8009bd8:	4402      	add	r2, r0
 8009bda:	4603      	mov	r3, r0
 8009bdc:	4293      	cmp	r3, r2
 8009bde:	d100      	bne.n	8009be2 <memset+0xa>
 8009be0:	4770      	bx	lr
 8009be2:	f803 1b01 	strb.w	r1, [r3], #1
 8009be6:	e7f9      	b.n	8009bdc <memset+0x4>

08009be8 <iprintf>:
 8009be8:	b40f      	push	{r0, r1, r2, r3}
 8009bea:	4b0a      	ldr	r3, [pc, #40]	; (8009c14 <iprintf+0x2c>)
 8009bec:	b513      	push	{r0, r1, r4, lr}
 8009bee:	681c      	ldr	r4, [r3, #0]
 8009bf0:	b124      	cbz	r4, 8009bfc <iprintf+0x14>
 8009bf2:	69a3      	ldr	r3, [r4, #24]
 8009bf4:	b913      	cbnz	r3, 8009bfc <iprintf+0x14>
 8009bf6:	4620      	mov	r0, r4
 8009bf8:	f000 fad8 	bl	800a1ac <__sinit>
 8009bfc:	ab05      	add	r3, sp, #20
 8009bfe:	9a04      	ldr	r2, [sp, #16]
 8009c00:	68a1      	ldr	r1, [r4, #8]
 8009c02:	9301      	str	r3, [sp, #4]
 8009c04:	4620      	mov	r0, r4
 8009c06:	f000 fc99 	bl	800a53c <_vfiprintf_r>
 8009c0a:	b002      	add	sp, #8
 8009c0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009c10:	b004      	add	sp, #16
 8009c12:	4770      	bx	lr
 8009c14:	20000064 	.word	0x20000064

08009c18 <_puts_r>:
 8009c18:	b570      	push	{r4, r5, r6, lr}
 8009c1a:	460e      	mov	r6, r1
 8009c1c:	4605      	mov	r5, r0
 8009c1e:	b118      	cbz	r0, 8009c28 <_puts_r+0x10>
 8009c20:	6983      	ldr	r3, [r0, #24]
 8009c22:	b90b      	cbnz	r3, 8009c28 <_puts_r+0x10>
 8009c24:	f000 fac2 	bl	800a1ac <__sinit>
 8009c28:	69ab      	ldr	r3, [r5, #24]
 8009c2a:	68ac      	ldr	r4, [r5, #8]
 8009c2c:	b913      	cbnz	r3, 8009c34 <_puts_r+0x1c>
 8009c2e:	4628      	mov	r0, r5
 8009c30:	f000 fabc 	bl	800a1ac <__sinit>
 8009c34:	4b23      	ldr	r3, [pc, #140]	; (8009cc4 <_puts_r+0xac>)
 8009c36:	429c      	cmp	r4, r3
 8009c38:	d117      	bne.n	8009c6a <_puts_r+0x52>
 8009c3a:	686c      	ldr	r4, [r5, #4]
 8009c3c:	89a3      	ldrh	r3, [r4, #12]
 8009c3e:	071b      	lsls	r3, r3, #28
 8009c40:	d51d      	bpl.n	8009c7e <_puts_r+0x66>
 8009c42:	6923      	ldr	r3, [r4, #16]
 8009c44:	b1db      	cbz	r3, 8009c7e <_puts_r+0x66>
 8009c46:	3e01      	subs	r6, #1
 8009c48:	68a3      	ldr	r3, [r4, #8]
 8009c4a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8009c4e:	3b01      	subs	r3, #1
 8009c50:	60a3      	str	r3, [r4, #8]
 8009c52:	b9e9      	cbnz	r1, 8009c90 <_puts_r+0x78>
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	da2e      	bge.n	8009cb6 <_puts_r+0x9e>
 8009c58:	4622      	mov	r2, r4
 8009c5a:	210a      	movs	r1, #10
 8009c5c:	4628      	mov	r0, r5
 8009c5e:	f000 f8f5 	bl	8009e4c <__swbuf_r>
 8009c62:	3001      	adds	r0, #1
 8009c64:	d011      	beq.n	8009c8a <_puts_r+0x72>
 8009c66:	200a      	movs	r0, #10
 8009c68:	e011      	b.n	8009c8e <_puts_r+0x76>
 8009c6a:	4b17      	ldr	r3, [pc, #92]	; (8009cc8 <_puts_r+0xb0>)
 8009c6c:	429c      	cmp	r4, r3
 8009c6e:	d101      	bne.n	8009c74 <_puts_r+0x5c>
 8009c70:	68ac      	ldr	r4, [r5, #8]
 8009c72:	e7e3      	b.n	8009c3c <_puts_r+0x24>
 8009c74:	4b15      	ldr	r3, [pc, #84]	; (8009ccc <_puts_r+0xb4>)
 8009c76:	429c      	cmp	r4, r3
 8009c78:	bf08      	it	eq
 8009c7a:	68ec      	ldreq	r4, [r5, #12]
 8009c7c:	e7de      	b.n	8009c3c <_puts_r+0x24>
 8009c7e:	4621      	mov	r1, r4
 8009c80:	4628      	mov	r0, r5
 8009c82:	f000 f935 	bl	8009ef0 <__swsetup_r>
 8009c86:	2800      	cmp	r0, #0
 8009c88:	d0dd      	beq.n	8009c46 <_puts_r+0x2e>
 8009c8a:	f04f 30ff 	mov.w	r0, #4294967295
 8009c8e:	bd70      	pop	{r4, r5, r6, pc}
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	da04      	bge.n	8009c9e <_puts_r+0x86>
 8009c94:	69a2      	ldr	r2, [r4, #24]
 8009c96:	429a      	cmp	r2, r3
 8009c98:	dc06      	bgt.n	8009ca8 <_puts_r+0x90>
 8009c9a:	290a      	cmp	r1, #10
 8009c9c:	d004      	beq.n	8009ca8 <_puts_r+0x90>
 8009c9e:	6823      	ldr	r3, [r4, #0]
 8009ca0:	1c5a      	adds	r2, r3, #1
 8009ca2:	6022      	str	r2, [r4, #0]
 8009ca4:	7019      	strb	r1, [r3, #0]
 8009ca6:	e7cf      	b.n	8009c48 <_puts_r+0x30>
 8009ca8:	4622      	mov	r2, r4
 8009caa:	4628      	mov	r0, r5
 8009cac:	f000 f8ce 	bl	8009e4c <__swbuf_r>
 8009cb0:	3001      	adds	r0, #1
 8009cb2:	d1c9      	bne.n	8009c48 <_puts_r+0x30>
 8009cb4:	e7e9      	b.n	8009c8a <_puts_r+0x72>
 8009cb6:	6823      	ldr	r3, [r4, #0]
 8009cb8:	200a      	movs	r0, #10
 8009cba:	1c5a      	adds	r2, r3, #1
 8009cbc:	6022      	str	r2, [r4, #0]
 8009cbe:	7018      	strb	r0, [r3, #0]
 8009cc0:	e7e5      	b.n	8009c8e <_puts_r+0x76>
 8009cc2:	bf00      	nop
 8009cc4:	0800b120 	.word	0x0800b120
 8009cc8:	0800b140 	.word	0x0800b140
 8009ccc:	0800b100 	.word	0x0800b100

08009cd0 <puts>:
 8009cd0:	4b02      	ldr	r3, [pc, #8]	; (8009cdc <puts+0xc>)
 8009cd2:	4601      	mov	r1, r0
 8009cd4:	6818      	ldr	r0, [r3, #0]
 8009cd6:	f7ff bf9f 	b.w	8009c18 <_puts_r>
 8009cda:	bf00      	nop
 8009cdc:	20000064 	.word	0x20000064

08009ce0 <setbuf>:
 8009ce0:	2900      	cmp	r1, #0
 8009ce2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009ce6:	bf0c      	ite	eq
 8009ce8:	2202      	moveq	r2, #2
 8009cea:	2200      	movne	r2, #0
 8009cec:	f000 b800 	b.w	8009cf0 <setvbuf>

08009cf0 <setvbuf>:
 8009cf0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009cf4:	461d      	mov	r5, r3
 8009cf6:	4b51      	ldr	r3, [pc, #324]	; (8009e3c <setvbuf+0x14c>)
 8009cf8:	681e      	ldr	r6, [r3, #0]
 8009cfa:	4604      	mov	r4, r0
 8009cfc:	460f      	mov	r7, r1
 8009cfe:	4690      	mov	r8, r2
 8009d00:	b126      	cbz	r6, 8009d0c <setvbuf+0x1c>
 8009d02:	69b3      	ldr	r3, [r6, #24]
 8009d04:	b913      	cbnz	r3, 8009d0c <setvbuf+0x1c>
 8009d06:	4630      	mov	r0, r6
 8009d08:	f000 fa50 	bl	800a1ac <__sinit>
 8009d0c:	4b4c      	ldr	r3, [pc, #304]	; (8009e40 <setvbuf+0x150>)
 8009d0e:	429c      	cmp	r4, r3
 8009d10:	d152      	bne.n	8009db8 <setvbuf+0xc8>
 8009d12:	6874      	ldr	r4, [r6, #4]
 8009d14:	f1b8 0f02 	cmp.w	r8, #2
 8009d18:	d006      	beq.n	8009d28 <setvbuf+0x38>
 8009d1a:	f1b8 0f01 	cmp.w	r8, #1
 8009d1e:	f200 8089 	bhi.w	8009e34 <setvbuf+0x144>
 8009d22:	2d00      	cmp	r5, #0
 8009d24:	f2c0 8086 	blt.w	8009e34 <setvbuf+0x144>
 8009d28:	4621      	mov	r1, r4
 8009d2a:	4630      	mov	r0, r6
 8009d2c:	f000 f9d4 	bl	800a0d8 <_fflush_r>
 8009d30:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009d32:	b141      	cbz	r1, 8009d46 <setvbuf+0x56>
 8009d34:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009d38:	4299      	cmp	r1, r3
 8009d3a:	d002      	beq.n	8009d42 <setvbuf+0x52>
 8009d3c:	4630      	mov	r0, r6
 8009d3e:	f000 fb2b 	bl	800a398 <_free_r>
 8009d42:	2300      	movs	r3, #0
 8009d44:	6363      	str	r3, [r4, #52]	; 0x34
 8009d46:	2300      	movs	r3, #0
 8009d48:	61a3      	str	r3, [r4, #24]
 8009d4a:	6063      	str	r3, [r4, #4]
 8009d4c:	89a3      	ldrh	r3, [r4, #12]
 8009d4e:	061b      	lsls	r3, r3, #24
 8009d50:	d503      	bpl.n	8009d5a <setvbuf+0x6a>
 8009d52:	6921      	ldr	r1, [r4, #16]
 8009d54:	4630      	mov	r0, r6
 8009d56:	f000 fb1f 	bl	800a398 <_free_r>
 8009d5a:	89a3      	ldrh	r3, [r4, #12]
 8009d5c:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8009d60:	f023 0303 	bic.w	r3, r3, #3
 8009d64:	f1b8 0f02 	cmp.w	r8, #2
 8009d68:	81a3      	strh	r3, [r4, #12]
 8009d6a:	d05d      	beq.n	8009e28 <setvbuf+0x138>
 8009d6c:	ab01      	add	r3, sp, #4
 8009d6e:	466a      	mov	r2, sp
 8009d70:	4621      	mov	r1, r4
 8009d72:	4630      	mov	r0, r6
 8009d74:	f000 faa4 	bl	800a2c0 <__swhatbuf_r>
 8009d78:	89a3      	ldrh	r3, [r4, #12]
 8009d7a:	4318      	orrs	r0, r3
 8009d7c:	81a0      	strh	r0, [r4, #12]
 8009d7e:	bb2d      	cbnz	r5, 8009dcc <setvbuf+0xdc>
 8009d80:	9d00      	ldr	r5, [sp, #0]
 8009d82:	4628      	mov	r0, r5
 8009d84:	f000 fb00 	bl	800a388 <malloc>
 8009d88:	4607      	mov	r7, r0
 8009d8a:	2800      	cmp	r0, #0
 8009d8c:	d14e      	bne.n	8009e2c <setvbuf+0x13c>
 8009d8e:	f8dd 9000 	ldr.w	r9, [sp]
 8009d92:	45a9      	cmp	r9, r5
 8009d94:	d13c      	bne.n	8009e10 <setvbuf+0x120>
 8009d96:	f04f 30ff 	mov.w	r0, #4294967295
 8009d9a:	89a3      	ldrh	r3, [r4, #12]
 8009d9c:	f043 0302 	orr.w	r3, r3, #2
 8009da0:	81a3      	strh	r3, [r4, #12]
 8009da2:	2300      	movs	r3, #0
 8009da4:	60a3      	str	r3, [r4, #8]
 8009da6:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009daa:	6023      	str	r3, [r4, #0]
 8009dac:	6123      	str	r3, [r4, #16]
 8009dae:	2301      	movs	r3, #1
 8009db0:	6163      	str	r3, [r4, #20]
 8009db2:	b003      	add	sp, #12
 8009db4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009db8:	4b22      	ldr	r3, [pc, #136]	; (8009e44 <setvbuf+0x154>)
 8009dba:	429c      	cmp	r4, r3
 8009dbc:	d101      	bne.n	8009dc2 <setvbuf+0xd2>
 8009dbe:	68b4      	ldr	r4, [r6, #8]
 8009dc0:	e7a8      	b.n	8009d14 <setvbuf+0x24>
 8009dc2:	4b21      	ldr	r3, [pc, #132]	; (8009e48 <setvbuf+0x158>)
 8009dc4:	429c      	cmp	r4, r3
 8009dc6:	bf08      	it	eq
 8009dc8:	68f4      	ldreq	r4, [r6, #12]
 8009dca:	e7a3      	b.n	8009d14 <setvbuf+0x24>
 8009dcc:	2f00      	cmp	r7, #0
 8009dce:	d0d8      	beq.n	8009d82 <setvbuf+0x92>
 8009dd0:	69b3      	ldr	r3, [r6, #24]
 8009dd2:	b913      	cbnz	r3, 8009dda <setvbuf+0xea>
 8009dd4:	4630      	mov	r0, r6
 8009dd6:	f000 f9e9 	bl	800a1ac <__sinit>
 8009dda:	f1b8 0f01 	cmp.w	r8, #1
 8009dde:	bf08      	it	eq
 8009de0:	89a3      	ldrheq	r3, [r4, #12]
 8009de2:	6027      	str	r7, [r4, #0]
 8009de4:	bf04      	itt	eq
 8009de6:	f043 0301 	orreq.w	r3, r3, #1
 8009dea:	81a3      	strheq	r3, [r4, #12]
 8009dec:	89a3      	ldrh	r3, [r4, #12]
 8009dee:	f013 0008 	ands.w	r0, r3, #8
 8009df2:	e9c4 7504 	strd	r7, r5, [r4, #16]
 8009df6:	d01b      	beq.n	8009e30 <setvbuf+0x140>
 8009df8:	f013 0001 	ands.w	r0, r3, #1
 8009dfc:	bf18      	it	ne
 8009dfe:	426d      	negne	r5, r5
 8009e00:	f04f 0300 	mov.w	r3, #0
 8009e04:	bf1d      	ittte	ne
 8009e06:	60a3      	strne	r3, [r4, #8]
 8009e08:	61a5      	strne	r5, [r4, #24]
 8009e0a:	4618      	movne	r0, r3
 8009e0c:	60a5      	streq	r5, [r4, #8]
 8009e0e:	e7d0      	b.n	8009db2 <setvbuf+0xc2>
 8009e10:	4648      	mov	r0, r9
 8009e12:	f000 fab9 	bl	800a388 <malloc>
 8009e16:	4607      	mov	r7, r0
 8009e18:	2800      	cmp	r0, #0
 8009e1a:	d0bc      	beq.n	8009d96 <setvbuf+0xa6>
 8009e1c:	89a3      	ldrh	r3, [r4, #12]
 8009e1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009e22:	81a3      	strh	r3, [r4, #12]
 8009e24:	464d      	mov	r5, r9
 8009e26:	e7d3      	b.n	8009dd0 <setvbuf+0xe0>
 8009e28:	2000      	movs	r0, #0
 8009e2a:	e7b6      	b.n	8009d9a <setvbuf+0xaa>
 8009e2c:	46a9      	mov	r9, r5
 8009e2e:	e7f5      	b.n	8009e1c <setvbuf+0x12c>
 8009e30:	60a0      	str	r0, [r4, #8]
 8009e32:	e7be      	b.n	8009db2 <setvbuf+0xc2>
 8009e34:	f04f 30ff 	mov.w	r0, #4294967295
 8009e38:	e7bb      	b.n	8009db2 <setvbuf+0xc2>
 8009e3a:	bf00      	nop
 8009e3c:	20000064 	.word	0x20000064
 8009e40:	0800b120 	.word	0x0800b120
 8009e44:	0800b140 	.word	0x0800b140
 8009e48:	0800b100 	.word	0x0800b100

08009e4c <__swbuf_r>:
 8009e4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e4e:	460e      	mov	r6, r1
 8009e50:	4614      	mov	r4, r2
 8009e52:	4605      	mov	r5, r0
 8009e54:	b118      	cbz	r0, 8009e5e <__swbuf_r+0x12>
 8009e56:	6983      	ldr	r3, [r0, #24]
 8009e58:	b90b      	cbnz	r3, 8009e5e <__swbuf_r+0x12>
 8009e5a:	f000 f9a7 	bl	800a1ac <__sinit>
 8009e5e:	4b21      	ldr	r3, [pc, #132]	; (8009ee4 <__swbuf_r+0x98>)
 8009e60:	429c      	cmp	r4, r3
 8009e62:	d12a      	bne.n	8009eba <__swbuf_r+0x6e>
 8009e64:	686c      	ldr	r4, [r5, #4]
 8009e66:	69a3      	ldr	r3, [r4, #24]
 8009e68:	60a3      	str	r3, [r4, #8]
 8009e6a:	89a3      	ldrh	r3, [r4, #12]
 8009e6c:	071a      	lsls	r2, r3, #28
 8009e6e:	d52e      	bpl.n	8009ece <__swbuf_r+0x82>
 8009e70:	6923      	ldr	r3, [r4, #16]
 8009e72:	b363      	cbz	r3, 8009ece <__swbuf_r+0x82>
 8009e74:	6923      	ldr	r3, [r4, #16]
 8009e76:	6820      	ldr	r0, [r4, #0]
 8009e78:	1ac0      	subs	r0, r0, r3
 8009e7a:	6963      	ldr	r3, [r4, #20]
 8009e7c:	b2f6      	uxtb	r6, r6
 8009e7e:	4283      	cmp	r3, r0
 8009e80:	4637      	mov	r7, r6
 8009e82:	dc04      	bgt.n	8009e8e <__swbuf_r+0x42>
 8009e84:	4621      	mov	r1, r4
 8009e86:	4628      	mov	r0, r5
 8009e88:	f000 f926 	bl	800a0d8 <_fflush_r>
 8009e8c:	bb28      	cbnz	r0, 8009eda <__swbuf_r+0x8e>
 8009e8e:	68a3      	ldr	r3, [r4, #8]
 8009e90:	3b01      	subs	r3, #1
 8009e92:	60a3      	str	r3, [r4, #8]
 8009e94:	6823      	ldr	r3, [r4, #0]
 8009e96:	1c5a      	adds	r2, r3, #1
 8009e98:	6022      	str	r2, [r4, #0]
 8009e9a:	701e      	strb	r6, [r3, #0]
 8009e9c:	6963      	ldr	r3, [r4, #20]
 8009e9e:	3001      	adds	r0, #1
 8009ea0:	4283      	cmp	r3, r0
 8009ea2:	d004      	beq.n	8009eae <__swbuf_r+0x62>
 8009ea4:	89a3      	ldrh	r3, [r4, #12]
 8009ea6:	07db      	lsls	r3, r3, #31
 8009ea8:	d519      	bpl.n	8009ede <__swbuf_r+0x92>
 8009eaa:	2e0a      	cmp	r6, #10
 8009eac:	d117      	bne.n	8009ede <__swbuf_r+0x92>
 8009eae:	4621      	mov	r1, r4
 8009eb0:	4628      	mov	r0, r5
 8009eb2:	f000 f911 	bl	800a0d8 <_fflush_r>
 8009eb6:	b190      	cbz	r0, 8009ede <__swbuf_r+0x92>
 8009eb8:	e00f      	b.n	8009eda <__swbuf_r+0x8e>
 8009eba:	4b0b      	ldr	r3, [pc, #44]	; (8009ee8 <__swbuf_r+0x9c>)
 8009ebc:	429c      	cmp	r4, r3
 8009ebe:	d101      	bne.n	8009ec4 <__swbuf_r+0x78>
 8009ec0:	68ac      	ldr	r4, [r5, #8]
 8009ec2:	e7d0      	b.n	8009e66 <__swbuf_r+0x1a>
 8009ec4:	4b09      	ldr	r3, [pc, #36]	; (8009eec <__swbuf_r+0xa0>)
 8009ec6:	429c      	cmp	r4, r3
 8009ec8:	bf08      	it	eq
 8009eca:	68ec      	ldreq	r4, [r5, #12]
 8009ecc:	e7cb      	b.n	8009e66 <__swbuf_r+0x1a>
 8009ece:	4621      	mov	r1, r4
 8009ed0:	4628      	mov	r0, r5
 8009ed2:	f000 f80d 	bl	8009ef0 <__swsetup_r>
 8009ed6:	2800      	cmp	r0, #0
 8009ed8:	d0cc      	beq.n	8009e74 <__swbuf_r+0x28>
 8009eda:	f04f 37ff 	mov.w	r7, #4294967295
 8009ede:	4638      	mov	r0, r7
 8009ee0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009ee2:	bf00      	nop
 8009ee4:	0800b120 	.word	0x0800b120
 8009ee8:	0800b140 	.word	0x0800b140
 8009eec:	0800b100 	.word	0x0800b100

08009ef0 <__swsetup_r>:
 8009ef0:	4b32      	ldr	r3, [pc, #200]	; (8009fbc <__swsetup_r+0xcc>)
 8009ef2:	b570      	push	{r4, r5, r6, lr}
 8009ef4:	681d      	ldr	r5, [r3, #0]
 8009ef6:	4606      	mov	r6, r0
 8009ef8:	460c      	mov	r4, r1
 8009efa:	b125      	cbz	r5, 8009f06 <__swsetup_r+0x16>
 8009efc:	69ab      	ldr	r3, [r5, #24]
 8009efe:	b913      	cbnz	r3, 8009f06 <__swsetup_r+0x16>
 8009f00:	4628      	mov	r0, r5
 8009f02:	f000 f953 	bl	800a1ac <__sinit>
 8009f06:	4b2e      	ldr	r3, [pc, #184]	; (8009fc0 <__swsetup_r+0xd0>)
 8009f08:	429c      	cmp	r4, r3
 8009f0a:	d10f      	bne.n	8009f2c <__swsetup_r+0x3c>
 8009f0c:	686c      	ldr	r4, [r5, #4]
 8009f0e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009f12:	b29a      	uxth	r2, r3
 8009f14:	0715      	lsls	r5, r2, #28
 8009f16:	d42c      	bmi.n	8009f72 <__swsetup_r+0x82>
 8009f18:	06d0      	lsls	r0, r2, #27
 8009f1a:	d411      	bmi.n	8009f40 <__swsetup_r+0x50>
 8009f1c:	2209      	movs	r2, #9
 8009f1e:	6032      	str	r2, [r6, #0]
 8009f20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009f24:	81a3      	strh	r3, [r4, #12]
 8009f26:	f04f 30ff 	mov.w	r0, #4294967295
 8009f2a:	e03e      	b.n	8009faa <__swsetup_r+0xba>
 8009f2c:	4b25      	ldr	r3, [pc, #148]	; (8009fc4 <__swsetup_r+0xd4>)
 8009f2e:	429c      	cmp	r4, r3
 8009f30:	d101      	bne.n	8009f36 <__swsetup_r+0x46>
 8009f32:	68ac      	ldr	r4, [r5, #8]
 8009f34:	e7eb      	b.n	8009f0e <__swsetup_r+0x1e>
 8009f36:	4b24      	ldr	r3, [pc, #144]	; (8009fc8 <__swsetup_r+0xd8>)
 8009f38:	429c      	cmp	r4, r3
 8009f3a:	bf08      	it	eq
 8009f3c:	68ec      	ldreq	r4, [r5, #12]
 8009f3e:	e7e6      	b.n	8009f0e <__swsetup_r+0x1e>
 8009f40:	0751      	lsls	r1, r2, #29
 8009f42:	d512      	bpl.n	8009f6a <__swsetup_r+0x7a>
 8009f44:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009f46:	b141      	cbz	r1, 8009f5a <__swsetup_r+0x6a>
 8009f48:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009f4c:	4299      	cmp	r1, r3
 8009f4e:	d002      	beq.n	8009f56 <__swsetup_r+0x66>
 8009f50:	4630      	mov	r0, r6
 8009f52:	f000 fa21 	bl	800a398 <_free_r>
 8009f56:	2300      	movs	r3, #0
 8009f58:	6363      	str	r3, [r4, #52]	; 0x34
 8009f5a:	89a3      	ldrh	r3, [r4, #12]
 8009f5c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009f60:	81a3      	strh	r3, [r4, #12]
 8009f62:	2300      	movs	r3, #0
 8009f64:	6063      	str	r3, [r4, #4]
 8009f66:	6923      	ldr	r3, [r4, #16]
 8009f68:	6023      	str	r3, [r4, #0]
 8009f6a:	89a3      	ldrh	r3, [r4, #12]
 8009f6c:	f043 0308 	orr.w	r3, r3, #8
 8009f70:	81a3      	strh	r3, [r4, #12]
 8009f72:	6923      	ldr	r3, [r4, #16]
 8009f74:	b94b      	cbnz	r3, 8009f8a <__swsetup_r+0x9a>
 8009f76:	89a3      	ldrh	r3, [r4, #12]
 8009f78:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009f7c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009f80:	d003      	beq.n	8009f8a <__swsetup_r+0x9a>
 8009f82:	4621      	mov	r1, r4
 8009f84:	4630      	mov	r0, r6
 8009f86:	f000 f9bf 	bl	800a308 <__smakebuf_r>
 8009f8a:	89a2      	ldrh	r2, [r4, #12]
 8009f8c:	f012 0301 	ands.w	r3, r2, #1
 8009f90:	d00c      	beq.n	8009fac <__swsetup_r+0xbc>
 8009f92:	2300      	movs	r3, #0
 8009f94:	60a3      	str	r3, [r4, #8]
 8009f96:	6963      	ldr	r3, [r4, #20]
 8009f98:	425b      	negs	r3, r3
 8009f9a:	61a3      	str	r3, [r4, #24]
 8009f9c:	6923      	ldr	r3, [r4, #16]
 8009f9e:	b953      	cbnz	r3, 8009fb6 <__swsetup_r+0xc6>
 8009fa0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009fa4:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8009fa8:	d1ba      	bne.n	8009f20 <__swsetup_r+0x30>
 8009faa:	bd70      	pop	{r4, r5, r6, pc}
 8009fac:	0792      	lsls	r2, r2, #30
 8009fae:	bf58      	it	pl
 8009fb0:	6963      	ldrpl	r3, [r4, #20]
 8009fb2:	60a3      	str	r3, [r4, #8]
 8009fb4:	e7f2      	b.n	8009f9c <__swsetup_r+0xac>
 8009fb6:	2000      	movs	r0, #0
 8009fb8:	e7f7      	b.n	8009faa <__swsetup_r+0xba>
 8009fba:	bf00      	nop
 8009fbc:	20000064 	.word	0x20000064
 8009fc0:	0800b120 	.word	0x0800b120
 8009fc4:	0800b140 	.word	0x0800b140
 8009fc8:	0800b100 	.word	0x0800b100

08009fcc <__sflush_r>:
 8009fcc:	898a      	ldrh	r2, [r1, #12]
 8009fce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009fd2:	4605      	mov	r5, r0
 8009fd4:	0710      	lsls	r0, r2, #28
 8009fd6:	460c      	mov	r4, r1
 8009fd8:	d458      	bmi.n	800a08c <__sflush_r+0xc0>
 8009fda:	684b      	ldr	r3, [r1, #4]
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	dc05      	bgt.n	8009fec <__sflush_r+0x20>
 8009fe0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	dc02      	bgt.n	8009fec <__sflush_r+0x20>
 8009fe6:	2000      	movs	r0, #0
 8009fe8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009fec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009fee:	2e00      	cmp	r6, #0
 8009ff0:	d0f9      	beq.n	8009fe6 <__sflush_r+0x1a>
 8009ff2:	2300      	movs	r3, #0
 8009ff4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009ff8:	682f      	ldr	r7, [r5, #0]
 8009ffa:	6a21      	ldr	r1, [r4, #32]
 8009ffc:	602b      	str	r3, [r5, #0]
 8009ffe:	d032      	beq.n	800a066 <__sflush_r+0x9a>
 800a000:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a002:	89a3      	ldrh	r3, [r4, #12]
 800a004:	075a      	lsls	r2, r3, #29
 800a006:	d505      	bpl.n	800a014 <__sflush_r+0x48>
 800a008:	6863      	ldr	r3, [r4, #4]
 800a00a:	1ac0      	subs	r0, r0, r3
 800a00c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a00e:	b10b      	cbz	r3, 800a014 <__sflush_r+0x48>
 800a010:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a012:	1ac0      	subs	r0, r0, r3
 800a014:	2300      	movs	r3, #0
 800a016:	4602      	mov	r2, r0
 800a018:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a01a:	6a21      	ldr	r1, [r4, #32]
 800a01c:	4628      	mov	r0, r5
 800a01e:	47b0      	blx	r6
 800a020:	1c43      	adds	r3, r0, #1
 800a022:	89a3      	ldrh	r3, [r4, #12]
 800a024:	d106      	bne.n	800a034 <__sflush_r+0x68>
 800a026:	6829      	ldr	r1, [r5, #0]
 800a028:	291d      	cmp	r1, #29
 800a02a:	d848      	bhi.n	800a0be <__sflush_r+0xf2>
 800a02c:	4a29      	ldr	r2, [pc, #164]	; (800a0d4 <__sflush_r+0x108>)
 800a02e:	40ca      	lsrs	r2, r1
 800a030:	07d6      	lsls	r6, r2, #31
 800a032:	d544      	bpl.n	800a0be <__sflush_r+0xf2>
 800a034:	2200      	movs	r2, #0
 800a036:	6062      	str	r2, [r4, #4]
 800a038:	04d9      	lsls	r1, r3, #19
 800a03a:	6922      	ldr	r2, [r4, #16]
 800a03c:	6022      	str	r2, [r4, #0]
 800a03e:	d504      	bpl.n	800a04a <__sflush_r+0x7e>
 800a040:	1c42      	adds	r2, r0, #1
 800a042:	d101      	bne.n	800a048 <__sflush_r+0x7c>
 800a044:	682b      	ldr	r3, [r5, #0]
 800a046:	b903      	cbnz	r3, 800a04a <__sflush_r+0x7e>
 800a048:	6560      	str	r0, [r4, #84]	; 0x54
 800a04a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a04c:	602f      	str	r7, [r5, #0]
 800a04e:	2900      	cmp	r1, #0
 800a050:	d0c9      	beq.n	8009fe6 <__sflush_r+0x1a>
 800a052:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a056:	4299      	cmp	r1, r3
 800a058:	d002      	beq.n	800a060 <__sflush_r+0x94>
 800a05a:	4628      	mov	r0, r5
 800a05c:	f000 f99c 	bl	800a398 <_free_r>
 800a060:	2000      	movs	r0, #0
 800a062:	6360      	str	r0, [r4, #52]	; 0x34
 800a064:	e7c0      	b.n	8009fe8 <__sflush_r+0x1c>
 800a066:	2301      	movs	r3, #1
 800a068:	4628      	mov	r0, r5
 800a06a:	47b0      	blx	r6
 800a06c:	1c41      	adds	r1, r0, #1
 800a06e:	d1c8      	bne.n	800a002 <__sflush_r+0x36>
 800a070:	682b      	ldr	r3, [r5, #0]
 800a072:	2b00      	cmp	r3, #0
 800a074:	d0c5      	beq.n	800a002 <__sflush_r+0x36>
 800a076:	2b1d      	cmp	r3, #29
 800a078:	d001      	beq.n	800a07e <__sflush_r+0xb2>
 800a07a:	2b16      	cmp	r3, #22
 800a07c:	d101      	bne.n	800a082 <__sflush_r+0xb6>
 800a07e:	602f      	str	r7, [r5, #0]
 800a080:	e7b1      	b.n	8009fe6 <__sflush_r+0x1a>
 800a082:	89a3      	ldrh	r3, [r4, #12]
 800a084:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a088:	81a3      	strh	r3, [r4, #12]
 800a08a:	e7ad      	b.n	8009fe8 <__sflush_r+0x1c>
 800a08c:	690f      	ldr	r7, [r1, #16]
 800a08e:	2f00      	cmp	r7, #0
 800a090:	d0a9      	beq.n	8009fe6 <__sflush_r+0x1a>
 800a092:	0793      	lsls	r3, r2, #30
 800a094:	680e      	ldr	r6, [r1, #0]
 800a096:	bf08      	it	eq
 800a098:	694b      	ldreq	r3, [r1, #20]
 800a09a:	600f      	str	r7, [r1, #0]
 800a09c:	bf18      	it	ne
 800a09e:	2300      	movne	r3, #0
 800a0a0:	eba6 0807 	sub.w	r8, r6, r7
 800a0a4:	608b      	str	r3, [r1, #8]
 800a0a6:	f1b8 0f00 	cmp.w	r8, #0
 800a0aa:	dd9c      	ble.n	8009fe6 <__sflush_r+0x1a>
 800a0ac:	4643      	mov	r3, r8
 800a0ae:	463a      	mov	r2, r7
 800a0b0:	6a21      	ldr	r1, [r4, #32]
 800a0b2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a0b4:	4628      	mov	r0, r5
 800a0b6:	47b0      	blx	r6
 800a0b8:	2800      	cmp	r0, #0
 800a0ba:	dc06      	bgt.n	800a0ca <__sflush_r+0xfe>
 800a0bc:	89a3      	ldrh	r3, [r4, #12]
 800a0be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a0c2:	81a3      	strh	r3, [r4, #12]
 800a0c4:	f04f 30ff 	mov.w	r0, #4294967295
 800a0c8:	e78e      	b.n	8009fe8 <__sflush_r+0x1c>
 800a0ca:	4407      	add	r7, r0
 800a0cc:	eba8 0800 	sub.w	r8, r8, r0
 800a0d0:	e7e9      	b.n	800a0a6 <__sflush_r+0xda>
 800a0d2:	bf00      	nop
 800a0d4:	20400001 	.word	0x20400001

0800a0d8 <_fflush_r>:
 800a0d8:	b538      	push	{r3, r4, r5, lr}
 800a0da:	690b      	ldr	r3, [r1, #16]
 800a0dc:	4605      	mov	r5, r0
 800a0de:	460c      	mov	r4, r1
 800a0e0:	b1db      	cbz	r3, 800a11a <_fflush_r+0x42>
 800a0e2:	b118      	cbz	r0, 800a0ec <_fflush_r+0x14>
 800a0e4:	6983      	ldr	r3, [r0, #24]
 800a0e6:	b90b      	cbnz	r3, 800a0ec <_fflush_r+0x14>
 800a0e8:	f000 f860 	bl	800a1ac <__sinit>
 800a0ec:	4b0c      	ldr	r3, [pc, #48]	; (800a120 <_fflush_r+0x48>)
 800a0ee:	429c      	cmp	r4, r3
 800a0f0:	d109      	bne.n	800a106 <_fflush_r+0x2e>
 800a0f2:	686c      	ldr	r4, [r5, #4]
 800a0f4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a0f8:	b17b      	cbz	r3, 800a11a <_fflush_r+0x42>
 800a0fa:	4621      	mov	r1, r4
 800a0fc:	4628      	mov	r0, r5
 800a0fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a102:	f7ff bf63 	b.w	8009fcc <__sflush_r>
 800a106:	4b07      	ldr	r3, [pc, #28]	; (800a124 <_fflush_r+0x4c>)
 800a108:	429c      	cmp	r4, r3
 800a10a:	d101      	bne.n	800a110 <_fflush_r+0x38>
 800a10c:	68ac      	ldr	r4, [r5, #8]
 800a10e:	e7f1      	b.n	800a0f4 <_fflush_r+0x1c>
 800a110:	4b05      	ldr	r3, [pc, #20]	; (800a128 <_fflush_r+0x50>)
 800a112:	429c      	cmp	r4, r3
 800a114:	bf08      	it	eq
 800a116:	68ec      	ldreq	r4, [r5, #12]
 800a118:	e7ec      	b.n	800a0f4 <_fflush_r+0x1c>
 800a11a:	2000      	movs	r0, #0
 800a11c:	bd38      	pop	{r3, r4, r5, pc}
 800a11e:	bf00      	nop
 800a120:	0800b120 	.word	0x0800b120
 800a124:	0800b140 	.word	0x0800b140
 800a128:	0800b100 	.word	0x0800b100

0800a12c <std>:
 800a12c:	2300      	movs	r3, #0
 800a12e:	b510      	push	{r4, lr}
 800a130:	4604      	mov	r4, r0
 800a132:	e9c0 3300 	strd	r3, r3, [r0]
 800a136:	6083      	str	r3, [r0, #8]
 800a138:	8181      	strh	r1, [r0, #12]
 800a13a:	6643      	str	r3, [r0, #100]	; 0x64
 800a13c:	81c2      	strh	r2, [r0, #14]
 800a13e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a142:	6183      	str	r3, [r0, #24]
 800a144:	4619      	mov	r1, r3
 800a146:	2208      	movs	r2, #8
 800a148:	305c      	adds	r0, #92	; 0x5c
 800a14a:	f7ff fd45 	bl	8009bd8 <memset>
 800a14e:	4b05      	ldr	r3, [pc, #20]	; (800a164 <std+0x38>)
 800a150:	6263      	str	r3, [r4, #36]	; 0x24
 800a152:	4b05      	ldr	r3, [pc, #20]	; (800a168 <std+0x3c>)
 800a154:	62a3      	str	r3, [r4, #40]	; 0x28
 800a156:	4b05      	ldr	r3, [pc, #20]	; (800a16c <std+0x40>)
 800a158:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a15a:	4b05      	ldr	r3, [pc, #20]	; (800a170 <std+0x44>)
 800a15c:	6224      	str	r4, [r4, #32]
 800a15e:	6323      	str	r3, [r4, #48]	; 0x30
 800a160:	bd10      	pop	{r4, pc}
 800a162:	bf00      	nop
 800a164:	0800aa99 	.word	0x0800aa99
 800a168:	0800aabb 	.word	0x0800aabb
 800a16c:	0800aaf3 	.word	0x0800aaf3
 800a170:	0800ab17 	.word	0x0800ab17

0800a174 <_cleanup_r>:
 800a174:	4901      	ldr	r1, [pc, #4]	; (800a17c <_cleanup_r+0x8>)
 800a176:	f000 b885 	b.w	800a284 <_fwalk_reent>
 800a17a:	bf00      	nop
 800a17c:	0800a0d9 	.word	0x0800a0d9

0800a180 <__sfmoreglue>:
 800a180:	b570      	push	{r4, r5, r6, lr}
 800a182:	1e4a      	subs	r2, r1, #1
 800a184:	2568      	movs	r5, #104	; 0x68
 800a186:	4355      	muls	r5, r2
 800a188:	460e      	mov	r6, r1
 800a18a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a18e:	f000 f951 	bl	800a434 <_malloc_r>
 800a192:	4604      	mov	r4, r0
 800a194:	b140      	cbz	r0, 800a1a8 <__sfmoreglue+0x28>
 800a196:	2100      	movs	r1, #0
 800a198:	e9c0 1600 	strd	r1, r6, [r0]
 800a19c:	300c      	adds	r0, #12
 800a19e:	60a0      	str	r0, [r4, #8]
 800a1a0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a1a4:	f7ff fd18 	bl	8009bd8 <memset>
 800a1a8:	4620      	mov	r0, r4
 800a1aa:	bd70      	pop	{r4, r5, r6, pc}

0800a1ac <__sinit>:
 800a1ac:	6983      	ldr	r3, [r0, #24]
 800a1ae:	b510      	push	{r4, lr}
 800a1b0:	4604      	mov	r4, r0
 800a1b2:	bb33      	cbnz	r3, 800a202 <__sinit+0x56>
 800a1b4:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800a1b8:	6503      	str	r3, [r0, #80]	; 0x50
 800a1ba:	4b12      	ldr	r3, [pc, #72]	; (800a204 <__sinit+0x58>)
 800a1bc:	4a12      	ldr	r2, [pc, #72]	; (800a208 <__sinit+0x5c>)
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	6282      	str	r2, [r0, #40]	; 0x28
 800a1c2:	4298      	cmp	r0, r3
 800a1c4:	bf04      	itt	eq
 800a1c6:	2301      	moveq	r3, #1
 800a1c8:	6183      	streq	r3, [r0, #24]
 800a1ca:	f000 f81f 	bl	800a20c <__sfp>
 800a1ce:	6060      	str	r0, [r4, #4]
 800a1d0:	4620      	mov	r0, r4
 800a1d2:	f000 f81b 	bl	800a20c <__sfp>
 800a1d6:	60a0      	str	r0, [r4, #8]
 800a1d8:	4620      	mov	r0, r4
 800a1da:	f000 f817 	bl	800a20c <__sfp>
 800a1de:	2200      	movs	r2, #0
 800a1e0:	60e0      	str	r0, [r4, #12]
 800a1e2:	2104      	movs	r1, #4
 800a1e4:	6860      	ldr	r0, [r4, #4]
 800a1e6:	f7ff ffa1 	bl	800a12c <std>
 800a1ea:	2201      	movs	r2, #1
 800a1ec:	2109      	movs	r1, #9
 800a1ee:	68a0      	ldr	r0, [r4, #8]
 800a1f0:	f7ff ff9c 	bl	800a12c <std>
 800a1f4:	2202      	movs	r2, #2
 800a1f6:	2112      	movs	r1, #18
 800a1f8:	68e0      	ldr	r0, [r4, #12]
 800a1fa:	f7ff ff97 	bl	800a12c <std>
 800a1fe:	2301      	movs	r3, #1
 800a200:	61a3      	str	r3, [r4, #24]
 800a202:	bd10      	pop	{r4, pc}
 800a204:	0800b0fc 	.word	0x0800b0fc
 800a208:	0800a175 	.word	0x0800a175

0800a20c <__sfp>:
 800a20c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a20e:	4b1b      	ldr	r3, [pc, #108]	; (800a27c <__sfp+0x70>)
 800a210:	681e      	ldr	r6, [r3, #0]
 800a212:	69b3      	ldr	r3, [r6, #24]
 800a214:	4607      	mov	r7, r0
 800a216:	b913      	cbnz	r3, 800a21e <__sfp+0x12>
 800a218:	4630      	mov	r0, r6
 800a21a:	f7ff ffc7 	bl	800a1ac <__sinit>
 800a21e:	3648      	adds	r6, #72	; 0x48
 800a220:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a224:	3b01      	subs	r3, #1
 800a226:	d503      	bpl.n	800a230 <__sfp+0x24>
 800a228:	6833      	ldr	r3, [r6, #0]
 800a22a:	b133      	cbz	r3, 800a23a <__sfp+0x2e>
 800a22c:	6836      	ldr	r6, [r6, #0]
 800a22e:	e7f7      	b.n	800a220 <__sfp+0x14>
 800a230:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a234:	b16d      	cbz	r5, 800a252 <__sfp+0x46>
 800a236:	3468      	adds	r4, #104	; 0x68
 800a238:	e7f4      	b.n	800a224 <__sfp+0x18>
 800a23a:	2104      	movs	r1, #4
 800a23c:	4638      	mov	r0, r7
 800a23e:	f7ff ff9f 	bl	800a180 <__sfmoreglue>
 800a242:	6030      	str	r0, [r6, #0]
 800a244:	2800      	cmp	r0, #0
 800a246:	d1f1      	bne.n	800a22c <__sfp+0x20>
 800a248:	230c      	movs	r3, #12
 800a24a:	603b      	str	r3, [r7, #0]
 800a24c:	4604      	mov	r4, r0
 800a24e:	4620      	mov	r0, r4
 800a250:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a252:	4b0b      	ldr	r3, [pc, #44]	; (800a280 <__sfp+0x74>)
 800a254:	6665      	str	r5, [r4, #100]	; 0x64
 800a256:	e9c4 5500 	strd	r5, r5, [r4]
 800a25a:	60a5      	str	r5, [r4, #8]
 800a25c:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800a260:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800a264:	2208      	movs	r2, #8
 800a266:	4629      	mov	r1, r5
 800a268:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a26c:	f7ff fcb4 	bl	8009bd8 <memset>
 800a270:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a274:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a278:	e7e9      	b.n	800a24e <__sfp+0x42>
 800a27a:	bf00      	nop
 800a27c:	0800b0fc 	.word	0x0800b0fc
 800a280:	ffff0001 	.word	0xffff0001

0800a284 <_fwalk_reent>:
 800a284:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a288:	4680      	mov	r8, r0
 800a28a:	4689      	mov	r9, r1
 800a28c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a290:	2600      	movs	r6, #0
 800a292:	b914      	cbnz	r4, 800a29a <_fwalk_reent+0x16>
 800a294:	4630      	mov	r0, r6
 800a296:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a29a:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800a29e:	3f01      	subs	r7, #1
 800a2a0:	d501      	bpl.n	800a2a6 <_fwalk_reent+0x22>
 800a2a2:	6824      	ldr	r4, [r4, #0]
 800a2a4:	e7f5      	b.n	800a292 <_fwalk_reent+0xe>
 800a2a6:	89ab      	ldrh	r3, [r5, #12]
 800a2a8:	2b01      	cmp	r3, #1
 800a2aa:	d907      	bls.n	800a2bc <_fwalk_reent+0x38>
 800a2ac:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a2b0:	3301      	adds	r3, #1
 800a2b2:	d003      	beq.n	800a2bc <_fwalk_reent+0x38>
 800a2b4:	4629      	mov	r1, r5
 800a2b6:	4640      	mov	r0, r8
 800a2b8:	47c8      	blx	r9
 800a2ba:	4306      	orrs	r6, r0
 800a2bc:	3568      	adds	r5, #104	; 0x68
 800a2be:	e7ee      	b.n	800a29e <_fwalk_reent+0x1a>

0800a2c0 <__swhatbuf_r>:
 800a2c0:	b570      	push	{r4, r5, r6, lr}
 800a2c2:	460e      	mov	r6, r1
 800a2c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a2c8:	2900      	cmp	r1, #0
 800a2ca:	b096      	sub	sp, #88	; 0x58
 800a2cc:	4614      	mov	r4, r2
 800a2ce:	461d      	mov	r5, r3
 800a2d0:	da07      	bge.n	800a2e2 <__swhatbuf_r+0x22>
 800a2d2:	2300      	movs	r3, #0
 800a2d4:	602b      	str	r3, [r5, #0]
 800a2d6:	89b3      	ldrh	r3, [r6, #12]
 800a2d8:	061a      	lsls	r2, r3, #24
 800a2da:	d410      	bmi.n	800a2fe <__swhatbuf_r+0x3e>
 800a2dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a2e0:	e00e      	b.n	800a300 <__swhatbuf_r+0x40>
 800a2e2:	466a      	mov	r2, sp
 800a2e4:	f000 fc3e 	bl	800ab64 <_fstat_r>
 800a2e8:	2800      	cmp	r0, #0
 800a2ea:	dbf2      	blt.n	800a2d2 <__swhatbuf_r+0x12>
 800a2ec:	9a01      	ldr	r2, [sp, #4]
 800a2ee:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a2f2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a2f6:	425a      	negs	r2, r3
 800a2f8:	415a      	adcs	r2, r3
 800a2fa:	602a      	str	r2, [r5, #0]
 800a2fc:	e7ee      	b.n	800a2dc <__swhatbuf_r+0x1c>
 800a2fe:	2340      	movs	r3, #64	; 0x40
 800a300:	2000      	movs	r0, #0
 800a302:	6023      	str	r3, [r4, #0]
 800a304:	b016      	add	sp, #88	; 0x58
 800a306:	bd70      	pop	{r4, r5, r6, pc}

0800a308 <__smakebuf_r>:
 800a308:	898b      	ldrh	r3, [r1, #12]
 800a30a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a30c:	079d      	lsls	r5, r3, #30
 800a30e:	4606      	mov	r6, r0
 800a310:	460c      	mov	r4, r1
 800a312:	d507      	bpl.n	800a324 <__smakebuf_r+0x1c>
 800a314:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a318:	6023      	str	r3, [r4, #0]
 800a31a:	6123      	str	r3, [r4, #16]
 800a31c:	2301      	movs	r3, #1
 800a31e:	6163      	str	r3, [r4, #20]
 800a320:	b002      	add	sp, #8
 800a322:	bd70      	pop	{r4, r5, r6, pc}
 800a324:	ab01      	add	r3, sp, #4
 800a326:	466a      	mov	r2, sp
 800a328:	f7ff ffca 	bl	800a2c0 <__swhatbuf_r>
 800a32c:	9900      	ldr	r1, [sp, #0]
 800a32e:	4605      	mov	r5, r0
 800a330:	4630      	mov	r0, r6
 800a332:	f000 f87f 	bl	800a434 <_malloc_r>
 800a336:	b948      	cbnz	r0, 800a34c <__smakebuf_r+0x44>
 800a338:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a33c:	059a      	lsls	r2, r3, #22
 800a33e:	d4ef      	bmi.n	800a320 <__smakebuf_r+0x18>
 800a340:	f023 0303 	bic.w	r3, r3, #3
 800a344:	f043 0302 	orr.w	r3, r3, #2
 800a348:	81a3      	strh	r3, [r4, #12]
 800a34a:	e7e3      	b.n	800a314 <__smakebuf_r+0xc>
 800a34c:	4b0d      	ldr	r3, [pc, #52]	; (800a384 <__smakebuf_r+0x7c>)
 800a34e:	62b3      	str	r3, [r6, #40]	; 0x28
 800a350:	89a3      	ldrh	r3, [r4, #12]
 800a352:	6020      	str	r0, [r4, #0]
 800a354:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a358:	81a3      	strh	r3, [r4, #12]
 800a35a:	9b00      	ldr	r3, [sp, #0]
 800a35c:	6163      	str	r3, [r4, #20]
 800a35e:	9b01      	ldr	r3, [sp, #4]
 800a360:	6120      	str	r0, [r4, #16]
 800a362:	b15b      	cbz	r3, 800a37c <__smakebuf_r+0x74>
 800a364:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a368:	4630      	mov	r0, r6
 800a36a:	f000 fc0d 	bl	800ab88 <_isatty_r>
 800a36e:	b128      	cbz	r0, 800a37c <__smakebuf_r+0x74>
 800a370:	89a3      	ldrh	r3, [r4, #12]
 800a372:	f023 0303 	bic.w	r3, r3, #3
 800a376:	f043 0301 	orr.w	r3, r3, #1
 800a37a:	81a3      	strh	r3, [r4, #12]
 800a37c:	89a3      	ldrh	r3, [r4, #12]
 800a37e:	431d      	orrs	r5, r3
 800a380:	81a5      	strh	r5, [r4, #12]
 800a382:	e7cd      	b.n	800a320 <__smakebuf_r+0x18>
 800a384:	0800a175 	.word	0x0800a175

0800a388 <malloc>:
 800a388:	4b02      	ldr	r3, [pc, #8]	; (800a394 <malloc+0xc>)
 800a38a:	4601      	mov	r1, r0
 800a38c:	6818      	ldr	r0, [r3, #0]
 800a38e:	f000 b851 	b.w	800a434 <_malloc_r>
 800a392:	bf00      	nop
 800a394:	20000064 	.word	0x20000064

0800a398 <_free_r>:
 800a398:	b538      	push	{r3, r4, r5, lr}
 800a39a:	4605      	mov	r5, r0
 800a39c:	2900      	cmp	r1, #0
 800a39e:	d045      	beq.n	800a42c <_free_r+0x94>
 800a3a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a3a4:	1f0c      	subs	r4, r1, #4
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	bfb8      	it	lt
 800a3aa:	18e4      	addlt	r4, r4, r3
 800a3ac:	f000 fc0e 	bl	800abcc <__malloc_lock>
 800a3b0:	4a1f      	ldr	r2, [pc, #124]	; (800a430 <_free_r+0x98>)
 800a3b2:	6813      	ldr	r3, [r2, #0]
 800a3b4:	4610      	mov	r0, r2
 800a3b6:	b933      	cbnz	r3, 800a3c6 <_free_r+0x2e>
 800a3b8:	6063      	str	r3, [r4, #4]
 800a3ba:	6014      	str	r4, [r2, #0]
 800a3bc:	4628      	mov	r0, r5
 800a3be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a3c2:	f000 bc04 	b.w	800abce <__malloc_unlock>
 800a3c6:	42a3      	cmp	r3, r4
 800a3c8:	d90c      	bls.n	800a3e4 <_free_r+0x4c>
 800a3ca:	6821      	ldr	r1, [r4, #0]
 800a3cc:	1862      	adds	r2, r4, r1
 800a3ce:	4293      	cmp	r3, r2
 800a3d0:	bf04      	itt	eq
 800a3d2:	681a      	ldreq	r2, [r3, #0]
 800a3d4:	685b      	ldreq	r3, [r3, #4]
 800a3d6:	6063      	str	r3, [r4, #4]
 800a3d8:	bf04      	itt	eq
 800a3da:	1852      	addeq	r2, r2, r1
 800a3dc:	6022      	streq	r2, [r4, #0]
 800a3de:	6004      	str	r4, [r0, #0]
 800a3e0:	e7ec      	b.n	800a3bc <_free_r+0x24>
 800a3e2:	4613      	mov	r3, r2
 800a3e4:	685a      	ldr	r2, [r3, #4]
 800a3e6:	b10a      	cbz	r2, 800a3ec <_free_r+0x54>
 800a3e8:	42a2      	cmp	r2, r4
 800a3ea:	d9fa      	bls.n	800a3e2 <_free_r+0x4a>
 800a3ec:	6819      	ldr	r1, [r3, #0]
 800a3ee:	1858      	adds	r0, r3, r1
 800a3f0:	42a0      	cmp	r0, r4
 800a3f2:	d10b      	bne.n	800a40c <_free_r+0x74>
 800a3f4:	6820      	ldr	r0, [r4, #0]
 800a3f6:	4401      	add	r1, r0
 800a3f8:	1858      	adds	r0, r3, r1
 800a3fa:	4282      	cmp	r2, r0
 800a3fc:	6019      	str	r1, [r3, #0]
 800a3fe:	d1dd      	bne.n	800a3bc <_free_r+0x24>
 800a400:	6810      	ldr	r0, [r2, #0]
 800a402:	6852      	ldr	r2, [r2, #4]
 800a404:	605a      	str	r2, [r3, #4]
 800a406:	4401      	add	r1, r0
 800a408:	6019      	str	r1, [r3, #0]
 800a40a:	e7d7      	b.n	800a3bc <_free_r+0x24>
 800a40c:	d902      	bls.n	800a414 <_free_r+0x7c>
 800a40e:	230c      	movs	r3, #12
 800a410:	602b      	str	r3, [r5, #0]
 800a412:	e7d3      	b.n	800a3bc <_free_r+0x24>
 800a414:	6820      	ldr	r0, [r4, #0]
 800a416:	1821      	adds	r1, r4, r0
 800a418:	428a      	cmp	r2, r1
 800a41a:	bf04      	itt	eq
 800a41c:	6811      	ldreq	r1, [r2, #0]
 800a41e:	6852      	ldreq	r2, [r2, #4]
 800a420:	6062      	str	r2, [r4, #4]
 800a422:	bf04      	itt	eq
 800a424:	1809      	addeq	r1, r1, r0
 800a426:	6021      	streq	r1, [r4, #0]
 800a428:	605c      	str	r4, [r3, #4]
 800a42a:	e7c7      	b.n	800a3bc <_free_r+0x24>
 800a42c:	bd38      	pop	{r3, r4, r5, pc}
 800a42e:	bf00      	nop
 800a430:	200000f4 	.word	0x200000f4

0800a434 <_malloc_r>:
 800a434:	b570      	push	{r4, r5, r6, lr}
 800a436:	1ccd      	adds	r5, r1, #3
 800a438:	f025 0503 	bic.w	r5, r5, #3
 800a43c:	3508      	adds	r5, #8
 800a43e:	2d0c      	cmp	r5, #12
 800a440:	bf38      	it	cc
 800a442:	250c      	movcc	r5, #12
 800a444:	2d00      	cmp	r5, #0
 800a446:	4606      	mov	r6, r0
 800a448:	db01      	blt.n	800a44e <_malloc_r+0x1a>
 800a44a:	42a9      	cmp	r1, r5
 800a44c:	d903      	bls.n	800a456 <_malloc_r+0x22>
 800a44e:	230c      	movs	r3, #12
 800a450:	6033      	str	r3, [r6, #0]
 800a452:	2000      	movs	r0, #0
 800a454:	bd70      	pop	{r4, r5, r6, pc}
 800a456:	f000 fbb9 	bl	800abcc <__malloc_lock>
 800a45a:	4a21      	ldr	r2, [pc, #132]	; (800a4e0 <_malloc_r+0xac>)
 800a45c:	6814      	ldr	r4, [r2, #0]
 800a45e:	4621      	mov	r1, r4
 800a460:	b991      	cbnz	r1, 800a488 <_malloc_r+0x54>
 800a462:	4c20      	ldr	r4, [pc, #128]	; (800a4e4 <_malloc_r+0xb0>)
 800a464:	6823      	ldr	r3, [r4, #0]
 800a466:	b91b      	cbnz	r3, 800a470 <_malloc_r+0x3c>
 800a468:	4630      	mov	r0, r6
 800a46a:	f000 fb05 	bl	800aa78 <_sbrk_r>
 800a46e:	6020      	str	r0, [r4, #0]
 800a470:	4629      	mov	r1, r5
 800a472:	4630      	mov	r0, r6
 800a474:	f000 fb00 	bl	800aa78 <_sbrk_r>
 800a478:	1c43      	adds	r3, r0, #1
 800a47a:	d124      	bne.n	800a4c6 <_malloc_r+0x92>
 800a47c:	230c      	movs	r3, #12
 800a47e:	6033      	str	r3, [r6, #0]
 800a480:	4630      	mov	r0, r6
 800a482:	f000 fba4 	bl	800abce <__malloc_unlock>
 800a486:	e7e4      	b.n	800a452 <_malloc_r+0x1e>
 800a488:	680b      	ldr	r3, [r1, #0]
 800a48a:	1b5b      	subs	r3, r3, r5
 800a48c:	d418      	bmi.n	800a4c0 <_malloc_r+0x8c>
 800a48e:	2b0b      	cmp	r3, #11
 800a490:	d90f      	bls.n	800a4b2 <_malloc_r+0x7e>
 800a492:	600b      	str	r3, [r1, #0]
 800a494:	50cd      	str	r5, [r1, r3]
 800a496:	18cc      	adds	r4, r1, r3
 800a498:	4630      	mov	r0, r6
 800a49a:	f000 fb98 	bl	800abce <__malloc_unlock>
 800a49e:	f104 000b 	add.w	r0, r4, #11
 800a4a2:	1d23      	adds	r3, r4, #4
 800a4a4:	f020 0007 	bic.w	r0, r0, #7
 800a4a8:	1ac3      	subs	r3, r0, r3
 800a4aa:	d0d3      	beq.n	800a454 <_malloc_r+0x20>
 800a4ac:	425a      	negs	r2, r3
 800a4ae:	50e2      	str	r2, [r4, r3]
 800a4b0:	e7d0      	b.n	800a454 <_malloc_r+0x20>
 800a4b2:	428c      	cmp	r4, r1
 800a4b4:	684b      	ldr	r3, [r1, #4]
 800a4b6:	bf16      	itet	ne
 800a4b8:	6063      	strne	r3, [r4, #4]
 800a4ba:	6013      	streq	r3, [r2, #0]
 800a4bc:	460c      	movne	r4, r1
 800a4be:	e7eb      	b.n	800a498 <_malloc_r+0x64>
 800a4c0:	460c      	mov	r4, r1
 800a4c2:	6849      	ldr	r1, [r1, #4]
 800a4c4:	e7cc      	b.n	800a460 <_malloc_r+0x2c>
 800a4c6:	1cc4      	adds	r4, r0, #3
 800a4c8:	f024 0403 	bic.w	r4, r4, #3
 800a4cc:	42a0      	cmp	r0, r4
 800a4ce:	d005      	beq.n	800a4dc <_malloc_r+0xa8>
 800a4d0:	1a21      	subs	r1, r4, r0
 800a4d2:	4630      	mov	r0, r6
 800a4d4:	f000 fad0 	bl	800aa78 <_sbrk_r>
 800a4d8:	3001      	adds	r0, #1
 800a4da:	d0cf      	beq.n	800a47c <_malloc_r+0x48>
 800a4dc:	6025      	str	r5, [r4, #0]
 800a4de:	e7db      	b.n	800a498 <_malloc_r+0x64>
 800a4e0:	200000f4 	.word	0x200000f4
 800a4e4:	200000f8 	.word	0x200000f8

0800a4e8 <__sfputc_r>:
 800a4e8:	6893      	ldr	r3, [r2, #8]
 800a4ea:	3b01      	subs	r3, #1
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	b410      	push	{r4}
 800a4f0:	6093      	str	r3, [r2, #8]
 800a4f2:	da08      	bge.n	800a506 <__sfputc_r+0x1e>
 800a4f4:	6994      	ldr	r4, [r2, #24]
 800a4f6:	42a3      	cmp	r3, r4
 800a4f8:	db01      	blt.n	800a4fe <__sfputc_r+0x16>
 800a4fa:	290a      	cmp	r1, #10
 800a4fc:	d103      	bne.n	800a506 <__sfputc_r+0x1e>
 800a4fe:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a502:	f7ff bca3 	b.w	8009e4c <__swbuf_r>
 800a506:	6813      	ldr	r3, [r2, #0]
 800a508:	1c58      	adds	r0, r3, #1
 800a50a:	6010      	str	r0, [r2, #0]
 800a50c:	7019      	strb	r1, [r3, #0]
 800a50e:	4608      	mov	r0, r1
 800a510:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a514:	4770      	bx	lr

0800a516 <__sfputs_r>:
 800a516:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a518:	4606      	mov	r6, r0
 800a51a:	460f      	mov	r7, r1
 800a51c:	4614      	mov	r4, r2
 800a51e:	18d5      	adds	r5, r2, r3
 800a520:	42ac      	cmp	r4, r5
 800a522:	d101      	bne.n	800a528 <__sfputs_r+0x12>
 800a524:	2000      	movs	r0, #0
 800a526:	e007      	b.n	800a538 <__sfputs_r+0x22>
 800a528:	463a      	mov	r2, r7
 800a52a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a52e:	4630      	mov	r0, r6
 800a530:	f7ff ffda 	bl	800a4e8 <__sfputc_r>
 800a534:	1c43      	adds	r3, r0, #1
 800a536:	d1f3      	bne.n	800a520 <__sfputs_r+0xa>
 800a538:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a53c <_vfiprintf_r>:
 800a53c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a540:	460c      	mov	r4, r1
 800a542:	b09d      	sub	sp, #116	; 0x74
 800a544:	4617      	mov	r7, r2
 800a546:	461d      	mov	r5, r3
 800a548:	4606      	mov	r6, r0
 800a54a:	b118      	cbz	r0, 800a554 <_vfiprintf_r+0x18>
 800a54c:	6983      	ldr	r3, [r0, #24]
 800a54e:	b90b      	cbnz	r3, 800a554 <_vfiprintf_r+0x18>
 800a550:	f7ff fe2c 	bl	800a1ac <__sinit>
 800a554:	4b7c      	ldr	r3, [pc, #496]	; (800a748 <_vfiprintf_r+0x20c>)
 800a556:	429c      	cmp	r4, r3
 800a558:	d158      	bne.n	800a60c <_vfiprintf_r+0xd0>
 800a55a:	6874      	ldr	r4, [r6, #4]
 800a55c:	89a3      	ldrh	r3, [r4, #12]
 800a55e:	0718      	lsls	r0, r3, #28
 800a560:	d55e      	bpl.n	800a620 <_vfiprintf_r+0xe4>
 800a562:	6923      	ldr	r3, [r4, #16]
 800a564:	2b00      	cmp	r3, #0
 800a566:	d05b      	beq.n	800a620 <_vfiprintf_r+0xe4>
 800a568:	2300      	movs	r3, #0
 800a56a:	9309      	str	r3, [sp, #36]	; 0x24
 800a56c:	2320      	movs	r3, #32
 800a56e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a572:	2330      	movs	r3, #48	; 0x30
 800a574:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a578:	9503      	str	r5, [sp, #12]
 800a57a:	f04f 0b01 	mov.w	fp, #1
 800a57e:	46b8      	mov	r8, r7
 800a580:	4645      	mov	r5, r8
 800a582:	f815 3b01 	ldrb.w	r3, [r5], #1
 800a586:	b10b      	cbz	r3, 800a58c <_vfiprintf_r+0x50>
 800a588:	2b25      	cmp	r3, #37	; 0x25
 800a58a:	d154      	bne.n	800a636 <_vfiprintf_r+0xfa>
 800a58c:	ebb8 0a07 	subs.w	sl, r8, r7
 800a590:	d00b      	beq.n	800a5aa <_vfiprintf_r+0x6e>
 800a592:	4653      	mov	r3, sl
 800a594:	463a      	mov	r2, r7
 800a596:	4621      	mov	r1, r4
 800a598:	4630      	mov	r0, r6
 800a59a:	f7ff ffbc 	bl	800a516 <__sfputs_r>
 800a59e:	3001      	adds	r0, #1
 800a5a0:	f000 80c2 	beq.w	800a728 <_vfiprintf_r+0x1ec>
 800a5a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a5a6:	4453      	add	r3, sl
 800a5a8:	9309      	str	r3, [sp, #36]	; 0x24
 800a5aa:	f898 3000 	ldrb.w	r3, [r8]
 800a5ae:	2b00      	cmp	r3, #0
 800a5b0:	f000 80ba 	beq.w	800a728 <_vfiprintf_r+0x1ec>
 800a5b4:	2300      	movs	r3, #0
 800a5b6:	f04f 32ff 	mov.w	r2, #4294967295
 800a5ba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a5be:	9304      	str	r3, [sp, #16]
 800a5c0:	9307      	str	r3, [sp, #28]
 800a5c2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a5c6:	931a      	str	r3, [sp, #104]	; 0x68
 800a5c8:	46a8      	mov	r8, r5
 800a5ca:	2205      	movs	r2, #5
 800a5cc:	f818 1b01 	ldrb.w	r1, [r8], #1
 800a5d0:	485e      	ldr	r0, [pc, #376]	; (800a74c <_vfiprintf_r+0x210>)
 800a5d2:	f7f5 fdfd 	bl	80001d0 <memchr>
 800a5d6:	9b04      	ldr	r3, [sp, #16]
 800a5d8:	bb78      	cbnz	r0, 800a63a <_vfiprintf_r+0xfe>
 800a5da:	06d9      	lsls	r1, r3, #27
 800a5dc:	bf44      	itt	mi
 800a5de:	2220      	movmi	r2, #32
 800a5e0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800a5e4:	071a      	lsls	r2, r3, #28
 800a5e6:	bf44      	itt	mi
 800a5e8:	222b      	movmi	r2, #43	; 0x2b
 800a5ea:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800a5ee:	782a      	ldrb	r2, [r5, #0]
 800a5f0:	2a2a      	cmp	r2, #42	; 0x2a
 800a5f2:	d02a      	beq.n	800a64a <_vfiprintf_r+0x10e>
 800a5f4:	9a07      	ldr	r2, [sp, #28]
 800a5f6:	46a8      	mov	r8, r5
 800a5f8:	2000      	movs	r0, #0
 800a5fa:	250a      	movs	r5, #10
 800a5fc:	4641      	mov	r1, r8
 800a5fe:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a602:	3b30      	subs	r3, #48	; 0x30
 800a604:	2b09      	cmp	r3, #9
 800a606:	d969      	bls.n	800a6dc <_vfiprintf_r+0x1a0>
 800a608:	b360      	cbz	r0, 800a664 <_vfiprintf_r+0x128>
 800a60a:	e024      	b.n	800a656 <_vfiprintf_r+0x11a>
 800a60c:	4b50      	ldr	r3, [pc, #320]	; (800a750 <_vfiprintf_r+0x214>)
 800a60e:	429c      	cmp	r4, r3
 800a610:	d101      	bne.n	800a616 <_vfiprintf_r+0xda>
 800a612:	68b4      	ldr	r4, [r6, #8]
 800a614:	e7a2      	b.n	800a55c <_vfiprintf_r+0x20>
 800a616:	4b4f      	ldr	r3, [pc, #316]	; (800a754 <_vfiprintf_r+0x218>)
 800a618:	429c      	cmp	r4, r3
 800a61a:	bf08      	it	eq
 800a61c:	68f4      	ldreq	r4, [r6, #12]
 800a61e:	e79d      	b.n	800a55c <_vfiprintf_r+0x20>
 800a620:	4621      	mov	r1, r4
 800a622:	4630      	mov	r0, r6
 800a624:	f7ff fc64 	bl	8009ef0 <__swsetup_r>
 800a628:	2800      	cmp	r0, #0
 800a62a:	d09d      	beq.n	800a568 <_vfiprintf_r+0x2c>
 800a62c:	f04f 30ff 	mov.w	r0, #4294967295
 800a630:	b01d      	add	sp, #116	; 0x74
 800a632:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a636:	46a8      	mov	r8, r5
 800a638:	e7a2      	b.n	800a580 <_vfiprintf_r+0x44>
 800a63a:	4a44      	ldr	r2, [pc, #272]	; (800a74c <_vfiprintf_r+0x210>)
 800a63c:	1a80      	subs	r0, r0, r2
 800a63e:	fa0b f000 	lsl.w	r0, fp, r0
 800a642:	4318      	orrs	r0, r3
 800a644:	9004      	str	r0, [sp, #16]
 800a646:	4645      	mov	r5, r8
 800a648:	e7be      	b.n	800a5c8 <_vfiprintf_r+0x8c>
 800a64a:	9a03      	ldr	r2, [sp, #12]
 800a64c:	1d11      	adds	r1, r2, #4
 800a64e:	6812      	ldr	r2, [r2, #0]
 800a650:	9103      	str	r1, [sp, #12]
 800a652:	2a00      	cmp	r2, #0
 800a654:	db01      	blt.n	800a65a <_vfiprintf_r+0x11e>
 800a656:	9207      	str	r2, [sp, #28]
 800a658:	e004      	b.n	800a664 <_vfiprintf_r+0x128>
 800a65a:	4252      	negs	r2, r2
 800a65c:	f043 0302 	orr.w	r3, r3, #2
 800a660:	9207      	str	r2, [sp, #28]
 800a662:	9304      	str	r3, [sp, #16]
 800a664:	f898 3000 	ldrb.w	r3, [r8]
 800a668:	2b2e      	cmp	r3, #46	; 0x2e
 800a66a:	d10e      	bne.n	800a68a <_vfiprintf_r+0x14e>
 800a66c:	f898 3001 	ldrb.w	r3, [r8, #1]
 800a670:	2b2a      	cmp	r3, #42	; 0x2a
 800a672:	d138      	bne.n	800a6e6 <_vfiprintf_r+0x1aa>
 800a674:	9b03      	ldr	r3, [sp, #12]
 800a676:	1d1a      	adds	r2, r3, #4
 800a678:	681b      	ldr	r3, [r3, #0]
 800a67a:	9203      	str	r2, [sp, #12]
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	bfb8      	it	lt
 800a680:	f04f 33ff 	movlt.w	r3, #4294967295
 800a684:	f108 0802 	add.w	r8, r8, #2
 800a688:	9305      	str	r3, [sp, #20]
 800a68a:	4d33      	ldr	r5, [pc, #204]	; (800a758 <_vfiprintf_r+0x21c>)
 800a68c:	f898 1000 	ldrb.w	r1, [r8]
 800a690:	2203      	movs	r2, #3
 800a692:	4628      	mov	r0, r5
 800a694:	f7f5 fd9c 	bl	80001d0 <memchr>
 800a698:	b140      	cbz	r0, 800a6ac <_vfiprintf_r+0x170>
 800a69a:	2340      	movs	r3, #64	; 0x40
 800a69c:	1b40      	subs	r0, r0, r5
 800a69e:	fa03 f000 	lsl.w	r0, r3, r0
 800a6a2:	9b04      	ldr	r3, [sp, #16]
 800a6a4:	4303      	orrs	r3, r0
 800a6a6:	f108 0801 	add.w	r8, r8, #1
 800a6aa:	9304      	str	r3, [sp, #16]
 800a6ac:	f898 1000 	ldrb.w	r1, [r8]
 800a6b0:	482a      	ldr	r0, [pc, #168]	; (800a75c <_vfiprintf_r+0x220>)
 800a6b2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a6b6:	2206      	movs	r2, #6
 800a6b8:	f108 0701 	add.w	r7, r8, #1
 800a6bc:	f7f5 fd88 	bl	80001d0 <memchr>
 800a6c0:	2800      	cmp	r0, #0
 800a6c2:	d037      	beq.n	800a734 <_vfiprintf_r+0x1f8>
 800a6c4:	4b26      	ldr	r3, [pc, #152]	; (800a760 <_vfiprintf_r+0x224>)
 800a6c6:	bb1b      	cbnz	r3, 800a710 <_vfiprintf_r+0x1d4>
 800a6c8:	9b03      	ldr	r3, [sp, #12]
 800a6ca:	3307      	adds	r3, #7
 800a6cc:	f023 0307 	bic.w	r3, r3, #7
 800a6d0:	3308      	adds	r3, #8
 800a6d2:	9303      	str	r3, [sp, #12]
 800a6d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a6d6:	444b      	add	r3, r9
 800a6d8:	9309      	str	r3, [sp, #36]	; 0x24
 800a6da:	e750      	b.n	800a57e <_vfiprintf_r+0x42>
 800a6dc:	fb05 3202 	mla	r2, r5, r2, r3
 800a6e0:	2001      	movs	r0, #1
 800a6e2:	4688      	mov	r8, r1
 800a6e4:	e78a      	b.n	800a5fc <_vfiprintf_r+0xc0>
 800a6e6:	2300      	movs	r3, #0
 800a6e8:	f108 0801 	add.w	r8, r8, #1
 800a6ec:	9305      	str	r3, [sp, #20]
 800a6ee:	4619      	mov	r1, r3
 800a6f0:	250a      	movs	r5, #10
 800a6f2:	4640      	mov	r0, r8
 800a6f4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a6f8:	3a30      	subs	r2, #48	; 0x30
 800a6fa:	2a09      	cmp	r2, #9
 800a6fc:	d903      	bls.n	800a706 <_vfiprintf_r+0x1ca>
 800a6fe:	2b00      	cmp	r3, #0
 800a700:	d0c3      	beq.n	800a68a <_vfiprintf_r+0x14e>
 800a702:	9105      	str	r1, [sp, #20]
 800a704:	e7c1      	b.n	800a68a <_vfiprintf_r+0x14e>
 800a706:	fb05 2101 	mla	r1, r5, r1, r2
 800a70a:	2301      	movs	r3, #1
 800a70c:	4680      	mov	r8, r0
 800a70e:	e7f0      	b.n	800a6f2 <_vfiprintf_r+0x1b6>
 800a710:	ab03      	add	r3, sp, #12
 800a712:	9300      	str	r3, [sp, #0]
 800a714:	4622      	mov	r2, r4
 800a716:	4b13      	ldr	r3, [pc, #76]	; (800a764 <_vfiprintf_r+0x228>)
 800a718:	a904      	add	r1, sp, #16
 800a71a:	4630      	mov	r0, r6
 800a71c:	f3af 8000 	nop.w
 800a720:	f1b0 3fff 	cmp.w	r0, #4294967295
 800a724:	4681      	mov	r9, r0
 800a726:	d1d5      	bne.n	800a6d4 <_vfiprintf_r+0x198>
 800a728:	89a3      	ldrh	r3, [r4, #12]
 800a72a:	065b      	lsls	r3, r3, #25
 800a72c:	f53f af7e 	bmi.w	800a62c <_vfiprintf_r+0xf0>
 800a730:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a732:	e77d      	b.n	800a630 <_vfiprintf_r+0xf4>
 800a734:	ab03      	add	r3, sp, #12
 800a736:	9300      	str	r3, [sp, #0]
 800a738:	4622      	mov	r2, r4
 800a73a:	4b0a      	ldr	r3, [pc, #40]	; (800a764 <_vfiprintf_r+0x228>)
 800a73c:	a904      	add	r1, sp, #16
 800a73e:	4630      	mov	r0, r6
 800a740:	f000 f888 	bl	800a854 <_printf_i>
 800a744:	e7ec      	b.n	800a720 <_vfiprintf_r+0x1e4>
 800a746:	bf00      	nop
 800a748:	0800b120 	.word	0x0800b120
 800a74c:	0800b160 	.word	0x0800b160
 800a750:	0800b140 	.word	0x0800b140
 800a754:	0800b100 	.word	0x0800b100
 800a758:	0800b166 	.word	0x0800b166
 800a75c:	0800b16a 	.word	0x0800b16a
 800a760:	00000000 	.word	0x00000000
 800a764:	0800a517 	.word	0x0800a517

0800a768 <_printf_common>:
 800a768:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a76c:	4691      	mov	r9, r2
 800a76e:	461f      	mov	r7, r3
 800a770:	688a      	ldr	r2, [r1, #8]
 800a772:	690b      	ldr	r3, [r1, #16]
 800a774:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a778:	4293      	cmp	r3, r2
 800a77a:	bfb8      	it	lt
 800a77c:	4613      	movlt	r3, r2
 800a77e:	f8c9 3000 	str.w	r3, [r9]
 800a782:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a786:	4606      	mov	r6, r0
 800a788:	460c      	mov	r4, r1
 800a78a:	b112      	cbz	r2, 800a792 <_printf_common+0x2a>
 800a78c:	3301      	adds	r3, #1
 800a78e:	f8c9 3000 	str.w	r3, [r9]
 800a792:	6823      	ldr	r3, [r4, #0]
 800a794:	0699      	lsls	r1, r3, #26
 800a796:	bf42      	ittt	mi
 800a798:	f8d9 3000 	ldrmi.w	r3, [r9]
 800a79c:	3302      	addmi	r3, #2
 800a79e:	f8c9 3000 	strmi.w	r3, [r9]
 800a7a2:	6825      	ldr	r5, [r4, #0]
 800a7a4:	f015 0506 	ands.w	r5, r5, #6
 800a7a8:	d107      	bne.n	800a7ba <_printf_common+0x52>
 800a7aa:	f104 0a19 	add.w	sl, r4, #25
 800a7ae:	68e3      	ldr	r3, [r4, #12]
 800a7b0:	f8d9 2000 	ldr.w	r2, [r9]
 800a7b4:	1a9b      	subs	r3, r3, r2
 800a7b6:	42ab      	cmp	r3, r5
 800a7b8:	dc28      	bgt.n	800a80c <_printf_common+0xa4>
 800a7ba:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800a7be:	6822      	ldr	r2, [r4, #0]
 800a7c0:	3300      	adds	r3, #0
 800a7c2:	bf18      	it	ne
 800a7c4:	2301      	movne	r3, #1
 800a7c6:	0692      	lsls	r2, r2, #26
 800a7c8:	d42d      	bmi.n	800a826 <_printf_common+0xbe>
 800a7ca:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a7ce:	4639      	mov	r1, r7
 800a7d0:	4630      	mov	r0, r6
 800a7d2:	47c0      	blx	r8
 800a7d4:	3001      	adds	r0, #1
 800a7d6:	d020      	beq.n	800a81a <_printf_common+0xb2>
 800a7d8:	6823      	ldr	r3, [r4, #0]
 800a7da:	68e5      	ldr	r5, [r4, #12]
 800a7dc:	f8d9 2000 	ldr.w	r2, [r9]
 800a7e0:	f003 0306 	and.w	r3, r3, #6
 800a7e4:	2b04      	cmp	r3, #4
 800a7e6:	bf08      	it	eq
 800a7e8:	1aad      	subeq	r5, r5, r2
 800a7ea:	68a3      	ldr	r3, [r4, #8]
 800a7ec:	6922      	ldr	r2, [r4, #16]
 800a7ee:	bf0c      	ite	eq
 800a7f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a7f4:	2500      	movne	r5, #0
 800a7f6:	4293      	cmp	r3, r2
 800a7f8:	bfc4      	itt	gt
 800a7fa:	1a9b      	subgt	r3, r3, r2
 800a7fc:	18ed      	addgt	r5, r5, r3
 800a7fe:	f04f 0900 	mov.w	r9, #0
 800a802:	341a      	adds	r4, #26
 800a804:	454d      	cmp	r5, r9
 800a806:	d11a      	bne.n	800a83e <_printf_common+0xd6>
 800a808:	2000      	movs	r0, #0
 800a80a:	e008      	b.n	800a81e <_printf_common+0xb6>
 800a80c:	2301      	movs	r3, #1
 800a80e:	4652      	mov	r2, sl
 800a810:	4639      	mov	r1, r7
 800a812:	4630      	mov	r0, r6
 800a814:	47c0      	blx	r8
 800a816:	3001      	adds	r0, #1
 800a818:	d103      	bne.n	800a822 <_printf_common+0xba>
 800a81a:	f04f 30ff 	mov.w	r0, #4294967295
 800a81e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a822:	3501      	adds	r5, #1
 800a824:	e7c3      	b.n	800a7ae <_printf_common+0x46>
 800a826:	18e1      	adds	r1, r4, r3
 800a828:	1c5a      	adds	r2, r3, #1
 800a82a:	2030      	movs	r0, #48	; 0x30
 800a82c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a830:	4422      	add	r2, r4
 800a832:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a836:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a83a:	3302      	adds	r3, #2
 800a83c:	e7c5      	b.n	800a7ca <_printf_common+0x62>
 800a83e:	2301      	movs	r3, #1
 800a840:	4622      	mov	r2, r4
 800a842:	4639      	mov	r1, r7
 800a844:	4630      	mov	r0, r6
 800a846:	47c0      	blx	r8
 800a848:	3001      	adds	r0, #1
 800a84a:	d0e6      	beq.n	800a81a <_printf_common+0xb2>
 800a84c:	f109 0901 	add.w	r9, r9, #1
 800a850:	e7d8      	b.n	800a804 <_printf_common+0x9c>
	...

0800a854 <_printf_i>:
 800a854:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a858:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800a85c:	460c      	mov	r4, r1
 800a85e:	7e09      	ldrb	r1, [r1, #24]
 800a860:	b085      	sub	sp, #20
 800a862:	296e      	cmp	r1, #110	; 0x6e
 800a864:	4617      	mov	r7, r2
 800a866:	4606      	mov	r6, r0
 800a868:	4698      	mov	r8, r3
 800a86a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a86c:	f000 80b3 	beq.w	800a9d6 <_printf_i+0x182>
 800a870:	d822      	bhi.n	800a8b8 <_printf_i+0x64>
 800a872:	2963      	cmp	r1, #99	; 0x63
 800a874:	d036      	beq.n	800a8e4 <_printf_i+0x90>
 800a876:	d80a      	bhi.n	800a88e <_printf_i+0x3a>
 800a878:	2900      	cmp	r1, #0
 800a87a:	f000 80b9 	beq.w	800a9f0 <_printf_i+0x19c>
 800a87e:	2958      	cmp	r1, #88	; 0x58
 800a880:	f000 8083 	beq.w	800a98a <_printf_i+0x136>
 800a884:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a888:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800a88c:	e032      	b.n	800a8f4 <_printf_i+0xa0>
 800a88e:	2964      	cmp	r1, #100	; 0x64
 800a890:	d001      	beq.n	800a896 <_printf_i+0x42>
 800a892:	2969      	cmp	r1, #105	; 0x69
 800a894:	d1f6      	bne.n	800a884 <_printf_i+0x30>
 800a896:	6820      	ldr	r0, [r4, #0]
 800a898:	6813      	ldr	r3, [r2, #0]
 800a89a:	0605      	lsls	r5, r0, #24
 800a89c:	f103 0104 	add.w	r1, r3, #4
 800a8a0:	d52a      	bpl.n	800a8f8 <_printf_i+0xa4>
 800a8a2:	681b      	ldr	r3, [r3, #0]
 800a8a4:	6011      	str	r1, [r2, #0]
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	da03      	bge.n	800a8b2 <_printf_i+0x5e>
 800a8aa:	222d      	movs	r2, #45	; 0x2d
 800a8ac:	425b      	negs	r3, r3
 800a8ae:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800a8b2:	486f      	ldr	r0, [pc, #444]	; (800aa70 <_printf_i+0x21c>)
 800a8b4:	220a      	movs	r2, #10
 800a8b6:	e039      	b.n	800a92c <_printf_i+0xd8>
 800a8b8:	2973      	cmp	r1, #115	; 0x73
 800a8ba:	f000 809d 	beq.w	800a9f8 <_printf_i+0x1a4>
 800a8be:	d808      	bhi.n	800a8d2 <_printf_i+0x7e>
 800a8c0:	296f      	cmp	r1, #111	; 0x6f
 800a8c2:	d020      	beq.n	800a906 <_printf_i+0xb2>
 800a8c4:	2970      	cmp	r1, #112	; 0x70
 800a8c6:	d1dd      	bne.n	800a884 <_printf_i+0x30>
 800a8c8:	6823      	ldr	r3, [r4, #0]
 800a8ca:	f043 0320 	orr.w	r3, r3, #32
 800a8ce:	6023      	str	r3, [r4, #0]
 800a8d0:	e003      	b.n	800a8da <_printf_i+0x86>
 800a8d2:	2975      	cmp	r1, #117	; 0x75
 800a8d4:	d017      	beq.n	800a906 <_printf_i+0xb2>
 800a8d6:	2978      	cmp	r1, #120	; 0x78
 800a8d8:	d1d4      	bne.n	800a884 <_printf_i+0x30>
 800a8da:	2378      	movs	r3, #120	; 0x78
 800a8dc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a8e0:	4864      	ldr	r0, [pc, #400]	; (800aa74 <_printf_i+0x220>)
 800a8e2:	e055      	b.n	800a990 <_printf_i+0x13c>
 800a8e4:	6813      	ldr	r3, [r2, #0]
 800a8e6:	1d19      	adds	r1, r3, #4
 800a8e8:	681b      	ldr	r3, [r3, #0]
 800a8ea:	6011      	str	r1, [r2, #0]
 800a8ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a8f0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a8f4:	2301      	movs	r3, #1
 800a8f6:	e08c      	b.n	800aa12 <_printf_i+0x1be>
 800a8f8:	681b      	ldr	r3, [r3, #0]
 800a8fa:	6011      	str	r1, [r2, #0]
 800a8fc:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a900:	bf18      	it	ne
 800a902:	b21b      	sxthne	r3, r3
 800a904:	e7cf      	b.n	800a8a6 <_printf_i+0x52>
 800a906:	6813      	ldr	r3, [r2, #0]
 800a908:	6825      	ldr	r5, [r4, #0]
 800a90a:	1d18      	adds	r0, r3, #4
 800a90c:	6010      	str	r0, [r2, #0]
 800a90e:	0628      	lsls	r0, r5, #24
 800a910:	d501      	bpl.n	800a916 <_printf_i+0xc2>
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	e002      	b.n	800a91c <_printf_i+0xc8>
 800a916:	0668      	lsls	r0, r5, #25
 800a918:	d5fb      	bpl.n	800a912 <_printf_i+0xbe>
 800a91a:	881b      	ldrh	r3, [r3, #0]
 800a91c:	4854      	ldr	r0, [pc, #336]	; (800aa70 <_printf_i+0x21c>)
 800a91e:	296f      	cmp	r1, #111	; 0x6f
 800a920:	bf14      	ite	ne
 800a922:	220a      	movne	r2, #10
 800a924:	2208      	moveq	r2, #8
 800a926:	2100      	movs	r1, #0
 800a928:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a92c:	6865      	ldr	r5, [r4, #4]
 800a92e:	60a5      	str	r5, [r4, #8]
 800a930:	2d00      	cmp	r5, #0
 800a932:	f2c0 8095 	blt.w	800aa60 <_printf_i+0x20c>
 800a936:	6821      	ldr	r1, [r4, #0]
 800a938:	f021 0104 	bic.w	r1, r1, #4
 800a93c:	6021      	str	r1, [r4, #0]
 800a93e:	2b00      	cmp	r3, #0
 800a940:	d13d      	bne.n	800a9be <_printf_i+0x16a>
 800a942:	2d00      	cmp	r5, #0
 800a944:	f040 808e 	bne.w	800aa64 <_printf_i+0x210>
 800a948:	4665      	mov	r5, ip
 800a94a:	2a08      	cmp	r2, #8
 800a94c:	d10b      	bne.n	800a966 <_printf_i+0x112>
 800a94e:	6823      	ldr	r3, [r4, #0]
 800a950:	07db      	lsls	r3, r3, #31
 800a952:	d508      	bpl.n	800a966 <_printf_i+0x112>
 800a954:	6923      	ldr	r3, [r4, #16]
 800a956:	6862      	ldr	r2, [r4, #4]
 800a958:	429a      	cmp	r2, r3
 800a95a:	bfde      	ittt	le
 800a95c:	2330      	movle	r3, #48	; 0x30
 800a95e:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a962:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a966:	ebac 0305 	sub.w	r3, ip, r5
 800a96a:	6123      	str	r3, [r4, #16]
 800a96c:	f8cd 8000 	str.w	r8, [sp]
 800a970:	463b      	mov	r3, r7
 800a972:	aa03      	add	r2, sp, #12
 800a974:	4621      	mov	r1, r4
 800a976:	4630      	mov	r0, r6
 800a978:	f7ff fef6 	bl	800a768 <_printf_common>
 800a97c:	3001      	adds	r0, #1
 800a97e:	d14d      	bne.n	800aa1c <_printf_i+0x1c8>
 800a980:	f04f 30ff 	mov.w	r0, #4294967295
 800a984:	b005      	add	sp, #20
 800a986:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a98a:	4839      	ldr	r0, [pc, #228]	; (800aa70 <_printf_i+0x21c>)
 800a98c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800a990:	6813      	ldr	r3, [r2, #0]
 800a992:	6821      	ldr	r1, [r4, #0]
 800a994:	1d1d      	adds	r5, r3, #4
 800a996:	681b      	ldr	r3, [r3, #0]
 800a998:	6015      	str	r5, [r2, #0]
 800a99a:	060a      	lsls	r2, r1, #24
 800a99c:	d50b      	bpl.n	800a9b6 <_printf_i+0x162>
 800a99e:	07ca      	lsls	r2, r1, #31
 800a9a0:	bf44      	itt	mi
 800a9a2:	f041 0120 	orrmi.w	r1, r1, #32
 800a9a6:	6021      	strmi	r1, [r4, #0]
 800a9a8:	b91b      	cbnz	r3, 800a9b2 <_printf_i+0x15e>
 800a9aa:	6822      	ldr	r2, [r4, #0]
 800a9ac:	f022 0220 	bic.w	r2, r2, #32
 800a9b0:	6022      	str	r2, [r4, #0]
 800a9b2:	2210      	movs	r2, #16
 800a9b4:	e7b7      	b.n	800a926 <_printf_i+0xd2>
 800a9b6:	064d      	lsls	r5, r1, #25
 800a9b8:	bf48      	it	mi
 800a9ba:	b29b      	uxthmi	r3, r3
 800a9bc:	e7ef      	b.n	800a99e <_printf_i+0x14a>
 800a9be:	4665      	mov	r5, ip
 800a9c0:	fbb3 f1f2 	udiv	r1, r3, r2
 800a9c4:	fb02 3311 	mls	r3, r2, r1, r3
 800a9c8:	5cc3      	ldrb	r3, [r0, r3]
 800a9ca:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800a9ce:	460b      	mov	r3, r1
 800a9d0:	2900      	cmp	r1, #0
 800a9d2:	d1f5      	bne.n	800a9c0 <_printf_i+0x16c>
 800a9d4:	e7b9      	b.n	800a94a <_printf_i+0xf6>
 800a9d6:	6813      	ldr	r3, [r2, #0]
 800a9d8:	6825      	ldr	r5, [r4, #0]
 800a9da:	6961      	ldr	r1, [r4, #20]
 800a9dc:	1d18      	adds	r0, r3, #4
 800a9de:	6010      	str	r0, [r2, #0]
 800a9e0:	0628      	lsls	r0, r5, #24
 800a9e2:	681b      	ldr	r3, [r3, #0]
 800a9e4:	d501      	bpl.n	800a9ea <_printf_i+0x196>
 800a9e6:	6019      	str	r1, [r3, #0]
 800a9e8:	e002      	b.n	800a9f0 <_printf_i+0x19c>
 800a9ea:	066a      	lsls	r2, r5, #25
 800a9ec:	d5fb      	bpl.n	800a9e6 <_printf_i+0x192>
 800a9ee:	8019      	strh	r1, [r3, #0]
 800a9f0:	2300      	movs	r3, #0
 800a9f2:	6123      	str	r3, [r4, #16]
 800a9f4:	4665      	mov	r5, ip
 800a9f6:	e7b9      	b.n	800a96c <_printf_i+0x118>
 800a9f8:	6813      	ldr	r3, [r2, #0]
 800a9fa:	1d19      	adds	r1, r3, #4
 800a9fc:	6011      	str	r1, [r2, #0]
 800a9fe:	681d      	ldr	r5, [r3, #0]
 800aa00:	6862      	ldr	r2, [r4, #4]
 800aa02:	2100      	movs	r1, #0
 800aa04:	4628      	mov	r0, r5
 800aa06:	f7f5 fbe3 	bl	80001d0 <memchr>
 800aa0a:	b108      	cbz	r0, 800aa10 <_printf_i+0x1bc>
 800aa0c:	1b40      	subs	r0, r0, r5
 800aa0e:	6060      	str	r0, [r4, #4]
 800aa10:	6863      	ldr	r3, [r4, #4]
 800aa12:	6123      	str	r3, [r4, #16]
 800aa14:	2300      	movs	r3, #0
 800aa16:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800aa1a:	e7a7      	b.n	800a96c <_printf_i+0x118>
 800aa1c:	6923      	ldr	r3, [r4, #16]
 800aa1e:	462a      	mov	r2, r5
 800aa20:	4639      	mov	r1, r7
 800aa22:	4630      	mov	r0, r6
 800aa24:	47c0      	blx	r8
 800aa26:	3001      	adds	r0, #1
 800aa28:	d0aa      	beq.n	800a980 <_printf_i+0x12c>
 800aa2a:	6823      	ldr	r3, [r4, #0]
 800aa2c:	079b      	lsls	r3, r3, #30
 800aa2e:	d413      	bmi.n	800aa58 <_printf_i+0x204>
 800aa30:	68e0      	ldr	r0, [r4, #12]
 800aa32:	9b03      	ldr	r3, [sp, #12]
 800aa34:	4298      	cmp	r0, r3
 800aa36:	bfb8      	it	lt
 800aa38:	4618      	movlt	r0, r3
 800aa3a:	e7a3      	b.n	800a984 <_printf_i+0x130>
 800aa3c:	2301      	movs	r3, #1
 800aa3e:	464a      	mov	r2, r9
 800aa40:	4639      	mov	r1, r7
 800aa42:	4630      	mov	r0, r6
 800aa44:	47c0      	blx	r8
 800aa46:	3001      	adds	r0, #1
 800aa48:	d09a      	beq.n	800a980 <_printf_i+0x12c>
 800aa4a:	3501      	adds	r5, #1
 800aa4c:	68e3      	ldr	r3, [r4, #12]
 800aa4e:	9a03      	ldr	r2, [sp, #12]
 800aa50:	1a9b      	subs	r3, r3, r2
 800aa52:	42ab      	cmp	r3, r5
 800aa54:	dcf2      	bgt.n	800aa3c <_printf_i+0x1e8>
 800aa56:	e7eb      	b.n	800aa30 <_printf_i+0x1dc>
 800aa58:	2500      	movs	r5, #0
 800aa5a:	f104 0919 	add.w	r9, r4, #25
 800aa5e:	e7f5      	b.n	800aa4c <_printf_i+0x1f8>
 800aa60:	2b00      	cmp	r3, #0
 800aa62:	d1ac      	bne.n	800a9be <_printf_i+0x16a>
 800aa64:	7803      	ldrb	r3, [r0, #0]
 800aa66:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800aa6a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800aa6e:	e76c      	b.n	800a94a <_printf_i+0xf6>
 800aa70:	0800b171 	.word	0x0800b171
 800aa74:	0800b182 	.word	0x0800b182

0800aa78 <_sbrk_r>:
 800aa78:	b538      	push	{r3, r4, r5, lr}
 800aa7a:	4c06      	ldr	r4, [pc, #24]	; (800aa94 <_sbrk_r+0x1c>)
 800aa7c:	2300      	movs	r3, #0
 800aa7e:	4605      	mov	r5, r0
 800aa80:	4608      	mov	r0, r1
 800aa82:	6023      	str	r3, [r4, #0]
 800aa84:	f7fe fff2 	bl	8009a6c <_sbrk>
 800aa88:	1c43      	adds	r3, r0, #1
 800aa8a:	d102      	bne.n	800aa92 <_sbrk_r+0x1a>
 800aa8c:	6823      	ldr	r3, [r4, #0]
 800aa8e:	b103      	cbz	r3, 800aa92 <_sbrk_r+0x1a>
 800aa90:	602b      	str	r3, [r5, #0]
 800aa92:	bd38      	pop	{r3, r4, r5, pc}
 800aa94:	20000e38 	.word	0x20000e38

0800aa98 <__sread>:
 800aa98:	b510      	push	{r4, lr}
 800aa9a:	460c      	mov	r4, r1
 800aa9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aaa0:	f000 f896 	bl	800abd0 <_read_r>
 800aaa4:	2800      	cmp	r0, #0
 800aaa6:	bfab      	itete	ge
 800aaa8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800aaaa:	89a3      	ldrhlt	r3, [r4, #12]
 800aaac:	181b      	addge	r3, r3, r0
 800aaae:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800aab2:	bfac      	ite	ge
 800aab4:	6563      	strge	r3, [r4, #84]	; 0x54
 800aab6:	81a3      	strhlt	r3, [r4, #12]
 800aab8:	bd10      	pop	{r4, pc}

0800aaba <__swrite>:
 800aaba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aabe:	461f      	mov	r7, r3
 800aac0:	898b      	ldrh	r3, [r1, #12]
 800aac2:	05db      	lsls	r3, r3, #23
 800aac4:	4605      	mov	r5, r0
 800aac6:	460c      	mov	r4, r1
 800aac8:	4616      	mov	r6, r2
 800aaca:	d505      	bpl.n	800aad8 <__swrite+0x1e>
 800aacc:	2302      	movs	r3, #2
 800aace:	2200      	movs	r2, #0
 800aad0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aad4:	f000 f868 	bl	800aba8 <_lseek_r>
 800aad8:	89a3      	ldrh	r3, [r4, #12]
 800aada:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800aade:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800aae2:	81a3      	strh	r3, [r4, #12]
 800aae4:	4632      	mov	r2, r6
 800aae6:	463b      	mov	r3, r7
 800aae8:	4628      	mov	r0, r5
 800aaea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800aaee:	f000 b817 	b.w	800ab20 <_write_r>

0800aaf2 <__sseek>:
 800aaf2:	b510      	push	{r4, lr}
 800aaf4:	460c      	mov	r4, r1
 800aaf6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aafa:	f000 f855 	bl	800aba8 <_lseek_r>
 800aafe:	1c43      	adds	r3, r0, #1
 800ab00:	89a3      	ldrh	r3, [r4, #12]
 800ab02:	bf15      	itete	ne
 800ab04:	6560      	strne	r0, [r4, #84]	; 0x54
 800ab06:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ab0a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ab0e:	81a3      	strheq	r3, [r4, #12]
 800ab10:	bf18      	it	ne
 800ab12:	81a3      	strhne	r3, [r4, #12]
 800ab14:	bd10      	pop	{r4, pc}

0800ab16 <__sclose>:
 800ab16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ab1a:	f000 b813 	b.w	800ab44 <_close_r>
	...

0800ab20 <_write_r>:
 800ab20:	b538      	push	{r3, r4, r5, lr}
 800ab22:	4c07      	ldr	r4, [pc, #28]	; (800ab40 <_write_r+0x20>)
 800ab24:	4605      	mov	r5, r0
 800ab26:	4608      	mov	r0, r1
 800ab28:	4611      	mov	r1, r2
 800ab2a:	2200      	movs	r2, #0
 800ab2c:	6022      	str	r2, [r4, #0]
 800ab2e:	461a      	mov	r2, r3
 800ab30:	f7fe ff4b 	bl	80099ca <_write>
 800ab34:	1c43      	adds	r3, r0, #1
 800ab36:	d102      	bne.n	800ab3e <_write_r+0x1e>
 800ab38:	6823      	ldr	r3, [r4, #0]
 800ab3a:	b103      	cbz	r3, 800ab3e <_write_r+0x1e>
 800ab3c:	602b      	str	r3, [r5, #0]
 800ab3e:	bd38      	pop	{r3, r4, r5, pc}
 800ab40:	20000e38 	.word	0x20000e38

0800ab44 <_close_r>:
 800ab44:	b538      	push	{r3, r4, r5, lr}
 800ab46:	4c06      	ldr	r4, [pc, #24]	; (800ab60 <_close_r+0x1c>)
 800ab48:	2300      	movs	r3, #0
 800ab4a:	4605      	mov	r5, r0
 800ab4c:	4608      	mov	r0, r1
 800ab4e:	6023      	str	r3, [r4, #0]
 800ab50:	f7fe ff57 	bl	8009a02 <_close>
 800ab54:	1c43      	adds	r3, r0, #1
 800ab56:	d102      	bne.n	800ab5e <_close_r+0x1a>
 800ab58:	6823      	ldr	r3, [r4, #0]
 800ab5a:	b103      	cbz	r3, 800ab5e <_close_r+0x1a>
 800ab5c:	602b      	str	r3, [r5, #0]
 800ab5e:	bd38      	pop	{r3, r4, r5, pc}
 800ab60:	20000e38 	.word	0x20000e38

0800ab64 <_fstat_r>:
 800ab64:	b538      	push	{r3, r4, r5, lr}
 800ab66:	4c07      	ldr	r4, [pc, #28]	; (800ab84 <_fstat_r+0x20>)
 800ab68:	2300      	movs	r3, #0
 800ab6a:	4605      	mov	r5, r0
 800ab6c:	4608      	mov	r0, r1
 800ab6e:	4611      	mov	r1, r2
 800ab70:	6023      	str	r3, [r4, #0]
 800ab72:	f7fe ff52 	bl	8009a1a <_fstat>
 800ab76:	1c43      	adds	r3, r0, #1
 800ab78:	d102      	bne.n	800ab80 <_fstat_r+0x1c>
 800ab7a:	6823      	ldr	r3, [r4, #0]
 800ab7c:	b103      	cbz	r3, 800ab80 <_fstat_r+0x1c>
 800ab7e:	602b      	str	r3, [r5, #0]
 800ab80:	bd38      	pop	{r3, r4, r5, pc}
 800ab82:	bf00      	nop
 800ab84:	20000e38 	.word	0x20000e38

0800ab88 <_isatty_r>:
 800ab88:	b538      	push	{r3, r4, r5, lr}
 800ab8a:	4c06      	ldr	r4, [pc, #24]	; (800aba4 <_isatty_r+0x1c>)
 800ab8c:	2300      	movs	r3, #0
 800ab8e:	4605      	mov	r5, r0
 800ab90:	4608      	mov	r0, r1
 800ab92:	6023      	str	r3, [r4, #0]
 800ab94:	f7fe ff51 	bl	8009a3a <_isatty>
 800ab98:	1c43      	adds	r3, r0, #1
 800ab9a:	d102      	bne.n	800aba2 <_isatty_r+0x1a>
 800ab9c:	6823      	ldr	r3, [r4, #0]
 800ab9e:	b103      	cbz	r3, 800aba2 <_isatty_r+0x1a>
 800aba0:	602b      	str	r3, [r5, #0]
 800aba2:	bd38      	pop	{r3, r4, r5, pc}
 800aba4:	20000e38 	.word	0x20000e38

0800aba8 <_lseek_r>:
 800aba8:	b538      	push	{r3, r4, r5, lr}
 800abaa:	4c07      	ldr	r4, [pc, #28]	; (800abc8 <_lseek_r+0x20>)
 800abac:	4605      	mov	r5, r0
 800abae:	4608      	mov	r0, r1
 800abb0:	4611      	mov	r1, r2
 800abb2:	2200      	movs	r2, #0
 800abb4:	6022      	str	r2, [r4, #0]
 800abb6:	461a      	mov	r2, r3
 800abb8:	f7fe ff4a 	bl	8009a50 <_lseek>
 800abbc:	1c43      	adds	r3, r0, #1
 800abbe:	d102      	bne.n	800abc6 <_lseek_r+0x1e>
 800abc0:	6823      	ldr	r3, [r4, #0]
 800abc2:	b103      	cbz	r3, 800abc6 <_lseek_r+0x1e>
 800abc4:	602b      	str	r3, [r5, #0]
 800abc6:	bd38      	pop	{r3, r4, r5, pc}
 800abc8:	20000e38 	.word	0x20000e38

0800abcc <__malloc_lock>:
 800abcc:	4770      	bx	lr

0800abce <__malloc_unlock>:
 800abce:	4770      	bx	lr

0800abd0 <_read_r>:
 800abd0:	b538      	push	{r3, r4, r5, lr}
 800abd2:	4c07      	ldr	r4, [pc, #28]	; (800abf0 <_read_r+0x20>)
 800abd4:	4605      	mov	r5, r0
 800abd6:	4608      	mov	r0, r1
 800abd8:	4611      	mov	r1, r2
 800abda:	2200      	movs	r2, #0
 800abdc:	6022      	str	r2, [r4, #0]
 800abde:	461a      	mov	r2, r3
 800abe0:	f7fe fed6 	bl	8009990 <_read>
 800abe4:	1c43      	adds	r3, r0, #1
 800abe6:	d102      	bne.n	800abee <_read_r+0x1e>
 800abe8:	6823      	ldr	r3, [r4, #0]
 800abea:	b103      	cbz	r3, 800abee <_read_r+0x1e>
 800abec:	602b      	str	r3, [r5, #0]
 800abee:	bd38      	pop	{r3, r4, r5, pc}
 800abf0:	20000e38 	.word	0x20000e38

0800abf4 <sqrt>:
 800abf4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800abf8:	ed2d 8b02 	vpush	{d8}
 800abfc:	b08b      	sub	sp, #44	; 0x2c
 800abfe:	ec55 4b10 	vmov	r4, r5, d0
 800ac02:	f000 f851 	bl	800aca8 <__ieee754_sqrt>
 800ac06:	4b26      	ldr	r3, [pc, #152]	; (800aca0 <sqrt+0xac>)
 800ac08:	eeb0 8a40 	vmov.f32	s16, s0
 800ac0c:	eef0 8a60 	vmov.f32	s17, s1
 800ac10:	f993 6000 	ldrsb.w	r6, [r3]
 800ac14:	1c73      	adds	r3, r6, #1
 800ac16:	d02a      	beq.n	800ac6e <sqrt+0x7a>
 800ac18:	4622      	mov	r2, r4
 800ac1a:	462b      	mov	r3, r5
 800ac1c:	4620      	mov	r0, r4
 800ac1e:	4629      	mov	r1, r5
 800ac20:	f7f5 ff7c 	bl	8000b1c <__aeabi_dcmpun>
 800ac24:	4607      	mov	r7, r0
 800ac26:	bb10      	cbnz	r0, 800ac6e <sqrt+0x7a>
 800ac28:	f04f 0800 	mov.w	r8, #0
 800ac2c:	f04f 0900 	mov.w	r9, #0
 800ac30:	4642      	mov	r2, r8
 800ac32:	464b      	mov	r3, r9
 800ac34:	4620      	mov	r0, r4
 800ac36:	4629      	mov	r1, r5
 800ac38:	f7f5 ff48 	bl	8000acc <__aeabi_dcmplt>
 800ac3c:	b1b8      	cbz	r0, 800ac6e <sqrt+0x7a>
 800ac3e:	2301      	movs	r3, #1
 800ac40:	9300      	str	r3, [sp, #0]
 800ac42:	4b18      	ldr	r3, [pc, #96]	; (800aca4 <sqrt+0xb0>)
 800ac44:	9301      	str	r3, [sp, #4]
 800ac46:	9708      	str	r7, [sp, #32]
 800ac48:	e9cd 4504 	strd	r4, r5, [sp, #16]
 800ac4c:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800ac50:	b9b6      	cbnz	r6, 800ac80 <sqrt+0x8c>
 800ac52:	e9cd 8906 	strd	r8, r9, [sp, #24]
 800ac56:	4668      	mov	r0, sp
 800ac58:	f000 f8d6 	bl	800ae08 <matherr>
 800ac5c:	b1d0      	cbz	r0, 800ac94 <sqrt+0xa0>
 800ac5e:	9b08      	ldr	r3, [sp, #32]
 800ac60:	b11b      	cbz	r3, 800ac6a <sqrt+0x76>
 800ac62:	f7fe ff8f 	bl	8009b84 <__errno>
 800ac66:	9b08      	ldr	r3, [sp, #32]
 800ac68:	6003      	str	r3, [r0, #0]
 800ac6a:	ed9d 8b06 	vldr	d8, [sp, #24]
 800ac6e:	eeb0 0a48 	vmov.f32	s0, s16
 800ac72:	eef0 0a68 	vmov.f32	s1, s17
 800ac76:	b00b      	add	sp, #44	; 0x2c
 800ac78:	ecbd 8b02 	vpop	{d8}
 800ac7c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ac80:	4642      	mov	r2, r8
 800ac82:	464b      	mov	r3, r9
 800ac84:	4640      	mov	r0, r8
 800ac86:	4649      	mov	r1, r9
 800ac88:	f7f5 fdd8 	bl	800083c <__aeabi_ddiv>
 800ac8c:	2e02      	cmp	r6, #2
 800ac8e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800ac92:	d1e0      	bne.n	800ac56 <sqrt+0x62>
 800ac94:	f7fe ff76 	bl	8009b84 <__errno>
 800ac98:	2321      	movs	r3, #33	; 0x21
 800ac9a:	6003      	str	r3, [r0, #0]
 800ac9c:	e7df      	b.n	800ac5e <sqrt+0x6a>
 800ac9e:	bf00      	nop
 800aca0:	200000c8 	.word	0x200000c8
 800aca4:	0800b193 	.word	0x0800b193

0800aca8 <__ieee754_sqrt>:
 800aca8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800acac:	4955      	ldr	r1, [pc, #340]	; (800ae04 <__ieee754_sqrt+0x15c>)
 800acae:	ec55 4b10 	vmov	r4, r5, d0
 800acb2:	43a9      	bics	r1, r5
 800acb4:	462b      	mov	r3, r5
 800acb6:	462a      	mov	r2, r5
 800acb8:	d112      	bne.n	800ace0 <__ieee754_sqrt+0x38>
 800acba:	ee10 2a10 	vmov	r2, s0
 800acbe:	ee10 0a10 	vmov	r0, s0
 800acc2:	4629      	mov	r1, r5
 800acc4:	f7f5 fc90 	bl	80005e8 <__aeabi_dmul>
 800acc8:	4602      	mov	r2, r0
 800acca:	460b      	mov	r3, r1
 800accc:	4620      	mov	r0, r4
 800acce:	4629      	mov	r1, r5
 800acd0:	f7f5 fad4 	bl	800027c <__adddf3>
 800acd4:	4604      	mov	r4, r0
 800acd6:	460d      	mov	r5, r1
 800acd8:	ec45 4b10 	vmov	d0, r4, r5
 800acdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ace0:	2d00      	cmp	r5, #0
 800ace2:	ee10 0a10 	vmov	r0, s0
 800ace6:	4621      	mov	r1, r4
 800ace8:	dc0f      	bgt.n	800ad0a <__ieee754_sqrt+0x62>
 800acea:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800acee:	4330      	orrs	r0, r6
 800acf0:	d0f2      	beq.n	800acd8 <__ieee754_sqrt+0x30>
 800acf2:	b155      	cbz	r5, 800ad0a <__ieee754_sqrt+0x62>
 800acf4:	ee10 2a10 	vmov	r2, s0
 800acf8:	4620      	mov	r0, r4
 800acfa:	4629      	mov	r1, r5
 800acfc:	f7f5 fabc 	bl	8000278 <__aeabi_dsub>
 800ad00:	4602      	mov	r2, r0
 800ad02:	460b      	mov	r3, r1
 800ad04:	f7f5 fd9a 	bl	800083c <__aeabi_ddiv>
 800ad08:	e7e4      	b.n	800acd4 <__ieee754_sqrt+0x2c>
 800ad0a:	151b      	asrs	r3, r3, #20
 800ad0c:	d073      	beq.n	800adf6 <__ieee754_sqrt+0x14e>
 800ad0e:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800ad12:	07dd      	lsls	r5, r3, #31
 800ad14:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800ad18:	bf48      	it	mi
 800ad1a:	0fc8      	lsrmi	r0, r1, #31
 800ad1c:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800ad20:	bf44      	itt	mi
 800ad22:	0049      	lslmi	r1, r1, #1
 800ad24:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 800ad28:	2500      	movs	r5, #0
 800ad2a:	1058      	asrs	r0, r3, #1
 800ad2c:	0fcb      	lsrs	r3, r1, #31
 800ad2e:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 800ad32:	0049      	lsls	r1, r1, #1
 800ad34:	2316      	movs	r3, #22
 800ad36:	462c      	mov	r4, r5
 800ad38:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 800ad3c:	19a7      	adds	r7, r4, r6
 800ad3e:	4297      	cmp	r7, r2
 800ad40:	bfde      	ittt	le
 800ad42:	19bc      	addle	r4, r7, r6
 800ad44:	1bd2      	suble	r2, r2, r7
 800ad46:	19ad      	addle	r5, r5, r6
 800ad48:	0fcf      	lsrs	r7, r1, #31
 800ad4a:	3b01      	subs	r3, #1
 800ad4c:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 800ad50:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800ad54:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800ad58:	d1f0      	bne.n	800ad3c <__ieee754_sqrt+0x94>
 800ad5a:	f04f 0c20 	mov.w	ip, #32
 800ad5e:	469e      	mov	lr, r3
 800ad60:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800ad64:	42a2      	cmp	r2, r4
 800ad66:	eb06 070e 	add.w	r7, r6, lr
 800ad6a:	dc02      	bgt.n	800ad72 <__ieee754_sqrt+0xca>
 800ad6c:	d112      	bne.n	800ad94 <__ieee754_sqrt+0xec>
 800ad6e:	428f      	cmp	r7, r1
 800ad70:	d810      	bhi.n	800ad94 <__ieee754_sqrt+0xec>
 800ad72:	2f00      	cmp	r7, #0
 800ad74:	eb07 0e06 	add.w	lr, r7, r6
 800ad78:	da42      	bge.n	800ae00 <__ieee754_sqrt+0x158>
 800ad7a:	f1be 0f00 	cmp.w	lr, #0
 800ad7e:	db3f      	blt.n	800ae00 <__ieee754_sqrt+0x158>
 800ad80:	f104 0801 	add.w	r8, r4, #1
 800ad84:	1b12      	subs	r2, r2, r4
 800ad86:	428f      	cmp	r7, r1
 800ad88:	bf88      	it	hi
 800ad8a:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800ad8e:	1bc9      	subs	r1, r1, r7
 800ad90:	4433      	add	r3, r6
 800ad92:	4644      	mov	r4, r8
 800ad94:	0052      	lsls	r2, r2, #1
 800ad96:	f1bc 0c01 	subs.w	ip, ip, #1
 800ad9a:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 800ad9e:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800ada2:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800ada6:	d1dd      	bne.n	800ad64 <__ieee754_sqrt+0xbc>
 800ada8:	430a      	orrs	r2, r1
 800adaa:	d006      	beq.n	800adba <__ieee754_sqrt+0x112>
 800adac:	1c5c      	adds	r4, r3, #1
 800adae:	bf13      	iteet	ne
 800adb0:	3301      	addne	r3, #1
 800adb2:	3501      	addeq	r5, #1
 800adb4:	4663      	moveq	r3, ip
 800adb6:	f023 0301 	bicne.w	r3, r3, #1
 800adba:	106a      	asrs	r2, r5, #1
 800adbc:	085b      	lsrs	r3, r3, #1
 800adbe:	07e9      	lsls	r1, r5, #31
 800adc0:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800adc4:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800adc8:	bf48      	it	mi
 800adca:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800adce:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 800add2:	461c      	mov	r4, r3
 800add4:	e780      	b.n	800acd8 <__ieee754_sqrt+0x30>
 800add6:	0aca      	lsrs	r2, r1, #11
 800add8:	3815      	subs	r0, #21
 800adda:	0549      	lsls	r1, r1, #21
 800addc:	2a00      	cmp	r2, #0
 800adde:	d0fa      	beq.n	800add6 <__ieee754_sqrt+0x12e>
 800ade0:	02d6      	lsls	r6, r2, #11
 800ade2:	d50a      	bpl.n	800adfa <__ieee754_sqrt+0x152>
 800ade4:	f1c3 0420 	rsb	r4, r3, #32
 800ade8:	fa21 f404 	lsr.w	r4, r1, r4
 800adec:	1e5d      	subs	r5, r3, #1
 800adee:	4099      	lsls	r1, r3
 800adf0:	4322      	orrs	r2, r4
 800adf2:	1b43      	subs	r3, r0, r5
 800adf4:	e78b      	b.n	800ad0e <__ieee754_sqrt+0x66>
 800adf6:	4618      	mov	r0, r3
 800adf8:	e7f0      	b.n	800addc <__ieee754_sqrt+0x134>
 800adfa:	0052      	lsls	r2, r2, #1
 800adfc:	3301      	adds	r3, #1
 800adfe:	e7ef      	b.n	800ade0 <__ieee754_sqrt+0x138>
 800ae00:	46a0      	mov	r8, r4
 800ae02:	e7bf      	b.n	800ad84 <__ieee754_sqrt+0xdc>
 800ae04:	7ff00000 	.word	0x7ff00000

0800ae08 <matherr>:
 800ae08:	2000      	movs	r0, #0
 800ae0a:	4770      	bx	lr

0800ae0c <_init>:
 800ae0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae0e:	bf00      	nop
 800ae10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ae12:	bc08      	pop	{r3}
 800ae14:	469e      	mov	lr, r3
 800ae16:	4770      	bx	lr

0800ae18 <_fini>:
 800ae18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae1a:	bf00      	nop
 800ae1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ae1e:	bc08      	pop	{r3}
 800ae20:	469e      	mov	lr, r3
 800ae22:	4770      	bx	lr
