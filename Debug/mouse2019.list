
mouse2019.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001358c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005d0  0801371c  0801371c  0002371c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08013cec  08013cec  000300ec  2**0
                  CONTENTS
  4 .ARM          00000008  08013cec  08013cec  00023cec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08013cf4  08013cf4  000300ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08013cf4  08013cf4  00023cf4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08013cf8  08013cf8  00023cf8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000ec  20000000  08013cfc  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000014f0  200000ec  08013de8  000300ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200015dc  08013de8  000315dc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000300ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016e5d  00000000  00000000  0003011c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000030ac  00000000  00000000  00046f79  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001400  00000000  00000000  0004a028  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000012b0  00000000  00000000  0004b428  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00022bf9  00000000  00000000  0004c6d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00010ce2  00000000  00000000  0006f2d1  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c8996  00000000  00000000  0007ffb3  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00148949  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005d74  00000000  00000000  001489c4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000ec 	.word	0x200000ec
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08013704 	.word	0x08013704

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000f0 	.word	0x200000f0
 80001cc:	08013704 	.word	0x08013704

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ae:	f1a4 0401 	sub.w	r4, r4, #1
 80003b2:	d1e9      	bne.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__gedf2>:
 8000a0c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a10:	e006      	b.n	8000a20 <__cmpdf2+0x4>
 8000a12:	bf00      	nop

08000a14 <__ledf2>:
 8000a14:	f04f 0c01 	mov.w	ip, #1
 8000a18:	e002      	b.n	8000a20 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__cmpdf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a36:	d01b      	beq.n	8000a70 <__cmpdf2+0x54>
 8000a38:	b001      	add	sp, #4
 8000a3a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a3e:	bf0c      	ite	eq
 8000a40:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a44:	ea91 0f03 	teqne	r1, r3
 8000a48:	bf02      	ittt	eq
 8000a4a:	ea90 0f02 	teqeq	r0, r2
 8000a4e:	2000      	moveq	r0, #0
 8000a50:	4770      	bxeq	lr
 8000a52:	f110 0f00 	cmn.w	r0, #0
 8000a56:	ea91 0f03 	teq	r1, r3
 8000a5a:	bf58      	it	pl
 8000a5c:	4299      	cmppl	r1, r3
 8000a5e:	bf08      	it	eq
 8000a60:	4290      	cmpeq	r0, r2
 8000a62:	bf2c      	ite	cs
 8000a64:	17d8      	asrcs	r0, r3, #31
 8000a66:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a6a:	f040 0001 	orr.w	r0, r0, #1
 8000a6e:	4770      	bx	lr
 8000a70:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a78:	d102      	bne.n	8000a80 <__cmpdf2+0x64>
 8000a7a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a7e:	d107      	bne.n	8000a90 <__cmpdf2+0x74>
 8000a80:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d1d6      	bne.n	8000a38 <__cmpdf2+0x1c>
 8000a8a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a8e:	d0d3      	beq.n	8000a38 <__cmpdf2+0x1c>
 8000a90:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop

08000a98 <__aeabi_cdrcmple>:
 8000a98:	4684      	mov	ip, r0
 8000a9a:	4610      	mov	r0, r2
 8000a9c:	4662      	mov	r2, ip
 8000a9e:	468c      	mov	ip, r1
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4663      	mov	r3, ip
 8000aa4:	e000      	b.n	8000aa8 <__aeabi_cdcmpeq>
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdcmpeq>:
 8000aa8:	b501      	push	{r0, lr}
 8000aaa:	f7ff ffb7 	bl	8000a1c <__cmpdf2>
 8000aae:	2800      	cmp	r0, #0
 8000ab0:	bf48      	it	mi
 8000ab2:	f110 0f00 	cmnmi.w	r0, #0
 8000ab6:	bd01      	pop	{r0, pc}

08000ab8 <__aeabi_dcmpeq>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff fff4 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ac0:	bf0c      	ite	eq
 8000ac2:	2001      	moveq	r0, #1
 8000ac4:	2000      	movne	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_dcmplt>:
 8000acc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad0:	f7ff ffea 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ad4:	bf34      	ite	cc
 8000ad6:	2001      	movcc	r0, #1
 8000ad8:	2000      	movcs	r0, #0
 8000ada:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ade:	bf00      	nop

08000ae0 <__aeabi_dcmple>:
 8000ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae4:	f7ff ffe0 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ae8:	bf94      	ite	ls
 8000aea:	2001      	movls	r0, #1
 8000aec:	2000      	movhi	r0, #0
 8000aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af2:	bf00      	nop

08000af4 <__aeabi_dcmpge>:
 8000af4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af8:	f7ff ffce 	bl	8000a98 <__aeabi_cdrcmple>
 8000afc:	bf94      	ite	ls
 8000afe:	2001      	movls	r0, #1
 8000b00:	2000      	movhi	r0, #0
 8000b02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b06:	bf00      	nop

08000b08 <__aeabi_dcmpgt>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff ffc4 	bl	8000a98 <__aeabi_cdrcmple>
 8000b10:	bf34      	ite	cc
 8000b12:	2001      	movcc	r0, #1
 8000b14:	2000      	movcs	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmpun>:
 8000b1c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b24:	d102      	bne.n	8000b2c <__aeabi_dcmpun+0x10>
 8000b26:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b2a:	d10a      	bne.n	8000b42 <__aeabi_dcmpun+0x26>
 8000b2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x20>
 8000b36:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b3a:	d102      	bne.n	8000b42 <__aeabi_dcmpun+0x26>
 8000b3c:	f04f 0000 	mov.w	r0, #0
 8000b40:	4770      	bx	lr
 8000b42:	f04f 0001 	mov.w	r0, #1
 8000b46:	4770      	bx	lr

08000b48 <__aeabi_d2iz>:
 8000b48:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b4c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b50:	d215      	bcs.n	8000b7e <__aeabi_d2iz+0x36>
 8000b52:	d511      	bpl.n	8000b78 <__aeabi_d2iz+0x30>
 8000b54:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b58:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b5c:	d912      	bls.n	8000b84 <__aeabi_d2iz+0x3c>
 8000b5e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b62:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b66:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b6a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b6e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	4770      	bx	lr
 8000b78:	f04f 0000 	mov.w	r0, #0
 8000b7c:	4770      	bx	lr
 8000b7e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b82:	d105      	bne.n	8000b90 <__aeabi_d2iz+0x48>
 8000b84:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b88:	bf08      	it	eq
 8000b8a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b8e:	4770      	bx	lr
 8000b90:	f04f 0000 	mov.w	r0, #0
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop

08000b98 <__aeabi_d2f>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ba0:	bf24      	itt	cs
 8000ba2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ba6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000baa:	d90d      	bls.n	8000bc8 <__aeabi_d2f+0x30>
 8000bac:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bb0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bb4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bb8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bbc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bc0:	bf08      	it	eq
 8000bc2:	f020 0001 	biceq.w	r0, r0, #1
 8000bc6:	4770      	bx	lr
 8000bc8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bcc:	d121      	bne.n	8000c12 <__aeabi_d2f+0x7a>
 8000bce:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bd2:	bfbc      	itt	lt
 8000bd4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	4770      	bxlt	lr
 8000bda:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bde:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000be2:	f1c2 0218 	rsb	r2, r2, #24
 8000be6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bea:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bee:	fa20 f002 	lsr.w	r0, r0, r2
 8000bf2:	bf18      	it	ne
 8000bf4:	f040 0001 	orrne.w	r0, r0, #1
 8000bf8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bfc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c00:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c04:	ea40 000c 	orr.w	r0, r0, ip
 8000c08:	fa23 f302 	lsr.w	r3, r3, r2
 8000c0c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c10:	e7cc      	b.n	8000bac <__aeabi_d2f+0x14>
 8000c12:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c16:	d107      	bne.n	8000c28 <__aeabi_d2f+0x90>
 8000c18:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c1c:	bf1e      	ittt	ne
 8000c1e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c22:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c26:	4770      	bxne	lr
 8000c28:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c2c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c30:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c34:	4770      	bx	lr
 8000c36:	bf00      	nop

08000c38 <__aeabi_uldivmod>:
 8000c38:	b953      	cbnz	r3, 8000c50 <__aeabi_uldivmod+0x18>
 8000c3a:	b94a      	cbnz	r2, 8000c50 <__aeabi_uldivmod+0x18>
 8000c3c:	2900      	cmp	r1, #0
 8000c3e:	bf08      	it	eq
 8000c40:	2800      	cmpeq	r0, #0
 8000c42:	bf1c      	itt	ne
 8000c44:	f04f 31ff 	movne.w	r1, #4294967295
 8000c48:	f04f 30ff 	movne.w	r0, #4294967295
 8000c4c:	f000 b972 	b.w	8000f34 <__aeabi_idiv0>
 8000c50:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c54:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c58:	f000 f806 	bl	8000c68 <__udivmoddi4>
 8000c5c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c60:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c64:	b004      	add	sp, #16
 8000c66:	4770      	bx	lr

08000c68 <__udivmoddi4>:
 8000c68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c6c:	9e08      	ldr	r6, [sp, #32]
 8000c6e:	4604      	mov	r4, r0
 8000c70:	4688      	mov	r8, r1
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d14b      	bne.n	8000d0e <__udivmoddi4+0xa6>
 8000c76:	428a      	cmp	r2, r1
 8000c78:	4615      	mov	r5, r2
 8000c7a:	d967      	bls.n	8000d4c <__udivmoddi4+0xe4>
 8000c7c:	fab2 f282 	clz	r2, r2
 8000c80:	b14a      	cbz	r2, 8000c96 <__udivmoddi4+0x2e>
 8000c82:	f1c2 0720 	rsb	r7, r2, #32
 8000c86:	fa01 f302 	lsl.w	r3, r1, r2
 8000c8a:	fa20 f707 	lsr.w	r7, r0, r7
 8000c8e:	4095      	lsls	r5, r2
 8000c90:	ea47 0803 	orr.w	r8, r7, r3
 8000c94:	4094      	lsls	r4, r2
 8000c96:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c9a:	0c23      	lsrs	r3, r4, #16
 8000c9c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000ca0:	fa1f fc85 	uxth.w	ip, r5
 8000ca4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000ca8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cac:	fb07 f10c 	mul.w	r1, r7, ip
 8000cb0:	4299      	cmp	r1, r3
 8000cb2:	d909      	bls.n	8000cc8 <__udivmoddi4+0x60>
 8000cb4:	18eb      	adds	r3, r5, r3
 8000cb6:	f107 30ff 	add.w	r0, r7, #4294967295
 8000cba:	f080 811b 	bcs.w	8000ef4 <__udivmoddi4+0x28c>
 8000cbe:	4299      	cmp	r1, r3
 8000cc0:	f240 8118 	bls.w	8000ef4 <__udivmoddi4+0x28c>
 8000cc4:	3f02      	subs	r7, #2
 8000cc6:	442b      	add	r3, r5
 8000cc8:	1a5b      	subs	r3, r3, r1
 8000cca:	b2a4      	uxth	r4, r4
 8000ccc:	fbb3 f0fe 	udiv	r0, r3, lr
 8000cd0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000cd4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cd8:	fb00 fc0c 	mul.w	ip, r0, ip
 8000cdc:	45a4      	cmp	ip, r4
 8000cde:	d909      	bls.n	8000cf4 <__udivmoddi4+0x8c>
 8000ce0:	192c      	adds	r4, r5, r4
 8000ce2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ce6:	f080 8107 	bcs.w	8000ef8 <__udivmoddi4+0x290>
 8000cea:	45a4      	cmp	ip, r4
 8000cec:	f240 8104 	bls.w	8000ef8 <__udivmoddi4+0x290>
 8000cf0:	3802      	subs	r0, #2
 8000cf2:	442c      	add	r4, r5
 8000cf4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000cf8:	eba4 040c 	sub.w	r4, r4, ip
 8000cfc:	2700      	movs	r7, #0
 8000cfe:	b11e      	cbz	r6, 8000d08 <__udivmoddi4+0xa0>
 8000d00:	40d4      	lsrs	r4, r2
 8000d02:	2300      	movs	r3, #0
 8000d04:	e9c6 4300 	strd	r4, r3, [r6]
 8000d08:	4639      	mov	r1, r7
 8000d0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d0e:	428b      	cmp	r3, r1
 8000d10:	d909      	bls.n	8000d26 <__udivmoddi4+0xbe>
 8000d12:	2e00      	cmp	r6, #0
 8000d14:	f000 80eb 	beq.w	8000eee <__udivmoddi4+0x286>
 8000d18:	2700      	movs	r7, #0
 8000d1a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d1e:	4638      	mov	r0, r7
 8000d20:	4639      	mov	r1, r7
 8000d22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d26:	fab3 f783 	clz	r7, r3
 8000d2a:	2f00      	cmp	r7, #0
 8000d2c:	d147      	bne.n	8000dbe <__udivmoddi4+0x156>
 8000d2e:	428b      	cmp	r3, r1
 8000d30:	d302      	bcc.n	8000d38 <__udivmoddi4+0xd0>
 8000d32:	4282      	cmp	r2, r0
 8000d34:	f200 80fa 	bhi.w	8000f2c <__udivmoddi4+0x2c4>
 8000d38:	1a84      	subs	r4, r0, r2
 8000d3a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d3e:	2001      	movs	r0, #1
 8000d40:	4698      	mov	r8, r3
 8000d42:	2e00      	cmp	r6, #0
 8000d44:	d0e0      	beq.n	8000d08 <__udivmoddi4+0xa0>
 8000d46:	e9c6 4800 	strd	r4, r8, [r6]
 8000d4a:	e7dd      	b.n	8000d08 <__udivmoddi4+0xa0>
 8000d4c:	b902      	cbnz	r2, 8000d50 <__udivmoddi4+0xe8>
 8000d4e:	deff      	udf	#255	; 0xff
 8000d50:	fab2 f282 	clz	r2, r2
 8000d54:	2a00      	cmp	r2, #0
 8000d56:	f040 808f 	bne.w	8000e78 <__udivmoddi4+0x210>
 8000d5a:	1b49      	subs	r1, r1, r5
 8000d5c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d60:	fa1f f885 	uxth.w	r8, r5
 8000d64:	2701      	movs	r7, #1
 8000d66:	fbb1 fcfe 	udiv	ip, r1, lr
 8000d6a:	0c23      	lsrs	r3, r4, #16
 8000d6c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000d70:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d74:	fb08 f10c 	mul.w	r1, r8, ip
 8000d78:	4299      	cmp	r1, r3
 8000d7a:	d907      	bls.n	8000d8c <__udivmoddi4+0x124>
 8000d7c:	18eb      	adds	r3, r5, r3
 8000d7e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d82:	d202      	bcs.n	8000d8a <__udivmoddi4+0x122>
 8000d84:	4299      	cmp	r1, r3
 8000d86:	f200 80cd 	bhi.w	8000f24 <__udivmoddi4+0x2bc>
 8000d8a:	4684      	mov	ip, r0
 8000d8c:	1a59      	subs	r1, r3, r1
 8000d8e:	b2a3      	uxth	r3, r4
 8000d90:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d94:	fb0e 1410 	mls	r4, lr, r0, r1
 8000d98:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d9c:	fb08 f800 	mul.w	r8, r8, r0
 8000da0:	45a0      	cmp	r8, r4
 8000da2:	d907      	bls.n	8000db4 <__udivmoddi4+0x14c>
 8000da4:	192c      	adds	r4, r5, r4
 8000da6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000daa:	d202      	bcs.n	8000db2 <__udivmoddi4+0x14a>
 8000dac:	45a0      	cmp	r8, r4
 8000dae:	f200 80b6 	bhi.w	8000f1e <__udivmoddi4+0x2b6>
 8000db2:	4618      	mov	r0, r3
 8000db4:	eba4 0408 	sub.w	r4, r4, r8
 8000db8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000dbc:	e79f      	b.n	8000cfe <__udivmoddi4+0x96>
 8000dbe:	f1c7 0c20 	rsb	ip, r7, #32
 8000dc2:	40bb      	lsls	r3, r7
 8000dc4:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000dc8:	ea4e 0e03 	orr.w	lr, lr, r3
 8000dcc:	fa01 f407 	lsl.w	r4, r1, r7
 8000dd0:	fa20 f50c 	lsr.w	r5, r0, ip
 8000dd4:	fa21 f30c 	lsr.w	r3, r1, ip
 8000dd8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000ddc:	4325      	orrs	r5, r4
 8000dde:	fbb3 f9f8 	udiv	r9, r3, r8
 8000de2:	0c2c      	lsrs	r4, r5, #16
 8000de4:	fb08 3319 	mls	r3, r8, r9, r3
 8000de8:	fa1f fa8e 	uxth.w	sl, lr
 8000dec:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000df0:	fb09 f40a 	mul.w	r4, r9, sl
 8000df4:	429c      	cmp	r4, r3
 8000df6:	fa02 f207 	lsl.w	r2, r2, r7
 8000dfa:	fa00 f107 	lsl.w	r1, r0, r7
 8000dfe:	d90b      	bls.n	8000e18 <__udivmoddi4+0x1b0>
 8000e00:	eb1e 0303 	adds.w	r3, lr, r3
 8000e04:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e08:	f080 8087 	bcs.w	8000f1a <__udivmoddi4+0x2b2>
 8000e0c:	429c      	cmp	r4, r3
 8000e0e:	f240 8084 	bls.w	8000f1a <__udivmoddi4+0x2b2>
 8000e12:	f1a9 0902 	sub.w	r9, r9, #2
 8000e16:	4473      	add	r3, lr
 8000e18:	1b1b      	subs	r3, r3, r4
 8000e1a:	b2ad      	uxth	r5, r5
 8000e1c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e20:	fb08 3310 	mls	r3, r8, r0, r3
 8000e24:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e28:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e2c:	45a2      	cmp	sl, r4
 8000e2e:	d908      	bls.n	8000e42 <__udivmoddi4+0x1da>
 8000e30:	eb1e 0404 	adds.w	r4, lr, r4
 8000e34:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e38:	d26b      	bcs.n	8000f12 <__udivmoddi4+0x2aa>
 8000e3a:	45a2      	cmp	sl, r4
 8000e3c:	d969      	bls.n	8000f12 <__udivmoddi4+0x2aa>
 8000e3e:	3802      	subs	r0, #2
 8000e40:	4474      	add	r4, lr
 8000e42:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e46:	fba0 8902 	umull	r8, r9, r0, r2
 8000e4a:	eba4 040a 	sub.w	r4, r4, sl
 8000e4e:	454c      	cmp	r4, r9
 8000e50:	46c2      	mov	sl, r8
 8000e52:	464b      	mov	r3, r9
 8000e54:	d354      	bcc.n	8000f00 <__udivmoddi4+0x298>
 8000e56:	d051      	beq.n	8000efc <__udivmoddi4+0x294>
 8000e58:	2e00      	cmp	r6, #0
 8000e5a:	d069      	beq.n	8000f30 <__udivmoddi4+0x2c8>
 8000e5c:	ebb1 050a 	subs.w	r5, r1, sl
 8000e60:	eb64 0403 	sbc.w	r4, r4, r3
 8000e64:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000e68:	40fd      	lsrs	r5, r7
 8000e6a:	40fc      	lsrs	r4, r7
 8000e6c:	ea4c 0505 	orr.w	r5, ip, r5
 8000e70:	e9c6 5400 	strd	r5, r4, [r6]
 8000e74:	2700      	movs	r7, #0
 8000e76:	e747      	b.n	8000d08 <__udivmoddi4+0xa0>
 8000e78:	f1c2 0320 	rsb	r3, r2, #32
 8000e7c:	fa20 f703 	lsr.w	r7, r0, r3
 8000e80:	4095      	lsls	r5, r2
 8000e82:	fa01 f002 	lsl.w	r0, r1, r2
 8000e86:	fa21 f303 	lsr.w	r3, r1, r3
 8000e8a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e8e:	4338      	orrs	r0, r7
 8000e90:	0c01      	lsrs	r1, r0, #16
 8000e92:	fbb3 f7fe 	udiv	r7, r3, lr
 8000e96:	fa1f f885 	uxth.w	r8, r5
 8000e9a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000e9e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ea2:	fb07 f308 	mul.w	r3, r7, r8
 8000ea6:	428b      	cmp	r3, r1
 8000ea8:	fa04 f402 	lsl.w	r4, r4, r2
 8000eac:	d907      	bls.n	8000ebe <__udivmoddi4+0x256>
 8000eae:	1869      	adds	r1, r5, r1
 8000eb0:	f107 3cff 	add.w	ip, r7, #4294967295
 8000eb4:	d22f      	bcs.n	8000f16 <__udivmoddi4+0x2ae>
 8000eb6:	428b      	cmp	r3, r1
 8000eb8:	d92d      	bls.n	8000f16 <__udivmoddi4+0x2ae>
 8000eba:	3f02      	subs	r7, #2
 8000ebc:	4429      	add	r1, r5
 8000ebe:	1acb      	subs	r3, r1, r3
 8000ec0:	b281      	uxth	r1, r0
 8000ec2:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ec6:	fb0e 3310 	mls	r3, lr, r0, r3
 8000eca:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ece:	fb00 f308 	mul.w	r3, r0, r8
 8000ed2:	428b      	cmp	r3, r1
 8000ed4:	d907      	bls.n	8000ee6 <__udivmoddi4+0x27e>
 8000ed6:	1869      	adds	r1, r5, r1
 8000ed8:	f100 3cff 	add.w	ip, r0, #4294967295
 8000edc:	d217      	bcs.n	8000f0e <__udivmoddi4+0x2a6>
 8000ede:	428b      	cmp	r3, r1
 8000ee0:	d915      	bls.n	8000f0e <__udivmoddi4+0x2a6>
 8000ee2:	3802      	subs	r0, #2
 8000ee4:	4429      	add	r1, r5
 8000ee6:	1ac9      	subs	r1, r1, r3
 8000ee8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000eec:	e73b      	b.n	8000d66 <__udivmoddi4+0xfe>
 8000eee:	4637      	mov	r7, r6
 8000ef0:	4630      	mov	r0, r6
 8000ef2:	e709      	b.n	8000d08 <__udivmoddi4+0xa0>
 8000ef4:	4607      	mov	r7, r0
 8000ef6:	e6e7      	b.n	8000cc8 <__udivmoddi4+0x60>
 8000ef8:	4618      	mov	r0, r3
 8000efa:	e6fb      	b.n	8000cf4 <__udivmoddi4+0x8c>
 8000efc:	4541      	cmp	r1, r8
 8000efe:	d2ab      	bcs.n	8000e58 <__udivmoddi4+0x1f0>
 8000f00:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f04:	eb69 020e 	sbc.w	r2, r9, lr
 8000f08:	3801      	subs	r0, #1
 8000f0a:	4613      	mov	r3, r2
 8000f0c:	e7a4      	b.n	8000e58 <__udivmoddi4+0x1f0>
 8000f0e:	4660      	mov	r0, ip
 8000f10:	e7e9      	b.n	8000ee6 <__udivmoddi4+0x27e>
 8000f12:	4618      	mov	r0, r3
 8000f14:	e795      	b.n	8000e42 <__udivmoddi4+0x1da>
 8000f16:	4667      	mov	r7, ip
 8000f18:	e7d1      	b.n	8000ebe <__udivmoddi4+0x256>
 8000f1a:	4681      	mov	r9, r0
 8000f1c:	e77c      	b.n	8000e18 <__udivmoddi4+0x1b0>
 8000f1e:	3802      	subs	r0, #2
 8000f20:	442c      	add	r4, r5
 8000f22:	e747      	b.n	8000db4 <__udivmoddi4+0x14c>
 8000f24:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f28:	442b      	add	r3, r5
 8000f2a:	e72f      	b.n	8000d8c <__udivmoddi4+0x124>
 8000f2c:	4638      	mov	r0, r7
 8000f2e:	e708      	b.n	8000d42 <__udivmoddi4+0xda>
 8000f30:	4637      	mov	r7, r6
 8000f32:	e6e9      	b.n	8000d08 <__udivmoddi4+0xa0>

08000f34 <__aeabi_idiv0>:
 8000f34:	4770      	bx	lr
 8000f36:	bf00      	nop

08000f38 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f3c:	4b0e      	ldr	r3, [pc, #56]	; (8000f78 <HAL_Init+0x40>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	4a0d      	ldr	r2, [pc, #52]	; (8000f78 <HAL_Init+0x40>)
 8000f42:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f46:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f48:	4b0b      	ldr	r3, [pc, #44]	; (8000f78 <HAL_Init+0x40>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	4a0a      	ldr	r2, [pc, #40]	; (8000f78 <HAL_Init+0x40>)
 8000f4e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f52:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f54:	4b08      	ldr	r3, [pc, #32]	; (8000f78 <HAL_Init+0x40>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	4a07      	ldr	r2, [pc, #28]	; (8000f78 <HAL_Init+0x40>)
 8000f5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f5e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f60:	2003      	movs	r0, #3
 8000f62:	f000 fd07 	bl	8001974 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f66:	2000      	movs	r0, #0
 8000f68:	f000 f808 	bl	8000f7c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f6c:	f010 ff0a 	bl	8011d84 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f70:	2300      	movs	r3, #0
}
 8000f72:	4618      	mov	r0, r3
 8000f74:	bd80      	pop	{r7, pc}
 8000f76:	bf00      	nop
 8000f78:	40023c00 	.word	0x40023c00

08000f7c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b082      	sub	sp, #8
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f84:	4b12      	ldr	r3, [pc, #72]	; (8000fd0 <HAL_InitTick+0x54>)
 8000f86:	681a      	ldr	r2, [r3, #0]
 8000f88:	4b12      	ldr	r3, [pc, #72]	; (8000fd4 <HAL_InitTick+0x58>)
 8000f8a:	781b      	ldrb	r3, [r3, #0]
 8000f8c:	4619      	mov	r1, r3
 8000f8e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f92:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f96:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	f000 fd1f 	bl	80019de <HAL_SYSTICK_Config>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d001      	beq.n	8000faa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	e00e      	b.n	8000fc8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	2b0f      	cmp	r3, #15
 8000fae:	d80a      	bhi.n	8000fc6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	6879      	ldr	r1, [r7, #4]
 8000fb4:	f04f 30ff 	mov.w	r0, #4294967295
 8000fb8:	f000 fce7 	bl	800198a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fbc:	4a06      	ldr	r2, [pc, #24]	; (8000fd8 <HAL_InitTick+0x5c>)
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	e000      	b.n	8000fc8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000fc6:	2301      	movs	r3, #1
}
 8000fc8:	4618      	mov	r0, r3
 8000fca:	3708      	adds	r7, #8
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd80      	pop	{r7, pc}
 8000fd0:	20000080 	.word	0x20000080
 8000fd4:	20000004 	.word	0x20000004
 8000fd8:	20000000 	.word	0x20000000

08000fdc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fe0:	4b06      	ldr	r3, [pc, #24]	; (8000ffc <HAL_IncTick+0x20>)
 8000fe2:	781b      	ldrb	r3, [r3, #0]
 8000fe4:	461a      	mov	r2, r3
 8000fe6:	4b06      	ldr	r3, [pc, #24]	; (8001000 <HAL_IncTick+0x24>)
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	4413      	add	r3, r2
 8000fec:	4a04      	ldr	r2, [pc, #16]	; (8001000 <HAL_IncTick+0x24>)
 8000fee:	6013      	str	r3, [r2, #0]
}
 8000ff0:	bf00      	nop
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff8:	4770      	bx	lr
 8000ffa:	bf00      	nop
 8000ffc:	20000004 	.word	0x20000004
 8001000:	20000120 	.word	0x20000120

08001004 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001004:	b480      	push	{r7}
 8001006:	af00      	add	r7, sp, #0
  return uwTick;
 8001008:	4b03      	ldr	r3, [pc, #12]	; (8001018 <HAL_GetTick+0x14>)
 800100a:	681b      	ldr	r3, [r3, #0]
}
 800100c:	4618      	mov	r0, r3
 800100e:	46bd      	mov	sp, r7
 8001010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop
 8001018:	20000120 	.word	0x20000120

0800101c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b084      	sub	sp, #16
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001024:	f7ff ffee 	bl	8001004 <HAL_GetTick>
 8001028:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001034:	d005      	beq.n	8001042 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001036:	4b09      	ldr	r3, [pc, #36]	; (800105c <HAL_Delay+0x40>)
 8001038:	781b      	ldrb	r3, [r3, #0]
 800103a:	461a      	mov	r2, r3
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	4413      	add	r3, r2
 8001040:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001042:	bf00      	nop
 8001044:	f7ff ffde 	bl	8001004 <HAL_GetTick>
 8001048:	4602      	mov	r2, r0
 800104a:	68bb      	ldr	r3, [r7, #8]
 800104c:	1ad3      	subs	r3, r2, r3
 800104e:	68fa      	ldr	r2, [r7, #12]
 8001050:	429a      	cmp	r2, r3
 8001052:	d8f7      	bhi.n	8001044 <HAL_Delay+0x28>
  {
  }
}
 8001054:	bf00      	nop
 8001056:	3710      	adds	r7, #16
 8001058:	46bd      	mov	sp, r7
 800105a:	bd80      	pop	{r7, pc}
 800105c:	20000004 	.word	0x20000004

08001060 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b084      	sub	sp, #16
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001068:	2300      	movs	r3, #0
 800106a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	2b00      	cmp	r3, #0
 8001070:	d101      	bne.n	8001076 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001072:	2301      	movs	r3, #1
 8001074:	e033      	b.n	80010de <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800107a:	2b00      	cmp	r3, #0
 800107c:	d109      	bne.n	8001092 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800107e:	6878      	ldr	r0, [r7, #4]
 8001080:	f010 fea8 	bl	8011dd4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	2200      	movs	r2, #0
 8001088:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	2200      	movs	r2, #0
 800108e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001096:	f003 0310 	and.w	r3, r3, #16
 800109a:	2b00      	cmp	r3, #0
 800109c:	d118      	bne.n	80010d0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010a2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80010a6:	f023 0302 	bic.w	r3, r3, #2
 80010aa:	f043 0202 	orr.w	r2, r3, #2
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80010b2:	6878      	ldr	r0, [r7, #4]
 80010b4:	f000 fa92 	bl	80015dc <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	2200      	movs	r2, #0
 80010bc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010c2:	f023 0303 	bic.w	r3, r3, #3
 80010c6:	f043 0201 	orr.w	r2, r3, #1
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	641a      	str	r2, [r3, #64]	; 0x40
 80010ce:	e001      	b.n	80010d4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80010d0:	2301      	movs	r3, #1
 80010d2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	2200      	movs	r2, #0
 80010d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80010dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80010de:	4618      	mov	r0, r3
 80010e0:	3710      	adds	r7, #16
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}
	...

080010e8 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80010e8:	b480      	push	{r7}
 80010ea:	b085      	sub	sp, #20
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80010f0:	2300      	movs	r3, #0
 80010f2:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80010fa:	2b01      	cmp	r3, #1
 80010fc:	d101      	bne.n	8001102 <HAL_ADC_Start+0x1a>
 80010fe:	2302      	movs	r3, #2
 8001100:	e0a5      	b.n	800124e <HAL_ADC_Start+0x166>
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	2201      	movs	r2, #1
 8001106:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	689b      	ldr	r3, [r3, #8]
 8001110:	f003 0301 	and.w	r3, r3, #1
 8001114:	2b01      	cmp	r3, #1
 8001116:	d018      	beq.n	800114a <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	689a      	ldr	r2, [r3, #8]
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	f042 0201 	orr.w	r2, r2, #1
 8001126:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001128:	4b4c      	ldr	r3, [pc, #304]	; (800125c <HAL_ADC_Start+0x174>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	4a4c      	ldr	r2, [pc, #304]	; (8001260 <HAL_ADC_Start+0x178>)
 800112e:	fba2 2303 	umull	r2, r3, r2, r3
 8001132:	0c9a      	lsrs	r2, r3, #18
 8001134:	4613      	mov	r3, r2
 8001136:	005b      	lsls	r3, r3, #1
 8001138:	4413      	add	r3, r2
 800113a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 800113c:	e002      	b.n	8001144 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800113e:	68bb      	ldr	r3, [r7, #8]
 8001140:	3b01      	subs	r3, #1
 8001142:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001144:	68bb      	ldr	r3, [r7, #8]
 8001146:	2b00      	cmp	r3, #0
 8001148:	d1f9      	bne.n	800113e <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	689b      	ldr	r3, [r3, #8]
 8001150:	f003 0301 	and.w	r3, r3, #1
 8001154:	2b01      	cmp	r3, #1
 8001156:	d179      	bne.n	800124c <HAL_ADC_Start+0x164>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800115c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001160:	f023 0301 	bic.w	r3, r3, #1
 8001164:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	685b      	ldr	r3, [r3, #4]
 8001172:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001176:	2b00      	cmp	r3, #0
 8001178:	d007      	beq.n	800118a <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800117e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001182:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800118e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001192:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001196:	d106      	bne.n	80011a6 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800119c:	f023 0206 	bic.w	r2, r3, #6
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	645a      	str	r2, [r3, #68]	; 0x44
 80011a4:	e002      	b.n	80011ac <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	2200      	movs	r2, #0
 80011aa:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	2200      	movs	r2, #0
 80011b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80011b4:	4b2b      	ldr	r3, [pc, #172]	; (8001264 <HAL_ADC_Start+0x17c>)
 80011b6:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80011c0:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	685b      	ldr	r3, [r3, #4]
 80011c6:	f003 031f 	and.w	r3, r3, #31
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d12a      	bne.n	8001224 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	4a25      	ldr	r2, [pc, #148]	; (8001268 <HAL_ADC_Start+0x180>)
 80011d4:	4293      	cmp	r3, r2
 80011d6:	d015      	beq.n	8001204 <HAL_ADC_Start+0x11c>
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	4a23      	ldr	r2, [pc, #140]	; (800126c <HAL_ADC_Start+0x184>)
 80011de:	4293      	cmp	r3, r2
 80011e0:	d105      	bne.n	80011ee <HAL_ADC_Start+0x106>
 80011e2:	4b20      	ldr	r3, [pc, #128]	; (8001264 <HAL_ADC_Start+0x17c>)
 80011e4:	685b      	ldr	r3, [r3, #4]
 80011e6:	f003 031f 	and.w	r3, r3, #31
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d00a      	beq.n	8001204 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	4a1f      	ldr	r2, [pc, #124]	; (8001270 <HAL_ADC_Start+0x188>)
 80011f4:	4293      	cmp	r3, r2
 80011f6:	d129      	bne.n	800124c <HAL_ADC_Start+0x164>
 80011f8:	4b1a      	ldr	r3, [pc, #104]	; (8001264 <HAL_ADC_Start+0x17c>)
 80011fa:	685b      	ldr	r3, [r3, #4]
 80011fc:	f003 031f 	and.w	r3, r3, #31
 8001200:	2b0f      	cmp	r3, #15
 8001202:	d823      	bhi.n	800124c <HAL_ADC_Start+0x164>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	689b      	ldr	r3, [r3, #8]
 800120a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800120e:	2b00      	cmp	r3, #0
 8001210:	d11c      	bne.n	800124c <HAL_ADC_Start+0x164>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	689a      	ldr	r2, [r3, #8]
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001220:	609a      	str	r2, [r3, #8]
 8001222:	e013      	b.n	800124c <HAL_ADC_Start+0x164>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	4a0f      	ldr	r2, [pc, #60]	; (8001268 <HAL_ADC_Start+0x180>)
 800122a:	4293      	cmp	r3, r2
 800122c:	d10e      	bne.n	800124c <HAL_ADC_Start+0x164>
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	689b      	ldr	r3, [r3, #8]
 8001234:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001238:	2b00      	cmp	r3, #0
 800123a:	d107      	bne.n	800124c <HAL_ADC_Start+0x164>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	689a      	ldr	r2, [r3, #8]
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800124a:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 800124c:	2300      	movs	r3, #0
}
 800124e:	4618      	mov	r0, r3
 8001250:	3714      	adds	r7, #20
 8001252:	46bd      	mov	sp, r7
 8001254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001258:	4770      	bx	lr
 800125a:	bf00      	nop
 800125c:	20000080 	.word	0x20000080
 8001260:	431bde83 	.word	0x431bde83
 8001264:	40012300 	.word	0x40012300
 8001268:	40012000 	.word	0x40012000
 800126c:	40012100 	.word	0x40012100
 8001270:	40012200 	.word	0x40012200

08001274 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b084      	sub	sp, #16
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
 800127c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800127e:	2300      	movs	r3, #0
 8001280:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	689b      	ldr	r3, [r3, #8]
 8001288:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800128c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001290:	d113      	bne.n	80012ba <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	689b      	ldr	r3, [r3, #8]
 8001298:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800129c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80012a0:	d10b      	bne.n	80012ba <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012a6:	f043 0220 	orr.w	r2, r3, #32
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	2200      	movs	r2, #0
 80012b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 80012b6:	2301      	movs	r3, #1
 80012b8:	e05c      	b.n	8001374 <HAL_ADC_PollForConversion+0x100>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 80012ba:	f7ff fea3 	bl	8001004 <HAL_GetTick>
 80012be:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80012c0:	e01a      	b.n	80012f8 <HAL_ADC_PollForConversion+0x84>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80012c2:	683b      	ldr	r3, [r7, #0]
 80012c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012c8:	d016      	beq.n	80012f8 <HAL_ADC_PollForConversion+0x84>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d007      	beq.n	80012e0 <HAL_ADC_PollForConversion+0x6c>
 80012d0:	f7ff fe98 	bl	8001004 <HAL_GetTick>
 80012d4:	4602      	mov	r2, r0
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	1ad3      	subs	r3, r2, r3
 80012da:	683a      	ldr	r2, [r7, #0]
 80012dc:	429a      	cmp	r2, r3
 80012de:	d20b      	bcs.n	80012f8 <HAL_ADC_PollForConversion+0x84>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012e4:	f043 0204 	orr.w	r2, r3, #4
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	2200      	movs	r2, #0
 80012f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 80012f4:	2303      	movs	r3, #3
 80012f6:	e03d      	b.n	8001374 <HAL_ADC_PollForConversion+0x100>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	f003 0302 	and.w	r3, r3, #2
 8001302:	2b02      	cmp	r3, #2
 8001304:	d1dd      	bne.n	80012c2 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f06f 0212 	mvn.w	r2, #18
 800130e:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001314:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	689b      	ldr	r3, [r3, #8]
 8001322:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001326:	2b00      	cmp	r3, #0
 8001328:	d123      	bne.n	8001372 <HAL_ADC_PollForConversion+0xfe>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800132e:	2b00      	cmp	r3, #0
 8001330:	d11f      	bne.n	8001372 <HAL_ADC_PollForConversion+0xfe>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001338:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800133c:	2b00      	cmp	r3, #0
 800133e:	d006      	beq.n	800134e <HAL_ADC_PollForConversion+0xda>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	689b      	ldr	r3, [r3, #8]
 8001346:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800134a:	2b00      	cmp	r3, #0
 800134c:	d111      	bne.n	8001372 <HAL_ADC_PollForConversion+0xfe>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001352:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800135e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001362:	2b00      	cmp	r3, #0
 8001364:	d105      	bne.n	8001372 <HAL_ADC_PollForConversion+0xfe>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800136a:	f043 0201 	orr.w	r2, r3, #1
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001372:	2300      	movs	r3, #0
}
 8001374:	4618      	mov	r0, r3
 8001376:	3710      	adds	r7, #16
 8001378:	46bd      	mov	sp, r7
 800137a:	bd80      	pop	{r7, pc}

0800137c <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 800137c:	b480      	push	{r7}
 800137e:	b083      	sub	sp, #12
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800138a:	4618      	mov	r0, r3
 800138c:	370c      	adds	r7, #12
 800138e:	46bd      	mov	sp, r7
 8001390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001394:	4770      	bx	lr
	...

08001398 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001398:	b480      	push	{r7}
 800139a:	b085      	sub	sp, #20
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
 80013a0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80013a2:	2300      	movs	r3, #0
 80013a4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80013ac:	2b01      	cmp	r3, #1
 80013ae:	d101      	bne.n	80013b4 <HAL_ADC_ConfigChannel+0x1c>
 80013b0:	2302      	movs	r3, #2
 80013b2:	e105      	b.n	80015c0 <HAL_ADC_ConfigChannel+0x228>
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	2201      	movs	r2, #1
 80013b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	2b09      	cmp	r3, #9
 80013c2:	d925      	bls.n	8001410 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	68d9      	ldr	r1, [r3, #12]
 80013ca:	683b      	ldr	r3, [r7, #0]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	b29b      	uxth	r3, r3
 80013d0:	461a      	mov	r2, r3
 80013d2:	4613      	mov	r3, r2
 80013d4:	005b      	lsls	r3, r3, #1
 80013d6:	4413      	add	r3, r2
 80013d8:	3b1e      	subs	r3, #30
 80013da:	2207      	movs	r2, #7
 80013dc:	fa02 f303 	lsl.w	r3, r2, r3
 80013e0:	43da      	mvns	r2, r3
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	400a      	ands	r2, r1
 80013e8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	68d9      	ldr	r1, [r3, #12]
 80013f0:	683b      	ldr	r3, [r7, #0]
 80013f2:	689a      	ldr	r2, [r3, #8]
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	b29b      	uxth	r3, r3
 80013fa:	4618      	mov	r0, r3
 80013fc:	4603      	mov	r3, r0
 80013fe:	005b      	lsls	r3, r3, #1
 8001400:	4403      	add	r3, r0
 8001402:	3b1e      	subs	r3, #30
 8001404:	409a      	lsls	r2, r3
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	430a      	orrs	r2, r1
 800140c:	60da      	str	r2, [r3, #12]
 800140e:	e022      	b.n	8001456 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	6919      	ldr	r1, [r3, #16]
 8001416:	683b      	ldr	r3, [r7, #0]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	b29b      	uxth	r3, r3
 800141c:	461a      	mov	r2, r3
 800141e:	4613      	mov	r3, r2
 8001420:	005b      	lsls	r3, r3, #1
 8001422:	4413      	add	r3, r2
 8001424:	2207      	movs	r2, #7
 8001426:	fa02 f303 	lsl.w	r3, r2, r3
 800142a:	43da      	mvns	r2, r3
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	400a      	ands	r2, r1
 8001432:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	6919      	ldr	r1, [r3, #16]
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	689a      	ldr	r2, [r3, #8]
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	b29b      	uxth	r3, r3
 8001444:	4618      	mov	r0, r3
 8001446:	4603      	mov	r3, r0
 8001448:	005b      	lsls	r3, r3, #1
 800144a:	4403      	add	r3, r0
 800144c:	409a      	lsls	r2, r3
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	430a      	orrs	r2, r1
 8001454:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	685b      	ldr	r3, [r3, #4]
 800145a:	2b06      	cmp	r3, #6
 800145c:	d824      	bhi.n	80014a8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	685a      	ldr	r2, [r3, #4]
 8001468:	4613      	mov	r3, r2
 800146a:	009b      	lsls	r3, r3, #2
 800146c:	4413      	add	r3, r2
 800146e:	3b05      	subs	r3, #5
 8001470:	221f      	movs	r2, #31
 8001472:	fa02 f303 	lsl.w	r3, r2, r3
 8001476:	43da      	mvns	r2, r3
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	400a      	ands	r2, r1
 800147e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	b29b      	uxth	r3, r3
 800148c:	4618      	mov	r0, r3
 800148e:	683b      	ldr	r3, [r7, #0]
 8001490:	685a      	ldr	r2, [r3, #4]
 8001492:	4613      	mov	r3, r2
 8001494:	009b      	lsls	r3, r3, #2
 8001496:	4413      	add	r3, r2
 8001498:	3b05      	subs	r3, #5
 800149a:	fa00 f203 	lsl.w	r2, r0, r3
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	430a      	orrs	r2, r1
 80014a4:	635a      	str	r2, [r3, #52]	; 0x34
 80014a6:	e04c      	b.n	8001542 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	685b      	ldr	r3, [r3, #4]
 80014ac:	2b0c      	cmp	r3, #12
 80014ae:	d824      	bhi.n	80014fa <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	685a      	ldr	r2, [r3, #4]
 80014ba:	4613      	mov	r3, r2
 80014bc:	009b      	lsls	r3, r3, #2
 80014be:	4413      	add	r3, r2
 80014c0:	3b23      	subs	r3, #35	; 0x23
 80014c2:	221f      	movs	r2, #31
 80014c4:	fa02 f303 	lsl.w	r3, r2, r3
 80014c8:	43da      	mvns	r2, r3
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	400a      	ands	r2, r1
 80014d0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	b29b      	uxth	r3, r3
 80014de:	4618      	mov	r0, r3
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	685a      	ldr	r2, [r3, #4]
 80014e4:	4613      	mov	r3, r2
 80014e6:	009b      	lsls	r3, r3, #2
 80014e8:	4413      	add	r3, r2
 80014ea:	3b23      	subs	r3, #35	; 0x23
 80014ec:	fa00 f203 	lsl.w	r2, r0, r3
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	430a      	orrs	r2, r1
 80014f6:	631a      	str	r2, [r3, #48]	; 0x30
 80014f8:	e023      	b.n	8001542 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	685a      	ldr	r2, [r3, #4]
 8001504:	4613      	mov	r3, r2
 8001506:	009b      	lsls	r3, r3, #2
 8001508:	4413      	add	r3, r2
 800150a:	3b41      	subs	r3, #65	; 0x41
 800150c:	221f      	movs	r2, #31
 800150e:	fa02 f303 	lsl.w	r3, r2, r3
 8001512:	43da      	mvns	r2, r3
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	400a      	ands	r2, r1
 800151a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	b29b      	uxth	r3, r3
 8001528:	4618      	mov	r0, r3
 800152a:	683b      	ldr	r3, [r7, #0]
 800152c:	685a      	ldr	r2, [r3, #4]
 800152e:	4613      	mov	r3, r2
 8001530:	009b      	lsls	r3, r3, #2
 8001532:	4413      	add	r3, r2
 8001534:	3b41      	subs	r3, #65	; 0x41
 8001536:	fa00 f203 	lsl.w	r2, r0, r3
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	430a      	orrs	r2, r1
 8001540:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001542:	4b22      	ldr	r3, [pc, #136]	; (80015cc <HAL_ADC_ConfigChannel+0x234>)
 8001544:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	4a21      	ldr	r2, [pc, #132]	; (80015d0 <HAL_ADC_ConfigChannel+0x238>)
 800154c:	4293      	cmp	r3, r2
 800154e:	d109      	bne.n	8001564 <HAL_ADC_ConfigChannel+0x1cc>
 8001550:	683b      	ldr	r3, [r7, #0]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	2b12      	cmp	r3, #18
 8001556:	d105      	bne.n	8001564 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	685b      	ldr	r3, [r3, #4]
 800155c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	4a19      	ldr	r2, [pc, #100]	; (80015d0 <HAL_ADC_ConfigChannel+0x238>)
 800156a:	4293      	cmp	r3, r2
 800156c:	d123      	bne.n	80015b6 <HAL_ADC_ConfigChannel+0x21e>
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	2b10      	cmp	r3, #16
 8001574:	d003      	beq.n	800157e <HAL_ADC_ConfigChannel+0x1e6>
 8001576:	683b      	ldr	r3, [r7, #0]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	2b11      	cmp	r3, #17
 800157c:	d11b      	bne.n	80015b6 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	685b      	ldr	r3, [r3, #4]
 8001582:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800158a:	683b      	ldr	r3, [r7, #0]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	2b10      	cmp	r3, #16
 8001590:	d111      	bne.n	80015b6 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001592:	4b10      	ldr	r3, [pc, #64]	; (80015d4 <HAL_ADC_ConfigChannel+0x23c>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	4a10      	ldr	r2, [pc, #64]	; (80015d8 <HAL_ADC_ConfigChannel+0x240>)
 8001598:	fba2 2303 	umull	r2, r3, r2, r3
 800159c:	0c9a      	lsrs	r2, r3, #18
 800159e:	4613      	mov	r3, r2
 80015a0:	009b      	lsls	r3, r3, #2
 80015a2:	4413      	add	r3, r2
 80015a4:	005b      	lsls	r3, r3, #1
 80015a6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80015a8:	e002      	b.n	80015b0 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80015aa:	68bb      	ldr	r3, [r7, #8]
 80015ac:	3b01      	subs	r3, #1
 80015ae:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80015b0:	68bb      	ldr	r3, [r7, #8]
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d1f9      	bne.n	80015aa <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	2200      	movs	r2, #0
 80015ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80015be:	2300      	movs	r3, #0
}
 80015c0:	4618      	mov	r0, r3
 80015c2:	3714      	adds	r7, #20
 80015c4:	46bd      	mov	sp, r7
 80015c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ca:	4770      	bx	lr
 80015cc:	40012300 	.word	0x40012300
 80015d0:	40012000 	.word	0x40012000
 80015d4:	20000080 	.word	0x20000080
 80015d8:	431bde83 	.word	0x431bde83

080015dc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80015dc:	b480      	push	{r7}
 80015de:	b085      	sub	sp, #20
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80015e4:	4b79      	ldr	r3, [pc, #484]	; (80017cc <ADC_Init+0x1f0>)
 80015e6:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	685b      	ldr	r3, [r3, #4]
 80015ec:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	685a      	ldr	r2, [r3, #4]
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	685b      	ldr	r3, [r3, #4]
 80015fc:	431a      	orrs	r2, r3
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	685a      	ldr	r2, [r3, #4]
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001610:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	6859      	ldr	r1, [r3, #4]
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	691b      	ldr	r3, [r3, #16]
 800161c:	021a      	lsls	r2, r3, #8
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	430a      	orrs	r2, r1
 8001624:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	685a      	ldr	r2, [r3, #4]
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001634:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	6859      	ldr	r1, [r3, #4]
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	689a      	ldr	r2, [r3, #8]
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	430a      	orrs	r2, r1
 8001646:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	689a      	ldr	r2, [r3, #8]
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001656:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	6899      	ldr	r1, [r3, #8]
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	68da      	ldr	r2, [r3, #12]
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	430a      	orrs	r2, r1
 8001668:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800166e:	4a58      	ldr	r2, [pc, #352]	; (80017d0 <ADC_Init+0x1f4>)
 8001670:	4293      	cmp	r3, r2
 8001672:	d022      	beq.n	80016ba <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	689a      	ldr	r2, [r3, #8]
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001682:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	6899      	ldr	r1, [r3, #8]
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	430a      	orrs	r2, r1
 8001694:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	689a      	ldr	r2, [r3, #8]
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80016a4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	6899      	ldr	r1, [r3, #8]
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	430a      	orrs	r2, r1
 80016b6:	609a      	str	r2, [r3, #8]
 80016b8:	e00f      	b.n	80016da <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	689a      	ldr	r2, [r3, #8]
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80016c8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	689a      	ldr	r2, [r3, #8]
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80016d8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	689a      	ldr	r2, [r3, #8]
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f022 0202 	bic.w	r2, r2, #2
 80016e8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	6899      	ldr	r1, [r3, #8]
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	7e1b      	ldrb	r3, [r3, #24]
 80016f4:	005a      	lsls	r2, r3, #1
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	430a      	orrs	r2, r1
 80016fc:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001704:	2b00      	cmp	r3, #0
 8001706:	d01b      	beq.n	8001740 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	685a      	ldr	r2, [r3, #4]
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001716:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	685a      	ldr	r2, [r3, #4]
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001726:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	6859      	ldr	r1, [r3, #4]
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001732:	3b01      	subs	r3, #1
 8001734:	035a      	lsls	r2, r3, #13
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	430a      	orrs	r2, r1
 800173c:	605a      	str	r2, [r3, #4]
 800173e:	e007      	b.n	8001750 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	685a      	ldr	r2, [r3, #4]
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800174e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800175e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	69db      	ldr	r3, [r3, #28]
 800176a:	3b01      	subs	r3, #1
 800176c:	051a      	lsls	r2, r3, #20
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	430a      	orrs	r2, r1
 8001774:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	689a      	ldr	r2, [r3, #8]
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001784:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	6899      	ldr	r1, [r3, #8]
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001792:	025a      	lsls	r2, r3, #9
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	430a      	orrs	r2, r1
 800179a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	689a      	ldr	r2, [r3, #8]
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80017aa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	6899      	ldr	r1, [r3, #8]
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	695b      	ldr	r3, [r3, #20]
 80017b6:	029a      	lsls	r2, r3, #10
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	430a      	orrs	r2, r1
 80017be:	609a      	str	r2, [r3, #8]
}
 80017c0:	bf00      	nop
 80017c2:	3714      	adds	r7, #20
 80017c4:	46bd      	mov	sp, r7
 80017c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ca:	4770      	bx	lr
 80017cc:	40012300 	.word	0x40012300
 80017d0:	0f000001 	.word	0x0f000001

080017d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017d4:	b480      	push	{r7}
 80017d6:	b085      	sub	sp, #20
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	f003 0307 	and.w	r3, r3, #7
 80017e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017e4:	4b0c      	ldr	r3, [pc, #48]	; (8001818 <__NVIC_SetPriorityGrouping+0x44>)
 80017e6:	68db      	ldr	r3, [r3, #12]
 80017e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017ea:	68ba      	ldr	r2, [r7, #8]
 80017ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017f0:	4013      	ands	r3, r2
 80017f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017f8:	68bb      	ldr	r3, [r7, #8]
 80017fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017fc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001800:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001804:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001806:	4a04      	ldr	r2, [pc, #16]	; (8001818 <__NVIC_SetPriorityGrouping+0x44>)
 8001808:	68bb      	ldr	r3, [r7, #8]
 800180a:	60d3      	str	r3, [r2, #12]
}
 800180c:	bf00      	nop
 800180e:	3714      	adds	r7, #20
 8001810:	46bd      	mov	sp, r7
 8001812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001816:	4770      	bx	lr
 8001818:	e000ed00 	.word	0xe000ed00

0800181c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800181c:	b480      	push	{r7}
 800181e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001820:	4b04      	ldr	r3, [pc, #16]	; (8001834 <__NVIC_GetPriorityGrouping+0x18>)
 8001822:	68db      	ldr	r3, [r3, #12]
 8001824:	0a1b      	lsrs	r3, r3, #8
 8001826:	f003 0307 	and.w	r3, r3, #7
}
 800182a:	4618      	mov	r0, r3
 800182c:	46bd      	mov	sp, r7
 800182e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001832:	4770      	bx	lr
 8001834:	e000ed00 	.word	0xe000ed00

08001838 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001838:	b480      	push	{r7}
 800183a:	b083      	sub	sp, #12
 800183c:	af00      	add	r7, sp, #0
 800183e:	4603      	mov	r3, r0
 8001840:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001842:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001846:	2b00      	cmp	r3, #0
 8001848:	db0b      	blt.n	8001862 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800184a:	79fb      	ldrb	r3, [r7, #7]
 800184c:	f003 021f 	and.w	r2, r3, #31
 8001850:	4907      	ldr	r1, [pc, #28]	; (8001870 <__NVIC_EnableIRQ+0x38>)
 8001852:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001856:	095b      	lsrs	r3, r3, #5
 8001858:	2001      	movs	r0, #1
 800185a:	fa00 f202 	lsl.w	r2, r0, r2
 800185e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001862:	bf00      	nop
 8001864:	370c      	adds	r7, #12
 8001866:	46bd      	mov	sp, r7
 8001868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186c:	4770      	bx	lr
 800186e:	bf00      	nop
 8001870:	e000e100 	.word	0xe000e100

08001874 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001874:	b480      	push	{r7}
 8001876:	b083      	sub	sp, #12
 8001878:	af00      	add	r7, sp, #0
 800187a:	4603      	mov	r3, r0
 800187c:	6039      	str	r1, [r7, #0]
 800187e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001880:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001884:	2b00      	cmp	r3, #0
 8001886:	db0a      	blt.n	800189e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	b2da      	uxtb	r2, r3
 800188c:	490c      	ldr	r1, [pc, #48]	; (80018c0 <__NVIC_SetPriority+0x4c>)
 800188e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001892:	0112      	lsls	r2, r2, #4
 8001894:	b2d2      	uxtb	r2, r2
 8001896:	440b      	add	r3, r1
 8001898:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800189c:	e00a      	b.n	80018b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	b2da      	uxtb	r2, r3
 80018a2:	4908      	ldr	r1, [pc, #32]	; (80018c4 <__NVIC_SetPriority+0x50>)
 80018a4:	79fb      	ldrb	r3, [r7, #7]
 80018a6:	f003 030f 	and.w	r3, r3, #15
 80018aa:	3b04      	subs	r3, #4
 80018ac:	0112      	lsls	r2, r2, #4
 80018ae:	b2d2      	uxtb	r2, r2
 80018b0:	440b      	add	r3, r1
 80018b2:	761a      	strb	r2, [r3, #24]
}
 80018b4:	bf00      	nop
 80018b6:	370c      	adds	r7, #12
 80018b8:	46bd      	mov	sp, r7
 80018ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018be:	4770      	bx	lr
 80018c0:	e000e100 	.word	0xe000e100
 80018c4:	e000ed00 	.word	0xe000ed00

080018c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018c8:	b480      	push	{r7}
 80018ca:	b089      	sub	sp, #36	; 0x24
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	60f8      	str	r0, [r7, #12]
 80018d0:	60b9      	str	r1, [r7, #8]
 80018d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	f003 0307 	and.w	r3, r3, #7
 80018da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018dc:	69fb      	ldr	r3, [r7, #28]
 80018de:	f1c3 0307 	rsb	r3, r3, #7
 80018e2:	2b04      	cmp	r3, #4
 80018e4:	bf28      	it	cs
 80018e6:	2304      	movcs	r3, #4
 80018e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018ea:	69fb      	ldr	r3, [r7, #28]
 80018ec:	3304      	adds	r3, #4
 80018ee:	2b06      	cmp	r3, #6
 80018f0:	d902      	bls.n	80018f8 <NVIC_EncodePriority+0x30>
 80018f2:	69fb      	ldr	r3, [r7, #28]
 80018f4:	3b03      	subs	r3, #3
 80018f6:	e000      	b.n	80018fa <NVIC_EncodePriority+0x32>
 80018f8:	2300      	movs	r3, #0
 80018fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018fc:	f04f 32ff 	mov.w	r2, #4294967295
 8001900:	69bb      	ldr	r3, [r7, #24]
 8001902:	fa02 f303 	lsl.w	r3, r2, r3
 8001906:	43da      	mvns	r2, r3
 8001908:	68bb      	ldr	r3, [r7, #8]
 800190a:	401a      	ands	r2, r3
 800190c:	697b      	ldr	r3, [r7, #20]
 800190e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001910:	f04f 31ff 	mov.w	r1, #4294967295
 8001914:	697b      	ldr	r3, [r7, #20]
 8001916:	fa01 f303 	lsl.w	r3, r1, r3
 800191a:	43d9      	mvns	r1, r3
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001920:	4313      	orrs	r3, r2
         );
}
 8001922:	4618      	mov	r0, r3
 8001924:	3724      	adds	r7, #36	; 0x24
 8001926:	46bd      	mov	sp, r7
 8001928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192c:	4770      	bx	lr
	...

08001930 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b082      	sub	sp, #8
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	3b01      	subs	r3, #1
 800193c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001940:	d301      	bcc.n	8001946 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001942:	2301      	movs	r3, #1
 8001944:	e00f      	b.n	8001966 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001946:	4a0a      	ldr	r2, [pc, #40]	; (8001970 <SysTick_Config+0x40>)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	3b01      	subs	r3, #1
 800194c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800194e:	210f      	movs	r1, #15
 8001950:	f04f 30ff 	mov.w	r0, #4294967295
 8001954:	f7ff ff8e 	bl	8001874 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001958:	4b05      	ldr	r3, [pc, #20]	; (8001970 <SysTick_Config+0x40>)
 800195a:	2200      	movs	r2, #0
 800195c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800195e:	4b04      	ldr	r3, [pc, #16]	; (8001970 <SysTick_Config+0x40>)
 8001960:	2207      	movs	r2, #7
 8001962:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001964:	2300      	movs	r3, #0
}
 8001966:	4618      	mov	r0, r3
 8001968:	3708      	adds	r7, #8
 800196a:	46bd      	mov	sp, r7
 800196c:	bd80      	pop	{r7, pc}
 800196e:	bf00      	nop
 8001970:	e000e010 	.word	0xe000e010

08001974 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b082      	sub	sp, #8
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800197c:	6878      	ldr	r0, [r7, #4]
 800197e:	f7ff ff29 	bl	80017d4 <__NVIC_SetPriorityGrouping>
}
 8001982:	bf00      	nop
 8001984:	3708      	adds	r7, #8
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}

0800198a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800198a:	b580      	push	{r7, lr}
 800198c:	b086      	sub	sp, #24
 800198e:	af00      	add	r7, sp, #0
 8001990:	4603      	mov	r3, r0
 8001992:	60b9      	str	r1, [r7, #8]
 8001994:	607a      	str	r2, [r7, #4]
 8001996:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001998:	2300      	movs	r3, #0
 800199a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800199c:	f7ff ff3e 	bl	800181c <__NVIC_GetPriorityGrouping>
 80019a0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019a2:	687a      	ldr	r2, [r7, #4]
 80019a4:	68b9      	ldr	r1, [r7, #8]
 80019a6:	6978      	ldr	r0, [r7, #20]
 80019a8:	f7ff ff8e 	bl	80018c8 <NVIC_EncodePriority>
 80019ac:	4602      	mov	r2, r0
 80019ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019b2:	4611      	mov	r1, r2
 80019b4:	4618      	mov	r0, r3
 80019b6:	f7ff ff5d 	bl	8001874 <__NVIC_SetPriority>
}
 80019ba:	bf00      	nop
 80019bc:	3718      	adds	r7, #24
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd80      	pop	{r7, pc}

080019c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019c2:	b580      	push	{r7, lr}
 80019c4:	b082      	sub	sp, #8
 80019c6:	af00      	add	r7, sp, #0
 80019c8:	4603      	mov	r3, r0
 80019ca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019d0:	4618      	mov	r0, r3
 80019d2:	f7ff ff31 	bl	8001838 <__NVIC_EnableIRQ>
}
 80019d6:	bf00      	nop
 80019d8:	3708      	adds	r7, #8
 80019da:	46bd      	mov	sp, r7
 80019dc:	bd80      	pop	{r7, pc}

080019de <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019de:	b580      	push	{r7, lr}
 80019e0:	b082      	sub	sp, #8
 80019e2:	af00      	add	r7, sp, #0
 80019e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019e6:	6878      	ldr	r0, [r7, #4]
 80019e8:	f7ff ffa2 	bl	8001930 <SysTick_Config>
 80019ec:	4603      	mov	r3, r0
}
 80019ee:	4618      	mov	r0, r3
 80019f0:	3708      	adds	r7, #8
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}
	...

080019f8 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b086      	sub	sp, #24
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	60f8      	str	r0, [r7, #12]
 8001a00:	60b9      	str	r1, [r7, #8]
 8001a02:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001a06:	2301      	movs	r3, #1
 8001a08:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001a0a:	4b23      	ldr	r3, [pc, #140]	; (8001a98 <HAL_FLASH_Program+0xa0>)
 8001a0c:	7e1b      	ldrb	r3, [r3, #24]
 8001a0e:	2b01      	cmp	r3, #1
 8001a10:	d101      	bne.n	8001a16 <HAL_FLASH_Program+0x1e>
 8001a12:	2302      	movs	r3, #2
 8001a14:	e03b      	b.n	8001a8e <HAL_FLASH_Program+0x96>
 8001a16:	4b20      	ldr	r3, [pc, #128]	; (8001a98 <HAL_FLASH_Program+0xa0>)
 8001a18:	2201      	movs	r2, #1
 8001a1a:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001a1c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001a20:	f000 f870 	bl	8001b04 <FLASH_WaitForLastOperation>
 8001a24:	4603      	mov	r3, r0
 8001a26:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8001a28:	7dfb      	ldrb	r3, [r7, #23]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d12b      	bne.n	8001a86 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d105      	bne.n	8001a40 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8001a34:	783b      	ldrb	r3, [r7, #0]
 8001a36:	4619      	mov	r1, r3
 8001a38:	68b8      	ldr	r0, [r7, #8]
 8001a3a:	f000 f917 	bl	8001c6c <FLASH_Program_Byte>
 8001a3e:	e016      	b.n	8001a6e <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	2b01      	cmp	r3, #1
 8001a44:	d105      	bne.n	8001a52 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8001a46:	883b      	ldrh	r3, [r7, #0]
 8001a48:	4619      	mov	r1, r3
 8001a4a:	68b8      	ldr	r0, [r7, #8]
 8001a4c:	f000 f8ea 	bl	8001c24 <FLASH_Program_HalfWord>
 8001a50:	e00d      	b.n	8001a6e <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	2b02      	cmp	r3, #2
 8001a56:	d105      	bne.n	8001a64 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	4619      	mov	r1, r3
 8001a5c:	68b8      	ldr	r0, [r7, #8]
 8001a5e:	f000 f8bf 	bl	8001be0 <FLASH_Program_Word>
 8001a62:	e004      	b.n	8001a6e <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8001a64:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001a68:	68b8      	ldr	r0, [r7, #8]
 8001a6a:	f000 f88b 	bl	8001b84 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001a6e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001a72:	f000 f847 	bl	8001b04 <FLASH_WaitForLastOperation>
 8001a76:	4603      	mov	r3, r0
 8001a78:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8001a7a:	4b08      	ldr	r3, [pc, #32]	; (8001a9c <HAL_FLASH_Program+0xa4>)
 8001a7c:	691b      	ldr	r3, [r3, #16]
 8001a7e:	4a07      	ldr	r2, [pc, #28]	; (8001a9c <HAL_FLASH_Program+0xa4>)
 8001a80:	f023 0301 	bic.w	r3, r3, #1
 8001a84:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001a86:	4b04      	ldr	r3, [pc, #16]	; (8001a98 <HAL_FLASH_Program+0xa0>)
 8001a88:	2200      	movs	r2, #0
 8001a8a:	761a      	strb	r2, [r3, #24]
  
  return status;
 8001a8c:	7dfb      	ldrb	r3, [r7, #23]
}
 8001a8e:	4618      	mov	r0, r3
 8001a90:	3718      	adds	r7, #24
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}
 8001a96:	bf00      	nop
 8001a98:	20000124 	.word	0x20000124
 8001a9c:	40023c00 	.word	0x40023c00

08001aa0 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	b083      	sub	sp, #12
 8001aa4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001aaa:	4b0b      	ldr	r3, [pc, #44]	; (8001ad8 <HAL_FLASH_Unlock+0x38>)
 8001aac:	691b      	ldr	r3, [r3, #16]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	da0b      	bge.n	8001aca <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8001ab2:	4b09      	ldr	r3, [pc, #36]	; (8001ad8 <HAL_FLASH_Unlock+0x38>)
 8001ab4:	4a09      	ldr	r2, [pc, #36]	; (8001adc <HAL_FLASH_Unlock+0x3c>)
 8001ab6:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8001ab8:	4b07      	ldr	r3, [pc, #28]	; (8001ad8 <HAL_FLASH_Unlock+0x38>)
 8001aba:	4a09      	ldr	r2, [pc, #36]	; (8001ae0 <HAL_FLASH_Unlock+0x40>)
 8001abc:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001abe:	4b06      	ldr	r3, [pc, #24]	; (8001ad8 <HAL_FLASH_Unlock+0x38>)
 8001ac0:	691b      	ldr	r3, [r3, #16]
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	da01      	bge.n	8001aca <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8001aca:	79fb      	ldrb	r3, [r7, #7]
}
 8001acc:	4618      	mov	r0, r3
 8001ace:	370c      	adds	r7, #12
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad6:	4770      	bx	lr
 8001ad8:	40023c00 	.word	0x40023c00
 8001adc:	45670123 	.word	0x45670123
 8001ae0:	cdef89ab 	.word	0xcdef89ab

08001ae4 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8001ae8:	4b05      	ldr	r3, [pc, #20]	; (8001b00 <HAL_FLASH_Lock+0x1c>)
 8001aea:	691b      	ldr	r3, [r3, #16]
 8001aec:	4a04      	ldr	r2, [pc, #16]	; (8001b00 <HAL_FLASH_Lock+0x1c>)
 8001aee:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001af2:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8001af4:	2300      	movs	r3, #0
}
 8001af6:	4618      	mov	r0, r3
 8001af8:	46bd      	mov	sp, r7
 8001afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afe:	4770      	bx	lr
 8001b00:	40023c00 	.word	0x40023c00

08001b04 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b084      	sub	sp, #16
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001b10:	4b1a      	ldr	r3, [pc, #104]	; (8001b7c <FLASH_WaitForLastOperation+0x78>)
 8001b12:	2200      	movs	r2, #0
 8001b14:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8001b16:	f7ff fa75 	bl	8001004 <HAL_GetTick>
 8001b1a:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8001b1c:	e010      	b.n	8001b40 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b24:	d00c      	beq.n	8001b40 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d007      	beq.n	8001b3c <FLASH_WaitForLastOperation+0x38>
 8001b2c:	f7ff fa6a 	bl	8001004 <HAL_GetTick>
 8001b30:	4602      	mov	r2, r0
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	1ad3      	subs	r3, r2, r3
 8001b36:	687a      	ldr	r2, [r7, #4]
 8001b38:	429a      	cmp	r2, r3
 8001b3a:	d201      	bcs.n	8001b40 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8001b3c:	2303      	movs	r3, #3
 8001b3e:	e019      	b.n	8001b74 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8001b40:	4b0f      	ldr	r3, [pc, #60]	; (8001b80 <FLASH_WaitForLastOperation+0x7c>)
 8001b42:	68db      	ldr	r3, [r3, #12]
 8001b44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d1e8      	bne.n	8001b1e <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8001b4c:	4b0c      	ldr	r3, [pc, #48]	; (8001b80 <FLASH_WaitForLastOperation+0x7c>)
 8001b4e:	68db      	ldr	r3, [r3, #12]
 8001b50:	f003 0301 	and.w	r3, r3, #1
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d002      	beq.n	8001b5e <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8001b58:	4b09      	ldr	r3, [pc, #36]	; (8001b80 <FLASH_WaitForLastOperation+0x7c>)
 8001b5a:	2201      	movs	r2, #1
 8001b5c:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8001b5e:	4b08      	ldr	r3, [pc, #32]	; (8001b80 <FLASH_WaitForLastOperation+0x7c>)
 8001b60:	68db      	ldr	r3, [r3, #12]
 8001b62:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d003      	beq.n	8001b72 <FLASH_WaitForLastOperation+0x6e>
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8001b6a:	f000 f8a1 	bl	8001cb0 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8001b6e:	2301      	movs	r3, #1
 8001b70:	e000      	b.n	8001b74 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8001b72:	2300      	movs	r3, #0
  
}  
 8001b74:	4618      	mov	r0, r3
 8001b76:	3710      	adds	r7, #16
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	bd80      	pop	{r7, pc}
 8001b7c:	20000124 	.word	0x20000124
 8001b80:	40023c00 	.word	0x40023c00

08001b84 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8001b84:	b490      	push	{r4, r7}
 8001b86:	b084      	sub	sp, #16
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	60f8      	str	r0, [r7, #12]
 8001b8c:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001b90:	4b12      	ldr	r3, [pc, #72]	; (8001bdc <FLASH_Program_DoubleWord+0x58>)
 8001b92:	691b      	ldr	r3, [r3, #16]
 8001b94:	4a11      	ldr	r2, [pc, #68]	; (8001bdc <FLASH_Program_DoubleWord+0x58>)
 8001b96:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001b9a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8001b9c:	4b0f      	ldr	r3, [pc, #60]	; (8001bdc <FLASH_Program_DoubleWord+0x58>)
 8001b9e:	691b      	ldr	r3, [r3, #16]
 8001ba0:	4a0e      	ldr	r2, [pc, #56]	; (8001bdc <FLASH_Program_DoubleWord+0x58>)
 8001ba2:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8001ba6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001ba8:	4b0c      	ldr	r3, [pc, #48]	; (8001bdc <FLASH_Program_DoubleWord+0x58>)
 8001baa:	691b      	ldr	r3, [r3, #16]
 8001bac:	4a0b      	ldr	r2, [pc, #44]	; (8001bdc <FLASH_Program_DoubleWord+0x58>)
 8001bae:	f043 0301 	orr.w	r3, r3, #1
 8001bb2:	6113      	str	r3, [r2, #16]

  /* Program the double-word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	683a      	ldr	r2, [r7, #0]
 8001bb8:	601a      	str	r2, [r3, #0]
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8001bba:	e9d7 1200 	ldrd	r1, r2, [r7]
 8001bbe:	f04f 0300 	mov.w	r3, #0
 8001bc2:	f04f 0400 	mov.w	r4, #0
 8001bc6:	0013      	movs	r3, r2
 8001bc8:	2400      	movs	r4, #0
 8001bca:	68fa      	ldr	r2, [r7, #12]
 8001bcc:	3204      	adds	r2, #4
 8001bce:	6013      	str	r3, [r2, #0]
}
 8001bd0:	bf00      	nop
 8001bd2:	3710      	adds	r7, #16
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bc90      	pop	{r4, r7}
 8001bd8:	4770      	bx	lr
 8001bda:	bf00      	nop
 8001bdc:	40023c00 	.word	0x40023c00

08001be0 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8001be0:	b480      	push	{r7}
 8001be2:	b083      	sub	sp, #12
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
 8001be8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001bea:	4b0d      	ldr	r3, [pc, #52]	; (8001c20 <FLASH_Program_Word+0x40>)
 8001bec:	691b      	ldr	r3, [r3, #16]
 8001bee:	4a0c      	ldr	r2, [pc, #48]	; (8001c20 <FLASH_Program_Word+0x40>)
 8001bf0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001bf4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8001bf6:	4b0a      	ldr	r3, [pc, #40]	; (8001c20 <FLASH_Program_Word+0x40>)
 8001bf8:	691b      	ldr	r3, [r3, #16]
 8001bfa:	4a09      	ldr	r2, [pc, #36]	; (8001c20 <FLASH_Program_Word+0x40>)
 8001bfc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c00:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001c02:	4b07      	ldr	r3, [pc, #28]	; (8001c20 <FLASH_Program_Word+0x40>)
 8001c04:	691b      	ldr	r3, [r3, #16]
 8001c06:	4a06      	ldr	r2, [pc, #24]	; (8001c20 <FLASH_Program_Word+0x40>)
 8001c08:	f043 0301 	orr.w	r3, r3, #1
 8001c0c:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	683a      	ldr	r2, [r7, #0]
 8001c12:	601a      	str	r2, [r3, #0]
}
 8001c14:	bf00      	nop
 8001c16:	370c      	adds	r7, #12
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1e:	4770      	bx	lr
 8001c20:	40023c00 	.word	0x40023c00

08001c24 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8001c24:	b480      	push	{r7}
 8001c26:	b083      	sub	sp, #12
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
 8001c2c:	460b      	mov	r3, r1
 8001c2e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001c30:	4b0d      	ldr	r3, [pc, #52]	; (8001c68 <FLASH_Program_HalfWord+0x44>)
 8001c32:	691b      	ldr	r3, [r3, #16]
 8001c34:	4a0c      	ldr	r2, [pc, #48]	; (8001c68 <FLASH_Program_HalfWord+0x44>)
 8001c36:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001c3a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8001c3c:	4b0a      	ldr	r3, [pc, #40]	; (8001c68 <FLASH_Program_HalfWord+0x44>)
 8001c3e:	691b      	ldr	r3, [r3, #16]
 8001c40:	4a09      	ldr	r2, [pc, #36]	; (8001c68 <FLASH_Program_HalfWord+0x44>)
 8001c42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c46:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001c48:	4b07      	ldr	r3, [pc, #28]	; (8001c68 <FLASH_Program_HalfWord+0x44>)
 8001c4a:	691b      	ldr	r3, [r3, #16]
 8001c4c:	4a06      	ldr	r2, [pc, #24]	; (8001c68 <FLASH_Program_HalfWord+0x44>)
 8001c4e:	f043 0301 	orr.w	r3, r3, #1
 8001c52:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	887a      	ldrh	r2, [r7, #2]
 8001c58:	801a      	strh	r2, [r3, #0]
}
 8001c5a:	bf00      	nop
 8001c5c:	370c      	adds	r7, #12
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c64:	4770      	bx	lr
 8001c66:	bf00      	nop
 8001c68:	40023c00 	.word	0x40023c00

08001c6c <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	b083      	sub	sp, #12
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
 8001c74:	460b      	mov	r3, r1
 8001c76:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001c78:	4b0c      	ldr	r3, [pc, #48]	; (8001cac <FLASH_Program_Byte+0x40>)
 8001c7a:	691b      	ldr	r3, [r3, #16]
 8001c7c:	4a0b      	ldr	r2, [pc, #44]	; (8001cac <FLASH_Program_Byte+0x40>)
 8001c7e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001c82:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8001c84:	4b09      	ldr	r3, [pc, #36]	; (8001cac <FLASH_Program_Byte+0x40>)
 8001c86:	4a09      	ldr	r2, [pc, #36]	; (8001cac <FLASH_Program_Byte+0x40>)
 8001c88:	691b      	ldr	r3, [r3, #16]
 8001c8a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001c8c:	4b07      	ldr	r3, [pc, #28]	; (8001cac <FLASH_Program_Byte+0x40>)
 8001c8e:	691b      	ldr	r3, [r3, #16]
 8001c90:	4a06      	ldr	r2, [pc, #24]	; (8001cac <FLASH_Program_Byte+0x40>)
 8001c92:	f043 0301 	orr.w	r3, r3, #1
 8001c96:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	78fa      	ldrb	r2, [r7, #3]
 8001c9c:	701a      	strb	r2, [r3, #0]
}
 8001c9e:	bf00      	nop
 8001ca0:	370c      	adds	r7, #12
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca8:	4770      	bx	lr
 8001caa:	bf00      	nop
 8001cac:	40023c00 	.word	0x40023c00

08001cb0 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8001cb0:	b480      	push	{r7}
 8001cb2:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8001cb4:	4b27      	ldr	r3, [pc, #156]	; (8001d54 <FLASH_SetErrorCode+0xa4>)
 8001cb6:	68db      	ldr	r3, [r3, #12]
 8001cb8:	f003 0310 	and.w	r3, r3, #16
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d008      	beq.n	8001cd2 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8001cc0:	4b25      	ldr	r3, [pc, #148]	; (8001d58 <FLASH_SetErrorCode+0xa8>)
 8001cc2:	69db      	ldr	r3, [r3, #28]
 8001cc4:	f043 0310 	orr.w	r3, r3, #16
 8001cc8:	4a23      	ldr	r2, [pc, #140]	; (8001d58 <FLASH_SetErrorCode+0xa8>)
 8001cca:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8001ccc:	4b21      	ldr	r3, [pc, #132]	; (8001d54 <FLASH_SetErrorCode+0xa4>)
 8001cce:	2210      	movs	r2, #16
 8001cd0:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8001cd2:	4b20      	ldr	r3, [pc, #128]	; (8001d54 <FLASH_SetErrorCode+0xa4>)
 8001cd4:	68db      	ldr	r3, [r3, #12]
 8001cd6:	f003 0320 	and.w	r3, r3, #32
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d008      	beq.n	8001cf0 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8001cde:	4b1e      	ldr	r3, [pc, #120]	; (8001d58 <FLASH_SetErrorCode+0xa8>)
 8001ce0:	69db      	ldr	r3, [r3, #28]
 8001ce2:	f043 0308 	orr.w	r3, r3, #8
 8001ce6:	4a1c      	ldr	r2, [pc, #112]	; (8001d58 <FLASH_SetErrorCode+0xa8>)
 8001ce8:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8001cea:	4b1a      	ldr	r3, [pc, #104]	; (8001d54 <FLASH_SetErrorCode+0xa4>)
 8001cec:	2220      	movs	r2, #32
 8001cee:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8001cf0:	4b18      	ldr	r3, [pc, #96]	; (8001d54 <FLASH_SetErrorCode+0xa4>)
 8001cf2:	68db      	ldr	r3, [r3, #12]
 8001cf4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d008      	beq.n	8001d0e <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8001cfc:	4b16      	ldr	r3, [pc, #88]	; (8001d58 <FLASH_SetErrorCode+0xa8>)
 8001cfe:	69db      	ldr	r3, [r3, #28]
 8001d00:	f043 0304 	orr.w	r3, r3, #4
 8001d04:	4a14      	ldr	r2, [pc, #80]	; (8001d58 <FLASH_SetErrorCode+0xa8>)
 8001d06:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8001d08:	4b12      	ldr	r3, [pc, #72]	; (8001d54 <FLASH_SetErrorCode+0xa4>)
 8001d0a:	2240      	movs	r2, #64	; 0x40
 8001d0c:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8001d0e:	4b11      	ldr	r3, [pc, #68]	; (8001d54 <FLASH_SetErrorCode+0xa4>)
 8001d10:	68db      	ldr	r3, [r3, #12]
 8001d12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d008      	beq.n	8001d2c <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8001d1a:	4b0f      	ldr	r3, [pc, #60]	; (8001d58 <FLASH_SetErrorCode+0xa8>)
 8001d1c:	69db      	ldr	r3, [r3, #28]
 8001d1e:	f043 0302 	orr.w	r3, r3, #2
 8001d22:	4a0d      	ldr	r2, [pc, #52]	; (8001d58 <FLASH_SetErrorCode+0xa8>)
 8001d24:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8001d26:	4b0b      	ldr	r3, [pc, #44]	; (8001d54 <FLASH_SetErrorCode+0xa4>)
 8001d28:	2280      	movs	r2, #128	; 0x80
 8001d2a:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8001d2c:	4b09      	ldr	r3, [pc, #36]	; (8001d54 <FLASH_SetErrorCode+0xa4>)
 8001d2e:	68db      	ldr	r3, [r3, #12]
 8001d30:	f003 0302 	and.w	r3, r3, #2
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d008      	beq.n	8001d4a <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8001d38:	4b07      	ldr	r3, [pc, #28]	; (8001d58 <FLASH_SetErrorCode+0xa8>)
 8001d3a:	69db      	ldr	r3, [r3, #28]
 8001d3c:	f043 0320 	orr.w	r3, r3, #32
 8001d40:	4a05      	ldr	r2, [pc, #20]	; (8001d58 <FLASH_SetErrorCode+0xa8>)
 8001d42:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8001d44:	4b03      	ldr	r3, [pc, #12]	; (8001d54 <FLASH_SetErrorCode+0xa4>)
 8001d46:	2202      	movs	r2, #2
 8001d48:	60da      	str	r2, [r3, #12]
  }
}
 8001d4a:	bf00      	nop
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d52:	4770      	bx	lr
 8001d54:	40023c00 	.word	0x40023c00
 8001d58:	20000124 	.word	0x20000124

08001d5c <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b084      	sub	sp, #16
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
 8001d64:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001d66:	2301      	movs	r3, #1
 8001d68:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	60bb      	str	r3, [r7, #8]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001d6e:	4b31      	ldr	r3, [pc, #196]	; (8001e34 <HAL_FLASHEx_Erase+0xd8>)
 8001d70:	7e1b      	ldrb	r3, [r3, #24]
 8001d72:	2b01      	cmp	r3, #1
 8001d74:	d101      	bne.n	8001d7a <HAL_FLASHEx_Erase+0x1e>
 8001d76:	2302      	movs	r3, #2
 8001d78:	e058      	b.n	8001e2c <HAL_FLASHEx_Erase+0xd0>
 8001d7a:	4b2e      	ldr	r3, [pc, #184]	; (8001e34 <HAL_FLASHEx_Erase+0xd8>)
 8001d7c:	2201      	movs	r2, #1
 8001d7e:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001d80:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001d84:	f7ff febe 	bl	8001b04 <FLASH_WaitForLastOperation>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 8001d8c:	7bfb      	ldrb	r3, [r7, #15]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d148      	bne.n	8001e24 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	f04f 32ff 	mov.w	r2, #4294967295
 8001d98:	601a      	str	r2, [r3, #0]
    
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	2b01      	cmp	r3, #1
 8001da0:	d115      	bne.n	8001dce <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	691b      	ldr	r3, [r3, #16]
 8001da6:	b2da      	uxtb	r2, r3
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	4619      	mov	r1, r3
 8001dae:	4610      	mov	r0, r2
 8001db0:	f000 f844 	bl	8001e3c <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001db4:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001db8:	f7ff fea4 	bl	8001b04 <FLASH_WaitForLastOperation>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	73fb      	strb	r3, [r7, #15]
      
      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8001dc0:	4b1d      	ldr	r3, [pc, #116]	; (8001e38 <HAL_FLASHEx_Erase+0xdc>)
 8001dc2:	691b      	ldr	r3, [r3, #16]
 8001dc4:	4a1c      	ldr	r2, [pc, #112]	; (8001e38 <HAL_FLASHEx_Erase+0xdc>)
 8001dc6:	f023 0304 	bic.w	r3, r3, #4
 8001dca:	6113      	str	r3, [r2, #16]
 8001dcc:	e028      	b.n	8001e20 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	689b      	ldr	r3, [r3, #8]
 8001dd2:	60bb      	str	r3, [r7, #8]
 8001dd4:	e01c      	b.n	8001e10 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	691b      	ldr	r3, [r3, #16]
 8001dda:	b2db      	uxtb	r3, r3
 8001ddc:	4619      	mov	r1, r3
 8001dde:	68b8      	ldr	r0, [r7, #8]
 8001de0:	f000 f850 	bl	8001e84 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001de4:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001de8:	f7ff fe8c 	bl	8001b04 <FLASH_WaitForLastOperation>
 8001dec:	4603      	mov	r3, r0
 8001dee:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8001df0:	4b11      	ldr	r3, [pc, #68]	; (8001e38 <HAL_FLASHEx_Erase+0xdc>)
 8001df2:	691b      	ldr	r3, [r3, #16]
 8001df4:	4a10      	ldr	r2, [pc, #64]	; (8001e38 <HAL_FLASHEx_Erase+0xdc>)
 8001df6:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 8001dfa:	6113      	str	r3, [r2, #16]

        if(status != HAL_OK) 
 8001dfc:	7bfb      	ldrb	r3, [r7, #15]
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d003      	beq.n	8001e0a <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	68ba      	ldr	r2, [r7, #8]
 8001e06:	601a      	str	r2, [r3, #0]
          break;
 8001e08:	e00a      	b.n	8001e20 <HAL_FLASHEx_Erase+0xc4>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8001e0a:	68bb      	ldr	r3, [r7, #8]
 8001e0c:	3301      	adds	r3, #1
 8001e0e:	60bb      	str	r3, [r7, #8]
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	68da      	ldr	r2, [r3, #12]
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	689b      	ldr	r3, [r3, #8]
 8001e18:	4413      	add	r3, r2
 8001e1a:	68ba      	ldr	r2, [r7, #8]
 8001e1c:	429a      	cmp	r2, r3
 8001e1e:	d3da      	bcc.n	8001dd6 <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();    
 8001e20:	f000 f878 	bl	8001f14 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001e24:	4b03      	ldr	r3, [pc, #12]	; (8001e34 <HAL_FLASHEx_Erase+0xd8>)
 8001e26:	2200      	movs	r2, #0
 8001e28:	761a      	strb	r2, [r3, #24]

  return status;
 8001e2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	3710      	adds	r7, #16
 8001e30:	46bd      	mov	sp, r7
 8001e32:	bd80      	pop	{r7, pc}
 8001e34:	20000124 	.word	0x20000124
 8001e38:	40023c00 	.word	0x40023c00

08001e3c <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	b083      	sub	sp, #12
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	4603      	mov	r3, r0
 8001e44:	6039      	str	r1, [r7, #0]
 8001e46:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));
  
  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001e48:	4b0d      	ldr	r3, [pc, #52]	; (8001e80 <FLASH_MassErase+0x44>)
 8001e4a:	691b      	ldr	r3, [r3, #16]
 8001e4c:	4a0c      	ldr	r2, [pc, #48]	; (8001e80 <FLASH_MassErase+0x44>)
 8001e4e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001e52:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 8001e54:	4b0a      	ldr	r3, [pc, #40]	; (8001e80 <FLASH_MassErase+0x44>)
 8001e56:	691b      	ldr	r3, [r3, #16]
 8001e58:	4a09      	ldr	r2, [pc, #36]	; (8001e80 <FLASH_MassErase+0x44>)
 8001e5a:	f043 0304 	orr.w	r3, r3, #4
 8001e5e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8U);
 8001e60:	4b07      	ldr	r3, [pc, #28]	; (8001e80 <FLASH_MassErase+0x44>)
 8001e62:	691a      	ldr	r2, [r3, #16]
 8001e64:	79fb      	ldrb	r3, [r7, #7]
 8001e66:	021b      	lsls	r3, r3, #8
 8001e68:	4313      	orrs	r3, r2
 8001e6a:	4a05      	ldr	r2, [pc, #20]	; (8001e80 <FLASH_MassErase+0x44>)
 8001e6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e70:	6113      	str	r3, [r2, #16]
}
 8001e72:	bf00      	nop
 8001e74:	370c      	adds	r7, #12
 8001e76:	46bd      	mov	sp, r7
 8001e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7c:	4770      	bx	lr
 8001e7e:	bf00      	nop
 8001e80:	40023c00 	.word	0x40023c00

08001e84 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8001e84:	b480      	push	{r7}
 8001e86:	b085      	sub	sp, #20
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
 8001e8c:	460b      	mov	r3, r1
 8001e8e:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8001e90:	2300      	movs	r3, #0
 8001e92:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8001e94:	78fb      	ldrb	r3, [r7, #3]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d102      	bne.n	8001ea0 <FLASH_Erase_Sector+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	60fb      	str	r3, [r7, #12]
 8001e9e:	e010      	b.n	8001ec2 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8001ea0:	78fb      	ldrb	r3, [r7, #3]
 8001ea2:	2b01      	cmp	r3, #1
 8001ea4:	d103      	bne.n	8001eae <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8001ea6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001eaa:	60fb      	str	r3, [r7, #12]
 8001eac:	e009      	b.n	8001ec2 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8001eae:	78fb      	ldrb	r3, [r7, #3]
 8001eb0:	2b02      	cmp	r3, #2
 8001eb2:	d103      	bne.n	8001ebc <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8001eb4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001eb8:	60fb      	str	r3, [r7, #12]
 8001eba:	e002      	b.n	8001ec2 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8001ebc:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001ec0:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001ec2:	4b13      	ldr	r3, [pc, #76]	; (8001f10 <FLASH_Erase_Sector+0x8c>)
 8001ec4:	691b      	ldr	r3, [r3, #16]
 8001ec6:	4a12      	ldr	r2, [pc, #72]	; (8001f10 <FLASH_Erase_Sector+0x8c>)
 8001ec8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001ecc:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8001ece:	4b10      	ldr	r3, [pc, #64]	; (8001f10 <FLASH_Erase_Sector+0x8c>)
 8001ed0:	691a      	ldr	r2, [r3, #16]
 8001ed2:	490f      	ldr	r1, [pc, #60]	; (8001f10 <FLASH_Erase_Sector+0x8c>)
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	4313      	orrs	r3, r2
 8001ed8:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8001eda:	4b0d      	ldr	r3, [pc, #52]	; (8001f10 <FLASH_Erase_Sector+0x8c>)
 8001edc:	691b      	ldr	r3, [r3, #16]
 8001ede:	4a0c      	ldr	r2, [pc, #48]	; (8001f10 <FLASH_Erase_Sector+0x8c>)
 8001ee0:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001ee4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8001ee6:	4b0a      	ldr	r3, [pc, #40]	; (8001f10 <FLASH_Erase_Sector+0x8c>)
 8001ee8:	691a      	ldr	r2, [r3, #16]
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	00db      	lsls	r3, r3, #3
 8001eee:	4313      	orrs	r3, r2
 8001ef0:	4a07      	ldr	r2, [pc, #28]	; (8001f10 <FLASH_Erase_Sector+0x8c>)
 8001ef2:	f043 0302 	orr.w	r3, r3, #2
 8001ef6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8001ef8:	4b05      	ldr	r3, [pc, #20]	; (8001f10 <FLASH_Erase_Sector+0x8c>)
 8001efa:	691b      	ldr	r3, [r3, #16]
 8001efc:	4a04      	ldr	r2, [pc, #16]	; (8001f10 <FLASH_Erase_Sector+0x8c>)
 8001efe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f02:	6113      	str	r3, [r2, #16]
}
 8001f04:	bf00      	nop
 8001f06:	3714      	adds	r7, #20
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0e:	4770      	bx	lr
 8001f10:	40023c00 	.word	0x40023c00

08001f14 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8001f14:	b480      	push	{r7}
 8001f16:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN)!= RESET)
 8001f18:	4b20      	ldr	r3, [pc, #128]	; (8001f9c <FLASH_FlushCaches+0x88>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d017      	beq.n	8001f54 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8001f24:	4b1d      	ldr	r3, [pc, #116]	; (8001f9c <FLASH_FlushCaches+0x88>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4a1c      	ldr	r2, [pc, #112]	; (8001f9c <FLASH_FlushCaches+0x88>)
 8001f2a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001f2e:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8001f30:	4b1a      	ldr	r3, [pc, #104]	; (8001f9c <FLASH_FlushCaches+0x88>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4a19      	ldr	r2, [pc, #100]	; (8001f9c <FLASH_FlushCaches+0x88>)
 8001f36:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001f3a:	6013      	str	r3, [r2, #0]
 8001f3c:	4b17      	ldr	r3, [pc, #92]	; (8001f9c <FLASH_FlushCaches+0x88>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4a16      	ldr	r2, [pc, #88]	; (8001f9c <FLASH_FlushCaches+0x88>)
 8001f42:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001f46:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001f48:	4b14      	ldr	r3, [pc, #80]	; (8001f9c <FLASH_FlushCaches+0x88>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4a13      	ldr	r2, [pc, #76]	; (8001f9c <FLASH_FlushCaches+0x88>)
 8001f4e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f52:	6013      	str	r3, [r2, #0]
  }
  
  /* Flush data cache */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8001f54:	4b11      	ldr	r3, [pc, #68]	; (8001f9c <FLASH_FlushCaches+0x88>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d017      	beq.n	8001f90 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8001f60:	4b0e      	ldr	r3, [pc, #56]	; (8001f9c <FLASH_FlushCaches+0x88>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	4a0d      	ldr	r2, [pc, #52]	; (8001f9c <FLASH_FlushCaches+0x88>)
 8001f66:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001f6a:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8001f6c:	4b0b      	ldr	r3, [pc, #44]	; (8001f9c <FLASH_FlushCaches+0x88>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	4a0a      	ldr	r2, [pc, #40]	; (8001f9c <FLASH_FlushCaches+0x88>)
 8001f72:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001f76:	6013      	str	r3, [r2, #0]
 8001f78:	4b08      	ldr	r3, [pc, #32]	; (8001f9c <FLASH_FlushCaches+0x88>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4a07      	ldr	r2, [pc, #28]	; (8001f9c <FLASH_FlushCaches+0x88>)
 8001f7e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001f82:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8001f84:	4b05      	ldr	r3, [pc, #20]	; (8001f9c <FLASH_FlushCaches+0x88>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	4a04      	ldr	r2, [pc, #16]	; (8001f9c <FLASH_FlushCaches+0x88>)
 8001f8a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001f8e:	6013      	str	r3, [r2, #0]
  }
}
 8001f90:	bf00      	nop
 8001f92:	46bd      	mov	sp, r7
 8001f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f98:	4770      	bx	lr
 8001f9a:	bf00      	nop
 8001f9c:	40023c00 	.word	0x40023c00

08001fa0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	b089      	sub	sp, #36	; 0x24
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
 8001fa8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001faa:	2300      	movs	r3, #0
 8001fac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	61fb      	str	r3, [r7, #28]
 8001fba:	e16b      	b.n	8002294 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001fbc:	2201      	movs	r2, #1
 8001fbe:	69fb      	ldr	r3, [r7, #28]
 8001fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	697a      	ldr	r2, [r7, #20]
 8001fcc:	4013      	ands	r3, r2
 8001fce:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001fd0:	693a      	ldr	r2, [r7, #16]
 8001fd2:	697b      	ldr	r3, [r7, #20]
 8001fd4:	429a      	cmp	r2, r3
 8001fd6:	f040 815a 	bne.w	800228e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	685b      	ldr	r3, [r3, #4]
 8001fde:	2b02      	cmp	r3, #2
 8001fe0:	d003      	beq.n	8001fea <HAL_GPIO_Init+0x4a>
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	685b      	ldr	r3, [r3, #4]
 8001fe6:	2b12      	cmp	r3, #18
 8001fe8:	d123      	bne.n	8002032 <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001fea:	69fb      	ldr	r3, [r7, #28]
 8001fec:	08da      	lsrs	r2, r3, #3
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	3208      	adds	r2, #8
 8001ff2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ff6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001ff8:	69fb      	ldr	r3, [r7, #28]
 8001ffa:	f003 0307 	and.w	r3, r3, #7
 8001ffe:	009b      	lsls	r3, r3, #2
 8002000:	220f      	movs	r2, #15
 8002002:	fa02 f303 	lsl.w	r3, r2, r3
 8002006:	43db      	mvns	r3, r3
 8002008:	69ba      	ldr	r2, [r7, #24]
 800200a:	4013      	ands	r3, r2
 800200c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	691a      	ldr	r2, [r3, #16]
 8002012:	69fb      	ldr	r3, [r7, #28]
 8002014:	f003 0307 	and.w	r3, r3, #7
 8002018:	009b      	lsls	r3, r3, #2
 800201a:	fa02 f303 	lsl.w	r3, r2, r3
 800201e:	69ba      	ldr	r2, [r7, #24]
 8002020:	4313      	orrs	r3, r2
 8002022:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002024:	69fb      	ldr	r3, [r7, #28]
 8002026:	08da      	lsrs	r2, r3, #3
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	3208      	adds	r2, #8
 800202c:	69b9      	ldr	r1, [r7, #24]
 800202e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002038:	69fb      	ldr	r3, [r7, #28]
 800203a:	005b      	lsls	r3, r3, #1
 800203c:	2203      	movs	r2, #3
 800203e:	fa02 f303 	lsl.w	r3, r2, r3
 8002042:	43db      	mvns	r3, r3
 8002044:	69ba      	ldr	r2, [r7, #24]
 8002046:	4013      	ands	r3, r2
 8002048:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	685b      	ldr	r3, [r3, #4]
 800204e:	f003 0203 	and.w	r2, r3, #3
 8002052:	69fb      	ldr	r3, [r7, #28]
 8002054:	005b      	lsls	r3, r3, #1
 8002056:	fa02 f303 	lsl.w	r3, r2, r3
 800205a:	69ba      	ldr	r2, [r7, #24]
 800205c:	4313      	orrs	r3, r2
 800205e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	69ba      	ldr	r2, [r7, #24]
 8002064:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	2b01      	cmp	r3, #1
 800206c:	d00b      	beq.n	8002086 <HAL_GPIO_Init+0xe6>
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	685b      	ldr	r3, [r3, #4]
 8002072:	2b02      	cmp	r3, #2
 8002074:	d007      	beq.n	8002086 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800207a:	2b11      	cmp	r3, #17
 800207c:	d003      	beq.n	8002086 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	2b12      	cmp	r3, #18
 8002084:	d130      	bne.n	80020e8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	689b      	ldr	r3, [r3, #8]
 800208a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800208c:	69fb      	ldr	r3, [r7, #28]
 800208e:	005b      	lsls	r3, r3, #1
 8002090:	2203      	movs	r2, #3
 8002092:	fa02 f303 	lsl.w	r3, r2, r3
 8002096:	43db      	mvns	r3, r3
 8002098:	69ba      	ldr	r2, [r7, #24]
 800209a:	4013      	ands	r3, r2
 800209c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	68da      	ldr	r2, [r3, #12]
 80020a2:	69fb      	ldr	r3, [r7, #28]
 80020a4:	005b      	lsls	r3, r3, #1
 80020a6:	fa02 f303 	lsl.w	r3, r2, r3
 80020aa:	69ba      	ldr	r2, [r7, #24]
 80020ac:	4313      	orrs	r3, r2
 80020ae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	69ba      	ldr	r2, [r7, #24]
 80020b4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	685b      	ldr	r3, [r3, #4]
 80020ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80020bc:	2201      	movs	r2, #1
 80020be:	69fb      	ldr	r3, [r7, #28]
 80020c0:	fa02 f303 	lsl.w	r3, r2, r3
 80020c4:	43db      	mvns	r3, r3
 80020c6:	69ba      	ldr	r2, [r7, #24]
 80020c8:	4013      	ands	r3, r2
 80020ca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	091b      	lsrs	r3, r3, #4
 80020d2:	f003 0201 	and.w	r2, r3, #1
 80020d6:	69fb      	ldr	r3, [r7, #28]
 80020d8:	fa02 f303 	lsl.w	r3, r2, r3
 80020dc:	69ba      	ldr	r2, [r7, #24]
 80020de:	4313      	orrs	r3, r2
 80020e0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	69ba      	ldr	r2, [r7, #24]
 80020e6:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	68db      	ldr	r3, [r3, #12]
 80020ec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80020ee:	69fb      	ldr	r3, [r7, #28]
 80020f0:	005b      	lsls	r3, r3, #1
 80020f2:	2203      	movs	r2, #3
 80020f4:	fa02 f303 	lsl.w	r3, r2, r3
 80020f8:	43db      	mvns	r3, r3
 80020fa:	69ba      	ldr	r2, [r7, #24]
 80020fc:	4013      	ands	r3, r2
 80020fe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	689a      	ldr	r2, [r3, #8]
 8002104:	69fb      	ldr	r3, [r7, #28]
 8002106:	005b      	lsls	r3, r3, #1
 8002108:	fa02 f303 	lsl.w	r3, r2, r3
 800210c:	69ba      	ldr	r2, [r7, #24]
 800210e:	4313      	orrs	r3, r2
 8002110:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	69ba      	ldr	r2, [r7, #24]
 8002116:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002120:	2b00      	cmp	r3, #0
 8002122:	f000 80b4 	beq.w	800228e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002126:	2300      	movs	r3, #0
 8002128:	60fb      	str	r3, [r7, #12]
 800212a:	4b5f      	ldr	r3, [pc, #380]	; (80022a8 <HAL_GPIO_Init+0x308>)
 800212c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800212e:	4a5e      	ldr	r2, [pc, #376]	; (80022a8 <HAL_GPIO_Init+0x308>)
 8002130:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002134:	6453      	str	r3, [r2, #68]	; 0x44
 8002136:	4b5c      	ldr	r3, [pc, #368]	; (80022a8 <HAL_GPIO_Init+0x308>)
 8002138:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800213a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800213e:	60fb      	str	r3, [r7, #12]
 8002140:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002142:	4a5a      	ldr	r2, [pc, #360]	; (80022ac <HAL_GPIO_Init+0x30c>)
 8002144:	69fb      	ldr	r3, [r7, #28]
 8002146:	089b      	lsrs	r3, r3, #2
 8002148:	3302      	adds	r3, #2
 800214a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800214e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002150:	69fb      	ldr	r3, [r7, #28]
 8002152:	f003 0303 	and.w	r3, r3, #3
 8002156:	009b      	lsls	r3, r3, #2
 8002158:	220f      	movs	r2, #15
 800215a:	fa02 f303 	lsl.w	r3, r2, r3
 800215e:	43db      	mvns	r3, r3
 8002160:	69ba      	ldr	r2, [r7, #24]
 8002162:	4013      	ands	r3, r2
 8002164:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	4a51      	ldr	r2, [pc, #324]	; (80022b0 <HAL_GPIO_Init+0x310>)
 800216a:	4293      	cmp	r3, r2
 800216c:	d02b      	beq.n	80021c6 <HAL_GPIO_Init+0x226>
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	4a50      	ldr	r2, [pc, #320]	; (80022b4 <HAL_GPIO_Init+0x314>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d025      	beq.n	80021c2 <HAL_GPIO_Init+0x222>
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	4a4f      	ldr	r2, [pc, #316]	; (80022b8 <HAL_GPIO_Init+0x318>)
 800217a:	4293      	cmp	r3, r2
 800217c:	d01f      	beq.n	80021be <HAL_GPIO_Init+0x21e>
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	4a4e      	ldr	r2, [pc, #312]	; (80022bc <HAL_GPIO_Init+0x31c>)
 8002182:	4293      	cmp	r3, r2
 8002184:	d019      	beq.n	80021ba <HAL_GPIO_Init+0x21a>
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	4a4d      	ldr	r2, [pc, #308]	; (80022c0 <HAL_GPIO_Init+0x320>)
 800218a:	4293      	cmp	r3, r2
 800218c:	d013      	beq.n	80021b6 <HAL_GPIO_Init+0x216>
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	4a4c      	ldr	r2, [pc, #304]	; (80022c4 <HAL_GPIO_Init+0x324>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d00d      	beq.n	80021b2 <HAL_GPIO_Init+0x212>
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	4a4b      	ldr	r2, [pc, #300]	; (80022c8 <HAL_GPIO_Init+0x328>)
 800219a:	4293      	cmp	r3, r2
 800219c:	d007      	beq.n	80021ae <HAL_GPIO_Init+0x20e>
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	4a4a      	ldr	r2, [pc, #296]	; (80022cc <HAL_GPIO_Init+0x32c>)
 80021a2:	4293      	cmp	r3, r2
 80021a4:	d101      	bne.n	80021aa <HAL_GPIO_Init+0x20a>
 80021a6:	2307      	movs	r3, #7
 80021a8:	e00e      	b.n	80021c8 <HAL_GPIO_Init+0x228>
 80021aa:	2308      	movs	r3, #8
 80021ac:	e00c      	b.n	80021c8 <HAL_GPIO_Init+0x228>
 80021ae:	2306      	movs	r3, #6
 80021b0:	e00a      	b.n	80021c8 <HAL_GPIO_Init+0x228>
 80021b2:	2305      	movs	r3, #5
 80021b4:	e008      	b.n	80021c8 <HAL_GPIO_Init+0x228>
 80021b6:	2304      	movs	r3, #4
 80021b8:	e006      	b.n	80021c8 <HAL_GPIO_Init+0x228>
 80021ba:	2303      	movs	r3, #3
 80021bc:	e004      	b.n	80021c8 <HAL_GPIO_Init+0x228>
 80021be:	2302      	movs	r3, #2
 80021c0:	e002      	b.n	80021c8 <HAL_GPIO_Init+0x228>
 80021c2:	2301      	movs	r3, #1
 80021c4:	e000      	b.n	80021c8 <HAL_GPIO_Init+0x228>
 80021c6:	2300      	movs	r3, #0
 80021c8:	69fa      	ldr	r2, [r7, #28]
 80021ca:	f002 0203 	and.w	r2, r2, #3
 80021ce:	0092      	lsls	r2, r2, #2
 80021d0:	4093      	lsls	r3, r2
 80021d2:	69ba      	ldr	r2, [r7, #24]
 80021d4:	4313      	orrs	r3, r2
 80021d6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80021d8:	4934      	ldr	r1, [pc, #208]	; (80022ac <HAL_GPIO_Init+0x30c>)
 80021da:	69fb      	ldr	r3, [r7, #28]
 80021dc:	089b      	lsrs	r3, r3, #2
 80021de:	3302      	adds	r3, #2
 80021e0:	69ba      	ldr	r2, [r7, #24]
 80021e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80021e6:	4b3a      	ldr	r3, [pc, #232]	; (80022d0 <HAL_GPIO_Init+0x330>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021ec:	693b      	ldr	r3, [r7, #16]
 80021ee:	43db      	mvns	r3, r3
 80021f0:	69ba      	ldr	r2, [r7, #24]
 80021f2:	4013      	ands	r3, r2
 80021f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	685b      	ldr	r3, [r3, #4]
 80021fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d003      	beq.n	800220a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002202:	69ba      	ldr	r2, [r7, #24]
 8002204:	693b      	ldr	r3, [r7, #16]
 8002206:	4313      	orrs	r3, r2
 8002208:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800220a:	4a31      	ldr	r2, [pc, #196]	; (80022d0 <HAL_GPIO_Init+0x330>)
 800220c:	69bb      	ldr	r3, [r7, #24]
 800220e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002210:	4b2f      	ldr	r3, [pc, #188]	; (80022d0 <HAL_GPIO_Init+0x330>)
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002216:	693b      	ldr	r3, [r7, #16]
 8002218:	43db      	mvns	r3, r3
 800221a:	69ba      	ldr	r2, [r7, #24]
 800221c:	4013      	ands	r3, r2
 800221e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	685b      	ldr	r3, [r3, #4]
 8002224:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002228:	2b00      	cmp	r3, #0
 800222a:	d003      	beq.n	8002234 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800222c:	69ba      	ldr	r2, [r7, #24]
 800222e:	693b      	ldr	r3, [r7, #16]
 8002230:	4313      	orrs	r3, r2
 8002232:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002234:	4a26      	ldr	r2, [pc, #152]	; (80022d0 <HAL_GPIO_Init+0x330>)
 8002236:	69bb      	ldr	r3, [r7, #24]
 8002238:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800223a:	4b25      	ldr	r3, [pc, #148]	; (80022d0 <HAL_GPIO_Init+0x330>)
 800223c:	689b      	ldr	r3, [r3, #8]
 800223e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002240:	693b      	ldr	r3, [r7, #16]
 8002242:	43db      	mvns	r3, r3
 8002244:	69ba      	ldr	r2, [r7, #24]
 8002246:	4013      	ands	r3, r2
 8002248:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	685b      	ldr	r3, [r3, #4]
 800224e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002252:	2b00      	cmp	r3, #0
 8002254:	d003      	beq.n	800225e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002256:	69ba      	ldr	r2, [r7, #24]
 8002258:	693b      	ldr	r3, [r7, #16]
 800225a:	4313      	orrs	r3, r2
 800225c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800225e:	4a1c      	ldr	r2, [pc, #112]	; (80022d0 <HAL_GPIO_Init+0x330>)
 8002260:	69bb      	ldr	r3, [r7, #24]
 8002262:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002264:	4b1a      	ldr	r3, [pc, #104]	; (80022d0 <HAL_GPIO_Init+0x330>)
 8002266:	68db      	ldr	r3, [r3, #12]
 8002268:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800226a:	693b      	ldr	r3, [r7, #16]
 800226c:	43db      	mvns	r3, r3
 800226e:	69ba      	ldr	r2, [r7, #24]
 8002270:	4013      	ands	r3, r2
 8002272:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	685b      	ldr	r3, [r3, #4]
 8002278:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800227c:	2b00      	cmp	r3, #0
 800227e:	d003      	beq.n	8002288 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002280:	69ba      	ldr	r2, [r7, #24]
 8002282:	693b      	ldr	r3, [r7, #16]
 8002284:	4313      	orrs	r3, r2
 8002286:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002288:	4a11      	ldr	r2, [pc, #68]	; (80022d0 <HAL_GPIO_Init+0x330>)
 800228a:	69bb      	ldr	r3, [r7, #24]
 800228c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800228e:	69fb      	ldr	r3, [r7, #28]
 8002290:	3301      	adds	r3, #1
 8002292:	61fb      	str	r3, [r7, #28]
 8002294:	69fb      	ldr	r3, [r7, #28]
 8002296:	2b0f      	cmp	r3, #15
 8002298:	f67f ae90 	bls.w	8001fbc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800229c:	bf00      	nop
 800229e:	3724      	adds	r7, #36	; 0x24
 80022a0:	46bd      	mov	sp, r7
 80022a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a6:	4770      	bx	lr
 80022a8:	40023800 	.word	0x40023800
 80022ac:	40013800 	.word	0x40013800
 80022b0:	40020000 	.word	0x40020000
 80022b4:	40020400 	.word	0x40020400
 80022b8:	40020800 	.word	0x40020800
 80022bc:	40020c00 	.word	0x40020c00
 80022c0:	40021000 	.word	0x40021000
 80022c4:	40021400 	.word	0x40021400
 80022c8:	40021800 	.word	0x40021800
 80022cc:	40021c00 	.word	0x40021c00
 80022d0:	40013c00 	.word	0x40013c00

080022d4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80022d4:	b480      	push	{r7}
 80022d6:	b085      	sub	sp, #20
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
 80022dc:	460b      	mov	r3, r1
 80022de:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	691a      	ldr	r2, [r3, #16]
 80022e4:	887b      	ldrh	r3, [r7, #2]
 80022e6:	4013      	ands	r3, r2
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d002      	beq.n	80022f2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80022ec:	2301      	movs	r3, #1
 80022ee:	73fb      	strb	r3, [r7, #15]
 80022f0:	e001      	b.n	80022f6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80022f2:	2300      	movs	r3, #0
 80022f4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80022f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80022f8:	4618      	mov	r0, r3
 80022fa:	3714      	adds	r7, #20
 80022fc:	46bd      	mov	sp, r7
 80022fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002302:	4770      	bx	lr

08002304 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002304:	b480      	push	{r7}
 8002306:	b083      	sub	sp, #12
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
 800230c:	460b      	mov	r3, r1
 800230e:	807b      	strh	r3, [r7, #2]
 8002310:	4613      	mov	r3, r2
 8002312:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002314:	787b      	ldrb	r3, [r7, #1]
 8002316:	2b00      	cmp	r3, #0
 8002318:	d003      	beq.n	8002322 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800231a:	887a      	ldrh	r2, [r7, #2]
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002320:	e003      	b.n	800232a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002322:	887b      	ldrh	r3, [r7, #2]
 8002324:	041a      	lsls	r2, r3, #16
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	619a      	str	r2, [r3, #24]
}
 800232a:	bf00      	nop
 800232c:	370c      	adds	r7, #12
 800232e:	46bd      	mov	sp, r7
 8002330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002334:	4770      	bx	lr
	...

08002338 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b086      	sub	sp, #24
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2b00      	cmp	r3, #0
 8002344:	d101      	bne.n	800234a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002346:	2301      	movs	r3, #1
 8002348:	e22d      	b.n	80027a6 <HAL_RCC_OscConfig+0x46e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f003 0301 	and.w	r3, r3, #1
 8002352:	2b00      	cmp	r3, #0
 8002354:	d075      	beq.n	8002442 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002356:	4ba3      	ldr	r3, [pc, #652]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 8002358:	689b      	ldr	r3, [r3, #8]
 800235a:	f003 030c 	and.w	r3, r3, #12
 800235e:	2b04      	cmp	r3, #4
 8002360:	d00c      	beq.n	800237c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002362:	4ba0      	ldr	r3, [pc, #640]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 8002364:	689b      	ldr	r3, [r3, #8]
 8002366:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800236a:	2b08      	cmp	r3, #8
 800236c:	d112      	bne.n	8002394 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800236e:	4b9d      	ldr	r3, [pc, #628]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002376:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800237a:	d10b      	bne.n	8002394 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800237c:	4b99      	ldr	r3, [pc, #612]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002384:	2b00      	cmp	r3, #0
 8002386:	d05b      	beq.n	8002440 <HAL_RCC_OscConfig+0x108>
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	685b      	ldr	r3, [r3, #4]
 800238c:	2b00      	cmp	r3, #0
 800238e:	d157      	bne.n	8002440 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002390:	2301      	movs	r3, #1
 8002392:	e208      	b.n	80027a6 <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800239c:	d106      	bne.n	80023ac <HAL_RCC_OscConfig+0x74>
 800239e:	4b91      	ldr	r3, [pc, #580]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	4a90      	ldr	r2, [pc, #576]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 80023a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023a8:	6013      	str	r3, [r2, #0]
 80023aa:	e01d      	b.n	80023e8 <HAL_RCC_OscConfig+0xb0>
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80023b4:	d10c      	bne.n	80023d0 <HAL_RCC_OscConfig+0x98>
 80023b6:	4b8b      	ldr	r3, [pc, #556]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	4a8a      	ldr	r2, [pc, #552]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 80023bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80023c0:	6013      	str	r3, [r2, #0]
 80023c2:	4b88      	ldr	r3, [pc, #544]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	4a87      	ldr	r2, [pc, #540]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 80023c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023cc:	6013      	str	r3, [r2, #0]
 80023ce:	e00b      	b.n	80023e8 <HAL_RCC_OscConfig+0xb0>
 80023d0:	4b84      	ldr	r3, [pc, #528]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	4a83      	ldr	r2, [pc, #524]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 80023d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023da:	6013      	str	r3, [r2, #0]
 80023dc:	4b81      	ldr	r3, [pc, #516]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	4a80      	ldr	r2, [pc, #512]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 80023e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	685b      	ldr	r3, [r3, #4]
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d013      	beq.n	8002418 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023f0:	f7fe fe08 	bl	8001004 <HAL_GetTick>
 80023f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023f6:	e008      	b.n	800240a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80023f8:	f7fe fe04 	bl	8001004 <HAL_GetTick>
 80023fc:	4602      	mov	r2, r0
 80023fe:	693b      	ldr	r3, [r7, #16]
 8002400:	1ad3      	subs	r3, r2, r3
 8002402:	2b64      	cmp	r3, #100	; 0x64
 8002404:	d901      	bls.n	800240a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002406:	2303      	movs	r3, #3
 8002408:	e1cd      	b.n	80027a6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800240a:	4b76      	ldr	r3, [pc, #472]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002412:	2b00      	cmp	r3, #0
 8002414:	d0f0      	beq.n	80023f8 <HAL_RCC_OscConfig+0xc0>
 8002416:	e014      	b.n	8002442 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002418:	f7fe fdf4 	bl	8001004 <HAL_GetTick>
 800241c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800241e:	e008      	b.n	8002432 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002420:	f7fe fdf0 	bl	8001004 <HAL_GetTick>
 8002424:	4602      	mov	r2, r0
 8002426:	693b      	ldr	r3, [r7, #16]
 8002428:	1ad3      	subs	r3, r2, r3
 800242a:	2b64      	cmp	r3, #100	; 0x64
 800242c:	d901      	bls.n	8002432 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800242e:	2303      	movs	r3, #3
 8002430:	e1b9      	b.n	80027a6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002432:	4b6c      	ldr	r3, [pc, #432]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800243a:	2b00      	cmp	r3, #0
 800243c:	d1f0      	bne.n	8002420 <HAL_RCC_OscConfig+0xe8>
 800243e:	e000      	b.n	8002442 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002440:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f003 0302 	and.w	r3, r3, #2
 800244a:	2b00      	cmp	r3, #0
 800244c:	d063      	beq.n	8002516 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800244e:	4b65      	ldr	r3, [pc, #404]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 8002450:	689b      	ldr	r3, [r3, #8]
 8002452:	f003 030c 	and.w	r3, r3, #12
 8002456:	2b00      	cmp	r3, #0
 8002458:	d00b      	beq.n	8002472 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800245a:	4b62      	ldr	r3, [pc, #392]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 800245c:	689b      	ldr	r3, [r3, #8]
 800245e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002462:	2b08      	cmp	r3, #8
 8002464:	d11c      	bne.n	80024a0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002466:	4b5f      	ldr	r3, [pc, #380]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800246e:	2b00      	cmp	r3, #0
 8002470:	d116      	bne.n	80024a0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002472:	4b5c      	ldr	r3, [pc, #368]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f003 0302 	and.w	r3, r3, #2
 800247a:	2b00      	cmp	r3, #0
 800247c:	d005      	beq.n	800248a <HAL_RCC_OscConfig+0x152>
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	68db      	ldr	r3, [r3, #12]
 8002482:	2b01      	cmp	r3, #1
 8002484:	d001      	beq.n	800248a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002486:	2301      	movs	r3, #1
 8002488:	e18d      	b.n	80027a6 <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800248a:	4b56      	ldr	r3, [pc, #344]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	691b      	ldr	r3, [r3, #16]
 8002496:	00db      	lsls	r3, r3, #3
 8002498:	4952      	ldr	r1, [pc, #328]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 800249a:	4313      	orrs	r3, r2
 800249c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800249e:	e03a      	b.n	8002516 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	68db      	ldr	r3, [r3, #12]
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d020      	beq.n	80024ea <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80024a8:	4b4f      	ldr	r3, [pc, #316]	; (80025e8 <HAL_RCC_OscConfig+0x2b0>)
 80024aa:	2201      	movs	r2, #1
 80024ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024ae:	f7fe fda9 	bl	8001004 <HAL_GetTick>
 80024b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024b4:	e008      	b.n	80024c8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80024b6:	f7fe fda5 	bl	8001004 <HAL_GetTick>
 80024ba:	4602      	mov	r2, r0
 80024bc:	693b      	ldr	r3, [r7, #16]
 80024be:	1ad3      	subs	r3, r2, r3
 80024c0:	2b02      	cmp	r3, #2
 80024c2:	d901      	bls.n	80024c8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80024c4:	2303      	movs	r3, #3
 80024c6:	e16e      	b.n	80027a6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024c8:	4b46      	ldr	r3, [pc, #280]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f003 0302 	and.w	r3, r3, #2
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d0f0      	beq.n	80024b6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024d4:	4b43      	ldr	r3, [pc, #268]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	691b      	ldr	r3, [r3, #16]
 80024e0:	00db      	lsls	r3, r3, #3
 80024e2:	4940      	ldr	r1, [pc, #256]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 80024e4:	4313      	orrs	r3, r2
 80024e6:	600b      	str	r3, [r1, #0]
 80024e8:	e015      	b.n	8002516 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80024ea:	4b3f      	ldr	r3, [pc, #252]	; (80025e8 <HAL_RCC_OscConfig+0x2b0>)
 80024ec:	2200      	movs	r2, #0
 80024ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024f0:	f7fe fd88 	bl	8001004 <HAL_GetTick>
 80024f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024f6:	e008      	b.n	800250a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80024f8:	f7fe fd84 	bl	8001004 <HAL_GetTick>
 80024fc:	4602      	mov	r2, r0
 80024fe:	693b      	ldr	r3, [r7, #16]
 8002500:	1ad3      	subs	r3, r2, r3
 8002502:	2b02      	cmp	r3, #2
 8002504:	d901      	bls.n	800250a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002506:	2303      	movs	r3, #3
 8002508:	e14d      	b.n	80027a6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800250a:	4b36      	ldr	r3, [pc, #216]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f003 0302 	and.w	r3, r3, #2
 8002512:	2b00      	cmp	r3, #0
 8002514:	d1f0      	bne.n	80024f8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f003 0308 	and.w	r3, r3, #8
 800251e:	2b00      	cmp	r3, #0
 8002520:	d030      	beq.n	8002584 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	695b      	ldr	r3, [r3, #20]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d016      	beq.n	8002558 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800252a:	4b30      	ldr	r3, [pc, #192]	; (80025ec <HAL_RCC_OscConfig+0x2b4>)
 800252c:	2201      	movs	r2, #1
 800252e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002530:	f7fe fd68 	bl	8001004 <HAL_GetTick>
 8002534:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002536:	e008      	b.n	800254a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002538:	f7fe fd64 	bl	8001004 <HAL_GetTick>
 800253c:	4602      	mov	r2, r0
 800253e:	693b      	ldr	r3, [r7, #16]
 8002540:	1ad3      	subs	r3, r2, r3
 8002542:	2b02      	cmp	r3, #2
 8002544:	d901      	bls.n	800254a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002546:	2303      	movs	r3, #3
 8002548:	e12d      	b.n	80027a6 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800254a:	4b26      	ldr	r3, [pc, #152]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 800254c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800254e:	f003 0302 	and.w	r3, r3, #2
 8002552:	2b00      	cmp	r3, #0
 8002554:	d0f0      	beq.n	8002538 <HAL_RCC_OscConfig+0x200>
 8002556:	e015      	b.n	8002584 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002558:	4b24      	ldr	r3, [pc, #144]	; (80025ec <HAL_RCC_OscConfig+0x2b4>)
 800255a:	2200      	movs	r2, #0
 800255c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800255e:	f7fe fd51 	bl	8001004 <HAL_GetTick>
 8002562:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002564:	e008      	b.n	8002578 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002566:	f7fe fd4d 	bl	8001004 <HAL_GetTick>
 800256a:	4602      	mov	r2, r0
 800256c:	693b      	ldr	r3, [r7, #16]
 800256e:	1ad3      	subs	r3, r2, r3
 8002570:	2b02      	cmp	r3, #2
 8002572:	d901      	bls.n	8002578 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002574:	2303      	movs	r3, #3
 8002576:	e116      	b.n	80027a6 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002578:	4b1a      	ldr	r3, [pc, #104]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 800257a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800257c:	f003 0302 	and.w	r3, r3, #2
 8002580:	2b00      	cmp	r3, #0
 8002582:	d1f0      	bne.n	8002566 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f003 0304 	and.w	r3, r3, #4
 800258c:	2b00      	cmp	r3, #0
 800258e:	f000 80a0 	beq.w	80026d2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002592:	2300      	movs	r3, #0
 8002594:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002596:	4b13      	ldr	r3, [pc, #76]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 8002598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800259a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d10f      	bne.n	80025c2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025a2:	2300      	movs	r3, #0
 80025a4:	60fb      	str	r3, [r7, #12]
 80025a6:	4b0f      	ldr	r3, [pc, #60]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 80025a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025aa:	4a0e      	ldr	r2, [pc, #56]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 80025ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025b0:	6413      	str	r3, [r2, #64]	; 0x40
 80025b2:	4b0c      	ldr	r3, [pc, #48]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 80025b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025ba:	60fb      	str	r3, [r7, #12]
 80025bc:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80025be:	2301      	movs	r3, #1
 80025c0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025c2:	4b0b      	ldr	r3, [pc, #44]	; (80025f0 <HAL_RCC_OscConfig+0x2b8>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d121      	bne.n	8002612 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80025ce:	4b08      	ldr	r3, [pc, #32]	; (80025f0 <HAL_RCC_OscConfig+0x2b8>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	4a07      	ldr	r2, [pc, #28]	; (80025f0 <HAL_RCC_OscConfig+0x2b8>)
 80025d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80025da:	f7fe fd13 	bl	8001004 <HAL_GetTick>
 80025de:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025e0:	e011      	b.n	8002606 <HAL_RCC_OscConfig+0x2ce>
 80025e2:	bf00      	nop
 80025e4:	40023800 	.word	0x40023800
 80025e8:	42470000 	.word	0x42470000
 80025ec:	42470e80 	.word	0x42470e80
 80025f0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025f4:	f7fe fd06 	bl	8001004 <HAL_GetTick>
 80025f8:	4602      	mov	r2, r0
 80025fa:	693b      	ldr	r3, [r7, #16]
 80025fc:	1ad3      	subs	r3, r2, r3
 80025fe:	2b02      	cmp	r3, #2
 8002600:	d901      	bls.n	8002606 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002602:	2303      	movs	r3, #3
 8002604:	e0cf      	b.n	80027a6 <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002606:	4b6a      	ldr	r3, [pc, #424]	; (80027b0 <HAL_RCC_OscConfig+0x478>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800260e:	2b00      	cmp	r3, #0
 8002610:	d0f0      	beq.n	80025f4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	689b      	ldr	r3, [r3, #8]
 8002616:	2b01      	cmp	r3, #1
 8002618:	d106      	bne.n	8002628 <HAL_RCC_OscConfig+0x2f0>
 800261a:	4b66      	ldr	r3, [pc, #408]	; (80027b4 <HAL_RCC_OscConfig+0x47c>)
 800261c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800261e:	4a65      	ldr	r2, [pc, #404]	; (80027b4 <HAL_RCC_OscConfig+0x47c>)
 8002620:	f043 0301 	orr.w	r3, r3, #1
 8002624:	6713      	str	r3, [r2, #112]	; 0x70
 8002626:	e01c      	b.n	8002662 <HAL_RCC_OscConfig+0x32a>
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	689b      	ldr	r3, [r3, #8]
 800262c:	2b05      	cmp	r3, #5
 800262e:	d10c      	bne.n	800264a <HAL_RCC_OscConfig+0x312>
 8002630:	4b60      	ldr	r3, [pc, #384]	; (80027b4 <HAL_RCC_OscConfig+0x47c>)
 8002632:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002634:	4a5f      	ldr	r2, [pc, #380]	; (80027b4 <HAL_RCC_OscConfig+0x47c>)
 8002636:	f043 0304 	orr.w	r3, r3, #4
 800263a:	6713      	str	r3, [r2, #112]	; 0x70
 800263c:	4b5d      	ldr	r3, [pc, #372]	; (80027b4 <HAL_RCC_OscConfig+0x47c>)
 800263e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002640:	4a5c      	ldr	r2, [pc, #368]	; (80027b4 <HAL_RCC_OscConfig+0x47c>)
 8002642:	f043 0301 	orr.w	r3, r3, #1
 8002646:	6713      	str	r3, [r2, #112]	; 0x70
 8002648:	e00b      	b.n	8002662 <HAL_RCC_OscConfig+0x32a>
 800264a:	4b5a      	ldr	r3, [pc, #360]	; (80027b4 <HAL_RCC_OscConfig+0x47c>)
 800264c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800264e:	4a59      	ldr	r2, [pc, #356]	; (80027b4 <HAL_RCC_OscConfig+0x47c>)
 8002650:	f023 0301 	bic.w	r3, r3, #1
 8002654:	6713      	str	r3, [r2, #112]	; 0x70
 8002656:	4b57      	ldr	r3, [pc, #348]	; (80027b4 <HAL_RCC_OscConfig+0x47c>)
 8002658:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800265a:	4a56      	ldr	r2, [pc, #344]	; (80027b4 <HAL_RCC_OscConfig+0x47c>)
 800265c:	f023 0304 	bic.w	r3, r3, #4
 8002660:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	689b      	ldr	r3, [r3, #8]
 8002666:	2b00      	cmp	r3, #0
 8002668:	d015      	beq.n	8002696 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800266a:	f7fe fccb 	bl	8001004 <HAL_GetTick>
 800266e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002670:	e00a      	b.n	8002688 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002672:	f7fe fcc7 	bl	8001004 <HAL_GetTick>
 8002676:	4602      	mov	r2, r0
 8002678:	693b      	ldr	r3, [r7, #16]
 800267a:	1ad3      	subs	r3, r2, r3
 800267c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002680:	4293      	cmp	r3, r2
 8002682:	d901      	bls.n	8002688 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002684:	2303      	movs	r3, #3
 8002686:	e08e      	b.n	80027a6 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002688:	4b4a      	ldr	r3, [pc, #296]	; (80027b4 <HAL_RCC_OscConfig+0x47c>)
 800268a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800268c:	f003 0302 	and.w	r3, r3, #2
 8002690:	2b00      	cmp	r3, #0
 8002692:	d0ee      	beq.n	8002672 <HAL_RCC_OscConfig+0x33a>
 8002694:	e014      	b.n	80026c0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002696:	f7fe fcb5 	bl	8001004 <HAL_GetTick>
 800269a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800269c:	e00a      	b.n	80026b4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800269e:	f7fe fcb1 	bl	8001004 <HAL_GetTick>
 80026a2:	4602      	mov	r2, r0
 80026a4:	693b      	ldr	r3, [r7, #16]
 80026a6:	1ad3      	subs	r3, r2, r3
 80026a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80026ac:	4293      	cmp	r3, r2
 80026ae:	d901      	bls.n	80026b4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80026b0:	2303      	movs	r3, #3
 80026b2:	e078      	b.n	80027a6 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026b4:	4b3f      	ldr	r3, [pc, #252]	; (80027b4 <HAL_RCC_OscConfig+0x47c>)
 80026b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026b8:	f003 0302 	and.w	r3, r3, #2
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d1ee      	bne.n	800269e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80026c0:	7dfb      	ldrb	r3, [r7, #23]
 80026c2:	2b01      	cmp	r3, #1
 80026c4:	d105      	bne.n	80026d2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026c6:	4b3b      	ldr	r3, [pc, #236]	; (80027b4 <HAL_RCC_OscConfig+0x47c>)
 80026c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ca:	4a3a      	ldr	r2, [pc, #232]	; (80027b4 <HAL_RCC_OscConfig+0x47c>)
 80026cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80026d0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	699b      	ldr	r3, [r3, #24]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d064      	beq.n	80027a4 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80026da:	4b36      	ldr	r3, [pc, #216]	; (80027b4 <HAL_RCC_OscConfig+0x47c>)
 80026dc:	689b      	ldr	r3, [r3, #8]
 80026de:	f003 030c 	and.w	r3, r3, #12
 80026e2:	2b08      	cmp	r3, #8
 80026e4:	d05c      	beq.n	80027a0 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	699b      	ldr	r3, [r3, #24]
 80026ea:	2b02      	cmp	r3, #2
 80026ec:	d141      	bne.n	8002772 <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026ee:	4b32      	ldr	r3, [pc, #200]	; (80027b8 <HAL_RCC_OscConfig+0x480>)
 80026f0:	2200      	movs	r2, #0
 80026f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026f4:	f7fe fc86 	bl	8001004 <HAL_GetTick>
 80026f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026fa:	e008      	b.n	800270e <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026fc:	f7fe fc82 	bl	8001004 <HAL_GetTick>
 8002700:	4602      	mov	r2, r0
 8002702:	693b      	ldr	r3, [r7, #16]
 8002704:	1ad3      	subs	r3, r2, r3
 8002706:	2b02      	cmp	r3, #2
 8002708:	d901      	bls.n	800270e <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 800270a:	2303      	movs	r3, #3
 800270c:	e04b      	b.n	80027a6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800270e:	4b29      	ldr	r3, [pc, #164]	; (80027b4 <HAL_RCC_OscConfig+0x47c>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002716:	2b00      	cmp	r3, #0
 8002718:	d1f0      	bne.n	80026fc <HAL_RCC_OscConfig+0x3c4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	69da      	ldr	r2, [r3, #28]
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6a1b      	ldr	r3, [r3, #32]
 8002722:	431a      	orrs	r2, r3
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002728:	019b      	lsls	r3, r3, #6
 800272a:	431a      	orrs	r2, r3
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002730:	085b      	lsrs	r3, r3, #1
 8002732:	3b01      	subs	r3, #1
 8002734:	041b      	lsls	r3, r3, #16
 8002736:	431a      	orrs	r2, r3
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800273c:	061b      	lsls	r3, r3, #24
 800273e:	491d      	ldr	r1, [pc, #116]	; (80027b4 <HAL_RCC_OscConfig+0x47c>)
 8002740:	4313      	orrs	r3, r2
 8002742:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002744:	4b1c      	ldr	r3, [pc, #112]	; (80027b8 <HAL_RCC_OscConfig+0x480>)
 8002746:	2201      	movs	r2, #1
 8002748:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800274a:	f7fe fc5b 	bl	8001004 <HAL_GetTick>
 800274e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002750:	e008      	b.n	8002764 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002752:	f7fe fc57 	bl	8001004 <HAL_GetTick>
 8002756:	4602      	mov	r2, r0
 8002758:	693b      	ldr	r3, [r7, #16]
 800275a:	1ad3      	subs	r3, r2, r3
 800275c:	2b02      	cmp	r3, #2
 800275e:	d901      	bls.n	8002764 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8002760:	2303      	movs	r3, #3
 8002762:	e020      	b.n	80027a6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002764:	4b13      	ldr	r3, [pc, #76]	; (80027b4 <HAL_RCC_OscConfig+0x47c>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800276c:	2b00      	cmp	r3, #0
 800276e:	d0f0      	beq.n	8002752 <HAL_RCC_OscConfig+0x41a>
 8002770:	e018      	b.n	80027a4 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002772:	4b11      	ldr	r3, [pc, #68]	; (80027b8 <HAL_RCC_OscConfig+0x480>)
 8002774:	2200      	movs	r2, #0
 8002776:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002778:	f7fe fc44 	bl	8001004 <HAL_GetTick>
 800277c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800277e:	e008      	b.n	8002792 <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002780:	f7fe fc40 	bl	8001004 <HAL_GetTick>
 8002784:	4602      	mov	r2, r0
 8002786:	693b      	ldr	r3, [r7, #16]
 8002788:	1ad3      	subs	r3, r2, r3
 800278a:	2b02      	cmp	r3, #2
 800278c:	d901      	bls.n	8002792 <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 800278e:	2303      	movs	r3, #3
 8002790:	e009      	b.n	80027a6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002792:	4b08      	ldr	r3, [pc, #32]	; (80027b4 <HAL_RCC_OscConfig+0x47c>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800279a:	2b00      	cmp	r3, #0
 800279c:	d1f0      	bne.n	8002780 <HAL_RCC_OscConfig+0x448>
 800279e:	e001      	b.n	80027a4 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80027a0:	2301      	movs	r3, #1
 80027a2:	e000      	b.n	80027a6 <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 80027a4:	2300      	movs	r3, #0
}
 80027a6:	4618      	mov	r0, r3
 80027a8:	3718      	adds	r7, #24
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bd80      	pop	{r7, pc}
 80027ae:	bf00      	nop
 80027b0:	40007000 	.word	0x40007000
 80027b4:	40023800 	.word	0x40023800
 80027b8:	42470060 	.word	0x42470060

080027bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b084      	sub	sp, #16
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
 80027c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d101      	bne.n	80027d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80027cc:	2301      	movs	r3, #1
 80027ce:	e0ca      	b.n	8002966 <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80027d0:	4b67      	ldr	r3, [pc, #412]	; (8002970 <HAL_RCC_ClockConfig+0x1b4>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f003 030f 	and.w	r3, r3, #15
 80027d8:	683a      	ldr	r2, [r7, #0]
 80027da:	429a      	cmp	r2, r3
 80027dc:	d90c      	bls.n	80027f8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027de:	4b64      	ldr	r3, [pc, #400]	; (8002970 <HAL_RCC_ClockConfig+0x1b4>)
 80027e0:	683a      	ldr	r2, [r7, #0]
 80027e2:	b2d2      	uxtb	r2, r2
 80027e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80027e6:	4b62      	ldr	r3, [pc, #392]	; (8002970 <HAL_RCC_ClockConfig+0x1b4>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f003 030f 	and.w	r3, r3, #15
 80027ee:	683a      	ldr	r2, [r7, #0]
 80027f0:	429a      	cmp	r2, r3
 80027f2:	d001      	beq.n	80027f8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80027f4:	2301      	movs	r3, #1
 80027f6:	e0b6      	b.n	8002966 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f003 0302 	and.w	r3, r3, #2
 8002800:	2b00      	cmp	r3, #0
 8002802:	d020      	beq.n	8002846 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f003 0304 	and.w	r3, r3, #4
 800280c:	2b00      	cmp	r3, #0
 800280e:	d005      	beq.n	800281c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002810:	4b58      	ldr	r3, [pc, #352]	; (8002974 <HAL_RCC_ClockConfig+0x1b8>)
 8002812:	689b      	ldr	r3, [r3, #8]
 8002814:	4a57      	ldr	r2, [pc, #348]	; (8002974 <HAL_RCC_ClockConfig+0x1b8>)
 8002816:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800281a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f003 0308 	and.w	r3, r3, #8
 8002824:	2b00      	cmp	r3, #0
 8002826:	d005      	beq.n	8002834 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002828:	4b52      	ldr	r3, [pc, #328]	; (8002974 <HAL_RCC_ClockConfig+0x1b8>)
 800282a:	689b      	ldr	r3, [r3, #8]
 800282c:	4a51      	ldr	r2, [pc, #324]	; (8002974 <HAL_RCC_ClockConfig+0x1b8>)
 800282e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002832:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002834:	4b4f      	ldr	r3, [pc, #316]	; (8002974 <HAL_RCC_ClockConfig+0x1b8>)
 8002836:	689b      	ldr	r3, [r3, #8]
 8002838:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	689b      	ldr	r3, [r3, #8]
 8002840:	494c      	ldr	r1, [pc, #304]	; (8002974 <HAL_RCC_ClockConfig+0x1b8>)
 8002842:	4313      	orrs	r3, r2
 8002844:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f003 0301 	and.w	r3, r3, #1
 800284e:	2b00      	cmp	r3, #0
 8002850:	d044      	beq.n	80028dc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	685b      	ldr	r3, [r3, #4]
 8002856:	2b01      	cmp	r3, #1
 8002858:	d107      	bne.n	800286a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800285a:	4b46      	ldr	r3, [pc, #280]	; (8002974 <HAL_RCC_ClockConfig+0x1b8>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002862:	2b00      	cmp	r3, #0
 8002864:	d119      	bne.n	800289a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002866:	2301      	movs	r3, #1
 8002868:	e07d      	b.n	8002966 <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	685b      	ldr	r3, [r3, #4]
 800286e:	2b02      	cmp	r3, #2
 8002870:	d003      	beq.n	800287a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002876:	2b03      	cmp	r3, #3
 8002878:	d107      	bne.n	800288a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800287a:	4b3e      	ldr	r3, [pc, #248]	; (8002974 <HAL_RCC_ClockConfig+0x1b8>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002882:	2b00      	cmp	r3, #0
 8002884:	d109      	bne.n	800289a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002886:	2301      	movs	r3, #1
 8002888:	e06d      	b.n	8002966 <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800288a:	4b3a      	ldr	r3, [pc, #232]	; (8002974 <HAL_RCC_ClockConfig+0x1b8>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f003 0302 	and.w	r3, r3, #2
 8002892:	2b00      	cmp	r3, #0
 8002894:	d101      	bne.n	800289a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002896:	2301      	movs	r3, #1
 8002898:	e065      	b.n	8002966 <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800289a:	4b36      	ldr	r3, [pc, #216]	; (8002974 <HAL_RCC_ClockConfig+0x1b8>)
 800289c:	689b      	ldr	r3, [r3, #8]
 800289e:	f023 0203 	bic.w	r2, r3, #3
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	4933      	ldr	r1, [pc, #204]	; (8002974 <HAL_RCC_ClockConfig+0x1b8>)
 80028a8:	4313      	orrs	r3, r2
 80028aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80028ac:	f7fe fbaa 	bl	8001004 <HAL_GetTick>
 80028b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028b2:	e00a      	b.n	80028ca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028b4:	f7fe fba6 	bl	8001004 <HAL_GetTick>
 80028b8:	4602      	mov	r2, r0
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	1ad3      	subs	r3, r2, r3
 80028be:	f241 3288 	movw	r2, #5000	; 0x1388
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d901      	bls.n	80028ca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80028c6:	2303      	movs	r3, #3
 80028c8:	e04d      	b.n	8002966 <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028ca:	4b2a      	ldr	r3, [pc, #168]	; (8002974 <HAL_RCC_ClockConfig+0x1b8>)
 80028cc:	689b      	ldr	r3, [r3, #8]
 80028ce:	f003 020c 	and.w	r2, r3, #12
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	685b      	ldr	r3, [r3, #4]
 80028d6:	009b      	lsls	r3, r3, #2
 80028d8:	429a      	cmp	r2, r3
 80028da:	d1eb      	bne.n	80028b4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80028dc:	4b24      	ldr	r3, [pc, #144]	; (8002970 <HAL_RCC_ClockConfig+0x1b4>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f003 030f 	and.w	r3, r3, #15
 80028e4:	683a      	ldr	r2, [r7, #0]
 80028e6:	429a      	cmp	r2, r3
 80028e8:	d20c      	bcs.n	8002904 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028ea:	4b21      	ldr	r3, [pc, #132]	; (8002970 <HAL_RCC_ClockConfig+0x1b4>)
 80028ec:	683a      	ldr	r2, [r7, #0]
 80028ee:	b2d2      	uxtb	r2, r2
 80028f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80028f2:	4b1f      	ldr	r3, [pc, #124]	; (8002970 <HAL_RCC_ClockConfig+0x1b4>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f003 030f 	and.w	r3, r3, #15
 80028fa:	683a      	ldr	r2, [r7, #0]
 80028fc:	429a      	cmp	r2, r3
 80028fe:	d001      	beq.n	8002904 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002900:	2301      	movs	r3, #1
 8002902:	e030      	b.n	8002966 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f003 0304 	and.w	r3, r3, #4
 800290c:	2b00      	cmp	r3, #0
 800290e:	d008      	beq.n	8002922 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002910:	4b18      	ldr	r3, [pc, #96]	; (8002974 <HAL_RCC_ClockConfig+0x1b8>)
 8002912:	689b      	ldr	r3, [r3, #8]
 8002914:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	68db      	ldr	r3, [r3, #12]
 800291c:	4915      	ldr	r1, [pc, #84]	; (8002974 <HAL_RCC_ClockConfig+0x1b8>)
 800291e:	4313      	orrs	r3, r2
 8002920:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f003 0308 	and.w	r3, r3, #8
 800292a:	2b00      	cmp	r3, #0
 800292c:	d009      	beq.n	8002942 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800292e:	4b11      	ldr	r3, [pc, #68]	; (8002974 <HAL_RCC_ClockConfig+0x1b8>)
 8002930:	689b      	ldr	r3, [r3, #8]
 8002932:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	691b      	ldr	r3, [r3, #16]
 800293a:	00db      	lsls	r3, r3, #3
 800293c:	490d      	ldr	r1, [pc, #52]	; (8002974 <HAL_RCC_ClockConfig+0x1b8>)
 800293e:	4313      	orrs	r3, r2
 8002940:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002942:	f000 f81d 	bl	8002980 <HAL_RCC_GetSysClockFreq>
 8002946:	4601      	mov	r1, r0
 8002948:	4b0a      	ldr	r3, [pc, #40]	; (8002974 <HAL_RCC_ClockConfig+0x1b8>)
 800294a:	689b      	ldr	r3, [r3, #8]
 800294c:	091b      	lsrs	r3, r3, #4
 800294e:	f003 030f 	and.w	r3, r3, #15
 8002952:	4a09      	ldr	r2, [pc, #36]	; (8002978 <HAL_RCC_ClockConfig+0x1bc>)
 8002954:	5cd3      	ldrb	r3, [r2, r3]
 8002956:	fa21 f303 	lsr.w	r3, r1, r3
 800295a:	4a08      	ldr	r2, [pc, #32]	; (800297c <HAL_RCC_ClockConfig+0x1c0>)
 800295c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 800295e:	2000      	movs	r0, #0
 8002960:	f7fe fb0c 	bl	8000f7c <HAL_InitTick>

  return HAL_OK;
 8002964:	2300      	movs	r3, #0
}
 8002966:	4618      	mov	r0, r3
 8002968:	3710      	adds	r7, #16
 800296a:	46bd      	mov	sp, r7
 800296c:	bd80      	pop	{r7, pc}
 800296e:	bf00      	nop
 8002970:	40023c00 	.word	0x40023c00
 8002974:	40023800 	.word	0x40023800
 8002978:	08013c38 	.word	0x08013c38
 800297c:	20000080 	.word	0x20000080

08002980 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002980:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002982:	b085      	sub	sp, #20
 8002984:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002986:	2300      	movs	r3, #0
 8002988:	607b      	str	r3, [r7, #4]
 800298a:	2300      	movs	r3, #0
 800298c:	60fb      	str	r3, [r7, #12]
 800298e:	2300      	movs	r3, #0
 8002990:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002992:	2300      	movs	r3, #0
 8002994:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002996:	4b50      	ldr	r3, [pc, #320]	; (8002ad8 <HAL_RCC_GetSysClockFreq+0x158>)
 8002998:	689b      	ldr	r3, [r3, #8]
 800299a:	f003 030c 	and.w	r3, r3, #12
 800299e:	2b04      	cmp	r3, #4
 80029a0:	d007      	beq.n	80029b2 <HAL_RCC_GetSysClockFreq+0x32>
 80029a2:	2b08      	cmp	r3, #8
 80029a4:	d008      	beq.n	80029b8 <HAL_RCC_GetSysClockFreq+0x38>
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	f040 808d 	bne.w	8002ac6 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80029ac:	4b4b      	ldr	r3, [pc, #300]	; (8002adc <HAL_RCC_GetSysClockFreq+0x15c>)
 80029ae:	60bb      	str	r3, [r7, #8]
       break;
 80029b0:	e08c      	b.n	8002acc <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80029b2:	4b4b      	ldr	r3, [pc, #300]	; (8002ae0 <HAL_RCC_GetSysClockFreq+0x160>)
 80029b4:	60bb      	str	r3, [r7, #8]
      break;
 80029b6:	e089      	b.n	8002acc <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80029b8:	4b47      	ldr	r3, [pc, #284]	; (8002ad8 <HAL_RCC_GetSysClockFreq+0x158>)
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80029c0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80029c2:	4b45      	ldr	r3, [pc, #276]	; (8002ad8 <HAL_RCC_GetSysClockFreq+0x158>)
 80029c4:	685b      	ldr	r3, [r3, #4]
 80029c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d023      	beq.n	8002a16 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80029ce:	4b42      	ldr	r3, [pc, #264]	; (8002ad8 <HAL_RCC_GetSysClockFreq+0x158>)
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	099b      	lsrs	r3, r3, #6
 80029d4:	f04f 0400 	mov.w	r4, #0
 80029d8:	f240 11ff 	movw	r1, #511	; 0x1ff
 80029dc:	f04f 0200 	mov.w	r2, #0
 80029e0:	ea03 0501 	and.w	r5, r3, r1
 80029e4:	ea04 0602 	and.w	r6, r4, r2
 80029e8:	4a3d      	ldr	r2, [pc, #244]	; (8002ae0 <HAL_RCC_GetSysClockFreq+0x160>)
 80029ea:	fb02 f106 	mul.w	r1, r2, r6
 80029ee:	2200      	movs	r2, #0
 80029f0:	fb02 f205 	mul.w	r2, r2, r5
 80029f4:	440a      	add	r2, r1
 80029f6:	493a      	ldr	r1, [pc, #232]	; (8002ae0 <HAL_RCC_GetSysClockFreq+0x160>)
 80029f8:	fba5 0101 	umull	r0, r1, r5, r1
 80029fc:	1853      	adds	r3, r2, r1
 80029fe:	4619      	mov	r1, r3
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	f04f 0400 	mov.w	r4, #0
 8002a06:	461a      	mov	r2, r3
 8002a08:	4623      	mov	r3, r4
 8002a0a:	f7fe f915 	bl	8000c38 <__aeabi_uldivmod>
 8002a0e:	4603      	mov	r3, r0
 8002a10:	460c      	mov	r4, r1
 8002a12:	60fb      	str	r3, [r7, #12]
 8002a14:	e049      	b.n	8002aaa <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a16:	4b30      	ldr	r3, [pc, #192]	; (8002ad8 <HAL_RCC_GetSysClockFreq+0x158>)
 8002a18:	685b      	ldr	r3, [r3, #4]
 8002a1a:	099b      	lsrs	r3, r3, #6
 8002a1c:	f04f 0400 	mov.w	r4, #0
 8002a20:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002a24:	f04f 0200 	mov.w	r2, #0
 8002a28:	ea03 0501 	and.w	r5, r3, r1
 8002a2c:	ea04 0602 	and.w	r6, r4, r2
 8002a30:	4629      	mov	r1, r5
 8002a32:	4632      	mov	r2, r6
 8002a34:	f04f 0300 	mov.w	r3, #0
 8002a38:	f04f 0400 	mov.w	r4, #0
 8002a3c:	0154      	lsls	r4, r2, #5
 8002a3e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002a42:	014b      	lsls	r3, r1, #5
 8002a44:	4619      	mov	r1, r3
 8002a46:	4622      	mov	r2, r4
 8002a48:	1b49      	subs	r1, r1, r5
 8002a4a:	eb62 0206 	sbc.w	r2, r2, r6
 8002a4e:	f04f 0300 	mov.w	r3, #0
 8002a52:	f04f 0400 	mov.w	r4, #0
 8002a56:	0194      	lsls	r4, r2, #6
 8002a58:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002a5c:	018b      	lsls	r3, r1, #6
 8002a5e:	1a5b      	subs	r3, r3, r1
 8002a60:	eb64 0402 	sbc.w	r4, r4, r2
 8002a64:	f04f 0100 	mov.w	r1, #0
 8002a68:	f04f 0200 	mov.w	r2, #0
 8002a6c:	00e2      	lsls	r2, r4, #3
 8002a6e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002a72:	00d9      	lsls	r1, r3, #3
 8002a74:	460b      	mov	r3, r1
 8002a76:	4614      	mov	r4, r2
 8002a78:	195b      	adds	r3, r3, r5
 8002a7a:	eb44 0406 	adc.w	r4, r4, r6
 8002a7e:	f04f 0100 	mov.w	r1, #0
 8002a82:	f04f 0200 	mov.w	r2, #0
 8002a86:	02a2      	lsls	r2, r4, #10
 8002a88:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002a8c:	0299      	lsls	r1, r3, #10
 8002a8e:	460b      	mov	r3, r1
 8002a90:	4614      	mov	r4, r2
 8002a92:	4618      	mov	r0, r3
 8002a94:	4621      	mov	r1, r4
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	f04f 0400 	mov.w	r4, #0
 8002a9c:	461a      	mov	r2, r3
 8002a9e:	4623      	mov	r3, r4
 8002aa0:	f7fe f8ca 	bl	8000c38 <__aeabi_uldivmod>
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	460c      	mov	r4, r1
 8002aa8:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002aaa:	4b0b      	ldr	r3, [pc, #44]	; (8002ad8 <HAL_RCC_GetSysClockFreq+0x158>)
 8002aac:	685b      	ldr	r3, [r3, #4]
 8002aae:	0c1b      	lsrs	r3, r3, #16
 8002ab0:	f003 0303 	and.w	r3, r3, #3
 8002ab4:	3301      	adds	r3, #1
 8002ab6:	005b      	lsls	r3, r3, #1
 8002ab8:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002aba:	68fa      	ldr	r2, [r7, #12]
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ac2:	60bb      	str	r3, [r7, #8]
      break;
 8002ac4:	e002      	b.n	8002acc <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002ac6:	4b05      	ldr	r3, [pc, #20]	; (8002adc <HAL_RCC_GetSysClockFreq+0x15c>)
 8002ac8:	60bb      	str	r3, [r7, #8]
      break;
 8002aca:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002acc:	68bb      	ldr	r3, [r7, #8]
}
 8002ace:	4618      	mov	r0, r3
 8002ad0:	3714      	adds	r7, #20
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002ad6:	bf00      	nop
 8002ad8:	40023800 	.word	0x40023800
 8002adc:	00f42400 	.word	0x00f42400
 8002ae0:	017d7840 	.word	0x017d7840

08002ae4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ae8:	4b03      	ldr	r3, [pc, #12]	; (8002af8 <HAL_RCC_GetHCLKFreq+0x14>)
 8002aea:	681b      	ldr	r3, [r3, #0]
}
 8002aec:	4618      	mov	r0, r3
 8002aee:	46bd      	mov	sp, r7
 8002af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af4:	4770      	bx	lr
 8002af6:	bf00      	nop
 8002af8:	20000080 	.word	0x20000080

08002afc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002b00:	f7ff fff0 	bl	8002ae4 <HAL_RCC_GetHCLKFreq>
 8002b04:	4601      	mov	r1, r0
 8002b06:	4b05      	ldr	r3, [pc, #20]	; (8002b1c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002b08:	689b      	ldr	r3, [r3, #8]
 8002b0a:	0a9b      	lsrs	r3, r3, #10
 8002b0c:	f003 0307 	and.w	r3, r3, #7
 8002b10:	4a03      	ldr	r2, [pc, #12]	; (8002b20 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002b12:	5cd3      	ldrb	r3, [r2, r3]
 8002b14:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002b18:	4618      	mov	r0, r3
 8002b1a:	bd80      	pop	{r7, pc}
 8002b1c:	40023800 	.word	0x40023800
 8002b20:	08013c48 	.word	0x08013c48

08002b24 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002b28:	f7ff ffdc 	bl	8002ae4 <HAL_RCC_GetHCLKFreq>
 8002b2c:	4601      	mov	r1, r0
 8002b2e:	4b05      	ldr	r3, [pc, #20]	; (8002b44 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002b30:	689b      	ldr	r3, [r3, #8]
 8002b32:	0b5b      	lsrs	r3, r3, #13
 8002b34:	f003 0307 	and.w	r3, r3, #7
 8002b38:	4a03      	ldr	r2, [pc, #12]	; (8002b48 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002b3a:	5cd3      	ldrb	r3, [r2, r3]
 8002b3c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002b40:	4618      	mov	r0, r3
 8002b42:	bd80      	pop	{r7, pc}
 8002b44:	40023800 	.word	0x40023800
 8002b48:	08013c48 	.word	0x08013c48

08002b4c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b082      	sub	sp, #8
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d101      	bne.n	8002b5e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	e056      	b.n	8002c0c <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	2200      	movs	r2, #0
 8002b62:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002b6a:	b2db      	uxtb	r3, r3
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d106      	bne.n	8002b7e <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2200      	movs	r2, #0
 8002b74:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002b78:	6878      	ldr	r0, [r7, #4]
 8002b7a:	f00f f96f 	bl	8011e5c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	2202      	movs	r2, #2
 8002b82:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	681a      	ldr	r2, [r3, #0]
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002b94:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	685a      	ldr	r2, [r3, #4]
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	689b      	ldr	r3, [r3, #8]
 8002b9e:	431a      	orrs	r2, r3
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	68db      	ldr	r3, [r3, #12]
 8002ba4:	431a      	orrs	r2, r3
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	691b      	ldr	r3, [r3, #16]
 8002baa:	431a      	orrs	r2, r3
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	695b      	ldr	r3, [r3, #20]
 8002bb0:	431a      	orrs	r2, r3
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	699b      	ldr	r3, [r3, #24]
 8002bb6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002bba:	431a      	orrs	r2, r3
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	69db      	ldr	r3, [r3, #28]
 8002bc0:	431a      	orrs	r2, r3
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6a1b      	ldr	r3, [r3, #32]
 8002bc6:	ea42 0103 	orr.w	r1, r2, r3
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	430a      	orrs	r2, r1
 8002bd4:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	699b      	ldr	r3, [r3, #24]
 8002bda:	0c1b      	lsrs	r3, r3, #16
 8002bdc:	f003 0104 	and.w	r1, r3, #4
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	430a      	orrs	r2, r1
 8002bea:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	69da      	ldr	r2, [r3, #28]
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002bfa:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2200      	movs	r2, #0
 8002c00:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	2201      	movs	r2, #1
 8002c06:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002c0a:	2300      	movs	r3, #0
}
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	3708      	adds	r7, #8
 8002c10:	46bd      	mov	sp, r7
 8002c12:	bd80      	pop	{r7, pc}

08002c14 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b088      	sub	sp, #32
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	60f8      	str	r0, [r7, #12]
 8002c1c:	60b9      	str	r1, [r7, #8]
 8002c1e:	603b      	str	r3, [r7, #0]
 8002c20:	4613      	mov	r3, r2
 8002c22:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002c24:	2300      	movs	r3, #0
 8002c26:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002c2e:	2b01      	cmp	r3, #1
 8002c30:	d101      	bne.n	8002c36 <HAL_SPI_Transmit+0x22>
 8002c32:	2302      	movs	r3, #2
 8002c34:	e11e      	b.n	8002e74 <HAL_SPI_Transmit+0x260>
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	2201      	movs	r2, #1
 8002c3a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002c3e:	f7fe f9e1 	bl	8001004 <HAL_GetTick>
 8002c42:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002c44:	88fb      	ldrh	r3, [r7, #6]
 8002c46:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002c4e:	b2db      	uxtb	r3, r3
 8002c50:	2b01      	cmp	r3, #1
 8002c52:	d002      	beq.n	8002c5a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002c54:	2302      	movs	r3, #2
 8002c56:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002c58:	e103      	b.n	8002e62 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002c5a:	68bb      	ldr	r3, [r7, #8]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d002      	beq.n	8002c66 <HAL_SPI_Transmit+0x52>
 8002c60:	88fb      	ldrh	r3, [r7, #6]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d102      	bne.n	8002c6c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002c66:	2301      	movs	r3, #1
 8002c68:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002c6a:	e0fa      	b.n	8002e62 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	2203      	movs	r2, #3
 8002c70:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	2200      	movs	r2, #0
 8002c78:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	68ba      	ldr	r2, [r7, #8]
 8002c7e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	88fa      	ldrh	r2, [r7, #6]
 8002c84:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	88fa      	ldrh	r2, [r7, #6]
 8002c8a:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	2200      	movs	r2, #0
 8002c90:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	2200      	movs	r2, #0
 8002c96:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	689b      	ldr	r3, [r3, #8]
 8002cae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002cb2:	d107      	bne.n	8002cc4 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	681a      	ldr	r2, [r3, #0]
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002cc2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cce:	2b40      	cmp	r3, #64	; 0x40
 8002cd0:	d007      	beq.n	8002ce2 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	681a      	ldr	r2, [r3, #0]
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002ce0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	68db      	ldr	r3, [r3, #12]
 8002ce6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002cea:	d14b      	bne.n	8002d84 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	685b      	ldr	r3, [r3, #4]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d002      	beq.n	8002cfa <HAL_SPI_Transmit+0xe6>
 8002cf4:	8afb      	ldrh	r3, [r7, #22]
 8002cf6:	2b01      	cmp	r3, #1
 8002cf8:	d13e      	bne.n	8002d78 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cfe:	881a      	ldrh	r2, [r3, #0]
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d0a:	1c9a      	adds	r2, r3, #2
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d14:	b29b      	uxth	r3, r3
 8002d16:	3b01      	subs	r3, #1
 8002d18:	b29a      	uxth	r2, r3
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002d1e:	e02b      	b.n	8002d78 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	689b      	ldr	r3, [r3, #8]
 8002d26:	f003 0302 	and.w	r3, r3, #2
 8002d2a:	2b02      	cmp	r3, #2
 8002d2c:	d112      	bne.n	8002d54 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d32:	881a      	ldrh	r2, [r3, #0]
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d3e:	1c9a      	adds	r2, r3, #2
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d48:	b29b      	uxth	r3, r3
 8002d4a:	3b01      	subs	r3, #1
 8002d4c:	b29a      	uxth	r2, r3
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	86da      	strh	r2, [r3, #54]	; 0x36
 8002d52:	e011      	b.n	8002d78 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002d54:	f7fe f956 	bl	8001004 <HAL_GetTick>
 8002d58:	4602      	mov	r2, r0
 8002d5a:	69bb      	ldr	r3, [r7, #24]
 8002d5c:	1ad3      	subs	r3, r2, r3
 8002d5e:	683a      	ldr	r2, [r7, #0]
 8002d60:	429a      	cmp	r2, r3
 8002d62:	d803      	bhi.n	8002d6c <HAL_SPI_Transmit+0x158>
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d6a:	d102      	bne.n	8002d72 <HAL_SPI_Transmit+0x15e>
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d102      	bne.n	8002d78 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8002d72:	2303      	movs	r3, #3
 8002d74:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002d76:	e074      	b.n	8002e62 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d7c:	b29b      	uxth	r3, r3
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d1ce      	bne.n	8002d20 <HAL_SPI_Transmit+0x10c>
 8002d82:	e04c      	b.n	8002e1e <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	685b      	ldr	r3, [r3, #4]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d002      	beq.n	8002d92 <HAL_SPI_Transmit+0x17e>
 8002d8c:	8afb      	ldrh	r3, [r7, #22]
 8002d8e:	2b01      	cmp	r3, #1
 8002d90:	d140      	bne.n	8002e14 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	330c      	adds	r3, #12
 8002d9c:	7812      	ldrb	r2, [r2, #0]
 8002d9e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002da4:	1c5a      	adds	r2, r3, #1
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002dae:	b29b      	uxth	r3, r3
 8002db0:	3b01      	subs	r3, #1
 8002db2:	b29a      	uxth	r2, r3
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002db8:	e02c      	b.n	8002e14 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	689b      	ldr	r3, [r3, #8]
 8002dc0:	f003 0302 	and.w	r3, r3, #2
 8002dc4:	2b02      	cmp	r3, #2
 8002dc6:	d113      	bne.n	8002df0 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	330c      	adds	r3, #12
 8002dd2:	7812      	ldrb	r2, [r2, #0]
 8002dd4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dda:	1c5a      	adds	r2, r3, #1
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002de4:	b29b      	uxth	r3, r3
 8002de6:	3b01      	subs	r3, #1
 8002de8:	b29a      	uxth	r2, r3
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	86da      	strh	r2, [r3, #54]	; 0x36
 8002dee:	e011      	b.n	8002e14 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002df0:	f7fe f908 	bl	8001004 <HAL_GetTick>
 8002df4:	4602      	mov	r2, r0
 8002df6:	69bb      	ldr	r3, [r7, #24]
 8002df8:	1ad3      	subs	r3, r2, r3
 8002dfa:	683a      	ldr	r2, [r7, #0]
 8002dfc:	429a      	cmp	r2, r3
 8002dfe:	d803      	bhi.n	8002e08 <HAL_SPI_Transmit+0x1f4>
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e06:	d102      	bne.n	8002e0e <HAL_SPI_Transmit+0x1fa>
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d102      	bne.n	8002e14 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8002e0e:	2303      	movs	r3, #3
 8002e10:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002e12:	e026      	b.n	8002e62 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e18:	b29b      	uxth	r3, r3
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d1cd      	bne.n	8002dba <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002e1e:	69ba      	ldr	r2, [r7, #24]
 8002e20:	6839      	ldr	r1, [r7, #0]
 8002e22:	68f8      	ldr	r0, [r7, #12]
 8002e24:	f000 fba4 	bl	8003570 <SPI_EndRxTxTransaction>
 8002e28:	4603      	mov	r3, r0
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d002      	beq.n	8002e34 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	2220      	movs	r2, #32
 8002e32:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	689b      	ldr	r3, [r3, #8]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d10a      	bne.n	8002e52 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	613b      	str	r3, [r7, #16]
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	68db      	ldr	r3, [r3, #12]
 8002e46:	613b      	str	r3, [r7, #16]
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	689b      	ldr	r3, [r3, #8]
 8002e4e:	613b      	str	r3, [r7, #16]
 8002e50:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d002      	beq.n	8002e60 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	77fb      	strb	r3, [r7, #31]
 8002e5e:	e000      	b.n	8002e62 <HAL_SPI_Transmit+0x24e>
  }

error:
 8002e60:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	2201      	movs	r2, #1
 8002e66:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002e72:	7ffb      	ldrb	r3, [r7, #31]
}
 8002e74:	4618      	mov	r0, r3
 8002e76:	3720      	adds	r7, #32
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	bd80      	pop	{r7, pc}

08002e7c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b088      	sub	sp, #32
 8002e80:	af02      	add	r7, sp, #8
 8002e82:	60f8      	str	r0, [r7, #12]
 8002e84:	60b9      	str	r1, [r7, #8]
 8002e86:	603b      	str	r3, [r7, #0]
 8002e88:	4613      	mov	r3, r2
 8002e8a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	685b      	ldr	r3, [r3, #4]
 8002e94:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002e98:	d112      	bne.n	8002ec0 <HAL_SPI_Receive+0x44>
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	689b      	ldr	r3, [r3, #8]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d10e      	bne.n	8002ec0 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	2204      	movs	r2, #4
 8002ea6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002eaa:	88fa      	ldrh	r2, [r7, #6]
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	9300      	str	r3, [sp, #0]
 8002eb0:	4613      	mov	r3, r2
 8002eb2:	68ba      	ldr	r2, [r7, #8]
 8002eb4:	68b9      	ldr	r1, [r7, #8]
 8002eb6:	68f8      	ldr	r0, [r7, #12]
 8002eb8:	f000 f8e9 	bl	800308e <HAL_SPI_TransmitReceive>
 8002ebc:	4603      	mov	r3, r0
 8002ebe:	e0e2      	b.n	8003086 <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002ec6:	2b01      	cmp	r3, #1
 8002ec8:	d101      	bne.n	8002ece <HAL_SPI_Receive+0x52>
 8002eca:	2302      	movs	r3, #2
 8002ecc:	e0db      	b.n	8003086 <HAL_SPI_Receive+0x20a>
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	2201      	movs	r2, #1
 8002ed2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002ed6:	f7fe f895 	bl	8001004 <HAL_GetTick>
 8002eda:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002ee2:	b2db      	uxtb	r3, r3
 8002ee4:	2b01      	cmp	r3, #1
 8002ee6:	d002      	beq.n	8002eee <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8002ee8:	2302      	movs	r3, #2
 8002eea:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002eec:	e0c2      	b.n	8003074 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 8002eee:	68bb      	ldr	r3, [r7, #8]
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d002      	beq.n	8002efa <HAL_SPI_Receive+0x7e>
 8002ef4:	88fb      	ldrh	r3, [r7, #6]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d102      	bne.n	8002f00 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8002efa:	2301      	movs	r3, #1
 8002efc:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002efe:	e0b9      	b.n	8003074 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	2204      	movs	r2, #4
 8002f04:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	68ba      	ldr	r2, [r7, #8]
 8002f12:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	88fa      	ldrh	r2, [r7, #6]
 8002f18:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	88fa      	ldrh	r2, [r7, #6]
 8002f1e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	2200      	movs	r2, #0
 8002f24:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	2200      	movs	r2, #0
 8002f2a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	2200      	movs	r2, #0
 8002f30:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	2200      	movs	r2, #0
 8002f36:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	689b      	ldr	r3, [r3, #8]
 8002f42:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f46:	d107      	bne.n	8002f58 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	681a      	ldr	r2, [r3, #0]
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002f56:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f62:	2b40      	cmp	r3, #64	; 0x40
 8002f64:	d007      	beq.n	8002f76 <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	681a      	ldr	r2, [r3, #0]
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002f74:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	68db      	ldr	r3, [r3, #12]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d162      	bne.n	8003044 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002f7e:	e02e      	b.n	8002fde <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	689b      	ldr	r3, [r3, #8]
 8002f86:	f003 0301 	and.w	r3, r3, #1
 8002f8a:	2b01      	cmp	r3, #1
 8002f8c:	d115      	bne.n	8002fba <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f103 020c 	add.w	r2, r3, #12
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f9a:	7812      	ldrb	r2, [r2, #0]
 8002f9c:	b2d2      	uxtb	r2, r2
 8002f9e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fa4:	1c5a      	adds	r2, r3, #1
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002fae:	b29b      	uxth	r3, r3
 8002fb0:	3b01      	subs	r3, #1
 8002fb2:	b29a      	uxth	r2, r3
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002fb8:	e011      	b.n	8002fde <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002fba:	f7fe f823 	bl	8001004 <HAL_GetTick>
 8002fbe:	4602      	mov	r2, r0
 8002fc0:	693b      	ldr	r3, [r7, #16]
 8002fc2:	1ad3      	subs	r3, r2, r3
 8002fc4:	683a      	ldr	r2, [r7, #0]
 8002fc6:	429a      	cmp	r2, r3
 8002fc8:	d803      	bhi.n	8002fd2 <HAL_SPI_Receive+0x156>
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fd0:	d102      	bne.n	8002fd8 <HAL_SPI_Receive+0x15c>
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d102      	bne.n	8002fde <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 8002fd8:	2303      	movs	r3, #3
 8002fda:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002fdc:	e04a      	b.n	8003074 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002fe2:	b29b      	uxth	r3, r3
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d1cb      	bne.n	8002f80 <HAL_SPI_Receive+0x104>
 8002fe8:	e031      	b.n	800304e <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	689b      	ldr	r3, [r3, #8]
 8002ff0:	f003 0301 	and.w	r3, r3, #1
 8002ff4:	2b01      	cmp	r3, #1
 8002ff6:	d113      	bne.n	8003020 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	68da      	ldr	r2, [r3, #12]
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003002:	b292      	uxth	r2, r2
 8003004:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800300a:	1c9a      	adds	r2, r3, #2
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003014:	b29b      	uxth	r3, r3
 8003016:	3b01      	subs	r3, #1
 8003018:	b29a      	uxth	r2, r3
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800301e:	e011      	b.n	8003044 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003020:	f7fd fff0 	bl	8001004 <HAL_GetTick>
 8003024:	4602      	mov	r2, r0
 8003026:	693b      	ldr	r3, [r7, #16]
 8003028:	1ad3      	subs	r3, r2, r3
 800302a:	683a      	ldr	r2, [r7, #0]
 800302c:	429a      	cmp	r2, r3
 800302e:	d803      	bhi.n	8003038 <HAL_SPI_Receive+0x1bc>
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003036:	d102      	bne.n	800303e <HAL_SPI_Receive+0x1c2>
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	2b00      	cmp	r3, #0
 800303c:	d102      	bne.n	8003044 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 800303e:	2303      	movs	r3, #3
 8003040:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003042:	e017      	b.n	8003074 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003048:	b29b      	uxth	r3, r3
 800304a:	2b00      	cmp	r3, #0
 800304c:	d1cd      	bne.n	8002fea <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800304e:	693a      	ldr	r2, [r7, #16]
 8003050:	6839      	ldr	r1, [r7, #0]
 8003052:	68f8      	ldr	r0, [r7, #12]
 8003054:	f000 fa27 	bl	80034a6 <SPI_EndRxTransaction>
 8003058:	4603      	mov	r3, r0
 800305a:	2b00      	cmp	r3, #0
 800305c:	d002      	beq.n	8003064 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	2220      	movs	r2, #32
 8003062:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003068:	2b00      	cmp	r3, #0
 800306a:	d002      	beq.n	8003072 <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 800306c:	2301      	movs	r3, #1
 800306e:	75fb      	strb	r3, [r7, #23]
 8003070:	e000      	b.n	8003074 <HAL_SPI_Receive+0x1f8>
  }

error :
 8003072:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	2201      	movs	r2, #1
 8003078:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	2200      	movs	r2, #0
 8003080:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003084:	7dfb      	ldrb	r3, [r7, #23]
}
 8003086:	4618      	mov	r0, r3
 8003088:	3718      	adds	r7, #24
 800308a:	46bd      	mov	sp, r7
 800308c:	bd80      	pop	{r7, pc}

0800308e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800308e:	b580      	push	{r7, lr}
 8003090:	b08c      	sub	sp, #48	; 0x30
 8003092:	af00      	add	r7, sp, #0
 8003094:	60f8      	str	r0, [r7, #12]
 8003096:	60b9      	str	r1, [r7, #8]
 8003098:	607a      	str	r2, [r7, #4]
 800309a:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800309c:	2301      	movs	r3, #1
 800309e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80030a0:	2300      	movs	r3, #0
 80030a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80030ac:	2b01      	cmp	r3, #1
 80030ae:	d101      	bne.n	80030b4 <HAL_SPI_TransmitReceive+0x26>
 80030b0:	2302      	movs	r3, #2
 80030b2:	e18a      	b.n	80033ca <HAL_SPI_TransmitReceive+0x33c>
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	2201      	movs	r2, #1
 80030b8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80030bc:	f7fd ffa2 	bl	8001004 <HAL_GetTick>
 80030c0:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80030c8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	685b      	ldr	r3, [r3, #4]
 80030d0:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80030d2:	887b      	ldrh	r3, [r7, #2]
 80030d4:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80030d6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80030da:	2b01      	cmp	r3, #1
 80030dc:	d00f      	beq.n	80030fe <HAL_SPI_TransmitReceive+0x70>
 80030de:	69fb      	ldr	r3, [r7, #28]
 80030e0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80030e4:	d107      	bne.n	80030f6 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	689b      	ldr	r3, [r3, #8]
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d103      	bne.n	80030f6 <HAL_SPI_TransmitReceive+0x68>
 80030ee:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80030f2:	2b04      	cmp	r3, #4
 80030f4:	d003      	beq.n	80030fe <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80030f6:	2302      	movs	r3, #2
 80030f8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80030fc:	e15b      	b.n	80033b6 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80030fe:	68bb      	ldr	r3, [r7, #8]
 8003100:	2b00      	cmp	r3, #0
 8003102:	d005      	beq.n	8003110 <HAL_SPI_TransmitReceive+0x82>
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2b00      	cmp	r3, #0
 8003108:	d002      	beq.n	8003110 <HAL_SPI_TransmitReceive+0x82>
 800310a:	887b      	ldrh	r3, [r7, #2]
 800310c:	2b00      	cmp	r3, #0
 800310e:	d103      	bne.n	8003118 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003110:	2301      	movs	r3, #1
 8003112:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003116:	e14e      	b.n	80033b6 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800311e:	b2db      	uxtb	r3, r3
 8003120:	2b04      	cmp	r3, #4
 8003122:	d003      	beq.n	800312c <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	2205      	movs	r2, #5
 8003128:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	2200      	movs	r2, #0
 8003130:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	687a      	ldr	r2, [r7, #4]
 8003136:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	887a      	ldrh	r2, [r7, #2]
 800313c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	887a      	ldrh	r2, [r7, #2]
 8003142:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	68ba      	ldr	r2, [r7, #8]
 8003148:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	887a      	ldrh	r2, [r7, #2]
 800314e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	887a      	ldrh	r2, [r7, #2]
 8003154:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	2200      	movs	r2, #0
 800315a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	2200      	movs	r2, #0
 8003160:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800316c:	2b40      	cmp	r3, #64	; 0x40
 800316e:	d007      	beq.n	8003180 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	681a      	ldr	r2, [r3, #0]
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800317e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	68db      	ldr	r3, [r3, #12]
 8003184:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003188:	d178      	bne.n	800327c <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	685b      	ldr	r3, [r3, #4]
 800318e:	2b00      	cmp	r3, #0
 8003190:	d002      	beq.n	8003198 <HAL_SPI_TransmitReceive+0x10a>
 8003192:	8b7b      	ldrh	r3, [r7, #26]
 8003194:	2b01      	cmp	r3, #1
 8003196:	d166      	bne.n	8003266 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800319c:	881a      	ldrh	r2, [r3, #0]
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031a8:	1c9a      	adds	r2, r3, #2
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80031b2:	b29b      	uxth	r3, r3
 80031b4:	3b01      	subs	r3, #1
 80031b6:	b29a      	uxth	r2, r3
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80031bc:	e053      	b.n	8003266 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	689b      	ldr	r3, [r3, #8]
 80031c4:	f003 0302 	and.w	r3, r3, #2
 80031c8:	2b02      	cmp	r3, #2
 80031ca:	d11b      	bne.n	8003204 <HAL_SPI_TransmitReceive+0x176>
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80031d0:	b29b      	uxth	r3, r3
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d016      	beq.n	8003204 <HAL_SPI_TransmitReceive+0x176>
 80031d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031d8:	2b01      	cmp	r3, #1
 80031da:	d113      	bne.n	8003204 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031e0:	881a      	ldrh	r2, [r3, #0]
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ec:	1c9a      	adds	r2, r3, #2
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80031f6:	b29b      	uxth	r3, r3
 80031f8:	3b01      	subs	r3, #1
 80031fa:	b29a      	uxth	r2, r3
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003200:	2300      	movs	r3, #0
 8003202:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	689b      	ldr	r3, [r3, #8]
 800320a:	f003 0301 	and.w	r3, r3, #1
 800320e:	2b01      	cmp	r3, #1
 8003210:	d119      	bne.n	8003246 <HAL_SPI_TransmitReceive+0x1b8>
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003216:	b29b      	uxth	r3, r3
 8003218:	2b00      	cmp	r3, #0
 800321a:	d014      	beq.n	8003246 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	68da      	ldr	r2, [r3, #12]
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003226:	b292      	uxth	r2, r2
 8003228:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800322e:	1c9a      	adds	r2, r3, #2
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003238:	b29b      	uxth	r3, r3
 800323a:	3b01      	subs	r3, #1
 800323c:	b29a      	uxth	r2, r3
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003242:	2301      	movs	r3, #1
 8003244:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003246:	f7fd fedd 	bl	8001004 <HAL_GetTick>
 800324a:	4602      	mov	r2, r0
 800324c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800324e:	1ad3      	subs	r3, r2, r3
 8003250:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003252:	429a      	cmp	r2, r3
 8003254:	d807      	bhi.n	8003266 <HAL_SPI_TransmitReceive+0x1d8>
 8003256:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003258:	f1b3 3fff 	cmp.w	r3, #4294967295
 800325c:	d003      	beq.n	8003266 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800325e:	2303      	movs	r3, #3
 8003260:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003264:	e0a7      	b.n	80033b6 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800326a:	b29b      	uxth	r3, r3
 800326c:	2b00      	cmp	r3, #0
 800326e:	d1a6      	bne.n	80031be <HAL_SPI_TransmitReceive+0x130>
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003274:	b29b      	uxth	r3, r3
 8003276:	2b00      	cmp	r3, #0
 8003278:	d1a1      	bne.n	80031be <HAL_SPI_TransmitReceive+0x130>
 800327a:	e07c      	b.n	8003376 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	685b      	ldr	r3, [r3, #4]
 8003280:	2b00      	cmp	r3, #0
 8003282:	d002      	beq.n	800328a <HAL_SPI_TransmitReceive+0x1fc>
 8003284:	8b7b      	ldrh	r3, [r7, #26]
 8003286:	2b01      	cmp	r3, #1
 8003288:	d16b      	bne.n	8003362 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	330c      	adds	r3, #12
 8003294:	7812      	ldrb	r2, [r2, #0]
 8003296:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800329c:	1c5a      	adds	r2, r3, #1
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80032a6:	b29b      	uxth	r3, r3
 80032a8:	3b01      	subs	r3, #1
 80032aa:	b29a      	uxth	r2, r3
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80032b0:	e057      	b.n	8003362 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	689b      	ldr	r3, [r3, #8]
 80032b8:	f003 0302 	and.w	r3, r3, #2
 80032bc:	2b02      	cmp	r3, #2
 80032be:	d11c      	bne.n	80032fa <HAL_SPI_TransmitReceive+0x26c>
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80032c4:	b29b      	uxth	r3, r3
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d017      	beq.n	80032fa <HAL_SPI_TransmitReceive+0x26c>
 80032ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032cc:	2b01      	cmp	r3, #1
 80032ce:	d114      	bne.n	80032fa <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	330c      	adds	r3, #12
 80032da:	7812      	ldrb	r2, [r2, #0]
 80032dc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032e2:	1c5a      	adds	r2, r3, #1
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80032ec:	b29b      	uxth	r3, r3
 80032ee:	3b01      	subs	r3, #1
 80032f0:	b29a      	uxth	r2, r3
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80032f6:	2300      	movs	r3, #0
 80032f8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	689b      	ldr	r3, [r3, #8]
 8003300:	f003 0301 	and.w	r3, r3, #1
 8003304:	2b01      	cmp	r3, #1
 8003306:	d119      	bne.n	800333c <HAL_SPI_TransmitReceive+0x2ae>
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800330c:	b29b      	uxth	r3, r3
 800330e:	2b00      	cmp	r3, #0
 8003310:	d014      	beq.n	800333c <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	68da      	ldr	r2, [r3, #12]
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800331c:	b2d2      	uxtb	r2, r2
 800331e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003324:	1c5a      	adds	r2, r3, #1
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800332e:	b29b      	uxth	r3, r3
 8003330:	3b01      	subs	r3, #1
 8003332:	b29a      	uxth	r2, r3
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003338:	2301      	movs	r3, #1
 800333a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800333c:	f7fd fe62 	bl	8001004 <HAL_GetTick>
 8003340:	4602      	mov	r2, r0
 8003342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003344:	1ad3      	subs	r3, r2, r3
 8003346:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003348:	429a      	cmp	r2, r3
 800334a:	d803      	bhi.n	8003354 <HAL_SPI_TransmitReceive+0x2c6>
 800334c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800334e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003352:	d102      	bne.n	800335a <HAL_SPI_TransmitReceive+0x2cc>
 8003354:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003356:	2b00      	cmp	r3, #0
 8003358:	d103      	bne.n	8003362 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800335a:	2303      	movs	r3, #3
 800335c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003360:	e029      	b.n	80033b6 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003366:	b29b      	uxth	r3, r3
 8003368:	2b00      	cmp	r3, #0
 800336a:	d1a2      	bne.n	80032b2 <HAL_SPI_TransmitReceive+0x224>
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003370:	b29b      	uxth	r3, r3
 8003372:	2b00      	cmp	r3, #0
 8003374:	d19d      	bne.n	80032b2 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003376:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003378:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800337a:	68f8      	ldr	r0, [r7, #12]
 800337c:	f000 f8f8 	bl	8003570 <SPI_EndRxTxTransaction>
 8003380:	4603      	mov	r3, r0
 8003382:	2b00      	cmp	r3, #0
 8003384:	d006      	beq.n	8003394 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8003386:	2301      	movs	r3, #1
 8003388:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	2220      	movs	r2, #32
 8003390:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003392:	e010      	b.n	80033b6 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	689b      	ldr	r3, [r3, #8]
 8003398:	2b00      	cmp	r3, #0
 800339a:	d10b      	bne.n	80033b4 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800339c:	2300      	movs	r3, #0
 800339e:	617b      	str	r3, [r7, #20]
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	68db      	ldr	r3, [r3, #12]
 80033a6:	617b      	str	r3, [r7, #20]
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	689b      	ldr	r3, [r3, #8]
 80033ae:	617b      	str	r3, [r7, #20]
 80033b0:	697b      	ldr	r3, [r7, #20]
 80033b2:	e000      	b.n	80033b6 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80033b4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	2201      	movs	r2, #1
 80033ba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	2200      	movs	r2, #0
 80033c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80033c6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80033ca:	4618      	mov	r0, r3
 80033cc:	3730      	adds	r7, #48	; 0x30
 80033ce:	46bd      	mov	sp, r7
 80033d0:	bd80      	pop	{r7, pc}

080033d2 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80033d2:	b580      	push	{r7, lr}
 80033d4:	b084      	sub	sp, #16
 80033d6:	af00      	add	r7, sp, #0
 80033d8:	60f8      	str	r0, [r7, #12]
 80033da:	60b9      	str	r1, [r7, #8]
 80033dc:	603b      	str	r3, [r7, #0]
 80033de:	4613      	mov	r3, r2
 80033e0:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80033e2:	e04c      	b.n	800347e <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033ea:	d048      	beq.n	800347e <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80033ec:	f7fd fe0a 	bl	8001004 <HAL_GetTick>
 80033f0:	4602      	mov	r2, r0
 80033f2:	69bb      	ldr	r3, [r7, #24]
 80033f4:	1ad3      	subs	r3, r2, r3
 80033f6:	683a      	ldr	r2, [r7, #0]
 80033f8:	429a      	cmp	r2, r3
 80033fa:	d902      	bls.n	8003402 <SPI_WaitFlagStateUntilTimeout+0x30>
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d13d      	bne.n	800347e <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	685a      	ldr	r2, [r3, #4]
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003410:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	685b      	ldr	r3, [r3, #4]
 8003416:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800341a:	d111      	bne.n	8003440 <SPI_WaitFlagStateUntilTimeout+0x6e>
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	689b      	ldr	r3, [r3, #8]
 8003420:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003424:	d004      	beq.n	8003430 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	689b      	ldr	r3, [r3, #8]
 800342a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800342e:	d107      	bne.n	8003440 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	681a      	ldr	r2, [r3, #0]
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800343e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003444:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003448:	d10f      	bne.n	800346a <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	681a      	ldr	r2, [r3, #0]
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003458:	601a      	str	r2, [r3, #0]
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	681a      	ldr	r2, [r3, #0]
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003468:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	2201      	movs	r2, #1
 800346e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	2200      	movs	r2, #0
 8003476:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800347a:	2303      	movs	r3, #3
 800347c:	e00f      	b.n	800349e <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	689a      	ldr	r2, [r3, #8]
 8003484:	68bb      	ldr	r3, [r7, #8]
 8003486:	4013      	ands	r3, r2
 8003488:	68ba      	ldr	r2, [r7, #8]
 800348a:	429a      	cmp	r2, r3
 800348c:	bf0c      	ite	eq
 800348e:	2301      	moveq	r3, #1
 8003490:	2300      	movne	r3, #0
 8003492:	b2db      	uxtb	r3, r3
 8003494:	461a      	mov	r2, r3
 8003496:	79fb      	ldrb	r3, [r7, #7]
 8003498:	429a      	cmp	r2, r3
 800349a:	d1a3      	bne.n	80033e4 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800349c:	2300      	movs	r3, #0
}
 800349e:	4618      	mov	r0, r3
 80034a0:	3710      	adds	r7, #16
 80034a2:	46bd      	mov	sp, r7
 80034a4:	bd80      	pop	{r7, pc}

080034a6 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80034a6:	b580      	push	{r7, lr}
 80034a8:	b086      	sub	sp, #24
 80034aa:	af02      	add	r7, sp, #8
 80034ac:	60f8      	str	r0, [r7, #12]
 80034ae:	60b9      	str	r1, [r7, #8]
 80034b0:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	685b      	ldr	r3, [r3, #4]
 80034b6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80034ba:	d111      	bne.n	80034e0 <SPI_EndRxTransaction+0x3a>
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	689b      	ldr	r3, [r3, #8]
 80034c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80034c4:	d004      	beq.n	80034d0 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	689b      	ldr	r3, [r3, #8]
 80034ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034ce:	d107      	bne.n	80034e0 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	681a      	ldr	r2, [r3, #0]
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80034de:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	685b      	ldr	r3, [r3, #4]
 80034e4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80034e8:	d12a      	bne.n	8003540 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	689b      	ldr	r3, [r3, #8]
 80034ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034f2:	d012      	beq.n	800351a <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	9300      	str	r3, [sp, #0]
 80034f8:	68bb      	ldr	r3, [r7, #8]
 80034fa:	2200      	movs	r2, #0
 80034fc:	2180      	movs	r1, #128	; 0x80
 80034fe:	68f8      	ldr	r0, [r7, #12]
 8003500:	f7ff ff67 	bl	80033d2 <SPI_WaitFlagStateUntilTimeout>
 8003504:	4603      	mov	r3, r0
 8003506:	2b00      	cmp	r3, #0
 8003508:	d02d      	beq.n	8003566 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800350e:	f043 0220 	orr.w	r2, r3, #32
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8003516:	2303      	movs	r3, #3
 8003518:	e026      	b.n	8003568 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	9300      	str	r3, [sp, #0]
 800351e:	68bb      	ldr	r3, [r7, #8]
 8003520:	2200      	movs	r2, #0
 8003522:	2101      	movs	r1, #1
 8003524:	68f8      	ldr	r0, [r7, #12]
 8003526:	f7ff ff54 	bl	80033d2 <SPI_WaitFlagStateUntilTimeout>
 800352a:	4603      	mov	r3, r0
 800352c:	2b00      	cmp	r3, #0
 800352e:	d01a      	beq.n	8003566 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003534:	f043 0220 	orr.w	r2, r3, #32
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800353c:	2303      	movs	r3, #3
 800353e:	e013      	b.n	8003568 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	9300      	str	r3, [sp, #0]
 8003544:	68bb      	ldr	r3, [r7, #8]
 8003546:	2200      	movs	r2, #0
 8003548:	2101      	movs	r1, #1
 800354a:	68f8      	ldr	r0, [r7, #12]
 800354c:	f7ff ff41 	bl	80033d2 <SPI_WaitFlagStateUntilTimeout>
 8003550:	4603      	mov	r3, r0
 8003552:	2b00      	cmp	r3, #0
 8003554:	d007      	beq.n	8003566 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800355a:	f043 0220 	orr.w	r2, r3, #32
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003562:	2303      	movs	r3, #3
 8003564:	e000      	b.n	8003568 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8003566:	2300      	movs	r3, #0
}
 8003568:	4618      	mov	r0, r3
 800356a:	3710      	adds	r7, #16
 800356c:	46bd      	mov	sp, r7
 800356e:	bd80      	pop	{r7, pc}

08003570 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b088      	sub	sp, #32
 8003574:	af02      	add	r7, sp, #8
 8003576:	60f8      	str	r0, [r7, #12]
 8003578:	60b9      	str	r1, [r7, #8]
 800357a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800357c:	4b1b      	ldr	r3, [pc, #108]	; (80035ec <SPI_EndRxTxTransaction+0x7c>)
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4a1b      	ldr	r2, [pc, #108]	; (80035f0 <SPI_EndRxTxTransaction+0x80>)
 8003582:	fba2 2303 	umull	r2, r3, r2, r3
 8003586:	0d5b      	lsrs	r3, r3, #21
 8003588:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800358c:	fb02 f303 	mul.w	r3, r2, r3
 8003590:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	685b      	ldr	r3, [r3, #4]
 8003596:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800359a:	d112      	bne.n	80035c2 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	9300      	str	r3, [sp, #0]
 80035a0:	68bb      	ldr	r3, [r7, #8]
 80035a2:	2200      	movs	r2, #0
 80035a4:	2180      	movs	r1, #128	; 0x80
 80035a6:	68f8      	ldr	r0, [r7, #12]
 80035a8:	f7ff ff13 	bl	80033d2 <SPI_WaitFlagStateUntilTimeout>
 80035ac:	4603      	mov	r3, r0
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d016      	beq.n	80035e0 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035b6:	f043 0220 	orr.w	r2, r3, #32
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80035be:	2303      	movs	r3, #3
 80035c0:	e00f      	b.n	80035e2 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80035c2:	697b      	ldr	r3, [r7, #20]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d00a      	beq.n	80035de <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80035c8:	697b      	ldr	r3, [r7, #20]
 80035ca:	3b01      	subs	r3, #1
 80035cc:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	689b      	ldr	r3, [r3, #8]
 80035d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035d8:	2b80      	cmp	r3, #128	; 0x80
 80035da:	d0f2      	beq.n	80035c2 <SPI_EndRxTxTransaction+0x52>
 80035dc:	e000      	b.n	80035e0 <SPI_EndRxTxTransaction+0x70>
        break;
 80035de:	bf00      	nop
  }

  return HAL_OK;
 80035e0:	2300      	movs	r3, #0
}
 80035e2:	4618      	mov	r0, r3
 80035e4:	3718      	adds	r7, #24
 80035e6:	46bd      	mov	sp, r7
 80035e8:	bd80      	pop	{r7, pc}
 80035ea:	bf00      	nop
 80035ec:	20000080 	.word	0x20000080
 80035f0:	165e9f81 	.word	0x165e9f81

080035f4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b082      	sub	sp, #8
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d101      	bne.n	8003606 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003602:	2301      	movs	r3, #1
 8003604:	e01d      	b.n	8003642 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800360c:	b2db      	uxtb	r3, r3
 800360e:	2b00      	cmp	r3, #0
 8003610:	d106      	bne.n	8003620 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2200      	movs	r2, #0
 8003616:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800361a:	6878      	ldr	r0, [r7, #4]
 800361c:	f00e fc66 	bl	8011eec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2202      	movs	r2, #2
 8003624:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681a      	ldr	r2, [r3, #0]
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	3304      	adds	r3, #4
 8003630:	4619      	mov	r1, r3
 8003632:	4610      	mov	r0, r2
 8003634:	f000 fc70 	bl	8003f18 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2201      	movs	r2, #1
 800363c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003640:	2300      	movs	r3, #0
}
 8003642:	4618      	mov	r0, r3
 8003644:	3708      	adds	r7, #8
 8003646:	46bd      	mov	sp, r7
 8003648:	bd80      	pop	{r7, pc}

0800364a <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800364a:	b480      	push	{r7}
 800364c:	b085      	sub	sp, #20
 800364e:	af00      	add	r7, sp, #0
 8003650:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	68da      	ldr	r2, [r3, #12]
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f042 0201 	orr.w	r2, r2, #1
 8003660:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	689b      	ldr	r3, [r3, #8]
 8003668:	f003 0307 	and.w	r3, r3, #7
 800366c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	2b06      	cmp	r3, #6
 8003672:	d007      	beq.n	8003684 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	681a      	ldr	r2, [r3, #0]
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f042 0201 	orr.w	r2, r2, #1
 8003682:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003684:	2300      	movs	r3, #0
}
 8003686:	4618      	mov	r0, r3
 8003688:	3714      	adds	r7, #20
 800368a:	46bd      	mov	sp, r7
 800368c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003690:	4770      	bx	lr

08003692 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003692:	b580      	push	{r7, lr}
 8003694:	b082      	sub	sp, #8
 8003696:	af00      	add	r7, sp, #0
 8003698:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2b00      	cmp	r3, #0
 800369e:	d101      	bne.n	80036a4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80036a0:	2301      	movs	r3, #1
 80036a2:	e01d      	b.n	80036e0 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036aa:	b2db      	uxtb	r3, r3
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d106      	bne.n	80036be <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2200      	movs	r2, #0
 80036b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80036b8:	6878      	ldr	r0, [r7, #4]
 80036ba:	f000 f815 	bl	80036e8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	2202      	movs	r2, #2
 80036c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681a      	ldr	r2, [r3, #0]
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	3304      	adds	r3, #4
 80036ce:	4619      	mov	r1, r3
 80036d0:	4610      	mov	r0, r2
 80036d2:	f000 fc21 	bl	8003f18 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2201      	movs	r2, #1
 80036da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80036de:	2300      	movs	r3, #0
}
 80036e0:	4618      	mov	r0, r3
 80036e2:	3708      	adds	r7, #8
 80036e4:	46bd      	mov	sp, r7
 80036e6:	bd80      	pop	{r7, pc}

080036e8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80036e8:	b480      	push	{r7}
 80036ea:	b083      	sub	sp, #12
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80036f0:	bf00      	nop
 80036f2:	370c      	adds	r7, #12
 80036f4:	46bd      	mov	sp, r7
 80036f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fa:	4770      	bx	lr

080036fc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b084      	sub	sp, #16
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
 8003704:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	2201      	movs	r2, #1
 800370c:	6839      	ldr	r1, [r7, #0]
 800370e:	4618      	mov	r0, r3
 8003710:	f000 feec 	bl	80044ec <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	4a15      	ldr	r2, [pc, #84]	; (8003770 <HAL_TIM_PWM_Start+0x74>)
 800371a:	4293      	cmp	r3, r2
 800371c:	d004      	beq.n	8003728 <HAL_TIM_PWM_Start+0x2c>
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	4a14      	ldr	r2, [pc, #80]	; (8003774 <HAL_TIM_PWM_Start+0x78>)
 8003724:	4293      	cmp	r3, r2
 8003726:	d101      	bne.n	800372c <HAL_TIM_PWM_Start+0x30>
 8003728:	2301      	movs	r3, #1
 800372a:	e000      	b.n	800372e <HAL_TIM_PWM_Start+0x32>
 800372c:	2300      	movs	r3, #0
 800372e:	2b00      	cmp	r3, #0
 8003730:	d007      	beq.n	8003742 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003740:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	689b      	ldr	r3, [r3, #8]
 8003748:	f003 0307 	and.w	r3, r3, #7
 800374c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	2b06      	cmp	r3, #6
 8003752:	d007      	beq.n	8003764 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	681a      	ldr	r2, [r3, #0]
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f042 0201 	orr.w	r2, r2, #1
 8003762:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003764:	2300      	movs	r3, #0
}
 8003766:	4618      	mov	r0, r3
 8003768:	3710      	adds	r7, #16
 800376a:	46bd      	mov	sp, r7
 800376c:	bd80      	pop	{r7, pc}
 800376e:	bf00      	nop
 8003770:	40010000 	.word	0x40010000
 8003774:	40010400 	.word	0x40010400

08003778 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	b082      	sub	sp, #8
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
 8003780:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	2200      	movs	r2, #0
 8003788:	6839      	ldr	r1, [r7, #0]
 800378a:	4618      	mov	r0, r3
 800378c:	f000 feae 	bl	80044ec <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	4a22      	ldr	r2, [pc, #136]	; (8003820 <HAL_TIM_PWM_Stop+0xa8>)
 8003796:	4293      	cmp	r3, r2
 8003798:	d004      	beq.n	80037a4 <HAL_TIM_PWM_Stop+0x2c>
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	4a21      	ldr	r2, [pc, #132]	; (8003824 <HAL_TIM_PWM_Stop+0xac>)
 80037a0:	4293      	cmp	r3, r2
 80037a2:	d101      	bne.n	80037a8 <HAL_TIM_PWM_Stop+0x30>
 80037a4:	2301      	movs	r3, #1
 80037a6:	e000      	b.n	80037aa <HAL_TIM_PWM_Stop+0x32>
 80037a8:	2300      	movs	r3, #0
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d017      	beq.n	80037de <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	6a1a      	ldr	r2, [r3, #32]
 80037b4:	f241 1311 	movw	r3, #4369	; 0x1111
 80037b8:	4013      	ands	r3, r2
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d10f      	bne.n	80037de <HAL_TIM_PWM_Stop+0x66>
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	6a1a      	ldr	r2, [r3, #32]
 80037c4:	f240 4344 	movw	r3, #1092	; 0x444
 80037c8:	4013      	ands	r3, r2
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d107      	bne.n	80037de <HAL_TIM_PWM_Stop+0x66>
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80037dc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	6a1a      	ldr	r2, [r3, #32]
 80037e4:	f241 1311 	movw	r3, #4369	; 0x1111
 80037e8:	4013      	ands	r3, r2
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d10f      	bne.n	800380e <HAL_TIM_PWM_Stop+0x96>
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	6a1a      	ldr	r2, [r3, #32]
 80037f4:	f240 4344 	movw	r3, #1092	; 0x444
 80037f8:	4013      	ands	r3, r2
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d107      	bne.n	800380e <HAL_TIM_PWM_Stop+0x96>
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	681a      	ldr	r2, [r3, #0]
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f022 0201 	bic.w	r2, r2, #1
 800380c:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	2201      	movs	r2, #1
 8003812:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8003816:	2300      	movs	r3, #0
}
 8003818:	4618      	mov	r0, r3
 800381a:	3708      	adds	r7, #8
 800381c:	46bd      	mov	sp, r7
 800381e:	bd80      	pop	{r7, pc}
 8003820:	40010000 	.word	0x40010000
 8003824:	40010400 	.word	0x40010400

08003828 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	b086      	sub	sp, #24
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
 8003830:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	2b00      	cmp	r3, #0
 8003836:	d101      	bne.n	800383c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003838:	2301      	movs	r3, #1
 800383a:	e083      	b.n	8003944 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003842:	b2db      	uxtb	r3, r3
 8003844:	2b00      	cmp	r3, #0
 8003846:	d106      	bne.n	8003856 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2200      	movs	r2, #0
 800384c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003850:	6878      	ldr	r0, [r7, #4]
 8003852:	f00e fb9d 	bl	8011f90 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2202      	movs	r2, #2
 800385a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	689b      	ldr	r3, [r3, #8]
 8003864:	687a      	ldr	r2, [r7, #4]
 8003866:	6812      	ldr	r2, [r2, #0]
 8003868:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800386c:	f023 0307 	bic.w	r3, r3, #7
 8003870:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681a      	ldr	r2, [r3, #0]
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	3304      	adds	r3, #4
 800387a:	4619      	mov	r1, r3
 800387c:	4610      	mov	r0, r2
 800387e:	f000 fb4b 	bl	8003f18 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	689b      	ldr	r3, [r3, #8]
 8003888:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	699b      	ldr	r3, [r3, #24]
 8003890:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	6a1b      	ldr	r3, [r3, #32]
 8003898:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	697a      	ldr	r2, [r7, #20]
 80038a0:	4313      	orrs	r3, r2
 80038a2:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80038a4:	693b      	ldr	r3, [r7, #16]
 80038a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038aa:	f023 0303 	bic.w	r3, r3, #3
 80038ae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	689a      	ldr	r2, [r3, #8]
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	699b      	ldr	r3, [r3, #24]
 80038b8:	021b      	lsls	r3, r3, #8
 80038ba:	4313      	orrs	r3, r2
 80038bc:	693a      	ldr	r2, [r7, #16]
 80038be:	4313      	orrs	r3, r2
 80038c0:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80038c2:	693b      	ldr	r3, [r7, #16]
 80038c4:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80038c8:	f023 030c 	bic.w	r3, r3, #12
 80038cc:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80038ce:	693b      	ldr	r3, [r7, #16]
 80038d0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80038d4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80038d8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	68da      	ldr	r2, [r3, #12]
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	69db      	ldr	r3, [r3, #28]
 80038e2:	021b      	lsls	r3, r3, #8
 80038e4:	4313      	orrs	r3, r2
 80038e6:	693a      	ldr	r2, [r7, #16]
 80038e8:	4313      	orrs	r3, r2
 80038ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	691b      	ldr	r3, [r3, #16]
 80038f0:	011a      	lsls	r2, r3, #4
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	6a1b      	ldr	r3, [r3, #32]
 80038f6:	031b      	lsls	r3, r3, #12
 80038f8:	4313      	orrs	r3, r2
 80038fa:	693a      	ldr	r2, [r7, #16]
 80038fc:	4313      	orrs	r3, r2
 80038fe:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8003906:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800390e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	685a      	ldr	r2, [r3, #4]
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	695b      	ldr	r3, [r3, #20]
 8003918:	011b      	lsls	r3, r3, #4
 800391a:	4313      	orrs	r3, r2
 800391c:	68fa      	ldr	r2, [r7, #12]
 800391e:	4313      	orrs	r3, r2
 8003920:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	697a      	ldr	r2, [r7, #20]
 8003928:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	693a      	ldr	r2, [r7, #16]
 8003930:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	68fa      	ldr	r2, [r7, #12]
 8003938:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	2201      	movs	r2, #1
 800393e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003942:	2300      	movs	r3, #0
}
 8003944:	4618      	mov	r0, r3
 8003946:	3718      	adds	r7, #24
 8003948:	46bd      	mov	sp, r7
 800394a:	bd80      	pop	{r7, pc}

0800394c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800394c:	b580      	push	{r7, lr}
 800394e:	b082      	sub	sp, #8
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
 8003954:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 8003956:	683b      	ldr	r3, [r7, #0]
 8003958:	2b00      	cmp	r3, #0
 800395a:	d002      	beq.n	8003962 <HAL_TIM_Encoder_Start+0x16>
 800395c:	2b04      	cmp	r3, #4
 800395e:	d008      	beq.n	8003972 <HAL_TIM_Encoder_Start+0x26>
 8003960:	e00f      	b.n	8003982 <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	2201      	movs	r2, #1
 8003968:	2100      	movs	r1, #0
 800396a:	4618      	mov	r0, r3
 800396c:	f000 fdbe 	bl	80044ec <TIM_CCxChannelCmd>
      break;
 8003970:	e016      	b.n	80039a0 <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	2201      	movs	r2, #1
 8003978:	2104      	movs	r1, #4
 800397a:	4618      	mov	r0, r3
 800397c:	f000 fdb6 	bl	80044ec <TIM_CCxChannelCmd>
      break;
 8003980:	e00e      	b.n	80039a0 <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	2201      	movs	r2, #1
 8003988:	2100      	movs	r1, #0
 800398a:	4618      	mov	r0, r3
 800398c:	f000 fdae 	bl	80044ec <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	2201      	movs	r2, #1
 8003996:	2104      	movs	r1, #4
 8003998:	4618      	mov	r0, r3
 800399a:	f000 fda7 	bl	80044ec <TIM_CCxChannelCmd>
      break;
 800399e:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	681a      	ldr	r2, [r3, #0]
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f042 0201 	orr.w	r2, r2, #1
 80039ae:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80039b0:	2300      	movs	r3, #0
}
 80039b2:	4618      	mov	r0, r3
 80039b4:	3708      	adds	r7, #8
 80039b6:	46bd      	mov	sp, r7
 80039b8:	bd80      	pop	{r7, pc}

080039ba <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80039ba:	b580      	push	{r7, lr}
 80039bc:	b082      	sub	sp, #8
 80039be:	af00      	add	r7, sp, #0
 80039c0:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	691b      	ldr	r3, [r3, #16]
 80039c8:	f003 0302 	and.w	r3, r3, #2
 80039cc:	2b02      	cmp	r3, #2
 80039ce:	d122      	bne.n	8003a16 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	68db      	ldr	r3, [r3, #12]
 80039d6:	f003 0302 	and.w	r3, r3, #2
 80039da:	2b02      	cmp	r3, #2
 80039dc:	d11b      	bne.n	8003a16 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f06f 0202 	mvn.w	r2, #2
 80039e6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2201      	movs	r2, #1
 80039ec:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	699b      	ldr	r3, [r3, #24]
 80039f4:	f003 0303 	and.w	r3, r3, #3
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d003      	beq.n	8003a04 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80039fc:	6878      	ldr	r0, [r7, #4]
 80039fe:	f000 fa6c 	bl	8003eda <HAL_TIM_IC_CaptureCallback>
 8003a02:	e005      	b.n	8003a10 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a04:	6878      	ldr	r0, [r7, #4]
 8003a06:	f000 fa5e 	bl	8003ec6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a0a:	6878      	ldr	r0, [r7, #4]
 8003a0c:	f000 fa6f 	bl	8003eee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2200      	movs	r2, #0
 8003a14:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	691b      	ldr	r3, [r3, #16]
 8003a1c:	f003 0304 	and.w	r3, r3, #4
 8003a20:	2b04      	cmp	r3, #4
 8003a22:	d122      	bne.n	8003a6a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	68db      	ldr	r3, [r3, #12]
 8003a2a:	f003 0304 	and.w	r3, r3, #4
 8003a2e:	2b04      	cmp	r3, #4
 8003a30:	d11b      	bne.n	8003a6a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f06f 0204 	mvn.w	r2, #4
 8003a3a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2202      	movs	r2, #2
 8003a40:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	699b      	ldr	r3, [r3, #24]
 8003a48:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d003      	beq.n	8003a58 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a50:	6878      	ldr	r0, [r7, #4]
 8003a52:	f000 fa42 	bl	8003eda <HAL_TIM_IC_CaptureCallback>
 8003a56:	e005      	b.n	8003a64 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a58:	6878      	ldr	r0, [r7, #4]
 8003a5a:	f000 fa34 	bl	8003ec6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a5e:	6878      	ldr	r0, [r7, #4]
 8003a60:	f000 fa45 	bl	8003eee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2200      	movs	r2, #0
 8003a68:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	691b      	ldr	r3, [r3, #16]
 8003a70:	f003 0308 	and.w	r3, r3, #8
 8003a74:	2b08      	cmp	r3, #8
 8003a76:	d122      	bne.n	8003abe <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	68db      	ldr	r3, [r3, #12]
 8003a7e:	f003 0308 	and.w	r3, r3, #8
 8003a82:	2b08      	cmp	r3, #8
 8003a84:	d11b      	bne.n	8003abe <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f06f 0208 	mvn.w	r2, #8
 8003a8e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2204      	movs	r2, #4
 8003a94:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	69db      	ldr	r3, [r3, #28]
 8003a9c:	f003 0303 	and.w	r3, r3, #3
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d003      	beq.n	8003aac <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003aa4:	6878      	ldr	r0, [r7, #4]
 8003aa6:	f000 fa18 	bl	8003eda <HAL_TIM_IC_CaptureCallback>
 8003aaa:	e005      	b.n	8003ab8 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003aac:	6878      	ldr	r0, [r7, #4]
 8003aae:	f000 fa0a 	bl	8003ec6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ab2:	6878      	ldr	r0, [r7, #4]
 8003ab4:	f000 fa1b 	bl	8003eee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2200      	movs	r2, #0
 8003abc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	691b      	ldr	r3, [r3, #16]
 8003ac4:	f003 0310 	and.w	r3, r3, #16
 8003ac8:	2b10      	cmp	r3, #16
 8003aca:	d122      	bne.n	8003b12 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	68db      	ldr	r3, [r3, #12]
 8003ad2:	f003 0310 	and.w	r3, r3, #16
 8003ad6:	2b10      	cmp	r3, #16
 8003ad8:	d11b      	bne.n	8003b12 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f06f 0210 	mvn.w	r2, #16
 8003ae2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2208      	movs	r2, #8
 8003ae8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	69db      	ldr	r3, [r3, #28]
 8003af0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d003      	beq.n	8003b00 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003af8:	6878      	ldr	r0, [r7, #4]
 8003afa:	f000 f9ee 	bl	8003eda <HAL_TIM_IC_CaptureCallback>
 8003afe:	e005      	b.n	8003b0c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b00:	6878      	ldr	r0, [r7, #4]
 8003b02:	f000 f9e0 	bl	8003ec6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b06:	6878      	ldr	r0, [r7, #4]
 8003b08:	f000 f9f1 	bl	8003eee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2200      	movs	r2, #0
 8003b10:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	691b      	ldr	r3, [r3, #16]
 8003b18:	f003 0301 	and.w	r3, r3, #1
 8003b1c:	2b01      	cmp	r3, #1
 8003b1e:	d10e      	bne.n	8003b3e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	68db      	ldr	r3, [r3, #12]
 8003b26:	f003 0301 	and.w	r3, r3, #1
 8003b2a:	2b01      	cmp	r3, #1
 8003b2c:	d107      	bne.n	8003b3e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f06f 0201 	mvn.w	r2, #1
 8003b36:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003b38:	6878      	ldr	r0, [r7, #4]
 8003b3a:	f008 fd69 	bl	800c610 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	691b      	ldr	r3, [r3, #16]
 8003b44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b48:	2b80      	cmp	r3, #128	; 0x80
 8003b4a:	d10e      	bne.n	8003b6a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	68db      	ldr	r3, [r3, #12]
 8003b52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b56:	2b80      	cmp	r3, #128	; 0x80
 8003b58:	d107      	bne.n	8003b6a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003b62:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003b64:	6878      	ldr	r0, [r7, #4]
 8003b66:	f000 fd35 	bl	80045d4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	691b      	ldr	r3, [r3, #16]
 8003b70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b74:	2b40      	cmp	r3, #64	; 0x40
 8003b76:	d10e      	bne.n	8003b96 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	68db      	ldr	r3, [r3, #12]
 8003b7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b82:	2b40      	cmp	r3, #64	; 0x40
 8003b84:	d107      	bne.n	8003b96 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003b8e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003b90:	6878      	ldr	r0, [r7, #4]
 8003b92:	f000 f9b6 	bl	8003f02 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	691b      	ldr	r3, [r3, #16]
 8003b9c:	f003 0320 	and.w	r3, r3, #32
 8003ba0:	2b20      	cmp	r3, #32
 8003ba2:	d10e      	bne.n	8003bc2 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	68db      	ldr	r3, [r3, #12]
 8003baa:	f003 0320 	and.w	r3, r3, #32
 8003bae:	2b20      	cmp	r3, #32
 8003bb0:	d107      	bne.n	8003bc2 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f06f 0220 	mvn.w	r2, #32
 8003bba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003bbc:	6878      	ldr	r0, [r7, #4]
 8003bbe:	f000 fcff 	bl	80045c0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003bc2:	bf00      	nop
 8003bc4:	3708      	adds	r7, #8
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	bd80      	pop	{r7, pc}
	...

08003bcc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b084      	sub	sp, #16
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	60f8      	str	r0, [r7, #12]
 8003bd4:	60b9      	str	r1, [r7, #8]
 8003bd6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003bde:	2b01      	cmp	r3, #1
 8003be0:	d101      	bne.n	8003be6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003be2:	2302      	movs	r3, #2
 8003be4:	e0b4      	b.n	8003d50 <HAL_TIM_PWM_ConfigChannel+0x184>
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	2201      	movs	r2, #1
 8003bea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	2202      	movs	r2, #2
 8003bf2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	2b0c      	cmp	r3, #12
 8003bfa:	f200 809f 	bhi.w	8003d3c <HAL_TIM_PWM_ConfigChannel+0x170>
 8003bfe:	a201      	add	r2, pc, #4	; (adr r2, 8003c04 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8003c00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c04:	08003c39 	.word	0x08003c39
 8003c08:	08003d3d 	.word	0x08003d3d
 8003c0c:	08003d3d 	.word	0x08003d3d
 8003c10:	08003d3d 	.word	0x08003d3d
 8003c14:	08003c79 	.word	0x08003c79
 8003c18:	08003d3d 	.word	0x08003d3d
 8003c1c:	08003d3d 	.word	0x08003d3d
 8003c20:	08003d3d 	.word	0x08003d3d
 8003c24:	08003cbb 	.word	0x08003cbb
 8003c28:	08003d3d 	.word	0x08003d3d
 8003c2c:	08003d3d 	.word	0x08003d3d
 8003c30:	08003d3d 	.word	0x08003d3d
 8003c34:	08003cfb 	.word	0x08003cfb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	68b9      	ldr	r1, [r7, #8]
 8003c3e:	4618      	mov	r0, r3
 8003c40:	f000 fa0a 	bl	8004058 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	699a      	ldr	r2, [r3, #24]
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f042 0208 	orr.w	r2, r2, #8
 8003c52:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	699a      	ldr	r2, [r3, #24]
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f022 0204 	bic.w	r2, r2, #4
 8003c62:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	6999      	ldr	r1, [r3, #24]
 8003c6a:	68bb      	ldr	r3, [r7, #8]
 8003c6c:	691a      	ldr	r2, [r3, #16]
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	430a      	orrs	r2, r1
 8003c74:	619a      	str	r2, [r3, #24]
      break;
 8003c76:	e062      	b.n	8003d3e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	68b9      	ldr	r1, [r7, #8]
 8003c7e:	4618      	mov	r0, r3
 8003c80:	f000 fa5a 	bl	8004138 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	699a      	ldr	r2, [r3, #24]
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003c92:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	699a      	ldr	r2, [r3, #24]
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ca2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	6999      	ldr	r1, [r3, #24]
 8003caa:	68bb      	ldr	r3, [r7, #8]
 8003cac:	691b      	ldr	r3, [r3, #16]
 8003cae:	021a      	lsls	r2, r3, #8
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	430a      	orrs	r2, r1
 8003cb6:	619a      	str	r2, [r3, #24]
      break;
 8003cb8:	e041      	b.n	8003d3e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	68b9      	ldr	r1, [r7, #8]
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	f000 faaf 	bl	8004224 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	69da      	ldr	r2, [r3, #28]
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f042 0208 	orr.w	r2, r2, #8
 8003cd4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	69da      	ldr	r2, [r3, #28]
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f022 0204 	bic.w	r2, r2, #4
 8003ce4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	69d9      	ldr	r1, [r3, #28]
 8003cec:	68bb      	ldr	r3, [r7, #8]
 8003cee:	691a      	ldr	r2, [r3, #16]
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	430a      	orrs	r2, r1
 8003cf6:	61da      	str	r2, [r3, #28]
      break;
 8003cf8:	e021      	b.n	8003d3e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	68b9      	ldr	r1, [r7, #8]
 8003d00:	4618      	mov	r0, r3
 8003d02:	f000 fb03 	bl	800430c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	69da      	ldr	r2, [r3, #28]
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003d14:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	69da      	ldr	r2, [r3, #28]
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d24:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	69d9      	ldr	r1, [r3, #28]
 8003d2c:	68bb      	ldr	r3, [r7, #8]
 8003d2e:	691b      	ldr	r3, [r3, #16]
 8003d30:	021a      	lsls	r2, r3, #8
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	430a      	orrs	r2, r1
 8003d38:	61da      	str	r2, [r3, #28]
      break;
 8003d3a:	e000      	b.n	8003d3e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8003d3c:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	2201      	movs	r2, #1
 8003d42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	2200      	movs	r2, #0
 8003d4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003d4e:	2300      	movs	r3, #0
}
 8003d50:	4618      	mov	r0, r3
 8003d52:	3710      	adds	r7, #16
 8003d54:	46bd      	mov	sp, r7
 8003d56:	bd80      	pop	{r7, pc}

08003d58 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b084      	sub	sp, #16
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
 8003d60:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d68:	2b01      	cmp	r3, #1
 8003d6a:	d101      	bne.n	8003d70 <HAL_TIM_ConfigClockSource+0x18>
 8003d6c:	2302      	movs	r3, #2
 8003d6e:	e0a6      	b.n	8003ebe <HAL_TIM_ConfigClockSource+0x166>
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2201      	movs	r2, #1
 8003d74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2202      	movs	r2, #2
 8003d7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	689b      	ldr	r3, [r3, #8]
 8003d86:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003d8e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003d96:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	68fa      	ldr	r2, [r7, #12]
 8003d9e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	2b40      	cmp	r3, #64	; 0x40
 8003da6:	d067      	beq.n	8003e78 <HAL_TIM_ConfigClockSource+0x120>
 8003da8:	2b40      	cmp	r3, #64	; 0x40
 8003daa:	d80b      	bhi.n	8003dc4 <HAL_TIM_ConfigClockSource+0x6c>
 8003dac:	2b10      	cmp	r3, #16
 8003dae:	d073      	beq.n	8003e98 <HAL_TIM_ConfigClockSource+0x140>
 8003db0:	2b10      	cmp	r3, #16
 8003db2:	d802      	bhi.n	8003dba <HAL_TIM_ConfigClockSource+0x62>
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d06f      	beq.n	8003e98 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8003db8:	e078      	b.n	8003eac <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003dba:	2b20      	cmp	r3, #32
 8003dbc:	d06c      	beq.n	8003e98 <HAL_TIM_ConfigClockSource+0x140>
 8003dbe:	2b30      	cmp	r3, #48	; 0x30
 8003dc0:	d06a      	beq.n	8003e98 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8003dc2:	e073      	b.n	8003eac <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003dc4:	2b70      	cmp	r3, #112	; 0x70
 8003dc6:	d00d      	beq.n	8003de4 <HAL_TIM_ConfigClockSource+0x8c>
 8003dc8:	2b70      	cmp	r3, #112	; 0x70
 8003dca:	d804      	bhi.n	8003dd6 <HAL_TIM_ConfigClockSource+0x7e>
 8003dcc:	2b50      	cmp	r3, #80	; 0x50
 8003dce:	d033      	beq.n	8003e38 <HAL_TIM_ConfigClockSource+0xe0>
 8003dd0:	2b60      	cmp	r3, #96	; 0x60
 8003dd2:	d041      	beq.n	8003e58 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8003dd4:	e06a      	b.n	8003eac <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003dd6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003dda:	d066      	beq.n	8003eaa <HAL_TIM_ConfigClockSource+0x152>
 8003ddc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003de0:	d017      	beq.n	8003e12 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8003de2:	e063      	b.n	8003eac <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6818      	ldr	r0, [r3, #0]
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	6899      	ldr	r1, [r3, #8]
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	685a      	ldr	r2, [r3, #4]
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	68db      	ldr	r3, [r3, #12]
 8003df4:	f000 fb5a 	bl	80044ac <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	689b      	ldr	r3, [r3, #8]
 8003dfe:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003e06:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	68fa      	ldr	r2, [r7, #12]
 8003e0e:	609a      	str	r2, [r3, #8]
      break;
 8003e10:	e04c      	b.n	8003eac <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6818      	ldr	r0, [r3, #0]
 8003e16:	683b      	ldr	r3, [r7, #0]
 8003e18:	6899      	ldr	r1, [r3, #8]
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	685a      	ldr	r2, [r3, #4]
 8003e1e:	683b      	ldr	r3, [r7, #0]
 8003e20:	68db      	ldr	r3, [r3, #12]
 8003e22:	f000 fb43 	bl	80044ac <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	689a      	ldr	r2, [r3, #8]
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003e34:	609a      	str	r2, [r3, #8]
      break;
 8003e36:	e039      	b.n	8003eac <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	6818      	ldr	r0, [r3, #0]
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	6859      	ldr	r1, [r3, #4]
 8003e40:	683b      	ldr	r3, [r7, #0]
 8003e42:	68db      	ldr	r3, [r3, #12]
 8003e44:	461a      	mov	r2, r3
 8003e46:	f000 fab7 	bl	80043b8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	2150      	movs	r1, #80	; 0x50
 8003e50:	4618      	mov	r0, r3
 8003e52:	f000 fb10 	bl	8004476 <TIM_ITRx_SetConfig>
      break;
 8003e56:	e029      	b.n	8003eac <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6818      	ldr	r0, [r3, #0]
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	6859      	ldr	r1, [r3, #4]
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	68db      	ldr	r3, [r3, #12]
 8003e64:	461a      	mov	r2, r3
 8003e66:	f000 fad6 	bl	8004416 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	2160      	movs	r1, #96	; 0x60
 8003e70:	4618      	mov	r0, r3
 8003e72:	f000 fb00 	bl	8004476 <TIM_ITRx_SetConfig>
      break;
 8003e76:	e019      	b.n	8003eac <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6818      	ldr	r0, [r3, #0]
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	6859      	ldr	r1, [r3, #4]
 8003e80:	683b      	ldr	r3, [r7, #0]
 8003e82:	68db      	ldr	r3, [r3, #12]
 8003e84:	461a      	mov	r2, r3
 8003e86:	f000 fa97 	bl	80043b8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	2140      	movs	r1, #64	; 0x40
 8003e90:	4618      	mov	r0, r3
 8003e92:	f000 faf0 	bl	8004476 <TIM_ITRx_SetConfig>
      break;
 8003e96:	e009      	b.n	8003eac <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681a      	ldr	r2, [r3, #0]
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	4619      	mov	r1, r3
 8003ea2:	4610      	mov	r0, r2
 8003ea4:	f000 fae7 	bl	8004476 <TIM_ITRx_SetConfig>
      break;
 8003ea8:	e000      	b.n	8003eac <HAL_TIM_ConfigClockSource+0x154>
      break;
 8003eaa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2201      	movs	r2, #1
 8003eb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003ebc:	2300      	movs	r3, #0
}
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	3710      	adds	r7, #16
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	bd80      	pop	{r7, pc}

08003ec6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003ec6:	b480      	push	{r7}
 8003ec8:	b083      	sub	sp, #12
 8003eca:	af00      	add	r7, sp, #0
 8003ecc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003ece:	bf00      	nop
 8003ed0:	370c      	adds	r7, #12
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed8:	4770      	bx	lr

08003eda <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003eda:	b480      	push	{r7}
 8003edc:	b083      	sub	sp, #12
 8003ede:	af00      	add	r7, sp, #0
 8003ee0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003ee2:	bf00      	nop
 8003ee4:	370c      	adds	r7, #12
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eec:	4770      	bx	lr

08003eee <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003eee:	b480      	push	{r7}
 8003ef0:	b083      	sub	sp, #12
 8003ef2:	af00      	add	r7, sp, #0
 8003ef4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003ef6:	bf00      	nop
 8003ef8:	370c      	adds	r7, #12
 8003efa:	46bd      	mov	sp, r7
 8003efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f00:	4770      	bx	lr

08003f02 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003f02:	b480      	push	{r7}
 8003f04:	b083      	sub	sp, #12
 8003f06:	af00      	add	r7, sp, #0
 8003f08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003f0a:	bf00      	nop
 8003f0c:	370c      	adds	r7, #12
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f14:	4770      	bx	lr
	...

08003f18 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003f18:	b480      	push	{r7}
 8003f1a:	b085      	sub	sp, #20
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
 8003f20:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	4a40      	ldr	r2, [pc, #256]	; (800402c <TIM_Base_SetConfig+0x114>)
 8003f2c:	4293      	cmp	r3, r2
 8003f2e:	d013      	beq.n	8003f58 <TIM_Base_SetConfig+0x40>
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f36:	d00f      	beq.n	8003f58 <TIM_Base_SetConfig+0x40>
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	4a3d      	ldr	r2, [pc, #244]	; (8004030 <TIM_Base_SetConfig+0x118>)
 8003f3c:	4293      	cmp	r3, r2
 8003f3e:	d00b      	beq.n	8003f58 <TIM_Base_SetConfig+0x40>
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	4a3c      	ldr	r2, [pc, #240]	; (8004034 <TIM_Base_SetConfig+0x11c>)
 8003f44:	4293      	cmp	r3, r2
 8003f46:	d007      	beq.n	8003f58 <TIM_Base_SetConfig+0x40>
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	4a3b      	ldr	r2, [pc, #236]	; (8004038 <TIM_Base_SetConfig+0x120>)
 8003f4c:	4293      	cmp	r3, r2
 8003f4e:	d003      	beq.n	8003f58 <TIM_Base_SetConfig+0x40>
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	4a3a      	ldr	r2, [pc, #232]	; (800403c <TIM_Base_SetConfig+0x124>)
 8003f54:	4293      	cmp	r3, r2
 8003f56:	d108      	bne.n	8003f6a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f5e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003f60:	683b      	ldr	r3, [r7, #0]
 8003f62:	685b      	ldr	r3, [r3, #4]
 8003f64:	68fa      	ldr	r2, [r7, #12]
 8003f66:	4313      	orrs	r3, r2
 8003f68:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	4a2f      	ldr	r2, [pc, #188]	; (800402c <TIM_Base_SetConfig+0x114>)
 8003f6e:	4293      	cmp	r3, r2
 8003f70:	d02b      	beq.n	8003fca <TIM_Base_SetConfig+0xb2>
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f78:	d027      	beq.n	8003fca <TIM_Base_SetConfig+0xb2>
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	4a2c      	ldr	r2, [pc, #176]	; (8004030 <TIM_Base_SetConfig+0x118>)
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	d023      	beq.n	8003fca <TIM_Base_SetConfig+0xb2>
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	4a2b      	ldr	r2, [pc, #172]	; (8004034 <TIM_Base_SetConfig+0x11c>)
 8003f86:	4293      	cmp	r3, r2
 8003f88:	d01f      	beq.n	8003fca <TIM_Base_SetConfig+0xb2>
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	4a2a      	ldr	r2, [pc, #168]	; (8004038 <TIM_Base_SetConfig+0x120>)
 8003f8e:	4293      	cmp	r3, r2
 8003f90:	d01b      	beq.n	8003fca <TIM_Base_SetConfig+0xb2>
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	4a29      	ldr	r2, [pc, #164]	; (800403c <TIM_Base_SetConfig+0x124>)
 8003f96:	4293      	cmp	r3, r2
 8003f98:	d017      	beq.n	8003fca <TIM_Base_SetConfig+0xb2>
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	4a28      	ldr	r2, [pc, #160]	; (8004040 <TIM_Base_SetConfig+0x128>)
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d013      	beq.n	8003fca <TIM_Base_SetConfig+0xb2>
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	4a27      	ldr	r2, [pc, #156]	; (8004044 <TIM_Base_SetConfig+0x12c>)
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d00f      	beq.n	8003fca <TIM_Base_SetConfig+0xb2>
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	4a26      	ldr	r2, [pc, #152]	; (8004048 <TIM_Base_SetConfig+0x130>)
 8003fae:	4293      	cmp	r3, r2
 8003fb0:	d00b      	beq.n	8003fca <TIM_Base_SetConfig+0xb2>
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	4a25      	ldr	r2, [pc, #148]	; (800404c <TIM_Base_SetConfig+0x134>)
 8003fb6:	4293      	cmp	r3, r2
 8003fb8:	d007      	beq.n	8003fca <TIM_Base_SetConfig+0xb2>
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	4a24      	ldr	r2, [pc, #144]	; (8004050 <TIM_Base_SetConfig+0x138>)
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	d003      	beq.n	8003fca <TIM_Base_SetConfig+0xb2>
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	4a23      	ldr	r2, [pc, #140]	; (8004054 <TIM_Base_SetConfig+0x13c>)
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	d108      	bne.n	8003fdc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003fd0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	68db      	ldr	r3, [r3, #12]
 8003fd6:	68fa      	ldr	r2, [r7, #12]
 8003fd8:	4313      	orrs	r3, r2
 8003fda:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003fe2:	683b      	ldr	r3, [r7, #0]
 8003fe4:	695b      	ldr	r3, [r3, #20]
 8003fe6:	4313      	orrs	r3, r2
 8003fe8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	68fa      	ldr	r2, [r7, #12]
 8003fee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	689a      	ldr	r2, [r3, #8]
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003ff8:	683b      	ldr	r3, [r7, #0]
 8003ffa:	681a      	ldr	r2, [r3, #0]
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	4a0a      	ldr	r2, [pc, #40]	; (800402c <TIM_Base_SetConfig+0x114>)
 8004004:	4293      	cmp	r3, r2
 8004006:	d003      	beq.n	8004010 <TIM_Base_SetConfig+0xf8>
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	4a0c      	ldr	r2, [pc, #48]	; (800403c <TIM_Base_SetConfig+0x124>)
 800400c:	4293      	cmp	r3, r2
 800400e:	d103      	bne.n	8004018 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	691a      	ldr	r2, [r3, #16]
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2201      	movs	r2, #1
 800401c:	615a      	str	r2, [r3, #20]
}
 800401e:	bf00      	nop
 8004020:	3714      	adds	r7, #20
 8004022:	46bd      	mov	sp, r7
 8004024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004028:	4770      	bx	lr
 800402a:	bf00      	nop
 800402c:	40010000 	.word	0x40010000
 8004030:	40000400 	.word	0x40000400
 8004034:	40000800 	.word	0x40000800
 8004038:	40000c00 	.word	0x40000c00
 800403c:	40010400 	.word	0x40010400
 8004040:	40014000 	.word	0x40014000
 8004044:	40014400 	.word	0x40014400
 8004048:	40014800 	.word	0x40014800
 800404c:	40001800 	.word	0x40001800
 8004050:	40001c00 	.word	0x40001c00
 8004054:	40002000 	.word	0x40002000

08004058 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004058:	b480      	push	{r7}
 800405a:	b087      	sub	sp, #28
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
 8004060:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6a1b      	ldr	r3, [r3, #32]
 8004066:	f023 0201 	bic.w	r2, r3, #1
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6a1b      	ldr	r3, [r3, #32]
 8004072:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	685b      	ldr	r3, [r3, #4]
 8004078:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	699b      	ldr	r3, [r3, #24]
 800407e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004086:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	f023 0303 	bic.w	r3, r3, #3
 800408e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	68fa      	ldr	r2, [r7, #12]
 8004096:	4313      	orrs	r3, r2
 8004098:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800409a:	697b      	ldr	r3, [r7, #20]
 800409c:	f023 0302 	bic.w	r3, r3, #2
 80040a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80040a2:	683b      	ldr	r3, [r7, #0]
 80040a4:	689b      	ldr	r3, [r3, #8]
 80040a6:	697a      	ldr	r2, [r7, #20]
 80040a8:	4313      	orrs	r3, r2
 80040aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	4a20      	ldr	r2, [pc, #128]	; (8004130 <TIM_OC1_SetConfig+0xd8>)
 80040b0:	4293      	cmp	r3, r2
 80040b2:	d003      	beq.n	80040bc <TIM_OC1_SetConfig+0x64>
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	4a1f      	ldr	r2, [pc, #124]	; (8004134 <TIM_OC1_SetConfig+0xdc>)
 80040b8:	4293      	cmp	r3, r2
 80040ba:	d10c      	bne.n	80040d6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80040bc:	697b      	ldr	r3, [r7, #20]
 80040be:	f023 0308 	bic.w	r3, r3, #8
 80040c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	68db      	ldr	r3, [r3, #12]
 80040c8:	697a      	ldr	r2, [r7, #20]
 80040ca:	4313      	orrs	r3, r2
 80040cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80040ce:	697b      	ldr	r3, [r7, #20]
 80040d0:	f023 0304 	bic.w	r3, r3, #4
 80040d4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	4a15      	ldr	r2, [pc, #84]	; (8004130 <TIM_OC1_SetConfig+0xd8>)
 80040da:	4293      	cmp	r3, r2
 80040dc:	d003      	beq.n	80040e6 <TIM_OC1_SetConfig+0x8e>
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	4a14      	ldr	r2, [pc, #80]	; (8004134 <TIM_OC1_SetConfig+0xdc>)
 80040e2:	4293      	cmp	r3, r2
 80040e4:	d111      	bne.n	800410a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80040e6:	693b      	ldr	r3, [r7, #16]
 80040e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80040ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80040ee:	693b      	ldr	r3, [r7, #16]
 80040f0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80040f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80040f6:	683b      	ldr	r3, [r7, #0]
 80040f8:	695b      	ldr	r3, [r3, #20]
 80040fa:	693a      	ldr	r2, [r7, #16]
 80040fc:	4313      	orrs	r3, r2
 80040fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	699b      	ldr	r3, [r3, #24]
 8004104:	693a      	ldr	r2, [r7, #16]
 8004106:	4313      	orrs	r3, r2
 8004108:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	693a      	ldr	r2, [r7, #16]
 800410e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	68fa      	ldr	r2, [r7, #12]
 8004114:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004116:	683b      	ldr	r3, [r7, #0]
 8004118:	685a      	ldr	r2, [r3, #4]
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	697a      	ldr	r2, [r7, #20]
 8004122:	621a      	str	r2, [r3, #32]
}
 8004124:	bf00      	nop
 8004126:	371c      	adds	r7, #28
 8004128:	46bd      	mov	sp, r7
 800412a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412e:	4770      	bx	lr
 8004130:	40010000 	.word	0x40010000
 8004134:	40010400 	.word	0x40010400

08004138 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004138:	b480      	push	{r7}
 800413a:	b087      	sub	sp, #28
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
 8004140:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6a1b      	ldr	r3, [r3, #32]
 8004146:	f023 0210 	bic.w	r2, r3, #16
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6a1b      	ldr	r3, [r3, #32]
 8004152:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	685b      	ldr	r3, [r3, #4]
 8004158:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	699b      	ldr	r3, [r3, #24]
 800415e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004166:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800416e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	021b      	lsls	r3, r3, #8
 8004176:	68fa      	ldr	r2, [r7, #12]
 8004178:	4313      	orrs	r3, r2
 800417a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800417c:	697b      	ldr	r3, [r7, #20]
 800417e:	f023 0320 	bic.w	r3, r3, #32
 8004182:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004184:	683b      	ldr	r3, [r7, #0]
 8004186:	689b      	ldr	r3, [r3, #8]
 8004188:	011b      	lsls	r3, r3, #4
 800418a:	697a      	ldr	r2, [r7, #20]
 800418c:	4313      	orrs	r3, r2
 800418e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	4a22      	ldr	r2, [pc, #136]	; (800421c <TIM_OC2_SetConfig+0xe4>)
 8004194:	4293      	cmp	r3, r2
 8004196:	d003      	beq.n	80041a0 <TIM_OC2_SetConfig+0x68>
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	4a21      	ldr	r2, [pc, #132]	; (8004220 <TIM_OC2_SetConfig+0xe8>)
 800419c:	4293      	cmp	r3, r2
 800419e:	d10d      	bne.n	80041bc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80041a0:	697b      	ldr	r3, [r7, #20]
 80041a2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80041a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80041a8:	683b      	ldr	r3, [r7, #0]
 80041aa:	68db      	ldr	r3, [r3, #12]
 80041ac:	011b      	lsls	r3, r3, #4
 80041ae:	697a      	ldr	r2, [r7, #20]
 80041b0:	4313      	orrs	r3, r2
 80041b2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80041b4:	697b      	ldr	r3, [r7, #20]
 80041b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80041ba:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	4a17      	ldr	r2, [pc, #92]	; (800421c <TIM_OC2_SetConfig+0xe4>)
 80041c0:	4293      	cmp	r3, r2
 80041c2:	d003      	beq.n	80041cc <TIM_OC2_SetConfig+0x94>
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	4a16      	ldr	r2, [pc, #88]	; (8004220 <TIM_OC2_SetConfig+0xe8>)
 80041c8:	4293      	cmp	r3, r2
 80041ca:	d113      	bne.n	80041f4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80041cc:	693b      	ldr	r3, [r7, #16]
 80041ce:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80041d2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80041d4:	693b      	ldr	r3, [r7, #16]
 80041d6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80041da:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	695b      	ldr	r3, [r3, #20]
 80041e0:	009b      	lsls	r3, r3, #2
 80041e2:	693a      	ldr	r2, [r7, #16]
 80041e4:	4313      	orrs	r3, r2
 80041e6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	699b      	ldr	r3, [r3, #24]
 80041ec:	009b      	lsls	r3, r3, #2
 80041ee:	693a      	ldr	r2, [r7, #16]
 80041f0:	4313      	orrs	r3, r2
 80041f2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	693a      	ldr	r2, [r7, #16]
 80041f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	68fa      	ldr	r2, [r7, #12]
 80041fe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	685a      	ldr	r2, [r3, #4]
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	697a      	ldr	r2, [r7, #20]
 800420c:	621a      	str	r2, [r3, #32]
}
 800420e:	bf00      	nop
 8004210:	371c      	adds	r7, #28
 8004212:	46bd      	mov	sp, r7
 8004214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004218:	4770      	bx	lr
 800421a:	bf00      	nop
 800421c:	40010000 	.word	0x40010000
 8004220:	40010400 	.word	0x40010400

08004224 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004224:	b480      	push	{r7}
 8004226:	b087      	sub	sp, #28
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
 800422c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6a1b      	ldr	r3, [r3, #32]
 8004232:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6a1b      	ldr	r3, [r3, #32]
 800423e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	685b      	ldr	r3, [r3, #4]
 8004244:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	69db      	ldr	r3, [r3, #28]
 800424a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004252:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	f023 0303 	bic.w	r3, r3, #3
 800425a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800425c:	683b      	ldr	r3, [r7, #0]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	68fa      	ldr	r2, [r7, #12]
 8004262:	4313      	orrs	r3, r2
 8004264:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004266:	697b      	ldr	r3, [r7, #20]
 8004268:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800426c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800426e:	683b      	ldr	r3, [r7, #0]
 8004270:	689b      	ldr	r3, [r3, #8]
 8004272:	021b      	lsls	r3, r3, #8
 8004274:	697a      	ldr	r2, [r7, #20]
 8004276:	4313      	orrs	r3, r2
 8004278:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	4a21      	ldr	r2, [pc, #132]	; (8004304 <TIM_OC3_SetConfig+0xe0>)
 800427e:	4293      	cmp	r3, r2
 8004280:	d003      	beq.n	800428a <TIM_OC3_SetConfig+0x66>
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	4a20      	ldr	r2, [pc, #128]	; (8004308 <TIM_OC3_SetConfig+0xe4>)
 8004286:	4293      	cmp	r3, r2
 8004288:	d10d      	bne.n	80042a6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800428a:	697b      	ldr	r3, [r7, #20]
 800428c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004290:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	68db      	ldr	r3, [r3, #12]
 8004296:	021b      	lsls	r3, r3, #8
 8004298:	697a      	ldr	r2, [r7, #20]
 800429a:	4313      	orrs	r3, r2
 800429c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800429e:	697b      	ldr	r3, [r7, #20]
 80042a0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80042a4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	4a16      	ldr	r2, [pc, #88]	; (8004304 <TIM_OC3_SetConfig+0xe0>)
 80042aa:	4293      	cmp	r3, r2
 80042ac:	d003      	beq.n	80042b6 <TIM_OC3_SetConfig+0x92>
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	4a15      	ldr	r2, [pc, #84]	; (8004308 <TIM_OC3_SetConfig+0xe4>)
 80042b2:	4293      	cmp	r3, r2
 80042b4:	d113      	bne.n	80042de <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80042b6:	693b      	ldr	r3, [r7, #16]
 80042b8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80042bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80042be:	693b      	ldr	r3, [r7, #16]
 80042c0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80042c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80042c6:	683b      	ldr	r3, [r7, #0]
 80042c8:	695b      	ldr	r3, [r3, #20]
 80042ca:	011b      	lsls	r3, r3, #4
 80042cc:	693a      	ldr	r2, [r7, #16]
 80042ce:	4313      	orrs	r3, r2
 80042d0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80042d2:	683b      	ldr	r3, [r7, #0]
 80042d4:	699b      	ldr	r3, [r3, #24]
 80042d6:	011b      	lsls	r3, r3, #4
 80042d8:	693a      	ldr	r2, [r7, #16]
 80042da:	4313      	orrs	r3, r2
 80042dc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	693a      	ldr	r2, [r7, #16]
 80042e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	68fa      	ldr	r2, [r7, #12]
 80042e8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80042ea:	683b      	ldr	r3, [r7, #0]
 80042ec:	685a      	ldr	r2, [r3, #4]
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	697a      	ldr	r2, [r7, #20]
 80042f6:	621a      	str	r2, [r3, #32]
}
 80042f8:	bf00      	nop
 80042fa:	371c      	adds	r7, #28
 80042fc:	46bd      	mov	sp, r7
 80042fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004302:	4770      	bx	lr
 8004304:	40010000 	.word	0x40010000
 8004308:	40010400 	.word	0x40010400

0800430c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800430c:	b480      	push	{r7}
 800430e:	b087      	sub	sp, #28
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
 8004314:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6a1b      	ldr	r3, [r3, #32]
 800431a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6a1b      	ldr	r3, [r3, #32]
 8004326:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	685b      	ldr	r3, [r3, #4]
 800432c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	69db      	ldr	r3, [r3, #28]
 8004332:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800433a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004342:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004344:	683b      	ldr	r3, [r7, #0]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	021b      	lsls	r3, r3, #8
 800434a:	68fa      	ldr	r2, [r7, #12]
 800434c:	4313      	orrs	r3, r2
 800434e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004350:	693b      	ldr	r3, [r7, #16]
 8004352:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004356:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	689b      	ldr	r3, [r3, #8]
 800435c:	031b      	lsls	r3, r3, #12
 800435e:	693a      	ldr	r2, [r7, #16]
 8004360:	4313      	orrs	r3, r2
 8004362:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	4a12      	ldr	r2, [pc, #72]	; (80043b0 <TIM_OC4_SetConfig+0xa4>)
 8004368:	4293      	cmp	r3, r2
 800436a:	d003      	beq.n	8004374 <TIM_OC4_SetConfig+0x68>
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	4a11      	ldr	r2, [pc, #68]	; (80043b4 <TIM_OC4_SetConfig+0xa8>)
 8004370:	4293      	cmp	r3, r2
 8004372:	d109      	bne.n	8004388 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004374:	697b      	ldr	r3, [r7, #20]
 8004376:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800437a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	695b      	ldr	r3, [r3, #20]
 8004380:	019b      	lsls	r3, r3, #6
 8004382:	697a      	ldr	r2, [r7, #20]
 8004384:	4313      	orrs	r3, r2
 8004386:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	697a      	ldr	r2, [r7, #20]
 800438c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	68fa      	ldr	r2, [r7, #12]
 8004392:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	685a      	ldr	r2, [r3, #4]
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	693a      	ldr	r2, [r7, #16]
 80043a0:	621a      	str	r2, [r3, #32]
}
 80043a2:	bf00      	nop
 80043a4:	371c      	adds	r7, #28
 80043a6:	46bd      	mov	sp, r7
 80043a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ac:	4770      	bx	lr
 80043ae:	bf00      	nop
 80043b0:	40010000 	.word	0x40010000
 80043b4:	40010400 	.word	0x40010400

080043b8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80043b8:	b480      	push	{r7}
 80043ba:	b087      	sub	sp, #28
 80043bc:	af00      	add	r7, sp, #0
 80043be:	60f8      	str	r0, [r7, #12]
 80043c0:	60b9      	str	r1, [r7, #8]
 80043c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	6a1b      	ldr	r3, [r3, #32]
 80043c8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	6a1b      	ldr	r3, [r3, #32]
 80043ce:	f023 0201 	bic.w	r2, r3, #1
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	699b      	ldr	r3, [r3, #24]
 80043da:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80043dc:	693b      	ldr	r3, [r7, #16]
 80043de:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80043e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	011b      	lsls	r3, r3, #4
 80043e8:	693a      	ldr	r2, [r7, #16]
 80043ea:	4313      	orrs	r3, r2
 80043ec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80043ee:	697b      	ldr	r3, [r7, #20]
 80043f0:	f023 030a 	bic.w	r3, r3, #10
 80043f4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80043f6:	697a      	ldr	r2, [r7, #20]
 80043f8:	68bb      	ldr	r3, [r7, #8]
 80043fa:	4313      	orrs	r3, r2
 80043fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	693a      	ldr	r2, [r7, #16]
 8004402:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	697a      	ldr	r2, [r7, #20]
 8004408:	621a      	str	r2, [r3, #32]
}
 800440a:	bf00      	nop
 800440c:	371c      	adds	r7, #28
 800440e:	46bd      	mov	sp, r7
 8004410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004414:	4770      	bx	lr

08004416 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004416:	b480      	push	{r7}
 8004418:	b087      	sub	sp, #28
 800441a:	af00      	add	r7, sp, #0
 800441c:	60f8      	str	r0, [r7, #12]
 800441e:	60b9      	str	r1, [r7, #8]
 8004420:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	6a1b      	ldr	r3, [r3, #32]
 8004426:	f023 0210 	bic.w	r2, r3, #16
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	699b      	ldr	r3, [r3, #24]
 8004432:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	6a1b      	ldr	r3, [r3, #32]
 8004438:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800443a:	697b      	ldr	r3, [r7, #20]
 800443c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004440:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	031b      	lsls	r3, r3, #12
 8004446:	697a      	ldr	r2, [r7, #20]
 8004448:	4313      	orrs	r3, r2
 800444a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800444c:	693b      	ldr	r3, [r7, #16]
 800444e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004452:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004454:	68bb      	ldr	r3, [r7, #8]
 8004456:	011b      	lsls	r3, r3, #4
 8004458:	693a      	ldr	r2, [r7, #16]
 800445a:	4313      	orrs	r3, r2
 800445c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	697a      	ldr	r2, [r7, #20]
 8004462:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	693a      	ldr	r2, [r7, #16]
 8004468:	621a      	str	r2, [r3, #32]
}
 800446a:	bf00      	nop
 800446c:	371c      	adds	r7, #28
 800446e:	46bd      	mov	sp, r7
 8004470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004474:	4770      	bx	lr

08004476 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004476:	b480      	push	{r7}
 8004478:	b085      	sub	sp, #20
 800447a:	af00      	add	r7, sp, #0
 800447c:	6078      	str	r0, [r7, #4]
 800447e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	689b      	ldr	r3, [r3, #8]
 8004484:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800448c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800448e:	683a      	ldr	r2, [r7, #0]
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	4313      	orrs	r3, r2
 8004494:	f043 0307 	orr.w	r3, r3, #7
 8004498:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	68fa      	ldr	r2, [r7, #12]
 800449e:	609a      	str	r2, [r3, #8]
}
 80044a0:	bf00      	nop
 80044a2:	3714      	adds	r7, #20
 80044a4:	46bd      	mov	sp, r7
 80044a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044aa:	4770      	bx	lr

080044ac <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80044ac:	b480      	push	{r7}
 80044ae:	b087      	sub	sp, #28
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	60f8      	str	r0, [r7, #12]
 80044b4:	60b9      	str	r1, [r7, #8]
 80044b6:	607a      	str	r2, [r7, #4]
 80044b8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	689b      	ldr	r3, [r3, #8]
 80044be:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80044c0:	697b      	ldr	r3, [r7, #20]
 80044c2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80044c6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80044c8:	683b      	ldr	r3, [r7, #0]
 80044ca:	021a      	lsls	r2, r3, #8
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	431a      	orrs	r2, r3
 80044d0:	68bb      	ldr	r3, [r7, #8]
 80044d2:	4313      	orrs	r3, r2
 80044d4:	697a      	ldr	r2, [r7, #20]
 80044d6:	4313      	orrs	r3, r2
 80044d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	697a      	ldr	r2, [r7, #20]
 80044de:	609a      	str	r2, [r3, #8]
}
 80044e0:	bf00      	nop
 80044e2:	371c      	adds	r7, #28
 80044e4:	46bd      	mov	sp, r7
 80044e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ea:	4770      	bx	lr

080044ec <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80044ec:	b480      	push	{r7}
 80044ee:	b087      	sub	sp, #28
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	60f8      	str	r0, [r7, #12]
 80044f4:	60b9      	str	r1, [r7, #8]
 80044f6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80044f8:	68bb      	ldr	r3, [r7, #8]
 80044fa:	f003 031f 	and.w	r3, r3, #31
 80044fe:	2201      	movs	r2, #1
 8004500:	fa02 f303 	lsl.w	r3, r2, r3
 8004504:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	6a1a      	ldr	r2, [r3, #32]
 800450a:	697b      	ldr	r3, [r7, #20]
 800450c:	43db      	mvns	r3, r3
 800450e:	401a      	ands	r2, r3
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	6a1a      	ldr	r2, [r3, #32]
 8004518:	68bb      	ldr	r3, [r7, #8]
 800451a:	f003 031f 	and.w	r3, r3, #31
 800451e:	6879      	ldr	r1, [r7, #4]
 8004520:	fa01 f303 	lsl.w	r3, r1, r3
 8004524:	431a      	orrs	r2, r3
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	621a      	str	r2, [r3, #32]
}
 800452a:	bf00      	nop
 800452c:	371c      	adds	r7, #28
 800452e:	46bd      	mov	sp, r7
 8004530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004534:	4770      	bx	lr

08004536 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004536:	b480      	push	{r7}
 8004538:	b085      	sub	sp, #20
 800453a:	af00      	add	r7, sp, #0
 800453c:	6078      	str	r0, [r7, #4]
 800453e:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004546:	2b01      	cmp	r3, #1
 8004548:	d101      	bne.n	800454e <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800454a:	2302      	movs	r3, #2
 800454c:	e032      	b.n	80045b4 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	2201      	movs	r2, #1
 8004552:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	2202      	movs	r2, #2
 800455a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	685b      	ldr	r3, [r3, #4]
 8004564:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	689b      	ldr	r3, [r3, #8]
 800456c:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004574:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004576:	683b      	ldr	r3, [r7, #0]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	68fa      	ldr	r2, [r7, #12]
 800457c:	4313      	orrs	r3, r2
 800457e:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8004580:	68bb      	ldr	r3, [r7, #8]
 8004582:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004586:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004588:	683b      	ldr	r3, [r7, #0]
 800458a:	685b      	ldr	r3, [r3, #4]
 800458c:	68ba      	ldr	r2, [r7, #8]
 800458e:	4313      	orrs	r3, r2
 8004590:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	68fa      	ldr	r2, [r7, #12]
 8004598:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	68ba      	ldr	r2, [r7, #8]
 80045a0:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	2201      	movs	r2, #1
 80045a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	2200      	movs	r2, #0
 80045ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80045b2:	2300      	movs	r3, #0
}
 80045b4:	4618      	mov	r0, r3
 80045b6:	3714      	adds	r7, #20
 80045b8:	46bd      	mov	sp, r7
 80045ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045be:	4770      	bx	lr

080045c0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80045c0:	b480      	push	{r7}
 80045c2:	b083      	sub	sp, #12
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80045c8:	bf00      	nop
 80045ca:	370c      	adds	r7, #12
 80045cc:	46bd      	mov	sp, r7
 80045ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d2:	4770      	bx	lr

080045d4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80045d4:	b480      	push	{r7}
 80045d6:	b083      	sub	sp, #12
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80045dc:	bf00      	nop
 80045de:	370c      	adds	r7, #12
 80045e0:	46bd      	mov	sp, r7
 80045e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e6:	4770      	bx	lr

080045e8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80045e8:	b580      	push	{r7, lr}
 80045ea:	b082      	sub	sp, #8
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d101      	bne.n	80045fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80045f6:	2301      	movs	r3, #1
 80045f8:	e03f      	b.n	800467a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004600:	b2db      	uxtb	r3, r3
 8004602:	2b00      	cmp	r3, #0
 8004604:	d106      	bne.n	8004614 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	2200      	movs	r2, #0
 800460a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800460e:	6878      	ldr	r0, [r7, #4]
 8004610:	f00d fdba 	bl	8012188 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2224      	movs	r2, #36	; 0x24
 8004618:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	68da      	ldr	r2, [r3, #12]
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800462a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800462c:	6878      	ldr	r0, [r7, #4]
 800462e:	f000 f90b 	bl	8004848 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	691a      	ldr	r2, [r3, #16]
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004640:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	695a      	ldr	r2, [r3, #20]
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004650:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	68da      	ldr	r2, [r3, #12]
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004660:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	2200      	movs	r2, #0
 8004666:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2220      	movs	r2, #32
 800466c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2220      	movs	r2, #32
 8004674:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8004678:	2300      	movs	r3, #0
}
 800467a:	4618      	mov	r0, r3
 800467c:	3708      	adds	r7, #8
 800467e:	46bd      	mov	sp, r7
 8004680:	bd80      	pop	{r7, pc}

08004682 <HAL_UART_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004682:	b580      	push	{r7, lr}
 8004684:	b088      	sub	sp, #32
 8004686:	af02      	add	r7, sp, #8
 8004688:	60f8      	str	r0, [r7, #12]
 800468a:	60b9      	str	r1, [r7, #8]
 800468c:	603b      	str	r3, [r7, #0]
 800468e:	4613      	mov	r3, r2
 8004690:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8004692:	2300      	movs	r3, #0
 8004694:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800469c:	b2db      	uxtb	r3, r3
 800469e:	2b20      	cmp	r3, #32
 80046a0:	f040 8083 	bne.w	80047aa <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 80046a4:	68bb      	ldr	r3, [r7, #8]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d002      	beq.n	80046b0 <HAL_UART_Transmit+0x2e>
 80046aa:	88fb      	ldrh	r3, [r7, #6]
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d101      	bne.n	80046b4 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80046b0:	2301      	movs	r3, #1
 80046b2:	e07b      	b.n	80047ac <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80046ba:	2b01      	cmp	r3, #1
 80046bc:	d101      	bne.n	80046c2 <HAL_UART_Transmit+0x40>
 80046be:	2302      	movs	r3, #2
 80046c0:	e074      	b.n	80047ac <HAL_UART_Transmit+0x12a>
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	2201      	movs	r2, #1
 80046c6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	2200      	movs	r2, #0
 80046ce:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	2221      	movs	r2, #33	; 0x21
 80046d4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80046d8:	f7fc fc94 	bl	8001004 <HAL_GetTick>
 80046dc:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	88fa      	ldrh	r2, [r7, #6]
 80046e2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	88fa      	ldrh	r2, [r7, #6]
 80046e8:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80046ea:	e042      	b.n	8004772 <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80046f0:	b29b      	uxth	r3, r3
 80046f2:	3b01      	subs	r3, #1
 80046f4:	b29a      	uxth	r2, r3
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	689b      	ldr	r3, [r3, #8]
 80046fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004702:	d122      	bne.n	800474a <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004704:	683b      	ldr	r3, [r7, #0]
 8004706:	9300      	str	r3, [sp, #0]
 8004708:	697b      	ldr	r3, [r7, #20]
 800470a:	2200      	movs	r2, #0
 800470c:	2180      	movs	r1, #128	; 0x80
 800470e:	68f8      	ldr	r0, [r7, #12]
 8004710:	f000 f850 	bl	80047b4 <UART_WaitOnFlagUntilTimeout>
 8004714:	4603      	mov	r3, r0
 8004716:	2b00      	cmp	r3, #0
 8004718:	d001      	beq.n	800471e <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 800471a:	2303      	movs	r3, #3
 800471c:	e046      	b.n	80047ac <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800471e:	68bb      	ldr	r3, [r7, #8]
 8004720:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8004722:	693b      	ldr	r3, [r7, #16]
 8004724:	881b      	ldrh	r3, [r3, #0]
 8004726:	461a      	mov	r2, r3
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004730:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	691b      	ldr	r3, [r3, #16]
 8004736:	2b00      	cmp	r3, #0
 8004738:	d103      	bne.n	8004742 <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 800473a:	68bb      	ldr	r3, [r7, #8]
 800473c:	3302      	adds	r3, #2
 800473e:	60bb      	str	r3, [r7, #8]
 8004740:	e017      	b.n	8004772 <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 8004742:	68bb      	ldr	r3, [r7, #8]
 8004744:	3301      	adds	r3, #1
 8004746:	60bb      	str	r3, [r7, #8]
 8004748:	e013      	b.n	8004772 <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	9300      	str	r3, [sp, #0]
 800474e:	697b      	ldr	r3, [r7, #20]
 8004750:	2200      	movs	r2, #0
 8004752:	2180      	movs	r1, #128	; 0x80
 8004754:	68f8      	ldr	r0, [r7, #12]
 8004756:	f000 f82d 	bl	80047b4 <UART_WaitOnFlagUntilTimeout>
 800475a:	4603      	mov	r3, r0
 800475c:	2b00      	cmp	r3, #0
 800475e:	d001      	beq.n	8004764 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8004760:	2303      	movs	r3, #3
 8004762:	e023      	b.n	80047ac <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8004764:	68bb      	ldr	r3, [r7, #8]
 8004766:	1c5a      	adds	r2, r3, #1
 8004768:	60ba      	str	r2, [r7, #8]
 800476a:	781a      	ldrb	r2, [r3, #0]
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004776:	b29b      	uxth	r3, r3
 8004778:	2b00      	cmp	r3, #0
 800477a:	d1b7      	bne.n	80046ec <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800477c:	683b      	ldr	r3, [r7, #0]
 800477e:	9300      	str	r3, [sp, #0]
 8004780:	697b      	ldr	r3, [r7, #20]
 8004782:	2200      	movs	r2, #0
 8004784:	2140      	movs	r1, #64	; 0x40
 8004786:	68f8      	ldr	r0, [r7, #12]
 8004788:	f000 f814 	bl	80047b4 <UART_WaitOnFlagUntilTimeout>
 800478c:	4603      	mov	r3, r0
 800478e:	2b00      	cmp	r3, #0
 8004790:	d001      	beq.n	8004796 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8004792:	2303      	movs	r3, #3
 8004794:	e00a      	b.n	80047ac <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	2220      	movs	r2, #32
 800479a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	2200      	movs	r2, #0
 80047a2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 80047a6:	2300      	movs	r3, #0
 80047a8:	e000      	b.n	80047ac <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80047aa:	2302      	movs	r3, #2
  }
}
 80047ac:	4618      	mov	r0, r3
 80047ae:	3718      	adds	r7, #24
 80047b0:	46bd      	mov	sp, r7
 80047b2:	bd80      	pop	{r7, pc}

080047b4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80047b4:	b580      	push	{r7, lr}
 80047b6:	b084      	sub	sp, #16
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	60f8      	str	r0, [r7, #12]
 80047bc:	60b9      	str	r1, [r7, #8]
 80047be:	603b      	str	r3, [r7, #0]
 80047c0:	4613      	mov	r3, r2
 80047c2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80047c4:	e02c      	b.n	8004820 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047c6:	69bb      	ldr	r3, [r7, #24]
 80047c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047cc:	d028      	beq.n	8004820 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80047ce:	69bb      	ldr	r3, [r7, #24]
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d007      	beq.n	80047e4 <UART_WaitOnFlagUntilTimeout+0x30>
 80047d4:	f7fc fc16 	bl	8001004 <HAL_GetTick>
 80047d8:	4602      	mov	r2, r0
 80047da:	683b      	ldr	r3, [r7, #0]
 80047dc:	1ad3      	subs	r3, r2, r3
 80047de:	69ba      	ldr	r2, [r7, #24]
 80047e0:	429a      	cmp	r2, r3
 80047e2:	d21d      	bcs.n	8004820 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	68da      	ldr	r2, [r3, #12]
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80047f2:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	695a      	ldr	r2, [r3, #20]
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f022 0201 	bic.w	r2, r2, #1
 8004802:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	2220      	movs	r2, #32
 8004808:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	2220      	movs	r2, #32
 8004810:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	2200      	movs	r2, #0
 8004818:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 800481c:	2303      	movs	r3, #3
 800481e:	e00f      	b.n	8004840 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	681a      	ldr	r2, [r3, #0]
 8004826:	68bb      	ldr	r3, [r7, #8]
 8004828:	4013      	ands	r3, r2
 800482a:	68ba      	ldr	r2, [r7, #8]
 800482c:	429a      	cmp	r2, r3
 800482e:	bf0c      	ite	eq
 8004830:	2301      	moveq	r3, #1
 8004832:	2300      	movne	r3, #0
 8004834:	b2db      	uxtb	r3, r3
 8004836:	461a      	mov	r2, r3
 8004838:	79fb      	ldrb	r3, [r7, #7]
 800483a:	429a      	cmp	r2, r3
 800483c:	d0c3      	beq.n	80047c6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800483e:	2300      	movs	r3, #0
}
 8004840:	4618      	mov	r0, r3
 8004842:	3710      	adds	r7, #16
 8004844:	46bd      	mov	sp, r7
 8004846:	bd80      	pop	{r7, pc}

08004848 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004848:	b5b0      	push	{r4, r5, r7, lr}
 800484a:	b084      	sub	sp, #16
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	691b      	ldr	r3, [r3, #16]
 8004856:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	68da      	ldr	r2, [r3, #12]
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	430a      	orrs	r2, r1
 8004864:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	689a      	ldr	r2, [r3, #8]
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	691b      	ldr	r3, [r3, #16]
 800486e:	431a      	orrs	r2, r3
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	695b      	ldr	r3, [r3, #20]
 8004874:	431a      	orrs	r2, r3
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	69db      	ldr	r3, [r3, #28]
 800487a:	4313      	orrs	r3, r2
 800487c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	68db      	ldr	r3, [r3, #12]
 8004884:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8004888:	f023 030c 	bic.w	r3, r3, #12
 800488c:	687a      	ldr	r2, [r7, #4]
 800488e:	6812      	ldr	r2, [r2, #0]
 8004890:	68f9      	ldr	r1, [r7, #12]
 8004892:	430b      	orrs	r3, r1
 8004894:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	695b      	ldr	r3, [r3, #20]
 800489c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	699a      	ldr	r2, [r3, #24]
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	430a      	orrs	r2, r1
 80048aa:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	69db      	ldr	r3, [r3, #28]
 80048b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80048b4:	f040 80e4 	bne.w	8004a80 <UART_SetConfig+0x238>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	4aab      	ldr	r2, [pc, #684]	; (8004b6c <UART_SetConfig+0x324>)
 80048be:	4293      	cmp	r3, r2
 80048c0:	d004      	beq.n	80048cc <UART_SetConfig+0x84>
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	4aaa      	ldr	r2, [pc, #680]	; (8004b70 <UART_SetConfig+0x328>)
 80048c8:	4293      	cmp	r3, r2
 80048ca:	d16c      	bne.n	80049a6 <UART_SetConfig+0x15e>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80048cc:	f7fe f92a 	bl	8002b24 <HAL_RCC_GetPCLK2Freq>
 80048d0:	4602      	mov	r2, r0
 80048d2:	4613      	mov	r3, r2
 80048d4:	009b      	lsls	r3, r3, #2
 80048d6:	4413      	add	r3, r2
 80048d8:	009a      	lsls	r2, r3, #2
 80048da:	441a      	add	r2, r3
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	685b      	ldr	r3, [r3, #4]
 80048e0:	005b      	lsls	r3, r3, #1
 80048e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80048e6:	4aa3      	ldr	r2, [pc, #652]	; (8004b74 <UART_SetConfig+0x32c>)
 80048e8:	fba2 2303 	umull	r2, r3, r2, r3
 80048ec:	095b      	lsrs	r3, r3, #5
 80048ee:	011c      	lsls	r4, r3, #4
 80048f0:	f7fe f918 	bl	8002b24 <HAL_RCC_GetPCLK2Freq>
 80048f4:	4602      	mov	r2, r0
 80048f6:	4613      	mov	r3, r2
 80048f8:	009b      	lsls	r3, r3, #2
 80048fa:	4413      	add	r3, r2
 80048fc:	009a      	lsls	r2, r3, #2
 80048fe:	441a      	add	r2, r3
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	685b      	ldr	r3, [r3, #4]
 8004904:	005b      	lsls	r3, r3, #1
 8004906:	fbb2 f5f3 	udiv	r5, r2, r3
 800490a:	f7fe f90b 	bl	8002b24 <HAL_RCC_GetPCLK2Freq>
 800490e:	4602      	mov	r2, r0
 8004910:	4613      	mov	r3, r2
 8004912:	009b      	lsls	r3, r3, #2
 8004914:	4413      	add	r3, r2
 8004916:	009a      	lsls	r2, r3, #2
 8004918:	441a      	add	r2, r3
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	685b      	ldr	r3, [r3, #4]
 800491e:	005b      	lsls	r3, r3, #1
 8004920:	fbb2 f3f3 	udiv	r3, r2, r3
 8004924:	4a93      	ldr	r2, [pc, #588]	; (8004b74 <UART_SetConfig+0x32c>)
 8004926:	fba2 2303 	umull	r2, r3, r2, r3
 800492a:	095b      	lsrs	r3, r3, #5
 800492c:	2264      	movs	r2, #100	; 0x64
 800492e:	fb02 f303 	mul.w	r3, r2, r3
 8004932:	1aeb      	subs	r3, r5, r3
 8004934:	00db      	lsls	r3, r3, #3
 8004936:	3332      	adds	r3, #50	; 0x32
 8004938:	4a8e      	ldr	r2, [pc, #568]	; (8004b74 <UART_SetConfig+0x32c>)
 800493a:	fba2 2303 	umull	r2, r3, r2, r3
 800493e:	095b      	lsrs	r3, r3, #5
 8004940:	005b      	lsls	r3, r3, #1
 8004942:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004946:	441c      	add	r4, r3
 8004948:	f7fe f8ec 	bl	8002b24 <HAL_RCC_GetPCLK2Freq>
 800494c:	4602      	mov	r2, r0
 800494e:	4613      	mov	r3, r2
 8004950:	009b      	lsls	r3, r3, #2
 8004952:	4413      	add	r3, r2
 8004954:	009a      	lsls	r2, r3, #2
 8004956:	441a      	add	r2, r3
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	685b      	ldr	r3, [r3, #4]
 800495c:	005b      	lsls	r3, r3, #1
 800495e:	fbb2 f5f3 	udiv	r5, r2, r3
 8004962:	f7fe f8df 	bl	8002b24 <HAL_RCC_GetPCLK2Freq>
 8004966:	4602      	mov	r2, r0
 8004968:	4613      	mov	r3, r2
 800496a:	009b      	lsls	r3, r3, #2
 800496c:	4413      	add	r3, r2
 800496e:	009a      	lsls	r2, r3, #2
 8004970:	441a      	add	r2, r3
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	685b      	ldr	r3, [r3, #4]
 8004976:	005b      	lsls	r3, r3, #1
 8004978:	fbb2 f3f3 	udiv	r3, r2, r3
 800497c:	4a7d      	ldr	r2, [pc, #500]	; (8004b74 <UART_SetConfig+0x32c>)
 800497e:	fba2 2303 	umull	r2, r3, r2, r3
 8004982:	095b      	lsrs	r3, r3, #5
 8004984:	2264      	movs	r2, #100	; 0x64
 8004986:	fb02 f303 	mul.w	r3, r2, r3
 800498a:	1aeb      	subs	r3, r5, r3
 800498c:	00db      	lsls	r3, r3, #3
 800498e:	3332      	adds	r3, #50	; 0x32
 8004990:	4a78      	ldr	r2, [pc, #480]	; (8004b74 <UART_SetConfig+0x32c>)
 8004992:	fba2 2303 	umull	r2, r3, r2, r3
 8004996:	095b      	lsrs	r3, r3, #5
 8004998:	f003 0207 	and.w	r2, r3, #7
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	4422      	add	r2, r4
 80049a2:	609a      	str	r2, [r3, #8]
 80049a4:	e154      	b.n	8004c50 <UART_SetConfig+0x408>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80049a6:	f7fe f8a9 	bl	8002afc <HAL_RCC_GetPCLK1Freq>
 80049aa:	4602      	mov	r2, r0
 80049ac:	4613      	mov	r3, r2
 80049ae:	009b      	lsls	r3, r3, #2
 80049b0:	4413      	add	r3, r2
 80049b2:	009a      	lsls	r2, r3, #2
 80049b4:	441a      	add	r2, r3
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	685b      	ldr	r3, [r3, #4]
 80049ba:	005b      	lsls	r3, r3, #1
 80049bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80049c0:	4a6c      	ldr	r2, [pc, #432]	; (8004b74 <UART_SetConfig+0x32c>)
 80049c2:	fba2 2303 	umull	r2, r3, r2, r3
 80049c6:	095b      	lsrs	r3, r3, #5
 80049c8:	011c      	lsls	r4, r3, #4
 80049ca:	f7fe f897 	bl	8002afc <HAL_RCC_GetPCLK1Freq>
 80049ce:	4602      	mov	r2, r0
 80049d0:	4613      	mov	r3, r2
 80049d2:	009b      	lsls	r3, r3, #2
 80049d4:	4413      	add	r3, r2
 80049d6:	009a      	lsls	r2, r3, #2
 80049d8:	441a      	add	r2, r3
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	685b      	ldr	r3, [r3, #4]
 80049de:	005b      	lsls	r3, r3, #1
 80049e0:	fbb2 f5f3 	udiv	r5, r2, r3
 80049e4:	f7fe f88a 	bl	8002afc <HAL_RCC_GetPCLK1Freq>
 80049e8:	4602      	mov	r2, r0
 80049ea:	4613      	mov	r3, r2
 80049ec:	009b      	lsls	r3, r3, #2
 80049ee:	4413      	add	r3, r2
 80049f0:	009a      	lsls	r2, r3, #2
 80049f2:	441a      	add	r2, r3
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	685b      	ldr	r3, [r3, #4]
 80049f8:	005b      	lsls	r3, r3, #1
 80049fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80049fe:	4a5d      	ldr	r2, [pc, #372]	; (8004b74 <UART_SetConfig+0x32c>)
 8004a00:	fba2 2303 	umull	r2, r3, r2, r3
 8004a04:	095b      	lsrs	r3, r3, #5
 8004a06:	2264      	movs	r2, #100	; 0x64
 8004a08:	fb02 f303 	mul.w	r3, r2, r3
 8004a0c:	1aeb      	subs	r3, r5, r3
 8004a0e:	00db      	lsls	r3, r3, #3
 8004a10:	3332      	adds	r3, #50	; 0x32
 8004a12:	4a58      	ldr	r2, [pc, #352]	; (8004b74 <UART_SetConfig+0x32c>)
 8004a14:	fba2 2303 	umull	r2, r3, r2, r3
 8004a18:	095b      	lsrs	r3, r3, #5
 8004a1a:	005b      	lsls	r3, r3, #1
 8004a1c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004a20:	441c      	add	r4, r3
 8004a22:	f7fe f86b 	bl	8002afc <HAL_RCC_GetPCLK1Freq>
 8004a26:	4602      	mov	r2, r0
 8004a28:	4613      	mov	r3, r2
 8004a2a:	009b      	lsls	r3, r3, #2
 8004a2c:	4413      	add	r3, r2
 8004a2e:	009a      	lsls	r2, r3, #2
 8004a30:	441a      	add	r2, r3
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	685b      	ldr	r3, [r3, #4]
 8004a36:	005b      	lsls	r3, r3, #1
 8004a38:	fbb2 f5f3 	udiv	r5, r2, r3
 8004a3c:	f7fe f85e 	bl	8002afc <HAL_RCC_GetPCLK1Freq>
 8004a40:	4602      	mov	r2, r0
 8004a42:	4613      	mov	r3, r2
 8004a44:	009b      	lsls	r3, r3, #2
 8004a46:	4413      	add	r3, r2
 8004a48:	009a      	lsls	r2, r3, #2
 8004a4a:	441a      	add	r2, r3
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	685b      	ldr	r3, [r3, #4]
 8004a50:	005b      	lsls	r3, r3, #1
 8004a52:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a56:	4a47      	ldr	r2, [pc, #284]	; (8004b74 <UART_SetConfig+0x32c>)
 8004a58:	fba2 2303 	umull	r2, r3, r2, r3
 8004a5c:	095b      	lsrs	r3, r3, #5
 8004a5e:	2264      	movs	r2, #100	; 0x64
 8004a60:	fb02 f303 	mul.w	r3, r2, r3
 8004a64:	1aeb      	subs	r3, r5, r3
 8004a66:	00db      	lsls	r3, r3, #3
 8004a68:	3332      	adds	r3, #50	; 0x32
 8004a6a:	4a42      	ldr	r2, [pc, #264]	; (8004b74 <UART_SetConfig+0x32c>)
 8004a6c:	fba2 2303 	umull	r2, r3, r2, r3
 8004a70:	095b      	lsrs	r3, r3, #5
 8004a72:	f003 0207 	and.w	r2, r3, #7
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	4422      	add	r2, r4
 8004a7c:	609a      	str	r2, [r3, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 8004a7e:	e0e7      	b.n	8004c50 <UART_SetConfig+0x408>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	4a39      	ldr	r2, [pc, #228]	; (8004b6c <UART_SetConfig+0x324>)
 8004a86:	4293      	cmp	r3, r2
 8004a88:	d004      	beq.n	8004a94 <UART_SetConfig+0x24c>
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	4a38      	ldr	r2, [pc, #224]	; (8004b70 <UART_SetConfig+0x328>)
 8004a90:	4293      	cmp	r3, r2
 8004a92:	d171      	bne.n	8004b78 <UART_SetConfig+0x330>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8004a94:	f7fe f846 	bl	8002b24 <HAL_RCC_GetPCLK2Freq>
 8004a98:	4602      	mov	r2, r0
 8004a9a:	4613      	mov	r3, r2
 8004a9c:	009b      	lsls	r3, r3, #2
 8004a9e:	4413      	add	r3, r2
 8004aa0:	009a      	lsls	r2, r3, #2
 8004aa2:	441a      	add	r2, r3
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	685b      	ldr	r3, [r3, #4]
 8004aa8:	009b      	lsls	r3, r3, #2
 8004aaa:	fbb2 f3f3 	udiv	r3, r2, r3
 8004aae:	4a31      	ldr	r2, [pc, #196]	; (8004b74 <UART_SetConfig+0x32c>)
 8004ab0:	fba2 2303 	umull	r2, r3, r2, r3
 8004ab4:	095b      	lsrs	r3, r3, #5
 8004ab6:	011c      	lsls	r4, r3, #4
 8004ab8:	f7fe f834 	bl	8002b24 <HAL_RCC_GetPCLK2Freq>
 8004abc:	4602      	mov	r2, r0
 8004abe:	4613      	mov	r3, r2
 8004ac0:	009b      	lsls	r3, r3, #2
 8004ac2:	4413      	add	r3, r2
 8004ac4:	009a      	lsls	r2, r3, #2
 8004ac6:	441a      	add	r2, r3
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	685b      	ldr	r3, [r3, #4]
 8004acc:	009b      	lsls	r3, r3, #2
 8004ace:	fbb2 f5f3 	udiv	r5, r2, r3
 8004ad2:	f7fe f827 	bl	8002b24 <HAL_RCC_GetPCLK2Freq>
 8004ad6:	4602      	mov	r2, r0
 8004ad8:	4613      	mov	r3, r2
 8004ada:	009b      	lsls	r3, r3, #2
 8004adc:	4413      	add	r3, r2
 8004ade:	009a      	lsls	r2, r3, #2
 8004ae0:	441a      	add	r2, r3
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	685b      	ldr	r3, [r3, #4]
 8004ae6:	009b      	lsls	r3, r3, #2
 8004ae8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004aec:	4a21      	ldr	r2, [pc, #132]	; (8004b74 <UART_SetConfig+0x32c>)
 8004aee:	fba2 2303 	umull	r2, r3, r2, r3
 8004af2:	095b      	lsrs	r3, r3, #5
 8004af4:	2264      	movs	r2, #100	; 0x64
 8004af6:	fb02 f303 	mul.w	r3, r2, r3
 8004afa:	1aeb      	subs	r3, r5, r3
 8004afc:	011b      	lsls	r3, r3, #4
 8004afe:	3332      	adds	r3, #50	; 0x32
 8004b00:	4a1c      	ldr	r2, [pc, #112]	; (8004b74 <UART_SetConfig+0x32c>)
 8004b02:	fba2 2303 	umull	r2, r3, r2, r3
 8004b06:	095b      	lsrs	r3, r3, #5
 8004b08:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004b0c:	441c      	add	r4, r3
 8004b0e:	f7fe f809 	bl	8002b24 <HAL_RCC_GetPCLK2Freq>
 8004b12:	4602      	mov	r2, r0
 8004b14:	4613      	mov	r3, r2
 8004b16:	009b      	lsls	r3, r3, #2
 8004b18:	4413      	add	r3, r2
 8004b1a:	009a      	lsls	r2, r3, #2
 8004b1c:	441a      	add	r2, r3
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	685b      	ldr	r3, [r3, #4]
 8004b22:	009b      	lsls	r3, r3, #2
 8004b24:	fbb2 f5f3 	udiv	r5, r2, r3
 8004b28:	f7fd fffc 	bl	8002b24 <HAL_RCC_GetPCLK2Freq>
 8004b2c:	4602      	mov	r2, r0
 8004b2e:	4613      	mov	r3, r2
 8004b30:	009b      	lsls	r3, r3, #2
 8004b32:	4413      	add	r3, r2
 8004b34:	009a      	lsls	r2, r3, #2
 8004b36:	441a      	add	r2, r3
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	685b      	ldr	r3, [r3, #4]
 8004b3c:	009b      	lsls	r3, r3, #2
 8004b3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b42:	4a0c      	ldr	r2, [pc, #48]	; (8004b74 <UART_SetConfig+0x32c>)
 8004b44:	fba2 2303 	umull	r2, r3, r2, r3
 8004b48:	095b      	lsrs	r3, r3, #5
 8004b4a:	2264      	movs	r2, #100	; 0x64
 8004b4c:	fb02 f303 	mul.w	r3, r2, r3
 8004b50:	1aeb      	subs	r3, r5, r3
 8004b52:	011b      	lsls	r3, r3, #4
 8004b54:	3332      	adds	r3, #50	; 0x32
 8004b56:	4a07      	ldr	r2, [pc, #28]	; (8004b74 <UART_SetConfig+0x32c>)
 8004b58:	fba2 2303 	umull	r2, r3, r2, r3
 8004b5c:	095b      	lsrs	r3, r3, #5
 8004b5e:	f003 020f 	and.w	r2, r3, #15
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	4422      	add	r2, r4
 8004b68:	609a      	str	r2, [r3, #8]
 8004b6a:	e071      	b.n	8004c50 <UART_SetConfig+0x408>
 8004b6c:	40011000 	.word	0x40011000
 8004b70:	40011400 	.word	0x40011400
 8004b74:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8004b78:	f7fd ffc0 	bl	8002afc <HAL_RCC_GetPCLK1Freq>
 8004b7c:	4602      	mov	r2, r0
 8004b7e:	4613      	mov	r3, r2
 8004b80:	009b      	lsls	r3, r3, #2
 8004b82:	4413      	add	r3, r2
 8004b84:	009a      	lsls	r2, r3, #2
 8004b86:	441a      	add	r2, r3
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	685b      	ldr	r3, [r3, #4]
 8004b8c:	009b      	lsls	r3, r3, #2
 8004b8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b92:	4a31      	ldr	r2, [pc, #196]	; (8004c58 <UART_SetConfig+0x410>)
 8004b94:	fba2 2303 	umull	r2, r3, r2, r3
 8004b98:	095b      	lsrs	r3, r3, #5
 8004b9a:	011c      	lsls	r4, r3, #4
 8004b9c:	f7fd ffae 	bl	8002afc <HAL_RCC_GetPCLK1Freq>
 8004ba0:	4602      	mov	r2, r0
 8004ba2:	4613      	mov	r3, r2
 8004ba4:	009b      	lsls	r3, r3, #2
 8004ba6:	4413      	add	r3, r2
 8004ba8:	009a      	lsls	r2, r3, #2
 8004baa:	441a      	add	r2, r3
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	685b      	ldr	r3, [r3, #4]
 8004bb0:	009b      	lsls	r3, r3, #2
 8004bb2:	fbb2 f5f3 	udiv	r5, r2, r3
 8004bb6:	f7fd ffa1 	bl	8002afc <HAL_RCC_GetPCLK1Freq>
 8004bba:	4602      	mov	r2, r0
 8004bbc:	4613      	mov	r3, r2
 8004bbe:	009b      	lsls	r3, r3, #2
 8004bc0:	4413      	add	r3, r2
 8004bc2:	009a      	lsls	r2, r3, #2
 8004bc4:	441a      	add	r2, r3
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	685b      	ldr	r3, [r3, #4]
 8004bca:	009b      	lsls	r3, r3, #2
 8004bcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bd0:	4a21      	ldr	r2, [pc, #132]	; (8004c58 <UART_SetConfig+0x410>)
 8004bd2:	fba2 2303 	umull	r2, r3, r2, r3
 8004bd6:	095b      	lsrs	r3, r3, #5
 8004bd8:	2264      	movs	r2, #100	; 0x64
 8004bda:	fb02 f303 	mul.w	r3, r2, r3
 8004bde:	1aeb      	subs	r3, r5, r3
 8004be0:	011b      	lsls	r3, r3, #4
 8004be2:	3332      	adds	r3, #50	; 0x32
 8004be4:	4a1c      	ldr	r2, [pc, #112]	; (8004c58 <UART_SetConfig+0x410>)
 8004be6:	fba2 2303 	umull	r2, r3, r2, r3
 8004bea:	095b      	lsrs	r3, r3, #5
 8004bec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004bf0:	441c      	add	r4, r3
 8004bf2:	f7fd ff83 	bl	8002afc <HAL_RCC_GetPCLK1Freq>
 8004bf6:	4602      	mov	r2, r0
 8004bf8:	4613      	mov	r3, r2
 8004bfa:	009b      	lsls	r3, r3, #2
 8004bfc:	4413      	add	r3, r2
 8004bfe:	009a      	lsls	r2, r3, #2
 8004c00:	441a      	add	r2, r3
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	685b      	ldr	r3, [r3, #4]
 8004c06:	009b      	lsls	r3, r3, #2
 8004c08:	fbb2 f5f3 	udiv	r5, r2, r3
 8004c0c:	f7fd ff76 	bl	8002afc <HAL_RCC_GetPCLK1Freq>
 8004c10:	4602      	mov	r2, r0
 8004c12:	4613      	mov	r3, r2
 8004c14:	009b      	lsls	r3, r3, #2
 8004c16:	4413      	add	r3, r2
 8004c18:	009a      	lsls	r2, r3, #2
 8004c1a:	441a      	add	r2, r3
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	685b      	ldr	r3, [r3, #4]
 8004c20:	009b      	lsls	r3, r3, #2
 8004c22:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c26:	4a0c      	ldr	r2, [pc, #48]	; (8004c58 <UART_SetConfig+0x410>)
 8004c28:	fba2 2303 	umull	r2, r3, r2, r3
 8004c2c:	095b      	lsrs	r3, r3, #5
 8004c2e:	2264      	movs	r2, #100	; 0x64
 8004c30:	fb02 f303 	mul.w	r3, r2, r3
 8004c34:	1aeb      	subs	r3, r5, r3
 8004c36:	011b      	lsls	r3, r3, #4
 8004c38:	3332      	adds	r3, #50	; 0x32
 8004c3a:	4a07      	ldr	r2, [pc, #28]	; (8004c58 <UART_SetConfig+0x410>)
 8004c3c:	fba2 2303 	umull	r2, r3, r2, r3
 8004c40:	095b      	lsrs	r3, r3, #5
 8004c42:	f003 020f 	and.w	r2, r3, #15
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	4422      	add	r2, r4
 8004c4c:	609a      	str	r2, [r3, #8]
}
 8004c4e:	e7ff      	b.n	8004c50 <UART_SetConfig+0x408>
 8004c50:	bf00      	nop
 8004c52:	3710      	adds	r7, #16
 8004c54:	46bd      	mov	sp, r7
 8004c56:	bdb0      	pop	{r4, r5, r7, pc}
 8004c58:	51eb851f 	.word	0x51eb851f

08004c5c <drive_init>:
//drive_init
// 走行系の変数の初期化
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void drive_init(void){
 8004c5c:	b480      	push	{r7}
 8004c5e:	af00      	add	r7, sp, #0
	MF.FLAGS = 0;
 8004c60:	4b05      	ldr	r3, [pc, #20]	; (8004c78 <drive_init+0x1c>)
 8004c62:	2200      	movs	r2, #0
 8004c64:	801a      	strh	r2, [r3, #0]
	MF2.FLAGS2 = 0;
 8004c66:	4b05      	ldr	r3, [pc, #20]	; (8004c7c <drive_init+0x20>)
 8004c68:	2200      	movs	r2, #0
 8004c6a:	801a      	strh	r2, [r3, #0]
}
 8004c6c:	bf00      	nop
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c74:	4770      	bx	lr
 8004c76:	bf00      	nop
 8004c78:	20000f68 	.word	0x20000f68
 8004c7c:	20000f64 	.word	0x20000f64

08004c80 <drive_ready>:
//drive_ready
// 走行前のLED点滅&ジャイロのドリフト計算
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void drive_ready(void){
 8004c80:	b580      	push	{r7, lr}
 8004c82:	af00      	add	r7, sp, #0
	  while(ad_fl <= WALL_BASE_FL){
 8004c84:	e00f      	b.n	8004ca6 <drive_ready+0x26>
		  led_write(1, 1, 1);
 8004c86:	2201      	movs	r2, #1
 8004c88:	2101      	movs	r1, #1
 8004c8a:	2001      	movs	r0, #1
 8004c8c:	f00c fe5a 	bl	8011944 <led_write>
		  HAL_Delay(200);
 8004c90:	20c8      	movs	r0, #200	; 0xc8
 8004c92:	f7fc f9c3 	bl	800101c <HAL_Delay>
		  led_write(0, 0, 0);
 8004c96:	2200      	movs	r2, #0
 8004c98:	2100      	movs	r1, #0
 8004c9a:	2000      	movs	r0, #0
 8004c9c:	f00c fe52 	bl	8011944 <led_write>
		  HAL_Delay(200);
 8004ca0:	20c8      	movs	r0, #200	; 0xc8
 8004ca2:	f7fc f9bb 	bl	800101c <HAL_Delay>
	  while(ad_fl <= WALL_BASE_FL){
 8004ca6:	4b09      	ldr	r3, [pc, #36]	; (8004ccc <drive_ready+0x4c>)
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	2bc8      	cmp	r3, #200	; 0xc8
 8004cac:	d9eb      	bls.n	8004c86 <drive_ready+0x6>
	  }
	  MF2.FLAG.GDRIFT = 1;
 8004cae:	4a08      	ldr	r2, [pc, #32]	; (8004cd0 <drive_ready+0x50>)
 8004cb0:	8813      	ldrh	r3, [r2, #0]
 8004cb2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004cb6:	8013      	strh	r3, [r2, #0]
	  HAL_Delay(2000);
 8004cb8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8004cbc:	f7fc f9ae 	bl	800101c <HAL_Delay>
	  degree_z = 0;
 8004cc0:	4b04      	ldr	r3, [pc, #16]	; (8004cd4 <drive_ready+0x54>)
 8004cc2:	f04f 0200 	mov.w	r2, #0
 8004cc6:	601a      	str	r2, [r3, #0]
}
 8004cc8:	bf00      	nop
 8004cca:	bd80      	pop	{r7, pc}
 8004ccc:	20000d54 	.word	0x20000d54
 8004cd0:	20000f64 	.word	0x20000f64
 8004cd4:	20000b5c 	.word	0x20000b5c

08004cd8 <drive_start>:
//drive_start
// 走行開始前に走行距離と機体角度を初期化
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void drive_start(void){
 8004cd8:	b480      	push	{r7}
 8004cda:	af00      	add	r7, sp, #0
	dist_l = dist_r = 0;		//走行距離の初期化
 8004cdc:	f04f 0300 	mov.w	r3, #0
 8004ce0:	4a0f      	ldr	r2, [pc, #60]	; (8004d20 <drive_start+0x48>)
 8004ce2:	6013      	str	r3, [r2, #0]
 8004ce4:	4a0f      	ldr	r2, [pc, #60]	; (8004d24 <drive_start+0x4c>)
 8004ce6:	6013      	str	r3, [r2, #0]
	if(!MF2.FLAG.HACCEL) target_speed_l = target_speed_r = 0;		//モータ出力の初期化
 8004ce8:	4b0f      	ldr	r3, [pc, #60]	; (8004d28 <drive_start+0x50>)
 8004cea:	881b      	ldrh	r3, [r3, #0]
 8004cec:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8004cf0:	b2db      	uxtb	r3, r3
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d105      	bne.n	8004d02 <drive_start+0x2a>
 8004cf6:	f04f 0300 	mov.w	r3, #0
 8004cfa:	4a0c      	ldr	r2, [pc, #48]	; (8004d2c <drive_start+0x54>)
 8004cfc:	6013      	str	r3, [r2, #0]
 8004cfe:	4a0c      	ldr	r2, [pc, #48]	; (8004d30 <drive_start+0x58>)
 8004d00:	6013      	str	r3, [r2, #0]
	MF.FLAG.DRV = 1;
 8004d02:	4a0c      	ldr	r2, [pc, #48]	; (8004d34 <drive_start+0x5c>)
 8004d04:	8813      	ldrh	r3, [r2, #0]
 8004d06:	f043 0302 	orr.w	r3, r3, #2
 8004d0a:	8013      	strh	r3, [r2, #0]
	MF.FLAG.SPD = 1;
 8004d0c:	4a09      	ldr	r2, [pc, #36]	; (8004d34 <drive_start+0x5c>)
 8004d0e:	8813      	ldrh	r3, [r2, #0]
 8004d10:	f043 0304 	orr.w	r3, r3, #4
 8004d14:	8013      	strh	r3, [r2, #0]
}
 8004d16:	bf00      	nop
 8004d18:	46bd      	mov	sp, r7
 8004d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1e:	4770      	bx	lr
 8004d20:	20000aec 	.word	0x20000aec
 8004d24:	200015c4 	.word	0x200015c4
 8004d28:	20000f64 	.word	0x20000f64
 8004d2c:	200001a0 	.word	0x200001a0
 8004d30:	20000bfc 	.word	0x20000bfc
 8004d34:	20000f68 	.word	0x20000f68

08004d38 <drive_stop>:
//drive_stop
// 走行を終了する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void drive_stop(void){
 8004d38:	b480      	push	{r7}
 8004d3a:	af00      	add	r7, sp, #0
	dist_l = dist_r = 0;		//a走行距離の初期化
 8004d3c:	f04f 0300 	mov.w	r3, #0
 8004d40:	4a0c      	ldr	r2, [pc, #48]	; (8004d74 <drive_stop+0x3c>)
 8004d42:	6013      	str	r3, [r2, #0]
 8004d44:	4a0c      	ldr	r2, [pc, #48]	; (8004d78 <drive_stop+0x40>)
 8004d46:	6013      	str	r3, [r2, #0]
	pulse_l = pulse_r = 0;		//aモータ出力の初期化
 8004d48:	f04f 0300 	mov.w	r3, #0
 8004d4c:	4a0b      	ldr	r2, [pc, #44]	; (8004d7c <drive_stop+0x44>)
 8004d4e:	6013      	str	r3, [r2, #0]
 8004d50:	4a0b      	ldr	r2, [pc, #44]	; (8004d80 <drive_stop+0x48>)
 8004d52:	6013      	str	r3, [r2, #0]
	MF.FLAG.DRV = 0;
 8004d54:	4a0b      	ldr	r2, [pc, #44]	; (8004d84 <drive_stop+0x4c>)
 8004d56:	8813      	ldrh	r3, [r2, #0]
 8004d58:	f36f 0341 	bfc	r3, #1, #1
 8004d5c:	8013      	strh	r3, [r2, #0]
	MF.FLAG.SPD = 0;
 8004d5e:	4a09      	ldr	r2, [pc, #36]	; (8004d84 <drive_stop+0x4c>)
 8004d60:	8813      	ldrh	r3, [r2, #0]
 8004d62:	f36f 0382 	bfc	r3, #2, #1
 8004d66:	8013      	strh	r3, [r2, #0]
}
 8004d68:	bf00      	nop
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d70:	4770      	bx	lr
 8004d72:	bf00      	nop
 8004d74:	20000aec 	.word	0x20000aec
 8004d78:	200015c4 	.word	0x200015c4
 8004d7c:	20000780 	.word	0x20000780
 8004d80:	20000ba8 	.word	0x20000ba8
 8004d84:	20000f68 	.word	0x20000f68

08004d88 <control_start>:
//control_start
// wallとgyroの姿勢制御を開始する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void control_start(){
 8004d88:	b480      	push	{r7}
 8004d8a:	af00      	add	r7, sp, #0
	MF.FLAG.WCTRL = 1;										//wall制御を有効にする
 8004d8c:	4a0f      	ldr	r2, [pc, #60]	; (8004dcc <control_start+0x44>)
 8004d8e:	8813      	ldrh	r3, [r2, #0]
 8004d90:	f043 0308 	orr.w	r3, r3, #8
 8004d94:	8013      	strh	r3, [r2, #0]
	if(run_mode == 5 && MF2.FLAG.TEMP)MF.FLAG.WCTRL = 0;
 8004d96:	4b0e      	ldr	r3, [pc, #56]	; (8004dd0 <control_start+0x48>)
 8004d98:	781b      	ldrb	r3, [r3, #0]
 8004d9a:	b2db      	uxtb	r3, r3
 8004d9c:	2b05      	cmp	r3, #5
 8004d9e:	d10b      	bne.n	8004db8 <control_start+0x30>
 8004da0:	4b0c      	ldr	r3, [pc, #48]	; (8004dd4 <control_start+0x4c>)
 8004da2:	881b      	ldrh	r3, [r3, #0]
 8004da4:	f3c3 2340 	ubfx	r3, r3, #9, #1
 8004da8:	b2db      	uxtb	r3, r3
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d004      	beq.n	8004db8 <control_start+0x30>
 8004dae:	4a07      	ldr	r2, [pc, #28]	; (8004dcc <control_start+0x44>)
 8004db0:	8813      	ldrh	r3, [r2, #0]
 8004db2:	f36f 03c3 	bfc	r3, #3, #1
 8004db6:	8013      	strh	r3, [r2, #0]
	MF.FLAG.GCTRL = 1;										//gyro制御を有効にする
 8004db8:	4a04      	ldr	r2, [pc, #16]	; (8004dcc <control_start+0x44>)
 8004dba:	8813      	ldrh	r3, [r2, #0]
 8004dbc:	f043 0310 	orr.w	r3, r3, #16
 8004dc0:	8013      	strh	r3, [r2, #0]
}
 8004dc2:	bf00      	nop
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dca:	4770      	bx	lr
 8004dcc:	20000f68 	.word	0x20000f68
 8004dd0:	20000456 	.word	0x20000456
 8004dd4:	20000f64 	.word	0x20000f64

08004dd8 <control_stop>:
//control_stop
// wallとgyroの姿勢制御を停止する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void control_stop(){
 8004dd8:	b480      	push	{r7}
 8004dda:	af00      	add	r7, sp, #0
	MF.FLAG.WCTRL = 0;										//wall制御を無効にする
 8004ddc:	4a07      	ldr	r2, [pc, #28]	; (8004dfc <control_stop+0x24>)
 8004dde:	8813      	ldrh	r3, [r2, #0]
 8004de0:	f36f 03c3 	bfc	r3, #3, #1
 8004de4:	8013      	strh	r3, [r2, #0]
	MF.FLAG.GCTRL = 0;										//gyro制御を無効にする
 8004de6:	4a05      	ldr	r2, [pc, #20]	; (8004dfc <control_stop+0x24>)
 8004de8:	8813      	ldrh	r3, [r2, #0]
 8004dea:	f36f 1304 	bfc	r3, #4, #1
 8004dee:	8013      	strh	r3, [r2, #0]
}
 8004df0:	bf00      	nop
 8004df2:	46bd      	mov	sp, r7
 8004df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df8:	4770      	bx	lr
 8004dfa:	bf00      	nop
 8004dfc:	20000f68 	.word	0x20000f68

08004e00 <drive_dir>:
//drive_dir
// wheel turn dir for each wheel
// 引数:1車輪選択(0=>L, 1=>R), 2回転方向選択(0=>CW, 1=>CWW, 2=>ShortBrake, 3=>free)
// 戻り値: なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void drive_dir(uint8_t wheel, uint8_t dir){
 8004e00:	b580      	push	{r7, lr}
 8004e02:	b082      	sub	sp, #8
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	4603      	mov	r3, r0
 8004e08:	460a      	mov	r2, r1
 8004e0a:	71fb      	strb	r3, [r7, #7]
 8004e0c:	4613      	mov	r3, r2
 8004e0e:	71bb      	strb	r3, [r7, #6]
	if(wheel == 0){
 8004e10:	79fb      	ldrb	r3, [r7, #7]
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d13e      	bne.n	8004e94 <drive_dir+0x94>
		if(dir == 0){
 8004e16:	79bb      	ldrb	r3, [r7, #6]
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d10f      	bne.n	8004e3c <drive_dir+0x3c>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_SET);		//L_CW
 8004e1c:	2201      	movs	r2, #1
 8004e1e:	2120      	movs	r1, #32
 8004e20:	483f      	ldr	r0, [pc, #252]	; (8004f20 <drive_dir+0x120>)
 8004e22:	f7fd fa6f 	bl	8002304 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET);	//L_CCW
 8004e26:	2200      	movs	r2, #0
 8004e28:	2110      	movs	r1, #16
 8004e2a:	483d      	ldr	r0, [pc, #244]	; (8004f20 <drive_dir+0x120>)
 8004e2c:	f7fd fa6a 	bl	8002304 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);		//STBY
 8004e30:	2201      	movs	r2, #1
 8004e32:	2101      	movs	r1, #1
 8004e34:	483b      	ldr	r0, [pc, #236]	; (8004f24 <drive_dir+0x124>)
 8004e36:	f7fd fa65 	bl	8002304 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);		//STBY
		}else{
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);	//STBY
		}
	}
}
 8004e3a:	e06c      	b.n	8004f16 <drive_dir+0x116>
		}else if(dir == 1){
 8004e3c:	79bb      	ldrb	r3, [r7, #6]
 8004e3e:	2b01      	cmp	r3, #1
 8004e40:	d10f      	bne.n	8004e62 <drive_dir+0x62>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET);	//L_CW
 8004e42:	2200      	movs	r2, #0
 8004e44:	2120      	movs	r1, #32
 8004e46:	4836      	ldr	r0, [pc, #216]	; (8004f20 <drive_dir+0x120>)
 8004e48:	f7fd fa5c 	bl	8002304 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_SET);		//L_CCW
 8004e4c:	2201      	movs	r2, #1
 8004e4e:	2110      	movs	r1, #16
 8004e50:	4833      	ldr	r0, [pc, #204]	; (8004f20 <drive_dir+0x120>)
 8004e52:	f7fd fa57 	bl	8002304 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);		//STBY
 8004e56:	2201      	movs	r2, #1
 8004e58:	2101      	movs	r1, #1
 8004e5a:	4832      	ldr	r0, [pc, #200]	; (8004f24 <drive_dir+0x124>)
 8004e5c:	f7fd fa52 	bl	8002304 <HAL_GPIO_WritePin>
}
 8004e60:	e059      	b.n	8004f16 <drive_dir+0x116>
		}else if(dir == 2){
 8004e62:	79bb      	ldrb	r3, [r7, #6]
 8004e64:	2b02      	cmp	r3, #2
 8004e66:	d10f      	bne.n	8004e88 <drive_dir+0x88>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_SET);		//L_CW
 8004e68:	2201      	movs	r2, #1
 8004e6a:	2120      	movs	r1, #32
 8004e6c:	482c      	ldr	r0, [pc, #176]	; (8004f20 <drive_dir+0x120>)
 8004e6e:	f7fd fa49 	bl	8002304 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_SET);		//L_CCW
 8004e72:	2201      	movs	r2, #1
 8004e74:	2110      	movs	r1, #16
 8004e76:	482a      	ldr	r0, [pc, #168]	; (8004f20 <drive_dir+0x120>)
 8004e78:	f7fd fa44 	bl	8002304 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);		//STBY
 8004e7c:	2201      	movs	r2, #1
 8004e7e:	2101      	movs	r1, #1
 8004e80:	4828      	ldr	r0, [pc, #160]	; (8004f24 <drive_dir+0x124>)
 8004e82:	f7fd fa3f 	bl	8002304 <HAL_GPIO_WritePin>
}
 8004e86:	e046      	b.n	8004f16 <drive_dir+0x116>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);	//STBY
 8004e88:	2200      	movs	r2, #0
 8004e8a:	2101      	movs	r1, #1
 8004e8c:	4825      	ldr	r0, [pc, #148]	; (8004f24 <drive_dir+0x124>)
 8004e8e:	f7fd fa39 	bl	8002304 <HAL_GPIO_WritePin>
}
 8004e92:	e040      	b.n	8004f16 <drive_dir+0x116>
		if(dir == 0){
 8004e94:	79bb      	ldrb	r3, [r7, #6]
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d110      	bne.n	8004ebc <drive_dir+0xbc>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);		//R_CW
 8004e9a:	2201      	movs	r2, #1
 8004e9c:	2102      	movs	r1, #2
 8004e9e:	4821      	ldr	r0, [pc, #132]	; (8004f24 <drive_dir+0x124>)
 8004ea0:	f7fd fa30 	bl	8002304 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);	//R_CCW
 8004ea4:	2200      	movs	r2, #0
 8004ea6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004eaa:	481e      	ldr	r0, [pc, #120]	; (8004f24 <drive_dir+0x124>)
 8004eac:	f7fd fa2a 	bl	8002304 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);		//STBY
 8004eb0:	2201      	movs	r2, #1
 8004eb2:	2101      	movs	r1, #1
 8004eb4:	481b      	ldr	r0, [pc, #108]	; (8004f24 <drive_dir+0x124>)
 8004eb6:	f7fd fa25 	bl	8002304 <HAL_GPIO_WritePin>
}
 8004eba:	e02c      	b.n	8004f16 <drive_dir+0x116>
		}else if(dir == 1){
 8004ebc:	79bb      	ldrb	r3, [r7, #6]
 8004ebe:	2b01      	cmp	r3, #1
 8004ec0:	d110      	bne.n	8004ee4 <drive_dir+0xe4>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);	//R_CW
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	2102      	movs	r1, #2
 8004ec6:	4817      	ldr	r0, [pc, #92]	; (8004f24 <drive_dir+0x124>)
 8004ec8:	f7fd fa1c 	bl	8002304 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);	//R_CCW
 8004ecc:	2201      	movs	r2, #1
 8004ece:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004ed2:	4814      	ldr	r0, [pc, #80]	; (8004f24 <drive_dir+0x124>)
 8004ed4:	f7fd fa16 	bl	8002304 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);		//STBY
 8004ed8:	2201      	movs	r2, #1
 8004eda:	2101      	movs	r1, #1
 8004edc:	4811      	ldr	r0, [pc, #68]	; (8004f24 <drive_dir+0x124>)
 8004ede:	f7fd fa11 	bl	8002304 <HAL_GPIO_WritePin>
}
 8004ee2:	e018      	b.n	8004f16 <drive_dir+0x116>
		}else if(dir == 2){
 8004ee4:	79bb      	ldrb	r3, [r7, #6]
 8004ee6:	2b02      	cmp	r3, #2
 8004ee8:	d110      	bne.n	8004f0c <drive_dir+0x10c>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);		//R_CW
 8004eea:	2201      	movs	r2, #1
 8004eec:	2102      	movs	r1, #2
 8004eee:	480d      	ldr	r0, [pc, #52]	; (8004f24 <drive_dir+0x124>)
 8004ef0:	f7fd fa08 	bl	8002304 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);	//R_CCW
 8004ef4:	2201      	movs	r2, #1
 8004ef6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004efa:	480a      	ldr	r0, [pc, #40]	; (8004f24 <drive_dir+0x124>)
 8004efc:	f7fd fa02 	bl	8002304 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);		//STBY
 8004f00:	2201      	movs	r2, #1
 8004f02:	2101      	movs	r1, #1
 8004f04:	4807      	ldr	r0, [pc, #28]	; (8004f24 <drive_dir+0x124>)
 8004f06:	f7fd f9fd 	bl	8002304 <HAL_GPIO_WritePin>
}
 8004f0a:	e004      	b.n	8004f16 <drive_dir+0x116>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);	//STBY
 8004f0c:	2200      	movs	r2, #0
 8004f0e:	2101      	movs	r1, #1
 8004f10:	4804      	ldr	r0, [pc, #16]	; (8004f24 <drive_dir+0x124>)
 8004f12:	f7fd f9f7 	bl	8002304 <HAL_GPIO_WritePin>
}
 8004f16:	bf00      	nop
 8004f18:	3708      	adds	r7, #8
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	bd80      	pop	{r7, pc}
 8004f1e:	bf00      	nop
 8004f20:	40020800 	.word	0x40020800
 8004f24:	40020400 	.word	0x40020400

08004f28 <run_select>:
//run_select
// a走行速度を選択する
// a引数：なし
// a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void run_select(){
 8004f28:	b580      	push	{r7, lr}
 8004f2a:	b082      	sub	sp, #8
 8004f2c:	af00      	add	r7, sp, #0
	full_led_write(YELLOW);
 8004f2e:	2006      	movs	r0, #6
 8004f30:	f00c fd42 	bl	80119b8 <full_led_write>
	int mode = 0;
 8004f34:	2300      	movs	r3, #0
 8004f36:	607b      	str	r3, [r7, #4]

	while(1){
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	b2db      	uxtb	r3, r3
 8004f3c:	f003 0301 	and.w	r3, r3, #1
 8004f40:	b2d8      	uxtb	r0, r3
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	b2db      	uxtb	r3, r3
 8004f46:	f003 0302 	and.w	r3, r3, #2
 8004f4a:	b2d9      	uxtb	r1, r3
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	b2db      	uxtb	r3, r3
 8004f50:	f003 0304 	and.w	r3, r3, #4
 8004f54:	b2db      	uxtb	r3, r3
 8004f56:	461a      	mov	r2, r3
 8004f58:	f00c fcf4 	bl	8011944 <led_write>
		if(dist_r >= 20){
 8004f5c:	4b21      	ldr	r3, [pc, #132]	; (8004fe4 <run_select+0xbc>)
 8004f5e:	edd3 7a00 	vldr	s15, [r3]
 8004f62:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8004f66:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004f6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f6e:	db0f      	blt.n	8004f90 <run_select+0x68>
			  mode++;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	3301      	adds	r3, #1
 8004f74:	607b      	str	r3, [r7, #4]
			  dist_r = 0;
 8004f76:	4b1b      	ldr	r3, [pc, #108]	; (8004fe4 <run_select+0xbc>)
 8004f78:	f04f 0200 	mov.w	r2, #0
 8004f7c:	601a      	str	r2, [r3, #0]
			  if(mode > 7){
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	2b07      	cmp	r3, #7
 8004f82:	dd01      	ble.n	8004f88 <run_select+0x60>
				  mode = 0;
 8004f84:	2300      	movs	r3, #0
 8004f86:	607b      	str	r3, [r7, #4]
			  }
			  printf("Mode : %d\n", mode);
 8004f88:	6879      	ldr	r1, [r7, #4]
 8004f8a:	4817      	ldr	r0, [pc, #92]	; (8004fe8 <run_select+0xc0>)
 8004f8c:	f00d faa8 	bl	80124e0 <iprintf>
		}
		if(dist_r <= -20){
 8004f90:	4b14      	ldr	r3, [pc, #80]	; (8004fe4 <run_select+0xbc>)
 8004f92:	edd3 7a00 	vldr	s15, [r3]
 8004f96:	eebb 7a04 	vmov.f32	s14, #180	; 0xc1a00000 -20.0
 8004f9a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004f9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004fa2:	d80f      	bhi.n	8004fc4 <run_select+0x9c>
			  mode--;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	3b01      	subs	r3, #1
 8004fa8:	607b      	str	r3, [r7, #4]
			  dist_r = 0;
 8004faa:	4b0e      	ldr	r3, [pc, #56]	; (8004fe4 <run_select+0xbc>)
 8004fac:	f04f 0200 	mov.w	r2, #0
 8004fb0:	601a      	str	r2, [r3, #0]
			  if(mode < 0){
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	da01      	bge.n	8004fbc <run_select+0x94>
				  mode = 7;
 8004fb8:	2307      	movs	r3, #7
 8004fba:	607b      	str	r3, [r7, #4]
			  }
			  printf("Mode : %d\n", mode);
 8004fbc:	6879      	ldr	r1, [r7, #4]
 8004fbe:	480a      	ldr	r0, [pc, #40]	; (8004fe8 <run_select+0xc0>)
 8004fc0:	f00d fa8e 	bl	80124e0 <iprintf>
		}
		if(ad_fl >= WALL_BASE_FL){
 8004fc4:	4b09      	ldr	r3, [pc, #36]	; (8004fec <run_select+0xc4>)
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	2bc7      	cmp	r3, #199	; 0xc7
 8004fca:	d9b5      	bls.n	8004f38 <run_select+0x10>
			  run_mode = mode;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	b2da      	uxtb	r2, r3
 8004fd0:	4b07      	ldr	r3, [pc, #28]	; (8004ff0 <run_select+0xc8>)
 8004fd2:	701a      	strb	r2, [r3, #0]
			  full_led_write(BLUEGREEN);
 8004fd4:	2004      	movs	r0, #4
 8004fd6:	f00c fcef 	bl	80119b8 <full_led_write>
			  break;
 8004fda:	bf00      	nop
		}
	}
}
 8004fdc:	bf00      	nop
 8004fde:	3708      	adds	r7, #8
 8004fe0:	46bd      	mov	sp, r7
 8004fe2:	bd80      	pop	{r7, pc}
 8004fe4:	20000aec 	.word	0x20000aec
 8004fe8:	0801371c 	.word	0x0801371c
 8004fec:	20000d54 	.word	0x20000d54
 8004ff0:	20000456 	.word	0x20000456

08004ff4 <driveA>:
//driveA
// 指定距離、指定加速度で加速走行する
// 引数1：accel_p 加速度, 引数2：speed_min_p 最低速度, 引数3：speed_max_p 最高速度, 引数4：dist 走行距離
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void driveA(uint16_t accel_p, uint16_t speed_min_p, uint16_t speed_max_p, uint16_t dist){
 8004ff4:	b590      	push	{r4, r7, lr}
 8004ff6:	b083      	sub	sp, #12
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	4604      	mov	r4, r0
 8004ffc:	4608      	mov	r0, r1
 8004ffe:	4611      	mov	r1, r2
 8005000:	461a      	mov	r2, r3
 8005002:	4623      	mov	r3, r4
 8005004:	80fb      	strh	r3, [r7, #6]
 8005006:	4603      	mov	r3, r0
 8005008:	80bb      	strh	r3, [r7, #4]
 800500a:	460b      	mov	r3, r1
 800500c:	807b      	strh	r3, [r7, #2]
 800500e:	4613      	mov	r3, r2
 8005010:	803b      	strh	r3, [r7, #0]

	speed_min_l = speed_min_r = speed_min_p;
 8005012:	88bb      	ldrh	r3, [r7, #4]
 8005014:	ee07 3a90 	vmov	s15, r3
 8005018:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800501c:	4b27      	ldr	r3, [pc, #156]	; (80050bc <driveA+0xc8>)
 800501e:	edc3 7a00 	vstr	s15, [r3]
 8005022:	4b27      	ldr	r3, [pc, #156]	; (80050c0 <driveA+0xcc>)
 8005024:	edc3 7a00 	vstr	s15, [r3]
	speed_max_l = speed_max_r = speed_max_p;
 8005028:	887b      	ldrh	r3, [r7, #2]
 800502a:	ee07 3a90 	vmov	s15, r3
 800502e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005032:	4b24      	ldr	r3, [pc, #144]	; (80050c4 <driveA+0xd0>)
 8005034:	edc3 7a00 	vstr	s15, [r3]
 8005038:	4b23      	ldr	r3, [pc, #140]	; (80050c8 <driveA+0xd4>)
 800503a:	edc3 7a00 	vstr	s15, [r3]
	accel_l = accel_r = accel_p;							//引数の各パラメータをグローバル変数化
 800503e:	88fb      	ldrh	r3, [r7, #6]
 8005040:	ee07 3a90 	vmov	s15, r3
 8005044:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005048:	4b20      	ldr	r3, [pc, #128]	; (80050cc <driveA+0xd8>)
 800504a:	edc3 7a00 	vstr	s15, [r3]
 800504e:	4b20      	ldr	r3, [pc, #128]	; (80050d0 <driveA+0xdc>)
 8005050:	edc3 7a00 	vstr	s15, [r3]
	if(MF2.FLAG.HACCEL)target_speed_l = target_speed_r = speed_min_p;
 8005054:	4b1f      	ldr	r3, [pc, #124]	; (80050d4 <driveA+0xe0>)
 8005056:	881b      	ldrh	r3, [r3, #0]
 8005058:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800505c:	b2db      	uxtb	r3, r3
 800505e:	2b00      	cmp	r3, #0
 8005060:	d00a      	beq.n	8005078 <driveA+0x84>
 8005062:	88bb      	ldrh	r3, [r7, #4]
 8005064:	ee07 3a90 	vmov	s15, r3
 8005068:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800506c:	4b1a      	ldr	r3, [pc, #104]	; (80050d8 <driveA+0xe4>)
 800506e:	edc3 7a00 	vstr	s15, [r3]
 8005072:	4b1a      	ldr	r3, [pc, #104]	; (80050dc <driveA+0xe8>)
 8005074:	edc3 7a00 	vstr	s15, [r3]

	drive_start();											//走行開始
 8005078:	f7ff fe2e 	bl	8004cd8 <drive_start>

	//----走行----
	while((dist_l < dist) || (dist_r < dist));				//左右のモータが指定距離以上進むまで待機
 800507c:	bf00      	nop
 800507e:	883b      	ldrh	r3, [r7, #0]
 8005080:	ee07 3a90 	vmov	s15, r3
 8005084:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005088:	4b15      	ldr	r3, [pc, #84]	; (80050e0 <driveA+0xec>)
 800508a:	edd3 7a00 	vldr	s15, [r3]
 800508e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005092:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005096:	dcf2      	bgt.n	800507e <driveA+0x8a>
 8005098:	883b      	ldrh	r3, [r7, #0]
 800509a:	ee07 3a90 	vmov	s15, r3
 800509e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80050a2:	4b10      	ldr	r3, [pc, #64]	; (80050e4 <driveA+0xf0>)
 80050a4:	edd3 7a00 	vldr	s15, [r3]
 80050a8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80050ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050b0:	dce5      	bgt.n	800507e <driveA+0x8a>
}
 80050b2:	bf00      	nop
 80050b4:	370c      	adds	r7, #12
 80050b6:	46bd      	mov	sp, r7
 80050b8:	bd90      	pop	{r4, r7, pc}
 80050ba:	bf00      	nop
 80050bc:	20000f6c 	.word	0x20000f6c
 80050c0:	20000b54 	.word	0x20000b54
 80050c4:	200001a4 	.word	0x200001a4
 80050c8:	2000077c 	.word	0x2000077c
 80050cc:	20000ae4 	.word	0x20000ae4
 80050d0:	20000d58 	.word	0x20000d58
 80050d4:	20000f64 	.word	0x20000f64
 80050d8:	200001a0 	.word	0x200001a0
 80050dc:	20000bfc 	.word	0x20000bfc
 80050e0:	200015c4 	.word	0x200015c4
 80050e4:	20000aec 	.word	0x20000aec

080050e8 <driveD>:
//driveD
// 指定距離、指定減速度で減速走行する
// 引数1：accel_p 加速度, 引数2：speed_min_p 最低速度, 引数3：speed_max_p 最高速度, 引数4：dist 走行距離
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void driveD(int16_t accel_p, uint16_t speed_min_p, uint16_t speed_max_p, uint16_t dist){
 80050e8:	b590      	push	{r4, r7, lr}
 80050ea:	b085      	sub	sp, #20
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	4604      	mov	r4, r0
 80050f0:	4608      	mov	r0, r1
 80050f2:	4611      	mov	r1, r2
 80050f4:	461a      	mov	r2, r3
 80050f6:	4623      	mov	r3, r4
 80050f8:	80fb      	strh	r3, [r7, #6]
 80050fa:	4603      	mov	r3, r0
 80050fc:	80bb      	strh	r3, [r7, #4]
 80050fe:	460b      	mov	r3, r1
 8005100:	807b      	strh	r3, [r7, #2]
 8005102:	4613      	mov	r3, r2
 8005104:	803b      	strh	r3, [r7, #0]

//	float speed_0 = (speed_l + speed_r) / 2;								//等速走行距離を計算するためにmain.cより参照
	float speed_0 = (target_speed_l + target_speed_r) / 2;								//等速走行距離を計算するためにmain.cより参照
 8005106:	4b5a      	ldr	r3, [pc, #360]	; (8005270 <driveD+0x188>)
 8005108:	ed93 7a00 	vldr	s14, [r3]
 800510c:	4b59      	ldr	r3, [pc, #356]	; (8005274 <driveD+0x18c>)
 800510e:	edd3 7a00 	vldr	s15, [r3]
 8005112:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005116:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800511a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800511e:	edc7 7a03 	vstr	s15, [r7, #12]
	speed_min_l = speed_min_r = speed_min_p;
 8005122:	88bb      	ldrh	r3, [r7, #4]
 8005124:	ee07 3a90 	vmov	s15, r3
 8005128:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800512c:	4b52      	ldr	r3, [pc, #328]	; (8005278 <driveD+0x190>)
 800512e:	edc3 7a00 	vstr	s15, [r3]
 8005132:	4b52      	ldr	r3, [pc, #328]	; (800527c <driveD+0x194>)
 8005134:	edc3 7a00 	vstr	s15, [r3]
	speed_max_l = speed_max_r = speed_max_p;
 8005138:	887b      	ldrh	r3, [r7, #2]
 800513a:	ee07 3a90 	vmov	s15, r3
 800513e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005142:	4b4f      	ldr	r3, [pc, #316]	; (8005280 <driveD+0x198>)
 8005144:	edc3 7a00 	vstr	s15, [r3]
 8005148:	4b4e      	ldr	r3, [pc, #312]	; (8005284 <driveD+0x19c>)
 800514a:	edc3 7a00 	vstr	s15, [r3]
	accel_l = accel_r = accel_p;							//引数の各パラメータをグローバル変数化
 800514e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005152:	ee07 3a90 	vmov	s15, r3
 8005156:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800515a:	4b4b      	ldr	r3, [pc, #300]	; (8005288 <driveD+0x1a0>)
 800515c:	edc3 7a00 	vstr	s15, [r3]
 8005160:	4b4a      	ldr	r3, [pc, #296]	; (800528c <driveD+0x1a4>)
 8005162:	edc3 7a00 	vstr	s15, [r3]

	int16_t c_dist = dist - (speed_min_l*speed_min_l  - speed_0*speed_0)/(2*accel_l);			//等速走行距離 = 総距離 - 減速に必要な距離
 8005166:	883b      	ldrh	r3, [r7, #0]
 8005168:	ee07 3a90 	vmov	s15, r3
 800516c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005170:	4b42      	ldr	r3, [pc, #264]	; (800527c <driveD+0x194>)
 8005172:	edd3 6a00 	vldr	s13, [r3]
 8005176:	4b41      	ldr	r3, [pc, #260]	; (800527c <driveD+0x194>)
 8005178:	edd3 7a00 	vldr	s15, [r3]
 800517c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005180:	ed97 6a03 	vldr	s12, [r7, #12]
 8005184:	edd7 7a03 	vldr	s15, [r7, #12]
 8005188:	ee66 7a27 	vmul.f32	s15, s12, s15
 800518c:	ee36 6ae7 	vsub.f32	s12, s13, s15
 8005190:	4b3e      	ldr	r3, [pc, #248]	; (800528c <driveD+0x1a4>)
 8005192:	edd3 7a00 	vldr	s15, [r3]
 8005196:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800519a:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800519e:	ee77 7a67 	vsub.f32	s15, s14, s15
 80051a2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80051a6:	ee17 3a90 	vmov	r3, s15
 80051aa:	817b      	strh	r3, [r7, #10]

	accel_l = accel_r = 0;
 80051ac:	f04f 0300 	mov.w	r3, #0
 80051b0:	4a35      	ldr	r2, [pc, #212]	; (8005288 <driveD+0x1a0>)
 80051b2:	6013      	str	r3, [r2, #0]
 80051b4:	4a35      	ldr	r2, [pc, #212]	; (800528c <driveD+0x1a4>)
 80051b6:	6013      	str	r3, [r2, #0]
	dist_l = dist_r = 0;
 80051b8:	f04f 0300 	mov.w	r3, #0
 80051bc:	4a34      	ldr	r2, [pc, #208]	; (8005290 <driveD+0x1a8>)
 80051be:	6013      	str	r3, [r2, #0]
 80051c0:	4a34      	ldr	r2, [pc, #208]	; (8005294 <driveD+0x1ac>)
 80051c2:	6013      	str	r3, [r2, #0]
	if(c_dist > 0){
 80051c4:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	dd1c      	ble.n	8005206 <driveD+0x11e>
		//----等速走行----
		while((dist_l < c_dist) || (dist_r < c_dist));	//a左右のモータが等速分の距離以上進むまで待機
 80051cc:	bf00      	nop
 80051ce:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80051d2:	ee07 3a90 	vmov	s15, r3
 80051d6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80051da:	4b2e      	ldr	r3, [pc, #184]	; (8005294 <driveD+0x1ac>)
 80051dc:	edd3 7a00 	vldr	s15, [r3]
 80051e0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80051e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051e8:	dcf1      	bgt.n	80051ce <driveD+0xe6>
 80051ea:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80051ee:	ee07 3a90 	vmov	s15, r3
 80051f2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80051f6:	4b26      	ldr	r3, [pc, #152]	; (8005290 <driveD+0x1a8>)
 80051f8:	edd3 7a00 	vldr	s15, [r3]
 80051fc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005200:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005204:	dce3      	bgt.n	80051ce <driveD+0xe6>
	}
	accel_l = accel_r = accel_p;
 8005206:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800520a:	ee07 3a90 	vmov	s15, r3
 800520e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005212:	4b1d      	ldr	r3, [pc, #116]	; (8005288 <driveD+0x1a0>)
 8005214:	edc3 7a00 	vstr	s15, [r3]
 8005218:	4b1c      	ldr	r3, [pc, #112]	; (800528c <driveD+0x1a4>)
 800521a:	edc3 7a00 	vstr	s15, [r3]
	//----減速走行----
	while((dist_l < dist) && (dist_r < dist));			//a左右のモータが減速分の距離以上進むまで待機
 800521e:	bf00      	nop
 8005220:	883b      	ldrh	r3, [r7, #0]
 8005222:	ee07 3a90 	vmov	s15, r3
 8005226:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800522a:	4b1a      	ldr	r3, [pc, #104]	; (8005294 <driveD+0x1ac>)
 800522c:	edd3 7a00 	vldr	s15, [r3]
 8005230:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005234:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005238:	dd0c      	ble.n	8005254 <driveD+0x16c>
 800523a:	883b      	ldrh	r3, [r7, #0]
 800523c:	ee07 3a90 	vmov	s15, r3
 8005240:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005244:	4b12      	ldr	r3, [pc, #72]	; (8005290 <driveD+0x1a8>)
 8005246:	edd3 7a00 	vldr	s15, [r3]
 800524a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800524e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005252:	dce5      	bgt.n	8005220 <driveD+0x138>

	if(!MF2.FLAG.HACCEL)drive_stop();											//走行停止
 8005254:	4b10      	ldr	r3, [pc, #64]	; (8005298 <driveD+0x1b0>)
 8005256:	881b      	ldrh	r3, [r3, #0]
 8005258:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800525c:	b2db      	uxtb	r3, r3
 800525e:	2b00      	cmp	r3, #0
 8005260:	d101      	bne.n	8005266 <driveD+0x17e>
 8005262:	f7ff fd69 	bl	8004d38 <drive_stop>
}
 8005266:	bf00      	nop
 8005268:	3714      	adds	r7, #20
 800526a:	46bd      	mov	sp, r7
 800526c:	bd90      	pop	{r4, r7, pc}
 800526e:	bf00      	nop
 8005270:	20000bfc 	.word	0x20000bfc
 8005274:	200001a0 	.word	0x200001a0
 8005278:	20000f6c 	.word	0x20000f6c
 800527c:	20000b54 	.word	0x20000b54
 8005280:	200001a4 	.word	0x200001a4
 8005284:	2000077c 	.word	0x2000077c
 8005288:	20000ae4 	.word	0x20000ae4
 800528c:	20000d58 	.word	0x20000d58
 8005290:	20000aec 	.word	0x20000aec
 8005294:	200015c4 	.word	0x200015c4
 8005298:	20000f64 	.word	0x20000f64

0800529c <driveU>:
//driveU
// 指定距離分等速走行して停止する
// 引数1：dist …… 走行距離
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void driveU(uint16_t dist){
 800529c:	b480      	push	{r7}
 800529e:	b083      	sub	sp, #12
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	4603      	mov	r3, r0
 80052a4:	80fb      	strh	r3, [r7, #6]

	accel_l = accel_r = 0;									//等速走行のため加速度は0
 80052a6:	f04f 0300 	mov.w	r3, #0
 80052aa:	4a28      	ldr	r2, [pc, #160]	; (800534c <driveU+0xb0>)
 80052ac:	6013      	str	r3, [r2, #0]
 80052ae:	4a28      	ldr	r2, [pc, #160]	; (8005350 <driveU+0xb4>)
 80052b0:	6013      	str	r3, [r2, #0]
	dist_l = dist_r = 0;
 80052b2:	f04f 0300 	mov.w	r3, #0
 80052b6:	4a27      	ldr	r2, [pc, #156]	; (8005354 <driveU+0xb8>)
 80052b8:	6013      	str	r3, [r2, #0]
 80052ba:	4a27      	ldr	r2, [pc, #156]	; (8005358 <driveU+0xbc>)
 80052bc:	6013      	str	r3, [r2, #0]

	//----走行----
	while((dist_l < dist) || (dist_r < dist)){				//左右のモータが指定パルス以上進むまで待機
 80052be:	e024      	b.n	800530a <driveU+0x6e>
		if(MF.FLAG.WEDGE){
 80052c0:	4b26      	ldr	r3, [pc, #152]	; (800535c <driveU+0xc0>)
 80052c2:	881b      	ldrh	r3, [r3, #0]
 80052c4:	f3c3 23c0 	ubfx	r3, r3, #11, #1
 80052c8:	b2db      	uxtb	r3, r3
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d01d      	beq.n	800530a <driveU+0x6e>
			if(ad_l < WALL_BASE_L-40 || ad_r < WALL_BASE_R-40){
 80052ce:	4b24      	ldr	r3, [pc, #144]	; (8005360 <driveU+0xc4>)
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	2b63      	cmp	r3, #99	; 0x63
 80052d4:	d903      	bls.n	80052de <driveU+0x42>
 80052d6:	4b23      	ldr	r3, [pc, #140]	; (8005364 <driveU+0xc8>)
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	2b4f      	cmp	r3, #79	; 0x4f
 80052dc:	d815      	bhi.n	800530a <driveU+0x6e>
				while((dist_l < W_DIST) || (dist_r < W_DIST));	//左右のモータが壁切れ用指定距離以上進むまで待機
 80052de:	bf00      	nop
 80052e0:	4b1d      	ldr	r3, [pc, #116]	; (8005358 <driveU+0xbc>)
 80052e2:	edd3 7a00 	vldr	s15, [r3]
 80052e6:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8005368 <driveU+0xcc>
 80052ea:	eef4 7ac7 	vcmpe.f32	s15, s14
 80052ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80052f2:	d4f5      	bmi.n	80052e0 <driveU+0x44>
 80052f4:	4b17      	ldr	r3, [pc, #92]	; (8005354 <driveU+0xb8>)
 80052f6:	edd3 7a00 	vldr	s15, [r3]
 80052fa:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8005368 <driveU+0xcc>
 80052fe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005302:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005306:	d4eb      	bmi.n	80052e0 <driveU+0x44>
			break;
 8005308:	e019      	b.n	800533e <driveU+0xa2>
	while((dist_l < dist) || (dist_r < dist)){				//左右のモータが指定パルス以上進むまで待機
 800530a:	88fb      	ldrh	r3, [r7, #6]
 800530c:	ee07 3a90 	vmov	s15, r3
 8005310:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005314:	4b10      	ldr	r3, [pc, #64]	; (8005358 <driveU+0xbc>)
 8005316:	edd3 7a00 	vldr	s15, [r3]
 800531a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800531e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005322:	dccd      	bgt.n	80052c0 <driveU+0x24>
 8005324:	88fb      	ldrh	r3, [r7, #6]
 8005326:	ee07 3a90 	vmov	s15, r3
 800532a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800532e:	4b09      	ldr	r3, [pc, #36]	; (8005354 <driveU+0xb8>)
 8005330:	edd3 7a00 	vldr	s15, [r3]
 8005334:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005338:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800533c:	dcc0      	bgt.n	80052c0 <driveU+0x24>
			}
		}
	}
}
 800533e:	bf00      	nop
 8005340:	370c      	adds	r7, #12
 8005342:	46bd      	mov	sp, r7
 8005344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005348:	4770      	bx	lr
 800534a:	bf00      	nop
 800534c:	20000ae4 	.word	0x20000ae4
 8005350:	20000d58 	.word	0x20000d58
 8005354:	20000aec 	.word	0x20000aec
 8005358:	200015c4 	.word	0x200015c4
 800535c:	20000f68 	.word	0x20000f68
 8005360:	20000afc 	.word	0x20000afc
 8005364:	20000f60 	.word	0x20000f60
 8005368:	428c0000 	.word	0x428c0000

0800536c <driveC>:
//driveC
// 指定距離分デフォルト速度で走行して停止する
// 引数1：dist …… 走行距離
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void driveC(uint16_t dist){
 800536c:	b580      	push	{r7, lr}
 800536e:	b082      	sub	sp, #8
 8005370:	af00      	add	r7, sp, #0
 8005372:	4603      	mov	r3, r0
 8005374:	80fb      	strh	r3, [r7, #6]

	speed_min_l = speed_min_r = 150;
 8005376:	4b19      	ldr	r3, [pc, #100]	; (80053dc <driveC+0x70>)
 8005378:	4a19      	ldr	r2, [pc, #100]	; (80053e0 <driveC+0x74>)
 800537a:	6013      	str	r3, [r2, #0]
 800537c:	4a19      	ldr	r2, [pc, #100]	; (80053e4 <driveC+0x78>)
 800537e:	6013      	str	r3, [r2, #0]
	speed_max_l = speed_max_r = 150;
 8005380:	4b16      	ldr	r3, [pc, #88]	; (80053dc <driveC+0x70>)
 8005382:	4a19      	ldr	r2, [pc, #100]	; (80053e8 <driveC+0x7c>)
 8005384:	6013      	str	r3, [r2, #0]
 8005386:	4a19      	ldr	r2, [pc, #100]	; (80053ec <driveC+0x80>)
 8005388:	6013      	str	r3, [r2, #0]
	accel_l = accel_r = 0;												//等速走行のため加速度は0
 800538a:	f04f 0300 	mov.w	r3, #0
 800538e:	4a18      	ldr	r2, [pc, #96]	; (80053f0 <driveC+0x84>)
 8005390:	6013      	str	r3, [r2, #0]
 8005392:	4a18      	ldr	r2, [pc, #96]	; (80053f4 <driveC+0x88>)
 8005394:	6013      	str	r3, [r2, #0]

	drive_start();											//走行開始
 8005396:	f7ff fc9f 	bl	8004cd8 <drive_start>
	//====回転====
	while((dist_l < dist) || (dist_r < dist));			//左右のモータが定速分の距離以上進むまで待機
 800539a:	bf00      	nop
 800539c:	88fb      	ldrh	r3, [r7, #6]
 800539e:	ee07 3a90 	vmov	s15, r3
 80053a2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80053a6:	4b14      	ldr	r3, [pc, #80]	; (80053f8 <driveC+0x8c>)
 80053a8:	edd3 7a00 	vldr	s15, [r3]
 80053ac:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80053b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80053b4:	dcf2      	bgt.n	800539c <driveC+0x30>
 80053b6:	88fb      	ldrh	r3, [r7, #6]
 80053b8:	ee07 3a90 	vmov	s15, r3
 80053bc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80053c0:	4b0e      	ldr	r3, [pc, #56]	; (80053fc <driveC+0x90>)
 80053c2:	edd3 7a00 	vldr	s15, [r3]
 80053c6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80053ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80053ce:	dce5      	bgt.n	800539c <driveC+0x30>

	drive_stop();											//走行停止
 80053d0:	f7ff fcb2 	bl	8004d38 <drive_stop>
}
 80053d4:	bf00      	nop
 80053d6:	3708      	adds	r7, #8
 80053d8:	46bd      	mov	sp, r7
 80053da:	bd80      	pop	{r7, pc}
 80053dc:	43160000 	.word	0x43160000
 80053e0:	20000f6c 	.word	0x20000f6c
 80053e4:	20000b54 	.word	0x20000b54
 80053e8:	200001a4 	.word	0x200001a4
 80053ec:	2000077c 	.word	0x2000077c
 80053f0:	20000ae4 	.word	0x20000ae4
 80053f4:	20000d58 	.word	0x20000d58
 80053f8:	200015c4 	.word	0x200015c4
 80053fc:	20000aec 	.word	0x20000aec

08005400 <driveC2>:
//driveC2
//a指定距離分デフォルト逆回転速度で走行して停止する
//a引数1：dist …… 走行距離
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void driveC2(uint16_t dist){
 8005400:	b580      	push	{r7, lr}
 8005402:	b082      	sub	sp, #8
 8005404:	af00      	add	r7, sp, #0
 8005406:	4603      	mov	r3, r0
 8005408:	80fb      	strh	r3, [r7, #6]

	speed_min_l = speed_min_r = -250;
 800540a:	4b1a      	ldr	r3, [pc, #104]	; (8005474 <driveC2+0x74>)
 800540c:	4a1a      	ldr	r2, [pc, #104]	; (8005478 <driveC2+0x78>)
 800540e:	6013      	str	r3, [r2, #0]
 8005410:	4a1a      	ldr	r2, [pc, #104]	; (800547c <driveC2+0x7c>)
 8005412:	6013      	str	r3, [r2, #0]
	speed_max_l = speed_max_r = -250;
 8005414:	4b17      	ldr	r3, [pc, #92]	; (8005474 <driveC2+0x74>)
 8005416:	4a1a      	ldr	r2, [pc, #104]	; (8005480 <driveC2+0x80>)
 8005418:	6013      	str	r3, [r2, #0]
 800541a:	4a1a      	ldr	r2, [pc, #104]	; (8005484 <driveC2+0x84>)
 800541c:	6013      	str	r3, [r2, #0]
	accel_l = accel_r = 0;									//a等速走行のため加速度は0
 800541e:	f04f 0300 	mov.w	r3, #0
 8005422:	4a19      	ldr	r2, [pc, #100]	; (8005488 <driveC2+0x88>)
 8005424:	6013      	str	r3, [r2, #0]
 8005426:	4a19      	ldr	r2, [pc, #100]	; (800548c <driveC2+0x8c>)
 8005428:	6013      	str	r3, [r2, #0]

	drive_start();											//a走行開始
 800542a:	f7ff fc55 	bl	8004cd8 <drive_start>
	//====a回転====
	while((dist_l > (-1*dist)) || (dist_r > (-1*dist)));	//a左右のモータが定速分の逆走距離以上進むまで待機
 800542e:	bf00      	nop
 8005430:	88fb      	ldrh	r3, [r7, #6]
 8005432:	425b      	negs	r3, r3
 8005434:	ee07 3a90 	vmov	s15, r3
 8005438:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800543c:	4b14      	ldr	r3, [pc, #80]	; (8005490 <driveC2+0x90>)
 800543e:	edd3 7a00 	vldr	s15, [r3]
 8005442:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005446:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800544a:	d4f1      	bmi.n	8005430 <driveC2+0x30>
 800544c:	88fb      	ldrh	r3, [r7, #6]
 800544e:	425b      	negs	r3, r3
 8005450:	ee07 3a90 	vmov	s15, r3
 8005454:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005458:	4b0e      	ldr	r3, [pc, #56]	; (8005494 <driveC2+0x94>)
 800545a:	edd3 7a00 	vldr	s15, [r3]
 800545e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005462:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005466:	d4e3      	bmi.n	8005430 <driveC2+0x30>

	drive_stop();											//a走行停止
 8005468:	f7ff fc66 	bl	8004d38 <drive_stop>
}
 800546c:	bf00      	nop
 800546e:	3708      	adds	r7, #8
 8005470:	46bd      	mov	sp, r7
 8005472:	bd80      	pop	{r7, pc}
 8005474:	c37a0000 	.word	0xc37a0000
 8005478:	20000f6c 	.word	0x20000f6c
 800547c:	20000b54 	.word	0x20000b54
 8005480:	200001a4 	.word	0x200001a4
 8005484:	2000077c 	.word	0x2000077c
 8005488:	20000ae4 	.word	0x20000ae4
 800548c:	20000d58 	.word	0x20000d58
 8005490:	200015c4 	.word	0x200015c4
 8005494:	20000aec 	.word	0x20000aec

08005498 <slalomF>:
//slalomF
//aスラロームの前オフセット部分
//a引数1：
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void slalomF(int16_t accel_p, int16_t speed_p, uint8_t dist_p, uint16_t wall_fl, uint16_t wall_fr){
 8005498:	b590      	push	{r4, r7, lr}
 800549a:	b083      	sub	sp, #12
 800549c:	af00      	add	r7, sp, #0
 800549e:	4604      	mov	r4, r0
 80054a0:	4608      	mov	r0, r1
 80054a2:	4611      	mov	r1, r2
 80054a4:	461a      	mov	r2, r3
 80054a6:	4623      	mov	r3, r4
 80054a8:	80fb      	strh	r3, [r7, #6]
 80054aa:	4603      	mov	r3, r0
 80054ac:	80bb      	strh	r3, [r7, #4]
 80054ae:	460b      	mov	r3, r1
 80054b0:	70fb      	strb	r3, [r7, #3]
 80054b2:	4613      	mov	r3, r2
 80054b4:	803b      	strh	r3, [r7, #0]
	MF.FLAG.GYRO = 0;
 80054b6:	4a2d      	ldr	r2, [pc, #180]	; (800556c <slalomF+0xd4>)
 80054b8:	8813      	ldrh	r3, [r2, #0]
 80054ba:	f36f 2308 	bfc	r3, #8, #1
 80054be:	8013      	strh	r3, [r2, #0]
	MF.FLAG.SPD = 1;
 80054c0:	4a2a      	ldr	r2, [pc, #168]	; (800556c <slalomF+0xd4>)
 80054c2:	8813      	ldrh	r3, [r2, #0]
 80054c4:	f043 0304 	orr.w	r3, r3, #4
 80054c8:	8013      	strh	r3, [r2, #0]

	accel_l = accel_r = accel_p;
 80054ca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80054ce:	ee07 3a90 	vmov	s15, r3
 80054d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80054d6:	4b26      	ldr	r3, [pc, #152]	; (8005570 <slalomF+0xd8>)
 80054d8:	edc3 7a00 	vstr	s15, [r3]
 80054dc:	4b25      	ldr	r3, [pc, #148]	; (8005574 <slalomF+0xdc>)
 80054de:	edc3 7a00 	vstr	s15, [r3]
	speed_max_l = speed_max_r = speed_p;
 80054e2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80054e6:	ee07 3a90 	vmov	s15, r3
 80054ea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80054ee:	4b22      	ldr	r3, [pc, #136]	; (8005578 <slalomF+0xe0>)
 80054f0:	edc3 7a00 	vstr	s15, [r3]
 80054f4:	4b21      	ldr	r3, [pc, #132]	; (800557c <slalomF+0xe4>)
 80054f6:	edc3 7a00 	vstr	s15, [r3]

	control_start();
 80054fa:	f7ff fc45 	bl	8004d88 <control_start>
	dist_l = dist_r = 0;
 80054fe:	f04f 0300 	mov.w	r3, #0
 8005502:	4a1f      	ldr	r2, [pc, #124]	; (8005580 <slalomF+0xe8>)
 8005504:	6013      	str	r3, [r2, #0]
 8005506:	4a1f      	ldr	r2, [pc, #124]	; (8005584 <slalomF+0xec>)
 8005508:	6013      	str	r3, [r2, #0]
	while(dist_l < dist_p && dist_r < dist_p){
 800550a:	e00d      	b.n	8005528 <slalomF+0x90>
		if(ad_fl > wall_fl || ad_fr > wall_fr){
 800550c:	883a      	ldrh	r2, [r7, #0]
 800550e:	4b1e      	ldr	r3, [pc, #120]	; (8005588 <slalomF+0xf0>)
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	429a      	cmp	r2, r3
 8005514:	d304      	bcc.n	8005520 <slalomF+0x88>
 8005516:	8b3a      	ldrh	r2, [r7, #24]
 8005518:	4b1c      	ldr	r3, [pc, #112]	; (800558c <slalomF+0xf4>)
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	429a      	cmp	r2, r3
 800551e:	d203      	bcs.n	8005528 <slalomF+0x90>
			full_led_write(RED);
 8005520:	2001      	movs	r0, #1
 8005522:	f00c fa49 	bl	80119b8 <full_led_write>
			break;
 8005526:	e019      	b.n	800555c <slalomF+0xc4>
	while(dist_l < dist_p && dist_r < dist_p){
 8005528:	78fb      	ldrb	r3, [r7, #3]
 800552a:	ee07 3a90 	vmov	s15, r3
 800552e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005532:	4b14      	ldr	r3, [pc, #80]	; (8005584 <slalomF+0xec>)
 8005534:	edd3 7a00 	vldr	s15, [r3]
 8005538:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800553c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005540:	dd0c      	ble.n	800555c <slalomF+0xc4>
 8005542:	78fb      	ldrb	r3, [r7, #3]
 8005544:	ee07 3a90 	vmov	s15, r3
 8005548:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800554c:	4b0c      	ldr	r3, [pc, #48]	; (8005580 <slalomF+0xe8>)
 800554e:	edd3 7a00 	vldr	s15, [r3]
 8005552:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005556:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800555a:	dcd7      	bgt.n	800550c <slalomF+0x74>
		}
	}
	drive_stop();
 800555c:	f7ff fbec 	bl	8004d38 <drive_stop>
	control_stop();
 8005560:	f7ff fc3a 	bl	8004dd8 <control_stop>
}
 8005564:	bf00      	nop
 8005566:	370c      	adds	r7, #12
 8005568:	46bd      	mov	sp, r7
 800556a:	bd90      	pop	{r4, r7, pc}
 800556c:	20000f68 	.word	0x20000f68
 8005570:	20000ae4 	.word	0x20000ae4
 8005574:	20000d58 	.word	0x20000d58
 8005578:	200001a4 	.word	0x200001a4
 800557c:	2000077c 	.word	0x2000077c
 8005580:	20000aec 	.word	0x20000aec
 8005584:	200015c4 	.word	0x200015c4
 8005588:	20000d54 	.word	0x20000d54
 800558c:	20000c00 	.word	0x20000c00

08005590 <slalomR>:
//slalomR
//aスラロームの旋回部分
//a引数1：
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void slalomR(int32_t degaccel_p, int16_t omega_p, int16_t degree_p, int16_t speed_p){
 8005590:	b480      	push	{r7}
 8005592:	b087      	sub	sp, #28
 8005594:	af00      	add	r7, sp, #0
 8005596:	60f8      	str	r0, [r7, #12]
 8005598:	4608      	mov	r0, r1
 800559a:	4611      	mov	r1, r2
 800559c:	461a      	mov	r2, r3
 800559e:	4603      	mov	r3, r0
 80055a0:	817b      	strh	r3, [r7, #10]
 80055a2:	460b      	mov	r3, r1
 80055a4:	813b      	strh	r3, [r7, #8]
 80055a6:	4613      	mov	r3, r2
 80055a8:	80fb      	strh	r3, [r7, #6]
	MF.FLAG.GYRO = 1;
 80055aa:	4a82      	ldr	r2, [pc, #520]	; (80057b4 <slalomR+0x224>)
 80055ac:	8813      	ldrh	r3, [r2, #0]
 80055ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80055b2:	8013      	strh	r3, [r2, #0]
	target_degaccel_z = degaccel_p;
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	ee07 3a90 	vmov	s15, r3
 80055ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80055be:	4b7e      	ldr	r3, [pc, #504]	; (80057b8 <slalomR+0x228>)
 80055c0:	edc3 7a00 	vstr	s15, [r3]
	target_omega_z = 0;
 80055c4:	4b7d      	ldr	r3, [pc, #500]	; (80057bc <slalomR+0x22c>)
 80055c6:	f04f 0200 	mov.w	r2, #0
 80055ca:	601a      	str	r2, [r3, #0]
	speed_G = speed_p;
 80055cc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80055d0:	ee07 3a90 	vmov	s15, r3
 80055d4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80055d8:	4b79      	ldr	r3, [pc, #484]	; (80057c0 <slalomR+0x230>)
 80055da:	edc3 7a00 	vstr	s15, [r3]

	int16_t c_degree;

	if(omega_p < 0){
 80055de:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	da1f      	bge.n	8005626 <slalomR+0x96>
		omega_min = omega_p;
 80055e6:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80055ea:	ee07 3a90 	vmov	s15, r3
 80055ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80055f2:	4b74      	ldr	r3, [pc, #464]	; (80057c4 <slalomR+0x234>)
 80055f4:	edc3 7a00 	vstr	s15, [r3]
		c_degree =  omega_min * omega_min / target_degaccel_z / 2;
 80055f8:	4b72      	ldr	r3, [pc, #456]	; (80057c4 <slalomR+0x234>)
 80055fa:	ed93 7a00 	vldr	s14, [r3]
 80055fe:	4b71      	ldr	r3, [pc, #452]	; (80057c4 <slalomR+0x234>)
 8005600:	edd3 7a00 	vldr	s15, [r3]
 8005604:	ee67 6a27 	vmul.f32	s13, s14, s15
 8005608:	4b6b      	ldr	r3, [pc, #428]	; (80057b8 <slalomR+0x228>)
 800560a:	edd3 7a00 	vldr	s15, [r3]
 800560e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005612:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8005616:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800561a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800561e:	ee17 3a90 	vmov	r3, s15
 8005622:	82fb      	strh	r3, [r7, #22]
 8005624:	e01e      	b.n	8005664 <slalomR+0xd4>
	}else{
		omega_max = omega_p;
 8005626:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800562a:	ee07 3a90 	vmov	s15, r3
 800562e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005632:	4b65      	ldr	r3, [pc, #404]	; (80057c8 <slalomR+0x238>)
 8005634:	edc3 7a00 	vstr	s15, [r3]
		c_degree =  omega_max * omega_max / target_degaccel_z / 2;
 8005638:	4b63      	ldr	r3, [pc, #396]	; (80057c8 <slalomR+0x238>)
 800563a:	ed93 7a00 	vldr	s14, [r3]
 800563e:	4b62      	ldr	r3, [pc, #392]	; (80057c8 <slalomR+0x238>)
 8005640:	edd3 7a00 	vldr	s15, [r3]
 8005644:	ee67 6a27 	vmul.f32	s13, s14, s15
 8005648:	4b5b      	ldr	r3, [pc, #364]	; (80057b8 <slalomR+0x228>)
 800564a:	edd3 7a00 	vldr	s15, [r3]
 800564e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005652:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8005656:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800565a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800565e:	ee17 3a90 	vmov	r3, s15
 8005662:	82fb      	strh	r3, [r7, #22]
	}

	MF.FLAG.DRV = 1;
 8005664:	4a53      	ldr	r2, [pc, #332]	; (80057b4 <slalomR+0x224>)
 8005666:	8813      	ldrh	r3, [r2, #0]
 8005668:	f043 0302 	orr.w	r3, r3, #2
 800566c:	8013      	strh	r3, [r2, #0]
	if(omega_p < 0){
 800566e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8005672:	2b00      	cmp	r3, #0
 8005674:	da14      	bge.n	80056a0 <slalomR+0x110>
		while(degree_z > target_degree_z+c_degree);
 8005676:	bf00      	nop
 8005678:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800567c:	ee07 3a90 	vmov	s15, r3
 8005680:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005684:	4b51      	ldr	r3, [pc, #324]	; (80057cc <slalomR+0x23c>)
 8005686:	edd3 7a00 	vldr	s15, [r3]
 800568a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800568e:	4b50      	ldr	r3, [pc, #320]	; (80057d0 <slalomR+0x240>)
 8005690:	edd3 7a00 	vldr	s15, [r3]
 8005694:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005698:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800569c:	d4ec      	bmi.n	8005678 <slalomR+0xe8>
 800569e:	e013      	b.n	80056c8 <slalomR+0x138>
	}else{
		while(degree_z < target_degree_z+c_degree);
 80056a0:	bf00      	nop
 80056a2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80056a6:	ee07 3a90 	vmov	s15, r3
 80056aa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80056ae:	4b47      	ldr	r3, [pc, #284]	; (80057cc <slalomR+0x23c>)
 80056b0:	edd3 7a00 	vldr	s15, [r3]
 80056b4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80056b8:	4b45      	ldr	r3, [pc, #276]	; (80057d0 <slalomR+0x240>)
 80056ba:	edd3 7a00 	vldr	s15, [r3]
 80056be:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80056c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80056c6:	dcec      	bgt.n	80056a2 <slalomR+0x112>
	}

	target_degaccel_z = 0;
 80056c8:	4b3b      	ldr	r3, [pc, #236]	; (80057b8 <slalomR+0x228>)
 80056ca:	f04f 0200 	mov.w	r2, #0
 80056ce:	601a      	str	r2, [r3, #0]

	if(omega_p < 0){
 80056d0:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	da18      	bge.n	800570a <slalomR+0x17a>
		while(degree_z > target_degree_z+(degree_p-c_degree-4));
 80056d8:	bf00      	nop
 80056da:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80056de:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80056e2:	1ad3      	subs	r3, r2, r3
 80056e4:	3b04      	subs	r3, #4
 80056e6:	ee07 3a90 	vmov	s15, r3
 80056ea:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80056ee:	4b37      	ldr	r3, [pc, #220]	; (80057cc <slalomR+0x23c>)
 80056f0:	edd3 7a00 	vldr	s15, [r3]
 80056f4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80056f8:	4b35      	ldr	r3, [pc, #212]	; (80057d0 <slalomR+0x240>)
 80056fa:	edd3 7a00 	vldr	s15, [r3]
 80056fe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005702:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005706:	d4e8      	bmi.n	80056da <slalomR+0x14a>
 8005708:	e017      	b.n	800573a <slalomR+0x1aa>
	}else{
		while(degree_z < target_degree_z+(degree_p-c_degree+4));
 800570a:	bf00      	nop
 800570c:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8005710:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8005714:	1ad3      	subs	r3, r2, r3
 8005716:	3304      	adds	r3, #4
 8005718:	ee07 3a90 	vmov	s15, r3
 800571c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005720:	4b2a      	ldr	r3, [pc, #168]	; (80057cc <slalomR+0x23c>)
 8005722:	edd3 7a00 	vldr	s15, [r3]
 8005726:	ee37 7a27 	vadd.f32	s14, s14, s15
 800572a:	4b29      	ldr	r3, [pc, #164]	; (80057d0 <slalomR+0x240>)
 800572c:	edd3 7a00 	vldr	s15, [r3]
 8005730:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005734:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005738:	dce8      	bgt.n	800570c <slalomR+0x17c>
	}

	target_degaccel_z = -degaccel_p;
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	425b      	negs	r3, r3
 800573e:	ee07 3a90 	vmov	s15, r3
 8005742:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005746:	4b1c      	ldr	r3, [pc, #112]	; (80057b8 <slalomR+0x228>)
 8005748:	edc3 7a00 	vstr	s15, [r3]

	if(omega_p < 0){
 800574c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8005750:	2b00      	cmp	r3, #0
 8005752:	da14      	bge.n	800577e <slalomR+0x1ee>
		while(degree_z > target_degree_z+degree_p);
 8005754:	bf00      	nop
 8005756:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800575a:	ee07 3a90 	vmov	s15, r3
 800575e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005762:	4b1a      	ldr	r3, [pc, #104]	; (80057cc <slalomR+0x23c>)
 8005764:	edd3 7a00 	vldr	s15, [r3]
 8005768:	ee37 7a27 	vadd.f32	s14, s14, s15
 800576c:	4b18      	ldr	r3, [pc, #96]	; (80057d0 <slalomR+0x240>)
 800576e:	edd3 7a00 	vldr	s15, [r3]
 8005772:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005776:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800577a:	d4ec      	bmi.n	8005756 <slalomR+0x1c6>
	}else{
		while(degree_z < target_degree_z+degree_p);
	}
}
 800577c:	e013      	b.n	80057a6 <slalomR+0x216>
		while(degree_z < target_degree_z+degree_p);
 800577e:	bf00      	nop
 8005780:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8005784:	ee07 3a90 	vmov	s15, r3
 8005788:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800578c:	4b0f      	ldr	r3, [pc, #60]	; (80057cc <slalomR+0x23c>)
 800578e:	edd3 7a00 	vldr	s15, [r3]
 8005792:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005796:	4b0e      	ldr	r3, [pc, #56]	; (80057d0 <slalomR+0x240>)
 8005798:	edd3 7a00 	vldr	s15, [r3]
 800579c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80057a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80057a4:	dcec      	bgt.n	8005780 <slalomR+0x1f0>
}
 80057a6:	bf00      	nop
 80057a8:	371c      	adds	r7, #28
 80057aa:	46bd      	mov	sp, r7
 80057ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b0:	4770      	bx	lr
 80057b2:	bf00      	nop
 80057b4:	20000f68 	.word	0x20000f68
 80057b8:	20000b58 	.word	0x20000b58
 80057bc:	200001a8 	.word	0x200001a8
 80057c0:	20000af4 	.word	0x20000af4
 80057c4:	200002b8 	.word	0x200002b8
 80057c8:	20000ae8 	.word	0x20000ae8
 80057cc:	20000bf8 	.word	0x20000bf8
 80057d0:	20000b5c 	.word	0x20000b5c

080057d4 <slalomB>:
//slalomB
//aスラロームの後オフセット部分
//a引数1：
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void slalomB(int16_t accel_p, int16_t speed_p, uint8_t dist_p){
 80057d4:	b580      	push	{r7, lr}
 80057d6:	b082      	sub	sp, #8
 80057d8:	af00      	add	r7, sp, #0
 80057da:	4603      	mov	r3, r0
 80057dc:	80fb      	strh	r3, [r7, #6]
 80057de:	460b      	mov	r3, r1
 80057e0:	80bb      	strh	r3, [r7, #4]
 80057e2:	4613      	mov	r3, r2
 80057e4:	70fb      	strb	r3, [r7, #3]
	MF.FLAG.GYRO = 0;
 80057e6:	4a29      	ldr	r2, [pc, #164]	; (800588c <slalomB+0xb8>)
 80057e8:	8813      	ldrh	r3, [r2, #0]
 80057ea:	f36f 2308 	bfc	r3, #8, #1
 80057ee:	8013      	strh	r3, [r2, #0]
	MF.FLAG.SPD = 1;
 80057f0:	4a26      	ldr	r2, [pc, #152]	; (800588c <slalomB+0xb8>)
 80057f2:	8813      	ldrh	r3, [r2, #0]
 80057f4:	f043 0304 	orr.w	r3, r3, #4
 80057f8:	8013      	strh	r3, [r2, #0]

	accel_l = accel_r = accel_p;
 80057fa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80057fe:	ee07 3a90 	vmov	s15, r3
 8005802:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005806:	4b22      	ldr	r3, [pc, #136]	; (8005890 <slalomB+0xbc>)
 8005808:	edc3 7a00 	vstr	s15, [r3]
 800580c:	4b21      	ldr	r3, [pc, #132]	; (8005894 <slalomB+0xc0>)
 800580e:	edc3 7a00 	vstr	s15, [r3]
	speed_max_l = speed_max_r = speed_p;
 8005812:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8005816:	ee07 3a90 	vmov	s15, r3
 800581a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800581e:	4b1e      	ldr	r3, [pc, #120]	; (8005898 <slalomB+0xc4>)
 8005820:	edc3 7a00 	vstr	s15, [r3]
 8005824:	4b1d      	ldr	r3, [pc, #116]	; (800589c <slalomB+0xc8>)
 8005826:	edc3 7a00 	vstr	s15, [r3]

	control_start();
 800582a:	f7ff faad 	bl	8004d88 <control_start>
	MF2.FLAG.TEMP = 1;
 800582e:	4a1c      	ldr	r2, [pc, #112]	; (80058a0 <slalomB+0xcc>)
 8005830:	8813      	ldrh	r3, [r2, #0]
 8005832:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005836:	8013      	strh	r3, [r2, #0]
	dist_l = dist_r = 0;
 8005838:	f04f 0300 	mov.w	r3, #0
 800583c:	4a19      	ldr	r2, [pc, #100]	; (80058a4 <slalomB+0xd0>)
 800583e:	6013      	str	r3, [r2, #0]
 8005840:	4a19      	ldr	r2, [pc, #100]	; (80058a8 <slalomB+0xd4>)
 8005842:	6013      	str	r3, [r2, #0]
	while(dist_l < dist_p && dist_r < dist_p);
 8005844:	bf00      	nop
 8005846:	78fb      	ldrb	r3, [r7, #3]
 8005848:	ee07 3a90 	vmov	s15, r3
 800584c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005850:	4b15      	ldr	r3, [pc, #84]	; (80058a8 <slalomB+0xd4>)
 8005852:	edd3 7a00 	vldr	s15, [r3]
 8005856:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800585a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800585e:	dd0c      	ble.n	800587a <slalomB+0xa6>
 8005860:	78fb      	ldrb	r3, [r7, #3]
 8005862:	ee07 3a90 	vmov	s15, r3
 8005866:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800586a:	4b0e      	ldr	r3, [pc, #56]	; (80058a4 <slalomB+0xd0>)
 800586c:	edd3 7a00 	vldr	s15, [r3]
 8005870:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005874:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005878:	dce5      	bgt.n	8005846 <slalomB+0x72>
	MF2.FLAG.TEMP = 0;
 800587a:	4a09      	ldr	r2, [pc, #36]	; (80058a0 <slalomB+0xcc>)
 800587c:	8813      	ldrh	r3, [r2, #0]
 800587e:	f36f 2349 	bfc	r3, #9, #1
 8005882:	8013      	strh	r3, [r2, #0]
}
 8005884:	bf00      	nop
 8005886:	3708      	adds	r7, #8
 8005888:	46bd      	mov	sp, r7
 800588a:	bd80      	pop	{r7, pc}
 800588c:	20000f68 	.word	0x20000f68
 8005890:	20000ae4 	.word	0x20000ae4
 8005894:	20000d58 	.word	0x20000d58
 8005898:	200001a4 	.word	0x200001a4
 800589c:	2000077c 	.word	0x2000077c
 80058a0:	20000f64 	.word	0x20000f64
 80058a4:	20000aec 	.word	0x20000aec
 80058a8:	200015c4 	.word	0x200015c4

080058ac <set_position>:
//set_position
//a機体の尻を壁に当てて場所を区画中央に合わせる
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void set_position(){
 80058ac:	b580      	push	{r7, lr}
 80058ae:	af00      	add	r7, sp, #0

  driveC2(SETPOS_BACK);         //a尻を当てる程度に後退。回転後に停止する
 80058b0:	2064      	movs	r0, #100	; 0x64
 80058b2:	f7ff fda5 	bl	8005400 <driveC2>
  degree_z = target_degree_z;
 80058b6:	4b05      	ldr	r3, [pc, #20]	; (80058cc <set_position+0x20>)
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	4a05      	ldr	r2, [pc, #20]	; (80058d0 <set_position+0x24>)
 80058bc:	6013      	str	r3, [r2, #0]
  start_mode = 0;
 80058be:	4b05      	ldr	r3, [pc, #20]	; (80058d4 <set_position+0x28>)
 80058c0:	2200      	movs	r2, #0
 80058c2:	701a      	strb	r2, [r3, #0]
  start_sectionA();
 80058c4:	f000 f826 	bl	8005914 <start_sectionA>
}
 80058c8:	bf00      	nop
 80058ca:	bd80      	pop	{r7, pc}
 80058cc:	20000bf8 	.word	0x20000bf8
 80058d0:	20000b5c 	.word	0x20000b5c
 80058d4:	200015c8 	.word	0x200015c8

080058d8 <set_positionF>:
//set_positionF
//a前壁との距離を測定し、場所を区画中央に合わせる
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void set_positionF(){
 80058d8:	b580      	push	{r7, lr}
 80058da:	af00      	add	r7, sp, #0

	full_led_write(RED);
 80058dc:	2001      	movs	r0, #1
 80058de:	f00c f86b 	bl	80119b8 <full_led_write>
	HAL_Delay(100);
 80058e2:	2064      	movs	r0, #100	; 0x64
 80058e4:	f7fb fb9a 	bl	800101c <HAL_Delay>

	MF.FLAG.DRV = 1;
 80058e8:	4a09      	ldr	r2, [pc, #36]	; (8005910 <set_positionF+0x38>)
 80058ea:	8813      	ldrh	r3, [r2, #0]
 80058ec:	f043 0302 	orr.w	r3, r3, #2
 80058f0:	8013      	strh	r3, [r2, #0]
//	MF.FLAG.FWALL = 1;
	MF.FLAG.GCTRL = 1;
 80058f2:	4a07      	ldr	r2, [pc, #28]	; (8005910 <set_positionF+0x38>)
 80058f4:	8813      	ldrh	r3, [r2, #0]
 80058f6:	f043 0310 	orr.w	r3, r3, #16
 80058fa:	8013      	strh	r3, [r2, #0]
//	while(MF.FLAG.FWALL);

	MF.FLAG.GCTRL = 0;
 80058fc:	4a04      	ldr	r2, [pc, #16]	; (8005910 <set_positionF+0x38>)
 80058fe:	8813      	ldrh	r3, [r2, #0]
 8005900:	f36f 1304 	bfc	r3, #4, #1
 8005904:	8013      	strh	r3, [r2, #0]
	drive_stop();
 8005906:	f7ff fa17 	bl	8004d38 <drive_stop>
}
 800590a:	bf00      	nop
 800590c:	bd80      	pop	{r7, pc}
 800590e:	bf00      	nop
 8005910:	20000f68 	.word	0x20000f68

08005914 <start_sectionA>:
//start_sectionA
// スタート区画分加速しながら走行する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void start_sectionA(void){
 8005914:	b580      	push	{r7, lr}
 8005916:	af00      	add	r7, sp, #0

	control_start();
 8005918:	f7ff fa36 	bl	8004d88 <control_start>
	if(run_mode == LOW){
 800591c:	4b94      	ldr	r3, [pc, #592]	; (8005b70 <start_sectionA+0x25c>)
 800591e:	781b      	ldrb	r3, [r3, #0]
 8005920:	b2db      	uxtb	r3, r3
 8005922:	2b01      	cmp	r3, #1
 8005924:	d12a      	bne.n	800597c <start_sectionA+0x68>
		if(start_mode == 0){
 8005926:	4b93      	ldr	r3, [pc, #588]	; (8005b74 <start_sectionA+0x260>)
 8005928:	781b      	ldrb	r3, [r3, #0]
 800592a:	b2db      	uxtb	r3, r3
 800592c:	2b00      	cmp	r3, #0
 800592e:	d108      	bne.n	8005942 <start_sectionA+0x2e>
			driveA(4000, SPEED_MIN, SPEED_LOW, SEC_START);					//aスタート区画分加速しながら走行。走行後は停止しない
 8005930:	2388      	movs	r3, #136	; 0x88
 8005932:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8005936:	211e      	movs	r1, #30
 8005938:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 800593c:	f7ff fb5a 	bl	8004ff4 <driveA>
 8005940:	e108      	b.n	8005b54 <start_sectionA+0x240>
		}else if(start_mode == 1){
 8005942:	4b8c      	ldr	r3, [pc, #560]	; (8005b74 <start_sectionA+0x260>)
 8005944:	781b      	ldrb	r3, [r3, #0]
 8005946:	b2db      	uxtb	r3, r3
 8005948:	2b01      	cmp	r3, #1
 800594a:	d108      	bne.n	800595e <start_sectionA+0x4a>
			driveA(4000, SPEED_MIN, SPEED_LOW, SEC_HALF);					//a半区画分加速しながら走行。走行後は停止しない
 800594c:	235b      	movs	r3, #91	; 0x5b
 800594e:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8005952:	211e      	movs	r1, #30
 8005954:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8005958:	f7ff fb4c 	bl	8004ff4 <driveA>
 800595c:	e0fa      	b.n	8005b54 <start_sectionA+0x240>
		}else if(start_mode == 2){
 800595e:	4b85      	ldr	r3, [pc, #532]	; (8005b74 <start_sectionA+0x260>)
 8005960:	781b      	ldrb	r3, [r3, #0]
 8005962:	b2db      	uxtb	r3, r3
 8005964:	2b02      	cmp	r3, #2
 8005966:	f040 80f5 	bne.w	8005b54 <start_sectionA+0x240>
			driveA(4000, SPEED_MIN, SPEED_LOW, SEC_START_HALF);				//aスタート半区画分加速しながら走行。走行後は停止しない
 800596a:	232d      	movs	r3, #45	; 0x2d
 800596c:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8005970:	211e      	movs	r1, #30
 8005972:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8005976:	f7ff fb3d 	bl	8004ff4 <driveA>
 800597a:	e0eb      	b.n	8005b54 <start_sectionA+0x240>
		}
	}else if(run_mode == MIDDLE){
 800597c:	4b7c      	ldr	r3, [pc, #496]	; (8005b70 <start_sectionA+0x25c>)
 800597e:	781b      	ldrb	r3, [r3, #0]
 8005980:	b2db      	uxtb	r3, r3
 8005982:	2b02      	cmp	r3, #2
 8005984:	d12a      	bne.n	80059dc <start_sectionA+0xc8>
		if(start_mode == 0){
 8005986:	4b7b      	ldr	r3, [pc, #492]	; (8005b74 <start_sectionA+0x260>)
 8005988:	781b      	ldrb	r3, [r3, #0]
 800598a:	b2db      	uxtb	r3, r3
 800598c:	2b00      	cmp	r3, #0
 800598e:	d108      	bne.n	80059a2 <start_sectionA+0x8e>
			driveA(6000, SPEED_MIN, SPEED_MIDDLE, SEC_START);				//aスタート区画分加速しながら走行。走行後は停止しない
 8005990:	2388      	movs	r3, #136	; 0x88
 8005992:	f44f 7216 	mov.w	r2, #600	; 0x258
 8005996:	211e      	movs	r1, #30
 8005998:	f241 7070 	movw	r0, #6000	; 0x1770
 800599c:	f7ff fb2a 	bl	8004ff4 <driveA>
 80059a0:	e0d8      	b.n	8005b54 <start_sectionA+0x240>
		}else if(start_mode == 1){
 80059a2:	4b74      	ldr	r3, [pc, #464]	; (8005b74 <start_sectionA+0x260>)
 80059a4:	781b      	ldrb	r3, [r3, #0]
 80059a6:	b2db      	uxtb	r3, r3
 80059a8:	2b01      	cmp	r3, #1
 80059aa:	d108      	bne.n	80059be <start_sectionA+0xaa>
			driveA(6000, SPEED_MIN, SPEED_MIDDLE, SEC_HALF);				//a半区画分加速しながら走行。走行後は停止しない
 80059ac:	235b      	movs	r3, #91	; 0x5b
 80059ae:	f44f 7216 	mov.w	r2, #600	; 0x258
 80059b2:	211e      	movs	r1, #30
 80059b4:	f241 7070 	movw	r0, #6000	; 0x1770
 80059b8:	f7ff fb1c 	bl	8004ff4 <driveA>
 80059bc:	e0ca      	b.n	8005b54 <start_sectionA+0x240>
		}else if(start_mode == 2){
 80059be:	4b6d      	ldr	r3, [pc, #436]	; (8005b74 <start_sectionA+0x260>)
 80059c0:	781b      	ldrb	r3, [r3, #0]
 80059c2:	b2db      	uxtb	r3, r3
 80059c4:	2b02      	cmp	r3, #2
 80059c6:	f040 80c5 	bne.w	8005b54 <start_sectionA+0x240>
			driveA(6000, SPEED_MIN, SPEED_MIDDLE, SEC_START_HALF);			//aスタート半区画分加速しながら走行。走行後は停止しない
 80059ca:	232d      	movs	r3, #45	; 0x2d
 80059cc:	f44f 7216 	mov.w	r2, #600	; 0x258
 80059d0:	211e      	movs	r1, #30
 80059d2:	f241 7070 	movw	r0, #6000	; 0x1770
 80059d6:	f7ff fb0d 	bl	8004ff4 <driveA>
 80059da:	e0bb      	b.n	8005b54 <start_sectionA+0x240>
		}
	}else if(run_mode == HIGH){
 80059dc:	4b64      	ldr	r3, [pc, #400]	; (8005b70 <start_sectionA+0x25c>)
 80059de:	781b      	ldrb	r3, [r3, #0]
 80059e0:	b2db      	uxtb	r3, r3
 80059e2:	2b03      	cmp	r3, #3
 80059e4:	d12a      	bne.n	8005a3c <start_sectionA+0x128>
		if(start_mode == 0){
 80059e6:	4b63      	ldr	r3, [pc, #396]	; (8005b74 <start_sectionA+0x260>)
 80059e8:	781b      	ldrb	r3, [r3, #0]
 80059ea:	b2db      	uxtb	r3, r3
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d108      	bne.n	8005a02 <start_sectionA+0xee>
			driveA(8000, SPEED_MIN, SPEED_HIGH, SEC_START);					//aスタート区画分加速しながら走行。走行後は停止しない
 80059f0:	2388      	movs	r3, #136	; 0x88
 80059f2:	f44f 7248 	mov.w	r2, #800	; 0x320
 80059f6:	211e      	movs	r1, #30
 80059f8:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 80059fc:	f7ff fafa 	bl	8004ff4 <driveA>
 8005a00:	e0a8      	b.n	8005b54 <start_sectionA+0x240>
		}else if(start_mode == 1){
 8005a02:	4b5c      	ldr	r3, [pc, #368]	; (8005b74 <start_sectionA+0x260>)
 8005a04:	781b      	ldrb	r3, [r3, #0]
 8005a06:	b2db      	uxtb	r3, r3
 8005a08:	2b01      	cmp	r3, #1
 8005a0a:	d108      	bne.n	8005a1e <start_sectionA+0x10a>
			driveA(8000, SPEED_MIN, SPEED_HIGH, SEC_HALF);					//a半区画分加速しながら走行。走行後は停止しない
 8005a0c:	235b      	movs	r3, #91	; 0x5b
 8005a0e:	f44f 7248 	mov.w	r2, #800	; 0x320
 8005a12:	211e      	movs	r1, #30
 8005a14:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 8005a18:	f7ff faec 	bl	8004ff4 <driveA>
 8005a1c:	e09a      	b.n	8005b54 <start_sectionA+0x240>
		}else if(start_mode == 2){
 8005a1e:	4b55      	ldr	r3, [pc, #340]	; (8005b74 <start_sectionA+0x260>)
 8005a20:	781b      	ldrb	r3, [r3, #0]
 8005a22:	b2db      	uxtb	r3, r3
 8005a24:	2b02      	cmp	r3, #2
 8005a26:	f040 8095 	bne.w	8005b54 <start_sectionA+0x240>
			driveA(10000, SPEED_MIN, SPEED_HIGH, SEC_START_HALF);			//aスタート半区画分加速しながら走行。走行後は停止しない
 8005a2a:	232d      	movs	r3, #45	; 0x2d
 8005a2c:	f44f 7248 	mov.w	r2, #800	; 0x320
 8005a30:	211e      	movs	r1, #30
 8005a32:	f242 7010 	movw	r0, #10000	; 0x2710
 8005a36:	f7ff fadd 	bl	8004ff4 <driveA>
 8005a3a:	e08b      	b.n	8005b54 <start_sectionA+0x240>
		}
	}else if(run_mode == HIGH_HIGH){
 8005a3c:	4b4c      	ldr	r3, [pc, #304]	; (8005b70 <start_sectionA+0x25c>)
 8005a3e:	781b      	ldrb	r3, [r3, #0]
 8005a40:	b2db      	uxtb	r3, r3
 8005a42:	2b04      	cmp	r3, #4
 8005a44:	d129      	bne.n	8005a9a <start_sectionA+0x186>
		if(start_mode == 0){
 8005a46:	4b4b      	ldr	r3, [pc, #300]	; (8005b74 <start_sectionA+0x260>)
 8005a48:	781b      	ldrb	r3, [r3, #0]
 8005a4a:	b2db      	uxtb	r3, r3
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d108      	bne.n	8005a62 <start_sectionA+0x14e>
			driveA(10000, SPEED_MIN, SPEED_HIGH_HIGH, SEC_START);					//aスタート区画分加速しながら走行。走行後は停止しない
 8005a50:	2388      	movs	r3, #136	; 0x88
 8005a52:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005a56:	211e      	movs	r1, #30
 8005a58:	f242 7010 	movw	r0, #10000	; 0x2710
 8005a5c:	f7ff faca 	bl	8004ff4 <driveA>
 8005a60:	e078      	b.n	8005b54 <start_sectionA+0x240>
		}else if(start_mode == 1){
 8005a62:	4b44      	ldr	r3, [pc, #272]	; (8005b74 <start_sectionA+0x260>)
 8005a64:	781b      	ldrb	r3, [r3, #0]
 8005a66:	b2db      	uxtb	r3, r3
 8005a68:	2b01      	cmp	r3, #1
 8005a6a:	d108      	bne.n	8005a7e <start_sectionA+0x16a>
			driveA(10000, SPEED_MIN, SPEED_HIGH_HIGH, SEC_HALF);					//a半区画分加速しながら走行。走行後は停止しない
 8005a6c:	235b      	movs	r3, #91	; 0x5b
 8005a6e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005a72:	211e      	movs	r1, #30
 8005a74:	f242 7010 	movw	r0, #10000	; 0x2710
 8005a78:	f7ff fabc 	bl	8004ff4 <driveA>
 8005a7c:	e06a      	b.n	8005b54 <start_sectionA+0x240>
		}else if(start_mode == 2){
 8005a7e:	4b3d      	ldr	r3, [pc, #244]	; (8005b74 <start_sectionA+0x260>)
 8005a80:	781b      	ldrb	r3, [r3, #0]
 8005a82:	b2db      	uxtb	r3, r3
 8005a84:	2b02      	cmp	r3, #2
 8005a86:	d165      	bne.n	8005b54 <start_sectionA+0x240>
			driveA(15000, SPEED_MIN, SPEED_HIGH_HIGH, SEC_START_HALF);			//aスタート半区画分加速しながら走行。走行後は停止しない
 8005a88:	232d      	movs	r3, #45	; 0x2d
 8005a8a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005a8e:	211e      	movs	r1, #30
 8005a90:	f643 2098 	movw	r0, #15000	; 0x3a98
 8005a94:	f7ff faae 	bl	8004ff4 <driveA>
 8005a98:	e05c      	b.n	8005b54 <start_sectionA+0x240>
		}
	}else if(run_mode == 5){
 8005a9a:	4b35      	ldr	r3, [pc, #212]	; (8005b70 <start_sectionA+0x25c>)
 8005a9c:	781b      	ldrb	r3, [r3, #0]
 8005a9e:	b2db      	uxtb	r3, r3
 8005aa0:	2b05      	cmp	r3, #5
 8005aa2:	d129      	bne.n	8005af8 <start_sectionA+0x1e4>
		if(start_mode == 0){
 8005aa4:	4b33      	ldr	r3, [pc, #204]	; (8005b74 <start_sectionA+0x260>)
 8005aa6:	781b      	ldrb	r3, [r3, #0]
 8005aa8:	b2db      	uxtb	r3, r3
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d108      	bne.n	8005ac0 <start_sectionA+0x1ac>
			driveA(10000, SPEED_MIN, SPEED_5, SEC_START);					//aスタート区画分加速しながら走行。走行後は停止しない
 8005aae:	2388      	movs	r3, #136	; 0x88
 8005ab0:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8005ab4:	211e      	movs	r1, #30
 8005ab6:	f242 7010 	movw	r0, #10000	; 0x2710
 8005aba:	f7ff fa9b 	bl	8004ff4 <driveA>
 8005abe:	e049      	b.n	8005b54 <start_sectionA+0x240>
		}else if(start_mode == 1){
 8005ac0:	4b2c      	ldr	r3, [pc, #176]	; (8005b74 <start_sectionA+0x260>)
 8005ac2:	781b      	ldrb	r3, [r3, #0]
 8005ac4:	b2db      	uxtb	r3, r3
 8005ac6:	2b01      	cmp	r3, #1
 8005ac8:	d108      	bne.n	8005adc <start_sectionA+0x1c8>
			driveA(10000, SPEED_MIN, SPEED_5, SEC_HALF);					//a半区画分加速しながら走行。走行後は停止しない
 8005aca:	235b      	movs	r3, #91	; 0x5b
 8005acc:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8005ad0:	211e      	movs	r1, #30
 8005ad2:	f242 7010 	movw	r0, #10000	; 0x2710
 8005ad6:	f7ff fa8d 	bl	8004ff4 <driveA>
 8005ada:	e03b      	b.n	8005b54 <start_sectionA+0x240>
		}else if(start_mode == 2){
 8005adc:	4b25      	ldr	r3, [pc, #148]	; (8005b74 <start_sectionA+0x260>)
 8005ade:	781b      	ldrb	r3, [r3, #0]
 8005ae0:	b2db      	uxtb	r3, r3
 8005ae2:	2b02      	cmp	r3, #2
 8005ae4:	d136      	bne.n	8005b54 <start_sectionA+0x240>
			driveA(20000, SPEED_MIN, SPEED_5, SEC_START_HALF);			//aスタート半区画分加速しながら走行。走行後は停止しない
 8005ae6:	232d      	movs	r3, #45	; 0x2d
 8005ae8:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8005aec:	211e      	movs	r1, #30
 8005aee:	f644 6020 	movw	r0, #20000	; 0x4e20
 8005af2:	f7ff fa7f 	bl	8004ff4 <driveA>
 8005af6:	e02d      	b.n	8005b54 <start_sectionA+0x240>
		}
	}else if(run_mode == 6){
 8005af8:	4b1d      	ldr	r3, [pc, #116]	; (8005b70 <start_sectionA+0x25c>)
 8005afa:	781b      	ldrb	r3, [r3, #0]
 8005afc:	b2db      	uxtb	r3, r3
 8005afe:	2b06      	cmp	r3, #6
 8005b00:	d128      	bne.n	8005b54 <start_sectionA+0x240>
		if(start_mode == 0){
 8005b02:	4b1c      	ldr	r3, [pc, #112]	; (8005b74 <start_sectionA+0x260>)
 8005b04:	781b      	ldrb	r3, [r3, #0]
 8005b06:	b2db      	uxtb	r3, r3
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d108      	bne.n	8005b1e <start_sectionA+0x20a>
			driveA(25000, SPEED_MIN, SPEED_5, SEC_START);					//aスタート区画分加速しながら走行。走行後は停止しない
 8005b0c:	2388      	movs	r3, #136	; 0x88
 8005b0e:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8005b12:	211e      	movs	r1, #30
 8005b14:	f246 10a8 	movw	r0, #25000	; 0x61a8
 8005b18:	f7ff fa6c 	bl	8004ff4 <driveA>
 8005b1c:	e01a      	b.n	8005b54 <start_sectionA+0x240>
		}else if(start_mode == 1){
 8005b1e:	4b15      	ldr	r3, [pc, #84]	; (8005b74 <start_sectionA+0x260>)
 8005b20:	781b      	ldrb	r3, [r3, #0]
 8005b22:	b2db      	uxtb	r3, r3
 8005b24:	2b01      	cmp	r3, #1
 8005b26:	d108      	bne.n	8005b3a <start_sectionA+0x226>
			driveA(25000, SPEED_MIN, SPEED_5, SEC_HALF);					//a半区画分加速しながら走行。走行後は停止しない
 8005b28:	235b      	movs	r3, #91	; 0x5b
 8005b2a:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8005b2e:	211e      	movs	r1, #30
 8005b30:	f246 10a8 	movw	r0, #25000	; 0x61a8
 8005b34:	f7ff fa5e 	bl	8004ff4 <driveA>
 8005b38:	e00c      	b.n	8005b54 <start_sectionA+0x240>
		}else if(start_mode == 2){
 8005b3a:	4b0e      	ldr	r3, [pc, #56]	; (8005b74 <start_sectionA+0x260>)
 8005b3c:	781b      	ldrb	r3, [r3, #0]
 8005b3e:	b2db      	uxtb	r3, r3
 8005b40:	2b02      	cmp	r3, #2
 8005b42:	d107      	bne.n	8005b54 <start_sectionA+0x240>
			driveA(45000, SPEED_MIN, SPEED_5, SEC_START_HALF);			//aスタート半区画分加速しながら走行。走行後は停止しない
 8005b44:	232d      	movs	r3, #45	; 0x2d
 8005b46:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8005b4a:	211e      	movs	r1, #30
 8005b4c:	f64a 70c8 	movw	r0, #45000	; 0xafc8
 8005b50:	f7ff fa50 	bl	8004ff4 <driveA>
		}
	}
	start_mode = 1;
 8005b54:	4b07      	ldr	r3, [pc, #28]	; (8005b74 <start_sectionA+0x260>)
 8005b56:	2201      	movs	r2, #1
 8005b58:	701a      	strb	r2, [r3, #0]
	if(!MF.FLAG.SCND)get_wall_info();								//壁情報を取得，片壁制御の有効・無効の判断
 8005b5a:	4b07      	ldr	r3, [pc, #28]	; (8005b78 <start_sectionA+0x264>)
 8005b5c:	881b      	ldrh	r3, [r3, #0]
 8005b5e:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8005b62:	b2db      	uxtb	r3, r3
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d101      	bne.n	8005b6c <start_sectionA+0x258>
 8005b68:	f00b feb2 	bl	80118d0 <get_wall_info>
}
 8005b6c:	bf00      	nop
 8005b6e:	bd80      	pop	{r7, pc}
 8005b70:	20000456 	.word	0x20000456
 8005b74:	200015c8 	.word	0x200015c8
 8005b78:	20000f68 	.word	0x20000f68

08005b7c <half_sectionA>:
//half_sectionA
// 半区画分加速しながら走行する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void half_sectionA(void){
 8005b7c:	b580      	push	{r7, lr}
 8005b7e:	af00      	add	r7, sp, #0

	control_start();
 8005b80:	f7ff f902 	bl	8004d88 <control_start>
	if(run_mode == LOW){
 8005b84:	4b2e      	ldr	r3, [pc, #184]	; (8005c40 <half_sectionA+0xc4>)
 8005b86:	781b      	ldrb	r3, [r3, #0]
 8005b88:	b2db      	uxtb	r3, r3
 8005b8a:	2b01      	cmp	r3, #1
 8005b8c:	d108      	bne.n	8005ba0 <half_sectionA+0x24>
		driveA(4000, SPEED_MIN, SPEED_LOW, SEC_HALF);						//半区画分加速しながら走行。走行後は停止しない
 8005b8e:	235b      	movs	r3, #91	; 0x5b
 8005b90:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8005b94:	211e      	movs	r1, #30
 8005b96:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8005b9a:	f7ff fa2b 	bl	8004ff4 <driveA>
 8005b9e:	e044      	b.n	8005c2a <half_sectionA+0xae>
	}else if(run_mode == MIDDLE){
 8005ba0:	4b27      	ldr	r3, [pc, #156]	; (8005c40 <half_sectionA+0xc4>)
 8005ba2:	781b      	ldrb	r3, [r3, #0]
 8005ba4:	b2db      	uxtb	r3, r3
 8005ba6:	2b02      	cmp	r3, #2
 8005ba8:	d108      	bne.n	8005bbc <half_sectionA+0x40>
		driveA(6000, SPEED_MIN, SPEED_MIDDLE, SEC_HALF);					//半区画分加速しながら走行。走行後は停止しない
 8005baa:	235b      	movs	r3, #91	; 0x5b
 8005bac:	f44f 7216 	mov.w	r2, #600	; 0x258
 8005bb0:	211e      	movs	r1, #30
 8005bb2:	f241 7070 	movw	r0, #6000	; 0x1770
 8005bb6:	f7ff fa1d 	bl	8004ff4 <driveA>
 8005bba:	e036      	b.n	8005c2a <half_sectionA+0xae>
	}else if(run_mode == HIGH){
 8005bbc:	4b20      	ldr	r3, [pc, #128]	; (8005c40 <half_sectionA+0xc4>)
 8005bbe:	781b      	ldrb	r3, [r3, #0]
 8005bc0:	b2db      	uxtb	r3, r3
 8005bc2:	2b03      	cmp	r3, #3
 8005bc4:	d108      	bne.n	8005bd8 <half_sectionA+0x5c>
		driveA(8000, SPEED_MIN, SPEED_HIGH, SEC_HALF);						//半区画分加速しながら走行。走行後は停止しない
 8005bc6:	235b      	movs	r3, #91	; 0x5b
 8005bc8:	f44f 7248 	mov.w	r2, #800	; 0x320
 8005bcc:	211e      	movs	r1, #30
 8005bce:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 8005bd2:	f7ff fa0f 	bl	8004ff4 <driveA>
 8005bd6:	e028      	b.n	8005c2a <half_sectionA+0xae>
	}else if(run_mode == HIGH_HIGH){
 8005bd8:	4b19      	ldr	r3, [pc, #100]	; (8005c40 <half_sectionA+0xc4>)
 8005bda:	781b      	ldrb	r3, [r3, #0]
 8005bdc:	b2db      	uxtb	r3, r3
 8005bde:	2b04      	cmp	r3, #4
 8005be0:	d108      	bne.n	8005bf4 <half_sectionA+0x78>
		driveA(10000, SPEED_MIN, SPEED_HIGH_HIGH, SEC_HALF);						//半区画分加速しながら走行。走行後は停止しない
 8005be2:	235b      	movs	r3, #91	; 0x5b
 8005be4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005be8:	211e      	movs	r1, #30
 8005bea:	f242 7010 	movw	r0, #10000	; 0x2710
 8005bee:	f7ff fa01 	bl	8004ff4 <driveA>
 8005bf2:	e01a      	b.n	8005c2a <half_sectionA+0xae>
	}else if(run_mode == 5){
 8005bf4:	4b12      	ldr	r3, [pc, #72]	; (8005c40 <half_sectionA+0xc4>)
 8005bf6:	781b      	ldrb	r3, [r3, #0]
 8005bf8:	b2db      	uxtb	r3, r3
 8005bfa:	2b05      	cmp	r3, #5
 8005bfc:	d108      	bne.n	8005c10 <half_sectionA+0x94>
		driveA(10000, SPEED_MIN, SPEED_5, SEC_HALF);						//半区画分加速しながら走行。走行後は停止しない
 8005bfe:	235b      	movs	r3, #91	; 0x5b
 8005c00:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8005c04:	211e      	movs	r1, #30
 8005c06:	f242 7010 	movw	r0, #10000	; 0x2710
 8005c0a:	f7ff f9f3 	bl	8004ff4 <driveA>
 8005c0e:	e00c      	b.n	8005c2a <half_sectionA+0xae>
	}else if(run_mode == 6){
 8005c10:	4b0b      	ldr	r3, [pc, #44]	; (8005c40 <half_sectionA+0xc4>)
 8005c12:	781b      	ldrb	r3, [r3, #0]
 8005c14:	b2db      	uxtb	r3, r3
 8005c16:	2b06      	cmp	r3, #6
 8005c18:	d107      	bne.n	8005c2a <half_sectionA+0xae>
		driveA(25000, SPEED_MIN, SPEED_6, SEC_HALF);						//半区画分加速しながら走行。走行後は停止しない
 8005c1a:	235b      	movs	r3, #91	; 0x5b
 8005c1c:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8005c20:	211e      	movs	r1, #30
 8005c22:	f246 10a8 	movw	r0, #25000	; 0x61a8
 8005c26:	f7ff f9e5 	bl	8004ff4 <driveA>
	}
	if(!MF.FLAG.SCND)get_wall_info();										//壁情報を取得，片壁制御の有効・無効の判断
 8005c2a:	4b06      	ldr	r3, [pc, #24]	; (8005c44 <half_sectionA+0xc8>)
 8005c2c:	881b      	ldrh	r3, [r3, #0]
 8005c2e:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8005c32:	b2db      	uxtb	r3, r3
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d101      	bne.n	8005c3c <half_sectionA+0xc0>
 8005c38:	f00b fe4a 	bl	80118d0 <get_wall_info>
}
 8005c3c:	bf00      	nop
 8005c3e:	bd80      	pop	{r7, pc}
 8005c40:	20000456 	.word	0x20000456
 8005c44:	20000f68 	.word	0x20000f68

08005c48 <half_sectionD>:
//half_sectionD
// 半区画分減速しながら走行し停止する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void half_sectionD(void){
 8005c48:	b580      	push	{r7, lr}
 8005c4a:	af00      	add	r7, sp, #0
	full_led_write(BLUE);
 8005c4c:	2003      	movs	r0, #3
 8005c4e:	f00b feb3 	bl	80119b8 <full_led_write>

	control_start();
 8005c52:	f7ff f899 	bl	8004d88 <control_start>
	if(run_mode == LOW){
 8005c56:	4b27      	ldr	r3, [pc, #156]	; (8005cf4 <half_sectionD+0xac>)
 8005c58:	781b      	ldrb	r3, [r3, #0]
 8005c5a:	b2db      	uxtb	r3, r3
 8005c5c:	2b01      	cmp	r3, #1
 8005c5e:	d107      	bne.n	8005c70 <half_sectionD+0x28>
		driveD(-4000, SPEED_MIN, SPEED_LOW, SEC_HALF);						//半区画分指定減速度で減速走行。走行後は停止する
 8005c60:	235b      	movs	r3, #91	; 0x5b
 8005c62:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8005c66:	211e      	movs	r1, #30
 8005c68:	4823      	ldr	r0, [pc, #140]	; (8005cf8 <half_sectionD+0xb0>)
 8005c6a:	f7ff fa3d 	bl	80050e8 <driveD>
	}else if(run_mode == 5){
		driveD(-8000, SPEED_MIN, SPEED_5, SEC_HALF);				//半区画分指定減速度で減速走行。走行後は停止する
	}else if(run_mode == 6){
		driveD(-25000, SPEED_MIN, SPEED_6, SEC_HALF);				//半区画分指定減速度で減速走行。走行後は停止する
	}
}
 8005c6e:	e03f      	b.n	8005cf0 <half_sectionD+0xa8>
	}else if(run_mode == MIDDLE){
 8005c70:	4b20      	ldr	r3, [pc, #128]	; (8005cf4 <half_sectionD+0xac>)
 8005c72:	781b      	ldrb	r3, [r3, #0]
 8005c74:	b2db      	uxtb	r3, r3
 8005c76:	2b02      	cmp	r3, #2
 8005c78:	d107      	bne.n	8005c8a <half_sectionD+0x42>
		driveD(-4000, SPEED_MIN, SPEED_MIDDLE, SEC_HALF);					//半区画分指定減速度で減速走行。走行後は停止する
 8005c7a:	235b      	movs	r3, #91	; 0x5b
 8005c7c:	f44f 7216 	mov.w	r2, #600	; 0x258
 8005c80:	211e      	movs	r1, #30
 8005c82:	481d      	ldr	r0, [pc, #116]	; (8005cf8 <half_sectionD+0xb0>)
 8005c84:	f7ff fa30 	bl	80050e8 <driveD>
}
 8005c88:	e032      	b.n	8005cf0 <half_sectionD+0xa8>
	}else if(run_mode == HIGH){
 8005c8a:	4b1a      	ldr	r3, [pc, #104]	; (8005cf4 <half_sectionD+0xac>)
 8005c8c:	781b      	ldrb	r3, [r3, #0]
 8005c8e:	b2db      	uxtb	r3, r3
 8005c90:	2b03      	cmp	r3, #3
 8005c92:	d107      	bne.n	8005ca4 <half_sectionD+0x5c>
		driveD(-4000, SPEED_MIN, SPEED_HIGH, SEC_HALF);						//半区画分指定減速度で減速走行。走行後は停止する
 8005c94:	235b      	movs	r3, #91	; 0x5b
 8005c96:	f44f 7248 	mov.w	r2, #800	; 0x320
 8005c9a:	211e      	movs	r1, #30
 8005c9c:	4816      	ldr	r0, [pc, #88]	; (8005cf8 <half_sectionD+0xb0>)
 8005c9e:	f7ff fa23 	bl	80050e8 <driveD>
}
 8005ca2:	e025      	b.n	8005cf0 <half_sectionD+0xa8>
	}else if(run_mode == HIGH_HIGH){
 8005ca4:	4b13      	ldr	r3, [pc, #76]	; (8005cf4 <half_sectionD+0xac>)
 8005ca6:	781b      	ldrb	r3, [r3, #0]
 8005ca8:	b2db      	uxtb	r3, r3
 8005caa:	2b04      	cmp	r3, #4
 8005cac:	d107      	bne.n	8005cbe <half_sectionD+0x76>
		driveD(-6000, SPEED_MIN, SPEED_HIGH_HIGH, SEC_HALF);				//半区画分指定減速度で減速走行。走行後は停止する
 8005cae:	235b      	movs	r3, #91	; 0x5b
 8005cb0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005cb4:	211e      	movs	r1, #30
 8005cb6:	4811      	ldr	r0, [pc, #68]	; (8005cfc <half_sectionD+0xb4>)
 8005cb8:	f7ff fa16 	bl	80050e8 <driveD>
}
 8005cbc:	e018      	b.n	8005cf0 <half_sectionD+0xa8>
	}else if(run_mode == 5){
 8005cbe:	4b0d      	ldr	r3, [pc, #52]	; (8005cf4 <half_sectionD+0xac>)
 8005cc0:	781b      	ldrb	r3, [r3, #0]
 8005cc2:	b2db      	uxtb	r3, r3
 8005cc4:	2b05      	cmp	r3, #5
 8005cc6:	d107      	bne.n	8005cd8 <half_sectionD+0x90>
		driveD(-8000, SPEED_MIN, SPEED_5, SEC_HALF);				//半区画分指定減速度で減速走行。走行後は停止する
 8005cc8:	235b      	movs	r3, #91	; 0x5b
 8005cca:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8005cce:	211e      	movs	r1, #30
 8005cd0:	480b      	ldr	r0, [pc, #44]	; (8005d00 <half_sectionD+0xb8>)
 8005cd2:	f7ff fa09 	bl	80050e8 <driveD>
}
 8005cd6:	e00b      	b.n	8005cf0 <half_sectionD+0xa8>
	}else if(run_mode == 6){
 8005cd8:	4b06      	ldr	r3, [pc, #24]	; (8005cf4 <half_sectionD+0xac>)
 8005cda:	781b      	ldrb	r3, [r3, #0]
 8005cdc:	b2db      	uxtb	r3, r3
 8005cde:	2b06      	cmp	r3, #6
 8005ce0:	d106      	bne.n	8005cf0 <half_sectionD+0xa8>
		driveD(-25000, SPEED_MIN, SPEED_6, SEC_HALF);				//半区画分指定減速度で減速走行。走行後は停止する
 8005ce2:	235b      	movs	r3, #91	; 0x5b
 8005ce4:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8005ce8:	211e      	movs	r1, #30
 8005cea:	4806      	ldr	r0, [pc, #24]	; (8005d04 <half_sectionD+0xbc>)
 8005cec:	f7ff f9fc 	bl	80050e8 <driveD>
}
 8005cf0:	bf00      	nop
 8005cf2:	bd80      	pop	{r7, pc}
 8005cf4:	20000456 	.word	0x20000456
 8005cf8:	fffff060 	.word	0xfffff060
 8005cfc:	ffffe890 	.word	0xffffe890
 8005d00:	ffffe0c0 	.word	0xffffe0c0
 8005d04:	ffff9e58 	.word	0xffff9e58

08005d08 <half_sectionVA>:
//half_sectionVA
// 半区画分加速しながら走行する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void half_sectionVA(void){
 8005d08:	b580      	push	{r7, lr}
 8005d0a:	af00      	add	r7, sp, #0

	control_start();
 8005d0c:	f7ff f83c 	bl	8004d88 <control_start>
	if(run_mode == LOW){
 8005d10:	4b2a      	ldr	r3, [pc, #168]	; (8005dbc <half_sectionVA+0xb4>)
 8005d12:	781b      	ldrb	r3, [r3, #0]
 8005d14:	b2db      	uxtb	r3, r3
 8005d16:	2b01      	cmp	r3, #1
 8005d18:	d108      	bne.n	8005d2c <half_sectionVA+0x24>
		driveA(4000, SPEED_MIN, SPEED_LOW, SEC_HALF_V);						//半区画分加速しながら走行。走行後は停止しない
 8005d1a:	2382      	movs	r3, #130	; 0x82
 8005d1c:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8005d20:	211e      	movs	r1, #30
 8005d22:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8005d26:	f7ff f965 	bl	8004ff4 <driveA>
	}else if(run_mode == 5){
		driveA(10000, SPEED_MIN, SPEED_5, SEC_HALF_V);						//半区画分加速しながら走行。走行後は停止しない
	}else if(run_mode == 6){
		driveA(25000, SPEED_MIN, SPEED_6, SEC_HALF_V);						//半区画分加速しながら走行。走行後は停止しない
	}
}
 8005d2a:	e044      	b.n	8005db6 <half_sectionVA+0xae>
	}else if(run_mode == MIDDLE){
 8005d2c:	4b23      	ldr	r3, [pc, #140]	; (8005dbc <half_sectionVA+0xb4>)
 8005d2e:	781b      	ldrb	r3, [r3, #0]
 8005d30:	b2db      	uxtb	r3, r3
 8005d32:	2b02      	cmp	r3, #2
 8005d34:	d108      	bne.n	8005d48 <half_sectionVA+0x40>
		driveA(6000, SPEED_MIN, SPEED_MIDDLE, SEC_HALF_V);					//半区画分加速しながら走行。走行後は停止しない
 8005d36:	2382      	movs	r3, #130	; 0x82
 8005d38:	f44f 7216 	mov.w	r2, #600	; 0x258
 8005d3c:	211e      	movs	r1, #30
 8005d3e:	f241 7070 	movw	r0, #6000	; 0x1770
 8005d42:	f7ff f957 	bl	8004ff4 <driveA>
}
 8005d46:	e036      	b.n	8005db6 <half_sectionVA+0xae>
	}else if(run_mode == HIGH){
 8005d48:	4b1c      	ldr	r3, [pc, #112]	; (8005dbc <half_sectionVA+0xb4>)
 8005d4a:	781b      	ldrb	r3, [r3, #0]
 8005d4c:	b2db      	uxtb	r3, r3
 8005d4e:	2b03      	cmp	r3, #3
 8005d50:	d108      	bne.n	8005d64 <half_sectionVA+0x5c>
		driveA(8000, SPEED_MIN, SPEED_HIGH, SEC_HALF_V);						//半区画分加速しながら走行。走行後は停止しない
 8005d52:	2382      	movs	r3, #130	; 0x82
 8005d54:	f44f 7248 	mov.w	r2, #800	; 0x320
 8005d58:	211e      	movs	r1, #30
 8005d5a:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 8005d5e:	f7ff f949 	bl	8004ff4 <driveA>
}
 8005d62:	e028      	b.n	8005db6 <half_sectionVA+0xae>
	}else if(run_mode == HIGH_HIGH){
 8005d64:	4b15      	ldr	r3, [pc, #84]	; (8005dbc <half_sectionVA+0xb4>)
 8005d66:	781b      	ldrb	r3, [r3, #0]
 8005d68:	b2db      	uxtb	r3, r3
 8005d6a:	2b04      	cmp	r3, #4
 8005d6c:	d108      	bne.n	8005d80 <half_sectionVA+0x78>
		driveA(10000, SPEED_MIN, SPEED_HIGH_HIGH, SEC_HALF_V);						//半区画分加速しながら走行。走行後は停止しない
 8005d6e:	2382      	movs	r3, #130	; 0x82
 8005d70:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005d74:	211e      	movs	r1, #30
 8005d76:	f242 7010 	movw	r0, #10000	; 0x2710
 8005d7a:	f7ff f93b 	bl	8004ff4 <driveA>
}
 8005d7e:	e01a      	b.n	8005db6 <half_sectionVA+0xae>
	}else if(run_mode == 5){
 8005d80:	4b0e      	ldr	r3, [pc, #56]	; (8005dbc <half_sectionVA+0xb4>)
 8005d82:	781b      	ldrb	r3, [r3, #0]
 8005d84:	b2db      	uxtb	r3, r3
 8005d86:	2b05      	cmp	r3, #5
 8005d88:	d108      	bne.n	8005d9c <half_sectionVA+0x94>
		driveA(10000, SPEED_MIN, SPEED_5, SEC_HALF_V);						//半区画分加速しながら走行。走行後は停止しない
 8005d8a:	2382      	movs	r3, #130	; 0x82
 8005d8c:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8005d90:	211e      	movs	r1, #30
 8005d92:	f242 7010 	movw	r0, #10000	; 0x2710
 8005d96:	f7ff f92d 	bl	8004ff4 <driveA>
}
 8005d9a:	e00c      	b.n	8005db6 <half_sectionVA+0xae>
	}else if(run_mode == 6){
 8005d9c:	4b07      	ldr	r3, [pc, #28]	; (8005dbc <half_sectionVA+0xb4>)
 8005d9e:	781b      	ldrb	r3, [r3, #0]
 8005da0:	b2db      	uxtb	r3, r3
 8005da2:	2b06      	cmp	r3, #6
 8005da4:	d107      	bne.n	8005db6 <half_sectionVA+0xae>
		driveA(25000, SPEED_MIN, SPEED_6, SEC_HALF_V);						//半区画分加速しながら走行。走行後は停止しない
 8005da6:	2382      	movs	r3, #130	; 0x82
 8005da8:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8005dac:	211e      	movs	r1, #30
 8005dae:	f246 10a8 	movw	r0, #25000	; 0x61a8
 8005db2:	f7ff f91f 	bl	8004ff4 <driveA>
}
 8005db6:	bf00      	nop
 8005db8:	bd80      	pop	{r7, pc}
 8005dba:	bf00      	nop
 8005dbc:	20000456 	.word	0x20000456

08005dc0 <half_sectionVD>:
//half_sectionVD
// 半区画分減速しながら走行し停止する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void half_sectionVD(void){
 8005dc0:	b580      	push	{r7, lr}
 8005dc2:	af00      	add	r7, sp, #0
	full_led_write(BLUE);
 8005dc4:	2003      	movs	r0, #3
 8005dc6:	f00b fdf7 	bl	80119b8 <full_led_write>

	control_start();
 8005dca:	f7fe ffdd 	bl	8004d88 <control_start>
	if(run_mode == LOW){
 8005dce:	4b27      	ldr	r3, [pc, #156]	; (8005e6c <half_sectionVD+0xac>)
 8005dd0:	781b      	ldrb	r3, [r3, #0]
 8005dd2:	b2db      	uxtb	r3, r3
 8005dd4:	2b01      	cmp	r3, #1
 8005dd6:	d107      	bne.n	8005de8 <half_sectionVD+0x28>
		driveD(-4000, SPEED_MIN, SPEED_LOW, SEC_HALF_V);						//半区画分指定減速度で減速走行。走行後は停止する
 8005dd8:	2382      	movs	r3, #130	; 0x82
 8005dda:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8005dde:	211e      	movs	r1, #30
 8005de0:	4823      	ldr	r0, [pc, #140]	; (8005e70 <half_sectionVD+0xb0>)
 8005de2:	f7ff f981 	bl	80050e8 <driveD>
	}else if(run_mode == 5){
		driveD(-8000, SPEED_MIN, SPEED_5, SEC_HALF_V);						//半区画分指定減速度で減速走行。走行後は停止する
	}else if(run_mode == 6){
		driveD(-25000, SPEED_MIN, SPEED_6, SEC_HALF_V);						//半区画分指定減速度で減速走行。走行後は停止する
	}
}
 8005de6:	e03f      	b.n	8005e68 <half_sectionVD+0xa8>
	}else if(run_mode == MIDDLE){
 8005de8:	4b20      	ldr	r3, [pc, #128]	; (8005e6c <half_sectionVD+0xac>)
 8005dea:	781b      	ldrb	r3, [r3, #0]
 8005dec:	b2db      	uxtb	r3, r3
 8005dee:	2b02      	cmp	r3, #2
 8005df0:	d107      	bne.n	8005e02 <half_sectionVD+0x42>
		driveD(-4000, SPEED_MIN, SPEED_MIDDLE, SEC_HALF_V);					//半区画分指定減速度で減速走行。走行後は停止する
 8005df2:	2382      	movs	r3, #130	; 0x82
 8005df4:	f44f 7216 	mov.w	r2, #600	; 0x258
 8005df8:	211e      	movs	r1, #30
 8005dfa:	481d      	ldr	r0, [pc, #116]	; (8005e70 <half_sectionVD+0xb0>)
 8005dfc:	f7ff f974 	bl	80050e8 <driveD>
}
 8005e00:	e032      	b.n	8005e68 <half_sectionVD+0xa8>
	}else if(run_mode == HIGH){
 8005e02:	4b1a      	ldr	r3, [pc, #104]	; (8005e6c <half_sectionVD+0xac>)
 8005e04:	781b      	ldrb	r3, [r3, #0]
 8005e06:	b2db      	uxtb	r3, r3
 8005e08:	2b03      	cmp	r3, #3
 8005e0a:	d107      	bne.n	8005e1c <half_sectionVD+0x5c>
		driveD(-4000, SPEED_MIN, SPEED_HIGH, SEC_HALF_V);						//半区画分指定減速度で減速走行。走行後は停止する
 8005e0c:	2382      	movs	r3, #130	; 0x82
 8005e0e:	f44f 7248 	mov.w	r2, #800	; 0x320
 8005e12:	211e      	movs	r1, #30
 8005e14:	4816      	ldr	r0, [pc, #88]	; (8005e70 <half_sectionVD+0xb0>)
 8005e16:	f7ff f967 	bl	80050e8 <driveD>
}
 8005e1a:	e025      	b.n	8005e68 <half_sectionVD+0xa8>
	}else if(run_mode == HIGH_HIGH){
 8005e1c:	4b13      	ldr	r3, [pc, #76]	; (8005e6c <half_sectionVD+0xac>)
 8005e1e:	781b      	ldrb	r3, [r3, #0]
 8005e20:	b2db      	uxtb	r3, r3
 8005e22:	2b04      	cmp	r3, #4
 8005e24:	d107      	bne.n	8005e36 <half_sectionVD+0x76>
		driveD(-6000, SPEED_MIN, SPEED_HIGH_HIGH, SEC_HALF_V);						//半区画分指定減速度で減速走行。走行後は停止する
 8005e26:	2382      	movs	r3, #130	; 0x82
 8005e28:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005e2c:	211e      	movs	r1, #30
 8005e2e:	4811      	ldr	r0, [pc, #68]	; (8005e74 <half_sectionVD+0xb4>)
 8005e30:	f7ff f95a 	bl	80050e8 <driveD>
}
 8005e34:	e018      	b.n	8005e68 <half_sectionVD+0xa8>
	}else if(run_mode == 5){
 8005e36:	4b0d      	ldr	r3, [pc, #52]	; (8005e6c <half_sectionVD+0xac>)
 8005e38:	781b      	ldrb	r3, [r3, #0]
 8005e3a:	b2db      	uxtb	r3, r3
 8005e3c:	2b05      	cmp	r3, #5
 8005e3e:	d107      	bne.n	8005e50 <half_sectionVD+0x90>
		driveD(-8000, SPEED_MIN, SPEED_5, SEC_HALF_V);						//半区画分指定減速度で減速走行。走行後は停止する
 8005e40:	2382      	movs	r3, #130	; 0x82
 8005e42:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8005e46:	211e      	movs	r1, #30
 8005e48:	480b      	ldr	r0, [pc, #44]	; (8005e78 <half_sectionVD+0xb8>)
 8005e4a:	f7ff f94d 	bl	80050e8 <driveD>
}
 8005e4e:	e00b      	b.n	8005e68 <half_sectionVD+0xa8>
	}else if(run_mode == 6){
 8005e50:	4b06      	ldr	r3, [pc, #24]	; (8005e6c <half_sectionVD+0xac>)
 8005e52:	781b      	ldrb	r3, [r3, #0]
 8005e54:	b2db      	uxtb	r3, r3
 8005e56:	2b06      	cmp	r3, #6
 8005e58:	d106      	bne.n	8005e68 <half_sectionVD+0xa8>
		driveD(-25000, SPEED_MIN, SPEED_6, SEC_HALF_V);						//半区画分指定減速度で減速走行。走行後は停止する
 8005e5a:	2382      	movs	r3, #130	; 0x82
 8005e5c:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8005e60:	211e      	movs	r1, #30
 8005e62:	4806      	ldr	r0, [pc, #24]	; (8005e7c <half_sectionVD+0xbc>)
 8005e64:	f7ff f940 	bl	80050e8 <driveD>
}
 8005e68:	bf00      	nop
 8005e6a:	bd80      	pop	{r7, pc}
 8005e6c:	20000456 	.word	0x20000456
 8005e70:	fffff060 	.word	0xfffff060
 8005e74:	ffffe890 	.word	0xffffe890
 8005e78:	ffffe0c0 	.word	0xffffe0c0
 8005e7c:	ffff9e58 	.word	0xffff9e58

08005e80 <half_sectionU>:
//half_sectionU
// 等速で半区画分進む
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void half_sectionU(void){
 8005e80:	b580      	push	{r7, lr}
 8005e82:	af00      	add	r7, sp, #0
	full_led_write(WHITE);
 8005e84:	2007      	movs	r0, #7
 8005e86:	f00b fd97 	bl	80119b8 <full_led_write>
	control_start();
 8005e8a:	f7fe ff7d 	bl	8004d88 <control_start>
	driveU(SEC_HALF);													//半区画分等速走行。走行後は停止しない
 8005e8e:	205b      	movs	r0, #91	; 0x5b
 8005e90:	f7ff fa04 	bl	800529c <driveU>
}
 8005e94:	bf00      	nop
 8005e96:	bd80      	pop	{r7, pc}

08005e98 <half_sectionV>:
//half_sectionV
// 等速で斜め半区画分進む
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void half_sectionV(void){
 8005e98:	b580      	push	{r7, lr}
 8005e9a:	af00      	add	r7, sp, #0
	full_led_write(WHITE);
 8005e9c:	2007      	movs	r0, #7
 8005e9e:	f00b fd8b 	bl	80119b8 <full_led_write>
	control_start();
 8005ea2:	f7fe ff71 	bl	8004d88 <control_start>
	driveU(SEC_HALF_V);													//半区画分等速走行。走行後は停止しない
 8005ea6:	2082      	movs	r0, #130	; 0x82
 8005ea8:	f7ff f9f8 	bl	800529c <driveU>
}
 8005eac:	bf00      	nop
 8005eae:	bd80      	pop	{r7, pc}

08005eb0 <one_section>:
//one_section
// 1区画分進んで停止する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void one_section(void){
 8005eb0:	b580      	push	{r7, lr}
 8005eb2:	af00      	add	r7, sp, #0

	half_sectionA();													//半区画分加速走行
 8005eb4:	f7ff fe62 	bl	8005b7c <half_sectionA>
	half_sectionD();													//半区画分減速走行のち停止
 8005eb8:	f7ff fec6 	bl	8005c48 <half_sectionD>
}
 8005ebc:	bf00      	nop
 8005ebe:	bd80      	pop	{r7, pc}

08005ec0 <one_sectionA>:
//one_sectionA
// 1区画分加速する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void one_sectionA(void){
 8005ec0:	b580      	push	{r7, lr}
 8005ec2:	af00      	add	r7, sp, #0
	full_led_write(BLUEGREEN);
 8005ec4:	2004      	movs	r0, #4
 8005ec6:	f00b fd77 	bl	80119b8 <full_led_write>
	control_start();
 8005eca:	f7fe ff5d 	bl	8004d88 <control_start>
	if(run_mode == LOW){
 8005ece:	4b3e      	ldr	r3, [pc, #248]	; (8005fc8 <one_sectionA+0x108>)
 8005ed0:	781b      	ldrb	r3, [r3, #0]
 8005ed2:	b2db      	uxtb	r3, r3
 8005ed4:	2b01      	cmp	r3, #1
 8005ed6:	d10d      	bne.n	8005ef4 <one_sectionA+0x34>
		driveA(accel_hs, SPEED_LOW, speed_max_hs, SEC_HALF*2);				//1区画分加速走行。走行後は停止しない
 8005ed8:	4b3c      	ldr	r3, [pc, #240]	; (8005fcc <one_sectionA+0x10c>)
 8005eda:	881b      	ldrh	r3, [r3, #0]
 8005edc:	b21b      	sxth	r3, r3
 8005ede:	b298      	uxth	r0, r3
 8005ee0:	4b3b      	ldr	r3, [pc, #236]	; (8005fd0 <one_sectionA+0x110>)
 8005ee2:	881b      	ldrh	r3, [r3, #0]
 8005ee4:	b21b      	sxth	r3, r3
 8005ee6:	b29a      	uxth	r2, r3
 8005ee8:	23b6      	movs	r3, #182	; 0xb6
 8005eea:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8005eee:	f7ff f881 	bl	8004ff4 <driveA>
 8005ef2:	e05d      	b.n	8005fb0 <one_sectionA+0xf0>
	}else if(run_mode == MIDDLE){
 8005ef4:	4b34      	ldr	r3, [pc, #208]	; (8005fc8 <one_sectionA+0x108>)
 8005ef6:	781b      	ldrb	r3, [r3, #0]
 8005ef8:	b2db      	uxtb	r3, r3
 8005efa:	2b02      	cmp	r3, #2
 8005efc:	d10d      	bne.n	8005f1a <one_sectionA+0x5a>
		driveA(accel_hs, SPEED_MIDDLE, speed_max_hs, SEC_HALF*2);			//1区画分加速走行。走行後は停止しない
 8005efe:	4b33      	ldr	r3, [pc, #204]	; (8005fcc <one_sectionA+0x10c>)
 8005f00:	881b      	ldrh	r3, [r3, #0]
 8005f02:	b21b      	sxth	r3, r3
 8005f04:	b298      	uxth	r0, r3
 8005f06:	4b32      	ldr	r3, [pc, #200]	; (8005fd0 <one_sectionA+0x110>)
 8005f08:	881b      	ldrh	r3, [r3, #0]
 8005f0a:	b21b      	sxth	r3, r3
 8005f0c:	b29a      	uxth	r2, r3
 8005f0e:	23b6      	movs	r3, #182	; 0xb6
 8005f10:	f44f 7116 	mov.w	r1, #600	; 0x258
 8005f14:	f7ff f86e 	bl	8004ff4 <driveA>
 8005f18:	e04a      	b.n	8005fb0 <one_sectionA+0xf0>
	}else if(run_mode == HIGH){
 8005f1a:	4b2b      	ldr	r3, [pc, #172]	; (8005fc8 <one_sectionA+0x108>)
 8005f1c:	781b      	ldrb	r3, [r3, #0]
 8005f1e:	b2db      	uxtb	r3, r3
 8005f20:	2b03      	cmp	r3, #3
 8005f22:	d10d      	bne.n	8005f40 <one_sectionA+0x80>
		driveA(accel_hs, SPEED_HIGH, speed_max_hs, SEC_HALF*2);				//1区画分加速走行。走行後は停止しない
 8005f24:	4b29      	ldr	r3, [pc, #164]	; (8005fcc <one_sectionA+0x10c>)
 8005f26:	881b      	ldrh	r3, [r3, #0]
 8005f28:	b21b      	sxth	r3, r3
 8005f2a:	b298      	uxth	r0, r3
 8005f2c:	4b28      	ldr	r3, [pc, #160]	; (8005fd0 <one_sectionA+0x110>)
 8005f2e:	881b      	ldrh	r3, [r3, #0]
 8005f30:	b21b      	sxth	r3, r3
 8005f32:	b29a      	uxth	r2, r3
 8005f34:	23b6      	movs	r3, #182	; 0xb6
 8005f36:	f44f 7148 	mov.w	r1, #800	; 0x320
 8005f3a:	f7ff f85b 	bl	8004ff4 <driveA>
 8005f3e:	e037      	b.n	8005fb0 <one_sectionA+0xf0>
	}else if(run_mode == HIGH_HIGH){
 8005f40:	4b21      	ldr	r3, [pc, #132]	; (8005fc8 <one_sectionA+0x108>)
 8005f42:	781b      	ldrb	r3, [r3, #0]
 8005f44:	b2db      	uxtb	r3, r3
 8005f46:	2b04      	cmp	r3, #4
 8005f48:	d10d      	bne.n	8005f66 <one_sectionA+0xa6>
		driveA(accel_hs, SPEED_HIGH_HIGH, speed_max_hs, SEC_HALF*2);				//1区画分加速走行。走行後は停止しない
 8005f4a:	4b20      	ldr	r3, [pc, #128]	; (8005fcc <one_sectionA+0x10c>)
 8005f4c:	881b      	ldrh	r3, [r3, #0]
 8005f4e:	b21b      	sxth	r3, r3
 8005f50:	b298      	uxth	r0, r3
 8005f52:	4b1f      	ldr	r3, [pc, #124]	; (8005fd0 <one_sectionA+0x110>)
 8005f54:	881b      	ldrh	r3, [r3, #0]
 8005f56:	b21b      	sxth	r3, r3
 8005f58:	b29a      	uxth	r2, r3
 8005f5a:	23b6      	movs	r3, #182	; 0xb6
 8005f5c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8005f60:	f7ff f848 	bl	8004ff4 <driveA>
 8005f64:	e024      	b.n	8005fb0 <one_sectionA+0xf0>
	}else if(run_mode == 5){
 8005f66:	4b18      	ldr	r3, [pc, #96]	; (8005fc8 <one_sectionA+0x108>)
 8005f68:	781b      	ldrb	r3, [r3, #0]
 8005f6a:	b2db      	uxtb	r3, r3
 8005f6c:	2b05      	cmp	r3, #5
 8005f6e:	d10d      	bne.n	8005f8c <one_sectionA+0xcc>
		driveA(accel_hs, SPEED_5, speed_max_hs, SEC_HALF*2);				//1区画分加速走行。走行後は停止しない
 8005f70:	4b16      	ldr	r3, [pc, #88]	; (8005fcc <one_sectionA+0x10c>)
 8005f72:	881b      	ldrh	r3, [r3, #0]
 8005f74:	b21b      	sxth	r3, r3
 8005f76:	b298      	uxth	r0, r3
 8005f78:	4b15      	ldr	r3, [pc, #84]	; (8005fd0 <one_sectionA+0x110>)
 8005f7a:	881b      	ldrh	r3, [r3, #0]
 8005f7c:	b21b      	sxth	r3, r3
 8005f7e:	b29a      	uxth	r2, r3
 8005f80:	23b6      	movs	r3, #182	; 0xb6
 8005f82:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 8005f86:	f7ff f835 	bl	8004ff4 <driveA>
 8005f8a:	e011      	b.n	8005fb0 <one_sectionA+0xf0>
	}else if(run_mode == 6){
 8005f8c:	4b0e      	ldr	r3, [pc, #56]	; (8005fc8 <one_sectionA+0x108>)
 8005f8e:	781b      	ldrb	r3, [r3, #0]
 8005f90:	b2db      	uxtb	r3, r3
 8005f92:	2b06      	cmp	r3, #6
 8005f94:	d10c      	bne.n	8005fb0 <one_sectionA+0xf0>
		driveA(accel_hs, SPEED_6, speed_max_hs, SEC_HALF*2);				//1区画分加速走行。走行後は停止しない
 8005f96:	4b0d      	ldr	r3, [pc, #52]	; (8005fcc <one_sectionA+0x10c>)
 8005f98:	881b      	ldrh	r3, [r3, #0]
 8005f9a:	b21b      	sxth	r3, r3
 8005f9c:	b298      	uxth	r0, r3
 8005f9e:	4b0c      	ldr	r3, [pc, #48]	; (8005fd0 <one_sectionA+0x110>)
 8005fa0:	881b      	ldrh	r3, [r3, #0]
 8005fa2:	b21b      	sxth	r3, r3
 8005fa4:	b29a      	uxth	r2, r3
 8005fa6:	23b6      	movs	r3, #182	; 0xb6
 8005fa8:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8005fac:	f7ff f822 	bl	8004ff4 <driveA>
	}
	if(!MF.FLAG.SCND)get_wall_info();								//壁情報を取得，片壁制御の有効・無効の判断
 8005fb0:	4b08      	ldr	r3, [pc, #32]	; (8005fd4 <one_sectionA+0x114>)
 8005fb2:	881b      	ldrh	r3, [r3, #0]
 8005fb4:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8005fb8:	b2db      	uxtb	r3, r3
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d101      	bne.n	8005fc2 <one_sectionA+0x102>
 8005fbe:	f00b fc87 	bl	80118d0 <get_wall_info>
}
 8005fc2:	bf00      	nop
 8005fc4:	bd80      	pop	{r7, pc}
 8005fc6:	bf00      	nop
 8005fc8:	20000456 	.word	0x20000456
 8005fcc:	20000454 	.word	0x20000454
 8005fd0:	20000f7c 	.word	0x20000f7c
 8005fd4:	20000f68 	.word	0x20000f68

08005fd8 <one_sectionD>:
//one_sectionD
// 1区画分減速する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void one_sectionD(void){
 8005fd8:	b580      	push	{r7, lr}
 8005fda:	af00      	add	r7, sp, #0
	full_led_write(BLUE);
 8005fdc:	2003      	movs	r0, #3
 8005fde:	f00b fceb 	bl	80119b8 <full_led_write>
	control_start();
 8005fe2:	f7fe fed1 	bl	8004d88 <control_start>
	if(run_mode == LOW){
 8005fe6:	4b47      	ldr	r3, [pc, #284]	; (8006104 <one_sectionD+0x12c>)
 8005fe8:	781b      	ldrb	r3, [r3, #0]
 8005fea:	b2db      	uxtb	r3, r3
 8005fec:	2b01      	cmp	r3, #1
 8005fee:	d110      	bne.n	8006012 <one_sectionD+0x3a>
		driveD(-accel_hs, SPEED_LOW, speed_max_hs, SEC_HALF*2);				//1区画分減速走行。走行後は停止しない
 8005ff0:	4b45      	ldr	r3, [pc, #276]	; (8006108 <one_sectionD+0x130>)
 8005ff2:	881b      	ldrh	r3, [r3, #0]
 8005ff4:	b21b      	sxth	r3, r3
 8005ff6:	b29b      	uxth	r3, r3
 8005ff8:	425b      	negs	r3, r3
 8005ffa:	b29b      	uxth	r3, r3
 8005ffc:	b218      	sxth	r0, r3
 8005ffe:	4b43      	ldr	r3, [pc, #268]	; (800610c <one_sectionD+0x134>)
 8006000:	881b      	ldrh	r3, [r3, #0]
 8006002:	b21b      	sxth	r3, r3
 8006004:	b29a      	uxth	r2, r3
 8006006:	23b6      	movs	r3, #182	; 0xb6
 8006008:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800600c:	f7ff f86c 	bl	80050e8 <driveD>
 8006010:	e06c      	b.n	80060ec <one_sectionD+0x114>
	}else if(run_mode == MIDDLE){
 8006012:	4b3c      	ldr	r3, [pc, #240]	; (8006104 <one_sectionD+0x12c>)
 8006014:	781b      	ldrb	r3, [r3, #0]
 8006016:	b2db      	uxtb	r3, r3
 8006018:	2b02      	cmp	r3, #2
 800601a:	d110      	bne.n	800603e <one_sectionD+0x66>
		driveD(-accel_hs, SPEED_MIDDLE, speed_max_hs, SEC_HALF*2);			//1区画分減速走行。走行後は停止しない
 800601c:	4b3a      	ldr	r3, [pc, #232]	; (8006108 <one_sectionD+0x130>)
 800601e:	881b      	ldrh	r3, [r3, #0]
 8006020:	b21b      	sxth	r3, r3
 8006022:	b29b      	uxth	r3, r3
 8006024:	425b      	negs	r3, r3
 8006026:	b29b      	uxth	r3, r3
 8006028:	b218      	sxth	r0, r3
 800602a:	4b38      	ldr	r3, [pc, #224]	; (800610c <one_sectionD+0x134>)
 800602c:	881b      	ldrh	r3, [r3, #0]
 800602e:	b21b      	sxth	r3, r3
 8006030:	b29a      	uxth	r2, r3
 8006032:	23b6      	movs	r3, #182	; 0xb6
 8006034:	f44f 7116 	mov.w	r1, #600	; 0x258
 8006038:	f7ff f856 	bl	80050e8 <driveD>
 800603c:	e056      	b.n	80060ec <one_sectionD+0x114>
	}else if(run_mode == HIGH){
 800603e:	4b31      	ldr	r3, [pc, #196]	; (8006104 <one_sectionD+0x12c>)
 8006040:	781b      	ldrb	r3, [r3, #0]
 8006042:	b2db      	uxtb	r3, r3
 8006044:	2b03      	cmp	r3, #3
 8006046:	d110      	bne.n	800606a <one_sectionD+0x92>
		driveD(-accel_hs, SPEED_HIGH, speed_max_hs, SEC_HALF*2);			//1区画分減速走行。走行後は停止しない
 8006048:	4b2f      	ldr	r3, [pc, #188]	; (8006108 <one_sectionD+0x130>)
 800604a:	881b      	ldrh	r3, [r3, #0]
 800604c:	b21b      	sxth	r3, r3
 800604e:	b29b      	uxth	r3, r3
 8006050:	425b      	negs	r3, r3
 8006052:	b29b      	uxth	r3, r3
 8006054:	b218      	sxth	r0, r3
 8006056:	4b2d      	ldr	r3, [pc, #180]	; (800610c <one_sectionD+0x134>)
 8006058:	881b      	ldrh	r3, [r3, #0]
 800605a:	b21b      	sxth	r3, r3
 800605c:	b29a      	uxth	r2, r3
 800605e:	23b6      	movs	r3, #182	; 0xb6
 8006060:	f44f 7148 	mov.w	r1, #800	; 0x320
 8006064:	f7ff f840 	bl	80050e8 <driveD>
 8006068:	e040      	b.n	80060ec <one_sectionD+0x114>
	}else if(run_mode == HIGH_HIGH){
 800606a:	4b26      	ldr	r3, [pc, #152]	; (8006104 <one_sectionD+0x12c>)
 800606c:	781b      	ldrb	r3, [r3, #0]
 800606e:	b2db      	uxtb	r3, r3
 8006070:	2b04      	cmp	r3, #4
 8006072:	d110      	bne.n	8006096 <one_sectionD+0xbe>
		driveD(-accel_hs, SPEED_HIGH_HIGH, speed_max_hs, SEC_HALF*2);			//1区画分減速走行。走行後は停止しない
 8006074:	4b24      	ldr	r3, [pc, #144]	; (8006108 <one_sectionD+0x130>)
 8006076:	881b      	ldrh	r3, [r3, #0]
 8006078:	b21b      	sxth	r3, r3
 800607a:	b29b      	uxth	r3, r3
 800607c:	425b      	negs	r3, r3
 800607e:	b29b      	uxth	r3, r3
 8006080:	b218      	sxth	r0, r3
 8006082:	4b22      	ldr	r3, [pc, #136]	; (800610c <one_sectionD+0x134>)
 8006084:	881b      	ldrh	r3, [r3, #0]
 8006086:	b21b      	sxth	r3, r3
 8006088:	b29a      	uxth	r2, r3
 800608a:	23b6      	movs	r3, #182	; 0xb6
 800608c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8006090:	f7ff f82a 	bl	80050e8 <driveD>
 8006094:	e02a      	b.n	80060ec <one_sectionD+0x114>
	}else if(run_mode == 5){
 8006096:	4b1b      	ldr	r3, [pc, #108]	; (8006104 <one_sectionD+0x12c>)
 8006098:	781b      	ldrb	r3, [r3, #0]
 800609a:	b2db      	uxtb	r3, r3
 800609c:	2b05      	cmp	r3, #5
 800609e:	d110      	bne.n	80060c2 <one_sectionD+0xea>
		driveD(-accel_hs, SPEED_5, speed_max_hs, SEC_HALF*2);			//1区画分減速走行。走行後は停止しない
 80060a0:	4b19      	ldr	r3, [pc, #100]	; (8006108 <one_sectionD+0x130>)
 80060a2:	881b      	ldrh	r3, [r3, #0]
 80060a4:	b21b      	sxth	r3, r3
 80060a6:	b29b      	uxth	r3, r3
 80060a8:	425b      	negs	r3, r3
 80060aa:	b29b      	uxth	r3, r3
 80060ac:	b218      	sxth	r0, r3
 80060ae:	4b17      	ldr	r3, [pc, #92]	; (800610c <one_sectionD+0x134>)
 80060b0:	881b      	ldrh	r3, [r3, #0]
 80060b2:	b21b      	sxth	r3, r3
 80060b4:	b29a      	uxth	r2, r3
 80060b6:	23b6      	movs	r3, #182	; 0xb6
 80060b8:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 80060bc:	f7ff f814 	bl	80050e8 <driveD>
 80060c0:	e014      	b.n	80060ec <one_sectionD+0x114>
	}else if(run_mode == 6){
 80060c2:	4b10      	ldr	r3, [pc, #64]	; (8006104 <one_sectionD+0x12c>)
 80060c4:	781b      	ldrb	r3, [r3, #0]
 80060c6:	b2db      	uxtb	r3, r3
 80060c8:	2b06      	cmp	r3, #6
 80060ca:	d10f      	bne.n	80060ec <one_sectionD+0x114>
		driveD(-accel_hs, SPEED_6, speed_max_hs, SEC_HALF*2);			//1区画分減速走行。走行後は停止しない
 80060cc:	4b0e      	ldr	r3, [pc, #56]	; (8006108 <one_sectionD+0x130>)
 80060ce:	881b      	ldrh	r3, [r3, #0]
 80060d0:	b21b      	sxth	r3, r3
 80060d2:	b29b      	uxth	r3, r3
 80060d4:	425b      	negs	r3, r3
 80060d6:	b29b      	uxth	r3, r3
 80060d8:	b218      	sxth	r0, r3
 80060da:	4b0c      	ldr	r3, [pc, #48]	; (800610c <one_sectionD+0x134>)
 80060dc:	881b      	ldrh	r3, [r3, #0]
 80060de:	b21b      	sxth	r3, r3
 80060e0:	b29a      	uxth	r2, r3
 80060e2:	23b6      	movs	r3, #182	; 0xb6
 80060e4:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 80060e8:	f7fe fffe 	bl	80050e8 <driveD>
	}
	if(!MF.FLAG.SCND)get_wall_info();								//壁情報を取得，片壁制御の有効・無効の判断
 80060ec:	4b08      	ldr	r3, [pc, #32]	; (8006110 <one_sectionD+0x138>)
 80060ee:	881b      	ldrh	r3, [r3, #0]
 80060f0:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80060f4:	b2db      	uxtb	r3, r3
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d101      	bne.n	80060fe <one_sectionD+0x126>
 80060fa:	f00b fbe9 	bl	80118d0 <get_wall_info>
}
 80060fe:	bf00      	nop
 8006100:	bd80      	pop	{r7, pc}
 8006102:	bf00      	nop
 8006104:	20000456 	.word	0x20000456
 8006108:	20000454 	.word	0x20000454
 800610c:	20000f7c 	.word	0x20000f7c
 8006110:	20000f68 	.word	0x20000f68

08006114 <one_sectionVA>:
//one_sectionVA
// 等速で斜め半区画分進む
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void one_sectionVA(void){
 8006114:	b580      	push	{r7, lr}
 8006116:	af00      	add	r7, sp, #0
	full_led_write(BLUEGREEN);
 8006118:	2004      	movs	r0, #4
 800611a:	f00b fc4d 	bl	80119b8 <full_led_write>
	control_start();
 800611e:	f7fe fe33 	bl	8004d88 <control_start>
	if(run_mode == LOW){
 8006122:	4b3c      	ldr	r3, [pc, #240]	; (8006214 <one_sectionVA+0x100>)
 8006124:	781b      	ldrb	r3, [r3, #0]
 8006126:	b2db      	uxtb	r3, r3
 8006128:	2b01      	cmp	r3, #1
 800612a:	d10e      	bne.n	800614a <one_sectionVA+0x36>
		driveA(accel_hs, SPEED_LOW, speed_max_hs, SEC_HALF_V*2);				//1区画分加速走行。走行後は停止しない
 800612c:	4b3a      	ldr	r3, [pc, #232]	; (8006218 <one_sectionVA+0x104>)
 800612e:	881b      	ldrh	r3, [r3, #0]
 8006130:	b21b      	sxth	r3, r3
 8006132:	b298      	uxth	r0, r3
 8006134:	4b39      	ldr	r3, [pc, #228]	; (800621c <one_sectionVA+0x108>)
 8006136:	881b      	ldrh	r3, [r3, #0]
 8006138:	b21b      	sxth	r3, r3
 800613a:	b29a      	uxth	r2, r3
 800613c:	f44f 7382 	mov.w	r3, #260	; 0x104
 8006140:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8006144:	f7fe ff56 	bl	8004ff4 <driveA>
	}else if(run_mode == 5){
		driveA(accel_hs, SPEED_5, speed_max_hs, SEC_HALF_V*2);				//1区画分加速走行。走行後は停止しない
	}else if(run_mode == 6){
		driveA(accel_hs, SPEED_6, speed_max_hs, SEC_HALF_V*2);				//1区画分加速走行。走行後は停止しない
	}
}
 8006148:	e062      	b.n	8006210 <one_sectionVA+0xfc>
	}else if(run_mode == MIDDLE){
 800614a:	4b32      	ldr	r3, [pc, #200]	; (8006214 <one_sectionVA+0x100>)
 800614c:	781b      	ldrb	r3, [r3, #0]
 800614e:	b2db      	uxtb	r3, r3
 8006150:	2b02      	cmp	r3, #2
 8006152:	d10e      	bne.n	8006172 <one_sectionVA+0x5e>
		driveA(accel_hs, SPEED_MIDDLE, speed_max_hs, SEC_HALF_V*2);				//1区画分加速走行。走行後は停止しない
 8006154:	4b30      	ldr	r3, [pc, #192]	; (8006218 <one_sectionVA+0x104>)
 8006156:	881b      	ldrh	r3, [r3, #0]
 8006158:	b21b      	sxth	r3, r3
 800615a:	b298      	uxth	r0, r3
 800615c:	4b2f      	ldr	r3, [pc, #188]	; (800621c <one_sectionVA+0x108>)
 800615e:	881b      	ldrh	r3, [r3, #0]
 8006160:	b21b      	sxth	r3, r3
 8006162:	b29a      	uxth	r2, r3
 8006164:	f44f 7382 	mov.w	r3, #260	; 0x104
 8006168:	f44f 7116 	mov.w	r1, #600	; 0x258
 800616c:	f7fe ff42 	bl	8004ff4 <driveA>
}
 8006170:	e04e      	b.n	8006210 <one_sectionVA+0xfc>
	}else if(run_mode == HIGH){
 8006172:	4b28      	ldr	r3, [pc, #160]	; (8006214 <one_sectionVA+0x100>)
 8006174:	781b      	ldrb	r3, [r3, #0]
 8006176:	b2db      	uxtb	r3, r3
 8006178:	2b03      	cmp	r3, #3
 800617a:	d10e      	bne.n	800619a <one_sectionVA+0x86>
		driveA(accel_hs, SPEED_HIGH, speed_max_hs, SEC_HALF_V*2);				//1区画分加速走行。走行後は停止しない
 800617c:	4b26      	ldr	r3, [pc, #152]	; (8006218 <one_sectionVA+0x104>)
 800617e:	881b      	ldrh	r3, [r3, #0]
 8006180:	b21b      	sxth	r3, r3
 8006182:	b298      	uxth	r0, r3
 8006184:	4b25      	ldr	r3, [pc, #148]	; (800621c <one_sectionVA+0x108>)
 8006186:	881b      	ldrh	r3, [r3, #0]
 8006188:	b21b      	sxth	r3, r3
 800618a:	b29a      	uxth	r2, r3
 800618c:	f44f 7382 	mov.w	r3, #260	; 0x104
 8006190:	f44f 7148 	mov.w	r1, #800	; 0x320
 8006194:	f7fe ff2e 	bl	8004ff4 <driveA>
}
 8006198:	e03a      	b.n	8006210 <one_sectionVA+0xfc>
	}else if(run_mode == HIGH_HIGH){
 800619a:	4b1e      	ldr	r3, [pc, #120]	; (8006214 <one_sectionVA+0x100>)
 800619c:	781b      	ldrb	r3, [r3, #0]
 800619e:	b2db      	uxtb	r3, r3
 80061a0:	2b04      	cmp	r3, #4
 80061a2:	d10e      	bne.n	80061c2 <one_sectionVA+0xae>
		driveA(accel_hs, SPEED_HIGH_HIGH, speed_max_hs, SEC_HALF_V*2);				//1区画分加速走行。走行後は停止しない
 80061a4:	4b1c      	ldr	r3, [pc, #112]	; (8006218 <one_sectionVA+0x104>)
 80061a6:	881b      	ldrh	r3, [r3, #0]
 80061a8:	b21b      	sxth	r3, r3
 80061aa:	b298      	uxth	r0, r3
 80061ac:	4b1b      	ldr	r3, [pc, #108]	; (800621c <one_sectionVA+0x108>)
 80061ae:	881b      	ldrh	r3, [r3, #0]
 80061b0:	b21b      	sxth	r3, r3
 80061b2:	b29a      	uxth	r2, r3
 80061b4:	f44f 7382 	mov.w	r3, #260	; 0x104
 80061b8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80061bc:	f7fe ff1a 	bl	8004ff4 <driveA>
}
 80061c0:	e026      	b.n	8006210 <one_sectionVA+0xfc>
	}else if(run_mode == 5){
 80061c2:	4b14      	ldr	r3, [pc, #80]	; (8006214 <one_sectionVA+0x100>)
 80061c4:	781b      	ldrb	r3, [r3, #0]
 80061c6:	b2db      	uxtb	r3, r3
 80061c8:	2b05      	cmp	r3, #5
 80061ca:	d10e      	bne.n	80061ea <one_sectionVA+0xd6>
		driveA(accel_hs, SPEED_5, speed_max_hs, SEC_HALF_V*2);				//1区画分加速走行。走行後は停止しない
 80061cc:	4b12      	ldr	r3, [pc, #72]	; (8006218 <one_sectionVA+0x104>)
 80061ce:	881b      	ldrh	r3, [r3, #0]
 80061d0:	b21b      	sxth	r3, r3
 80061d2:	b298      	uxth	r0, r3
 80061d4:	4b11      	ldr	r3, [pc, #68]	; (800621c <one_sectionVA+0x108>)
 80061d6:	881b      	ldrh	r3, [r3, #0]
 80061d8:	b21b      	sxth	r3, r3
 80061da:	b29a      	uxth	r2, r3
 80061dc:	f44f 7382 	mov.w	r3, #260	; 0x104
 80061e0:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 80061e4:	f7fe ff06 	bl	8004ff4 <driveA>
}
 80061e8:	e012      	b.n	8006210 <one_sectionVA+0xfc>
	}else if(run_mode == 6){
 80061ea:	4b0a      	ldr	r3, [pc, #40]	; (8006214 <one_sectionVA+0x100>)
 80061ec:	781b      	ldrb	r3, [r3, #0]
 80061ee:	b2db      	uxtb	r3, r3
 80061f0:	2b06      	cmp	r3, #6
 80061f2:	d10d      	bne.n	8006210 <one_sectionVA+0xfc>
		driveA(accel_hs, SPEED_6, speed_max_hs, SEC_HALF_V*2);				//1区画分加速走行。走行後は停止しない
 80061f4:	4b08      	ldr	r3, [pc, #32]	; (8006218 <one_sectionVA+0x104>)
 80061f6:	881b      	ldrh	r3, [r3, #0]
 80061f8:	b21b      	sxth	r3, r3
 80061fa:	b298      	uxth	r0, r3
 80061fc:	4b07      	ldr	r3, [pc, #28]	; (800621c <one_sectionVA+0x108>)
 80061fe:	881b      	ldrh	r3, [r3, #0]
 8006200:	b21b      	sxth	r3, r3
 8006202:	b29a      	uxth	r2, r3
 8006204:	f44f 7382 	mov.w	r3, #260	; 0x104
 8006208:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 800620c:	f7fe fef2 	bl	8004ff4 <driveA>
}
 8006210:	bf00      	nop
 8006212:	bd80      	pop	{r7, pc}
 8006214:	20000456 	.word	0x20000456
 8006218:	20000454 	.word	0x20000454
 800621c:	20000f7c 	.word	0x20000f7c

08006220 <one_sectionVD>:
//one_sectionVD
// 等速で斜め半区画分進む
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void one_sectionVD(void){
 8006220:	b580      	push	{r7, lr}
 8006222:	af00      	add	r7, sp, #0
	full_led_write(BLUE);
 8006224:	2003      	movs	r0, #3
 8006226:	f00b fbc7 	bl	80119b8 <full_led_write>
	control_start();
 800622a:	f7fe fdad 	bl	8004d88 <control_start>
	if(run_mode == LOW){
 800622e:	4b45      	ldr	r3, [pc, #276]	; (8006344 <one_sectionVD+0x124>)
 8006230:	781b      	ldrb	r3, [r3, #0]
 8006232:	b2db      	uxtb	r3, r3
 8006234:	2b01      	cmp	r3, #1
 8006236:	d111      	bne.n	800625c <one_sectionVD+0x3c>
		driveD(-accel_hs, SPEED_LOW, speed_max_hs, SEC_HALF_V*2);				//1区画分減速走行。走行後は停止しない
 8006238:	4b43      	ldr	r3, [pc, #268]	; (8006348 <one_sectionVD+0x128>)
 800623a:	881b      	ldrh	r3, [r3, #0]
 800623c:	b21b      	sxth	r3, r3
 800623e:	b29b      	uxth	r3, r3
 8006240:	425b      	negs	r3, r3
 8006242:	b29b      	uxth	r3, r3
 8006244:	b218      	sxth	r0, r3
 8006246:	4b41      	ldr	r3, [pc, #260]	; (800634c <one_sectionVD+0x12c>)
 8006248:	881b      	ldrh	r3, [r3, #0]
 800624a:	b21b      	sxth	r3, r3
 800624c:	b29a      	uxth	r2, r3
 800624e:	f44f 7382 	mov.w	r3, #260	; 0x104
 8006252:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8006256:	f7fe ff47 	bl	80050e8 <driveD>
	}else if(run_mode == 5){
		driveD(-accel_hs, SPEED_5, speed_max_hs, SEC_HALF_V*2);				//1区画分減速走行。走行後は停止しない
	}else if(run_mode == 6){
		driveD(-accel_hs, SPEED_6, speed_max_hs, SEC_HALF_V*2);				//1区画分減速走行。走行後は停止しない
	}
}
 800625a:	e071      	b.n	8006340 <one_sectionVD+0x120>
	}else if(run_mode == MIDDLE){
 800625c:	4b39      	ldr	r3, [pc, #228]	; (8006344 <one_sectionVD+0x124>)
 800625e:	781b      	ldrb	r3, [r3, #0]
 8006260:	b2db      	uxtb	r3, r3
 8006262:	2b02      	cmp	r3, #2
 8006264:	d111      	bne.n	800628a <one_sectionVD+0x6a>
		driveD(-accel_hs, SPEED_MIDDLE, speed_max_hs, SEC_HALF_V*2);			//1区画分減速走行。走行後は停止しない
 8006266:	4b38      	ldr	r3, [pc, #224]	; (8006348 <one_sectionVD+0x128>)
 8006268:	881b      	ldrh	r3, [r3, #0]
 800626a:	b21b      	sxth	r3, r3
 800626c:	b29b      	uxth	r3, r3
 800626e:	425b      	negs	r3, r3
 8006270:	b29b      	uxth	r3, r3
 8006272:	b218      	sxth	r0, r3
 8006274:	4b35      	ldr	r3, [pc, #212]	; (800634c <one_sectionVD+0x12c>)
 8006276:	881b      	ldrh	r3, [r3, #0]
 8006278:	b21b      	sxth	r3, r3
 800627a:	b29a      	uxth	r2, r3
 800627c:	f44f 7382 	mov.w	r3, #260	; 0x104
 8006280:	f44f 7116 	mov.w	r1, #600	; 0x258
 8006284:	f7fe ff30 	bl	80050e8 <driveD>
}
 8006288:	e05a      	b.n	8006340 <one_sectionVD+0x120>
	}else if(run_mode == HIGH){
 800628a:	4b2e      	ldr	r3, [pc, #184]	; (8006344 <one_sectionVD+0x124>)
 800628c:	781b      	ldrb	r3, [r3, #0]
 800628e:	b2db      	uxtb	r3, r3
 8006290:	2b03      	cmp	r3, #3
 8006292:	d111      	bne.n	80062b8 <one_sectionVD+0x98>
		driveD(-accel_hs, SPEED_HIGH, speed_max_hs, SEC_HALF_V*2);				//1区画分減速走行。走行後は停止しない
 8006294:	4b2c      	ldr	r3, [pc, #176]	; (8006348 <one_sectionVD+0x128>)
 8006296:	881b      	ldrh	r3, [r3, #0]
 8006298:	b21b      	sxth	r3, r3
 800629a:	b29b      	uxth	r3, r3
 800629c:	425b      	negs	r3, r3
 800629e:	b29b      	uxth	r3, r3
 80062a0:	b218      	sxth	r0, r3
 80062a2:	4b2a      	ldr	r3, [pc, #168]	; (800634c <one_sectionVD+0x12c>)
 80062a4:	881b      	ldrh	r3, [r3, #0]
 80062a6:	b21b      	sxth	r3, r3
 80062a8:	b29a      	uxth	r2, r3
 80062aa:	f44f 7382 	mov.w	r3, #260	; 0x104
 80062ae:	f44f 7148 	mov.w	r1, #800	; 0x320
 80062b2:	f7fe ff19 	bl	80050e8 <driveD>
}
 80062b6:	e043      	b.n	8006340 <one_sectionVD+0x120>
	}else if(run_mode == HIGH_HIGH){
 80062b8:	4b22      	ldr	r3, [pc, #136]	; (8006344 <one_sectionVD+0x124>)
 80062ba:	781b      	ldrb	r3, [r3, #0]
 80062bc:	b2db      	uxtb	r3, r3
 80062be:	2b04      	cmp	r3, #4
 80062c0:	d111      	bne.n	80062e6 <one_sectionVD+0xc6>
		driveD(-accel_hs, SPEED_HIGH_HIGH, speed_max_hs, SEC_HALF_V*2);				//1区画分減速走行。走行後は停止しない
 80062c2:	4b21      	ldr	r3, [pc, #132]	; (8006348 <one_sectionVD+0x128>)
 80062c4:	881b      	ldrh	r3, [r3, #0]
 80062c6:	b21b      	sxth	r3, r3
 80062c8:	b29b      	uxth	r3, r3
 80062ca:	425b      	negs	r3, r3
 80062cc:	b29b      	uxth	r3, r3
 80062ce:	b218      	sxth	r0, r3
 80062d0:	4b1e      	ldr	r3, [pc, #120]	; (800634c <one_sectionVD+0x12c>)
 80062d2:	881b      	ldrh	r3, [r3, #0]
 80062d4:	b21b      	sxth	r3, r3
 80062d6:	b29a      	uxth	r2, r3
 80062d8:	f44f 7382 	mov.w	r3, #260	; 0x104
 80062dc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80062e0:	f7fe ff02 	bl	80050e8 <driveD>
}
 80062e4:	e02c      	b.n	8006340 <one_sectionVD+0x120>
	}else if(run_mode == 5){
 80062e6:	4b17      	ldr	r3, [pc, #92]	; (8006344 <one_sectionVD+0x124>)
 80062e8:	781b      	ldrb	r3, [r3, #0]
 80062ea:	b2db      	uxtb	r3, r3
 80062ec:	2b05      	cmp	r3, #5
 80062ee:	d111      	bne.n	8006314 <one_sectionVD+0xf4>
		driveD(-accel_hs, SPEED_5, speed_max_hs, SEC_HALF_V*2);				//1区画分減速走行。走行後は停止しない
 80062f0:	4b15      	ldr	r3, [pc, #84]	; (8006348 <one_sectionVD+0x128>)
 80062f2:	881b      	ldrh	r3, [r3, #0]
 80062f4:	b21b      	sxth	r3, r3
 80062f6:	b29b      	uxth	r3, r3
 80062f8:	425b      	negs	r3, r3
 80062fa:	b29b      	uxth	r3, r3
 80062fc:	b218      	sxth	r0, r3
 80062fe:	4b13      	ldr	r3, [pc, #76]	; (800634c <one_sectionVD+0x12c>)
 8006300:	881b      	ldrh	r3, [r3, #0]
 8006302:	b21b      	sxth	r3, r3
 8006304:	b29a      	uxth	r2, r3
 8006306:	f44f 7382 	mov.w	r3, #260	; 0x104
 800630a:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 800630e:	f7fe feeb 	bl	80050e8 <driveD>
}
 8006312:	e015      	b.n	8006340 <one_sectionVD+0x120>
	}else if(run_mode == 6){
 8006314:	4b0b      	ldr	r3, [pc, #44]	; (8006344 <one_sectionVD+0x124>)
 8006316:	781b      	ldrb	r3, [r3, #0]
 8006318:	b2db      	uxtb	r3, r3
 800631a:	2b06      	cmp	r3, #6
 800631c:	d110      	bne.n	8006340 <one_sectionVD+0x120>
		driveD(-accel_hs, SPEED_6, speed_max_hs, SEC_HALF_V*2);				//1区画分減速走行。走行後は停止しない
 800631e:	4b0a      	ldr	r3, [pc, #40]	; (8006348 <one_sectionVD+0x128>)
 8006320:	881b      	ldrh	r3, [r3, #0]
 8006322:	b21b      	sxth	r3, r3
 8006324:	b29b      	uxth	r3, r3
 8006326:	425b      	negs	r3, r3
 8006328:	b29b      	uxth	r3, r3
 800632a:	b218      	sxth	r0, r3
 800632c:	4b07      	ldr	r3, [pc, #28]	; (800634c <one_sectionVD+0x12c>)
 800632e:	881b      	ldrh	r3, [r3, #0]
 8006330:	b21b      	sxth	r3, r3
 8006332:	b29a      	uxth	r2, r3
 8006334:	f44f 7382 	mov.w	r3, #260	; 0x104
 8006338:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 800633c:	f7fe fed4 	bl	80050e8 <driveD>
}
 8006340:	bf00      	nop
 8006342:	bd80      	pop	{r7, pc}
 8006344:	20000456 	.word	0x20000456
 8006348:	20000454 	.word	0x20000454
 800634c:	20000f7c 	.word	0x20000f7c

08006350 <one_sectionU>:
//one_sectionU
// 等速で1区画分進む
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void one_sectionU(void){
 8006350:	b580      	push	{r7, lr}
 8006352:	af00      	add	r7, sp, #0
	full_led_write(WHITE);
 8006354:	2007      	movs	r0, #7
 8006356:	f00b fb2f 	bl	80119b8 <full_led_write>
	control_start();
 800635a:	f7fe fd15 	bl	8004d88 <control_start>
	driveU(SEC_HALF*2);													//1区画分等速走行。走行後は停止しない
 800635e:	20b6      	movs	r0, #182	; 0xb6
 8006360:	f7fe ff9c 	bl	800529c <driveU>
	if(!MF.FLAG.SCND)get_wall_info();								//壁情報を取得
 8006364:	4b05      	ldr	r3, [pc, #20]	; (800637c <one_sectionU+0x2c>)
 8006366:	881b      	ldrh	r3, [r3, #0]
 8006368:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800636c:	b2db      	uxtb	r3, r3
 800636e:	2b00      	cmp	r3, #0
 8006370:	d101      	bne.n	8006376 <one_sectionU+0x26>
 8006372:	f00b faad 	bl	80118d0 <get_wall_info>
}
 8006376:	bf00      	nop
 8006378:	bd80      	pop	{r7, pc}
 800637a:	bf00      	nop
 800637c:	20000f68 	.word	0x20000f68

08006380 <rotate_R90>:
//rotate_R90
// 右に90度回転する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void rotate_R90(void){
 8006380:	b598      	push	{r3, r4, r7, lr}
 8006382:	af00      	add	r7, sp, #0
	target_omega_z = 800;
 8006384:	4b56      	ldr	r3, [pc, #344]	; (80064e0 <rotate_R90+0x160>)
 8006386:	4a57      	ldr	r2, [pc, #348]	; (80064e4 <rotate_R90+0x164>)
 8006388:	601a      	str	r2, [r3, #0]
	accel_l = 3000;
 800638a:	4b57      	ldr	r3, [pc, #348]	; (80064e8 <rotate_R90+0x168>)
 800638c:	4a57      	ldr	r2, [pc, #348]	; (80064ec <rotate_R90+0x16c>)
 800638e:	601a      	str	r2, [r3, #0]
	accel_r = -3000;
 8006390:	4b57      	ldr	r3, [pc, #348]	; (80064f0 <rotate_R90+0x170>)
 8006392:	4a58      	ldr	r2, [pc, #352]	; (80064f4 <rotate_R90+0x174>)
 8006394:	601a      	str	r2, [r3, #0]
	speed_max_l = target_omega_z/180*M_PI * TREAD/2;
 8006396:	4b52      	ldr	r3, [pc, #328]	; (80064e0 <rotate_R90+0x160>)
 8006398:	edd3 7a00 	vldr	s15, [r3]
 800639c:	ed9f 7a56 	vldr	s14, [pc, #344]	; 80064f8 <rotate_R90+0x178>
 80063a0:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80063a4:	ee16 0a90 	vmov	r0, s13
 80063a8:	f7fa f8c6 	bl	8000538 <__aeabi_f2d>
 80063ac:	a34a      	add	r3, pc, #296	; (adr r3, 80064d8 <rotate_R90+0x158>)
 80063ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063b2:	f7fa f919 	bl	80005e8 <__aeabi_dmul>
 80063b6:	4603      	mov	r3, r0
 80063b8:	460c      	mov	r4, r1
 80063ba:	4618      	mov	r0, r3
 80063bc:	4621      	mov	r1, r4
 80063be:	f04f 0200 	mov.w	r2, #0
 80063c2:	4b4e      	ldr	r3, [pc, #312]	; (80064fc <rotate_R90+0x17c>)
 80063c4:	f7fa f910 	bl	80005e8 <__aeabi_dmul>
 80063c8:	4603      	mov	r3, r0
 80063ca:	460c      	mov	r4, r1
 80063cc:	4618      	mov	r0, r3
 80063ce:	4621      	mov	r1, r4
 80063d0:	f04f 0200 	mov.w	r2, #0
 80063d4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80063d8:	f7fa fa30 	bl	800083c <__aeabi_ddiv>
 80063dc:	4603      	mov	r3, r0
 80063de:	460c      	mov	r4, r1
 80063e0:	4618      	mov	r0, r3
 80063e2:	4621      	mov	r1, r4
 80063e4:	f7fa fbd8 	bl	8000b98 <__aeabi_d2f>
 80063e8:	4602      	mov	r2, r0
 80063ea:	4b45      	ldr	r3, [pc, #276]	; (8006500 <rotate_R90+0x180>)
 80063ec:	601a      	str	r2, [r3, #0]
	speed_min_r = -1*target_omega_z/180*M_PI * TREAD/2;
 80063ee:	4b3c      	ldr	r3, [pc, #240]	; (80064e0 <rotate_R90+0x160>)
 80063f0:	edd3 7a00 	vldr	s15, [r3]
 80063f4:	eef1 7a67 	vneg.f32	s15, s15
 80063f8:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 80064f8 <rotate_R90+0x178>
 80063fc:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8006400:	ee16 0a90 	vmov	r0, s13
 8006404:	f7fa f898 	bl	8000538 <__aeabi_f2d>
 8006408:	a333      	add	r3, pc, #204	; (adr r3, 80064d8 <rotate_R90+0x158>)
 800640a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800640e:	f7fa f8eb 	bl	80005e8 <__aeabi_dmul>
 8006412:	4603      	mov	r3, r0
 8006414:	460c      	mov	r4, r1
 8006416:	4618      	mov	r0, r3
 8006418:	4621      	mov	r1, r4
 800641a:	f04f 0200 	mov.w	r2, #0
 800641e:	4b37      	ldr	r3, [pc, #220]	; (80064fc <rotate_R90+0x17c>)
 8006420:	f7fa f8e2 	bl	80005e8 <__aeabi_dmul>
 8006424:	4603      	mov	r3, r0
 8006426:	460c      	mov	r4, r1
 8006428:	4618      	mov	r0, r3
 800642a:	4621      	mov	r1, r4
 800642c:	f04f 0200 	mov.w	r2, #0
 8006430:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006434:	f7fa fa02 	bl	800083c <__aeabi_ddiv>
 8006438:	4603      	mov	r3, r0
 800643a:	460c      	mov	r4, r1
 800643c:	4618      	mov	r0, r3
 800643e:	4621      	mov	r1, r4
 8006440:	f7fa fbaa 	bl	8000b98 <__aeabi_d2f>
 8006444:	4602      	mov	r2, r0
 8006446:	4b2f      	ldr	r3, [pc, #188]	; (8006504 <rotate_R90+0x184>)
 8006448:	601a      	str	r2, [r3, #0]

	drive_start();											//走行開始
 800644a:	f7fe fc45 	bl	8004cd8 <drive_start>
	control_stop();
 800644e:	f7fe fcc3 	bl	8004dd8 <control_stop>
	while(degree_z > target_degree_z-80);
 8006452:	bf00      	nop
 8006454:	4b2c      	ldr	r3, [pc, #176]	; (8006508 <rotate_R90+0x188>)
 8006456:	edd3 7a00 	vldr	s15, [r3]
 800645a:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 800650c <rotate_R90+0x18c>
 800645e:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8006462:	4b2b      	ldr	r3, [pc, #172]	; (8006510 <rotate_R90+0x190>)
 8006464:	edd3 7a00 	vldr	s15, [r3]
 8006468:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800646c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006470:	d4f0      	bmi.n	8006454 <rotate_R90+0xd4>

	accel_l = -10000;
 8006472:	4b1d      	ldr	r3, [pc, #116]	; (80064e8 <rotate_R90+0x168>)
 8006474:	4a27      	ldr	r2, [pc, #156]	; (8006514 <rotate_R90+0x194>)
 8006476:	601a      	str	r2, [r3, #0]
	accel_r = 10000;
 8006478:	4b1d      	ldr	r3, [pc, #116]	; (80064f0 <rotate_R90+0x170>)
 800647a:	4a27      	ldr	r2, [pc, #156]	; (8006518 <rotate_R90+0x198>)
 800647c:	601a      	str	r2, [r3, #0]
	speed_min_l = 100;
 800647e:	4b27      	ldr	r3, [pc, #156]	; (800651c <rotate_R90+0x19c>)
 8006480:	4a27      	ldr	r2, [pc, #156]	; (8006520 <rotate_R90+0x1a0>)
 8006482:	601a      	str	r2, [r3, #0]
	speed_max_r = -100;
 8006484:	4b27      	ldr	r3, [pc, #156]	; (8006524 <rotate_R90+0x1a4>)
 8006486:	4a28      	ldr	r2, [pc, #160]	; (8006528 <rotate_R90+0x1a8>)
 8006488:	601a      	str	r2, [r3, #0]

	while(degree_z > target_degree_z-90);
 800648a:	bf00      	nop
 800648c:	4b1e      	ldr	r3, [pc, #120]	; (8006508 <rotate_R90+0x188>)
 800648e:	edd3 7a00 	vldr	s15, [r3]
 8006492:	ed9f 7a26 	vldr	s14, [pc, #152]	; 800652c <rotate_R90+0x1ac>
 8006496:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800649a:	4b1d      	ldr	r3, [pc, #116]	; (8006510 <rotate_R90+0x190>)
 800649c:	edd3 7a00 	vldr	s15, [r3]
 80064a0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80064a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80064a8:	d4f0      	bmi.n	800648c <rotate_R90+0x10c>

	if(!MF.FLAG.XDIR){
 80064aa:	4b21      	ldr	r3, [pc, #132]	; (8006530 <rotate_R90+0x1b0>)
 80064ac:	881b      	ldrh	r3, [r3, #0]
 80064ae:	f3c3 3300 	ubfx	r3, r3, #12, #1
 80064b2:	b2db      	uxtb	r3, r3
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d104      	bne.n	80064c2 <rotate_R90+0x142>
		turn_dir(DIR_TURN_R90, 1);										//マイクロマウス内部位置情報でも左回転処理&目標角度左90度
 80064b8:	2101      	movs	r1, #1
 80064ba:	2001      	movs	r0, #1
 80064bc:	f009 fbe8 	bl	800fc90 <turn_dir>
 80064c0:	e003      	b.n	80064ca <rotate_R90+0x14a>
	}else{
		turn_dir(DIR_TURN_R90_8, 3);									//マイクロマウス内部位置情報でも左回転処理&目標角度左90度
 80064c2:	2103      	movs	r1, #3
 80064c4:	2002      	movs	r0, #2
 80064c6:	f009 fbe3 	bl	800fc90 <turn_dir>
	}
	drive_stop();
 80064ca:	f7fe fc35 	bl	8004d38 <drive_stop>
}
 80064ce:	bf00      	nop
 80064d0:	bd98      	pop	{r3, r4, r7, pc}
 80064d2:	bf00      	nop
 80064d4:	f3af 8000 	nop.w
 80064d8:	54442d18 	.word	0x54442d18
 80064dc:	400921fb 	.word	0x400921fb
 80064e0:	200001a8 	.word	0x200001a8
 80064e4:	44480000 	.word	0x44480000
 80064e8:	20000d58 	.word	0x20000d58
 80064ec:	453b8000 	.word	0x453b8000
 80064f0:	20000ae4 	.word	0x20000ae4
 80064f4:	c53b8000 	.word	0xc53b8000
 80064f8:	43340000 	.word	0x43340000
 80064fc:	40508000 	.word	0x40508000
 8006500:	2000077c 	.word	0x2000077c
 8006504:	20000f6c 	.word	0x20000f6c
 8006508:	20000bf8 	.word	0x20000bf8
 800650c:	42a00000 	.word	0x42a00000
 8006510:	20000b5c 	.word	0x20000b5c
 8006514:	c61c4000 	.word	0xc61c4000
 8006518:	461c4000 	.word	0x461c4000
 800651c:	20000b54 	.word	0x20000b54
 8006520:	42c80000 	.word	0x42c80000
 8006524:	200001a4 	.word	0x200001a4
 8006528:	c2c80000 	.word	0xc2c80000
 800652c:	42b40000 	.word	0x42b40000
 8006530:	20000f68 	.word	0x20000f68
 8006534:	00000000 	.word	0x00000000

08006538 <rotate_L90>:
//rotate_L90
// 左に90度回転する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void rotate_L90(void){
 8006538:	b598      	push	{r3, r4, r7, lr}
 800653a:	af00      	add	r7, sp, #0
	target_omega_z = 800;
 800653c:	4b56      	ldr	r3, [pc, #344]	; (8006698 <rotate_L90+0x160>)
 800653e:	4a57      	ldr	r2, [pc, #348]	; (800669c <rotate_L90+0x164>)
 8006540:	601a      	str	r2, [r3, #0]
	accel_l = -3000;
 8006542:	4b57      	ldr	r3, [pc, #348]	; (80066a0 <rotate_L90+0x168>)
 8006544:	4a57      	ldr	r2, [pc, #348]	; (80066a4 <rotate_L90+0x16c>)
 8006546:	601a      	str	r2, [r3, #0]
	accel_r = 3000;
 8006548:	4b57      	ldr	r3, [pc, #348]	; (80066a8 <rotate_L90+0x170>)
 800654a:	4a58      	ldr	r2, [pc, #352]	; (80066ac <rotate_L90+0x174>)
 800654c:	601a      	str	r2, [r3, #0]
	speed_min_l = -1*target_omega_z/180*M_PI * TREAD/2;
 800654e:	4b52      	ldr	r3, [pc, #328]	; (8006698 <rotate_L90+0x160>)
 8006550:	edd3 7a00 	vldr	s15, [r3]
 8006554:	eef1 7a67 	vneg.f32	s15, s15
 8006558:	ed9f 7a55 	vldr	s14, [pc, #340]	; 80066b0 <rotate_L90+0x178>
 800655c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8006560:	ee16 0a90 	vmov	r0, s13
 8006564:	f7f9 ffe8 	bl	8000538 <__aeabi_f2d>
 8006568:	a349      	add	r3, pc, #292	; (adr r3, 8006690 <rotate_L90+0x158>)
 800656a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800656e:	f7fa f83b 	bl	80005e8 <__aeabi_dmul>
 8006572:	4603      	mov	r3, r0
 8006574:	460c      	mov	r4, r1
 8006576:	4618      	mov	r0, r3
 8006578:	4621      	mov	r1, r4
 800657a:	f04f 0200 	mov.w	r2, #0
 800657e:	4b4d      	ldr	r3, [pc, #308]	; (80066b4 <rotate_L90+0x17c>)
 8006580:	f7fa f832 	bl	80005e8 <__aeabi_dmul>
 8006584:	4603      	mov	r3, r0
 8006586:	460c      	mov	r4, r1
 8006588:	4618      	mov	r0, r3
 800658a:	4621      	mov	r1, r4
 800658c:	f04f 0200 	mov.w	r2, #0
 8006590:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006594:	f7fa f952 	bl	800083c <__aeabi_ddiv>
 8006598:	4603      	mov	r3, r0
 800659a:	460c      	mov	r4, r1
 800659c:	4618      	mov	r0, r3
 800659e:	4621      	mov	r1, r4
 80065a0:	f7fa fafa 	bl	8000b98 <__aeabi_d2f>
 80065a4:	4602      	mov	r2, r0
 80065a6:	4b44      	ldr	r3, [pc, #272]	; (80066b8 <rotate_L90+0x180>)
 80065a8:	601a      	str	r2, [r3, #0]
	speed_max_r = target_omega_z/180*M_PI * TREAD/2;
 80065aa:	4b3b      	ldr	r3, [pc, #236]	; (8006698 <rotate_L90+0x160>)
 80065ac:	edd3 7a00 	vldr	s15, [r3]
 80065b0:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 80066b0 <rotate_L90+0x178>
 80065b4:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80065b8:	ee16 0a90 	vmov	r0, s13
 80065bc:	f7f9 ffbc 	bl	8000538 <__aeabi_f2d>
 80065c0:	a333      	add	r3, pc, #204	; (adr r3, 8006690 <rotate_L90+0x158>)
 80065c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065c6:	f7fa f80f 	bl	80005e8 <__aeabi_dmul>
 80065ca:	4603      	mov	r3, r0
 80065cc:	460c      	mov	r4, r1
 80065ce:	4618      	mov	r0, r3
 80065d0:	4621      	mov	r1, r4
 80065d2:	f04f 0200 	mov.w	r2, #0
 80065d6:	4b37      	ldr	r3, [pc, #220]	; (80066b4 <rotate_L90+0x17c>)
 80065d8:	f7fa f806 	bl	80005e8 <__aeabi_dmul>
 80065dc:	4603      	mov	r3, r0
 80065de:	460c      	mov	r4, r1
 80065e0:	4618      	mov	r0, r3
 80065e2:	4621      	mov	r1, r4
 80065e4:	f04f 0200 	mov.w	r2, #0
 80065e8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80065ec:	f7fa f926 	bl	800083c <__aeabi_ddiv>
 80065f0:	4603      	mov	r3, r0
 80065f2:	460c      	mov	r4, r1
 80065f4:	4618      	mov	r0, r3
 80065f6:	4621      	mov	r1, r4
 80065f8:	f7fa face 	bl	8000b98 <__aeabi_d2f>
 80065fc:	4602      	mov	r2, r0
 80065fe:	4b2f      	ldr	r3, [pc, #188]	; (80066bc <rotate_L90+0x184>)
 8006600:	601a      	str	r2, [r3, #0]

	drive_start();											//走行開始
 8006602:	f7fe fb69 	bl	8004cd8 <drive_start>
	control_stop();
 8006606:	f7fe fbe7 	bl	8004dd8 <control_stop>
	while(degree_z < target_degree_z+80);
 800660a:	bf00      	nop
 800660c:	4b2c      	ldr	r3, [pc, #176]	; (80066c0 <rotate_L90+0x188>)
 800660e:	edd3 7a00 	vldr	s15, [r3]
 8006612:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 80066c4 <rotate_L90+0x18c>
 8006616:	ee37 7a87 	vadd.f32	s14, s15, s14
 800661a:	4b2b      	ldr	r3, [pc, #172]	; (80066c8 <rotate_L90+0x190>)
 800661c:	edd3 7a00 	vldr	s15, [r3]
 8006620:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006624:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006628:	dcf0      	bgt.n	800660c <rotate_L90+0xd4>

	accel_l = 10000;
 800662a:	4b1d      	ldr	r3, [pc, #116]	; (80066a0 <rotate_L90+0x168>)
 800662c:	4a27      	ldr	r2, [pc, #156]	; (80066cc <rotate_L90+0x194>)
 800662e:	601a      	str	r2, [r3, #0]
	accel_r = -10000;
 8006630:	4b1d      	ldr	r3, [pc, #116]	; (80066a8 <rotate_L90+0x170>)
 8006632:	4a27      	ldr	r2, [pc, #156]	; (80066d0 <rotate_L90+0x198>)
 8006634:	601a      	str	r2, [r3, #0]
	speed_max_l = -100;
 8006636:	4b27      	ldr	r3, [pc, #156]	; (80066d4 <rotate_L90+0x19c>)
 8006638:	4a27      	ldr	r2, [pc, #156]	; (80066d8 <rotate_L90+0x1a0>)
 800663a:	601a      	str	r2, [r3, #0]
	speed_min_r = 100;
 800663c:	4b27      	ldr	r3, [pc, #156]	; (80066dc <rotate_L90+0x1a4>)
 800663e:	4a28      	ldr	r2, [pc, #160]	; (80066e0 <rotate_L90+0x1a8>)
 8006640:	601a      	str	r2, [r3, #0]

	while(degree_z < target_degree_z+90);
 8006642:	bf00      	nop
 8006644:	4b1e      	ldr	r3, [pc, #120]	; (80066c0 <rotate_L90+0x188>)
 8006646:	edd3 7a00 	vldr	s15, [r3]
 800664a:	ed9f 7a26 	vldr	s14, [pc, #152]	; 80066e4 <rotate_L90+0x1ac>
 800664e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006652:	4b1d      	ldr	r3, [pc, #116]	; (80066c8 <rotate_L90+0x190>)
 8006654:	edd3 7a00 	vldr	s15, [r3]
 8006658:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800665c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006660:	dcf0      	bgt.n	8006644 <rotate_L90+0x10c>

	if(!MF.FLAG.XDIR){
 8006662:	4b21      	ldr	r3, [pc, #132]	; (80066e8 <rotate_L90+0x1b0>)
 8006664:	881b      	ldrh	r3, [r3, #0]
 8006666:	f3c3 3300 	ubfx	r3, r3, #12, #1
 800666a:	b2db      	uxtb	r3, r3
 800666c:	2b00      	cmp	r3, #0
 800666e:	d104      	bne.n	800667a <rotate_L90+0x142>
		turn_dir(DIR_TURN_L90, 1);										//マイクロマウス内部位置情報でも右回転処理&目標角度右90度
 8006670:	2101      	movs	r1, #1
 8006672:	20ff      	movs	r0, #255	; 0xff
 8006674:	f009 fb0c 	bl	800fc90 <turn_dir>
 8006678:	e003      	b.n	8006682 <rotate_L90+0x14a>
	}else{
		turn_dir(DIR_TURN_L90_8, 3);									//マイクロマウス内部位置情報でも右回転処理&目標角度右90度
 800667a:	2103      	movs	r1, #3
 800667c:	20fe      	movs	r0, #254	; 0xfe
 800667e:	f009 fb07 	bl	800fc90 <turn_dir>
	}
	drive_stop();
 8006682:	f7fe fb59 	bl	8004d38 <drive_stop>
}
 8006686:	bf00      	nop
 8006688:	bd98      	pop	{r3, r4, r7, pc}
 800668a:	bf00      	nop
 800668c:	f3af 8000 	nop.w
 8006690:	54442d18 	.word	0x54442d18
 8006694:	400921fb 	.word	0x400921fb
 8006698:	200001a8 	.word	0x200001a8
 800669c:	44480000 	.word	0x44480000
 80066a0:	20000d58 	.word	0x20000d58
 80066a4:	c53b8000 	.word	0xc53b8000
 80066a8:	20000ae4 	.word	0x20000ae4
 80066ac:	453b8000 	.word	0x453b8000
 80066b0:	43340000 	.word	0x43340000
 80066b4:	40508000 	.word	0x40508000
 80066b8:	20000b54 	.word	0x20000b54
 80066bc:	200001a4 	.word	0x200001a4
 80066c0:	20000bf8 	.word	0x20000bf8
 80066c4:	42a00000 	.word	0x42a00000
 80066c8:	20000b5c 	.word	0x20000b5c
 80066cc:	461c4000 	.word	0x461c4000
 80066d0:	c61c4000 	.word	0xc61c4000
 80066d4:	2000077c 	.word	0x2000077c
 80066d8:	c2c80000 	.word	0xc2c80000
 80066dc:	20000f6c 	.word	0x20000f6c
 80066e0:	42c80000 	.word	0x42c80000
 80066e4:	42b40000 	.word	0x42b40000
 80066e8:	20000f68 	.word	0x20000f68
 80066ec:	00000000 	.word	0x00000000

080066f0 <rotate_180>:
//rotate_180
// 180度回転する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void rotate_180(void){
 80066f0:	b598      	push	{r3, r4, r7, lr}
 80066f2:	af00      	add	r7, sp, #0

	full_led_write(GREEN);
 80066f4:	2002      	movs	r0, #2
 80066f6:	f00b f95f 	bl	80119b8 <full_led_write>
	target_omega_z = 800;
 80066fa:	4b55      	ldr	r3, [pc, #340]	; (8006850 <rotate_180+0x160>)
 80066fc:	4a55      	ldr	r2, [pc, #340]	; (8006854 <rotate_180+0x164>)
 80066fe:	601a      	str	r2, [r3, #0]
	accel_l = 3000;
 8006700:	4b55      	ldr	r3, [pc, #340]	; (8006858 <rotate_180+0x168>)
 8006702:	4a56      	ldr	r2, [pc, #344]	; (800685c <rotate_180+0x16c>)
 8006704:	601a      	str	r2, [r3, #0]
	accel_r = -3000;
 8006706:	4b56      	ldr	r3, [pc, #344]	; (8006860 <rotate_180+0x170>)
 8006708:	4a56      	ldr	r2, [pc, #344]	; (8006864 <rotate_180+0x174>)
 800670a:	601a      	str	r2, [r3, #0]
	speed_max_l = target_omega_z/180*M_PI * TREAD/2;
 800670c:	4b50      	ldr	r3, [pc, #320]	; (8006850 <rotate_180+0x160>)
 800670e:	edd3 7a00 	vldr	s15, [r3]
 8006712:	ed9f 7a55 	vldr	s14, [pc, #340]	; 8006868 <rotate_180+0x178>
 8006716:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800671a:	ee16 0a90 	vmov	r0, s13
 800671e:	f7f9 ff0b 	bl	8000538 <__aeabi_f2d>
 8006722:	a349      	add	r3, pc, #292	; (adr r3, 8006848 <rotate_180+0x158>)
 8006724:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006728:	f7f9 ff5e 	bl	80005e8 <__aeabi_dmul>
 800672c:	4603      	mov	r3, r0
 800672e:	460c      	mov	r4, r1
 8006730:	4618      	mov	r0, r3
 8006732:	4621      	mov	r1, r4
 8006734:	f04f 0200 	mov.w	r2, #0
 8006738:	4b4c      	ldr	r3, [pc, #304]	; (800686c <rotate_180+0x17c>)
 800673a:	f7f9 ff55 	bl	80005e8 <__aeabi_dmul>
 800673e:	4603      	mov	r3, r0
 8006740:	460c      	mov	r4, r1
 8006742:	4618      	mov	r0, r3
 8006744:	4621      	mov	r1, r4
 8006746:	f04f 0200 	mov.w	r2, #0
 800674a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800674e:	f7fa f875 	bl	800083c <__aeabi_ddiv>
 8006752:	4603      	mov	r3, r0
 8006754:	460c      	mov	r4, r1
 8006756:	4618      	mov	r0, r3
 8006758:	4621      	mov	r1, r4
 800675a:	f7fa fa1d 	bl	8000b98 <__aeabi_d2f>
 800675e:	4602      	mov	r2, r0
 8006760:	4b43      	ldr	r3, [pc, #268]	; (8006870 <rotate_180+0x180>)
 8006762:	601a      	str	r2, [r3, #0]
	speed_min_r = -1*target_omega_z/180*M_PI * TREAD/2;
 8006764:	4b3a      	ldr	r3, [pc, #232]	; (8006850 <rotate_180+0x160>)
 8006766:	edd3 7a00 	vldr	s15, [r3]
 800676a:	eef1 7a67 	vneg.f32	s15, s15
 800676e:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 8006868 <rotate_180+0x178>
 8006772:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8006776:	ee16 0a90 	vmov	r0, s13
 800677a:	f7f9 fedd 	bl	8000538 <__aeabi_f2d>
 800677e:	a332      	add	r3, pc, #200	; (adr r3, 8006848 <rotate_180+0x158>)
 8006780:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006784:	f7f9 ff30 	bl	80005e8 <__aeabi_dmul>
 8006788:	4603      	mov	r3, r0
 800678a:	460c      	mov	r4, r1
 800678c:	4618      	mov	r0, r3
 800678e:	4621      	mov	r1, r4
 8006790:	f04f 0200 	mov.w	r2, #0
 8006794:	4b35      	ldr	r3, [pc, #212]	; (800686c <rotate_180+0x17c>)
 8006796:	f7f9 ff27 	bl	80005e8 <__aeabi_dmul>
 800679a:	4603      	mov	r3, r0
 800679c:	460c      	mov	r4, r1
 800679e:	4618      	mov	r0, r3
 80067a0:	4621      	mov	r1, r4
 80067a2:	f04f 0200 	mov.w	r2, #0
 80067a6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80067aa:	f7fa f847 	bl	800083c <__aeabi_ddiv>
 80067ae:	4603      	mov	r3, r0
 80067b0:	460c      	mov	r4, r1
 80067b2:	4618      	mov	r0, r3
 80067b4:	4621      	mov	r1, r4
 80067b6:	f7fa f9ef 	bl	8000b98 <__aeabi_d2f>
 80067ba:	4602      	mov	r2, r0
 80067bc:	4b2d      	ldr	r3, [pc, #180]	; (8006874 <rotate_180+0x184>)
 80067be:	601a      	str	r2, [r3, #0]

	drive_start();											//走行開始
 80067c0:	f7fe fa8a 	bl	8004cd8 <drive_start>
	control_stop();
 80067c4:	f7fe fb08 	bl	8004dd8 <control_stop>
	while(degree_z > target_degree_z-160);
 80067c8:	bf00      	nop
 80067ca:	4b2b      	ldr	r3, [pc, #172]	; (8006878 <rotate_180+0x188>)
 80067cc:	edd3 7a00 	vldr	s15, [r3]
 80067d0:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 800687c <rotate_180+0x18c>
 80067d4:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80067d8:	4b29      	ldr	r3, [pc, #164]	; (8006880 <rotate_180+0x190>)
 80067da:	edd3 7a00 	vldr	s15, [r3]
 80067de:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80067e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80067e6:	d4f0      	bmi.n	80067ca <rotate_180+0xda>

	accel_l = -10000;
 80067e8:	4b1b      	ldr	r3, [pc, #108]	; (8006858 <rotate_180+0x168>)
 80067ea:	4a26      	ldr	r2, [pc, #152]	; (8006884 <rotate_180+0x194>)
 80067ec:	601a      	str	r2, [r3, #0]
	accel_r = 10000;
 80067ee:	4b1c      	ldr	r3, [pc, #112]	; (8006860 <rotate_180+0x170>)
 80067f0:	4a25      	ldr	r2, [pc, #148]	; (8006888 <rotate_180+0x198>)
 80067f2:	601a      	str	r2, [r3, #0]
	speed_min_l = 100;
 80067f4:	4b25      	ldr	r3, [pc, #148]	; (800688c <rotate_180+0x19c>)
 80067f6:	4a26      	ldr	r2, [pc, #152]	; (8006890 <rotate_180+0x1a0>)
 80067f8:	601a      	str	r2, [r3, #0]
	speed_max_r = -100;
 80067fa:	4b26      	ldr	r3, [pc, #152]	; (8006894 <rotate_180+0x1a4>)
 80067fc:	4a26      	ldr	r2, [pc, #152]	; (8006898 <rotate_180+0x1a8>)
 80067fe:	601a      	str	r2, [r3, #0]

	while(degree_z > target_degree_z-180);
 8006800:	bf00      	nop
 8006802:	4b1d      	ldr	r3, [pc, #116]	; (8006878 <rotate_180+0x188>)
 8006804:	edd3 7a00 	vldr	s15, [r3]
 8006808:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8006868 <rotate_180+0x178>
 800680c:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8006810:	4b1b      	ldr	r3, [pc, #108]	; (8006880 <rotate_180+0x190>)
 8006812:	edd3 7a00 	vldr	s15, [r3]
 8006816:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800681a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800681e:	d4f0      	bmi.n	8006802 <rotate_180+0x112>

	if(!MF.FLAG.XDIR){
 8006820:	4b1e      	ldr	r3, [pc, #120]	; (800689c <rotate_180+0x1ac>)
 8006822:	881b      	ldrh	r3, [r3, #0]
 8006824:	f3c3 3300 	ubfx	r3, r3, #12, #1
 8006828:	b2db      	uxtb	r3, r3
 800682a:	2b00      	cmp	r3, #0
 800682c:	d104      	bne.n	8006838 <rotate_180+0x148>
		turn_dir(DIR_TURN_180, 1);										//マイクロマウス内部位置情報でも180度回転処理&目標角度左180度
 800682e:	2101      	movs	r1, #1
 8006830:	2002      	movs	r0, #2
 8006832:	f009 fa2d 	bl	800fc90 <turn_dir>
 8006836:	e003      	b.n	8006840 <rotate_180+0x150>
	}else{
		turn_dir(DIR_TURN_R180_8, 3);									//マイクロマウス内部位置情報でも180度回転処理&目標角度左180度
 8006838:	2103      	movs	r1, #3
 800683a:	2004      	movs	r0, #4
 800683c:	f009 fa28 	bl	800fc90 <turn_dir>
	}
	drive_stop();
 8006840:	f7fe fa7a 	bl	8004d38 <drive_stop>

}
 8006844:	bf00      	nop
 8006846:	bd98      	pop	{r3, r4, r7, pc}
 8006848:	54442d18 	.word	0x54442d18
 800684c:	400921fb 	.word	0x400921fb
 8006850:	200001a8 	.word	0x200001a8
 8006854:	44480000 	.word	0x44480000
 8006858:	20000d58 	.word	0x20000d58
 800685c:	453b8000 	.word	0x453b8000
 8006860:	20000ae4 	.word	0x20000ae4
 8006864:	c53b8000 	.word	0xc53b8000
 8006868:	43340000 	.word	0x43340000
 800686c:	40508000 	.word	0x40508000
 8006870:	2000077c 	.word	0x2000077c
 8006874:	20000f6c 	.word	0x20000f6c
 8006878:	20000bf8 	.word	0x20000bf8
 800687c:	43200000 	.word	0x43200000
 8006880:	20000b5c 	.word	0x20000b5c
 8006884:	c61c4000 	.word	0xc61c4000
 8006888:	461c4000 	.word	0x461c4000
 800688c:	20000b54 	.word	0x20000b54
 8006890:	42c80000 	.word	0x42c80000
 8006894:	200001a4 	.word	0x200001a4
 8006898:	c2c80000 	.word	0xc2c80000
 800689c:	20000f68 	.word	0x20000f68

080068a0 <slalom_R90>:
//slalom_R90
// スラロームで左に90度回転する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void slalom_R90(void){
 80068a0:	b580      	push	{r7, lr}
 80068a2:	b082      	sub	sp, #8
 80068a4:	af02      	add	r7, sp, #8
	full_led_write(PURPLE);
 80068a6:	2005      	movs	r0, #5
 80068a8:	f00b f886 	bl	80119b8 <full_led_write>
	if(run_mode == LOW){
 80068ac:	4b7c      	ldr	r3, [pc, #496]	; (8006aa0 <slalom_R90+0x200>)
 80068ae:	781b      	ldrb	r3, [r3, #0]
 80068b0:	b2db      	uxtb	r3, r3
 80068b2:	2b01      	cmp	r3, #1
 80068b4:	d12a      	bne.n	800690c <slalom_R90+0x6c>
		slalomF(10000, SPEED_LOW, SLALOM_OFFSET_F, SLALOM_WALL_FL, SLALOM_WALL_FR);
 80068b6:	23fa      	movs	r3, #250	; 0xfa
 80068b8:	9300      	str	r3, [sp, #0]
 80068ba:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80068be:	2212      	movs	r2, #18
 80068c0:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80068c4:	f242 7010 	movw	r0, #10000	; 0x2710
 80068c8:	f7fe fde6 	bl	8005498 <slalomF>
		slalomR(-SLALOM_DEGACCEL, -SLALOM_OMEGA, -90, SPEED_LOW);
 80068cc:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80068d0:	f06f 0259 	mvn.w	r2, #89	; 0x59
 80068d4:	4973      	ldr	r1, [pc, #460]	; (8006aa4 <slalom_R90+0x204>)
 80068d6:	4874      	ldr	r0, [pc, #464]	; (8006aa8 <slalom_R90+0x208>)
 80068d8:	f7fe fe5a 	bl	8005590 <slalomR>

		if(!MF.FLAG.XDIR){
 80068dc:	4b73      	ldr	r3, [pc, #460]	; (8006aac <slalom_R90+0x20c>)
 80068de:	881b      	ldrh	r3, [r3, #0]
 80068e0:	f3c3 3300 	ubfx	r3, r3, #12, #1
 80068e4:	b2db      	uxtb	r3, r3
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d104      	bne.n	80068f4 <slalom_R90+0x54>
			turn_dir(DIR_TURN_R90, 1);									//マイクロマウス内部位置情報でも左回転処理&目標角度左90度
 80068ea:	2101      	movs	r1, #1
 80068ec:	2001      	movs	r0, #1
 80068ee:	f009 f9cf 	bl	800fc90 <turn_dir>
 80068f2:	e003      	b.n	80068fc <slalom_R90+0x5c>
		}else{
			turn_dir(DIR_TURN_R90_8, 3);								//マイクロマウス内部位置情報でも左回転処理&目標角度左90度
 80068f4:	2103      	movs	r1, #3
 80068f6:	2002      	movs	r0, #2
 80068f8:	f009 f9ca 	bl	800fc90 <turn_dir>
		}
		slalomB(10000, SPEED_LOW, SLALOM_OFFSET_B);
 80068fc:	2219      	movs	r2, #25
 80068fe:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8006902:	f242 7010 	movw	r0, #10000	; 0x2710
 8006906:	f7fe ff65 	bl	80057d4 <slalomB>
 800690a:	e0bd      	b.n	8006a88 <slalom_R90+0x1e8>
	}else if(run_mode == MIDDLE){
 800690c:	4b64      	ldr	r3, [pc, #400]	; (8006aa0 <slalom_R90+0x200>)
 800690e:	781b      	ldrb	r3, [r3, #0]
 8006910:	b2db      	uxtb	r3, r3
 8006912:	2b02      	cmp	r3, #2
 8006914:	d12a      	bne.n	800696c <slalom_R90+0xcc>
		slalomF(10000, SPEED_MIDDLE, SLALOM_2_OFFSET_F, SLALOM_2_WALL_FL, SLALOM_2_WALL_FR);
 8006916:	23f0      	movs	r3, #240	; 0xf0
 8006918:	9300      	str	r3, [sp, #0]
 800691a:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 800691e:	2219      	movs	r2, #25
 8006920:	f44f 7116 	mov.w	r1, #600	; 0x258
 8006924:	f242 7010 	movw	r0, #10000	; 0x2710
 8006928:	f7fe fdb6 	bl	8005498 <slalomF>
		slalomR(-SLALOM_2_DEGACCEL, -SLALOM_2_OMEGA, -85, SPEED_MIDDLE);
 800692c:	f44f 7316 	mov.w	r3, #600	; 0x258
 8006930:	f06f 0254 	mvn.w	r2, #84	; 0x54
 8006934:	495e      	ldr	r1, [pc, #376]	; (8006ab0 <slalom_R90+0x210>)
 8006936:	485f      	ldr	r0, [pc, #380]	; (8006ab4 <slalom_R90+0x214>)
 8006938:	f7fe fe2a 	bl	8005590 <slalomR>

		if(!MF.FLAG.XDIR){
 800693c:	4b5b      	ldr	r3, [pc, #364]	; (8006aac <slalom_R90+0x20c>)
 800693e:	881b      	ldrh	r3, [r3, #0]
 8006940:	f3c3 3300 	ubfx	r3, r3, #12, #1
 8006944:	b2db      	uxtb	r3, r3
 8006946:	2b00      	cmp	r3, #0
 8006948:	d104      	bne.n	8006954 <slalom_R90+0xb4>
			turn_dir(DIR_TURN_R90, 1);									//マイクロマウス内部位置情報でも左回転処理&目標角度左90度
 800694a:	2101      	movs	r1, #1
 800694c:	2001      	movs	r0, #1
 800694e:	f009 f99f 	bl	800fc90 <turn_dir>
 8006952:	e003      	b.n	800695c <slalom_R90+0xbc>
		}else{
			turn_dir(DIR_TURN_R90_8, 3);								//マイクロマウス内部位置情報でも左回転処理&目標角度左90度
 8006954:	2103      	movs	r1, #3
 8006956:	2002      	movs	r0, #2
 8006958:	f009 f99a 	bl	800fc90 <turn_dir>
		}
		slalomB(10000, SPEED_MIDDLE, SLALOM_2_OFFSET_B);
 800695c:	223c      	movs	r2, #60	; 0x3c
 800695e:	f44f 7116 	mov.w	r1, #600	; 0x258
 8006962:	f242 7010 	movw	r0, #10000	; 0x2710
 8006966:	f7fe ff35 	bl	80057d4 <slalomB>
 800696a:	e08d      	b.n	8006a88 <slalom_R90+0x1e8>
	}else if(run_mode == HIGH){
 800696c:	4b4c      	ldr	r3, [pc, #304]	; (8006aa0 <slalom_R90+0x200>)
 800696e:	781b      	ldrb	r3, [r3, #0]
 8006970:	b2db      	uxtb	r3, r3
 8006972:	2b03      	cmp	r3, #3
 8006974:	d12a      	bne.n	80069cc <slalom_R90+0x12c>
		slalomF(10000, SPEED_HIGH, SLALOM_3_OFFSET_F, SLALOM_3_WALL_FL, SLALOM_3_WALL_FR);
 8006976:	23b4      	movs	r3, #180	; 0xb4
 8006978:	9300      	str	r3, [sp, #0]
 800697a:	f44f 73b4 	mov.w	r3, #360	; 0x168
 800697e:	2216      	movs	r2, #22
 8006980:	f44f 7148 	mov.w	r1, #800	; 0x320
 8006984:	f242 7010 	movw	r0, #10000	; 0x2710
 8006988:	f7fe fd86 	bl	8005498 <slalomF>
		slalomR(-SLALOM_3_DEGACCEL, -SLALOM_3_OMEGA, -70, SPEED_HIGH);
 800698c:	f44f 7348 	mov.w	r3, #800	; 0x320
 8006990:	f06f 0245 	mvn.w	r2, #69	; 0x45
 8006994:	4948      	ldr	r1, [pc, #288]	; (8006ab8 <slalom_R90+0x218>)
 8006996:	4849      	ldr	r0, [pc, #292]	; (8006abc <slalom_R90+0x21c>)
 8006998:	f7fe fdfa 	bl	8005590 <slalomR>

		if(!MF.FLAG.XDIR){
 800699c:	4b43      	ldr	r3, [pc, #268]	; (8006aac <slalom_R90+0x20c>)
 800699e:	881b      	ldrh	r3, [r3, #0]
 80069a0:	f3c3 3300 	ubfx	r3, r3, #12, #1
 80069a4:	b2db      	uxtb	r3, r3
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d104      	bne.n	80069b4 <slalom_R90+0x114>
			turn_dir(DIR_TURN_R90, 1);									//マイクロマウス内部位置情報でも左回転処理&目標角度左90度
 80069aa:	2101      	movs	r1, #1
 80069ac:	2001      	movs	r0, #1
 80069ae:	f009 f96f 	bl	800fc90 <turn_dir>
 80069b2:	e003      	b.n	80069bc <slalom_R90+0x11c>
		}else{
			turn_dir(DIR_TURN_R90_8, 3);								//マイクロマウス内部位置情報でも左回転処理&目標角度左90度
 80069b4:	2103      	movs	r1, #3
 80069b6:	2002      	movs	r0, #2
 80069b8:	f009 f96a 	bl	800fc90 <turn_dir>
		}
		slalomB(10000, SPEED_HIGH, SLALOM_3_OFFSET_B);
 80069bc:	225a      	movs	r2, #90	; 0x5a
 80069be:	f44f 7148 	mov.w	r1, #800	; 0x320
 80069c2:	f242 7010 	movw	r0, #10000	; 0x2710
 80069c6:	f7fe ff05 	bl	80057d4 <slalomB>
 80069ca:	e05d      	b.n	8006a88 <slalom_R90+0x1e8>
	}else if(run_mode == HIGH_HIGH){
 80069cc:	4b34      	ldr	r3, [pc, #208]	; (8006aa0 <slalom_R90+0x200>)
 80069ce:	781b      	ldrb	r3, [r3, #0]
 80069d0:	b2db      	uxtb	r3, r3
 80069d2:	2b04      	cmp	r3, #4
 80069d4:	d12a      	bne.n	8006a2c <slalom_R90+0x18c>
		slalomF(10000, SPEED_HIGH_HIGH, SLALOM_4_OFFSET_F, SLALOM_4_WALL_FL, SLALOM_4_WALL_FR);
 80069d6:	2396      	movs	r3, #150	; 0x96
 80069d8:	9300      	str	r3, [sp, #0]
 80069da:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80069de:	220a      	movs	r2, #10
 80069e0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80069e4:	f242 7010 	movw	r0, #10000	; 0x2710
 80069e8:	f7fe fd56 	bl	8005498 <slalomF>
		slalomR(-SLALOM_4_DEGACCEL, -SLALOM_4_OMEGA, -50, SPEED_HIGH_HIGH);
 80069ec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80069f0:	f06f 0231 	mvn.w	r2, #49	; 0x31
 80069f4:	4930      	ldr	r1, [pc, #192]	; (8006ab8 <slalom_R90+0x218>)
 80069f6:	4832      	ldr	r0, [pc, #200]	; (8006ac0 <slalom_R90+0x220>)
 80069f8:	f7fe fdca 	bl	8005590 <slalomR>

		if(!MF.FLAG.XDIR){
 80069fc:	4b2b      	ldr	r3, [pc, #172]	; (8006aac <slalom_R90+0x20c>)
 80069fe:	881b      	ldrh	r3, [r3, #0]
 8006a00:	f3c3 3300 	ubfx	r3, r3, #12, #1
 8006a04:	b2db      	uxtb	r3, r3
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d104      	bne.n	8006a14 <slalom_R90+0x174>
			turn_dir(DIR_TURN_R90, 1);									//マイクロマウス内部位置情報でも左回転処理&目標角度左90度
 8006a0a:	2101      	movs	r1, #1
 8006a0c:	2001      	movs	r0, #1
 8006a0e:	f009 f93f 	bl	800fc90 <turn_dir>
 8006a12:	e003      	b.n	8006a1c <slalom_R90+0x17c>
		}else{
			turn_dir(DIR_TURN_R90_8, 3);								//マイクロマウス内部位置情報でも左回転処理&目標角度左90度
 8006a14:	2103      	movs	r1, #3
 8006a16:	2002      	movs	r0, #2
 8006a18:	f009 f93a 	bl	800fc90 <turn_dir>
		}
		slalomB(10000, SPEED_HIGH_HIGH, SLALOM_4_OFFSET_B);
 8006a1c:	2273      	movs	r2, #115	; 0x73
 8006a1e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8006a22:	f242 7010 	movw	r0, #10000	; 0x2710
 8006a26:	f7fe fed5 	bl	80057d4 <slalomB>
 8006a2a:	e02d      	b.n	8006a88 <slalom_R90+0x1e8>
	}else if(run_mode == 5){
 8006a2c:	4b1c      	ldr	r3, [pc, #112]	; (8006aa0 <slalom_R90+0x200>)
 8006a2e:	781b      	ldrb	r3, [r3, #0]
 8006a30:	b2db      	uxtb	r3, r3
 8006a32:	2b05      	cmp	r3, #5
 8006a34:	d128      	bne.n	8006a88 <slalom_R90+0x1e8>
		slalomF(10000, SPEED_5, SLALOM_5_OFFSET_F, SLALOM_5_WALL_FL, SLALOM_5_WALL_FR);
 8006a36:	2378      	movs	r3, #120	; 0x78
 8006a38:	9300      	str	r3, [sp, #0]
 8006a3a:	23f0      	movs	r3, #240	; 0xf0
 8006a3c:	2205      	movs	r2, #5
 8006a3e:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 8006a42:	f242 7010 	movw	r0, #10000	; 0x2710
 8006a46:	f7fe fd27 	bl	8005498 <slalomF>
		slalomR(-SLALOM_5_DEGACCEL, -SLALOM_5_OMEGA, -20, SPEED_5);
 8006a4a:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
 8006a4e:	f06f 0213 	mvn.w	r2, #19
 8006a52:	491c      	ldr	r1, [pc, #112]	; (8006ac4 <slalom_R90+0x224>)
 8006a54:	481c      	ldr	r0, [pc, #112]	; (8006ac8 <slalom_R90+0x228>)
 8006a56:	f7fe fd9b 	bl	8005590 <slalomR>

		if(!MF.FLAG.XDIR){
 8006a5a:	4b14      	ldr	r3, [pc, #80]	; (8006aac <slalom_R90+0x20c>)
 8006a5c:	881b      	ldrh	r3, [r3, #0]
 8006a5e:	f3c3 3300 	ubfx	r3, r3, #12, #1
 8006a62:	b2db      	uxtb	r3, r3
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d104      	bne.n	8006a72 <slalom_R90+0x1d2>
			turn_dir(DIR_TURN_R90, 1);									//マイクロマウス内部位置情報でも左回転処理&目標角度左90度
 8006a68:	2101      	movs	r1, #1
 8006a6a:	2001      	movs	r0, #1
 8006a6c:	f009 f910 	bl	800fc90 <turn_dir>
 8006a70:	e003      	b.n	8006a7a <slalom_R90+0x1da>
		}else{
			turn_dir(DIR_TURN_R90_8, 3);								//マイクロマウス内部位置情報でも左回転処理&目標角度左90度
 8006a72:	2103      	movs	r1, #3
 8006a74:	2002      	movs	r0, #2
 8006a76:	f009 f90b 	bl	800fc90 <turn_dir>
		}
		slalomB(10000, SPEED_5, SLALOM_5_OFFSET_B);
 8006a7a:	22a5      	movs	r2, #165	; 0xa5
 8006a7c:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 8006a80:	f242 7010 	movw	r0, #10000	; 0x2710
 8006a84:	f7fe fea6 	bl	80057d4 <slalomB>
	}
	if(!MF.FLAG.SCND)get_wall_info();					//壁情報を取得，片壁制御の有効・無効の判断
 8006a88:	4b08      	ldr	r3, [pc, #32]	; (8006aac <slalom_R90+0x20c>)
 8006a8a:	881b      	ldrh	r3, [r3, #0]
 8006a8c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8006a90:	b2db      	uxtb	r3, r3
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d101      	bne.n	8006a9a <slalom_R90+0x1fa>
 8006a96:	f00a ff1b 	bl	80118d0 <get_wall_info>
}
 8006a9a:	bf00      	nop
 8006a9c:	46bd      	mov	sp, r7
 8006a9e:	bd80      	pop	{r7, pc}
 8006aa0:	20000456 	.word	0x20000456
 8006aa4:	fffffdda 	.word	0xfffffdda
 8006aa8:	fffff060 	.word	0xfffff060
 8006aac:	20000f68 	.word	0x20000f68
 8006ab0:	fffffc7c 	.word	0xfffffc7c
 8006ab4:	ffffd120 	.word	0xffffd120
 8006ab8:	fffffb50 	.word	0xfffffb50
 8006abc:	ffffa240 	.word	0xffffa240
 8006ac0:	ffff8300 	.word	0xffff8300
 8006ac4:	fffffaec 	.word	0xfffffaec
 8006ac8:	ffff3cb0 	.word	0xffff3cb0

08006acc <slalom_L90>:
//slalom_L90
// スラロームで右に90度回転する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void slalom_L90(void){
 8006acc:	b580      	push	{r7, lr}
 8006ace:	b082      	sub	sp, #8
 8006ad0:	af02      	add	r7, sp, #8
	full_led_write(YELLOW);
 8006ad2:	2006      	movs	r0, #6
 8006ad4:	f00a ff70 	bl	80119b8 <full_led_write>
	if(run_mode == LOW){
 8006ad8:	4b7f      	ldr	r3, [pc, #508]	; (8006cd8 <slalom_L90+0x20c>)
 8006ada:	781b      	ldrb	r3, [r3, #0]
 8006adc:	b2db      	uxtb	r3, r3
 8006ade:	2b01      	cmp	r3, #1
 8006ae0:	d12b      	bne.n	8006b3a <slalom_L90+0x6e>
		slalomF(10000, SPEED_LOW, SLALOM_OFFSET_F, SLALOM_WALL_FL, SLALOM_WALL_FR);
 8006ae2:	23fa      	movs	r3, #250	; 0xfa
 8006ae4:	9300      	str	r3, [sp, #0]
 8006ae6:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8006aea:	2212      	movs	r2, #18
 8006aec:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8006af0:	f242 7010 	movw	r0, #10000	; 0x2710
 8006af4:	f7fe fcd0 	bl	8005498 <slalomF>
		slalomR(SLALOM_DEGACCEL, SLALOM_OMEGA, 90, SPEED_LOW);
 8006af8:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8006afc:	225a      	movs	r2, #90	; 0x5a
 8006afe:	f240 2126 	movw	r1, #550	; 0x226
 8006b02:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8006b06:	f7fe fd43 	bl	8005590 <slalomR>

		if(!MF.FLAG.XDIR){
 8006b0a:	4b74      	ldr	r3, [pc, #464]	; (8006cdc <slalom_L90+0x210>)
 8006b0c:	881b      	ldrh	r3, [r3, #0]
 8006b0e:	f3c3 3300 	ubfx	r3, r3, #12, #1
 8006b12:	b2db      	uxtb	r3, r3
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d104      	bne.n	8006b22 <slalom_L90+0x56>
			turn_dir(DIR_TURN_L90, 1);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8006b18:	2101      	movs	r1, #1
 8006b1a:	20ff      	movs	r0, #255	; 0xff
 8006b1c:	f009 f8b8 	bl	800fc90 <turn_dir>
 8006b20:	e003      	b.n	8006b2a <slalom_L90+0x5e>
		}else{
			turn_dir(DIR_TURN_L90_8, 3);								//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8006b22:	2103      	movs	r1, #3
 8006b24:	20fe      	movs	r0, #254	; 0xfe
 8006b26:	f009 f8b3 	bl	800fc90 <turn_dir>
		}
		slalomB(10000, SPEED_LOW, SLALOM_OFFSET_B);
 8006b2a:	2219      	movs	r2, #25
 8006b2c:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8006b30:	f242 7010 	movw	r0, #10000	; 0x2710
 8006b34:	f7fe fe4e 	bl	80057d4 <slalomB>
 8006b38:	e0c1      	b.n	8006cbe <slalom_L90+0x1f2>
	}else if(run_mode == MIDDLE){
 8006b3a:	4b67      	ldr	r3, [pc, #412]	; (8006cd8 <slalom_L90+0x20c>)
 8006b3c:	781b      	ldrb	r3, [r3, #0]
 8006b3e:	b2db      	uxtb	r3, r3
 8006b40:	2b02      	cmp	r3, #2
 8006b42:	d12b      	bne.n	8006b9c <slalom_L90+0xd0>
		slalomF(10000, SPEED_MIDDLE, SLALOM_2_OFFSET_F, SLALOM_2_WALL_FL, SLALOM_2_WALL_FR);
 8006b44:	23f0      	movs	r3, #240	; 0xf0
 8006b46:	9300      	str	r3, [sp, #0]
 8006b48:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8006b4c:	2219      	movs	r2, #25
 8006b4e:	f44f 7116 	mov.w	r1, #600	; 0x258
 8006b52:	f242 7010 	movw	r0, #10000	; 0x2710
 8006b56:	f7fe fc9f 	bl	8005498 <slalomF>
		slalomR(SLALOM_2_DEGACCEL, SLALOM_2_OMEGA, 85, SPEED_MIDDLE);
 8006b5a:	f44f 7316 	mov.w	r3, #600	; 0x258
 8006b5e:	2255      	movs	r2, #85	; 0x55
 8006b60:	f44f 7161 	mov.w	r1, #900	; 0x384
 8006b64:	f642 60e0 	movw	r0, #12000	; 0x2ee0
 8006b68:	f7fe fd12 	bl	8005590 <slalomR>

		if(!MF.FLAG.XDIR){
 8006b6c:	4b5b      	ldr	r3, [pc, #364]	; (8006cdc <slalom_L90+0x210>)
 8006b6e:	881b      	ldrh	r3, [r3, #0]
 8006b70:	f3c3 3300 	ubfx	r3, r3, #12, #1
 8006b74:	b2db      	uxtb	r3, r3
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d104      	bne.n	8006b84 <slalom_L90+0xb8>
			turn_dir(DIR_TURN_L90, 1);									//マイクロマウス内部位置情報でも左回転処理&目標角度左90度
 8006b7a:	2101      	movs	r1, #1
 8006b7c:	20ff      	movs	r0, #255	; 0xff
 8006b7e:	f009 f887 	bl	800fc90 <turn_dir>
 8006b82:	e003      	b.n	8006b8c <slalom_L90+0xc0>
		}else{
			turn_dir(DIR_TURN_L90_8, 3);								//マイクロマウス内部位置情報でも左回転処理&目標角度左90度
 8006b84:	2103      	movs	r1, #3
 8006b86:	20fe      	movs	r0, #254	; 0xfe
 8006b88:	f009 f882 	bl	800fc90 <turn_dir>
		}
		slalomB(10000, SPEED_MIDDLE, SLALOM_2_OFFSET_B);
 8006b8c:	223c      	movs	r2, #60	; 0x3c
 8006b8e:	f44f 7116 	mov.w	r1, #600	; 0x258
 8006b92:	f242 7010 	movw	r0, #10000	; 0x2710
 8006b96:	f7fe fe1d 	bl	80057d4 <slalomB>
 8006b9a:	e090      	b.n	8006cbe <slalom_L90+0x1f2>
	}else if(run_mode == HIGH){
 8006b9c:	4b4e      	ldr	r3, [pc, #312]	; (8006cd8 <slalom_L90+0x20c>)
 8006b9e:	781b      	ldrb	r3, [r3, #0]
 8006ba0:	b2db      	uxtb	r3, r3
 8006ba2:	2b03      	cmp	r3, #3
 8006ba4:	d12b      	bne.n	8006bfe <slalom_L90+0x132>
		slalomF(10000, SPEED_HIGH, SLALOM_3_OFFSET_F, SLALOM_3_WALL_FL, SLALOM_3_WALL_FR);
 8006ba6:	23b4      	movs	r3, #180	; 0xb4
 8006ba8:	9300      	str	r3, [sp, #0]
 8006baa:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8006bae:	2216      	movs	r2, #22
 8006bb0:	f44f 7148 	mov.w	r1, #800	; 0x320
 8006bb4:	f242 7010 	movw	r0, #10000	; 0x2710
 8006bb8:	f7fe fc6e 	bl	8005498 <slalomF>
		slalomR(SLALOM_3_DEGACCEL, SLALOM_3_OMEGA, 70, SPEED_HIGH);
 8006bbc:	f44f 7348 	mov.w	r3, #800	; 0x320
 8006bc0:	2246      	movs	r2, #70	; 0x46
 8006bc2:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 8006bc6:	f645 50c0 	movw	r0, #24000	; 0x5dc0
 8006bca:	f7fe fce1 	bl	8005590 <slalomR>

		if(!MF.FLAG.XDIR){
 8006bce:	4b43      	ldr	r3, [pc, #268]	; (8006cdc <slalom_L90+0x210>)
 8006bd0:	881b      	ldrh	r3, [r3, #0]
 8006bd2:	f3c3 3300 	ubfx	r3, r3, #12, #1
 8006bd6:	b2db      	uxtb	r3, r3
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d104      	bne.n	8006be6 <slalom_L90+0x11a>
			turn_dir(DIR_TURN_L90, 1);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8006bdc:	2101      	movs	r1, #1
 8006bde:	20ff      	movs	r0, #255	; 0xff
 8006be0:	f009 f856 	bl	800fc90 <turn_dir>
 8006be4:	e003      	b.n	8006bee <slalom_L90+0x122>
		}else{
			turn_dir(DIR_TURN_L90_8, 3);								//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8006be6:	2103      	movs	r1, #3
 8006be8:	20fe      	movs	r0, #254	; 0xfe
 8006bea:	f009 f851 	bl	800fc90 <turn_dir>
		}
		slalomB(10000, SPEED_HIGH, SLALOM_3_OFFSET_B);
 8006bee:	225a      	movs	r2, #90	; 0x5a
 8006bf0:	f44f 7148 	mov.w	r1, #800	; 0x320
 8006bf4:	f242 7010 	movw	r0, #10000	; 0x2710
 8006bf8:	f7fe fdec 	bl	80057d4 <slalomB>
 8006bfc:	e05f      	b.n	8006cbe <slalom_L90+0x1f2>
	}else if(run_mode == HIGH_HIGH){
 8006bfe:	4b36      	ldr	r3, [pc, #216]	; (8006cd8 <slalom_L90+0x20c>)
 8006c00:	781b      	ldrb	r3, [r3, #0]
 8006c02:	b2db      	uxtb	r3, r3
 8006c04:	2b04      	cmp	r3, #4
 8006c06:	d12b      	bne.n	8006c60 <slalom_L90+0x194>
		slalomF(10000, SPEED_HIGH_HIGH, SLALOM_4_OFFSET_F, SLALOM_4_WALL_FL, SLALOM_4_WALL_FR);
 8006c08:	2396      	movs	r3, #150	; 0x96
 8006c0a:	9300      	str	r3, [sp, #0]
 8006c0c:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8006c10:	220a      	movs	r2, #10
 8006c12:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8006c16:	f242 7010 	movw	r0, #10000	; 0x2710
 8006c1a:	f7fe fc3d 	bl	8005498 <slalomF>
		slalomR(SLALOM_4_DEGACCEL, SLALOM_4_OMEGA, 50, SPEED_HIGH_HIGH);
 8006c1e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006c22:	2232      	movs	r2, #50	; 0x32
 8006c24:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 8006c28:	f44f 40fa 	mov.w	r0, #32000	; 0x7d00
 8006c2c:	f7fe fcb0 	bl	8005590 <slalomR>

		if(!MF.FLAG.XDIR){
 8006c30:	4b2a      	ldr	r3, [pc, #168]	; (8006cdc <slalom_L90+0x210>)
 8006c32:	881b      	ldrh	r3, [r3, #0]
 8006c34:	f3c3 3300 	ubfx	r3, r3, #12, #1
 8006c38:	b2db      	uxtb	r3, r3
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d104      	bne.n	8006c48 <slalom_L90+0x17c>
			turn_dir(DIR_TURN_L90, 1);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8006c3e:	2101      	movs	r1, #1
 8006c40:	20ff      	movs	r0, #255	; 0xff
 8006c42:	f009 f825 	bl	800fc90 <turn_dir>
 8006c46:	e003      	b.n	8006c50 <slalom_L90+0x184>
		}else{
			turn_dir(DIR_TURN_L90_8, 3);								//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8006c48:	2103      	movs	r1, #3
 8006c4a:	20fe      	movs	r0, #254	; 0xfe
 8006c4c:	f009 f820 	bl	800fc90 <turn_dir>
		}
		slalomB(10000, SPEED_HIGH_HIGH, SLALOM_4_OFFSET_B);
 8006c50:	2273      	movs	r2, #115	; 0x73
 8006c52:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8006c56:	f242 7010 	movw	r0, #10000	; 0x2710
 8006c5a:	f7fe fdbb 	bl	80057d4 <slalomB>
 8006c5e:	e02e      	b.n	8006cbe <slalom_L90+0x1f2>
	}else if(run_mode == 5){
 8006c60:	4b1d      	ldr	r3, [pc, #116]	; (8006cd8 <slalom_L90+0x20c>)
 8006c62:	781b      	ldrb	r3, [r3, #0]
 8006c64:	b2db      	uxtb	r3, r3
 8006c66:	2b05      	cmp	r3, #5
 8006c68:	d129      	bne.n	8006cbe <slalom_L90+0x1f2>
		slalomF(10000, SPEED_5, SLALOM_5_OFFSET_F, SLALOM_5_WALL_FL, SLALOM_5_WALL_FR);
 8006c6a:	2378      	movs	r3, #120	; 0x78
 8006c6c:	9300      	str	r3, [sp, #0]
 8006c6e:	23f0      	movs	r3, #240	; 0xf0
 8006c70:	2205      	movs	r2, #5
 8006c72:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 8006c76:	f242 7010 	movw	r0, #10000	; 0x2710
 8006c7a:	f7fe fc0d 	bl	8005498 <slalomF>
		slalomR(SLALOM_5_DEGACCEL, SLALOM_5_OMEGA, 20, SPEED_5);
 8006c7e:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
 8006c82:	2214      	movs	r2, #20
 8006c84:	f240 5114 	movw	r1, #1300	; 0x514
 8006c88:	f24c 3050 	movw	r0, #50000	; 0xc350
 8006c8c:	f7fe fc80 	bl	8005590 <slalomR>

		if(!MF.FLAG.XDIR){
 8006c90:	4b12      	ldr	r3, [pc, #72]	; (8006cdc <slalom_L90+0x210>)
 8006c92:	881b      	ldrh	r3, [r3, #0]
 8006c94:	f3c3 3300 	ubfx	r3, r3, #12, #1
 8006c98:	b2db      	uxtb	r3, r3
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d104      	bne.n	8006ca8 <slalom_L90+0x1dc>
			turn_dir(DIR_TURN_L90, 1);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8006c9e:	2101      	movs	r1, #1
 8006ca0:	20ff      	movs	r0, #255	; 0xff
 8006ca2:	f008 fff5 	bl	800fc90 <turn_dir>
 8006ca6:	e003      	b.n	8006cb0 <slalom_L90+0x1e4>
		}else{
			turn_dir(DIR_TURN_L90_8, 3);								//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8006ca8:	2103      	movs	r1, #3
 8006caa:	20fe      	movs	r0, #254	; 0xfe
 8006cac:	f008 fff0 	bl	800fc90 <turn_dir>
		}
		slalomB(10000, SPEED_5, SLALOM_5_OFFSET_B);
 8006cb0:	22a5      	movs	r2, #165	; 0xa5
 8006cb2:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 8006cb6:	f242 7010 	movw	r0, #10000	; 0x2710
 8006cba:	f7fe fd8b 	bl	80057d4 <slalomB>
	}
	if(!MF.FLAG.SCND)get_wall_info();					//壁情報を取得，片壁制御の有効・無効の判断
 8006cbe:	4b07      	ldr	r3, [pc, #28]	; (8006cdc <slalom_L90+0x210>)
 8006cc0:	881b      	ldrh	r3, [r3, #0]
 8006cc2:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8006cc6:	b2db      	uxtb	r3, r3
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d101      	bne.n	8006cd0 <slalom_L90+0x204>
 8006ccc:	f00a fe00 	bl	80118d0 <get_wall_info>
}
 8006cd0:	bf00      	nop
 8006cd2:	46bd      	mov	sp, r7
 8006cd4:	bd80      	pop	{r7, pc}
 8006cd6:	bf00      	nop
 8006cd8:	20000456 	.word	0x20000456
 8006cdc:	20000f68 	.word	0x20000f68

08006ce0 <Lslalom_R90>:
//Lslalom_R90
// スラロームで右に90度回転する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void Lslalom_R90(void){
 8006ce0:	b580      	push	{r7, lr}
 8006ce2:	b082      	sub	sp, #8
 8006ce4:	af02      	add	r7, sp, #8
	full_led_write(PURPLE);
 8006ce6:	2005      	movs	r0, #5
 8006ce8:	f00a fe66 	bl	80119b8 <full_led_write>
	if(run_mode == LOW){
 8006cec:	4b8e      	ldr	r3, [pc, #568]	; (8006f28 <Lslalom_R90+0x248>)
 8006cee:	781b      	ldrb	r3, [r3, #0]
 8006cf0:	b2db      	uxtb	r3, r3
 8006cf2:	2b01      	cmp	r3, #1
 8006cf4:	d12a      	bne.n	8006d4c <Lslalom_R90+0x6c>
		slalomF(10000, SPEED_LOW, LSLALOM_OFFSET_F, LSLALOM_WALL_FL, LSLALOM_WALL_FR);
 8006cf6:	2364      	movs	r3, #100	; 0x64
 8006cf8:	9300      	str	r3, [sp, #0]
 8006cfa:	23c8      	movs	r3, #200	; 0xc8
 8006cfc:	222d      	movs	r2, #45	; 0x2d
 8006cfe:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8006d02:	f242 7010 	movw	r0, #10000	; 0x2710
 8006d06:	f7fe fbc7 	bl	8005498 <slalomF>
		slalomR(-LSLALOM_DEGACCEL, -LSLALOM_OMEGA, -90, SPEED_LOW);
 8006d0a:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8006d0e:	f06f 0259 	mvn.w	r2, #89	; 0x59
 8006d12:	f06f 01c7 	mvn.w	r1, #199	; 0xc7
 8006d16:	4885      	ldr	r0, [pc, #532]	; (8006f2c <Lslalom_R90+0x24c>)
 8006d18:	f7fe fc3a 	bl	8005590 <slalomR>

		if(!MF.FLAG.XDIR){
 8006d1c:	4b84      	ldr	r3, [pc, #528]	; (8006f30 <Lslalom_R90+0x250>)
 8006d1e:	881b      	ldrh	r3, [r3, #0]
 8006d20:	f3c3 3300 	ubfx	r3, r3, #12, #1
 8006d24:	b2db      	uxtb	r3, r3
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d104      	bne.n	8006d34 <Lslalom_R90+0x54>
			turn_dir(DIR_TURN_R90, 1);										//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8006d2a:	2101      	movs	r1, #1
 8006d2c:	2001      	movs	r0, #1
 8006d2e:	f008 ffaf 	bl	800fc90 <turn_dir>
 8006d32:	e003      	b.n	8006d3c <Lslalom_R90+0x5c>
		}else{
			turn_dir(DIR_TURN_R90_8, 3);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8006d34:	2103      	movs	r1, #3
 8006d36:	2002      	movs	r0, #2
 8006d38:	f008 ffaa 	bl	800fc90 <turn_dir>
		}
		slalomB(10000, SPEED_LOW, LSLALOM_OFFSET_B);
 8006d3c:	2235      	movs	r2, #53	; 0x35
 8006d3e:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8006d42:	f242 7010 	movw	r0, #10000	; 0x2710
 8006d46:	f7fe fd45 	bl	80057d4 <slalomB>
		}else{
			turn_dir(DIR_TURN_R90_8, 3);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
		}
		slalomB(10000, SPEED_6, LSLALOM_6_OFFSET_B);
	}
}
 8006d4a:	e0e9      	b.n	8006f20 <Lslalom_R90+0x240>
	}else if(run_mode == MIDDLE){
 8006d4c:	4b76      	ldr	r3, [pc, #472]	; (8006f28 <Lslalom_R90+0x248>)
 8006d4e:	781b      	ldrb	r3, [r3, #0]
 8006d50:	b2db      	uxtb	r3, r3
 8006d52:	2b02      	cmp	r3, #2
 8006d54:	d129      	bne.n	8006daa <Lslalom_R90+0xca>
		slalomF(10000, SPEED_MIDDLE, LSLALOM_2_OFFSET_F, LSLALOM_2_WALL_FL, LSLALOM_2_WALL_FR);
 8006d56:	2378      	movs	r3, #120	; 0x78
 8006d58:	9300      	str	r3, [sp, #0]
 8006d5a:	23f0      	movs	r3, #240	; 0xf0
 8006d5c:	223c      	movs	r2, #60	; 0x3c
 8006d5e:	f44f 7116 	mov.w	r1, #600	; 0x258
 8006d62:	f242 7010 	movw	r0, #10000	; 0x2710
 8006d66:	f7fe fb97 	bl	8005498 <slalomF>
		slalomR(-LSLALOM_2_DEGACCEL, -LSLALOM_2_OMEGA, -90, SPEED_MIDDLE);
 8006d6a:	f44f 7316 	mov.w	r3, #600	; 0x258
 8006d6e:	f06f 0259 	mvn.w	r2, #89	; 0x59
 8006d72:	4970      	ldr	r1, [pc, #448]	; (8006f34 <Lslalom_R90+0x254>)
 8006d74:	4870      	ldr	r0, [pc, #448]	; (8006f38 <Lslalom_R90+0x258>)
 8006d76:	f7fe fc0b 	bl	8005590 <slalomR>
		if(!MF.FLAG.XDIR){
 8006d7a:	4b6d      	ldr	r3, [pc, #436]	; (8006f30 <Lslalom_R90+0x250>)
 8006d7c:	881b      	ldrh	r3, [r3, #0]
 8006d7e:	f3c3 3300 	ubfx	r3, r3, #12, #1
 8006d82:	b2db      	uxtb	r3, r3
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d104      	bne.n	8006d92 <Lslalom_R90+0xb2>
			turn_dir(DIR_TURN_R90, 1);										//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8006d88:	2101      	movs	r1, #1
 8006d8a:	2001      	movs	r0, #1
 8006d8c:	f008 ff80 	bl	800fc90 <turn_dir>
 8006d90:	e003      	b.n	8006d9a <Lslalom_R90+0xba>
			turn_dir(DIR_TURN_R90_8, 3);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8006d92:	2103      	movs	r1, #3
 8006d94:	2002      	movs	r0, #2
 8006d96:	f008 ff7b 	bl	800fc90 <turn_dir>
		slalomB(10000, SPEED_MIDDLE, LSLALOM_2_OFFSET_B);
 8006d9a:	2258      	movs	r2, #88	; 0x58
 8006d9c:	f44f 7116 	mov.w	r1, #600	; 0x258
 8006da0:	f242 7010 	movw	r0, #10000	; 0x2710
 8006da4:	f7fe fd16 	bl	80057d4 <slalomB>
}
 8006da8:	e0ba      	b.n	8006f20 <Lslalom_R90+0x240>
	}else if(run_mode == HIGH){
 8006daa:	4b5f      	ldr	r3, [pc, #380]	; (8006f28 <Lslalom_R90+0x248>)
 8006dac:	781b      	ldrb	r3, [r3, #0]
 8006dae:	b2db      	uxtb	r3, r3
 8006db0:	2b03      	cmp	r3, #3
 8006db2:	d129      	bne.n	8006e08 <Lslalom_R90+0x128>
		slalomF(10000, SPEED_HIGH, LSLALOM_3_OFFSET_F, LSLALOM_3_WALL_FL, LSLALOM_3_WALL_FR);
 8006db4:	2364      	movs	r3, #100	; 0x64
 8006db6:	9300      	str	r3, [sp, #0]
 8006db8:	23c8      	movs	r3, #200	; 0xc8
 8006dba:	222d      	movs	r2, #45	; 0x2d
 8006dbc:	f44f 7148 	mov.w	r1, #800	; 0x320
 8006dc0:	f242 7010 	movw	r0, #10000	; 0x2710
 8006dc4:	f7fe fb68 	bl	8005498 <slalomF>
		slalomR(-LSLALOM_3_DEGACCEL, -LSLALOM_3_OMEGA, -90, SPEED_HIGH);
 8006dc8:	f44f 7348 	mov.w	r3, #800	; 0x320
 8006dcc:	f06f 0259 	mvn.w	r2, #89	; 0x59
 8006dd0:	495a      	ldr	r1, [pc, #360]	; (8006f3c <Lslalom_R90+0x25c>)
 8006dd2:	485b      	ldr	r0, [pc, #364]	; (8006f40 <Lslalom_R90+0x260>)
 8006dd4:	f7fe fbdc 	bl	8005590 <slalomR>
		if(!MF.FLAG.XDIR){
 8006dd8:	4b55      	ldr	r3, [pc, #340]	; (8006f30 <Lslalom_R90+0x250>)
 8006dda:	881b      	ldrh	r3, [r3, #0]
 8006ddc:	f3c3 3300 	ubfx	r3, r3, #12, #1
 8006de0:	b2db      	uxtb	r3, r3
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d104      	bne.n	8006df0 <Lslalom_R90+0x110>
			turn_dir(DIR_TURN_R90, 1);										//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8006de6:	2101      	movs	r1, #1
 8006de8:	2001      	movs	r0, #1
 8006dea:	f008 ff51 	bl	800fc90 <turn_dir>
 8006dee:	e003      	b.n	8006df8 <Lslalom_R90+0x118>
			turn_dir(DIR_TURN_R90_8, 3);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8006df0:	2103      	movs	r1, #3
 8006df2:	2002      	movs	r0, #2
 8006df4:	f008 ff4c 	bl	800fc90 <turn_dir>
		slalomB(10000, SPEED_HIGH, LSLALOM_3_OFFSET_B);
 8006df8:	2258      	movs	r2, #88	; 0x58
 8006dfa:	f44f 7148 	mov.w	r1, #800	; 0x320
 8006dfe:	f242 7010 	movw	r0, #10000	; 0x2710
 8006e02:	f7fe fce7 	bl	80057d4 <slalomB>
}
 8006e06:	e08b      	b.n	8006f20 <Lslalom_R90+0x240>
	}else if(run_mode == HIGH_HIGH){
 8006e08:	4b47      	ldr	r3, [pc, #284]	; (8006f28 <Lslalom_R90+0x248>)
 8006e0a:	781b      	ldrb	r3, [r3, #0]
 8006e0c:	b2db      	uxtb	r3, r3
 8006e0e:	2b04      	cmp	r3, #4
 8006e10:	d129      	bne.n	8006e66 <Lslalom_R90+0x186>
		slalomF(10000, SPEED_HIGH_HIGH, LSLALOM_4_OFFSET_F, LSLALOM_4_WALL_FL, LSLALOM_4_WALL_FR);
 8006e12:	2378      	movs	r3, #120	; 0x78
 8006e14:	9300      	str	r3, [sp, #0]
 8006e16:	23f0      	movs	r3, #240	; 0xf0
 8006e18:	2232      	movs	r2, #50	; 0x32
 8006e1a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8006e1e:	f242 7010 	movw	r0, #10000	; 0x2710
 8006e22:	f7fe fb39 	bl	8005498 <slalomF>
		slalomR(-LSLALOM_4_DEGACCEL, -LSLALOM_4_OMEGA, -85, SPEED_HIGH_HIGH);
 8006e26:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006e2a:	f06f 0254 	mvn.w	r2, #84	; 0x54
 8006e2e:	4945      	ldr	r1, [pc, #276]	; (8006f44 <Lslalom_R90+0x264>)
 8006e30:	4845      	ldr	r0, [pc, #276]	; (8006f48 <Lslalom_R90+0x268>)
 8006e32:	f7fe fbad 	bl	8005590 <slalomR>
		if(!MF.FLAG.XDIR){
 8006e36:	4b3e      	ldr	r3, [pc, #248]	; (8006f30 <Lslalom_R90+0x250>)
 8006e38:	881b      	ldrh	r3, [r3, #0]
 8006e3a:	f3c3 3300 	ubfx	r3, r3, #12, #1
 8006e3e:	b2db      	uxtb	r3, r3
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d104      	bne.n	8006e4e <Lslalom_R90+0x16e>
			turn_dir(DIR_TURN_R90, 1);										//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8006e44:	2101      	movs	r1, #1
 8006e46:	2001      	movs	r0, #1
 8006e48:	f008 ff22 	bl	800fc90 <turn_dir>
 8006e4c:	e003      	b.n	8006e56 <Lslalom_R90+0x176>
			turn_dir(DIR_TURN_R90_8, 3);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8006e4e:	2103      	movs	r1, #3
 8006e50:	2002      	movs	r0, #2
 8006e52:	f008 ff1d 	bl	800fc90 <turn_dir>
		slalomB(10000, SPEED_HIGH_HIGH, LSLALOM_4_OFFSET_B);
 8006e56:	226e      	movs	r2, #110	; 0x6e
 8006e58:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8006e5c:	f242 7010 	movw	r0, #10000	; 0x2710
 8006e60:	f7fe fcb8 	bl	80057d4 <slalomB>
}
 8006e64:	e05c      	b.n	8006f20 <Lslalom_R90+0x240>
	}else if(run_mode == 5){
 8006e66:	4b30      	ldr	r3, [pc, #192]	; (8006f28 <Lslalom_R90+0x248>)
 8006e68:	781b      	ldrb	r3, [r3, #0]
 8006e6a:	b2db      	uxtb	r3, r3
 8006e6c:	2b05      	cmp	r3, #5
 8006e6e:	d129      	bne.n	8006ec4 <Lslalom_R90+0x1e4>
		slalomF(10000, SPEED_5, LSLALOM_5_OFFSET_F, LSLALOM_5_WALL_FL, LSLALOM_5_WALL_FR);
 8006e70:	2378      	movs	r3, #120	; 0x78
 8006e72:	9300      	str	r3, [sp, #0]
 8006e74:	23f0      	movs	r3, #240	; 0xf0
 8006e76:	220f      	movs	r2, #15
 8006e78:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 8006e7c:	f242 7010 	movw	r0, #10000	; 0x2710
 8006e80:	f7fe fb0a 	bl	8005498 <slalomF>
		slalomR(-LSLALOM_5_DEGACCEL, -LSLALOM_5_OMEGA, -80, SPEED_5);
 8006e84:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
 8006e88:	f06f 024f 	mvn.w	r2, #79	; 0x4f
 8006e8c:	492d      	ldr	r1, [pc, #180]	; (8006f44 <Lslalom_R90+0x264>)
 8006e8e:	482e      	ldr	r0, [pc, #184]	; (8006f48 <Lslalom_R90+0x268>)
 8006e90:	f7fe fb7e 	bl	8005590 <slalomR>
		if(!MF.FLAG.XDIR){
 8006e94:	4b26      	ldr	r3, [pc, #152]	; (8006f30 <Lslalom_R90+0x250>)
 8006e96:	881b      	ldrh	r3, [r3, #0]
 8006e98:	f3c3 3300 	ubfx	r3, r3, #12, #1
 8006e9c:	b2db      	uxtb	r3, r3
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d104      	bne.n	8006eac <Lslalom_R90+0x1cc>
			turn_dir(DIR_TURN_R90, 1);										//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8006ea2:	2101      	movs	r1, #1
 8006ea4:	2001      	movs	r0, #1
 8006ea6:	f008 fef3 	bl	800fc90 <turn_dir>
 8006eaa:	e003      	b.n	8006eb4 <Lslalom_R90+0x1d4>
			turn_dir(DIR_TURN_R90_8, 3);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8006eac:	2103      	movs	r1, #3
 8006eae:	2002      	movs	r0, #2
 8006eb0:	f008 feee 	bl	800fc90 <turn_dir>
		slalomB(10000, SPEED_5, LSLALOM_5_OFFSET_B);
 8006eb4:	2278      	movs	r2, #120	; 0x78
 8006eb6:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 8006eba:	f242 7010 	movw	r0, #10000	; 0x2710
 8006ebe:	f7fe fc89 	bl	80057d4 <slalomB>
}
 8006ec2:	e02d      	b.n	8006f20 <Lslalom_R90+0x240>
	}else if(run_mode == 6){
 8006ec4:	4b18      	ldr	r3, [pc, #96]	; (8006f28 <Lslalom_R90+0x248>)
 8006ec6:	781b      	ldrb	r3, [r3, #0]
 8006ec8:	b2db      	uxtb	r3, r3
 8006eca:	2b06      	cmp	r3, #6
 8006ecc:	d128      	bne.n	8006f20 <Lslalom_R90+0x240>
		slalomF(10000, SPEED_6, LSLALOM_6_OFFSET_F, LSLALOM_6_WALL_FL, LSLALOM_6_WALL_FR);
 8006ece:	2378      	movs	r3, #120	; 0x78
 8006ed0:	9300      	str	r3, [sp, #0]
 8006ed2:	23f0      	movs	r3, #240	; 0xf0
 8006ed4:	2200      	movs	r2, #0
 8006ed6:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8006eda:	f242 7010 	movw	r0, #10000	; 0x2710
 8006ede:	f7fe fadb 	bl	8005498 <slalomF>
		slalomR(-LSLALOM_6_DEGACCEL, -LSLALOM_6_OMEGA, -70, SPEED_6);
 8006ee2:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8006ee6:	f06f 0245 	mvn.w	r2, #69	; 0x45
 8006eea:	4916      	ldr	r1, [pc, #88]	; (8006f44 <Lslalom_R90+0x264>)
 8006eec:	4817      	ldr	r0, [pc, #92]	; (8006f4c <Lslalom_R90+0x26c>)
 8006eee:	f7fe fb4f 	bl	8005590 <slalomR>
		if(!MF.FLAG.XDIR){
 8006ef2:	4b0f      	ldr	r3, [pc, #60]	; (8006f30 <Lslalom_R90+0x250>)
 8006ef4:	881b      	ldrh	r3, [r3, #0]
 8006ef6:	f3c3 3300 	ubfx	r3, r3, #12, #1
 8006efa:	b2db      	uxtb	r3, r3
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d104      	bne.n	8006f0a <Lslalom_R90+0x22a>
			turn_dir(DIR_TURN_R90, 1);										//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8006f00:	2101      	movs	r1, #1
 8006f02:	2001      	movs	r0, #1
 8006f04:	f008 fec4 	bl	800fc90 <turn_dir>
 8006f08:	e003      	b.n	8006f12 <Lslalom_R90+0x232>
			turn_dir(DIR_TURN_R90_8, 3);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8006f0a:	2103      	movs	r1, #3
 8006f0c:	2002      	movs	r0, #2
 8006f0e:	f008 febf 	bl	800fc90 <turn_dir>
		slalomB(10000, SPEED_6, LSLALOM_6_OFFSET_B);
 8006f12:	2278      	movs	r2, #120	; 0x78
 8006f14:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8006f18:	f242 7010 	movw	r0, #10000	; 0x2710
 8006f1c:	f7fe fc5a 	bl	80057d4 <slalomB>
}
 8006f20:	bf00      	nop
 8006f22:	46bd      	mov	sp, r7
 8006f24:	bd80      	pop	{r7, pc}
 8006f26:	bf00      	nop
 8006f28:	20000456 	.word	0x20000456
 8006f2c:	fffff830 	.word	0xfffff830
 8006f30:	20000f68 	.word	0x20000f68
 8006f34:	fffffe70 	.word	0xfffffe70
 8006f38:	fffff060 	.word	0xfffff060
 8006f3c:	fffffda8 	.word	0xfffffda8
 8006f40:	ffffee6c 	.word	0xffffee6c
 8006f44:	fffffce0 	.word	0xfffffce0
 8006f48:	ffffe0c0 	.word	0xffffe0c0
 8006f4c:	ffff8300 	.word	0xffff8300

08006f50 <Lslalom_L90>:
//Lslalom_L90
// 大回りスラロームで右に90度回転する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void Lslalom_L90(void){
 8006f50:	b580      	push	{r7, lr}
 8006f52:	b082      	sub	sp, #8
 8006f54:	af02      	add	r7, sp, #8
	full_led_write(YELLOW);
 8006f56:	2006      	movs	r0, #6
 8006f58:	f00a fd2e 	bl	80119b8 <full_led_write>
	if(run_mode == LOW){
 8006f5c:	4b90      	ldr	r3, [pc, #576]	; (80071a0 <Lslalom_L90+0x250>)
 8006f5e:	781b      	ldrb	r3, [r3, #0]
 8006f60:	b2db      	uxtb	r3, r3
 8006f62:	2b01      	cmp	r3, #1
 8006f64:	d129      	bne.n	8006fba <Lslalom_L90+0x6a>
		slalomF(10000, SPEED_LOW, LSLALOM_OFFSET_F, LSLALOM_WALL_FL, LSLALOM_WALL_FR);
 8006f66:	2364      	movs	r3, #100	; 0x64
 8006f68:	9300      	str	r3, [sp, #0]
 8006f6a:	23c8      	movs	r3, #200	; 0xc8
 8006f6c:	222d      	movs	r2, #45	; 0x2d
 8006f6e:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8006f72:	f242 7010 	movw	r0, #10000	; 0x2710
 8006f76:	f7fe fa8f 	bl	8005498 <slalomF>
		slalomR(LSLALOM_DEGACCEL, LSLALOM_OMEGA, 90, SPEED_LOW);
 8006f7a:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8006f7e:	225a      	movs	r2, #90	; 0x5a
 8006f80:	21c8      	movs	r1, #200	; 0xc8
 8006f82:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8006f86:	f7fe fb03 	bl	8005590 <slalomR>

		if(!MF.FLAG.XDIR){
 8006f8a:	4b86      	ldr	r3, [pc, #536]	; (80071a4 <Lslalom_L90+0x254>)
 8006f8c:	881b      	ldrh	r3, [r3, #0]
 8006f8e:	f3c3 3300 	ubfx	r3, r3, #12, #1
 8006f92:	b2db      	uxtb	r3, r3
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d104      	bne.n	8006fa2 <Lslalom_L90+0x52>
			turn_dir(DIR_TURN_L90, 1);										//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8006f98:	2101      	movs	r1, #1
 8006f9a:	20ff      	movs	r0, #255	; 0xff
 8006f9c:	f008 fe78 	bl	800fc90 <turn_dir>
 8006fa0:	e003      	b.n	8006faa <Lslalom_L90+0x5a>
		}else{
			turn_dir(DIR_TURN_L90_8, 3);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8006fa2:	2103      	movs	r1, #3
 8006fa4:	20fe      	movs	r0, #254	; 0xfe
 8006fa6:	f008 fe73 	bl	800fc90 <turn_dir>
		}
		slalomB(10000, SPEED_LOW, LSLALOM_OFFSET_B);
 8006faa:	2235      	movs	r2, #53	; 0x35
 8006fac:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8006fb0:	f242 7010 	movw	r0, #10000	; 0x2710
 8006fb4:	f7fe fc0e 	bl	80057d4 <slalomB>
		}else{
			turn_dir(DIR_TURN_L90_8, 3);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
		}
		slalomB(10000, SPEED_6, LSLALOM_6_OFFSET_B);
	}
}
 8006fb8:	e0ee      	b.n	8007198 <Lslalom_L90+0x248>
	}else if(run_mode == MIDDLE){
 8006fba:	4b79      	ldr	r3, [pc, #484]	; (80071a0 <Lslalom_L90+0x250>)
 8006fbc:	781b      	ldrb	r3, [r3, #0]
 8006fbe:	b2db      	uxtb	r3, r3
 8006fc0:	2b02      	cmp	r3, #2
 8006fc2:	d12a      	bne.n	800701a <Lslalom_L90+0xca>
		slalomF(10000, SPEED_MIDDLE, LSLALOM_2_OFFSET_F, LSLALOM_2_WALL_FL, LSLALOM_2_WALL_FR);
 8006fc4:	2378      	movs	r3, #120	; 0x78
 8006fc6:	9300      	str	r3, [sp, #0]
 8006fc8:	23f0      	movs	r3, #240	; 0xf0
 8006fca:	223c      	movs	r2, #60	; 0x3c
 8006fcc:	f44f 7116 	mov.w	r1, #600	; 0x258
 8006fd0:	f242 7010 	movw	r0, #10000	; 0x2710
 8006fd4:	f7fe fa60 	bl	8005498 <slalomF>
		slalomR(LSLALOM_2_DEGACCEL, LSLALOM_2_OMEGA, 90, SPEED_MIDDLE);
 8006fd8:	f44f 7316 	mov.w	r3, #600	; 0x258
 8006fdc:	225a      	movs	r2, #90	; 0x5a
 8006fde:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8006fe2:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8006fe6:	f7fe fad3 	bl	8005590 <slalomR>
		if(!MF.FLAG.XDIR){
 8006fea:	4b6e      	ldr	r3, [pc, #440]	; (80071a4 <Lslalom_L90+0x254>)
 8006fec:	881b      	ldrh	r3, [r3, #0]
 8006fee:	f3c3 3300 	ubfx	r3, r3, #12, #1
 8006ff2:	b2db      	uxtb	r3, r3
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d104      	bne.n	8007002 <Lslalom_L90+0xb2>
			turn_dir(DIR_TURN_L90, 1);										//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8006ff8:	2101      	movs	r1, #1
 8006ffa:	20ff      	movs	r0, #255	; 0xff
 8006ffc:	f008 fe48 	bl	800fc90 <turn_dir>
 8007000:	e003      	b.n	800700a <Lslalom_L90+0xba>
			turn_dir(DIR_TURN_L90_8, 3);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8007002:	2103      	movs	r1, #3
 8007004:	20fe      	movs	r0, #254	; 0xfe
 8007006:	f008 fe43 	bl	800fc90 <turn_dir>
		slalomB(10000, SPEED_MIDDLE, LSLALOM_2_OFFSET_B);
 800700a:	2258      	movs	r2, #88	; 0x58
 800700c:	f44f 7116 	mov.w	r1, #600	; 0x258
 8007010:	f242 7010 	movw	r0, #10000	; 0x2710
 8007014:	f7fe fbde 	bl	80057d4 <slalomB>
}
 8007018:	e0be      	b.n	8007198 <Lslalom_L90+0x248>
	}else if(run_mode == HIGH){
 800701a:	4b61      	ldr	r3, [pc, #388]	; (80071a0 <Lslalom_L90+0x250>)
 800701c:	781b      	ldrb	r3, [r3, #0]
 800701e:	b2db      	uxtb	r3, r3
 8007020:	2b03      	cmp	r3, #3
 8007022:	d12a      	bne.n	800707a <Lslalom_L90+0x12a>
		slalomF(10000, SPEED_HIGH, LSLALOM_3_OFFSET_F, LSLALOM_3_WALL_FL, LSLALOM_3_WALL_FR);
 8007024:	2364      	movs	r3, #100	; 0x64
 8007026:	9300      	str	r3, [sp, #0]
 8007028:	23c8      	movs	r3, #200	; 0xc8
 800702a:	222d      	movs	r2, #45	; 0x2d
 800702c:	f44f 7148 	mov.w	r1, #800	; 0x320
 8007030:	f242 7010 	movw	r0, #10000	; 0x2710
 8007034:	f7fe fa30 	bl	8005498 <slalomF>
		slalomR(LSLALOM_3_DEGACCEL, LSLALOM_3_OMEGA, 90, SPEED_HIGH);
 8007038:	f44f 7348 	mov.w	r3, #800	; 0x320
 800703c:	225a      	movs	r2, #90	; 0x5a
 800703e:	f44f 7116 	mov.w	r1, #600	; 0x258
 8007042:	f241 1094 	movw	r0, #4500	; 0x1194
 8007046:	f7fe faa3 	bl	8005590 <slalomR>
		if(!MF.FLAG.XDIR){
 800704a:	4b56      	ldr	r3, [pc, #344]	; (80071a4 <Lslalom_L90+0x254>)
 800704c:	881b      	ldrh	r3, [r3, #0]
 800704e:	f3c3 3300 	ubfx	r3, r3, #12, #1
 8007052:	b2db      	uxtb	r3, r3
 8007054:	2b00      	cmp	r3, #0
 8007056:	d104      	bne.n	8007062 <Lslalom_L90+0x112>
			turn_dir(DIR_TURN_L90, 1);										//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8007058:	2101      	movs	r1, #1
 800705a:	20ff      	movs	r0, #255	; 0xff
 800705c:	f008 fe18 	bl	800fc90 <turn_dir>
 8007060:	e003      	b.n	800706a <Lslalom_L90+0x11a>
			turn_dir(DIR_TURN_L90_8, 3);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8007062:	2103      	movs	r1, #3
 8007064:	20fe      	movs	r0, #254	; 0xfe
 8007066:	f008 fe13 	bl	800fc90 <turn_dir>
		slalomB(10000, SPEED_HIGH, LSLALOM_3_OFFSET_B);
 800706a:	2258      	movs	r2, #88	; 0x58
 800706c:	f44f 7148 	mov.w	r1, #800	; 0x320
 8007070:	f242 7010 	movw	r0, #10000	; 0x2710
 8007074:	f7fe fbae 	bl	80057d4 <slalomB>
}
 8007078:	e08e      	b.n	8007198 <Lslalom_L90+0x248>
	}else if(run_mode == HIGH_HIGH){
 800707a:	4b49      	ldr	r3, [pc, #292]	; (80071a0 <Lslalom_L90+0x250>)
 800707c:	781b      	ldrb	r3, [r3, #0]
 800707e:	b2db      	uxtb	r3, r3
 8007080:	2b04      	cmp	r3, #4
 8007082:	d12a      	bne.n	80070da <Lslalom_L90+0x18a>
		slalomF(10000, SPEED_HIGH_HIGH, LSLALOM_4_OFFSET_F, LSLALOM_4_WALL_FL, LSLALOM_4_WALL_FR);
 8007084:	2378      	movs	r3, #120	; 0x78
 8007086:	9300      	str	r3, [sp, #0]
 8007088:	23f0      	movs	r3, #240	; 0xf0
 800708a:	2232      	movs	r2, #50	; 0x32
 800708c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8007090:	f242 7010 	movw	r0, #10000	; 0x2710
 8007094:	f7fe fa00 	bl	8005498 <slalomF>
		slalomR(LSLALOM_4_DEGACCEL, LSLALOM_4_OMEGA, 85, SPEED_HIGH_HIGH);
 8007098:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800709c:	2255      	movs	r2, #85	; 0x55
 800709e:	f44f 7148 	mov.w	r1, #800	; 0x320
 80070a2:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 80070a6:	f7fe fa73 	bl	8005590 <slalomR>
		if(!MF.FLAG.XDIR){
 80070aa:	4b3e      	ldr	r3, [pc, #248]	; (80071a4 <Lslalom_L90+0x254>)
 80070ac:	881b      	ldrh	r3, [r3, #0]
 80070ae:	f3c3 3300 	ubfx	r3, r3, #12, #1
 80070b2:	b2db      	uxtb	r3, r3
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d104      	bne.n	80070c2 <Lslalom_L90+0x172>
			turn_dir(DIR_TURN_L90, 1);										//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 80070b8:	2101      	movs	r1, #1
 80070ba:	20ff      	movs	r0, #255	; 0xff
 80070bc:	f008 fde8 	bl	800fc90 <turn_dir>
 80070c0:	e003      	b.n	80070ca <Lslalom_L90+0x17a>
			turn_dir(DIR_TURN_L90_8, 3);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 80070c2:	2103      	movs	r1, #3
 80070c4:	20fe      	movs	r0, #254	; 0xfe
 80070c6:	f008 fde3 	bl	800fc90 <turn_dir>
		slalomB(10000, SPEED_HIGH_HIGH, LSLALOM_4_OFFSET_B);
 80070ca:	226e      	movs	r2, #110	; 0x6e
 80070cc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80070d0:	f242 7010 	movw	r0, #10000	; 0x2710
 80070d4:	f7fe fb7e 	bl	80057d4 <slalomB>
}
 80070d8:	e05e      	b.n	8007198 <Lslalom_L90+0x248>
	}else if(run_mode == 5){
 80070da:	4b31      	ldr	r3, [pc, #196]	; (80071a0 <Lslalom_L90+0x250>)
 80070dc:	781b      	ldrb	r3, [r3, #0]
 80070de:	b2db      	uxtb	r3, r3
 80070e0:	2b05      	cmp	r3, #5
 80070e2:	d12a      	bne.n	800713a <Lslalom_L90+0x1ea>
		slalomF(10000, SPEED_5, LSLALOM_5_OFFSET_F, LSLALOM_5_WALL_FL, LSLALOM_5_WALL_FR);
 80070e4:	2378      	movs	r3, #120	; 0x78
 80070e6:	9300      	str	r3, [sp, #0]
 80070e8:	23f0      	movs	r3, #240	; 0xf0
 80070ea:	220f      	movs	r2, #15
 80070ec:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 80070f0:	f242 7010 	movw	r0, #10000	; 0x2710
 80070f4:	f7fe f9d0 	bl	8005498 <slalomF>
		slalomR(LSLALOM_5_DEGACCEL, LSLALOM_5_OMEGA, 80, SPEED_5);
 80070f8:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
 80070fc:	2250      	movs	r2, #80	; 0x50
 80070fe:	f44f 7148 	mov.w	r1, #800	; 0x320
 8007102:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 8007106:	f7fe fa43 	bl	8005590 <slalomR>
		if(!MF.FLAG.XDIR){
 800710a:	4b26      	ldr	r3, [pc, #152]	; (80071a4 <Lslalom_L90+0x254>)
 800710c:	881b      	ldrh	r3, [r3, #0]
 800710e:	f3c3 3300 	ubfx	r3, r3, #12, #1
 8007112:	b2db      	uxtb	r3, r3
 8007114:	2b00      	cmp	r3, #0
 8007116:	d104      	bne.n	8007122 <Lslalom_L90+0x1d2>
			turn_dir(DIR_TURN_L90, 1);										//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8007118:	2101      	movs	r1, #1
 800711a:	20ff      	movs	r0, #255	; 0xff
 800711c:	f008 fdb8 	bl	800fc90 <turn_dir>
 8007120:	e003      	b.n	800712a <Lslalom_L90+0x1da>
			turn_dir(DIR_TURN_L90_8, 3);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8007122:	2103      	movs	r1, #3
 8007124:	20fe      	movs	r0, #254	; 0xfe
 8007126:	f008 fdb3 	bl	800fc90 <turn_dir>
		slalomB(10000, SPEED_5, LSLALOM_5_OFFSET_B);
 800712a:	2278      	movs	r2, #120	; 0x78
 800712c:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 8007130:	f242 7010 	movw	r0, #10000	; 0x2710
 8007134:	f7fe fb4e 	bl	80057d4 <slalomB>
}
 8007138:	e02e      	b.n	8007198 <Lslalom_L90+0x248>
	}else if(run_mode == 6){
 800713a:	4b19      	ldr	r3, [pc, #100]	; (80071a0 <Lslalom_L90+0x250>)
 800713c:	781b      	ldrb	r3, [r3, #0]
 800713e:	b2db      	uxtb	r3, r3
 8007140:	2b06      	cmp	r3, #6
 8007142:	d129      	bne.n	8007198 <Lslalom_L90+0x248>
		slalomF(10000, SPEED_6, LSLALOM_6_OFFSET_F, LSLALOM_6_WALL_FL, LSLALOM_6_WALL_FR);
 8007144:	2378      	movs	r3, #120	; 0x78
 8007146:	9300      	str	r3, [sp, #0]
 8007148:	23f0      	movs	r3, #240	; 0xf0
 800714a:	2200      	movs	r2, #0
 800714c:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8007150:	f242 7010 	movw	r0, #10000	; 0x2710
 8007154:	f7fe f9a0 	bl	8005498 <slalomF>
		slalomR(LSLALOM_6_DEGACCEL, LSLALOM_6_OMEGA, 70, SPEED_6);
 8007158:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800715c:	2246      	movs	r2, #70	; 0x46
 800715e:	f44f 7148 	mov.w	r1, #800	; 0x320
 8007162:	f44f 40fa 	mov.w	r0, #32000	; 0x7d00
 8007166:	f7fe fa13 	bl	8005590 <slalomR>
		if(!MF.FLAG.XDIR){
 800716a:	4b0e      	ldr	r3, [pc, #56]	; (80071a4 <Lslalom_L90+0x254>)
 800716c:	881b      	ldrh	r3, [r3, #0]
 800716e:	f3c3 3300 	ubfx	r3, r3, #12, #1
 8007172:	b2db      	uxtb	r3, r3
 8007174:	2b00      	cmp	r3, #0
 8007176:	d104      	bne.n	8007182 <Lslalom_L90+0x232>
			turn_dir(DIR_TURN_L90, 1);										//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8007178:	2101      	movs	r1, #1
 800717a:	20ff      	movs	r0, #255	; 0xff
 800717c:	f008 fd88 	bl	800fc90 <turn_dir>
 8007180:	e003      	b.n	800718a <Lslalom_L90+0x23a>
			turn_dir(DIR_TURN_L90_8, 3);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8007182:	2103      	movs	r1, #3
 8007184:	20fe      	movs	r0, #254	; 0xfe
 8007186:	f008 fd83 	bl	800fc90 <turn_dir>
		slalomB(10000, SPEED_6, LSLALOM_6_OFFSET_B);
 800718a:	2278      	movs	r2, #120	; 0x78
 800718c:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8007190:	f242 7010 	movw	r0, #10000	; 0x2710
 8007194:	f7fe fb1e 	bl	80057d4 <slalomB>
}
 8007198:	bf00      	nop
 800719a:	46bd      	mov	sp, r7
 800719c:	bd80      	pop	{r7, pc}
 800719e:	bf00      	nop
 80071a0:	20000456 	.word	0x20000456
 80071a4:	20000f68 	.word	0x20000f68

080071a8 <Lslalom_R180>:
//Lslalom_R180
// スラロームで右に180度回転する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void Lslalom_R180(void){
 80071a8:	b580      	push	{r7, lr}
 80071aa:	b082      	sub	sp, #8
 80071ac:	af02      	add	r7, sp, #8
	full_led_write(GREEN);
 80071ae:	2002      	movs	r0, #2
 80071b0:	f00a fc02 	bl	80119b8 <full_led_write>
	if(run_mode == LOW){
 80071b4:	4b9a      	ldr	r3, [pc, #616]	; (8007420 <Lslalom_R180+0x278>)
 80071b6:	781b      	ldrb	r3, [r3, #0]
 80071b8:	b2db      	uxtb	r3, r3
 80071ba:	2b01      	cmp	r3, #1
 80071bc:	d12d      	bne.n	800721a <Lslalom_R180+0x72>
		slalomF(10000, SPEED_LOW, LROTATE_OFFSET_F, LROTATE_WALL_FL, LROTATE_WALL_FR);
 80071be:	2364      	movs	r3, #100	; 0x64
 80071c0:	9300      	str	r3, [sp, #0]
 80071c2:	23c8      	movs	r3, #200	; 0xc8
 80071c4:	223c      	movs	r2, #60	; 0x3c
 80071c6:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80071ca:	f242 7010 	movw	r0, #10000	; 0x2710
 80071ce:	f7fe f963 	bl	8005498 <slalomF>
		slalomR(-LROTATE_DEGACCEL, -LROTATE_OMEGA, -180, SPEED_LOW);
 80071d2:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80071d6:	f06f 02b3 	mvn.w	r2, #179	; 0xb3
 80071da:	4992      	ldr	r1, [pc, #584]	; (8007424 <Lslalom_R180+0x27c>)
 80071dc:	4892      	ldr	r0, [pc, #584]	; (8007428 <Lslalom_R180+0x280>)
 80071de:	f7fe f9d7 	bl	8005590 <slalomR>

		if(!MF.FLAG.XDIR){
 80071e2:	4b92      	ldr	r3, [pc, #584]	; (800742c <Lslalom_R180+0x284>)
 80071e4:	881b      	ldrh	r3, [r3, #0]
 80071e6:	f3c3 3300 	ubfx	r3, r3, #12, #1
 80071ea:	b2db      	uxtb	r3, r3
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d108      	bne.n	8007202 <Lslalom_R180+0x5a>
			turn_dir(DIR_TURN_R90, 1);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 80071f0:	2101      	movs	r1, #1
 80071f2:	2001      	movs	r0, #1
 80071f4:	f008 fd4c 	bl	800fc90 <turn_dir>
			turn_dir(DIR_TURN_R90, 1);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 80071f8:	2101      	movs	r1, #1
 80071fa:	2001      	movs	r0, #1
 80071fc:	f008 fd48 	bl	800fc90 <turn_dir>
 8007200:	e003      	b.n	800720a <Lslalom_R180+0x62>
		}else{
			turn_dir(DIR_TURN_R180_8, 3);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8007202:	2103      	movs	r1, #3
 8007204:	2004      	movs	r0, #4
 8007206:	f008 fd43 	bl	800fc90 <turn_dir>
		}
		slalomB(10000, SPEED_LOW, LROTATE_OFFSET_B);
 800720a:	2250      	movs	r2, #80	; 0x50
 800720c:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8007210:	f242 7010 	movw	r0, #10000	; 0x2710
 8007214:	f7fe fade 	bl	80057d4 <slalomB>
		}else{
			turn_dir(DIR_TURN_R180_8, 3);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
		}
		slalomB(10000, SPEED_6, LROTATE_6_OFFSET_B);
	}
}
 8007218:	e0fe      	b.n	8007418 <Lslalom_R180+0x270>
	}else if(run_mode == MIDDLE){
 800721a:	4b81      	ldr	r3, [pc, #516]	; (8007420 <Lslalom_R180+0x278>)
 800721c:	781b      	ldrb	r3, [r3, #0]
 800721e:	b2db      	uxtb	r3, r3
 8007220:	2b02      	cmp	r3, #2
 8007222:	d12d      	bne.n	8007280 <Lslalom_R180+0xd8>
		slalomF(10000, SPEED_MIDDLE, LROTATE_2_OFFSET_F, LROTATE_2_WALL_FL, LROTATE_2_WALL_FR);
 8007224:	2364      	movs	r3, #100	; 0x64
 8007226:	9300      	str	r3, [sp, #0]
 8007228:	23c8      	movs	r3, #200	; 0xc8
 800722a:	2232      	movs	r2, #50	; 0x32
 800722c:	f44f 7116 	mov.w	r1, #600	; 0x258
 8007230:	f242 7010 	movw	r0, #10000	; 0x2710
 8007234:	f7fe f930 	bl	8005498 <slalomF>
		slalomR(-LROTATE_2_DEGACCEL, -LROTATE_2_OMEGA, -180, SPEED_MIDDLE);
 8007238:	f44f 7316 	mov.w	r3, #600	; 0x258
 800723c:	f06f 02b3 	mvn.w	r2, #179	; 0xb3
 8007240:	497b      	ldr	r1, [pc, #492]	; (8007430 <Lslalom_R180+0x288>)
 8007242:	487c      	ldr	r0, [pc, #496]	; (8007434 <Lslalom_R180+0x28c>)
 8007244:	f7fe f9a4 	bl	8005590 <slalomR>
		if(!MF.FLAG.XDIR){
 8007248:	4b78      	ldr	r3, [pc, #480]	; (800742c <Lslalom_R180+0x284>)
 800724a:	881b      	ldrh	r3, [r3, #0]
 800724c:	f3c3 3300 	ubfx	r3, r3, #12, #1
 8007250:	b2db      	uxtb	r3, r3
 8007252:	2b00      	cmp	r3, #0
 8007254:	d108      	bne.n	8007268 <Lslalom_R180+0xc0>
			turn_dir(DIR_TURN_R90, 1);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8007256:	2101      	movs	r1, #1
 8007258:	2001      	movs	r0, #1
 800725a:	f008 fd19 	bl	800fc90 <turn_dir>
			turn_dir(DIR_TURN_R90, 1);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 800725e:	2101      	movs	r1, #1
 8007260:	2001      	movs	r0, #1
 8007262:	f008 fd15 	bl	800fc90 <turn_dir>
 8007266:	e003      	b.n	8007270 <Lslalom_R180+0xc8>
			turn_dir(DIR_TURN_R180_8, 3);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8007268:	2103      	movs	r1, #3
 800726a:	2004      	movs	r0, #4
 800726c:	f008 fd10 	bl	800fc90 <turn_dir>
		slalomB(10000, SPEED_MIDDLE, LROTATE_2_OFFSET_B);
 8007270:	224e      	movs	r2, #78	; 0x4e
 8007272:	f44f 7116 	mov.w	r1, #600	; 0x258
 8007276:	f242 7010 	movw	r0, #10000	; 0x2710
 800727a:	f7fe faab 	bl	80057d4 <slalomB>
}
 800727e:	e0cb      	b.n	8007418 <Lslalom_R180+0x270>
	}else if(run_mode == HIGH){
 8007280:	4b67      	ldr	r3, [pc, #412]	; (8007420 <Lslalom_R180+0x278>)
 8007282:	781b      	ldrb	r3, [r3, #0]
 8007284:	b2db      	uxtb	r3, r3
 8007286:	2b03      	cmp	r3, #3
 8007288:	d12d      	bne.n	80072e6 <Lslalom_R180+0x13e>
		slalomF(10000, SPEED_HIGH, LROTATE_3_OFFSET_F, LROTATE_3_WALL_FL, LROTATE_3_WALL_FR);
 800728a:	235a      	movs	r3, #90	; 0x5a
 800728c:	9300      	str	r3, [sp, #0]
 800728e:	23b4      	movs	r3, #180	; 0xb4
 8007290:	221c      	movs	r2, #28
 8007292:	f44f 7148 	mov.w	r1, #800	; 0x320
 8007296:	f242 7010 	movw	r0, #10000	; 0x2710
 800729a:	f7fe f8fd 	bl	8005498 <slalomF>
		slalomR(-LROTATE_3_DEGACCEL, -LROTATE_3_OMEGA, -180, SPEED_HIGH);
 800729e:	f44f 7348 	mov.w	r3, #800	; 0x320
 80072a2:	f06f 02b3 	mvn.w	r2, #179	; 0xb3
 80072a6:	4964      	ldr	r1, [pc, #400]	; (8007438 <Lslalom_R180+0x290>)
 80072a8:	4862      	ldr	r0, [pc, #392]	; (8007434 <Lslalom_R180+0x28c>)
 80072aa:	f7fe f971 	bl	8005590 <slalomR>
		if(!MF.FLAG.XDIR){
 80072ae:	4b5f      	ldr	r3, [pc, #380]	; (800742c <Lslalom_R180+0x284>)
 80072b0:	881b      	ldrh	r3, [r3, #0]
 80072b2:	f3c3 3300 	ubfx	r3, r3, #12, #1
 80072b6:	b2db      	uxtb	r3, r3
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d108      	bne.n	80072ce <Lslalom_R180+0x126>
			turn_dir(DIR_TURN_R90, 1);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 80072bc:	2101      	movs	r1, #1
 80072be:	2001      	movs	r0, #1
 80072c0:	f008 fce6 	bl	800fc90 <turn_dir>
			turn_dir(DIR_TURN_R90, 1);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 80072c4:	2101      	movs	r1, #1
 80072c6:	2001      	movs	r0, #1
 80072c8:	f008 fce2 	bl	800fc90 <turn_dir>
 80072cc:	e003      	b.n	80072d6 <Lslalom_R180+0x12e>
			turn_dir(DIR_TURN_R180_8, 3);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 80072ce:	2103      	movs	r1, #3
 80072d0:	2004      	movs	r0, #4
 80072d2:	f008 fcdd 	bl	800fc90 <turn_dir>
		slalomB(10000, SPEED_HIGH, LROTATE_3_OFFSET_B);
 80072d6:	224e      	movs	r2, #78	; 0x4e
 80072d8:	f44f 7148 	mov.w	r1, #800	; 0x320
 80072dc:	f242 7010 	movw	r0, #10000	; 0x2710
 80072e0:	f7fe fa78 	bl	80057d4 <slalomB>
}
 80072e4:	e098      	b.n	8007418 <Lslalom_R180+0x270>
	}else if(run_mode == HIGH_HIGH){
 80072e6:	4b4e      	ldr	r3, [pc, #312]	; (8007420 <Lslalom_R180+0x278>)
 80072e8:	781b      	ldrb	r3, [r3, #0]
 80072ea:	b2db      	uxtb	r3, r3
 80072ec:	2b04      	cmp	r3, #4
 80072ee:	d12d      	bne.n	800734c <Lslalom_R180+0x1a4>
		slalomF(10000, SPEED_HIGH_HIGH, LROTATE_4_OFFSET_F, LROTATE_4_WALL_FL, LROTATE_4_WALL_FR);
 80072f0:	2364      	movs	r3, #100	; 0x64
 80072f2:	9300      	str	r3, [sp, #0]
 80072f4:	23c8      	movs	r3, #200	; 0xc8
 80072f6:	2232      	movs	r2, #50	; 0x32
 80072f8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80072fc:	f242 7010 	movw	r0, #10000	; 0x2710
 8007300:	f7fe f8ca 	bl	8005498 <slalomF>
		slalomR(-LROTATE_4_DEGACCEL, -LROTATE_4_OMEGA, -170, SPEED_HIGH_HIGH);
 8007304:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007308:	f06f 02a9 	mvn.w	r2, #169	; 0xa9
 800730c:	494b      	ldr	r1, [pc, #300]	; (800743c <Lslalom_R180+0x294>)
 800730e:	484c      	ldr	r0, [pc, #304]	; (8007440 <Lslalom_R180+0x298>)
 8007310:	f7fe f93e 	bl	8005590 <slalomR>
		if(!MF.FLAG.XDIR){
 8007314:	4b45      	ldr	r3, [pc, #276]	; (800742c <Lslalom_R180+0x284>)
 8007316:	881b      	ldrh	r3, [r3, #0]
 8007318:	f3c3 3300 	ubfx	r3, r3, #12, #1
 800731c:	b2db      	uxtb	r3, r3
 800731e:	2b00      	cmp	r3, #0
 8007320:	d108      	bne.n	8007334 <Lslalom_R180+0x18c>
			turn_dir(DIR_TURN_R90, 1);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8007322:	2101      	movs	r1, #1
 8007324:	2001      	movs	r0, #1
 8007326:	f008 fcb3 	bl	800fc90 <turn_dir>
			turn_dir(DIR_TURN_R90, 1);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 800732a:	2101      	movs	r1, #1
 800732c:	2001      	movs	r0, #1
 800732e:	f008 fcaf 	bl	800fc90 <turn_dir>
 8007332:	e003      	b.n	800733c <Lslalom_R180+0x194>
			turn_dir(DIR_TURN_R180_8, 3);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8007334:	2103      	movs	r1, #3
 8007336:	2004      	movs	r0, #4
 8007338:	f008 fcaa 	bl	800fc90 <turn_dir>
		slalomB(10000, SPEED_HIGH_HIGH, LROTATE_4_OFFSET_B);
 800733c:	227d      	movs	r2, #125	; 0x7d
 800733e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8007342:	f242 7010 	movw	r0, #10000	; 0x2710
 8007346:	f7fe fa45 	bl	80057d4 <slalomB>
}
 800734a:	e065      	b.n	8007418 <Lslalom_R180+0x270>
	}else if(run_mode == 5){
 800734c:	4b34      	ldr	r3, [pc, #208]	; (8007420 <Lslalom_R180+0x278>)
 800734e:	781b      	ldrb	r3, [r3, #0]
 8007350:	b2db      	uxtb	r3, r3
 8007352:	2b05      	cmp	r3, #5
 8007354:	d12e      	bne.n	80073b4 <Lslalom_R180+0x20c>
		slalomF(10000, SPEED_5, LROTATE_5_OFFSET_F, LROTATE_5_WALL_FL, LROTATE_5_WALL_FR);
 8007356:	2364      	movs	r3, #100	; 0x64
 8007358:	9300      	str	r3, [sp, #0]
 800735a:	23c8      	movs	r3, #200	; 0xc8
 800735c:	221e      	movs	r2, #30
 800735e:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 8007362:	f242 7010 	movw	r0, #10000	; 0x2710
 8007366:	f7fe f897 	bl	8005498 <slalomF>
		slalomR(-LROTATE_5_DEGACCEL, -LROTATE_5_OMEGA, -170, SPEED_5);
 800736a:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
 800736e:	f06f 02a9 	mvn.w	r2, #169	; 0xa9
 8007372:	f46f 7144 	mvn.w	r1, #784	; 0x310
 8007376:	4832      	ldr	r0, [pc, #200]	; (8007440 <Lslalom_R180+0x298>)
 8007378:	f7fe f90a 	bl	8005590 <slalomR>
		if(!MF.FLAG.XDIR){
 800737c:	4b2b      	ldr	r3, [pc, #172]	; (800742c <Lslalom_R180+0x284>)
 800737e:	881b      	ldrh	r3, [r3, #0]
 8007380:	f3c3 3300 	ubfx	r3, r3, #12, #1
 8007384:	b2db      	uxtb	r3, r3
 8007386:	2b00      	cmp	r3, #0
 8007388:	d108      	bne.n	800739c <Lslalom_R180+0x1f4>
			turn_dir(DIR_TURN_R90, 1);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 800738a:	2101      	movs	r1, #1
 800738c:	2001      	movs	r0, #1
 800738e:	f008 fc7f 	bl	800fc90 <turn_dir>
			turn_dir(DIR_TURN_R90, 1);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8007392:	2101      	movs	r1, #1
 8007394:	2001      	movs	r0, #1
 8007396:	f008 fc7b 	bl	800fc90 <turn_dir>
 800739a:	e003      	b.n	80073a4 <Lslalom_R180+0x1fc>
			turn_dir(DIR_TURN_R180_8, 3);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 800739c:	2103      	movs	r1, #3
 800739e:	2004      	movs	r0, #4
 80073a0:	f008 fc76 	bl	800fc90 <turn_dir>
		slalomB(10000, SPEED_5, LROTATE_5_OFFSET_B);
 80073a4:	2296      	movs	r2, #150	; 0x96
 80073a6:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 80073aa:	f242 7010 	movw	r0, #10000	; 0x2710
 80073ae:	f7fe fa11 	bl	80057d4 <slalomB>
}
 80073b2:	e031      	b.n	8007418 <Lslalom_R180+0x270>
	}else if(run_mode == 6){
 80073b4:	4b1a      	ldr	r3, [pc, #104]	; (8007420 <Lslalom_R180+0x278>)
 80073b6:	781b      	ldrb	r3, [r3, #0]
 80073b8:	b2db      	uxtb	r3, r3
 80073ba:	2b06      	cmp	r3, #6
 80073bc:	d12c      	bne.n	8007418 <Lslalom_R180+0x270>
		slalomF(10000, SPEED_6, LROTATE_6_OFFSET_F, LROTATE_6_WALL_FL, LROTATE_6_WALL_FR);
 80073be:	235a      	movs	r3, #90	; 0x5a
 80073c0:	9300      	str	r3, [sp, #0]
 80073c2:	23b4      	movs	r3, #180	; 0xb4
 80073c4:	221e      	movs	r2, #30
 80073c6:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 80073ca:	f242 7010 	movw	r0, #10000	; 0x2710
 80073ce:	f7fe f863 	bl	8005498 <slalomF>
		slalomR(-LROTATE_6_DEGACCEL, -LROTATE_6_OMEGA, -160, SPEED_6);
 80073d2:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80073d6:	f06f 029f 	mvn.w	r2, #159	; 0x9f
 80073da:	491a      	ldr	r1, [pc, #104]	; (8007444 <Lslalom_R180+0x29c>)
 80073dc:	481a      	ldr	r0, [pc, #104]	; (8007448 <Lslalom_R180+0x2a0>)
 80073de:	f7fe f8d7 	bl	8005590 <slalomR>
		if(!MF.FLAG.XDIR){
 80073e2:	4b12      	ldr	r3, [pc, #72]	; (800742c <Lslalom_R180+0x284>)
 80073e4:	881b      	ldrh	r3, [r3, #0]
 80073e6:	f3c3 3300 	ubfx	r3, r3, #12, #1
 80073ea:	b2db      	uxtb	r3, r3
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d108      	bne.n	8007402 <Lslalom_R180+0x25a>
			turn_dir(DIR_TURN_R90, 1);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 80073f0:	2101      	movs	r1, #1
 80073f2:	2001      	movs	r0, #1
 80073f4:	f008 fc4c 	bl	800fc90 <turn_dir>
			turn_dir(DIR_TURN_R90, 1);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 80073f8:	2101      	movs	r1, #1
 80073fa:	2001      	movs	r0, #1
 80073fc:	f008 fc48 	bl	800fc90 <turn_dir>
 8007400:	e003      	b.n	800740a <Lslalom_R180+0x262>
			turn_dir(DIR_TURN_R180_8, 3);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8007402:	2103      	movs	r1, #3
 8007404:	2004      	movs	r0, #4
 8007406:	f008 fc43 	bl	800fc90 <turn_dir>
		slalomB(10000, SPEED_6, LROTATE_6_OFFSET_B);
 800740a:	229b      	movs	r2, #155	; 0x9b
 800740c:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8007410:	f242 7010 	movw	r0, #10000	; 0x2710
 8007414:	f7fe f9de 	bl	80057d4 <slalomB>
}
 8007418:	bf00      	nop
 800741a:	46bd      	mov	sp, r7
 800741c:	bd80      	pop	{r7, pc}
 800741e:	bf00      	nop
 8007420:	20000456 	.word	0x20000456
 8007424:	fffffefc 	.word	0xfffffefc
 8007428:	fffff830 	.word	0xfffff830
 800742c:	20000f68 	.word	0x20000f68
 8007430:	fffffe74 	.word	0xfffffe74
 8007434:	fffff448 	.word	0xfffff448
 8007438:	fffffdd0 	.word	0xfffffdd0
 800743c:	fffffd85 	.word	0xfffffd85
 8007440:	ffffe0c0 	.word	0xffffe0c0
 8007444:	fffffb50 	.word	0xfffffb50
 8007448:	ffff8ad0 	.word	0xffff8ad0

0800744c <Lslalom_L180>:
//Lslalom_L180
// 大回りスラロームで右に180度回転する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void Lslalom_L180(void){
 800744c:	b580      	push	{r7, lr}
 800744e:	b082      	sub	sp, #8
 8007450:	af02      	add	r7, sp, #8
	full_led_write(GREEN);
 8007452:	2002      	movs	r0, #2
 8007454:	f00a fab0 	bl	80119b8 <full_led_write>
	if(run_mode == LOW){
 8007458:	4b9c      	ldr	r3, [pc, #624]	; (80076cc <Lslalom_L180+0x280>)
 800745a:	781b      	ldrb	r3, [r3, #0]
 800745c:	b2db      	uxtb	r3, r3
 800745e:	2b01      	cmp	r3, #1
 8007460:	d12e      	bne.n	80074c0 <Lslalom_L180+0x74>
		slalomF(10000, SPEED_LOW, LROTATE_OFFSET_F, LROTATE_WALL_FL, LROTATE_WALL_FR);
 8007462:	2364      	movs	r3, #100	; 0x64
 8007464:	9300      	str	r3, [sp, #0]
 8007466:	23c8      	movs	r3, #200	; 0xc8
 8007468:	223c      	movs	r2, #60	; 0x3c
 800746a:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800746e:	f242 7010 	movw	r0, #10000	; 0x2710
 8007472:	f7fe f811 	bl	8005498 <slalomF>
		slalomR(LROTATE_DEGACCEL, LROTATE_OMEGA, 180, SPEED_LOW);
 8007476:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800747a:	22b4      	movs	r2, #180	; 0xb4
 800747c:	f44f 7182 	mov.w	r1, #260	; 0x104
 8007480:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8007484:	f7fe f884 	bl	8005590 <slalomR>

		if(!MF.FLAG.XDIR){
 8007488:	4b91      	ldr	r3, [pc, #580]	; (80076d0 <Lslalom_L180+0x284>)
 800748a:	881b      	ldrh	r3, [r3, #0]
 800748c:	f3c3 3300 	ubfx	r3, r3, #12, #1
 8007490:	b2db      	uxtb	r3, r3
 8007492:	2b00      	cmp	r3, #0
 8007494:	d108      	bne.n	80074a8 <Lslalom_L180+0x5c>
			turn_dir(DIR_TURN_L90, 1);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8007496:	2101      	movs	r1, #1
 8007498:	20ff      	movs	r0, #255	; 0xff
 800749a:	f008 fbf9 	bl	800fc90 <turn_dir>
			turn_dir(DIR_TURN_L90, 1);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 800749e:	2101      	movs	r1, #1
 80074a0:	20ff      	movs	r0, #255	; 0xff
 80074a2:	f008 fbf5 	bl	800fc90 <turn_dir>
 80074a6:	e003      	b.n	80074b0 <Lslalom_L180+0x64>
		}else{
			turn_dir(DIR_TURN_L180_8, 3);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 80074a8:	2103      	movs	r1, #3
 80074aa:	20fc      	movs	r0, #252	; 0xfc
 80074ac:	f008 fbf0 	bl	800fc90 <turn_dir>
		}
		slalomB(10000, SPEED_LOW, LROTATE_OFFSET_B);
 80074b0:	2250      	movs	r2, #80	; 0x50
 80074b2:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80074b6:	f242 7010 	movw	r0, #10000	; 0x2710
 80074ba:	f7fe f98b 	bl	80057d4 <slalomB>
		}else{
			turn_dir(DIR_TURN_L180_8, 3);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
		}
		slalomB(10000, SPEED_6, LROTATE_6_OFFSET_B);
	}
}
 80074be:	e102      	b.n	80076c6 <Lslalom_L180+0x27a>
	}else if(run_mode == MIDDLE){
 80074c0:	4b82      	ldr	r3, [pc, #520]	; (80076cc <Lslalom_L180+0x280>)
 80074c2:	781b      	ldrb	r3, [r3, #0]
 80074c4:	b2db      	uxtb	r3, r3
 80074c6:	2b02      	cmp	r3, #2
 80074c8:	d12e      	bne.n	8007528 <Lslalom_L180+0xdc>
		slalomF(10000, SPEED_MIDDLE, LROTATE_2_OFFSET_F, LROTATE_2_WALL_FL, LROTATE_2_WALL_FR);
 80074ca:	2364      	movs	r3, #100	; 0x64
 80074cc:	9300      	str	r3, [sp, #0]
 80074ce:	23c8      	movs	r3, #200	; 0xc8
 80074d0:	2232      	movs	r2, #50	; 0x32
 80074d2:	f44f 7116 	mov.w	r1, #600	; 0x258
 80074d6:	f242 7010 	movw	r0, #10000	; 0x2710
 80074da:	f7fd ffdd 	bl	8005498 <slalomF>
		slalomR(LROTATE_2_DEGACCEL, LROTATE_2_OMEGA, 180, SPEED_MIDDLE);
 80074de:	f44f 7316 	mov.w	r3, #600	; 0x258
 80074e2:	22b4      	movs	r2, #180	; 0xb4
 80074e4:	f44f 71c6 	mov.w	r1, #396	; 0x18c
 80074e8:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80074ec:	f7fe f850 	bl	8005590 <slalomR>
		if(!MF.FLAG.XDIR){
 80074f0:	4b77      	ldr	r3, [pc, #476]	; (80076d0 <Lslalom_L180+0x284>)
 80074f2:	881b      	ldrh	r3, [r3, #0]
 80074f4:	f3c3 3300 	ubfx	r3, r3, #12, #1
 80074f8:	b2db      	uxtb	r3, r3
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d108      	bne.n	8007510 <Lslalom_L180+0xc4>
			turn_dir(DIR_TURN_L90, 1);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 80074fe:	2101      	movs	r1, #1
 8007500:	20ff      	movs	r0, #255	; 0xff
 8007502:	f008 fbc5 	bl	800fc90 <turn_dir>
			turn_dir(DIR_TURN_L90, 1);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8007506:	2101      	movs	r1, #1
 8007508:	20ff      	movs	r0, #255	; 0xff
 800750a:	f008 fbc1 	bl	800fc90 <turn_dir>
 800750e:	e003      	b.n	8007518 <Lslalom_L180+0xcc>
			turn_dir(DIR_TURN_L180_8, 3);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8007510:	2103      	movs	r1, #3
 8007512:	20fc      	movs	r0, #252	; 0xfc
 8007514:	f008 fbbc 	bl	800fc90 <turn_dir>
		slalomB(10000, SPEED_MIDDLE, LROTATE_2_OFFSET_B);
 8007518:	224e      	movs	r2, #78	; 0x4e
 800751a:	f44f 7116 	mov.w	r1, #600	; 0x258
 800751e:	f242 7010 	movw	r0, #10000	; 0x2710
 8007522:	f7fe f957 	bl	80057d4 <slalomB>
}
 8007526:	e0ce      	b.n	80076c6 <Lslalom_L180+0x27a>
	}else if(run_mode == HIGH){
 8007528:	4b68      	ldr	r3, [pc, #416]	; (80076cc <Lslalom_L180+0x280>)
 800752a:	781b      	ldrb	r3, [r3, #0]
 800752c:	b2db      	uxtb	r3, r3
 800752e:	2b03      	cmp	r3, #3
 8007530:	d12e      	bne.n	8007590 <Lslalom_L180+0x144>
		slalomF(10000, SPEED_HIGH, LROTATE_3_OFFSET_F, LROTATE_3_WALL_FL, LROTATE_3_WALL_FR);
 8007532:	235a      	movs	r3, #90	; 0x5a
 8007534:	9300      	str	r3, [sp, #0]
 8007536:	23b4      	movs	r3, #180	; 0xb4
 8007538:	221c      	movs	r2, #28
 800753a:	f44f 7148 	mov.w	r1, #800	; 0x320
 800753e:	f242 7010 	movw	r0, #10000	; 0x2710
 8007542:	f7fd ffa9 	bl	8005498 <slalomF>
		slalomR(LROTATE_3_DEGACCEL, LROTATE_3_OMEGA, 180, SPEED_HIGH);
 8007546:	f44f 7348 	mov.w	r3, #800	; 0x320
 800754a:	22b4      	movs	r2, #180	; 0xb4
 800754c:	f44f 710c 	mov.w	r1, #560	; 0x230
 8007550:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8007554:	f7fe f81c 	bl	8005590 <slalomR>
		if(!MF.FLAG.XDIR){
 8007558:	4b5d      	ldr	r3, [pc, #372]	; (80076d0 <Lslalom_L180+0x284>)
 800755a:	881b      	ldrh	r3, [r3, #0]
 800755c:	f3c3 3300 	ubfx	r3, r3, #12, #1
 8007560:	b2db      	uxtb	r3, r3
 8007562:	2b00      	cmp	r3, #0
 8007564:	d108      	bne.n	8007578 <Lslalom_L180+0x12c>
			turn_dir(DIR_TURN_L90, 1);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8007566:	2101      	movs	r1, #1
 8007568:	20ff      	movs	r0, #255	; 0xff
 800756a:	f008 fb91 	bl	800fc90 <turn_dir>
			turn_dir(DIR_TURN_L90, 1);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 800756e:	2101      	movs	r1, #1
 8007570:	20ff      	movs	r0, #255	; 0xff
 8007572:	f008 fb8d 	bl	800fc90 <turn_dir>
 8007576:	e003      	b.n	8007580 <Lslalom_L180+0x134>
			turn_dir(DIR_TURN_L180_8, 3);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8007578:	2103      	movs	r1, #3
 800757a:	20fc      	movs	r0, #252	; 0xfc
 800757c:	f008 fb88 	bl	800fc90 <turn_dir>
		slalomB(10000, SPEED_HIGH, LROTATE_3_OFFSET_B);
 8007580:	224e      	movs	r2, #78	; 0x4e
 8007582:	f44f 7148 	mov.w	r1, #800	; 0x320
 8007586:	f242 7010 	movw	r0, #10000	; 0x2710
 800758a:	f7fe f923 	bl	80057d4 <slalomB>
}
 800758e:	e09a      	b.n	80076c6 <Lslalom_L180+0x27a>
	}else if(run_mode == HIGH_HIGH){
 8007590:	4b4e      	ldr	r3, [pc, #312]	; (80076cc <Lslalom_L180+0x280>)
 8007592:	781b      	ldrb	r3, [r3, #0]
 8007594:	b2db      	uxtb	r3, r3
 8007596:	2b04      	cmp	r3, #4
 8007598:	d12e      	bne.n	80075f8 <Lslalom_L180+0x1ac>
		slalomF(10000, SPEED_HIGH_HIGH, LROTATE_4_OFFSET_F, LROTATE_4_WALL_FL, LROTATE_4_WALL_FR);
 800759a:	2364      	movs	r3, #100	; 0x64
 800759c:	9300      	str	r3, [sp, #0]
 800759e:	23c8      	movs	r3, #200	; 0xc8
 80075a0:	2232      	movs	r2, #50	; 0x32
 80075a2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80075a6:	f242 7010 	movw	r0, #10000	; 0x2710
 80075aa:	f7fd ff75 	bl	8005498 <slalomF>
		slalomR(LROTATE_4_DEGACCEL, LROTATE_4_OMEGA, 170, SPEED_HIGH_HIGH);
 80075ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80075b2:	22aa      	movs	r2, #170	; 0xaa
 80075b4:	f240 217b 	movw	r1, #635	; 0x27b
 80075b8:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 80075bc:	f7fd ffe8 	bl	8005590 <slalomR>
		if(!MF.FLAG.XDIR){
 80075c0:	4b43      	ldr	r3, [pc, #268]	; (80076d0 <Lslalom_L180+0x284>)
 80075c2:	881b      	ldrh	r3, [r3, #0]
 80075c4:	f3c3 3300 	ubfx	r3, r3, #12, #1
 80075c8:	b2db      	uxtb	r3, r3
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d108      	bne.n	80075e0 <Lslalom_L180+0x194>
			turn_dir(DIR_TURN_L90, 1);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 80075ce:	2101      	movs	r1, #1
 80075d0:	20ff      	movs	r0, #255	; 0xff
 80075d2:	f008 fb5d 	bl	800fc90 <turn_dir>
			turn_dir(DIR_TURN_L90, 1);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 80075d6:	2101      	movs	r1, #1
 80075d8:	20ff      	movs	r0, #255	; 0xff
 80075da:	f008 fb59 	bl	800fc90 <turn_dir>
 80075de:	e003      	b.n	80075e8 <Lslalom_L180+0x19c>
			turn_dir(DIR_TURN_L180_8, 3);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 80075e0:	2103      	movs	r1, #3
 80075e2:	20fc      	movs	r0, #252	; 0xfc
 80075e4:	f008 fb54 	bl	800fc90 <turn_dir>
		slalomB(10000, SPEED_HIGH_HIGH, LROTATE_4_OFFSET_B);
 80075e8:	227d      	movs	r2, #125	; 0x7d
 80075ea:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80075ee:	f242 7010 	movw	r0, #10000	; 0x2710
 80075f2:	f7fe f8ef 	bl	80057d4 <slalomB>
}
 80075f6:	e066      	b.n	80076c6 <Lslalom_L180+0x27a>
	}else if(run_mode == 5){
 80075f8:	4b34      	ldr	r3, [pc, #208]	; (80076cc <Lslalom_L180+0x280>)
 80075fa:	781b      	ldrb	r3, [r3, #0]
 80075fc:	b2db      	uxtb	r3, r3
 80075fe:	2b05      	cmp	r3, #5
 8007600:	d12e      	bne.n	8007660 <Lslalom_L180+0x214>
		slalomF(10000, SPEED_5, LROTATE_5_OFFSET_F, LROTATE_5_WALL_FL, LROTATE_5_WALL_FR);
 8007602:	2364      	movs	r3, #100	; 0x64
 8007604:	9300      	str	r3, [sp, #0]
 8007606:	23c8      	movs	r3, #200	; 0xc8
 8007608:	221e      	movs	r2, #30
 800760a:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 800760e:	f242 7010 	movw	r0, #10000	; 0x2710
 8007612:	f7fd ff41 	bl	8005498 <slalomF>
		slalomR(LROTATE_5_DEGACCEL, LROTATE_5_OMEGA, 170, SPEED_5);
 8007616:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
 800761a:	22aa      	movs	r2, #170	; 0xaa
 800761c:	f240 3111 	movw	r1, #785	; 0x311
 8007620:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 8007624:	f7fd ffb4 	bl	8005590 <slalomR>
		if(!MF.FLAG.XDIR){
 8007628:	4b29      	ldr	r3, [pc, #164]	; (80076d0 <Lslalom_L180+0x284>)
 800762a:	881b      	ldrh	r3, [r3, #0]
 800762c:	f3c3 3300 	ubfx	r3, r3, #12, #1
 8007630:	b2db      	uxtb	r3, r3
 8007632:	2b00      	cmp	r3, #0
 8007634:	d108      	bne.n	8007648 <Lslalom_L180+0x1fc>
			turn_dir(DIR_TURN_L90, 1);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8007636:	2101      	movs	r1, #1
 8007638:	20ff      	movs	r0, #255	; 0xff
 800763a:	f008 fb29 	bl	800fc90 <turn_dir>
			turn_dir(DIR_TURN_L90, 1);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 800763e:	2101      	movs	r1, #1
 8007640:	20ff      	movs	r0, #255	; 0xff
 8007642:	f008 fb25 	bl	800fc90 <turn_dir>
 8007646:	e003      	b.n	8007650 <Lslalom_L180+0x204>
			turn_dir(DIR_TURN_L180_8, 3);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8007648:	2103      	movs	r1, #3
 800764a:	20fc      	movs	r0, #252	; 0xfc
 800764c:	f008 fb20 	bl	800fc90 <turn_dir>
		slalomB(10000, SPEED_5, LROTATE_5_OFFSET_B);
 8007650:	2296      	movs	r2, #150	; 0x96
 8007652:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 8007656:	f242 7010 	movw	r0, #10000	; 0x2710
 800765a:	f7fe f8bb 	bl	80057d4 <slalomB>
}
 800765e:	e032      	b.n	80076c6 <Lslalom_L180+0x27a>
	}else if(run_mode == 6){
 8007660:	4b1a      	ldr	r3, [pc, #104]	; (80076cc <Lslalom_L180+0x280>)
 8007662:	781b      	ldrb	r3, [r3, #0]
 8007664:	b2db      	uxtb	r3, r3
 8007666:	2b06      	cmp	r3, #6
 8007668:	d12d      	bne.n	80076c6 <Lslalom_L180+0x27a>
		slalomF(10000, SPEED_6, LROTATE_6_OFFSET_F, LROTATE_6_WALL_FL, LROTATE_6_WALL_FR);
 800766a:	235a      	movs	r3, #90	; 0x5a
 800766c:	9300      	str	r3, [sp, #0]
 800766e:	23b4      	movs	r3, #180	; 0xb4
 8007670:	221e      	movs	r2, #30
 8007672:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8007676:	f242 7010 	movw	r0, #10000	; 0x2710
 800767a:	f7fd ff0d 	bl	8005498 <slalomF>
		slalomR(LROTATE_6_DEGACCEL, LROTATE_6_OMEGA, 160, SPEED_6);
 800767e:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8007682:	22a0      	movs	r2, #160	; 0xa0
 8007684:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 8007688:	f247 5030 	movw	r0, #30000	; 0x7530
 800768c:	f7fd ff80 	bl	8005590 <slalomR>
		if(!MF.FLAG.XDIR){
 8007690:	4b0f      	ldr	r3, [pc, #60]	; (80076d0 <Lslalom_L180+0x284>)
 8007692:	881b      	ldrh	r3, [r3, #0]
 8007694:	f3c3 3300 	ubfx	r3, r3, #12, #1
 8007698:	b2db      	uxtb	r3, r3
 800769a:	2b00      	cmp	r3, #0
 800769c:	d108      	bne.n	80076b0 <Lslalom_L180+0x264>
			turn_dir(DIR_TURN_L90, 1);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 800769e:	2101      	movs	r1, #1
 80076a0:	20ff      	movs	r0, #255	; 0xff
 80076a2:	f008 faf5 	bl	800fc90 <turn_dir>
			turn_dir(DIR_TURN_L90, 1);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 80076a6:	2101      	movs	r1, #1
 80076a8:	20ff      	movs	r0, #255	; 0xff
 80076aa:	f008 faf1 	bl	800fc90 <turn_dir>
 80076ae:	e003      	b.n	80076b8 <Lslalom_L180+0x26c>
			turn_dir(DIR_TURN_L180_8, 3);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 80076b0:	2103      	movs	r1, #3
 80076b2:	20fc      	movs	r0, #252	; 0xfc
 80076b4:	f008 faec 	bl	800fc90 <turn_dir>
		slalomB(10000, SPEED_6, LROTATE_6_OFFSET_B);
 80076b8:	229b      	movs	r2, #155	; 0x9b
 80076ba:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 80076be:	f242 7010 	movw	r0, #10000	; 0x2710
 80076c2:	f7fe f887 	bl	80057d4 <slalomB>
}
 80076c6:	bf00      	nop
 80076c8:	46bd      	mov	sp, r7
 80076ca:	bd80      	pop	{r7, pc}
 80076cc:	20000456 	.word	0x20000456
 80076d0:	20000f68 	.word	0x20000f68

080076d4 <v_R45>:
//v_R45
// 区画中心から右に45度回転する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void v_R45(void){
 80076d4:	b580      	push	{r7, lr}
 80076d6:	b082      	sub	sp, #8
 80076d8:	af02      	add	r7, sp, #8
	full_led_write(PURPLE);
 80076da:	2005      	movs	r0, #5
 80076dc:	f00a f96c 	bl	80119b8 <full_led_write>
	if(run_mode == LOW){
 80076e0:	4bc2      	ldr	r3, [pc, #776]	; (80079ec <v_R45+0x318>)
 80076e2:	781b      	ldrb	r3, [r3, #0]
 80076e4:	b2db      	uxtb	r3, r3
 80076e6:	2b01      	cmp	r3, #1
 80076e8:	d155      	bne.n	8007796 <v_R45+0xc2>
		if(!MF2.FLAG.V){
 80076ea:	4bc1      	ldr	r3, [pc, #772]	; (80079f0 <v_R45+0x31c>)
 80076ec:	881b      	ldrh	r3, [r3, #0]
 80076ee:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80076f2:	b2db      	uxtb	r3, r3
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d10c      	bne.n	8007712 <v_R45+0x3e>
			slalomF(10000, SPEED_LOW, V45_OFFSET_F, NO_WALL, NO_WALL);
 80076f8:	f241 3388 	movw	r3, #5000	; 0x1388
 80076fc:	9300      	str	r3, [sp, #0]
 80076fe:	f241 3388 	movw	r3, #5000	; 0x1388
 8007702:	2228      	movs	r2, #40	; 0x28
 8007704:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8007708:	f242 7010 	movw	r0, #10000	; 0x2710
 800770c:	f7fd fec4 	bl	8005498 <slalomF>
 8007710:	e00b      	b.n	800772a <v_R45+0x56>
		}else{
			slalomF(10000, SPEED_LOW, V45_OFFSET_VF, NO_WALL, NO_WALL);
 8007712:	f241 3388 	movw	r3, #5000	; 0x1388
 8007716:	9300      	str	r3, [sp, #0]
 8007718:	f241 3388 	movw	r3, #5000	; 0x1388
 800771c:	2255      	movs	r2, #85	; 0x55
 800771e:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8007722:	f242 7010 	movw	r0, #10000	; 0x2710
 8007726:	f7fd feb7 	bl	8005498 <slalomF>
		}
		slalomR(-V45_DEGACCEL, -V45_OMEGA, -45, SPEED_LOW);
 800772a:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800772e:	f06f 022c 	mvn.w	r2, #44	; 0x2c
 8007732:	49b0      	ldr	r1, [pc, #704]	; (80079f4 <v_R45+0x320>)
 8007734:	48b0      	ldr	r0, [pc, #704]	; (80079f8 <v_R45+0x324>)
 8007736:	f7fd ff2b 	bl	8005590 <slalomR>

		turn_dir(DIR_TURN_R45_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 800773a:	2103      	movs	r1, #3
 800773c:	2001      	movs	r0, #1
 800773e:	f008 faa7 	bl	800fc90 <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 8007742:	4bab      	ldr	r3, [pc, #684]	; (80079f0 <v_R45+0x31c>)
 8007744:	881b      	ldrh	r3, [r3, #0]
 8007746:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800774a:	b2db      	uxtb	r3, r3
 800774c:	3301      	adds	r3, #1
 800774e:	2b00      	cmp	r3, #0
 8007750:	f003 0301 	and.w	r3, r3, #1
 8007754:	bfb8      	it	lt
 8007756:	425b      	neglt	r3, r3
 8007758:	f003 0301 	and.w	r3, r3, #1
 800775c:	b2d9      	uxtb	r1, r3
 800775e:	4aa4      	ldr	r2, [pc, #656]	; (80079f0 <v_R45+0x31c>)
 8007760:	8813      	ldrh	r3, [r2, #0]
 8007762:	f361 03c3 	bfi	r3, r1, #3, #1
 8007766:	8013      	strh	r3, [r2, #0]

		if(!MF2.FLAG.V){
 8007768:	4ba1      	ldr	r3, [pc, #644]	; (80079f0 <v_R45+0x31c>)
 800776a:	881b      	ldrh	r3, [r3, #0]
 800776c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8007770:	b2db      	uxtb	r3, r3
 8007772:	2b00      	cmp	r3, #0
 8007774:	d107      	bne.n	8007786 <v_R45+0xb2>
			slalomB(10000, SPEED_LOW, V45_OFFSET_VB);
 8007776:	2228      	movs	r2, #40	; 0x28
 8007778:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800777c:	f242 7010 	movw	r0, #10000	; 0x2710
 8007780:	f7fe f828 	bl	80057d4 <slalomB>
			slalomB(10000, SPEED_5, V45_5_OFFSET_VB);
		}else{
			slalomB(10000, SPEED_5, V45_5_OFFSET_B);
		}
	}
}
 8007784:	e183      	b.n	8007a8e <v_R45+0x3ba>
			slalomB(10000, SPEED_LOW, V45_OFFSET_B);
 8007786:	2255      	movs	r2, #85	; 0x55
 8007788:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800778c:	f242 7010 	movw	r0, #10000	; 0x2710
 8007790:	f7fe f820 	bl	80057d4 <slalomB>
}
 8007794:	e17b      	b.n	8007a8e <v_R45+0x3ba>
	}else if(run_mode == MIDDLE){
 8007796:	4b95      	ldr	r3, [pc, #596]	; (80079ec <v_R45+0x318>)
 8007798:	781b      	ldrb	r3, [r3, #0]
 800779a:	b2db      	uxtb	r3, r3
 800779c:	2b02      	cmp	r3, #2
 800779e:	d155      	bne.n	800784c <v_R45+0x178>
		if(!MF2.FLAG.V){
 80077a0:	4b93      	ldr	r3, [pc, #588]	; (80079f0 <v_R45+0x31c>)
 80077a2:	881b      	ldrh	r3, [r3, #0]
 80077a4:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80077a8:	b2db      	uxtb	r3, r3
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d10c      	bne.n	80077c8 <v_R45+0xf4>
			slalomF(10000, SPEED_MIDDLE, V45_2_OFFSET_F, NO_WALL, NO_WALL);
 80077ae:	f241 3388 	movw	r3, #5000	; 0x1388
 80077b2:	9300      	str	r3, [sp, #0]
 80077b4:	f241 3388 	movw	r3, #5000	; 0x1388
 80077b8:	2228      	movs	r2, #40	; 0x28
 80077ba:	f44f 7116 	mov.w	r1, #600	; 0x258
 80077be:	f242 7010 	movw	r0, #10000	; 0x2710
 80077c2:	f7fd fe69 	bl	8005498 <slalomF>
 80077c6:	e00b      	b.n	80077e0 <v_R45+0x10c>
			slalomF(10000, SPEED_MIDDLE, V45_2_OFFSET_VF, NO_WALL, NO_WALL);
 80077c8:	f241 3388 	movw	r3, #5000	; 0x1388
 80077cc:	9300      	str	r3, [sp, #0]
 80077ce:	f241 3388 	movw	r3, #5000	; 0x1388
 80077d2:	2249      	movs	r2, #73	; 0x49
 80077d4:	f44f 7116 	mov.w	r1, #600	; 0x258
 80077d8:	f242 7010 	movw	r0, #10000	; 0x2710
 80077dc:	f7fd fe5c 	bl	8005498 <slalomF>
		slalomR(-V45_2_DEGACCEL, -V45_2_OMEGA, -45, SPEED_MIDDLE);
 80077e0:	f44f 7316 	mov.w	r3, #600	; 0x258
 80077e4:	f06f 022c 	mvn.w	r2, #44	; 0x2c
 80077e8:	4984      	ldr	r1, [pc, #528]	; (80079fc <v_R45+0x328>)
 80077ea:	4885      	ldr	r0, [pc, #532]	; (8007a00 <v_R45+0x32c>)
 80077ec:	f7fd fed0 	bl	8005590 <slalomR>
		turn_dir(DIR_TURN_R45_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 80077f0:	2103      	movs	r1, #3
 80077f2:	2001      	movs	r0, #1
 80077f4:	f008 fa4c 	bl	800fc90 <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 80077f8:	4b7d      	ldr	r3, [pc, #500]	; (80079f0 <v_R45+0x31c>)
 80077fa:	881b      	ldrh	r3, [r3, #0]
 80077fc:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8007800:	b2db      	uxtb	r3, r3
 8007802:	3301      	adds	r3, #1
 8007804:	2b00      	cmp	r3, #0
 8007806:	f003 0301 	and.w	r3, r3, #1
 800780a:	bfb8      	it	lt
 800780c:	425b      	neglt	r3, r3
 800780e:	f003 0301 	and.w	r3, r3, #1
 8007812:	b2d9      	uxtb	r1, r3
 8007814:	4a76      	ldr	r2, [pc, #472]	; (80079f0 <v_R45+0x31c>)
 8007816:	8813      	ldrh	r3, [r2, #0]
 8007818:	f361 03c3 	bfi	r3, r1, #3, #1
 800781c:	8013      	strh	r3, [r2, #0]
		if(!MF2.FLAG.V){
 800781e:	4b74      	ldr	r3, [pc, #464]	; (80079f0 <v_R45+0x31c>)
 8007820:	881b      	ldrh	r3, [r3, #0]
 8007822:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8007826:	b2db      	uxtb	r3, r3
 8007828:	2b00      	cmp	r3, #0
 800782a:	d107      	bne.n	800783c <v_R45+0x168>
			slalomB(10000, SPEED_MIDDLE, V45_2_OFFSET_VB);
 800782c:	2237      	movs	r2, #55	; 0x37
 800782e:	f44f 7116 	mov.w	r1, #600	; 0x258
 8007832:	f242 7010 	movw	r0, #10000	; 0x2710
 8007836:	f7fd ffcd 	bl	80057d4 <slalomB>
}
 800783a:	e128      	b.n	8007a8e <v_R45+0x3ba>
			slalomB(10000, SPEED_MIDDLE, V45_2_OFFSET_B);
 800783c:	225d      	movs	r2, #93	; 0x5d
 800783e:	f44f 7116 	mov.w	r1, #600	; 0x258
 8007842:	f242 7010 	movw	r0, #10000	; 0x2710
 8007846:	f7fd ffc5 	bl	80057d4 <slalomB>
}
 800784a:	e120      	b.n	8007a8e <v_R45+0x3ba>
	}else if(run_mode == HIGH){
 800784c:	4b67      	ldr	r3, [pc, #412]	; (80079ec <v_R45+0x318>)
 800784e:	781b      	ldrb	r3, [r3, #0]
 8007850:	b2db      	uxtb	r3, r3
 8007852:	2b03      	cmp	r3, #3
 8007854:	d155      	bne.n	8007902 <v_R45+0x22e>
		if(!MF2.FLAG.V){
 8007856:	4b66      	ldr	r3, [pc, #408]	; (80079f0 <v_R45+0x31c>)
 8007858:	881b      	ldrh	r3, [r3, #0]
 800785a:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800785e:	b2db      	uxtb	r3, r3
 8007860:	2b00      	cmp	r3, #0
 8007862:	d10c      	bne.n	800787e <v_R45+0x1aa>
			slalomF(10000, SPEED_HIGH, V45_3_OFFSET_F, NO_WALL, NO_WALL);
 8007864:	f241 3388 	movw	r3, #5000	; 0x1388
 8007868:	9300      	str	r3, [sp, #0]
 800786a:	f241 3388 	movw	r3, #5000	; 0x1388
 800786e:	2217      	movs	r2, #23
 8007870:	f44f 7148 	mov.w	r1, #800	; 0x320
 8007874:	f242 7010 	movw	r0, #10000	; 0x2710
 8007878:	f7fd fe0e 	bl	8005498 <slalomF>
 800787c:	e00b      	b.n	8007896 <v_R45+0x1c2>
			slalomF(10000, SPEED_HIGH, V45_3_OFFSET_VF, NO_WALL, NO_WALL);
 800787e:	f241 3388 	movw	r3, #5000	; 0x1388
 8007882:	9300      	str	r3, [sp, #0]
 8007884:	f241 3388 	movw	r3, #5000	; 0x1388
 8007888:	2237      	movs	r2, #55	; 0x37
 800788a:	f44f 7148 	mov.w	r1, #800	; 0x320
 800788e:	f242 7010 	movw	r0, #10000	; 0x2710
 8007892:	f7fd fe01 	bl	8005498 <slalomF>
		slalomR(-V45_3_DEGACCEL, -V45_3_OMEGA, -45, SPEED_HIGH);
 8007896:	f44f 7348 	mov.w	r3, #800	; 0x320
 800789a:	f06f 022c 	mvn.w	r2, #44	; 0x2c
 800789e:	4957      	ldr	r1, [pc, #348]	; (80079fc <v_R45+0x328>)
 80078a0:	4857      	ldr	r0, [pc, #348]	; (8007a00 <v_R45+0x32c>)
 80078a2:	f7fd fe75 	bl	8005590 <slalomR>
		turn_dir(DIR_TURN_R45_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 80078a6:	2103      	movs	r1, #3
 80078a8:	2001      	movs	r0, #1
 80078aa:	f008 f9f1 	bl	800fc90 <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 80078ae:	4b50      	ldr	r3, [pc, #320]	; (80079f0 <v_R45+0x31c>)
 80078b0:	881b      	ldrh	r3, [r3, #0]
 80078b2:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80078b6:	b2db      	uxtb	r3, r3
 80078b8:	3301      	adds	r3, #1
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	f003 0301 	and.w	r3, r3, #1
 80078c0:	bfb8      	it	lt
 80078c2:	425b      	neglt	r3, r3
 80078c4:	f003 0301 	and.w	r3, r3, #1
 80078c8:	b2d9      	uxtb	r1, r3
 80078ca:	4a49      	ldr	r2, [pc, #292]	; (80079f0 <v_R45+0x31c>)
 80078cc:	8813      	ldrh	r3, [r2, #0]
 80078ce:	f361 03c3 	bfi	r3, r1, #3, #1
 80078d2:	8013      	strh	r3, [r2, #0]
		if(!MF2.FLAG.V){
 80078d4:	4b46      	ldr	r3, [pc, #280]	; (80079f0 <v_R45+0x31c>)
 80078d6:	881b      	ldrh	r3, [r3, #0]
 80078d8:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80078dc:	b2db      	uxtb	r3, r3
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d107      	bne.n	80078f2 <v_R45+0x21e>
			slalomB(10000, SPEED_HIGH, V45_3_OFFSET_VB);
 80078e2:	2233      	movs	r2, #51	; 0x33
 80078e4:	f44f 7148 	mov.w	r1, #800	; 0x320
 80078e8:	f242 7010 	movw	r0, #10000	; 0x2710
 80078ec:	f7fd ff72 	bl	80057d4 <slalomB>
}
 80078f0:	e0cd      	b.n	8007a8e <v_R45+0x3ba>
			slalomB(10000, SPEED_HIGH, V45_3_OFFSET_B);
 80078f2:	224b      	movs	r2, #75	; 0x4b
 80078f4:	f44f 7148 	mov.w	r1, #800	; 0x320
 80078f8:	f242 7010 	movw	r0, #10000	; 0x2710
 80078fc:	f7fd ff6a 	bl	80057d4 <slalomB>
}
 8007900:	e0c5      	b.n	8007a8e <v_R45+0x3ba>
	}else if(run_mode == HIGH_HIGH){
 8007902:	4b3a      	ldr	r3, [pc, #232]	; (80079ec <v_R45+0x318>)
 8007904:	781b      	ldrb	r3, [r3, #0]
 8007906:	b2db      	uxtb	r3, r3
 8007908:	2b04      	cmp	r3, #4
 800790a:	d155      	bne.n	80079b8 <v_R45+0x2e4>
		if(!MF2.FLAG.V){
 800790c:	4b38      	ldr	r3, [pc, #224]	; (80079f0 <v_R45+0x31c>)
 800790e:	881b      	ldrh	r3, [r3, #0]
 8007910:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8007914:	b2db      	uxtb	r3, r3
 8007916:	2b00      	cmp	r3, #0
 8007918:	d10c      	bne.n	8007934 <v_R45+0x260>
			slalomF(10000, SPEED_HIGH_HIGH, V45_4_OFFSET_F, NO_WALL, NO_WALL);
 800791a:	f241 3388 	movw	r3, #5000	; 0x1388
 800791e:	9300      	str	r3, [sp, #0]
 8007920:	f241 3388 	movw	r3, #5000	; 0x1388
 8007924:	2214      	movs	r2, #20
 8007926:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800792a:	f242 7010 	movw	r0, #10000	; 0x2710
 800792e:	f7fd fdb3 	bl	8005498 <slalomF>
 8007932:	e00b      	b.n	800794c <v_R45+0x278>
			slalomF(10000, SPEED_HIGH_HIGH, V45_4_OFFSET_VF, NO_WALL, NO_WALL);
 8007934:	f241 3388 	movw	r3, #5000	; 0x1388
 8007938:	9300      	str	r3, [sp, #0]
 800793a:	f241 3388 	movw	r3, #5000	; 0x1388
 800793e:	2214      	movs	r2, #20
 8007940:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8007944:	f242 7010 	movw	r0, #10000	; 0x2710
 8007948:	f7fd fda6 	bl	8005498 <slalomF>
		slalomR(-V45_4_DEGACCEL, -V45_4_OMEGA, -45, SPEED_HIGH_HIGH);
 800794c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007950:	f06f 022c 	mvn.w	r2, #44	; 0x2c
 8007954:	492b      	ldr	r1, [pc, #172]	; (8007a04 <v_R45+0x330>)
 8007956:	482c      	ldr	r0, [pc, #176]	; (8007a08 <v_R45+0x334>)
 8007958:	f7fd fe1a 	bl	8005590 <slalomR>
		turn_dir(DIR_TURN_R45_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 800795c:	2103      	movs	r1, #3
 800795e:	2001      	movs	r0, #1
 8007960:	f008 f996 	bl	800fc90 <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 8007964:	4b22      	ldr	r3, [pc, #136]	; (80079f0 <v_R45+0x31c>)
 8007966:	881b      	ldrh	r3, [r3, #0]
 8007968:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800796c:	b2db      	uxtb	r3, r3
 800796e:	3301      	adds	r3, #1
 8007970:	2b00      	cmp	r3, #0
 8007972:	f003 0301 	and.w	r3, r3, #1
 8007976:	bfb8      	it	lt
 8007978:	425b      	neglt	r3, r3
 800797a:	f003 0301 	and.w	r3, r3, #1
 800797e:	b2d9      	uxtb	r1, r3
 8007980:	4a1b      	ldr	r2, [pc, #108]	; (80079f0 <v_R45+0x31c>)
 8007982:	8813      	ldrh	r3, [r2, #0]
 8007984:	f361 03c3 	bfi	r3, r1, #3, #1
 8007988:	8013      	strh	r3, [r2, #0]
		if(!MF2.FLAG.V){
 800798a:	4b19      	ldr	r3, [pc, #100]	; (80079f0 <v_R45+0x31c>)
 800798c:	881b      	ldrh	r3, [r3, #0]
 800798e:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8007992:	b2db      	uxtb	r3, r3
 8007994:	2b00      	cmp	r3, #0
 8007996:	d107      	bne.n	80079a8 <v_R45+0x2d4>
			slalomB(10000, SPEED_HIGH_HIGH, V45_4_OFFSET_VB);
 8007998:	223a      	movs	r2, #58	; 0x3a
 800799a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800799e:	f242 7010 	movw	r0, #10000	; 0x2710
 80079a2:	f7fd ff17 	bl	80057d4 <slalomB>
}
 80079a6:	e072      	b.n	8007a8e <v_R45+0x3ba>
			slalomB(10000, SPEED_HIGH_HIGH, V45_4_OFFSET_B);
 80079a8:	223a      	movs	r2, #58	; 0x3a
 80079aa:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80079ae:	f242 7010 	movw	r0, #10000	; 0x2710
 80079b2:	f7fd ff0f 	bl	80057d4 <slalomB>
}
 80079b6:	e06a      	b.n	8007a8e <v_R45+0x3ba>
	}else if(run_mode == 5){
 80079b8:	4b0c      	ldr	r3, [pc, #48]	; (80079ec <v_R45+0x318>)
 80079ba:	781b      	ldrb	r3, [r3, #0]
 80079bc:	b2db      	uxtb	r3, r3
 80079be:	2b05      	cmp	r3, #5
 80079c0:	d165      	bne.n	8007a8e <v_R45+0x3ba>
		if(!MF2.FLAG.V){
 80079c2:	4b0b      	ldr	r3, [pc, #44]	; (80079f0 <v_R45+0x31c>)
 80079c4:	881b      	ldrh	r3, [r3, #0]
 80079c6:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80079ca:	b2db      	uxtb	r3, r3
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d11d      	bne.n	8007a0c <v_R45+0x338>
			slalomF(10000, SPEED_5, V45_5_OFFSET_F, NO_WALL, NO_WALL);
 80079d0:	f241 3388 	movw	r3, #5000	; 0x1388
 80079d4:	9300      	str	r3, [sp, #0]
 80079d6:	f241 3388 	movw	r3, #5000	; 0x1388
 80079da:	2218      	movs	r2, #24
 80079dc:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 80079e0:	f242 7010 	movw	r0, #10000	; 0x2710
 80079e4:	f7fd fd58 	bl	8005498 <slalomF>
 80079e8:	e01c      	b.n	8007a24 <v_R45+0x350>
 80079ea:	bf00      	nop
 80079ec:	20000456 	.word	0x20000456
 80079f0:	20000f64 	.word	0x20000f64
 80079f4:	fffffed4 	.word	0xfffffed4
 80079f8:	fffff448 	.word	0xfffff448
 80079fc:	fffffe70 	.word	0xfffffe70
 8007a00:	ffffe0c0 	.word	0xffffe0c0
 8007a04:	fffffda8 	.word	0xfffffda8
 8007a08:	ffffd8f0 	.word	0xffffd8f0
			slalomF(10000, SPEED_5, V45_5_OFFSET_VF, NO_WALL, NO_WALL);
 8007a0c:	f241 3388 	movw	r3, #5000	; 0x1388
 8007a10:	9300      	str	r3, [sp, #0]
 8007a12:	f241 3388 	movw	r3, #5000	; 0x1388
 8007a16:	2214      	movs	r2, #20
 8007a18:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 8007a1c:	f242 7010 	movw	r0, #10000	; 0x2710
 8007a20:	f7fd fd3a 	bl	8005498 <slalomF>
		slalomR(-V45_5_DEGACCEL, -V45_5_OMEGA, -45, SPEED_5);
 8007a24:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
 8007a28:	f06f 022c 	mvn.w	r2, #44	; 0x2c
 8007a2c:	4919      	ldr	r1, [pc, #100]	; (8007a94 <v_R45+0x3c0>)
 8007a2e:	481a      	ldr	r0, [pc, #104]	; (8007a98 <v_R45+0x3c4>)
 8007a30:	f7fd fdae 	bl	8005590 <slalomR>
		turn_dir(DIR_TURN_R45_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 8007a34:	2103      	movs	r1, #3
 8007a36:	2001      	movs	r0, #1
 8007a38:	f008 f92a 	bl	800fc90 <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 8007a3c:	4b17      	ldr	r3, [pc, #92]	; (8007a9c <v_R45+0x3c8>)
 8007a3e:	881b      	ldrh	r3, [r3, #0]
 8007a40:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8007a44:	b2db      	uxtb	r3, r3
 8007a46:	3301      	adds	r3, #1
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	f003 0301 	and.w	r3, r3, #1
 8007a4e:	bfb8      	it	lt
 8007a50:	425b      	neglt	r3, r3
 8007a52:	f003 0301 	and.w	r3, r3, #1
 8007a56:	b2d9      	uxtb	r1, r3
 8007a58:	4a10      	ldr	r2, [pc, #64]	; (8007a9c <v_R45+0x3c8>)
 8007a5a:	8813      	ldrh	r3, [r2, #0]
 8007a5c:	f361 03c3 	bfi	r3, r1, #3, #1
 8007a60:	8013      	strh	r3, [r2, #0]
		if(!MF2.FLAG.V){
 8007a62:	4b0e      	ldr	r3, [pc, #56]	; (8007a9c <v_R45+0x3c8>)
 8007a64:	881b      	ldrh	r3, [r3, #0]
 8007a66:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8007a6a:	b2db      	uxtb	r3, r3
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d107      	bne.n	8007a80 <v_R45+0x3ac>
			slalomB(10000, SPEED_5, V45_5_OFFSET_VB);
 8007a70:	223a      	movs	r2, #58	; 0x3a
 8007a72:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 8007a76:	f242 7010 	movw	r0, #10000	; 0x2710
 8007a7a:	f7fd feab 	bl	80057d4 <slalomB>
}
 8007a7e:	e006      	b.n	8007a8e <v_R45+0x3ba>
			slalomB(10000, SPEED_5, V45_5_OFFSET_B);
 8007a80:	223d      	movs	r2, #61	; 0x3d
 8007a82:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 8007a86:	f242 7010 	movw	r0, #10000	; 0x2710
 8007a8a:	f7fd fea3 	bl	80057d4 <slalomB>
}
 8007a8e:	bf00      	nop
 8007a90:	46bd      	mov	sp, r7
 8007a92:	bd80      	pop	{r7, pc}
 8007a94:	fffffce0 	.word	0xfffffce0
 8007a98:	ffffc180 	.word	0xffffc180
 8007a9c:	20000f64 	.word	0x20000f64

08007aa0 <v_L45>:
//v_L45
// 区画中心から左に45度回転する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void v_L45(void){
 8007aa0:	b580      	push	{r7, lr}
 8007aa2:	b082      	sub	sp, #8
 8007aa4:	af02      	add	r7, sp, #8
	full_led_write(YELLOW);
 8007aa6:	2006      	movs	r0, #6
 8007aa8:	f009 ff86 	bl	80119b8 <full_led_write>
	if(run_mode == LOW){
 8007aac:	4bc4      	ldr	r3, [pc, #784]	; (8007dc0 <v_L45+0x320>)
 8007aae:	781b      	ldrb	r3, [r3, #0]
 8007ab0:	b2db      	uxtb	r3, r3
 8007ab2:	2b01      	cmp	r3, #1
 8007ab4:	d156      	bne.n	8007b64 <v_L45+0xc4>
		if(!MF2.FLAG.V){
 8007ab6:	4bc3      	ldr	r3, [pc, #780]	; (8007dc4 <v_L45+0x324>)
 8007ab8:	881b      	ldrh	r3, [r3, #0]
 8007aba:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8007abe:	b2db      	uxtb	r3, r3
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d10c      	bne.n	8007ade <v_L45+0x3e>
			slalomF(10000, SPEED_LOW, V45_OFFSET_F, NO_WALL, NO_WALL);
 8007ac4:	f241 3388 	movw	r3, #5000	; 0x1388
 8007ac8:	9300      	str	r3, [sp, #0]
 8007aca:	f241 3388 	movw	r3, #5000	; 0x1388
 8007ace:	2228      	movs	r2, #40	; 0x28
 8007ad0:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8007ad4:	f242 7010 	movw	r0, #10000	; 0x2710
 8007ad8:	f7fd fcde 	bl	8005498 <slalomF>
 8007adc:	e00b      	b.n	8007af6 <v_L45+0x56>
		}else{
			slalomF(10000, SPEED_LOW, V45_OFFSET_VF, NO_WALL, NO_WALL);
 8007ade:	f241 3388 	movw	r3, #5000	; 0x1388
 8007ae2:	9300      	str	r3, [sp, #0]
 8007ae4:	f241 3388 	movw	r3, #5000	; 0x1388
 8007ae8:	2255      	movs	r2, #85	; 0x55
 8007aea:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8007aee:	f242 7010 	movw	r0, #10000	; 0x2710
 8007af2:	f7fd fcd1 	bl	8005498 <slalomF>
		}
		slalomR(V45_DEGACCEL, V45_OMEGA, 45, SPEED_LOW);
 8007af6:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8007afa:	222d      	movs	r2, #45	; 0x2d
 8007afc:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8007b00:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8007b04:	f7fd fd44 	bl	8005590 <slalomR>

		turn_dir(DIR_TURN_L45_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 8007b08:	2103      	movs	r1, #3
 8007b0a:	20ff      	movs	r0, #255	; 0xff
 8007b0c:	f008 f8c0 	bl	800fc90 <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 8007b10:	4bac      	ldr	r3, [pc, #688]	; (8007dc4 <v_L45+0x324>)
 8007b12:	881b      	ldrh	r3, [r3, #0]
 8007b14:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8007b18:	b2db      	uxtb	r3, r3
 8007b1a:	3301      	adds	r3, #1
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	f003 0301 	and.w	r3, r3, #1
 8007b22:	bfb8      	it	lt
 8007b24:	425b      	neglt	r3, r3
 8007b26:	f003 0301 	and.w	r3, r3, #1
 8007b2a:	b2d9      	uxtb	r1, r3
 8007b2c:	4aa5      	ldr	r2, [pc, #660]	; (8007dc4 <v_L45+0x324>)
 8007b2e:	8813      	ldrh	r3, [r2, #0]
 8007b30:	f361 03c3 	bfi	r3, r1, #3, #1
 8007b34:	8013      	strh	r3, [r2, #0]

		if(!MF2.FLAG.V){
 8007b36:	4ba3      	ldr	r3, [pc, #652]	; (8007dc4 <v_L45+0x324>)
 8007b38:	881b      	ldrh	r3, [r3, #0]
 8007b3a:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8007b3e:	b2db      	uxtb	r3, r3
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d107      	bne.n	8007b54 <v_L45+0xb4>
			slalomB(10000, SPEED_LOW, V45_OFFSET_VB);
 8007b44:	2228      	movs	r2, #40	; 0x28
 8007b46:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8007b4a:	f242 7010 	movw	r0, #10000	; 0x2710
 8007b4e:	f7fd fe41 	bl	80057d4 <slalomB>
			slalomB(10000, SPEED_5, V45_5_OFFSET_VB);
		}else{
			slalomB(10000, SPEED_5, V45_5_OFFSET_B);
		}
	}
}
 8007b52:	e17b      	b.n	8007e4c <v_L45+0x3ac>
			slalomB(10000, SPEED_LOW, V45_OFFSET_B);
 8007b54:	2255      	movs	r2, #85	; 0x55
 8007b56:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8007b5a:	f242 7010 	movw	r0, #10000	; 0x2710
 8007b5e:	f7fd fe39 	bl	80057d4 <slalomB>
}
 8007b62:	e173      	b.n	8007e4c <v_L45+0x3ac>
	}else if(run_mode == MIDDLE){
 8007b64:	4b96      	ldr	r3, [pc, #600]	; (8007dc0 <v_L45+0x320>)
 8007b66:	781b      	ldrb	r3, [r3, #0]
 8007b68:	b2db      	uxtb	r3, r3
 8007b6a:	2b02      	cmp	r3, #2
 8007b6c:	d156      	bne.n	8007c1c <v_L45+0x17c>
		if(!MF2.FLAG.V){
 8007b6e:	4b95      	ldr	r3, [pc, #596]	; (8007dc4 <v_L45+0x324>)
 8007b70:	881b      	ldrh	r3, [r3, #0]
 8007b72:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8007b76:	b2db      	uxtb	r3, r3
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d10c      	bne.n	8007b96 <v_L45+0xf6>
			slalomF(10000, SPEED_MIDDLE, V45_2_OFFSET_F, NO_WALL, NO_WALL);
 8007b7c:	f241 3388 	movw	r3, #5000	; 0x1388
 8007b80:	9300      	str	r3, [sp, #0]
 8007b82:	f241 3388 	movw	r3, #5000	; 0x1388
 8007b86:	2228      	movs	r2, #40	; 0x28
 8007b88:	f44f 7116 	mov.w	r1, #600	; 0x258
 8007b8c:	f242 7010 	movw	r0, #10000	; 0x2710
 8007b90:	f7fd fc82 	bl	8005498 <slalomF>
 8007b94:	e00b      	b.n	8007bae <v_L45+0x10e>
			slalomF(10000, SPEED_MIDDLE, V45_2_OFFSET_VF, NO_WALL, NO_WALL);
 8007b96:	f241 3388 	movw	r3, #5000	; 0x1388
 8007b9a:	9300      	str	r3, [sp, #0]
 8007b9c:	f241 3388 	movw	r3, #5000	; 0x1388
 8007ba0:	2249      	movs	r2, #73	; 0x49
 8007ba2:	f44f 7116 	mov.w	r1, #600	; 0x258
 8007ba6:	f242 7010 	movw	r0, #10000	; 0x2710
 8007baa:	f7fd fc75 	bl	8005498 <slalomF>
		slalomR(V45_2_DEGACCEL, V45_2_OMEGA, 45, SPEED_MIDDLE);
 8007bae:	f44f 7316 	mov.w	r3, #600	; 0x258
 8007bb2:	222d      	movs	r2, #45	; 0x2d
 8007bb4:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8007bb8:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 8007bbc:	f7fd fce8 	bl	8005590 <slalomR>
		turn_dir(DIR_TURN_L45_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 8007bc0:	2103      	movs	r1, #3
 8007bc2:	20ff      	movs	r0, #255	; 0xff
 8007bc4:	f008 f864 	bl	800fc90 <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 8007bc8:	4b7e      	ldr	r3, [pc, #504]	; (8007dc4 <v_L45+0x324>)
 8007bca:	881b      	ldrh	r3, [r3, #0]
 8007bcc:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8007bd0:	b2db      	uxtb	r3, r3
 8007bd2:	3301      	adds	r3, #1
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	f003 0301 	and.w	r3, r3, #1
 8007bda:	bfb8      	it	lt
 8007bdc:	425b      	neglt	r3, r3
 8007bde:	f003 0301 	and.w	r3, r3, #1
 8007be2:	b2d9      	uxtb	r1, r3
 8007be4:	4a77      	ldr	r2, [pc, #476]	; (8007dc4 <v_L45+0x324>)
 8007be6:	8813      	ldrh	r3, [r2, #0]
 8007be8:	f361 03c3 	bfi	r3, r1, #3, #1
 8007bec:	8013      	strh	r3, [r2, #0]
		if(!MF2.FLAG.V){
 8007bee:	4b75      	ldr	r3, [pc, #468]	; (8007dc4 <v_L45+0x324>)
 8007bf0:	881b      	ldrh	r3, [r3, #0]
 8007bf2:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8007bf6:	b2db      	uxtb	r3, r3
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d107      	bne.n	8007c0c <v_L45+0x16c>
			slalomB(10000, SPEED_MIDDLE, V45_2_OFFSET_VB);
 8007bfc:	2237      	movs	r2, #55	; 0x37
 8007bfe:	f44f 7116 	mov.w	r1, #600	; 0x258
 8007c02:	f242 7010 	movw	r0, #10000	; 0x2710
 8007c06:	f7fd fde5 	bl	80057d4 <slalomB>
}
 8007c0a:	e11f      	b.n	8007e4c <v_L45+0x3ac>
			slalomB(10000, SPEED_MIDDLE, V45_2_OFFSET_B);
 8007c0c:	225d      	movs	r2, #93	; 0x5d
 8007c0e:	f44f 7116 	mov.w	r1, #600	; 0x258
 8007c12:	f242 7010 	movw	r0, #10000	; 0x2710
 8007c16:	f7fd fddd 	bl	80057d4 <slalomB>
}
 8007c1a:	e117      	b.n	8007e4c <v_L45+0x3ac>
	}else if(run_mode == HIGH){
 8007c1c:	4b68      	ldr	r3, [pc, #416]	; (8007dc0 <v_L45+0x320>)
 8007c1e:	781b      	ldrb	r3, [r3, #0]
 8007c20:	b2db      	uxtb	r3, r3
 8007c22:	2b03      	cmp	r3, #3
 8007c24:	d156      	bne.n	8007cd4 <v_L45+0x234>
		if(!MF2.FLAG.V){
 8007c26:	4b67      	ldr	r3, [pc, #412]	; (8007dc4 <v_L45+0x324>)
 8007c28:	881b      	ldrh	r3, [r3, #0]
 8007c2a:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8007c2e:	b2db      	uxtb	r3, r3
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d10c      	bne.n	8007c4e <v_L45+0x1ae>
			slalomF(10000, SPEED_HIGH, V45_3_OFFSET_F+5, NO_WALL, NO_WALL);
 8007c34:	f241 3388 	movw	r3, #5000	; 0x1388
 8007c38:	9300      	str	r3, [sp, #0]
 8007c3a:	f241 3388 	movw	r3, #5000	; 0x1388
 8007c3e:	221c      	movs	r2, #28
 8007c40:	f44f 7148 	mov.w	r1, #800	; 0x320
 8007c44:	f242 7010 	movw	r0, #10000	; 0x2710
 8007c48:	f7fd fc26 	bl	8005498 <slalomF>
 8007c4c:	e00b      	b.n	8007c66 <v_L45+0x1c6>
			slalomF(10000, SPEED_HIGH, V45_3_OFFSET_VF, NO_WALL, NO_WALL);
 8007c4e:	f241 3388 	movw	r3, #5000	; 0x1388
 8007c52:	9300      	str	r3, [sp, #0]
 8007c54:	f241 3388 	movw	r3, #5000	; 0x1388
 8007c58:	2237      	movs	r2, #55	; 0x37
 8007c5a:	f44f 7148 	mov.w	r1, #800	; 0x320
 8007c5e:	f242 7010 	movw	r0, #10000	; 0x2710
 8007c62:	f7fd fc19 	bl	8005498 <slalomF>
		slalomR(V45_3_DEGACCEL, V45_3_OMEGA, 45, SPEED_HIGH);
 8007c66:	f44f 7348 	mov.w	r3, #800	; 0x320
 8007c6a:	222d      	movs	r2, #45	; 0x2d
 8007c6c:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8007c70:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 8007c74:	f7fd fc8c 	bl	8005590 <slalomR>
		turn_dir(DIR_TURN_L45_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 8007c78:	2103      	movs	r1, #3
 8007c7a:	20ff      	movs	r0, #255	; 0xff
 8007c7c:	f008 f808 	bl	800fc90 <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 8007c80:	4b50      	ldr	r3, [pc, #320]	; (8007dc4 <v_L45+0x324>)
 8007c82:	881b      	ldrh	r3, [r3, #0]
 8007c84:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8007c88:	b2db      	uxtb	r3, r3
 8007c8a:	3301      	adds	r3, #1
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	f003 0301 	and.w	r3, r3, #1
 8007c92:	bfb8      	it	lt
 8007c94:	425b      	neglt	r3, r3
 8007c96:	f003 0301 	and.w	r3, r3, #1
 8007c9a:	b2d9      	uxtb	r1, r3
 8007c9c:	4a49      	ldr	r2, [pc, #292]	; (8007dc4 <v_L45+0x324>)
 8007c9e:	8813      	ldrh	r3, [r2, #0]
 8007ca0:	f361 03c3 	bfi	r3, r1, #3, #1
 8007ca4:	8013      	strh	r3, [r2, #0]
		if(!MF2.FLAG.V){
 8007ca6:	4b47      	ldr	r3, [pc, #284]	; (8007dc4 <v_L45+0x324>)
 8007ca8:	881b      	ldrh	r3, [r3, #0]
 8007caa:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8007cae:	b2db      	uxtb	r3, r3
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d107      	bne.n	8007cc4 <v_L45+0x224>
			slalomB(10000, SPEED_HIGH, V45_3_OFFSET_VB);
 8007cb4:	2233      	movs	r2, #51	; 0x33
 8007cb6:	f44f 7148 	mov.w	r1, #800	; 0x320
 8007cba:	f242 7010 	movw	r0, #10000	; 0x2710
 8007cbe:	f7fd fd89 	bl	80057d4 <slalomB>
}
 8007cc2:	e0c3      	b.n	8007e4c <v_L45+0x3ac>
			slalomB(10000, SPEED_HIGH, V45_3_OFFSET_B);
 8007cc4:	224b      	movs	r2, #75	; 0x4b
 8007cc6:	f44f 7148 	mov.w	r1, #800	; 0x320
 8007cca:	f242 7010 	movw	r0, #10000	; 0x2710
 8007cce:	f7fd fd81 	bl	80057d4 <slalomB>
}
 8007cd2:	e0bb      	b.n	8007e4c <v_L45+0x3ac>
	}else if(run_mode == HIGH_HIGH){
 8007cd4:	4b3a      	ldr	r3, [pc, #232]	; (8007dc0 <v_L45+0x320>)
 8007cd6:	781b      	ldrb	r3, [r3, #0]
 8007cd8:	b2db      	uxtb	r3, r3
 8007cda:	2b04      	cmp	r3, #4
 8007cdc:	d156      	bne.n	8007d8c <v_L45+0x2ec>
		if(!MF2.FLAG.V){
 8007cde:	4b39      	ldr	r3, [pc, #228]	; (8007dc4 <v_L45+0x324>)
 8007ce0:	881b      	ldrh	r3, [r3, #0]
 8007ce2:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8007ce6:	b2db      	uxtb	r3, r3
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d10c      	bne.n	8007d06 <v_L45+0x266>
			slalomF(10000, SPEED_HIGH_HIGH, V45_4_OFFSET_F, NO_WALL, NO_WALL);
 8007cec:	f241 3388 	movw	r3, #5000	; 0x1388
 8007cf0:	9300      	str	r3, [sp, #0]
 8007cf2:	f241 3388 	movw	r3, #5000	; 0x1388
 8007cf6:	2214      	movs	r2, #20
 8007cf8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8007cfc:	f242 7010 	movw	r0, #10000	; 0x2710
 8007d00:	f7fd fbca 	bl	8005498 <slalomF>
 8007d04:	e00b      	b.n	8007d1e <v_L45+0x27e>
			slalomF(10000, SPEED_HIGH_HIGH, V45_4_OFFSET_VF, NO_WALL, NO_WALL);
 8007d06:	f241 3388 	movw	r3, #5000	; 0x1388
 8007d0a:	9300      	str	r3, [sp, #0]
 8007d0c:	f241 3388 	movw	r3, #5000	; 0x1388
 8007d10:	2214      	movs	r2, #20
 8007d12:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8007d16:	f242 7010 	movw	r0, #10000	; 0x2710
 8007d1a:	f7fd fbbd 	bl	8005498 <slalomF>
		slalomR(V45_4_DEGACCEL, V45_4_OMEGA, 45, SPEED_HIGH_HIGH);
 8007d1e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007d22:	222d      	movs	r2, #45	; 0x2d
 8007d24:	f44f 7116 	mov.w	r1, #600	; 0x258
 8007d28:	f242 7010 	movw	r0, #10000	; 0x2710
 8007d2c:	f7fd fc30 	bl	8005590 <slalomR>
		turn_dir(DIR_TURN_L45_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 8007d30:	2103      	movs	r1, #3
 8007d32:	20ff      	movs	r0, #255	; 0xff
 8007d34:	f007 ffac 	bl	800fc90 <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 8007d38:	4b22      	ldr	r3, [pc, #136]	; (8007dc4 <v_L45+0x324>)
 8007d3a:	881b      	ldrh	r3, [r3, #0]
 8007d3c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8007d40:	b2db      	uxtb	r3, r3
 8007d42:	3301      	adds	r3, #1
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	f003 0301 	and.w	r3, r3, #1
 8007d4a:	bfb8      	it	lt
 8007d4c:	425b      	neglt	r3, r3
 8007d4e:	f003 0301 	and.w	r3, r3, #1
 8007d52:	b2d9      	uxtb	r1, r3
 8007d54:	4a1b      	ldr	r2, [pc, #108]	; (8007dc4 <v_L45+0x324>)
 8007d56:	8813      	ldrh	r3, [r2, #0]
 8007d58:	f361 03c3 	bfi	r3, r1, #3, #1
 8007d5c:	8013      	strh	r3, [r2, #0]
		if(!MF2.FLAG.V){
 8007d5e:	4b19      	ldr	r3, [pc, #100]	; (8007dc4 <v_L45+0x324>)
 8007d60:	881b      	ldrh	r3, [r3, #0]
 8007d62:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8007d66:	b2db      	uxtb	r3, r3
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d107      	bne.n	8007d7c <v_L45+0x2dc>
			slalomB(10000, SPEED_HIGH_HIGH, V45_4_OFFSET_VB);
 8007d6c:	223a      	movs	r2, #58	; 0x3a
 8007d6e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8007d72:	f242 7010 	movw	r0, #10000	; 0x2710
 8007d76:	f7fd fd2d 	bl	80057d4 <slalomB>
}
 8007d7a:	e067      	b.n	8007e4c <v_L45+0x3ac>
			slalomB(10000, SPEED_HIGH_HIGH, V45_4_OFFSET_B);
 8007d7c:	223a      	movs	r2, #58	; 0x3a
 8007d7e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8007d82:	f242 7010 	movw	r0, #10000	; 0x2710
 8007d86:	f7fd fd25 	bl	80057d4 <slalomB>
}
 8007d8a:	e05f      	b.n	8007e4c <v_L45+0x3ac>
	}else if(run_mode == 5){
 8007d8c:	4b0c      	ldr	r3, [pc, #48]	; (8007dc0 <v_L45+0x320>)
 8007d8e:	781b      	ldrb	r3, [r3, #0]
 8007d90:	b2db      	uxtb	r3, r3
 8007d92:	2b05      	cmp	r3, #5
 8007d94:	d15a      	bne.n	8007e4c <v_L45+0x3ac>
		if(!MF2.FLAG.V){
 8007d96:	4b0b      	ldr	r3, [pc, #44]	; (8007dc4 <v_L45+0x324>)
 8007d98:	881b      	ldrh	r3, [r3, #0]
 8007d9a:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8007d9e:	b2db      	uxtb	r3, r3
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d111      	bne.n	8007dc8 <v_L45+0x328>
			slalomF(10000, SPEED_5, V45_5_OFFSET_F, NO_WALL, NO_WALL);
 8007da4:	f241 3388 	movw	r3, #5000	; 0x1388
 8007da8:	9300      	str	r3, [sp, #0]
 8007daa:	f241 3388 	movw	r3, #5000	; 0x1388
 8007dae:	2218      	movs	r2, #24
 8007db0:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 8007db4:	f242 7010 	movw	r0, #10000	; 0x2710
 8007db8:	f7fd fb6e 	bl	8005498 <slalomF>
 8007dbc:	e010      	b.n	8007de0 <v_L45+0x340>
 8007dbe:	bf00      	nop
 8007dc0:	20000456 	.word	0x20000456
 8007dc4:	20000f64 	.word	0x20000f64
			slalomF(10000, SPEED_5, V45_5_OFFSET_VF, NO_WALL, NO_WALL);
 8007dc8:	f241 3388 	movw	r3, #5000	; 0x1388
 8007dcc:	9300      	str	r3, [sp, #0]
 8007dce:	f241 3388 	movw	r3, #5000	; 0x1388
 8007dd2:	2214      	movs	r2, #20
 8007dd4:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 8007dd8:	f242 7010 	movw	r0, #10000	; 0x2710
 8007ddc:	f7fd fb5c 	bl	8005498 <slalomF>
		slalomR(V45_5_DEGACCEL, V45_5_OMEGA, 45, SPEED_5);
 8007de0:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
 8007de4:	222d      	movs	r2, #45	; 0x2d
 8007de6:	f44f 7148 	mov.w	r1, #800	; 0x320
 8007dea:	f44f 507a 	mov.w	r0, #16000	; 0x3e80
 8007dee:	f7fd fbcf 	bl	8005590 <slalomR>
		turn_dir(DIR_TURN_L45_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 8007df2:	2103      	movs	r1, #3
 8007df4:	20ff      	movs	r0, #255	; 0xff
 8007df6:	f007 ff4b 	bl	800fc90 <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 8007dfa:	4b16      	ldr	r3, [pc, #88]	; (8007e54 <v_L45+0x3b4>)
 8007dfc:	881b      	ldrh	r3, [r3, #0]
 8007dfe:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8007e02:	b2db      	uxtb	r3, r3
 8007e04:	3301      	adds	r3, #1
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	f003 0301 	and.w	r3, r3, #1
 8007e0c:	bfb8      	it	lt
 8007e0e:	425b      	neglt	r3, r3
 8007e10:	f003 0301 	and.w	r3, r3, #1
 8007e14:	b2d9      	uxtb	r1, r3
 8007e16:	4a0f      	ldr	r2, [pc, #60]	; (8007e54 <v_L45+0x3b4>)
 8007e18:	8813      	ldrh	r3, [r2, #0]
 8007e1a:	f361 03c3 	bfi	r3, r1, #3, #1
 8007e1e:	8013      	strh	r3, [r2, #0]
		if(!MF2.FLAG.V){
 8007e20:	4b0c      	ldr	r3, [pc, #48]	; (8007e54 <v_L45+0x3b4>)
 8007e22:	881b      	ldrh	r3, [r3, #0]
 8007e24:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8007e28:	b2db      	uxtb	r3, r3
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d107      	bne.n	8007e3e <v_L45+0x39e>
			slalomB(10000, SPEED_5, V45_5_OFFSET_VB);
 8007e2e:	223a      	movs	r2, #58	; 0x3a
 8007e30:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 8007e34:	f242 7010 	movw	r0, #10000	; 0x2710
 8007e38:	f7fd fccc 	bl	80057d4 <slalomB>
}
 8007e3c:	e006      	b.n	8007e4c <v_L45+0x3ac>
			slalomB(10000, SPEED_5, V45_5_OFFSET_B);
 8007e3e:	223d      	movs	r2, #61	; 0x3d
 8007e40:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 8007e44:	f242 7010 	movw	r0, #10000	; 0x2710
 8007e48:	f7fd fcc4 	bl	80057d4 <slalomB>
}
 8007e4c:	bf00      	nop
 8007e4e:	46bd      	mov	sp, r7
 8007e50:	bd80      	pop	{r7, pc}
 8007e52:	bf00      	nop
 8007e54:	20000f64 	.word	0x20000f64

08007e58 <v_R45D>:
//v_R45D
//a区画中心から右に45度回転する　ゴール用
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void v_R45D(void){
 8007e58:	b580      	push	{r7, lr}
 8007e5a:	b082      	sub	sp, #8
 8007e5c:	af02      	add	r7, sp, #8
	full_led_write(PURPLE);
 8007e5e:	2005      	movs	r0, #5
 8007e60:	f009 fdaa 	bl	80119b8 <full_led_write>
	if(run_mode == LOW){
 8007e64:	4b9e      	ldr	r3, [pc, #632]	; (80080e0 <v_R45D+0x288>)
 8007e66:	781b      	ldrb	r3, [r3, #0]
 8007e68:	b2db      	uxtb	r3, r3
 8007e6a:	2b01      	cmp	r3, #1
 8007e6c:	d139      	bne.n	8007ee2 <v_R45D+0x8a>
		slalomF(10000, SPEED_LOW, V45_OFFSET_VF, NO_WALL, NO_WALL);
 8007e6e:	f241 3388 	movw	r3, #5000	; 0x1388
 8007e72:	9300      	str	r3, [sp, #0]
 8007e74:	f241 3388 	movw	r3, #5000	; 0x1388
 8007e78:	2255      	movs	r2, #85	; 0x55
 8007e7a:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8007e7e:	f242 7010 	movw	r0, #10000	; 0x2710
 8007e82:	f7fd fb09 	bl	8005498 <slalomF>
		slalomR(-V45_DEGACCEL, -V45_OMEGA, -45, SPEED_LOW);
 8007e86:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8007e8a:	f06f 022c 	mvn.w	r2, #44	; 0x2c
 8007e8e:	4995      	ldr	r1, [pc, #596]	; (80080e4 <v_R45D+0x28c>)
 8007e90:	4895      	ldr	r0, [pc, #596]	; (80080e8 <v_R45D+0x290>)
 8007e92:	f7fd fb7d 	bl	8005590 <slalomR>

		turn_dir(DIR_TURN_R45_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 8007e96:	2103      	movs	r1, #3
 8007e98:	2001      	movs	r0, #1
 8007e9a:	f007 fef9 	bl	800fc90 <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 8007e9e:	4b93      	ldr	r3, [pc, #588]	; (80080ec <v_R45D+0x294>)
 8007ea0:	881b      	ldrh	r3, [r3, #0]
 8007ea2:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8007ea6:	b2db      	uxtb	r3, r3
 8007ea8:	3301      	adds	r3, #1
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	f003 0301 	and.w	r3, r3, #1
 8007eb0:	bfb8      	it	lt
 8007eb2:	425b      	neglt	r3, r3
 8007eb4:	f003 0301 	and.w	r3, r3, #1
 8007eb8:	b2d9      	uxtb	r1, r3
 8007eba:	4a8c      	ldr	r2, [pc, #560]	; (80080ec <v_R45D+0x294>)
 8007ebc:	8813      	ldrh	r3, [r2, #0]
 8007ebe:	f361 03c3 	bfi	r3, r1, #3, #1
 8007ec2:	8013      	strh	r3, [r2, #0]

		slalomB(10000, SPEED_LOW, V45_OFFSET_VB-30);
 8007ec4:	220a      	movs	r2, #10
 8007ec6:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8007eca:	f242 7010 	movw	r0, #10000	; 0x2710
 8007ece:	f7fd fc81 	bl	80057d4 <slalomB>
		driveD(-30000, SPEED_MIN, SPEED_LOW, 30);
 8007ed2:	231e      	movs	r3, #30
 8007ed4:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8007ed8:	211e      	movs	r1, #30
 8007eda:	4885      	ldr	r0, [pc, #532]	; (80080f0 <v_R45D+0x298>)
 8007edc:	f7fd f904 	bl	80050e8 <driveD>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;

		slalomB(10000, SPEED_5, V45_5_OFFSET_VB-30);
		driveD(-30000, SPEED_MIN, SPEED_5, 30);
	}
}
 8007ee0:	e0fa      	b.n	80080d8 <v_R45D+0x280>
	}else if(run_mode == MIDDLE){
 8007ee2:	4b7f      	ldr	r3, [pc, #508]	; (80080e0 <v_R45D+0x288>)
 8007ee4:	781b      	ldrb	r3, [r3, #0]
 8007ee6:	b2db      	uxtb	r3, r3
 8007ee8:	2b02      	cmp	r3, #2
 8007eea:	d139      	bne.n	8007f60 <v_R45D+0x108>
		slalomF(10000, SPEED_MIDDLE, V45_2_OFFSET_VF, NO_WALL, NO_WALL);
 8007eec:	f241 3388 	movw	r3, #5000	; 0x1388
 8007ef0:	9300      	str	r3, [sp, #0]
 8007ef2:	f241 3388 	movw	r3, #5000	; 0x1388
 8007ef6:	2249      	movs	r2, #73	; 0x49
 8007ef8:	f44f 7116 	mov.w	r1, #600	; 0x258
 8007efc:	f242 7010 	movw	r0, #10000	; 0x2710
 8007f00:	f7fd faca 	bl	8005498 <slalomF>
		slalomR(-V45_2_DEGACCEL, -V45_2_OMEGA, -45, SPEED_MIDDLE);
 8007f04:	f44f 7316 	mov.w	r3, #600	; 0x258
 8007f08:	f06f 022c 	mvn.w	r2, #44	; 0x2c
 8007f0c:	4979      	ldr	r1, [pc, #484]	; (80080f4 <v_R45D+0x29c>)
 8007f0e:	487a      	ldr	r0, [pc, #488]	; (80080f8 <v_R45D+0x2a0>)
 8007f10:	f7fd fb3e 	bl	8005590 <slalomR>
		turn_dir(DIR_TURN_R45_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 8007f14:	2103      	movs	r1, #3
 8007f16:	2001      	movs	r0, #1
 8007f18:	f007 feba 	bl	800fc90 <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 8007f1c:	4b73      	ldr	r3, [pc, #460]	; (80080ec <v_R45D+0x294>)
 8007f1e:	881b      	ldrh	r3, [r3, #0]
 8007f20:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8007f24:	b2db      	uxtb	r3, r3
 8007f26:	3301      	adds	r3, #1
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	f003 0301 	and.w	r3, r3, #1
 8007f2e:	bfb8      	it	lt
 8007f30:	425b      	neglt	r3, r3
 8007f32:	f003 0301 	and.w	r3, r3, #1
 8007f36:	b2d9      	uxtb	r1, r3
 8007f38:	4a6c      	ldr	r2, [pc, #432]	; (80080ec <v_R45D+0x294>)
 8007f3a:	8813      	ldrh	r3, [r2, #0]
 8007f3c:	f361 03c3 	bfi	r3, r1, #3, #1
 8007f40:	8013      	strh	r3, [r2, #0]
		slalomB(10000, SPEED_MIDDLE, V45_2_OFFSET_VB-30);
 8007f42:	2219      	movs	r2, #25
 8007f44:	f44f 7116 	mov.w	r1, #600	; 0x258
 8007f48:	f242 7010 	movw	r0, #10000	; 0x2710
 8007f4c:	f7fd fc42 	bl	80057d4 <slalomB>
		driveD(-30000, SPEED_MIN, SPEED_MIDDLE, 30);
 8007f50:	231e      	movs	r3, #30
 8007f52:	f44f 7216 	mov.w	r2, #600	; 0x258
 8007f56:	211e      	movs	r1, #30
 8007f58:	4865      	ldr	r0, [pc, #404]	; (80080f0 <v_R45D+0x298>)
 8007f5a:	f7fd f8c5 	bl	80050e8 <driveD>
}
 8007f5e:	e0bb      	b.n	80080d8 <v_R45D+0x280>
	}else if(run_mode == HIGH){
 8007f60:	4b5f      	ldr	r3, [pc, #380]	; (80080e0 <v_R45D+0x288>)
 8007f62:	781b      	ldrb	r3, [r3, #0]
 8007f64:	b2db      	uxtb	r3, r3
 8007f66:	2b03      	cmp	r3, #3
 8007f68:	d139      	bne.n	8007fde <v_R45D+0x186>
		slalomF(10000, SPEED_HIGH, V45_3_OFFSET_VF, NO_WALL, NO_WALL);
 8007f6a:	f241 3388 	movw	r3, #5000	; 0x1388
 8007f6e:	9300      	str	r3, [sp, #0]
 8007f70:	f241 3388 	movw	r3, #5000	; 0x1388
 8007f74:	2237      	movs	r2, #55	; 0x37
 8007f76:	f44f 7148 	mov.w	r1, #800	; 0x320
 8007f7a:	f242 7010 	movw	r0, #10000	; 0x2710
 8007f7e:	f7fd fa8b 	bl	8005498 <slalomF>
		slalomR(-V45_3_DEGACCEL, -V45_3_OMEGA, -45, SPEED_HIGH);
 8007f82:	f44f 7348 	mov.w	r3, #800	; 0x320
 8007f86:	f06f 022c 	mvn.w	r2, #44	; 0x2c
 8007f8a:	495a      	ldr	r1, [pc, #360]	; (80080f4 <v_R45D+0x29c>)
 8007f8c:	485a      	ldr	r0, [pc, #360]	; (80080f8 <v_R45D+0x2a0>)
 8007f8e:	f7fd faff 	bl	8005590 <slalomR>
		turn_dir(DIR_TURN_R45_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 8007f92:	2103      	movs	r1, #3
 8007f94:	2001      	movs	r0, #1
 8007f96:	f007 fe7b 	bl	800fc90 <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 8007f9a:	4b54      	ldr	r3, [pc, #336]	; (80080ec <v_R45D+0x294>)
 8007f9c:	881b      	ldrh	r3, [r3, #0]
 8007f9e:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8007fa2:	b2db      	uxtb	r3, r3
 8007fa4:	3301      	adds	r3, #1
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	f003 0301 	and.w	r3, r3, #1
 8007fac:	bfb8      	it	lt
 8007fae:	425b      	neglt	r3, r3
 8007fb0:	f003 0301 	and.w	r3, r3, #1
 8007fb4:	b2d9      	uxtb	r1, r3
 8007fb6:	4a4d      	ldr	r2, [pc, #308]	; (80080ec <v_R45D+0x294>)
 8007fb8:	8813      	ldrh	r3, [r2, #0]
 8007fba:	f361 03c3 	bfi	r3, r1, #3, #1
 8007fbe:	8013      	strh	r3, [r2, #0]
		slalomB(10000, SPEED_HIGH, V45_3_OFFSET_VB-30);
 8007fc0:	2215      	movs	r2, #21
 8007fc2:	f44f 7148 	mov.w	r1, #800	; 0x320
 8007fc6:	f242 7010 	movw	r0, #10000	; 0x2710
 8007fca:	f7fd fc03 	bl	80057d4 <slalomB>
		driveD(-30000, SPEED_MIN, SPEED_HIGH, 30);
 8007fce:	231e      	movs	r3, #30
 8007fd0:	f44f 7248 	mov.w	r2, #800	; 0x320
 8007fd4:	211e      	movs	r1, #30
 8007fd6:	4846      	ldr	r0, [pc, #280]	; (80080f0 <v_R45D+0x298>)
 8007fd8:	f7fd f886 	bl	80050e8 <driveD>
}
 8007fdc:	e07c      	b.n	80080d8 <v_R45D+0x280>
	}else if(run_mode == HIGH_HIGH){
 8007fde:	4b40      	ldr	r3, [pc, #256]	; (80080e0 <v_R45D+0x288>)
 8007fe0:	781b      	ldrb	r3, [r3, #0]
 8007fe2:	b2db      	uxtb	r3, r3
 8007fe4:	2b04      	cmp	r3, #4
 8007fe6:	d139      	bne.n	800805c <v_R45D+0x204>
		slalomF(10000, SPEED_HIGH_HIGH, V45_4_OFFSET_VF, NO_WALL, NO_WALL);
 8007fe8:	f241 3388 	movw	r3, #5000	; 0x1388
 8007fec:	9300      	str	r3, [sp, #0]
 8007fee:	f241 3388 	movw	r3, #5000	; 0x1388
 8007ff2:	2214      	movs	r2, #20
 8007ff4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8007ff8:	f242 7010 	movw	r0, #10000	; 0x2710
 8007ffc:	f7fd fa4c 	bl	8005498 <slalomF>
		slalomR(-V45_4_DEGACCEL, -V45_4_OMEGA, -45, SPEED_HIGH_HIGH);
 8008000:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008004:	f06f 022c 	mvn.w	r2, #44	; 0x2c
 8008008:	493c      	ldr	r1, [pc, #240]	; (80080fc <v_R45D+0x2a4>)
 800800a:	483d      	ldr	r0, [pc, #244]	; (8008100 <v_R45D+0x2a8>)
 800800c:	f7fd fac0 	bl	8005590 <slalomR>
		turn_dir(DIR_TURN_R45_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 8008010:	2103      	movs	r1, #3
 8008012:	2001      	movs	r0, #1
 8008014:	f007 fe3c 	bl	800fc90 <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 8008018:	4b34      	ldr	r3, [pc, #208]	; (80080ec <v_R45D+0x294>)
 800801a:	881b      	ldrh	r3, [r3, #0]
 800801c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8008020:	b2db      	uxtb	r3, r3
 8008022:	3301      	adds	r3, #1
 8008024:	2b00      	cmp	r3, #0
 8008026:	f003 0301 	and.w	r3, r3, #1
 800802a:	bfb8      	it	lt
 800802c:	425b      	neglt	r3, r3
 800802e:	f003 0301 	and.w	r3, r3, #1
 8008032:	b2d9      	uxtb	r1, r3
 8008034:	4a2d      	ldr	r2, [pc, #180]	; (80080ec <v_R45D+0x294>)
 8008036:	8813      	ldrh	r3, [r2, #0]
 8008038:	f361 03c3 	bfi	r3, r1, #3, #1
 800803c:	8013      	strh	r3, [r2, #0]
		slalomB(10000, SPEED_HIGH_HIGH, V45_4_OFFSET_VB-30);
 800803e:	221c      	movs	r2, #28
 8008040:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8008044:	f242 7010 	movw	r0, #10000	; 0x2710
 8008048:	f7fd fbc4 	bl	80057d4 <slalomB>
		driveD(-30000, SPEED_MIN, SPEED_HIGH_HIGH, 30);
 800804c:	231e      	movs	r3, #30
 800804e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008052:	211e      	movs	r1, #30
 8008054:	4826      	ldr	r0, [pc, #152]	; (80080f0 <v_R45D+0x298>)
 8008056:	f7fd f847 	bl	80050e8 <driveD>
}
 800805a:	e03d      	b.n	80080d8 <v_R45D+0x280>
	}else if(run_mode == 5){
 800805c:	4b20      	ldr	r3, [pc, #128]	; (80080e0 <v_R45D+0x288>)
 800805e:	781b      	ldrb	r3, [r3, #0]
 8008060:	b2db      	uxtb	r3, r3
 8008062:	2b05      	cmp	r3, #5
 8008064:	d138      	bne.n	80080d8 <v_R45D+0x280>
		slalomF(10000, SPEED_5, V45_5_OFFSET_VF, NO_WALL, NO_WALL);
 8008066:	f241 3388 	movw	r3, #5000	; 0x1388
 800806a:	9300      	str	r3, [sp, #0]
 800806c:	f241 3388 	movw	r3, #5000	; 0x1388
 8008070:	2214      	movs	r2, #20
 8008072:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 8008076:	f242 7010 	movw	r0, #10000	; 0x2710
 800807a:	f7fd fa0d 	bl	8005498 <slalomF>
		slalomR(-V45_5_DEGACCEL, -V45_5_OMEGA, -45, SPEED_5);
 800807e:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
 8008082:	f06f 022c 	mvn.w	r2, #44	; 0x2c
 8008086:	491f      	ldr	r1, [pc, #124]	; (8008104 <v_R45D+0x2ac>)
 8008088:	481f      	ldr	r0, [pc, #124]	; (8008108 <v_R45D+0x2b0>)
 800808a:	f7fd fa81 	bl	8005590 <slalomR>
		turn_dir(DIR_TURN_R45_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 800808e:	2103      	movs	r1, #3
 8008090:	2001      	movs	r0, #1
 8008092:	f007 fdfd 	bl	800fc90 <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 8008096:	4b15      	ldr	r3, [pc, #84]	; (80080ec <v_R45D+0x294>)
 8008098:	881b      	ldrh	r3, [r3, #0]
 800809a:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800809e:	b2db      	uxtb	r3, r3
 80080a0:	3301      	adds	r3, #1
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	f003 0301 	and.w	r3, r3, #1
 80080a8:	bfb8      	it	lt
 80080aa:	425b      	neglt	r3, r3
 80080ac:	f003 0301 	and.w	r3, r3, #1
 80080b0:	b2d9      	uxtb	r1, r3
 80080b2:	4a0e      	ldr	r2, [pc, #56]	; (80080ec <v_R45D+0x294>)
 80080b4:	8813      	ldrh	r3, [r2, #0]
 80080b6:	f361 03c3 	bfi	r3, r1, #3, #1
 80080ba:	8013      	strh	r3, [r2, #0]
		slalomB(10000, SPEED_5, V45_5_OFFSET_VB-30);
 80080bc:	221c      	movs	r2, #28
 80080be:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 80080c2:	f242 7010 	movw	r0, #10000	; 0x2710
 80080c6:	f7fd fb85 	bl	80057d4 <slalomB>
		driveD(-30000, SPEED_MIN, SPEED_5, 30);
 80080ca:	231e      	movs	r3, #30
 80080cc:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 80080d0:	211e      	movs	r1, #30
 80080d2:	4807      	ldr	r0, [pc, #28]	; (80080f0 <v_R45D+0x298>)
 80080d4:	f7fd f808 	bl	80050e8 <driveD>
}
 80080d8:	bf00      	nop
 80080da:	46bd      	mov	sp, r7
 80080dc:	bd80      	pop	{r7, pc}
 80080de:	bf00      	nop
 80080e0:	20000456 	.word	0x20000456
 80080e4:	fffffed4 	.word	0xfffffed4
 80080e8:	fffff448 	.word	0xfffff448
 80080ec:	20000f64 	.word	0x20000f64
 80080f0:	ffff8ad0 	.word	0xffff8ad0
 80080f4:	fffffe70 	.word	0xfffffe70
 80080f8:	ffffe0c0 	.word	0xffffe0c0
 80080fc:	fffffda8 	.word	0xfffffda8
 8008100:	ffffd8f0 	.word	0xffffd8f0
 8008104:	fffffce0 	.word	0xfffffce0
 8008108:	ffffc180 	.word	0xffffc180

0800810c <v_L45D>:
//v_L45D
//a区画中心から左に45度回転する　ゴール用
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void v_L45D(void){
 800810c:	b580      	push	{r7, lr}
 800810e:	b082      	sub	sp, #8
 8008110:	af02      	add	r7, sp, #8
	full_led_write(YELLOW);
 8008112:	2006      	movs	r0, #6
 8008114:	f009 fc50 	bl	80119b8 <full_led_write>
	if(run_mode == LOW){
 8008118:	4ba0      	ldr	r3, [pc, #640]	; (800839c <v_L45D+0x290>)
 800811a:	781b      	ldrb	r3, [r3, #0]
 800811c:	b2db      	uxtb	r3, r3
 800811e:	2b01      	cmp	r3, #1
 8008120:	d13a      	bne.n	8008198 <v_L45D+0x8c>
		slalomF(10000, SPEED_LOW, V45_OFFSET_VF, NO_WALL, NO_WALL);
 8008122:	f241 3388 	movw	r3, #5000	; 0x1388
 8008126:	9300      	str	r3, [sp, #0]
 8008128:	f241 3388 	movw	r3, #5000	; 0x1388
 800812c:	2255      	movs	r2, #85	; 0x55
 800812e:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8008132:	f242 7010 	movw	r0, #10000	; 0x2710
 8008136:	f7fd f9af 	bl	8005498 <slalomF>
		slalomR(V45_DEGACCEL, V45_OMEGA, 55, SPEED_LOW);
 800813a:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800813e:	2237      	movs	r2, #55	; 0x37
 8008140:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8008144:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8008148:	f7fd fa22 	bl	8005590 <slalomR>

		turn_dir(DIR_TURN_L45_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 800814c:	2103      	movs	r1, #3
 800814e:	20ff      	movs	r0, #255	; 0xff
 8008150:	f007 fd9e 	bl	800fc90 <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 8008154:	4b92      	ldr	r3, [pc, #584]	; (80083a0 <v_L45D+0x294>)
 8008156:	881b      	ldrh	r3, [r3, #0]
 8008158:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800815c:	b2db      	uxtb	r3, r3
 800815e:	3301      	adds	r3, #1
 8008160:	2b00      	cmp	r3, #0
 8008162:	f003 0301 	and.w	r3, r3, #1
 8008166:	bfb8      	it	lt
 8008168:	425b      	neglt	r3, r3
 800816a:	f003 0301 	and.w	r3, r3, #1
 800816e:	b2d9      	uxtb	r1, r3
 8008170:	4a8b      	ldr	r2, [pc, #556]	; (80083a0 <v_L45D+0x294>)
 8008172:	8813      	ldrh	r3, [r2, #0]
 8008174:	f361 03c3 	bfi	r3, r1, #3, #1
 8008178:	8013      	strh	r3, [r2, #0]

		slalomB(10000, SPEED_LOW, V45_OFFSET_VB-30);
 800817a:	220a      	movs	r2, #10
 800817c:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8008180:	f242 7010 	movw	r0, #10000	; 0x2710
 8008184:	f7fd fb26 	bl	80057d4 <slalomB>
		driveD(-30000, SPEED_MIN, SPEED_LOW, 30);
 8008188:	231e      	movs	r3, #30
 800818a:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800818e:	211e      	movs	r1, #30
 8008190:	4884      	ldr	r0, [pc, #528]	; (80083a4 <v_L45D+0x298>)
 8008192:	f7fc ffa9 	bl	80050e8 <driveD>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;

		slalomB(10000, SPEED_5, V45_5_OFFSET_VB-30);
		driveD(-30000, SPEED_MIN, SPEED_5, 30);
	}
}
 8008196:	e0fe      	b.n	8008396 <v_L45D+0x28a>
	}else if(run_mode == MIDDLE){
 8008198:	4b80      	ldr	r3, [pc, #512]	; (800839c <v_L45D+0x290>)
 800819a:	781b      	ldrb	r3, [r3, #0]
 800819c:	b2db      	uxtb	r3, r3
 800819e:	2b02      	cmp	r3, #2
 80081a0:	d13a      	bne.n	8008218 <v_L45D+0x10c>
		slalomF(10000, SPEED_MIDDLE, V45_2_OFFSET_VF, NO_WALL, NO_WALL);
 80081a2:	f241 3388 	movw	r3, #5000	; 0x1388
 80081a6:	9300      	str	r3, [sp, #0]
 80081a8:	f241 3388 	movw	r3, #5000	; 0x1388
 80081ac:	2249      	movs	r2, #73	; 0x49
 80081ae:	f44f 7116 	mov.w	r1, #600	; 0x258
 80081b2:	f242 7010 	movw	r0, #10000	; 0x2710
 80081b6:	f7fd f96f 	bl	8005498 <slalomF>
		slalomR(V45_2_DEGACCEL, V45_2_OMEGA, 45, SPEED_MIDDLE);
 80081ba:	f44f 7316 	mov.w	r3, #600	; 0x258
 80081be:	222d      	movs	r2, #45	; 0x2d
 80081c0:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80081c4:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 80081c8:	f7fd f9e2 	bl	8005590 <slalomR>
		turn_dir(DIR_TURN_L45_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 80081cc:	2103      	movs	r1, #3
 80081ce:	20ff      	movs	r0, #255	; 0xff
 80081d0:	f007 fd5e 	bl	800fc90 <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 80081d4:	4b72      	ldr	r3, [pc, #456]	; (80083a0 <v_L45D+0x294>)
 80081d6:	881b      	ldrh	r3, [r3, #0]
 80081d8:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80081dc:	b2db      	uxtb	r3, r3
 80081de:	3301      	adds	r3, #1
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	f003 0301 	and.w	r3, r3, #1
 80081e6:	bfb8      	it	lt
 80081e8:	425b      	neglt	r3, r3
 80081ea:	f003 0301 	and.w	r3, r3, #1
 80081ee:	b2d9      	uxtb	r1, r3
 80081f0:	4a6b      	ldr	r2, [pc, #428]	; (80083a0 <v_L45D+0x294>)
 80081f2:	8813      	ldrh	r3, [r2, #0]
 80081f4:	f361 03c3 	bfi	r3, r1, #3, #1
 80081f8:	8013      	strh	r3, [r2, #0]
		slalomB(10000, SPEED_MIDDLE, V45_2_OFFSET_VB-30);
 80081fa:	2219      	movs	r2, #25
 80081fc:	f44f 7116 	mov.w	r1, #600	; 0x258
 8008200:	f242 7010 	movw	r0, #10000	; 0x2710
 8008204:	f7fd fae6 	bl	80057d4 <slalomB>
		driveD(-30000, SPEED_MIN, SPEED_MIDDLE, 30);
 8008208:	231e      	movs	r3, #30
 800820a:	f44f 7216 	mov.w	r2, #600	; 0x258
 800820e:	211e      	movs	r1, #30
 8008210:	4864      	ldr	r0, [pc, #400]	; (80083a4 <v_L45D+0x298>)
 8008212:	f7fc ff69 	bl	80050e8 <driveD>
}
 8008216:	e0be      	b.n	8008396 <v_L45D+0x28a>
	}else if(run_mode == HIGH){
 8008218:	4b60      	ldr	r3, [pc, #384]	; (800839c <v_L45D+0x290>)
 800821a:	781b      	ldrb	r3, [r3, #0]
 800821c:	b2db      	uxtb	r3, r3
 800821e:	2b03      	cmp	r3, #3
 8008220:	d13a      	bne.n	8008298 <v_L45D+0x18c>
		slalomF(10000, SPEED_HIGH, V45_3_OFFSET_VF, NO_WALL, NO_WALL);
 8008222:	f241 3388 	movw	r3, #5000	; 0x1388
 8008226:	9300      	str	r3, [sp, #0]
 8008228:	f241 3388 	movw	r3, #5000	; 0x1388
 800822c:	2237      	movs	r2, #55	; 0x37
 800822e:	f44f 7148 	mov.w	r1, #800	; 0x320
 8008232:	f242 7010 	movw	r0, #10000	; 0x2710
 8008236:	f7fd f92f 	bl	8005498 <slalomF>
		slalomR(V45_3_DEGACCEL, V45_3_OMEGA, 45, SPEED_HIGH);
 800823a:	f44f 7348 	mov.w	r3, #800	; 0x320
 800823e:	222d      	movs	r2, #45	; 0x2d
 8008240:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8008244:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 8008248:	f7fd f9a2 	bl	8005590 <slalomR>
		turn_dir(DIR_TURN_L45_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 800824c:	2103      	movs	r1, #3
 800824e:	20ff      	movs	r0, #255	; 0xff
 8008250:	f007 fd1e 	bl	800fc90 <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 8008254:	4b52      	ldr	r3, [pc, #328]	; (80083a0 <v_L45D+0x294>)
 8008256:	881b      	ldrh	r3, [r3, #0]
 8008258:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800825c:	b2db      	uxtb	r3, r3
 800825e:	3301      	adds	r3, #1
 8008260:	2b00      	cmp	r3, #0
 8008262:	f003 0301 	and.w	r3, r3, #1
 8008266:	bfb8      	it	lt
 8008268:	425b      	neglt	r3, r3
 800826a:	f003 0301 	and.w	r3, r3, #1
 800826e:	b2d9      	uxtb	r1, r3
 8008270:	4a4b      	ldr	r2, [pc, #300]	; (80083a0 <v_L45D+0x294>)
 8008272:	8813      	ldrh	r3, [r2, #0]
 8008274:	f361 03c3 	bfi	r3, r1, #3, #1
 8008278:	8013      	strh	r3, [r2, #0]
		slalomB(10000, SPEED_HIGH, V45_3_OFFSET_VB-30);
 800827a:	2215      	movs	r2, #21
 800827c:	f44f 7148 	mov.w	r1, #800	; 0x320
 8008280:	f242 7010 	movw	r0, #10000	; 0x2710
 8008284:	f7fd faa6 	bl	80057d4 <slalomB>
		driveD(-30000, SPEED_MIN, SPEED_HIGH, 30);
 8008288:	231e      	movs	r3, #30
 800828a:	f44f 7248 	mov.w	r2, #800	; 0x320
 800828e:	211e      	movs	r1, #30
 8008290:	4844      	ldr	r0, [pc, #272]	; (80083a4 <v_L45D+0x298>)
 8008292:	f7fc ff29 	bl	80050e8 <driveD>
}
 8008296:	e07e      	b.n	8008396 <v_L45D+0x28a>
	}else if(run_mode == HIGH_HIGH){
 8008298:	4b40      	ldr	r3, [pc, #256]	; (800839c <v_L45D+0x290>)
 800829a:	781b      	ldrb	r3, [r3, #0]
 800829c:	b2db      	uxtb	r3, r3
 800829e:	2b04      	cmp	r3, #4
 80082a0:	d13a      	bne.n	8008318 <v_L45D+0x20c>
		slalomF(10000, SPEED_HIGH_HIGH, V45_4_OFFSET_VF, NO_WALL, NO_WALL);
 80082a2:	f241 3388 	movw	r3, #5000	; 0x1388
 80082a6:	9300      	str	r3, [sp, #0]
 80082a8:	f241 3388 	movw	r3, #5000	; 0x1388
 80082ac:	2214      	movs	r2, #20
 80082ae:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80082b2:	f242 7010 	movw	r0, #10000	; 0x2710
 80082b6:	f7fd f8ef 	bl	8005498 <slalomF>
		slalomR(V45_4_DEGACCEL, V45_4_OMEGA, 45, SPEED_HIGH_HIGH);
 80082ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80082be:	222d      	movs	r2, #45	; 0x2d
 80082c0:	f44f 7116 	mov.w	r1, #600	; 0x258
 80082c4:	f242 7010 	movw	r0, #10000	; 0x2710
 80082c8:	f7fd f962 	bl	8005590 <slalomR>
		turn_dir(DIR_TURN_L45_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 80082cc:	2103      	movs	r1, #3
 80082ce:	20ff      	movs	r0, #255	; 0xff
 80082d0:	f007 fcde 	bl	800fc90 <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 80082d4:	4b32      	ldr	r3, [pc, #200]	; (80083a0 <v_L45D+0x294>)
 80082d6:	881b      	ldrh	r3, [r3, #0]
 80082d8:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80082dc:	b2db      	uxtb	r3, r3
 80082de:	3301      	adds	r3, #1
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	f003 0301 	and.w	r3, r3, #1
 80082e6:	bfb8      	it	lt
 80082e8:	425b      	neglt	r3, r3
 80082ea:	f003 0301 	and.w	r3, r3, #1
 80082ee:	b2d9      	uxtb	r1, r3
 80082f0:	4a2b      	ldr	r2, [pc, #172]	; (80083a0 <v_L45D+0x294>)
 80082f2:	8813      	ldrh	r3, [r2, #0]
 80082f4:	f361 03c3 	bfi	r3, r1, #3, #1
 80082f8:	8013      	strh	r3, [r2, #0]
		slalomB(10000, SPEED_HIGH_HIGH, V45_4_OFFSET_VB-30);
 80082fa:	221c      	movs	r2, #28
 80082fc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8008300:	f242 7010 	movw	r0, #10000	; 0x2710
 8008304:	f7fd fa66 	bl	80057d4 <slalomB>
		driveD(-30000, SPEED_MIN, SPEED_HIGH_HIGH, 30);
 8008308:	231e      	movs	r3, #30
 800830a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800830e:	211e      	movs	r1, #30
 8008310:	4824      	ldr	r0, [pc, #144]	; (80083a4 <v_L45D+0x298>)
 8008312:	f7fc fee9 	bl	80050e8 <driveD>
}
 8008316:	e03e      	b.n	8008396 <v_L45D+0x28a>
	}else if(run_mode == 5){
 8008318:	4b20      	ldr	r3, [pc, #128]	; (800839c <v_L45D+0x290>)
 800831a:	781b      	ldrb	r3, [r3, #0]
 800831c:	b2db      	uxtb	r3, r3
 800831e:	2b05      	cmp	r3, #5
 8008320:	d139      	bne.n	8008396 <v_L45D+0x28a>
		slalomF(10000, SPEED_5, V45_5_OFFSET_VF, NO_WALL, NO_WALL);
 8008322:	f241 3388 	movw	r3, #5000	; 0x1388
 8008326:	9300      	str	r3, [sp, #0]
 8008328:	f241 3388 	movw	r3, #5000	; 0x1388
 800832c:	2214      	movs	r2, #20
 800832e:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 8008332:	f242 7010 	movw	r0, #10000	; 0x2710
 8008336:	f7fd f8af 	bl	8005498 <slalomF>
		slalomR(V45_5_DEGACCEL, V45_5_OMEGA, 45, SPEED_5);
 800833a:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
 800833e:	222d      	movs	r2, #45	; 0x2d
 8008340:	f44f 7148 	mov.w	r1, #800	; 0x320
 8008344:	f44f 507a 	mov.w	r0, #16000	; 0x3e80
 8008348:	f7fd f922 	bl	8005590 <slalomR>
		turn_dir(DIR_TURN_L45_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 800834c:	2103      	movs	r1, #3
 800834e:	20ff      	movs	r0, #255	; 0xff
 8008350:	f007 fc9e 	bl	800fc90 <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 8008354:	4b12      	ldr	r3, [pc, #72]	; (80083a0 <v_L45D+0x294>)
 8008356:	881b      	ldrh	r3, [r3, #0]
 8008358:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800835c:	b2db      	uxtb	r3, r3
 800835e:	3301      	adds	r3, #1
 8008360:	2b00      	cmp	r3, #0
 8008362:	f003 0301 	and.w	r3, r3, #1
 8008366:	bfb8      	it	lt
 8008368:	425b      	neglt	r3, r3
 800836a:	f003 0301 	and.w	r3, r3, #1
 800836e:	b2d9      	uxtb	r1, r3
 8008370:	4a0b      	ldr	r2, [pc, #44]	; (80083a0 <v_L45D+0x294>)
 8008372:	8813      	ldrh	r3, [r2, #0]
 8008374:	f361 03c3 	bfi	r3, r1, #3, #1
 8008378:	8013      	strh	r3, [r2, #0]
		slalomB(10000, SPEED_5, V45_5_OFFSET_VB-30);
 800837a:	221c      	movs	r2, #28
 800837c:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 8008380:	f242 7010 	movw	r0, #10000	; 0x2710
 8008384:	f7fd fa26 	bl	80057d4 <slalomB>
		driveD(-30000, SPEED_MIN, SPEED_5, 30);
 8008388:	231e      	movs	r3, #30
 800838a:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 800838e:	211e      	movs	r1, #30
 8008390:	4804      	ldr	r0, [pc, #16]	; (80083a4 <v_L45D+0x298>)
 8008392:	f7fc fea9 	bl	80050e8 <driveD>
}
 8008396:	bf00      	nop
 8008398:	46bd      	mov	sp, r7
 800839a:	bd80      	pop	{r7, pc}
 800839c:	20000456 	.word	0x20000456
 80083a0:	20000f64 	.word	0x20000f64
 80083a4:	ffff8ad0 	.word	0xffff8ad0

080083a8 <v_R90>:
//v_R90
// 柱中心から右に90度回転する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void v_R90(void){
 80083a8:	b580      	push	{r7, lr}
 80083aa:	b082      	sub	sp, #8
 80083ac:	af02      	add	r7, sp, #8
	full_led_write(YELLOW);
 80083ae:	2006      	movs	r0, #6
 80083b0:	f009 fb02 	bl	80119b8 <full_led_write>
	if(run_mode == LOW){
 80083b4:	4b5d      	ldr	r3, [pc, #372]	; (800852c <v_R90+0x184>)
 80083b6:	781b      	ldrb	r3, [r3, #0]
 80083b8:	b2db      	uxtb	r3, r3
 80083ba:	2b01      	cmp	r3, #1
 80083bc:	d11f      	bne.n	80083fe <v_R90+0x56>
		slalomF(10000, SPEED_LOW, V90_OFFSET_F, NO_WALL, NO_WALL);
 80083be:	f241 3388 	movw	r3, #5000	; 0x1388
 80083c2:	9300      	str	r3, [sp, #0]
 80083c4:	f241 3388 	movw	r3, #5000	; 0x1388
 80083c8:	222d      	movs	r2, #45	; 0x2d
 80083ca:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80083ce:	f242 7010 	movw	r0, #10000	; 0x2710
 80083d2:	f7fd f861 	bl	8005498 <slalomF>
		slalomR(-V90_DEGACCEL, -V90_OMEGA, -90, SPEED_LOW);
 80083d6:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80083da:	f06f 0259 	mvn.w	r2, #89	; 0x59
 80083de:	4954      	ldr	r1, [pc, #336]	; (8008530 <v_R90+0x188>)
 80083e0:	4854      	ldr	r0, [pc, #336]	; (8008534 <v_R90+0x18c>)
 80083e2:	f7fd f8d5 	bl	8005590 <slalomR>

		turn_dir(DIR_TURN_R90_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 80083e6:	2103      	movs	r1, #3
 80083e8:	2002      	movs	r0, #2
 80083ea:	f007 fc51 	bl	800fc90 <turn_dir>

		slalomB(10000, SPEED_LOW, V90_OFFSET_B);
 80083ee:	222d      	movs	r2, #45	; 0x2d
 80083f0:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80083f4:	f242 7010 	movw	r0, #10000	; 0x2710
 80083f8:	f7fd f9ec 	bl	80057d4 <slalomB>

		turn_dir(DIR_TURN_R90_8, 3);									//マイクロマウス内部位置情報でも左回転処理

		slalomB(10000, SPEED_5, V90_5_OFFSET_B);
	}
}
 80083fc:	e092      	b.n	8008524 <v_R90+0x17c>
	}else if(run_mode == MIDDLE){
 80083fe:	4b4b      	ldr	r3, [pc, #300]	; (800852c <v_R90+0x184>)
 8008400:	781b      	ldrb	r3, [r3, #0]
 8008402:	b2db      	uxtb	r3, r3
 8008404:	2b02      	cmp	r3, #2
 8008406:	d11f      	bne.n	8008448 <v_R90+0xa0>
		slalomF(10000, SPEED_MIDDLE, V90_2_OFFSET_F, NO_WALL, NO_WALL);
 8008408:	f241 3388 	movw	r3, #5000	; 0x1388
 800840c:	9300      	str	r3, [sp, #0]
 800840e:	f241 3388 	movw	r3, #5000	; 0x1388
 8008412:	223a      	movs	r2, #58	; 0x3a
 8008414:	f44f 7116 	mov.w	r1, #600	; 0x258
 8008418:	f242 7010 	movw	r0, #10000	; 0x2710
 800841c:	f7fd f83c 	bl	8005498 <slalomF>
		slalomR(-V90_2_DEGACCEL, -V90_2_OMEGA, -90, SPEED_MIDDLE);
 8008420:	f44f 7316 	mov.w	r3, #600	; 0x258
 8008424:	f06f 0259 	mvn.w	r2, #89	; 0x59
 8008428:	4943      	ldr	r1, [pc, #268]	; (8008538 <v_R90+0x190>)
 800842a:	4844      	ldr	r0, [pc, #272]	; (800853c <v_R90+0x194>)
 800842c:	f7fd f8b0 	bl	8005590 <slalomR>
		turn_dir(DIR_TURN_R90_8, 3);									//マイクロマウス内部位置情報でも左回転処理
 8008430:	2103      	movs	r1, #3
 8008432:	2002      	movs	r0, #2
 8008434:	f007 fc2c 	bl	800fc90 <turn_dir>
		slalomB(10000, SPEED_MIDDLE, V90_2_OFFSET_B);
 8008438:	2252      	movs	r2, #82	; 0x52
 800843a:	f44f 7116 	mov.w	r1, #600	; 0x258
 800843e:	f242 7010 	movw	r0, #10000	; 0x2710
 8008442:	f7fd f9c7 	bl	80057d4 <slalomB>
}
 8008446:	e06d      	b.n	8008524 <v_R90+0x17c>
	}else if(run_mode == HIGH){
 8008448:	4b38      	ldr	r3, [pc, #224]	; (800852c <v_R90+0x184>)
 800844a:	781b      	ldrb	r3, [r3, #0]
 800844c:	b2db      	uxtb	r3, r3
 800844e:	2b03      	cmp	r3, #3
 8008450:	d11f      	bne.n	8008492 <v_R90+0xea>
		slalomF(10000, SPEED_HIGH, V90_3_OFFSET_F, NO_WALL, NO_WALL);
 8008452:	f241 3388 	movw	r3, #5000	; 0x1388
 8008456:	9300      	str	r3, [sp, #0]
 8008458:	f241 3388 	movw	r3, #5000	; 0x1388
 800845c:	2223      	movs	r2, #35	; 0x23
 800845e:	f44f 7148 	mov.w	r1, #800	; 0x320
 8008462:	f242 7010 	movw	r0, #10000	; 0x2710
 8008466:	f7fd f817 	bl	8005498 <slalomF>
		slalomR(-V90_3_DEGACCEL, -V90_3_OMEGA, -90, SPEED_HIGH);
 800846a:	f44f 7348 	mov.w	r3, #800	; 0x320
 800846e:	f06f 0259 	mvn.w	r2, #89	; 0x59
 8008472:	4931      	ldr	r1, [pc, #196]	; (8008538 <v_R90+0x190>)
 8008474:	4831      	ldr	r0, [pc, #196]	; (800853c <v_R90+0x194>)
 8008476:	f7fd f88b 	bl	8005590 <slalomR>
		turn_dir(DIR_TURN_R90_8, 3);									//マイクロマウス内部位置情報でも左回転処理
 800847a:	2103      	movs	r1, #3
 800847c:	2002      	movs	r0, #2
 800847e:	f007 fc07 	bl	800fc90 <turn_dir>
		slalomB(10000, SPEED_HIGH, V90_3_OFFSET_B);
 8008482:	2241      	movs	r2, #65	; 0x41
 8008484:	f44f 7148 	mov.w	r1, #800	; 0x320
 8008488:	f242 7010 	movw	r0, #10000	; 0x2710
 800848c:	f7fd f9a2 	bl	80057d4 <slalomB>
}
 8008490:	e048      	b.n	8008524 <v_R90+0x17c>
	}else if(run_mode == HIGH_HIGH){
 8008492:	4b26      	ldr	r3, [pc, #152]	; (800852c <v_R90+0x184>)
 8008494:	781b      	ldrb	r3, [r3, #0]
 8008496:	b2db      	uxtb	r3, r3
 8008498:	2b04      	cmp	r3, #4
 800849a:	d11f      	bne.n	80084dc <v_R90+0x134>
		slalomF(10000, SPEED_HIGH_HIGH, V90_4_OFFSET_F, NO_WALL, NO_WALL);
 800849c:	f241 3388 	movw	r3, #5000	; 0x1388
 80084a0:	9300      	str	r3, [sp, #0]
 80084a2:	f241 3388 	movw	r3, #5000	; 0x1388
 80084a6:	221e      	movs	r2, #30
 80084a8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80084ac:	f242 7010 	movw	r0, #10000	; 0x2710
 80084b0:	f7fc fff2 	bl	8005498 <slalomF>
		slalomR(-V90_4_DEGACCEL, -V90_4_OMEGA, -90, SPEED_HIGH_HIGH);
 80084b4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80084b8:	f06f 0259 	mvn.w	r2, #89	; 0x59
 80084bc:	491e      	ldr	r1, [pc, #120]	; (8008538 <v_R90+0x190>)
 80084be:	4820      	ldr	r0, [pc, #128]	; (8008540 <v_R90+0x198>)
 80084c0:	f7fd f866 	bl	8005590 <slalomR>
		turn_dir(DIR_TURN_R90_8, 3);									//マイクロマウス内部位置情報でも左回転処理
 80084c4:	2103      	movs	r1, #3
 80084c6:	2002      	movs	r0, #2
 80084c8:	f007 fbe2 	bl	800fc90 <turn_dir>
		slalomB(10000, SPEED_HIGH_HIGH, V90_4_OFFSET_B);
 80084cc:	221e      	movs	r2, #30
 80084ce:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80084d2:	f242 7010 	movw	r0, #10000	; 0x2710
 80084d6:	f7fd f97d 	bl	80057d4 <slalomB>
}
 80084da:	e023      	b.n	8008524 <v_R90+0x17c>
	}else if(run_mode == 5){
 80084dc:	4b13      	ldr	r3, [pc, #76]	; (800852c <v_R90+0x184>)
 80084de:	781b      	ldrb	r3, [r3, #0]
 80084e0:	b2db      	uxtb	r3, r3
 80084e2:	2b05      	cmp	r3, #5
 80084e4:	d11e      	bne.n	8008524 <v_R90+0x17c>
		slalomF(10000, SPEED_5, V90_5_OFFSET_F, NO_WALL, NO_WALL);
 80084e6:	f241 3388 	movw	r3, #5000	; 0x1388
 80084ea:	9300      	str	r3, [sp, #0]
 80084ec:	f241 3388 	movw	r3, #5000	; 0x1388
 80084f0:	2214      	movs	r2, #20
 80084f2:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 80084f6:	f242 7010 	movw	r0, #10000	; 0x2710
 80084fa:	f7fc ffcd 	bl	8005498 <slalomF>
		slalomR(-V90_5_DEGACCEL, -V90_5_OMEGA, -90, SPEED_5);
 80084fe:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
 8008502:	f06f 0259 	mvn.w	r2, #89	; 0x59
 8008506:	490f      	ldr	r1, [pc, #60]	; (8008544 <v_R90+0x19c>)
 8008508:	480d      	ldr	r0, [pc, #52]	; (8008540 <v_R90+0x198>)
 800850a:	f7fd f841 	bl	8005590 <slalomR>
		turn_dir(DIR_TURN_R90_8, 3);									//マイクロマウス内部位置情報でも左回転処理
 800850e:	2103      	movs	r1, #3
 8008510:	2002      	movs	r0, #2
 8008512:	f007 fbbd 	bl	800fc90 <turn_dir>
		slalomB(10000, SPEED_5, V90_5_OFFSET_B);
 8008516:	2214      	movs	r2, #20
 8008518:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 800851c:	f242 7010 	movw	r0, #10000	; 0x2710
 8008520:	f7fd f958 	bl	80057d4 <slalomB>
}
 8008524:	bf00      	nop
 8008526:	46bd      	mov	sp, r7
 8008528:	bd80      	pop	{r7, pc}
 800852a:	bf00      	nop
 800852c:	20000456 	.word	0x20000456
 8008530:	fffffea2 	.word	0xfffffea2
 8008534:	fffff254 	.word	0xfffff254
 8008538:	fffffce0 	.word	0xfffffce0
 800853c:	ffffd8f0 	.word	0xffffd8f0
 8008540:	ffffc180 	.word	0xffffc180
 8008544:	fffffc18 	.word	0xfffffc18

08008548 <v_L90>:
//v_L90
// 柱中心から左に90度回転する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void v_L90(void){
 8008548:	b580      	push	{r7, lr}
 800854a:	b082      	sub	sp, #8
 800854c:	af02      	add	r7, sp, #8
	full_led_write(PURPLE);
 800854e:	2005      	movs	r0, #5
 8008550:	f009 fa32 	bl	80119b8 <full_led_write>
	if(run_mode == LOW){
 8008554:	4b5f      	ldr	r3, [pc, #380]	; (80086d4 <v_L90+0x18c>)
 8008556:	781b      	ldrb	r3, [r3, #0]
 8008558:	b2db      	uxtb	r3, r3
 800855a:	2b01      	cmp	r3, #1
 800855c:	d120      	bne.n	80085a0 <v_L90+0x58>
		slalomF(10000, SPEED_LOW, V90_OFFSET_F, NO_WALL, NO_WALL);
 800855e:	f241 3388 	movw	r3, #5000	; 0x1388
 8008562:	9300      	str	r3, [sp, #0]
 8008564:	f241 3388 	movw	r3, #5000	; 0x1388
 8008568:	222d      	movs	r2, #45	; 0x2d
 800856a:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800856e:	f242 7010 	movw	r0, #10000	; 0x2710
 8008572:	f7fc ff91 	bl	8005498 <slalomF>
		slalomR(V90_DEGACCEL, V90_OMEGA, 90, SPEED_LOW);
 8008576:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800857a:	225a      	movs	r2, #90	; 0x5a
 800857c:	f44f 71af 	mov.w	r1, #350	; 0x15e
 8008580:	f640 50ac 	movw	r0, #3500	; 0xdac
 8008584:	f7fd f804 	bl	8005590 <slalomR>

		turn_dir(DIR_TURN_L90_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 8008588:	2103      	movs	r1, #3
 800858a:	20fe      	movs	r0, #254	; 0xfe
 800858c:	f007 fb80 	bl	800fc90 <turn_dir>

		slalomB(10000, SPEED_LOW, V90_OFFSET_B);
 8008590:	222d      	movs	r2, #45	; 0x2d
 8008592:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8008596:	f242 7010 	movw	r0, #10000	; 0x2710
 800859a:	f7fd f91b 	bl	80057d4 <slalomB>

		turn_dir(DIR_TURN_L90_8, 3);									//aマイクロマウス内部位置情報でも左回転処理

		slalomB(10000, SPEED_5, V90_5_OFFSET_B);
	}
}
 800859e:	e096      	b.n	80086ce <v_L90+0x186>
	}else if(run_mode == MIDDLE){
 80085a0:	4b4c      	ldr	r3, [pc, #304]	; (80086d4 <v_L90+0x18c>)
 80085a2:	781b      	ldrb	r3, [r3, #0]
 80085a4:	b2db      	uxtb	r3, r3
 80085a6:	2b02      	cmp	r3, #2
 80085a8:	d120      	bne.n	80085ec <v_L90+0xa4>
		slalomF(10000, SPEED_MIDDLE, V90_2_OFFSET_F, NO_WALL, NO_WALL);
 80085aa:	f241 3388 	movw	r3, #5000	; 0x1388
 80085ae:	9300      	str	r3, [sp, #0]
 80085b0:	f241 3388 	movw	r3, #5000	; 0x1388
 80085b4:	223a      	movs	r2, #58	; 0x3a
 80085b6:	f44f 7116 	mov.w	r1, #600	; 0x258
 80085ba:	f242 7010 	movw	r0, #10000	; 0x2710
 80085be:	f7fc ff6b 	bl	8005498 <slalomF>
		slalomR(V90_2_DEGACCEL, V90_2_OMEGA, 90, SPEED_MIDDLE);
 80085c2:	f44f 7316 	mov.w	r3, #600	; 0x258
 80085c6:	225a      	movs	r2, #90	; 0x5a
 80085c8:	f44f 7148 	mov.w	r1, #800	; 0x320
 80085cc:	f242 7010 	movw	r0, #10000	; 0x2710
 80085d0:	f7fc ffde 	bl	8005590 <slalomR>
		turn_dir(DIR_TURN_L90_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 80085d4:	2103      	movs	r1, #3
 80085d6:	20fe      	movs	r0, #254	; 0xfe
 80085d8:	f007 fb5a 	bl	800fc90 <turn_dir>
		slalomB(10000, SPEED_MIDDLE, V90_2_OFFSET_B);
 80085dc:	2252      	movs	r2, #82	; 0x52
 80085de:	f44f 7116 	mov.w	r1, #600	; 0x258
 80085e2:	f242 7010 	movw	r0, #10000	; 0x2710
 80085e6:	f7fd f8f5 	bl	80057d4 <slalomB>
}
 80085ea:	e070      	b.n	80086ce <v_L90+0x186>
	}else if(run_mode == HIGH){
 80085ec:	4b39      	ldr	r3, [pc, #228]	; (80086d4 <v_L90+0x18c>)
 80085ee:	781b      	ldrb	r3, [r3, #0]
 80085f0:	b2db      	uxtb	r3, r3
 80085f2:	2b03      	cmp	r3, #3
 80085f4:	d120      	bne.n	8008638 <v_L90+0xf0>
		slalomF(10000, SPEED_HIGH, V90_3_OFFSET_F, NO_WALL, NO_WALL);
 80085f6:	f241 3388 	movw	r3, #5000	; 0x1388
 80085fa:	9300      	str	r3, [sp, #0]
 80085fc:	f241 3388 	movw	r3, #5000	; 0x1388
 8008600:	2223      	movs	r2, #35	; 0x23
 8008602:	f44f 7148 	mov.w	r1, #800	; 0x320
 8008606:	f242 7010 	movw	r0, #10000	; 0x2710
 800860a:	f7fc ff45 	bl	8005498 <slalomF>
		slalomR(V90_3_DEGACCEL, V90_3_OMEGA, 90, SPEED_HIGH);
 800860e:	f44f 7348 	mov.w	r3, #800	; 0x320
 8008612:	225a      	movs	r2, #90	; 0x5a
 8008614:	f44f 7148 	mov.w	r1, #800	; 0x320
 8008618:	f242 7010 	movw	r0, #10000	; 0x2710
 800861c:	f7fc ffb8 	bl	8005590 <slalomR>
		turn_dir(DIR_TURN_L90_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 8008620:	2103      	movs	r1, #3
 8008622:	20fe      	movs	r0, #254	; 0xfe
 8008624:	f007 fb34 	bl	800fc90 <turn_dir>
		slalomB(10000, SPEED_HIGH, V90_3_OFFSET_B);
 8008628:	2241      	movs	r2, #65	; 0x41
 800862a:	f44f 7148 	mov.w	r1, #800	; 0x320
 800862e:	f242 7010 	movw	r0, #10000	; 0x2710
 8008632:	f7fd f8cf 	bl	80057d4 <slalomB>
}
 8008636:	e04a      	b.n	80086ce <v_L90+0x186>
	}else if(run_mode == HIGH_HIGH){
 8008638:	4b26      	ldr	r3, [pc, #152]	; (80086d4 <v_L90+0x18c>)
 800863a:	781b      	ldrb	r3, [r3, #0]
 800863c:	b2db      	uxtb	r3, r3
 800863e:	2b04      	cmp	r3, #4
 8008640:	d120      	bne.n	8008684 <v_L90+0x13c>
		slalomF(10000, SPEED_HIGH_HIGH, V90_4_OFFSET_F, NO_WALL, NO_WALL);
 8008642:	f241 3388 	movw	r3, #5000	; 0x1388
 8008646:	9300      	str	r3, [sp, #0]
 8008648:	f241 3388 	movw	r3, #5000	; 0x1388
 800864c:	221e      	movs	r2, #30
 800864e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8008652:	f242 7010 	movw	r0, #10000	; 0x2710
 8008656:	f7fc ff1f 	bl	8005498 <slalomF>
		slalomR(V90_4_DEGACCEL, V90_4_OMEGA, 90, SPEED_HIGH_HIGH);
 800865a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800865e:	225a      	movs	r2, #90	; 0x5a
 8008660:	f44f 7148 	mov.w	r1, #800	; 0x320
 8008664:	f44f 507a 	mov.w	r0, #16000	; 0x3e80
 8008668:	f7fc ff92 	bl	8005590 <slalomR>
		turn_dir(DIR_TURN_L90_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 800866c:	2103      	movs	r1, #3
 800866e:	20fe      	movs	r0, #254	; 0xfe
 8008670:	f007 fb0e 	bl	800fc90 <turn_dir>
		slalomB(10000, SPEED_HIGH_HIGH, V90_4_OFFSET_B);
 8008674:	221e      	movs	r2, #30
 8008676:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800867a:	f242 7010 	movw	r0, #10000	; 0x2710
 800867e:	f7fd f8a9 	bl	80057d4 <slalomB>
}
 8008682:	e024      	b.n	80086ce <v_L90+0x186>
	}else if(run_mode == 5){
 8008684:	4b13      	ldr	r3, [pc, #76]	; (80086d4 <v_L90+0x18c>)
 8008686:	781b      	ldrb	r3, [r3, #0]
 8008688:	b2db      	uxtb	r3, r3
 800868a:	2b05      	cmp	r3, #5
 800868c:	d11f      	bne.n	80086ce <v_L90+0x186>
		slalomF(10000, SPEED_5, V90_5_OFFSET_F, NO_WALL, NO_WALL);
 800868e:	f241 3388 	movw	r3, #5000	; 0x1388
 8008692:	9300      	str	r3, [sp, #0]
 8008694:	f241 3388 	movw	r3, #5000	; 0x1388
 8008698:	2214      	movs	r2, #20
 800869a:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 800869e:	f242 7010 	movw	r0, #10000	; 0x2710
 80086a2:	f7fc fef9 	bl	8005498 <slalomF>
		slalomR(V90_5_DEGACCEL, V90_5_OMEGA, 90, SPEED_5);
 80086a6:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
 80086aa:	225a      	movs	r2, #90	; 0x5a
 80086ac:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80086b0:	f44f 507a 	mov.w	r0, #16000	; 0x3e80
 80086b4:	f7fc ff6c 	bl	8005590 <slalomR>
		turn_dir(DIR_TURN_L90_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 80086b8:	2103      	movs	r1, #3
 80086ba:	20fe      	movs	r0, #254	; 0xfe
 80086bc:	f007 fae8 	bl	800fc90 <turn_dir>
		slalomB(10000, SPEED_5, V90_5_OFFSET_B);
 80086c0:	2214      	movs	r2, #20
 80086c2:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 80086c6:	f242 7010 	movw	r0, #10000	; 0x2710
 80086ca:	f7fd f883 	bl	80057d4 <slalomB>
}
 80086ce:	bf00      	nop
 80086d0:	46bd      	mov	sp, r7
 80086d2:	bd80      	pop	{r7, pc}
 80086d4:	20000456 	.word	0x20000456

080086d8 <v_R135>:
//v_R135
// 区画中心から右に135度回転する　ゴール用
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void v_R135(void){
 80086d8:	b580      	push	{r7, lr}
 80086da:	b082      	sub	sp, #8
 80086dc:	af02      	add	r7, sp, #8
	full_led_write(YELLOW);
 80086de:	2006      	movs	r0, #6
 80086e0:	f009 f96a 	bl	80119b8 <full_led_write>
	if(run_mode == LOW){
 80086e4:	4bc2      	ldr	r3, [pc, #776]	; (80089f0 <v_R135+0x318>)
 80086e6:	781b      	ldrb	r3, [r3, #0]
 80086e8:	b2db      	uxtb	r3, r3
 80086ea:	2b01      	cmp	r3, #1
 80086ec:	d155      	bne.n	800879a <v_R135+0xc2>
		if(!MF2.FLAG.V){
 80086ee:	4bc1      	ldr	r3, [pc, #772]	; (80089f4 <v_R135+0x31c>)
 80086f0:	881b      	ldrh	r3, [r3, #0]
 80086f2:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80086f6:	b2db      	uxtb	r3, r3
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d10c      	bne.n	8008716 <v_R135+0x3e>
			slalomF(10000, SPEED_LOW, V135_OFFSET_F, NO_WALL, NO_WALL);
 80086fc:	f241 3388 	movw	r3, #5000	; 0x1388
 8008700:	9300      	str	r3, [sp, #0]
 8008702:	f241 3388 	movw	r3, #5000	; 0x1388
 8008706:	2244      	movs	r2, #68	; 0x44
 8008708:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800870c:	f242 7010 	movw	r0, #10000	; 0x2710
 8008710:	f7fc fec2 	bl	8005498 <slalomF>
 8008714:	e00b      	b.n	800872e <v_R135+0x56>
		}else{
			slalomF(10000, SPEED_LOW, V135_OFFSET_VF, NO_WALL, NO_WALL);
 8008716:	f241 3388 	movw	r3, #5000	; 0x1388
 800871a:	9300      	str	r3, [sp, #0]
 800871c:	f241 3388 	movw	r3, #5000	; 0x1388
 8008720:	223a      	movs	r2, #58	; 0x3a
 8008722:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8008726:	f242 7010 	movw	r0, #10000	; 0x2710
 800872a:	f7fc feb5 	bl	8005498 <slalomF>
		}
		slalomR(-V135_DEGACCEL, -V135_OMEGA, -135, SPEED_LOW);
 800872e:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8008732:	f06f 0286 	mvn.w	r2, #134	; 0x86
 8008736:	49b0      	ldr	r1, [pc, #704]	; (80089f8 <v_R135+0x320>)
 8008738:	48b0      	ldr	r0, [pc, #704]	; (80089fc <v_R135+0x324>)
 800873a:	f7fc ff29 	bl	8005590 <slalomR>

		turn_dir(DIR_TURN_R135_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 800873e:	2103      	movs	r1, #3
 8008740:	2003      	movs	r0, #3
 8008742:	f007 faa5 	bl	800fc90 <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 8008746:	4bab      	ldr	r3, [pc, #684]	; (80089f4 <v_R135+0x31c>)
 8008748:	881b      	ldrh	r3, [r3, #0]
 800874a:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800874e:	b2db      	uxtb	r3, r3
 8008750:	3301      	adds	r3, #1
 8008752:	2b00      	cmp	r3, #0
 8008754:	f003 0301 	and.w	r3, r3, #1
 8008758:	bfb8      	it	lt
 800875a:	425b      	neglt	r3, r3
 800875c:	f003 0301 	and.w	r3, r3, #1
 8008760:	b2d9      	uxtb	r1, r3
 8008762:	4aa4      	ldr	r2, [pc, #656]	; (80089f4 <v_R135+0x31c>)
 8008764:	8813      	ldrh	r3, [r2, #0]
 8008766:	f361 03c3 	bfi	r3, r1, #3, #1
 800876a:	8013      	strh	r3, [r2, #0]

		if(!MF2.FLAG.V){
 800876c:	4ba1      	ldr	r3, [pc, #644]	; (80089f4 <v_R135+0x31c>)
 800876e:	881b      	ldrh	r3, [r3, #0]
 8008770:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8008774:	b2db      	uxtb	r3, r3
 8008776:	2b00      	cmp	r3, #0
 8008778:	d107      	bne.n	800878a <v_R135+0xb2>
			slalomB(10000, SPEED_LOW, V135_OFFSET_VB);
 800877a:	2244      	movs	r2, #68	; 0x44
 800877c:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8008780:	f242 7010 	movw	r0, #10000	; 0x2710
 8008784:	f7fd f826 	bl	80057d4 <slalomB>
			slalomB(10000, SPEED_5, V135_5_OFFSET_VB);
		}else{
			slalomB(10000, SPEED_5, V135_5_OFFSET_B);
		}
	}
}
 8008788:	e187      	b.n	8008a9a <v_R135+0x3c2>
			slalomB(10000, SPEED_LOW, V135_OFFSET_B);
 800878a:	223a      	movs	r2, #58	; 0x3a
 800878c:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8008790:	f242 7010 	movw	r0, #10000	; 0x2710
 8008794:	f7fd f81e 	bl	80057d4 <slalomB>
}
 8008798:	e17f      	b.n	8008a9a <v_R135+0x3c2>
	}else if(run_mode == MIDDLE){
 800879a:	4b95      	ldr	r3, [pc, #596]	; (80089f0 <v_R135+0x318>)
 800879c:	781b      	ldrb	r3, [r3, #0]
 800879e:	b2db      	uxtb	r3, r3
 80087a0:	2b02      	cmp	r3, #2
 80087a2:	d155      	bne.n	8008850 <v_R135+0x178>
		if(!MF2.FLAG.V){
 80087a4:	4b93      	ldr	r3, [pc, #588]	; (80089f4 <v_R135+0x31c>)
 80087a6:	881b      	ldrh	r3, [r3, #0]
 80087a8:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80087ac:	b2db      	uxtb	r3, r3
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d10c      	bne.n	80087cc <v_R135+0xf4>
			slalomF(10000, SPEED_MIDDLE, V135_2_OFFSET_F, NO_WALL, NO_WALL);
 80087b2:	f241 3388 	movw	r3, #5000	; 0x1388
 80087b6:	9300      	str	r3, [sp, #0]
 80087b8:	f241 3388 	movw	r3, #5000	; 0x1388
 80087bc:	2246      	movs	r2, #70	; 0x46
 80087be:	f44f 7116 	mov.w	r1, #600	; 0x258
 80087c2:	f242 7010 	movw	r0, #10000	; 0x2710
 80087c6:	f7fc fe67 	bl	8005498 <slalomF>
 80087ca:	e00b      	b.n	80087e4 <v_R135+0x10c>
			slalomF(10000, SPEED_MIDDLE, V135_2_OFFSET_VF, NO_WALL, NO_WALL);
 80087cc:	f241 3388 	movw	r3, #5000	; 0x1388
 80087d0:	9300      	str	r3, [sp, #0]
 80087d2:	f241 3388 	movw	r3, #5000	; 0x1388
 80087d6:	2237      	movs	r2, #55	; 0x37
 80087d8:	f44f 7116 	mov.w	r1, #600	; 0x258
 80087dc:	f242 7010 	movw	r0, #10000	; 0x2710
 80087e0:	f7fc fe5a 	bl	8005498 <slalomF>
		slalomR(-V135_2_DEGACCEL, -V135_2_OMEGA, -135, SPEED_MIDDLE);
 80087e4:	f44f 7316 	mov.w	r3, #600	; 0x258
 80087e8:	f06f 0286 	mvn.w	r2, #134	; 0x86
 80087ec:	4984      	ldr	r1, [pc, #528]	; (8008a00 <v_R135+0x328>)
 80087ee:	4885      	ldr	r0, [pc, #532]	; (8008a04 <v_R135+0x32c>)
 80087f0:	f7fc fece 	bl	8005590 <slalomR>
		turn_dir(DIR_TURN_R135_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 80087f4:	2103      	movs	r1, #3
 80087f6:	2003      	movs	r0, #3
 80087f8:	f007 fa4a 	bl	800fc90 <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 80087fc:	4b7d      	ldr	r3, [pc, #500]	; (80089f4 <v_R135+0x31c>)
 80087fe:	881b      	ldrh	r3, [r3, #0]
 8008800:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8008804:	b2db      	uxtb	r3, r3
 8008806:	3301      	adds	r3, #1
 8008808:	2b00      	cmp	r3, #0
 800880a:	f003 0301 	and.w	r3, r3, #1
 800880e:	bfb8      	it	lt
 8008810:	425b      	neglt	r3, r3
 8008812:	f003 0301 	and.w	r3, r3, #1
 8008816:	b2d9      	uxtb	r1, r3
 8008818:	4a76      	ldr	r2, [pc, #472]	; (80089f4 <v_R135+0x31c>)
 800881a:	8813      	ldrh	r3, [r2, #0]
 800881c:	f361 03c3 	bfi	r3, r1, #3, #1
 8008820:	8013      	strh	r3, [r2, #0]
		if(!MF2.FLAG.V){
 8008822:	4b74      	ldr	r3, [pc, #464]	; (80089f4 <v_R135+0x31c>)
 8008824:	881b      	ldrh	r3, [r3, #0]
 8008826:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800882a:	b2db      	uxtb	r3, r3
 800882c:	2b00      	cmp	r3, #0
 800882e:	d107      	bne.n	8008840 <v_R135+0x168>
			slalomB(10000, SPEED_MIDDLE, V135_2_OFFSET_VB);
 8008830:	225f      	movs	r2, #95	; 0x5f
 8008832:	f44f 7116 	mov.w	r1, #600	; 0x258
 8008836:	f242 7010 	movw	r0, #10000	; 0x2710
 800883a:	f7fc ffcb 	bl	80057d4 <slalomB>
}
 800883e:	e12c      	b.n	8008a9a <v_R135+0x3c2>
			slalomB(10000, SPEED_MIDDLE, V135_2_OFFSET_B);
 8008840:	2250      	movs	r2, #80	; 0x50
 8008842:	f44f 7116 	mov.w	r1, #600	; 0x258
 8008846:	f242 7010 	movw	r0, #10000	; 0x2710
 800884a:	f7fc ffc3 	bl	80057d4 <slalomB>
}
 800884e:	e124      	b.n	8008a9a <v_R135+0x3c2>
	}else if(run_mode == HIGH){
 8008850:	4b67      	ldr	r3, [pc, #412]	; (80089f0 <v_R135+0x318>)
 8008852:	781b      	ldrb	r3, [r3, #0]
 8008854:	b2db      	uxtb	r3, r3
 8008856:	2b03      	cmp	r3, #3
 8008858:	d155      	bne.n	8008906 <v_R135+0x22e>
		if(!MF2.FLAG.V){
 800885a:	4b66      	ldr	r3, [pc, #408]	; (80089f4 <v_R135+0x31c>)
 800885c:	881b      	ldrh	r3, [r3, #0]
 800885e:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8008862:	b2db      	uxtb	r3, r3
 8008864:	2b00      	cmp	r3, #0
 8008866:	d10c      	bne.n	8008882 <v_R135+0x1aa>
			slalomF(10000, SPEED_HIGH, V135_3_OFFSET_F, NO_WALL, NO_WALL);
 8008868:	f241 3388 	movw	r3, #5000	; 0x1388
 800886c:	9300      	str	r3, [sp, #0]
 800886e:	f241 3388 	movw	r3, #5000	; 0x1388
 8008872:	2255      	movs	r2, #85	; 0x55
 8008874:	f44f 7148 	mov.w	r1, #800	; 0x320
 8008878:	f242 7010 	movw	r0, #10000	; 0x2710
 800887c:	f7fc fe0c 	bl	8005498 <slalomF>
 8008880:	e00b      	b.n	800889a <v_R135+0x1c2>
			slalomF(10000, SPEED_HIGH, V135_3_OFFSET_VF, NO_WALL, NO_WALL);
 8008882:	f241 3388 	movw	r3, #5000	; 0x1388
 8008886:	9300      	str	r3, [sp, #0]
 8008888:	f241 3388 	movw	r3, #5000	; 0x1388
 800888c:	224b      	movs	r2, #75	; 0x4b
 800888e:	f44f 7148 	mov.w	r1, #800	; 0x320
 8008892:	f242 7010 	movw	r0, #10000	; 0x2710
 8008896:	f7fc fdff 	bl	8005498 <slalomF>
		slalomR(-V135_3_DEGACCEL, -V135_3_OMEGA, -135, SPEED_HIGH);
 800889a:	f44f 7348 	mov.w	r3, #800	; 0x320
 800889e:	f06f 0286 	mvn.w	r2, #134	; 0x86
 80088a2:	4959      	ldr	r1, [pc, #356]	; (8008a08 <v_R135+0x330>)
 80088a4:	4859      	ldr	r0, [pc, #356]	; (8008a0c <v_R135+0x334>)
 80088a6:	f7fc fe73 	bl	8005590 <slalomR>
		turn_dir(DIR_TURN_R135_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 80088aa:	2103      	movs	r1, #3
 80088ac:	2003      	movs	r0, #3
 80088ae:	f007 f9ef 	bl	800fc90 <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 80088b2:	4b50      	ldr	r3, [pc, #320]	; (80089f4 <v_R135+0x31c>)
 80088b4:	881b      	ldrh	r3, [r3, #0]
 80088b6:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80088ba:	b2db      	uxtb	r3, r3
 80088bc:	3301      	adds	r3, #1
 80088be:	2b00      	cmp	r3, #0
 80088c0:	f003 0301 	and.w	r3, r3, #1
 80088c4:	bfb8      	it	lt
 80088c6:	425b      	neglt	r3, r3
 80088c8:	f003 0301 	and.w	r3, r3, #1
 80088cc:	b2d9      	uxtb	r1, r3
 80088ce:	4a49      	ldr	r2, [pc, #292]	; (80089f4 <v_R135+0x31c>)
 80088d0:	8813      	ldrh	r3, [r2, #0]
 80088d2:	f361 03c3 	bfi	r3, r1, #3, #1
 80088d6:	8013      	strh	r3, [r2, #0]
		if(!MF2.FLAG.V){
 80088d8:	4b46      	ldr	r3, [pc, #280]	; (80089f4 <v_R135+0x31c>)
 80088da:	881b      	ldrh	r3, [r3, #0]
 80088dc:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80088e0:	b2db      	uxtb	r3, r3
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d107      	bne.n	80088f6 <v_R135+0x21e>
			slalomB(10000, SPEED_HIGH, V135_3_OFFSET_VB);
 80088e6:	2282      	movs	r2, #130	; 0x82
 80088e8:	f44f 7148 	mov.w	r1, #800	; 0x320
 80088ec:	f242 7010 	movw	r0, #10000	; 0x2710
 80088f0:	f7fc ff70 	bl	80057d4 <slalomB>
}
 80088f4:	e0d1      	b.n	8008a9a <v_R135+0x3c2>
			slalomB(10000, SPEED_HIGH, V135_3_OFFSET_B);
 80088f6:	2269      	movs	r2, #105	; 0x69
 80088f8:	f44f 7148 	mov.w	r1, #800	; 0x320
 80088fc:	f242 7010 	movw	r0, #10000	; 0x2710
 8008900:	f7fc ff68 	bl	80057d4 <slalomB>
}
 8008904:	e0c9      	b.n	8008a9a <v_R135+0x3c2>
	}else if(run_mode == HIGH_HIGH){
 8008906:	4b3a      	ldr	r3, [pc, #232]	; (80089f0 <v_R135+0x318>)
 8008908:	781b      	ldrb	r3, [r3, #0]
 800890a:	b2db      	uxtb	r3, r3
 800890c:	2b04      	cmp	r3, #4
 800890e:	d155      	bne.n	80089bc <v_R135+0x2e4>
		if(!MF2.FLAG.V){
 8008910:	4b38      	ldr	r3, [pc, #224]	; (80089f4 <v_R135+0x31c>)
 8008912:	881b      	ldrh	r3, [r3, #0]
 8008914:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8008918:	b2db      	uxtb	r3, r3
 800891a:	2b00      	cmp	r3, #0
 800891c:	d10c      	bne.n	8008938 <v_R135+0x260>
			slalomF(10000, SPEED_HIGH_HIGH, V135_4_OFFSET_F, NO_WALL, NO_WALL);
 800891e:	f241 3388 	movw	r3, #5000	; 0x1388
 8008922:	9300      	str	r3, [sp, #0]
 8008924:	f241 3388 	movw	r3, #5000	; 0x1388
 8008928:	2243      	movs	r2, #67	; 0x43
 800892a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800892e:	f242 7010 	movw	r0, #10000	; 0x2710
 8008932:	f7fc fdb1 	bl	8005498 <slalomF>
 8008936:	e00b      	b.n	8008950 <v_R135+0x278>
			slalomF(10000, SPEED_HIGH_HIGH, V135_4_OFFSET_VF, NO_WALL, NO_WALL);
 8008938:	f241 3388 	movw	r3, #5000	; 0x1388
 800893c:	9300      	str	r3, [sp, #0]
 800893e:	f241 3388 	movw	r3, #5000	; 0x1388
 8008942:	2243      	movs	r2, #67	; 0x43
 8008944:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8008948:	f242 7010 	movw	r0, #10000	; 0x2710
 800894c:	f7fc fda4 	bl	8005498 <slalomF>
		slalomR(-V135_4_DEGACCEL, -V135_4_OMEGA, -135, SPEED_HIGH_HIGH);
 8008950:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008954:	f06f 0286 	mvn.w	r2, #134	; 0x86
 8008958:	492d      	ldr	r1, [pc, #180]	; (8008a10 <v_R135+0x338>)
 800895a:	482e      	ldr	r0, [pc, #184]	; (8008a14 <v_R135+0x33c>)
 800895c:	f7fc fe18 	bl	8005590 <slalomR>
		turn_dir(DIR_TURN_R135_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 8008960:	2103      	movs	r1, #3
 8008962:	2003      	movs	r0, #3
 8008964:	f007 f994 	bl	800fc90 <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 8008968:	4b22      	ldr	r3, [pc, #136]	; (80089f4 <v_R135+0x31c>)
 800896a:	881b      	ldrh	r3, [r3, #0]
 800896c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8008970:	b2db      	uxtb	r3, r3
 8008972:	3301      	adds	r3, #1
 8008974:	2b00      	cmp	r3, #0
 8008976:	f003 0301 	and.w	r3, r3, #1
 800897a:	bfb8      	it	lt
 800897c:	425b      	neglt	r3, r3
 800897e:	f003 0301 	and.w	r3, r3, #1
 8008982:	b2d9      	uxtb	r1, r3
 8008984:	4a1b      	ldr	r2, [pc, #108]	; (80089f4 <v_R135+0x31c>)
 8008986:	8813      	ldrh	r3, [r2, #0]
 8008988:	f361 03c3 	bfi	r3, r1, #3, #1
 800898c:	8013      	strh	r3, [r2, #0]
		if(!MF2.FLAG.V){
 800898e:	4b19      	ldr	r3, [pc, #100]	; (80089f4 <v_R135+0x31c>)
 8008990:	881b      	ldrh	r3, [r3, #0]
 8008992:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8008996:	b2db      	uxtb	r3, r3
 8008998:	2b00      	cmp	r3, #0
 800899a:	d107      	bne.n	80089ac <v_R135+0x2d4>
			slalomB(10000, SPEED_HIGH_HIGH, V135_4_OFFSET_VB);
 800899c:	2232      	movs	r2, #50	; 0x32
 800899e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80089a2:	f242 7010 	movw	r0, #10000	; 0x2710
 80089a6:	f7fc ff15 	bl	80057d4 <slalomB>
}
 80089aa:	e076      	b.n	8008a9a <v_R135+0x3c2>
			slalomB(10000, SPEED_HIGH_HIGH, V135_4_OFFSET_B);
 80089ac:	2232      	movs	r2, #50	; 0x32
 80089ae:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80089b2:	f242 7010 	movw	r0, #10000	; 0x2710
 80089b6:	f7fc ff0d 	bl	80057d4 <slalomB>
}
 80089ba:	e06e      	b.n	8008a9a <v_R135+0x3c2>
	}else if(run_mode == 5){
 80089bc:	4b0c      	ldr	r3, [pc, #48]	; (80089f0 <v_R135+0x318>)
 80089be:	781b      	ldrb	r3, [r3, #0]
 80089c0:	b2db      	uxtb	r3, r3
 80089c2:	2b05      	cmp	r3, #5
 80089c4:	d169      	bne.n	8008a9a <v_R135+0x3c2>
		if(!MF2.FLAG.V){
 80089c6:	4b0b      	ldr	r3, [pc, #44]	; (80089f4 <v_R135+0x31c>)
 80089c8:	881b      	ldrh	r3, [r3, #0]
 80089ca:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80089ce:	b2db      	uxtb	r3, r3
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d121      	bne.n	8008a18 <v_R135+0x340>
			slalomF(10000, SPEED_5, V135_5_OFFSET_F, NO_WALL, NO_WALL);
 80089d4:	f241 3388 	movw	r3, #5000	; 0x1388
 80089d8:	9300      	str	r3, [sp, #0]
 80089da:	f241 3388 	movw	r3, #5000	; 0x1388
 80089de:	2228      	movs	r2, #40	; 0x28
 80089e0:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 80089e4:	f242 7010 	movw	r0, #10000	; 0x2710
 80089e8:	f7fc fd56 	bl	8005498 <slalomF>
 80089ec:	e020      	b.n	8008a30 <v_R135+0x358>
 80089ee:	bf00      	nop
 80089f0:	20000456 	.word	0x20000456
 80089f4:	20000f64 	.word	0x20000f64
 80089f8:	fffffed4 	.word	0xfffffed4
 80089fc:	fffff448 	.word	0xfffff448
 8008a00:	fffffe0c 	.word	0xfffffe0c
 8008a04:	ffffec78 	.word	0xffffec78
 8008a08:	fffffce0 	.word	0xfffffce0
 8008a0c:	ffffe0c0 	.word	0xffffe0c0
 8008a10:	fffffc18 	.word	0xfffffc18
 8008a14:	ffffd8f0 	.word	0xffffd8f0
			slalomF(10000, SPEED_5, V135_5_OFFSET_VF, NO_WALL, NO_WALL);
 8008a18:	f241 3388 	movw	r3, #5000	; 0x1388
 8008a1c:	9300      	str	r3, [sp, #0]
 8008a1e:	f241 3388 	movw	r3, #5000	; 0x1388
 8008a22:	2243      	movs	r2, #67	; 0x43
 8008a24:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 8008a28:	f242 7010 	movw	r0, #10000	; 0x2710
 8008a2c:	f7fc fd34 	bl	8005498 <slalomF>
		slalomR(-V135_5_DEGACCEL, -V135_5_OMEGA, -135, SPEED_5);
 8008a30:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
 8008a34:	f06f 0286 	mvn.w	r2, #134	; 0x86
 8008a38:	4919      	ldr	r1, [pc, #100]	; (8008aa0 <v_R135+0x3c8>)
 8008a3a:	481a      	ldr	r0, [pc, #104]	; (8008aa4 <v_R135+0x3cc>)
 8008a3c:	f7fc fda8 	bl	8005590 <slalomR>
		turn_dir(DIR_TURN_R135_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 8008a40:	2103      	movs	r1, #3
 8008a42:	2003      	movs	r0, #3
 8008a44:	f007 f924 	bl	800fc90 <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 8008a48:	4b17      	ldr	r3, [pc, #92]	; (8008aa8 <v_R135+0x3d0>)
 8008a4a:	881b      	ldrh	r3, [r3, #0]
 8008a4c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8008a50:	b2db      	uxtb	r3, r3
 8008a52:	3301      	adds	r3, #1
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	f003 0301 	and.w	r3, r3, #1
 8008a5a:	bfb8      	it	lt
 8008a5c:	425b      	neglt	r3, r3
 8008a5e:	f003 0301 	and.w	r3, r3, #1
 8008a62:	b2d9      	uxtb	r1, r3
 8008a64:	4a10      	ldr	r2, [pc, #64]	; (8008aa8 <v_R135+0x3d0>)
 8008a66:	8813      	ldrh	r3, [r2, #0]
 8008a68:	f361 03c3 	bfi	r3, r1, #3, #1
 8008a6c:	8013      	strh	r3, [r2, #0]
		if(!MF2.FLAG.V){
 8008a6e:	4b0e      	ldr	r3, [pc, #56]	; (8008aa8 <v_R135+0x3d0>)
 8008a70:	881b      	ldrh	r3, [r3, #0]
 8008a72:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8008a76:	b2db      	uxtb	r3, r3
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d107      	bne.n	8008a8c <v_R135+0x3b4>
			slalomB(10000, SPEED_5, V135_5_OFFSET_VB);
 8008a7c:	2232      	movs	r2, #50	; 0x32
 8008a7e:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 8008a82:	f242 7010 	movw	r0, #10000	; 0x2710
 8008a86:	f7fc fea5 	bl	80057d4 <slalomB>
}
 8008a8a:	e006      	b.n	8008a9a <v_R135+0x3c2>
			slalomB(10000, SPEED_5, V135_5_OFFSET_B);
 8008a8c:	2219      	movs	r2, #25
 8008a8e:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 8008a92:	f242 7010 	movw	r0, #10000	; 0x2710
 8008a96:	f7fc fe9d 	bl	80057d4 <slalomB>
}
 8008a9a:	bf00      	nop
 8008a9c:	46bd      	mov	sp, r7
 8008a9e:	bd80      	pop	{r7, pc}
 8008aa0:	fffffc18 	.word	0xfffffc18
 8008aa4:	ffffd120 	.word	0xffffd120
 8008aa8:	20000f64 	.word	0x20000f64

08008aac <v_L135>:
//v_L135
// 区画中心から左に135度回転する　ゴール用
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void v_L135(void){
 8008aac:	b580      	push	{r7, lr}
 8008aae:	b082      	sub	sp, #8
 8008ab0:	af02      	add	r7, sp, #8
	full_led_write(PURPLE);
 8008ab2:	2005      	movs	r0, #5
 8008ab4:	f008 ff80 	bl	80119b8 <full_led_write>
	if(run_mode == LOW){
 8008ab8:	4bc4      	ldr	r3, [pc, #784]	; (8008dcc <v_L135+0x320>)
 8008aba:	781b      	ldrb	r3, [r3, #0]
 8008abc:	b2db      	uxtb	r3, r3
 8008abe:	2b01      	cmp	r3, #1
 8008ac0:	d156      	bne.n	8008b70 <v_L135+0xc4>
		if(!MF2.FLAG.V){
 8008ac2:	4bc3      	ldr	r3, [pc, #780]	; (8008dd0 <v_L135+0x324>)
 8008ac4:	881b      	ldrh	r3, [r3, #0]
 8008ac6:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8008aca:	b2db      	uxtb	r3, r3
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d10c      	bne.n	8008aea <v_L135+0x3e>
			slalomF(10000, SPEED_LOW, V135_OFFSET_F, NO_WALL, NO_WALL);
 8008ad0:	f241 3388 	movw	r3, #5000	; 0x1388
 8008ad4:	9300      	str	r3, [sp, #0]
 8008ad6:	f241 3388 	movw	r3, #5000	; 0x1388
 8008ada:	2244      	movs	r2, #68	; 0x44
 8008adc:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8008ae0:	f242 7010 	movw	r0, #10000	; 0x2710
 8008ae4:	f7fc fcd8 	bl	8005498 <slalomF>
 8008ae8:	e00b      	b.n	8008b02 <v_L135+0x56>
		}else{
			slalomF(10000, SPEED_LOW, V135_OFFSET_VF, NO_WALL, NO_WALL);
 8008aea:	f241 3388 	movw	r3, #5000	; 0x1388
 8008aee:	9300      	str	r3, [sp, #0]
 8008af0:	f241 3388 	movw	r3, #5000	; 0x1388
 8008af4:	223a      	movs	r2, #58	; 0x3a
 8008af6:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8008afa:	f242 7010 	movw	r0, #10000	; 0x2710
 8008afe:	f7fc fccb 	bl	8005498 <slalomF>
		}
		slalomR(V135_DEGACCEL, V135_OMEGA, 135, SPEED_LOW);
 8008b02:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8008b06:	2287      	movs	r2, #135	; 0x87
 8008b08:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8008b0c:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8008b10:	f7fc fd3e 	bl	8005590 <slalomR>

		turn_dir(DIR_TURN_L135_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 8008b14:	2103      	movs	r1, #3
 8008b16:	20fd      	movs	r0, #253	; 0xfd
 8008b18:	f007 f8ba 	bl	800fc90 <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 8008b1c:	4bac      	ldr	r3, [pc, #688]	; (8008dd0 <v_L135+0x324>)
 8008b1e:	881b      	ldrh	r3, [r3, #0]
 8008b20:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8008b24:	b2db      	uxtb	r3, r3
 8008b26:	3301      	adds	r3, #1
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	f003 0301 	and.w	r3, r3, #1
 8008b2e:	bfb8      	it	lt
 8008b30:	425b      	neglt	r3, r3
 8008b32:	f003 0301 	and.w	r3, r3, #1
 8008b36:	b2d9      	uxtb	r1, r3
 8008b38:	4aa5      	ldr	r2, [pc, #660]	; (8008dd0 <v_L135+0x324>)
 8008b3a:	8813      	ldrh	r3, [r2, #0]
 8008b3c:	f361 03c3 	bfi	r3, r1, #3, #1
 8008b40:	8013      	strh	r3, [r2, #0]

		if(!MF2.FLAG.V){
 8008b42:	4ba3      	ldr	r3, [pc, #652]	; (8008dd0 <v_L135+0x324>)
 8008b44:	881b      	ldrh	r3, [r3, #0]
 8008b46:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8008b4a:	b2db      	uxtb	r3, r3
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d107      	bne.n	8008b60 <v_L135+0xb4>
			slalomB(10000, SPEED_LOW, V135_OFFSET_VB);
 8008b50:	2244      	movs	r2, #68	; 0x44
 8008b52:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8008b56:	f242 7010 	movw	r0, #10000	; 0x2710
 8008b5a:	f7fc fe3b 	bl	80057d4 <slalomB>
			slalomB(10000, SPEED_5, V135_5_OFFSET_VB);
		}else{
			slalomB(10000, SPEED_5, V135_5_OFFSET_B);
		}
	}
}
 8008b5e:	e17b      	b.n	8008e58 <v_L135+0x3ac>
			slalomB(10000, SPEED_LOW, V135_OFFSET_B);
 8008b60:	223a      	movs	r2, #58	; 0x3a
 8008b62:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8008b66:	f242 7010 	movw	r0, #10000	; 0x2710
 8008b6a:	f7fc fe33 	bl	80057d4 <slalomB>
}
 8008b6e:	e173      	b.n	8008e58 <v_L135+0x3ac>
	}else if(run_mode == MIDDLE){
 8008b70:	4b96      	ldr	r3, [pc, #600]	; (8008dcc <v_L135+0x320>)
 8008b72:	781b      	ldrb	r3, [r3, #0]
 8008b74:	b2db      	uxtb	r3, r3
 8008b76:	2b02      	cmp	r3, #2
 8008b78:	d156      	bne.n	8008c28 <v_L135+0x17c>
		if(!MF2.FLAG.V){
 8008b7a:	4b95      	ldr	r3, [pc, #596]	; (8008dd0 <v_L135+0x324>)
 8008b7c:	881b      	ldrh	r3, [r3, #0]
 8008b7e:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8008b82:	b2db      	uxtb	r3, r3
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d10c      	bne.n	8008ba2 <v_L135+0xf6>
			slalomF(10000, SPEED_MIDDLE, V135_2_OFFSET_F, NO_WALL, NO_WALL);
 8008b88:	f241 3388 	movw	r3, #5000	; 0x1388
 8008b8c:	9300      	str	r3, [sp, #0]
 8008b8e:	f241 3388 	movw	r3, #5000	; 0x1388
 8008b92:	2246      	movs	r2, #70	; 0x46
 8008b94:	f44f 7116 	mov.w	r1, #600	; 0x258
 8008b98:	f242 7010 	movw	r0, #10000	; 0x2710
 8008b9c:	f7fc fc7c 	bl	8005498 <slalomF>
 8008ba0:	e00b      	b.n	8008bba <v_L135+0x10e>
			slalomF(10000, SPEED_MIDDLE, V135_2_OFFSET_VF, NO_WALL, NO_WALL);
 8008ba2:	f241 3388 	movw	r3, #5000	; 0x1388
 8008ba6:	9300      	str	r3, [sp, #0]
 8008ba8:	f241 3388 	movw	r3, #5000	; 0x1388
 8008bac:	2237      	movs	r2, #55	; 0x37
 8008bae:	f44f 7116 	mov.w	r1, #600	; 0x258
 8008bb2:	f242 7010 	movw	r0, #10000	; 0x2710
 8008bb6:	f7fc fc6f 	bl	8005498 <slalomF>
		slalomR(V135_2_DEGACCEL, V135_2_OMEGA, 135, SPEED_MIDDLE);
 8008bba:	f44f 7316 	mov.w	r3, #600	; 0x258
 8008bbe:	2287      	movs	r2, #135	; 0x87
 8008bc0:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8008bc4:	f241 3088 	movw	r0, #5000	; 0x1388
 8008bc8:	f7fc fce2 	bl	8005590 <slalomR>
		turn_dir(DIR_TURN_L135_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 8008bcc:	2103      	movs	r1, #3
 8008bce:	20fd      	movs	r0, #253	; 0xfd
 8008bd0:	f007 f85e 	bl	800fc90 <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 8008bd4:	4b7e      	ldr	r3, [pc, #504]	; (8008dd0 <v_L135+0x324>)
 8008bd6:	881b      	ldrh	r3, [r3, #0]
 8008bd8:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8008bdc:	b2db      	uxtb	r3, r3
 8008bde:	3301      	adds	r3, #1
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	f003 0301 	and.w	r3, r3, #1
 8008be6:	bfb8      	it	lt
 8008be8:	425b      	neglt	r3, r3
 8008bea:	f003 0301 	and.w	r3, r3, #1
 8008bee:	b2d9      	uxtb	r1, r3
 8008bf0:	4a77      	ldr	r2, [pc, #476]	; (8008dd0 <v_L135+0x324>)
 8008bf2:	8813      	ldrh	r3, [r2, #0]
 8008bf4:	f361 03c3 	bfi	r3, r1, #3, #1
 8008bf8:	8013      	strh	r3, [r2, #0]
		if(!MF2.FLAG.V){
 8008bfa:	4b75      	ldr	r3, [pc, #468]	; (8008dd0 <v_L135+0x324>)
 8008bfc:	881b      	ldrh	r3, [r3, #0]
 8008bfe:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8008c02:	b2db      	uxtb	r3, r3
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d107      	bne.n	8008c18 <v_L135+0x16c>
			slalomB(10000, SPEED_MIDDLE, V135_2_OFFSET_VB);
 8008c08:	225f      	movs	r2, #95	; 0x5f
 8008c0a:	f44f 7116 	mov.w	r1, #600	; 0x258
 8008c0e:	f242 7010 	movw	r0, #10000	; 0x2710
 8008c12:	f7fc fddf 	bl	80057d4 <slalomB>
}
 8008c16:	e11f      	b.n	8008e58 <v_L135+0x3ac>
			slalomB(10000, SPEED_MIDDLE, V135_2_OFFSET_B);
 8008c18:	2250      	movs	r2, #80	; 0x50
 8008c1a:	f44f 7116 	mov.w	r1, #600	; 0x258
 8008c1e:	f242 7010 	movw	r0, #10000	; 0x2710
 8008c22:	f7fc fdd7 	bl	80057d4 <slalomB>
}
 8008c26:	e117      	b.n	8008e58 <v_L135+0x3ac>
	}else if(run_mode == HIGH){
 8008c28:	4b68      	ldr	r3, [pc, #416]	; (8008dcc <v_L135+0x320>)
 8008c2a:	781b      	ldrb	r3, [r3, #0]
 8008c2c:	b2db      	uxtb	r3, r3
 8008c2e:	2b03      	cmp	r3, #3
 8008c30:	d156      	bne.n	8008ce0 <v_L135+0x234>
		if(!MF2.FLAG.V){
 8008c32:	4b67      	ldr	r3, [pc, #412]	; (8008dd0 <v_L135+0x324>)
 8008c34:	881b      	ldrh	r3, [r3, #0]
 8008c36:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8008c3a:	b2db      	uxtb	r3, r3
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d10c      	bne.n	8008c5a <v_L135+0x1ae>
			slalomF(10000, SPEED_HIGH, V135_3_OFFSET_F, NO_WALL, NO_WALL);
 8008c40:	f241 3388 	movw	r3, #5000	; 0x1388
 8008c44:	9300      	str	r3, [sp, #0]
 8008c46:	f241 3388 	movw	r3, #5000	; 0x1388
 8008c4a:	2255      	movs	r2, #85	; 0x55
 8008c4c:	f44f 7148 	mov.w	r1, #800	; 0x320
 8008c50:	f242 7010 	movw	r0, #10000	; 0x2710
 8008c54:	f7fc fc20 	bl	8005498 <slalomF>
 8008c58:	e00b      	b.n	8008c72 <v_L135+0x1c6>
			slalomF(10000, SPEED_HIGH, V135_3_OFFSET_VF, NO_WALL, NO_WALL);
 8008c5a:	f241 3388 	movw	r3, #5000	; 0x1388
 8008c5e:	9300      	str	r3, [sp, #0]
 8008c60:	f241 3388 	movw	r3, #5000	; 0x1388
 8008c64:	224b      	movs	r2, #75	; 0x4b
 8008c66:	f44f 7148 	mov.w	r1, #800	; 0x320
 8008c6a:	f242 7010 	movw	r0, #10000	; 0x2710
 8008c6e:	f7fc fc13 	bl	8005498 <slalomF>
		slalomR(V135_3_DEGACCEL, V135_3_OMEGA, 135, SPEED_HIGH);
 8008c72:	f44f 7348 	mov.w	r3, #800	; 0x320
 8008c76:	2287      	movs	r2, #135	; 0x87
 8008c78:	f44f 7148 	mov.w	r1, #800	; 0x320
 8008c7c:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 8008c80:	f7fc fc86 	bl	8005590 <slalomR>
		turn_dir(DIR_TURN_L135_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 8008c84:	2103      	movs	r1, #3
 8008c86:	20fd      	movs	r0, #253	; 0xfd
 8008c88:	f007 f802 	bl	800fc90 <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 8008c8c:	4b50      	ldr	r3, [pc, #320]	; (8008dd0 <v_L135+0x324>)
 8008c8e:	881b      	ldrh	r3, [r3, #0]
 8008c90:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8008c94:	b2db      	uxtb	r3, r3
 8008c96:	3301      	adds	r3, #1
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	f003 0301 	and.w	r3, r3, #1
 8008c9e:	bfb8      	it	lt
 8008ca0:	425b      	neglt	r3, r3
 8008ca2:	f003 0301 	and.w	r3, r3, #1
 8008ca6:	b2d9      	uxtb	r1, r3
 8008ca8:	4a49      	ldr	r2, [pc, #292]	; (8008dd0 <v_L135+0x324>)
 8008caa:	8813      	ldrh	r3, [r2, #0]
 8008cac:	f361 03c3 	bfi	r3, r1, #3, #1
 8008cb0:	8013      	strh	r3, [r2, #0]
		if(!MF2.FLAG.V){
 8008cb2:	4b47      	ldr	r3, [pc, #284]	; (8008dd0 <v_L135+0x324>)
 8008cb4:	881b      	ldrh	r3, [r3, #0]
 8008cb6:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8008cba:	b2db      	uxtb	r3, r3
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d107      	bne.n	8008cd0 <v_L135+0x224>
			slalomB(10000, SPEED_HIGH, V135_3_OFFSET_VB);
 8008cc0:	2282      	movs	r2, #130	; 0x82
 8008cc2:	f44f 7148 	mov.w	r1, #800	; 0x320
 8008cc6:	f242 7010 	movw	r0, #10000	; 0x2710
 8008cca:	f7fc fd83 	bl	80057d4 <slalomB>
}
 8008cce:	e0c3      	b.n	8008e58 <v_L135+0x3ac>
			slalomB(10000, SPEED_HIGH, V135_3_OFFSET_B);
 8008cd0:	2269      	movs	r2, #105	; 0x69
 8008cd2:	f44f 7148 	mov.w	r1, #800	; 0x320
 8008cd6:	f242 7010 	movw	r0, #10000	; 0x2710
 8008cda:	f7fc fd7b 	bl	80057d4 <slalomB>
}
 8008cde:	e0bb      	b.n	8008e58 <v_L135+0x3ac>
	}else if(run_mode == HIGH_HIGH){
 8008ce0:	4b3a      	ldr	r3, [pc, #232]	; (8008dcc <v_L135+0x320>)
 8008ce2:	781b      	ldrb	r3, [r3, #0]
 8008ce4:	b2db      	uxtb	r3, r3
 8008ce6:	2b04      	cmp	r3, #4
 8008ce8:	d156      	bne.n	8008d98 <v_L135+0x2ec>
		if(!MF2.FLAG.V){
 8008cea:	4b39      	ldr	r3, [pc, #228]	; (8008dd0 <v_L135+0x324>)
 8008cec:	881b      	ldrh	r3, [r3, #0]
 8008cee:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8008cf2:	b2db      	uxtb	r3, r3
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d10c      	bne.n	8008d12 <v_L135+0x266>
			slalomF(10000, SPEED_HIGH_HIGH, V135_4_OFFSET_F, NO_WALL, NO_WALL);
 8008cf8:	f241 3388 	movw	r3, #5000	; 0x1388
 8008cfc:	9300      	str	r3, [sp, #0]
 8008cfe:	f241 3388 	movw	r3, #5000	; 0x1388
 8008d02:	2243      	movs	r2, #67	; 0x43
 8008d04:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8008d08:	f242 7010 	movw	r0, #10000	; 0x2710
 8008d0c:	f7fc fbc4 	bl	8005498 <slalomF>
 8008d10:	e00b      	b.n	8008d2a <v_L135+0x27e>
			slalomF(10000, SPEED_HIGH_HIGH, V135_4_OFFSET_VF, NO_WALL, NO_WALL);
 8008d12:	f241 3388 	movw	r3, #5000	; 0x1388
 8008d16:	9300      	str	r3, [sp, #0]
 8008d18:	f241 3388 	movw	r3, #5000	; 0x1388
 8008d1c:	2243      	movs	r2, #67	; 0x43
 8008d1e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8008d22:	f242 7010 	movw	r0, #10000	; 0x2710
 8008d26:	f7fc fbb7 	bl	8005498 <slalomF>
		slalomR(V135_4_DEGACCEL, V135_4_OMEGA, 135, SPEED_HIGH_HIGH);
 8008d2a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008d2e:	2287      	movs	r2, #135	; 0x87
 8008d30:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8008d34:	f242 7010 	movw	r0, #10000	; 0x2710
 8008d38:	f7fc fc2a 	bl	8005590 <slalomR>
		turn_dir(DIR_TURN_L135_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 8008d3c:	2103      	movs	r1, #3
 8008d3e:	20fd      	movs	r0, #253	; 0xfd
 8008d40:	f006 ffa6 	bl	800fc90 <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 8008d44:	4b22      	ldr	r3, [pc, #136]	; (8008dd0 <v_L135+0x324>)
 8008d46:	881b      	ldrh	r3, [r3, #0]
 8008d48:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8008d4c:	b2db      	uxtb	r3, r3
 8008d4e:	3301      	adds	r3, #1
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	f003 0301 	and.w	r3, r3, #1
 8008d56:	bfb8      	it	lt
 8008d58:	425b      	neglt	r3, r3
 8008d5a:	f003 0301 	and.w	r3, r3, #1
 8008d5e:	b2d9      	uxtb	r1, r3
 8008d60:	4a1b      	ldr	r2, [pc, #108]	; (8008dd0 <v_L135+0x324>)
 8008d62:	8813      	ldrh	r3, [r2, #0]
 8008d64:	f361 03c3 	bfi	r3, r1, #3, #1
 8008d68:	8013      	strh	r3, [r2, #0]
		if(!MF2.FLAG.V){
 8008d6a:	4b19      	ldr	r3, [pc, #100]	; (8008dd0 <v_L135+0x324>)
 8008d6c:	881b      	ldrh	r3, [r3, #0]
 8008d6e:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8008d72:	b2db      	uxtb	r3, r3
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d107      	bne.n	8008d88 <v_L135+0x2dc>
			slalomB(10000, SPEED_HIGH_HIGH, V135_4_OFFSET_VB);
 8008d78:	2232      	movs	r2, #50	; 0x32
 8008d7a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8008d7e:	f242 7010 	movw	r0, #10000	; 0x2710
 8008d82:	f7fc fd27 	bl	80057d4 <slalomB>
}
 8008d86:	e067      	b.n	8008e58 <v_L135+0x3ac>
			slalomB(10000, SPEED_HIGH_HIGH, V135_4_OFFSET_B);
 8008d88:	2232      	movs	r2, #50	; 0x32
 8008d8a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8008d8e:	f242 7010 	movw	r0, #10000	; 0x2710
 8008d92:	f7fc fd1f 	bl	80057d4 <slalomB>
}
 8008d96:	e05f      	b.n	8008e58 <v_L135+0x3ac>
	}else if(run_mode == 5){
 8008d98:	4b0c      	ldr	r3, [pc, #48]	; (8008dcc <v_L135+0x320>)
 8008d9a:	781b      	ldrb	r3, [r3, #0]
 8008d9c:	b2db      	uxtb	r3, r3
 8008d9e:	2b05      	cmp	r3, #5
 8008da0:	d15a      	bne.n	8008e58 <v_L135+0x3ac>
		if(!MF2.FLAG.V){
 8008da2:	4b0b      	ldr	r3, [pc, #44]	; (8008dd0 <v_L135+0x324>)
 8008da4:	881b      	ldrh	r3, [r3, #0]
 8008da6:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8008daa:	b2db      	uxtb	r3, r3
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d111      	bne.n	8008dd4 <v_L135+0x328>
			slalomF(10000, SPEED_5, V135_5_OFFSET_F, NO_WALL, NO_WALL);
 8008db0:	f241 3388 	movw	r3, #5000	; 0x1388
 8008db4:	9300      	str	r3, [sp, #0]
 8008db6:	f241 3388 	movw	r3, #5000	; 0x1388
 8008dba:	2228      	movs	r2, #40	; 0x28
 8008dbc:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 8008dc0:	f242 7010 	movw	r0, #10000	; 0x2710
 8008dc4:	f7fc fb68 	bl	8005498 <slalomF>
 8008dc8:	e010      	b.n	8008dec <v_L135+0x340>
 8008dca:	bf00      	nop
 8008dcc:	20000456 	.word	0x20000456
 8008dd0:	20000f64 	.word	0x20000f64
			slalomF(10000, SPEED_5, V135_5_OFFSET_VF, NO_WALL, NO_WALL);
 8008dd4:	f241 3388 	movw	r3, #5000	; 0x1388
 8008dd8:	9300      	str	r3, [sp, #0]
 8008dda:	f241 3388 	movw	r3, #5000	; 0x1388
 8008dde:	2243      	movs	r2, #67	; 0x43
 8008de0:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 8008de4:	f242 7010 	movw	r0, #10000	; 0x2710
 8008de8:	f7fc fb56 	bl	8005498 <slalomF>
		slalomR(V135_5_DEGACCEL, V135_5_OMEGA, 135, SPEED_5);
 8008dec:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
 8008df0:	2287      	movs	r2, #135	; 0x87
 8008df2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8008df6:	f642 60e0 	movw	r0, #12000	; 0x2ee0
 8008dfa:	f7fc fbc9 	bl	8005590 <slalomR>
		turn_dir(DIR_TURN_L135_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 8008dfe:	2103      	movs	r1, #3
 8008e00:	20fd      	movs	r0, #253	; 0xfd
 8008e02:	f006 ff45 	bl	800fc90 <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 8008e06:	4b16      	ldr	r3, [pc, #88]	; (8008e60 <v_L135+0x3b4>)
 8008e08:	881b      	ldrh	r3, [r3, #0]
 8008e0a:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8008e0e:	b2db      	uxtb	r3, r3
 8008e10:	3301      	adds	r3, #1
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	f003 0301 	and.w	r3, r3, #1
 8008e18:	bfb8      	it	lt
 8008e1a:	425b      	neglt	r3, r3
 8008e1c:	f003 0301 	and.w	r3, r3, #1
 8008e20:	b2d9      	uxtb	r1, r3
 8008e22:	4a0f      	ldr	r2, [pc, #60]	; (8008e60 <v_L135+0x3b4>)
 8008e24:	8813      	ldrh	r3, [r2, #0]
 8008e26:	f361 03c3 	bfi	r3, r1, #3, #1
 8008e2a:	8013      	strh	r3, [r2, #0]
		if(!MF2.FLAG.V){
 8008e2c:	4b0c      	ldr	r3, [pc, #48]	; (8008e60 <v_L135+0x3b4>)
 8008e2e:	881b      	ldrh	r3, [r3, #0]
 8008e30:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8008e34:	b2db      	uxtb	r3, r3
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d107      	bne.n	8008e4a <v_L135+0x39e>
			slalomB(10000, SPEED_5, V135_5_OFFSET_VB);
 8008e3a:	2232      	movs	r2, #50	; 0x32
 8008e3c:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 8008e40:	f242 7010 	movw	r0, #10000	; 0x2710
 8008e44:	f7fc fcc6 	bl	80057d4 <slalomB>
}
 8008e48:	e006      	b.n	8008e58 <v_L135+0x3ac>
			slalomB(10000, SPEED_5, V135_5_OFFSET_B);
 8008e4a:	2219      	movs	r2, #25
 8008e4c:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 8008e50:	f242 7010 	movw	r0, #10000	; 0x2710
 8008e54:	f7fc fcbe 	bl	80057d4 <slalomB>
}
 8008e58:	bf00      	nop
 8008e5a:	46bd      	mov	sp, r7
 8008e5c:	bd80      	pop	{r7, pc}
 8008e5e:	bf00      	nop
 8008e60:	20000f64 	.word	0x20000f64

08008e64 <v_R135D>:
//v_R135D
// 区画中心から右に135度回転する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void v_R135D(void){
 8008e64:	b580      	push	{r7, lr}
 8008e66:	b082      	sub	sp, #8
 8008e68:	af02      	add	r7, sp, #8
	full_led_write(YELLOW);
 8008e6a:	2006      	movs	r0, #6
 8008e6c:	f008 fda4 	bl	80119b8 <full_led_write>
	if(run_mode == LOW){
 8008e70:	4b9e      	ldr	r3, [pc, #632]	; (80090ec <v_R135D+0x288>)
 8008e72:	781b      	ldrb	r3, [r3, #0]
 8008e74:	b2db      	uxtb	r3, r3
 8008e76:	2b01      	cmp	r3, #1
 8008e78:	d139      	bne.n	8008eee <v_R135D+0x8a>
		slalomF(10000, SPEED_LOW, V135_OFFSET_VF, NO_WALL, NO_WALL);
 8008e7a:	f241 3388 	movw	r3, #5000	; 0x1388
 8008e7e:	9300      	str	r3, [sp, #0]
 8008e80:	f241 3388 	movw	r3, #5000	; 0x1388
 8008e84:	223a      	movs	r2, #58	; 0x3a
 8008e86:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8008e8a:	f242 7010 	movw	r0, #10000	; 0x2710
 8008e8e:	f7fc fb03 	bl	8005498 <slalomF>
		slalomR(-V135_DEGACCEL, -V135_OMEGA, -135, SPEED_LOW);
 8008e92:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8008e96:	f06f 0286 	mvn.w	r2, #134	; 0x86
 8008e9a:	4995      	ldr	r1, [pc, #596]	; (80090f0 <v_R135D+0x28c>)
 8008e9c:	4895      	ldr	r0, [pc, #596]	; (80090f4 <v_R135D+0x290>)
 8008e9e:	f7fc fb77 	bl	8005590 <slalomR>

		turn_dir(DIR_TURN_R135_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 8008ea2:	2103      	movs	r1, #3
 8008ea4:	2003      	movs	r0, #3
 8008ea6:	f006 fef3 	bl	800fc90 <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 8008eaa:	4b93      	ldr	r3, [pc, #588]	; (80090f8 <v_R135D+0x294>)
 8008eac:	881b      	ldrh	r3, [r3, #0]
 8008eae:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8008eb2:	b2db      	uxtb	r3, r3
 8008eb4:	3301      	adds	r3, #1
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	f003 0301 	and.w	r3, r3, #1
 8008ebc:	bfb8      	it	lt
 8008ebe:	425b      	neglt	r3, r3
 8008ec0:	f003 0301 	and.w	r3, r3, #1
 8008ec4:	b2d9      	uxtb	r1, r3
 8008ec6:	4a8c      	ldr	r2, [pc, #560]	; (80090f8 <v_R135D+0x294>)
 8008ec8:	8813      	ldrh	r3, [r2, #0]
 8008eca:	f361 03c3 	bfi	r3, r1, #3, #1
 8008ece:	8013      	strh	r3, [r2, #0]

		slalomB(10000, SPEED_LOW, V135_OFFSET_VB-30);
 8008ed0:	2226      	movs	r2, #38	; 0x26
 8008ed2:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8008ed6:	f242 7010 	movw	r0, #10000	; 0x2710
 8008eda:	f7fc fc7b 	bl	80057d4 <slalomB>
		driveD(-30000, SPEED_MIN, SPEED_LOW, 30);
 8008ede:	231e      	movs	r3, #30
 8008ee0:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8008ee4:	211e      	movs	r1, #30
 8008ee6:	4885      	ldr	r0, [pc, #532]	; (80090fc <v_R135D+0x298>)
 8008ee8:	f7fc f8fe 	bl	80050e8 <driveD>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;

		slalomB(10000, SPEED_5, V135_5_OFFSET_VB-30);
		driveD(-30000, SPEED_MIN, SPEED_5, 30);
	}
}
 8008eec:	e0fa      	b.n	80090e4 <v_R135D+0x280>
	}else if(run_mode == MIDDLE){
 8008eee:	4b7f      	ldr	r3, [pc, #508]	; (80090ec <v_R135D+0x288>)
 8008ef0:	781b      	ldrb	r3, [r3, #0]
 8008ef2:	b2db      	uxtb	r3, r3
 8008ef4:	2b02      	cmp	r3, #2
 8008ef6:	d139      	bne.n	8008f6c <v_R135D+0x108>
		slalomF(10000, SPEED_MIDDLE, V135_2_OFFSET_VF, NO_WALL, NO_WALL);
 8008ef8:	f241 3388 	movw	r3, #5000	; 0x1388
 8008efc:	9300      	str	r3, [sp, #0]
 8008efe:	f241 3388 	movw	r3, #5000	; 0x1388
 8008f02:	2237      	movs	r2, #55	; 0x37
 8008f04:	f44f 7116 	mov.w	r1, #600	; 0x258
 8008f08:	f242 7010 	movw	r0, #10000	; 0x2710
 8008f0c:	f7fc fac4 	bl	8005498 <slalomF>
		slalomR(-V135_2_DEGACCEL, -V135_2_OMEGA, -135, SPEED_MIDDLE);
 8008f10:	f44f 7316 	mov.w	r3, #600	; 0x258
 8008f14:	f06f 0286 	mvn.w	r2, #134	; 0x86
 8008f18:	4979      	ldr	r1, [pc, #484]	; (8009100 <v_R135D+0x29c>)
 8008f1a:	487a      	ldr	r0, [pc, #488]	; (8009104 <v_R135D+0x2a0>)
 8008f1c:	f7fc fb38 	bl	8005590 <slalomR>
		turn_dir(DIR_TURN_R135_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 8008f20:	2103      	movs	r1, #3
 8008f22:	2003      	movs	r0, #3
 8008f24:	f006 feb4 	bl	800fc90 <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 8008f28:	4b73      	ldr	r3, [pc, #460]	; (80090f8 <v_R135D+0x294>)
 8008f2a:	881b      	ldrh	r3, [r3, #0]
 8008f2c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8008f30:	b2db      	uxtb	r3, r3
 8008f32:	3301      	adds	r3, #1
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	f003 0301 	and.w	r3, r3, #1
 8008f3a:	bfb8      	it	lt
 8008f3c:	425b      	neglt	r3, r3
 8008f3e:	f003 0301 	and.w	r3, r3, #1
 8008f42:	b2d9      	uxtb	r1, r3
 8008f44:	4a6c      	ldr	r2, [pc, #432]	; (80090f8 <v_R135D+0x294>)
 8008f46:	8813      	ldrh	r3, [r2, #0]
 8008f48:	f361 03c3 	bfi	r3, r1, #3, #1
 8008f4c:	8013      	strh	r3, [r2, #0]
		slalomB(10000, SPEED_MIDDLE, V135_2_OFFSET_VB-30);
 8008f4e:	2241      	movs	r2, #65	; 0x41
 8008f50:	f44f 7116 	mov.w	r1, #600	; 0x258
 8008f54:	f242 7010 	movw	r0, #10000	; 0x2710
 8008f58:	f7fc fc3c 	bl	80057d4 <slalomB>
		driveD(-30000, SPEED_MIN, SPEED_MIDDLE, 30);
 8008f5c:	231e      	movs	r3, #30
 8008f5e:	f44f 7216 	mov.w	r2, #600	; 0x258
 8008f62:	211e      	movs	r1, #30
 8008f64:	4865      	ldr	r0, [pc, #404]	; (80090fc <v_R135D+0x298>)
 8008f66:	f7fc f8bf 	bl	80050e8 <driveD>
}
 8008f6a:	e0bb      	b.n	80090e4 <v_R135D+0x280>
	}else if(run_mode == HIGH){
 8008f6c:	4b5f      	ldr	r3, [pc, #380]	; (80090ec <v_R135D+0x288>)
 8008f6e:	781b      	ldrb	r3, [r3, #0]
 8008f70:	b2db      	uxtb	r3, r3
 8008f72:	2b03      	cmp	r3, #3
 8008f74:	d139      	bne.n	8008fea <v_R135D+0x186>
		slalomF(10000, SPEED_HIGH, V135_3_OFFSET_VF, NO_WALL, NO_WALL);
 8008f76:	f241 3388 	movw	r3, #5000	; 0x1388
 8008f7a:	9300      	str	r3, [sp, #0]
 8008f7c:	f241 3388 	movw	r3, #5000	; 0x1388
 8008f80:	224b      	movs	r2, #75	; 0x4b
 8008f82:	f44f 7148 	mov.w	r1, #800	; 0x320
 8008f86:	f242 7010 	movw	r0, #10000	; 0x2710
 8008f8a:	f7fc fa85 	bl	8005498 <slalomF>
		slalomR(-V135_3_DEGACCEL, -V135_3_OMEGA, -135, SPEED_HIGH);
 8008f8e:	f44f 7348 	mov.w	r3, #800	; 0x320
 8008f92:	f06f 0286 	mvn.w	r2, #134	; 0x86
 8008f96:	495c      	ldr	r1, [pc, #368]	; (8009108 <v_R135D+0x2a4>)
 8008f98:	485c      	ldr	r0, [pc, #368]	; (800910c <v_R135D+0x2a8>)
 8008f9a:	f7fc faf9 	bl	8005590 <slalomR>
		turn_dir(DIR_TURN_R135_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 8008f9e:	2103      	movs	r1, #3
 8008fa0:	2003      	movs	r0, #3
 8008fa2:	f006 fe75 	bl	800fc90 <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 8008fa6:	4b54      	ldr	r3, [pc, #336]	; (80090f8 <v_R135D+0x294>)
 8008fa8:	881b      	ldrh	r3, [r3, #0]
 8008faa:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8008fae:	b2db      	uxtb	r3, r3
 8008fb0:	3301      	adds	r3, #1
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	f003 0301 	and.w	r3, r3, #1
 8008fb8:	bfb8      	it	lt
 8008fba:	425b      	neglt	r3, r3
 8008fbc:	f003 0301 	and.w	r3, r3, #1
 8008fc0:	b2d9      	uxtb	r1, r3
 8008fc2:	4a4d      	ldr	r2, [pc, #308]	; (80090f8 <v_R135D+0x294>)
 8008fc4:	8813      	ldrh	r3, [r2, #0]
 8008fc6:	f361 03c3 	bfi	r3, r1, #3, #1
 8008fca:	8013      	strh	r3, [r2, #0]
		slalomB(10000, SPEED_HIGH, V135_3_OFFSET_VB-30);
 8008fcc:	2264      	movs	r2, #100	; 0x64
 8008fce:	f44f 7148 	mov.w	r1, #800	; 0x320
 8008fd2:	f242 7010 	movw	r0, #10000	; 0x2710
 8008fd6:	f7fc fbfd 	bl	80057d4 <slalomB>
		driveD(-30000, SPEED_MIN, SPEED_HIGH, 30);
 8008fda:	231e      	movs	r3, #30
 8008fdc:	f44f 7248 	mov.w	r2, #800	; 0x320
 8008fe0:	211e      	movs	r1, #30
 8008fe2:	4846      	ldr	r0, [pc, #280]	; (80090fc <v_R135D+0x298>)
 8008fe4:	f7fc f880 	bl	80050e8 <driveD>
}
 8008fe8:	e07c      	b.n	80090e4 <v_R135D+0x280>
	}else if(run_mode == HIGH_HIGH){
 8008fea:	4b40      	ldr	r3, [pc, #256]	; (80090ec <v_R135D+0x288>)
 8008fec:	781b      	ldrb	r3, [r3, #0]
 8008fee:	b2db      	uxtb	r3, r3
 8008ff0:	2b04      	cmp	r3, #4
 8008ff2:	d139      	bne.n	8009068 <v_R135D+0x204>
		slalomF(10000, SPEED_HIGH_HIGH, V135_4_OFFSET_VF, NO_WALL, NO_WALL);
 8008ff4:	f241 3388 	movw	r3, #5000	; 0x1388
 8008ff8:	9300      	str	r3, [sp, #0]
 8008ffa:	f241 3388 	movw	r3, #5000	; 0x1388
 8008ffe:	2243      	movs	r2, #67	; 0x43
 8009000:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8009004:	f242 7010 	movw	r0, #10000	; 0x2710
 8009008:	f7fc fa46 	bl	8005498 <slalomF>
		slalomR(-V135_4_DEGACCEL, -V135_4_OMEGA, -135, SPEED_HIGH);
 800900c:	f44f 7348 	mov.w	r3, #800	; 0x320
 8009010:	f06f 0286 	mvn.w	r2, #134	; 0x86
 8009014:	493e      	ldr	r1, [pc, #248]	; (8009110 <v_R135D+0x2ac>)
 8009016:	483f      	ldr	r0, [pc, #252]	; (8009114 <v_R135D+0x2b0>)
 8009018:	f7fc faba 	bl	8005590 <slalomR>
		turn_dir(DIR_TURN_R135_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 800901c:	2103      	movs	r1, #3
 800901e:	2003      	movs	r0, #3
 8009020:	f006 fe36 	bl	800fc90 <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 8009024:	4b34      	ldr	r3, [pc, #208]	; (80090f8 <v_R135D+0x294>)
 8009026:	881b      	ldrh	r3, [r3, #0]
 8009028:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800902c:	b2db      	uxtb	r3, r3
 800902e:	3301      	adds	r3, #1
 8009030:	2b00      	cmp	r3, #0
 8009032:	f003 0301 	and.w	r3, r3, #1
 8009036:	bfb8      	it	lt
 8009038:	425b      	neglt	r3, r3
 800903a:	f003 0301 	and.w	r3, r3, #1
 800903e:	b2d9      	uxtb	r1, r3
 8009040:	4a2d      	ldr	r2, [pc, #180]	; (80090f8 <v_R135D+0x294>)
 8009042:	8813      	ldrh	r3, [r2, #0]
 8009044:	f361 03c3 	bfi	r3, r1, #3, #1
 8009048:	8013      	strh	r3, [r2, #0]
		slalomB(10000, SPEED_HIGH_HIGH, V135_4_OFFSET_VB-30);
 800904a:	2214      	movs	r2, #20
 800904c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8009050:	f242 7010 	movw	r0, #10000	; 0x2710
 8009054:	f7fc fbbe 	bl	80057d4 <slalomB>
		driveD(-30000, SPEED_MIN, SPEED_HIGH_HIGH, 30);
 8009058:	231e      	movs	r3, #30
 800905a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800905e:	211e      	movs	r1, #30
 8009060:	4826      	ldr	r0, [pc, #152]	; (80090fc <v_R135D+0x298>)
 8009062:	f7fc f841 	bl	80050e8 <driveD>
}
 8009066:	e03d      	b.n	80090e4 <v_R135D+0x280>
	}else if(run_mode == 5){
 8009068:	4b20      	ldr	r3, [pc, #128]	; (80090ec <v_R135D+0x288>)
 800906a:	781b      	ldrb	r3, [r3, #0]
 800906c:	b2db      	uxtb	r3, r3
 800906e:	2b05      	cmp	r3, #5
 8009070:	d138      	bne.n	80090e4 <v_R135D+0x280>
		slalomF(10000, SPEED_5, V135_5_OFFSET_VF, NO_WALL, NO_WALL);
 8009072:	f241 3388 	movw	r3, #5000	; 0x1388
 8009076:	9300      	str	r3, [sp, #0]
 8009078:	f241 3388 	movw	r3, #5000	; 0x1388
 800907c:	2243      	movs	r2, #67	; 0x43
 800907e:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 8009082:	f242 7010 	movw	r0, #10000	; 0x2710
 8009086:	f7fc fa07 	bl	8005498 <slalomF>
		slalomR(-V135_5_DEGACCEL, -V135_5_OMEGA, -135, SPEED_5);
 800908a:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
 800908e:	f06f 0286 	mvn.w	r2, #134	; 0x86
 8009092:	491f      	ldr	r1, [pc, #124]	; (8009110 <v_R135D+0x2ac>)
 8009094:	4820      	ldr	r0, [pc, #128]	; (8009118 <v_R135D+0x2b4>)
 8009096:	f7fc fa7b 	bl	8005590 <slalomR>
		turn_dir(DIR_TURN_R135_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 800909a:	2103      	movs	r1, #3
 800909c:	2003      	movs	r0, #3
 800909e:	f006 fdf7 	bl	800fc90 <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 80090a2:	4b15      	ldr	r3, [pc, #84]	; (80090f8 <v_R135D+0x294>)
 80090a4:	881b      	ldrh	r3, [r3, #0]
 80090a6:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80090aa:	b2db      	uxtb	r3, r3
 80090ac:	3301      	adds	r3, #1
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	f003 0301 	and.w	r3, r3, #1
 80090b4:	bfb8      	it	lt
 80090b6:	425b      	neglt	r3, r3
 80090b8:	f003 0301 	and.w	r3, r3, #1
 80090bc:	b2d9      	uxtb	r1, r3
 80090be:	4a0e      	ldr	r2, [pc, #56]	; (80090f8 <v_R135D+0x294>)
 80090c0:	8813      	ldrh	r3, [r2, #0]
 80090c2:	f361 03c3 	bfi	r3, r1, #3, #1
 80090c6:	8013      	strh	r3, [r2, #0]
		slalomB(10000, SPEED_5, V135_5_OFFSET_VB-30);
 80090c8:	2214      	movs	r2, #20
 80090ca:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 80090ce:	f242 7010 	movw	r0, #10000	; 0x2710
 80090d2:	f7fc fb7f 	bl	80057d4 <slalomB>
		driveD(-30000, SPEED_MIN, SPEED_5, 30);
 80090d6:	231e      	movs	r3, #30
 80090d8:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 80090dc:	211e      	movs	r1, #30
 80090de:	4807      	ldr	r0, [pc, #28]	; (80090fc <v_R135D+0x298>)
 80090e0:	f7fc f802 	bl	80050e8 <driveD>
}
 80090e4:	bf00      	nop
 80090e6:	46bd      	mov	sp, r7
 80090e8:	bd80      	pop	{r7, pc}
 80090ea:	bf00      	nop
 80090ec:	20000456 	.word	0x20000456
 80090f0:	fffffed4 	.word	0xfffffed4
 80090f4:	fffff448 	.word	0xfffff448
 80090f8:	20000f64 	.word	0x20000f64
 80090fc:	ffff8ad0 	.word	0xffff8ad0
 8009100:	fffffe0c 	.word	0xfffffe0c
 8009104:	ffffec78 	.word	0xffffec78
 8009108:	fffffce0 	.word	0xfffffce0
 800910c:	ffffe0c0 	.word	0xffffe0c0
 8009110:	fffffc18 	.word	0xfffffc18
 8009114:	ffffd8f0 	.word	0xffffd8f0
 8009118:	ffffd120 	.word	0xffffd120

0800911c <v_L135D>:
//v_L135D
// 区画中心から左に135度回転する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void v_L135D(void){
 800911c:	b580      	push	{r7, lr}
 800911e:	b082      	sub	sp, #8
 8009120:	af02      	add	r7, sp, #8
	full_led_write(PURPLE);
 8009122:	2005      	movs	r0, #5
 8009124:	f008 fc48 	bl	80119b8 <full_led_write>
	if(run_mode == LOW){
 8009128:	4ba0      	ldr	r3, [pc, #640]	; (80093ac <v_L135D+0x290>)
 800912a:	781b      	ldrb	r3, [r3, #0]
 800912c:	b2db      	uxtb	r3, r3
 800912e:	2b01      	cmp	r3, #1
 8009130:	d13a      	bne.n	80091a8 <v_L135D+0x8c>
		slalomF(10000, SPEED_LOW, V135_OFFSET_VF, NO_WALL, NO_WALL);
 8009132:	f241 3388 	movw	r3, #5000	; 0x1388
 8009136:	9300      	str	r3, [sp, #0]
 8009138:	f241 3388 	movw	r3, #5000	; 0x1388
 800913c:	223a      	movs	r2, #58	; 0x3a
 800913e:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8009142:	f242 7010 	movw	r0, #10000	; 0x2710
 8009146:	f7fc f9a7 	bl	8005498 <slalomF>
		slalomR(V135_DEGACCEL, V135_OMEGA, 135, SPEED_LOW);
 800914a:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800914e:	2287      	movs	r2, #135	; 0x87
 8009150:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8009154:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8009158:	f7fc fa1a 	bl	8005590 <slalomR>

		turn_dir(DIR_TURN_L135_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 800915c:	2103      	movs	r1, #3
 800915e:	20fd      	movs	r0, #253	; 0xfd
 8009160:	f006 fd96 	bl	800fc90 <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 8009164:	4b92      	ldr	r3, [pc, #584]	; (80093b0 <v_L135D+0x294>)
 8009166:	881b      	ldrh	r3, [r3, #0]
 8009168:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800916c:	b2db      	uxtb	r3, r3
 800916e:	3301      	adds	r3, #1
 8009170:	2b00      	cmp	r3, #0
 8009172:	f003 0301 	and.w	r3, r3, #1
 8009176:	bfb8      	it	lt
 8009178:	425b      	neglt	r3, r3
 800917a:	f003 0301 	and.w	r3, r3, #1
 800917e:	b2d9      	uxtb	r1, r3
 8009180:	4a8b      	ldr	r2, [pc, #556]	; (80093b0 <v_L135D+0x294>)
 8009182:	8813      	ldrh	r3, [r2, #0]
 8009184:	f361 03c3 	bfi	r3, r1, #3, #1
 8009188:	8013      	strh	r3, [r2, #0]

		slalomB(10000, SPEED_LOW, V135_OFFSET_VB-30);
 800918a:	2226      	movs	r2, #38	; 0x26
 800918c:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8009190:	f242 7010 	movw	r0, #10000	; 0x2710
 8009194:	f7fc fb1e 	bl	80057d4 <slalomB>
		driveD(-30000, SPEED_MIN, SPEED_LOW, 30);
 8009198:	231e      	movs	r3, #30
 800919a:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800919e:	211e      	movs	r1, #30
 80091a0:	4884      	ldr	r0, [pc, #528]	; (80093b4 <v_L135D+0x298>)
 80091a2:	f7fb ffa1 	bl	80050e8 <driveD>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;

		slalomB(10000, SPEED_5, V135_5_OFFSET_VB-30);
		driveD(-30000, SPEED_MIN, SPEED_5, 30);
	}
}
 80091a6:	e0fe      	b.n	80093a6 <v_L135D+0x28a>
	}else if(run_mode == MIDDLE){
 80091a8:	4b80      	ldr	r3, [pc, #512]	; (80093ac <v_L135D+0x290>)
 80091aa:	781b      	ldrb	r3, [r3, #0]
 80091ac:	b2db      	uxtb	r3, r3
 80091ae:	2b02      	cmp	r3, #2
 80091b0:	d13a      	bne.n	8009228 <v_L135D+0x10c>
		slalomF(10000, SPEED_MIDDLE, V135_2_OFFSET_VF, NO_WALL, NO_WALL);
 80091b2:	f241 3388 	movw	r3, #5000	; 0x1388
 80091b6:	9300      	str	r3, [sp, #0]
 80091b8:	f241 3388 	movw	r3, #5000	; 0x1388
 80091bc:	2237      	movs	r2, #55	; 0x37
 80091be:	f44f 7116 	mov.w	r1, #600	; 0x258
 80091c2:	f242 7010 	movw	r0, #10000	; 0x2710
 80091c6:	f7fc f967 	bl	8005498 <slalomF>
		slalomR(V135_2_DEGACCEL, V135_2_OMEGA, 135, SPEED_MIDDLE);
 80091ca:	f44f 7316 	mov.w	r3, #600	; 0x258
 80091ce:	2287      	movs	r2, #135	; 0x87
 80091d0:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80091d4:	f241 3088 	movw	r0, #5000	; 0x1388
 80091d8:	f7fc f9da 	bl	8005590 <slalomR>
		turn_dir(DIR_TURN_L135_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 80091dc:	2103      	movs	r1, #3
 80091de:	20fd      	movs	r0, #253	; 0xfd
 80091e0:	f006 fd56 	bl	800fc90 <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 80091e4:	4b72      	ldr	r3, [pc, #456]	; (80093b0 <v_L135D+0x294>)
 80091e6:	881b      	ldrh	r3, [r3, #0]
 80091e8:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80091ec:	b2db      	uxtb	r3, r3
 80091ee:	3301      	adds	r3, #1
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	f003 0301 	and.w	r3, r3, #1
 80091f6:	bfb8      	it	lt
 80091f8:	425b      	neglt	r3, r3
 80091fa:	f003 0301 	and.w	r3, r3, #1
 80091fe:	b2d9      	uxtb	r1, r3
 8009200:	4a6b      	ldr	r2, [pc, #428]	; (80093b0 <v_L135D+0x294>)
 8009202:	8813      	ldrh	r3, [r2, #0]
 8009204:	f361 03c3 	bfi	r3, r1, #3, #1
 8009208:	8013      	strh	r3, [r2, #0]
		slalomB(10000, SPEED_MIDDLE, V135_2_OFFSET_VB-30);
 800920a:	2241      	movs	r2, #65	; 0x41
 800920c:	f44f 7116 	mov.w	r1, #600	; 0x258
 8009210:	f242 7010 	movw	r0, #10000	; 0x2710
 8009214:	f7fc fade 	bl	80057d4 <slalomB>
		driveD(-30000, SPEED_MIN, SPEED_MIDDLE, 30);
 8009218:	231e      	movs	r3, #30
 800921a:	f44f 7216 	mov.w	r2, #600	; 0x258
 800921e:	211e      	movs	r1, #30
 8009220:	4864      	ldr	r0, [pc, #400]	; (80093b4 <v_L135D+0x298>)
 8009222:	f7fb ff61 	bl	80050e8 <driveD>
}
 8009226:	e0be      	b.n	80093a6 <v_L135D+0x28a>
	}else if(run_mode == HIGH){
 8009228:	4b60      	ldr	r3, [pc, #384]	; (80093ac <v_L135D+0x290>)
 800922a:	781b      	ldrb	r3, [r3, #0]
 800922c:	b2db      	uxtb	r3, r3
 800922e:	2b03      	cmp	r3, #3
 8009230:	d13a      	bne.n	80092a8 <v_L135D+0x18c>
		slalomF(10000, SPEED_HIGH, V135_3_OFFSET_VF, NO_WALL, NO_WALL);
 8009232:	f241 3388 	movw	r3, #5000	; 0x1388
 8009236:	9300      	str	r3, [sp, #0]
 8009238:	f241 3388 	movw	r3, #5000	; 0x1388
 800923c:	224b      	movs	r2, #75	; 0x4b
 800923e:	f44f 7148 	mov.w	r1, #800	; 0x320
 8009242:	f242 7010 	movw	r0, #10000	; 0x2710
 8009246:	f7fc f927 	bl	8005498 <slalomF>
		slalomR(V135_3_DEGACCEL, V135_3_OMEGA, 135, SPEED_HIGH);
 800924a:	f44f 7348 	mov.w	r3, #800	; 0x320
 800924e:	2287      	movs	r2, #135	; 0x87
 8009250:	f44f 7148 	mov.w	r1, #800	; 0x320
 8009254:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 8009258:	f7fc f99a 	bl	8005590 <slalomR>
		turn_dir(DIR_TURN_L135_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 800925c:	2103      	movs	r1, #3
 800925e:	20fd      	movs	r0, #253	; 0xfd
 8009260:	f006 fd16 	bl	800fc90 <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 8009264:	4b52      	ldr	r3, [pc, #328]	; (80093b0 <v_L135D+0x294>)
 8009266:	881b      	ldrh	r3, [r3, #0]
 8009268:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800926c:	b2db      	uxtb	r3, r3
 800926e:	3301      	adds	r3, #1
 8009270:	2b00      	cmp	r3, #0
 8009272:	f003 0301 	and.w	r3, r3, #1
 8009276:	bfb8      	it	lt
 8009278:	425b      	neglt	r3, r3
 800927a:	f003 0301 	and.w	r3, r3, #1
 800927e:	b2d9      	uxtb	r1, r3
 8009280:	4a4b      	ldr	r2, [pc, #300]	; (80093b0 <v_L135D+0x294>)
 8009282:	8813      	ldrh	r3, [r2, #0]
 8009284:	f361 03c3 	bfi	r3, r1, #3, #1
 8009288:	8013      	strh	r3, [r2, #0]
		slalomB(10000, SPEED_HIGH, V135_3_OFFSET_VB-30);
 800928a:	2264      	movs	r2, #100	; 0x64
 800928c:	f44f 7148 	mov.w	r1, #800	; 0x320
 8009290:	f242 7010 	movw	r0, #10000	; 0x2710
 8009294:	f7fc fa9e 	bl	80057d4 <slalomB>
		driveD(-30000, SPEED_MIN, SPEED_HIGH, 30);
 8009298:	231e      	movs	r3, #30
 800929a:	f44f 7248 	mov.w	r2, #800	; 0x320
 800929e:	211e      	movs	r1, #30
 80092a0:	4844      	ldr	r0, [pc, #272]	; (80093b4 <v_L135D+0x298>)
 80092a2:	f7fb ff21 	bl	80050e8 <driveD>
}
 80092a6:	e07e      	b.n	80093a6 <v_L135D+0x28a>
	}else if(run_mode == HIGH_HIGH){
 80092a8:	4b40      	ldr	r3, [pc, #256]	; (80093ac <v_L135D+0x290>)
 80092aa:	781b      	ldrb	r3, [r3, #0]
 80092ac:	b2db      	uxtb	r3, r3
 80092ae:	2b04      	cmp	r3, #4
 80092b0:	d13a      	bne.n	8009328 <v_L135D+0x20c>
		slalomF(10000, SPEED_HIGH_HIGH, V135_4_OFFSET_VF, NO_WALL, NO_WALL);
 80092b2:	f241 3388 	movw	r3, #5000	; 0x1388
 80092b6:	9300      	str	r3, [sp, #0]
 80092b8:	f241 3388 	movw	r3, #5000	; 0x1388
 80092bc:	2243      	movs	r2, #67	; 0x43
 80092be:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80092c2:	f242 7010 	movw	r0, #10000	; 0x2710
 80092c6:	f7fc f8e7 	bl	8005498 <slalomF>
		slalomR(V135_4_DEGACCEL, V135_4_OMEGA, 135, SPEED_HIGH_HIGH);
 80092ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80092ce:	2287      	movs	r2, #135	; 0x87
 80092d0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80092d4:	f242 7010 	movw	r0, #10000	; 0x2710
 80092d8:	f7fc f95a 	bl	8005590 <slalomR>
		turn_dir(DIR_TURN_L135_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 80092dc:	2103      	movs	r1, #3
 80092de:	20fd      	movs	r0, #253	; 0xfd
 80092e0:	f006 fcd6 	bl	800fc90 <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 80092e4:	4b32      	ldr	r3, [pc, #200]	; (80093b0 <v_L135D+0x294>)
 80092e6:	881b      	ldrh	r3, [r3, #0]
 80092e8:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80092ec:	b2db      	uxtb	r3, r3
 80092ee:	3301      	adds	r3, #1
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	f003 0301 	and.w	r3, r3, #1
 80092f6:	bfb8      	it	lt
 80092f8:	425b      	neglt	r3, r3
 80092fa:	f003 0301 	and.w	r3, r3, #1
 80092fe:	b2d9      	uxtb	r1, r3
 8009300:	4a2b      	ldr	r2, [pc, #172]	; (80093b0 <v_L135D+0x294>)
 8009302:	8813      	ldrh	r3, [r2, #0]
 8009304:	f361 03c3 	bfi	r3, r1, #3, #1
 8009308:	8013      	strh	r3, [r2, #0]
		slalomB(10000, SPEED_HIGH_HIGH, V135_4_OFFSET_VB-30);
 800930a:	2214      	movs	r2, #20
 800930c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8009310:	f242 7010 	movw	r0, #10000	; 0x2710
 8009314:	f7fc fa5e 	bl	80057d4 <slalomB>
		driveD(-30000, SPEED_MIN, SPEED_HIGH, 30);
 8009318:	231e      	movs	r3, #30
 800931a:	f44f 7248 	mov.w	r2, #800	; 0x320
 800931e:	211e      	movs	r1, #30
 8009320:	4824      	ldr	r0, [pc, #144]	; (80093b4 <v_L135D+0x298>)
 8009322:	f7fb fee1 	bl	80050e8 <driveD>
}
 8009326:	e03e      	b.n	80093a6 <v_L135D+0x28a>
	}else if(run_mode == 5){
 8009328:	4b20      	ldr	r3, [pc, #128]	; (80093ac <v_L135D+0x290>)
 800932a:	781b      	ldrb	r3, [r3, #0]
 800932c:	b2db      	uxtb	r3, r3
 800932e:	2b05      	cmp	r3, #5
 8009330:	d139      	bne.n	80093a6 <v_L135D+0x28a>
		slalomF(10000, SPEED_5, V135_5_OFFSET_VF, NO_WALL, NO_WALL);
 8009332:	f241 3388 	movw	r3, #5000	; 0x1388
 8009336:	9300      	str	r3, [sp, #0]
 8009338:	f241 3388 	movw	r3, #5000	; 0x1388
 800933c:	2243      	movs	r2, #67	; 0x43
 800933e:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 8009342:	f242 7010 	movw	r0, #10000	; 0x2710
 8009346:	f7fc f8a7 	bl	8005498 <slalomF>
		slalomR(V135_5_DEGACCEL, V135_5_OMEGA, 135, SPEED_5);
 800934a:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
 800934e:	2287      	movs	r2, #135	; 0x87
 8009350:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8009354:	f642 60e0 	movw	r0, #12000	; 0x2ee0
 8009358:	f7fc f91a 	bl	8005590 <slalomR>
		turn_dir(DIR_TURN_L135_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 800935c:	2103      	movs	r1, #3
 800935e:	20fd      	movs	r0, #253	; 0xfd
 8009360:	f006 fc96 	bl	800fc90 <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 8009364:	4b12      	ldr	r3, [pc, #72]	; (80093b0 <v_L135D+0x294>)
 8009366:	881b      	ldrh	r3, [r3, #0]
 8009368:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800936c:	b2db      	uxtb	r3, r3
 800936e:	3301      	adds	r3, #1
 8009370:	2b00      	cmp	r3, #0
 8009372:	f003 0301 	and.w	r3, r3, #1
 8009376:	bfb8      	it	lt
 8009378:	425b      	neglt	r3, r3
 800937a:	f003 0301 	and.w	r3, r3, #1
 800937e:	b2d9      	uxtb	r1, r3
 8009380:	4a0b      	ldr	r2, [pc, #44]	; (80093b0 <v_L135D+0x294>)
 8009382:	8813      	ldrh	r3, [r2, #0]
 8009384:	f361 03c3 	bfi	r3, r1, #3, #1
 8009388:	8013      	strh	r3, [r2, #0]
		slalomB(10000, SPEED_5, V135_5_OFFSET_VB-30);
 800938a:	2214      	movs	r2, #20
 800938c:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 8009390:	f242 7010 	movw	r0, #10000	; 0x2710
 8009394:	f7fc fa1e 	bl	80057d4 <slalomB>
		driveD(-30000, SPEED_MIN, SPEED_5, 30);
 8009398:	231e      	movs	r3, #30
 800939a:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 800939e:	211e      	movs	r1, #30
 80093a0:	4804      	ldr	r0, [pc, #16]	; (80093b4 <v_L135D+0x298>)
 80093a2:	f7fb fea1 	bl	80050e8 <driveD>
}
 80093a6:	bf00      	nop
 80093a8:	46bd      	mov	sp, r7
 80093aa:	bd80      	pop	{r7, pc}
 80093ac:	20000456 	.word	0x20000456
 80093b0:	20000f64 	.word	0x20000f64
 80093b4:	ffff8ad0 	.word	0xffff8ad0

080093b8 <test_select>:
//test_select
// 走行系テスト選択
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void test_select(void){
 80093b8:	b580      	push	{r7, lr}
 80093ba:	b082      	sub	sp, #8
 80093bc:	af00      	add	r7, sp, #0
	int mode = 0;
 80093be:	2300      	movs	r3, #0
 80093c0:	607b      	str	r3, [r7, #4]
	printf("Test Select, Mode : %d\n", mode);
 80093c2:	6879      	ldr	r1, [r7, #4]
 80093c4:	483f      	ldr	r0, [pc, #252]	; (80094c4 <test_select+0x10c>)
 80093c6:	f009 f88b 	bl	80124e0 <iprintf>

	while(1){
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	b2db      	uxtb	r3, r3
 80093ce:	f003 0301 	and.w	r3, r3, #1
 80093d2:	b2d8      	uxtb	r0, r3
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	b2db      	uxtb	r3, r3
 80093d8:	f003 0302 	and.w	r3, r3, #2
 80093dc:	b2d9      	uxtb	r1, r3
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	b2db      	uxtb	r3, r3
 80093e2:	f003 0304 	and.w	r3, r3, #4
 80093e6:	b2db      	uxtb	r3, r3
 80093e8:	461a      	mov	r2, r3
 80093ea:	f008 faab 	bl	8011944 <led_write>
		  if(dist_r >= 20){
 80093ee:	4b36      	ldr	r3, [pc, #216]	; (80094c8 <test_select+0x110>)
 80093f0:	edd3 7a00 	vldr	s15, [r3]
 80093f4:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 80093f8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80093fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009400:	db0f      	blt.n	8009422 <test_select+0x6a>
			  mode++;
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	3301      	adds	r3, #1
 8009406:	607b      	str	r3, [r7, #4]
			  dist_r = 0;
 8009408:	4b2f      	ldr	r3, [pc, #188]	; (80094c8 <test_select+0x110>)
 800940a:	f04f 0200 	mov.w	r2, #0
 800940e:	601a      	str	r2, [r3, #0]
			  if(mode > 7){
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	2b07      	cmp	r3, #7
 8009414:	dd01      	ble.n	800941a <test_select+0x62>
				  mode = 0;
 8009416:	2300      	movs	r3, #0
 8009418:	607b      	str	r3, [r7, #4]
			  }
			  printf("Mode : %d\n", mode);
 800941a:	6879      	ldr	r1, [r7, #4]
 800941c:	482b      	ldr	r0, [pc, #172]	; (80094cc <test_select+0x114>)
 800941e:	f009 f85f 	bl	80124e0 <iprintf>
		  }
		  if(dist_r <= -20){
 8009422:	4b29      	ldr	r3, [pc, #164]	; (80094c8 <test_select+0x110>)
 8009424:	edd3 7a00 	vldr	s15, [r3]
 8009428:	eebb 7a04 	vmov.f32	s14, #180	; 0xc1a00000 -20.0
 800942c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009430:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009434:	d80f      	bhi.n	8009456 <test_select+0x9e>
			  mode--;
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	3b01      	subs	r3, #1
 800943a:	607b      	str	r3, [r7, #4]
			  dist_r = 0;
 800943c:	4b22      	ldr	r3, [pc, #136]	; (80094c8 <test_select+0x110>)
 800943e:	f04f 0200 	mov.w	r2, #0
 8009442:	601a      	str	r2, [r3, #0]
			  if(mode < 0){
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	2b00      	cmp	r3, #0
 8009448:	da01      	bge.n	800944e <test_select+0x96>
				  mode = 7;
 800944a:	2307      	movs	r3, #7
 800944c:	607b      	str	r3, [r7, #4]
			  }
			  printf("Mode : %d\n", mode);
 800944e:	6879      	ldr	r1, [r7, #4]
 8009450:	481e      	ldr	r0, [pc, #120]	; (80094cc <test_select+0x114>)
 8009452:	f009 f845 	bl	80124e0 <iprintf>
		  }
		  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET){
 8009456:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800945a:	481d      	ldr	r0, [pc, #116]	; (80094d0 <test_select+0x118>)
 800945c:	f7f8 ff3a 	bl	80022d4 <HAL_GPIO_ReadPin>
 8009460:	4603      	mov	r3, r0
 8009462:	2b00      	cmp	r3, #0
 8009464:	d1b1      	bne.n	80093ca <test_select+0x12>
			  HAL_Delay(50);
 8009466:	2032      	movs	r0, #50	; 0x32
 8009468:	f7f7 fdd8 	bl	800101c <HAL_Delay>
			  while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET);
 800946c:	bf00      	nop
 800946e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8009472:	4817      	ldr	r0, [pc, #92]	; (80094d0 <test_select+0x118>)
 8009474:	f7f8 ff2e 	bl	80022d4 <HAL_GPIO_ReadPin>
 8009478:	4603      	mov	r3, r0
 800947a:	2b00      	cmp	r3, #0
 800947c:	d0f7      	beq.n	800946e <test_select+0xb6>
			  switch(mode){
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	3b01      	subs	r3, #1
 8009482:	2b05      	cmp	r3, #5
 8009484:	d8a1      	bhi.n	80093ca <test_select+0x12>
 8009486:	a201      	add	r2, pc, #4	; (adr r2, 800948c <test_select+0xd4>)
 8009488:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800948c:	080094a5 	.word	0x080094a5
 8009490:	080094ab 	.word	0x080094ab
 8009494:	080094b1 	.word	0x080094b1
 8009498:	080094b7 	.word	0x080094b7
 800949c:	080094bb 	.word	0x080094bb
 80094a0:	080094bf 	.word	0x080094bf
				case 1:
					init_test();
 80094a4:	f000 f816 	bl	80094d4 <init_test>
					break;
 80094a8:	e00b      	b.n	80094c2 <test_select+0x10a>

				case 2:
					slalom_test();
 80094aa:	f000 f91d 	bl	80096e8 <slalom_test>
					break;
 80094ae:	e008      	b.n	80094c2 <test_select+0x10a>

				case 3:
					v_test();
 80094b0:	f000 fae2 	bl	8009a78 <v_test>
					break;
 80094b4:	e005      	b.n	80094c2 <test_select+0x10a>

				case 4:
					pass_test();
 80094b6:	f000 fd13 	bl	8009ee0 <pass_test>

				case 5:
					goal_test();
 80094ba:	f000 ffa7 	bl	800a40c <goal_test>

				case 6:
					sample_course_run();
 80094be:	f001 fa87 	bl	800a9d0 <sample_course_run>
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 80094c2:	e782      	b.n	80093ca <test_select+0x12>
 80094c4:	08013728 	.word	0x08013728
 80094c8:	20000aec 	.word	0x20000aec
 80094cc:	0801371c 	.word	0x0801371c
 80094d0:	40020000 	.word	0x40020000

080094d4 <init_test>:
//init_test
// 初期基幹関数走行テスト
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void init_test(void){
 80094d4:	b580      	push	{r7, lr}
 80094d6:	b086      	sub	sp, #24
 80094d8:	af00      	add	r7, sp, #0

	int mode = 0;
 80094da:	2300      	movs	r3, #0
 80094dc:	617b      	str	r3, [r7, #20]
	printf("Test Init Run, Mode : %d\n", mode);
 80094de:	6979      	ldr	r1, [r7, #20]
 80094e0:	4872      	ldr	r0, [pc, #456]	; (80096ac <init_test+0x1d8>)
 80094e2:	f008 fffd 	bl	80124e0 <iprintf>

	while(1){
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 80094e6:	697b      	ldr	r3, [r7, #20]
 80094e8:	b2db      	uxtb	r3, r3
 80094ea:	f003 0301 	and.w	r3, r3, #1
 80094ee:	b2d8      	uxtb	r0, r3
 80094f0:	697b      	ldr	r3, [r7, #20]
 80094f2:	b2db      	uxtb	r3, r3
 80094f4:	f003 0302 	and.w	r3, r3, #2
 80094f8:	b2d9      	uxtb	r1, r3
 80094fa:	697b      	ldr	r3, [r7, #20]
 80094fc:	b2db      	uxtb	r3, r3
 80094fe:	f003 0304 	and.w	r3, r3, #4
 8009502:	b2db      	uxtb	r3, r3
 8009504:	461a      	mov	r2, r3
 8009506:	f008 fa1d 	bl	8011944 <led_write>
		  if(dist_r >= 20){
 800950a:	4b69      	ldr	r3, [pc, #420]	; (80096b0 <init_test+0x1dc>)
 800950c:	edd3 7a00 	vldr	s15, [r3]
 8009510:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8009514:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009518:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800951c:	db0f      	blt.n	800953e <init_test+0x6a>
			  mode++;
 800951e:	697b      	ldr	r3, [r7, #20]
 8009520:	3301      	adds	r3, #1
 8009522:	617b      	str	r3, [r7, #20]
			  dist_r = 0;
 8009524:	4b62      	ldr	r3, [pc, #392]	; (80096b0 <init_test+0x1dc>)
 8009526:	f04f 0200 	mov.w	r2, #0
 800952a:	601a      	str	r2, [r3, #0]
			  if(mode > 7){
 800952c:	697b      	ldr	r3, [r7, #20]
 800952e:	2b07      	cmp	r3, #7
 8009530:	dd01      	ble.n	8009536 <init_test+0x62>
				  mode = 0;
 8009532:	2300      	movs	r3, #0
 8009534:	617b      	str	r3, [r7, #20]
			  }
			  printf("Mode : %d\n", mode);
 8009536:	6979      	ldr	r1, [r7, #20]
 8009538:	485e      	ldr	r0, [pc, #376]	; (80096b4 <init_test+0x1e0>)
 800953a:	f008 ffd1 	bl	80124e0 <iprintf>
		  }
		  if(dist_r <= -20){
 800953e:	4b5c      	ldr	r3, [pc, #368]	; (80096b0 <init_test+0x1dc>)
 8009540:	edd3 7a00 	vldr	s15, [r3]
 8009544:	eebb 7a04 	vmov.f32	s14, #180	; 0xc1a00000 -20.0
 8009548:	eef4 7ac7 	vcmpe.f32	s15, s14
 800954c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009550:	d80f      	bhi.n	8009572 <init_test+0x9e>
			  mode--;
 8009552:	697b      	ldr	r3, [r7, #20]
 8009554:	3b01      	subs	r3, #1
 8009556:	617b      	str	r3, [r7, #20]
			  dist_r = 0;
 8009558:	4b55      	ldr	r3, [pc, #340]	; (80096b0 <init_test+0x1dc>)
 800955a:	f04f 0200 	mov.w	r2, #0
 800955e:	601a      	str	r2, [r3, #0]
			  if(mode < 0){
 8009560:	697b      	ldr	r3, [r7, #20]
 8009562:	2b00      	cmp	r3, #0
 8009564:	da01      	bge.n	800956a <init_test+0x96>
				  mode = 7;
 8009566:	2307      	movs	r3, #7
 8009568:	617b      	str	r3, [r7, #20]
			  }
			  printf("Mode : %d\n", mode);
 800956a:	6979      	ldr	r1, [r7, #20]
 800956c:	4851      	ldr	r0, [pc, #324]	; (80096b4 <init_test+0x1e0>)
 800956e:	f008 ffb7 	bl	80124e0 <iprintf>
		  }
		  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET){
 8009572:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8009576:	4850      	ldr	r0, [pc, #320]	; (80096b8 <init_test+0x1e4>)
 8009578:	f7f8 feac 	bl	80022d4 <HAL_GPIO_ReadPin>
 800957c:	4603      	mov	r3, r0
 800957e:	2b00      	cmp	r3, #0
 8009580:	d1b1      	bne.n	80094e6 <init_test+0x12>
			  HAL_Delay(50);
 8009582:	2032      	movs	r0, #50	; 0x32
 8009584:	f7f7 fd4a 	bl	800101c <HAL_Delay>
			  while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET);
 8009588:	bf00      	nop
 800958a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800958e:	484a      	ldr	r0, [pc, #296]	; (80096b8 <init_test+0x1e4>)
 8009590:	f7f8 fea0 	bl	80022d4 <HAL_GPIO_ReadPin>
 8009594:	4603      	mov	r3, r0
 8009596:	2b00      	cmp	r3, #0
 8009598:	d0f7      	beq.n	800958a <init_test+0xb6>
			  drive_ready();
 800959a:	f7fb fb71 	bl	8004c80 <drive_ready>
			  get_base();
 800959e:	f008 f979 	bl	8011894 <get_base>

			  switch(mode){
 80095a2:	697b      	ldr	r3, [r7, #20]
 80095a4:	2b07      	cmp	r3, #7
 80095a6:	d89e      	bhi.n	80094e6 <init_test+0x12>
 80095a8:	a201      	add	r2, pc, #4	; (adr r2, 80095b0 <init_test+0xdc>)
 80095aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095ae:	bf00      	nop
 80095b0:	080095d1 	.word	0x080095d1
 80095b4:	080095d7 	.word	0x080095d7
 80095b8:	080095f7 	.word	0x080095f7
 80095bc:	08009615 	.word	0x08009615
 80095c0:	08009633 	.word	0x08009633
 80095c4:	08009651 	.word	0x08009651
 80095c8:	0800967b 	.word	0x0800967b
 80095cc:	08009695 	.word	0x08009695
				case 0:
					get_base();
 80095d0:	f008 f960 	bl	8011894 <get_base>
					break;
 80095d4:	e069      	b.n	80096aa <init_test+0x1d6>
				case 1:
					//----4区画等速走行----
					printf("4 Section, Forward, Constant Speed.\n");
 80095d6:	4839      	ldr	r0, [pc, #228]	; (80096bc <init_test+0x1e8>)
 80095d8:	f008 fff6 	bl	80125c8 <puts>
					for(int i = 0; i < 1; i++){
 80095dc:	2300      	movs	r3, #0
 80095de:	613b      	str	r3, [r7, #16]
 80095e0:	e005      	b.n	80095ee <init_test+0x11a>
						driveC(SEC_HALF*2);	//一区画のパルス分デフォルトインターバルで走行
 80095e2:	20b6      	movs	r0, #182	; 0xb6
 80095e4:	f7fb fec2 	bl	800536c <driveC>
					for(int i = 0; i < 1; i++){
 80095e8:	693b      	ldr	r3, [r7, #16]
 80095ea:	3301      	adds	r3, #1
 80095ec:	613b      	str	r3, [r7, #16]
 80095ee:	693b      	ldr	r3, [r7, #16]
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	ddf6      	ble.n	80095e2 <init_test+0x10e>
					}
					break;
 80095f4:	e059      	b.n	80096aa <init_test+0x1d6>
				case 2:
					//----right90度回転----
					printf("Rotate R90.\n");
 80095f6:	4832      	ldr	r0, [pc, #200]	; (80096c0 <init_test+0x1ec>)
 80095f8:	f008 ffe6 	bl	80125c8 <puts>
					for(int i = 0; i < 32; i++){
 80095fc:	2300      	movs	r3, #0
 80095fe:	60fb      	str	r3, [r7, #12]
 8009600:	e004      	b.n	800960c <init_test+0x138>
						rotate_R90();				//16回右90度回転、つまり4周回転
 8009602:	f7fc febd 	bl	8006380 <rotate_R90>
					for(int i = 0; i < 32; i++){
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	3301      	adds	r3, #1
 800960a:	60fb      	str	r3, [r7, #12]
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	2b1f      	cmp	r3, #31
 8009610:	ddf7      	ble.n	8009602 <init_test+0x12e>
					}
					break;
 8009612:	e04a      	b.n	80096aa <init_test+0x1d6>
				case 3:
					//----left90度回転----
					printf("Rotate L90.\n");
 8009614:	482b      	ldr	r0, [pc, #172]	; (80096c4 <init_test+0x1f0>)
 8009616:	f008 ffd7 	bl	80125c8 <puts>
					for(int i = 0; i < 32; i++){
 800961a:	2300      	movs	r3, #0
 800961c:	60bb      	str	r3, [r7, #8]
 800961e:	e004      	b.n	800962a <init_test+0x156>
						rotate_L90();				//16回左90度回転、つまり4周回転
 8009620:	f7fc ff8a 	bl	8006538 <rotate_L90>
					for(int i = 0; i < 32; i++){
 8009624:	68bb      	ldr	r3, [r7, #8]
 8009626:	3301      	adds	r3, #1
 8009628:	60bb      	str	r3, [r7, #8]
 800962a:	68bb      	ldr	r3, [r7, #8]
 800962c:	2b1f      	cmp	r3, #31
 800962e:	ddf7      	ble.n	8009620 <init_test+0x14c>
					}
					break;
 8009630:	e03b      	b.n	80096aa <init_test+0x1d6>
				case 4:
					//----180度回転----
					printf("Rotate 180.\n");
 8009632:	4825      	ldr	r0, [pc, #148]	; (80096c8 <init_test+0x1f4>)
 8009634:	f008 ffc8 	bl	80125c8 <puts>
					for(int i = 0; i < 16; i++){
 8009638:	2300      	movs	r3, #0
 800963a:	607b      	str	r3, [r7, #4]
 800963c:	e004      	b.n	8009648 <init_test+0x174>
						rotate_180();				//8回右180度回転、つまり4周回転
 800963e:	f7fd f857 	bl	80066f0 <rotate_180>
					for(int i = 0; i < 16; i++){
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	3301      	adds	r3, #1
 8009646:	607b      	str	r3, [r7, #4]
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	2b0f      	cmp	r3, #15
 800964c:	ddf7      	ble.n	800963e <init_test+0x16a>
					}
					break;
 800964e:	e02c      	b.n	80096aa <init_test+0x1d6>
				case 5:
					//----4区画連続走行----
					printf("4 Section, Forward, Continuous.\n");
 8009650:	481e      	ldr	r0, [pc, #120]	; (80096cc <init_test+0x1f8>)
 8009652:	f008 ffb9 	bl	80125c8 <puts>
					get_base();
 8009656:	f008 f91d 	bl	8011894 <get_base>
					half_sectionA();				//半区画のパルス分加速しながら走行
 800965a:	f7fc fa8f 	bl	8005b7c <half_sectionA>
					for(int i = 0; i < 6-1; i++){
 800965e:	2300      	movs	r3, #0
 8009660:	603b      	str	r3, [r7, #0]
 8009662:	e004      	b.n	800966e <init_test+0x19a>
						one_sectionU();			//一区画のパルス分等速走行
 8009664:	f7fc fe74 	bl	8006350 <one_sectionU>
					for(int i = 0; i < 6-1; i++){
 8009668:	683b      	ldr	r3, [r7, #0]
 800966a:	3301      	adds	r3, #1
 800966c:	603b      	str	r3, [r7, #0]
 800966e:	683b      	ldr	r3, [r7, #0]
 8009670:	2b04      	cmp	r3, #4
 8009672:	ddf7      	ble.n	8009664 <init_test+0x190>
					}
					half_sectionD();				//半区画のパルス分減速しながら走行。走行後は停止する
 8009674:	f7fc fae8 	bl	8005c48 <half_sectionD>
					break;
 8009678:	e017      	b.n	80096aa <init_test+0x1d6>
				case 6:
					//----a宴会芸モード----
					target_degree_z = degree_z;
 800967a:	4b15      	ldr	r3, [pc, #84]	; (80096d0 <init_test+0x1fc>)
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	4a15      	ldr	r2, [pc, #84]	; (80096d4 <init_test+0x200>)
 8009680:	6013      	str	r3, [r2, #0]
					accel_l = 5000;
 8009682:	4b15      	ldr	r3, [pc, #84]	; (80096d8 <init_test+0x204>)
 8009684:	4a15      	ldr	r2, [pc, #84]	; (80096dc <init_test+0x208>)
 8009686:	601a      	str	r2, [r3, #0]

					MF2.FLAG.ENKAI = 1;
 8009688:	4a15      	ldr	r2, [pc, #84]	; (80096e0 <init_test+0x20c>)
 800968a:	8813      	ldrh	r3, [r2, #0]
 800968c:	f043 0320 	orr.w	r3, r3, #32
 8009690:	8013      	strh	r3, [r2, #0]

					while(1);
 8009692:	e7fe      	b.n	8009692 <init_test+0x1be>
					break;
				case 7:
					//----a停止時前壁補正モード----
					MF.FLAG.FWALL = 1;
 8009694:	4a13      	ldr	r2, [pc, #76]	; (80096e4 <init_test+0x210>)
 8009696:	8813      	ldrh	r3, [r2, #0]
 8009698:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800969c:	8013      	strh	r3, [r2, #0]
					MF.FLAG.DRV = 1;
 800969e:	4a11      	ldr	r2, [pc, #68]	; (80096e4 <init_test+0x210>)
 80096a0:	8813      	ldrh	r3, [r2, #0]
 80096a2:	f043 0302 	orr.w	r3, r3, #2
 80096a6:	8013      	strh	r3, [r2, #0]
					while(1);
 80096a8:	e7fe      	b.n	80096a8 <init_test+0x1d4>
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 80096aa:	e71c      	b.n	80094e6 <init_test+0x12>
 80096ac:	08013740 	.word	0x08013740
 80096b0:	20000aec 	.word	0x20000aec
 80096b4:	0801371c 	.word	0x0801371c
 80096b8:	40020000 	.word	0x40020000
 80096bc:	0801375c 	.word	0x0801375c
 80096c0:	08013780 	.word	0x08013780
 80096c4:	0801378c 	.word	0x0801378c
 80096c8:	08013798 	.word	0x08013798
 80096cc:	080137a4 	.word	0x080137a4
 80096d0:	20000b5c 	.word	0x20000b5c
 80096d4:	20000bf8 	.word	0x20000bf8
 80096d8:	20000d58 	.word	0x20000d58
 80096dc:	459c4000 	.word	0x459c4000
 80096e0:	20000f64 	.word	0x20000f64
 80096e4:	20000f68 	.word	0x20000f68

080096e8 <slalom_test>:
//slalom_test
// スラローム走行テスト
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void slalom_test(void){
 80096e8:	b580      	push	{r7, lr}
 80096ea:	b08e      	sub	sp, #56	; 0x38
 80096ec:	af00      	add	r7, sp, #0

	int mode = 0;
 80096ee:	2300      	movs	r3, #0
 80096f0:	637b      	str	r3, [r7, #52]	; 0x34
	printf("Test Slalom Run, Mode : %d\n", mode);
 80096f2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80096f4:	48b8      	ldr	r0, [pc, #736]	; (80099d8 <slalom_test+0x2f0>)
 80096f6:	f008 fef3 	bl	80124e0 <iprintf>

	run_select();
 80096fa:	f7fb fc15 	bl	8004f28 <run_select>

	while(1){
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 80096fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009700:	b2db      	uxtb	r3, r3
 8009702:	f003 0301 	and.w	r3, r3, #1
 8009706:	b2d8      	uxtb	r0, r3
 8009708:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800970a:	b2db      	uxtb	r3, r3
 800970c:	f003 0302 	and.w	r3, r3, #2
 8009710:	b2d9      	uxtb	r1, r3
 8009712:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009714:	b2db      	uxtb	r3, r3
 8009716:	f003 0304 	and.w	r3, r3, #4
 800971a:	b2db      	uxtb	r3, r3
 800971c:	461a      	mov	r2, r3
 800971e:	f008 f911 	bl	8011944 <led_write>
		  if(dist_r >= 20){
 8009722:	4bae      	ldr	r3, [pc, #696]	; (80099dc <slalom_test+0x2f4>)
 8009724:	edd3 7a00 	vldr	s15, [r3]
 8009728:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 800972c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009730:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009734:	db20      	blt.n	8009778 <slalom_test+0x90>
			  mode++;
 8009736:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009738:	3301      	adds	r3, #1
 800973a:	637b      	str	r3, [r7, #52]	; 0x34
			  dist_r = 0;
 800973c:	4ba7      	ldr	r3, [pc, #668]	; (80099dc <slalom_test+0x2f4>)
 800973e:	f04f 0200 	mov.w	r2, #0
 8009742:	601a      	str	r2, [r3, #0]
			  if(mode < 8){
 8009744:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009746:	2b07      	cmp	r3, #7
 8009748:	dc03      	bgt.n	8009752 <slalom_test+0x6a>
				  full_led_write(WHITE);
 800974a:	2007      	movs	r0, #7
 800974c:	f008 f934 	bl	80119b8 <full_led_write>
 8009750:	e009      	b.n	8009766 <slalom_test+0x7e>
			  }else if(mode < 16){
 8009752:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009754:	2b0f      	cmp	r3, #15
 8009756:	dc03      	bgt.n	8009760 <slalom_test+0x78>
				  full_led_write(BLUEGREEN);
 8009758:	2004      	movs	r0, #4
 800975a:	f008 f92d 	bl	80119b8 <full_led_write>
 800975e:	e002      	b.n	8009766 <slalom_test+0x7e>
			  }else{
				  full_led_write(PURPLE);
 8009760:	2005      	movs	r0, #5
 8009762:	f008 f929 	bl	80119b8 <full_led_write>
			  }
			  if(mode > 23){
 8009766:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009768:	2b17      	cmp	r3, #23
 800976a:	dd01      	ble.n	8009770 <slalom_test+0x88>
				  mode = 0;
 800976c:	2300      	movs	r3, #0
 800976e:	637b      	str	r3, [r7, #52]	; 0x34
			  }
			  printf("Mode : %d\n", mode);
 8009770:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009772:	489b      	ldr	r0, [pc, #620]	; (80099e0 <slalom_test+0x2f8>)
 8009774:	f008 feb4 	bl	80124e0 <iprintf>
		  }
		  if(dist_r <= -20){
 8009778:	4b98      	ldr	r3, [pc, #608]	; (80099dc <slalom_test+0x2f4>)
 800977a:	edd3 7a00 	vldr	s15, [r3]
 800977e:	eebb 7a04 	vmov.f32	s14, #180	; 0xc1a00000 -20.0
 8009782:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009786:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800978a:	d820      	bhi.n	80097ce <slalom_test+0xe6>
			  mode--;
 800978c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800978e:	3b01      	subs	r3, #1
 8009790:	637b      	str	r3, [r7, #52]	; 0x34
			  dist_r = 0;
 8009792:	4b92      	ldr	r3, [pc, #584]	; (80099dc <slalom_test+0x2f4>)
 8009794:	f04f 0200 	mov.w	r2, #0
 8009798:	601a      	str	r2, [r3, #0]
			  if(mode < 8){
 800979a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800979c:	2b07      	cmp	r3, #7
 800979e:	dc03      	bgt.n	80097a8 <slalom_test+0xc0>
				  full_led_write(WHITE);
 80097a0:	2007      	movs	r0, #7
 80097a2:	f008 f909 	bl	80119b8 <full_led_write>
 80097a6:	e009      	b.n	80097bc <slalom_test+0xd4>
			  }else if(mode < 16){
 80097a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80097aa:	2b0f      	cmp	r3, #15
 80097ac:	dc03      	bgt.n	80097b6 <slalom_test+0xce>
				  full_led_write(BLUEGREEN);
 80097ae:	2004      	movs	r0, #4
 80097b0:	f008 f902 	bl	80119b8 <full_led_write>
 80097b4:	e002      	b.n	80097bc <slalom_test+0xd4>
			  }else{
				  full_led_write(PURPLE);
 80097b6:	2005      	movs	r0, #5
 80097b8:	f008 f8fe 	bl	80119b8 <full_led_write>
			  }
			  if(mode < 0){
 80097bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80097be:	2b00      	cmp	r3, #0
 80097c0:	da01      	bge.n	80097c6 <slalom_test+0xde>
				  mode = 23;
 80097c2:	2317      	movs	r3, #23
 80097c4:	637b      	str	r3, [r7, #52]	; 0x34
			  }
			  printf("Mode : %d\n", mode);
 80097c6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80097c8:	4885      	ldr	r0, [pc, #532]	; (80099e0 <slalom_test+0x2f8>)
 80097ca:	f008 fe89 	bl	80124e0 <iprintf>
		  }
		  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET){
 80097ce:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80097d2:	4884      	ldr	r0, [pc, #528]	; (80099e4 <slalom_test+0x2fc>)
 80097d4:	f7f8 fd7e 	bl	80022d4 <HAL_GPIO_ReadPin>
 80097d8:	4603      	mov	r3, r0
 80097da:	2b00      	cmp	r3, #0
 80097dc:	d18f      	bne.n	80096fe <slalom_test+0x16>
			  HAL_Delay(50);
 80097de:	2032      	movs	r0, #50	; 0x32
 80097e0:	f7f7 fc1c 	bl	800101c <HAL_Delay>
			  while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET);
 80097e4:	bf00      	nop
 80097e6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80097ea:	487e      	ldr	r0, [pc, #504]	; (80099e4 <slalom_test+0x2fc>)
 80097ec:	f7f8 fd72 	bl	80022d4 <HAL_GPIO_ReadPin>
 80097f0:	4603      	mov	r3, r0
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d0f7      	beq.n	80097e6 <slalom_test+0xfe>
			  drive_ready();
 80097f6:	f7fb fa43 	bl	8004c80 <drive_ready>
			  get_base();
 80097fa:	f008 f84b 	bl	8011894 <get_base>

			  switch(mode){
 80097fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009800:	2b10      	cmp	r3, #16
 8009802:	f200 8130 	bhi.w	8009a66 <slalom_test+0x37e>
 8009806:	a201      	add	r2, pc, #4	; (adr r2, 800980c <slalom_test+0x124>)
 8009808:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800980c:	08009851 	.word	0x08009851
 8009810:	08009857 	.word	0x08009857
 8009814:	0800987d 	.word	0x0800987d
 8009818:	080098a3 	.word	0x080098a3
 800981c:	080098c9 	.word	0x080098c9
 8009820:	080098ef 	.word	0x080098ef
 8009824:	08009915 	.word	0x08009915
 8009828:	08009a67 	.word	0x08009a67
 800982c:	08009a67 	.word	0x08009a67
 8009830:	0800993b 	.word	0x0800993b
 8009834:	08009965 	.word	0x08009965
 8009838:	080099a3 	.word	0x080099a3
 800983c:	080099c9 	.word	0x080099c9
 8009840:	08009a1b 	.word	0x08009a1b
 8009844:	08009a41 	.word	0x08009a41
 8009848:	08009a67 	.word	0x08009a67
 800984c:	08009a67 	.word	0x08009a67
				case 0:
					get_base();
 8009850:	f008 f820 	bl	8011894 <get_base>
					break;
 8009854:	e107      	b.n	8009a66 <slalom_test+0x37e>
				case 1:
					//----slalom右折----
					printf("slalom turn right .\n");
 8009856:	4864      	ldr	r0, [pc, #400]	; (80099e8 <slalom_test+0x300>)
 8009858:	f008 feb6 	bl	80125c8 <puts>
					half_sectionA();
 800985c:	f7fc f98e 	bl	8005b7c <half_sectionA>
					for(int i = 0; i < 1; i++){
 8009860:	2300      	movs	r3, #0
 8009862:	633b      	str	r3, [r7, #48]	; 0x30
 8009864:	e004      	b.n	8009870 <slalom_test+0x188>
						slalom_R90();	//一区画のパルス分デフォルトインターバルで走行
 8009866:	f7fd f81b 	bl	80068a0 <slalom_R90>
					for(int i = 0; i < 1; i++){
 800986a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800986c:	3301      	adds	r3, #1
 800986e:	633b      	str	r3, [r7, #48]	; 0x30
 8009870:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009872:	2b00      	cmp	r3, #0
 8009874:	ddf7      	ble.n	8009866 <slalom_test+0x17e>
					}
					half_sectionD();
 8009876:	f7fc f9e7 	bl	8005c48 <half_sectionD>
					break;
 800987a:	e0f4      	b.n	8009a66 <slalom_test+0x37e>
				case 2:
					//----slalom左折----
					printf("slalom turn left .\n");
 800987c:	485b      	ldr	r0, [pc, #364]	; (80099ec <slalom_test+0x304>)
 800987e:	f008 fea3 	bl	80125c8 <puts>
					half_sectionA();
 8009882:	f7fc f97b 	bl	8005b7c <half_sectionA>
					for(int i = 0; i < 1; i++){
 8009886:	2300      	movs	r3, #0
 8009888:	62fb      	str	r3, [r7, #44]	; 0x2c
 800988a:	e004      	b.n	8009896 <slalom_test+0x1ae>
						slalom_L90();				//16回右90度回転、つまり4周回転
 800988c:	f7fd f91e 	bl	8006acc <slalom_L90>
					for(int i = 0; i < 1; i++){
 8009890:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009892:	3301      	adds	r3, #1
 8009894:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009896:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009898:	2b00      	cmp	r3, #0
 800989a:	ddf7      	ble.n	800988c <slalom_test+0x1a4>
					}
					half_sectionD();
 800989c:	f7fc f9d4 	bl	8005c48 <half_sectionD>
					break;
 80098a0:	e0e1      	b.n	8009a66 <slalom_test+0x37e>
				case 3:
					//----Lslalom右折----
					printf("Lslalom turn right .\n");
 80098a2:	4853      	ldr	r0, [pc, #332]	; (80099f0 <slalom_test+0x308>)
 80098a4:	f008 fe90 	bl	80125c8 <puts>
					half_sectionA();
 80098a8:	f7fc f968 	bl	8005b7c <half_sectionA>
					for(int i = 0; i < 1; i++){
 80098ac:	2300      	movs	r3, #0
 80098ae:	62bb      	str	r3, [r7, #40]	; 0x28
 80098b0:	e004      	b.n	80098bc <slalom_test+0x1d4>
						Lslalom_R90();				//16回右90度回転、つまり4周回転
 80098b2:	f7fd fa15 	bl	8006ce0 <Lslalom_R90>
					for(int i = 0; i < 1; i++){
 80098b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098b8:	3301      	adds	r3, #1
 80098ba:	62bb      	str	r3, [r7, #40]	; 0x28
 80098bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098be:	2b00      	cmp	r3, #0
 80098c0:	ddf7      	ble.n	80098b2 <slalom_test+0x1ca>
					}
					half_sectionD();
 80098c2:	f7fc f9c1 	bl	8005c48 <half_sectionD>
					break;
 80098c6:	e0ce      	b.n	8009a66 <slalom_test+0x37e>
				case 4:
					//----Lslalom左折----
					printf("Lslalom turn left .\n");
 80098c8:	484a      	ldr	r0, [pc, #296]	; (80099f4 <slalom_test+0x30c>)
 80098ca:	f008 fe7d 	bl	80125c8 <puts>
					half_sectionA();
 80098ce:	f7fc f955 	bl	8005b7c <half_sectionA>
					for(int i = 0; i < 1; i++){
 80098d2:	2300      	movs	r3, #0
 80098d4:	627b      	str	r3, [r7, #36]	; 0x24
 80098d6:	e004      	b.n	80098e2 <slalom_test+0x1fa>
						Lslalom_L90();				//16回左90度回転、つまり4周回転
 80098d8:	f7fd fb3a 	bl	8006f50 <Lslalom_L90>
					for(int i = 0; i < 1; i++){
 80098dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098de:	3301      	adds	r3, #1
 80098e0:	627b      	str	r3, [r7, #36]	; 0x24
 80098e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	ddf7      	ble.n	80098d8 <slalom_test+0x1f0>
					}
					half_sectionD();
 80098e8:	f7fc f9ae 	bl	8005c48 <half_sectionD>
					break;
 80098ec:	e0bb      	b.n	8009a66 <slalom_test+0x37e>
				case 5:
					//----Lslalom右180----
					printf("Lslalom turn right & right .\n");
 80098ee:	4842      	ldr	r0, [pc, #264]	; (80099f8 <slalom_test+0x310>)
 80098f0:	f008 fe6a 	bl	80125c8 <puts>
					half_sectionA();
 80098f4:	f7fc f942 	bl	8005b7c <half_sectionA>
					for(int i = 0; i < 1; i++){
 80098f8:	2300      	movs	r3, #0
 80098fa:	623b      	str	r3, [r7, #32]
 80098fc:	e004      	b.n	8009908 <slalom_test+0x220>
						Lslalom_R180();				//16回右180度回転、つまり4周回転
 80098fe:	f7fd fc53 	bl	80071a8 <Lslalom_R180>
					for(int i = 0; i < 1; i++){
 8009902:	6a3b      	ldr	r3, [r7, #32]
 8009904:	3301      	adds	r3, #1
 8009906:	623b      	str	r3, [r7, #32]
 8009908:	6a3b      	ldr	r3, [r7, #32]
 800990a:	2b00      	cmp	r3, #0
 800990c:	ddf7      	ble.n	80098fe <slalom_test+0x216>
					}
					half_sectionD();
 800990e:	f7fc f99b 	bl	8005c48 <half_sectionD>
					break;
 8009912:	e0a8      	b.n	8009a66 <slalom_test+0x37e>
				case 6:
					//----Lslalom左180----
					printf("Lslalom turn left & left .\n");
 8009914:	4839      	ldr	r0, [pc, #228]	; (80099fc <slalom_test+0x314>)
 8009916:	f008 fe57 	bl	80125c8 <puts>
					half_sectionA();
 800991a:	f7fc f92f 	bl	8005b7c <half_sectionA>
					for(int i = 0; i < 1; i++){
 800991e:	2300      	movs	r3, #0
 8009920:	61fb      	str	r3, [r7, #28]
 8009922:	e004      	b.n	800992e <slalom_test+0x246>
						Lslalom_L180();				//16回左180度回転、つまり4周回転
 8009924:	f7fd fd92 	bl	800744c <Lslalom_L180>
					for(int i = 0; i < 1; i++){
 8009928:	69fb      	ldr	r3, [r7, #28]
 800992a:	3301      	adds	r3, #1
 800992c:	61fb      	str	r3, [r7, #28]
 800992e:	69fb      	ldr	r3, [r7, #28]
 8009930:	2b00      	cmp	r3, #0
 8009932:	ddf7      	ble.n	8009924 <slalom_test+0x23c>
					}
					half_sectionD();
 8009934:	f7fc f988 	bl	8005c48 <half_sectionD>
					break;
 8009938:	e095      	b.n	8009a66 <slalom_test+0x37e>
					break;
				case 8:
					break;
				case 9:
					//----slalom右折----
					printf("slalom turn right .\n");
 800993a:	482b      	ldr	r0, [pc, #172]	; (80099e8 <slalom_test+0x300>)
 800993c:	f008 fe44 	bl	80125c8 <puts>
					half_sectionA();
 8009940:	f7fc f91c 	bl	8005b7c <half_sectionA>
					for(int i = 0; i < 8; i++){
 8009944:	2300      	movs	r3, #0
 8009946:	61bb      	str	r3, [r7, #24]
 8009948:	e006      	b.n	8009958 <slalom_test+0x270>
						slalom_R90();	//一区画のパルス分デフォルトインターバルで走行
 800994a:	f7fc ffa9 	bl	80068a0 <slalom_R90>
						one_sectionU();
 800994e:	f7fc fcff 	bl	8006350 <one_sectionU>
					for(int i = 0; i < 8; i++){
 8009952:	69bb      	ldr	r3, [r7, #24]
 8009954:	3301      	adds	r3, #1
 8009956:	61bb      	str	r3, [r7, #24]
 8009958:	69bb      	ldr	r3, [r7, #24]
 800995a:	2b07      	cmp	r3, #7
 800995c:	ddf5      	ble.n	800994a <slalom_test+0x262>
					}
					half_sectionD();
 800995e:	f7fc f973 	bl	8005c48 <half_sectionD>
					break;
 8009962:	e080      	b.n	8009a66 <slalom_test+0x37e>
				case 10:
					//----slalom左折----
					printf("slalom turn left .\n");
 8009964:	4821      	ldr	r0, [pc, #132]	; (80099ec <slalom_test+0x304>)
 8009966:	f008 fe2f 	bl	80125c8 <puts>
					half_sectionA();
 800996a:	f7fc f907 	bl	8005b7c <half_sectionA>
					MF2.FLAG.LOG = 1;
 800996e:	4a24      	ldr	r2, [pc, #144]	; (8009a00 <slalom_test+0x318>)
 8009970:	8813      	ldrh	r3, [r2, #0]
 8009972:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009976:	8013      	strh	r3, [r2, #0]
					for(int i = 0; i < 8; i++){
 8009978:	2300      	movs	r3, #0
 800997a:	617b      	str	r3, [r7, #20]
 800997c:	e006      	b.n	800998c <slalom_test+0x2a4>
						slalom_L90();				//16回右90度回転、つまり4周回転
 800997e:	f7fd f8a5 	bl	8006acc <slalom_L90>
						one_sectionU();
 8009982:	f7fc fce5 	bl	8006350 <one_sectionU>
					for(int i = 0; i < 8; i++){
 8009986:	697b      	ldr	r3, [r7, #20]
 8009988:	3301      	adds	r3, #1
 800998a:	617b      	str	r3, [r7, #20]
 800998c:	697b      	ldr	r3, [r7, #20]
 800998e:	2b07      	cmp	r3, #7
 8009990:	ddf5      	ble.n	800997e <slalom_test+0x296>
					}
					MF2.FLAG.LOG = 0;
 8009992:	4a1b      	ldr	r2, [pc, #108]	; (8009a00 <slalom_test+0x318>)
 8009994:	8813      	ldrh	r3, [r2, #0]
 8009996:	f36f 1386 	bfc	r3, #6, #1
 800999a:	8013      	strh	r3, [r2, #0]
					half_sectionD();
 800999c:	f7fc f954 	bl	8005c48 <half_sectionD>
					printf("r start\n");
					for(int j = 0; j < log_allay; j++){
						printf("%d\n", get_speed_r[j]);
					}
					printf("r end\n");
*/					break;
 80099a0:	e061      	b.n	8009a66 <slalom_test+0x37e>
				case 11:
					//----Lslalom右折----
					printf("Lslalom turn right .\n");
 80099a2:	4813      	ldr	r0, [pc, #76]	; (80099f0 <slalom_test+0x308>)
 80099a4:	f008 fe10 	bl	80125c8 <puts>
					half_sectionA();
 80099a8:	f7fc f8e8 	bl	8005b7c <half_sectionA>
					for(int i = 0; i < 8; i++){
 80099ac:	2300      	movs	r3, #0
 80099ae:	613b      	str	r3, [r7, #16]
 80099b0:	e004      	b.n	80099bc <slalom_test+0x2d4>
						Lslalom_R90();				//16回右90度回転、つまり4周回転
 80099b2:	f7fd f995 	bl	8006ce0 <Lslalom_R90>
					for(int i = 0; i < 8; i++){
 80099b6:	693b      	ldr	r3, [r7, #16]
 80099b8:	3301      	adds	r3, #1
 80099ba:	613b      	str	r3, [r7, #16]
 80099bc:	693b      	ldr	r3, [r7, #16]
 80099be:	2b07      	cmp	r3, #7
 80099c0:	ddf7      	ble.n	80099b2 <slalom_test+0x2ca>
					}
					half_sectionD();
 80099c2:	f7fc f941 	bl	8005c48 <half_sectionD>
					break;
 80099c6:	e04e      	b.n	8009a66 <slalom_test+0x37e>
				case 12:
					//----Lslalom左折----
					printf("Lslalom turn left .\n");
 80099c8:	480a      	ldr	r0, [pc, #40]	; (80099f4 <slalom_test+0x30c>)
 80099ca:	f008 fdfd 	bl	80125c8 <puts>
					half_sectionA();
 80099ce:	f7fc f8d5 	bl	8005b7c <half_sectionA>
					for(int i = 0; i < 8; i++){
 80099d2:	2300      	movs	r3, #0
 80099d4:	60fb      	str	r3, [r7, #12]
 80099d6:	e01a      	b.n	8009a0e <slalom_test+0x326>
 80099d8:	080137c4 	.word	0x080137c4
 80099dc:	20000aec 	.word	0x20000aec
 80099e0:	0801371c 	.word	0x0801371c
 80099e4:	40020000 	.word	0x40020000
 80099e8:	080137e0 	.word	0x080137e0
 80099ec:	080137f4 	.word	0x080137f4
 80099f0:	08013808 	.word	0x08013808
 80099f4:	08013820 	.word	0x08013820
 80099f8:	08013834 	.word	0x08013834
 80099fc:	08013854 	.word	0x08013854
 8009a00:	20000f64 	.word	0x20000f64
						Lslalom_L90();				//16回左90度回転、つまり4周回転
 8009a04:	f7fd faa4 	bl	8006f50 <Lslalom_L90>
					for(int i = 0; i < 8; i++){
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	3301      	adds	r3, #1
 8009a0c:	60fb      	str	r3, [r7, #12]
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	2b07      	cmp	r3, #7
 8009a12:	ddf7      	ble.n	8009a04 <slalom_test+0x31c>
					}
					half_sectionD();
 8009a14:	f7fc f918 	bl	8005c48 <half_sectionD>
					break;
 8009a18:	e025      	b.n	8009a66 <slalom_test+0x37e>
				case 13:
					//----Lslalom右180----
					printf("Lslalom turn right & right .\n");
 8009a1a:	4815      	ldr	r0, [pc, #84]	; (8009a70 <slalom_test+0x388>)
 8009a1c:	f008 fdd4 	bl	80125c8 <puts>
					half_sectionA();
 8009a20:	f7fc f8ac 	bl	8005b7c <half_sectionA>
					for(int i = 0; i < 8; i++){
 8009a24:	2300      	movs	r3, #0
 8009a26:	60bb      	str	r3, [r7, #8]
 8009a28:	e004      	b.n	8009a34 <slalom_test+0x34c>
						Lslalom_R180();				//16回右180度回転、つまり4周回転
 8009a2a:	f7fd fbbd 	bl	80071a8 <Lslalom_R180>
					for(int i = 0; i < 8; i++){
 8009a2e:	68bb      	ldr	r3, [r7, #8]
 8009a30:	3301      	adds	r3, #1
 8009a32:	60bb      	str	r3, [r7, #8]
 8009a34:	68bb      	ldr	r3, [r7, #8]
 8009a36:	2b07      	cmp	r3, #7
 8009a38:	ddf7      	ble.n	8009a2a <slalom_test+0x342>
					}
					half_sectionD();
 8009a3a:	f7fc f905 	bl	8005c48 <half_sectionD>
					break;
 8009a3e:	e012      	b.n	8009a66 <slalom_test+0x37e>
				case 14:
					//----Lslalom左180----
					printf("Lslalom turn left & left .\n");
 8009a40:	480c      	ldr	r0, [pc, #48]	; (8009a74 <slalom_test+0x38c>)
 8009a42:	f008 fdc1 	bl	80125c8 <puts>
					half_sectionA();
 8009a46:	f7fc f899 	bl	8005b7c <half_sectionA>
					for(int i = 0; i < 8; i++){
 8009a4a:	2300      	movs	r3, #0
 8009a4c:	607b      	str	r3, [r7, #4]
 8009a4e:	e004      	b.n	8009a5a <slalom_test+0x372>
						Lslalom_L180();				//16回左180度回転、つまり4周回転
 8009a50:	f7fd fcfc 	bl	800744c <Lslalom_L180>
					for(int i = 0; i < 8; i++){
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	3301      	adds	r3, #1
 8009a58:	607b      	str	r3, [r7, #4]
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	2b07      	cmp	r3, #7
 8009a5e:	ddf7      	ble.n	8009a50 <slalom_test+0x368>
					}
					half_sectionD();
 8009a60:	f7fc f8f2 	bl	8005c48 <half_sectionD>
					break;
 8009a64:	bf00      	nop
					break;
				case 16:
					break;

			  }
			  full_led_write(RED);
 8009a66:	2001      	movs	r0, #1
 8009a68:	f007 ffa6 	bl	80119b8 <full_led_write>
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 8009a6c:	e647      	b.n	80096fe <slalom_test+0x16>
 8009a6e:	bf00      	nop
 8009a70:	08013834 	.word	0x08013834
 8009a74:	08013854 	.word	0x08013854

08009a78 <v_test>:
//v_test
// 斜め走行テスト
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void v_test(void){
 8009a78:	b580      	push	{r7, lr}
 8009a7a:	b092      	sub	sp, #72	; 0x48
 8009a7c:	af00      	add	r7, sp, #0

	int mode = 0;
 8009a7e:	2300      	movs	r3, #0
 8009a80:	647b      	str	r3, [r7, #68]	; 0x44
	printf("Test V Run, Mode : %d\n", mode);
 8009a82:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009a84:	48ba      	ldr	r0, [pc, #744]	; (8009d70 <v_test+0x2f8>)
 8009a86:	f008 fd2b 	bl	80124e0 <iprintf>

	run_select();
 8009a8a:	f7fb fa4d 	bl	8004f28 <run_select>

	while(1){
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 8009a8e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009a90:	b2db      	uxtb	r3, r3
 8009a92:	f003 0301 	and.w	r3, r3, #1
 8009a96:	b2d8      	uxtb	r0, r3
 8009a98:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009a9a:	b2db      	uxtb	r3, r3
 8009a9c:	f003 0302 	and.w	r3, r3, #2
 8009aa0:	b2d9      	uxtb	r1, r3
 8009aa2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009aa4:	b2db      	uxtb	r3, r3
 8009aa6:	f003 0304 	and.w	r3, r3, #4
 8009aaa:	b2db      	uxtb	r3, r3
 8009aac:	461a      	mov	r2, r3
 8009aae:	f007 ff49 	bl	8011944 <led_write>
		  if(dist_r >= 20){
 8009ab2:	4bb0      	ldr	r3, [pc, #704]	; (8009d74 <v_test+0x2fc>)
 8009ab4:	edd3 7a00 	vldr	s15, [r3]
 8009ab8:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8009abc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009ac0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009ac4:	db20      	blt.n	8009b08 <v_test+0x90>
			  mode++;
 8009ac6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009ac8:	3301      	adds	r3, #1
 8009aca:	647b      	str	r3, [r7, #68]	; 0x44
			  dist_r = 0;
 8009acc:	4ba9      	ldr	r3, [pc, #676]	; (8009d74 <v_test+0x2fc>)
 8009ace:	f04f 0200 	mov.w	r2, #0
 8009ad2:	601a      	str	r2, [r3, #0]
			  if(mode > 23){
 8009ad4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009ad6:	2b17      	cmp	r3, #23
 8009ad8:	dd01      	ble.n	8009ade <v_test+0x66>
				  mode = 0;
 8009ada:	2300      	movs	r3, #0
 8009adc:	647b      	str	r3, [r7, #68]	; 0x44
			  }
			  if(mode < 8){
 8009ade:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009ae0:	2b07      	cmp	r3, #7
 8009ae2:	dc03      	bgt.n	8009aec <v_test+0x74>
				  full_led_write(WHITE);
 8009ae4:	2007      	movs	r0, #7
 8009ae6:	f007 ff67 	bl	80119b8 <full_led_write>
 8009aea:	e009      	b.n	8009b00 <v_test+0x88>
			  }else if(mode < 16){
 8009aec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009aee:	2b0f      	cmp	r3, #15
 8009af0:	dc03      	bgt.n	8009afa <v_test+0x82>
				  full_led_write(BLUEGREEN);
 8009af2:	2004      	movs	r0, #4
 8009af4:	f007 ff60 	bl	80119b8 <full_led_write>
 8009af8:	e002      	b.n	8009b00 <v_test+0x88>
			  }else{
				  full_led_write(PURPLE);
 8009afa:	2005      	movs	r0, #5
 8009afc:	f007 ff5c 	bl	80119b8 <full_led_write>
			  }
			  printf("Mode : %d\n", mode);
 8009b00:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009b02:	489d      	ldr	r0, [pc, #628]	; (8009d78 <v_test+0x300>)
 8009b04:	f008 fcec 	bl	80124e0 <iprintf>
		  }
		  if(dist_r <= -20){
 8009b08:	4b9a      	ldr	r3, [pc, #616]	; (8009d74 <v_test+0x2fc>)
 8009b0a:	edd3 7a00 	vldr	s15, [r3]
 8009b0e:	eebb 7a04 	vmov.f32	s14, #180	; 0xc1a00000 -20.0
 8009b12:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009b16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009b1a:	d820      	bhi.n	8009b5e <v_test+0xe6>
			  mode--;
 8009b1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009b1e:	3b01      	subs	r3, #1
 8009b20:	647b      	str	r3, [r7, #68]	; 0x44
			  dist_r = 0;
 8009b22:	4b94      	ldr	r3, [pc, #592]	; (8009d74 <v_test+0x2fc>)
 8009b24:	f04f 0200 	mov.w	r2, #0
 8009b28:	601a      	str	r2, [r3, #0]
			  if(mode < 0){
 8009b2a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	da01      	bge.n	8009b34 <v_test+0xbc>
				  mode = 23;
 8009b30:	2317      	movs	r3, #23
 8009b32:	647b      	str	r3, [r7, #68]	; 0x44
			  }
			  if(mode < 8){
 8009b34:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009b36:	2b07      	cmp	r3, #7
 8009b38:	dc03      	bgt.n	8009b42 <v_test+0xca>
				  full_led_write(WHITE);
 8009b3a:	2007      	movs	r0, #7
 8009b3c:	f007 ff3c 	bl	80119b8 <full_led_write>
 8009b40:	e009      	b.n	8009b56 <v_test+0xde>
			  }else if(mode < 16){
 8009b42:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009b44:	2b0f      	cmp	r3, #15
 8009b46:	dc03      	bgt.n	8009b50 <v_test+0xd8>
				  full_led_write(BLUEGREEN);
 8009b48:	2004      	movs	r0, #4
 8009b4a:	f007 ff35 	bl	80119b8 <full_led_write>
 8009b4e:	e002      	b.n	8009b56 <v_test+0xde>
			  }else{
				  full_led_write(PURPLE);
 8009b50:	2005      	movs	r0, #5
 8009b52:	f007 ff31 	bl	80119b8 <full_led_write>
			  }
			  printf("Mode : %d\n", mode);
 8009b56:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009b58:	4887      	ldr	r0, [pc, #540]	; (8009d78 <v_test+0x300>)
 8009b5a:	f008 fcc1 	bl	80124e0 <iprintf>
		  }
		  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET){
 8009b5e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8009b62:	4886      	ldr	r0, [pc, #536]	; (8009d7c <v_test+0x304>)
 8009b64:	f7f8 fbb6 	bl	80022d4 <HAL_GPIO_ReadPin>
 8009b68:	4603      	mov	r3, r0
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	d18f      	bne.n	8009a8e <v_test+0x16>
			  HAL_Delay(50);
 8009b6e:	2032      	movs	r0, #50	; 0x32
 8009b70:	f7f7 fa54 	bl	800101c <HAL_Delay>
			  while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET);
 8009b74:	bf00      	nop
 8009b76:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8009b7a:	4880      	ldr	r0, [pc, #512]	; (8009d7c <v_test+0x304>)
 8009b7c:	f7f8 fbaa 	bl	80022d4 <HAL_GPIO_ReadPin>
 8009b80:	4603      	mov	r3, r0
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	d0f7      	beq.n	8009b76 <v_test+0xfe>
			  drive_ready();
 8009b86:	f7fb f87b 	bl	8004c80 <drive_ready>

			  MF.FLAG.XDIR = 1;
 8009b8a:	4a7d      	ldr	r2, [pc, #500]	; (8009d80 <v_test+0x308>)
 8009b8c:	8813      	ldrh	r3, [r2, #0]
 8009b8e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8009b92:	8013      	strh	r3, [r2, #0]
			  MF2.FLAG.V = 0;
 8009b94:	4a7b      	ldr	r2, [pc, #492]	; (8009d84 <v_test+0x30c>)
 8009b96:	8813      	ldrh	r3, [r2, #0]
 8009b98:	f36f 03c3 	bfc	r3, #3, #1
 8009b9c:	8013      	strh	r3, [r2, #0]
			  get_base();
 8009b9e:	f007 fe79 	bl	8011894 <get_base>

			  switch(mode){
 8009ba2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009ba4:	2b14      	cmp	r3, #20
 8009ba6:	f200 818c 	bhi.w	8009ec2 <v_test+0x44a>
 8009baa:	a201      	add	r2, pc, #4	; (adr r2, 8009bb0 <v_test+0x138>)
 8009bac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bb0:	08009c05 	.word	0x08009c05
 8009bb4:	08009c0b 	.word	0x08009c0b
 8009bb8:	08009c31 	.word	0x08009c31
 8009bbc:	08009c57 	.word	0x08009c57
 8009bc0:	08009c7d 	.word	0x08009c7d
 8009bc4:	08009ca3 	.word	0x08009ca3
 8009bc8:	08009cc9 	.word	0x08009cc9
 8009bcc:	08009ec3 	.word	0x08009ec3
 8009bd0:	08009ec3 	.word	0x08009ec3
 8009bd4:	08009cef 	.word	0x08009cef
 8009bd8:	08009d15 	.word	0x08009d15
 8009bdc:	08009d3b 	.word	0x08009d3b
 8009be0:	08009d61 	.word	0x08009d61
 8009be4:	08009db7 	.word	0x08009db7
 8009be8:	08009ddd 	.word	0x08009ddd
 8009bec:	08009ec3 	.word	0x08009ec3
 8009bf0:	08009ec3 	.word	0x08009ec3
 8009bf4:	08009e03 	.word	0x08009e03
 8009bf8:	08009e33 	.word	0x08009e33
 8009bfc:	08009e63 	.word	0x08009e63
 8009c00:	08009e93 	.word	0x08009e93
				case 0:
					get_base();
 8009c04:	f007 fe46 	bl	8011894 <get_base>
					break;
 8009c08:	e15b      	b.n	8009ec2 <v_test+0x44a>
				case 1:
					//----V右45----
					printf("V 45 right .\n");
 8009c0a:	485f      	ldr	r0, [pc, #380]	; (8009d88 <v_test+0x310>)
 8009c0c:	f008 fcdc 	bl	80125c8 <puts>
					half_sectionA();
 8009c10:	f7fb ffb4 	bl	8005b7c <half_sectionA>
					for(int i = 0; i < 1; i++){
 8009c14:	2300      	movs	r3, #0
 8009c16:	643b      	str	r3, [r7, #64]	; 0x40
 8009c18:	e004      	b.n	8009c24 <v_test+0x1ac>
						v_R45();
 8009c1a:	f7fd fd5b 	bl	80076d4 <v_R45>
					for(int i = 0; i < 1; i++){
 8009c1e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009c20:	3301      	adds	r3, #1
 8009c22:	643b      	str	r3, [r7, #64]	; 0x40
 8009c24:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	ddf7      	ble.n	8009c1a <v_test+0x1a2>
					}
					half_sectionVD();
 8009c2a:	f7fc f8c9 	bl	8005dc0 <half_sectionVD>
					break;
 8009c2e:	e148      	b.n	8009ec2 <v_test+0x44a>
				case 2:
					//----V左45----
					printf("V 45 left .\n");
 8009c30:	4856      	ldr	r0, [pc, #344]	; (8009d8c <v_test+0x314>)
 8009c32:	f008 fcc9 	bl	80125c8 <puts>
					half_sectionA();
 8009c36:	f7fb ffa1 	bl	8005b7c <half_sectionA>
					for(int i = 0; i < 1; i++){
 8009c3a:	2300      	movs	r3, #0
 8009c3c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009c3e:	e004      	b.n	8009c4a <v_test+0x1d2>
						v_L45();
 8009c40:	f7fd ff2e 	bl	8007aa0 <v_L45>
					for(int i = 0; i < 1; i++){
 8009c44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009c46:	3301      	adds	r3, #1
 8009c48:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009c4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	ddf7      	ble.n	8009c40 <v_test+0x1c8>
					}
					half_sectionVD();
 8009c50:	f7fc f8b6 	bl	8005dc0 <half_sectionVD>
					break;
 8009c54:	e135      	b.n	8009ec2 <v_test+0x44a>
				case 3:
					//----V右90----
					printf("V 90 right .\n");
 8009c56:	484e      	ldr	r0, [pc, #312]	; (8009d90 <v_test+0x318>)
 8009c58:	f008 fcb6 	bl	80125c8 <puts>
					half_sectionVA();
 8009c5c:	f7fc f854 	bl	8005d08 <half_sectionVA>
//					v_R45();
					for(int i = 0; i < 1; i++){
 8009c60:	2300      	movs	r3, #0
 8009c62:	63bb      	str	r3, [r7, #56]	; 0x38
 8009c64:	e004      	b.n	8009c70 <v_test+0x1f8>
						v_R90();
 8009c66:	f7fe fb9f 	bl	80083a8 <v_R90>
					for(int i = 0; i < 1; i++){
 8009c6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c6c:	3301      	adds	r3, #1
 8009c6e:	63bb      	str	r3, [r7, #56]	; 0x38
 8009c70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	ddf7      	ble.n	8009c66 <v_test+0x1ee>
					}
//					v_R45();
					half_sectionVD();
 8009c76:	f7fc f8a3 	bl	8005dc0 <half_sectionVD>
					break;
 8009c7a:	e122      	b.n	8009ec2 <v_test+0x44a>
				case 4:
					//----V左90----
					printf("V 90 left .\n");
 8009c7c:	4845      	ldr	r0, [pc, #276]	; (8009d94 <v_test+0x31c>)
 8009c7e:	f008 fca3 	bl	80125c8 <puts>
					half_sectionVA();
 8009c82:	f7fc f841 	bl	8005d08 <half_sectionVA>
//					v_L45();
					for(int i = 0; i < 1; i++){
 8009c86:	2300      	movs	r3, #0
 8009c88:	637b      	str	r3, [r7, #52]	; 0x34
 8009c8a:	e004      	b.n	8009c96 <v_test+0x21e>
						v_L90();
 8009c8c:	f7fe fc5c 	bl	8008548 <v_L90>
					for(int i = 0; i < 1; i++){
 8009c90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c92:	3301      	adds	r3, #1
 8009c94:	637b      	str	r3, [r7, #52]	; 0x34
 8009c96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	ddf7      	ble.n	8009c8c <v_test+0x214>
					}
//					v_L45();
					half_sectionVD();
 8009c9c:	f7fc f890 	bl	8005dc0 <half_sectionVD>
					break;
 8009ca0:	e10f      	b.n	8009ec2 <v_test+0x44a>
				case 5:
					//----V右135----
					printf("V 135 right .\n");
 8009ca2:	483d      	ldr	r0, [pc, #244]	; (8009d98 <v_test+0x320>)
 8009ca4:	f008 fc90 	bl	80125c8 <puts>
					half_sectionA();
 8009ca8:	f7fb ff68 	bl	8005b7c <half_sectionA>
//					v_R45();
					for(int i = 0; i < 1; i++){
 8009cac:	2300      	movs	r3, #0
 8009cae:	633b      	str	r3, [r7, #48]	; 0x30
 8009cb0:	e004      	b.n	8009cbc <v_test+0x244>
						v_R135();
 8009cb2:	f7fe fd11 	bl	80086d8 <v_R135>
					for(int i = 0; i < 1; i++){
 8009cb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cb8:	3301      	adds	r3, #1
 8009cba:	633b      	str	r3, [r7, #48]	; 0x30
 8009cbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	ddf7      	ble.n	8009cb2 <v_test+0x23a>
					}
//					v_R45();
					half_sectionVD();
 8009cc2:	f7fc f87d 	bl	8005dc0 <half_sectionVD>
					break;
 8009cc6:	e0fc      	b.n	8009ec2 <v_test+0x44a>
				case 6:
					//----V左135----
					printf("V 135 left .\n");
 8009cc8:	4834      	ldr	r0, [pc, #208]	; (8009d9c <v_test+0x324>)
 8009cca:	f008 fc7d 	bl	80125c8 <puts>
					half_sectionA();
 8009cce:	f7fb ff55 	bl	8005b7c <half_sectionA>
//					v_L45();
					for(int i = 0; i < 1; i++){
 8009cd2:	2300      	movs	r3, #0
 8009cd4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009cd6:	e004      	b.n	8009ce2 <v_test+0x26a>
						v_L135();
 8009cd8:	f7fe fee8 	bl	8008aac <v_L135>
					for(int i = 0; i < 1; i++){
 8009cdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009cde:	3301      	adds	r3, #1
 8009ce0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009ce2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	ddf7      	ble.n	8009cd8 <v_test+0x260>
					}
//					v_L45();
					half_sectionVD();
 8009ce8:	f7fc f86a 	bl	8005dc0 <half_sectionVD>
					break;
 8009cec:	e0e9      	b.n	8009ec2 <v_test+0x44a>
					break;
				case 8:
					break;
				case 9:
					//----V右45----
					printf("V 45 right .\n");
 8009cee:	4826      	ldr	r0, [pc, #152]	; (8009d88 <v_test+0x310>)
 8009cf0:	f008 fc6a 	bl	80125c8 <puts>
					half_sectionA();
 8009cf4:	f7fb ff42 	bl	8005b7c <half_sectionA>
					for(int i = 0; i < 8; i++){
 8009cf8:	2300      	movs	r3, #0
 8009cfa:	62bb      	str	r3, [r7, #40]	; 0x28
 8009cfc:	e004      	b.n	8009d08 <v_test+0x290>
						v_R45();
 8009cfe:	f7fd fce9 	bl	80076d4 <v_R45>
					for(int i = 0; i < 8; i++){
 8009d02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d04:	3301      	adds	r3, #1
 8009d06:	62bb      	str	r3, [r7, #40]	; 0x28
 8009d08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d0a:	2b07      	cmp	r3, #7
 8009d0c:	ddf7      	ble.n	8009cfe <v_test+0x286>
					}
					half_sectionD();
 8009d0e:	f7fb ff9b 	bl	8005c48 <half_sectionD>
					break;
 8009d12:	e0d6      	b.n	8009ec2 <v_test+0x44a>
				case 10:
					//----V左45----
					printf("V 45 left .\n");
 8009d14:	481d      	ldr	r0, [pc, #116]	; (8009d8c <v_test+0x314>)
 8009d16:	f008 fc57 	bl	80125c8 <puts>
					half_sectionA();
 8009d1a:	f7fb ff2f 	bl	8005b7c <half_sectionA>
					for(int i = 0; i < 8; i++){
 8009d1e:	2300      	movs	r3, #0
 8009d20:	627b      	str	r3, [r7, #36]	; 0x24
 8009d22:	e004      	b.n	8009d2e <v_test+0x2b6>
						v_L45();
 8009d24:	f7fd febc 	bl	8007aa0 <v_L45>
					for(int i = 0; i < 8; i++){
 8009d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d2a:	3301      	adds	r3, #1
 8009d2c:	627b      	str	r3, [r7, #36]	; 0x24
 8009d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d30:	2b07      	cmp	r3, #7
 8009d32:	ddf7      	ble.n	8009d24 <v_test+0x2ac>
					}
					half_sectionD();
 8009d34:	f7fb ff88 	bl	8005c48 <half_sectionD>
					break;
 8009d38:	e0c3      	b.n	8009ec2 <v_test+0x44a>
				case 11:
					//----V右90----
					printf("V 90 right .\n");
 8009d3a:	4815      	ldr	r0, [pc, #84]	; (8009d90 <v_test+0x318>)
 8009d3c:	f008 fc44 	bl	80125c8 <puts>
					half_sectionVA();
 8009d40:	f7fb ffe2 	bl	8005d08 <half_sectionVA>
//					v_R45();
					for(int i = 0; i < 8; i++){
 8009d44:	2300      	movs	r3, #0
 8009d46:	623b      	str	r3, [r7, #32]
 8009d48:	e004      	b.n	8009d54 <v_test+0x2dc>
						v_R90();
 8009d4a:	f7fe fb2d 	bl	80083a8 <v_R90>
					for(int i = 0; i < 8; i++){
 8009d4e:	6a3b      	ldr	r3, [r7, #32]
 8009d50:	3301      	adds	r3, #1
 8009d52:	623b      	str	r3, [r7, #32]
 8009d54:	6a3b      	ldr	r3, [r7, #32]
 8009d56:	2b07      	cmp	r3, #7
 8009d58:	ddf7      	ble.n	8009d4a <v_test+0x2d2>
					}
//					v_R45();
					half_sectionVD();
 8009d5a:	f7fc f831 	bl	8005dc0 <half_sectionVD>
					break;
 8009d5e:	e0b0      	b.n	8009ec2 <v_test+0x44a>
				case 12:
					//----V左90----
					printf("V 90 left .\n");
 8009d60:	480c      	ldr	r0, [pc, #48]	; (8009d94 <v_test+0x31c>)
 8009d62:	f008 fc31 	bl	80125c8 <puts>
					half_sectionVA();
 8009d66:	f7fb ffcf 	bl	8005d08 <half_sectionVA>
//					v_L45();
					for(int i = 0; i < 8; i++){
 8009d6a:	2300      	movs	r3, #0
 8009d6c:	61fb      	str	r3, [r7, #28]
 8009d6e:	e01c      	b.n	8009daa <v_test+0x332>
 8009d70:	08013870 	.word	0x08013870
 8009d74:	20000aec 	.word	0x20000aec
 8009d78:	0801371c 	.word	0x0801371c
 8009d7c:	40020000 	.word	0x40020000
 8009d80:	20000f68 	.word	0x20000f68
 8009d84:	20000f64 	.word	0x20000f64
 8009d88:	08013888 	.word	0x08013888
 8009d8c:	08013898 	.word	0x08013898
 8009d90:	080138a4 	.word	0x080138a4
 8009d94:	080138b4 	.word	0x080138b4
 8009d98:	080138c0 	.word	0x080138c0
 8009d9c:	080138d0 	.word	0x080138d0
						v_L90();
 8009da0:	f7fe fbd2 	bl	8008548 <v_L90>
					for(int i = 0; i < 8; i++){
 8009da4:	69fb      	ldr	r3, [r7, #28]
 8009da6:	3301      	adds	r3, #1
 8009da8:	61fb      	str	r3, [r7, #28]
 8009daa:	69fb      	ldr	r3, [r7, #28]
 8009dac:	2b07      	cmp	r3, #7
 8009dae:	ddf7      	ble.n	8009da0 <v_test+0x328>
					}
//					v_L45();
					half_sectionVD();
 8009db0:	f7fc f806 	bl	8005dc0 <half_sectionVD>
					break;
 8009db4:	e085      	b.n	8009ec2 <v_test+0x44a>
				case 13:
					//----V右135----
					printf("V 135 right .\n");
 8009db6:	4845      	ldr	r0, [pc, #276]	; (8009ecc <v_test+0x454>)
 8009db8:	f008 fc06 	bl	80125c8 <puts>
					half_sectionA();
 8009dbc:	f7fb fede 	bl	8005b7c <half_sectionA>
//					v_R45();
					for(int i = 0; i < 4; i++){
 8009dc0:	2300      	movs	r3, #0
 8009dc2:	61bb      	str	r3, [r7, #24]
 8009dc4:	e004      	b.n	8009dd0 <v_test+0x358>
						v_R135();
 8009dc6:	f7fe fc87 	bl	80086d8 <v_R135>
					for(int i = 0; i < 4; i++){
 8009dca:	69bb      	ldr	r3, [r7, #24]
 8009dcc:	3301      	adds	r3, #1
 8009dce:	61bb      	str	r3, [r7, #24]
 8009dd0:	69bb      	ldr	r3, [r7, #24]
 8009dd2:	2b03      	cmp	r3, #3
 8009dd4:	ddf7      	ble.n	8009dc6 <v_test+0x34e>
					}
//					v_R45();
					half_sectionD();
 8009dd6:	f7fb ff37 	bl	8005c48 <half_sectionD>
					break;
 8009dda:	e072      	b.n	8009ec2 <v_test+0x44a>
				case 14:
					//----V左135----
					printf("V 135 left .\n");
 8009ddc:	483c      	ldr	r0, [pc, #240]	; (8009ed0 <v_test+0x458>)
 8009dde:	f008 fbf3 	bl	80125c8 <puts>
					half_sectionA();
 8009de2:	f7fb fecb 	bl	8005b7c <half_sectionA>
//					v_L45();
					for(int i = 0; i < 4; i++){
 8009de6:	2300      	movs	r3, #0
 8009de8:	617b      	str	r3, [r7, #20]
 8009dea:	e004      	b.n	8009df6 <v_test+0x37e>
						v_L135();
 8009dec:	f7fe fe5e 	bl	8008aac <v_L135>
					for(int i = 0; i < 4; i++){
 8009df0:	697b      	ldr	r3, [r7, #20]
 8009df2:	3301      	adds	r3, #1
 8009df4:	617b      	str	r3, [r7, #20]
 8009df6:	697b      	ldr	r3, [r7, #20]
 8009df8:	2b03      	cmp	r3, #3
 8009dfa:	ddf7      	ble.n	8009dec <v_test+0x374>
					}
//					v_L45();
					half_sectionD();
 8009dfc:	f7fb ff24 	bl	8005c48 <half_sectionD>
					break;
 8009e00:	e05f      	b.n	8009ec2 <v_test+0x44a>
					break;
				case 16:
					break;
				case 17:
					//----V右45D----
					printf("V 45 right .\n");
 8009e02:	4834      	ldr	r0, [pc, #208]	; (8009ed4 <v_test+0x45c>)
 8009e04:	f008 fbe0 	bl	80125c8 <puts>
					MF2.FLAG.V = 1;
 8009e08:	4a33      	ldr	r2, [pc, #204]	; (8009ed8 <v_test+0x460>)
 8009e0a:	8813      	ldrh	r3, [r2, #0]
 8009e0c:	f043 0308 	orr.w	r3, r3, #8
 8009e10:	8013      	strh	r3, [r2, #0]
					half_sectionVA();
 8009e12:	f7fb ff79 	bl	8005d08 <half_sectionVA>
					for(int i = 0; i < 1; i++){
 8009e16:	2300      	movs	r3, #0
 8009e18:	613b      	str	r3, [r7, #16]
 8009e1a:	e004      	b.n	8009e26 <v_test+0x3ae>
//						v_R45D();
						v_R45();
 8009e1c:	f7fd fc5a 	bl	80076d4 <v_R45>
					for(int i = 0; i < 1; i++){
 8009e20:	693b      	ldr	r3, [r7, #16]
 8009e22:	3301      	adds	r3, #1
 8009e24:	613b      	str	r3, [r7, #16]
 8009e26:	693b      	ldr	r3, [r7, #16]
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	ddf7      	ble.n	8009e1c <v_test+0x3a4>
					}
					half_sectionD();
 8009e2c:	f7fb ff0c 	bl	8005c48 <half_sectionD>
					break;
 8009e30:	e047      	b.n	8009ec2 <v_test+0x44a>
				case 18:
					//----V左45D----
					printf("V 45 left .\n");
 8009e32:	482a      	ldr	r0, [pc, #168]	; (8009edc <v_test+0x464>)
 8009e34:	f008 fbc8 	bl	80125c8 <puts>
					MF2.FLAG.V = 1;
 8009e38:	4a27      	ldr	r2, [pc, #156]	; (8009ed8 <v_test+0x460>)
 8009e3a:	8813      	ldrh	r3, [r2, #0]
 8009e3c:	f043 0308 	orr.w	r3, r3, #8
 8009e40:	8013      	strh	r3, [r2, #0]
					half_sectionVA();
 8009e42:	f7fb ff61 	bl	8005d08 <half_sectionVA>
					for(int i = 0; i < 1; i++){
 8009e46:	2300      	movs	r3, #0
 8009e48:	60fb      	str	r3, [r7, #12]
 8009e4a:	e004      	b.n	8009e56 <v_test+0x3de>
//						v_L45D();
						v_L45();
 8009e4c:	f7fd fe28 	bl	8007aa0 <v_L45>
					for(int i = 0; i < 1; i++){
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	3301      	adds	r3, #1
 8009e54:	60fb      	str	r3, [r7, #12]
 8009e56:	68fb      	ldr	r3, [r7, #12]
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	ddf7      	ble.n	8009e4c <v_test+0x3d4>
					}
					half_sectionD();
 8009e5c:	f7fb fef4 	bl	8005c48 <half_sectionD>
					break;
 8009e60:	e02f      	b.n	8009ec2 <v_test+0x44a>
				case 19:
					//----V右135D----
					printf("V 135 right .\n");
 8009e62:	481a      	ldr	r0, [pc, #104]	; (8009ecc <v_test+0x454>)
 8009e64:	f008 fbb0 	bl	80125c8 <puts>
					MF2.FLAG.V = 1;
 8009e68:	4a1b      	ldr	r2, [pc, #108]	; (8009ed8 <v_test+0x460>)
 8009e6a:	8813      	ldrh	r3, [r2, #0]
 8009e6c:	f043 0308 	orr.w	r3, r3, #8
 8009e70:	8013      	strh	r3, [r2, #0]
					half_sectionVA();
 8009e72:	f7fb ff49 	bl	8005d08 <half_sectionVA>
					for(int i = 0; i < 1; i++){
 8009e76:	2300      	movs	r3, #0
 8009e78:	60bb      	str	r3, [r7, #8]
 8009e7a:	e004      	b.n	8009e86 <v_test+0x40e>
//						v_R135D();
						v_R135();
 8009e7c:	f7fe fc2c 	bl	80086d8 <v_R135>
					for(int i = 0; i < 1; i++){
 8009e80:	68bb      	ldr	r3, [r7, #8]
 8009e82:	3301      	adds	r3, #1
 8009e84:	60bb      	str	r3, [r7, #8]
 8009e86:	68bb      	ldr	r3, [r7, #8]
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	ddf7      	ble.n	8009e7c <v_test+0x404>
					}
					half_sectionD();
 8009e8c:	f7fb fedc 	bl	8005c48 <half_sectionD>
					break;
 8009e90:	e017      	b.n	8009ec2 <v_test+0x44a>
				case 20:
					//----V左135D----
					printf("V 135 left .\n");
 8009e92:	480f      	ldr	r0, [pc, #60]	; (8009ed0 <v_test+0x458>)
 8009e94:	f008 fb98 	bl	80125c8 <puts>
					MF2.FLAG.V = 1;
 8009e98:	4a0f      	ldr	r2, [pc, #60]	; (8009ed8 <v_test+0x460>)
 8009e9a:	8813      	ldrh	r3, [r2, #0]
 8009e9c:	f043 0308 	orr.w	r3, r3, #8
 8009ea0:	8013      	strh	r3, [r2, #0]
					half_sectionVA();
 8009ea2:	f7fb ff31 	bl	8005d08 <half_sectionVA>
					for(int i = 0; i < 1; i++){
 8009ea6:	2300      	movs	r3, #0
 8009ea8:	607b      	str	r3, [r7, #4]
 8009eaa:	e004      	b.n	8009eb6 <v_test+0x43e>
//						v_L135D();
						v_L135();
 8009eac:	f7fe fdfe 	bl	8008aac <v_L135>
					for(int i = 0; i < 1; i++){
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	3301      	adds	r3, #1
 8009eb4:	607b      	str	r3, [r7, #4]
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	ddf7      	ble.n	8009eac <v_test+0x434>
					}
					half_sectionD();
 8009ebc:	f7fb fec4 	bl	8005c48 <half_sectionD>
					break;
 8009ec0:	bf00      	nop
			}
		full_led_write(RED);
 8009ec2:	2001      	movs	r0, #1
 8009ec4:	f007 fd78 	bl	80119b8 <full_led_write>
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 8009ec8:	e5e1      	b.n	8009a8e <v_test+0x16>
 8009eca:	bf00      	nop
 8009ecc:	080138c0 	.word	0x080138c0
 8009ed0:	080138d0 	.word	0x080138d0
 8009ed4:	08013888 	.word	0x08013888
 8009ed8:	20000f64 	.word	0x20000f64
 8009edc:	08013898 	.word	0x08013898

08009ee0 <pass_test>:
//pass_test
// pass圧縮走行テスト
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void pass_test(void){
 8009ee0:	b580      	push	{r7, lr}
 8009ee2:	b082      	sub	sp, #8
 8009ee4:	af00      	add	r7, sp, #0

	int mode = 0;
 8009ee6:	2300      	movs	r3, #0
 8009ee8:	607b      	str	r3, [r7, #4]
	printf("Test pass Run, Mode : %d\n", mode);
 8009eea:	6879      	ldr	r1, [r7, #4]
 8009eec:	48a2      	ldr	r0, [pc, #648]	; (800a178 <pass_test+0x298>)
 8009eee:	f008 faf7 	bl	80124e0 <iprintf>

	while(1){
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	b2db      	uxtb	r3, r3
 8009ef6:	f003 0301 	and.w	r3, r3, #1
 8009efa:	b2d8      	uxtb	r0, r3
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	b2db      	uxtb	r3, r3
 8009f00:	f003 0302 	and.w	r3, r3, #2
 8009f04:	b2d9      	uxtb	r1, r3
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	b2db      	uxtb	r3, r3
 8009f0a:	f003 0304 	and.w	r3, r3, #4
 8009f0e:	b2db      	uxtb	r3, r3
 8009f10:	461a      	mov	r2, r3
 8009f12:	f007 fd17 	bl	8011944 <led_write>
		  if(dist_r >= 20){
 8009f16:	4b99      	ldr	r3, [pc, #612]	; (800a17c <pass_test+0x29c>)
 8009f18:	edd3 7a00 	vldr	s15, [r3]
 8009f1c:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8009f20:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009f24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009f28:	db0f      	blt.n	8009f4a <pass_test+0x6a>
			  mode++;
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	3301      	adds	r3, #1
 8009f2e:	607b      	str	r3, [r7, #4]
			  dist_r = 0;
 8009f30:	4b92      	ldr	r3, [pc, #584]	; (800a17c <pass_test+0x29c>)
 8009f32:	f04f 0200 	mov.w	r2, #0
 8009f36:	601a      	str	r2, [r3, #0]
			  if(mode > 7){
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	2b07      	cmp	r3, #7
 8009f3c:	dd01      	ble.n	8009f42 <pass_test+0x62>
				  mode = 0;
 8009f3e:	2300      	movs	r3, #0
 8009f40:	607b      	str	r3, [r7, #4]
			  }
			  printf("Mode : %d\n", mode);
 8009f42:	6879      	ldr	r1, [r7, #4]
 8009f44:	488e      	ldr	r0, [pc, #568]	; (800a180 <pass_test+0x2a0>)
 8009f46:	f008 facb 	bl	80124e0 <iprintf>
		  }
		  if(dist_r <= -20){
 8009f4a:	4b8c      	ldr	r3, [pc, #560]	; (800a17c <pass_test+0x29c>)
 8009f4c:	edd3 7a00 	vldr	s15, [r3]
 8009f50:	eebb 7a04 	vmov.f32	s14, #180	; 0xc1a00000 -20.0
 8009f54:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009f58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009f5c:	d80f      	bhi.n	8009f7e <pass_test+0x9e>
			  mode--;
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	3b01      	subs	r3, #1
 8009f62:	607b      	str	r3, [r7, #4]
			  dist_r = 0;
 8009f64:	4b85      	ldr	r3, [pc, #532]	; (800a17c <pass_test+0x29c>)
 8009f66:	f04f 0200 	mov.w	r2, #0
 8009f6a:	601a      	str	r2, [r3, #0]
			  if(mode < 0){
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	da01      	bge.n	8009f76 <pass_test+0x96>
				  mode = 7;
 8009f72:	2307      	movs	r3, #7
 8009f74:	607b      	str	r3, [r7, #4]
			  }
			  printf("Mode : %d\n", mode);
 8009f76:	6879      	ldr	r1, [r7, #4]
 8009f78:	4881      	ldr	r0, [pc, #516]	; (800a180 <pass_test+0x2a0>)
 8009f7a:	f008 fab1 	bl	80124e0 <iprintf>
		  }
		  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET){
 8009f7e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8009f82:	4880      	ldr	r0, [pc, #512]	; (800a184 <pass_test+0x2a4>)
 8009f84:	f7f8 f9a6 	bl	80022d4 <HAL_GPIO_ReadPin>
 8009f88:	4603      	mov	r3, r0
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	d1b1      	bne.n	8009ef2 <pass_test+0x12>
			  HAL_Delay(50);
 8009f8e:	2032      	movs	r0, #50	; 0x32
 8009f90:	f7f7 f844 	bl	800101c <HAL_Delay>
			  while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET);
 8009f94:	bf00      	nop
 8009f96:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8009f9a:	487a      	ldr	r0, [pc, #488]	; (800a184 <pass_test+0x2a4>)
 8009f9c:	f7f8 f99a 	bl	80022d4 <HAL_GPIO_ReadPin>
 8009fa0:	4603      	mov	r3, r0
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	d0f7      	beq.n	8009f96 <pass_test+0xb6>
			  drive_ready();
 8009fa6:	f7fa fe6b 	bl	8004c80 <drive_ready>
			  MF2.FLAG.V = 0;
 8009faa:	4a77      	ldr	r2, [pc, #476]	; (800a188 <pass_test+0x2a8>)
 8009fac:	8813      	ldrh	r3, [r2, #0]
 8009fae:	f36f 03c3 	bfc	r3, #3, #1
 8009fb2:	8013      	strh	r3, [r2, #0]

			  switch(mode){
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	2b07      	cmp	r3, #7
 8009fb8:	d89b      	bhi.n	8009ef2 <pass_test+0x12>
 8009fba:	a201      	add	r2, pc, #4	; (adr r2, 8009fc0 <pass_test+0xe0>)
 8009fbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009fc0:	08009fe1 	.word	0x08009fe1
 8009fc4:	0800a069 	.word	0x0800a069
 8009fc8:	0800a0f1 	.word	0x0800a0f1
 8009fcc:	0800a1b9 	.word	0x0800a1b9
 8009fd0:	0800a241 	.word	0x0800a241
 8009fd4:	0800a2c9 	.word	0x0800a2c9
 8009fd8:	08009ef3 	.word	0x08009ef3
 8009fdc:	0800a351 	.word	0x0800a351
				case 0:
					//----a一次探索スラローム走行----
					printf("First Run. (Slalom)\n");
 8009fe0:	486a      	ldr	r0, [pc, #424]	; (800a18c <pass_test+0x2ac>)
 8009fe2:	f008 faf1 	bl	80125c8 <puts>

					MF.FLAG.SCND = 0;
 8009fe6:	4a6a      	ldr	r2, [pc, #424]	; (800a190 <pass_test+0x2b0>)
 8009fe8:	8813      	ldrh	r3, [r2, #0]
 8009fea:	f36f 1345 	bfc	r3, #5, #1
 8009fee:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 8009ff0:	4a67      	ldr	r2, [pc, #412]	; (800a190 <pass_test+0x2b0>)
 8009ff2:	8813      	ldrh	r3, [r2, #0]
 8009ff4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009ff8:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 0;
 8009ffa:	4a65      	ldr	r2, [pc, #404]	; (800a190 <pass_test+0x2b0>)
 8009ffc:	8813      	ldrh	r3, [r2, #0]
 8009ffe:	f36f 238a 	bfc	r3, #10, #1
 800a002:	8013      	strh	r3, [r2, #0]
					run_mode = MIDDLE;
 800a004:	4b63      	ldr	r3, [pc, #396]	; (800a194 <pass_test+0x2b4>)
 800a006:	2202      	movs	r2, #2
 800a008:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800a00a:	4b63      	ldr	r3, [pc, #396]	; (800a198 <pass_test+0x2b8>)
 800a00c:	2200      	movs	r2, #0
 800a00e:	701a      	strb	r2, [r3, #0]
					goal_mode = 1;
 800a010:	4b62      	ldr	r3, [pc, #392]	; (800a19c <pass_test+0x2bc>)
 800a012:	2201      	movs	r2, #1
 800a014:	701a      	strb	r2, [r3, #0]
					accel_hs = 4000;
 800a016:	4b62      	ldr	r3, [pc, #392]	; (800a1a0 <pass_test+0x2c0>)
 800a018:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 800a01c:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1000;
 800a01e:	4b61      	ldr	r3, [pc, #388]	; (800a1a4 <pass_test+0x2c4>)
 800a020:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800a024:	801a      	strh	r2, [r3, #0]
					start_mode = 0;
 800a026:	4b5c      	ldr	r3, [pc, #368]	; (800a198 <pass_test+0x2b8>)
 800a028:	2200      	movs	r2, #0
 800a02a:	701a      	strb	r2, [r3, #0]
					goal_x = GOAL_X;
 800a02c:	4b5e      	ldr	r3, [pc, #376]	; (800a1a8 <pass_test+0x2c8>)
 800a02e:	2207      	movs	r2, #7
 800a030:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800a032:	4b5e      	ldr	r3, [pc, #376]	; (800a1ac <pass_test+0x2cc>)
 800a034:	2206      	movs	r2, #6
 800a036:	701a      	strb	r2, [r3, #0]

					get_base();
 800a038:	f007 fc2c 	bl	8011894 <get_base>

					searchC();
 800a03c:	f004 fc54 	bl	800e8e8 <searchC>
					HAL_Delay(2000);
 800a040:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800a044:	f7f6 ffea 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800a048:	4b58      	ldr	r3, [pc, #352]	; (800a1ac <pass_test+0x2cc>)
 800a04a:	2200      	movs	r2, #0
 800a04c:	701a      	strb	r2, [r3, #0]
 800a04e:	4b57      	ldr	r3, [pc, #348]	; (800a1ac <pass_test+0x2cc>)
 800a050:	781a      	ldrb	r2, [r3, #0]
 800a052:	4b55      	ldr	r3, [pc, #340]	; (800a1a8 <pass_test+0x2c8>)
 800a054:	701a      	strb	r2, [r3, #0]
					searchC();
 800a056:	f004 fc47 	bl	800e8e8 <searchC>

					goal_x = GOAL_X;
 800a05a:	4b53      	ldr	r3, [pc, #332]	; (800a1a8 <pass_test+0x2c8>)
 800a05c:	2207      	movs	r2, #7
 800a05e:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800a060:	4b52      	ldr	r3, [pc, #328]	; (800a1ac <pass_test+0x2cc>)
 800a062:	2206      	movs	r2, #6
 800a064:	701a      	strb	r2, [r3, #0]
					break;
 800a066:	e1b7      	b.n	800a3d8 <pass_test+0x4f8>
				case 1:
					//----a直線と大回り圧縮(adv_posを停止)+半区画ベース Middle Speed----
					printf("pass press 3-2.\n");
 800a068:	4851      	ldr	r0, [pc, #324]	; (800a1b0 <pass_test+0x2d0>)
 800a06a:	f008 faad 	bl	80125c8 <puts>
					MF.FLAG.SCND = 1;
 800a06e:	4a48      	ldr	r2, [pc, #288]	; (800a190 <pass_test+0x2b0>)
 800a070:	8813      	ldrh	r3, [r2, #0]
 800a072:	f043 0320 	orr.w	r3, r3, #32
 800a076:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800a078:	4a45      	ldr	r2, [pc, #276]	; (800a190 <pass_test+0x2b0>)
 800a07a:	8813      	ldrh	r3, [r2, #0]
 800a07c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a080:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800a082:	4a43      	ldr	r2, [pc, #268]	; (800a190 <pass_test+0x2b0>)
 800a084:	8813      	ldrh	r3, [r2, #0]
 800a086:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800a08a:	8013      	strh	r3, [r2, #0]
					run_mode = MIDDLE;
 800a08c:	4b41      	ldr	r3, [pc, #260]	; (800a194 <pass_test+0x2b4>)
 800a08e:	2202      	movs	r2, #2
 800a090:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800a092:	4b41      	ldr	r3, [pc, #260]	; (800a198 <pass_test+0x2b8>)
 800a094:	2200      	movs	r2, #0
 800a096:	701a      	strb	r2, [r3, #0]
					goal_mode = 1;
 800a098:	4b40      	ldr	r3, [pc, #256]	; (800a19c <pass_test+0x2bc>)
 800a09a:	2201      	movs	r2, #1
 800a09c:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 800a09e:	4b40      	ldr	r3, [pc, #256]	; (800a1a0 <pass_test+0x2c0>)
 800a0a0:	f241 3288 	movw	r2, #5000	; 0x1388
 800a0a4:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1200;
 800a0a6:	4b3f      	ldr	r3, [pc, #252]	; (800a1a4 <pass_test+0x2c4>)
 800a0a8:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 800a0ac:	801a      	strh	r2, [r3, #0]

					pass_mode = 3;						//a半区画ベースでroute配列生成
 800a0ae:	4b41      	ldr	r3, [pc, #260]	; (800a1b4 <pass_test+0x2d4>)
 800a0b0:	2203      	movs	r2, #3
 800a0b2:	701a      	strb	r2, [r3, #0]

					goal_x = GOAL_X;
 800a0b4:	4b3c      	ldr	r3, [pc, #240]	; (800a1a8 <pass_test+0x2c8>)
 800a0b6:	2207      	movs	r2, #7
 800a0b8:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800a0ba:	4b3c      	ldr	r3, [pc, #240]	; (800a1ac <pass_test+0x2cc>)
 800a0bc:	2206      	movs	r2, #6
 800a0be:	701a      	strb	r2, [r3, #0]

					get_base();
 800a0c0:	f007 fbe8 	bl	8011894 <get_base>

					searchF3();
 800a0c4:	f005 f88a 	bl	800f1dc <searchF3>
					HAL_Delay(2000);
 800a0c8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800a0cc:	f7f6 ffa6 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800a0d0:	4b36      	ldr	r3, [pc, #216]	; (800a1ac <pass_test+0x2cc>)
 800a0d2:	2200      	movs	r2, #0
 800a0d4:	701a      	strb	r2, [r3, #0]
 800a0d6:	4b35      	ldr	r3, [pc, #212]	; (800a1ac <pass_test+0x2cc>)
 800a0d8:	781a      	ldrb	r2, [r3, #0]
 800a0da:	4b33      	ldr	r3, [pc, #204]	; (800a1a8 <pass_test+0x2c8>)
 800a0dc:	701a      	strb	r2, [r3, #0]
					searchF3();
 800a0de:	f005 f87d 	bl	800f1dc <searchF3>

					goal_x = GOAL_X;
 800a0e2:	4b31      	ldr	r3, [pc, #196]	; (800a1a8 <pass_test+0x2c8>)
 800a0e4:	2207      	movs	r2, #7
 800a0e6:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800a0e8:	4b30      	ldr	r3, [pc, #192]	; (800a1ac <pass_test+0x2cc>)
 800a0ea:	2206      	movs	r2, #6
 800a0ec:	701a      	strb	r2, [r3, #0]
					break;
 800a0ee:	e173      	b.n	800a3d8 <pass_test+0x4f8>
				case 2:
					//----a直線と大回り圧縮(adv_posを停止)+半区画ベース High Speed----
					printf("pass press 3-2.\n");
 800a0f0:	482f      	ldr	r0, [pc, #188]	; (800a1b0 <pass_test+0x2d0>)
 800a0f2:	f008 fa69 	bl	80125c8 <puts>
					MF.FLAG.SCND = 1;
 800a0f6:	4a26      	ldr	r2, [pc, #152]	; (800a190 <pass_test+0x2b0>)
 800a0f8:	8813      	ldrh	r3, [r2, #0]
 800a0fa:	f043 0320 	orr.w	r3, r3, #32
 800a0fe:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800a100:	4a23      	ldr	r2, [pc, #140]	; (800a190 <pass_test+0x2b0>)
 800a102:	8813      	ldrh	r3, [r2, #0]
 800a104:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a108:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800a10a:	4a21      	ldr	r2, [pc, #132]	; (800a190 <pass_test+0x2b0>)
 800a10c:	8813      	ldrh	r3, [r2, #0]
 800a10e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800a112:	8013      	strh	r3, [r2, #0]
					run_mode = HIGH;
 800a114:	4b1f      	ldr	r3, [pc, #124]	; (800a194 <pass_test+0x2b4>)
 800a116:	2203      	movs	r2, #3
 800a118:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800a11a:	4b1f      	ldr	r3, [pc, #124]	; (800a198 <pass_test+0x2b8>)
 800a11c:	2200      	movs	r2, #0
 800a11e:	701a      	strb	r2, [r3, #0]
					goal_mode = 1;
 800a120:	4b1e      	ldr	r3, [pc, #120]	; (800a19c <pass_test+0x2bc>)
 800a122:	2201      	movs	r2, #1
 800a124:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 800a126:	4b1e      	ldr	r3, [pc, #120]	; (800a1a0 <pass_test+0x2c0>)
 800a128:	f241 3288 	movw	r2, #5000	; 0x1388
 800a12c:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1600;
 800a12e:	4b1d      	ldr	r3, [pc, #116]	; (800a1a4 <pass_test+0x2c4>)
 800a130:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800a134:	801a      	strh	r2, [r3, #0]

					pass_mode = 3;						//a半区画ベースでroute配列生成
 800a136:	4b1f      	ldr	r3, [pc, #124]	; (800a1b4 <pass_test+0x2d4>)
 800a138:	2203      	movs	r2, #3
 800a13a:	701a      	strb	r2, [r3, #0]

					goal_x = GOAL_X;
 800a13c:	4b1a      	ldr	r3, [pc, #104]	; (800a1a8 <pass_test+0x2c8>)
 800a13e:	2207      	movs	r2, #7
 800a140:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800a142:	4b1a      	ldr	r3, [pc, #104]	; (800a1ac <pass_test+0x2cc>)
 800a144:	2206      	movs	r2, #6
 800a146:	701a      	strb	r2, [r3, #0]

					get_base();
 800a148:	f007 fba4 	bl	8011894 <get_base>

					searchF3();
 800a14c:	f005 f846 	bl	800f1dc <searchF3>
					HAL_Delay(2000);
 800a150:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800a154:	f7f6 ff62 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800a158:	4b14      	ldr	r3, [pc, #80]	; (800a1ac <pass_test+0x2cc>)
 800a15a:	2200      	movs	r2, #0
 800a15c:	701a      	strb	r2, [r3, #0]
 800a15e:	4b13      	ldr	r3, [pc, #76]	; (800a1ac <pass_test+0x2cc>)
 800a160:	781a      	ldrb	r2, [r3, #0]
 800a162:	4b11      	ldr	r3, [pc, #68]	; (800a1a8 <pass_test+0x2c8>)
 800a164:	701a      	strb	r2, [r3, #0]
					searchF3();
 800a166:	f005 f839 	bl	800f1dc <searchF3>

					goal_x = GOAL_X;
 800a16a:	4b0f      	ldr	r3, [pc, #60]	; (800a1a8 <pass_test+0x2c8>)
 800a16c:	2207      	movs	r2, #7
 800a16e:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800a170:	4b0e      	ldr	r3, [pc, #56]	; (800a1ac <pass_test+0x2cc>)
 800a172:	2206      	movs	r2, #6
 800a174:	701a      	strb	r2, [r3, #0]
					break;
 800a176:	e12f      	b.n	800a3d8 <pass_test+0x4f8>
 800a178:	080138e0 	.word	0x080138e0
 800a17c:	20000aec 	.word	0x20000aec
 800a180:	0801371c 	.word	0x0801371c
 800a184:	40020000 	.word	0x40020000
 800a188:	20000f64 	.word	0x20000f64
 800a18c:	080138fc 	.word	0x080138fc
 800a190:	20000f68 	.word	0x20000f68
 800a194:	20000456 	.word	0x20000456
 800a198:	200015c8 	.word	0x200015c8
 800a19c:	20000bb1 	.word	0x20000bb1
 800a1a0:	20000454 	.word	0x20000454
 800a1a4:	20000f7c 	.word	0x20000f7c
 800a1a8:	20000bb0 	.word	0x20000bb0
 800a1ac:	20000b4c 	.word	0x20000b4c
 800a1b0:	08013910 	.word	0x08013910
 800a1b4:	20000457 	.word	0x20000457
				case 3:
					//----a直線と大回り圧縮(adv_posを停止)+半区画ベース High High Speed----
					printf("pass press 3-2.\n");
 800a1b8:	4888      	ldr	r0, [pc, #544]	; (800a3dc <pass_test+0x4fc>)
 800a1ba:	f008 fa05 	bl	80125c8 <puts>
					MF.FLAG.SCND = 1;
 800a1be:	4a88      	ldr	r2, [pc, #544]	; (800a3e0 <pass_test+0x500>)
 800a1c0:	8813      	ldrh	r3, [r2, #0]
 800a1c2:	f043 0320 	orr.w	r3, r3, #32
 800a1c6:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800a1c8:	4a85      	ldr	r2, [pc, #532]	; (800a3e0 <pass_test+0x500>)
 800a1ca:	8813      	ldrh	r3, [r2, #0]
 800a1cc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a1d0:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800a1d2:	4a83      	ldr	r2, [pc, #524]	; (800a3e0 <pass_test+0x500>)
 800a1d4:	8813      	ldrh	r3, [r2, #0]
 800a1d6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800a1da:	8013      	strh	r3, [r2, #0]
					run_mode = HIGH_HIGH;
 800a1dc:	4b81      	ldr	r3, [pc, #516]	; (800a3e4 <pass_test+0x504>)
 800a1de:	2204      	movs	r2, #4
 800a1e0:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800a1e2:	4b81      	ldr	r3, [pc, #516]	; (800a3e8 <pass_test+0x508>)
 800a1e4:	2200      	movs	r2, #0
 800a1e6:	701a      	strb	r2, [r3, #0]
					goal_mode = 2;
 800a1e8:	4b80      	ldr	r3, [pc, #512]	; (800a3ec <pass_test+0x50c>)
 800a1ea:	2202      	movs	r2, #2
 800a1ec:	701a      	strb	r2, [r3, #0]
					accel_hs = 10000;
 800a1ee:	4b80      	ldr	r3, [pc, #512]	; (800a3f0 <pass_test+0x510>)
 800a1f0:	f242 7210 	movw	r2, #10000	; 0x2710
 800a1f4:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 2000;
 800a1f6:	4b7f      	ldr	r3, [pc, #508]	; (800a3f4 <pass_test+0x514>)
 800a1f8:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800a1fc:	801a      	strh	r2, [r3, #0]

					pass_mode = 3;						//a半区画ベースでroute配列生成
 800a1fe:	4b7e      	ldr	r3, [pc, #504]	; (800a3f8 <pass_test+0x518>)
 800a200:	2203      	movs	r2, #3
 800a202:	701a      	strb	r2, [r3, #0]

					goal_x = GOAL_X;
 800a204:	4b7d      	ldr	r3, [pc, #500]	; (800a3fc <pass_test+0x51c>)
 800a206:	2207      	movs	r2, #7
 800a208:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800a20a:	4b7d      	ldr	r3, [pc, #500]	; (800a400 <pass_test+0x520>)
 800a20c:	2206      	movs	r2, #6
 800a20e:	701a      	strb	r2, [r3, #0]

					get_base();
 800a210:	f007 fb40 	bl	8011894 <get_base>

					searchF3();
 800a214:	f004 ffe2 	bl	800f1dc <searchF3>
					HAL_Delay(2000);
 800a218:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800a21c:	f7f6 fefe 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800a220:	4b77      	ldr	r3, [pc, #476]	; (800a400 <pass_test+0x520>)
 800a222:	2200      	movs	r2, #0
 800a224:	701a      	strb	r2, [r3, #0]
 800a226:	4b76      	ldr	r3, [pc, #472]	; (800a400 <pass_test+0x520>)
 800a228:	781a      	ldrb	r2, [r3, #0]
 800a22a:	4b74      	ldr	r3, [pc, #464]	; (800a3fc <pass_test+0x51c>)
 800a22c:	701a      	strb	r2, [r3, #0]
					searchF3();
 800a22e:	f004 ffd5 	bl	800f1dc <searchF3>

					goal_x = GOAL_X;
 800a232:	4b72      	ldr	r3, [pc, #456]	; (800a3fc <pass_test+0x51c>)
 800a234:	2207      	movs	r2, #7
 800a236:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800a238:	4b71      	ldr	r3, [pc, #452]	; (800a400 <pass_test+0x520>)
 800a23a:	2206      	movs	r2, #6
 800a23c:	701a      	strb	r2, [r3, #0]
					break;
 800a23e:	e0cb      	b.n	800a3d8 <pass_test+0x4f8>
				case 4:
					//----a直線と大回り圧縮と斜め Middle Speedｰｰｰｰ
					printf("pass press 4.\n");
 800a240:	4870      	ldr	r0, [pc, #448]	; (800a404 <pass_test+0x524>)
 800a242:	f008 f9c1 	bl	80125c8 <puts>
					MF.FLAG.SCND = 1;
 800a246:	4a66      	ldr	r2, [pc, #408]	; (800a3e0 <pass_test+0x500>)
 800a248:	8813      	ldrh	r3, [r2, #0]
 800a24a:	f043 0320 	orr.w	r3, r3, #32
 800a24e:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800a250:	4a63      	ldr	r2, [pc, #396]	; (800a3e0 <pass_test+0x500>)
 800a252:	8813      	ldrh	r3, [r2, #0]
 800a254:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a258:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800a25a:	4a61      	ldr	r2, [pc, #388]	; (800a3e0 <pass_test+0x500>)
 800a25c:	8813      	ldrh	r3, [r2, #0]
 800a25e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800a262:	8013      	strh	r3, [r2, #0]
					run_mode = MIDDLE;
 800a264:	4b5f      	ldr	r3, [pc, #380]	; (800a3e4 <pass_test+0x504>)
 800a266:	2202      	movs	r2, #2
 800a268:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800a26a:	4b5f      	ldr	r3, [pc, #380]	; (800a3e8 <pass_test+0x508>)
 800a26c:	2200      	movs	r2, #0
 800a26e:	701a      	strb	r2, [r3, #0]
					goal_mode = 2;
 800a270:	4b5e      	ldr	r3, [pc, #376]	; (800a3ec <pass_test+0x50c>)
 800a272:	2202      	movs	r2, #2
 800a274:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 800a276:	4b5e      	ldr	r3, [pc, #376]	; (800a3f0 <pass_test+0x510>)
 800a278:	f241 3288 	movw	r2, #5000	; 0x1388
 800a27c:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1200;
 800a27e:	4b5d      	ldr	r3, [pc, #372]	; (800a3f4 <pass_test+0x514>)
 800a280:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 800a284:	801a      	strh	r2, [r3, #0]

					pass_mode = 4;
 800a286:	4b5c      	ldr	r3, [pc, #368]	; (800a3f8 <pass_test+0x518>)
 800a288:	2204      	movs	r2, #4
 800a28a:	701a      	strb	r2, [r3, #0]

					goal_x = GOAL_X;
 800a28c:	4b5b      	ldr	r3, [pc, #364]	; (800a3fc <pass_test+0x51c>)
 800a28e:	2207      	movs	r2, #7
 800a290:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800a292:	4b5b      	ldr	r3, [pc, #364]	; (800a400 <pass_test+0x520>)
 800a294:	2206      	movs	r2, #6
 800a296:	701a      	strb	r2, [r3, #0]

					get_base();
 800a298:	f007 fafc 	bl	8011894 <get_base>

					searchF4();
 800a29c:	f005 f87a 	bl	800f394 <searchF4>
					HAL_Delay(2000);
 800a2a0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800a2a4:	f7f6 feba 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800a2a8:	4b55      	ldr	r3, [pc, #340]	; (800a400 <pass_test+0x520>)
 800a2aa:	2200      	movs	r2, #0
 800a2ac:	701a      	strb	r2, [r3, #0]
 800a2ae:	4b54      	ldr	r3, [pc, #336]	; (800a400 <pass_test+0x520>)
 800a2b0:	781a      	ldrb	r2, [r3, #0]
 800a2b2:	4b52      	ldr	r3, [pc, #328]	; (800a3fc <pass_test+0x51c>)
 800a2b4:	701a      	strb	r2, [r3, #0]
					searchF4();
 800a2b6:	f005 f86d 	bl	800f394 <searchF4>

					goal_x = GOAL_X;
 800a2ba:	4b50      	ldr	r3, [pc, #320]	; (800a3fc <pass_test+0x51c>)
 800a2bc:	2207      	movs	r2, #7
 800a2be:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800a2c0:	4b4f      	ldr	r3, [pc, #316]	; (800a400 <pass_test+0x520>)
 800a2c2:	2206      	movs	r2, #6
 800a2c4:	701a      	strb	r2, [r3, #0]
					break;
 800a2c6:	e087      	b.n	800a3d8 <pass_test+0x4f8>
				case 5:
					//----a直線と大回り圧縮と斜め High Speedｰｰｰｰ
					printf("pass press 4.\n");
 800a2c8:	484e      	ldr	r0, [pc, #312]	; (800a404 <pass_test+0x524>)
 800a2ca:	f008 f97d 	bl	80125c8 <puts>
					MF.FLAG.SCND = 1;
 800a2ce:	4a44      	ldr	r2, [pc, #272]	; (800a3e0 <pass_test+0x500>)
 800a2d0:	8813      	ldrh	r3, [r2, #0]
 800a2d2:	f043 0320 	orr.w	r3, r3, #32
 800a2d6:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800a2d8:	4a41      	ldr	r2, [pc, #260]	; (800a3e0 <pass_test+0x500>)
 800a2da:	8813      	ldrh	r3, [r2, #0]
 800a2dc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a2e0:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800a2e2:	4a3f      	ldr	r2, [pc, #252]	; (800a3e0 <pass_test+0x500>)
 800a2e4:	8813      	ldrh	r3, [r2, #0]
 800a2e6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800a2ea:	8013      	strh	r3, [r2, #0]
					run_mode = HIGH;
 800a2ec:	4b3d      	ldr	r3, [pc, #244]	; (800a3e4 <pass_test+0x504>)
 800a2ee:	2203      	movs	r2, #3
 800a2f0:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800a2f2:	4b3d      	ldr	r3, [pc, #244]	; (800a3e8 <pass_test+0x508>)
 800a2f4:	2200      	movs	r2, #0
 800a2f6:	701a      	strb	r2, [r3, #0]
					goal_mode = 2;
 800a2f8:	4b3c      	ldr	r3, [pc, #240]	; (800a3ec <pass_test+0x50c>)
 800a2fa:	2202      	movs	r2, #2
 800a2fc:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 800a2fe:	4b3c      	ldr	r3, [pc, #240]	; (800a3f0 <pass_test+0x510>)
 800a300:	f241 3288 	movw	r2, #5000	; 0x1388
 800a304:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1600;
 800a306:	4b3b      	ldr	r3, [pc, #236]	; (800a3f4 <pass_test+0x514>)
 800a308:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800a30c:	801a      	strh	r2, [r3, #0]

					pass_mode = 4;
 800a30e:	4b3a      	ldr	r3, [pc, #232]	; (800a3f8 <pass_test+0x518>)
 800a310:	2204      	movs	r2, #4
 800a312:	701a      	strb	r2, [r3, #0]

					goal_x = GOAL_X;
 800a314:	4b39      	ldr	r3, [pc, #228]	; (800a3fc <pass_test+0x51c>)
 800a316:	2207      	movs	r2, #7
 800a318:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800a31a:	4b39      	ldr	r3, [pc, #228]	; (800a400 <pass_test+0x520>)
 800a31c:	2206      	movs	r2, #6
 800a31e:	701a      	strb	r2, [r3, #0]

					get_base();
 800a320:	f007 fab8 	bl	8011894 <get_base>

					searchF4();
 800a324:	f005 f836 	bl	800f394 <searchF4>
					HAL_Delay(2000);
 800a328:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800a32c:	f7f6 fe76 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800a330:	4b33      	ldr	r3, [pc, #204]	; (800a400 <pass_test+0x520>)
 800a332:	2200      	movs	r2, #0
 800a334:	701a      	strb	r2, [r3, #0]
 800a336:	4b32      	ldr	r3, [pc, #200]	; (800a400 <pass_test+0x520>)
 800a338:	781a      	ldrb	r2, [r3, #0]
 800a33a:	4b30      	ldr	r3, [pc, #192]	; (800a3fc <pass_test+0x51c>)
 800a33c:	701a      	strb	r2, [r3, #0]
					searchF4();
 800a33e:	f005 f829 	bl	800f394 <searchF4>

					goal_x = GOAL_X;
 800a342:	4b2e      	ldr	r3, [pc, #184]	; (800a3fc <pass_test+0x51c>)
 800a344:	2207      	movs	r2, #7
 800a346:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800a348:	4b2d      	ldr	r3, [pc, #180]	; (800a400 <pass_test+0x520>)
 800a34a:	2206      	movs	r2, #6
 800a34c:	701a      	strb	r2, [r3, #0]
					break;
 800a34e:	e043      	b.n	800a3d8 <pass_test+0x4f8>
				case 7:
					//----a直線と大回り圧縮(adv_posを停止)+半区画ベース High Speed----
					printf("pass press 3-4.\n");
 800a350:	482d      	ldr	r0, [pc, #180]	; (800a408 <pass_test+0x528>)
 800a352:	f008 f939 	bl	80125c8 <puts>
					MF.FLAG.SCND = 1;
 800a356:	4a22      	ldr	r2, [pc, #136]	; (800a3e0 <pass_test+0x500>)
 800a358:	8813      	ldrh	r3, [r2, #0]
 800a35a:	f043 0320 	orr.w	r3, r3, #32
 800a35e:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800a360:	4a1f      	ldr	r2, [pc, #124]	; (800a3e0 <pass_test+0x500>)
 800a362:	8813      	ldrh	r3, [r2, #0]
 800a364:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a368:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800a36a:	4a1d      	ldr	r2, [pc, #116]	; (800a3e0 <pass_test+0x500>)
 800a36c:	8813      	ldrh	r3, [r2, #0]
 800a36e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800a372:	8013      	strh	r3, [r2, #0]
					run_mode = 5;
 800a374:	4b1b      	ldr	r3, [pc, #108]	; (800a3e4 <pass_test+0x504>)
 800a376:	2205      	movs	r2, #5
 800a378:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800a37a:	4b1b      	ldr	r3, [pc, #108]	; (800a3e8 <pass_test+0x508>)
 800a37c:	2200      	movs	r2, #0
 800a37e:	701a      	strb	r2, [r3, #0]
					goal_mode = 2;
 800a380:	4b1a      	ldr	r3, [pc, #104]	; (800a3ec <pass_test+0x50c>)
 800a382:	2202      	movs	r2, #2
 800a384:	701a      	strb	r2, [r3, #0]
					accel_hs = 10000;
 800a386:	4b1a      	ldr	r3, [pc, #104]	; (800a3f0 <pass_test+0x510>)
 800a388:	f242 7210 	movw	r2, #10000	; 0x2710
 800a38c:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 2000;
 800a38e:	4b19      	ldr	r3, [pc, #100]	; (800a3f4 <pass_test+0x514>)
 800a390:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800a394:	801a      	strh	r2, [r3, #0]

					pass_mode = 3;						//a半区画ベースでroute配列生成
 800a396:	4b18      	ldr	r3, [pc, #96]	; (800a3f8 <pass_test+0x518>)
 800a398:	2203      	movs	r2, #3
 800a39a:	701a      	strb	r2, [r3, #0]

					goal_x = GOAL_X;
 800a39c:	4b17      	ldr	r3, [pc, #92]	; (800a3fc <pass_test+0x51c>)
 800a39e:	2207      	movs	r2, #7
 800a3a0:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800a3a2:	4b17      	ldr	r3, [pc, #92]	; (800a400 <pass_test+0x520>)
 800a3a4:	2206      	movs	r2, #6
 800a3a6:	701a      	strb	r2, [r3, #0]

					get_base();
 800a3a8:	f007 fa74 	bl	8011894 <get_base>

					searchF3();
 800a3ac:	f004 ff16 	bl	800f1dc <searchF3>
					HAL_Delay(2000);
 800a3b0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800a3b4:	f7f6 fe32 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800a3b8:	4b11      	ldr	r3, [pc, #68]	; (800a400 <pass_test+0x520>)
 800a3ba:	2200      	movs	r2, #0
 800a3bc:	701a      	strb	r2, [r3, #0]
 800a3be:	4b10      	ldr	r3, [pc, #64]	; (800a400 <pass_test+0x520>)
 800a3c0:	781a      	ldrb	r2, [r3, #0]
 800a3c2:	4b0e      	ldr	r3, [pc, #56]	; (800a3fc <pass_test+0x51c>)
 800a3c4:	701a      	strb	r2, [r3, #0]
					searchF3();
 800a3c6:	f004 ff09 	bl	800f1dc <searchF3>

					goal_x = GOAL_X;
 800a3ca:	4b0c      	ldr	r3, [pc, #48]	; (800a3fc <pass_test+0x51c>)
 800a3cc:	2207      	movs	r2, #7
 800a3ce:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800a3d0:	4b0b      	ldr	r3, [pc, #44]	; (800a400 <pass_test+0x520>)
 800a3d2:	2206      	movs	r2, #6
 800a3d4:	701a      	strb	r2, [r3, #0]
					break;
 800a3d6:	bf00      	nop
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 800a3d8:	e58b      	b.n	8009ef2 <pass_test+0x12>
 800a3da:	bf00      	nop
 800a3dc:	08013910 	.word	0x08013910
 800a3e0:	20000f68 	.word	0x20000f68
 800a3e4:	20000456 	.word	0x20000456
 800a3e8:	200015c8 	.word	0x200015c8
 800a3ec:	20000bb1 	.word	0x20000bb1
 800a3f0:	20000454 	.word	0x20000454
 800a3f4:	20000f7c 	.word	0x20000f7c
 800a3f8:	20000457 	.word	0x20000457
 800a3fc:	20000bb0 	.word	0x20000bb0
 800a400:	20000b4c 	.word	0x20000b4c
 800a404:	08013920 	.word	0x08013920
 800a408:	08013930 	.word	0x08013930

0800a40c <goal_test>:
//goal_test
// a複数マスgoal走行テスト
// a引数：なし
// a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void goal_test(void){
 800a40c:	b580      	push	{r7, lr}
 800a40e:	b082      	sub	sp, #8
 800a410:	af00      	add	r7, sp, #0

	int mode = 0;
 800a412:	2300      	movs	r3, #0
 800a414:	607b      	str	r3, [r7, #4]
	printf("Test goal Run, Mode : %d\n", mode);
 800a416:	6879      	ldr	r1, [r7, #4]
 800a418:	48aa      	ldr	r0, [pc, #680]	; (800a6c4 <goal_test+0x2b8>)
 800a41a:	f008 f861 	bl	80124e0 <iprintf>

	while(1){
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	b2db      	uxtb	r3, r3
 800a422:	f003 0301 	and.w	r3, r3, #1
 800a426:	b2d8      	uxtb	r0, r3
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	b2db      	uxtb	r3, r3
 800a42c:	f003 0302 	and.w	r3, r3, #2
 800a430:	b2d9      	uxtb	r1, r3
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	b2db      	uxtb	r3, r3
 800a436:	f003 0304 	and.w	r3, r3, #4
 800a43a:	b2db      	uxtb	r3, r3
 800a43c:	461a      	mov	r2, r3
 800a43e:	f007 fa81 	bl	8011944 <led_write>
		  if(dist_r >= 20){
 800a442:	4ba1      	ldr	r3, [pc, #644]	; (800a6c8 <goal_test+0x2bc>)
 800a444:	edd3 7a00 	vldr	s15, [r3]
 800a448:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 800a44c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a450:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a454:	db0f      	blt.n	800a476 <goal_test+0x6a>
			  mode++;
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	3301      	adds	r3, #1
 800a45a:	607b      	str	r3, [r7, #4]
			  dist_r = 0;
 800a45c:	4b9a      	ldr	r3, [pc, #616]	; (800a6c8 <goal_test+0x2bc>)
 800a45e:	f04f 0200 	mov.w	r2, #0
 800a462:	601a      	str	r2, [r3, #0]
			  if(mode > 7){
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	2b07      	cmp	r3, #7
 800a468:	dd01      	ble.n	800a46e <goal_test+0x62>
				  mode = 0;
 800a46a:	2300      	movs	r3, #0
 800a46c:	607b      	str	r3, [r7, #4]
			  }
			  printf("Mode : %d\n", mode);
 800a46e:	6879      	ldr	r1, [r7, #4]
 800a470:	4896      	ldr	r0, [pc, #600]	; (800a6cc <goal_test+0x2c0>)
 800a472:	f008 f835 	bl	80124e0 <iprintf>
		  }
		  if(dist_r <= -20){
 800a476:	4b94      	ldr	r3, [pc, #592]	; (800a6c8 <goal_test+0x2bc>)
 800a478:	edd3 7a00 	vldr	s15, [r3]
 800a47c:	eebb 7a04 	vmov.f32	s14, #180	; 0xc1a00000 -20.0
 800a480:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a484:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a488:	d80f      	bhi.n	800a4aa <goal_test+0x9e>
			  mode--;
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	3b01      	subs	r3, #1
 800a48e:	607b      	str	r3, [r7, #4]
			  dist_r = 0;
 800a490:	4b8d      	ldr	r3, [pc, #564]	; (800a6c8 <goal_test+0x2bc>)
 800a492:	f04f 0200 	mov.w	r2, #0
 800a496:	601a      	str	r2, [r3, #0]
			  if(mode < 0){
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	da01      	bge.n	800a4a2 <goal_test+0x96>
				  mode = 7;
 800a49e:	2307      	movs	r3, #7
 800a4a0:	607b      	str	r3, [r7, #4]
			  }
			  printf("Mode : %d\n", mode);
 800a4a2:	6879      	ldr	r1, [r7, #4]
 800a4a4:	4889      	ldr	r0, [pc, #548]	; (800a6cc <goal_test+0x2c0>)
 800a4a6:	f008 f81b 	bl	80124e0 <iprintf>
		  }
		  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET){
 800a4aa:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800a4ae:	4888      	ldr	r0, [pc, #544]	; (800a6d0 <goal_test+0x2c4>)
 800a4b0:	f7f7 ff10 	bl	80022d4 <HAL_GPIO_ReadPin>
 800a4b4:	4603      	mov	r3, r0
 800a4b6:	2b00      	cmp	r3, #0
 800a4b8:	d1b1      	bne.n	800a41e <goal_test+0x12>
			  HAL_Delay(50);
 800a4ba:	2032      	movs	r0, #50	; 0x32
 800a4bc:	f7f6 fdae 	bl	800101c <HAL_Delay>
			  while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET);
 800a4c0:	bf00      	nop
 800a4c2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800a4c6:	4882      	ldr	r0, [pc, #520]	; (800a6d0 <goal_test+0x2c4>)
 800a4c8:	f7f7 ff04 	bl	80022d4 <HAL_GPIO_ReadPin>
 800a4cc:	4603      	mov	r3, r0
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	d0f7      	beq.n	800a4c2 <goal_test+0xb6>
			  drive_ready();
 800a4d2:	f7fa fbd5 	bl	8004c80 <drive_ready>
			  MF2.FLAG.V = 0;
 800a4d6:	4a7f      	ldr	r2, [pc, #508]	; (800a6d4 <goal_test+0x2c8>)
 800a4d8:	8813      	ldrh	r3, [r2, #0]
 800a4da:	f36f 03c3 	bfc	r3, #3, #1
 800a4de:	8013      	strh	r3, [r2, #0]

			  switch(mode){
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	2b07      	cmp	r3, #7
 800a4e4:	d89b      	bhi.n	800a41e <goal_test+0x12>
 800a4e6:	a201      	add	r2, pc, #4	; (adr r2, 800a4ec <goal_test+0xe0>)
 800a4e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4ec:	0800a50d 	.word	0x0800a50d
 800a4f0:	0800a595 	.word	0x0800a595
 800a4f4:	0800a643 	.word	0x0800a643
 800a4f8:	0800a711 	.word	0x0800a711
 800a4fc:	0800a793 	.word	0x0800a793
 800a500:	0800a809 	.word	0x0800a809
 800a504:	0800a88b 	.word	0x0800a88b
 800a508:	0800a917 	.word	0x0800a917
				case 0:
					//----a一次探索スラローム走行----
					printf("First Run. (Slalom)\n");
 800a50c:	4872      	ldr	r0, [pc, #456]	; (800a6d8 <goal_test+0x2cc>)
 800a50e:	f008 f85b 	bl	80125c8 <puts>

					MF.FLAG.SCND = 0;
 800a512:	4a72      	ldr	r2, [pc, #456]	; (800a6dc <goal_test+0x2d0>)
 800a514:	8813      	ldrh	r3, [r2, #0]
 800a516:	f36f 1345 	bfc	r3, #5, #1
 800a51a:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800a51c:	4a6f      	ldr	r2, [pc, #444]	; (800a6dc <goal_test+0x2d0>)
 800a51e:	8813      	ldrh	r3, [r2, #0]
 800a520:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a524:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 0;
 800a526:	4a6d      	ldr	r2, [pc, #436]	; (800a6dc <goal_test+0x2d0>)
 800a528:	8813      	ldrh	r3, [r2, #0]
 800a52a:	f36f 238a 	bfc	r3, #10, #1
 800a52e:	8013      	strh	r3, [r2, #0]
					run_mode = MIDDLE;
 800a530:	4b6b      	ldr	r3, [pc, #428]	; (800a6e0 <goal_test+0x2d4>)
 800a532:	2202      	movs	r2, #2
 800a534:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800a536:	4b6b      	ldr	r3, [pc, #428]	; (800a6e4 <goal_test+0x2d8>)
 800a538:	2200      	movs	r2, #0
 800a53a:	701a      	strb	r2, [r3, #0]
					goal_mode = 1;
 800a53c:	4b6a      	ldr	r3, [pc, #424]	; (800a6e8 <goal_test+0x2dc>)
 800a53e:	2201      	movs	r2, #1
 800a540:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 800a542:	4b6a      	ldr	r3, [pc, #424]	; (800a6ec <goal_test+0x2e0>)
 800a544:	f241 3288 	movw	r2, #5000	; 0x1388
 800a548:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 800;
 800a54a:	4b69      	ldr	r3, [pc, #420]	; (800a6f0 <goal_test+0x2e4>)
 800a54c:	f44f 7248 	mov.w	r2, #800	; 0x320
 800a550:	801a      	strh	r2, [r3, #0]
					start_mode = 0;
 800a552:	4b64      	ldr	r3, [pc, #400]	; (800a6e4 <goal_test+0x2d8>)
 800a554:	2200      	movs	r2, #0
 800a556:	701a      	strb	r2, [r3, #0]
					goal_x = GOAL_X;
 800a558:	4b66      	ldr	r3, [pc, #408]	; (800a6f4 <goal_test+0x2e8>)
 800a55a:	2207      	movs	r2, #7
 800a55c:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800a55e:	4b66      	ldr	r3, [pc, #408]	; (800a6f8 <goal_test+0x2ec>)
 800a560:	2206      	movs	r2, #6
 800a562:	701a      	strb	r2, [r3, #0]

					get_base();
 800a564:	f007 f996 	bl	8011894 <get_base>

					searchC();
 800a568:	f004 f9be 	bl	800e8e8 <searchC>
					HAL_Delay(2000);
 800a56c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800a570:	f7f6 fd54 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800a574:	4b60      	ldr	r3, [pc, #384]	; (800a6f8 <goal_test+0x2ec>)
 800a576:	2200      	movs	r2, #0
 800a578:	701a      	strb	r2, [r3, #0]
 800a57a:	4b5f      	ldr	r3, [pc, #380]	; (800a6f8 <goal_test+0x2ec>)
 800a57c:	781a      	ldrb	r2, [r3, #0]
 800a57e:	4b5d      	ldr	r3, [pc, #372]	; (800a6f4 <goal_test+0x2e8>)
 800a580:	701a      	strb	r2, [r3, #0]
					searchC();
 800a582:	f004 f9b1 	bl	800e8e8 <searchC>

					goal_x = GOAL_X;
 800a586:	4b5b      	ldr	r3, [pc, #364]	; (800a6f4 <goal_test+0x2e8>)
 800a588:	2207      	movs	r2, #7
 800a58a:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800a58c:	4b5a      	ldr	r3, [pc, #360]	; (800a6f8 <goal_test+0x2ec>)
 800a58e:	2206      	movs	r2, #6
 800a590:	701a      	strb	r2, [r3, #0]
					break;
 800a592:	e206      	b.n	800a9a2 <goal_test+0x596>
				case 1:
					//----a一次探索スラローム走行 4マスgoal----
					printf("First Run. (4 goal)\n");
 800a594:	4859      	ldr	r0, [pc, #356]	; (800a6fc <goal_test+0x2f0>)
 800a596:	f008 f817 	bl	80125c8 <puts>

					MF.FLAG.SCND = 0;
 800a59a:	4a50      	ldr	r2, [pc, #320]	; (800a6dc <goal_test+0x2d0>)
 800a59c:	8813      	ldrh	r3, [r2, #0]
 800a59e:	f36f 1345 	bfc	r3, #5, #1
 800a5a2:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800a5a4:	4a4d      	ldr	r2, [pc, #308]	; (800a6dc <goal_test+0x2d0>)
 800a5a6:	8813      	ldrh	r3, [r2, #0]
 800a5a8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a5ac:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 0;
 800a5ae:	4a4b      	ldr	r2, [pc, #300]	; (800a6dc <goal_test+0x2d0>)
 800a5b0:	8813      	ldrh	r3, [r2, #0]
 800a5b2:	f36f 238a 	bfc	r3, #10, #1
 800a5b6:	8013      	strh	r3, [r2, #0]
					run_mode = MIDDLE;
 800a5b8:	4b49      	ldr	r3, [pc, #292]	; (800a6e0 <goal_test+0x2d4>)
 800a5ba:	2202      	movs	r2, #2
 800a5bc:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800a5be:	4b49      	ldr	r3, [pc, #292]	; (800a6e4 <goal_test+0x2d8>)
 800a5c0:	2200      	movs	r2, #0
 800a5c2:	701a      	strb	r2, [r3, #0]
					goal_mode = 2;
 800a5c4:	4b48      	ldr	r3, [pc, #288]	; (800a6e8 <goal_test+0x2dc>)
 800a5c6:	2202      	movs	r2, #2
 800a5c8:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 800a5ca:	4b48      	ldr	r3, [pc, #288]	; (800a6ec <goal_test+0x2e0>)
 800a5cc:	f241 3288 	movw	r2, #5000	; 0x1388
 800a5d0:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 800;
 800a5d2:	4b47      	ldr	r3, [pc, #284]	; (800a6f0 <goal_test+0x2e4>)
 800a5d4:	f44f 7248 	mov.w	r2, #800	; 0x320
 800a5d8:	801a      	strh	r2, [r3, #0]
					start_mode = 0;
 800a5da:	4b42      	ldr	r3, [pc, #264]	; (800a6e4 <goal_test+0x2d8>)
 800a5dc:	2200      	movs	r2, #0
 800a5de:	701a      	strb	r2, [r3, #0]
					goal_x = GOAL_X;
 800a5e0:	4b44      	ldr	r3, [pc, #272]	; (800a6f4 <goal_test+0x2e8>)
 800a5e2:	2207      	movs	r2, #7
 800a5e4:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800a5e6:	4b44      	ldr	r3, [pc, #272]	; (800a6f8 <goal_test+0x2ec>)
 800a5e8:	2206      	movs	r2, #6
 800a5ea:	701a      	strb	r2, [r3, #0]

					get_base();
 800a5ec:	f007 f952 	bl	8011894 <get_base>

					searchC();
 800a5f0:	f004 f97a 	bl	800e8e8 <searchC>
					HAL_Delay(2000);
 800a5f4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800a5f8:	f7f6 fd10 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800a5fc:	4b3e      	ldr	r3, [pc, #248]	; (800a6f8 <goal_test+0x2ec>)
 800a5fe:	2200      	movs	r2, #0
 800a600:	701a      	strb	r2, [r3, #0]
 800a602:	4b3d      	ldr	r3, [pc, #244]	; (800a6f8 <goal_test+0x2ec>)
 800a604:	781a      	ldrb	r2, [r3, #0]
 800a606:	4b3b      	ldr	r3, [pc, #236]	; (800a6f4 <goal_test+0x2e8>)
 800a608:	701a      	strb	r2, [r3, #0]
					searchC();
 800a60a:	f004 f96d 	bl	800e8e8 <searchC>
					while(dist_l < 30);
 800a60e:	bf00      	nop
 800a610:	4b3b      	ldr	r3, [pc, #236]	; (800a700 <goal_test+0x2f4>)
 800a612:	edd3 7a00 	vldr	s15, [r3]
 800a616:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 800a61a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a61e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a622:	d4f5      	bmi.n	800a610 <goal_test+0x204>
					printf("x: %d, y:%d, dir:%d\n", mouse.x, mouse.y, mouse.dir);
 800a624:	4b37      	ldr	r3, [pc, #220]	; (800a704 <goal_test+0x2f8>)
 800a626:	781b      	ldrb	r3, [r3, #0]
 800a628:	b2db      	uxtb	r3, r3
 800a62a:	4619      	mov	r1, r3
 800a62c:	4b35      	ldr	r3, [pc, #212]	; (800a704 <goal_test+0x2f8>)
 800a62e:	785b      	ldrb	r3, [r3, #1]
 800a630:	b2db      	uxtb	r3, r3
 800a632:	461a      	mov	r2, r3
 800a634:	4b33      	ldr	r3, [pc, #204]	; (800a704 <goal_test+0x2f8>)
 800a636:	789b      	ldrb	r3, [r3, #2]
 800a638:	b2db      	uxtb	r3, r3
 800a63a:	4833      	ldr	r0, [pc, #204]	; (800a708 <goal_test+0x2fc>)
 800a63c:	f007 ff50 	bl	80124e0 <iprintf>

					break;
 800a640:	e1af      	b.n	800a9a2 <goal_test+0x596>
				case 2:
					//----a直線と大回り圧縮(adv_posを停止)+半区画ベース Middle Speed----
					printf("pass press 3-2.\n");
 800a642:	4832      	ldr	r0, [pc, #200]	; (800a70c <goal_test+0x300>)
 800a644:	f007 ffc0 	bl	80125c8 <puts>
					MF.FLAG.SCND = 1;
 800a648:	4a24      	ldr	r2, [pc, #144]	; (800a6dc <goal_test+0x2d0>)
 800a64a:	8813      	ldrh	r3, [r2, #0]
 800a64c:	f043 0320 	orr.w	r3, r3, #32
 800a650:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800a652:	4a22      	ldr	r2, [pc, #136]	; (800a6dc <goal_test+0x2d0>)
 800a654:	8813      	ldrh	r3, [r2, #0]
 800a656:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a65a:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800a65c:	4a1f      	ldr	r2, [pc, #124]	; (800a6dc <goal_test+0x2d0>)
 800a65e:	8813      	ldrh	r3, [r2, #0]
 800a660:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800a664:	8013      	strh	r3, [r2, #0]
					run_mode = MIDDLE;
 800a666:	4b1e      	ldr	r3, [pc, #120]	; (800a6e0 <goal_test+0x2d4>)
 800a668:	2202      	movs	r2, #2
 800a66a:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800a66c:	4b1d      	ldr	r3, [pc, #116]	; (800a6e4 <goal_test+0x2d8>)
 800a66e:	2200      	movs	r2, #0
 800a670:	701a      	strb	r2, [r3, #0]
					goal_mode = 1;
 800a672:	4b1d      	ldr	r3, [pc, #116]	; (800a6e8 <goal_test+0x2dc>)
 800a674:	2201      	movs	r2, #1
 800a676:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 800a678:	4b1c      	ldr	r3, [pc, #112]	; (800a6ec <goal_test+0x2e0>)
 800a67a:	f241 3288 	movw	r2, #5000	; 0x1388
 800a67e:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1200;
 800a680:	4b1b      	ldr	r3, [pc, #108]	; (800a6f0 <goal_test+0x2e4>)
 800a682:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 800a686:	801a      	strh	r2, [r3, #0]

//					pass_mode = 3;						//a半区画ベースでroute配列生成

					goal_x = GOAL_X;
 800a688:	4b1a      	ldr	r3, [pc, #104]	; (800a6f4 <goal_test+0x2e8>)
 800a68a:	2207      	movs	r2, #7
 800a68c:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800a68e:	4b1a      	ldr	r3, [pc, #104]	; (800a6f8 <goal_test+0x2ec>)
 800a690:	2206      	movs	r2, #6
 800a692:	701a      	strb	r2, [r3, #0]

					get_base();
 800a694:	f007 f8fe 	bl	8011894 <get_base>

					searchF3();
 800a698:	f004 fda0 	bl	800f1dc <searchF3>
					HAL_Delay(2000);
 800a69c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800a6a0:	f7f6 fcbc 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800a6a4:	4b14      	ldr	r3, [pc, #80]	; (800a6f8 <goal_test+0x2ec>)
 800a6a6:	2200      	movs	r2, #0
 800a6a8:	701a      	strb	r2, [r3, #0]
 800a6aa:	4b13      	ldr	r3, [pc, #76]	; (800a6f8 <goal_test+0x2ec>)
 800a6ac:	781a      	ldrb	r2, [r3, #0]
 800a6ae:	4b11      	ldr	r3, [pc, #68]	; (800a6f4 <goal_test+0x2e8>)
 800a6b0:	701a      	strb	r2, [r3, #0]
					searchF3();
 800a6b2:	f004 fd93 	bl	800f1dc <searchF3>

					goal_x = GOAL_X;
 800a6b6:	4b0f      	ldr	r3, [pc, #60]	; (800a6f4 <goal_test+0x2e8>)
 800a6b8:	2207      	movs	r2, #7
 800a6ba:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800a6bc:	4b0e      	ldr	r3, [pc, #56]	; (800a6f8 <goal_test+0x2ec>)
 800a6be:	2206      	movs	r2, #6
 800a6c0:	701a      	strb	r2, [r3, #0]
					break;
 800a6c2:	e16e      	b.n	800a9a2 <goal_test+0x596>
 800a6c4:	08013940 	.word	0x08013940
 800a6c8:	20000aec 	.word	0x20000aec
 800a6cc:	0801371c 	.word	0x0801371c
 800a6d0:	40020000 	.word	0x40020000
 800a6d4:	20000f64 	.word	0x20000f64
 800a6d8:	080138fc 	.word	0x080138fc
 800a6dc:	20000f68 	.word	0x20000f68
 800a6e0:	20000456 	.word	0x20000456
 800a6e4:	200015c8 	.word	0x200015c8
 800a6e8:	20000bb1 	.word	0x20000bb1
 800a6ec:	20000454 	.word	0x20000454
 800a6f0:	20000f7c 	.word	0x20000f7c
 800a6f4:	20000bb0 	.word	0x20000bb0
 800a6f8:	20000b4c 	.word	0x20000b4c
 800a6fc:	0801395c 	.word	0x0801395c
 800a700:	200015c4 	.word	0x200015c4
 800a704:	20000c0c 	.word	0x20000c0c
 800a708:	08013970 	.word	0x08013970
 800a70c:	08013910 	.word	0x08013910
				case 3:
					//----a直線と大回り圧縮(adv_posを停止)+半区画ベース Middle Speed 4マスgoal----
					printf("pass press 3-2.\n");
 800a710:	48a4      	ldr	r0, [pc, #656]	; (800a9a4 <goal_test+0x598>)
 800a712:	f007 ff59 	bl	80125c8 <puts>
					MF.FLAG.SCND = 1;
 800a716:	4aa4      	ldr	r2, [pc, #656]	; (800a9a8 <goal_test+0x59c>)
 800a718:	8813      	ldrh	r3, [r2, #0]
 800a71a:	f043 0320 	orr.w	r3, r3, #32
 800a71e:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800a720:	4aa1      	ldr	r2, [pc, #644]	; (800a9a8 <goal_test+0x59c>)
 800a722:	8813      	ldrh	r3, [r2, #0]
 800a724:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a728:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800a72a:	4a9f      	ldr	r2, [pc, #636]	; (800a9a8 <goal_test+0x59c>)
 800a72c:	8813      	ldrh	r3, [r2, #0]
 800a72e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800a732:	8013      	strh	r3, [r2, #0]
					run_mode = MIDDLE;
 800a734:	4b9d      	ldr	r3, [pc, #628]	; (800a9ac <goal_test+0x5a0>)
 800a736:	2202      	movs	r2, #2
 800a738:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800a73a:	4b9d      	ldr	r3, [pc, #628]	; (800a9b0 <goal_test+0x5a4>)
 800a73c:	2200      	movs	r2, #0
 800a73e:	701a      	strb	r2, [r3, #0]
					goal_mode = 2;
 800a740:	4b9c      	ldr	r3, [pc, #624]	; (800a9b4 <goal_test+0x5a8>)
 800a742:	2202      	movs	r2, #2
 800a744:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 800a746:	4b9c      	ldr	r3, [pc, #624]	; (800a9b8 <goal_test+0x5ac>)
 800a748:	f241 3288 	movw	r2, #5000	; 0x1388
 800a74c:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1200;
 800a74e:	4b9b      	ldr	r3, [pc, #620]	; (800a9bc <goal_test+0x5b0>)
 800a750:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 800a754:	801a      	strh	r2, [r3, #0]

//					pass_mode = 3;						//a半区画ベースでroute配列生成

					goal_x = GOAL_X;
 800a756:	4b9a      	ldr	r3, [pc, #616]	; (800a9c0 <goal_test+0x5b4>)
 800a758:	2207      	movs	r2, #7
 800a75a:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800a75c:	4b99      	ldr	r3, [pc, #612]	; (800a9c4 <goal_test+0x5b8>)
 800a75e:	2206      	movs	r2, #6
 800a760:	701a      	strb	r2, [r3, #0]

					get_base();
 800a762:	f007 f897 	bl	8011894 <get_base>

					searchF3();
 800a766:	f004 fd39 	bl	800f1dc <searchF3>
					HAL_Delay(2000);
 800a76a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800a76e:	f7f6 fc55 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800a772:	4b94      	ldr	r3, [pc, #592]	; (800a9c4 <goal_test+0x5b8>)
 800a774:	2200      	movs	r2, #0
 800a776:	701a      	strb	r2, [r3, #0]
 800a778:	4b92      	ldr	r3, [pc, #584]	; (800a9c4 <goal_test+0x5b8>)
 800a77a:	781a      	ldrb	r2, [r3, #0]
 800a77c:	4b90      	ldr	r3, [pc, #576]	; (800a9c0 <goal_test+0x5b4>)
 800a77e:	701a      	strb	r2, [r3, #0]
					searchF3();
 800a780:	f004 fd2c 	bl	800f1dc <searchF3>

					goal_x = GOAL_X;
 800a784:	4b8e      	ldr	r3, [pc, #568]	; (800a9c0 <goal_test+0x5b4>)
 800a786:	2207      	movs	r2, #7
 800a788:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800a78a:	4b8e      	ldr	r3, [pc, #568]	; (800a9c4 <goal_test+0x5b8>)
 800a78c:	2206      	movs	r2, #6
 800a78e:	701a      	strb	r2, [r3, #0]
					break;
 800a790:	e107      	b.n	800a9a2 <goal_test+0x596>
				case 4:
					//----a直線と大回り圧縮と斜め Middle Speedｰｰｰｰ
					printf("pass press 4.\n");
 800a792:	488d      	ldr	r0, [pc, #564]	; (800a9c8 <goal_test+0x5bc>)
 800a794:	f007 ff18 	bl	80125c8 <puts>
					MF.FLAG.SCND = 1;
 800a798:	4a83      	ldr	r2, [pc, #524]	; (800a9a8 <goal_test+0x59c>)
 800a79a:	8813      	ldrh	r3, [r2, #0]
 800a79c:	f043 0320 	orr.w	r3, r3, #32
 800a7a0:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800a7a2:	4a81      	ldr	r2, [pc, #516]	; (800a9a8 <goal_test+0x59c>)
 800a7a4:	8813      	ldrh	r3, [r2, #0]
 800a7a6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a7aa:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800a7ac:	4a7e      	ldr	r2, [pc, #504]	; (800a9a8 <goal_test+0x59c>)
 800a7ae:	8813      	ldrh	r3, [r2, #0]
 800a7b0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800a7b4:	8013      	strh	r3, [r2, #0]
					run_mode = MIDDLE;
 800a7b6:	4b7d      	ldr	r3, [pc, #500]	; (800a9ac <goal_test+0x5a0>)
 800a7b8:	2202      	movs	r2, #2
 800a7ba:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800a7bc:	4b7c      	ldr	r3, [pc, #496]	; (800a9b0 <goal_test+0x5a4>)
 800a7be:	2200      	movs	r2, #0
 800a7c0:	701a      	strb	r2, [r3, #0]
					goal_mode = 1;
 800a7c2:	4b7c      	ldr	r3, [pc, #496]	; (800a9b4 <goal_test+0x5a8>)
 800a7c4:	2201      	movs	r2, #1
 800a7c6:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 800a7c8:	4b7b      	ldr	r3, [pc, #492]	; (800a9b8 <goal_test+0x5ac>)
 800a7ca:	f241 3288 	movw	r2, #5000	; 0x1388
 800a7ce:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1200;
 800a7d0:	4b7a      	ldr	r3, [pc, #488]	; (800a9bc <goal_test+0x5b0>)
 800a7d2:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 800a7d6:	801a      	strh	r2, [r3, #0]

//					pass_mode = 4;

					goal_x = GOAL_X;
 800a7d8:	4b79      	ldr	r3, [pc, #484]	; (800a9c0 <goal_test+0x5b4>)
 800a7da:	2207      	movs	r2, #7
 800a7dc:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800a7de:	4b79      	ldr	r3, [pc, #484]	; (800a9c4 <goal_test+0x5b8>)
 800a7e0:	2206      	movs	r2, #6
 800a7e2:	701a      	strb	r2, [r3, #0]

					get_base();
 800a7e4:	f007 f856 	bl	8011894 <get_base>

					searchF4();
 800a7e8:	f004 fdd4 	bl	800f394 <searchF4>
					HAL_Delay(2000);
 800a7ec:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800a7f0:	f7f6 fc14 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800a7f4:	4b73      	ldr	r3, [pc, #460]	; (800a9c4 <goal_test+0x5b8>)
 800a7f6:	2200      	movs	r2, #0
 800a7f8:	701a      	strb	r2, [r3, #0]
 800a7fa:	4b72      	ldr	r3, [pc, #456]	; (800a9c4 <goal_test+0x5b8>)
 800a7fc:	781a      	ldrb	r2, [r3, #0]
 800a7fe:	4b70      	ldr	r3, [pc, #448]	; (800a9c0 <goal_test+0x5b4>)
 800a800:	701a      	strb	r2, [r3, #0]
					searchF4();
 800a802:	f004 fdc7 	bl	800f394 <searchF4>
					break;
 800a806:	e0cc      	b.n	800a9a2 <goal_test+0x596>
				case 5:
					//----a直線と大回り圧縮と斜め Middle Speed 4マスgoalｰｰｰｰ
					printf("pass press 4.\n");
 800a808:	486f      	ldr	r0, [pc, #444]	; (800a9c8 <goal_test+0x5bc>)
 800a80a:	f007 fedd 	bl	80125c8 <puts>
					MF.FLAG.SCND = 1;
 800a80e:	4a66      	ldr	r2, [pc, #408]	; (800a9a8 <goal_test+0x59c>)
 800a810:	8813      	ldrh	r3, [r2, #0]
 800a812:	f043 0320 	orr.w	r3, r3, #32
 800a816:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800a818:	4a63      	ldr	r2, [pc, #396]	; (800a9a8 <goal_test+0x59c>)
 800a81a:	8813      	ldrh	r3, [r2, #0]
 800a81c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a820:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800a822:	4a61      	ldr	r2, [pc, #388]	; (800a9a8 <goal_test+0x59c>)
 800a824:	8813      	ldrh	r3, [r2, #0]
 800a826:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800a82a:	8013      	strh	r3, [r2, #0]
					run_mode = MIDDLE;
 800a82c:	4b5f      	ldr	r3, [pc, #380]	; (800a9ac <goal_test+0x5a0>)
 800a82e:	2202      	movs	r2, #2
 800a830:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800a832:	4b5f      	ldr	r3, [pc, #380]	; (800a9b0 <goal_test+0x5a4>)
 800a834:	2200      	movs	r2, #0
 800a836:	701a      	strb	r2, [r3, #0]
					goal_mode = 2;
 800a838:	4b5e      	ldr	r3, [pc, #376]	; (800a9b4 <goal_test+0x5a8>)
 800a83a:	2202      	movs	r2, #2
 800a83c:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 800a83e:	4b5e      	ldr	r3, [pc, #376]	; (800a9b8 <goal_test+0x5ac>)
 800a840:	f241 3288 	movw	r2, #5000	; 0x1388
 800a844:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1200;
 800a846:	4b5d      	ldr	r3, [pc, #372]	; (800a9bc <goal_test+0x5b0>)
 800a848:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 800a84c:	801a      	strh	r2, [r3, #0]

//					pass_mode = 4;

					goal_x = GOAL_X;
 800a84e:	4b5c      	ldr	r3, [pc, #368]	; (800a9c0 <goal_test+0x5b4>)
 800a850:	2207      	movs	r2, #7
 800a852:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800a854:	4b5b      	ldr	r3, [pc, #364]	; (800a9c4 <goal_test+0x5b8>)
 800a856:	2206      	movs	r2, #6
 800a858:	701a      	strb	r2, [r3, #0]

					get_base();
 800a85a:	f007 f81b 	bl	8011894 <get_base>

					searchF4();
 800a85e:	f004 fd99 	bl	800f394 <searchF4>
					HAL_Delay(2000);
 800a862:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800a866:	f7f6 fbd9 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800a86a:	4b56      	ldr	r3, [pc, #344]	; (800a9c4 <goal_test+0x5b8>)
 800a86c:	2200      	movs	r2, #0
 800a86e:	701a      	strb	r2, [r3, #0]
 800a870:	4b54      	ldr	r3, [pc, #336]	; (800a9c4 <goal_test+0x5b8>)
 800a872:	781a      	ldrb	r2, [r3, #0]
 800a874:	4b52      	ldr	r3, [pc, #328]	; (800a9c0 <goal_test+0x5b4>)
 800a876:	701a      	strb	r2, [r3, #0]
					searchF4();
 800a878:	f004 fd8c 	bl	800f394 <searchF4>

					goal_x = GOAL_X;
 800a87c:	4b50      	ldr	r3, [pc, #320]	; (800a9c0 <goal_test+0x5b4>)
 800a87e:	2207      	movs	r2, #7
 800a880:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800a882:	4b50      	ldr	r3, [pc, #320]	; (800a9c4 <goal_test+0x5b8>)
 800a884:	2206      	movs	r2, #6
 800a886:	701a      	strb	r2, [r3, #0]
					break;
 800a888:	e08b      	b.n	800a9a2 <goal_test+0x596>
				case 6:
					//----a一次探索スラローム走行　重ね探索----
					printf("First Run. (Slalom)\n");
 800a88a:	4850      	ldr	r0, [pc, #320]	; (800a9cc <goal_test+0x5c0>)
 800a88c:	f007 fe9c 	bl	80125c8 <puts>

					MF.FLAG.SCND = 0;
 800a890:	4a45      	ldr	r2, [pc, #276]	; (800a9a8 <goal_test+0x59c>)
 800a892:	8813      	ldrh	r3, [r2, #0]
 800a894:	f36f 1345 	bfc	r3, #5, #1
 800a898:	8013      	strh	r3, [r2, #0]
					MF.FLAG.SRC2 = 1;
 800a89a:	4a43      	ldr	r2, [pc, #268]	; (800a9a8 <goal_test+0x59c>)
 800a89c:	8813      	ldrh	r3, [r2, #0]
 800a89e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a8a2:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800a8a4:	4a40      	ldr	r2, [pc, #256]	; (800a9a8 <goal_test+0x59c>)
 800a8a6:	8813      	ldrh	r3, [r2, #0]
 800a8a8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a8ac:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 0;
 800a8ae:	4a3e      	ldr	r2, [pc, #248]	; (800a9a8 <goal_test+0x59c>)
 800a8b0:	8813      	ldrh	r3, [r2, #0]
 800a8b2:	f36f 238a 	bfc	r3, #10, #1
 800a8b6:	8013      	strh	r3, [r2, #0]
					run_mode = MIDDLE;
 800a8b8:	4b3c      	ldr	r3, [pc, #240]	; (800a9ac <goal_test+0x5a0>)
 800a8ba:	2202      	movs	r2, #2
 800a8bc:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800a8be:	4b3c      	ldr	r3, [pc, #240]	; (800a9b0 <goal_test+0x5a4>)
 800a8c0:	2200      	movs	r2, #0
 800a8c2:	701a      	strb	r2, [r3, #0]
					goal_mode = 1;
 800a8c4:	4b3b      	ldr	r3, [pc, #236]	; (800a9b4 <goal_test+0x5a8>)
 800a8c6:	2201      	movs	r2, #1
 800a8c8:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 800a8ca:	4b3b      	ldr	r3, [pc, #236]	; (800a9b8 <goal_test+0x5ac>)
 800a8cc:	f241 3288 	movw	r2, #5000	; 0x1388
 800a8d0:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1200;
 800a8d2:	4b3a      	ldr	r3, [pc, #232]	; (800a9bc <goal_test+0x5b0>)
 800a8d4:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 800a8d8:	801a      	strh	r2, [r3, #0]
					goal_x = GOAL_X;
 800a8da:	4b39      	ldr	r3, [pc, #228]	; (800a9c0 <goal_test+0x5b4>)
 800a8dc:	2207      	movs	r2, #7
 800a8de:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800a8e0:	4b38      	ldr	r3, [pc, #224]	; (800a9c4 <goal_test+0x5b8>)
 800a8e2:	2206      	movs	r2, #6
 800a8e4:	701a      	strb	r2, [r3, #0]

					get_base();
 800a8e6:	f006 ffd5 	bl	8011894 <get_base>

					searchC2();
 800a8ea:	f004 f96f 	bl	800ebcc <searchC2>
					HAL_Delay(2000);
 800a8ee:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800a8f2:	f7f6 fb93 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800a8f6:	4b33      	ldr	r3, [pc, #204]	; (800a9c4 <goal_test+0x5b8>)
 800a8f8:	2200      	movs	r2, #0
 800a8fa:	701a      	strb	r2, [r3, #0]
 800a8fc:	4b31      	ldr	r3, [pc, #196]	; (800a9c4 <goal_test+0x5b8>)
 800a8fe:	781a      	ldrb	r2, [r3, #0]
 800a900:	4b2f      	ldr	r3, [pc, #188]	; (800a9c0 <goal_test+0x5b4>)
 800a902:	701a      	strb	r2, [r3, #0]
					searchC();
 800a904:	f003 fff0 	bl	800e8e8 <searchC>

					goal_x = GOAL_X;
 800a908:	4b2d      	ldr	r3, [pc, #180]	; (800a9c0 <goal_test+0x5b4>)
 800a90a:	2207      	movs	r2, #7
 800a90c:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800a90e:	4b2d      	ldr	r3, [pc, #180]	; (800a9c4 <goal_test+0x5b8>)
 800a910:	2206      	movs	r2, #6
 800a912:	701a      	strb	r2, [r3, #0]
					break;
 800a914:	e045      	b.n	800a9a2 <goal_test+0x596>
				case 7:
					//----a一次探索スラローム走行　重ね探索 4マスgoal----
					printf("First Run. (Slalom)\n");
 800a916:	482d      	ldr	r0, [pc, #180]	; (800a9cc <goal_test+0x5c0>)
 800a918:	f007 fe56 	bl	80125c8 <puts>

					MF.FLAG.SCND = 0;
 800a91c:	4a22      	ldr	r2, [pc, #136]	; (800a9a8 <goal_test+0x59c>)
 800a91e:	8813      	ldrh	r3, [r2, #0]
 800a920:	f36f 1345 	bfc	r3, #5, #1
 800a924:	8013      	strh	r3, [r2, #0]
					MF.FLAG.SRC2 = 1;
 800a926:	4a20      	ldr	r2, [pc, #128]	; (800a9a8 <goal_test+0x59c>)
 800a928:	8813      	ldrh	r3, [r2, #0]
 800a92a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a92e:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800a930:	4a1d      	ldr	r2, [pc, #116]	; (800a9a8 <goal_test+0x59c>)
 800a932:	8813      	ldrh	r3, [r2, #0]
 800a934:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a938:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 0;
 800a93a:	4a1b      	ldr	r2, [pc, #108]	; (800a9a8 <goal_test+0x59c>)
 800a93c:	8813      	ldrh	r3, [r2, #0]
 800a93e:	f36f 238a 	bfc	r3, #10, #1
 800a942:	8013      	strh	r3, [r2, #0]
					run_mode = MIDDLE;
 800a944:	4b19      	ldr	r3, [pc, #100]	; (800a9ac <goal_test+0x5a0>)
 800a946:	2202      	movs	r2, #2
 800a948:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800a94a:	4b19      	ldr	r3, [pc, #100]	; (800a9b0 <goal_test+0x5a4>)
 800a94c:	2200      	movs	r2, #0
 800a94e:	701a      	strb	r2, [r3, #0]
					goal_mode = 2;
 800a950:	4b18      	ldr	r3, [pc, #96]	; (800a9b4 <goal_test+0x5a8>)
 800a952:	2202      	movs	r2, #2
 800a954:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 800a956:	4b18      	ldr	r3, [pc, #96]	; (800a9b8 <goal_test+0x5ac>)
 800a958:	f241 3288 	movw	r2, #5000	; 0x1388
 800a95c:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1200;
 800a95e:	4b17      	ldr	r3, [pc, #92]	; (800a9bc <goal_test+0x5b0>)
 800a960:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 800a964:	801a      	strh	r2, [r3, #0]
					goal_x = GOAL_X;
 800a966:	4b16      	ldr	r3, [pc, #88]	; (800a9c0 <goal_test+0x5b4>)
 800a968:	2207      	movs	r2, #7
 800a96a:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800a96c:	4b15      	ldr	r3, [pc, #84]	; (800a9c4 <goal_test+0x5b8>)
 800a96e:	2206      	movs	r2, #6
 800a970:	701a      	strb	r2, [r3, #0]

					get_base();
 800a972:	f006 ff8f 	bl	8011894 <get_base>

					searchC2();
 800a976:	f004 f929 	bl	800ebcc <searchC2>
					HAL_Delay(2000);
 800a97a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800a97e:	f7f6 fb4d 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800a982:	4b10      	ldr	r3, [pc, #64]	; (800a9c4 <goal_test+0x5b8>)
 800a984:	2200      	movs	r2, #0
 800a986:	701a      	strb	r2, [r3, #0]
 800a988:	4b0e      	ldr	r3, [pc, #56]	; (800a9c4 <goal_test+0x5b8>)
 800a98a:	781a      	ldrb	r2, [r3, #0]
 800a98c:	4b0c      	ldr	r3, [pc, #48]	; (800a9c0 <goal_test+0x5b4>)
 800a98e:	701a      	strb	r2, [r3, #0]
					searchC();
 800a990:	f003 ffaa 	bl	800e8e8 <searchC>

					goal_x = GOAL_X;
 800a994:	4b0a      	ldr	r3, [pc, #40]	; (800a9c0 <goal_test+0x5b4>)
 800a996:	2207      	movs	r2, #7
 800a998:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800a99a:	4b0a      	ldr	r3, [pc, #40]	; (800a9c4 <goal_test+0x5b8>)
 800a99c:	2206      	movs	r2, #6
 800a99e:	701a      	strb	r2, [r3, #0]
					break;
 800a9a0:	bf00      	nop
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 800a9a2:	e53c      	b.n	800a41e <goal_test+0x12>
 800a9a4:	08013910 	.word	0x08013910
 800a9a8:	20000f68 	.word	0x20000f68
 800a9ac:	20000456 	.word	0x20000456
 800a9b0:	200015c8 	.word	0x200015c8
 800a9b4:	20000bb1 	.word	0x20000bb1
 800a9b8:	20000454 	.word	0x20000454
 800a9bc:	20000f7c 	.word	0x20000f7c
 800a9c0:	20000bb0 	.word	0x20000bb0
 800a9c4:	20000b4c 	.word	0x20000b4c
 800a9c8:	08013920 	.word	0x08013920
 800a9cc:	080138fc 	.word	0x080138fc

0800a9d0 <sample_course_run>:
//sample_course_run
//a試験走行モード
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void sample_course_run(void){
 800a9d0:	b580      	push	{r7, lr}
 800a9d2:	b082      	sub	sp, #8
 800a9d4:	af00      	add	r7, sp, #0

	int mode = 0;
 800a9d6:	2300      	movs	r3, #0
 800a9d8:	607b      	str	r3, [r7, #4]
	printf("Sample Course Run, Mode : %d\n", mode);
 800a9da:	6879      	ldr	r1, [r7, #4]
 800a9dc:	488f      	ldr	r0, [pc, #572]	; (800ac1c <sample_course_run+0x24c>)
 800a9de:	f007 fd7f 	bl	80124e0 <iprintf>

	while(1){
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	b2db      	uxtb	r3, r3
 800a9e6:	f003 0301 	and.w	r3, r3, #1
 800a9ea:	b2d8      	uxtb	r0, r3
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	b2db      	uxtb	r3, r3
 800a9f0:	f003 0302 	and.w	r3, r3, #2
 800a9f4:	b2d9      	uxtb	r1, r3
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	b2db      	uxtb	r3, r3
 800a9fa:	f003 0304 	and.w	r3, r3, #4
 800a9fe:	b2db      	uxtb	r3, r3
 800aa00:	461a      	mov	r2, r3
 800aa02:	f006 ff9f 	bl	8011944 <led_write>
		  if(dist_r >= 20){
 800aa06:	4b86      	ldr	r3, [pc, #536]	; (800ac20 <sample_course_run+0x250>)
 800aa08:	edd3 7a00 	vldr	s15, [r3]
 800aa0c:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 800aa10:	eef4 7ac7 	vcmpe.f32	s15, s14
 800aa14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aa18:	db0f      	blt.n	800aa3a <sample_course_run+0x6a>
			  mode++;
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	3301      	adds	r3, #1
 800aa1e:	607b      	str	r3, [r7, #4]
			  dist_r = 0;
 800aa20:	4b7f      	ldr	r3, [pc, #508]	; (800ac20 <sample_course_run+0x250>)
 800aa22:	f04f 0200 	mov.w	r2, #0
 800aa26:	601a      	str	r2, [r3, #0]
			  if(mode > 7){
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	2b07      	cmp	r3, #7
 800aa2c:	dd01      	ble.n	800aa32 <sample_course_run+0x62>
				  mode = 0;
 800aa2e:	2300      	movs	r3, #0
 800aa30:	607b      	str	r3, [r7, #4]
			  }
			  printf("Mode : %d\n", mode);
 800aa32:	6879      	ldr	r1, [r7, #4]
 800aa34:	487b      	ldr	r0, [pc, #492]	; (800ac24 <sample_course_run+0x254>)
 800aa36:	f007 fd53 	bl	80124e0 <iprintf>
		  }
		  if(dist_r <= -20){
 800aa3a:	4b79      	ldr	r3, [pc, #484]	; (800ac20 <sample_course_run+0x250>)
 800aa3c:	edd3 7a00 	vldr	s15, [r3]
 800aa40:	eebb 7a04 	vmov.f32	s14, #180	; 0xc1a00000 -20.0
 800aa44:	eef4 7ac7 	vcmpe.f32	s15, s14
 800aa48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aa4c:	d80f      	bhi.n	800aa6e <sample_course_run+0x9e>
			  mode--;
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	3b01      	subs	r3, #1
 800aa52:	607b      	str	r3, [r7, #4]
			  dist_r = 0;
 800aa54:	4b72      	ldr	r3, [pc, #456]	; (800ac20 <sample_course_run+0x250>)
 800aa56:	f04f 0200 	mov.w	r2, #0
 800aa5a:	601a      	str	r2, [r3, #0]
			  if(mode < 0){
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	2b00      	cmp	r3, #0
 800aa60:	da01      	bge.n	800aa66 <sample_course_run+0x96>
				  mode = 7;
 800aa62:	2307      	movs	r3, #7
 800aa64:	607b      	str	r3, [r7, #4]
			  }
			  printf("Mode : %d\n", mode);
 800aa66:	6879      	ldr	r1, [r7, #4]
 800aa68:	486e      	ldr	r0, [pc, #440]	; (800ac24 <sample_course_run+0x254>)
 800aa6a:	f007 fd39 	bl	80124e0 <iprintf>
		  }
		  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET){
 800aa6e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800aa72:	486d      	ldr	r0, [pc, #436]	; (800ac28 <sample_course_run+0x258>)
 800aa74:	f7f7 fc2e 	bl	80022d4 <HAL_GPIO_ReadPin>
 800aa78:	4603      	mov	r3, r0
 800aa7a:	2b00      	cmp	r3, #0
 800aa7c:	d1b1      	bne.n	800a9e2 <sample_course_run+0x12>
			  HAL_Delay(50);
 800aa7e:	2032      	movs	r0, #50	; 0x32
 800aa80:	f7f6 facc 	bl	800101c <HAL_Delay>
			  while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET);
 800aa84:	bf00      	nop
 800aa86:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800aa8a:	4867      	ldr	r0, [pc, #412]	; (800ac28 <sample_course_run+0x258>)
 800aa8c:	f7f7 fc22 	bl	80022d4 <HAL_GPIO_ReadPin>
 800aa90:	4603      	mov	r3, r0
 800aa92:	2b00      	cmp	r3, #0
 800aa94:	d0f7      	beq.n	800aa86 <sample_course_run+0xb6>
			  drive_ready();
 800aa96:	f7fa f8f3 	bl	8004c80 <drive_ready>

			  switch(mode){
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	2b07      	cmp	r3, #7
 800aa9e:	d8a0      	bhi.n	800a9e2 <sample_course_run+0x12>
 800aaa0:	a201      	add	r2, pc, #4	; (adr r2, 800aaa8 <sample_course_run+0xd8>)
 800aaa2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aaa6:	bf00      	nop
 800aaa8:	0800aac9 	.word	0x0800aac9
 800aaac:	0800aacf 	.word	0x0800aacf
 800aab0:	0800aaf1 	.word	0x0800aaf1
 800aab4:	0800ab13 	.word	0x0800ab13
 800aab8:	0800a9e3 	.word	0x0800a9e3
 800aabc:	0800ab25 	.word	0x0800ab25
 800aac0:	0800ab9f 	.word	0x0800ab9f
 800aac4:	0800a9e3 	.word	0x0800a9e3
				case 0:
					get_base();
 800aac8:	f006 fee4 	bl	8011894 <get_base>
					break;
 800aacc:	e0a4      	b.n	800ac18 <sample_course_run+0x248>

				case 1:
					//----サンプルコース1　超信地----
					half_sectionA();
 800aace:	f7fb f855 	bl	8005b7c <half_sectionA>
					half_sectionD();
 800aad2:	f7fb f8b9 	bl	8005c48 <half_sectionD>
					rotate_R90();
 800aad6:	f7fb fc53 	bl	8006380 <rotate_R90>
					half_sectionA();
 800aada:	f7fb f84f 	bl	8005b7c <half_sectionA>
					half_sectionD();
 800aade:	f7fb f8b3 	bl	8005c48 <half_sectionD>
					rotate_R90();
 800aae2:	f7fb fc4d 	bl	8006380 <rotate_R90>
					half_sectionA();
 800aae6:	f7fb f849 	bl	8005b7c <half_sectionA>
					half_sectionD();
 800aaea:	f7fb f8ad 	bl	8005c48 <half_sectionD>
					break;
 800aaee:	e093      	b.n	800ac18 <sample_course_run+0x248>

				case 2:
					//----サンプルコース1　超信地----
					half_sectionA();
 800aaf0:	f7fb f844 	bl	8005b7c <half_sectionA>
					half_sectionD();
 800aaf4:	f7fb f8a8 	bl	8005c48 <half_sectionD>
					rotate_L90();
 800aaf8:	f7fb fd1e 	bl	8006538 <rotate_L90>
					half_sectionA();
 800aafc:	f7fb f83e 	bl	8005b7c <half_sectionA>
					half_sectionD();
 800ab00:	f7fb f8a2 	bl	8005c48 <half_sectionD>
					rotate_L90();
 800ab04:	f7fb fd18 	bl	8006538 <rotate_L90>
					half_sectionA();
 800ab08:	f7fb f838 	bl	8005b7c <half_sectionA>
					half_sectionD();
 800ab0c:	f7fb f89c 	bl	8005c48 <half_sectionD>
					break;
 800ab10:	e082      	b.n	800ac18 <sample_course_run+0x248>

				case 3:
					//---サンプルコース2　スラローム----
					half_sectionA();
 800ab12:	f7fb f833 	bl	8005b7c <half_sectionA>
					slalom_R90();
 800ab16:	f7fb fec3 	bl	80068a0 <slalom_R90>
					slalom_R90();
 800ab1a:	f7fb fec1 	bl	80068a0 <slalom_R90>
					half_sectionD();
 800ab1e:	f7fb f893 	bl	8005c48 <half_sectionD>
					break;
 800ab22:	e079      	b.n	800ac18 <sample_course_run+0x248>
				case 4:
					break;

				case 5:
					//----スラローム走行&全面探索スラローム走行----
					printf("Slalom Run & All Map Run.\n");
 800ab24:	4841      	ldr	r0, [pc, #260]	; (800ac2c <sample_course_run+0x25c>)
 800ab26:	f007 fd4f 	bl	80125c8 <puts>

					MF.FLAG.SCND = 0;
 800ab2a:	4a41      	ldr	r2, [pc, #260]	; (800ac30 <sample_course_run+0x260>)
 800ab2c:	8813      	ldrh	r3, [r2, #0]
 800ab2e:	f36f 1345 	bfc	r3, #5, #1
 800ab32:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800ab34:	4a3e      	ldr	r2, [pc, #248]	; (800ac30 <sample_course_run+0x260>)
 800ab36:	8813      	ldrh	r3, [r2, #0]
 800ab38:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800ab3c:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800ab3e:	4a3c      	ldr	r2, [pc, #240]	; (800ac30 <sample_course_run+0x260>)
 800ab40:	8813      	ldrh	r3, [r2, #0]
 800ab42:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800ab46:	8013      	strh	r3, [r2, #0]
					start_mode = 0;
 800ab48:	4b3a      	ldr	r3, [pc, #232]	; (800ac34 <sample_course_run+0x264>)
 800ab4a:	2200      	movs	r2, #0
 800ab4c:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 800ab4e:	4b3a      	ldr	r3, [pc, #232]	; (800ac38 <sample_course_run+0x268>)
 800ab50:	f241 3288 	movw	r2, #5000	; 0x1388
 800ab54:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 800;
 800ab56:	4b39      	ldr	r3, [pc, #228]	; (800ac3c <sample_course_run+0x26c>)
 800ab58:	f44f 7248 	mov.w	r2, #800	; 0x320
 800ab5c:	801a      	strh	r2, [r3, #0]

					goal_x = GOAL_X;
 800ab5e:	4b38      	ldr	r3, [pc, #224]	; (800ac40 <sample_course_run+0x270>)
 800ab60:	2207      	movs	r2, #7
 800ab62:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800ab64:	4b37      	ldr	r3, [pc, #220]	; (800ac44 <sample_course_run+0x274>)
 800ab66:	2206      	movs	r2, #6
 800ab68:	701a      	strb	r2, [r3, #0]

					get_base();
 800ab6a:	f006 fe93 	bl	8011894 <get_base>

					searchC();
 800ab6e:	f003 febb 	bl	800e8e8 <searchC>
					HAL_Delay(2000);
 800ab72:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800ab76:	f7f6 fa51 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800ab7a:	4b32      	ldr	r3, [pc, #200]	; (800ac44 <sample_course_run+0x274>)
 800ab7c:	2200      	movs	r2, #0
 800ab7e:	701a      	strb	r2, [r3, #0]
 800ab80:	4b30      	ldr	r3, [pc, #192]	; (800ac44 <sample_course_run+0x274>)
 800ab82:	781a      	ldrb	r2, [r3, #0]
 800ab84:	4b2e      	ldr	r3, [pc, #184]	; (800ac40 <sample_course_run+0x270>)
 800ab86:	701a      	strb	r2, [r3, #0]
					searchE();
 800ab88:	f004 fa7c 	bl	800f084 <searchE>

					searchC();
 800ab8c:	f003 feac 	bl	800e8e8 <searchC>
					goal_x = GOAL_X;
 800ab90:	4b2b      	ldr	r3, [pc, #172]	; (800ac40 <sample_course_run+0x270>)
 800ab92:	2207      	movs	r2, #7
 800ab94:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800ab96:	4b2b      	ldr	r3, [pc, #172]	; (800ac44 <sample_course_run+0x274>)
 800ab98:	2206      	movs	r2, #6
 800ab9a:	701a      	strb	r2, [r3, #0]

					break;
 800ab9c:	e03c      	b.n	800ac18 <sample_course_run+0x248>

				case 6:
					//----スラローム走行&全面探索スラローム走行----
					printf("Slalom Run & All Map Run.\n");
 800ab9e:	4823      	ldr	r0, [pc, #140]	; (800ac2c <sample_course_run+0x25c>)
 800aba0:	f007 fd12 	bl	80125c8 <puts>

					MF.FLAG.SCND = 0;
 800aba4:	4a22      	ldr	r2, [pc, #136]	; (800ac30 <sample_course_run+0x260>)
 800aba6:	8813      	ldrh	r3, [r2, #0]
 800aba8:	f36f 1345 	bfc	r3, #5, #1
 800abac:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800abae:	4a20      	ldr	r2, [pc, #128]	; (800ac30 <sample_course_run+0x260>)
 800abb0:	8813      	ldrh	r3, [r2, #0]
 800abb2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800abb6:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800abb8:	4a1d      	ldr	r2, [pc, #116]	; (800ac30 <sample_course_run+0x260>)
 800abba:	8813      	ldrh	r3, [r2, #0]
 800abbc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800abc0:	8013      	strh	r3, [r2, #0]
					start_mode = 0;
 800abc2:	4b1c      	ldr	r3, [pc, #112]	; (800ac34 <sample_course_run+0x264>)
 800abc4:	2200      	movs	r2, #0
 800abc6:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 800abc8:	4b1b      	ldr	r3, [pc, #108]	; (800ac38 <sample_course_run+0x268>)
 800abca:	f241 3288 	movw	r2, #5000	; 0x1388
 800abce:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 800;
 800abd0:	4b1a      	ldr	r3, [pc, #104]	; (800ac3c <sample_course_run+0x26c>)
 800abd2:	f44f 7248 	mov.w	r2, #800	; 0x320
 800abd6:	801a      	strh	r2, [r3, #0]
					goal_x = 7;
 800abd8:	4b19      	ldr	r3, [pc, #100]	; (800ac40 <sample_course_run+0x270>)
 800abda:	2207      	movs	r2, #7
 800abdc:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800abde:	4b19      	ldr	r3, [pc, #100]	; (800ac44 <sample_course_run+0x274>)
 800abe0:	2207      	movs	r2, #7
 800abe2:	701a      	strb	r2, [r3, #0]

					get_base();
 800abe4:	f006 fe56 	bl	8011894 <get_base>

					searchC();
 800abe8:	f003 fe7e 	bl	800e8e8 <searchC>
					HAL_Delay(2000);
 800abec:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800abf0:	f7f6 fa14 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800abf4:	4b13      	ldr	r3, [pc, #76]	; (800ac44 <sample_course_run+0x274>)
 800abf6:	2200      	movs	r2, #0
 800abf8:	701a      	strb	r2, [r3, #0]
 800abfa:	4b12      	ldr	r3, [pc, #72]	; (800ac44 <sample_course_run+0x274>)
 800abfc:	781a      	ldrb	r2, [r3, #0]
 800abfe:	4b10      	ldr	r3, [pc, #64]	; (800ac40 <sample_course_run+0x270>)
 800ac00:	701a      	strb	r2, [r3, #0]
					searchE();
 800ac02:	f004 fa3f 	bl	800f084 <searchE>

					searchC();
 800ac06:	f003 fe6f 	bl	800e8e8 <searchC>
					goal_x = 7;
 800ac0a:	4b0d      	ldr	r3, [pc, #52]	; (800ac40 <sample_course_run+0x270>)
 800ac0c:	2207      	movs	r2, #7
 800ac0e:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800ac10:	4b0c      	ldr	r3, [pc, #48]	; (800ac44 <sample_course_run+0x274>)
 800ac12:	2207      	movs	r2, #7
 800ac14:	701a      	strb	r2, [r3, #0]

					break;
 800ac16:	bf00      	nop
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 800ac18:	e6e3      	b.n	800a9e2 <sample_course_run+0x12>
 800ac1a:	bf00      	nop
 800ac1c:	08013988 	.word	0x08013988
 800ac20:	20000aec 	.word	0x20000aec
 800ac24:	0801371c 	.word	0x0801371c
 800ac28:	40020000 	.word	0x40020000
 800ac2c:	080139a8 	.word	0x080139a8
 800ac30:	20000f68 	.word	0x20000f68
 800ac34:	200015c8 	.word	0x200015c8
 800ac38:	20000454 	.word	0x20000454
 800ac3c:	20000f7c 	.word	0x20000f7c
 800ac40:	20000bb0 	.word	0x20000bb0
 800ac44:	20000b4c 	.word	0x20000b4c

0800ac48 <simple_run>:
//simple_run
// 超信地走行モード
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void simple_run(void){
 800ac48:	b580      	push	{r7, lr}
 800ac4a:	b082      	sub	sp, #8
 800ac4c:	af00      	add	r7, sp, #0

	int mode = 0;
 800ac4e:	2300      	movs	r3, #0
 800ac50:	607b      	str	r3, [r7, #4]
	printf("Simple Run, Mode : %d\n", mode);
 800ac52:	6879      	ldr	r1, [r7, #4]
 800ac54:	4878      	ldr	r0, [pc, #480]	; (800ae38 <simple_run+0x1f0>)
 800ac56:	f007 fc43 	bl	80124e0 <iprintf>

	while(1){

		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	b2db      	uxtb	r3, r3
 800ac5e:	f003 0301 	and.w	r3, r3, #1
 800ac62:	b2d8      	uxtb	r0, r3
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	b2db      	uxtb	r3, r3
 800ac68:	f003 0302 	and.w	r3, r3, #2
 800ac6c:	b2d9      	uxtb	r1, r3
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	b2db      	uxtb	r3, r3
 800ac72:	f003 0304 	and.w	r3, r3, #4
 800ac76:	b2db      	uxtb	r3, r3
 800ac78:	461a      	mov	r2, r3
 800ac7a:	f006 fe63 	bl	8011944 <led_write>
		  if(dist_r >= 20){
 800ac7e:	4b6f      	ldr	r3, [pc, #444]	; (800ae3c <simple_run+0x1f4>)
 800ac80:	edd3 7a00 	vldr	s15, [r3]
 800ac84:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 800ac88:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ac8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ac90:	db0f      	blt.n	800acb2 <simple_run+0x6a>
			  mode++;
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	3301      	adds	r3, #1
 800ac96:	607b      	str	r3, [r7, #4]
			  dist_r = 0;
 800ac98:	4b68      	ldr	r3, [pc, #416]	; (800ae3c <simple_run+0x1f4>)
 800ac9a:	f04f 0200 	mov.w	r2, #0
 800ac9e:	601a      	str	r2, [r3, #0]
			  if(mode > 7){
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	2b07      	cmp	r3, #7
 800aca4:	dd01      	ble.n	800acaa <simple_run+0x62>
				  mode = 0;
 800aca6:	2300      	movs	r3, #0
 800aca8:	607b      	str	r3, [r7, #4]
			  }
			  printf("Mode : %d\n", mode);
 800acaa:	6879      	ldr	r1, [r7, #4]
 800acac:	4864      	ldr	r0, [pc, #400]	; (800ae40 <simple_run+0x1f8>)
 800acae:	f007 fc17 	bl	80124e0 <iprintf>
		  }
		  if(dist_r <= -20){
 800acb2:	4b62      	ldr	r3, [pc, #392]	; (800ae3c <simple_run+0x1f4>)
 800acb4:	edd3 7a00 	vldr	s15, [r3]
 800acb8:	eebb 7a04 	vmov.f32	s14, #180	; 0xc1a00000 -20.0
 800acbc:	eef4 7ac7 	vcmpe.f32	s15, s14
 800acc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800acc4:	d80f      	bhi.n	800ace6 <simple_run+0x9e>
			  mode--;
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	3b01      	subs	r3, #1
 800acca:	607b      	str	r3, [r7, #4]
			  dist_r = 0;
 800accc:	4b5b      	ldr	r3, [pc, #364]	; (800ae3c <simple_run+0x1f4>)
 800acce:	f04f 0200 	mov.w	r2, #0
 800acd2:	601a      	str	r2, [r3, #0]
			  if(mode < 0){
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	2b00      	cmp	r3, #0
 800acd8:	da01      	bge.n	800acde <simple_run+0x96>
				  mode = 7;
 800acda:	2307      	movs	r3, #7
 800acdc:	607b      	str	r3, [r7, #4]
			  }
			  printf("Mode : %d\n", mode);
 800acde:	6879      	ldr	r1, [r7, #4]
 800ace0:	4857      	ldr	r0, [pc, #348]	; (800ae40 <simple_run+0x1f8>)
 800ace2:	f007 fbfd 	bl	80124e0 <iprintf>
		  }
		  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET){
 800ace6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800acea:	4856      	ldr	r0, [pc, #344]	; (800ae44 <simple_run+0x1fc>)
 800acec:	f7f7 faf2 	bl	80022d4 <HAL_GPIO_ReadPin>
 800acf0:	4603      	mov	r3, r0
 800acf2:	2b00      	cmp	r3, #0
 800acf4:	d1b1      	bne.n	800ac5a <simple_run+0x12>
			  HAL_Delay(50);
 800acf6:	2032      	movs	r0, #50	; 0x32
 800acf8:	f7f6 f990 	bl	800101c <HAL_Delay>
			  while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET);
 800acfc:	bf00      	nop
 800acfe:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800ad02:	4850      	ldr	r0, [pc, #320]	; (800ae44 <simple_run+0x1fc>)
 800ad04:	f7f7 fae6 	bl	80022d4 <HAL_GPIO_ReadPin>
 800ad08:	4603      	mov	r3, r0
 800ad0a:	2b00      	cmp	r3, #0
 800ad0c:	d0f7      	beq.n	800acfe <simple_run+0xb6>
			  drive_ready();
 800ad0e:	f7f9 ffb7 	bl	8004c80 <drive_ready>

			  switch(mode){
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	2b07      	cmp	r3, #7
 800ad16:	d8a0      	bhi.n	800ac5a <simple_run+0x12>
 800ad18:	a201      	add	r2, pc, #4	; (adr r2, 800ad20 <simple_run+0xd8>)
 800ad1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad1e:	bf00      	nop
 800ad20:	0800ac5b 	.word	0x0800ac5b
 800ad24:	0800ad41 	.word	0x0800ad41
 800ad28:	0800ad93 	.word	0x0800ad93
 800ad2c:	0800ade5 	.word	0x0800ade5
 800ad30:	0800ac5b 	.word	0x0800ac5b
 800ad34:	0800ac5b 	.word	0x0800ac5b
 800ad38:	0800ac5b 	.word	0x0800ac5b
 800ad3c:	0800ac5b 	.word	0x0800ac5b

				case 0:
					break;
				case 1:
					//----一次探索走行----
					printf("First Run.\n");
 800ad40:	4841      	ldr	r0, [pc, #260]	; (800ae48 <simple_run+0x200>)
 800ad42:	f007 fc41 	bl	80125c8 <puts>

					MF.FLAG.SCND = 0;
 800ad46:	4a41      	ldr	r2, [pc, #260]	; (800ae4c <simple_run+0x204>)
 800ad48:	8813      	ldrh	r3, [r2, #0]
 800ad4a:	f36f 1345 	bfc	r3, #5, #1
 800ad4e:	8013      	strh	r3, [r2, #0]
					run_mode = LOW;
 800ad50:	4b3f      	ldr	r3, [pc, #252]	; (800ae50 <simple_run+0x208>)
 800ad52:	2201      	movs	r2, #1
 800ad54:	701a      	strb	r2, [r3, #0]
					goal_x = GOAL_X;
 800ad56:	4b3f      	ldr	r3, [pc, #252]	; (800ae54 <simple_run+0x20c>)
 800ad58:	2207      	movs	r2, #7
 800ad5a:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800ad5c:	4b3e      	ldr	r3, [pc, #248]	; (800ae58 <simple_run+0x210>)
 800ad5e:	2206      	movs	r2, #6
 800ad60:	701a      	strb	r2, [r3, #0]

					get_base();
 800ad62:	f006 fd97 	bl	8011894 <get_base>

					searchA();
 800ad66:	f003 fcb3 	bl	800e6d0 <searchA>
					HAL_Delay(2000);
 800ad6a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800ad6e:	f7f6 f955 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800ad72:	4b39      	ldr	r3, [pc, #228]	; (800ae58 <simple_run+0x210>)
 800ad74:	2200      	movs	r2, #0
 800ad76:	701a      	strb	r2, [r3, #0]
 800ad78:	4b37      	ldr	r3, [pc, #220]	; (800ae58 <simple_run+0x210>)
 800ad7a:	781a      	ldrb	r2, [r3, #0]
 800ad7c:	4b35      	ldr	r3, [pc, #212]	; (800ae54 <simple_run+0x20c>)
 800ad7e:	701a      	strb	r2, [r3, #0]
					searchA();
 800ad80:	f003 fca6 	bl	800e6d0 <searchA>

					goal_x = GOAL_X;
 800ad84:	4b33      	ldr	r3, [pc, #204]	; (800ae54 <simple_run+0x20c>)
 800ad86:	2207      	movs	r2, #7
 800ad88:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800ad8a:	4b33      	ldr	r3, [pc, #204]	; (800ae58 <simple_run+0x210>)
 800ad8c:	2206      	movs	r2, #6
 800ad8e:	701a      	strb	r2, [r3, #0]

					break;
 800ad90:	e051      	b.n	800ae36 <simple_run+0x1ee>

				case 2:
					//----一次探索連続走行----
					printf("First Run. (Continuous)\n");
 800ad92:	4832      	ldr	r0, [pc, #200]	; (800ae5c <simple_run+0x214>)
 800ad94:	f007 fc18 	bl	80125c8 <puts>

					MF.FLAG.SCND = 0;
 800ad98:	4a2c      	ldr	r2, [pc, #176]	; (800ae4c <simple_run+0x204>)
 800ad9a:	8813      	ldrh	r3, [r2, #0]
 800ad9c:	f36f 1345 	bfc	r3, #5, #1
 800ada0:	8013      	strh	r3, [r2, #0]
					run_mode = LOW;
 800ada2:	4b2b      	ldr	r3, [pc, #172]	; (800ae50 <simple_run+0x208>)
 800ada4:	2201      	movs	r2, #1
 800ada6:	701a      	strb	r2, [r3, #0]
					goal_x = GOAL_X;
 800ada8:	4b2a      	ldr	r3, [pc, #168]	; (800ae54 <simple_run+0x20c>)
 800adaa:	2207      	movs	r2, #7
 800adac:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800adae:	4b2a      	ldr	r3, [pc, #168]	; (800ae58 <simple_run+0x210>)
 800adb0:	2206      	movs	r2, #6
 800adb2:	701a      	strb	r2, [r3, #0]

					get_base();
 800adb4:	f006 fd6e 	bl	8011894 <get_base>

					searchB();
 800adb8:	f003 fd0c 	bl	800e7d4 <searchB>
					HAL_Delay(2000);
 800adbc:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800adc0:	f7f6 f92c 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800adc4:	4b24      	ldr	r3, [pc, #144]	; (800ae58 <simple_run+0x210>)
 800adc6:	2200      	movs	r2, #0
 800adc8:	701a      	strb	r2, [r3, #0]
 800adca:	4b23      	ldr	r3, [pc, #140]	; (800ae58 <simple_run+0x210>)
 800adcc:	781a      	ldrb	r2, [r3, #0]
 800adce:	4b21      	ldr	r3, [pc, #132]	; (800ae54 <simple_run+0x20c>)
 800add0:	701a      	strb	r2, [r3, #0]
					searchB();
 800add2:	f003 fcff 	bl	800e7d4 <searchB>

					goal_x = GOAL_X;
 800add6:	4b1f      	ldr	r3, [pc, #124]	; (800ae54 <simple_run+0x20c>)
 800add8:	2207      	movs	r2, #7
 800adda:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800addc:	4b1e      	ldr	r3, [pc, #120]	; (800ae58 <simple_run+0x210>)
 800adde:	2206      	movs	r2, #6
 800ade0:	701a      	strb	r2, [r3, #0]

					break;
 800ade2:	e028      	b.n	800ae36 <simple_run+0x1ee>

				case 3:
					//----二次探索走行----
					printf("Second Run. (Continuous)\n");
 800ade4:	481e      	ldr	r0, [pc, #120]	; (800ae60 <simple_run+0x218>)
 800ade6:	f007 fbef 	bl	80125c8 <puts>

					MF.FLAG.SCND = 1;
 800adea:	4a18      	ldr	r2, [pc, #96]	; (800ae4c <simple_run+0x204>)
 800adec:	8813      	ldrh	r3, [r2, #0]
 800adee:	f043 0320 	orr.w	r3, r3, #32
 800adf2:	8013      	strh	r3, [r2, #0]
					run_mode = LOW;
 800adf4:	4b16      	ldr	r3, [pc, #88]	; (800ae50 <simple_run+0x208>)
 800adf6:	2201      	movs	r2, #1
 800adf8:	701a      	strb	r2, [r3, #0]
					goal_x = GOAL_X;
 800adfa:	4b16      	ldr	r3, [pc, #88]	; (800ae54 <simple_run+0x20c>)
 800adfc:	2207      	movs	r2, #7
 800adfe:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800ae00:	4b15      	ldr	r3, [pc, #84]	; (800ae58 <simple_run+0x210>)
 800ae02:	2206      	movs	r2, #6
 800ae04:	701a      	strb	r2, [r3, #0]

					get_base();
 800ae06:	f006 fd45 	bl	8011894 <get_base>

					searchB();
 800ae0a:	f003 fce3 	bl	800e7d4 <searchB>
					HAL_Delay(2000);
 800ae0e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800ae12:	f7f6 f903 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800ae16:	4b10      	ldr	r3, [pc, #64]	; (800ae58 <simple_run+0x210>)
 800ae18:	2200      	movs	r2, #0
 800ae1a:	701a      	strb	r2, [r3, #0]
 800ae1c:	4b0e      	ldr	r3, [pc, #56]	; (800ae58 <simple_run+0x210>)
 800ae1e:	781a      	ldrb	r2, [r3, #0]
 800ae20:	4b0c      	ldr	r3, [pc, #48]	; (800ae54 <simple_run+0x20c>)
 800ae22:	701a      	strb	r2, [r3, #0]
					searchB();
 800ae24:	f003 fcd6 	bl	800e7d4 <searchB>

					goal_x = GOAL_X;
 800ae28:	4b0a      	ldr	r3, [pc, #40]	; (800ae54 <simple_run+0x20c>)
 800ae2a:	2207      	movs	r2, #7
 800ae2c:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800ae2e:	4b0a      	ldr	r3, [pc, #40]	; (800ae58 <simple_run+0x210>)
 800ae30:	2206      	movs	r2, #6
 800ae32:	701a      	strb	r2, [r3, #0]

					break;
 800ae34:	bf00      	nop
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 800ae36:	e710      	b.n	800ac5a <simple_run+0x12>
 800ae38:	080139c4 	.word	0x080139c4
 800ae3c:	20000aec 	.word	0x20000aec
 800ae40:	0801371c 	.word	0x0801371c
 800ae44:	40020000 	.word	0x40020000
 800ae48:	080139dc 	.word	0x080139dc
 800ae4c:	20000f68 	.word	0x20000f68
 800ae50:	20000456 	.word	0x20000456
 800ae54:	20000bb0 	.word	0x20000bb0
 800ae58:	20000b4c 	.word	0x20000b4c
 800ae5c:	080139e8 	.word	0x080139e8
 800ae60:	08013a00 	.word	0x08013a00

0800ae64 <slalom_run>:
//slalom_run
// スラローム走行モード
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void slalom_run(void){
 800ae64:	b580      	push	{r7, lr}
 800ae66:	b082      	sub	sp, #8
 800ae68:	af00      	add	r7, sp, #0

	int mode = 0;
 800ae6a:	2300      	movs	r3, #0
 800ae6c:	607b      	str	r3, [r7, #4]
	printf("Slalom Run, Mode : %d\n", mode);
 800ae6e:	6879      	ldr	r1, [r7, #4]
 800ae70:	48a6      	ldr	r0, [pc, #664]	; (800b10c <slalom_run+0x2a8>)
 800ae72:	f007 fb35 	bl	80124e0 <iprintf>

	while(1){
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	b2db      	uxtb	r3, r3
 800ae7a:	f003 0301 	and.w	r3, r3, #1
 800ae7e:	b2d8      	uxtb	r0, r3
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	b2db      	uxtb	r3, r3
 800ae84:	f003 0302 	and.w	r3, r3, #2
 800ae88:	b2d9      	uxtb	r1, r3
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	b2db      	uxtb	r3, r3
 800ae8e:	f003 0304 	and.w	r3, r3, #4
 800ae92:	b2db      	uxtb	r3, r3
 800ae94:	461a      	mov	r2, r3
 800ae96:	f006 fd55 	bl	8011944 <led_write>
		  if(dist_r >= 20){
 800ae9a:	4b9d      	ldr	r3, [pc, #628]	; (800b110 <slalom_run+0x2ac>)
 800ae9c:	edd3 7a00 	vldr	s15, [r3]
 800aea0:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 800aea4:	eef4 7ac7 	vcmpe.f32	s15, s14
 800aea8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aeac:	db0f      	blt.n	800aece <slalom_run+0x6a>
			  mode++;
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	3301      	adds	r3, #1
 800aeb2:	607b      	str	r3, [r7, #4]
			  dist_r = 0;
 800aeb4:	4b96      	ldr	r3, [pc, #600]	; (800b110 <slalom_run+0x2ac>)
 800aeb6:	f04f 0200 	mov.w	r2, #0
 800aeba:	601a      	str	r2, [r3, #0]
			  if(mode > 7){
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	2b07      	cmp	r3, #7
 800aec0:	dd01      	ble.n	800aec6 <slalom_run+0x62>
				  mode = 0;
 800aec2:	2300      	movs	r3, #0
 800aec4:	607b      	str	r3, [r7, #4]
			  }
			  printf("Mode : %d\n", mode);
 800aec6:	6879      	ldr	r1, [r7, #4]
 800aec8:	4892      	ldr	r0, [pc, #584]	; (800b114 <slalom_run+0x2b0>)
 800aeca:	f007 fb09 	bl	80124e0 <iprintf>
		  }
		  if(dist_r <= -20){
 800aece:	4b90      	ldr	r3, [pc, #576]	; (800b110 <slalom_run+0x2ac>)
 800aed0:	edd3 7a00 	vldr	s15, [r3]
 800aed4:	eebb 7a04 	vmov.f32	s14, #180	; 0xc1a00000 -20.0
 800aed8:	eef4 7ac7 	vcmpe.f32	s15, s14
 800aedc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aee0:	d80f      	bhi.n	800af02 <slalom_run+0x9e>
			  mode--;
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	3b01      	subs	r3, #1
 800aee6:	607b      	str	r3, [r7, #4]
			  dist_r = 0;
 800aee8:	4b89      	ldr	r3, [pc, #548]	; (800b110 <slalom_run+0x2ac>)
 800aeea:	f04f 0200 	mov.w	r2, #0
 800aeee:	601a      	str	r2, [r3, #0]
			  if(mode < 0){
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	2b00      	cmp	r3, #0
 800aef4:	da01      	bge.n	800aefa <slalom_run+0x96>
				  mode = 7;
 800aef6:	2307      	movs	r3, #7
 800aef8:	607b      	str	r3, [r7, #4]
			  }
			  printf("Mode : %d\n", mode);
 800aefa:	6879      	ldr	r1, [r7, #4]
 800aefc:	4885      	ldr	r0, [pc, #532]	; (800b114 <slalom_run+0x2b0>)
 800aefe:	f007 faef 	bl	80124e0 <iprintf>
		  }
		  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET){
 800af02:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800af06:	4884      	ldr	r0, [pc, #528]	; (800b118 <slalom_run+0x2b4>)
 800af08:	f7f7 f9e4 	bl	80022d4 <HAL_GPIO_ReadPin>
 800af0c:	4603      	mov	r3, r0
 800af0e:	2b00      	cmp	r3, #0
 800af10:	d1b1      	bne.n	800ae76 <slalom_run+0x12>
			  HAL_Delay(50);
 800af12:	2032      	movs	r0, #50	; 0x32
 800af14:	f7f6 f882 	bl	800101c <HAL_Delay>
			  while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET);
 800af18:	bf00      	nop
 800af1a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800af1e:	487e      	ldr	r0, [pc, #504]	; (800b118 <slalom_run+0x2b4>)
 800af20:	f7f7 f9d8 	bl	80022d4 <HAL_GPIO_ReadPin>
 800af24:	4603      	mov	r3, r0
 800af26:	2b00      	cmp	r3, #0
 800af28:	d0f7      	beq.n	800af1a <slalom_run+0xb6>
			  drive_ready();
 800af2a:	f7f9 fea9 	bl	8004c80 <drive_ready>

			  switch(mode){
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	2b07      	cmp	r3, #7
 800af32:	d8a0      	bhi.n	800ae76 <slalom_run+0x12>
 800af34:	a201      	add	r2, pc, #4	; (adr r2, 800af3c <slalom_run+0xd8>)
 800af36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af3a:	bf00      	nop
 800af3c:	0800af5d 	.word	0x0800af5d
 800af40:	0800afcf 	.word	0x0800afcf
 800af44:	0800b027 	.word	0x0800b027
 800af48:	0800b099 	.word	0x0800b099
 800af4c:	0800b145 	.word	0x0800b145
 800af50:	0800b1b7 	.word	0x0800b1b7
 800af54:	0800b221 	.word	0x0800b221
 800af58:	0800b2a5 	.word	0x0800b2a5

			  case 0:
					//----一次探索スラローム走行----
					printf("First Run. (Slalom)\n");
 800af5c:	486f      	ldr	r0, [pc, #444]	; (800b11c <slalom_run+0x2b8>)
 800af5e:	f007 fb33 	bl	80125c8 <puts>

					MF.FLAG.SCND = 0;
 800af62:	4a6f      	ldr	r2, [pc, #444]	; (800b120 <slalom_run+0x2bc>)
 800af64:	8813      	ldrh	r3, [r2, #0]
 800af66:	f36f 1345 	bfc	r3, #5, #1
 800af6a:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 0;
 800af6c:	4a6c      	ldr	r2, [pc, #432]	; (800b120 <slalom_run+0x2bc>)
 800af6e:	8813      	ldrh	r3, [r2, #0]
 800af70:	f36f 2349 	bfc	r3, #9, #1
 800af74:	8013      	strh	r3, [r2, #0]
					run_mode = LOW;
 800af76:	4b6b      	ldr	r3, [pc, #428]	; (800b124 <slalom_run+0x2c0>)
 800af78:	2201      	movs	r2, #1
 800af7a:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800af7c:	4b6a      	ldr	r3, [pc, #424]	; (800b128 <slalom_run+0x2c4>)
 800af7e:	2200      	movs	r2, #0
 800af80:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 800af82:	4b6a      	ldr	r3, [pc, #424]	; (800b12c <slalom_run+0x2c8>)
 800af84:	f241 3288 	movw	r2, #5000	; 0x1388
 800af88:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 800;
 800af8a:	4b69      	ldr	r3, [pc, #420]	; (800b130 <slalom_run+0x2cc>)
 800af8c:	f44f 7248 	mov.w	r2, #800	; 0x320
 800af90:	801a      	strh	r2, [r3, #0]


					goal_x = GOAL_X;
 800af92:	4b68      	ldr	r3, [pc, #416]	; (800b134 <slalom_run+0x2d0>)
 800af94:	2207      	movs	r2, #7
 800af96:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800af98:	4b67      	ldr	r3, [pc, #412]	; (800b138 <slalom_run+0x2d4>)
 800af9a:	2206      	movs	r2, #6
 800af9c:	701a      	strb	r2, [r3, #0]

					get_base();
 800af9e:	f006 fc79 	bl	8011894 <get_base>

					searchC();
 800afa2:	f003 fca1 	bl	800e8e8 <searchC>
					HAL_Delay(2000);
 800afa6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800afaa:	f7f6 f837 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800afae:	4b62      	ldr	r3, [pc, #392]	; (800b138 <slalom_run+0x2d4>)
 800afb0:	2200      	movs	r2, #0
 800afb2:	701a      	strb	r2, [r3, #0]
 800afb4:	4b60      	ldr	r3, [pc, #384]	; (800b138 <slalom_run+0x2d4>)
 800afb6:	781a      	ldrb	r2, [r3, #0]
 800afb8:	4b5e      	ldr	r3, [pc, #376]	; (800b134 <slalom_run+0x2d0>)
 800afba:	701a      	strb	r2, [r3, #0]
					searchC();
 800afbc:	f003 fc94 	bl	800e8e8 <searchC>

					goal_x = GOAL_X;
 800afc0:	4b5c      	ldr	r3, [pc, #368]	; (800b134 <slalom_run+0x2d0>)
 800afc2:	2207      	movs	r2, #7
 800afc4:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800afc6:	4b5c      	ldr	r3, [pc, #368]	; (800b138 <slalom_run+0x2d4>)
 800afc8:	2206      	movs	r2, #6
 800afca:	701a      	strb	r2, [r3, #0]
					break;
 800afcc:	e1ac      	b.n	800b328 <slalom_run+0x4c4>

				case 1:
					//----二次探索スラローム走行----
					printf("Second Run. (Slalom)\n");
 800afce:	485b      	ldr	r0, [pc, #364]	; (800b13c <slalom_run+0x2d8>)
 800afd0:	f007 fafa 	bl	80125c8 <puts>

					MF.FLAG.SCND = 1;
 800afd4:	4a52      	ldr	r2, [pc, #328]	; (800b120 <slalom_run+0x2bc>)
 800afd6:	8813      	ldrh	r3, [r2, #0]
 800afd8:	f043 0320 	orr.w	r3, r3, #32
 800afdc:	8013      	strh	r3, [r2, #0]
					run_mode = LOW;
 800afde:	4b51      	ldr	r3, [pc, #324]	; (800b124 <slalom_run+0x2c0>)
 800afe0:	2201      	movs	r2, #1
 800afe2:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800afe4:	4b50      	ldr	r3, [pc, #320]	; (800b128 <slalom_run+0x2c4>)
 800afe6:	2200      	movs	r2, #0
 800afe8:	701a      	strb	r2, [r3, #0]
					goal_x = GOAL_X;
 800afea:	4b52      	ldr	r3, [pc, #328]	; (800b134 <slalom_run+0x2d0>)
 800afec:	2207      	movs	r2, #7
 800afee:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800aff0:	4b51      	ldr	r3, [pc, #324]	; (800b138 <slalom_run+0x2d4>)
 800aff2:	2206      	movs	r2, #6
 800aff4:	701a      	strb	r2, [r3, #0]

					get_base();
 800aff6:	f006 fc4d 	bl	8011894 <get_base>

					searchC();
 800affa:	f003 fc75 	bl	800e8e8 <searchC>
					HAL_Delay(2000);
 800affe:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800b002:	f7f6 f80b 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800b006:	4b4c      	ldr	r3, [pc, #304]	; (800b138 <slalom_run+0x2d4>)
 800b008:	2200      	movs	r2, #0
 800b00a:	701a      	strb	r2, [r3, #0]
 800b00c:	4b4a      	ldr	r3, [pc, #296]	; (800b138 <slalom_run+0x2d4>)
 800b00e:	781a      	ldrb	r2, [r3, #0]
 800b010:	4b48      	ldr	r3, [pc, #288]	; (800b134 <slalom_run+0x2d0>)
 800b012:	701a      	strb	r2, [r3, #0]
					searchC();
 800b014:	f003 fc68 	bl	800e8e8 <searchC>

					goal_x = GOAL_X;
 800b018:	4b46      	ldr	r3, [pc, #280]	; (800b134 <slalom_run+0x2d0>)
 800b01a:	2207      	movs	r2, #7
 800b01c:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800b01e:	4b46      	ldr	r3, [pc, #280]	; (800b138 <slalom_run+0x2d4>)
 800b020:	2206      	movs	r2, #6
 800b022:	701a      	strb	r2, [r3, #0]
					break;
 800b024:	e180      	b.n	800b328 <slalom_run+0x4c4>

				case 2:
					//----二次探索スラローム走行+既知区間加速----
					printf("Second Run. (Slalom+accel)\n");
 800b026:	4846      	ldr	r0, [pc, #280]	; (800b140 <slalom_run+0x2dc>)
 800b028:	f007 face 	bl	80125c8 <puts>

					MF.FLAG.SCND = 1;
 800b02c:	4a3c      	ldr	r2, [pc, #240]	; (800b120 <slalom_run+0x2bc>)
 800b02e:	8813      	ldrh	r3, [r2, #0]
 800b030:	f043 0320 	orr.w	r3, r3, #32
 800b034:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800b036:	4a3a      	ldr	r2, [pc, #232]	; (800b120 <slalom_run+0x2bc>)
 800b038:	8813      	ldrh	r3, [r2, #0]
 800b03a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b03e:	8013      	strh	r3, [r2, #0]
					run_mode = LOW;
 800b040:	4b38      	ldr	r3, [pc, #224]	; (800b124 <slalom_run+0x2c0>)
 800b042:	2201      	movs	r2, #1
 800b044:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800b046:	4b38      	ldr	r3, [pc, #224]	; (800b128 <slalom_run+0x2c4>)
 800b048:	2200      	movs	r2, #0
 800b04a:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 800b04c:	4b37      	ldr	r3, [pc, #220]	; (800b12c <slalom_run+0x2c8>)
 800b04e:	f241 3288 	movw	r2, #5000	; 0x1388
 800b052:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 600;
 800b054:	4b36      	ldr	r3, [pc, #216]	; (800b130 <slalom_run+0x2cc>)
 800b056:	f44f 7216 	mov.w	r2, #600	; 0x258
 800b05a:	801a      	strh	r2, [r3, #0]
					goal_x = GOAL_X;
 800b05c:	4b35      	ldr	r3, [pc, #212]	; (800b134 <slalom_run+0x2d0>)
 800b05e:	2207      	movs	r2, #7
 800b060:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800b062:	4b35      	ldr	r3, [pc, #212]	; (800b138 <slalom_run+0x2d4>)
 800b064:	2206      	movs	r2, #6
 800b066:	701a      	strb	r2, [r3, #0]

					get_base();
 800b068:	f006 fc14 	bl	8011894 <get_base>

					searchD();
 800b06c:	f003 ff20 	bl	800eeb0 <searchD>
					HAL_Delay(2000);
 800b070:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800b074:	f7f5 ffd2 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800b078:	4b2f      	ldr	r3, [pc, #188]	; (800b138 <slalom_run+0x2d4>)
 800b07a:	2200      	movs	r2, #0
 800b07c:	701a      	strb	r2, [r3, #0]
 800b07e:	4b2e      	ldr	r3, [pc, #184]	; (800b138 <slalom_run+0x2d4>)
 800b080:	781a      	ldrb	r2, [r3, #0]
 800b082:	4b2c      	ldr	r3, [pc, #176]	; (800b134 <slalom_run+0x2d0>)
 800b084:	701a      	strb	r2, [r3, #0]
					searchD();
 800b086:	f003 ff13 	bl	800eeb0 <searchD>

					goal_x = GOAL_X;
 800b08a:	4b2a      	ldr	r3, [pc, #168]	; (800b134 <slalom_run+0x2d0>)
 800b08c:	2207      	movs	r2, #7
 800b08e:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800b090:	4b29      	ldr	r3, [pc, #164]	; (800b138 <slalom_run+0x2d4>)
 800b092:	2206      	movs	r2, #6
 800b094:	701a      	strb	r2, [r3, #0]
					break;
 800b096:	e147      	b.n	800b328 <slalom_run+0x4c4>

				case 3:
					//----二次探索スラローム走行+既知区間加速----
					printf("Second Run. (Slalom+accel)\n");
 800b098:	4829      	ldr	r0, [pc, #164]	; (800b140 <slalom_run+0x2dc>)
 800b09a:	f007 fa95 	bl	80125c8 <puts>

					MF.FLAG.SCND = 1;
 800b09e:	4a20      	ldr	r2, [pc, #128]	; (800b120 <slalom_run+0x2bc>)
 800b0a0:	8813      	ldrh	r3, [r2, #0]
 800b0a2:	f043 0320 	orr.w	r3, r3, #32
 800b0a6:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800b0a8:	4a1d      	ldr	r2, [pc, #116]	; (800b120 <slalom_run+0x2bc>)
 800b0aa:	8813      	ldrh	r3, [r2, #0]
 800b0ac:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b0b0:	8013      	strh	r3, [r2, #0]
					run_mode = LOW;
 800b0b2:	4b1c      	ldr	r3, [pc, #112]	; (800b124 <slalom_run+0x2c0>)
 800b0b4:	2201      	movs	r2, #1
 800b0b6:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800b0b8:	4b1b      	ldr	r3, [pc, #108]	; (800b128 <slalom_run+0x2c4>)
 800b0ba:	2200      	movs	r2, #0
 800b0bc:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 800b0be:	4b1b      	ldr	r3, [pc, #108]	; (800b12c <slalom_run+0x2c8>)
 800b0c0:	f241 3288 	movw	r2, #5000	; 0x1388
 800b0c4:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1000;
 800b0c6:	4b1a      	ldr	r3, [pc, #104]	; (800b130 <slalom_run+0x2cc>)
 800b0c8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800b0cc:	801a      	strh	r2, [r3, #0]
					goal_x = GOAL_X;
 800b0ce:	4b19      	ldr	r3, [pc, #100]	; (800b134 <slalom_run+0x2d0>)
 800b0d0:	2207      	movs	r2, #7
 800b0d2:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800b0d4:	4b18      	ldr	r3, [pc, #96]	; (800b138 <slalom_run+0x2d4>)
 800b0d6:	2206      	movs	r2, #6
 800b0d8:	701a      	strb	r2, [r3, #0]

					get_base();
 800b0da:	f006 fbdb 	bl	8011894 <get_base>

					searchD();
 800b0de:	f003 fee7 	bl	800eeb0 <searchD>
					HAL_Delay(2000);
 800b0e2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800b0e6:	f7f5 ff99 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800b0ea:	4b13      	ldr	r3, [pc, #76]	; (800b138 <slalom_run+0x2d4>)
 800b0ec:	2200      	movs	r2, #0
 800b0ee:	701a      	strb	r2, [r3, #0]
 800b0f0:	4b11      	ldr	r3, [pc, #68]	; (800b138 <slalom_run+0x2d4>)
 800b0f2:	781a      	ldrb	r2, [r3, #0]
 800b0f4:	4b0f      	ldr	r3, [pc, #60]	; (800b134 <slalom_run+0x2d0>)
 800b0f6:	701a      	strb	r2, [r3, #0]
					searchD();
 800b0f8:	f003 feda 	bl	800eeb0 <searchD>

					goal_x = GOAL_X;
 800b0fc:	4b0d      	ldr	r3, [pc, #52]	; (800b134 <slalom_run+0x2d0>)
 800b0fe:	2207      	movs	r2, #7
 800b100:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800b102:	4b0d      	ldr	r3, [pc, #52]	; (800b138 <slalom_run+0x2d4>)
 800b104:	2206      	movs	r2, #6
 800b106:	701a      	strb	r2, [r3, #0]
					break;
 800b108:	e10e      	b.n	800b328 <slalom_run+0x4c4>
 800b10a:	bf00      	nop
 800b10c:	08013a1c 	.word	0x08013a1c
 800b110:	20000aec 	.word	0x20000aec
 800b114:	0801371c 	.word	0x0801371c
 800b118:	40020000 	.word	0x40020000
 800b11c:	080138fc 	.word	0x080138fc
 800b120:	20000f68 	.word	0x20000f68
 800b124:	20000456 	.word	0x20000456
 800b128:	200015c8 	.word	0x200015c8
 800b12c:	20000454 	.word	0x20000454
 800b130:	20000f7c 	.word	0x20000f7c
 800b134:	20000bb0 	.word	0x20000bb0
 800b138:	20000b4c 	.word	0x20000b4c
 800b13c:	08013a34 	.word	0x08013a34
 800b140:	08013a4c 	.word	0x08013a4c

				case 4:
					//----二次探索スラローム走行+既知区間加速----
					printf("Second Run. (Slalom+accel)\n");
 800b144:	4879      	ldr	r0, [pc, #484]	; (800b32c <slalom_run+0x4c8>)
 800b146:	f007 fa3f 	bl	80125c8 <puts>

					MF.FLAG.SCND = 1;
 800b14a:	4a79      	ldr	r2, [pc, #484]	; (800b330 <slalom_run+0x4cc>)
 800b14c:	8813      	ldrh	r3, [r2, #0]
 800b14e:	f043 0320 	orr.w	r3, r3, #32
 800b152:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800b154:	4a76      	ldr	r2, [pc, #472]	; (800b330 <slalom_run+0x4cc>)
 800b156:	8813      	ldrh	r3, [r2, #0]
 800b158:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b15c:	8013      	strh	r3, [r2, #0]
					run_mode = LOW;
 800b15e:	4b75      	ldr	r3, [pc, #468]	; (800b334 <slalom_run+0x4d0>)
 800b160:	2201      	movs	r2, #1
 800b162:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800b164:	4b74      	ldr	r3, [pc, #464]	; (800b338 <slalom_run+0x4d4>)
 800b166:	2200      	movs	r2, #0
 800b168:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 800b16a:	4b74      	ldr	r3, [pc, #464]	; (800b33c <slalom_run+0x4d8>)
 800b16c:	f241 3288 	movw	r2, #5000	; 0x1388
 800b170:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1500;
 800b172:	4b73      	ldr	r3, [pc, #460]	; (800b340 <slalom_run+0x4dc>)
 800b174:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800b178:	801a      	strh	r2, [r3, #0]
					goal_x = GOAL_X;
 800b17a:	4b72      	ldr	r3, [pc, #456]	; (800b344 <slalom_run+0x4e0>)
 800b17c:	2207      	movs	r2, #7
 800b17e:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800b180:	4b71      	ldr	r3, [pc, #452]	; (800b348 <slalom_run+0x4e4>)
 800b182:	2206      	movs	r2, #6
 800b184:	701a      	strb	r2, [r3, #0]

					get_base();
 800b186:	f006 fb85 	bl	8011894 <get_base>

					searchD();
 800b18a:	f003 fe91 	bl	800eeb0 <searchD>
					HAL_Delay(2000);
 800b18e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800b192:	f7f5 ff43 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800b196:	4b6c      	ldr	r3, [pc, #432]	; (800b348 <slalom_run+0x4e4>)
 800b198:	2200      	movs	r2, #0
 800b19a:	701a      	strb	r2, [r3, #0]
 800b19c:	4b6a      	ldr	r3, [pc, #424]	; (800b348 <slalom_run+0x4e4>)
 800b19e:	781a      	ldrb	r2, [r3, #0]
 800b1a0:	4b68      	ldr	r3, [pc, #416]	; (800b344 <slalom_run+0x4e0>)
 800b1a2:	701a      	strb	r2, [r3, #0]
					searchD();
 800b1a4:	f003 fe84 	bl	800eeb0 <searchD>

					goal_x = GOAL_X;
 800b1a8:	4b66      	ldr	r3, [pc, #408]	; (800b344 <slalom_run+0x4e0>)
 800b1aa:	2207      	movs	r2, #7
 800b1ac:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800b1ae:	4b66      	ldr	r3, [pc, #408]	; (800b348 <slalom_run+0x4e4>)
 800b1b0:	2206      	movs	r2, #6
 800b1b2:	701a      	strb	r2, [r3, #0]
					break;
 800b1b4:	e0b8      	b.n	800b328 <slalom_run+0x4c4>

				case 5:
					//----二次走行スラローム+直線優先----
					printf("High Speed Run. (Slalom)\n");
 800b1b6:	4865      	ldr	r0, [pc, #404]	; (800b34c <slalom_run+0x4e8>)
 800b1b8:	f007 fa06 	bl	80125c8 <puts>

					MF.FLAG.SCND = 1;
 800b1bc:	4a5c      	ldr	r2, [pc, #368]	; (800b330 <slalom_run+0x4cc>)
 800b1be:	8813      	ldrh	r3, [r2, #0]
 800b1c0:	f043 0320 	orr.w	r3, r3, #32
 800b1c4:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800b1c6:	4a5a      	ldr	r2, [pc, #360]	; (800b330 <slalom_run+0x4cc>)
 800b1c8:	8813      	ldrh	r3, [r2, #0]
 800b1ca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800b1ce:	8013      	strh	r3, [r2, #0]
					run_mode = LOW;
 800b1d0:	4b58      	ldr	r3, [pc, #352]	; (800b334 <slalom_run+0x4d0>)
 800b1d2:	2201      	movs	r2, #1
 800b1d4:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800b1d6:	4b58      	ldr	r3, [pc, #352]	; (800b338 <slalom_run+0x4d4>)
 800b1d8:	2200      	movs	r2, #0
 800b1da:	701a      	strb	r2, [r3, #0]
					goal_x = GOAL_X;
 800b1dc:	4b59      	ldr	r3, [pc, #356]	; (800b344 <slalom_run+0x4e0>)
 800b1de:	2207      	movs	r2, #7
 800b1e0:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800b1e2:	4b59      	ldr	r3, [pc, #356]	; (800b348 <slalom_run+0x4e4>)
 800b1e4:	2206      	movs	r2, #6
 800b1e6:	701a      	strb	r2, [r3, #0]

					get_base();
 800b1e8:	f006 fb54 	bl	8011894 <get_base>

					HAL_Delay(5000);
 800b1ec:	f241 3088 	movw	r0, #5000	; 0x1388
 800b1f0:	f7f5 ff14 	bl	800101c <HAL_Delay>
					searchC();
 800b1f4:	f003 fb78 	bl	800e8e8 <searchC>
					HAL_Delay(2000);
 800b1f8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800b1fc:	f7f5 ff0e 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800b200:	4b51      	ldr	r3, [pc, #324]	; (800b348 <slalom_run+0x4e4>)
 800b202:	2200      	movs	r2, #0
 800b204:	701a      	strb	r2, [r3, #0]
 800b206:	4b50      	ldr	r3, [pc, #320]	; (800b348 <slalom_run+0x4e4>)
 800b208:	781a      	ldrb	r2, [r3, #0]
 800b20a:	4b4e      	ldr	r3, [pc, #312]	; (800b344 <slalom_run+0x4e0>)
 800b20c:	701a      	strb	r2, [r3, #0]
					searchC();
 800b20e:	f003 fb6b 	bl	800e8e8 <searchC>

					goal_x = GOAL_X;
 800b212:	4b4c      	ldr	r3, [pc, #304]	; (800b344 <slalom_run+0x4e0>)
 800b214:	2207      	movs	r2, #7
 800b216:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800b218:	4b4b      	ldr	r3, [pc, #300]	; (800b348 <slalom_run+0x4e4>)
 800b21a:	2206      	movs	r2, #6
 800b21c:	701a      	strb	r2, [r3, #0]
					break;
 800b21e:	e083      	b.n	800b328 <slalom_run+0x4c4>

				case 6:
					//----二次走行スラロームHigh Speed+直線優先+既知区間加速----
					printf("High Speed Run. (Slalom)\n");
 800b220:	484a      	ldr	r0, [pc, #296]	; (800b34c <slalom_run+0x4e8>)
 800b222:	f007 f9d1 	bl	80125c8 <puts>

					MF.FLAG.SCND = 1;
 800b226:	4a42      	ldr	r2, [pc, #264]	; (800b330 <slalom_run+0x4cc>)
 800b228:	8813      	ldrh	r3, [r2, #0]
 800b22a:	f043 0320 	orr.w	r3, r3, #32
 800b22e:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800b230:	4a3f      	ldr	r2, [pc, #252]	; (800b330 <slalom_run+0x4cc>)
 800b232:	8813      	ldrh	r3, [r2, #0]
 800b234:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800b238:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800b23a:	4a3d      	ldr	r2, [pc, #244]	; (800b330 <slalom_run+0x4cc>)
 800b23c:	8813      	ldrh	r3, [r2, #0]
 800b23e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b242:	8013      	strh	r3, [r2, #0]
					run_mode = HIGH;
 800b244:	4b3b      	ldr	r3, [pc, #236]	; (800b334 <slalom_run+0x4d0>)
 800b246:	2203      	movs	r2, #3
 800b248:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800b24a:	4b3b      	ldr	r3, [pc, #236]	; (800b338 <slalom_run+0x4d4>)
 800b24c:	2200      	movs	r2, #0
 800b24e:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 800b250:	4b3a      	ldr	r3, [pc, #232]	; (800b33c <slalom_run+0x4d8>)
 800b252:	f241 3288 	movw	r2, #5000	; 0x1388
 800b256:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1200;
 800b258:	4b39      	ldr	r3, [pc, #228]	; (800b340 <slalom_run+0x4dc>)
 800b25a:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 800b25e:	801a      	strh	r2, [r3, #0]
					goal_x = GOAL_X;
 800b260:	4b38      	ldr	r3, [pc, #224]	; (800b344 <slalom_run+0x4e0>)
 800b262:	2207      	movs	r2, #7
 800b264:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800b266:	4b38      	ldr	r3, [pc, #224]	; (800b348 <slalom_run+0x4e4>)
 800b268:	2206      	movs	r2, #6
 800b26a:	701a      	strb	r2, [r3, #0]

					get_base();
 800b26c:	f006 fb12 	bl	8011894 <get_base>

					HAL_Delay(5000);
 800b270:	f241 3088 	movw	r0, #5000	; 0x1388
 800b274:	f7f5 fed2 	bl	800101c <HAL_Delay>
					searchD();
 800b278:	f003 fe1a 	bl	800eeb0 <searchD>
					HAL_Delay(2000);
 800b27c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800b280:	f7f5 fecc 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800b284:	4b30      	ldr	r3, [pc, #192]	; (800b348 <slalom_run+0x4e4>)
 800b286:	2200      	movs	r2, #0
 800b288:	701a      	strb	r2, [r3, #0]
 800b28a:	4b2f      	ldr	r3, [pc, #188]	; (800b348 <slalom_run+0x4e4>)
 800b28c:	781a      	ldrb	r2, [r3, #0]
 800b28e:	4b2d      	ldr	r3, [pc, #180]	; (800b344 <slalom_run+0x4e0>)
 800b290:	701a      	strb	r2, [r3, #0]
					searchD();
 800b292:	f003 fe0d 	bl	800eeb0 <searchD>

					goal_x = GOAL_X;
 800b296:	4b2b      	ldr	r3, [pc, #172]	; (800b344 <slalom_run+0x4e0>)
 800b298:	2207      	movs	r2, #7
 800b29a:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800b29c:	4b2a      	ldr	r3, [pc, #168]	; (800b348 <slalom_run+0x4e4>)
 800b29e:	2206      	movs	r2, #6
 800b2a0:	701a      	strb	r2, [r3, #0]
					break;
 800b2a2:	e041      	b.n	800b328 <slalom_run+0x4c4>

				case 7:
					//----二次走行スラロームHigh Speed+直線優先+既知区間加速----
					printf("High Speed Run. (Slalom)\n");
 800b2a4:	4829      	ldr	r0, [pc, #164]	; (800b34c <slalom_run+0x4e8>)
 800b2a6:	f007 f98f 	bl	80125c8 <puts>

					MF.FLAG.SCND = 1;
 800b2aa:	4a21      	ldr	r2, [pc, #132]	; (800b330 <slalom_run+0x4cc>)
 800b2ac:	8813      	ldrh	r3, [r2, #0]
 800b2ae:	f043 0320 	orr.w	r3, r3, #32
 800b2b2:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800b2b4:	4a1e      	ldr	r2, [pc, #120]	; (800b330 <slalom_run+0x4cc>)
 800b2b6:	8813      	ldrh	r3, [r2, #0]
 800b2b8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800b2bc:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800b2be:	4a1c      	ldr	r2, [pc, #112]	; (800b330 <slalom_run+0x4cc>)
 800b2c0:	8813      	ldrh	r3, [r2, #0]
 800b2c2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b2c6:	8013      	strh	r3, [r2, #0]
					run_mode = HIGH;
 800b2c8:	4b1a      	ldr	r3, [pc, #104]	; (800b334 <slalom_run+0x4d0>)
 800b2ca:	2203      	movs	r2, #3
 800b2cc:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800b2ce:	4b1a      	ldr	r3, [pc, #104]	; (800b338 <slalom_run+0x4d4>)
 800b2d0:	2200      	movs	r2, #0
 800b2d2:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 800b2d4:	4b19      	ldr	r3, [pc, #100]	; (800b33c <slalom_run+0x4d8>)
 800b2d6:	f241 3288 	movw	r2, #5000	; 0x1388
 800b2da:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1600;
 800b2dc:	4b18      	ldr	r3, [pc, #96]	; (800b340 <slalom_run+0x4dc>)
 800b2de:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800b2e2:	801a      	strh	r2, [r3, #0]
					goal_x = GOAL_X;
 800b2e4:	4b17      	ldr	r3, [pc, #92]	; (800b344 <slalom_run+0x4e0>)
 800b2e6:	2207      	movs	r2, #7
 800b2e8:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800b2ea:	4b17      	ldr	r3, [pc, #92]	; (800b348 <slalom_run+0x4e4>)
 800b2ec:	2206      	movs	r2, #6
 800b2ee:	701a      	strb	r2, [r3, #0]

					get_base();
 800b2f0:	f006 fad0 	bl	8011894 <get_base>

					HAL_Delay(5000);
 800b2f4:	f241 3088 	movw	r0, #5000	; 0x1388
 800b2f8:	f7f5 fe90 	bl	800101c <HAL_Delay>
					searchD();
 800b2fc:	f003 fdd8 	bl	800eeb0 <searchD>
					HAL_Delay(2000);
 800b300:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800b304:	f7f5 fe8a 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800b308:	4b0f      	ldr	r3, [pc, #60]	; (800b348 <slalom_run+0x4e4>)
 800b30a:	2200      	movs	r2, #0
 800b30c:	701a      	strb	r2, [r3, #0]
 800b30e:	4b0e      	ldr	r3, [pc, #56]	; (800b348 <slalom_run+0x4e4>)
 800b310:	781a      	ldrb	r2, [r3, #0]
 800b312:	4b0c      	ldr	r3, [pc, #48]	; (800b344 <slalom_run+0x4e0>)
 800b314:	701a      	strb	r2, [r3, #0]
					searchD();
 800b316:	f003 fdcb 	bl	800eeb0 <searchD>

					goal_x = GOAL_X;
 800b31a:	4b0a      	ldr	r3, [pc, #40]	; (800b344 <slalom_run+0x4e0>)
 800b31c:	2207      	movs	r2, #7
 800b31e:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800b320:	4b09      	ldr	r3, [pc, #36]	; (800b348 <slalom_run+0x4e4>)
 800b322:	2206      	movs	r2, #6
 800b324:	701a      	strb	r2, [r3, #0]
					break;
 800b326:	bf00      	nop
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 800b328:	e5a5      	b.n	800ae76 <slalom_run+0x12>
 800b32a:	bf00      	nop
 800b32c:	08013a4c 	.word	0x08013a4c
 800b330:	20000f68 	.word	0x20000f68
 800b334:	20000456 	.word	0x20000456
 800b338:	200015c8 	.word	0x200015c8
 800b33c:	20000454 	.word	0x20000454
 800b340:	20000f7c 	.word	0x20000f7c
 800b344:	20000bb0 	.word	0x20000bb0
 800b348:	20000b4c 	.word	0x20000b4c
 800b34c:	08013a68 	.word	0x08013a68

0800b350 <perfect_slalom>:
//perfect_slalom
// 本番用スラローム走行モード
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void perfect_slalom(void){
 800b350:	b580      	push	{r7, lr}
 800b352:	b082      	sub	sp, #8
 800b354:	af00      	add	r7, sp, #0

	int mode = 0;
 800b356:	2300      	movs	r3, #0
 800b358:	607b      	str	r3, [r7, #4]
	printf("Perfect Slalom, Mode : %d\n", mode);
 800b35a:	6879      	ldr	r1, [r7, #4]
 800b35c:	4898      	ldr	r0, [pc, #608]	; (800b5c0 <perfect_slalom+0x270>)
 800b35e:	f007 f8bf 	bl	80124e0 <iprintf>

	while(1){
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	b2db      	uxtb	r3, r3
 800b366:	f003 0301 	and.w	r3, r3, #1
 800b36a:	b2d8      	uxtb	r0, r3
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	b2db      	uxtb	r3, r3
 800b370:	f003 0302 	and.w	r3, r3, #2
 800b374:	b2d9      	uxtb	r1, r3
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	b2db      	uxtb	r3, r3
 800b37a:	f003 0304 	and.w	r3, r3, #4
 800b37e:	b2db      	uxtb	r3, r3
 800b380:	461a      	mov	r2, r3
 800b382:	f006 fadf 	bl	8011944 <led_write>
		  if(dist_r >= 20){
 800b386:	4b8f      	ldr	r3, [pc, #572]	; (800b5c4 <perfect_slalom+0x274>)
 800b388:	edd3 7a00 	vldr	s15, [r3]
 800b38c:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 800b390:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b394:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b398:	db0f      	blt.n	800b3ba <perfect_slalom+0x6a>
			  mode++;
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	3301      	adds	r3, #1
 800b39e:	607b      	str	r3, [r7, #4]
			  dist_r = 0;
 800b3a0:	4b88      	ldr	r3, [pc, #544]	; (800b5c4 <perfect_slalom+0x274>)
 800b3a2:	f04f 0200 	mov.w	r2, #0
 800b3a6:	601a      	str	r2, [r3, #0]
			  if(mode > 7){
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	2b07      	cmp	r3, #7
 800b3ac:	dd01      	ble.n	800b3b2 <perfect_slalom+0x62>
				  mode = 0;
 800b3ae:	2300      	movs	r3, #0
 800b3b0:	607b      	str	r3, [r7, #4]
			  }
			  printf("Mode : %d\n", mode);
 800b3b2:	6879      	ldr	r1, [r7, #4]
 800b3b4:	4884      	ldr	r0, [pc, #528]	; (800b5c8 <perfect_slalom+0x278>)
 800b3b6:	f007 f893 	bl	80124e0 <iprintf>
		  }
		  if(dist_r <= -20){
 800b3ba:	4b82      	ldr	r3, [pc, #520]	; (800b5c4 <perfect_slalom+0x274>)
 800b3bc:	edd3 7a00 	vldr	s15, [r3]
 800b3c0:	eebb 7a04 	vmov.f32	s14, #180	; 0xc1a00000 -20.0
 800b3c4:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b3c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b3cc:	d80f      	bhi.n	800b3ee <perfect_slalom+0x9e>
			  mode--;
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	3b01      	subs	r3, #1
 800b3d2:	607b      	str	r3, [r7, #4]
			  dist_r = 0;
 800b3d4:	4b7b      	ldr	r3, [pc, #492]	; (800b5c4 <perfect_slalom+0x274>)
 800b3d6:	f04f 0200 	mov.w	r2, #0
 800b3da:	601a      	str	r2, [r3, #0]
			  if(mode < 0){
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	2b00      	cmp	r3, #0
 800b3e0:	da01      	bge.n	800b3e6 <perfect_slalom+0x96>
				  mode = 7;
 800b3e2:	2307      	movs	r3, #7
 800b3e4:	607b      	str	r3, [r7, #4]
			  }
			  printf("Mode : %d\n", mode);
 800b3e6:	6879      	ldr	r1, [r7, #4]
 800b3e8:	4877      	ldr	r0, [pc, #476]	; (800b5c8 <perfect_slalom+0x278>)
 800b3ea:	f007 f879 	bl	80124e0 <iprintf>
		  }
		  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET){
 800b3ee:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800b3f2:	4876      	ldr	r0, [pc, #472]	; (800b5cc <perfect_slalom+0x27c>)
 800b3f4:	f7f6 ff6e 	bl	80022d4 <HAL_GPIO_ReadPin>
 800b3f8:	4603      	mov	r3, r0
 800b3fa:	2b00      	cmp	r3, #0
 800b3fc:	d1b1      	bne.n	800b362 <perfect_slalom+0x12>
			  HAL_Delay(50);
 800b3fe:	2032      	movs	r0, #50	; 0x32
 800b400:	f7f5 fe0c 	bl	800101c <HAL_Delay>
			  while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET);
 800b404:	bf00      	nop
 800b406:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800b40a:	4870      	ldr	r0, [pc, #448]	; (800b5cc <perfect_slalom+0x27c>)
 800b40c:	f7f6 ff62 	bl	80022d4 <HAL_GPIO_ReadPin>
 800b410:	4603      	mov	r3, r0
 800b412:	2b00      	cmp	r3, #0
 800b414:	d0f7      	beq.n	800b406 <perfect_slalom+0xb6>
			  drive_ready();
 800b416:	f7f9 fc33 	bl	8004c80 <drive_ready>

			  switch(mode){
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	2b07      	cmp	r3, #7
 800b41e:	d8a0      	bhi.n	800b362 <perfect_slalom+0x12>
 800b420:	a201      	add	r2, pc, #4	; (adr r2, 800b428 <perfect_slalom+0xd8>)
 800b422:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b426:	bf00      	nop
 800b428:	0800b363 	.word	0x0800b363
 800b42c:	0800b449 	.word	0x0800b449
 800b430:	0800b4cb 	.word	0x0800b4cb
 800b434:	0800b54d 	.word	0x0800b54d
 800b438:	0800b5fd 	.word	0x0800b5fd
 800b43c:	0800b67f 	.word	0x0800b67f
 800b440:	0800b701 	.word	0x0800b701
 800b444:	0800b783 	.word	0x0800b783
				case 0:
					break;

				case 1:
					//----a一次探索スラローム走行----
					printf("First Run.\n");
 800b448:	4861      	ldr	r0, [pc, #388]	; (800b5d0 <perfect_slalom+0x280>)
 800b44a:	f007 f8bd 	bl	80125c8 <puts>
					MF.FLAG.SCND = 0;
 800b44e:	4a61      	ldr	r2, [pc, #388]	; (800b5d4 <perfect_slalom+0x284>)
 800b450:	8813      	ldrh	r3, [r2, #0]
 800b452:	f36f 1345 	bfc	r3, #5, #1
 800b456:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800b458:	4a5e      	ldr	r2, [pc, #376]	; (800b5d4 <perfect_slalom+0x284>)
 800b45a:	8813      	ldrh	r3, [r2, #0]
 800b45c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b460:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 0;
 800b462:	4a5c      	ldr	r2, [pc, #368]	; (800b5d4 <perfect_slalom+0x284>)
 800b464:	8813      	ldrh	r3, [r2, #0]
 800b466:	f36f 238a 	bfc	r3, #10, #1
 800b46a:	8013      	strh	r3, [r2, #0]
					run_mode = MIDDLE;
 800b46c:	4b5a      	ldr	r3, [pc, #360]	; (800b5d8 <perfect_slalom+0x288>)
 800b46e:	2202      	movs	r2, #2
 800b470:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800b472:	4b5a      	ldr	r3, [pc, #360]	; (800b5dc <perfect_slalom+0x28c>)
 800b474:	2200      	movs	r2, #0
 800b476:	701a      	strb	r2, [r3, #0]
					goal_mode = 2;
 800b478:	4b59      	ldr	r3, [pc, #356]	; (800b5e0 <perfect_slalom+0x290>)
 800b47a:	2202      	movs	r2, #2
 800b47c:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 800b47e:	4b59      	ldr	r3, [pc, #356]	; (800b5e4 <perfect_slalom+0x294>)
 800b480:	f241 3288 	movw	r2, #5000	; 0x1388
 800b484:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1200;
 800b486:	4b58      	ldr	r3, [pc, #352]	; (800b5e8 <perfect_slalom+0x298>)
 800b488:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 800b48c:	801a      	strh	r2, [r3, #0]

					goal_x = 7;
 800b48e:	4b57      	ldr	r3, [pc, #348]	; (800b5ec <perfect_slalom+0x29c>)
 800b490:	2207      	movs	r2, #7
 800b492:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800b494:	4b56      	ldr	r3, [pc, #344]	; (800b5f0 <perfect_slalom+0x2a0>)
 800b496:	2207      	movs	r2, #7
 800b498:	701a      	strb	r2, [r3, #0]

					get_base();
 800b49a:	f006 f9fb 	bl	8011894 <get_base>

					searchC();
 800b49e:	f003 fa23 	bl	800e8e8 <searchC>
					HAL_Delay(2000);
 800b4a2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800b4a6:	f7f5 fdb9 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800b4aa:	4b51      	ldr	r3, [pc, #324]	; (800b5f0 <perfect_slalom+0x2a0>)
 800b4ac:	2200      	movs	r2, #0
 800b4ae:	701a      	strb	r2, [r3, #0]
 800b4b0:	4b4f      	ldr	r3, [pc, #316]	; (800b5f0 <perfect_slalom+0x2a0>)
 800b4b2:	781a      	ldrb	r2, [r3, #0]
 800b4b4:	4b4d      	ldr	r3, [pc, #308]	; (800b5ec <perfect_slalom+0x29c>)
 800b4b6:	701a      	strb	r2, [r3, #0]
					searchC();
 800b4b8:	f003 fa16 	bl	800e8e8 <searchC>

					goal_x = 7;
 800b4bc:	4b4b      	ldr	r3, [pc, #300]	; (800b5ec <perfect_slalom+0x29c>)
 800b4be:	2207      	movs	r2, #7
 800b4c0:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800b4c2:	4b4b      	ldr	r3, [pc, #300]	; (800b5f0 <perfect_slalom+0x2a0>)
 800b4c4:	2207      	movs	r2, #7
 800b4c6:	701a      	strb	r2, [r3, #0]
					break;
 800b4c8:	e15e      	b.n	800b788 <perfect_slalom+0x438>

				case 2:
					//----a二次走行スラローム+既知区間加速走行 speed1----
					printf("First Run. (Continuous)\n");
 800b4ca:	484a      	ldr	r0, [pc, #296]	; (800b5f4 <perfect_slalom+0x2a4>)
 800b4cc:	f007 f87c 	bl	80125c8 <puts>
					MF.FLAG.SCND = 1;
 800b4d0:	4a40      	ldr	r2, [pc, #256]	; (800b5d4 <perfect_slalom+0x284>)
 800b4d2:	8813      	ldrh	r3, [r2, #0]
 800b4d4:	f043 0320 	orr.w	r3, r3, #32
 800b4d8:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800b4da:	4a3e      	ldr	r2, [pc, #248]	; (800b5d4 <perfect_slalom+0x284>)
 800b4dc:	8813      	ldrh	r3, [r2, #0]
 800b4de:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b4e2:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800b4e4:	4a3b      	ldr	r2, [pc, #236]	; (800b5d4 <perfect_slalom+0x284>)
 800b4e6:	8813      	ldrh	r3, [r2, #0]
 800b4e8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800b4ec:	8013      	strh	r3, [r2, #0]
					run_mode = MIDDLE;
 800b4ee:	4b3a      	ldr	r3, [pc, #232]	; (800b5d8 <perfect_slalom+0x288>)
 800b4f0:	2202      	movs	r2, #2
 800b4f2:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800b4f4:	4b39      	ldr	r3, [pc, #228]	; (800b5dc <perfect_slalom+0x28c>)
 800b4f6:	2200      	movs	r2, #0
 800b4f8:	701a      	strb	r2, [r3, #0]
					goal_mode = 2;
 800b4fa:	4b39      	ldr	r3, [pc, #228]	; (800b5e0 <perfect_slalom+0x290>)
 800b4fc:	2202      	movs	r2, #2
 800b4fe:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 800b500:	4b38      	ldr	r3, [pc, #224]	; (800b5e4 <perfect_slalom+0x294>)
 800b502:	f241 3288 	movw	r2, #5000	; 0x1388
 800b506:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1200;
 800b508:	4b37      	ldr	r3, [pc, #220]	; (800b5e8 <perfect_slalom+0x298>)
 800b50a:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 800b50e:	801a      	strh	r2, [r3, #0]
					goal_x = 7;
 800b510:	4b36      	ldr	r3, [pc, #216]	; (800b5ec <perfect_slalom+0x29c>)
 800b512:	2207      	movs	r2, #7
 800b514:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800b516:	4b36      	ldr	r3, [pc, #216]	; (800b5f0 <perfect_slalom+0x2a0>)
 800b518:	2207      	movs	r2, #7
 800b51a:	701a      	strb	r2, [r3, #0]

					get_base();
 800b51c:	f006 f9ba 	bl	8011894 <get_base>

					searchD();
 800b520:	f003 fcc6 	bl	800eeb0 <searchD>
					HAL_Delay(2000);
 800b524:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800b528:	f7f5 fd78 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800b52c:	4b30      	ldr	r3, [pc, #192]	; (800b5f0 <perfect_slalom+0x2a0>)
 800b52e:	2200      	movs	r2, #0
 800b530:	701a      	strb	r2, [r3, #0]
 800b532:	4b2f      	ldr	r3, [pc, #188]	; (800b5f0 <perfect_slalom+0x2a0>)
 800b534:	781a      	ldrb	r2, [r3, #0]
 800b536:	4b2d      	ldr	r3, [pc, #180]	; (800b5ec <perfect_slalom+0x29c>)
 800b538:	701a      	strb	r2, [r3, #0]
					searchD();
 800b53a:	f003 fcb9 	bl	800eeb0 <searchD>

					goal_x = 7;
 800b53e:	4b2b      	ldr	r3, [pc, #172]	; (800b5ec <perfect_slalom+0x29c>)
 800b540:	2207      	movs	r2, #7
 800b542:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800b544:	4b2a      	ldr	r3, [pc, #168]	; (800b5f0 <perfect_slalom+0x2a0>)
 800b546:	2207      	movs	r2, #7
 800b548:	701a      	strb	r2, [r3, #0]
					break;
 800b54a:	e11d      	b.n	800b788 <perfect_slalom+0x438>

				case 3:
					//----a二次探索スラロームHigh Speed----
					printf("Second Run. (Slalom)\n");
 800b54c:	482a      	ldr	r0, [pc, #168]	; (800b5f8 <perfect_slalom+0x2a8>)
 800b54e:	f007 f83b 	bl	80125c8 <puts>
					MF.FLAG.SCND = 1;
 800b552:	4a20      	ldr	r2, [pc, #128]	; (800b5d4 <perfect_slalom+0x284>)
 800b554:	8813      	ldrh	r3, [r2, #0]
 800b556:	f043 0320 	orr.w	r3, r3, #32
 800b55a:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 0;
 800b55c:	4a1d      	ldr	r2, [pc, #116]	; (800b5d4 <perfect_slalom+0x284>)
 800b55e:	8813      	ldrh	r3, [r2, #0]
 800b560:	f36f 2349 	bfc	r3, #9, #1
 800b564:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800b566:	4a1b      	ldr	r2, [pc, #108]	; (800b5d4 <perfect_slalom+0x284>)
 800b568:	8813      	ldrh	r3, [r2, #0]
 800b56a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800b56e:	8013      	strh	r3, [r2, #0]
					run_mode = HIGH;
 800b570:	4b19      	ldr	r3, [pc, #100]	; (800b5d8 <perfect_slalom+0x288>)
 800b572:	2203      	movs	r2, #3
 800b574:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800b576:	4b19      	ldr	r3, [pc, #100]	; (800b5dc <perfect_slalom+0x28c>)
 800b578:	2200      	movs	r2, #0
 800b57a:	701a      	strb	r2, [r3, #0]
					goal_mode = 2;
 800b57c:	4b18      	ldr	r3, [pc, #96]	; (800b5e0 <perfect_slalom+0x290>)
 800b57e:	2202      	movs	r2, #2
 800b580:	701a      	strb	r2, [r3, #0]
					goal_x = 7;
 800b582:	4b1a      	ldr	r3, [pc, #104]	; (800b5ec <perfect_slalom+0x29c>)
 800b584:	2207      	movs	r2, #7
 800b586:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800b588:	4b19      	ldr	r3, [pc, #100]	; (800b5f0 <perfect_slalom+0x2a0>)
 800b58a:	2207      	movs	r2, #7
 800b58c:	701a      	strb	r2, [r3, #0]

					get_base();
 800b58e:	f006 f981 	bl	8011894 <get_base>

					searchC();
 800b592:	f003 f9a9 	bl	800e8e8 <searchC>
					HAL_Delay(2000);
 800b596:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800b59a:	f7f5 fd3f 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800b59e:	4b14      	ldr	r3, [pc, #80]	; (800b5f0 <perfect_slalom+0x2a0>)
 800b5a0:	2200      	movs	r2, #0
 800b5a2:	701a      	strb	r2, [r3, #0]
 800b5a4:	4b12      	ldr	r3, [pc, #72]	; (800b5f0 <perfect_slalom+0x2a0>)
 800b5a6:	781a      	ldrb	r2, [r3, #0]
 800b5a8:	4b10      	ldr	r3, [pc, #64]	; (800b5ec <perfect_slalom+0x29c>)
 800b5aa:	701a      	strb	r2, [r3, #0]
					searchC();
 800b5ac:	f003 f99c 	bl	800e8e8 <searchC>
					goal_x = 7;
 800b5b0:	4b0e      	ldr	r3, [pc, #56]	; (800b5ec <perfect_slalom+0x29c>)
 800b5b2:	2207      	movs	r2, #7
 800b5b4:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800b5b6:	4b0e      	ldr	r3, [pc, #56]	; (800b5f0 <perfect_slalom+0x2a0>)
 800b5b8:	2207      	movs	r2, #7
 800b5ba:	701a      	strb	r2, [r3, #0]
					break;
 800b5bc:	e0e4      	b.n	800b788 <perfect_slalom+0x438>
 800b5be:	bf00      	nop
 800b5c0:	08013a9c 	.word	0x08013a9c
 800b5c4:	20000aec 	.word	0x20000aec
 800b5c8:	0801371c 	.word	0x0801371c
 800b5cc:	40020000 	.word	0x40020000
 800b5d0:	080139dc 	.word	0x080139dc
 800b5d4:	20000f68 	.word	0x20000f68
 800b5d8:	20000456 	.word	0x20000456
 800b5dc:	200015c8 	.word	0x200015c8
 800b5e0:	20000bb1 	.word	0x20000bb1
 800b5e4:	20000454 	.word	0x20000454
 800b5e8:	20000f7c 	.word	0x20000f7c
 800b5ec:	20000bb0 	.word	0x20000bb0
 800b5f0:	20000b4c 	.word	0x20000b4c
 800b5f4:	080139e8 	.word	0x080139e8
 800b5f8:	08013a34 	.word	0x08013a34

				case 4:
					//----a二次探索スラロームHigh Speed + 既知区間加速----
					printf("Second Run. (Slalom)\n");
 800b5fc:	4863      	ldr	r0, [pc, #396]	; (800b78c <perfect_slalom+0x43c>)
 800b5fe:	f006 ffe3 	bl	80125c8 <puts>
					MF.FLAG.SCND = 1;
 800b602:	4a63      	ldr	r2, [pc, #396]	; (800b790 <perfect_slalom+0x440>)
 800b604:	8813      	ldrh	r3, [r2, #0]
 800b606:	f043 0320 	orr.w	r3, r3, #32
 800b60a:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800b60c:	4a60      	ldr	r2, [pc, #384]	; (800b790 <perfect_slalom+0x440>)
 800b60e:	8813      	ldrh	r3, [r2, #0]
 800b610:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b614:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800b616:	4a5e      	ldr	r2, [pc, #376]	; (800b790 <perfect_slalom+0x440>)
 800b618:	8813      	ldrh	r3, [r2, #0]
 800b61a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800b61e:	8013      	strh	r3, [r2, #0]
					run_mode = HIGH;
 800b620:	4b5c      	ldr	r3, [pc, #368]	; (800b794 <perfect_slalom+0x444>)
 800b622:	2203      	movs	r2, #3
 800b624:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800b626:	4b5c      	ldr	r3, [pc, #368]	; (800b798 <perfect_slalom+0x448>)
 800b628:	2200      	movs	r2, #0
 800b62a:	701a      	strb	r2, [r3, #0]
					goal_mode = 2;
 800b62c:	4b5b      	ldr	r3, [pc, #364]	; (800b79c <perfect_slalom+0x44c>)
 800b62e:	2202      	movs	r2, #2
 800b630:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 800b632:	4b5b      	ldr	r3, [pc, #364]	; (800b7a0 <perfect_slalom+0x450>)
 800b634:	f241 3288 	movw	r2, #5000	; 0x1388
 800b638:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1200;
 800b63a:	4b5a      	ldr	r3, [pc, #360]	; (800b7a4 <perfect_slalom+0x454>)
 800b63c:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 800b640:	801a      	strh	r2, [r3, #0]
					goal_x = 7;
 800b642:	4b59      	ldr	r3, [pc, #356]	; (800b7a8 <perfect_slalom+0x458>)
 800b644:	2207      	movs	r2, #7
 800b646:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800b648:	4b58      	ldr	r3, [pc, #352]	; (800b7ac <perfect_slalom+0x45c>)
 800b64a:	2207      	movs	r2, #7
 800b64c:	701a      	strb	r2, [r3, #0]

					get_base();
 800b64e:	f006 f921 	bl	8011894 <get_base>

					searchD();
 800b652:	f003 fc2d 	bl	800eeb0 <searchD>
					HAL_Delay(2000);
 800b656:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800b65a:	f7f5 fcdf 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800b65e:	4b53      	ldr	r3, [pc, #332]	; (800b7ac <perfect_slalom+0x45c>)
 800b660:	2200      	movs	r2, #0
 800b662:	701a      	strb	r2, [r3, #0]
 800b664:	4b51      	ldr	r3, [pc, #324]	; (800b7ac <perfect_slalom+0x45c>)
 800b666:	781a      	ldrb	r2, [r3, #0]
 800b668:	4b4f      	ldr	r3, [pc, #316]	; (800b7a8 <perfect_slalom+0x458>)
 800b66a:	701a      	strb	r2, [r3, #0]
					searchD();
 800b66c:	f003 fc20 	bl	800eeb0 <searchD>

					goal_x = 7;
 800b670:	4b4d      	ldr	r3, [pc, #308]	; (800b7a8 <perfect_slalom+0x458>)
 800b672:	2207      	movs	r2, #7
 800b674:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800b676:	4b4d      	ldr	r3, [pc, #308]	; (800b7ac <perfect_slalom+0x45c>)
 800b678:	2207      	movs	r2, #7
 800b67a:	701a      	strb	r2, [r3, #0]
					break;
 800b67c:	e084      	b.n	800b788 <perfect_slalom+0x438>

				case 5:
					//----a二次探索スラロームHigh Speed + 既知区間加速----
					printf("Second Run. (Slalom)\n");
 800b67e:	4843      	ldr	r0, [pc, #268]	; (800b78c <perfect_slalom+0x43c>)
 800b680:	f006 ffa2 	bl	80125c8 <puts>
					MF.FLAG.SCND = 1;
 800b684:	4a42      	ldr	r2, [pc, #264]	; (800b790 <perfect_slalom+0x440>)
 800b686:	8813      	ldrh	r3, [r2, #0]
 800b688:	f043 0320 	orr.w	r3, r3, #32
 800b68c:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800b68e:	4a40      	ldr	r2, [pc, #256]	; (800b790 <perfect_slalom+0x440>)
 800b690:	8813      	ldrh	r3, [r2, #0]
 800b692:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b696:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800b698:	4a3d      	ldr	r2, [pc, #244]	; (800b790 <perfect_slalom+0x440>)
 800b69a:	8813      	ldrh	r3, [r2, #0]
 800b69c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800b6a0:	8013      	strh	r3, [r2, #0]
					run_mode = HIGH;
 800b6a2:	4b3c      	ldr	r3, [pc, #240]	; (800b794 <perfect_slalom+0x444>)
 800b6a4:	2203      	movs	r2, #3
 800b6a6:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800b6a8:	4b3b      	ldr	r3, [pc, #236]	; (800b798 <perfect_slalom+0x448>)
 800b6aa:	2200      	movs	r2, #0
 800b6ac:	701a      	strb	r2, [r3, #0]
					goal_mode = 2;
 800b6ae:	4b3b      	ldr	r3, [pc, #236]	; (800b79c <perfect_slalom+0x44c>)
 800b6b0:	2202      	movs	r2, #2
 800b6b2:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 800b6b4:	4b3a      	ldr	r3, [pc, #232]	; (800b7a0 <perfect_slalom+0x450>)
 800b6b6:	f241 3288 	movw	r2, #5000	; 0x1388
 800b6ba:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1600;
 800b6bc:	4b39      	ldr	r3, [pc, #228]	; (800b7a4 <perfect_slalom+0x454>)
 800b6be:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800b6c2:	801a      	strh	r2, [r3, #0]
					goal_x = 7;
 800b6c4:	4b38      	ldr	r3, [pc, #224]	; (800b7a8 <perfect_slalom+0x458>)
 800b6c6:	2207      	movs	r2, #7
 800b6c8:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800b6ca:	4b38      	ldr	r3, [pc, #224]	; (800b7ac <perfect_slalom+0x45c>)
 800b6cc:	2207      	movs	r2, #7
 800b6ce:	701a      	strb	r2, [r3, #0]

					get_base();
 800b6d0:	f006 f8e0 	bl	8011894 <get_base>

					searchD();
 800b6d4:	f003 fbec 	bl	800eeb0 <searchD>
					HAL_Delay(2000);
 800b6d8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800b6dc:	f7f5 fc9e 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800b6e0:	4b32      	ldr	r3, [pc, #200]	; (800b7ac <perfect_slalom+0x45c>)
 800b6e2:	2200      	movs	r2, #0
 800b6e4:	701a      	strb	r2, [r3, #0]
 800b6e6:	4b31      	ldr	r3, [pc, #196]	; (800b7ac <perfect_slalom+0x45c>)
 800b6e8:	781a      	ldrb	r2, [r3, #0]
 800b6ea:	4b2f      	ldr	r3, [pc, #188]	; (800b7a8 <perfect_slalom+0x458>)
 800b6ec:	701a      	strb	r2, [r3, #0]
					searchD();
 800b6ee:	f003 fbdf 	bl	800eeb0 <searchD>

					goal_x = 7;
 800b6f2:	4b2d      	ldr	r3, [pc, #180]	; (800b7a8 <perfect_slalom+0x458>)
 800b6f4:	2207      	movs	r2, #7
 800b6f6:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800b6f8:	4b2c      	ldr	r3, [pc, #176]	; (800b7ac <perfect_slalom+0x45c>)
 800b6fa:	2207      	movs	r2, #7
 800b6fc:	701a      	strb	r2, [r3, #0]
					break;
 800b6fe:	e043      	b.n	800b788 <perfect_slalom+0x438>

				case 6:
					//----a二次探索スラロームHigh Speed + 既知区間加速----
					printf("Second Run. (Slalom)\n");
 800b700:	4822      	ldr	r0, [pc, #136]	; (800b78c <perfect_slalom+0x43c>)
 800b702:	f006 ff61 	bl	80125c8 <puts>
					MF.FLAG.SCND = 1;
 800b706:	4a22      	ldr	r2, [pc, #136]	; (800b790 <perfect_slalom+0x440>)
 800b708:	8813      	ldrh	r3, [r2, #0]
 800b70a:	f043 0320 	orr.w	r3, r3, #32
 800b70e:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800b710:	4a1f      	ldr	r2, [pc, #124]	; (800b790 <perfect_slalom+0x440>)
 800b712:	8813      	ldrh	r3, [r2, #0]
 800b714:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b718:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800b71a:	4a1d      	ldr	r2, [pc, #116]	; (800b790 <perfect_slalom+0x440>)
 800b71c:	8813      	ldrh	r3, [r2, #0]
 800b71e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800b722:	8013      	strh	r3, [r2, #0]
					run_mode = HIGH;
 800b724:	4b1b      	ldr	r3, [pc, #108]	; (800b794 <perfect_slalom+0x444>)
 800b726:	2203      	movs	r2, #3
 800b728:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800b72a:	4b1b      	ldr	r3, [pc, #108]	; (800b798 <perfect_slalom+0x448>)
 800b72c:	2200      	movs	r2, #0
 800b72e:	701a      	strb	r2, [r3, #0]
					goal_mode = 2;
 800b730:	4b1a      	ldr	r3, [pc, #104]	; (800b79c <perfect_slalom+0x44c>)
 800b732:	2202      	movs	r2, #2
 800b734:	701a      	strb	r2, [r3, #0]
					accel_hs = 10000;
 800b736:	4b1a      	ldr	r3, [pc, #104]	; (800b7a0 <perfect_slalom+0x450>)
 800b738:	f242 7210 	movw	r2, #10000	; 0x2710
 800b73c:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 2000;
 800b73e:	4b19      	ldr	r3, [pc, #100]	; (800b7a4 <perfect_slalom+0x454>)
 800b740:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800b744:	801a      	strh	r2, [r3, #0]
					goal_x = 7;
 800b746:	4b18      	ldr	r3, [pc, #96]	; (800b7a8 <perfect_slalom+0x458>)
 800b748:	2207      	movs	r2, #7
 800b74a:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800b74c:	4b17      	ldr	r3, [pc, #92]	; (800b7ac <perfect_slalom+0x45c>)
 800b74e:	2207      	movs	r2, #7
 800b750:	701a      	strb	r2, [r3, #0]

					get_base();
 800b752:	f006 f89f 	bl	8011894 <get_base>

					searchD();
 800b756:	f003 fbab 	bl	800eeb0 <searchD>
					HAL_Delay(2000);
 800b75a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800b75e:	f7f5 fc5d 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800b762:	4b12      	ldr	r3, [pc, #72]	; (800b7ac <perfect_slalom+0x45c>)
 800b764:	2200      	movs	r2, #0
 800b766:	701a      	strb	r2, [r3, #0]
 800b768:	4b10      	ldr	r3, [pc, #64]	; (800b7ac <perfect_slalom+0x45c>)
 800b76a:	781a      	ldrb	r2, [r3, #0]
 800b76c:	4b0e      	ldr	r3, [pc, #56]	; (800b7a8 <perfect_slalom+0x458>)
 800b76e:	701a      	strb	r2, [r3, #0]
					searchD();
 800b770:	f003 fb9e 	bl	800eeb0 <searchD>

					goal_x = 7;
 800b774:	4b0c      	ldr	r3, [pc, #48]	; (800b7a8 <perfect_slalom+0x458>)
 800b776:	2207      	movs	r2, #7
 800b778:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800b77a:	4b0c      	ldr	r3, [pc, #48]	; (800b7ac <perfect_slalom+0x45c>)
 800b77c:	2207      	movs	r2, #7
 800b77e:	701a      	strb	r2, [r3, #0]
					break;
 800b780:	e002      	b.n	800b788 <perfect_slalom+0x438>

				case 7:
					perfect_pass();
 800b782:	f000 f815 	bl	800b7b0 <perfect_pass>
					break;
 800b786:	bf00      	nop
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 800b788:	e5eb      	b.n	800b362 <perfect_slalom+0x12>
 800b78a:	bf00      	nop
 800b78c:	08013a34 	.word	0x08013a34
 800b790:	20000f68 	.word	0x20000f68
 800b794:	20000456 	.word	0x20000456
 800b798:	200015c8 	.word	0x200015c8
 800b79c:	20000bb1 	.word	0x20000bb1
 800b7a0:	20000454 	.word	0x20000454
 800b7a4:	20000f7c 	.word	0x20000f7c
 800b7a8:	20000bb0 	.word	0x20000bb0
 800b7ac:	20000b4c 	.word	0x20000b4c

0800b7b0 <perfect_pass>:
//perfect_pass
// a本番用pass圧縮走行モード
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void perfect_pass(void){
 800b7b0:	b580      	push	{r7, lr}
 800b7b2:	b082      	sub	sp, #8
 800b7b4:	af00      	add	r7, sp, #0

	int mode = 0;
 800b7b6:	2300      	movs	r3, #0
 800b7b8:	607b      	str	r3, [r7, #4]
	printf("Perfect Pass Press, Mode : %d\n", mode);
 800b7ba:	6879      	ldr	r1, [r7, #4]
 800b7bc:	489f      	ldr	r0, [pc, #636]	; (800ba3c <perfect_pass+0x28c>)
 800b7be:	f006 fe8f 	bl	80124e0 <iprintf>

	while(1){
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	b2db      	uxtb	r3, r3
 800b7c6:	f003 0301 	and.w	r3, r3, #1
 800b7ca:	b2d8      	uxtb	r0, r3
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	b2db      	uxtb	r3, r3
 800b7d0:	f003 0302 	and.w	r3, r3, #2
 800b7d4:	b2d9      	uxtb	r1, r3
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	b2db      	uxtb	r3, r3
 800b7da:	f003 0304 	and.w	r3, r3, #4
 800b7de:	b2db      	uxtb	r3, r3
 800b7e0:	461a      	mov	r2, r3
 800b7e2:	f006 f8af 	bl	8011944 <led_write>
		  if(dist_r >= 20){
 800b7e6:	4b96      	ldr	r3, [pc, #600]	; (800ba40 <perfect_pass+0x290>)
 800b7e8:	edd3 7a00 	vldr	s15, [r3]
 800b7ec:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 800b7f0:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b7f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b7f8:	db0f      	blt.n	800b81a <perfect_pass+0x6a>
			  mode++;
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	3301      	adds	r3, #1
 800b7fe:	607b      	str	r3, [r7, #4]
			  dist_r = 0;
 800b800:	4b8f      	ldr	r3, [pc, #572]	; (800ba40 <perfect_pass+0x290>)
 800b802:	f04f 0200 	mov.w	r2, #0
 800b806:	601a      	str	r2, [r3, #0]
			  if(mode > 7){
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	2b07      	cmp	r3, #7
 800b80c:	dd01      	ble.n	800b812 <perfect_pass+0x62>
				  mode = 0;
 800b80e:	2300      	movs	r3, #0
 800b810:	607b      	str	r3, [r7, #4]
			  }
			  printf("Mode : %d\n", mode);
 800b812:	6879      	ldr	r1, [r7, #4]
 800b814:	488b      	ldr	r0, [pc, #556]	; (800ba44 <perfect_pass+0x294>)
 800b816:	f006 fe63 	bl	80124e0 <iprintf>
		  }
		  if(dist_r <= -20){
 800b81a:	4b89      	ldr	r3, [pc, #548]	; (800ba40 <perfect_pass+0x290>)
 800b81c:	edd3 7a00 	vldr	s15, [r3]
 800b820:	eebb 7a04 	vmov.f32	s14, #180	; 0xc1a00000 -20.0
 800b824:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b828:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b82c:	d80f      	bhi.n	800b84e <perfect_pass+0x9e>
			  mode--;
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	3b01      	subs	r3, #1
 800b832:	607b      	str	r3, [r7, #4]
			  dist_r = 0;
 800b834:	4b82      	ldr	r3, [pc, #520]	; (800ba40 <perfect_pass+0x290>)
 800b836:	f04f 0200 	mov.w	r2, #0
 800b83a:	601a      	str	r2, [r3, #0]
			  if(mode < 0){
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	2b00      	cmp	r3, #0
 800b840:	da01      	bge.n	800b846 <perfect_pass+0x96>
				  mode = 7;
 800b842:	2307      	movs	r3, #7
 800b844:	607b      	str	r3, [r7, #4]
			  }
			  printf("Mode : %d\n", mode);
 800b846:	6879      	ldr	r1, [r7, #4]
 800b848:	487e      	ldr	r0, [pc, #504]	; (800ba44 <perfect_pass+0x294>)
 800b84a:	f006 fe49 	bl	80124e0 <iprintf>
		  }
		  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET){
 800b84e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800b852:	487d      	ldr	r0, [pc, #500]	; (800ba48 <perfect_pass+0x298>)
 800b854:	f7f6 fd3e 	bl	80022d4 <HAL_GPIO_ReadPin>
 800b858:	4603      	mov	r3, r0
 800b85a:	2b00      	cmp	r3, #0
 800b85c:	d1b1      	bne.n	800b7c2 <perfect_pass+0x12>
			  HAL_Delay(50);
 800b85e:	2032      	movs	r0, #50	; 0x32
 800b860:	f7f5 fbdc 	bl	800101c <HAL_Delay>
			  while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET);
 800b864:	bf00      	nop
 800b866:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800b86a:	4877      	ldr	r0, [pc, #476]	; (800ba48 <perfect_pass+0x298>)
 800b86c:	f7f6 fd32 	bl	80022d4 <HAL_GPIO_ReadPin>
 800b870:	4603      	mov	r3, r0
 800b872:	2b00      	cmp	r3, #0
 800b874:	d0f7      	beq.n	800b866 <perfect_pass+0xb6>
			  drive_ready();
 800b876:	f7f9 fa03 	bl	8004c80 <drive_ready>

			  switch(mode){
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	2b07      	cmp	r3, #7
 800b87e:	d8a0      	bhi.n	800b7c2 <perfect_pass+0x12>
 800b880:	a201      	add	r2, pc, #4	; (adr r2, 800b888 <perfect_pass+0xd8>)
 800b882:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b886:	bf00      	nop
 800b888:	0800b7c3 	.word	0x0800b7c3
 800b88c:	0800b8a9 	.word	0x0800b8a9
 800b890:	0800b92d 	.word	0x0800b92d
 800b894:	0800b9b5 	.word	0x0800b9b5
 800b898:	0800ba7d 	.word	0x0800ba7d
 800b89c:	0800bb05 	.word	0x0800bb05
 800b8a0:	0800bbb9 	.word	0x0800bbb9
 800b8a4:	0800bea5 	.word	0x0800bea5
				case 0:
					break;

				case 1:
					//----a一次探索スラローム走行----
					printf("First Run.\n");
 800b8a8:	4868      	ldr	r0, [pc, #416]	; (800ba4c <perfect_pass+0x29c>)
 800b8aa:	f006 fe8d 	bl	80125c8 <puts>
					MF.FLAG.SCND = 0;
 800b8ae:	4a68      	ldr	r2, [pc, #416]	; (800ba50 <perfect_pass+0x2a0>)
 800b8b0:	8813      	ldrh	r3, [r2, #0]
 800b8b2:	f36f 1345 	bfc	r3, #5, #1
 800b8b6:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800b8b8:	4a65      	ldr	r2, [pc, #404]	; (800ba50 <perfect_pass+0x2a0>)
 800b8ba:	8813      	ldrh	r3, [r2, #0]
 800b8bc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b8c0:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 0;
 800b8c2:	4a63      	ldr	r2, [pc, #396]	; (800ba50 <perfect_pass+0x2a0>)
 800b8c4:	8813      	ldrh	r3, [r2, #0]
 800b8c6:	f36f 238a 	bfc	r3, #10, #1
 800b8ca:	8013      	strh	r3, [r2, #0]
					run_mode = MIDDLE;
 800b8cc:	4b61      	ldr	r3, [pc, #388]	; (800ba54 <perfect_pass+0x2a4>)
 800b8ce:	2202      	movs	r2, #2
 800b8d0:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800b8d2:	4b61      	ldr	r3, [pc, #388]	; (800ba58 <perfect_pass+0x2a8>)
 800b8d4:	2200      	movs	r2, #0
 800b8d6:	701a      	strb	r2, [r3, #0]
					goal_mode = 2;
 800b8d8:	4b60      	ldr	r3, [pc, #384]	; (800ba5c <perfect_pass+0x2ac>)
 800b8da:	2202      	movs	r2, #2
 800b8dc:	701a      	strb	r2, [r3, #0]
					accel_hs = 4000;
 800b8de:	4b60      	ldr	r3, [pc, #384]	; (800ba60 <perfect_pass+0x2b0>)
 800b8e0:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 800b8e4:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1000;
 800b8e6:	4b5f      	ldr	r3, [pc, #380]	; (800ba64 <perfect_pass+0x2b4>)
 800b8e8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800b8ec:	801a      	strh	r2, [r3, #0]

					goal_x = 7;
 800b8ee:	4b5e      	ldr	r3, [pc, #376]	; (800ba68 <perfect_pass+0x2b8>)
 800b8f0:	2207      	movs	r2, #7
 800b8f2:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800b8f4:	4b5d      	ldr	r3, [pc, #372]	; (800ba6c <perfect_pass+0x2bc>)
 800b8f6:	2207      	movs	r2, #7
 800b8f8:	701a      	strb	r2, [r3, #0]

					get_base();
 800b8fa:	f005 ffcb 	bl	8011894 <get_base>

					searchC();
 800b8fe:	f002 fff3 	bl	800e8e8 <searchC>
					HAL_Delay(2000);
 800b902:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800b906:	f7f5 fb89 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800b90a:	4b58      	ldr	r3, [pc, #352]	; (800ba6c <perfect_pass+0x2bc>)
 800b90c:	2200      	movs	r2, #0
 800b90e:	701a      	strb	r2, [r3, #0]
 800b910:	4b56      	ldr	r3, [pc, #344]	; (800ba6c <perfect_pass+0x2bc>)
 800b912:	781a      	ldrb	r2, [r3, #0]
 800b914:	4b54      	ldr	r3, [pc, #336]	; (800ba68 <perfect_pass+0x2b8>)
 800b916:	701a      	strb	r2, [r3, #0]
					searchC();
 800b918:	f002 ffe6 	bl	800e8e8 <searchC>

					goal_x = 7;
 800b91c:	4b52      	ldr	r3, [pc, #328]	; (800ba68 <perfect_pass+0x2b8>)
 800b91e:	2207      	movs	r2, #7
 800b920:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800b922:	4b52      	ldr	r3, [pc, #328]	; (800ba6c <perfect_pass+0x2bc>)
 800b924:	2207      	movs	r2, #7
 800b926:	701a      	strb	r2, [r3, #0]
					break;
 800b928:	f000 bc15 	b.w	800c156 <perfect_pass+0x9a6>

				case 2:
					//----a直線と大回り圧縮----
					printf("pass press 3.\n");
 800b92c:	4850      	ldr	r0, [pc, #320]	; (800ba70 <perfect_pass+0x2c0>)
 800b92e:	f006 fe4b 	bl	80125c8 <puts>
					MF.FLAG.SCND = 1;
 800b932:	4a47      	ldr	r2, [pc, #284]	; (800ba50 <perfect_pass+0x2a0>)
 800b934:	8813      	ldrh	r3, [r2, #0]
 800b936:	f043 0320 	orr.w	r3, r3, #32
 800b93a:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800b93c:	4a44      	ldr	r2, [pc, #272]	; (800ba50 <perfect_pass+0x2a0>)
 800b93e:	8813      	ldrh	r3, [r2, #0]
 800b940:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b944:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800b946:	4a42      	ldr	r2, [pc, #264]	; (800ba50 <perfect_pass+0x2a0>)
 800b948:	8813      	ldrh	r3, [r2, #0]
 800b94a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800b94e:	8013      	strh	r3, [r2, #0]
					run_mode = MIDDLE;
 800b950:	4b40      	ldr	r3, [pc, #256]	; (800ba54 <perfect_pass+0x2a4>)
 800b952:	2202      	movs	r2, #2
 800b954:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800b956:	4b40      	ldr	r3, [pc, #256]	; (800ba58 <perfect_pass+0x2a8>)
 800b958:	2200      	movs	r2, #0
 800b95a:	701a      	strb	r2, [r3, #0]
					goal_mode = 2;
 800b95c:	4b3f      	ldr	r3, [pc, #252]	; (800ba5c <perfect_pass+0x2ac>)
 800b95e:	2202      	movs	r2, #2
 800b960:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 800b962:	4b3f      	ldr	r3, [pc, #252]	; (800ba60 <perfect_pass+0x2b0>)
 800b964:	f241 3288 	movw	r2, #5000	; 0x1388
 800b968:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1000;
 800b96a:	4b3e      	ldr	r3, [pc, #248]	; (800ba64 <perfect_pass+0x2b4>)
 800b96c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800b970:	801a      	strh	r2, [r3, #0]

					pass_mode = 3;						//a半区画ベースでroute配列生成
 800b972:	4b40      	ldr	r3, [pc, #256]	; (800ba74 <perfect_pass+0x2c4>)
 800b974:	2203      	movs	r2, #3
 800b976:	701a      	strb	r2, [r3, #0]

					goal_x = 7;
 800b978:	4b3b      	ldr	r3, [pc, #236]	; (800ba68 <perfect_pass+0x2b8>)
 800b97a:	2207      	movs	r2, #7
 800b97c:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800b97e:	4b3b      	ldr	r3, [pc, #236]	; (800ba6c <perfect_pass+0x2bc>)
 800b980:	2207      	movs	r2, #7
 800b982:	701a      	strb	r2, [r3, #0]

					get_base();
 800b984:	f005 ff86 	bl	8011894 <get_base>

					searchF3();
 800b988:	f003 fc28 	bl	800f1dc <searchF3>
					HAL_Delay(2000);
 800b98c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800b990:	f7f5 fb44 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800b994:	4b35      	ldr	r3, [pc, #212]	; (800ba6c <perfect_pass+0x2bc>)
 800b996:	2200      	movs	r2, #0
 800b998:	701a      	strb	r2, [r3, #0]
 800b99a:	4b34      	ldr	r3, [pc, #208]	; (800ba6c <perfect_pass+0x2bc>)
 800b99c:	781a      	ldrb	r2, [r3, #0]
 800b99e:	4b32      	ldr	r3, [pc, #200]	; (800ba68 <perfect_pass+0x2b8>)
 800b9a0:	701a      	strb	r2, [r3, #0]
					searchF3();
 800b9a2:	f003 fc1b 	bl	800f1dc <searchF3>

					goal_x = 7;
 800b9a6:	4b30      	ldr	r3, [pc, #192]	; (800ba68 <perfect_pass+0x2b8>)
 800b9a8:	2207      	movs	r2, #7
 800b9aa:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800b9ac:	4b2f      	ldr	r3, [pc, #188]	; (800ba6c <perfect_pass+0x2bc>)
 800b9ae:	2207      	movs	r2, #7
 800b9b0:	701a      	strb	r2, [r3, #0]
					break;
 800b9b2:	e3d0      	b.n	800c156 <perfect_pass+0x9a6>

				case 3:
					//----a直線と大回り圧縮と斜めｰｰｰｰ
					printf("pass press 4.\n");
 800b9b4:	4830      	ldr	r0, [pc, #192]	; (800ba78 <perfect_pass+0x2c8>)
 800b9b6:	f006 fe07 	bl	80125c8 <puts>
					MF.FLAG.SCND = 1;
 800b9ba:	4a25      	ldr	r2, [pc, #148]	; (800ba50 <perfect_pass+0x2a0>)
 800b9bc:	8813      	ldrh	r3, [r2, #0]
 800b9be:	f043 0320 	orr.w	r3, r3, #32
 800b9c2:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800b9c4:	4a22      	ldr	r2, [pc, #136]	; (800ba50 <perfect_pass+0x2a0>)
 800b9c6:	8813      	ldrh	r3, [r2, #0]
 800b9c8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b9cc:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800b9ce:	4a20      	ldr	r2, [pc, #128]	; (800ba50 <perfect_pass+0x2a0>)
 800b9d0:	8813      	ldrh	r3, [r2, #0]
 800b9d2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800b9d6:	8013      	strh	r3, [r2, #0]
					run_mode = MIDDLE;
 800b9d8:	4b1e      	ldr	r3, [pc, #120]	; (800ba54 <perfect_pass+0x2a4>)
 800b9da:	2202      	movs	r2, #2
 800b9dc:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800b9de:	4b1e      	ldr	r3, [pc, #120]	; (800ba58 <perfect_pass+0x2a8>)
 800b9e0:	2200      	movs	r2, #0
 800b9e2:	701a      	strb	r2, [r3, #0]
					goal_mode = 2;
 800b9e4:	4b1d      	ldr	r3, [pc, #116]	; (800ba5c <perfect_pass+0x2ac>)
 800b9e6:	2202      	movs	r2, #2
 800b9e8:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 800b9ea:	4b1d      	ldr	r3, [pc, #116]	; (800ba60 <perfect_pass+0x2b0>)
 800b9ec:	f241 3288 	movw	r2, #5000	; 0x1388
 800b9f0:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1000;
 800b9f2:	4b1c      	ldr	r3, [pc, #112]	; (800ba64 <perfect_pass+0x2b4>)
 800b9f4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800b9f8:	801a      	strh	r2, [r3, #0]

					pass_mode = 4;
 800b9fa:	4b1e      	ldr	r3, [pc, #120]	; (800ba74 <perfect_pass+0x2c4>)
 800b9fc:	2204      	movs	r2, #4
 800b9fe:	701a      	strb	r2, [r3, #0]

					goal_x = 7;
 800ba00:	4b19      	ldr	r3, [pc, #100]	; (800ba68 <perfect_pass+0x2b8>)
 800ba02:	2207      	movs	r2, #7
 800ba04:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800ba06:	4b19      	ldr	r3, [pc, #100]	; (800ba6c <perfect_pass+0x2bc>)
 800ba08:	2207      	movs	r2, #7
 800ba0a:	701a      	strb	r2, [r3, #0]

					get_base();
 800ba0c:	f005 ff42 	bl	8011894 <get_base>

					searchF4();
 800ba10:	f003 fcc0 	bl	800f394 <searchF4>
					HAL_Delay(2000);
 800ba14:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800ba18:	f7f5 fb00 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800ba1c:	4b13      	ldr	r3, [pc, #76]	; (800ba6c <perfect_pass+0x2bc>)
 800ba1e:	2200      	movs	r2, #0
 800ba20:	701a      	strb	r2, [r3, #0]
 800ba22:	4b12      	ldr	r3, [pc, #72]	; (800ba6c <perfect_pass+0x2bc>)
 800ba24:	781a      	ldrb	r2, [r3, #0]
 800ba26:	4b10      	ldr	r3, [pc, #64]	; (800ba68 <perfect_pass+0x2b8>)
 800ba28:	701a      	strb	r2, [r3, #0]
					searchF4();
 800ba2a:	f003 fcb3 	bl	800f394 <searchF4>

					goal_x = 7;
 800ba2e:	4b0e      	ldr	r3, [pc, #56]	; (800ba68 <perfect_pass+0x2b8>)
 800ba30:	2207      	movs	r2, #7
 800ba32:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800ba34:	4b0d      	ldr	r3, [pc, #52]	; (800ba6c <perfect_pass+0x2bc>)
 800ba36:	2207      	movs	r2, #7
 800ba38:	701a      	strb	r2, [r3, #0]
					break;
 800ba3a:	e38c      	b.n	800c156 <perfect_pass+0x9a6>
 800ba3c:	08013ab8 	.word	0x08013ab8
 800ba40:	20000aec 	.word	0x20000aec
 800ba44:	0801371c 	.word	0x0801371c
 800ba48:	40020000 	.word	0x40020000
 800ba4c:	080139dc 	.word	0x080139dc
 800ba50:	20000f68 	.word	0x20000f68
 800ba54:	20000456 	.word	0x20000456
 800ba58:	200015c8 	.word	0x200015c8
 800ba5c:	20000bb1 	.word	0x20000bb1
 800ba60:	20000454 	.word	0x20000454
 800ba64:	20000f7c 	.word	0x20000f7c
 800ba68:	20000bb0 	.word	0x20000bb0
 800ba6c:	20000b4c 	.word	0x20000b4c
 800ba70:	08013ad8 	.word	0x08013ad8
 800ba74:	20000457 	.word	0x20000457
 800ba78:	08013920 	.word	0x08013920

				case 4:
					//----a直線と大回り圧縮 High Speed----
					printf("pass press 3-2.\n");
 800ba7c:	4843      	ldr	r0, [pc, #268]	; (800bb8c <perfect_pass+0x3dc>)
 800ba7e:	f006 fda3 	bl	80125c8 <puts>
					MF.FLAG.SCND = 1;
 800ba82:	4a43      	ldr	r2, [pc, #268]	; (800bb90 <perfect_pass+0x3e0>)
 800ba84:	8813      	ldrh	r3, [r2, #0]
 800ba86:	f043 0320 	orr.w	r3, r3, #32
 800ba8a:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800ba8c:	4a40      	ldr	r2, [pc, #256]	; (800bb90 <perfect_pass+0x3e0>)
 800ba8e:	8813      	ldrh	r3, [r2, #0]
 800ba90:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800ba94:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800ba96:	4a3e      	ldr	r2, [pc, #248]	; (800bb90 <perfect_pass+0x3e0>)
 800ba98:	8813      	ldrh	r3, [r2, #0]
 800ba9a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800ba9e:	8013      	strh	r3, [r2, #0]
					run_mode = HIGH;
 800baa0:	4b3c      	ldr	r3, [pc, #240]	; (800bb94 <perfect_pass+0x3e4>)
 800baa2:	2203      	movs	r2, #3
 800baa4:	701a      	strb	r2, [r3, #0]
					goal_mode = 2;
 800baa6:	4b3c      	ldr	r3, [pc, #240]	; (800bb98 <perfect_pass+0x3e8>)
 800baa8:	2202      	movs	r2, #2
 800baaa:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800baac:	4b3b      	ldr	r3, [pc, #236]	; (800bb9c <perfect_pass+0x3ec>)
 800baae:	2200      	movs	r2, #0
 800bab0:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 800bab2:	4b3b      	ldr	r3, [pc, #236]	; (800bba0 <perfect_pass+0x3f0>)
 800bab4:	f241 3288 	movw	r2, #5000	; 0x1388
 800bab8:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1200;
 800baba:	4b3a      	ldr	r3, [pc, #232]	; (800bba4 <perfect_pass+0x3f4>)
 800babc:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 800bac0:	801a      	strh	r2, [r3, #0]

					pass_mode = 3;						//a半区画ベースでroute配列生成
 800bac2:	4b39      	ldr	r3, [pc, #228]	; (800bba8 <perfect_pass+0x3f8>)
 800bac4:	2203      	movs	r2, #3
 800bac6:	701a      	strb	r2, [r3, #0]

					goal_x = 7;
 800bac8:	4b38      	ldr	r3, [pc, #224]	; (800bbac <perfect_pass+0x3fc>)
 800baca:	2207      	movs	r2, #7
 800bacc:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800bace:	4b38      	ldr	r3, [pc, #224]	; (800bbb0 <perfect_pass+0x400>)
 800bad0:	2207      	movs	r2, #7
 800bad2:	701a      	strb	r2, [r3, #0]

					get_base();
 800bad4:	f005 fede 	bl	8011894 <get_base>

					searchF3();
 800bad8:	f003 fb80 	bl	800f1dc <searchF3>
					HAL_Delay(2000);
 800badc:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800bae0:	f7f5 fa9c 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800bae4:	4b32      	ldr	r3, [pc, #200]	; (800bbb0 <perfect_pass+0x400>)
 800bae6:	2200      	movs	r2, #0
 800bae8:	701a      	strb	r2, [r3, #0]
 800baea:	4b31      	ldr	r3, [pc, #196]	; (800bbb0 <perfect_pass+0x400>)
 800baec:	781a      	ldrb	r2, [r3, #0]
 800baee:	4b2f      	ldr	r3, [pc, #188]	; (800bbac <perfect_pass+0x3fc>)
 800baf0:	701a      	strb	r2, [r3, #0]
					searchF3();
 800baf2:	f003 fb73 	bl	800f1dc <searchF3>

					goal_x = 7;
 800baf6:	4b2d      	ldr	r3, [pc, #180]	; (800bbac <perfect_pass+0x3fc>)
 800baf8:	2207      	movs	r2, #7
 800bafa:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800bafc:	4b2c      	ldr	r3, [pc, #176]	; (800bbb0 <perfect_pass+0x400>)
 800bafe:	2207      	movs	r2, #7
 800bb00:	701a      	strb	r2, [r3, #0]
					break;
 800bb02:	e328      	b.n	800c156 <perfect_pass+0x9a6>

				case 5:
					//----a直線と大回り圧縮と斜め High Speedｰｰｰｰ
					printf("pass press 4.\n");
 800bb04:	482b      	ldr	r0, [pc, #172]	; (800bbb4 <perfect_pass+0x404>)
 800bb06:	f006 fd5f 	bl	80125c8 <puts>
					MF.FLAG.SCND = 1;
 800bb0a:	4a21      	ldr	r2, [pc, #132]	; (800bb90 <perfect_pass+0x3e0>)
 800bb0c:	8813      	ldrh	r3, [r2, #0]
 800bb0e:	f043 0320 	orr.w	r3, r3, #32
 800bb12:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800bb14:	4a1e      	ldr	r2, [pc, #120]	; (800bb90 <perfect_pass+0x3e0>)
 800bb16:	8813      	ldrh	r3, [r2, #0]
 800bb18:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800bb1c:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800bb1e:	4a1c      	ldr	r2, [pc, #112]	; (800bb90 <perfect_pass+0x3e0>)
 800bb20:	8813      	ldrh	r3, [r2, #0]
 800bb22:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800bb26:	8013      	strh	r3, [r2, #0]
					run_mode = HIGH;
 800bb28:	4b1a      	ldr	r3, [pc, #104]	; (800bb94 <perfect_pass+0x3e4>)
 800bb2a:	2203      	movs	r2, #3
 800bb2c:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800bb2e:	4b1b      	ldr	r3, [pc, #108]	; (800bb9c <perfect_pass+0x3ec>)
 800bb30:	2200      	movs	r2, #0
 800bb32:	701a      	strb	r2, [r3, #0]
					goal_mode = 2;
 800bb34:	4b18      	ldr	r3, [pc, #96]	; (800bb98 <perfect_pass+0x3e8>)
 800bb36:	2202      	movs	r2, #2
 800bb38:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 800bb3a:	4b19      	ldr	r3, [pc, #100]	; (800bba0 <perfect_pass+0x3f0>)
 800bb3c:	f241 3288 	movw	r2, #5000	; 0x1388
 800bb40:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1200;
 800bb42:	4b18      	ldr	r3, [pc, #96]	; (800bba4 <perfect_pass+0x3f4>)
 800bb44:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 800bb48:	801a      	strh	r2, [r3, #0]

					pass_mode = 4;
 800bb4a:	4b17      	ldr	r3, [pc, #92]	; (800bba8 <perfect_pass+0x3f8>)
 800bb4c:	2204      	movs	r2, #4
 800bb4e:	701a      	strb	r2, [r3, #0]

					goal_x = 7;
 800bb50:	4b16      	ldr	r3, [pc, #88]	; (800bbac <perfect_pass+0x3fc>)
 800bb52:	2207      	movs	r2, #7
 800bb54:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800bb56:	4b16      	ldr	r3, [pc, #88]	; (800bbb0 <perfect_pass+0x400>)
 800bb58:	2207      	movs	r2, #7
 800bb5a:	701a      	strb	r2, [r3, #0]

					get_base();
 800bb5c:	f005 fe9a 	bl	8011894 <get_base>

					searchF4();
 800bb60:	f003 fc18 	bl	800f394 <searchF4>
					HAL_Delay(2000);
 800bb64:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800bb68:	f7f5 fa58 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800bb6c:	4b10      	ldr	r3, [pc, #64]	; (800bbb0 <perfect_pass+0x400>)
 800bb6e:	2200      	movs	r2, #0
 800bb70:	701a      	strb	r2, [r3, #0]
 800bb72:	4b0f      	ldr	r3, [pc, #60]	; (800bbb0 <perfect_pass+0x400>)
 800bb74:	781a      	ldrb	r2, [r3, #0]
 800bb76:	4b0d      	ldr	r3, [pc, #52]	; (800bbac <perfect_pass+0x3fc>)
 800bb78:	701a      	strb	r2, [r3, #0]
					searchF4();
 800bb7a:	f003 fc0b 	bl	800f394 <searchF4>

					goal_x = 7;
 800bb7e:	4b0b      	ldr	r3, [pc, #44]	; (800bbac <perfect_pass+0x3fc>)
 800bb80:	2207      	movs	r2, #7
 800bb82:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800bb84:	4b0a      	ldr	r3, [pc, #40]	; (800bbb0 <perfect_pass+0x400>)
 800bb86:	2207      	movs	r2, #7
 800bb88:	701a      	strb	r2, [r3, #0]
					break;
 800bb8a:	e2e4      	b.n	800c156 <perfect_pass+0x9a6>
 800bb8c:	08013910 	.word	0x08013910
 800bb90:	20000f68 	.word	0x20000f68
 800bb94:	20000456 	.word	0x20000456
 800bb98:	20000bb1 	.word	0x20000bb1
 800bb9c:	200015c8 	.word	0x200015c8
 800bba0:	20000454 	.word	0x20000454
 800bba4:	20000f7c 	.word	0x20000f7c
 800bba8:	20000457 	.word	0x20000457
 800bbac:	20000bb0 	.word	0x20000bb0
 800bbb0:	20000b4c 	.word	0x20000b4c
 800bbb4:	08013920 	.word	0x08013920

				case 6:
					//----a一次探索スラローム走行----
					printf("First Run.\n");
 800bbb8:	48ac      	ldr	r0, [pc, #688]	; (800be6c <perfect_pass+0x6bc>)
 800bbba:	f006 fd05 	bl	80125c8 <puts>
					MF.FLAG.SCND = 0;
 800bbbe:	4aac      	ldr	r2, [pc, #688]	; (800be70 <perfect_pass+0x6c0>)
 800bbc0:	8813      	ldrh	r3, [r2, #0]
 800bbc2:	f36f 1345 	bfc	r3, #5, #1
 800bbc6:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800bbc8:	4aa9      	ldr	r2, [pc, #676]	; (800be70 <perfect_pass+0x6c0>)
 800bbca:	8813      	ldrh	r3, [r2, #0]
 800bbcc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800bbd0:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 0;
 800bbd2:	4aa7      	ldr	r2, [pc, #668]	; (800be70 <perfect_pass+0x6c0>)
 800bbd4:	8813      	ldrh	r3, [r2, #0]
 800bbd6:	f36f 238a 	bfc	r3, #10, #1
 800bbda:	8013      	strh	r3, [r2, #0]
					run_mode = MIDDLE;
 800bbdc:	4ba5      	ldr	r3, [pc, #660]	; (800be74 <perfect_pass+0x6c4>)
 800bbde:	2202      	movs	r2, #2
 800bbe0:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800bbe2:	4ba5      	ldr	r3, [pc, #660]	; (800be78 <perfect_pass+0x6c8>)
 800bbe4:	2200      	movs	r2, #0
 800bbe6:	701a      	strb	r2, [r3, #0]
					goal_mode = 2;
 800bbe8:	4ba4      	ldr	r3, [pc, #656]	; (800be7c <perfect_pass+0x6cc>)
 800bbea:	2202      	movs	r2, #2
 800bbec:	701a      	strb	r2, [r3, #0]
					accel_hs = 4000;
 800bbee:	4ba4      	ldr	r3, [pc, #656]	; (800be80 <perfect_pass+0x6d0>)
 800bbf0:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 800bbf4:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1000;
 800bbf6:	4ba3      	ldr	r3, [pc, #652]	; (800be84 <perfect_pass+0x6d4>)
 800bbf8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800bbfc:	801a      	strh	r2, [r3, #0]

					goal_x = GOAL_X;
 800bbfe:	4ba2      	ldr	r3, [pc, #648]	; (800be88 <perfect_pass+0x6d8>)
 800bc00:	2207      	movs	r2, #7
 800bc02:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800bc04:	4ba1      	ldr	r3, [pc, #644]	; (800be8c <perfect_pass+0x6dc>)
 800bc06:	2206      	movs	r2, #6
 800bc08:	701a      	strb	r2, [r3, #0]

					get_base();
 800bc0a:	f005 fe43 	bl	8011894 <get_base>

					searchC();
 800bc0e:	f002 fe6b 	bl	800e8e8 <searchC>
					HAL_Delay(2000);
 800bc12:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800bc16:	f7f5 fa01 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800bc1a:	4b9c      	ldr	r3, [pc, #624]	; (800be8c <perfect_pass+0x6dc>)
 800bc1c:	2200      	movs	r2, #0
 800bc1e:	701a      	strb	r2, [r3, #0]
 800bc20:	4b9a      	ldr	r3, [pc, #616]	; (800be8c <perfect_pass+0x6dc>)
 800bc22:	781a      	ldrb	r2, [r3, #0]
 800bc24:	4b98      	ldr	r3, [pc, #608]	; (800be88 <perfect_pass+0x6d8>)
 800bc26:	701a      	strb	r2, [r3, #0]
					searchC();
 800bc28:	f002 fe5e 	bl	800e8e8 <searchC>

					degree_z = target_degree_z;
 800bc2c:	4b98      	ldr	r3, [pc, #608]	; (800be90 <perfect_pass+0x6e0>)
 800bc2e:	681b      	ldr	r3, [r3, #0]
 800bc30:	4a98      	ldr	r2, [pc, #608]	; (800be94 <perfect_pass+0x6e4>)
 800bc32:	6013      	str	r3, [r2, #0]
					HAL_Delay(2000);
 800bc34:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800bc38:	f7f5 f9f0 	bl	800101c <HAL_Delay>
					degree_z = target_degree_z;
					HAL_Delay(2000);
*/

					//----a直線と大回り圧縮----
					printf("pass press 3.\n");
 800bc3c:	4896      	ldr	r0, [pc, #600]	; (800be98 <perfect_pass+0x6e8>)
 800bc3e:	f006 fcc3 	bl	80125c8 <puts>
					MF.FLAG.SCND = 1;
 800bc42:	4a8b      	ldr	r2, [pc, #556]	; (800be70 <perfect_pass+0x6c0>)
 800bc44:	8813      	ldrh	r3, [r2, #0]
 800bc46:	f043 0320 	orr.w	r3, r3, #32
 800bc4a:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800bc4c:	4a88      	ldr	r2, [pc, #544]	; (800be70 <perfect_pass+0x6c0>)
 800bc4e:	8813      	ldrh	r3, [r2, #0]
 800bc50:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800bc54:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800bc56:	4a86      	ldr	r2, [pc, #536]	; (800be70 <perfect_pass+0x6c0>)
 800bc58:	8813      	ldrh	r3, [r2, #0]
 800bc5a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800bc5e:	8013      	strh	r3, [r2, #0]
					run_mode = MIDDLE;
 800bc60:	4b84      	ldr	r3, [pc, #528]	; (800be74 <perfect_pass+0x6c4>)
 800bc62:	2202      	movs	r2, #2
 800bc64:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800bc66:	4b84      	ldr	r3, [pc, #528]	; (800be78 <perfect_pass+0x6c8>)
 800bc68:	2200      	movs	r2, #0
 800bc6a:	701a      	strb	r2, [r3, #0]
					goal_mode = 2;
 800bc6c:	4b83      	ldr	r3, [pc, #524]	; (800be7c <perfect_pass+0x6cc>)
 800bc6e:	2202      	movs	r2, #2
 800bc70:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 800bc72:	4b83      	ldr	r3, [pc, #524]	; (800be80 <perfect_pass+0x6d0>)
 800bc74:	f241 3288 	movw	r2, #5000	; 0x1388
 800bc78:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1200;
 800bc7a:	4b82      	ldr	r3, [pc, #520]	; (800be84 <perfect_pass+0x6d4>)
 800bc7c:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 800bc80:	801a      	strh	r2, [r3, #0]

					pass_mode = 3;						//a半区画ベースでroute配列生成
 800bc82:	4b86      	ldr	r3, [pc, #536]	; (800be9c <perfect_pass+0x6ec>)
 800bc84:	2203      	movs	r2, #3
 800bc86:	701a      	strb	r2, [r3, #0]

					goal_x = GOAL_X;
 800bc88:	4b7f      	ldr	r3, [pc, #508]	; (800be88 <perfect_pass+0x6d8>)
 800bc8a:	2207      	movs	r2, #7
 800bc8c:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800bc8e:	4b7f      	ldr	r3, [pc, #508]	; (800be8c <perfect_pass+0x6dc>)
 800bc90:	2206      	movs	r2, #6
 800bc92:	701a      	strb	r2, [r3, #0]

					searchF3();
 800bc94:	f003 faa2 	bl	800f1dc <searchF3>
					HAL_Delay(2000);
 800bc98:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800bc9c:	f7f5 f9be 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800bca0:	4b7a      	ldr	r3, [pc, #488]	; (800be8c <perfect_pass+0x6dc>)
 800bca2:	2200      	movs	r2, #0
 800bca4:	701a      	strb	r2, [r3, #0]
 800bca6:	4b79      	ldr	r3, [pc, #484]	; (800be8c <perfect_pass+0x6dc>)
 800bca8:	781a      	ldrb	r2, [r3, #0]
 800bcaa:	4b77      	ldr	r3, [pc, #476]	; (800be88 <perfect_pass+0x6d8>)
 800bcac:	701a      	strb	r2, [r3, #0]
					searchF3();
 800bcae:	f003 fa95 	bl	800f1dc <searchF3>

					driveC2(SETPOS_BACK);         //a尻を当てる程度に後退。回転後に停止する
 800bcb2:	2064      	movs	r0, #100	; 0x64
 800bcb4:	f7f9 fba4 	bl	8005400 <driveC2>
					degree_z = target_degree_z;
 800bcb8:	4b75      	ldr	r3, [pc, #468]	; (800be90 <perfect_pass+0x6e0>)
 800bcba:	681b      	ldr	r3, [r3, #0]
 800bcbc:	4a75      	ldr	r2, [pc, #468]	; (800be94 <perfect_pass+0x6e4>)
 800bcbe:	6013      	str	r3, [r2, #0]
					start_mode = 0;
 800bcc0:	4b6d      	ldr	r3, [pc, #436]	; (800be78 <perfect_pass+0x6c8>)
 800bcc2:	2200      	movs	r2, #0
 800bcc4:	701a      	strb	r2, [r3, #0]

					HAL_Delay(2000);
 800bcc6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800bcca:	f7f5 f9a7 	bl	800101c <HAL_Delay>


					//----a直線と大回り圧縮と斜め----
					printf("pass press 3.\n");
 800bcce:	4872      	ldr	r0, [pc, #456]	; (800be98 <perfect_pass+0x6e8>)
 800bcd0:	f006 fc7a 	bl	80125c8 <puts>
					MF.FLAG.SCND = 1;
 800bcd4:	4a66      	ldr	r2, [pc, #408]	; (800be70 <perfect_pass+0x6c0>)
 800bcd6:	8813      	ldrh	r3, [r2, #0]
 800bcd8:	f043 0320 	orr.w	r3, r3, #32
 800bcdc:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800bcde:	4a64      	ldr	r2, [pc, #400]	; (800be70 <perfect_pass+0x6c0>)
 800bce0:	8813      	ldrh	r3, [r2, #0]
 800bce2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800bce6:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800bce8:	4a61      	ldr	r2, [pc, #388]	; (800be70 <perfect_pass+0x6c0>)
 800bcea:	8813      	ldrh	r3, [r2, #0]
 800bcec:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800bcf0:	8013      	strh	r3, [r2, #0]
					run_mode = MIDDLE;
 800bcf2:	4b60      	ldr	r3, [pc, #384]	; (800be74 <perfect_pass+0x6c4>)
 800bcf4:	2202      	movs	r2, #2
 800bcf6:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800bcf8:	4b5f      	ldr	r3, [pc, #380]	; (800be78 <perfect_pass+0x6c8>)
 800bcfa:	2200      	movs	r2, #0
 800bcfc:	701a      	strb	r2, [r3, #0]
					goal_mode = 2;
 800bcfe:	4b5f      	ldr	r3, [pc, #380]	; (800be7c <perfect_pass+0x6cc>)
 800bd00:	2202      	movs	r2, #2
 800bd02:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 800bd04:	4b5e      	ldr	r3, [pc, #376]	; (800be80 <perfect_pass+0x6d0>)
 800bd06:	f241 3288 	movw	r2, #5000	; 0x1388
 800bd0a:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1200;
 800bd0c:	4b5d      	ldr	r3, [pc, #372]	; (800be84 <perfect_pass+0x6d4>)
 800bd0e:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 800bd12:	801a      	strh	r2, [r3, #0]

					pass_mode = 4;						//a半区画ベースでroute配列生成
 800bd14:	4b61      	ldr	r3, [pc, #388]	; (800be9c <perfect_pass+0x6ec>)
 800bd16:	2204      	movs	r2, #4
 800bd18:	701a      	strb	r2, [r3, #0]

					goal_x = GOAL_X;
 800bd1a:	4b5b      	ldr	r3, [pc, #364]	; (800be88 <perfect_pass+0x6d8>)
 800bd1c:	2207      	movs	r2, #7
 800bd1e:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800bd20:	4b5a      	ldr	r3, [pc, #360]	; (800be8c <perfect_pass+0x6dc>)
 800bd22:	2206      	movs	r2, #6
 800bd24:	701a      	strb	r2, [r3, #0]

					searchF4();
 800bd26:	f003 fb35 	bl	800f394 <searchF4>
					HAL_Delay(2000);
 800bd2a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800bd2e:	f7f5 f975 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800bd32:	4b56      	ldr	r3, [pc, #344]	; (800be8c <perfect_pass+0x6dc>)
 800bd34:	2200      	movs	r2, #0
 800bd36:	701a      	strb	r2, [r3, #0]
 800bd38:	4b54      	ldr	r3, [pc, #336]	; (800be8c <perfect_pass+0x6dc>)
 800bd3a:	781a      	ldrb	r2, [r3, #0]
 800bd3c:	4b52      	ldr	r3, [pc, #328]	; (800be88 <perfect_pass+0x6d8>)
 800bd3e:	701a      	strb	r2, [r3, #0]
					searchF4();
 800bd40:	f003 fb28 	bl	800f394 <searchF4>

					driveC2(SETPOS_BACK);         //a尻を当てる程度に後退。回転後に停止する
 800bd44:	2064      	movs	r0, #100	; 0x64
 800bd46:	f7f9 fb5b 	bl	8005400 <driveC2>
					degree_z = target_degree_z;
 800bd4a:	4b51      	ldr	r3, [pc, #324]	; (800be90 <perfect_pass+0x6e0>)
 800bd4c:	681b      	ldr	r3, [r3, #0]
 800bd4e:	4a51      	ldr	r2, [pc, #324]	; (800be94 <perfect_pass+0x6e4>)
 800bd50:	6013      	str	r3, [r2, #0]
					start_mode = 0;
 800bd52:	4b49      	ldr	r3, [pc, #292]	; (800be78 <perfect_pass+0x6c8>)
 800bd54:	2200      	movs	r2, #0
 800bd56:	701a      	strb	r2, [r3, #0]

					HAL_Delay(2000);
 800bd58:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800bd5c:	f7f5 f95e 	bl	800101c <HAL_Delay>
					goal_x = goal_y = 0;
					searchD();
*/

					//----a直線と大回り圧縮 High Speed----
					printf("pass press 3.\n");
 800bd60:	484d      	ldr	r0, [pc, #308]	; (800be98 <perfect_pass+0x6e8>)
 800bd62:	f006 fc31 	bl	80125c8 <puts>
					MF.FLAG.SCND = 1;
 800bd66:	4a42      	ldr	r2, [pc, #264]	; (800be70 <perfect_pass+0x6c0>)
 800bd68:	8813      	ldrh	r3, [r2, #0]
 800bd6a:	f043 0320 	orr.w	r3, r3, #32
 800bd6e:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800bd70:	4a3f      	ldr	r2, [pc, #252]	; (800be70 <perfect_pass+0x6c0>)
 800bd72:	8813      	ldrh	r3, [r2, #0]
 800bd74:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800bd78:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800bd7a:	4a3d      	ldr	r2, [pc, #244]	; (800be70 <perfect_pass+0x6c0>)
 800bd7c:	8813      	ldrh	r3, [r2, #0]
 800bd7e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800bd82:	8013      	strh	r3, [r2, #0]
					run_mode = HIGH;
 800bd84:	4b3b      	ldr	r3, [pc, #236]	; (800be74 <perfect_pass+0x6c4>)
 800bd86:	2203      	movs	r2, #3
 800bd88:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800bd8a:	4b3b      	ldr	r3, [pc, #236]	; (800be78 <perfect_pass+0x6c8>)
 800bd8c:	2200      	movs	r2, #0
 800bd8e:	701a      	strb	r2, [r3, #0]
					goal_mode = 2;
 800bd90:	4b3a      	ldr	r3, [pc, #232]	; (800be7c <perfect_pass+0x6cc>)
 800bd92:	2202      	movs	r2, #2
 800bd94:	701a      	strb	r2, [r3, #0]
					accel_hs = 6000;
 800bd96:	4b3a      	ldr	r3, [pc, #232]	; (800be80 <perfect_pass+0x6d0>)
 800bd98:	f241 7270 	movw	r2, #6000	; 0x1770
 800bd9c:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1600;
 800bd9e:	4b39      	ldr	r3, [pc, #228]	; (800be84 <perfect_pass+0x6d4>)
 800bda0:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800bda4:	801a      	strh	r2, [r3, #0]

					pass_mode = 3;						//a半区画ベースでroute配列生成
 800bda6:	4b3d      	ldr	r3, [pc, #244]	; (800be9c <perfect_pass+0x6ec>)
 800bda8:	2203      	movs	r2, #3
 800bdaa:	701a      	strb	r2, [r3, #0]

					goal_x = GOAL_X;
 800bdac:	4b36      	ldr	r3, [pc, #216]	; (800be88 <perfect_pass+0x6d8>)
 800bdae:	2207      	movs	r2, #7
 800bdb0:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800bdb2:	4b36      	ldr	r3, [pc, #216]	; (800be8c <perfect_pass+0x6dc>)
 800bdb4:	2206      	movs	r2, #6
 800bdb6:	701a      	strb	r2, [r3, #0]

					searchF3();
 800bdb8:	f003 fa10 	bl	800f1dc <searchF3>
					HAL_Delay(2000);
 800bdbc:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800bdc0:	f7f5 f92c 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800bdc4:	4b31      	ldr	r3, [pc, #196]	; (800be8c <perfect_pass+0x6dc>)
 800bdc6:	2200      	movs	r2, #0
 800bdc8:	701a      	strb	r2, [r3, #0]
 800bdca:	4b30      	ldr	r3, [pc, #192]	; (800be8c <perfect_pass+0x6dc>)
 800bdcc:	781a      	ldrb	r2, [r3, #0]
 800bdce:	4b2e      	ldr	r3, [pc, #184]	; (800be88 <perfect_pass+0x6d8>)
 800bdd0:	701a      	strb	r2, [r3, #0]
					searchF3();
 800bdd2:	f003 fa03 	bl	800f1dc <searchF3>

					driveC2(SETPOS_BACK);         //a尻を当てる程度に後退。回転後に停止する
 800bdd6:	2064      	movs	r0, #100	; 0x64
 800bdd8:	f7f9 fb12 	bl	8005400 <driveC2>
					degree_z = target_degree_z;
 800bddc:	4b2c      	ldr	r3, [pc, #176]	; (800be90 <perfect_pass+0x6e0>)
 800bdde:	681b      	ldr	r3, [r3, #0]
 800bde0:	4a2c      	ldr	r2, [pc, #176]	; (800be94 <perfect_pass+0x6e4>)
 800bde2:	6013      	str	r3, [r2, #0]
					start_mode = 0;
 800bde4:	4b24      	ldr	r3, [pc, #144]	; (800be78 <perfect_pass+0x6c8>)
 800bde6:	2200      	movs	r2, #0
 800bde8:	701a      	strb	r2, [r3, #0]

					HAL_Delay(2000);
 800bdea:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800bdee:	f7f5 f915 	bl	800101c <HAL_Delay>


					//----a直線と大回り圧縮と斜めｰｰｰｰ
					printf("pass press 4.\n");
 800bdf2:	482b      	ldr	r0, [pc, #172]	; (800bea0 <perfect_pass+0x6f0>)
 800bdf4:	f006 fbe8 	bl	80125c8 <puts>
					MF.FLAG.SCND = 1;
 800bdf8:	4a1d      	ldr	r2, [pc, #116]	; (800be70 <perfect_pass+0x6c0>)
 800bdfa:	8813      	ldrh	r3, [r2, #0]
 800bdfc:	f043 0320 	orr.w	r3, r3, #32
 800be00:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800be02:	4a1b      	ldr	r2, [pc, #108]	; (800be70 <perfect_pass+0x6c0>)
 800be04:	8813      	ldrh	r3, [r2, #0]
 800be06:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800be0a:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800be0c:	4a18      	ldr	r2, [pc, #96]	; (800be70 <perfect_pass+0x6c0>)
 800be0e:	8813      	ldrh	r3, [r2, #0]
 800be10:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800be14:	8013      	strh	r3, [r2, #0]
					run_mode = HIGH;
 800be16:	4b17      	ldr	r3, [pc, #92]	; (800be74 <perfect_pass+0x6c4>)
 800be18:	2203      	movs	r2, #3
 800be1a:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800be1c:	4b16      	ldr	r3, [pc, #88]	; (800be78 <perfect_pass+0x6c8>)
 800be1e:	2200      	movs	r2, #0
 800be20:	701a      	strb	r2, [r3, #0]
					goal_mode = 2;
 800be22:	4b16      	ldr	r3, [pc, #88]	; (800be7c <perfect_pass+0x6cc>)
 800be24:	2202      	movs	r2, #2
 800be26:	701a      	strb	r2, [r3, #0]
					accel_hs = 6000;
 800be28:	4b15      	ldr	r3, [pc, #84]	; (800be80 <perfect_pass+0x6d0>)
 800be2a:	f241 7270 	movw	r2, #6000	; 0x1770
 800be2e:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1600;
 800be30:	4b14      	ldr	r3, [pc, #80]	; (800be84 <perfect_pass+0x6d4>)
 800be32:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800be36:	801a      	strh	r2, [r3, #0]

					pass_mode = 4;
 800be38:	4b18      	ldr	r3, [pc, #96]	; (800be9c <perfect_pass+0x6ec>)
 800be3a:	2204      	movs	r2, #4
 800be3c:	701a      	strb	r2, [r3, #0]

					goal_x = GOAL_X;
 800be3e:	4b12      	ldr	r3, [pc, #72]	; (800be88 <perfect_pass+0x6d8>)
 800be40:	2207      	movs	r2, #7
 800be42:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800be44:	4b11      	ldr	r3, [pc, #68]	; (800be8c <perfect_pass+0x6dc>)
 800be46:	2206      	movs	r2, #6
 800be48:	701a      	strb	r2, [r3, #0]

					searchF4();
 800be4a:	f003 faa3 	bl	800f394 <searchF4>
					HAL_Delay(2000);
 800be4e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800be52:	f7f5 f8e3 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800be56:	4b0d      	ldr	r3, [pc, #52]	; (800be8c <perfect_pass+0x6dc>)
 800be58:	2200      	movs	r2, #0
 800be5a:	701a      	strb	r2, [r3, #0]
 800be5c:	4b0b      	ldr	r3, [pc, #44]	; (800be8c <perfect_pass+0x6dc>)
 800be5e:	781a      	ldrb	r2, [r3, #0]
 800be60:	4b09      	ldr	r3, [pc, #36]	; (800be88 <perfect_pass+0x6d8>)
 800be62:	701a      	strb	r2, [r3, #0]
					searchF4();
 800be64:	f003 fa96 	bl	800f394 <searchF4>

					break;
 800be68:	e175      	b.n	800c156 <perfect_pass+0x9a6>
 800be6a:	bf00      	nop
 800be6c:	080139dc 	.word	0x080139dc
 800be70:	20000f68 	.word	0x20000f68
 800be74:	20000456 	.word	0x20000456
 800be78:	200015c8 	.word	0x200015c8
 800be7c:	20000bb1 	.word	0x20000bb1
 800be80:	20000454 	.word	0x20000454
 800be84:	20000f7c 	.word	0x20000f7c
 800be88:	20000bb0 	.word	0x20000bb0
 800be8c:	20000b4c 	.word	0x20000b4c
 800be90:	20000bf8 	.word	0x20000bf8
 800be94:	20000b5c 	.word	0x20000b5c
 800be98:	08013ad8 	.word	0x08013ad8
 800be9c:	20000457 	.word	0x20000457
 800bea0:	08013920 	.word	0x08013920

				case 7:
					//----a一次探索スラローム走行----
					printf("First Run.\n");
 800bea4:	48ad      	ldr	r0, [pc, #692]	; (800c15c <perfect_pass+0x9ac>)
 800bea6:	f006 fb8f 	bl	80125c8 <puts>
					MF.FLAG.SCND = 0;
 800beaa:	4aad      	ldr	r2, [pc, #692]	; (800c160 <perfect_pass+0x9b0>)
 800beac:	8813      	ldrh	r3, [r2, #0]
 800beae:	f36f 1345 	bfc	r3, #5, #1
 800beb2:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800beb4:	4aaa      	ldr	r2, [pc, #680]	; (800c160 <perfect_pass+0x9b0>)
 800beb6:	8813      	ldrh	r3, [r2, #0]
 800beb8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800bebc:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 0;
 800bebe:	4aa8      	ldr	r2, [pc, #672]	; (800c160 <perfect_pass+0x9b0>)
 800bec0:	8813      	ldrh	r3, [r2, #0]
 800bec2:	f36f 238a 	bfc	r3, #10, #1
 800bec6:	8013      	strh	r3, [r2, #0]
					run_mode = MIDDLE;
 800bec8:	4ba6      	ldr	r3, [pc, #664]	; (800c164 <perfect_pass+0x9b4>)
 800beca:	2202      	movs	r2, #2
 800becc:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800bece:	4ba6      	ldr	r3, [pc, #664]	; (800c168 <perfect_pass+0x9b8>)
 800bed0:	2200      	movs	r2, #0
 800bed2:	701a      	strb	r2, [r3, #0]
					goal_mode = 2;
 800bed4:	4ba5      	ldr	r3, [pc, #660]	; (800c16c <perfect_pass+0x9bc>)
 800bed6:	2202      	movs	r2, #2
 800bed8:	701a      	strb	r2, [r3, #0]
					accel_hs = 4000;
 800beda:	4ba5      	ldr	r3, [pc, #660]	; (800c170 <perfect_pass+0x9c0>)
 800bedc:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 800bee0:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1000;
 800bee2:	4ba4      	ldr	r3, [pc, #656]	; (800c174 <perfect_pass+0x9c4>)
 800bee4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800bee8:	801a      	strh	r2, [r3, #0]

					goal_x = 7;
 800beea:	4ba3      	ldr	r3, [pc, #652]	; (800c178 <perfect_pass+0x9c8>)
 800beec:	2207      	movs	r2, #7
 800beee:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800bef0:	4ba2      	ldr	r3, [pc, #648]	; (800c17c <perfect_pass+0x9cc>)
 800bef2:	2207      	movs	r2, #7
 800bef4:	701a      	strb	r2, [r3, #0]

					get_base();
 800bef6:	f005 fccd 	bl	8011894 <get_base>

					searchC();
 800befa:	f002 fcf5 	bl	800e8e8 <searchC>
					HAL_Delay(2000);
 800befe:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800bf02:	f7f5 f88b 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800bf06:	4b9d      	ldr	r3, [pc, #628]	; (800c17c <perfect_pass+0x9cc>)
 800bf08:	2200      	movs	r2, #0
 800bf0a:	701a      	strb	r2, [r3, #0]
 800bf0c:	4b9b      	ldr	r3, [pc, #620]	; (800c17c <perfect_pass+0x9cc>)
 800bf0e:	781a      	ldrb	r2, [r3, #0]
 800bf10:	4b99      	ldr	r3, [pc, #612]	; (800c178 <perfect_pass+0x9c8>)
 800bf12:	701a      	strb	r2, [r3, #0]
					searchC();
 800bf14:	f002 fce8 	bl	800e8e8 <searchC>

					degree_z = target_degree_z;
 800bf18:	4b99      	ldr	r3, [pc, #612]	; (800c180 <perfect_pass+0x9d0>)
 800bf1a:	681b      	ldr	r3, [r3, #0]
 800bf1c:	4a99      	ldr	r2, [pc, #612]	; (800c184 <perfect_pass+0x9d4>)
 800bf1e:	6013      	str	r3, [r2, #0]
					HAL_Delay(2000);
 800bf20:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800bf24:	f7f5 f87a 	bl	800101c <HAL_Delay>
					degree_z = target_degree_z;
					HAL_Delay(2000);
*/

					//----a直線と大回り圧縮(adv_posを停止)+半区画ベース----
					printf("pass press 3.\n");
 800bf28:	4897      	ldr	r0, [pc, #604]	; (800c188 <perfect_pass+0x9d8>)
 800bf2a:	f006 fb4d 	bl	80125c8 <puts>
					MF.FLAG.SCND = 1;
 800bf2e:	4a8c      	ldr	r2, [pc, #560]	; (800c160 <perfect_pass+0x9b0>)
 800bf30:	8813      	ldrh	r3, [r2, #0]
 800bf32:	f043 0320 	orr.w	r3, r3, #32
 800bf36:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800bf38:	4a89      	ldr	r2, [pc, #548]	; (800c160 <perfect_pass+0x9b0>)
 800bf3a:	8813      	ldrh	r3, [r2, #0]
 800bf3c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800bf40:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800bf42:	4a87      	ldr	r2, [pc, #540]	; (800c160 <perfect_pass+0x9b0>)
 800bf44:	8813      	ldrh	r3, [r2, #0]
 800bf46:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800bf4a:	8013      	strh	r3, [r2, #0]
					run_mode = MIDDLE;
 800bf4c:	4b85      	ldr	r3, [pc, #532]	; (800c164 <perfect_pass+0x9b4>)
 800bf4e:	2202      	movs	r2, #2
 800bf50:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800bf52:	4b85      	ldr	r3, [pc, #532]	; (800c168 <perfect_pass+0x9b8>)
 800bf54:	2200      	movs	r2, #0
 800bf56:	701a      	strb	r2, [r3, #0]
					goal_mode = 2;
 800bf58:	4b84      	ldr	r3, [pc, #528]	; (800c16c <perfect_pass+0x9bc>)
 800bf5a:	2202      	movs	r2, #2
 800bf5c:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 800bf5e:	4b84      	ldr	r3, [pc, #528]	; (800c170 <perfect_pass+0x9c0>)
 800bf60:	f241 3288 	movw	r2, #5000	; 0x1388
 800bf64:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1200;
 800bf66:	4b83      	ldr	r3, [pc, #524]	; (800c174 <perfect_pass+0x9c4>)
 800bf68:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 800bf6c:	801a      	strh	r2, [r3, #0]

					pass_mode = 3;						//a半区画ベースでroute配列生成
 800bf6e:	4b87      	ldr	r3, [pc, #540]	; (800c18c <perfect_pass+0x9dc>)
 800bf70:	2203      	movs	r2, #3
 800bf72:	701a      	strb	r2, [r3, #0]

					goal_x = 7;
 800bf74:	4b80      	ldr	r3, [pc, #512]	; (800c178 <perfect_pass+0x9c8>)
 800bf76:	2207      	movs	r2, #7
 800bf78:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800bf7a:	4b80      	ldr	r3, [pc, #512]	; (800c17c <perfect_pass+0x9cc>)
 800bf7c:	2207      	movs	r2, #7
 800bf7e:	701a      	strb	r2, [r3, #0]

					searchF3();
 800bf80:	f003 f92c 	bl	800f1dc <searchF3>
					HAL_Delay(2000);
 800bf84:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800bf88:	f7f5 f848 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800bf8c:	4b7b      	ldr	r3, [pc, #492]	; (800c17c <perfect_pass+0x9cc>)
 800bf8e:	2200      	movs	r2, #0
 800bf90:	701a      	strb	r2, [r3, #0]
 800bf92:	4b7a      	ldr	r3, [pc, #488]	; (800c17c <perfect_pass+0x9cc>)
 800bf94:	781a      	ldrb	r2, [r3, #0]
 800bf96:	4b78      	ldr	r3, [pc, #480]	; (800c178 <perfect_pass+0x9c8>)
 800bf98:	701a      	strb	r2, [r3, #0]
					searchF3();
 800bf9a:	f003 f91f 	bl	800f1dc <searchF3>

					driveC2(SETPOS_BACK);         //a尻を当てる程度に後退。回転後に停止する
 800bf9e:	2064      	movs	r0, #100	; 0x64
 800bfa0:	f7f9 fa2e 	bl	8005400 <driveC2>
					degree_z = target_degree_z;
 800bfa4:	4b76      	ldr	r3, [pc, #472]	; (800c180 <perfect_pass+0x9d0>)
 800bfa6:	681b      	ldr	r3, [r3, #0]
 800bfa8:	4a76      	ldr	r2, [pc, #472]	; (800c184 <perfect_pass+0x9d4>)
 800bfaa:	6013      	str	r3, [r2, #0]
					start_mode = 0;
 800bfac:	4b6e      	ldr	r3, [pc, #440]	; (800c168 <perfect_pass+0x9b8>)
 800bfae:	2200      	movs	r2, #0
 800bfb0:	701a      	strb	r2, [r3, #0]
					HAL_Delay(2000);
 800bfb2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800bfb6:	f7f5 f831 	bl	800101c <HAL_Delay>


					//----a直線と大回り圧縮と斜めｰｰｰｰ
					printf("pass press 4.\n");
 800bfba:	4875      	ldr	r0, [pc, #468]	; (800c190 <perfect_pass+0x9e0>)
 800bfbc:	f006 fb04 	bl	80125c8 <puts>
					MF.FLAG.SCND = 1;
 800bfc0:	4a67      	ldr	r2, [pc, #412]	; (800c160 <perfect_pass+0x9b0>)
 800bfc2:	8813      	ldrh	r3, [r2, #0]
 800bfc4:	f043 0320 	orr.w	r3, r3, #32
 800bfc8:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800bfca:	4a65      	ldr	r2, [pc, #404]	; (800c160 <perfect_pass+0x9b0>)
 800bfcc:	8813      	ldrh	r3, [r2, #0]
 800bfce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800bfd2:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800bfd4:	4a62      	ldr	r2, [pc, #392]	; (800c160 <perfect_pass+0x9b0>)
 800bfd6:	8813      	ldrh	r3, [r2, #0]
 800bfd8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800bfdc:	8013      	strh	r3, [r2, #0]
					run_mode = MIDDLE;
 800bfde:	4b61      	ldr	r3, [pc, #388]	; (800c164 <perfect_pass+0x9b4>)
 800bfe0:	2202      	movs	r2, #2
 800bfe2:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800bfe4:	4b60      	ldr	r3, [pc, #384]	; (800c168 <perfect_pass+0x9b8>)
 800bfe6:	2200      	movs	r2, #0
 800bfe8:	701a      	strb	r2, [r3, #0]
					goal_mode = 2;
 800bfea:	4b60      	ldr	r3, [pc, #384]	; (800c16c <perfect_pass+0x9bc>)
 800bfec:	2202      	movs	r2, #2
 800bfee:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 800bff0:	4b5f      	ldr	r3, [pc, #380]	; (800c170 <perfect_pass+0x9c0>)
 800bff2:	f241 3288 	movw	r2, #5000	; 0x1388
 800bff6:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1200;
 800bff8:	4b5e      	ldr	r3, [pc, #376]	; (800c174 <perfect_pass+0x9c4>)
 800bffa:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 800bffe:	801a      	strh	r2, [r3, #0]

					pass_mode = 4;
 800c000:	4b62      	ldr	r3, [pc, #392]	; (800c18c <perfect_pass+0x9dc>)
 800c002:	2204      	movs	r2, #4
 800c004:	701a      	strb	r2, [r3, #0]

					goal_x = 7;
 800c006:	4b5c      	ldr	r3, [pc, #368]	; (800c178 <perfect_pass+0x9c8>)
 800c008:	2207      	movs	r2, #7
 800c00a:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800c00c:	4b5b      	ldr	r3, [pc, #364]	; (800c17c <perfect_pass+0x9cc>)
 800c00e:	2207      	movs	r2, #7
 800c010:	701a      	strb	r2, [r3, #0]

					searchF4();
 800c012:	f003 f9bf 	bl	800f394 <searchF4>
					HAL_Delay(2000);
 800c016:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800c01a:	f7f4 ffff 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800c01e:	4b57      	ldr	r3, [pc, #348]	; (800c17c <perfect_pass+0x9cc>)
 800c020:	2200      	movs	r2, #0
 800c022:	701a      	strb	r2, [r3, #0]
 800c024:	4b55      	ldr	r3, [pc, #340]	; (800c17c <perfect_pass+0x9cc>)
 800c026:	781a      	ldrb	r2, [r3, #0]
 800c028:	4b53      	ldr	r3, [pc, #332]	; (800c178 <perfect_pass+0x9c8>)
 800c02a:	701a      	strb	r2, [r3, #0]
					searchF4();
 800c02c:	f003 f9b2 	bl	800f394 <searchF4>

					driveC2(SETPOS_BACK);         //a尻を当てる程度に後退。回転後に停止する
 800c030:	2064      	movs	r0, #100	; 0x64
 800c032:	f7f9 f9e5 	bl	8005400 <driveC2>
					degree_z = target_degree_z;
 800c036:	4b52      	ldr	r3, [pc, #328]	; (800c180 <perfect_pass+0x9d0>)
 800c038:	681b      	ldr	r3, [r3, #0]
 800c03a:	4a52      	ldr	r2, [pc, #328]	; (800c184 <perfect_pass+0x9d4>)
 800c03c:	6013      	str	r3, [r2, #0]
					start_mode = 0;
 800c03e:	4b4a      	ldr	r3, [pc, #296]	; (800c168 <perfect_pass+0x9b8>)
 800c040:	2200      	movs	r2, #0
 800c042:	701a      	strb	r2, [r3, #0]

					HAL_Delay(2000);
 800c044:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800c048:	f7f4 ffe8 	bl	800101c <HAL_Delay>
					goal_x = goal_y = 0;
					searchD();
*/

					//----a直線と大回り圧縮 High Speed----
					printf("pass press 3.\n");
 800c04c:	484e      	ldr	r0, [pc, #312]	; (800c188 <perfect_pass+0x9d8>)
 800c04e:	f006 fabb 	bl	80125c8 <puts>
					MF.FLAG.SCND = 1;
 800c052:	4a43      	ldr	r2, [pc, #268]	; (800c160 <perfect_pass+0x9b0>)
 800c054:	8813      	ldrh	r3, [r2, #0]
 800c056:	f043 0320 	orr.w	r3, r3, #32
 800c05a:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800c05c:	4a40      	ldr	r2, [pc, #256]	; (800c160 <perfect_pass+0x9b0>)
 800c05e:	8813      	ldrh	r3, [r2, #0]
 800c060:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800c064:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800c066:	4a3e      	ldr	r2, [pc, #248]	; (800c160 <perfect_pass+0x9b0>)
 800c068:	8813      	ldrh	r3, [r2, #0]
 800c06a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800c06e:	8013      	strh	r3, [r2, #0]
					run_mode = HIGH;
 800c070:	4b3c      	ldr	r3, [pc, #240]	; (800c164 <perfect_pass+0x9b4>)
 800c072:	2203      	movs	r2, #3
 800c074:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800c076:	4b3c      	ldr	r3, [pc, #240]	; (800c168 <perfect_pass+0x9b8>)
 800c078:	2200      	movs	r2, #0
 800c07a:	701a      	strb	r2, [r3, #0]
					goal_mode = 2;
 800c07c:	4b3b      	ldr	r3, [pc, #236]	; (800c16c <perfect_pass+0x9bc>)
 800c07e:	2202      	movs	r2, #2
 800c080:	701a      	strb	r2, [r3, #0]
					accel_hs = 6000;
 800c082:	4b3b      	ldr	r3, [pc, #236]	; (800c170 <perfect_pass+0x9c0>)
 800c084:	f241 7270 	movw	r2, #6000	; 0x1770
 800c088:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1600;
 800c08a:	4b3a      	ldr	r3, [pc, #232]	; (800c174 <perfect_pass+0x9c4>)
 800c08c:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800c090:	801a      	strh	r2, [r3, #0]

					pass_mode = 3;						//a半区画ベースでroute配列生成
 800c092:	4b3e      	ldr	r3, [pc, #248]	; (800c18c <perfect_pass+0x9dc>)
 800c094:	2203      	movs	r2, #3
 800c096:	701a      	strb	r2, [r3, #0]

					goal_x = 7;
 800c098:	4b37      	ldr	r3, [pc, #220]	; (800c178 <perfect_pass+0x9c8>)
 800c09a:	2207      	movs	r2, #7
 800c09c:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800c09e:	4b37      	ldr	r3, [pc, #220]	; (800c17c <perfect_pass+0x9cc>)
 800c0a0:	2207      	movs	r2, #7
 800c0a2:	701a      	strb	r2, [r3, #0]

					searchF3();
 800c0a4:	f003 f89a 	bl	800f1dc <searchF3>
					HAL_Delay(2000);
 800c0a8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800c0ac:	f7f4 ffb6 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800c0b0:	4b32      	ldr	r3, [pc, #200]	; (800c17c <perfect_pass+0x9cc>)
 800c0b2:	2200      	movs	r2, #0
 800c0b4:	701a      	strb	r2, [r3, #0]
 800c0b6:	4b31      	ldr	r3, [pc, #196]	; (800c17c <perfect_pass+0x9cc>)
 800c0b8:	781a      	ldrb	r2, [r3, #0]
 800c0ba:	4b2f      	ldr	r3, [pc, #188]	; (800c178 <perfect_pass+0x9c8>)
 800c0bc:	701a      	strb	r2, [r3, #0]
					searchF3();
 800c0be:	f003 f88d 	bl	800f1dc <searchF3>

					driveC2(SETPOS_BACK);         //a尻を当てる程度に後退。回転後に停止する
 800c0c2:	2064      	movs	r0, #100	; 0x64
 800c0c4:	f7f9 f99c 	bl	8005400 <driveC2>
					degree_z = target_degree_z;
 800c0c8:	4b2d      	ldr	r3, [pc, #180]	; (800c180 <perfect_pass+0x9d0>)
 800c0ca:	681b      	ldr	r3, [r3, #0]
 800c0cc:	4a2d      	ldr	r2, [pc, #180]	; (800c184 <perfect_pass+0x9d4>)
 800c0ce:	6013      	str	r3, [r2, #0]
					start_mode = 0;
 800c0d0:	4b25      	ldr	r3, [pc, #148]	; (800c168 <perfect_pass+0x9b8>)
 800c0d2:	2200      	movs	r2, #0
 800c0d4:	701a      	strb	r2, [r3, #0]

					HAL_Delay(2000);
 800c0d6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800c0da:	f7f4 ff9f 	bl	800101c <HAL_Delay>


					//----a直線と大回り圧縮と斜め High Speedｰｰｰｰ
					printf("pass press 4.\n");
 800c0de:	482c      	ldr	r0, [pc, #176]	; (800c190 <perfect_pass+0x9e0>)
 800c0e0:	f006 fa72 	bl	80125c8 <puts>
					MF.FLAG.SCND = 1;
 800c0e4:	4a1e      	ldr	r2, [pc, #120]	; (800c160 <perfect_pass+0x9b0>)
 800c0e6:	8813      	ldrh	r3, [r2, #0]
 800c0e8:	f043 0320 	orr.w	r3, r3, #32
 800c0ec:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800c0ee:	4a1c      	ldr	r2, [pc, #112]	; (800c160 <perfect_pass+0x9b0>)
 800c0f0:	8813      	ldrh	r3, [r2, #0]
 800c0f2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800c0f6:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800c0f8:	4a19      	ldr	r2, [pc, #100]	; (800c160 <perfect_pass+0x9b0>)
 800c0fa:	8813      	ldrh	r3, [r2, #0]
 800c0fc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800c100:	8013      	strh	r3, [r2, #0]
					run_mode = HIGH;
 800c102:	4b18      	ldr	r3, [pc, #96]	; (800c164 <perfect_pass+0x9b4>)
 800c104:	2203      	movs	r2, #3
 800c106:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800c108:	4b17      	ldr	r3, [pc, #92]	; (800c168 <perfect_pass+0x9b8>)
 800c10a:	2200      	movs	r2, #0
 800c10c:	701a      	strb	r2, [r3, #0]
					goal_mode = 2;
 800c10e:	4b17      	ldr	r3, [pc, #92]	; (800c16c <perfect_pass+0x9bc>)
 800c110:	2202      	movs	r2, #2
 800c112:	701a      	strb	r2, [r3, #0]
					accel_hs = 6000;
 800c114:	4b16      	ldr	r3, [pc, #88]	; (800c170 <perfect_pass+0x9c0>)
 800c116:	f241 7270 	movw	r2, #6000	; 0x1770
 800c11a:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1600;
 800c11c:	4b15      	ldr	r3, [pc, #84]	; (800c174 <perfect_pass+0x9c4>)
 800c11e:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800c122:	801a      	strh	r2, [r3, #0]

					pass_mode = 4;
 800c124:	4b19      	ldr	r3, [pc, #100]	; (800c18c <perfect_pass+0x9dc>)
 800c126:	2204      	movs	r2, #4
 800c128:	701a      	strb	r2, [r3, #0]

					goal_x = 7;
 800c12a:	4b13      	ldr	r3, [pc, #76]	; (800c178 <perfect_pass+0x9c8>)
 800c12c:	2207      	movs	r2, #7
 800c12e:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800c130:	4b12      	ldr	r3, [pc, #72]	; (800c17c <perfect_pass+0x9cc>)
 800c132:	2207      	movs	r2, #7
 800c134:	701a      	strb	r2, [r3, #0]

					searchF4();
 800c136:	f003 f92d 	bl	800f394 <searchF4>
					HAL_Delay(2000);
 800c13a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800c13e:	f7f4 ff6d 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800c142:	4b0e      	ldr	r3, [pc, #56]	; (800c17c <perfect_pass+0x9cc>)
 800c144:	2200      	movs	r2, #0
 800c146:	701a      	strb	r2, [r3, #0]
 800c148:	4b0c      	ldr	r3, [pc, #48]	; (800c17c <perfect_pass+0x9cc>)
 800c14a:	781a      	ldrb	r2, [r3, #0]
 800c14c:	4b0a      	ldr	r3, [pc, #40]	; (800c178 <perfect_pass+0x9c8>)
 800c14e:	701a      	strb	r2, [r3, #0]
					searchF4();
 800c150:	f003 f920 	bl	800f394 <searchF4>

					break;
 800c154:	bf00      	nop
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 800c156:	f7ff bb34 	b.w	800b7c2 <perfect_pass+0x12>
 800c15a:	bf00      	nop
 800c15c:	080139dc 	.word	0x080139dc
 800c160:	20000f68 	.word	0x20000f68
 800c164:	20000456 	.word	0x20000456
 800c168:	200015c8 	.word	0x200015c8
 800c16c:	20000bb1 	.word	0x20000bb1
 800c170:	20000454 	.word	0x20000454
 800c174:	20000f7c 	.word	0x20000f7c
 800c178:	20000bb0 	.word	0x20000bb0
 800c17c:	20000b4c 	.word	0x20000b4c
 800c180:	20000bf8 	.word	0x20000bf8
 800c184:	20000b5c 	.word	0x20000b5c
 800c188:	08013ad8 	.word	0x08013ad8
 800c18c:	20000457 	.word	0x20000457
 800c190:	08013920 	.word	0x08013920

0800c194 <eeprom_enable_write>:
//eeprom_enable_write
// eepromとして使うflashメモリ領域をeraseし，書き込みを有効にする
// 引数：なし
// 戻り値：問題が起こらなければHAL_OKを返す
//+++++++++++++++++++++++++++++++++++++++++++++++
HAL_StatusTypeDef eeprom_enable_write(void){
 800c194:	b580      	push	{r7, lr}
 800c196:	b088      	sub	sp, #32
 800c198:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status;
  FLASH_EraseInitTypeDef EraseInitStruct;
  uint32_t PageError = 0;
 800c19a:	2300      	movs	r3, #0
 800c19c:	607b      	str	r3, [r7, #4]
  EraseInitStruct.TypeErase = FLASH_TYPEERASE_SECTORS;
 800c19e:	2300      	movs	r3, #0
 800c1a0:	60bb      	str	r3, [r7, #8]
  //EraseInitStruct.Banks = FLASH_BANK_1;
  //EraseInitStruct.Sector = EEPROM_START_ADDRESS;
  EraseInitStruct.Sector = FLASH_SECTOR_11;
 800c1a2:	230b      	movs	r3, #11
 800c1a4:	613b      	str	r3, [r7, #16]
  EraseInitStruct.NbSectors = 1;
 800c1a6:	2301      	movs	r3, #1
 800c1a8:	617b      	str	r3, [r7, #20]
  EraseInitStruct.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 800c1aa:	2302      	movs	r3, #2
 800c1ac:	61bb      	str	r3, [r7, #24]

  status = HAL_FLASH_Unlock();
 800c1ae:	f7f5 fc77 	bl	8001aa0 <HAL_FLASH_Unlock>
 800c1b2:	4603      	mov	r3, r0
 800c1b4:	77fb      	strb	r3, [r7, #31]
  if(status != HAL_OK) return status;
 800c1b6:	7ffb      	ldrb	r3, [r7, #31]
 800c1b8:	2b00      	cmp	r3, #0
 800c1ba:	d001      	beq.n	800c1c0 <eeprom_enable_write+0x2c>
 800c1bc:	7ffb      	ldrb	r3, [r7, #31]
 800c1be:	e009      	b.n	800c1d4 <eeprom_enable_write+0x40>
  status = HAL_FLASHEx_Erase(&EraseInitStruct, &PageError);
 800c1c0:	1d3a      	adds	r2, r7, #4
 800c1c2:	f107 0308 	add.w	r3, r7, #8
 800c1c6:	4611      	mov	r1, r2
 800c1c8:	4618      	mov	r0, r3
 800c1ca:	f7f5 fdc7 	bl	8001d5c <HAL_FLASHEx_Erase>
 800c1ce:	4603      	mov	r3, r0
 800c1d0:	77fb      	strb	r3, [r7, #31]
  return status;
 800c1d2:	7ffb      	ldrb	r3, [r7, #31]
}
 800c1d4:	4618      	mov	r0, r3
 800c1d6:	3720      	adds	r7, #32
 800c1d8:	46bd      	mov	sp, r7
 800c1da:	bd80      	pop	{r7, pc}

0800c1dc <eeprom_disable_write>:
//eeprom_disable_write
// eepromとして使うflashメモリ領域への書き込みを無効にする
// 引数：なし
// 戻り値：問題が起こらなければHAL_OKを返す
//+++++++++++++++++++++++++++++++++++++++++++++++
HAL_StatusTypeDef eeprom_disable_write(void){
 800c1dc:	b580      	push	{r7, lr}
 800c1de:	af00      	add	r7, sp, #0
  return HAL_FLASH_Lock();
 800c1e0:	f7f5 fc80 	bl	8001ae4 <HAL_FLASH_Lock>
 800c1e4:	4603      	mov	r3, r0
}
 800c1e6:	4618      	mov	r0, r3
 800c1e8:	bd80      	pop	{r7, pc}

0800c1ea <eeprom_write_halfword>:
//eeprom_write_halfword
// eepromとして使うflashメモリ領域へ2バイトの値を書き込む
// 引数：address …… eepromとして使うflashメモリ領域の先頭アドレスからのオフセット，data …… 書き込みたいuin16_t型データ
// 戻り値：問題が起こらなければHAL_OKを返す
//+++++++++++++++++++++++++++++++++++++++++++++++
HAL_StatusTypeDef eeprom_write_halfword(uint32_t address, uint16_t data){
 800c1ea:	b590      	push	{r4, r7, lr}
 800c1ec:	b085      	sub	sp, #20
 800c1ee:	af00      	add	r7, sp, #0
 800c1f0:	6078      	str	r0, [r7, #4]
 800c1f2:	460b      	mov	r3, r1
 800c1f4:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status;
  address = address*2 + EEPROM_START_ADDRESS;
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	f103 6380 	add.w	r3, r3, #67108864	; 0x4000000
 800c1fc:	f503 23e0 	add.w	r3, r3, #458752	; 0x70000
 800c200:	005b      	lsls	r3, r3, #1
 800c202:	607b      	str	r3, [r7, #4]
  status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, address, data);
 800c204:	887b      	ldrh	r3, [r7, #2]
 800c206:	f04f 0400 	mov.w	r4, #0
 800c20a:	461a      	mov	r2, r3
 800c20c:	4623      	mov	r3, r4
 800c20e:	6879      	ldr	r1, [r7, #4]
 800c210:	2001      	movs	r0, #1
 800c212:	f7f5 fbf1 	bl	80019f8 <HAL_FLASH_Program>
 800c216:	4603      	mov	r3, r0
 800c218:	73fb      	strb	r3, [r7, #15]
  return status;
 800c21a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c21c:	4618      	mov	r0, r3
 800c21e:	3714      	adds	r7, #20
 800c220:	46bd      	mov	sp, r7
 800c222:	bd90      	pop	{r4, r7, pc}

0800c224 <eeprom_read_halfword>:
//eeprom_read_halfword
// eepromとして使うflashメモリ領域から2バイトの値を読み込む
// 引数：address …… eepromとして使うflashメモリ領域の先頭アドレスからのオフセット
// 戻り値：読み込んだuin16_t型データ
//+++++++++++++++++++++++++++++++++++++++++++++++
uint16_t eeprom_read_halfword(uint32_t address){
 800c224:	b480      	push	{r7}
 800c226:	b085      	sub	sp, #20
 800c228:	af00      	add	r7, sp, #0
 800c22a:	6078      	str	r0, [r7, #4]
  uint16_t val = 0;
 800c22c:	2300      	movs	r3, #0
 800c22e:	81fb      	strh	r3, [r7, #14]
  address = address*2 + EEPROM_START_ADDRESS;
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	f103 6380 	add.w	r3, r3, #67108864	; 0x4000000
 800c236:	f503 23e0 	add.w	r3, r3, #458752	; 0x70000
 800c23a:	005b      	lsls	r3, r3, #1
 800c23c:	607b      	str	r3, [r7, #4]
  val = *(__IO uint16_t *)address;
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	881b      	ldrh	r3, [r3, #0]
 800c242:	81fb      	strh	r3, [r7, #14]
  return val;
 800c244:	89fb      	ldrh	r3, [r7, #14]
}
 800c246:	4618      	mov	r0, r3
 800c248:	3714      	adds	r7, #20
 800c24a:	46bd      	mov	sp, r7
 800c24c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c250:	4770      	bx	lr
	...

0800c254 <gyro_init>:
#include "global.h"

SPI_HandleTypeDef hspi3;


void gyro_init(void){
 800c254:	b580      	push	{r7, lr}
 800c256:	b082      	sub	sp, #8
 800c258:	af00      	add	r7, sp, #0
  uint8_t who_am_i;

  HAL_Delay(100); 					// wait start up
 800c25a:	2064      	movs	r0, #100	; 0x64
 800c25c:	f7f4 fede 	bl	800101c <HAL_Delay>
  who_am_i = read_byte(WHO_AM_I); 	// 1. read who am i
 800c260:	2075      	movs	r0, #117	; 0x75
 800c262:	f000 f82f 	bl	800c2c4 <read_byte>
 800c266:	4603      	mov	r3, r0
 800c268:	71fb      	strb	r3, [r7, #7]
  printf("0x%x\r\n",who_am_i); 		// 2. check who am i value
 800c26a:	79fb      	ldrb	r3, [r7, #7]
 800c26c:	4619      	mov	r1, r3
 800c26e:	4813      	ldr	r0, [pc, #76]	; (800c2bc <gyro_init+0x68>)
 800c270:	f006 f936 	bl	80124e0 <iprintf>

  // 2. error check
  if (who_am_i != 0x98){
 800c274:	79fb      	ldrb	r3, [r7, #7]
 800c276:	2b98      	cmp	r3, #152	; 0x98
 800c278:	d003      	beq.n	800c282 <gyro_init+0x2e>
    while(1){
      printf("gyro_error\r");
 800c27a:	4811      	ldr	r0, [pc, #68]	; (800c2c0 <gyro_init+0x6c>)
 800c27c:	f006 f930 	bl	80124e0 <iprintf>
 800c280:	e7fb      	b.n	800c27a <gyro_init+0x26>
    }
  }

  HAL_Delay(50); // wait
 800c282:	2032      	movs	r0, #50	; 0x32
 800c284:	f7f4 feca 	bl	800101c <HAL_Delay>
  write_byte(PWR_MGMT_1, 0x00); 	// 3. set pwr_might
 800c288:	2100      	movs	r1, #0
 800c28a:	206b      	movs	r0, #107	; 0x6b
 800c28c:	f000 f846 	bl	800c31c <write_byte>

  HAL_Delay(50);
 800c290:	2032      	movs	r0, #50	; 0x32
 800c292:	f7f4 fec3 	bl	800101c <HAL_Delay>
  write_byte(CONFIG, 0x00); 		// 4. set config
 800c296:	2100      	movs	r1, #0
 800c298:	201a      	movs	r0, #26
 800c29a:	f000 f83f 	bl	800c31c <write_byte>

  HAL_Delay(50);
 800c29e:	2032      	movs	r0, #50	; 0x32
 800c2a0:	f7f4 febc 	bl	800101c <HAL_Delay>
  write_byte(GYRO_CONFIG, 0x18); 	// 5. set gyro config
 800c2a4:	2118      	movs	r1, #24
 800c2a6:	201b      	movs	r0, #27
 800c2a8:	f000 f838 	bl	800c31c <write_byte>

  HAL_Delay(50);
 800c2ac:	2032      	movs	r0, #50	; 0x32
 800c2ae:	f7f4 feb5 	bl	800101c <HAL_Delay>
}
 800c2b2:	bf00      	nop
 800c2b4:	3708      	adds	r7, #8
 800c2b6:	46bd      	mov	sp, r7
 800c2b8:	bd80      	pop	{r7, pc}
 800c2ba:	bf00      	nop
 800c2bc:	08013ae8 	.word	0x08013ae8
 800c2c0:	08013af0 	.word	0x08013af0

0800c2c4 <read_byte>:


uint8_t read_byte(uint8_t reg){
 800c2c4:	b580      	push	{r7, lr}
 800c2c6:	b084      	sub	sp, #16
 800c2c8:	af00      	add	r7, sp, #0
 800c2ca:	4603      	mov	r3, r0
 800c2cc:	71fb      	strb	r3, [r7, #7]
  uint8_t ret,val;
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET ); 	//cs = Low;
 800c2ce:	2200      	movs	r2, #0
 800c2d0:	2104      	movs	r1, #4
 800c2d2:	4810      	ldr	r0, [pc, #64]	; (800c314 <read_byte+0x50>)
 800c2d4:	f7f6 f816 	bl	8002304 <HAL_GPIO_WritePin>
  ret = reg | 0x80;  // MSB = 1
 800c2d8:	79fb      	ldrb	r3, [r7, #7]
 800c2da:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800c2de:	b2db      	uxtb	r3, r3
 800c2e0:	73fb      	strb	r3, [r7, #15]
  HAL_SPI_Transmit(&hspi3, &ret,1,100); 					// sent 1byte(address)
 800c2e2:	f107 010f 	add.w	r1, r7, #15
 800c2e6:	2364      	movs	r3, #100	; 0x64
 800c2e8:	2201      	movs	r2, #1
 800c2ea:	480b      	ldr	r0, [pc, #44]	; (800c318 <read_byte+0x54>)
 800c2ec:	f7f6 fc92 	bl	8002c14 <HAL_SPI_Transmit>
  HAL_SPI_Receive(&hspi3,&val,1,100); 						// read 1byte(read data)
 800c2f0:	f107 010e 	add.w	r1, r7, #14
 800c2f4:	2364      	movs	r3, #100	; 0x64
 800c2f6:	2201      	movs	r2, #1
 800c2f8:	4807      	ldr	r0, [pc, #28]	; (800c318 <read_byte+0x54>)
 800c2fa:	f7f6 fdbf 	bl	8002e7c <HAL_SPI_Receive>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_SET );  	//cs = High;
 800c2fe:	2201      	movs	r2, #1
 800c300:	2104      	movs	r1, #4
 800c302:	4804      	ldr	r0, [pc, #16]	; (800c314 <read_byte+0x50>)
 800c304:	f7f5 fffe 	bl	8002304 <HAL_GPIO_WritePin>
  return val;
 800c308:	7bbb      	ldrb	r3, [r7, #14]
}
 800c30a:	4618      	mov	r0, r3
 800c30c:	3710      	adds	r7, #16
 800c30e:	46bd      	mov	sp, r7
 800c310:	bd80      	pop	{r7, pc}
 800c312:	bf00      	nop
 800c314:	40020c00 	.word	0x40020c00
 800c318:	20000144 	.word	0x20000144

0800c31c <write_byte>:


void write_byte(uint8_t reg, uint8_t val){
 800c31c:	b580      	push	{r7, lr}
 800c31e:	b084      	sub	sp, #16
 800c320:	af00      	add	r7, sp, #0
 800c322:	4603      	mov	r3, r0
 800c324:	460a      	mov	r2, r1
 800c326:	71fb      	strb	r3, [r7, #7]
 800c328:	4613      	mov	r3, r2
 800c32a:	71bb      	strb	r3, [r7, #6]
  uint8_t ret;
  ret = reg & 0x7F ; // MSB = 0
 800c32c:	79fb      	ldrb	r3, [r7, #7]
 800c32e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c332:	b2db      	uxtb	r3, r3
 800c334:	73fb      	strb	r3, [r7, #15]
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET); 	// cs = Low;
 800c336:	2200      	movs	r2, #0
 800c338:	2104      	movs	r1, #4
 800c33a:	480c      	ldr	r0, [pc, #48]	; (800c36c <write_byte+0x50>)
 800c33c:	f7f5 ffe2 	bl	8002304 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi3, &ret,1,100); 					// sent 1byte(address)
 800c340:	f107 010f 	add.w	r1, r7, #15
 800c344:	2364      	movs	r3, #100	; 0x64
 800c346:	2201      	movs	r2, #1
 800c348:	4809      	ldr	r0, [pc, #36]	; (800c370 <write_byte+0x54>)
 800c34a:	f7f6 fc63 	bl	8002c14 <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi3, &val,1,100); 					// read 1byte(write data)
 800c34e:	1db9      	adds	r1, r7, #6
 800c350:	2364      	movs	r3, #100	; 0x64
 800c352:	2201      	movs	r2, #1
 800c354:	4806      	ldr	r0, [pc, #24]	; (800c370 <write_byte+0x54>)
 800c356:	f7f6 fc5d 	bl	8002c14 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_SET); 		// cs = High;
 800c35a:	2201      	movs	r2, #1
 800c35c:	2104      	movs	r1, #4
 800c35e:	4803      	ldr	r0, [pc, #12]	; (800c36c <write_byte+0x50>)
 800c360:	f7f5 ffd0 	bl	8002304 <HAL_GPIO_WritePin>
}
 800c364:	bf00      	nop
 800c366:	3710      	adds	r7, #16
 800c368:	46bd      	mov	sp, r7
 800c36a:	bd80      	pop	{r7, pc}
 800c36c:	40020c00 	.word	0x40020c00
 800c370:	20000144 	.word	0x20000144

0800c374 <accel_read_x>:


float accel_read_x(void){
 800c374:	b590      	push	{r4, r7, lr}
 800c376:	b083      	sub	sp, #12
 800c378:	af00      	add	r7, sp, #0
  int16_t accel_x;
  float accel;

  // H:8bit shift, Link h and l
  accel_x = (int16_t)((int16_t)(read_byte(ACCEL_XOUT_H) << 8) | read_byte(ACCEL_XOUT_L));
 800c37a:	203b      	movs	r0, #59	; 0x3b
 800c37c:	f7ff ffa2 	bl	800c2c4 <read_byte>
 800c380:	4603      	mov	r3, r0
 800c382:	021b      	lsls	r3, r3, #8
 800c384:	b21c      	sxth	r4, r3
 800c386:	203c      	movs	r0, #60	; 0x3c
 800c388:	f7ff ff9c 	bl	800c2c4 <read_byte>
 800c38c:	4603      	mov	r3, r0
 800c38e:	b21b      	sxth	r3, r3
 800c390:	4323      	orrs	r3, r4
 800c392:	80fb      	strh	r3, [r7, #6]

  accel = (float)(accel_x / ACCEL_FACTOR); // dps to accel
 800c394:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c398:	2b00      	cmp	r3, #0
 800c39a:	da01      	bge.n	800c3a0 <accel_read_x+0x2c>
 800c39c:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 800c3a0:	12db      	asrs	r3, r3, #11
 800c3a2:	b21b      	sxth	r3, r3
 800c3a4:	ee07 3a90 	vmov	s15, r3
 800c3a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c3ac:	edc7 7a00 	vstr	s15, [r7]
  return accel;
 800c3b0:	683b      	ldr	r3, [r7, #0]
 800c3b2:	ee07 3a90 	vmov	s15, r3
}
 800c3b6:	eeb0 0a67 	vmov.f32	s0, s15
 800c3ba:	370c      	adds	r7, #12
 800c3bc:	46bd      	mov	sp, r7
 800c3be:	bd90      	pop	{r4, r7, pc}

0800c3c0 <accel_read_y>:


float accel_read_y(void){
 800c3c0:	b590      	push	{r4, r7, lr}
 800c3c2:	b083      	sub	sp, #12
 800c3c4:	af00      	add	r7, sp, #0
  int16_t accel_y;
  float accel;

  // H:8bit shift, Link h and l
  accel_y = (int16_t)((int16_t)(read_byte(ACCEL_YOUT_H) << 8) | read_byte(ACCEL_YOUT_L));
 800c3c6:	203d      	movs	r0, #61	; 0x3d
 800c3c8:	f7ff ff7c 	bl	800c2c4 <read_byte>
 800c3cc:	4603      	mov	r3, r0
 800c3ce:	021b      	lsls	r3, r3, #8
 800c3d0:	b21c      	sxth	r4, r3
 800c3d2:	203e      	movs	r0, #62	; 0x3e
 800c3d4:	f7ff ff76 	bl	800c2c4 <read_byte>
 800c3d8:	4603      	mov	r3, r0
 800c3da:	b21b      	sxth	r3, r3
 800c3dc:	4323      	orrs	r3, r4
 800c3de:	80fb      	strh	r3, [r7, #6]

  accel = (float)(accel_y / ACCEL_FACTOR); // dps to accel
 800c3e0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c3e4:	2b00      	cmp	r3, #0
 800c3e6:	da01      	bge.n	800c3ec <accel_read_y+0x2c>
 800c3e8:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 800c3ec:	12db      	asrs	r3, r3, #11
 800c3ee:	b21b      	sxth	r3, r3
 800c3f0:	ee07 3a90 	vmov	s15, r3
 800c3f4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c3f8:	edc7 7a00 	vstr	s15, [r7]
  return accel;
 800c3fc:	683b      	ldr	r3, [r7, #0]
 800c3fe:	ee07 3a90 	vmov	s15, r3
}
 800c402:	eeb0 0a67 	vmov.f32	s0, s15
 800c406:	370c      	adds	r7, #12
 800c408:	46bd      	mov	sp, r7
 800c40a:	bd90      	pop	{r4, r7, pc}

0800c40c <accel_read_z>:


float accel_read_z(void){
 800c40c:	b590      	push	{r4, r7, lr}
 800c40e:	b083      	sub	sp, #12
 800c410:	af00      	add	r7, sp, #0
  int16_t accel_z;
  float accel;

  // H:8bit shift, Link h and l
  accel_z = (int16_t)((int16_t)(read_byte(ACCEL_ZOUT_H) << 8) | read_byte(ACCEL_ZOUT_L));
 800c412:	203f      	movs	r0, #63	; 0x3f
 800c414:	f7ff ff56 	bl	800c2c4 <read_byte>
 800c418:	4603      	mov	r3, r0
 800c41a:	021b      	lsls	r3, r3, #8
 800c41c:	b21c      	sxth	r4, r3
 800c41e:	2040      	movs	r0, #64	; 0x40
 800c420:	f7ff ff50 	bl	800c2c4 <read_byte>
 800c424:	4603      	mov	r3, r0
 800c426:	b21b      	sxth	r3, r3
 800c428:	4323      	orrs	r3, r4
 800c42a:	80fb      	strh	r3, [r7, #6]

  accel = (float)(accel_z / ACCEL_FACTOR-7); // dps to accel
 800c42c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c430:	2b00      	cmp	r3, #0
 800c432:	da01      	bge.n	800c438 <accel_read_z+0x2c>
 800c434:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 800c438:	12db      	asrs	r3, r3, #11
 800c43a:	b21b      	sxth	r3, r3
 800c43c:	3b07      	subs	r3, #7
 800c43e:	ee07 3a90 	vmov	s15, r3
 800c442:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c446:	edc7 7a00 	vstr	s15, [r7]
  return accel;
 800c44a:	683b      	ldr	r3, [r7, #0]
 800c44c:	ee07 3a90 	vmov	s15, r3
}
 800c450:	eeb0 0a67 	vmov.f32	s0, s15
 800c454:	370c      	adds	r7, #12
 800c456:	46bd      	mov	sp, r7
 800c458:	bd90      	pop	{r4, r7, pc}
 800c45a:	0000      	movs	r0, r0
 800c45c:	0000      	movs	r0, r0
	...

0800c460 <gyro_read_x>:


float gyro_read_x(void){
 800c460:	b590      	push	{r4, r7, lr}
 800c462:	b083      	sub	sp, #12
 800c464:	af00      	add	r7, sp, #0
  int16_t gyro_x;
  float omega;

  // H:8bit shift, Link h and l
  gyro_x = (int16_t)((int16_t)(read_byte(GYRO_XOUT_H) << 8) | read_byte(GYRO_XOUT_L));
 800c466:	2043      	movs	r0, #67	; 0x43
 800c468:	f7ff ff2c 	bl	800c2c4 <read_byte>
 800c46c:	4603      	mov	r3, r0
 800c46e:	021b      	lsls	r3, r3, #8
 800c470:	b21c      	sxth	r4, r3
 800c472:	2044      	movs	r0, #68	; 0x44
 800c474:	f7ff ff26 	bl	800c2c4 <read_byte>
 800c478:	4603      	mov	r3, r0
 800c47a:	b21b      	sxth	r3, r3
 800c47c:	4323      	orrs	r3, r4
 800c47e:	80fb      	strh	r3, [r7, #6]

  omega = (float)(gyro_x / GYRO_FACTOR+1.4); // dps to deg/sec
 800c480:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c484:	4618      	mov	r0, r3
 800c486:	f7f4 f845 	bl	8000514 <__aeabi_i2d>
 800c48a:	a30f      	add	r3, pc, #60	; (adr r3, 800c4c8 <gyro_read_x+0x68>)
 800c48c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c490:	f7f4 f9d4 	bl	800083c <__aeabi_ddiv>
 800c494:	4603      	mov	r3, r0
 800c496:	460c      	mov	r4, r1
 800c498:	4618      	mov	r0, r3
 800c49a:	4621      	mov	r1, r4
 800c49c:	a30c      	add	r3, pc, #48	; (adr r3, 800c4d0 <gyro_read_x+0x70>)
 800c49e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4a2:	f7f3 feeb 	bl	800027c <__adddf3>
 800c4a6:	4603      	mov	r3, r0
 800c4a8:	460c      	mov	r4, r1
 800c4aa:	4618      	mov	r0, r3
 800c4ac:	4621      	mov	r1, r4
 800c4ae:	f7f4 fb73 	bl	8000b98 <__aeabi_d2f>
 800c4b2:	4603      	mov	r3, r0
 800c4b4:	603b      	str	r3, [r7, #0]
  return omega;
 800c4b6:	683b      	ldr	r3, [r7, #0]
 800c4b8:	ee07 3a90 	vmov	s15, r3
}
 800c4bc:	eeb0 0a67 	vmov.f32	s0, s15
 800c4c0:	370c      	adds	r7, #12
 800c4c2:	46bd      	mov	sp, r7
 800c4c4:	bd90      	pop	{r4, r7, pc}
 800c4c6:	bf00      	nop
 800c4c8:	66666666 	.word	0x66666666
 800c4cc:	40306666 	.word	0x40306666
 800c4d0:	66666666 	.word	0x66666666
 800c4d4:	3ff66666 	.word	0x3ff66666

0800c4d8 <gyro_read_y>:


float gyro_read_y(void){
 800c4d8:	b590      	push	{r4, r7, lr}
 800c4da:	b083      	sub	sp, #12
 800c4dc:	af00      	add	r7, sp, #0
  int16_t gyro_y;
  float omega;

  // H:8bit shift, Link h and l
  gyro_y = (int16_t)((int16_t)(read_byte(GYRO_YOUT_H) << 8) | read_byte(GYRO_YOUT_L));
 800c4de:	2045      	movs	r0, #69	; 0x45
 800c4e0:	f7ff fef0 	bl	800c2c4 <read_byte>
 800c4e4:	4603      	mov	r3, r0
 800c4e6:	021b      	lsls	r3, r3, #8
 800c4e8:	b21c      	sxth	r4, r3
 800c4ea:	2046      	movs	r0, #70	; 0x46
 800c4ec:	f7ff feea 	bl	800c2c4 <read_byte>
 800c4f0:	4603      	mov	r3, r0
 800c4f2:	b21b      	sxth	r3, r3
 800c4f4:	4323      	orrs	r3, r4
 800c4f6:	80fb      	strh	r3, [r7, #6]

  omega = (float)(gyro_y / GYRO_FACTOR-0.75); // dps to deg/sec
 800c4f8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c4fc:	4618      	mov	r0, r3
 800c4fe:	f7f4 f809 	bl	8000514 <__aeabi_i2d>
 800c502:	a310      	add	r3, pc, #64	; (adr r3, 800c544 <gyro_read_y+0x6c>)
 800c504:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c508:	f7f4 f998 	bl	800083c <__aeabi_ddiv>
 800c50c:	4603      	mov	r3, r0
 800c50e:	460c      	mov	r4, r1
 800c510:	4618      	mov	r0, r3
 800c512:	4621      	mov	r1, r4
 800c514:	f04f 0200 	mov.w	r2, #0
 800c518:	4b09      	ldr	r3, [pc, #36]	; (800c540 <gyro_read_y+0x68>)
 800c51a:	f7f3 fead 	bl	8000278 <__aeabi_dsub>
 800c51e:	4603      	mov	r3, r0
 800c520:	460c      	mov	r4, r1
 800c522:	4618      	mov	r0, r3
 800c524:	4621      	mov	r1, r4
 800c526:	f7f4 fb37 	bl	8000b98 <__aeabi_d2f>
 800c52a:	4603      	mov	r3, r0
 800c52c:	603b      	str	r3, [r7, #0]
  return omega;
 800c52e:	683b      	ldr	r3, [r7, #0]
 800c530:	ee07 3a90 	vmov	s15, r3
}
 800c534:	eeb0 0a67 	vmov.f32	s0, s15
 800c538:	370c      	adds	r7, #12
 800c53a:	46bd      	mov	sp, r7
 800c53c:	bd90      	pop	{r4, r7, pc}
 800c53e:	bf00      	nop
 800c540:	3fe80000 	.word	0x3fe80000
 800c544:	66666666 	.word	0x66666666
 800c548:	40306666 	.word	0x40306666
 800c54c:	00000000 	.word	0x00000000

0800c550 <gyro_read_z>:


float gyro_read_z(void){
 800c550:	b5b0      	push	{r4, r5, r7, lr}
 800c552:	b082      	sub	sp, #8
 800c554:	af00      	add	r7, sp, #0
  int16_t gyro_z;
  float omega;

  // H:8bit shift, Link h and l
  gyro_z = (int16_t)((int16_t)(read_byte(GYRO_ZOUT_H) << 8) | read_byte(GYRO_ZOUT_L));
 800c556:	2047      	movs	r0, #71	; 0x47
 800c558:	f7ff feb4 	bl	800c2c4 <read_byte>
 800c55c:	4603      	mov	r3, r0
 800c55e:	021b      	lsls	r3, r3, #8
 800c560:	b21c      	sxth	r4, r3
 800c562:	2048      	movs	r0, #72	; 0x48
 800c564:	f7ff feae 	bl	800c2c4 <read_byte>
 800c568:	4603      	mov	r3, r0
 800c56a:	b21b      	sxth	r3, r3
 800c56c:	4323      	orrs	r3, r4
 800c56e:	80fb      	strh	r3, [r7, #6]

//  omega = (float)(gyro_z / GYRO_FACTOR+1.15); // dps to deg/sec
  omega = (float)(gyro_z / GYRO_FACTOR-gyro_drift_value); // dps to deg/sec
 800c570:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c574:	4618      	mov	r0, r3
 800c576:	f7f3 ffcd 	bl	8000514 <__aeabi_i2d>
 800c57a:	a314      	add	r3, pc, #80	; (adr r3, 800c5cc <gyro_read_z+0x7c>)
 800c57c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c580:	f7f4 f95c 	bl	800083c <__aeabi_ddiv>
 800c584:	4603      	mov	r3, r0
 800c586:	460c      	mov	r4, r1
 800c588:	4625      	mov	r5, r4
 800c58a:	461c      	mov	r4, r3
 800c58c:	4b0e      	ldr	r3, [pc, #56]	; (800c5c8 <gyro_read_z+0x78>)
 800c58e:	681b      	ldr	r3, [r3, #0]
 800c590:	4618      	mov	r0, r3
 800c592:	f7f3 ffd1 	bl	8000538 <__aeabi_f2d>
 800c596:	4602      	mov	r2, r0
 800c598:	460b      	mov	r3, r1
 800c59a:	4620      	mov	r0, r4
 800c59c:	4629      	mov	r1, r5
 800c59e:	f7f3 fe6b 	bl	8000278 <__aeabi_dsub>
 800c5a2:	4603      	mov	r3, r0
 800c5a4:	460c      	mov	r4, r1
 800c5a6:	4618      	mov	r0, r3
 800c5a8:	4621      	mov	r1, r4
 800c5aa:	f7f4 faf5 	bl	8000b98 <__aeabi_d2f>
 800c5ae:	4603      	mov	r3, r0
 800c5b0:	603b      	str	r3, [r7, #0]
  return omega;
 800c5b2:	683b      	ldr	r3, [r7, #0]
 800c5b4:	ee07 3a90 	vmov	s15, r3
}
 800c5b8:	eeb0 0a67 	vmov.f32	s0, s15
 800c5bc:	3708      	adds	r7, #8
 800c5be:	46bd      	mov	sp, r7
 800c5c0:	bdb0      	pop	{r4, r5, r7, pc}
 800c5c2:	bf00      	nop
 800c5c4:	f3af 8000 	nop.w
 800c5c8:	20000bf4 	.word	0x20000bf4
 800c5cc:	66666666 	.word	0x66666666
 800c5d0:	40306666 	.word	0x40306666

0800c5d4 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int __io_putchar(int c) {
 800c5d4:	b580      	push	{r7, lr}
 800c5d6:	b084      	sub	sp, #16
 800c5d8:	af00      	add	r7, sp, #0
 800c5da:	6078      	str	r0, [r7, #4]
  if( c == '\n' ) {
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	2b0a      	cmp	r3, #10
 800c5e0:	d108      	bne.n	800c5f4 <__io_putchar+0x20>
    int _c = '\r';
 800c5e2:	230d      	movs	r3, #13
 800c5e4:	60fb      	str	r3, [r7, #12]
    HAL_UART_Transmit(&huart1, &_c, 1, 1);
 800c5e6:	f107 010c 	add.w	r1, r7, #12
 800c5ea:	2301      	movs	r3, #1
 800c5ec:	2201      	movs	r2, #1
 800c5ee:	4807      	ldr	r0, [pc, #28]	; (800c60c <__io_putchar+0x38>)
 800c5f0:	f7f8 f847 	bl	8004682 <HAL_UART_Transmit>
  }
  HAL_UART_Transmit(&huart1, &c, 1, 1);
 800c5f4:	1d39      	adds	r1, r7, #4
 800c5f6:	2301      	movs	r3, #1
 800c5f8:	2201      	movs	r2, #1
 800c5fa:	4804      	ldr	r0, [pc, #16]	; (800c60c <__io_putchar+0x38>)
 800c5fc:	f7f8 f841 	bl	8004682 <HAL_UART_Transmit>
  return 0;
 800c600:	2300      	movs	r3, #0
}
 800c602:	4618      	mov	r0, r3
 800c604:	3710      	adds	r7, #16
 800c606:	46bd      	mov	sp, r7
 800c608:	bd80      	pop	{r7, pc}
 800c60a:	bf00      	nop
 800c60c:	20000b64 	.word	0x20000b64

0800c610 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c610:	b5b0      	push	{r4, r5, r7, lr}
 800c612:	ed2d 8b02 	vpush	{d8}
 800c616:	b08c      	sub	sp, #48	; 0x30
 800c618:	af00      	add	r7, sp, #0
 800c61a:	6078      	str	r0, [r7, #4]
	TIM_OC_InitTypeDef ConfigOC;
	ConfigOC.OCMode = TIM_OCMODE_PWM1;
 800c61c:	2360      	movs	r3, #96	; 0x60
 800c61e:	60bb      	str	r3, [r7, #8]
	ConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800c620:	2300      	movs	r3, #0
 800c622:	613b      	str	r3, [r7, #16]
	ConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800c624:	2300      	movs	r3, #0
 800c626:	61bb      	str	r3, [r7, #24]

	if(htim == &htim6){
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	4ab5      	ldr	r2, [pc, #724]	; (800c900 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 800c62c:	4293      	cmp	r3, r2
 800c62e:	f041 82c4 	bne.w	800dbba <HAL_TIM_PeriodElapsedCallback+0x15aa>
		cnt_l = TIM4 -> CNT;
 800c632:	4bb4      	ldr	r3, [pc, #720]	; (800c904 <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 800c634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c636:	ee07 3a90 	vmov	s15, r3
 800c63a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c63e:	4bb2      	ldr	r3, [pc, #712]	; (800c908 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 800c640:	edc3 7a00 	vstr	s15, [r3]
		cnt_r = TIM8 -> CNT;
 800c644:	4bb1      	ldr	r3, [pc, #708]	; (800c90c <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 800c646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c648:	ee07 3a90 	vmov	s15, r3
 800c64c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c650:	4baf      	ldr	r3, [pc, #700]	; (800c910 <HAL_TIM_PeriodElapsedCallback+0x300>)
 800c652:	edc3 7a00 	vstr	s15, [r3]
		if(cnt_l > 40000) cnt_l = cnt_l - 65535;		//0=>65505の値飛び検出用
 800c656:	4bac      	ldr	r3, [pc, #688]	; (800c908 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 800c658:	edd3 7a00 	vldr	s15, [r3]
 800c65c:	ed9f 7aad 	vldr	s14, [pc, #692]	; 800c914 <HAL_TIM_PeriodElapsedCallback+0x304>
 800c660:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c664:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c668:	dd09      	ble.n	800c67e <HAL_TIM_PeriodElapsedCallback+0x6e>
 800c66a:	4ba7      	ldr	r3, [pc, #668]	; (800c908 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 800c66c:	edd3 7a00 	vldr	s15, [r3]
 800c670:	ed9f 7aa9 	vldr	s14, [pc, #676]	; 800c918 <HAL_TIM_PeriodElapsedCallback+0x308>
 800c674:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c678:	4ba3      	ldr	r3, [pc, #652]	; (800c908 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 800c67a:	edc3 7a00 	vstr	s15, [r3]
		if(cnt_r > 40000) cnt_r = cnt_r - 65535;		//0=>65505の値飛び検出用
 800c67e:	4ba4      	ldr	r3, [pc, #656]	; (800c910 <HAL_TIM_PeriodElapsedCallback+0x300>)
 800c680:	edd3 7a00 	vldr	s15, [r3]
 800c684:	ed9f 7aa3 	vldr	s14, [pc, #652]	; 800c914 <HAL_TIM_PeriodElapsedCallback+0x304>
 800c688:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c68c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c690:	dd09      	ble.n	800c6a6 <HAL_TIM_PeriodElapsedCallback+0x96>
 800c692:	4b9f      	ldr	r3, [pc, #636]	; (800c910 <HAL_TIM_PeriodElapsedCallback+0x300>)
 800c694:	edd3 7a00 	vldr	s15, [r3]
 800c698:	ed9f 7a9f 	vldr	s14, [pc, #636]	; 800c918 <HAL_TIM_PeriodElapsedCallback+0x308>
 800c69c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c6a0:	4b9b      	ldr	r3, [pc, #620]	; (800c910 <HAL_TIM_PeriodElapsedCallback+0x300>)
 800c6a2:	edc3 7a00 	vstr	s15, [r3]
		cnt_r = cnt_r * -1;								//a回転方向合わせ
 800c6a6:	4b9a      	ldr	r3, [pc, #616]	; (800c910 <HAL_TIM_PeriodElapsedCallback+0x300>)
 800c6a8:	edd3 7a00 	vldr	s15, [r3]
 800c6ac:	eef1 7a67 	vneg.f32	s15, s15
 800c6b0:	4b97      	ldr	r3, [pc, #604]	; (800c910 <HAL_TIM_PeriodElapsedCallback+0x300>)
 800c6b2:	edc3 7a00 	vstr	s15, [r3]

		dist_l = dist_l + cnt_l * (DIAMETER * M_PI * 11 / 40 / 4096 / 4);
 800c6b6:	4b99      	ldr	r3, [pc, #612]	; (800c91c <HAL_TIM_PeriodElapsedCallback+0x30c>)
 800c6b8:	681b      	ldr	r3, [r3, #0]
 800c6ba:	4618      	mov	r0, r3
 800c6bc:	f7f3 ff3c 	bl	8000538 <__aeabi_f2d>
 800c6c0:	4604      	mov	r4, r0
 800c6c2:	460d      	mov	r5, r1
 800c6c4:	4b90      	ldr	r3, [pc, #576]	; (800c908 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 800c6c6:	681b      	ldr	r3, [r3, #0]
 800c6c8:	4618      	mov	r0, r3
 800c6ca:	f7f3 ff35 	bl	8000538 <__aeabi_f2d>
 800c6ce:	a388      	add	r3, pc, #544	; (adr r3, 800c8f0 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 800c6d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6d4:	f7f3 ff88 	bl	80005e8 <__aeabi_dmul>
 800c6d8:	4602      	mov	r2, r0
 800c6da:	460b      	mov	r3, r1
 800c6dc:	4620      	mov	r0, r4
 800c6de:	4629      	mov	r1, r5
 800c6e0:	f7f3 fdcc 	bl	800027c <__adddf3>
 800c6e4:	4603      	mov	r3, r0
 800c6e6:	460c      	mov	r4, r1
 800c6e8:	4618      	mov	r0, r3
 800c6ea:	4621      	mov	r1, r4
 800c6ec:	f7f4 fa54 	bl	8000b98 <__aeabi_d2f>
 800c6f0:	4602      	mov	r2, r0
 800c6f2:	4b8a      	ldr	r3, [pc, #552]	; (800c91c <HAL_TIM_PeriodElapsedCallback+0x30c>)
 800c6f4:	601a      	str	r2, [r3, #0]
		dist_r = dist_r + cnt_r * (DIAMETER * M_PI * 11 / 40 / 4096 / 4);
 800c6f6:	4b8a      	ldr	r3, [pc, #552]	; (800c920 <HAL_TIM_PeriodElapsedCallback+0x310>)
 800c6f8:	681b      	ldr	r3, [r3, #0]
 800c6fa:	4618      	mov	r0, r3
 800c6fc:	f7f3 ff1c 	bl	8000538 <__aeabi_f2d>
 800c700:	4604      	mov	r4, r0
 800c702:	460d      	mov	r5, r1
 800c704:	4b82      	ldr	r3, [pc, #520]	; (800c910 <HAL_TIM_PeriodElapsedCallback+0x300>)
 800c706:	681b      	ldr	r3, [r3, #0]
 800c708:	4618      	mov	r0, r3
 800c70a:	f7f3 ff15 	bl	8000538 <__aeabi_f2d>
 800c70e:	a378      	add	r3, pc, #480	; (adr r3, 800c8f0 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 800c710:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c714:	f7f3 ff68 	bl	80005e8 <__aeabi_dmul>
 800c718:	4602      	mov	r2, r0
 800c71a:	460b      	mov	r3, r1
 800c71c:	4620      	mov	r0, r4
 800c71e:	4629      	mov	r1, r5
 800c720:	f7f3 fdac 	bl	800027c <__adddf3>
 800c724:	4603      	mov	r3, r0
 800c726:	460c      	mov	r4, r1
 800c728:	4618      	mov	r0, r3
 800c72a:	4621      	mov	r1, r4
 800c72c:	f7f4 fa34 	bl	8000b98 <__aeabi_d2f>
 800c730:	4602      	mov	r2, r0
 800c732:	4b7b      	ldr	r3, [pc, #492]	; (800c920 <HAL_TIM_PeriodElapsedCallback+0x310>)
 800c734:	601a      	str	r2, [r3, #0]

		speed_l = cnt_l * (DIAMETER * M_PI * 11 / 40 / 4096 / 4) / 0.001;
 800c736:	4b74      	ldr	r3, [pc, #464]	; (800c908 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 800c738:	681b      	ldr	r3, [r3, #0]
 800c73a:	4618      	mov	r0, r3
 800c73c:	f7f3 fefc 	bl	8000538 <__aeabi_f2d>
 800c740:	a36b      	add	r3, pc, #428	; (adr r3, 800c8f0 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 800c742:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c746:	f7f3 ff4f 	bl	80005e8 <__aeabi_dmul>
 800c74a:	4603      	mov	r3, r0
 800c74c:	460c      	mov	r4, r1
 800c74e:	4618      	mov	r0, r3
 800c750:	4621      	mov	r1, r4
 800c752:	a369      	add	r3, pc, #420	; (adr r3, 800c8f8 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 800c754:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c758:	f7f4 f870 	bl	800083c <__aeabi_ddiv>
 800c75c:	4603      	mov	r3, r0
 800c75e:	460c      	mov	r4, r1
 800c760:	4618      	mov	r0, r3
 800c762:	4621      	mov	r1, r4
 800c764:	f7f4 fa18 	bl	8000b98 <__aeabi_d2f>
 800c768:	4602      	mov	r2, r0
 800c76a:	4b6e      	ldr	r3, [pc, #440]	; (800c924 <HAL_TIM_PeriodElapsedCallback+0x314>)
 800c76c:	601a      	str	r2, [r3, #0]
		speed_r = cnt_r * (DIAMETER * M_PI * 11 / 40 / 4096 / 4) / 0.001;
 800c76e:	4b68      	ldr	r3, [pc, #416]	; (800c910 <HAL_TIM_PeriodElapsedCallback+0x300>)
 800c770:	681b      	ldr	r3, [r3, #0]
 800c772:	4618      	mov	r0, r3
 800c774:	f7f3 fee0 	bl	8000538 <__aeabi_f2d>
 800c778:	a35d      	add	r3, pc, #372	; (adr r3, 800c8f0 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 800c77a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c77e:	f7f3 ff33 	bl	80005e8 <__aeabi_dmul>
 800c782:	4603      	mov	r3, r0
 800c784:	460c      	mov	r4, r1
 800c786:	4618      	mov	r0, r3
 800c788:	4621      	mov	r1, r4
 800c78a:	a35b      	add	r3, pc, #364	; (adr r3, 800c8f8 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 800c78c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c790:	f7f4 f854 	bl	800083c <__aeabi_ddiv>
 800c794:	4603      	mov	r3, r0
 800c796:	460c      	mov	r4, r1
 800c798:	4618      	mov	r0, r3
 800c79a:	4621      	mov	r1, r4
 800c79c:	f7f4 f9fc 	bl	8000b98 <__aeabi_d2f>
 800c7a0:	4602      	mov	r2, r0
 800c7a2:	4b61      	ldr	r3, [pc, #388]	; (800c928 <HAL_TIM_PeriodElapsedCallback+0x318>)
 800c7a4:	601a      	str	r2, [r3, #0]

		TIM4 -> CNT = 0;
 800c7a6:	4b57      	ldr	r3, [pc, #348]	; (800c904 <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 800c7a8:	2200      	movs	r2, #0
 800c7aa:	625a      	str	r2, [r3, #36]	; 0x24
		TIM8 -> CNT = 0;
 800c7ac:	4b57      	ldr	r3, [pc, #348]	; (800c90c <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 800c7ae:	2200      	movs	r2, #0
 800c7b0:	625a      	str	r2, [r3, #36]	; 0x24

		if(MF.FLAG.SPD){
 800c7b2:	4b5e      	ldr	r3, [pc, #376]	; (800c92c <HAL_TIM_PeriodElapsedCallback+0x31c>)
 800c7b4:	881b      	ldrh	r3, [r3, #0]
 800c7b6:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800c7ba:	b2db      	uxtb	r3, r3
 800c7bc:	2b00      	cmp	r3, #0
 800c7be:	f000 80fe 	beq.w	800c9be <HAL_TIM_PeriodElapsedCallback+0x3ae>
			target_speed_l += accel_l * 0.001;
 800c7c2:	4b5b      	ldr	r3, [pc, #364]	; (800c930 <HAL_TIM_PeriodElapsedCallback+0x320>)
 800c7c4:	681b      	ldr	r3, [r3, #0]
 800c7c6:	4618      	mov	r0, r3
 800c7c8:	f7f3 feb6 	bl	8000538 <__aeabi_f2d>
 800c7cc:	a34a      	add	r3, pc, #296	; (adr r3, 800c8f8 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 800c7ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7d2:	f7f3 ff09 	bl	80005e8 <__aeabi_dmul>
 800c7d6:	4603      	mov	r3, r0
 800c7d8:	460c      	mov	r4, r1
 800c7da:	4625      	mov	r5, r4
 800c7dc:	461c      	mov	r4, r3
 800c7de:	4b55      	ldr	r3, [pc, #340]	; (800c934 <HAL_TIM_PeriodElapsedCallback+0x324>)
 800c7e0:	681b      	ldr	r3, [r3, #0]
 800c7e2:	4618      	mov	r0, r3
 800c7e4:	f7f3 fea8 	bl	8000538 <__aeabi_f2d>
 800c7e8:	4602      	mov	r2, r0
 800c7ea:	460b      	mov	r3, r1
 800c7ec:	4620      	mov	r0, r4
 800c7ee:	4629      	mov	r1, r5
 800c7f0:	f7f3 fd44 	bl	800027c <__adddf3>
 800c7f4:	4603      	mov	r3, r0
 800c7f6:	460c      	mov	r4, r1
 800c7f8:	4618      	mov	r0, r3
 800c7fa:	4621      	mov	r1, r4
 800c7fc:	f7f4 f9cc 	bl	8000b98 <__aeabi_d2f>
 800c800:	4602      	mov	r2, r0
 800c802:	4b4c      	ldr	r3, [pc, #304]	; (800c934 <HAL_TIM_PeriodElapsedCallback+0x324>)
 800c804:	601a      	str	r2, [r3, #0]
			target_speed_l = max(min(target_speed_l, speed_max_l), speed_min_l);
 800c806:	4b4b      	ldr	r3, [pc, #300]	; (800c934 <HAL_TIM_PeriodElapsedCallback+0x324>)
 800c808:	ed93 7a00 	vldr	s14, [r3]
 800c80c:	4b4a      	ldr	r3, [pc, #296]	; (800c938 <HAL_TIM_PeriodElapsedCallback+0x328>)
 800c80e:	edd3 7a00 	vldr	s15, [r3]
 800c812:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800c816:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c81a:	dd03      	ble.n	800c824 <HAL_TIM_PeriodElapsedCallback+0x214>
 800c81c:	4b46      	ldr	r3, [pc, #280]	; (800c938 <HAL_TIM_PeriodElapsedCallback+0x328>)
 800c81e:	edd3 7a00 	vldr	s15, [r3]
 800c822:	e002      	b.n	800c82a <HAL_TIM_PeriodElapsedCallback+0x21a>
 800c824:	4b43      	ldr	r3, [pc, #268]	; (800c934 <HAL_TIM_PeriodElapsedCallback+0x324>)
 800c826:	edd3 7a00 	vldr	s15, [r3]
 800c82a:	4b44      	ldr	r3, [pc, #272]	; (800c93c <HAL_TIM_PeriodElapsedCallback+0x32c>)
 800c82c:	ed93 7a00 	vldr	s14, [r3]
 800c830:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c834:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c838:	dd10      	ble.n	800c85c <HAL_TIM_PeriodElapsedCallback+0x24c>
 800c83a:	4b3e      	ldr	r3, [pc, #248]	; (800c934 <HAL_TIM_PeriodElapsedCallback+0x324>)
 800c83c:	ed93 7a00 	vldr	s14, [r3]
 800c840:	4b3d      	ldr	r3, [pc, #244]	; (800c938 <HAL_TIM_PeriodElapsedCallback+0x328>)
 800c842:	edd3 7a00 	vldr	s15, [r3]
 800c846:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800c84a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c84e:	dd02      	ble.n	800c856 <HAL_TIM_PeriodElapsedCallback+0x246>
 800c850:	4b39      	ldr	r3, [pc, #228]	; (800c938 <HAL_TIM_PeriodElapsedCallback+0x328>)
 800c852:	681b      	ldr	r3, [r3, #0]
 800c854:	e004      	b.n	800c860 <HAL_TIM_PeriodElapsedCallback+0x250>
 800c856:	4b37      	ldr	r3, [pc, #220]	; (800c934 <HAL_TIM_PeriodElapsedCallback+0x324>)
 800c858:	681b      	ldr	r3, [r3, #0]
 800c85a:	e001      	b.n	800c860 <HAL_TIM_PeriodElapsedCallback+0x250>
 800c85c:	4b37      	ldr	r3, [pc, #220]	; (800c93c <HAL_TIM_PeriodElapsedCallback+0x32c>)
 800c85e:	681b      	ldr	r3, [r3, #0]
 800c860:	4a34      	ldr	r2, [pc, #208]	; (800c934 <HAL_TIM_PeriodElapsedCallback+0x324>)
 800c862:	6013      	str	r3, [r2, #0]
			epsilon_l = target_speed_l - speed_l;
 800c864:	4b33      	ldr	r3, [pc, #204]	; (800c934 <HAL_TIM_PeriodElapsedCallback+0x324>)
 800c866:	ed93 7a00 	vldr	s14, [r3]
 800c86a:	4b2e      	ldr	r3, [pc, #184]	; (800c924 <HAL_TIM_PeriodElapsedCallback+0x314>)
 800c86c:	edd3 7a00 	vldr	s15, [r3]
 800c870:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c874:	4b32      	ldr	r3, [pc, #200]	; (800c940 <HAL_TIM_PeriodElapsedCallback+0x330>)
 800c876:	edc3 7a00 	vstr	s15, [r3]
			pulse_l = Kp * epsilon_l;
 800c87a:	4b31      	ldr	r3, [pc, #196]	; (800c940 <HAL_TIM_PeriodElapsedCallback+0x330>)
 800c87c:	edd3 7a00 	vldr	s15, [r3]
 800c880:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800c884:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c888:	4b2e      	ldr	r3, [pc, #184]	; (800c944 <HAL_TIM_PeriodElapsedCallback+0x334>)
 800c88a:	edc3 7a00 	vstr	s15, [r3]

			target_speed_r += accel_r * 0.001;
 800c88e:	4b2e      	ldr	r3, [pc, #184]	; (800c948 <HAL_TIM_PeriodElapsedCallback+0x338>)
 800c890:	681b      	ldr	r3, [r3, #0]
 800c892:	4618      	mov	r0, r3
 800c894:	f7f3 fe50 	bl	8000538 <__aeabi_f2d>
 800c898:	a317      	add	r3, pc, #92	; (adr r3, 800c8f8 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 800c89a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c89e:	f7f3 fea3 	bl	80005e8 <__aeabi_dmul>
 800c8a2:	4603      	mov	r3, r0
 800c8a4:	460c      	mov	r4, r1
 800c8a6:	4625      	mov	r5, r4
 800c8a8:	461c      	mov	r4, r3
 800c8aa:	4b28      	ldr	r3, [pc, #160]	; (800c94c <HAL_TIM_PeriodElapsedCallback+0x33c>)
 800c8ac:	681b      	ldr	r3, [r3, #0]
 800c8ae:	4618      	mov	r0, r3
 800c8b0:	f7f3 fe42 	bl	8000538 <__aeabi_f2d>
 800c8b4:	4602      	mov	r2, r0
 800c8b6:	460b      	mov	r3, r1
 800c8b8:	4620      	mov	r0, r4
 800c8ba:	4629      	mov	r1, r5
 800c8bc:	f7f3 fcde 	bl	800027c <__adddf3>
 800c8c0:	4603      	mov	r3, r0
 800c8c2:	460c      	mov	r4, r1
 800c8c4:	4618      	mov	r0, r3
 800c8c6:	4621      	mov	r1, r4
 800c8c8:	f7f4 f966 	bl	8000b98 <__aeabi_d2f>
 800c8cc:	4602      	mov	r2, r0
 800c8ce:	4b1f      	ldr	r3, [pc, #124]	; (800c94c <HAL_TIM_PeriodElapsedCallback+0x33c>)
 800c8d0:	601a      	str	r2, [r3, #0]
			target_speed_r = max(min(target_speed_r, speed_max_r), speed_min_r);
 800c8d2:	4b1e      	ldr	r3, [pc, #120]	; (800c94c <HAL_TIM_PeriodElapsedCallback+0x33c>)
 800c8d4:	ed93 7a00 	vldr	s14, [r3]
 800c8d8:	4b1d      	ldr	r3, [pc, #116]	; (800c950 <HAL_TIM_PeriodElapsedCallback+0x340>)
 800c8da:	edd3 7a00 	vldr	s15, [r3]
 800c8de:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800c8e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c8e6:	dd35      	ble.n	800c954 <HAL_TIM_PeriodElapsedCallback+0x344>
 800c8e8:	4b19      	ldr	r3, [pc, #100]	; (800c950 <HAL_TIM_PeriodElapsedCallback+0x340>)
 800c8ea:	edd3 7a00 	vldr	s15, [r3]
 800c8ee:	e034      	b.n	800c95a <HAL_TIM_PeriodElapsedCallback+0x34a>
 800c8f0:	775e3793 	.word	0x775e3793
 800c8f4:	3f552a9e 	.word	0x3f552a9e
 800c8f8:	d2f1a9fc 	.word	0xd2f1a9fc
 800c8fc:	3f50624d 	.word	0x3f50624d
 800c900:	20000bb4 	.word	0x20000bb4
 800c904:	40000800 	.word	0x40000800
 800c908:	200002ac 	.word	0x200002ac
 800c90c:	40010400 	.word	0x40010400
 800c910:	20000bac 	.word	0x20000bac
 800c914:	471c4000 	.word	0x471c4000
 800c918:	477fff00 	.word	0x477fff00
 800c91c:	200015c4 	.word	0x200015c4
 800c920:	20000aec 	.word	0x20000aec
 800c924:	20000af0 	.word	0x20000af0
 800c928:	200002bc 	.word	0x200002bc
 800c92c:	20000f68 	.word	0x20000f68
 800c930:	20000d58 	.word	0x20000d58
 800c934:	20000bfc 	.word	0x20000bfc
 800c938:	2000077c 	.word	0x2000077c
 800c93c:	20000b54 	.word	0x20000b54
 800c940:	20000b60 	.word	0x20000b60
 800c944:	20000ba8 	.word	0x20000ba8
 800c948:	20000ae4 	.word	0x20000ae4
 800c94c:	200001a0 	.word	0x200001a0
 800c950:	200001a4 	.word	0x200001a4
 800c954:	4ba4      	ldr	r3, [pc, #656]	; (800cbe8 <HAL_TIM_PeriodElapsedCallback+0x5d8>)
 800c956:	edd3 7a00 	vldr	s15, [r3]
 800c95a:	4ba4      	ldr	r3, [pc, #656]	; (800cbec <HAL_TIM_PeriodElapsedCallback+0x5dc>)
 800c95c:	ed93 7a00 	vldr	s14, [r3]
 800c960:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c964:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c968:	dd10      	ble.n	800c98c <HAL_TIM_PeriodElapsedCallback+0x37c>
 800c96a:	4b9f      	ldr	r3, [pc, #636]	; (800cbe8 <HAL_TIM_PeriodElapsedCallback+0x5d8>)
 800c96c:	ed93 7a00 	vldr	s14, [r3]
 800c970:	4b9f      	ldr	r3, [pc, #636]	; (800cbf0 <HAL_TIM_PeriodElapsedCallback+0x5e0>)
 800c972:	edd3 7a00 	vldr	s15, [r3]
 800c976:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800c97a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c97e:	dd02      	ble.n	800c986 <HAL_TIM_PeriodElapsedCallback+0x376>
 800c980:	4b9b      	ldr	r3, [pc, #620]	; (800cbf0 <HAL_TIM_PeriodElapsedCallback+0x5e0>)
 800c982:	681b      	ldr	r3, [r3, #0]
 800c984:	e004      	b.n	800c990 <HAL_TIM_PeriodElapsedCallback+0x380>
 800c986:	4b98      	ldr	r3, [pc, #608]	; (800cbe8 <HAL_TIM_PeriodElapsedCallback+0x5d8>)
 800c988:	681b      	ldr	r3, [r3, #0]
 800c98a:	e001      	b.n	800c990 <HAL_TIM_PeriodElapsedCallback+0x380>
 800c98c:	4b97      	ldr	r3, [pc, #604]	; (800cbec <HAL_TIM_PeriodElapsedCallback+0x5dc>)
 800c98e:	681b      	ldr	r3, [r3, #0]
 800c990:	4a95      	ldr	r2, [pc, #596]	; (800cbe8 <HAL_TIM_PeriodElapsedCallback+0x5d8>)
 800c992:	6013      	str	r3, [r2, #0]
			epsilon_r = target_speed_r - speed_r;
 800c994:	4b94      	ldr	r3, [pc, #592]	; (800cbe8 <HAL_TIM_PeriodElapsedCallback+0x5d8>)
 800c996:	ed93 7a00 	vldr	s14, [r3]
 800c99a:	4b96      	ldr	r3, [pc, #600]	; (800cbf4 <HAL_TIM_PeriodElapsedCallback+0x5e4>)
 800c99c:	edd3 7a00 	vldr	s15, [r3]
 800c9a0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c9a4:	4b94      	ldr	r3, [pc, #592]	; (800cbf8 <HAL_TIM_PeriodElapsedCallback+0x5e8>)
 800c9a6:	edc3 7a00 	vstr	s15, [r3]
			pulse_r = Kp * epsilon_r;
 800c9aa:	4b93      	ldr	r3, [pc, #588]	; (800cbf8 <HAL_TIM_PeriodElapsedCallback+0x5e8>)
 800c9ac:	edd3 7a00 	vldr	s15, [r3]
 800c9b0:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800c9b4:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c9b8:	4b90      	ldr	r3, [pc, #576]	; (800cbfc <HAL_TIM_PeriodElapsedCallback+0x5ec>)
 800c9ba:	edc3 7a00 	vstr	s15, [r3]
		}

		log_cnt ++;
 800c9be:	4b90      	ldr	r3, [pc, #576]	; (800cc00 <HAL_TIM_PeriodElapsedCallback+0x5f0>)
 800c9c0:	681b      	ldr	r3, [r3, #0]
 800c9c2:	3301      	adds	r3, #1
 800c9c4:	4a8e      	ldr	r2, [pc, #568]	; (800cc00 <HAL_TIM_PeriodElapsedCallback+0x5f0>)
 800c9c6:	6013      	str	r3, [r2, #0]

		if(log_cnt >= 5 && MF2.FLAG.LOG){
 800c9c8:	4b8d      	ldr	r3, [pc, #564]	; (800cc00 <HAL_TIM_PeriodElapsedCallback+0x5f0>)
 800c9ca:	681b      	ldr	r3, [r3, #0]
 800c9cc:	2b04      	cmp	r3, #4
 800c9ce:	dd37      	ble.n	800ca40 <HAL_TIM_PeriodElapsedCallback+0x430>
 800c9d0:	4b8c      	ldr	r3, [pc, #560]	; (800cc04 <HAL_TIM_PeriodElapsedCallback+0x5f4>)
 800c9d2:	881b      	ldrh	r3, [r3, #0]
 800c9d4:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800c9d8:	b2db      	uxtb	r3, r3
 800c9da:	2b00      	cmp	r3, #0
 800c9dc:	d030      	beq.n	800ca40 <HAL_TIM_PeriodElapsedCallback+0x430>
			log_cnt = 0;
 800c9de:	4b88      	ldr	r3, [pc, #544]	; (800cc00 <HAL_TIM_PeriodElapsedCallback+0x5f0>)
 800c9e0:	2200      	movs	r2, #0
 800c9e2:	601a      	str	r2, [r3, #0]
			if(get_cnt < log_allay){
 800c9e4:	4b88      	ldr	r3, [pc, #544]	; (800cc08 <HAL_TIM_PeriodElapsedCallback+0x5f8>)
 800c9e6:	681b      	ldr	r3, [r3, #0]
 800c9e8:	2bc7      	cmp	r3, #199	; 0xc7
 800c9ea:	dc29      	bgt.n	800ca40 <HAL_TIM_PeriodElapsedCallback+0x430>
				get_speed_l[get_cnt] = speed_l;
 800c9ec:	4b87      	ldr	r3, [pc, #540]	; (800cc0c <HAL_TIM_PeriodElapsedCallback+0x5fc>)
 800c9ee:	edd3 7a00 	vldr	s15, [r3]
 800c9f2:	4b85      	ldr	r3, [pc, #532]	; (800cc08 <HAL_TIM_PeriodElapsedCallback+0x5f8>)
 800c9f4:	681b      	ldr	r3, [r3, #0]
 800c9f6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c9fa:	ee17 1a90 	vmov	r1, s15
 800c9fe:	4a84      	ldr	r2, [pc, #528]	; (800cc10 <HAL_TIM_PeriodElapsedCallback+0x600>)
 800ca00:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				get_speed_r[get_cnt] = speed_r;
 800ca04:	4b7b      	ldr	r3, [pc, #492]	; (800cbf4 <HAL_TIM_PeriodElapsedCallback+0x5e4>)
 800ca06:	edd3 7a00 	vldr	s15, [r3]
 800ca0a:	4b7f      	ldr	r3, [pc, #508]	; (800cc08 <HAL_TIM_PeriodElapsedCallback+0x5f8>)
 800ca0c:	681b      	ldr	r3, [r3, #0]
 800ca0e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ca12:	ee17 1a90 	vmov	r1, s15
 800ca16:	4a7f      	ldr	r2, [pc, #508]	; (800cc14 <HAL_TIM_PeriodElapsedCallback+0x604>)
 800ca18:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				get_omega[get_cnt] = gyro_read_z();
 800ca1c:	f7ff fd98 	bl	800c550 <gyro_read_z>
 800ca20:	eef0 7a40 	vmov.f32	s15, s0
 800ca24:	4b78      	ldr	r3, [pc, #480]	; (800cc08 <HAL_TIM_PeriodElapsedCallback+0x5f8>)
 800ca26:	681b      	ldr	r3, [r3, #0]
 800ca28:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ca2c:	ee17 1a90 	vmov	r1, s15
 800ca30:	4a79      	ldr	r2, [pc, #484]	; (800cc18 <HAL_TIM_PeriodElapsedCallback+0x608>)
 800ca32:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				get_cnt++;
 800ca36:	4b74      	ldr	r3, [pc, #464]	; (800cc08 <HAL_TIM_PeriodElapsedCallback+0x5f8>)
 800ca38:	681b      	ldr	r3, [r3, #0]
 800ca3a:	3301      	adds	r3, #1
 800ca3c:	4a72      	ldr	r2, [pc, #456]	; (800cc08 <HAL_TIM_PeriodElapsedCallback+0x5f8>)
 800ca3e:	6013      	str	r3, [r2, #0]
//		degree_x += accel_read_x() * 0.001;
//		degree_y += accel_read_y() * 0.001;
//		degree_z += accel_read_z() * 0.001;
//		degree_x += gyro_read_x() * 0.001;
//		degree_y += gyro_read_y() * 0.001;
		degree_z += gyro_read_z() * 0.001;
 800ca40:	f7ff fd86 	bl	800c550 <gyro_read_z>
 800ca44:	ee10 3a10 	vmov	r3, s0
 800ca48:	4618      	mov	r0, r3
 800ca4a:	f7f3 fd75 	bl	8000538 <__aeabi_f2d>
 800ca4e:	a362      	add	r3, pc, #392	; (adr r3, 800cbd8 <HAL_TIM_PeriodElapsedCallback+0x5c8>)
 800ca50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca54:	f7f3 fdc8 	bl	80005e8 <__aeabi_dmul>
 800ca58:	4603      	mov	r3, r0
 800ca5a:	460c      	mov	r4, r1
 800ca5c:	4625      	mov	r5, r4
 800ca5e:	461c      	mov	r4, r3
 800ca60:	4b6e      	ldr	r3, [pc, #440]	; (800cc1c <HAL_TIM_PeriodElapsedCallback+0x60c>)
 800ca62:	681b      	ldr	r3, [r3, #0]
 800ca64:	4618      	mov	r0, r3
 800ca66:	f7f3 fd67 	bl	8000538 <__aeabi_f2d>
 800ca6a:	4602      	mov	r2, r0
 800ca6c:	460b      	mov	r3, r1
 800ca6e:	4620      	mov	r0, r4
 800ca70:	4629      	mov	r1, r5
 800ca72:	f7f3 fc03 	bl	800027c <__adddf3>
 800ca76:	4603      	mov	r3, r0
 800ca78:	460c      	mov	r4, r1
 800ca7a:	4618      	mov	r0, r3
 800ca7c:	4621      	mov	r1, r4
 800ca7e:	f7f4 f88b 	bl	8000b98 <__aeabi_d2f>
 800ca82:	4602      	mov	r2, r0
 800ca84:	4b65      	ldr	r3, [pc, #404]	; (800cc1c <HAL_TIM_PeriodElapsedCallback+0x60c>)
 800ca86:	601a      	str	r2, [r3, #0]

		//gyro ドリフト量計算
		if(MF2.FLAG.GDRIFT){
 800ca88:	4b5e      	ldr	r3, [pc, #376]	; (800cc04 <HAL_TIM_PeriodElapsedCallback+0x5f4>)
 800ca8a:	881b      	ldrh	r3, [r3, #0]
 800ca8c:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800ca90:	b2db      	uxtb	r3, r3
 800ca92:	2b00      	cmp	r3, #0
 800ca94:	d04d      	beq.n	800cb32 <HAL_TIM_PeriodElapsedCallback+0x522>
			gyro_cnt ++;
 800ca96:	4b62      	ldr	r3, [pc, #392]	; (800cc20 <HAL_TIM_PeriodElapsedCallback+0x610>)
 800ca98:	681b      	ldr	r3, [r3, #0]
 800ca9a:	3301      	adds	r3, #1
 800ca9c:	4a60      	ldr	r2, [pc, #384]	; (800cc20 <HAL_TIM_PeriodElapsedCallback+0x610>)
 800ca9e:	6013      	str	r3, [r2, #0]
			if(gyro_cnt >= 2)dif_omega_z += old_omega_z - gyro_read_z();
 800caa0:	4b5f      	ldr	r3, [pc, #380]	; (800cc20 <HAL_TIM_PeriodElapsedCallback+0x610>)
 800caa2:	681b      	ldr	r3, [r3, #0]
 800caa4:	2b01      	cmp	r3, #1
 800caa6:	dd10      	ble.n	800caca <HAL_TIM_PeriodElapsedCallback+0x4ba>
 800caa8:	4b5e      	ldr	r3, [pc, #376]	; (800cc24 <HAL_TIM_PeriodElapsedCallback+0x614>)
 800caaa:	ed93 8a00 	vldr	s16, [r3]
 800caae:	f7ff fd4f 	bl	800c550 <gyro_read_z>
 800cab2:	eef0 7a40 	vmov.f32	s15, s0
 800cab6:	ee38 7a67 	vsub.f32	s14, s16, s15
 800caba:	4b5b      	ldr	r3, [pc, #364]	; (800cc28 <HAL_TIM_PeriodElapsedCallback+0x618>)
 800cabc:	edd3 7a00 	vldr	s15, [r3]
 800cac0:	ee77 7a27 	vadd.f32	s15, s14, s15
 800cac4:	4b58      	ldr	r3, [pc, #352]	; (800cc28 <HAL_TIM_PeriodElapsedCallback+0x618>)
 800cac6:	edc3 7a00 	vstr	s15, [r3]
			old_omega_z = gyro_read_z();
 800caca:	f7ff fd41 	bl	800c550 <gyro_read_z>
 800cace:	eef0 7a40 	vmov.f32	s15, s0
 800cad2:	4b54      	ldr	r3, [pc, #336]	; (800cc24 <HAL_TIM_PeriodElapsedCallback+0x614>)
 800cad4:	edc3 7a00 	vstr	s15, [r3]
			full_led_write(YELLOW);
 800cad8:	2006      	movs	r0, #6
 800cada:	f004 ff6d 	bl	80119b8 <full_led_write>
			if(gyro_cnt >= 1001) {
 800cade:	4b50      	ldr	r3, [pc, #320]	; (800cc20 <HAL_TIM_PeriodElapsedCallback+0x610>)
 800cae0:	681b      	ldr	r3, [r3, #0]
 800cae2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800cae6:	dd1c      	ble.n	800cb22 <HAL_TIM_PeriodElapsedCallback+0x512>
				MF2.FLAG.GDRIFT = 0;
 800cae8:	4a46      	ldr	r2, [pc, #280]	; (800cc04 <HAL_TIM_PeriodElapsedCallback+0x5f4>)
 800caea:	8813      	ldrh	r3, [r2, #0]
 800caec:	f36f 13c7 	bfc	r3, #7, #1
 800caf0:	8013      	strh	r3, [r2, #0]
				gyro_drift_value = dif_omega_z / gyro_cnt-1;
 800caf2:	4b4d      	ldr	r3, [pc, #308]	; (800cc28 <HAL_TIM_PeriodElapsedCallback+0x618>)
 800caf4:	edd3 6a00 	vldr	s13, [r3]
 800caf8:	4b49      	ldr	r3, [pc, #292]	; (800cc20 <HAL_TIM_PeriodElapsedCallback+0x610>)
 800cafa:	681b      	ldr	r3, [r3, #0]
 800cafc:	ee07 3a90 	vmov	s15, r3
 800cb00:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800cb04:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cb08:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cb0c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800cb10:	4b46      	ldr	r3, [pc, #280]	; (800cc2c <HAL_TIM_PeriodElapsedCallback+0x61c>)
 800cb12:	edc3 7a00 	vstr	s15, [r3]
				gyro_cnt = 0;
 800cb16:	4b42      	ldr	r3, [pc, #264]	; (800cc20 <HAL_TIM_PeriodElapsedCallback+0x610>)
 800cb18:	2200      	movs	r2, #0
 800cb1a:	601a      	str	r2, [r3, #0]
				full_led_write(BLUEGREEN);
 800cb1c:	2004      	movs	r0, #4
 800cb1e:	f004 ff4b 	bl	80119b8 <full_led_write>
			}
			degree_z = 0;
 800cb22:	4b3e      	ldr	r3, [pc, #248]	; (800cc1c <HAL_TIM_PeriodElapsedCallback+0x60c>)
 800cb24:	f04f 0200 	mov.w	r2, #0
 800cb28:	601a      	str	r2, [r3, #0]
			target_degree_z = 0;
 800cb2a:	4b41      	ldr	r3, [pc, #260]	; (800cc30 <HAL_TIM_PeriodElapsedCallback+0x620>)
 800cb2c:	f04f 0200 	mov.w	r2, #0
 800cb30:	601a      	str	r2, [r3, #0]
		}


		if(MF2.FLAG.ENKAI){
 800cb32:	4b34      	ldr	r3, [pc, #208]	; (800cc04 <HAL_TIM_PeriodElapsedCallback+0x5f4>)
 800cb34:	881b      	ldrh	r3, [r3, #0]
 800cb36:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800cb3a:	b2db      	uxtb	r3, r3
 800cb3c:	2b00      	cmp	r3, #0
 800cb3e:	f000 80d6 	beq.w	800ccee <HAL_TIM_PeriodElapsedCallback+0x6de>
			target_dist = TREAD*M_PI/360*(degree_z-target_degree_z);
 800cb42:	4b36      	ldr	r3, [pc, #216]	; (800cc1c <HAL_TIM_PeriodElapsedCallback+0x60c>)
 800cb44:	ed93 7a00 	vldr	s14, [r3]
 800cb48:	4b39      	ldr	r3, [pc, #228]	; (800cc30 <HAL_TIM_PeriodElapsedCallback+0x620>)
 800cb4a:	edd3 7a00 	vldr	s15, [r3]
 800cb4e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cb52:	ee17 0a90 	vmov	r0, s15
 800cb56:	f7f3 fcef 	bl	8000538 <__aeabi_f2d>
 800cb5a:	a321      	add	r3, pc, #132	; (adr r3, 800cbe0 <HAL_TIM_PeriodElapsedCallback+0x5d0>)
 800cb5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb60:	f7f3 fd42 	bl	80005e8 <__aeabi_dmul>
 800cb64:	4603      	mov	r3, r0
 800cb66:	460c      	mov	r4, r1
 800cb68:	4618      	mov	r0, r3
 800cb6a:	4621      	mov	r1, r4
 800cb6c:	f7f4 f814 	bl	8000b98 <__aeabi_d2f>
 800cb70:	4602      	mov	r2, r0
 800cb72:	4b30      	ldr	r3, [pc, #192]	; (800cc34 <HAL_TIM_PeriodElapsedCallback+0x624>)
 800cb74:	601a      	str	r2, [r3, #0]
			if(target_dist > 0){
 800cb76:	4b2f      	ldr	r3, [pc, #188]	; (800cc34 <HAL_TIM_PeriodElapsedCallback+0x624>)
 800cb78:	edd3 7a00 	vldr	s15, [r3]
 800cb7c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800cb80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cb84:	dd5c      	ble.n	800cc40 <HAL_TIM_PeriodElapsedCallback+0x630>
				target_speed_l = sqrt(2*accel_l*target_dist);
 800cb86:	4b2c      	ldr	r3, [pc, #176]	; (800cc38 <HAL_TIM_PeriodElapsedCallback+0x628>)
 800cb88:	edd3 7a00 	vldr	s15, [r3]
 800cb8c:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800cb90:	4b28      	ldr	r3, [pc, #160]	; (800cc34 <HAL_TIM_PeriodElapsedCallback+0x624>)
 800cb92:	edd3 7a00 	vldr	s15, [r3]
 800cb96:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cb9a:	ee17 0a90 	vmov	r0, s15
 800cb9e:	f7f3 fccb 	bl	8000538 <__aeabi_f2d>
 800cba2:	4603      	mov	r3, r0
 800cba4:	460c      	mov	r4, r1
 800cba6:	ec44 3b10 	vmov	d0, r3, r4
 800cbaa:	f006 fc9f 	bl	80134ec <sqrt>
 800cbae:	ec54 3b10 	vmov	r3, r4, d0
 800cbb2:	4618      	mov	r0, r3
 800cbb4:	4621      	mov	r1, r4
 800cbb6:	f7f3 ffef 	bl	8000b98 <__aeabi_d2f>
 800cbba:	4602      	mov	r2, r0
 800cbbc:	4b1f      	ldr	r3, [pc, #124]	; (800cc3c <HAL_TIM_PeriodElapsedCallback+0x62c>)
 800cbbe:	601a      	str	r2, [r3, #0]
				target_speed_r = -1 * target_speed_l;
 800cbc0:	4b1e      	ldr	r3, [pc, #120]	; (800cc3c <HAL_TIM_PeriodElapsedCallback+0x62c>)
 800cbc2:	edd3 7a00 	vldr	s15, [r3]
 800cbc6:	eef1 7a67 	vneg.f32	s15, s15
 800cbca:	4b07      	ldr	r3, [pc, #28]	; (800cbe8 <HAL_TIM_PeriodElapsedCallback+0x5d8>)
 800cbcc:	edc3 7a00 	vstr	s15, [r3]
 800cbd0:	e063      	b.n	800cc9a <HAL_TIM_PeriodElapsedCallback+0x68a>
 800cbd2:	bf00      	nop
 800cbd4:	f3af 8000 	nop.w
 800cbd8:	d2f1a9fc 	.word	0xd2f1a9fc
 800cbdc:	3f50624d 	.word	0x3f50624d
 800cbe0:	d7653223 	.word	0xd7653223
 800cbe4:	3fe26e40 	.word	0x3fe26e40
 800cbe8:	200001a0 	.word	0x200001a0
 800cbec:	20000f6c 	.word	0x20000f6c
 800cbf0:	200001a4 	.word	0x200001a4
 800cbf4:	200002bc 	.word	0x200002bc
 800cbf8:	20000c08 	.word	0x20000c08
 800cbfc:	20000780 	.word	0x20000780
 800cc00:	20000108 	.word	0x20000108
 800cc04:	20000f64 	.word	0x20000f64
 800cc08:	20000110 	.word	0x20000110
 800cc0c:	20000af0 	.word	0x20000af0
 800cc10:	20000784 	.word	0x20000784
 800cc14:	2000045c 	.word	0x2000045c
 800cc18:	200012a4 	.word	0x200012a4
 800cc1c:	20000b5c 	.word	0x20000b5c
 800cc20:	2000010c 	.word	0x2000010c
 800cc24:	200015cc 	.word	0x200015cc
 800cc28:	20000ba4 	.word	0x20000ba4
 800cc2c:	20000bf4 	.word	0x20000bf4
 800cc30:	20000bf8 	.word	0x20000bf8
 800cc34:	20000f78 	.word	0x20000f78
 800cc38:	20000d58 	.word	0x20000d58
 800cc3c:	20000bfc 	.word	0x20000bfc
			}else{
				target_speed_l = sqrt(2*accel_l*target_dist*-1)*-1;
 800cc40:	4bac      	ldr	r3, [pc, #688]	; (800cef4 <HAL_TIM_PeriodElapsedCallback+0x8e4>)
 800cc42:	edd3 7a00 	vldr	s15, [r3]
 800cc46:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800cc4a:	4bab      	ldr	r3, [pc, #684]	; (800cef8 <HAL_TIM_PeriodElapsedCallback+0x8e8>)
 800cc4c:	edd3 7a00 	vldr	s15, [r3]
 800cc50:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cc54:	eef1 7a67 	vneg.f32	s15, s15
 800cc58:	ee17 3a90 	vmov	r3, s15
 800cc5c:	4618      	mov	r0, r3
 800cc5e:	f7f3 fc6b 	bl	8000538 <__aeabi_f2d>
 800cc62:	4603      	mov	r3, r0
 800cc64:	460c      	mov	r4, r1
 800cc66:	ec44 3b10 	vmov	d0, r3, r4
 800cc6a:	f006 fc3f 	bl	80134ec <sqrt>
 800cc6e:	ec54 3b10 	vmov	r3, r4, d0
 800cc72:	4618      	mov	r0, r3
 800cc74:	4621      	mov	r1, r4
 800cc76:	f7f3 ff8f 	bl	8000b98 <__aeabi_d2f>
 800cc7a:	4603      	mov	r3, r0
 800cc7c:	ee07 3a90 	vmov	s15, r3
 800cc80:	eef1 7a67 	vneg.f32	s15, s15
 800cc84:	4b9d      	ldr	r3, [pc, #628]	; (800cefc <HAL_TIM_PeriodElapsedCallback+0x8ec>)
 800cc86:	edc3 7a00 	vstr	s15, [r3]
				target_speed_r = -1 * target_speed_l;
 800cc8a:	4b9c      	ldr	r3, [pc, #624]	; (800cefc <HAL_TIM_PeriodElapsedCallback+0x8ec>)
 800cc8c:	edd3 7a00 	vldr	s15, [r3]
 800cc90:	eef1 7a67 	vneg.f32	s15, s15
 800cc94:	4b9a      	ldr	r3, [pc, #616]	; (800cf00 <HAL_TIM_PeriodElapsedCallback+0x8f0>)
 800cc96:	edc3 7a00 	vstr	s15, [r3]
			}

			epsilon_l = target_speed_l - speed_l;
 800cc9a:	4b98      	ldr	r3, [pc, #608]	; (800cefc <HAL_TIM_PeriodElapsedCallback+0x8ec>)
 800cc9c:	ed93 7a00 	vldr	s14, [r3]
 800cca0:	4b98      	ldr	r3, [pc, #608]	; (800cf04 <HAL_TIM_PeriodElapsedCallback+0x8f4>)
 800cca2:	edd3 7a00 	vldr	s15, [r3]
 800cca6:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ccaa:	4b97      	ldr	r3, [pc, #604]	; (800cf08 <HAL_TIM_PeriodElapsedCallback+0x8f8>)
 800ccac:	edc3 7a00 	vstr	s15, [r3]
			pulse_l = Kp * epsilon_l;
 800ccb0:	4b95      	ldr	r3, [pc, #596]	; (800cf08 <HAL_TIM_PeriodElapsedCallback+0x8f8>)
 800ccb2:	edd3 7a00 	vldr	s15, [r3]
 800ccb6:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800ccba:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ccbe:	4b93      	ldr	r3, [pc, #588]	; (800cf0c <HAL_TIM_PeriodElapsedCallback+0x8fc>)
 800ccc0:	edc3 7a00 	vstr	s15, [r3]
			epsilon_r = target_speed_r - speed_r;
 800ccc4:	4b8e      	ldr	r3, [pc, #568]	; (800cf00 <HAL_TIM_PeriodElapsedCallback+0x8f0>)
 800ccc6:	ed93 7a00 	vldr	s14, [r3]
 800ccca:	4b91      	ldr	r3, [pc, #580]	; (800cf10 <HAL_TIM_PeriodElapsedCallback+0x900>)
 800cccc:	edd3 7a00 	vldr	s15, [r3]
 800ccd0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ccd4:	4b8f      	ldr	r3, [pc, #572]	; (800cf14 <HAL_TIM_PeriodElapsedCallback+0x904>)
 800ccd6:	edc3 7a00 	vstr	s15, [r3]
			pulse_r = Kp * epsilon_r;
 800ccda:	4b8e      	ldr	r3, [pc, #568]	; (800cf14 <HAL_TIM_PeriodElapsedCallback+0x904>)
 800ccdc:	edd3 7a00 	vldr	s15, [r3]
 800cce0:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800cce4:	ee67 7a87 	vmul.f32	s15, s15, s14
 800cce8:	4b8b      	ldr	r3, [pc, #556]	; (800cf18 <HAL_TIM_PeriodElapsedCallback+0x908>)
 800ccea:	edc3 7a00 	vstr	s15, [r3]
		}


		if(MF.FLAG.FWALL){
 800ccee:	4b8b      	ldr	r3, [pc, #556]	; (800cf1c <HAL_TIM_PeriodElapsedCallback+0x90c>)
 800ccf0:	881b      	ldrh	r3, [r3, #0]
 800ccf2:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800ccf6:	b2db      	uxtb	r3, r3
 800ccf8:	2b00      	cmp	r3, #0
 800ccfa:	f000 8124 	beq.w	800cf46 <HAL_TIM_PeriodElapsedCallback+0x936>
			target_speed_l = (int16_t)(OFFSET_FWALL_L - ad_fl)*0.5;//0.75;
 800ccfe:	4b88      	ldr	r3, [pc, #544]	; (800cf20 <HAL_TIM_PeriodElapsedCallback+0x910>)
 800cd00:	681b      	ldr	r3, [r3, #0]
 800cd02:	b29b      	uxth	r3, r3
 800cd04:	f5c3 63bb 	rsb	r3, r3, #1496	; 0x5d8
 800cd08:	3304      	adds	r3, #4
 800cd0a:	b29b      	uxth	r3, r3
 800cd0c:	b21b      	sxth	r3, r3
 800cd0e:	4618      	mov	r0, r3
 800cd10:	f7f3 fc00 	bl	8000514 <__aeabi_i2d>
 800cd14:	f04f 0200 	mov.w	r2, #0
 800cd18:	4b82      	ldr	r3, [pc, #520]	; (800cf24 <HAL_TIM_PeriodElapsedCallback+0x914>)
 800cd1a:	f7f3 fc65 	bl	80005e8 <__aeabi_dmul>
 800cd1e:	4603      	mov	r3, r0
 800cd20:	460c      	mov	r4, r1
 800cd22:	4618      	mov	r0, r3
 800cd24:	4621      	mov	r1, r4
 800cd26:	f7f3 ff37 	bl	8000b98 <__aeabi_d2f>
 800cd2a:	4602      	mov	r2, r0
 800cd2c:	4b73      	ldr	r3, [pc, #460]	; (800cefc <HAL_TIM_PeriodElapsedCallback+0x8ec>)
 800cd2e:	601a      	str	r2, [r3, #0]
			target_speed_r = (int16_t)(OFFSET_FWALL_R - ad_fr);//*1.5;
 800cd30:	4b7d      	ldr	r3, [pc, #500]	; (800cf28 <HAL_TIM_PeriodElapsedCallback+0x918>)
 800cd32:	681b      	ldr	r3, [r3, #0]
 800cd34:	b29b      	uxth	r3, r3
 800cd36:	f5c3 7361 	rsb	r3, r3, #900	; 0x384
 800cd3a:	b29b      	uxth	r3, r3
 800cd3c:	b21b      	sxth	r3, r3
 800cd3e:	ee07 3a90 	vmov	s15, r3
 800cd42:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800cd46:	4b6e      	ldr	r3, [pc, #440]	; (800cf00 <HAL_TIM_PeriodElapsedCallback+0x8f0>)
 800cd48:	edc3 7a00 	vstr	s15, [r3]

			if(target_speed_l*target_speed_l < 2500)target_speed_l = 0;
 800cd4c:	4b6b      	ldr	r3, [pc, #428]	; (800cefc <HAL_TIM_PeriodElapsedCallback+0x8ec>)
 800cd4e:	ed93 7a00 	vldr	s14, [r3]
 800cd52:	4b6a      	ldr	r3, [pc, #424]	; (800cefc <HAL_TIM_PeriodElapsedCallback+0x8ec>)
 800cd54:	edd3 7a00 	vldr	s15, [r3]
 800cd58:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cd5c:	ed9f 7a73 	vldr	s14, [pc, #460]	; 800cf2c <HAL_TIM_PeriodElapsedCallback+0x91c>
 800cd60:	eef4 7ac7 	vcmpe.f32	s15, s14
 800cd64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cd68:	d503      	bpl.n	800cd72 <HAL_TIM_PeriodElapsedCallback+0x762>
 800cd6a:	4b64      	ldr	r3, [pc, #400]	; (800cefc <HAL_TIM_PeriodElapsedCallback+0x8ec>)
 800cd6c:	f04f 0200 	mov.w	r2, #0
 800cd70:	601a      	str	r2, [r3, #0]
			if(target_speed_r*target_speed_r < 2500)target_speed_r = 0;
 800cd72:	4b63      	ldr	r3, [pc, #396]	; (800cf00 <HAL_TIM_PeriodElapsedCallback+0x8f0>)
 800cd74:	ed93 7a00 	vldr	s14, [r3]
 800cd78:	4b61      	ldr	r3, [pc, #388]	; (800cf00 <HAL_TIM_PeriodElapsedCallback+0x8f0>)
 800cd7a:	edd3 7a00 	vldr	s15, [r3]
 800cd7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cd82:	ed9f 7a6a 	vldr	s14, [pc, #424]	; 800cf2c <HAL_TIM_PeriodElapsedCallback+0x91c>
 800cd86:	eef4 7ac7 	vcmpe.f32	s15, s14
 800cd8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cd8e:	d503      	bpl.n	800cd98 <HAL_TIM_PeriodElapsedCallback+0x788>
 800cd90:	4b5b      	ldr	r3, [pc, #364]	; (800cf00 <HAL_TIM_PeriodElapsedCallback+0x8f0>)
 800cd92:	f04f 0200 	mov.w	r2, #0
 800cd96:	601a      	str	r2, [r3, #0]
			if(target_speed_l == 0 && target_speed_r == 0){
 800cd98:	4b58      	ldr	r3, [pc, #352]	; (800cefc <HAL_TIM_PeriodElapsedCallback+0x8ec>)
 800cd9a:	edd3 7a00 	vldr	s15, [r3]
 800cd9e:	eef5 7a40 	vcmp.f32	s15, #0.0
 800cda2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cda6:	d111      	bne.n	800cdcc <HAL_TIM_PeriodElapsedCallback+0x7bc>
 800cda8:	4b55      	ldr	r3, [pc, #340]	; (800cf00 <HAL_TIM_PeriodElapsedCallback+0x8f0>)
 800cdaa:	edd3 7a00 	vldr	s15, [r3]
 800cdae:	eef5 7a40 	vcmp.f32	s15, #0.0
 800cdb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cdb6:	d109      	bne.n	800cdcc <HAL_TIM_PeriodElapsedCallback+0x7bc>
				MF.FLAG.FWALL = 0;
 800cdb8:	4a58      	ldr	r2, [pc, #352]	; (800cf1c <HAL_TIM_PeriodElapsedCallback+0x90c>)
 800cdba:	8813      	ldrh	r3, [r2, #0]
 800cdbc:	f36f 13c7 	bfc	r3, #7, #1
 800cdc0:	8013      	strh	r3, [r2, #0]
				MF.FLAG.DRV = 0;
 800cdc2:	4a56      	ldr	r2, [pc, #344]	; (800cf1c <HAL_TIM_PeriodElapsedCallback+0x90c>)
 800cdc4:	8813      	ldrh	r3, [r2, #0]
 800cdc6:	f36f 0341 	bfc	r3, #1, #1
 800cdca:	8013      	strh	r3, [r2, #0]
			}

			epsilon_l = target_speed_l - speed_l;
 800cdcc:	4b4b      	ldr	r3, [pc, #300]	; (800cefc <HAL_TIM_PeriodElapsedCallback+0x8ec>)
 800cdce:	ed93 7a00 	vldr	s14, [r3]
 800cdd2:	4b4c      	ldr	r3, [pc, #304]	; (800cf04 <HAL_TIM_PeriodElapsedCallback+0x8f4>)
 800cdd4:	edd3 7a00 	vldr	s15, [r3]
 800cdd8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cddc:	4b4a      	ldr	r3, [pc, #296]	; (800cf08 <HAL_TIM_PeriodElapsedCallback+0x8f8>)
 800cdde:	edc3 7a00 	vstr	s15, [r3]
			pulse_l = Kp * epsilon_l;
 800cde2:	4b49      	ldr	r3, [pc, #292]	; (800cf08 <HAL_TIM_PeriodElapsedCallback+0x8f8>)
 800cde4:	edd3 7a00 	vldr	s15, [r3]
 800cde8:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800cdec:	ee67 7a87 	vmul.f32	s15, s15, s14
 800cdf0:	4b46      	ldr	r3, [pc, #280]	; (800cf0c <HAL_TIM_PeriodElapsedCallback+0x8fc>)
 800cdf2:	edc3 7a00 	vstr	s15, [r3]
			epsilon_r = target_speed_r - speed_r;
 800cdf6:	4b42      	ldr	r3, [pc, #264]	; (800cf00 <HAL_TIM_PeriodElapsedCallback+0x8f0>)
 800cdf8:	ed93 7a00 	vldr	s14, [r3]
 800cdfc:	4b44      	ldr	r3, [pc, #272]	; (800cf10 <HAL_TIM_PeriodElapsedCallback+0x900>)
 800cdfe:	edd3 7a00 	vldr	s15, [r3]
 800ce02:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ce06:	4b43      	ldr	r3, [pc, #268]	; (800cf14 <HAL_TIM_PeriodElapsedCallback+0x904>)
 800ce08:	edc3 7a00 	vstr	s15, [r3]
			pulse_r = Kp * epsilon_r;
 800ce0c:	4b41      	ldr	r3, [pc, #260]	; (800cf14 <HAL_TIM_PeriodElapsedCallback+0x904>)
 800ce0e:	edd3 7a00 	vldr	s15, [r3]
 800ce12:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800ce16:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ce1a:	4b3f      	ldr	r3, [pc, #252]	; (800cf18 <HAL_TIM_PeriodElapsedCallback+0x908>)
 800ce1c:	edc3 7a00 	vstr	s15, [r3]

			pulse_l = min(max(pulse_l, -100), 100);
 800ce20:	4b3a      	ldr	r3, [pc, #232]	; (800cf0c <HAL_TIM_PeriodElapsedCallback+0x8fc>)
 800ce22:	edd3 7a00 	vldr	s15, [r3]
 800ce26:	ed9f 7a42 	vldr	s14, [pc, #264]	; 800cf30 <HAL_TIM_PeriodElapsedCallback+0x920>
 800ce2a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ce2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ce32:	bfcc      	ite	gt
 800ce34:	2301      	movgt	r3, #1
 800ce36:	2300      	movle	r3, #0
 800ce38:	b2db      	uxtb	r3, r3
 800ce3a:	f083 0301 	eor.w	r3, r3, #1
 800ce3e:	b2db      	uxtb	r3, r3
 800ce40:	2b00      	cmp	r3, #0
 800ce42:	d111      	bne.n	800ce68 <HAL_TIM_PeriodElapsedCallback+0x858>
 800ce44:	4b31      	ldr	r3, [pc, #196]	; (800cf0c <HAL_TIM_PeriodElapsedCallback+0x8fc>)
 800ce46:	edd3 7a00 	vldr	s15, [r3]
 800ce4a:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 800cf34 <HAL_TIM_PeriodElapsedCallback+0x924>
 800ce4e:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ce52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ce56:	bfcc      	ite	gt
 800ce58:	2301      	movgt	r3, #1
 800ce5a:	2300      	movle	r3, #0
 800ce5c:	b2db      	uxtb	r3, r3
 800ce5e:	f083 0301 	eor.w	r3, r3, #1
 800ce62:	b2db      	uxtb	r3, r3
 800ce64:	2b00      	cmp	r3, #0
 800ce66:	d00e      	beq.n	800ce86 <HAL_TIM_PeriodElapsedCallback+0x876>
 800ce68:	4b28      	ldr	r3, [pc, #160]	; (800cf0c <HAL_TIM_PeriodElapsedCallback+0x8fc>)
 800ce6a:	edd3 7a00 	vldr	s15, [r3]
 800ce6e:	ed9f 7a30 	vldr	s14, [pc, #192]	; 800cf30 <HAL_TIM_PeriodElapsedCallback+0x920>
 800ce72:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ce76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ce7a:	dd02      	ble.n	800ce82 <HAL_TIM_PeriodElapsedCallback+0x872>
 800ce7c:	4b23      	ldr	r3, [pc, #140]	; (800cf0c <HAL_TIM_PeriodElapsedCallback+0x8fc>)
 800ce7e:	681b      	ldr	r3, [r3, #0]
 800ce80:	e002      	b.n	800ce88 <HAL_TIM_PeriodElapsedCallback+0x878>
 800ce82:	4b2d      	ldr	r3, [pc, #180]	; (800cf38 <HAL_TIM_PeriodElapsedCallback+0x928>)
 800ce84:	e000      	b.n	800ce88 <HAL_TIM_PeriodElapsedCallback+0x878>
 800ce86:	4b2d      	ldr	r3, [pc, #180]	; (800cf3c <HAL_TIM_PeriodElapsedCallback+0x92c>)
 800ce88:	4a20      	ldr	r2, [pc, #128]	; (800cf0c <HAL_TIM_PeriodElapsedCallback+0x8fc>)
 800ce8a:	6013      	str	r3, [r2, #0]
			pulse_r = min(max(pulse_r, -100), 100);
 800ce8c:	4b22      	ldr	r3, [pc, #136]	; (800cf18 <HAL_TIM_PeriodElapsedCallback+0x908>)
 800ce8e:	edd3 7a00 	vldr	s15, [r3]
 800ce92:	ed9f 7a27 	vldr	s14, [pc, #156]	; 800cf30 <HAL_TIM_PeriodElapsedCallback+0x920>
 800ce96:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ce9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ce9e:	bfcc      	ite	gt
 800cea0:	2301      	movgt	r3, #1
 800cea2:	2300      	movle	r3, #0
 800cea4:	b2db      	uxtb	r3, r3
 800cea6:	f083 0301 	eor.w	r3, r3, #1
 800ceaa:	b2db      	uxtb	r3, r3
 800ceac:	2b00      	cmp	r3, #0
 800ceae:	d111      	bne.n	800ced4 <HAL_TIM_PeriodElapsedCallback+0x8c4>
 800ceb0:	4b19      	ldr	r3, [pc, #100]	; (800cf18 <HAL_TIM_PeriodElapsedCallback+0x908>)
 800ceb2:	edd3 7a00 	vldr	s15, [r3]
 800ceb6:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 800cf34 <HAL_TIM_PeriodElapsedCallback+0x924>
 800ceba:	eef4 7ac7 	vcmpe.f32	s15, s14
 800cebe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cec2:	bfcc      	ite	gt
 800cec4:	2301      	movgt	r3, #1
 800cec6:	2300      	movle	r3, #0
 800cec8:	b2db      	uxtb	r3, r3
 800ceca:	f083 0301 	eor.w	r3, r3, #1
 800cece:	b2db      	uxtb	r3, r3
 800ced0:	2b00      	cmp	r3, #0
 800ced2:	d035      	beq.n	800cf40 <HAL_TIM_PeriodElapsedCallback+0x930>
 800ced4:	4b10      	ldr	r3, [pc, #64]	; (800cf18 <HAL_TIM_PeriodElapsedCallback+0x908>)
 800ced6:	edd3 7a00 	vldr	s15, [r3]
 800ceda:	ed9f 7a15 	vldr	s14, [pc, #84]	; 800cf30 <HAL_TIM_PeriodElapsedCallback+0x920>
 800cede:	eef4 7ac7 	vcmpe.f32	s15, s14
 800cee2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cee6:	dd02      	ble.n	800ceee <HAL_TIM_PeriodElapsedCallback+0x8de>
 800cee8:	4b0b      	ldr	r3, [pc, #44]	; (800cf18 <HAL_TIM_PeriodElapsedCallback+0x908>)
 800ceea:	681b      	ldr	r3, [r3, #0]
 800ceec:	e029      	b.n	800cf42 <HAL_TIM_PeriodElapsedCallback+0x932>
 800ceee:	4b12      	ldr	r3, [pc, #72]	; (800cf38 <HAL_TIM_PeriodElapsedCallback+0x928>)
 800cef0:	e027      	b.n	800cf42 <HAL_TIM_PeriodElapsedCallback+0x932>
 800cef2:	bf00      	nop
 800cef4:	20000d58 	.word	0x20000d58
 800cef8:	20000f78 	.word	0x20000f78
 800cefc:	20000bfc 	.word	0x20000bfc
 800cf00:	200001a0 	.word	0x200001a0
 800cf04:	20000af0 	.word	0x20000af0
 800cf08:	20000b60 	.word	0x20000b60
 800cf0c:	20000ba8 	.word	0x20000ba8
 800cf10:	200002bc 	.word	0x200002bc
 800cf14:	20000c08 	.word	0x20000c08
 800cf18:	20000780 	.word	0x20000780
 800cf1c:	20000f68 	.word	0x20000f68
 800cf20:	20000d54 	.word	0x20000d54
 800cf24:	3fe00000 	.word	0x3fe00000
 800cf28:	20000c00 	.word	0x20000c00
 800cf2c:	451c4000 	.word	0x451c4000
 800cf30:	c2c80000 	.word	0xc2c80000
 800cf34:	42c80000 	.word	0x42c80000
 800cf38:	c2c80000 	.word	0xc2c80000
 800cf3c:	42c80000 	.word	0x42c80000
 800cf40:	4bbf      	ldr	r3, [pc, #764]	; (800d240 <HAL_TIM_PeriodElapsedCallback+0xc30>)
 800cf42:	4ac0      	ldr	r2, [pc, #768]	; (800d244 <HAL_TIM_PeriodElapsedCallback+0xc34>)
 800cf44:	6013      	str	r3, [r2, #0]
		}


		if(MF.FLAG.GYRO){
 800cf46:	4bc0      	ldr	r3, [pc, #768]	; (800d248 <HAL_TIM_PeriodElapsedCallback+0xc38>)
 800cf48:	881b      	ldrh	r3, [r3, #0]
 800cf4a:	f3c3 2300 	ubfx	r3, r3, #8, #1
 800cf4e:	b2db      	uxtb	r3, r3
 800cf50:	2b00      	cmp	r3, #0
 800cf52:	f000 810b 	beq.w	800d16c <HAL_TIM_PeriodElapsedCallback+0xb5c>
			target_omega_z += target_degaccel_z * 0.001;
 800cf56:	4bbd      	ldr	r3, [pc, #756]	; (800d24c <HAL_TIM_PeriodElapsedCallback+0xc3c>)
 800cf58:	681b      	ldr	r3, [r3, #0]
 800cf5a:	4618      	mov	r0, r3
 800cf5c:	f7f3 faec 	bl	8000538 <__aeabi_f2d>
 800cf60:	a3b3      	add	r3, pc, #716	; (adr r3, 800d230 <HAL_TIM_PeriodElapsedCallback+0xc20>)
 800cf62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf66:	f7f3 fb3f 	bl	80005e8 <__aeabi_dmul>
 800cf6a:	4603      	mov	r3, r0
 800cf6c:	460c      	mov	r4, r1
 800cf6e:	4625      	mov	r5, r4
 800cf70:	461c      	mov	r4, r3
 800cf72:	4bb7      	ldr	r3, [pc, #732]	; (800d250 <HAL_TIM_PeriodElapsedCallback+0xc40>)
 800cf74:	681b      	ldr	r3, [r3, #0]
 800cf76:	4618      	mov	r0, r3
 800cf78:	f7f3 fade 	bl	8000538 <__aeabi_f2d>
 800cf7c:	4602      	mov	r2, r0
 800cf7e:	460b      	mov	r3, r1
 800cf80:	4620      	mov	r0, r4
 800cf82:	4629      	mov	r1, r5
 800cf84:	f7f3 f97a 	bl	800027c <__adddf3>
 800cf88:	4603      	mov	r3, r0
 800cf8a:	460c      	mov	r4, r1
 800cf8c:	4618      	mov	r0, r3
 800cf8e:	4621      	mov	r1, r4
 800cf90:	f7f3 fe02 	bl	8000b98 <__aeabi_d2f>
 800cf94:	4602      	mov	r2, r0
 800cf96:	4bae      	ldr	r3, [pc, #696]	; (800d250 <HAL_TIM_PeriodElapsedCallback+0xc40>)
 800cf98:	601a      	str	r2, [r3, #0]
			target_omega_z = max(min(target_omega_z, omega_max), omega_min);
 800cf9a:	4bad      	ldr	r3, [pc, #692]	; (800d250 <HAL_TIM_PeriodElapsedCallback+0xc40>)
 800cf9c:	ed93 7a00 	vldr	s14, [r3]
 800cfa0:	4bac      	ldr	r3, [pc, #688]	; (800d254 <HAL_TIM_PeriodElapsedCallback+0xc44>)
 800cfa2:	edd3 7a00 	vldr	s15, [r3]
 800cfa6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800cfaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cfae:	dd03      	ble.n	800cfb8 <HAL_TIM_PeriodElapsedCallback+0x9a8>
 800cfb0:	4ba8      	ldr	r3, [pc, #672]	; (800d254 <HAL_TIM_PeriodElapsedCallback+0xc44>)
 800cfb2:	edd3 7a00 	vldr	s15, [r3]
 800cfb6:	e002      	b.n	800cfbe <HAL_TIM_PeriodElapsedCallback+0x9ae>
 800cfb8:	4ba5      	ldr	r3, [pc, #660]	; (800d250 <HAL_TIM_PeriodElapsedCallback+0xc40>)
 800cfba:	edd3 7a00 	vldr	s15, [r3]
 800cfbe:	4ba6      	ldr	r3, [pc, #664]	; (800d258 <HAL_TIM_PeriodElapsedCallback+0xc48>)
 800cfc0:	ed93 7a00 	vldr	s14, [r3]
 800cfc4:	eef4 7ac7 	vcmpe.f32	s15, s14
 800cfc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cfcc:	dd10      	ble.n	800cff0 <HAL_TIM_PeriodElapsedCallback+0x9e0>
 800cfce:	4ba0      	ldr	r3, [pc, #640]	; (800d250 <HAL_TIM_PeriodElapsedCallback+0xc40>)
 800cfd0:	ed93 7a00 	vldr	s14, [r3]
 800cfd4:	4b9f      	ldr	r3, [pc, #636]	; (800d254 <HAL_TIM_PeriodElapsedCallback+0xc44>)
 800cfd6:	edd3 7a00 	vldr	s15, [r3]
 800cfda:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800cfde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cfe2:	dd02      	ble.n	800cfea <HAL_TIM_PeriodElapsedCallback+0x9da>
 800cfe4:	4b9b      	ldr	r3, [pc, #620]	; (800d254 <HAL_TIM_PeriodElapsedCallback+0xc44>)
 800cfe6:	681b      	ldr	r3, [r3, #0]
 800cfe8:	e004      	b.n	800cff4 <HAL_TIM_PeriodElapsedCallback+0x9e4>
 800cfea:	4b99      	ldr	r3, [pc, #612]	; (800d250 <HAL_TIM_PeriodElapsedCallback+0xc40>)
 800cfec:	681b      	ldr	r3, [r3, #0]
 800cfee:	e001      	b.n	800cff4 <HAL_TIM_PeriodElapsedCallback+0x9e4>
 800cff0:	4b99      	ldr	r3, [pc, #612]	; (800d258 <HAL_TIM_PeriodElapsedCallback+0xc48>)
 800cff2:	681b      	ldr	r3, [r3, #0]
 800cff4:	4a96      	ldr	r2, [pc, #600]	; (800d250 <HAL_TIM_PeriodElapsedCallback+0xc40>)
 800cff6:	6013      	str	r3, [r2, #0]

			epsilon_omega = target_omega_z - gyro_read_z();
 800cff8:	4b95      	ldr	r3, [pc, #596]	; (800d250 <HAL_TIM_PeriodElapsedCallback+0xc40>)
 800cffa:	ed93 8a00 	vldr	s16, [r3]
 800cffe:	f7ff faa7 	bl	800c550 <gyro_read_z>
 800d002:	eef0 7a40 	vmov.f32	s15, s0
 800d006:	ee78 7a67 	vsub.f32	s15, s16, s15
 800d00a:	4b94      	ldr	r3, [pc, #592]	; (800d25c <HAL_TIM_PeriodElapsedCallback+0xc4c>)
 800d00c:	edc3 7a00 	vstr	s15, [r3]

			target_speed_l = speed_G - (target_omega_z + Kp_o*epsilon_omega)/180*M_PI*TREAD/2;
 800d010:	4b93      	ldr	r3, [pc, #588]	; (800d260 <HAL_TIM_PeriodElapsedCallback+0xc50>)
 800d012:	681b      	ldr	r3, [r3, #0]
 800d014:	4618      	mov	r0, r3
 800d016:	f7f3 fa8f 	bl	8000538 <__aeabi_f2d>
 800d01a:	4604      	mov	r4, r0
 800d01c:	460d      	mov	r5, r1
 800d01e:	4b8f      	ldr	r3, [pc, #572]	; (800d25c <HAL_TIM_PeriodElapsedCallback+0xc4c>)
 800d020:	edd3 7a00 	vldr	s15, [r3]
 800d024:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800d028:	ee27 7a87 	vmul.f32	s14, s15, s14
 800d02c:	4b88      	ldr	r3, [pc, #544]	; (800d250 <HAL_TIM_PeriodElapsedCallback+0xc40>)
 800d02e:	edd3 7a00 	vldr	s15, [r3]
 800d032:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d036:	ed9f 7a8b 	vldr	s14, [pc, #556]	; 800d264 <HAL_TIM_PeriodElapsedCallback+0xc54>
 800d03a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800d03e:	ee16 0a90 	vmov	r0, s13
 800d042:	f7f3 fa79 	bl	8000538 <__aeabi_f2d>
 800d046:	a37c      	add	r3, pc, #496	; (adr r3, 800d238 <HAL_TIM_PeriodElapsedCallback+0xc28>)
 800d048:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d04c:	f7f3 facc 	bl	80005e8 <__aeabi_dmul>
 800d050:	4602      	mov	r2, r0
 800d052:	460b      	mov	r3, r1
 800d054:	4610      	mov	r0, r2
 800d056:	4619      	mov	r1, r3
 800d058:	f04f 0200 	mov.w	r2, #0
 800d05c:	4b82      	ldr	r3, [pc, #520]	; (800d268 <HAL_TIM_PeriodElapsedCallback+0xc58>)
 800d05e:	f7f3 fac3 	bl	80005e8 <__aeabi_dmul>
 800d062:	4602      	mov	r2, r0
 800d064:	460b      	mov	r3, r1
 800d066:	4610      	mov	r0, r2
 800d068:	4619      	mov	r1, r3
 800d06a:	f04f 0200 	mov.w	r2, #0
 800d06e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800d072:	f7f3 fbe3 	bl	800083c <__aeabi_ddiv>
 800d076:	4602      	mov	r2, r0
 800d078:	460b      	mov	r3, r1
 800d07a:	4620      	mov	r0, r4
 800d07c:	4629      	mov	r1, r5
 800d07e:	f7f3 f8fb 	bl	8000278 <__aeabi_dsub>
 800d082:	4603      	mov	r3, r0
 800d084:	460c      	mov	r4, r1
 800d086:	4618      	mov	r0, r3
 800d088:	4621      	mov	r1, r4
 800d08a:	f7f3 fd85 	bl	8000b98 <__aeabi_d2f>
 800d08e:	4602      	mov	r2, r0
 800d090:	4b76      	ldr	r3, [pc, #472]	; (800d26c <HAL_TIM_PeriodElapsedCallback+0xc5c>)
 800d092:	601a      	str	r2, [r3, #0]
			target_speed_r = speed_G + (target_omega_z + Kp_o*epsilon_omega)/180*M_PI*TREAD/2;
 800d094:	4b72      	ldr	r3, [pc, #456]	; (800d260 <HAL_TIM_PeriodElapsedCallback+0xc50>)
 800d096:	681b      	ldr	r3, [r3, #0]
 800d098:	4618      	mov	r0, r3
 800d09a:	f7f3 fa4d 	bl	8000538 <__aeabi_f2d>
 800d09e:	4604      	mov	r4, r0
 800d0a0:	460d      	mov	r5, r1
 800d0a2:	4b6e      	ldr	r3, [pc, #440]	; (800d25c <HAL_TIM_PeriodElapsedCallback+0xc4c>)
 800d0a4:	edd3 7a00 	vldr	s15, [r3]
 800d0a8:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800d0ac:	ee27 7a87 	vmul.f32	s14, s15, s14
 800d0b0:	4b67      	ldr	r3, [pc, #412]	; (800d250 <HAL_TIM_PeriodElapsedCallback+0xc40>)
 800d0b2:	edd3 7a00 	vldr	s15, [r3]
 800d0b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d0ba:	ed9f 7a6a 	vldr	s14, [pc, #424]	; 800d264 <HAL_TIM_PeriodElapsedCallback+0xc54>
 800d0be:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800d0c2:	ee16 0a90 	vmov	r0, s13
 800d0c6:	f7f3 fa37 	bl	8000538 <__aeabi_f2d>
 800d0ca:	a35b      	add	r3, pc, #364	; (adr r3, 800d238 <HAL_TIM_PeriodElapsedCallback+0xc28>)
 800d0cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0d0:	f7f3 fa8a 	bl	80005e8 <__aeabi_dmul>
 800d0d4:	4602      	mov	r2, r0
 800d0d6:	460b      	mov	r3, r1
 800d0d8:	4610      	mov	r0, r2
 800d0da:	4619      	mov	r1, r3
 800d0dc:	f04f 0200 	mov.w	r2, #0
 800d0e0:	4b61      	ldr	r3, [pc, #388]	; (800d268 <HAL_TIM_PeriodElapsedCallback+0xc58>)
 800d0e2:	f7f3 fa81 	bl	80005e8 <__aeabi_dmul>
 800d0e6:	4602      	mov	r2, r0
 800d0e8:	460b      	mov	r3, r1
 800d0ea:	4610      	mov	r0, r2
 800d0ec:	4619      	mov	r1, r3
 800d0ee:	f04f 0200 	mov.w	r2, #0
 800d0f2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800d0f6:	f7f3 fba1 	bl	800083c <__aeabi_ddiv>
 800d0fa:	4602      	mov	r2, r0
 800d0fc:	460b      	mov	r3, r1
 800d0fe:	4620      	mov	r0, r4
 800d100:	4629      	mov	r1, r5
 800d102:	f7f3 f8bb 	bl	800027c <__adddf3>
 800d106:	4603      	mov	r3, r0
 800d108:	460c      	mov	r4, r1
 800d10a:	4618      	mov	r0, r3
 800d10c:	4621      	mov	r1, r4
 800d10e:	f7f3 fd43 	bl	8000b98 <__aeabi_d2f>
 800d112:	4602      	mov	r2, r0
 800d114:	4b56      	ldr	r3, [pc, #344]	; (800d270 <HAL_TIM_PeriodElapsedCallback+0xc60>)
 800d116:	601a      	str	r2, [r3, #0]

			epsilon_l = target_speed_l - speed_l;
 800d118:	4b54      	ldr	r3, [pc, #336]	; (800d26c <HAL_TIM_PeriodElapsedCallback+0xc5c>)
 800d11a:	ed93 7a00 	vldr	s14, [r3]
 800d11e:	4b55      	ldr	r3, [pc, #340]	; (800d274 <HAL_TIM_PeriodElapsedCallback+0xc64>)
 800d120:	edd3 7a00 	vldr	s15, [r3]
 800d124:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d128:	4b53      	ldr	r3, [pc, #332]	; (800d278 <HAL_TIM_PeriodElapsedCallback+0xc68>)
 800d12a:	edc3 7a00 	vstr	s15, [r3]
			pulse_l = Kp * epsilon_l;
 800d12e:	4b52      	ldr	r3, [pc, #328]	; (800d278 <HAL_TIM_PeriodElapsedCallback+0xc68>)
 800d130:	edd3 7a00 	vldr	s15, [r3]
 800d134:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800d138:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d13c:	4b4f      	ldr	r3, [pc, #316]	; (800d27c <HAL_TIM_PeriodElapsedCallback+0xc6c>)
 800d13e:	edc3 7a00 	vstr	s15, [r3]
			epsilon_r = target_speed_r - speed_r;
 800d142:	4b4b      	ldr	r3, [pc, #300]	; (800d270 <HAL_TIM_PeriodElapsedCallback+0xc60>)
 800d144:	ed93 7a00 	vldr	s14, [r3]
 800d148:	4b4d      	ldr	r3, [pc, #308]	; (800d280 <HAL_TIM_PeriodElapsedCallback+0xc70>)
 800d14a:	edd3 7a00 	vldr	s15, [r3]
 800d14e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d152:	4b4c      	ldr	r3, [pc, #304]	; (800d284 <HAL_TIM_PeriodElapsedCallback+0xc74>)
 800d154:	edc3 7a00 	vstr	s15, [r3]
			pulse_r = Kp * epsilon_r;
 800d158:	4b4a      	ldr	r3, [pc, #296]	; (800d284 <HAL_TIM_PeriodElapsedCallback+0xc74>)
 800d15a:	edd3 7a00 	vldr	s15, [r3]
 800d15e:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800d162:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d166:	4b37      	ldr	r3, [pc, #220]	; (800d244 <HAL_TIM_PeriodElapsedCallback+0xc34>)
 800d168:	edc3 7a00 	vstr	s15, [r3]
		}


		//ADchange interrupt
		uint16_t delay;
		tp = (tp+1)%3;
 800d16c:	4b46      	ldr	r3, [pc, #280]	; (800d288 <HAL_TIM_PeriodElapsedCallback+0xc78>)
 800d16e:	781b      	ldrb	r3, [r3, #0]
 800d170:	1c5a      	adds	r2, r3, #1
 800d172:	4b46      	ldr	r3, [pc, #280]	; (800d28c <HAL_TIM_PeriodElapsedCallback+0xc7c>)
 800d174:	fb83 3102 	smull	r3, r1, r3, r2
 800d178:	17d3      	asrs	r3, r2, #31
 800d17a:	1ac9      	subs	r1, r1, r3
 800d17c:	460b      	mov	r3, r1
 800d17e:	005b      	lsls	r3, r3, #1
 800d180:	440b      	add	r3, r1
 800d182:	1ad1      	subs	r1, r2, r3
 800d184:	b2ca      	uxtb	r2, r1
 800d186:	4b40      	ldr	r3, [pc, #256]	; (800d288 <HAL_TIM_PeriodElapsedCallback+0xc78>)
 800d188:	701a      	strb	r2, [r3, #0]

		switch(tp){
 800d18a:	4b3f      	ldr	r3, [pc, #252]	; (800d288 <HAL_TIM_PeriodElapsedCallback+0xc78>)
 800d18c:	781b      	ldrb	r3, [r3, #0]
 800d18e:	2b01      	cmp	r3, #1
 800d190:	d044      	beq.n	800d21c <HAL_TIM_PeriodElapsedCallback+0xc0c>
 800d192:	2b02      	cmp	r3, #2
 800d194:	f000 80bc 	beq.w	800d310 <HAL_TIM_PeriodElapsedCallback+0xd00>
 800d198:	2b00      	cmp	r3, #0
 800d19a:	f040 82da 	bne.w	800d752 <HAL_TIM_PeriodElapsedCallback+0x1142>
		  case 0:
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_SET); 	//L
 800d19e:	2201      	movs	r2, #1
 800d1a0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800d1a4:	483a      	ldr	r0, [pc, #232]	; (800d290 <HAL_TIM_PeriodElapsedCallback+0xc80>)
 800d1a6:	f7f5 f8ad 	bl	8002304 <HAL_GPIO_WritePin>
				for(delay=0; delay<sensor_wait; delay++);
 800d1aa:	2300      	movs	r3, #0
 800d1ac:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800d1ae:	e002      	b.n	800d1b6 <HAL_TIM_PeriodElapsedCallback+0xba6>
 800d1b0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800d1b2:	3301      	adds	r3, #1
 800d1b4:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800d1b6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800d1b8:	f640 12c3 	movw	r2, #2499	; 0x9c3
 800d1bc:	4293      	cmp	r3, r2
 800d1be:	d9f7      	bls.n	800d1b0 <HAL_TIM_PeriodElapsedCallback+0xba0>
				ad_l = get_adc_value(&hadc1, ADC_CHANNEL_3);			//L
 800d1c0:	2103      	movs	r1, #3
 800d1c2:	4834      	ldr	r0, [pc, #208]	; (800d294 <HAL_TIM_PeriodElapsedCallback+0xc84>)
 800d1c4:	f001 fa38 	bl	800e638 <get_adc_value>
 800d1c8:	4603      	mov	r3, r0
 800d1ca:	461a      	mov	r2, r3
 800d1cc:	4b32      	ldr	r3, [pc, #200]	; (800d298 <HAL_TIM_PeriodElapsedCallback+0xc88>)
 800d1ce:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 800d1d0:	2200      	movs	r2, #0
 800d1d2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800d1d6:	482e      	ldr	r0, [pc, #184]	; (800d290 <HAL_TIM_PeriodElapsedCallback+0xc80>)
 800d1d8:	f7f5 f894 	bl	8002304 <HAL_GPIO_WritePin>

				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);  	//R
 800d1dc:	2201      	movs	r2, #1
 800d1de:	f44f 7180 	mov.w	r1, #256	; 0x100
 800d1e2:	482e      	ldr	r0, [pc, #184]	; (800d29c <HAL_TIM_PeriodElapsedCallback+0xc8c>)
 800d1e4:	f7f5 f88e 	bl	8002304 <HAL_GPIO_WritePin>
				for(delay=0; delay<sensor_wait; delay++);
 800d1e8:	2300      	movs	r3, #0
 800d1ea:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800d1ec:	e002      	b.n	800d1f4 <HAL_TIM_PeriodElapsedCallback+0xbe4>
 800d1ee:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800d1f0:	3301      	adds	r3, #1
 800d1f2:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800d1f4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800d1f6:	f640 12c3 	movw	r2, #2499	; 0x9c3
 800d1fa:	4293      	cmp	r3, r2
 800d1fc:	d9f7      	bls.n	800d1ee <HAL_TIM_PeriodElapsedCallback+0xbde>
				ad_r = get_adc_value(&hadc1, ADC_CHANNEL_1);			//R
 800d1fe:	2101      	movs	r1, #1
 800d200:	4824      	ldr	r0, [pc, #144]	; (800d294 <HAL_TIM_PeriodElapsedCallback+0xc84>)
 800d202:	f001 fa19 	bl	800e638 <get_adc_value>
 800d206:	4603      	mov	r3, r0
 800d208:	461a      	mov	r2, r3
 800d20a:	4b25      	ldr	r3, [pc, #148]	; (800d2a0 <HAL_TIM_PeriodElapsedCallback+0xc90>)
 800d20c:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 800d20e:	2200      	movs	r2, #0
 800d210:	f44f 7180 	mov.w	r1, #256	; 0x100
 800d214:	4821      	ldr	r0, [pc, #132]	; (800d29c <HAL_TIM_PeriodElapsedCallback+0xc8c>)
 800d216:	f7f5 f875 	bl	8002304 <HAL_GPIO_WritePin>
			break;
 800d21a:	e29a      	b.n	800d752 <HAL_TIM_PeriodElapsedCallback+0x1142>

		  case 1:
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_SET); 	//FL
 800d21c:	2201      	movs	r2, #1
 800d21e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800d222:	481b      	ldr	r0, [pc, #108]	; (800d290 <HAL_TIM_PeriodElapsedCallback+0xc80>)
 800d224:	f7f5 f86e 	bl	8002304 <HAL_GPIO_WritePin>
				for(delay=0; delay<sensor_wait; delay++);
 800d228:	2300      	movs	r3, #0
 800d22a:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800d22c:	e03d      	b.n	800d2aa <HAL_TIM_PeriodElapsedCallback+0xc9a>
 800d22e:	bf00      	nop
 800d230:	d2f1a9fc 	.word	0xd2f1a9fc
 800d234:	3f50624d 	.word	0x3f50624d
 800d238:	54442d18 	.word	0x54442d18
 800d23c:	400921fb 	.word	0x400921fb
 800d240:	42c80000 	.word	0x42c80000
 800d244:	20000780 	.word	0x20000780
 800d248:	20000f68 	.word	0x20000f68
 800d24c:	20000b58 	.word	0x20000b58
 800d250:	200001a8 	.word	0x200001a8
 800d254:	20000ae8 	.word	0x20000ae8
 800d258:	200002b8 	.word	0x200002b8
 800d25c:	20000458 	.word	0x20000458
 800d260:	20000af4 	.word	0x20000af4
 800d264:	43340000 	.word	0x43340000
 800d268:	40508000 	.word	0x40508000
 800d26c:	20000bfc 	.word	0x20000bfc
 800d270:	200001a0 	.word	0x200001a0
 800d274:	20000af0 	.word	0x20000af0
 800d278:	20000b60 	.word	0x20000b60
 800d27c:	20000ba8 	.word	0x20000ba8
 800d280:	200002bc 	.word	0x200002bc
 800d284:	20000c08 	.word	0x20000c08
 800d288:	200012a0 	.word	0x200012a0
 800d28c:	55555556 	.word	0x55555556
 800d290:	40020800 	.word	0x40020800
 800d294:	20000b00 	.word	0x20000b00
 800d298:	20000afc 	.word	0x20000afc
 800d29c:	40020000 	.word	0x40020000
 800d2a0:	20000f60 	.word	0x20000f60
 800d2a4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800d2a6:	3301      	adds	r3, #1
 800d2a8:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800d2aa:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800d2ac:	f640 12c3 	movw	r2, #2499	; 0x9c3
 800d2b0:	4293      	cmp	r3, r2
 800d2b2:	d9f7      	bls.n	800d2a4 <HAL_TIM_PeriodElapsedCallback+0xc94>
				ad_fl = get_adc_value(&hadc1, ADC_CHANNEL_2);			//FL
 800d2b4:	2102      	movs	r1, #2
 800d2b6:	48b4      	ldr	r0, [pc, #720]	; (800d588 <HAL_TIM_PeriodElapsedCallback+0xf78>)
 800d2b8:	f001 f9be 	bl	800e638 <get_adc_value>
 800d2bc:	4603      	mov	r3, r0
 800d2be:	461a      	mov	r2, r3
 800d2c0:	4bb2      	ldr	r3, [pc, #712]	; (800d58c <HAL_TIM_PeriodElapsedCallback+0xf7c>)
 800d2c2:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET);
 800d2c4:	2200      	movs	r2, #0
 800d2c6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800d2ca:	48b1      	ldr	r0, [pc, #708]	; (800d590 <HAL_TIM_PeriodElapsedCallback+0xf80>)
 800d2cc:	f7f5 f81a 	bl	8002304 <HAL_GPIO_WritePin>

				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);   	//FR
 800d2d0:	2201      	movs	r2, #1
 800d2d2:	f44f 7100 	mov.w	r1, #512	; 0x200
 800d2d6:	48ae      	ldr	r0, [pc, #696]	; (800d590 <HAL_TIM_PeriodElapsedCallback+0xf80>)
 800d2d8:	f7f5 f814 	bl	8002304 <HAL_GPIO_WritePin>
				for(delay=0; delay<sensor_wait; delay++);
 800d2dc:	2300      	movs	r3, #0
 800d2de:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800d2e0:	e002      	b.n	800d2e8 <HAL_TIM_PeriodElapsedCallback+0xcd8>
 800d2e2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800d2e4:	3301      	adds	r3, #1
 800d2e6:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800d2e8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800d2ea:	f640 12c3 	movw	r2, #2499	; 0x9c3
 800d2ee:	4293      	cmp	r3, r2
 800d2f0:	d9f7      	bls.n	800d2e2 <HAL_TIM_PeriodElapsedCallback+0xcd2>
				ad_fr = get_adc_value(&hadc1, ADC_CHANNEL_0);			//FR
 800d2f2:	2100      	movs	r1, #0
 800d2f4:	48a4      	ldr	r0, [pc, #656]	; (800d588 <HAL_TIM_PeriodElapsedCallback+0xf78>)
 800d2f6:	f001 f99f 	bl	800e638 <get_adc_value>
 800d2fa:	4603      	mov	r3, r0
 800d2fc:	461a      	mov	r2, r3
 800d2fe:	4ba5      	ldr	r3, [pc, #660]	; (800d594 <HAL_TIM_PeriodElapsedCallback+0xf84>)
 800d300:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 800d302:	2200      	movs	r2, #0
 800d304:	f44f 7100 	mov.w	r1, #512	; 0x200
 800d308:	48a1      	ldr	r0, [pc, #644]	; (800d590 <HAL_TIM_PeriodElapsedCallback+0xf80>)
 800d30a:	f7f4 fffb 	bl	8002304 <HAL_GPIO_WritePin>
			break;
 800d30e:	e220      	b.n	800d752 <HAL_TIM_PeriodElapsedCallback+0x1142>

		  case 2:
				//
				if(MF.FLAG.WCTRL){
 800d310:	4ba1      	ldr	r3, [pc, #644]	; (800d598 <HAL_TIM_PeriodElapsedCallback+0xf88>)
 800d312:	881b      	ldrh	r3, [r3, #0]
 800d314:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800d318:	b2db      	uxtb	r3, r3
 800d31a:	2b00      	cmp	r3, #0
 800d31c:	f000 81c5 	beq.w	800d6aa <HAL_TIM_PeriodElapsedCallback+0x109a>
					if(!MF2.FLAG.V){
 800d320:	4b9e      	ldr	r3, [pc, #632]	; (800d59c <HAL_TIM_PeriodElapsedCallback+0xf8c>)
 800d322:	881b      	ldrh	r3, [r3, #0]
 800d324:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800d328:	b2db      	uxtb	r3, r3
 800d32a:	2b00      	cmp	r3, #0
 800d32c:	f040 80bb 	bne.w	800d4a6 <HAL_TIM_PeriodElapsedCallback+0xe96>
						int16_t dwl_tmp = 0, dwr_tmp = 0;
 800d330:	2300      	movs	r3, #0
 800d332:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800d334:	2300      	movs	r3, #0
 800d336:	857b      	strh	r3, [r7, #42]	; 0x2a
						dif_l = (int32_t) ad_l - base_l;
 800d338:	4b99      	ldr	r3, [pc, #612]	; (800d5a0 <HAL_TIM_PeriodElapsedCallback+0xf90>)
 800d33a:	681b      	ldr	r3, [r3, #0]
 800d33c:	b29a      	uxth	r2, r3
 800d33e:	4b99      	ldr	r3, [pc, #612]	; (800d5a4 <HAL_TIM_PeriodElapsedCallback+0xf94>)
 800d340:	881b      	ldrh	r3, [r3, #0]
 800d342:	1ad3      	subs	r3, r2, r3
 800d344:	b29b      	uxth	r3, r3
 800d346:	b21a      	sxth	r2, r3
 800d348:	4b97      	ldr	r3, [pc, #604]	; (800d5a8 <HAL_TIM_PeriodElapsedCallback+0xf98>)
 800d34a:	801a      	strh	r2, [r3, #0]
						dif_r = (int32_t) ad_r - base_r;
 800d34c:	4b97      	ldr	r3, [pc, #604]	; (800d5ac <HAL_TIM_PeriodElapsedCallback+0xf9c>)
 800d34e:	681b      	ldr	r3, [r3, #0]
 800d350:	b29a      	uxth	r2, r3
 800d352:	4b97      	ldr	r3, [pc, #604]	; (800d5b0 <HAL_TIM_PeriodElapsedCallback+0xfa0>)
 800d354:	881b      	ldrh	r3, [r3, #0]
 800d356:	1ad3      	subs	r3, r2, r3
 800d358:	b29b      	uxth	r3, r3
 800d35a:	b21a      	sxth	r2, r3
 800d35c:	4b95      	ldr	r3, [pc, #596]	; (800d5b4 <HAL_TIM_PeriodElapsedCallback+0xfa4>)
 800d35e:	801a      	strh	r2, [r3, #0]

						if(dif_l > CTRL_BASE_L || dif_r > CTRL_BASE_R){
 800d360:	4b91      	ldr	r3, [pc, #580]	; (800d5a8 <HAL_TIM_PeriodElapsedCallback+0xf98>)
 800d362:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d366:	2b23      	cmp	r3, #35	; 0x23
 800d368:	dc04      	bgt.n	800d374 <HAL_TIM_PeriodElapsedCallback+0xd64>
 800d36a:	4b92      	ldr	r3, [pc, #584]	; (800d5b4 <HAL_TIM_PeriodElapsedCallback+0xfa4>)
 800d36c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d370:	2b1e      	cmp	r3, #30
 800d372:	dd70      	ble.n	800d456 <HAL_TIM_PeriodElapsedCallback+0xe46>
							if(dif_l > CTRL_BASE_L){
 800d374:	4b8c      	ldr	r3, [pc, #560]	; (800d5a8 <HAL_TIM_PeriodElapsedCallback+0xf98>)
 800d376:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d37a:	2b23      	cmp	r3, #35	; 0x23
 800d37c:	dd30      	ble.n	800d3e0 <HAL_TIM_PeriodElapsedCallback+0xdd0>
								dwl_tmp += CTRL_CONT_W * dif_l;					//a比例制御値を決定
 800d37e:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 800d382:	ee07 3a90 	vmov	s15, r3
 800d386:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800d38a:	4b87      	ldr	r3, [pc, #540]	; (800d5a8 <HAL_TIM_PeriodElapsedCallback+0xf98>)
 800d38c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d390:	ee07 3a90 	vmov	s15, r3
 800d394:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d398:	eef6 6a08 	vmov.f32	s13, #104	; 0x3f400000  0.750
 800d39c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800d3a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d3a4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d3a8:	ee17 3a90 	vmov	r3, s15
 800d3ac:	85bb      	strh	r3, [r7, #44]	; 0x2c
								dwr_tmp += -1 * CTRL_CONT_W * dif_l;			//a比例制御値を決定
 800d3ae:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800d3b2:	ee07 3a90 	vmov	s15, r3
 800d3b6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800d3ba:	4b7b      	ldr	r3, [pc, #492]	; (800d5a8 <HAL_TIM_PeriodElapsedCallback+0xf98>)
 800d3bc:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d3c0:	ee07 3a90 	vmov	s15, r3
 800d3c4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d3c8:	eefe 6a08 	vmov.f32	s13, #232	; 0xbf400000 -0.750
 800d3cc:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800d3d0:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d3d4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d3d8:	ee17 3a90 	vmov	r3, s15
 800d3dc:	857b      	strh	r3, [r7, #42]	; 0x2a
 800d3de:	e034      	b.n	800d44a <HAL_TIM_PeriodElapsedCallback+0xe3a>
							}
							else if(dif_r > CTRL_BASE_R){
 800d3e0:	4b74      	ldr	r3, [pc, #464]	; (800d5b4 <HAL_TIM_PeriodElapsedCallback+0xfa4>)
 800d3e2:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d3e6:	2b1e      	cmp	r3, #30
 800d3e8:	dd2f      	ble.n	800d44a <HAL_TIM_PeriodElapsedCallback+0xe3a>
								dwl_tmp += -1 * CTRL_CONT_W * dif_r;			//a比例制御値を決定
 800d3ea:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 800d3ee:	ee07 3a90 	vmov	s15, r3
 800d3f2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800d3f6:	4b6f      	ldr	r3, [pc, #444]	; (800d5b4 <HAL_TIM_PeriodElapsedCallback+0xfa4>)
 800d3f8:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d3fc:	ee07 3a90 	vmov	s15, r3
 800d400:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d404:	eefe 6a08 	vmov.f32	s13, #232	; 0xbf400000 -0.750
 800d408:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800d40c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d410:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d414:	ee17 3a90 	vmov	r3, s15
 800d418:	85bb      	strh	r3, [r7, #44]	; 0x2c
								dwr_tmp += CTRL_CONT_W * dif_r;					//a比例制御値を決定
 800d41a:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800d41e:	ee07 3a90 	vmov	s15, r3
 800d422:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800d426:	4b63      	ldr	r3, [pc, #396]	; (800d5b4 <HAL_TIM_PeriodElapsedCallback+0xfa4>)
 800d428:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d42c:	ee07 3a90 	vmov	s15, r3
 800d430:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d434:	eef6 6a08 	vmov.f32	s13, #104	; 0x3f400000  0.750
 800d438:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800d43c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d440:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d444:	ee17 3a90 	vmov	r3, s15
 800d448:	857b      	strh	r3, [r7, #42]	; 0x2a
							}
							MF2.FLAG.WG = 1;
 800d44a:	4a54      	ldr	r2, [pc, #336]	; (800d59c <HAL_TIM_PeriodElapsedCallback+0xf8c>)
 800d44c:	8813      	ldrh	r3, [r2, #0]
 800d44e:	f043 0310 	orr.w	r3, r3, #16
 800d452:	8013      	strh	r3, [r2, #0]
 800d454:	e004      	b.n	800d460 <HAL_TIM_PeriodElapsedCallback+0xe50>
						}else{
							MF2.FLAG.WG = 0;
 800d456:	4a51      	ldr	r2, [pc, #324]	; (800d59c <HAL_TIM_PeriodElapsedCallback+0xf8c>)
 800d458:	8813      	ldrh	r3, [r2, #0]
 800d45a:	f36f 1304 	bfc	r3, #4, #1
 800d45e:	8013      	strh	r3, [r2, #0]
						}
						dwl = max(min(CTRL_MAX_W, dwl_tmp), -1 * CTRL_MAX_W);
 800d460:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 800d464:	f513 7f7a 	cmn.w	r3, #1000	; 0x3e8
 800d468:	dd08      	ble.n	800d47c <HAL_TIM_PeriodElapsedCallback+0xe6c>
 800d46a:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 800d46e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d472:	bfa8      	it	ge
 800d474:	f44f 737a 	movge.w	r3, #1000	; 0x3e8
 800d478:	b21b      	sxth	r3, r3
 800d47a:	e000      	b.n	800d47e <HAL_TIM_PeriodElapsedCallback+0xe6e>
 800d47c:	4b4e      	ldr	r3, [pc, #312]	; (800d5b8 <HAL_TIM_PeriodElapsedCallback+0xfa8>)
 800d47e:	4a4f      	ldr	r2, [pc, #316]	; (800d5bc <HAL_TIM_PeriodElapsedCallback+0xfac>)
 800d480:	8013      	strh	r3, [r2, #0]
						dwr = max(min(CTRL_MAX_W, dwr_tmp), -1 * CTRL_MAX_W);
 800d482:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800d486:	f513 7f7a 	cmn.w	r3, #1000	; 0x3e8
 800d48a:	dd08      	ble.n	800d49e <HAL_TIM_PeriodElapsedCallback+0xe8e>
 800d48c:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800d490:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d494:	bfa8      	it	ge
 800d496:	f44f 737a 	movge.w	r3, #1000	; 0x3e8
 800d49a:	b21b      	sxth	r3, r3
 800d49c:	e000      	b.n	800d4a0 <HAL_TIM_PeriodElapsedCallback+0xe90>
 800d49e:	4b46      	ldr	r3, [pc, #280]	; (800d5b8 <HAL_TIM_PeriodElapsedCallback+0xfa8>)
 800d4a0:	4a47      	ldr	r2, [pc, #284]	; (800d5c0 <HAL_TIM_PeriodElapsedCallback+0xfb0>)
 800d4a2:	8013      	strh	r3, [r2, #0]
 800d4a4:	e108      	b.n	800d6b8 <HAL_TIM_PeriodElapsedCallback+0x10a8>
					}else{
						int16_t dwl_tmp = 0, dwr_tmp = 0;
 800d4a6:	2300      	movs	r3, #0
 800d4a8:	853b      	strh	r3, [r7, #40]	; 0x28
 800d4aa:	2300      	movs	r3, #0
 800d4ac:	84fb      	strh	r3, [r7, #38]	; 0x26
						dif_l = (int32_t) ad_fl - BASE_FL;
 800d4ae:	4b37      	ldr	r3, [pc, #220]	; (800d58c <HAL_TIM_PeriodElapsedCallback+0xf7c>)
 800d4b0:	681b      	ldr	r3, [r3, #0]
 800d4b2:	b29b      	uxth	r3, r3
 800d4b4:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800d4b8:	b29b      	uxth	r3, r3
 800d4ba:	b21a      	sxth	r2, r3
 800d4bc:	4b3a      	ldr	r3, [pc, #232]	; (800d5a8 <HAL_TIM_PeriodElapsedCallback+0xf98>)
 800d4be:	801a      	strh	r2, [r3, #0]
						dif_r = (int32_t) ad_fr - BASE_FR;
 800d4c0:	4b34      	ldr	r3, [pc, #208]	; (800d594 <HAL_TIM_PeriodElapsedCallback+0xf84>)
 800d4c2:	681b      	ldr	r3, [r3, #0]
 800d4c4:	b29b      	uxth	r3, r3
 800d4c6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800d4ca:	b29b      	uxth	r3, r3
 800d4cc:	b21a      	sxth	r2, r3
 800d4ce:	4b39      	ldr	r3, [pc, #228]	; (800d5b4 <HAL_TIM_PeriodElapsedCallback+0xfa4>)
 800d4d0:	801a      	strh	r2, [r3, #0]

						if(dif_l > CTRL_BASE_FL || dif_r > CTRL_BASE_FR){
 800d4d2:	4b35      	ldr	r3, [pc, #212]	; (800d5a8 <HAL_TIM_PeriodElapsedCallback+0xf98>)
 800d4d4:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d4d8:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 800d4dc:	dc05      	bgt.n	800d4ea <HAL_TIM_PeriodElapsedCallback+0xeda>
 800d4de:	4b35      	ldr	r3, [pc, #212]	; (800d5b4 <HAL_TIM_PeriodElapsedCallback+0xfa4>)
 800d4e0:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d4e4:	2bc8      	cmp	r3, #200	; 0xc8
 800d4e6:	f340 80b8 	ble.w	800d65a <HAL_TIM_PeriodElapsedCallback+0x104a>
							if(dif_l > CTRL_BASE_FL){
 800d4ea:	4b2f      	ldr	r3, [pc, #188]	; (800d5a8 <HAL_TIM_PeriodElapsedCallback+0xf98>)
 800d4ec:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d4f0:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 800d4f4:	dd66      	ble.n	800d5c4 <HAL_TIM_PeriodElapsedCallback+0xfb4>
								dwl_tmp += CTRL_CONT_W * 0.1 * dif_l;				//a比例制御値を決定
 800d4f6:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 800d4fa:	4618      	mov	r0, r3
 800d4fc:	f7f3 f80a 	bl	8000514 <__aeabi_i2d>
 800d500:	4604      	mov	r4, r0
 800d502:	460d      	mov	r5, r1
 800d504:	4b28      	ldr	r3, [pc, #160]	; (800d5a8 <HAL_TIM_PeriodElapsedCallback+0xf98>)
 800d506:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d50a:	4618      	mov	r0, r3
 800d50c:	f7f3 f802 	bl	8000514 <__aeabi_i2d>
 800d510:	a319      	add	r3, pc, #100	; (adr r3, 800d578 <HAL_TIM_PeriodElapsedCallback+0xf68>)
 800d512:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d516:	f7f3 f867 	bl	80005e8 <__aeabi_dmul>
 800d51a:	4602      	mov	r2, r0
 800d51c:	460b      	mov	r3, r1
 800d51e:	4620      	mov	r0, r4
 800d520:	4629      	mov	r1, r5
 800d522:	f7f2 feab 	bl	800027c <__adddf3>
 800d526:	4603      	mov	r3, r0
 800d528:	460c      	mov	r4, r1
 800d52a:	4618      	mov	r0, r3
 800d52c:	4621      	mov	r1, r4
 800d52e:	f7f3 fb0b 	bl	8000b48 <__aeabi_d2iz>
 800d532:	4603      	mov	r3, r0
 800d534:	853b      	strh	r3, [r7, #40]	; 0x28
								dwr_tmp += -1 * CTRL_CONT_W * 0.1 * dif_l;			//a比例制御値を決定
 800d536:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800d53a:	4618      	mov	r0, r3
 800d53c:	f7f2 ffea 	bl	8000514 <__aeabi_i2d>
 800d540:	4604      	mov	r4, r0
 800d542:	460d      	mov	r5, r1
 800d544:	4b18      	ldr	r3, [pc, #96]	; (800d5a8 <HAL_TIM_PeriodElapsedCallback+0xf98>)
 800d546:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d54a:	4618      	mov	r0, r3
 800d54c:	f7f2 ffe2 	bl	8000514 <__aeabi_i2d>
 800d550:	a30b      	add	r3, pc, #44	; (adr r3, 800d580 <HAL_TIM_PeriodElapsedCallback+0xf70>)
 800d552:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d556:	f7f3 f847 	bl	80005e8 <__aeabi_dmul>
 800d55a:	4602      	mov	r2, r0
 800d55c:	460b      	mov	r3, r1
 800d55e:	4620      	mov	r0, r4
 800d560:	4629      	mov	r1, r5
 800d562:	f7f2 fe8b 	bl	800027c <__adddf3>
 800d566:	4603      	mov	r3, r0
 800d568:	460c      	mov	r4, r1
 800d56a:	4618      	mov	r0, r3
 800d56c:	4621      	mov	r1, r4
 800d56e:	f7f3 faeb 	bl	8000b48 <__aeabi_d2iz>
 800d572:	4603      	mov	r3, r0
 800d574:	84fb      	strh	r3, [r7, #38]	; 0x26
 800d576:	e06a      	b.n	800d64e <HAL_TIM_PeriodElapsedCallback+0x103e>
 800d578:	33333334 	.word	0x33333334
 800d57c:	3fb33333 	.word	0x3fb33333
 800d580:	33333334 	.word	0x33333334
 800d584:	bfb33333 	.word	0xbfb33333
 800d588:	20000b00 	.word	0x20000b00
 800d58c:	20000d54 	.word	0x20000d54
 800d590:	40020800 	.word	0x40020800
 800d594:	20000c00 	.word	0x20000c00
 800d598:	20000f68 	.word	0x20000f68
 800d59c:	20000f64 	.word	0x20000f64
 800d5a0:	20000afc 	.word	0x20000afc
 800d5a4:	2000034c 	.word	0x2000034c
 800d5a8:	20000b50 	.word	0x20000b50
 800d5ac:	20000f60 	.word	0x20000f60
 800d5b0:	200002c0 	.word	0x200002c0
 800d5b4:	20000bb2 	.word	0x20000bb2
 800d5b8:	fffffc18 	.word	0xfffffc18
 800d5bc:	20000af8 	.word	0x20000af8
 800d5c0:	20000f74 	.word	0x20000f74
							}
							else if(dif_r > CTRL_BASE_FR){
 800d5c4:	4bb8      	ldr	r3, [pc, #736]	; (800d8a8 <HAL_TIM_PeriodElapsedCallback+0x1298>)
 800d5c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d5ca:	2bc8      	cmp	r3, #200	; 0xc8
 800d5cc:	dd3f      	ble.n	800d64e <HAL_TIM_PeriodElapsedCallback+0x103e>
								dwl_tmp += -1 * CTRL_CONT_W * 0.2 * dif_r;			//a比例制御値を決定
 800d5ce:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 800d5d2:	4618      	mov	r0, r3
 800d5d4:	f7f2 ff9e 	bl	8000514 <__aeabi_i2d>
 800d5d8:	4604      	mov	r4, r0
 800d5da:	460d      	mov	r5, r1
 800d5dc:	4bb2      	ldr	r3, [pc, #712]	; (800d8a8 <HAL_TIM_PeriodElapsedCallback+0x1298>)
 800d5de:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d5e2:	4618      	mov	r0, r3
 800d5e4:	f7f2 ff96 	bl	8000514 <__aeabi_i2d>
 800d5e8:	a3ab      	add	r3, pc, #684	; (adr r3, 800d898 <HAL_TIM_PeriodElapsedCallback+0x1288>)
 800d5ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5ee:	f7f2 fffb 	bl	80005e8 <__aeabi_dmul>
 800d5f2:	4602      	mov	r2, r0
 800d5f4:	460b      	mov	r3, r1
 800d5f6:	4620      	mov	r0, r4
 800d5f8:	4629      	mov	r1, r5
 800d5fa:	f7f2 fe3f 	bl	800027c <__adddf3>
 800d5fe:	4603      	mov	r3, r0
 800d600:	460c      	mov	r4, r1
 800d602:	4618      	mov	r0, r3
 800d604:	4621      	mov	r1, r4
 800d606:	f7f3 fa9f 	bl	8000b48 <__aeabi_d2iz>
 800d60a:	4603      	mov	r3, r0
 800d60c:	853b      	strh	r3, [r7, #40]	; 0x28
								dwr_tmp += CTRL_CONT_W * 0.2 * dif_r;				//a比例制御値を決定
 800d60e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800d612:	4618      	mov	r0, r3
 800d614:	f7f2 ff7e 	bl	8000514 <__aeabi_i2d>
 800d618:	4604      	mov	r4, r0
 800d61a:	460d      	mov	r5, r1
 800d61c:	4ba2      	ldr	r3, [pc, #648]	; (800d8a8 <HAL_TIM_PeriodElapsedCallback+0x1298>)
 800d61e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d622:	4618      	mov	r0, r3
 800d624:	f7f2 ff76 	bl	8000514 <__aeabi_i2d>
 800d628:	a39d      	add	r3, pc, #628	; (adr r3, 800d8a0 <HAL_TIM_PeriodElapsedCallback+0x1290>)
 800d62a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d62e:	f7f2 ffdb 	bl	80005e8 <__aeabi_dmul>
 800d632:	4602      	mov	r2, r0
 800d634:	460b      	mov	r3, r1
 800d636:	4620      	mov	r0, r4
 800d638:	4629      	mov	r1, r5
 800d63a:	f7f2 fe1f 	bl	800027c <__adddf3>
 800d63e:	4603      	mov	r3, r0
 800d640:	460c      	mov	r4, r1
 800d642:	4618      	mov	r0, r3
 800d644:	4621      	mov	r1, r4
 800d646:	f7f3 fa7f 	bl	8000b48 <__aeabi_d2iz>
 800d64a:	4603      	mov	r3, r0
 800d64c:	84fb      	strh	r3, [r7, #38]	; 0x26
							}
							MF2.FLAG.WG = 1;
 800d64e:	4a97      	ldr	r2, [pc, #604]	; (800d8ac <HAL_TIM_PeriodElapsedCallback+0x129c>)
 800d650:	8813      	ldrh	r3, [r2, #0]
 800d652:	f043 0310 	orr.w	r3, r3, #16
 800d656:	8013      	strh	r3, [r2, #0]
 800d658:	e004      	b.n	800d664 <HAL_TIM_PeriodElapsedCallback+0x1054>
						}else{
							MF2.FLAG.WG = 0;
 800d65a:	4a94      	ldr	r2, [pc, #592]	; (800d8ac <HAL_TIM_PeriodElapsedCallback+0x129c>)
 800d65c:	8813      	ldrh	r3, [r2, #0]
 800d65e:	f36f 1304 	bfc	r3, #4, #1
 800d662:	8013      	strh	r3, [r2, #0]
						}
						dwl = max(min(CTRL_MAX_W, dwl_tmp), -1 * CTRL_MAX_W);
 800d664:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 800d668:	f513 7f7a 	cmn.w	r3, #1000	; 0x3e8
 800d66c:	dd08      	ble.n	800d680 <HAL_TIM_PeriodElapsedCallback+0x1070>
 800d66e:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 800d672:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d676:	bfa8      	it	ge
 800d678:	f44f 737a 	movge.w	r3, #1000	; 0x3e8
 800d67c:	b21b      	sxth	r3, r3
 800d67e:	e000      	b.n	800d682 <HAL_TIM_PeriodElapsedCallback+0x1072>
 800d680:	4b8b      	ldr	r3, [pc, #556]	; (800d8b0 <HAL_TIM_PeriodElapsedCallback+0x12a0>)
 800d682:	4a8c      	ldr	r2, [pc, #560]	; (800d8b4 <HAL_TIM_PeriodElapsedCallback+0x12a4>)
 800d684:	8013      	strh	r3, [r2, #0]
						dwr = max(min(CTRL_MAX_W, dwr_tmp), -1 * CTRL_MAX_W);
 800d686:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800d68a:	f513 7f7a 	cmn.w	r3, #1000	; 0x3e8
 800d68e:	dd08      	ble.n	800d6a2 <HAL_TIM_PeriodElapsedCallback+0x1092>
 800d690:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800d694:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d698:	bfa8      	it	ge
 800d69a:	f44f 737a 	movge.w	r3, #1000	; 0x3e8
 800d69e:	b21b      	sxth	r3, r3
 800d6a0:	e000      	b.n	800d6a4 <HAL_TIM_PeriodElapsedCallback+0x1094>
 800d6a2:	4b83      	ldr	r3, [pc, #524]	; (800d8b0 <HAL_TIM_PeriodElapsedCallback+0x12a0>)
 800d6a4:	4a84      	ldr	r2, [pc, #528]	; (800d8b8 <HAL_TIM_PeriodElapsedCallback+0x12a8>)
 800d6a6:	8013      	strh	r3, [r2, #0]
 800d6a8:	e006      	b.n	800d6b8 <HAL_TIM_PeriodElapsedCallback+0x10a8>
					}
				}else{
					//a制御フラグがなければ壁制御値0
					dwl = dwr = 0;
 800d6aa:	2100      	movs	r1, #0
 800d6ac:	4b82      	ldr	r3, [pc, #520]	; (800d8b8 <HAL_TIM_PeriodElapsedCallback+0x12a8>)
 800d6ae:	460a      	mov	r2, r1
 800d6b0:	801a      	strh	r2, [r3, #0]
 800d6b2:	4b80      	ldr	r3, [pc, #512]	; (800d8b4 <HAL_TIM_PeriodElapsedCallback+0x12a4>)
 800d6b4:	460a      	mov	r2, r1
 800d6b6:	801a      	strh	r2, [r3, #0]
				}

				if(MF.FLAG.GCTRL){
 800d6b8:	4b80      	ldr	r3, [pc, #512]	; (800d8bc <HAL_TIM_PeriodElapsedCallback+0x12ac>)
 800d6ba:	881b      	ldrh	r3, [r3, #0]
 800d6bc:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800d6c0:	b2db      	uxtb	r3, r3
 800d6c2:	2b00      	cmp	r3, #0
 800d6c4:	d03d      	beq.n	800d742 <HAL_TIM_PeriodElapsedCallback+0x1132>
				}

					dg = CTRL_CONT_G * gyro_read_z();			//a角速度制御
					dg = CTRL_CONT_G * degree_z;				//a角度制御
*/
					dg = CTRL_CONT_G * (target_degree_z - degree_z);		//a角度制御(目標角度はスタートを0度とし、旋回量と対応付け)
 800d6c6:	4b7e      	ldr	r3, [pc, #504]	; (800d8c0 <HAL_TIM_PeriodElapsedCallback+0x12b0>)
 800d6c8:	ed93 7a00 	vldr	s14, [r3]
 800d6cc:	4b7d      	ldr	r3, [pc, #500]	; (800d8c4 <HAL_TIM_PeriodElapsedCallback+0x12b4>)
 800d6ce:	edd3 7a00 	vldr	s15, [r3]
 800d6d2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d6d6:	ed9f 7a7c 	vldr	s14, [pc, #496]	; 800d8c8 <HAL_TIM_PeriodElapsedCallback+0x12b8>
 800d6da:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d6de:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d6e2:	ee17 3a90 	vmov	r3, s15
 800d6e6:	b21a      	sxth	r2, r3
 800d6e8:	4b78      	ldr	r3, [pc, #480]	; (800d8cc <HAL_TIM_PeriodElapsedCallback+0x12bc>)
 800d6ea:	801a      	strh	r2, [r3, #0]

					dg = max(min(CTRL_MAX_G, dg), -1 * CTRL_MAX_G);
 800d6ec:	4b77      	ldr	r3, [pc, #476]	; (800d8cc <HAL_TIM_PeriodElapsedCallback+0x12bc>)
 800d6ee:	881b      	ldrh	r3, [r3, #0]
 800d6f0:	b21b      	sxth	r3, r3
 800d6f2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d6f6:	da05      	bge.n	800d704 <HAL_TIM_PeriodElapsedCallback+0x10f4>
 800d6f8:	4b74      	ldr	r3, [pc, #464]	; (800d8cc <HAL_TIM_PeriodElapsedCallback+0x12bc>)
 800d6fa:	881b      	ldrh	r3, [r3, #0]
 800d6fc:	b21b      	sxth	r3, r3
 800d6fe:	f513 7f7a 	cmn.w	r3, #1000	; 0x3e8
 800d702:	dd0c      	ble.n	800d71e <HAL_TIM_PeriodElapsedCallback+0x110e>
 800d704:	4b71      	ldr	r3, [pc, #452]	; (800d8cc <HAL_TIM_PeriodElapsedCallback+0x12bc>)
 800d706:	881b      	ldrh	r3, [r3, #0]
 800d708:	b21b      	sxth	r3, r3
 800d70a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d70e:	da03      	bge.n	800d718 <HAL_TIM_PeriodElapsedCallback+0x1108>
 800d710:	4b6e      	ldr	r3, [pc, #440]	; (800d8cc <HAL_TIM_PeriodElapsedCallback+0x12bc>)
 800d712:	881b      	ldrh	r3, [r3, #0]
 800d714:	b21b      	sxth	r3, r3
 800d716:	e003      	b.n	800d720 <HAL_TIM_PeriodElapsedCallback+0x1110>
 800d718:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800d71c:	e000      	b.n	800d720 <HAL_TIM_PeriodElapsedCallback+0x1110>
 800d71e:	4b64      	ldr	r3, [pc, #400]	; (800d8b0 <HAL_TIM_PeriodElapsedCallback+0x12a0>)
 800d720:	4a6a      	ldr	r2, [pc, #424]	; (800d8cc <HAL_TIM_PeriodElapsedCallback+0x12bc>)
 800d722:	8013      	strh	r3, [r2, #0]
					dgl = -1*dg;
 800d724:	4b69      	ldr	r3, [pc, #420]	; (800d8cc <HAL_TIM_PeriodElapsedCallback+0x12bc>)
 800d726:	881b      	ldrh	r3, [r3, #0]
 800d728:	b21b      	sxth	r3, r3
 800d72a:	b29b      	uxth	r3, r3
 800d72c:	425b      	negs	r3, r3
 800d72e:	b29b      	uxth	r3, r3
 800d730:	b21a      	sxth	r2, r3
 800d732:	4b67      	ldr	r3, [pc, #412]	; (800d8d0 <HAL_TIM_PeriodElapsedCallback+0x12c0>)
 800d734:	801a      	strh	r2, [r3, #0]
					dgr = dg;
 800d736:	4b65      	ldr	r3, [pc, #404]	; (800d8cc <HAL_TIM_PeriodElapsedCallback+0x12bc>)
 800d738:	881b      	ldrh	r3, [r3, #0]
 800d73a:	b21a      	sxth	r2, r3
 800d73c:	4b65      	ldr	r3, [pc, #404]	; (800d8d4 <HAL_TIM_PeriodElapsedCallback+0x12c4>)
 800d73e:	801a      	strh	r2, [r3, #0]
				}else{
					//a制御フラグがなければ壁制御値0
					dgl = dgr = 0;
				}
				break;
 800d740:	e006      	b.n	800d750 <HAL_TIM_PeriodElapsedCallback+0x1140>
					dgl = dgr = 0;
 800d742:	2100      	movs	r1, #0
 800d744:	4b63      	ldr	r3, [pc, #396]	; (800d8d4 <HAL_TIM_PeriodElapsedCallback+0x12c4>)
 800d746:	460a      	mov	r2, r1
 800d748:	801a      	strh	r2, [r3, #0]
 800d74a:	4b61      	ldr	r3, [pc, #388]	; (800d8d0 <HAL_TIM_PeriodElapsedCallback+0x12c0>)
 800d74c:	460a      	mov	r2, r1
 800d74e:	801a      	strh	r2, [r3, #0]
				break;
 800d750:	bf00      	nop
		}


		if(MF.FLAG.DRV){
 800d752:	4b5a      	ldr	r3, [pc, #360]	; (800d8bc <HAL_TIM_PeriodElapsedCallback+0x12ac>)
 800d754:	881b      	ldrh	r3, [r3, #0]
 800d756:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800d75a:	b2db      	uxtb	r3, r3
 800d75c:	2b00      	cmp	r3, #0
 800d75e:	f000 81b2 	beq.w	800dac6 <HAL_TIM_PeriodElapsedCallback+0x14b6>
			if(!MF2.FLAG.WG){
 800d762:	4b52      	ldr	r3, [pc, #328]	; (800d8ac <HAL_TIM_PeriodElapsedCallback+0x129c>)
 800d764:	881b      	ldrh	r3, [r3, #0]
 800d766:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800d76a:	b2db      	uxtb	r3, r3
 800d76c:	2b00      	cmp	r3, #0
 800d76e:	d130      	bne.n	800d7d2 <HAL_TIM_PeriodElapsedCallback+0x11c2>
				pulse_l = pulse_l + dgl + dwl;
 800d770:	4b57      	ldr	r3, [pc, #348]	; (800d8d0 <HAL_TIM_PeriodElapsedCallback+0x12c0>)
 800d772:	881b      	ldrh	r3, [r3, #0]
 800d774:	b21b      	sxth	r3, r3
 800d776:	ee07 3a90 	vmov	s15, r3
 800d77a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800d77e:	4b56      	ldr	r3, [pc, #344]	; (800d8d8 <HAL_TIM_PeriodElapsedCallback+0x12c8>)
 800d780:	edd3 7a00 	vldr	s15, [r3]
 800d784:	ee37 7a27 	vadd.f32	s14, s14, s15
 800d788:	4b4a      	ldr	r3, [pc, #296]	; (800d8b4 <HAL_TIM_PeriodElapsedCallback+0x12a4>)
 800d78a:	881b      	ldrh	r3, [r3, #0]
 800d78c:	b21b      	sxth	r3, r3
 800d78e:	ee07 3a90 	vmov	s15, r3
 800d792:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d796:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d79a:	4b4f      	ldr	r3, [pc, #316]	; (800d8d8 <HAL_TIM_PeriodElapsedCallback+0x12c8>)
 800d79c:	edc3 7a00 	vstr	s15, [r3]
				pulse_r = pulse_r + dgr + dwr;
 800d7a0:	4b4c      	ldr	r3, [pc, #304]	; (800d8d4 <HAL_TIM_PeriodElapsedCallback+0x12c4>)
 800d7a2:	881b      	ldrh	r3, [r3, #0]
 800d7a4:	b21b      	sxth	r3, r3
 800d7a6:	ee07 3a90 	vmov	s15, r3
 800d7aa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800d7ae:	4b4b      	ldr	r3, [pc, #300]	; (800d8dc <HAL_TIM_PeriodElapsedCallback+0x12cc>)
 800d7b0:	edd3 7a00 	vldr	s15, [r3]
 800d7b4:	ee37 7a27 	vadd.f32	s14, s14, s15
 800d7b8:	4b3f      	ldr	r3, [pc, #252]	; (800d8b8 <HAL_TIM_PeriodElapsedCallback+0x12a8>)
 800d7ba:	881b      	ldrh	r3, [r3, #0]
 800d7bc:	b21b      	sxth	r3, r3
 800d7be:	ee07 3a90 	vmov	s15, r3
 800d7c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d7c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d7ca:	4b44      	ldr	r3, [pc, #272]	; (800d8dc <HAL_TIM_PeriodElapsedCallback+0x12cc>)
 800d7cc:	edc3 7a00 	vstr	s15, [r3]
 800d7d0:	e02f      	b.n	800d832 <HAL_TIM_PeriodElapsedCallback+0x1222>
//				pulse_l = pulse_l + dgl;
//				pulse_r = pulse_r + dgr;
			}else{
				pulse_l = pulse_l + dgl + dwl;
 800d7d2:	4b3f      	ldr	r3, [pc, #252]	; (800d8d0 <HAL_TIM_PeriodElapsedCallback+0x12c0>)
 800d7d4:	881b      	ldrh	r3, [r3, #0]
 800d7d6:	b21b      	sxth	r3, r3
 800d7d8:	ee07 3a90 	vmov	s15, r3
 800d7dc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800d7e0:	4b3d      	ldr	r3, [pc, #244]	; (800d8d8 <HAL_TIM_PeriodElapsedCallback+0x12c8>)
 800d7e2:	edd3 7a00 	vldr	s15, [r3]
 800d7e6:	ee37 7a27 	vadd.f32	s14, s14, s15
 800d7ea:	4b32      	ldr	r3, [pc, #200]	; (800d8b4 <HAL_TIM_PeriodElapsedCallback+0x12a4>)
 800d7ec:	881b      	ldrh	r3, [r3, #0]
 800d7ee:	b21b      	sxth	r3, r3
 800d7f0:	ee07 3a90 	vmov	s15, r3
 800d7f4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d7f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d7fc:	4b36      	ldr	r3, [pc, #216]	; (800d8d8 <HAL_TIM_PeriodElapsedCallback+0x12c8>)
 800d7fe:	edc3 7a00 	vstr	s15, [r3]
				pulse_r = pulse_r + dgr + dwr;
 800d802:	4b34      	ldr	r3, [pc, #208]	; (800d8d4 <HAL_TIM_PeriodElapsedCallback+0x12c4>)
 800d804:	881b      	ldrh	r3, [r3, #0]
 800d806:	b21b      	sxth	r3, r3
 800d808:	ee07 3a90 	vmov	s15, r3
 800d80c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800d810:	4b32      	ldr	r3, [pc, #200]	; (800d8dc <HAL_TIM_PeriodElapsedCallback+0x12cc>)
 800d812:	edd3 7a00 	vldr	s15, [r3]
 800d816:	ee37 7a27 	vadd.f32	s14, s14, s15
 800d81a:	4b27      	ldr	r3, [pc, #156]	; (800d8b8 <HAL_TIM_PeriodElapsedCallback+0x12a8>)
 800d81c:	881b      	ldrh	r3, [r3, #0]
 800d81e:	b21b      	sxth	r3, r3
 800d820:	ee07 3a90 	vmov	s15, r3
 800d824:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d828:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d82c:	4b2b      	ldr	r3, [pc, #172]	; (800d8dc <HAL_TIM_PeriodElapsedCallback+0x12cc>)
 800d82e:	edc3 7a00 	vstr	s15, [r3]
//				pulse_l = pulse_l + dwl;
//				pulse_r = pulse_r + dwr;
			}
			pulse_l = min(max(pulse_l, -1000), 1000);
 800d832:	4b29      	ldr	r3, [pc, #164]	; (800d8d8 <HAL_TIM_PeriodElapsedCallback+0x12c8>)
 800d834:	edd3 7a00 	vldr	s15, [r3]
 800d838:	ed9f 7a29 	vldr	s14, [pc, #164]	; 800d8e0 <HAL_TIM_PeriodElapsedCallback+0x12d0>
 800d83c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d840:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d844:	bfcc      	ite	gt
 800d846:	2301      	movgt	r3, #1
 800d848:	2300      	movle	r3, #0
 800d84a:	b2db      	uxtb	r3, r3
 800d84c:	f083 0301 	eor.w	r3, r3, #1
 800d850:	b2db      	uxtb	r3, r3
 800d852:	2b00      	cmp	r3, #0
 800d854:	d111      	bne.n	800d87a <HAL_TIM_PeriodElapsedCallback+0x126a>
 800d856:	4b20      	ldr	r3, [pc, #128]	; (800d8d8 <HAL_TIM_PeriodElapsedCallback+0x12c8>)
 800d858:	edd3 7a00 	vldr	s15, [r3]
 800d85c:	ed9f 7a21 	vldr	s14, [pc, #132]	; 800d8e4 <HAL_TIM_PeriodElapsedCallback+0x12d4>
 800d860:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d864:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d868:	bfcc      	ite	gt
 800d86a:	2301      	movgt	r3, #1
 800d86c:	2300      	movle	r3, #0
 800d86e:	b2db      	uxtb	r3, r3
 800d870:	f083 0301 	eor.w	r3, r3, #1
 800d874:	b2db      	uxtb	r3, r3
 800d876:	2b00      	cmp	r3, #0
 800d878:	d038      	beq.n	800d8ec <HAL_TIM_PeriodElapsedCallback+0x12dc>
 800d87a:	4b17      	ldr	r3, [pc, #92]	; (800d8d8 <HAL_TIM_PeriodElapsedCallback+0x12c8>)
 800d87c:	edd3 7a00 	vldr	s15, [r3]
 800d880:	ed9f 7a17 	vldr	s14, [pc, #92]	; 800d8e0 <HAL_TIM_PeriodElapsedCallback+0x12d0>
 800d884:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d888:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d88c:	dd2c      	ble.n	800d8e8 <HAL_TIM_PeriodElapsedCallback+0x12d8>
 800d88e:	4b12      	ldr	r3, [pc, #72]	; (800d8d8 <HAL_TIM_PeriodElapsedCallback+0x12c8>)
 800d890:	681b      	ldr	r3, [r3, #0]
 800d892:	e02c      	b.n	800d8ee <HAL_TIM_PeriodElapsedCallback+0x12de>
 800d894:	f3af 8000 	nop.w
 800d898:	33333334 	.word	0x33333334
 800d89c:	bfc33333 	.word	0xbfc33333
 800d8a0:	33333334 	.word	0x33333334
 800d8a4:	3fc33333 	.word	0x3fc33333
 800d8a8:	20000bb2 	.word	0x20000bb2
 800d8ac:	20000f64 	.word	0x20000f64
 800d8b0:	fffffc18 	.word	0xfffffc18
 800d8b4:	20000af8 	.word	0x20000af8
 800d8b8:	20000f74 	.word	0x20000f74
 800d8bc:	20000f68 	.word	0x20000f68
 800d8c0:	20000bf8 	.word	0x20000bf8
 800d8c4:	20000b5c 	.word	0x20000b5c
 800d8c8:	43480000 	.word	0x43480000
 800d8cc:	20000c10 	.word	0x20000c10
 800d8d0:	2000019c 	.word	0x2000019c
 800d8d4:	20000b4e 	.word	0x20000b4e
 800d8d8:	20000ba8 	.word	0x20000ba8
 800d8dc:	20000780 	.word	0x20000780
 800d8e0:	c47a0000 	.word	0xc47a0000
 800d8e4:	447a0000 	.word	0x447a0000
 800d8e8:	4bb7      	ldr	r3, [pc, #732]	; (800dbc8 <HAL_TIM_PeriodElapsedCallback+0x15b8>)
 800d8ea:	e000      	b.n	800d8ee <HAL_TIM_PeriodElapsedCallback+0x12de>
 800d8ec:	4bb7      	ldr	r3, [pc, #732]	; (800dbcc <HAL_TIM_PeriodElapsedCallback+0x15bc>)
 800d8ee:	4ab8      	ldr	r2, [pc, #736]	; (800dbd0 <HAL_TIM_PeriodElapsedCallback+0x15c0>)
 800d8f0:	6013      	str	r3, [r2, #0]
			pulse_r = min(max(pulse_r, -1000), 1000);
 800d8f2:	4bb8      	ldr	r3, [pc, #736]	; (800dbd4 <HAL_TIM_PeriodElapsedCallback+0x15c4>)
 800d8f4:	edd3 7a00 	vldr	s15, [r3]
 800d8f8:	ed9f 7ab7 	vldr	s14, [pc, #732]	; 800dbd8 <HAL_TIM_PeriodElapsedCallback+0x15c8>
 800d8fc:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d900:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d904:	bfcc      	ite	gt
 800d906:	2301      	movgt	r3, #1
 800d908:	2300      	movle	r3, #0
 800d90a:	b2db      	uxtb	r3, r3
 800d90c:	f083 0301 	eor.w	r3, r3, #1
 800d910:	b2db      	uxtb	r3, r3
 800d912:	2b00      	cmp	r3, #0
 800d914:	d111      	bne.n	800d93a <HAL_TIM_PeriodElapsedCallback+0x132a>
 800d916:	4baf      	ldr	r3, [pc, #700]	; (800dbd4 <HAL_TIM_PeriodElapsedCallback+0x15c4>)
 800d918:	edd3 7a00 	vldr	s15, [r3]
 800d91c:	ed9f 7aaf 	vldr	s14, [pc, #700]	; 800dbdc <HAL_TIM_PeriodElapsedCallback+0x15cc>
 800d920:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d924:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d928:	bfcc      	ite	gt
 800d92a:	2301      	movgt	r3, #1
 800d92c:	2300      	movle	r3, #0
 800d92e:	b2db      	uxtb	r3, r3
 800d930:	f083 0301 	eor.w	r3, r3, #1
 800d934:	b2db      	uxtb	r3, r3
 800d936:	2b00      	cmp	r3, #0
 800d938:	d00e      	beq.n	800d958 <HAL_TIM_PeriodElapsedCallback+0x1348>
 800d93a:	4ba6      	ldr	r3, [pc, #664]	; (800dbd4 <HAL_TIM_PeriodElapsedCallback+0x15c4>)
 800d93c:	edd3 7a00 	vldr	s15, [r3]
 800d940:	ed9f 7aa5 	vldr	s14, [pc, #660]	; 800dbd8 <HAL_TIM_PeriodElapsedCallback+0x15c8>
 800d944:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d948:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d94c:	dd02      	ble.n	800d954 <HAL_TIM_PeriodElapsedCallback+0x1344>
 800d94e:	4ba1      	ldr	r3, [pc, #644]	; (800dbd4 <HAL_TIM_PeriodElapsedCallback+0x15c4>)
 800d950:	681b      	ldr	r3, [r3, #0]
 800d952:	e002      	b.n	800d95a <HAL_TIM_PeriodElapsedCallback+0x134a>
 800d954:	4b9c      	ldr	r3, [pc, #624]	; (800dbc8 <HAL_TIM_PeriodElapsedCallback+0x15b8>)
 800d956:	e000      	b.n	800d95a <HAL_TIM_PeriodElapsedCallback+0x134a>
 800d958:	4b9c      	ldr	r3, [pc, #624]	; (800dbcc <HAL_TIM_PeriodElapsedCallback+0x15bc>)
 800d95a:	4a9e      	ldr	r2, [pc, #632]	; (800dbd4 <HAL_TIM_PeriodElapsedCallback+0x15c4>)
 800d95c:	6013      	str	r3, [r2, #0]

			if(pulse_l > 0){
 800d95e:	4b9c      	ldr	r3, [pc, #624]	; (800dbd0 <HAL_TIM_PeriodElapsedCallback+0x15c0>)
 800d960:	edd3 7a00 	vldr	s15, [r3]
 800d964:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800d968:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d96c:	dd17      	ble.n	800d99e <HAL_TIM_PeriodElapsedCallback+0x138e>
				drive_dir(0, 0);
 800d96e:	2100      	movs	r1, #0
 800d970:	2000      	movs	r0, #0
 800d972:	f7f7 fa45 	bl	8004e00 <drive_dir>
				ConfigOC.Pulse = pulse_l;
 800d976:	4b96      	ldr	r3, [pc, #600]	; (800dbd0 <HAL_TIM_PeriodElapsedCallback+0x15c0>)
 800d978:	edd3 7a00 	vldr	s15, [r3]
 800d97c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d980:	ee17 3a90 	vmov	r3, s15
 800d984:	60fb      	str	r3, [r7, #12]
				HAL_TIM_PWM_ConfigChannel(&htim2, &ConfigOC, TIM_CHANNEL_1);
 800d986:	f107 0308 	add.w	r3, r7, #8
 800d98a:	2200      	movs	r2, #0
 800d98c:	4619      	mov	r1, r3
 800d98e:	4894      	ldr	r0, [pc, #592]	; (800dbe0 <HAL_TIM_PeriodElapsedCallback+0x15d0>)
 800d990:	f7f6 f91c 	bl	8003bcc <HAL_TIM_PWM_ConfigChannel>
				HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_1);
 800d994:	2100      	movs	r1, #0
 800d996:	4892      	ldr	r0, [pc, #584]	; (800dbe0 <HAL_TIM_PeriodElapsedCallback+0x15d0>)
 800d998:	f7f5 feb0 	bl	80036fc <HAL_TIM_PWM_Start>
 800d99c:	e020      	b.n	800d9e0 <HAL_TIM_PeriodElapsedCallback+0x13d0>
			}
			else if(pulse_l < 0){
 800d99e:	4b8c      	ldr	r3, [pc, #560]	; (800dbd0 <HAL_TIM_PeriodElapsedCallback+0x15c0>)
 800d9a0:	edd3 7a00 	vldr	s15, [r3]
 800d9a4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800d9a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d9ac:	d518      	bpl.n	800d9e0 <HAL_TIM_PeriodElapsedCallback+0x13d0>
				drive_dir(0, 1);
 800d9ae:	2101      	movs	r1, #1
 800d9b0:	2000      	movs	r0, #0
 800d9b2:	f7f7 fa25 	bl	8004e00 <drive_dir>
				ConfigOC.Pulse = -pulse_l;
 800d9b6:	4b86      	ldr	r3, [pc, #536]	; (800dbd0 <HAL_TIM_PeriodElapsedCallback+0x15c0>)
 800d9b8:	edd3 7a00 	vldr	s15, [r3]
 800d9bc:	eef1 7a67 	vneg.f32	s15, s15
 800d9c0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d9c4:	ee17 3a90 	vmov	r3, s15
 800d9c8:	60fb      	str	r3, [r7, #12]
				HAL_TIM_PWM_ConfigChannel(&htim2, &ConfigOC, TIM_CHANNEL_1);
 800d9ca:	f107 0308 	add.w	r3, r7, #8
 800d9ce:	2200      	movs	r2, #0
 800d9d0:	4619      	mov	r1, r3
 800d9d2:	4883      	ldr	r0, [pc, #524]	; (800dbe0 <HAL_TIM_PeriodElapsedCallback+0x15d0>)
 800d9d4:	f7f6 f8fa 	bl	8003bcc <HAL_TIM_PWM_ConfigChannel>
				HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_1);
 800d9d8:	2100      	movs	r1, #0
 800d9da:	4881      	ldr	r0, [pc, #516]	; (800dbe0 <HAL_TIM_PeriodElapsedCallback+0x15d0>)
 800d9dc:	f7f5 fe8e 	bl	80036fc <HAL_TIM_PWM_Start>
			}

			if(pulse_r > 0){
 800d9e0:	4b7c      	ldr	r3, [pc, #496]	; (800dbd4 <HAL_TIM_PeriodElapsedCallback+0x15c4>)
 800d9e2:	edd3 7a00 	vldr	s15, [r3]
 800d9e6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800d9ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d9ee:	dd17      	ble.n	800da20 <HAL_TIM_PeriodElapsedCallback+0x1410>
				drive_dir(1, 0);
 800d9f0:	2100      	movs	r1, #0
 800d9f2:	2001      	movs	r0, #1
 800d9f4:	f7f7 fa04 	bl	8004e00 <drive_dir>
				ConfigOC.Pulse = pulse_r;
 800d9f8:	4b76      	ldr	r3, [pc, #472]	; (800dbd4 <HAL_TIM_PeriodElapsedCallback+0x15c4>)
 800d9fa:	edd3 7a00 	vldr	s15, [r3]
 800d9fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800da02:	ee17 3a90 	vmov	r3, s15
 800da06:	60fb      	str	r3, [r7, #12]
				HAL_TIM_PWM_ConfigChannel(&htim2, &ConfigOC, TIM_CHANNEL_4);
 800da08:	f107 0308 	add.w	r3, r7, #8
 800da0c:	220c      	movs	r2, #12
 800da0e:	4619      	mov	r1, r3
 800da10:	4873      	ldr	r0, [pc, #460]	; (800dbe0 <HAL_TIM_PeriodElapsedCallback+0x15d0>)
 800da12:	f7f6 f8db 	bl	8003bcc <HAL_TIM_PWM_ConfigChannel>
				HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_4);
 800da16:	210c      	movs	r1, #12
 800da18:	4871      	ldr	r0, [pc, #452]	; (800dbe0 <HAL_TIM_PeriodElapsedCallback+0x15d0>)
 800da1a:	f7f5 fe6f 	bl	80036fc <HAL_TIM_PWM_Start>
 800da1e:	e020      	b.n	800da62 <HAL_TIM_PeriodElapsedCallback+0x1452>
			}
			else if(pulse_r < 0){
 800da20:	4b6c      	ldr	r3, [pc, #432]	; (800dbd4 <HAL_TIM_PeriodElapsedCallback+0x15c4>)
 800da22:	edd3 7a00 	vldr	s15, [r3]
 800da26:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800da2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800da2e:	d518      	bpl.n	800da62 <HAL_TIM_PeriodElapsedCallback+0x1452>
				drive_dir(1, 1);
 800da30:	2101      	movs	r1, #1
 800da32:	2001      	movs	r0, #1
 800da34:	f7f7 f9e4 	bl	8004e00 <drive_dir>
				ConfigOC.Pulse = -pulse_r;
 800da38:	4b66      	ldr	r3, [pc, #408]	; (800dbd4 <HAL_TIM_PeriodElapsedCallback+0x15c4>)
 800da3a:	edd3 7a00 	vldr	s15, [r3]
 800da3e:	eef1 7a67 	vneg.f32	s15, s15
 800da42:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800da46:	ee17 3a90 	vmov	r3, s15
 800da4a:	60fb      	str	r3, [r7, #12]
				HAL_TIM_PWM_ConfigChannel(&htim2, &ConfigOC, TIM_CHANNEL_4);
 800da4c:	f107 0308 	add.w	r3, r7, #8
 800da50:	220c      	movs	r2, #12
 800da52:	4619      	mov	r1, r3
 800da54:	4862      	ldr	r0, [pc, #392]	; (800dbe0 <HAL_TIM_PeriodElapsedCallback+0x15d0>)
 800da56:	f7f6 f8b9 	bl	8003bcc <HAL_TIM_PWM_ConfigChannel>
				HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_4);
 800da5a:	210c      	movs	r1, #12
 800da5c:	4860      	ldr	r0, [pc, #384]	; (800dbe0 <HAL_TIM_PeriodElapsedCallback+0x15d0>)
 800da5e:	f7f5 fe4d 	bl	80036fc <HAL_TIM_PWM_Start>
			}
			//wall check
//			if(!MF.FLAG.SCND){
				//----look forward----
				if(ad_fr > WALL_BASE_FR || ad_fl > WALL_BASE_FL){
 800da62:	4b60      	ldr	r3, [pc, #384]	; (800dbe4 <HAL_TIM_PeriodElapsedCallback+0x15d4>)
 800da64:	681b      	ldr	r3, [r3, #0]
 800da66:	2b78      	cmp	r3, #120	; 0x78
 800da68:	d803      	bhi.n	800da72 <HAL_TIM_PeriodElapsedCallback+0x1462>
 800da6a:	4b5f      	ldr	r3, [pc, #380]	; (800dbe8 <HAL_TIM_PeriodElapsedCallback+0x15d8>)
 800da6c:	681b      	ldr	r3, [r3, #0]
 800da6e:	2bc8      	cmp	r3, #200	; 0xc8
 800da70:	d905      	bls.n	800da7e <HAL_TIM_PeriodElapsedCallback+0x146e>
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 800da72:	2201      	movs	r2, #1
 800da74:	2140      	movs	r1, #64	; 0x40
 800da76:	485d      	ldr	r0, [pc, #372]	; (800dbec <HAL_TIM_PeriodElapsedCallback+0x15dc>)
 800da78:	f7f4 fc44 	bl	8002304 <HAL_GPIO_WritePin>
 800da7c:	e004      	b.n	800da88 <HAL_TIM_PeriodElapsedCallback+0x1478>
				}else{
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 800da7e:	2200      	movs	r2, #0
 800da80:	2140      	movs	r1, #64	; 0x40
 800da82:	485a      	ldr	r0, [pc, #360]	; (800dbec <HAL_TIM_PeriodElapsedCallback+0x15dc>)
 800da84:	f7f4 fc3e 	bl	8002304 <HAL_GPIO_WritePin>
				}
				//----look forwardL----
				if(ad_fl > WALL_BASE_FL){
 800da88:	4b57      	ldr	r3, [pc, #348]	; (800dbe8 <HAL_TIM_PeriodElapsedCallback+0x15d8>)
 800da8a:	681b      	ldr	r3, [r3, #0]
 800da8c:	2bc8      	cmp	r3, #200	; 0xc8
 800da8e:	d905      	bls.n	800da9c <HAL_TIM_PeriodElapsedCallback+0x148c>
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 800da90:	2201      	movs	r2, #1
 800da92:	2110      	movs	r1, #16
 800da94:	4855      	ldr	r0, [pc, #340]	; (800dbec <HAL_TIM_PeriodElapsedCallback+0x15dc>)
 800da96:	f7f4 fc35 	bl	8002304 <HAL_GPIO_WritePin>
 800da9a:	e004      	b.n	800daa6 <HAL_TIM_PeriodElapsedCallback+0x1496>
				}else{
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 800da9c:	2200      	movs	r2, #0
 800da9e:	2110      	movs	r1, #16
 800daa0:	4852      	ldr	r0, [pc, #328]	; (800dbec <HAL_TIM_PeriodElapsedCallback+0x15dc>)
 800daa2:	f7f4 fc2f 	bl	8002304 <HAL_GPIO_WritePin>
				}
				//----look forward-R---
				if(ad_fr > WALL_BASE_FR){
 800daa6:	4b4f      	ldr	r3, [pc, #316]	; (800dbe4 <HAL_TIM_PeriodElapsedCallback+0x15d4>)
 800daa8:	681b      	ldr	r3, [r3, #0]
 800daaa:	2b78      	cmp	r3, #120	; 0x78
 800daac:	d905      	bls.n	800daba <HAL_TIM_PeriodElapsedCallback+0x14aa>
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);
 800daae:	2201      	movs	r2, #1
 800dab0:	2180      	movs	r1, #128	; 0x80
 800dab2:	484e      	ldr	r0, [pc, #312]	; (800dbec <HAL_TIM_PeriodElapsedCallback+0x15dc>)
 800dab4:	f7f4 fc26 	bl	8002304 <HAL_GPIO_WritePin>
 800dab8:	e00d      	b.n	800dad6 <HAL_TIM_PeriodElapsedCallback+0x14c6>
				}else{
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 800daba:	2200      	movs	r2, #0
 800dabc:	2180      	movs	r1, #128	; 0x80
 800dabe:	484b      	ldr	r0, [pc, #300]	; (800dbec <HAL_TIM_PeriodElapsedCallback+0x15dc>)
 800dac0:	f7f4 fc20 	bl	8002304 <HAL_GPIO_WritePin>
 800dac4:	e007      	b.n	800dad6 <HAL_TIM_PeriodElapsedCallback+0x14c6>
				}
		}else{
			drive_dir(0, 2);
 800dac6:	2102      	movs	r1, #2
 800dac8:	2000      	movs	r0, #0
 800daca:	f7f7 f999 	bl	8004e00 <drive_dir>
			drive_dir(1, 2);
 800dace:	2102      	movs	r1, #2
 800dad0:	2001      	movs	r0, #1
 800dad2:	f7f7 f995 	bl	8004e00 <drive_dir>
		}


		//wall check
		//----look right----
		if(ad_r > WALL_BASE_R){
 800dad6:	4b46      	ldr	r3, [pc, #280]	; (800dbf0 <HAL_TIM_PeriodElapsedCallback+0x15e0>)
 800dad8:	681b      	ldr	r3, [r3, #0]
 800dada:	2b78      	cmp	r3, #120	; 0x78
 800dadc:	d906      	bls.n	800daec <HAL_TIM_PeriodElapsedCallback+0x14dc>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 800dade:	2201      	movs	r2, #1
 800dae0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800dae4:	4843      	ldr	r0, [pc, #268]	; (800dbf4 <HAL_TIM_PeriodElapsedCallback+0x15e4>)
 800dae6:	f7f4 fc0d 	bl	8002304 <HAL_GPIO_WritePin>
 800daea:	e005      	b.n	800daf8 <HAL_TIM_PeriodElapsedCallback+0x14e8>
		}else{
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 800daec:	2200      	movs	r2, #0
 800daee:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800daf2:	4840      	ldr	r0, [pc, #256]	; (800dbf4 <HAL_TIM_PeriodElapsedCallback+0x15e4>)
 800daf4:	f7f4 fc06 	bl	8002304 <HAL_GPIO_WritePin>
		}
		//----look left----
		if(ad_l > WALL_BASE_L){
 800daf8:	4b3f      	ldr	r3, [pc, #252]	; (800dbf8 <HAL_TIM_PeriodElapsedCallback+0x15e8>)
 800dafa:	681b      	ldr	r3, [r3, #0]
 800dafc:	2b8c      	cmp	r3, #140	; 0x8c
 800dafe:	d905      	bls.n	800db0c <HAL_TIM_PeriodElapsedCallback+0x14fc>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);
 800db00:	2201      	movs	r2, #1
 800db02:	2104      	movs	r1, #4
 800db04:	483d      	ldr	r0, [pc, #244]	; (800dbfc <HAL_TIM_PeriodElapsedCallback+0x15ec>)
 800db06:	f7f4 fbfd 	bl	8002304 <HAL_GPIO_WritePin>
 800db0a:	e004      	b.n	800db16 <HAL_TIM_PeriodElapsedCallback+0x1506>
		}else{
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 800db0c:	2200      	movs	r2, #0
 800db0e:	2104      	movs	r1, #4
 800db10:	483a      	ldr	r0, [pc, #232]	; (800dbfc <HAL_TIM_PeriodElapsedCallback+0x15ec>)
 800db12:	f7f4 fbf7 	bl	8002304 <HAL_GPIO_WritePin>
		}


		//battery check
		if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12) == GPIO_PIN_RESET) {	//2.1V以下で赤ランプ点灯=>LiPoが約7Vを下回るとランプ点灯
 800db16:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800db1a:	4836      	ldr	r0, [pc, #216]	; (800dbf4 <HAL_TIM_PeriodElapsedCallback+0x15e4>)
 800db1c:	f7f4 fbda 	bl	80022d4 <HAL_GPIO_ReadPin>
 800db20:	4603      	mov	r3, r0
 800db22:	2b00      	cmp	r3, #0
 800db24:	d105      	bne.n	800db32 <HAL_TIM_PeriodElapsedCallback+0x1522>
		   HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_SET);
 800db26:	2201      	movs	r2, #1
 800db28:	2108      	movs	r1, #8
 800db2a:	4834      	ldr	r0, [pc, #208]	; (800dbfc <HAL_TIM_PeriodElapsedCallback+0x15ec>)
 800db2c:	f7f4 fbea 	bl	8002304 <HAL_GPIO_WritePin>
 800db30:	e004      	b.n	800db3c <HAL_TIM_PeriodElapsedCallback+0x152c>
		} else {
		   HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
 800db32:	2200      	movs	r2, #0
 800db34:	2108      	movs	r1, #8
 800db36:	4831      	ldr	r0, [pc, #196]	; (800dbfc <HAL_TIM_PeriodElapsedCallback+0x15ec>)
 800db38:	f7f4 fbe4 	bl	8002304 <HAL_GPIO_WritePin>
		}


		//fail safe
		if(degree_z >= target_degree_z+270 || degree_z <= target_degree_z-270 || dist_r > 500 || dist_l > 500){	//270度以上回転発生でFail Safe
 800db3c:	4b30      	ldr	r3, [pc, #192]	; (800dc00 <HAL_TIM_PeriodElapsedCallback+0x15f0>)
 800db3e:	edd3 7a00 	vldr	s15, [r3]
 800db42:	ed9f 7a30 	vldr	s14, [pc, #192]	; 800dc04 <HAL_TIM_PeriodElapsedCallback+0x15f4>
 800db46:	ee37 7a87 	vadd.f32	s14, s15, s14
 800db4a:	4b2f      	ldr	r3, [pc, #188]	; (800dc08 <HAL_TIM_PeriodElapsedCallback+0x15f8>)
 800db4c:	edd3 7a00 	vldr	s15, [r3]
 800db50:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800db54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800db58:	d923      	bls.n	800dba2 <HAL_TIM_PeriodElapsedCallback+0x1592>
 800db5a:	4b29      	ldr	r3, [pc, #164]	; (800dc00 <HAL_TIM_PeriodElapsedCallback+0x15f0>)
 800db5c:	edd3 7a00 	vldr	s15, [r3]
 800db60:	ed9f 7a28 	vldr	s14, [pc, #160]	; 800dc04 <HAL_TIM_PeriodElapsedCallback+0x15f4>
 800db64:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800db68:	4b27      	ldr	r3, [pc, #156]	; (800dc08 <HAL_TIM_PeriodElapsedCallback+0x15f8>)
 800db6a:	edd3 7a00 	vldr	s15, [r3]
 800db6e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800db72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800db76:	da14      	bge.n	800dba2 <HAL_TIM_PeriodElapsedCallback+0x1592>
 800db78:	4b24      	ldr	r3, [pc, #144]	; (800dc0c <HAL_TIM_PeriodElapsedCallback+0x15fc>)
 800db7a:	edd3 7a00 	vldr	s15, [r3]
 800db7e:	ed9f 7a24 	vldr	s14, [pc, #144]	; 800dc10 <HAL_TIM_PeriodElapsedCallback+0x1600>
 800db82:	eef4 7ac7 	vcmpe.f32	s15, s14
 800db86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800db8a:	dc0a      	bgt.n	800dba2 <HAL_TIM_PeriodElapsedCallback+0x1592>
 800db8c:	4b21      	ldr	r3, [pc, #132]	; (800dc14 <HAL_TIM_PeriodElapsedCallback+0x1604>)
 800db8e:	edd3 7a00 	vldr	s15, [r3]
 800db92:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 800dc10 <HAL_TIM_PeriodElapsedCallback+0x1600>
 800db96:	eef4 7ac7 	vcmpe.f32	s15, s14
 800db9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800db9e:	dc00      	bgt.n	800dba2 <HAL_TIM_PeriodElapsedCallback+0x1592>
			   drive_dir(1, 2);
			   full_led_write(RED);
		   }
		}
	}
}
 800dba0:	e00b      	b.n	800dbba <HAL_TIM_PeriodElapsedCallback+0x15aa>
			   drive_dir(0, 2);
 800dba2:	2102      	movs	r1, #2
 800dba4:	2000      	movs	r0, #0
 800dba6:	f7f7 f92b 	bl	8004e00 <drive_dir>
			   drive_dir(1, 2);
 800dbaa:	2102      	movs	r1, #2
 800dbac:	2001      	movs	r0, #1
 800dbae:	f7f7 f927 	bl	8004e00 <drive_dir>
			   full_led_write(RED);
 800dbb2:	2001      	movs	r0, #1
 800dbb4:	f003 ff00 	bl	80119b8 <full_led_write>
			   drive_dir(0, 2);
 800dbb8:	e7f3      	b.n	800dba2 <HAL_TIM_PeriodElapsedCallback+0x1592>
}
 800dbba:	bf00      	nop
 800dbbc:	3730      	adds	r7, #48	; 0x30
 800dbbe:	46bd      	mov	sp, r7
 800dbc0:	ecbd 8b02 	vpop	{d8}
 800dbc4:	bdb0      	pop	{r4, r5, r7, pc}
 800dbc6:	bf00      	nop
 800dbc8:	c47a0000 	.word	0xc47a0000
 800dbcc:	447a0000 	.word	0x447a0000
 800dbd0:	20000ba8 	.word	0x20000ba8
 800dbd4:	20000780 	.word	0x20000780
 800dbd8:	c47a0000 	.word	0xc47a0000
 800dbdc:	447a0000 	.word	0x447a0000
 800dbe0:	20000c14 	.word	0x20000c14
 800dbe4:	20000c00 	.word	0x20000c00
 800dbe8:	20000d54 	.word	0x20000d54
 800dbec:	40020000 	.word	0x40020000
 800dbf0:	20000f60 	.word	0x20000f60
 800dbf4:	40020400 	.word	0x40020400
 800dbf8:	20000afc 	.word	0x20000afc
 800dbfc:	40020800 	.word	0x40020800
 800dc00:	20000bf8 	.word	0x20000bf8
 800dc04:	43870000 	.word	0x43870000
 800dc08:	20000b5c 	.word	0x20000b5c
 800dc0c:	20000aec 	.word	0x20000aec
 800dc10:	43fa0000 	.word	0x43fa0000
 800dc14:	200015c4 	.word	0x200015c4

0800dc18 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800dc18:	b580      	push	{r7, lr}
 800dc1a:	b082      	sub	sp, #8
 800dc1c:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800dc1e:	f7f3 f98b 	bl	8000f38 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800dc22:	f000 f917 	bl	800de54 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800dc26:	f000 fc09 	bl	800e43c <MX_GPIO_Init>
  MX_ADC1_Init();
 800dc2a:	f000 f97d 	bl	800df28 <MX_ADC1_Init>
  MX_TIM2_Init();
 800dc2e:	f000 fa03 	bl	800e038 <MX_TIM2_Init>
  MX_TIM3_Init();
 800dc32:	f000 fa81 	bl	800e138 <MX_TIM3_Init>
  MX_TIM4_Init();
 800dc36:	f000 faf5 	bl	800e224 <MX_TIM4_Init>
  MX_TIM6_Init();
 800dc3a:	f000 fb47 	bl	800e2cc <MX_TIM6_Init>
  MX_TIM8_Init();
 800dc3e:	f000 fb7b 	bl	800e338 <MX_TIM8_Init>
  MX_SPI3_Init();
 800dc42:	f000 f9c3 	bl	800dfcc <MX_SPI3_Init>
  MX_USART1_UART_Init();
 800dc46:	f000 fbcf 	bl	800e3e8 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  drive_init();
 800dc4a:	f7f7 f807 	bl	8004c5c <drive_init>
  gyro_init();
 800dc4e:	f7fe fb01 	bl	800c254 <gyro_init>
  search_init();
 800dc52:	f000 fd21 	bl	800e698 <search_init>
  sensor_init();
 800dc56:	f003 fdef 	bl	8011838 <sensor_init>

  printf("*** Welcome to WMMC ! ***\n");
 800dc5a:	4870      	ldr	r0, [pc, #448]	; (800de1c <main+0x204>)
 800dc5c:	f004 fcb4 	bl	80125c8 <puts>

  setbuf(stdout, NULL);
 800dc60:	4b6f      	ldr	r3, [pc, #444]	; (800de20 <main+0x208>)
 800dc62:	681b      	ldr	r3, [r3, #0]
 800dc64:	689b      	ldr	r3, [r3, #8]
 800dc66:	2100      	movs	r1, #0
 800dc68:	4618      	mov	r0, r3
 800dc6a:	f004 fcb5 	bl	80125d8 <setbuf>
  HAL_TIM_Encoder_Start(&htim4,TIM_CHANNEL_ALL);
 800dc6e:	213c      	movs	r1, #60	; 0x3c
 800dc70:	486c      	ldr	r0, [pc, #432]	; (800de24 <main+0x20c>)
 800dc72:	f7f5 fe6b 	bl	800394c <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim8,TIM_CHANNEL_ALL);
 800dc76:	213c      	movs	r1, #60	; 0x3c
 800dc78:	486b      	ldr	r0, [pc, #428]	; (800de28 <main+0x210>)
 800dc7a:	f7f5 fe67 	bl	800394c <HAL_TIM_Encoder_Start>
  HAL_TIM_Base_Start_IT(&htim6);
 800dc7e:	486b      	ldr	r0, [pc, #428]	; (800de2c <main+0x214>)
 800dc80:	f7f5 fce3 	bl	800364a <HAL_TIM_Base_Start_IT>

  int mode = 0;
 800dc84:	2300      	movs	r3, #0
 800dc86:	607b      	str	r3, [r7, #4]
  printf("Mode : %d\n", mode);
 800dc88:	6879      	ldr	r1, [r7, #4]
 800dc8a:	4869      	ldr	r0, [pc, #420]	; (800de30 <main+0x218>)
 800dc8c:	f004 fc28 	bl	80124e0 <iprintf>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 800dc90:	687b      	ldr	r3, [r7, #4]
 800dc92:	b2db      	uxtb	r3, r3
 800dc94:	f003 0301 	and.w	r3, r3, #1
 800dc98:	b2d8      	uxtb	r0, r3
 800dc9a:	687b      	ldr	r3, [r7, #4]
 800dc9c:	b2db      	uxtb	r3, r3
 800dc9e:	f003 0302 	and.w	r3, r3, #2
 800dca2:	b2d9      	uxtb	r1, r3
 800dca4:	687b      	ldr	r3, [r7, #4]
 800dca6:	b2db      	uxtb	r3, r3
 800dca8:	f003 0304 	and.w	r3, r3, #4
 800dcac:	b2db      	uxtb	r3, r3
 800dcae:	461a      	mov	r2, r3
 800dcb0:	f003 fe48 	bl	8011944 <led_write>
	  if(dist_r >= 20){
 800dcb4:	4b5f      	ldr	r3, [pc, #380]	; (800de34 <main+0x21c>)
 800dcb6:	edd3 7a00 	vldr	s15, [r3]
 800dcba:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 800dcbe:	eef4 7ac7 	vcmpe.f32	s15, s14
 800dcc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dcc6:	db0f      	blt.n	800dce8 <main+0xd0>
		  mode++;
 800dcc8:	687b      	ldr	r3, [r7, #4]
 800dcca:	3301      	adds	r3, #1
 800dccc:	607b      	str	r3, [r7, #4]
		  dist_r = 0;
 800dcce:	4b59      	ldr	r3, [pc, #356]	; (800de34 <main+0x21c>)
 800dcd0:	f04f 0200 	mov.w	r2, #0
 800dcd4:	601a      	str	r2, [r3, #0]
		  if(mode > 7){
 800dcd6:	687b      	ldr	r3, [r7, #4]
 800dcd8:	2b07      	cmp	r3, #7
 800dcda:	dd01      	ble.n	800dce0 <main+0xc8>
			  mode = 0;
 800dcdc:	2300      	movs	r3, #0
 800dcde:	607b      	str	r3, [r7, #4]
		  }
		  printf("Mode : %d\n", mode);
 800dce0:	6879      	ldr	r1, [r7, #4]
 800dce2:	4853      	ldr	r0, [pc, #332]	; (800de30 <main+0x218>)
 800dce4:	f004 fbfc 	bl	80124e0 <iprintf>
		  //buzzer(pitagola2[mode-1][0], pitagola2[mode-1][1]);
		  //buzzer(pitagola[2][0], pitagola[2][1]);
	  }
	  if(dist_r <= -20){
 800dce8:	4b52      	ldr	r3, [pc, #328]	; (800de34 <main+0x21c>)
 800dcea:	edd3 7a00 	vldr	s15, [r3]
 800dcee:	eebb 7a04 	vmov.f32	s14, #180	; 0xc1a00000 -20.0
 800dcf2:	eef4 7ac7 	vcmpe.f32	s15, s14
 800dcf6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dcfa:	d80f      	bhi.n	800dd1c <main+0x104>
		  mode--;
 800dcfc:	687b      	ldr	r3, [r7, #4]
 800dcfe:	3b01      	subs	r3, #1
 800dd00:	607b      	str	r3, [r7, #4]
		  dist_r = 0;
 800dd02:	4b4c      	ldr	r3, [pc, #304]	; (800de34 <main+0x21c>)
 800dd04:	f04f 0200 	mov.w	r2, #0
 800dd08:	601a      	str	r2, [r3, #0]
		  if(mode < 0){
 800dd0a:	687b      	ldr	r3, [r7, #4]
 800dd0c:	2b00      	cmp	r3, #0
 800dd0e:	da01      	bge.n	800dd14 <main+0xfc>
			  mode = 7;
 800dd10:	2307      	movs	r3, #7
 800dd12:	607b      	str	r3, [r7, #4]
		  }
		  printf("Mode : %d\n", mode);
 800dd14:	6879      	ldr	r1, [r7, #4]
 800dd16:	4846      	ldr	r0, [pc, #280]	; (800de30 <main+0x218>)
 800dd18:	f004 fbe2 	bl	80124e0 <iprintf>
		  //buzzer(pitagola2[mode-1][0], pitagola2[mode-1][1]);
		  //buzzer(pitagola[2][0], pitagola[2][1]);
	  }
	  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET){
 800dd1c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800dd20:	4845      	ldr	r0, [pc, #276]	; (800de38 <main+0x220>)
 800dd22:	f7f4 fad7 	bl	80022d4 <HAL_GPIO_ReadPin>
 800dd26:	4603      	mov	r3, r0
 800dd28:	2b00      	cmp	r3, #0
 800dd2a:	d1b1      	bne.n	800dc90 <main+0x78>
		  HAL_Delay(50);
 800dd2c:	2032      	movs	r0, #50	; 0x32
 800dd2e:	f7f3 f975 	bl	800101c <HAL_Delay>
		  while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET);
 800dd32:	bf00      	nop
 800dd34:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800dd38:	483f      	ldr	r0, [pc, #252]	; (800de38 <main+0x220>)
 800dd3a:	f7f4 facb 	bl	80022d4 <HAL_GPIO_ReadPin>
 800dd3e:	4603      	mov	r3, r0
 800dd40:	2b00      	cmp	r3, #0
 800dd42:	d0f7      	beq.n	800dd34 <main+0x11c>
		  switch(mode){
 800dd44:	687b      	ldr	r3, [r7, #4]
 800dd46:	2b07      	cmp	r3, #7
 800dd48:	d8a2      	bhi.n	800dc90 <main+0x78>
 800dd4a:	a201      	add	r2, pc, #4	; (adr r2, 800dd50 <main+0x138>)
 800dd4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dd50:	0800dd71 	.word	0x0800dd71
 800dd54:	0800dd7b 	.word	0x0800dd7b
 800dd58:	0800dd87 	.word	0x0800dd87
 800dd5c:	0800dd93 	.word	0x0800dd93
 800dd60:	0800dd9f 	.word	0x0800dd9f
 800dd64:	0800dda5 	.word	0x0800dda5
 800dd68:	0800ddd1 	.word	0x0800ddd1
 800dd6c:	0800de13 	.word	0x0800de13

		  	  case 0:
		  		  HAL_Delay(5000);
 800dd70:	f241 3088 	movw	r0, #5000	; 0x1388
 800dd74:	f7f3 f952 	bl	800101c <HAL_Delay>
		  		  break;
 800dd78:	e04e      	b.n	800de18 <main+0x200>

		  	  case 1:
		  		  //----a超新地走行----
		  		  printf("Simple Run.\n");
 800dd7a:	4830      	ldr	r0, [pc, #192]	; (800de3c <main+0x224>)
 800dd7c:	f004 fc24 	bl	80125c8 <puts>
		  		  //MF.FLAG.WEDGE = 1;
		  		  simple_run();
 800dd80:	f7fc ff62 	bl	800ac48 <simple_run>
		  		  break;
 800dd84:	e048      	b.n	800de18 <main+0x200>

		  	  case 2:
		  		  //----aスラローム走行----
		  		  printf("slalom Run.\n");
 800dd86:	482e      	ldr	r0, [pc, #184]	; (800de40 <main+0x228>)
 800dd88:	f004 fc1e 	bl	80125c8 <puts>
		  		  //MF.FLAG.WEDGE = 1;
		  		  slalom_run();
 800dd8c:	f7fd f86a 	bl	800ae64 <slalom_run>
		  		  break;
 800dd90:	e042      	b.n	800de18 <main+0x200>

		  	  case 3:
		  		  //----aスラローム走行&pass圧縮----
				  printf("First Run. (Slalom)\n");
 800dd92:	482c      	ldr	r0, [pc, #176]	; (800de44 <main+0x22c>)
 800dd94:	f004 fc18 	bl	80125c8 <puts>
		  		  pass_test();
 800dd98:	f7fc f8a2 	bl	8009ee0 <pass_test>
		  		  break;
 800dd9c:	e03c      	b.n	800de18 <main+0x200>

		  	  case 4:
		  		  //----aテストモード選択----
		  		  test_select();
 800dd9e:	f7fb fb0b 	bl	80093b8 <test_select>
		  		  break;
 800dda2:	e039      	b.n	800de18 <main+0x200>

		  	  case 5:
		  		  //----sensor check----
		  		  printf("Sensor Check.\n");
 800dda4:	4828      	ldr	r0, [pc, #160]	; (800de48 <main+0x230>)
 800dda6:	f004 fc0f 	bl	80125c8 <puts>
		  		  sensor_test();
 800ddaa:	f003 fec1 	bl	8011b30 <sensor_test>
		  		  break;
 800ddae:	e033      	b.n	800de18 <main+0x200>

		  	  case 6:
		  		  //----pitagola sound----
				  while(ad_fl <= WALL_BASE_FL){
					  led_write(1, 1, 1);
 800ddb0:	2201      	movs	r2, #1
 800ddb2:	2101      	movs	r1, #1
 800ddb4:	2001      	movs	r0, #1
 800ddb6:	f003 fdc5 	bl	8011944 <led_write>
					  HAL_Delay(200);
 800ddba:	20c8      	movs	r0, #200	; 0xc8
 800ddbc:	f7f3 f92e 	bl	800101c <HAL_Delay>
					  led_write(0, 0, 0);
 800ddc0:	2200      	movs	r2, #0
 800ddc2:	2100      	movs	r1, #0
 800ddc4:	2000      	movs	r0, #0
 800ddc6:	f003 fdbd 	bl	8011944 <led_write>
					  HAL_Delay(200);
 800ddca:	20c8      	movs	r0, #200	; 0xc8
 800ddcc:	f7f3 f926 	bl	800101c <HAL_Delay>
				  while(ad_fl <= WALL_BASE_FL){
 800ddd0:	4b1e      	ldr	r3, [pc, #120]	; (800de4c <main+0x234>)
 800ddd2:	681b      	ldr	r3, [r3, #0]
 800ddd4:	2bc8      	cmp	r3, #200	; 0xc8
 800ddd6:	d9eb      	bls.n	800ddb0 <main+0x198>
				  }
				  HAL_Delay(200);
 800ddd8:	20c8      	movs	r0, #200	; 0xc8
 800ddda:	f7f3 f91f 	bl	800101c <HAL_Delay>
		  		  }
				  HAL_Delay(2000);
				  for(int i=0; i<m_ok; i++){
		  			  buzzer(mario_ok[i][0], mario_ok[i][1]);
		  		  }
*/				  HAL_Delay(2000);
 800ddde:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800dde2:	f7f3 f91b 	bl	800101c <HAL_Delay>
				  for(int i=0; i<m_goal; i++){
 800dde6:	2300      	movs	r3, #0
 800dde8:	603b      	str	r3, [r7, #0]
 800ddea:	e00e      	b.n	800de0a <main+0x1f2>
		  			  buzzer(mario_goal[i][0], mario_goal[i][1]);
 800ddec:	4a18      	ldr	r2, [pc, #96]	; (800de50 <main+0x238>)
 800ddee:	683b      	ldr	r3, [r7, #0]
 800ddf0:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800ddf4:	4a16      	ldr	r2, [pc, #88]	; (800de50 <main+0x238>)
 800ddf6:	683b      	ldr	r3, [r7, #0]
 800ddf8:	00db      	lsls	r3, r3, #3
 800ddfa:	4413      	add	r3, r2
 800ddfc:	685b      	ldr	r3, [r3, #4]
 800ddfe:	4619      	mov	r1, r3
 800de00:	f000 fbda 	bl	800e5b8 <buzzer>
				  for(int i=0; i<m_goal; i++){
 800de04:	683b      	ldr	r3, [r7, #0]
 800de06:	3301      	adds	r3, #1
 800de08:	603b      	str	r3, [r7, #0]
 800de0a:	683b      	ldr	r3, [r7, #0]
 800de0c:	2b0e      	cmp	r3, #14
 800de0e:	dded      	ble.n	800ddec <main+0x1d4>
		  		  }
		  		  break;
 800de10:	e002      	b.n	800de18 <main+0x200>
		  		  //MF.FLAG.WEDGE = 1;
/*		  		  for(int i=0; i<m_select; i++){
		  			  buzzer(mario_select[i][0], mario_select[i][1]);
		  		  }
*///		  		  perfect_run();
		  		  perfect_slalom();
 800de12:	f7fd fa9d 	bl	800b350 <perfect_slalom>
		  		  break;
 800de16:	bf00      	nop
	  led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 800de18:	e73a      	b.n	800dc90 <main+0x78>
 800de1a:	bf00      	nop
 800de1c:	08013afc 	.word	0x08013afc
 800de20:	20000084 	.word	0x20000084
 800de24:	2000030c 	.word	0x2000030c
 800de28:	200002cc 	.word	0x200002cc
 800de2c:	20000bb4 	.word	0x20000bb4
 800de30:	08013b18 	.word	0x08013b18
 800de34:	20000aec 	.word	0x20000aec
 800de38:	40020000 	.word	0x40020000
 800de3c:	08013b24 	.word	0x08013b24
 800de40:	08013b30 	.word	0x08013b30
 800de44:	08013b3c 	.word	0x08013b3c
 800de48:	08013b50 	.word	0x08013b50
 800de4c:	20000d54 	.word	0x20000d54
 800de50:	20000008 	.word	0x20000008

0800de54 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800de54:	b580      	push	{r7, lr}
 800de56:	b094      	sub	sp, #80	; 0x50
 800de58:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800de5a:	f107 0320 	add.w	r3, r7, #32
 800de5e:	2230      	movs	r2, #48	; 0x30
 800de60:	2100      	movs	r1, #0
 800de62:	4618      	mov	r0, r3
 800de64:	f004 fb34 	bl	80124d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800de68:	f107 030c 	add.w	r3, r7, #12
 800de6c:	2200      	movs	r2, #0
 800de6e:	601a      	str	r2, [r3, #0]
 800de70:	605a      	str	r2, [r3, #4]
 800de72:	609a      	str	r2, [r3, #8]
 800de74:	60da      	str	r2, [r3, #12]
 800de76:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800de78:	2300      	movs	r3, #0
 800de7a:	60bb      	str	r3, [r7, #8]
 800de7c:	4b28      	ldr	r3, [pc, #160]	; (800df20 <SystemClock_Config+0xcc>)
 800de7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800de80:	4a27      	ldr	r2, [pc, #156]	; (800df20 <SystemClock_Config+0xcc>)
 800de82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800de86:	6413      	str	r3, [r2, #64]	; 0x40
 800de88:	4b25      	ldr	r3, [pc, #148]	; (800df20 <SystemClock_Config+0xcc>)
 800de8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800de8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800de90:	60bb      	str	r3, [r7, #8]
 800de92:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800de94:	2300      	movs	r3, #0
 800de96:	607b      	str	r3, [r7, #4]
 800de98:	4b22      	ldr	r3, [pc, #136]	; (800df24 <SystemClock_Config+0xd0>)
 800de9a:	681b      	ldr	r3, [r3, #0]
 800de9c:	4a21      	ldr	r2, [pc, #132]	; (800df24 <SystemClock_Config+0xd0>)
 800de9e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800dea2:	6013      	str	r3, [r2, #0]
 800dea4:	4b1f      	ldr	r3, [pc, #124]	; (800df24 <SystemClock_Config+0xd0>)
 800dea6:	681b      	ldr	r3, [r3, #0]
 800dea8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800deac:	607b      	str	r3, [r7, #4]
 800deae:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800deb0:	2302      	movs	r3, #2
 800deb2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800deb4:	2301      	movs	r3, #1
 800deb6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800deb8:	2310      	movs	r3, #16
 800deba:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800debc:	2302      	movs	r3, #2
 800debe:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800dec0:	2300      	movs	r3, #0
 800dec2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800dec4:	2308      	movs	r3, #8
 800dec6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800dec8:	23a8      	movs	r3, #168	; 0xa8
 800deca:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800decc:	2302      	movs	r3, #2
 800dece:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800ded0:	2304      	movs	r3, #4
 800ded2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800ded4:	f107 0320 	add.w	r3, r7, #32
 800ded8:	4618      	mov	r0, r3
 800deda:	f7f4 fa2d 	bl	8002338 <HAL_RCC_OscConfig>
 800dede:	4603      	mov	r3, r0
 800dee0:	2b00      	cmp	r3, #0
 800dee2:	d001      	beq.n	800dee8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800dee4:	f000 fbd1 	bl	800e68a <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800dee8:	230f      	movs	r3, #15
 800deea:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800deec:	2302      	movs	r3, #2
 800deee:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800def0:	2300      	movs	r3, #0
 800def2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800def4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800def8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800defa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800defe:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800df00:	f107 030c 	add.w	r3, r7, #12
 800df04:	2105      	movs	r1, #5
 800df06:	4618      	mov	r0, r3
 800df08:	f7f4 fc58 	bl	80027bc <HAL_RCC_ClockConfig>
 800df0c:	4603      	mov	r3, r0
 800df0e:	2b00      	cmp	r3, #0
 800df10:	d001      	beq.n	800df16 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800df12:	f000 fbba 	bl	800e68a <Error_Handler>
  }
}
 800df16:	bf00      	nop
 800df18:	3750      	adds	r7, #80	; 0x50
 800df1a:	46bd      	mov	sp, r7
 800df1c:	bd80      	pop	{r7, pc}
 800df1e:	bf00      	nop
 800df20:	40023800 	.word	0x40023800
 800df24:	40007000 	.word	0x40007000

0800df28 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800df28:	b580      	push	{r7, lr}
 800df2a:	b084      	sub	sp, #16
 800df2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800df2e:	463b      	mov	r3, r7
 800df30:	2200      	movs	r2, #0
 800df32:	601a      	str	r2, [r3, #0]
 800df34:	605a      	str	r2, [r3, #4]
 800df36:	609a      	str	r2, [r3, #8]
 800df38:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 800df3a:	4b21      	ldr	r3, [pc, #132]	; (800dfc0 <MX_ADC1_Init+0x98>)
 800df3c:	4a21      	ldr	r2, [pc, #132]	; (800dfc4 <MX_ADC1_Init+0x9c>)
 800df3e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800df40:	4b1f      	ldr	r3, [pc, #124]	; (800dfc0 <MX_ADC1_Init+0x98>)
 800df42:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800df46:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800df48:	4b1d      	ldr	r3, [pc, #116]	; (800dfc0 <MX_ADC1_Init+0x98>)
 800df4a:	2200      	movs	r2, #0
 800df4c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800df4e:	4b1c      	ldr	r3, [pc, #112]	; (800dfc0 <MX_ADC1_Init+0x98>)
 800df50:	2200      	movs	r2, #0
 800df52:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800df54:	4b1a      	ldr	r3, [pc, #104]	; (800dfc0 <MX_ADC1_Init+0x98>)
 800df56:	2200      	movs	r2, #0
 800df58:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800df5a:	4b19      	ldr	r3, [pc, #100]	; (800dfc0 <MX_ADC1_Init+0x98>)
 800df5c:	2200      	movs	r2, #0
 800df5e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800df62:	4b17      	ldr	r3, [pc, #92]	; (800dfc0 <MX_ADC1_Init+0x98>)
 800df64:	2200      	movs	r2, #0
 800df66:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800df68:	4b15      	ldr	r3, [pc, #84]	; (800dfc0 <MX_ADC1_Init+0x98>)
 800df6a:	4a17      	ldr	r2, [pc, #92]	; (800dfc8 <MX_ADC1_Init+0xa0>)
 800df6c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800df6e:	4b14      	ldr	r3, [pc, #80]	; (800dfc0 <MX_ADC1_Init+0x98>)
 800df70:	2200      	movs	r2, #0
 800df72:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800df74:	4b12      	ldr	r3, [pc, #72]	; (800dfc0 <MX_ADC1_Init+0x98>)
 800df76:	2201      	movs	r2, #1
 800df78:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800df7a:	4b11      	ldr	r3, [pc, #68]	; (800dfc0 <MX_ADC1_Init+0x98>)
 800df7c:	2200      	movs	r2, #0
 800df7e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800df82:	4b0f      	ldr	r3, [pc, #60]	; (800dfc0 <MX_ADC1_Init+0x98>)
 800df84:	2201      	movs	r2, #1
 800df86:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800df88:	480d      	ldr	r0, [pc, #52]	; (800dfc0 <MX_ADC1_Init+0x98>)
 800df8a:	f7f3 f869 	bl	8001060 <HAL_ADC_Init>
 800df8e:	4603      	mov	r3, r0
 800df90:	2b00      	cmp	r3, #0
 800df92:	d001      	beq.n	800df98 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800df94:	f000 fb79 	bl	800e68a <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800df98:	2300      	movs	r3, #0
 800df9a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800df9c:	2301      	movs	r3, #1
 800df9e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800dfa0:	2300      	movs	r3, #0
 800dfa2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800dfa4:	463b      	mov	r3, r7
 800dfa6:	4619      	mov	r1, r3
 800dfa8:	4805      	ldr	r0, [pc, #20]	; (800dfc0 <MX_ADC1_Init+0x98>)
 800dfaa:	f7f3 f9f5 	bl	8001398 <HAL_ADC_ConfigChannel>
 800dfae:	4603      	mov	r3, r0
 800dfb0:	2b00      	cmp	r3, #0
 800dfb2:	d001      	beq.n	800dfb8 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800dfb4:	f000 fb69 	bl	800e68a <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800dfb8:	bf00      	nop
 800dfba:	3710      	adds	r7, #16
 800dfbc:	46bd      	mov	sp, r7
 800dfbe:	bd80      	pop	{r7, pc}
 800dfc0:	20000b00 	.word	0x20000b00
 800dfc4:	40012000 	.word	0x40012000
 800dfc8:	0f000001 	.word	0x0f000001

0800dfcc <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 800dfcc:	b580      	push	{r7, lr}
 800dfce:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 800dfd0:	4b17      	ldr	r3, [pc, #92]	; (800e030 <MX_SPI3_Init+0x64>)
 800dfd2:	4a18      	ldr	r2, [pc, #96]	; (800e034 <MX_SPI3_Init+0x68>)
 800dfd4:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800dfd6:	4b16      	ldr	r3, [pc, #88]	; (800e030 <MX_SPI3_Init+0x64>)
 800dfd8:	f44f 7282 	mov.w	r2, #260	; 0x104
 800dfdc:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800dfde:	4b14      	ldr	r3, [pc, #80]	; (800e030 <MX_SPI3_Init+0x64>)
 800dfe0:	2200      	movs	r2, #0
 800dfe2:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 800dfe4:	4b12      	ldr	r3, [pc, #72]	; (800e030 <MX_SPI3_Init+0x64>)
 800dfe6:	2200      	movs	r2, #0
 800dfe8:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800dfea:	4b11      	ldr	r3, [pc, #68]	; (800e030 <MX_SPI3_Init+0x64>)
 800dfec:	2200      	movs	r2, #0
 800dfee:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800dff0:	4b0f      	ldr	r3, [pc, #60]	; (800e030 <MX_SPI3_Init+0x64>)
 800dff2:	2200      	movs	r2, #0
 800dff4:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800dff6:	4b0e      	ldr	r3, [pc, #56]	; (800e030 <MX_SPI3_Init+0x64>)
 800dff8:	f44f 7200 	mov.w	r2, #512	; 0x200
 800dffc:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800dffe:	4b0c      	ldr	r3, [pc, #48]	; (800e030 <MX_SPI3_Init+0x64>)
 800e000:	2218      	movs	r2, #24
 800e002:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800e004:	4b0a      	ldr	r3, [pc, #40]	; (800e030 <MX_SPI3_Init+0x64>)
 800e006:	2200      	movs	r2, #0
 800e008:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800e00a:	4b09      	ldr	r3, [pc, #36]	; (800e030 <MX_SPI3_Init+0x64>)
 800e00c:	2200      	movs	r2, #0
 800e00e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800e010:	4b07      	ldr	r3, [pc, #28]	; (800e030 <MX_SPI3_Init+0x64>)
 800e012:	2200      	movs	r2, #0
 800e014:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 800e016:	4b06      	ldr	r3, [pc, #24]	; (800e030 <MX_SPI3_Init+0x64>)
 800e018:	220a      	movs	r2, #10
 800e01a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800e01c:	4804      	ldr	r0, [pc, #16]	; (800e030 <MX_SPI3_Init+0x64>)
 800e01e:	f7f4 fd95 	bl	8002b4c <HAL_SPI_Init>
 800e022:	4603      	mov	r3, r0
 800e024:	2b00      	cmp	r3, #0
 800e026:	d001      	beq.n	800e02c <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 800e028:	f000 fb2f 	bl	800e68a <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800e02c:	bf00      	nop
 800e02e:	bd80      	pop	{r7, pc}
 800e030:	20000144 	.word	0x20000144
 800e034:	40003c00 	.word	0x40003c00

0800e038 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800e038:	b580      	push	{r7, lr}
 800e03a:	b08e      	sub	sp, #56	; 0x38
 800e03c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800e03e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800e042:	2200      	movs	r2, #0
 800e044:	601a      	str	r2, [r3, #0]
 800e046:	605a      	str	r2, [r3, #4]
 800e048:	609a      	str	r2, [r3, #8]
 800e04a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800e04c:	f107 0320 	add.w	r3, r7, #32
 800e050:	2200      	movs	r2, #0
 800e052:	601a      	str	r2, [r3, #0]
 800e054:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800e056:	1d3b      	adds	r3, r7, #4
 800e058:	2200      	movs	r2, #0
 800e05a:	601a      	str	r2, [r3, #0]
 800e05c:	605a      	str	r2, [r3, #4]
 800e05e:	609a      	str	r2, [r3, #8]
 800e060:	60da      	str	r2, [r3, #12]
 800e062:	611a      	str	r2, [r3, #16]
 800e064:	615a      	str	r2, [r3, #20]
 800e066:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800e068:	4b32      	ldr	r3, [pc, #200]	; (800e134 <MX_TIM2_Init+0xfc>)
 800e06a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800e06e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800e070:	4b30      	ldr	r3, [pc, #192]	; (800e134 <MX_TIM2_Init+0xfc>)
 800e072:	2200      	movs	r2, #0
 800e074:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800e076:	4b2f      	ldr	r3, [pc, #188]	; (800e134 <MX_TIM2_Init+0xfc>)
 800e078:	2200      	movs	r2, #0
 800e07a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 800e07c:	4b2d      	ldr	r3, [pc, #180]	; (800e134 <MX_TIM2_Init+0xfc>)
 800e07e:	f240 32e7 	movw	r2, #999	; 0x3e7
 800e082:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800e084:	4b2b      	ldr	r3, [pc, #172]	; (800e134 <MX_TIM2_Init+0xfc>)
 800e086:	2200      	movs	r2, #0
 800e088:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800e08a:	4b2a      	ldr	r3, [pc, #168]	; (800e134 <MX_TIM2_Init+0xfc>)
 800e08c:	2200      	movs	r2, #0
 800e08e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800e090:	4828      	ldr	r0, [pc, #160]	; (800e134 <MX_TIM2_Init+0xfc>)
 800e092:	f7f5 faaf 	bl	80035f4 <HAL_TIM_Base_Init>
 800e096:	4603      	mov	r3, r0
 800e098:	2b00      	cmp	r3, #0
 800e09a:	d001      	beq.n	800e0a0 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 800e09c:	f000 faf5 	bl	800e68a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800e0a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e0a4:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800e0a6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800e0aa:	4619      	mov	r1, r3
 800e0ac:	4821      	ldr	r0, [pc, #132]	; (800e134 <MX_TIM2_Init+0xfc>)
 800e0ae:	f7f5 fe53 	bl	8003d58 <HAL_TIM_ConfigClockSource>
 800e0b2:	4603      	mov	r3, r0
 800e0b4:	2b00      	cmp	r3, #0
 800e0b6:	d001      	beq.n	800e0bc <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 800e0b8:	f000 fae7 	bl	800e68a <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800e0bc:	481d      	ldr	r0, [pc, #116]	; (800e134 <MX_TIM2_Init+0xfc>)
 800e0be:	f7f5 fae8 	bl	8003692 <HAL_TIM_PWM_Init>
 800e0c2:	4603      	mov	r3, r0
 800e0c4:	2b00      	cmp	r3, #0
 800e0c6:	d001      	beq.n	800e0cc <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 800e0c8:	f000 fadf 	bl	800e68a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800e0cc:	2300      	movs	r3, #0
 800e0ce:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800e0d0:	2300      	movs	r3, #0
 800e0d2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800e0d4:	f107 0320 	add.w	r3, r7, #32
 800e0d8:	4619      	mov	r1, r3
 800e0da:	4816      	ldr	r0, [pc, #88]	; (800e134 <MX_TIM2_Init+0xfc>)
 800e0dc:	f7f6 fa2b 	bl	8004536 <HAL_TIMEx_MasterConfigSynchronization>
 800e0e0:	4603      	mov	r3, r0
 800e0e2:	2b00      	cmp	r3, #0
 800e0e4:	d001      	beq.n	800e0ea <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800e0e6:	f000 fad0 	bl	800e68a <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800e0ea:	2360      	movs	r3, #96	; 0x60
 800e0ec:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800e0ee:	2300      	movs	r3, #0
 800e0f0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800e0f2:	2300      	movs	r3, #0
 800e0f4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800e0f6:	2300      	movs	r3, #0
 800e0f8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800e0fa:	1d3b      	adds	r3, r7, #4
 800e0fc:	2200      	movs	r2, #0
 800e0fe:	4619      	mov	r1, r3
 800e100:	480c      	ldr	r0, [pc, #48]	; (800e134 <MX_TIM2_Init+0xfc>)
 800e102:	f7f5 fd63 	bl	8003bcc <HAL_TIM_PWM_ConfigChannel>
 800e106:	4603      	mov	r3, r0
 800e108:	2b00      	cmp	r3, #0
 800e10a:	d001      	beq.n	800e110 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 800e10c:	f000 fabd 	bl	800e68a <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800e110:	1d3b      	adds	r3, r7, #4
 800e112:	220c      	movs	r2, #12
 800e114:	4619      	mov	r1, r3
 800e116:	4807      	ldr	r0, [pc, #28]	; (800e134 <MX_TIM2_Init+0xfc>)
 800e118:	f7f5 fd58 	bl	8003bcc <HAL_TIM_PWM_ConfigChannel>
 800e11c:	4603      	mov	r3, r0
 800e11e:	2b00      	cmp	r3, #0
 800e120:	d001      	beq.n	800e126 <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 800e122:	f000 fab2 	bl	800e68a <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800e126:	4803      	ldr	r0, [pc, #12]	; (800e134 <MX_TIM2_Init+0xfc>)
 800e128:	f003 ffb0 	bl	801208c <HAL_TIM_MspPostInit>

}
 800e12c:	bf00      	nop
 800e12e:	3738      	adds	r7, #56	; 0x38
 800e130:	46bd      	mov	sp, r7
 800e132:	bd80      	pop	{r7, pc}
 800e134:	20000c14 	.word	0x20000c14

0800e138 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800e138:	b580      	push	{r7, lr}
 800e13a:	b08e      	sub	sp, #56	; 0x38
 800e13c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800e13e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800e142:	2200      	movs	r2, #0
 800e144:	601a      	str	r2, [r3, #0]
 800e146:	605a      	str	r2, [r3, #4]
 800e148:	609a      	str	r2, [r3, #8]
 800e14a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800e14c:	f107 0320 	add.w	r3, r7, #32
 800e150:	2200      	movs	r2, #0
 800e152:	601a      	str	r2, [r3, #0]
 800e154:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800e156:	1d3b      	adds	r3, r7, #4
 800e158:	2200      	movs	r2, #0
 800e15a:	601a      	str	r2, [r3, #0]
 800e15c:	605a      	str	r2, [r3, #4]
 800e15e:	609a      	str	r2, [r3, #8]
 800e160:	60da      	str	r2, [r3, #12]
 800e162:	611a      	str	r2, [r3, #16]
 800e164:	615a      	str	r2, [r3, #20]
 800e166:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800e168:	4b2c      	ldr	r3, [pc, #176]	; (800e21c <MX_TIM3_Init+0xe4>)
 800e16a:	4a2d      	ldr	r2, [pc, #180]	; (800e220 <MX_TIM3_Init+0xe8>)
 800e16c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 64-1;
 800e16e:	4b2b      	ldr	r3, [pc, #172]	; (800e21c <MX_TIM3_Init+0xe4>)
 800e170:	223f      	movs	r2, #63	; 0x3f
 800e172:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800e174:	4b29      	ldr	r3, [pc, #164]	; (800e21c <MX_TIM3_Init+0xe4>)
 800e176:	2200      	movs	r2, #0
 800e178:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0;
 800e17a:	4b28      	ldr	r3, [pc, #160]	; (800e21c <MX_TIM3_Init+0xe4>)
 800e17c:	2200      	movs	r2, #0
 800e17e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800e180:	4b26      	ldr	r3, [pc, #152]	; (800e21c <MX_TIM3_Init+0xe4>)
 800e182:	2200      	movs	r2, #0
 800e184:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800e186:	4b25      	ldr	r3, [pc, #148]	; (800e21c <MX_TIM3_Init+0xe4>)
 800e188:	2200      	movs	r2, #0
 800e18a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800e18c:	4823      	ldr	r0, [pc, #140]	; (800e21c <MX_TIM3_Init+0xe4>)
 800e18e:	f7f5 fa31 	bl	80035f4 <HAL_TIM_Base_Init>
 800e192:	4603      	mov	r3, r0
 800e194:	2b00      	cmp	r3, #0
 800e196:	d001      	beq.n	800e19c <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 800e198:	f000 fa77 	bl	800e68a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800e19c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e1a0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800e1a2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800e1a6:	4619      	mov	r1, r3
 800e1a8:	481c      	ldr	r0, [pc, #112]	; (800e21c <MX_TIM3_Init+0xe4>)
 800e1aa:	f7f5 fdd5 	bl	8003d58 <HAL_TIM_ConfigClockSource>
 800e1ae:	4603      	mov	r3, r0
 800e1b0:	2b00      	cmp	r3, #0
 800e1b2:	d001      	beq.n	800e1b8 <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 800e1b4:	f000 fa69 	bl	800e68a <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800e1b8:	4818      	ldr	r0, [pc, #96]	; (800e21c <MX_TIM3_Init+0xe4>)
 800e1ba:	f7f5 fa6a 	bl	8003692 <HAL_TIM_PWM_Init>
 800e1be:	4603      	mov	r3, r0
 800e1c0:	2b00      	cmp	r3, #0
 800e1c2:	d001      	beq.n	800e1c8 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 800e1c4:	f000 fa61 	bl	800e68a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800e1c8:	2300      	movs	r3, #0
 800e1ca:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800e1cc:	2300      	movs	r3, #0
 800e1ce:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800e1d0:	f107 0320 	add.w	r3, r7, #32
 800e1d4:	4619      	mov	r1, r3
 800e1d6:	4811      	ldr	r0, [pc, #68]	; (800e21c <MX_TIM3_Init+0xe4>)
 800e1d8:	f7f6 f9ad 	bl	8004536 <HAL_TIMEx_MasterConfigSynchronization>
 800e1dc:	4603      	mov	r3, r0
 800e1de:	2b00      	cmp	r3, #0
 800e1e0:	d001      	beq.n	800e1e6 <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 800e1e2:	f000 fa52 	bl	800e68a <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800e1e6:	2360      	movs	r3, #96	; 0x60
 800e1e8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800e1ea:	2300      	movs	r3, #0
 800e1ec:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800e1ee:	2300      	movs	r3, #0
 800e1f0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800e1f2:	2300      	movs	r3, #0
 800e1f4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800e1f6:	1d3b      	adds	r3, r7, #4
 800e1f8:	2204      	movs	r2, #4
 800e1fa:	4619      	mov	r1, r3
 800e1fc:	4807      	ldr	r0, [pc, #28]	; (800e21c <MX_TIM3_Init+0xe4>)
 800e1fe:	f7f5 fce5 	bl	8003bcc <HAL_TIM_PWM_ConfigChannel>
 800e202:	4603      	mov	r3, r0
 800e204:	2b00      	cmp	r3, #0
 800e206:	d001      	beq.n	800e20c <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 800e208:	f000 fa3f 	bl	800e68a <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800e20c:	4803      	ldr	r0, [pc, #12]	; (800e21c <MX_TIM3_Init+0xe4>)
 800e20e:	f003 ff3d 	bl	801208c <HAL_TIM_MspPostInit>

}
 800e212:	bf00      	nop
 800e214:	3738      	adds	r7, #56	; 0x38
 800e216:	46bd      	mov	sp, r7
 800e218:	bd80      	pop	{r7, pc}
 800e21a:	bf00      	nop
 800e21c:	20000aa4 	.word	0x20000aa4
 800e220:	40000400 	.word	0x40000400

0800e224 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800e224:	b580      	push	{r7, lr}
 800e226:	b08c      	sub	sp, #48	; 0x30
 800e228:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800e22a:	f107 030c 	add.w	r3, r7, #12
 800e22e:	2224      	movs	r2, #36	; 0x24
 800e230:	2100      	movs	r1, #0
 800e232:	4618      	mov	r0, r3
 800e234:	f004 f94c 	bl	80124d0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800e238:	1d3b      	adds	r3, r7, #4
 800e23a:	2200      	movs	r2, #0
 800e23c:	601a      	str	r2, [r3, #0]
 800e23e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800e240:	4b20      	ldr	r3, [pc, #128]	; (800e2c4 <MX_TIM4_Init+0xa0>)
 800e242:	4a21      	ldr	r2, [pc, #132]	; (800e2c8 <MX_TIM4_Init+0xa4>)
 800e244:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800e246:	4b1f      	ldr	r3, [pc, #124]	; (800e2c4 <MX_TIM4_Init+0xa0>)
 800e248:	2200      	movs	r2, #0
 800e24a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800e24c:	4b1d      	ldr	r3, [pc, #116]	; (800e2c4 <MX_TIM4_Init+0xa0>)
 800e24e:	2200      	movs	r2, #0
 800e250:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800e252:	4b1c      	ldr	r3, [pc, #112]	; (800e2c4 <MX_TIM4_Init+0xa0>)
 800e254:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e258:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800e25a:	4b1a      	ldr	r3, [pc, #104]	; (800e2c4 <MX_TIM4_Init+0xa0>)
 800e25c:	2200      	movs	r2, #0
 800e25e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800e260:	4b18      	ldr	r3, [pc, #96]	; (800e2c4 <MX_TIM4_Init+0xa0>)
 800e262:	2200      	movs	r2, #0
 800e264:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800e266:	2303      	movs	r3, #3
 800e268:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800e26a:	2300      	movs	r3, #0
 800e26c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800e26e:	2301      	movs	r3, #1
 800e270:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800e272:	2300      	movs	r3, #0
 800e274:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800e276:	2300      	movs	r3, #0
 800e278:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800e27a:	2300      	movs	r3, #0
 800e27c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800e27e:	2301      	movs	r3, #1
 800e280:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800e282:	2300      	movs	r3, #0
 800e284:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800e286:	2300      	movs	r3, #0
 800e288:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 800e28a:	f107 030c 	add.w	r3, r7, #12
 800e28e:	4619      	mov	r1, r3
 800e290:	480c      	ldr	r0, [pc, #48]	; (800e2c4 <MX_TIM4_Init+0xa0>)
 800e292:	f7f5 fac9 	bl	8003828 <HAL_TIM_Encoder_Init>
 800e296:	4603      	mov	r3, r0
 800e298:	2b00      	cmp	r3, #0
 800e29a:	d001      	beq.n	800e2a0 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 800e29c:	f000 f9f5 	bl	800e68a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800e2a0:	2300      	movs	r3, #0
 800e2a2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800e2a4:	2300      	movs	r3, #0
 800e2a6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800e2a8:	1d3b      	adds	r3, r7, #4
 800e2aa:	4619      	mov	r1, r3
 800e2ac:	4805      	ldr	r0, [pc, #20]	; (800e2c4 <MX_TIM4_Init+0xa0>)
 800e2ae:	f7f6 f942 	bl	8004536 <HAL_TIMEx_MasterConfigSynchronization>
 800e2b2:	4603      	mov	r3, r0
 800e2b4:	2b00      	cmp	r3, #0
 800e2b6:	d001      	beq.n	800e2bc <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 800e2b8:	f000 f9e7 	bl	800e68a <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800e2bc:	bf00      	nop
 800e2be:	3730      	adds	r7, #48	; 0x30
 800e2c0:	46bd      	mov	sp, r7
 800e2c2:	bd80      	pop	{r7, pc}
 800e2c4:	2000030c 	.word	0x2000030c
 800e2c8:	40000800 	.word	0x40000800

0800e2cc <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 800e2cc:	b580      	push	{r7, lr}
 800e2ce:	b082      	sub	sp, #8
 800e2d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800e2d2:	463b      	mov	r3, r7
 800e2d4:	2200      	movs	r2, #0
 800e2d6:	601a      	str	r2, [r3, #0]
 800e2d8:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800e2da:	4b15      	ldr	r3, [pc, #84]	; (800e330 <MX_TIM6_Init+0x64>)
 800e2dc:	4a15      	ldr	r2, [pc, #84]	; (800e334 <MX_TIM6_Init+0x68>)
 800e2de:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 84-1;
 800e2e0:	4b13      	ldr	r3, [pc, #76]	; (800e330 <MX_TIM6_Init+0x64>)
 800e2e2:	2253      	movs	r2, #83	; 0x53
 800e2e4:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800e2e6:	4b12      	ldr	r3, [pc, #72]	; (800e330 <MX_TIM6_Init+0x64>)
 800e2e8:	2200      	movs	r2, #0
 800e2ea:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000-1;
 800e2ec:	4b10      	ldr	r3, [pc, #64]	; (800e330 <MX_TIM6_Init+0x64>)
 800e2ee:	f240 32e7 	movw	r2, #999	; 0x3e7
 800e2f2:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800e2f4:	4b0e      	ldr	r3, [pc, #56]	; (800e330 <MX_TIM6_Init+0x64>)
 800e2f6:	2200      	movs	r2, #0
 800e2f8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800e2fa:	480d      	ldr	r0, [pc, #52]	; (800e330 <MX_TIM6_Init+0x64>)
 800e2fc:	f7f5 f97a 	bl	80035f4 <HAL_TIM_Base_Init>
 800e300:	4603      	mov	r3, r0
 800e302:	2b00      	cmp	r3, #0
 800e304:	d001      	beq.n	800e30a <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 800e306:	f000 f9c0 	bl	800e68a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800e30a:	2300      	movs	r3, #0
 800e30c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800e30e:	2300      	movs	r3, #0
 800e310:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800e312:	463b      	mov	r3, r7
 800e314:	4619      	mov	r1, r3
 800e316:	4806      	ldr	r0, [pc, #24]	; (800e330 <MX_TIM6_Init+0x64>)
 800e318:	f7f6 f90d 	bl	8004536 <HAL_TIMEx_MasterConfigSynchronization>
 800e31c:	4603      	mov	r3, r0
 800e31e:	2b00      	cmp	r3, #0
 800e320:	d001      	beq.n	800e326 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 800e322:	f000 f9b2 	bl	800e68a <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800e326:	bf00      	nop
 800e328:	3708      	adds	r7, #8
 800e32a:	46bd      	mov	sp, r7
 800e32c:	bd80      	pop	{r7, pc}
 800e32e:	bf00      	nop
 800e330:	20000bb4 	.word	0x20000bb4
 800e334:	40001000 	.word	0x40001000

0800e338 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 800e338:	b580      	push	{r7, lr}
 800e33a:	b08c      	sub	sp, #48	; 0x30
 800e33c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800e33e:	f107 030c 	add.w	r3, r7, #12
 800e342:	2224      	movs	r2, #36	; 0x24
 800e344:	2100      	movs	r1, #0
 800e346:	4618      	mov	r0, r3
 800e348:	f004 f8c2 	bl	80124d0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800e34c:	1d3b      	adds	r3, r7, #4
 800e34e:	2200      	movs	r2, #0
 800e350:	601a      	str	r2, [r3, #0]
 800e352:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800e354:	4b22      	ldr	r3, [pc, #136]	; (800e3e0 <MX_TIM8_Init+0xa8>)
 800e356:	4a23      	ldr	r2, [pc, #140]	; (800e3e4 <MX_TIM8_Init+0xac>)
 800e358:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 800e35a:	4b21      	ldr	r3, [pc, #132]	; (800e3e0 <MX_TIM8_Init+0xa8>)
 800e35c:	2200      	movs	r2, #0
 800e35e:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800e360:	4b1f      	ldr	r3, [pc, #124]	; (800e3e0 <MX_TIM8_Init+0xa8>)
 800e362:	2200      	movs	r2, #0
 800e364:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 800e366:	4b1e      	ldr	r3, [pc, #120]	; (800e3e0 <MX_TIM8_Init+0xa8>)
 800e368:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e36c:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800e36e:	4b1c      	ldr	r3, [pc, #112]	; (800e3e0 <MX_TIM8_Init+0xa8>)
 800e370:	2200      	movs	r2, #0
 800e372:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800e374:	4b1a      	ldr	r3, [pc, #104]	; (800e3e0 <MX_TIM8_Init+0xa8>)
 800e376:	2200      	movs	r2, #0
 800e378:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800e37a:	4b19      	ldr	r3, [pc, #100]	; (800e3e0 <MX_TIM8_Init+0xa8>)
 800e37c:	2200      	movs	r2, #0
 800e37e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800e380:	2303      	movs	r3, #3
 800e382:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800e384:	2300      	movs	r3, #0
 800e386:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800e388:	2301      	movs	r3, #1
 800e38a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800e38c:	2300      	movs	r3, #0
 800e38e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800e390:	2300      	movs	r3, #0
 800e392:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800e394:	2300      	movs	r3, #0
 800e396:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800e398:	2301      	movs	r3, #1
 800e39a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800e39c:	2300      	movs	r3, #0
 800e39e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800e3a0:	2300      	movs	r3, #0
 800e3a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 800e3a4:	f107 030c 	add.w	r3, r7, #12
 800e3a8:	4619      	mov	r1, r3
 800e3aa:	480d      	ldr	r0, [pc, #52]	; (800e3e0 <MX_TIM8_Init+0xa8>)
 800e3ac:	f7f5 fa3c 	bl	8003828 <HAL_TIM_Encoder_Init>
 800e3b0:	4603      	mov	r3, r0
 800e3b2:	2b00      	cmp	r3, #0
 800e3b4:	d001      	beq.n	800e3ba <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 800e3b6:	f000 f968 	bl	800e68a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800e3ba:	2300      	movs	r3, #0
 800e3bc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800e3be:	2300      	movs	r3, #0
 800e3c0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800e3c2:	1d3b      	adds	r3, r7, #4
 800e3c4:	4619      	mov	r1, r3
 800e3c6:	4806      	ldr	r0, [pc, #24]	; (800e3e0 <MX_TIM8_Init+0xa8>)
 800e3c8:	f7f6 f8b5 	bl	8004536 <HAL_TIMEx_MasterConfigSynchronization>
 800e3cc:	4603      	mov	r3, r0
 800e3ce:	2b00      	cmp	r3, #0
 800e3d0:	d001      	beq.n	800e3d6 <MX_TIM8_Init+0x9e>
  {
    Error_Handler();
 800e3d2:	f000 f95a 	bl	800e68a <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 800e3d6:	bf00      	nop
 800e3d8:	3730      	adds	r7, #48	; 0x30
 800e3da:	46bd      	mov	sp, r7
 800e3dc:	bd80      	pop	{r7, pc}
 800e3de:	bf00      	nop
 800e3e0:	200002cc 	.word	0x200002cc
 800e3e4:	40010400 	.word	0x40010400

0800e3e8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800e3e8:	b580      	push	{r7, lr}
 800e3ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800e3ec:	4b11      	ldr	r3, [pc, #68]	; (800e434 <MX_USART1_UART_Init+0x4c>)
 800e3ee:	4a12      	ldr	r2, [pc, #72]	; (800e438 <MX_USART1_UART_Init+0x50>)
 800e3f0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800e3f2:	4b10      	ldr	r3, [pc, #64]	; (800e434 <MX_USART1_UART_Init+0x4c>)
 800e3f4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800e3f8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800e3fa:	4b0e      	ldr	r3, [pc, #56]	; (800e434 <MX_USART1_UART_Init+0x4c>)
 800e3fc:	2200      	movs	r2, #0
 800e3fe:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800e400:	4b0c      	ldr	r3, [pc, #48]	; (800e434 <MX_USART1_UART_Init+0x4c>)
 800e402:	2200      	movs	r2, #0
 800e404:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800e406:	4b0b      	ldr	r3, [pc, #44]	; (800e434 <MX_USART1_UART_Init+0x4c>)
 800e408:	2200      	movs	r2, #0
 800e40a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800e40c:	4b09      	ldr	r3, [pc, #36]	; (800e434 <MX_USART1_UART_Init+0x4c>)
 800e40e:	220c      	movs	r2, #12
 800e410:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800e412:	4b08      	ldr	r3, [pc, #32]	; (800e434 <MX_USART1_UART_Init+0x4c>)
 800e414:	2200      	movs	r2, #0
 800e416:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800e418:	4b06      	ldr	r3, [pc, #24]	; (800e434 <MX_USART1_UART_Init+0x4c>)
 800e41a:	2200      	movs	r2, #0
 800e41c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800e41e:	4805      	ldr	r0, [pc, #20]	; (800e434 <MX_USART1_UART_Init+0x4c>)
 800e420:	f7f6 f8e2 	bl	80045e8 <HAL_UART_Init>
 800e424:	4603      	mov	r3, r0
 800e426:	2b00      	cmp	r3, #0
 800e428:	d001      	beq.n	800e42e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800e42a:	f000 f92e 	bl	800e68a <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800e42e:	bf00      	nop
 800e430:	bd80      	pop	{r7, pc}
 800e432:	bf00      	nop
 800e434:	20000b64 	.word	0x20000b64
 800e438:	40011000 	.word	0x40011000

0800e43c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800e43c:	b580      	push	{r7, lr}
 800e43e:	b08a      	sub	sp, #40	; 0x28
 800e440:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e442:	f107 0314 	add.w	r3, r7, #20
 800e446:	2200      	movs	r2, #0
 800e448:	601a      	str	r2, [r3, #0]
 800e44a:	605a      	str	r2, [r3, #4]
 800e44c:	609a      	str	r2, [r3, #8]
 800e44e:	60da      	str	r2, [r3, #12]
 800e450:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800e452:	2300      	movs	r3, #0
 800e454:	613b      	str	r3, [r7, #16]
 800e456:	4b53      	ldr	r3, [pc, #332]	; (800e5a4 <MX_GPIO_Init+0x168>)
 800e458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e45a:	4a52      	ldr	r2, [pc, #328]	; (800e5a4 <MX_GPIO_Init+0x168>)
 800e45c:	f043 0304 	orr.w	r3, r3, #4
 800e460:	6313      	str	r3, [r2, #48]	; 0x30
 800e462:	4b50      	ldr	r3, [pc, #320]	; (800e5a4 <MX_GPIO_Init+0x168>)
 800e464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e466:	f003 0304 	and.w	r3, r3, #4
 800e46a:	613b      	str	r3, [r7, #16]
 800e46c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800e46e:	2300      	movs	r3, #0
 800e470:	60fb      	str	r3, [r7, #12]
 800e472:	4b4c      	ldr	r3, [pc, #304]	; (800e5a4 <MX_GPIO_Init+0x168>)
 800e474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e476:	4a4b      	ldr	r2, [pc, #300]	; (800e5a4 <MX_GPIO_Init+0x168>)
 800e478:	f043 0301 	orr.w	r3, r3, #1
 800e47c:	6313      	str	r3, [r2, #48]	; 0x30
 800e47e:	4b49      	ldr	r3, [pc, #292]	; (800e5a4 <MX_GPIO_Init+0x168>)
 800e480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e482:	f003 0301 	and.w	r3, r3, #1
 800e486:	60fb      	str	r3, [r7, #12]
 800e488:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800e48a:	2300      	movs	r3, #0
 800e48c:	60bb      	str	r3, [r7, #8]
 800e48e:	4b45      	ldr	r3, [pc, #276]	; (800e5a4 <MX_GPIO_Init+0x168>)
 800e490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e492:	4a44      	ldr	r2, [pc, #272]	; (800e5a4 <MX_GPIO_Init+0x168>)
 800e494:	f043 0302 	orr.w	r3, r3, #2
 800e498:	6313      	str	r3, [r2, #48]	; 0x30
 800e49a:	4b42      	ldr	r3, [pc, #264]	; (800e5a4 <MX_GPIO_Init+0x168>)
 800e49c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e49e:	f003 0302 	and.w	r3, r3, #2
 800e4a2:	60bb      	str	r3, [r7, #8]
 800e4a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800e4a6:	2300      	movs	r3, #0
 800e4a8:	607b      	str	r3, [r7, #4]
 800e4aa:	4b3e      	ldr	r3, [pc, #248]	; (800e5a4 <MX_GPIO_Init+0x168>)
 800e4ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e4ae:	4a3d      	ldr	r2, [pc, #244]	; (800e5a4 <MX_GPIO_Init+0x168>)
 800e4b0:	f043 0308 	orr.w	r3, r3, #8
 800e4b4:	6313      	str	r3, [r2, #48]	; 0x30
 800e4b6:	4b3b      	ldr	r3, [pc, #236]	; (800e5a4 <MX_GPIO_Init+0x168>)
 800e4b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e4ba:	f003 0308 	and.w	r3, r3, #8
 800e4be:	607b      	str	r3, [r7, #4]
 800e4c0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_2 
 800e4c2:	2200      	movs	r2, #0
 800e4c4:	f24e 213c 	movw	r1, #57916	; 0xe23c
 800e4c8:	4837      	ldr	r0, [pc, #220]	; (800e5a8 <MX_GPIO_Init+0x16c>)
 800e4ca:	f7f3 ff1b 	bl	8002304 <HAL_GPIO_WritePin>
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8, GPIO_PIN_RESET);
 800e4ce:	2200      	movs	r2, #0
 800e4d0:	f44f 71e8 	mov.w	r1, #464	; 0x1d0
 800e4d4:	4835      	ldr	r0, [pc, #212]	; (800e5ac <MX_GPIO_Init+0x170>)
 800e4d6:	f7f3 ff15 	bl	8002304 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_13 
 800e4da:	2200      	movs	r2, #0
 800e4dc:	f242 7103 	movw	r1, #9987	; 0x2703
 800e4e0:	4833      	ldr	r0, [pc, #204]	; (800e5b0 <MX_GPIO_Init+0x174>)
 800e4e2:	f7f3 ff0f 	bl	8002304 <HAL_GPIO_WritePin>
                          |GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 800e4e6:	2200      	movs	r2, #0
 800e4e8:	2104      	movs	r1, #4
 800e4ea:	4832      	ldr	r0, [pc, #200]	; (800e5b4 <MX_GPIO_Init+0x178>)
 800e4ec:	f7f3 ff0a 	bl	8002304 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 PC2 
                           PC3 PC4 PC5 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_2 
 800e4f0:	f24e 233c 	movw	r3, #57916	; 0xe23c
 800e4f4:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800e4f6:	2301      	movs	r3, #1
 800e4f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e4fa:	2300      	movs	r3, #0
 800e4fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e4fe:	2300      	movs	r3, #0
 800e500:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800e502:	f107 0314 	add.w	r3, r7, #20
 800e506:	4619      	mov	r1, r3
 800e508:	4827      	ldr	r0, [pc, #156]	; (800e5a8 <MX_GPIO_Init+0x16c>)
 800e50a:	f7f3 fd49 	bl	8001fa0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA6 PA7 PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 800e50e:	f44f 73e8 	mov.w	r3, #464	; 0x1d0
 800e512:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800e514:	2301      	movs	r3, #1
 800e516:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e518:	2300      	movs	r3, #0
 800e51a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e51c:	2300      	movs	r3, #0
 800e51e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e520:	f107 0314 	add.w	r3, r7, #20
 800e524:	4619      	mov	r1, r3
 800e526:	4821      	ldr	r0, [pc, #132]	; (800e5ac <MX_GPIO_Init+0x170>)
 800e528:	f7f3 fd3a 	bl	8001fa0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB10 PB13 
                           PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_13 
 800e52c:	f242 7303 	movw	r3, #9987	; 0x2703
 800e530:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800e532:	2301      	movs	r3, #1
 800e534:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e536:	2300      	movs	r3, #0
 800e538:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e53a:	2300      	movs	r3, #0
 800e53c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800e53e:	f107 0314 	add.w	r3, r7, #20
 800e542:	4619      	mov	r1, r3
 800e544:	481a      	ldr	r0, [pc, #104]	; (800e5b0 <MX_GPIO_Init+0x174>)
 800e546:	f7f3 fd2b 	bl	8001fa0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 800e54a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e54e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800e550:	2300      	movs	r3, #0
 800e552:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800e554:	2301      	movs	r3, #1
 800e556:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800e558:	f107 0314 	add.w	r3, r7, #20
 800e55c:	4619      	mov	r1, r3
 800e55e:	4814      	ldr	r0, [pc, #80]	; (800e5b0 <MX_GPIO_Init+0x174>)
 800e560:	f7f3 fd1e 	bl	8001fa0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 800e564:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e568:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800e56a:	2300      	movs	r3, #0
 800e56c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e56e:	2300      	movs	r3, #0
 800e570:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e572:	f107 0314 	add.w	r3, r7, #20
 800e576:	4619      	mov	r1, r3
 800e578:	480c      	ldr	r0, [pc, #48]	; (800e5ac <MX_GPIO_Init+0x170>)
 800e57a:	f7f3 fd11 	bl	8001fa0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800e57e:	2304      	movs	r3, #4
 800e580:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800e582:	2301      	movs	r3, #1
 800e584:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e586:	2300      	movs	r3, #0
 800e588:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e58a:	2300      	movs	r3, #0
 800e58c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800e58e:	f107 0314 	add.w	r3, r7, #20
 800e592:	4619      	mov	r1, r3
 800e594:	4807      	ldr	r0, [pc, #28]	; (800e5b4 <MX_GPIO_Init+0x178>)
 800e596:	f7f3 fd03 	bl	8001fa0 <HAL_GPIO_Init>

}
 800e59a:	bf00      	nop
 800e59c:	3728      	adds	r7, #40	; 0x28
 800e59e:	46bd      	mov	sp, r7
 800e5a0:	bd80      	pop	{r7, pc}
 800e5a2:	bf00      	nop
 800e5a4:	40023800 	.word	0x40023800
 800e5a8:	40020800 	.word	0x40020800
 800e5ac:	40020000 	.word	0x40020000
 800e5b0:	40020400 	.word	0x40020400
 800e5b4:	40020c00 	.word	0x40020c00

0800e5b8 <buzzer>:

/* USER CODE BEGIN 4 */
void buzzer(int sound, int length){
 800e5b8:	b580      	push	{r7, lr}
 800e5ba:	b08a      	sub	sp, #40	; 0x28
 800e5bc:	af00      	add	r7, sp, #0
 800e5be:	6078      	str	r0, [r7, #4]
 800e5c0:	6039      	str	r1, [r7, #0]
	TIM_OC_InitTypeDef ConfigOC;
	ConfigOC.OCMode = TIM_OCMODE_PWM1;
 800e5c2:	2360      	movs	r3, #96	; 0x60
 800e5c4:	60fb      	str	r3, [r7, #12]
	ConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800e5c6:	2300      	movs	r3, #0
 800e5c8:	617b      	str	r3, [r7, #20]
	ConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800e5ca:	2300      	movs	r3, #0
 800e5cc:	61fb      	str	r3, [r7, #28]

	hz = 1000000 / sound;
 800e5ce:	4a15      	ldr	r2, [pc, #84]	; (800e624 <buzzer+0x6c>)
 800e5d0:	687b      	ldr	r3, [r7, #4]
 800e5d2:	fb92 f3f3 	sdiv	r3, r2, r3
 800e5d6:	4a14      	ldr	r2, [pc, #80]	; (800e628 <buzzer+0x70>)
 800e5d8:	6013      	str	r3, [r2, #0]
	TIM3 -> ARR = hz;
 800e5da:	4b13      	ldr	r3, [pc, #76]	; (800e628 <buzzer+0x70>)
 800e5dc:	681a      	ldr	r2, [r3, #0]
 800e5de:	4b13      	ldr	r3, [pc, #76]	; (800e62c <buzzer+0x74>)
 800e5e0:	62da      	str	r2, [r3, #44]	; 0x2c
    ConfigOC.Pulse = hz / 10;
 800e5e2:	4b11      	ldr	r3, [pc, #68]	; (800e628 <buzzer+0x70>)
 800e5e4:	681b      	ldr	r3, [r3, #0]
 800e5e6:	4a12      	ldr	r2, [pc, #72]	; (800e630 <buzzer+0x78>)
 800e5e8:	fb82 1203 	smull	r1, r2, r2, r3
 800e5ec:	1092      	asrs	r2, r2, #2
 800e5ee:	17db      	asrs	r3, r3, #31
 800e5f0:	1ad3      	subs	r3, r2, r3
 800e5f2:	613b      	str	r3, [r7, #16]
    HAL_TIM_PWM_ConfigChannel(&htim3, &ConfigOC, TIM_CHANNEL_2);
 800e5f4:	f107 030c 	add.w	r3, r7, #12
 800e5f8:	2204      	movs	r2, #4
 800e5fa:	4619      	mov	r1, r3
 800e5fc:	480d      	ldr	r0, [pc, #52]	; (800e634 <buzzer+0x7c>)
 800e5fe:	f7f5 fae5 	bl	8003bcc <HAL_TIM_PWM_ConfigChannel>
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 800e602:	2104      	movs	r1, #4
 800e604:	480b      	ldr	r0, [pc, #44]	; (800e634 <buzzer+0x7c>)
 800e606:	f7f5 f879 	bl	80036fc <HAL_TIM_PWM_Start>

	HAL_Delay(length);
 800e60a:	683b      	ldr	r3, [r7, #0]
 800e60c:	4618      	mov	r0, r3
 800e60e:	f7f2 fd05 	bl	800101c <HAL_Delay>
    HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_2);
 800e612:	2104      	movs	r1, #4
 800e614:	4807      	ldr	r0, [pc, #28]	; (800e634 <buzzer+0x7c>)
 800e616:	f7f5 f8af 	bl	8003778 <HAL_TIM_PWM_Stop>
}
 800e61a:	bf00      	nop
 800e61c:	3728      	adds	r7, #40	; 0x28
 800e61e:	46bd      	mov	sp, r7
 800e620:	bd80      	pop	{r7, pc}
 800e622:	bf00      	nop
 800e624:	000f4240 	.word	0x000f4240
 800e628:	200002c4 	.word	0x200002c4
 800e62c:	40000400 	.word	0x40000400
 800e630:	66666667 	.word	0x66666667
 800e634:	20000aa4 	.word	0x20000aa4

0800e638 <get_adc_value>:


int get_adc_value(ADC_HandleTypeDef *hadc, uint32_t channel){
 800e638:	b580      	push	{r7, lr}
 800e63a:	b086      	sub	sp, #24
 800e63c:	af00      	add	r7, sp, #0
 800e63e:	6078      	str	r0, [r7, #4]
 800e640:	6039      	str	r1, [r7, #0]

  ADC_ChannelConfTypeDef sConfig = {0};
 800e642:	f107 0308 	add.w	r3, r7, #8
 800e646:	2200      	movs	r2, #0
 800e648:	601a      	str	r2, [r3, #0]
 800e64a:	605a      	str	r2, [r3, #4]
 800e64c:	609a      	str	r2, [r3, #8]
 800e64e:	60da      	str	r2, [r3, #12]

  sConfig.Channel = channel;
 800e650:	683b      	ldr	r3, [r7, #0]
 800e652:	60bb      	str	r3, [r7, #8]
  sConfig.Rank = 1;
 800e654:	2301      	movs	r3, #1
 800e656:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800e658:	2300      	movs	r3, #0
 800e65a:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800e65c:	2300      	movs	r3, #0
 800e65e:	617b      	str	r3, [r7, #20]

  HAL_ADC_ConfigChannel(hadc, &sConfig);
 800e660:	f107 0308 	add.w	r3, r7, #8
 800e664:	4619      	mov	r1, r3
 800e666:	6878      	ldr	r0, [r7, #4]
 800e668:	f7f2 fe96 	bl	8001398 <HAL_ADC_ConfigChannel>

  HAL_ADC_Start(hadc);                    //
 800e66c:	6878      	ldr	r0, [r7, #4]
 800e66e:	f7f2 fd3b 	bl	80010e8 <HAL_ADC_Start>
  HAL_ADC_PollForConversion(hadc, 100);   //wait for ADC
 800e672:	2164      	movs	r1, #100	; 0x64
 800e674:	6878      	ldr	r0, [r7, #4]
 800e676:	f7f2 fdfd 	bl	8001274 <HAL_ADC_PollForConversion>
  return HAL_ADC_GetValue(hadc);          //
 800e67a:	6878      	ldr	r0, [r7, #4]
 800e67c:	f7f2 fe7e 	bl	800137c <HAL_ADC_GetValue>
 800e680:	4603      	mov	r3, r0
}
 800e682:	4618      	mov	r0, r3
 800e684:	3718      	adds	r7, #24
 800e686:	46bd      	mov	sp, r7
 800e688:	bd80      	pop	{r7, pc}

0800e68a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800e68a:	b480      	push	{r7}
 800e68c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800e68e:	bf00      	nop
 800e690:	46bd      	mov	sp, r7
 800e692:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e696:	4770      	bx	lr

0800e698 <search_init>:

#include "global.h"

void search_init(void){
 800e698:	b580      	push	{r7, lr}
 800e69a:	af00      	add	r7, sp, #0

	//----a探索系----
	goal_x = GOAL_X;        		//GOAL_Xはglobal.hにマクロ定義あり
 800e69c:	4b09      	ldr	r3, [pc, #36]	; (800e6c4 <search_init+0x2c>)
 800e69e:	2207      	movs	r2, #7
 800e6a0:	701a      	strb	r2, [r3, #0]
	goal_y = GOAL_Y;        		//GOAL_Yはglobal.hにマクロ定義あり
 800e6a2:	4b09      	ldr	r3, [pc, #36]	; (800e6c8 <search_init+0x30>)
 800e6a4:	2206      	movs	r2, #6
 800e6a6:	701a      	strb	r2, [r3, #0]
	map_Init();						//aマップの初期化
 800e6a8:	f001 f95e 	bl	800f968 <map_Init>
	mouse.x = 0;
 800e6ac:	4b07      	ldr	r3, [pc, #28]	; (800e6cc <search_init+0x34>)
 800e6ae:	2200      	movs	r2, #0
 800e6b0:	701a      	strb	r2, [r3, #0]
	mouse.y = 0;					//a現在地の初期化
 800e6b2:	4b06      	ldr	r3, [pc, #24]	; (800e6cc <search_init+0x34>)
 800e6b4:	2200      	movs	r2, #0
 800e6b6:	705a      	strb	r2, [r3, #1]
	mouse.dir = 0;					//aマウスの向きの初期化
 800e6b8:	4b04      	ldr	r3, [pc, #16]	; (800e6cc <search_init+0x34>)
 800e6ba:	2200      	movs	r2, #0
 800e6bc:	709a      	strb	r2, [r3, #2]
}
 800e6be:	bf00      	nop
 800e6c0:	bd80      	pop	{r7, pc}
 800e6c2:	bf00      	nop
 800e6c4:	20000bb0 	.word	0x20000bb0
 800e6c8:	20000b4c 	.word	0x20000b4c
 800e6cc:	20000c0c 	.word	0x20000c0c

0800e6d0 <searchA>:
//searchA
//a1区画走行でgoal座標に進む
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void searchA(){
 800e6d0:	b580      	push	{r7, lr}
 800e6d2:	af00      	add	r7, sp, #0

	if(MF.FLAG.SCND){
 800e6d4:	4b37      	ldr	r3, [pc, #220]	; (800e7b4 <searchA+0xe4>)
 800e6d6:	881b      	ldrh	r3, [r3, #0]
 800e6d8:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800e6dc:	b2db      	uxtb	r3, r3
 800e6de:	2b00      	cmp	r3, #0
 800e6e0:	d001      	beq.n	800e6e6 <searchA+0x16>
		load_map_from_eeprom();
 800e6e2:	f003 f87d 	bl	80117e0 <load_map_from_eeprom>
	}

	//====aスタート位置壁情報取得====
	get_wall_info();										//a壁情報の初期化, 後壁はなくなる
 800e6e6:	f003 f8f3 	bl	80118d0 <get_wall_info>
	wall_info &= ~0x88;										//a前壁は存在するはずがないので削除する
 800e6ea:	4b33      	ldr	r3, [pc, #204]	; (800e7b8 <searchA+0xe8>)
 800e6ec:	781b      	ldrb	r3, [r3, #0]
 800e6ee:	f003 0377 	and.w	r3, r3, #119	; 0x77
 800e6f2:	b2da      	uxtb	r2, r3
 800e6f4:	4b30      	ldr	r3, [pc, #192]	; (800e7b8 <searchA+0xe8>)
 800e6f6:	701a      	strb	r2, [r3, #0]
	write_map();											//a壁情報を地図に記入
 800e6f8:	f001 f9a2 	bl	800fa40 <write_map>

	//====a歩数マップ・経路作成====
	r_cnt = 0;												//a経路カウンタの初期化
 800e6fc:	4b2f      	ldr	r3, [pc, #188]	; (800e7bc <searchA+0xec>)
 800e6fe:	2200      	movs	r2, #0
 800e700:	701a      	strb	r2, [r3, #0]
	make_smap();											//a歩数マップ作成
 800e702:	f001 fb91 	bl	800fe28 <make_smap>
	make_route();											//a最短経路探索（route配列に動作が格納される）
 800e706:	f001 ff4d 	bl	80105a4 <make_route>

	//====a探索走行====
	do{
		//----a進行----
		switch(route[r_cnt++]){								//route配列によって進行を決定。経路カウンタを進める
 800e70a:	4b2c      	ldr	r3, [pc, #176]	; (800e7bc <searchA+0xec>)
 800e70c:	781b      	ldrb	r3, [r3, #0]
 800e70e:	1c5a      	adds	r2, r3, #1
 800e710:	b2d1      	uxtb	r1, r2
 800e712:	4a2a      	ldr	r2, [pc, #168]	; (800e7bc <searchA+0xec>)
 800e714:	7011      	strb	r1, [r2, #0]
 800e716:	461a      	mov	r2, r3
 800e718:	4b29      	ldr	r3, [pc, #164]	; (800e7c0 <searchA+0xf0>)
 800e71a:	5c9b      	ldrb	r3, [r3, r2]
 800e71c:	2b22      	cmp	r3, #34	; 0x22
 800e71e:	d00b      	beq.n	800e738 <searchA+0x68>
 800e720:	2b22      	cmp	r3, #34	; 0x22
 800e722:	dc02      	bgt.n	800e72a <searchA+0x5a>
 800e724:	2b11      	cmp	r3, #17
 800e726:	d012      	beq.n	800e74e <searchA+0x7e>
 800e728:	e015      	b.n	800e756 <searchA+0x86>
 800e72a:	2b44      	cmp	r3, #68	; 0x44
 800e72c:	d001      	beq.n	800e732 <searchA+0x62>
 800e72e:	2b88      	cmp	r3, #136	; 0x88
			//----a前進----
			case 0x88:
				break;
 800e730:	e011      	b.n	800e756 <searchA+0x86>
			//----a右折----
			case 0x44:
				rotate_R90();								//a右回転
 800e732:	f7f7 fe25 	bl	8006380 <rotate_R90>
				break;
 800e736:	e00e      	b.n	800e756 <searchA+0x86>
			//----180回転----
			case 0x22:
				rotate_180();								//180度回転
 800e738:	f7f7 ffda 	bl	80066f0 <rotate_180>
				if(wall_info & 0x88){
 800e73c:	4b1e      	ldr	r3, [pc, #120]	; (800e7b8 <searchA+0xe8>)
 800e73e:	781b      	ldrb	r3, [r3, #0]
 800e740:	f003 0388 	and.w	r3, r3, #136	; 0x88
 800e744:	2b00      	cmp	r3, #0
 800e746:	d005      	beq.n	800e754 <searchA+0x84>
					set_position();
 800e748:	f7f7 f8b0 	bl	80058ac <set_position>
				}
				break;
 800e74c:	e002      	b.n	800e754 <searchA+0x84>
			//----a左折----
			case 0x11:
				rotate_L90();								//a左回転
 800e74e:	f7f7 fef3 	bl	8006538 <rotate_L90>
				break;
 800e752:	e000      	b.n	800e756 <searchA+0x86>
				break;
 800e754:	bf00      	nop
		}

		drive_wait();
 800e756:	2032      	movs	r0, #50	; 0x32
 800e758:	f7f2 fc60 	bl	800101c <HAL_Delay>
		one_section();										//a前進する
 800e75c:	f7f7 fba8 	bl	8005eb0 <one_section>
		drive_wait();
 800e760:	2032      	movs	r0, #50	; 0x32
 800e762:	f7f2 fc5b 	bl	800101c <HAL_Delay>

		adv_pos();											//aマイクロマウス内部位置情報でも前進処理
 800e766:	f001 f8a7 	bl	800f8b8 <adv_pos>
		conf_route();										//a最短経路で進行可能か判定
 800e76a:	f001 f8df 	bl	800f92c <conf_route>

	}while((mouse.x != goal_x) || (mouse.y != goal_y));		//a現在座標とgoal座標が等しくなるまで実行
 800e76e:	4b15      	ldr	r3, [pc, #84]	; (800e7c4 <searchA+0xf4>)
 800e770:	781b      	ldrb	r3, [r3, #0]
 800e772:	b2da      	uxtb	r2, r3
 800e774:	4b14      	ldr	r3, [pc, #80]	; (800e7c8 <searchA+0xf8>)
 800e776:	781b      	ldrb	r3, [r3, #0]
 800e778:	429a      	cmp	r2, r3
 800e77a:	d1c6      	bne.n	800e70a <searchA+0x3a>
 800e77c:	4b11      	ldr	r3, [pc, #68]	; (800e7c4 <searchA+0xf4>)
 800e77e:	785b      	ldrb	r3, [r3, #1]
 800e780:	b2da      	uxtb	r2, r3
 800e782:	4b12      	ldr	r3, [pc, #72]	; (800e7cc <searchA+0xfc>)
 800e784:	781b      	ldrb	r3, [r3, #0]
 800e786:	429a      	cmp	r2, r3
 800e788:	d1bf      	bne.n	800e70a <searchA+0x3a>

	printf("goal\n");
 800e78a:	4811      	ldr	r0, [pc, #68]	; (800e7d0 <searchA+0x100>)
 800e78c:	f003 ff1c 	bl	80125c8 <puts>
	HAL_Delay(500);										//aスタートでは***2秒以上***停止しなくてはならない
 800e790:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800e794:	f7f2 fc42 	bl	800101c <HAL_Delay>
	rotate_180();											//180度回転
 800e798:	f7f7 ffaa 	bl	80066f0 <rotate_180>

	if(!MF.FLAG.SCND){
 800e79c:	4b05      	ldr	r3, [pc, #20]	; (800e7b4 <searchA+0xe4>)
 800e79e:	881b      	ldrh	r3, [r3, #0]
 800e7a0:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800e7a4:	b2db      	uxtb	r3, r3
 800e7a6:	2b00      	cmp	r3, #0
 800e7a8:	d101      	bne.n	800e7ae <searchA+0xde>
		store_map_in_eeprom();
 800e7aa:	f002 ffdf 	bl	801176c <store_map_in_eeprom>
	}
}
 800e7ae:	bf00      	nop
 800e7b0:	bd80      	pop	{r7, pc}
 800e7b2:	bf00      	nop
 800e7b4:	20000f68 	.word	0x20000f68
 800e7b8:	200002c8 	.word	0x200002c8
 800e7bc:	200015d0 	.word	0x200015d0
 800e7c0:	20000c54 	.word	0x20000c54
 800e7c4:	20000c0c 	.word	0x20000c0c
 800e7c8:	20000bb0 	.word	0x20000bb0
 800e7cc:	20000b4c 	.word	0x20000b4c
 800e7d0:	08013b60 	.word	0x08013b60

0800e7d4 <searchB>:
//searchB
//a連続走行でgoal座標に進む
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void searchB(){
 800e7d4:	b580      	push	{r7, lr}
 800e7d6:	af00      	add	r7, sp, #0

	if(MF.FLAG.SCND){
 800e7d8:	4b3c      	ldr	r3, [pc, #240]	; (800e8cc <searchB+0xf8>)
 800e7da:	881b      	ldrh	r3, [r3, #0]
 800e7dc:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800e7e0:	b2db      	uxtb	r3, r3
 800e7e2:	2b00      	cmp	r3, #0
 800e7e4:	d001      	beq.n	800e7ea <searchB+0x16>
		load_map_from_eeprom();
 800e7e6:	f002 fffb 	bl	80117e0 <load_map_from_eeprom>
	}

	//====aスタート位置壁情報取得====
	get_wall_info();										//a壁情報の初期化, 後壁はなくなる
 800e7ea:	f003 f871 	bl	80118d0 <get_wall_info>
	wall_info &= ~0x88;										//a前壁は存在するはずがないので削除する
 800e7ee:	4b38      	ldr	r3, [pc, #224]	; (800e8d0 <searchB+0xfc>)
 800e7f0:	781b      	ldrb	r3, [r3, #0]
 800e7f2:	f003 0377 	and.w	r3, r3, #119	; 0x77
 800e7f6:	b2da      	uxtb	r2, r3
 800e7f8:	4b35      	ldr	r3, [pc, #212]	; (800e8d0 <searchB+0xfc>)
 800e7fa:	701a      	strb	r2, [r3, #0]
	write_map();											//a壁情報を地図に記入
 800e7fc:	f001 f920 	bl	800fa40 <write_map>

	//====a前に壁が無い想定で問答無用で前進====
	start_sectionA();
 800e800:	f7f7 f888 	bl	8005914 <start_sectionA>
	adv_pos();
 800e804:	f001 f858 	bl	800f8b8 <adv_pos>

	//====a歩数マップ・経路作成====
	write_map();											//a壁情報を地図に記入
 800e808:	f001 f91a 	bl	800fa40 <write_map>
	r_cnt = 0;												//a経路カウンタの初期化
 800e80c:	4b31      	ldr	r3, [pc, #196]	; (800e8d4 <searchB+0x100>)
 800e80e:	2200      	movs	r2, #0
 800e810:	701a      	strb	r2, [r3, #0]
	make_smap();											//a歩数マップ作成
 800e812:	f001 fb09 	bl	800fe28 <make_smap>
	make_route();											//a最短経路探索（route配列に動作が格納される）
 800e816:	f001 fec5 	bl	80105a4 <make_route>

	//====a探索走行====
	do{
		//----a進行----
		switch(route[r_cnt++]){								//route配列によって進行を決定。経路カウンタを進める
 800e81a:	4b2e      	ldr	r3, [pc, #184]	; (800e8d4 <searchB+0x100>)
 800e81c:	781b      	ldrb	r3, [r3, #0]
 800e81e:	1c5a      	adds	r2, r3, #1
 800e820:	b2d1      	uxtb	r1, r2
 800e822:	4a2c      	ldr	r2, [pc, #176]	; (800e8d4 <searchB+0x100>)
 800e824:	7011      	strb	r1, [r2, #0]
 800e826:	461a      	mov	r2, r3
 800e828:	4b2b      	ldr	r3, [pc, #172]	; (800e8d8 <searchB+0x104>)
 800e82a:	5c9b      	ldrb	r3, [r3, r2]
 800e82c:	2b22      	cmp	r3, #34	; 0x22
 800e82e:	d012      	beq.n	800e856 <searchB+0x82>
 800e830:	2b22      	cmp	r3, #34	; 0x22
 800e832:	dc02      	bgt.n	800e83a <searchB+0x66>
 800e834:	2b11      	cmp	r3, #17
 800e836:	d01d      	beq.n	800e874 <searchB+0xa0>
 800e838:	e023      	b.n	800e882 <searchB+0xae>
 800e83a:	2b44      	cmp	r3, #68	; 0x44
 800e83c:	d004      	beq.n	800e848 <searchB+0x74>
 800e83e:	2b88      	cmp	r3, #136	; 0x88
 800e840:	d11f      	bne.n	800e882 <searchB+0xae>
			//----a前進----
			case 0x88:
				one_sectionU();
 800e842:	f7f7 fd85 	bl	8006350 <one_sectionU>
				break;
 800e846:	e01c      	b.n	800e882 <searchB+0xae>
			//----a右折----
			case 0x44:
				half_sectionD();
 800e848:	f7f7 f9fe 	bl	8005c48 <half_sectionD>
				rotate_R90();
 800e84c:	f7f7 fd98 	bl	8006380 <rotate_R90>
				half_sectionA();
 800e850:	f7f7 f994 	bl	8005b7c <half_sectionA>
				break;
 800e854:	e015      	b.n	800e882 <searchB+0xae>
			//----180回転----
			case 0x22:
				half_sectionD();
 800e856:	f7f7 f9f7 	bl	8005c48 <half_sectionD>
				rotate_180();
 800e85a:	f7f7 ff49 	bl	80066f0 <rotate_180>
				if(wall_info & 0x88){
 800e85e:	4b1c      	ldr	r3, [pc, #112]	; (800e8d0 <searchB+0xfc>)
 800e860:	781b      	ldrb	r3, [r3, #0]
 800e862:	f003 0388 	and.w	r3, r3, #136	; 0x88
 800e866:	2b00      	cmp	r3, #0
 800e868:	d001      	beq.n	800e86e <searchB+0x9a>
					set_position();
 800e86a:	f7f7 f81f 	bl	80058ac <set_position>
				}
				half_sectionA();
 800e86e:	f7f7 f985 	bl	8005b7c <half_sectionA>
				break;
 800e872:	e006      	b.n	800e882 <searchB+0xae>
			//----a左折----
			case 0x11:
				half_sectionD();
 800e874:	f7f7 f9e8 	bl	8005c48 <half_sectionD>
				rotate_L90();
 800e878:	f7f7 fe5e 	bl	8006538 <rotate_L90>
				half_sectionA();
 800e87c:	f7f7 f97e 	bl	8005b7c <half_sectionA>
				break;
 800e880:	bf00      	nop
		}
		adv_pos();
 800e882:	f001 f819 	bl	800f8b8 <adv_pos>
		conf_route();
 800e886:	f001 f851 	bl	800f92c <conf_route>

	}while((mouse.x != goal_x) || (mouse.y != goal_y));
 800e88a:	4b14      	ldr	r3, [pc, #80]	; (800e8dc <searchB+0x108>)
 800e88c:	781b      	ldrb	r3, [r3, #0]
 800e88e:	b2da      	uxtb	r2, r3
 800e890:	4b13      	ldr	r3, [pc, #76]	; (800e8e0 <searchB+0x10c>)
 800e892:	781b      	ldrb	r3, [r3, #0]
 800e894:	429a      	cmp	r2, r3
 800e896:	d1c0      	bne.n	800e81a <searchB+0x46>
 800e898:	4b10      	ldr	r3, [pc, #64]	; (800e8dc <searchB+0x108>)
 800e89a:	785b      	ldrb	r3, [r3, #1]
 800e89c:	b2da      	uxtb	r2, r3
 800e89e:	4b11      	ldr	r3, [pc, #68]	; (800e8e4 <searchB+0x110>)
 800e8a0:	781b      	ldrb	r3, [r3, #0]
 800e8a2:	429a      	cmp	r2, r3
 800e8a4:	d1b9      	bne.n	800e81a <searchB+0x46>

	half_sectionD();
 800e8a6:	f7f7 f9cf 	bl	8005c48 <half_sectionD>

	HAL_Delay(500);
 800e8aa:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800e8ae:	f7f2 fbb5 	bl	800101c <HAL_Delay>
	rotate_180();											//180度回転
 800e8b2:	f7f7 ff1d 	bl	80066f0 <rotate_180>

	if(!MF.FLAG.SCND){
 800e8b6:	4b05      	ldr	r3, [pc, #20]	; (800e8cc <searchB+0xf8>)
 800e8b8:	881b      	ldrh	r3, [r3, #0]
 800e8ba:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800e8be:	b2db      	uxtb	r3, r3
 800e8c0:	2b00      	cmp	r3, #0
 800e8c2:	d101      	bne.n	800e8c8 <searchB+0xf4>
		store_map_in_eeprom();
 800e8c4:	f002 ff52 	bl	801176c <store_map_in_eeprom>
	}
}
 800e8c8:	bf00      	nop
 800e8ca:	bd80      	pop	{r7, pc}
 800e8cc:	20000f68 	.word	0x20000f68
 800e8d0:	200002c8 	.word	0x200002c8
 800e8d4:	200015d0 	.word	0x200015d0
 800e8d8:	20000c54 	.word	0x20000c54
 800e8dc:	20000c0c 	.word	0x20000c0c
 800e8e0:	20000bb0 	.word	0x20000bb0
 800e8e4:	20000b4c 	.word	0x20000b4c

0800e8e8 <searchC>:
//searchC
//aスラローム走行でgoal座標に進む
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void searchC(){
 800e8e8:	b590      	push	{r4, r7, lr}
 800e8ea:	b083      	sub	sp, #12
 800e8ec:	af00      	add	r7, sp, #0

	if(MF.FLAG.SCND){
 800e8ee:	4bab      	ldr	r3, [pc, #684]	; (800eb9c <searchC+0x2b4>)
 800e8f0:	881b      	ldrh	r3, [r3, #0]
 800e8f2:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800e8f6:	b2db      	uxtb	r3, r3
 800e8f8:	2b00      	cmp	r3, #0
 800e8fa:	d001      	beq.n	800e900 <searchC+0x18>
		load_map_from_eeprom();
 800e8fc:	f002 ff70 	bl	80117e0 <load_map_from_eeprom>
	}

	//====aスタート位置壁情報取得====
	if(!MF.FLAG.SCND)get_wall_info();										//a壁情報の初期化, 後壁はなくなる
 800e900:	4ba6      	ldr	r3, [pc, #664]	; (800eb9c <searchC+0x2b4>)
 800e902:	881b      	ldrh	r3, [r3, #0]
 800e904:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800e908:	b2db      	uxtb	r3, r3
 800e90a:	2b00      	cmp	r3, #0
 800e90c:	d101      	bne.n	800e912 <searchC+0x2a>
 800e90e:	f002 ffdf 	bl	80118d0 <get_wall_info>
	if(!MF.FLAG.SCND)wall_info &= ~0x88;									//a前壁は存在するはずがないので削除する
 800e912:	4ba2      	ldr	r3, [pc, #648]	; (800eb9c <searchC+0x2b4>)
 800e914:	881b      	ldrh	r3, [r3, #0]
 800e916:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800e91a:	b2db      	uxtb	r3, r3
 800e91c:	2b00      	cmp	r3, #0
 800e91e:	d106      	bne.n	800e92e <searchC+0x46>
 800e920:	4b9f      	ldr	r3, [pc, #636]	; (800eba0 <searchC+0x2b8>)
 800e922:	781b      	ldrb	r3, [r3, #0]
 800e924:	f003 0377 	and.w	r3, r3, #119	; 0x77
 800e928:	b2da      	uxtb	r2, r3
 800e92a:	4b9d      	ldr	r3, [pc, #628]	; (800eba0 <searchC+0x2b8>)
 800e92c:	701a      	strb	r2, [r3, #0]
	if(!MF.FLAG.SCND)write_map();											//a壁情報を地図に記入
 800e92e:	4b9b      	ldr	r3, [pc, #620]	; (800eb9c <searchC+0x2b4>)
 800e930:	881b      	ldrh	r3, [r3, #0]
 800e932:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800e936:	b2db      	uxtb	r3, r3
 800e938:	2b00      	cmp	r3, #0
 800e93a:	d101      	bne.n	800e940 <searchC+0x58>
 800e93c:	f001 f880 	bl	800fa40 <write_map>

	if(MF2.FLAG.GOAL){
 800e940:	4b98      	ldr	r3, [pc, #608]	; (800eba4 <searchC+0x2bc>)
 800e942:	881b      	ldrh	r3, [r3, #0]
 800e944:	f3c3 2300 	ubfx	r3, r3, #8, #1
 800e948:	b2db      	uxtb	r3, r3
 800e94a:	2b00      	cmp	r3, #0
 800e94c:	d00b      	beq.n	800e966 <searchC+0x7e>
//		HAL_Delay(500);
		rotate_180();											//180度回転
 800e94e:	f7f7 fecf 	bl	80066f0 <rotate_180>
//		driveC2(SETPOS_BACK);         							//a尻を当てる程度に後退。回転後に停止する
//		degree_z = target_degree_z;
//		start_mode = 0;
		start_mode = 1;
 800e952:	4b95      	ldr	r3, [pc, #596]	; (800eba8 <searchC+0x2c0>)
 800e954:	2201      	movs	r2, #1
 800e956:	701a      	strb	r2, [r3, #0]
		goal_mode = 1;
 800e958:	4b94      	ldr	r3, [pc, #592]	; (800ebac <searchC+0x2c4>)
 800e95a:	2201      	movs	r2, #1
 800e95c:	701a      	strb	r2, [r3, #0]
		HAL_Delay(500);
 800e95e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800e962:	f7f2 fb5b 	bl	800101c <HAL_Delay>
	if(!MF.FLAG.SCND || !MF2.FLAG.GOAL)wall_info &= ~0x88;					//a前壁は存在するはずがないので削除する
	if(!MF.FLAG.SCND || !MF2.FLAG.GOAL)write_map();							//a壁情報を地図に記入
*/

	//====a前に壁が無い想定で問答無用で前進====
	start_sectionA();
 800e966:	f7f6 ffd5 	bl	8005914 <start_sectionA>
	adv_pos();
 800e96a:	f000 ffa5 	bl	800f8b8 <adv_pos>

	//====a歩数マップ・経路作成====
	if(!MF.FLAG.SCND)write_map();											//a壁情報を地図に記入
 800e96e:	4b8b      	ldr	r3, [pc, #556]	; (800eb9c <searchC+0x2b4>)
 800e970:	881b      	ldrh	r3, [r3, #0]
 800e972:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800e976:	b2db      	uxtb	r3, r3
 800e978:	2b00      	cmp	r3, #0
 800e97a:	d101      	bne.n	800e980 <searchC+0x98>
 800e97c:	f001 f860 	bl	800fa40 <write_map>
	r_cnt = 0;																//a経路カウンタの初期化
 800e980:	4b8b      	ldr	r3, [pc, #556]	; (800ebb0 <searchC+0x2c8>)
 800e982:	2200      	movs	r2, #0
 800e984:	701a      	strb	r2, [r3, #0]
	make_smap();															//a歩数マップ作成
 800e986:	f001 fa4f 	bl	800fe28 <make_smap>
	make_route();															//a最短経路探索（route配列に動作が格納される）
 800e98a:	f001 fe0b 	bl	80105a4 <make_route>
	uint8_t x, y;															//X，Y座標

	//====a探索走行====
	do{
		//----a進行----
		switch(route[r_cnt++]){												//route配列によって進行を決定。経路カウンタを進める
 800e98e:	4b88      	ldr	r3, [pc, #544]	; (800ebb0 <searchC+0x2c8>)
 800e990:	781b      	ldrb	r3, [r3, #0]
 800e992:	1c5a      	adds	r2, r3, #1
 800e994:	b2d1      	uxtb	r1, r2
 800e996:	4a86      	ldr	r2, [pc, #536]	; (800ebb0 <searchC+0x2c8>)
 800e998:	7011      	strb	r1, [r2, #0]
 800e99a:	461a      	mov	r2, r3
 800e99c:	4b85      	ldr	r3, [pc, #532]	; (800ebb4 <searchC+0x2cc>)
 800e99e:	5c9b      	ldrb	r3, [r3, r2]
 800e9a0:	2b22      	cmp	r3, #34	; 0x22
 800e9a2:	d07f      	beq.n	800eaa4 <searchC+0x1bc>
 800e9a4:	2b22      	cmp	r3, #34	; 0x22
 800e9a6:	dc03      	bgt.n	800e9b0 <searchC+0xc8>
 800e9a8:	2b11      	cmp	r3, #17
 800e9aa:	f000 808b 	beq.w	800eac4 <searchC+0x1dc>
 800e9ae:	e08c      	b.n	800eaca <searchC+0x1e2>
 800e9b0:	2b44      	cmp	r3, #68	; 0x44
 800e9b2:	d074      	beq.n	800ea9e <searchC+0x1b6>
 800e9b4:	2b88      	cmp	r3, #136	; 0x88
 800e9b6:	f040 8088 	bne.w	800eaca <searchC+0x1e2>
			//----a前進----
			case 0x88:
				if(route[r_cnt] == 0x88 && MF.FLAG.ACCL2){
 800e9ba:	4b7d      	ldr	r3, [pc, #500]	; (800ebb0 <searchC+0x2c8>)
 800e9bc:	781b      	ldrb	r3, [r3, #0]
 800e9be:	461a      	mov	r2, r3
 800e9c0:	4b7c      	ldr	r3, [pc, #496]	; (800ebb4 <searchC+0x2cc>)
 800e9c2:	5c9b      	ldrb	r3, [r3, r2]
 800e9c4:	2b88      	cmp	r3, #136	; 0x88
 800e9c6:	d158      	bne.n	800ea7a <searchC+0x192>
 800e9c8:	4b74      	ldr	r3, [pc, #464]	; (800eb9c <searchC+0x2b4>)
 800e9ca:	881b      	ldrh	r3, [r3, #0]
 800e9cc:	f3c3 2340 	ubfx	r3, r3, #9, #1
 800e9d0:	b2db      	uxtb	r3, r3
 800e9d2:	2b00      	cmp	r3, #0
 800e9d4:	d051      	beq.n	800ea7a <searchC+0x192>
					x = mouse.x;
 800e9d6:	4b78      	ldr	r3, [pc, #480]	; (800ebb8 <searchC+0x2d0>)
 800e9d8:	781b      	ldrb	r3, [r3, #0]
 800e9da:	70fb      	strb	r3, [r7, #3]
					y = mouse.y;
 800e9dc:	4b76      	ldr	r3, [pc, #472]	; (800ebb8 <searchC+0x2d0>)
 800e9de:	785b      	ldrb	r3, [r3, #1]
 800e9e0:	70bb      	strb	r3, [r7, #2]
					adv_pos();
 800e9e2:	f000 ff69 	bl	800f8b8 <adv_pos>
					if((map[mouse.y][mouse.x] & 0x0f) == (map[mouse.y][mouse.x]>>4)){
 800e9e6:	4b74      	ldr	r3, [pc, #464]	; (800ebb8 <searchC+0x2d0>)
 800e9e8:	785b      	ldrb	r3, [r3, #1]
 800e9ea:	b2db      	uxtb	r3, r3
 800e9ec:	4618      	mov	r0, r3
 800e9ee:	4b72      	ldr	r3, [pc, #456]	; (800ebb8 <searchC+0x2d0>)
 800e9f0:	781b      	ldrb	r3, [r3, #0]
 800e9f2:	b2db      	uxtb	r3, r3
 800e9f4:	4619      	mov	r1, r3
 800e9f6:	4a71      	ldr	r2, [pc, #452]	; (800ebbc <searchC+0x2d4>)
 800e9f8:	0103      	lsls	r3, r0, #4
 800e9fa:	4413      	add	r3, r2
 800e9fc:	440b      	add	r3, r1
 800e9fe:	781b      	ldrb	r3, [r3, #0]
 800ea00:	f003 030f 	and.w	r3, r3, #15
 800ea04:	4a6c      	ldr	r2, [pc, #432]	; (800ebb8 <searchC+0x2d0>)
 800ea06:	7852      	ldrb	r2, [r2, #1]
 800ea08:	b2d2      	uxtb	r2, r2
 800ea0a:	4614      	mov	r4, r2
 800ea0c:	4a6a      	ldr	r2, [pc, #424]	; (800ebb8 <searchC+0x2d0>)
 800ea0e:	7812      	ldrb	r2, [r2, #0]
 800ea10:	b2d2      	uxtb	r2, r2
 800ea12:	4610      	mov	r0, r2
 800ea14:	4969      	ldr	r1, [pc, #420]	; (800ebbc <searchC+0x2d4>)
 800ea16:	0122      	lsls	r2, r4, #4
 800ea18:	440a      	add	r2, r1
 800ea1a:	4402      	add	r2, r0
 800ea1c:	7812      	ldrb	r2, [r2, #0]
 800ea1e:	0912      	lsrs	r2, r2, #4
 800ea20:	b2d2      	uxtb	r2, r2
 800ea22:	4293      	cmp	r3, r2
 800ea24:	d111      	bne.n	800ea4a <searchC+0x162>
						if(!MF2.FLAG.HACCEL){
 800ea26:	4b5f      	ldr	r3, [pc, #380]	; (800eba4 <searchC+0x2bc>)
 800ea28:	881b      	ldrh	r3, [r3, #0]
 800ea2a:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800ea2e:	b2db      	uxtb	r3, r3
 800ea30:	2b00      	cmp	r3, #0
 800ea32:	d107      	bne.n	800ea44 <searchC+0x15c>
							one_sectionA();
 800ea34:	f7f7 fa44 	bl	8005ec0 <one_sectionA>
							MF2.FLAG.HACCEL = 1;
 800ea38:	4a5a      	ldr	r2, [pc, #360]	; (800eba4 <searchC+0x2bc>)
 800ea3a:	8813      	ldrh	r3, [r2, #0]
 800ea3c:	f043 0302 	orr.w	r3, r3, #2
 800ea40:	8013      	strh	r3, [r2, #0]
 800ea42:	e013      	b.n	800ea6c <searchC+0x184>
						}else{
							one_sectionU();
 800ea44:	f7f7 fc84 	bl	8006350 <one_sectionU>
 800ea48:	e010      	b.n	800ea6c <searchC+0x184>
						}
					}else if(MF2.FLAG.HACCEL){
 800ea4a:	4b56      	ldr	r3, [pc, #344]	; (800eba4 <searchC+0x2bc>)
 800ea4c:	881b      	ldrh	r3, [r3, #0]
 800ea4e:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800ea52:	b2db      	uxtb	r3, r3
 800ea54:	2b00      	cmp	r3, #0
 800ea56:	d007      	beq.n	800ea68 <searchC+0x180>
						one_sectionD();
 800ea58:	f7f7 fabe 	bl	8005fd8 <one_sectionD>
						MF2.FLAG.HACCEL = 0;
 800ea5c:	4a51      	ldr	r2, [pc, #324]	; (800eba4 <searchC+0x2bc>)
 800ea5e:	8813      	ldrh	r3, [r2, #0]
 800ea60:	f36f 0341 	bfc	r3, #1, #1
 800ea64:	8013      	strh	r3, [r2, #0]
 800ea66:	e001      	b.n	800ea6c <searchC+0x184>
					}else{
						one_sectionU();
 800ea68:	f7f7 fc72 	bl	8006350 <one_sectionU>
					}
					mouse.x = x;
 800ea6c:	4a52      	ldr	r2, [pc, #328]	; (800ebb8 <searchC+0x2d0>)
 800ea6e:	78fb      	ldrb	r3, [r7, #3]
 800ea70:	7013      	strb	r3, [r2, #0]
					mouse.y = y;
 800ea72:	4a51      	ldr	r2, [pc, #324]	; (800ebb8 <searchC+0x2d0>)
 800ea74:	78bb      	ldrb	r3, [r7, #2]
 800ea76:	7053      	strb	r3, [r2, #1]
					one_sectionD();
					MF2.FLAG.HACCEL = 0;
				}else{
					one_sectionU();
				}
				break;
 800ea78:	e027      	b.n	800eaca <searchC+0x1e2>
				}else if(MF2.FLAG.HACCEL){
 800ea7a:	4b4a      	ldr	r3, [pc, #296]	; (800eba4 <searchC+0x2bc>)
 800ea7c:	881b      	ldrh	r3, [r3, #0]
 800ea7e:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800ea82:	b2db      	uxtb	r3, r3
 800ea84:	2b00      	cmp	r3, #0
 800ea86:	d007      	beq.n	800ea98 <searchC+0x1b0>
					one_sectionD();
 800ea88:	f7f7 faa6 	bl	8005fd8 <one_sectionD>
					MF2.FLAG.HACCEL = 0;
 800ea8c:	4a45      	ldr	r2, [pc, #276]	; (800eba4 <searchC+0x2bc>)
 800ea8e:	8813      	ldrh	r3, [r2, #0]
 800ea90:	f36f 0341 	bfc	r3, #1, #1
 800ea94:	8013      	strh	r3, [r2, #0]
				break;
 800ea96:	e018      	b.n	800eaca <searchC+0x1e2>
					one_sectionU();
 800ea98:	f7f7 fc5a 	bl	8006350 <one_sectionU>
				break;
 800ea9c:	e015      	b.n	800eaca <searchC+0x1e2>
			//----a右折スラローム----
			case 0x44:
				slalom_R90();
 800ea9e:	f7f7 feff 	bl	80068a0 <slalom_R90>
				break;
 800eaa2:	e012      	b.n	800eaca <searchC+0x1e2>
			//----180回転----
			case 0x22:
				half_sectionD();
 800eaa4:	f7f7 f8d0 	bl	8005c48 <half_sectionD>
				rotate_180();
 800eaa8:	f7f7 fe22 	bl	80066f0 <rotate_180>
				if(wall_info & 0x88){
 800eaac:	4b3c      	ldr	r3, [pc, #240]	; (800eba0 <searchC+0x2b8>)
 800eaae:	781b      	ldrb	r3, [r3, #0]
 800eab0:	f003 0388 	and.w	r3, r3, #136	; 0x88
 800eab4:	2b00      	cmp	r3, #0
 800eab6:	d002      	beq.n	800eabe <searchC+0x1d6>
					set_position();
 800eab8:	f7f6 fef8 	bl	80058ac <set_position>
				}else{
					half_sectionA();
				}
				break;
 800eabc:	e005      	b.n	800eaca <searchC+0x1e2>
					half_sectionA();
 800eabe:	f7f7 f85d 	bl	8005b7c <half_sectionA>
				break;
 800eac2:	e002      	b.n	800eaca <searchC+0x1e2>
			//----a左折スラローム----
			case 0x11:
				slalom_L90();
 800eac4:	f7f8 f802 	bl	8006acc <slalom_L90>
				break;
 800eac8:	bf00      	nop
		}
		adv_pos();
 800eaca:	f000 fef5 	bl	800f8b8 <adv_pos>
		if(!MF.FLAG.SCND)conf_route();
 800eace:	4b33      	ldr	r3, [pc, #204]	; (800eb9c <searchC+0x2b4>)
 800ead0:	881b      	ldrh	r3, [r3, #0]
 800ead2:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800ead6:	b2db      	uxtb	r3, r3
 800ead8:	2b00      	cmp	r3, #0
 800eada:	d101      	bne.n	800eae0 <searchC+0x1f8>
 800eadc:	f000 ff26 	bl	800f92c <conf_route>

//	}while((mouse.x != goal_x) || (mouse.y != goal_y));
	}while(smap[mouse.y][mouse.x] != 0);
 800eae0:	4b35      	ldr	r3, [pc, #212]	; (800ebb8 <searchC+0x2d0>)
 800eae2:	785b      	ldrb	r3, [r3, #1]
 800eae4:	b2db      	uxtb	r3, r3
 800eae6:	4618      	mov	r0, r3
 800eae8:	4b33      	ldr	r3, [pc, #204]	; (800ebb8 <searchC+0x2d0>)
 800eaea:	781b      	ldrb	r3, [r3, #0]
 800eaec:	b2db      	uxtb	r3, r3
 800eaee:	4619      	mov	r1, r3
 800eaf0:	4a33      	ldr	r2, [pc, #204]	; (800ebc0 <searchC+0x2d8>)
 800eaf2:	0103      	lsls	r3, r0, #4
 800eaf4:	440b      	add	r3, r1
 800eaf6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800eafa:	2b00      	cmp	r3, #0
 800eafc:	f47f af47 	bne.w	800e98e <searchC+0xa6>

	for(int j=0; j<goal_mode-1; j++){
 800eb00:	2300      	movs	r3, #0
 800eb02:	607b      	str	r3, [r7, #4]
 800eb04:	e006      	b.n	800eb14 <searchC+0x22c>
		one_sectionU();
 800eb06:	f7f7 fc23 	bl	8006350 <one_sectionU>
		adv_pos();
 800eb0a:	f000 fed5 	bl	800f8b8 <adv_pos>
	for(int j=0; j<goal_mode-1; j++){
 800eb0e:	687b      	ldr	r3, [r7, #4]
 800eb10:	3301      	adds	r3, #1
 800eb12:	607b      	str	r3, [r7, #4]
 800eb14:	4b25      	ldr	r3, [pc, #148]	; (800ebac <searchC+0x2c4>)
 800eb16:	781b      	ldrb	r3, [r3, #0]
 800eb18:	3b01      	subs	r3, #1
 800eb1a:	687a      	ldr	r2, [r7, #4]
 800eb1c:	429a      	cmp	r2, r3
 800eb1e:	dbf2      	blt.n	800eb06 <searchC+0x21e>
	}
	half_sectionD();
 800eb20:	f7f7 f892 	bl	8005c48 <half_sectionD>

	set_positionF();
 800eb24:	f7f6 fed8 	bl	80058d8 <set_positionF>

	MF2.FLAG.GOAL = (MF2.FLAG.GOAL+1)%2;
 800eb28:	4b1e      	ldr	r3, [pc, #120]	; (800eba4 <searchC+0x2bc>)
 800eb2a:	881b      	ldrh	r3, [r3, #0]
 800eb2c:	f3c3 2300 	ubfx	r3, r3, #8, #1
 800eb30:	b2db      	uxtb	r3, r3
 800eb32:	3301      	adds	r3, #1
 800eb34:	2b00      	cmp	r3, #0
 800eb36:	f003 0301 	and.w	r3, r3, #1
 800eb3a:	bfb8      	it	lt
 800eb3c:	425b      	neglt	r3, r3
 800eb3e:	f003 0301 	and.w	r3, r3, #1
 800eb42:	b2d9      	uxtb	r1, r3
 800eb44:	4a17      	ldr	r2, [pc, #92]	; (800eba4 <searchC+0x2bc>)
 800eb46:	8813      	ldrh	r3, [r2, #0]
 800eb48:	f361 2308 	bfi	r3, r1, #8, #1
 800eb4c:	8013      	strh	r3, [r2, #0]
	if(!MF2.FLAG.GOAL){
 800eb4e:	4b15      	ldr	r3, [pc, #84]	; (800eba4 <searchC+0x2bc>)
 800eb50:	881b      	ldrh	r3, [r3, #0]
 800eb52:	f3c3 2300 	ubfx	r3, r3, #8, #1
 800eb56:	b2db      	uxtb	r3, r3
 800eb58:	2b00      	cmp	r3, #0
 800eb5a:	d112      	bne.n	800eb82 <searchC+0x29a>
		HAL_Delay(500);
 800eb5c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800eb60:	f7f2 fa5c 	bl	800101c <HAL_Delay>
		rotate_180();										//180度回転
 800eb64:	f7f7 fdc4 	bl	80066f0 <rotate_180>
		driveC2(SETPOS_BACK);         						//a尻を当てる程度に後退。回転後に停止する
 800eb68:	2064      	movs	r0, #100	; 0x64
 800eb6a:	f7f6 fc49 	bl	8005400 <driveC2>
		degree_z = target_degree_z;
 800eb6e:	4b15      	ldr	r3, [pc, #84]	; (800ebc4 <searchC+0x2dc>)
 800eb70:	681b      	ldr	r3, [r3, #0]
 800eb72:	4a15      	ldr	r2, [pc, #84]	; (800ebc8 <searchC+0x2e0>)
 800eb74:	6013      	str	r3, [r2, #0]
		start_mode = 0;
 800eb76:	4b0c      	ldr	r3, [pc, #48]	; (800eba8 <searchC+0x2c0>)
 800eb78:	2200      	movs	r2, #0
 800eb7a:	701a      	strb	r2, [r3, #0]
		goal_mode = 1;
 800eb7c:	4b0b      	ldr	r3, [pc, #44]	; (800ebac <searchC+0x2c4>)
 800eb7e:	2201      	movs	r2, #1
 800eb80:	701a      	strb	r2, [r3, #0]
	}

	if(!MF.FLAG.SCND){
 800eb82:	4b06      	ldr	r3, [pc, #24]	; (800eb9c <searchC+0x2b4>)
 800eb84:	881b      	ldrh	r3, [r3, #0]
 800eb86:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800eb8a:	b2db      	uxtb	r3, r3
 800eb8c:	2b00      	cmp	r3, #0
 800eb8e:	d101      	bne.n	800eb94 <searchC+0x2ac>
		store_map_in_eeprom();
 800eb90:	f002 fdec 	bl	801176c <store_map_in_eeprom>
	}
}
 800eb94:	bf00      	nop
 800eb96:	370c      	adds	r7, #12
 800eb98:	46bd      	mov	sp, r7
 800eb9a:	bd90      	pop	{r4, r7, pc}
 800eb9c:	20000f68 	.word	0x20000f68
 800eba0:	200002c8 	.word	0x200002c8
 800eba4:	20000f64 	.word	0x20000f64
 800eba8:	200015c8 	.word	0x200015c8
 800ebac:	20000bb1 	.word	0x20000bb1
 800ebb0:	200015d0 	.word	0x200015d0
 800ebb4:	20000c54 	.word	0x20000c54
 800ebb8:	20000c0c 	.word	0x20000c0c
 800ebbc:	200001ac 	.word	0x200001ac
 800ebc0:	20000d60 	.word	0x20000d60
 800ebc4:	20000bf8 	.word	0x20000bf8
 800ebc8:	20000b5c 	.word	0x20000b5c

0800ebcc <searchC2>:
//searchC2
//aスラローム走行でgoal座標に進む　重ね探索用
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void searchC2(){
 800ebcc:	b590      	push	{r4, r7, lr}
 800ebce:	b083      	sub	sp, #12
 800ebd0:	af00      	add	r7, sp, #0

	if(MF.FLAG.SRC2){
 800ebd2:	4bab      	ldr	r3, [pc, #684]	; (800ee80 <searchC2+0x2b4>)
 800ebd4:	881b      	ldrh	r3, [r3, #0]
 800ebd6:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800ebda:	b2db      	uxtb	r3, r3
 800ebdc:	2b00      	cmp	r3, #0
 800ebde:	d001      	beq.n	800ebe4 <searchC2+0x18>
		load_map_from_eeprom();
 800ebe0:	f002 fdfe 	bl	80117e0 <load_map_from_eeprom>
	}

	//====aスタート位置壁情報取得====
	if(!MF.FLAG.SCND)get_wall_info();										//a壁情報の初期化, 後壁はなくなる
 800ebe4:	4ba6      	ldr	r3, [pc, #664]	; (800ee80 <searchC2+0x2b4>)
 800ebe6:	881b      	ldrh	r3, [r3, #0]
 800ebe8:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800ebec:	b2db      	uxtb	r3, r3
 800ebee:	2b00      	cmp	r3, #0
 800ebf0:	d101      	bne.n	800ebf6 <searchC2+0x2a>
 800ebf2:	f002 fe6d 	bl	80118d0 <get_wall_info>
	if(!MF.FLAG.SCND)wall_info &= ~0x88;									//a前壁は存在するはずがないので削除する
 800ebf6:	4ba2      	ldr	r3, [pc, #648]	; (800ee80 <searchC2+0x2b4>)
 800ebf8:	881b      	ldrh	r3, [r3, #0]
 800ebfa:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800ebfe:	b2db      	uxtb	r3, r3
 800ec00:	2b00      	cmp	r3, #0
 800ec02:	d106      	bne.n	800ec12 <searchC2+0x46>
 800ec04:	4b9f      	ldr	r3, [pc, #636]	; (800ee84 <searchC2+0x2b8>)
 800ec06:	781b      	ldrb	r3, [r3, #0]
 800ec08:	f003 0377 	and.w	r3, r3, #119	; 0x77
 800ec0c:	b2da      	uxtb	r2, r3
 800ec0e:	4b9d      	ldr	r3, [pc, #628]	; (800ee84 <searchC2+0x2b8>)
 800ec10:	701a      	strb	r2, [r3, #0]
	if(!MF.FLAG.SCND)write_map();											//a壁情報を地図に記入
 800ec12:	4b9b      	ldr	r3, [pc, #620]	; (800ee80 <searchC2+0x2b4>)
 800ec14:	881b      	ldrh	r3, [r3, #0]
 800ec16:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800ec1a:	b2db      	uxtb	r3, r3
 800ec1c:	2b00      	cmp	r3, #0
 800ec1e:	d101      	bne.n	800ec24 <searchC2+0x58>
 800ec20:	f000 ff0e 	bl	800fa40 <write_map>

	if(MF2.FLAG.GOAL){
 800ec24:	4b98      	ldr	r3, [pc, #608]	; (800ee88 <searchC2+0x2bc>)
 800ec26:	881b      	ldrh	r3, [r3, #0]
 800ec28:	f3c3 2300 	ubfx	r3, r3, #8, #1
 800ec2c:	b2db      	uxtb	r3, r3
 800ec2e:	2b00      	cmp	r3, #0
 800ec30:	d00b      	beq.n	800ec4a <searchC2+0x7e>
		HAL_Delay(500);
 800ec32:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800ec36:	f7f2 f9f1 	bl	800101c <HAL_Delay>
		rotate_180();											//180度回転
 800ec3a:	f7f7 fd59 	bl	80066f0 <rotate_180>
//		driveC2(SETPOS_BACK);         							//a尻を当てる程度に後退。回転後に停止する
//		degree_z = target_degree_z;
//		start_mode = 0;
		start_mode = 1;
 800ec3e:	4b93      	ldr	r3, [pc, #588]	; (800ee8c <searchC2+0x2c0>)
 800ec40:	2201      	movs	r2, #1
 800ec42:	701a      	strb	r2, [r3, #0]
		goal_mode = 1;
 800ec44:	4b92      	ldr	r3, [pc, #584]	; (800ee90 <searchC2+0x2c4>)
 800ec46:	2201      	movs	r2, #1
 800ec48:	701a      	strb	r2, [r3, #0]
	}

	//====a前に壁が無い想定で問答無用で前進====
	start_sectionA();
 800ec4a:	f7f6 fe63 	bl	8005914 <start_sectionA>
	adv_pos();
 800ec4e:	f000 fe33 	bl	800f8b8 <adv_pos>

	//====a歩数マップ・経路作成====
	if(!MF.FLAG.SCND)write_map();											//a壁情報を地図に記入
 800ec52:	4b8b      	ldr	r3, [pc, #556]	; (800ee80 <searchC2+0x2b4>)
 800ec54:	881b      	ldrh	r3, [r3, #0]
 800ec56:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800ec5a:	b2db      	uxtb	r3, r3
 800ec5c:	2b00      	cmp	r3, #0
 800ec5e:	d101      	bne.n	800ec64 <searchC2+0x98>
 800ec60:	f000 feee 	bl	800fa40 <write_map>
	r_cnt = 0;																//a経路カウンタの初期化
 800ec64:	4b8b      	ldr	r3, [pc, #556]	; (800ee94 <searchC2+0x2c8>)
 800ec66:	2200      	movs	r2, #0
 800ec68:	701a      	strb	r2, [r3, #0]
	make_smap();															//a歩数マップ作成
 800ec6a:	f001 f8dd 	bl	800fe28 <make_smap>
	make_route();															//a最短経路探索（route配列に動作が格納される）
 800ec6e:	f001 fc99 	bl	80105a4 <make_route>
	uint8_t x, y;															//X，Y座標

	//====a探索走行====
	do{
		//----a進行----
		switch(route[r_cnt++]){												//route配列によって進行を決定。経路カウンタを進める
 800ec72:	4b88      	ldr	r3, [pc, #544]	; (800ee94 <searchC2+0x2c8>)
 800ec74:	781b      	ldrb	r3, [r3, #0]
 800ec76:	1c5a      	adds	r2, r3, #1
 800ec78:	b2d1      	uxtb	r1, r2
 800ec7a:	4a86      	ldr	r2, [pc, #536]	; (800ee94 <searchC2+0x2c8>)
 800ec7c:	7011      	strb	r1, [r2, #0]
 800ec7e:	461a      	mov	r2, r3
 800ec80:	4b85      	ldr	r3, [pc, #532]	; (800ee98 <searchC2+0x2cc>)
 800ec82:	5c9b      	ldrb	r3, [r3, r2]
 800ec84:	2b22      	cmp	r3, #34	; 0x22
 800ec86:	d07f      	beq.n	800ed88 <searchC2+0x1bc>
 800ec88:	2b22      	cmp	r3, #34	; 0x22
 800ec8a:	dc03      	bgt.n	800ec94 <searchC2+0xc8>
 800ec8c:	2b11      	cmp	r3, #17
 800ec8e:	f000 808b 	beq.w	800eda8 <searchC2+0x1dc>
 800ec92:	e08c      	b.n	800edae <searchC2+0x1e2>
 800ec94:	2b44      	cmp	r3, #68	; 0x44
 800ec96:	d074      	beq.n	800ed82 <searchC2+0x1b6>
 800ec98:	2b88      	cmp	r3, #136	; 0x88
 800ec9a:	f040 8088 	bne.w	800edae <searchC2+0x1e2>
			//----a前進----
			case 0x88:
				if(route[r_cnt] == 0x88 && MF.FLAG.ACCL2){
 800ec9e:	4b7d      	ldr	r3, [pc, #500]	; (800ee94 <searchC2+0x2c8>)
 800eca0:	781b      	ldrb	r3, [r3, #0]
 800eca2:	461a      	mov	r2, r3
 800eca4:	4b7c      	ldr	r3, [pc, #496]	; (800ee98 <searchC2+0x2cc>)
 800eca6:	5c9b      	ldrb	r3, [r3, r2]
 800eca8:	2b88      	cmp	r3, #136	; 0x88
 800ecaa:	d158      	bne.n	800ed5e <searchC2+0x192>
 800ecac:	4b74      	ldr	r3, [pc, #464]	; (800ee80 <searchC2+0x2b4>)
 800ecae:	881b      	ldrh	r3, [r3, #0]
 800ecb0:	f3c3 2340 	ubfx	r3, r3, #9, #1
 800ecb4:	b2db      	uxtb	r3, r3
 800ecb6:	2b00      	cmp	r3, #0
 800ecb8:	d051      	beq.n	800ed5e <searchC2+0x192>
					x = mouse.x;
 800ecba:	4b78      	ldr	r3, [pc, #480]	; (800ee9c <searchC2+0x2d0>)
 800ecbc:	781b      	ldrb	r3, [r3, #0]
 800ecbe:	70fb      	strb	r3, [r7, #3]
					y = mouse.y;
 800ecc0:	4b76      	ldr	r3, [pc, #472]	; (800ee9c <searchC2+0x2d0>)
 800ecc2:	785b      	ldrb	r3, [r3, #1]
 800ecc4:	70bb      	strb	r3, [r7, #2]
					adv_pos();
 800ecc6:	f000 fdf7 	bl	800f8b8 <adv_pos>
					if((map[mouse.y][mouse.x] & 0x0f) == (map[mouse.y][mouse.x]>>4)){
 800ecca:	4b74      	ldr	r3, [pc, #464]	; (800ee9c <searchC2+0x2d0>)
 800eccc:	785b      	ldrb	r3, [r3, #1]
 800ecce:	b2db      	uxtb	r3, r3
 800ecd0:	4618      	mov	r0, r3
 800ecd2:	4b72      	ldr	r3, [pc, #456]	; (800ee9c <searchC2+0x2d0>)
 800ecd4:	781b      	ldrb	r3, [r3, #0]
 800ecd6:	b2db      	uxtb	r3, r3
 800ecd8:	4619      	mov	r1, r3
 800ecda:	4a71      	ldr	r2, [pc, #452]	; (800eea0 <searchC2+0x2d4>)
 800ecdc:	0103      	lsls	r3, r0, #4
 800ecde:	4413      	add	r3, r2
 800ece0:	440b      	add	r3, r1
 800ece2:	781b      	ldrb	r3, [r3, #0]
 800ece4:	f003 030f 	and.w	r3, r3, #15
 800ece8:	4a6c      	ldr	r2, [pc, #432]	; (800ee9c <searchC2+0x2d0>)
 800ecea:	7852      	ldrb	r2, [r2, #1]
 800ecec:	b2d2      	uxtb	r2, r2
 800ecee:	4614      	mov	r4, r2
 800ecf0:	4a6a      	ldr	r2, [pc, #424]	; (800ee9c <searchC2+0x2d0>)
 800ecf2:	7812      	ldrb	r2, [r2, #0]
 800ecf4:	b2d2      	uxtb	r2, r2
 800ecf6:	4610      	mov	r0, r2
 800ecf8:	4969      	ldr	r1, [pc, #420]	; (800eea0 <searchC2+0x2d4>)
 800ecfa:	0122      	lsls	r2, r4, #4
 800ecfc:	440a      	add	r2, r1
 800ecfe:	4402      	add	r2, r0
 800ed00:	7812      	ldrb	r2, [r2, #0]
 800ed02:	0912      	lsrs	r2, r2, #4
 800ed04:	b2d2      	uxtb	r2, r2
 800ed06:	4293      	cmp	r3, r2
 800ed08:	d111      	bne.n	800ed2e <searchC2+0x162>
						if(!MF2.FLAG.HACCEL){
 800ed0a:	4b5f      	ldr	r3, [pc, #380]	; (800ee88 <searchC2+0x2bc>)
 800ed0c:	881b      	ldrh	r3, [r3, #0]
 800ed0e:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800ed12:	b2db      	uxtb	r3, r3
 800ed14:	2b00      	cmp	r3, #0
 800ed16:	d107      	bne.n	800ed28 <searchC2+0x15c>
							one_sectionA();
 800ed18:	f7f7 f8d2 	bl	8005ec0 <one_sectionA>
							MF2.FLAG.HACCEL = 1;
 800ed1c:	4a5a      	ldr	r2, [pc, #360]	; (800ee88 <searchC2+0x2bc>)
 800ed1e:	8813      	ldrh	r3, [r2, #0]
 800ed20:	f043 0302 	orr.w	r3, r3, #2
 800ed24:	8013      	strh	r3, [r2, #0]
 800ed26:	e013      	b.n	800ed50 <searchC2+0x184>
						}else{
							one_sectionU();
 800ed28:	f7f7 fb12 	bl	8006350 <one_sectionU>
 800ed2c:	e010      	b.n	800ed50 <searchC2+0x184>
						}
					}else if(MF2.FLAG.HACCEL){
 800ed2e:	4b56      	ldr	r3, [pc, #344]	; (800ee88 <searchC2+0x2bc>)
 800ed30:	881b      	ldrh	r3, [r3, #0]
 800ed32:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800ed36:	b2db      	uxtb	r3, r3
 800ed38:	2b00      	cmp	r3, #0
 800ed3a:	d007      	beq.n	800ed4c <searchC2+0x180>
						one_sectionD();
 800ed3c:	f7f7 f94c 	bl	8005fd8 <one_sectionD>
						MF2.FLAG.HACCEL = 0;
 800ed40:	4a51      	ldr	r2, [pc, #324]	; (800ee88 <searchC2+0x2bc>)
 800ed42:	8813      	ldrh	r3, [r2, #0]
 800ed44:	f36f 0341 	bfc	r3, #1, #1
 800ed48:	8013      	strh	r3, [r2, #0]
 800ed4a:	e001      	b.n	800ed50 <searchC2+0x184>
					}else{
						one_sectionU();
 800ed4c:	f7f7 fb00 	bl	8006350 <one_sectionU>
					}
					mouse.x = x;
 800ed50:	4a52      	ldr	r2, [pc, #328]	; (800ee9c <searchC2+0x2d0>)
 800ed52:	78fb      	ldrb	r3, [r7, #3]
 800ed54:	7013      	strb	r3, [r2, #0]
					mouse.y = y;
 800ed56:	4a51      	ldr	r2, [pc, #324]	; (800ee9c <searchC2+0x2d0>)
 800ed58:	78bb      	ldrb	r3, [r7, #2]
 800ed5a:	7053      	strb	r3, [r2, #1]
					one_sectionD();
					MF2.FLAG.HACCEL = 0;
				}else{
					one_sectionU();
				}
				break;
 800ed5c:	e027      	b.n	800edae <searchC2+0x1e2>
				}else if(MF2.FLAG.HACCEL){
 800ed5e:	4b4a      	ldr	r3, [pc, #296]	; (800ee88 <searchC2+0x2bc>)
 800ed60:	881b      	ldrh	r3, [r3, #0]
 800ed62:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800ed66:	b2db      	uxtb	r3, r3
 800ed68:	2b00      	cmp	r3, #0
 800ed6a:	d007      	beq.n	800ed7c <searchC2+0x1b0>
					one_sectionD();
 800ed6c:	f7f7 f934 	bl	8005fd8 <one_sectionD>
					MF2.FLAG.HACCEL = 0;
 800ed70:	4a45      	ldr	r2, [pc, #276]	; (800ee88 <searchC2+0x2bc>)
 800ed72:	8813      	ldrh	r3, [r2, #0]
 800ed74:	f36f 0341 	bfc	r3, #1, #1
 800ed78:	8013      	strh	r3, [r2, #0]
				break;
 800ed7a:	e018      	b.n	800edae <searchC2+0x1e2>
					one_sectionU();
 800ed7c:	f7f7 fae8 	bl	8006350 <one_sectionU>
				break;
 800ed80:	e015      	b.n	800edae <searchC2+0x1e2>
			//----a右折スラローム----
			case 0x44:
				slalom_R90();
 800ed82:	f7f7 fd8d 	bl	80068a0 <slalom_R90>
				break;
 800ed86:	e012      	b.n	800edae <searchC2+0x1e2>
			//----180回転----
			case 0x22:
				half_sectionD();
 800ed88:	f7f6 ff5e 	bl	8005c48 <half_sectionD>
				rotate_180();
 800ed8c:	f7f7 fcb0 	bl	80066f0 <rotate_180>
				if(wall_info & 0x88){
 800ed90:	4b3c      	ldr	r3, [pc, #240]	; (800ee84 <searchC2+0x2b8>)
 800ed92:	781b      	ldrb	r3, [r3, #0]
 800ed94:	f003 0388 	and.w	r3, r3, #136	; 0x88
 800ed98:	2b00      	cmp	r3, #0
 800ed9a:	d002      	beq.n	800eda2 <searchC2+0x1d6>
					set_position();
 800ed9c:	f7f6 fd86 	bl	80058ac <set_position>
				}else{
					half_sectionA();
				}
				break;
 800eda0:	e005      	b.n	800edae <searchC2+0x1e2>
					half_sectionA();
 800eda2:	f7f6 feeb 	bl	8005b7c <half_sectionA>
				break;
 800eda6:	e002      	b.n	800edae <searchC2+0x1e2>
			//----a左折スラローム----
			case 0x11:
				slalom_L90();
 800eda8:	f7f7 fe90 	bl	8006acc <slalom_L90>
				break;
 800edac:	bf00      	nop
		}
		adv_pos();
 800edae:	f000 fd83 	bl	800f8b8 <adv_pos>
		if(!MF.FLAG.SCND)conf_route();
 800edb2:	4b33      	ldr	r3, [pc, #204]	; (800ee80 <searchC2+0x2b4>)
 800edb4:	881b      	ldrh	r3, [r3, #0]
 800edb6:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800edba:	b2db      	uxtb	r3, r3
 800edbc:	2b00      	cmp	r3, #0
 800edbe:	d101      	bne.n	800edc4 <searchC2+0x1f8>
 800edc0:	f000 fdb4 	bl	800f92c <conf_route>

//	}while((mouse.x != goal_x) || (mouse.y != goal_y));
	}while(smap[mouse.y][mouse.x] != 0);
 800edc4:	4b35      	ldr	r3, [pc, #212]	; (800ee9c <searchC2+0x2d0>)
 800edc6:	785b      	ldrb	r3, [r3, #1]
 800edc8:	b2db      	uxtb	r3, r3
 800edca:	4618      	mov	r0, r3
 800edcc:	4b33      	ldr	r3, [pc, #204]	; (800ee9c <searchC2+0x2d0>)
 800edce:	781b      	ldrb	r3, [r3, #0]
 800edd0:	b2db      	uxtb	r3, r3
 800edd2:	4619      	mov	r1, r3
 800edd4:	4a33      	ldr	r2, [pc, #204]	; (800eea4 <searchC2+0x2d8>)
 800edd6:	0103      	lsls	r3, r0, #4
 800edd8:	440b      	add	r3, r1
 800edda:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800edde:	2b00      	cmp	r3, #0
 800ede0:	f47f af47 	bne.w	800ec72 <searchC2+0xa6>

	for(int j=0; j<goal_mode-1; j++){
 800ede4:	2300      	movs	r3, #0
 800ede6:	607b      	str	r3, [r7, #4]
 800ede8:	e006      	b.n	800edf8 <searchC2+0x22c>
		one_sectionU();
 800edea:	f7f7 fab1 	bl	8006350 <one_sectionU>
		adv_pos();
 800edee:	f000 fd63 	bl	800f8b8 <adv_pos>
	for(int j=0; j<goal_mode-1; j++){
 800edf2:	687b      	ldr	r3, [r7, #4]
 800edf4:	3301      	adds	r3, #1
 800edf6:	607b      	str	r3, [r7, #4]
 800edf8:	4b25      	ldr	r3, [pc, #148]	; (800ee90 <searchC2+0x2c4>)
 800edfa:	781b      	ldrb	r3, [r3, #0]
 800edfc:	3b01      	subs	r3, #1
 800edfe:	687a      	ldr	r2, [r7, #4]
 800ee00:	429a      	cmp	r2, r3
 800ee02:	dbf2      	blt.n	800edea <searchC2+0x21e>
	}
	half_sectionD();
 800ee04:	f7f6 ff20 	bl	8005c48 <half_sectionD>

	set_positionF();
 800ee08:	f7f6 fd66 	bl	80058d8 <set_positionF>

	MF2.FLAG.GOAL = (MF2.FLAG.GOAL+1)%2;
 800ee0c:	4b1e      	ldr	r3, [pc, #120]	; (800ee88 <searchC2+0x2bc>)
 800ee0e:	881b      	ldrh	r3, [r3, #0]
 800ee10:	f3c3 2300 	ubfx	r3, r3, #8, #1
 800ee14:	b2db      	uxtb	r3, r3
 800ee16:	3301      	adds	r3, #1
 800ee18:	2b00      	cmp	r3, #0
 800ee1a:	f003 0301 	and.w	r3, r3, #1
 800ee1e:	bfb8      	it	lt
 800ee20:	425b      	neglt	r3, r3
 800ee22:	f003 0301 	and.w	r3, r3, #1
 800ee26:	b2d9      	uxtb	r1, r3
 800ee28:	4a17      	ldr	r2, [pc, #92]	; (800ee88 <searchC2+0x2bc>)
 800ee2a:	8813      	ldrh	r3, [r2, #0]
 800ee2c:	f361 2308 	bfi	r3, r1, #8, #1
 800ee30:	8013      	strh	r3, [r2, #0]
	if(!MF2.FLAG.GOAL){
 800ee32:	4b15      	ldr	r3, [pc, #84]	; (800ee88 <searchC2+0x2bc>)
 800ee34:	881b      	ldrh	r3, [r3, #0]
 800ee36:	f3c3 2300 	ubfx	r3, r3, #8, #1
 800ee3a:	b2db      	uxtb	r3, r3
 800ee3c:	2b00      	cmp	r3, #0
 800ee3e:	d112      	bne.n	800ee66 <searchC2+0x29a>
		HAL_Delay(500);
 800ee40:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800ee44:	f7f2 f8ea 	bl	800101c <HAL_Delay>
		rotate_180();										//180度回転
 800ee48:	f7f7 fc52 	bl	80066f0 <rotate_180>
		driveC2(SETPOS_BACK);         						//a尻を当てる程度に後退。回転後に停止する
 800ee4c:	2064      	movs	r0, #100	; 0x64
 800ee4e:	f7f6 fad7 	bl	8005400 <driveC2>
		degree_z = target_degree_z;
 800ee52:	4b15      	ldr	r3, [pc, #84]	; (800eea8 <searchC2+0x2dc>)
 800ee54:	681b      	ldr	r3, [r3, #0]
 800ee56:	4a15      	ldr	r2, [pc, #84]	; (800eeac <searchC2+0x2e0>)
 800ee58:	6013      	str	r3, [r2, #0]
		start_mode = 0;
 800ee5a:	4b0c      	ldr	r3, [pc, #48]	; (800ee8c <searchC2+0x2c0>)
 800ee5c:	2200      	movs	r2, #0
 800ee5e:	701a      	strb	r2, [r3, #0]
		goal_mode = 1;
 800ee60:	4b0b      	ldr	r3, [pc, #44]	; (800ee90 <searchC2+0x2c4>)
 800ee62:	2201      	movs	r2, #1
 800ee64:	701a      	strb	r2, [r3, #0]
	}

	if(!MF.FLAG.SCND){
 800ee66:	4b06      	ldr	r3, [pc, #24]	; (800ee80 <searchC2+0x2b4>)
 800ee68:	881b      	ldrh	r3, [r3, #0]
 800ee6a:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800ee6e:	b2db      	uxtb	r3, r3
 800ee70:	2b00      	cmp	r3, #0
 800ee72:	d101      	bne.n	800ee78 <searchC2+0x2ac>
		store_map_in_eeprom();
 800ee74:	f002 fc7a 	bl	801176c <store_map_in_eeprom>
	}
}
 800ee78:	bf00      	nop
 800ee7a:	370c      	adds	r7, #12
 800ee7c:	46bd      	mov	sp, r7
 800ee7e:	bd90      	pop	{r4, r7, pc}
 800ee80:	20000f68 	.word	0x20000f68
 800ee84:	200002c8 	.word	0x200002c8
 800ee88:	20000f64 	.word	0x20000f64
 800ee8c:	200015c8 	.word	0x200015c8
 800ee90:	20000bb1 	.word	0x20000bb1
 800ee94:	200015d0 	.word	0x200015d0
 800ee98:	20000c54 	.word	0x20000c54
 800ee9c:	20000c0c 	.word	0x20000c0c
 800eea0:	200001ac 	.word	0x200001ac
 800eea4:	20000d60 	.word	0x20000d60
 800eea8:	20000bf8 	.word	0x20000bf8
 800eeac:	20000b5c 	.word	0x20000b5c

0800eeb0 <searchD>:
//searchD
//aスラローム走行+既知区間加速でgoal座標に進む
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void searchD(){
 800eeb0:	b580      	push	{r7, lr}
 800eeb2:	b082      	sub	sp, #8
 800eeb4:	af00      	add	r7, sp, #0

	if(MF.FLAG.SCND){
 800eeb6:	4b6a      	ldr	r3, [pc, #424]	; (800f060 <searchD+0x1b0>)
 800eeb8:	881b      	ldrh	r3, [r3, #0]
 800eeba:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800eebe:	b2db      	uxtb	r3, r3
 800eec0:	2b00      	cmp	r3, #0
 800eec2:	d001      	beq.n	800eec8 <searchD+0x18>
		load_map_from_eeprom();
 800eec4:	f002 fc8c 	bl	80117e0 <load_map_from_eeprom>
//	if(!MF.FLAG.SCND)get_wall_info();										//a壁情報の初期化, 後壁はなくなる
//	if(!MF.FLAG.SCND)wall_info &= ~0x88;									//a前壁は存在するはずがないので削除する
//	if(!MF.FLAG.SCND)write_map();											//a壁情報を地図に記入

	//====a前に壁が無い想定で問答無用で前進====
	start_sectionA();
 800eec8:	f7f6 fd24 	bl	8005914 <start_sectionA>
	adv_pos();
 800eecc:	f000 fcf4 	bl	800f8b8 <adv_pos>

	//====a歩数マップ・経路作成====
//	if(!MF.FLAG.SCND)write_map();											//a壁情報を地図に記入
	r_cnt = 0;												//a経路カウンタの初期化
 800eed0:	4b64      	ldr	r3, [pc, #400]	; (800f064 <searchD+0x1b4>)
 800eed2:	2200      	movs	r2, #0
 800eed4:	701a      	strb	r2, [r3, #0]
	make_smap();											//a歩数マップ作成
 800eed6:	f000 ffa7 	bl	800fe28 <make_smap>
	make_route();											//a最短経路探索（route配列に動作が格納される）
 800eeda:	f001 fb63 	bl	80105a4 <make_route>

	MF2.FLAG.HACCEL = 0;
 800eede:	4a62      	ldr	r2, [pc, #392]	; (800f068 <searchD+0x1b8>)
 800eee0:	8813      	ldrh	r3, [r2, #0]
 800eee2:	f36f 0341 	bfc	r3, #1, #1
 800eee6:	8013      	strh	r3, [r2, #0]

	//====a探索走行====
	do{
		//----a進行----
		switch(route[r_cnt++]){								//route配列によって進行を決定。経路カウンタを進める
 800eee8:	4b5e      	ldr	r3, [pc, #376]	; (800f064 <searchD+0x1b4>)
 800eeea:	781b      	ldrb	r3, [r3, #0]
 800eeec:	1c5a      	adds	r2, r3, #1
 800eeee:	b2d1      	uxtb	r1, r2
 800eef0:	4a5c      	ldr	r2, [pc, #368]	; (800f064 <searchD+0x1b4>)
 800eef2:	7011      	strb	r1, [r2, #0]
 800eef4:	461a      	mov	r2, r3
 800eef6:	4b5d      	ldr	r3, [pc, #372]	; (800f06c <searchD+0x1bc>)
 800eef8:	5c9b      	ldrb	r3, [r3, r2]
 800eefa:	2b22      	cmp	r3, #34	; 0x22
 800eefc:	d05d      	beq.n	800efba <searchD+0x10a>
 800eefe:	2b22      	cmp	r3, #34	; 0x22
 800ef00:	dc02      	bgt.n	800ef08 <searchD+0x58>
 800ef02:	2b11      	cmp	r3, #17
 800ef04:	d069      	beq.n	800efda <searchD+0x12a>
 800ef06:	e06b      	b.n	800efe0 <searchD+0x130>
 800ef08:	2b44      	cmp	r3, #68	; 0x44
 800ef0a:	d053      	beq.n	800efb4 <searchD+0x104>
 800ef0c:	2b88      	cmp	r3, #136	; 0x88
 800ef0e:	d167      	bne.n	800efe0 <searchD+0x130>
			//----a前進----
			case 0x88:
				if(MF.FLAG.SCND && MF.FLAG.ACCL2){
 800ef10:	4b53      	ldr	r3, [pc, #332]	; (800f060 <searchD+0x1b0>)
 800ef12:	881b      	ldrh	r3, [r3, #0]
 800ef14:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800ef18:	b2db      	uxtb	r3, r3
 800ef1a:	2b00      	cmp	r3, #0
 800ef1c:	d046      	beq.n	800efac <searchD+0xfc>
 800ef1e:	4b50      	ldr	r3, [pc, #320]	; (800f060 <searchD+0x1b0>)
 800ef20:	881b      	ldrh	r3, [r3, #0]
 800ef22:	f3c3 2340 	ubfx	r3, r3, #9, #1
 800ef26:	b2db      	uxtb	r3, r3
 800ef28:	2b00      	cmp	r3, #0
 800ef2a:	d03f      	beq.n	800efac <searchD+0xfc>
					if(((route[r_cnt-1] & route[r_cnt]) == 0x88) && (route[r_cnt] != 0xff) && (MF2.FLAG.HACCEL == 0)){
 800ef2c:	4b4d      	ldr	r3, [pc, #308]	; (800f064 <searchD+0x1b4>)
 800ef2e:	781b      	ldrb	r3, [r3, #0]
 800ef30:	3b01      	subs	r3, #1
 800ef32:	4a4e      	ldr	r2, [pc, #312]	; (800f06c <searchD+0x1bc>)
 800ef34:	5cd2      	ldrb	r2, [r2, r3]
 800ef36:	4b4b      	ldr	r3, [pc, #300]	; (800f064 <searchD+0x1b4>)
 800ef38:	781b      	ldrb	r3, [r3, #0]
 800ef3a:	4619      	mov	r1, r3
 800ef3c:	4b4b      	ldr	r3, [pc, #300]	; (800f06c <searchD+0x1bc>)
 800ef3e:	5c5b      	ldrb	r3, [r3, r1]
 800ef40:	4013      	ands	r3, r2
 800ef42:	b2db      	uxtb	r3, r3
 800ef44:	2b88      	cmp	r3, #136	; 0x88
 800ef46:	d115      	bne.n	800ef74 <searchD+0xc4>
 800ef48:	4b46      	ldr	r3, [pc, #280]	; (800f064 <searchD+0x1b4>)
 800ef4a:	781b      	ldrb	r3, [r3, #0]
 800ef4c:	461a      	mov	r2, r3
 800ef4e:	4b47      	ldr	r3, [pc, #284]	; (800f06c <searchD+0x1bc>)
 800ef50:	5c9b      	ldrb	r3, [r3, r2]
 800ef52:	2bff      	cmp	r3, #255	; 0xff
 800ef54:	d00e      	beq.n	800ef74 <searchD+0xc4>
 800ef56:	4b44      	ldr	r3, [pc, #272]	; (800f068 <searchD+0x1b8>)
 800ef58:	881b      	ldrh	r3, [r3, #0]
 800ef5a:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800ef5e:	b2db      	uxtb	r3, r3
 800ef60:	2b00      	cmp	r3, #0
 800ef62:	d107      	bne.n	800ef74 <searchD+0xc4>
						one_sectionA();
 800ef64:	f7f6 ffac 	bl	8005ec0 <one_sectionA>
						MF2.FLAG.HACCEL = 1;
 800ef68:	4a3f      	ldr	r2, [pc, #252]	; (800f068 <searchD+0x1b8>)
 800ef6a:	8813      	ldrh	r3, [r2, #0]
 800ef6c:	f043 0302 	orr.w	r3, r3, #2
 800ef70:	8013      	strh	r3, [r2, #0]
 800ef72:	e01a      	b.n	800efaa <searchD+0xfa>
					}
					else if((route[r_cnt] & 0x55) && (MF2.FLAG.HACCEL)){
 800ef74:	4b3b      	ldr	r3, [pc, #236]	; (800f064 <searchD+0x1b4>)
 800ef76:	781b      	ldrb	r3, [r3, #0]
 800ef78:	461a      	mov	r2, r3
 800ef7a:	4b3c      	ldr	r3, [pc, #240]	; (800f06c <searchD+0x1bc>)
 800ef7c:	5c9b      	ldrb	r3, [r3, r2]
 800ef7e:	f003 0355 	and.w	r3, r3, #85	; 0x55
 800ef82:	2b00      	cmp	r3, #0
 800ef84:	d00e      	beq.n	800efa4 <searchD+0xf4>
 800ef86:	4b38      	ldr	r3, [pc, #224]	; (800f068 <searchD+0x1b8>)
 800ef88:	881b      	ldrh	r3, [r3, #0]
 800ef8a:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800ef8e:	b2db      	uxtb	r3, r3
 800ef90:	2b00      	cmp	r3, #0
 800ef92:	d007      	beq.n	800efa4 <searchD+0xf4>
						one_sectionD();
 800ef94:	f7f7 f820 	bl	8005fd8 <one_sectionD>
						MF2.FLAG.HACCEL = 0;
 800ef98:	4a33      	ldr	r2, [pc, #204]	; (800f068 <searchD+0x1b8>)
 800ef9a:	8813      	ldrh	r3, [r2, #0]
 800ef9c:	f36f 0341 	bfc	r3, #1, #1
 800efa0:	8013      	strh	r3, [r2, #0]
 800efa2:	e002      	b.n	800efaa <searchD+0xfa>
					}else{
						one_sectionU();
 800efa4:	f7f7 f9d4 	bl	8006350 <one_sectionU>
					if(((route[r_cnt-1] & route[r_cnt]) == 0x88) && (route[r_cnt] != 0xff) && (MF2.FLAG.HACCEL == 0)){
 800efa8:	e003      	b.n	800efb2 <searchD+0x102>
 800efaa:	e002      	b.n	800efb2 <searchD+0x102>
					}
				}else{
					one_sectionU();
 800efac:	f7f7 f9d0 	bl	8006350 <one_sectionU>
				}
				break;
 800efb0:	e016      	b.n	800efe0 <searchD+0x130>
 800efb2:	e015      	b.n	800efe0 <searchD+0x130>
			//----a右折スラローム----
			case 0x44:
				slalom_R90();
 800efb4:	f7f7 fc74 	bl	80068a0 <slalom_R90>
				break;
 800efb8:	e012      	b.n	800efe0 <searchD+0x130>
			//----180回転----
			case 0x22:
				half_sectionD();
 800efba:	f7f6 fe45 	bl	8005c48 <half_sectionD>
				rotate_180();
 800efbe:	f7f7 fb97 	bl	80066f0 <rotate_180>
				if(wall_info & 0x88){
 800efc2:	4b2b      	ldr	r3, [pc, #172]	; (800f070 <searchD+0x1c0>)
 800efc4:	781b      	ldrb	r3, [r3, #0]
 800efc6:	f003 0388 	and.w	r3, r3, #136	; 0x88
 800efca:	2b00      	cmp	r3, #0
 800efcc:	d002      	beq.n	800efd4 <searchD+0x124>
					set_position();
 800efce:	f7f6 fc6d 	bl	80058ac <set_position>
				}else{
					half_sectionA();
				}
				break;
 800efd2:	e005      	b.n	800efe0 <searchD+0x130>
					half_sectionA();
 800efd4:	f7f6 fdd2 	bl	8005b7c <half_sectionA>
				break;
 800efd8:	e002      	b.n	800efe0 <searchD+0x130>
			//----a左折スラローム----
			case 0x11:
				slalom_L90();
 800efda:	f7f7 fd77 	bl	8006acc <slalom_L90>
				break;
 800efde:	bf00      	nop
		}
		adv_pos();
 800efe0:	f000 fc6a 	bl	800f8b8 <adv_pos>
//		if(!MF.FLAG.SCND)conf_route();

//	}while((mouse.x != goal_x) || (mouse.y != goal_y));
	}while(smap[mouse.y][mouse.x] != 0);
 800efe4:	4b23      	ldr	r3, [pc, #140]	; (800f074 <searchD+0x1c4>)
 800efe6:	785b      	ldrb	r3, [r3, #1]
 800efe8:	b2db      	uxtb	r3, r3
 800efea:	4618      	mov	r0, r3
 800efec:	4b21      	ldr	r3, [pc, #132]	; (800f074 <searchD+0x1c4>)
 800efee:	781b      	ldrb	r3, [r3, #0]
 800eff0:	b2db      	uxtb	r3, r3
 800eff2:	4619      	mov	r1, r3
 800eff4:	4a20      	ldr	r2, [pc, #128]	; (800f078 <searchD+0x1c8>)
 800eff6:	0103      	lsls	r3, r0, #4
 800eff8:	440b      	add	r3, r1
 800effa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800effe:	2b00      	cmp	r3, #0
 800f000:	f47f af72 	bne.w	800eee8 <searchD+0x38>

	for(int j=0; j<goal_mode-1; j++){
 800f004:	2300      	movs	r3, #0
 800f006:	607b      	str	r3, [r7, #4]
 800f008:	e006      	b.n	800f018 <searchD+0x168>
		one_sectionU();
 800f00a:	f7f7 f9a1 	bl	8006350 <one_sectionU>
		adv_pos();
 800f00e:	f000 fc53 	bl	800f8b8 <adv_pos>
	for(int j=0; j<goal_mode-1; j++){
 800f012:	687b      	ldr	r3, [r7, #4]
 800f014:	3301      	adds	r3, #1
 800f016:	607b      	str	r3, [r7, #4]
 800f018:	4b18      	ldr	r3, [pc, #96]	; (800f07c <searchD+0x1cc>)
 800f01a:	781b      	ldrb	r3, [r3, #0]
 800f01c:	3b01      	subs	r3, #1
 800f01e:	687a      	ldr	r2, [r7, #4]
 800f020:	429a      	cmp	r2, r3
 800f022:	dbf2      	blt.n	800f00a <searchD+0x15a>
	}
	half_sectionD();
 800f024:	f7f6 fe10 	bl	8005c48 <half_sectionD>
	set_positionF();
 800f028:	f7f6 fc56 	bl	80058d8 <set_positionF>

	HAL_Delay(500);
 800f02c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800f030:	f7f1 fff4 	bl	800101c <HAL_Delay>
	rotate_180();											//180度回転
 800f034:	f7f7 fb5c 	bl	80066f0 <rotate_180>
//	driveC2(SETPOS_BACK);         //a尻を当てる程度に後退。回転後に停止する
//	degree_z = target_degree_z;
//	start_mode = 0;
	start_mode = 1;
 800f038:	4b11      	ldr	r3, [pc, #68]	; (800f080 <searchD+0x1d0>)
 800f03a:	2201      	movs	r2, #1
 800f03c:	701a      	strb	r2, [r3, #0]
	goal_mode = 1;
 800f03e:	4b0f      	ldr	r3, [pc, #60]	; (800f07c <searchD+0x1cc>)
 800f040:	2201      	movs	r2, #1
 800f042:	701a      	strb	r2, [r3, #0]

	if(!MF.FLAG.SCND){
 800f044:	4b06      	ldr	r3, [pc, #24]	; (800f060 <searchD+0x1b0>)
 800f046:	881b      	ldrh	r3, [r3, #0]
 800f048:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800f04c:	b2db      	uxtb	r3, r3
 800f04e:	2b00      	cmp	r3, #0
 800f050:	d101      	bne.n	800f056 <searchD+0x1a6>
		store_map_in_eeprom();
 800f052:	f002 fb8b 	bl	801176c <store_map_in_eeprom>
	}
}
 800f056:	bf00      	nop
 800f058:	3708      	adds	r7, #8
 800f05a:	46bd      	mov	sp, r7
 800f05c:	bd80      	pop	{r7, pc}
 800f05e:	bf00      	nop
 800f060:	20000f68 	.word	0x20000f68
 800f064:	200015d0 	.word	0x200015d0
 800f068:	20000f64 	.word	0x20000f64
 800f06c:	20000c54 	.word	0x20000c54
 800f070:	200002c8 	.word	0x200002c8
 800f074:	20000c0c 	.word	0x20000c0c
 800f078:	20000d60 	.word	0x20000d60
 800f07c:	20000bb1 	.word	0x20000bb1
 800f080:	200015c8 	.word	0x200015c8

0800f084 <searchE>:
//searchE
//a未知壁を含むマスを仮goal座標とし、スラローム連続走行で全マスに進む。仮goalを連続的に変化させる。全面探索終了後は半区画減速
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void searchE(){
 800f084:	b580      	push	{r7, lr}
 800f086:	b082      	sub	sp, #8
 800f088:	af00      	add	r7, sp, #0

	int i = 0;
 800f08a:	2300      	movs	r3, #0
 800f08c:	607b      	str	r3, [r7, #4]
	int j = 0;
 800f08e:	2300      	movs	r3, #0
 800f090:	603b      	str	r3, [r7, #0]
	do {
		if(i == 0){
 800f092:	687b      	ldr	r3, [r7, #4]
 800f094:	2b00      	cmp	r3, #0
 800f096:	d111      	bne.n	800f0bc <searchE+0x38>
			//====a前に壁が無い想定で問答無用で前進====
			half_sectionA();
 800f098:	f7f6 fd70 	bl	8005b7c <half_sectionA>
			adv_pos();
 800f09c:	f000 fc0c 	bl	800f8b8 <adv_pos>
			write_map();														//地図の初期化
 800f0a0:	f000 fcce 	bl	800fa40 <write_map>

			//====a歩数等初期化====
			m_step = r_cnt = 0;													//歩数と経路カウンタの初期化
 800f0a4:	4b44      	ldr	r3, [pc, #272]	; (800f1b8 <searchE+0x134>)
 800f0a6:	2200      	movs	r2, #0
 800f0a8:	701a      	strb	r2, [r3, #0]
 800f0aa:	4b44      	ldr	r3, [pc, #272]	; (800f1bc <searchE+0x138>)
 800f0ac:	2200      	movs	r2, #0
 800f0ae:	801a      	strh	r2, [r3, #0]
			find_pregoal();														//仮goalまでの歩数マップの初期化
 800f0b0:	f001 fbd8 	bl	8010864 <find_pregoal>
			make_smap2();
 800f0b4:	f001 fdca 	bl	8010c4c <make_smap2>
			make_route();														//最短経路探索(route配列に動作が格納される)
 800f0b8:	f001 fa74 	bl	80105a4 <make_route>
		}

		//====a探索走行====
		do {
			//----a進行----
			switch (route[r_cnt++]) {										//route配列によって進行を決定。経路カウンタを進める
 800f0bc:	4b3e      	ldr	r3, [pc, #248]	; (800f1b8 <searchE+0x134>)
 800f0be:	781b      	ldrb	r3, [r3, #0]
 800f0c0:	1c5a      	adds	r2, r3, #1
 800f0c2:	b2d1      	uxtb	r1, r2
 800f0c4:	4a3c      	ldr	r2, [pc, #240]	; (800f1b8 <searchE+0x134>)
 800f0c6:	7011      	strb	r1, [r2, #0]
 800f0c8:	461a      	mov	r2, r3
 800f0ca:	4b3d      	ldr	r3, [pc, #244]	; (800f1c0 <searchE+0x13c>)
 800f0cc:	5c9b      	ldrb	r3, [r3, r2]
 800f0ce:	2b22      	cmp	r3, #34	; 0x22
 800f0d0:	d00e      	beq.n	800f0f0 <searchE+0x6c>
 800f0d2:	2b22      	cmp	r3, #34	; 0x22
 800f0d4:	dc02      	bgt.n	800f0dc <searchE+0x58>
 800f0d6:	2b11      	cmp	r3, #17
 800f0d8:	d01a      	beq.n	800f110 <searchE+0x8c>
 800f0da:	e01c      	b.n	800f116 <searchE+0x92>
 800f0dc:	2b44      	cmp	r3, #68	; 0x44
 800f0de:	d004      	beq.n	800f0ea <searchE+0x66>
 800f0e0:	2b88      	cmp	r3, #136	; 0x88
 800f0e2:	d118      	bne.n	800f116 <searchE+0x92>
				//----a前進----
			case 0x88:
				one_sectionU();
 800f0e4:	f7f7 f934 	bl	8006350 <one_sectionU>
				break;
 800f0e8:	e015      	b.n	800f116 <searchE+0x92>
				//----a右折----
			case 0x44:
				slalom_R90();
 800f0ea:	f7f7 fbd9 	bl	80068a0 <slalom_R90>
				break;
 800f0ee:	e012      	b.n	800f116 <searchE+0x92>
				//----180回転----
			case 0x22:
				half_sectionD();
 800f0f0:	f7f6 fdaa 	bl	8005c48 <half_sectionD>
				rotate_180();
 800f0f4:	f7f7 fafc 	bl	80066f0 <rotate_180>
				if(wall_info & 0x88){
 800f0f8:	4b32      	ldr	r3, [pc, #200]	; (800f1c4 <searchE+0x140>)
 800f0fa:	781b      	ldrb	r3, [r3, #0]
 800f0fc:	f003 0388 	and.w	r3, r3, #136	; 0x88
 800f100:	2b00      	cmp	r3, #0
 800f102:	d002      	beq.n	800f10a <searchE+0x86>
					set_position();
 800f104:	f7f6 fbd2 	bl	80058ac <set_position>
				}else{
					half_sectionA();
				}
				break;
 800f108:	e005      	b.n	800f116 <searchE+0x92>
					half_sectionA();
 800f10a:	f7f6 fd37 	bl	8005b7c <half_sectionA>
				break;
 800f10e:	e002      	b.n	800f116 <searchE+0x92>
				//----a左折----
			case 0x11:
				slalom_L90();
 800f110:	f7f7 fcdc 	bl	8006acc <slalom_L90>
				break;
 800f114:	bf00      	nop
			}
			adv_pos();														//aマイクロマウス内部位置情報でも前進処理
 800f116:	f000 fbcf 	bl	800f8b8 <adv_pos>
			j++;
 800f11a:	683b      	ldr	r3, [r7, #0]
 800f11c:	3301      	adds	r3, #1
 800f11e:	603b      	str	r3, [r7, #0]
			if (j > 150) break;												//a移動マス数が250以上になった場合全面探索を中止
 800f120:	683b      	ldr	r3, [r7, #0]
 800f122:	2b96      	cmp	r3, #150	; 0x96
 800f124:	dc0e      	bgt.n	800f144 <searchE+0xc0>

		} while ((mouse.x != pregoal_x) || (mouse.y != pregoal_y));			//a現在座標と仮goal座標が等しくなるまで実行
 800f126:	4b28      	ldr	r3, [pc, #160]	; (800f1c8 <searchE+0x144>)
 800f128:	781b      	ldrb	r3, [r3, #0]
 800f12a:	b2da      	uxtb	r2, r3
 800f12c:	4b27      	ldr	r3, [pc, #156]	; (800f1cc <searchE+0x148>)
 800f12e:	781b      	ldrb	r3, [r3, #0]
 800f130:	429a      	cmp	r2, r3
 800f132:	d1c3      	bne.n	800f0bc <searchE+0x38>
 800f134:	4b24      	ldr	r3, [pc, #144]	; (800f1c8 <searchE+0x144>)
 800f136:	785b      	ldrb	r3, [r3, #1]
 800f138:	b2da      	uxtb	r2, r3
 800f13a:	4b25      	ldr	r3, [pc, #148]	; (800f1d0 <searchE+0x14c>)
 800f13c:	781b      	ldrb	r3, [r3, #0]
 800f13e:	429a      	cmp	r2, r3
 800f140:	d1bc      	bne.n	800f0bc <searchE+0x38>
 800f142:	e000      	b.n	800f146 <searchE+0xc2>
			if (j > 150) break;												//a移動マス数が250以上になった場合全面探索を中止
 800f144:	bf00      	nop

		get_wall_info();													//a壁情報の初期化, 後壁はなくなる
 800f146:	f002 fbc3 	bl	80118d0 <get_wall_info>
		write_map();														//a地図の初期化
 800f14a:	f000 fc79 	bl	800fa40 <write_map>
		//printf("get pregoal, x = %d, y = %d\n", mouse.x, mouse.y);

		//====a歩数等初期化====
		m_step = r_cnt = 0;													//a歩数と経路カウンタの初期化
 800f14e:	4b1a      	ldr	r3, [pc, #104]	; (800f1b8 <searchE+0x134>)
 800f150:	2200      	movs	r2, #0
 800f152:	701a      	strb	r2, [r3, #0]
 800f154:	4b19      	ldr	r3, [pc, #100]	; (800f1bc <searchE+0x138>)
 800f156:	2200      	movs	r2, #0
 800f158:	801a      	strh	r2, [r3, #0]

		find_pregoal();														//a仮goalまでの歩数マップの初期化
 800f15a:	f001 fb83 	bl	8010864 <find_pregoal>
		if(MF2.FLAG.ALLMAP) {
 800f15e:	4b1d      	ldr	r3, [pc, #116]	; (800f1d4 <searchE+0x150>)
 800f160:	881b      	ldrh	r3, [r3, #0]
 800f162:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800f166:	b2db      	uxtb	r3, r3
 800f168:	2b00      	cmp	r3, #0
 800f16a:	d002      	beq.n	800f172 <searchE+0xee>
			//printf("get MF2.FLAG.ALLMAP\n");
			half_sectionD();
 800f16c:	f7f6 fd6c 	bl	8005c48 <half_sectionD>
			break;
 800f170:	e00e      	b.n	800f190 <searchE+0x10c>
		}
		make_smap2();
 800f172:	f001 fd6b 	bl	8010c4c <make_smap2>
		make_route();														//a最短経路探索(route配列に動作が格納される)
 800f176:	f001 fa15 	bl	80105a4 <make_route>

		if (j > 150) {
 800f17a:	683b      	ldr	r3, [r7, #0]
 800f17c:	2b96      	cmp	r3, #150	; 0x96
 800f17e:	dc06      	bgt.n	800f18e <searchE+0x10a>
			break;															//a移動マス数が250以上になった場合全面探索を中止
		}
		i++;
 800f180:	687b      	ldr	r3, [r7, #4]
 800f182:	3301      	adds	r3, #1
 800f184:	607b      	str	r3, [r7, #4]

	} while (i < 150);														//a仮goalへの到着が130回以上になった場合全面探索を中止
 800f186:	687b      	ldr	r3, [r7, #4]
 800f188:	2b95      	cmp	r3, #149	; 0x95
 800f18a:	dd82      	ble.n	800f092 <searchE+0xe>
 800f18c:	e000      	b.n	800f190 <searchE+0x10c>
			break;															//a移動マス数が250以上になった場合全面探索を中止
 800f18e:	bf00      	nop

	HAL_Delay(500);
 800f190:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800f194:	f7f1 ff42 	bl	800101c <HAL_Delay>
	rotate_180();											//180度回転
 800f198:	f7f7 faaa 	bl	80066f0 <rotate_180>

	if(!MF.FLAG.SCND){
 800f19c:	4b0e      	ldr	r3, [pc, #56]	; (800f1d8 <searchE+0x154>)
 800f19e:	881b      	ldrh	r3, [r3, #0]
 800f1a0:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800f1a4:	b2db      	uxtb	r3, r3
 800f1a6:	2b00      	cmp	r3, #0
 800f1a8:	d101      	bne.n	800f1ae <searchE+0x12a>
		store_map_in_eeprom();
 800f1aa:	f002 fadf 	bl	801176c <store_map_in_eeprom>
	}
}
 800f1ae:	bf00      	nop
 800f1b0:	3708      	adds	r7, #8
 800f1b2:	46bd      	mov	sp, r7
 800f1b4:	bd80      	pop	{r7, pc}
 800f1b6:	bf00      	nop
 800f1b8:	200015d0 	.word	0x200015d0
 800f1bc:	2000034e 	.word	0x2000034e
 800f1c0:	20000c54 	.word	0x20000c54
 800f1c4:	200002c8 	.word	0x200002c8
 800f1c8:	20000c0c 	.word	0x20000c0c
 800f1cc:	20000d5c 	.word	0x20000d5c
 800f1d0:	200012a1 	.word	0x200012a1
 800f1d4:	20000f64 	.word	0x20000f64
 800f1d8:	20000f68 	.word	0x20000f68

0800f1dc <searchF3>:
//searchF3
//aスラローム(+既知区間加速探索走行)+pass圧縮+機体方向&位置未更新+半区画ベースでgoal座標に進む
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void searchF3(){
 800f1dc:	b580      	push	{r7, lr}
 800f1de:	b084      	sub	sp, #16
 800f1e0:	af00      	add	r7, sp, #0

	if(MF.FLAG.SCND){
 800f1e2:	4b62      	ldr	r3, [pc, #392]	; (800f36c <searchF3+0x190>)
 800f1e4:	881b      	ldrh	r3, [r3, #0]
 800f1e6:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800f1ea:	b2db      	uxtb	r3, r3
 800f1ec:	2b00      	cmp	r3, #0
 800f1ee:	d001      	beq.n	800f1f4 <searchF3+0x18>
		load_map_from_eeprom();
 800f1f0:	f002 faf6 	bl	80117e0 <load_map_from_eeprom>
	}
	pass_mode = 3;
 800f1f4:	4b5e      	ldr	r3, [pc, #376]	; (800f370 <searchF3+0x194>)
 800f1f6:	2203      	movs	r2, #3
 800f1f8:	701a      	strb	r2, [r3, #0]

	//====a1区画前進====
	adv_pos();
 800f1fa:	f000 fb5d 	bl	800f8b8 <adv_pos>

	//====a歩数マップ・経路作成====
	make_smap();											//a歩数マップ作成
 800f1fe:	f000 fe13 	bl	800fe28 <make_smap>
	make_route();											//a最短経路探索（route配列に動作が格納される）
 800f202:	f001 f9cf 	bl	80105a4 <make_route>

	//====pass圧縮====
	p_cnt = 0;												//a経路カウンタの初期化
 800f206:	4b5b      	ldr	r3, [pc, #364]	; (800f374 <searchF3+0x198>)
 800f208:	2200      	movs	r2, #0
 800f20a:	701a      	strb	r2, [r3, #0]
	pass_route2();
 800f20c:	f001 fe42 	bl	8010e94 <pass_route2>

	//====a前に壁が無い想定で問答無用で前進====
	start_sectionA();
 800f210:	f7f6 fb80 	bl	8005914 <start_sectionA>

	MF2.FLAG.HACCEL = 0;
 800f214:	4a58      	ldr	r2, [pc, #352]	; (800f378 <searchF3+0x19c>)
 800f216:	8813      	ldrh	r3, [r2, #0]
 800f218:	f36f 0341 	bfc	r3, #1, #1
 800f21c:	8013      	strh	r3, [r2, #0]

	//====a探索走行====
	do{
		//----a進行----
		switch(pass[p_cnt++]){								//route配列によって進行を決定。経路カウンタを進める
 800f21e:	4b55      	ldr	r3, [pc, #340]	; (800f374 <searchF3+0x198>)
 800f220:	781b      	ldrb	r3, [r3, #0]
 800f222:	1c5a      	adds	r2, r3, #1
 800f224:	b2d1      	uxtb	r1, r2
 800f226:	4a53      	ldr	r2, [pc, #332]	; (800f374 <searchF3+0x198>)
 800f228:	7011      	strb	r1, [r2, #0]
 800f22a:	461a      	mov	r2, r3
 800f22c:	4b53      	ldr	r3, [pc, #332]	; (800f37c <searchF3+0x1a0>)
 800f22e:	569b      	ldrsb	r3, [r3, r2]
 800f230:	f113 0f04 	cmn.w	r3, #4
 800f234:	d01e      	beq.n	800f274 <searchF3+0x98>
 800f236:	f113 0f04 	cmn.w	r3, #4
 800f23a:	dc09      	bgt.n	800f250 <searchF3+0x74>
 800f23c:	f113 0f06 	cmn.w	r3, #6
 800f240:	d01e      	beq.n	800f280 <searchF3+0xa4>
 800f242:	f113 0f06 	cmn.w	r3, #6
 800f246:	dc18      	bgt.n	800f27a <searchF3+0x9e>
 800f248:	f113 0f72 	cmn.w	r3, #114	; 0x72
 800f24c:	d01b      	beq.n	800f286 <searchF3+0xaa>
 800f24e:	e01f      	b.n	800f290 <searchF3+0xb4>
 800f250:	f113 0f02 	cmn.w	r3, #2
 800f254:	d008      	beq.n	800f268 <searchF3+0x8c>
 800f256:	f113 0f02 	cmn.w	r3, #2
 800f25a:	db08      	blt.n	800f26e <searchF3+0x92>
 800f25c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f260:	d116      	bne.n	800f290 <searchF3+0xb4>
			//----a右スラローム----
			case -1:
				slalom_R90();
 800f262:	f7f7 fb1d 	bl	80068a0 <slalom_R90>
				break;
 800f266:	e04c      	b.n	800f302 <searchF3+0x126>

			//----a左スラローム----
			case -2:
				slalom_L90();
 800f268:	f7f7 fc30 	bl	8006acc <slalom_L90>
				break;
 800f26c:	e049      	b.n	800f302 <searchF3+0x126>

			//----a大回り右90----
			case -3:
				Lslalom_R90();
 800f26e:	f7f7 fd37 	bl	8006ce0 <Lslalom_R90>
				break;
 800f272:	e046      	b.n	800f302 <searchF3+0x126>

			//----a大回り左90----
			case -4:
				Lslalom_L90();
 800f274:	f7f7 fe6c 	bl	8006f50 <Lslalom_L90>
				break;
 800f278:	e043      	b.n	800f302 <searchF3+0x126>

			//----a大回り右180----
			case -5:
				Lslalom_R180();
 800f27a:	f7f7 ff95 	bl	80071a8 <Lslalom_R180>
				break;
 800f27e:	e040      	b.n	800f302 <searchF3+0x126>

			//----a大回り左180----
			case -6:
				Lslalom_L180();
 800f280:	f7f8 f8e4 	bl	800744c <Lslalom_L180>
				break;
 800f284:	e03d      	b.n	800f302 <searchF3+0x126>

			//----pass配列最後(なお本来呼び出される前にゴールする)----
			case -114:
				rotate_180();
 800f286:	f7f7 fa33 	bl	80066f0 <rotate_180>
				rotate_180();
 800f28a:	f7f7 fa31 	bl	80066f0 <rotate_180>
				while(1);
 800f28e:	e7fe      	b.n	800f28e <searchF3+0xb2>
				break;

			//----a前進----
			default:
				if(pass[p_cnt-1] < 4){
 800f290:	4b38      	ldr	r3, [pc, #224]	; (800f374 <searchF3+0x198>)
 800f292:	781b      	ldrb	r3, [r3, #0]
 800f294:	3b01      	subs	r3, #1
 800f296:	4a39      	ldr	r2, [pc, #228]	; (800f37c <searchF3+0x1a0>)
 800f298:	56d3      	ldrsb	r3, [r2, r3]
 800f29a:	2b03      	cmp	r3, #3
 800f29c:	dc11      	bgt.n	800f2c2 <searchF3+0xe6>
					for(int k = 0; k < pass[p_cnt-1]; k++){
 800f29e:	2300      	movs	r3, #0
 800f2a0:	60fb      	str	r3, [r7, #12]
 800f2a2:	e004      	b.n	800f2ae <searchF3+0xd2>
						half_sectionU();
 800f2a4:	f7f6 fdec 	bl	8005e80 <half_sectionU>
					for(int k = 0; k < pass[p_cnt-1]; k++){
 800f2a8:	68fb      	ldr	r3, [r7, #12]
 800f2aa:	3301      	adds	r3, #1
 800f2ac:	60fb      	str	r3, [r7, #12]
 800f2ae:	4b31      	ldr	r3, [pc, #196]	; (800f374 <searchF3+0x198>)
 800f2b0:	781b      	ldrb	r3, [r3, #0]
 800f2b2:	3b01      	subs	r3, #1
 800f2b4:	4a31      	ldr	r2, [pc, #196]	; (800f37c <searchF3+0x1a0>)
 800f2b6:	56d3      	ldrsb	r3, [r2, r3]
 800f2b8:	461a      	mov	r2, r3
 800f2ba:	68fb      	ldr	r3, [r7, #12]
 800f2bc:	4293      	cmp	r3, r2
 800f2be:	dbf1      	blt.n	800f2a4 <searchF3+0xc8>
						half_sectionU();
					}
					one_sectionD();
					MF2.FLAG.HACCEL = 0;
				}
				break;
 800f2c0:	e01e      	b.n	800f300 <searchF3+0x124>
					one_sectionA();
 800f2c2:	f7f6 fdfd 	bl	8005ec0 <one_sectionA>
					MF2.FLAG.HACCEL = 1;
 800f2c6:	4a2c      	ldr	r2, [pc, #176]	; (800f378 <searchF3+0x19c>)
 800f2c8:	8813      	ldrh	r3, [r2, #0]
 800f2ca:	f043 0302 	orr.w	r3, r3, #2
 800f2ce:	8013      	strh	r3, [r2, #0]
					for(k = 0; k < pass[p_cnt-1]-4; k++){
 800f2d0:	2300      	movs	r3, #0
 800f2d2:	60bb      	str	r3, [r7, #8]
 800f2d4:	e004      	b.n	800f2e0 <searchF3+0x104>
						half_sectionU();
 800f2d6:	f7f6 fdd3 	bl	8005e80 <half_sectionU>
					for(k = 0; k < pass[p_cnt-1]-4; k++){
 800f2da:	68bb      	ldr	r3, [r7, #8]
 800f2dc:	3301      	adds	r3, #1
 800f2de:	60bb      	str	r3, [r7, #8]
 800f2e0:	4b24      	ldr	r3, [pc, #144]	; (800f374 <searchF3+0x198>)
 800f2e2:	781b      	ldrb	r3, [r3, #0]
 800f2e4:	3b01      	subs	r3, #1
 800f2e6:	4a25      	ldr	r2, [pc, #148]	; (800f37c <searchF3+0x1a0>)
 800f2e8:	56d3      	ldrsb	r3, [r2, r3]
 800f2ea:	3b04      	subs	r3, #4
 800f2ec:	68ba      	ldr	r2, [r7, #8]
 800f2ee:	429a      	cmp	r2, r3
 800f2f0:	dbf1      	blt.n	800f2d6 <searchF3+0xfa>
					one_sectionD();
 800f2f2:	f7f6 fe71 	bl	8005fd8 <one_sectionD>
					MF2.FLAG.HACCEL = 0;
 800f2f6:	4a20      	ldr	r2, [pc, #128]	; (800f378 <searchF3+0x19c>)
 800f2f8:	8813      	ldrh	r3, [r2, #0]
 800f2fa:	f36f 0341 	bfc	r3, #1, #1
 800f2fe:	8013      	strh	r3, [r2, #0]
				break;
 800f300:	bf00      	nop
		}
	}while(pass[p_cnt] != -114);
 800f302:	4b1c      	ldr	r3, [pc, #112]	; (800f374 <searchF3+0x198>)
 800f304:	781b      	ldrb	r3, [r3, #0]
 800f306:	461a      	mov	r2, r3
 800f308:	4b1c      	ldr	r3, [pc, #112]	; (800f37c <searchF3+0x1a0>)
 800f30a:	569b      	ldrsb	r3, [r3, r2]
 800f30c:	f113 0f72 	cmn.w	r3, #114	; 0x72
 800f310:	d185      	bne.n	800f21e <searchF3+0x42>

	mouse.x = goal_x;
 800f312:	4b1b      	ldr	r3, [pc, #108]	; (800f380 <searchF3+0x1a4>)
 800f314:	781a      	ldrb	r2, [r3, #0]
 800f316:	4b1b      	ldr	r3, [pc, #108]	; (800f384 <searchF3+0x1a8>)
 800f318:	701a      	strb	r2, [r3, #0]
	mouse.y = goal_y;
 800f31a:	4b1b      	ldr	r3, [pc, #108]	; (800f388 <searchF3+0x1ac>)
 800f31c:	781a      	ldrb	r2, [r3, #0]
 800f31e:	4b19      	ldr	r3, [pc, #100]	; (800f384 <searchF3+0x1a8>)
 800f320:	705a      	strb	r2, [r3, #1]

	for(int j=0; j<goal_mode-1; j++){
 800f322:	2300      	movs	r3, #0
 800f324:	607b      	str	r3, [r7, #4]
 800f326:	e006      	b.n	800f336 <searchF3+0x15a>
		one_sectionU();
 800f328:	f7f7 f812 	bl	8006350 <one_sectionU>
		adv_pos();
 800f32c:	f000 fac4 	bl	800f8b8 <adv_pos>
	for(int j=0; j<goal_mode-1; j++){
 800f330:	687b      	ldr	r3, [r7, #4]
 800f332:	3301      	adds	r3, #1
 800f334:	607b      	str	r3, [r7, #4]
 800f336:	4b15      	ldr	r3, [pc, #84]	; (800f38c <searchF3+0x1b0>)
 800f338:	781b      	ldrb	r3, [r3, #0]
 800f33a:	3b01      	subs	r3, #1
 800f33c:	687a      	ldr	r2, [r7, #4]
 800f33e:	429a      	cmp	r2, r3
 800f340:	dbf2      	blt.n	800f328 <searchF3+0x14c>
	}
	half_sectionD();
 800f342:	f7f6 fc81 	bl	8005c48 <half_sectionD>
	set_positionF();
 800f346:	f7f6 fac7 	bl	80058d8 <set_positionF>

	HAL_Delay(500);
 800f34a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800f34e:	f7f1 fe65 	bl	800101c <HAL_Delay>
	rotate_180();											//180度回転
 800f352:	f7f7 f9cd 	bl	80066f0 <rotate_180>
//	driveC2(SETPOS_BACK);         //a尻を当てる程度に後退。回転後に停止する
//	degree_z = target_degree_z;
//	start_mode = 0;
	start_mode = 1;
 800f356:	4b0e      	ldr	r3, [pc, #56]	; (800f390 <searchF3+0x1b4>)
 800f358:	2201      	movs	r2, #1
 800f35a:	701a      	strb	r2, [r3, #0]
	goal_mode = 1;
 800f35c:	4b0b      	ldr	r3, [pc, #44]	; (800f38c <searchF3+0x1b0>)
 800f35e:	2201      	movs	r2, #1
 800f360:	701a      	strb	r2, [r3, #0]

}
 800f362:	bf00      	nop
 800f364:	3710      	adds	r7, #16
 800f366:	46bd      	mov	sp, r7
 800f368:	bd80      	pop	{r7, pc}
 800f36a:	bf00      	nop
 800f36c:	20000f68 	.word	0x20000f68
 800f370:	20000457 	.word	0x20000457
 800f374:	200002b0 	.word	0x200002b0
 800f378:	20000f64 	.word	0x20000f64
 800f37c:	20000350 	.word	0x20000350
 800f380:	20000bb0 	.word	0x20000bb0
 800f384:	20000c0c 	.word	0x20000c0c
 800f388:	20000b4c 	.word	0x20000b4c
 800f38c:	20000bb1 	.word	0x20000bb1
 800f390:	200015c8 	.word	0x200015c8

0800f394 <searchF4>:
//searchF4
//aスラローム(+既知区間加速探索走行)+pass圧縮+機体方向&位置未更新+半区画ベース+斜め走行でgoal座標に進む
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void searchF4(){
 800f394:	b580      	push	{r7, lr}
 800f396:	b084      	sub	sp, #16
 800f398:	af00      	add	r7, sp, #0

	if(MF.FLAG.SCND){
 800f39a:	4bca      	ldr	r3, [pc, #808]	; (800f6c4 <searchF4+0x330>)
 800f39c:	881b      	ldrh	r3, [r3, #0]
 800f39e:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800f3a2:	b2db      	uxtb	r3, r3
 800f3a4:	2b00      	cmp	r3, #0
 800f3a6:	d001      	beq.n	800f3ac <searchF4+0x18>
		load_map_from_eeprom();
 800f3a8:	f002 fa1a 	bl	80117e0 <load_map_from_eeprom>
	}
	pass_mode = 4;
 800f3ac:	4bc6      	ldr	r3, [pc, #792]	; (800f6c8 <searchF4+0x334>)
 800f3ae:	2204      	movs	r2, #4
 800f3b0:	701a      	strb	r2, [r3, #0]

	//====a1区画前進====
	adv_pos();
 800f3b2:	f000 fa81 	bl	800f8b8 <adv_pos>

	//====a歩数マップ・経路作成====
	full_led_write(RED);
 800f3b6:	2001      	movs	r0, #1
 800f3b8:	f002 fafe 	bl	80119b8 <full_led_write>
	make_smap();											//a歩数マップ作成
 800f3bc:	f000 fd34 	bl	800fe28 <make_smap>
	make_route();											//a最短経路探索（route配列に動作が格納される）
 800f3c0:	f001 f8f0 	bl	80105a4 <make_route>

	//====pass圧縮====
	p_cnt = 0;												//a経路カウンタの初期化
 800f3c4:	4bc1      	ldr	r3, [pc, #772]	; (800f6cc <searchF4+0x338>)
 800f3c6:	2200      	movs	r2, #0
 800f3c8:	701a      	strb	r2, [r3, #0]
	pass_route3();
 800f3ca:	f001 fe77 	bl	80110bc <pass_route3>

	if(start_mode == 0 || start_mode == 1){					//a大回りではない場合、先頭の半区画直進をスキップ
 800f3ce:	4bc0      	ldr	r3, [pc, #768]	; (800f6d0 <searchF4+0x33c>)
 800f3d0:	781b      	ldrb	r3, [r3, #0]
 800f3d2:	b2db      	uxtb	r3, r3
 800f3d4:	2b00      	cmp	r3, #0
 800f3d6:	d004      	beq.n	800f3e2 <searchF4+0x4e>
 800f3d8:	4bbd      	ldr	r3, [pc, #756]	; (800f6d0 <searchF4+0x33c>)
 800f3da:	781b      	ldrb	r3, [r3, #0]
 800f3dc:	b2db      	uxtb	r3, r3
 800f3de:	2b01      	cmp	r3, #1
 800f3e0:	d109      	bne.n	800f3f6 <searchF4+0x62>
		pass[p_cnt]--;
 800f3e2:	4bba      	ldr	r3, [pc, #744]	; (800f6cc <searchF4+0x338>)
 800f3e4:	781b      	ldrb	r3, [r3, #0]
 800f3e6:	4abb      	ldr	r2, [pc, #748]	; (800f6d4 <searchF4+0x340>)
 800f3e8:	56d2      	ldrsb	r2, [r2, r3]
 800f3ea:	b2d2      	uxtb	r2, r2
 800f3ec:	3a01      	subs	r2, #1
 800f3ee:	b2d2      	uxtb	r2, r2
 800f3f0:	b251      	sxtb	r1, r2
 800f3f2:	4ab8      	ldr	r2, [pc, #736]	; (800f6d4 <searchF4+0x340>)
 800f3f4:	54d1      	strb	r1, [r2, r3]
	}
	mouse.dir = mouse.dir * 2;
 800f3f6:	4bb8      	ldr	r3, [pc, #736]	; (800f6d8 <searchF4+0x344>)
 800f3f8:	789b      	ldrb	r3, [r3, #2]
 800f3fa:	b2db      	uxtb	r3, r3
 800f3fc:	005b      	lsls	r3, r3, #1
 800f3fe:	b2da      	uxtb	r2, r3
 800f400:	4bb5      	ldr	r3, [pc, #724]	; (800f6d8 <searchF4+0x344>)
 800f402:	709a      	strb	r2, [r3, #2]

	//====a前に壁が無い想定で問答無用で前進====
	start_sectionA();
 800f404:	f7f6 fa86 	bl	8005914 <start_sectionA>

	MF2.FLAG.HACCEL = 0;
 800f408:	4ab4      	ldr	r2, [pc, #720]	; (800f6dc <searchF4+0x348>)
 800f40a:	8813      	ldrh	r3, [r2, #0]
 800f40c:	f36f 0341 	bfc	r3, #1, #1
 800f410:	8013      	strh	r3, [r2, #0]
	MF.FLAG.XDIR = 1;
 800f412:	4aac      	ldr	r2, [pc, #688]	; (800f6c4 <searchF4+0x330>)
 800f414:	8813      	ldrh	r3, [r2, #0]
 800f416:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800f41a:	8013      	strh	r3, [r2, #0]
	//====a探索走行====
	do{
		//----a進行----
		switch(pass[p_cnt++]){								//route配列によって進行を決定。経路カウンタを進める
 800f41c:	4bab      	ldr	r3, [pc, #684]	; (800f6cc <searchF4+0x338>)
 800f41e:	781b      	ldrb	r3, [r3, #0]
 800f420:	1c5a      	adds	r2, r3, #1
 800f422:	b2d1      	uxtb	r1, r2
 800f424:	4aa9      	ldr	r2, [pc, #676]	; (800f6cc <searchF4+0x338>)
 800f426:	7011      	strb	r1, [r2, #0]
 800f428:	461a      	mov	r2, r3
 800f42a:	4baa      	ldr	r3, [pc, #680]	; (800f6d4 <searchF4+0x340>)
 800f42c:	569b      	ldrsb	r3, [r3, r2]
 800f42e:	3372      	adds	r3, #114	; 0x72
 800f430:	2b71      	cmp	r3, #113	; 0x71
 800f432:	f200 811c 	bhi.w	800f66e <searchF4+0x2da>
 800f436:	a201      	add	r2, pc, #4	; (adr r2, 800f43c <searchF4+0xa8>)
 800f438:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f43c:	0800f665 	.word	0x0800f665
 800f440:	0800f66f 	.word	0x0800f66f
 800f444:	0800f66f 	.word	0x0800f66f
 800f448:	0800f66f 	.word	0x0800f66f
 800f44c:	0800f66f 	.word	0x0800f66f
 800f450:	0800f66f 	.word	0x0800f66f
 800f454:	0800f66f 	.word	0x0800f66f
 800f458:	0800f66f 	.word	0x0800f66f
 800f45c:	0800f66f 	.word	0x0800f66f
 800f460:	0800f66f 	.word	0x0800f66f
 800f464:	0800f66f 	.word	0x0800f66f
 800f468:	0800f66f 	.word	0x0800f66f
 800f46c:	0800f66f 	.word	0x0800f66f
 800f470:	0800f66f 	.word	0x0800f66f
 800f474:	0800f66f 	.word	0x0800f66f
 800f478:	0800f66f 	.word	0x0800f66f
 800f47c:	0800f66f 	.word	0x0800f66f
 800f480:	0800f66f 	.word	0x0800f66f
 800f484:	0800f66f 	.word	0x0800f66f
 800f488:	0800f66f 	.word	0x0800f66f
 800f48c:	0800f66f 	.word	0x0800f66f
 800f490:	0800f66f 	.word	0x0800f66f
 800f494:	0800f66f 	.word	0x0800f66f
 800f498:	0800f66f 	.word	0x0800f66f
 800f49c:	0800f66f 	.word	0x0800f66f
 800f4a0:	0800f66f 	.word	0x0800f66f
 800f4a4:	0800f66f 	.word	0x0800f66f
 800f4a8:	0800f66f 	.word	0x0800f66f
 800f4ac:	0800f66f 	.word	0x0800f66f
 800f4b0:	0800f66f 	.word	0x0800f66f
 800f4b4:	0800f66f 	.word	0x0800f66f
 800f4b8:	0800f66f 	.word	0x0800f66f
 800f4bc:	0800f66f 	.word	0x0800f66f
 800f4c0:	0800f66f 	.word	0x0800f66f
 800f4c4:	0800f66f 	.word	0x0800f66f
 800f4c8:	0800f66f 	.word	0x0800f66f
 800f4cc:	0800f66f 	.word	0x0800f66f
 800f4d0:	0800f66f 	.word	0x0800f66f
 800f4d4:	0800f66f 	.word	0x0800f66f
 800f4d8:	0800f66f 	.word	0x0800f66f
 800f4dc:	0800f66f 	.word	0x0800f66f
 800f4e0:	0800f66f 	.word	0x0800f66f
 800f4e4:	0800f66f 	.word	0x0800f66f
 800f4e8:	0800f66f 	.word	0x0800f66f
 800f4ec:	0800f66f 	.word	0x0800f66f
 800f4f0:	0800f66f 	.word	0x0800f66f
 800f4f4:	0800f66f 	.word	0x0800f66f
 800f4f8:	0800f66f 	.word	0x0800f66f
 800f4fc:	0800f66f 	.word	0x0800f66f
 800f500:	0800f66f 	.word	0x0800f66f
 800f504:	0800f66f 	.word	0x0800f66f
 800f508:	0800f66f 	.word	0x0800f66f
 800f50c:	0800f66f 	.word	0x0800f66f
 800f510:	0800f66f 	.word	0x0800f66f
 800f514:	0800f66f 	.word	0x0800f66f
 800f518:	0800f66f 	.word	0x0800f66f
 800f51c:	0800f66f 	.word	0x0800f66f
 800f520:	0800f66f 	.word	0x0800f66f
 800f524:	0800f66f 	.word	0x0800f66f
 800f528:	0800f66f 	.word	0x0800f66f
 800f52c:	0800f66f 	.word	0x0800f66f
 800f530:	0800f66f 	.word	0x0800f66f
 800f534:	0800f66f 	.word	0x0800f66f
 800f538:	0800f66f 	.word	0x0800f66f
 800f53c:	0800f66f 	.word	0x0800f66f
 800f540:	0800f66f 	.word	0x0800f66f
 800f544:	0800f66f 	.word	0x0800f66f
 800f548:	0800f66f 	.word	0x0800f66f
 800f54c:	0800f66f 	.word	0x0800f66f
 800f550:	0800f66f 	.word	0x0800f66f
 800f554:	0800f66f 	.word	0x0800f66f
 800f558:	0800f66f 	.word	0x0800f66f
 800f55c:	0800f66f 	.word	0x0800f66f
 800f560:	0800f66f 	.word	0x0800f66f
 800f564:	0800f66f 	.word	0x0800f66f
 800f568:	0800f66f 	.word	0x0800f66f
 800f56c:	0800f66f 	.word	0x0800f66f
 800f570:	0800f66f 	.word	0x0800f66f
 800f574:	0800f66f 	.word	0x0800f66f
 800f578:	0800f66f 	.word	0x0800f66f
 800f57c:	0800f66f 	.word	0x0800f66f
 800f580:	0800f66f 	.word	0x0800f66f
 800f584:	0800f66f 	.word	0x0800f66f
 800f588:	0800f66f 	.word	0x0800f66f
 800f58c:	0800f66f 	.word	0x0800f66f
 800f590:	0800f66f 	.word	0x0800f66f
 800f594:	0800f66f 	.word	0x0800f66f
 800f598:	0800f66f 	.word	0x0800f66f
 800f59c:	0800f66f 	.word	0x0800f66f
 800f5a0:	0800f66f 	.word	0x0800f66f
 800f5a4:	0800f66f 	.word	0x0800f66f
 800f5a8:	0800f66f 	.word	0x0800f66f
 800f5ac:	0800f66f 	.word	0x0800f66f
 800f5b0:	0800f66f 	.word	0x0800f66f
 800f5b4:	0800f66f 	.word	0x0800f66f
 800f5b8:	0800f66f 	.word	0x0800f66f
 800f5bc:	0800f66f 	.word	0x0800f66f
 800f5c0:	0800f66f 	.word	0x0800f66f
 800f5c4:	0800f65f 	.word	0x0800f65f
 800f5c8:	0800f659 	.word	0x0800f659
 800f5cc:	0800f653 	.word	0x0800f653
 800f5d0:	0800f64d 	.word	0x0800f64d
 800f5d4:	0800f647 	.word	0x0800f647
 800f5d8:	0800f641 	.word	0x0800f641
 800f5dc:	0800f63b 	.word	0x0800f63b
 800f5e0:	0800f635 	.word	0x0800f635
 800f5e4:	0800f62f 	.word	0x0800f62f
 800f5e8:	0800f629 	.word	0x0800f629
 800f5ec:	0800f623 	.word	0x0800f623
 800f5f0:	0800f61d 	.word	0x0800f61d
 800f5f4:	0800f617 	.word	0x0800f617
 800f5f8:	0800f611 	.word	0x0800f611
 800f5fc:	0800f60b 	.word	0x0800f60b
 800f600:	0800f605 	.word	0x0800f605
			//----a右スラローム----
			case -1:
				slalom_R90();
 800f604:	f7f7 f94c 	bl	80068a0 <slalom_R90>
				break;
 800f608:	e0d1      	b.n	800f7ae <searchF4+0x41a>

			//----a左スラローム----
			case -2:
				slalom_L90();
 800f60a:	f7f7 fa5f 	bl	8006acc <slalom_L90>
				break;
 800f60e:	e0ce      	b.n	800f7ae <searchF4+0x41a>

			//----a大回り右90----
			case -3:
				Lslalom_R90();
 800f610:	f7f7 fb66 	bl	8006ce0 <Lslalom_R90>
				break;
 800f614:	e0cb      	b.n	800f7ae <searchF4+0x41a>

			//----a大回り左90----
			case -4:
				Lslalom_L90();
 800f616:	f7f7 fc9b 	bl	8006f50 <Lslalom_L90>
				break;
 800f61a:	e0c8      	b.n	800f7ae <searchF4+0x41a>

			//----a大回り右180----
			case -5:
				Lslalom_R180();
 800f61c:	f7f7 fdc4 	bl	80071a8 <Lslalom_R180>
				break;
 800f620:	e0c5      	b.n	800f7ae <searchF4+0x41a>

			//----a大回り左180----
			case -6:
				Lslalom_L180();
 800f622:	f7f7 ff13 	bl	800744c <Lslalom_L180>
				break;
 800f626:	e0c2      	b.n	800f7ae <searchF4+0x41a>

			//----a斜め右V45----
			case -7:
				v_R45();
 800f628:	f7f8 f854 	bl	80076d4 <v_R45>
				break;
 800f62c:	e0bf      	b.n	800f7ae <searchF4+0x41a>

			//----a斜め左V45----
			case -8:
				v_L45();
 800f62e:	f7f8 fa37 	bl	8007aa0 <v_L45>
				break;
 800f632:	e0bc      	b.n	800f7ae <searchF4+0x41a>

			//----a斜め右V90----
			case -9:
				v_R90();
 800f634:	f7f8 feb8 	bl	80083a8 <v_R90>
				break;
 800f638:	e0b9      	b.n	800f7ae <searchF4+0x41a>

			//----a斜め左V90----
			case -10:
				v_L90();
 800f63a:	f7f8 ff85 	bl	8008548 <v_L90>
				break;
 800f63e:	e0b6      	b.n	800f7ae <searchF4+0x41a>

			//----a斜め右V135----
			case -11:
				v_R135();
 800f640:	f7f9 f84a 	bl	80086d8 <v_R135>
				break;
 800f644:	e0b3      	b.n	800f7ae <searchF4+0x41a>

			//----a斜め左V135----
			case -12:
				v_L135();
 800f646:	f7f9 fa31 	bl	8008aac <v_L135>
				break;
 800f64a:	e0b0      	b.n	800f7ae <searchF4+0x41a>

			//----a斜め右V45Goal----
			case -13:
				v_R45D();
 800f64c:	f7f8 fc04 	bl	8007e58 <v_R45D>
				break;
 800f650:	e0ad      	b.n	800f7ae <searchF4+0x41a>

			//----a斜め左V45Goal----
			case -14:
				v_L45D();
 800f652:	f7f8 fd5b 	bl	800810c <v_L45D>
				break;
 800f656:	e0aa      	b.n	800f7ae <searchF4+0x41a>

			//----a斜め右V135Goal----
			case -15:
				v_R135D();
 800f658:	f7f9 fc04 	bl	8008e64 <v_R135D>
				break;
 800f65c:	e0a7      	b.n	800f7ae <searchF4+0x41a>

			//----a斜め左V135Goal----
			case -16:
				v_L135D();
 800f65e:	f7f9 fd5d 	bl	800911c <v_L135D>
				break;
 800f662:	e0a4      	b.n	800f7ae <searchF4+0x41a>

			//----pass配列最後(なお本来呼び出される前にゴールする)----
			case -114:
				rotate_180();
 800f664:	f7f7 f844 	bl	80066f0 <rotate_180>
				rotate_180();
 800f668:	f7f7 f842 	bl	80066f0 <rotate_180>
				while(1);
 800f66c:	e7fe      	b.n	800f66c <searchF4+0x2d8>
				break;

			//----a前進----
			default:
				if(pass[p_cnt-1] < 4){
 800f66e:	4b17      	ldr	r3, [pc, #92]	; (800f6cc <searchF4+0x338>)
 800f670:	781b      	ldrb	r3, [r3, #0]
 800f672:	3b01      	subs	r3, #1
 800f674:	4a17      	ldr	r2, [pc, #92]	; (800f6d4 <searchF4+0x340>)
 800f676:	56d3      	ldrsb	r3, [r2, r3]
 800f678:	2b03      	cmp	r3, #3
 800f67a:	dc11      	bgt.n	800f6a0 <searchF4+0x30c>
					for(int k = 0; k < pass[p_cnt-1]; k++){
 800f67c:	2300      	movs	r3, #0
 800f67e:	60fb      	str	r3, [r7, #12]
 800f680:	e004      	b.n	800f68c <searchF4+0x2f8>
						half_sectionU();
 800f682:	f7f6 fbfd 	bl	8005e80 <half_sectionU>
					for(int k = 0; k < pass[p_cnt-1]; k++){
 800f686:	68fb      	ldr	r3, [r7, #12]
 800f688:	3301      	adds	r3, #1
 800f68a:	60fb      	str	r3, [r7, #12]
 800f68c:	4b0f      	ldr	r3, [pc, #60]	; (800f6cc <searchF4+0x338>)
 800f68e:	781b      	ldrb	r3, [r3, #0]
 800f690:	3b01      	subs	r3, #1
 800f692:	4a10      	ldr	r2, [pc, #64]	; (800f6d4 <searchF4+0x340>)
 800f694:	56d3      	ldrsb	r3, [r2, r3]
 800f696:	461a      	mov	r2, r3
 800f698:	68fb      	ldr	r3, [r7, #12]
 800f69a:	4293      	cmp	r3, r2
 800f69c:	dbf1      	blt.n	800f682 <searchF4+0x2ee>
						p_cnt++;
					}else{
						half_sectionV();
					}
				}
				break;
 800f69e:	e085      	b.n	800f7ac <searchF4+0x418>
				}else if(pass[p_cnt-1] < 64){
 800f6a0:	4b0a      	ldr	r3, [pc, #40]	; (800f6cc <searchF4+0x338>)
 800f6a2:	781b      	ldrb	r3, [r3, #0]
 800f6a4:	3b01      	subs	r3, #1
 800f6a6:	4a0b      	ldr	r2, [pc, #44]	; (800f6d4 <searchF4+0x340>)
 800f6a8:	56d3      	ldrsb	r3, [r2, r3]
 800f6aa:	2b3f      	cmp	r3, #63	; 0x3f
 800f6ac:	dc2e      	bgt.n	800f70c <searchF4+0x378>
					one_sectionA();
 800f6ae:	f7f6 fc07 	bl	8005ec0 <one_sectionA>
					MF2.FLAG.HACCEL = 1;
 800f6b2:	4a0a      	ldr	r2, [pc, #40]	; (800f6dc <searchF4+0x348>)
 800f6b4:	8813      	ldrh	r3, [r2, #0]
 800f6b6:	f043 0302 	orr.w	r3, r3, #2
 800f6ba:	8013      	strh	r3, [r2, #0]
					for(k = 0; k < pass[p_cnt-1]-4; k++){
 800f6bc:	2300      	movs	r3, #0
 800f6be:	60bb      	str	r3, [r7, #8]
 800f6c0:	e013      	b.n	800f6ea <searchF4+0x356>
 800f6c2:	bf00      	nop
 800f6c4:	20000f68 	.word	0x20000f68
 800f6c8:	20000457 	.word	0x20000457
 800f6cc:	200002b0 	.word	0x200002b0
 800f6d0:	200015c8 	.word	0x200015c8
 800f6d4:	20000350 	.word	0x20000350
 800f6d8:	20000c0c 	.word	0x20000c0c
 800f6dc:	20000f64 	.word	0x20000f64
						half_sectionU();
 800f6e0:	f7f6 fbce 	bl	8005e80 <half_sectionU>
					for(k = 0; k < pass[p_cnt-1]-4; k++){
 800f6e4:	68bb      	ldr	r3, [r7, #8]
 800f6e6:	3301      	adds	r3, #1
 800f6e8:	60bb      	str	r3, [r7, #8]
 800f6ea:	4b6a      	ldr	r3, [pc, #424]	; (800f894 <searchF4+0x500>)
 800f6ec:	781b      	ldrb	r3, [r3, #0]
 800f6ee:	3b01      	subs	r3, #1
 800f6f0:	4a69      	ldr	r2, [pc, #420]	; (800f898 <searchF4+0x504>)
 800f6f2:	56d3      	ldrsb	r3, [r2, r3]
 800f6f4:	3b04      	subs	r3, #4
 800f6f6:	68ba      	ldr	r2, [r7, #8]
 800f6f8:	429a      	cmp	r2, r3
 800f6fa:	dbf1      	blt.n	800f6e0 <searchF4+0x34c>
					one_sectionD();
 800f6fc:	f7f6 fc6c 	bl	8005fd8 <one_sectionD>
					MF2.FLAG.HACCEL = 0;
 800f700:	4a66      	ldr	r2, [pc, #408]	; (800f89c <searchF4+0x508>)
 800f702:	8813      	ldrh	r3, [r2, #0]
 800f704:	f36f 0341 	bfc	r3, #1, #1
 800f708:	8013      	strh	r3, [r2, #0]
				break;
 800f70a:	e04f      	b.n	800f7ac <searchF4+0x418>
					if((pass[p_cnt] == 64) && (pass[p_cnt+1] == 64) && (pass[p_cnt+2] == 64) && (MF2.FLAG.HACCEL == 0)){
 800f70c:	4b61      	ldr	r3, [pc, #388]	; (800f894 <searchF4+0x500>)
 800f70e:	781b      	ldrb	r3, [r3, #0]
 800f710:	461a      	mov	r2, r3
 800f712:	4b61      	ldr	r3, [pc, #388]	; (800f898 <searchF4+0x504>)
 800f714:	569b      	ldrsb	r3, [r3, r2]
 800f716:	2b40      	cmp	r3, #64	; 0x40
 800f718:	d122      	bne.n	800f760 <searchF4+0x3cc>
 800f71a:	4b5e      	ldr	r3, [pc, #376]	; (800f894 <searchF4+0x500>)
 800f71c:	781b      	ldrb	r3, [r3, #0]
 800f71e:	3301      	adds	r3, #1
 800f720:	4a5d      	ldr	r2, [pc, #372]	; (800f898 <searchF4+0x504>)
 800f722:	56d3      	ldrsb	r3, [r2, r3]
 800f724:	2b40      	cmp	r3, #64	; 0x40
 800f726:	d11b      	bne.n	800f760 <searchF4+0x3cc>
 800f728:	4b5a      	ldr	r3, [pc, #360]	; (800f894 <searchF4+0x500>)
 800f72a:	781b      	ldrb	r3, [r3, #0]
 800f72c:	3302      	adds	r3, #2
 800f72e:	4a5a      	ldr	r2, [pc, #360]	; (800f898 <searchF4+0x504>)
 800f730:	56d3      	ldrsb	r3, [r2, r3]
 800f732:	2b40      	cmp	r3, #64	; 0x40
 800f734:	d114      	bne.n	800f760 <searchF4+0x3cc>
 800f736:	4b59      	ldr	r3, [pc, #356]	; (800f89c <searchF4+0x508>)
 800f738:	881b      	ldrh	r3, [r3, #0]
 800f73a:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800f73e:	b2db      	uxtb	r3, r3
 800f740:	2b00      	cmp	r3, #0
 800f742:	d10d      	bne.n	800f760 <searchF4+0x3cc>
						one_sectionVA();
 800f744:	f7f6 fce6 	bl	8006114 <one_sectionVA>
						MF2.FLAG.HACCEL = 1;
 800f748:	4a54      	ldr	r2, [pc, #336]	; (800f89c <searchF4+0x508>)
 800f74a:	8813      	ldrh	r3, [r2, #0]
 800f74c:	f043 0302 	orr.w	r3, r3, #2
 800f750:	8013      	strh	r3, [r2, #0]
						p_cnt++;
 800f752:	4b50      	ldr	r3, [pc, #320]	; (800f894 <searchF4+0x500>)
 800f754:	781b      	ldrb	r3, [r3, #0]
 800f756:	3301      	adds	r3, #1
 800f758:	b2da      	uxtb	r2, r3
 800f75a:	4b4e      	ldr	r3, [pc, #312]	; (800f894 <searchF4+0x500>)
 800f75c:	701a      	strb	r2, [r3, #0]
 800f75e:	e025      	b.n	800f7ac <searchF4+0x418>
					else if((pass[p_cnt] == 64) && (pass[p_cnt+1] != 64) && (MF2.FLAG.HACCEL == 1)){
 800f760:	4b4c      	ldr	r3, [pc, #304]	; (800f894 <searchF4+0x500>)
 800f762:	781b      	ldrb	r3, [r3, #0]
 800f764:	461a      	mov	r2, r3
 800f766:	4b4c      	ldr	r3, [pc, #304]	; (800f898 <searchF4+0x504>)
 800f768:	569b      	ldrsb	r3, [r3, r2]
 800f76a:	2b40      	cmp	r3, #64	; 0x40
 800f76c:	d11b      	bne.n	800f7a6 <searchF4+0x412>
 800f76e:	4b49      	ldr	r3, [pc, #292]	; (800f894 <searchF4+0x500>)
 800f770:	781b      	ldrb	r3, [r3, #0]
 800f772:	3301      	adds	r3, #1
 800f774:	4a48      	ldr	r2, [pc, #288]	; (800f898 <searchF4+0x504>)
 800f776:	56d3      	ldrsb	r3, [r2, r3]
 800f778:	2b40      	cmp	r3, #64	; 0x40
 800f77a:	d014      	beq.n	800f7a6 <searchF4+0x412>
 800f77c:	4b47      	ldr	r3, [pc, #284]	; (800f89c <searchF4+0x508>)
 800f77e:	881b      	ldrh	r3, [r3, #0]
 800f780:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800f784:	b2db      	uxtb	r3, r3
 800f786:	2b01      	cmp	r3, #1
 800f788:	d10d      	bne.n	800f7a6 <searchF4+0x412>
						one_sectionVD();
 800f78a:	f7f6 fd49 	bl	8006220 <one_sectionVD>
						MF2.FLAG.HACCEL = 0;
 800f78e:	4a43      	ldr	r2, [pc, #268]	; (800f89c <searchF4+0x508>)
 800f790:	8813      	ldrh	r3, [r2, #0]
 800f792:	f36f 0341 	bfc	r3, #1, #1
 800f796:	8013      	strh	r3, [r2, #0]
						p_cnt++;
 800f798:	4b3e      	ldr	r3, [pc, #248]	; (800f894 <searchF4+0x500>)
 800f79a:	781b      	ldrb	r3, [r3, #0]
 800f79c:	3301      	adds	r3, #1
 800f79e:	b2da      	uxtb	r2, r3
 800f7a0:	4b3c      	ldr	r3, [pc, #240]	; (800f894 <searchF4+0x500>)
 800f7a2:	701a      	strb	r2, [r3, #0]
 800f7a4:	e002      	b.n	800f7ac <searchF4+0x418>
						half_sectionV();
 800f7a6:	f7f6 fb77 	bl	8005e98 <half_sectionV>
				break;
 800f7aa:	e7ff      	b.n	800f7ac <searchF4+0x418>
 800f7ac:	bf00      	nop
		}

	}while(pass[p_cnt] != -114);
 800f7ae:	4b39      	ldr	r3, [pc, #228]	; (800f894 <searchF4+0x500>)
 800f7b0:	781b      	ldrb	r3, [r3, #0]
 800f7b2:	461a      	mov	r2, r3
 800f7b4:	4b38      	ldr	r3, [pc, #224]	; (800f898 <searchF4+0x504>)
 800f7b6:	569b      	ldrsb	r3, [r3, r2]
 800f7b8:	f113 0f72 	cmn.w	r3, #114	; 0x72
 800f7bc:	f47f ae2e 	bne.w	800f41c <searchF4+0x88>

	mouse.x = goal_x;
 800f7c0:	4b37      	ldr	r3, [pc, #220]	; (800f8a0 <searchF4+0x50c>)
 800f7c2:	781a      	ldrb	r2, [r3, #0]
 800f7c4:	4b37      	ldr	r3, [pc, #220]	; (800f8a4 <searchF4+0x510>)
 800f7c6:	701a      	strb	r2, [r3, #0]
	mouse.y = goal_y;
 800f7c8:	4b37      	ldr	r3, [pc, #220]	; (800f8a8 <searchF4+0x514>)
 800f7ca:	781a      	ldrb	r2, [r3, #0]
 800f7cc:	4b35      	ldr	r3, [pc, #212]	; (800f8a4 <searchF4+0x510>)
 800f7ce:	705a      	strb	r2, [r3, #1]
	mouse.dir = mouse.dir / 2;
 800f7d0:	4b34      	ldr	r3, [pc, #208]	; (800f8a4 <searchF4+0x510>)
 800f7d2:	789b      	ldrb	r3, [r3, #2]
 800f7d4:	b2db      	uxtb	r3, r3
 800f7d6:	085b      	lsrs	r3, r3, #1
 800f7d8:	b2da      	uxtb	r2, r3
 800f7da:	4b32      	ldr	r3, [pc, #200]	; (800f8a4 <searchF4+0x510>)
 800f7dc:	709a      	strb	r2, [r3, #2]
	MF.FLAG.XDIR = 0;
 800f7de:	4a33      	ldr	r2, [pc, #204]	; (800f8ac <searchF4+0x518>)
 800f7e0:	8813      	ldrh	r3, [r2, #0]
 800f7e2:	f36f 330c 	bfc	r3, #12, #1
 800f7e6:	8013      	strh	r3, [r2, #0]

	if(pass[p_cnt-1] != -13 && pass[p_cnt-1] != -14 && pass[p_cnt-1] != -15 && pass[p_cnt-1] != -16){
 800f7e8:	4b2a      	ldr	r3, [pc, #168]	; (800f894 <searchF4+0x500>)
 800f7ea:	781b      	ldrb	r3, [r3, #0]
 800f7ec:	3b01      	subs	r3, #1
 800f7ee:	4a2a      	ldr	r2, [pc, #168]	; (800f898 <searchF4+0x504>)
 800f7f0:	56d3      	ldrsb	r3, [r2, r3]
 800f7f2:	f113 0f0d 	cmn.w	r3, #13
 800f7f6:	d02c      	beq.n	800f852 <searchF4+0x4be>
 800f7f8:	4b26      	ldr	r3, [pc, #152]	; (800f894 <searchF4+0x500>)
 800f7fa:	781b      	ldrb	r3, [r3, #0]
 800f7fc:	3b01      	subs	r3, #1
 800f7fe:	4a26      	ldr	r2, [pc, #152]	; (800f898 <searchF4+0x504>)
 800f800:	56d3      	ldrsb	r3, [r2, r3]
 800f802:	f113 0f0e 	cmn.w	r3, #14
 800f806:	d024      	beq.n	800f852 <searchF4+0x4be>
 800f808:	4b22      	ldr	r3, [pc, #136]	; (800f894 <searchF4+0x500>)
 800f80a:	781b      	ldrb	r3, [r3, #0]
 800f80c:	3b01      	subs	r3, #1
 800f80e:	4a22      	ldr	r2, [pc, #136]	; (800f898 <searchF4+0x504>)
 800f810:	56d3      	ldrsb	r3, [r2, r3]
 800f812:	f113 0f0f 	cmn.w	r3, #15
 800f816:	d01c      	beq.n	800f852 <searchF4+0x4be>
 800f818:	4b1e      	ldr	r3, [pc, #120]	; (800f894 <searchF4+0x500>)
 800f81a:	781b      	ldrb	r3, [r3, #0]
 800f81c:	3b01      	subs	r3, #1
 800f81e:	4a1e      	ldr	r2, [pc, #120]	; (800f898 <searchF4+0x504>)
 800f820:	56d3      	ldrsb	r3, [r2, r3]
 800f822:	f113 0f10 	cmn.w	r3, #16
 800f826:	d014      	beq.n	800f852 <searchF4+0x4be>
		for(int j=0; j<goal_mode-1; j++){
 800f828:	2300      	movs	r3, #0
 800f82a:	607b      	str	r3, [r7, #4]
 800f82c:	e006      	b.n	800f83c <searchF4+0x4a8>
			one_sectionU();
 800f82e:	f7f6 fd8f 	bl	8006350 <one_sectionU>
			adv_pos();
 800f832:	f000 f841 	bl	800f8b8 <adv_pos>
		for(int j=0; j<goal_mode-1; j++){
 800f836:	687b      	ldr	r3, [r7, #4]
 800f838:	3301      	adds	r3, #1
 800f83a:	607b      	str	r3, [r7, #4]
 800f83c:	4b1c      	ldr	r3, [pc, #112]	; (800f8b0 <searchF4+0x51c>)
 800f83e:	781b      	ldrb	r3, [r3, #0]
 800f840:	3b01      	subs	r3, #1
 800f842:	687a      	ldr	r2, [r7, #4]
 800f844:	429a      	cmp	r2, r3
 800f846:	dbf2      	blt.n	800f82e <searchF4+0x49a>
		}
		half_sectionD();
 800f848:	f7f6 f9fe 	bl	8005c48 <half_sectionD>
		set_positionF();
 800f84c:	f7f6 f844 	bl	80058d8 <set_positionF>
 800f850:	e00f      	b.n	800f872 <searchF4+0x4de>
	}else{														//a減速斜めでgoalする場合
		for(int j=0; j<goal_mode-1; j++){
 800f852:	2300      	movs	r3, #0
 800f854:	603b      	str	r3, [r7, #0]
 800f856:	e006      	b.n	800f866 <searchF4+0x4d2>
			one_section();
 800f858:	f7f6 fb2a 	bl	8005eb0 <one_section>
			adv_pos();
 800f85c:	f000 f82c 	bl	800f8b8 <adv_pos>
		for(int j=0; j<goal_mode-1; j++){
 800f860:	683b      	ldr	r3, [r7, #0]
 800f862:	3301      	adds	r3, #1
 800f864:	603b      	str	r3, [r7, #0]
 800f866:	4b12      	ldr	r3, [pc, #72]	; (800f8b0 <searchF4+0x51c>)
 800f868:	781b      	ldrb	r3, [r3, #0]
 800f86a:	3b01      	subs	r3, #1
 800f86c:	683a      	ldr	r2, [r7, #0]
 800f86e:	429a      	cmp	r2, r3
 800f870:	dbf2      	blt.n	800f858 <searchF4+0x4c4>
		}
	}
	HAL_Delay(500);
 800f872:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800f876:	f7f1 fbd1 	bl	800101c <HAL_Delay>
	rotate_180();											//180度回転
 800f87a:	f7f6 ff39 	bl	80066f0 <rotate_180>
//	driveC2(SETPOS_BACK); 							        //a尻を当てる程度に後退。回転後に停止する
//	degree_z = target_degree_z;
//	start_mode = 0;
	start_mode = 1;
 800f87e:	4b0d      	ldr	r3, [pc, #52]	; (800f8b4 <searchF4+0x520>)
 800f880:	2201      	movs	r2, #1
 800f882:	701a      	strb	r2, [r3, #0]
	goal_mode = 1;
 800f884:	4b0a      	ldr	r3, [pc, #40]	; (800f8b0 <searchF4+0x51c>)
 800f886:	2201      	movs	r2, #1
 800f888:	701a      	strb	r2, [r3, #0]
}
 800f88a:	bf00      	nop
 800f88c:	3710      	adds	r7, #16
 800f88e:	46bd      	mov	sp, r7
 800f890:	bd80      	pop	{r7, pc}
 800f892:	bf00      	nop
 800f894:	200002b0 	.word	0x200002b0
 800f898:	20000350 	.word	0x20000350
 800f89c:	20000f64 	.word	0x20000f64
 800f8a0:	20000bb0 	.word	0x20000bb0
 800f8a4:	20000c0c 	.word	0x20000c0c
 800f8a8:	20000b4c 	.word	0x20000b4c
 800f8ac:	20000f68 	.word	0x20000f68
 800f8b0:	20000bb1 	.word	0x20000bb1
 800f8b4:	200015c8 	.word	0x200015c8

0800f8b8 <adv_pos>:
//adv_pos
//aマイクロマウス内部位置情報で前進させる
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void adv_pos(){
 800f8b8:	b480      	push	{r7}
 800f8ba:	af00      	add	r7, sp, #0

	switch(mouse.dir){										//aマイクロマウスが現在向いている方向で判定
 800f8bc:	4b1a      	ldr	r3, [pc, #104]	; (800f928 <adv_pos+0x70>)
 800f8be:	789b      	ldrb	r3, [r3, #2]
 800f8c0:	b2db      	uxtb	r3, r3
 800f8c2:	2b03      	cmp	r3, #3
 800f8c4:	d82a      	bhi.n	800f91c <adv_pos+0x64>
 800f8c6:	a201      	add	r2, pc, #4	; (adr r2, 800f8cc <adv_pos+0x14>)
 800f8c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f8cc:	0800f8dd 	.word	0x0800f8dd
 800f8d0:	0800f8ed 	.word	0x0800f8ed
 800f8d4:	0800f8fd 	.word	0x0800f8fd
 800f8d8:	0800f90d 	.word	0x0800f90d
	case 0x00:												//a北方向に向いている場合
		mouse.y++;											//Y座標をインクリメント
 800f8dc:	4b12      	ldr	r3, [pc, #72]	; (800f928 <adv_pos+0x70>)
 800f8de:	785b      	ldrb	r3, [r3, #1]
 800f8e0:	b2db      	uxtb	r3, r3
 800f8e2:	3301      	adds	r3, #1
 800f8e4:	b2da      	uxtb	r2, r3
 800f8e6:	4b10      	ldr	r3, [pc, #64]	; (800f928 <adv_pos+0x70>)
 800f8e8:	705a      	strb	r2, [r3, #1]
		break;
 800f8ea:	e017      	b.n	800f91c <adv_pos+0x64>
	case 0x01:												//a東方向に向いている場合
		mouse.x++;											//X座標をインクリメント
 800f8ec:	4b0e      	ldr	r3, [pc, #56]	; (800f928 <adv_pos+0x70>)
 800f8ee:	781b      	ldrb	r3, [r3, #0]
 800f8f0:	b2db      	uxtb	r3, r3
 800f8f2:	3301      	adds	r3, #1
 800f8f4:	b2da      	uxtb	r2, r3
 800f8f6:	4b0c      	ldr	r3, [pc, #48]	; (800f928 <adv_pos+0x70>)
 800f8f8:	701a      	strb	r2, [r3, #0]
		break;
 800f8fa:	e00f      	b.n	800f91c <adv_pos+0x64>
	case 0x02:												//a南方向に向いている場合
		mouse.y--;											//Y座標をデクリメント
 800f8fc:	4b0a      	ldr	r3, [pc, #40]	; (800f928 <adv_pos+0x70>)
 800f8fe:	785b      	ldrb	r3, [r3, #1]
 800f900:	b2db      	uxtb	r3, r3
 800f902:	3b01      	subs	r3, #1
 800f904:	b2da      	uxtb	r2, r3
 800f906:	4b08      	ldr	r3, [pc, #32]	; (800f928 <adv_pos+0x70>)
 800f908:	705a      	strb	r2, [r3, #1]
		break;
 800f90a:	e007      	b.n	800f91c <adv_pos+0x64>
	case 0x03:												//a西方向に向いている場合
		mouse.x--;											//X座標をデクリメント
 800f90c:	4b06      	ldr	r3, [pc, #24]	; (800f928 <adv_pos+0x70>)
 800f90e:	781b      	ldrb	r3, [r3, #0]
 800f910:	b2db      	uxtb	r3, r3
 800f912:	3b01      	subs	r3, #1
 800f914:	b2da      	uxtb	r2, r3
 800f916:	4b04      	ldr	r3, [pc, #16]	; (800f928 <adv_pos+0x70>)
 800f918:	701a      	strb	r2, [r3, #0]
		break;
 800f91a:	bf00      	nop
	}
}
 800f91c:	bf00      	nop
 800f91e:	46bd      	mov	sp, r7
 800f920:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f924:	4770      	bx	lr
 800f926:	bf00      	nop
 800f928:	20000c0c 	.word	0x20000c0c

0800f92c <conf_route>:
//conf_route
//a進路を判定する
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void conf_route(){
 800f92c:	b580      	push	{r7, lr}
 800f92e:	af00      	add	r7, sp, #0

	//----a壁情報書き込み----
	write_map();
 800f930:	f000 f886 	bl	800fa40 <write_map>

	//----a最短経路上に壁があれば進路変更----
	if(wall_info & route[r_cnt]){
 800f934:	4b09      	ldr	r3, [pc, #36]	; (800f95c <conf_route+0x30>)
 800f936:	781b      	ldrb	r3, [r3, #0]
 800f938:	461a      	mov	r2, r3
 800f93a:	4b09      	ldr	r3, [pc, #36]	; (800f960 <conf_route+0x34>)
 800f93c:	5c9a      	ldrb	r2, [r3, r2]
 800f93e:	4b09      	ldr	r3, [pc, #36]	; (800f964 <conf_route+0x38>)
 800f940:	781b      	ldrb	r3, [r3, #0]
 800f942:	4013      	ands	r3, r2
 800f944:	b2db      	uxtb	r3, r3
 800f946:	2b00      	cmp	r3, #0
 800f948:	d006      	beq.n	800f958 <conf_route+0x2c>
		make_smap();										//a歩数マップを更新
 800f94a:	f000 fa6d 	bl	800fe28 <make_smap>
		make_route();										//a最短経路を更新
 800f94e:	f000 fe29 	bl	80105a4 <make_route>
		r_cnt = 0;											//a経路カウンタを0に
 800f952:	4b02      	ldr	r3, [pc, #8]	; (800f95c <conf_route+0x30>)
 800f954:	2200      	movs	r2, #0
 800f956:	701a      	strb	r2, [r3, #0]
	}
}
 800f958:	bf00      	nop
 800f95a:	bd80      	pop	{r7, pc}
 800f95c:	200015d0 	.word	0x200015d0
 800f960:	20000c54 	.word	0x20000c54
 800f964:	200002c8 	.word	0x200002c8

0800f968 <map_Init>:
//map_Init
//aマップ格納配列map[][]の初期化をする
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void map_Init(){
 800f968:	b480      	push	{r7}
 800f96a:	b083      	sub	sp, #12
 800f96c:	af00      	add	r7, sp, #0
	//====a変数宣言====
	uint8_t x, y;											//for文用変数

	//====a初期化開始====
	//aマップのクリア
	for(y = 0; y <= 15; y++){								//a各Y座標で実行
 800f96e:	2300      	movs	r3, #0
 800f970:	71bb      	strb	r3, [r7, #6]
 800f972:	e013      	b.n	800f99c <map_Init+0x34>
		for(x = 0; x <= 15; x++){							//a各X座標で実行
 800f974:	2300      	movs	r3, #0
 800f976:	71fb      	strb	r3, [r7, #7]
 800f978:	e00a      	b.n	800f990 <map_Init+0x28>
			map[y][x] = 0xf0;								//a上位4ビット（2次走行時）を壁あり，下位4ビット（1次走行時）を壁なしとする。
 800f97a:	79ba      	ldrb	r2, [r7, #6]
 800f97c:	79fb      	ldrb	r3, [r7, #7]
 800f97e:	492f      	ldr	r1, [pc, #188]	; (800fa3c <map_Init+0xd4>)
 800f980:	0112      	lsls	r2, r2, #4
 800f982:	440a      	add	r2, r1
 800f984:	4413      	add	r3, r2
 800f986:	22f0      	movs	r2, #240	; 0xf0
 800f988:	701a      	strb	r2, [r3, #0]
		for(x = 0; x <= 15; x++){							//a各X座標で実行
 800f98a:	79fb      	ldrb	r3, [r7, #7]
 800f98c:	3301      	adds	r3, #1
 800f98e:	71fb      	strb	r3, [r7, #7]
 800f990:	79fb      	ldrb	r3, [r7, #7]
 800f992:	2b0f      	cmp	r3, #15
 800f994:	d9f1      	bls.n	800f97a <map_Init+0x12>
	for(y = 0; y <= 15; y++){								//a各Y座標で実行
 800f996:	79bb      	ldrb	r3, [r7, #6]
 800f998:	3301      	adds	r3, #1
 800f99a:	71bb      	strb	r3, [r7, #6]
 800f99c:	79bb      	ldrb	r3, [r7, #6]
 800f99e:	2b0f      	cmp	r3, #15
 800f9a0:	d9e8      	bls.n	800f974 <map_Init+0xc>
		}
	}

	//a確定壁の配置
	for(y = 0; y <= 15; y++){								//a各Y座標で実行
 800f9a2:	2300      	movs	r3, #0
 800f9a4:	71bb      	strb	r3, [r7, #6]
 800f9a6:	e020      	b.n	800f9ea <map_Init+0x82>
		map[y][0] |= 0xf1;									//a最西に壁を配置
 800f9a8:	79bb      	ldrb	r3, [r7, #6]
 800f9aa:	4a24      	ldr	r2, [pc, #144]	; (800fa3c <map_Init+0xd4>)
 800f9ac:	011b      	lsls	r3, r3, #4
 800f9ae:	4413      	add	r3, r2
 800f9b0:	781a      	ldrb	r2, [r3, #0]
 800f9b2:	79bb      	ldrb	r3, [r7, #6]
 800f9b4:	f062 020e 	orn	r2, r2, #14
 800f9b8:	b2d1      	uxtb	r1, r2
 800f9ba:	4a20      	ldr	r2, [pc, #128]	; (800fa3c <map_Init+0xd4>)
 800f9bc:	011b      	lsls	r3, r3, #4
 800f9be:	4413      	add	r3, r2
 800f9c0:	460a      	mov	r2, r1
 800f9c2:	701a      	strb	r2, [r3, #0]
		map[y][15] |= 0xf4;									//a最東に壁を配置
 800f9c4:	79bb      	ldrb	r3, [r7, #6]
 800f9c6:	4a1d      	ldr	r2, [pc, #116]	; (800fa3c <map_Init+0xd4>)
 800f9c8:	011b      	lsls	r3, r3, #4
 800f9ca:	4413      	add	r3, r2
 800f9cc:	330f      	adds	r3, #15
 800f9ce:	781a      	ldrb	r2, [r3, #0]
 800f9d0:	79bb      	ldrb	r3, [r7, #6]
 800f9d2:	f062 020b 	orn	r2, r2, #11
 800f9d6:	b2d1      	uxtb	r1, r2
 800f9d8:	4a18      	ldr	r2, [pc, #96]	; (800fa3c <map_Init+0xd4>)
 800f9da:	011b      	lsls	r3, r3, #4
 800f9dc:	4413      	add	r3, r2
 800f9de:	330f      	adds	r3, #15
 800f9e0:	460a      	mov	r2, r1
 800f9e2:	701a      	strb	r2, [r3, #0]
	for(y = 0; y <= 15; y++){								//a各Y座標で実行
 800f9e4:	79bb      	ldrb	r3, [r7, #6]
 800f9e6:	3301      	adds	r3, #1
 800f9e8:	71bb      	strb	r3, [r7, #6]
 800f9ea:	79bb      	ldrb	r3, [r7, #6]
 800f9ec:	2b0f      	cmp	r3, #15
 800f9ee:	d9db      	bls.n	800f9a8 <map_Init+0x40>
	}
	for(x = 0; x <= 15; x++){								//a各X座標で実行
 800f9f0:	2300      	movs	r3, #0
 800f9f2:	71fb      	strb	r3, [r7, #7]
 800f9f4:	e019      	b.n	800fa2a <map_Init+0xc2>
		map[0][x] |= 0xf2;									//a最南に壁を配置
 800f9f6:	79fb      	ldrb	r3, [r7, #7]
 800f9f8:	4a10      	ldr	r2, [pc, #64]	; (800fa3c <map_Init+0xd4>)
 800f9fa:	5cd2      	ldrb	r2, [r2, r3]
 800f9fc:	79fb      	ldrb	r3, [r7, #7]
 800f9fe:	f062 020d 	orn	r2, r2, #13
 800fa02:	b2d1      	uxtb	r1, r2
 800fa04:	4a0d      	ldr	r2, [pc, #52]	; (800fa3c <map_Init+0xd4>)
 800fa06:	54d1      	strb	r1, [r2, r3]
		map[15][x] |= 0xf8;									//a最北に壁を配置
 800fa08:	79fb      	ldrb	r3, [r7, #7]
 800fa0a:	4a0c      	ldr	r2, [pc, #48]	; (800fa3c <map_Init+0xd4>)
 800fa0c:	4413      	add	r3, r2
 800fa0e:	f893 20f0 	ldrb.w	r2, [r3, #240]	; 0xf0
 800fa12:	79fb      	ldrb	r3, [r7, #7]
 800fa14:	f062 0207 	orn	r2, r2, #7
 800fa18:	b2d1      	uxtb	r1, r2
 800fa1a:	4a08      	ldr	r2, [pc, #32]	; (800fa3c <map_Init+0xd4>)
 800fa1c:	4413      	add	r3, r2
 800fa1e:	460a      	mov	r2, r1
 800fa20:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
	for(x = 0; x <= 15; x++){								//a各X座標で実行
 800fa24:	79fb      	ldrb	r3, [r7, #7]
 800fa26:	3301      	adds	r3, #1
 800fa28:	71fb      	strb	r3, [r7, #7]
 800fa2a:	79fb      	ldrb	r3, [r7, #7]
 800fa2c:	2b0f      	cmp	r3, #15
 800fa2e:	d9e2      	bls.n	800f9f6 <map_Init+0x8e>
	}
}
 800fa30:	bf00      	nop
 800fa32:	370c      	adds	r7, #12
 800fa34:	46bd      	mov	sp, r7
 800fa36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa3a:	4770      	bx	lr
 800fa3c:	200001ac 	.word	0x200001ac

0800fa40 <write_map>:
//write_map
//aマップデータを書き込む
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void write_map(){
 800fa40:	b490      	push	{r4, r7}
 800fa42:	b082      	sub	sp, #8
 800fa44:	af00      	add	r7, sp, #0

	//====a変数宣言====
	uint8_t m_temp;											//a向きを補正した壁情報

	//====a壁情報の補正格納====
	m_temp = (wall_info >> mouse.dir) & 0x0f;				//aセンサ壁情報をmouse.dirで向きを補正させて下位4bit分を残す
 800fa46:	4b8f      	ldr	r3, [pc, #572]	; (800fc84 <write_map+0x244>)
 800fa48:	781b      	ldrb	r3, [r3, #0]
 800fa4a:	461a      	mov	r2, r3
 800fa4c:	4b8e      	ldr	r3, [pc, #568]	; (800fc88 <write_map+0x248>)
 800fa4e:	789b      	ldrb	r3, [r3, #2]
 800fa50:	b2db      	uxtb	r3, r3
 800fa52:	fa42 f303 	asr.w	r3, r2, r3
 800fa56:	b2db      	uxtb	r3, r3
 800fa58:	f003 030f 	and.w	r3, r3, #15
 800fa5c:	71fb      	strb	r3, [r7, #7]
	m_temp |= (m_temp << 4);								//a上位4bitに下位4bitをコピー。この作業でm_tempにNESW順で壁が格納
 800fa5e:	79fb      	ldrb	r3, [r7, #7]
 800fa60:	011b      	lsls	r3, r3, #4
 800fa62:	b25a      	sxtb	r2, r3
 800fa64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800fa68:	4313      	orrs	r3, r2
 800fa6a:	b25b      	sxtb	r3, r3
 800fa6c:	71fb      	strb	r3, [r7, #7]

	//====aデータの書き込み====
	map[mouse.y][mouse.x] = m_temp; 						//a現在地に壁情報書き込み
 800fa6e:	4b86      	ldr	r3, [pc, #536]	; (800fc88 <write_map+0x248>)
 800fa70:	785b      	ldrb	r3, [r3, #1]
 800fa72:	b2db      	uxtb	r3, r3
 800fa74:	4618      	mov	r0, r3
 800fa76:	4b84      	ldr	r3, [pc, #528]	; (800fc88 <write_map+0x248>)
 800fa78:	781b      	ldrb	r3, [r3, #0]
 800fa7a:	b2db      	uxtb	r3, r3
 800fa7c:	4619      	mov	r1, r3
 800fa7e:	4a83      	ldr	r2, [pc, #524]	; (800fc8c <write_map+0x24c>)
 800fa80:	0103      	lsls	r3, r0, #4
 800fa82:	4413      	add	r3, r2
 800fa84:	440b      	add	r3, r1
 800fa86:	79fa      	ldrb	r2, [r7, #7]
 800fa88:	701a      	strb	r2, [r3, #0]
	//----a周辺に書き込む----
	//a北側について
	if(mouse.y != 15){										//a現在最北端でないとき
 800fa8a:	4b7f      	ldr	r3, [pc, #508]	; (800fc88 <write_map+0x248>)
 800fa8c:	785b      	ldrb	r3, [r3, #1]
 800fa8e:	b2db      	uxtb	r3, r3
 800fa90:	2b0f      	cmp	r3, #15
 800fa92:	d039      	beq.n	800fb08 <write_map+0xc8>
		if(m_temp & 0x88){									//a北壁がある場合
 800fa94:	79fb      	ldrb	r3, [r7, #7]
 800fa96:	f003 0388 	and.w	r3, r3, #136	; 0x88
 800fa9a:	2b00      	cmp	r3, #0
 800fa9c:	d01a      	beq.n	800fad4 <write_map+0x94>
			map[mouse.y + 1][mouse.x] |= 0x22;				//a北側の区画から見て南壁ありを書き込む
 800fa9e:	4b7a      	ldr	r3, [pc, #488]	; (800fc88 <write_map+0x248>)
 800faa0:	785b      	ldrb	r3, [r3, #1]
 800faa2:	b2d8      	uxtb	r0, r3
 800faa4:	4603      	mov	r3, r0
 800faa6:	3301      	adds	r3, #1
 800faa8:	4a77      	ldr	r2, [pc, #476]	; (800fc88 <write_map+0x248>)
 800faaa:	7812      	ldrb	r2, [r2, #0]
 800faac:	b2d1      	uxtb	r1, r2
 800faae:	460c      	mov	r4, r1
 800fab0:	4a76      	ldr	r2, [pc, #472]	; (800fc8c <write_map+0x24c>)
 800fab2:	011b      	lsls	r3, r3, #4
 800fab4:	4413      	add	r3, r2
 800fab6:	4423      	add	r3, r4
 800fab8:	781a      	ldrb	r2, [r3, #0]
 800faba:	4603      	mov	r3, r0
 800fabc:	3301      	adds	r3, #1
 800fabe:	4608      	mov	r0, r1
 800fac0:	f042 0222 	orr.w	r2, r2, #34	; 0x22
 800fac4:	b2d1      	uxtb	r1, r2
 800fac6:	4a71      	ldr	r2, [pc, #452]	; (800fc8c <write_map+0x24c>)
 800fac8:	011b      	lsls	r3, r3, #4
 800faca:	4413      	add	r3, r2
 800facc:	4403      	add	r3, r0
 800face:	460a      	mov	r2, r1
 800fad0:	701a      	strb	r2, [r3, #0]
 800fad2:	e019      	b.n	800fb08 <write_map+0xc8>
		}else{												//a北壁がない場合
			map[mouse.y + 1][mouse.x] &= 0xDD;				//a北側の区画から見て南壁なしを書き込む
 800fad4:	4b6c      	ldr	r3, [pc, #432]	; (800fc88 <write_map+0x248>)
 800fad6:	785b      	ldrb	r3, [r3, #1]
 800fad8:	b2d8      	uxtb	r0, r3
 800fada:	4603      	mov	r3, r0
 800fadc:	3301      	adds	r3, #1
 800fade:	4a6a      	ldr	r2, [pc, #424]	; (800fc88 <write_map+0x248>)
 800fae0:	7812      	ldrb	r2, [r2, #0]
 800fae2:	b2d1      	uxtb	r1, r2
 800fae4:	460c      	mov	r4, r1
 800fae6:	4a69      	ldr	r2, [pc, #420]	; (800fc8c <write_map+0x24c>)
 800fae8:	011b      	lsls	r3, r3, #4
 800faea:	4413      	add	r3, r2
 800faec:	4423      	add	r3, r4
 800faee:	781a      	ldrb	r2, [r3, #0]
 800faf0:	4603      	mov	r3, r0
 800faf2:	3301      	adds	r3, #1
 800faf4:	4608      	mov	r0, r1
 800faf6:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 800fafa:	b2d1      	uxtb	r1, r2
 800fafc:	4a63      	ldr	r2, [pc, #396]	; (800fc8c <write_map+0x24c>)
 800fafe:	011b      	lsls	r3, r3, #4
 800fb00:	4413      	add	r3, r2
 800fb02:	4403      	add	r3, r0
 800fb04:	460a      	mov	r2, r1
 800fb06:	701a      	strb	r2, [r3, #0]
		}
	}
	//a東側について
	if(mouse.x != 15){										//a現在最東端でないとき
 800fb08:	4b5f      	ldr	r3, [pc, #380]	; (800fc88 <write_map+0x248>)
 800fb0a:	781b      	ldrb	r3, [r3, #0]
 800fb0c:	b2db      	uxtb	r3, r3
 800fb0e:	2b0f      	cmp	r3, #15
 800fb10:	d037      	beq.n	800fb82 <write_map+0x142>
		if(m_temp & 0x44){									//a東壁がある場合
 800fb12:	79fb      	ldrb	r3, [r7, #7]
 800fb14:	f003 0344 	and.w	r3, r3, #68	; 0x44
 800fb18:	2b00      	cmp	r3, #0
 800fb1a:	d019      	beq.n	800fb50 <write_map+0x110>
			map[mouse.y][mouse.x + 1] |= 0x11;				//a東側の区画から見て西壁ありを書き込む
 800fb1c:	4b5a      	ldr	r3, [pc, #360]	; (800fc88 <write_map+0x248>)
 800fb1e:	785b      	ldrb	r3, [r3, #1]
 800fb20:	b2dc      	uxtb	r4, r3
 800fb22:	4622      	mov	r2, r4
 800fb24:	4b58      	ldr	r3, [pc, #352]	; (800fc88 <write_map+0x248>)
 800fb26:	781b      	ldrb	r3, [r3, #0]
 800fb28:	b2d8      	uxtb	r0, r3
 800fb2a:	4603      	mov	r3, r0
 800fb2c:	3301      	adds	r3, #1
 800fb2e:	4957      	ldr	r1, [pc, #348]	; (800fc8c <write_map+0x24c>)
 800fb30:	0112      	lsls	r2, r2, #4
 800fb32:	440a      	add	r2, r1
 800fb34:	4413      	add	r3, r2
 800fb36:	781a      	ldrb	r2, [r3, #0]
 800fb38:	4603      	mov	r3, r0
 800fb3a:	3301      	adds	r3, #1
 800fb3c:	f042 0211 	orr.w	r2, r2, #17
 800fb40:	b2d0      	uxtb	r0, r2
 800fb42:	4952      	ldr	r1, [pc, #328]	; (800fc8c <write_map+0x24c>)
 800fb44:	0122      	lsls	r2, r4, #4
 800fb46:	440a      	add	r2, r1
 800fb48:	4413      	add	r3, r2
 800fb4a:	4602      	mov	r2, r0
 800fb4c:	701a      	strb	r2, [r3, #0]
 800fb4e:	e018      	b.n	800fb82 <write_map+0x142>
		}else{												//a北壁がない場合
			map[mouse.y][mouse.x + 1] &= 0xEE;				//a東側の区画から見て西壁なしを書き込む
 800fb50:	4b4d      	ldr	r3, [pc, #308]	; (800fc88 <write_map+0x248>)
 800fb52:	785b      	ldrb	r3, [r3, #1]
 800fb54:	b2dc      	uxtb	r4, r3
 800fb56:	4622      	mov	r2, r4
 800fb58:	4b4b      	ldr	r3, [pc, #300]	; (800fc88 <write_map+0x248>)
 800fb5a:	781b      	ldrb	r3, [r3, #0]
 800fb5c:	b2d8      	uxtb	r0, r3
 800fb5e:	4603      	mov	r3, r0
 800fb60:	3301      	adds	r3, #1
 800fb62:	494a      	ldr	r1, [pc, #296]	; (800fc8c <write_map+0x24c>)
 800fb64:	0112      	lsls	r2, r2, #4
 800fb66:	440a      	add	r2, r1
 800fb68:	4413      	add	r3, r2
 800fb6a:	781a      	ldrb	r2, [r3, #0]
 800fb6c:	4603      	mov	r3, r0
 800fb6e:	3301      	adds	r3, #1
 800fb70:	f022 0211 	bic.w	r2, r2, #17
 800fb74:	b2d0      	uxtb	r0, r2
 800fb76:	4945      	ldr	r1, [pc, #276]	; (800fc8c <write_map+0x24c>)
 800fb78:	0122      	lsls	r2, r4, #4
 800fb7a:	440a      	add	r2, r1
 800fb7c:	4413      	add	r3, r2
 800fb7e:	4602      	mov	r2, r0
 800fb80:	701a      	strb	r2, [r3, #0]
		}
	}
	//a南壁について
	if(mouse.y != 0){										//a現在最南端でないとき
 800fb82:	4b41      	ldr	r3, [pc, #260]	; (800fc88 <write_map+0x248>)
 800fb84:	785b      	ldrb	r3, [r3, #1]
 800fb86:	b2db      	uxtb	r3, r3
 800fb88:	2b00      	cmp	r3, #0
 800fb8a:	d039      	beq.n	800fc00 <write_map+0x1c0>
		if(m_temp & 0x22){									//a南壁がある場合
 800fb8c:	79fb      	ldrb	r3, [r7, #7]
 800fb8e:	f003 0322 	and.w	r3, r3, #34	; 0x22
 800fb92:	2b00      	cmp	r3, #0
 800fb94:	d01a      	beq.n	800fbcc <write_map+0x18c>
			map[mouse.y - 1][mouse.x] |= 0x88;				//a南側の区画から見て北壁ありを書き込む
 800fb96:	4b3c      	ldr	r3, [pc, #240]	; (800fc88 <write_map+0x248>)
 800fb98:	785b      	ldrb	r3, [r3, #1]
 800fb9a:	b2d8      	uxtb	r0, r3
 800fb9c:	4603      	mov	r3, r0
 800fb9e:	3b01      	subs	r3, #1
 800fba0:	4a39      	ldr	r2, [pc, #228]	; (800fc88 <write_map+0x248>)
 800fba2:	7812      	ldrb	r2, [r2, #0]
 800fba4:	b2d1      	uxtb	r1, r2
 800fba6:	460c      	mov	r4, r1
 800fba8:	4a38      	ldr	r2, [pc, #224]	; (800fc8c <write_map+0x24c>)
 800fbaa:	011b      	lsls	r3, r3, #4
 800fbac:	4413      	add	r3, r2
 800fbae:	4423      	add	r3, r4
 800fbb0:	781a      	ldrb	r2, [r3, #0]
 800fbb2:	4603      	mov	r3, r0
 800fbb4:	3b01      	subs	r3, #1
 800fbb6:	4608      	mov	r0, r1
 800fbb8:	f062 0277 	orn	r2, r2, #119	; 0x77
 800fbbc:	b2d1      	uxtb	r1, r2
 800fbbe:	4a33      	ldr	r2, [pc, #204]	; (800fc8c <write_map+0x24c>)
 800fbc0:	011b      	lsls	r3, r3, #4
 800fbc2:	4413      	add	r3, r2
 800fbc4:	4403      	add	r3, r0
 800fbc6:	460a      	mov	r2, r1
 800fbc8:	701a      	strb	r2, [r3, #0]
 800fbca:	e019      	b.n	800fc00 <write_map+0x1c0>
		}else{												//a南壁がない場合
			map[mouse.y - 1][mouse.x] &= 0x77;				//a南側の区画から見て北壁なしを書き込む
 800fbcc:	4b2e      	ldr	r3, [pc, #184]	; (800fc88 <write_map+0x248>)
 800fbce:	785b      	ldrb	r3, [r3, #1]
 800fbd0:	b2d8      	uxtb	r0, r3
 800fbd2:	4603      	mov	r3, r0
 800fbd4:	3b01      	subs	r3, #1
 800fbd6:	4a2c      	ldr	r2, [pc, #176]	; (800fc88 <write_map+0x248>)
 800fbd8:	7812      	ldrb	r2, [r2, #0]
 800fbda:	b2d1      	uxtb	r1, r2
 800fbdc:	460c      	mov	r4, r1
 800fbde:	4a2b      	ldr	r2, [pc, #172]	; (800fc8c <write_map+0x24c>)
 800fbe0:	011b      	lsls	r3, r3, #4
 800fbe2:	4413      	add	r3, r2
 800fbe4:	4423      	add	r3, r4
 800fbe6:	781a      	ldrb	r2, [r3, #0]
 800fbe8:	4603      	mov	r3, r0
 800fbea:	3b01      	subs	r3, #1
 800fbec:	4608      	mov	r0, r1
 800fbee:	f002 0277 	and.w	r2, r2, #119	; 0x77
 800fbf2:	b2d1      	uxtb	r1, r2
 800fbf4:	4a25      	ldr	r2, [pc, #148]	; (800fc8c <write_map+0x24c>)
 800fbf6:	011b      	lsls	r3, r3, #4
 800fbf8:	4413      	add	r3, r2
 800fbfa:	4403      	add	r3, r0
 800fbfc:	460a      	mov	r2, r1
 800fbfe:	701a      	strb	r2, [r3, #0]
		}
	}
	//a西側について
	if(mouse.x != 0){										//a現在最西端でないとき
 800fc00:	4b21      	ldr	r3, [pc, #132]	; (800fc88 <write_map+0x248>)
 800fc02:	781b      	ldrb	r3, [r3, #0]
 800fc04:	b2db      	uxtb	r3, r3
 800fc06:	2b00      	cmp	r3, #0
 800fc08:	d037      	beq.n	800fc7a <write_map+0x23a>
		if(m_temp & 0x11){									//a西壁がある場合
 800fc0a:	79fb      	ldrb	r3, [r7, #7]
 800fc0c:	f003 0311 	and.w	r3, r3, #17
 800fc10:	2b00      	cmp	r3, #0
 800fc12:	d019      	beq.n	800fc48 <write_map+0x208>
			map[mouse.y][mouse.x - 1] |= 0x44;				//a西側の区画から見て東壁ありを書き込む
 800fc14:	4b1c      	ldr	r3, [pc, #112]	; (800fc88 <write_map+0x248>)
 800fc16:	785b      	ldrb	r3, [r3, #1]
 800fc18:	b2dc      	uxtb	r4, r3
 800fc1a:	4622      	mov	r2, r4
 800fc1c:	4b1a      	ldr	r3, [pc, #104]	; (800fc88 <write_map+0x248>)
 800fc1e:	781b      	ldrb	r3, [r3, #0]
 800fc20:	b2d8      	uxtb	r0, r3
 800fc22:	4603      	mov	r3, r0
 800fc24:	3b01      	subs	r3, #1
 800fc26:	4919      	ldr	r1, [pc, #100]	; (800fc8c <write_map+0x24c>)
 800fc28:	0112      	lsls	r2, r2, #4
 800fc2a:	440a      	add	r2, r1
 800fc2c:	4413      	add	r3, r2
 800fc2e:	781a      	ldrb	r2, [r3, #0]
 800fc30:	4603      	mov	r3, r0
 800fc32:	3b01      	subs	r3, #1
 800fc34:	f042 0244 	orr.w	r2, r2, #68	; 0x44
 800fc38:	b2d0      	uxtb	r0, r2
 800fc3a:	4914      	ldr	r1, [pc, #80]	; (800fc8c <write_map+0x24c>)
 800fc3c:	0122      	lsls	r2, r4, #4
 800fc3e:	440a      	add	r2, r1
 800fc40:	4413      	add	r3, r2
 800fc42:	4602      	mov	r2, r0
 800fc44:	701a      	strb	r2, [r3, #0]
		}else{												//a西壁がない場合
			map[mouse.y][mouse.x - 1] &= 0xBB;				//a西側の区画から見て東側なしを書き込む
		}
	}
}
 800fc46:	e018      	b.n	800fc7a <write_map+0x23a>
			map[mouse.y][mouse.x - 1] &= 0xBB;				//a西側の区画から見て東側なしを書き込む
 800fc48:	4b0f      	ldr	r3, [pc, #60]	; (800fc88 <write_map+0x248>)
 800fc4a:	785b      	ldrb	r3, [r3, #1]
 800fc4c:	b2dc      	uxtb	r4, r3
 800fc4e:	4622      	mov	r2, r4
 800fc50:	4b0d      	ldr	r3, [pc, #52]	; (800fc88 <write_map+0x248>)
 800fc52:	781b      	ldrb	r3, [r3, #0]
 800fc54:	b2d8      	uxtb	r0, r3
 800fc56:	4603      	mov	r3, r0
 800fc58:	3b01      	subs	r3, #1
 800fc5a:	490c      	ldr	r1, [pc, #48]	; (800fc8c <write_map+0x24c>)
 800fc5c:	0112      	lsls	r2, r2, #4
 800fc5e:	440a      	add	r2, r1
 800fc60:	4413      	add	r3, r2
 800fc62:	781a      	ldrb	r2, [r3, #0]
 800fc64:	4603      	mov	r3, r0
 800fc66:	3b01      	subs	r3, #1
 800fc68:	f022 0244 	bic.w	r2, r2, #68	; 0x44
 800fc6c:	b2d0      	uxtb	r0, r2
 800fc6e:	4907      	ldr	r1, [pc, #28]	; (800fc8c <write_map+0x24c>)
 800fc70:	0122      	lsls	r2, r4, #4
 800fc72:	440a      	add	r2, r1
 800fc74:	4413      	add	r3, r2
 800fc76:	4602      	mov	r2, r0
 800fc78:	701a      	strb	r2, [r3, #0]
}
 800fc7a:	bf00      	nop
 800fc7c:	3708      	adds	r7, #8
 800fc7e:	46bd      	mov	sp, r7
 800fc80:	bc90      	pop	{r4, r7}
 800fc82:	4770      	bx	lr
 800fc84:	200002c8 	.word	0x200002c8
 800fc88:	20000c0c 	.word	0x20000c0c
 800fc8c:	200001ac 	.word	0x200001ac

0800fc90 <turn_dir>:
//turn_dir
//aマウスの方向を変更する
//a引数1：t_pat …… 回転方向(search.hでマクロ定義)
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void turn_dir(uint8_t t_pat, uint8_t t_mode){
 800fc90:	b480      	push	{r7}
 800fc92:	b083      	sub	sp, #12
 800fc94:	af00      	add	r7, sp, #0
 800fc96:	4603      	mov	r3, r0
 800fc98:	460a      	mov	r2, r1
 800fc9a:	71fb      	strb	r3, [r7, #7]
 800fc9c:	4613      	mov	r3, r2
 800fc9e:	71bb      	strb	r3, [r7, #6]

	//====a方向を変更====
	if(t_mode < 2){												//4方位モード
 800fca0:	79bb      	ldrb	r3, [r7, #6]
 800fca2:	2b01      	cmp	r3, #1
 800fca4:	d837      	bhi.n	800fd16 <turn_dir+0x86>
		mouse.dir = (mouse.dir + t_pat) & 0x03;					//a指定された分mouse.dirを回転させる
 800fca6:	4b5a      	ldr	r3, [pc, #360]	; (800fe10 <turn_dir+0x180>)
 800fca8:	789b      	ldrb	r3, [r3, #2]
 800fcaa:	b2da      	uxtb	r2, r3
 800fcac:	79fb      	ldrb	r3, [r7, #7]
 800fcae:	4413      	add	r3, r2
 800fcb0:	b2db      	uxtb	r3, r3
 800fcb2:	f003 0303 	and.w	r3, r3, #3
 800fcb6:	b2da      	uxtb	r2, r3
 800fcb8:	4b55      	ldr	r3, [pc, #340]	; (800fe10 <turn_dir+0x180>)
 800fcba:	709a      	strb	r2, [r3, #2]
		if(t_mode == 1){
 800fcbc:	79bb      	ldrb	r3, [r7, #6]
 800fcbe:	2b01      	cmp	r3, #1
 800fcc0:	f040 809f 	bne.w	800fe02 <turn_dir+0x172>
			if(t_pat == 0x01) target_degree_z -= 90.5;			//a目標角度+右90度
 800fcc4:	79fb      	ldrb	r3, [r7, #7]
 800fcc6:	2b01      	cmp	r3, #1
 800fcc8:	d109      	bne.n	800fcde <turn_dir+0x4e>
 800fcca:	4b52      	ldr	r3, [pc, #328]	; (800fe14 <turn_dir+0x184>)
 800fccc:	edd3 7a00 	vldr	s15, [r3]
 800fcd0:	ed9f 7a51 	vldr	s14, [pc, #324]	; 800fe18 <turn_dir+0x188>
 800fcd4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800fcd8:	4b4e      	ldr	r3, [pc, #312]	; (800fe14 <turn_dir+0x184>)
 800fcda:	edc3 7a00 	vstr	s15, [r3]
			if(t_pat == 0xff) target_degree_z += 90.5;			//a目標角度+左90度
 800fcde:	79fb      	ldrb	r3, [r7, #7]
 800fce0:	2bff      	cmp	r3, #255	; 0xff
 800fce2:	d109      	bne.n	800fcf8 <turn_dir+0x68>
 800fce4:	4b4b      	ldr	r3, [pc, #300]	; (800fe14 <turn_dir+0x184>)
 800fce6:	edd3 7a00 	vldr	s15, [r3]
 800fcea:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 800fe18 <turn_dir+0x188>
 800fcee:	ee77 7a87 	vadd.f32	s15, s15, s14
 800fcf2:	4b48      	ldr	r3, [pc, #288]	; (800fe14 <turn_dir+0x184>)
 800fcf4:	edc3 7a00 	vstr	s15, [r3]
			if(t_pat == 0x02) target_degree_z -= 181;			//a目標角度+右180度
 800fcf8:	79fb      	ldrb	r3, [r7, #7]
 800fcfa:	2b02      	cmp	r3, #2
 800fcfc:	f040 8081 	bne.w	800fe02 <turn_dir+0x172>
 800fd00:	4b44      	ldr	r3, [pc, #272]	; (800fe14 <turn_dir+0x184>)
 800fd02:	edd3 7a00 	vldr	s15, [r3]
 800fd06:	ed9f 7a45 	vldr	s14, [pc, #276]	; 800fe1c <turn_dir+0x18c>
 800fd0a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800fd0e:	4b41      	ldr	r3, [pc, #260]	; (800fe14 <turn_dir+0x184>)
 800fd10:	edc3 7a00 	vstr	s15, [r3]
			if(t_pat == 0xfe) target_degree_z += 90.5;			//a目標角度+左90度
			if(t_pat == 0xfd) target_degree_z += 135.75;		//a目標角度+右180度
			if(t_pat == 0xfc) target_degree_z += 181;			//a目標角度+右180度
		}
	}
}
 800fd14:	e075      	b.n	800fe02 <turn_dir+0x172>
		mouse.dir = (mouse.dir + t_pat) & 0x07;					//a指定された分mouse.dirを回転させる
 800fd16:	4b3e      	ldr	r3, [pc, #248]	; (800fe10 <turn_dir+0x180>)
 800fd18:	789b      	ldrb	r3, [r3, #2]
 800fd1a:	b2da      	uxtb	r2, r3
 800fd1c:	79fb      	ldrb	r3, [r7, #7]
 800fd1e:	4413      	add	r3, r2
 800fd20:	b2db      	uxtb	r3, r3
 800fd22:	f003 0307 	and.w	r3, r3, #7
 800fd26:	b2da      	uxtb	r2, r3
 800fd28:	4b39      	ldr	r3, [pc, #228]	; (800fe10 <turn_dir+0x180>)
 800fd2a:	709a      	strb	r2, [r3, #2]
		if(t_mode == 3){
 800fd2c:	79bb      	ldrb	r3, [r7, #6]
 800fd2e:	2b03      	cmp	r3, #3
 800fd30:	d167      	bne.n	800fe02 <turn_dir+0x172>
			if(t_pat == 0x01) target_degree_z -= 45.25;			//a目標角度+右90度
 800fd32:	79fb      	ldrb	r3, [r7, #7]
 800fd34:	2b01      	cmp	r3, #1
 800fd36:	d109      	bne.n	800fd4c <turn_dir+0xbc>
 800fd38:	4b36      	ldr	r3, [pc, #216]	; (800fe14 <turn_dir+0x184>)
 800fd3a:	edd3 7a00 	vldr	s15, [r3]
 800fd3e:	ed9f 7a38 	vldr	s14, [pc, #224]	; 800fe20 <turn_dir+0x190>
 800fd42:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800fd46:	4b33      	ldr	r3, [pc, #204]	; (800fe14 <turn_dir+0x184>)
 800fd48:	edc3 7a00 	vstr	s15, [r3]
			if(t_pat == 0x02) target_degree_z -= 90.5;			//a目標角度+左90度
 800fd4c:	79fb      	ldrb	r3, [r7, #7]
 800fd4e:	2b02      	cmp	r3, #2
 800fd50:	d109      	bne.n	800fd66 <turn_dir+0xd6>
 800fd52:	4b30      	ldr	r3, [pc, #192]	; (800fe14 <turn_dir+0x184>)
 800fd54:	edd3 7a00 	vldr	s15, [r3]
 800fd58:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 800fe18 <turn_dir+0x188>
 800fd5c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800fd60:	4b2c      	ldr	r3, [pc, #176]	; (800fe14 <turn_dir+0x184>)
 800fd62:	edc3 7a00 	vstr	s15, [r3]
			if(t_pat == 0x03) target_degree_z -= 135.75;		//a目標角度+右180度
 800fd66:	79fb      	ldrb	r3, [r7, #7]
 800fd68:	2b03      	cmp	r3, #3
 800fd6a:	d109      	bne.n	800fd80 <turn_dir+0xf0>
 800fd6c:	4b29      	ldr	r3, [pc, #164]	; (800fe14 <turn_dir+0x184>)
 800fd6e:	edd3 7a00 	vldr	s15, [r3]
 800fd72:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 800fe24 <turn_dir+0x194>
 800fd76:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800fd7a:	4b26      	ldr	r3, [pc, #152]	; (800fe14 <turn_dir+0x184>)
 800fd7c:	edc3 7a00 	vstr	s15, [r3]
			if(t_pat == 0x04) target_degree_z -= 181;			//a目標角度+右180度
 800fd80:	79fb      	ldrb	r3, [r7, #7]
 800fd82:	2b04      	cmp	r3, #4
 800fd84:	d109      	bne.n	800fd9a <turn_dir+0x10a>
 800fd86:	4b23      	ldr	r3, [pc, #140]	; (800fe14 <turn_dir+0x184>)
 800fd88:	edd3 7a00 	vldr	s15, [r3]
 800fd8c:	ed9f 7a23 	vldr	s14, [pc, #140]	; 800fe1c <turn_dir+0x18c>
 800fd90:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800fd94:	4b1f      	ldr	r3, [pc, #124]	; (800fe14 <turn_dir+0x184>)
 800fd96:	edc3 7a00 	vstr	s15, [r3]
			if(t_pat == 0xff) target_degree_z += 45.25;			//a目標角度+右90度
 800fd9a:	79fb      	ldrb	r3, [r7, #7]
 800fd9c:	2bff      	cmp	r3, #255	; 0xff
 800fd9e:	d109      	bne.n	800fdb4 <turn_dir+0x124>
 800fda0:	4b1c      	ldr	r3, [pc, #112]	; (800fe14 <turn_dir+0x184>)
 800fda2:	edd3 7a00 	vldr	s15, [r3]
 800fda6:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 800fe20 <turn_dir+0x190>
 800fdaa:	ee77 7a87 	vadd.f32	s15, s15, s14
 800fdae:	4b19      	ldr	r3, [pc, #100]	; (800fe14 <turn_dir+0x184>)
 800fdb0:	edc3 7a00 	vstr	s15, [r3]
			if(t_pat == 0xfe) target_degree_z += 90.5;			//a目標角度+左90度
 800fdb4:	79fb      	ldrb	r3, [r7, #7]
 800fdb6:	2bfe      	cmp	r3, #254	; 0xfe
 800fdb8:	d109      	bne.n	800fdce <turn_dir+0x13e>
 800fdba:	4b16      	ldr	r3, [pc, #88]	; (800fe14 <turn_dir+0x184>)
 800fdbc:	edd3 7a00 	vldr	s15, [r3]
 800fdc0:	ed9f 7a15 	vldr	s14, [pc, #84]	; 800fe18 <turn_dir+0x188>
 800fdc4:	ee77 7a87 	vadd.f32	s15, s15, s14
 800fdc8:	4b12      	ldr	r3, [pc, #72]	; (800fe14 <turn_dir+0x184>)
 800fdca:	edc3 7a00 	vstr	s15, [r3]
			if(t_pat == 0xfd) target_degree_z += 135.75;		//a目標角度+右180度
 800fdce:	79fb      	ldrb	r3, [r7, #7]
 800fdd0:	2bfd      	cmp	r3, #253	; 0xfd
 800fdd2:	d109      	bne.n	800fde8 <turn_dir+0x158>
 800fdd4:	4b0f      	ldr	r3, [pc, #60]	; (800fe14 <turn_dir+0x184>)
 800fdd6:	edd3 7a00 	vldr	s15, [r3]
 800fdda:	ed9f 7a12 	vldr	s14, [pc, #72]	; 800fe24 <turn_dir+0x194>
 800fdde:	ee77 7a87 	vadd.f32	s15, s15, s14
 800fde2:	4b0c      	ldr	r3, [pc, #48]	; (800fe14 <turn_dir+0x184>)
 800fde4:	edc3 7a00 	vstr	s15, [r3]
			if(t_pat == 0xfc) target_degree_z += 181;			//a目標角度+右180度
 800fde8:	79fb      	ldrb	r3, [r7, #7]
 800fdea:	2bfc      	cmp	r3, #252	; 0xfc
 800fdec:	d109      	bne.n	800fe02 <turn_dir+0x172>
 800fdee:	4b09      	ldr	r3, [pc, #36]	; (800fe14 <turn_dir+0x184>)
 800fdf0:	edd3 7a00 	vldr	s15, [r3]
 800fdf4:	ed9f 7a09 	vldr	s14, [pc, #36]	; 800fe1c <turn_dir+0x18c>
 800fdf8:	ee77 7a87 	vadd.f32	s15, s15, s14
 800fdfc:	4b05      	ldr	r3, [pc, #20]	; (800fe14 <turn_dir+0x184>)
 800fdfe:	edc3 7a00 	vstr	s15, [r3]
}
 800fe02:	bf00      	nop
 800fe04:	370c      	adds	r7, #12
 800fe06:	46bd      	mov	sp, r7
 800fe08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe0c:	4770      	bx	lr
 800fe0e:	bf00      	nop
 800fe10:	20000c0c 	.word	0x20000c0c
 800fe14:	20000bf8 	.word	0x20000bf8
 800fe18:	42b50000 	.word	0x42b50000
 800fe1c:	43350000 	.word	0x43350000
 800fe20:	42350000 	.word	0x42350000
 800fe24:	4307c000 	.word	0x4307c000

0800fe28 <make_smap>:
//make_smap
//a歩数マップを作成する
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void make_smap(void){
 800fe28:	b590      	push	{r4, r7, lr}
 800fe2a:	b08f      	sub	sp, #60	; 0x3c
 800fe2c:	af00      	add	r7, sp, #0
	//====a変数宣言====
	uint8_t x, y;											//for文用変数
	uint8_t m_temp_sample[16];

	//====a歩数マップのクリア====
	for(y = 0; y <= 15; y++){								//a各Y座標で実行
 800fe2e:	2300      	movs	r3, #0
 800fe30:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 800fe34:	e01c      	b.n	800fe70 <make_smap+0x48>
		for(x = 0; x <= 15; x++){							//a各X座標で実行
 800fe36:	2300      	movs	r3, #0
 800fe38:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800fe3c:	e00f      	b.n	800fe5e <make_smap+0x36>
			smap[y][x] = 0x03e7;							//a未記入部分は歩数最大とする
 800fe3e:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 800fe42:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fe46:	49be      	ldr	r1, [pc, #760]	; (8010140 <make_smap+0x318>)
 800fe48:	0112      	lsls	r2, r2, #4
 800fe4a:	4413      	add	r3, r2
 800fe4c:	f240 32e7 	movw	r2, #999	; 0x3e7
 800fe50:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for(x = 0; x <= 15; x++){							//a各X座標で実行
 800fe54:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fe58:	3301      	adds	r3, #1
 800fe5a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800fe5e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fe62:	2b0f      	cmp	r3, #15
 800fe64:	d9eb      	bls.n	800fe3e <make_smap+0x16>
	for(y = 0; y <= 15; y++){								//a各Y座標で実行
 800fe66:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800fe6a:	3301      	adds	r3, #1
 800fe6c:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 800fe70:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800fe74:	2b0f      	cmp	r3, #15
 800fe76:	d9de      	bls.n	800fe36 <make_smap+0xe>
		}
	}

	//====aゴール座標を0にする====
	m_step = 0;												//a歩数カウンタを0にする
 800fe78:	4bb2      	ldr	r3, [pc, #712]	; (8010144 <make_smap+0x31c>)
 800fe7a:	2200      	movs	r2, #0
 800fe7c:	801a      	strh	r2, [r3, #0]

	for(int j=0; j<goal_mode; j++){
 800fe7e:	2300      	movs	r3, #0
 800fe80:	633b      	str	r3, [r7, #48]	; 0x30
 800fe82:	e01e      	b.n	800fec2 <make_smap+0x9a>
		for(int k=0; k<goal_mode; k++){
 800fe84:	2300      	movs	r3, #0
 800fe86:	62fb      	str	r3, [r7, #44]	; 0x2c
 800fe88:	e012      	b.n	800feb0 <make_smap+0x88>
		smap[goal_y+j][goal_x+k] = 0;
 800fe8a:	4baf      	ldr	r3, [pc, #700]	; (8010148 <make_smap+0x320>)
 800fe8c:	781b      	ldrb	r3, [r3, #0]
 800fe8e:	461a      	mov	r2, r3
 800fe90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe92:	441a      	add	r2, r3
 800fe94:	4bad      	ldr	r3, [pc, #692]	; (801014c <make_smap+0x324>)
 800fe96:	781b      	ldrb	r3, [r3, #0]
 800fe98:	4619      	mov	r1, r3
 800fe9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe9c:	440b      	add	r3, r1
 800fe9e:	49a8      	ldr	r1, [pc, #672]	; (8010140 <make_smap+0x318>)
 800fea0:	0112      	lsls	r2, r2, #4
 800fea2:	4413      	add	r3, r2
 800fea4:	2200      	movs	r2, #0
 800fea6:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for(int k=0; k<goal_mode; k++){
 800feaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800feac:	3301      	adds	r3, #1
 800feae:	62fb      	str	r3, [r7, #44]	; 0x2c
 800feb0:	4ba7      	ldr	r3, [pc, #668]	; (8010150 <make_smap+0x328>)
 800feb2:	781b      	ldrb	r3, [r3, #0]
 800feb4:	461a      	mov	r2, r3
 800feb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800feb8:	4293      	cmp	r3, r2
 800feba:	dbe6      	blt.n	800fe8a <make_smap+0x62>
	for(int j=0; j<goal_mode; j++){
 800febc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800febe:	3301      	adds	r3, #1
 800fec0:	633b      	str	r3, [r7, #48]	; 0x30
 800fec2:	4ba3      	ldr	r3, [pc, #652]	; (8010150 <make_smap+0x328>)
 800fec4:	781b      	ldrb	r3, [r3, #0]
 800fec6:	461a      	mov	r2, r3
 800fec8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800feca:	4293      	cmp	r3, r2
 800fecc:	dbda      	blt.n	800fe84 <make_smap+0x5c>
	}

//	smap[goal_y][goal_x] = 0;

	//====a歩数カウンタの重みづけ====
	int straight = 2;
 800fece:	2302      	movs	r3, #2
 800fed0:	617b      	str	r3, [r7, #20]
	int turn = 5;
 800fed2:	2305      	movs	r3, #5
 800fed4:	613b      	str	r3, [r7, #16]
	full_led_write(GREEN);
 800fed6:	2002      	movs	r0, #2
 800fed8:	f001 fd6e 	bl	80119b8 <full_led_write>
	//====a自分の座標にたどり着くまでループ====
	do{
		//----aマップ全域を捜索----
		for(y = 0; y <= 15; y++){							//a各Y座標で実行
 800fedc:	2300      	movs	r3, #0
 800fede:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 800fee2:	e334      	b.n	801054e <make_smap+0x726>
			for(x = 0; x <= 15; x++){						//a各X座標で実行
 800fee4:	2300      	movs	r3, #0
 800fee6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800feea:	e326      	b.n	801053a <make_smap+0x712>
				//----a現在最大の歩数を発見したとき----
				if(smap[y][x] == m_step){					//a歩数カウンタm_stepの値が現在最大の歩数
 800feec:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 800fef0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fef4:	4992      	ldr	r1, [pc, #584]	; (8010140 <make_smap+0x318>)
 800fef6:	0112      	lsls	r2, r2, #4
 800fef8:	4413      	add	r3, r2
 800fefa:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 800fefe:	4b91      	ldr	r3, [pc, #580]	; (8010144 <make_smap+0x31c>)
 800ff00:	881b      	ldrh	r3, [r3, #0]
 800ff02:	429a      	cmp	r2, r3
 800ff04:	f040 8314 	bne.w	8010530 <make_smap+0x708>
					uint8_t m_temp = map[y][x];				//map配列からマップデータを取り出す
 800ff08:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 800ff0c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ff10:	4990      	ldr	r1, [pc, #576]	; (8010154 <make_smap+0x32c>)
 800ff12:	0112      	lsls	r2, r2, #4
 800ff14:	440a      	add	r2, r1
 800ff16:	4413      	add	r3, r2
 800ff18:	781b      	ldrb	r3, [r3, #0]
 800ff1a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
					if(MF.FLAG.SCND){						//a二次走行用のマップを作成する場合（二次走行時はMF.FLAG.SCNDが立っている）
 800ff1e:	4b8e      	ldr	r3, [pc, #568]	; (8010158 <make_smap+0x330>)
 800ff20:	881b      	ldrh	r3, [r3, #0]
 800ff22:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800ff26:	b2db      	uxtb	r3, r3
 800ff28:	2b00      	cmp	r3, #0
 800ff2a:	d004      	beq.n	800ff36 <make_smap+0x10e>
						m_temp >>= 4;						//a上位4bitを使うので4bit分右にシフトさせる
 800ff2c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800ff30:	091b      	lsrs	r3, r3, #4
 800ff32:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
					}
					//----a北壁についての処理----
					if(!(m_temp & 0x08) && y != 15){		//a北壁がなく現在最北端でないとき
 800ff36:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800ff3a:	f003 0308 	and.w	r3, r3, #8
 800ff3e:	2b00      	cmp	r3, #0
 800ff40:	f040 80b4 	bne.w	80100ac <make_smap+0x284>
 800ff44:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800ff48:	2b0f      	cmp	r3, #15
 800ff4a:	f000 80af 	beq.w	80100ac <make_smap+0x284>
						if(smap[y+1][x] >= (smap[y][x]+turn)){		//a北側が記入後より大きいなら
 800ff4e:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800ff52:	1c5a      	adds	r2, r3, #1
 800ff54:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ff58:	4979      	ldr	r1, [pc, #484]	; (8010140 <make_smap+0x318>)
 800ff5a:	0112      	lsls	r2, r2, #4
 800ff5c:	4413      	add	r3, r2
 800ff5e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800ff62:	4618      	mov	r0, r3
 800ff64:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 800ff68:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ff6c:	4974      	ldr	r1, [pc, #464]	; (8010140 <make_smap+0x318>)
 800ff6e:	0112      	lsls	r2, r2, #4
 800ff70:	4413      	add	r3, r2
 800ff72:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800ff76:	461a      	mov	r2, r3
 800ff78:	693b      	ldr	r3, [r7, #16]
 800ff7a:	4413      	add	r3, r2
 800ff7c:	4298      	cmp	r0, r3
 800ff7e:	f2c0 8095 	blt.w	80100ac <make_smap+0x284>
							smap[y+1][x] = smap[y][x] + turn;		//a次の歩数を書き込む
 800ff82:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 800ff86:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ff8a:	496d      	ldr	r1, [pc, #436]	; (8010140 <make_smap+0x318>)
 800ff8c:	0112      	lsls	r2, r2, #4
 800ff8e:	4413      	add	r3, r2
 800ff90:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 800ff94:	693b      	ldr	r3, [r7, #16]
 800ff96:	b299      	uxth	r1, r3
 800ff98:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800ff9c:	1c5a      	adds	r2, r3, #1
 800ff9e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ffa2:	4401      	add	r1, r0
 800ffa4:	b288      	uxth	r0, r1
 800ffa6:	4966      	ldr	r1, [pc, #408]	; (8010140 <make_smap+0x318>)
 800ffa8:	0112      	lsls	r2, r2, #4
 800ffaa:	4413      	add	r3, r2
 800ffac:	4602      	mov	r2, r0
 800ffae:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
							if(MF.FLAG.STRAIGHT){
 800ffb2:	4b69      	ldr	r3, [pc, #420]	; (8010158 <make_smap+0x330>)
 800ffb4:	881b      	ldrh	r3, [r3, #0]
 800ffb6:	f3c3 2380 	ubfx	r3, r3, #10, #1
 800ffba:	b2db      	uxtb	r3, r3
 800ffbc:	2b00      	cmp	r3, #0
 800ffbe:	d075      	beq.n	80100ac <make_smap+0x284>
								//----a直線優先処理----
								for(int k=1; k<16-y; k++) {					//a現在座標から見て北のマスすべてにおいて
 800ffc0:	2301      	movs	r3, #1
 800ffc2:	627b      	str	r3, [r7, #36]	; 0x24
 800ffc4:	e06b      	b.n	801009e <make_smap+0x276>
									m_temp_sample[k] = map[y+k][x];				//map配列からマップデータを取り出す
 800ffc6:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 800ffca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ffcc:	441a      	add	r2, r3
 800ffce:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ffd2:	4960      	ldr	r1, [pc, #384]	; (8010154 <make_smap+0x32c>)
 800ffd4:	0112      	lsls	r2, r2, #4
 800ffd6:	440a      	add	r2, r1
 800ffd8:	4413      	add	r3, r2
 800ffda:	7819      	ldrb	r1, [r3, #0]
 800ffdc:	463a      	mov	r2, r7
 800ffde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ffe0:	4413      	add	r3, r2
 800ffe2:	460a      	mov	r2, r1
 800ffe4:	701a      	strb	r2, [r3, #0]
									if(MF.FLAG.SCND) m_temp_sample[k] >>= 4;		//a二次走行用のマップを作成する場合上位4bitを使うので4bit分右にシフトさせる
 800ffe6:	4b5c      	ldr	r3, [pc, #368]	; (8010158 <make_smap+0x330>)
 800ffe8:	881b      	ldrh	r3, [r3, #0]
 800ffea:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800ffee:	b2db      	uxtb	r3, r3
 800fff0:	2b00      	cmp	r3, #0
 800fff2:	d00a      	beq.n	801000a <make_smap+0x1e2>
 800fff4:	463a      	mov	r2, r7
 800fff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fff8:	4413      	add	r3, r2
 800fffa:	781b      	ldrb	r3, [r3, #0]
 800fffc:	091b      	lsrs	r3, r3, #4
 800fffe:	b2d9      	uxtb	r1, r3
 8010000:	463a      	mov	r2, r7
 8010002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010004:	4413      	add	r3, r2
 8010006:	460a      	mov	r2, r1
 8010008:	701a      	strb	r2, [r3, #0]
									if(!(m_temp_sample[k] & 0x08) && (y+k) != 15) {		//a北壁がなく現在最北端でないとき
 801000a:	463a      	mov	r2, r7
 801000c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801000e:	4413      	add	r3, r2
 8010010:	781b      	ldrb	r3, [r3, #0]
 8010012:	f003 0308 	and.w	r3, r3, #8
 8010016:	2b00      	cmp	r3, #0
 8010018:	d148      	bne.n	80100ac <make_smap+0x284>
 801001a:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 801001e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010020:	4413      	add	r3, r2
 8010022:	2b0f      	cmp	r3, #15
 8010024:	d042      	beq.n	80100ac <make_smap+0x284>
										if(smap[y+k+1][x] >= (smap[y+k][x]+straight)){		//a北側が記入後より大きいなら
 8010026:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 801002a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801002c:	4413      	add	r3, r2
 801002e:	1c5a      	adds	r2, r3, #1
 8010030:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010034:	4942      	ldr	r1, [pc, #264]	; (8010140 <make_smap+0x318>)
 8010036:	0112      	lsls	r2, r2, #4
 8010038:	4413      	add	r3, r2
 801003a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 801003e:	4618      	mov	r0, r3
 8010040:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8010044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010046:	441a      	add	r2, r3
 8010048:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801004c:	493c      	ldr	r1, [pc, #240]	; (8010140 <make_smap+0x318>)
 801004e:	0112      	lsls	r2, r2, #4
 8010050:	4413      	add	r3, r2
 8010052:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8010056:	461a      	mov	r2, r3
 8010058:	697b      	ldr	r3, [r7, #20]
 801005a:	4413      	add	r3, r2
 801005c:	4298      	cmp	r0, r3
 801005e:	db1b      	blt.n	8010098 <make_smap+0x270>
											smap[y+k+1][x] = smap[y+k][x] + straight;		//a直線分インクリメントした値を次のマスの歩数マップに書き込む
 8010060:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8010064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010066:	441a      	add	r2, r3
 8010068:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801006c:	4934      	ldr	r1, [pc, #208]	; (8010140 <make_smap+0x318>)
 801006e:	0112      	lsls	r2, r2, #4
 8010070:	4413      	add	r3, r2
 8010072:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 8010076:	697b      	ldr	r3, [r7, #20]
 8010078:	b299      	uxth	r1, r3
 801007a:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 801007e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010080:	4413      	add	r3, r2
 8010082:	1c5a      	adds	r2, r3, #1
 8010084:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010088:	4401      	add	r1, r0
 801008a:	b288      	uxth	r0, r1
 801008c:	492c      	ldr	r1, [pc, #176]	; (8010140 <make_smap+0x318>)
 801008e:	0112      	lsls	r2, r2, #4
 8010090:	4413      	add	r3, r2
 8010092:	4602      	mov	r2, r0
 8010094:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
								for(int k=1; k<16-y; k++) {					//a現在座標から見て北のマスすべてにおいて
 8010098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801009a:	3301      	adds	r3, #1
 801009c:	627b      	str	r3, [r7, #36]	; 0x24
 801009e:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80100a2:	f1c3 0310 	rsb	r3, r3, #16
 80100a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80100a8:	429a      	cmp	r2, r3
 80100aa:	db8c      	blt.n	800ffc6 <make_smap+0x19e>
								}
							}
						}
					}
					//----a東壁についての処理----
					if(!(m_temp & 0x04) && x != 15){		//a東壁がなく現在最東端でないとき
 80100ac:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80100b0:	f003 0304 	and.w	r3, r3, #4
 80100b4:	2b00      	cmp	r3, #0
 80100b6:	f040 80c4 	bne.w	8010242 <make_smap+0x41a>
 80100ba:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80100be:	2b0f      	cmp	r3, #15
 80100c0:	f000 80bf 	beq.w	8010242 <make_smap+0x41a>
						if(smap[y][x+1] >= (smap[y][x]+turn)){	//a東側が記入後より大きいなら
 80100c4:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 80100c8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80100cc:	3301      	adds	r3, #1
 80100ce:	491c      	ldr	r1, [pc, #112]	; (8010140 <make_smap+0x318>)
 80100d0:	0112      	lsls	r2, r2, #4
 80100d2:	4413      	add	r3, r2
 80100d4:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80100d8:	4618      	mov	r0, r3
 80100da:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 80100de:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80100e2:	4917      	ldr	r1, [pc, #92]	; (8010140 <make_smap+0x318>)
 80100e4:	0112      	lsls	r2, r2, #4
 80100e6:	4413      	add	r3, r2
 80100e8:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80100ec:	461a      	mov	r2, r3
 80100ee:	693b      	ldr	r3, [r7, #16]
 80100f0:	4413      	add	r3, r2
 80100f2:	4298      	cmp	r0, r3
 80100f4:	f2c0 80a5 	blt.w	8010242 <make_smap+0x41a>
							smap[y][x+1] = smap[y][x] + turn;	//a次の歩数を書き込む
 80100f8:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 80100fc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010100:	490f      	ldr	r1, [pc, #60]	; (8010140 <make_smap+0x318>)
 8010102:	0112      	lsls	r2, r2, #4
 8010104:	4413      	add	r3, r2
 8010106:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 801010a:	693b      	ldr	r3, [r7, #16]
 801010c:	b299      	uxth	r1, r3
 801010e:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8010112:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010116:	3301      	adds	r3, #1
 8010118:	4401      	add	r1, r0
 801011a:	b288      	uxth	r0, r1
 801011c:	4908      	ldr	r1, [pc, #32]	; (8010140 <make_smap+0x318>)
 801011e:	0112      	lsls	r2, r2, #4
 8010120:	4413      	add	r3, r2
 8010122:	4602      	mov	r2, r0
 8010124:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
							if(MF.FLAG.STRAIGHT){
 8010128:	4b0b      	ldr	r3, [pc, #44]	; (8010158 <make_smap+0x330>)
 801012a:	881b      	ldrh	r3, [r3, #0]
 801012c:	f3c3 2380 	ubfx	r3, r3, #10, #1
 8010130:	b2db      	uxtb	r3, r3
 8010132:	2b00      	cmp	r3, #0
 8010134:	f000 8085 	beq.w	8010242 <make_smap+0x41a>
								//----a直線優先処理----
								for(int k=1; k<16-x; k++) {					//a現在座標から見て東のマスすべてにおいて
 8010138:	2301      	movs	r3, #1
 801013a:	623b      	str	r3, [r7, #32]
 801013c:	e07a      	b.n	8010234 <make_smap+0x40c>
 801013e:	bf00      	nop
 8010140:	20000d60 	.word	0x20000d60
 8010144:	2000034e 	.word	0x2000034e
 8010148:	20000b4c 	.word	0x20000b4c
 801014c:	20000bb0 	.word	0x20000bb0
 8010150:	20000bb1 	.word	0x20000bb1
 8010154:	200001ac 	.word	0x200001ac
 8010158:	20000f68 	.word	0x20000f68
									m_temp_sample[k] = map[y][x+k];				//map配列からマップデータを取り出す
 801015c:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8010160:	f897 1037 	ldrb.w	r1, [r7, #55]	; 0x37
 8010164:	6a3b      	ldr	r3, [r7, #32]
 8010166:	440b      	add	r3, r1
 8010168:	49b6      	ldr	r1, [pc, #728]	; (8010444 <make_smap+0x61c>)
 801016a:	0112      	lsls	r2, r2, #4
 801016c:	440a      	add	r2, r1
 801016e:	4413      	add	r3, r2
 8010170:	7819      	ldrb	r1, [r3, #0]
 8010172:	463a      	mov	r2, r7
 8010174:	6a3b      	ldr	r3, [r7, #32]
 8010176:	4413      	add	r3, r2
 8010178:	460a      	mov	r2, r1
 801017a:	701a      	strb	r2, [r3, #0]
									if(MF.FLAG.SCND) m_temp_sample[k] >>= 4;		//a二次走行用のマップを作成する場合上位4bitを使うので4bit分右にシフトさせる
 801017c:	4bb2      	ldr	r3, [pc, #712]	; (8010448 <make_smap+0x620>)
 801017e:	881b      	ldrh	r3, [r3, #0]
 8010180:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8010184:	b2db      	uxtb	r3, r3
 8010186:	2b00      	cmp	r3, #0
 8010188:	d00a      	beq.n	80101a0 <make_smap+0x378>
 801018a:	463a      	mov	r2, r7
 801018c:	6a3b      	ldr	r3, [r7, #32]
 801018e:	4413      	add	r3, r2
 8010190:	781b      	ldrb	r3, [r3, #0]
 8010192:	091b      	lsrs	r3, r3, #4
 8010194:	b2d9      	uxtb	r1, r3
 8010196:	463a      	mov	r2, r7
 8010198:	6a3b      	ldr	r3, [r7, #32]
 801019a:	4413      	add	r3, r2
 801019c:	460a      	mov	r2, r1
 801019e:	701a      	strb	r2, [r3, #0]
									if(!(m_temp_sample[k] & 0x04) && (x+k) != 15) {		//a東壁がなく現在最東端でないとき
 80101a0:	463a      	mov	r2, r7
 80101a2:	6a3b      	ldr	r3, [r7, #32]
 80101a4:	4413      	add	r3, r2
 80101a6:	781b      	ldrb	r3, [r3, #0]
 80101a8:	f003 0304 	and.w	r3, r3, #4
 80101ac:	2b00      	cmp	r3, #0
 80101ae:	d148      	bne.n	8010242 <make_smap+0x41a>
 80101b0:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80101b4:	6a3b      	ldr	r3, [r7, #32]
 80101b6:	4413      	add	r3, r2
 80101b8:	2b0f      	cmp	r3, #15
 80101ba:	d042      	beq.n	8010242 <make_smap+0x41a>
										if(smap[y][x+k+1] >= (smap[y][x+k]+straight)){		//a東側が記入後より大きいなら
 80101bc:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 80101c0:	f897 1037 	ldrb.w	r1, [r7, #55]	; 0x37
 80101c4:	6a3b      	ldr	r3, [r7, #32]
 80101c6:	440b      	add	r3, r1
 80101c8:	3301      	adds	r3, #1
 80101ca:	49a0      	ldr	r1, [pc, #640]	; (801044c <make_smap+0x624>)
 80101cc:	0112      	lsls	r2, r2, #4
 80101ce:	4413      	add	r3, r2
 80101d0:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80101d4:	4618      	mov	r0, r3
 80101d6:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 80101da:	f897 1037 	ldrb.w	r1, [r7, #55]	; 0x37
 80101de:	6a3b      	ldr	r3, [r7, #32]
 80101e0:	440b      	add	r3, r1
 80101e2:	499a      	ldr	r1, [pc, #616]	; (801044c <make_smap+0x624>)
 80101e4:	0112      	lsls	r2, r2, #4
 80101e6:	4413      	add	r3, r2
 80101e8:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80101ec:	461a      	mov	r2, r3
 80101ee:	697b      	ldr	r3, [r7, #20]
 80101f0:	4413      	add	r3, r2
 80101f2:	4298      	cmp	r0, r3
 80101f4:	db1b      	blt.n	801022e <make_smap+0x406>
											smap[y][x+k+1] = smap[y][x+k] + straight;		//a直線分インクリメントした値を次のマスの歩数マップに書き込む
 80101f6:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 80101fa:	f897 1037 	ldrb.w	r1, [r7, #55]	; 0x37
 80101fe:	6a3b      	ldr	r3, [r7, #32]
 8010200:	440b      	add	r3, r1
 8010202:	4992      	ldr	r1, [pc, #584]	; (801044c <make_smap+0x624>)
 8010204:	0112      	lsls	r2, r2, #4
 8010206:	4413      	add	r3, r2
 8010208:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 801020c:	697b      	ldr	r3, [r7, #20]
 801020e:	b299      	uxth	r1, r3
 8010210:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8010214:	f897 4037 	ldrb.w	r4, [r7, #55]	; 0x37
 8010218:	6a3b      	ldr	r3, [r7, #32]
 801021a:	4423      	add	r3, r4
 801021c:	3301      	adds	r3, #1
 801021e:	4401      	add	r1, r0
 8010220:	b288      	uxth	r0, r1
 8010222:	498a      	ldr	r1, [pc, #552]	; (801044c <make_smap+0x624>)
 8010224:	0112      	lsls	r2, r2, #4
 8010226:	4413      	add	r3, r2
 8010228:	4602      	mov	r2, r0
 801022a:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
								for(int k=1; k<16-x; k++) {					//a現在座標から見て東のマスすべてにおいて
 801022e:	6a3b      	ldr	r3, [r7, #32]
 8010230:	3301      	adds	r3, #1
 8010232:	623b      	str	r3, [r7, #32]
 8010234:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010238:	f1c3 0310 	rsb	r3, r3, #16
 801023c:	6a3a      	ldr	r2, [r7, #32]
 801023e:	429a      	cmp	r2, r3
 8010240:	db8c      	blt.n	801015c <make_smap+0x334>
								}
							}
						}
					}
					//----a南壁についての処理----
					if(!(m_temp & 0x02) && y != 0){			//a南壁がなく現在最南端でないとき
 8010242:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8010246:	f003 0302 	and.w	r3, r3, #2
 801024a:	2b00      	cmp	r3, #0
 801024c:	f040 80b1 	bne.w	80103b2 <make_smap+0x58a>
 8010250:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8010254:	2b00      	cmp	r3, #0
 8010256:	f000 80ac 	beq.w	80103b2 <make_smap+0x58a>
						if(smap[y-1][x] >= (smap[y][x]+turn)){	//a南側が記入後より大きいなら
 801025a:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 801025e:	1e5a      	subs	r2, r3, #1
 8010260:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010264:	4979      	ldr	r1, [pc, #484]	; (801044c <make_smap+0x624>)
 8010266:	0112      	lsls	r2, r2, #4
 8010268:	4413      	add	r3, r2
 801026a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 801026e:	4618      	mov	r0, r3
 8010270:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8010274:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010278:	4974      	ldr	r1, [pc, #464]	; (801044c <make_smap+0x624>)
 801027a:	0112      	lsls	r2, r2, #4
 801027c:	4413      	add	r3, r2
 801027e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8010282:	461a      	mov	r2, r3
 8010284:	693b      	ldr	r3, [r7, #16]
 8010286:	4413      	add	r3, r2
 8010288:	4298      	cmp	r0, r3
 801028a:	f2c0 8092 	blt.w	80103b2 <make_smap+0x58a>
							smap[y-1][x] = smap[y][x] + turn;	//a次の歩数を書き込む
 801028e:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8010292:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010296:	496d      	ldr	r1, [pc, #436]	; (801044c <make_smap+0x624>)
 8010298:	0112      	lsls	r2, r2, #4
 801029a:	4413      	add	r3, r2
 801029c:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 80102a0:	693b      	ldr	r3, [r7, #16]
 80102a2:	b299      	uxth	r1, r3
 80102a4:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80102a8:	1e5a      	subs	r2, r3, #1
 80102aa:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80102ae:	4401      	add	r1, r0
 80102b0:	b288      	uxth	r0, r1
 80102b2:	4966      	ldr	r1, [pc, #408]	; (801044c <make_smap+0x624>)
 80102b4:	0112      	lsls	r2, r2, #4
 80102b6:	4413      	add	r3, r2
 80102b8:	4602      	mov	r2, r0
 80102ba:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
							if(MF.FLAG.STRAIGHT){
 80102be:	4b62      	ldr	r3, [pc, #392]	; (8010448 <make_smap+0x620>)
 80102c0:	881b      	ldrh	r3, [r3, #0]
 80102c2:	f3c3 2380 	ubfx	r3, r3, #10, #1
 80102c6:	b2db      	uxtb	r3, r3
 80102c8:	2b00      	cmp	r3, #0
 80102ca:	d072      	beq.n	80103b2 <make_smap+0x58a>
								//----a直線優先処理----
								for(int k=1; k<y; k++) {						//a現在座標から見て南のマスすべてにおいて
 80102cc:	2301      	movs	r3, #1
 80102ce:	61fb      	str	r3, [r7, #28]
 80102d0:	e06a      	b.n	80103a8 <make_smap+0x580>
									m_temp_sample[k] = map[y-k][x];				//map配列からマップデータを取り出す
 80102d2:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 80102d6:	69fb      	ldr	r3, [r7, #28]
 80102d8:	1ad2      	subs	r2, r2, r3
 80102da:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80102de:	4959      	ldr	r1, [pc, #356]	; (8010444 <make_smap+0x61c>)
 80102e0:	0112      	lsls	r2, r2, #4
 80102e2:	440a      	add	r2, r1
 80102e4:	4413      	add	r3, r2
 80102e6:	7819      	ldrb	r1, [r3, #0]
 80102e8:	463a      	mov	r2, r7
 80102ea:	69fb      	ldr	r3, [r7, #28]
 80102ec:	4413      	add	r3, r2
 80102ee:	460a      	mov	r2, r1
 80102f0:	701a      	strb	r2, [r3, #0]
									if(MF.FLAG.SCND) m_temp_sample[k] >>= 4;		//a二次走行用のマップを作成する場合上位4bitを使うので4bit分右にシフトさせる
 80102f2:	4b55      	ldr	r3, [pc, #340]	; (8010448 <make_smap+0x620>)
 80102f4:	881b      	ldrh	r3, [r3, #0]
 80102f6:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80102fa:	b2db      	uxtb	r3, r3
 80102fc:	2b00      	cmp	r3, #0
 80102fe:	d00a      	beq.n	8010316 <make_smap+0x4ee>
 8010300:	463a      	mov	r2, r7
 8010302:	69fb      	ldr	r3, [r7, #28]
 8010304:	4413      	add	r3, r2
 8010306:	781b      	ldrb	r3, [r3, #0]
 8010308:	091b      	lsrs	r3, r3, #4
 801030a:	b2d9      	uxtb	r1, r3
 801030c:	463a      	mov	r2, r7
 801030e:	69fb      	ldr	r3, [r7, #28]
 8010310:	4413      	add	r3, r2
 8010312:	460a      	mov	r2, r1
 8010314:	701a      	strb	r2, [r3, #0]
									if(!(m_temp_sample[k] & 0x02) && (y-k) != 0) {		//a南壁がなく現在最南端でないとき
 8010316:	463a      	mov	r2, r7
 8010318:	69fb      	ldr	r3, [r7, #28]
 801031a:	4413      	add	r3, r2
 801031c:	781b      	ldrb	r3, [r3, #0]
 801031e:	f003 0302 	and.w	r3, r3, #2
 8010322:	2b00      	cmp	r3, #0
 8010324:	d145      	bne.n	80103b2 <make_smap+0x58a>
 8010326:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 801032a:	69fa      	ldr	r2, [r7, #28]
 801032c:	429a      	cmp	r2, r3
 801032e:	d040      	beq.n	80103b2 <make_smap+0x58a>
										if(smap[y-k-1][x] >= (smap[y-k][x]+straight)){		//a南側が記入後より大きいなら
 8010330:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8010334:	69fb      	ldr	r3, [r7, #28]
 8010336:	1ad3      	subs	r3, r2, r3
 8010338:	1e5a      	subs	r2, r3, #1
 801033a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801033e:	4943      	ldr	r1, [pc, #268]	; (801044c <make_smap+0x624>)
 8010340:	0112      	lsls	r2, r2, #4
 8010342:	4413      	add	r3, r2
 8010344:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8010348:	4618      	mov	r0, r3
 801034a:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 801034e:	69fb      	ldr	r3, [r7, #28]
 8010350:	1ad2      	subs	r2, r2, r3
 8010352:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010356:	493d      	ldr	r1, [pc, #244]	; (801044c <make_smap+0x624>)
 8010358:	0112      	lsls	r2, r2, #4
 801035a:	4413      	add	r3, r2
 801035c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8010360:	461a      	mov	r2, r3
 8010362:	697b      	ldr	r3, [r7, #20]
 8010364:	4413      	add	r3, r2
 8010366:	4298      	cmp	r0, r3
 8010368:	db1b      	blt.n	80103a2 <make_smap+0x57a>
											smap[y-k-1][x] = smap[y-k][x] + straight;		//a直線分インクリメントした値を次のマスの歩数マップに書き込む
 801036a:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 801036e:	69fb      	ldr	r3, [r7, #28]
 8010370:	1ad2      	subs	r2, r2, r3
 8010372:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010376:	4935      	ldr	r1, [pc, #212]	; (801044c <make_smap+0x624>)
 8010378:	0112      	lsls	r2, r2, #4
 801037a:	4413      	add	r3, r2
 801037c:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 8010380:	697b      	ldr	r3, [r7, #20]
 8010382:	b299      	uxth	r1, r3
 8010384:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8010388:	69fb      	ldr	r3, [r7, #28]
 801038a:	1ad3      	subs	r3, r2, r3
 801038c:	1e5a      	subs	r2, r3, #1
 801038e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010392:	4401      	add	r1, r0
 8010394:	b288      	uxth	r0, r1
 8010396:	492d      	ldr	r1, [pc, #180]	; (801044c <make_smap+0x624>)
 8010398:	0112      	lsls	r2, r2, #4
 801039a:	4413      	add	r3, r2
 801039c:	4602      	mov	r2, r0
 801039e:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
								for(int k=1; k<y; k++) {						//a現在座標から見て南のマスすべてにおいて
 80103a2:	69fb      	ldr	r3, [r7, #28]
 80103a4:	3301      	adds	r3, #1
 80103a6:	61fb      	str	r3, [r7, #28]
 80103a8:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80103ac:	69fa      	ldr	r2, [r7, #28]
 80103ae:	429a      	cmp	r2, r3
 80103b0:	db8f      	blt.n	80102d2 <make_smap+0x4aa>
								}
							}
						}
					}
					//----a西壁についての処理----
					if(!(m_temp & 0x01) && x != 0){			//a西壁がなく現在最西端でないとき
 80103b2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80103b6:	f003 0301 	and.w	r3, r3, #1
 80103ba:	2b00      	cmp	r3, #0
 80103bc:	f040 80b8 	bne.w	8010530 <make_smap+0x708>
 80103c0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80103c4:	2b00      	cmp	r3, #0
 80103c6:	f000 80b3 	beq.w	8010530 <make_smap+0x708>
						if(smap[y][x-1] >= (smap[y][x]+turn)){	//a西側が記入後より大きいなら
 80103ca:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 80103ce:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80103d2:	3b01      	subs	r3, #1
 80103d4:	491d      	ldr	r1, [pc, #116]	; (801044c <make_smap+0x624>)
 80103d6:	0112      	lsls	r2, r2, #4
 80103d8:	4413      	add	r3, r2
 80103da:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80103de:	4618      	mov	r0, r3
 80103e0:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 80103e4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80103e8:	4918      	ldr	r1, [pc, #96]	; (801044c <make_smap+0x624>)
 80103ea:	0112      	lsls	r2, r2, #4
 80103ec:	4413      	add	r3, r2
 80103ee:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80103f2:	461a      	mov	r2, r3
 80103f4:	693b      	ldr	r3, [r7, #16]
 80103f6:	4413      	add	r3, r2
 80103f8:	4298      	cmp	r0, r3
 80103fa:	f2c0 8099 	blt.w	8010530 <make_smap+0x708>
							smap[y][x-1] = smap[y][x] + turn;	//a次の歩数を書き込む
 80103fe:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8010402:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010406:	4911      	ldr	r1, [pc, #68]	; (801044c <make_smap+0x624>)
 8010408:	0112      	lsls	r2, r2, #4
 801040a:	4413      	add	r3, r2
 801040c:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 8010410:	693b      	ldr	r3, [r7, #16]
 8010412:	b299      	uxth	r1, r3
 8010414:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8010418:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801041c:	3b01      	subs	r3, #1
 801041e:	4401      	add	r1, r0
 8010420:	b288      	uxth	r0, r1
 8010422:	490a      	ldr	r1, [pc, #40]	; (801044c <make_smap+0x624>)
 8010424:	0112      	lsls	r2, r2, #4
 8010426:	4413      	add	r3, r2
 8010428:	4602      	mov	r2, r0
 801042a:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
							if(MF.FLAG.STRAIGHT){
 801042e:	4b06      	ldr	r3, [pc, #24]	; (8010448 <make_smap+0x620>)
 8010430:	881b      	ldrh	r3, [r3, #0]
 8010432:	f3c3 2380 	ubfx	r3, r3, #10, #1
 8010436:	b2db      	uxtb	r3, r3
 8010438:	2b00      	cmp	r3, #0
 801043a:	d079      	beq.n	8010530 <make_smap+0x708>
								//----a直線優先処理----
								for(int k=1; k<x; k++) {						//a現在座標から見て西のマスすべてにおいて
 801043c:	2301      	movs	r3, #1
 801043e:	61bb      	str	r3, [r7, #24]
 8010440:	e071      	b.n	8010526 <make_smap+0x6fe>
 8010442:	bf00      	nop
 8010444:	200001ac 	.word	0x200001ac
 8010448:	20000f68 	.word	0x20000f68
 801044c:	20000d60 	.word	0x20000d60
									m_temp_sample[k] = map[y][x-k];				//map配列からマップデータを取り出す
 8010450:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8010454:	f897 1037 	ldrb.w	r1, [r7, #55]	; 0x37
 8010458:	69bb      	ldr	r3, [r7, #24]
 801045a:	1acb      	subs	r3, r1, r3
 801045c:	494c      	ldr	r1, [pc, #304]	; (8010590 <make_smap+0x768>)
 801045e:	0112      	lsls	r2, r2, #4
 8010460:	440a      	add	r2, r1
 8010462:	4413      	add	r3, r2
 8010464:	7819      	ldrb	r1, [r3, #0]
 8010466:	463a      	mov	r2, r7
 8010468:	69bb      	ldr	r3, [r7, #24]
 801046a:	4413      	add	r3, r2
 801046c:	460a      	mov	r2, r1
 801046e:	701a      	strb	r2, [r3, #0]
									if(MF.FLAG.SCND) m_temp_sample[k] >>= 4;		//a二次走行用のマップを作成する場合上位4bitを使うので4bit分右にシフトさせる
 8010470:	4b48      	ldr	r3, [pc, #288]	; (8010594 <make_smap+0x76c>)
 8010472:	881b      	ldrh	r3, [r3, #0]
 8010474:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8010478:	b2db      	uxtb	r3, r3
 801047a:	2b00      	cmp	r3, #0
 801047c:	d00a      	beq.n	8010494 <make_smap+0x66c>
 801047e:	463a      	mov	r2, r7
 8010480:	69bb      	ldr	r3, [r7, #24]
 8010482:	4413      	add	r3, r2
 8010484:	781b      	ldrb	r3, [r3, #0]
 8010486:	091b      	lsrs	r3, r3, #4
 8010488:	b2d9      	uxtb	r1, r3
 801048a:	463a      	mov	r2, r7
 801048c:	69bb      	ldr	r3, [r7, #24]
 801048e:	4413      	add	r3, r2
 8010490:	460a      	mov	r2, r1
 8010492:	701a      	strb	r2, [r3, #0]
									if(!(m_temp_sample[k] & 0x01) && (x-k) != 0) {		//a西壁がなく現在最西端でないとき
 8010494:	463a      	mov	r2, r7
 8010496:	69bb      	ldr	r3, [r7, #24]
 8010498:	4413      	add	r3, r2
 801049a:	781b      	ldrb	r3, [r3, #0]
 801049c:	f003 0301 	and.w	r3, r3, #1
 80104a0:	2b00      	cmp	r3, #0
 80104a2:	d145      	bne.n	8010530 <make_smap+0x708>
 80104a4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80104a8:	69ba      	ldr	r2, [r7, #24]
 80104aa:	429a      	cmp	r2, r3
 80104ac:	d040      	beq.n	8010530 <make_smap+0x708>
										if(smap[y][x-k-1] >= (smap[y][x-k]+straight)){		//a西側が記入後より大きいなら
 80104ae:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 80104b2:	f897 1037 	ldrb.w	r1, [r7, #55]	; 0x37
 80104b6:	69bb      	ldr	r3, [r7, #24]
 80104b8:	1acb      	subs	r3, r1, r3
 80104ba:	3b01      	subs	r3, #1
 80104bc:	4936      	ldr	r1, [pc, #216]	; (8010598 <make_smap+0x770>)
 80104be:	0112      	lsls	r2, r2, #4
 80104c0:	4413      	add	r3, r2
 80104c2:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80104c6:	4618      	mov	r0, r3
 80104c8:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 80104cc:	f897 1037 	ldrb.w	r1, [r7, #55]	; 0x37
 80104d0:	69bb      	ldr	r3, [r7, #24]
 80104d2:	1acb      	subs	r3, r1, r3
 80104d4:	4930      	ldr	r1, [pc, #192]	; (8010598 <make_smap+0x770>)
 80104d6:	0112      	lsls	r2, r2, #4
 80104d8:	4413      	add	r3, r2
 80104da:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80104de:	461a      	mov	r2, r3
 80104e0:	697b      	ldr	r3, [r7, #20]
 80104e2:	4413      	add	r3, r2
 80104e4:	4298      	cmp	r0, r3
 80104e6:	db1b      	blt.n	8010520 <make_smap+0x6f8>
											smap[y][x-k-1] = smap[y][x-k] + straight;		//a直線分インクリメントした値を次のマスの歩数マップに書き込む
 80104e8:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 80104ec:	f897 1037 	ldrb.w	r1, [r7, #55]	; 0x37
 80104f0:	69bb      	ldr	r3, [r7, #24]
 80104f2:	1acb      	subs	r3, r1, r3
 80104f4:	4928      	ldr	r1, [pc, #160]	; (8010598 <make_smap+0x770>)
 80104f6:	0112      	lsls	r2, r2, #4
 80104f8:	4413      	add	r3, r2
 80104fa:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 80104fe:	697b      	ldr	r3, [r7, #20]
 8010500:	b299      	uxth	r1, r3
 8010502:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8010506:	f897 4037 	ldrb.w	r4, [r7, #55]	; 0x37
 801050a:	69bb      	ldr	r3, [r7, #24]
 801050c:	1ae3      	subs	r3, r4, r3
 801050e:	3b01      	subs	r3, #1
 8010510:	4401      	add	r1, r0
 8010512:	b288      	uxth	r0, r1
 8010514:	4920      	ldr	r1, [pc, #128]	; (8010598 <make_smap+0x770>)
 8010516:	0112      	lsls	r2, r2, #4
 8010518:	4413      	add	r3, r2
 801051a:	4602      	mov	r2, r0
 801051c:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
								for(int k=1; k<x; k++) {						//a現在座標から見て西のマスすべてにおいて
 8010520:	69bb      	ldr	r3, [r7, #24]
 8010522:	3301      	adds	r3, #1
 8010524:	61bb      	str	r3, [r7, #24]
 8010526:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801052a:	69ba      	ldr	r2, [r7, #24]
 801052c:	429a      	cmp	r2, r3
 801052e:	db8f      	blt.n	8010450 <make_smap+0x628>
			for(x = 0; x <= 15; x++){						//a各X座標で実行
 8010530:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010534:	3301      	adds	r3, #1
 8010536:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 801053a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801053e:	2b0f      	cmp	r3, #15
 8010540:	f67f acd4 	bls.w	800feec <make_smap+0xc4>
		for(y = 0; y <= 15; y++){							//a各Y座標で実行
 8010544:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8010548:	3301      	adds	r3, #1
 801054a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 801054e:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8010552:	2b0f      	cmp	r3, #15
 8010554:	f67f acc6 	bls.w	800fee4 <make_smap+0xbc>
					}
				}
			}
		}
		//====a歩数カウンタのインクリメント====
		m_step++;
 8010558:	4b10      	ldr	r3, [pc, #64]	; (801059c <make_smap+0x774>)
 801055a:	881b      	ldrh	r3, [r3, #0]
 801055c:	3301      	adds	r3, #1
 801055e:	b29a      	uxth	r2, r3
 8010560:	4b0e      	ldr	r3, [pc, #56]	; (801059c <make_smap+0x774>)
 8010562:	801a      	strh	r2, [r3, #0]
	}while(smap[mouse.y][mouse.x] == 0x03e7);					//a現在座標が未記入ではなくなるまで実行
 8010564:	4b0e      	ldr	r3, [pc, #56]	; (80105a0 <make_smap+0x778>)
 8010566:	785b      	ldrb	r3, [r3, #1]
 8010568:	b2db      	uxtb	r3, r3
 801056a:	4618      	mov	r0, r3
 801056c:	4b0c      	ldr	r3, [pc, #48]	; (80105a0 <make_smap+0x778>)
 801056e:	781b      	ldrb	r3, [r3, #0]
 8010570:	b2db      	uxtb	r3, r3
 8010572:	4619      	mov	r1, r3
 8010574:	4a08      	ldr	r2, [pc, #32]	; (8010598 <make_smap+0x770>)
 8010576:	0103      	lsls	r3, r0, #4
 8010578:	440b      	add	r3, r1
 801057a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801057e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8010582:	4293      	cmp	r3, r2
 8010584:	f43f acaa 	beq.w	800fedc <make_smap+0xb4>
}
 8010588:	bf00      	nop
 801058a:	373c      	adds	r7, #60	; 0x3c
 801058c:	46bd      	mov	sp, r7
 801058e:	bd90      	pop	{r4, r7, pc}
 8010590:	200001ac 	.word	0x200001ac
 8010594:	20000f68 	.word	0x20000f68
 8010598:	20000d60 	.word	0x20000d60
 801059c:	2000034e 	.word	0x2000034e
 80105a0:	20000c0c 	.word	0x20000c0c

080105a4 <make_route>:
//make_route
//a最短経路を導出する
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void make_route(){
 80105a4:	b580      	push	{r7, lr}
 80105a6:	b082      	sub	sp, #8
 80105a8:	af00      	add	r7, sp, #0

	//====a変数宣言====
	uint8_t x, y;												//X，Y座標
	uint8_t dir_temp =  mouse.dir;								//aマウスの方角を表すmouse.dirの値をdir_temp変数に退避させる
 80105aa:	4ba6      	ldr	r3, [pc, #664]	; (8010844 <make_route+0x2a0>)
 80105ac:	789b      	ldrb	r3, [r3, #2]
 80105ae:	703b      	strb	r3, [r7, #0]

	//====a最短経路を初期化====
	uint16_t i;
	for(i = 0; i < 256; i++){
 80105b0:	2300      	movs	r3, #0
 80105b2:	80bb      	strh	r3, [r7, #4]
 80105b4:	e006      	b.n	80105c4 <make_route+0x20>
		route[i] = 0xff;										//routeを0xffで初期化
 80105b6:	88bb      	ldrh	r3, [r7, #4]
 80105b8:	4aa3      	ldr	r2, [pc, #652]	; (8010848 <make_route+0x2a4>)
 80105ba:	21ff      	movs	r1, #255	; 0xff
 80105bc:	54d1      	strb	r1, [r2, r3]
	for(i = 0; i < 256; i++){
 80105be:	88bb      	ldrh	r3, [r7, #4]
 80105c0:	3301      	adds	r3, #1
 80105c2:	80bb      	strh	r3, [r7, #4]
 80105c4:	88bb      	ldrh	r3, [r7, #4]
 80105c6:	2bff      	cmp	r3, #255	; 0xff
 80105c8:	d9f5      	bls.n	80105b6 <make_route+0x12>
	}

	//====a歩数カウンタをセット====
	uint16_t m_step = smap[mouse.y][mouse.x];					//a現在座標の歩数マップ値を取得
 80105ca:	4b9e      	ldr	r3, [pc, #632]	; (8010844 <make_route+0x2a0>)
 80105cc:	785b      	ldrb	r3, [r3, #1]
 80105ce:	b2db      	uxtb	r3, r3
 80105d0:	4618      	mov	r0, r3
 80105d2:	4b9c      	ldr	r3, [pc, #624]	; (8010844 <make_route+0x2a0>)
 80105d4:	781b      	ldrb	r3, [r3, #0]
 80105d6:	b2db      	uxtb	r3, r3
 80105d8:	4619      	mov	r1, r3
 80105da:	4a9c      	ldr	r2, [pc, #624]	; (801084c <make_route+0x2a8>)
 80105dc:	0103      	lsls	r3, r0, #4
 80105de:	440b      	add	r3, r1
 80105e0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80105e4:	807b      	strh	r3, [r7, #2]

	//====x, yに現在座標を書き込み====
	x = mouse.x;
 80105e6:	4b97      	ldr	r3, [pc, #604]	; (8010844 <make_route+0x2a0>)
 80105e8:	781b      	ldrb	r3, [r3, #0]
 80105ea:	71fb      	strb	r3, [r7, #7]
	y = mouse.y;
 80105ec:	4b95      	ldr	r3, [pc, #596]	; (8010844 <make_route+0x2a0>)
 80105ee:	785b      	ldrb	r3, [r3, #1]
 80105f0:	71bb      	strb	r3, [r7, #6]

	//====a最短経路を導出====
	if(pass_mode == 4){
 80105f2:	4b97      	ldr	r3, [pc, #604]	; (8010850 <make_route+0x2ac>)
 80105f4:	781b      	ldrb	r3, [r3, #0]
 80105f6:	2b04      	cmp	r3, #4
 80105f8:	d105      	bne.n	8010606 <make_route+0x62>
		route[0] = 0x77;
 80105fa:	4b93      	ldr	r3, [pc, #588]	; (8010848 <make_route+0x2a4>)
 80105fc:	2277      	movs	r2, #119	; 0x77
 80105fe:	701a      	strb	r2, [r3, #0]
		i = 1;
 8010600:	2301      	movs	r3, #1
 8010602:	80bb      	strh	r3, [r7, #4]
 8010604:	e001      	b.n	801060a <make_route+0x66>
	}else{
		i = 0;
 8010606:	2300      	movs	r3, #0
 8010608:	80bb      	strh	r3, [r7, #4]
	}

	do{
		uint8_t m_temp = map[y][x];								//a比較用マップ情報の格納
 801060a:	79ba      	ldrb	r2, [r7, #6]
 801060c:	79fb      	ldrb	r3, [r7, #7]
 801060e:	4991      	ldr	r1, [pc, #580]	; (8010854 <make_route+0x2b0>)
 8010610:	0112      	lsls	r2, r2, #4
 8010612:	440a      	add	r2, r1
 8010614:	4413      	add	r3, r2
 8010616:	781b      	ldrb	r3, [r3, #0]
 8010618:	707b      	strb	r3, [r7, #1]
		if(MF.FLAG.SCND){										//a二次走行用のマップを作成する場合（二次走行時はMF.FLAG.SCNDが立っている）
 801061a:	4b8f      	ldr	r3, [pc, #572]	; (8010858 <make_route+0x2b4>)
 801061c:	881b      	ldrh	r3, [r3, #0]
 801061e:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8010622:	b2db      	uxtb	r3, r3
 8010624:	2b00      	cmp	r3, #0
 8010626:	d002      	beq.n	801062e <make_route+0x8a>
			m_temp >>= 4;										//a上位4bitを使うので4bit分右にシフトさせる
 8010628:	787b      	ldrb	r3, [r7, #1]
 801062a:	091b      	lsrs	r3, r3, #4
 801062c:	707b      	strb	r3, [r7, #1]
		}
		//----a北を見る----
		if(!(m_temp & 0x08) && (smap[y+1][x] < m_step)){		//a北側に壁が無く、現在地より小さい歩数マップ値であれば
 801062e:	787b      	ldrb	r3, [r7, #1]
 8010630:	f003 0308 	and.w	r3, r3, #8
 8010634:	2b00      	cmp	r3, #0
 8010636:	d122      	bne.n	801067e <make_route+0xda>
 8010638:	79bb      	ldrb	r3, [r7, #6]
 801063a:	1c5a      	adds	r2, r3, #1
 801063c:	79fb      	ldrb	r3, [r7, #7]
 801063e:	4983      	ldr	r1, [pc, #524]	; (801084c <make_route+0x2a8>)
 8010640:	0112      	lsls	r2, r2, #4
 8010642:	4413      	add	r3, r2
 8010644:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8010648:	887a      	ldrh	r2, [r7, #2]
 801064a:	429a      	cmp	r2, r3
 801064c:	d917      	bls.n	801067e <make_route+0xda>
			route[i] = (0x00 - mouse.dir) & 0x03;				//route配列に進行方向を記録
 801064e:	4b7d      	ldr	r3, [pc, #500]	; (8010844 <make_route+0x2a0>)
 8010650:	789b      	ldrb	r3, [r3, #2]
 8010652:	b2db      	uxtb	r3, r3
 8010654:	425b      	negs	r3, r3
 8010656:	b2da      	uxtb	r2, r3
 8010658:	88bb      	ldrh	r3, [r7, #4]
 801065a:	f002 0203 	and.w	r2, r2, #3
 801065e:	b2d1      	uxtb	r1, r2
 8010660:	4a79      	ldr	r2, [pc, #484]	; (8010848 <make_route+0x2a4>)
 8010662:	54d1      	strb	r1, [r2, r3]
			m_step = smap[y+1][x];								//a最大歩数マップ値を更新
 8010664:	79bb      	ldrb	r3, [r7, #6]
 8010666:	1c5a      	adds	r2, r3, #1
 8010668:	79fb      	ldrb	r3, [r7, #7]
 801066a:	4978      	ldr	r1, [pc, #480]	; (801084c <make_route+0x2a8>)
 801066c:	0112      	lsls	r2, r2, #4
 801066e:	4413      	add	r3, r2
 8010670:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8010674:	807b      	strh	r3, [r7, #2]
			y++;												//a北に進んだのでY座標をインクリメント
 8010676:	79bb      	ldrb	r3, [r7, #6]
 8010678:	3301      	adds	r3, #1
 801067a:	71bb      	strb	r3, [r7, #6]
 801067c:	e079      	b.n	8010772 <make_route+0x1ce>
		}
		//----a東を見る----
		else if(!(m_temp & 0x04) && (smap[y][x+1] < m_step)){	//a東側に壁が無く、現在地より小さい歩数マップ値であれば
 801067e:	787b      	ldrb	r3, [r7, #1]
 8010680:	f003 0304 	and.w	r3, r3, #4
 8010684:	2b00      	cmp	r3, #0
 8010686:	d123      	bne.n	80106d0 <make_route+0x12c>
 8010688:	79ba      	ldrb	r2, [r7, #6]
 801068a:	79fb      	ldrb	r3, [r7, #7]
 801068c:	3301      	adds	r3, #1
 801068e:	496f      	ldr	r1, [pc, #444]	; (801084c <make_route+0x2a8>)
 8010690:	0112      	lsls	r2, r2, #4
 8010692:	4413      	add	r3, r2
 8010694:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8010698:	887a      	ldrh	r2, [r7, #2]
 801069a:	429a      	cmp	r2, r3
 801069c:	d918      	bls.n	80106d0 <make_route+0x12c>
			route[i] = (0x01 - mouse.dir) & 0x03;				//route配列に進行方向を記録
 801069e:	4b69      	ldr	r3, [pc, #420]	; (8010844 <make_route+0x2a0>)
 80106a0:	789b      	ldrb	r3, [r3, #2]
 80106a2:	b2db      	uxtb	r3, r3
 80106a4:	f1c3 0301 	rsb	r3, r3, #1
 80106a8:	b2da      	uxtb	r2, r3
 80106aa:	88bb      	ldrh	r3, [r7, #4]
 80106ac:	f002 0203 	and.w	r2, r2, #3
 80106b0:	b2d1      	uxtb	r1, r2
 80106b2:	4a65      	ldr	r2, [pc, #404]	; (8010848 <make_route+0x2a4>)
 80106b4:	54d1      	strb	r1, [r2, r3]
			m_step = smap[y][x+1];								//a最大歩数マップ値を更新
 80106b6:	79ba      	ldrb	r2, [r7, #6]
 80106b8:	79fb      	ldrb	r3, [r7, #7]
 80106ba:	3301      	adds	r3, #1
 80106bc:	4963      	ldr	r1, [pc, #396]	; (801084c <make_route+0x2a8>)
 80106be:	0112      	lsls	r2, r2, #4
 80106c0:	4413      	add	r3, r2
 80106c2:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80106c6:	807b      	strh	r3, [r7, #2]
			x++;												//a東に進んだのでX座標をインクリメント
 80106c8:	79fb      	ldrb	r3, [r7, #7]
 80106ca:	3301      	adds	r3, #1
 80106cc:	71fb      	strb	r3, [r7, #7]
 80106ce:	e050      	b.n	8010772 <make_route+0x1ce>
		}
		//----a南を見る----
		else if(!(m_temp & 0x02) && (smap[y-1][x] < m_step)){	//a南側に壁が無く、現在地より小さい歩数マップ値であれば
 80106d0:	787b      	ldrb	r3, [r7, #1]
 80106d2:	f003 0302 	and.w	r3, r3, #2
 80106d6:	2b00      	cmp	r3, #0
 80106d8:	d123      	bne.n	8010722 <make_route+0x17e>
 80106da:	79bb      	ldrb	r3, [r7, #6]
 80106dc:	1e5a      	subs	r2, r3, #1
 80106de:	79fb      	ldrb	r3, [r7, #7]
 80106e0:	495a      	ldr	r1, [pc, #360]	; (801084c <make_route+0x2a8>)
 80106e2:	0112      	lsls	r2, r2, #4
 80106e4:	4413      	add	r3, r2
 80106e6:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80106ea:	887a      	ldrh	r2, [r7, #2]
 80106ec:	429a      	cmp	r2, r3
 80106ee:	d918      	bls.n	8010722 <make_route+0x17e>
			route[i] = (0x02 - mouse.dir) & 0x03;				//route配列に進行方向を記録
 80106f0:	4b54      	ldr	r3, [pc, #336]	; (8010844 <make_route+0x2a0>)
 80106f2:	789b      	ldrb	r3, [r3, #2]
 80106f4:	b2db      	uxtb	r3, r3
 80106f6:	f1c3 0302 	rsb	r3, r3, #2
 80106fa:	b2da      	uxtb	r2, r3
 80106fc:	88bb      	ldrh	r3, [r7, #4]
 80106fe:	f002 0203 	and.w	r2, r2, #3
 8010702:	b2d1      	uxtb	r1, r2
 8010704:	4a50      	ldr	r2, [pc, #320]	; (8010848 <make_route+0x2a4>)
 8010706:	54d1      	strb	r1, [r2, r3]
			m_step = smap[y-1][x];								//a最大歩数マップ値を更新
 8010708:	79bb      	ldrb	r3, [r7, #6]
 801070a:	1e5a      	subs	r2, r3, #1
 801070c:	79fb      	ldrb	r3, [r7, #7]
 801070e:	494f      	ldr	r1, [pc, #316]	; (801084c <make_route+0x2a8>)
 8010710:	0112      	lsls	r2, r2, #4
 8010712:	4413      	add	r3, r2
 8010714:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8010718:	807b      	strh	r3, [r7, #2]
			y--;												//a南に進んだのでY座標をデクリメント
 801071a:	79bb      	ldrb	r3, [r7, #6]
 801071c:	3b01      	subs	r3, #1
 801071e:	71bb      	strb	r3, [r7, #6]
 8010720:	e027      	b.n	8010772 <make_route+0x1ce>
		}
		//----a西を見る----
		else if(!(m_temp & 0x01) && (smap[y][x-1] < m_step)){	//a西側に壁が無く、現在地より小さい歩数マップ値であれば
 8010722:	787b      	ldrb	r3, [r7, #1]
 8010724:	f003 0301 	and.w	r3, r3, #1
 8010728:	2b00      	cmp	r3, #0
 801072a:	d122      	bne.n	8010772 <make_route+0x1ce>
 801072c:	79ba      	ldrb	r2, [r7, #6]
 801072e:	79fb      	ldrb	r3, [r7, #7]
 8010730:	3b01      	subs	r3, #1
 8010732:	4946      	ldr	r1, [pc, #280]	; (801084c <make_route+0x2a8>)
 8010734:	0112      	lsls	r2, r2, #4
 8010736:	4413      	add	r3, r2
 8010738:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 801073c:	887a      	ldrh	r2, [r7, #2]
 801073e:	429a      	cmp	r2, r3
 8010740:	d917      	bls.n	8010772 <make_route+0x1ce>
			route[i] = (0x03 - mouse.dir) & 0x03;				//route配列に進行方向を記録
 8010742:	4b40      	ldr	r3, [pc, #256]	; (8010844 <make_route+0x2a0>)
 8010744:	789b      	ldrb	r3, [r3, #2]
 8010746:	b2db      	uxtb	r3, r3
 8010748:	f1c3 0303 	rsb	r3, r3, #3
 801074c:	b2da      	uxtb	r2, r3
 801074e:	88bb      	ldrh	r3, [r7, #4]
 8010750:	f002 0203 	and.w	r2, r2, #3
 8010754:	b2d1      	uxtb	r1, r2
 8010756:	4a3c      	ldr	r2, [pc, #240]	; (8010848 <make_route+0x2a4>)
 8010758:	54d1      	strb	r1, [r2, r3]
			m_step = smap[y][x-1];								//a最大歩数マップ値を更新
 801075a:	79ba      	ldrb	r2, [r7, #6]
 801075c:	79fb      	ldrb	r3, [r7, #7]
 801075e:	3b01      	subs	r3, #1
 8010760:	493a      	ldr	r1, [pc, #232]	; (801084c <make_route+0x2a8>)
 8010762:	0112      	lsls	r2, r2, #4
 8010764:	4413      	add	r3, r2
 8010766:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 801076a:	807b      	strh	r3, [r7, #2]
			x--;												//a西に進んだのでX座標をデクリメント
 801076c:	79fb      	ldrb	r3, [r7, #7]
 801076e:	3b01      	subs	r3, #1
 8010770:	71fb      	strb	r3, [r7, #7]
				y--;												//a南に進んだのでY座標をデクリメント
			}*/

		}
		//----a格納データ形式変更----
		switch(route[i]){										//route配列に格納した要素値で分岐
 8010772:	88bb      	ldrh	r3, [r7, #4]
 8010774:	4a34      	ldr	r2, [pc, #208]	; (8010848 <make_route+0x2a4>)
 8010776:	5cd3      	ldrb	r3, [r2, r3]
 8010778:	2b03      	cmp	r3, #3
 801077a:	d83c      	bhi.n	80107f6 <make_route+0x252>
 801077c:	a201      	add	r2, pc, #4	; (adr r2, 8010784 <make_route+0x1e0>)
 801077e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010782:	bf00      	nop
 8010784:	08010795 	.word	0x08010795
 8010788:	080107c1 	.word	0x080107c1
 801078c:	080107d3 	.word	0x080107d3
 8010790:	080107e5 	.word	0x080107e5
		case 0x00:												//a前進する場合
			if(pass_mode < 3){
 8010794:	4b2e      	ldr	r3, [pc, #184]	; (8010850 <make_route+0x2ac>)
 8010796:	781b      	ldrb	r3, [r3, #0]
 8010798:	2b02      	cmp	r3, #2
 801079a:	d804      	bhi.n	80107a6 <make_route+0x202>
				route[i] = 0x88;									//a格納データ形式を変更
 801079c:	88bb      	ldrh	r3, [r7, #4]
 801079e:	4a2a      	ldr	r2, [pc, #168]	; (8010848 <make_route+0x2a4>)
 80107a0:	2188      	movs	r1, #136	; 0x88
 80107a2:	54d1      	strb	r1, [r2, r3]
			}else{
				route[i] = 0x77;
				route[i+1] = 0x77;
				i++;
			}
			break;
 80107a4:	e02c      	b.n	8010800 <make_route+0x25c>
				route[i] = 0x77;
 80107a6:	88bb      	ldrh	r3, [r7, #4]
 80107a8:	4a27      	ldr	r2, [pc, #156]	; (8010848 <make_route+0x2a4>)
 80107aa:	2177      	movs	r1, #119	; 0x77
 80107ac:	54d1      	strb	r1, [r2, r3]
				route[i+1] = 0x77;
 80107ae:	88bb      	ldrh	r3, [r7, #4]
 80107b0:	3301      	adds	r3, #1
 80107b2:	4a25      	ldr	r2, [pc, #148]	; (8010848 <make_route+0x2a4>)
 80107b4:	2177      	movs	r1, #119	; 0x77
 80107b6:	54d1      	strb	r1, [r2, r3]
				i++;
 80107b8:	88bb      	ldrh	r3, [r7, #4]
 80107ba:	3301      	adds	r3, #1
 80107bc:	80bb      	strh	r3, [r7, #4]
			break;
 80107be:	e01f      	b.n	8010800 <make_route+0x25c>
		case 0x01:												//a右折する場合
			turn_dir(DIR_TURN_R90, 0);							//a内部情報の方向を90度右回転
 80107c0:	2100      	movs	r1, #0
 80107c2:	2001      	movs	r0, #1
 80107c4:	f7ff fa64 	bl	800fc90 <turn_dir>
			route[i] = 0x44;									//a格納データ形式を変更
 80107c8:	88bb      	ldrh	r3, [r7, #4]
 80107ca:	4a1f      	ldr	r2, [pc, #124]	; (8010848 <make_route+0x2a4>)
 80107cc:	2144      	movs	r1, #68	; 0x44
 80107ce:	54d1      	strb	r1, [r2, r3]
			break;
 80107d0:	e016      	b.n	8010800 <make_route+0x25c>
		case 0x02:												//Uターンする場合
			turn_dir(DIR_TURN_180, 0);							//a内部情報の方向を180度回転
 80107d2:	2100      	movs	r1, #0
 80107d4:	2002      	movs	r0, #2
 80107d6:	f7ff fa5b 	bl	800fc90 <turn_dir>
			route[i] = 0x22;									//a格納データ形式を変更
 80107da:	88bb      	ldrh	r3, [r7, #4]
 80107dc:	4a1a      	ldr	r2, [pc, #104]	; (8010848 <make_route+0x2a4>)
 80107de:	2122      	movs	r1, #34	; 0x22
 80107e0:	54d1      	strb	r1, [r2, r3]
			break;
 80107e2:	e00d      	b.n	8010800 <make_route+0x25c>
		case 0x03:												//a左折する場合
			turn_dir(DIR_TURN_L90, 0);							//a内部情報の方向を90度左回転
 80107e4:	2100      	movs	r1, #0
 80107e6:	20ff      	movs	r0, #255	; 0xff
 80107e8:	f7ff fa52 	bl	800fc90 <turn_dir>
			route[i] = 0x11;									//a格納データ形式を変更
 80107ec:	88bb      	ldrh	r3, [r7, #4]
 80107ee:	4a16      	ldr	r2, [pc, #88]	; (8010848 <make_route+0x2a4>)
 80107f0:	2111      	movs	r1, #17
 80107f2:	54d1      	strb	r1, [r2, r3]
			break;
 80107f4:	e004      	b.n	8010800 <make_route+0x25c>
		default:												//aそれ以外の場合
			route[i] = 0x00;									//a格納データ形式を変更
 80107f6:	88bb      	ldrh	r3, [r7, #4]
 80107f8:	4a13      	ldr	r2, [pc, #76]	; (8010848 <make_route+0x2a4>)
 80107fa:	2100      	movs	r1, #0
 80107fc:	54d1      	strb	r1, [r2, r3]
			break;
 80107fe:	bf00      	nop
		}
		i++;													//aカウンタをインクリメント
 8010800:	88bb      	ldrh	r3, [r7, #4]
 8010802:	3301      	adds	r3, #1
 8010804:	80bb      	strh	r3, [r7, #4]
	}while(smap[y][x] != 0);									//a進んだ先の歩数マップ値が0（=ゴール）になるまで実行
 8010806:	79ba      	ldrb	r2, [r7, #6]
 8010808:	79fb      	ldrb	r3, [r7, #7]
 801080a:	4910      	ldr	r1, [pc, #64]	; (801084c <make_route+0x2a8>)
 801080c:	0112      	lsls	r2, r2, #4
 801080e:	4413      	add	r3, r2
 8010810:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8010814:	2b00      	cmp	r3, #0
 8010816:	f47f aef8 	bne.w	801060a <make_route+0x66>

	if(MF.FLAG.SCND){
 801081a:	4b0f      	ldr	r3, [pc, #60]	; (8010858 <make_route+0x2b4>)
 801081c:	881b      	ldrh	r3, [r3, #0]
 801081e:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8010822:	b2db      	uxtb	r3, r3
 8010824:	2b00      	cmp	r3, #0
 8010826:	d005      	beq.n	8010834 <make_route+0x290>
		goal_x = x;
 8010828:	4a0c      	ldr	r2, [pc, #48]	; (801085c <make_route+0x2b8>)
 801082a:	79fb      	ldrb	r3, [r7, #7]
 801082c:	7013      	strb	r3, [r2, #0]
		goal_y = y;												//a二次走行でgoal後自己座標をgoal座標にするのでその時用
 801082e:	4a0c      	ldr	r2, [pc, #48]	; (8010860 <make_route+0x2bc>)
 8010830:	79bb      	ldrb	r3, [r7, #6]
 8010832:	7013      	strb	r3, [r2, #0]
	}
	mouse.dir = dir_temp;										//dir_tempに退避させた値をmouse.dirにリストア
 8010834:	4a03      	ldr	r2, [pc, #12]	; (8010844 <make_route+0x2a0>)
 8010836:	783b      	ldrb	r3, [r7, #0]
 8010838:	7093      	strb	r3, [r2, #2]
}
 801083a:	bf00      	nop
 801083c:	3708      	adds	r7, #8
 801083e:	46bd      	mov	sp, r7
 8010840:	bd80      	pop	{r7, pc}
 8010842:	bf00      	nop
 8010844:	20000c0c 	.word	0x20000c0c
 8010848:	20000c54 	.word	0x20000c54
 801084c:	20000d60 	.word	0x20000d60
 8010850:	20000457 	.word	0x20000457
 8010854:	200001ac 	.word	0x200001ac
 8010858:	20000f68 	.word	0x20000f68
 801085c:	20000bb0 	.word	0x20000bb0
 8010860:	20000b4c 	.word	0x20000b4c

08010864 <find_pregoal>:
//	未探索壁を含む＆現在座標から最も近いマス(=仮goal)を探す
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void find_pregoal()
{
 8010864:	b480      	push	{r7}
 8010866:	b085      	sub	sp, #20
 8010868:	af00      	add	r7, sp, #0
	//====変数宣言====
	uint8_t x, y;															//for文用変数
	uint8_t m_temp;															//マップデータ一時保持
	//uint8_t m_temp_sample[16];
	uint8_t break_flag = 0;													//未知壁マスを見つけた時のループ脱出フラグ
 801086a:	2300      	movs	r3, #0
 801086c:	737b      	strb	r3, [r7, #13]

	//====歩数マップのクリア====
	for (y = 0; y <= 0x0f; y++) {											//各Y座標で実行
 801086e:	2300      	movs	r3, #0
 8010870:	73bb      	strb	r3, [r7, #14]
 8010872:	e014      	b.n	801089e <find_pregoal+0x3a>
		for (x = 0; x <= 0x0f; x++) {										//各X座標で実行
 8010874:	2300      	movs	r3, #0
 8010876:	73fb      	strb	r3, [r7, #15]
 8010878:	e00b      	b.n	8010892 <find_pregoal+0x2e>
			smap[y][x] = 0x03e7;											//未記入部分は歩数最大とする
 801087a:	7bba      	ldrb	r2, [r7, #14]
 801087c:	7bfb      	ldrb	r3, [r7, #15]
 801087e:	49a0      	ldr	r1, [pc, #640]	; (8010b00 <find_pregoal+0x29c>)
 8010880:	0112      	lsls	r2, r2, #4
 8010882:	4413      	add	r3, r2
 8010884:	f240 32e7 	movw	r2, #999	; 0x3e7
 8010888:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for (x = 0; x <= 0x0f; x++) {										//各X座標で実行
 801088c:	7bfb      	ldrb	r3, [r7, #15]
 801088e:	3301      	adds	r3, #1
 8010890:	73fb      	strb	r3, [r7, #15]
 8010892:	7bfb      	ldrb	r3, [r7, #15]
 8010894:	2b0f      	cmp	r3, #15
 8010896:	d9f0      	bls.n	801087a <find_pregoal+0x16>
	for (y = 0; y <= 0x0f; y++) {											//各Y座標で実行
 8010898:	7bbb      	ldrb	r3, [r7, #14]
 801089a:	3301      	adds	r3, #1
 801089c:	73bb      	strb	r3, [r7, #14]
 801089e:	7bbb      	ldrb	r3, [r7, #14]
 80108a0:	2b0f      	cmp	r3, #15
 80108a2:	d9e7      	bls.n	8010874 <find_pregoal+0x10>
		}
	}

	//====探索完了フラグのクリア====
	MF2.FLAG.ALLMAP = 0;
 80108a4:	4a97      	ldr	r2, [pc, #604]	; (8010b04 <find_pregoal+0x2a0>)
 80108a6:	8813      	ldrh	r3, [r2, #0]
 80108a8:	f36f 0382 	bfc	r3, #2, #1
 80108ac:	8013      	strh	r3, [r2, #0]

	//====現在座標を0にする====
	smap[mouse.y][mouse.x] = 0;
 80108ae:	4b96      	ldr	r3, [pc, #600]	; (8010b08 <find_pregoal+0x2a4>)
 80108b0:	785b      	ldrb	r3, [r3, #1]
 80108b2:	b2db      	uxtb	r3, r3
 80108b4:	4618      	mov	r0, r3
 80108b6:	4b94      	ldr	r3, [pc, #592]	; (8010b08 <find_pregoal+0x2a4>)
 80108b8:	781b      	ldrb	r3, [r3, #0]
 80108ba:	b2db      	uxtb	r3, r3
 80108bc:	4619      	mov	r1, r3
 80108be:	4a90      	ldr	r2, [pc, #576]	; (8010b00 <find_pregoal+0x29c>)
 80108c0:	0103      	lsls	r3, r0, #4
 80108c2:	440b      	add	r3, r1
 80108c4:	2100      	movs	r1, #0
 80108c6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

	//====歩数カウンタを0にする====
	m_step = 0;																//現在記入した最大の歩数となる
 80108ca:	4b90      	ldr	r3, [pc, #576]	; (8010b0c <find_pregoal+0x2a8>)
 80108cc:	2200      	movs	r2, #0
 80108ce:	801a      	strh	r2, [r3, #0]

	//====歩数カウンタの重みづけ====
	int straight = 3;
 80108d0:	2303      	movs	r3, #3
 80108d2:	60bb      	str	r3, [r7, #8]
	int turn = 1;
 80108d4:	2301      	movs	r3, #1
 80108d6:	607b      	str	r3, [r7, #4]

	//====自分の座標にたどり着くまでループ====
	do {
		//----マップ全域を捜索----
		for (y = 0; y <= 0x0f; y++) {										//各Y座標で実行
 80108d8:	2300      	movs	r3, #0
 80108da:	73bb      	strb	r3, [r7, #14]
 80108dc:	e180      	b.n	8010be0 <find_pregoal+0x37c>
			for (x = 0; x <= 0x0f; x++) {									//各X座標で実行
 80108de:	2300      	movs	r3, #0
 80108e0:	73fb      	strb	r3, [r7, #15]
 80108e2:	e173      	b.n	8010bcc <find_pregoal+0x368>
				//----現在最大の歩数を発見したとき----
				if (smap[y][x] == m_step) {									//歩数格納変数m_stepの値が現在最大の歩数のとき
 80108e4:	7bba      	ldrb	r2, [r7, #14]
 80108e6:	7bfb      	ldrb	r3, [r7, #15]
 80108e8:	4985      	ldr	r1, [pc, #532]	; (8010b00 <find_pregoal+0x29c>)
 80108ea:	0112      	lsls	r2, r2, #4
 80108ec:	4413      	add	r3, r2
 80108ee:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 80108f2:	4b86      	ldr	r3, [pc, #536]	; (8010b0c <find_pregoal+0x2a8>)
 80108f4:	881b      	ldrh	r3, [r3, #0]
 80108f6:	429a      	cmp	r2, r3
 80108f8:	f040 8165 	bne.w	8010bc6 <find_pregoal+0x362>
					m_temp = map[y][x];										//map配列からマップデータを取り出す
 80108fc:	7bba      	ldrb	r2, [r7, #14]
 80108fe:	7bfb      	ldrb	r3, [r7, #15]
 8010900:	4983      	ldr	r1, [pc, #524]	; (8010b10 <find_pregoal+0x2ac>)
 8010902:	0112      	lsls	r2, r2, #4
 8010904:	440a      	add	r2, r1
 8010906:	4413      	add	r3, r2
 8010908:	781b      	ldrb	r3, [r3, #0]
 801090a:	70fb      	strb	r3, [r7, #3]
					//----北壁についての処理----
					if (!(m_temp & 0x08) && y != 0x0f) {					//北壁がなく現在最北端でないとき
 801090c:	78fb      	ldrb	r3, [r7, #3]
 801090e:	f003 0308 	and.w	r3, r3, #8
 8010912:	2b00      	cmp	r3, #0
 8010914:	d14d      	bne.n	80109b2 <find_pregoal+0x14e>
 8010916:	7bbb      	ldrb	r3, [r7, #14]
 8010918:	2b0f      	cmp	r3, #15
 801091a:	d04a      	beq.n	80109b2 <find_pregoal+0x14e>
						if (smap[y + 1][x] == 0x03e7) {						//北側が未記入なら
 801091c:	7bbb      	ldrb	r3, [r7, #14]
 801091e:	1c5a      	adds	r2, r3, #1
 8010920:	7bfb      	ldrb	r3, [r7, #15]
 8010922:	4977      	ldr	r1, [pc, #476]	; (8010b00 <find_pregoal+0x29c>)
 8010924:	0112      	lsls	r2, r2, #4
 8010926:	4413      	add	r3, r2
 8010928:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 801092c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8010930:	4293      	cmp	r3, r2
 8010932:	d13e      	bne.n	80109b2 <find_pregoal+0x14e>
							smap[y + 1][x] = smap[y][x] + turn;				//曲線分インクリメントした値を次のマスの歩数マップに書き込む
 8010934:	7bba      	ldrb	r2, [r7, #14]
 8010936:	7bfb      	ldrb	r3, [r7, #15]
 8010938:	4971      	ldr	r1, [pc, #452]	; (8010b00 <find_pregoal+0x29c>)
 801093a:	0112      	lsls	r2, r2, #4
 801093c:	4413      	add	r3, r2
 801093e:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 8010942:	687b      	ldr	r3, [r7, #4]
 8010944:	b299      	uxth	r1, r3
 8010946:	7bbb      	ldrb	r3, [r7, #14]
 8010948:	1c5a      	adds	r2, r3, #1
 801094a:	7bfb      	ldrb	r3, [r7, #15]
 801094c:	4401      	add	r1, r0
 801094e:	b288      	uxth	r0, r1
 8010950:	496b      	ldr	r1, [pc, #428]	; (8010b00 <find_pregoal+0x29c>)
 8010952:	0112      	lsls	r2, r2, #4
 8010954:	4413      	add	r3, r2
 8010956:	4602      	mov	r2, r0
 8010958:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
							if (((map[y + 1][x] & 0x0f ) << 4) != (map[y + 1][x] & 0xf0)) {		//map内の上位4bitと下位4bitが異なる場合
 801095c:	7bbb      	ldrb	r3, [r7, #14]
 801095e:	1c5a      	adds	r2, r3, #1
 8010960:	7bfb      	ldrb	r3, [r7, #15]
 8010962:	496b      	ldr	r1, [pc, #428]	; (8010b10 <find_pregoal+0x2ac>)
 8010964:	0112      	lsls	r2, r2, #4
 8010966:	440a      	add	r2, r1
 8010968:	4413      	add	r3, r2
 801096a:	781b      	ldrb	r3, [r3, #0]
 801096c:	011b      	lsls	r3, r3, #4
 801096e:	b2da      	uxtb	r2, r3
 8010970:	7bbb      	ldrb	r3, [r7, #14]
 8010972:	1c59      	adds	r1, r3, #1
 8010974:	7bfb      	ldrb	r3, [r7, #15]
 8010976:	4866      	ldr	r0, [pc, #408]	; (8010b10 <find_pregoal+0x2ac>)
 8010978:	0109      	lsls	r1, r1, #4
 801097a:	4401      	add	r1, r0
 801097c:	440b      	add	r3, r1
 801097e:	781b      	ldrb	r3, [r3, #0]
 8010980:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8010984:	429a      	cmp	r2, r3
 8010986:	d014      	beq.n	80109b2 <find_pregoal+0x14e>
								break_flag = 1;								//for文を抜けるフラグを立てて
 8010988:	2301      	movs	r3, #1
 801098a:	737b      	strb	r3, [r7, #13]
								m_step2 = smap[y + 1][x];					//仮goalの歩数を記録
 801098c:	7bbb      	ldrb	r3, [r7, #14]
 801098e:	1c5a      	adds	r2, r3, #1
 8010990:	7bfb      	ldrb	r3, [r7, #15]
 8010992:	495b      	ldr	r1, [pc, #364]	; (8010b00 <find_pregoal+0x29c>)
 8010994:	0112      	lsls	r2, r2, #4
 8010996:	4413      	add	r3, r2
 8010998:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 801099c:	4b5d      	ldr	r3, [pc, #372]	; (8010b14 <find_pregoal+0x2b0>)
 801099e:	801a      	strh	r2, [r3, #0]
								pregoal_x = x;
 80109a0:	4a5d      	ldr	r2, [pc, #372]	; (8010b18 <find_pregoal+0x2b4>)
 80109a2:	7bfb      	ldrb	r3, [r7, #15]
 80109a4:	7013      	strb	r3, [r2, #0]
								pregoal_y = y + 1;							//仮goalの座標を記録
 80109a6:	7bbb      	ldrb	r3, [r7, #14]
 80109a8:	3301      	adds	r3, #1
 80109aa:	b2da      	uxtb	r2, r3
 80109ac:	4b5b      	ldr	r3, [pc, #364]	; (8010b1c <find_pregoal+0x2b8>)
 80109ae:	701a      	strb	r2, [r3, #0]
								break;
 80109b0:	e110      	b.n	8010bd4 <find_pregoal+0x370>
							}
						}
					}
					//----東壁についての処理----
					if (!(m_temp & 0x04) && x != 0x0f) {					//東壁がなく現在最東端でないとき
 80109b2:	78fb      	ldrb	r3, [r7, #3]
 80109b4:	f003 0304 	and.w	r3, r3, #4
 80109b8:	2b00      	cmp	r3, #0
 80109ba:	d14d      	bne.n	8010a58 <find_pregoal+0x1f4>
 80109bc:	7bfb      	ldrb	r3, [r7, #15]
 80109be:	2b0f      	cmp	r3, #15
 80109c0:	d04a      	beq.n	8010a58 <find_pregoal+0x1f4>
						if (smap[y][x + 1] == 0x03e7) {						//東側が未記入なら
 80109c2:	7bba      	ldrb	r2, [r7, #14]
 80109c4:	7bfb      	ldrb	r3, [r7, #15]
 80109c6:	3301      	adds	r3, #1
 80109c8:	494d      	ldr	r1, [pc, #308]	; (8010b00 <find_pregoal+0x29c>)
 80109ca:	0112      	lsls	r2, r2, #4
 80109cc:	4413      	add	r3, r2
 80109ce:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80109d2:	f240 32e7 	movw	r2, #999	; 0x3e7
 80109d6:	4293      	cmp	r3, r2
 80109d8:	d13e      	bne.n	8010a58 <find_pregoal+0x1f4>
							smap[y][x + 1] = smap[y][x] + turn;				//曲線分インクリメントした値を次のマスの歩数マップに書き込む
 80109da:	7bba      	ldrb	r2, [r7, #14]
 80109dc:	7bfb      	ldrb	r3, [r7, #15]
 80109de:	4948      	ldr	r1, [pc, #288]	; (8010b00 <find_pregoal+0x29c>)
 80109e0:	0112      	lsls	r2, r2, #4
 80109e2:	4413      	add	r3, r2
 80109e4:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 80109e8:	687b      	ldr	r3, [r7, #4]
 80109ea:	b299      	uxth	r1, r3
 80109ec:	7bba      	ldrb	r2, [r7, #14]
 80109ee:	7bfb      	ldrb	r3, [r7, #15]
 80109f0:	3301      	adds	r3, #1
 80109f2:	4401      	add	r1, r0
 80109f4:	b288      	uxth	r0, r1
 80109f6:	4942      	ldr	r1, [pc, #264]	; (8010b00 <find_pregoal+0x29c>)
 80109f8:	0112      	lsls	r2, r2, #4
 80109fa:	4413      	add	r3, r2
 80109fc:	4602      	mov	r2, r0
 80109fe:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
							if (((map[y][x + 1] & 0x0f) << 4) != (map[y][x + 1] & 0xf0)) {		//map内の上位4bitと下位4bitが異なる場合
 8010a02:	7bba      	ldrb	r2, [r7, #14]
 8010a04:	7bfb      	ldrb	r3, [r7, #15]
 8010a06:	3301      	adds	r3, #1
 8010a08:	4941      	ldr	r1, [pc, #260]	; (8010b10 <find_pregoal+0x2ac>)
 8010a0a:	0112      	lsls	r2, r2, #4
 8010a0c:	440a      	add	r2, r1
 8010a0e:	4413      	add	r3, r2
 8010a10:	781b      	ldrb	r3, [r3, #0]
 8010a12:	011b      	lsls	r3, r3, #4
 8010a14:	b2da      	uxtb	r2, r3
 8010a16:	7bb9      	ldrb	r1, [r7, #14]
 8010a18:	7bfb      	ldrb	r3, [r7, #15]
 8010a1a:	3301      	adds	r3, #1
 8010a1c:	483c      	ldr	r0, [pc, #240]	; (8010b10 <find_pregoal+0x2ac>)
 8010a1e:	0109      	lsls	r1, r1, #4
 8010a20:	4401      	add	r1, r0
 8010a22:	440b      	add	r3, r1
 8010a24:	781b      	ldrb	r3, [r3, #0]
 8010a26:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8010a2a:	429a      	cmp	r2, r3
 8010a2c:	d014      	beq.n	8010a58 <find_pregoal+0x1f4>
								break_flag = 1;								//for文を抜けるフラグを立てて
 8010a2e:	2301      	movs	r3, #1
 8010a30:	737b      	strb	r3, [r7, #13]
								m_step2 = smap[y][x + 1];					//仮ゴールの歩数を記録
 8010a32:	7bba      	ldrb	r2, [r7, #14]
 8010a34:	7bfb      	ldrb	r3, [r7, #15]
 8010a36:	3301      	adds	r3, #1
 8010a38:	4931      	ldr	r1, [pc, #196]	; (8010b00 <find_pregoal+0x29c>)
 8010a3a:	0112      	lsls	r2, r2, #4
 8010a3c:	4413      	add	r3, r2
 8010a3e:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8010a42:	4b34      	ldr	r3, [pc, #208]	; (8010b14 <find_pregoal+0x2b0>)
 8010a44:	801a      	strh	r2, [r3, #0]
								pregoal_x = x + 1;
 8010a46:	7bfb      	ldrb	r3, [r7, #15]
 8010a48:	3301      	adds	r3, #1
 8010a4a:	b2da      	uxtb	r2, r3
 8010a4c:	4b32      	ldr	r3, [pc, #200]	; (8010b18 <find_pregoal+0x2b4>)
 8010a4e:	701a      	strb	r2, [r3, #0]
								pregoal_y = y;								//仮goalの座標を記録
 8010a50:	4a32      	ldr	r2, [pc, #200]	; (8010b1c <find_pregoal+0x2b8>)
 8010a52:	7bbb      	ldrb	r3, [r7, #14]
 8010a54:	7013      	strb	r3, [r2, #0]
								break;
 8010a56:	e0bd      	b.n	8010bd4 <find_pregoal+0x370>
							}
						}
					}
					//----南壁についての処理----
					if (!(m_temp & 0x02) && y != 0) {						//南壁がなく現在最南端でないとき
 8010a58:	78fb      	ldrb	r3, [r7, #3]
 8010a5a:	f003 0302 	and.w	r3, r3, #2
 8010a5e:	2b00      	cmp	r3, #0
 8010a60:	d15e      	bne.n	8010b20 <find_pregoal+0x2bc>
 8010a62:	7bbb      	ldrb	r3, [r7, #14]
 8010a64:	2b00      	cmp	r3, #0
 8010a66:	d05b      	beq.n	8010b20 <find_pregoal+0x2bc>
						if (smap[y - 1][x] == 0x03e7) {						//南側が未記入なら
 8010a68:	7bbb      	ldrb	r3, [r7, #14]
 8010a6a:	1e5a      	subs	r2, r3, #1
 8010a6c:	7bfb      	ldrb	r3, [r7, #15]
 8010a6e:	4924      	ldr	r1, [pc, #144]	; (8010b00 <find_pregoal+0x29c>)
 8010a70:	0112      	lsls	r2, r2, #4
 8010a72:	4413      	add	r3, r2
 8010a74:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8010a78:	f240 32e7 	movw	r2, #999	; 0x3e7
 8010a7c:	4293      	cmp	r3, r2
 8010a7e:	d14f      	bne.n	8010b20 <find_pregoal+0x2bc>
							smap[y - 1][x] = smap[y][x] + turn;				//曲線分インクリメントした値を次のマスの歩数マップに書き込む
 8010a80:	7bba      	ldrb	r2, [r7, #14]
 8010a82:	7bfb      	ldrb	r3, [r7, #15]
 8010a84:	491e      	ldr	r1, [pc, #120]	; (8010b00 <find_pregoal+0x29c>)
 8010a86:	0112      	lsls	r2, r2, #4
 8010a88:	4413      	add	r3, r2
 8010a8a:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 8010a8e:	687b      	ldr	r3, [r7, #4]
 8010a90:	b299      	uxth	r1, r3
 8010a92:	7bbb      	ldrb	r3, [r7, #14]
 8010a94:	1e5a      	subs	r2, r3, #1
 8010a96:	7bfb      	ldrb	r3, [r7, #15]
 8010a98:	4401      	add	r1, r0
 8010a9a:	b288      	uxth	r0, r1
 8010a9c:	4918      	ldr	r1, [pc, #96]	; (8010b00 <find_pregoal+0x29c>)
 8010a9e:	0112      	lsls	r2, r2, #4
 8010aa0:	4413      	add	r3, r2
 8010aa2:	4602      	mov	r2, r0
 8010aa4:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
							if (((map[y - 1][x] & 0x0f) << 4) != (map[y - 1][x] & 0xf0)) {		//map内の上位4bitと下位4bitが異なる場合
 8010aa8:	7bbb      	ldrb	r3, [r7, #14]
 8010aaa:	1e5a      	subs	r2, r3, #1
 8010aac:	7bfb      	ldrb	r3, [r7, #15]
 8010aae:	4918      	ldr	r1, [pc, #96]	; (8010b10 <find_pregoal+0x2ac>)
 8010ab0:	0112      	lsls	r2, r2, #4
 8010ab2:	440a      	add	r2, r1
 8010ab4:	4413      	add	r3, r2
 8010ab6:	781b      	ldrb	r3, [r3, #0]
 8010ab8:	011b      	lsls	r3, r3, #4
 8010aba:	b2da      	uxtb	r2, r3
 8010abc:	7bbb      	ldrb	r3, [r7, #14]
 8010abe:	1e59      	subs	r1, r3, #1
 8010ac0:	7bfb      	ldrb	r3, [r7, #15]
 8010ac2:	4813      	ldr	r0, [pc, #76]	; (8010b10 <find_pregoal+0x2ac>)
 8010ac4:	0109      	lsls	r1, r1, #4
 8010ac6:	4401      	add	r1, r0
 8010ac8:	440b      	add	r3, r1
 8010aca:	781b      	ldrb	r3, [r3, #0]
 8010acc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8010ad0:	429a      	cmp	r2, r3
 8010ad2:	d025      	beq.n	8010b20 <find_pregoal+0x2bc>
								break_flag = 1;								//for文を抜けるフラグを立てて
 8010ad4:	2301      	movs	r3, #1
 8010ad6:	737b      	strb	r3, [r7, #13]
								m_step2 = smap[y - 1][x];					//仮ゴールの歩数を記録
 8010ad8:	7bbb      	ldrb	r3, [r7, #14]
 8010ada:	1e5a      	subs	r2, r3, #1
 8010adc:	7bfb      	ldrb	r3, [r7, #15]
 8010ade:	4908      	ldr	r1, [pc, #32]	; (8010b00 <find_pregoal+0x29c>)
 8010ae0:	0112      	lsls	r2, r2, #4
 8010ae2:	4413      	add	r3, r2
 8010ae4:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8010ae8:	4b0a      	ldr	r3, [pc, #40]	; (8010b14 <find_pregoal+0x2b0>)
 8010aea:	801a      	strh	r2, [r3, #0]
								pregoal_x = x;
 8010aec:	4a0a      	ldr	r2, [pc, #40]	; (8010b18 <find_pregoal+0x2b4>)
 8010aee:	7bfb      	ldrb	r3, [r7, #15]
 8010af0:	7013      	strb	r3, [r2, #0]
								pregoal_y = y - 1;							//仮goalの座標を記録
 8010af2:	7bbb      	ldrb	r3, [r7, #14]
 8010af4:	3b01      	subs	r3, #1
 8010af6:	b2da      	uxtb	r2, r3
 8010af8:	4b08      	ldr	r3, [pc, #32]	; (8010b1c <find_pregoal+0x2b8>)
 8010afa:	701a      	strb	r2, [r3, #0]
								break;
 8010afc:	e06a      	b.n	8010bd4 <find_pregoal+0x370>
 8010afe:	bf00      	nop
 8010b00:	20000d60 	.word	0x20000d60
 8010b04:	20000f64 	.word	0x20000f64
 8010b08:	20000c0c 	.word	0x20000c0c
 8010b0c:	2000034e 	.word	0x2000034e
 8010b10:	200001ac 	.word	0x200001ac
 8010b14:	20000c04 	.word	0x20000c04
 8010b18:	20000d5c 	.word	0x20000d5c
 8010b1c:	200012a1 	.word	0x200012a1
							}
						}
					}
					//----西壁についての処理----
					if (!(m_temp & 0x01) && x != 0) {						//西壁がなく現在最西端でないとき
 8010b20:	78fb      	ldrb	r3, [r7, #3]
 8010b22:	f003 0301 	and.w	r3, r3, #1
 8010b26:	2b00      	cmp	r3, #0
 8010b28:	d14d      	bne.n	8010bc6 <find_pregoal+0x362>
 8010b2a:	7bfb      	ldrb	r3, [r7, #15]
 8010b2c:	2b00      	cmp	r3, #0
 8010b2e:	d04a      	beq.n	8010bc6 <find_pregoal+0x362>
						if (smap[y][x - 1] == 0x03e7) {						//西側が未記入なら
 8010b30:	7bba      	ldrb	r2, [r7, #14]
 8010b32:	7bfb      	ldrb	r3, [r7, #15]
 8010b34:	3b01      	subs	r3, #1
 8010b36:	493e      	ldr	r1, [pc, #248]	; (8010c30 <find_pregoal+0x3cc>)
 8010b38:	0112      	lsls	r2, r2, #4
 8010b3a:	4413      	add	r3, r2
 8010b3c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8010b40:	f240 32e7 	movw	r2, #999	; 0x3e7
 8010b44:	4293      	cmp	r3, r2
 8010b46:	d13e      	bne.n	8010bc6 <find_pregoal+0x362>
							smap[y][x - 1] = smap[y][x] + turn;				//次の歩数を書き込む
 8010b48:	7bba      	ldrb	r2, [r7, #14]
 8010b4a:	7bfb      	ldrb	r3, [r7, #15]
 8010b4c:	4938      	ldr	r1, [pc, #224]	; (8010c30 <find_pregoal+0x3cc>)
 8010b4e:	0112      	lsls	r2, r2, #4
 8010b50:	4413      	add	r3, r2
 8010b52:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 8010b56:	687b      	ldr	r3, [r7, #4]
 8010b58:	b299      	uxth	r1, r3
 8010b5a:	7bba      	ldrb	r2, [r7, #14]
 8010b5c:	7bfb      	ldrb	r3, [r7, #15]
 8010b5e:	3b01      	subs	r3, #1
 8010b60:	4401      	add	r1, r0
 8010b62:	b288      	uxth	r0, r1
 8010b64:	4932      	ldr	r1, [pc, #200]	; (8010c30 <find_pregoal+0x3cc>)
 8010b66:	0112      	lsls	r2, r2, #4
 8010b68:	4413      	add	r3, r2
 8010b6a:	4602      	mov	r2, r0
 8010b6c:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
							if (((map[y][x - 1] & 0x0f) << 4) != (map[y][x - 1] & 0xf0)) {		//map内の上位4bitと下位4bitが異なる場合
 8010b70:	7bba      	ldrb	r2, [r7, #14]
 8010b72:	7bfb      	ldrb	r3, [r7, #15]
 8010b74:	3b01      	subs	r3, #1
 8010b76:	492f      	ldr	r1, [pc, #188]	; (8010c34 <find_pregoal+0x3d0>)
 8010b78:	0112      	lsls	r2, r2, #4
 8010b7a:	440a      	add	r2, r1
 8010b7c:	4413      	add	r3, r2
 8010b7e:	781b      	ldrb	r3, [r3, #0]
 8010b80:	011b      	lsls	r3, r3, #4
 8010b82:	b2da      	uxtb	r2, r3
 8010b84:	7bb9      	ldrb	r1, [r7, #14]
 8010b86:	7bfb      	ldrb	r3, [r7, #15]
 8010b88:	3b01      	subs	r3, #1
 8010b8a:	482a      	ldr	r0, [pc, #168]	; (8010c34 <find_pregoal+0x3d0>)
 8010b8c:	0109      	lsls	r1, r1, #4
 8010b8e:	4401      	add	r1, r0
 8010b90:	440b      	add	r3, r1
 8010b92:	781b      	ldrb	r3, [r3, #0]
 8010b94:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8010b98:	429a      	cmp	r2, r3
 8010b9a:	d014      	beq.n	8010bc6 <find_pregoal+0x362>
								break_flag = 1;								//for文を抜けるフラグを立てて
 8010b9c:	2301      	movs	r3, #1
 8010b9e:	737b      	strb	r3, [r7, #13]
								m_step2 = smap[y][x - 1];					//仮ゴールの歩数を記録
 8010ba0:	7bba      	ldrb	r2, [r7, #14]
 8010ba2:	7bfb      	ldrb	r3, [r7, #15]
 8010ba4:	3b01      	subs	r3, #1
 8010ba6:	4922      	ldr	r1, [pc, #136]	; (8010c30 <find_pregoal+0x3cc>)
 8010ba8:	0112      	lsls	r2, r2, #4
 8010baa:	4413      	add	r3, r2
 8010bac:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8010bb0:	4b21      	ldr	r3, [pc, #132]	; (8010c38 <find_pregoal+0x3d4>)
 8010bb2:	801a      	strh	r2, [r3, #0]
								pregoal_x = x - 1;
 8010bb4:	7bfb      	ldrb	r3, [r7, #15]
 8010bb6:	3b01      	subs	r3, #1
 8010bb8:	b2da      	uxtb	r2, r3
 8010bba:	4b20      	ldr	r3, [pc, #128]	; (8010c3c <find_pregoal+0x3d8>)
 8010bbc:	701a      	strb	r2, [r3, #0]
								pregoal_y = y;								//仮goalの座標を記録
 8010bbe:	4a20      	ldr	r2, [pc, #128]	; (8010c40 <find_pregoal+0x3dc>)
 8010bc0:	7bbb      	ldrb	r3, [r7, #14]
 8010bc2:	7013      	strb	r3, [r2, #0]
								break;							}
 8010bc4:	e006      	b.n	8010bd4 <find_pregoal+0x370>
			for (x = 0; x <= 0x0f; x++) {									//各X座標で実行
 8010bc6:	7bfb      	ldrb	r3, [r7, #15]
 8010bc8:	3301      	adds	r3, #1
 8010bca:	73fb      	strb	r3, [r7, #15]
 8010bcc:	7bfb      	ldrb	r3, [r7, #15]
 8010bce:	2b0f      	cmp	r3, #15
 8010bd0:	f67f ae88 	bls.w	80108e4 <find_pregoal+0x80>
						}
					}
				}
			}
			if (break_flag) break;		//map内の上位4bitと下位4bitが異なる場合、for文を抜ける
 8010bd4:	7b7b      	ldrb	r3, [r7, #13]
 8010bd6:	2b00      	cmp	r3, #0
 8010bd8:	d107      	bne.n	8010bea <find_pregoal+0x386>
		for (y = 0; y <= 0x0f; y++) {										//各Y座標で実行
 8010bda:	7bbb      	ldrb	r3, [r7, #14]
 8010bdc:	3301      	adds	r3, #1
 8010bde:	73bb      	strb	r3, [r7, #14]
 8010be0:	7bbb      	ldrb	r3, [r7, #14]
 8010be2:	2b0f      	cmp	r3, #15
 8010be4:	f67f ae7b 	bls.w	80108de <find_pregoal+0x7a>
 8010be8:	e000      	b.n	8010bec <find_pregoal+0x388>
			if (break_flag) break;		//map内の上位4bitと下位4bitが異なる場合、for文を抜ける
 8010bea:	bf00      	nop
		}
		//====歩数カウンタのインクリメント====
		m_step++;
 8010bec:	4b15      	ldr	r3, [pc, #84]	; (8010c44 <find_pregoal+0x3e0>)
 8010bee:	881b      	ldrh	r3, [r3, #0]
 8010bf0:	3301      	adds	r3, #1
 8010bf2:	b29a      	uxth	r2, r3
 8010bf4:	4b13      	ldr	r3, [pc, #76]	; (8010c44 <find_pregoal+0x3e0>)
 8010bf6:	801a      	strh	r2, [r3, #0]
		if(m_step > 500) MF2.FLAG.ALLMAP = 1;
 8010bf8:	4b12      	ldr	r3, [pc, #72]	; (8010c44 <find_pregoal+0x3e0>)
 8010bfa:	881b      	ldrh	r3, [r3, #0]
 8010bfc:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8010c00:	d904      	bls.n	8010c0c <find_pregoal+0x3a8>
 8010c02:	4a11      	ldr	r2, [pc, #68]	; (8010c48 <find_pregoal+0x3e4>)
 8010c04:	8813      	ldrh	r3, [r2, #0]
 8010c06:	f043 0304 	orr.w	r3, r3, #4
 8010c0a:	8013      	strh	r3, [r2, #0]
	} while(break_flag == 0 && MF2.FLAG.ALLMAP != 1);		//未探索壁ありマスを見つけるまで実行
 8010c0c:	7b7b      	ldrb	r3, [r7, #13]
 8010c0e:	2b00      	cmp	r3, #0
 8010c10:	d107      	bne.n	8010c22 <find_pregoal+0x3be>
 8010c12:	4b0d      	ldr	r3, [pc, #52]	; (8010c48 <find_pregoal+0x3e4>)
 8010c14:	881b      	ldrh	r3, [r3, #0]
 8010c16:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8010c1a:	b2db      	uxtb	r3, r3
 8010c1c:	2b01      	cmp	r3, #1
 8010c1e:	f47f ae5b 	bne.w	80108d8 <find_pregoal+0x74>
}
 8010c22:	bf00      	nop
 8010c24:	3714      	adds	r7, #20
 8010c26:	46bd      	mov	sp, r7
 8010c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c2c:	4770      	bx	lr
 8010c2e:	bf00      	nop
 8010c30:	20000d60 	.word	0x20000d60
 8010c34:	200001ac 	.word	0x200001ac
 8010c38:	20000c04 	.word	0x20000c04
 8010c3c:	20000d5c 	.word	0x20000d5c
 8010c40:	200012a1 	.word	0x200012a1
 8010c44:	2000034e 	.word	0x2000034e
 8010c48:	20000f64 	.word	0x20000f64

08010c4c <make_smap2>:
//	歩数マップを作成する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void make_smap2()
{
 8010c4c:	b480      	push	{r7}
 8010c4e:	b085      	sub	sp, #20
 8010c50:	af00      	add	r7, sp, #0
	//====変数宣言====
	uint8_t x, y;															//for文用変数
	uint8_t m_temp;															//マップデータ一時保持

	//====歩数マップのクリア====
	for (y = 0; y <= 0x0f; y++) {											//各Y座標で実行
 8010c52:	2300      	movs	r3, #0
 8010c54:	73bb      	strb	r3, [r7, #14]
 8010c56:	e014      	b.n	8010c82 <make_smap2+0x36>
		for (x = 0; x <= 0x0f; x++) {										//各X座標で実行
 8010c58:	2300      	movs	r3, #0
 8010c5a:	73fb      	strb	r3, [r7, #15]
 8010c5c:	e00b      	b.n	8010c76 <make_smap2+0x2a>
			smap[y][x] = 0x03e7;											//未記入部分は歩数最大とする
 8010c5e:	7bba      	ldrb	r2, [r7, #14]
 8010c60:	7bfb      	ldrb	r3, [r7, #15]
 8010c62:	4986      	ldr	r1, [pc, #536]	; (8010e7c <make_smap2+0x230>)
 8010c64:	0112      	lsls	r2, r2, #4
 8010c66:	4413      	add	r3, r2
 8010c68:	f240 32e7 	movw	r2, #999	; 0x3e7
 8010c6c:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for (x = 0; x <= 0x0f; x++) {										//各X座標で実行
 8010c70:	7bfb      	ldrb	r3, [r7, #15]
 8010c72:	3301      	adds	r3, #1
 8010c74:	73fb      	strb	r3, [r7, #15]
 8010c76:	7bfb      	ldrb	r3, [r7, #15]
 8010c78:	2b0f      	cmp	r3, #15
 8010c7a:	d9f0      	bls.n	8010c5e <make_smap2+0x12>
	for (y = 0; y <= 0x0f; y++) {											//各Y座標で実行
 8010c7c:	7bbb      	ldrb	r3, [r7, #14]
 8010c7e:	3301      	adds	r3, #1
 8010c80:	73bb      	strb	r3, [r7, #14]
 8010c82:	7bbb      	ldrb	r3, [r7, #14]
 8010c84:	2b0f      	cmp	r3, #15
 8010c86:	d9e7      	bls.n	8010c58 <make_smap2+0xc>
		}
	}

	//====仮ゴール座標を0にする====
	smap[pregoal_y][pregoal_x] = 0;
 8010c88:	4b7d      	ldr	r3, [pc, #500]	; (8010e80 <make_smap2+0x234>)
 8010c8a:	781b      	ldrb	r3, [r3, #0]
 8010c8c:	4618      	mov	r0, r3
 8010c8e:	4b7d      	ldr	r3, [pc, #500]	; (8010e84 <make_smap2+0x238>)
 8010c90:	781b      	ldrb	r3, [r3, #0]
 8010c92:	4619      	mov	r1, r3
 8010c94:	4a79      	ldr	r2, [pc, #484]	; (8010e7c <make_smap2+0x230>)
 8010c96:	0103      	lsls	r3, r0, #4
 8010c98:	440b      	add	r3, r1
 8010c9a:	2100      	movs	r1, #0
 8010c9c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

	//====歩数カウンタを0にする====
	m_step = 0;																//現在記入した最大の歩数となる
 8010ca0:	4b79      	ldr	r3, [pc, #484]	; (8010e88 <make_smap2+0x23c>)
 8010ca2:	2200      	movs	r2, #0
 8010ca4:	801a      	strh	r2, [r3, #0]

	//====歩数カウンタの重みづけ====
	int straight = 3;
 8010ca6:	2303      	movs	r3, #3
 8010ca8:	60bb      	str	r3, [r7, #8]
	int turn = 5;
 8010caa:	2305      	movs	r3, #5
 8010cac:	607b      	str	r3, [r7, #4]

	//====自分の座標にたどり着くまでループ====
	do {
		//----マップ全域を捜索----
		for (y = 0; y <= 0x0f; y++) {										//各Y座標で実行
 8010cae:	2300      	movs	r3, #0
 8010cb0:	73bb      	strb	r3, [r7, #14]
 8010cb2:	e0c0      	b.n	8010e36 <make_smap2+0x1ea>
			for (x = 0; x <= 0x0f; x++) {									//各X座標で実行
 8010cb4:	2300      	movs	r3, #0
 8010cb6:	73fb      	strb	r3, [r7, #15]
 8010cb8:	e0b6      	b.n	8010e28 <make_smap2+0x1dc>
				//----現在最大の歩数を発見したとき----
				if (smap[y][x] == m_step) {									//歩数格納変数m_stepの値が現在最大の歩数のとき
 8010cba:	7bba      	ldrb	r2, [r7, #14]
 8010cbc:	7bfb      	ldrb	r3, [r7, #15]
 8010cbe:	496f      	ldr	r1, [pc, #444]	; (8010e7c <make_smap2+0x230>)
 8010cc0:	0112      	lsls	r2, r2, #4
 8010cc2:	4413      	add	r3, r2
 8010cc4:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8010cc8:	4b6f      	ldr	r3, [pc, #444]	; (8010e88 <make_smap2+0x23c>)
 8010cca:	881b      	ldrh	r3, [r3, #0]
 8010ccc:	429a      	cmp	r2, r3
 8010cce:	f040 80a8 	bne.w	8010e22 <make_smap2+0x1d6>
					m_temp = map[y][x];										//map配列からマップデータを取り出す
 8010cd2:	7bba      	ldrb	r2, [r7, #14]
 8010cd4:	7bfb      	ldrb	r3, [r7, #15]
 8010cd6:	496d      	ldr	r1, [pc, #436]	; (8010e8c <make_smap2+0x240>)
 8010cd8:	0112      	lsls	r2, r2, #4
 8010cda:	440a      	add	r2, r1
 8010cdc:	4413      	add	r3, r2
 8010cde:	781b      	ldrb	r3, [r3, #0]
 8010ce0:	70fb      	strb	r3, [r7, #3]
					//----北壁についての処理----
					if (!(m_temp & 0x08) && y != 0x0f) {					//北壁がなく現在最北端でないとき
 8010ce2:	78fb      	ldrb	r3, [r7, #3]
 8010ce4:	f003 0308 	and.w	r3, r3, #8
 8010ce8:	2b00      	cmp	r3, #0
 8010cea:	d122      	bne.n	8010d32 <make_smap2+0xe6>
 8010cec:	7bbb      	ldrb	r3, [r7, #14]
 8010cee:	2b0f      	cmp	r3, #15
 8010cf0:	d01f      	beq.n	8010d32 <make_smap2+0xe6>
						if (smap[y + 1][x] == 0x03e7) {						//北側が未記入なら
 8010cf2:	7bbb      	ldrb	r3, [r7, #14]
 8010cf4:	1c5a      	adds	r2, r3, #1
 8010cf6:	7bfb      	ldrb	r3, [r7, #15]
 8010cf8:	4960      	ldr	r1, [pc, #384]	; (8010e7c <make_smap2+0x230>)
 8010cfa:	0112      	lsls	r2, r2, #4
 8010cfc:	4413      	add	r3, r2
 8010cfe:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8010d02:	f240 32e7 	movw	r2, #999	; 0x3e7
 8010d06:	4293      	cmp	r3, r2
 8010d08:	d113      	bne.n	8010d32 <make_smap2+0xe6>
							smap[y + 1][x] = smap[y][x] + turn;				//曲線分インクリメントした値を次のマスの歩数マップに書き込む
 8010d0a:	7bba      	ldrb	r2, [r7, #14]
 8010d0c:	7bfb      	ldrb	r3, [r7, #15]
 8010d0e:	495b      	ldr	r1, [pc, #364]	; (8010e7c <make_smap2+0x230>)
 8010d10:	0112      	lsls	r2, r2, #4
 8010d12:	4413      	add	r3, r2
 8010d14:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 8010d18:	687b      	ldr	r3, [r7, #4]
 8010d1a:	b299      	uxth	r1, r3
 8010d1c:	7bbb      	ldrb	r3, [r7, #14]
 8010d1e:	1c5a      	adds	r2, r3, #1
 8010d20:	7bfb      	ldrb	r3, [r7, #15]
 8010d22:	4401      	add	r1, r0
 8010d24:	b288      	uxth	r0, r1
 8010d26:	4955      	ldr	r1, [pc, #340]	; (8010e7c <make_smap2+0x230>)
 8010d28:	0112      	lsls	r2, r2, #4
 8010d2a:	4413      	add	r3, r2
 8010d2c:	4602      	mov	r2, r0
 8010d2e:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
						}
					}
					//----東壁についての処理----
					if (!(m_temp & 0x04) && x != 0x0f) {					//東壁がなく現在最東端でないとき
 8010d32:	78fb      	ldrb	r3, [r7, #3]
 8010d34:	f003 0304 	and.w	r3, r3, #4
 8010d38:	2b00      	cmp	r3, #0
 8010d3a:	d122      	bne.n	8010d82 <make_smap2+0x136>
 8010d3c:	7bfb      	ldrb	r3, [r7, #15]
 8010d3e:	2b0f      	cmp	r3, #15
 8010d40:	d01f      	beq.n	8010d82 <make_smap2+0x136>
						if (smap[y][x + 1] == 0x03e7) {						//東側が未記入なら
 8010d42:	7bba      	ldrb	r2, [r7, #14]
 8010d44:	7bfb      	ldrb	r3, [r7, #15]
 8010d46:	3301      	adds	r3, #1
 8010d48:	494c      	ldr	r1, [pc, #304]	; (8010e7c <make_smap2+0x230>)
 8010d4a:	0112      	lsls	r2, r2, #4
 8010d4c:	4413      	add	r3, r2
 8010d4e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8010d52:	f240 32e7 	movw	r2, #999	; 0x3e7
 8010d56:	4293      	cmp	r3, r2
 8010d58:	d113      	bne.n	8010d82 <make_smap2+0x136>
							smap[y][x + 1] = smap[y][x] + turn;				//曲線分インクリメントした値を次のマスの歩数マップに書き込む
 8010d5a:	7bba      	ldrb	r2, [r7, #14]
 8010d5c:	7bfb      	ldrb	r3, [r7, #15]
 8010d5e:	4947      	ldr	r1, [pc, #284]	; (8010e7c <make_smap2+0x230>)
 8010d60:	0112      	lsls	r2, r2, #4
 8010d62:	4413      	add	r3, r2
 8010d64:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 8010d68:	687b      	ldr	r3, [r7, #4]
 8010d6a:	b299      	uxth	r1, r3
 8010d6c:	7bba      	ldrb	r2, [r7, #14]
 8010d6e:	7bfb      	ldrb	r3, [r7, #15]
 8010d70:	3301      	adds	r3, #1
 8010d72:	4401      	add	r1, r0
 8010d74:	b288      	uxth	r0, r1
 8010d76:	4941      	ldr	r1, [pc, #260]	; (8010e7c <make_smap2+0x230>)
 8010d78:	0112      	lsls	r2, r2, #4
 8010d7a:	4413      	add	r3, r2
 8010d7c:	4602      	mov	r2, r0
 8010d7e:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
						}
					}
					//----南壁についての処理----
					if (!(m_temp & 0x02) && y != 0) {						//南壁がなく現在最南端でないとき
 8010d82:	78fb      	ldrb	r3, [r7, #3]
 8010d84:	f003 0302 	and.w	r3, r3, #2
 8010d88:	2b00      	cmp	r3, #0
 8010d8a:	d122      	bne.n	8010dd2 <make_smap2+0x186>
 8010d8c:	7bbb      	ldrb	r3, [r7, #14]
 8010d8e:	2b00      	cmp	r3, #0
 8010d90:	d01f      	beq.n	8010dd2 <make_smap2+0x186>
						if (smap[y - 1][x] == 0x03e7) {						//南側が未記入なら
 8010d92:	7bbb      	ldrb	r3, [r7, #14]
 8010d94:	1e5a      	subs	r2, r3, #1
 8010d96:	7bfb      	ldrb	r3, [r7, #15]
 8010d98:	4938      	ldr	r1, [pc, #224]	; (8010e7c <make_smap2+0x230>)
 8010d9a:	0112      	lsls	r2, r2, #4
 8010d9c:	4413      	add	r3, r2
 8010d9e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8010da2:	f240 32e7 	movw	r2, #999	; 0x3e7
 8010da6:	4293      	cmp	r3, r2
 8010da8:	d113      	bne.n	8010dd2 <make_smap2+0x186>
							smap[y - 1][x] = smap[y][x] + turn;				//曲線分インクリメントした値を次のマスの歩数マップに書き込む
 8010daa:	7bba      	ldrb	r2, [r7, #14]
 8010dac:	7bfb      	ldrb	r3, [r7, #15]
 8010dae:	4933      	ldr	r1, [pc, #204]	; (8010e7c <make_smap2+0x230>)
 8010db0:	0112      	lsls	r2, r2, #4
 8010db2:	4413      	add	r3, r2
 8010db4:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 8010db8:	687b      	ldr	r3, [r7, #4]
 8010dba:	b299      	uxth	r1, r3
 8010dbc:	7bbb      	ldrb	r3, [r7, #14]
 8010dbe:	1e5a      	subs	r2, r3, #1
 8010dc0:	7bfb      	ldrb	r3, [r7, #15]
 8010dc2:	4401      	add	r1, r0
 8010dc4:	b288      	uxth	r0, r1
 8010dc6:	492d      	ldr	r1, [pc, #180]	; (8010e7c <make_smap2+0x230>)
 8010dc8:	0112      	lsls	r2, r2, #4
 8010dca:	4413      	add	r3, r2
 8010dcc:	4602      	mov	r2, r0
 8010dce:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
						}
					}
					//----西壁についての処理----
					if (!(m_temp & 0x01) && x != 0) {						//西壁がなく現在最西端でないとき
 8010dd2:	78fb      	ldrb	r3, [r7, #3]
 8010dd4:	f003 0301 	and.w	r3, r3, #1
 8010dd8:	2b00      	cmp	r3, #0
 8010dda:	d122      	bne.n	8010e22 <make_smap2+0x1d6>
 8010ddc:	7bfb      	ldrb	r3, [r7, #15]
 8010dde:	2b00      	cmp	r3, #0
 8010de0:	d01f      	beq.n	8010e22 <make_smap2+0x1d6>
						if (smap[y][x - 1] == 0x03e7) {						//西側が未記入なら
 8010de2:	7bba      	ldrb	r2, [r7, #14]
 8010de4:	7bfb      	ldrb	r3, [r7, #15]
 8010de6:	3b01      	subs	r3, #1
 8010de8:	4924      	ldr	r1, [pc, #144]	; (8010e7c <make_smap2+0x230>)
 8010dea:	0112      	lsls	r2, r2, #4
 8010dec:	4413      	add	r3, r2
 8010dee:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8010df2:	f240 32e7 	movw	r2, #999	; 0x3e7
 8010df6:	4293      	cmp	r3, r2
 8010df8:	d113      	bne.n	8010e22 <make_smap2+0x1d6>
							smap[y][x - 1] = smap[y][x] + turn;				//次の歩数を書き込む
 8010dfa:	7bba      	ldrb	r2, [r7, #14]
 8010dfc:	7bfb      	ldrb	r3, [r7, #15]
 8010dfe:	491f      	ldr	r1, [pc, #124]	; (8010e7c <make_smap2+0x230>)
 8010e00:	0112      	lsls	r2, r2, #4
 8010e02:	4413      	add	r3, r2
 8010e04:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 8010e08:	687b      	ldr	r3, [r7, #4]
 8010e0a:	b299      	uxth	r1, r3
 8010e0c:	7bba      	ldrb	r2, [r7, #14]
 8010e0e:	7bfb      	ldrb	r3, [r7, #15]
 8010e10:	3b01      	subs	r3, #1
 8010e12:	4401      	add	r1, r0
 8010e14:	b288      	uxth	r0, r1
 8010e16:	4919      	ldr	r1, [pc, #100]	; (8010e7c <make_smap2+0x230>)
 8010e18:	0112      	lsls	r2, r2, #4
 8010e1a:	4413      	add	r3, r2
 8010e1c:	4602      	mov	r2, r0
 8010e1e:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			for (x = 0; x <= 0x0f; x++) {									//各X座標で実行
 8010e22:	7bfb      	ldrb	r3, [r7, #15]
 8010e24:	3301      	adds	r3, #1
 8010e26:	73fb      	strb	r3, [r7, #15]
 8010e28:	7bfb      	ldrb	r3, [r7, #15]
 8010e2a:	2b0f      	cmp	r3, #15
 8010e2c:	f67f af45 	bls.w	8010cba <make_smap2+0x6e>
		for (y = 0; y <= 0x0f; y++) {										//各Y座標で実行
 8010e30:	7bbb      	ldrb	r3, [r7, #14]
 8010e32:	3301      	adds	r3, #1
 8010e34:	73bb      	strb	r3, [r7, #14]
 8010e36:	7bbb      	ldrb	r3, [r7, #14]
 8010e38:	2b0f      	cmp	r3, #15
 8010e3a:	f67f af3b 	bls.w	8010cb4 <make_smap2+0x68>
					}
				}
			}
		}
		//====歩数カウンタのインクリメント====
		m_step++;
 8010e3e:	4b12      	ldr	r3, [pc, #72]	; (8010e88 <make_smap2+0x23c>)
 8010e40:	881b      	ldrh	r3, [r3, #0]
 8010e42:	3301      	adds	r3, #1
 8010e44:	b29a      	uxth	r2, r3
 8010e46:	4b10      	ldr	r3, [pc, #64]	; (8010e88 <make_smap2+0x23c>)
 8010e48:	801a      	strh	r2, [r3, #0]
	} while (smap[mouse.y][mouse.x] == 0x03e7);		//現在座標が未記入ではなくなるまで実行
 8010e4a:	4b11      	ldr	r3, [pc, #68]	; (8010e90 <make_smap2+0x244>)
 8010e4c:	785b      	ldrb	r3, [r3, #1]
 8010e4e:	b2db      	uxtb	r3, r3
 8010e50:	4618      	mov	r0, r3
 8010e52:	4b0f      	ldr	r3, [pc, #60]	; (8010e90 <make_smap2+0x244>)
 8010e54:	781b      	ldrb	r3, [r3, #0]
 8010e56:	b2db      	uxtb	r3, r3
 8010e58:	4619      	mov	r1, r3
 8010e5a:	4a08      	ldr	r2, [pc, #32]	; (8010e7c <make_smap2+0x230>)
 8010e5c:	0103      	lsls	r3, r0, #4
 8010e5e:	440b      	add	r3, r1
 8010e60:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010e64:	f240 32e7 	movw	r2, #999	; 0x3e7
 8010e68:	4293      	cmp	r3, r2
 8010e6a:	f43f af20 	beq.w	8010cae <make_smap2+0x62>
}
 8010e6e:	bf00      	nop
 8010e70:	3714      	adds	r7, #20
 8010e72:	46bd      	mov	sp, r7
 8010e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e78:	4770      	bx	lr
 8010e7a:	bf00      	nop
 8010e7c:	20000d60 	.word	0x20000d60
 8010e80:	200012a1 	.word	0x200012a1
 8010e84:	20000d5c 	.word	0x20000d5c
 8010e88:	2000034e 	.word	0x2000034e
 8010e8c:	200001ac 	.word	0x200001ac
 8010e90:	20000c0c 	.word	0x20000c0c

08010e94 <pass_route2>:
//pass_route2
// route配列をpass圧縮する(半区画ベース)
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void pass_route2(void){
 8010e94:	b480      	push	{r7}
 8010e96:	b083      	sub	sp, #12
 8010e98:	af00      	add	r7, sp, #0
	int i;
	uint8_t s_flag = 0;
 8010e9a:	2300      	movs	r3, #0
 8010e9c:	70fb      	strb	r3, [r7, #3]
	for(i = 0; i < 256; i++){
 8010e9e:	2300      	movs	r3, #0
 8010ea0:	607b      	str	r3, [r7, #4]
 8010ea2:	e007      	b.n	8010eb4 <pass_route2+0x20>
		pass[i] = 0;								//pass配列の初期化
 8010ea4:	4a83      	ldr	r2, [pc, #524]	; (80110b4 <pass_route2+0x220>)
 8010ea6:	687b      	ldr	r3, [r7, #4]
 8010ea8:	4413      	add	r3, r2
 8010eaa:	2200      	movs	r2, #0
 8010eac:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < 256; i++){
 8010eae:	687b      	ldr	r3, [r7, #4]
 8010eb0:	3301      	adds	r3, #1
 8010eb2:	607b      	str	r3, [r7, #4]
 8010eb4:	687b      	ldr	r3, [r7, #4]
 8010eb6:	2bff      	cmp	r3, #255	; 0xff
 8010eb8:	ddf4      	ble.n	8010ea4 <pass_route2+0x10>
	}
	uint8_t p = 0;									//pass配列の配列番号用変数
 8010eba:	2300      	movs	r3, #0
 8010ebc:	70bb      	strb	r3, [r7, #2]
	i = 0;
 8010ebe:	2300      	movs	r3, #0
 8010ec0:	607b      	str	r3, [r7, #4]
	uint8_t s = 0;									//a直線数カウント用変数
 8010ec2:	2300      	movs	r3, #0
 8010ec4:	707b      	strb	r3, [r7, #1]
	while(route[i-1] != 0xff){
 8010ec6:	e0e8      	b.n	801109a <pass_route2+0x206>
		s = 0;
 8010ec8:	2300      	movs	r3, #0
 8010eca:	707b      	strb	r3, [r7, #1]
		if(route[i] == 0x44){
 8010ecc:	4a7a      	ldr	r2, [pc, #488]	; (80110b8 <pass_route2+0x224>)
 8010ece:	687b      	ldr	r3, [r7, #4]
 8010ed0:	4413      	add	r3, r2
 8010ed2:	781b      	ldrb	r3, [r3, #0]
 8010ed4:	2b44      	cmp	r3, #68	; 0x44
 8010ed6:	d107      	bne.n	8010ee8 <pass_route2+0x54>
			pass[p] = -1;							//a右スラローム
 8010ed8:	78bb      	ldrb	r3, [r7, #2]
 8010eda:	4a76      	ldr	r2, [pc, #472]	; (80110b4 <pass_route2+0x220>)
 8010edc:	21ff      	movs	r1, #255	; 0xff
 8010ede:	54d1      	strb	r1, [r2, r3]
			i++;
 8010ee0:	687b      	ldr	r3, [r7, #4]
 8010ee2:	3301      	adds	r3, #1
 8010ee4:	607b      	str	r3, [r7, #4]
 8010ee6:	e0d5      	b.n	8011094 <pass_route2+0x200>
		}else if(route[i] == 0x11){
 8010ee8:	4a73      	ldr	r2, [pc, #460]	; (80110b8 <pass_route2+0x224>)
 8010eea:	687b      	ldr	r3, [r7, #4]
 8010eec:	4413      	add	r3, r2
 8010eee:	781b      	ldrb	r3, [r3, #0]
 8010ef0:	2b11      	cmp	r3, #17
 8010ef2:	d107      	bne.n	8010f04 <pass_route2+0x70>
			pass[p] = -2;							//a左スラローム
 8010ef4:	78bb      	ldrb	r3, [r7, #2]
 8010ef6:	4a6f      	ldr	r2, [pc, #444]	; (80110b4 <pass_route2+0x220>)
 8010ef8:	21fe      	movs	r1, #254	; 0xfe
 8010efa:	54d1      	strb	r1, [r2, r3]
			i++;
 8010efc:	687b      	ldr	r3, [r7, #4]
 8010efe:	3301      	adds	r3, #1
 8010f00:	607b      	str	r3, [r7, #4]
 8010f02:	e0c7      	b.n	8011094 <pass_route2+0x200>
		}else if(route[i] == 0x77 && route[i+1] == 0x44 && route[i+2] == 0x77){
 8010f04:	4a6c      	ldr	r2, [pc, #432]	; (80110b8 <pass_route2+0x224>)
 8010f06:	687b      	ldr	r3, [r7, #4]
 8010f08:	4413      	add	r3, r2
 8010f0a:	781b      	ldrb	r3, [r3, #0]
 8010f0c:	2b77      	cmp	r3, #119	; 0x77
 8010f0e:	d115      	bne.n	8010f3c <pass_route2+0xa8>
 8010f10:	687b      	ldr	r3, [r7, #4]
 8010f12:	3301      	adds	r3, #1
 8010f14:	4a68      	ldr	r2, [pc, #416]	; (80110b8 <pass_route2+0x224>)
 8010f16:	5cd3      	ldrb	r3, [r2, r3]
 8010f18:	2b44      	cmp	r3, #68	; 0x44
 8010f1a:	d10f      	bne.n	8010f3c <pass_route2+0xa8>
 8010f1c:	687b      	ldr	r3, [r7, #4]
 8010f1e:	3302      	adds	r3, #2
 8010f20:	4a65      	ldr	r2, [pc, #404]	; (80110b8 <pass_route2+0x224>)
 8010f22:	5cd3      	ldrb	r3, [r2, r3]
 8010f24:	2b77      	cmp	r3, #119	; 0x77
 8010f26:	d109      	bne.n	8010f3c <pass_route2+0xa8>
			s_flag = 0;
 8010f28:	2300      	movs	r3, #0
 8010f2a:	70fb      	strb	r3, [r7, #3]
			pass[p] = -3;							//a大回り右スラローム
 8010f2c:	78bb      	ldrb	r3, [r7, #2]
 8010f2e:	4a61      	ldr	r2, [pc, #388]	; (80110b4 <pass_route2+0x220>)
 8010f30:	21fd      	movs	r1, #253	; 0xfd
 8010f32:	54d1      	strb	r1, [r2, r3]
			i = i + 3;
 8010f34:	687b      	ldr	r3, [r7, #4]
 8010f36:	3303      	adds	r3, #3
 8010f38:	607b      	str	r3, [r7, #4]
 8010f3a:	e0ab      	b.n	8011094 <pass_route2+0x200>
		}else if(route[i] == 0x77 && route[i+1] == 0x11 && route[i+2] == 0x77){
 8010f3c:	4a5e      	ldr	r2, [pc, #376]	; (80110b8 <pass_route2+0x224>)
 8010f3e:	687b      	ldr	r3, [r7, #4]
 8010f40:	4413      	add	r3, r2
 8010f42:	781b      	ldrb	r3, [r3, #0]
 8010f44:	2b77      	cmp	r3, #119	; 0x77
 8010f46:	d115      	bne.n	8010f74 <pass_route2+0xe0>
 8010f48:	687b      	ldr	r3, [r7, #4]
 8010f4a:	3301      	adds	r3, #1
 8010f4c:	4a5a      	ldr	r2, [pc, #360]	; (80110b8 <pass_route2+0x224>)
 8010f4e:	5cd3      	ldrb	r3, [r2, r3]
 8010f50:	2b11      	cmp	r3, #17
 8010f52:	d10f      	bne.n	8010f74 <pass_route2+0xe0>
 8010f54:	687b      	ldr	r3, [r7, #4]
 8010f56:	3302      	adds	r3, #2
 8010f58:	4a57      	ldr	r2, [pc, #348]	; (80110b8 <pass_route2+0x224>)
 8010f5a:	5cd3      	ldrb	r3, [r2, r3]
 8010f5c:	2b77      	cmp	r3, #119	; 0x77
 8010f5e:	d109      	bne.n	8010f74 <pass_route2+0xe0>
			s_flag = 0;
 8010f60:	2300      	movs	r3, #0
 8010f62:	70fb      	strb	r3, [r7, #3]
			pass[p] = -4;							//a大回り左スラローム
 8010f64:	78bb      	ldrb	r3, [r7, #2]
 8010f66:	4a53      	ldr	r2, [pc, #332]	; (80110b4 <pass_route2+0x220>)
 8010f68:	21fc      	movs	r1, #252	; 0xfc
 8010f6a:	54d1      	strb	r1, [r2, r3]
			i = i + 3;
 8010f6c:	687b      	ldr	r3, [r7, #4]
 8010f6e:	3303      	adds	r3, #3
 8010f70:	607b      	str	r3, [r7, #4]
 8010f72:	e08f      	b.n	8011094 <pass_route2+0x200>
		}else if(route[i] == 0x77 && route[i+1] == 0x44 && route[i+2] == 0x44 && route[i+3] == 0x77){
 8010f74:	4a50      	ldr	r2, [pc, #320]	; (80110b8 <pass_route2+0x224>)
 8010f76:	687b      	ldr	r3, [r7, #4]
 8010f78:	4413      	add	r3, r2
 8010f7a:	781b      	ldrb	r3, [r3, #0]
 8010f7c:	2b77      	cmp	r3, #119	; 0x77
 8010f7e:	d11b      	bne.n	8010fb8 <pass_route2+0x124>
 8010f80:	687b      	ldr	r3, [r7, #4]
 8010f82:	3301      	adds	r3, #1
 8010f84:	4a4c      	ldr	r2, [pc, #304]	; (80110b8 <pass_route2+0x224>)
 8010f86:	5cd3      	ldrb	r3, [r2, r3]
 8010f88:	2b44      	cmp	r3, #68	; 0x44
 8010f8a:	d115      	bne.n	8010fb8 <pass_route2+0x124>
 8010f8c:	687b      	ldr	r3, [r7, #4]
 8010f8e:	3302      	adds	r3, #2
 8010f90:	4a49      	ldr	r2, [pc, #292]	; (80110b8 <pass_route2+0x224>)
 8010f92:	5cd3      	ldrb	r3, [r2, r3]
 8010f94:	2b44      	cmp	r3, #68	; 0x44
 8010f96:	d10f      	bne.n	8010fb8 <pass_route2+0x124>
 8010f98:	687b      	ldr	r3, [r7, #4]
 8010f9a:	3303      	adds	r3, #3
 8010f9c:	4a46      	ldr	r2, [pc, #280]	; (80110b8 <pass_route2+0x224>)
 8010f9e:	5cd3      	ldrb	r3, [r2, r3]
 8010fa0:	2b77      	cmp	r3, #119	; 0x77
 8010fa2:	d109      	bne.n	8010fb8 <pass_route2+0x124>
			s_flag = 0;
 8010fa4:	2300      	movs	r3, #0
 8010fa6:	70fb      	strb	r3, [r7, #3]
			pass[p] = -5;							//a大回り右180スラローム
 8010fa8:	78bb      	ldrb	r3, [r7, #2]
 8010faa:	4a42      	ldr	r2, [pc, #264]	; (80110b4 <pass_route2+0x220>)
 8010fac:	21fb      	movs	r1, #251	; 0xfb
 8010fae:	54d1      	strb	r1, [r2, r3]
			i = i + 4;
 8010fb0:	687b      	ldr	r3, [r7, #4]
 8010fb2:	3304      	adds	r3, #4
 8010fb4:	607b      	str	r3, [r7, #4]
 8010fb6:	e06d      	b.n	8011094 <pass_route2+0x200>
		}else if(route[i] == 0x77 && route[i+1] == 0x11 && route[i+2] == 0x11 && route[i+3] == 0x77){
 8010fb8:	4a3f      	ldr	r2, [pc, #252]	; (80110b8 <pass_route2+0x224>)
 8010fba:	687b      	ldr	r3, [r7, #4]
 8010fbc:	4413      	add	r3, r2
 8010fbe:	781b      	ldrb	r3, [r3, #0]
 8010fc0:	2b77      	cmp	r3, #119	; 0x77
 8010fc2:	d11b      	bne.n	8010ffc <pass_route2+0x168>
 8010fc4:	687b      	ldr	r3, [r7, #4]
 8010fc6:	3301      	adds	r3, #1
 8010fc8:	4a3b      	ldr	r2, [pc, #236]	; (80110b8 <pass_route2+0x224>)
 8010fca:	5cd3      	ldrb	r3, [r2, r3]
 8010fcc:	2b11      	cmp	r3, #17
 8010fce:	d115      	bne.n	8010ffc <pass_route2+0x168>
 8010fd0:	687b      	ldr	r3, [r7, #4]
 8010fd2:	3302      	adds	r3, #2
 8010fd4:	4a38      	ldr	r2, [pc, #224]	; (80110b8 <pass_route2+0x224>)
 8010fd6:	5cd3      	ldrb	r3, [r2, r3]
 8010fd8:	2b11      	cmp	r3, #17
 8010fda:	d10f      	bne.n	8010ffc <pass_route2+0x168>
 8010fdc:	687b      	ldr	r3, [r7, #4]
 8010fde:	3303      	adds	r3, #3
 8010fe0:	4a35      	ldr	r2, [pc, #212]	; (80110b8 <pass_route2+0x224>)
 8010fe2:	5cd3      	ldrb	r3, [r2, r3]
 8010fe4:	2b77      	cmp	r3, #119	; 0x77
 8010fe6:	d109      	bne.n	8010ffc <pass_route2+0x168>
			s_flag = 0;
 8010fe8:	2300      	movs	r3, #0
 8010fea:	70fb      	strb	r3, [r7, #3]
			pass[p] = -6;							//a大回り左180スラローム
 8010fec:	78bb      	ldrb	r3, [r7, #2]
 8010fee:	4a31      	ldr	r2, [pc, #196]	; (80110b4 <pass_route2+0x220>)
 8010ff0:	21fa      	movs	r1, #250	; 0xfa
 8010ff2:	54d1      	strb	r1, [r2, r3]
			i = i + 4;
 8010ff4:	687b      	ldr	r3, [r7, #4]
 8010ff6:	3304      	adds	r3, #4
 8010ff8:	607b      	str	r3, [r7, #4]
 8010ffa:	e04b      	b.n	8011094 <pass_route2+0x200>
		}else if(route[i] == 0xff){
 8010ffc:	4a2e      	ldr	r2, [pc, #184]	; (80110b8 <pass_route2+0x224>)
 8010ffe:	687b      	ldr	r3, [r7, #4]
 8011000:	4413      	add	r3, r2
 8011002:	781b      	ldrb	r3, [r3, #0]
 8011004:	2bff      	cmp	r3, #255	; 0xff
 8011006:	d107      	bne.n	8011018 <pass_route2+0x184>
			pass[p] = -114;							//a終了条件用
 8011008:	78bb      	ldrb	r3, [r7, #2]
 801100a:	4a2a      	ldr	r2, [pc, #168]	; (80110b4 <pass_route2+0x220>)
 801100c:	218e      	movs	r1, #142	; 0x8e
 801100e:	54d1      	strb	r1, [r2, r3]
			i++;
 8011010:	687b      	ldr	r3, [r7, #4]
 8011012:	3301      	adds	r3, #1
 8011014:	607b      	str	r3, [r7, #4]
 8011016:	e03d      	b.n	8011094 <pass_route2+0x200>
		}else if(route[i] == 0x77){
 8011018:	4a27      	ldr	r2, [pc, #156]	; (80110b8 <pass_route2+0x224>)
 801101a:	687b      	ldr	r3, [r7, #4]
 801101c:	4413      	add	r3, r2
 801101e:	781b      	ldrb	r3, [r3, #0]
 8011020:	2b77      	cmp	r3, #119	; 0x77
 8011022:	d137      	bne.n	8011094 <pass_route2+0x200>
			if(s_flag){
 8011024:	78fb      	ldrb	r3, [r7, #3]
 8011026:	2b00      	cmp	r3, #0
 8011028:	d012      	beq.n	8011050 <pass_route2+0x1bc>
				pass[p-1]++;
 801102a:	78bb      	ldrb	r3, [r7, #2]
 801102c:	3b01      	subs	r3, #1
 801102e:	4a21      	ldr	r2, [pc, #132]	; (80110b4 <pass_route2+0x220>)
 8011030:	56d2      	ldrsb	r2, [r2, r3]
 8011032:	b2d2      	uxtb	r2, r2
 8011034:	3201      	adds	r2, #1
 8011036:	b2d2      	uxtb	r2, r2
 8011038:	b251      	sxtb	r1, r2
 801103a:	4a1e      	ldr	r2, [pc, #120]	; (80110b4 <pass_route2+0x220>)
 801103c:	54d1      	strb	r1, [r2, r3]
				p--;
 801103e:	78bb      	ldrb	r3, [r7, #2]
 8011040:	3b01      	subs	r3, #1
 8011042:	70bb      	strb	r3, [r7, #2]
				s_flag = 0;
 8011044:	2300      	movs	r3, #0
 8011046:	70fb      	strb	r3, [r7, #3]
				i++;
 8011048:	687b      	ldr	r3, [r7, #4]
 801104a:	3301      	adds	r3, #1
 801104c:	607b      	str	r3, [r7, #4]
 801104e:	e021      	b.n	8011094 <pass_route2+0x200>
			}else{
				s++;
 8011050:	787b      	ldrb	r3, [r7, #1]
 8011052:	3301      	adds	r3, #1
 8011054:	707b      	strb	r3, [r7, #1]
				pass[p] = s;
 8011056:	78bb      	ldrb	r3, [r7, #2]
 8011058:	f997 1001 	ldrsb.w	r1, [r7, #1]
 801105c:	4a15      	ldr	r2, [pc, #84]	; (80110b4 <pass_route2+0x220>)
 801105e:	54d1      	strb	r1, [r2, r3]
				while(route[i+1] == 0x77){
 8011060:	e00c      	b.n	801107c <pass_route2+0x1e8>
					s_flag = 1;
 8011062:	2301      	movs	r3, #1
 8011064:	70fb      	strb	r3, [r7, #3]
					pass[p] = s;
 8011066:	78bb      	ldrb	r3, [r7, #2]
 8011068:	f997 1001 	ldrsb.w	r1, [r7, #1]
 801106c:	4a11      	ldr	r2, [pc, #68]	; (80110b4 <pass_route2+0x220>)
 801106e:	54d1      	strb	r1, [r2, r3]
					i++;
 8011070:	687b      	ldr	r3, [r7, #4]
 8011072:	3301      	adds	r3, #1
 8011074:	607b      	str	r3, [r7, #4]
					s++;
 8011076:	787b      	ldrb	r3, [r7, #1]
 8011078:	3301      	adds	r3, #1
 801107a:	707b      	strb	r3, [r7, #1]
				while(route[i+1] == 0x77){
 801107c:	687b      	ldr	r3, [r7, #4]
 801107e:	3301      	adds	r3, #1
 8011080:	4a0d      	ldr	r2, [pc, #52]	; (80110b8 <pass_route2+0x224>)
 8011082:	5cd3      	ldrb	r3, [r2, r3]
 8011084:	2b77      	cmp	r3, #119	; 0x77
 8011086:	d0ec      	beq.n	8011062 <pass_route2+0x1ce>
				}
				if(!s_flag){
 8011088:	78fb      	ldrb	r3, [r7, #3]
 801108a:	2b00      	cmp	r3, #0
 801108c:	d102      	bne.n	8011094 <pass_route2+0x200>
					i++;
 801108e:	687b      	ldr	r3, [r7, #4]
 8011090:	3301      	adds	r3, #1
 8011092:	607b      	str	r3, [r7, #4]
				}
			}
		}
		p++;
 8011094:	78bb      	ldrb	r3, [r7, #2]
 8011096:	3301      	adds	r3, #1
 8011098:	70bb      	strb	r3, [r7, #2]
	while(route[i-1] != 0xff){
 801109a:	687b      	ldr	r3, [r7, #4]
 801109c:	3b01      	subs	r3, #1
 801109e:	4a06      	ldr	r2, [pc, #24]	; (80110b8 <pass_route2+0x224>)
 80110a0:	5cd3      	ldrb	r3, [r2, r3]
 80110a2:	2bff      	cmp	r3, #255	; 0xff
 80110a4:	f47f af10 	bne.w	8010ec8 <pass_route2+0x34>
	}
}
 80110a8:	bf00      	nop
 80110aa:	370c      	adds	r7, #12
 80110ac:	46bd      	mov	sp, r7
 80110ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110b2:	4770      	bx	lr
 80110b4:	20000350 	.word	0x20000350
 80110b8:	20000c54 	.word	0x20000c54

080110bc <pass_route3>:
//pass_route3
// route配列をpass圧縮する(半区画ベース+斜めあり)
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void pass_route3(void){
 80110bc:	b480      	push	{r7}
 80110be:	b083      	sub	sp, #12
 80110c0:	af00      	add	r7, sp, #0
	int i;
	uint8_t s_flag = 0;
 80110c2:	2300      	movs	r3, #0
 80110c4:	70fb      	strb	r3, [r7, #3]
	MF2.FLAG.V = 0;										//a斜めフラグの初期化
 80110c6:	4a98      	ldr	r2, [pc, #608]	; (8011328 <pass_route3+0x26c>)
 80110c8:	8813      	ldrh	r3, [r2, #0]
 80110ca:	f36f 03c3 	bfc	r3, #3, #1
 80110ce:	8013      	strh	r3, [r2, #0]
	for(i = 0; i < 256; i++){
 80110d0:	2300      	movs	r3, #0
 80110d2:	607b      	str	r3, [r7, #4]
 80110d4:	e007      	b.n	80110e6 <pass_route3+0x2a>
		pass[i] = 0;								//pass配列の初期化
 80110d6:	4a95      	ldr	r2, [pc, #596]	; (801132c <pass_route3+0x270>)
 80110d8:	687b      	ldr	r3, [r7, #4]
 80110da:	4413      	add	r3, r2
 80110dc:	2200      	movs	r2, #0
 80110de:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < 256; i++){
 80110e0:	687b      	ldr	r3, [r7, #4]
 80110e2:	3301      	adds	r3, #1
 80110e4:	607b      	str	r3, [r7, #4]
 80110e6:	687b      	ldr	r3, [r7, #4]
 80110e8:	2bff      	cmp	r3, #255	; 0xff
 80110ea:	ddf4      	ble.n	80110d6 <pass_route3+0x1a>
	}
	uint8_t p = 0;									//pass配列の配列番号用変数
 80110ec:	2300      	movs	r3, #0
 80110ee:	70bb      	strb	r3, [r7, #2]
	i = 0;
 80110f0:	2300      	movs	r3, #0
 80110f2:	607b      	str	r3, [r7, #4]
	uint8_t s = 0;									//a直線数カウント用変数
 80110f4:	2300      	movs	r3, #0
 80110f6:	707b      	strb	r3, [r7, #1]
	while(route[i-1] != 0xff){
 80110f8:	e324      	b.n	8011744 <pass_route3+0x688>
		s = 0;
 80110fa:	2300      	movs	r3, #0
 80110fc:	707b      	strb	r3, [r7, #1]
		if(route[i] == 0x77 && route[i+1] == 0x44 && route[i+2] == 0x77){
 80110fe:	4a8c      	ldr	r2, [pc, #560]	; (8011330 <pass_route3+0x274>)
 8011100:	687b      	ldr	r3, [r7, #4]
 8011102:	4413      	add	r3, r2
 8011104:	781b      	ldrb	r3, [r3, #0]
 8011106:	2b77      	cmp	r3, #119	; 0x77
 8011108:	d11b      	bne.n	8011142 <pass_route3+0x86>
 801110a:	687b      	ldr	r3, [r7, #4]
 801110c:	3301      	adds	r3, #1
 801110e:	4a88      	ldr	r2, [pc, #544]	; (8011330 <pass_route3+0x274>)
 8011110:	5cd3      	ldrb	r3, [r2, r3]
 8011112:	2b44      	cmp	r3, #68	; 0x44
 8011114:	d115      	bne.n	8011142 <pass_route3+0x86>
 8011116:	687b      	ldr	r3, [r7, #4]
 8011118:	3302      	adds	r3, #2
 801111a:	4a85      	ldr	r2, [pc, #532]	; (8011330 <pass_route3+0x274>)
 801111c:	5cd3      	ldrb	r3, [r2, r3]
 801111e:	2b77      	cmp	r3, #119	; 0x77
 8011120:	d10f      	bne.n	8011142 <pass_route3+0x86>
			s_flag = 0;
 8011122:	2300      	movs	r3, #0
 8011124:	70fb      	strb	r3, [r7, #3]
			pass[p] = -3;							//a大回り右90
 8011126:	78bb      	ldrb	r3, [r7, #2]
 8011128:	4a80      	ldr	r2, [pc, #512]	; (801132c <pass_route3+0x270>)
 801112a:	21fd      	movs	r1, #253	; 0xfd
 801112c:	54d1      	strb	r1, [r2, r3]
			if(i == 0){								//aスタート時の走行モード切り替えフラグ
 801112e:	687b      	ldr	r3, [r7, #4]
 8011130:	2b00      	cmp	r3, #0
 8011132:	d102      	bne.n	801113a <pass_route3+0x7e>
				start_mode = 2;
 8011134:	4b7f      	ldr	r3, [pc, #508]	; (8011334 <pass_route3+0x278>)
 8011136:	2202      	movs	r2, #2
 8011138:	701a      	strb	r2, [r3, #0]
			}
			i = i + 3;
 801113a:	687b      	ldr	r3, [r7, #4]
 801113c:	3303      	adds	r3, #3
 801113e:	607b      	str	r3, [r7, #4]
 8011140:	e2fd      	b.n	801173e <pass_route3+0x682>
		}else if(route[i] == 0x77 && route[i+1] == 0x11 && route[i+2] == 0x77){
 8011142:	4a7b      	ldr	r2, [pc, #492]	; (8011330 <pass_route3+0x274>)
 8011144:	687b      	ldr	r3, [r7, #4]
 8011146:	4413      	add	r3, r2
 8011148:	781b      	ldrb	r3, [r3, #0]
 801114a:	2b77      	cmp	r3, #119	; 0x77
 801114c:	d11b      	bne.n	8011186 <pass_route3+0xca>
 801114e:	687b      	ldr	r3, [r7, #4]
 8011150:	3301      	adds	r3, #1
 8011152:	4a77      	ldr	r2, [pc, #476]	; (8011330 <pass_route3+0x274>)
 8011154:	5cd3      	ldrb	r3, [r2, r3]
 8011156:	2b11      	cmp	r3, #17
 8011158:	d115      	bne.n	8011186 <pass_route3+0xca>
 801115a:	687b      	ldr	r3, [r7, #4]
 801115c:	3302      	adds	r3, #2
 801115e:	4a74      	ldr	r2, [pc, #464]	; (8011330 <pass_route3+0x274>)
 8011160:	5cd3      	ldrb	r3, [r2, r3]
 8011162:	2b77      	cmp	r3, #119	; 0x77
 8011164:	d10f      	bne.n	8011186 <pass_route3+0xca>
			s_flag = 0;
 8011166:	2300      	movs	r3, #0
 8011168:	70fb      	strb	r3, [r7, #3]
			pass[p] = -4;							//a大回り左90
 801116a:	78bb      	ldrb	r3, [r7, #2]
 801116c:	4a6f      	ldr	r2, [pc, #444]	; (801132c <pass_route3+0x270>)
 801116e:	21fc      	movs	r1, #252	; 0xfc
 8011170:	54d1      	strb	r1, [r2, r3]
			if(i == 0){								//aスタート時の走行モード切り替えフラグ
 8011172:	687b      	ldr	r3, [r7, #4]
 8011174:	2b00      	cmp	r3, #0
 8011176:	d102      	bne.n	801117e <pass_route3+0xc2>
				start_mode = 2;
 8011178:	4b6e      	ldr	r3, [pc, #440]	; (8011334 <pass_route3+0x278>)
 801117a:	2202      	movs	r2, #2
 801117c:	701a      	strb	r2, [r3, #0]
			}
			i = i + 3;
 801117e:	687b      	ldr	r3, [r7, #4]
 8011180:	3303      	adds	r3, #3
 8011182:	607b      	str	r3, [r7, #4]
 8011184:	e2db      	b.n	801173e <pass_route3+0x682>
		}else if(route[i] == 0x77 && route[i+1] == 0x44 && route[i+2] == 0x44 && route[i+3] == 0x77){
 8011186:	4a6a      	ldr	r2, [pc, #424]	; (8011330 <pass_route3+0x274>)
 8011188:	687b      	ldr	r3, [r7, #4]
 801118a:	4413      	add	r3, r2
 801118c:	781b      	ldrb	r3, [r3, #0]
 801118e:	2b77      	cmp	r3, #119	; 0x77
 8011190:	d11b      	bne.n	80111ca <pass_route3+0x10e>
 8011192:	687b      	ldr	r3, [r7, #4]
 8011194:	3301      	adds	r3, #1
 8011196:	4a66      	ldr	r2, [pc, #408]	; (8011330 <pass_route3+0x274>)
 8011198:	5cd3      	ldrb	r3, [r2, r3]
 801119a:	2b44      	cmp	r3, #68	; 0x44
 801119c:	d115      	bne.n	80111ca <pass_route3+0x10e>
 801119e:	687b      	ldr	r3, [r7, #4]
 80111a0:	3302      	adds	r3, #2
 80111a2:	4a63      	ldr	r2, [pc, #396]	; (8011330 <pass_route3+0x274>)
 80111a4:	5cd3      	ldrb	r3, [r2, r3]
 80111a6:	2b44      	cmp	r3, #68	; 0x44
 80111a8:	d10f      	bne.n	80111ca <pass_route3+0x10e>
 80111aa:	687b      	ldr	r3, [r7, #4]
 80111ac:	3303      	adds	r3, #3
 80111ae:	4a60      	ldr	r2, [pc, #384]	; (8011330 <pass_route3+0x274>)
 80111b0:	5cd3      	ldrb	r3, [r2, r3]
 80111b2:	2b77      	cmp	r3, #119	; 0x77
 80111b4:	d109      	bne.n	80111ca <pass_route3+0x10e>
			s_flag = 0;
 80111b6:	2300      	movs	r3, #0
 80111b8:	70fb      	strb	r3, [r7, #3]
			pass[p] = -5;							//a大回り右180
 80111ba:	78bb      	ldrb	r3, [r7, #2]
 80111bc:	4a5b      	ldr	r2, [pc, #364]	; (801132c <pass_route3+0x270>)
 80111be:	21fb      	movs	r1, #251	; 0xfb
 80111c0:	54d1      	strb	r1, [r2, r3]
			i = i + 4;
 80111c2:	687b      	ldr	r3, [r7, #4]
 80111c4:	3304      	adds	r3, #4
 80111c6:	607b      	str	r3, [r7, #4]
 80111c8:	e2b9      	b.n	801173e <pass_route3+0x682>
		}else if(route[i] == 0x77 && route[i+1] == 0x11 && route[i+2] == 0x11 && route[i+3] == 0x77){
 80111ca:	4a59      	ldr	r2, [pc, #356]	; (8011330 <pass_route3+0x274>)
 80111cc:	687b      	ldr	r3, [r7, #4]
 80111ce:	4413      	add	r3, r2
 80111d0:	781b      	ldrb	r3, [r3, #0]
 80111d2:	2b77      	cmp	r3, #119	; 0x77
 80111d4:	d11b      	bne.n	801120e <pass_route3+0x152>
 80111d6:	687b      	ldr	r3, [r7, #4]
 80111d8:	3301      	adds	r3, #1
 80111da:	4a55      	ldr	r2, [pc, #340]	; (8011330 <pass_route3+0x274>)
 80111dc:	5cd3      	ldrb	r3, [r2, r3]
 80111de:	2b11      	cmp	r3, #17
 80111e0:	d115      	bne.n	801120e <pass_route3+0x152>
 80111e2:	687b      	ldr	r3, [r7, #4]
 80111e4:	3302      	adds	r3, #2
 80111e6:	4a52      	ldr	r2, [pc, #328]	; (8011330 <pass_route3+0x274>)
 80111e8:	5cd3      	ldrb	r3, [r2, r3]
 80111ea:	2b11      	cmp	r3, #17
 80111ec:	d10f      	bne.n	801120e <pass_route3+0x152>
 80111ee:	687b      	ldr	r3, [r7, #4]
 80111f0:	3303      	adds	r3, #3
 80111f2:	4a4f      	ldr	r2, [pc, #316]	; (8011330 <pass_route3+0x274>)
 80111f4:	5cd3      	ldrb	r3, [r2, r3]
 80111f6:	2b77      	cmp	r3, #119	; 0x77
 80111f8:	d109      	bne.n	801120e <pass_route3+0x152>
			s_flag = 0;
 80111fa:	2300      	movs	r3, #0
 80111fc:	70fb      	strb	r3, [r7, #3]
			pass[p] = -6;							//a大回り左180
 80111fe:	78bb      	ldrb	r3, [r7, #2]
 8011200:	4a4a      	ldr	r2, [pc, #296]	; (801132c <pass_route3+0x270>)
 8011202:	21fa      	movs	r1, #250	; 0xfa
 8011204:	54d1      	strb	r1, [r2, r3]
			i = i + 4;
 8011206:	687b      	ldr	r3, [r7, #4]
 8011208:	3304      	adds	r3, #4
 801120a:	607b      	str	r3, [r7, #4]
 801120c:	e297      	b.n	801173e <pass_route3+0x682>
		}else if(route[i] == 0x77 && route[i+1] == 0x44 && route[i+2] == 0x11){
 801120e:	4a48      	ldr	r2, [pc, #288]	; (8011330 <pass_route3+0x274>)
 8011210:	687b      	ldr	r3, [r7, #4]
 8011212:	4413      	add	r3, r2
 8011214:	781b      	ldrb	r3, [r3, #0]
 8011216:	2b77      	cmp	r3, #119	; 0x77
 8011218:	d120      	bne.n	801125c <pass_route3+0x1a0>
 801121a:	687b      	ldr	r3, [r7, #4]
 801121c:	3301      	adds	r3, #1
 801121e:	4a44      	ldr	r2, [pc, #272]	; (8011330 <pass_route3+0x274>)
 8011220:	5cd3      	ldrb	r3, [r2, r3]
 8011222:	2b44      	cmp	r3, #68	; 0x44
 8011224:	d11a      	bne.n	801125c <pass_route3+0x1a0>
 8011226:	687b      	ldr	r3, [r7, #4]
 8011228:	3302      	adds	r3, #2
 801122a:	4a41      	ldr	r2, [pc, #260]	; (8011330 <pass_route3+0x274>)
 801122c:	5cd3      	ldrb	r3, [r2, r3]
 801122e:	2b11      	cmp	r3, #17
 8011230:	d114      	bne.n	801125c <pass_route3+0x1a0>
			s_flag = 0;
 8011232:	2300      	movs	r3, #0
 8011234:	70fb      	strb	r3, [r7, #3]
			pass[p] = -7;							//a斜め右V45in
 8011236:	78bb      	ldrb	r3, [r7, #2]
 8011238:	4a3c      	ldr	r2, [pc, #240]	; (801132c <pass_route3+0x270>)
 801123a:	21f9      	movs	r1, #249	; 0xf9
 801123c:	54d1      	strb	r1, [r2, r3]
			MF2.FLAG.V = 1;
 801123e:	4a3a      	ldr	r2, [pc, #232]	; (8011328 <pass_route3+0x26c>)
 8011240:	8813      	ldrh	r3, [r2, #0]
 8011242:	f043 0308 	orr.w	r3, r3, #8
 8011246:	8013      	strh	r3, [r2, #0]
			if(i == 0){								//aスタート時の走行モード切り替えフラグ
 8011248:	687b      	ldr	r3, [r7, #4]
 801124a:	2b00      	cmp	r3, #0
 801124c:	d102      	bne.n	8011254 <pass_route3+0x198>
				start_mode = 2;
 801124e:	4b39      	ldr	r3, [pc, #228]	; (8011334 <pass_route3+0x278>)
 8011250:	2202      	movs	r2, #2
 8011252:	701a      	strb	r2, [r3, #0]
			}
			i = i + 2;
 8011254:	687b      	ldr	r3, [r7, #4]
 8011256:	3302      	adds	r3, #2
 8011258:	607b      	str	r3, [r7, #4]
 801125a:	e270      	b.n	801173e <pass_route3+0x682>
		}else if(MF2.FLAG.V == 1 && route[i] == 0x44 && route[i+1] == 0x77){
 801125c:	4b32      	ldr	r3, [pc, #200]	; (8011328 <pass_route3+0x26c>)
 801125e:	881b      	ldrh	r3, [r3, #0]
 8011260:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8011264:	b2db      	uxtb	r3, r3
 8011266:	2b01      	cmp	r3, #1
 8011268:	d11a      	bne.n	80112a0 <pass_route3+0x1e4>
 801126a:	4a31      	ldr	r2, [pc, #196]	; (8011330 <pass_route3+0x274>)
 801126c:	687b      	ldr	r3, [r7, #4]
 801126e:	4413      	add	r3, r2
 8011270:	781b      	ldrb	r3, [r3, #0]
 8011272:	2b44      	cmp	r3, #68	; 0x44
 8011274:	d114      	bne.n	80112a0 <pass_route3+0x1e4>
 8011276:	687b      	ldr	r3, [r7, #4]
 8011278:	3301      	adds	r3, #1
 801127a:	4a2d      	ldr	r2, [pc, #180]	; (8011330 <pass_route3+0x274>)
 801127c:	5cd3      	ldrb	r3, [r2, r3]
 801127e:	2b77      	cmp	r3, #119	; 0x77
 8011280:	d10e      	bne.n	80112a0 <pass_route3+0x1e4>
			s_flag = 0;
 8011282:	2300      	movs	r3, #0
 8011284:	70fb      	strb	r3, [r7, #3]
			pass[p] = -7;							//a斜め右V45out
 8011286:	78bb      	ldrb	r3, [r7, #2]
 8011288:	4a28      	ldr	r2, [pc, #160]	; (801132c <pass_route3+0x270>)
 801128a:	21f9      	movs	r1, #249	; 0xf9
 801128c:	54d1      	strb	r1, [r2, r3]
			MF2.FLAG.V = 0;
 801128e:	4a26      	ldr	r2, [pc, #152]	; (8011328 <pass_route3+0x26c>)
 8011290:	8813      	ldrh	r3, [r2, #0]
 8011292:	f36f 03c3 	bfc	r3, #3, #1
 8011296:	8013      	strh	r3, [r2, #0]
			i = i + 2;
 8011298:	687b      	ldr	r3, [r7, #4]
 801129a:	3302      	adds	r3, #2
 801129c:	607b      	str	r3, [r7, #4]
 801129e:	e24e      	b.n	801173e <pass_route3+0x682>
		}else if(route[i] == 0x77 && route[i+1] == 0x11 && route[i+2] == 0x44){
 80112a0:	4a23      	ldr	r2, [pc, #140]	; (8011330 <pass_route3+0x274>)
 80112a2:	687b      	ldr	r3, [r7, #4]
 80112a4:	4413      	add	r3, r2
 80112a6:	781b      	ldrb	r3, [r3, #0]
 80112a8:	2b77      	cmp	r3, #119	; 0x77
 80112aa:	d11a      	bne.n	80112e2 <pass_route3+0x226>
 80112ac:	687b      	ldr	r3, [r7, #4]
 80112ae:	3301      	adds	r3, #1
 80112b0:	4a1f      	ldr	r2, [pc, #124]	; (8011330 <pass_route3+0x274>)
 80112b2:	5cd3      	ldrb	r3, [r2, r3]
 80112b4:	2b11      	cmp	r3, #17
 80112b6:	d114      	bne.n	80112e2 <pass_route3+0x226>
 80112b8:	687b      	ldr	r3, [r7, #4]
 80112ba:	3302      	adds	r3, #2
 80112bc:	4a1c      	ldr	r2, [pc, #112]	; (8011330 <pass_route3+0x274>)
 80112be:	5cd3      	ldrb	r3, [r2, r3]
 80112c0:	2b44      	cmp	r3, #68	; 0x44
 80112c2:	d10e      	bne.n	80112e2 <pass_route3+0x226>
			s_flag = 0;
 80112c4:	2300      	movs	r3, #0
 80112c6:	70fb      	strb	r3, [r7, #3]
			pass[p] = -8;							//a斜め左V45in
 80112c8:	78bb      	ldrb	r3, [r7, #2]
 80112ca:	4a18      	ldr	r2, [pc, #96]	; (801132c <pass_route3+0x270>)
 80112cc:	21f8      	movs	r1, #248	; 0xf8
 80112ce:	54d1      	strb	r1, [r2, r3]
			MF2.FLAG.V = 1;
 80112d0:	4a15      	ldr	r2, [pc, #84]	; (8011328 <pass_route3+0x26c>)
 80112d2:	8813      	ldrh	r3, [r2, #0]
 80112d4:	f043 0308 	orr.w	r3, r3, #8
 80112d8:	8013      	strh	r3, [r2, #0]
			i = i + 2;
 80112da:	687b      	ldr	r3, [r7, #4]
 80112dc:	3302      	adds	r3, #2
 80112de:	607b      	str	r3, [r7, #4]
 80112e0:	e22d      	b.n	801173e <pass_route3+0x682>
		}else if(MF2.FLAG.V == 1 && route[i] == 0x11 && route[i+1] == 0x77){
 80112e2:	4b11      	ldr	r3, [pc, #68]	; (8011328 <pass_route3+0x26c>)
 80112e4:	881b      	ldrh	r3, [r3, #0]
 80112e6:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80112ea:	b2db      	uxtb	r3, r3
 80112ec:	2b01      	cmp	r3, #1
 80112ee:	d123      	bne.n	8011338 <pass_route3+0x27c>
 80112f0:	4a0f      	ldr	r2, [pc, #60]	; (8011330 <pass_route3+0x274>)
 80112f2:	687b      	ldr	r3, [r7, #4]
 80112f4:	4413      	add	r3, r2
 80112f6:	781b      	ldrb	r3, [r3, #0]
 80112f8:	2b11      	cmp	r3, #17
 80112fa:	d11d      	bne.n	8011338 <pass_route3+0x27c>
 80112fc:	687b      	ldr	r3, [r7, #4]
 80112fe:	3301      	adds	r3, #1
 8011300:	4a0b      	ldr	r2, [pc, #44]	; (8011330 <pass_route3+0x274>)
 8011302:	5cd3      	ldrb	r3, [r2, r3]
 8011304:	2b77      	cmp	r3, #119	; 0x77
 8011306:	d117      	bne.n	8011338 <pass_route3+0x27c>
			s_flag = 0;
 8011308:	2300      	movs	r3, #0
 801130a:	70fb      	strb	r3, [r7, #3]
			pass[p] = -8;							//a斜め左V45out
 801130c:	78bb      	ldrb	r3, [r7, #2]
 801130e:	4a07      	ldr	r2, [pc, #28]	; (801132c <pass_route3+0x270>)
 8011310:	21f8      	movs	r1, #248	; 0xf8
 8011312:	54d1      	strb	r1, [r2, r3]
			MF2.FLAG.V = 0;
 8011314:	4a04      	ldr	r2, [pc, #16]	; (8011328 <pass_route3+0x26c>)
 8011316:	8813      	ldrh	r3, [r2, #0]
 8011318:	f36f 03c3 	bfc	r3, #3, #1
 801131c:	8013      	strh	r3, [r2, #0]
			i = i + 2;
 801131e:	687b      	ldr	r3, [r7, #4]
 8011320:	3302      	adds	r3, #2
 8011322:	607b      	str	r3, [r7, #4]
 8011324:	e20b      	b.n	801173e <pass_route3+0x682>
 8011326:	bf00      	nop
 8011328:	20000f64 	.word	0x20000f64
 801132c:	20000350 	.word	0x20000350
 8011330:	20000c54 	.word	0x20000c54
 8011334:	200015c8 	.word	0x200015c8
		}else if(MF2.FLAG.V == 1 && route[i] == 0x44 && route[i+1] == 0x44 && route[i+2] == 0x11){
 8011338:	4b99      	ldr	r3, [pc, #612]	; (80115a0 <pass_route3+0x4e4>)
 801133a:	881b      	ldrh	r3, [r3, #0]
 801133c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8011340:	b2db      	uxtb	r3, r3
 8011342:	2b01      	cmp	r3, #1
 8011344:	d120      	bne.n	8011388 <pass_route3+0x2cc>
 8011346:	4a97      	ldr	r2, [pc, #604]	; (80115a4 <pass_route3+0x4e8>)
 8011348:	687b      	ldr	r3, [r7, #4]
 801134a:	4413      	add	r3, r2
 801134c:	781b      	ldrb	r3, [r3, #0]
 801134e:	2b44      	cmp	r3, #68	; 0x44
 8011350:	d11a      	bne.n	8011388 <pass_route3+0x2cc>
 8011352:	687b      	ldr	r3, [r7, #4]
 8011354:	3301      	adds	r3, #1
 8011356:	4a93      	ldr	r2, [pc, #588]	; (80115a4 <pass_route3+0x4e8>)
 8011358:	5cd3      	ldrb	r3, [r2, r3]
 801135a:	2b44      	cmp	r3, #68	; 0x44
 801135c:	d114      	bne.n	8011388 <pass_route3+0x2cc>
 801135e:	687b      	ldr	r3, [r7, #4]
 8011360:	3302      	adds	r3, #2
 8011362:	4a90      	ldr	r2, [pc, #576]	; (80115a4 <pass_route3+0x4e8>)
 8011364:	5cd3      	ldrb	r3, [r2, r3]
 8011366:	2b11      	cmp	r3, #17
 8011368:	d10e      	bne.n	8011388 <pass_route3+0x2cc>
			s_flag = 0;
 801136a:	2300      	movs	r3, #0
 801136c:	70fb      	strb	r3, [r7, #3]
			pass[p] = -9;							//a斜め右V90
 801136e:	78bb      	ldrb	r3, [r7, #2]
 8011370:	4a8d      	ldr	r2, [pc, #564]	; (80115a8 <pass_route3+0x4ec>)
 8011372:	21f7      	movs	r1, #247	; 0xf7
 8011374:	54d1      	strb	r1, [r2, r3]
			MF2.FLAG.V = 1;
 8011376:	4a8a      	ldr	r2, [pc, #552]	; (80115a0 <pass_route3+0x4e4>)
 8011378:	8813      	ldrh	r3, [r2, #0]
 801137a:	f043 0308 	orr.w	r3, r3, #8
 801137e:	8013      	strh	r3, [r2, #0]
			i = i + 2;
 8011380:	687b      	ldr	r3, [r7, #4]
 8011382:	3302      	adds	r3, #2
 8011384:	607b      	str	r3, [r7, #4]
 8011386:	e1da      	b.n	801173e <pass_route3+0x682>
		}else if(MF2.FLAG.V == 1 && route[i] == 0x11 && route[i+1] == 0x11 && route[i+2] == 0x44){
 8011388:	4b85      	ldr	r3, [pc, #532]	; (80115a0 <pass_route3+0x4e4>)
 801138a:	881b      	ldrh	r3, [r3, #0]
 801138c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8011390:	b2db      	uxtb	r3, r3
 8011392:	2b01      	cmp	r3, #1
 8011394:	d120      	bne.n	80113d8 <pass_route3+0x31c>
 8011396:	4a83      	ldr	r2, [pc, #524]	; (80115a4 <pass_route3+0x4e8>)
 8011398:	687b      	ldr	r3, [r7, #4]
 801139a:	4413      	add	r3, r2
 801139c:	781b      	ldrb	r3, [r3, #0]
 801139e:	2b11      	cmp	r3, #17
 80113a0:	d11a      	bne.n	80113d8 <pass_route3+0x31c>
 80113a2:	687b      	ldr	r3, [r7, #4]
 80113a4:	3301      	adds	r3, #1
 80113a6:	4a7f      	ldr	r2, [pc, #508]	; (80115a4 <pass_route3+0x4e8>)
 80113a8:	5cd3      	ldrb	r3, [r2, r3]
 80113aa:	2b11      	cmp	r3, #17
 80113ac:	d114      	bne.n	80113d8 <pass_route3+0x31c>
 80113ae:	687b      	ldr	r3, [r7, #4]
 80113b0:	3302      	adds	r3, #2
 80113b2:	4a7c      	ldr	r2, [pc, #496]	; (80115a4 <pass_route3+0x4e8>)
 80113b4:	5cd3      	ldrb	r3, [r2, r3]
 80113b6:	2b44      	cmp	r3, #68	; 0x44
 80113b8:	d10e      	bne.n	80113d8 <pass_route3+0x31c>
			s_flag = 0;
 80113ba:	2300      	movs	r3, #0
 80113bc:	70fb      	strb	r3, [r7, #3]
			pass[p] = -10;							//a斜め左V90
 80113be:	78bb      	ldrb	r3, [r7, #2]
 80113c0:	4a79      	ldr	r2, [pc, #484]	; (80115a8 <pass_route3+0x4ec>)
 80113c2:	21f6      	movs	r1, #246	; 0xf6
 80113c4:	54d1      	strb	r1, [r2, r3]
			MF2.FLAG.V = 1;
 80113c6:	4a76      	ldr	r2, [pc, #472]	; (80115a0 <pass_route3+0x4e4>)
 80113c8:	8813      	ldrh	r3, [r2, #0]
 80113ca:	f043 0308 	orr.w	r3, r3, #8
 80113ce:	8013      	strh	r3, [r2, #0]
			i = i + 2;
 80113d0:	687b      	ldr	r3, [r7, #4]
 80113d2:	3302      	adds	r3, #2
 80113d4:	607b      	str	r3, [r7, #4]
 80113d6:	e1b2      	b.n	801173e <pass_route3+0x682>
		}else if(route[i] == 0x77 && route[i+1] == 0x44 && route[i+2] == 0x44 && route[i+3] == 0x11){
 80113d8:	4a72      	ldr	r2, [pc, #456]	; (80115a4 <pass_route3+0x4e8>)
 80113da:	687b      	ldr	r3, [r7, #4]
 80113dc:	4413      	add	r3, r2
 80113de:	781b      	ldrb	r3, [r3, #0]
 80113e0:	2b77      	cmp	r3, #119	; 0x77
 80113e2:	d126      	bne.n	8011432 <pass_route3+0x376>
 80113e4:	687b      	ldr	r3, [r7, #4]
 80113e6:	3301      	adds	r3, #1
 80113e8:	4a6e      	ldr	r2, [pc, #440]	; (80115a4 <pass_route3+0x4e8>)
 80113ea:	5cd3      	ldrb	r3, [r2, r3]
 80113ec:	2b44      	cmp	r3, #68	; 0x44
 80113ee:	d120      	bne.n	8011432 <pass_route3+0x376>
 80113f0:	687b      	ldr	r3, [r7, #4]
 80113f2:	3302      	adds	r3, #2
 80113f4:	4a6b      	ldr	r2, [pc, #428]	; (80115a4 <pass_route3+0x4e8>)
 80113f6:	5cd3      	ldrb	r3, [r2, r3]
 80113f8:	2b44      	cmp	r3, #68	; 0x44
 80113fa:	d11a      	bne.n	8011432 <pass_route3+0x376>
 80113fc:	687b      	ldr	r3, [r7, #4]
 80113fe:	3303      	adds	r3, #3
 8011400:	4a68      	ldr	r2, [pc, #416]	; (80115a4 <pass_route3+0x4e8>)
 8011402:	5cd3      	ldrb	r3, [r2, r3]
 8011404:	2b11      	cmp	r3, #17
 8011406:	d114      	bne.n	8011432 <pass_route3+0x376>
			s_flag = 0;
 8011408:	2300      	movs	r3, #0
 801140a:	70fb      	strb	r3, [r7, #3]
			pass[p] = -11;							//a斜め右V135in
 801140c:	78bb      	ldrb	r3, [r7, #2]
 801140e:	4a66      	ldr	r2, [pc, #408]	; (80115a8 <pass_route3+0x4ec>)
 8011410:	21f5      	movs	r1, #245	; 0xf5
 8011412:	54d1      	strb	r1, [r2, r3]
			MF2.FLAG.V = 1;
 8011414:	4a62      	ldr	r2, [pc, #392]	; (80115a0 <pass_route3+0x4e4>)
 8011416:	8813      	ldrh	r3, [r2, #0]
 8011418:	f043 0308 	orr.w	r3, r3, #8
 801141c:	8013      	strh	r3, [r2, #0]
			if(i == 0){								//aスタート時の走行モード切り替えフラグ
 801141e:	687b      	ldr	r3, [r7, #4]
 8011420:	2b00      	cmp	r3, #0
 8011422:	d102      	bne.n	801142a <pass_route3+0x36e>
				start_mode = 2;
 8011424:	4b61      	ldr	r3, [pc, #388]	; (80115ac <pass_route3+0x4f0>)
 8011426:	2202      	movs	r2, #2
 8011428:	701a      	strb	r2, [r3, #0]
			}
			i = i + 3;
 801142a:	687b      	ldr	r3, [r7, #4]
 801142c:	3303      	adds	r3, #3
 801142e:	607b      	str	r3, [r7, #4]
 8011430:	e185      	b.n	801173e <pass_route3+0x682>
		}else if(MF2.FLAG.V == 1 && route[i] == 0x44 && route[i+1] == 0x44 && route[i+2] == 0x77){
 8011432:	4b5b      	ldr	r3, [pc, #364]	; (80115a0 <pass_route3+0x4e4>)
 8011434:	881b      	ldrh	r3, [r3, #0]
 8011436:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 801143a:	b2db      	uxtb	r3, r3
 801143c:	2b01      	cmp	r3, #1
 801143e:	d120      	bne.n	8011482 <pass_route3+0x3c6>
 8011440:	4a58      	ldr	r2, [pc, #352]	; (80115a4 <pass_route3+0x4e8>)
 8011442:	687b      	ldr	r3, [r7, #4]
 8011444:	4413      	add	r3, r2
 8011446:	781b      	ldrb	r3, [r3, #0]
 8011448:	2b44      	cmp	r3, #68	; 0x44
 801144a:	d11a      	bne.n	8011482 <pass_route3+0x3c6>
 801144c:	687b      	ldr	r3, [r7, #4]
 801144e:	3301      	adds	r3, #1
 8011450:	4a54      	ldr	r2, [pc, #336]	; (80115a4 <pass_route3+0x4e8>)
 8011452:	5cd3      	ldrb	r3, [r2, r3]
 8011454:	2b44      	cmp	r3, #68	; 0x44
 8011456:	d114      	bne.n	8011482 <pass_route3+0x3c6>
 8011458:	687b      	ldr	r3, [r7, #4]
 801145a:	3302      	adds	r3, #2
 801145c:	4a51      	ldr	r2, [pc, #324]	; (80115a4 <pass_route3+0x4e8>)
 801145e:	5cd3      	ldrb	r3, [r2, r3]
 8011460:	2b77      	cmp	r3, #119	; 0x77
 8011462:	d10e      	bne.n	8011482 <pass_route3+0x3c6>
			s_flag = 0;
 8011464:	2300      	movs	r3, #0
 8011466:	70fb      	strb	r3, [r7, #3]
			pass[p] = -11;							//a斜め右V135out
 8011468:	78bb      	ldrb	r3, [r7, #2]
 801146a:	4a4f      	ldr	r2, [pc, #316]	; (80115a8 <pass_route3+0x4ec>)
 801146c:	21f5      	movs	r1, #245	; 0xf5
 801146e:	54d1      	strb	r1, [r2, r3]
			MF2.FLAG.V = 0;
 8011470:	4a4b      	ldr	r2, [pc, #300]	; (80115a0 <pass_route3+0x4e4>)
 8011472:	8813      	ldrh	r3, [r2, #0]
 8011474:	f36f 03c3 	bfc	r3, #3, #1
 8011478:	8013      	strh	r3, [r2, #0]
			i = i + 3;
 801147a:	687b      	ldr	r3, [r7, #4]
 801147c:	3303      	adds	r3, #3
 801147e:	607b      	str	r3, [r7, #4]
 8011480:	e15d      	b.n	801173e <pass_route3+0x682>
		}else if(route[i] == 0x77 && route[i+1] == 0x11 && route[i+2] == 0x11 && route[i+3] == 0x44){
 8011482:	4a48      	ldr	r2, [pc, #288]	; (80115a4 <pass_route3+0x4e8>)
 8011484:	687b      	ldr	r3, [r7, #4]
 8011486:	4413      	add	r3, r2
 8011488:	781b      	ldrb	r3, [r3, #0]
 801148a:	2b77      	cmp	r3, #119	; 0x77
 801148c:	d120      	bne.n	80114d0 <pass_route3+0x414>
 801148e:	687b      	ldr	r3, [r7, #4]
 8011490:	3301      	adds	r3, #1
 8011492:	4a44      	ldr	r2, [pc, #272]	; (80115a4 <pass_route3+0x4e8>)
 8011494:	5cd3      	ldrb	r3, [r2, r3]
 8011496:	2b11      	cmp	r3, #17
 8011498:	d11a      	bne.n	80114d0 <pass_route3+0x414>
 801149a:	687b      	ldr	r3, [r7, #4]
 801149c:	3302      	adds	r3, #2
 801149e:	4a41      	ldr	r2, [pc, #260]	; (80115a4 <pass_route3+0x4e8>)
 80114a0:	5cd3      	ldrb	r3, [r2, r3]
 80114a2:	2b11      	cmp	r3, #17
 80114a4:	d114      	bne.n	80114d0 <pass_route3+0x414>
 80114a6:	687b      	ldr	r3, [r7, #4]
 80114a8:	3303      	adds	r3, #3
 80114aa:	4a3e      	ldr	r2, [pc, #248]	; (80115a4 <pass_route3+0x4e8>)
 80114ac:	5cd3      	ldrb	r3, [r2, r3]
 80114ae:	2b44      	cmp	r3, #68	; 0x44
 80114b0:	d10e      	bne.n	80114d0 <pass_route3+0x414>
			s_flag = 0;
 80114b2:	2300      	movs	r3, #0
 80114b4:	70fb      	strb	r3, [r7, #3]
			pass[p] = -12;							//a斜め左V135in
 80114b6:	78bb      	ldrb	r3, [r7, #2]
 80114b8:	4a3b      	ldr	r2, [pc, #236]	; (80115a8 <pass_route3+0x4ec>)
 80114ba:	21f4      	movs	r1, #244	; 0xf4
 80114bc:	54d1      	strb	r1, [r2, r3]
			MF2.FLAG.V = 1;
 80114be:	4a38      	ldr	r2, [pc, #224]	; (80115a0 <pass_route3+0x4e4>)
 80114c0:	8813      	ldrh	r3, [r2, #0]
 80114c2:	f043 0308 	orr.w	r3, r3, #8
 80114c6:	8013      	strh	r3, [r2, #0]
			i = i + 3;
 80114c8:	687b      	ldr	r3, [r7, #4]
 80114ca:	3303      	adds	r3, #3
 80114cc:	607b      	str	r3, [r7, #4]
 80114ce:	e136      	b.n	801173e <pass_route3+0x682>
		}else if(MF2.FLAG.V == 1 && route[i] == 0x11 && route[i+1] == 0x11 && route[i+2] == 0x77){
 80114d0:	4b33      	ldr	r3, [pc, #204]	; (80115a0 <pass_route3+0x4e4>)
 80114d2:	881b      	ldrh	r3, [r3, #0]
 80114d4:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80114d8:	b2db      	uxtb	r3, r3
 80114da:	2b01      	cmp	r3, #1
 80114dc:	d120      	bne.n	8011520 <pass_route3+0x464>
 80114de:	4a31      	ldr	r2, [pc, #196]	; (80115a4 <pass_route3+0x4e8>)
 80114e0:	687b      	ldr	r3, [r7, #4]
 80114e2:	4413      	add	r3, r2
 80114e4:	781b      	ldrb	r3, [r3, #0]
 80114e6:	2b11      	cmp	r3, #17
 80114e8:	d11a      	bne.n	8011520 <pass_route3+0x464>
 80114ea:	687b      	ldr	r3, [r7, #4]
 80114ec:	3301      	adds	r3, #1
 80114ee:	4a2d      	ldr	r2, [pc, #180]	; (80115a4 <pass_route3+0x4e8>)
 80114f0:	5cd3      	ldrb	r3, [r2, r3]
 80114f2:	2b11      	cmp	r3, #17
 80114f4:	d114      	bne.n	8011520 <pass_route3+0x464>
 80114f6:	687b      	ldr	r3, [r7, #4]
 80114f8:	3302      	adds	r3, #2
 80114fa:	4a2a      	ldr	r2, [pc, #168]	; (80115a4 <pass_route3+0x4e8>)
 80114fc:	5cd3      	ldrb	r3, [r2, r3]
 80114fe:	2b77      	cmp	r3, #119	; 0x77
 8011500:	d10e      	bne.n	8011520 <pass_route3+0x464>
			s_flag = 0;
 8011502:	2300      	movs	r3, #0
 8011504:	70fb      	strb	r3, [r7, #3]
			pass[p] = -12;							//a斜め左V135out
 8011506:	78bb      	ldrb	r3, [r7, #2]
 8011508:	4a27      	ldr	r2, [pc, #156]	; (80115a8 <pass_route3+0x4ec>)
 801150a:	21f4      	movs	r1, #244	; 0xf4
 801150c:	54d1      	strb	r1, [r2, r3]
			MF2.FLAG.V = 0;
 801150e:	4a24      	ldr	r2, [pc, #144]	; (80115a0 <pass_route3+0x4e4>)
 8011510:	8813      	ldrh	r3, [r2, #0]
 8011512:	f36f 03c3 	bfc	r3, #3, #1
 8011516:	8013      	strh	r3, [r2, #0]
			i = i + 3;
 8011518:	687b      	ldr	r3, [r7, #4]
 801151a:	3303      	adds	r3, #3
 801151c:	607b      	str	r3, [r7, #4]
 801151e:	e10e      	b.n	801173e <pass_route3+0x682>
		}else if(route[i] == 0xff){
 8011520:	4a20      	ldr	r2, [pc, #128]	; (80115a4 <pass_route3+0x4e8>)
 8011522:	687b      	ldr	r3, [r7, #4]
 8011524:	4413      	add	r3, r2
 8011526:	781b      	ldrb	r3, [r3, #0]
 8011528:	2bff      	cmp	r3, #255	; 0xff
 801152a:	d16a      	bne.n	8011602 <pass_route3+0x546>
			if(MF2.FLAG.V == 1){
 801152c:	4b1c      	ldr	r3, [pc, #112]	; (80115a0 <pass_route3+0x4e4>)
 801152e:	881b      	ldrh	r3, [r3, #0]
 8011530:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8011534:	b2db      	uxtb	r3, r3
 8011536:	2b01      	cmp	r3, #1
 8011538:	d15b      	bne.n	80115f2 <pass_route3+0x536>
				if(pass[p-1] == -1 && pass[p-2] == -1){
 801153a:	78bb      	ldrb	r3, [r7, #2]
 801153c:	3b01      	subs	r3, #1
 801153e:	4a1a      	ldr	r2, [pc, #104]	; (80115a8 <pass_route3+0x4ec>)
 8011540:	56d3      	ldrsb	r3, [r2, r3]
 8011542:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011546:	d111      	bne.n	801156c <pass_route3+0x4b0>
 8011548:	78bb      	ldrb	r3, [r7, #2]
 801154a:	3b02      	subs	r3, #2
 801154c:	4a16      	ldr	r2, [pc, #88]	; (80115a8 <pass_route3+0x4ec>)
 801154e:	56d3      	ldrsb	r3, [r2, r3]
 8011550:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011554:	d10a      	bne.n	801156c <pass_route3+0x4b0>
					pass[p-2] = -15;
 8011556:	78bb      	ldrb	r3, [r7, #2]
 8011558:	3b02      	subs	r3, #2
 801155a:	4a13      	ldr	r2, [pc, #76]	; (80115a8 <pass_route3+0x4ec>)
 801155c:	21f1      	movs	r1, #241	; 0xf1
 801155e:	54d1      	strb	r1, [r2, r3]
					pass[p-1] = -114;
 8011560:	78bb      	ldrb	r3, [r7, #2]
 8011562:	3b01      	subs	r3, #1
 8011564:	4a10      	ldr	r2, [pc, #64]	; (80115a8 <pass_route3+0x4ec>)
 8011566:	218e      	movs	r1, #142	; 0x8e
 8011568:	54d1      	strb	r1, [r2, r3]
 801156a:	e042      	b.n	80115f2 <pass_route3+0x536>
				}else if(pass[p-1] == -2 && pass[p-2] == -2){
 801156c:	78bb      	ldrb	r3, [r7, #2]
 801156e:	3b01      	subs	r3, #1
 8011570:	4a0d      	ldr	r2, [pc, #52]	; (80115a8 <pass_route3+0x4ec>)
 8011572:	56d3      	ldrsb	r3, [r2, r3]
 8011574:	f113 0f02 	cmn.w	r3, #2
 8011578:	d11a      	bne.n	80115b0 <pass_route3+0x4f4>
 801157a:	78bb      	ldrb	r3, [r7, #2]
 801157c:	3b02      	subs	r3, #2
 801157e:	4a0a      	ldr	r2, [pc, #40]	; (80115a8 <pass_route3+0x4ec>)
 8011580:	56d3      	ldrsb	r3, [r2, r3]
 8011582:	f113 0f02 	cmn.w	r3, #2
 8011586:	d113      	bne.n	80115b0 <pass_route3+0x4f4>
					pass[p-2] = -16;
 8011588:	78bb      	ldrb	r3, [r7, #2]
 801158a:	3b02      	subs	r3, #2
 801158c:	4a06      	ldr	r2, [pc, #24]	; (80115a8 <pass_route3+0x4ec>)
 801158e:	21f0      	movs	r1, #240	; 0xf0
 8011590:	54d1      	strb	r1, [r2, r3]
					pass[p-1] = -114;
 8011592:	78bb      	ldrb	r3, [r7, #2]
 8011594:	3b01      	subs	r3, #1
 8011596:	4a04      	ldr	r2, [pc, #16]	; (80115a8 <pass_route3+0x4ec>)
 8011598:	218e      	movs	r1, #142	; 0x8e
 801159a:	54d1      	strb	r1, [r2, r3]
 801159c:	e029      	b.n	80115f2 <pass_route3+0x536>
 801159e:	bf00      	nop
 80115a0:	20000f64 	.word	0x20000f64
 80115a4:	20000c54 	.word	0x20000c54
 80115a8:	20000350 	.word	0x20000350
 80115ac:	200015c8 	.word	0x200015c8
				}else if(pass[p-1] == -1){
 80115b0:	78bb      	ldrb	r3, [r7, #2]
 80115b2:	3b01      	subs	r3, #1
 80115b4:	4a6a      	ldr	r2, [pc, #424]	; (8011760 <pass_route3+0x6a4>)
 80115b6:	56d3      	ldrsb	r3, [r2, r3]
 80115b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80115bc:	d109      	bne.n	80115d2 <pass_route3+0x516>
					pass[p-1] = -13;
 80115be:	78bb      	ldrb	r3, [r7, #2]
 80115c0:	3b01      	subs	r3, #1
 80115c2:	4a67      	ldr	r2, [pc, #412]	; (8011760 <pass_route3+0x6a4>)
 80115c4:	21f3      	movs	r1, #243	; 0xf3
 80115c6:	54d1      	strb	r1, [r2, r3]
					pass[p] = -114;
 80115c8:	78bb      	ldrb	r3, [r7, #2]
 80115ca:	4a65      	ldr	r2, [pc, #404]	; (8011760 <pass_route3+0x6a4>)
 80115cc:	218e      	movs	r1, #142	; 0x8e
 80115ce:	54d1      	strb	r1, [r2, r3]
 80115d0:	e00f      	b.n	80115f2 <pass_route3+0x536>
				}else if(pass[p-1] == -2){
 80115d2:	78bb      	ldrb	r3, [r7, #2]
 80115d4:	3b01      	subs	r3, #1
 80115d6:	4a62      	ldr	r2, [pc, #392]	; (8011760 <pass_route3+0x6a4>)
 80115d8:	56d3      	ldrsb	r3, [r2, r3]
 80115da:	f113 0f02 	cmn.w	r3, #2
 80115de:	d108      	bne.n	80115f2 <pass_route3+0x536>
					pass[p-1] = -14;
 80115e0:	78bb      	ldrb	r3, [r7, #2]
 80115e2:	3b01      	subs	r3, #1
 80115e4:	4a5e      	ldr	r2, [pc, #376]	; (8011760 <pass_route3+0x6a4>)
 80115e6:	21f2      	movs	r1, #242	; 0xf2
 80115e8:	54d1      	strb	r1, [r2, r3]
					pass[p] = -114;
 80115ea:	78bb      	ldrb	r3, [r7, #2]
 80115ec:	4a5c      	ldr	r2, [pc, #368]	; (8011760 <pass_route3+0x6a4>)
 80115ee:	218e      	movs	r1, #142	; 0x8e
 80115f0:	54d1      	strb	r1, [r2, r3]
				}
			}
			pass[p] = -114;							//a終了用配列
 80115f2:	78bb      	ldrb	r3, [r7, #2]
 80115f4:	4a5a      	ldr	r2, [pc, #360]	; (8011760 <pass_route3+0x6a4>)
 80115f6:	218e      	movs	r1, #142	; 0x8e
 80115f8:	54d1      	strb	r1, [r2, r3]
			i++;
 80115fa:	687b      	ldr	r3, [r7, #4]
 80115fc:	3301      	adds	r3, #1
 80115fe:	607b      	str	r3, [r7, #4]
 8011600:	e09d      	b.n	801173e <pass_route3+0x682>
		}else if(MF2.FLAG.V == 1 && route[i] == 0x44 && route[i+1] == 0x11){
 8011602:	4b58      	ldr	r3, [pc, #352]	; (8011764 <pass_route3+0x6a8>)
 8011604:	881b      	ldrh	r3, [r3, #0]
 8011606:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 801160a:	b2db      	uxtb	r3, r3
 801160c:	2b01      	cmp	r3, #1
 801160e:	d11a      	bne.n	8011646 <pass_route3+0x58a>
 8011610:	4a55      	ldr	r2, [pc, #340]	; (8011768 <pass_route3+0x6ac>)
 8011612:	687b      	ldr	r3, [r7, #4]
 8011614:	4413      	add	r3, r2
 8011616:	781b      	ldrb	r3, [r3, #0]
 8011618:	2b44      	cmp	r3, #68	; 0x44
 801161a:	d114      	bne.n	8011646 <pass_route3+0x58a>
 801161c:	687b      	ldr	r3, [r7, #4]
 801161e:	3301      	adds	r3, #1
 8011620:	4a51      	ldr	r2, [pc, #324]	; (8011768 <pass_route3+0x6ac>)
 8011622:	5cd3      	ldrb	r3, [r2, r3]
 8011624:	2b11      	cmp	r3, #17
 8011626:	d10e      	bne.n	8011646 <pass_route3+0x58a>
			s_flag = 0;
 8011628:	2300      	movs	r3, #0
 801162a:	70fb      	strb	r3, [r7, #3]
			pass[p] = 64;							//a斜め半直線
 801162c:	78bb      	ldrb	r3, [r7, #2]
 801162e:	4a4c      	ldr	r2, [pc, #304]	; (8011760 <pass_route3+0x6a4>)
 8011630:	2140      	movs	r1, #64	; 0x40
 8011632:	54d1      	strb	r1, [r2, r3]
			MF2.FLAG.V = 1;
 8011634:	4a4b      	ldr	r2, [pc, #300]	; (8011764 <pass_route3+0x6a8>)
 8011636:	8813      	ldrh	r3, [r2, #0]
 8011638:	f043 0308 	orr.w	r3, r3, #8
 801163c:	8013      	strh	r3, [r2, #0]
			i++;
 801163e:	687b      	ldr	r3, [r7, #4]
 8011640:	3301      	adds	r3, #1
 8011642:	607b      	str	r3, [r7, #4]
 8011644:	e07b      	b.n	801173e <pass_route3+0x682>
		}else if(MF2.FLAG.V == 1 && route[i] == 0x11 && route[i+1] == 0x44){
 8011646:	4b47      	ldr	r3, [pc, #284]	; (8011764 <pass_route3+0x6a8>)
 8011648:	881b      	ldrh	r3, [r3, #0]
 801164a:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 801164e:	b2db      	uxtb	r3, r3
 8011650:	2b01      	cmp	r3, #1
 8011652:	d11a      	bne.n	801168a <pass_route3+0x5ce>
 8011654:	4a44      	ldr	r2, [pc, #272]	; (8011768 <pass_route3+0x6ac>)
 8011656:	687b      	ldr	r3, [r7, #4]
 8011658:	4413      	add	r3, r2
 801165a:	781b      	ldrb	r3, [r3, #0]
 801165c:	2b11      	cmp	r3, #17
 801165e:	d114      	bne.n	801168a <pass_route3+0x5ce>
 8011660:	687b      	ldr	r3, [r7, #4]
 8011662:	3301      	adds	r3, #1
 8011664:	4a40      	ldr	r2, [pc, #256]	; (8011768 <pass_route3+0x6ac>)
 8011666:	5cd3      	ldrb	r3, [r2, r3]
 8011668:	2b44      	cmp	r3, #68	; 0x44
 801166a:	d10e      	bne.n	801168a <pass_route3+0x5ce>
			s_flag = 0;
 801166c:	2300      	movs	r3, #0
 801166e:	70fb      	strb	r3, [r7, #3]
			pass[p] = 64;							//a斜め半直線
 8011670:	78bb      	ldrb	r3, [r7, #2]
 8011672:	4a3b      	ldr	r2, [pc, #236]	; (8011760 <pass_route3+0x6a4>)
 8011674:	2140      	movs	r1, #64	; 0x40
 8011676:	54d1      	strb	r1, [r2, r3]
			MF2.FLAG.V = 1;
 8011678:	4a3a      	ldr	r2, [pc, #232]	; (8011764 <pass_route3+0x6a8>)
 801167a:	8813      	ldrh	r3, [r2, #0]
 801167c:	f043 0308 	orr.w	r3, r3, #8
 8011680:	8013      	strh	r3, [r2, #0]
			i++;
 8011682:	687b      	ldr	r3, [r7, #4]
 8011684:	3301      	adds	r3, #1
 8011686:	607b      	str	r3, [r7, #4]
 8011688:	e059      	b.n	801173e <pass_route3+0x682>
		}else if(route[i] == 0x44){
 801168a:	4a37      	ldr	r2, [pc, #220]	; (8011768 <pass_route3+0x6ac>)
 801168c:	687b      	ldr	r3, [r7, #4]
 801168e:	4413      	add	r3, r2
 8011690:	781b      	ldrb	r3, [r3, #0]
 8011692:	2b44      	cmp	r3, #68	; 0x44
 8011694:	d107      	bne.n	80116a6 <pass_route3+0x5ea>
			pass[p] = -1;							//a右スラローム
 8011696:	78bb      	ldrb	r3, [r7, #2]
 8011698:	4a31      	ldr	r2, [pc, #196]	; (8011760 <pass_route3+0x6a4>)
 801169a:	21ff      	movs	r1, #255	; 0xff
 801169c:	54d1      	strb	r1, [r2, r3]
			i++;
 801169e:	687b      	ldr	r3, [r7, #4]
 80116a0:	3301      	adds	r3, #1
 80116a2:	607b      	str	r3, [r7, #4]
 80116a4:	e04b      	b.n	801173e <pass_route3+0x682>
		}else if(route[i] == 0x11){
 80116a6:	4a30      	ldr	r2, [pc, #192]	; (8011768 <pass_route3+0x6ac>)
 80116a8:	687b      	ldr	r3, [r7, #4]
 80116aa:	4413      	add	r3, r2
 80116ac:	781b      	ldrb	r3, [r3, #0]
 80116ae:	2b11      	cmp	r3, #17
 80116b0:	d107      	bne.n	80116c2 <pass_route3+0x606>
			pass[p] = -2;							//a左スラローム
 80116b2:	78bb      	ldrb	r3, [r7, #2]
 80116b4:	4a2a      	ldr	r2, [pc, #168]	; (8011760 <pass_route3+0x6a4>)
 80116b6:	21fe      	movs	r1, #254	; 0xfe
 80116b8:	54d1      	strb	r1, [r2, r3]
			i++;
 80116ba:	687b      	ldr	r3, [r7, #4]
 80116bc:	3301      	adds	r3, #1
 80116be:	607b      	str	r3, [r7, #4]
 80116c0:	e03d      	b.n	801173e <pass_route3+0x682>
		}else if(route[i] == 0x77){
 80116c2:	4a29      	ldr	r2, [pc, #164]	; (8011768 <pass_route3+0x6ac>)
 80116c4:	687b      	ldr	r3, [r7, #4]
 80116c6:	4413      	add	r3, r2
 80116c8:	781b      	ldrb	r3, [r3, #0]
 80116ca:	2b77      	cmp	r3, #119	; 0x77
 80116cc:	d137      	bne.n	801173e <pass_route3+0x682>
			if(s_flag){
 80116ce:	78fb      	ldrb	r3, [r7, #3]
 80116d0:	2b00      	cmp	r3, #0
 80116d2:	d012      	beq.n	80116fa <pass_route3+0x63e>
				pass[p-1]++;						//aスラローム前半直線追加
 80116d4:	78bb      	ldrb	r3, [r7, #2]
 80116d6:	3b01      	subs	r3, #1
 80116d8:	4a21      	ldr	r2, [pc, #132]	; (8011760 <pass_route3+0x6a4>)
 80116da:	56d2      	ldrsb	r2, [r2, r3]
 80116dc:	b2d2      	uxtb	r2, r2
 80116de:	3201      	adds	r2, #1
 80116e0:	b2d2      	uxtb	r2, r2
 80116e2:	b251      	sxtb	r1, r2
 80116e4:	4a1e      	ldr	r2, [pc, #120]	; (8011760 <pass_route3+0x6a4>)
 80116e6:	54d1      	strb	r1, [r2, r3]
				p--;
 80116e8:	78bb      	ldrb	r3, [r7, #2]
 80116ea:	3b01      	subs	r3, #1
 80116ec:	70bb      	strb	r3, [r7, #2]
				s_flag = 0;
 80116ee:	2300      	movs	r3, #0
 80116f0:	70fb      	strb	r3, [r7, #3]
				i++;
 80116f2:	687b      	ldr	r3, [r7, #4]
 80116f4:	3301      	adds	r3, #1
 80116f6:	607b      	str	r3, [r7, #4]
 80116f8:	e021      	b.n	801173e <pass_route3+0x682>
			}else{
				s++;
 80116fa:	787b      	ldrb	r3, [r7, #1]
 80116fc:	3301      	adds	r3, #1
 80116fe:	707b      	strb	r3, [r7, #1]
				pass[p] = s;						//aもし半直線1つだけの場合whileには入らない
 8011700:	78bb      	ldrb	r3, [r7, #2]
 8011702:	f997 1001 	ldrsb.w	r1, [r7, #1]
 8011706:	4a16      	ldr	r2, [pc, #88]	; (8011760 <pass_route3+0x6a4>)
 8011708:	54d1      	strb	r1, [r2, r3]
				while(route[i+1] == 0x77){
 801170a:	e00c      	b.n	8011726 <pass_route3+0x66a>
					s_flag = 1;
 801170c:	2301      	movs	r3, #1
 801170e:	70fb      	strb	r3, [r7, #3]
					pass[p] = s;					//a半直線2つ以上続く場合、最後半直線は大回り用に残す
 8011710:	78bb      	ldrb	r3, [r7, #2]
 8011712:	f997 1001 	ldrsb.w	r1, [r7, #1]
 8011716:	4a12      	ldr	r2, [pc, #72]	; (8011760 <pass_route3+0x6a4>)
 8011718:	54d1      	strb	r1, [r2, r3]
					i++;
 801171a:	687b      	ldr	r3, [r7, #4]
 801171c:	3301      	adds	r3, #1
 801171e:	607b      	str	r3, [r7, #4]
					s++;
 8011720:	787b      	ldrb	r3, [r7, #1]
 8011722:	3301      	adds	r3, #1
 8011724:	707b      	strb	r3, [r7, #1]
				while(route[i+1] == 0x77){
 8011726:	687b      	ldr	r3, [r7, #4]
 8011728:	3301      	adds	r3, #1
 801172a:	4a0f      	ldr	r2, [pc, #60]	; (8011768 <pass_route3+0x6ac>)
 801172c:	5cd3      	ldrb	r3, [r2, r3]
 801172e:	2b77      	cmp	r3, #119	; 0x77
 8011730:	d0ec      	beq.n	801170c <pass_route3+0x650>
				}
				if(!s_flag){
 8011732:	78fb      	ldrb	r3, [r7, #3]
 8011734:	2b00      	cmp	r3, #0
 8011736:	d102      	bne.n	801173e <pass_route3+0x682>
					i++;
 8011738:	687b      	ldr	r3, [r7, #4]
 801173a:	3301      	adds	r3, #1
 801173c:	607b      	str	r3, [r7, #4]
				}
			}
		}
		p++;
 801173e:	78bb      	ldrb	r3, [r7, #2]
 8011740:	3301      	adds	r3, #1
 8011742:	70bb      	strb	r3, [r7, #2]
	while(route[i-1] != 0xff){
 8011744:	687b      	ldr	r3, [r7, #4]
 8011746:	3b01      	subs	r3, #1
 8011748:	4a07      	ldr	r2, [pc, #28]	; (8011768 <pass_route3+0x6ac>)
 801174a:	5cd3      	ldrb	r3, [r2, r3]
 801174c:	2bff      	cmp	r3, #255	; 0xff
 801174e:	f47f acd4 	bne.w	80110fa <pass_route3+0x3e>
	}
}
 8011752:	bf00      	nop
 8011754:	370c      	adds	r7, #12
 8011756:	46bd      	mov	sp, r7
 8011758:	f85d 7b04 	ldr.w	r7, [sp], #4
 801175c:	4770      	bx	lr
 801175e:	bf00      	nop
 8011760:	20000350 	.word	0x20000350
 8011764:	20000f64 	.word	0x20000f64
 8011768:	20000c54 	.word	0x20000c54

0801176c <store_map_in_eeprom>:
//store_map_in_eeprom
// mapデータをeepromに格納する
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void store_map_in_eeprom(void){
 801176c:	b580      	push	{r7, lr}
 801176e:	b082      	sub	sp, #8
 8011770:	af00      	add	r7, sp, #0
	printf("eprom func start \n");
 8011772:	4818      	ldr	r0, [pc, #96]	; (80117d4 <store_map_in_eeprom+0x68>)
 8011774:	f000 ff28 	bl	80125c8 <puts>
	eeprom_enable_write();
 8011778:	f7fa fd0c 	bl	800c194 <eeprom_enable_write>
	printf("eprom enable_write fin \n");
 801177c:	4816      	ldr	r0, [pc, #88]	; (80117d8 <store_map_in_eeprom+0x6c>)
 801177e:	f000 ff23 	bl	80125c8 <puts>
	int i;
	for(i = 0; i < 16; i++){
 8011782:	2300      	movs	r3, #0
 8011784:	607b      	str	r3, [r7, #4]
 8011786:	e01b      	b.n	80117c0 <store_map_in_eeprom+0x54>
		int j;
		for(j = 0; j < 16; j++){
 8011788:	2300      	movs	r3, #0
 801178a:	603b      	str	r3, [r7, #0]
 801178c:	e012      	b.n	80117b4 <store_map_in_eeprom+0x48>
			eeprom_write_halfword(i*16 + j, (uint16_t) map[i][j]);
 801178e:	687b      	ldr	r3, [r7, #4]
 8011790:	011a      	lsls	r2, r3, #4
 8011792:	683b      	ldr	r3, [r7, #0]
 8011794:	4413      	add	r3, r2
 8011796:	4618      	mov	r0, r3
 8011798:	4a10      	ldr	r2, [pc, #64]	; (80117dc <store_map_in_eeprom+0x70>)
 801179a:	687b      	ldr	r3, [r7, #4]
 801179c:	011b      	lsls	r3, r3, #4
 801179e:	441a      	add	r2, r3
 80117a0:	683b      	ldr	r3, [r7, #0]
 80117a2:	4413      	add	r3, r2
 80117a4:	781b      	ldrb	r3, [r3, #0]
 80117a6:	b29b      	uxth	r3, r3
 80117a8:	4619      	mov	r1, r3
 80117aa:	f7fa fd1e 	bl	800c1ea <eeprom_write_halfword>
		for(j = 0; j < 16; j++){
 80117ae:	683b      	ldr	r3, [r7, #0]
 80117b0:	3301      	adds	r3, #1
 80117b2:	603b      	str	r3, [r7, #0]
 80117b4:	683b      	ldr	r3, [r7, #0]
 80117b6:	2b0f      	cmp	r3, #15
 80117b8:	dde9      	ble.n	801178e <store_map_in_eeprom+0x22>
	for(i = 0; i < 16; i++){
 80117ba:	687b      	ldr	r3, [r7, #4]
 80117bc:	3301      	adds	r3, #1
 80117be:	607b      	str	r3, [r7, #4]
 80117c0:	687b      	ldr	r3, [r7, #4]
 80117c2:	2b0f      	cmp	r3, #15
 80117c4:	dde0      	ble.n	8011788 <store_map_in_eeprom+0x1c>
		}
	}
	eeprom_disable_write();
 80117c6:	f7fa fd09 	bl	800c1dc <eeprom_disable_write>
}
 80117ca:	bf00      	nop
 80117cc:	3708      	adds	r7, #8
 80117ce:	46bd      	mov	sp, r7
 80117d0:	bd80      	pop	{r7, pc}
 80117d2:	bf00      	nop
 80117d4:	08013b68 	.word	0x08013b68
 80117d8:	08013b7c 	.word	0x08013b7c
 80117dc:	200001ac 	.word	0x200001ac

080117e0 <load_map_from_eeprom>:
//load_map_in_eeprom
// mapデータをeepromから取得する
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void load_map_from_eeprom(void){
 80117e0:	b580      	push	{r7, lr}
 80117e2:	b082      	sub	sp, #8
 80117e4:	af00      	add	r7, sp, #0
	int i;
	for(i = 0; i < 16; i++){
 80117e6:	2300      	movs	r3, #0
 80117e8:	607b      	str	r3, [r7, #4]
 80117ea:	e01c      	b.n	8011826 <load_map_from_eeprom+0x46>
		int j;
		for(j = 0; j < 16; j++){
 80117ec:	2300      	movs	r3, #0
 80117ee:	603b      	str	r3, [r7, #0]
 80117f0:	e013      	b.n	801181a <load_map_from_eeprom+0x3a>
			map[i][j] = (uint8_t) eeprom_read_halfword(i*16 + j);
 80117f2:	687b      	ldr	r3, [r7, #4]
 80117f4:	011a      	lsls	r2, r3, #4
 80117f6:	683b      	ldr	r3, [r7, #0]
 80117f8:	4413      	add	r3, r2
 80117fa:	4618      	mov	r0, r3
 80117fc:	f7fa fd12 	bl	800c224 <eeprom_read_halfword>
 8011800:	4603      	mov	r3, r0
 8011802:	b2d9      	uxtb	r1, r3
 8011804:	4a0b      	ldr	r2, [pc, #44]	; (8011834 <load_map_from_eeprom+0x54>)
 8011806:	687b      	ldr	r3, [r7, #4]
 8011808:	011b      	lsls	r3, r3, #4
 801180a:	441a      	add	r2, r3
 801180c:	683b      	ldr	r3, [r7, #0]
 801180e:	4413      	add	r3, r2
 8011810:	460a      	mov	r2, r1
 8011812:	701a      	strb	r2, [r3, #0]
		for(j = 0; j < 16; j++){
 8011814:	683b      	ldr	r3, [r7, #0]
 8011816:	3301      	adds	r3, #1
 8011818:	603b      	str	r3, [r7, #0]
 801181a:	683b      	ldr	r3, [r7, #0]
 801181c:	2b0f      	cmp	r3, #15
 801181e:	dde8      	ble.n	80117f2 <load_map_from_eeprom+0x12>
	for(i = 0; i < 16; i++){
 8011820:	687b      	ldr	r3, [r7, #4]
 8011822:	3301      	adds	r3, #1
 8011824:	607b      	str	r3, [r7, #4]
 8011826:	687b      	ldr	r3, [r7, #4]
 8011828:	2b0f      	cmp	r3, #15
 801182a:	dddf      	ble.n	80117ec <load_map_from_eeprom+0xc>
		}
	}
}
 801182c:	bf00      	nop
 801182e:	3708      	adds	r7, #8
 8011830:	46bd      	mov	sp, r7
 8011832:	bd80      	pop	{r7, pc}
 8011834:	200001ac 	.word	0x200001ac

08011838 <sensor_init>:

#include "global.h"


void sensor_init(void){
 8011838:	b480      	push	{r7}
 801183a:	af00      	add	r7, sp, #0
	tp = 0;
 801183c:	4b0e      	ldr	r3, [pc, #56]	; (8011878 <sensor_init+0x40>)
 801183e:	2200      	movs	r2, #0
 8011840:	701a      	strb	r2, [r3, #0]
	ad_l = ad_r = ad_fr = ad_fl = 0;
 8011842:	4b0e      	ldr	r3, [pc, #56]	; (801187c <sensor_init+0x44>)
 8011844:	2200      	movs	r2, #0
 8011846:	601a      	str	r2, [r3, #0]
 8011848:	4b0c      	ldr	r3, [pc, #48]	; (801187c <sensor_init+0x44>)
 801184a:	681b      	ldr	r3, [r3, #0]
 801184c:	4a0c      	ldr	r2, [pc, #48]	; (8011880 <sensor_init+0x48>)
 801184e:	6013      	str	r3, [r2, #0]
 8011850:	4b0b      	ldr	r3, [pc, #44]	; (8011880 <sensor_init+0x48>)
 8011852:	681b      	ldr	r3, [r3, #0]
 8011854:	4a0b      	ldr	r2, [pc, #44]	; (8011884 <sensor_init+0x4c>)
 8011856:	6013      	str	r3, [r2, #0]
 8011858:	4b0a      	ldr	r3, [pc, #40]	; (8011884 <sensor_init+0x4c>)
 801185a:	681b      	ldr	r3, [r3, #0]
 801185c:	4a0a      	ldr	r2, [pc, #40]	; (8011888 <sensor_init+0x50>)
 801185e:	6013      	str	r3, [r2, #0]
	base_l = base_r = 0;
 8011860:	4b0a      	ldr	r3, [pc, #40]	; (801188c <sensor_init+0x54>)
 8011862:	2200      	movs	r2, #0
 8011864:	801a      	strh	r2, [r3, #0]
 8011866:	4b09      	ldr	r3, [pc, #36]	; (801188c <sensor_init+0x54>)
 8011868:	881a      	ldrh	r2, [r3, #0]
 801186a:	4b09      	ldr	r3, [pc, #36]	; (8011890 <sensor_init+0x58>)
 801186c:	801a      	strh	r2, [r3, #0]
}
 801186e:	bf00      	nop
 8011870:	46bd      	mov	sp, r7
 8011872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011876:	4770      	bx	lr
 8011878:	200012a0 	.word	0x200012a0
 801187c:	20000d54 	.word	0x20000d54
 8011880:	20000c00 	.word	0x20000c00
 8011884:	20000f60 	.word	0x20000f60
 8011888:	20000afc 	.word	0x20000afc
 801188c:	200002c0 	.word	0x200002c0
 8011890:	2000034c 	.word	0x2000034c

08011894 <get_base>:


uint8_t get_base(){
 8011894:	b480      	push	{r7}
 8011896:	b083      	sub	sp, #12
 8011898:	af00      	add	r7, sp, #0
	uint8_t res = 1;									//for return
 801189a:	2301      	movs	r3, #1
 801189c:	71fb      	strb	r3, [r7, #7]

	base_l = ad_l;										//sensor value base L
 801189e:	4b08      	ldr	r3, [pc, #32]	; (80118c0 <get_base+0x2c>)
 80118a0:	681b      	ldr	r3, [r3, #0]
 80118a2:	b29a      	uxth	r2, r3
 80118a4:	4b07      	ldr	r3, [pc, #28]	; (80118c4 <get_base+0x30>)
 80118a6:	801a      	strh	r2, [r3, #0]
	base_r = ad_r;										//sensor value base R
 80118a8:	4b07      	ldr	r3, [pc, #28]	; (80118c8 <get_base+0x34>)
 80118aa:	681b      	ldr	r3, [r3, #0]
 80118ac:	b29a      	uxth	r2, r3
 80118ae:	4b07      	ldr	r3, [pc, #28]	; (80118cc <get_base+0x38>)
 80118b0:	801a      	strh	r2, [r3, #0]

	return res;											//
 80118b2:	79fb      	ldrb	r3, [r7, #7]
}
 80118b4:	4618      	mov	r0, r3
 80118b6:	370c      	adds	r7, #12
 80118b8:	46bd      	mov	sp, r7
 80118ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118be:	4770      	bx	lr
 80118c0:	20000afc 	.word	0x20000afc
 80118c4:	2000034c 	.word	0x2000034c
 80118c8:	20000f60 	.word	0x20000f60
 80118cc:	200002c0 	.word	0x200002c0

080118d0 <get_wall_info>:


void get_wall_info(){
 80118d0:	b480      	push	{r7}
 80118d2:	af00      	add	r7, sp, #0

	//----reset----
	wall_info = 0x00;									//wall
 80118d4:	4b16      	ldr	r3, [pc, #88]	; (8011930 <get_wall_info+0x60>)
 80118d6:	2200      	movs	r2, #0
 80118d8:	701a      	strb	r2, [r3, #0]
	//----look forward----
	if(ad_fr > WALL_BASE_FR || ad_fl > WALL_BASE_FL){
 80118da:	4b16      	ldr	r3, [pc, #88]	; (8011934 <get_wall_info+0x64>)
 80118dc:	681b      	ldr	r3, [r3, #0]
 80118de:	2b78      	cmp	r3, #120	; 0x78
 80118e0:	d803      	bhi.n	80118ea <get_wall_info+0x1a>
 80118e2:	4b15      	ldr	r3, [pc, #84]	; (8011938 <get_wall_info+0x68>)
 80118e4:	681b      	ldr	r3, [r3, #0]
 80118e6:	2bc8      	cmp	r3, #200	; 0xc8
 80118e8:	d906      	bls.n	80118f8 <get_wall_info+0x28>
		wall_info |= 0x88;								//forward check
 80118ea:	4b11      	ldr	r3, [pc, #68]	; (8011930 <get_wall_info+0x60>)
 80118ec:	781b      	ldrb	r3, [r3, #0]
 80118ee:	f063 0377 	orn	r3, r3, #119	; 0x77
 80118f2:	b2da      	uxtb	r2, r3
 80118f4:	4b0e      	ldr	r3, [pc, #56]	; (8011930 <get_wall_info+0x60>)
 80118f6:	701a      	strb	r2, [r3, #0]
	}
	//----look right----
	if(ad_r > WALL_BASE_R){
 80118f8:	4b10      	ldr	r3, [pc, #64]	; (801193c <get_wall_info+0x6c>)
 80118fa:	681b      	ldr	r3, [r3, #0]
 80118fc:	2b78      	cmp	r3, #120	; 0x78
 80118fe:	d906      	bls.n	801190e <get_wall_info+0x3e>
		wall_info |= 0x44;								//right check
 8011900:	4b0b      	ldr	r3, [pc, #44]	; (8011930 <get_wall_info+0x60>)
 8011902:	781b      	ldrb	r3, [r3, #0]
 8011904:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8011908:	b2da      	uxtb	r2, r3
 801190a:	4b09      	ldr	r3, [pc, #36]	; (8011930 <get_wall_info+0x60>)
 801190c:	701a      	strb	r2, [r3, #0]
	}
	//----look left----
	if(ad_l > WALL_BASE_L){
 801190e:	4b0c      	ldr	r3, [pc, #48]	; (8011940 <get_wall_info+0x70>)
 8011910:	681b      	ldr	r3, [r3, #0]
 8011912:	2b8c      	cmp	r3, #140	; 0x8c
 8011914:	d906      	bls.n	8011924 <get_wall_info+0x54>
		wall_info |= 0x11;								//light check
 8011916:	4b06      	ldr	r3, [pc, #24]	; (8011930 <get_wall_info+0x60>)
 8011918:	781b      	ldrb	r3, [r3, #0]
 801191a:	f043 0311 	orr.w	r3, r3, #17
 801191e:	b2da      	uxtb	r2, r3
 8011920:	4b03      	ldr	r3, [pc, #12]	; (8011930 <get_wall_info+0x60>)
 8011922:	701a      	strb	r2, [r3, #0]
	}
}
 8011924:	bf00      	nop
 8011926:	46bd      	mov	sp, r7
 8011928:	f85d 7b04 	ldr.w	r7, [sp], #4
 801192c:	4770      	bx	lr
 801192e:	bf00      	nop
 8011930:	200002c8 	.word	0x200002c8
 8011934:	20000c00 	.word	0x20000c00
 8011938:	20000d54 	.word	0x20000d54
 801193c:	20000f60 	.word	0x20000f60
 8011940:	20000afc 	.word	0x20000afc

08011944 <led_write>:
//led_write
//aモード選択用LEDのON-OFF
//a引数：led1(0=>OFF, 1=>ON), led2(0=>OFF, 1=>ON), led3(0=>OFF, 1=>ON)
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void led_write(uint8_t led1, uint8_t led2, uint8_t led3){
 8011944:	b580      	push	{r7, lr}
 8011946:	b082      	sub	sp, #8
 8011948:	af00      	add	r7, sp, #0
 801194a:	4603      	mov	r3, r0
 801194c:	71fb      	strb	r3, [r7, #7]
 801194e:	460b      	mov	r3, r1
 8011950:	71bb      	strb	r3, [r7, #6]
 8011952:	4613      	mov	r3, r2
 8011954:	717b      	strb	r3, [r7, #5]
	if(led1) HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8011956:	79fb      	ldrb	r3, [r7, #7]
 8011958:	2b00      	cmp	r3, #0
 801195a:	d005      	beq.n	8011968 <led_write+0x24>
 801195c:	2201      	movs	r2, #1
 801195e:	2110      	movs	r1, #16
 8011960:	4814      	ldr	r0, [pc, #80]	; (80119b4 <led_write+0x70>)
 8011962:	f7f0 fccf 	bl	8002304 <HAL_GPIO_WritePin>
 8011966:	e004      	b.n	8011972 <led_write+0x2e>
	else HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8011968:	2200      	movs	r2, #0
 801196a:	2110      	movs	r1, #16
 801196c:	4811      	ldr	r0, [pc, #68]	; (80119b4 <led_write+0x70>)
 801196e:	f7f0 fcc9 	bl	8002304 <HAL_GPIO_WritePin>

	if(led2) HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 8011972:	79bb      	ldrb	r3, [r7, #6]
 8011974:	2b00      	cmp	r3, #0
 8011976:	d005      	beq.n	8011984 <led_write+0x40>
 8011978:	2201      	movs	r2, #1
 801197a:	2140      	movs	r1, #64	; 0x40
 801197c:	480d      	ldr	r0, [pc, #52]	; (80119b4 <led_write+0x70>)
 801197e:	f7f0 fcc1 	bl	8002304 <HAL_GPIO_WritePin>
 8011982:	e004      	b.n	801198e <led_write+0x4a>
	else HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 8011984:	2200      	movs	r2, #0
 8011986:	2140      	movs	r1, #64	; 0x40
 8011988:	480a      	ldr	r0, [pc, #40]	; (80119b4 <led_write+0x70>)
 801198a:	f7f0 fcbb 	bl	8002304 <HAL_GPIO_WritePin>

	if(led3) HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);
 801198e:	797b      	ldrb	r3, [r7, #5]
 8011990:	2b00      	cmp	r3, #0
 8011992:	d005      	beq.n	80119a0 <led_write+0x5c>
 8011994:	2201      	movs	r2, #1
 8011996:	2180      	movs	r1, #128	; 0x80
 8011998:	4806      	ldr	r0, [pc, #24]	; (80119b4 <led_write+0x70>)
 801199a:	f7f0 fcb3 	bl	8002304 <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
}
 801199e:	e004      	b.n	80119aa <led_write+0x66>
	else HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 80119a0:	2200      	movs	r2, #0
 80119a2:	2180      	movs	r1, #128	; 0x80
 80119a4:	4803      	ldr	r0, [pc, #12]	; (80119b4 <led_write+0x70>)
 80119a6:	f7f0 fcad 	bl	8002304 <HAL_GPIO_WritePin>
}
 80119aa:	bf00      	nop
 80119ac:	3708      	adds	r7, #8
 80119ae:	46bd      	mov	sp, r7
 80119b0:	bd80      	pop	{r7, pc}
 80119b2:	bf00      	nop
 80119b4:	40020000 	.word	0x40020000

080119b8 <full_led_write>:
//full_led_write
//aフルカラーLEDの色選択
//a引数：fulled(0=>OFF, 1=>a赤, 2=>緑, 3=>青, 4=>青緑, 5=>紫, 6=>黄, 7=>白)
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void full_led_write(uint8_t fulled){
 80119b8:	b580      	push	{r7, lr}
 80119ba:	b082      	sub	sp, #8
 80119bc:	af00      	add	r7, sp, #0
 80119be:	4603      	mov	r3, r0
 80119c0:	71fb      	strb	r3, [r7, #7]
	if(fulled == 0){
 80119c2:	79fb      	ldrb	r3, [r7, #7]
 80119c4:	2b00      	cmp	r3, #0
 80119c6:	d112      	bne.n	80119ee <full_led_write+0x36>
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
 80119c8:	2201      	movs	r2, #1
 80119ca:	f44f 7180 	mov.w	r1, #256	; 0x100
 80119ce:	4856      	ldr	r0, [pc, #344]	; (8011b28 <full_led_write+0x170>)
 80119d0:	f7f0 fc98 	bl	8002304 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 80119d4:	2201      	movs	r2, #1
 80119d6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80119da:	4853      	ldr	r0, [pc, #332]	; (8011b28 <full_led_write+0x170>)
 80119dc:	f7f0 fc92 	bl	8002304 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 80119e0:	2201      	movs	r2, #1
 80119e2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80119e6:	4851      	ldr	r0, [pc, #324]	; (8011b2c <full_led_write+0x174>)
 80119e8:	f7f0 fc8c 	bl	8002304 <HAL_GPIO_WritePin>
	else if(fulled == 7){
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
	    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
	}
}
 80119ec:	e098      	b.n	8011b20 <full_led_write+0x168>
	else if(fulled == 1){
 80119ee:	79fb      	ldrb	r3, [r7, #7]
 80119f0:	2b01      	cmp	r3, #1
 80119f2:	d112      	bne.n	8011a1a <full_led_write+0x62>
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
 80119f4:	2201      	movs	r2, #1
 80119f6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80119fa:	484b      	ldr	r0, [pc, #300]	; (8011b28 <full_led_write+0x170>)
 80119fc:	f7f0 fc82 	bl	8002304 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 8011a00:	2201      	movs	r2, #1
 8011a02:	f44f 7100 	mov.w	r1, #512	; 0x200
 8011a06:	4848      	ldr	r0, [pc, #288]	; (8011b28 <full_led_write+0x170>)
 8011a08:	f7f0 fc7c 	bl	8002304 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8011a0c:	2200      	movs	r2, #0
 8011a0e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8011a12:	4846      	ldr	r0, [pc, #280]	; (8011b2c <full_led_write+0x174>)
 8011a14:	f7f0 fc76 	bl	8002304 <HAL_GPIO_WritePin>
}
 8011a18:	e082      	b.n	8011b20 <full_led_write+0x168>
	else if(fulled == 2){
 8011a1a:	79fb      	ldrb	r3, [r7, #7]
 8011a1c:	2b02      	cmp	r3, #2
 8011a1e:	d112      	bne.n	8011a46 <full_led_write+0x8e>
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
 8011a20:	2201      	movs	r2, #1
 8011a22:	f44f 7180 	mov.w	r1, #256	; 0x100
 8011a26:	4840      	ldr	r0, [pc, #256]	; (8011b28 <full_led_write+0x170>)
 8011a28:	f7f0 fc6c 	bl	8002304 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 8011a2c:	2200      	movs	r2, #0
 8011a2e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8011a32:	483d      	ldr	r0, [pc, #244]	; (8011b28 <full_led_write+0x170>)
 8011a34:	f7f0 fc66 	bl	8002304 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8011a38:	2201      	movs	r2, #1
 8011a3a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8011a3e:	483b      	ldr	r0, [pc, #236]	; (8011b2c <full_led_write+0x174>)
 8011a40:	f7f0 fc60 	bl	8002304 <HAL_GPIO_WritePin>
}
 8011a44:	e06c      	b.n	8011b20 <full_led_write+0x168>
	else if(fulled == 3){
 8011a46:	79fb      	ldrb	r3, [r7, #7]
 8011a48:	2b03      	cmp	r3, #3
 8011a4a:	d112      	bne.n	8011a72 <full_led_write+0xba>
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 8011a4c:	2200      	movs	r2, #0
 8011a4e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8011a52:	4835      	ldr	r0, [pc, #212]	; (8011b28 <full_led_write+0x170>)
 8011a54:	f7f0 fc56 	bl	8002304 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 8011a58:	2201      	movs	r2, #1
 8011a5a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8011a5e:	4832      	ldr	r0, [pc, #200]	; (8011b28 <full_led_write+0x170>)
 8011a60:	f7f0 fc50 	bl	8002304 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8011a64:	2201      	movs	r2, #1
 8011a66:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8011a6a:	4830      	ldr	r0, [pc, #192]	; (8011b2c <full_led_write+0x174>)
 8011a6c:	f7f0 fc4a 	bl	8002304 <HAL_GPIO_WritePin>
}
 8011a70:	e056      	b.n	8011b20 <full_led_write+0x168>
	else if(fulled == 4){
 8011a72:	79fb      	ldrb	r3, [r7, #7]
 8011a74:	2b04      	cmp	r3, #4
 8011a76:	d112      	bne.n	8011a9e <full_led_write+0xe6>
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 8011a78:	2200      	movs	r2, #0
 8011a7a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8011a7e:	482a      	ldr	r0, [pc, #168]	; (8011b28 <full_led_write+0x170>)
 8011a80:	f7f0 fc40 	bl	8002304 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 8011a84:	2200      	movs	r2, #0
 8011a86:	f44f 7100 	mov.w	r1, #512	; 0x200
 8011a8a:	4827      	ldr	r0, [pc, #156]	; (8011b28 <full_led_write+0x170>)
 8011a8c:	f7f0 fc3a 	bl	8002304 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8011a90:	2201      	movs	r2, #1
 8011a92:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8011a96:	4825      	ldr	r0, [pc, #148]	; (8011b2c <full_led_write+0x174>)
 8011a98:	f7f0 fc34 	bl	8002304 <HAL_GPIO_WritePin>
}
 8011a9c:	e040      	b.n	8011b20 <full_led_write+0x168>
	else if(fulled == 5){
 8011a9e:	79fb      	ldrb	r3, [r7, #7]
 8011aa0:	2b05      	cmp	r3, #5
 8011aa2:	d112      	bne.n	8011aca <full_led_write+0x112>
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 8011aa4:	2200      	movs	r2, #0
 8011aa6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8011aaa:	481f      	ldr	r0, [pc, #124]	; (8011b28 <full_led_write+0x170>)
 8011aac:	f7f0 fc2a 	bl	8002304 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 8011ab0:	2201      	movs	r2, #1
 8011ab2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8011ab6:	481c      	ldr	r0, [pc, #112]	; (8011b28 <full_led_write+0x170>)
 8011ab8:	f7f0 fc24 	bl	8002304 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8011abc:	2200      	movs	r2, #0
 8011abe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8011ac2:	481a      	ldr	r0, [pc, #104]	; (8011b2c <full_led_write+0x174>)
 8011ac4:	f7f0 fc1e 	bl	8002304 <HAL_GPIO_WritePin>
}
 8011ac8:	e02a      	b.n	8011b20 <full_led_write+0x168>
	else if(fulled == 6){
 8011aca:	79fb      	ldrb	r3, [r7, #7]
 8011acc:	2b06      	cmp	r3, #6
 8011ace:	d112      	bne.n	8011af6 <full_led_write+0x13e>
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
 8011ad0:	2201      	movs	r2, #1
 8011ad2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8011ad6:	4814      	ldr	r0, [pc, #80]	; (8011b28 <full_led_write+0x170>)
 8011ad8:	f7f0 fc14 	bl	8002304 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 8011adc:	2200      	movs	r2, #0
 8011ade:	f44f 7100 	mov.w	r1, #512	; 0x200
 8011ae2:	4811      	ldr	r0, [pc, #68]	; (8011b28 <full_led_write+0x170>)
 8011ae4:	f7f0 fc0e 	bl	8002304 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8011ae8:	2200      	movs	r2, #0
 8011aea:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8011aee:	480f      	ldr	r0, [pc, #60]	; (8011b2c <full_led_write+0x174>)
 8011af0:	f7f0 fc08 	bl	8002304 <HAL_GPIO_WritePin>
}
 8011af4:	e014      	b.n	8011b20 <full_led_write+0x168>
	else if(fulled == 7){
 8011af6:	79fb      	ldrb	r3, [r7, #7]
 8011af8:	2b07      	cmp	r3, #7
 8011afa:	d111      	bne.n	8011b20 <full_led_write+0x168>
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 8011afc:	2200      	movs	r2, #0
 8011afe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8011b02:	4809      	ldr	r0, [pc, #36]	; (8011b28 <full_led_write+0x170>)
 8011b04:	f7f0 fbfe 	bl	8002304 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 8011b08:	2200      	movs	r2, #0
 8011b0a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8011b0e:	4806      	ldr	r0, [pc, #24]	; (8011b28 <full_led_write+0x170>)
 8011b10:	f7f0 fbf8 	bl	8002304 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8011b14:	2200      	movs	r2, #0
 8011b16:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8011b1a:	4804      	ldr	r0, [pc, #16]	; (8011b2c <full_led_write+0x174>)
 8011b1c:	f7f0 fbf2 	bl	8002304 <HAL_GPIO_WritePin>
}
 8011b20:	bf00      	nop
 8011b22:	3708      	adds	r7, #8
 8011b24:	46bd      	mov	sp, r7
 8011b26:	bd80      	pop	{r7, pc}
 8011b28:	40020400 	.word	0x40020400
 8011b2c:	40020800 	.word	0x40020800

08011b30 <sensor_test>:
//sensor_test
//a壁センサーとジャイロセンサーの値確認
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void sensor_test(){
 8011b30:	b580      	push	{r7, lr}
 8011b32:	b08c      	sub	sp, #48	; 0x30
 8011b34:	af02      	add	r7, sp, #8

	int mode = 0;
 8011b36:	2300      	movs	r3, #0
 8011b38:	627b      	str	r3, [r7, #36]	; 0x24
	printf("Mode : %d\n", mode);
 8011b3a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8011b3c:	4881      	ldr	r0, [pc, #516]	; (8011d44 <sensor_test+0x214>)
 8011b3e:	f000 fccf 	bl	80124e0 <iprintf>

	while(1){
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 8011b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b44:	b2db      	uxtb	r3, r3
 8011b46:	f003 0301 	and.w	r3, r3, #1
 8011b4a:	b2d8      	uxtb	r0, r3
 8011b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b4e:	b2db      	uxtb	r3, r3
 8011b50:	f003 0302 	and.w	r3, r3, #2
 8011b54:	b2d9      	uxtb	r1, r3
 8011b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b58:	b2db      	uxtb	r3, r3
 8011b5a:	f003 0304 	and.w	r3, r3, #4
 8011b5e:	b2db      	uxtb	r3, r3
 8011b60:	461a      	mov	r2, r3
 8011b62:	f7ff feef 	bl	8011944 <led_write>
		  if(dist_r >= 20){
 8011b66:	4b78      	ldr	r3, [pc, #480]	; (8011d48 <sensor_test+0x218>)
 8011b68:	edd3 7a00 	vldr	s15, [r3]
 8011b6c:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8011b70:	eef4 7ac7 	vcmpe.f32	s15, s14
 8011b74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011b78:	db0f      	blt.n	8011b9a <sensor_test+0x6a>
			  mode++;
 8011b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b7c:	3301      	adds	r3, #1
 8011b7e:	627b      	str	r3, [r7, #36]	; 0x24
			  dist_r = 0;
 8011b80:	4b71      	ldr	r3, [pc, #452]	; (8011d48 <sensor_test+0x218>)
 8011b82:	f04f 0200 	mov.w	r2, #0
 8011b86:	601a      	str	r2, [r3, #0]
			  if(mode > 7){
 8011b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b8a:	2b07      	cmp	r3, #7
 8011b8c:	dd01      	ble.n	8011b92 <sensor_test+0x62>
				  mode = 0;
 8011b8e:	2300      	movs	r3, #0
 8011b90:	627b      	str	r3, [r7, #36]	; 0x24
			  }
			  printf("Mode : %d\n", mode);
 8011b92:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8011b94:	486b      	ldr	r0, [pc, #428]	; (8011d44 <sensor_test+0x214>)
 8011b96:	f000 fca3 	bl	80124e0 <iprintf>
			  //buzzer(pitagola2[mode-1][0], pitagola2[mode-1][1]);
			  //buzzer(pitagola[2][0], pitagola[2][1]);
		  }
		  if(dist_r <= -20){
 8011b9a:	4b6b      	ldr	r3, [pc, #428]	; (8011d48 <sensor_test+0x218>)
 8011b9c:	edd3 7a00 	vldr	s15, [r3]
 8011ba0:	eebb 7a04 	vmov.f32	s14, #180	; 0xc1a00000 -20.0
 8011ba4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8011ba8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011bac:	d80f      	bhi.n	8011bce <sensor_test+0x9e>
			  mode--;
 8011bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011bb0:	3b01      	subs	r3, #1
 8011bb2:	627b      	str	r3, [r7, #36]	; 0x24
			  dist_r = 0;
 8011bb4:	4b64      	ldr	r3, [pc, #400]	; (8011d48 <sensor_test+0x218>)
 8011bb6:	f04f 0200 	mov.w	r2, #0
 8011bba:	601a      	str	r2, [r3, #0]
			  if(mode < 0){
 8011bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011bbe:	2b00      	cmp	r3, #0
 8011bc0:	da01      	bge.n	8011bc6 <sensor_test+0x96>
				  mode = 7;
 8011bc2:	2307      	movs	r3, #7
 8011bc4:	627b      	str	r3, [r7, #36]	; 0x24
			  }
			  printf("Mode : %d\n", mode);
 8011bc6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8011bc8:	485e      	ldr	r0, [pc, #376]	; (8011d44 <sensor_test+0x214>)
 8011bca:	f000 fc89 	bl	80124e0 <iprintf>
			  //buzzer(pitagola2[mode-1][0], pitagola2[mode-1][1]);
			  //buzzer(pitagola[2][0], pitagola[2][1]);
		  }
		  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET){
 8011bce:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8011bd2:	485e      	ldr	r0, [pc, #376]	; (8011d4c <sensor_test+0x21c>)
 8011bd4:	f7f0 fb7e 	bl	80022d4 <HAL_GPIO_ReadPin>
 8011bd8:	4603      	mov	r3, r0
 8011bda:	2b00      	cmp	r3, #0
 8011bdc:	d1b1      	bne.n	8011b42 <sensor_test+0x12>
			  HAL_Delay(50);
 8011bde:	2032      	movs	r0, #50	; 0x32
 8011be0:	f7ef fa1c 	bl	800101c <HAL_Delay>
			  while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET);
 8011be4:	bf00      	nop
 8011be6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8011bea:	4858      	ldr	r0, [pc, #352]	; (8011d4c <sensor_test+0x21c>)
 8011bec:	f7f0 fb72 	bl	80022d4 <HAL_GPIO_ReadPin>
 8011bf0:	4603      	mov	r3, r0
 8011bf2:	2b00      	cmp	r3, #0
 8011bf4:	d0f7      	beq.n	8011be6 <sensor_test+0xb6>

			  drive_ready();
 8011bf6:	f7f3 f843 	bl	8004c80 <drive_ready>

			  switch(mode){
 8011bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011bfc:	2b07      	cmp	r3, #7
 8011bfe:	d8a0      	bhi.n	8011b42 <sensor_test+0x12>
 8011c00:	a201      	add	r2, pc, #4	; (adr r2, 8011c08 <sensor_test+0xd8>)
 8011c02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011c06:	bf00      	nop
 8011c08:	08011c29 	.word	0x08011c29
 8011c0c:	08011c2f 	.word	0x08011c2f
 8011c10:	08011c81 	.word	0x08011c81
 8011c14:	08011b43 	.word	0x08011b43
 8011c18:	08011b43 	.word	0x08011b43
 8011c1c:	08011b43 	.word	0x08011b43
 8011c20:	08011b43 	.word	0x08011b43
 8011c24:	08011b43 	.word	0x08011b43
				case 0:
					get_base();
 8011c28:	f7ff fe34 	bl	8011894 <get_base>
					break;
 8011c2c:	e089      	b.n	8011d42 <sensor_test+0x212>
				case 1:
			  		  //----Wall sensor check----
			  		  printf("Wall Sensor Check.\n");
 8011c2e:	4848      	ldr	r0, [pc, #288]	; (8011d50 <sensor_test+0x220>)
 8011c30:	f000 fcca 	bl	80125c8 <puts>
			  		  while(1){
			  			  get_wall_info();
 8011c34:	f7ff fe4c 	bl	80118d0 <get_wall_info>
			  			  led_write(wall_info & 0x11, wall_info & 0x88, wall_info & 0x44);
 8011c38:	4b46      	ldr	r3, [pc, #280]	; (8011d54 <sensor_test+0x224>)
 8011c3a:	781b      	ldrb	r3, [r3, #0]
 8011c3c:	f003 0311 	and.w	r3, r3, #17
 8011c40:	b2d8      	uxtb	r0, r3
 8011c42:	4b44      	ldr	r3, [pc, #272]	; (8011d54 <sensor_test+0x224>)
 8011c44:	781b      	ldrb	r3, [r3, #0]
 8011c46:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8011c4a:	b2d9      	uxtb	r1, r3
 8011c4c:	4b41      	ldr	r3, [pc, #260]	; (8011d54 <sensor_test+0x224>)
 8011c4e:	781b      	ldrb	r3, [r3, #0]
 8011c50:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8011c54:	b2db      	uxtb	r3, r3
 8011c56:	461a      	mov	r2, r3
 8011c58:	f7ff fe74 	bl	8011944 <led_write>
			  			  printf("ad_l : %d, ad_fl : %d, ad_fr : %d, ad_r : %d\n", ad_l, ad_fl, ad_fr, ad_r);
 8011c5c:	4b3e      	ldr	r3, [pc, #248]	; (8011d58 <sensor_test+0x228>)
 8011c5e:	6819      	ldr	r1, [r3, #0]
 8011c60:	4b3e      	ldr	r3, [pc, #248]	; (8011d5c <sensor_test+0x22c>)
 8011c62:	681a      	ldr	r2, [r3, #0]
 8011c64:	4b3e      	ldr	r3, [pc, #248]	; (8011d60 <sensor_test+0x230>)
 8011c66:	6818      	ldr	r0, [r3, #0]
 8011c68:	4b3e      	ldr	r3, [pc, #248]	; (8011d64 <sensor_test+0x234>)
 8011c6a:	681b      	ldr	r3, [r3, #0]
 8011c6c:	9300      	str	r3, [sp, #0]
 8011c6e:	4603      	mov	r3, r0
 8011c70:	483d      	ldr	r0, [pc, #244]	; (8011d68 <sensor_test+0x238>)
 8011c72:	f000 fc35 	bl	80124e0 <iprintf>
			  			  HAL_Delay(333);
 8011c76:	f240 104d 	movw	r0, #333	; 0x14d
 8011c7a:	f7ef f9cf 	bl	800101c <HAL_Delay>
			  			  get_wall_info();
 8011c7e:	e7d9      	b.n	8011c34 <sensor_test+0x104>
						}
					break;
				case 2:
					//----Gyro sensor check----
					printf("Gyro Sensor Check.\n");
 8011c80:	483a      	ldr	r0, [pc, #232]	; (8011d6c <sensor_test+0x23c>)
 8011c82:	f000 fca1 	bl	80125c8 <puts>
					int accel_x, accel_y, accel_z;
					int gyro_x, gyro_y, gyro_z;
					int deg_x, deg_y, deg_z;
			  		  while(1){
			  			  accel_x = accel_read_x();
 8011c86:	f7fa fb75 	bl	800c374 <accel_read_x>
 8011c8a:	eef0 7a40 	vmov.f32	s15, s0
 8011c8e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011c92:	ee17 3a90 	vmov	r3, s15
 8011c96:	623b      	str	r3, [r7, #32]
			  			  accel_y = accel_read_y();
 8011c98:	f7fa fb92 	bl	800c3c0 <accel_read_y>
 8011c9c:	eef0 7a40 	vmov.f32	s15, s0
 8011ca0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011ca4:	ee17 3a90 	vmov	r3, s15
 8011ca8:	61fb      	str	r3, [r7, #28]
			  			  accel_z = accel_read_z();
 8011caa:	f7fa fbaf 	bl	800c40c <accel_read_z>
 8011cae:	eef0 7a40 	vmov.f32	s15, s0
 8011cb2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011cb6:	ee17 3a90 	vmov	r3, s15
 8011cba:	61bb      	str	r3, [r7, #24]
			  			  gyro_x = gyro_read_x();
 8011cbc:	f7fa fbd0 	bl	800c460 <gyro_read_x>
 8011cc0:	eef0 7a40 	vmov.f32	s15, s0
 8011cc4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011cc8:	ee17 3a90 	vmov	r3, s15
 8011ccc:	617b      	str	r3, [r7, #20]
			  			  gyro_y = gyro_read_y();
 8011cce:	f7fa fc03 	bl	800c4d8 <gyro_read_y>
 8011cd2:	eef0 7a40 	vmov.f32	s15, s0
 8011cd6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011cda:	ee17 3a90 	vmov	r3, s15
 8011cde:	613b      	str	r3, [r7, #16]
			  			  gyro_z = gyro_read_z();
 8011ce0:	f7fa fc36 	bl	800c550 <gyro_read_z>
 8011ce4:	eef0 7a40 	vmov.f32	s15, s0
 8011ce8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011cec:	ee17 3a90 	vmov	r3, s15
 8011cf0:	60fb      	str	r3, [r7, #12]
			  			  deg_x = degree_x;
 8011cf2:	4b1f      	ldr	r3, [pc, #124]	; (8011d70 <sensor_test+0x240>)
 8011cf4:	edd3 7a00 	vldr	s15, [r3]
 8011cf8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011cfc:	ee17 3a90 	vmov	r3, s15
 8011d00:	60bb      	str	r3, [r7, #8]
			  			  deg_y = degree_y;
 8011d02:	4b1c      	ldr	r3, [pc, #112]	; (8011d74 <sensor_test+0x244>)
 8011d04:	edd3 7a00 	vldr	s15, [r3]
 8011d08:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011d0c:	ee17 3a90 	vmov	r3, s15
 8011d10:	607b      	str	r3, [r7, #4]
			  			  deg_z = degree_z;
 8011d12:	4b19      	ldr	r3, [pc, #100]	; (8011d78 <sensor_test+0x248>)
 8011d14:	edd3 7a00 	vldr	s15, [r3]
 8011d18:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011d1c:	ee17 3a90 	vmov	r3, s15
 8011d20:	603b      	str	r3, [r7, #0]

			  			  //printf("Accel x: %3d, y: %3d, z: %3d\n", accel_x, accel_y, accel_z);
			  			  printf("Gyro  x: %3d, y: %3d, z: %3d\n", gyro_x, gyro_y, gyro_z);
 8011d22:	68fb      	ldr	r3, [r7, #12]
 8011d24:	693a      	ldr	r2, [r7, #16]
 8011d26:	6979      	ldr	r1, [r7, #20]
 8011d28:	4814      	ldr	r0, [pc, #80]	; (8011d7c <sensor_test+0x24c>)
 8011d2a:	f000 fbd9 	bl	80124e0 <iprintf>
			  			  printf("Deg   x: %3d, y: %3d, z: %3d\n", deg_x, deg_y, deg_z);
 8011d2e:	683b      	ldr	r3, [r7, #0]
 8011d30:	687a      	ldr	r2, [r7, #4]
 8011d32:	68b9      	ldr	r1, [r7, #8]
 8011d34:	4812      	ldr	r0, [pc, #72]	; (8011d80 <sensor_test+0x250>)
 8011d36:	f000 fbd3 	bl	80124e0 <iprintf>
			  			  HAL_Delay(111);
 8011d3a:	206f      	movs	r0, #111	; 0x6f
 8011d3c:	f7ef f96e 	bl	800101c <HAL_Delay>
			  			  accel_x = accel_read_x();
 8011d40:	e7a1      	b.n	8011c86 <sensor_test+0x156>
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 8011d42:	e6fe      	b.n	8011b42 <sensor_test+0x12>
 8011d44:	08013b94 	.word	0x08013b94
 8011d48:	20000aec 	.word	0x20000aec
 8011d4c:	40020000 	.word	0x40020000
 8011d50:	08013ba0 	.word	0x08013ba0
 8011d54:	200002c8 	.word	0x200002c8
 8011d58:	20000afc 	.word	0x20000afc
 8011d5c:	20000d54 	.word	0x20000d54
 8011d60:	20000c00 	.word	0x20000c00
 8011d64:	20000f60 	.word	0x20000f60
 8011d68:	08013bb4 	.word	0x08013bb4
 8011d6c:	08013be4 	.word	0x08013be4
 8011d70:	20000450 	.word	0x20000450
 8011d74:	20000f70 	.word	0x20000f70
 8011d78:	20000b5c 	.word	0x20000b5c
 8011d7c:	08013bf8 	.word	0x08013bf8
 8011d80:	08013c18 	.word	0x08013c18

08011d84 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8011d84:	b480      	push	{r7}
 8011d86:	b083      	sub	sp, #12
 8011d88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8011d8a:	2300      	movs	r3, #0
 8011d8c:	607b      	str	r3, [r7, #4]
 8011d8e:	4b10      	ldr	r3, [pc, #64]	; (8011dd0 <HAL_MspInit+0x4c>)
 8011d90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011d92:	4a0f      	ldr	r2, [pc, #60]	; (8011dd0 <HAL_MspInit+0x4c>)
 8011d94:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8011d98:	6453      	str	r3, [r2, #68]	; 0x44
 8011d9a:	4b0d      	ldr	r3, [pc, #52]	; (8011dd0 <HAL_MspInit+0x4c>)
 8011d9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011d9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8011da2:	607b      	str	r3, [r7, #4]
 8011da4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8011da6:	2300      	movs	r3, #0
 8011da8:	603b      	str	r3, [r7, #0]
 8011daa:	4b09      	ldr	r3, [pc, #36]	; (8011dd0 <HAL_MspInit+0x4c>)
 8011dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011dae:	4a08      	ldr	r2, [pc, #32]	; (8011dd0 <HAL_MspInit+0x4c>)
 8011db0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8011db4:	6413      	str	r3, [r2, #64]	; 0x40
 8011db6:	4b06      	ldr	r3, [pc, #24]	; (8011dd0 <HAL_MspInit+0x4c>)
 8011db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011dba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8011dbe:	603b      	str	r3, [r7, #0]
 8011dc0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8011dc2:	bf00      	nop
 8011dc4:	370c      	adds	r7, #12
 8011dc6:	46bd      	mov	sp, r7
 8011dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011dcc:	4770      	bx	lr
 8011dce:	bf00      	nop
 8011dd0:	40023800 	.word	0x40023800

08011dd4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8011dd4:	b580      	push	{r7, lr}
 8011dd6:	b08a      	sub	sp, #40	; 0x28
 8011dd8:	af00      	add	r7, sp, #0
 8011dda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8011ddc:	f107 0314 	add.w	r3, r7, #20
 8011de0:	2200      	movs	r2, #0
 8011de2:	601a      	str	r2, [r3, #0]
 8011de4:	605a      	str	r2, [r3, #4]
 8011de6:	609a      	str	r2, [r3, #8]
 8011de8:	60da      	str	r2, [r3, #12]
 8011dea:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8011dec:	687b      	ldr	r3, [r7, #4]
 8011dee:	681b      	ldr	r3, [r3, #0]
 8011df0:	4a17      	ldr	r2, [pc, #92]	; (8011e50 <HAL_ADC_MspInit+0x7c>)
 8011df2:	4293      	cmp	r3, r2
 8011df4:	d127      	bne.n	8011e46 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8011df6:	2300      	movs	r3, #0
 8011df8:	613b      	str	r3, [r7, #16]
 8011dfa:	4b16      	ldr	r3, [pc, #88]	; (8011e54 <HAL_ADC_MspInit+0x80>)
 8011dfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011dfe:	4a15      	ldr	r2, [pc, #84]	; (8011e54 <HAL_ADC_MspInit+0x80>)
 8011e00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8011e04:	6453      	str	r3, [r2, #68]	; 0x44
 8011e06:	4b13      	ldr	r3, [pc, #76]	; (8011e54 <HAL_ADC_MspInit+0x80>)
 8011e08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011e0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011e0e:	613b      	str	r3, [r7, #16]
 8011e10:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8011e12:	2300      	movs	r3, #0
 8011e14:	60fb      	str	r3, [r7, #12]
 8011e16:	4b0f      	ldr	r3, [pc, #60]	; (8011e54 <HAL_ADC_MspInit+0x80>)
 8011e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011e1a:	4a0e      	ldr	r2, [pc, #56]	; (8011e54 <HAL_ADC_MspInit+0x80>)
 8011e1c:	f043 0301 	orr.w	r3, r3, #1
 8011e20:	6313      	str	r3, [r2, #48]	; 0x30
 8011e22:	4b0c      	ldr	r3, [pc, #48]	; (8011e54 <HAL_ADC_MspInit+0x80>)
 8011e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011e26:	f003 0301 	and.w	r3, r3, #1
 8011e2a:	60fb      	str	r3, [r7, #12]
 8011e2c:	68fb      	ldr	r3, [r7, #12]
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8011e2e:	230f      	movs	r3, #15
 8011e30:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8011e32:	2303      	movs	r3, #3
 8011e34:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011e36:	2300      	movs	r3, #0
 8011e38:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8011e3a:	f107 0314 	add.w	r3, r7, #20
 8011e3e:	4619      	mov	r1, r3
 8011e40:	4805      	ldr	r0, [pc, #20]	; (8011e58 <HAL_ADC_MspInit+0x84>)
 8011e42:	f7f0 f8ad 	bl	8001fa0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8011e46:	bf00      	nop
 8011e48:	3728      	adds	r7, #40	; 0x28
 8011e4a:	46bd      	mov	sp, r7
 8011e4c:	bd80      	pop	{r7, pc}
 8011e4e:	bf00      	nop
 8011e50:	40012000 	.word	0x40012000
 8011e54:	40023800 	.word	0x40023800
 8011e58:	40020000 	.word	0x40020000

08011e5c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8011e5c:	b580      	push	{r7, lr}
 8011e5e:	b08a      	sub	sp, #40	; 0x28
 8011e60:	af00      	add	r7, sp, #0
 8011e62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8011e64:	f107 0314 	add.w	r3, r7, #20
 8011e68:	2200      	movs	r2, #0
 8011e6a:	601a      	str	r2, [r3, #0]
 8011e6c:	605a      	str	r2, [r3, #4]
 8011e6e:	609a      	str	r2, [r3, #8]
 8011e70:	60da      	str	r2, [r3, #12]
 8011e72:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8011e74:	687b      	ldr	r3, [r7, #4]
 8011e76:	681b      	ldr	r3, [r3, #0]
 8011e78:	4a19      	ldr	r2, [pc, #100]	; (8011ee0 <HAL_SPI_MspInit+0x84>)
 8011e7a:	4293      	cmp	r3, r2
 8011e7c:	d12c      	bne.n	8011ed8 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8011e7e:	2300      	movs	r3, #0
 8011e80:	613b      	str	r3, [r7, #16]
 8011e82:	4b18      	ldr	r3, [pc, #96]	; (8011ee4 <HAL_SPI_MspInit+0x88>)
 8011e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011e86:	4a17      	ldr	r2, [pc, #92]	; (8011ee4 <HAL_SPI_MspInit+0x88>)
 8011e88:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8011e8c:	6413      	str	r3, [r2, #64]	; 0x40
 8011e8e:	4b15      	ldr	r3, [pc, #84]	; (8011ee4 <HAL_SPI_MspInit+0x88>)
 8011e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011e92:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8011e96:	613b      	str	r3, [r7, #16]
 8011e98:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8011e9a:	2300      	movs	r3, #0
 8011e9c:	60fb      	str	r3, [r7, #12]
 8011e9e:	4b11      	ldr	r3, [pc, #68]	; (8011ee4 <HAL_SPI_MspInit+0x88>)
 8011ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011ea2:	4a10      	ldr	r2, [pc, #64]	; (8011ee4 <HAL_SPI_MspInit+0x88>)
 8011ea4:	f043 0304 	orr.w	r3, r3, #4
 8011ea8:	6313      	str	r3, [r2, #48]	; 0x30
 8011eaa:	4b0e      	ldr	r3, [pc, #56]	; (8011ee4 <HAL_SPI_MspInit+0x88>)
 8011eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011eae:	f003 0304 	and.w	r3, r3, #4
 8011eb2:	60fb      	str	r3, [r7, #12]
 8011eb4:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration    
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8011eb6:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8011eba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011ebc:	2302      	movs	r3, #2
 8011ebe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011ec0:	2300      	movs	r3, #0
 8011ec2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8011ec4:	2303      	movs	r3, #3
 8011ec6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8011ec8:	2306      	movs	r3, #6
 8011eca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8011ecc:	f107 0314 	add.w	r3, r7, #20
 8011ed0:	4619      	mov	r1, r3
 8011ed2:	4805      	ldr	r0, [pc, #20]	; (8011ee8 <HAL_SPI_MspInit+0x8c>)
 8011ed4:	f7f0 f864 	bl	8001fa0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8011ed8:	bf00      	nop
 8011eda:	3728      	adds	r7, #40	; 0x28
 8011edc:	46bd      	mov	sp, r7
 8011ede:	bd80      	pop	{r7, pc}
 8011ee0:	40003c00 	.word	0x40003c00
 8011ee4:	40023800 	.word	0x40023800
 8011ee8:	40020800 	.word	0x40020800

08011eec <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8011eec:	b580      	push	{r7, lr}
 8011eee:	b086      	sub	sp, #24
 8011ef0:	af00      	add	r7, sp, #0
 8011ef2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8011ef4:	687b      	ldr	r3, [r7, #4]
 8011ef6:	681b      	ldr	r3, [r3, #0]
 8011ef8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8011efc:	d10e      	bne.n	8011f1c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8011efe:	2300      	movs	r3, #0
 8011f00:	617b      	str	r3, [r7, #20]
 8011f02:	4b20      	ldr	r3, [pc, #128]	; (8011f84 <HAL_TIM_Base_MspInit+0x98>)
 8011f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011f06:	4a1f      	ldr	r2, [pc, #124]	; (8011f84 <HAL_TIM_Base_MspInit+0x98>)
 8011f08:	f043 0301 	orr.w	r3, r3, #1
 8011f0c:	6413      	str	r3, [r2, #64]	; 0x40
 8011f0e:	4b1d      	ldr	r3, [pc, #116]	; (8011f84 <HAL_TIM_Base_MspInit+0x98>)
 8011f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011f12:	f003 0301 	and.w	r3, r3, #1
 8011f16:	617b      	str	r3, [r7, #20]
 8011f18:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8011f1a:	e02e      	b.n	8011f7a <HAL_TIM_Base_MspInit+0x8e>
  else if(htim_base->Instance==TIM3)
 8011f1c:	687b      	ldr	r3, [r7, #4]
 8011f1e:	681b      	ldr	r3, [r3, #0]
 8011f20:	4a19      	ldr	r2, [pc, #100]	; (8011f88 <HAL_TIM_Base_MspInit+0x9c>)
 8011f22:	4293      	cmp	r3, r2
 8011f24:	d10e      	bne.n	8011f44 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8011f26:	2300      	movs	r3, #0
 8011f28:	613b      	str	r3, [r7, #16]
 8011f2a:	4b16      	ldr	r3, [pc, #88]	; (8011f84 <HAL_TIM_Base_MspInit+0x98>)
 8011f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011f2e:	4a15      	ldr	r2, [pc, #84]	; (8011f84 <HAL_TIM_Base_MspInit+0x98>)
 8011f30:	f043 0302 	orr.w	r3, r3, #2
 8011f34:	6413      	str	r3, [r2, #64]	; 0x40
 8011f36:	4b13      	ldr	r3, [pc, #76]	; (8011f84 <HAL_TIM_Base_MspInit+0x98>)
 8011f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011f3a:	f003 0302 	and.w	r3, r3, #2
 8011f3e:	613b      	str	r3, [r7, #16]
 8011f40:	693b      	ldr	r3, [r7, #16]
}
 8011f42:	e01a      	b.n	8011f7a <HAL_TIM_Base_MspInit+0x8e>
  else if(htim_base->Instance==TIM6)
 8011f44:	687b      	ldr	r3, [r7, #4]
 8011f46:	681b      	ldr	r3, [r3, #0]
 8011f48:	4a10      	ldr	r2, [pc, #64]	; (8011f8c <HAL_TIM_Base_MspInit+0xa0>)
 8011f4a:	4293      	cmp	r3, r2
 8011f4c:	d115      	bne.n	8011f7a <HAL_TIM_Base_MspInit+0x8e>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8011f4e:	2300      	movs	r3, #0
 8011f50:	60fb      	str	r3, [r7, #12]
 8011f52:	4b0c      	ldr	r3, [pc, #48]	; (8011f84 <HAL_TIM_Base_MspInit+0x98>)
 8011f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011f56:	4a0b      	ldr	r2, [pc, #44]	; (8011f84 <HAL_TIM_Base_MspInit+0x98>)
 8011f58:	f043 0310 	orr.w	r3, r3, #16
 8011f5c:	6413      	str	r3, [r2, #64]	; 0x40
 8011f5e:	4b09      	ldr	r3, [pc, #36]	; (8011f84 <HAL_TIM_Base_MspInit+0x98>)
 8011f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011f62:	f003 0310 	and.w	r3, r3, #16
 8011f66:	60fb      	str	r3, [r7, #12]
 8011f68:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8011f6a:	2200      	movs	r2, #0
 8011f6c:	2100      	movs	r1, #0
 8011f6e:	2036      	movs	r0, #54	; 0x36
 8011f70:	f7ef fd0b 	bl	800198a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8011f74:	2036      	movs	r0, #54	; 0x36
 8011f76:	f7ef fd24 	bl	80019c2 <HAL_NVIC_EnableIRQ>
}
 8011f7a:	bf00      	nop
 8011f7c:	3718      	adds	r7, #24
 8011f7e:	46bd      	mov	sp, r7
 8011f80:	bd80      	pop	{r7, pc}
 8011f82:	bf00      	nop
 8011f84:	40023800 	.word	0x40023800
 8011f88:	40000400 	.word	0x40000400
 8011f8c:	40001000 	.word	0x40001000

08011f90 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8011f90:	b580      	push	{r7, lr}
 8011f92:	b08c      	sub	sp, #48	; 0x30
 8011f94:	af00      	add	r7, sp, #0
 8011f96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8011f98:	f107 031c 	add.w	r3, r7, #28
 8011f9c:	2200      	movs	r2, #0
 8011f9e:	601a      	str	r2, [r3, #0]
 8011fa0:	605a      	str	r2, [r3, #4]
 8011fa2:	609a      	str	r2, [r3, #8]
 8011fa4:	60da      	str	r2, [r3, #12]
 8011fa6:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM4)
 8011fa8:	687b      	ldr	r3, [r7, #4]
 8011faa:	681b      	ldr	r3, [r3, #0]
 8011fac:	4a32      	ldr	r2, [pc, #200]	; (8012078 <HAL_TIM_Encoder_MspInit+0xe8>)
 8011fae:	4293      	cmp	r3, r2
 8011fb0:	d12c      	bne.n	801200c <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8011fb2:	2300      	movs	r3, #0
 8011fb4:	61bb      	str	r3, [r7, #24]
 8011fb6:	4b31      	ldr	r3, [pc, #196]	; (801207c <HAL_TIM_Encoder_MspInit+0xec>)
 8011fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011fba:	4a30      	ldr	r2, [pc, #192]	; (801207c <HAL_TIM_Encoder_MspInit+0xec>)
 8011fbc:	f043 0304 	orr.w	r3, r3, #4
 8011fc0:	6413      	str	r3, [r2, #64]	; 0x40
 8011fc2:	4b2e      	ldr	r3, [pc, #184]	; (801207c <HAL_TIM_Encoder_MspInit+0xec>)
 8011fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011fc6:	f003 0304 	and.w	r3, r3, #4
 8011fca:	61bb      	str	r3, [r7, #24]
 8011fcc:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8011fce:	2300      	movs	r3, #0
 8011fd0:	617b      	str	r3, [r7, #20]
 8011fd2:	4b2a      	ldr	r3, [pc, #168]	; (801207c <HAL_TIM_Encoder_MspInit+0xec>)
 8011fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011fd6:	4a29      	ldr	r2, [pc, #164]	; (801207c <HAL_TIM_Encoder_MspInit+0xec>)
 8011fd8:	f043 0302 	orr.w	r3, r3, #2
 8011fdc:	6313      	str	r3, [r2, #48]	; 0x30
 8011fde:	4b27      	ldr	r3, [pc, #156]	; (801207c <HAL_TIM_Encoder_MspInit+0xec>)
 8011fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011fe2:	f003 0302 	and.w	r3, r3, #2
 8011fe6:	617b      	str	r3, [r7, #20]
 8011fe8:	697b      	ldr	r3, [r7, #20]
    /**TIM4 GPIO Configuration    
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8011fea:	23c0      	movs	r3, #192	; 0xc0
 8011fec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011fee:	2302      	movs	r3, #2
 8011ff0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011ff2:	2300      	movs	r3, #0
 8011ff4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8011ff6:	2300      	movs	r3, #0
 8011ff8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8011ffa:	2302      	movs	r3, #2
 8011ffc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8011ffe:	f107 031c 	add.w	r3, r7, #28
 8012002:	4619      	mov	r1, r3
 8012004:	481e      	ldr	r0, [pc, #120]	; (8012080 <HAL_TIM_Encoder_MspInit+0xf0>)
 8012006:	f7ef ffcb 	bl	8001fa0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 801200a:	e030      	b.n	801206e <HAL_TIM_Encoder_MspInit+0xde>
  else if(htim_encoder->Instance==TIM8)
 801200c:	687b      	ldr	r3, [r7, #4]
 801200e:	681b      	ldr	r3, [r3, #0]
 8012010:	4a1c      	ldr	r2, [pc, #112]	; (8012084 <HAL_TIM_Encoder_MspInit+0xf4>)
 8012012:	4293      	cmp	r3, r2
 8012014:	d12b      	bne.n	801206e <HAL_TIM_Encoder_MspInit+0xde>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8012016:	2300      	movs	r3, #0
 8012018:	613b      	str	r3, [r7, #16]
 801201a:	4b18      	ldr	r3, [pc, #96]	; (801207c <HAL_TIM_Encoder_MspInit+0xec>)
 801201c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801201e:	4a17      	ldr	r2, [pc, #92]	; (801207c <HAL_TIM_Encoder_MspInit+0xec>)
 8012020:	f043 0302 	orr.w	r3, r3, #2
 8012024:	6453      	str	r3, [r2, #68]	; 0x44
 8012026:	4b15      	ldr	r3, [pc, #84]	; (801207c <HAL_TIM_Encoder_MspInit+0xec>)
 8012028:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801202a:	f003 0302 	and.w	r3, r3, #2
 801202e:	613b      	str	r3, [r7, #16]
 8012030:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8012032:	2300      	movs	r3, #0
 8012034:	60fb      	str	r3, [r7, #12]
 8012036:	4b11      	ldr	r3, [pc, #68]	; (801207c <HAL_TIM_Encoder_MspInit+0xec>)
 8012038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801203a:	4a10      	ldr	r2, [pc, #64]	; (801207c <HAL_TIM_Encoder_MspInit+0xec>)
 801203c:	f043 0304 	orr.w	r3, r3, #4
 8012040:	6313      	str	r3, [r2, #48]	; 0x30
 8012042:	4b0e      	ldr	r3, [pc, #56]	; (801207c <HAL_TIM_Encoder_MspInit+0xec>)
 8012044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012046:	f003 0304 	and.w	r3, r3, #4
 801204a:	60fb      	str	r3, [r7, #12]
 801204c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 801204e:	23c0      	movs	r3, #192	; 0xc0
 8012050:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012052:	2302      	movs	r3, #2
 8012054:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012056:	2300      	movs	r3, #0
 8012058:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801205a:	2300      	movs	r3, #0
 801205c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 801205e:	2303      	movs	r3, #3
 8012060:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8012062:	f107 031c 	add.w	r3, r7, #28
 8012066:	4619      	mov	r1, r3
 8012068:	4807      	ldr	r0, [pc, #28]	; (8012088 <HAL_TIM_Encoder_MspInit+0xf8>)
 801206a:	f7ef ff99 	bl	8001fa0 <HAL_GPIO_Init>
}
 801206e:	bf00      	nop
 8012070:	3730      	adds	r7, #48	; 0x30
 8012072:	46bd      	mov	sp, r7
 8012074:	bd80      	pop	{r7, pc}
 8012076:	bf00      	nop
 8012078:	40000800 	.word	0x40000800
 801207c:	40023800 	.word	0x40023800
 8012080:	40020400 	.word	0x40020400
 8012084:	40010400 	.word	0x40010400
 8012088:	40020800 	.word	0x40020800

0801208c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 801208c:	b580      	push	{r7, lr}
 801208e:	b08a      	sub	sp, #40	; 0x28
 8012090:	af00      	add	r7, sp, #0
 8012092:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8012094:	f107 0314 	add.w	r3, r7, #20
 8012098:	2200      	movs	r2, #0
 801209a:	601a      	str	r2, [r3, #0]
 801209c:	605a      	str	r2, [r3, #4]
 801209e:	609a      	str	r2, [r3, #8]
 80120a0:	60da      	str	r2, [r3, #12]
 80120a2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80120a4:	687b      	ldr	r3, [r7, #4]
 80120a6:	681b      	ldr	r3, [r3, #0]
 80120a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80120ac:	d13d      	bne.n	801212a <HAL_TIM_MspPostInit+0x9e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80120ae:	2300      	movs	r3, #0
 80120b0:	613b      	str	r3, [r7, #16]
 80120b2:	4b31      	ldr	r3, [pc, #196]	; (8012178 <HAL_TIM_MspPostInit+0xec>)
 80120b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80120b6:	4a30      	ldr	r2, [pc, #192]	; (8012178 <HAL_TIM_MspPostInit+0xec>)
 80120b8:	f043 0301 	orr.w	r3, r3, #1
 80120bc:	6313      	str	r3, [r2, #48]	; 0x30
 80120be:	4b2e      	ldr	r3, [pc, #184]	; (8012178 <HAL_TIM_MspPostInit+0xec>)
 80120c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80120c2:	f003 0301 	and.w	r3, r3, #1
 80120c6:	613b      	str	r3, [r7, #16]
 80120c8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80120ca:	2300      	movs	r3, #0
 80120cc:	60fb      	str	r3, [r7, #12]
 80120ce:	4b2a      	ldr	r3, [pc, #168]	; (8012178 <HAL_TIM_MspPostInit+0xec>)
 80120d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80120d2:	4a29      	ldr	r2, [pc, #164]	; (8012178 <HAL_TIM_MspPostInit+0xec>)
 80120d4:	f043 0302 	orr.w	r3, r3, #2
 80120d8:	6313      	str	r3, [r2, #48]	; 0x30
 80120da:	4b27      	ldr	r3, [pc, #156]	; (8012178 <HAL_TIM_MspPostInit+0xec>)
 80120dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80120de:	f003 0302 	and.w	r3, r3, #2
 80120e2:	60fb      	str	r3, [r7, #12]
 80120e4:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration    
    PA5     ------> TIM2_CH1
    PB11     ------> TIM2_CH4 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80120e6:	2320      	movs	r3, #32
 80120e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80120ea:	2302      	movs	r3, #2
 80120ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80120ee:	2300      	movs	r3, #0
 80120f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80120f2:	2300      	movs	r3, #0
 80120f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80120f6:	2301      	movs	r3, #1
 80120f8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80120fa:	f107 0314 	add.w	r3, r7, #20
 80120fe:	4619      	mov	r1, r3
 8012100:	481e      	ldr	r0, [pc, #120]	; (801217c <HAL_TIM_MspPostInit+0xf0>)
 8012102:	f7ef ff4d 	bl	8001fa0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8012106:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801210a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801210c:	2302      	movs	r3, #2
 801210e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012110:	2300      	movs	r3, #0
 8012112:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8012114:	2300      	movs	r3, #0
 8012116:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8012118:	2301      	movs	r3, #1
 801211a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 801211c:	f107 0314 	add.w	r3, r7, #20
 8012120:	4619      	mov	r1, r3
 8012122:	4817      	ldr	r0, [pc, #92]	; (8012180 <HAL_TIM_MspPostInit+0xf4>)
 8012124:	f7ef ff3c 	bl	8001fa0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8012128:	e022      	b.n	8012170 <HAL_TIM_MspPostInit+0xe4>
  else if(htim->Instance==TIM3)
 801212a:	687b      	ldr	r3, [r7, #4]
 801212c:	681b      	ldr	r3, [r3, #0]
 801212e:	4a15      	ldr	r2, [pc, #84]	; (8012184 <HAL_TIM_MspPostInit+0xf8>)
 8012130:	4293      	cmp	r3, r2
 8012132:	d11d      	bne.n	8012170 <HAL_TIM_MspPostInit+0xe4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8012134:	2300      	movs	r3, #0
 8012136:	60bb      	str	r3, [r7, #8]
 8012138:	4b0f      	ldr	r3, [pc, #60]	; (8012178 <HAL_TIM_MspPostInit+0xec>)
 801213a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801213c:	4a0e      	ldr	r2, [pc, #56]	; (8012178 <HAL_TIM_MspPostInit+0xec>)
 801213e:	f043 0302 	orr.w	r3, r3, #2
 8012142:	6313      	str	r3, [r2, #48]	; 0x30
 8012144:	4b0c      	ldr	r3, [pc, #48]	; (8012178 <HAL_TIM_MspPostInit+0xec>)
 8012146:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012148:	f003 0302 	and.w	r3, r3, #2
 801214c:	60bb      	str	r3, [r7, #8]
 801214e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8012150:	2320      	movs	r3, #32
 8012152:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012154:	2302      	movs	r3, #2
 8012156:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012158:	2300      	movs	r3, #0
 801215a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801215c:	2300      	movs	r3, #0
 801215e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8012160:	2302      	movs	r3, #2
 8012162:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8012164:	f107 0314 	add.w	r3, r7, #20
 8012168:	4619      	mov	r1, r3
 801216a:	4805      	ldr	r0, [pc, #20]	; (8012180 <HAL_TIM_MspPostInit+0xf4>)
 801216c:	f7ef ff18 	bl	8001fa0 <HAL_GPIO_Init>
}
 8012170:	bf00      	nop
 8012172:	3728      	adds	r7, #40	; 0x28
 8012174:	46bd      	mov	sp, r7
 8012176:	bd80      	pop	{r7, pc}
 8012178:	40023800 	.word	0x40023800
 801217c:	40020000 	.word	0x40020000
 8012180:	40020400 	.word	0x40020400
 8012184:	40000400 	.word	0x40000400

08012188 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8012188:	b580      	push	{r7, lr}
 801218a:	b08a      	sub	sp, #40	; 0x28
 801218c:	af00      	add	r7, sp, #0
 801218e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8012190:	f107 0314 	add.w	r3, r7, #20
 8012194:	2200      	movs	r2, #0
 8012196:	601a      	str	r2, [r3, #0]
 8012198:	605a      	str	r2, [r3, #4]
 801219a:	609a      	str	r2, [r3, #8]
 801219c:	60da      	str	r2, [r3, #12]
 801219e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80121a0:	687b      	ldr	r3, [r7, #4]
 80121a2:	681b      	ldr	r3, [r3, #0]
 80121a4:	4a19      	ldr	r2, [pc, #100]	; (801220c <HAL_UART_MspInit+0x84>)
 80121a6:	4293      	cmp	r3, r2
 80121a8:	d12c      	bne.n	8012204 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80121aa:	2300      	movs	r3, #0
 80121ac:	613b      	str	r3, [r7, #16]
 80121ae:	4b18      	ldr	r3, [pc, #96]	; (8012210 <HAL_UART_MspInit+0x88>)
 80121b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80121b2:	4a17      	ldr	r2, [pc, #92]	; (8012210 <HAL_UART_MspInit+0x88>)
 80121b4:	f043 0310 	orr.w	r3, r3, #16
 80121b8:	6453      	str	r3, [r2, #68]	; 0x44
 80121ba:	4b15      	ldr	r3, [pc, #84]	; (8012210 <HAL_UART_MspInit+0x88>)
 80121bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80121be:	f003 0310 	and.w	r3, r3, #16
 80121c2:	613b      	str	r3, [r7, #16]
 80121c4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80121c6:	2300      	movs	r3, #0
 80121c8:	60fb      	str	r3, [r7, #12]
 80121ca:	4b11      	ldr	r3, [pc, #68]	; (8012210 <HAL_UART_MspInit+0x88>)
 80121cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80121ce:	4a10      	ldr	r2, [pc, #64]	; (8012210 <HAL_UART_MspInit+0x88>)
 80121d0:	f043 0301 	orr.w	r3, r3, #1
 80121d4:	6313      	str	r3, [r2, #48]	; 0x30
 80121d6:	4b0e      	ldr	r3, [pc, #56]	; (8012210 <HAL_UART_MspInit+0x88>)
 80121d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80121da:	f003 0301 	and.w	r3, r3, #1
 80121de:	60fb      	str	r3, [r7, #12]
 80121e0:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80121e2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80121e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80121e8:	2302      	movs	r3, #2
 80121ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80121ec:	2301      	movs	r3, #1
 80121ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80121f0:	2303      	movs	r3, #3
 80121f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80121f4:	2307      	movs	r3, #7
 80121f6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80121f8:	f107 0314 	add.w	r3, r7, #20
 80121fc:	4619      	mov	r1, r3
 80121fe:	4805      	ldr	r0, [pc, #20]	; (8012214 <HAL_UART_MspInit+0x8c>)
 8012200:	f7ef fece 	bl	8001fa0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8012204:	bf00      	nop
 8012206:	3728      	adds	r7, #40	; 0x28
 8012208:	46bd      	mov	sp, r7
 801220a:	bd80      	pop	{r7, pc}
 801220c:	40011000 	.word	0x40011000
 8012210:	40023800 	.word	0x40023800
 8012214:	40020000 	.word	0x40020000

08012218 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8012218:	b480      	push	{r7}
 801221a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 801221c:	bf00      	nop
 801221e:	46bd      	mov	sp, r7
 8012220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012224:	4770      	bx	lr

08012226 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8012226:	b480      	push	{r7}
 8012228:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 801222a:	e7fe      	b.n	801222a <HardFault_Handler+0x4>

0801222c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 801222c:	b480      	push	{r7}
 801222e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8012230:	e7fe      	b.n	8012230 <MemManage_Handler+0x4>

08012232 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8012232:	b480      	push	{r7}
 8012234:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8012236:	e7fe      	b.n	8012236 <BusFault_Handler+0x4>

08012238 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8012238:	b480      	push	{r7}
 801223a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 801223c:	e7fe      	b.n	801223c <UsageFault_Handler+0x4>

0801223e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 801223e:	b480      	push	{r7}
 8012240:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8012242:	bf00      	nop
 8012244:	46bd      	mov	sp, r7
 8012246:	f85d 7b04 	ldr.w	r7, [sp], #4
 801224a:	4770      	bx	lr

0801224c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 801224c:	b480      	push	{r7}
 801224e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8012250:	bf00      	nop
 8012252:	46bd      	mov	sp, r7
 8012254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012258:	4770      	bx	lr

0801225a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 801225a:	b480      	push	{r7}
 801225c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 801225e:	bf00      	nop
 8012260:	46bd      	mov	sp, r7
 8012262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012266:	4770      	bx	lr

08012268 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8012268:	b580      	push	{r7, lr}
 801226a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 801226c:	f7ee feb6 	bl	8000fdc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8012270:	bf00      	nop
 8012272:	bd80      	pop	{r7, pc}

08012274 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8012274:	b580      	push	{r7, lr}
 8012276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8012278:	4802      	ldr	r0, [pc, #8]	; (8012284 <TIM6_DAC_IRQHandler+0x10>)
 801227a:	f7f1 fb9e 	bl	80039ba <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 801227e:	bf00      	nop
 8012280:	bd80      	pop	{r7, pc}
 8012282:	bf00      	nop
 8012284:	20000bb4 	.word	0x20000bb4

08012288 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8012288:	b580      	push	{r7, lr}
 801228a:	b086      	sub	sp, #24
 801228c:	af00      	add	r7, sp, #0
 801228e:	60f8      	str	r0, [r7, #12]
 8012290:	60b9      	str	r1, [r7, #8]
 8012292:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8012294:	2300      	movs	r3, #0
 8012296:	617b      	str	r3, [r7, #20]
 8012298:	e00a      	b.n	80122b0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 801229a:	f3af 8000 	nop.w
 801229e:	4601      	mov	r1, r0
 80122a0:	68bb      	ldr	r3, [r7, #8]
 80122a2:	1c5a      	adds	r2, r3, #1
 80122a4:	60ba      	str	r2, [r7, #8]
 80122a6:	b2ca      	uxtb	r2, r1
 80122a8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80122aa:	697b      	ldr	r3, [r7, #20]
 80122ac:	3301      	adds	r3, #1
 80122ae:	617b      	str	r3, [r7, #20]
 80122b0:	697a      	ldr	r2, [r7, #20]
 80122b2:	687b      	ldr	r3, [r7, #4]
 80122b4:	429a      	cmp	r2, r3
 80122b6:	dbf0      	blt.n	801229a <_read+0x12>
	}

return len;
 80122b8:	687b      	ldr	r3, [r7, #4]
}
 80122ba:	4618      	mov	r0, r3
 80122bc:	3718      	adds	r7, #24
 80122be:	46bd      	mov	sp, r7
 80122c0:	bd80      	pop	{r7, pc}

080122c2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80122c2:	b580      	push	{r7, lr}
 80122c4:	b086      	sub	sp, #24
 80122c6:	af00      	add	r7, sp, #0
 80122c8:	60f8      	str	r0, [r7, #12]
 80122ca:	60b9      	str	r1, [r7, #8]
 80122cc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80122ce:	2300      	movs	r3, #0
 80122d0:	617b      	str	r3, [r7, #20]
 80122d2:	e009      	b.n	80122e8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80122d4:	68bb      	ldr	r3, [r7, #8]
 80122d6:	1c5a      	adds	r2, r3, #1
 80122d8:	60ba      	str	r2, [r7, #8]
 80122da:	781b      	ldrb	r3, [r3, #0]
 80122dc:	4618      	mov	r0, r3
 80122de:	f7fa f979 	bl	800c5d4 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80122e2:	697b      	ldr	r3, [r7, #20]
 80122e4:	3301      	adds	r3, #1
 80122e6:	617b      	str	r3, [r7, #20]
 80122e8:	697a      	ldr	r2, [r7, #20]
 80122ea:	687b      	ldr	r3, [r7, #4]
 80122ec:	429a      	cmp	r2, r3
 80122ee:	dbf1      	blt.n	80122d4 <_write+0x12>
	}
	return len;
 80122f0:	687b      	ldr	r3, [r7, #4]
}
 80122f2:	4618      	mov	r0, r3
 80122f4:	3718      	adds	r7, #24
 80122f6:	46bd      	mov	sp, r7
 80122f8:	bd80      	pop	{r7, pc}

080122fa <_close>:

int _close(int file)
{
 80122fa:	b480      	push	{r7}
 80122fc:	b083      	sub	sp, #12
 80122fe:	af00      	add	r7, sp, #0
 8012300:	6078      	str	r0, [r7, #4]
	return -1;
 8012302:	f04f 33ff 	mov.w	r3, #4294967295
}
 8012306:	4618      	mov	r0, r3
 8012308:	370c      	adds	r7, #12
 801230a:	46bd      	mov	sp, r7
 801230c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012310:	4770      	bx	lr

08012312 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8012312:	b480      	push	{r7}
 8012314:	b083      	sub	sp, #12
 8012316:	af00      	add	r7, sp, #0
 8012318:	6078      	str	r0, [r7, #4]
 801231a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 801231c:	683b      	ldr	r3, [r7, #0]
 801231e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8012322:	605a      	str	r2, [r3, #4]
	return 0;
 8012324:	2300      	movs	r3, #0
}
 8012326:	4618      	mov	r0, r3
 8012328:	370c      	adds	r7, #12
 801232a:	46bd      	mov	sp, r7
 801232c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012330:	4770      	bx	lr

08012332 <_isatty>:

int _isatty(int file)
{
 8012332:	b480      	push	{r7}
 8012334:	b083      	sub	sp, #12
 8012336:	af00      	add	r7, sp, #0
 8012338:	6078      	str	r0, [r7, #4]
	return 1;
 801233a:	2301      	movs	r3, #1
}
 801233c:	4618      	mov	r0, r3
 801233e:	370c      	adds	r7, #12
 8012340:	46bd      	mov	sp, r7
 8012342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012346:	4770      	bx	lr

08012348 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8012348:	b480      	push	{r7}
 801234a:	b085      	sub	sp, #20
 801234c:	af00      	add	r7, sp, #0
 801234e:	60f8      	str	r0, [r7, #12]
 8012350:	60b9      	str	r1, [r7, #8]
 8012352:	607a      	str	r2, [r7, #4]
	return 0;
 8012354:	2300      	movs	r3, #0
}
 8012356:	4618      	mov	r0, r3
 8012358:	3714      	adds	r7, #20
 801235a:	46bd      	mov	sp, r7
 801235c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012360:	4770      	bx	lr
	...

08012364 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8012364:	b580      	push	{r7, lr}
 8012366:	b084      	sub	sp, #16
 8012368:	af00      	add	r7, sp, #0
 801236a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 801236c:	4b11      	ldr	r3, [pc, #68]	; (80123b4 <_sbrk+0x50>)
 801236e:	681b      	ldr	r3, [r3, #0]
 8012370:	2b00      	cmp	r3, #0
 8012372:	d102      	bne.n	801237a <_sbrk+0x16>
		heap_end = &end;
 8012374:	4b0f      	ldr	r3, [pc, #60]	; (80123b4 <_sbrk+0x50>)
 8012376:	4a10      	ldr	r2, [pc, #64]	; (80123b8 <_sbrk+0x54>)
 8012378:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 801237a:	4b0e      	ldr	r3, [pc, #56]	; (80123b4 <_sbrk+0x50>)
 801237c:	681b      	ldr	r3, [r3, #0]
 801237e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8012380:	4b0c      	ldr	r3, [pc, #48]	; (80123b4 <_sbrk+0x50>)
 8012382:	681a      	ldr	r2, [r3, #0]
 8012384:	687b      	ldr	r3, [r7, #4]
 8012386:	4413      	add	r3, r2
 8012388:	466a      	mov	r2, sp
 801238a:	4293      	cmp	r3, r2
 801238c:	d907      	bls.n	801239e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 801238e:	f000 f875 	bl	801247c <__errno>
 8012392:	4602      	mov	r2, r0
 8012394:	230c      	movs	r3, #12
 8012396:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8012398:	f04f 33ff 	mov.w	r3, #4294967295
 801239c:	e006      	b.n	80123ac <_sbrk+0x48>
	}

	heap_end += incr;
 801239e:	4b05      	ldr	r3, [pc, #20]	; (80123b4 <_sbrk+0x50>)
 80123a0:	681a      	ldr	r2, [r3, #0]
 80123a2:	687b      	ldr	r3, [r7, #4]
 80123a4:	4413      	add	r3, r2
 80123a6:	4a03      	ldr	r2, [pc, #12]	; (80123b4 <_sbrk+0x50>)
 80123a8:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80123aa:	68fb      	ldr	r3, [r7, #12]
}
 80123ac:	4618      	mov	r0, r3
 80123ae:	3710      	adds	r7, #16
 80123b0:	46bd      	mov	sp, r7
 80123b2:	bd80      	pop	{r7, pc}
 80123b4:	20000114 	.word	0x20000114
 80123b8:	200015e0 	.word	0x200015e0

080123bc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80123bc:	b480      	push	{r7}
 80123be:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80123c0:	4b16      	ldr	r3, [pc, #88]	; (801241c <SystemInit+0x60>)
 80123c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80123c6:	4a15      	ldr	r2, [pc, #84]	; (801241c <SystemInit+0x60>)
 80123c8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80123cc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80123d0:	4b13      	ldr	r3, [pc, #76]	; (8012420 <SystemInit+0x64>)
 80123d2:	681b      	ldr	r3, [r3, #0]
 80123d4:	4a12      	ldr	r2, [pc, #72]	; (8012420 <SystemInit+0x64>)
 80123d6:	f043 0301 	orr.w	r3, r3, #1
 80123da:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80123dc:	4b10      	ldr	r3, [pc, #64]	; (8012420 <SystemInit+0x64>)
 80123de:	2200      	movs	r2, #0
 80123e0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80123e2:	4b0f      	ldr	r3, [pc, #60]	; (8012420 <SystemInit+0x64>)
 80123e4:	681b      	ldr	r3, [r3, #0]
 80123e6:	4a0e      	ldr	r2, [pc, #56]	; (8012420 <SystemInit+0x64>)
 80123e8:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80123ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80123f0:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80123f2:	4b0b      	ldr	r3, [pc, #44]	; (8012420 <SystemInit+0x64>)
 80123f4:	4a0b      	ldr	r2, [pc, #44]	; (8012424 <SystemInit+0x68>)
 80123f6:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80123f8:	4b09      	ldr	r3, [pc, #36]	; (8012420 <SystemInit+0x64>)
 80123fa:	681b      	ldr	r3, [r3, #0]
 80123fc:	4a08      	ldr	r2, [pc, #32]	; (8012420 <SystemInit+0x64>)
 80123fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8012402:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8012404:	4b06      	ldr	r3, [pc, #24]	; (8012420 <SystemInit+0x64>)
 8012406:	2200      	movs	r2, #0
 8012408:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 801240a:	4b04      	ldr	r3, [pc, #16]	; (801241c <SystemInit+0x60>)
 801240c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8012410:	609a      	str	r2, [r3, #8]
#endif
}
 8012412:	bf00      	nop
 8012414:	46bd      	mov	sp, r7
 8012416:	f85d 7b04 	ldr.w	r7, [sp], #4
 801241a:	4770      	bx	lr
 801241c:	e000ed00 	.word	0xe000ed00
 8012420:	40023800 	.word	0x40023800
 8012424:	24003010 	.word	0x24003010

08012428 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8012428:	f8df d034 	ldr.w	sp, [pc, #52]	; 8012460 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 801242c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 801242e:	e003      	b.n	8012438 <LoopCopyDataInit>

08012430 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8012430:	4b0c      	ldr	r3, [pc, #48]	; (8012464 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8012432:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8012434:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8012436:	3104      	adds	r1, #4

08012438 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8012438:	480b      	ldr	r0, [pc, #44]	; (8012468 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 801243a:	4b0c      	ldr	r3, [pc, #48]	; (801246c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 801243c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 801243e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8012440:	d3f6      	bcc.n	8012430 <CopyDataInit>
  ldr  r2, =_sbss
 8012442:	4a0b      	ldr	r2, [pc, #44]	; (8012470 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8012444:	e002      	b.n	801244c <LoopFillZerobss>

08012446 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8012446:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8012448:	f842 3b04 	str.w	r3, [r2], #4

0801244c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 801244c:	4b09      	ldr	r3, [pc, #36]	; (8012474 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 801244e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8012450:	d3f9      	bcc.n	8012446 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8012452:	f7ff ffb3 	bl	80123bc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8012456:	f000 f817 	bl	8012488 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 801245a:	f7fb fbdd 	bl	800dc18 <main>
  bx  lr    
 801245e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8012460:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8012464:	08013cfc 	.word	0x08013cfc
  ldr  r0, =_sdata
 8012468:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 801246c:	200000ec 	.word	0x200000ec
  ldr  r2, =_sbss
 8012470:	200000ec 	.word	0x200000ec
  ldr  r3, = _ebss
 8012474:	200015dc 	.word	0x200015dc

08012478 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8012478:	e7fe      	b.n	8012478 <ADC_IRQHandler>
	...

0801247c <__errno>:
 801247c:	4b01      	ldr	r3, [pc, #4]	; (8012484 <__errno+0x8>)
 801247e:	6818      	ldr	r0, [r3, #0]
 8012480:	4770      	bx	lr
 8012482:	bf00      	nop
 8012484:	20000084 	.word	0x20000084

08012488 <__libc_init_array>:
 8012488:	b570      	push	{r4, r5, r6, lr}
 801248a:	4e0d      	ldr	r6, [pc, #52]	; (80124c0 <__libc_init_array+0x38>)
 801248c:	4c0d      	ldr	r4, [pc, #52]	; (80124c4 <__libc_init_array+0x3c>)
 801248e:	1ba4      	subs	r4, r4, r6
 8012490:	10a4      	asrs	r4, r4, #2
 8012492:	2500      	movs	r5, #0
 8012494:	42a5      	cmp	r5, r4
 8012496:	d109      	bne.n	80124ac <__libc_init_array+0x24>
 8012498:	4e0b      	ldr	r6, [pc, #44]	; (80124c8 <__libc_init_array+0x40>)
 801249a:	4c0c      	ldr	r4, [pc, #48]	; (80124cc <__libc_init_array+0x44>)
 801249c:	f001 f932 	bl	8013704 <_init>
 80124a0:	1ba4      	subs	r4, r4, r6
 80124a2:	10a4      	asrs	r4, r4, #2
 80124a4:	2500      	movs	r5, #0
 80124a6:	42a5      	cmp	r5, r4
 80124a8:	d105      	bne.n	80124b6 <__libc_init_array+0x2e>
 80124aa:	bd70      	pop	{r4, r5, r6, pc}
 80124ac:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80124b0:	4798      	blx	r3
 80124b2:	3501      	adds	r5, #1
 80124b4:	e7ee      	b.n	8012494 <__libc_init_array+0xc>
 80124b6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80124ba:	4798      	blx	r3
 80124bc:	3501      	adds	r5, #1
 80124be:	e7f2      	b.n	80124a6 <__libc_init_array+0x1e>
 80124c0:	08013cf4 	.word	0x08013cf4
 80124c4:	08013cf4 	.word	0x08013cf4
 80124c8:	08013cf4 	.word	0x08013cf4
 80124cc:	08013cf8 	.word	0x08013cf8

080124d0 <memset>:
 80124d0:	4402      	add	r2, r0
 80124d2:	4603      	mov	r3, r0
 80124d4:	4293      	cmp	r3, r2
 80124d6:	d100      	bne.n	80124da <memset+0xa>
 80124d8:	4770      	bx	lr
 80124da:	f803 1b01 	strb.w	r1, [r3], #1
 80124de:	e7f9      	b.n	80124d4 <memset+0x4>

080124e0 <iprintf>:
 80124e0:	b40f      	push	{r0, r1, r2, r3}
 80124e2:	4b0a      	ldr	r3, [pc, #40]	; (801250c <iprintf+0x2c>)
 80124e4:	b513      	push	{r0, r1, r4, lr}
 80124e6:	681c      	ldr	r4, [r3, #0]
 80124e8:	b124      	cbz	r4, 80124f4 <iprintf+0x14>
 80124ea:	69a3      	ldr	r3, [r4, #24]
 80124ec:	b913      	cbnz	r3, 80124f4 <iprintf+0x14>
 80124ee:	4620      	mov	r0, r4
 80124f0:	f000 fad8 	bl	8012aa4 <__sinit>
 80124f4:	ab05      	add	r3, sp, #20
 80124f6:	9a04      	ldr	r2, [sp, #16]
 80124f8:	68a1      	ldr	r1, [r4, #8]
 80124fa:	9301      	str	r3, [sp, #4]
 80124fc:	4620      	mov	r0, r4
 80124fe:	f000 fc99 	bl	8012e34 <_vfiprintf_r>
 8012502:	b002      	add	sp, #8
 8012504:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012508:	b004      	add	sp, #16
 801250a:	4770      	bx	lr
 801250c:	20000084 	.word	0x20000084

08012510 <_puts_r>:
 8012510:	b570      	push	{r4, r5, r6, lr}
 8012512:	460e      	mov	r6, r1
 8012514:	4605      	mov	r5, r0
 8012516:	b118      	cbz	r0, 8012520 <_puts_r+0x10>
 8012518:	6983      	ldr	r3, [r0, #24]
 801251a:	b90b      	cbnz	r3, 8012520 <_puts_r+0x10>
 801251c:	f000 fac2 	bl	8012aa4 <__sinit>
 8012520:	69ab      	ldr	r3, [r5, #24]
 8012522:	68ac      	ldr	r4, [r5, #8]
 8012524:	b913      	cbnz	r3, 801252c <_puts_r+0x1c>
 8012526:	4628      	mov	r0, r5
 8012528:	f000 fabc 	bl	8012aa4 <__sinit>
 801252c:	4b23      	ldr	r3, [pc, #140]	; (80125bc <_puts_r+0xac>)
 801252e:	429c      	cmp	r4, r3
 8012530:	d117      	bne.n	8012562 <_puts_r+0x52>
 8012532:	686c      	ldr	r4, [r5, #4]
 8012534:	89a3      	ldrh	r3, [r4, #12]
 8012536:	071b      	lsls	r3, r3, #28
 8012538:	d51d      	bpl.n	8012576 <_puts_r+0x66>
 801253a:	6923      	ldr	r3, [r4, #16]
 801253c:	b1db      	cbz	r3, 8012576 <_puts_r+0x66>
 801253e:	3e01      	subs	r6, #1
 8012540:	68a3      	ldr	r3, [r4, #8]
 8012542:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8012546:	3b01      	subs	r3, #1
 8012548:	60a3      	str	r3, [r4, #8]
 801254a:	b9e9      	cbnz	r1, 8012588 <_puts_r+0x78>
 801254c:	2b00      	cmp	r3, #0
 801254e:	da2e      	bge.n	80125ae <_puts_r+0x9e>
 8012550:	4622      	mov	r2, r4
 8012552:	210a      	movs	r1, #10
 8012554:	4628      	mov	r0, r5
 8012556:	f000 f8f5 	bl	8012744 <__swbuf_r>
 801255a:	3001      	adds	r0, #1
 801255c:	d011      	beq.n	8012582 <_puts_r+0x72>
 801255e:	200a      	movs	r0, #10
 8012560:	e011      	b.n	8012586 <_puts_r+0x76>
 8012562:	4b17      	ldr	r3, [pc, #92]	; (80125c0 <_puts_r+0xb0>)
 8012564:	429c      	cmp	r4, r3
 8012566:	d101      	bne.n	801256c <_puts_r+0x5c>
 8012568:	68ac      	ldr	r4, [r5, #8]
 801256a:	e7e3      	b.n	8012534 <_puts_r+0x24>
 801256c:	4b15      	ldr	r3, [pc, #84]	; (80125c4 <_puts_r+0xb4>)
 801256e:	429c      	cmp	r4, r3
 8012570:	bf08      	it	eq
 8012572:	68ec      	ldreq	r4, [r5, #12]
 8012574:	e7de      	b.n	8012534 <_puts_r+0x24>
 8012576:	4621      	mov	r1, r4
 8012578:	4628      	mov	r0, r5
 801257a:	f000 f935 	bl	80127e8 <__swsetup_r>
 801257e:	2800      	cmp	r0, #0
 8012580:	d0dd      	beq.n	801253e <_puts_r+0x2e>
 8012582:	f04f 30ff 	mov.w	r0, #4294967295
 8012586:	bd70      	pop	{r4, r5, r6, pc}
 8012588:	2b00      	cmp	r3, #0
 801258a:	da04      	bge.n	8012596 <_puts_r+0x86>
 801258c:	69a2      	ldr	r2, [r4, #24]
 801258e:	429a      	cmp	r2, r3
 8012590:	dc06      	bgt.n	80125a0 <_puts_r+0x90>
 8012592:	290a      	cmp	r1, #10
 8012594:	d004      	beq.n	80125a0 <_puts_r+0x90>
 8012596:	6823      	ldr	r3, [r4, #0]
 8012598:	1c5a      	adds	r2, r3, #1
 801259a:	6022      	str	r2, [r4, #0]
 801259c:	7019      	strb	r1, [r3, #0]
 801259e:	e7cf      	b.n	8012540 <_puts_r+0x30>
 80125a0:	4622      	mov	r2, r4
 80125a2:	4628      	mov	r0, r5
 80125a4:	f000 f8ce 	bl	8012744 <__swbuf_r>
 80125a8:	3001      	adds	r0, #1
 80125aa:	d1c9      	bne.n	8012540 <_puts_r+0x30>
 80125ac:	e7e9      	b.n	8012582 <_puts_r+0x72>
 80125ae:	6823      	ldr	r3, [r4, #0]
 80125b0:	200a      	movs	r0, #10
 80125b2:	1c5a      	adds	r2, r3, #1
 80125b4:	6022      	str	r2, [r4, #0]
 80125b6:	7018      	strb	r0, [r3, #0]
 80125b8:	e7e5      	b.n	8012586 <_puts_r+0x76>
 80125ba:	bf00      	nop
 80125bc:	08013c74 	.word	0x08013c74
 80125c0:	08013c94 	.word	0x08013c94
 80125c4:	08013c54 	.word	0x08013c54

080125c8 <puts>:
 80125c8:	4b02      	ldr	r3, [pc, #8]	; (80125d4 <puts+0xc>)
 80125ca:	4601      	mov	r1, r0
 80125cc:	6818      	ldr	r0, [r3, #0]
 80125ce:	f7ff bf9f 	b.w	8012510 <_puts_r>
 80125d2:	bf00      	nop
 80125d4:	20000084 	.word	0x20000084

080125d8 <setbuf>:
 80125d8:	2900      	cmp	r1, #0
 80125da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80125de:	bf0c      	ite	eq
 80125e0:	2202      	moveq	r2, #2
 80125e2:	2200      	movne	r2, #0
 80125e4:	f000 b800 	b.w	80125e8 <setvbuf>

080125e8 <setvbuf>:
 80125e8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80125ec:	461d      	mov	r5, r3
 80125ee:	4b51      	ldr	r3, [pc, #324]	; (8012734 <setvbuf+0x14c>)
 80125f0:	681e      	ldr	r6, [r3, #0]
 80125f2:	4604      	mov	r4, r0
 80125f4:	460f      	mov	r7, r1
 80125f6:	4690      	mov	r8, r2
 80125f8:	b126      	cbz	r6, 8012604 <setvbuf+0x1c>
 80125fa:	69b3      	ldr	r3, [r6, #24]
 80125fc:	b913      	cbnz	r3, 8012604 <setvbuf+0x1c>
 80125fe:	4630      	mov	r0, r6
 8012600:	f000 fa50 	bl	8012aa4 <__sinit>
 8012604:	4b4c      	ldr	r3, [pc, #304]	; (8012738 <setvbuf+0x150>)
 8012606:	429c      	cmp	r4, r3
 8012608:	d152      	bne.n	80126b0 <setvbuf+0xc8>
 801260a:	6874      	ldr	r4, [r6, #4]
 801260c:	f1b8 0f02 	cmp.w	r8, #2
 8012610:	d006      	beq.n	8012620 <setvbuf+0x38>
 8012612:	f1b8 0f01 	cmp.w	r8, #1
 8012616:	f200 8089 	bhi.w	801272c <setvbuf+0x144>
 801261a:	2d00      	cmp	r5, #0
 801261c:	f2c0 8086 	blt.w	801272c <setvbuf+0x144>
 8012620:	4621      	mov	r1, r4
 8012622:	4630      	mov	r0, r6
 8012624:	f000 f9d4 	bl	80129d0 <_fflush_r>
 8012628:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801262a:	b141      	cbz	r1, 801263e <setvbuf+0x56>
 801262c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012630:	4299      	cmp	r1, r3
 8012632:	d002      	beq.n	801263a <setvbuf+0x52>
 8012634:	4630      	mov	r0, r6
 8012636:	f000 fb2b 	bl	8012c90 <_free_r>
 801263a:	2300      	movs	r3, #0
 801263c:	6363      	str	r3, [r4, #52]	; 0x34
 801263e:	2300      	movs	r3, #0
 8012640:	61a3      	str	r3, [r4, #24]
 8012642:	6063      	str	r3, [r4, #4]
 8012644:	89a3      	ldrh	r3, [r4, #12]
 8012646:	061b      	lsls	r3, r3, #24
 8012648:	d503      	bpl.n	8012652 <setvbuf+0x6a>
 801264a:	6921      	ldr	r1, [r4, #16]
 801264c:	4630      	mov	r0, r6
 801264e:	f000 fb1f 	bl	8012c90 <_free_r>
 8012652:	89a3      	ldrh	r3, [r4, #12]
 8012654:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8012658:	f023 0303 	bic.w	r3, r3, #3
 801265c:	f1b8 0f02 	cmp.w	r8, #2
 8012660:	81a3      	strh	r3, [r4, #12]
 8012662:	d05d      	beq.n	8012720 <setvbuf+0x138>
 8012664:	ab01      	add	r3, sp, #4
 8012666:	466a      	mov	r2, sp
 8012668:	4621      	mov	r1, r4
 801266a:	4630      	mov	r0, r6
 801266c:	f000 faa4 	bl	8012bb8 <__swhatbuf_r>
 8012670:	89a3      	ldrh	r3, [r4, #12]
 8012672:	4318      	orrs	r0, r3
 8012674:	81a0      	strh	r0, [r4, #12]
 8012676:	bb2d      	cbnz	r5, 80126c4 <setvbuf+0xdc>
 8012678:	9d00      	ldr	r5, [sp, #0]
 801267a:	4628      	mov	r0, r5
 801267c:	f000 fb00 	bl	8012c80 <malloc>
 8012680:	4607      	mov	r7, r0
 8012682:	2800      	cmp	r0, #0
 8012684:	d14e      	bne.n	8012724 <setvbuf+0x13c>
 8012686:	f8dd 9000 	ldr.w	r9, [sp]
 801268a:	45a9      	cmp	r9, r5
 801268c:	d13c      	bne.n	8012708 <setvbuf+0x120>
 801268e:	f04f 30ff 	mov.w	r0, #4294967295
 8012692:	89a3      	ldrh	r3, [r4, #12]
 8012694:	f043 0302 	orr.w	r3, r3, #2
 8012698:	81a3      	strh	r3, [r4, #12]
 801269a:	2300      	movs	r3, #0
 801269c:	60a3      	str	r3, [r4, #8]
 801269e:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80126a2:	6023      	str	r3, [r4, #0]
 80126a4:	6123      	str	r3, [r4, #16]
 80126a6:	2301      	movs	r3, #1
 80126a8:	6163      	str	r3, [r4, #20]
 80126aa:	b003      	add	sp, #12
 80126ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80126b0:	4b22      	ldr	r3, [pc, #136]	; (801273c <setvbuf+0x154>)
 80126b2:	429c      	cmp	r4, r3
 80126b4:	d101      	bne.n	80126ba <setvbuf+0xd2>
 80126b6:	68b4      	ldr	r4, [r6, #8]
 80126b8:	e7a8      	b.n	801260c <setvbuf+0x24>
 80126ba:	4b21      	ldr	r3, [pc, #132]	; (8012740 <setvbuf+0x158>)
 80126bc:	429c      	cmp	r4, r3
 80126be:	bf08      	it	eq
 80126c0:	68f4      	ldreq	r4, [r6, #12]
 80126c2:	e7a3      	b.n	801260c <setvbuf+0x24>
 80126c4:	2f00      	cmp	r7, #0
 80126c6:	d0d8      	beq.n	801267a <setvbuf+0x92>
 80126c8:	69b3      	ldr	r3, [r6, #24]
 80126ca:	b913      	cbnz	r3, 80126d2 <setvbuf+0xea>
 80126cc:	4630      	mov	r0, r6
 80126ce:	f000 f9e9 	bl	8012aa4 <__sinit>
 80126d2:	f1b8 0f01 	cmp.w	r8, #1
 80126d6:	bf08      	it	eq
 80126d8:	89a3      	ldrheq	r3, [r4, #12]
 80126da:	6027      	str	r7, [r4, #0]
 80126dc:	bf04      	itt	eq
 80126de:	f043 0301 	orreq.w	r3, r3, #1
 80126e2:	81a3      	strheq	r3, [r4, #12]
 80126e4:	89a3      	ldrh	r3, [r4, #12]
 80126e6:	f013 0008 	ands.w	r0, r3, #8
 80126ea:	e9c4 7504 	strd	r7, r5, [r4, #16]
 80126ee:	d01b      	beq.n	8012728 <setvbuf+0x140>
 80126f0:	f013 0001 	ands.w	r0, r3, #1
 80126f4:	bf18      	it	ne
 80126f6:	426d      	negne	r5, r5
 80126f8:	f04f 0300 	mov.w	r3, #0
 80126fc:	bf1d      	ittte	ne
 80126fe:	60a3      	strne	r3, [r4, #8]
 8012700:	61a5      	strne	r5, [r4, #24]
 8012702:	4618      	movne	r0, r3
 8012704:	60a5      	streq	r5, [r4, #8]
 8012706:	e7d0      	b.n	80126aa <setvbuf+0xc2>
 8012708:	4648      	mov	r0, r9
 801270a:	f000 fab9 	bl	8012c80 <malloc>
 801270e:	4607      	mov	r7, r0
 8012710:	2800      	cmp	r0, #0
 8012712:	d0bc      	beq.n	801268e <setvbuf+0xa6>
 8012714:	89a3      	ldrh	r3, [r4, #12]
 8012716:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801271a:	81a3      	strh	r3, [r4, #12]
 801271c:	464d      	mov	r5, r9
 801271e:	e7d3      	b.n	80126c8 <setvbuf+0xe0>
 8012720:	2000      	movs	r0, #0
 8012722:	e7b6      	b.n	8012692 <setvbuf+0xaa>
 8012724:	46a9      	mov	r9, r5
 8012726:	e7f5      	b.n	8012714 <setvbuf+0x12c>
 8012728:	60a0      	str	r0, [r4, #8]
 801272a:	e7be      	b.n	80126aa <setvbuf+0xc2>
 801272c:	f04f 30ff 	mov.w	r0, #4294967295
 8012730:	e7bb      	b.n	80126aa <setvbuf+0xc2>
 8012732:	bf00      	nop
 8012734:	20000084 	.word	0x20000084
 8012738:	08013c74 	.word	0x08013c74
 801273c:	08013c94 	.word	0x08013c94
 8012740:	08013c54 	.word	0x08013c54

08012744 <__swbuf_r>:
 8012744:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012746:	460e      	mov	r6, r1
 8012748:	4614      	mov	r4, r2
 801274a:	4605      	mov	r5, r0
 801274c:	b118      	cbz	r0, 8012756 <__swbuf_r+0x12>
 801274e:	6983      	ldr	r3, [r0, #24]
 8012750:	b90b      	cbnz	r3, 8012756 <__swbuf_r+0x12>
 8012752:	f000 f9a7 	bl	8012aa4 <__sinit>
 8012756:	4b21      	ldr	r3, [pc, #132]	; (80127dc <__swbuf_r+0x98>)
 8012758:	429c      	cmp	r4, r3
 801275a:	d12a      	bne.n	80127b2 <__swbuf_r+0x6e>
 801275c:	686c      	ldr	r4, [r5, #4]
 801275e:	69a3      	ldr	r3, [r4, #24]
 8012760:	60a3      	str	r3, [r4, #8]
 8012762:	89a3      	ldrh	r3, [r4, #12]
 8012764:	071a      	lsls	r2, r3, #28
 8012766:	d52e      	bpl.n	80127c6 <__swbuf_r+0x82>
 8012768:	6923      	ldr	r3, [r4, #16]
 801276a:	b363      	cbz	r3, 80127c6 <__swbuf_r+0x82>
 801276c:	6923      	ldr	r3, [r4, #16]
 801276e:	6820      	ldr	r0, [r4, #0]
 8012770:	1ac0      	subs	r0, r0, r3
 8012772:	6963      	ldr	r3, [r4, #20]
 8012774:	b2f6      	uxtb	r6, r6
 8012776:	4283      	cmp	r3, r0
 8012778:	4637      	mov	r7, r6
 801277a:	dc04      	bgt.n	8012786 <__swbuf_r+0x42>
 801277c:	4621      	mov	r1, r4
 801277e:	4628      	mov	r0, r5
 8012780:	f000 f926 	bl	80129d0 <_fflush_r>
 8012784:	bb28      	cbnz	r0, 80127d2 <__swbuf_r+0x8e>
 8012786:	68a3      	ldr	r3, [r4, #8]
 8012788:	3b01      	subs	r3, #1
 801278a:	60a3      	str	r3, [r4, #8]
 801278c:	6823      	ldr	r3, [r4, #0]
 801278e:	1c5a      	adds	r2, r3, #1
 8012790:	6022      	str	r2, [r4, #0]
 8012792:	701e      	strb	r6, [r3, #0]
 8012794:	6963      	ldr	r3, [r4, #20]
 8012796:	3001      	adds	r0, #1
 8012798:	4283      	cmp	r3, r0
 801279a:	d004      	beq.n	80127a6 <__swbuf_r+0x62>
 801279c:	89a3      	ldrh	r3, [r4, #12]
 801279e:	07db      	lsls	r3, r3, #31
 80127a0:	d519      	bpl.n	80127d6 <__swbuf_r+0x92>
 80127a2:	2e0a      	cmp	r6, #10
 80127a4:	d117      	bne.n	80127d6 <__swbuf_r+0x92>
 80127a6:	4621      	mov	r1, r4
 80127a8:	4628      	mov	r0, r5
 80127aa:	f000 f911 	bl	80129d0 <_fflush_r>
 80127ae:	b190      	cbz	r0, 80127d6 <__swbuf_r+0x92>
 80127b0:	e00f      	b.n	80127d2 <__swbuf_r+0x8e>
 80127b2:	4b0b      	ldr	r3, [pc, #44]	; (80127e0 <__swbuf_r+0x9c>)
 80127b4:	429c      	cmp	r4, r3
 80127b6:	d101      	bne.n	80127bc <__swbuf_r+0x78>
 80127b8:	68ac      	ldr	r4, [r5, #8]
 80127ba:	e7d0      	b.n	801275e <__swbuf_r+0x1a>
 80127bc:	4b09      	ldr	r3, [pc, #36]	; (80127e4 <__swbuf_r+0xa0>)
 80127be:	429c      	cmp	r4, r3
 80127c0:	bf08      	it	eq
 80127c2:	68ec      	ldreq	r4, [r5, #12]
 80127c4:	e7cb      	b.n	801275e <__swbuf_r+0x1a>
 80127c6:	4621      	mov	r1, r4
 80127c8:	4628      	mov	r0, r5
 80127ca:	f000 f80d 	bl	80127e8 <__swsetup_r>
 80127ce:	2800      	cmp	r0, #0
 80127d0:	d0cc      	beq.n	801276c <__swbuf_r+0x28>
 80127d2:	f04f 37ff 	mov.w	r7, #4294967295
 80127d6:	4638      	mov	r0, r7
 80127d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80127da:	bf00      	nop
 80127dc:	08013c74 	.word	0x08013c74
 80127e0:	08013c94 	.word	0x08013c94
 80127e4:	08013c54 	.word	0x08013c54

080127e8 <__swsetup_r>:
 80127e8:	4b32      	ldr	r3, [pc, #200]	; (80128b4 <__swsetup_r+0xcc>)
 80127ea:	b570      	push	{r4, r5, r6, lr}
 80127ec:	681d      	ldr	r5, [r3, #0]
 80127ee:	4606      	mov	r6, r0
 80127f0:	460c      	mov	r4, r1
 80127f2:	b125      	cbz	r5, 80127fe <__swsetup_r+0x16>
 80127f4:	69ab      	ldr	r3, [r5, #24]
 80127f6:	b913      	cbnz	r3, 80127fe <__swsetup_r+0x16>
 80127f8:	4628      	mov	r0, r5
 80127fa:	f000 f953 	bl	8012aa4 <__sinit>
 80127fe:	4b2e      	ldr	r3, [pc, #184]	; (80128b8 <__swsetup_r+0xd0>)
 8012800:	429c      	cmp	r4, r3
 8012802:	d10f      	bne.n	8012824 <__swsetup_r+0x3c>
 8012804:	686c      	ldr	r4, [r5, #4]
 8012806:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801280a:	b29a      	uxth	r2, r3
 801280c:	0715      	lsls	r5, r2, #28
 801280e:	d42c      	bmi.n	801286a <__swsetup_r+0x82>
 8012810:	06d0      	lsls	r0, r2, #27
 8012812:	d411      	bmi.n	8012838 <__swsetup_r+0x50>
 8012814:	2209      	movs	r2, #9
 8012816:	6032      	str	r2, [r6, #0]
 8012818:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801281c:	81a3      	strh	r3, [r4, #12]
 801281e:	f04f 30ff 	mov.w	r0, #4294967295
 8012822:	e03e      	b.n	80128a2 <__swsetup_r+0xba>
 8012824:	4b25      	ldr	r3, [pc, #148]	; (80128bc <__swsetup_r+0xd4>)
 8012826:	429c      	cmp	r4, r3
 8012828:	d101      	bne.n	801282e <__swsetup_r+0x46>
 801282a:	68ac      	ldr	r4, [r5, #8]
 801282c:	e7eb      	b.n	8012806 <__swsetup_r+0x1e>
 801282e:	4b24      	ldr	r3, [pc, #144]	; (80128c0 <__swsetup_r+0xd8>)
 8012830:	429c      	cmp	r4, r3
 8012832:	bf08      	it	eq
 8012834:	68ec      	ldreq	r4, [r5, #12]
 8012836:	e7e6      	b.n	8012806 <__swsetup_r+0x1e>
 8012838:	0751      	lsls	r1, r2, #29
 801283a:	d512      	bpl.n	8012862 <__swsetup_r+0x7a>
 801283c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801283e:	b141      	cbz	r1, 8012852 <__swsetup_r+0x6a>
 8012840:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012844:	4299      	cmp	r1, r3
 8012846:	d002      	beq.n	801284e <__swsetup_r+0x66>
 8012848:	4630      	mov	r0, r6
 801284a:	f000 fa21 	bl	8012c90 <_free_r>
 801284e:	2300      	movs	r3, #0
 8012850:	6363      	str	r3, [r4, #52]	; 0x34
 8012852:	89a3      	ldrh	r3, [r4, #12]
 8012854:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8012858:	81a3      	strh	r3, [r4, #12]
 801285a:	2300      	movs	r3, #0
 801285c:	6063      	str	r3, [r4, #4]
 801285e:	6923      	ldr	r3, [r4, #16]
 8012860:	6023      	str	r3, [r4, #0]
 8012862:	89a3      	ldrh	r3, [r4, #12]
 8012864:	f043 0308 	orr.w	r3, r3, #8
 8012868:	81a3      	strh	r3, [r4, #12]
 801286a:	6923      	ldr	r3, [r4, #16]
 801286c:	b94b      	cbnz	r3, 8012882 <__swsetup_r+0x9a>
 801286e:	89a3      	ldrh	r3, [r4, #12]
 8012870:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8012874:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012878:	d003      	beq.n	8012882 <__swsetup_r+0x9a>
 801287a:	4621      	mov	r1, r4
 801287c:	4630      	mov	r0, r6
 801287e:	f000 f9bf 	bl	8012c00 <__smakebuf_r>
 8012882:	89a2      	ldrh	r2, [r4, #12]
 8012884:	f012 0301 	ands.w	r3, r2, #1
 8012888:	d00c      	beq.n	80128a4 <__swsetup_r+0xbc>
 801288a:	2300      	movs	r3, #0
 801288c:	60a3      	str	r3, [r4, #8]
 801288e:	6963      	ldr	r3, [r4, #20]
 8012890:	425b      	negs	r3, r3
 8012892:	61a3      	str	r3, [r4, #24]
 8012894:	6923      	ldr	r3, [r4, #16]
 8012896:	b953      	cbnz	r3, 80128ae <__swsetup_r+0xc6>
 8012898:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801289c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80128a0:	d1ba      	bne.n	8012818 <__swsetup_r+0x30>
 80128a2:	bd70      	pop	{r4, r5, r6, pc}
 80128a4:	0792      	lsls	r2, r2, #30
 80128a6:	bf58      	it	pl
 80128a8:	6963      	ldrpl	r3, [r4, #20]
 80128aa:	60a3      	str	r3, [r4, #8]
 80128ac:	e7f2      	b.n	8012894 <__swsetup_r+0xac>
 80128ae:	2000      	movs	r0, #0
 80128b0:	e7f7      	b.n	80128a2 <__swsetup_r+0xba>
 80128b2:	bf00      	nop
 80128b4:	20000084 	.word	0x20000084
 80128b8:	08013c74 	.word	0x08013c74
 80128bc:	08013c94 	.word	0x08013c94
 80128c0:	08013c54 	.word	0x08013c54

080128c4 <__sflush_r>:
 80128c4:	898a      	ldrh	r2, [r1, #12]
 80128c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80128ca:	4605      	mov	r5, r0
 80128cc:	0710      	lsls	r0, r2, #28
 80128ce:	460c      	mov	r4, r1
 80128d0:	d458      	bmi.n	8012984 <__sflush_r+0xc0>
 80128d2:	684b      	ldr	r3, [r1, #4]
 80128d4:	2b00      	cmp	r3, #0
 80128d6:	dc05      	bgt.n	80128e4 <__sflush_r+0x20>
 80128d8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80128da:	2b00      	cmp	r3, #0
 80128dc:	dc02      	bgt.n	80128e4 <__sflush_r+0x20>
 80128de:	2000      	movs	r0, #0
 80128e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80128e4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80128e6:	2e00      	cmp	r6, #0
 80128e8:	d0f9      	beq.n	80128de <__sflush_r+0x1a>
 80128ea:	2300      	movs	r3, #0
 80128ec:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80128f0:	682f      	ldr	r7, [r5, #0]
 80128f2:	6a21      	ldr	r1, [r4, #32]
 80128f4:	602b      	str	r3, [r5, #0]
 80128f6:	d032      	beq.n	801295e <__sflush_r+0x9a>
 80128f8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80128fa:	89a3      	ldrh	r3, [r4, #12]
 80128fc:	075a      	lsls	r2, r3, #29
 80128fe:	d505      	bpl.n	801290c <__sflush_r+0x48>
 8012900:	6863      	ldr	r3, [r4, #4]
 8012902:	1ac0      	subs	r0, r0, r3
 8012904:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8012906:	b10b      	cbz	r3, 801290c <__sflush_r+0x48>
 8012908:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801290a:	1ac0      	subs	r0, r0, r3
 801290c:	2300      	movs	r3, #0
 801290e:	4602      	mov	r2, r0
 8012910:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8012912:	6a21      	ldr	r1, [r4, #32]
 8012914:	4628      	mov	r0, r5
 8012916:	47b0      	blx	r6
 8012918:	1c43      	adds	r3, r0, #1
 801291a:	89a3      	ldrh	r3, [r4, #12]
 801291c:	d106      	bne.n	801292c <__sflush_r+0x68>
 801291e:	6829      	ldr	r1, [r5, #0]
 8012920:	291d      	cmp	r1, #29
 8012922:	d848      	bhi.n	80129b6 <__sflush_r+0xf2>
 8012924:	4a29      	ldr	r2, [pc, #164]	; (80129cc <__sflush_r+0x108>)
 8012926:	40ca      	lsrs	r2, r1
 8012928:	07d6      	lsls	r6, r2, #31
 801292a:	d544      	bpl.n	80129b6 <__sflush_r+0xf2>
 801292c:	2200      	movs	r2, #0
 801292e:	6062      	str	r2, [r4, #4]
 8012930:	04d9      	lsls	r1, r3, #19
 8012932:	6922      	ldr	r2, [r4, #16]
 8012934:	6022      	str	r2, [r4, #0]
 8012936:	d504      	bpl.n	8012942 <__sflush_r+0x7e>
 8012938:	1c42      	adds	r2, r0, #1
 801293a:	d101      	bne.n	8012940 <__sflush_r+0x7c>
 801293c:	682b      	ldr	r3, [r5, #0]
 801293e:	b903      	cbnz	r3, 8012942 <__sflush_r+0x7e>
 8012940:	6560      	str	r0, [r4, #84]	; 0x54
 8012942:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012944:	602f      	str	r7, [r5, #0]
 8012946:	2900      	cmp	r1, #0
 8012948:	d0c9      	beq.n	80128de <__sflush_r+0x1a>
 801294a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801294e:	4299      	cmp	r1, r3
 8012950:	d002      	beq.n	8012958 <__sflush_r+0x94>
 8012952:	4628      	mov	r0, r5
 8012954:	f000 f99c 	bl	8012c90 <_free_r>
 8012958:	2000      	movs	r0, #0
 801295a:	6360      	str	r0, [r4, #52]	; 0x34
 801295c:	e7c0      	b.n	80128e0 <__sflush_r+0x1c>
 801295e:	2301      	movs	r3, #1
 8012960:	4628      	mov	r0, r5
 8012962:	47b0      	blx	r6
 8012964:	1c41      	adds	r1, r0, #1
 8012966:	d1c8      	bne.n	80128fa <__sflush_r+0x36>
 8012968:	682b      	ldr	r3, [r5, #0]
 801296a:	2b00      	cmp	r3, #0
 801296c:	d0c5      	beq.n	80128fa <__sflush_r+0x36>
 801296e:	2b1d      	cmp	r3, #29
 8012970:	d001      	beq.n	8012976 <__sflush_r+0xb2>
 8012972:	2b16      	cmp	r3, #22
 8012974:	d101      	bne.n	801297a <__sflush_r+0xb6>
 8012976:	602f      	str	r7, [r5, #0]
 8012978:	e7b1      	b.n	80128de <__sflush_r+0x1a>
 801297a:	89a3      	ldrh	r3, [r4, #12]
 801297c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012980:	81a3      	strh	r3, [r4, #12]
 8012982:	e7ad      	b.n	80128e0 <__sflush_r+0x1c>
 8012984:	690f      	ldr	r7, [r1, #16]
 8012986:	2f00      	cmp	r7, #0
 8012988:	d0a9      	beq.n	80128de <__sflush_r+0x1a>
 801298a:	0793      	lsls	r3, r2, #30
 801298c:	680e      	ldr	r6, [r1, #0]
 801298e:	bf08      	it	eq
 8012990:	694b      	ldreq	r3, [r1, #20]
 8012992:	600f      	str	r7, [r1, #0]
 8012994:	bf18      	it	ne
 8012996:	2300      	movne	r3, #0
 8012998:	eba6 0807 	sub.w	r8, r6, r7
 801299c:	608b      	str	r3, [r1, #8]
 801299e:	f1b8 0f00 	cmp.w	r8, #0
 80129a2:	dd9c      	ble.n	80128de <__sflush_r+0x1a>
 80129a4:	4643      	mov	r3, r8
 80129a6:	463a      	mov	r2, r7
 80129a8:	6a21      	ldr	r1, [r4, #32]
 80129aa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80129ac:	4628      	mov	r0, r5
 80129ae:	47b0      	blx	r6
 80129b0:	2800      	cmp	r0, #0
 80129b2:	dc06      	bgt.n	80129c2 <__sflush_r+0xfe>
 80129b4:	89a3      	ldrh	r3, [r4, #12]
 80129b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80129ba:	81a3      	strh	r3, [r4, #12]
 80129bc:	f04f 30ff 	mov.w	r0, #4294967295
 80129c0:	e78e      	b.n	80128e0 <__sflush_r+0x1c>
 80129c2:	4407      	add	r7, r0
 80129c4:	eba8 0800 	sub.w	r8, r8, r0
 80129c8:	e7e9      	b.n	801299e <__sflush_r+0xda>
 80129ca:	bf00      	nop
 80129cc:	20400001 	.word	0x20400001

080129d0 <_fflush_r>:
 80129d0:	b538      	push	{r3, r4, r5, lr}
 80129d2:	690b      	ldr	r3, [r1, #16]
 80129d4:	4605      	mov	r5, r0
 80129d6:	460c      	mov	r4, r1
 80129d8:	b1db      	cbz	r3, 8012a12 <_fflush_r+0x42>
 80129da:	b118      	cbz	r0, 80129e4 <_fflush_r+0x14>
 80129dc:	6983      	ldr	r3, [r0, #24]
 80129de:	b90b      	cbnz	r3, 80129e4 <_fflush_r+0x14>
 80129e0:	f000 f860 	bl	8012aa4 <__sinit>
 80129e4:	4b0c      	ldr	r3, [pc, #48]	; (8012a18 <_fflush_r+0x48>)
 80129e6:	429c      	cmp	r4, r3
 80129e8:	d109      	bne.n	80129fe <_fflush_r+0x2e>
 80129ea:	686c      	ldr	r4, [r5, #4]
 80129ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80129f0:	b17b      	cbz	r3, 8012a12 <_fflush_r+0x42>
 80129f2:	4621      	mov	r1, r4
 80129f4:	4628      	mov	r0, r5
 80129f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80129fa:	f7ff bf63 	b.w	80128c4 <__sflush_r>
 80129fe:	4b07      	ldr	r3, [pc, #28]	; (8012a1c <_fflush_r+0x4c>)
 8012a00:	429c      	cmp	r4, r3
 8012a02:	d101      	bne.n	8012a08 <_fflush_r+0x38>
 8012a04:	68ac      	ldr	r4, [r5, #8]
 8012a06:	e7f1      	b.n	80129ec <_fflush_r+0x1c>
 8012a08:	4b05      	ldr	r3, [pc, #20]	; (8012a20 <_fflush_r+0x50>)
 8012a0a:	429c      	cmp	r4, r3
 8012a0c:	bf08      	it	eq
 8012a0e:	68ec      	ldreq	r4, [r5, #12]
 8012a10:	e7ec      	b.n	80129ec <_fflush_r+0x1c>
 8012a12:	2000      	movs	r0, #0
 8012a14:	bd38      	pop	{r3, r4, r5, pc}
 8012a16:	bf00      	nop
 8012a18:	08013c74 	.word	0x08013c74
 8012a1c:	08013c94 	.word	0x08013c94
 8012a20:	08013c54 	.word	0x08013c54

08012a24 <std>:
 8012a24:	2300      	movs	r3, #0
 8012a26:	b510      	push	{r4, lr}
 8012a28:	4604      	mov	r4, r0
 8012a2a:	e9c0 3300 	strd	r3, r3, [r0]
 8012a2e:	6083      	str	r3, [r0, #8]
 8012a30:	8181      	strh	r1, [r0, #12]
 8012a32:	6643      	str	r3, [r0, #100]	; 0x64
 8012a34:	81c2      	strh	r2, [r0, #14]
 8012a36:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8012a3a:	6183      	str	r3, [r0, #24]
 8012a3c:	4619      	mov	r1, r3
 8012a3e:	2208      	movs	r2, #8
 8012a40:	305c      	adds	r0, #92	; 0x5c
 8012a42:	f7ff fd45 	bl	80124d0 <memset>
 8012a46:	4b05      	ldr	r3, [pc, #20]	; (8012a5c <std+0x38>)
 8012a48:	6263      	str	r3, [r4, #36]	; 0x24
 8012a4a:	4b05      	ldr	r3, [pc, #20]	; (8012a60 <std+0x3c>)
 8012a4c:	62a3      	str	r3, [r4, #40]	; 0x28
 8012a4e:	4b05      	ldr	r3, [pc, #20]	; (8012a64 <std+0x40>)
 8012a50:	62e3      	str	r3, [r4, #44]	; 0x2c
 8012a52:	4b05      	ldr	r3, [pc, #20]	; (8012a68 <std+0x44>)
 8012a54:	6224      	str	r4, [r4, #32]
 8012a56:	6323      	str	r3, [r4, #48]	; 0x30
 8012a58:	bd10      	pop	{r4, pc}
 8012a5a:	bf00      	nop
 8012a5c:	08013391 	.word	0x08013391
 8012a60:	080133b3 	.word	0x080133b3
 8012a64:	080133eb 	.word	0x080133eb
 8012a68:	0801340f 	.word	0x0801340f

08012a6c <_cleanup_r>:
 8012a6c:	4901      	ldr	r1, [pc, #4]	; (8012a74 <_cleanup_r+0x8>)
 8012a6e:	f000 b885 	b.w	8012b7c <_fwalk_reent>
 8012a72:	bf00      	nop
 8012a74:	080129d1 	.word	0x080129d1

08012a78 <__sfmoreglue>:
 8012a78:	b570      	push	{r4, r5, r6, lr}
 8012a7a:	1e4a      	subs	r2, r1, #1
 8012a7c:	2568      	movs	r5, #104	; 0x68
 8012a7e:	4355      	muls	r5, r2
 8012a80:	460e      	mov	r6, r1
 8012a82:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8012a86:	f000 f951 	bl	8012d2c <_malloc_r>
 8012a8a:	4604      	mov	r4, r0
 8012a8c:	b140      	cbz	r0, 8012aa0 <__sfmoreglue+0x28>
 8012a8e:	2100      	movs	r1, #0
 8012a90:	e9c0 1600 	strd	r1, r6, [r0]
 8012a94:	300c      	adds	r0, #12
 8012a96:	60a0      	str	r0, [r4, #8]
 8012a98:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8012a9c:	f7ff fd18 	bl	80124d0 <memset>
 8012aa0:	4620      	mov	r0, r4
 8012aa2:	bd70      	pop	{r4, r5, r6, pc}

08012aa4 <__sinit>:
 8012aa4:	6983      	ldr	r3, [r0, #24]
 8012aa6:	b510      	push	{r4, lr}
 8012aa8:	4604      	mov	r4, r0
 8012aaa:	bb33      	cbnz	r3, 8012afa <__sinit+0x56>
 8012aac:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8012ab0:	6503      	str	r3, [r0, #80]	; 0x50
 8012ab2:	4b12      	ldr	r3, [pc, #72]	; (8012afc <__sinit+0x58>)
 8012ab4:	4a12      	ldr	r2, [pc, #72]	; (8012b00 <__sinit+0x5c>)
 8012ab6:	681b      	ldr	r3, [r3, #0]
 8012ab8:	6282      	str	r2, [r0, #40]	; 0x28
 8012aba:	4298      	cmp	r0, r3
 8012abc:	bf04      	itt	eq
 8012abe:	2301      	moveq	r3, #1
 8012ac0:	6183      	streq	r3, [r0, #24]
 8012ac2:	f000 f81f 	bl	8012b04 <__sfp>
 8012ac6:	6060      	str	r0, [r4, #4]
 8012ac8:	4620      	mov	r0, r4
 8012aca:	f000 f81b 	bl	8012b04 <__sfp>
 8012ace:	60a0      	str	r0, [r4, #8]
 8012ad0:	4620      	mov	r0, r4
 8012ad2:	f000 f817 	bl	8012b04 <__sfp>
 8012ad6:	2200      	movs	r2, #0
 8012ad8:	60e0      	str	r0, [r4, #12]
 8012ada:	2104      	movs	r1, #4
 8012adc:	6860      	ldr	r0, [r4, #4]
 8012ade:	f7ff ffa1 	bl	8012a24 <std>
 8012ae2:	2201      	movs	r2, #1
 8012ae4:	2109      	movs	r1, #9
 8012ae6:	68a0      	ldr	r0, [r4, #8]
 8012ae8:	f7ff ff9c 	bl	8012a24 <std>
 8012aec:	2202      	movs	r2, #2
 8012aee:	2112      	movs	r1, #18
 8012af0:	68e0      	ldr	r0, [r4, #12]
 8012af2:	f7ff ff97 	bl	8012a24 <std>
 8012af6:	2301      	movs	r3, #1
 8012af8:	61a3      	str	r3, [r4, #24]
 8012afa:	bd10      	pop	{r4, pc}
 8012afc:	08013c50 	.word	0x08013c50
 8012b00:	08012a6d 	.word	0x08012a6d

08012b04 <__sfp>:
 8012b04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012b06:	4b1b      	ldr	r3, [pc, #108]	; (8012b74 <__sfp+0x70>)
 8012b08:	681e      	ldr	r6, [r3, #0]
 8012b0a:	69b3      	ldr	r3, [r6, #24]
 8012b0c:	4607      	mov	r7, r0
 8012b0e:	b913      	cbnz	r3, 8012b16 <__sfp+0x12>
 8012b10:	4630      	mov	r0, r6
 8012b12:	f7ff ffc7 	bl	8012aa4 <__sinit>
 8012b16:	3648      	adds	r6, #72	; 0x48
 8012b18:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8012b1c:	3b01      	subs	r3, #1
 8012b1e:	d503      	bpl.n	8012b28 <__sfp+0x24>
 8012b20:	6833      	ldr	r3, [r6, #0]
 8012b22:	b133      	cbz	r3, 8012b32 <__sfp+0x2e>
 8012b24:	6836      	ldr	r6, [r6, #0]
 8012b26:	e7f7      	b.n	8012b18 <__sfp+0x14>
 8012b28:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8012b2c:	b16d      	cbz	r5, 8012b4a <__sfp+0x46>
 8012b2e:	3468      	adds	r4, #104	; 0x68
 8012b30:	e7f4      	b.n	8012b1c <__sfp+0x18>
 8012b32:	2104      	movs	r1, #4
 8012b34:	4638      	mov	r0, r7
 8012b36:	f7ff ff9f 	bl	8012a78 <__sfmoreglue>
 8012b3a:	6030      	str	r0, [r6, #0]
 8012b3c:	2800      	cmp	r0, #0
 8012b3e:	d1f1      	bne.n	8012b24 <__sfp+0x20>
 8012b40:	230c      	movs	r3, #12
 8012b42:	603b      	str	r3, [r7, #0]
 8012b44:	4604      	mov	r4, r0
 8012b46:	4620      	mov	r0, r4
 8012b48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012b4a:	4b0b      	ldr	r3, [pc, #44]	; (8012b78 <__sfp+0x74>)
 8012b4c:	6665      	str	r5, [r4, #100]	; 0x64
 8012b4e:	e9c4 5500 	strd	r5, r5, [r4]
 8012b52:	60a5      	str	r5, [r4, #8]
 8012b54:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8012b58:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8012b5c:	2208      	movs	r2, #8
 8012b5e:	4629      	mov	r1, r5
 8012b60:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8012b64:	f7ff fcb4 	bl	80124d0 <memset>
 8012b68:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8012b6c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8012b70:	e7e9      	b.n	8012b46 <__sfp+0x42>
 8012b72:	bf00      	nop
 8012b74:	08013c50 	.word	0x08013c50
 8012b78:	ffff0001 	.word	0xffff0001

08012b7c <_fwalk_reent>:
 8012b7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012b80:	4680      	mov	r8, r0
 8012b82:	4689      	mov	r9, r1
 8012b84:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8012b88:	2600      	movs	r6, #0
 8012b8a:	b914      	cbnz	r4, 8012b92 <_fwalk_reent+0x16>
 8012b8c:	4630      	mov	r0, r6
 8012b8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012b92:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8012b96:	3f01      	subs	r7, #1
 8012b98:	d501      	bpl.n	8012b9e <_fwalk_reent+0x22>
 8012b9a:	6824      	ldr	r4, [r4, #0]
 8012b9c:	e7f5      	b.n	8012b8a <_fwalk_reent+0xe>
 8012b9e:	89ab      	ldrh	r3, [r5, #12]
 8012ba0:	2b01      	cmp	r3, #1
 8012ba2:	d907      	bls.n	8012bb4 <_fwalk_reent+0x38>
 8012ba4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8012ba8:	3301      	adds	r3, #1
 8012baa:	d003      	beq.n	8012bb4 <_fwalk_reent+0x38>
 8012bac:	4629      	mov	r1, r5
 8012bae:	4640      	mov	r0, r8
 8012bb0:	47c8      	blx	r9
 8012bb2:	4306      	orrs	r6, r0
 8012bb4:	3568      	adds	r5, #104	; 0x68
 8012bb6:	e7ee      	b.n	8012b96 <_fwalk_reent+0x1a>

08012bb8 <__swhatbuf_r>:
 8012bb8:	b570      	push	{r4, r5, r6, lr}
 8012bba:	460e      	mov	r6, r1
 8012bbc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012bc0:	2900      	cmp	r1, #0
 8012bc2:	b096      	sub	sp, #88	; 0x58
 8012bc4:	4614      	mov	r4, r2
 8012bc6:	461d      	mov	r5, r3
 8012bc8:	da07      	bge.n	8012bda <__swhatbuf_r+0x22>
 8012bca:	2300      	movs	r3, #0
 8012bcc:	602b      	str	r3, [r5, #0]
 8012bce:	89b3      	ldrh	r3, [r6, #12]
 8012bd0:	061a      	lsls	r2, r3, #24
 8012bd2:	d410      	bmi.n	8012bf6 <__swhatbuf_r+0x3e>
 8012bd4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012bd8:	e00e      	b.n	8012bf8 <__swhatbuf_r+0x40>
 8012bda:	466a      	mov	r2, sp
 8012bdc:	f000 fc3e 	bl	801345c <_fstat_r>
 8012be0:	2800      	cmp	r0, #0
 8012be2:	dbf2      	blt.n	8012bca <__swhatbuf_r+0x12>
 8012be4:	9a01      	ldr	r2, [sp, #4]
 8012be6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8012bea:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8012bee:	425a      	negs	r2, r3
 8012bf0:	415a      	adcs	r2, r3
 8012bf2:	602a      	str	r2, [r5, #0]
 8012bf4:	e7ee      	b.n	8012bd4 <__swhatbuf_r+0x1c>
 8012bf6:	2340      	movs	r3, #64	; 0x40
 8012bf8:	2000      	movs	r0, #0
 8012bfa:	6023      	str	r3, [r4, #0]
 8012bfc:	b016      	add	sp, #88	; 0x58
 8012bfe:	bd70      	pop	{r4, r5, r6, pc}

08012c00 <__smakebuf_r>:
 8012c00:	898b      	ldrh	r3, [r1, #12]
 8012c02:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8012c04:	079d      	lsls	r5, r3, #30
 8012c06:	4606      	mov	r6, r0
 8012c08:	460c      	mov	r4, r1
 8012c0a:	d507      	bpl.n	8012c1c <__smakebuf_r+0x1c>
 8012c0c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8012c10:	6023      	str	r3, [r4, #0]
 8012c12:	6123      	str	r3, [r4, #16]
 8012c14:	2301      	movs	r3, #1
 8012c16:	6163      	str	r3, [r4, #20]
 8012c18:	b002      	add	sp, #8
 8012c1a:	bd70      	pop	{r4, r5, r6, pc}
 8012c1c:	ab01      	add	r3, sp, #4
 8012c1e:	466a      	mov	r2, sp
 8012c20:	f7ff ffca 	bl	8012bb8 <__swhatbuf_r>
 8012c24:	9900      	ldr	r1, [sp, #0]
 8012c26:	4605      	mov	r5, r0
 8012c28:	4630      	mov	r0, r6
 8012c2a:	f000 f87f 	bl	8012d2c <_malloc_r>
 8012c2e:	b948      	cbnz	r0, 8012c44 <__smakebuf_r+0x44>
 8012c30:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012c34:	059a      	lsls	r2, r3, #22
 8012c36:	d4ef      	bmi.n	8012c18 <__smakebuf_r+0x18>
 8012c38:	f023 0303 	bic.w	r3, r3, #3
 8012c3c:	f043 0302 	orr.w	r3, r3, #2
 8012c40:	81a3      	strh	r3, [r4, #12]
 8012c42:	e7e3      	b.n	8012c0c <__smakebuf_r+0xc>
 8012c44:	4b0d      	ldr	r3, [pc, #52]	; (8012c7c <__smakebuf_r+0x7c>)
 8012c46:	62b3      	str	r3, [r6, #40]	; 0x28
 8012c48:	89a3      	ldrh	r3, [r4, #12]
 8012c4a:	6020      	str	r0, [r4, #0]
 8012c4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012c50:	81a3      	strh	r3, [r4, #12]
 8012c52:	9b00      	ldr	r3, [sp, #0]
 8012c54:	6163      	str	r3, [r4, #20]
 8012c56:	9b01      	ldr	r3, [sp, #4]
 8012c58:	6120      	str	r0, [r4, #16]
 8012c5a:	b15b      	cbz	r3, 8012c74 <__smakebuf_r+0x74>
 8012c5c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012c60:	4630      	mov	r0, r6
 8012c62:	f000 fc0d 	bl	8013480 <_isatty_r>
 8012c66:	b128      	cbz	r0, 8012c74 <__smakebuf_r+0x74>
 8012c68:	89a3      	ldrh	r3, [r4, #12]
 8012c6a:	f023 0303 	bic.w	r3, r3, #3
 8012c6e:	f043 0301 	orr.w	r3, r3, #1
 8012c72:	81a3      	strh	r3, [r4, #12]
 8012c74:	89a3      	ldrh	r3, [r4, #12]
 8012c76:	431d      	orrs	r5, r3
 8012c78:	81a5      	strh	r5, [r4, #12]
 8012c7a:	e7cd      	b.n	8012c18 <__smakebuf_r+0x18>
 8012c7c:	08012a6d 	.word	0x08012a6d

08012c80 <malloc>:
 8012c80:	4b02      	ldr	r3, [pc, #8]	; (8012c8c <malloc+0xc>)
 8012c82:	4601      	mov	r1, r0
 8012c84:	6818      	ldr	r0, [r3, #0]
 8012c86:	f000 b851 	b.w	8012d2c <_malloc_r>
 8012c8a:	bf00      	nop
 8012c8c:	20000084 	.word	0x20000084

08012c90 <_free_r>:
 8012c90:	b538      	push	{r3, r4, r5, lr}
 8012c92:	4605      	mov	r5, r0
 8012c94:	2900      	cmp	r1, #0
 8012c96:	d045      	beq.n	8012d24 <_free_r+0x94>
 8012c98:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012c9c:	1f0c      	subs	r4, r1, #4
 8012c9e:	2b00      	cmp	r3, #0
 8012ca0:	bfb8      	it	lt
 8012ca2:	18e4      	addlt	r4, r4, r3
 8012ca4:	f000 fc0e 	bl	80134c4 <__malloc_lock>
 8012ca8:	4a1f      	ldr	r2, [pc, #124]	; (8012d28 <_free_r+0x98>)
 8012caa:	6813      	ldr	r3, [r2, #0]
 8012cac:	4610      	mov	r0, r2
 8012cae:	b933      	cbnz	r3, 8012cbe <_free_r+0x2e>
 8012cb0:	6063      	str	r3, [r4, #4]
 8012cb2:	6014      	str	r4, [r2, #0]
 8012cb4:	4628      	mov	r0, r5
 8012cb6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012cba:	f000 bc04 	b.w	80134c6 <__malloc_unlock>
 8012cbe:	42a3      	cmp	r3, r4
 8012cc0:	d90c      	bls.n	8012cdc <_free_r+0x4c>
 8012cc2:	6821      	ldr	r1, [r4, #0]
 8012cc4:	1862      	adds	r2, r4, r1
 8012cc6:	4293      	cmp	r3, r2
 8012cc8:	bf04      	itt	eq
 8012cca:	681a      	ldreq	r2, [r3, #0]
 8012ccc:	685b      	ldreq	r3, [r3, #4]
 8012cce:	6063      	str	r3, [r4, #4]
 8012cd0:	bf04      	itt	eq
 8012cd2:	1852      	addeq	r2, r2, r1
 8012cd4:	6022      	streq	r2, [r4, #0]
 8012cd6:	6004      	str	r4, [r0, #0]
 8012cd8:	e7ec      	b.n	8012cb4 <_free_r+0x24>
 8012cda:	4613      	mov	r3, r2
 8012cdc:	685a      	ldr	r2, [r3, #4]
 8012cde:	b10a      	cbz	r2, 8012ce4 <_free_r+0x54>
 8012ce0:	42a2      	cmp	r2, r4
 8012ce2:	d9fa      	bls.n	8012cda <_free_r+0x4a>
 8012ce4:	6819      	ldr	r1, [r3, #0]
 8012ce6:	1858      	adds	r0, r3, r1
 8012ce8:	42a0      	cmp	r0, r4
 8012cea:	d10b      	bne.n	8012d04 <_free_r+0x74>
 8012cec:	6820      	ldr	r0, [r4, #0]
 8012cee:	4401      	add	r1, r0
 8012cf0:	1858      	adds	r0, r3, r1
 8012cf2:	4282      	cmp	r2, r0
 8012cf4:	6019      	str	r1, [r3, #0]
 8012cf6:	d1dd      	bne.n	8012cb4 <_free_r+0x24>
 8012cf8:	6810      	ldr	r0, [r2, #0]
 8012cfa:	6852      	ldr	r2, [r2, #4]
 8012cfc:	605a      	str	r2, [r3, #4]
 8012cfe:	4401      	add	r1, r0
 8012d00:	6019      	str	r1, [r3, #0]
 8012d02:	e7d7      	b.n	8012cb4 <_free_r+0x24>
 8012d04:	d902      	bls.n	8012d0c <_free_r+0x7c>
 8012d06:	230c      	movs	r3, #12
 8012d08:	602b      	str	r3, [r5, #0]
 8012d0a:	e7d3      	b.n	8012cb4 <_free_r+0x24>
 8012d0c:	6820      	ldr	r0, [r4, #0]
 8012d0e:	1821      	adds	r1, r4, r0
 8012d10:	428a      	cmp	r2, r1
 8012d12:	bf04      	itt	eq
 8012d14:	6811      	ldreq	r1, [r2, #0]
 8012d16:	6852      	ldreq	r2, [r2, #4]
 8012d18:	6062      	str	r2, [r4, #4]
 8012d1a:	bf04      	itt	eq
 8012d1c:	1809      	addeq	r1, r1, r0
 8012d1e:	6021      	streq	r1, [r4, #0]
 8012d20:	605c      	str	r4, [r3, #4]
 8012d22:	e7c7      	b.n	8012cb4 <_free_r+0x24>
 8012d24:	bd38      	pop	{r3, r4, r5, pc}
 8012d26:	bf00      	nop
 8012d28:	20000118 	.word	0x20000118

08012d2c <_malloc_r>:
 8012d2c:	b570      	push	{r4, r5, r6, lr}
 8012d2e:	1ccd      	adds	r5, r1, #3
 8012d30:	f025 0503 	bic.w	r5, r5, #3
 8012d34:	3508      	adds	r5, #8
 8012d36:	2d0c      	cmp	r5, #12
 8012d38:	bf38      	it	cc
 8012d3a:	250c      	movcc	r5, #12
 8012d3c:	2d00      	cmp	r5, #0
 8012d3e:	4606      	mov	r6, r0
 8012d40:	db01      	blt.n	8012d46 <_malloc_r+0x1a>
 8012d42:	42a9      	cmp	r1, r5
 8012d44:	d903      	bls.n	8012d4e <_malloc_r+0x22>
 8012d46:	230c      	movs	r3, #12
 8012d48:	6033      	str	r3, [r6, #0]
 8012d4a:	2000      	movs	r0, #0
 8012d4c:	bd70      	pop	{r4, r5, r6, pc}
 8012d4e:	f000 fbb9 	bl	80134c4 <__malloc_lock>
 8012d52:	4a21      	ldr	r2, [pc, #132]	; (8012dd8 <_malloc_r+0xac>)
 8012d54:	6814      	ldr	r4, [r2, #0]
 8012d56:	4621      	mov	r1, r4
 8012d58:	b991      	cbnz	r1, 8012d80 <_malloc_r+0x54>
 8012d5a:	4c20      	ldr	r4, [pc, #128]	; (8012ddc <_malloc_r+0xb0>)
 8012d5c:	6823      	ldr	r3, [r4, #0]
 8012d5e:	b91b      	cbnz	r3, 8012d68 <_malloc_r+0x3c>
 8012d60:	4630      	mov	r0, r6
 8012d62:	f000 fb05 	bl	8013370 <_sbrk_r>
 8012d66:	6020      	str	r0, [r4, #0]
 8012d68:	4629      	mov	r1, r5
 8012d6a:	4630      	mov	r0, r6
 8012d6c:	f000 fb00 	bl	8013370 <_sbrk_r>
 8012d70:	1c43      	adds	r3, r0, #1
 8012d72:	d124      	bne.n	8012dbe <_malloc_r+0x92>
 8012d74:	230c      	movs	r3, #12
 8012d76:	6033      	str	r3, [r6, #0]
 8012d78:	4630      	mov	r0, r6
 8012d7a:	f000 fba4 	bl	80134c6 <__malloc_unlock>
 8012d7e:	e7e4      	b.n	8012d4a <_malloc_r+0x1e>
 8012d80:	680b      	ldr	r3, [r1, #0]
 8012d82:	1b5b      	subs	r3, r3, r5
 8012d84:	d418      	bmi.n	8012db8 <_malloc_r+0x8c>
 8012d86:	2b0b      	cmp	r3, #11
 8012d88:	d90f      	bls.n	8012daa <_malloc_r+0x7e>
 8012d8a:	600b      	str	r3, [r1, #0]
 8012d8c:	50cd      	str	r5, [r1, r3]
 8012d8e:	18cc      	adds	r4, r1, r3
 8012d90:	4630      	mov	r0, r6
 8012d92:	f000 fb98 	bl	80134c6 <__malloc_unlock>
 8012d96:	f104 000b 	add.w	r0, r4, #11
 8012d9a:	1d23      	adds	r3, r4, #4
 8012d9c:	f020 0007 	bic.w	r0, r0, #7
 8012da0:	1ac3      	subs	r3, r0, r3
 8012da2:	d0d3      	beq.n	8012d4c <_malloc_r+0x20>
 8012da4:	425a      	negs	r2, r3
 8012da6:	50e2      	str	r2, [r4, r3]
 8012da8:	e7d0      	b.n	8012d4c <_malloc_r+0x20>
 8012daa:	428c      	cmp	r4, r1
 8012dac:	684b      	ldr	r3, [r1, #4]
 8012dae:	bf16      	itet	ne
 8012db0:	6063      	strne	r3, [r4, #4]
 8012db2:	6013      	streq	r3, [r2, #0]
 8012db4:	460c      	movne	r4, r1
 8012db6:	e7eb      	b.n	8012d90 <_malloc_r+0x64>
 8012db8:	460c      	mov	r4, r1
 8012dba:	6849      	ldr	r1, [r1, #4]
 8012dbc:	e7cc      	b.n	8012d58 <_malloc_r+0x2c>
 8012dbe:	1cc4      	adds	r4, r0, #3
 8012dc0:	f024 0403 	bic.w	r4, r4, #3
 8012dc4:	42a0      	cmp	r0, r4
 8012dc6:	d005      	beq.n	8012dd4 <_malloc_r+0xa8>
 8012dc8:	1a21      	subs	r1, r4, r0
 8012dca:	4630      	mov	r0, r6
 8012dcc:	f000 fad0 	bl	8013370 <_sbrk_r>
 8012dd0:	3001      	adds	r0, #1
 8012dd2:	d0cf      	beq.n	8012d74 <_malloc_r+0x48>
 8012dd4:	6025      	str	r5, [r4, #0]
 8012dd6:	e7db      	b.n	8012d90 <_malloc_r+0x64>
 8012dd8:	20000118 	.word	0x20000118
 8012ddc:	2000011c 	.word	0x2000011c

08012de0 <__sfputc_r>:
 8012de0:	6893      	ldr	r3, [r2, #8]
 8012de2:	3b01      	subs	r3, #1
 8012de4:	2b00      	cmp	r3, #0
 8012de6:	b410      	push	{r4}
 8012de8:	6093      	str	r3, [r2, #8]
 8012dea:	da08      	bge.n	8012dfe <__sfputc_r+0x1e>
 8012dec:	6994      	ldr	r4, [r2, #24]
 8012dee:	42a3      	cmp	r3, r4
 8012df0:	db01      	blt.n	8012df6 <__sfputc_r+0x16>
 8012df2:	290a      	cmp	r1, #10
 8012df4:	d103      	bne.n	8012dfe <__sfputc_r+0x1e>
 8012df6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012dfa:	f7ff bca3 	b.w	8012744 <__swbuf_r>
 8012dfe:	6813      	ldr	r3, [r2, #0]
 8012e00:	1c58      	adds	r0, r3, #1
 8012e02:	6010      	str	r0, [r2, #0]
 8012e04:	7019      	strb	r1, [r3, #0]
 8012e06:	4608      	mov	r0, r1
 8012e08:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012e0c:	4770      	bx	lr

08012e0e <__sfputs_r>:
 8012e0e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012e10:	4606      	mov	r6, r0
 8012e12:	460f      	mov	r7, r1
 8012e14:	4614      	mov	r4, r2
 8012e16:	18d5      	adds	r5, r2, r3
 8012e18:	42ac      	cmp	r4, r5
 8012e1a:	d101      	bne.n	8012e20 <__sfputs_r+0x12>
 8012e1c:	2000      	movs	r0, #0
 8012e1e:	e007      	b.n	8012e30 <__sfputs_r+0x22>
 8012e20:	463a      	mov	r2, r7
 8012e22:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012e26:	4630      	mov	r0, r6
 8012e28:	f7ff ffda 	bl	8012de0 <__sfputc_r>
 8012e2c:	1c43      	adds	r3, r0, #1
 8012e2e:	d1f3      	bne.n	8012e18 <__sfputs_r+0xa>
 8012e30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08012e34 <_vfiprintf_r>:
 8012e34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012e38:	460c      	mov	r4, r1
 8012e3a:	b09d      	sub	sp, #116	; 0x74
 8012e3c:	4617      	mov	r7, r2
 8012e3e:	461d      	mov	r5, r3
 8012e40:	4606      	mov	r6, r0
 8012e42:	b118      	cbz	r0, 8012e4c <_vfiprintf_r+0x18>
 8012e44:	6983      	ldr	r3, [r0, #24]
 8012e46:	b90b      	cbnz	r3, 8012e4c <_vfiprintf_r+0x18>
 8012e48:	f7ff fe2c 	bl	8012aa4 <__sinit>
 8012e4c:	4b7c      	ldr	r3, [pc, #496]	; (8013040 <_vfiprintf_r+0x20c>)
 8012e4e:	429c      	cmp	r4, r3
 8012e50:	d158      	bne.n	8012f04 <_vfiprintf_r+0xd0>
 8012e52:	6874      	ldr	r4, [r6, #4]
 8012e54:	89a3      	ldrh	r3, [r4, #12]
 8012e56:	0718      	lsls	r0, r3, #28
 8012e58:	d55e      	bpl.n	8012f18 <_vfiprintf_r+0xe4>
 8012e5a:	6923      	ldr	r3, [r4, #16]
 8012e5c:	2b00      	cmp	r3, #0
 8012e5e:	d05b      	beq.n	8012f18 <_vfiprintf_r+0xe4>
 8012e60:	2300      	movs	r3, #0
 8012e62:	9309      	str	r3, [sp, #36]	; 0x24
 8012e64:	2320      	movs	r3, #32
 8012e66:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8012e6a:	2330      	movs	r3, #48	; 0x30
 8012e6c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8012e70:	9503      	str	r5, [sp, #12]
 8012e72:	f04f 0b01 	mov.w	fp, #1
 8012e76:	46b8      	mov	r8, r7
 8012e78:	4645      	mov	r5, r8
 8012e7a:	f815 3b01 	ldrb.w	r3, [r5], #1
 8012e7e:	b10b      	cbz	r3, 8012e84 <_vfiprintf_r+0x50>
 8012e80:	2b25      	cmp	r3, #37	; 0x25
 8012e82:	d154      	bne.n	8012f2e <_vfiprintf_r+0xfa>
 8012e84:	ebb8 0a07 	subs.w	sl, r8, r7
 8012e88:	d00b      	beq.n	8012ea2 <_vfiprintf_r+0x6e>
 8012e8a:	4653      	mov	r3, sl
 8012e8c:	463a      	mov	r2, r7
 8012e8e:	4621      	mov	r1, r4
 8012e90:	4630      	mov	r0, r6
 8012e92:	f7ff ffbc 	bl	8012e0e <__sfputs_r>
 8012e96:	3001      	adds	r0, #1
 8012e98:	f000 80c2 	beq.w	8013020 <_vfiprintf_r+0x1ec>
 8012e9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012e9e:	4453      	add	r3, sl
 8012ea0:	9309      	str	r3, [sp, #36]	; 0x24
 8012ea2:	f898 3000 	ldrb.w	r3, [r8]
 8012ea6:	2b00      	cmp	r3, #0
 8012ea8:	f000 80ba 	beq.w	8013020 <_vfiprintf_r+0x1ec>
 8012eac:	2300      	movs	r3, #0
 8012eae:	f04f 32ff 	mov.w	r2, #4294967295
 8012eb2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012eb6:	9304      	str	r3, [sp, #16]
 8012eb8:	9307      	str	r3, [sp, #28]
 8012eba:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8012ebe:	931a      	str	r3, [sp, #104]	; 0x68
 8012ec0:	46a8      	mov	r8, r5
 8012ec2:	2205      	movs	r2, #5
 8012ec4:	f818 1b01 	ldrb.w	r1, [r8], #1
 8012ec8:	485e      	ldr	r0, [pc, #376]	; (8013044 <_vfiprintf_r+0x210>)
 8012eca:	f7ed f981 	bl	80001d0 <memchr>
 8012ece:	9b04      	ldr	r3, [sp, #16]
 8012ed0:	bb78      	cbnz	r0, 8012f32 <_vfiprintf_r+0xfe>
 8012ed2:	06d9      	lsls	r1, r3, #27
 8012ed4:	bf44      	itt	mi
 8012ed6:	2220      	movmi	r2, #32
 8012ed8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8012edc:	071a      	lsls	r2, r3, #28
 8012ede:	bf44      	itt	mi
 8012ee0:	222b      	movmi	r2, #43	; 0x2b
 8012ee2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8012ee6:	782a      	ldrb	r2, [r5, #0]
 8012ee8:	2a2a      	cmp	r2, #42	; 0x2a
 8012eea:	d02a      	beq.n	8012f42 <_vfiprintf_r+0x10e>
 8012eec:	9a07      	ldr	r2, [sp, #28]
 8012eee:	46a8      	mov	r8, r5
 8012ef0:	2000      	movs	r0, #0
 8012ef2:	250a      	movs	r5, #10
 8012ef4:	4641      	mov	r1, r8
 8012ef6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012efa:	3b30      	subs	r3, #48	; 0x30
 8012efc:	2b09      	cmp	r3, #9
 8012efe:	d969      	bls.n	8012fd4 <_vfiprintf_r+0x1a0>
 8012f00:	b360      	cbz	r0, 8012f5c <_vfiprintf_r+0x128>
 8012f02:	e024      	b.n	8012f4e <_vfiprintf_r+0x11a>
 8012f04:	4b50      	ldr	r3, [pc, #320]	; (8013048 <_vfiprintf_r+0x214>)
 8012f06:	429c      	cmp	r4, r3
 8012f08:	d101      	bne.n	8012f0e <_vfiprintf_r+0xda>
 8012f0a:	68b4      	ldr	r4, [r6, #8]
 8012f0c:	e7a2      	b.n	8012e54 <_vfiprintf_r+0x20>
 8012f0e:	4b4f      	ldr	r3, [pc, #316]	; (801304c <_vfiprintf_r+0x218>)
 8012f10:	429c      	cmp	r4, r3
 8012f12:	bf08      	it	eq
 8012f14:	68f4      	ldreq	r4, [r6, #12]
 8012f16:	e79d      	b.n	8012e54 <_vfiprintf_r+0x20>
 8012f18:	4621      	mov	r1, r4
 8012f1a:	4630      	mov	r0, r6
 8012f1c:	f7ff fc64 	bl	80127e8 <__swsetup_r>
 8012f20:	2800      	cmp	r0, #0
 8012f22:	d09d      	beq.n	8012e60 <_vfiprintf_r+0x2c>
 8012f24:	f04f 30ff 	mov.w	r0, #4294967295
 8012f28:	b01d      	add	sp, #116	; 0x74
 8012f2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012f2e:	46a8      	mov	r8, r5
 8012f30:	e7a2      	b.n	8012e78 <_vfiprintf_r+0x44>
 8012f32:	4a44      	ldr	r2, [pc, #272]	; (8013044 <_vfiprintf_r+0x210>)
 8012f34:	1a80      	subs	r0, r0, r2
 8012f36:	fa0b f000 	lsl.w	r0, fp, r0
 8012f3a:	4318      	orrs	r0, r3
 8012f3c:	9004      	str	r0, [sp, #16]
 8012f3e:	4645      	mov	r5, r8
 8012f40:	e7be      	b.n	8012ec0 <_vfiprintf_r+0x8c>
 8012f42:	9a03      	ldr	r2, [sp, #12]
 8012f44:	1d11      	adds	r1, r2, #4
 8012f46:	6812      	ldr	r2, [r2, #0]
 8012f48:	9103      	str	r1, [sp, #12]
 8012f4a:	2a00      	cmp	r2, #0
 8012f4c:	db01      	blt.n	8012f52 <_vfiprintf_r+0x11e>
 8012f4e:	9207      	str	r2, [sp, #28]
 8012f50:	e004      	b.n	8012f5c <_vfiprintf_r+0x128>
 8012f52:	4252      	negs	r2, r2
 8012f54:	f043 0302 	orr.w	r3, r3, #2
 8012f58:	9207      	str	r2, [sp, #28]
 8012f5a:	9304      	str	r3, [sp, #16]
 8012f5c:	f898 3000 	ldrb.w	r3, [r8]
 8012f60:	2b2e      	cmp	r3, #46	; 0x2e
 8012f62:	d10e      	bne.n	8012f82 <_vfiprintf_r+0x14e>
 8012f64:	f898 3001 	ldrb.w	r3, [r8, #1]
 8012f68:	2b2a      	cmp	r3, #42	; 0x2a
 8012f6a:	d138      	bne.n	8012fde <_vfiprintf_r+0x1aa>
 8012f6c:	9b03      	ldr	r3, [sp, #12]
 8012f6e:	1d1a      	adds	r2, r3, #4
 8012f70:	681b      	ldr	r3, [r3, #0]
 8012f72:	9203      	str	r2, [sp, #12]
 8012f74:	2b00      	cmp	r3, #0
 8012f76:	bfb8      	it	lt
 8012f78:	f04f 33ff 	movlt.w	r3, #4294967295
 8012f7c:	f108 0802 	add.w	r8, r8, #2
 8012f80:	9305      	str	r3, [sp, #20]
 8012f82:	4d33      	ldr	r5, [pc, #204]	; (8013050 <_vfiprintf_r+0x21c>)
 8012f84:	f898 1000 	ldrb.w	r1, [r8]
 8012f88:	2203      	movs	r2, #3
 8012f8a:	4628      	mov	r0, r5
 8012f8c:	f7ed f920 	bl	80001d0 <memchr>
 8012f90:	b140      	cbz	r0, 8012fa4 <_vfiprintf_r+0x170>
 8012f92:	2340      	movs	r3, #64	; 0x40
 8012f94:	1b40      	subs	r0, r0, r5
 8012f96:	fa03 f000 	lsl.w	r0, r3, r0
 8012f9a:	9b04      	ldr	r3, [sp, #16]
 8012f9c:	4303      	orrs	r3, r0
 8012f9e:	f108 0801 	add.w	r8, r8, #1
 8012fa2:	9304      	str	r3, [sp, #16]
 8012fa4:	f898 1000 	ldrb.w	r1, [r8]
 8012fa8:	482a      	ldr	r0, [pc, #168]	; (8013054 <_vfiprintf_r+0x220>)
 8012faa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8012fae:	2206      	movs	r2, #6
 8012fb0:	f108 0701 	add.w	r7, r8, #1
 8012fb4:	f7ed f90c 	bl	80001d0 <memchr>
 8012fb8:	2800      	cmp	r0, #0
 8012fba:	d037      	beq.n	801302c <_vfiprintf_r+0x1f8>
 8012fbc:	4b26      	ldr	r3, [pc, #152]	; (8013058 <_vfiprintf_r+0x224>)
 8012fbe:	bb1b      	cbnz	r3, 8013008 <_vfiprintf_r+0x1d4>
 8012fc0:	9b03      	ldr	r3, [sp, #12]
 8012fc2:	3307      	adds	r3, #7
 8012fc4:	f023 0307 	bic.w	r3, r3, #7
 8012fc8:	3308      	adds	r3, #8
 8012fca:	9303      	str	r3, [sp, #12]
 8012fcc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012fce:	444b      	add	r3, r9
 8012fd0:	9309      	str	r3, [sp, #36]	; 0x24
 8012fd2:	e750      	b.n	8012e76 <_vfiprintf_r+0x42>
 8012fd4:	fb05 3202 	mla	r2, r5, r2, r3
 8012fd8:	2001      	movs	r0, #1
 8012fda:	4688      	mov	r8, r1
 8012fdc:	e78a      	b.n	8012ef4 <_vfiprintf_r+0xc0>
 8012fde:	2300      	movs	r3, #0
 8012fe0:	f108 0801 	add.w	r8, r8, #1
 8012fe4:	9305      	str	r3, [sp, #20]
 8012fe6:	4619      	mov	r1, r3
 8012fe8:	250a      	movs	r5, #10
 8012fea:	4640      	mov	r0, r8
 8012fec:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012ff0:	3a30      	subs	r2, #48	; 0x30
 8012ff2:	2a09      	cmp	r2, #9
 8012ff4:	d903      	bls.n	8012ffe <_vfiprintf_r+0x1ca>
 8012ff6:	2b00      	cmp	r3, #0
 8012ff8:	d0c3      	beq.n	8012f82 <_vfiprintf_r+0x14e>
 8012ffa:	9105      	str	r1, [sp, #20]
 8012ffc:	e7c1      	b.n	8012f82 <_vfiprintf_r+0x14e>
 8012ffe:	fb05 2101 	mla	r1, r5, r1, r2
 8013002:	2301      	movs	r3, #1
 8013004:	4680      	mov	r8, r0
 8013006:	e7f0      	b.n	8012fea <_vfiprintf_r+0x1b6>
 8013008:	ab03      	add	r3, sp, #12
 801300a:	9300      	str	r3, [sp, #0]
 801300c:	4622      	mov	r2, r4
 801300e:	4b13      	ldr	r3, [pc, #76]	; (801305c <_vfiprintf_r+0x228>)
 8013010:	a904      	add	r1, sp, #16
 8013012:	4630      	mov	r0, r6
 8013014:	f3af 8000 	nop.w
 8013018:	f1b0 3fff 	cmp.w	r0, #4294967295
 801301c:	4681      	mov	r9, r0
 801301e:	d1d5      	bne.n	8012fcc <_vfiprintf_r+0x198>
 8013020:	89a3      	ldrh	r3, [r4, #12]
 8013022:	065b      	lsls	r3, r3, #25
 8013024:	f53f af7e 	bmi.w	8012f24 <_vfiprintf_r+0xf0>
 8013028:	9809      	ldr	r0, [sp, #36]	; 0x24
 801302a:	e77d      	b.n	8012f28 <_vfiprintf_r+0xf4>
 801302c:	ab03      	add	r3, sp, #12
 801302e:	9300      	str	r3, [sp, #0]
 8013030:	4622      	mov	r2, r4
 8013032:	4b0a      	ldr	r3, [pc, #40]	; (801305c <_vfiprintf_r+0x228>)
 8013034:	a904      	add	r1, sp, #16
 8013036:	4630      	mov	r0, r6
 8013038:	f000 f888 	bl	801314c <_printf_i>
 801303c:	e7ec      	b.n	8013018 <_vfiprintf_r+0x1e4>
 801303e:	bf00      	nop
 8013040:	08013c74 	.word	0x08013c74
 8013044:	08013cb4 	.word	0x08013cb4
 8013048:	08013c94 	.word	0x08013c94
 801304c:	08013c54 	.word	0x08013c54
 8013050:	08013cba 	.word	0x08013cba
 8013054:	08013cbe 	.word	0x08013cbe
 8013058:	00000000 	.word	0x00000000
 801305c:	08012e0f 	.word	0x08012e0f

08013060 <_printf_common>:
 8013060:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013064:	4691      	mov	r9, r2
 8013066:	461f      	mov	r7, r3
 8013068:	688a      	ldr	r2, [r1, #8]
 801306a:	690b      	ldr	r3, [r1, #16]
 801306c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8013070:	4293      	cmp	r3, r2
 8013072:	bfb8      	it	lt
 8013074:	4613      	movlt	r3, r2
 8013076:	f8c9 3000 	str.w	r3, [r9]
 801307a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801307e:	4606      	mov	r6, r0
 8013080:	460c      	mov	r4, r1
 8013082:	b112      	cbz	r2, 801308a <_printf_common+0x2a>
 8013084:	3301      	adds	r3, #1
 8013086:	f8c9 3000 	str.w	r3, [r9]
 801308a:	6823      	ldr	r3, [r4, #0]
 801308c:	0699      	lsls	r1, r3, #26
 801308e:	bf42      	ittt	mi
 8013090:	f8d9 3000 	ldrmi.w	r3, [r9]
 8013094:	3302      	addmi	r3, #2
 8013096:	f8c9 3000 	strmi.w	r3, [r9]
 801309a:	6825      	ldr	r5, [r4, #0]
 801309c:	f015 0506 	ands.w	r5, r5, #6
 80130a0:	d107      	bne.n	80130b2 <_printf_common+0x52>
 80130a2:	f104 0a19 	add.w	sl, r4, #25
 80130a6:	68e3      	ldr	r3, [r4, #12]
 80130a8:	f8d9 2000 	ldr.w	r2, [r9]
 80130ac:	1a9b      	subs	r3, r3, r2
 80130ae:	42ab      	cmp	r3, r5
 80130b0:	dc28      	bgt.n	8013104 <_printf_common+0xa4>
 80130b2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80130b6:	6822      	ldr	r2, [r4, #0]
 80130b8:	3300      	adds	r3, #0
 80130ba:	bf18      	it	ne
 80130bc:	2301      	movne	r3, #1
 80130be:	0692      	lsls	r2, r2, #26
 80130c0:	d42d      	bmi.n	801311e <_printf_common+0xbe>
 80130c2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80130c6:	4639      	mov	r1, r7
 80130c8:	4630      	mov	r0, r6
 80130ca:	47c0      	blx	r8
 80130cc:	3001      	adds	r0, #1
 80130ce:	d020      	beq.n	8013112 <_printf_common+0xb2>
 80130d0:	6823      	ldr	r3, [r4, #0]
 80130d2:	68e5      	ldr	r5, [r4, #12]
 80130d4:	f8d9 2000 	ldr.w	r2, [r9]
 80130d8:	f003 0306 	and.w	r3, r3, #6
 80130dc:	2b04      	cmp	r3, #4
 80130de:	bf08      	it	eq
 80130e0:	1aad      	subeq	r5, r5, r2
 80130e2:	68a3      	ldr	r3, [r4, #8]
 80130e4:	6922      	ldr	r2, [r4, #16]
 80130e6:	bf0c      	ite	eq
 80130e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80130ec:	2500      	movne	r5, #0
 80130ee:	4293      	cmp	r3, r2
 80130f0:	bfc4      	itt	gt
 80130f2:	1a9b      	subgt	r3, r3, r2
 80130f4:	18ed      	addgt	r5, r5, r3
 80130f6:	f04f 0900 	mov.w	r9, #0
 80130fa:	341a      	adds	r4, #26
 80130fc:	454d      	cmp	r5, r9
 80130fe:	d11a      	bne.n	8013136 <_printf_common+0xd6>
 8013100:	2000      	movs	r0, #0
 8013102:	e008      	b.n	8013116 <_printf_common+0xb6>
 8013104:	2301      	movs	r3, #1
 8013106:	4652      	mov	r2, sl
 8013108:	4639      	mov	r1, r7
 801310a:	4630      	mov	r0, r6
 801310c:	47c0      	blx	r8
 801310e:	3001      	adds	r0, #1
 8013110:	d103      	bne.n	801311a <_printf_common+0xba>
 8013112:	f04f 30ff 	mov.w	r0, #4294967295
 8013116:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801311a:	3501      	adds	r5, #1
 801311c:	e7c3      	b.n	80130a6 <_printf_common+0x46>
 801311e:	18e1      	adds	r1, r4, r3
 8013120:	1c5a      	adds	r2, r3, #1
 8013122:	2030      	movs	r0, #48	; 0x30
 8013124:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8013128:	4422      	add	r2, r4
 801312a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801312e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8013132:	3302      	adds	r3, #2
 8013134:	e7c5      	b.n	80130c2 <_printf_common+0x62>
 8013136:	2301      	movs	r3, #1
 8013138:	4622      	mov	r2, r4
 801313a:	4639      	mov	r1, r7
 801313c:	4630      	mov	r0, r6
 801313e:	47c0      	blx	r8
 8013140:	3001      	adds	r0, #1
 8013142:	d0e6      	beq.n	8013112 <_printf_common+0xb2>
 8013144:	f109 0901 	add.w	r9, r9, #1
 8013148:	e7d8      	b.n	80130fc <_printf_common+0x9c>
	...

0801314c <_printf_i>:
 801314c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013150:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8013154:	460c      	mov	r4, r1
 8013156:	7e09      	ldrb	r1, [r1, #24]
 8013158:	b085      	sub	sp, #20
 801315a:	296e      	cmp	r1, #110	; 0x6e
 801315c:	4617      	mov	r7, r2
 801315e:	4606      	mov	r6, r0
 8013160:	4698      	mov	r8, r3
 8013162:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8013164:	f000 80b3 	beq.w	80132ce <_printf_i+0x182>
 8013168:	d822      	bhi.n	80131b0 <_printf_i+0x64>
 801316a:	2963      	cmp	r1, #99	; 0x63
 801316c:	d036      	beq.n	80131dc <_printf_i+0x90>
 801316e:	d80a      	bhi.n	8013186 <_printf_i+0x3a>
 8013170:	2900      	cmp	r1, #0
 8013172:	f000 80b9 	beq.w	80132e8 <_printf_i+0x19c>
 8013176:	2958      	cmp	r1, #88	; 0x58
 8013178:	f000 8083 	beq.w	8013282 <_printf_i+0x136>
 801317c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8013180:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8013184:	e032      	b.n	80131ec <_printf_i+0xa0>
 8013186:	2964      	cmp	r1, #100	; 0x64
 8013188:	d001      	beq.n	801318e <_printf_i+0x42>
 801318a:	2969      	cmp	r1, #105	; 0x69
 801318c:	d1f6      	bne.n	801317c <_printf_i+0x30>
 801318e:	6820      	ldr	r0, [r4, #0]
 8013190:	6813      	ldr	r3, [r2, #0]
 8013192:	0605      	lsls	r5, r0, #24
 8013194:	f103 0104 	add.w	r1, r3, #4
 8013198:	d52a      	bpl.n	80131f0 <_printf_i+0xa4>
 801319a:	681b      	ldr	r3, [r3, #0]
 801319c:	6011      	str	r1, [r2, #0]
 801319e:	2b00      	cmp	r3, #0
 80131a0:	da03      	bge.n	80131aa <_printf_i+0x5e>
 80131a2:	222d      	movs	r2, #45	; 0x2d
 80131a4:	425b      	negs	r3, r3
 80131a6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80131aa:	486f      	ldr	r0, [pc, #444]	; (8013368 <_printf_i+0x21c>)
 80131ac:	220a      	movs	r2, #10
 80131ae:	e039      	b.n	8013224 <_printf_i+0xd8>
 80131b0:	2973      	cmp	r1, #115	; 0x73
 80131b2:	f000 809d 	beq.w	80132f0 <_printf_i+0x1a4>
 80131b6:	d808      	bhi.n	80131ca <_printf_i+0x7e>
 80131b8:	296f      	cmp	r1, #111	; 0x6f
 80131ba:	d020      	beq.n	80131fe <_printf_i+0xb2>
 80131bc:	2970      	cmp	r1, #112	; 0x70
 80131be:	d1dd      	bne.n	801317c <_printf_i+0x30>
 80131c0:	6823      	ldr	r3, [r4, #0]
 80131c2:	f043 0320 	orr.w	r3, r3, #32
 80131c6:	6023      	str	r3, [r4, #0]
 80131c8:	e003      	b.n	80131d2 <_printf_i+0x86>
 80131ca:	2975      	cmp	r1, #117	; 0x75
 80131cc:	d017      	beq.n	80131fe <_printf_i+0xb2>
 80131ce:	2978      	cmp	r1, #120	; 0x78
 80131d0:	d1d4      	bne.n	801317c <_printf_i+0x30>
 80131d2:	2378      	movs	r3, #120	; 0x78
 80131d4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80131d8:	4864      	ldr	r0, [pc, #400]	; (801336c <_printf_i+0x220>)
 80131da:	e055      	b.n	8013288 <_printf_i+0x13c>
 80131dc:	6813      	ldr	r3, [r2, #0]
 80131de:	1d19      	adds	r1, r3, #4
 80131e0:	681b      	ldr	r3, [r3, #0]
 80131e2:	6011      	str	r1, [r2, #0]
 80131e4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80131e8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80131ec:	2301      	movs	r3, #1
 80131ee:	e08c      	b.n	801330a <_printf_i+0x1be>
 80131f0:	681b      	ldr	r3, [r3, #0]
 80131f2:	6011      	str	r1, [r2, #0]
 80131f4:	f010 0f40 	tst.w	r0, #64	; 0x40
 80131f8:	bf18      	it	ne
 80131fa:	b21b      	sxthne	r3, r3
 80131fc:	e7cf      	b.n	801319e <_printf_i+0x52>
 80131fe:	6813      	ldr	r3, [r2, #0]
 8013200:	6825      	ldr	r5, [r4, #0]
 8013202:	1d18      	adds	r0, r3, #4
 8013204:	6010      	str	r0, [r2, #0]
 8013206:	0628      	lsls	r0, r5, #24
 8013208:	d501      	bpl.n	801320e <_printf_i+0xc2>
 801320a:	681b      	ldr	r3, [r3, #0]
 801320c:	e002      	b.n	8013214 <_printf_i+0xc8>
 801320e:	0668      	lsls	r0, r5, #25
 8013210:	d5fb      	bpl.n	801320a <_printf_i+0xbe>
 8013212:	881b      	ldrh	r3, [r3, #0]
 8013214:	4854      	ldr	r0, [pc, #336]	; (8013368 <_printf_i+0x21c>)
 8013216:	296f      	cmp	r1, #111	; 0x6f
 8013218:	bf14      	ite	ne
 801321a:	220a      	movne	r2, #10
 801321c:	2208      	moveq	r2, #8
 801321e:	2100      	movs	r1, #0
 8013220:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8013224:	6865      	ldr	r5, [r4, #4]
 8013226:	60a5      	str	r5, [r4, #8]
 8013228:	2d00      	cmp	r5, #0
 801322a:	f2c0 8095 	blt.w	8013358 <_printf_i+0x20c>
 801322e:	6821      	ldr	r1, [r4, #0]
 8013230:	f021 0104 	bic.w	r1, r1, #4
 8013234:	6021      	str	r1, [r4, #0]
 8013236:	2b00      	cmp	r3, #0
 8013238:	d13d      	bne.n	80132b6 <_printf_i+0x16a>
 801323a:	2d00      	cmp	r5, #0
 801323c:	f040 808e 	bne.w	801335c <_printf_i+0x210>
 8013240:	4665      	mov	r5, ip
 8013242:	2a08      	cmp	r2, #8
 8013244:	d10b      	bne.n	801325e <_printf_i+0x112>
 8013246:	6823      	ldr	r3, [r4, #0]
 8013248:	07db      	lsls	r3, r3, #31
 801324a:	d508      	bpl.n	801325e <_printf_i+0x112>
 801324c:	6923      	ldr	r3, [r4, #16]
 801324e:	6862      	ldr	r2, [r4, #4]
 8013250:	429a      	cmp	r2, r3
 8013252:	bfde      	ittt	le
 8013254:	2330      	movle	r3, #48	; 0x30
 8013256:	f805 3c01 	strble.w	r3, [r5, #-1]
 801325a:	f105 35ff 	addle.w	r5, r5, #4294967295
 801325e:	ebac 0305 	sub.w	r3, ip, r5
 8013262:	6123      	str	r3, [r4, #16]
 8013264:	f8cd 8000 	str.w	r8, [sp]
 8013268:	463b      	mov	r3, r7
 801326a:	aa03      	add	r2, sp, #12
 801326c:	4621      	mov	r1, r4
 801326e:	4630      	mov	r0, r6
 8013270:	f7ff fef6 	bl	8013060 <_printf_common>
 8013274:	3001      	adds	r0, #1
 8013276:	d14d      	bne.n	8013314 <_printf_i+0x1c8>
 8013278:	f04f 30ff 	mov.w	r0, #4294967295
 801327c:	b005      	add	sp, #20
 801327e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013282:	4839      	ldr	r0, [pc, #228]	; (8013368 <_printf_i+0x21c>)
 8013284:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8013288:	6813      	ldr	r3, [r2, #0]
 801328a:	6821      	ldr	r1, [r4, #0]
 801328c:	1d1d      	adds	r5, r3, #4
 801328e:	681b      	ldr	r3, [r3, #0]
 8013290:	6015      	str	r5, [r2, #0]
 8013292:	060a      	lsls	r2, r1, #24
 8013294:	d50b      	bpl.n	80132ae <_printf_i+0x162>
 8013296:	07ca      	lsls	r2, r1, #31
 8013298:	bf44      	itt	mi
 801329a:	f041 0120 	orrmi.w	r1, r1, #32
 801329e:	6021      	strmi	r1, [r4, #0]
 80132a0:	b91b      	cbnz	r3, 80132aa <_printf_i+0x15e>
 80132a2:	6822      	ldr	r2, [r4, #0]
 80132a4:	f022 0220 	bic.w	r2, r2, #32
 80132a8:	6022      	str	r2, [r4, #0]
 80132aa:	2210      	movs	r2, #16
 80132ac:	e7b7      	b.n	801321e <_printf_i+0xd2>
 80132ae:	064d      	lsls	r5, r1, #25
 80132b0:	bf48      	it	mi
 80132b2:	b29b      	uxthmi	r3, r3
 80132b4:	e7ef      	b.n	8013296 <_printf_i+0x14a>
 80132b6:	4665      	mov	r5, ip
 80132b8:	fbb3 f1f2 	udiv	r1, r3, r2
 80132bc:	fb02 3311 	mls	r3, r2, r1, r3
 80132c0:	5cc3      	ldrb	r3, [r0, r3]
 80132c2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80132c6:	460b      	mov	r3, r1
 80132c8:	2900      	cmp	r1, #0
 80132ca:	d1f5      	bne.n	80132b8 <_printf_i+0x16c>
 80132cc:	e7b9      	b.n	8013242 <_printf_i+0xf6>
 80132ce:	6813      	ldr	r3, [r2, #0]
 80132d0:	6825      	ldr	r5, [r4, #0]
 80132d2:	6961      	ldr	r1, [r4, #20]
 80132d4:	1d18      	adds	r0, r3, #4
 80132d6:	6010      	str	r0, [r2, #0]
 80132d8:	0628      	lsls	r0, r5, #24
 80132da:	681b      	ldr	r3, [r3, #0]
 80132dc:	d501      	bpl.n	80132e2 <_printf_i+0x196>
 80132de:	6019      	str	r1, [r3, #0]
 80132e0:	e002      	b.n	80132e8 <_printf_i+0x19c>
 80132e2:	066a      	lsls	r2, r5, #25
 80132e4:	d5fb      	bpl.n	80132de <_printf_i+0x192>
 80132e6:	8019      	strh	r1, [r3, #0]
 80132e8:	2300      	movs	r3, #0
 80132ea:	6123      	str	r3, [r4, #16]
 80132ec:	4665      	mov	r5, ip
 80132ee:	e7b9      	b.n	8013264 <_printf_i+0x118>
 80132f0:	6813      	ldr	r3, [r2, #0]
 80132f2:	1d19      	adds	r1, r3, #4
 80132f4:	6011      	str	r1, [r2, #0]
 80132f6:	681d      	ldr	r5, [r3, #0]
 80132f8:	6862      	ldr	r2, [r4, #4]
 80132fa:	2100      	movs	r1, #0
 80132fc:	4628      	mov	r0, r5
 80132fe:	f7ec ff67 	bl	80001d0 <memchr>
 8013302:	b108      	cbz	r0, 8013308 <_printf_i+0x1bc>
 8013304:	1b40      	subs	r0, r0, r5
 8013306:	6060      	str	r0, [r4, #4]
 8013308:	6863      	ldr	r3, [r4, #4]
 801330a:	6123      	str	r3, [r4, #16]
 801330c:	2300      	movs	r3, #0
 801330e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013312:	e7a7      	b.n	8013264 <_printf_i+0x118>
 8013314:	6923      	ldr	r3, [r4, #16]
 8013316:	462a      	mov	r2, r5
 8013318:	4639      	mov	r1, r7
 801331a:	4630      	mov	r0, r6
 801331c:	47c0      	blx	r8
 801331e:	3001      	adds	r0, #1
 8013320:	d0aa      	beq.n	8013278 <_printf_i+0x12c>
 8013322:	6823      	ldr	r3, [r4, #0]
 8013324:	079b      	lsls	r3, r3, #30
 8013326:	d413      	bmi.n	8013350 <_printf_i+0x204>
 8013328:	68e0      	ldr	r0, [r4, #12]
 801332a:	9b03      	ldr	r3, [sp, #12]
 801332c:	4298      	cmp	r0, r3
 801332e:	bfb8      	it	lt
 8013330:	4618      	movlt	r0, r3
 8013332:	e7a3      	b.n	801327c <_printf_i+0x130>
 8013334:	2301      	movs	r3, #1
 8013336:	464a      	mov	r2, r9
 8013338:	4639      	mov	r1, r7
 801333a:	4630      	mov	r0, r6
 801333c:	47c0      	blx	r8
 801333e:	3001      	adds	r0, #1
 8013340:	d09a      	beq.n	8013278 <_printf_i+0x12c>
 8013342:	3501      	adds	r5, #1
 8013344:	68e3      	ldr	r3, [r4, #12]
 8013346:	9a03      	ldr	r2, [sp, #12]
 8013348:	1a9b      	subs	r3, r3, r2
 801334a:	42ab      	cmp	r3, r5
 801334c:	dcf2      	bgt.n	8013334 <_printf_i+0x1e8>
 801334e:	e7eb      	b.n	8013328 <_printf_i+0x1dc>
 8013350:	2500      	movs	r5, #0
 8013352:	f104 0919 	add.w	r9, r4, #25
 8013356:	e7f5      	b.n	8013344 <_printf_i+0x1f8>
 8013358:	2b00      	cmp	r3, #0
 801335a:	d1ac      	bne.n	80132b6 <_printf_i+0x16a>
 801335c:	7803      	ldrb	r3, [r0, #0]
 801335e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8013362:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8013366:	e76c      	b.n	8013242 <_printf_i+0xf6>
 8013368:	08013cc5 	.word	0x08013cc5
 801336c:	08013cd6 	.word	0x08013cd6

08013370 <_sbrk_r>:
 8013370:	b538      	push	{r3, r4, r5, lr}
 8013372:	4c06      	ldr	r4, [pc, #24]	; (801338c <_sbrk_r+0x1c>)
 8013374:	2300      	movs	r3, #0
 8013376:	4605      	mov	r5, r0
 8013378:	4608      	mov	r0, r1
 801337a:	6023      	str	r3, [r4, #0]
 801337c:	f7fe fff2 	bl	8012364 <_sbrk>
 8013380:	1c43      	adds	r3, r0, #1
 8013382:	d102      	bne.n	801338a <_sbrk_r+0x1a>
 8013384:	6823      	ldr	r3, [r4, #0]
 8013386:	b103      	cbz	r3, 801338a <_sbrk_r+0x1a>
 8013388:	602b      	str	r3, [r5, #0]
 801338a:	bd38      	pop	{r3, r4, r5, pc}
 801338c:	200015d8 	.word	0x200015d8

08013390 <__sread>:
 8013390:	b510      	push	{r4, lr}
 8013392:	460c      	mov	r4, r1
 8013394:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013398:	f000 f896 	bl	80134c8 <_read_r>
 801339c:	2800      	cmp	r0, #0
 801339e:	bfab      	itete	ge
 80133a0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80133a2:	89a3      	ldrhlt	r3, [r4, #12]
 80133a4:	181b      	addge	r3, r3, r0
 80133a6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80133aa:	bfac      	ite	ge
 80133ac:	6563      	strge	r3, [r4, #84]	; 0x54
 80133ae:	81a3      	strhlt	r3, [r4, #12]
 80133b0:	bd10      	pop	{r4, pc}

080133b2 <__swrite>:
 80133b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80133b6:	461f      	mov	r7, r3
 80133b8:	898b      	ldrh	r3, [r1, #12]
 80133ba:	05db      	lsls	r3, r3, #23
 80133bc:	4605      	mov	r5, r0
 80133be:	460c      	mov	r4, r1
 80133c0:	4616      	mov	r6, r2
 80133c2:	d505      	bpl.n	80133d0 <__swrite+0x1e>
 80133c4:	2302      	movs	r3, #2
 80133c6:	2200      	movs	r2, #0
 80133c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80133cc:	f000 f868 	bl	80134a0 <_lseek_r>
 80133d0:	89a3      	ldrh	r3, [r4, #12]
 80133d2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80133d6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80133da:	81a3      	strh	r3, [r4, #12]
 80133dc:	4632      	mov	r2, r6
 80133de:	463b      	mov	r3, r7
 80133e0:	4628      	mov	r0, r5
 80133e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80133e6:	f000 b817 	b.w	8013418 <_write_r>

080133ea <__sseek>:
 80133ea:	b510      	push	{r4, lr}
 80133ec:	460c      	mov	r4, r1
 80133ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80133f2:	f000 f855 	bl	80134a0 <_lseek_r>
 80133f6:	1c43      	adds	r3, r0, #1
 80133f8:	89a3      	ldrh	r3, [r4, #12]
 80133fa:	bf15      	itete	ne
 80133fc:	6560      	strne	r0, [r4, #84]	; 0x54
 80133fe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8013402:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8013406:	81a3      	strheq	r3, [r4, #12]
 8013408:	bf18      	it	ne
 801340a:	81a3      	strhne	r3, [r4, #12]
 801340c:	bd10      	pop	{r4, pc}

0801340e <__sclose>:
 801340e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013412:	f000 b813 	b.w	801343c <_close_r>
	...

08013418 <_write_r>:
 8013418:	b538      	push	{r3, r4, r5, lr}
 801341a:	4c07      	ldr	r4, [pc, #28]	; (8013438 <_write_r+0x20>)
 801341c:	4605      	mov	r5, r0
 801341e:	4608      	mov	r0, r1
 8013420:	4611      	mov	r1, r2
 8013422:	2200      	movs	r2, #0
 8013424:	6022      	str	r2, [r4, #0]
 8013426:	461a      	mov	r2, r3
 8013428:	f7fe ff4b 	bl	80122c2 <_write>
 801342c:	1c43      	adds	r3, r0, #1
 801342e:	d102      	bne.n	8013436 <_write_r+0x1e>
 8013430:	6823      	ldr	r3, [r4, #0]
 8013432:	b103      	cbz	r3, 8013436 <_write_r+0x1e>
 8013434:	602b      	str	r3, [r5, #0]
 8013436:	bd38      	pop	{r3, r4, r5, pc}
 8013438:	200015d8 	.word	0x200015d8

0801343c <_close_r>:
 801343c:	b538      	push	{r3, r4, r5, lr}
 801343e:	4c06      	ldr	r4, [pc, #24]	; (8013458 <_close_r+0x1c>)
 8013440:	2300      	movs	r3, #0
 8013442:	4605      	mov	r5, r0
 8013444:	4608      	mov	r0, r1
 8013446:	6023      	str	r3, [r4, #0]
 8013448:	f7fe ff57 	bl	80122fa <_close>
 801344c:	1c43      	adds	r3, r0, #1
 801344e:	d102      	bne.n	8013456 <_close_r+0x1a>
 8013450:	6823      	ldr	r3, [r4, #0]
 8013452:	b103      	cbz	r3, 8013456 <_close_r+0x1a>
 8013454:	602b      	str	r3, [r5, #0]
 8013456:	bd38      	pop	{r3, r4, r5, pc}
 8013458:	200015d8 	.word	0x200015d8

0801345c <_fstat_r>:
 801345c:	b538      	push	{r3, r4, r5, lr}
 801345e:	4c07      	ldr	r4, [pc, #28]	; (801347c <_fstat_r+0x20>)
 8013460:	2300      	movs	r3, #0
 8013462:	4605      	mov	r5, r0
 8013464:	4608      	mov	r0, r1
 8013466:	4611      	mov	r1, r2
 8013468:	6023      	str	r3, [r4, #0]
 801346a:	f7fe ff52 	bl	8012312 <_fstat>
 801346e:	1c43      	adds	r3, r0, #1
 8013470:	d102      	bne.n	8013478 <_fstat_r+0x1c>
 8013472:	6823      	ldr	r3, [r4, #0]
 8013474:	b103      	cbz	r3, 8013478 <_fstat_r+0x1c>
 8013476:	602b      	str	r3, [r5, #0]
 8013478:	bd38      	pop	{r3, r4, r5, pc}
 801347a:	bf00      	nop
 801347c:	200015d8 	.word	0x200015d8

08013480 <_isatty_r>:
 8013480:	b538      	push	{r3, r4, r5, lr}
 8013482:	4c06      	ldr	r4, [pc, #24]	; (801349c <_isatty_r+0x1c>)
 8013484:	2300      	movs	r3, #0
 8013486:	4605      	mov	r5, r0
 8013488:	4608      	mov	r0, r1
 801348a:	6023      	str	r3, [r4, #0]
 801348c:	f7fe ff51 	bl	8012332 <_isatty>
 8013490:	1c43      	adds	r3, r0, #1
 8013492:	d102      	bne.n	801349a <_isatty_r+0x1a>
 8013494:	6823      	ldr	r3, [r4, #0]
 8013496:	b103      	cbz	r3, 801349a <_isatty_r+0x1a>
 8013498:	602b      	str	r3, [r5, #0]
 801349a:	bd38      	pop	{r3, r4, r5, pc}
 801349c:	200015d8 	.word	0x200015d8

080134a0 <_lseek_r>:
 80134a0:	b538      	push	{r3, r4, r5, lr}
 80134a2:	4c07      	ldr	r4, [pc, #28]	; (80134c0 <_lseek_r+0x20>)
 80134a4:	4605      	mov	r5, r0
 80134a6:	4608      	mov	r0, r1
 80134a8:	4611      	mov	r1, r2
 80134aa:	2200      	movs	r2, #0
 80134ac:	6022      	str	r2, [r4, #0]
 80134ae:	461a      	mov	r2, r3
 80134b0:	f7fe ff4a 	bl	8012348 <_lseek>
 80134b4:	1c43      	adds	r3, r0, #1
 80134b6:	d102      	bne.n	80134be <_lseek_r+0x1e>
 80134b8:	6823      	ldr	r3, [r4, #0]
 80134ba:	b103      	cbz	r3, 80134be <_lseek_r+0x1e>
 80134bc:	602b      	str	r3, [r5, #0]
 80134be:	bd38      	pop	{r3, r4, r5, pc}
 80134c0:	200015d8 	.word	0x200015d8

080134c4 <__malloc_lock>:
 80134c4:	4770      	bx	lr

080134c6 <__malloc_unlock>:
 80134c6:	4770      	bx	lr

080134c8 <_read_r>:
 80134c8:	b538      	push	{r3, r4, r5, lr}
 80134ca:	4c07      	ldr	r4, [pc, #28]	; (80134e8 <_read_r+0x20>)
 80134cc:	4605      	mov	r5, r0
 80134ce:	4608      	mov	r0, r1
 80134d0:	4611      	mov	r1, r2
 80134d2:	2200      	movs	r2, #0
 80134d4:	6022      	str	r2, [r4, #0]
 80134d6:	461a      	mov	r2, r3
 80134d8:	f7fe fed6 	bl	8012288 <_read>
 80134dc:	1c43      	adds	r3, r0, #1
 80134de:	d102      	bne.n	80134e6 <_read_r+0x1e>
 80134e0:	6823      	ldr	r3, [r4, #0]
 80134e2:	b103      	cbz	r3, 80134e6 <_read_r+0x1e>
 80134e4:	602b      	str	r3, [r5, #0]
 80134e6:	bd38      	pop	{r3, r4, r5, pc}
 80134e8:	200015d8 	.word	0x200015d8

080134ec <sqrt>:
 80134ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80134f0:	ed2d 8b02 	vpush	{d8}
 80134f4:	b08b      	sub	sp, #44	; 0x2c
 80134f6:	ec55 4b10 	vmov	r4, r5, d0
 80134fa:	f000 f851 	bl	80135a0 <__ieee754_sqrt>
 80134fe:	4b26      	ldr	r3, [pc, #152]	; (8013598 <sqrt+0xac>)
 8013500:	eeb0 8a40 	vmov.f32	s16, s0
 8013504:	eef0 8a60 	vmov.f32	s17, s1
 8013508:	f993 6000 	ldrsb.w	r6, [r3]
 801350c:	1c73      	adds	r3, r6, #1
 801350e:	d02a      	beq.n	8013566 <sqrt+0x7a>
 8013510:	4622      	mov	r2, r4
 8013512:	462b      	mov	r3, r5
 8013514:	4620      	mov	r0, r4
 8013516:	4629      	mov	r1, r5
 8013518:	f7ed fb00 	bl	8000b1c <__aeabi_dcmpun>
 801351c:	4607      	mov	r7, r0
 801351e:	bb10      	cbnz	r0, 8013566 <sqrt+0x7a>
 8013520:	f04f 0800 	mov.w	r8, #0
 8013524:	f04f 0900 	mov.w	r9, #0
 8013528:	4642      	mov	r2, r8
 801352a:	464b      	mov	r3, r9
 801352c:	4620      	mov	r0, r4
 801352e:	4629      	mov	r1, r5
 8013530:	f7ed facc 	bl	8000acc <__aeabi_dcmplt>
 8013534:	b1b8      	cbz	r0, 8013566 <sqrt+0x7a>
 8013536:	2301      	movs	r3, #1
 8013538:	9300      	str	r3, [sp, #0]
 801353a:	4b18      	ldr	r3, [pc, #96]	; (801359c <sqrt+0xb0>)
 801353c:	9301      	str	r3, [sp, #4]
 801353e:	9708      	str	r7, [sp, #32]
 8013540:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8013544:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8013548:	b9b6      	cbnz	r6, 8013578 <sqrt+0x8c>
 801354a:	e9cd 8906 	strd	r8, r9, [sp, #24]
 801354e:	4668      	mov	r0, sp
 8013550:	f000 f8d6 	bl	8013700 <matherr>
 8013554:	b1d0      	cbz	r0, 801358c <sqrt+0xa0>
 8013556:	9b08      	ldr	r3, [sp, #32]
 8013558:	b11b      	cbz	r3, 8013562 <sqrt+0x76>
 801355a:	f7fe ff8f 	bl	801247c <__errno>
 801355e:	9b08      	ldr	r3, [sp, #32]
 8013560:	6003      	str	r3, [r0, #0]
 8013562:	ed9d 8b06 	vldr	d8, [sp, #24]
 8013566:	eeb0 0a48 	vmov.f32	s0, s16
 801356a:	eef0 0a68 	vmov.f32	s1, s17
 801356e:	b00b      	add	sp, #44	; 0x2c
 8013570:	ecbd 8b02 	vpop	{d8}
 8013574:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013578:	4642      	mov	r2, r8
 801357a:	464b      	mov	r3, r9
 801357c:	4640      	mov	r0, r8
 801357e:	4649      	mov	r1, r9
 8013580:	f7ed f95c 	bl	800083c <__aeabi_ddiv>
 8013584:	2e02      	cmp	r6, #2
 8013586:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801358a:	d1e0      	bne.n	801354e <sqrt+0x62>
 801358c:	f7fe ff76 	bl	801247c <__errno>
 8013590:	2321      	movs	r3, #33	; 0x21
 8013592:	6003      	str	r3, [r0, #0]
 8013594:	e7df      	b.n	8013556 <sqrt+0x6a>
 8013596:	bf00      	nop
 8013598:	200000e8 	.word	0x200000e8
 801359c:	08013ce7 	.word	0x08013ce7

080135a0 <__ieee754_sqrt>:
 80135a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80135a4:	4955      	ldr	r1, [pc, #340]	; (80136fc <__ieee754_sqrt+0x15c>)
 80135a6:	ec55 4b10 	vmov	r4, r5, d0
 80135aa:	43a9      	bics	r1, r5
 80135ac:	462b      	mov	r3, r5
 80135ae:	462a      	mov	r2, r5
 80135b0:	d112      	bne.n	80135d8 <__ieee754_sqrt+0x38>
 80135b2:	ee10 2a10 	vmov	r2, s0
 80135b6:	ee10 0a10 	vmov	r0, s0
 80135ba:	4629      	mov	r1, r5
 80135bc:	f7ed f814 	bl	80005e8 <__aeabi_dmul>
 80135c0:	4602      	mov	r2, r0
 80135c2:	460b      	mov	r3, r1
 80135c4:	4620      	mov	r0, r4
 80135c6:	4629      	mov	r1, r5
 80135c8:	f7ec fe58 	bl	800027c <__adddf3>
 80135cc:	4604      	mov	r4, r0
 80135ce:	460d      	mov	r5, r1
 80135d0:	ec45 4b10 	vmov	d0, r4, r5
 80135d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80135d8:	2d00      	cmp	r5, #0
 80135da:	ee10 0a10 	vmov	r0, s0
 80135de:	4621      	mov	r1, r4
 80135e0:	dc0f      	bgt.n	8013602 <__ieee754_sqrt+0x62>
 80135e2:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80135e6:	4330      	orrs	r0, r6
 80135e8:	d0f2      	beq.n	80135d0 <__ieee754_sqrt+0x30>
 80135ea:	b155      	cbz	r5, 8013602 <__ieee754_sqrt+0x62>
 80135ec:	ee10 2a10 	vmov	r2, s0
 80135f0:	4620      	mov	r0, r4
 80135f2:	4629      	mov	r1, r5
 80135f4:	f7ec fe40 	bl	8000278 <__aeabi_dsub>
 80135f8:	4602      	mov	r2, r0
 80135fa:	460b      	mov	r3, r1
 80135fc:	f7ed f91e 	bl	800083c <__aeabi_ddiv>
 8013600:	e7e4      	b.n	80135cc <__ieee754_sqrt+0x2c>
 8013602:	151b      	asrs	r3, r3, #20
 8013604:	d073      	beq.n	80136ee <__ieee754_sqrt+0x14e>
 8013606:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801360a:	07dd      	lsls	r5, r3, #31
 801360c:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8013610:	bf48      	it	mi
 8013612:	0fc8      	lsrmi	r0, r1, #31
 8013614:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8013618:	bf44      	itt	mi
 801361a:	0049      	lslmi	r1, r1, #1
 801361c:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 8013620:	2500      	movs	r5, #0
 8013622:	1058      	asrs	r0, r3, #1
 8013624:	0fcb      	lsrs	r3, r1, #31
 8013626:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 801362a:	0049      	lsls	r1, r1, #1
 801362c:	2316      	movs	r3, #22
 801362e:	462c      	mov	r4, r5
 8013630:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8013634:	19a7      	adds	r7, r4, r6
 8013636:	4297      	cmp	r7, r2
 8013638:	bfde      	ittt	le
 801363a:	19bc      	addle	r4, r7, r6
 801363c:	1bd2      	suble	r2, r2, r7
 801363e:	19ad      	addle	r5, r5, r6
 8013640:	0fcf      	lsrs	r7, r1, #31
 8013642:	3b01      	subs	r3, #1
 8013644:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 8013648:	ea4f 0141 	mov.w	r1, r1, lsl #1
 801364c:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8013650:	d1f0      	bne.n	8013634 <__ieee754_sqrt+0x94>
 8013652:	f04f 0c20 	mov.w	ip, #32
 8013656:	469e      	mov	lr, r3
 8013658:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 801365c:	42a2      	cmp	r2, r4
 801365e:	eb06 070e 	add.w	r7, r6, lr
 8013662:	dc02      	bgt.n	801366a <__ieee754_sqrt+0xca>
 8013664:	d112      	bne.n	801368c <__ieee754_sqrt+0xec>
 8013666:	428f      	cmp	r7, r1
 8013668:	d810      	bhi.n	801368c <__ieee754_sqrt+0xec>
 801366a:	2f00      	cmp	r7, #0
 801366c:	eb07 0e06 	add.w	lr, r7, r6
 8013670:	da42      	bge.n	80136f8 <__ieee754_sqrt+0x158>
 8013672:	f1be 0f00 	cmp.w	lr, #0
 8013676:	db3f      	blt.n	80136f8 <__ieee754_sqrt+0x158>
 8013678:	f104 0801 	add.w	r8, r4, #1
 801367c:	1b12      	subs	r2, r2, r4
 801367e:	428f      	cmp	r7, r1
 8013680:	bf88      	it	hi
 8013682:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8013686:	1bc9      	subs	r1, r1, r7
 8013688:	4433      	add	r3, r6
 801368a:	4644      	mov	r4, r8
 801368c:	0052      	lsls	r2, r2, #1
 801368e:	f1bc 0c01 	subs.w	ip, ip, #1
 8013692:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 8013696:	ea4f 0656 	mov.w	r6, r6, lsr #1
 801369a:	ea4f 0141 	mov.w	r1, r1, lsl #1
 801369e:	d1dd      	bne.n	801365c <__ieee754_sqrt+0xbc>
 80136a0:	430a      	orrs	r2, r1
 80136a2:	d006      	beq.n	80136b2 <__ieee754_sqrt+0x112>
 80136a4:	1c5c      	adds	r4, r3, #1
 80136a6:	bf13      	iteet	ne
 80136a8:	3301      	addne	r3, #1
 80136aa:	3501      	addeq	r5, #1
 80136ac:	4663      	moveq	r3, ip
 80136ae:	f023 0301 	bicne.w	r3, r3, #1
 80136b2:	106a      	asrs	r2, r5, #1
 80136b4:	085b      	lsrs	r3, r3, #1
 80136b6:	07e9      	lsls	r1, r5, #31
 80136b8:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 80136bc:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 80136c0:	bf48      	it	mi
 80136c2:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 80136c6:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 80136ca:	461c      	mov	r4, r3
 80136cc:	e780      	b.n	80135d0 <__ieee754_sqrt+0x30>
 80136ce:	0aca      	lsrs	r2, r1, #11
 80136d0:	3815      	subs	r0, #21
 80136d2:	0549      	lsls	r1, r1, #21
 80136d4:	2a00      	cmp	r2, #0
 80136d6:	d0fa      	beq.n	80136ce <__ieee754_sqrt+0x12e>
 80136d8:	02d6      	lsls	r6, r2, #11
 80136da:	d50a      	bpl.n	80136f2 <__ieee754_sqrt+0x152>
 80136dc:	f1c3 0420 	rsb	r4, r3, #32
 80136e0:	fa21 f404 	lsr.w	r4, r1, r4
 80136e4:	1e5d      	subs	r5, r3, #1
 80136e6:	4099      	lsls	r1, r3
 80136e8:	4322      	orrs	r2, r4
 80136ea:	1b43      	subs	r3, r0, r5
 80136ec:	e78b      	b.n	8013606 <__ieee754_sqrt+0x66>
 80136ee:	4618      	mov	r0, r3
 80136f0:	e7f0      	b.n	80136d4 <__ieee754_sqrt+0x134>
 80136f2:	0052      	lsls	r2, r2, #1
 80136f4:	3301      	adds	r3, #1
 80136f6:	e7ef      	b.n	80136d8 <__ieee754_sqrt+0x138>
 80136f8:	46a0      	mov	r8, r4
 80136fa:	e7bf      	b.n	801367c <__ieee754_sqrt+0xdc>
 80136fc:	7ff00000 	.word	0x7ff00000

08013700 <matherr>:
 8013700:	2000      	movs	r0, #0
 8013702:	4770      	bx	lr

08013704 <_init>:
 8013704:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013706:	bf00      	nop
 8013708:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801370a:	bc08      	pop	{r3}
 801370c:	469e      	mov	lr, r3
 801370e:	4770      	bx	lr

08013710 <_fini>:
 8013710:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013712:	bf00      	nop
 8013714:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013716:	bc08      	pop	{r3}
 8013718:	469e      	mov	lr, r3
 801371a:	4770      	bx	lr
