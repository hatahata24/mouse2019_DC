
mouse2019.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008bf4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000022c  08008d84  08008d84  00018d84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008fb0  08008fb0  000200cc  2**0
                  CONTENTS
  4 .ARM          00000008  08008fb0  08008fb0  00018fb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008fb8  08008fb8  000200cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008fb8  08008fb8  00018fb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008fbc  08008fbc  00018fbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000cc  20000000  08008fc0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000d54  200000cc  0800908c  000200cc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000e20  0800908c  00020e20  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200cc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001137d  00000000  00000000  000200fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000258e  00000000  00000000  00031479  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001020  00000000  00000000  00033a08  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000f10  00000000  00000000  00034a28  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002148a  00000000  00000000  00035938  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000c5c3  00000000  00000000  00056dc2  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c628b  00000000  00000000  00063385  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00129610  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004d84  00000000  00000000  0012968c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000cc 	.word	0x200000cc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008d6c 	.word	0x08008d6c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000d0 	.word	0x200000d0
 80001cc:	08008d6c 	.word	0x08008d6c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ae:	f1a4 0401 	sub.w	r4, r4, #1
 80003b2:	d1e9      	bne.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__gedf2>:
 8000a0c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a10:	e006      	b.n	8000a20 <__cmpdf2+0x4>
 8000a12:	bf00      	nop

08000a14 <__ledf2>:
 8000a14:	f04f 0c01 	mov.w	ip, #1
 8000a18:	e002      	b.n	8000a20 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__cmpdf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a36:	d01b      	beq.n	8000a70 <__cmpdf2+0x54>
 8000a38:	b001      	add	sp, #4
 8000a3a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a3e:	bf0c      	ite	eq
 8000a40:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a44:	ea91 0f03 	teqne	r1, r3
 8000a48:	bf02      	ittt	eq
 8000a4a:	ea90 0f02 	teqeq	r0, r2
 8000a4e:	2000      	moveq	r0, #0
 8000a50:	4770      	bxeq	lr
 8000a52:	f110 0f00 	cmn.w	r0, #0
 8000a56:	ea91 0f03 	teq	r1, r3
 8000a5a:	bf58      	it	pl
 8000a5c:	4299      	cmppl	r1, r3
 8000a5e:	bf08      	it	eq
 8000a60:	4290      	cmpeq	r0, r2
 8000a62:	bf2c      	ite	cs
 8000a64:	17d8      	asrcs	r0, r3, #31
 8000a66:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a6a:	f040 0001 	orr.w	r0, r0, #1
 8000a6e:	4770      	bx	lr
 8000a70:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a78:	d102      	bne.n	8000a80 <__cmpdf2+0x64>
 8000a7a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a7e:	d107      	bne.n	8000a90 <__cmpdf2+0x74>
 8000a80:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d1d6      	bne.n	8000a38 <__cmpdf2+0x1c>
 8000a8a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a8e:	d0d3      	beq.n	8000a38 <__cmpdf2+0x1c>
 8000a90:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop

08000a98 <__aeabi_cdrcmple>:
 8000a98:	4684      	mov	ip, r0
 8000a9a:	4610      	mov	r0, r2
 8000a9c:	4662      	mov	r2, ip
 8000a9e:	468c      	mov	ip, r1
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4663      	mov	r3, ip
 8000aa4:	e000      	b.n	8000aa8 <__aeabi_cdcmpeq>
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdcmpeq>:
 8000aa8:	b501      	push	{r0, lr}
 8000aaa:	f7ff ffb7 	bl	8000a1c <__cmpdf2>
 8000aae:	2800      	cmp	r0, #0
 8000ab0:	bf48      	it	mi
 8000ab2:	f110 0f00 	cmnmi.w	r0, #0
 8000ab6:	bd01      	pop	{r0, pc}

08000ab8 <__aeabi_dcmpeq>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff fff4 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ac0:	bf0c      	ite	eq
 8000ac2:	2001      	moveq	r0, #1
 8000ac4:	2000      	movne	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_dcmplt>:
 8000acc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad0:	f7ff ffea 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ad4:	bf34      	ite	cc
 8000ad6:	2001      	movcc	r0, #1
 8000ad8:	2000      	movcs	r0, #0
 8000ada:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ade:	bf00      	nop

08000ae0 <__aeabi_dcmple>:
 8000ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae4:	f7ff ffe0 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ae8:	bf94      	ite	ls
 8000aea:	2001      	movls	r0, #1
 8000aec:	2000      	movhi	r0, #0
 8000aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af2:	bf00      	nop

08000af4 <__aeabi_dcmpge>:
 8000af4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af8:	f7ff ffce 	bl	8000a98 <__aeabi_cdrcmple>
 8000afc:	bf94      	ite	ls
 8000afe:	2001      	movls	r0, #1
 8000b00:	2000      	movhi	r0, #0
 8000b02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b06:	bf00      	nop

08000b08 <__aeabi_dcmpgt>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff ffc4 	bl	8000a98 <__aeabi_cdrcmple>
 8000b10:	bf34      	ite	cc
 8000b12:	2001      	movcc	r0, #1
 8000b14:	2000      	movcs	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmpun>:
 8000b1c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b24:	d102      	bne.n	8000b2c <__aeabi_dcmpun+0x10>
 8000b26:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b2a:	d10a      	bne.n	8000b42 <__aeabi_dcmpun+0x26>
 8000b2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x20>
 8000b36:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b3a:	d102      	bne.n	8000b42 <__aeabi_dcmpun+0x26>
 8000b3c:	f04f 0000 	mov.w	r0, #0
 8000b40:	4770      	bx	lr
 8000b42:	f04f 0001 	mov.w	r0, #1
 8000b46:	4770      	bx	lr

08000b48 <__aeabi_d2f>:
 8000b48:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b4c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b50:	bf24      	itt	cs
 8000b52:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b56:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b5a:	d90d      	bls.n	8000b78 <__aeabi_d2f+0x30>
 8000b5c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b60:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b64:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b68:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b6c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b70:	bf08      	it	eq
 8000b72:	f020 0001 	biceq.w	r0, r0, #1
 8000b76:	4770      	bx	lr
 8000b78:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b7c:	d121      	bne.n	8000bc2 <__aeabi_d2f+0x7a>
 8000b7e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b82:	bfbc      	itt	lt
 8000b84:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b88:	4770      	bxlt	lr
 8000b8a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b8e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b92:	f1c2 0218 	rsb	r2, r2, #24
 8000b96:	f1c2 0c20 	rsb	ip, r2, #32
 8000b9a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b9e:	fa20 f002 	lsr.w	r0, r0, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	f040 0001 	orrne.w	r0, r0, #1
 8000ba8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bac:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bb0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bb4:	ea40 000c 	orr.w	r0, r0, ip
 8000bb8:	fa23 f302 	lsr.w	r3, r3, r2
 8000bbc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bc0:	e7cc      	b.n	8000b5c <__aeabi_d2f+0x14>
 8000bc2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bc6:	d107      	bne.n	8000bd8 <__aeabi_d2f+0x90>
 8000bc8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bcc:	bf1e      	ittt	ne
 8000bce:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bd2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bd6:	4770      	bxne	lr
 8000bd8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bdc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000be0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b972 	b.w	8000ee4 <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9e08      	ldr	r6, [sp, #32]
 8000c1e:	4604      	mov	r4, r0
 8000c20:	4688      	mov	r8, r1
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d14b      	bne.n	8000cbe <__udivmoddi4+0xa6>
 8000c26:	428a      	cmp	r2, r1
 8000c28:	4615      	mov	r5, r2
 8000c2a:	d967      	bls.n	8000cfc <__udivmoddi4+0xe4>
 8000c2c:	fab2 f282 	clz	r2, r2
 8000c30:	b14a      	cbz	r2, 8000c46 <__udivmoddi4+0x2e>
 8000c32:	f1c2 0720 	rsb	r7, r2, #32
 8000c36:	fa01 f302 	lsl.w	r3, r1, r2
 8000c3a:	fa20 f707 	lsr.w	r7, r0, r7
 8000c3e:	4095      	lsls	r5, r2
 8000c40:	ea47 0803 	orr.w	r8, r7, r3
 8000c44:	4094      	lsls	r4, r2
 8000c46:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c4a:	0c23      	lsrs	r3, r4, #16
 8000c4c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000c50:	fa1f fc85 	uxth.w	ip, r5
 8000c54:	fb0e 8817 	mls	r8, lr, r7, r8
 8000c58:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c5c:	fb07 f10c 	mul.w	r1, r7, ip
 8000c60:	4299      	cmp	r1, r3
 8000c62:	d909      	bls.n	8000c78 <__udivmoddi4+0x60>
 8000c64:	18eb      	adds	r3, r5, r3
 8000c66:	f107 30ff 	add.w	r0, r7, #4294967295
 8000c6a:	f080 811b 	bcs.w	8000ea4 <__udivmoddi4+0x28c>
 8000c6e:	4299      	cmp	r1, r3
 8000c70:	f240 8118 	bls.w	8000ea4 <__udivmoddi4+0x28c>
 8000c74:	3f02      	subs	r7, #2
 8000c76:	442b      	add	r3, r5
 8000c78:	1a5b      	subs	r3, r3, r1
 8000c7a:	b2a4      	uxth	r4, r4
 8000c7c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c80:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c84:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c88:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c8c:	45a4      	cmp	ip, r4
 8000c8e:	d909      	bls.n	8000ca4 <__udivmoddi4+0x8c>
 8000c90:	192c      	adds	r4, r5, r4
 8000c92:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c96:	f080 8107 	bcs.w	8000ea8 <__udivmoddi4+0x290>
 8000c9a:	45a4      	cmp	ip, r4
 8000c9c:	f240 8104 	bls.w	8000ea8 <__udivmoddi4+0x290>
 8000ca0:	3802      	subs	r0, #2
 8000ca2:	442c      	add	r4, r5
 8000ca4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000ca8:	eba4 040c 	sub.w	r4, r4, ip
 8000cac:	2700      	movs	r7, #0
 8000cae:	b11e      	cbz	r6, 8000cb8 <__udivmoddi4+0xa0>
 8000cb0:	40d4      	lsrs	r4, r2
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	e9c6 4300 	strd	r4, r3, [r6]
 8000cb8:	4639      	mov	r1, r7
 8000cba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cbe:	428b      	cmp	r3, r1
 8000cc0:	d909      	bls.n	8000cd6 <__udivmoddi4+0xbe>
 8000cc2:	2e00      	cmp	r6, #0
 8000cc4:	f000 80eb 	beq.w	8000e9e <__udivmoddi4+0x286>
 8000cc8:	2700      	movs	r7, #0
 8000cca:	e9c6 0100 	strd	r0, r1, [r6]
 8000cce:	4638      	mov	r0, r7
 8000cd0:	4639      	mov	r1, r7
 8000cd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd6:	fab3 f783 	clz	r7, r3
 8000cda:	2f00      	cmp	r7, #0
 8000cdc:	d147      	bne.n	8000d6e <__udivmoddi4+0x156>
 8000cde:	428b      	cmp	r3, r1
 8000ce0:	d302      	bcc.n	8000ce8 <__udivmoddi4+0xd0>
 8000ce2:	4282      	cmp	r2, r0
 8000ce4:	f200 80fa 	bhi.w	8000edc <__udivmoddi4+0x2c4>
 8000ce8:	1a84      	subs	r4, r0, r2
 8000cea:	eb61 0303 	sbc.w	r3, r1, r3
 8000cee:	2001      	movs	r0, #1
 8000cf0:	4698      	mov	r8, r3
 8000cf2:	2e00      	cmp	r6, #0
 8000cf4:	d0e0      	beq.n	8000cb8 <__udivmoddi4+0xa0>
 8000cf6:	e9c6 4800 	strd	r4, r8, [r6]
 8000cfa:	e7dd      	b.n	8000cb8 <__udivmoddi4+0xa0>
 8000cfc:	b902      	cbnz	r2, 8000d00 <__udivmoddi4+0xe8>
 8000cfe:	deff      	udf	#255	; 0xff
 8000d00:	fab2 f282 	clz	r2, r2
 8000d04:	2a00      	cmp	r2, #0
 8000d06:	f040 808f 	bne.w	8000e28 <__udivmoddi4+0x210>
 8000d0a:	1b49      	subs	r1, r1, r5
 8000d0c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d10:	fa1f f885 	uxth.w	r8, r5
 8000d14:	2701      	movs	r7, #1
 8000d16:	fbb1 fcfe 	udiv	ip, r1, lr
 8000d1a:	0c23      	lsrs	r3, r4, #16
 8000d1c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000d20:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d24:	fb08 f10c 	mul.w	r1, r8, ip
 8000d28:	4299      	cmp	r1, r3
 8000d2a:	d907      	bls.n	8000d3c <__udivmoddi4+0x124>
 8000d2c:	18eb      	adds	r3, r5, r3
 8000d2e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d32:	d202      	bcs.n	8000d3a <__udivmoddi4+0x122>
 8000d34:	4299      	cmp	r1, r3
 8000d36:	f200 80cd 	bhi.w	8000ed4 <__udivmoddi4+0x2bc>
 8000d3a:	4684      	mov	ip, r0
 8000d3c:	1a59      	subs	r1, r3, r1
 8000d3e:	b2a3      	uxth	r3, r4
 8000d40:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d44:	fb0e 1410 	mls	r4, lr, r0, r1
 8000d48:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d4c:	fb08 f800 	mul.w	r8, r8, r0
 8000d50:	45a0      	cmp	r8, r4
 8000d52:	d907      	bls.n	8000d64 <__udivmoddi4+0x14c>
 8000d54:	192c      	adds	r4, r5, r4
 8000d56:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d5a:	d202      	bcs.n	8000d62 <__udivmoddi4+0x14a>
 8000d5c:	45a0      	cmp	r8, r4
 8000d5e:	f200 80b6 	bhi.w	8000ece <__udivmoddi4+0x2b6>
 8000d62:	4618      	mov	r0, r3
 8000d64:	eba4 0408 	sub.w	r4, r4, r8
 8000d68:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d6c:	e79f      	b.n	8000cae <__udivmoddi4+0x96>
 8000d6e:	f1c7 0c20 	rsb	ip, r7, #32
 8000d72:	40bb      	lsls	r3, r7
 8000d74:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000d78:	ea4e 0e03 	orr.w	lr, lr, r3
 8000d7c:	fa01 f407 	lsl.w	r4, r1, r7
 8000d80:	fa20 f50c 	lsr.w	r5, r0, ip
 8000d84:	fa21 f30c 	lsr.w	r3, r1, ip
 8000d88:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000d8c:	4325      	orrs	r5, r4
 8000d8e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000d92:	0c2c      	lsrs	r4, r5, #16
 8000d94:	fb08 3319 	mls	r3, r8, r9, r3
 8000d98:	fa1f fa8e 	uxth.w	sl, lr
 8000d9c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000da0:	fb09 f40a 	mul.w	r4, r9, sl
 8000da4:	429c      	cmp	r4, r3
 8000da6:	fa02 f207 	lsl.w	r2, r2, r7
 8000daa:	fa00 f107 	lsl.w	r1, r0, r7
 8000dae:	d90b      	bls.n	8000dc8 <__udivmoddi4+0x1b0>
 8000db0:	eb1e 0303 	adds.w	r3, lr, r3
 8000db4:	f109 30ff 	add.w	r0, r9, #4294967295
 8000db8:	f080 8087 	bcs.w	8000eca <__udivmoddi4+0x2b2>
 8000dbc:	429c      	cmp	r4, r3
 8000dbe:	f240 8084 	bls.w	8000eca <__udivmoddi4+0x2b2>
 8000dc2:	f1a9 0902 	sub.w	r9, r9, #2
 8000dc6:	4473      	add	r3, lr
 8000dc8:	1b1b      	subs	r3, r3, r4
 8000dca:	b2ad      	uxth	r5, r5
 8000dcc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dd0:	fb08 3310 	mls	r3, r8, r0, r3
 8000dd4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000dd8:	fb00 fa0a 	mul.w	sl, r0, sl
 8000ddc:	45a2      	cmp	sl, r4
 8000dde:	d908      	bls.n	8000df2 <__udivmoddi4+0x1da>
 8000de0:	eb1e 0404 	adds.w	r4, lr, r4
 8000de4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000de8:	d26b      	bcs.n	8000ec2 <__udivmoddi4+0x2aa>
 8000dea:	45a2      	cmp	sl, r4
 8000dec:	d969      	bls.n	8000ec2 <__udivmoddi4+0x2aa>
 8000dee:	3802      	subs	r0, #2
 8000df0:	4474      	add	r4, lr
 8000df2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000df6:	fba0 8902 	umull	r8, r9, r0, r2
 8000dfa:	eba4 040a 	sub.w	r4, r4, sl
 8000dfe:	454c      	cmp	r4, r9
 8000e00:	46c2      	mov	sl, r8
 8000e02:	464b      	mov	r3, r9
 8000e04:	d354      	bcc.n	8000eb0 <__udivmoddi4+0x298>
 8000e06:	d051      	beq.n	8000eac <__udivmoddi4+0x294>
 8000e08:	2e00      	cmp	r6, #0
 8000e0a:	d069      	beq.n	8000ee0 <__udivmoddi4+0x2c8>
 8000e0c:	ebb1 050a 	subs.w	r5, r1, sl
 8000e10:	eb64 0403 	sbc.w	r4, r4, r3
 8000e14:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000e18:	40fd      	lsrs	r5, r7
 8000e1a:	40fc      	lsrs	r4, r7
 8000e1c:	ea4c 0505 	orr.w	r5, ip, r5
 8000e20:	e9c6 5400 	strd	r5, r4, [r6]
 8000e24:	2700      	movs	r7, #0
 8000e26:	e747      	b.n	8000cb8 <__udivmoddi4+0xa0>
 8000e28:	f1c2 0320 	rsb	r3, r2, #32
 8000e2c:	fa20 f703 	lsr.w	r7, r0, r3
 8000e30:	4095      	lsls	r5, r2
 8000e32:	fa01 f002 	lsl.w	r0, r1, r2
 8000e36:	fa21 f303 	lsr.w	r3, r1, r3
 8000e3a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e3e:	4338      	orrs	r0, r7
 8000e40:	0c01      	lsrs	r1, r0, #16
 8000e42:	fbb3 f7fe 	udiv	r7, r3, lr
 8000e46:	fa1f f885 	uxth.w	r8, r5
 8000e4a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000e4e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e52:	fb07 f308 	mul.w	r3, r7, r8
 8000e56:	428b      	cmp	r3, r1
 8000e58:	fa04 f402 	lsl.w	r4, r4, r2
 8000e5c:	d907      	bls.n	8000e6e <__udivmoddi4+0x256>
 8000e5e:	1869      	adds	r1, r5, r1
 8000e60:	f107 3cff 	add.w	ip, r7, #4294967295
 8000e64:	d22f      	bcs.n	8000ec6 <__udivmoddi4+0x2ae>
 8000e66:	428b      	cmp	r3, r1
 8000e68:	d92d      	bls.n	8000ec6 <__udivmoddi4+0x2ae>
 8000e6a:	3f02      	subs	r7, #2
 8000e6c:	4429      	add	r1, r5
 8000e6e:	1acb      	subs	r3, r1, r3
 8000e70:	b281      	uxth	r1, r0
 8000e72:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e76:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e7a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e7e:	fb00 f308 	mul.w	r3, r0, r8
 8000e82:	428b      	cmp	r3, r1
 8000e84:	d907      	bls.n	8000e96 <__udivmoddi4+0x27e>
 8000e86:	1869      	adds	r1, r5, r1
 8000e88:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e8c:	d217      	bcs.n	8000ebe <__udivmoddi4+0x2a6>
 8000e8e:	428b      	cmp	r3, r1
 8000e90:	d915      	bls.n	8000ebe <__udivmoddi4+0x2a6>
 8000e92:	3802      	subs	r0, #2
 8000e94:	4429      	add	r1, r5
 8000e96:	1ac9      	subs	r1, r1, r3
 8000e98:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000e9c:	e73b      	b.n	8000d16 <__udivmoddi4+0xfe>
 8000e9e:	4637      	mov	r7, r6
 8000ea0:	4630      	mov	r0, r6
 8000ea2:	e709      	b.n	8000cb8 <__udivmoddi4+0xa0>
 8000ea4:	4607      	mov	r7, r0
 8000ea6:	e6e7      	b.n	8000c78 <__udivmoddi4+0x60>
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	e6fb      	b.n	8000ca4 <__udivmoddi4+0x8c>
 8000eac:	4541      	cmp	r1, r8
 8000eae:	d2ab      	bcs.n	8000e08 <__udivmoddi4+0x1f0>
 8000eb0:	ebb8 0a02 	subs.w	sl, r8, r2
 8000eb4:	eb69 020e 	sbc.w	r2, r9, lr
 8000eb8:	3801      	subs	r0, #1
 8000eba:	4613      	mov	r3, r2
 8000ebc:	e7a4      	b.n	8000e08 <__udivmoddi4+0x1f0>
 8000ebe:	4660      	mov	r0, ip
 8000ec0:	e7e9      	b.n	8000e96 <__udivmoddi4+0x27e>
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	e795      	b.n	8000df2 <__udivmoddi4+0x1da>
 8000ec6:	4667      	mov	r7, ip
 8000ec8:	e7d1      	b.n	8000e6e <__udivmoddi4+0x256>
 8000eca:	4681      	mov	r9, r0
 8000ecc:	e77c      	b.n	8000dc8 <__udivmoddi4+0x1b0>
 8000ece:	3802      	subs	r0, #2
 8000ed0:	442c      	add	r4, r5
 8000ed2:	e747      	b.n	8000d64 <__udivmoddi4+0x14c>
 8000ed4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ed8:	442b      	add	r3, r5
 8000eda:	e72f      	b.n	8000d3c <__udivmoddi4+0x124>
 8000edc:	4638      	mov	r0, r7
 8000ede:	e708      	b.n	8000cf2 <__udivmoddi4+0xda>
 8000ee0:	4637      	mov	r7, r6
 8000ee2:	e6e9      	b.n	8000cb8 <__udivmoddi4+0xa0>

08000ee4 <__aeabi_idiv0>:
 8000ee4:	4770      	bx	lr
 8000ee6:	bf00      	nop

08000ee8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000eec:	4b0e      	ldr	r3, [pc, #56]	; (8000f28 <HAL_Init+0x40>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	4a0d      	ldr	r2, [pc, #52]	; (8000f28 <HAL_Init+0x40>)
 8000ef2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ef6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ef8:	4b0b      	ldr	r3, [pc, #44]	; (8000f28 <HAL_Init+0x40>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	4a0a      	ldr	r2, [pc, #40]	; (8000f28 <HAL_Init+0x40>)
 8000efe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f02:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f04:	4b08      	ldr	r3, [pc, #32]	; (8000f28 <HAL_Init+0x40>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	4a07      	ldr	r2, [pc, #28]	; (8000f28 <HAL_Init+0x40>)
 8000f0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f0e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f10:	2003      	movs	r0, #3
 8000f12:	f000 fd07 	bl	8001924 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f16:	2000      	movs	r0, #0
 8000f18:	f000 f808 	bl	8000f2c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f1c:	f006 fa66 	bl	80073ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f20:	2300      	movs	r3, #0
}
 8000f22:	4618      	mov	r0, r3
 8000f24:	bd80      	pop	{r7, pc}
 8000f26:	bf00      	nop
 8000f28:	40023c00 	.word	0x40023c00

08000f2c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b082      	sub	sp, #8
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f34:	4b12      	ldr	r3, [pc, #72]	; (8000f80 <HAL_InitTick+0x54>)
 8000f36:	681a      	ldr	r2, [r3, #0]
 8000f38:	4b12      	ldr	r3, [pc, #72]	; (8000f84 <HAL_InitTick+0x58>)
 8000f3a:	781b      	ldrb	r3, [r3, #0]
 8000f3c:	4619      	mov	r1, r3
 8000f3e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f42:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f46:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	f000 fd1f 	bl	800198e <HAL_SYSTICK_Config>
 8000f50:	4603      	mov	r3, r0
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d001      	beq.n	8000f5a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f56:	2301      	movs	r3, #1
 8000f58:	e00e      	b.n	8000f78 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	2b0f      	cmp	r3, #15
 8000f5e:	d80a      	bhi.n	8000f76 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f60:	2200      	movs	r2, #0
 8000f62:	6879      	ldr	r1, [r7, #4]
 8000f64:	f04f 30ff 	mov.w	r0, #4294967295
 8000f68:	f000 fce7 	bl	800193a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f6c:	4a06      	ldr	r2, [pc, #24]	; (8000f88 <HAL_InitTick+0x5c>)
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f72:	2300      	movs	r3, #0
 8000f74:	e000      	b.n	8000f78 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f76:	2301      	movs	r3, #1
}
 8000f78:	4618      	mov	r0, r3
 8000f7a:	3708      	adds	r7, #8
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bd80      	pop	{r7, pc}
 8000f80:	20000060 	.word	0x20000060
 8000f84:	20000004 	.word	0x20000004
 8000f88:	20000000 	.word	0x20000000

08000f8c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f90:	4b06      	ldr	r3, [pc, #24]	; (8000fac <HAL_IncTick+0x20>)
 8000f92:	781b      	ldrb	r3, [r3, #0]
 8000f94:	461a      	mov	r2, r3
 8000f96:	4b06      	ldr	r3, [pc, #24]	; (8000fb0 <HAL_IncTick+0x24>)
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	4413      	add	r3, r2
 8000f9c:	4a04      	ldr	r2, [pc, #16]	; (8000fb0 <HAL_IncTick+0x24>)
 8000f9e:	6013      	str	r3, [r2, #0]
}
 8000fa0:	bf00      	nop
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa8:	4770      	bx	lr
 8000faa:	bf00      	nop
 8000fac:	20000004 	.word	0x20000004
 8000fb0:	200000fc 	.word	0x200000fc

08000fb4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	af00      	add	r7, sp, #0
  return uwTick;
 8000fb8:	4b03      	ldr	r3, [pc, #12]	; (8000fc8 <HAL_GetTick+0x14>)
 8000fba:	681b      	ldr	r3, [r3, #0]
}
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc4:	4770      	bx	lr
 8000fc6:	bf00      	nop
 8000fc8:	200000fc 	.word	0x200000fc

08000fcc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b084      	sub	sp, #16
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fd4:	f7ff ffee 	bl	8000fb4 <HAL_GetTick>
 8000fd8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fe4:	d005      	beq.n	8000ff2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000fe6:	4b09      	ldr	r3, [pc, #36]	; (800100c <HAL_Delay+0x40>)
 8000fe8:	781b      	ldrb	r3, [r3, #0]
 8000fea:	461a      	mov	r2, r3
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	4413      	add	r3, r2
 8000ff0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000ff2:	bf00      	nop
 8000ff4:	f7ff ffde 	bl	8000fb4 <HAL_GetTick>
 8000ff8:	4602      	mov	r2, r0
 8000ffa:	68bb      	ldr	r3, [r7, #8]
 8000ffc:	1ad3      	subs	r3, r2, r3
 8000ffe:	68fa      	ldr	r2, [r7, #12]
 8001000:	429a      	cmp	r2, r3
 8001002:	d8f7      	bhi.n	8000ff4 <HAL_Delay+0x28>
  {
  }
}
 8001004:	bf00      	nop
 8001006:	3710      	adds	r7, #16
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}
 800100c:	20000004 	.word	0x20000004

08001010 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b084      	sub	sp, #16
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001018:	2300      	movs	r3, #0
 800101a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	2b00      	cmp	r3, #0
 8001020:	d101      	bne.n	8001026 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001022:	2301      	movs	r3, #1
 8001024:	e033      	b.n	800108e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800102a:	2b00      	cmp	r3, #0
 800102c:	d109      	bne.n	8001042 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800102e:	6878      	ldr	r0, [r7, #4]
 8001030:	f006 fa04 	bl	800743c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	2200      	movs	r2, #0
 8001038:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	2200      	movs	r2, #0
 800103e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001046:	f003 0310 	and.w	r3, r3, #16
 800104a:	2b00      	cmp	r3, #0
 800104c:	d118      	bne.n	8001080 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001052:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001056:	f023 0302 	bic.w	r3, r3, #2
 800105a:	f043 0202 	orr.w	r2, r3, #2
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001062:	6878      	ldr	r0, [r7, #4]
 8001064:	f000 fa92 	bl	800158c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	2200      	movs	r2, #0
 800106c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001072:	f023 0303 	bic.w	r3, r3, #3
 8001076:	f043 0201 	orr.w	r2, r3, #1
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	641a      	str	r2, [r3, #64]	; 0x40
 800107e:	e001      	b.n	8001084 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001080:	2301      	movs	r3, #1
 8001082:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	2200      	movs	r2, #0
 8001088:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800108c:	7bfb      	ldrb	r3, [r7, #15]
}
 800108e:	4618      	mov	r0, r3
 8001090:	3710      	adds	r7, #16
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}
	...

08001098 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001098:	b480      	push	{r7}
 800109a:	b085      	sub	sp, #20
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80010a0:	2300      	movs	r3, #0
 80010a2:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80010aa:	2b01      	cmp	r3, #1
 80010ac:	d101      	bne.n	80010b2 <HAL_ADC_Start+0x1a>
 80010ae:	2302      	movs	r3, #2
 80010b0:	e0a5      	b.n	80011fe <HAL_ADC_Start+0x166>
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	2201      	movs	r2, #1
 80010b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	689b      	ldr	r3, [r3, #8]
 80010c0:	f003 0301 	and.w	r3, r3, #1
 80010c4:	2b01      	cmp	r3, #1
 80010c6:	d018      	beq.n	80010fa <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	689a      	ldr	r2, [r3, #8]
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	f042 0201 	orr.w	r2, r2, #1
 80010d6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80010d8:	4b4c      	ldr	r3, [pc, #304]	; (800120c <HAL_ADC_Start+0x174>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	4a4c      	ldr	r2, [pc, #304]	; (8001210 <HAL_ADC_Start+0x178>)
 80010de:	fba2 2303 	umull	r2, r3, r2, r3
 80010e2:	0c9a      	lsrs	r2, r3, #18
 80010e4:	4613      	mov	r3, r2
 80010e6:	005b      	lsls	r3, r3, #1
 80010e8:	4413      	add	r3, r2
 80010ea:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80010ec:	e002      	b.n	80010f4 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80010ee:	68bb      	ldr	r3, [r7, #8]
 80010f0:	3b01      	subs	r3, #1
 80010f2:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80010f4:	68bb      	ldr	r3, [r7, #8]
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d1f9      	bne.n	80010ee <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	689b      	ldr	r3, [r3, #8]
 8001100:	f003 0301 	and.w	r3, r3, #1
 8001104:	2b01      	cmp	r3, #1
 8001106:	d179      	bne.n	80011fc <HAL_ADC_Start+0x164>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800110c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001110:	f023 0301 	bic.w	r3, r3, #1
 8001114:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	685b      	ldr	r3, [r3, #4]
 8001122:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001126:	2b00      	cmp	r3, #0
 8001128:	d007      	beq.n	800113a <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800112e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001132:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800113e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001142:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001146:	d106      	bne.n	8001156 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800114c:	f023 0206 	bic.w	r2, r3, #6
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	645a      	str	r2, [r3, #68]	; 0x44
 8001154:	e002      	b.n	800115c <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	2200      	movs	r2, #0
 800115a:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	2200      	movs	r2, #0
 8001160:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001164:	4b2b      	ldr	r3, [pc, #172]	; (8001214 <HAL_ADC_Start+0x17c>)
 8001166:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001170:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	685b      	ldr	r3, [r3, #4]
 8001176:	f003 031f 	and.w	r3, r3, #31
 800117a:	2b00      	cmp	r3, #0
 800117c:	d12a      	bne.n	80011d4 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	4a25      	ldr	r2, [pc, #148]	; (8001218 <HAL_ADC_Start+0x180>)
 8001184:	4293      	cmp	r3, r2
 8001186:	d015      	beq.n	80011b4 <HAL_ADC_Start+0x11c>
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	4a23      	ldr	r2, [pc, #140]	; (800121c <HAL_ADC_Start+0x184>)
 800118e:	4293      	cmp	r3, r2
 8001190:	d105      	bne.n	800119e <HAL_ADC_Start+0x106>
 8001192:	4b20      	ldr	r3, [pc, #128]	; (8001214 <HAL_ADC_Start+0x17c>)
 8001194:	685b      	ldr	r3, [r3, #4]
 8001196:	f003 031f 	and.w	r3, r3, #31
 800119a:	2b00      	cmp	r3, #0
 800119c:	d00a      	beq.n	80011b4 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	4a1f      	ldr	r2, [pc, #124]	; (8001220 <HAL_ADC_Start+0x188>)
 80011a4:	4293      	cmp	r3, r2
 80011a6:	d129      	bne.n	80011fc <HAL_ADC_Start+0x164>
 80011a8:	4b1a      	ldr	r3, [pc, #104]	; (8001214 <HAL_ADC_Start+0x17c>)
 80011aa:	685b      	ldr	r3, [r3, #4]
 80011ac:	f003 031f 	and.w	r3, r3, #31
 80011b0:	2b0f      	cmp	r3, #15
 80011b2:	d823      	bhi.n	80011fc <HAL_ADC_Start+0x164>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	689b      	ldr	r3, [r3, #8]
 80011ba:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d11c      	bne.n	80011fc <HAL_ADC_Start+0x164>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	689a      	ldr	r2, [r3, #8]
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80011d0:	609a      	str	r2, [r3, #8]
 80011d2:	e013      	b.n	80011fc <HAL_ADC_Start+0x164>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	4a0f      	ldr	r2, [pc, #60]	; (8001218 <HAL_ADC_Start+0x180>)
 80011da:	4293      	cmp	r3, r2
 80011dc:	d10e      	bne.n	80011fc <HAL_ADC_Start+0x164>
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	689b      	ldr	r3, [r3, #8]
 80011e4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d107      	bne.n	80011fc <HAL_ADC_Start+0x164>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	689a      	ldr	r2, [r3, #8]
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80011fa:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 80011fc:	2300      	movs	r3, #0
}
 80011fe:	4618      	mov	r0, r3
 8001200:	3714      	adds	r7, #20
 8001202:	46bd      	mov	sp, r7
 8001204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001208:	4770      	bx	lr
 800120a:	bf00      	nop
 800120c:	20000060 	.word	0x20000060
 8001210:	431bde83 	.word	0x431bde83
 8001214:	40012300 	.word	0x40012300
 8001218:	40012000 	.word	0x40012000
 800121c:	40012100 	.word	0x40012100
 8001220:	40012200 	.word	0x40012200

08001224 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b084      	sub	sp, #16
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
 800122c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800122e:	2300      	movs	r3, #0
 8001230:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	689b      	ldr	r3, [r3, #8]
 8001238:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800123c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001240:	d113      	bne.n	800126a <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	689b      	ldr	r3, [r3, #8]
 8001248:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800124c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001250:	d10b      	bne.n	800126a <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001256:	f043 0220 	orr.w	r2, r3, #32
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	2200      	movs	r2, #0
 8001262:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8001266:	2301      	movs	r3, #1
 8001268:	e05c      	b.n	8001324 <HAL_ADC_PollForConversion+0x100>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 800126a:	f7ff fea3 	bl	8000fb4 <HAL_GetTick>
 800126e:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001270:	e01a      	b.n	80012a8 <HAL_ADC_PollForConversion+0x84>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001278:	d016      	beq.n	80012a8 <HAL_ADC_PollForConversion+0x84>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 800127a:	683b      	ldr	r3, [r7, #0]
 800127c:	2b00      	cmp	r3, #0
 800127e:	d007      	beq.n	8001290 <HAL_ADC_PollForConversion+0x6c>
 8001280:	f7ff fe98 	bl	8000fb4 <HAL_GetTick>
 8001284:	4602      	mov	r2, r0
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	1ad3      	subs	r3, r2, r3
 800128a:	683a      	ldr	r2, [r7, #0]
 800128c:	429a      	cmp	r2, r3
 800128e:	d20b      	bcs.n	80012a8 <HAL_ADC_PollForConversion+0x84>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001294:	f043 0204 	orr.w	r2, r3, #4
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	2200      	movs	r2, #0
 80012a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 80012a4:	2303      	movs	r3, #3
 80012a6:	e03d      	b.n	8001324 <HAL_ADC_PollForConversion+0x100>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	f003 0302 	and.w	r3, r3, #2
 80012b2:	2b02      	cmp	r3, #2
 80012b4:	d1dd      	bne.n	8001272 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	f06f 0212 	mvn.w	r2, #18
 80012be:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012c4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	689b      	ldr	r3, [r3, #8]
 80012d2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d123      	bne.n	8001322 <HAL_ADC_PollForConversion+0xfe>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d11f      	bne.n	8001322 <HAL_ADC_PollForConversion+0xfe>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012e8:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d006      	beq.n	80012fe <HAL_ADC_PollForConversion+0xda>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	689b      	ldr	r3, [r3, #8]
 80012f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d111      	bne.n	8001322 <HAL_ADC_PollForConversion+0xfe>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001302:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800130e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001312:	2b00      	cmp	r3, #0
 8001314:	d105      	bne.n	8001322 <HAL_ADC_PollForConversion+0xfe>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800131a:	f043 0201 	orr.w	r2, r3, #1
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001322:	2300      	movs	r3, #0
}
 8001324:	4618      	mov	r0, r3
 8001326:	3710      	adds	r7, #16
 8001328:	46bd      	mov	sp, r7
 800132a:	bd80      	pop	{r7, pc}

0800132c <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 800132c:	b480      	push	{r7}
 800132e:	b083      	sub	sp, #12
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800133a:	4618      	mov	r0, r3
 800133c:	370c      	adds	r7, #12
 800133e:	46bd      	mov	sp, r7
 8001340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001344:	4770      	bx	lr
	...

08001348 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001348:	b480      	push	{r7}
 800134a:	b085      	sub	sp, #20
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
 8001350:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001352:	2300      	movs	r3, #0
 8001354:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800135c:	2b01      	cmp	r3, #1
 800135e:	d101      	bne.n	8001364 <HAL_ADC_ConfigChannel+0x1c>
 8001360:	2302      	movs	r3, #2
 8001362:	e105      	b.n	8001570 <HAL_ADC_ConfigChannel+0x228>
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	2201      	movs	r2, #1
 8001368:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	2b09      	cmp	r3, #9
 8001372:	d925      	bls.n	80013c0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	68d9      	ldr	r1, [r3, #12]
 800137a:	683b      	ldr	r3, [r7, #0]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	b29b      	uxth	r3, r3
 8001380:	461a      	mov	r2, r3
 8001382:	4613      	mov	r3, r2
 8001384:	005b      	lsls	r3, r3, #1
 8001386:	4413      	add	r3, r2
 8001388:	3b1e      	subs	r3, #30
 800138a:	2207      	movs	r2, #7
 800138c:	fa02 f303 	lsl.w	r3, r2, r3
 8001390:	43da      	mvns	r2, r3
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	400a      	ands	r2, r1
 8001398:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	68d9      	ldr	r1, [r3, #12]
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	689a      	ldr	r2, [r3, #8]
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	b29b      	uxth	r3, r3
 80013aa:	4618      	mov	r0, r3
 80013ac:	4603      	mov	r3, r0
 80013ae:	005b      	lsls	r3, r3, #1
 80013b0:	4403      	add	r3, r0
 80013b2:	3b1e      	subs	r3, #30
 80013b4:	409a      	lsls	r2, r3
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	430a      	orrs	r2, r1
 80013bc:	60da      	str	r2, [r3, #12]
 80013be:	e022      	b.n	8001406 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	6919      	ldr	r1, [r3, #16]
 80013c6:	683b      	ldr	r3, [r7, #0]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	b29b      	uxth	r3, r3
 80013cc:	461a      	mov	r2, r3
 80013ce:	4613      	mov	r3, r2
 80013d0:	005b      	lsls	r3, r3, #1
 80013d2:	4413      	add	r3, r2
 80013d4:	2207      	movs	r2, #7
 80013d6:	fa02 f303 	lsl.w	r3, r2, r3
 80013da:	43da      	mvns	r2, r3
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	400a      	ands	r2, r1
 80013e2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	6919      	ldr	r1, [r3, #16]
 80013ea:	683b      	ldr	r3, [r7, #0]
 80013ec:	689a      	ldr	r2, [r3, #8]
 80013ee:	683b      	ldr	r3, [r7, #0]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	b29b      	uxth	r3, r3
 80013f4:	4618      	mov	r0, r3
 80013f6:	4603      	mov	r3, r0
 80013f8:	005b      	lsls	r3, r3, #1
 80013fa:	4403      	add	r3, r0
 80013fc:	409a      	lsls	r2, r3
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	430a      	orrs	r2, r1
 8001404:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001406:	683b      	ldr	r3, [r7, #0]
 8001408:	685b      	ldr	r3, [r3, #4]
 800140a:	2b06      	cmp	r3, #6
 800140c:	d824      	bhi.n	8001458 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	685a      	ldr	r2, [r3, #4]
 8001418:	4613      	mov	r3, r2
 800141a:	009b      	lsls	r3, r3, #2
 800141c:	4413      	add	r3, r2
 800141e:	3b05      	subs	r3, #5
 8001420:	221f      	movs	r2, #31
 8001422:	fa02 f303 	lsl.w	r3, r2, r3
 8001426:	43da      	mvns	r2, r3
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	400a      	ands	r2, r1
 800142e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	b29b      	uxth	r3, r3
 800143c:	4618      	mov	r0, r3
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	685a      	ldr	r2, [r3, #4]
 8001442:	4613      	mov	r3, r2
 8001444:	009b      	lsls	r3, r3, #2
 8001446:	4413      	add	r3, r2
 8001448:	3b05      	subs	r3, #5
 800144a:	fa00 f203 	lsl.w	r2, r0, r3
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	430a      	orrs	r2, r1
 8001454:	635a      	str	r2, [r3, #52]	; 0x34
 8001456:	e04c      	b.n	80014f2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	685b      	ldr	r3, [r3, #4]
 800145c:	2b0c      	cmp	r3, #12
 800145e:	d824      	bhi.n	80014aa <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001466:	683b      	ldr	r3, [r7, #0]
 8001468:	685a      	ldr	r2, [r3, #4]
 800146a:	4613      	mov	r3, r2
 800146c:	009b      	lsls	r3, r3, #2
 800146e:	4413      	add	r3, r2
 8001470:	3b23      	subs	r3, #35	; 0x23
 8001472:	221f      	movs	r2, #31
 8001474:	fa02 f303 	lsl.w	r3, r2, r3
 8001478:	43da      	mvns	r2, r3
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	400a      	ands	r2, r1
 8001480:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	b29b      	uxth	r3, r3
 800148e:	4618      	mov	r0, r3
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	685a      	ldr	r2, [r3, #4]
 8001494:	4613      	mov	r3, r2
 8001496:	009b      	lsls	r3, r3, #2
 8001498:	4413      	add	r3, r2
 800149a:	3b23      	subs	r3, #35	; 0x23
 800149c:	fa00 f203 	lsl.w	r2, r0, r3
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	430a      	orrs	r2, r1
 80014a6:	631a      	str	r2, [r3, #48]	; 0x30
 80014a8:	e023      	b.n	80014f2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	685a      	ldr	r2, [r3, #4]
 80014b4:	4613      	mov	r3, r2
 80014b6:	009b      	lsls	r3, r3, #2
 80014b8:	4413      	add	r3, r2
 80014ba:	3b41      	subs	r3, #65	; 0x41
 80014bc:	221f      	movs	r2, #31
 80014be:	fa02 f303 	lsl.w	r3, r2, r3
 80014c2:	43da      	mvns	r2, r3
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	400a      	ands	r2, r1
 80014ca:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	b29b      	uxth	r3, r3
 80014d8:	4618      	mov	r0, r3
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	685a      	ldr	r2, [r3, #4]
 80014de:	4613      	mov	r3, r2
 80014e0:	009b      	lsls	r3, r3, #2
 80014e2:	4413      	add	r3, r2
 80014e4:	3b41      	subs	r3, #65	; 0x41
 80014e6:	fa00 f203 	lsl.w	r2, r0, r3
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	430a      	orrs	r2, r1
 80014f0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80014f2:	4b22      	ldr	r3, [pc, #136]	; (800157c <HAL_ADC_ConfigChannel+0x234>)
 80014f4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	4a21      	ldr	r2, [pc, #132]	; (8001580 <HAL_ADC_ConfigChannel+0x238>)
 80014fc:	4293      	cmp	r3, r2
 80014fe:	d109      	bne.n	8001514 <HAL_ADC_ConfigChannel+0x1cc>
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	2b12      	cmp	r3, #18
 8001506:	d105      	bne.n	8001514 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	685b      	ldr	r3, [r3, #4]
 800150c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	4a19      	ldr	r2, [pc, #100]	; (8001580 <HAL_ADC_ConfigChannel+0x238>)
 800151a:	4293      	cmp	r3, r2
 800151c:	d123      	bne.n	8001566 <HAL_ADC_ConfigChannel+0x21e>
 800151e:	683b      	ldr	r3, [r7, #0]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	2b10      	cmp	r3, #16
 8001524:	d003      	beq.n	800152e <HAL_ADC_ConfigChannel+0x1e6>
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	2b11      	cmp	r3, #17
 800152c:	d11b      	bne.n	8001566 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	685b      	ldr	r3, [r3, #4]
 8001532:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	2b10      	cmp	r3, #16
 8001540:	d111      	bne.n	8001566 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001542:	4b10      	ldr	r3, [pc, #64]	; (8001584 <HAL_ADC_ConfigChannel+0x23c>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	4a10      	ldr	r2, [pc, #64]	; (8001588 <HAL_ADC_ConfigChannel+0x240>)
 8001548:	fba2 2303 	umull	r2, r3, r2, r3
 800154c:	0c9a      	lsrs	r2, r3, #18
 800154e:	4613      	mov	r3, r2
 8001550:	009b      	lsls	r3, r3, #2
 8001552:	4413      	add	r3, r2
 8001554:	005b      	lsls	r3, r3, #1
 8001556:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001558:	e002      	b.n	8001560 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800155a:	68bb      	ldr	r3, [r7, #8]
 800155c:	3b01      	subs	r3, #1
 800155e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001560:	68bb      	ldr	r3, [r7, #8]
 8001562:	2b00      	cmp	r3, #0
 8001564:	d1f9      	bne.n	800155a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	2200      	movs	r2, #0
 800156a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800156e:	2300      	movs	r3, #0
}
 8001570:	4618      	mov	r0, r3
 8001572:	3714      	adds	r7, #20
 8001574:	46bd      	mov	sp, r7
 8001576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157a:	4770      	bx	lr
 800157c:	40012300 	.word	0x40012300
 8001580:	40012000 	.word	0x40012000
 8001584:	20000060 	.word	0x20000060
 8001588:	431bde83 	.word	0x431bde83

0800158c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800158c:	b480      	push	{r7}
 800158e:	b085      	sub	sp, #20
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001594:	4b79      	ldr	r3, [pc, #484]	; (800177c <ADC_Init+0x1f0>)
 8001596:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	685b      	ldr	r3, [r3, #4]
 800159c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	685a      	ldr	r2, [r3, #4]
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	685b      	ldr	r3, [r3, #4]
 80015ac:	431a      	orrs	r2, r3
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	685a      	ldr	r2, [r3, #4]
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80015c0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	6859      	ldr	r1, [r3, #4]
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	691b      	ldr	r3, [r3, #16]
 80015cc:	021a      	lsls	r2, r3, #8
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	430a      	orrs	r2, r1
 80015d4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	685a      	ldr	r2, [r3, #4]
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80015e4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	6859      	ldr	r1, [r3, #4]
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	689a      	ldr	r2, [r3, #8]
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	430a      	orrs	r2, r1
 80015f6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	689a      	ldr	r2, [r3, #8]
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001606:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	6899      	ldr	r1, [r3, #8]
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	68da      	ldr	r2, [r3, #12]
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	430a      	orrs	r2, r1
 8001618:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800161e:	4a58      	ldr	r2, [pc, #352]	; (8001780 <ADC_Init+0x1f4>)
 8001620:	4293      	cmp	r3, r2
 8001622:	d022      	beq.n	800166a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	689a      	ldr	r2, [r3, #8]
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001632:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	6899      	ldr	r1, [r3, #8]
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	430a      	orrs	r2, r1
 8001644:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	689a      	ldr	r2, [r3, #8]
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001654:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	6899      	ldr	r1, [r3, #8]
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	430a      	orrs	r2, r1
 8001666:	609a      	str	r2, [r3, #8]
 8001668:	e00f      	b.n	800168a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	689a      	ldr	r2, [r3, #8]
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001678:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	689a      	ldr	r2, [r3, #8]
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001688:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	689a      	ldr	r2, [r3, #8]
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f022 0202 	bic.w	r2, r2, #2
 8001698:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	6899      	ldr	r1, [r3, #8]
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	7e1b      	ldrb	r3, [r3, #24]
 80016a4:	005a      	lsls	r2, r3, #1
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	430a      	orrs	r2, r1
 80016ac:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d01b      	beq.n	80016f0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	685a      	ldr	r2, [r3, #4]
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80016c6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	685a      	ldr	r2, [r3, #4]
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80016d6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	6859      	ldr	r1, [r3, #4]
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016e2:	3b01      	subs	r3, #1
 80016e4:	035a      	lsls	r2, r3, #13
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	430a      	orrs	r2, r1
 80016ec:	605a      	str	r2, [r3, #4]
 80016ee:	e007      	b.n	8001700 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	685a      	ldr	r2, [r3, #4]
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80016fe:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800170e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	69db      	ldr	r3, [r3, #28]
 800171a:	3b01      	subs	r3, #1
 800171c:	051a      	lsls	r2, r3, #20
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	430a      	orrs	r2, r1
 8001724:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	689a      	ldr	r2, [r3, #8]
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001734:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	6899      	ldr	r1, [r3, #8]
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001742:	025a      	lsls	r2, r3, #9
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	430a      	orrs	r2, r1
 800174a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	689a      	ldr	r2, [r3, #8]
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800175a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	6899      	ldr	r1, [r3, #8]
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	695b      	ldr	r3, [r3, #20]
 8001766:	029a      	lsls	r2, r3, #10
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	430a      	orrs	r2, r1
 800176e:	609a      	str	r2, [r3, #8]
}
 8001770:	bf00      	nop
 8001772:	3714      	adds	r7, #20
 8001774:	46bd      	mov	sp, r7
 8001776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177a:	4770      	bx	lr
 800177c:	40012300 	.word	0x40012300
 8001780:	0f000001 	.word	0x0f000001

08001784 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001784:	b480      	push	{r7}
 8001786:	b085      	sub	sp, #20
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	f003 0307 	and.w	r3, r3, #7
 8001792:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001794:	4b0c      	ldr	r3, [pc, #48]	; (80017c8 <__NVIC_SetPriorityGrouping+0x44>)
 8001796:	68db      	ldr	r3, [r3, #12]
 8001798:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800179a:	68ba      	ldr	r2, [r7, #8]
 800179c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017a0:	4013      	ands	r3, r2
 80017a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017a8:	68bb      	ldr	r3, [r7, #8]
 80017aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80017b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017b6:	4a04      	ldr	r2, [pc, #16]	; (80017c8 <__NVIC_SetPriorityGrouping+0x44>)
 80017b8:	68bb      	ldr	r3, [r7, #8]
 80017ba:	60d3      	str	r3, [r2, #12]
}
 80017bc:	bf00      	nop
 80017be:	3714      	adds	r7, #20
 80017c0:	46bd      	mov	sp, r7
 80017c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c6:	4770      	bx	lr
 80017c8:	e000ed00 	.word	0xe000ed00

080017cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017cc:	b480      	push	{r7}
 80017ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017d0:	4b04      	ldr	r3, [pc, #16]	; (80017e4 <__NVIC_GetPriorityGrouping+0x18>)
 80017d2:	68db      	ldr	r3, [r3, #12]
 80017d4:	0a1b      	lsrs	r3, r3, #8
 80017d6:	f003 0307 	and.w	r3, r3, #7
}
 80017da:	4618      	mov	r0, r3
 80017dc:	46bd      	mov	sp, r7
 80017de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e2:	4770      	bx	lr
 80017e4:	e000ed00 	.word	0xe000ed00

080017e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017e8:	b480      	push	{r7}
 80017ea:	b083      	sub	sp, #12
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	4603      	mov	r3, r0
 80017f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	db0b      	blt.n	8001812 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017fa:	79fb      	ldrb	r3, [r7, #7]
 80017fc:	f003 021f 	and.w	r2, r3, #31
 8001800:	4907      	ldr	r1, [pc, #28]	; (8001820 <__NVIC_EnableIRQ+0x38>)
 8001802:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001806:	095b      	lsrs	r3, r3, #5
 8001808:	2001      	movs	r0, #1
 800180a:	fa00 f202 	lsl.w	r2, r0, r2
 800180e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001812:	bf00      	nop
 8001814:	370c      	adds	r7, #12
 8001816:	46bd      	mov	sp, r7
 8001818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181c:	4770      	bx	lr
 800181e:	bf00      	nop
 8001820:	e000e100 	.word	0xe000e100

08001824 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001824:	b480      	push	{r7}
 8001826:	b083      	sub	sp, #12
 8001828:	af00      	add	r7, sp, #0
 800182a:	4603      	mov	r3, r0
 800182c:	6039      	str	r1, [r7, #0]
 800182e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001830:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001834:	2b00      	cmp	r3, #0
 8001836:	db0a      	blt.n	800184e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	b2da      	uxtb	r2, r3
 800183c:	490c      	ldr	r1, [pc, #48]	; (8001870 <__NVIC_SetPriority+0x4c>)
 800183e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001842:	0112      	lsls	r2, r2, #4
 8001844:	b2d2      	uxtb	r2, r2
 8001846:	440b      	add	r3, r1
 8001848:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800184c:	e00a      	b.n	8001864 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800184e:	683b      	ldr	r3, [r7, #0]
 8001850:	b2da      	uxtb	r2, r3
 8001852:	4908      	ldr	r1, [pc, #32]	; (8001874 <__NVIC_SetPriority+0x50>)
 8001854:	79fb      	ldrb	r3, [r7, #7]
 8001856:	f003 030f 	and.w	r3, r3, #15
 800185a:	3b04      	subs	r3, #4
 800185c:	0112      	lsls	r2, r2, #4
 800185e:	b2d2      	uxtb	r2, r2
 8001860:	440b      	add	r3, r1
 8001862:	761a      	strb	r2, [r3, #24]
}
 8001864:	bf00      	nop
 8001866:	370c      	adds	r7, #12
 8001868:	46bd      	mov	sp, r7
 800186a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186e:	4770      	bx	lr
 8001870:	e000e100 	.word	0xe000e100
 8001874:	e000ed00 	.word	0xe000ed00

08001878 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001878:	b480      	push	{r7}
 800187a:	b089      	sub	sp, #36	; 0x24
 800187c:	af00      	add	r7, sp, #0
 800187e:	60f8      	str	r0, [r7, #12]
 8001880:	60b9      	str	r1, [r7, #8]
 8001882:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	f003 0307 	and.w	r3, r3, #7
 800188a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800188c:	69fb      	ldr	r3, [r7, #28]
 800188e:	f1c3 0307 	rsb	r3, r3, #7
 8001892:	2b04      	cmp	r3, #4
 8001894:	bf28      	it	cs
 8001896:	2304      	movcs	r3, #4
 8001898:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800189a:	69fb      	ldr	r3, [r7, #28]
 800189c:	3304      	adds	r3, #4
 800189e:	2b06      	cmp	r3, #6
 80018a0:	d902      	bls.n	80018a8 <NVIC_EncodePriority+0x30>
 80018a2:	69fb      	ldr	r3, [r7, #28]
 80018a4:	3b03      	subs	r3, #3
 80018a6:	e000      	b.n	80018aa <NVIC_EncodePriority+0x32>
 80018a8:	2300      	movs	r3, #0
 80018aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018ac:	f04f 32ff 	mov.w	r2, #4294967295
 80018b0:	69bb      	ldr	r3, [r7, #24]
 80018b2:	fa02 f303 	lsl.w	r3, r2, r3
 80018b6:	43da      	mvns	r2, r3
 80018b8:	68bb      	ldr	r3, [r7, #8]
 80018ba:	401a      	ands	r2, r3
 80018bc:	697b      	ldr	r3, [r7, #20]
 80018be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018c0:	f04f 31ff 	mov.w	r1, #4294967295
 80018c4:	697b      	ldr	r3, [r7, #20]
 80018c6:	fa01 f303 	lsl.w	r3, r1, r3
 80018ca:	43d9      	mvns	r1, r3
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018d0:	4313      	orrs	r3, r2
         );
}
 80018d2:	4618      	mov	r0, r3
 80018d4:	3724      	adds	r7, #36	; 0x24
 80018d6:	46bd      	mov	sp, r7
 80018d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018dc:	4770      	bx	lr
	...

080018e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b082      	sub	sp, #8
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	3b01      	subs	r3, #1
 80018ec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80018f0:	d301      	bcc.n	80018f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018f2:	2301      	movs	r3, #1
 80018f4:	e00f      	b.n	8001916 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018f6:	4a0a      	ldr	r2, [pc, #40]	; (8001920 <SysTick_Config+0x40>)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	3b01      	subs	r3, #1
 80018fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018fe:	210f      	movs	r1, #15
 8001900:	f04f 30ff 	mov.w	r0, #4294967295
 8001904:	f7ff ff8e 	bl	8001824 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001908:	4b05      	ldr	r3, [pc, #20]	; (8001920 <SysTick_Config+0x40>)
 800190a:	2200      	movs	r2, #0
 800190c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800190e:	4b04      	ldr	r3, [pc, #16]	; (8001920 <SysTick_Config+0x40>)
 8001910:	2207      	movs	r2, #7
 8001912:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001914:	2300      	movs	r3, #0
}
 8001916:	4618      	mov	r0, r3
 8001918:	3708      	adds	r7, #8
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}
 800191e:	bf00      	nop
 8001920:	e000e010 	.word	0xe000e010

08001924 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b082      	sub	sp, #8
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800192c:	6878      	ldr	r0, [r7, #4]
 800192e:	f7ff ff29 	bl	8001784 <__NVIC_SetPriorityGrouping>
}
 8001932:	bf00      	nop
 8001934:	3708      	adds	r7, #8
 8001936:	46bd      	mov	sp, r7
 8001938:	bd80      	pop	{r7, pc}

0800193a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800193a:	b580      	push	{r7, lr}
 800193c:	b086      	sub	sp, #24
 800193e:	af00      	add	r7, sp, #0
 8001940:	4603      	mov	r3, r0
 8001942:	60b9      	str	r1, [r7, #8]
 8001944:	607a      	str	r2, [r7, #4]
 8001946:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001948:	2300      	movs	r3, #0
 800194a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800194c:	f7ff ff3e 	bl	80017cc <__NVIC_GetPriorityGrouping>
 8001950:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001952:	687a      	ldr	r2, [r7, #4]
 8001954:	68b9      	ldr	r1, [r7, #8]
 8001956:	6978      	ldr	r0, [r7, #20]
 8001958:	f7ff ff8e 	bl	8001878 <NVIC_EncodePriority>
 800195c:	4602      	mov	r2, r0
 800195e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001962:	4611      	mov	r1, r2
 8001964:	4618      	mov	r0, r3
 8001966:	f7ff ff5d 	bl	8001824 <__NVIC_SetPriority>
}
 800196a:	bf00      	nop
 800196c:	3718      	adds	r7, #24
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}

08001972 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001972:	b580      	push	{r7, lr}
 8001974:	b082      	sub	sp, #8
 8001976:	af00      	add	r7, sp, #0
 8001978:	4603      	mov	r3, r0
 800197a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800197c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001980:	4618      	mov	r0, r3
 8001982:	f7ff ff31 	bl	80017e8 <__NVIC_EnableIRQ>
}
 8001986:	bf00      	nop
 8001988:	3708      	adds	r7, #8
 800198a:	46bd      	mov	sp, r7
 800198c:	bd80      	pop	{r7, pc}

0800198e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800198e:	b580      	push	{r7, lr}
 8001990:	b082      	sub	sp, #8
 8001992:	af00      	add	r7, sp, #0
 8001994:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001996:	6878      	ldr	r0, [r7, #4]
 8001998:	f7ff ffa2 	bl	80018e0 <SysTick_Config>
 800199c:	4603      	mov	r3, r0
}
 800199e:	4618      	mov	r0, r3
 80019a0:	3708      	adds	r7, #8
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}
	...

080019a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019a8:	b480      	push	{r7}
 80019aa:	b089      	sub	sp, #36	; 0x24
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
 80019b0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80019b2:	2300      	movs	r3, #0
 80019b4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80019b6:	2300      	movs	r3, #0
 80019b8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80019ba:	2300      	movs	r3, #0
 80019bc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80019be:	2300      	movs	r3, #0
 80019c0:	61fb      	str	r3, [r7, #28]
 80019c2:	e16b      	b.n	8001c9c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80019c4:	2201      	movs	r2, #1
 80019c6:	69fb      	ldr	r3, [r7, #28]
 80019c8:	fa02 f303 	lsl.w	r3, r2, r3
 80019cc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	697a      	ldr	r2, [r7, #20]
 80019d4:	4013      	ands	r3, r2
 80019d6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80019d8:	693a      	ldr	r2, [r7, #16]
 80019da:	697b      	ldr	r3, [r7, #20]
 80019dc:	429a      	cmp	r2, r3
 80019de:	f040 815a 	bne.w	8001c96 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	685b      	ldr	r3, [r3, #4]
 80019e6:	2b02      	cmp	r3, #2
 80019e8:	d003      	beq.n	80019f2 <HAL_GPIO_Init+0x4a>
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	685b      	ldr	r3, [r3, #4]
 80019ee:	2b12      	cmp	r3, #18
 80019f0:	d123      	bne.n	8001a3a <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80019f2:	69fb      	ldr	r3, [r7, #28]
 80019f4:	08da      	lsrs	r2, r3, #3
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	3208      	adds	r2, #8
 80019fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001a00:	69fb      	ldr	r3, [r7, #28]
 8001a02:	f003 0307 	and.w	r3, r3, #7
 8001a06:	009b      	lsls	r3, r3, #2
 8001a08:	220f      	movs	r2, #15
 8001a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a0e:	43db      	mvns	r3, r3
 8001a10:	69ba      	ldr	r2, [r7, #24]
 8001a12:	4013      	ands	r3, r2
 8001a14:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	691a      	ldr	r2, [r3, #16]
 8001a1a:	69fb      	ldr	r3, [r7, #28]
 8001a1c:	f003 0307 	and.w	r3, r3, #7
 8001a20:	009b      	lsls	r3, r3, #2
 8001a22:	fa02 f303 	lsl.w	r3, r2, r3
 8001a26:	69ba      	ldr	r2, [r7, #24]
 8001a28:	4313      	orrs	r3, r2
 8001a2a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001a2c:	69fb      	ldr	r3, [r7, #28]
 8001a2e:	08da      	lsrs	r2, r3, #3
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	3208      	adds	r2, #8
 8001a34:	69b9      	ldr	r1, [r7, #24]
 8001a36:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001a40:	69fb      	ldr	r3, [r7, #28]
 8001a42:	005b      	lsls	r3, r3, #1
 8001a44:	2203      	movs	r2, #3
 8001a46:	fa02 f303 	lsl.w	r3, r2, r3
 8001a4a:	43db      	mvns	r3, r3
 8001a4c:	69ba      	ldr	r2, [r7, #24]
 8001a4e:	4013      	ands	r3, r2
 8001a50:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	685b      	ldr	r3, [r3, #4]
 8001a56:	f003 0203 	and.w	r2, r3, #3
 8001a5a:	69fb      	ldr	r3, [r7, #28]
 8001a5c:	005b      	lsls	r3, r3, #1
 8001a5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a62:	69ba      	ldr	r2, [r7, #24]
 8001a64:	4313      	orrs	r3, r2
 8001a66:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	69ba      	ldr	r2, [r7, #24]
 8001a6c:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	685b      	ldr	r3, [r3, #4]
 8001a72:	2b01      	cmp	r3, #1
 8001a74:	d00b      	beq.n	8001a8e <HAL_GPIO_Init+0xe6>
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	685b      	ldr	r3, [r3, #4]
 8001a7a:	2b02      	cmp	r3, #2
 8001a7c:	d007      	beq.n	8001a8e <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a7e:	683b      	ldr	r3, [r7, #0]
 8001a80:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001a82:	2b11      	cmp	r3, #17
 8001a84:	d003      	beq.n	8001a8e <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	685b      	ldr	r3, [r3, #4]
 8001a8a:	2b12      	cmp	r3, #18
 8001a8c:	d130      	bne.n	8001af0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	689b      	ldr	r3, [r3, #8]
 8001a92:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001a94:	69fb      	ldr	r3, [r7, #28]
 8001a96:	005b      	lsls	r3, r3, #1
 8001a98:	2203      	movs	r2, #3
 8001a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a9e:	43db      	mvns	r3, r3
 8001aa0:	69ba      	ldr	r2, [r7, #24]
 8001aa2:	4013      	ands	r3, r2
 8001aa4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	68da      	ldr	r2, [r3, #12]
 8001aaa:	69fb      	ldr	r3, [r7, #28]
 8001aac:	005b      	lsls	r3, r3, #1
 8001aae:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab2:	69ba      	ldr	r2, [r7, #24]
 8001ab4:	4313      	orrs	r3, r2
 8001ab6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	69ba      	ldr	r2, [r7, #24]
 8001abc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ac4:	2201      	movs	r2, #1
 8001ac6:	69fb      	ldr	r3, [r7, #28]
 8001ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8001acc:	43db      	mvns	r3, r3
 8001ace:	69ba      	ldr	r2, [r7, #24]
 8001ad0:	4013      	ands	r3, r2
 8001ad2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	685b      	ldr	r3, [r3, #4]
 8001ad8:	091b      	lsrs	r3, r3, #4
 8001ada:	f003 0201 	and.w	r2, r3, #1
 8001ade:	69fb      	ldr	r3, [r7, #28]
 8001ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae4:	69ba      	ldr	r2, [r7, #24]
 8001ae6:	4313      	orrs	r3, r2
 8001ae8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	69ba      	ldr	r2, [r7, #24]
 8001aee:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	68db      	ldr	r3, [r3, #12]
 8001af4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001af6:	69fb      	ldr	r3, [r7, #28]
 8001af8:	005b      	lsls	r3, r3, #1
 8001afa:	2203      	movs	r2, #3
 8001afc:	fa02 f303 	lsl.w	r3, r2, r3
 8001b00:	43db      	mvns	r3, r3
 8001b02:	69ba      	ldr	r2, [r7, #24]
 8001b04:	4013      	ands	r3, r2
 8001b06:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	689a      	ldr	r2, [r3, #8]
 8001b0c:	69fb      	ldr	r3, [r7, #28]
 8001b0e:	005b      	lsls	r3, r3, #1
 8001b10:	fa02 f303 	lsl.w	r3, r2, r3
 8001b14:	69ba      	ldr	r2, [r7, #24]
 8001b16:	4313      	orrs	r3, r2
 8001b18:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	69ba      	ldr	r2, [r7, #24]
 8001b1e:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	685b      	ldr	r3, [r3, #4]
 8001b24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	f000 80b4 	beq.w	8001c96 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b2e:	2300      	movs	r3, #0
 8001b30:	60fb      	str	r3, [r7, #12]
 8001b32:	4b5f      	ldr	r3, [pc, #380]	; (8001cb0 <HAL_GPIO_Init+0x308>)
 8001b34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b36:	4a5e      	ldr	r2, [pc, #376]	; (8001cb0 <HAL_GPIO_Init+0x308>)
 8001b38:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b3c:	6453      	str	r3, [r2, #68]	; 0x44
 8001b3e:	4b5c      	ldr	r3, [pc, #368]	; (8001cb0 <HAL_GPIO_Init+0x308>)
 8001b40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b42:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b46:	60fb      	str	r3, [r7, #12]
 8001b48:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001b4a:	4a5a      	ldr	r2, [pc, #360]	; (8001cb4 <HAL_GPIO_Init+0x30c>)
 8001b4c:	69fb      	ldr	r3, [r7, #28]
 8001b4e:	089b      	lsrs	r3, r3, #2
 8001b50:	3302      	adds	r3, #2
 8001b52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b56:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001b58:	69fb      	ldr	r3, [r7, #28]
 8001b5a:	f003 0303 	and.w	r3, r3, #3
 8001b5e:	009b      	lsls	r3, r3, #2
 8001b60:	220f      	movs	r2, #15
 8001b62:	fa02 f303 	lsl.w	r3, r2, r3
 8001b66:	43db      	mvns	r3, r3
 8001b68:	69ba      	ldr	r2, [r7, #24]
 8001b6a:	4013      	ands	r3, r2
 8001b6c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	4a51      	ldr	r2, [pc, #324]	; (8001cb8 <HAL_GPIO_Init+0x310>)
 8001b72:	4293      	cmp	r3, r2
 8001b74:	d02b      	beq.n	8001bce <HAL_GPIO_Init+0x226>
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	4a50      	ldr	r2, [pc, #320]	; (8001cbc <HAL_GPIO_Init+0x314>)
 8001b7a:	4293      	cmp	r3, r2
 8001b7c:	d025      	beq.n	8001bca <HAL_GPIO_Init+0x222>
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	4a4f      	ldr	r2, [pc, #316]	; (8001cc0 <HAL_GPIO_Init+0x318>)
 8001b82:	4293      	cmp	r3, r2
 8001b84:	d01f      	beq.n	8001bc6 <HAL_GPIO_Init+0x21e>
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	4a4e      	ldr	r2, [pc, #312]	; (8001cc4 <HAL_GPIO_Init+0x31c>)
 8001b8a:	4293      	cmp	r3, r2
 8001b8c:	d019      	beq.n	8001bc2 <HAL_GPIO_Init+0x21a>
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	4a4d      	ldr	r2, [pc, #308]	; (8001cc8 <HAL_GPIO_Init+0x320>)
 8001b92:	4293      	cmp	r3, r2
 8001b94:	d013      	beq.n	8001bbe <HAL_GPIO_Init+0x216>
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	4a4c      	ldr	r2, [pc, #304]	; (8001ccc <HAL_GPIO_Init+0x324>)
 8001b9a:	4293      	cmp	r3, r2
 8001b9c:	d00d      	beq.n	8001bba <HAL_GPIO_Init+0x212>
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	4a4b      	ldr	r2, [pc, #300]	; (8001cd0 <HAL_GPIO_Init+0x328>)
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	d007      	beq.n	8001bb6 <HAL_GPIO_Init+0x20e>
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	4a4a      	ldr	r2, [pc, #296]	; (8001cd4 <HAL_GPIO_Init+0x32c>)
 8001baa:	4293      	cmp	r3, r2
 8001bac:	d101      	bne.n	8001bb2 <HAL_GPIO_Init+0x20a>
 8001bae:	2307      	movs	r3, #7
 8001bb0:	e00e      	b.n	8001bd0 <HAL_GPIO_Init+0x228>
 8001bb2:	2308      	movs	r3, #8
 8001bb4:	e00c      	b.n	8001bd0 <HAL_GPIO_Init+0x228>
 8001bb6:	2306      	movs	r3, #6
 8001bb8:	e00a      	b.n	8001bd0 <HAL_GPIO_Init+0x228>
 8001bba:	2305      	movs	r3, #5
 8001bbc:	e008      	b.n	8001bd0 <HAL_GPIO_Init+0x228>
 8001bbe:	2304      	movs	r3, #4
 8001bc0:	e006      	b.n	8001bd0 <HAL_GPIO_Init+0x228>
 8001bc2:	2303      	movs	r3, #3
 8001bc4:	e004      	b.n	8001bd0 <HAL_GPIO_Init+0x228>
 8001bc6:	2302      	movs	r3, #2
 8001bc8:	e002      	b.n	8001bd0 <HAL_GPIO_Init+0x228>
 8001bca:	2301      	movs	r3, #1
 8001bcc:	e000      	b.n	8001bd0 <HAL_GPIO_Init+0x228>
 8001bce:	2300      	movs	r3, #0
 8001bd0:	69fa      	ldr	r2, [r7, #28]
 8001bd2:	f002 0203 	and.w	r2, r2, #3
 8001bd6:	0092      	lsls	r2, r2, #2
 8001bd8:	4093      	lsls	r3, r2
 8001bda:	69ba      	ldr	r2, [r7, #24]
 8001bdc:	4313      	orrs	r3, r2
 8001bde:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001be0:	4934      	ldr	r1, [pc, #208]	; (8001cb4 <HAL_GPIO_Init+0x30c>)
 8001be2:	69fb      	ldr	r3, [r7, #28]
 8001be4:	089b      	lsrs	r3, r3, #2
 8001be6:	3302      	adds	r3, #2
 8001be8:	69ba      	ldr	r2, [r7, #24]
 8001bea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001bee:	4b3a      	ldr	r3, [pc, #232]	; (8001cd8 <HAL_GPIO_Init+0x330>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bf4:	693b      	ldr	r3, [r7, #16]
 8001bf6:	43db      	mvns	r3, r3
 8001bf8:	69ba      	ldr	r2, [r7, #24]
 8001bfa:	4013      	ands	r3, r2
 8001bfc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	685b      	ldr	r3, [r3, #4]
 8001c02:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d003      	beq.n	8001c12 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001c0a:	69ba      	ldr	r2, [r7, #24]
 8001c0c:	693b      	ldr	r3, [r7, #16]
 8001c0e:	4313      	orrs	r3, r2
 8001c10:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001c12:	4a31      	ldr	r2, [pc, #196]	; (8001cd8 <HAL_GPIO_Init+0x330>)
 8001c14:	69bb      	ldr	r3, [r7, #24]
 8001c16:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001c18:	4b2f      	ldr	r3, [pc, #188]	; (8001cd8 <HAL_GPIO_Init+0x330>)
 8001c1a:	685b      	ldr	r3, [r3, #4]
 8001c1c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c1e:	693b      	ldr	r3, [r7, #16]
 8001c20:	43db      	mvns	r3, r3
 8001c22:	69ba      	ldr	r2, [r7, #24]
 8001c24:	4013      	ands	r3, r2
 8001c26:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	685b      	ldr	r3, [r3, #4]
 8001c2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d003      	beq.n	8001c3c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001c34:	69ba      	ldr	r2, [r7, #24]
 8001c36:	693b      	ldr	r3, [r7, #16]
 8001c38:	4313      	orrs	r3, r2
 8001c3a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001c3c:	4a26      	ldr	r2, [pc, #152]	; (8001cd8 <HAL_GPIO_Init+0x330>)
 8001c3e:	69bb      	ldr	r3, [r7, #24]
 8001c40:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c42:	4b25      	ldr	r3, [pc, #148]	; (8001cd8 <HAL_GPIO_Init+0x330>)
 8001c44:	689b      	ldr	r3, [r3, #8]
 8001c46:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c48:	693b      	ldr	r3, [r7, #16]
 8001c4a:	43db      	mvns	r3, r3
 8001c4c:	69ba      	ldr	r2, [r7, #24]
 8001c4e:	4013      	ands	r3, r2
 8001c50:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	685b      	ldr	r3, [r3, #4]
 8001c56:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d003      	beq.n	8001c66 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001c5e:	69ba      	ldr	r2, [r7, #24]
 8001c60:	693b      	ldr	r3, [r7, #16]
 8001c62:	4313      	orrs	r3, r2
 8001c64:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001c66:	4a1c      	ldr	r2, [pc, #112]	; (8001cd8 <HAL_GPIO_Init+0x330>)
 8001c68:	69bb      	ldr	r3, [r7, #24]
 8001c6a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001c6c:	4b1a      	ldr	r3, [pc, #104]	; (8001cd8 <HAL_GPIO_Init+0x330>)
 8001c6e:	68db      	ldr	r3, [r3, #12]
 8001c70:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c72:	693b      	ldr	r3, [r7, #16]
 8001c74:	43db      	mvns	r3, r3
 8001c76:	69ba      	ldr	r2, [r7, #24]
 8001c78:	4013      	ands	r3, r2
 8001c7a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d003      	beq.n	8001c90 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001c88:	69ba      	ldr	r2, [r7, #24]
 8001c8a:	693b      	ldr	r3, [r7, #16]
 8001c8c:	4313      	orrs	r3, r2
 8001c8e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001c90:	4a11      	ldr	r2, [pc, #68]	; (8001cd8 <HAL_GPIO_Init+0x330>)
 8001c92:	69bb      	ldr	r3, [r7, #24]
 8001c94:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c96:	69fb      	ldr	r3, [r7, #28]
 8001c98:	3301      	adds	r3, #1
 8001c9a:	61fb      	str	r3, [r7, #28]
 8001c9c:	69fb      	ldr	r3, [r7, #28]
 8001c9e:	2b0f      	cmp	r3, #15
 8001ca0:	f67f ae90 	bls.w	80019c4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001ca4:	bf00      	nop
 8001ca6:	3724      	adds	r7, #36	; 0x24
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cae:	4770      	bx	lr
 8001cb0:	40023800 	.word	0x40023800
 8001cb4:	40013800 	.word	0x40013800
 8001cb8:	40020000 	.word	0x40020000
 8001cbc:	40020400 	.word	0x40020400
 8001cc0:	40020800 	.word	0x40020800
 8001cc4:	40020c00 	.word	0x40020c00
 8001cc8:	40021000 	.word	0x40021000
 8001ccc:	40021400 	.word	0x40021400
 8001cd0:	40021800 	.word	0x40021800
 8001cd4:	40021c00 	.word	0x40021c00
 8001cd8:	40013c00 	.word	0x40013c00

08001cdc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	b085      	sub	sp, #20
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
 8001ce4:	460b      	mov	r3, r1
 8001ce6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	691a      	ldr	r2, [r3, #16]
 8001cec:	887b      	ldrh	r3, [r7, #2]
 8001cee:	4013      	ands	r3, r2
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d002      	beq.n	8001cfa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001cf4:	2301      	movs	r3, #1
 8001cf6:	73fb      	strb	r3, [r7, #15]
 8001cf8:	e001      	b.n	8001cfe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001cfe:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d00:	4618      	mov	r0, r3
 8001d02:	3714      	adds	r7, #20
 8001d04:	46bd      	mov	sp, r7
 8001d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0a:	4770      	bx	lr

08001d0c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	b083      	sub	sp, #12
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
 8001d14:	460b      	mov	r3, r1
 8001d16:	807b      	strh	r3, [r7, #2]
 8001d18:	4613      	mov	r3, r2
 8001d1a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d1c:	787b      	ldrb	r3, [r7, #1]
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d003      	beq.n	8001d2a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d22:	887a      	ldrh	r2, [r7, #2]
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001d28:	e003      	b.n	8001d32 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001d2a:	887b      	ldrh	r3, [r7, #2]
 8001d2c:	041a      	lsls	r2, r3, #16
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	619a      	str	r2, [r3, #24]
}
 8001d32:	bf00      	nop
 8001d34:	370c      	adds	r7, #12
 8001d36:	46bd      	mov	sp, r7
 8001d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3c:	4770      	bx	lr
	...

08001d40 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b086      	sub	sp, #24
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d101      	bne.n	8001d52 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d4e:	2301      	movs	r3, #1
 8001d50:	e22d      	b.n	80021ae <HAL_RCC_OscConfig+0x46e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f003 0301 	and.w	r3, r3, #1
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d075      	beq.n	8001e4a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001d5e:	4ba3      	ldr	r3, [pc, #652]	; (8001fec <HAL_RCC_OscConfig+0x2ac>)
 8001d60:	689b      	ldr	r3, [r3, #8]
 8001d62:	f003 030c 	and.w	r3, r3, #12
 8001d66:	2b04      	cmp	r3, #4
 8001d68:	d00c      	beq.n	8001d84 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d6a:	4ba0      	ldr	r3, [pc, #640]	; (8001fec <HAL_RCC_OscConfig+0x2ac>)
 8001d6c:	689b      	ldr	r3, [r3, #8]
 8001d6e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001d72:	2b08      	cmp	r3, #8
 8001d74:	d112      	bne.n	8001d9c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d76:	4b9d      	ldr	r3, [pc, #628]	; (8001fec <HAL_RCC_OscConfig+0x2ac>)
 8001d78:	685b      	ldr	r3, [r3, #4]
 8001d7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d7e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001d82:	d10b      	bne.n	8001d9c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d84:	4b99      	ldr	r3, [pc, #612]	; (8001fec <HAL_RCC_OscConfig+0x2ac>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d05b      	beq.n	8001e48 <HAL_RCC_OscConfig+0x108>
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	685b      	ldr	r3, [r3, #4]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d157      	bne.n	8001e48 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001d98:	2301      	movs	r3, #1
 8001d9a:	e208      	b.n	80021ae <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	685b      	ldr	r3, [r3, #4]
 8001da0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001da4:	d106      	bne.n	8001db4 <HAL_RCC_OscConfig+0x74>
 8001da6:	4b91      	ldr	r3, [pc, #580]	; (8001fec <HAL_RCC_OscConfig+0x2ac>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	4a90      	ldr	r2, [pc, #576]	; (8001fec <HAL_RCC_OscConfig+0x2ac>)
 8001dac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001db0:	6013      	str	r3, [r2, #0]
 8001db2:	e01d      	b.n	8001df0 <HAL_RCC_OscConfig+0xb0>
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	685b      	ldr	r3, [r3, #4]
 8001db8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001dbc:	d10c      	bne.n	8001dd8 <HAL_RCC_OscConfig+0x98>
 8001dbe:	4b8b      	ldr	r3, [pc, #556]	; (8001fec <HAL_RCC_OscConfig+0x2ac>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	4a8a      	ldr	r2, [pc, #552]	; (8001fec <HAL_RCC_OscConfig+0x2ac>)
 8001dc4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001dc8:	6013      	str	r3, [r2, #0]
 8001dca:	4b88      	ldr	r3, [pc, #544]	; (8001fec <HAL_RCC_OscConfig+0x2ac>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	4a87      	ldr	r2, [pc, #540]	; (8001fec <HAL_RCC_OscConfig+0x2ac>)
 8001dd0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001dd4:	6013      	str	r3, [r2, #0]
 8001dd6:	e00b      	b.n	8001df0 <HAL_RCC_OscConfig+0xb0>
 8001dd8:	4b84      	ldr	r3, [pc, #528]	; (8001fec <HAL_RCC_OscConfig+0x2ac>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	4a83      	ldr	r2, [pc, #524]	; (8001fec <HAL_RCC_OscConfig+0x2ac>)
 8001dde:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001de2:	6013      	str	r3, [r2, #0]
 8001de4:	4b81      	ldr	r3, [pc, #516]	; (8001fec <HAL_RCC_OscConfig+0x2ac>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4a80      	ldr	r2, [pc, #512]	; (8001fec <HAL_RCC_OscConfig+0x2ac>)
 8001dea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001dee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	685b      	ldr	r3, [r3, #4]
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d013      	beq.n	8001e20 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001df8:	f7ff f8dc 	bl	8000fb4 <HAL_GetTick>
 8001dfc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dfe:	e008      	b.n	8001e12 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e00:	f7ff f8d8 	bl	8000fb4 <HAL_GetTick>
 8001e04:	4602      	mov	r2, r0
 8001e06:	693b      	ldr	r3, [r7, #16]
 8001e08:	1ad3      	subs	r3, r2, r3
 8001e0a:	2b64      	cmp	r3, #100	; 0x64
 8001e0c:	d901      	bls.n	8001e12 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001e0e:	2303      	movs	r3, #3
 8001e10:	e1cd      	b.n	80021ae <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e12:	4b76      	ldr	r3, [pc, #472]	; (8001fec <HAL_RCC_OscConfig+0x2ac>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d0f0      	beq.n	8001e00 <HAL_RCC_OscConfig+0xc0>
 8001e1e:	e014      	b.n	8001e4a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e20:	f7ff f8c8 	bl	8000fb4 <HAL_GetTick>
 8001e24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e26:	e008      	b.n	8001e3a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e28:	f7ff f8c4 	bl	8000fb4 <HAL_GetTick>
 8001e2c:	4602      	mov	r2, r0
 8001e2e:	693b      	ldr	r3, [r7, #16]
 8001e30:	1ad3      	subs	r3, r2, r3
 8001e32:	2b64      	cmp	r3, #100	; 0x64
 8001e34:	d901      	bls.n	8001e3a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001e36:	2303      	movs	r3, #3
 8001e38:	e1b9      	b.n	80021ae <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e3a:	4b6c      	ldr	r3, [pc, #432]	; (8001fec <HAL_RCC_OscConfig+0x2ac>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d1f0      	bne.n	8001e28 <HAL_RCC_OscConfig+0xe8>
 8001e46:	e000      	b.n	8001e4a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e48:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f003 0302 	and.w	r3, r3, #2
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d063      	beq.n	8001f1e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001e56:	4b65      	ldr	r3, [pc, #404]	; (8001fec <HAL_RCC_OscConfig+0x2ac>)
 8001e58:	689b      	ldr	r3, [r3, #8]
 8001e5a:	f003 030c 	and.w	r3, r3, #12
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d00b      	beq.n	8001e7a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e62:	4b62      	ldr	r3, [pc, #392]	; (8001fec <HAL_RCC_OscConfig+0x2ac>)
 8001e64:	689b      	ldr	r3, [r3, #8]
 8001e66:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001e6a:	2b08      	cmp	r3, #8
 8001e6c:	d11c      	bne.n	8001ea8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e6e:	4b5f      	ldr	r3, [pc, #380]	; (8001fec <HAL_RCC_OscConfig+0x2ac>)
 8001e70:	685b      	ldr	r3, [r3, #4]
 8001e72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d116      	bne.n	8001ea8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e7a:	4b5c      	ldr	r3, [pc, #368]	; (8001fec <HAL_RCC_OscConfig+0x2ac>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f003 0302 	and.w	r3, r3, #2
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d005      	beq.n	8001e92 <HAL_RCC_OscConfig+0x152>
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	68db      	ldr	r3, [r3, #12]
 8001e8a:	2b01      	cmp	r3, #1
 8001e8c:	d001      	beq.n	8001e92 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001e8e:	2301      	movs	r3, #1
 8001e90:	e18d      	b.n	80021ae <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e92:	4b56      	ldr	r3, [pc, #344]	; (8001fec <HAL_RCC_OscConfig+0x2ac>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	691b      	ldr	r3, [r3, #16]
 8001e9e:	00db      	lsls	r3, r3, #3
 8001ea0:	4952      	ldr	r1, [pc, #328]	; (8001fec <HAL_RCC_OscConfig+0x2ac>)
 8001ea2:	4313      	orrs	r3, r2
 8001ea4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ea6:	e03a      	b.n	8001f1e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	68db      	ldr	r3, [r3, #12]
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d020      	beq.n	8001ef2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001eb0:	4b4f      	ldr	r3, [pc, #316]	; (8001ff0 <HAL_RCC_OscConfig+0x2b0>)
 8001eb2:	2201      	movs	r2, #1
 8001eb4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001eb6:	f7ff f87d 	bl	8000fb4 <HAL_GetTick>
 8001eba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ebc:	e008      	b.n	8001ed0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ebe:	f7ff f879 	bl	8000fb4 <HAL_GetTick>
 8001ec2:	4602      	mov	r2, r0
 8001ec4:	693b      	ldr	r3, [r7, #16]
 8001ec6:	1ad3      	subs	r3, r2, r3
 8001ec8:	2b02      	cmp	r3, #2
 8001eca:	d901      	bls.n	8001ed0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001ecc:	2303      	movs	r3, #3
 8001ece:	e16e      	b.n	80021ae <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ed0:	4b46      	ldr	r3, [pc, #280]	; (8001fec <HAL_RCC_OscConfig+0x2ac>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f003 0302 	and.w	r3, r3, #2
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d0f0      	beq.n	8001ebe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001edc:	4b43      	ldr	r3, [pc, #268]	; (8001fec <HAL_RCC_OscConfig+0x2ac>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	691b      	ldr	r3, [r3, #16]
 8001ee8:	00db      	lsls	r3, r3, #3
 8001eea:	4940      	ldr	r1, [pc, #256]	; (8001fec <HAL_RCC_OscConfig+0x2ac>)
 8001eec:	4313      	orrs	r3, r2
 8001eee:	600b      	str	r3, [r1, #0]
 8001ef0:	e015      	b.n	8001f1e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ef2:	4b3f      	ldr	r3, [pc, #252]	; (8001ff0 <HAL_RCC_OscConfig+0x2b0>)
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ef8:	f7ff f85c 	bl	8000fb4 <HAL_GetTick>
 8001efc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001efe:	e008      	b.n	8001f12 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f00:	f7ff f858 	bl	8000fb4 <HAL_GetTick>
 8001f04:	4602      	mov	r2, r0
 8001f06:	693b      	ldr	r3, [r7, #16]
 8001f08:	1ad3      	subs	r3, r2, r3
 8001f0a:	2b02      	cmp	r3, #2
 8001f0c:	d901      	bls.n	8001f12 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001f0e:	2303      	movs	r3, #3
 8001f10:	e14d      	b.n	80021ae <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f12:	4b36      	ldr	r3, [pc, #216]	; (8001fec <HAL_RCC_OscConfig+0x2ac>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f003 0302 	and.w	r3, r3, #2
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d1f0      	bne.n	8001f00 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f003 0308 	and.w	r3, r3, #8
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d030      	beq.n	8001f8c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	695b      	ldr	r3, [r3, #20]
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d016      	beq.n	8001f60 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f32:	4b30      	ldr	r3, [pc, #192]	; (8001ff4 <HAL_RCC_OscConfig+0x2b4>)
 8001f34:	2201      	movs	r2, #1
 8001f36:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f38:	f7ff f83c 	bl	8000fb4 <HAL_GetTick>
 8001f3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f3e:	e008      	b.n	8001f52 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f40:	f7ff f838 	bl	8000fb4 <HAL_GetTick>
 8001f44:	4602      	mov	r2, r0
 8001f46:	693b      	ldr	r3, [r7, #16]
 8001f48:	1ad3      	subs	r3, r2, r3
 8001f4a:	2b02      	cmp	r3, #2
 8001f4c:	d901      	bls.n	8001f52 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001f4e:	2303      	movs	r3, #3
 8001f50:	e12d      	b.n	80021ae <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f52:	4b26      	ldr	r3, [pc, #152]	; (8001fec <HAL_RCC_OscConfig+0x2ac>)
 8001f54:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f56:	f003 0302 	and.w	r3, r3, #2
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d0f0      	beq.n	8001f40 <HAL_RCC_OscConfig+0x200>
 8001f5e:	e015      	b.n	8001f8c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f60:	4b24      	ldr	r3, [pc, #144]	; (8001ff4 <HAL_RCC_OscConfig+0x2b4>)
 8001f62:	2200      	movs	r2, #0
 8001f64:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f66:	f7ff f825 	bl	8000fb4 <HAL_GetTick>
 8001f6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f6c:	e008      	b.n	8001f80 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f6e:	f7ff f821 	bl	8000fb4 <HAL_GetTick>
 8001f72:	4602      	mov	r2, r0
 8001f74:	693b      	ldr	r3, [r7, #16]
 8001f76:	1ad3      	subs	r3, r2, r3
 8001f78:	2b02      	cmp	r3, #2
 8001f7a:	d901      	bls.n	8001f80 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001f7c:	2303      	movs	r3, #3
 8001f7e:	e116      	b.n	80021ae <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f80:	4b1a      	ldr	r3, [pc, #104]	; (8001fec <HAL_RCC_OscConfig+0x2ac>)
 8001f82:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f84:	f003 0302 	and.w	r3, r3, #2
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d1f0      	bne.n	8001f6e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f003 0304 	and.w	r3, r3, #4
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	f000 80a0 	beq.w	80020da <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f9e:	4b13      	ldr	r3, [pc, #76]	; (8001fec <HAL_RCC_OscConfig+0x2ac>)
 8001fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fa2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d10f      	bne.n	8001fca <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001faa:	2300      	movs	r3, #0
 8001fac:	60fb      	str	r3, [r7, #12]
 8001fae:	4b0f      	ldr	r3, [pc, #60]	; (8001fec <HAL_RCC_OscConfig+0x2ac>)
 8001fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fb2:	4a0e      	ldr	r2, [pc, #56]	; (8001fec <HAL_RCC_OscConfig+0x2ac>)
 8001fb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fb8:	6413      	str	r3, [r2, #64]	; 0x40
 8001fba:	4b0c      	ldr	r3, [pc, #48]	; (8001fec <HAL_RCC_OscConfig+0x2ac>)
 8001fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fc2:	60fb      	str	r3, [r7, #12]
 8001fc4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fca:	4b0b      	ldr	r3, [pc, #44]	; (8001ff8 <HAL_RCC_OscConfig+0x2b8>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d121      	bne.n	800201a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001fd6:	4b08      	ldr	r3, [pc, #32]	; (8001ff8 <HAL_RCC_OscConfig+0x2b8>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	4a07      	ldr	r2, [pc, #28]	; (8001ff8 <HAL_RCC_OscConfig+0x2b8>)
 8001fdc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fe0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001fe2:	f7fe ffe7 	bl	8000fb4 <HAL_GetTick>
 8001fe6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fe8:	e011      	b.n	800200e <HAL_RCC_OscConfig+0x2ce>
 8001fea:	bf00      	nop
 8001fec:	40023800 	.word	0x40023800
 8001ff0:	42470000 	.word	0x42470000
 8001ff4:	42470e80 	.word	0x42470e80
 8001ff8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ffc:	f7fe ffda 	bl	8000fb4 <HAL_GetTick>
 8002000:	4602      	mov	r2, r0
 8002002:	693b      	ldr	r3, [r7, #16]
 8002004:	1ad3      	subs	r3, r2, r3
 8002006:	2b02      	cmp	r3, #2
 8002008:	d901      	bls.n	800200e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800200a:	2303      	movs	r3, #3
 800200c:	e0cf      	b.n	80021ae <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800200e:	4b6a      	ldr	r3, [pc, #424]	; (80021b8 <HAL_RCC_OscConfig+0x478>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002016:	2b00      	cmp	r3, #0
 8002018:	d0f0      	beq.n	8001ffc <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	689b      	ldr	r3, [r3, #8]
 800201e:	2b01      	cmp	r3, #1
 8002020:	d106      	bne.n	8002030 <HAL_RCC_OscConfig+0x2f0>
 8002022:	4b66      	ldr	r3, [pc, #408]	; (80021bc <HAL_RCC_OscConfig+0x47c>)
 8002024:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002026:	4a65      	ldr	r2, [pc, #404]	; (80021bc <HAL_RCC_OscConfig+0x47c>)
 8002028:	f043 0301 	orr.w	r3, r3, #1
 800202c:	6713      	str	r3, [r2, #112]	; 0x70
 800202e:	e01c      	b.n	800206a <HAL_RCC_OscConfig+0x32a>
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	689b      	ldr	r3, [r3, #8]
 8002034:	2b05      	cmp	r3, #5
 8002036:	d10c      	bne.n	8002052 <HAL_RCC_OscConfig+0x312>
 8002038:	4b60      	ldr	r3, [pc, #384]	; (80021bc <HAL_RCC_OscConfig+0x47c>)
 800203a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800203c:	4a5f      	ldr	r2, [pc, #380]	; (80021bc <HAL_RCC_OscConfig+0x47c>)
 800203e:	f043 0304 	orr.w	r3, r3, #4
 8002042:	6713      	str	r3, [r2, #112]	; 0x70
 8002044:	4b5d      	ldr	r3, [pc, #372]	; (80021bc <HAL_RCC_OscConfig+0x47c>)
 8002046:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002048:	4a5c      	ldr	r2, [pc, #368]	; (80021bc <HAL_RCC_OscConfig+0x47c>)
 800204a:	f043 0301 	orr.w	r3, r3, #1
 800204e:	6713      	str	r3, [r2, #112]	; 0x70
 8002050:	e00b      	b.n	800206a <HAL_RCC_OscConfig+0x32a>
 8002052:	4b5a      	ldr	r3, [pc, #360]	; (80021bc <HAL_RCC_OscConfig+0x47c>)
 8002054:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002056:	4a59      	ldr	r2, [pc, #356]	; (80021bc <HAL_RCC_OscConfig+0x47c>)
 8002058:	f023 0301 	bic.w	r3, r3, #1
 800205c:	6713      	str	r3, [r2, #112]	; 0x70
 800205e:	4b57      	ldr	r3, [pc, #348]	; (80021bc <HAL_RCC_OscConfig+0x47c>)
 8002060:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002062:	4a56      	ldr	r2, [pc, #344]	; (80021bc <HAL_RCC_OscConfig+0x47c>)
 8002064:	f023 0304 	bic.w	r3, r3, #4
 8002068:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	689b      	ldr	r3, [r3, #8]
 800206e:	2b00      	cmp	r3, #0
 8002070:	d015      	beq.n	800209e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002072:	f7fe ff9f 	bl	8000fb4 <HAL_GetTick>
 8002076:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002078:	e00a      	b.n	8002090 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800207a:	f7fe ff9b 	bl	8000fb4 <HAL_GetTick>
 800207e:	4602      	mov	r2, r0
 8002080:	693b      	ldr	r3, [r7, #16]
 8002082:	1ad3      	subs	r3, r2, r3
 8002084:	f241 3288 	movw	r2, #5000	; 0x1388
 8002088:	4293      	cmp	r3, r2
 800208a:	d901      	bls.n	8002090 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800208c:	2303      	movs	r3, #3
 800208e:	e08e      	b.n	80021ae <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002090:	4b4a      	ldr	r3, [pc, #296]	; (80021bc <HAL_RCC_OscConfig+0x47c>)
 8002092:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002094:	f003 0302 	and.w	r3, r3, #2
 8002098:	2b00      	cmp	r3, #0
 800209a:	d0ee      	beq.n	800207a <HAL_RCC_OscConfig+0x33a>
 800209c:	e014      	b.n	80020c8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800209e:	f7fe ff89 	bl	8000fb4 <HAL_GetTick>
 80020a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020a4:	e00a      	b.n	80020bc <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80020a6:	f7fe ff85 	bl	8000fb4 <HAL_GetTick>
 80020aa:	4602      	mov	r2, r0
 80020ac:	693b      	ldr	r3, [r7, #16]
 80020ae:	1ad3      	subs	r3, r2, r3
 80020b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80020b4:	4293      	cmp	r3, r2
 80020b6:	d901      	bls.n	80020bc <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80020b8:	2303      	movs	r3, #3
 80020ba:	e078      	b.n	80021ae <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020bc:	4b3f      	ldr	r3, [pc, #252]	; (80021bc <HAL_RCC_OscConfig+0x47c>)
 80020be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020c0:	f003 0302 	and.w	r3, r3, #2
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d1ee      	bne.n	80020a6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80020c8:	7dfb      	ldrb	r3, [r7, #23]
 80020ca:	2b01      	cmp	r3, #1
 80020cc:	d105      	bne.n	80020da <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020ce:	4b3b      	ldr	r3, [pc, #236]	; (80021bc <HAL_RCC_OscConfig+0x47c>)
 80020d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020d2:	4a3a      	ldr	r2, [pc, #232]	; (80021bc <HAL_RCC_OscConfig+0x47c>)
 80020d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80020d8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	699b      	ldr	r3, [r3, #24]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d064      	beq.n	80021ac <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80020e2:	4b36      	ldr	r3, [pc, #216]	; (80021bc <HAL_RCC_OscConfig+0x47c>)
 80020e4:	689b      	ldr	r3, [r3, #8]
 80020e6:	f003 030c 	and.w	r3, r3, #12
 80020ea:	2b08      	cmp	r3, #8
 80020ec:	d05c      	beq.n	80021a8 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	699b      	ldr	r3, [r3, #24]
 80020f2:	2b02      	cmp	r3, #2
 80020f4:	d141      	bne.n	800217a <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020f6:	4b32      	ldr	r3, [pc, #200]	; (80021c0 <HAL_RCC_OscConfig+0x480>)
 80020f8:	2200      	movs	r2, #0
 80020fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020fc:	f7fe ff5a 	bl	8000fb4 <HAL_GetTick>
 8002100:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002102:	e008      	b.n	8002116 <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002104:	f7fe ff56 	bl	8000fb4 <HAL_GetTick>
 8002108:	4602      	mov	r2, r0
 800210a:	693b      	ldr	r3, [r7, #16]
 800210c:	1ad3      	subs	r3, r2, r3
 800210e:	2b02      	cmp	r3, #2
 8002110:	d901      	bls.n	8002116 <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 8002112:	2303      	movs	r3, #3
 8002114:	e04b      	b.n	80021ae <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002116:	4b29      	ldr	r3, [pc, #164]	; (80021bc <HAL_RCC_OscConfig+0x47c>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800211e:	2b00      	cmp	r3, #0
 8002120:	d1f0      	bne.n	8002104 <HAL_RCC_OscConfig+0x3c4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	69da      	ldr	r2, [r3, #28]
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	6a1b      	ldr	r3, [r3, #32]
 800212a:	431a      	orrs	r2, r3
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002130:	019b      	lsls	r3, r3, #6
 8002132:	431a      	orrs	r2, r3
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002138:	085b      	lsrs	r3, r3, #1
 800213a:	3b01      	subs	r3, #1
 800213c:	041b      	lsls	r3, r3, #16
 800213e:	431a      	orrs	r2, r3
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002144:	061b      	lsls	r3, r3, #24
 8002146:	491d      	ldr	r1, [pc, #116]	; (80021bc <HAL_RCC_OscConfig+0x47c>)
 8002148:	4313      	orrs	r3, r2
 800214a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800214c:	4b1c      	ldr	r3, [pc, #112]	; (80021c0 <HAL_RCC_OscConfig+0x480>)
 800214e:	2201      	movs	r2, #1
 8002150:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002152:	f7fe ff2f 	bl	8000fb4 <HAL_GetTick>
 8002156:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002158:	e008      	b.n	800216c <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800215a:	f7fe ff2b 	bl	8000fb4 <HAL_GetTick>
 800215e:	4602      	mov	r2, r0
 8002160:	693b      	ldr	r3, [r7, #16]
 8002162:	1ad3      	subs	r3, r2, r3
 8002164:	2b02      	cmp	r3, #2
 8002166:	d901      	bls.n	800216c <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8002168:	2303      	movs	r3, #3
 800216a:	e020      	b.n	80021ae <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800216c:	4b13      	ldr	r3, [pc, #76]	; (80021bc <HAL_RCC_OscConfig+0x47c>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002174:	2b00      	cmp	r3, #0
 8002176:	d0f0      	beq.n	800215a <HAL_RCC_OscConfig+0x41a>
 8002178:	e018      	b.n	80021ac <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800217a:	4b11      	ldr	r3, [pc, #68]	; (80021c0 <HAL_RCC_OscConfig+0x480>)
 800217c:	2200      	movs	r2, #0
 800217e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002180:	f7fe ff18 	bl	8000fb4 <HAL_GetTick>
 8002184:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002186:	e008      	b.n	800219a <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002188:	f7fe ff14 	bl	8000fb4 <HAL_GetTick>
 800218c:	4602      	mov	r2, r0
 800218e:	693b      	ldr	r3, [r7, #16]
 8002190:	1ad3      	subs	r3, r2, r3
 8002192:	2b02      	cmp	r3, #2
 8002194:	d901      	bls.n	800219a <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 8002196:	2303      	movs	r3, #3
 8002198:	e009      	b.n	80021ae <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800219a:	4b08      	ldr	r3, [pc, #32]	; (80021bc <HAL_RCC_OscConfig+0x47c>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d1f0      	bne.n	8002188 <HAL_RCC_OscConfig+0x448>
 80021a6:	e001      	b.n	80021ac <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80021a8:	2301      	movs	r3, #1
 80021aa:	e000      	b.n	80021ae <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 80021ac:	2300      	movs	r3, #0
}
 80021ae:	4618      	mov	r0, r3
 80021b0:	3718      	adds	r7, #24
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bd80      	pop	{r7, pc}
 80021b6:	bf00      	nop
 80021b8:	40007000 	.word	0x40007000
 80021bc:	40023800 	.word	0x40023800
 80021c0:	42470060 	.word	0x42470060

080021c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b084      	sub	sp, #16
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
 80021cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d101      	bne.n	80021d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80021d4:	2301      	movs	r3, #1
 80021d6:	e0ca      	b.n	800236e <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80021d8:	4b67      	ldr	r3, [pc, #412]	; (8002378 <HAL_RCC_ClockConfig+0x1b4>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f003 030f 	and.w	r3, r3, #15
 80021e0:	683a      	ldr	r2, [r7, #0]
 80021e2:	429a      	cmp	r2, r3
 80021e4:	d90c      	bls.n	8002200 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021e6:	4b64      	ldr	r3, [pc, #400]	; (8002378 <HAL_RCC_ClockConfig+0x1b4>)
 80021e8:	683a      	ldr	r2, [r7, #0]
 80021ea:	b2d2      	uxtb	r2, r2
 80021ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80021ee:	4b62      	ldr	r3, [pc, #392]	; (8002378 <HAL_RCC_ClockConfig+0x1b4>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f003 030f 	and.w	r3, r3, #15
 80021f6:	683a      	ldr	r2, [r7, #0]
 80021f8:	429a      	cmp	r2, r3
 80021fa:	d001      	beq.n	8002200 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80021fc:	2301      	movs	r3, #1
 80021fe:	e0b6      	b.n	800236e <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f003 0302 	and.w	r3, r3, #2
 8002208:	2b00      	cmp	r3, #0
 800220a:	d020      	beq.n	800224e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f003 0304 	and.w	r3, r3, #4
 8002214:	2b00      	cmp	r3, #0
 8002216:	d005      	beq.n	8002224 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002218:	4b58      	ldr	r3, [pc, #352]	; (800237c <HAL_RCC_ClockConfig+0x1b8>)
 800221a:	689b      	ldr	r3, [r3, #8]
 800221c:	4a57      	ldr	r2, [pc, #348]	; (800237c <HAL_RCC_ClockConfig+0x1b8>)
 800221e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002222:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f003 0308 	and.w	r3, r3, #8
 800222c:	2b00      	cmp	r3, #0
 800222e:	d005      	beq.n	800223c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002230:	4b52      	ldr	r3, [pc, #328]	; (800237c <HAL_RCC_ClockConfig+0x1b8>)
 8002232:	689b      	ldr	r3, [r3, #8]
 8002234:	4a51      	ldr	r2, [pc, #324]	; (800237c <HAL_RCC_ClockConfig+0x1b8>)
 8002236:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800223a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800223c:	4b4f      	ldr	r3, [pc, #316]	; (800237c <HAL_RCC_ClockConfig+0x1b8>)
 800223e:	689b      	ldr	r3, [r3, #8]
 8002240:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	689b      	ldr	r3, [r3, #8]
 8002248:	494c      	ldr	r1, [pc, #304]	; (800237c <HAL_RCC_ClockConfig+0x1b8>)
 800224a:	4313      	orrs	r3, r2
 800224c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f003 0301 	and.w	r3, r3, #1
 8002256:	2b00      	cmp	r3, #0
 8002258:	d044      	beq.n	80022e4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	2b01      	cmp	r3, #1
 8002260:	d107      	bne.n	8002272 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002262:	4b46      	ldr	r3, [pc, #280]	; (800237c <HAL_RCC_ClockConfig+0x1b8>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800226a:	2b00      	cmp	r3, #0
 800226c:	d119      	bne.n	80022a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800226e:	2301      	movs	r3, #1
 8002270:	e07d      	b.n	800236e <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	685b      	ldr	r3, [r3, #4]
 8002276:	2b02      	cmp	r3, #2
 8002278:	d003      	beq.n	8002282 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800227e:	2b03      	cmp	r3, #3
 8002280:	d107      	bne.n	8002292 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002282:	4b3e      	ldr	r3, [pc, #248]	; (800237c <HAL_RCC_ClockConfig+0x1b8>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800228a:	2b00      	cmp	r3, #0
 800228c:	d109      	bne.n	80022a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800228e:	2301      	movs	r3, #1
 8002290:	e06d      	b.n	800236e <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002292:	4b3a      	ldr	r3, [pc, #232]	; (800237c <HAL_RCC_ClockConfig+0x1b8>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f003 0302 	and.w	r3, r3, #2
 800229a:	2b00      	cmp	r3, #0
 800229c:	d101      	bne.n	80022a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800229e:	2301      	movs	r3, #1
 80022a0:	e065      	b.n	800236e <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80022a2:	4b36      	ldr	r3, [pc, #216]	; (800237c <HAL_RCC_ClockConfig+0x1b8>)
 80022a4:	689b      	ldr	r3, [r3, #8]
 80022a6:	f023 0203 	bic.w	r2, r3, #3
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	685b      	ldr	r3, [r3, #4]
 80022ae:	4933      	ldr	r1, [pc, #204]	; (800237c <HAL_RCC_ClockConfig+0x1b8>)
 80022b0:	4313      	orrs	r3, r2
 80022b2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80022b4:	f7fe fe7e 	bl	8000fb4 <HAL_GetTick>
 80022b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022ba:	e00a      	b.n	80022d2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022bc:	f7fe fe7a 	bl	8000fb4 <HAL_GetTick>
 80022c0:	4602      	mov	r2, r0
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	1ad3      	subs	r3, r2, r3
 80022c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d901      	bls.n	80022d2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80022ce:	2303      	movs	r3, #3
 80022d0:	e04d      	b.n	800236e <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022d2:	4b2a      	ldr	r3, [pc, #168]	; (800237c <HAL_RCC_ClockConfig+0x1b8>)
 80022d4:	689b      	ldr	r3, [r3, #8]
 80022d6:	f003 020c 	and.w	r2, r3, #12
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	685b      	ldr	r3, [r3, #4]
 80022de:	009b      	lsls	r3, r3, #2
 80022e0:	429a      	cmp	r2, r3
 80022e2:	d1eb      	bne.n	80022bc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80022e4:	4b24      	ldr	r3, [pc, #144]	; (8002378 <HAL_RCC_ClockConfig+0x1b4>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f003 030f 	and.w	r3, r3, #15
 80022ec:	683a      	ldr	r2, [r7, #0]
 80022ee:	429a      	cmp	r2, r3
 80022f0:	d20c      	bcs.n	800230c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022f2:	4b21      	ldr	r3, [pc, #132]	; (8002378 <HAL_RCC_ClockConfig+0x1b4>)
 80022f4:	683a      	ldr	r2, [r7, #0]
 80022f6:	b2d2      	uxtb	r2, r2
 80022f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80022fa:	4b1f      	ldr	r3, [pc, #124]	; (8002378 <HAL_RCC_ClockConfig+0x1b4>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f003 030f 	and.w	r3, r3, #15
 8002302:	683a      	ldr	r2, [r7, #0]
 8002304:	429a      	cmp	r2, r3
 8002306:	d001      	beq.n	800230c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002308:	2301      	movs	r3, #1
 800230a:	e030      	b.n	800236e <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f003 0304 	and.w	r3, r3, #4
 8002314:	2b00      	cmp	r3, #0
 8002316:	d008      	beq.n	800232a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002318:	4b18      	ldr	r3, [pc, #96]	; (800237c <HAL_RCC_ClockConfig+0x1b8>)
 800231a:	689b      	ldr	r3, [r3, #8]
 800231c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	68db      	ldr	r3, [r3, #12]
 8002324:	4915      	ldr	r1, [pc, #84]	; (800237c <HAL_RCC_ClockConfig+0x1b8>)
 8002326:	4313      	orrs	r3, r2
 8002328:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f003 0308 	and.w	r3, r3, #8
 8002332:	2b00      	cmp	r3, #0
 8002334:	d009      	beq.n	800234a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002336:	4b11      	ldr	r3, [pc, #68]	; (800237c <HAL_RCC_ClockConfig+0x1b8>)
 8002338:	689b      	ldr	r3, [r3, #8]
 800233a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	691b      	ldr	r3, [r3, #16]
 8002342:	00db      	lsls	r3, r3, #3
 8002344:	490d      	ldr	r1, [pc, #52]	; (800237c <HAL_RCC_ClockConfig+0x1b8>)
 8002346:	4313      	orrs	r3, r2
 8002348:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800234a:	f000 f81d 	bl	8002388 <HAL_RCC_GetSysClockFreq>
 800234e:	4601      	mov	r1, r0
 8002350:	4b0a      	ldr	r3, [pc, #40]	; (800237c <HAL_RCC_ClockConfig+0x1b8>)
 8002352:	689b      	ldr	r3, [r3, #8]
 8002354:	091b      	lsrs	r3, r3, #4
 8002356:	f003 030f 	and.w	r3, r3, #15
 800235a:	4a09      	ldr	r2, [pc, #36]	; (8002380 <HAL_RCC_ClockConfig+0x1bc>)
 800235c:	5cd3      	ldrb	r3, [r2, r3]
 800235e:	fa21 f303 	lsr.w	r3, r1, r3
 8002362:	4a08      	ldr	r2, [pc, #32]	; (8002384 <HAL_RCC_ClockConfig+0x1c0>)
 8002364:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 8002366:	2000      	movs	r0, #0
 8002368:	f7fe fde0 	bl	8000f2c <HAL_InitTick>

  return HAL_OK;
 800236c:	2300      	movs	r3, #0
}
 800236e:	4618      	mov	r0, r3
 8002370:	3710      	adds	r7, #16
 8002372:	46bd      	mov	sp, r7
 8002374:	bd80      	pop	{r7, pc}
 8002376:	bf00      	nop
 8002378:	40023c00 	.word	0x40023c00
 800237c:	40023800 	.word	0x40023800
 8002380:	08008efc 	.word	0x08008efc
 8002384:	20000060 	.word	0x20000060

08002388 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002388:	b5f0      	push	{r4, r5, r6, r7, lr}
 800238a:	b085      	sub	sp, #20
 800238c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800238e:	2300      	movs	r3, #0
 8002390:	607b      	str	r3, [r7, #4]
 8002392:	2300      	movs	r3, #0
 8002394:	60fb      	str	r3, [r7, #12]
 8002396:	2300      	movs	r3, #0
 8002398:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800239a:	2300      	movs	r3, #0
 800239c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800239e:	4b50      	ldr	r3, [pc, #320]	; (80024e0 <HAL_RCC_GetSysClockFreq+0x158>)
 80023a0:	689b      	ldr	r3, [r3, #8]
 80023a2:	f003 030c 	and.w	r3, r3, #12
 80023a6:	2b04      	cmp	r3, #4
 80023a8:	d007      	beq.n	80023ba <HAL_RCC_GetSysClockFreq+0x32>
 80023aa:	2b08      	cmp	r3, #8
 80023ac:	d008      	beq.n	80023c0 <HAL_RCC_GetSysClockFreq+0x38>
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	f040 808d 	bne.w	80024ce <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80023b4:	4b4b      	ldr	r3, [pc, #300]	; (80024e4 <HAL_RCC_GetSysClockFreq+0x15c>)
 80023b6:	60bb      	str	r3, [r7, #8]
       break;
 80023b8:	e08c      	b.n	80024d4 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80023ba:	4b4b      	ldr	r3, [pc, #300]	; (80024e8 <HAL_RCC_GetSysClockFreq+0x160>)
 80023bc:	60bb      	str	r3, [r7, #8]
      break;
 80023be:	e089      	b.n	80024d4 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80023c0:	4b47      	ldr	r3, [pc, #284]	; (80024e0 <HAL_RCC_GetSysClockFreq+0x158>)
 80023c2:	685b      	ldr	r3, [r3, #4]
 80023c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80023c8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80023ca:	4b45      	ldr	r3, [pc, #276]	; (80024e0 <HAL_RCC_GetSysClockFreq+0x158>)
 80023cc:	685b      	ldr	r3, [r3, #4]
 80023ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d023      	beq.n	800241e <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80023d6:	4b42      	ldr	r3, [pc, #264]	; (80024e0 <HAL_RCC_GetSysClockFreq+0x158>)
 80023d8:	685b      	ldr	r3, [r3, #4]
 80023da:	099b      	lsrs	r3, r3, #6
 80023dc:	f04f 0400 	mov.w	r4, #0
 80023e0:	f240 11ff 	movw	r1, #511	; 0x1ff
 80023e4:	f04f 0200 	mov.w	r2, #0
 80023e8:	ea03 0501 	and.w	r5, r3, r1
 80023ec:	ea04 0602 	and.w	r6, r4, r2
 80023f0:	4a3d      	ldr	r2, [pc, #244]	; (80024e8 <HAL_RCC_GetSysClockFreq+0x160>)
 80023f2:	fb02 f106 	mul.w	r1, r2, r6
 80023f6:	2200      	movs	r2, #0
 80023f8:	fb02 f205 	mul.w	r2, r2, r5
 80023fc:	440a      	add	r2, r1
 80023fe:	493a      	ldr	r1, [pc, #232]	; (80024e8 <HAL_RCC_GetSysClockFreq+0x160>)
 8002400:	fba5 0101 	umull	r0, r1, r5, r1
 8002404:	1853      	adds	r3, r2, r1
 8002406:	4619      	mov	r1, r3
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	f04f 0400 	mov.w	r4, #0
 800240e:	461a      	mov	r2, r3
 8002410:	4623      	mov	r3, r4
 8002412:	f7fe fbe9 	bl	8000be8 <__aeabi_uldivmod>
 8002416:	4603      	mov	r3, r0
 8002418:	460c      	mov	r4, r1
 800241a:	60fb      	str	r3, [r7, #12]
 800241c:	e049      	b.n	80024b2 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800241e:	4b30      	ldr	r3, [pc, #192]	; (80024e0 <HAL_RCC_GetSysClockFreq+0x158>)
 8002420:	685b      	ldr	r3, [r3, #4]
 8002422:	099b      	lsrs	r3, r3, #6
 8002424:	f04f 0400 	mov.w	r4, #0
 8002428:	f240 11ff 	movw	r1, #511	; 0x1ff
 800242c:	f04f 0200 	mov.w	r2, #0
 8002430:	ea03 0501 	and.w	r5, r3, r1
 8002434:	ea04 0602 	and.w	r6, r4, r2
 8002438:	4629      	mov	r1, r5
 800243a:	4632      	mov	r2, r6
 800243c:	f04f 0300 	mov.w	r3, #0
 8002440:	f04f 0400 	mov.w	r4, #0
 8002444:	0154      	lsls	r4, r2, #5
 8002446:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800244a:	014b      	lsls	r3, r1, #5
 800244c:	4619      	mov	r1, r3
 800244e:	4622      	mov	r2, r4
 8002450:	1b49      	subs	r1, r1, r5
 8002452:	eb62 0206 	sbc.w	r2, r2, r6
 8002456:	f04f 0300 	mov.w	r3, #0
 800245a:	f04f 0400 	mov.w	r4, #0
 800245e:	0194      	lsls	r4, r2, #6
 8002460:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002464:	018b      	lsls	r3, r1, #6
 8002466:	1a5b      	subs	r3, r3, r1
 8002468:	eb64 0402 	sbc.w	r4, r4, r2
 800246c:	f04f 0100 	mov.w	r1, #0
 8002470:	f04f 0200 	mov.w	r2, #0
 8002474:	00e2      	lsls	r2, r4, #3
 8002476:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800247a:	00d9      	lsls	r1, r3, #3
 800247c:	460b      	mov	r3, r1
 800247e:	4614      	mov	r4, r2
 8002480:	195b      	adds	r3, r3, r5
 8002482:	eb44 0406 	adc.w	r4, r4, r6
 8002486:	f04f 0100 	mov.w	r1, #0
 800248a:	f04f 0200 	mov.w	r2, #0
 800248e:	02a2      	lsls	r2, r4, #10
 8002490:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002494:	0299      	lsls	r1, r3, #10
 8002496:	460b      	mov	r3, r1
 8002498:	4614      	mov	r4, r2
 800249a:	4618      	mov	r0, r3
 800249c:	4621      	mov	r1, r4
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	f04f 0400 	mov.w	r4, #0
 80024a4:	461a      	mov	r2, r3
 80024a6:	4623      	mov	r3, r4
 80024a8:	f7fe fb9e 	bl	8000be8 <__aeabi_uldivmod>
 80024ac:	4603      	mov	r3, r0
 80024ae:	460c      	mov	r4, r1
 80024b0:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80024b2:	4b0b      	ldr	r3, [pc, #44]	; (80024e0 <HAL_RCC_GetSysClockFreq+0x158>)
 80024b4:	685b      	ldr	r3, [r3, #4]
 80024b6:	0c1b      	lsrs	r3, r3, #16
 80024b8:	f003 0303 	and.w	r3, r3, #3
 80024bc:	3301      	adds	r3, #1
 80024be:	005b      	lsls	r3, r3, #1
 80024c0:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80024c2:	68fa      	ldr	r2, [r7, #12]
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80024ca:	60bb      	str	r3, [r7, #8]
      break;
 80024cc:	e002      	b.n	80024d4 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80024ce:	4b05      	ldr	r3, [pc, #20]	; (80024e4 <HAL_RCC_GetSysClockFreq+0x15c>)
 80024d0:	60bb      	str	r3, [r7, #8]
      break;
 80024d2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80024d4:	68bb      	ldr	r3, [r7, #8]
}
 80024d6:	4618      	mov	r0, r3
 80024d8:	3714      	adds	r7, #20
 80024da:	46bd      	mov	sp, r7
 80024dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80024de:	bf00      	nop
 80024e0:	40023800 	.word	0x40023800
 80024e4:	00f42400 	.word	0x00f42400
 80024e8:	017d7840 	.word	0x017d7840

080024ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80024ec:	b480      	push	{r7}
 80024ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80024f0:	4b03      	ldr	r3, [pc, #12]	; (8002500 <HAL_RCC_GetHCLKFreq+0x14>)
 80024f2:	681b      	ldr	r3, [r3, #0]
}
 80024f4:	4618      	mov	r0, r3
 80024f6:	46bd      	mov	sp, r7
 80024f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fc:	4770      	bx	lr
 80024fe:	bf00      	nop
 8002500:	20000060 	.word	0x20000060

08002504 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002508:	f7ff fff0 	bl	80024ec <HAL_RCC_GetHCLKFreq>
 800250c:	4601      	mov	r1, r0
 800250e:	4b05      	ldr	r3, [pc, #20]	; (8002524 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002510:	689b      	ldr	r3, [r3, #8]
 8002512:	0a9b      	lsrs	r3, r3, #10
 8002514:	f003 0307 	and.w	r3, r3, #7
 8002518:	4a03      	ldr	r2, [pc, #12]	; (8002528 <HAL_RCC_GetPCLK1Freq+0x24>)
 800251a:	5cd3      	ldrb	r3, [r2, r3]
 800251c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002520:	4618      	mov	r0, r3
 8002522:	bd80      	pop	{r7, pc}
 8002524:	40023800 	.word	0x40023800
 8002528:	08008f0c 	.word	0x08008f0c

0800252c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002530:	f7ff ffdc 	bl	80024ec <HAL_RCC_GetHCLKFreq>
 8002534:	4601      	mov	r1, r0
 8002536:	4b05      	ldr	r3, [pc, #20]	; (800254c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002538:	689b      	ldr	r3, [r3, #8]
 800253a:	0b5b      	lsrs	r3, r3, #13
 800253c:	f003 0307 	and.w	r3, r3, #7
 8002540:	4a03      	ldr	r2, [pc, #12]	; (8002550 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002542:	5cd3      	ldrb	r3, [r2, r3]
 8002544:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002548:	4618      	mov	r0, r3
 800254a:	bd80      	pop	{r7, pc}
 800254c:	40023800 	.word	0x40023800
 8002550:	08008f0c 	.word	0x08008f0c

08002554 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b082      	sub	sp, #8
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2b00      	cmp	r3, #0
 8002560:	d101      	bne.n	8002566 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002562:	2301      	movs	r3, #1
 8002564:	e056      	b.n	8002614 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	2200      	movs	r2, #0
 800256a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002572:	b2db      	uxtb	r3, r3
 8002574:	2b00      	cmp	r3, #0
 8002576:	d106      	bne.n	8002586 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2200      	movs	r2, #0
 800257c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002580:	6878      	ldr	r0, [r7, #4]
 8002582:	f004 ff9f 	bl	80074c4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	2202      	movs	r2, #2
 800258a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	681a      	ldr	r2, [r3, #0]
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800259c:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	685a      	ldr	r2, [r3, #4]
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	689b      	ldr	r3, [r3, #8]
 80025a6:	431a      	orrs	r2, r3
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	68db      	ldr	r3, [r3, #12]
 80025ac:	431a      	orrs	r2, r3
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	691b      	ldr	r3, [r3, #16]
 80025b2:	431a      	orrs	r2, r3
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	695b      	ldr	r3, [r3, #20]
 80025b8:	431a      	orrs	r2, r3
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	699b      	ldr	r3, [r3, #24]
 80025be:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80025c2:	431a      	orrs	r2, r3
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	69db      	ldr	r3, [r3, #28]
 80025c8:	431a      	orrs	r2, r3
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6a1b      	ldr	r3, [r3, #32]
 80025ce:	ea42 0103 	orr.w	r1, r2, r3
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	430a      	orrs	r2, r1
 80025dc:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	699b      	ldr	r3, [r3, #24]
 80025e2:	0c1b      	lsrs	r3, r3, #16
 80025e4:	f003 0104 	and.w	r1, r3, #4
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	430a      	orrs	r2, r1
 80025f2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	69da      	ldr	r2, [r3, #28]
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002602:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2200      	movs	r2, #0
 8002608:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	2201      	movs	r2, #1
 800260e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002612:	2300      	movs	r3, #0
}
 8002614:	4618      	mov	r0, r3
 8002616:	3708      	adds	r7, #8
 8002618:	46bd      	mov	sp, r7
 800261a:	bd80      	pop	{r7, pc}

0800261c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b088      	sub	sp, #32
 8002620:	af00      	add	r7, sp, #0
 8002622:	60f8      	str	r0, [r7, #12]
 8002624:	60b9      	str	r1, [r7, #8]
 8002626:	603b      	str	r3, [r7, #0]
 8002628:	4613      	mov	r3, r2
 800262a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800262c:	2300      	movs	r3, #0
 800262e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002636:	2b01      	cmp	r3, #1
 8002638:	d101      	bne.n	800263e <HAL_SPI_Transmit+0x22>
 800263a:	2302      	movs	r3, #2
 800263c:	e11e      	b.n	800287c <HAL_SPI_Transmit+0x260>
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	2201      	movs	r2, #1
 8002642:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002646:	f7fe fcb5 	bl	8000fb4 <HAL_GetTick>
 800264a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800264c:	88fb      	ldrh	r3, [r7, #6]
 800264e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002656:	b2db      	uxtb	r3, r3
 8002658:	2b01      	cmp	r3, #1
 800265a:	d002      	beq.n	8002662 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800265c:	2302      	movs	r3, #2
 800265e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002660:	e103      	b.n	800286a <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002662:	68bb      	ldr	r3, [r7, #8]
 8002664:	2b00      	cmp	r3, #0
 8002666:	d002      	beq.n	800266e <HAL_SPI_Transmit+0x52>
 8002668:	88fb      	ldrh	r3, [r7, #6]
 800266a:	2b00      	cmp	r3, #0
 800266c:	d102      	bne.n	8002674 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800266e:	2301      	movs	r3, #1
 8002670:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002672:	e0fa      	b.n	800286a <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	2203      	movs	r2, #3
 8002678:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	2200      	movs	r2, #0
 8002680:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	68ba      	ldr	r2, [r7, #8]
 8002686:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	88fa      	ldrh	r2, [r7, #6]
 800268c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	88fa      	ldrh	r2, [r7, #6]
 8002692:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	2200      	movs	r2, #0
 8002698:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	2200      	movs	r2, #0
 800269e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	2200      	movs	r2, #0
 80026a4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	2200      	movs	r2, #0
 80026aa:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	2200      	movs	r2, #0
 80026b0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	689b      	ldr	r3, [r3, #8]
 80026b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80026ba:	d107      	bne.n	80026cc <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	681a      	ldr	r2, [r3, #0]
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80026ca:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026d6:	2b40      	cmp	r3, #64	; 0x40
 80026d8:	d007      	beq.n	80026ea <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	681a      	ldr	r2, [r3, #0]
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80026e8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	68db      	ldr	r3, [r3, #12]
 80026ee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80026f2:	d14b      	bne.n	800278c <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	685b      	ldr	r3, [r3, #4]
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d002      	beq.n	8002702 <HAL_SPI_Transmit+0xe6>
 80026fc:	8afb      	ldrh	r3, [r7, #22]
 80026fe:	2b01      	cmp	r3, #1
 8002700:	d13e      	bne.n	8002780 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002706:	881a      	ldrh	r2, [r3, #0]
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002712:	1c9a      	adds	r2, r3, #2
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800271c:	b29b      	uxth	r3, r3
 800271e:	3b01      	subs	r3, #1
 8002720:	b29a      	uxth	r2, r3
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002726:	e02b      	b.n	8002780 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	689b      	ldr	r3, [r3, #8]
 800272e:	f003 0302 	and.w	r3, r3, #2
 8002732:	2b02      	cmp	r3, #2
 8002734:	d112      	bne.n	800275c <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800273a:	881a      	ldrh	r2, [r3, #0]
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002746:	1c9a      	adds	r2, r3, #2
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002750:	b29b      	uxth	r3, r3
 8002752:	3b01      	subs	r3, #1
 8002754:	b29a      	uxth	r2, r3
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	86da      	strh	r2, [r3, #54]	; 0x36
 800275a:	e011      	b.n	8002780 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800275c:	f7fe fc2a 	bl	8000fb4 <HAL_GetTick>
 8002760:	4602      	mov	r2, r0
 8002762:	69bb      	ldr	r3, [r7, #24]
 8002764:	1ad3      	subs	r3, r2, r3
 8002766:	683a      	ldr	r2, [r7, #0]
 8002768:	429a      	cmp	r2, r3
 800276a:	d803      	bhi.n	8002774 <HAL_SPI_Transmit+0x158>
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002772:	d102      	bne.n	800277a <HAL_SPI_Transmit+0x15e>
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	2b00      	cmp	r3, #0
 8002778:	d102      	bne.n	8002780 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 800277a:	2303      	movs	r3, #3
 800277c:	77fb      	strb	r3, [r7, #31]
          goto error;
 800277e:	e074      	b.n	800286a <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002784:	b29b      	uxth	r3, r3
 8002786:	2b00      	cmp	r3, #0
 8002788:	d1ce      	bne.n	8002728 <HAL_SPI_Transmit+0x10c>
 800278a:	e04c      	b.n	8002826 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	685b      	ldr	r3, [r3, #4]
 8002790:	2b00      	cmp	r3, #0
 8002792:	d002      	beq.n	800279a <HAL_SPI_Transmit+0x17e>
 8002794:	8afb      	ldrh	r3, [r7, #22]
 8002796:	2b01      	cmp	r3, #1
 8002798:	d140      	bne.n	800281c <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	330c      	adds	r3, #12
 80027a4:	7812      	ldrb	r2, [r2, #0]
 80027a6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ac:	1c5a      	adds	r2, r3, #1
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80027b6:	b29b      	uxth	r3, r3
 80027b8:	3b01      	subs	r3, #1
 80027ba:	b29a      	uxth	r2, r3
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80027c0:	e02c      	b.n	800281c <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	689b      	ldr	r3, [r3, #8]
 80027c8:	f003 0302 	and.w	r3, r3, #2
 80027cc:	2b02      	cmp	r3, #2
 80027ce:	d113      	bne.n	80027f8 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	330c      	adds	r3, #12
 80027da:	7812      	ldrb	r2, [r2, #0]
 80027dc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027e2:	1c5a      	adds	r2, r3, #1
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80027ec:	b29b      	uxth	r3, r3
 80027ee:	3b01      	subs	r3, #1
 80027f0:	b29a      	uxth	r2, r3
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	86da      	strh	r2, [r3, #54]	; 0x36
 80027f6:	e011      	b.n	800281c <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80027f8:	f7fe fbdc 	bl	8000fb4 <HAL_GetTick>
 80027fc:	4602      	mov	r2, r0
 80027fe:	69bb      	ldr	r3, [r7, #24]
 8002800:	1ad3      	subs	r3, r2, r3
 8002802:	683a      	ldr	r2, [r7, #0]
 8002804:	429a      	cmp	r2, r3
 8002806:	d803      	bhi.n	8002810 <HAL_SPI_Transmit+0x1f4>
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800280e:	d102      	bne.n	8002816 <HAL_SPI_Transmit+0x1fa>
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	2b00      	cmp	r3, #0
 8002814:	d102      	bne.n	800281c <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8002816:	2303      	movs	r3, #3
 8002818:	77fb      	strb	r3, [r7, #31]
          goto error;
 800281a:	e026      	b.n	800286a <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002820:	b29b      	uxth	r3, r3
 8002822:	2b00      	cmp	r3, #0
 8002824:	d1cd      	bne.n	80027c2 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002826:	69ba      	ldr	r2, [r7, #24]
 8002828:	6839      	ldr	r1, [r7, #0]
 800282a:	68f8      	ldr	r0, [r7, #12]
 800282c:	f000 fba4 	bl	8002f78 <SPI_EndRxTxTransaction>
 8002830:	4603      	mov	r3, r0
 8002832:	2b00      	cmp	r3, #0
 8002834:	d002      	beq.n	800283c <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	2220      	movs	r2, #32
 800283a:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	689b      	ldr	r3, [r3, #8]
 8002840:	2b00      	cmp	r3, #0
 8002842:	d10a      	bne.n	800285a <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002844:	2300      	movs	r3, #0
 8002846:	613b      	str	r3, [r7, #16]
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	68db      	ldr	r3, [r3, #12]
 800284e:	613b      	str	r3, [r7, #16]
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	689b      	ldr	r3, [r3, #8]
 8002856:	613b      	str	r3, [r7, #16]
 8002858:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800285e:	2b00      	cmp	r3, #0
 8002860:	d002      	beq.n	8002868 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8002862:	2301      	movs	r3, #1
 8002864:	77fb      	strb	r3, [r7, #31]
 8002866:	e000      	b.n	800286a <HAL_SPI_Transmit+0x24e>
  }

error:
 8002868:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	2201      	movs	r2, #1
 800286e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	2200      	movs	r2, #0
 8002876:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800287a:	7ffb      	ldrb	r3, [r7, #31]
}
 800287c:	4618      	mov	r0, r3
 800287e:	3720      	adds	r7, #32
 8002880:	46bd      	mov	sp, r7
 8002882:	bd80      	pop	{r7, pc}

08002884 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b088      	sub	sp, #32
 8002888:	af02      	add	r7, sp, #8
 800288a:	60f8      	str	r0, [r7, #12]
 800288c:	60b9      	str	r1, [r7, #8]
 800288e:	603b      	str	r3, [r7, #0]
 8002890:	4613      	mov	r3, r2
 8002892:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002894:	2300      	movs	r3, #0
 8002896:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80028a0:	d112      	bne.n	80028c8 <HAL_SPI_Receive+0x44>
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	689b      	ldr	r3, [r3, #8]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d10e      	bne.n	80028c8 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	2204      	movs	r2, #4
 80028ae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80028b2:	88fa      	ldrh	r2, [r7, #6]
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	9300      	str	r3, [sp, #0]
 80028b8:	4613      	mov	r3, r2
 80028ba:	68ba      	ldr	r2, [r7, #8]
 80028bc:	68b9      	ldr	r1, [r7, #8]
 80028be:	68f8      	ldr	r0, [r7, #12]
 80028c0:	f000 f8e9 	bl	8002a96 <HAL_SPI_TransmitReceive>
 80028c4:	4603      	mov	r3, r0
 80028c6:	e0e2      	b.n	8002a8e <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80028ce:	2b01      	cmp	r3, #1
 80028d0:	d101      	bne.n	80028d6 <HAL_SPI_Receive+0x52>
 80028d2:	2302      	movs	r3, #2
 80028d4:	e0db      	b.n	8002a8e <HAL_SPI_Receive+0x20a>
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	2201      	movs	r2, #1
 80028da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80028de:	f7fe fb69 	bl	8000fb4 <HAL_GetTick>
 80028e2:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80028ea:	b2db      	uxtb	r3, r3
 80028ec:	2b01      	cmp	r3, #1
 80028ee:	d002      	beq.n	80028f6 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80028f0:	2302      	movs	r3, #2
 80028f2:	75fb      	strb	r3, [r7, #23]
    goto error;
 80028f4:	e0c2      	b.n	8002a7c <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 80028f6:	68bb      	ldr	r3, [r7, #8]
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d002      	beq.n	8002902 <HAL_SPI_Receive+0x7e>
 80028fc:	88fb      	ldrh	r3, [r7, #6]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d102      	bne.n	8002908 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8002902:	2301      	movs	r3, #1
 8002904:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002906:	e0b9      	b.n	8002a7c <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	2204      	movs	r2, #4
 800290c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	2200      	movs	r2, #0
 8002914:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	68ba      	ldr	r2, [r7, #8]
 800291a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	88fa      	ldrh	r2, [r7, #6]
 8002920:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	88fa      	ldrh	r2, [r7, #6]
 8002926:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	2200      	movs	r2, #0
 800292c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	2200      	movs	r2, #0
 8002932:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	2200      	movs	r2, #0
 8002938:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	2200      	movs	r2, #0
 800293e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	2200      	movs	r2, #0
 8002944:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	689b      	ldr	r3, [r3, #8]
 800294a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800294e:	d107      	bne.n	8002960 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	681a      	ldr	r2, [r3, #0]
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800295e:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800296a:	2b40      	cmp	r3, #64	; 0x40
 800296c:	d007      	beq.n	800297e <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	681a      	ldr	r2, [r3, #0]
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800297c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	68db      	ldr	r3, [r3, #12]
 8002982:	2b00      	cmp	r3, #0
 8002984:	d162      	bne.n	8002a4c <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002986:	e02e      	b.n	80029e6 <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	689b      	ldr	r3, [r3, #8]
 800298e:	f003 0301 	and.w	r3, r3, #1
 8002992:	2b01      	cmp	r3, #1
 8002994:	d115      	bne.n	80029c2 <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f103 020c 	add.w	r2, r3, #12
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029a2:	7812      	ldrb	r2, [r2, #0]
 80029a4:	b2d2      	uxtb	r2, r2
 80029a6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029ac:	1c5a      	adds	r2, r3, #1
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80029b6:	b29b      	uxth	r3, r3
 80029b8:	3b01      	subs	r3, #1
 80029ba:	b29a      	uxth	r2, r3
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	87da      	strh	r2, [r3, #62]	; 0x3e
 80029c0:	e011      	b.n	80029e6 <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80029c2:	f7fe faf7 	bl	8000fb4 <HAL_GetTick>
 80029c6:	4602      	mov	r2, r0
 80029c8:	693b      	ldr	r3, [r7, #16]
 80029ca:	1ad3      	subs	r3, r2, r3
 80029cc:	683a      	ldr	r2, [r7, #0]
 80029ce:	429a      	cmp	r2, r3
 80029d0:	d803      	bhi.n	80029da <HAL_SPI_Receive+0x156>
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029d8:	d102      	bne.n	80029e0 <HAL_SPI_Receive+0x15c>
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d102      	bne.n	80029e6 <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 80029e0:	2303      	movs	r3, #3
 80029e2:	75fb      	strb	r3, [r7, #23]
          goto error;
 80029e4:	e04a      	b.n	8002a7c <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80029ea:	b29b      	uxth	r3, r3
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d1cb      	bne.n	8002988 <HAL_SPI_Receive+0x104>
 80029f0:	e031      	b.n	8002a56 <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	689b      	ldr	r3, [r3, #8]
 80029f8:	f003 0301 	and.w	r3, r3, #1
 80029fc:	2b01      	cmp	r3, #1
 80029fe:	d113      	bne.n	8002a28 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	68da      	ldr	r2, [r3, #12]
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a0a:	b292      	uxth	r2, r2
 8002a0c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a12:	1c9a      	adds	r2, r3, #2
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a1c:	b29b      	uxth	r3, r3
 8002a1e:	3b01      	subs	r3, #1
 8002a20:	b29a      	uxth	r2, r3
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002a26:	e011      	b.n	8002a4c <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002a28:	f7fe fac4 	bl	8000fb4 <HAL_GetTick>
 8002a2c:	4602      	mov	r2, r0
 8002a2e:	693b      	ldr	r3, [r7, #16]
 8002a30:	1ad3      	subs	r3, r2, r3
 8002a32:	683a      	ldr	r2, [r7, #0]
 8002a34:	429a      	cmp	r2, r3
 8002a36:	d803      	bhi.n	8002a40 <HAL_SPI_Receive+0x1bc>
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a3e:	d102      	bne.n	8002a46 <HAL_SPI_Receive+0x1c2>
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d102      	bne.n	8002a4c <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 8002a46:	2303      	movs	r3, #3
 8002a48:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002a4a:	e017      	b.n	8002a7c <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a50:	b29b      	uxth	r3, r3
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d1cd      	bne.n	80029f2 <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002a56:	693a      	ldr	r2, [r7, #16]
 8002a58:	6839      	ldr	r1, [r7, #0]
 8002a5a:	68f8      	ldr	r0, [r7, #12]
 8002a5c:	f000 fa27 	bl	8002eae <SPI_EndRxTransaction>
 8002a60:	4603      	mov	r3, r0
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d002      	beq.n	8002a6c <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	2220      	movs	r2, #32
 8002a6a:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d002      	beq.n	8002a7a <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 8002a74:	2301      	movs	r3, #1
 8002a76:	75fb      	strb	r3, [r7, #23]
 8002a78:	e000      	b.n	8002a7c <HAL_SPI_Receive+0x1f8>
  }

error :
 8002a7a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	2201      	movs	r2, #1
 8002a80:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	2200      	movs	r2, #0
 8002a88:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002a8c:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a8e:	4618      	mov	r0, r3
 8002a90:	3718      	adds	r7, #24
 8002a92:	46bd      	mov	sp, r7
 8002a94:	bd80      	pop	{r7, pc}

08002a96 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002a96:	b580      	push	{r7, lr}
 8002a98:	b08c      	sub	sp, #48	; 0x30
 8002a9a:	af00      	add	r7, sp, #0
 8002a9c:	60f8      	str	r0, [r7, #12]
 8002a9e:	60b9      	str	r1, [r7, #8]
 8002aa0:	607a      	str	r2, [r7, #4]
 8002aa2:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002aa4:	2301      	movs	r3, #1
 8002aa6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002ab4:	2b01      	cmp	r3, #1
 8002ab6:	d101      	bne.n	8002abc <HAL_SPI_TransmitReceive+0x26>
 8002ab8:	2302      	movs	r3, #2
 8002aba:	e18a      	b.n	8002dd2 <HAL_SPI_TransmitReceive+0x33c>
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	2201      	movs	r2, #1
 8002ac0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002ac4:	f7fe fa76 	bl	8000fb4 <HAL_GetTick>
 8002ac8:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002ad0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	685b      	ldr	r3, [r3, #4]
 8002ad8:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8002ada:	887b      	ldrh	r3, [r7, #2]
 8002adc:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002ade:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002ae2:	2b01      	cmp	r3, #1
 8002ae4:	d00f      	beq.n	8002b06 <HAL_SPI_TransmitReceive+0x70>
 8002ae6:	69fb      	ldr	r3, [r7, #28]
 8002ae8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002aec:	d107      	bne.n	8002afe <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	689b      	ldr	r3, [r3, #8]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d103      	bne.n	8002afe <HAL_SPI_TransmitReceive+0x68>
 8002af6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002afa:	2b04      	cmp	r3, #4
 8002afc:	d003      	beq.n	8002b06 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8002afe:	2302      	movs	r3, #2
 8002b00:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002b04:	e15b      	b.n	8002dbe <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002b06:	68bb      	ldr	r3, [r7, #8]
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d005      	beq.n	8002b18 <HAL_SPI_TransmitReceive+0x82>
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d002      	beq.n	8002b18 <HAL_SPI_TransmitReceive+0x82>
 8002b12:	887b      	ldrh	r3, [r7, #2]
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d103      	bne.n	8002b20 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8002b18:	2301      	movs	r3, #1
 8002b1a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002b1e:	e14e      	b.n	8002dbe <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002b26:	b2db      	uxtb	r3, r3
 8002b28:	2b04      	cmp	r3, #4
 8002b2a:	d003      	beq.n	8002b34 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	2205      	movs	r2, #5
 8002b30:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	2200      	movs	r2, #0
 8002b38:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	687a      	ldr	r2, [r7, #4]
 8002b3e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	887a      	ldrh	r2, [r7, #2]
 8002b44:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	887a      	ldrh	r2, [r7, #2]
 8002b4a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	68ba      	ldr	r2, [r7, #8]
 8002b50:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	887a      	ldrh	r2, [r7, #2]
 8002b56:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	887a      	ldrh	r2, [r7, #2]
 8002b5c:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	2200      	movs	r2, #0
 8002b62:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	2200      	movs	r2, #0
 8002b68:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b74:	2b40      	cmp	r3, #64	; 0x40
 8002b76:	d007      	beq.n	8002b88 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	681a      	ldr	r2, [r3, #0]
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002b86:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	68db      	ldr	r3, [r3, #12]
 8002b8c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002b90:	d178      	bne.n	8002c84 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	685b      	ldr	r3, [r3, #4]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d002      	beq.n	8002ba0 <HAL_SPI_TransmitReceive+0x10a>
 8002b9a:	8b7b      	ldrh	r3, [r7, #26]
 8002b9c:	2b01      	cmp	r3, #1
 8002b9e:	d166      	bne.n	8002c6e <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ba4:	881a      	ldrh	r2, [r3, #0]
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bb0:	1c9a      	adds	r2, r3, #2
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002bba:	b29b      	uxth	r3, r3
 8002bbc:	3b01      	subs	r3, #1
 8002bbe:	b29a      	uxth	r2, r3
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002bc4:	e053      	b.n	8002c6e <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	689b      	ldr	r3, [r3, #8]
 8002bcc:	f003 0302 	and.w	r3, r3, #2
 8002bd0:	2b02      	cmp	r3, #2
 8002bd2:	d11b      	bne.n	8002c0c <HAL_SPI_TransmitReceive+0x176>
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002bd8:	b29b      	uxth	r3, r3
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d016      	beq.n	8002c0c <HAL_SPI_TransmitReceive+0x176>
 8002bde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002be0:	2b01      	cmp	r3, #1
 8002be2:	d113      	bne.n	8002c0c <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002be8:	881a      	ldrh	r2, [r3, #0]
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bf4:	1c9a      	adds	r2, r3, #2
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002bfe:	b29b      	uxth	r3, r3
 8002c00:	3b01      	subs	r3, #1
 8002c02:	b29a      	uxth	r2, r3
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002c08:	2300      	movs	r3, #0
 8002c0a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	689b      	ldr	r3, [r3, #8]
 8002c12:	f003 0301 	and.w	r3, r3, #1
 8002c16:	2b01      	cmp	r3, #1
 8002c18:	d119      	bne.n	8002c4e <HAL_SPI_TransmitReceive+0x1b8>
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c1e:	b29b      	uxth	r3, r3
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d014      	beq.n	8002c4e <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	68da      	ldr	r2, [r3, #12]
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c2e:	b292      	uxth	r2, r2
 8002c30:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c36:	1c9a      	adds	r2, r3, #2
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c40:	b29b      	uxth	r3, r3
 8002c42:	3b01      	subs	r3, #1
 8002c44:	b29a      	uxth	r2, r3
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002c4e:	f7fe f9b1 	bl	8000fb4 <HAL_GetTick>
 8002c52:	4602      	mov	r2, r0
 8002c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c56:	1ad3      	subs	r3, r2, r3
 8002c58:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002c5a:	429a      	cmp	r2, r3
 8002c5c:	d807      	bhi.n	8002c6e <HAL_SPI_TransmitReceive+0x1d8>
 8002c5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c64:	d003      	beq.n	8002c6e <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8002c66:	2303      	movs	r3, #3
 8002c68:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002c6c:	e0a7      	b.n	8002dbe <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c72:	b29b      	uxth	r3, r3
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d1a6      	bne.n	8002bc6 <HAL_SPI_TransmitReceive+0x130>
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c7c:	b29b      	uxth	r3, r3
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d1a1      	bne.n	8002bc6 <HAL_SPI_TransmitReceive+0x130>
 8002c82:	e07c      	b.n	8002d7e <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	685b      	ldr	r3, [r3, #4]
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d002      	beq.n	8002c92 <HAL_SPI_TransmitReceive+0x1fc>
 8002c8c:	8b7b      	ldrh	r3, [r7, #26]
 8002c8e:	2b01      	cmp	r3, #1
 8002c90:	d16b      	bne.n	8002d6a <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	330c      	adds	r3, #12
 8002c9c:	7812      	ldrb	r2, [r2, #0]
 8002c9e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ca4:	1c5a      	adds	r2, r3, #1
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002cae:	b29b      	uxth	r3, r3
 8002cb0:	3b01      	subs	r3, #1
 8002cb2:	b29a      	uxth	r2, r3
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002cb8:	e057      	b.n	8002d6a <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	689b      	ldr	r3, [r3, #8]
 8002cc0:	f003 0302 	and.w	r3, r3, #2
 8002cc4:	2b02      	cmp	r3, #2
 8002cc6:	d11c      	bne.n	8002d02 <HAL_SPI_TransmitReceive+0x26c>
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002ccc:	b29b      	uxth	r3, r3
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d017      	beq.n	8002d02 <HAL_SPI_TransmitReceive+0x26c>
 8002cd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cd4:	2b01      	cmp	r3, #1
 8002cd6:	d114      	bne.n	8002d02 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	330c      	adds	r3, #12
 8002ce2:	7812      	ldrb	r2, [r2, #0]
 8002ce4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cea:	1c5a      	adds	r2, r3, #1
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002cf4:	b29b      	uxth	r3, r3
 8002cf6:	3b01      	subs	r3, #1
 8002cf8:	b29a      	uxth	r2, r3
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002cfe:	2300      	movs	r3, #0
 8002d00:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	689b      	ldr	r3, [r3, #8]
 8002d08:	f003 0301 	and.w	r3, r3, #1
 8002d0c:	2b01      	cmp	r3, #1
 8002d0e:	d119      	bne.n	8002d44 <HAL_SPI_TransmitReceive+0x2ae>
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d14:	b29b      	uxth	r3, r3
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d014      	beq.n	8002d44 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	68da      	ldr	r2, [r3, #12]
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d24:	b2d2      	uxtb	r2, r2
 8002d26:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d2c:	1c5a      	adds	r2, r3, #1
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d36:	b29b      	uxth	r3, r3
 8002d38:	3b01      	subs	r3, #1
 8002d3a:	b29a      	uxth	r2, r3
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002d40:	2301      	movs	r3, #1
 8002d42:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002d44:	f7fe f936 	bl	8000fb4 <HAL_GetTick>
 8002d48:	4602      	mov	r2, r0
 8002d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d4c:	1ad3      	subs	r3, r2, r3
 8002d4e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002d50:	429a      	cmp	r2, r3
 8002d52:	d803      	bhi.n	8002d5c <HAL_SPI_TransmitReceive+0x2c6>
 8002d54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d5a:	d102      	bne.n	8002d62 <HAL_SPI_TransmitReceive+0x2cc>
 8002d5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d103      	bne.n	8002d6a <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8002d62:	2303      	movs	r3, #3
 8002d64:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002d68:	e029      	b.n	8002dbe <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d6e:	b29b      	uxth	r3, r3
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d1a2      	bne.n	8002cba <HAL_SPI_TransmitReceive+0x224>
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d78:	b29b      	uxth	r3, r3
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d19d      	bne.n	8002cba <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002d7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d80:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002d82:	68f8      	ldr	r0, [r7, #12]
 8002d84:	f000 f8f8 	bl	8002f78 <SPI_EndRxTxTransaction>
 8002d88:	4603      	mov	r3, r0
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d006      	beq.n	8002d9c <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8002d8e:	2301      	movs	r3, #1
 8002d90:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	2220      	movs	r2, #32
 8002d98:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8002d9a:	e010      	b.n	8002dbe <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	689b      	ldr	r3, [r3, #8]
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d10b      	bne.n	8002dbc <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002da4:	2300      	movs	r3, #0
 8002da6:	617b      	str	r3, [r7, #20]
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	68db      	ldr	r3, [r3, #12]
 8002dae:	617b      	str	r3, [r7, #20]
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	689b      	ldr	r3, [r3, #8]
 8002db6:	617b      	str	r3, [r7, #20]
 8002db8:	697b      	ldr	r3, [r7, #20]
 8002dba:	e000      	b.n	8002dbe <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8002dbc:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	2201      	movs	r2, #1
 8002dc2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	2200      	movs	r2, #0
 8002dca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002dce:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	3730      	adds	r7, #48	; 0x30
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	bd80      	pop	{r7, pc}

08002dda <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002dda:	b580      	push	{r7, lr}
 8002ddc:	b084      	sub	sp, #16
 8002dde:	af00      	add	r7, sp, #0
 8002de0:	60f8      	str	r0, [r7, #12]
 8002de2:	60b9      	str	r1, [r7, #8]
 8002de4:	603b      	str	r3, [r7, #0]
 8002de6:	4613      	mov	r3, r2
 8002de8:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002dea:	e04c      	b.n	8002e86 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002df2:	d048      	beq.n	8002e86 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8002df4:	f7fe f8de 	bl	8000fb4 <HAL_GetTick>
 8002df8:	4602      	mov	r2, r0
 8002dfa:	69bb      	ldr	r3, [r7, #24]
 8002dfc:	1ad3      	subs	r3, r2, r3
 8002dfe:	683a      	ldr	r2, [r7, #0]
 8002e00:	429a      	cmp	r2, r3
 8002e02:	d902      	bls.n	8002e0a <SPI_WaitFlagStateUntilTimeout+0x30>
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d13d      	bne.n	8002e86 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	685a      	ldr	r2, [r3, #4]
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002e18:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	685b      	ldr	r3, [r3, #4]
 8002e1e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002e22:	d111      	bne.n	8002e48 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	689b      	ldr	r3, [r3, #8]
 8002e28:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e2c:	d004      	beq.n	8002e38 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	689b      	ldr	r3, [r3, #8]
 8002e32:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e36:	d107      	bne.n	8002e48 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	681a      	ldr	r2, [r3, #0]
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002e46:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e4c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e50:	d10f      	bne.n	8002e72 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	681a      	ldr	r2, [r3, #0]
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002e60:	601a      	str	r2, [r3, #0]
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	681a      	ldr	r2, [r3, #0]
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002e70:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	2201      	movs	r2, #1
 8002e76:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002e82:	2303      	movs	r3, #3
 8002e84:	e00f      	b.n	8002ea6 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	689a      	ldr	r2, [r3, #8]
 8002e8c:	68bb      	ldr	r3, [r7, #8]
 8002e8e:	4013      	ands	r3, r2
 8002e90:	68ba      	ldr	r2, [r7, #8]
 8002e92:	429a      	cmp	r2, r3
 8002e94:	bf0c      	ite	eq
 8002e96:	2301      	moveq	r3, #1
 8002e98:	2300      	movne	r3, #0
 8002e9a:	b2db      	uxtb	r3, r3
 8002e9c:	461a      	mov	r2, r3
 8002e9e:	79fb      	ldrb	r3, [r7, #7]
 8002ea0:	429a      	cmp	r2, r3
 8002ea2:	d1a3      	bne.n	8002dec <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8002ea4:	2300      	movs	r3, #0
}
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	3710      	adds	r7, #16
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	bd80      	pop	{r7, pc}

08002eae <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8002eae:	b580      	push	{r7, lr}
 8002eb0:	b086      	sub	sp, #24
 8002eb2:	af02      	add	r7, sp, #8
 8002eb4:	60f8      	str	r0, [r7, #12]
 8002eb6:	60b9      	str	r1, [r7, #8]
 8002eb8:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	685b      	ldr	r3, [r3, #4]
 8002ebe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002ec2:	d111      	bne.n	8002ee8 <SPI_EndRxTransaction+0x3a>
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	689b      	ldr	r3, [r3, #8]
 8002ec8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002ecc:	d004      	beq.n	8002ed8 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	689b      	ldr	r3, [r3, #8]
 8002ed2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ed6:	d107      	bne.n	8002ee8 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	681a      	ldr	r2, [r3, #0]
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002ee6:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002ef0:	d12a      	bne.n	8002f48 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	689b      	ldr	r3, [r3, #8]
 8002ef6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002efa:	d012      	beq.n	8002f22 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	9300      	str	r3, [sp, #0]
 8002f00:	68bb      	ldr	r3, [r7, #8]
 8002f02:	2200      	movs	r2, #0
 8002f04:	2180      	movs	r1, #128	; 0x80
 8002f06:	68f8      	ldr	r0, [r7, #12]
 8002f08:	f7ff ff67 	bl	8002dda <SPI_WaitFlagStateUntilTimeout>
 8002f0c:	4603      	mov	r3, r0
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d02d      	beq.n	8002f6e <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f16:	f043 0220 	orr.w	r2, r3, #32
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8002f1e:	2303      	movs	r3, #3
 8002f20:	e026      	b.n	8002f70 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	9300      	str	r3, [sp, #0]
 8002f26:	68bb      	ldr	r3, [r7, #8]
 8002f28:	2200      	movs	r2, #0
 8002f2a:	2101      	movs	r1, #1
 8002f2c:	68f8      	ldr	r0, [r7, #12]
 8002f2e:	f7ff ff54 	bl	8002dda <SPI_WaitFlagStateUntilTimeout>
 8002f32:	4603      	mov	r3, r0
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d01a      	beq.n	8002f6e <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f3c:	f043 0220 	orr.w	r2, r3, #32
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8002f44:	2303      	movs	r3, #3
 8002f46:	e013      	b.n	8002f70 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	9300      	str	r3, [sp, #0]
 8002f4c:	68bb      	ldr	r3, [r7, #8]
 8002f4e:	2200      	movs	r2, #0
 8002f50:	2101      	movs	r1, #1
 8002f52:	68f8      	ldr	r0, [r7, #12]
 8002f54:	f7ff ff41 	bl	8002dda <SPI_WaitFlagStateUntilTimeout>
 8002f58:	4603      	mov	r3, r0
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d007      	beq.n	8002f6e <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f62:	f043 0220 	orr.w	r2, r3, #32
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002f6a:	2303      	movs	r3, #3
 8002f6c:	e000      	b.n	8002f70 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8002f6e:	2300      	movs	r3, #0
}
 8002f70:	4618      	mov	r0, r3
 8002f72:	3710      	adds	r7, #16
 8002f74:	46bd      	mov	sp, r7
 8002f76:	bd80      	pop	{r7, pc}

08002f78 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b088      	sub	sp, #32
 8002f7c:	af02      	add	r7, sp, #8
 8002f7e:	60f8      	str	r0, [r7, #12]
 8002f80:	60b9      	str	r1, [r7, #8]
 8002f82:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002f84:	4b1b      	ldr	r3, [pc, #108]	; (8002ff4 <SPI_EndRxTxTransaction+0x7c>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	4a1b      	ldr	r2, [pc, #108]	; (8002ff8 <SPI_EndRxTxTransaction+0x80>)
 8002f8a:	fba2 2303 	umull	r2, r3, r2, r3
 8002f8e:	0d5b      	lsrs	r3, r3, #21
 8002f90:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002f94:	fb02 f303 	mul.w	r3, r2, r3
 8002f98:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	685b      	ldr	r3, [r3, #4]
 8002f9e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002fa2:	d112      	bne.n	8002fca <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	9300      	str	r3, [sp, #0]
 8002fa8:	68bb      	ldr	r3, [r7, #8]
 8002faa:	2200      	movs	r2, #0
 8002fac:	2180      	movs	r1, #128	; 0x80
 8002fae:	68f8      	ldr	r0, [r7, #12]
 8002fb0:	f7ff ff13 	bl	8002dda <SPI_WaitFlagStateUntilTimeout>
 8002fb4:	4603      	mov	r3, r0
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d016      	beq.n	8002fe8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fbe:	f043 0220 	orr.w	r2, r3, #32
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002fc6:	2303      	movs	r3, #3
 8002fc8:	e00f      	b.n	8002fea <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002fca:	697b      	ldr	r3, [r7, #20]
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d00a      	beq.n	8002fe6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8002fd0:	697b      	ldr	r3, [r7, #20]
 8002fd2:	3b01      	subs	r3, #1
 8002fd4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	689b      	ldr	r3, [r3, #8]
 8002fdc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fe0:	2b80      	cmp	r3, #128	; 0x80
 8002fe2:	d0f2      	beq.n	8002fca <SPI_EndRxTxTransaction+0x52>
 8002fe4:	e000      	b.n	8002fe8 <SPI_EndRxTxTransaction+0x70>
        break;
 8002fe6:	bf00      	nop
  }

  return HAL_OK;
 8002fe8:	2300      	movs	r3, #0
}
 8002fea:	4618      	mov	r0, r3
 8002fec:	3718      	adds	r7, #24
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	bd80      	pop	{r7, pc}
 8002ff2:	bf00      	nop
 8002ff4:	20000060 	.word	0x20000060
 8002ff8:	165e9f81 	.word	0x165e9f81

08002ffc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b082      	sub	sp, #8
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2b00      	cmp	r3, #0
 8003008:	d101      	bne.n	800300e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800300a:	2301      	movs	r3, #1
 800300c:	e01d      	b.n	800304a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003014:	b2db      	uxtb	r3, r3
 8003016:	2b00      	cmp	r3, #0
 8003018:	d106      	bne.n	8003028 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	2200      	movs	r2, #0
 800301e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003022:	6878      	ldr	r0, [r7, #4]
 8003024:	f004 fa96 	bl	8007554 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2202      	movs	r2, #2
 800302c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681a      	ldr	r2, [r3, #0]
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	3304      	adds	r3, #4
 8003038:	4619      	mov	r1, r3
 800303a:	4610      	mov	r0, r2
 800303c:	f000 fc18 	bl	8003870 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2201      	movs	r2, #1
 8003044:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003048:	2300      	movs	r3, #0
}
 800304a:	4618      	mov	r0, r3
 800304c:	3708      	adds	r7, #8
 800304e:	46bd      	mov	sp, r7
 8003050:	bd80      	pop	{r7, pc}

08003052 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003052:	b480      	push	{r7}
 8003054:	b085      	sub	sp, #20
 8003056:	af00      	add	r7, sp, #0
 8003058:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	68da      	ldr	r2, [r3, #12]
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f042 0201 	orr.w	r2, r2, #1
 8003068:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	689b      	ldr	r3, [r3, #8]
 8003070:	f003 0307 	and.w	r3, r3, #7
 8003074:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	2b06      	cmp	r3, #6
 800307a:	d007      	beq.n	800308c <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	681a      	ldr	r2, [r3, #0]
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f042 0201 	orr.w	r2, r2, #1
 800308a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800308c:	2300      	movs	r3, #0
}
 800308e:	4618      	mov	r0, r3
 8003090:	3714      	adds	r7, #20
 8003092:	46bd      	mov	sp, r7
 8003094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003098:	4770      	bx	lr

0800309a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800309a:	b580      	push	{r7, lr}
 800309c:	b082      	sub	sp, #8
 800309e:	af00      	add	r7, sp, #0
 80030a0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d101      	bne.n	80030ac <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80030a8:	2301      	movs	r3, #1
 80030aa:	e01d      	b.n	80030e8 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030b2:	b2db      	uxtb	r3, r3
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d106      	bne.n	80030c6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2200      	movs	r2, #0
 80030bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80030c0:	6878      	ldr	r0, [r7, #4]
 80030c2:	f000 f815 	bl	80030f0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	2202      	movs	r2, #2
 80030ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681a      	ldr	r2, [r3, #0]
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	3304      	adds	r3, #4
 80030d6:	4619      	mov	r1, r3
 80030d8:	4610      	mov	r0, r2
 80030da:	f000 fbc9 	bl	8003870 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	2201      	movs	r2, #1
 80030e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80030e6:	2300      	movs	r3, #0
}
 80030e8:	4618      	mov	r0, r3
 80030ea:	3708      	adds	r7, #8
 80030ec:	46bd      	mov	sp, r7
 80030ee:	bd80      	pop	{r7, pc}

080030f0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80030f0:	b480      	push	{r7}
 80030f2:	b083      	sub	sp, #12
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80030f8:	bf00      	nop
 80030fa:	370c      	adds	r7, #12
 80030fc:	46bd      	mov	sp, r7
 80030fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003102:	4770      	bx	lr

08003104 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b084      	sub	sp, #16
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
 800310c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	2201      	movs	r2, #1
 8003114:	6839      	ldr	r1, [r7, #0]
 8003116:	4618      	mov	r0, r3
 8003118:	f000 fe94 	bl	8003e44 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	4a15      	ldr	r2, [pc, #84]	; (8003178 <HAL_TIM_PWM_Start+0x74>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d004      	beq.n	8003130 <HAL_TIM_PWM_Start+0x2c>
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	4a14      	ldr	r2, [pc, #80]	; (800317c <HAL_TIM_PWM_Start+0x78>)
 800312c:	4293      	cmp	r3, r2
 800312e:	d101      	bne.n	8003134 <HAL_TIM_PWM_Start+0x30>
 8003130:	2301      	movs	r3, #1
 8003132:	e000      	b.n	8003136 <HAL_TIM_PWM_Start+0x32>
 8003134:	2300      	movs	r3, #0
 8003136:	2b00      	cmp	r3, #0
 8003138:	d007      	beq.n	800314a <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003148:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	689b      	ldr	r3, [r3, #8]
 8003150:	f003 0307 	and.w	r3, r3, #7
 8003154:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	2b06      	cmp	r3, #6
 800315a:	d007      	beq.n	800316c <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	681a      	ldr	r2, [r3, #0]
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f042 0201 	orr.w	r2, r2, #1
 800316a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800316c:	2300      	movs	r3, #0
}
 800316e:	4618      	mov	r0, r3
 8003170:	3710      	adds	r7, #16
 8003172:	46bd      	mov	sp, r7
 8003174:	bd80      	pop	{r7, pc}
 8003176:	bf00      	nop
 8003178:	40010000 	.word	0x40010000
 800317c:	40010400 	.word	0x40010400

08003180 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	b086      	sub	sp, #24
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
 8003188:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	2b00      	cmp	r3, #0
 800318e:	d101      	bne.n	8003194 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003190:	2301      	movs	r3, #1
 8003192:	e083      	b.n	800329c <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800319a:	b2db      	uxtb	r3, r3
 800319c:	2b00      	cmp	r3, #0
 800319e:	d106      	bne.n	80031ae <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2200      	movs	r2, #0
 80031a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80031a8:	6878      	ldr	r0, [r7, #4]
 80031aa:	f004 fa25 	bl	80075f8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	2202      	movs	r2, #2
 80031b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	689b      	ldr	r3, [r3, #8]
 80031bc:	687a      	ldr	r2, [r7, #4]
 80031be:	6812      	ldr	r2, [r2, #0]
 80031c0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80031c4:	f023 0307 	bic.w	r3, r3, #7
 80031c8:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681a      	ldr	r2, [r3, #0]
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	3304      	adds	r3, #4
 80031d2:	4619      	mov	r1, r3
 80031d4:	4610      	mov	r0, r2
 80031d6:	f000 fb4b 	bl	8003870 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	689b      	ldr	r3, [r3, #8]
 80031e0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	699b      	ldr	r3, [r3, #24]
 80031e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	6a1b      	ldr	r3, [r3, #32]
 80031f0:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	697a      	ldr	r2, [r7, #20]
 80031f8:	4313      	orrs	r3, r2
 80031fa:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80031fc:	693b      	ldr	r3, [r7, #16]
 80031fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003202:	f023 0303 	bic.w	r3, r3, #3
 8003206:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	689a      	ldr	r2, [r3, #8]
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	699b      	ldr	r3, [r3, #24]
 8003210:	021b      	lsls	r3, r3, #8
 8003212:	4313      	orrs	r3, r2
 8003214:	693a      	ldr	r2, [r7, #16]
 8003216:	4313      	orrs	r3, r2
 8003218:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800321a:	693b      	ldr	r3, [r7, #16]
 800321c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8003220:	f023 030c 	bic.w	r3, r3, #12
 8003224:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003226:	693b      	ldr	r3, [r7, #16]
 8003228:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800322c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003230:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	68da      	ldr	r2, [r3, #12]
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	69db      	ldr	r3, [r3, #28]
 800323a:	021b      	lsls	r3, r3, #8
 800323c:	4313      	orrs	r3, r2
 800323e:	693a      	ldr	r2, [r7, #16]
 8003240:	4313      	orrs	r3, r2
 8003242:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	691b      	ldr	r3, [r3, #16]
 8003248:	011a      	lsls	r2, r3, #4
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	6a1b      	ldr	r3, [r3, #32]
 800324e:	031b      	lsls	r3, r3, #12
 8003250:	4313      	orrs	r3, r2
 8003252:	693a      	ldr	r2, [r7, #16]
 8003254:	4313      	orrs	r3, r2
 8003256:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800325e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8003266:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	685a      	ldr	r2, [r3, #4]
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	695b      	ldr	r3, [r3, #20]
 8003270:	011b      	lsls	r3, r3, #4
 8003272:	4313      	orrs	r3, r2
 8003274:	68fa      	ldr	r2, [r7, #12]
 8003276:	4313      	orrs	r3, r2
 8003278:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	697a      	ldr	r2, [r7, #20]
 8003280:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	693a      	ldr	r2, [r7, #16]
 8003288:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	68fa      	ldr	r2, [r7, #12]
 8003290:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	2201      	movs	r2, #1
 8003296:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800329a:	2300      	movs	r3, #0
}
 800329c:	4618      	mov	r0, r3
 800329e:	3718      	adds	r7, #24
 80032a0:	46bd      	mov	sp, r7
 80032a2:	bd80      	pop	{r7, pc}

080032a4 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b082      	sub	sp, #8
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
 80032ac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 80032ae:	683b      	ldr	r3, [r7, #0]
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d002      	beq.n	80032ba <HAL_TIM_Encoder_Start+0x16>
 80032b4:	2b04      	cmp	r3, #4
 80032b6:	d008      	beq.n	80032ca <HAL_TIM_Encoder_Start+0x26>
 80032b8:	e00f      	b.n	80032da <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	2201      	movs	r2, #1
 80032c0:	2100      	movs	r1, #0
 80032c2:	4618      	mov	r0, r3
 80032c4:	f000 fdbe 	bl	8003e44 <TIM_CCxChannelCmd>
      break;
 80032c8:	e016      	b.n	80032f8 <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	2201      	movs	r2, #1
 80032d0:	2104      	movs	r1, #4
 80032d2:	4618      	mov	r0, r3
 80032d4:	f000 fdb6 	bl	8003e44 <TIM_CCxChannelCmd>
      break;
 80032d8:	e00e      	b.n	80032f8 <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	2201      	movs	r2, #1
 80032e0:	2100      	movs	r1, #0
 80032e2:	4618      	mov	r0, r3
 80032e4:	f000 fdae 	bl	8003e44 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	2201      	movs	r2, #1
 80032ee:	2104      	movs	r1, #4
 80032f0:	4618      	mov	r0, r3
 80032f2:	f000 fda7 	bl	8003e44 <TIM_CCxChannelCmd>
      break;
 80032f6:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	681a      	ldr	r2, [r3, #0]
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f042 0201 	orr.w	r2, r2, #1
 8003306:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003308:	2300      	movs	r3, #0
}
 800330a:	4618      	mov	r0, r3
 800330c:	3708      	adds	r7, #8
 800330e:	46bd      	mov	sp, r7
 8003310:	bd80      	pop	{r7, pc}

08003312 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003312:	b580      	push	{r7, lr}
 8003314:	b082      	sub	sp, #8
 8003316:	af00      	add	r7, sp, #0
 8003318:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	691b      	ldr	r3, [r3, #16]
 8003320:	f003 0302 	and.w	r3, r3, #2
 8003324:	2b02      	cmp	r3, #2
 8003326:	d122      	bne.n	800336e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	68db      	ldr	r3, [r3, #12]
 800332e:	f003 0302 	and.w	r3, r3, #2
 8003332:	2b02      	cmp	r3, #2
 8003334:	d11b      	bne.n	800336e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f06f 0202 	mvn.w	r2, #2
 800333e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2201      	movs	r2, #1
 8003344:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	699b      	ldr	r3, [r3, #24]
 800334c:	f003 0303 	and.w	r3, r3, #3
 8003350:	2b00      	cmp	r3, #0
 8003352:	d003      	beq.n	800335c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003354:	6878      	ldr	r0, [r7, #4]
 8003356:	f000 fa6c 	bl	8003832 <HAL_TIM_IC_CaptureCallback>
 800335a:	e005      	b.n	8003368 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800335c:	6878      	ldr	r0, [r7, #4]
 800335e:	f000 fa5e 	bl	800381e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003362:	6878      	ldr	r0, [r7, #4]
 8003364:	f000 fa6f 	bl	8003846 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2200      	movs	r2, #0
 800336c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	691b      	ldr	r3, [r3, #16]
 8003374:	f003 0304 	and.w	r3, r3, #4
 8003378:	2b04      	cmp	r3, #4
 800337a:	d122      	bne.n	80033c2 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	68db      	ldr	r3, [r3, #12]
 8003382:	f003 0304 	and.w	r3, r3, #4
 8003386:	2b04      	cmp	r3, #4
 8003388:	d11b      	bne.n	80033c2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f06f 0204 	mvn.w	r2, #4
 8003392:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2202      	movs	r2, #2
 8003398:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	699b      	ldr	r3, [r3, #24]
 80033a0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d003      	beq.n	80033b0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80033a8:	6878      	ldr	r0, [r7, #4]
 80033aa:	f000 fa42 	bl	8003832 <HAL_TIM_IC_CaptureCallback>
 80033ae:	e005      	b.n	80033bc <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80033b0:	6878      	ldr	r0, [r7, #4]
 80033b2:	f000 fa34 	bl	800381e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033b6:	6878      	ldr	r0, [r7, #4]
 80033b8:	f000 fa45 	bl	8003846 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2200      	movs	r2, #0
 80033c0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	691b      	ldr	r3, [r3, #16]
 80033c8:	f003 0308 	and.w	r3, r3, #8
 80033cc:	2b08      	cmp	r3, #8
 80033ce:	d122      	bne.n	8003416 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	68db      	ldr	r3, [r3, #12]
 80033d6:	f003 0308 	and.w	r3, r3, #8
 80033da:	2b08      	cmp	r3, #8
 80033dc:	d11b      	bne.n	8003416 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f06f 0208 	mvn.w	r2, #8
 80033e6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2204      	movs	r2, #4
 80033ec:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	69db      	ldr	r3, [r3, #28]
 80033f4:	f003 0303 	and.w	r3, r3, #3
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d003      	beq.n	8003404 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80033fc:	6878      	ldr	r0, [r7, #4]
 80033fe:	f000 fa18 	bl	8003832 <HAL_TIM_IC_CaptureCallback>
 8003402:	e005      	b.n	8003410 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003404:	6878      	ldr	r0, [r7, #4]
 8003406:	f000 fa0a 	bl	800381e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800340a:	6878      	ldr	r0, [r7, #4]
 800340c:	f000 fa1b 	bl	8003846 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2200      	movs	r2, #0
 8003414:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	691b      	ldr	r3, [r3, #16]
 800341c:	f003 0310 	and.w	r3, r3, #16
 8003420:	2b10      	cmp	r3, #16
 8003422:	d122      	bne.n	800346a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	68db      	ldr	r3, [r3, #12]
 800342a:	f003 0310 	and.w	r3, r3, #16
 800342e:	2b10      	cmp	r3, #16
 8003430:	d11b      	bne.n	800346a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f06f 0210 	mvn.w	r2, #16
 800343a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2208      	movs	r2, #8
 8003440:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	69db      	ldr	r3, [r3, #28]
 8003448:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800344c:	2b00      	cmp	r3, #0
 800344e:	d003      	beq.n	8003458 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003450:	6878      	ldr	r0, [r7, #4]
 8003452:	f000 f9ee 	bl	8003832 <HAL_TIM_IC_CaptureCallback>
 8003456:	e005      	b.n	8003464 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003458:	6878      	ldr	r0, [r7, #4]
 800345a:	f000 f9e0 	bl	800381e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800345e:	6878      	ldr	r0, [r7, #4]
 8003460:	f000 f9f1 	bl	8003846 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2200      	movs	r2, #0
 8003468:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	691b      	ldr	r3, [r3, #16]
 8003470:	f003 0301 	and.w	r3, r3, #1
 8003474:	2b01      	cmp	r3, #1
 8003476:	d10e      	bne.n	8003496 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	68db      	ldr	r3, [r3, #12]
 800347e:	f003 0301 	and.w	r3, r3, #1
 8003482:	2b01      	cmp	r3, #1
 8003484:	d107      	bne.n	8003496 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f06f 0201 	mvn.w	r2, #1
 800348e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003490:	6878      	ldr	r0, [r7, #4]
 8003492:	f002 fa5d 	bl	8005950 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	691b      	ldr	r3, [r3, #16]
 800349c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034a0:	2b80      	cmp	r3, #128	; 0x80
 80034a2:	d10e      	bne.n	80034c2 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	68db      	ldr	r3, [r3, #12]
 80034aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034ae:	2b80      	cmp	r3, #128	; 0x80
 80034b0:	d107      	bne.n	80034c2 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80034ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80034bc:	6878      	ldr	r0, [r7, #4]
 80034be:	f000 fd35 	bl	8003f2c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	691b      	ldr	r3, [r3, #16]
 80034c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034cc:	2b40      	cmp	r3, #64	; 0x40
 80034ce:	d10e      	bne.n	80034ee <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	68db      	ldr	r3, [r3, #12]
 80034d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034da:	2b40      	cmp	r3, #64	; 0x40
 80034dc:	d107      	bne.n	80034ee <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80034e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80034e8:	6878      	ldr	r0, [r7, #4]
 80034ea:	f000 f9b6 	bl	800385a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	691b      	ldr	r3, [r3, #16]
 80034f4:	f003 0320 	and.w	r3, r3, #32
 80034f8:	2b20      	cmp	r3, #32
 80034fa:	d10e      	bne.n	800351a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	68db      	ldr	r3, [r3, #12]
 8003502:	f003 0320 	and.w	r3, r3, #32
 8003506:	2b20      	cmp	r3, #32
 8003508:	d107      	bne.n	800351a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f06f 0220 	mvn.w	r2, #32
 8003512:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003514:	6878      	ldr	r0, [r7, #4]
 8003516:	f000 fcff 	bl	8003f18 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800351a:	bf00      	nop
 800351c:	3708      	adds	r7, #8
 800351e:	46bd      	mov	sp, r7
 8003520:	bd80      	pop	{r7, pc}
	...

08003524 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003524:	b580      	push	{r7, lr}
 8003526:	b084      	sub	sp, #16
 8003528:	af00      	add	r7, sp, #0
 800352a:	60f8      	str	r0, [r7, #12]
 800352c:	60b9      	str	r1, [r7, #8]
 800352e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003536:	2b01      	cmp	r3, #1
 8003538:	d101      	bne.n	800353e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800353a:	2302      	movs	r3, #2
 800353c:	e0b4      	b.n	80036a8 <HAL_TIM_PWM_ConfigChannel+0x184>
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	2201      	movs	r2, #1
 8003542:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	2202      	movs	r2, #2
 800354a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	2b0c      	cmp	r3, #12
 8003552:	f200 809f 	bhi.w	8003694 <HAL_TIM_PWM_ConfigChannel+0x170>
 8003556:	a201      	add	r2, pc, #4	; (adr r2, 800355c <HAL_TIM_PWM_ConfigChannel+0x38>)
 8003558:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800355c:	08003591 	.word	0x08003591
 8003560:	08003695 	.word	0x08003695
 8003564:	08003695 	.word	0x08003695
 8003568:	08003695 	.word	0x08003695
 800356c:	080035d1 	.word	0x080035d1
 8003570:	08003695 	.word	0x08003695
 8003574:	08003695 	.word	0x08003695
 8003578:	08003695 	.word	0x08003695
 800357c:	08003613 	.word	0x08003613
 8003580:	08003695 	.word	0x08003695
 8003584:	08003695 	.word	0x08003695
 8003588:	08003695 	.word	0x08003695
 800358c:	08003653 	.word	0x08003653
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	68b9      	ldr	r1, [r7, #8]
 8003596:	4618      	mov	r0, r3
 8003598:	f000 fa0a 	bl	80039b0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	699a      	ldr	r2, [r3, #24]
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f042 0208 	orr.w	r2, r2, #8
 80035aa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	699a      	ldr	r2, [r3, #24]
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f022 0204 	bic.w	r2, r2, #4
 80035ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	6999      	ldr	r1, [r3, #24]
 80035c2:	68bb      	ldr	r3, [r7, #8]
 80035c4:	691a      	ldr	r2, [r3, #16]
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	430a      	orrs	r2, r1
 80035cc:	619a      	str	r2, [r3, #24]
      break;
 80035ce:	e062      	b.n	8003696 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	68b9      	ldr	r1, [r7, #8]
 80035d6:	4618      	mov	r0, r3
 80035d8:	f000 fa5a 	bl	8003a90 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	699a      	ldr	r2, [r3, #24]
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80035ea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	699a      	ldr	r2, [r3, #24]
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80035fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	6999      	ldr	r1, [r3, #24]
 8003602:	68bb      	ldr	r3, [r7, #8]
 8003604:	691b      	ldr	r3, [r3, #16]
 8003606:	021a      	lsls	r2, r3, #8
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	430a      	orrs	r2, r1
 800360e:	619a      	str	r2, [r3, #24]
      break;
 8003610:	e041      	b.n	8003696 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	68b9      	ldr	r1, [r7, #8]
 8003618:	4618      	mov	r0, r3
 800361a:	f000 faaf 	bl	8003b7c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	69da      	ldr	r2, [r3, #28]
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f042 0208 	orr.w	r2, r2, #8
 800362c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	69da      	ldr	r2, [r3, #28]
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f022 0204 	bic.w	r2, r2, #4
 800363c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	69d9      	ldr	r1, [r3, #28]
 8003644:	68bb      	ldr	r3, [r7, #8]
 8003646:	691a      	ldr	r2, [r3, #16]
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	430a      	orrs	r2, r1
 800364e:	61da      	str	r2, [r3, #28]
      break;
 8003650:	e021      	b.n	8003696 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	68b9      	ldr	r1, [r7, #8]
 8003658:	4618      	mov	r0, r3
 800365a:	f000 fb03 	bl	8003c64 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	69da      	ldr	r2, [r3, #28]
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800366c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	69da      	ldr	r2, [r3, #28]
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800367c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	69d9      	ldr	r1, [r3, #28]
 8003684:	68bb      	ldr	r3, [r7, #8]
 8003686:	691b      	ldr	r3, [r3, #16]
 8003688:	021a      	lsls	r2, r3, #8
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	430a      	orrs	r2, r1
 8003690:	61da      	str	r2, [r3, #28]
      break;
 8003692:	e000      	b.n	8003696 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8003694:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	2201      	movs	r2, #1
 800369a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	2200      	movs	r2, #0
 80036a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80036a6:	2300      	movs	r3, #0
}
 80036a8:	4618      	mov	r0, r3
 80036aa:	3710      	adds	r7, #16
 80036ac:	46bd      	mov	sp, r7
 80036ae:	bd80      	pop	{r7, pc}

080036b0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b084      	sub	sp, #16
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
 80036b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80036c0:	2b01      	cmp	r3, #1
 80036c2:	d101      	bne.n	80036c8 <HAL_TIM_ConfigClockSource+0x18>
 80036c4:	2302      	movs	r3, #2
 80036c6:	e0a6      	b.n	8003816 <HAL_TIM_ConfigClockSource+0x166>
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2201      	movs	r2, #1
 80036cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2202      	movs	r2, #2
 80036d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	689b      	ldr	r3, [r3, #8]
 80036de:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80036e6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80036ee:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	68fa      	ldr	r2, [r7, #12]
 80036f6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	2b40      	cmp	r3, #64	; 0x40
 80036fe:	d067      	beq.n	80037d0 <HAL_TIM_ConfigClockSource+0x120>
 8003700:	2b40      	cmp	r3, #64	; 0x40
 8003702:	d80b      	bhi.n	800371c <HAL_TIM_ConfigClockSource+0x6c>
 8003704:	2b10      	cmp	r3, #16
 8003706:	d073      	beq.n	80037f0 <HAL_TIM_ConfigClockSource+0x140>
 8003708:	2b10      	cmp	r3, #16
 800370a:	d802      	bhi.n	8003712 <HAL_TIM_ConfigClockSource+0x62>
 800370c:	2b00      	cmp	r3, #0
 800370e:	d06f      	beq.n	80037f0 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8003710:	e078      	b.n	8003804 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003712:	2b20      	cmp	r3, #32
 8003714:	d06c      	beq.n	80037f0 <HAL_TIM_ConfigClockSource+0x140>
 8003716:	2b30      	cmp	r3, #48	; 0x30
 8003718:	d06a      	beq.n	80037f0 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800371a:	e073      	b.n	8003804 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800371c:	2b70      	cmp	r3, #112	; 0x70
 800371e:	d00d      	beq.n	800373c <HAL_TIM_ConfigClockSource+0x8c>
 8003720:	2b70      	cmp	r3, #112	; 0x70
 8003722:	d804      	bhi.n	800372e <HAL_TIM_ConfigClockSource+0x7e>
 8003724:	2b50      	cmp	r3, #80	; 0x50
 8003726:	d033      	beq.n	8003790 <HAL_TIM_ConfigClockSource+0xe0>
 8003728:	2b60      	cmp	r3, #96	; 0x60
 800372a:	d041      	beq.n	80037b0 <HAL_TIM_ConfigClockSource+0x100>
      break;
 800372c:	e06a      	b.n	8003804 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800372e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003732:	d066      	beq.n	8003802 <HAL_TIM_ConfigClockSource+0x152>
 8003734:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003738:	d017      	beq.n	800376a <HAL_TIM_ConfigClockSource+0xba>
      break;
 800373a:	e063      	b.n	8003804 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6818      	ldr	r0, [r3, #0]
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	6899      	ldr	r1, [r3, #8]
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	685a      	ldr	r2, [r3, #4]
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	68db      	ldr	r3, [r3, #12]
 800374c:	f000 fb5a 	bl	8003e04 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	689b      	ldr	r3, [r3, #8]
 8003756:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800375e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	68fa      	ldr	r2, [r7, #12]
 8003766:	609a      	str	r2, [r3, #8]
      break;
 8003768:	e04c      	b.n	8003804 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6818      	ldr	r0, [r3, #0]
 800376e:	683b      	ldr	r3, [r7, #0]
 8003770:	6899      	ldr	r1, [r3, #8]
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	685a      	ldr	r2, [r3, #4]
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	68db      	ldr	r3, [r3, #12]
 800377a:	f000 fb43 	bl	8003e04 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	689a      	ldr	r2, [r3, #8]
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800378c:	609a      	str	r2, [r3, #8]
      break;
 800378e:	e039      	b.n	8003804 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6818      	ldr	r0, [r3, #0]
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	6859      	ldr	r1, [r3, #4]
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	68db      	ldr	r3, [r3, #12]
 800379c:	461a      	mov	r2, r3
 800379e:	f000 fab7 	bl	8003d10 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	2150      	movs	r1, #80	; 0x50
 80037a8:	4618      	mov	r0, r3
 80037aa:	f000 fb10 	bl	8003dce <TIM_ITRx_SetConfig>
      break;
 80037ae:	e029      	b.n	8003804 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6818      	ldr	r0, [r3, #0]
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	6859      	ldr	r1, [r3, #4]
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	68db      	ldr	r3, [r3, #12]
 80037bc:	461a      	mov	r2, r3
 80037be:	f000 fad6 	bl	8003d6e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	2160      	movs	r1, #96	; 0x60
 80037c8:	4618      	mov	r0, r3
 80037ca:	f000 fb00 	bl	8003dce <TIM_ITRx_SetConfig>
      break;
 80037ce:	e019      	b.n	8003804 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6818      	ldr	r0, [r3, #0]
 80037d4:	683b      	ldr	r3, [r7, #0]
 80037d6:	6859      	ldr	r1, [r3, #4]
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	68db      	ldr	r3, [r3, #12]
 80037dc:	461a      	mov	r2, r3
 80037de:	f000 fa97 	bl	8003d10 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	2140      	movs	r1, #64	; 0x40
 80037e8:	4618      	mov	r0, r3
 80037ea:	f000 faf0 	bl	8003dce <TIM_ITRx_SetConfig>
      break;
 80037ee:	e009      	b.n	8003804 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681a      	ldr	r2, [r3, #0]
 80037f4:	683b      	ldr	r3, [r7, #0]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	4619      	mov	r1, r3
 80037fa:	4610      	mov	r0, r2
 80037fc:	f000 fae7 	bl	8003dce <TIM_ITRx_SetConfig>
      break;
 8003800:	e000      	b.n	8003804 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8003802:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2201      	movs	r2, #1
 8003808:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2200      	movs	r2, #0
 8003810:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003814:	2300      	movs	r3, #0
}
 8003816:	4618      	mov	r0, r3
 8003818:	3710      	adds	r7, #16
 800381a:	46bd      	mov	sp, r7
 800381c:	bd80      	pop	{r7, pc}

0800381e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800381e:	b480      	push	{r7}
 8003820:	b083      	sub	sp, #12
 8003822:	af00      	add	r7, sp, #0
 8003824:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003826:	bf00      	nop
 8003828:	370c      	adds	r7, #12
 800382a:	46bd      	mov	sp, r7
 800382c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003830:	4770      	bx	lr

08003832 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003832:	b480      	push	{r7}
 8003834:	b083      	sub	sp, #12
 8003836:	af00      	add	r7, sp, #0
 8003838:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800383a:	bf00      	nop
 800383c:	370c      	adds	r7, #12
 800383e:	46bd      	mov	sp, r7
 8003840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003844:	4770      	bx	lr

08003846 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003846:	b480      	push	{r7}
 8003848:	b083      	sub	sp, #12
 800384a:	af00      	add	r7, sp, #0
 800384c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800384e:	bf00      	nop
 8003850:	370c      	adds	r7, #12
 8003852:	46bd      	mov	sp, r7
 8003854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003858:	4770      	bx	lr

0800385a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800385a:	b480      	push	{r7}
 800385c:	b083      	sub	sp, #12
 800385e:	af00      	add	r7, sp, #0
 8003860:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003862:	bf00      	nop
 8003864:	370c      	adds	r7, #12
 8003866:	46bd      	mov	sp, r7
 8003868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386c:	4770      	bx	lr
	...

08003870 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003870:	b480      	push	{r7}
 8003872:	b085      	sub	sp, #20
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
 8003878:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	4a40      	ldr	r2, [pc, #256]	; (8003984 <TIM_Base_SetConfig+0x114>)
 8003884:	4293      	cmp	r3, r2
 8003886:	d013      	beq.n	80038b0 <TIM_Base_SetConfig+0x40>
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800388e:	d00f      	beq.n	80038b0 <TIM_Base_SetConfig+0x40>
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	4a3d      	ldr	r2, [pc, #244]	; (8003988 <TIM_Base_SetConfig+0x118>)
 8003894:	4293      	cmp	r3, r2
 8003896:	d00b      	beq.n	80038b0 <TIM_Base_SetConfig+0x40>
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	4a3c      	ldr	r2, [pc, #240]	; (800398c <TIM_Base_SetConfig+0x11c>)
 800389c:	4293      	cmp	r3, r2
 800389e:	d007      	beq.n	80038b0 <TIM_Base_SetConfig+0x40>
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	4a3b      	ldr	r2, [pc, #236]	; (8003990 <TIM_Base_SetConfig+0x120>)
 80038a4:	4293      	cmp	r3, r2
 80038a6:	d003      	beq.n	80038b0 <TIM_Base_SetConfig+0x40>
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	4a3a      	ldr	r2, [pc, #232]	; (8003994 <TIM_Base_SetConfig+0x124>)
 80038ac:	4293      	cmp	r3, r2
 80038ae:	d108      	bne.n	80038c2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	685b      	ldr	r3, [r3, #4]
 80038bc:	68fa      	ldr	r2, [r7, #12]
 80038be:	4313      	orrs	r3, r2
 80038c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	4a2f      	ldr	r2, [pc, #188]	; (8003984 <TIM_Base_SetConfig+0x114>)
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d02b      	beq.n	8003922 <TIM_Base_SetConfig+0xb2>
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038d0:	d027      	beq.n	8003922 <TIM_Base_SetConfig+0xb2>
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	4a2c      	ldr	r2, [pc, #176]	; (8003988 <TIM_Base_SetConfig+0x118>)
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d023      	beq.n	8003922 <TIM_Base_SetConfig+0xb2>
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	4a2b      	ldr	r2, [pc, #172]	; (800398c <TIM_Base_SetConfig+0x11c>)
 80038de:	4293      	cmp	r3, r2
 80038e0:	d01f      	beq.n	8003922 <TIM_Base_SetConfig+0xb2>
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	4a2a      	ldr	r2, [pc, #168]	; (8003990 <TIM_Base_SetConfig+0x120>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d01b      	beq.n	8003922 <TIM_Base_SetConfig+0xb2>
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	4a29      	ldr	r2, [pc, #164]	; (8003994 <TIM_Base_SetConfig+0x124>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d017      	beq.n	8003922 <TIM_Base_SetConfig+0xb2>
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	4a28      	ldr	r2, [pc, #160]	; (8003998 <TIM_Base_SetConfig+0x128>)
 80038f6:	4293      	cmp	r3, r2
 80038f8:	d013      	beq.n	8003922 <TIM_Base_SetConfig+0xb2>
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	4a27      	ldr	r2, [pc, #156]	; (800399c <TIM_Base_SetConfig+0x12c>)
 80038fe:	4293      	cmp	r3, r2
 8003900:	d00f      	beq.n	8003922 <TIM_Base_SetConfig+0xb2>
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	4a26      	ldr	r2, [pc, #152]	; (80039a0 <TIM_Base_SetConfig+0x130>)
 8003906:	4293      	cmp	r3, r2
 8003908:	d00b      	beq.n	8003922 <TIM_Base_SetConfig+0xb2>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	4a25      	ldr	r2, [pc, #148]	; (80039a4 <TIM_Base_SetConfig+0x134>)
 800390e:	4293      	cmp	r3, r2
 8003910:	d007      	beq.n	8003922 <TIM_Base_SetConfig+0xb2>
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	4a24      	ldr	r2, [pc, #144]	; (80039a8 <TIM_Base_SetConfig+0x138>)
 8003916:	4293      	cmp	r3, r2
 8003918:	d003      	beq.n	8003922 <TIM_Base_SetConfig+0xb2>
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	4a23      	ldr	r2, [pc, #140]	; (80039ac <TIM_Base_SetConfig+0x13c>)
 800391e:	4293      	cmp	r3, r2
 8003920:	d108      	bne.n	8003934 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003928:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800392a:	683b      	ldr	r3, [r7, #0]
 800392c:	68db      	ldr	r3, [r3, #12]
 800392e:	68fa      	ldr	r2, [r7, #12]
 8003930:	4313      	orrs	r3, r2
 8003932:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	695b      	ldr	r3, [r3, #20]
 800393e:	4313      	orrs	r3, r2
 8003940:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	68fa      	ldr	r2, [r7, #12]
 8003946:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	689a      	ldr	r2, [r3, #8]
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	681a      	ldr	r2, [r3, #0]
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	4a0a      	ldr	r2, [pc, #40]	; (8003984 <TIM_Base_SetConfig+0x114>)
 800395c:	4293      	cmp	r3, r2
 800395e:	d003      	beq.n	8003968 <TIM_Base_SetConfig+0xf8>
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	4a0c      	ldr	r2, [pc, #48]	; (8003994 <TIM_Base_SetConfig+0x124>)
 8003964:	4293      	cmp	r3, r2
 8003966:	d103      	bne.n	8003970 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	691a      	ldr	r2, [r3, #16]
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2201      	movs	r2, #1
 8003974:	615a      	str	r2, [r3, #20]
}
 8003976:	bf00      	nop
 8003978:	3714      	adds	r7, #20
 800397a:	46bd      	mov	sp, r7
 800397c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003980:	4770      	bx	lr
 8003982:	bf00      	nop
 8003984:	40010000 	.word	0x40010000
 8003988:	40000400 	.word	0x40000400
 800398c:	40000800 	.word	0x40000800
 8003990:	40000c00 	.word	0x40000c00
 8003994:	40010400 	.word	0x40010400
 8003998:	40014000 	.word	0x40014000
 800399c:	40014400 	.word	0x40014400
 80039a0:	40014800 	.word	0x40014800
 80039a4:	40001800 	.word	0x40001800
 80039a8:	40001c00 	.word	0x40001c00
 80039ac:	40002000 	.word	0x40002000

080039b0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80039b0:	b480      	push	{r7}
 80039b2:	b087      	sub	sp, #28
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
 80039b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6a1b      	ldr	r3, [r3, #32]
 80039be:	f023 0201 	bic.w	r2, r3, #1
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6a1b      	ldr	r3, [r3, #32]
 80039ca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	685b      	ldr	r3, [r3, #4]
 80039d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	699b      	ldr	r3, [r3, #24]
 80039d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	f023 0303 	bic.w	r3, r3, #3
 80039e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	68fa      	ldr	r2, [r7, #12]
 80039ee:	4313      	orrs	r3, r2
 80039f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80039f2:	697b      	ldr	r3, [r7, #20]
 80039f4:	f023 0302 	bic.w	r3, r3, #2
 80039f8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80039fa:	683b      	ldr	r3, [r7, #0]
 80039fc:	689b      	ldr	r3, [r3, #8]
 80039fe:	697a      	ldr	r2, [r7, #20]
 8003a00:	4313      	orrs	r3, r2
 8003a02:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	4a20      	ldr	r2, [pc, #128]	; (8003a88 <TIM_OC1_SetConfig+0xd8>)
 8003a08:	4293      	cmp	r3, r2
 8003a0a:	d003      	beq.n	8003a14 <TIM_OC1_SetConfig+0x64>
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	4a1f      	ldr	r2, [pc, #124]	; (8003a8c <TIM_OC1_SetConfig+0xdc>)
 8003a10:	4293      	cmp	r3, r2
 8003a12:	d10c      	bne.n	8003a2e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003a14:	697b      	ldr	r3, [r7, #20]
 8003a16:	f023 0308 	bic.w	r3, r3, #8
 8003a1a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	68db      	ldr	r3, [r3, #12]
 8003a20:	697a      	ldr	r2, [r7, #20]
 8003a22:	4313      	orrs	r3, r2
 8003a24:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003a26:	697b      	ldr	r3, [r7, #20]
 8003a28:	f023 0304 	bic.w	r3, r3, #4
 8003a2c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	4a15      	ldr	r2, [pc, #84]	; (8003a88 <TIM_OC1_SetConfig+0xd8>)
 8003a32:	4293      	cmp	r3, r2
 8003a34:	d003      	beq.n	8003a3e <TIM_OC1_SetConfig+0x8e>
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	4a14      	ldr	r2, [pc, #80]	; (8003a8c <TIM_OC1_SetConfig+0xdc>)
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d111      	bne.n	8003a62 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003a3e:	693b      	ldr	r3, [r7, #16]
 8003a40:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003a44:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003a46:	693b      	ldr	r3, [r7, #16]
 8003a48:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003a4c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003a4e:	683b      	ldr	r3, [r7, #0]
 8003a50:	695b      	ldr	r3, [r3, #20]
 8003a52:	693a      	ldr	r2, [r7, #16]
 8003a54:	4313      	orrs	r3, r2
 8003a56:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	699b      	ldr	r3, [r3, #24]
 8003a5c:	693a      	ldr	r2, [r7, #16]
 8003a5e:	4313      	orrs	r3, r2
 8003a60:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	693a      	ldr	r2, [r7, #16]
 8003a66:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	68fa      	ldr	r2, [r7, #12]
 8003a6c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003a6e:	683b      	ldr	r3, [r7, #0]
 8003a70:	685a      	ldr	r2, [r3, #4]
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	697a      	ldr	r2, [r7, #20]
 8003a7a:	621a      	str	r2, [r3, #32]
}
 8003a7c:	bf00      	nop
 8003a7e:	371c      	adds	r7, #28
 8003a80:	46bd      	mov	sp, r7
 8003a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a86:	4770      	bx	lr
 8003a88:	40010000 	.word	0x40010000
 8003a8c:	40010400 	.word	0x40010400

08003a90 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003a90:	b480      	push	{r7}
 8003a92:	b087      	sub	sp, #28
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
 8003a98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6a1b      	ldr	r3, [r3, #32]
 8003a9e:	f023 0210 	bic.w	r2, r3, #16
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6a1b      	ldr	r3, [r3, #32]
 8003aaa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	685b      	ldr	r3, [r3, #4]
 8003ab0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	699b      	ldr	r3, [r3, #24]
 8003ab6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003abe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ac6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003ac8:	683b      	ldr	r3, [r7, #0]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	021b      	lsls	r3, r3, #8
 8003ace:	68fa      	ldr	r2, [r7, #12]
 8003ad0:	4313      	orrs	r3, r2
 8003ad2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003ad4:	697b      	ldr	r3, [r7, #20]
 8003ad6:	f023 0320 	bic.w	r3, r3, #32
 8003ada:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	689b      	ldr	r3, [r3, #8]
 8003ae0:	011b      	lsls	r3, r3, #4
 8003ae2:	697a      	ldr	r2, [r7, #20]
 8003ae4:	4313      	orrs	r3, r2
 8003ae6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	4a22      	ldr	r2, [pc, #136]	; (8003b74 <TIM_OC2_SetConfig+0xe4>)
 8003aec:	4293      	cmp	r3, r2
 8003aee:	d003      	beq.n	8003af8 <TIM_OC2_SetConfig+0x68>
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	4a21      	ldr	r2, [pc, #132]	; (8003b78 <TIM_OC2_SetConfig+0xe8>)
 8003af4:	4293      	cmp	r3, r2
 8003af6:	d10d      	bne.n	8003b14 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003af8:	697b      	ldr	r3, [r7, #20]
 8003afa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003afe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	68db      	ldr	r3, [r3, #12]
 8003b04:	011b      	lsls	r3, r3, #4
 8003b06:	697a      	ldr	r2, [r7, #20]
 8003b08:	4313      	orrs	r3, r2
 8003b0a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003b0c:	697b      	ldr	r3, [r7, #20]
 8003b0e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003b12:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	4a17      	ldr	r2, [pc, #92]	; (8003b74 <TIM_OC2_SetConfig+0xe4>)
 8003b18:	4293      	cmp	r3, r2
 8003b1a:	d003      	beq.n	8003b24 <TIM_OC2_SetConfig+0x94>
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	4a16      	ldr	r2, [pc, #88]	; (8003b78 <TIM_OC2_SetConfig+0xe8>)
 8003b20:	4293      	cmp	r3, r2
 8003b22:	d113      	bne.n	8003b4c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003b24:	693b      	ldr	r3, [r7, #16]
 8003b26:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003b2a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003b2c:	693b      	ldr	r3, [r7, #16]
 8003b2e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003b32:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003b34:	683b      	ldr	r3, [r7, #0]
 8003b36:	695b      	ldr	r3, [r3, #20]
 8003b38:	009b      	lsls	r3, r3, #2
 8003b3a:	693a      	ldr	r2, [r7, #16]
 8003b3c:	4313      	orrs	r3, r2
 8003b3e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	699b      	ldr	r3, [r3, #24]
 8003b44:	009b      	lsls	r3, r3, #2
 8003b46:	693a      	ldr	r2, [r7, #16]
 8003b48:	4313      	orrs	r3, r2
 8003b4a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	693a      	ldr	r2, [r7, #16]
 8003b50:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	68fa      	ldr	r2, [r7, #12]
 8003b56:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003b58:	683b      	ldr	r3, [r7, #0]
 8003b5a:	685a      	ldr	r2, [r3, #4]
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	697a      	ldr	r2, [r7, #20]
 8003b64:	621a      	str	r2, [r3, #32]
}
 8003b66:	bf00      	nop
 8003b68:	371c      	adds	r7, #28
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b70:	4770      	bx	lr
 8003b72:	bf00      	nop
 8003b74:	40010000 	.word	0x40010000
 8003b78:	40010400 	.word	0x40010400

08003b7c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003b7c:	b480      	push	{r7}
 8003b7e:	b087      	sub	sp, #28
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
 8003b84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6a1b      	ldr	r3, [r3, #32]
 8003b8a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6a1b      	ldr	r3, [r3, #32]
 8003b96:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	685b      	ldr	r3, [r3, #4]
 8003b9c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	69db      	ldr	r3, [r3, #28]
 8003ba2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003baa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	f023 0303 	bic.w	r3, r3, #3
 8003bb2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003bb4:	683b      	ldr	r3, [r7, #0]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	68fa      	ldr	r2, [r7, #12]
 8003bba:	4313      	orrs	r3, r2
 8003bbc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003bbe:	697b      	ldr	r3, [r7, #20]
 8003bc0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003bc4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003bc6:	683b      	ldr	r3, [r7, #0]
 8003bc8:	689b      	ldr	r3, [r3, #8]
 8003bca:	021b      	lsls	r3, r3, #8
 8003bcc:	697a      	ldr	r2, [r7, #20]
 8003bce:	4313      	orrs	r3, r2
 8003bd0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	4a21      	ldr	r2, [pc, #132]	; (8003c5c <TIM_OC3_SetConfig+0xe0>)
 8003bd6:	4293      	cmp	r3, r2
 8003bd8:	d003      	beq.n	8003be2 <TIM_OC3_SetConfig+0x66>
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	4a20      	ldr	r2, [pc, #128]	; (8003c60 <TIM_OC3_SetConfig+0xe4>)
 8003bde:	4293      	cmp	r3, r2
 8003be0:	d10d      	bne.n	8003bfe <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003be2:	697b      	ldr	r3, [r7, #20]
 8003be4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003be8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003bea:	683b      	ldr	r3, [r7, #0]
 8003bec:	68db      	ldr	r3, [r3, #12]
 8003bee:	021b      	lsls	r3, r3, #8
 8003bf0:	697a      	ldr	r2, [r7, #20]
 8003bf2:	4313      	orrs	r3, r2
 8003bf4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003bf6:	697b      	ldr	r3, [r7, #20]
 8003bf8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003bfc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	4a16      	ldr	r2, [pc, #88]	; (8003c5c <TIM_OC3_SetConfig+0xe0>)
 8003c02:	4293      	cmp	r3, r2
 8003c04:	d003      	beq.n	8003c0e <TIM_OC3_SetConfig+0x92>
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	4a15      	ldr	r2, [pc, #84]	; (8003c60 <TIM_OC3_SetConfig+0xe4>)
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	d113      	bne.n	8003c36 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003c0e:	693b      	ldr	r3, [r7, #16]
 8003c10:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003c14:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003c16:	693b      	ldr	r3, [r7, #16]
 8003c18:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003c1c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003c1e:	683b      	ldr	r3, [r7, #0]
 8003c20:	695b      	ldr	r3, [r3, #20]
 8003c22:	011b      	lsls	r3, r3, #4
 8003c24:	693a      	ldr	r2, [r7, #16]
 8003c26:	4313      	orrs	r3, r2
 8003c28:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003c2a:	683b      	ldr	r3, [r7, #0]
 8003c2c:	699b      	ldr	r3, [r3, #24]
 8003c2e:	011b      	lsls	r3, r3, #4
 8003c30:	693a      	ldr	r2, [r7, #16]
 8003c32:	4313      	orrs	r3, r2
 8003c34:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	693a      	ldr	r2, [r7, #16]
 8003c3a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	68fa      	ldr	r2, [r7, #12]
 8003c40:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003c42:	683b      	ldr	r3, [r7, #0]
 8003c44:	685a      	ldr	r2, [r3, #4]
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	697a      	ldr	r2, [r7, #20]
 8003c4e:	621a      	str	r2, [r3, #32]
}
 8003c50:	bf00      	nop
 8003c52:	371c      	adds	r7, #28
 8003c54:	46bd      	mov	sp, r7
 8003c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5a:	4770      	bx	lr
 8003c5c:	40010000 	.word	0x40010000
 8003c60:	40010400 	.word	0x40010400

08003c64 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003c64:	b480      	push	{r7}
 8003c66:	b087      	sub	sp, #28
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
 8003c6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6a1b      	ldr	r3, [r3, #32]
 8003c72:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6a1b      	ldr	r3, [r3, #32]
 8003c7e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	685b      	ldr	r3, [r3, #4]
 8003c84:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	69db      	ldr	r3, [r3, #28]
 8003c8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c9a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003c9c:	683b      	ldr	r3, [r7, #0]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	021b      	lsls	r3, r3, #8
 8003ca2:	68fa      	ldr	r2, [r7, #12]
 8003ca4:	4313      	orrs	r3, r2
 8003ca6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003ca8:	693b      	ldr	r3, [r7, #16]
 8003caa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003cae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	689b      	ldr	r3, [r3, #8]
 8003cb4:	031b      	lsls	r3, r3, #12
 8003cb6:	693a      	ldr	r2, [r7, #16]
 8003cb8:	4313      	orrs	r3, r2
 8003cba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	4a12      	ldr	r2, [pc, #72]	; (8003d08 <TIM_OC4_SetConfig+0xa4>)
 8003cc0:	4293      	cmp	r3, r2
 8003cc2:	d003      	beq.n	8003ccc <TIM_OC4_SetConfig+0x68>
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	4a11      	ldr	r2, [pc, #68]	; (8003d0c <TIM_OC4_SetConfig+0xa8>)
 8003cc8:	4293      	cmp	r3, r2
 8003cca:	d109      	bne.n	8003ce0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003ccc:	697b      	ldr	r3, [r7, #20]
 8003cce:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003cd2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	695b      	ldr	r3, [r3, #20]
 8003cd8:	019b      	lsls	r3, r3, #6
 8003cda:	697a      	ldr	r2, [r7, #20]
 8003cdc:	4313      	orrs	r3, r2
 8003cde:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	697a      	ldr	r2, [r7, #20]
 8003ce4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	68fa      	ldr	r2, [r7, #12]
 8003cea:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	685a      	ldr	r2, [r3, #4]
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	693a      	ldr	r2, [r7, #16]
 8003cf8:	621a      	str	r2, [r3, #32]
}
 8003cfa:	bf00      	nop
 8003cfc:	371c      	adds	r7, #28
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d04:	4770      	bx	lr
 8003d06:	bf00      	nop
 8003d08:	40010000 	.word	0x40010000
 8003d0c:	40010400 	.word	0x40010400

08003d10 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003d10:	b480      	push	{r7}
 8003d12:	b087      	sub	sp, #28
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	60f8      	str	r0, [r7, #12]
 8003d18:	60b9      	str	r1, [r7, #8]
 8003d1a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	6a1b      	ldr	r3, [r3, #32]
 8003d20:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	6a1b      	ldr	r3, [r3, #32]
 8003d26:	f023 0201 	bic.w	r2, r3, #1
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	699b      	ldr	r3, [r3, #24]
 8003d32:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003d34:	693b      	ldr	r3, [r7, #16]
 8003d36:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003d3a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	011b      	lsls	r3, r3, #4
 8003d40:	693a      	ldr	r2, [r7, #16]
 8003d42:	4313      	orrs	r3, r2
 8003d44:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003d46:	697b      	ldr	r3, [r7, #20]
 8003d48:	f023 030a 	bic.w	r3, r3, #10
 8003d4c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003d4e:	697a      	ldr	r2, [r7, #20]
 8003d50:	68bb      	ldr	r3, [r7, #8]
 8003d52:	4313      	orrs	r3, r2
 8003d54:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	693a      	ldr	r2, [r7, #16]
 8003d5a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	697a      	ldr	r2, [r7, #20]
 8003d60:	621a      	str	r2, [r3, #32]
}
 8003d62:	bf00      	nop
 8003d64:	371c      	adds	r7, #28
 8003d66:	46bd      	mov	sp, r7
 8003d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6c:	4770      	bx	lr

08003d6e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003d6e:	b480      	push	{r7}
 8003d70:	b087      	sub	sp, #28
 8003d72:	af00      	add	r7, sp, #0
 8003d74:	60f8      	str	r0, [r7, #12]
 8003d76:	60b9      	str	r1, [r7, #8]
 8003d78:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	6a1b      	ldr	r3, [r3, #32]
 8003d7e:	f023 0210 	bic.w	r2, r3, #16
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	699b      	ldr	r3, [r3, #24]
 8003d8a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	6a1b      	ldr	r3, [r3, #32]
 8003d90:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003d92:	697b      	ldr	r3, [r7, #20]
 8003d94:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003d98:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	031b      	lsls	r3, r3, #12
 8003d9e:	697a      	ldr	r2, [r7, #20]
 8003da0:	4313      	orrs	r3, r2
 8003da2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003da4:	693b      	ldr	r3, [r7, #16]
 8003da6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003daa:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003dac:	68bb      	ldr	r3, [r7, #8]
 8003dae:	011b      	lsls	r3, r3, #4
 8003db0:	693a      	ldr	r2, [r7, #16]
 8003db2:	4313      	orrs	r3, r2
 8003db4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	697a      	ldr	r2, [r7, #20]
 8003dba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	693a      	ldr	r2, [r7, #16]
 8003dc0:	621a      	str	r2, [r3, #32]
}
 8003dc2:	bf00      	nop
 8003dc4:	371c      	adds	r7, #28
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dcc:	4770      	bx	lr

08003dce <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003dce:	b480      	push	{r7}
 8003dd0:	b085      	sub	sp, #20
 8003dd2:	af00      	add	r7, sp, #0
 8003dd4:	6078      	str	r0, [r7, #4]
 8003dd6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	689b      	ldr	r3, [r3, #8]
 8003ddc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003de4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003de6:	683a      	ldr	r2, [r7, #0]
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	4313      	orrs	r3, r2
 8003dec:	f043 0307 	orr.w	r3, r3, #7
 8003df0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	68fa      	ldr	r2, [r7, #12]
 8003df6:	609a      	str	r2, [r3, #8]
}
 8003df8:	bf00      	nop
 8003dfa:	3714      	adds	r7, #20
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e02:	4770      	bx	lr

08003e04 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003e04:	b480      	push	{r7}
 8003e06:	b087      	sub	sp, #28
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	60f8      	str	r0, [r7, #12]
 8003e0c:	60b9      	str	r1, [r7, #8]
 8003e0e:	607a      	str	r2, [r7, #4]
 8003e10:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	689b      	ldr	r3, [r3, #8]
 8003e16:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003e18:	697b      	ldr	r3, [r7, #20]
 8003e1a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003e1e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	021a      	lsls	r2, r3, #8
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	431a      	orrs	r2, r3
 8003e28:	68bb      	ldr	r3, [r7, #8]
 8003e2a:	4313      	orrs	r3, r2
 8003e2c:	697a      	ldr	r2, [r7, #20]
 8003e2e:	4313      	orrs	r3, r2
 8003e30:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	697a      	ldr	r2, [r7, #20]
 8003e36:	609a      	str	r2, [r3, #8]
}
 8003e38:	bf00      	nop
 8003e3a:	371c      	adds	r7, #28
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e42:	4770      	bx	lr

08003e44 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003e44:	b480      	push	{r7}
 8003e46:	b087      	sub	sp, #28
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	60f8      	str	r0, [r7, #12]
 8003e4c:	60b9      	str	r1, [r7, #8]
 8003e4e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003e50:	68bb      	ldr	r3, [r7, #8]
 8003e52:	f003 031f 	and.w	r3, r3, #31
 8003e56:	2201      	movs	r2, #1
 8003e58:	fa02 f303 	lsl.w	r3, r2, r3
 8003e5c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	6a1a      	ldr	r2, [r3, #32]
 8003e62:	697b      	ldr	r3, [r7, #20]
 8003e64:	43db      	mvns	r3, r3
 8003e66:	401a      	ands	r2, r3
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	6a1a      	ldr	r2, [r3, #32]
 8003e70:	68bb      	ldr	r3, [r7, #8]
 8003e72:	f003 031f 	and.w	r3, r3, #31
 8003e76:	6879      	ldr	r1, [r7, #4]
 8003e78:	fa01 f303 	lsl.w	r3, r1, r3
 8003e7c:	431a      	orrs	r2, r3
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	621a      	str	r2, [r3, #32]
}
 8003e82:	bf00      	nop
 8003e84:	371c      	adds	r7, #28
 8003e86:	46bd      	mov	sp, r7
 8003e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8c:	4770      	bx	lr

08003e8e <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003e8e:	b480      	push	{r7}
 8003e90:	b085      	sub	sp, #20
 8003e92:	af00      	add	r7, sp, #0
 8003e94:	6078      	str	r0, [r7, #4]
 8003e96:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e9e:	2b01      	cmp	r3, #1
 8003ea0:	d101      	bne.n	8003ea6 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003ea2:	2302      	movs	r3, #2
 8003ea4:	e032      	b.n	8003f0c <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	2201      	movs	r2, #1
 8003eaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	2202      	movs	r2, #2
 8003eb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	685b      	ldr	r3, [r3, #4]
 8003ebc:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	689b      	ldr	r3, [r3, #8]
 8003ec4:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ecc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003ece:	683b      	ldr	r3, [r7, #0]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	68fa      	ldr	r2, [r7, #12]
 8003ed4:	4313      	orrs	r3, r2
 8003ed6:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8003ed8:	68bb      	ldr	r3, [r7, #8]
 8003eda:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003ede:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003ee0:	683b      	ldr	r3, [r7, #0]
 8003ee2:	685b      	ldr	r3, [r3, #4]
 8003ee4:	68ba      	ldr	r2, [r7, #8]
 8003ee6:	4313      	orrs	r3, r2
 8003ee8:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	68fa      	ldr	r2, [r7, #12]
 8003ef0:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	68ba      	ldr	r2, [r7, #8]
 8003ef8:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	2201      	movs	r2, #1
 8003efe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	2200      	movs	r2, #0
 8003f06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003f0a:	2300      	movs	r3, #0
}
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	3714      	adds	r7, #20
 8003f10:	46bd      	mov	sp, r7
 8003f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f16:	4770      	bx	lr

08003f18 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003f18:	b480      	push	{r7}
 8003f1a:	b083      	sub	sp, #12
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003f20:	bf00      	nop
 8003f22:	370c      	adds	r7, #12
 8003f24:	46bd      	mov	sp, r7
 8003f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2a:	4770      	bx	lr

08003f2c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003f2c:	b480      	push	{r7}
 8003f2e:	b083      	sub	sp, #12
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003f34:	bf00      	nop
 8003f36:	370c      	adds	r7, #12
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3e:	4770      	bx	lr

08003f40 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b082      	sub	sp, #8
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d101      	bne.n	8003f52 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003f4e:	2301      	movs	r3, #1
 8003f50:	e03f      	b.n	8003fd2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003f58:	b2db      	uxtb	r3, r3
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d106      	bne.n	8003f6c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	2200      	movs	r2, #0
 8003f62:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003f66:	6878      	ldr	r0, [r7, #4]
 8003f68:	f003 fc42 	bl	80077f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2224      	movs	r2, #36	; 0x24
 8003f70:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	68da      	ldr	r2, [r3, #12]
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003f82:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003f84:	6878      	ldr	r0, [r7, #4]
 8003f86:	f000 f90b 	bl	80041a0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	691a      	ldr	r2, [r3, #16]
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003f98:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	695a      	ldr	r2, [r3, #20]
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003fa8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	68da      	ldr	r2, [r3, #12]
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003fb8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2220      	movs	r2, #32
 8003fc4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2220      	movs	r2, #32
 8003fcc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003fd0:	2300      	movs	r3, #0
}
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	3708      	adds	r7, #8
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	bd80      	pop	{r7, pc}

08003fda <HAL_UART_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003fda:	b580      	push	{r7, lr}
 8003fdc:	b088      	sub	sp, #32
 8003fde:	af02      	add	r7, sp, #8
 8003fe0:	60f8      	str	r0, [r7, #12]
 8003fe2:	60b9      	str	r1, [r7, #8]
 8003fe4:	603b      	str	r3, [r7, #0]
 8003fe6:	4613      	mov	r3, r2
 8003fe8:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8003fea:	2300      	movs	r3, #0
 8003fec:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003ff4:	b2db      	uxtb	r3, r3
 8003ff6:	2b20      	cmp	r3, #32
 8003ff8:	f040 8083 	bne.w	8004102 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8003ffc:	68bb      	ldr	r3, [r7, #8]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d002      	beq.n	8004008 <HAL_UART_Transmit+0x2e>
 8004002:	88fb      	ldrh	r3, [r7, #6]
 8004004:	2b00      	cmp	r3, #0
 8004006:	d101      	bne.n	800400c <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8004008:	2301      	movs	r3, #1
 800400a:	e07b      	b.n	8004104 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004012:	2b01      	cmp	r3, #1
 8004014:	d101      	bne.n	800401a <HAL_UART_Transmit+0x40>
 8004016:	2302      	movs	r3, #2
 8004018:	e074      	b.n	8004104 <HAL_UART_Transmit+0x12a>
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	2201      	movs	r2, #1
 800401e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	2200      	movs	r2, #0
 8004026:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	2221      	movs	r2, #33	; 0x21
 800402c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8004030:	f7fc ffc0 	bl	8000fb4 <HAL_GetTick>
 8004034:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	88fa      	ldrh	r2, [r7, #6]
 800403a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	88fa      	ldrh	r2, [r7, #6]
 8004040:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004042:	e042      	b.n	80040ca <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004048:	b29b      	uxth	r3, r3
 800404a:	3b01      	subs	r3, #1
 800404c:	b29a      	uxth	r2, r3
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	689b      	ldr	r3, [r3, #8]
 8004056:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800405a:	d122      	bne.n	80040a2 <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800405c:	683b      	ldr	r3, [r7, #0]
 800405e:	9300      	str	r3, [sp, #0]
 8004060:	697b      	ldr	r3, [r7, #20]
 8004062:	2200      	movs	r2, #0
 8004064:	2180      	movs	r1, #128	; 0x80
 8004066:	68f8      	ldr	r0, [r7, #12]
 8004068:	f000 f850 	bl	800410c <UART_WaitOnFlagUntilTimeout>
 800406c:	4603      	mov	r3, r0
 800406e:	2b00      	cmp	r3, #0
 8004070:	d001      	beq.n	8004076 <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 8004072:	2303      	movs	r3, #3
 8004074:	e046      	b.n	8004104 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8004076:	68bb      	ldr	r3, [r7, #8]
 8004078:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800407a:	693b      	ldr	r3, [r7, #16]
 800407c:	881b      	ldrh	r3, [r3, #0]
 800407e:	461a      	mov	r2, r3
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004088:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	691b      	ldr	r3, [r3, #16]
 800408e:	2b00      	cmp	r3, #0
 8004090:	d103      	bne.n	800409a <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 8004092:	68bb      	ldr	r3, [r7, #8]
 8004094:	3302      	adds	r3, #2
 8004096:	60bb      	str	r3, [r7, #8]
 8004098:	e017      	b.n	80040ca <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 800409a:	68bb      	ldr	r3, [r7, #8]
 800409c:	3301      	adds	r3, #1
 800409e:	60bb      	str	r3, [r7, #8]
 80040a0:	e013      	b.n	80040ca <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80040a2:	683b      	ldr	r3, [r7, #0]
 80040a4:	9300      	str	r3, [sp, #0]
 80040a6:	697b      	ldr	r3, [r7, #20]
 80040a8:	2200      	movs	r2, #0
 80040aa:	2180      	movs	r1, #128	; 0x80
 80040ac:	68f8      	ldr	r0, [r7, #12]
 80040ae:	f000 f82d 	bl	800410c <UART_WaitOnFlagUntilTimeout>
 80040b2:	4603      	mov	r3, r0
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d001      	beq.n	80040bc <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 80040b8:	2303      	movs	r3, #3
 80040ba:	e023      	b.n	8004104 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80040bc:	68bb      	ldr	r3, [r7, #8]
 80040be:	1c5a      	adds	r2, r3, #1
 80040c0:	60ba      	str	r2, [r7, #8]
 80040c2:	781a      	ldrb	r2, [r3, #0]
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80040ce:	b29b      	uxth	r3, r3
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d1b7      	bne.n	8004044 <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	9300      	str	r3, [sp, #0]
 80040d8:	697b      	ldr	r3, [r7, #20]
 80040da:	2200      	movs	r2, #0
 80040dc:	2140      	movs	r1, #64	; 0x40
 80040de:	68f8      	ldr	r0, [r7, #12]
 80040e0:	f000 f814 	bl	800410c <UART_WaitOnFlagUntilTimeout>
 80040e4:	4603      	mov	r3, r0
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d001      	beq.n	80040ee <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80040ea:	2303      	movs	r3, #3
 80040ec:	e00a      	b.n	8004104 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	2220      	movs	r2, #32
 80040f2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	2200      	movs	r2, #0
 80040fa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 80040fe:	2300      	movs	r3, #0
 8004100:	e000      	b.n	8004104 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8004102:	2302      	movs	r3, #2
  }
}
 8004104:	4618      	mov	r0, r3
 8004106:	3718      	adds	r7, #24
 8004108:	46bd      	mov	sp, r7
 800410a:	bd80      	pop	{r7, pc}

0800410c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800410c:	b580      	push	{r7, lr}
 800410e:	b084      	sub	sp, #16
 8004110:	af00      	add	r7, sp, #0
 8004112:	60f8      	str	r0, [r7, #12]
 8004114:	60b9      	str	r1, [r7, #8]
 8004116:	603b      	str	r3, [r7, #0]
 8004118:	4613      	mov	r3, r2
 800411a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800411c:	e02c      	b.n	8004178 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800411e:	69bb      	ldr	r3, [r7, #24]
 8004120:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004124:	d028      	beq.n	8004178 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004126:	69bb      	ldr	r3, [r7, #24]
 8004128:	2b00      	cmp	r3, #0
 800412a:	d007      	beq.n	800413c <UART_WaitOnFlagUntilTimeout+0x30>
 800412c:	f7fc ff42 	bl	8000fb4 <HAL_GetTick>
 8004130:	4602      	mov	r2, r0
 8004132:	683b      	ldr	r3, [r7, #0]
 8004134:	1ad3      	subs	r3, r2, r3
 8004136:	69ba      	ldr	r2, [r7, #24]
 8004138:	429a      	cmp	r2, r3
 800413a:	d21d      	bcs.n	8004178 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	68da      	ldr	r2, [r3, #12]
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800414a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	695a      	ldr	r2, [r3, #20]
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f022 0201 	bic.w	r2, r2, #1
 800415a:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	2220      	movs	r2, #32
 8004160:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	2220      	movs	r2, #32
 8004168:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	2200      	movs	r2, #0
 8004170:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8004174:	2303      	movs	r3, #3
 8004176:	e00f      	b.n	8004198 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	681a      	ldr	r2, [r3, #0]
 800417e:	68bb      	ldr	r3, [r7, #8]
 8004180:	4013      	ands	r3, r2
 8004182:	68ba      	ldr	r2, [r7, #8]
 8004184:	429a      	cmp	r2, r3
 8004186:	bf0c      	ite	eq
 8004188:	2301      	moveq	r3, #1
 800418a:	2300      	movne	r3, #0
 800418c:	b2db      	uxtb	r3, r3
 800418e:	461a      	mov	r2, r3
 8004190:	79fb      	ldrb	r3, [r7, #7]
 8004192:	429a      	cmp	r2, r3
 8004194:	d0c3      	beq.n	800411e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004196:	2300      	movs	r3, #0
}
 8004198:	4618      	mov	r0, r3
 800419a:	3710      	adds	r7, #16
 800419c:	46bd      	mov	sp, r7
 800419e:	bd80      	pop	{r7, pc}

080041a0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80041a0:	b5b0      	push	{r4, r5, r7, lr}
 80041a2:	b084      	sub	sp, #16
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	691b      	ldr	r3, [r3, #16]
 80041ae:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	68da      	ldr	r2, [r3, #12]
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	430a      	orrs	r2, r1
 80041bc:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	689a      	ldr	r2, [r3, #8]
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	691b      	ldr	r3, [r3, #16]
 80041c6:	431a      	orrs	r2, r3
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	695b      	ldr	r3, [r3, #20]
 80041cc:	431a      	orrs	r2, r3
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	69db      	ldr	r3, [r3, #28]
 80041d2:	4313      	orrs	r3, r2
 80041d4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	68db      	ldr	r3, [r3, #12]
 80041dc:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80041e0:	f023 030c 	bic.w	r3, r3, #12
 80041e4:	687a      	ldr	r2, [r7, #4]
 80041e6:	6812      	ldr	r2, [r2, #0]
 80041e8:	68f9      	ldr	r1, [r7, #12]
 80041ea:	430b      	orrs	r3, r1
 80041ec:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	695b      	ldr	r3, [r3, #20]
 80041f4:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	699a      	ldr	r2, [r3, #24]
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	430a      	orrs	r2, r1
 8004202:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	69db      	ldr	r3, [r3, #28]
 8004208:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800420c:	f040 80e4 	bne.w	80043d8 <UART_SetConfig+0x238>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	4aab      	ldr	r2, [pc, #684]	; (80044c4 <UART_SetConfig+0x324>)
 8004216:	4293      	cmp	r3, r2
 8004218:	d004      	beq.n	8004224 <UART_SetConfig+0x84>
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	4aaa      	ldr	r2, [pc, #680]	; (80044c8 <UART_SetConfig+0x328>)
 8004220:	4293      	cmp	r3, r2
 8004222:	d16c      	bne.n	80042fe <UART_SetConfig+0x15e>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8004224:	f7fe f982 	bl	800252c <HAL_RCC_GetPCLK2Freq>
 8004228:	4602      	mov	r2, r0
 800422a:	4613      	mov	r3, r2
 800422c:	009b      	lsls	r3, r3, #2
 800422e:	4413      	add	r3, r2
 8004230:	009a      	lsls	r2, r3, #2
 8004232:	441a      	add	r2, r3
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	685b      	ldr	r3, [r3, #4]
 8004238:	005b      	lsls	r3, r3, #1
 800423a:	fbb2 f3f3 	udiv	r3, r2, r3
 800423e:	4aa3      	ldr	r2, [pc, #652]	; (80044cc <UART_SetConfig+0x32c>)
 8004240:	fba2 2303 	umull	r2, r3, r2, r3
 8004244:	095b      	lsrs	r3, r3, #5
 8004246:	011c      	lsls	r4, r3, #4
 8004248:	f7fe f970 	bl	800252c <HAL_RCC_GetPCLK2Freq>
 800424c:	4602      	mov	r2, r0
 800424e:	4613      	mov	r3, r2
 8004250:	009b      	lsls	r3, r3, #2
 8004252:	4413      	add	r3, r2
 8004254:	009a      	lsls	r2, r3, #2
 8004256:	441a      	add	r2, r3
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	685b      	ldr	r3, [r3, #4]
 800425c:	005b      	lsls	r3, r3, #1
 800425e:	fbb2 f5f3 	udiv	r5, r2, r3
 8004262:	f7fe f963 	bl	800252c <HAL_RCC_GetPCLK2Freq>
 8004266:	4602      	mov	r2, r0
 8004268:	4613      	mov	r3, r2
 800426a:	009b      	lsls	r3, r3, #2
 800426c:	4413      	add	r3, r2
 800426e:	009a      	lsls	r2, r3, #2
 8004270:	441a      	add	r2, r3
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	685b      	ldr	r3, [r3, #4]
 8004276:	005b      	lsls	r3, r3, #1
 8004278:	fbb2 f3f3 	udiv	r3, r2, r3
 800427c:	4a93      	ldr	r2, [pc, #588]	; (80044cc <UART_SetConfig+0x32c>)
 800427e:	fba2 2303 	umull	r2, r3, r2, r3
 8004282:	095b      	lsrs	r3, r3, #5
 8004284:	2264      	movs	r2, #100	; 0x64
 8004286:	fb02 f303 	mul.w	r3, r2, r3
 800428a:	1aeb      	subs	r3, r5, r3
 800428c:	00db      	lsls	r3, r3, #3
 800428e:	3332      	adds	r3, #50	; 0x32
 8004290:	4a8e      	ldr	r2, [pc, #568]	; (80044cc <UART_SetConfig+0x32c>)
 8004292:	fba2 2303 	umull	r2, r3, r2, r3
 8004296:	095b      	lsrs	r3, r3, #5
 8004298:	005b      	lsls	r3, r3, #1
 800429a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800429e:	441c      	add	r4, r3
 80042a0:	f7fe f944 	bl	800252c <HAL_RCC_GetPCLK2Freq>
 80042a4:	4602      	mov	r2, r0
 80042a6:	4613      	mov	r3, r2
 80042a8:	009b      	lsls	r3, r3, #2
 80042aa:	4413      	add	r3, r2
 80042ac:	009a      	lsls	r2, r3, #2
 80042ae:	441a      	add	r2, r3
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	685b      	ldr	r3, [r3, #4]
 80042b4:	005b      	lsls	r3, r3, #1
 80042b6:	fbb2 f5f3 	udiv	r5, r2, r3
 80042ba:	f7fe f937 	bl	800252c <HAL_RCC_GetPCLK2Freq>
 80042be:	4602      	mov	r2, r0
 80042c0:	4613      	mov	r3, r2
 80042c2:	009b      	lsls	r3, r3, #2
 80042c4:	4413      	add	r3, r2
 80042c6:	009a      	lsls	r2, r3, #2
 80042c8:	441a      	add	r2, r3
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	685b      	ldr	r3, [r3, #4]
 80042ce:	005b      	lsls	r3, r3, #1
 80042d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80042d4:	4a7d      	ldr	r2, [pc, #500]	; (80044cc <UART_SetConfig+0x32c>)
 80042d6:	fba2 2303 	umull	r2, r3, r2, r3
 80042da:	095b      	lsrs	r3, r3, #5
 80042dc:	2264      	movs	r2, #100	; 0x64
 80042de:	fb02 f303 	mul.w	r3, r2, r3
 80042e2:	1aeb      	subs	r3, r5, r3
 80042e4:	00db      	lsls	r3, r3, #3
 80042e6:	3332      	adds	r3, #50	; 0x32
 80042e8:	4a78      	ldr	r2, [pc, #480]	; (80044cc <UART_SetConfig+0x32c>)
 80042ea:	fba2 2303 	umull	r2, r3, r2, r3
 80042ee:	095b      	lsrs	r3, r3, #5
 80042f0:	f003 0207 	and.w	r2, r3, #7
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	4422      	add	r2, r4
 80042fa:	609a      	str	r2, [r3, #8]
 80042fc:	e154      	b.n	80045a8 <UART_SetConfig+0x408>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80042fe:	f7fe f901 	bl	8002504 <HAL_RCC_GetPCLK1Freq>
 8004302:	4602      	mov	r2, r0
 8004304:	4613      	mov	r3, r2
 8004306:	009b      	lsls	r3, r3, #2
 8004308:	4413      	add	r3, r2
 800430a:	009a      	lsls	r2, r3, #2
 800430c:	441a      	add	r2, r3
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	685b      	ldr	r3, [r3, #4]
 8004312:	005b      	lsls	r3, r3, #1
 8004314:	fbb2 f3f3 	udiv	r3, r2, r3
 8004318:	4a6c      	ldr	r2, [pc, #432]	; (80044cc <UART_SetConfig+0x32c>)
 800431a:	fba2 2303 	umull	r2, r3, r2, r3
 800431e:	095b      	lsrs	r3, r3, #5
 8004320:	011c      	lsls	r4, r3, #4
 8004322:	f7fe f8ef 	bl	8002504 <HAL_RCC_GetPCLK1Freq>
 8004326:	4602      	mov	r2, r0
 8004328:	4613      	mov	r3, r2
 800432a:	009b      	lsls	r3, r3, #2
 800432c:	4413      	add	r3, r2
 800432e:	009a      	lsls	r2, r3, #2
 8004330:	441a      	add	r2, r3
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	685b      	ldr	r3, [r3, #4]
 8004336:	005b      	lsls	r3, r3, #1
 8004338:	fbb2 f5f3 	udiv	r5, r2, r3
 800433c:	f7fe f8e2 	bl	8002504 <HAL_RCC_GetPCLK1Freq>
 8004340:	4602      	mov	r2, r0
 8004342:	4613      	mov	r3, r2
 8004344:	009b      	lsls	r3, r3, #2
 8004346:	4413      	add	r3, r2
 8004348:	009a      	lsls	r2, r3, #2
 800434a:	441a      	add	r2, r3
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	685b      	ldr	r3, [r3, #4]
 8004350:	005b      	lsls	r3, r3, #1
 8004352:	fbb2 f3f3 	udiv	r3, r2, r3
 8004356:	4a5d      	ldr	r2, [pc, #372]	; (80044cc <UART_SetConfig+0x32c>)
 8004358:	fba2 2303 	umull	r2, r3, r2, r3
 800435c:	095b      	lsrs	r3, r3, #5
 800435e:	2264      	movs	r2, #100	; 0x64
 8004360:	fb02 f303 	mul.w	r3, r2, r3
 8004364:	1aeb      	subs	r3, r5, r3
 8004366:	00db      	lsls	r3, r3, #3
 8004368:	3332      	adds	r3, #50	; 0x32
 800436a:	4a58      	ldr	r2, [pc, #352]	; (80044cc <UART_SetConfig+0x32c>)
 800436c:	fba2 2303 	umull	r2, r3, r2, r3
 8004370:	095b      	lsrs	r3, r3, #5
 8004372:	005b      	lsls	r3, r3, #1
 8004374:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004378:	441c      	add	r4, r3
 800437a:	f7fe f8c3 	bl	8002504 <HAL_RCC_GetPCLK1Freq>
 800437e:	4602      	mov	r2, r0
 8004380:	4613      	mov	r3, r2
 8004382:	009b      	lsls	r3, r3, #2
 8004384:	4413      	add	r3, r2
 8004386:	009a      	lsls	r2, r3, #2
 8004388:	441a      	add	r2, r3
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	685b      	ldr	r3, [r3, #4]
 800438e:	005b      	lsls	r3, r3, #1
 8004390:	fbb2 f5f3 	udiv	r5, r2, r3
 8004394:	f7fe f8b6 	bl	8002504 <HAL_RCC_GetPCLK1Freq>
 8004398:	4602      	mov	r2, r0
 800439a:	4613      	mov	r3, r2
 800439c:	009b      	lsls	r3, r3, #2
 800439e:	4413      	add	r3, r2
 80043a0:	009a      	lsls	r2, r3, #2
 80043a2:	441a      	add	r2, r3
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	685b      	ldr	r3, [r3, #4]
 80043a8:	005b      	lsls	r3, r3, #1
 80043aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80043ae:	4a47      	ldr	r2, [pc, #284]	; (80044cc <UART_SetConfig+0x32c>)
 80043b0:	fba2 2303 	umull	r2, r3, r2, r3
 80043b4:	095b      	lsrs	r3, r3, #5
 80043b6:	2264      	movs	r2, #100	; 0x64
 80043b8:	fb02 f303 	mul.w	r3, r2, r3
 80043bc:	1aeb      	subs	r3, r5, r3
 80043be:	00db      	lsls	r3, r3, #3
 80043c0:	3332      	adds	r3, #50	; 0x32
 80043c2:	4a42      	ldr	r2, [pc, #264]	; (80044cc <UART_SetConfig+0x32c>)
 80043c4:	fba2 2303 	umull	r2, r3, r2, r3
 80043c8:	095b      	lsrs	r3, r3, #5
 80043ca:	f003 0207 	and.w	r2, r3, #7
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	4422      	add	r2, r4
 80043d4:	609a      	str	r2, [r3, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 80043d6:	e0e7      	b.n	80045a8 <UART_SetConfig+0x408>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	4a39      	ldr	r2, [pc, #228]	; (80044c4 <UART_SetConfig+0x324>)
 80043de:	4293      	cmp	r3, r2
 80043e0:	d004      	beq.n	80043ec <UART_SetConfig+0x24c>
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	4a38      	ldr	r2, [pc, #224]	; (80044c8 <UART_SetConfig+0x328>)
 80043e8:	4293      	cmp	r3, r2
 80043ea:	d171      	bne.n	80044d0 <UART_SetConfig+0x330>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80043ec:	f7fe f89e 	bl	800252c <HAL_RCC_GetPCLK2Freq>
 80043f0:	4602      	mov	r2, r0
 80043f2:	4613      	mov	r3, r2
 80043f4:	009b      	lsls	r3, r3, #2
 80043f6:	4413      	add	r3, r2
 80043f8:	009a      	lsls	r2, r3, #2
 80043fa:	441a      	add	r2, r3
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	685b      	ldr	r3, [r3, #4]
 8004400:	009b      	lsls	r3, r3, #2
 8004402:	fbb2 f3f3 	udiv	r3, r2, r3
 8004406:	4a31      	ldr	r2, [pc, #196]	; (80044cc <UART_SetConfig+0x32c>)
 8004408:	fba2 2303 	umull	r2, r3, r2, r3
 800440c:	095b      	lsrs	r3, r3, #5
 800440e:	011c      	lsls	r4, r3, #4
 8004410:	f7fe f88c 	bl	800252c <HAL_RCC_GetPCLK2Freq>
 8004414:	4602      	mov	r2, r0
 8004416:	4613      	mov	r3, r2
 8004418:	009b      	lsls	r3, r3, #2
 800441a:	4413      	add	r3, r2
 800441c:	009a      	lsls	r2, r3, #2
 800441e:	441a      	add	r2, r3
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	685b      	ldr	r3, [r3, #4]
 8004424:	009b      	lsls	r3, r3, #2
 8004426:	fbb2 f5f3 	udiv	r5, r2, r3
 800442a:	f7fe f87f 	bl	800252c <HAL_RCC_GetPCLK2Freq>
 800442e:	4602      	mov	r2, r0
 8004430:	4613      	mov	r3, r2
 8004432:	009b      	lsls	r3, r3, #2
 8004434:	4413      	add	r3, r2
 8004436:	009a      	lsls	r2, r3, #2
 8004438:	441a      	add	r2, r3
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	685b      	ldr	r3, [r3, #4]
 800443e:	009b      	lsls	r3, r3, #2
 8004440:	fbb2 f3f3 	udiv	r3, r2, r3
 8004444:	4a21      	ldr	r2, [pc, #132]	; (80044cc <UART_SetConfig+0x32c>)
 8004446:	fba2 2303 	umull	r2, r3, r2, r3
 800444a:	095b      	lsrs	r3, r3, #5
 800444c:	2264      	movs	r2, #100	; 0x64
 800444e:	fb02 f303 	mul.w	r3, r2, r3
 8004452:	1aeb      	subs	r3, r5, r3
 8004454:	011b      	lsls	r3, r3, #4
 8004456:	3332      	adds	r3, #50	; 0x32
 8004458:	4a1c      	ldr	r2, [pc, #112]	; (80044cc <UART_SetConfig+0x32c>)
 800445a:	fba2 2303 	umull	r2, r3, r2, r3
 800445e:	095b      	lsrs	r3, r3, #5
 8004460:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004464:	441c      	add	r4, r3
 8004466:	f7fe f861 	bl	800252c <HAL_RCC_GetPCLK2Freq>
 800446a:	4602      	mov	r2, r0
 800446c:	4613      	mov	r3, r2
 800446e:	009b      	lsls	r3, r3, #2
 8004470:	4413      	add	r3, r2
 8004472:	009a      	lsls	r2, r3, #2
 8004474:	441a      	add	r2, r3
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	685b      	ldr	r3, [r3, #4]
 800447a:	009b      	lsls	r3, r3, #2
 800447c:	fbb2 f5f3 	udiv	r5, r2, r3
 8004480:	f7fe f854 	bl	800252c <HAL_RCC_GetPCLK2Freq>
 8004484:	4602      	mov	r2, r0
 8004486:	4613      	mov	r3, r2
 8004488:	009b      	lsls	r3, r3, #2
 800448a:	4413      	add	r3, r2
 800448c:	009a      	lsls	r2, r3, #2
 800448e:	441a      	add	r2, r3
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	685b      	ldr	r3, [r3, #4]
 8004494:	009b      	lsls	r3, r3, #2
 8004496:	fbb2 f3f3 	udiv	r3, r2, r3
 800449a:	4a0c      	ldr	r2, [pc, #48]	; (80044cc <UART_SetConfig+0x32c>)
 800449c:	fba2 2303 	umull	r2, r3, r2, r3
 80044a0:	095b      	lsrs	r3, r3, #5
 80044a2:	2264      	movs	r2, #100	; 0x64
 80044a4:	fb02 f303 	mul.w	r3, r2, r3
 80044a8:	1aeb      	subs	r3, r5, r3
 80044aa:	011b      	lsls	r3, r3, #4
 80044ac:	3332      	adds	r3, #50	; 0x32
 80044ae:	4a07      	ldr	r2, [pc, #28]	; (80044cc <UART_SetConfig+0x32c>)
 80044b0:	fba2 2303 	umull	r2, r3, r2, r3
 80044b4:	095b      	lsrs	r3, r3, #5
 80044b6:	f003 020f 	and.w	r2, r3, #15
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	4422      	add	r2, r4
 80044c0:	609a      	str	r2, [r3, #8]
 80044c2:	e071      	b.n	80045a8 <UART_SetConfig+0x408>
 80044c4:	40011000 	.word	0x40011000
 80044c8:	40011400 	.word	0x40011400
 80044cc:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80044d0:	f7fe f818 	bl	8002504 <HAL_RCC_GetPCLK1Freq>
 80044d4:	4602      	mov	r2, r0
 80044d6:	4613      	mov	r3, r2
 80044d8:	009b      	lsls	r3, r3, #2
 80044da:	4413      	add	r3, r2
 80044dc:	009a      	lsls	r2, r3, #2
 80044de:	441a      	add	r2, r3
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	685b      	ldr	r3, [r3, #4]
 80044e4:	009b      	lsls	r3, r3, #2
 80044e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80044ea:	4a31      	ldr	r2, [pc, #196]	; (80045b0 <UART_SetConfig+0x410>)
 80044ec:	fba2 2303 	umull	r2, r3, r2, r3
 80044f0:	095b      	lsrs	r3, r3, #5
 80044f2:	011c      	lsls	r4, r3, #4
 80044f4:	f7fe f806 	bl	8002504 <HAL_RCC_GetPCLK1Freq>
 80044f8:	4602      	mov	r2, r0
 80044fa:	4613      	mov	r3, r2
 80044fc:	009b      	lsls	r3, r3, #2
 80044fe:	4413      	add	r3, r2
 8004500:	009a      	lsls	r2, r3, #2
 8004502:	441a      	add	r2, r3
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	685b      	ldr	r3, [r3, #4]
 8004508:	009b      	lsls	r3, r3, #2
 800450a:	fbb2 f5f3 	udiv	r5, r2, r3
 800450e:	f7fd fff9 	bl	8002504 <HAL_RCC_GetPCLK1Freq>
 8004512:	4602      	mov	r2, r0
 8004514:	4613      	mov	r3, r2
 8004516:	009b      	lsls	r3, r3, #2
 8004518:	4413      	add	r3, r2
 800451a:	009a      	lsls	r2, r3, #2
 800451c:	441a      	add	r2, r3
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	685b      	ldr	r3, [r3, #4]
 8004522:	009b      	lsls	r3, r3, #2
 8004524:	fbb2 f3f3 	udiv	r3, r2, r3
 8004528:	4a21      	ldr	r2, [pc, #132]	; (80045b0 <UART_SetConfig+0x410>)
 800452a:	fba2 2303 	umull	r2, r3, r2, r3
 800452e:	095b      	lsrs	r3, r3, #5
 8004530:	2264      	movs	r2, #100	; 0x64
 8004532:	fb02 f303 	mul.w	r3, r2, r3
 8004536:	1aeb      	subs	r3, r5, r3
 8004538:	011b      	lsls	r3, r3, #4
 800453a:	3332      	adds	r3, #50	; 0x32
 800453c:	4a1c      	ldr	r2, [pc, #112]	; (80045b0 <UART_SetConfig+0x410>)
 800453e:	fba2 2303 	umull	r2, r3, r2, r3
 8004542:	095b      	lsrs	r3, r3, #5
 8004544:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004548:	441c      	add	r4, r3
 800454a:	f7fd ffdb 	bl	8002504 <HAL_RCC_GetPCLK1Freq>
 800454e:	4602      	mov	r2, r0
 8004550:	4613      	mov	r3, r2
 8004552:	009b      	lsls	r3, r3, #2
 8004554:	4413      	add	r3, r2
 8004556:	009a      	lsls	r2, r3, #2
 8004558:	441a      	add	r2, r3
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	685b      	ldr	r3, [r3, #4]
 800455e:	009b      	lsls	r3, r3, #2
 8004560:	fbb2 f5f3 	udiv	r5, r2, r3
 8004564:	f7fd ffce 	bl	8002504 <HAL_RCC_GetPCLK1Freq>
 8004568:	4602      	mov	r2, r0
 800456a:	4613      	mov	r3, r2
 800456c:	009b      	lsls	r3, r3, #2
 800456e:	4413      	add	r3, r2
 8004570:	009a      	lsls	r2, r3, #2
 8004572:	441a      	add	r2, r3
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	685b      	ldr	r3, [r3, #4]
 8004578:	009b      	lsls	r3, r3, #2
 800457a:	fbb2 f3f3 	udiv	r3, r2, r3
 800457e:	4a0c      	ldr	r2, [pc, #48]	; (80045b0 <UART_SetConfig+0x410>)
 8004580:	fba2 2303 	umull	r2, r3, r2, r3
 8004584:	095b      	lsrs	r3, r3, #5
 8004586:	2264      	movs	r2, #100	; 0x64
 8004588:	fb02 f303 	mul.w	r3, r2, r3
 800458c:	1aeb      	subs	r3, r5, r3
 800458e:	011b      	lsls	r3, r3, #4
 8004590:	3332      	adds	r3, #50	; 0x32
 8004592:	4a07      	ldr	r2, [pc, #28]	; (80045b0 <UART_SetConfig+0x410>)
 8004594:	fba2 2303 	umull	r2, r3, r2, r3
 8004598:	095b      	lsrs	r3, r3, #5
 800459a:	f003 020f 	and.w	r2, r3, #15
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	4422      	add	r2, r4
 80045a4:	609a      	str	r2, [r3, #8]
}
 80045a6:	e7ff      	b.n	80045a8 <UART_SetConfig+0x408>
 80045a8:	bf00      	nop
 80045aa:	3710      	adds	r7, #16
 80045ac:	46bd      	mov	sp, r7
 80045ae:	bdb0      	pop	{r4, r5, r7, pc}
 80045b0:	51eb851f 	.word	0x51eb851f

080045b4 <drive_start>:
//drive_start
//a走行開始前に走行距離と機体角度を初期化
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void drive_start(void){
 80045b4:	b480      	push	{r7}
 80045b6:	af00      	add	r7, sp, #0
	dist_l = dist_r = 0;		//a走行距離の初期化
 80045b8:	f04f 0300 	mov.w	r3, #0
 80045bc:	4a08      	ldr	r2, [pc, #32]	; (80045e0 <drive_start+0x2c>)
 80045be:	6013      	str	r3, [r2, #0]
 80045c0:	4a08      	ldr	r2, [pc, #32]	; (80045e4 <drive_start+0x30>)
 80045c2:	6013      	str	r3, [r2, #0]
	degree_z = 0;				//a機体角度の初期化
 80045c4:	4b08      	ldr	r3, [pc, #32]	; (80045e8 <drive_start+0x34>)
 80045c6:	f04f 0200 	mov.w	r2, #0
 80045ca:	601a      	str	r2, [r3, #0]
	MF.FLAG.DRV = 1;
 80045cc:	4a07      	ldr	r2, [pc, #28]	; (80045ec <drive_start+0x38>)
 80045ce:	8813      	ldrh	r3, [r2, #0]
 80045d0:	f043 0302 	orr.w	r3, r3, #2
 80045d4:	8013      	strh	r3, [r2, #0]
}
 80045d6:	bf00      	nop
 80045d8:	46bd      	mov	sp, r7
 80045da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045de:	4770      	bx	lr
 80045e0:	20000994 	.word	0x20000994
 80045e4:	20000e10 	.word	0x20000e10
 80045e8:	200009fc 	.word	0x200009fc
 80045ec:	20000dfc 	.word	0x20000dfc

080045f0 <drive_stop>:
//a走行を終了する
//a（タイマを止めてタイマカウント値を0にリセットする）
//a引数1：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void drive_stop(void){
 80045f0:	b480      	push	{r7}
 80045f2:	af00      	add	r7, sp, #0
	dist_l = dist_r = 0;		//a走行距離の初期化
 80045f4:	f04f 0300 	mov.w	r3, #0
 80045f8:	4a08      	ldr	r2, [pc, #32]	; (800461c <drive_stop+0x2c>)
 80045fa:	6013      	str	r3, [r2, #0]
 80045fc:	4a08      	ldr	r2, [pc, #32]	; (8004620 <drive_stop+0x30>)
 80045fe:	6013      	str	r3, [r2, #0]
	degree_z = 0;				//a機体角度の初期化
 8004600:	4b08      	ldr	r3, [pc, #32]	; (8004624 <drive_stop+0x34>)
 8004602:	f04f 0200 	mov.w	r2, #0
 8004606:	601a      	str	r2, [r3, #0]
	MF.FLAG.DRV = 0;
 8004608:	4a07      	ldr	r2, [pc, #28]	; (8004628 <drive_stop+0x38>)
 800460a:	8813      	ldrh	r3, [r2, #0]
 800460c:	f36f 0341 	bfc	r3, #1, #1
 8004610:	8013      	strh	r3, [r2, #0]
}
 8004612:	bf00      	nop
 8004614:	46bd      	mov	sp, r7
 8004616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461a:	4770      	bx	lr
 800461c:	20000994 	.word	0x20000994
 8004620:	20000e10 	.word	0x20000e10
 8004624:	200009fc 	.word	0x200009fc
 8004628:	20000dfc 	.word	0x20000dfc

0800462c <drive_dir>:
//drive_dir
// wheel turn dir for each wheel
//a引数:1車輪選択(0=>L, 1=>R), 2回転方向選択(0=>CW, 1=>CWW, 2=>ShortBrake, 3=>free)
//a戻り値: nothing
//+++++++++++++++++++++++++++++++++++++++++++++++
void drive_dir(uint8_t wheel, uint8_t dir){
 800462c:	b580      	push	{r7, lr}
 800462e:	b082      	sub	sp, #8
 8004630:	af00      	add	r7, sp, #0
 8004632:	4603      	mov	r3, r0
 8004634:	460a      	mov	r2, r1
 8004636:	71fb      	strb	r3, [r7, #7]
 8004638:	4613      	mov	r3, r2
 800463a:	71bb      	strb	r3, [r7, #6]
	if(wheel == 0){
 800463c:	79fb      	ldrb	r3, [r7, #7]
 800463e:	2b00      	cmp	r3, #0
 8004640:	d13e      	bne.n	80046c0 <drive_dir+0x94>
		if(dir == 0){
 8004642:	79bb      	ldrb	r3, [r7, #6]
 8004644:	2b00      	cmp	r3, #0
 8004646:	d10f      	bne.n	8004668 <drive_dir+0x3c>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_SET);		//L_CW
 8004648:	2201      	movs	r2, #1
 800464a:	2120      	movs	r1, #32
 800464c:	483f      	ldr	r0, [pc, #252]	; (800474c <drive_dir+0x120>)
 800464e:	f7fd fb5d 	bl	8001d0c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET);	//L_CCW
 8004652:	2200      	movs	r2, #0
 8004654:	2110      	movs	r1, #16
 8004656:	483d      	ldr	r0, [pc, #244]	; (800474c <drive_dir+0x120>)
 8004658:	f7fd fb58 	bl	8001d0c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);		//STBY
 800465c:	2201      	movs	r2, #1
 800465e:	2101      	movs	r1, #1
 8004660:	483b      	ldr	r0, [pc, #236]	; (8004750 <drive_dir+0x124>)
 8004662:	f7fd fb53 	bl	8001d0c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);		//STBY
		}else{
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);	//STBY
		}
	}
}
 8004666:	e06c      	b.n	8004742 <drive_dir+0x116>
		}else if(dir == 1){
 8004668:	79bb      	ldrb	r3, [r7, #6]
 800466a:	2b01      	cmp	r3, #1
 800466c:	d10f      	bne.n	800468e <drive_dir+0x62>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET);	//L_CW
 800466e:	2200      	movs	r2, #0
 8004670:	2120      	movs	r1, #32
 8004672:	4836      	ldr	r0, [pc, #216]	; (800474c <drive_dir+0x120>)
 8004674:	f7fd fb4a 	bl	8001d0c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_SET);		//L_CCW
 8004678:	2201      	movs	r2, #1
 800467a:	2110      	movs	r1, #16
 800467c:	4833      	ldr	r0, [pc, #204]	; (800474c <drive_dir+0x120>)
 800467e:	f7fd fb45 	bl	8001d0c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);		//STBY
 8004682:	2201      	movs	r2, #1
 8004684:	2101      	movs	r1, #1
 8004686:	4832      	ldr	r0, [pc, #200]	; (8004750 <drive_dir+0x124>)
 8004688:	f7fd fb40 	bl	8001d0c <HAL_GPIO_WritePin>
}
 800468c:	e059      	b.n	8004742 <drive_dir+0x116>
		}else if(dir == 2){
 800468e:	79bb      	ldrb	r3, [r7, #6]
 8004690:	2b02      	cmp	r3, #2
 8004692:	d10f      	bne.n	80046b4 <drive_dir+0x88>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_SET);		//L_CW
 8004694:	2201      	movs	r2, #1
 8004696:	2120      	movs	r1, #32
 8004698:	482c      	ldr	r0, [pc, #176]	; (800474c <drive_dir+0x120>)
 800469a:	f7fd fb37 	bl	8001d0c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_SET);		//L_CCW
 800469e:	2201      	movs	r2, #1
 80046a0:	2110      	movs	r1, #16
 80046a2:	482a      	ldr	r0, [pc, #168]	; (800474c <drive_dir+0x120>)
 80046a4:	f7fd fb32 	bl	8001d0c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);		//STBY
 80046a8:	2201      	movs	r2, #1
 80046aa:	2101      	movs	r1, #1
 80046ac:	4828      	ldr	r0, [pc, #160]	; (8004750 <drive_dir+0x124>)
 80046ae:	f7fd fb2d 	bl	8001d0c <HAL_GPIO_WritePin>
}
 80046b2:	e046      	b.n	8004742 <drive_dir+0x116>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);	//STBY
 80046b4:	2200      	movs	r2, #0
 80046b6:	2101      	movs	r1, #1
 80046b8:	4825      	ldr	r0, [pc, #148]	; (8004750 <drive_dir+0x124>)
 80046ba:	f7fd fb27 	bl	8001d0c <HAL_GPIO_WritePin>
}
 80046be:	e040      	b.n	8004742 <drive_dir+0x116>
		if(dir == 0){
 80046c0:	79bb      	ldrb	r3, [r7, #6]
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d110      	bne.n	80046e8 <drive_dir+0xbc>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);		//R_CW
 80046c6:	2201      	movs	r2, #1
 80046c8:	2102      	movs	r1, #2
 80046ca:	4821      	ldr	r0, [pc, #132]	; (8004750 <drive_dir+0x124>)
 80046cc:	f7fd fb1e 	bl	8001d0c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);	//R_CCW
 80046d0:	2200      	movs	r2, #0
 80046d2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80046d6:	481e      	ldr	r0, [pc, #120]	; (8004750 <drive_dir+0x124>)
 80046d8:	f7fd fb18 	bl	8001d0c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);		//STBY
 80046dc:	2201      	movs	r2, #1
 80046de:	2101      	movs	r1, #1
 80046e0:	481b      	ldr	r0, [pc, #108]	; (8004750 <drive_dir+0x124>)
 80046e2:	f7fd fb13 	bl	8001d0c <HAL_GPIO_WritePin>
}
 80046e6:	e02c      	b.n	8004742 <drive_dir+0x116>
		}else if(dir == 1){
 80046e8:	79bb      	ldrb	r3, [r7, #6]
 80046ea:	2b01      	cmp	r3, #1
 80046ec:	d110      	bne.n	8004710 <drive_dir+0xe4>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);	//R_CW
 80046ee:	2200      	movs	r2, #0
 80046f0:	2102      	movs	r1, #2
 80046f2:	4817      	ldr	r0, [pc, #92]	; (8004750 <drive_dir+0x124>)
 80046f4:	f7fd fb0a 	bl	8001d0c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);	//R_CCW
 80046f8:	2201      	movs	r2, #1
 80046fa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80046fe:	4814      	ldr	r0, [pc, #80]	; (8004750 <drive_dir+0x124>)
 8004700:	f7fd fb04 	bl	8001d0c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);		//STBY
 8004704:	2201      	movs	r2, #1
 8004706:	2101      	movs	r1, #1
 8004708:	4811      	ldr	r0, [pc, #68]	; (8004750 <drive_dir+0x124>)
 800470a:	f7fd faff 	bl	8001d0c <HAL_GPIO_WritePin>
}
 800470e:	e018      	b.n	8004742 <drive_dir+0x116>
		}else if(dir == 2){
 8004710:	79bb      	ldrb	r3, [r7, #6]
 8004712:	2b02      	cmp	r3, #2
 8004714:	d110      	bne.n	8004738 <drive_dir+0x10c>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);		//R_CW
 8004716:	2201      	movs	r2, #1
 8004718:	2102      	movs	r1, #2
 800471a:	480d      	ldr	r0, [pc, #52]	; (8004750 <drive_dir+0x124>)
 800471c:	f7fd faf6 	bl	8001d0c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);	//R_CCW
 8004720:	2201      	movs	r2, #1
 8004722:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004726:	480a      	ldr	r0, [pc, #40]	; (8004750 <drive_dir+0x124>)
 8004728:	f7fd faf0 	bl	8001d0c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);		//STBY
 800472c:	2201      	movs	r2, #1
 800472e:	2101      	movs	r1, #1
 8004730:	4807      	ldr	r0, [pc, #28]	; (8004750 <drive_dir+0x124>)
 8004732:	f7fd faeb 	bl	8001d0c <HAL_GPIO_WritePin>
}
 8004736:	e004      	b.n	8004742 <drive_dir+0x116>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);	//STBY
 8004738:	2200      	movs	r2, #0
 800473a:	2101      	movs	r1, #1
 800473c:	4804      	ldr	r0, [pc, #16]	; (8004750 <drive_dir+0x124>)
 800473e:	f7fd fae5 	bl	8001d0c <HAL_GPIO_WritePin>
}
 8004742:	bf00      	nop
 8004744:	3708      	adds	r7, #8
 8004746:	46bd      	mov	sp, r7
 8004748:	bd80      	pop	{r7, pc}
 800474a:	bf00      	nop
 800474c:	40020800 	.word	0x40020800
 8004750:	40020400 	.word	0x40020400

08004754 <driveA>:
//driveA
// a指定距離、指定加速度で加速走行する
// a引数1：accel_p 加速度, 引数2：speed_min_p 最低速度, 引数3：speed_max_p 最高速度, 引数4：dist 走行距離
// a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void driveA(uint16_t accel_p, uint16_t speed_min_p, uint16_t speed_max_p, uint16_t dist){
 8004754:	b590      	push	{r4, r7, lr}
 8004756:	b083      	sub	sp, #12
 8004758:	af00      	add	r7, sp, #0
 800475a:	4604      	mov	r4, r0
 800475c:	4608      	mov	r0, r1
 800475e:	4611      	mov	r1, r2
 8004760:	461a      	mov	r2, r3
 8004762:	4623      	mov	r3, r4
 8004764:	80fb      	strh	r3, [r7, #6]
 8004766:	4603      	mov	r3, r0
 8004768:	80bb      	strh	r3, [r7, #4]
 800476a:	460b      	mov	r3, r1
 800476c:	807b      	strh	r3, [r7, #2]
 800476e:	4613      	mov	r3, r2
 8004770:	803b      	strh	r3, [r7, #0]

	speed_min_l = speed_min_r = speed_min_p;
 8004772:	88bb      	ldrh	r3, [r7, #4]
 8004774:	ee07 3a90 	vmov	s15, r3
 8004778:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800477c:	4b20      	ldr	r3, [pc, #128]	; (8004800 <driveA+0xac>)
 800477e:	edc3 7a00 	vstr	s15, [r3]
 8004782:	4b20      	ldr	r3, [pc, #128]	; (8004804 <driveA+0xb0>)
 8004784:	edc3 7a00 	vstr	s15, [r3]
	speed_max_l = speed_max_r = speed_max_p;
 8004788:	887b      	ldrh	r3, [r7, #2]
 800478a:	ee07 3a90 	vmov	s15, r3
 800478e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004792:	4b1d      	ldr	r3, [pc, #116]	; (8004808 <driveA+0xb4>)
 8004794:	edc3 7a00 	vstr	s15, [r3]
 8004798:	4b1c      	ldr	r3, [pc, #112]	; (800480c <driveA+0xb8>)
 800479a:	edc3 7a00 	vstr	s15, [r3]
	accel_l = accel_r = accel_p;										//引数の各パラメータをグローバル変数化
 800479e:	88fb      	ldrh	r3, [r7, #6]
 80047a0:	ee07 3a90 	vmov	s15, r3
 80047a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047a8:	4b19      	ldr	r3, [pc, #100]	; (8004810 <driveA+0xbc>)
 80047aa:	edc3 7a00 	vstr	s15, [r3]
 80047ae:	4b19      	ldr	r3, [pc, #100]	; (8004814 <driveA+0xc0>)
 80047b0:	edc3 7a00 	vstr	s15, [r3]

	//if(MF.FLAG.STRT == 0) speed_l = speed_r = 100;						//最初の加速の際だけspeedを定義
	drive_start();											//走行開始
 80047b4:	f7ff fefe 	bl	80045b4 <drive_start>

	//----a走行----
	while((dist_l < dist) || (dist_r < dist));			//左右のモータが指定パルス以上進むまで待機
 80047b8:	bf00      	nop
 80047ba:	883b      	ldrh	r3, [r7, #0]
 80047bc:	ee07 3a90 	vmov	s15, r3
 80047c0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80047c4:	4b14      	ldr	r3, [pc, #80]	; (8004818 <driveA+0xc4>)
 80047c6:	edd3 7a00 	vldr	s15, [r3]
 80047ca:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80047ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80047d2:	dcf2      	bgt.n	80047ba <driveA+0x66>
 80047d4:	883b      	ldrh	r3, [r7, #0]
 80047d6:	ee07 3a90 	vmov	s15, r3
 80047da:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80047de:	4b0f      	ldr	r3, [pc, #60]	; (800481c <driveA+0xc8>)
 80047e0:	edd3 7a00 	vldr	s15, [r3]
 80047e4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80047e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80047ec:	dce5      	bgt.n	80047ba <driveA+0x66>

	drive_stop();											//a走行停止
 80047ee:	f7ff feff 	bl	80045f0 <drive_stop>
	//MF.FLAG.STRT = 1;										//2回目以降の加速の際はspeedは既存のスピードを用いる
	get_wall_info();										//壁情報を取得，片壁制御の有効・無効の判断
 80047f2:	f002 fdc1 	bl	8007378 <get_wall_info>
}
 80047f6:	bf00      	nop
 80047f8:	370c      	adds	r7, #12
 80047fa:	46bd      	mov	sp, r7
 80047fc:	bd90      	pop	{r4, r7, pc}
 80047fe:	bf00      	nop
 8004800:	20000e00 	.word	0x20000e00
 8004804:	200009f4 	.word	0x200009f4
 8004808:	2000015c 	.word	0x2000015c
 800480c:	20000624 	.word	0x20000624
 8004810:	2000098c 	.word	0x2000098c
 8004814:	20000bf0 	.word	0x20000bf0
 8004818:	20000e10 	.word	0x20000e10
 800481c:	20000994 	.word	0x20000994

08004820 <driveD>:
//driveD
//a指定距離、指定減速度で減速走行する
//a引数1：accel_p 加速度, 引数2：speed_min_p 最低速度, 引数3：speed_max_p 最高速度, 引数4：dist 走行距離
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void driveD(int16_t accel_p, uint16_t speed_min_p, uint16_t speed_max_p, uint16_t dist){
 8004820:	b590      	push	{r4, r7, lr}
 8004822:	b085      	sub	sp, #20
 8004824:	af00      	add	r7, sp, #0
 8004826:	4604      	mov	r4, r0
 8004828:	4608      	mov	r0, r1
 800482a:	4611      	mov	r1, r2
 800482c:	461a      	mov	r2, r3
 800482e:	4623      	mov	r3, r4
 8004830:	80fb      	strh	r3, [r7, #6]
 8004832:	4603      	mov	r3, r0
 8004834:	80bb      	strh	r3, [r7, #4]
 8004836:	460b      	mov	r3, r1
 8004838:	807b      	strh	r3, [r7, #2]
 800483a:	4613      	mov	r3, r2
 800483c:	803b      	strh	r3, [r7, #0]

	float speed_0 = speed_l;								//直線パルス数を計算するためにTIM15より参照
 800483e:	4b4f      	ldr	r3, [pc, #316]	; (800497c <driveD+0x15c>)
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	60fb      	str	r3, [r7, #12]
	speed_min_l = speed_min_r = speed_min_p;
 8004844:	88bb      	ldrh	r3, [r7, #4]
 8004846:	ee07 3a90 	vmov	s15, r3
 800484a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800484e:	4b4c      	ldr	r3, [pc, #304]	; (8004980 <driveD+0x160>)
 8004850:	edc3 7a00 	vstr	s15, [r3]
 8004854:	4b4b      	ldr	r3, [pc, #300]	; (8004984 <driveD+0x164>)
 8004856:	edc3 7a00 	vstr	s15, [r3]
	speed_max_l = speed_max_r = speed_max_p;
 800485a:	887b      	ldrh	r3, [r7, #2]
 800485c:	ee07 3a90 	vmov	s15, r3
 8004860:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004864:	4b48      	ldr	r3, [pc, #288]	; (8004988 <driveD+0x168>)
 8004866:	edc3 7a00 	vstr	s15, [r3]
 800486a:	4b48      	ldr	r3, [pc, #288]	; (800498c <driveD+0x16c>)
 800486c:	edc3 7a00 	vstr	s15, [r3]
	accel_l = accel_r = accel_p;										//引数の各パラメータをグローバル変数化
 8004870:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004874:	ee07 3a90 	vmov	s15, r3
 8004878:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800487c:	4b44      	ldr	r3, [pc, #272]	; (8004990 <driveD+0x170>)
 800487e:	edc3 7a00 	vstr	s15, [r3]
 8004882:	4b44      	ldr	r3, [pc, #272]	; (8004994 <driveD+0x174>)
 8004884:	edc3 7a00 	vstr	s15, [r3]

	drive_start();											//走行開始
 8004888:	f7ff fe94 	bl	80045b4 <drive_start>

	int16_t c_dist = dist - (speed_min_l*speed_min_l  - speed_0*speed_0)/(2*accel_l);			//等速走行距離 = 総距離 - 減速に必要な距離
 800488c:	883b      	ldrh	r3, [r7, #0]
 800488e:	ee07 3a90 	vmov	s15, r3
 8004892:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004896:	4b3b      	ldr	r3, [pc, #236]	; (8004984 <driveD+0x164>)
 8004898:	edd3 6a00 	vldr	s13, [r3]
 800489c:	4b39      	ldr	r3, [pc, #228]	; (8004984 <driveD+0x164>)
 800489e:	edd3 7a00 	vldr	s15, [r3]
 80048a2:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80048a6:	ed97 6a03 	vldr	s12, [r7, #12]
 80048aa:	edd7 7a03 	vldr	s15, [r7, #12]
 80048ae:	ee66 7a27 	vmul.f32	s15, s12, s15
 80048b2:	ee36 6ae7 	vsub.f32	s12, s13, s15
 80048b6:	4b37      	ldr	r3, [pc, #220]	; (8004994 <driveD+0x174>)
 80048b8:	edd3 7a00 	vldr	s15, [r3]
 80048bc:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80048c0:	eec6 7a26 	vdiv.f32	s15, s12, s13
 80048c4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80048c8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80048cc:	ee17 3a90 	vmov	r3, s15
 80048d0:	817b      	strh	r3, [r7, #10]

	accel_l = accel_r = 0;
 80048d2:	f04f 0300 	mov.w	r3, #0
 80048d6:	4a2e      	ldr	r2, [pc, #184]	; (8004990 <driveD+0x170>)
 80048d8:	6013      	str	r3, [r2, #0]
 80048da:	4a2e      	ldr	r2, [pc, #184]	; (8004994 <driveD+0x174>)
 80048dc:	6013      	str	r3, [r2, #0]
	if(c_dist > 0){
 80048de:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	dd1c      	ble.n	8004920 <driveD+0x100>
		//----等速走行----
		while((dist_l < c_dist) || (dist_r < c_dist));	//a左右のモータが等速分の距離以上進むまで待機
 80048e6:	bf00      	nop
 80048e8:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80048ec:	ee07 3a90 	vmov	s15, r3
 80048f0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80048f4:	4b28      	ldr	r3, [pc, #160]	; (8004998 <driveD+0x178>)
 80048f6:	edd3 7a00 	vldr	s15, [r3]
 80048fa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80048fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004902:	dcf1      	bgt.n	80048e8 <driveD+0xc8>
 8004904:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8004908:	ee07 3a90 	vmov	s15, r3
 800490c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004910:	4b22      	ldr	r3, [pc, #136]	; (800499c <driveD+0x17c>)
 8004912:	edd3 7a00 	vldr	s15, [r3]
 8004916:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800491a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800491e:	dce3      	bgt.n	80048e8 <driveD+0xc8>
	}
	accel_l = accel_r = accel_p;
 8004920:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004924:	ee07 3a90 	vmov	s15, r3
 8004928:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800492c:	4b18      	ldr	r3, [pc, #96]	; (8004990 <driveD+0x170>)
 800492e:	edc3 7a00 	vstr	s15, [r3]
 8004932:	4b18      	ldr	r3, [pc, #96]	; (8004994 <driveD+0x174>)
 8004934:	edc3 7a00 	vstr	s15, [r3]
	//dist_l = 0;
	//dist_r = 0;
	//----減速走行----
	while((dist_l < dist) || (dist_r < dist));			//a左右のモータが減速分の距離以上進むまで待機
 8004938:	bf00      	nop
 800493a:	883b      	ldrh	r3, [r7, #0]
 800493c:	ee07 3a90 	vmov	s15, r3
 8004940:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004944:	4b14      	ldr	r3, [pc, #80]	; (8004998 <driveD+0x178>)
 8004946:	edd3 7a00 	vldr	s15, [r3]
 800494a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800494e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004952:	dcf2      	bgt.n	800493a <driveD+0x11a>
 8004954:	883b      	ldrh	r3, [r7, #0]
 8004956:	ee07 3a90 	vmov	s15, r3
 800495a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800495e:	4b0f      	ldr	r3, [pc, #60]	; (800499c <driveD+0x17c>)
 8004960:	edd3 7a00 	vldr	s15, [r3]
 8004964:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004968:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800496c:	dce5      	bgt.n	800493a <driveD+0x11a>

	//MF.FLAG.STRT = 0;
	drive_stop();											//走行停止
 800496e:	f7ff fe3f 	bl	80045f0 <drive_stop>
}
 8004972:	bf00      	nop
 8004974:	3714      	adds	r7, #20
 8004976:	46bd      	mov	sp, r7
 8004978:	bd90      	pop	{r4, r7, pc}
 800497a:	bf00      	nop
 800497c:	20000998 	.word	0x20000998
 8004980:	20000e00 	.word	0x20000e00
 8004984:	200009f4 	.word	0x200009f4
 8004988:	2000015c 	.word	0x2000015c
 800498c:	20000624 	.word	0x20000624
 8004990:	2000098c 	.word	0x2000098c
 8004994:	20000bf0 	.word	0x20000bf0
 8004998:	20000e10 	.word	0x20000e10
 800499c:	20000994 	.word	0x20000994

080049a0 <driveU>:
//driveU
// 指定パルス分等速走行して停止する
// 引数1：dist …… 走行するパルス
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void driveU(uint16_t dist){
 80049a0:	b580      	push	{r7, lr}
 80049a2:	b082      	sub	sp, #8
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	4603      	mov	r3, r0
 80049a8:	80fb      	strh	r3, [r7, #6]

	accel_l = accel_r = 0;												//等速走行のため加速度は0
 80049aa:	f04f 0300 	mov.w	r3, #0
 80049ae:	4a14      	ldr	r2, [pc, #80]	; (8004a00 <driveU+0x60>)
 80049b0:	6013      	str	r3, [r2, #0]
 80049b2:	4a14      	ldr	r2, [pc, #80]	; (8004a04 <driveU+0x64>)
 80049b4:	6013      	str	r3, [r2, #0]
	drive_start();											//走行開始
 80049b6:	f7ff fdfd 	bl	80045b4 <drive_start>

	//----走行----
	while((dist_l < dist) || (dist_r < dist));			//左右のモータが指定パルス以上進むまで待機
 80049ba:	bf00      	nop
 80049bc:	88fb      	ldrh	r3, [r7, #6]
 80049be:	ee07 3a90 	vmov	s15, r3
 80049c2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80049c6:	4b10      	ldr	r3, [pc, #64]	; (8004a08 <driveU+0x68>)
 80049c8:	edd3 7a00 	vldr	s15, [r3]
 80049cc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80049d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80049d4:	dcf2      	bgt.n	80049bc <driveU+0x1c>
 80049d6:	88fb      	ldrh	r3, [r7, #6]
 80049d8:	ee07 3a90 	vmov	s15, r3
 80049dc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80049e0:	4b0a      	ldr	r3, [pc, #40]	; (8004a0c <driveU+0x6c>)
 80049e2:	edd3 7a00 	vldr	s15, [r3]
 80049e6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80049ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80049ee:	dce5      	bgt.n	80049bc <driveU+0x1c>

	drive_stop();											//走行停止
 80049f0:	f7ff fdfe 	bl	80045f0 <drive_stop>
	get_wall_info();										//壁情報を取得，片壁制御の有効・無効の判断
 80049f4:	f002 fcc0 	bl	8007378 <get_wall_info>
}
 80049f8:	bf00      	nop
 80049fa:	3708      	adds	r7, #8
 80049fc:	46bd      	mov	sp, r7
 80049fe:	bd80      	pop	{r7, pc}
 8004a00:	2000098c 	.word	0x2000098c
 8004a04:	20000bf0 	.word	0x20000bf0
 8004a08:	20000e10 	.word	0x20000e10
 8004a0c:	20000994 	.word	0x20000994

08004a10 <driveC>:
//driveC
// 指定パルス分デフォルト速度で走行して停止する
// 引数1：dist …… 走行するパルス
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void driveC(uint16_t dist){
 8004a10:	b580      	push	{r7, lr}
 8004a12:	b082      	sub	sp, #8
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	4603      	mov	r3, r0
 8004a18:	80fb      	strh	r3, [r7, #6]

	speed_min_l = speed_min_r = 150;
 8004a1a:	4b19      	ldr	r3, [pc, #100]	; (8004a80 <driveC+0x70>)
 8004a1c:	4a19      	ldr	r2, [pc, #100]	; (8004a84 <driveC+0x74>)
 8004a1e:	6013      	str	r3, [r2, #0]
 8004a20:	4a19      	ldr	r2, [pc, #100]	; (8004a88 <driveC+0x78>)
 8004a22:	6013      	str	r3, [r2, #0]
	speed_max_l = speed_max_r = 300;
 8004a24:	4b19      	ldr	r3, [pc, #100]	; (8004a8c <driveC+0x7c>)
 8004a26:	4a1a      	ldr	r2, [pc, #104]	; (8004a90 <driveC+0x80>)
 8004a28:	6013      	str	r3, [r2, #0]
 8004a2a:	4a1a      	ldr	r2, [pc, #104]	; (8004a94 <driveC+0x84>)
 8004a2c:	6013      	str	r3, [r2, #0]
	accel_l = accel_r = 0;												//等速走行のため加速度は0
 8004a2e:	f04f 0300 	mov.w	r3, #0
 8004a32:	4a19      	ldr	r2, [pc, #100]	; (8004a98 <driveC+0x88>)
 8004a34:	6013      	str	r3, [r2, #0]
 8004a36:	4a19      	ldr	r2, [pc, #100]	; (8004a9c <driveC+0x8c>)
 8004a38:	6013      	str	r3, [r2, #0]

	drive_start();											//走行開始
 8004a3a:	f7ff fdbb 	bl	80045b4 <drive_start>

	//====回転====
	while((dist_l < dist) || (dist_r < dist));			//左右のモータが定速分のパルス以上進むまで待機
 8004a3e:	bf00      	nop
 8004a40:	88fb      	ldrh	r3, [r7, #6]
 8004a42:	ee07 3a90 	vmov	s15, r3
 8004a46:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004a4a:	4b15      	ldr	r3, [pc, #84]	; (8004aa0 <driveC+0x90>)
 8004a4c:	edd3 7a00 	vldr	s15, [r3]
 8004a50:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004a54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a58:	dcf2      	bgt.n	8004a40 <driveC+0x30>
 8004a5a:	88fb      	ldrh	r3, [r7, #6]
 8004a5c:	ee07 3a90 	vmov	s15, r3
 8004a60:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004a64:	4b0f      	ldr	r3, [pc, #60]	; (8004aa4 <driveC+0x94>)
 8004a66:	edd3 7a00 	vldr	s15, [r3]
 8004a6a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004a6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a72:	dce5      	bgt.n	8004a40 <driveC+0x30>

	drive_stop();											//走行停止
 8004a74:	f7ff fdbc 	bl	80045f0 <drive_stop>
}
 8004a78:	bf00      	nop
 8004a7a:	3708      	adds	r7, #8
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	bd80      	pop	{r7, pc}
 8004a80:	43160000 	.word	0x43160000
 8004a84:	20000e00 	.word	0x20000e00
 8004a88:	200009f4 	.word	0x200009f4
 8004a8c:	43960000 	.word	0x43960000
 8004a90:	2000015c 	.word	0x2000015c
 8004a94:	20000624 	.word	0x20000624
 8004a98:	2000098c 	.word	0x2000098c
 8004a9c:	20000bf0 	.word	0x20000bf0
 8004aa0:	20000e10 	.word	0x20000e10
 8004aa4:	20000994 	.word	0x20000994

08004aa8 <half_sectionA>:
//half_sectionA
// a半区画分加速しながら走行する
// a引数：なし
// a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void half_sectionA(void){
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	af00      	add	r7, sp, #0

	MF.FLAG.WCTRL = 1;										//wall制御を有効にする
 8004aac:	4a0c      	ldr	r2, [pc, #48]	; (8004ae0 <half_sectionA+0x38>)
 8004aae:	8813      	ldrh	r3, [r2, #0]
 8004ab0:	f043 0304 	orr.w	r3, r3, #4
 8004ab4:	8013      	strh	r3, [r2, #0]
	MF.FLAG.GCTRL = 1;										//gyro制御を有効にする
 8004ab6:	4a0a      	ldr	r2, [pc, #40]	; (8004ae0 <half_sectionA+0x38>)
 8004ab8:	8813      	ldrh	r3, [r2, #0]
 8004aba:	f043 0308 	orr.w	r3, r3, #8
 8004abe:	8013      	strh	r3, [r2, #0]

	target_omega_z = 0;
 8004ac0:	4b08      	ldr	r3, [pc, #32]	; (8004ae4 <half_sectionA+0x3c>)
 8004ac2:	f04f 0200 	mov.w	r2, #0
 8004ac6:	601a      	str	r2, [r3, #0]
	driveA(1000, 10, 400, SEC_HALF);					//半区画のパルス分加速しながら走行。走行後は停止しない
 8004ac8:	235a      	movs	r3, #90	; 0x5a
 8004aca:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8004ace:	210a      	movs	r1, #10
 8004ad0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004ad4:	f7ff fe3e 	bl	8004754 <driveA>
	get_wall_info();										//壁情報を取得，片壁制御の有効・無効の判断
 8004ad8:	f002 fc4e 	bl	8007378 <get_wall_info>
}
 8004adc:	bf00      	nop
 8004ade:	bd80      	pop	{r7, pc}
 8004ae0:	20000dfc 	.word	0x20000dfc
 8004ae4:	20000160 	.word	0x20000160

08004ae8 <half_sectionD>:
//half_sectionD
// 半区画分減速しながら走行し停止する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void half_sectionD(void){
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	af00      	add	r7, sp, #0

	MF.FLAG.WCTRL = 1;										//wall制御を有効にする
 8004aec:	4a0b      	ldr	r2, [pc, #44]	; (8004b1c <half_sectionD+0x34>)
 8004aee:	8813      	ldrh	r3, [r2, #0]
 8004af0:	f043 0304 	orr.w	r3, r3, #4
 8004af4:	8013      	strh	r3, [r2, #0]
	MF.FLAG.GCTRL = 1;										//gyro制御を有効にする
 8004af6:	4a09      	ldr	r2, [pc, #36]	; (8004b1c <half_sectionD+0x34>)
 8004af8:	8813      	ldrh	r3, [r2, #0]
 8004afa:	f043 0308 	orr.w	r3, r3, #8
 8004afe:	8013      	strh	r3, [r2, #0]

	target_omega_z = 0;
 8004b00:	4b07      	ldr	r3, [pc, #28]	; (8004b20 <half_sectionD+0x38>)
 8004b02:	f04f 0200 	mov.w	r2, #0
 8004b06:	601a      	str	r2, [r3, #0]
	driveD(-1000, 10, 400, SEC_HALF);				//指定パルス分指定減速度で減速走行。走行後は停止する
 8004b08:	235a      	movs	r3, #90	; 0x5a
 8004b0a:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8004b0e:	210a      	movs	r1, #10
 8004b10:	4804      	ldr	r0, [pc, #16]	; (8004b24 <half_sectionD+0x3c>)
 8004b12:	f7ff fe85 	bl	8004820 <driveD>
}
 8004b16:	bf00      	nop
 8004b18:	bd80      	pop	{r7, pc}
 8004b1a:	bf00      	nop
 8004b1c:	20000dfc 	.word	0x20000dfc
 8004b20:	20000160 	.word	0x20000160
 8004b24:	fffffc18 	.word	0xfffffc18

08004b28 <one_sectionU>:
//one_sectionU
//a等速で1区画分進む
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void one_sectionU(void){
 8004b28:	b580      	push	{r7, lr}
 8004b2a:	af00      	add	r7, sp, #0

	MF.FLAG.WCTRL = 1;										//wall制御を有効にする
 8004b2c:	4a08      	ldr	r2, [pc, #32]	; (8004b50 <one_sectionU+0x28>)
 8004b2e:	8813      	ldrh	r3, [r2, #0]
 8004b30:	f043 0304 	orr.w	r3, r3, #4
 8004b34:	8013      	strh	r3, [r2, #0]
	MF.FLAG.GCTRL = 1;										//gyro制御を有効にする
 8004b36:	4a06      	ldr	r2, [pc, #24]	; (8004b50 <one_sectionU+0x28>)
 8004b38:	8813      	ldrh	r3, [r2, #0]
 8004b3a:	f043 0308 	orr.w	r3, r3, #8
 8004b3e:	8013      	strh	r3, [r2, #0]

	driveU(SEC_HALF*2);										//半区画のパルス分等速走行。走行後は停止しない
 8004b40:	20b4      	movs	r0, #180	; 0xb4
 8004b42:	f7ff ff2d 	bl	80049a0 <driveU>
	get_wall_info();										//壁情報を取得
 8004b46:	f002 fc17 	bl	8007378 <get_wall_info>
}
 8004b4a:	bf00      	nop
 8004b4c:	bd80      	pop	{r7, pc}
 8004b4e:	bf00      	nop
 8004b50:	20000dfc 	.word	0x20000dfc
 8004b54:	00000000 	.word	0x00000000

08004b58 <rotate_R90>:
//rotate_R90
//a右に90度回転する
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void rotate_R90(void){
 8004b58:	b598      	push	{r3, r4, r7, lr}
 8004b5a:	af00      	add	r7, sp, #0
	target_omega_z = 800;
 8004b5c:	4b4a      	ldr	r3, [pc, #296]	; (8004c88 <rotate_R90+0x130>)
 8004b5e:	4a4b      	ldr	r2, [pc, #300]	; (8004c8c <rotate_R90+0x134>)
 8004b60:	601a      	str	r2, [r3, #0]
	accel_l = 3000;
 8004b62:	4b4b      	ldr	r3, [pc, #300]	; (8004c90 <rotate_R90+0x138>)
 8004b64:	4a4b      	ldr	r2, [pc, #300]	; (8004c94 <rotate_R90+0x13c>)
 8004b66:	601a      	str	r2, [r3, #0]
	accel_r = -3000;
 8004b68:	4b4b      	ldr	r3, [pc, #300]	; (8004c98 <rotate_R90+0x140>)
 8004b6a:	4a4c      	ldr	r2, [pc, #304]	; (8004c9c <rotate_R90+0x144>)
 8004b6c:	601a      	str	r2, [r3, #0]
	speed_max_l = target_omega_z/180*M_PI * TREAD/2;
 8004b6e:	4b46      	ldr	r3, [pc, #280]	; (8004c88 <rotate_R90+0x130>)
 8004b70:	edd3 7a00 	vldr	s15, [r3]
 8004b74:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 8004ca0 <rotate_R90+0x148>
 8004b78:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8004b7c:	ee16 0a90 	vmov	r0, s13
 8004b80:	f7fb fcda 	bl	8000538 <__aeabi_f2d>
 8004b84:	a33e      	add	r3, pc, #248	; (adr r3, 8004c80 <rotate_R90+0x128>)
 8004b86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b8a:	f7fb fd2d 	bl	80005e8 <__aeabi_dmul>
 8004b8e:	4603      	mov	r3, r0
 8004b90:	460c      	mov	r4, r1
 8004b92:	4618      	mov	r0, r3
 8004b94:	4621      	mov	r1, r4
 8004b96:	f04f 0200 	mov.w	r2, #0
 8004b9a:	4b42      	ldr	r3, [pc, #264]	; (8004ca4 <rotate_R90+0x14c>)
 8004b9c:	f7fb fd24 	bl	80005e8 <__aeabi_dmul>
 8004ba0:	4603      	mov	r3, r0
 8004ba2:	460c      	mov	r4, r1
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	4621      	mov	r1, r4
 8004ba8:	f04f 0200 	mov.w	r2, #0
 8004bac:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004bb0:	f7fb fe44 	bl	800083c <__aeabi_ddiv>
 8004bb4:	4603      	mov	r3, r0
 8004bb6:	460c      	mov	r4, r1
 8004bb8:	4618      	mov	r0, r3
 8004bba:	4621      	mov	r1, r4
 8004bbc:	f7fb ffc4 	bl	8000b48 <__aeabi_d2f>
 8004bc0:	4602      	mov	r2, r0
 8004bc2:	4b39      	ldr	r3, [pc, #228]	; (8004ca8 <rotate_R90+0x150>)
 8004bc4:	601a      	str	r2, [r3, #0]
	speed_min_r = -1*target_omega_z/180*M_PI * TREAD/2;
 8004bc6:	4b30      	ldr	r3, [pc, #192]	; (8004c88 <rotate_R90+0x130>)
 8004bc8:	edd3 7a00 	vldr	s15, [r3]
 8004bcc:	eef1 7a67 	vneg.f32	s15, s15
 8004bd0:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8004ca0 <rotate_R90+0x148>
 8004bd4:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8004bd8:	ee16 0a90 	vmov	r0, s13
 8004bdc:	f7fb fcac 	bl	8000538 <__aeabi_f2d>
 8004be0:	a327      	add	r3, pc, #156	; (adr r3, 8004c80 <rotate_R90+0x128>)
 8004be2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004be6:	f7fb fcff 	bl	80005e8 <__aeabi_dmul>
 8004bea:	4603      	mov	r3, r0
 8004bec:	460c      	mov	r4, r1
 8004bee:	4618      	mov	r0, r3
 8004bf0:	4621      	mov	r1, r4
 8004bf2:	f04f 0200 	mov.w	r2, #0
 8004bf6:	4b2b      	ldr	r3, [pc, #172]	; (8004ca4 <rotate_R90+0x14c>)
 8004bf8:	f7fb fcf6 	bl	80005e8 <__aeabi_dmul>
 8004bfc:	4603      	mov	r3, r0
 8004bfe:	460c      	mov	r4, r1
 8004c00:	4618      	mov	r0, r3
 8004c02:	4621      	mov	r1, r4
 8004c04:	f04f 0200 	mov.w	r2, #0
 8004c08:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004c0c:	f7fb fe16 	bl	800083c <__aeabi_ddiv>
 8004c10:	4603      	mov	r3, r0
 8004c12:	460c      	mov	r4, r1
 8004c14:	4618      	mov	r0, r3
 8004c16:	4621      	mov	r1, r4
 8004c18:	f7fb ff96 	bl	8000b48 <__aeabi_d2f>
 8004c1c:	4602      	mov	r2, r0
 8004c1e:	4b23      	ldr	r3, [pc, #140]	; (8004cac <rotate_R90+0x154>)
 8004c20:	601a      	str	r2, [r3, #0]

	drive_start();											//走行開始
 8004c22:	f7ff fcc7 	bl	80045b4 <drive_start>
	while(degree_z > -80);
 8004c26:	bf00      	nop
 8004c28:	4b21      	ldr	r3, [pc, #132]	; (8004cb0 <rotate_R90+0x158>)
 8004c2a:	edd3 7a00 	vldr	s15, [r3]
 8004c2e:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8004cb4 <rotate_R90+0x15c>
 8004c32:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004c36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c3a:	dcf5      	bgt.n	8004c28 <rotate_R90+0xd0>
	drive_stop();
 8004c3c:	f7ff fcd8 	bl	80045f0 <drive_stop>

	accel_l = 3000;
 8004c40:	4b13      	ldr	r3, [pc, #76]	; (8004c90 <rotate_R90+0x138>)
 8004c42:	4a14      	ldr	r2, [pc, #80]	; (8004c94 <rotate_R90+0x13c>)
 8004c44:	601a      	str	r2, [r3, #0]
	accel_r = -3000;
 8004c46:	4b14      	ldr	r3, [pc, #80]	; (8004c98 <rotate_R90+0x140>)
 8004c48:	4a14      	ldr	r2, [pc, #80]	; (8004c9c <rotate_R90+0x144>)
 8004c4a:	601a      	str	r2, [r3, #0]
	speed_max_l = 100;
 8004c4c:	4b16      	ldr	r3, [pc, #88]	; (8004ca8 <rotate_R90+0x150>)
 8004c4e:	4a1a      	ldr	r2, [pc, #104]	; (8004cb8 <rotate_R90+0x160>)
 8004c50:	601a      	str	r2, [r3, #0]
	speed_min_r = -100;
 8004c52:	4b16      	ldr	r3, [pc, #88]	; (8004cac <rotate_R90+0x154>)
 8004c54:	4a19      	ldr	r2, [pc, #100]	; (8004cbc <rotate_R90+0x164>)
 8004c56:	601a      	str	r2, [r3, #0]

	drive_start();											//走行開始
 8004c58:	f7ff fcac 	bl	80045b4 <drive_start>
	while(degree_z > -90+80);
 8004c5c:	bf00      	nop
 8004c5e:	4b14      	ldr	r3, [pc, #80]	; (8004cb0 <rotate_R90+0x158>)
 8004c60:	edd3 7a00 	vldr	s15, [r3]
 8004c64:	eeba 7a04 	vmov.f32	s14, #164	; 0xc1200000 -10.0
 8004c68:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004c6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c70:	dcf5      	bgt.n	8004c5e <rotate_R90+0x106>

	drive_stop();
 8004c72:	f7ff fcbd 	bl	80045f0 <drive_stop>
}
 8004c76:	bf00      	nop
 8004c78:	bd98      	pop	{r3, r4, r7, pc}
 8004c7a:	bf00      	nop
 8004c7c:	f3af 8000 	nop.w
 8004c80:	54442d18 	.word	0x54442d18
 8004c84:	400921fb 	.word	0x400921fb
 8004c88:	20000160 	.word	0x20000160
 8004c8c:	44480000 	.word	0x44480000
 8004c90:	20000bf0 	.word	0x20000bf0
 8004c94:	453b8000 	.word	0x453b8000
 8004c98:	2000098c 	.word	0x2000098c
 8004c9c:	c53b8000 	.word	0xc53b8000
 8004ca0:	43340000 	.word	0x43340000
 8004ca4:	40508000 	.word	0x40508000
 8004ca8:	20000624 	.word	0x20000624
 8004cac:	20000e00 	.word	0x20000e00
 8004cb0:	200009fc 	.word	0x200009fc
 8004cb4:	c2a00000 	.word	0xc2a00000
 8004cb8:	42c80000 	.word	0x42c80000
 8004cbc:	c2c80000 	.word	0xc2c80000

08004cc0 <rotate_L90>:
//rotate_L90
//a左に90度回転する
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void rotate_L90(void){
 8004cc0:	b598      	push	{r3, r4, r7, lr}
 8004cc2:	af00      	add	r7, sp, #0
	target_omega_z = 800;
 8004cc4:	4b4a      	ldr	r3, [pc, #296]	; (8004df0 <rotate_L90+0x130>)
 8004cc6:	4a4b      	ldr	r2, [pc, #300]	; (8004df4 <rotate_L90+0x134>)
 8004cc8:	601a      	str	r2, [r3, #0]
	accel_l = -3000;
 8004cca:	4b4b      	ldr	r3, [pc, #300]	; (8004df8 <rotate_L90+0x138>)
 8004ccc:	4a4b      	ldr	r2, [pc, #300]	; (8004dfc <rotate_L90+0x13c>)
 8004cce:	601a      	str	r2, [r3, #0]
	accel_r = 3000;
 8004cd0:	4b4b      	ldr	r3, [pc, #300]	; (8004e00 <rotate_L90+0x140>)
 8004cd2:	4a4c      	ldr	r2, [pc, #304]	; (8004e04 <rotate_L90+0x144>)
 8004cd4:	601a      	str	r2, [r3, #0]
	speed_min_l = -1*target_omega_z/180*M_PI * TREAD/2;
 8004cd6:	4b46      	ldr	r3, [pc, #280]	; (8004df0 <rotate_L90+0x130>)
 8004cd8:	edd3 7a00 	vldr	s15, [r3]
 8004cdc:	eef1 7a67 	vneg.f32	s15, s15
 8004ce0:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8004e08 <rotate_L90+0x148>
 8004ce4:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8004ce8:	ee16 0a90 	vmov	r0, s13
 8004cec:	f7fb fc24 	bl	8000538 <__aeabi_f2d>
 8004cf0:	a33d      	add	r3, pc, #244	; (adr r3, 8004de8 <rotate_L90+0x128>)
 8004cf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cf6:	f7fb fc77 	bl	80005e8 <__aeabi_dmul>
 8004cfa:	4603      	mov	r3, r0
 8004cfc:	460c      	mov	r4, r1
 8004cfe:	4618      	mov	r0, r3
 8004d00:	4621      	mov	r1, r4
 8004d02:	f04f 0200 	mov.w	r2, #0
 8004d06:	4b41      	ldr	r3, [pc, #260]	; (8004e0c <rotate_L90+0x14c>)
 8004d08:	f7fb fc6e 	bl	80005e8 <__aeabi_dmul>
 8004d0c:	4603      	mov	r3, r0
 8004d0e:	460c      	mov	r4, r1
 8004d10:	4618      	mov	r0, r3
 8004d12:	4621      	mov	r1, r4
 8004d14:	f04f 0200 	mov.w	r2, #0
 8004d18:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004d1c:	f7fb fd8e 	bl	800083c <__aeabi_ddiv>
 8004d20:	4603      	mov	r3, r0
 8004d22:	460c      	mov	r4, r1
 8004d24:	4618      	mov	r0, r3
 8004d26:	4621      	mov	r1, r4
 8004d28:	f7fb ff0e 	bl	8000b48 <__aeabi_d2f>
 8004d2c:	4602      	mov	r2, r0
 8004d2e:	4b38      	ldr	r3, [pc, #224]	; (8004e10 <rotate_L90+0x150>)
 8004d30:	601a      	str	r2, [r3, #0]
	speed_max_r = target_omega_z/180*M_PI * TREAD/2;
 8004d32:	4b2f      	ldr	r3, [pc, #188]	; (8004df0 <rotate_L90+0x130>)
 8004d34:	edd3 7a00 	vldr	s15, [r3]
 8004d38:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8004e08 <rotate_L90+0x148>
 8004d3c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8004d40:	ee16 0a90 	vmov	r0, s13
 8004d44:	f7fb fbf8 	bl	8000538 <__aeabi_f2d>
 8004d48:	a327      	add	r3, pc, #156	; (adr r3, 8004de8 <rotate_L90+0x128>)
 8004d4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d4e:	f7fb fc4b 	bl	80005e8 <__aeabi_dmul>
 8004d52:	4603      	mov	r3, r0
 8004d54:	460c      	mov	r4, r1
 8004d56:	4618      	mov	r0, r3
 8004d58:	4621      	mov	r1, r4
 8004d5a:	f04f 0200 	mov.w	r2, #0
 8004d5e:	4b2b      	ldr	r3, [pc, #172]	; (8004e0c <rotate_L90+0x14c>)
 8004d60:	f7fb fc42 	bl	80005e8 <__aeabi_dmul>
 8004d64:	4603      	mov	r3, r0
 8004d66:	460c      	mov	r4, r1
 8004d68:	4618      	mov	r0, r3
 8004d6a:	4621      	mov	r1, r4
 8004d6c:	f04f 0200 	mov.w	r2, #0
 8004d70:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004d74:	f7fb fd62 	bl	800083c <__aeabi_ddiv>
 8004d78:	4603      	mov	r3, r0
 8004d7a:	460c      	mov	r4, r1
 8004d7c:	4618      	mov	r0, r3
 8004d7e:	4621      	mov	r1, r4
 8004d80:	f7fb fee2 	bl	8000b48 <__aeabi_d2f>
 8004d84:	4602      	mov	r2, r0
 8004d86:	4b23      	ldr	r3, [pc, #140]	; (8004e14 <rotate_L90+0x154>)
 8004d88:	601a      	str	r2, [r3, #0]

	drive_start();											//走行開始
 8004d8a:	f7ff fc13 	bl	80045b4 <drive_start>
	while(degree_z < 80);
 8004d8e:	bf00      	nop
 8004d90:	4b21      	ldr	r3, [pc, #132]	; (8004e18 <rotate_L90+0x158>)
 8004d92:	edd3 7a00 	vldr	s15, [r3]
 8004d96:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8004e1c <rotate_L90+0x15c>
 8004d9a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004d9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004da2:	d4f5      	bmi.n	8004d90 <rotate_L90+0xd0>
	drive_stop();
 8004da4:	f7ff fc24 	bl	80045f0 <drive_stop>

	accel_l = -3000;
 8004da8:	4b13      	ldr	r3, [pc, #76]	; (8004df8 <rotate_L90+0x138>)
 8004daa:	4a14      	ldr	r2, [pc, #80]	; (8004dfc <rotate_L90+0x13c>)
 8004dac:	601a      	str	r2, [r3, #0]
	accel_r = 3000;
 8004dae:	4b14      	ldr	r3, [pc, #80]	; (8004e00 <rotate_L90+0x140>)
 8004db0:	4a14      	ldr	r2, [pc, #80]	; (8004e04 <rotate_L90+0x144>)
 8004db2:	601a      	str	r2, [r3, #0]
	speed_min_l = -100;
 8004db4:	4b16      	ldr	r3, [pc, #88]	; (8004e10 <rotate_L90+0x150>)
 8004db6:	4a1a      	ldr	r2, [pc, #104]	; (8004e20 <rotate_L90+0x160>)
 8004db8:	601a      	str	r2, [r3, #0]
	speed_max_r = 100;
 8004dba:	4b16      	ldr	r3, [pc, #88]	; (8004e14 <rotate_L90+0x154>)
 8004dbc:	4a19      	ldr	r2, [pc, #100]	; (8004e24 <rotate_L90+0x164>)
 8004dbe:	601a      	str	r2, [r3, #0]

	drive_start();											//走行開始
 8004dc0:	f7ff fbf8 	bl	80045b4 <drive_start>
	while(degree_z < 90-80);
 8004dc4:	bf00      	nop
 8004dc6:	4b14      	ldr	r3, [pc, #80]	; (8004e18 <rotate_L90+0x158>)
 8004dc8:	edd3 7a00 	vldr	s15, [r3]
 8004dcc:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004dd0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004dd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004dd8:	d4f5      	bmi.n	8004dc6 <rotate_L90+0x106>

	drive_stop();
 8004dda:	f7ff fc09 	bl	80045f0 <drive_stop>
}
 8004dde:	bf00      	nop
 8004de0:	bd98      	pop	{r3, r4, r7, pc}
 8004de2:	bf00      	nop
 8004de4:	f3af 8000 	nop.w
 8004de8:	54442d18 	.word	0x54442d18
 8004dec:	400921fb 	.word	0x400921fb
 8004df0:	20000160 	.word	0x20000160
 8004df4:	44480000 	.word	0x44480000
 8004df8:	20000bf0 	.word	0x20000bf0
 8004dfc:	c53b8000 	.word	0xc53b8000
 8004e00:	2000098c 	.word	0x2000098c
 8004e04:	453b8000 	.word	0x453b8000
 8004e08:	43340000 	.word	0x43340000
 8004e0c:	40508000 	.word	0x40508000
 8004e10:	200009f4 	.word	0x200009f4
 8004e14:	2000015c 	.word	0x2000015c
 8004e18:	200009fc 	.word	0x200009fc
 8004e1c:	42a00000 	.word	0x42a00000
 8004e20:	c2c80000 	.word	0xc2c80000
 8004e24:	42c80000 	.word	0x42c80000

08004e28 <rotate_180>:
//rotate_180
//a180度回転する
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void rotate_180(void){
 8004e28:	b598      	push	{r3, r4, r7, lr}
 8004e2a:	af00      	add	r7, sp, #0
	target_omega_z = 800;
 8004e2c:	4b4a      	ldr	r3, [pc, #296]	; (8004f58 <rotate_180+0x130>)
 8004e2e:	4a4b      	ldr	r2, [pc, #300]	; (8004f5c <rotate_180+0x134>)
 8004e30:	601a      	str	r2, [r3, #0]
	accel_l = 3000;
 8004e32:	4b4b      	ldr	r3, [pc, #300]	; (8004f60 <rotate_180+0x138>)
 8004e34:	4a4b      	ldr	r2, [pc, #300]	; (8004f64 <rotate_180+0x13c>)
 8004e36:	601a      	str	r2, [r3, #0]
	accel_r = -3000;
 8004e38:	4b4b      	ldr	r3, [pc, #300]	; (8004f68 <rotate_180+0x140>)
 8004e3a:	4a4c      	ldr	r2, [pc, #304]	; (8004f6c <rotate_180+0x144>)
 8004e3c:	601a      	str	r2, [r3, #0]
	speed_max_l = target_omega_z/180*M_PI * TREAD/2;
 8004e3e:	4b46      	ldr	r3, [pc, #280]	; (8004f58 <rotate_180+0x130>)
 8004e40:	edd3 7a00 	vldr	s15, [r3]
 8004e44:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 8004f70 <rotate_180+0x148>
 8004e48:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8004e4c:	ee16 0a90 	vmov	r0, s13
 8004e50:	f7fb fb72 	bl	8000538 <__aeabi_f2d>
 8004e54:	a33e      	add	r3, pc, #248	; (adr r3, 8004f50 <rotate_180+0x128>)
 8004e56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e5a:	f7fb fbc5 	bl	80005e8 <__aeabi_dmul>
 8004e5e:	4603      	mov	r3, r0
 8004e60:	460c      	mov	r4, r1
 8004e62:	4618      	mov	r0, r3
 8004e64:	4621      	mov	r1, r4
 8004e66:	f04f 0200 	mov.w	r2, #0
 8004e6a:	4b42      	ldr	r3, [pc, #264]	; (8004f74 <rotate_180+0x14c>)
 8004e6c:	f7fb fbbc 	bl	80005e8 <__aeabi_dmul>
 8004e70:	4603      	mov	r3, r0
 8004e72:	460c      	mov	r4, r1
 8004e74:	4618      	mov	r0, r3
 8004e76:	4621      	mov	r1, r4
 8004e78:	f04f 0200 	mov.w	r2, #0
 8004e7c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004e80:	f7fb fcdc 	bl	800083c <__aeabi_ddiv>
 8004e84:	4603      	mov	r3, r0
 8004e86:	460c      	mov	r4, r1
 8004e88:	4618      	mov	r0, r3
 8004e8a:	4621      	mov	r1, r4
 8004e8c:	f7fb fe5c 	bl	8000b48 <__aeabi_d2f>
 8004e90:	4602      	mov	r2, r0
 8004e92:	4b39      	ldr	r3, [pc, #228]	; (8004f78 <rotate_180+0x150>)
 8004e94:	601a      	str	r2, [r3, #0]
	speed_min_r = -1*target_omega_z/180*M_PI * TREAD/2;
 8004e96:	4b30      	ldr	r3, [pc, #192]	; (8004f58 <rotate_180+0x130>)
 8004e98:	edd3 7a00 	vldr	s15, [r3]
 8004e9c:	eef1 7a67 	vneg.f32	s15, s15
 8004ea0:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8004f70 <rotate_180+0x148>
 8004ea4:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8004ea8:	ee16 0a90 	vmov	r0, s13
 8004eac:	f7fb fb44 	bl	8000538 <__aeabi_f2d>
 8004eb0:	a327      	add	r3, pc, #156	; (adr r3, 8004f50 <rotate_180+0x128>)
 8004eb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004eb6:	f7fb fb97 	bl	80005e8 <__aeabi_dmul>
 8004eba:	4603      	mov	r3, r0
 8004ebc:	460c      	mov	r4, r1
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	4621      	mov	r1, r4
 8004ec2:	f04f 0200 	mov.w	r2, #0
 8004ec6:	4b2b      	ldr	r3, [pc, #172]	; (8004f74 <rotate_180+0x14c>)
 8004ec8:	f7fb fb8e 	bl	80005e8 <__aeabi_dmul>
 8004ecc:	4603      	mov	r3, r0
 8004ece:	460c      	mov	r4, r1
 8004ed0:	4618      	mov	r0, r3
 8004ed2:	4621      	mov	r1, r4
 8004ed4:	f04f 0200 	mov.w	r2, #0
 8004ed8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004edc:	f7fb fcae 	bl	800083c <__aeabi_ddiv>
 8004ee0:	4603      	mov	r3, r0
 8004ee2:	460c      	mov	r4, r1
 8004ee4:	4618      	mov	r0, r3
 8004ee6:	4621      	mov	r1, r4
 8004ee8:	f7fb fe2e 	bl	8000b48 <__aeabi_d2f>
 8004eec:	4602      	mov	r2, r0
 8004eee:	4b23      	ldr	r3, [pc, #140]	; (8004f7c <rotate_180+0x154>)
 8004ef0:	601a      	str	r2, [r3, #0]

	drive_start();											//走行開始
 8004ef2:	f7ff fb5f 	bl	80045b4 <drive_start>
	while(degree_z > -170);
 8004ef6:	bf00      	nop
 8004ef8:	4b21      	ldr	r3, [pc, #132]	; (8004f80 <rotate_180+0x158>)
 8004efa:	edd3 7a00 	vldr	s15, [r3]
 8004efe:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8004f84 <rotate_180+0x15c>
 8004f02:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004f06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f0a:	dcf5      	bgt.n	8004ef8 <rotate_180+0xd0>
	drive_stop();
 8004f0c:	f7ff fb70 	bl	80045f0 <drive_stop>

	accel_l = 3000;
 8004f10:	4b13      	ldr	r3, [pc, #76]	; (8004f60 <rotate_180+0x138>)
 8004f12:	4a14      	ldr	r2, [pc, #80]	; (8004f64 <rotate_180+0x13c>)
 8004f14:	601a      	str	r2, [r3, #0]
	accel_r = -3000;
 8004f16:	4b14      	ldr	r3, [pc, #80]	; (8004f68 <rotate_180+0x140>)
 8004f18:	4a14      	ldr	r2, [pc, #80]	; (8004f6c <rotate_180+0x144>)
 8004f1a:	601a      	str	r2, [r3, #0]
	speed_max_l = 100;
 8004f1c:	4b16      	ldr	r3, [pc, #88]	; (8004f78 <rotate_180+0x150>)
 8004f1e:	4a1a      	ldr	r2, [pc, #104]	; (8004f88 <rotate_180+0x160>)
 8004f20:	601a      	str	r2, [r3, #0]
	speed_min_r = -100;
 8004f22:	4b16      	ldr	r3, [pc, #88]	; (8004f7c <rotate_180+0x154>)
 8004f24:	4a19      	ldr	r2, [pc, #100]	; (8004f8c <rotate_180+0x164>)
 8004f26:	601a      	str	r2, [r3, #0]

	drive_start();											//走行開始
 8004f28:	f7ff fb44 	bl	80045b4 <drive_start>
	while(degree_z > -180+170);
 8004f2c:	bf00      	nop
 8004f2e:	4b14      	ldr	r3, [pc, #80]	; (8004f80 <rotate_180+0x158>)
 8004f30:	edd3 7a00 	vldr	s15, [r3]
 8004f34:	eeba 7a04 	vmov.f32	s14, #164	; 0xc1200000 -10.0
 8004f38:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004f3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f40:	dcf5      	bgt.n	8004f2e <rotate_180+0x106>

	drive_stop();
 8004f42:	f7ff fb55 	bl	80045f0 <drive_stop>
}
 8004f46:	bf00      	nop
 8004f48:	bd98      	pop	{r3, r4, r7, pc}
 8004f4a:	bf00      	nop
 8004f4c:	f3af 8000 	nop.w
 8004f50:	54442d18 	.word	0x54442d18
 8004f54:	400921fb 	.word	0x400921fb
 8004f58:	20000160 	.word	0x20000160
 8004f5c:	44480000 	.word	0x44480000
 8004f60:	20000bf0 	.word	0x20000bf0
 8004f64:	453b8000 	.word	0x453b8000
 8004f68:	2000098c 	.word	0x2000098c
 8004f6c:	c53b8000 	.word	0xc53b8000
 8004f70:	43340000 	.word	0x43340000
 8004f74:	40508000 	.word	0x40508000
 8004f78:	20000624 	.word	0x20000624
 8004f7c:	20000e00 	.word	0x20000e00
 8004f80:	200009fc 	.word	0x200009fc
 8004f84:	c32a0000 	.word	0xc32a0000
 8004f88:	42c80000 	.word	0x42c80000
 8004f8c:	c2c80000 	.word	0xc2c80000

08004f90 <slalom_R90>:
//slalom_R90
//aスラロームで左に90度回転する
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void slalom_R90(void){
 8004f90:	b580      	push	{r7, lr}
 8004f92:	af00      	add	r7, sp, #0
	MF.FLAG.GYRO = 0;
 8004f94:	4a58      	ldr	r2, [pc, #352]	; (80050f8 <slalom_R90+0x168>)
 8004f96:	8813      	ldrh	r3, [r2, #0]
 8004f98:	f36f 13c7 	bfc	r3, #7, #1
 8004f9c:	8013      	strh	r3, [r2, #0]

	accel_l = 3000;
 8004f9e:	4b57      	ldr	r3, [pc, #348]	; (80050fc <slalom_R90+0x16c>)
 8004fa0:	4a57      	ldr	r2, [pc, #348]	; (8005100 <slalom_R90+0x170>)
 8004fa2:	601a      	str	r2, [r3, #0]
	accel_r = 3000;
 8004fa4:	4b57      	ldr	r3, [pc, #348]	; (8005104 <slalom_R90+0x174>)
 8004fa6:	4a56      	ldr	r2, [pc, #344]	; (8005100 <slalom_R90+0x170>)
 8004fa8:	601a      	str	r2, [r3, #0]
	speed_max_l = 400;
 8004faa:	4b57      	ldr	r3, [pc, #348]	; (8005108 <slalom_R90+0x178>)
 8004fac:	4a57      	ldr	r2, [pc, #348]	; (800510c <slalom_R90+0x17c>)
 8004fae:	601a      	str	r2, [r3, #0]
	speed_max_r = 400;
 8004fb0:	4b57      	ldr	r3, [pc, #348]	; (8005110 <slalom_R90+0x180>)
 8004fb2:	4a56      	ldr	r2, [pc, #344]	; (800510c <slalom_R90+0x17c>)
 8004fb4:	601a      	str	r2, [r3, #0]

	drive_start();											//走行開始
 8004fb6:	f7ff fafd 	bl	80045b4 <drive_start>
	while(dist_l < 18.5 && dist_r < 18.5);
 8004fba:	bf00      	nop
 8004fbc:	4b55      	ldr	r3, [pc, #340]	; (8005114 <slalom_R90+0x184>)
 8004fbe:	edd3 7a00 	vldr	s15, [r3]
 8004fc2:	ed9f 7a55 	vldr	s14, [pc, #340]	; 8005118 <slalom_R90+0x188>
 8004fc6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004fca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004fce:	d509      	bpl.n	8004fe4 <slalom_R90+0x54>
 8004fd0:	4b52      	ldr	r3, [pc, #328]	; (800511c <slalom_R90+0x18c>)
 8004fd2:	edd3 7a00 	vldr	s15, [r3]
 8004fd6:	ed9f 7a50 	vldr	s14, [pc, #320]	; 8005118 <slalom_R90+0x188>
 8004fda:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004fde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004fe2:	d4eb      	bmi.n	8004fbc <slalom_R90+0x2c>
	drive_stop();
 8004fe4:	f7ff fb04 	bl	80045f0 <drive_stop>

	MF.FLAG.GYRO = 1;
 8004fe8:	4a43      	ldr	r2, [pc, #268]	; (80050f8 <slalom_R90+0x168>)
 8004fea:	8813      	ldrh	r3, [r2, #0]
 8004fec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ff0:	8013      	strh	r3, [r2, #0]

	target_degaccel_z = 4000;
 8004ff2:	4b4b      	ldr	r3, [pc, #300]	; (8005120 <slalom_R90+0x190>)
 8004ff4:	4a4b      	ldr	r2, [pc, #300]	; (8005124 <slalom_R90+0x194>)
 8004ff6:	601a      	str	r2, [r3, #0]
	omega_max = 550;
 8004ff8:	4b4b      	ldr	r3, [pc, #300]	; (8005128 <slalom_R90+0x198>)
 8004ffa:	4a4c      	ldr	r2, [pc, #304]	; (800512c <slalom_R90+0x19c>)
 8004ffc:	601a      	str	r2, [r3, #0]
	speed_G = 400;
 8004ffe:	4b4c      	ldr	r3, [pc, #304]	; (8005130 <slalom_R90+0x1a0>)
 8005000:	4a42      	ldr	r2, [pc, #264]	; (800510c <slalom_R90+0x17c>)
 8005002:	601a      	str	r2, [r3, #0]

	drive_start();											//走行開始
 8005004:	f7ff fad6 	bl	80045b4 <drive_start>
	while(degree_z > -38.087);
 8005008:	bf00      	nop
 800500a:	4b4a      	ldr	r3, [pc, #296]	; (8005134 <slalom_R90+0x1a4>)
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	4618      	mov	r0, r3
 8005010:	f7fb fa92 	bl	8000538 <__aeabi_f2d>
 8005014:	a334      	add	r3, pc, #208	; (adr r3, 80050e8 <slalom_R90+0x158>)
 8005016:	e9d3 2300 	ldrd	r2, r3, [r3]
 800501a:	f7fb fd75 	bl	8000b08 <__aeabi_dcmpgt>
 800501e:	4603      	mov	r3, r0
 8005020:	2b00      	cmp	r3, #0
 8005022:	d1f2      	bne.n	800500a <slalom_R90+0x7a>
	drive_stop();
 8005024:	f7ff fae4 	bl	80045f0 <drive_stop>

	MF.FLAG.GYRO = 1;
 8005028:	4a33      	ldr	r2, [pc, #204]	; (80050f8 <slalom_R90+0x168>)
 800502a:	8813      	ldrh	r3, [r2, #0]
 800502c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005030:	8013      	strh	r3, [r2, #0]

	target_degaccel_z = 0;
 8005032:	4b3b      	ldr	r3, [pc, #236]	; (8005120 <slalom_R90+0x190>)
 8005034:	f04f 0200 	mov.w	r2, #0
 8005038:	601a      	str	r2, [r3, #0]

	drive_start();											//走行開始
 800503a:	f7ff fabb 	bl	80045b4 <drive_start>
	while(degree_z > -19);
 800503e:	bf00      	nop
 8005040:	4b3c      	ldr	r3, [pc, #240]	; (8005134 <slalom_R90+0x1a4>)
 8005042:	edd3 7a00 	vldr	s15, [r3]
 8005046:	eebb 7a03 	vmov.f32	s14, #179	; 0xc1980000 -19.0
 800504a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800504e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005052:	dcf5      	bgt.n	8005040 <slalom_R90+0xb0>
	drive_stop();
 8005054:	f7ff facc 	bl	80045f0 <drive_stop>

	MF.FLAG.GYRO = 1;
 8005058:	4a27      	ldr	r2, [pc, #156]	; (80050f8 <slalom_R90+0x168>)
 800505a:	8813      	ldrh	r3, [r2, #0]
 800505c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005060:	8013      	strh	r3, [r2, #0]

	target_degaccel_z = -4000;
 8005062:	4b2f      	ldr	r3, [pc, #188]	; (8005120 <slalom_R90+0x190>)
 8005064:	4a34      	ldr	r2, [pc, #208]	; (8005138 <slalom_R90+0x1a8>)
 8005066:	601a      	str	r2, [r3, #0]

	drive_start();											//走行開始
 8005068:	f7ff faa4 	bl	80045b4 <drive_start>
	while(degree_z > -31.913);
 800506c:	bf00      	nop
 800506e:	4b31      	ldr	r3, [pc, #196]	; (8005134 <slalom_R90+0x1a4>)
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	4618      	mov	r0, r3
 8005074:	f7fb fa60 	bl	8000538 <__aeabi_f2d>
 8005078:	a31d      	add	r3, pc, #116	; (adr r3, 80050f0 <slalom_R90+0x160>)
 800507a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800507e:	f7fb fd43 	bl	8000b08 <__aeabi_dcmpgt>
 8005082:	4603      	mov	r3, r0
 8005084:	2b00      	cmp	r3, #0
 8005086:	d1f2      	bne.n	800506e <slalom_R90+0xde>
	drive_stop();
 8005088:	f7ff fab2 	bl	80045f0 <drive_stop>

	MF.FLAG.GYRO = 0;
 800508c:	4a1a      	ldr	r2, [pc, #104]	; (80050f8 <slalom_R90+0x168>)
 800508e:	8813      	ldrh	r3, [r2, #0]
 8005090:	f36f 13c7 	bfc	r3, #7, #1
 8005094:	8013      	strh	r3, [r2, #0]

	accel_l = 3000;
 8005096:	4b19      	ldr	r3, [pc, #100]	; (80050fc <slalom_R90+0x16c>)
 8005098:	4a19      	ldr	r2, [pc, #100]	; (8005100 <slalom_R90+0x170>)
 800509a:	601a      	str	r2, [r3, #0]
	accel_r = 3000;
 800509c:	4b19      	ldr	r3, [pc, #100]	; (8005104 <slalom_R90+0x174>)
 800509e:	4a18      	ldr	r2, [pc, #96]	; (8005100 <slalom_R90+0x170>)
 80050a0:	601a      	str	r2, [r3, #0]
	speed_max_l = 400;
 80050a2:	4b19      	ldr	r3, [pc, #100]	; (8005108 <slalom_R90+0x178>)
 80050a4:	4a19      	ldr	r2, [pc, #100]	; (800510c <slalom_R90+0x17c>)
 80050a6:	601a      	str	r2, [r3, #0]
	speed_max_r = 400;
 80050a8:	4b19      	ldr	r3, [pc, #100]	; (8005110 <slalom_R90+0x180>)
 80050aa:	4a18      	ldr	r2, [pc, #96]	; (800510c <slalom_R90+0x17c>)
 80050ac:	601a      	str	r2, [r3, #0]
	drive_start();											//走行開始
 80050ae:	f7ff fa81 	bl	80045b4 <drive_start>
	while(dist_l < 18.5 && dist_r < 18.5);
 80050b2:	bf00      	nop
 80050b4:	4b17      	ldr	r3, [pc, #92]	; (8005114 <slalom_R90+0x184>)
 80050b6:	edd3 7a00 	vldr	s15, [r3]
 80050ba:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8005118 <slalom_R90+0x188>
 80050be:	eef4 7ac7 	vcmpe.f32	s15, s14
 80050c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050c6:	d509      	bpl.n	80050dc <slalom_R90+0x14c>
 80050c8:	4b14      	ldr	r3, [pc, #80]	; (800511c <slalom_R90+0x18c>)
 80050ca:	edd3 7a00 	vldr	s15, [r3]
 80050ce:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8005118 <slalom_R90+0x188>
 80050d2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80050d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050da:	d4eb      	bmi.n	80050b4 <slalom_R90+0x124>
	drive_stop();
 80050dc:	f7ff fa88 	bl	80045f0 <drive_stop>
}
 80050e0:	bf00      	nop
 80050e2:	bd80      	pop	{r7, pc}
 80050e4:	f3af 8000 	nop.w
 80050e8:	d0e56042 	.word	0xd0e56042
 80050ec:	c0430b22 	.word	0xc0430b22
 80050f0:	5e353f7d 	.word	0x5e353f7d
 80050f4:	c03fe9ba 	.word	0xc03fe9ba
 80050f8:	20000dfc 	.word	0x20000dfc
 80050fc:	20000bf0 	.word	0x20000bf0
 8005100:	453b8000 	.word	0x453b8000
 8005104:	2000098c 	.word	0x2000098c
 8005108:	20000624 	.word	0x20000624
 800510c:	43c80000 	.word	0x43c80000
 8005110:	2000015c 	.word	0x2000015c
 8005114:	20000e10 	.word	0x20000e10
 8005118:	41940000 	.word	0x41940000
 800511c:	20000994 	.word	0x20000994
 8005120:	200009f8 	.word	0x200009f8
 8005124:	457a0000 	.word	0x457a0000
 8005128:	20000990 	.word	0x20000990
 800512c:	44098000 	.word	0x44098000
 8005130:	2000099c 	.word	0x2000099c
 8005134:	200009fc 	.word	0x200009fc
 8005138:	c57a0000 	.word	0xc57a0000
 800513c:	00000000 	.word	0x00000000

08005140 <slalom_L90>:
//slalom_L90
//aスラロームで右に90度回転する
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void slalom_L90(void){
 8005140:	b580      	push	{r7, lr}
 8005142:	af00      	add	r7, sp, #0
	MF.FLAG.GYRO = 0;
 8005144:	4a58      	ldr	r2, [pc, #352]	; (80052a8 <slalom_L90+0x168>)
 8005146:	8813      	ldrh	r3, [r2, #0]
 8005148:	f36f 13c7 	bfc	r3, #7, #1
 800514c:	8013      	strh	r3, [r2, #0]

	accel_l = 3000;
 800514e:	4b57      	ldr	r3, [pc, #348]	; (80052ac <slalom_L90+0x16c>)
 8005150:	4a57      	ldr	r2, [pc, #348]	; (80052b0 <slalom_L90+0x170>)
 8005152:	601a      	str	r2, [r3, #0]
	accel_r = 3000;
 8005154:	4b57      	ldr	r3, [pc, #348]	; (80052b4 <slalom_L90+0x174>)
 8005156:	4a56      	ldr	r2, [pc, #344]	; (80052b0 <slalom_L90+0x170>)
 8005158:	601a      	str	r2, [r3, #0]
	speed_max_l = 400;
 800515a:	4b57      	ldr	r3, [pc, #348]	; (80052b8 <slalom_L90+0x178>)
 800515c:	4a57      	ldr	r2, [pc, #348]	; (80052bc <slalom_L90+0x17c>)
 800515e:	601a      	str	r2, [r3, #0]
	speed_max_r = 400;
 8005160:	4b57      	ldr	r3, [pc, #348]	; (80052c0 <slalom_L90+0x180>)
 8005162:	4a56      	ldr	r2, [pc, #344]	; (80052bc <slalom_L90+0x17c>)
 8005164:	601a      	str	r2, [r3, #0]

	drive_start();											//走行開始
 8005166:	f7ff fa25 	bl	80045b4 <drive_start>
	while(dist_l < 18.5 && dist_r < 18.5);
 800516a:	bf00      	nop
 800516c:	4b55      	ldr	r3, [pc, #340]	; (80052c4 <slalom_L90+0x184>)
 800516e:	edd3 7a00 	vldr	s15, [r3]
 8005172:	ed9f 7a55 	vldr	s14, [pc, #340]	; 80052c8 <slalom_L90+0x188>
 8005176:	eef4 7ac7 	vcmpe.f32	s15, s14
 800517a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800517e:	d509      	bpl.n	8005194 <slalom_L90+0x54>
 8005180:	4b52      	ldr	r3, [pc, #328]	; (80052cc <slalom_L90+0x18c>)
 8005182:	edd3 7a00 	vldr	s15, [r3]
 8005186:	ed9f 7a50 	vldr	s14, [pc, #320]	; 80052c8 <slalom_L90+0x188>
 800518a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800518e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005192:	d4eb      	bmi.n	800516c <slalom_L90+0x2c>
	drive_stop();
 8005194:	f7ff fa2c 	bl	80045f0 <drive_stop>

	MF.FLAG.GYRO = 1;
 8005198:	4a43      	ldr	r2, [pc, #268]	; (80052a8 <slalom_L90+0x168>)
 800519a:	8813      	ldrh	r3, [r2, #0]
 800519c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80051a0:	8013      	strh	r3, [r2, #0]

	target_degaccel_z = -4000;
 80051a2:	4b4b      	ldr	r3, [pc, #300]	; (80052d0 <slalom_L90+0x190>)
 80051a4:	4a4b      	ldr	r2, [pc, #300]	; (80052d4 <slalom_L90+0x194>)
 80051a6:	601a      	str	r2, [r3, #0]
	omega_min = -550;
 80051a8:	4b4b      	ldr	r3, [pc, #300]	; (80052d8 <slalom_L90+0x198>)
 80051aa:	4a4c      	ldr	r2, [pc, #304]	; (80052dc <slalom_L90+0x19c>)
 80051ac:	601a      	str	r2, [r3, #0]
	speed_G = 400;
 80051ae:	4b4c      	ldr	r3, [pc, #304]	; (80052e0 <slalom_L90+0x1a0>)
 80051b0:	4a42      	ldr	r2, [pc, #264]	; (80052bc <slalom_L90+0x17c>)
 80051b2:	601a      	str	r2, [r3, #0]

	drive_start();											//走行開始
 80051b4:	f7ff f9fe 	bl	80045b4 <drive_start>
	while(degree_z < 38.087);
 80051b8:	bf00      	nop
 80051ba:	4b4a      	ldr	r3, [pc, #296]	; (80052e4 <slalom_L90+0x1a4>)
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	4618      	mov	r0, r3
 80051c0:	f7fb f9ba 	bl	8000538 <__aeabi_f2d>
 80051c4:	a334      	add	r3, pc, #208	; (adr r3, 8005298 <slalom_L90+0x158>)
 80051c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051ca:	f7fb fc7f 	bl	8000acc <__aeabi_dcmplt>
 80051ce:	4603      	mov	r3, r0
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d1f2      	bne.n	80051ba <slalom_L90+0x7a>
	drive_stop();
 80051d4:	f7ff fa0c 	bl	80045f0 <drive_stop>

	MF.FLAG.GYRO = 1;
 80051d8:	4a33      	ldr	r2, [pc, #204]	; (80052a8 <slalom_L90+0x168>)
 80051da:	8813      	ldrh	r3, [r2, #0]
 80051dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80051e0:	8013      	strh	r3, [r2, #0]

	target_degaccel_z = 0;
 80051e2:	4b3b      	ldr	r3, [pc, #236]	; (80052d0 <slalom_L90+0x190>)
 80051e4:	f04f 0200 	mov.w	r2, #0
 80051e8:	601a      	str	r2, [r3, #0]

	drive_start();											//走行開始
 80051ea:	f7ff f9e3 	bl	80045b4 <drive_start>
	while(degree_z < 19);
 80051ee:	bf00      	nop
 80051f0:	4b3c      	ldr	r3, [pc, #240]	; (80052e4 <slalom_L90+0x1a4>)
 80051f2:	edd3 7a00 	vldr	s15, [r3]
 80051f6:	eeb3 7a03 	vmov.f32	s14, #51	; 0x41980000  19.0
 80051fa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80051fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005202:	d4f5      	bmi.n	80051f0 <slalom_L90+0xb0>
	drive_stop();
 8005204:	f7ff f9f4 	bl	80045f0 <drive_stop>

	MF.FLAG.GYRO = 1;
 8005208:	4a27      	ldr	r2, [pc, #156]	; (80052a8 <slalom_L90+0x168>)
 800520a:	8813      	ldrh	r3, [r2, #0]
 800520c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005210:	8013      	strh	r3, [r2, #0]

	target_degaccel_z = 4000;
 8005212:	4b2f      	ldr	r3, [pc, #188]	; (80052d0 <slalom_L90+0x190>)
 8005214:	4a34      	ldr	r2, [pc, #208]	; (80052e8 <slalom_L90+0x1a8>)
 8005216:	601a      	str	r2, [r3, #0]

	drive_start();											//走行開始
 8005218:	f7ff f9cc 	bl	80045b4 <drive_start>
	while(degree_z < 31.913);
 800521c:	bf00      	nop
 800521e:	4b31      	ldr	r3, [pc, #196]	; (80052e4 <slalom_L90+0x1a4>)
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	4618      	mov	r0, r3
 8005224:	f7fb f988 	bl	8000538 <__aeabi_f2d>
 8005228:	a31d      	add	r3, pc, #116	; (adr r3, 80052a0 <slalom_L90+0x160>)
 800522a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800522e:	f7fb fc4d 	bl	8000acc <__aeabi_dcmplt>
 8005232:	4603      	mov	r3, r0
 8005234:	2b00      	cmp	r3, #0
 8005236:	d1f2      	bne.n	800521e <slalom_L90+0xde>
	drive_stop();
 8005238:	f7ff f9da 	bl	80045f0 <drive_stop>

	MF.FLAG.GYRO = 0;
 800523c:	4a1a      	ldr	r2, [pc, #104]	; (80052a8 <slalom_L90+0x168>)
 800523e:	8813      	ldrh	r3, [r2, #0]
 8005240:	f36f 13c7 	bfc	r3, #7, #1
 8005244:	8013      	strh	r3, [r2, #0]

	accel_l = 3000;
 8005246:	4b19      	ldr	r3, [pc, #100]	; (80052ac <slalom_L90+0x16c>)
 8005248:	4a19      	ldr	r2, [pc, #100]	; (80052b0 <slalom_L90+0x170>)
 800524a:	601a      	str	r2, [r3, #0]
	accel_r = 3000;
 800524c:	4b19      	ldr	r3, [pc, #100]	; (80052b4 <slalom_L90+0x174>)
 800524e:	4a18      	ldr	r2, [pc, #96]	; (80052b0 <slalom_L90+0x170>)
 8005250:	601a      	str	r2, [r3, #0]
	speed_max_l = 400;
 8005252:	4b19      	ldr	r3, [pc, #100]	; (80052b8 <slalom_L90+0x178>)
 8005254:	4a19      	ldr	r2, [pc, #100]	; (80052bc <slalom_L90+0x17c>)
 8005256:	601a      	str	r2, [r3, #0]
	speed_max_r = 400;
 8005258:	4b19      	ldr	r3, [pc, #100]	; (80052c0 <slalom_L90+0x180>)
 800525a:	4a18      	ldr	r2, [pc, #96]	; (80052bc <slalom_L90+0x17c>)
 800525c:	601a      	str	r2, [r3, #0]
	drive_start();											//走行開始
 800525e:	f7ff f9a9 	bl	80045b4 <drive_start>
	while(dist_l < 18.5 && dist_r < 18.5);
 8005262:	bf00      	nop
 8005264:	4b17      	ldr	r3, [pc, #92]	; (80052c4 <slalom_L90+0x184>)
 8005266:	edd3 7a00 	vldr	s15, [r3]
 800526a:	ed9f 7a17 	vldr	s14, [pc, #92]	; 80052c8 <slalom_L90+0x188>
 800526e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005272:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005276:	d509      	bpl.n	800528c <slalom_L90+0x14c>
 8005278:	4b14      	ldr	r3, [pc, #80]	; (80052cc <slalom_L90+0x18c>)
 800527a:	edd3 7a00 	vldr	s15, [r3]
 800527e:	ed9f 7a12 	vldr	s14, [pc, #72]	; 80052c8 <slalom_L90+0x188>
 8005282:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005286:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800528a:	d4eb      	bmi.n	8005264 <slalom_L90+0x124>
	drive_stop();
 800528c:	f7ff f9b0 	bl	80045f0 <drive_stop>
}
 8005290:	bf00      	nop
 8005292:	bd80      	pop	{r7, pc}
 8005294:	f3af 8000 	nop.w
 8005298:	d0e56042 	.word	0xd0e56042
 800529c:	40430b22 	.word	0x40430b22
 80052a0:	5e353f7d 	.word	0x5e353f7d
 80052a4:	403fe9ba 	.word	0x403fe9ba
 80052a8:	20000dfc 	.word	0x20000dfc
 80052ac:	20000bf0 	.word	0x20000bf0
 80052b0:	453b8000 	.word	0x453b8000
 80052b4:	2000098c 	.word	0x2000098c
 80052b8:	20000624 	.word	0x20000624
 80052bc:	43c80000 	.word	0x43c80000
 80052c0:	2000015c 	.word	0x2000015c
 80052c4:	20000e10 	.word	0x20000e10
 80052c8:	41940000 	.word	0x41940000
 80052cc:	20000994 	.word	0x20000994
 80052d0:	200009f8 	.word	0x200009f8
 80052d4:	c57a0000 	.word	0xc57a0000
 80052d8:	2000026c 	.word	0x2000026c
 80052dc:	c4098000 	.word	0xc4098000
 80052e0:	2000099c 	.word	0x2000099c
 80052e4:	200009fc 	.word	0x200009fc
 80052e8:	457a0000 	.word	0x457a0000

080052ec <init_test>:
//init_test
//a初期基幹関数走行テスト
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void init_test(void){
 80052ec:	b580      	push	{r7, lr}
 80052ee:	b086      	sub	sp, #24
 80052f0:	af00      	add	r7, sp, #0

	int mode = 0;
 80052f2:	2300      	movs	r3, #0
 80052f4:	617b      	str	r3, [r7, #20]
	printf("Test Init Run, Mode : %d\n", mode);
 80052f6:	6979      	ldr	r1, [r7, #20]
 80052f8:	4864      	ldr	r0, [pc, #400]	; (800548c <init_test+0x1a0>)
 80052fa:	f002 fc25 	bl	8007b48 <iprintf>

	while(1){
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 80052fe:	697b      	ldr	r3, [r7, #20]
 8005300:	b2db      	uxtb	r3, r3
 8005302:	f003 0301 	and.w	r3, r3, #1
 8005306:	b2d8      	uxtb	r0, r3
 8005308:	697b      	ldr	r3, [r7, #20]
 800530a:	b2db      	uxtb	r3, r3
 800530c:	f003 0302 	and.w	r3, r3, #2
 8005310:	b2d9      	uxtb	r1, r3
 8005312:	697b      	ldr	r3, [r7, #20]
 8005314:	b2db      	uxtb	r3, r3
 8005316:	f003 0304 	and.w	r3, r3, #4
 800531a:	b2db      	uxtb	r3, r3
 800531c:	461a      	mov	r2, r3
 800531e:	f001 ffe9 	bl	80072f4 <led_write>
		  if(dist_r >= 20){
 8005322:	4b5b      	ldr	r3, [pc, #364]	; (8005490 <init_test+0x1a4>)
 8005324:	edd3 7a00 	vldr	s15, [r3]
 8005328:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 800532c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005330:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005334:	db0f      	blt.n	8005356 <init_test+0x6a>
			  mode++;
 8005336:	697b      	ldr	r3, [r7, #20]
 8005338:	3301      	adds	r3, #1
 800533a:	617b      	str	r3, [r7, #20]
			  dist_r = 0;
 800533c:	4b54      	ldr	r3, [pc, #336]	; (8005490 <init_test+0x1a4>)
 800533e:	f04f 0200 	mov.w	r2, #0
 8005342:	601a      	str	r2, [r3, #0]
			  if(mode > 7){
 8005344:	697b      	ldr	r3, [r7, #20]
 8005346:	2b07      	cmp	r3, #7
 8005348:	dd01      	ble.n	800534e <init_test+0x62>
				  mode = 0;
 800534a:	2300      	movs	r3, #0
 800534c:	617b      	str	r3, [r7, #20]
			  }
			  printf("Mode : %d\n", mode);
 800534e:	6979      	ldr	r1, [r7, #20]
 8005350:	4850      	ldr	r0, [pc, #320]	; (8005494 <init_test+0x1a8>)
 8005352:	f002 fbf9 	bl	8007b48 <iprintf>
			  //buzzer(pitagola2[mode-1][0], pitagola2[mode-1][1]);
			  //buzzer(pitagola[2][0], pitagola[2][1]);
		  }
		  if(dist_r <= -20){
 8005356:	4b4e      	ldr	r3, [pc, #312]	; (8005490 <init_test+0x1a4>)
 8005358:	edd3 7a00 	vldr	s15, [r3]
 800535c:	eebb 7a04 	vmov.f32	s14, #180	; 0xc1a00000 -20.0
 8005360:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005364:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005368:	d80f      	bhi.n	800538a <init_test+0x9e>
			  mode--;
 800536a:	697b      	ldr	r3, [r7, #20]
 800536c:	3b01      	subs	r3, #1
 800536e:	617b      	str	r3, [r7, #20]
			  dist_r = 0;
 8005370:	4b47      	ldr	r3, [pc, #284]	; (8005490 <init_test+0x1a4>)
 8005372:	f04f 0200 	mov.w	r2, #0
 8005376:	601a      	str	r2, [r3, #0]
			  if(mode < 0){
 8005378:	697b      	ldr	r3, [r7, #20]
 800537a:	2b00      	cmp	r3, #0
 800537c:	da01      	bge.n	8005382 <init_test+0x96>
				  mode = 7;
 800537e:	2307      	movs	r3, #7
 8005380:	617b      	str	r3, [r7, #20]
			  }
			  printf("Mode : %d\n", mode);
 8005382:	6979      	ldr	r1, [r7, #20]
 8005384:	4843      	ldr	r0, [pc, #268]	; (8005494 <init_test+0x1a8>)
 8005386:	f002 fbdf 	bl	8007b48 <iprintf>
			  //buzzer(pitagola2[mode-1][0], pitagola2[mode-1][1]);
			  //buzzer(pitagola[2][0], pitagola[2][1]);
		  }
		  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET){
 800538a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800538e:	4842      	ldr	r0, [pc, #264]	; (8005498 <init_test+0x1ac>)
 8005390:	f7fc fca4 	bl	8001cdc <HAL_GPIO_ReadPin>
 8005394:	4603      	mov	r3, r0
 8005396:	2b00      	cmp	r3, #0
 8005398:	d1b1      	bne.n	80052fe <init_test+0x12>
			  HAL_Delay(50);
 800539a:	2032      	movs	r0, #50	; 0x32
 800539c:	f7fb fe16 	bl	8000fcc <HAL_Delay>
			  while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET);
 80053a0:	bf00      	nop
 80053a2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80053a6:	483c      	ldr	r0, [pc, #240]	; (8005498 <init_test+0x1ac>)
 80053a8:	f7fc fc98 	bl	8001cdc <HAL_GPIO_ReadPin>
 80053ac:	4603      	mov	r3, r0
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d0f7      	beq.n	80053a2 <init_test+0xb6>
			  switch(mode){
 80053b2:	697b      	ldr	r3, [r7, #20]
 80053b4:	2b07      	cmp	r3, #7
 80053b6:	d8a2      	bhi.n	80052fe <init_test+0x12>
 80053b8:	a201      	add	r2, pc, #4	; (adr r2, 80053c0 <init_test+0xd4>)
 80053ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053be:	bf00      	nop
 80053c0:	080053e1 	.word	0x080053e1
 80053c4:	080053e9 	.word	0x080053e9
 80053c8:	08005409 	.word	0x08005409
 80053cc:	08005427 	.word	0x08005427
 80053d0:	08005445 	.word	0x08005445
 80053d4:	08005463 	.word	0x08005463
 80053d8:	080052ff 	.word	0x080052ff
 80053dc:	080052ff 	.word	0x080052ff
				case 0:
					//----a尻当て----
					printf("Set Position.\n");
 80053e0:	482e      	ldr	r0, [pc, #184]	; (800549c <init_test+0x1b0>)
 80053e2:	f002 fc25 	bl	8007c30 <puts>
					//set_position(0);
					break;
 80053e6:	e04f      	b.n	8005488 <init_test+0x19c>
				case 1:
					//----4区画等速走行----
					printf("4 Section, Forward, Constant Speed.\n");
 80053e8:	482d      	ldr	r0, [pc, #180]	; (80054a0 <init_test+0x1b4>)
 80053ea:	f002 fc21 	bl	8007c30 <puts>
					for(int i = 0; i < 1; i++){
 80053ee:	2300      	movs	r3, #0
 80053f0:	613b      	str	r3, [r7, #16]
 80053f2:	e005      	b.n	8005400 <init_test+0x114>
						driveC(SEC_HALF*2);	//一区画のパルス分デフォルトインターバルで走行
 80053f4:	20b4      	movs	r0, #180	; 0xb4
 80053f6:	f7ff fb0b 	bl	8004a10 <driveC>
					for(int i = 0; i < 1; i++){
 80053fa:	693b      	ldr	r3, [r7, #16]
 80053fc:	3301      	adds	r3, #1
 80053fe:	613b      	str	r3, [r7, #16]
 8005400:	693b      	ldr	r3, [r7, #16]
 8005402:	2b00      	cmp	r3, #0
 8005404:	ddf6      	ble.n	80053f4 <init_test+0x108>
					}
					break;
 8005406:	e03f      	b.n	8005488 <init_test+0x19c>
				case 2:
					//----right90度回転----
					printf("Rotate R90.\n");
 8005408:	4826      	ldr	r0, [pc, #152]	; (80054a4 <init_test+0x1b8>)
 800540a:	f002 fc11 	bl	8007c30 <puts>
					for(int i = 0; i < 16; i++){
 800540e:	2300      	movs	r3, #0
 8005410:	60fb      	str	r3, [r7, #12]
 8005412:	e004      	b.n	800541e <init_test+0x132>
						rotate_R90();				//16回右90度回転、つまり4周回転
 8005414:	f7ff fba0 	bl	8004b58 <rotate_R90>
					for(int i = 0; i < 16; i++){
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	3301      	adds	r3, #1
 800541c:	60fb      	str	r3, [r7, #12]
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	2b0f      	cmp	r3, #15
 8005422:	ddf7      	ble.n	8005414 <init_test+0x128>
					}
					break;
 8005424:	e030      	b.n	8005488 <init_test+0x19c>
				case 3:
					//----left90度回転----
					printf("Rotate L90.\n");
 8005426:	4820      	ldr	r0, [pc, #128]	; (80054a8 <init_test+0x1bc>)
 8005428:	f002 fc02 	bl	8007c30 <puts>
					for(int i = 0; i < 16; i++){
 800542c:	2300      	movs	r3, #0
 800542e:	60bb      	str	r3, [r7, #8]
 8005430:	e004      	b.n	800543c <init_test+0x150>
						rotate_L90();				//16回左90度回転、つまり4周回転
 8005432:	f7ff fc45 	bl	8004cc0 <rotate_L90>
					for(int i = 0; i < 16; i++){
 8005436:	68bb      	ldr	r3, [r7, #8]
 8005438:	3301      	adds	r3, #1
 800543a:	60bb      	str	r3, [r7, #8]
 800543c:	68bb      	ldr	r3, [r7, #8]
 800543e:	2b0f      	cmp	r3, #15
 8005440:	ddf7      	ble.n	8005432 <init_test+0x146>
					}
					break;
 8005442:	e021      	b.n	8005488 <init_test+0x19c>
				case 4:
					//----180度回転----
					printf("Rotate 180.\n");
 8005444:	4819      	ldr	r0, [pc, #100]	; (80054ac <init_test+0x1c0>)
 8005446:	f002 fbf3 	bl	8007c30 <puts>
					for(int i = 0; i < 8; i++){
 800544a:	2300      	movs	r3, #0
 800544c:	607b      	str	r3, [r7, #4]
 800544e:	e004      	b.n	800545a <init_test+0x16e>
						rotate_180();				//8回右180度回転、つまり4周回転
 8005450:	f7ff fcea 	bl	8004e28 <rotate_180>
					for(int i = 0; i < 8; i++){
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	3301      	adds	r3, #1
 8005458:	607b      	str	r3, [r7, #4]
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	2b07      	cmp	r3, #7
 800545e:	ddf7      	ble.n	8005450 <init_test+0x164>
					}
					break;
 8005460:	e012      	b.n	8005488 <init_test+0x19c>
				case 5:
					//----4区画連続走行----
					printf("4 Section, Forward, Continuous.\n");
 8005462:	4813      	ldr	r0, [pc, #76]	; (80054b0 <init_test+0x1c4>)
 8005464:	f002 fbe4 	bl	8007c30 <puts>
					half_sectionA();				//半区画のパルス分加速しながら走行
 8005468:	f7ff fb1e 	bl	8004aa8 <half_sectionA>
					for(int i = 0; i < 4-1; i++){
 800546c:	2300      	movs	r3, #0
 800546e:	603b      	str	r3, [r7, #0]
 8005470:	e004      	b.n	800547c <init_test+0x190>
						one_sectionU();			//一区画のパルス分等速走行
 8005472:	f7ff fb59 	bl	8004b28 <one_sectionU>
					for(int i = 0; i < 4-1; i++){
 8005476:	683b      	ldr	r3, [r7, #0]
 8005478:	3301      	adds	r3, #1
 800547a:	603b      	str	r3, [r7, #0]
 800547c:	683b      	ldr	r3, [r7, #0]
 800547e:	2b02      	cmp	r3, #2
 8005480:	ddf7      	ble.n	8005472 <init_test+0x186>
					}
					half_sectionD();				//半区画のパルス分減速しながら走行。走行後は停止する
 8005482:	f7ff fb31 	bl	8004ae8 <half_sectionD>
					break;
 8005486:	bf00      	nop
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 8005488:	e739      	b.n	80052fe <init_test+0x12>
 800548a:	bf00      	nop
 800548c:	08008d84 	.word	0x08008d84
 8005490:	20000994 	.word	0x20000994
 8005494:	08008da0 	.word	0x08008da0
 8005498:	40020000 	.word	0x40020000
 800549c:	08008dac 	.word	0x08008dac
 80054a0:	08008dbc 	.word	0x08008dbc
 80054a4:	08008de0 	.word	0x08008de0
 80054a8:	08008dec 	.word	0x08008dec
 80054ac:	08008df8 	.word	0x08008df8
 80054b0:	08008e04 	.word	0x08008e04

080054b4 <slalom_test>:
//slalom_test
//aスラローム走行テスト
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void slalom_test(void){
 80054b4:	b580      	push	{r7, lr}
 80054b6:	b086      	sub	sp, #24
 80054b8:	af00      	add	r7, sp, #0

	int mode = 0;
 80054ba:	2300      	movs	r3, #0
 80054bc:	617b      	str	r3, [r7, #20]
	printf("Test Slalom Run, Mode : %d\n", mode);
 80054be:	6979      	ldr	r1, [r7, #20]
 80054c0:	4868      	ldr	r0, [pc, #416]	; (8005664 <slalom_test+0x1b0>)
 80054c2:	f002 fb41 	bl	8007b48 <iprintf>

	while(1){
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 80054c6:	697b      	ldr	r3, [r7, #20]
 80054c8:	b2db      	uxtb	r3, r3
 80054ca:	f003 0301 	and.w	r3, r3, #1
 80054ce:	b2d8      	uxtb	r0, r3
 80054d0:	697b      	ldr	r3, [r7, #20]
 80054d2:	b2db      	uxtb	r3, r3
 80054d4:	f003 0302 	and.w	r3, r3, #2
 80054d8:	b2d9      	uxtb	r1, r3
 80054da:	697b      	ldr	r3, [r7, #20]
 80054dc:	b2db      	uxtb	r3, r3
 80054de:	f003 0304 	and.w	r3, r3, #4
 80054e2:	b2db      	uxtb	r3, r3
 80054e4:	461a      	mov	r2, r3
 80054e6:	f001 ff05 	bl	80072f4 <led_write>
		  if(dist_r >= 20){
 80054ea:	4b5f      	ldr	r3, [pc, #380]	; (8005668 <slalom_test+0x1b4>)
 80054ec:	edd3 7a00 	vldr	s15, [r3]
 80054f0:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 80054f4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80054f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80054fc:	db0f      	blt.n	800551e <slalom_test+0x6a>
			  mode++;
 80054fe:	697b      	ldr	r3, [r7, #20]
 8005500:	3301      	adds	r3, #1
 8005502:	617b      	str	r3, [r7, #20]
			  dist_r = 0;
 8005504:	4b58      	ldr	r3, [pc, #352]	; (8005668 <slalom_test+0x1b4>)
 8005506:	f04f 0200 	mov.w	r2, #0
 800550a:	601a      	str	r2, [r3, #0]
			  if(mode > 7){
 800550c:	697b      	ldr	r3, [r7, #20]
 800550e:	2b07      	cmp	r3, #7
 8005510:	dd01      	ble.n	8005516 <slalom_test+0x62>
				  mode = 0;
 8005512:	2300      	movs	r3, #0
 8005514:	617b      	str	r3, [r7, #20]
			  }
			  printf("Mode : %d\n", mode);
 8005516:	6979      	ldr	r1, [r7, #20]
 8005518:	4854      	ldr	r0, [pc, #336]	; (800566c <slalom_test+0x1b8>)
 800551a:	f002 fb15 	bl	8007b48 <iprintf>
			  //buzzer(pitagola2[mode-1][0], pitagola2[mode-1][1]);
			  //buzzer(pitagola[2][0], pitagola[2][1]);
		  }
		  if(dist_r <= -20){
 800551e:	4b52      	ldr	r3, [pc, #328]	; (8005668 <slalom_test+0x1b4>)
 8005520:	edd3 7a00 	vldr	s15, [r3]
 8005524:	eebb 7a04 	vmov.f32	s14, #180	; 0xc1a00000 -20.0
 8005528:	eef4 7ac7 	vcmpe.f32	s15, s14
 800552c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005530:	d80f      	bhi.n	8005552 <slalom_test+0x9e>
			  mode--;
 8005532:	697b      	ldr	r3, [r7, #20]
 8005534:	3b01      	subs	r3, #1
 8005536:	617b      	str	r3, [r7, #20]
			  dist_r = 0;
 8005538:	4b4b      	ldr	r3, [pc, #300]	; (8005668 <slalom_test+0x1b4>)
 800553a:	f04f 0200 	mov.w	r2, #0
 800553e:	601a      	str	r2, [r3, #0]
			  if(mode < 0){
 8005540:	697b      	ldr	r3, [r7, #20]
 8005542:	2b00      	cmp	r3, #0
 8005544:	da01      	bge.n	800554a <slalom_test+0x96>
				  mode = 7;
 8005546:	2307      	movs	r3, #7
 8005548:	617b      	str	r3, [r7, #20]
			  }
			  printf("Mode : %d\n", mode);
 800554a:	6979      	ldr	r1, [r7, #20]
 800554c:	4847      	ldr	r0, [pc, #284]	; (800566c <slalom_test+0x1b8>)
 800554e:	f002 fafb 	bl	8007b48 <iprintf>
			  //buzzer(pitagola2[mode-1][0], pitagola2[mode-1][1]);
			  //buzzer(pitagola[2][0], pitagola[2][1]);
		  }
		  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET){
 8005552:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005556:	4846      	ldr	r0, [pc, #280]	; (8005670 <slalom_test+0x1bc>)
 8005558:	f7fc fbc0 	bl	8001cdc <HAL_GPIO_ReadPin>
 800555c:	4603      	mov	r3, r0
 800555e:	2b00      	cmp	r3, #0
 8005560:	d1b1      	bne.n	80054c6 <slalom_test+0x12>
			  HAL_Delay(50);
 8005562:	2032      	movs	r0, #50	; 0x32
 8005564:	f7fb fd32 	bl	8000fcc <HAL_Delay>
			  while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET);
 8005568:	bf00      	nop
 800556a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800556e:	4840      	ldr	r0, [pc, #256]	; (8005670 <slalom_test+0x1bc>)
 8005570:	f7fc fbb4 	bl	8001cdc <HAL_GPIO_ReadPin>
 8005574:	4603      	mov	r3, r0
 8005576:	2b00      	cmp	r3, #0
 8005578:	d0f7      	beq.n	800556a <slalom_test+0xb6>
			  switch(mode){
 800557a:	697b      	ldr	r3, [r7, #20]
 800557c:	2b07      	cmp	r3, #7
 800557e:	d8a2      	bhi.n	80054c6 <slalom_test+0x12>
 8005580:	a201      	add	r2, pc, #4	; (adr r2, 8005588 <slalom_test+0xd4>)
 8005582:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005586:	bf00      	nop
 8005588:	080055a9 	.word	0x080055a9
 800558c:	080055b1 	.word	0x080055b1
 8005590:	080055cf 	.word	0x080055cf
 8005594:	080055ed 	.word	0x080055ed
 8005598:	08005613 	.word	0x08005613
 800559c:	0800563d 	.word	0x0800563d
 80055a0:	080054c7 	.word	0x080054c7
 80055a4:	080054c7 	.word	0x080054c7
				case 0:
					//----a尻当て----
					printf("Set Position.\n");
 80055a8:	4832      	ldr	r0, [pc, #200]	; (8005674 <slalom_test+0x1c0>)
 80055aa:	f002 fb41 	bl	8007c30 <puts>
					//set_position(0);
					break;
 80055ae:	e058      	b.n	8005662 <slalom_test+0x1ae>
				case 1:
					//----slalom右折----
					printf("slalom turn right .\n");
 80055b0:	4831      	ldr	r0, [pc, #196]	; (8005678 <slalom_test+0x1c4>)
 80055b2:	f002 fb3d 	bl	8007c30 <puts>
					for(int i = 0; i < 4; i++){
 80055b6:	2300      	movs	r3, #0
 80055b8:	613b      	str	r3, [r7, #16]
 80055ba:	e004      	b.n	80055c6 <slalom_test+0x112>
						slalom_R90();	//一区画のパルス分デフォルトインターバルで走行
 80055bc:	f7ff fce8 	bl	8004f90 <slalom_R90>
					for(int i = 0; i < 4; i++){
 80055c0:	693b      	ldr	r3, [r7, #16]
 80055c2:	3301      	adds	r3, #1
 80055c4:	613b      	str	r3, [r7, #16]
 80055c6:	693b      	ldr	r3, [r7, #16]
 80055c8:	2b03      	cmp	r3, #3
 80055ca:	ddf7      	ble.n	80055bc <slalom_test+0x108>
					}
					break;
 80055cc:	e049      	b.n	8005662 <slalom_test+0x1ae>
				case 2:
					//----slalom左折----
					printf("slalom turn left .\n");
 80055ce:	482b      	ldr	r0, [pc, #172]	; (800567c <slalom_test+0x1c8>)
 80055d0:	f002 fb2e 	bl	8007c30 <puts>
					for(int i = 0; i < 4	; i++){
 80055d4:	2300      	movs	r3, #0
 80055d6:	60fb      	str	r3, [r7, #12]
 80055d8:	e004      	b.n	80055e4 <slalom_test+0x130>
						slalom_L90();				//16回右90度回転、つまり4周回転
 80055da:	f7ff fdb1 	bl	8005140 <slalom_L90>
					for(int i = 0; i < 4	; i++){
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	3301      	adds	r3, #1
 80055e2:	60fb      	str	r3, [r7, #12]
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	2b03      	cmp	r3, #3
 80055e8:	ddf7      	ble.n	80055da <slalom_test+0x126>
					}
					break;
 80055ea:	e03a      	b.n	8005662 <slalom_test+0x1ae>
				case 3:
					//----slalom右折----
					printf("slalom turn right .\n");
 80055ec:	4822      	ldr	r0, [pc, #136]	; (8005678 <slalom_test+0x1c4>)
 80055ee:	f002 fb1f 	bl	8007c30 <puts>
					for(int i = 0; i < 8; i++){
 80055f2:	2300      	movs	r3, #0
 80055f4:	60bb      	str	r3, [r7, #8]
 80055f6:	e008      	b.n	800560a <slalom_test+0x156>
						half_sectionA();
 80055f8:	f7ff fa56 	bl	8004aa8 <half_sectionA>
						slalom_R90();	//一区画のパルス分デフォルトインターバルで走行
 80055fc:	f7ff fcc8 	bl	8004f90 <slalom_R90>
						half_sectionD();
 8005600:	f7ff fa72 	bl	8004ae8 <half_sectionD>
					for(int i = 0; i < 8; i++){
 8005604:	68bb      	ldr	r3, [r7, #8]
 8005606:	3301      	adds	r3, #1
 8005608:	60bb      	str	r3, [r7, #8]
 800560a:	68bb      	ldr	r3, [r7, #8]
 800560c:	2b07      	cmp	r3, #7
 800560e:	ddf3      	ble.n	80055f8 <slalom_test+0x144>
					}
					break;
 8005610:	e027      	b.n	8005662 <slalom_test+0x1ae>
				case 4:
					//----slalom左折----
					printf("slalom turn left .\n");
 8005612:	481a      	ldr	r0, [pc, #104]	; (800567c <slalom_test+0x1c8>)
 8005614:	f002 fb0c 	bl	8007c30 <puts>
					for(int i = 0; i < 8; i++){
 8005618:	2300      	movs	r3, #0
 800561a:	607b      	str	r3, [r7, #4]
 800561c:	e00a      	b.n	8005634 <slalom_test+0x180>
						half_sectionA();
 800561e:	f7ff fa43 	bl	8004aa8 <half_sectionA>
						slalom_L90();				//16回右90度回転、つまり4周回転
 8005622:	f7ff fd8d 	bl	8005140 <slalom_L90>
						half_sectionD();
 8005626:	f7ff fa5f 	bl	8004ae8 <half_sectionD>
						rotate_180();				//8回右180度回転、つまり4周回転
 800562a:	f7ff fbfd 	bl	8004e28 <rotate_180>
					for(int i = 0; i < 8; i++){
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	3301      	adds	r3, #1
 8005632:	607b      	str	r3, [r7, #4]
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	2b07      	cmp	r3, #7
 8005638:	ddf1      	ble.n	800561e <slalom_test+0x16a>
					}
					break;
 800563a:	e012      	b.n	8005662 <slalom_test+0x1ae>
				case 5:
					//----4区画連続走行----
					printf("4 Section, Forward, Continuous.\n");
 800563c:	4810      	ldr	r0, [pc, #64]	; (8005680 <slalom_test+0x1cc>)
 800563e:	f002 faf7 	bl	8007c30 <puts>
					half_sectionA();				//半区画のパルス分加速しながら走行
 8005642:	f7ff fa31 	bl	8004aa8 <half_sectionA>
					for(int i = 0; i < 4-1; i++){
 8005646:	2300      	movs	r3, #0
 8005648:	603b      	str	r3, [r7, #0]
 800564a:	e004      	b.n	8005656 <slalom_test+0x1a2>
						one_sectionU();			//一区画のパルス分等速走行
 800564c:	f7ff fa6c 	bl	8004b28 <one_sectionU>
					for(int i = 0; i < 4-1; i++){
 8005650:	683b      	ldr	r3, [r7, #0]
 8005652:	3301      	adds	r3, #1
 8005654:	603b      	str	r3, [r7, #0]
 8005656:	683b      	ldr	r3, [r7, #0]
 8005658:	2b02      	cmp	r3, #2
 800565a:	ddf7      	ble.n	800564c <slalom_test+0x198>
					}
					half_sectionD();				//半区画のパルス分減速しながら走行。走行後は停止する
 800565c:	f7ff fa44 	bl	8004ae8 <half_sectionD>
					break;
 8005660:	bf00      	nop
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 8005662:	e730      	b.n	80054c6 <slalom_test+0x12>
 8005664:	08008e24 	.word	0x08008e24
 8005668:	20000994 	.word	0x20000994
 800566c:	08008da0 	.word	0x08008da0
 8005670:	40020000 	.word	0x40020000
 8005674:	08008dac 	.word	0x08008dac
 8005678:	08008e40 	.word	0x08008e40
 800567c:	08008e54 	.word	0x08008e54
 8005680:	08008e04 	.word	0x08008e04

08005684 <test_select>:
		}
	}
}


void test_select(void){
 8005684:	b580      	push	{r7, lr}
 8005686:	b082      	sub	sp, #8
 8005688:	af00      	add	r7, sp, #0
	int mode = 0;
 800568a:	2300      	movs	r3, #0
 800568c:	607b      	str	r3, [r7, #4]
	printf("Test Select, Mode : %d\n", mode);
 800568e:	6879      	ldr	r1, [r7, #4]
 8005690:	4834      	ldr	r0, [pc, #208]	; (8005764 <test_select+0xe0>)
 8005692:	f002 fa59 	bl	8007b48 <iprintf>

	while(1){
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	b2db      	uxtb	r3, r3
 800569a:	f003 0301 	and.w	r3, r3, #1
 800569e:	b2d8      	uxtb	r0, r3
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	b2db      	uxtb	r3, r3
 80056a4:	f003 0302 	and.w	r3, r3, #2
 80056a8:	b2d9      	uxtb	r1, r3
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	b2db      	uxtb	r3, r3
 80056ae:	f003 0304 	and.w	r3, r3, #4
 80056b2:	b2db      	uxtb	r3, r3
 80056b4:	461a      	mov	r2, r3
 80056b6:	f001 fe1d 	bl	80072f4 <led_write>
		  if(dist_r >= 20){
 80056ba:	4b2b      	ldr	r3, [pc, #172]	; (8005768 <test_select+0xe4>)
 80056bc:	edd3 7a00 	vldr	s15, [r3]
 80056c0:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 80056c4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80056c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80056cc:	db0f      	blt.n	80056ee <test_select+0x6a>
			  mode++;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	3301      	adds	r3, #1
 80056d2:	607b      	str	r3, [r7, #4]
			  dist_r = 0;
 80056d4:	4b24      	ldr	r3, [pc, #144]	; (8005768 <test_select+0xe4>)
 80056d6:	f04f 0200 	mov.w	r2, #0
 80056da:	601a      	str	r2, [r3, #0]
			  if(mode > 7){
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	2b07      	cmp	r3, #7
 80056e0:	dd01      	ble.n	80056e6 <test_select+0x62>
				  mode = 0;
 80056e2:	2300      	movs	r3, #0
 80056e4:	607b      	str	r3, [r7, #4]
			  }
			  printf("Mode : %d\n", mode);
 80056e6:	6879      	ldr	r1, [r7, #4]
 80056e8:	4820      	ldr	r0, [pc, #128]	; (800576c <test_select+0xe8>)
 80056ea:	f002 fa2d 	bl	8007b48 <iprintf>
			  //buzzer(pitagola2[mode-1][0], pitagola2[mode-1][1]);
			  //buzzer(pitagola[2][0], pitagola[2][1]);
		  }
		  if(dist_r <= -20){
 80056ee:	4b1e      	ldr	r3, [pc, #120]	; (8005768 <test_select+0xe4>)
 80056f0:	edd3 7a00 	vldr	s15, [r3]
 80056f4:	eebb 7a04 	vmov.f32	s14, #180	; 0xc1a00000 -20.0
 80056f8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80056fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005700:	d80f      	bhi.n	8005722 <test_select+0x9e>
			  mode--;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	3b01      	subs	r3, #1
 8005706:	607b      	str	r3, [r7, #4]
			  dist_r = 0;
 8005708:	4b17      	ldr	r3, [pc, #92]	; (8005768 <test_select+0xe4>)
 800570a:	f04f 0200 	mov.w	r2, #0
 800570e:	601a      	str	r2, [r3, #0]
			  if(mode < 0){
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	2b00      	cmp	r3, #0
 8005714:	da01      	bge.n	800571a <test_select+0x96>
				  mode = 7;
 8005716:	2307      	movs	r3, #7
 8005718:	607b      	str	r3, [r7, #4]
			  }
			  printf("Mode : %d\n", mode);
 800571a:	6879      	ldr	r1, [r7, #4]
 800571c:	4813      	ldr	r0, [pc, #76]	; (800576c <test_select+0xe8>)
 800571e:	f002 fa13 	bl	8007b48 <iprintf>
			  //buzzer(pitagola2[mode-1][0], pitagola2[mode-1][1]);
			  //buzzer(pitagola[2][0], pitagola[2][1]);
		  }
		  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET){
 8005722:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005726:	4812      	ldr	r0, [pc, #72]	; (8005770 <test_select+0xec>)
 8005728:	f7fc fad8 	bl	8001cdc <HAL_GPIO_ReadPin>
 800572c:	4603      	mov	r3, r0
 800572e:	2b00      	cmp	r3, #0
 8005730:	d1b1      	bne.n	8005696 <test_select+0x12>
			  HAL_Delay(50);
 8005732:	2032      	movs	r0, #50	; 0x32
 8005734:	f7fb fc4a 	bl	8000fcc <HAL_Delay>
			  while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET);
 8005738:	bf00      	nop
 800573a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800573e:	480c      	ldr	r0, [pc, #48]	; (8005770 <test_select+0xec>)
 8005740:	f7fc facc 	bl	8001cdc <HAL_GPIO_ReadPin>
 8005744:	4603      	mov	r3, r0
 8005746:	2b00      	cmp	r3, #0
 8005748:	d0f7      	beq.n	800573a <test_select+0xb6>
			  switch(mode){
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	2b01      	cmp	r3, #1
 800574e:	d002      	beq.n	8005756 <test_select+0xd2>
 8005750:	2b02      	cmp	r3, #2
 8005752:	d003      	beq.n	800575c <test_select+0xd8>
 8005754:	e005      	b.n	8005762 <test_select+0xde>
				case 1:
					init_test();
 8005756:	f7ff fdc9 	bl	80052ec <init_test>
					break;
 800575a:	e002      	b.n	8005762 <test_select+0xde>

				case 2:
					slalom_test();
 800575c:	f7ff feaa 	bl	80054b4 <slalom_test>
					break;
 8005760:	bf00      	nop
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 8005762:	e798      	b.n	8005696 <test_select+0x12>
 8005764:	08008e68 	.word	0x08008e68
 8005768:	20000994 	.word	0x20000994
 800576c:	08008da0 	.word	0x08008da0
 8005770:	40020000 	.word	0x40020000

08005774 <gyro_init>:
#include "global.h"

SPI_HandleTypeDef hspi3;


void gyro_init(void){
 8005774:	b580      	push	{r7, lr}
 8005776:	b082      	sub	sp, #8
 8005778:	af00      	add	r7, sp, #0
  uint8_t who_am_i;

  HAL_Delay(100); // wait start up
 800577a:	2064      	movs	r0, #100	; 0x64
 800577c:	f7fb fc26 	bl	8000fcc <HAL_Delay>
  who_am_i = read_byte(WHO_AM_I); // 1. read who am i
 8005780:	2075      	movs	r0, #117	; 0x75
 8005782:	f000 f82f 	bl	80057e4 <read_byte>
 8005786:	4603      	mov	r3, r0
 8005788:	71fb      	strb	r3, [r7, #7]
  printf("0x%x\r\n",who_am_i); // 2. check who am i value
 800578a:	79fb      	ldrb	r3, [r7, #7]
 800578c:	4619      	mov	r1, r3
 800578e:	4813      	ldr	r0, [pc, #76]	; (80057dc <gyro_init+0x68>)
 8005790:	f002 f9da 	bl	8007b48 <iprintf>

  // 2. error check
  if (who_am_i != 0x98){
 8005794:	79fb      	ldrb	r3, [r7, #7]
 8005796:	2b98      	cmp	r3, #152	; 0x98
 8005798:	d003      	beq.n	80057a2 <gyro_init+0x2e>
    while(1){
      printf( "gyro_error\r");
 800579a:	4811      	ldr	r0, [pc, #68]	; (80057e0 <gyro_init+0x6c>)
 800579c:	f002 f9d4 	bl	8007b48 <iprintf>
 80057a0:	e7fb      	b.n	800579a <gyro_init+0x26>
    }
  }

  HAL_Delay(50); // wait
 80057a2:	2032      	movs	r0, #50	; 0x32
 80057a4:	f7fb fc12 	bl	8000fcc <HAL_Delay>
  write_byte(PWR_MGMT_1, 0x00); // 3. set pwr_might
 80057a8:	2100      	movs	r1, #0
 80057aa:	206b      	movs	r0, #107	; 0x6b
 80057ac:	f000 f846 	bl	800583c <write_byte>

  HAL_Delay(50);
 80057b0:	2032      	movs	r0, #50	; 0x32
 80057b2:	f7fb fc0b 	bl	8000fcc <HAL_Delay>
  write_byte(CONFIG, 0x00); // 4. set config
 80057b6:	2100      	movs	r1, #0
 80057b8:	201a      	movs	r0, #26
 80057ba:	f000 f83f 	bl	800583c <write_byte>

  HAL_Delay(50);
 80057be:	2032      	movs	r0, #50	; 0x32
 80057c0:	f7fb fc04 	bl	8000fcc <HAL_Delay>
  write_byte(GYRO_CONFIG, 0x18); // 5. set gyro config
 80057c4:	2118      	movs	r1, #24
 80057c6:	201b      	movs	r0, #27
 80057c8:	f000 f838 	bl	800583c <write_byte>

  HAL_Delay(50);
 80057cc:	2032      	movs	r0, #50	; 0x32
 80057ce:	f7fb fbfd 	bl	8000fcc <HAL_Delay>
}
 80057d2:	bf00      	nop
 80057d4:	3708      	adds	r7, #8
 80057d6:	46bd      	mov	sp, r7
 80057d8:	bd80      	pop	{r7, pc}
 80057da:	bf00      	nop
 80057dc:	08008e80 	.word	0x08008e80
 80057e0:	08008e88 	.word	0x08008e88

080057e4 <read_byte>:


uint8_t read_byte(uint8_t reg){
 80057e4:	b580      	push	{r7, lr}
 80057e6:	b084      	sub	sp, #16
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	4603      	mov	r3, r0
 80057ec:	71fb      	strb	r3, [r7, #7]
  uint8_t ret,val;
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET ); //cs = Low;
 80057ee:	2200      	movs	r2, #0
 80057f0:	2104      	movs	r1, #4
 80057f2:	4810      	ldr	r0, [pc, #64]	; (8005834 <read_byte+0x50>)
 80057f4:	f7fc fa8a 	bl	8001d0c <HAL_GPIO_WritePin>
  ret = reg | 0x80;  // MSB = 1
 80057f8:	79fb      	ldrb	r3, [r7, #7]
 80057fa:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80057fe:	b2db      	uxtb	r3, r3
 8005800:	73fb      	strb	r3, [r7, #15]
  HAL_SPI_Transmit(&hspi3, &ret,1,100); // sent 1byte(address)
 8005802:	f107 010f 	add.w	r1, r7, #15
 8005806:	2364      	movs	r3, #100	; 0x64
 8005808:	2201      	movs	r2, #1
 800580a:	480b      	ldr	r0, [pc, #44]	; (8005838 <read_byte+0x54>)
 800580c:	f7fc ff06 	bl	800261c <HAL_SPI_Transmit>
  HAL_SPI_Receive(&hspi3,&val,1,100); // read 1byte(read data)
 8005810:	f107 010e 	add.w	r1, r7, #14
 8005814:	2364      	movs	r3, #100	; 0x64
 8005816:	2201      	movs	r2, #1
 8005818:	4807      	ldr	r0, [pc, #28]	; (8005838 <read_byte+0x54>)
 800581a:	f7fd f833 	bl	8002884 <HAL_SPI_Receive>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_SET );  //cs = High;
 800581e:	2201      	movs	r2, #1
 8005820:	2104      	movs	r1, #4
 8005822:	4804      	ldr	r0, [pc, #16]	; (8005834 <read_byte+0x50>)
 8005824:	f7fc fa72 	bl	8001d0c <HAL_GPIO_WritePin>
  return val;
 8005828:	7bbb      	ldrb	r3, [r7, #14]
}
 800582a:	4618      	mov	r0, r3
 800582c:	3710      	adds	r7, #16
 800582e:	46bd      	mov	sp, r7
 8005830:	bd80      	pop	{r7, pc}
 8005832:	bf00      	nop
 8005834:	40020c00 	.word	0x40020c00
 8005838:	20000100 	.word	0x20000100

0800583c <write_byte>:


void write_byte(uint8_t reg, uint8_t val){
 800583c:	b580      	push	{r7, lr}
 800583e:	b084      	sub	sp, #16
 8005840:	af00      	add	r7, sp, #0
 8005842:	4603      	mov	r3, r0
 8005844:	460a      	mov	r2, r1
 8005846:	71fb      	strb	r3, [r7, #7]
 8005848:	4613      	mov	r3, r2
 800584a:	71bb      	strb	r3, [r7, #6]
  uint8_t ret;
  ret = reg & 0x7F ; // MSB = 0
 800584c:	79fb      	ldrb	r3, [r7, #7]
 800584e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005852:	b2db      	uxtb	r3, r3
 8005854:	73fb      	strb	r3, [r7, #15]
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET); // cs = Low;
 8005856:	2200      	movs	r2, #0
 8005858:	2104      	movs	r1, #4
 800585a:	480c      	ldr	r0, [pc, #48]	; (800588c <write_byte+0x50>)
 800585c:	f7fc fa56 	bl	8001d0c <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi3, &ret,1,100); // sent 1byte(address)
 8005860:	f107 010f 	add.w	r1, r7, #15
 8005864:	2364      	movs	r3, #100	; 0x64
 8005866:	2201      	movs	r2, #1
 8005868:	4809      	ldr	r0, [pc, #36]	; (8005890 <write_byte+0x54>)
 800586a:	f7fc fed7 	bl	800261c <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi3, &val,1,100); // read 1byte(write data)
 800586e:	1db9      	adds	r1, r7, #6
 8005870:	2364      	movs	r3, #100	; 0x64
 8005872:	2201      	movs	r2, #1
 8005874:	4806      	ldr	r0, [pc, #24]	; (8005890 <write_byte+0x54>)
 8005876:	f7fc fed1 	bl	800261c <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_SET); // cs = High;
 800587a:	2201      	movs	r2, #1
 800587c:	2104      	movs	r1, #4
 800587e:	4803      	ldr	r0, [pc, #12]	; (800588c <write_byte+0x50>)
 8005880:	f7fc fa44 	bl	8001d0c <HAL_GPIO_WritePin>
}
 8005884:	bf00      	nop
 8005886:	3710      	adds	r7, #16
 8005888:	46bd      	mov	sp, r7
 800588a:	bd80      	pop	{r7, pc}
 800588c:	40020c00 	.word	0x40020c00
 8005890:	20000100 	.word	0x20000100
 8005894:	00000000 	.word	0x00000000

08005898 <gyro_read_z>:


float gyro_read_z(void){
 8005898:	b590      	push	{r4, r7, lr}
 800589a:	b083      	sub	sp, #12
 800589c:	af00      	add	r7, sp, #0
  int16_t gyro_z;
  float omega;

  // H:8bit shift, Link h and l
  gyro_z = (int16_t)((int16_t)(read_byte(GYRO_ZOUT_H) << 8) | read_byte(GYRO_ZOUT_L));
 800589e:	2047      	movs	r0, #71	; 0x47
 80058a0:	f7ff ffa0 	bl	80057e4 <read_byte>
 80058a4:	4603      	mov	r3, r0
 80058a6:	021b      	lsls	r3, r3, #8
 80058a8:	b21c      	sxth	r4, r3
 80058aa:	2048      	movs	r0, #72	; 0x48
 80058ac:	f7ff ff9a 	bl	80057e4 <read_byte>
 80058b0:	4603      	mov	r3, r0
 80058b2:	b21b      	sxth	r3, r3
 80058b4:	4323      	orrs	r3, r4
 80058b6:	80fb      	strh	r3, [r7, #6]

  omega = (float)(gyro_z / GYRO_FACTOR+1.15); // dps to deg/sec
 80058b8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80058bc:	4618      	mov	r0, r3
 80058be:	f7fa fe29 	bl	8000514 <__aeabi_i2d>
 80058c2:	a30f      	add	r3, pc, #60	; (adr r3, 8005900 <gyro_read_z+0x68>)
 80058c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058c8:	f7fa ffb8 	bl	800083c <__aeabi_ddiv>
 80058cc:	4603      	mov	r3, r0
 80058ce:	460c      	mov	r4, r1
 80058d0:	4618      	mov	r0, r3
 80058d2:	4621      	mov	r1, r4
 80058d4:	a30c      	add	r3, pc, #48	; (adr r3, 8005908 <gyro_read_z+0x70>)
 80058d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058da:	f7fa fccf 	bl	800027c <__adddf3>
 80058de:	4603      	mov	r3, r0
 80058e0:	460c      	mov	r4, r1
 80058e2:	4618      	mov	r0, r3
 80058e4:	4621      	mov	r1, r4
 80058e6:	f7fb f92f 	bl	8000b48 <__aeabi_d2f>
 80058ea:	4603      	mov	r3, r0
 80058ec:	603b      	str	r3, [r7, #0]
  return omega;
 80058ee:	683b      	ldr	r3, [r7, #0]
 80058f0:	ee07 3a90 	vmov	s15, r3
}
 80058f4:	eeb0 0a67 	vmov.f32	s0, s15
 80058f8:	370c      	adds	r7, #12
 80058fa:	46bd      	mov	sp, r7
 80058fc:	bd90      	pop	{r4, r7, pc}
 80058fe:	bf00      	nop
 8005900:	66666666 	.word	0x66666666
 8005904:	40306666 	.word	0x40306666
 8005908:	66666666 	.word	0x66666666
 800590c:	3ff26666 	.word	0x3ff26666

08005910 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int __io_putchar(int c) {
 8005910:	b580      	push	{r7, lr}
 8005912:	b084      	sub	sp, #16
 8005914:	af00      	add	r7, sp, #0
 8005916:	6078      	str	r0, [r7, #4]
  if( c == '\n' ) {
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	2b0a      	cmp	r3, #10
 800591c:	d108      	bne.n	8005930 <__io_putchar+0x20>
    int _c = '\r';
 800591e:	230d      	movs	r3, #13
 8005920:	60fb      	str	r3, [r7, #12]
    HAL_UART_Transmit(&huart1, &_c, 1, 1);
 8005922:	f107 010c 	add.w	r1, r7, #12
 8005926:	2301      	movs	r3, #1
 8005928:	2201      	movs	r2, #1
 800592a:	4807      	ldr	r0, [pc, #28]	; (8005948 <__io_putchar+0x38>)
 800592c:	f7fe fb55 	bl	8003fda <HAL_UART_Transmit>
  }
  HAL_UART_Transmit(&huart1, &c, 1, 1);
 8005930:	1d39      	adds	r1, r7, #4
 8005932:	2301      	movs	r3, #1
 8005934:	2201      	movs	r2, #1
 8005936:	4804      	ldr	r0, [pc, #16]	; (8005948 <__io_putchar+0x38>)
 8005938:	f7fe fb4f 	bl	8003fda <HAL_UART_Transmit>
  return 0;
 800593c:	2300      	movs	r3, #0
}
 800593e:	4618      	mov	r0, r3
 8005940:	3710      	adds	r7, #16
 8005942:	46bd      	mov	sp, r7
 8005944:	bd80      	pop	{r7, pc}
 8005946:	bf00      	nop
 8005948:	20000a04 	.word	0x20000a04
 800594c:	00000000 	.word	0x00000000

08005950 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005950:	b5b0      	push	{r4, r5, r7, lr}
 8005952:	b08c      	sub	sp, #48	; 0x30
 8005954:	af00      	add	r7, sp, #0
 8005956:	6078      	str	r0, [r7, #4]
	TIM_OC_InitTypeDef ConfigOC;
	ConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005958:	2360      	movs	r3, #96	; 0x60
 800595a:	60fb      	str	r3, [r7, #12]
	ConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800595c:	2300      	movs	r3, #0
 800595e:	617b      	str	r3, [r7, #20]
	ConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005960:	2300      	movs	r3, #0
 8005962:	61fb      	str	r3, [r7, #28]

	if(htim == &htim6){
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	4aae      	ldr	r2, [pc, #696]	; (8005c20 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8005968:	4293      	cmp	r3, r2
 800596a:	f040 8715 	bne.w	8006798 <HAL_TIM_PeriodElapsedCallback+0xe48>
		cnt_l = TIM4 -> CNT;
 800596e:	4bad      	ldr	r3, [pc, #692]	; (8005c24 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8005970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005972:	ee07 3a90 	vmov	s15, r3
 8005976:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800597a:	4bab      	ldr	r3, [pc, #684]	; (8005c28 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 800597c:	edc3 7a00 	vstr	s15, [r3]
		cnt_r = TIM8 -> CNT;
 8005980:	4baa      	ldr	r3, [pc, #680]	; (8005c2c <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8005982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005984:	ee07 3a90 	vmov	s15, r3
 8005988:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800598c:	4ba8      	ldr	r3, [pc, #672]	; (8005c30 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 800598e:	edc3 7a00 	vstr	s15, [r3]
		if(cnt_l > 40000) cnt_l = cnt_l - 65535;
 8005992:	4ba5      	ldr	r3, [pc, #660]	; (8005c28 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8005994:	edd3 7a00 	vldr	s15, [r3]
 8005998:	ed9f 7aa6 	vldr	s14, [pc, #664]	; 8005c34 <HAL_TIM_PeriodElapsedCallback+0x2e4>
 800599c:	eef4 7ac7 	vcmpe.f32	s15, s14
 80059a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80059a4:	dd09      	ble.n	80059ba <HAL_TIM_PeriodElapsedCallback+0x6a>
 80059a6:	4ba0      	ldr	r3, [pc, #640]	; (8005c28 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 80059a8:	edd3 7a00 	vldr	s15, [r3]
 80059ac:	ed9f 7aa2 	vldr	s14, [pc, #648]	; 8005c38 <HAL_TIM_PeriodElapsedCallback+0x2e8>
 80059b0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80059b4:	4b9c      	ldr	r3, [pc, #624]	; (8005c28 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 80059b6:	edc3 7a00 	vstr	s15, [r3]
		if(cnt_r > 40000) cnt_r = cnt_r - 65535;
 80059ba:	4b9d      	ldr	r3, [pc, #628]	; (8005c30 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 80059bc:	edd3 7a00 	vldr	s15, [r3]
 80059c0:	ed9f 7a9c 	vldr	s14, [pc, #624]	; 8005c34 <HAL_TIM_PeriodElapsedCallback+0x2e4>
 80059c4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80059c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80059cc:	dd09      	ble.n	80059e2 <HAL_TIM_PeriodElapsedCallback+0x92>
 80059ce:	4b98      	ldr	r3, [pc, #608]	; (8005c30 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 80059d0:	edd3 7a00 	vldr	s15, [r3]
 80059d4:	ed9f 7a98 	vldr	s14, [pc, #608]	; 8005c38 <HAL_TIM_PeriodElapsedCallback+0x2e8>
 80059d8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80059dc:	4b94      	ldr	r3, [pc, #592]	; (8005c30 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 80059de:	edc3 7a00 	vstr	s15, [r3]
		cnt_r = cnt_r * -1;
 80059e2:	4b93      	ldr	r3, [pc, #588]	; (8005c30 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 80059e4:	edd3 7a00 	vldr	s15, [r3]
 80059e8:	eef1 7a67 	vneg.f32	s15, s15
 80059ec:	4b90      	ldr	r3, [pc, #576]	; (8005c30 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 80059ee:	edc3 7a00 	vstr	s15, [r3]

		dist_l = dist_l + cnt_l * (DIAMETER * M_PI * 11 / 40 / 4096 / 4);
 80059f2:	4b92      	ldr	r3, [pc, #584]	; (8005c3c <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	4618      	mov	r0, r3
 80059f8:	f7fa fd9e 	bl	8000538 <__aeabi_f2d>
 80059fc:	4604      	mov	r4, r0
 80059fe:	460d      	mov	r5, r1
 8005a00:	4b89      	ldr	r3, [pc, #548]	; (8005c28 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	4618      	mov	r0, r3
 8005a06:	f7fa fd97 	bl	8000538 <__aeabi_f2d>
 8005a0a:	a381      	add	r3, pc, #516	; (adr r3, 8005c10 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8005a0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a10:	f7fa fdea 	bl	80005e8 <__aeabi_dmul>
 8005a14:	4602      	mov	r2, r0
 8005a16:	460b      	mov	r3, r1
 8005a18:	4620      	mov	r0, r4
 8005a1a:	4629      	mov	r1, r5
 8005a1c:	f7fa fc2e 	bl	800027c <__adddf3>
 8005a20:	4603      	mov	r3, r0
 8005a22:	460c      	mov	r4, r1
 8005a24:	4618      	mov	r0, r3
 8005a26:	4621      	mov	r1, r4
 8005a28:	f7fb f88e 	bl	8000b48 <__aeabi_d2f>
 8005a2c:	4602      	mov	r2, r0
 8005a2e:	4b83      	ldr	r3, [pc, #524]	; (8005c3c <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8005a30:	601a      	str	r2, [r3, #0]
		dist_r = dist_r + cnt_r * (DIAMETER * M_PI * 11 / 40 / 4096 / 4);
 8005a32:	4b83      	ldr	r3, [pc, #524]	; (8005c40 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	4618      	mov	r0, r3
 8005a38:	f7fa fd7e 	bl	8000538 <__aeabi_f2d>
 8005a3c:	4604      	mov	r4, r0
 8005a3e:	460d      	mov	r5, r1
 8005a40:	4b7b      	ldr	r3, [pc, #492]	; (8005c30 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	4618      	mov	r0, r3
 8005a46:	f7fa fd77 	bl	8000538 <__aeabi_f2d>
 8005a4a:	a371      	add	r3, pc, #452	; (adr r3, 8005c10 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8005a4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a50:	f7fa fdca 	bl	80005e8 <__aeabi_dmul>
 8005a54:	4602      	mov	r2, r0
 8005a56:	460b      	mov	r3, r1
 8005a58:	4620      	mov	r0, r4
 8005a5a:	4629      	mov	r1, r5
 8005a5c:	f7fa fc0e 	bl	800027c <__adddf3>
 8005a60:	4603      	mov	r3, r0
 8005a62:	460c      	mov	r4, r1
 8005a64:	4618      	mov	r0, r3
 8005a66:	4621      	mov	r1, r4
 8005a68:	f7fb f86e 	bl	8000b48 <__aeabi_d2f>
 8005a6c:	4602      	mov	r2, r0
 8005a6e:	4b74      	ldr	r3, [pc, #464]	; (8005c40 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8005a70:	601a      	str	r2, [r3, #0]

		speed_l = cnt_l * (DIAMETER * M_PI * 11 / 40 / 4096 / 4) / 0.001;
 8005a72:	4b6d      	ldr	r3, [pc, #436]	; (8005c28 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	4618      	mov	r0, r3
 8005a78:	f7fa fd5e 	bl	8000538 <__aeabi_f2d>
 8005a7c:	a364      	add	r3, pc, #400	; (adr r3, 8005c10 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8005a7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a82:	f7fa fdb1 	bl	80005e8 <__aeabi_dmul>
 8005a86:	4603      	mov	r3, r0
 8005a88:	460c      	mov	r4, r1
 8005a8a:	4618      	mov	r0, r3
 8005a8c:	4621      	mov	r1, r4
 8005a8e:	a362      	add	r3, pc, #392	; (adr r3, 8005c18 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8005a90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a94:	f7fa fed2 	bl	800083c <__aeabi_ddiv>
 8005a98:	4603      	mov	r3, r0
 8005a9a:	460c      	mov	r4, r1
 8005a9c:	4618      	mov	r0, r3
 8005a9e:	4621      	mov	r1, r4
 8005aa0:	f7fb f852 	bl	8000b48 <__aeabi_d2f>
 8005aa4:	4602      	mov	r2, r0
 8005aa6:	4b67      	ldr	r3, [pc, #412]	; (8005c44 <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 8005aa8:	601a      	str	r2, [r3, #0]
		speed_r = cnt_r * (DIAMETER * M_PI * 11 / 40 / 4096 / 4) / 0.001;
 8005aaa:	4b61      	ldr	r3, [pc, #388]	; (8005c30 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	4618      	mov	r0, r3
 8005ab0:	f7fa fd42 	bl	8000538 <__aeabi_f2d>
 8005ab4:	a356      	add	r3, pc, #344	; (adr r3, 8005c10 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8005ab6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005aba:	f7fa fd95 	bl	80005e8 <__aeabi_dmul>
 8005abe:	4603      	mov	r3, r0
 8005ac0:	460c      	mov	r4, r1
 8005ac2:	4618      	mov	r0, r3
 8005ac4:	4621      	mov	r1, r4
 8005ac6:	a354      	add	r3, pc, #336	; (adr r3, 8005c18 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8005ac8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005acc:	f7fa feb6 	bl	800083c <__aeabi_ddiv>
 8005ad0:	4603      	mov	r3, r0
 8005ad2:	460c      	mov	r4, r1
 8005ad4:	4618      	mov	r0, r3
 8005ad6:	4621      	mov	r1, r4
 8005ad8:	f7fb f836 	bl	8000b48 <__aeabi_d2f>
 8005adc:	4602      	mov	r2, r0
 8005ade:	4b5a      	ldr	r3, [pc, #360]	; (8005c48 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 8005ae0:	601a      	str	r2, [r3, #0]

		TIM4 -> CNT = 0;
 8005ae2:	4b50      	ldr	r3, [pc, #320]	; (8005c24 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8005ae4:	2200      	movs	r2, #0
 8005ae6:	625a      	str	r2, [r3, #36]	; 0x24
		TIM8 -> CNT = 0;
 8005ae8:	4b50      	ldr	r3, [pc, #320]	; (8005c2c <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8005aea:	2200      	movs	r2, #0
 8005aec:	625a      	str	r2, [r3, #36]	; 0x24

		if(MF.FLAG.DRV){
 8005aee:	4b57      	ldr	r3, [pc, #348]	; (8005c4c <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 8005af0:	881b      	ldrh	r3, [r3, #0]
 8005af2:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8005af6:	b2db      	uxtb	r3, r3
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	f000 81af 	beq.w	8005e5c <HAL_TIM_PeriodElapsedCallback+0x50c>
			target_speed_l += accel_l * 0.001;
 8005afe:	4b54      	ldr	r3, [pc, #336]	; (8005c50 <HAL_TIM_PeriodElapsedCallback+0x300>)
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	4618      	mov	r0, r3
 8005b04:	f7fa fd18 	bl	8000538 <__aeabi_f2d>
 8005b08:	a343      	add	r3, pc, #268	; (adr r3, 8005c18 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8005b0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b0e:	f7fa fd6b 	bl	80005e8 <__aeabi_dmul>
 8005b12:	4603      	mov	r3, r0
 8005b14:	460c      	mov	r4, r1
 8005b16:	4625      	mov	r5, r4
 8005b18:	461c      	mov	r4, r3
 8005b1a:	4b4e      	ldr	r3, [pc, #312]	; (8005c54 <HAL_TIM_PeriodElapsedCallback+0x304>)
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	4618      	mov	r0, r3
 8005b20:	f7fa fd0a 	bl	8000538 <__aeabi_f2d>
 8005b24:	4602      	mov	r2, r0
 8005b26:	460b      	mov	r3, r1
 8005b28:	4620      	mov	r0, r4
 8005b2a:	4629      	mov	r1, r5
 8005b2c:	f7fa fba6 	bl	800027c <__adddf3>
 8005b30:	4603      	mov	r3, r0
 8005b32:	460c      	mov	r4, r1
 8005b34:	4618      	mov	r0, r3
 8005b36:	4621      	mov	r1, r4
 8005b38:	f7fb f806 	bl	8000b48 <__aeabi_d2f>
 8005b3c:	4602      	mov	r2, r0
 8005b3e:	4b45      	ldr	r3, [pc, #276]	; (8005c54 <HAL_TIM_PeriodElapsedCallback+0x304>)
 8005b40:	601a      	str	r2, [r3, #0]
			target_speed_l = max(min(target_speed_l, speed_max_l), speed_min_l);
 8005b42:	4b44      	ldr	r3, [pc, #272]	; (8005c54 <HAL_TIM_PeriodElapsedCallback+0x304>)
 8005b44:	ed93 7a00 	vldr	s14, [r3]
 8005b48:	4b43      	ldr	r3, [pc, #268]	; (8005c58 <HAL_TIM_PeriodElapsedCallback+0x308>)
 8005b4a:	edd3 7a00 	vldr	s15, [r3]
 8005b4e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005b52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b56:	dd03      	ble.n	8005b60 <HAL_TIM_PeriodElapsedCallback+0x210>
 8005b58:	4b3f      	ldr	r3, [pc, #252]	; (8005c58 <HAL_TIM_PeriodElapsedCallback+0x308>)
 8005b5a:	edd3 7a00 	vldr	s15, [r3]
 8005b5e:	e002      	b.n	8005b66 <HAL_TIM_PeriodElapsedCallback+0x216>
 8005b60:	4b3c      	ldr	r3, [pc, #240]	; (8005c54 <HAL_TIM_PeriodElapsedCallback+0x304>)
 8005b62:	edd3 7a00 	vldr	s15, [r3]
 8005b66:	4b3d      	ldr	r3, [pc, #244]	; (8005c5c <HAL_TIM_PeriodElapsedCallback+0x30c>)
 8005b68:	ed93 7a00 	vldr	s14, [r3]
 8005b6c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005b70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b74:	dd10      	ble.n	8005b98 <HAL_TIM_PeriodElapsedCallback+0x248>
 8005b76:	4b37      	ldr	r3, [pc, #220]	; (8005c54 <HAL_TIM_PeriodElapsedCallback+0x304>)
 8005b78:	ed93 7a00 	vldr	s14, [r3]
 8005b7c:	4b36      	ldr	r3, [pc, #216]	; (8005c58 <HAL_TIM_PeriodElapsedCallback+0x308>)
 8005b7e:	edd3 7a00 	vldr	s15, [r3]
 8005b82:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005b86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b8a:	dd02      	ble.n	8005b92 <HAL_TIM_PeriodElapsedCallback+0x242>
 8005b8c:	4b32      	ldr	r3, [pc, #200]	; (8005c58 <HAL_TIM_PeriodElapsedCallback+0x308>)
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	e004      	b.n	8005b9c <HAL_TIM_PeriodElapsedCallback+0x24c>
 8005b92:	4b30      	ldr	r3, [pc, #192]	; (8005c54 <HAL_TIM_PeriodElapsedCallback+0x304>)
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	e001      	b.n	8005b9c <HAL_TIM_PeriodElapsedCallback+0x24c>
 8005b98:	4b30      	ldr	r3, [pc, #192]	; (8005c5c <HAL_TIM_PeriodElapsedCallback+0x30c>)
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	4a2d      	ldr	r2, [pc, #180]	; (8005c54 <HAL_TIM_PeriodElapsedCallback+0x304>)
 8005b9e:	6013      	str	r3, [r2, #0]
			epsilon_l = target_speed_l - speed_l;
 8005ba0:	4b2c      	ldr	r3, [pc, #176]	; (8005c54 <HAL_TIM_PeriodElapsedCallback+0x304>)
 8005ba2:	ed93 7a00 	vldr	s14, [r3]
 8005ba6:	4b27      	ldr	r3, [pc, #156]	; (8005c44 <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 8005ba8:	edd3 7a00 	vldr	s15, [r3]
 8005bac:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005bb0:	4b2b      	ldr	r3, [pc, #172]	; (8005c60 <HAL_TIM_PeriodElapsedCallback+0x310>)
 8005bb2:	edc3 7a00 	vstr	s15, [r3]
			pulse_l = Kp * epsilon_l;
 8005bb6:	4b2a      	ldr	r3, [pc, #168]	; (8005c60 <HAL_TIM_PeriodElapsedCallback+0x310>)
 8005bb8:	edd3 7a00 	vldr	s15, [r3]
 8005bbc:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8005bc0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005bc4:	4b27      	ldr	r3, [pc, #156]	; (8005c64 <HAL_TIM_PeriodElapsedCallback+0x314>)
 8005bc6:	edc3 7a00 	vstr	s15, [r3]
			if(pulse_l > 0){
 8005bca:	4b26      	ldr	r3, [pc, #152]	; (8005c64 <HAL_TIM_PeriodElapsedCallback+0x314>)
 8005bcc:	edd3 7a00 	vldr	s15, [r3]
 8005bd0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005bd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005bd8:	dd48      	ble.n	8005c6c <HAL_TIM_PeriodElapsedCallback+0x31c>
				drive_dir(0, 0);
 8005bda:	2100      	movs	r1, #0
 8005bdc:	2000      	movs	r0, #0
 8005bde:	f7fe fd25 	bl	800462c <drive_dir>
				ConfigOC.Pulse = pulse_l;
 8005be2:	4b20      	ldr	r3, [pc, #128]	; (8005c64 <HAL_TIM_PeriodElapsedCallback+0x314>)
 8005be4:	edd3 7a00 	vldr	s15, [r3]
 8005be8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005bec:	ee17 3a90 	vmov	r3, s15
 8005bf0:	613b      	str	r3, [r7, #16]
				HAL_TIM_PWM_ConfigChannel(&htim2, &ConfigOC, TIM_CHANNEL_1);
 8005bf2:	f107 030c 	add.w	r3, r7, #12
 8005bf6:	2200      	movs	r2, #0
 8005bf8:	4619      	mov	r1, r3
 8005bfa:	481b      	ldr	r0, [pc, #108]	; (8005c68 <HAL_TIM_PeriodElapsedCallback+0x318>)
 8005bfc:	f7fd fc92 	bl	8003524 <HAL_TIM_PWM_ConfigChannel>
				HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_1);
 8005c00:	2100      	movs	r1, #0
 8005c02:	4819      	ldr	r0, [pc, #100]	; (8005c68 <HAL_TIM_PeriodElapsedCallback+0x318>)
 8005c04:	f7fd fa7e 	bl	8003104 <HAL_TIM_PWM_Start>
 8005c08:	e051      	b.n	8005cae <HAL_TIM_PeriodElapsedCallback+0x35e>
 8005c0a:	bf00      	nop
 8005c0c:	f3af 8000 	nop.w
 8005c10:	c1239813 	.word	0xc1239813
 8005c14:	3f54e844 	.word	0x3f54e844
 8005c18:	d2f1a9fc 	.word	0xd2f1a9fc
 8005c1c:	3f50624d 	.word	0x3f50624d
 8005c20:	20000a50 	.word	0x20000a50
 8005c24:	40000800 	.word	0x40000800
 8005c28:	20000264 	.word	0x20000264
 8005c2c:	40010400 	.word	0x40010400
 8005c30:	20000a48 	.word	0x20000a48
 8005c34:	471c4000 	.word	0x471c4000
 8005c38:	477fff00 	.word	0x477fff00
 8005c3c:	20000e10 	.word	0x20000e10
 8005c40:	20000994 	.word	0x20000994
 8005c44:	20000998 	.word	0x20000998
 8005c48:	20000270 	.word	0x20000270
 8005c4c:	20000dfc 	.word	0x20000dfc
 8005c50:	20000bf0 	.word	0x20000bf0
 8005c54:	20000a94 	.word	0x20000a94
 8005c58:	20000624 	.word	0x20000624
 8005c5c:	200009f4 	.word	0x200009f4
 8005c60:	20000a00 	.word	0x20000a00
 8005c64:	20000a44 	.word	0x20000a44
 8005c68:	20000aac 	.word	0x20000aac
			}
			else if(pulse_l < 0){
 8005c6c:	4bbe      	ldr	r3, [pc, #760]	; (8005f68 <HAL_TIM_PeriodElapsedCallback+0x618>)
 8005c6e:	edd3 7a00 	vldr	s15, [r3]
 8005c72:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005c76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c7a:	d518      	bpl.n	8005cae <HAL_TIM_PeriodElapsedCallback+0x35e>
				drive_dir(0, 1);
 8005c7c:	2101      	movs	r1, #1
 8005c7e:	2000      	movs	r0, #0
 8005c80:	f7fe fcd4 	bl	800462c <drive_dir>
				ConfigOC.Pulse = -pulse_l;
 8005c84:	4bb8      	ldr	r3, [pc, #736]	; (8005f68 <HAL_TIM_PeriodElapsedCallback+0x618>)
 8005c86:	edd3 7a00 	vldr	s15, [r3]
 8005c8a:	eef1 7a67 	vneg.f32	s15, s15
 8005c8e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005c92:	ee17 3a90 	vmov	r3, s15
 8005c96:	613b      	str	r3, [r7, #16]
				HAL_TIM_PWM_ConfigChannel(&htim2, &ConfigOC, TIM_CHANNEL_1);
 8005c98:	f107 030c 	add.w	r3, r7, #12
 8005c9c:	2200      	movs	r2, #0
 8005c9e:	4619      	mov	r1, r3
 8005ca0:	48b2      	ldr	r0, [pc, #712]	; (8005f6c <HAL_TIM_PeriodElapsedCallback+0x61c>)
 8005ca2:	f7fd fc3f 	bl	8003524 <HAL_TIM_PWM_ConfigChannel>
				HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_1);
 8005ca6:	2100      	movs	r1, #0
 8005ca8:	48b0      	ldr	r0, [pc, #704]	; (8005f6c <HAL_TIM_PeriodElapsedCallback+0x61c>)
 8005caa:	f7fd fa2b 	bl	8003104 <HAL_TIM_PWM_Start>
			}

			target_speed_r += accel_r * 0.001;
 8005cae:	4bb0      	ldr	r3, [pc, #704]	; (8005f70 <HAL_TIM_PeriodElapsedCallback+0x620>)
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	4618      	mov	r0, r3
 8005cb4:	f7fa fc40 	bl	8000538 <__aeabi_f2d>
 8005cb8:	a3a7      	add	r3, pc, #668	; (adr r3, 8005f58 <HAL_TIM_PeriodElapsedCallback+0x608>)
 8005cba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cbe:	f7fa fc93 	bl	80005e8 <__aeabi_dmul>
 8005cc2:	4603      	mov	r3, r0
 8005cc4:	460c      	mov	r4, r1
 8005cc6:	4625      	mov	r5, r4
 8005cc8:	461c      	mov	r4, r3
 8005cca:	4baa      	ldr	r3, [pc, #680]	; (8005f74 <HAL_TIM_PeriodElapsedCallback+0x624>)
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	4618      	mov	r0, r3
 8005cd0:	f7fa fc32 	bl	8000538 <__aeabi_f2d>
 8005cd4:	4602      	mov	r2, r0
 8005cd6:	460b      	mov	r3, r1
 8005cd8:	4620      	mov	r0, r4
 8005cda:	4629      	mov	r1, r5
 8005cdc:	f7fa face 	bl	800027c <__adddf3>
 8005ce0:	4603      	mov	r3, r0
 8005ce2:	460c      	mov	r4, r1
 8005ce4:	4618      	mov	r0, r3
 8005ce6:	4621      	mov	r1, r4
 8005ce8:	f7fa ff2e 	bl	8000b48 <__aeabi_d2f>
 8005cec:	4602      	mov	r2, r0
 8005cee:	4ba1      	ldr	r3, [pc, #644]	; (8005f74 <HAL_TIM_PeriodElapsedCallback+0x624>)
 8005cf0:	601a      	str	r2, [r3, #0]
			target_speed_r = max(min(target_speed_r, speed_max_r), speed_min_r);
 8005cf2:	4ba0      	ldr	r3, [pc, #640]	; (8005f74 <HAL_TIM_PeriodElapsedCallback+0x624>)
 8005cf4:	ed93 7a00 	vldr	s14, [r3]
 8005cf8:	4b9f      	ldr	r3, [pc, #636]	; (8005f78 <HAL_TIM_PeriodElapsedCallback+0x628>)
 8005cfa:	edd3 7a00 	vldr	s15, [r3]
 8005cfe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005d02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d06:	dd03      	ble.n	8005d10 <HAL_TIM_PeriodElapsedCallback+0x3c0>
 8005d08:	4b9b      	ldr	r3, [pc, #620]	; (8005f78 <HAL_TIM_PeriodElapsedCallback+0x628>)
 8005d0a:	edd3 7a00 	vldr	s15, [r3]
 8005d0e:	e002      	b.n	8005d16 <HAL_TIM_PeriodElapsedCallback+0x3c6>
 8005d10:	4b98      	ldr	r3, [pc, #608]	; (8005f74 <HAL_TIM_PeriodElapsedCallback+0x624>)
 8005d12:	edd3 7a00 	vldr	s15, [r3]
 8005d16:	4b99      	ldr	r3, [pc, #612]	; (8005f7c <HAL_TIM_PeriodElapsedCallback+0x62c>)
 8005d18:	ed93 7a00 	vldr	s14, [r3]
 8005d1c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005d20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d24:	dd10      	ble.n	8005d48 <HAL_TIM_PeriodElapsedCallback+0x3f8>
 8005d26:	4b93      	ldr	r3, [pc, #588]	; (8005f74 <HAL_TIM_PeriodElapsedCallback+0x624>)
 8005d28:	ed93 7a00 	vldr	s14, [r3]
 8005d2c:	4b92      	ldr	r3, [pc, #584]	; (8005f78 <HAL_TIM_PeriodElapsedCallback+0x628>)
 8005d2e:	edd3 7a00 	vldr	s15, [r3]
 8005d32:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005d36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d3a:	dd02      	ble.n	8005d42 <HAL_TIM_PeriodElapsedCallback+0x3f2>
 8005d3c:	4b8e      	ldr	r3, [pc, #568]	; (8005f78 <HAL_TIM_PeriodElapsedCallback+0x628>)
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	e004      	b.n	8005d4c <HAL_TIM_PeriodElapsedCallback+0x3fc>
 8005d42:	4b8c      	ldr	r3, [pc, #560]	; (8005f74 <HAL_TIM_PeriodElapsedCallback+0x624>)
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	e001      	b.n	8005d4c <HAL_TIM_PeriodElapsedCallback+0x3fc>
 8005d48:	4b8c      	ldr	r3, [pc, #560]	; (8005f7c <HAL_TIM_PeriodElapsedCallback+0x62c>)
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	4a89      	ldr	r2, [pc, #548]	; (8005f74 <HAL_TIM_PeriodElapsedCallback+0x624>)
 8005d4e:	6013      	str	r3, [r2, #0]
			epsilon_r = target_speed_r - speed_r;
 8005d50:	4b88      	ldr	r3, [pc, #544]	; (8005f74 <HAL_TIM_PeriodElapsedCallback+0x624>)
 8005d52:	ed93 7a00 	vldr	s14, [r3]
 8005d56:	4b8a      	ldr	r3, [pc, #552]	; (8005f80 <HAL_TIM_PeriodElapsedCallback+0x630>)
 8005d58:	edd3 7a00 	vldr	s15, [r3]
 8005d5c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005d60:	4b88      	ldr	r3, [pc, #544]	; (8005f84 <HAL_TIM_PeriodElapsedCallback+0x634>)
 8005d62:	edc3 7a00 	vstr	s15, [r3]
			pulse_r = Kp * epsilon_r;
 8005d66:	4b87      	ldr	r3, [pc, #540]	; (8005f84 <HAL_TIM_PeriodElapsedCallback+0x634>)
 8005d68:	edd3 7a00 	vldr	s15, [r3]
 8005d6c:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8005d70:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005d74:	4b84      	ldr	r3, [pc, #528]	; (8005f88 <HAL_TIM_PeriodElapsedCallback+0x638>)
 8005d76:	edc3 7a00 	vstr	s15, [r3]
			if(pulse_r > 0){
 8005d7a:	4b83      	ldr	r3, [pc, #524]	; (8005f88 <HAL_TIM_PeriodElapsedCallback+0x638>)
 8005d7c:	edd3 7a00 	vldr	s15, [r3]
 8005d80:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005d84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d88:	dd17      	ble.n	8005dba <HAL_TIM_PeriodElapsedCallback+0x46a>
				drive_dir(1, 0);
 8005d8a:	2100      	movs	r1, #0
 8005d8c:	2001      	movs	r0, #1
 8005d8e:	f7fe fc4d 	bl	800462c <drive_dir>
				ConfigOC.Pulse = pulse_r;
 8005d92:	4b7d      	ldr	r3, [pc, #500]	; (8005f88 <HAL_TIM_PeriodElapsedCallback+0x638>)
 8005d94:	edd3 7a00 	vldr	s15, [r3]
 8005d98:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005d9c:	ee17 3a90 	vmov	r3, s15
 8005da0:	613b      	str	r3, [r7, #16]
				HAL_TIM_PWM_ConfigChannel(&htim2, &ConfigOC, TIM_CHANNEL_4);
 8005da2:	f107 030c 	add.w	r3, r7, #12
 8005da6:	220c      	movs	r2, #12
 8005da8:	4619      	mov	r1, r3
 8005daa:	4870      	ldr	r0, [pc, #448]	; (8005f6c <HAL_TIM_PeriodElapsedCallback+0x61c>)
 8005dac:	f7fd fbba 	bl	8003524 <HAL_TIM_PWM_ConfigChannel>
				HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_4);
 8005db0:	210c      	movs	r1, #12
 8005db2:	486e      	ldr	r0, [pc, #440]	; (8005f6c <HAL_TIM_PeriodElapsedCallback+0x61c>)
 8005db4:	f7fd f9a6 	bl	8003104 <HAL_TIM_PWM_Start>
 8005db8:	e020      	b.n	8005dfc <HAL_TIM_PeriodElapsedCallback+0x4ac>
			}
			else if(pulse_r < 0){
 8005dba:	4b73      	ldr	r3, [pc, #460]	; (8005f88 <HAL_TIM_PeriodElapsedCallback+0x638>)
 8005dbc:	edd3 7a00 	vldr	s15, [r3]
 8005dc0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005dc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005dc8:	d518      	bpl.n	8005dfc <HAL_TIM_PeriodElapsedCallback+0x4ac>
				drive_dir(1, 1);
 8005dca:	2101      	movs	r1, #1
 8005dcc:	2001      	movs	r0, #1
 8005dce:	f7fe fc2d 	bl	800462c <drive_dir>
				ConfigOC.Pulse = -pulse_r;
 8005dd2:	4b6d      	ldr	r3, [pc, #436]	; (8005f88 <HAL_TIM_PeriodElapsedCallback+0x638>)
 8005dd4:	edd3 7a00 	vldr	s15, [r3]
 8005dd8:	eef1 7a67 	vneg.f32	s15, s15
 8005ddc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005de0:	ee17 3a90 	vmov	r3, s15
 8005de4:	613b      	str	r3, [r7, #16]
				HAL_TIM_PWM_ConfigChannel(&htim2, &ConfigOC, TIM_CHANNEL_4);
 8005de6:	f107 030c 	add.w	r3, r7, #12
 8005dea:	220c      	movs	r2, #12
 8005dec:	4619      	mov	r1, r3
 8005dee:	485f      	ldr	r0, [pc, #380]	; (8005f6c <HAL_TIM_PeriodElapsedCallback+0x61c>)
 8005df0:	f7fd fb98 	bl	8003524 <HAL_TIM_PWM_ConfigChannel>
				HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_4);
 8005df4:	210c      	movs	r1, #12
 8005df6:	485d      	ldr	r0, [pc, #372]	; (8005f6c <HAL_TIM_PeriodElapsedCallback+0x61c>)
 8005df8:	f7fd f984 	bl	8003104 <HAL_TIM_PWM_Start>
			}
			if(cnt >= 5 && MF.FLAG.LOG){
 8005dfc:	4b63      	ldr	r3, [pc, #396]	; (8005f8c <HAL_TIM_PeriodElapsedCallback+0x63c>)
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	2b04      	cmp	r3, #4
 8005e02:	dd33      	ble.n	8005e6c <HAL_TIM_PeriodElapsedCallback+0x51c>
 8005e04:	4b62      	ldr	r3, [pc, #392]	; (8005f90 <HAL_TIM_PeriodElapsedCallback+0x640>)
 8005e06:	881b      	ldrh	r3, [r3, #0]
 8005e08:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8005e0c:	b2db      	uxtb	r3, r3
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d02c      	beq.n	8005e6c <HAL_TIM_PeriodElapsedCallback+0x51c>
				cnt = 0;
 8005e12:	4b5e      	ldr	r3, [pc, #376]	; (8005f8c <HAL_TIM_PeriodElapsedCallback+0x63c>)
 8005e14:	2200      	movs	r2, #0
 8005e16:	601a      	str	r2, [r3, #0]
				if(get_cnt < log_allay){
 8005e18:	4b5e      	ldr	r3, [pc, #376]	; (8005f94 <HAL_TIM_PeriodElapsedCallback+0x644>)
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	2bc7      	cmp	r3, #199	; 0xc7
 8005e1e:	dc25      	bgt.n	8005e6c <HAL_TIM_PeriodElapsedCallback+0x51c>
					get_speed_l[get_cnt] = speed_l;
 8005e20:	4b5d      	ldr	r3, [pc, #372]	; (8005f98 <HAL_TIM_PeriodElapsedCallback+0x648>)
 8005e22:	edd3 7a00 	vldr	s15, [r3]
 8005e26:	4b5b      	ldr	r3, [pc, #364]	; (8005f94 <HAL_TIM_PeriodElapsedCallback+0x644>)
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005e2e:	ee17 1a90 	vmov	r1, s15
 8005e32:	4a5a      	ldr	r2, [pc, #360]	; (8005f9c <HAL_TIM_PeriodElapsedCallback+0x64c>)
 8005e34:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					get_speed_r[get_cnt] = speed_r;
 8005e38:	4b51      	ldr	r3, [pc, #324]	; (8005f80 <HAL_TIM_PeriodElapsedCallback+0x630>)
 8005e3a:	edd3 7a00 	vldr	s15, [r3]
 8005e3e:	4b55      	ldr	r3, [pc, #340]	; (8005f94 <HAL_TIM_PeriodElapsedCallback+0x644>)
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005e46:	ee17 1a90 	vmov	r1, s15
 8005e4a:	4a55      	ldr	r2, [pc, #340]	; (8005fa0 <HAL_TIM_PeriodElapsedCallback+0x650>)
 8005e4c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					get_cnt++;
 8005e50:	4b50      	ldr	r3, [pc, #320]	; (8005f94 <HAL_TIM_PeriodElapsedCallback+0x644>)
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	3301      	adds	r3, #1
 8005e56:	4a4f      	ldr	r2, [pc, #316]	; (8005f94 <HAL_TIM_PeriodElapsedCallback+0x644>)
 8005e58:	6013      	str	r3, [r2, #0]
 8005e5a:	e007      	b.n	8005e6c <HAL_TIM_PeriodElapsedCallback+0x51c>
				}
			}
		}else{
			drive_dir(0, 2);
 8005e5c:	2102      	movs	r1, #2
 8005e5e:	2000      	movs	r0, #0
 8005e60:	f7fe fbe4 	bl	800462c <drive_dir>
			drive_dir(1, 2);
 8005e64:	2102      	movs	r1, #2
 8005e66:	2001      	movs	r0, #1
 8005e68:	f7fe fbe0 	bl	800462c <drive_dir>
		}

		//gyro interrupt
		degree_z += gyro_read_z() * 0.001;
 8005e6c:	f7ff fd14 	bl	8005898 <gyro_read_z>
 8005e70:	ee10 3a10 	vmov	r3, s0
 8005e74:	4618      	mov	r0, r3
 8005e76:	f7fa fb5f 	bl	8000538 <__aeabi_f2d>
 8005e7a:	a337      	add	r3, pc, #220	; (adr r3, 8005f58 <HAL_TIM_PeriodElapsedCallback+0x608>)
 8005e7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e80:	f7fa fbb2 	bl	80005e8 <__aeabi_dmul>
 8005e84:	4603      	mov	r3, r0
 8005e86:	460c      	mov	r4, r1
 8005e88:	4625      	mov	r5, r4
 8005e8a:	461c      	mov	r4, r3
 8005e8c:	4b45      	ldr	r3, [pc, #276]	; (8005fa4 <HAL_TIM_PeriodElapsedCallback+0x654>)
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	4618      	mov	r0, r3
 8005e92:	f7fa fb51 	bl	8000538 <__aeabi_f2d>
 8005e96:	4602      	mov	r2, r0
 8005e98:	460b      	mov	r3, r1
 8005e9a:	4620      	mov	r0, r4
 8005e9c:	4629      	mov	r1, r5
 8005e9e:	f7fa f9ed 	bl	800027c <__adddf3>
 8005ea2:	4603      	mov	r3, r0
 8005ea4:	460c      	mov	r4, r1
 8005ea6:	4618      	mov	r0, r3
 8005ea8:	4621      	mov	r1, r4
 8005eaa:	f7fa fe4d 	bl	8000b48 <__aeabi_d2f>
 8005eae:	4602      	mov	r2, r0
 8005eb0:	4b3c      	ldr	r3, [pc, #240]	; (8005fa4 <HAL_TIM_PeriodElapsedCallback+0x654>)
 8005eb2:	601a      	str	r2, [r3, #0]

		if(MF.FLAG.ENKAI){
 8005eb4:	4b36      	ldr	r3, [pc, #216]	; (8005f90 <HAL_TIM_PeriodElapsedCallback+0x640>)
 8005eb6:	881b      	ldrh	r3, [r3, #0]
 8005eb8:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8005ebc:	b2db      	uxtb	r3, r3
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	f000 8153 	beq.w	800616a <HAL_TIM_PeriodElapsedCallback+0x81a>
			target_dist = TREAD*M_PI/360*(degree_z-target_degree_z);
 8005ec4:	4b37      	ldr	r3, [pc, #220]	; (8005fa4 <HAL_TIM_PeriodElapsedCallback+0x654>)
 8005ec6:	ed93 7a00 	vldr	s14, [r3]
 8005eca:	4b37      	ldr	r3, [pc, #220]	; (8005fa8 <HAL_TIM_PeriodElapsedCallback+0x658>)
 8005ecc:	edd3 7a00 	vldr	s15, [r3]
 8005ed0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005ed4:	ee17 0a90 	vmov	r0, s15
 8005ed8:	f7fa fb2e 	bl	8000538 <__aeabi_f2d>
 8005edc:	a320      	add	r3, pc, #128	; (adr r3, 8005f60 <HAL_TIM_PeriodElapsedCallback+0x610>)
 8005ede:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ee2:	f7fa fb81 	bl	80005e8 <__aeabi_dmul>
 8005ee6:	4603      	mov	r3, r0
 8005ee8:	460c      	mov	r4, r1
 8005eea:	4618      	mov	r0, r3
 8005eec:	4621      	mov	r1, r4
 8005eee:	f7fa fe2b 	bl	8000b48 <__aeabi_d2f>
 8005ef2:	4602      	mov	r2, r0
 8005ef4:	4b2d      	ldr	r3, [pc, #180]	; (8005fac <HAL_TIM_PeriodElapsedCallback+0x65c>)
 8005ef6:	601a      	str	r2, [r3, #0]
			if(target_dist > 0){
 8005ef8:	4b2c      	ldr	r3, [pc, #176]	; (8005fac <HAL_TIM_PeriodElapsedCallback+0x65c>)
 8005efa:	edd3 7a00 	vldr	s15, [r3]
 8005efe:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005f02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f06:	dd57      	ble.n	8005fb8 <HAL_TIM_PeriodElapsedCallback+0x668>
				target_speed_l = sqrt(2*accel_l*target_dist);
 8005f08:	4b29      	ldr	r3, [pc, #164]	; (8005fb0 <HAL_TIM_PeriodElapsedCallback+0x660>)
 8005f0a:	edd3 7a00 	vldr	s15, [r3]
 8005f0e:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8005f12:	4b26      	ldr	r3, [pc, #152]	; (8005fac <HAL_TIM_PeriodElapsedCallback+0x65c>)
 8005f14:	edd3 7a00 	vldr	s15, [r3]
 8005f18:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f1c:	ee17 0a90 	vmov	r0, s15
 8005f20:	f7fa fb0a 	bl	8000538 <__aeabi_f2d>
 8005f24:	4603      	mov	r3, r0
 8005f26:	460c      	mov	r4, r1
 8005f28:	ec44 3b10 	vmov	d0, r3, r4
 8005f2c:	f002 fe12 	bl	8008b54 <sqrt>
 8005f30:	ec54 3b10 	vmov	r3, r4, d0
 8005f34:	4618      	mov	r0, r3
 8005f36:	4621      	mov	r1, r4
 8005f38:	f7fa fe06 	bl	8000b48 <__aeabi_d2f>
 8005f3c:	4602      	mov	r2, r0
 8005f3e:	4b1d      	ldr	r3, [pc, #116]	; (8005fb4 <HAL_TIM_PeriodElapsedCallback+0x664>)
 8005f40:	601a      	str	r2, [r3, #0]
				target_speed_r = -1 * target_speed_l;
 8005f42:	4b1c      	ldr	r3, [pc, #112]	; (8005fb4 <HAL_TIM_PeriodElapsedCallback+0x664>)
 8005f44:	edd3 7a00 	vldr	s15, [r3]
 8005f48:	eef1 7a67 	vneg.f32	s15, s15
 8005f4c:	4b09      	ldr	r3, [pc, #36]	; (8005f74 <HAL_TIM_PeriodElapsedCallback+0x624>)
 8005f4e:	edc3 7a00 	vstr	s15, [r3]
 8005f52:	e05e      	b.n	8006012 <HAL_TIM_PeriodElapsedCallback+0x6c2>
 8005f54:	f3af 8000 	nop.w
 8005f58:	d2f1a9fc 	.word	0xd2f1a9fc
 8005f5c:	3f50624d 	.word	0x3f50624d
 8005f60:	d7653223 	.word	0xd7653223
 8005f64:	3fe26e40 	.word	0x3fe26e40
 8005f68:	20000a44 	.word	0x20000a44
 8005f6c:	20000aac 	.word	0x20000aac
 8005f70:	2000098c 	.word	0x2000098c
 8005f74:	20000158 	.word	0x20000158
 8005f78:	2000015c 	.word	0x2000015c
 8005f7c:	20000e00 	.word	0x20000e00
 8005f80:	20000270 	.word	0x20000270
 8005f84:	20000aa4 	.word	0x20000aa4
 8005f88:	20000628 	.word	0x20000628
 8005f8c:	200000e8 	.word	0x200000e8
 8005f90:	20000dfc 	.word	0x20000dfc
 8005f94:	200000ec 	.word	0x200000ec
 8005f98:	20000998 	.word	0x20000998
 8005f9c:	2000062c 	.word	0x2000062c
 8005fa0:	20000304 	.word	0x20000304
 8005fa4:	200009fc 	.word	0x200009fc
 8005fa8:	20000a90 	.word	0x20000a90
 8005fac:	20000e08 	.word	0x20000e08
 8005fb0:	20000bf0 	.word	0x20000bf0
 8005fb4:	20000a94 	.word	0x20000a94
			}else{
				target_speed_l = sqrt(2*accel_l*target_dist*-1)*-1;
 8005fb8:	4b99      	ldr	r3, [pc, #612]	; (8006220 <HAL_TIM_PeriodElapsedCallback+0x8d0>)
 8005fba:	edd3 7a00 	vldr	s15, [r3]
 8005fbe:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8005fc2:	4b98      	ldr	r3, [pc, #608]	; (8006224 <HAL_TIM_PeriodElapsedCallback+0x8d4>)
 8005fc4:	edd3 7a00 	vldr	s15, [r3]
 8005fc8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005fcc:	eef1 7a67 	vneg.f32	s15, s15
 8005fd0:	ee17 3a90 	vmov	r3, s15
 8005fd4:	4618      	mov	r0, r3
 8005fd6:	f7fa faaf 	bl	8000538 <__aeabi_f2d>
 8005fda:	4603      	mov	r3, r0
 8005fdc:	460c      	mov	r4, r1
 8005fde:	ec44 3b10 	vmov	d0, r3, r4
 8005fe2:	f002 fdb7 	bl	8008b54 <sqrt>
 8005fe6:	ec54 3b10 	vmov	r3, r4, d0
 8005fea:	4618      	mov	r0, r3
 8005fec:	4621      	mov	r1, r4
 8005fee:	f7fa fdab 	bl	8000b48 <__aeabi_d2f>
 8005ff2:	4603      	mov	r3, r0
 8005ff4:	ee07 3a90 	vmov	s15, r3
 8005ff8:	eef1 7a67 	vneg.f32	s15, s15
 8005ffc:	4b8a      	ldr	r3, [pc, #552]	; (8006228 <HAL_TIM_PeriodElapsedCallback+0x8d8>)
 8005ffe:	edc3 7a00 	vstr	s15, [r3]
				target_speed_r = -1 * target_speed_l;
 8006002:	4b89      	ldr	r3, [pc, #548]	; (8006228 <HAL_TIM_PeriodElapsedCallback+0x8d8>)
 8006004:	edd3 7a00 	vldr	s15, [r3]
 8006008:	eef1 7a67 	vneg.f32	s15, s15
 800600c:	4b87      	ldr	r3, [pc, #540]	; (800622c <HAL_TIM_PeriodElapsedCallback+0x8dc>)
 800600e:	edc3 7a00 	vstr	s15, [r3]
			}

			epsilon_l = target_speed_l - speed_l;
 8006012:	4b85      	ldr	r3, [pc, #532]	; (8006228 <HAL_TIM_PeriodElapsedCallback+0x8d8>)
 8006014:	ed93 7a00 	vldr	s14, [r3]
 8006018:	4b85      	ldr	r3, [pc, #532]	; (8006230 <HAL_TIM_PeriodElapsedCallback+0x8e0>)
 800601a:	edd3 7a00 	vldr	s15, [r3]
 800601e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006022:	4b84      	ldr	r3, [pc, #528]	; (8006234 <HAL_TIM_PeriodElapsedCallback+0x8e4>)
 8006024:	edc3 7a00 	vstr	s15, [r3]
			pulse_l = Kp * epsilon_l;
 8006028:	4b82      	ldr	r3, [pc, #520]	; (8006234 <HAL_TIM_PeriodElapsedCallback+0x8e4>)
 800602a:	edd3 7a00 	vldr	s15, [r3]
 800602e:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8006032:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006036:	4b80      	ldr	r3, [pc, #512]	; (8006238 <HAL_TIM_PeriodElapsedCallback+0x8e8>)
 8006038:	edc3 7a00 	vstr	s15, [r3]
			if(pulse_l > 0){
 800603c:	4b7e      	ldr	r3, [pc, #504]	; (8006238 <HAL_TIM_PeriodElapsedCallback+0x8e8>)
 800603e:	edd3 7a00 	vldr	s15, [r3]
 8006042:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006046:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800604a:	dd17      	ble.n	800607c <HAL_TIM_PeriodElapsedCallback+0x72c>
				drive_dir(0, 0);
 800604c:	2100      	movs	r1, #0
 800604e:	2000      	movs	r0, #0
 8006050:	f7fe faec 	bl	800462c <drive_dir>
				ConfigOC.Pulse = pulse_l;
 8006054:	4b78      	ldr	r3, [pc, #480]	; (8006238 <HAL_TIM_PeriodElapsedCallback+0x8e8>)
 8006056:	edd3 7a00 	vldr	s15, [r3]
 800605a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800605e:	ee17 3a90 	vmov	r3, s15
 8006062:	613b      	str	r3, [r7, #16]
				HAL_TIM_PWM_ConfigChannel(&htim2, &ConfigOC, TIM_CHANNEL_1);
 8006064:	f107 030c 	add.w	r3, r7, #12
 8006068:	2200      	movs	r2, #0
 800606a:	4619      	mov	r1, r3
 800606c:	4873      	ldr	r0, [pc, #460]	; (800623c <HAL_TIM_PeriodElapsedCallback+0x8ec>)
 800606e:	f7fd fa59 	bl	8003524 <HAL_TIM_PWM_ConfigChannel>
				HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_1);
 8006072:	2100      	movs	r1, #0
 8006074:	4871      	ldr	r0, [pc, #452]	; (800623c <HAL_TIM_PeriodElapsedCallback+0x8ec>)
 8006076:	f7fd f845 	bl	8003104 <HAL_TIM_PWM_Start>
 800607a:	e020      	b.n	80060be <HAL_TIM_PeriodElapsedCallback+0x76e>
			}
			else if(pulse_l < 0){
 800607c:	4b6e      	ldr	r3, [pc, #440]	; (8006238 <HAL_TIM_PeriodElapsedCallback+0x8e8>)
 800607e:	edd3 7a00 	vldr	s15, [r3]
 8006082:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006086:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800608a:	d518      	bpl.n	80060be <HAL_TIM_PeriodElapsedCallback+0x76e>
				drive_dir(0, 1);
 800608c:	2101      	movs	r1, #1
 800608e:	2000      	movs	r0, #0
 8006090:	f7fe facc 	bl	800462c <drive_dir>
				ConfigOC.Pulse = -pulse_l;
 8006094:	4b68      	ldr	r3, [pc, #416]	; (8006238 <HAL_TIM_PeriodElapsedCallback+0x8e8>)
 8006096:	edd3 7a00 	vldr	s15, [r3]
 800609a:	eef1 7a67 	vneg.f32	s15, s15
 800609e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80060a2:	ee17 3a90 	vmov	r3, s15
 80060a6:	613b      	str	r3, [r7, #16]
				HAL_TIM_PWM_ConfigChannel(&htim2, &ConfigOC, TIM_CHANNEL_1);
 80060a8:	f107 030c 	add.w	r3, r7, #12
 80060ac:	2200      	movs	r2, #0
 80060ae:	4619      	mov	r1, r3
 80060b0:	4862      	ldr	r0, [pc, #392]	; (800623c <HAL_TIM_PeriodElapsedCallback+0x8ec>)
 80060b2:	f7fd fa37 	bl	8003524 <HAL_TIM_PWM_ConfigChannel>
				HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_1);
 80060b6:	2100      	movs	r1, #0
 80060b8:	4860      	ldr	r0, [pc, #384]	; (800623c <HAL_TIM_PeriodElapsedCallback+0x8ec>)
 80060ba:	f7fd f823 	bl	8003104 <HAL_TIM_PWM_Start>
			}

			epsilon_r = target_speed_r - speed_r;
 80060be:	4b5b      	ldr	r3, [pc, #364]	; (800622c <HAL_TIM_PeriodElapsedCallback+0x8dc>)
 80060c0:	ed93 7a00 	vldr	s14, [r3]
 80060c4:	4b5e      	ldr	r3, [pc, #376]	; (8006240 <HAL_TIM_PeriodElapsedCallback+0x8f0>)
 80060c6:	edd3 7a00 	vldr	s15, [r3]
 80060ca:	ee77 7a67 	vsub.f32	s15, s14, s15
 80060ce:	4b5d      	ldr	r3, [pc, #372]	; (8006244 <HAL_TIM_PeriodElapsedCallback+0x8f4>)
 80060d0:	edc3 7a00 	vstr	s15, [r3]
			pulse_r = Kp * epsilon_r;
 80060d4:	4b5b      	ldr	r3, [pc, #364]	; (8006244 <HAL_TIM_PeriodElapsedCallback+0x8f4>)
 80060d6:	edd3 7a00 	vldr	s15, [r3]
 80060da:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 80060de:	ee67 7a87 	vmul.f32	s15, s15, s14
 80060e2:	4b59      	ldr	r3, [pc, #356]	; (8006248 <HAL_TIM_PeriodElapsedCallback+0x8f8>)
 80060e4:	edc3 7a00 	vstr	s15, [r3]
			if(pulse_r > 0){
 80060e8:	4b57      	ldr	r3, [pc, #348]	; (8006248 <HAL_TIM_PeriodElapsedCallback+0x8f8>)
 80060ea:	edd3 7a00 	vldr	s15, [r3]
 80060ee:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80060f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80060f6:	dd17      	ble.n	8006128 <HAL_TIM_PeriodElapsedCallback+0x7d8>
				drive_dir(1, 0);
 80060f8:	2100      	movs	r1, #0
 80060fa:	2001      	movs	r0, #1
 80060fc:	f7fe fa96 	bl	800462c <drive_dir>
				ConfigOC.Pulse = pulse_r;
 8006100:	4b51      	ldr	r3, [pc, #324]	; (8006248 <HAL_TIM_PeriodElapsedCallback+0x8f8>)
 8006102:	edd3 7a00 	vldr	s15, [r3]
 8006106:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800610a:	ee17 3a90 	vmov	r3, s15
 800610e:	613b      	str	r3, [r7, #16]
				HAL_TIM_PWM_ConfigChannel(&htim2, &ConfigOC, TIM_CHANNEL_4);
 8006110:	f107 030c 	add.w	r3, r7, #12
 8006114:	220c      	movs	r2, #12
 8006116:	4619      	mov	r1, r3
 8006118:	4848      	ldr	r0, [pc, #288]	; (800623c <HAL_TIM_PeriodElapsedCallback+0x8ec>)
 800611a:	f7fd fa03 	bl	8003524 <HAL_TIM_PWM_ConfigChannel>
				HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_4);
 800611e:	210c      	movs	r1, #12
 8006120:	4846      	ldr	r0, [pc, #280]	; (800623c <HAL_TIM_PeriodElapsedCallback+0x8ec>)
 8006122:	f7fc ffef 	bl	8003104 <HAL_TIM_PWM_Start>
 8006126:	e020      	b.n	800616a <HAL_TIM_PeriodElapsedCallback+0x81a>
			}
			else if(pulse_r < 0){
 8006128:	4b47      	ldr	r3, [pc, #284]	; (8006248 <HAL_TIM_PeriodElapsedCallback+0x8f8>)
 800612a:	edd3 7a00 	vldr	s15, [r3]
 800612e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006132:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006136:	d518      	bpl.n	800616a <HAL_TIM_PeriodElapsedCallback+0x81a>
				drive_dir(1, 1);
 8006138:	2101      	movs	r1, #1
 800613a:	2001      	movs	r0, #1
 800613c:	f7fe fa76 	bl	800462c <drive_dir>
				ConfigOC.Pulse = -pulse_r;
 8006140:	4b41      	ldr	r3, [pc, #260]	; (8006248 <HAL_TIM_PeriodElapsedCallback+0x8f8>)
 8006142:	edd3 7a00 	vldr	s15, [r3]
 8006146:	eef1 7a67 	vneg.f32	s15, s15
 800614a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800614e:	ee17 3a90 	vmov	r3, s15
 8006152:	613b      	str	r3, [r7, #16]
				HAL_TIM_PWM_ConfigChannel(&htim2, &ConfigOC, TIM_CHANNEL_4);
 8006154:	f107 030c 	add.w	r3, r7, #12
 8006158:	220c      	movs	r2, #12
 800615a:	4619      	mov	r1, r3
 800615c:	4837      	ldr	r0, [pc, #220]	; (800623c <HAL_TIM_PeriodElapsedCallback+0x8ec>)
 800615e:	f7fd f9e1 	bl	8003524 <HAL_TIM_PWM_ConfigChannel>
				HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_4);
 8006162:	210c      	movs	r1, #12
 8006164:	4835      	ldr	r0, [pc, #212]	; (800623c <HAL_TIM_PeriodElapsedCallback+0x8ec>)
 8006166:	f7fc ffcd 	bl	8003104 <HAL_TIM_PWM_Start>
			}
		}

		if(MF.FLAG.GYRO){
 800616a:	4b38      	ldr	r3, [pc, #224]	; (800624c <HAL_TIM_PeriodElapsedCallback+0x8fc>)
 800616c:	881b      	ldrh	r3, [r3, #0]
 800616e:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8006172:	b2db      	uxtb	r3, r3
 8006174:	2b00      	cmp	r3, #0
 8006176:	f000 8195 	beq.w	80064a4 <HAL_TIM_PeriodElapsedCallback+0xb54>
			target_omega_z += target_degaccel_z * 0.001;
 800617a:	4b35      	ldr	r3, [pc, #212]	; (8006250 <HAL_TIM_PeriodElapsedCallback+0x900>)
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	4618      	mov	r0, r3
 8006180:	f7fa f9da 	bl	8000538 <__aeabi_f2d>
 8006184:	a324      	add	r3, pc, #144	; (adr r3, 8006218 <HAL_TIM_PeriodElapsedCallback+0x8c8>)
 8006186:	e9d3 2300 	ldrd	r2, r3, [r3]
 800618a:	f7fa fa2d 	bl	80005e8 <__aeabi_dmul>
 800618e:	4603      	mov	r3, r0
 8006190:	460c      	mov	r4, r1
 8006192:	4625      	mov	r5, r4
 8006194:	461c      	mov	r4, r3
 8006196:	4b2f      	ldr	r3, [pc, #188]	; (8006254 <HAL_TIM_PeriodElapsedCallback+0x904>)
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	4618      	mov	r0, r3
 800619c:	f7fa f9cc 	bl	8000538 <__aeabi_f2d>
 80061a0:	4602      	mov	r2, r0
 80061a2:	460b      	mov	r3, r1
 80061a4:	4620      	mov	r0, r4
 80061a6:	4629      	mov	r1, r5
 80061a8:	f7fa f868 	bl	800027c <__adddf3>
 80061ac:	4603      	mov	r3, r0
 80061ae:	460c      	mov	r4, r1
 80061b0:	4618      	mov	r0, r3
 80061b2:	4621      	mov	r1, r4
 80061b4:	f7fa fcc8 	bl	8000b48 <__aeabi_d2f>
 80061b8:	4602      	mov	r2, r0
 80061ba:	4b26      	ldr	r3, [pc, #152]	; (8006254 <HAL_TIM_PeriodElapsedCallback+0x904>)
 80061bc:	601a      	str	r2, [r3, #0]
			target_omega_z = max(min(target_omega_z, omega_max), omega_min);
 80061be:	4b25      	ldr	r3, [pc, #148]	; (8006254 <HAL_TIM_PeriodElapsedCallback+0x904>)
 80061c0:	ed93 7a00 	vldr	s14, [r3]
 80061c4:	4b24      	ldr	r3, [pc, #144]	; (8006258 <HAL_TIM_PeriodElapsedCallback+0x908>)
 80061c6:	edd3 7a00 	vldr	s15, [r3]
 80061ca:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80061ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80061d2:	dd03      	ble.n	80061dc <HAL_TIM_PeriodElapsedCallback+0x88c>
 80061d4:	4b20      	ldr	r3, [pc, #128]	; (8006258 <HAL_TIM_PeriodElapsedCallback+0x908>)
 80061d6:	edd3 7a00 	vldr	s15, [r3]
 80061da:	e002      	b.n	80061e2 <HAL_TIM_PeriodElapsedCallback+0x892>
 80061dc:	4b1d      	ldr	r3, [pc, #116]	; (8006254 <HAL_TIM_PeriodElapsedCallback+0x904>)
 80061de:	edd3 7a00 	vldr	s15, [r3]
 80061e2:	4b1e      	ldr	r3, [pc, #120]	; (800625c <HAL_TIM_PeriodElapsedCallback+0x90c>)
 80061e4:	ed93 7a00 	vldr	s14, [r3]
 80061e8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80061ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80061f0:	dd36      	ble.n	8006260 <HAL_TIM_PeriodElapsedCallback+0x910>
 80061f2:	4b18      	ldr	r3, [pc, #96]	; (8006254 <HAL_TIM_PeriodElapsedCallback+0x904>)
 80061f4:	ed93 7a00 	vldr	s14, [r3]
 80061f8:	4b17      	ldr	r3, [pc, #92]	; (8006258 <HAL_TIM_PeriodElapsedCallback+0x908>)
 80061fa:	edd3 7a00 	vldr	s15, [r3]
 80061fe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006202:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006206:	dd02      	ble.n	800620e <HAL_TIM_PeriodElapsedCallback+0x8be>
 8006208:	4b13      	ldr	r3, [pc, #76]	; (8006258 <HAL_TIM_PeriodElapsedCallback+0x908>)
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	e02a      	b.n	8006264 <HAL_TIM_PeriodElapsedCallback+0x914>
 800620e:	4b11      	ldr	r3, [pc, #68]	; (8006254 <HAL_TIM_PeriodElapsedCallback+0x904>)
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	e027      	b.n	8006264 <HAL_TIM_PeriodElapsedCallback+0x914>
 8006214:	f3af 8000 	nop.w
 8006218:	d2f1a9fc 	.word	0xd2f1a9fc
 800621c:	3f50624d 	.word	0x3f50624d
 8006220:	20000bf0 	.word	0x20000bf0
 8006224:	20000e08 	.word	0x20000e08
 8006228:	20000a94 	.word	0x20000a94
 800622c:	20000158 	.word	0x20000158
 8006230:	20000998 	.word	0x20000998
 8006234:	20000a00 	.word	0x20000a00
 8006238:	20000a44 	.word	0x20000a44
 800623c:	20000aac 	.word	0x20000aac
 8006240:	20000270 	.word	0x20000270
 8006244:	20000aa4 	.word	0x20000aa4
 8006248:	20000628 	.word	0x20000628
 800624c:	20000dfc 	.word	0x20000dfc
 8006250:	200009f8 	.word	0x200009f8
 8006254:	20000160 	.word	0x20000160
 8006258:	20000990 	.word	0x20000990
 800625c:	2000026c 	.word	0x2000026c
 8006260:	4bc3      	ldr	r3, [pc, #780]	; (8006570 <HAL_TIM_PeriodElapsedCallback+0xc20>)
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	4ac3      	ldr	r2, [pc, #780]	; (8006574 <HAL_TIM_PeriodElapsedCallback+0xc24>)
 8006266:	6013      	str	r3, [r2, #0]
			target_speed_l = speed_G + target_omega_z/180*M_PI*TREAD/2;
 8006268:	4bc3      	ldr	r3, [pc, #780]	; (8006578 <HAL_TIM_PeriodElapsedCallback+0xc28>)
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	4618      	mov	r0, r3
 800626e:	f7fa f963 	bl	8000538 <__aeabi_f2d>
 8006272:	4604      	mov	r4, r0
 8006274:	460d      	mov	r5, r1
 8006276:	4bbf      	ldr	r3, [pc, #764]	; (8006574 <HAL_TIM_PeriodElapsedCallback+0xc24>)
 8006278:	edd3 7a00 	vldr	s15, [r3]
 800627c:	ed9f 7abf 	vldr	s14, [pc, #764]	; 800657c <HAL_TIM_PeriodElapsedCallback+0xc2c>
 8006280:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8006284:	ee16 0a90 	vmov	r0, s13
 8006288:	f7fa f956 	bl	8000538 <__aeabi_f2d>
 800628c:	a3b6      	add	r3, pc, #728	; (adr r3, 8006568 <HAL_TIM_PeriodElapsedCallback+0xc18>)
 800628e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006292:	f7fa f9a9 	bl	80005e8 <__aeabi_dmul>
 8006296:	4602      	mov	r2, r0
 8006298:	460b      	mov	r3, r1
 800629a:	4610      	mov	r0, r2
 800629c:	4619      	mov	r1, r3
 800629e:	f04f 0200 	mov.w	r2, #0
 80062a2:	4bb7      	ldr	r3, [pc, #732]	; (8006580 <HAL_TIM_PeriodElapsedCallback+0xc30>)
 80062a4:	f7fa f9a0 	bl	80005e8 <__aeabi_dmul>
 80062a8:	4602      	mov	r2, r0
 80062aa:	460b      	mov	r3, r1
 80062ac:	4610      	mov	r0, r2
 80062ae:	4619      	mov	r1, r3
 80062b0:	f04f 0200 	mov.w	r2, #0
 80062b4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80062b8:	f7fa fac0 	bl	800083c <__aeabi_ddiv>
 80062bc:	4602      	mov	r2, r0
 80062be:	460b      	mov	r3, r1
 80062c0:	4620      	mov	r0, r4
 80062c2:	4629      	mov	r1, r5
 80062c4:	f7f9 ffda 	bl	800027c <__adddf3>
 80062c8:	4603      	mov	r3, r0
 80062ca:	460c      	mov	r4, r1
 80062cc:	4618      	mov	r0, r3
 80062ce:	4621      	mov	r1, r4
 80062d0:	f7fa fc3a 	bl	8000b48 <__aeabi_d2f>
 80062d4:	4602      	mov	r2, r0
 80062d6:	4bab      	ldr	r3, [pc, #684]	; (8006584 <HAL_TIM_PeriodElapsedCallback+0xc34>)
 80062d8:	601a      	str	r2, [r3, #0]
			target_speed_r = speed_G - target_omega_z/180*M_PI*TREAD/2;
 80062da:	4ba7      	ldr	r3, [pc, #668]	; (8006578 <HAL_TIM_PeriodElapsedCallback+0xc28>)
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	4618      	mov	r0, r3
 80062e0:	f7fa f92a 	bl	8000538 <__aeabi_f2d>
 80062e4:	4604      	mov	r4, r0
 80062e6:	460d      	mov	r5, r1
 80062e8:	4ba2      	ldr	r3, [pc, #648]	; (8006574 <HAL_TIM_PeriodElapsedCallback+0xc24>)
 80062ea:	edd3 7a00 	vldr	s15, [r3]
 80062ee:	ed9f 7aa3 	vldr	s14, [pc, #652]	; 800657c <HAL_TIM_PeriodElapsedCallback+0xc2c>
 80062f2:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80062f6:	ee16 0a90 	vmov	r0, s13
 80062fa:	f7fa f91d 	bl	8000538 <__aeabi_f2d>
 80062fe:	a39a      	add	r3, pc, #616	; (adr r3, 8006568 <HAL_TIM_PeriodElapsedCallback+0xc18>)
 8006300:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006304:	f7fa f970 	bl	80005e8 <__aeabi_dmul>
 8006308:	4602      	mov	r2, r0
 800630a:	460b      	mov	r3, r1
 800630c:	4610      	mov	r0, r2
 800630e:	4619      	mov	r1, r3
 8006310:	f04f 0200 	mov.w	r2, #0
 8006314:	4b9a      	ldr	r3, [pc, #616]	; (8006580 <HAL_TIM_PeriodElapsedCallback+0xc30>)
 8006316:	f7fa f967 	bl	80005e8 <__aeabi_dmul>
 800631a:	4602      	mov	r2, r0
 800631c:	460b      	mov	r3, r1
 800631e:	4610      	mov	r0, r2
 8006320:	4619      	mov	r1, r3
 8006322:	f04f 0200 	mov.w	r2, #0
 8006326:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800632a:	f7fa fa87 	bl	800083c <__aeabi_ddiv>
 800632e:	4602      	mov	r2, r0
 8006330:	460b      	mov	r3, r1
 8006332:	4620      	mov	r0, r4
 8006334:	4629      	mov	r1, r5
 8006336:	f7f9 ff9f 	bl	8000278 <__aeabi_dsub>
 800633a:	4603      	mov	r3, r0
 800633c:	460c      	mov	r4, r1
 800633e:	4618      	mov	r0, r3
 8006340:	4621      	mov	r1, r4
 8006342:	f7fa fc01 	bl	8000b48 <__aeabi_d2f>
 8006346:	4602      	mov	r2, r0
 8006348:	4b8f      	ldr	r3, [pc, #572]	; (8006588 <HAL_TIM_PeriodElapsedCallback+0xc38>)
 800634a:	601a      	str	r2, [r3, #0]

			epsilon_l = target_speed_l - speed_l;
 800634c:	4b8d      	ldr	r3, [pc, #564]	; (8006584 <HAL_TIM_PeriodElapsedCallback+0xc34>)
 800634e:	ed93 7a00 	vldr	s14, [r3]
 8006352:	4b8e      	ldr	r3, [pc, #568]	; (800658c <HAL_TIM_PeriodElapsedCallback+0xc3c>)
 8006354:	edd3 7a00 	vldr	s15, [r3]
 8006358:	ee77 7a67 	vsub.f32	s15, s14, s15
 800635c:	4b8c      	ldr	r3, [pc, #560]	; (8006590 <HAL_TIM_PeriodElapsedCallback+0xc40>)
 800635e:	edc3 7a00 	vstr	s15, [r3]
			pulse_l = Kp * epsilon_l;
 8006362:	4b8b      	ldr	r3, [pc, #556]	; (8006590 <HAL_TIM_PeriodElapsedCallback+0xc40>)
 8006364:	edd3 7a00 	vldr	s15, [r3]
 8006368:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 800636c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006370:	4b88      	ldr	r3, [pc, #544]	; (8006594 <HAL_TIM_PeriodElapsedCallback+0xc44>)
 8006372:	edc3 7a00 	vstr	s15, [r3]
			if(pulse_l > 0){
 8006376:	4b87      	ldr	r3, [pc, #540]	; (8006594 <HAL_TIM_PeriodElapsedCallback+0xc44>)
 8006378:	edd3 7a00 	vldr	s15, [r3]
 800637c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006380:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006384:	dd17      	ble.n	80063b6 <HAL_TIM_PeriodElapsedCallback+0xa66>
				drive_dir(0, 0);
 8006386:	2100      	movs	r1, #0
 8006388:	2000      	movs	r0, #0
 800638a:	f7fe f94f 	bl	800462c <drive_dir>
				ConfigOC.Pulse = pulse_l;
 800638e:	4b81      	ldr	r3, [pc, #516]	; (8006594 <HAL_TIM_PeriodElapsedCallback+0xc44>)
 8006390:	edd3 7a00 	vldr	s15, [r3]
 8006394:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006398:	ee17 3a90 	vmov	r3, s15
 800639c:	613b      	str	r3, [r7, #16]
				HAL_TIM_PWM_ConfigChannel(&htim2, &ConfigOC, TIM_CHANNEL_1);
 800639e:	f107 030c 	add.w	r3, r7, #12
 80063a2:	2200      	movs	r2, #0
 80063a4:	4619      	mov	r1, r3
 80063a6:	487c      	ldr	r0, [pc, #496]	; (8006598 <HAL_TIM_PeriodElapsedCallback+0xc48>)
 80063a8:	f7fd f8bc 	bl	8003524 <HAL_TIM_PWM_ConfigChannel>
				HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_1);
 80063ac:	2100      	movs	r1, #0
 80063ae:	487a      	ldr	r0, [pc, #488]	; (8006598 <HAL_TIM_PeriodElapsedCallback+0xc48>)
 80063b0:	f7fc fea8 	bl	8003104 <HAL_TIM_PWM_Start>
 80063b4:	e020      	b.n	80063f8 <HAL_TIM_PeriodElapsedCallback+0xaa8>
			}
			else if(pulse_l < 0){
 80063b6:	4b77      	ldr	r3, [pc, #476]	; (8006594 <HAL_TIM_PeriodElapsedCallback+0xc44>)
 80063b8:	edd3 7a00 	vldr	s15, [r3]
 80063bc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80063c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80063c4:	d518      	bpl.n	80063f8 <HAL_TIM_PeriodElapsedCallback+0xaa8>
				drive_dir(0, 1);
 80063c6:	2101      	movs	r1, #1
 80063c8:	2000      	movs	r0, #0
 80063ca:	f7fe f92f 	bl	800462c <drive_dir>
				ConfigOC.Pulse = -pulse_l;
 80063ce:	4b71      	ldr	r3, [pc, #452]	; (8006594 <HAL_TIM_PeriodElapsedCallback+0xc44>)
 80063d0:	edd3 7a00 	vldr	s15, [r3]
 80063d4:	eef1 7a67 	vneg.f32	s15, s15
 80063d8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80063dc:	ee17 3a90 	vmov	r3, s15
 80063e0:	613b      	str	r3, [r7, #16]
				HAL_TIM_PWM_ConfigChannel(&htim2, &ConfigOC, TIM_CHANNEL_1);
 80063e2:	f107 030c 	add.w	r3, r7, #12
 80063e6:	2200      	movs	r2, #0
 80063e8:	4619      	mov	r1, r3
 80063ea:	486b      	ldr	r0, [pc, #428]	; (8006598 <HAL_TIM_PeriodElapsedCallback+0xc48>)
 80063ec:	f7fd f89a 	bl	8003524 <HAL_TIM_PWM_ConfigChannel>
				HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_1);
 80063f0:	2100      	movs	r1, #0
 80063f2:	4869      	ldr	r0, [pc, #420]	; (8006598 <HAL_TIM_PeriodElapsedCallback+0xc48>)
 80063f4:	f7fc fe86 	bl	8003104 <HAL_TIM_PWM_Start>
			}

			epsilon_r = target_speed_r - speed_r;
 80063f8:	4b63      	ldr	r3, [pc, #396]	; (8006588 <HAL_TIM_PeriodElapsedCallback+0xc38>)
 80063fa:	ed93 7a00 	vldr	s14, [r3]
 80063fe:	4b67      	ldr	r3, [pc, #412]	; (800659c <HAL_TIM_PeriodElapsedCallback+0xc4c>)
 8006400:	edd3 7a00 	vldr	s15, [r3]
 8006404:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006408:	4b65      	ldr	r3, [pc, #404]	; (80065a0 <HAL_TIM_PeriodElapsedCallback+0xc50>)
 800640a:	edc3 7a00 	vstr	s15, [r3]
			pulse_r = Kp * epsilon_r;
 800640e:	4b64      	ldr	r3, [pc, #400]	; (80065a0 <HAL_TIM_PeriodElapsedCallback+0xc50>)
 8006410:	edd3 7a00 	vldr	s15, [r3]
 8006414:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8006418:	ee67 7a87 	vmul.f32	s15, s15, s14
 800641c:	4b61      	ldr	r3, [pc, #388]	; (80065a4 <HAL_TIM_PeriodElapsedCallback+0xc54>)
 800641e:	edc3 7a00 	vstr	s15, [r3]
			if(pulse_r > 0){
 8006422:	4b60      	ldr	r3, [pc, #384]	; (80065a4 <HAL_TIM_PeriodElapsedCallback+0xc54>)
 8006424:	edd3 7a00 	vldr	s15, [r3]
 8006428:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800642c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006430:	dd17      	ble.n	8006462 <HAL_TIM_PeriodElapsedCallback+0xb12>
				drive_dir(1, 0);
 8006432:	2100      	movs	r1, #0
 8006434:	2001      	movs	r0, #1
 8006436:	f7fe f8f9 	bl	800462c <drive_dir>
				ConfigOC.Pulse = pulse_r;
 800643a:	4b5a      	ldr	r3, [pc, #360]	; (80065a4 <HAL_TIM_PeriodElapsedCallback+0xc54>)
 800643c:	edd3 7a00 	vldr	s15, [r3]
 8006440:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006444:	ee17 3a90 	vmov	r3, s15
 8006448:	613b      	str	r3, [r7, #16]
				HAL_TIM_PWM_ConfigChannel(&htim2, &ConfigOC, TIM_CHANNEL_4);
 800644a:	f107 030c 	add.w	r3, r7, #12
 800644e:	220c      	movs	r2, #12
 8006450:	4619      	mov	r1, r3
 8006452:	4851      	ldr	r0, [pc, #324]	; (8006598 <HAL_TIM_PeriodElapsedCallback+0xc48>)
 8006454:	f7fd f866 	bl	8003524 <HAL_TIM_PWM_ConfigChannel>
				HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_4);
 8006458:	210c      	movs	r1, #12
 800645a:	484f      	ldr	r0, [pc, #316]	; (8006598 <HAL_TIM_PeriodElapsedCallback+0xc48>)
 800645c:	f7fc fe52 	bl	8003104 <HAL_TIM_PWM_Start>
 8006460:	e020      	b.n	80064a4 <HAL_TIM_PeriodElapsedCallback+0xb54>
			}
			else if(pulse_r < 0){
 8006462:	4b50      	ldr	r3, [pc, #320]	; (80065a4 <HAL_TIM_PeriodElapsedCallback+0xc54>)
 8006464:	edd3 7a00 	vldr	s15, [r3]
 8006468:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800646c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006470:	d518      	bpl.n	80064a4 <HAL_TIM_PeriodElapsedCallback+0xb54>
				drive_dir(1, 1);
 8006472:	2101      	movs	r1, #1
 8006474:	2001      	movs	r0, #1
 8006476:	f7fe f8d9 	bl	800462c <drive_dir>
				ConfigOC.Pulse = -pulse_r;
 800647a:	4b4a      	ldr	r3, [pc, #296]	; (80065a4 <HAL_TIM_PeriodElapsedCallback+0xc54>)
 800647c:	edd3 7a00 	vldr	s15, [r3]
 8006480:	eef1 7a67 	vneg.f32	s15, s15
 8006484:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006488:	ee17 3a90 	vmov	r3, s15
 800648c:	613b      	str	r3, [r7, #16]
				HAL_TIM_PWM_ConfigChannel(&htim2, &ConfigOC, TIM_CHANNEL_4);
 800648e:	f107 030c 	add.w	r3, r7, #12
 8006492:	220c      	movs	r2, #12
 8006494:	4619      	mov	r1, r3
 8006496:	4840      	ldr	r0, [pc, #256]	; (8006598 <HAL_TIM_PeriodElapsedCallback+0xc48>)
 8006498:	f7fd f844 	bl	8003524 <HAL_TIM_PWM_ConfigChannel>
				HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_4);
 800649c:	210c      	movs	r1, #12
 800649e:	483e      	ldr	r0, [pc, #248]	; (8006598 <HAL_TIM_PeriodElapsedCallback+0xc48>)
 80064a0:	f7fc fe30 	bl	8003104 <HAL_TIM_PWM_Start>
			}
		}


		//===ADchange interrupt===
		uint16_t delay = 0;
 80064a4:	2300      	movs	r3, #0
 80064a6:	85fb      	strh	r3, [r7, #46]	; 0x2e
		tp = (tp+1)%2;
 80064a8:	4b3f      	ldr	r3, [pc, #252]	; (80065a8 <HAL_TIM_PeriodElapsedCallback+0xc58>)
 80064aa:	781b      	ldrb	r3, [r3, #0]
 80064ac:	3301      	adds	r3, #1
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	f003 0301 	and.w	r3, r3, #1
 80064b4:	bfb8      	it	lt
 80064b6:	425b      	neglt	r3, r3
 80064b8:	b2da      	uxtb	r2, r3
 80064ba:	4b3b      	ldr	r3, [pc, #236]	; (80065a8 <HAL_TIM_PeriodElapsedCallback+0xc58>)
 80064bc:	701a      	strb	r2, [r3, #0]

		switch(tp){
 80064be:	4b3a      	ldr	r3, [pc, #232]	; (80065a8 <HAL_TIM_PeriodElapsedCallback+0xc58>)
 80064c0:	781b      	ldrb	r3, [r3, #0]
 80064c2:	2b01      	cmp	r3, #1
 80064c4:	d044      	beq.n	8006550 <HAL_TIM_PeriodElapsedCallback+0xc00>
 80064c6:	2b02      	cmp	r3, #2
 80064c8:	f000 80b0 	beq.w	800662c <HAL_TIM_PeriodElapsedCallback+0xcdc>
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d000      	beq.n	80064d2 <HAL_TIM_PeriodElapsedCallback+0xb82>
					dl = dr = 0;
				}
				break;
		}
	}
}
 80064d0:	e162      	b.n	8006798 <HAL_TIM_PeriodElapsedCallback+0xe48>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_SET); 	//L
 80064d2:	2201      	movs	r2, #1
 80064d4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80064d8:	4834      	ldr	r0, [pc, #208]	; (80065ac <HAL_TIM_PeriodElapsedCallback+0xc5c>)
 80064da:	f7fb fc17 	bl	8001d0c <HAL_GPIO_WritePin>
				for(delay=0; delay<sensor_wait; delay++);
 80064de:	2300      	movs	r3, #0
 80064e0:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80064e2:	e002      	b.n	80064ea <HAL_TIM_PeriodElapsedCallback+0xb9a>
 80064e4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80064e6:	3301      	adds	r3, #1
 80064e8:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80064ea:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80064ec:	f640 32b7 	movw	r2, #2999	; 0xbb7
 80064f0:	4293      	cmp	r3, r2
 80064f2:	d9f7      	bls.n	80064e4 <HAL_TIM_PeriodElapsedCallback+0xb94>
				ad_l = get_adc_value(&hadc1, ADC_CHANNEL_3);			//L
 80064f4:	2103      	movs	r1, #3
 80064f6:	482e      	ldr	r0, [pc, #184]	; (80065b0 <HAL_TIM_PeriodElapsedCallback+0xc60>)
 80064f8:	f000 fed2 	bl	80072a0 <get_adc_value>
 80064fc:	4603      	mov	r3, r0
 80064fe:	461a      	mov	r2, r3
 8006500:	4b2c      	ldr	r3, [pc, #176]	; (80065b4 <HAL_TIM_PeriodElapsedCallback+0xc64>)
 8006502:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 8006504:	2200      	movs	r2, #0
 8006506:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800650a:	4828      	ldr	r0, [pc, #160]	; (80065ac <HAL_TIM_PeriodElapsedCallback+0xc5c>)
 800650c:	f7fb fbfe 	bl	8001d0c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);  	//R
 8006510:	2201      	movs	r2, #1
 8006512:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006516:	4828      	ldr	r0, [pc, #160]	; (80065b8 <HAL_TIM_PeriodElapsedCallback+0xc68>)
 8006518:	f7fb fbf8 	bl	8001d0c <HAL_GPIO_WritePin>
				for(delay=0; delay<sensor_wait; delay++);
 800651c:	2300      	movs	r3, #0
 800651e:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8006520:	e002      	b.n	8006528 <HAL_TIM_PeriodElapsedCallback+0xbd8>
 8006522:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006524:	3301      	adds	r3, #1
 8006526:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8006528:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800652a:	f640 32b7 	movw	r2, #2999	; 0xbb7
 800652e:	4293      	cmp	r3, r2
 8006530:	d9f7      	bls.n	8006522 <HAL_TIM_PeriodElapsedCallback+0xbd2>
				ad_r = get_adc_value(&hadc1, ADC_CHANNEL_1);			//R
 8006532:	2101      	movs	r1, #1
 8006534:	481e      	ldr	r0, [pc, #120]	; (80065b0 <HAL_TIM_PeriodElapsedCallback+0xc60>)
 8006536:	f000 feb3 	bl	80072a0 <get_adc_value>
 800653a:	4603      	mov	r3, r0
 800653c:	461a      	mov	r2, r3
 800653e:	4b1f      	ldr	r3, [pc, #124]	; (80065bc <HAL_TIM_PeriodElapsedCallback+0xc6c>)
 8006540:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8006542:	2200      	movs	r2, #0
 8006544:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006548:	481b      	ldr	r0, [pc, #108]	; (80065b8 <HAL_TIM_PeriodElapsedCallback+0xc68>)
 800654a:	f7fb fbdf 	bl	8001d0c <HAL_GPIO_WritePin>
			break;
 800654e:	e123      	b.n	8006798 <HAL_TIM_PeriodElapsedCallback+0xe48>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_SET); 	//FL
 8006550:	2201      	movs	r2, #1
 8006552:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006556:	4815      	ldr	r0, [pc, #84]	; (80065ac <HAL_TIM_PeriodElapsedCallback+0xc5c>)
 8006558:	f7fb fbd8 	bl	8001d0c <HAL_GPIO_WritePin>
				for(delay=0; delay<sensor_wait; delay++);
 800655c:	2300      	movs	r3, #0
 800655e:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8006560:	e031      	b.n	80065c6 <HAL_TIM_PeriodElapsedCallback+0xc76>
 8006562:	bf00      	nop
 8006564:	f3af 8000 	nop.w
 8006568:	54442d18 	.word	0x54442d18
 800656c:	400921fb 	.word	0x400921fb
 8006570:	2000026c 	.word	0x2000026c
 8006574:	20000160 	.word	0x20000160
 8006578:	2000099c 	.word	0x2000099c
 800657c:	43340000 	.word	0x43340000
 8006580:	40508000 	.word	0x40508000
 8006584:	20000a94 	.word	0x20000a94
 8006588:	20000158 	.word	0x20000158
 800658c:	20000998 	.word	0x20000998
 8006590:	20000a00 	.word	0x20000a00
 8006594:	20000a44 	.word	0x20000a44
 8006598:	20000aac 	.word	0x20000aac
 800659c:	20000270 	.word	0x20000270
 80065a0:	20000aa4 	.word	0x20000aa4
 80065a4:	20000628 	.word	0x20000628
 80065a8:	20000e0d 	.word	0x20000e0d
 80065ac:	40020800 	.word	0x40020800
 80065b0:	200009a4 	.word	0x200009a4
 80065b4:	200009a0 	.word	0x200009a0
 80065b8:	40020000 	.word	0x40020000
 80065bc:	20000df8 	.word	0x20000df8
 80065c0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80065c2:	3301      	adds	r3, #1
 80065c4:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80065c6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80065c8:	f640 32b7 	movw	r2, #2999	; 0xbb7
 80065cc:	4293      	cmp	r3, r2
 80065ce:	d9f7      	bls.n	80065c0 <HAL_TIM_PeriodElapsedCallback+0xc70>
				ad_fl = get_adc_value(&hadc1, ADC_CHANNEL_2);			//FL
 80065d0:	2102      	movs	r1, #2
 80065d2:	4873      	ldr	r0, [pc, #460]	; (80067a0 <HAL_TIM_PeriodElapsedCallback+0xe50>)
 80065d4:	f000 fe64 	bl	80072a0 <get_adc_value>
 80065d8:	4603      	mov	r3, r0
 80065da:	461a      	mov	r2, r3
 80065dc:	4b71      	ldr	r3, [pc, #452]	; (80067a4 <HAL_TIM_PeriodElapsedCallback+0xe54>)
 80065de:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET);
 80065e0:	2200      	movs	r2, #0
 80065e2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80065e6:	4870      	ldr	r0, [pc, #448]	; (80067a8 <HAL_TIM_PeriodElapsedCallback+0xe58>)
 80065e8:	f7fb fb90 	bl	8001d0c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);   	//FR
 80065ec:	2201      	movs	r2, #1
 80065ee:	f44f 7100 	mov.w	r1, #512	; 0x200
 80065f2:	486d      	ldr	r0, [pc, #436]	; (80067a8 <HAL_TIM_PeriodElapsedCallback+0xe58>)
 80065f4:	f7fb fb8a 	bl	8001d0c <HAL_GPIO_WritePin>
				for(delay=0; delay<sensor_wait; delay++);
 80065f8:	2300      	movs	r3, #0
 80065fa:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80065fc:	e002      	b.n	8006604 <HAL_TIM_PeriodElapsedCallback+0xcb4>
 80065fe:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006600:	3301      	adds	r3, #1
 8006602:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8006604:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006606:	f640 32b7 	movw	r2, #2999	; 0xbb7
 800660a:	4293      	cmp	r3, r2
 800660c:	d9f7      	bls.n	80065fe <HAL_TIM_PeriodElapsedCallback+0xcae>
				ad_fr = get_adc_value(&hadc1, ADC_CHANNEL_0);			//FR
 800660e:	2100      	movs	r1, #0
 8006610:	4863      	ldr	r0, [pc, #396]	; (80067a0 <HAL_TIM_PeriodElapsedCallback+0xe50>)
 8006612:	f000 fe45 	bl	80072a0 <get_adc_value>
 8006616:	4603      	mov	r3, r0
 8006618:	461a      	mov	r2, r3
 800661a:	4b64      	ldr	r3, [pc, #400]	; (80067ac <HAL_TIM_PeriodElapsedCallback+0xe5c>)
 800661c:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 800661e:	2200      	movs	r2, #0
 8006620:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006624:	4860      	ldr	r0, [pc, #384]	; (80067a8 <HAL_TIM_PeriodElapsedCallback+0xe58>)
 8006626:	f7fb fb71 	bl	8001d0c <HAL_GPIO_WritePin>
			break;
 800662a:	e0b5      	b.n	8006798 <HAL_TIM_PeriodElapsedCallback+0xe48>
				if(MF.FLAG.WCTRL){
 800662c:	4b60      	ldr	r3, [pc, #384]	; (80067b0 <HAL_TIM_PeriodElapsedCallback+0xe60>)
 800662e:	881b      	ldrh	r3, [r3, #0]
 8006630:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8006634:	b2db      	uxtb	r3, r3
 8006636:	2b00      	cmp	r3, #0
 8006638:	f000 80a6 	beq.w	8006788 <HAL_TIM_PeriodElapsedCallback+0xe38>
					int16_t dl_tmp = 0, dr_tmp = 0;
 800663c:	2300      	movs	r3, #0
 800663e:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8006640:	2300      	movs	r3, #0
 8006642:	857b      	strh	r3, [r7, #42]	; 0x2a
					dif_l = (int32_t) ad_l - base_l;
 8006644:	4b5b      	ldr	r3, [pc, #364]	; (80067b4 <HAL_TIM_PeriodElapsedCallback+0xe64>)
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	b29a      	uxth	r2, r3
 800664a:	4b5b      	ldr	r3, [pc, #364]	; (80067b8 <HAL_TIM_PeriodElapsedCallback+0xe68>)
 800664c:	881b      	ldrh	r3, [r3, #0]
 800664e:	1ad3      	subs	r3, r2, r3
 8006650:	b29b      	uxth	r3, r3
 8006652:	b21a      	sxth	r2, r3
 8006654:	4b59      	ldr	r3, [pc, #356]	; (80067bc <HAL_TIM_PeriodElapsedCallback+0xe6c>)
 8006656:	801a      	strh	r2, [r3, #0]
					dif_r = (int32_t) ad_r - base_r;
 8006658:	4b59      	ldr	r3, [pc, #356]	; (80067c0 <HAL_TIM_PeriodElapsedCallback+0xe70>)
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	b29a      	uxth	r2, r3
 800665e:	4b59      	ldr	r3, [pc, #356]	; (80067c4 <HAL_TIM_PeriodElapsedCallback+0xe74>)
 8006660:	881b      	ldrh	r3, [r3, #0]
 8006662:	1ad3      	subs	r3, r2, r3
 8006664:	b29b      	uxth	r3, r3
 8006666:	b21a      	sxth	r2, r3
 8006668:	4b57      	ldr	r3, [pc, #348]	; (80067c8 <HAL_TIM_PeriodElapsedCallback+0xe78>)
 800666a:	801a      	strh	r2, [r3, #0]
					if(CTRL_BASE_L < dif_l){
 800666c:	4b53      	ldr	r3, [pc, #332]	; (80067bc <HAL_TIM_PeriodElapsedCallback+0xe6c>)
 800666e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006672:	2b32      	cmp	r3, #50	; 0x32
 8006674:	dd30      	ble.n	80066d8 <HAL_TIM_PeriodElapsedCallback+0xd88>
						dl_tmp += CTRL_CONT * dif_l;			//比例制御値を決�?
 8006676:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 800667a:	ee07 3a90 	vmov	s15, r3
 800667e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006682:	4b4e      	ldr	r3, [pc, #312]	; (80067bc <HAL_TIM_PeriodElapsedCallback+0xe6c>)
 8006684:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006688:	ee07 3a90 	vmov	s15, r3
 800668c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006690:	eddf 6a4e 	vldr	s13, [pc, #312]	; 80067cc <HAL_TIM_PeriodElapsedCallback+0xe7c>
 8006694:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8006698:	ee77 7a27 	vadd.f32	s15, s14, s15
 800669c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80066a0:	ee17 3a90 	vmov	r3, s15
 80066a4:	85bb      	strh	r3, [r7, #44]	; 0x2c
						dr_tmp += -1 * CTRL_CONT * dif_l;		//比例制御値を決�?
 80066a6:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80066aa:	ee07 3a90 	vmov	s15, r3
 80066ae:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80066b2:	4b42      	ldr	r3, [pc, #264]	; (80067bc <HAL_TIM_PeriodElapsedCallback+0xe6c>)
 80066b4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80066b8:	ee07 3a90 	vmov	s15, r3
 80066bc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80066c0:	eddf 6a43 	vldr	s13, [pc, #268]	; 80067d0 <HAL_TIM_PeriodElapsedCallback+0xe80>
 80066c4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80066c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80066cc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80066d0:	ee17 3a90 	vmov	r3, s15
 80066d4:	857b      	strh	r3, [r7, #42]	; 0x2a
 80066d6:	e034      	b.n	8006742 <HAL_TIM_PeriodElapsedCallback+0xdf2>
					else if(CTRL_BASE_R < dif_r){
 80066d8:	4b3b      	ldr	r3, [pc, #236]	; (80067c8 <HAL_TIM_PeriodElapsedCallback+0xe78>)
 80066da:	f9b3 3000 	ldrsh.w	r3, [r3]
 80066de:	2b32      	cmp	r3, #50	; 0x32
 80066e0:	dd2f      	ble.n	8006742 <HAL_TIM_PeriodElapsedCallback+0xdf2>
						dl_tmp += -1 * CTRL_CONT * dif_r;		//比例制御値を決�?
 80066e2:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 80066e6:	ee07 3a90 	vmov	s15, r3
 80066ea:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80066ee:	4b36      	ldr	r3, [pc, #216]	; (80067c8 <HAL_TIM_PeriodElapsedCallback+0xe78>)
 80066f0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80066f4:	ee07 3a90 	vmov	s15, r3
 80066f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80066fc:	eddf 6a34 	vldr	s13, [pc, #208]	; 80067d0 <HAL_TIM_PeriodElapsedCallback+0xe80>
 8006700:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8006704:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006708:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800670c:	ee17 3a90 	vmov	r3, s15
 8006710:	85bb      	strh	r3, [r7, #44]	; 0x2c
						dr_tmp += CTRL_CONT * dif_r;			//比例制御値を決�?
 8006712:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8006716:	ee07 3a90 	vmov	s15, r3
 800671a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800671e:	4b2a      	ldr	r3, [pc, #168]	; (80067c8 <HAL_TIM_PeriodElapsedCallback+0xe78>)
 8006720:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006724:	ee07 3a90 	vmov	s15, r3
 8006728:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800672c:	eddf 6a27 	vldr	s13, [pc, #156]	; 80067cc <HAL_TIM_PeriodElapsedCallback+0xe7c>
 8006730:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8006734:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006738:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800673c:	ee17 3a90 	vmov	r3, s15
 8006740:	857b      	strh	r3, [r7, #42]	; 0x2a
					dl = max(min(CTRL_MAX, dl_tmp), -1 * CTRL_MAX);
 8006742:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8006746:	4a23      	ldr	r2, [pc, #140]	; (80067d4 <HAL_TIM_PeriodElapsedCallback+0xe84>)
 8006748:	4293      	cmp	r3, r2
 800674a:	db08      	blt.n	800675e <HAL_TIM_PeriodElapsedCallback+0xe0e>
 800674c:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8006750:	f640 52ac 	movw	r2, #3500	; 0xdac
 8006754:	4293      	cmp	r3, r2
 8006756:	bfa8      	it	ge
 8006758:	4613      	movge	r3, r2
 800675a:	b21b      	sxth	r3, r3
 800675c:	e000      	b.n	8006760 <HAL_TIM_PeriodElapsedCallback+0xe10>
 800675e:	4b1e      	ldr	r3, [pc, #120]	; (80067d8 <HAL_TIM_PeriodElapsedCallback+0xe88>)
 8006760:	4a1e      	ldr	r2, [pc, #120]	; (80067dc <HAL_TIM_PeriodElapsedCallback+0xe8c>)
 8006762:	8013      	strh	r3, [r2, #0]
					dr = max(min(CTRL_MAX, dr_tmp), -1 * CTRL_MAX);
 8006764:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8006768:	4a1a      	ldr	r2, [pc, #104]	; (80067d4 <HAL_TIM_PeriodElapsedCallback+0xe84>)
 800676a:	4293      	cmp	r3, r2
 800676c:	db08      	blt.n	8006780 <HAL_TIM_PeriodElapsedCallback+0xe30>
 800676e:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8006772:	f640 52ac 	movw	r2, #3500	; 0xdac
 8006776:	4293      	cmp	r3, r2
 8006778:	bfa8      	it	ge
 800677a:	4613      	movge	r3, r2
 800677c:	b21b      	sxth	r3, r3
 800677e:	e000      	b.n	8006782 <HAL_TIM_PeriodElapsedCallback+0xe32>
 8006780:	4b15      	ldr	r3, [pc, #84]	; (80067d8 <HAL_TIM_PeriodElapsedCallback+0xe88>)
 8006782:	4a17      	ldr	r2, [pc, #92]	; (80067e0 <HAL_TIM_PeriodElapsedCallback+0xe90>)
 8006784:	8013      	strh	r3, [r2, #0]
				break;
 8006786:	e006      	b.n	8006796 <HAL_TIM_PeriodElapsedCallback+0xe46>
					dl = dr = 0;
 8006788:	2100      	movs	r1, #0
 800678a:	4b15      	ldr	r3, [pc, #84]	; (80067e0 <HAL_TIM_PeriodElapsedCallback+0xe90>)
 800678c:	460a      	mov	r2, r1
 800678e:	801a      	strh	r2, [r3, #0]
 8006790:	4b12      	ldr	r3, [pc, #72]	; (80067dc <HAL_TIM_PeriodElapsedCallback+0xe8c>)
 8006792:	460a      	mov	r2, r1
 8006794:	801a      	strh	r2, [r3, #0]
				break;
 8006796:	bf00      	nop
}
 8006798:	bf00      	nop
 800679a:	3730      	adds	r7, #48	; 0x30
 800679c:	46bd      	mov	sp, r7
 800679e:	bdb0      	pop	{r4, r5, r7, pc}
 80067a0:	200009a4 	.word	0x200009a4
 80067a4:	20000bec 	.word	0x20000bec
 80067a8:	40020800 	.word	0x40020800
 80067ac:	20000a9c 	.word	0x20000a9c
 80067b0:	20000dfc 	.word	0x20000dfc
 80067b4:	200009a0 	.word	0x200009a0
 80067b8:	20000300 	.word	0x20000300
 80067bc:	200009f2 	.word	0x200009f2
 80067c0:	20000df8 	.word	0x20000df8
 80067c4:	20000274 	.word	0x20000274
 80067c8:	20000a4e 	.word	0x20000a4e
 80067cc:	3ecccccd 	.word	0x3ecccccd
 80067d0:	becccccd 	.word	0xbecccccd
 80067d4:	fffff255 	.word	0xfffff255
 80067d8:	fffff254 	.word	0xfffff254
 80067dc:	20000a98 	.word	0x20000a98
 80067e0:	20000e04 	.word	0x20000e04

080067e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80067e4:	b580      	push	{r7, lr}
 80067e6:	b08c      	sub	sp, #48	; 0x30
 80067e8:	af02      	add	r7, sp, #8
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80067ea:	f7fa fb7d 	bl	8000ee8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80067ee:	f000 f96f 	bl	8006ad0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80067f2:	f000 fc61 	bl	80070b8 <MX_GPIO_Init>
  MX_ADC1_Init();
 80067f6:	f000 f9d5 	bl	8006ba4 <MX_ADC1_Init>
  MX_TIM2_Init();
 80067fa:	f000 fa5b 	bl	8006cb4 <MX_TIM2_Init>
  MX_TIM3_Init();
 80067fe:	f000 fad9 	bl	8006db4 <MX_TIM3_Init>
  MX_TIM4_Init();
 8006802:	f000 fb4d 	bl	8006ea0 <MX_TIM4_Init>
  MX_TIM6_Init();
 8006806:	f000 fb9f 	bl	8006f48 <MX_TIM6_Init>
  MX_TIM8_Init();
 800680a:	f000 fbd3 	bl	8006fb4 <MX_TIM8_Init>
  MX_SPI3_Init();
 800680e:	f000 fa1b 	bl	8006c48 <MX_SPI3_Init>
  MX_USART1_UART_Init();
 8006812:	f000 fc27 	bl	8007064 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  gyro_init();
 8006816:	f7fe ffad 	bl	8005774 <gyro_init>

  printf("*** Welcome to WMMC ! ***\n");
 800681a:	4896      	ldr	r0, [pc, #600]	; (8006a74 <main+0x290>)
 800681c:	f001 fa08 	bl	8007c30 <puts>

  setbuf(stdout, NULL);
 8006820:	4b95      	ldr	r3, [pc, #596]	; (8006a78 <main+0x294>)
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	689b      	ldr	r3, [r3, #8]
 8006826:	2100      	movs	r1, #0
 8006828:	4618      	mov	r0, r3
 800682a:	f001 fa09 	bl	8007c40 <setbuf>
  HAL_TIM_Encoder_Start(&htim4,TIM_CHANNEL_ALL);
 800682e:	213c      	movs	r1, #60	; 0x3c
 8006830:	4892      	ldr	r0, [pc, #584]	; (8006a7c <main+0x298>)
 8006832:	f7fc fd37 	bl	80032a4 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim8,TIM_CHANNEL_ALL);
 8006836:	213c      	movs	r1, #60	; 0x3c
 8006838:	4891      	ldr	r0, [pc, #580]	; (8006a80 <main+0x29c>)
 800683a:	f7fc fd33 	bl	80032a4 <HAL_TIM_Encoder_Start>
  HAL_TIM_Base_Start_IT(&htim6);
 800683e:	4891      	ldr	r0, [pc, #580]	; (8006a84 <main+0x2a0>)
 8006840:	f7fc fc07 	bl	8003052 <HAL_TIM_Base_Start_IT>

  TIM_OC_InitTypeDef ConfigOC;
  ConfigOC.OCMode = TIM_OCMODE_PWM1;
 8006844:	2360      	movs	r3, #96	; 0x60
 8006846:	603b      	str	r3, [r7, #0]
  ConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8006848:	2300      	movs	r3, #0
 800684a:	60bb      	str	r3, [r7, #8]
  ConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800684c:	2300      	movs	r3, #0
 800684e:	613b      	str	r3, [r7, #16]

  int mode = 0;
 8006850:	2300      	movs	r3, #0
 8006852:	627b      	str	r3, [r7, #36]	; 0x24
  printf("Mode : %d\n", mode);
 8006854:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006856:	488c      	ldr	r0, [pc, #560]	; (8006a88 <main+0x2a4>)
 8006858:	f001 f976 	bl	8007b48 <iprintf>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 800685c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800685e:	b2db      	uxtb	r3, r3
 8006860:	f003 0301 	and.w	r3, r3, #1
 8006864:	b2d8      	uxtb	r0, r3
 8006866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006868:	b2db      	uxtb	r3, r3
 800686a:	f003 0302 	and.w	r3, r3, #2
 800686e:	b2d9      	uxtb	r1, r3
 8006870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006872:	b2db      	uxtb	r3, r3
 8006874:	f003 0304 	and.w	r3, r3, #4
 8006878:	b2db      	uxtb	r3, r3
 800687a:	461a      	mov	r2, r3
 800687c:	f000 fd3a 	bl	80072f4 <led_write>
	  if(dist_r >= 20){
 8006880:	4b82      	ldr	r3, [pc, #520]	; (8006a8c <main+0x2a8>)
 8006882:	edd3 7a00 	vldr	s15, [r3]
 8006886:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 800688a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800688e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006892:	db0f      	blt.n	80068b4 <main+0xd0>
		  mode++;
 8006894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006896:	3301      	adds	r3, #1
 8006898:	627b      	str	r3, [r7, #36]	; 0x24
		  dist_r = 0;
 800689a:	4b7c      	ldr	r3, [pc, #496]	; (8006a8c <main+0x2a8>)
 800689c:	f04f 0200 	mov.w	r2, #0
 80068a0:	601a      	str	r2, [r3, #0]
		  if(mode > 7){
 80068a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068a4:	2b07      	cmp	r3, #7
 80068a6:	dd01      	ble.n	80068ac <main+0xc8>
			  mode = 0;
 80068a8:	2300      	movs	r3, #0
 80068aa:	627b      	str	r3, [r7, #36]	; 0x24
		  }
		  printf("Mode : %d\n", mode);
 80068ac:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80068ae:	4876      	ldr	r0, [pc, #472]	; (8006a88 <main+0x2a4>)
 80068b0:	f001 f94a 	bl	8007b48 <iprintf>
		  //buzzer(pitagola2[mode-1][0], pitagola2[mode-1][1]);
		  //buzzer(pitagola[2][0], pitagola[2][1]);
	  }
	  if(dist_r <= -20){
 80068b4:	4b75      	ldr	r3, [pc, #468]	; (8006a8c <main+0x2a8>)
 80068b6:	edd3 7a00 	vldr	s15, [r3]
 80068ba:	eebb 7a04 	vmov.f32	s14, #180	; 0xc1a00000 -20.0
 80068be:	eef4 7ac7 	vcmpe.f32	s15, s14
 80068c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80068c6:	d80f      	bhi.n	80068e8 <main+0x104>
		  mode--;
 80068c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068ca:	3b01      	subs	r3, #1
 80068cc:	627b      	str	r3, [r7, #36]	; 0x24
		  dist_r = 0;
 80068ce:	4b6f      	ldr	r3, [pc, #444]	; (8006a8c <main+0x2a8>)
 80068d0:	f04f 0200 	mov.w	r2, #0
 80068d4:	601a      	str	r2, [r3, #0]
		  if(mode < 0){
 80068d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068d8:	2b00      	cmp	r3, #0
 80068da:	da01      	bge.n	80068e0 <main+0xfc>
			  mode = 7;
 80068dc:	2307      	movs	r3, #7
 80068de:	627b      	str	r3, [r7, #36]	; 0x24
		  }
		  printf("Mode : %d\n", mode);
 80068e0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80068e2:	4869      	ldr	r0, [pc, #420]	; (8006a88 <main+0x2a4>)
 80068e4:	f001 f930 	bl	8007b48 <iprintf>
		  //buzzer(pitagola2[mode-1][0], pitagola2[mode-1][1]);
		  //buzzer(pitagola[2][0], pitagola[2][1]);
	  }
	  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET){
 80068e8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80068ec:	4868      	ldr	r0, [pc, #416]	; (8006a90 <main+0x2ac>)
 80068ee:	f7fb f9f5 	bl	8001cdc <HAL_GPIO_ReadPin>
 80068f2:	4603      	mov	r3, r0
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d1b1      	bne.n	800685c <main+0x78>
		  HAL_Delay(50);
 80068f8:	2032      	movs	r0, #50	; 0x32
 80068fa:	f7fa fb67 	bl	8000fcc <HAL_Delay>
		  while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET);
 80068fe:	bf00      	nop
 8006900:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006904:	4862      	ldr	r0, [pc, #392]	; (8006a90 <main+0x2ac>)
 8006906:	f7fb f9e9 	bl	8001cdc <HAL_GPIO_ReadPin>
 800690a:	4603      	mov	r3, r0
 800690c:	2b00      	cmp	r3, #0
 800690e:	d0f7      	beq.n	8006900 <main+0x11c>
		  switch(mode){
 8006910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006912:	2b06      	cmp	r3, #6
 8006914:	d8a2      	bhi.n	800685c <main+0x78>
 8006916:	a201      	add	r2, pc, #4	; (adr r2, 800691c <main+0x138>)
 8006918:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800691c:	08006939 	.word	0x08006939
 8006920:	0800685d 	.word	0x0800685d
 8006924:	0800685d 	.word	0x0800685d
 8006928:	0800685d 	.word	0x0800685d
 800692c:	080069dd 	.word	0x080069dd
 8006930:	080069e3 	.word	0x080069e3
 8006934:	08006a35 	.word	0x08006a35

		  	  case 0:
		  		  MF.FLAG.DRV = 1;
 8006938:	4a56      	ldr	r2, [pc, #344]	; (8006a94 <main+0x2b0>)
 800693a:	8813      	ldrh	r3, [r2, #0]
 800693c:	f043 0302 	orr.w	r3, r3, #2
 8006940:	8013      	strh	r3, [r2, #0]
		  		  for(int i = 0; i < 3; i++){
 8006942:	2300      	movs	r3, #0
 8006944:	623b      	str	r3, [r7, #32]
 8006946:	e040      	b.n	80069ca <main+0x1e6>
		  			  HAL_Delay(500);
 8006948:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800694c:	f7fa fb3e 	bl	8000fcc <HAL_Delay>
		  			  target_speed_l = 200;
 8006950:	4b51      	ldr	r3, [pc, #324]	; (8006a98 <main+0x2b4>)
 8006952:	4a52      	ldr	r2, [pc, #328]	; (8006a9c <main+0x2b8>)
 8006954:	601a      	str	r2, [r3, #0]
		  			  target_speed_r = 200;
 8006956:	4b52      	ldr	r3, [pc, #328]	; (8006aa0 <main+0x2bc>)
 8006958:	4a50      	ldr	r2, [pc, #320]	; (8006a9c <main+0x2b8>)
 800695a:	601a      	str	r2, [r3, #0]
		  			  while(dist_l < 300 && dist_r < 300);
 800695c:	bf00      	nop
 800695e:	4b51      	ldr	r3, [pc, #324]	; (8006aa4 <main+0x2c0>)
 8006960:	edd3 7a00 	vldr	s15, [r3]
 8006964:	ed9f 7a50 	vldr	s14, [pc, #320]	; 8006aa8 <main+0x2c4>
 8006968:	eef4 7ac7 	vcmpe.f32	s15, s14
 800696c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006970:	d509      	bpl.n	8006986 <main+0x1a2>
 8006972:	4b46      	ldr	r3, [pc, #280]	; (8006a8c <main+0x2a8>)
 8006974:	edd3 7a00 	vldr	s15, [r3]
 8006978:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 8006aa8 <main+0x2c4>
 800697c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006980:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006984:	d4eb      	bmi.n	800695e <main+0x17a>

		  			  target_speed_l = -200;
 8006986:	4b44      	ldr	r3, [pc, #272]	; (8006a98 <main+0x2b4>)
 8006988:	4a48      	ldr	r2, [pc, #288]	; (8006aac <main+0x2c8>)
 800698a:	601a      	str	r2, [r3, #0]
		  			  target_speed_r = -200;
 800698c:	4b44      	ldr	r3, [pc, #272]	; (8006aa0 <main+0x2bc>)
 800698e:	4a47      	ldr	r2, [pc, #284]	; (8006aac <main+0x2c8>)
 8006990:	601a      	str	r2, [r3, #0]
		  			  while(dist_l > 0 && dist_r > 0);
 8006992:	bf00      	nop
 8006994:	4b43      	ldr	r3, [pc, #268]	; (8006aa4 <main+0x2c0>)
 8006996:	edd3 7a00 	vldr	s15, [r3]
 800699a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800699e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80069a2:	dd07      	ble.n	80069b4 <main+0x1d0>
 80069a4:	4b39      	ldr	r3, [pc, #228]	; (8006a8c <main+0x2a8>)
 80069a6:	edd3 7a00 	vldr	s15, [r3]
 80069aa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80069ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80069b2:	dcef      	bgt.n	8006994 <main+0x1b0>

		  			  target_speed_l = 0;
 80069b4:	4b38      	ldr	r3, [pc, #224]	; (8006a98 <main+0x2b4>)
 80069b6:	f04f 0200 	mov.w	r2, #0
 80069ba:	601a      	str	r2, [r3, #0]
		  			  target_speed_r = 0;
 80069bc:	4b38      	ldr	r3, [pc, #224]	; (8006aa0 <main+0x2bc>)
 80069be:	f04f 0200 	mov.w	r2, #0
 80069c2:	601a      	str	r2, [r3, #0]
		  		  for(int i = 0; i < 3; i++){
 80069c4:	6a3b      	ldr	r3, [r7, #32]
 80069c6:	3301      	adds	r3, #1
 80069c8:	623b      	str	r3, [r7, #32]
 80069ca:	6a3b      	ldr	r3, [r7, #32]
 80069cc:	2b02      	cmp	r3, #2
 80069ce:	ddbb      	ble.n	8006948 <main+0x164>
		  		  }
		  		  while(1)MF.FLAG.DRV = 0;
 80069d0:	4a30      	ldr	r2, [pc, #192]	; (8006a94 <main+0x2b0>)
 80069d2:	8813      	ldrh	r3, [r2, #0]
 80069d4:	f36f 0341 	bfc	r3, #1, #1
 80069d8:	8013      	strh	r3, [r2, #0]
 80069da:	e7f9      	b.n	80069d0 <main+0x1ec>
		  		  break;

		  	  case 4:
		  		  test_select();
 80069dc:	f7fe fe52 	bl	8005684 <test_select>
		  		  break;
 80069e0:	e047      	b.n	8006a72 <main+0x28e>

		  	  case 5:
		  		  //----sensor check----
		  		  printf("Sensor Check.\n");
 80069e2:	4833      	ldr	r0, [pc, #204]	; (8006ab0 <main+0x2cc>)
 80069e4:	f001 f924 	bl	8007c30 <puts>
		  		  while(1){
		  			  get_wall_info();
 80069e8:	f000 fcc6 	bl	8007378 <get_wall_info>
		  			  led_write(wall_info & 0x11, wall_info & 0x88, wall_info & 0x44);
 80069ec:	4b31      	ldr	r3, [pc, #196]	; (8006ab4 <main+0x2d0>)
 80069ee:	781b      	ldrb	r3, [r3, #0]
 80069f0:	f003 0311 	and.w	r3, r3, #17
 80069f4:	b2d8      	uxtb	r0, r3
 80069f6:	4b2f      	ldr	r3, [pc, #188]	; (8006ab4 <main+0x2d0>)
 80069f8:	781b      	ldrb	r3, [r3, #0]
 80069fa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80069fe:	b2d9      	uxtb	r1, r3
 8006a00:	4b2c      	ldr	r3, [pc, #176]	; (8006ab4 <main+0x2d0>)
 8006a02:	781b      	ldrb	r3, [r3, #0]
 8006a04:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8006a08:	b2db      	uxtb	r3, r3
 8006a0a:	461a      	mov	r2, r3
 8006a0c:	f000 fc72 	bl	80072f4 <led_write>
		  			  printf("ad_l : %d, ad_fl : %d, ad_fr : %d, ad_r : %d\n", ad_l, ad_fl, ad_fr, ad_r);
 8006a10:	4b29      	ldr	r3, [pc, #164]	; (8006ab8 <main+0x2d4>)
 8006a12:	6819      	ldr	r1, [r3, #0]
 8006a14:	4b29      	ldr	r3, [pc, #164]	; (8006abc <main+0x2d8>)
 8006a16:	681a      	ldr	r2, [r3, #0]
 8006a18:	4b29      	ldr	r3, [pc, #164]	; (8006ac0 <main+0x2dc>)
 8006a1a:	6818      	ldr	r0, [r3, #0]
 8006a1c:	4b29      	ldr	r3, [pc, #164]	; (8006ac4 <main+0x2e0>)
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	9300      	str	r3, [sp, #0]
 8006a22:	4603      	mov	r3, r0
 8006a24:	4828      	ldr	r0, [pc, #160]	; (8006ac8 <main+0x2e4>)
 8006a26:	f001 f88f 	bl	8007b48 <iprintf>
		  			  HAL_Delay(333);
 8006a2a:	f240 104d 	movw	r0, #333	; 0x14d
 8006a2e:	f7fa facd 	bl	8000fcc <HAL_Delay>
		  			  get_wall_info();
 8006a32:	e7d9      	b.n	80069e8 <main+0x204>
					}
					break;

		  	  case 6:
		  		while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_SET);
 8006a34:	bf00      	nop
 8006a36:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006a3a:	4815      	ldr	r0, [pc, #84]	; (8006a90 <main+0x2ac>)
 8006a3c:	f7fb f94e 	bl	8001cdc <HAL_GPIO_ReadPin>
 8006a40:	4603      	mov	r3, r0
 8006a42:	2b01      	cmp	r3, #1
 8006a44:	d0f7      	beq.n	8006a36 <main+0x252>

		  		for(int i=0; i<pita; i++){
 8006a46:	2300      	movs	r3, #0
 8006a48:	61fb      	str	r3, [r7, #28]
 8006a4a:	e00e      	b.n	8006a6a <main+0x286>
		  			buzzer(pitagola[i][0], pitagola[i][1]);
 8006a4c:	4a1f      	ldr	r2, [pc, #124]	; (8006acc <main+0x2e8>)
 8006a4e:	69fb      	ldr	r3, [r7, #28]
 8006a50:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8006a54:	4a1d      	ldr	r2, [pc, #116]	; (8006acc <main+0x2e8>)
 8006a56:	69fb      	ldr	r3, [r7, #28]
 8006a58:	00db      	lsls	r3, r3, #3
 8006a5a:	4413      	add	r3, r2
 8006a5c:	685b      	ldr	r3, [r3, #4]
 8006a5e:	4619      	mov	r1, r3
 8006a60:	f000 fbe8 	bl	8007234 <buzzer>
		  		for(int i=0; i<pita; i++){
 8006a64:	69fb      	ldr	r3, [r7, #28]
 8006a66:	3301      	adds	r3, #1
 8006a68:	61fb      	str	r3, [r7, #28]
 8006a6a:	69fb      	ldr	r3, [r7, #28]
 8006a6c:	2b0a      	cmp	r3, #10
 8006a6e:	dded      	ble.n	8006a4c <main+0x268>
		  		}
		  		break;
 8006a70:	bf00      	nop
	  led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 8006a72:	e6f3      	b.n	800685c <main+0x78>
 8006a74:	08008e94 	.word	0x08008e94
 8006a78:	20000064 	.word	0x20000064
 8006a7c:	200002c0 	.word	0x200002c0
 8006a80:	20000280 	.word	0x20000280
 8006a84:	20000a50 	.word	0x20000a50
 8006a88:	08008eb0 	.word	0x08008eb0
 8006a8c:	20000994 	.word	0x20000994
 8006a90:	40020000 	.word	0x40020000
 8006a94:	20000dfc 	.word	0x20000dfc
 8006a98:	20000a94 	.word	0x20000a94
 8006a9c:	43480000 	.word	0x43480000
 8006aa0:	20000158 	.word	0x20000158
 8006aa4:	20000e10 	.word	0x20000e10
 8006aa8:	43960000 	.word	0x43960000
 8006aac:	c3480000 	.word	0xc3480000
 8006ab0:	08008ebc 	.word	0x08008ebc
 8006ab4:	2000027c 	.word	0x2000027c
 8006ab8:	200009a0 	.word	0x200009a0
 8006abc:	20000bec 	.word	0x20000bec
 8006ac0:	20000a9c 	.word	0x20000a9c
 8006ac4:	20000df8 	.word	0x20000df8
 8006ac8:	08008ecc 	.word	0x08008ecc
 8006acc:	20000008 	.word	0x20000008

08006ad0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8006ad0:	b580      	push	{r7, lr}
 8006ad2:	b094      	sub	sp, #80	; 0x50
 8006ad4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8006ad6:	f107 0320 	add.w	r3, r7, #32
 8006ada:	2230      	movs	r2, #48	; 0x30
 8006adc:	2100      	movs	r1, #0
 8006ade:	4618      	mov	r0, r3
 8006ae0:	f001 f82a 	bl	8007b38 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8006ae4:	f107 030c 	add.w	r3, r7, #12
 8006ae8:	2200      	movs	r2, #0
 8006aea:	601a      	str	r2, [r3, #0]
 8006aec:	605a      	str	r2, [r3, #4]
 8006aee:	609a      	str	r2, [r3, #8]
 8006af0:	60da      	str	r2, [r3, #12]
 8006af2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8006af4:	2300      	movs	r3, #0
 8006af6:	60bb      	str	r3, [r7, #8]
 8006af8:	4b28      	ldr	r3, [pc, #160]	; (8006b9c <SystemClock_Config+0xcc>)
 8006afa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006afc:	4a27      	ldr	r2, [pc, #156]	; (8006b9c <SystemClock_Config+0xcc>)
 8006afe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006b02:	6413      	str	r3, [r2, #64]	; 0x40
 8006b04:	4b25      	ldr	r3, [pc, #148]	; (8006b9c <SystemClock_Config+0xcc>)
 8006b06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006b0c:	60bb      	str	r3, [r7, #8]
 8006b0e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8006b10:	2300      	movs	r3, #0
 8006b12:	607b      	str	r3, [r7, #4]
 8006b14:	4b22      	ldr	r3, [pc, #136]	; (8006ba0 <SystemClock_Config+0xd0>)
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	4a21      	ldr	r2, [pc, #132]	; (8006ba0 <SystemClock_Config+0xd0>)
 8006b1a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006b1e:	6013      	str	r3, [r2, #0]
 8006b20:	4b1f      	ldr	r3, [pc, #124]	; (8006ba0 <SystemClock_Config+0xd0>)
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006b28:	607b      	str	r3, [r7, #4]
 8006b2a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8006b2c:	2302      	movs	r3, #2
 8006b2e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8006b30:	2301      	movs	r3, #1
 8006b32:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8006b34:	2310      	movs	r3, #16
 8006b36:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8006b38:	2302      	movs	r3, #2
 8006b3a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8006b3c:	2300      	movs	r3, #0
 8006b3e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8006b40:	2308      	movs	r3, #8
 8006b42:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8006b44:	23a8      	movs	r3, #168	; 0xa8
 8006b46:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8006b48:	2302      	movs	r3, #2
 8006b4a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8006b4c:	2304      	movs	r3, #4
 8006b4e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8006b50:	f107 0320 	add.w	r3, r7, #32
 8006b54:	4618      	mov	r0, r3
 8006b56:	f7fb f8f3 	bl	8001d40 <HAL_RCC_OscConfig>
 8006b5a:	4603      	mov	r3, r0
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d001      	beq.n	8006b64 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8006b60:	f000 fc02 	bl	8007368 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8006b64:	230f      	movs	r3, #15
 8006b66:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8006b68:	2302      	movs	r3, #2
 8006b6a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8006b6c:	2300      	movs	r3, #0
 8006b6e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8006b70:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8006b74:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8006b76:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006b7a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8006b7c:	f107 030c 	add.w	r3, r7, #12
 8006b80:	2105      	movs	r1, #5
 8006b82:	4618      	mov	r0, r3
 8006b84:	f7fb fb1e 	bl	80021c4 <HAL_RCC_ClockConfig>
 8006b88:	4603      	mov	r3, r0
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d001      	beq.n	8006b92 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8006b8e:	f000 fbeb 	bl	8007368 <Error_Handler>
  }
}
 8006b92:	bf00      	nop
 8006b94:	3750      	adds	r7, #80	; 0x50
 8006b96:	46bd      	mov	sp, r7
 8006b98:	bd80      	pop	{r7, pc}
 8006b9a:	bf00      	nop
 8006b9c:	40023800 	.word	0x40023800
 8006ba0:	40007000 	.word	0x40007000

08006ba4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8006ba4:	b580      	push	{r7, lr}
 8006ba6:	b084      	sub	sp, #16
 8006ba8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8006baa:	463b      	mov	r3, r7
 8006bac:	2200      	movs	r2, #0
 8006bae:	601a      	str	r2, [r3, #0]
 8006bb0:	605a      	str	r2, [r3, #4]
 8006bb2:	609a      	str	r2, [r3, #8]
 8006bb4:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 8006bb6:	4b21      	ldr	r3, [pc, #132]	; (8006c3c <MX_ADC1_Init+0x98>)
 8006bb8:	4a21      	ldr	r2, [pc, #132]	; (8006c40 <MX_ADC1_Init+0x9c>)
 8006bba:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8006bbc:	4b1f      	ldr	r3, [pc, #124]	; (8006c3c <MX_ADC1_Init+0x98>)
 8006bbe:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8006bc2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8006bc4:	4b1d      	ldr	r3, [pc, #116]	; (8006c3c <MX_ADC1_Init+0x98>)
 8006bc6:	2200      	movs	r2, #0
 8006bc8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8006bca:	4b1c      	ldr	r3, [pc, #112]	; (8006c3c <MX_ADC1_Init+0x98>)
 8006bcc:	2200      	movs	r2, #0
 8006bce:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8006bd0:	4b1a      	ldr	r3, [pc, #104]	; (8006c3c <MX_ADC1_Init+0x98>)
 8006bd2:	2200      	movs	r2, #0
 8006bd4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8006bd6:	4b19      	ldr	r3, [pc, #100]	; (8006c3c <MX_ADC1_Init+0x98>)
 8006bd8:	2200      	movs	r2, #0
 8006bda:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8006bde:	4b17      	ldr	r3, [pc, #92]	; (8006c3c <MX_ADC1_Init+0x98>)
 8006be0:	2200      	movs	r2, #0
 8006be2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8006be4:	4b15      	ldr	r3, [pc, #84]	; (8006c3c <MX_ADC1_Init+0x98>)
 8006be6:	4a17      	ldr	r2, [pc, #92]	; (8006c44 <MX_ADC1_Init+0xa0>)
 8006be8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8006bea:	4b14      	ldr	r3, [pc, #80]	; (8006c3c <MX_ADC1_Init+0x98>)
 8006bec:	2200      	movs	r2, #0
 8006bee:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8006bf0:	4b12      	ldr	r3, [pc, #72]	; (8006c3c <MX_ADC1_Init+0x98>)
 8006bf2:	2201      	movs	r2, #1
 8006bf4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8006bf6:	4b11      	ldr	r3, [pc, #68]	; (8006c3c <MX_ADC1_Init+0x98>)
 8006bf8:	2200      	movs	r2, #0
 8006bfa:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8006bfe:	4b0f      	ldr	r3, [pc, #60]	; (8006c3c <MX_ADC1_Init+0x98>)
 8006c00:	2201      	movs	r2, #1
 8006c02:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8006c04:	480d      	ldr	r0, [pc, #52]	; (8006c3c <MX_ADC1_Init+0x98>)
 8006c06:	f7fa fa03 	bl	8001010 <HAL_ADC_Init>
 8006c0a:	4603      	mov	r3, r0
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d001      	beq.n	8006c14 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8006c10:	f000 fbaa 	bl	8007368 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8006c14:	2300      	movs	r3, #0
 8006c16:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8006c18:	2301      	movs	r3, #1
 8006c1a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8006c1c:	2300      	movs	r3, #0
 8006c1e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8006c20:	463b      	mov	r3, r7
 8006c22:	4619      	mov	r1, r3
 8006c24:	4805      	ldr	r0, [pc, #20]	; (8006c3c <MX_ADC1_Init+0x98>)
 8006c26:	f7fa fb8f 	bl	8001348 <HAL_ADC_ConfigChannel>
 8006c2a:	4603      	mov	r3, r0
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d001      	beq.n	8006c34 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8006c30:	f000 fb9a 	bl	8007368 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8006c34:	bf00      	nop
 8006c36:	3710      	adds	r7, #16
 8006c38:	46bd      	mov	sp, r7
 8006c3a:	bd80      	pop	{r7, pc}
 8006c3c:	200009a4 	.word	0x200009a4
 8006c40:	40012000 	.word	0x40012000
 8006c44:	0f000001 	.word	0x0f000001

08006c48 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8006c48:	b580      	push	{r7, lr}
 8006c4a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8006c4c:	4b17      	ldr	r3, [pc, #92]	; (8006cac <MX_SPI3_Init+0x64>)
 8006c4e:	4a18      	ldr	r2, [pc, #96]	; (8006cb0 <MX_SPI3_Init+0x68>)
 8006c50:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8006c52:	4b16      	ldr	r3, [pc, #88]	; (8006cac <MX_SPI3_Init+0x64>)
 8006c54:	f44f 7282 	mov.w	r2, #260	; 0x104
 8006c58:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8006c5a:	4b14      	ldr	r3, [pc, #80]	; (8006cac <MX_SPI3_Init+0x64>)
 8006c5c:	2200      	movs	r2, #0
 8006c5e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8006c60:	4b12      	ldr	r3, [pc, #72]	; (8006cac <MX_SPI3_Init+0x64>)
 8006c62:	2200      	movs	r2, #0
 8006c64:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8006c66:	4b11      	ldr	r3, [pc, #68]	; (8006cac <MX_SPI3_Init+0x64>)
 8006c68:	2200      	movs	r2, #0
 8006c6a:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8006c6c:	4b0f      	ldr	r3, [pc, #60]	; (8006cac <MX_SPI3_Init+0x64>)
 8006c6e:	2200      	movs	r2, #0
 8006c70:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8006c72:	4b0e      	ldr	r3, [pc, #56]	; (8006cac <MX_SPI3_Init+0x64>)
 8006c74:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006c78:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8006c7a:	4b0c      	ldr	r3, [pc, #48]	; (8006cac <MX_SPI3_Init+0x64>)
 8006c7c:	2218      	movs	r2, #24
 8006c7e:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8006c80:	4b0a      	ldr	r3, [pc, #40]	; (8006cac <MX_SPI3_Init+0x64>)
 8006c82:	2200      	movs	r2, #0
 8006c84:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8006c86:	4b09      	ldr	r3, [pc, #36]	; (8006cac <MX_SPI3_Init+0x64>)
 8006c88:	2200      	movs	r2, #0
 8006c8a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006c8c:	4b07      	ldr	r3, [pc, #28]	; (8006cac <MX_SPI3_Init+0x64>)
 8006c8e:	2200      	movs	r2, #0
 8006c90:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8006c92:	4b06      	ldr	r3, [pc, #24]	; (8006cac <MX_SPI3_Init+0x64>)
 8006c94:	220a      	movs	r2, #10
 8006c96:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8006c98:	4804      	ldr	r0, [pc, #16]	; (8006cac <MX_SPI3_Init+0x64>)
 8006c9a:	f7fb fc5b 	bl	8002554 <HAL_SPI_Init>
 8006c9e:	4603      	mov	r3, r0
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d001      	beq.n	8006ca8 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8006ca4:	f000 fb60 	bl	8007368 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8006ca8:	bf00      	nop
 8006caa:	bd80      	pop	{r7, pc}
 8006cac:	20000100 	.word	0x20000100
 8006cb0:	40003c00 	.word	0x40003c00

08006cb4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8006cb4:	b580      	push	{r7, lr}
 8006cb6:	b08e      	sub	sp, #56	; 0x38
 8006cb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8006cba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006cbe:	2200      	movs	r2, #0
 8006cc0:	601a      	str	r2, [r3, #0]
 8006cc2:	605a      	str	r2, [r3, #4]
 8006cc4:	609a      	str	r2, [r3, #8]
 8006cc6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006cc8:	f107 0320 	add.w	r3, r7, #32
 8006ccc:	2200      	movs	r2, #0
 8006cce:	601a      	str	r2, [r3, #0]
 8006cd0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8006cd2:	1d3b      	adds	r3, r7, #4
 8006cd4:	2200      	movs	r2, #0
 8006cd6:	601a      	str	r2, [r3, #0]
 8006cd8:	605a      	str	r2, [r3, #4]
 8006cda:	609a      	str	r2, [r3, #8]
 8006cdc:	60da      	str	r2, [r3, #12]
 8006cde:	611a      	str	r2, [r3, #16]
 8006ce0:	615a      	str	r2, [r3, #20]
 8006ce2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8006ce4:	4b32      	ldr	r3, [pc, #200]	; (8006db0 <MX_TIM2_Init+0xfc>)
 8006ce6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8006cea:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8006cec:	4b30      	ldr	r3, [pc, #192]	; (8006db0 <MX_TIM2_Init+0xfc>)
 8006cee:	2200      	movs	r2, #0
 8006cf0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006cf2:	4b2f      	ldr	r3, [pc, #188]	; (8006db0 <MX_TIM2_Init+0xfc>)
 8006cf4:	2200      	movs	r2, #0
 8006cf6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8006cf8:	4b2d      	ldr	r3, [pc, #180]	; (8006db0 <MX_TIM2_Init+0xfc>)
 8006cfa:	f240 32e7 	movw	r2, #999	; 0x3e7
 8006cfe:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006d00:	4b2b      	ldr	r3, [pc, #172]	; (8006db0 <MX_TIM2_Init+0xfc>)
 8006d02:	2200      	movs	r2, #0
 8006d04:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006d06:	4b2a      	ldr	r3, [pc, #168]	; (8006db0 <MX_TIM2_Init+0xfc>)
 8006d08:	2200      	movs	r2, #0
 8006d0a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8006d0c:	4828      	ldr	r0, [pc, #160]	; (8006db0 <MX_TIM2_Init+0xfc>)
 8006d0e:	f7fc f975 	bl	8002ffc <HAL_TIM_Base_Init>
 8006d12:	4603      	mov	r3, r0
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d001      	beq.n	8006d1c <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8006d18:	f000 fb26 	bl	8007368 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8006d1c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006d20:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8006d22:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006d26:	4619      	mov	r1, r3
 8006d28:	4821      	ldr	r0, [pc, #132]	; (8006db0 <MX_TIM2_Init+0xfc>)
 8006d2a:	f7fc fcc1 	bl	80036b0 <HAL_TIM_ConfigClockSource>
 8006d2e:	4603      	mov	r3, r0
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d001      	beq.n	8006d38 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8006d34:	f000 fb18 	bl	8007368 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8006d38:	481d      	ldr	r0, [pc, #116]	; (8006db0 <MX_TIM2_Init+0xfc>)
 8006d3a:	f7fc f9ae 	bl	800309a <HAL_TIM_PWM_Init>
 8006d3e:	4603      	mov	r3, r0
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d001      	beq.n	8006d48 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8006d44:	f000 fb10 	bl	8007368 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006d48:	2300      	movs	r3, #0
 8006d4a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006d4c:	2300      	movs	r3, #0
 8006d4e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8006d50:	f107 0320 	add.w	r3, r7, #32
 8006d54:	4619      	mov	r1, r3
 8006d56:	4816      	ldr	r0, [pc, #88]	; (8006db0 <MX_TIM2_Init+0xfc>)
 8006d58:	f7fd f899 	bl	8003e8e <HAL_TIMEx_MasterConfigSynchronization>
 8006d5c:	4603      	mov	r3, r0
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d001      	beq.n	8006d66 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8006d62:	f000 fb01 	bl	8007368 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8006d66:	2360      	movs	r3, #96	; 0x60
 8006d68:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8006d6a:	2300      	movs	r3, #0
 8006d6c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8006d6e:	2300      	movs	r3, #0
 8006d70:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8006d72:	2300      	movs	r3, #0
 8006d74:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8006d76:	1d3b      	adds	r3, r7, #4
 8006d78:	2200      	movs	r2, #0
 8006d7a:	4619      	mov	r1, r3
 8006d7c:	480c      	ldr	r0, [pc, #48]	; (8006db0 <MX_TIM2_Init+0xfc>)
 8006d7e:	f7fc fbd1 	bl	8003524 <HAL_TIM_PWM_ConfigChannel>
 8006d82:	4603      	mov	r3, r0
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d001      	beq.n	8006d8c <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8006d88:	f000 faee 	bl	8007368 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8006d8c:	1d3b      	adds	r3, r7, #4
 8006d8e:	220c      	movs	r2, #12
 8006d90:	4619      	mov	r1, r3
 8006d92:	4807      	ldr	r0, [pc, #28]	; (8006db0 <MX_TIM2_Init+0xfc>)
 8006d94:	f7fc fbc6 	bl	8003524 <HAL_TIM_PWM_ConfigChannel>
 8006d98:	4603      	mov	r3, r0
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d001      	beq.n	8006da2 <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 8006d9e:	f000 fae3 	bl	8007368 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8006da2:	4803      	ldr	r0, [pc, #12]	; (8006db0 <MX_TIM2_Init+0xfc>)
 8006da4:	f000 fca6 	bl	80076f4 <HAL_TIM_MspPostInit>

}
 8006da8:	bf00      	nop
 8006daa:	3738      	adds	r7, #56	; 0x38
 8006dac:	46bd      	mov	sp, r7
 8006dae:	bd80      	pop	{r7, pc}
 8006db0:	20000aac 	.word	0x20000aac

08006db4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8006db4:	b580      	push	{r7, lr}
 8006db6:	b08e      	sub	sp, #56	; 0x38
 8006db8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8006dba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006dbe:	2200      	movs	r2, #0
 8006dc0:	601a      	str	r2, [r3, #0]
 8006dc2:	605a      	str	r2, [r3, #4]
 8006dc4:	609a      	str	r2, [r3, #8]
 8006dc6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006dc8:	f107 0320 	add.w	r3, r7, #32
 8006dcc:	2200      	movs	r2, #0
 8006dce:	601a      	str	r2, [r3, #0]
 8006dd0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8006dd2:	1d3b      	adds	r3, r7, #4
 8006dd4:	2200      	movs	r2, #0
 8006dd6:	601a      	str	r2, [r3, #0]
 8006dd8:	605a      	str	r2, [r3, #4]
 8006dda:	609a      	str	r2, [r3, #8]
 8006ddc:	60da      	str	r2, [r3, #12]
 8006dde:	611a      	str	r2, [r3, #16]
 8006de0:	615a      	str	r2, [r3, #20]
 8006de2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8006de4:	4b2c      	ldr	r3, [pc, #176]	; (8006e98 <MX_TIM3_Init+0xe4>)
 8006de6:	4a2d      	ldr	r2, [pc, #180]	; (8006e9c <MX_TIM3_Init+0xe8>)
 8006de8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 64-1;
 8006dea:	4b2b      	ldr	r3, [pc, #172]	; (8006e98 <MX_TIM3_Init+0xe4>)
 8006dec:	223f      	movs	r2, #63	; 0x3f
 8006dee:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006df0:	4b29      	ldr	r3, [pc, #164]	; (8006e98 <MX_TIM3_Init+0xe4>)
 8006df2:	2200      	movs	r2, #0
 8006df4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0;
 8006df6:	4b28      	ldr	r3, [pc, #160]	; (8006e98 <MX_TIM3_Init+0xe4>)
 8006df8:	2200      	movs	r2, #0
 8006dfa:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006dfc:	4b26      	ldr	r3, [pc, #152]	; (8006e98 <MX_TIM3_Init+0xe4>)
 8006dfe:	2200      	movs	r2, #0
 8006e00:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006e02:	4b25      	ldr	r3, [pc, #148]	; (8006e98 <MX_TIM3_Init+0xe4>)
 8006e04:	2200      	movs	r2, #0
 8006e06:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8006e08:	4823      	ldr	r0, [pc, #140]	; (8006e98 <MX_TIM3_Init+0xe4>)
 8006e0a:	f7fc f8f7 	bl	8002ffc <HAL_TIM_Base_Init>
 8006e0e:	4603      	mov	r3, r0
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d001      	beq.n	8006e18 <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 8006e14:	f000 faa8 	bl	8007368 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8006e18:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006e1c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8006e1e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006e22:	4619      	mov	r1, r3
 8006e24:	481c      	ldr	r0, [pc, #112]	; (8006e98 <MX_TIM3_Init+0xe4>)
 8006e26:	f7fc fc43 	bl	80036b0 <HAL_TIM_ConfigClockSource>
 8006e2a:	4603      	mov	r3, r0
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d001      	beq.n	8006e34 <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 8006e30:	f000 fa9a 	bl	8007368 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8006e34:	4818      	ldr	r0, [pc, #96]	; (8006e98 <MX_TIM3_Init+0xe4>)
 8006e36:	f7fc f930 	bl	800309a <HAL_TIM_PWM_Init>
 8006e3a:	4603      	mov	r3, r0
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d001      	beq.n	8006e44 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 8006e40:	f000 fa92 	bl	8007368 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006e44:	2300      	movs	r3, #0
 8006e46:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006e48:	2300      	movs	r3, #0
 8006e4a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8006e4c:	f107 0320 	add.w	r3, r7, #32
 8006e50:	4619      	mov	r1, r3
 8006e52:	4811      	ldr	r0, [pc, #68]	; (8006e98 <MX_TIM3_Init+0xe4>)
 8006e54:	f7fd f81b 	bl	8003e8e <HAL_TIMEx_MasterConfigSynchronization>
 8006e58:	4603      	mov	r3, r0
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d001      	beq.n	8006e62 <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 8006e5e:	f000 fa83 	bl	8007368 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8006e62:	2360      	movs	r3, #96	; 0x60
 8006e64:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8006e66:	2300      	movs	r3, #0
 8006e68:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8006e6a:	2300      	movs	r3, #0
 8006e6c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8006e6e:	2300      	movs	r3, #0
 8006e70:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8006e72:	1d3b      	adds	r3, r7, #4
 8006e74:	2204      	movs	r2, #4
 8006e76:	4619      	mov	r1, r3
 8006e78:	4807      	ldr	r0, [pc, #28]	; (8006e98 <MX_TIM3_Init+0xe4>)
 8006e7a:	f7fc fb53 	bl	8003524 <HAL_TIM_PWM_ConfigChannel>
 8006e7e:	4603      	mov	r3, r0
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d001      	beq.n	8006e88 <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 8006e84:	f000 fa70 	bl	8007368 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8006e88:	4803      	ldr	r0, [pc, #12]	; (8006e98 <MX_TIM3_Init+0xe4>)
 8006e8a:	f000 fc33 	bl	80076f4 <HAL_TIM_MspPostInit>

}
 8006e8e:	bf00      	nop
 8006e90:	3738      	adds	r7, #56	; 0x38
 8006e92:	46bd      	mov	sp, r7
 8006e94:	bd80      	pop	{r7, pc}
 8006e96:	bf00      	nop
 8006e98:	2000094c 	.word	0x2000094c
 8006e9c:	40000400 	.word	0x40000400

08006ea0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8006ea0:	b580      	push	{r7, lr}
 8006ea2:	b08c      	sub	sp, #48	; 0x30
 8006ea4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8006ea6:	f107 030c 	add.w	r3, r7, #12
 8006eaa:	2224      	movs	r2, #36	; 0x24
 8006eac:	2100      	movs	r1, #0
 8006eae:	4618      	mov	r0, r3
 8006eb0:	f000 fe42 	bl	8007b38 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006eb4:	1d3b      	adds	r3, r7, #4
 8006eb6:	2200      	movs	r2, #0
 8006eb8:	601a      	str	r2, [r3, #0]
 8006eba:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8006ebc:	4b20      	ldr	r3, [pc, #128]	; (8006f40 <MX_TIM4_Init+0xa0>)
 8006ebe:	4a21      	ldr	r2, [pc, #132]	; (8006f44 <MX_TIM4_Init+0xa4>)
 8006ec0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8006ec2:	4b1f      	ldr	r3, [pc, #124]	; (8006f40 <MX_TIM4_Init+0xa0>)
 8006ec4:	2200      	movs	r2, #0
 8006ec6:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006ec8:	4b1d      	ldr	r3, [pc, #116]	; (8006f40 <MX_TIM4_Init+0xa0>)
 8006eca:	2200      	movs	r2, #0
 8006ecc:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8006ece:	4b1c      	ldr	r3, [pc, #112]	; (8006f40 <MX_TIM4_Init+0xa0>)
 8006ed0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006ed4:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006ed6:	4b1a      	ldr	r3, [pc, #104]	; (8006f40 <MX_TIM4_Init+0xa0>)
 8006ed8:	2200      	movs	r2, #0
 8006eda:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006edc:	4b18      	ldr	r3, [pc, #96]	; (8006f40 <MX_TIM4_Init+0xa0>)
 8006ede:	2200      	movs	r2, #0
 8006ee0:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8006ee2:	2303      	movs	r3, #3
 8006ee4:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8006ee6:	2300      	movs	r3, #0
 8006ee8:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8006eea:	2301      	movs	r3, #1
 8006eec:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8006eee:	2300      	movs	r3, #0
 8006ef0:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8006ef2:	2300      	movs	r3, #0
 8006ef4:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8006ef6:	2300      	movs	r3, #0
 8006ef8:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8006efa:	2301      	movs	r3, #1
 8006efc:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8006efe:	2300      	movs	r3, #0
 8006f00:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8006f02:	2300      	movs	r3, #0
 8006f04:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8006f06:	f107 030c 	add.w	r3, r7, #12
 8006f0a:	4619      	mov	r1, r3
 8006f0c:	480c      	ldr	r0, [pc, #48]	; (8006f40 <MX_TIM4_Init+0xa0>)
 8006f0e:	f7fc f937 	bl	8003180 <HAL_TIM_Encoder_Init>
 8006f12:	4603      	mov	r3, r0
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d001      	beq.n	8006f1c <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8006f18:	f000 fa26 	bl	8007368 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006f1c:	2300      	movs	r3, #0
 8006f1e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006f20:	2300      	movs	r3, #0
 8006f22:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8006f24:	1d3b      	adds	r3, r7, #4
 8006f26:	4619      	mov	r1, r3
 8006f28:	4805      	ldr	r0, [pc, #20]	; (8006f40 <MX_TIM4_Init+0xa0>)
 8006f2a:	f7fc ffb0 	bl	8003e8e <HAL_TIMEx_MasterConfigSynchronization>
 8006f2e:	4603      	mov	r3, r0
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d001      	beq.n	8006f38 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8006f34:	f000 fa18 	bl	8007368 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8006f38:	bf00      	nop
 8006f3a:	3730      	adds	r7, #48	; 0x30
 8006f3c:	46bd      	mov	sp, r7
 8006f3e:	bd80      	pop	{r7, pc}
 8006f40:	200002c0 	.word	0x200002c0
 8006f44:	40000800 	.word	0x40000800

08006f48 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8006f48:	b580      	push	{r7, lr}
 8006f4a:	b082      	sub	sp, #8
 8006f4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006f4e:	463b      	mov	r3, r7
 8006f50:	2200      	movs	r2, #0
 8006f52:	601a      	str	r2, [r3, #0]
 8006f54:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8006f56:	4b15      	ldr	r3, [pc, #84]	; (8006fac <MX_TIM6_Init+0x64>)
 8006f58:	4a15      	ldr	r2, [pc, #84]	; (8006fb0 <MX_TIM6_Init+0x68>)
 8006f5a:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 84-1;
 8006f5c:	4b13      	ldr	r3, [pc, #76]	; (8006fac <MX_TIM6_Init+0x64>)
 8006f5e:	2253      	movs	r2, #83	; 0x53
 8006f60:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006f62:	4b12      	ldr	r3, [pc, #72]	; (8006fac <MX_TIM6_Init+0x64>)
 8006f64:	2200      	movs	r2, #0
 8006f66:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000-1;
 8006f68:	4b10      	ldr	r3, [pc, #64]	; (8006fac <MX_TIM6_Init+0x64>)
 8006f6a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8006f6e:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006f70:	4b0e      	ldr	r3, [pc, #56]	; (8006fac <MX_TIM6_Init+0x64>)
 8006f72:	2200      	movs	r2, #0
 8006f74:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8006f76:	480d      	ldr	r0, [pc, #52]	; (8006fac <MX_TIM6_Init+0x64>)
 8006f78:	f7fc f840 	bl	8002ffc <HAL_TIM_Base_Init>
 8006f7c:	4603      	mov	r3, r0
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d001      	beq.n	8006f86 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8006f82:	f000 f9f1 	bl	8007368 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006f86:	2300      	movs	r3, #0
 8006f88:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006f8a:	2300      	movs	r3, #0
 8006f8c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8006f8e:	463b      	mov	r3, r7
 8006f90:	4619      	mov	r1, r3
 8006f92:	4806      	ldr	r0, [pc, #24]	; (8006fac <MX_TIM6_Init+0x64>)
 8006f94:	f7fc ff7b 	bl	8003e8e <HAL_TIMEx_MasterConfigSynchronization>
 8006f98:	4603      	mov	r3, r0
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d001      	beq.n	8006fa2 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8006f9e:	f000 f9e3 	bl	8007368 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8006fa2:	bf00      	nop
 8006fa4:	3708      	adds	r7, #8
 8006fa6:	46bd      	mov	sp, r7
 8006fa8:	bd80      	pop	{r7, pc}
 8006faa:	bf00      	nop
 8006fac:	20000a50 	.word	0x20000a50
 8006fb0:	40001000 	.word	0x40001000

08006fb4 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8006fb4:	b580      	push	{r7, lr}
 8006fb6:	b08c      	sub	sp, #48	; 0x30
 8006fb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8006fba:	f107 030c 	add.w	r3, r7, #12
 8006fbe:	2224      	movs	r2, #36	; 0x24
 8006fc0:	2100      	movs	r1, #0
 8006fc2:	4618      	mov	r0, r3
 8006fc4:	f000 fdb8 	bl	8007b38 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006fc8:	1d3b      	adds	r3, r7, #4
 8006fca:	2200      	movs	r2, #0
 8006fcc:	601a      	str	r2, [r3, #0]
 8006fce:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8006fd0:	4b22      	ldr	r3, [pc, #136]	; (800705c <MX_TIM8_Init+0xa8>)
 8006fd2:	4a23      	ldr	r2, [pc, #140]	; (8007060 <MX_TIM8_Init+0xac>)
 8006fd4:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8006fd6:	4b21      	ldr	r3, [pc, #132]	; (800705c <MX_TIM8_Init+0xa8>)
 8006fd8:	2200      	movs	r2, #0
 8006fda:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006fdc:	4b1f      	ldr	r3, [pc, #124]	; (800705c <MX_TIM8_Init+0xa8>)
 8006fde:	2200      	movs	r2, #0
 8006fe0:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8006fe2:	4b1e      	ldr	r3, [pc, #120]	; (800705c <MX_TIM8_Init+0xa8>)
 8006fe4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006fe8:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006fea:	4b1c      	ldr	r3, [pc, #112]	; (800705c <MX_TIM8_Init+0xa8>)
 8006fec:	2200      	movs	r2, #0
 8006fee:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8006ff0:	4b1a      	ldr	r3, [pc, #104]	; (800705c <MX_TIM8_Init+0xa8>)
 8006ff2:	2200      	movs	r2, #0
 8006ff4:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006ff6:	4b19      	ldr	r3, [pc, #100]	; (800705c <MX_TIM8_Init+0xa8>)
 8006ff8:	2200      	movs	r2, #0
 8006ffa:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8006ffc:	2303      	movs	r3, #3
 8006ffe:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8007000:	2300      	movs	r3, #0
 8007002:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8007004:	2301      	movs	r3, #1
 8007006:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8007008:	2300      	movs	r3, #0
 800700a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800700c:	2300      	movs	r3, #0
 800700e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8007010:	2300      	movs	r3, #0
 8007012:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8007014:	2301      	movs	r3, #1
 8007016:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8007018:	2300      	movs	r3, #0
 800701a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800701c:	2300      	movs	r3, #0
 800701e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8007020:	f107 030c 	add.w	r3, r7, #12
 8007024:	4619      	mov	r1, r3
 8007026:	480d      	ldr	r0, [pc, #52]	; (800705c <MX_TIM8_Init+0xa8>)
 8007028:	f7fc f8aa 	bl	8003180 <HAL_TIM_Encoder_Init>
 800702c:	4603      	mov	r3, r0
 800702e:	2b00      	cmp	r3, #0
 8007030:	d001      	beq.n	8007036 <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 8007032:	f000 f999 	bl	8007368 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8007036:	2300      	movs	r3, #0
 8007038:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800703a:	2300      	movs	r3, #0
 800703c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800703e:	1d3b      	adds	r3, r7, #4
 8007040:	4619      	mov	r1, r3
 8007042:	4806      	ldr	r0, [pc, #24]	; (800705c <MX_TIM8_Init+0xa8>)
 8007044:	f7fc ff23 	bl	8003e8e <HAL_TIMEx_MasterConfigSynchronization>
 8007048:	4603      	mov	r3, r0
 800704a:	2b00      	cmp	r3, #0
 800704c:	d001      	beq.n	8007052 <MX_TIM8_Init+0x9e>
  {
    Error_Handler();
 800704e:	f000 f98b 	bl	8007368 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8007052:	bf00      	nop
 8007054:	3730      	adds	r7, #48	; 0x30
 8007056:	46bd      	mov	sp, r7
 8007058:	bd80      	pop	{r7, pc}
 800705a:	bf00      	nop
 800705c:	20000280 	.word	0x20000280
 8007060:	40010400 	.word	0x40010400

08007064 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8007064:	b580      	push	{r7, lr}
 8007066:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8007068:	4b11      	ldr	r3, [pc, #68]	; (80070b0 <MX_USART1_UART_Init+0x4c>)
 800706a:	4a12      	ldr	r2, [pc, #72]	; (80070b4 <MX_USART1_UART_Init+0x50>)
 800706c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800706e:	4b10      	ldr	r3, [pc, #64]	; (80070b0 <MX_USART1_UART_Init+0x4c>)
 8007070:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8007074:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8007076:	4b0e      	ldr	r3, [pc, #56]	; (80070b0 <MX_USART1_UART_Init+0x4c>)
 8007078:	2200      	movs	r2, #0
 800707a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800707c:	4b0c      	ldr	r3, [pc, #48]	; (80070b0 <MX_USART1_UART_Init+0x4c>)
 800707e:	2200      	movs	r2, #0
 8007080:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8007082:	4b0b      	ldr	r3, [pc, #44]	; (80070b0 <MX_USART1_UART_Init+0x4c>)
 8007084:	2200      	movs	r2, #0
 8007086:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8007088:	4b09      	ldr	r3, [pc, #36]	; (80070b0 <MX_USART1_UART_Init+0x4c>)
 800708a:	220c      	movs	r2, #12
 800708c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800708e:	4b08      	ldr	r3, [pc, #32]	; (80070b0 <MX_USART1_UART_Init+0x4c>)
 8007090:	2200      	movs	r2, #0
 8007092:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8007094:	4b06      	ldr	r3, [pc, #24]	; (80070b0 <MX_USART1_UART_Init+0x4c>)
 8007096:	2200      	movs	r2, #0
 8007098:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800709a:	4805      	ldr	r0, [pc, #20]	; (80070b0 <MX_USART1_UART_Init+0x4c>)
 800709c:	f7fc ff50 	bl	8003f40 <HAL_UART_Init>
 80070a0:	4603      	mov	r3, r0
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d001      	beq.n	80070aa <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80070a6:	f000 f95f 	bl	8007368 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80070aa:	bf00      	nop
 80070ac:	bd80      	pop	{r7, pc}
 80070ae:	bf00      	nop
 80070b0:	20000a04 	.word	0x20000a04
 80070b4:	40011000 	.word	0x40011000

080070b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80070b8:	b580      	push	{r7, lr}
 80070ba:	b08a      	sub	sp, #40	; 0x28
 80070bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80070be:	f107 0314 	add.w	r3, r7, #20
 80070c2:	2200      	movs	r2, #0
 80070c4:	601a      	str	r2, [r3, #0]
 80070c6:	605a      	str	r2, [r3, #4]
 80070c8:	609a      	str	r2, [r3, #8]
 80070ca:	60da      	str	r2, [r3, #12]
 80070cc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80070ce:	2300      	movs	r3, #0
 80070d0:	613b      	str	r3, [r7, #16]
 80070d2:	4b53      	ldr	r3, [pc, #332]	; (8007220 <MX_GPIO_Init+0x168>)
 80070d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070d6:	4a52      	ldr	r2, [pc, #328]	; (8007220 <MX_GPIO_Init+0x168>)
 80070d8:	f043 0304 	orr.w	r3, r3, #4
 80070dc:	6313      	str	r3, [r2, #48]	; 0x30
 80070de:	4b50      	ldr	r3, [pc, #320]	; (8007220 <MX_GPIO_Init+0x168>)
 80070e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070e2:	f003 0304 	and.w	r3, r3, #4
 80070e6:	613b      	str	r3, [r7, #16]
 80070e8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80070ea:	2300      	movs	r3, #0
 80070ec:	60fb      	str	r3, [r7, #12]
 80070ee:	4b4c      	ldr	r3, [pc, #304]	; (8007220 <MX_GPIO_Init+0x168>)
 80070f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070f2:	4a4b      	ldr	r2, [pc, #300]	; (8007220 <MX_GPIO_Init+0x168>)
 80070f4:	f043 0301 	orr.w	r3, r3, #1
 80070f8:	6313      	str	r3, [r2, #48]	; 0x30
 80070fa:	4b49      	ldr	r3, [pc, #292]	; (8007220 <MX_GPIO_Init+0x168>)
 80070fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070fe:	f003 0301 	and.w	r3, r3, #1
 8007102:	60fb      	str	r3, [r7, #12]
 8007104:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8007106:	2300      	movs	r3, #0
 8007108:	60bb      	str	r3, [r7, #8]
 800710a:	4b45      	ldr	r3, [pc, #276]	; (8007220 <MX_GPIO_Init+0x168>)
 800710c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800710e:	4a44      	ldr	r2, [pc, #272]	; (8007220 <MX_GPIO_Init+0x168>)
 8007110:	f043 0302 	orr.w	r3, r3, #2
 8007114:	6313      	str	r3, [r2, #48]	; 0x30
 8007116:	4b42      	ldr	r3, [pc, #264]	; (8007220 <MX_GPIO_Init+0x168>)
 8007118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800711a:	f003 0302 	and.w	r3, r3, #2
 800711e:	60bb      	str	r3, [r7, #8]
 8007120:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8007122:	2300      	movs	r3, #0
 8007124:	607b      	str	r3, [r7, #4]
 8007126:	4b3e      	ldr	r3, [pc, #248]	; (8007220 <MX_GPIO_Init+0x168>)
 8007128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800712a:	4a3d      	ldr	r2, [pc, #244]	; (8007220 <MX_GPIO_Init+0x168>)
 800712c:	f043 0308 	orr.w	r3, r3, #8
 8007130:	6313      	str	r3, [r2, #48]	; 0x30
 8007132:	4b3b      	ldr	r3, [pc, #236]	; (8007220 <MX_GPIO_Init+0x168>)
 8007134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007136:	f003 0308 	and.w	r3, r3, #8
 800713a:	607b      	str	r3, [r7, #4]
 800713c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_2 
 800713e:	2200      	movs	r2, #0
 8007140:	f24e 213c 	movw	r1, #57916	; 0xe23c
 8007144:	4837      	ldr	r0, [pc, #220]	; (8007224 <MX_GPIO_Init+0x16c>)
 8007146:	f7fa fde1 	bl	8001d0c <HAL_GPIO_WritePin>
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8, GPIO_PIN_RESET);
 800714a:	2200      	movs	r2, #0
 800714c:	f44f 71e8 	mov.w	r1, #464	; 0x1d0
 8007150:	4835      	ldr	r0, [pc, #212]	; (8007228 <MX_GPIO_Init+0x170>)
 8007152:	f7fa fddb 	bl	8001d0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_13 
 8007156:	2200      	movs	r2, #0
 8007158:	f242 7103 	movw	r1, #9987	; 0x2703
 800715c:	4833      	ldr	r0, [pc, #204]	; (800722c <MX_GPIO_Init+0x174>)
 800715e:	f7fa fdd5 	bl	8001d0c <HAL_GPIO_WritePin>
                          |GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 8007162:	2200      	movs	r2, #0
 8007164:	2104      	movs	r1, #4
 8007166:	4832      	ldr	r0, [pc, #200]	; (8007230 <MX_GPIO_Init+0x178>)
 8007168:	f7fa fdd0 	bl	8001d0c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 PC2 
                           PC3 PC4 PC5 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_2 
 800716c:	f24e 233c 	movw	r3, #57916	; 0xe23c
 8007170:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007172:	2301      	movs	r3, #1
 8007174:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007176:	2300      	movs	r3, #0
 8007178:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800717a:	2300      	movs	r3, #0
 800717c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800717e:	f107 0314 	add.w	r3, r7, #20
 8007182:	4619      	mov	r1, r3
 8007184:	4827      	ldr	r0, [pc, #156]	; (8007224 <MX_GPIO_Init+0x16c>)
 8007186:	f7fa fc0f 	bl	80019a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA6 PA7 PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 800718a:	f44f 73e8 	mov.w	r3, #464	; 0x1d0
 800718e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007190:	2301      	movs	r3, #1
 8007192:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007194:	2300      	movs	r3, #0
 8007196:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007198:	2300      	movs	r3, #0
 800719a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800719c:	f107 0314 	add.w	r3, r7, #20
 80071a0:	4619      	mov	r1, r3
 80071a2:	4821      	ldr	r0, [pc, #132]	; (8007228 <MX_GPIO_Init+0x170>)
 80071a4:	f7fa fc00 	bl	80019a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB10 PB13 
                           PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_13 
 80071a8:	f242 7303 	movw	r3, #9987	; 0x2703
 80071ac:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80071ae:	2301      	movs	r3, #1
 80071b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80071b2:	2300      	movs	r3, #0
 80071b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80071b6:	2300      	movs	r3, #0
 80071b8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80071ba:	f107 0314 	add.w	r3, r7, #20
 80071be:	4619      	mov	r1, r3
 80071c0:	481a      	ldr	r0, [pc, #104]	; (800722c <MX_GPIO_Init+0x174>)
 80071c2:	f7fa fbf1 	bl	80019a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 80071c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80071ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80071cc:	2300      	movs	r3, #0
 80071ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80071d0:	2300      	movs	r3, #0
 80071d2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80071d4:	f107 0314 	add.w	r3, r7, #20
 80071d8:	4619      	mov	r1, r3
 80071da:	4814      	ldr	r0, [pc, #80]	; (800722c <MX_GPIO_Init+0x174>)
 80071dc:	f7fa fbe4 	bl	80019a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 80071e0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80071e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80071e6:	2300      	movs	r3, #0
 80071e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80071ea:	2300      	movs	r3, #0
 80071ec:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80071ee:	f107 0314 	add.w	r3, r7, #20
 80071f2:	4619      	mov	r1, r3
 80071f4:	480c      	ldr	r0, [pc, #48]	; (8007228 <MX_GPIO_Init+0x170>)
 80071f6:	f7fa fbd7 	bl	80019a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80071fa:	2304      	movs	r3, #4
 80071fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80071fe:	2301      	movs	r3, #1
 8007200:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007202:	2300      	movs	r3, #0
 8007204:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007206:	2300      	movs	r3, #0
 8007208:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800720a:	f107 0314 	add.w	r3, r7, #20
 800720e:	4619      	mov	r1, r3
 8007210:	4807      	ldr	r0, [pc, #28]	; (8007230 <MX_GPIO_Init+0x178>)
 8007212:	f7fa fbc9 	bl	80019a8 <HAL_GPIO_Init>

}
 8007216:	bf00      	nop
 8007218:	3728      	adds	r7, #40	; 0x28
 800721a:	46bd      	mov	sp, r7
 800721c:	bd80      	pop	{r7, pc}
 800721e:	bf00      	nop
 8007220:	40023800 	.word	0x40023800
 8007224:	40020800 	.word	0x40020800
 8007228:	40020000 	.word	0x40020000
 800722c:	40020400 	.word	0x40020400
 8007230:	40020c00 	.word	0x40020c00

08007234 <buzzer>:

/* USER CODE BEGIN 4 */
void buzzer(int sound, int length){
 8007234:	b580      	push	{r7, lr}
 8007236:	b08a      	sub	sp, #40	; 0x28
 8007238:	af00      	add	r7, sp, #0
 800723a:	6078      	str	r0, [r7, #4]
 800723c:	6039      	str	r1, [r7, #0]
	TIM_OC_InitTypeDef ConfigOC;
	ConfigOC.OCMode = TIM_OCMODE_PWM1;
 800723e:	2360      	movs	r3, #96	; 0x60
 8007240:	60fb      	str	r3, [r7, #12]
	ConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8007242:	2300      	movs	r3, #0
 8007244:	617b      	str	r3, [r7, #20]
	ConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8007246:	2300      	movs	r3, #0
 8007248:	61fb      	str	r3, [r7, #28]

	hz = 1000000 / sound;
 800724a:	4a11      	ldr	r2, [pc, #68]	; (8007290 <buzzer+0x5c>)
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	fb92 f3f3 	sdiv	r3, r2, r3
 8007252:	4a10      	ldr	r2, [pc, #64]	; (8007294 <buzzer+0x60>)
 8007254:	6013      	str	r3, [r2, #0]
	TIM3 -> ARR = hz;
 8007256:	4b0f      	ldr	r3, [pc, #60]	; (8007294 <buzzer+0x60>)
 8007258:	681a      	ldr	r2, [r3, #0]
 800725a:	4b0f      	ldr	r3, [pc, #60]	; (8007298 <buzzer+0x64>)
 800725c:	62da      	str	r2, [r3, #44]	; 0x2c
    ConfigOC.Pulse = hz / 2;
 800725e:	4b0d      	ldr	r3, [pc, #52]	; (8007294 <buzzer+0x60>)
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	0fda      	lsrs	r2, r3, #31
 8007264:	4413      	add	r3, r2
 8007266:	105b      	asrs	r3, r3, #1
 8007268:	613b      	str	r3, [r7, #16]
    HAL_TIM_PWM_ConfigChannel(&htim3, &ConfigOC, TIM_CHANNEL_2);
 800726a:	f107 030c 	add.w	r3, r7, #12
 800726e:	2204      	movs	r2, #4
 8007270:	4619      	mov	r1, r3
 8007272:	480a      	ldr	r0, [pc, #40]	; (800729c <buzzer+0x68>)
 8007274:	f7fc f956 	bl	8003524 <HAL_TIM_PWM_ConfigChannel>
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8007278:	2104      	movs	r1, #4
 800727a:	4808      	ldr	r0, [pc, #32]	; (800729c <buzzer+0x68>)
 800727c:	f7fb ff42 	bl	8003104 <HAL_TIM_PWM_Start>

	HAL_Delay(length);
 8007280:	683b      	ldr	r3, [r7, #0]
 8007282:	4618      	mov	r0, r3
 8007284:	f7f9 fea2 	bl	8000fcc <HAL_Delay>
}
 8007288:	bf00      	nop
 800728a:	3728      	adds	r7, #40	; 0x28
 800728c:	46bd      	mov	sp, r7
 800728e:	bd80      	pop	{r7, pc}
 8007290:	000f4240 	.word	0x000f4240
 8007294:	20000278 	.word	0x20000278
 8007298:	40000400 	.word	0x40000400
 800729c:	2000094c 	.word	0x2000094c

080072a0 <get_adc_value>:

int get_adc_value(ADC_HandleTypeDef *hadc, uint32_t channel){
 80072a0:	b580      	push	{r7, lr}
 80072a2:	b086      	sub	sp, #24
 80072a4:	af00      	add	r7, sp, #0
 80072a6:	6078      	str	r0, [r7, #4]
 80072a8:	6039      	str	r1, [r7, #0]

  ADC_ChannelConfTypeDef sConfig = {0};
 80072aa:	f107 0308 	add.w	r3, r7, #8
 80072ae:	2200      	movs	r2, #0
 80072b0:	601a      	str	r2, [r3, #0]
 80072b2:	605a      	str	r2, [r3, #4]
 80072b4:	609a      	str	r2, [r3, #8]
 80072b6:	60da      	str	r2, [r3, #12]

  sConfig.Channel = channel;
 80072b8:	683b      	ldr	r3, [r7, #0]
 80072ba:	60bb      	str	r3, [r7, #8]
  sConfig.Rank = 1;
 80072bc:	2301      	movs	r3, #1
 80072be:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80072c0:	2300      	movs	r3, #0
 80072c2:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80072c4:	2300      	movs	r3, #0
 80072c6:	617b      	str	r3, [r7, #20]

  HAL_ADC_ConfigChannel(hadc, &sConfig);
 80072c8:	f107 0308 	add.w	r3, r7, #8
 80072cc:	4619      	mov	r1, r3
 80072ce:	6878      	ldr	r0, [r7, #4]
 80072d0:	f7fa f83a 	bl	8001348 <HAL_ADC_ConfigChannel>

  HAL_ADC_Start(hadc);                    //
 80072d4:	6878      	ldr	r0, [r7, #4]
 80072d6:	f7f9 fedf 	bl	8001098 <HAL_ADC_Start>
  HAL_ADC_PollForConversion(hadc, 100);   //wait for ADC
 80072da:	2164      	movs	r1, #100	; 0x64
 80072dc:	6878      	ldr	r0, [r7, #4]
 80072de:	f7f9 ffa1 	bl	8001224 <HAL_ADC_PollForConversion>
  return HAL_ADC_GetValue(hadc);          //
 80072e2:	6878      	ldr	r0, [r7, #4]
 80072e4:	f7fa f822 	bl	800132c <HAL_ADC_GetValue>
 80072e8:	4603      	mov	r3, r0
}
 80072ea:	4618      	mov	r0, r3
 80072ec:	3718      	adds	r7, #24
 80072ee:	46bd      	mov	sp, r7
 80072f0:	bd80      	pop	{r7, pc}
	...

080072f4 <led_write>:

void led_write(uint8_t led1, uint8_t led2, uint8_t led3){
 80072f4:	b580      	push	{r7, lr}
 80072f6:	b082      	sub	sp, #8
 80072f8:	af00      	add	r7, sp, #0
 80072fa:	4603      	mov	r3, r0
 80072fc:	71fb      	strb	r3, [r7, #7]
 80072fe:	460b      	mov	r3, r1
 8007300:	71bb      	strb	r3, [r7, #6]
 8007302:	4613      	mov	r3, r2
 8007304:	717b      	strb	r3, [r7, #5]
	if(led1) HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8007306:	79fb      	ldrb	r3, [r7, #7]
 8007308:	2b00      	cmp	r3, #0
 800730a:	d005      	beq.n	8007318 <led_write+0x24>
 800730c:	2201      	movs	r2, #1
 800730e:	2110      	movs	r1, #16
 8007310:	4814      	ldr	r0, [pc, #80]	; (8007364 <led_write+0x70>)
 8007312:	f7fa fcfb 	bl	8001d0c <HAL_GPIO_WritePin>
 8007316:	e004      	b.n	8007322 <led_write+0x2e>
	else HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8007318:	2200      	movs	r2, #0
 800731a:	2110      	movs	r1, #16
 800731c:	4811      	ldr	r0, [pc, #68]	; (8007364 <led_write+0x70>)
 800731e:	f7fa fcf5 	bl	8001d0c <HAL_GPIO_WritePin>
	if(led2) HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 8007322:	79bb      	ldrb	r3, [r7, #6]
 8007324:	2b00      	cmp	r3, #0
 8007326:	d005      	beq.n	8007334 <led_write+0x40>
 8007328:	2201      	movs	r2, #1
 800732a:	2140      	movs	r1, #64	; 0x40
 800732c:	480d      	ldr	r0, [pc, #52]	; (8007364 <led_write+0x70>)
 800732e:	f7fa fced 	bl	8001d0c <HAL_GPIO_WritePin>
 8007332:	e004      	b.n	800733e <led_write+0x4a>
	else HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 8007334:	2200      	movs	r2, #0
 8007336:	2140      	movs	r1, #64	; 0x40
 8007338:	480a      	ldr	r0, [pc, #40]	; (8007364 <led_write+0x70>)
 800733a:	f7fa fce7 	bl	8001d0c <HAL_GPIO_WritePin>
	if(led3) HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);
 800733e:	797b      	ldrb	r3, [r7, #5]
 8007340:	2b00      	cmp	r3, #0
 8007342:	d005      	beq.n	8007350 <led_write+0x5c>
 8007344:	2201      	movs	r2, #1
 8007346:	2180      	movs	r1, #128	; 0x80
 8007348:	4806      	ldr	r0, [pc, #24]	; (8007364 <led_write+0x70>)
 800734a:	f7fa fcdf 	bl	8001d0c <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
}
 800734e:	e004      	b.n	800735a <led_write+0x66>
	else HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 8007350:	2200      	movs	r2, #0
 8007352:	2180      	movs	r1, #128	; 0x80
 8007354:	4803      	ldr	r0, [pc, #12]	; (8007364 <led_write+0x70>)
 8007356:	f7fa fcd9 	bl	8001d0c <HAL_GPIO_WritePin>
}
 800735a:	bf00      	nop
 800735c:	3708      	adds	r7, #8
 800735e:	46bd      	mov	sp, r7
 8007360:	bd80      	pop	{r7, pc}
 8007362:	bf00      	nop
 8007364:	40020000 	.word	0x40020000

08007368 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8007368:	b480      	push	{r7}
 800736a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800736c:	bf00      	nop
 800736e:	46bd      	mov	sp, r7
 8007370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007374:	4770      	bx	lr
	...

08007378 <get_wall_info>:
	base_r = ad_r;										//kijun R

	return res;											//
}

void get_wall_info(){
 8007378:	b480      	push	{r7}
 800737a:	af00      	add	r7, sp, #0

	//----reset----
	wall_info = 0x00;									//wall
 800737c:	4b16      	ldr	r3, [pc, #88]	; (80073d8 <get_wall_info+0x60>)
 800737e:	2200      	movs	r2, #0
 8007380:	701a      	strb	r2, [r3, #0]
	//----look forward----
	if(ad_fr > WALL_BASE_FR || ad_fl > WALL_BASE_FL){
 8007382:	4b16      	ldr	r3, [pc, #88]	; (80073dc <get_wall_info+0x64>)
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	2b28      	cmp	r3, #40	; 0x28
 8007388:	d803      	bhi.n	8007392 <get_wall_info+0x1a>
 800738a:	4b15      	ldr	r3, [pc, #84]	; (80073e0 <get_wall_info+0x68>)
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	2b96      	cmp	r3, #150	; 0x96
 8007390:	d906      	bls.n	80073a0 <get_wall_info+0x28>
		//
		wall_info |= 0x88;								//forward check
 8007392:	4b11      	ldr	r3, [pc, #68]	; (80073d8 <get_wall_info+0x60>)
 8007394:	781b      	ldrb	r3, [r3, #0]
 8007396:	f063 0377 	orn	r3, r3, #119	; 0x77
 800739a:	b2da      	uxtb	r2, r3
 800739c:	4b0e      	ldr	r3, [pc, #56]	; (80073d8 <get_wall_info+0x60>)
 800739e:	701a      	strb	r2, [r3, #0]
	}
	//----look right----
	if(ad_r > WALL_BASE_R){
 80073a0:	4b10      	ldr	r3, [pc, #64]	; (80073e4 <get_wall_info+0x6c>)
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	2b32      	cmp	r3, #50	; 0x32
 80073a6:	d906      	bls.n	80073b6 <get_wall_info+0x3e>
		//
		wall_info |= 0x44;								//right check
 80073a8:	4b0b      	ldr	r3, [pc, #44]	; (80073d8 <get_wall_info+0x60>)
 80073aa:	781b      	ldrb	r3, [r3, #0]
 80073ac:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 80073b0:	b2da      	uxtb	r2, r3
 80073b2:	4b09      	ldr	r3, [pc, #36]	; (80073d8 <get_wall_info+0x60>)
 80073b4:	701a      	strb	r2, [r3, #0]
	}
	//----look left----
	if(ad_l > WALL_BASE_L){
 80073b6:	4b0c      	ldr	r3, [pc, #48]	; (80073e8 <get_wall_info+0x70>)
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	2b64      	cmp	r3, #100	; 0x64
 80073bc:	d906      	bls.n	80073cc <get_wall_info+0x54>
		//
		wall_info |= 0x11;								//light check
 80073be:	4b06      	ldr	r3, [pc, #24]	; (80073d8 <get_wall_info+0x60>)
 80073c0:	781b      	ldrb	r3, [r3, #0]
 80073c2:	f043 0311 	orr.w	r3, r3, #17
 80073c6:	b2da      	uxtb	r2, r3
 80073c8:	4b03      	ldr	r3, [pc, #12]	; (80073d8 <get_wall_info+0x60>)
 80073ca:	701a      	strb	r2, [r3, #0]
	}
}
 80073cc:	bf00      	nop
 80073ce:	46bd      	mov	sp, r7
 80073d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d4:	4770      	bx	lr
 80073d6:	bf00      	nop
 80073d8:	2000027c 	.word	0x2000027c
 80073dc:	20000a9c 	.word	0x20000a9c
 80073e0:	20000bec 	.word	0x20000bec
 80073e4:	20000df8 	.word	0x20000df8
 80073e8:	200009a0 	.word	0x200009a0

080073ec <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80073ec:	b480      	push	{r7}
 80073ee:	b083      	sub	sp, #12
 80073f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80073f2:	2300      	movs	r3, #0
 80073f4:	607b      	str	r3, [r7, #4]
 80073f6:	4b10      	ldr	r3, [pc, #64]	; (8007438 <HAL_MspInit+0x4c>)
 80073f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80073fa:	4a0f      	ldr	r2, [pc, #60]	; (8007438 <HAL_MspInit+0x4c>)
 80073fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007400:	6453      	str	r3, [r2, #68]	; 0x44
 8007402:	4b0d      	ldr	r3, [pc, #52]	; (8007438 <HAL_MspInit+0x4c>)
 8007404:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007406:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800740a:	607b      	str	r3, [r7, #4]
 800740c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800740e:	2300      	movs	r3, #0
 8007410:	603b      	str	r3, [r7, #0]
 8007412:	4b09      	ldr	r3, [pc, #36]	; (8007438 <HAL_MspInit+0x4c>)
 8007414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007416:	4a08      	ldr	r2, [pc, #32]	; (8007438 <HAL_MspInit+0x4c>)
 8007418:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800741c:	6413      	str	r3, [r2, #64]	; 0x40
 800741e:	4b06      	ldr	r3, [pc, #24]	; (8007438 <HAL_MspInit+0x4c>)
 8007420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007422:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007426:	603b      	str	r3, [r7, #0]
 8007428:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800742a:	bf00      	nop
 800742c:	370c      	adds	r7, #12
 800742e:	46bd      	mov	sp, r7
 8007430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007434:	4770      	bx	lr
 8007436:	bf00      	nop
 8007438:	40023800 	.word	0x40023800

0800743c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800743c:	b580      	push	{r7, lr}
 800743e:	b08a      	sub	sp, #40	; 0x28
 8007440:	af00      	add	r7, sp, #0
 8007442:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007444:	f107 0314 	add.w	r3, r7, #20
 8007448:	2200      	movs	r2, #0
 800744a:	601a      	str	r2, [r3, #0]
 800744c:	605a      	str	r2, [r3, #4]
 800744e:	609a      	str	r2, [r3, #8]
 8007450:	60da      	str	r2, [r3, #12]
 8007452:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	4a17      	ldr	r2, [pc, #92]	; (80074b8 <HAL_ADC_MspInit+0x7c>)
 800745a:	4293      	cmp	r3, r2
 800745c:	d127      	bne.n	80074ae <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800745e:	2300      	movs	r3, #0
 8007460:	613b      	str	r3, [r7, #16]
 8007462:	4b16      	ldr	r3, [pc, #88]	; (80074bc <HAL_ADC_MspInit+0x80>)
 8007464:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007466:	4a15      	ldr	r2, [pc, #84]	; (80074bc <HAL_ADC_MspInit+0x80>)
 8007468:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800746c:	6453      	str	r3, [r2, #68]	; 0x44
 800746e:	4b13      	ldr	r3, [pc, #76]	; (80074bc <HAL_ADC_MspInit+0x80>)
 8007470:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007472:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007476:	613b      	str	r3, [r7, #16]
 8007478:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800747a:	2300      	movs	r3, #0
 800747c:	60fb      	str	r3, [r7, #12]
 800747e:	4b0f      	ldr	r3, [pc, #60]	; (80074bc <HAL_ADC_MspInit+0x80>)
 8007480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007482:	4a0e      	ldr	r2, [pc, #56]	; (80074bc <HAL_ADC_MspInit+0x80>)
 8007484:	f043 0301 	orr.w	r3, r3, #1
 8007488:	6313      	str	r3, [r2, #48]	; 0x30
 800748a:	4b0c      	ldr	r3, [pc, #48]	; (80074bc <HAL_ADC_MspInit+0x80>)
 800748c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800748e:	f003 0301 	and.w	r3, r3, #1
 8007492:	60fb      	str	r3, [r7, #12]
 8007494:	68fb      	ldr	r3, [r7, #12]
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8007496:	230f      	movs	r3, #15
 8007498:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800749a:	2303      	movs	r3, #3
 800749c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800749e:	2300      	movs	r3, #0
 80074a0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80074a2:	f107 0314 	add.w	r3, r7, #20
 80074a6:	4619      	mov	r1, r3
 80074a8:	4805      	ldr	r0, [pc, #20]	; (80074c0 <HAL_ADC_MspInit+0x84>)
 80074aa:	f7fa fa7d 	bl	80019a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80074ae:	bf00      	nop
 80074b0:	3728      	adds	r7, #40	; 0x28
 80074b2:	46bd      	mov	sp, r7
 80074b4:	bd80      	pop	{r7, pc}
 80074b6:	bf00      	nop
 80074b8:	40012000 	.word	0x40012000
 80074bc:	40023800 	.word	0x40023800
 80074c0:	40020000 	.word	0x40020000

080074c4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80074c4:	b580      	push	{r7, lr}
 80074c6:	b08a      	sub	sp, #40	; 0x28
 80074c8:	af00      	add	r7, sp, #0
 80074ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80074cc:	f107 0314 	add.w	r3, r7, #20
 80074d0:	2200      	movs	r2, #0
 80074d2:	601a      	str	r2, [r3, #0]
 80074d4:	605a      	str	r2, [r3, #4]
 80074d6:	609a      	str	r2, [r3, #8]
 80074d8:	60da      	str	r2, [r3, #12]
 80074da:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	4a19      	ldr	r2, [pc, #100]	; (8007548 <HAL_SPI_MspInit+0x84>)
 80074e2:	4293      	cmp	r3, r2
 80074e4:	d12c      	bne.n	8007540 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80074e6:	2300      	movs	r3, #0
 80074e8:	613b      	str	r3, [r7, #16]
 80074ea:	4b18      	ldr	r3, [pc, #96]	; (800754c <HAL_SPI_MspInit+0x88>)
 80074ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074ee:	4a17      	ldr	r2, [pc, #92]	; (800754c <HAL_SPI_MspInit+0x88>)
 80074f0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80074f4:	6413      	str	r3, [r2, #64]	; 0x40
 80074f6:	4b15      	ldr	r3, [pc, #84]	; (800754c <HAL_SPI_MspInit+0x88>)
 80074f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074fa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80074fe:	613b      	str	r3, [r7, #16]
 8007500:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007502:	2300      	movs	r3, #0
 8007504:	60fb      	str	r3, [r7, #12]
 8007506:	4b11      	ldr	r3, [pc, #68]	; (800754c <HAL_SPI_MspInit+0x88>)
 8007508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800750a:	4a10      	ldr	r2, [pc, #64]	; (800754c <HAL_SPI_MspInit+0x88>)
 800750c:	f043 0304 	orr.w	r3, r3, #4
 8007510:	6313      	str	r3, [r2, #48]	; 0x30
 8007512:	4b0e      	ldr	r3, [pc, #56]	; (800754c <HAL_SPI_MspInit+0x88>)
 8007514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007516:	f003 0304 	and.w	r3, r3, #4
 800751a:	60fb      	str	r3, [r7, #12]
 800751c:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration    
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 800751e:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8007522:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007524:	2302      	movs	r3, #2
 8007526:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007528:	2300      	movs	r3, #0
 800752a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800752c:	2303      	movs	r3, #3
 800752e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8007530:	2306      	movs	r3, #6
 8007532:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007534:	f107 0314 	add.w	r3, r7, #20
 8007538:	4619      	mov	r1, r3
 800753a:	4805      	ldr	r0, [pc, #20]	; (8007550 <HAL_SPI_MspInit+0x8c>)
 800753c:	f7fa fa34 	bl	80019a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8007540:	bf00      	nop
 8007542:	3728      	adds	r7, #40	; 0x28
 8007544:	46bd      	mov	sp, r7
 8007546:	bd80      	pop	{r7, pc}
 8007548:	40003c00 	.word	0x40003c00
 800754c:	40023800 	.word	0x40023800
 8007550:	40020800 	.word	0x40020800

08007554 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8007554:	b580      	push	{r7, lr}
 8007556:	b086      	sub	sp, #24
 8007558:	af00      	add	r7, sp, #0
 800755a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007564:	d10e      	bne.n	8007584 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8007566:	2300      	movs	r3, #0
 8007568:	617b      	str	r3, [r7, #20]
 800756a:	4b20      	ldr	r3, [pc, #128]	; (80075ec <HAL_TIM_Base_MspInit+0x98>)
 800756c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800756e:	4a1f      	ldr	r2, [pc, #124]	; (80075ec <HAL_TIM_Base_MspInit+0x98>)
 8007570:	f043 0301 	orr.w	r3, r3, #1
 8007574:	6413      	str	r3, [r2, #64]	; 0x40
 8007576:	4b1d      	ldr	r3, [pc, #116]	; (80075ec <HAL_TIM_Base_MspInit+0x98>)
 8007578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800757a:	f003 0301 	and.w	r3, r3, #1
 800757e:	617b      	str	r3, [r7, #20]
 8007580:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8007582:	e02e      	b.n	80075e2 <HAL_TIM_Base_MspInit+0x8e>
  else if(htim_base->Instance==TIM3)
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	4a19      	ldr	r2, [pc, #100]	; (80075f0 <HAL_TIM_Base_MspInit+0x9c>)
 800758a:	4293      	cmp	r3, r2
 800758c:	d10e      	bne.n	80075ac <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800758e:	2300      	movs	r3, #0
 8007590:	613b      	str	r3, [r7, #16]
 8007592:	4b16      	ldr	r3, [pc, #88]	; (80075ec <HAL_TIM_Base_MspInit+0x98>)
 8007594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007596:	4a15      	ldr	r2, [pc, #84]	; (80075ec <HAL_TIM_Base_MspInit+0x98>)
 8007598:	f043 0302 	orr.w	r3, r3, #2
 800759c:	6413      	str	r3, [r2, #64]	; 0x40
 800759e:	4b13      	ldr	r3, [pc, #76]	; (80075ec <HAL_TIM_Base_MspInit+0x98>)
 80075a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075a2:	f003 0302 	and.w	r3, r3, #2
 80075a6:	613b      	str	r3, [r7, #16]
 80075a8:	693b      	ldr	r3, [r7, #16]
}
 80075aa:	e01a      	b.n	80075e2 <HAL_TIM_Base_MspInit+0x8e>
  else if(htim_base->Instance==TIM6)
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	4a10      	ldr	r2, [pc, #64]	; (80075f4 <HAL_TIM_Base_MspInit+0xa0>)
 80075b2:	4293      	cmp	r3, r2
 80075b4:	d115      	bne.n	80075e2 <HAL_TIM_Base_MspInit+0x8e>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80075b6:	2300      	movs	r3, #0
 80075b8:	60fb      	str	r3, [r7, #12]
 80075ba:	4b0c      	ldr	r3, [pc, #48]	; (80075ec <HAL_TIM_Base_MspInit+0x98>)
 80075bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075be:	4a0b      	ldr	r2, [pc, #44]	; (80075ec <HAL_TIM_Base_MspInit+0x98>)
 80075c0:	f043 0310 	orr.w	r3, r3, #16
 80075c4:	6413      	str	r3, [r2, #64]	; 0x40
 80075c6:	4b09      	ldr	r3, [pc, #36]	; (80075ec <HAL_TIM_Base_MspInit+0x98>)
 80075c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075ca:	f003 0310 	and.w	r3, r3, #16
 80075ce:	60fb      	str	r3, [r7, #12]
 80075d0:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80075d2:	2200      	movs	r2, #0
 80075d4:	2100      	movs	r1, #0
 80075d6:	2036      	movs	r0, #54	; 0x36
 80075d8:	f7fa f9af 	bl	800193a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80075dc:	2036      	movs	r0, #54	; 0x36
 80075de:	f7fa f9c8 	bl	8001972 <HAL_NVIC_EnableIRQ>
}
 80075e2:	bf00      	nop
 80075e4:	3718      	adds	r7, #24
 80075e6:	46bd      	mov	sp, r7
 80075e8:	bd80      	pop	{r7, pc}
 80075ea:	bf00      	nop
 80075ec:	40023800 	.word	0x40023800
 80075f0:	40000400 	.word	0x40000400
 80075f4:	40001000 	.word	0x40001000

080075f8 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80075f8:	b580      	push	{r7, lr}
 80075fa:	b08c      	sub	sp, #48	; 0x30
 80075fc:	af00      	add	r7, sp, #0
 80075fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007600:	f107 031c 	add.w	r3, r7, #28
 8007604:	2200      	movs	r2, #0
 8007606:	601a      	str	r2, [r3, #0]
 8007608:	605a      	str	r2, [r3, #4]
 800760a:	609a      	str	r2, [r3, #8]
 800760c:	60da      	str	r2, [r3, #12]
 800760e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM4)
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	4a32      	ldr	r2, [pc, #200]	; (80076e0 <HAL_TIM_Encoder_MspInit+0xe8>)
 8007616:	4293      	cmp	r3, r2
 8007618:	d12c      	bne.n	8007674 <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800761a:	2300      	movs	r3, #0
 800761c:	61bb      	str	r3, [r7, #24]
 800761e:	4b31      	ldr	r3, [pc, #196]	; (80076e4 <HAL_TIM_Encoder_MspInit+0xec>)
 8007620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007622:	4a30      	ldr	r2, [pc, #192]	; (80076e4 <HAL_TIM_Encoder_MspInit+0xec>)
 8007624:	f043 0304 	orr.w	r3, r3, #4
 8007628:	6413      	str	r3, [r2, #64]	; 0x40
 800762a:	4b2e      	ldr	r3, [pc, #184]	; (80076e4 <HAL_TIM_Encoder_MspInit+0xec>)
 800762c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800762e:	f003 0304 	and.w	r3, r3, #4
 8007632:	61bb      	str	r3, [r7, #24]
 8007634:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007636:	2300      	movs	r3, #0
 8007638:	617b      	str	r3, [r7, #20]
 800763a:	4b2a      	ldr	r3, [pc, #168]	; (80076e4 <HAL_TIM_Encoder_MspInit+0xec>)
 800763c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800763e:	4a29      	ldr	r2, [pc, #164]	; (80076e4 <HAL_TIM_Encoder_MspInit+0xec>)
 8007640:	f043 0302 	orr.w	r3, r3, #2
 8007644:	6313      	str	r3, [r2, #48]	; 0x30
 8007646:	4b27      	ldr	r3, [pc, #156]	; (80076e4 <HAL_TIM_Encoder_MspInit+0xec>)
 8007648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800764a:	f003 0302 	and.w	r3, r3, #2
 800764e:	617b      	str	r3, [r7, #20]
 8007650:	697b      	ldr	r3, [r7, #20]
    /**TIM4 GPIO Configuration    
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8007652:	23c0      	movs	r3, #192	; 0xc0
 8007654:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007656:	2302      	movs	r3, #2
 8007658:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800765a:	2300      	movs	r3, #0
 800765c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800765e:	2300      	movs	r3, #0
 8007660:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8007662:	2302      	movs	r3, #2
 8007664:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007666:	f107 031c 	add.w	r3, r7, #28
 800766a:	4619      	mov	r1, r3
 800766c:	481e      	ldr	r0, [pc, #120]	; (80076e8 <HAL_TIM_Encoder_MspInit+0xf0>)
 800766e:	f7fa f99b 	bl	80019a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8007672:	e030      	b.n	80076d6 <HAL_TIM_Encoder_MspInit+0xde>
  else if(htim_encoder->Instance==TIM8)
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	4a1c      	ldr	r2, [pc, #112]	; (80076ec <HAL_TIM_Encoder_MspInit+0xf4>)
 800767a:	4293      	cmp	r3, r2
 800767c:	d12b      	bne.n	80076d6 <HAL_TIM_Encoder_MspInit+0xde>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800767e:	2300      	movs	r3, #0
 8007680:	613b      	str	r3, [r7, #16]
 8007682:	4b18      	ldr	r3, [pc, #96]	; (80076e4 <HAL_TIM_Encoder_MspInit+0xec>)
 8007684:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007686:	4a17      	ldr	r2, [pc, #92]	; (80076e4 <HAL_TIM_Encoder_MspInit+0xec>)
 8007688:	f043 0302 	orr.w	r3, r3, #2
 800768c:	6453      	str	r3, [r2, #68]	; 0x44
 800768e:	4b15      	ldr	r3, [pc, #84]	; (80076e4 <HAL_TIM_Encoder_MspInit+0xec>)
 8007690:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007692:	f003 0302 	and.w	r3, r3, #2
 8007696:	613b      	str	r3, [r7, #16]
 8007698:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800769a:	2300      	movs	r3, #0
 800769c:	60fb      	str	r3, [r7, #12]
 800769e:	4b11      	ldr	r3, [pc, #68]	; (80076e4 <HAL_TIM_Encoder_MspInit+0xec>)
 80076a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076a2:	4a10      	ldr	r2, [pc, #64]	; (80076e4 <HAL_TIM_Encoder_MspInit+0xec>)
 80076a4:	f043 0304 	orr.w	r3, r3, #4
 80076a8:	6313      	str	r3, [r2, #48]	; 0x30
 80076aa:	4b0e      	ldr	r3, [pc, #56]	; (80076e4 <HAL_TIM_Encoder_MspInit+0xec>)
 80076ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076ae:	f003 0304 	and.w	r3, r3, #4
 80076b2:	60fb      	str	r3, [r7, #12]
 80076b4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80076b6:	23c0      	movs	r3, #192	; 0xc0
 80076b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80076ba:	2302      	movs	r3, #2
 80076bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80076be:	2300      	movs	r3, #0
 80076c0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80076c2:	2300      	movs	r3, #0
 80076c4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80076c6:	2303      	movs	r3, #3
 80076c8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80076ca:	f107 031c 	add.w	r3, r7, #28
 80076ce:	4619      	mov	r1, r3
 80076d0:	4807      	ldr	r0, [pc, #28]	; (80076f0 <HAL_TIM_Encoder_MspInit+0xf8>)
 80076d2:	f7fa f969 	bl	80019a8 <HAL_GPIO_Init>
}
 80076d6:	bf00      	nop
 80076d8:	3730      	adds	r7, #48	; 0x30
 80076da:	46bd      	mov	sp, r7
 80076dc:	bd80      	pop	{r7, pc}
 80076de:	bf00      	nop
 80076e0:	40000800 	.word	0x40000800
 80076e4:	40023800 	.word	0x40023800
 80076e8:	40020400 	.word	0x40020400
 80076ec:	40010400 	.word	0x40010400
 80076f0:	40020800 	.word	0x40020800

080076f4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80076f4:	b580      	push	{r7, lr}
 80076f6:	b08a      	sub	sp, #40	; 0x28
 80076f8:	af00      	add	r7, sp, #0
 80076fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80076fc:	f107 0314 	add.w	r3, r7, #20
 8007700:	2200      	movs	r2, #0
 8007702:	601a      	str	r2, [r3, #0]
 8007704:	605a      	str	r2, [r3, #4]
 8007706:	609a      	str	r2, [r3, #8]
 8007708:	60da      	str	r2, [r3, #12]
 800770a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007714:	d13d      	bne.n	8007792 <HAL_TIM_MspPostInit+0x9e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007716:	2300      	movs	r3, #0
 8007718:	613b      	str	r3, [r7, #16]
 800771a:	4b31      	ldr	r3, [pc, #196]	; (80077e0 <HAL_TIM_MspPostInit+0xec>)
 800771c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800771e:	4a30      	ldr	r2, [pc, #192]	; (80077e0 <HAL_TIM_MspPostInit+0xec>)
 8007720:	f043 0301 	orr.w	r3, r3, #1
 8007724:	6313      	str	r3, [r2, #48]	; 0x30
 8007726:	4b2e      	ldr	r3, [pc, #184]	; (80077e0 <HAL_TIM_MspPostInit+0xec>)
 8007728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800772a:	f003 0301 	and.w	r3, r3, #1
 800772e:	613b      	str	r3, [r7, #16]
 8007730:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007732:	2300      	movs	r3, #0
 8007734:	60fb      	str	r3, [r7, #12]
 8007736:	4b2a      	ldr	r3, [pc, #168]	; (80077e0 <HAL_TIM_MspPostInit+0xec>)
 8007738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800773a:	4a29      	ldr	r2, [pc, #164]	; (80077e0 <HAL_TIM_MspPostInit+0xec>)
 800773c:	f043 0302 	orr.w	r3, r3, #2
 8007740:	6313      	str	r3, [r2, #48]	; 0x30
 8007742:	4b27      	ldr	r3, [pc, #156]	; (80077e0 <HAL_TIM_MspPostInit+0xec>)
 8007744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007746:	f003 0302 	and.w	r3, r3, #2
 800774a:	60fb      	str	r3, [r7, #12]
 800774c:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration    
    PA5     ------> TIM2_CH1
    PB11     ------> TIM2_CH4 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800774e:	2320      	movs	r3, #32
 8007750:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007752:	2302      	movs	r3, #2
 8007754:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007756:	2300      	movs	r3, #0
 8007758:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800775a:	2300      	movs	r3, #0
 800775c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800775e:	2301      	movs	r3, #1
 8007760:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007762:	f107 0314 	add.w	r3, r7, #20
 8007766:	4619      	mov	r1, r3
 8007768:	481e      	ldr	r0, [pc, #120]	; (80077e4 <HAL_TIM_MspPostInit+0xf0>)
 800776a:	f7fa f91d 	bl	80019a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800776e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007772:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007774:	2302      	movs	r3, #2
 8007776:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007778:	2300      	movs	r3, #0
 800777a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800777c:	2300      	movs	r3, #0
 800777e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8007780:	2301      	movs	r3, #1
 8007782:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007784:	f107 0314 	add.w	r3, r7, #20
 8007788:	4619      	mov	r1, r3
 800778a:	4817      	ldr	r0, [pc, #92]	; (80077e8 <HAL_TIM_MspPostInit+0xf4>)
 800778c:	f7fa f90c 	bl	80019a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8007790:	e022      	b.n	80077d8 <HAL_TIM_MspPostInit+0xe4>
  else if(htim->Instance==TIM3)
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	4a15      	ldr	r2, [pc, #84]	; (80077ec <HAL_TIM_MspPostInit+0xf8>)
 8007798:	4293      	cmp	r3, r2
 800779a:	d11d      	bne.n	80077d8 <HAL_TIM_MspPostInit+0xe4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800779c:	2300      	movs	r3, #0
 800779e:	60bb      	str	r3, [r7, #8]
 80077a0:	4b0f      	ldr	r3, [pc, #60]	; (80077e0 <HAL_TIM_MspPostInit+0xec>)
 80077a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077a4:	4a0e      	ldr	r2, [pc, #56]	; (80077e0 <HAL_TIM_MspPostInit+0xec>)
 80077a6:	f043 0302 	orr.w	r3, r3, #2
 80077aa:	6313      	str	r3, [r2, #48]	; 0x30
 80077ac:	4b0c      	ldr	r3, [pc, #48]	; (80077e0 <HAL_TIM_MspPostInit+0xec>)
 80077ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077b0:	f003 0302 	and.w	r3, r3, #2
 80077b4:	60bb      	str	r3, [r7, #8]
 80077b6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80077b8:	2320      	movs	r3, #32
 80077ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80077bc:	2302      	movs	r3, #2
 80077be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80077c0:	2300      	movs	r3, #0
 80077c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80077c4:	2300      	movs	r3, #0
 80077c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80077c8:	2302      	movs	r3, #2
 80077ca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80077cc:	f107 0314 	add.w	r3, r7, #20
 80077d0:	4619      	mov	r1, r3
 80077d2:	4805      	ldr	r0, [pc, #20]	; (80077e8 <HAL_TIM_MspPostInit+0xf4>)
 80077d4:	f7fa f8e8 	bl	80019a8 <HAL_GPIO_Init>
}
 80077d8:	bf00      	nop
 80077da:	3728      	adds	r7, #40	; 0x28
 80077dc:	46bd      	mov	sp, r7
 80077de:	bd80      	pop	{r7, pc}
 80077e0:	40023800 	.word	0x40023800
 80077e4:	40020000 	.word	0x40020000
 80077e8:	40020400 	.word	0x40020400
 80077ec:	40000400 	.word	0x40000400

080077f0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80077f0:	b580      	push	{r7, lr}
 80077f2:	b08a      	sub	sp, #40	; 0x28
 80077f4:	af00      	add	r7, sp, #0
 80077f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80077f8:	f107 0314 	add.w	r3, r7, #20
 80077fc:	2200      	movs	r2, #0
 80077fe:	601a      	str	r2, [r3, #0]
 8007800:	605a      	str	r2, [r3, #4]
 8007802:	609a      	str	r2, [r3, #8]
 8007804:	60da      	str	r2, [r3, #12]
 8007806:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	4a19      	ldr	r2, [pc, #100]	; (8007874 <HAL_UART_MspInit+0x84>)
 800780e:	4293      	cmp	r3, r2
 8007810:	d12c      	bne.n	800786c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8007812:	2300      	movs	r3, #0
 8007814:	613b      	str	r3, [r7, #16]
 8007816:	4b18      	ldr	r3, [pc, #96]	; (8007878 <HAL_UART_MspInit+0x88>)
 8007818:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800781a:	4a17      	ldr	r2, [pc, #92]	; (8007878 <HAL_UART_MspInit+0x88>)
 800781c:	f043 0310 	orr.w	r3, r3, #16
 8007820:	6453      	str	r3, [r2, #68]	; 0x44
 8007822:	4b15      	ldr	r3, [pc, #84]	; (8007878 <HAL_UART_MspInit+0x88>)
 8007824:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007826:	f003 0310 	and.w	r3, r3, #16
 800782a:	613b      	str	r3, [r7, #16]
 800782c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800782e:	2300      	movs	r3, #0
 8007830:	60fb      	str	r3, [r7, #12]
 8007832:	4b11      	ldr	r3, [pc, #68]	; (8007878 <HAL_UART_MspInit+0x88>)
 8007834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007836:	4a10      	ldr	r2, [pc, #64]	; (8007878 <HAL_UART_MspInit+0x88>)
 8007838:	f043 0301 	orr.w	r3, r3, #1
 800783c:	6313      	str	r3, [r2, #48]	; 0x30
 800783e:	4b0e      	ldr	r3, [pc, #56]	; (8007878 <HAL_UART_MspInit+0x88>)
 8007840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007842:	f003 0301 	and.w	r3, r3, #1
 8007846:	60fb      	str	r3, [r7, #12]
 8007848:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800784a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800784e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007850:	2302      	movs	r3, #2
 8007852:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007854:	2301      	movs	r3, #1
 8007856:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007858:	2303      	movs	r3, #3
 800785a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800785c:	2307      	movs	r3, #7
 800785e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007860:	f107 0314 	add.w	r3, r7, #20
 8007864:	4619      	mov	r1, r3
 8007866:	4805      	ldr	r0, [pc, #20]	; (800787c <HAL_UART_MspInit+0x8c>)
 8007868:	f7fa f89e 	bl	80019a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800786c:	bf00      	nop
 800786e:	3728      	adds	r7, #40	; 0x28
 8007870:	46bd      	mov	sp, r7
 8007872:	bd80      	pop	{r7, pc}
 8007874:	40011000 	.word	0x40011000
 8007878:	40023800 	.word	0x40023800
 800787c:	40020000 	.word	0x40020000

08007880 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8007880:	b480      	push	{r7}
 8007882:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8007884:	bf00      	nop
 8007886:	46bd      	mov	sp, r7
 8007888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800788c:	4770      	bx	lr

0800788e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800788e:	b480      	push	{r7}
 8007890:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8007892:	e7fe      	b.n	8007892 <HardFault_Handler+0x4>

08007894 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8007894:	b480      	push	{r7}
 8007896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8007898:	e7fe      	b.n	8007898 <MemManage_Handler+0x4>

0800789a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800789a:	b480      	push	{r7}
 800789c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800789e:	e7fe      	b.n	800789e <BusFault_Handler+0x4>

080078a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80078a0:	b480      	push	{r7}
 80078a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80078a4:	e7fe      	b.n	80078a4 <UsageFault_Handler+0x4>

080078a6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80078a6:	b480      	push	{r7}
 80078a8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80078aa:	bf00      	nop
 80078ac:	46bd      	mov	sp, r7
 80078ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b2:	4770      	bx	lr

080078b4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80078b4:	b480      	push	{r7}
 80078b6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80078b8:	bf00      	nop
 80078ba:	46bd      	mov	sp, r7
 80078bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c0:	4770      	bx	lr

080078c2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80078c2:	b480      	push	{r7}
 80078c4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80078c6:	bf00      	nop
 80078c8:	46bd      	mov	sp, r7
 80078ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ce:	4770      	bx	lr

080078d0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80078d0:	b580      	push	{r7, lr}
 80078d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80078d4:	f7f9 fb5a 	bl	8000f8c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80078d8:	bf00      	nop
 80078da:	bd80      	pop	{r7, pc}

080078dc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80078dc:	b580      	push	{r7, lr}
 80078de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80078e0:	4802      	ldr	r0, [pc, #8]	; (80078ec <TIM6_DAC_IRQHandler+0x10>)
 80078e2:	f7fb fd16 	bl	8003312 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80078e6:	bf00      	nop
 80078e8:	bd80      	pop	{r7, pc}
 80078ea:	bf00      	nop
 80078ec:	20000a50 	.word	0x20000a50

080078f0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80078f0:	b580      	push	{r7, lr}
 80078f2:	b086      	sub	sp, #24
 80078f4:	af00      	add	r7, sp, #0
 80078f6:	60f8      	str	r0, [r7, #12]
 80078f8:	60b9      	str	r1, [r7, #8]
 80078fa:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80078fc:	2300      	movs	r3, #0
 80078fe:	617b      	str	r3, [r7, #20]
 8007900:	e00a      	b.n	8007918 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8007902:	f3af 8000 	nop.w
 8007906:	4601      	mov	r1, r0
 8007908:	68bb      	ldr	r3, [r7, #8]
 800790a:	1c5a      	adds	r2, r3, #1
 800790c:	60ba      	str	r2, [r7, #8]
 800790e:	b2ca      	uxtb	r2, r1
 8007910:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007912:	697b      	ldr	r3, [r7, #20]
 8007914:	3301      	adds	r3, #1
 8007916:	617b      	str	r3, [r7, #20]
 8007918:	697a      	ldr	r2, [r7, #20]
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	429a      	cmp	r2, r3
 800791e:	dbf0      	blt.n	8007902 <_read+0x12>
	}

return len;
 8007920:	687b      	ldr	r3, [r7, #4]
}
 8007922:	4618      	mov	r0, r3
 8007924:	3718      	adds	r7, #24
 8007926:	46bd      	mov	sp, r7
 8007928:	bd80      	pop	{r7, pc}

0800792a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800792a:	b580      	push	{r7, lr}
 800792c:	b086      	sub	sp, #24
 800792e:	af00      	add	r7, sp, #0
 8007930:	60f8      	str	r0, [r7, #12]
 8007932:	60b9      	str	r1, [r7, #8]
 8007934:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007936:	2300      	movs	r3, #0
 8007938:	617b      	str	r3, [r7, #20]
 800793a:	e009      	b.n	8007950 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800793c:	68bb      	ldr	r3, [r7, #8]
 800793e:	1c5a      	adds	r2, r3, #1
 8007940:	60ba      	str	r2, [r7, #8]
 8007942:	781b      	ldrb	r3, [r3, #0]
 8007944:	4618      	mov	r0, r3
 8007946:	f7fd ffe3 	bl	8005910 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800794a:	697b      	ldr	r3, [r7, #20]
 800794c:	3301      	adds	r3, #1
 800794e:	617b      	str	r3, [r7, #20]
 8007950:	697a      	ldr	r2, [r7, #20]
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	429a      	cmp	r2, r3
 8007956:	dbf1      	blt.n	800793c <_write+0x12>
	}
	return len;
 8007958:	687b      	ldr	r3, [r7, #4]
}
 800795a:	4618      	mov	r0, r3
 800795c:	3718      	adds	r7, #24
 800795e:	46bd      	mov	sp, r7
 8007960:	bd80      	pop	{r7, pc}

08007962 <_close>:

int _close(int file)
{
 8007962:	b480      	push	{r7}
 8007964:	b083      	sub	sp, #12
 8007966:	af00      	add	r7, sp, #0
 8007968:	6078      	str	r0, [r7, #4]
	return -1;
 800796a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800796e:	4618      	mov	r0, r3
 8007970:	370c      	adds	r7, #12
 8007972:	46bd      	mov	sp, r7
 8007974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007978:	4770      	bx	lr

0800797a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800797a:	b480      	push	{r7}
 800797c:	b083      	sub	sp, #12
 800797e:	af00      	add	r7, sp, #0
 8007980:	6078      	str	r0, [r7, #4]
 8007982:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8007984:	683b      	ldr	r3, [r7, #0]
 8007986:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800798a:	605a      	str	r2, [r3, #4]
	return 0;
 800798c:	2300      	movs	r3, #0
}
 800798e:	4618      	mov	r0, r3
 8007990:	370c      	adds	r7, #12
 8007992:	46bd      	mov	sp, r7
 8007994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007998:	4770      	bx	lr

0800799a <_isatty>:

int _isatty(int file)
{
 800799a:	b480      	push	{r7}
 800799c:	b083      	sub	sp, #12
 800799e:	af00      	add	r7, sp, #0
 80079a0:	6078      	str	r0, [r7, #4]
	return 1;
 80079a2:	2301      	movs	r3, #1
}
 80079a4:	4618      	mov	r0, r3
 80079a6:	370c      	adds	r7, #12
 80079a8:	46bd      	mov	sp, r7
 80079aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ae:	4770      	bx	lr

080079b0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80079b0:	b480      	push	{r7}
 80079b2:	b085      	sub	sp, #20
 80079b4:	af00      	add	r7, sp, #0
 80079b6:	60f8      	str	r0, [r7, #12]
 80079b8:	60b9      	str	r1, [r7, #8]
 80079ba:	607a      	str	r2, [r7, #4]
	return 0;
 80079bc:	2300      	movs	r3, #0
}
 80079be:	4618      	mov	r0, r3
 80079c0:	3714      	adds	r7, #20
 80079c2:	46bd      	mov	sp, r7
 80079c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c8:	4770      	bx	lr
	...

080079cc <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80079cc:	b580      	push	{r7, lr}
 80079ce:	b084      	sub	sp, #16
 80079d0:	af00      	add	r7, sp, #0
 80079d2:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80079d4:	4b11      	ldr	r3, [pc, #68]	; (8007a1c <_sbrk+0x50>)
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d102      	bne.n	80079e2 <_sbrk+0x16>
		heap_end = &end;
 80079dc:	4b0f      	ldr	r3, [pc, #60]	; (8007a1c <_sbrk+0x50>)
 80079de:	4a10      	ldr	r2, [pc, #64]	; (8007a20 <_sbrk+0x54>)
 80079e0:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80079e2:	4b0e      	ldr	r3, [pc, #56]	; (8007a1c <_sbrk+0x50>)
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80079e8:	4b0c      	ldr	r3, [pc, #48]	; (8007a1c <_sbrk+0x50>)
 80079ea:	681a      	ldr	r2, [r3, #0]
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	4413      	add	r3, r2
 80079f0:	466a      	mov	r2, sp
 80079f2:	4293      	cmp	r3, r2
 80079f4:	d907      	bls.n	8007a06 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80079f6:	f000 f875 	bl	8007ae4 <__errno>
 80079fa:	4602      	mov	r2, r0
 80079fc:	230c      	movs	r3, #12
 80079fe:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8007a00:	f04f 33ff 	mov.w	r3, #4294967295
 8007a04:	e006      	b.n	8007a14 <_sbrk+0x48>
	}

	heap_end += incr;
 8007a06:	4b05      	ldr	r3, [pc, #20]	; (8007a1c <_sbrk+0x50>)
 8007a08:	681a      	ldr	r2, [r3, #0]
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	4413      	add	r3, r2
 8007a0e:	4a03      	ldr	r2, [pc, #12]	; (8007a1c <_sbrk+0x50>)
 8007a10:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8007a12:	68fb      	ldr	r3, [r7, #12]
}
 8007a14:	4618      	mov	r0, r3
 8007a16:	3710      	adds	r7, #16
 8007a18:	46bd      	mov	sp, r7
 8007a1a:	bd80      	pop	{r7, pc}
 8007a1c:	200000f0 	.word	0x200000f0
 8007a20:	20000e20 	.word	0x20000e20

08007a24 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8007a24:	b480      	push	{r7}
 8007a26:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8007a28:	4b16      	ldr	r3, [pc, #88]	; (8007a84 <SystemInit+0x60>)
 8007a2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a2e:	4a15      	ldr	r2, [pc, #84]	; (8007a84 <SystemInit+0x60>)
 8007a30:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007a34:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8007a38:	4b13      	ldr	r3, [pc, #76]	; (8007a88 <SystemInit+0x64>)
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	4a12      	ldr	r2, [pc, #72]	; (8007a88 <SystemInit+0x64>)
 8007a3e:	f043 0301 	orr.w	r3, r3, #1
 8007a42:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8007a44:	4b10      	ldr	r3, [pc, #64]	; (8007a88 <SystemInit+0x64>)
 8007a46:	2200      	movs	r2, #0
 8007a48:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8007a4a:	4b0f      	ldr	r3, [pc, #60]	; (8007a88 <SystemInit+0x64>)
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	4a0e      	ldr	r2, [pc, #56]	; (8007a88 <SystemInit+0x64>)
 8007a50:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8007a54:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007a58:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8007a5a:	4b0b      	ldr	r3, [pc, #44]	; (8007a88 <SystemInit+0x64>)
 8007a5c:	4a0b      	ldr	r2, [pc, #44]	; (8007a8c <SystemInit+0x68>)
 8007a5e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8007a60:	4b09      	ldr	r3, [pc, #36]	; (8007a88 <SystemInit+0x64>)
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	4a08      	ldr	r2, [pc, #32]	; (8007a88 <SystemInit+0x64>)
 8007a66:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007a6a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8007a6c:	4b06      	ldr	r3, [pc, #24]	; (8007a88 <SystemInit+0x64>)
 8007a6e:	2200      	movs	r2, #0
 8007a70:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8007a72:	4b04      	ldr	r3, [pc, #16]	; (8007a84 <SystemInit+0x60>)
 8007a74:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8007a78:	609a      	str	r2, [r3, #8]
#endif
}
 8007a7a:	bf00      	nop
 8007a7c:	46bd      	mov	sp, r7
 8007a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a82:	4770      	bx	lr
 8007a84:	e000ed00 	.word	0xe000ed00
 8007a88:	40023800 	.word	0x40023800
 8007a8c:	24003010 	.word	0x24003010

08007a90 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8007a90:	f8df d034 	ldr.w	sp, [pc, #52]	; 8007ac8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8007a94:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8007a96:	e003      	b.n	8007aa0 <LoopCopyDataInit>

08007a98 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8007a98:	4b0c      	ldr	r3, [pc, #48]	; (8007acc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8007a9a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8007a9c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8007a9e:	3104      	adds	r1, #4

08007aa0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8007aa0:	480b      	ldr	r0, [pc, #44]	; (8007ad0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8007aa2:	4b0c      	ldr	r3, [pc, #48]	; (8007ad4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8007aa4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8007aa6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8007aa8:	d3f6      	bcc.n	8007a98 <CopyDataInit>
  ldr  r2, =_sbss
 8007aaa:	4a0b      	ldr	r2, [pc, #44]	; (8007ad8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8007aac:	e002      	b.n	8007ab4 <LoopFillZerobss>

08007aae <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8007aae:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8007ab0:	f842 3b04 	str.w	r3, [r2], #4

08007ab4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8007ab4:	4b09      	ldr	r3, [pc, #36]	; (8007adc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8007ab6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8007ab8:	d3f9      	bcc.n	8007aae <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8007aba:	f7ff ffb3 	bl	8007a24 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8007abe:	f000 f817 	bl	8007af0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8007ac2:	f7fe fe8f 	bl	80067e4 <main>
  bx  lr    
 8007ac6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8007ac8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8007acc:	08008fc0 	.word	0x08008fc0
  ldr  r0, =_sdata
 8007ad0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8007ad4:	200000cc 	.word	0x200000cc
  ldr  r2, =_sbss
 8007ad8:	200000cc 	.word	0x200000cc
  ldr  r3, = _ebss
 8007adc:	20000e20 	.word	0x20000e20

08007ae0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8007ae0:	e7fe      	b.n	8007ae0 <ADC_IRQHandler>
	...

08007ae4 <__errno>:
 8007ae4:	4b01      	ldr	r3, [pc, #4]	; (8007aec <__errno+0x8>)
 8007ae6:	6818      	ldr	r0, [r3, #0]
 8007ae8:	4770      	bx	lr
 8007aea:	bf00      	nop
 8007aec:	20000064 	.word	0x20000064

08007af0 <__libc_init_array>:
 8007af0:	b570      	push	{r4, r5, r6, lr}
 8007af2:	4e0d      	ldr	r6, [pc, #52]	; (8007b28 <__libc_init_array+0x38>)
 8007af4:	4c0d      	ldr	r4, [pc, #52]	; (8007b2c <__libc_init_array+0x3c>)
 8007af6:	1ba4      	subs	r4, r4, r6
 8007af8:	10a4      	asrs	r4, r4, #2
 8007afa:	2500      	movs	r5, #0
 8007afc:	42a5      	cmp	r5, r4
 8007afe:	d109      	bne.n	8007b14 <__libc_init_array+0x24>
 8007b00:	4e0b      	ldr	r6, [pc, #44]	; (8007b30 <__libc_init_array+0x40>)
 8007b02:	4c0c      	ldr	r4, [pc, #48]	; (8007b34 <__libc_init_array+0x44>)
 8007b04:	f001 f932 	bl	8008d6c <_init>
 8007b08:	1ba4      	subs	r4, r4, r6
 8007b0a:	10a4      	asrs	r4, r4, #2
 8007b0c:	2500      	movs	r5, #0
 8007b0e:	42a5      	cmp	r5, r4
 8007b10:	d105      	bne.n	8007b1e <__libc_init_array+0x2e>
 8007b12:	bd70      	pop	{r4, r5, r6, pc}
 8007b14:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007b18:	4798      	blx	r3
 8007b1a:	3501      	adds	r5, #1
 8007b1c:	e7ee      	b.n	8007afc <__libc_init_array+0xc>
 8007b1e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007b22:	4798      	blx	r3
 8007b24:	3501      	adds	r5, #1
 8007b26:	e7f2      	b.n	8007b0e <__libc_init_array+0x1e>
 8007b28:	08008fb8 	.word	0x08008fb8
 8007b2c:	08008fb8 	.word	0x08008fb8
 8007b30:	08008fb8 	.word	0x08008fb8
 8007b34:	08008fbc 	.word	0x08008fbc

08007b38 <memset>:
 8007b38:	4402      	add	r2, r0
 8007b3a:	4603      	mov	r3, r0
 8007b3c:	4293      	cmp	r3, r2
 8007b3e:	d100      	bne.n	8007b42 <memset+0xa>
 8007b40:	4770      	bx	lr
 8007b42:	f803 1b01 	strb.w	r1, [r3], #1
 8007b46:	e7f9      	b.n	8007b3c <memset+0x4>

08007b48 <iprintf>:
 8007b48:	b40f      	push	{r0, r1, r2, r3}
 8007b4a:	4b0a      	ldr	r3, [pc, #40]	; (8007b74 <iprintf+0x2c>)
 8007b4c:	b513      	push	{r0, r1, r4, lr}
 8007b4e:	681c      	ldr	r4, [r3, #0]
 8007b50:	b124      	cbz	r4, 8007b5c <iprintf+0x14>
 8007b52:	69a3      	ldr	r3, [r4, #24]
 8007b54:	b913      	cbnz	r3, 8007b5c <iprintf+0x14>
 8007b56:	4620      	mov	r0, r4
 8007b58:	f000 fad8 	bl	800810c <__sinit>
 8007b5c:	ab05      	add	r3, sp, #20
 8007b5e:	9a04      	ldr	r2, [sp, #16]
 8007b60:	68a1      	ldr	r1, [r4, #8]
 8007b62:	9301      	str	r3, [sp, #4]
 8007b64:	4620      	mov	r0, r4
 8007b66:	f000 fc99 	bl	800849c <_vfiprintf_r>
 8007b6a:	b002      	add	sp, #8
 8007b6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007b70:	b004      	add	sp, #16
 8007b72:	4770      	bx	lr
 8007b74:	20000064 	.word	0x20000064

08007b78 <_puts_r>:
 8007b78:	b570      	push	{r4, r5, r6, lr}
 8007b7a:	460e      	mov	r6, r1
 8007b7c:	4605      	mov	r5, r0
 8007b7e:	b118      	cbz	r0, 8007b88 <_puts_r+0x10>
 8007b80:	6983      	ldr	r3, [r0, #24]
 8007b82:	b90b      	cbnz	r3, 8007b88 <_puts_r+0x10>
 8007b84:	f000 fac2 	bl	800810c <__sinit>
 8007b88:	69ab      	ldr	r3, [r5, #24]
 8007b8a:	68ac      	ldr	r4, [r5, #8]
 8007b8c:	b913      	cbnz	r3, 8007b94 <_puts_r+0x1c>
 8007b8e:	4628      	mov	r0, r5
 8007b90:	f000 fabc 	bl	800810c <__sinit>
 8007b94:	4b23      	ldr	r3, [pc, #140]	; (8007c24 <_puts_r+0xac>)
 8007b96:	429c      	cmp	r4, r3
 8007b98:	d117      	bne.n	8007bca <_puts_r+0x52>
 8007b9a:	686c      	ldr	r4, [r5, #4]
 8007b9c:	89a3      	ldrh	r3, [r4, #12]
 8007b9e:	071b      	lsls	r3, r3, #28
 8007ba0:	d51d      	bpl.n	8007bde <_puts_r+0x66>
 8007ba2:	6923      	ldr	r3, [r4, #16]
 8007ba4:	b1db      	cbz	r3, 8007bde <_puts_r+0x66>
 8007ba6:	3e01      	subs	r6, #1
 8007ba8:	68a3      	ldr	r3, [r4, #8]
 8007baa:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007bae:	3b01      	subs	r3, #1
 8007bb0:	60a3      	str	r3, [r4, #8]
 8007bb2:	b9e9      	cbnz	r1, 8007bf0 <_puts_r+0x78>
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	da2e      	bge.n	8007c16 <_puts_r+0x9e>
 8007bb8:	4622      	mov	r2, r4
 8007bba:	210a      	movs	r1, #10
 8007bbc:	4628      	mov	r0, r5
 8007bbe:	f000 f8f5 	bl	8007dac <__swbuf_r>
 8007bc2:	3001      	adds	r0, #1
 8007bc4:	d011      	beq.n	8007bea <_puts_r+0x72>
 8007bc6:	200a      	movs	r0, #10
 8007bc8:	e011      	b.n	8007bee <_puts_r+0x76>
 8007bca:	4b17      	ldr	r3, [pc, #92]	; (8007c28 <_puts_r+0xb0>)
 8007bcc:	429c      	cmp	r4, r3
 8007bce:	d101      	bne.n	8007bd4 <_puts_r+0x5c>
 8007bd0:	68ac      	ldr	r4, [r5, #8]
 8007bd2:	e7e3      	b.n	8007b9c <_puts_r+0x24>
 8007bd4:	4b15      	ldr	r3, [pc, #84]	; (8007c2c <_puts_r+0xb4>)
 8007bd6:	429c      	cmp	r4, r3
 8007bd8:	bf08      	it	eq
 8007bda:	68ec      	ldreq	r4, [r5, #12]
 8007bdc:	e7de      	b.n	8007b9c <_puts_r+0x24>
 8007bde:	4621      	mov	r1, r4
 8007be0:	4628      	mov	r0, r5
 8007be2:	f000 f935 	bl	8007e50 <__swsetup_r>
 8007be6:	2800      	cmp	r0, #0
 8007be8:	d0dd      	beq.n	8007ba6 <_puts_r+0x2e>
 8007bea:	f04f 30ff 	mov.w	r0, #4294967295
 8007bee:	bd70      	pop	{r4, r5, r6, pc}
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	da04      	bge.n	8007bfe <_puts_r+0x86>
 8007bf4:	69a2      	ldr	r2, [r4, #24]
 8007bf6:	429a      	cmp	r2, r3
 8007bf8:	dc06      	bgt.n	8007c08 <_puts_r+0x90>
 8007bfa:	290a      	cmp	r1, #10
 8007bfc:	d004      	beq.n	8007c08 <_puts_r+0x90>
 8007bfe:	6823      	ldr	r3, [r4, #0]
 8007c00:	1c5a      	adds	r2, r3, #1
 8007c02:	6022      	str	r2, [r4, #0]
 8007c04:	7019      	strb	r1, [r3, #0]
 8007c06:	e7cf      	b.n	8007ba8 <_puts_r+0x30>
 8007c08:	4622      	mov	r2, r4
 8007c0a:	4628      	mov	r0, r5
 8007c0c:	f000 f8ce 	bl	8007dac <__swbuf_r>
 8007c10:	3001      	adds	r0, #1
 8007c12:	d1c9      	bne.n	8007ba8 <_puts_r+0x30>
 8007c14:	e7e9      	b.n	8007bea <_puts_r+0x72>
 8007c16:	6823      	ldr	r3, [r4, #0]
 8007c18:	200a      	movs	r0, #10
 8007c1a:	1c5a      	adds	r2, r3, #1
 8007c1c:	6022      	str	r2, [r4, #0]
 8007c1e:	7018      	strb	r0, [r3, #0]
 8007c20:	e7e5      	b.n	8007bee <_puts_r+0x76>
 8007c22:	bf00      	nop
 8007c24:	08008f38 	.word	0x08008f38
 8007c28:	08008f58 	.word	0x08008f58
 8007c2c:	08008f18 	.word	0x08008f18

08007c30 <puts>:
 8007c30:	4b02      	ldr	r3, [pc, #8]	; (8007c3c <puts+0xc>)
 8007c32:	4601      	mov	r1, r0
 8007c34:	6818      	ldr	r0, [r3, #0]
 8007c36:	f7ff bf9f 	b.w	8007b78 <_puts_r>
 8007c3a:	bf00      	nop
 8007c3c:	20000064 	.word	0x20000064

08007c40 <setbuf>:
 8007c40:	2900      	cmp	r1, #0
 8007c42:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007c46:	bf0c      	ite	eq
 8007c48:	2202      	moveq	r2, #2
 8007c4a:	2200      	movne	r2, #0
 8007c4c:	f000 b800 	b.w	8007c50 <setvbuf>

08007c50 <setvbuf>:
 8007c50:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007c54:	461d      	mov	r5, r3
 8007c56:	4b51      	ldr	r3, [pc, #324]	; (8007d9c <setvbuf+0x14c>)
 8007c58:	681e      	ldr	r6, [r3, #0]
 8007c5a:	4604      	mov	r4, r0
 8007c5c:	460f      	mov	r7, r1
 8007c5e:	4690      	mov	r8, r2
 8007c60:	b126      	cbz	r6, 8007c6c <setvbuf+0x1c>
 8007c62:	69b3      	ldr	r3, [r6, #24]
 8007c64:	b913      	cbnz	r3, 8007c6c <setvbuf+0x1c>
 8007c66:	4630      	mov	r0, r6
 8007c68:	f000 fa50 	bl	800810c <__sinit>
 8007c6c:	4b4c      	ldr	r3, [pc, #304]	; (8007da0 <setvbuf+0x150>)
 8007c6e:	429c      	cmp	r4, r3
 8007c70:	d152      	bne.n	8007d18 <setvbuf+0xc8>
 8007c72:	6874      	ldr	r4, [r6, #4]
 8007c74:	f1b8 0f02 	cmp.w	r8, #2
 8007c78:	d006      	beq.n	8007c88 <setvbuf+0x38>
 8007c7a:	f1b8 0f01 	cmp.w	r8, #1
 8007c7e:	f200 8089 	bhi.w	8007d94 <setvbuf+0x144>
 8007c82:	2d00      	cmp	r5, #0
 8007c84:	f2c0 8086 	blt.w	8007d94 <setvbuf+0x144>
 8007c88:	4621      	mov	r1, r4
 8007c8a:	4630      	mov	r0, r6
 8007c8c:	f000 f9d4 	bl	8008038 <_fflush_r>
 8007c90:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007c92:	b141      	cbz	r1, 8007ca6 <setvbuf+0x56>
 8007c94:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007c98:	4299      	cmp	r1, r3
 8007c9a:	d002      	beq.n	8007ca2 <setvbuf+0x52>
 8007c9c:	4630      	mov	r0, r6
 8007c9e:	f000 fb2b 	bl	80082f8 <_free_r>
 8007ca2:	2300      	movs	r3, #0
 8007ca4:	6363      	str	r3, [r4, #52]	; 0x34
 8007ca6:	2300      	movs	r3, #0
 8007ca8:	61a3      	str	r3, [r4, #24]
 8007caa:	6063      	str	r3, [r4, #4]
 8007cac:	89a3      	ldrh	r3, [r4, #12]
 8007cae:	061b      	lsls	r3, r3, #24
 8007cb0:	d503      	bpl.n	8007cba <setvbuf+0x6a>
 8007cb2:	6921      	ldr	r1, [r4, #16]
 8007cb4:	4630      	mov	r0, r6
 8007cb6:	f000 fb1f 	bl	80082f8 <_free_r>
 8007cba:	89a3      	ldrh	r3, [r4, #12]
 8007cbc:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8007cc0:	f023 0303 	bic.w	r3, r3, #3
 8007cc4:	f1b8 0f02 	cmp.w	r8, #2
 8007cc8:	81a3      	strh	r3, [r4, #12]
 8007cca:	d05d      	beq.n	8007d88 <setvbuf+0x138>
 8007ccc:	ab01      	add	r3, sp, #4
 8007cce:	466a      	mov	r2, sp
 8007cd0:	4621      	mov	r1, r4
 8007cd2:	4630      	mov	r0, r6
 8007cd4:	f000 faa4 	bl	8008220 <__swhatbuf_r>
 8007cd8:	89a3      	ldrh	r3, [r4, #12]
 8007cda:	4318      	orrs	r0, r3
 8007cdc:	81a0      	strh	r0, [r4, #12]
 8007cde:	bb2d      	cbnz	r5, 8007d2c <setvbuf+0xdc>
 8007ce0:	9d00      	ldr	r5, [sp, #0]
 8007ce2:	4628      	mov	r0, r5
 8007ce4:	f000 fb00 	bl	80082e8 <malloc>
 8007ce8:	4607      	mov	r7, r0
 8007cea:	2800      	cmp	r0, #0
 8007cec:	d14e      	bne.n	8007d8c <setvbuf+0x13c>
 8007cee:	f8dd 9000 	ldr.w	r9, [sp]
 8007cf2:	45a9      	cmp	r9, r5
 8007cf4:	d13c      	bne.n	8007d70 <setvbuf+0x120>
 8007cf6:	f04f 30ff 	mov.w	r0, #4294967295
 8007cfa:	89a3      	ldrh	r3, [r4, #12]
 8007cfc:	f043 0302 	orr.w	r3, r3, #2
 8007d00:	81a3      	strh	r3, [r4, #12]
 8007d02:	2300      	movs	r3, #0
 8007d04:	60a3      	str	r3, [r4, #8]
 8007d06:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007d0a:	6023      	str	r3, [r4, #0]
 8007d0c:	6123      	str	r3, [r4, #16]
 8007d0e:	2301      	movs	r3, #1
 8007d10:	6163      	str	r3, [r4, #20]
 8007d12:	b003      	add	sp, #12
 8007d14:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007d18:	4b22      	ldr	r3, [pc, #136]	; (8007da4 <setvbuf+0x154>)
 8007d1a:	429c      	cmp	r4, r3
 8007d1c:	d101      	bne.n	8007d22 <setvbuf+0xd2>
 8007d1e:	68b4      	ldr	r4, [r6, #8]
 8007d20:	e7a8      	b.n	8007c74 <setvbuf+0x24>
 8007d22:	4b21      	ldr	r3, [pc, #132]	; (8007da8 <setvbuf+0x158>)
 8007d24:	429c      	cmp	r4, r3
 8007d26:	bf08      	it	eq
 8007d28:	68f4      	ldreq	r4, [r6, #12]
 8007d2a:	e7a3      	b.n	8007c74 <setvbuf+0x24>
 8007d2c:	2f00      	cmp	r7, #0
 8007d2e:	d0d8      	beq.n	8007ce2 <setvbuf+0x92>
 8007d30:	69b3      	ldr	r3, [r6, #24]
 8007d32:	b913      	cbnz	r3, 8007d3a <setvbuf+0xea>
 8007d34:	4630      	mov	r0, r6
 8007d36:	f000 f9e9 	bl	800810c <__sinit>
 8007d3a:	f1b8 0f01 	cmp.w	r8, #1
 8007d3e:	bf08      	it	eq
 8007d40:	89a3      	ldrheq	r3, [r4, #12]
 8007d42:	6027      	str	r7, [r4, #0]
 8007d44:	bf04      	itt	eq
 8007d46:	f043 0301 	orreq.w	r3, r3, #1
 8007d4a:	81a3      	strheq	r3, [r4, #12]
 8007d4c:	89a3      	ldrh	r3, [r4, #12]
 8007d4e:	f013 0008 	ands.w	r0, r3, #8
 8007d52:	e9c4 7504 	strd	r7, r5, [r4, #16]
 8007d56:	d01b      	beq.n	8007d90 <setvbuf+0x140>
 8007d58:	f013 0001 	ands.w	r0, r3, #1
 8007d5c:	bf18      	it	ne
 8007d5e:	426d      	negne	r5, r5
 8007d60:	f04f 0300 	mov.w	r3, #0
 8007d64:	bf1d      	ittte	ne
 8007d66:	60a3      	strne	r3, [r4, #8]
 8007d68:	61a5      	strne	r5, [r4, #24]
 8007d6a:	4618      	movne	r0, r3
 8007d6c:	60a5      	streq	r5, [r4, #8]
 8007d6e:	e7d0      	b.n	8007d12 <setvbuf+0xc2>
 8007d70:	4648      	mov	r0, r9
 8007d72:	f000 fab9 	bl	80082e8 <malloc>
 8007d76:	4607      	mov	r7, r0
 8007d78:	2800      	cmp	r0, #0
 8007d7a:	d0bc      	beq.n	8007cf6 <setvbuf+0xa6>
 8007d7c:	89a3      	ldrh	r3, [r4, #12]
 8007d7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d82:	81a3      	strh	r3, [r4, #12]
 8007d84:	464d      	mov	r5, r9
 8007d86:	e7d3      	b.n	8007d30 <setvbuf+0xe0>
 8007d88:	2000      	movs	r0, #0
 8007d8a:	e7b6      	b.n	8007cfa <setvbuf+0xaa>
 8007d8c:	46a9      	mov	r9, r5
 8007d8e:	e7f5      	b.n	8007d7c <setvbuf+0x12c>
 8007d90:	60a0      	str	r0, [r4, #8]
 8007d92:	e7be      	b.n	8007d12 <setvbuf+0xc2>
 8007d94:	f04f 30ff 	mov.w	r0, #4294967295
 8007d98:	e7bb      	b.n	8007d12 <setvbuf+0xc2>
 8007d9a:	bf00      	nop
 8007d9c:	20000064 	.word	0x20000064
 8007da0:	08008f38 	.word	0x08008f38
 8007da4:	08008f58 	.word	0x08008f58
 8007da8:	08008f18 	.word	0x08008f18

08007dac <__swbuf_r>:
 8007dac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007dae:	460e      	mov	r6, r1
 8007db0:	4614      	mov	r4, r2
 8007db2:	4605      	mov	r5, r0
 8007db4:	b118      	cbz	r0, 8007dbe <__swbuf_r+0x12>
 8007db6:	6983      	ldr	r3, [r0, #24]
 8007db8:	b90b      	cbnz	r3, 8007dbe <__swbuf_r+0x12>
 8007dba:	f000 f9a7 	bl	800810c <__sinit>
 8007dbe:	4b21      	ldr	r3, [pc, #132]	; (8007e44 <__swbuf_r+0x98>)
 8007dc0:	429c      	cmp	r4, r3
 8007dc2:	d12a      	bne.n	8007e1a <__swbuf_r+0x6e>
 8007dc4:	686c      	ldr	r4, [r5, #4]
 8007dc6:	69a3      	ldr	r3, [r4, #24]
 8007dc8:	60a3      	str	r3, [r4, #8]
 8007dca:	89a3      	ldrh	r3, [r4, #12]
 8007dcc:	071a      	lsls	r2, r3, #28
 8007dce:	d52e      	bpl.n	8007e2e <__swbuf_r+0x82>
 8007dd0:	6923      	ldr	r3, [r4, #16]
 8007dd2:	b363      	cbz	r3, 8007e2e <__swbuf_r+0x82>
 8007dd4:	6923      	ldr	r3, [r4, #16]
 8007dd6:	6820      	ldr	r0, [r4, #0]
 8007dd8:	1ac0      	subs	r0, r0, r3
 8007dda:	6963      	ldr	r3, [r4, #20]
 8007ddc:	b2f6      	uxtb	r6, r6
 8007dde:	4283      	cmp	r3, r0
 8007de0:	4637      	mov	r7, r6
 8007de2:	dc04      	bgt.n	8007dee <__swbuf_r+0x42>
 8007de4:	4621      	mov	r1, r4
 8007de6:	4628      	mov	r0, r5
 8007de8:	f000 f926 	bl	8008038 <_fflush_r>
 8007dec:	bb28      	cbnz	r0, 8007e3a <__swbuf_r+0x8e>
 8007dee:	68a3      	ldr	r3, [r4, #8]
 8007df0:	3b01      	subs	r3, #1
 8007df2:	60a3      	str	r3, [r4, #8]
 8007df4:	6823      	ldr	r3, [r4, #0]
 8007df6:	1c5a      	adds	r2, r3, #1
 8007df8:	6022      	str	r2, [r4, #0]
 8007dfa:	701e      	strb	r6, [r3, #0]
 8007dfc:	6963      	ldr	r3, [r4, #20]
 8007dfe:	3001      	adds	r0, #1
 8007e00:	4283      	cmp	r3, r0
 8007e02:	d004      	beq.n	8007e0e <__swbuf_r+0x62>
 8007e04:	89a3      	ldrh	r3, [r4, #12]
 8007e06:	07db      	lsls	r3, r3, #31
 8007e08:	d519      	bpl.n	8007e3e <__swbuf_r+0x92>
 8007e0a:	2e0a      	cmp	r6, #10
 8007e0c:	d117      	bne.n	8007e3e <__swbuf_r+0x92>
 8007e0e:	4621      	mov	r1, r4
 8007e10:	4628      	mov	r0, r5
 8007e12:	f000 f911 	bl	8008038 <_fflush_r>
 8007e16:	b190      	cbz	r0, 8007e3e <__swbuf_r+0x92>
 8007e18:	e00f      	b.n	8007e3a <__swbuf_r+0x8e>
 8007e1a:	4b0b      	ldr	r3, [pc, #44]	; (8007e48 <__swbuf_r+0x9c>)
 8007e1c:	429c      	cmp	r4, r3
 8007e1e:	d101      	bne.n	8007e24 <__swbuf_r+0x78>
 8007e20:	68ac      	ldr	r4, [r5, #8]
 8007e22:	e7d0      	b.n	8007dc6 <__swbuf_r+0x1a>
 8007e24:	4b09      	ldr	r3, [pc, #36]	; (8007e4c <__swbuf_r+0xa0>)
 8007e26:	429c      	cmp	r4, r3
 8007e28:	bf08      	it	eq
 8007e2a:	68ec      	ldreq	r4, [r5, #12]
 8007e2c:	e7cb      	b.n	8007dc6 <__swbuf_r+0x1a>
 8007e2e:	4621      	mov	r1, r4
 8007e30:	4628      	mov	r0, r5
 8007e32:	f000 f80d 	bl	8007e50 <__swsetup_r>
 8007e36:	2800      	cmp	r0, #0
 8007e38:	d0cc      	beq.n	8007dd4 <__swbuf_r+0x28>
 8007e3a:	f04f 37ff 	mov.w	r7, #4294967295
 8007e3e:	4638      	mov	r0, r7
 8007e40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007e42:	bf00      	nop
 8007e44:	08008f38 	.word	0x08008f38
 8007e48:	08008f58 	.word	0x08008f58
 8007e4c:	08008f18 	.word	0x08008f18

08007e50 <__swsetup_r>:
 8007e50:	4b32      	ldr	r3, [pc, #200]	; (8007f1c <__swsetup_r+0xcc>)
 8007e52:	b570      	push	{r4, r5, r6, lr}
 8007e54:	681d      	ldr	r5, [r3, #0]
 8007e56:	4606      	mov	r6, r0
 8007e58:	460c      	mov	r4, r1
 8007e5a:	b125      	cbz	r5, 8007e66 <__swsetup_r+0x16>
 8007e5c:	69ab      	ldr	r3, [r5, #24]
 8007e5e:	b913      	cbnz	r3, 8007e66 <__swsetup_r+0x16>
 8007e60:	4628      	mov	r0, r5
 8007e62:	f000 f953 	bl	800810c <__sinit>
 8007e66:	4b2e      	ldr	r3, [pc, #184]	; (8007f20 <__swsetup_r+0xd0>)
 8007e68:	429c      	cmp	r4, r3
 8007e6a:	d10f      	bne.n	8007e8c <__swsetup_r+0x3c>
 8007e6c:	686c      	ldr	r4, [r5, #4]
 8007e6e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007e72:	b29a      	uxth	r2, r3
 8007e74:	0715      	lsls	r5, r2, #28
 8007e76:	d42c      	bmi.n	8007ed2 <__swsetup_r+0x82>
 8007e78:	06d0      	lsls	r0, r2, #27
 8007e7a:	d411      	bmi.n	8007ea0 <__swsetup_r+0x50>
 8007e7c:	2209      	movs	r2, #9
 8007e7e:	6032      	str	r2, [r6, #0]
 8007e80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007e84:	81a3      	strh	r3, [r4, #12]
 8007e86:	f04f 30ff 	mov.w	r0, #4294967295
 8007e8a:	e03e      	b.n	8007f0a <__swsetup_r+0xba>
 8007e8c:	4b25      	ldr	r3, [pc, #148]	; (8007f24 <__swsetup_r+0xd4>)
 8007e8e:	429c      	cmp	r4, r3
 8007e90:	d101      	bne.n	8007e96 <__swsetup_r+0x46>
 8007e92:	68ac      	ldr	r4, [r5, #8]
 8007e94:	e7eb      	b.n	8007e6e <__swsetup_r+0x1e>
 8007e96:	4b24      	ldr	r3, [pc, #144]	; (8007f28 <__swsetup_r+0xd8>)
 8007e98:	429c      	cmp	r4, r3
 8007e9a:	bf08      	it	eq
 8007e9c:	68ec      	ldreq	r4, [r5, #12]
 8007e9e:	e7e6      	b.n	8007e6e <__swsetup_r+0x1e>
 8007ea0:	0751      	lsls	r1, r2, #29
 8007ea2:	d512      	bpl.n	8007eca <__swsetup_r+0x7a>
 8007ea4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007ea6:	b141      	cbz	r1, 8007eba <__swsetup_r+0x6a>
 8007ea8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007eac:	4299      	cmp	r1, r3
 8007eae:	d002      	beq.n	8007eb6 <__swsetup_r+0x66>
 8007eb0:	4630      	mov	r0, r6
 8007eb2:	f000 fa21 	bl	80082f8 <_free_r>
 8007eb6:	2300      	movs	r3, #0
 8007eb8:	6363      	str	r3, [r4, #52]	; 0x34
 8007eba:	89a3      	ldrh	r3, [r4, #12]
 8007ebc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007ec0:	81a3      	strh	r3, [r4, #12]
 8007ec2:	2300      	movs	r3, #0
 8007ec4:	6063      	str	r3, [r4, #4]
 8007ec6:	6923      	ldr	r3, [r4, #16]
 8007ec8:	6023      	str	r3, [r4, #0]
 8007eca:	89a3      	ldrh	r3, [r4, #12]
 8007ecc:	f043 0308 	orr.w	r3, r3, #8
 8007ed0:	81a3      	strh	r3, [r4, #12]
 8007ed2:	6923      	ldr	r3, [r4, #16]
 8007ed4:	b94b      	cbnz	r3, 8007eea <__swsetup_r+0x9a>
 8007ed6:	89a3      	ldrh	r3, [r4, #12]
 8007ed8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007edc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007ee0:	d003      	beq.n	8007eea <__swsetup_r+0x9a>
 8007ee2:	4621      	mov	r1, r4
 8007ee4:	4630      	mov	r0, r6
 8007ee6:	f000 f9bf 	bl	8008268 <__smakebuf_r>
 8007eea:	89a2      	ldrh	r2, [r4, #12]
 8007eec:	f012 0301 	ands.w	r3, r2, #1
 8007ef0:	d00c      	beq.n	8007f0c <__swsetup_r+0xbc>
 8007ef2:	2300      	movs	r3, #0
 8007ef4:	60a3      	str	r3, [r4, #8]
 8007ef6:	6963      	ldr	r3, [r4, #20]
 8007ef8:	425b      	negs	r3, r3
 8007efa:	61a3      	str	r3, [r4, #24]
 8007efc:	6923      	ldr	r3, [r4, #16]
 8007efe:	b953      	cbnz	r3, 8007f16 <__swsetup_r+0xc6>
 8007f00:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007f04:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8007f08:	d1ba      	bne.n	8007e80 <__swsetup_r+0x30>
 8007f0a:	bd70      	pop	{r4, r5, r6, pc}
 8007f0c:	0792      	lsls	r2, r2, #30
 8007f0e:	bf58      	it	pl
 8007f10:	6963      	ldrpl	r3, [r4, #20]
 8007f12:	60a3      	str	r3, [r4, #8]
 8007f14:	e7f2      	b.n	8007efc <__swsetup_r+0xac>
 8007f16:	2000      	movs	r0, #0
 8007f18:	e7f7      	b.n	8007f0a <__swsetup_r+0xba>
 8007f1a:	bf00      	nop
 8007f1c:	20000064 	.word	0x20000064
 8007f20:	08008f38 	.word	0x08008f38
 8007f24:	08008f58 	.word	0x08008f58
 8007f28:	08008f18 	.word	0x08008f18

08007f2c <__sflush_r>:
 8007f2c:	898a      	ldrh	r2, [r1, #12]
 8007f2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f32:	4605      	mov	r5, r0
 8007f34:	0710      	lsls	r0, r2, #28
 8007f36:	460c      	mov	r4, r1
 8007f38:	d458      	bmi.n	8007fec <__sflush_r+0xc0>
 8007f3a:	684b      	ldr	r3, [r1, #4]
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	dc05      	bgt.n	8007f4c <__sflush_r+0x20>
 8007f40:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	dc02      	bgt.n	8007f4c <__sflush_r+0x20>
 8007f46:	2000      	movs	r0, #0
 8007f48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007f4c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007f4e:	2e00      	cmp	r6, #0
 8007f50:	d0f9      	beq.n	8007f46 <__sflush_r+0x1a>
 8007f52:	2300      	movs	r3, #0
 8007f54:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007f58:	682f      	ldr	r7, [r5, #0]
 8007f5a:	6a21      	ldr	r1, [r4, #32]
 8007f5c:	602b      	str	r3, [r5, #0]
 8007f5e:	d032      	beq.n	8007fc6 <__sflush_r+0x9a>
 8007f60:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007f62:	89a3      	ldrh	r3, [r4, #12]
 8007f64:	075a      	lsls	r2, r3, #29
 8007f66:	d505      	bpl.n	8007f74 <__sflush_r+0x48>
 8007f68:	6863      	ldr	r3, [r4, #4]
 8007f6a:	1ac0      	subs	r0, r0, r3
 8007f6c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007f6e:	b10b      	cbz	r3, 8007f74 <__sflush_r+0x48>
 8007f70:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007f72:	1ac0      	subs	r0, r0, r3
 8007f74:	2300      	movs	r3, #0
 8007f76:	4602      	mov	r2, r0
 8007f78:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007f7a:	6a21      	ldr	r1, [r4, #32]
 8007f7c:	4628      	mov	r0, r5
 8007f7e:	47b0      	blx	r6
 8007f80:	1c43      	adds	r3, r0, #1
 8007f82:	89a3      	ldrh	r3, [r4, #12]
 8007f84:	d106      	bne.n	8007f94 <__sflush_r+0x68>
 8007f86:	6829      	ldr	r1, [r5, #0]
 8007f88:	291d      	cmp	r1, #29
 8007f8a:	d848      	bhi.n	800801e <__sflush_r+0xf2>
 8007f8c:	4a29      	ldr	r2, [pc, #164]	; (8008034 <__sflush_r+0x108>)
 8007f8e:	40ca      	lsrs	r2, r1
 8007f90:	07d6      	lsls	r6, r2, #31
 8007f92:	d544      	bpl.n	800801e <__sflush_r+0xf2>
 8007f94:	2200      	movs	r2, #0
 8007f96:	6062      	str	r2, [r4, #4]
 8007f98:	04d9      	lsls	r1, r3, #19
 8007f9a:	6922      	ldr	r2, [r4, #16]
 8007f9c:	6022      	str	r2, [r4, #0]
 8007f9e:	d504      	bpl.n	8007faa <__sflush_r+0x7e>
 8007fa0:	1c42      	adds	r2, r0, #1
 8007fa2:	d101      	bne.n	8007fa8 <__sflush_r+0x7c>
 8007fa4:	682b      	ldr	r3, [r5, #0]
 8007fa6:	b903      	cbnz	r3, 8007faa <__sflush_r+0x7e>
 8007fa8:	6560      	str	r0, [r4, #84]	; 0x54
 8007faa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007fac:	602f      	str	r7, [r5, #0]
 8007fae:	2900      	cmp	r1, #0
 8007fb0:	d0c9      	beq.n	8007f46 <__sflush_r+0x1a>
 8007fb2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007fb6:	4299      	cmp	r1, r3
 8007fb8:	d002      	beq.n	8007fc0 <__sflush_r+0x94>
 8007fba:	4628      	mov	r0, r5
 8007fbc:	f000 f99c 	bl	80082f8 <_free_r>
 8007fc0:	2000      	movs	r0, #0
 8007fc2:	6360      	str	r0, [r4, #52]	; 0x34
 8007fc4:	e7c0      	b.n	8007f48 <__sflush_r+0x1c>
 8007fc6:	2301      	movs	r3, #1
 8007fc8:	4628      	mov	r0, r5
 8007fca:	47b0      	blx	r6
 8007fcc:	1c41      	adds	r1, r0, #1
 8007fce:	d1c8      	bne.n	8007f62 <__sflush_r+0x36>
 8007fd0:	682b      	ldr	r3, [r5, #0]
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d0c5      	beq.n	8007f62 <__sflush_r+0x36>
 8007fd6:	2b1d      	cmp	r3, #29
 8007fd8:	d001      	beq.n	8007fde <__sflush_r+0xb2>
 8007fda:	2b16      	cmp	r3, #22
 8007fdc:	d101      	bne.n	8007fe2 <__sflush_r+0xb6>
 8007fde:	602f      	str	r7, [r5, #0]
 8007fe0:	e7b1      	b.n	8007f46 <__sflush_r+0x1a>
 8007fe2:	89a3      	ldrh	r3, [r4, #12]
 8007fe4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007fe8:	81a3      	strh	r3, [r4, #12]
 8007fea:	e7ad      	b.n	8007f48 <__sflush_r+0x1c>
 8007fec:	690f      	ldr	r7, [r1, #16]
 8007fee:	2f00      	cmp	r7, #0
 8007ff0:	d0a9      	beq.n	8007f46 <__sflush_r+0x1a>
 8007ff2:	0793      	lsls	r3, r2, #30
 8007ff4:	680e      	ldr	r6, [r1, #0]
 8007ff6:	bf08      	it	eq
 8007ff8:	694b      	ldreq	r3, [r1, #20]
 8007ffa:	600f      	str	r7, [r1, #0]
 8007ffc:	bf18      	it	ne
 8007ffe:	2300      	movne	r3, #0
 8008000:	eba6 0807 	sub.w	r8, r6, r7
 8008004:	608b      	str	r3, [r1, #8]
 8008006:	f1b8 0f00 	cmp.w	r8, #0
 800800a:	dd9c      	ble.n	8007f46 <__sflush_r+0x1a>
 800800c:	4643      	mov	r3, r8
 800800e:	463a      	mov	r2, r7
 8008010:	6a21      	ldr	r1, [r4, #32]
 8008012:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008014:	4628      	mov	r0, r5
 8008016:	47b0      	blx	r6
 8008018:	2800      	cmp	r0, #0
 800801a:	dc06      	bgt.n	800802a <__sflush_r+0xfe>
 800801c:	89a3      	ldrh	r3, [r4, #12]
 800801e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008022:	81a3      	strh	r3, [r4, #12]
 8008024:	f04f 30ff 	mov.w	r0, #4294967295
 8008028:	e78e      	b.n	8007f48 <__sflush_r+0x1c>
 800802a:	4407      	add	r7, r0
 800802c:	eba8 0800 	sub.w	r8, r8, r0
 8008030:	e7e9      	b.n	8008006 <__sflush_r+0xda>
 8008032:	bf00      	nop
 8008034:	20400001 	.word	0x20400001

08008038 <_fflush_r>:
 8008038:	b538      	push	{r3, r4, r5, lr}
 800803a:	690b      	ldr	r3, [r1, #16]
 800803c:	4605      	mov	r5, r0
 800803e:	460c      	mov	r4, r1
 8008040:	b1db      	cbz	r3, 800807a <_fflush_r+0x42>
 8008042:	b118      	cbz	r0, 800804c <_fflush_r+0x14>
 8008044:	6983      	ldr	r3, [r0, #24]
 8008046:	b90b      	cbnz	r3, 800804c <_fflush_r+0x14>
 8008048:	f000 f860 	bl	800810c <__sinit>
 800804c:	4b0c      	ldr	r3, [pc, #48]	; (8008080 <_fflush_r+0x48>)
 800804e:	429c      	cmp	r4, r3
 8008050:	d109      	bne.n	8008066 <_fflush_r+0x2e>
 8008052:	686c      	ldr	r4, [r5, #4]
 8008054:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008058:	b17b      	cbz	r3, 800807a <_fflush_r+0x42>
 800805a:	4621      	mov	r1, r4
 800805c:	4628      	mov	r0, r5
 800805e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008062:	f7ff bf63 	b.w	8007f2c <__sflush_r>
 8008066:	4b07      	ldr	r3, [pc, #28]	; (8008084 <_fflush_r+0x4c>)
 8008068:	429c      	cmp	r4, r3
 800806a:	d101      	bne.n	8008070 <_fflush_r+0x38>
 800806c:	68ac      	ldr	r4, [r5, #8]
 800806e:	e7f1      	b.n	8008054 <_fflush_r+0x1c>
 8008070:	4b05      	ldr	r3, [pc, #20]	; (8008088 <_fflush_r+0x50>)
 8008072:	429c      	cmp	r4, r3
 8008074:	bf08      	it	eq
 8008076:	68ec      	ldreq	r4, [r5, #12]
 8008078:	e7ec      	b.n	8008054 <_fflush_r+0x1c>
 800807a:	2000      	movs	r0, #0
 800807c:	bd38      	pop	{r3, r4, r5, pc}
 800807e:	bf00      	nop
 8008080:	08008f38 	.word	0x08008f38
 8008084:	08008f58 	.word	0x08008f58
 8008088:	08008f18 	.word	0x08008f18

0800808c <std>:
 800808c:	2300      	movs	r3, #0
 800808e:	b510      	push	{r4, lr}
 8008090:	4604      	mov	r4, r0
 8008092:	e9c0 3300 	strd	r3, r3, [r0]
 8008096:	6083      	str	r3, [r0, #8]
 8008098:	8181      	strh	r1, [r0, #12]
 800809a:	6643      	str	r3, [r0, #100]	; 0x64
 800809c:	81c2      	strh	r2, [r0, #14]
 800809e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80080a2:	6183      	str	r3, [r0, #24]
 80080a4:	4619      	mov	r1, r3
 80080a6:	2208      	movs	r2, #8
 80080a8:	305c      	adds	r0, #92	; 0x5c
 80080aa:	f7ff fd45 	bl	8007b38 <memset>
 80080ae:	4b05      	ldr	r3, [pc, #20]	; (80080c4 <std+0x38>)
 80080b0:	6263      	str	r3, [r4, #36]	; 0x24
 80080b2:	4b05      	ldr	r3, [pc, #20]	; (80080c8 <std+0x3c>)
 80080b4:	62a3      	str	r3, [r4, #40]	; 0x28
 80080b6:	4b05      	ldr	r3, [pc, #20]	; (80080cc <std+0x40>)
 80080b8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80080ba:	4b05      	ldr	r3, [pc, #20]	; (80080d0 <std+0x44>)
 80080bc:	6224      	str	r4, [r4, #32]
 80080be:	6323      	str	r3, [r4, #48]	; 0x30
 80080c0:	bd10      	pop	{r4, pc}
 80080c2:	bf00      	nop
 80080c4:	080089f9 	.word	0x080089f9
 80080c8:	08008a1b 	.word	0x08008a1b
 80080cc:	08008a53 	.word	0x08008a53
 80080d0:	08008a77 	.word	0x08008a77

080080d4 <_cleanup_r>:
 80080d4:	4901      	ldr	r1, [pc, #4]	; (80080dc <_cleanup_r+0x8>)
 80080d6:	f000 b885 	b.w	80081e4 <_fwalk_reent>
 80080da:	bf00      	nop
 80080dc:	08008039 	.word	0x08008039

080080e0 <__sfmoreglue>:
 80080e0:	b570      	push	{r4, r5, r6, lr}
 80080e2:	1e4a      	subs	r2, r1, #1
 80080e4:	2568      	movs	r5, #104	; 0x68
 80080e6:	4355      	muls	r5, r2
 80080e8:	460e      	mov	r6, r1
 80080ea:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80080ee:	f000 f951 	bl	8008394 <_malloc_r>
 80080f2:	4604      	mov	r4, r0
 80080f4:	b140      	cbz	r0, 8008108 <__sfmoreglue+0x28>
 80080f6:	2100      	movs	r1, #0
 80080f8:	e9c0 1600 	strd	r1, r6, [r0]
 80080fc:	300c      	adds	r0, #12
 80080fe:	60a0      	str	r0, [r4, #8]
 8008100:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008104:	f7ff fd18 	bl	8007b38 <memset>
 8008108:	4620      	mov	r0, r4
 800810a:	bd70      	pop	{r4, r5, r6, pc}

0800810c <__sinit>:
 800810c:	6983      	ldr	r3, [r0, #24]
 800810e:	b510      	push	{r4, lr}
 8008110:	4604      	mov	r4, r0
 8008112:	bb33      	cbnz	r3, 8008162 <__sinit+0x56>
 8008114:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8008118:	6503      	str	r3, [r0, #80]	; 0x50
 800811a:	4b12      	ldr	r3, [pc, #72]	; (8008164 <__sinit+0x58>)
 800811c:	4a12      	ldr	r2, [pc, #72]	; (8008168 <__sinit+0x5c>)
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	6282      	str	r2, [r0, #40]	; 0x28
 8008122:	4298      	cmp	r0, r3
 8008124:	bf04      	itt	eq
 8008126:	2301      	moveq	r3, #1
 8008128:	6183      	streq	r3, [r0, #24]
 800812a:	f000 f81f 	bl	800816c <__sfp>
 800812e:	6060      	str	r0, [r4, #4]
 8008130:	4620      	mov	r0, r4
 8008132:	f000 f81b 	bl	800816c <__sfp>
 8008136:	60a0      	str	r0, [r4, #8]
 8008138:	4620      	mov	r0, r4
 800813a:	f000 f817 	bl	800816c <__sfp>
 800813e:	2200      	movs	r2, #0
 8008140:	60e0      	str	r0, [r4, #12]
 8008142:	2104      	movs	r1, #4
 8008144:	6860      	ldr	r0, [r4, #4]
 8008146:	f7ff ffa1 	bl	800808c <std>
 800814a:	2201      	movs	r2, #1
 800814c:	2109      	movs	r1, #9
 800814e:	68a0      	ldr	r0, [r4, #8]
 8008150:	f7ff ff9c 	bl	800808c <std>
 8008154:	2202      	movs	r2, #2
 8008156:	2112      	movs	r1, #18
 8008158:	68e0      	ldr	r0, [r4, #12]
 800815a:	f7ff ff97 	bl	800808c <std>
 800815e:	2301      	movs	r3, #1
 8008160:	61a3      	str	r3, [r4, #24]
 8008162:	bd10      	pop	{r4, pc}
 8008164:	08008f14 	.word	0x08008f14
 8008168:	080080d5 	.word	0x080080d5

0800816c <__sfp>:
 800816c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800816e:	4b1b      	ldr	r3, [pc, #108]	; (80081dc <__sfp+0x70>)
 8008170:	681e      	ldr	r6, [r3, #0]
 8008172:	69b3      	ldr	r3, [r6, #24]
 8008174:	4607      	mov	r7, r0
 8008176:	b913      	cbnz	r3, 800817e <__sfp+0x12>
 8008178:	4630      	mov	r0, r6
 800817a:	f7ff ffc7 	bl	800810c <__sinit>
 800817e:	3648      	adds	r6, #72	; 0x48
 8008180:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008184:	3b01      	subs	r3, #1
 8008186:	d503      	bpl.n	8008190 <__sfp+0x24>
 8008188:	6833      	ldr	r3, [r6, #0]
 800818a:	b133      	cbz	r3, 800819a <__sfp+0x2e>
 800818c:	6836      	ldr	r6, [r6, #0]
 800818e:	e7f7      	b.n	8008180 <__sfp+0x14>
 8008190:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008194:	b16d      	cbz	r5, 80081b2 <__sfp+0x46>
 8008196:	3468      	adds	r4, #104	; 0x68
 8008198:	e7f4      	b.n	8008184 <__sfp+0x18>
 800819a:	2104      	movs	r1, #4
 800819c:	4638      	mov	r0, r7
 800819e:	f7ff ff9f 	bl	80080e0 <__sfmoreglue>
 80081a2:	6030      	str	r0, [r6, #0]
 80081a4:	2800      	cmp	r0, #0
 80081a6:	d1f1      	bne.n	800818c <__sfp+0x20>
 80081a8:	230c      	movs	r3, #12
 80081aa:	603b      	str	r3, [r7, #0]
 80081ac:	4604      	mov	r4, r0
 80081ae:	4620      	mov	r0, r4
 80081b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80081b2:	4b0b      	ldr	r3, [pc, #44]	; (80081e0 <__sfp+0x74>)
 80081b4:	6665      	str	r5, [r4, #100]	; 0x64
 80081b6:	e9c4 5500 	strd	r5, r5, [r4]
 80081ba:	60a5      	str	r5, [r4, #8]
 80081bc:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80081c0:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80081c4:	2208      	movs	r2, #8
 80081c6:	4629      	mov	r1, r5
 80081c8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80081cc:	f7ff fcb4 	bl	8007b38 <memset>
 80081d0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80081d4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80081d8:	e7e9      	b.n	80081ae <__sfp+0x42>
 80081da:	bf00      	nop
 80081dc:	08008f14 	.word	0x08008f14
 80081e0:	ffff0001 	.word	0xffff0001

080081e4 <_fwalk_reent>:
 80081e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80081e8:	4680      	mov	r8, r0
 80081ea:	4689      	mov	r9, r1
 80081ec:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80081f0:	2600      	movs	r6, #0
 80081f2:	b914      	cbnz	r4, 80081fa <_fwalk_reent+0x16>
 80081f4:	4630      	mov	r0, r6
 80081f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80081fa:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80081fe:	3f01      	subs	r7, #1
 8008200:	d501      	bpl.n	8008206 <_fwalk_reent+0x22>
 8008202:	6824      	ldr	r4, [r4, #0]
 8008204:	e7f5      	b.n	80081f2 <_fwalk_reent+0xe>
 8008206:	89ab      	ldrh	r3, [r5, #12]
 8008208:	2b01      	cmp	r3, #1
 800820a:	d907      	bls.n	800821c <_fwalk_reent+0x38>
 800820c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008210:	3301      	adds	r3, #1
 8008212:	d003      	beq.n	800821c <_fwalk_reent+0x38>
 8008214:	4629      	mov	r1, r5
 8008216:	4640      	mov	r0, r8
 8008218:	47c8      	blx	r9
 800821a:	4306      	orrs	r6, r0
 800821c:	3568      	adds	r5, #104	; 0x68
 800821e:	e7ee      	b.n	80081fe <_fwalk_reent+0x1a>

08008220 <__swhatbuf_r>:
 8008220:	b570      	push	{r4, r5, r6, lr}
 8008222:	460e      	mov	r6, r1
 8008224:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008228:	2900      	cmp	r1, #0
 800822a:	b096      	sub	sp, #88	; 0x58
 800822c:	4614      	mov	r4, r2
 800822e:	461d      	mov	r5, r3
 8008230:	da07      	bge.n	8008242 <__swhatbuf_r+0x22>
 8008232:	2300      	movs	r3, #0
 8008234:	602b      	str	r3, [r5, #0]
 8008236:	89b3      	ldrh	r3, [r6, #12]
 8008238:	061a      	lsls	r2, r3, #24
 800823a:	d410      	bmi.n	800825e <__swhatbuf_r+0x3e>
 800823c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008240:	e00e      	b.n	8008260 <__swhatbuf_r+0x40>
 8008242:	466a      	mov	r2, sp
 8008244:	f000 fc3e 	bl	8008ac4 <_fstat_r>
 8008248:	2800      	cmp	r0, #0
 800824a:	dbf2      	blt.n	8008232 <__swhatbuf_r+0x12>
 800824c:	9a01      	ldr	r2, [sp, #4]
 800824e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008252:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008256:	425a      	negs	r2, r3
 8008258:	415a      	adcs	r2, r3
 800825a:	602a      	str	r2, [r5, #0]
 800825c:	e7ee      	b.n	800823c <__swhatbuf_r+0x1c>
 800825e:	2340      	movs	r3, #64	; 0x40
 8008260:	2000      	movs	r0, #0
 8008262:	6023      	str	r3, [r4, #0]
 8008264:	b016      	add	sp, #88	; 0x58
 8008266:	bd70      	pop	{r4, r5, r6, pc}

08008268 <__smakebuf_r>:
 8008268:	898b      	ldrh	r3, [r1, #12]
 800826a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800826c:	079d      	lsls	r5, r3, #30
 800826e:	4606      	mov	r6, r0
 8008270:	460c      	mov	r4, r1
 8008272:	d507      	bpl.n	8008284 <__smakebuf_r+0x1c>
 8008274:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008278:	6023      	str	r3, [r4, #0]
 800827a:	6123      	str	r3, [r4, #16]
 800827c:	2301      	movs	r3, #1
 800827e:	6163      	str	r3, [r4, #20]
 8008280:	b002      	add	sp, #8
 8008282:	bd70      	pop	{r4, r5, r6, pc}
 8008284:	ab01      	add	r3, sp, #4
 8008286:	466a      	mov	r2, sp
 8008288:	f7ff ffca 	bl	8008220 <__swhatbuf_r>
 800828c:	9900      	ldr	r1, [sp, #0]
 800828e:	4605      	mov	r5, r0
 8008290:	4630      	mov	r0, r6
 8008292:	f000 f87f 	bl	8008394 <_malloc_r>
 8008296:	b948      	cbnz	r0, 80082ac <__smakebuf_r+0x44>
 8008298:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800829c:	059a      	lsls	r2, r3, #22
 800829e:	d4ef      	bmi.n	8008280 <__smakebuf_r+0x18>
 80082a0:	f023 0303 	bic.w	r3, r3, #3
 80082a4:	f043 0302 	orr.w	r3, r3, #2
 80082a8:	81a3      	strh	r3, [r4, #12]
 80082aa:	e7e3      	b.n	8008274 <__smakebuf_r+0xc>
 80082ac:	4b0d      	ldr	r3, [pc, #52]	; (80082e4 <__smakebuf_r+0x7c>)
 80082ae:	62b3      	str	r3, [r6, #40]	; 0x28
 80082b0:	89a3      	ldrh	r3, [r4, #12]
 80082b2:	6020      	str	r0, [r4, #0]
 80082b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80082b8:	81a3      	strh	r3, [r4, #12]
 80082ba:	9b00      	ldr	r3, [sp, #0]
 80082bc:	6163      	str	r3, [r4, #20]
 80082be:	9b01      	ldr	r3, [sp, #4]
 80082c0:	6120      	str	r0, [r4, #16]
 80082c2:	b15b      	cbz	r3, 80082dc <__smakebuf_r+0x74>
 80082c4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80082c8:	4630      	mov	r0, r6
 80082ca:	f000 fc0d 	bl	8008ae8 <_isatty_r>
 80082ce:	b128      	cbz	r0, 80082dc <__smakebuf_r+0x74>
 80082d0:	89a3      	ldrh	r3, [r4, #12]
 80082d2:	f023 0303 	bic.w	r3, r3, #3
 80082d6:	f043 0301 	orr.w	r3, r3, #1
 80082da:	81a3      	strh	r3, [r4, #12]
 80082dc:	89a3      	ldrh	r3, [r4, #12]
 80082de:	431d      	orrs	r5, r3
 80082e0:	81a5      	strh	r5, [r4, #12]
 80082e2:	e7cd      	b.n	8008280 <__smakebuf_r+0x18>
 80082e4:	080080d5 	.word	0x080080d5

080082e8 <malloc>:
 80082e8:	4b02      	ldr	r3, [pc, #8]	; (80082f4 <malloc+0xc>)
 80082ea:	4601      	mov	r1, r0
 80082ec:	6818      	ldr	r0, [r3, #0]
 80082ee:	f000 b851 	b.w	8008394 <_malloc_r>
 80082f2:	bf00      	nop
 80082f4:	20000064 	.word	0x20000064

080082f8 <_free_r>:
 80082f8:	b538      	push	{r3, r4, r5, lr}
 80082fa:	4605      	mov	r5, r0
 80082fc:	2900      	cmp	r1, #0
 80082fe:	d045      	beq.n	800838c <_free_r+0x94>
 8008300:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008304:	1f0c      	subs	r4, r1, #4
 8008306:	2b00      	cmp	r3, #0
 8008308:	bfb8      	it	lt
 800830a:	18e4      	addlt	r4, r4, r3
 800830c:	f000 fc0e 	bl	8008b2c <__malloc_lock>
 8008310:	4a1f      	ldr	r2, [pc, #124]	; (8008390 <_free_r+0x98>)
 8008312:	6813      	ldr	r3, [r2, #0]
 8008314:	4610      	mov	r0, r2
 8008316:	b933      	cbnz	r3, 8008326 <_free_r+0x2e>
 8008318:	6063      	str	r3, [r4, #4]
 800831a:	6014      	str	r4, [r2, #0]
 800831c:	4628      	mov	r0, r5
 800831e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008322:	f000 bc04 	b.w	8008b2e <__malloc_unlock>
 8008326:	42a3      	cmp	r3, r4
 8008328:	d90c      	bls.n	8008344 <_free_r+0x4c>
 800832a:	6821      	ldr	r1, [r4, #0]
 800832c:	1862      	adds	r2, r4, r1
 800832e:	4293      	cmp	r3, r2
 8008330:	bf04      	itt	eq
 8008332:	681a      	ldreq	r2, [r3, #0]
 8008334:	685b      	ldreq	r3, [r3, #4]
 8008336:	6063      	str	r3, [r4, #4]
 8008338:	bf04      	itt	eq
 800833a:	1852      	addeq	r2, r2, r1
 800833c:	6022      	streq	r2, [r4, #0]
 800833e:	6004      	str	r4, [r0, #0]
 8008340:	e7ec      	b.n	800831c <_free_r+0x24>
 8008342:	4613      	mov	r3, r2
 8008344:	685a      	ldr	r2, [r3, #4]
 8008346:	b10a      	cbz	r2, 800834c <_free_r+0x54>
 8008348:	42a2      	cmp	r2, r4
 800834a:	d9fa      	bls.n	8008342 <_free_r+0x4a>
 800834c:	6819      	ldr	r1, [r3, #0]
 800834e:	1858      	adds	r0, r3, r1
 8008350:	42a0      	cmp	r0, r4
 8008352:	d10b      	bne.n	800836c <_free_r+0x74>
 8008354:	6820      	ldr	r0, [r4, #0]
 8008356:	4401      	add	r1, r0
 8008358:	1858      	adds	r0, r3, r1
 800835a:	4282      	cmp	r2, r0
 800835c:	6019      	str	r1, [r3, #0]
 800835e:	d1dd      	bne.n	800831c <_free_r+0x24>
 8008360:	6810      	ldr	r0, [r2, #0]
 8008362:	6852      	ldr	r2, [r2, #4]
 8008364:	605a      	str	r2, [r3, #4]
 8008366:	4401      	add	r1, r0
 8008368:	6019      	str	r1, [r3, #0]
 800836a:	e7d7      	b.n	800831c <_free_r+0x24>
 800836c:	d902      	bls.n	8008374 <_free_r+0x7c>
 800836e:	230c      	movs	r3, #12
 8008370:	602b      	str	r3, [r5, #0]
 8008372:	e7d3      	b.n	800831c <_free_r+0x24>
 8008374:	6820      	ldr	r0, [r4, #0]
 8008376:	1821      	adds	r1, r4, r0
 8008378:	428a      	cmp	r2, r1
 800837a:	bf04      	itt	eq
 800837c:	6811      	ldreq	r1, [r2, #0]
 800837e:	6852      	ldreq	r2, [r2, #4]
 8008380:	6062      	str	r2, [r4, #4]
 8008382:	bf04      	itt	eq
 8008384:	1809      	addeq	r1, r1, r0
 8008386:	6021      	streq	r1, [r4, #0]
 8008388:	605c      	str	r4, [r3, #4]
 800838a:	e7c7      	b.n	800831c <_free_r+0x24>
 800838c:	bd38      	pop	{r3, r4, r5, pc}
 800838e:	bf00      	nop
 8008390:	200000f4 	.word	0x200000f4

08008394 <_malloc_r>:
 8008394:	b570      	push	{r4, r5, r6, lr}
 8008396:	1ccd      	adds	r5, r1, #3
 8008398:	f025 0503 	bic.w	r5, r5, #3
 800839c:	3508      	adds	r5, #8
 800839e:	2d0c      	cmp	r5, #12
 80083a0:	bf38      	it	cc
 80083a2:	250c      	movcc	r5, #12
 80083a4:	2d00      	cmp	r5, #0
 80083a6:	4606      	mov	r6, r0
 80083a8:	db01      	blt.n	80083ae <_malloc_r+0x1a>
 80083aa:	42a9      	cmp	r1, r5
 80083ac:	d903      	bls.n	80083b6 <_malloc_r+0x22>
 80083ae:	230c      	movs	r3, #12
 80083b0:	6033      	str	r3, [r6, #0]
 80083b2:	2000      	movs	r0, #0
 80083b4:	bd70      	pop	{r4, r5, r6, pc}
 80083b6:	f000 fbb9 	bl	8008b2c <__malloc_lock>
 80083ba:	4a21      	ldr	r2, [pc, #132]	; (8008440 <_malloc_r+0xac>)
 80083bc:	6814      	ldr	r4, [r2, #0]
 80083be:	4621      	mov	r1, r4
 80083c0:	b991      	cbnz	r1, 80083e8 <_malloc_r+0x54>
 80083c2:	4c20      	ldr	r4, [pc, #128]	; (8008444 <_malloc_r+0xb0>)
 80083c4:	6823      	ldr	r3, [r4, #0]
 80083c6:	b91b      	cbnz	r3, 80083d0 <_malloc_r+0x3c>
 80083c8:	4630      	mov	r0, r6
 80083ca:	f000 fb05 	bl	80089d8 <_sbrk_r>
 80083ce:	6020      	str	r0, [r4, #0]
 80083d0:	4629      	mov	r1, r5
 80083d2:	4630      	mov	r0, r6
 80083d4:	f000 fb00 	bl	80089d8 <_sbrk_r>
 80083d8:	1c43      	adds	r3, r0, #1
 80083da:	d124      	bne.n	8008426 <_malloc_r+0x92>
 80083dc:	230c      	movs	r3, #12
 80083de:	6033      	str	r3, [r6, #0]
 80083e0:	4630      	mov	r0, r6
 80083e2:	f000 fba4 	bl	8008b2e <__malloc_unlock>
 80083e6:	e7e4      	b.n	80083b2 <_malloc_r+0x1e>
 80083e8:	680b      	ldr	r3, [r1, #0]
 80083ea:	1b5b      	subs	r3, r3, r5
 80083ec:	d418      	bmi.n	8008420 <_malloc_r+0x8c>
 80083ee:	2b0b      	cmp	r3, #11
 80083f0:	d90f      	bls.n	8008412 <_malloc_r+0x7e>
 80083f2:	600b      	str	r3, [r1, #0]
 80083f4:	50cd      	str	r5, [r1, r3]
 80083f6:	18cc      	adds	r4, r1, r3
 80083f8:	4630      	mov	r0, r6
 80083fa:	f000 fb98 	bl	8008b2e <__malloc_unlock>
 80083fe:	f104 000b 	add.w	r0, r4, #11
 8008402:	1d23      	adds	r3, r4, #4
 8008404:	f020 0007 	bic.w	r0, r0, #7
 8008408:	1ac3      	subs	r3, r0, r3
 800840a:	d0d3      	beq.n	80083b4 <_malloc_r+0x20>
 800840c:	425a      	negs	r2, r3
 800840e:	50e2      	str	r2, [r4, r3]
 8008410:	e7d0      	b.n	80083b4 <_malloc_r+0x20>
 8008412:	428c      	cmp	r4, r1
 8008414:	684b      	ldr	r3, [r1, #4]
 8008416:	bf16      	itet	ne
 8008418:	6063      	strne	r3, [r4, #4]
 800841a:	6013      	streq	r3, [r2, #0]
 800841c:	460c      	movne	r4, r1
 800841e:	e7eb      	b.n	80083f8 <_malloc_r+0x64>
 8008420:	460c      	mov	r4, r1
 8008422:	6849      	ldr	r1, [r1, #4]
 8008424:	e7cc      	b.n	80083c0 <_malloc_r+0x2c>
 8008426:	1cc4      	adds	r4, r0, #3
 8008428:	f024 0403 	bic.w	r4, r4, #3
 800842c:	42a0      	cmp	r0, r4
 800842e:	d005      	beq.n	800843c <_malloc_r+0xa8>
 8008430:	1a21      	subs	r1, r4, r0
 8008432:	4630      	mov	r0, r6
 8008434:	f000 fad0 	bl	80089d8 <_sbrk_r>
 8008438:	3001      	adds	r0, #1
 800843a:	d0cf      	beq.n	80083dc <_malloc_r+0x48>
 800843c:	6025      	str	r5, [r4, #0]
 800843e:	e7db      	b.n	80083f8 <_malloc_r+0x64>
 8008440:	200000f4 	.word	0x200000f4
 8008444:	200000f8 	.word	0x200000f8

08008448 <__sfputc_r>:
 8008448:	6893      	ldr	r3, [r2, #8]
 800844a:	3b01      	subs	r3, #1
 800844c:	2b00      	cmp	r3, #0
 800844e:	b410      	push	{r4}
 8008450:	6093      	str	r3, [r2, #8]
 8008452:	da08      	bge.n	8008466 <__sfputc_r+0x1e>
 8008454:	6994      	ldr	r4, [r2, #24]
 8008456:	42a3      	cmp	r3, r4
 8008458:	db01      	blt.n	800845e <__sfputc_r+0x16>
 800845a:	290a      	cmp	r1, #10
 800845c:	d103      	bne.n	8008466 <__sfputc_r+0x1e>
 800845e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008462:	f7ff bca3 	b.w	8007dac <__swbuf_r>
 8008466:	6813      	ldr	r3, [r2, #0]
 8008468:	1c58      	adds	r0, r3, #1
 800846a:	6010      	str	r0, [r2, #0]
 800846c:	7019      	strb	r1, [r3, #0]
 800846e:	4608      	mov	r0, r1
 8008470:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008474:	4770      	bx	lr

08008476 <__sfputs_r>:
 8008476:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008478:	4606      	mov	r6, r0
 800847a:	460f      	mov	r7, r1
 800847c:	4614      	mov	r4, r2
 800847e:	18d5      	adds	r5, r2, r3
 8008480:	42ac      	cmp	r4, r5
 8008482:	d101      	bne.n	8008488 <__sfputs_r+0x12>
 8008484:	2000      	movs	r0, #0
 8008486:	e007      	b.n	8008498 <__sfputs_r+0x22>
 8008488:	463a      	mov	r2, r7
 800848a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800848e:	4630      	mov	r0, r6
 8008490:	f7ff ffda 	bl	8008448 <__sfputc_r>
 8008494:	1c43      	adds	r3, r0, #1
 8008496:	d1f3      	bne.n	8008480 <__sfputs_r+0xa>
 8008498:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800849c <_vfiprintf_r>:
 800849c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084a0:	460c      	mov	r4, r1
 80084a2:	b09d      	sub	sp, #116	; 0x74
 80084a4:	4617      	mov	r7, r2
 80084a6:	461d      	mov	r5, r3
 80084a8:	4606      	mov	r6, r0
 80084aa:	b118      	cbz	r0, 80084b4 <_vfiprintf_r+0x18>
 80084ac:	6983      	ldr	r3, [r0, #24]
 80084ae:	b90b      	cbnz	r3, 80084b4 <_vfiprintf_r+0x18>
 80084b0:	f7ff fe2c 	bl	800810c <__sinit>
 80084b4:	4b7c      	ldr	r3, [pc, #496]	; (80086a8 <_vfiprintf_r+0x20c>)
 80084b6:	429c      	cmp	r4, r3
 80084b8:	d158      	bne.n	800856c <_vfiprintf_r+0xd0>
 80084ba:	6874      	ldr	r4, [r6, #4]
 80084bc:	89a3      	ldrh	r3, [r4, #12]
 80084be:	0718      	lsls	r0, r3, #28
 80084c0:	d55e      	bpl.n	8008580 <_vfiprintf_r+0xe4>
 80084c2:	6923      	ldr	r3, [r4, #16]
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d05b      	beq.n	8008580 <_vfiprintf_r+0xe4>
 80084c8:	2300      	movs	r3, #0
 80084ca:	9309      	str	r3, [sp, #36]	; 0x24
 80084cc:	2320      	movs	r3, #32
 80084ce:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80084d2:	2330      	movs	r3, #48	; 0x30
 80084d4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80084d8:	9503      	str	r5, [sp, #12]
 80084da:	f04f 0b01 	mov.w	fp, #1
 80084de:	46b8      	mov	r8, r7
 80084e0:	4645      	mov	r5, r8
 80084e2:	f815 3b01 	ldrb.w	r3, [r5], #1
 80084e6:	b10b      	cbz	r3, 80084ec <_vfiprintf_r+0x50>
 80084e8:	2b25      	cmp	r3, #37	; 0x25
 80084ea:	d154      	bne.n	8008596 <_vfiprintf_r+0xfa>
 80084ec:	ebb8 0a07 	subs.w	sl, r8, r7
 80084f0:	d00b      	beq.n	800850a <_vfiprintf_r+0x6e>
 80084f2:	4653      	mov	r3, sl
 80084f4:	463a      	mov	r2, r7
 80084f6:	4621      	mov	r1, r4
 80084f8:	4630      	mov	r0, r6
 80084fa:	f7ff ffbc 	bl	8008476 <__sfputs_r>
 80084fe:	3001      	adds	r0, #1
 8008500:	f000 80c2 	beq.w	8008688 <_vfiprintf_r+0x1ec>
 8008504:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008506:	4453      	add	r3, sl
 8008508:	9309      	str	r3, [sp, #36]	; 0x24
 800850a:	f898 3000 	ldrb.w	r3, [r8]
 800850e:	2b00      	cmp	r3, #0
 8008510:	f000 80ba 	beq.w	8008688 <_vfiprintf_r+0x1ec>
 8008514:	2300      	movs	r3, #0
 8008516:	f04f 32ff 	mov.w	r2, #4294967295
 800851a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800851e:	9304      	str	r3, [sp, #16]
 8008520:	9307      	str	r3, [sp, #28]
 8008522:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008526:	931a      	str	r3, [sp, #104]	; 0x68
 8008528:	46a8      	mov	r8, r5
 800852a:	2205      	movs	r2, #5
 800852c:	f818 1b01 	ldrb.w	r1, [r8], #1
 8008530:	485e      	ldr	r0, [pc, #376]	; (80086ac <_vfiprintf_r+0x210>)
 8008532:	f7f7 fe4d 	bl	80001d0 <memchr>
 8008536:	9b04      	ldr	r3, [sp, #16]
 8008538:	bb78      	cbnz	r0, 800859a <_vfiprintf_r+0xfe>
 800853a:	06d9      	lsls	r1, r3, #27
 800853c:	bf44      	itt	mi
 800853e:	2220      	movmi	r2, #32
 8008540:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008544:	071a      	lsls	r2, r3, #28
 8008546:	bf44      	itt	mi
 8008548:	222b      	movmi	r2, #43	; 0x2b
 800854a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800854e:	782a      	ldrb	r2, [r5, #0]
 8008550:	2a2a      	cmp	r2, #42	; 0x2a
 8008552:	d02a      	beq.n	80085aa <_vfiprintf_r+0x10e>
 8008554:	9a07      	ldr	r2, [sp, #28]
 8008556:	46a8      	mov	r8, r5
 8008558:	2000      	movs	r0, #0
 800855a:	250a      	movs	r5, #10
 800855c:	4641      	mov	r1, r8
 800855e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008562:	3b30      	subs	r3, #48	; 0x30
 8008564:	2b09      	cmp	r3, #9
 8008566:	d969      	bls.n	800863c <_vfiprintf_r+0x1a0>
 8008568:	b360      	cbz	r0, 80085c4 <_vfiprintf_r+0x128>
 800856a:	e024      	b.n	80085b6 <_vfiprintf_r+0x11a>
 800856c:	4b50      	ldr	r3, [pc, #320]	; (80086b0 <_vfiprintf_r+0x214>)
 800856e:	429c      	cmp	r4, r3
 8008570:	d101      	bne.n	8008576 <_vfiprintf_r+0xda>
 8008572:	68b4      	ldr	r4, [r6, #8]
 8008574:	e7a2      	b.n	80084bc <_vfiprintf_r+0x20>
 8008576:	4b4f      	ldr	r3, [pc, #316]	; (80086b4 <_vfiprintf_r+0x218>)
 8008578:	429c      	cmp	r4, r3
 800857a:	bf08      	it	eq
 800857c:	68f4      	ldreq	r4, [r6, #12]
 800857e:	e79d      	b.n	80084bc <_vfiprintf_r+0x20>
 8008580:	4621      	mov	r1, r4
 8008582:	4630      	mov	r0, r6
 8008584:	f7ff fc64 	bl	8007e50 <__swsetup_r>
 8008588:	2800      	cmp	r0, #0
 800858a:	d09d      	beq.n	80084c8 <_vfiprintf_r+0x2c>
 800858c:	f04f 30ff 	mov.w	r0, #4294967295
 8008590:	b01d      	add	sp, #116	; 0x74
 8008592:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008596:	46a8      	mov	r8, r5
 8008598:	e7a2      	b.n	80084e0 <_vfiprintf_r+0x44>
 800859a:	4a44      	ldr	r2, [pc, #272]	; (80086ac <_vfiprintf_r+0x210>)
 800859c:	1a80      	subs	r0, r0, r2
 800859e:	fa0b f000 	lsl.w	r0, fp, r0
 80085a2:	4318      	orrs	r0, r3
 80085a4:	9004      	str	r0, [sp, #16]
 80085a6:	4645      	mov	r5, r8
 80085a8:	e7be      	b.n	8008528 <_vfiprintf_r+0x8c>
 80085aa:	9a03      	ldr	r2, [sp, #12]
 80085ac:	1d11      	adds	r1, r2, #4
 80085ae:	6812      	ldr	r2, [r2, #0]
 80085b0:	9103      	str	r1, [sp, #12]
 80085b2:	2a00      	cmp	r2, #0
 80085b4:	db01      	blt.n	80085ba <_vfiprintf_r+0x11e>
 80085b6:	9207      	str	r2, [sp, #28]
 80085b8:	e004      	b.n	80085c4 <_vfiprintf_r+0x128>
 80085ba:	4252      	negs	r2, r2
 80085bc:	f043 0302 	orr.w	r3, r3, #2
 80085c0:	9207      	str	r2, [sp, #28]
 80085c2:	9304      	str	r3, [sp, #16]
 80085c4:	f898 3000 	ldrb.w	r3, [r8]
 80085c8:	2b2e      	cmp	r3, #46	; 0x2e
 80085ca:	d10e      	bne.n	80085ea <_vfiprintf_r+0x14e>
 80085cc:	f898 3001 	ldrb.w	r3, [r8, #1]
 80085d0:	2b2a      	cmp	r3, #42	; 0x2a
 80085d2:	d138      	bne.n	8008646 <_vfiprintf_r+0x1aa>
 80085d4:	9b03      	ldr	r3, [sp, #12]
 80085d6:	1d1a      	adds	r2, r3, #4
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	9203      	str	r2, [sp, #12]
 80085dc:	2b00      	cmp	r3, #0
 80085de:	bfb8      	it	lt
 80085e0:	f04f 33ff 	movlt.w	r3, #4294967295
 80085e4:	f108 0802 	add.w	r8, r8, #2
 80085e8:	9305      	str	r3, [sp, #20]
 80085ea:	4d33      	ldr	r5, [pc, #204]	; (80086b8 <_vfiprintf_r+0x21c>)
 80085ec:	f898 1000 	ldrb.w	r1, [r8]
 80085f0:	2203      	movs	r2, #3
 80085f2:	4628      	mov	r0, r5
 80085f4:	f7f7 fdec 	bl	80001d0 <memchr>
 80085f8:	b140      	cbz	r0, 800860c <_vfiprintf_r+0x170>
 80085fa:	2340      	movs	r3, #64	; 0x40
 80085fc:	1b40      	subs	r0, r0, r5
 80085fe:	fa03 f000 	lsl.w	r0, r3, r0
 8008602:	9b04      	ldr	r3, [sp, #16]
 8008604:	4303      	orrs	r3, r0
 8008606:	f108 0801 	add.w	r8, r8, #1
 800860a:	9304      	str	r3, [sp, #16]
 800860c:	f898 1000 	ldrb.w	r1, [r8]
 8008610:	482a      	ldr	r0, [pc, #168]	; (80086bc <_vfiprintf_r+0x220>)
 8008612:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008616:	2206      	movs	r2, #6
 8008618:	f108 0701 	add.w	r7, r8, #1
 800861c:	f7f7 fdd8 	bl	80001d0 <memchr>
 8008620:	2800      	cmp	r0, #0
 8008622:	d037      	beq.n	8008694 <_vfiprintf_r+0x1f8>
 8008624:	4b26      	ldr	r3, [pc, #152]	; (80086c0 <_vfiprintf_r+0x224>)
 8008626:	bb1b      	cbnz	r3, 8008670 <_vfiprintf_r+0x1d4>
 8008628:	9b03      	ldr	r3, [sp, #12]
 800862a:	3307      	adds	r3, #7
 800862c:	f023 0307 	bic.w	r3, r3, #7
 8008630:	3308      	adds	r3, #8
 8008632:	9303      	str	r3, [sp, #12]
 8008634:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008636:	444b      	add	r3, r9
 8008638:	9309      	str	r3, [sp, #36]	; 0x24
 800863a:	e750      	b.n	80084de <_vfiprintf_r+0x42>
 800863c:	fb05 3202 	mla	r2, r5, r2, r3
 8008640:	2001      	movs	r0, #1
 8008642:	4688      	mov	r8, r1
 8008644:	e78a      	b.n	800855c <_vfiprintf_r+0xc0>
 8008646:	2300      	movs	r3, #0
 8008648:	f108 0801 	add.w	r8, r8, #1
 800864c:	9305      	str	r3, [sp, #20]
 800864e:	4619      	mov	r1, r3
 8008650:	250a      	movs	r5, #10
 8008652:	4640      	mov	r0, r8
 8008654:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008658:	3a30      	subs	r2, #48	; 0x30
 800865a:	2a09      	cmp	r2, #9
 800865c:	d903      	bls.n	8008666 <_vfiprintf_r+0x1ca>
 800865e:	2b00      	cmp	r3, #0
 8008660:	d0c3      	beq.n	80085ea <_vfiprintf_r+0x14e>
 8008662:	9105      	str	r1, [sp, #20]
 8008664:	e7c1      	b.n	80085ea <_vfiprintf_r+0x14e>
 8008666:	fb05 2101 	mla	r1, r5, r1, r2
 800866a:	2301      	movs	r3, #1
 800866c:	4680      	mov	r8, r0
 800866e:	e7f0      	b.n	8008652 <_vfiprintf_r+0x1b6>
 8008670:	ab03      	add	r3, sp, #12
 8008672:	9300      	str	r3, [sp, #0]
 8008674:	4622      	mov	r2, r4
 8008676:	4b13      	ldr	r3, [pc, #76]	; (80086c4 <_vfiprintf_r+0x228>)
 8008678:	a904      	add	r1, sp, #16
 800867a:	4630      	mov	r0, r6
 800867c:	f3af 8000 	nop.w
 8008680:	f1b0 3fff 	cmp.w	r0, #4294967295
 8008684:	4681      	mov	r9, r0
 8008686:	d1d5      	bne.n	8008634 <_vfiprintf_r+0x198>
 8008688:	89a3      	ldrh	r3, [r4, #12]
 800868a:	065b      	lsls	r3, r3, #25
 800868c:	f53f af7e 	bmi.w	800858c <_vfiprintf_r+0xf0>
 8008690:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008692:	e77d      	b.n	8008590 <_vfiprintf_r+0xf4>
 8008694:	ab03      	add	r3, sp, #12
 8008696:	9300      	str	r3, [sp, #0]
 8008698:	4622      	mov	r2, r4
 800869a:	4b0a      	ldr	r3, [pc, #40]	; (80086c4 <_vfiprintf_r+0x228>)
 800869c:	a904      	add	r1, sp, #16
 800869e:	4630      	mov	r0, r6
 80086a0:	f000 f888 	bl	80087b4 <_printf_i>
 80086a4:	e7ec      	b.n	8008680 <_vfiprintf_r+0x1e4>
 80086a6:	bf00      	nop
 80086a8:	08008f38 	.word	0x08008f38
 80086ac:	08008f78 	.word	0x08008f78
 80086b0:	08008f58 	.word	0x08008f58
 80086b4:	08008f18 	.word	0x08008f18
 80086b8:	08008f7e 	.word	0x08008f7e
 80086bc:	08008f82 	.word	0x08008f82
 80086c0:	00000000 	.word	0x00000000
 80086c4:	08008477 	.word	0x08008477

080086c8 <_printf_common>:
 80086c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80086cc:	4691      	mov	r9, r2
 80086ce:	461f      	mov	r7, r3
 80086d0:	688a      	ldr	r2, [r1, #8]
 80086d2:	690b      	ldr	r3, [r1, #16]
 80086d4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80086d8:	4293      	cmp	r3, r2
 80086da:	bfb8      	it	lt
 80086dc:	4613      	movlt	r3, r2
 80086de:	f8c9 3000 	str.w	r3, [r9]
 80086e2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80086e6:	4606      	mov	r6, r0
 80086e8:	460c      	mov	r4, r1
 80086ea:	b112      	cbz	r2, 80086f2 <_printf_common+0x2a>
 80086ec:	3301      	adds	r3, #1
 80086ee:	f8c9 3000 	str.w	r3, [r9]
 80086f2:	6823      	ldr	r3, [r4, #0]
 80086f4:	0699      	lsls	r1, r3, #26
 80086f6:	bf42      	ittt	mi
 80086f8:	f8d9 3000 	ldrmi.w	r3, [r9]
 80086fc:	3302      	addmi	r3, #2
 80086fe:	f8c9 3000 	strmi.w	r3, [r9]
 8008702:	6825      	ldr	r5, [r4, #0]
 8008704:	f015 0506 	ands.w	r5, r5, #6
 8008708:	d107      	bne.n	800871a <_printf_common+0x52>
 800870a:	f104 0a19 	add.w	sl, r4, #25
 800870e:	68e3      	ldr	r3, [r4, #12]
 8008710:	f8d9 2000 	ldr.w	r2, [r9]
 8008714:	1a9b      	subs	r3, r3, r2
 8008716:	42ab      	cmp	r3, r5
 8008718:	dc28      	bgt.n	800876c <_printf_common+0xa4>
 800871a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800871e:	6822      	ldr	r2, [r4, #0]
 8008720:	3300      	adds	r3, #0
 8008722:	bf18      	it	ne
 8008724:	2301      	movne	r3, #1
 8008726:	0692      	lsls	r2, r2, #26
 8008728:	d42d      	bmi.n	8008786 <_printf_common+0xbe>
 800872a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800872e:	4639      	mov	r1, r7
 8008730:	4630      	mov	r0, r6
 8008732:	47c0      	blx	r8
 8008734:	3001      	adds	r0, #1
 8008736:	d020      	beq.n	800877a <_printf_common+0xb2>
 8008738:	6823      	ldr	r3, [r4, #0]
 800873a:	68e5      	ldr	r5, [r4, #12]
 800873c:	f8d9 2000 	ldr.w	r2, [r9]
 8008740:	f003 0306 	and.w	r3, r3, #6
 8008744:	2b04      	cmp	r3, #4
 8008746:	bf08      	it	eq
 8008748:	1aad      	subeq	r5, r5, r2
 800874a:	68a3      	ldr	r3, [r4, #8]
 800874c:	6922      	ldr	r2, [r4, #16]
 800874e:	bf0c      	ite	eq
 8008750:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008754:	2500      	movne	r5, #0
 8008756:	4293      	cmp	r3, r2
 8008758:	bfc4      	itt	gt
 800875a:	1a9b      	subgt	r3, r3, r2
 800875c:	18ed      	addgt	r5, r5, r3
 800875e:	f04f 0900 	mov.w	r9, #0
 8008762:	341a      	adds	r4, #26
 8008764:	454d      	cmp	r5, r9
 8008766:	d11a      	bne.n	800879e <_printf_common+0xd6>
 8008768:	2000      	movs	r0, #0
 800876a:	e008      	b.n	800877e <_printf_common+0xb6>
 800876c:	2301      	movs	r3, #1
 800876e:	4652      	mov	r2, sl
 8008770:	4639      	mov	r1, r7
 8008772:	4630      	mov	r0, r6
 8008774:	47c0      	blx	r8
 8008776:	3001      	adds	r0, #1
 8008778:	d103      	bne.n	8008782 <_printf_common+0xba>
 800877a:	f04f 30ff 	mov.w	r0, #4294967295
 800877e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008782:	3501      	adds	r5, #1
 8008784:	e7c3      	b.n	800870e <_printf_common+0x46>
 8008786:	18e1      	adds	r1, r4, r3
 8008788:	1c5a      	adds	r2, r3, #1
 800878a:	2030      	movs	r0, #48	; 0x30
 800878c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008790:	4422      	add	r2, r4
 8008792:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008796:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800879a:	3302      	adds	r3, #2
 800879c:	e7c5      	b.n	800872a <_printf_common+0x62>
 800879e:	2301      	movs	r3, #1
 80087a0:	4622      	mov	r2, r4
 80087a2:	4639      	mov	r1, r7
 80087a4:	4630      	mov	r0, r6
 80087a6:	47c0      	blx	r8
 80087a8:	3001      	adds	r0, #1
 80087aa:	d0e6      	beq.n	800877a <_printf_common+0xb2>
 80087ac:	f109 0901 	add.w	r9, r9, #1
 80087b0:	e7d8      	b.n	8008764 <_printf_common+0x9c>
	...

080087b4 <_printf_i>:
 80087b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80087b8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80087bc:	460c      	mov	r4, r1
 80087be:	7e09      	ldrb	r1, [r1, #24]
 80087c0:	b085      	sub	sp, #20
 80087c2:	296e      	cmp	r1, #110	; 0x6e
 80087c4:	4617      	mov	r7, r2
 80087c6:	4606      	mov	r6, r0
 80087c8:	4698      	mov	r8, r3
 80087ca:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80087cc:	f000 80b3 	beq.w	8008936 <_printf_i+0x182>
 80087d0:	d822      	bhi.n	8008818 <_printf_i+0x64>
 80087d2:	2963      	cmp	r1, #99	; 0x63
 80087d4:	d036      	beq.n	8008844 <_printf_i+0x90>
 80087d6:	d80a      	bhi.n	80087ee <_printf_i+0x3a>
 80087d8:	2900      	cmp	r1, #0
 80087da:	f000 80b9 	beq.w	8008950 <_printf_i+0x19c>
 80087de:	2958      	cmp	r1, #88	; 0x58
 80087e0:	f000 8083 	beq.w	80088ea <_printf_i+0x136>
 80087e4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80087e8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80087ec:	e032      	b.n	8008854 <_printf_i+0xa0>
 80087ee:	2964      	cmp	r1, #100	; 0x64
 80087f0:	d001      	beq.n	80087f6 <_printf_i+0x42>
 80087f2:	2969      	cmp	r1, #105	; 0x69
 80087f4:	d1f6      	bne.n	80087e4 <_printf_i+0x30>
 80087f6:	6820      	ldr	r0, [r4, #0]
 80087f8:	6813      	ldr	r3, [r2, #0]
 80087fa:	0605      	lsls	r5, r0, #24
 80087fc:	f103 0104 	add.w	r1, r3, #4
 8008800:	d52a      	bpl.n	8008858 <_printf_i+0xa4>
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	6011      	str	r1, [r2, #0]
 8008806:	2b00      	cmp	r3, #0
 8008808:	da03      	bge.n	8008812 <_printf_i+0x5e>
 800880a:	222d      	movs	r2, #45	; 0x2d
 800880c:	425b      	negs	r3, r3
 800880e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8008812:	486f      	ldr	r0, [pc, #444]	; (80089d0 <_printf_i+0x21c>)
 8008814:	220a      	movs	r2, #10
 8008816:	e039      	b.n	800888c <_printf_i+0xd8>
 8008818:	2973      	cmp	r1, #115	; 0x73
 800881a:	f000 809d 	beq.w	8008958 <_printf_i+0x1a4>
 800881e:	d808      	bhi.n	8008832 <_printf_i+0x7e>
 8008820:	296f      	cmp	r1, #111	; 0x6f
 8008822:	d020      	beq.n	8008866 <_printf_i+0xb2>
 8008824:	2970      	cmp	r1, #112	; 0x70
 8008826:	d1dd      	bne.n	80087e4 <_printf_i+0x30>
 8008828:	6823      	ldr	r3, [r4, #0]
 800882a:	f043 0320 	orr.w	r3, r3, #32
 800882e:	6023      	str	r3, [r4, #0]
 8008830:	e003      	b.n	800883a <_printf_i+0x86>
 8008832:	2975      	cmp	r1, #117	; 0x75
 8008834:	d017      	beq.n	8008866 <_printf_i+0xb2>
 8008836:	2978      	cmp	r1, #120	; 0x78
 8008838:	d1d4      	bne.n	80087e4 <_printf_i+0x30>
 800883a:	2378      	movs	r3, #120	; 0x78
 800883c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008840:	4864      	ldr	r0, [pc, #400]	; (80089d4 <_printf_i+0x220>)
 8008842:	e055      	b.n	80088f0 <_printf_i+0x13c>
 8008844:	6813      	ldr	r3, [r2, #0]
 8008846:	1d19      	adds	r1, r3, #4
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	6011      	str	r1, [r2, #0]
 800884c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008850:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008854:	2301      	movs	r3, #1
 8008856:	e08c      	b.n	8008972 <_printf_i+0x1be>
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	6011      	str	r1, [r2, #0]
 800885c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008860:	bf18      	it	ne
 8008862:	b21b      	sxthne	r3, r3
 8008864:	e7cf      	b.n	8008806 <_printf_i+0x52>
 8008866:	6813      	ldr	r3, [r2, #0]
 8008868:	6825      	ldr	r5, [r4, #0]
 800886a:	1d18      	adds	r0, r3, #4
 800886c:	6010      	str	r0, [r2, #0]
 800886e:	0628      	lsls	r0, r5, #24
 8008870:	d501      	bpl.n	8008876 <_printf_i+0xc2>
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	e002      	b.n	800887c <_printf_i+0xc8>
 8008876:	0668      	lsls	r0, r5, #25
 8008878:	d5fb      	bpl.n	8008872 <_printf_i+0xbe>
 800887a:	881b      	ldrh	r3, [r3, #0]
 800887c:	4854      	ldr	r0, [pc, #336]	; (80089d0 <_printf_i+0x21c>)
 800887e:	296f      	cmp	r1, #111	; 0x6f
 8008880:	bf14      	ite	ne
 8008882:	220a      	movne	r2, #10
 8008884:	2208      	moveq	r2, #8
 8008886:	2100      	movs	r1, #0
 8008888:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800888c:	6865      	ldr	r5, [r4, #4]
 800888e:	60a5      	str	r5, [r4, #8]
 8008890:	2d00      	cmp	r5, #0
 8008892:	f2c0 8095 	blt.w	80089c0 <_printf_i+0x20c>
 8008896:	6821      	ldr	r1, [r4, #0]
 8008898:	f021 0104 	bic.w	r1, r1, #4
 800889c:	6021      	str	r1, [r4, #0]
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d13d      	bne.n	800891e <_printf_i+0x16a>
 80088a2:	2d00      	cmp	r5, #0
 80088a4:	f040 808e 	bne.w	80089c4 <_printf_i+0x210>
 80088a8:	4665      	mov	r5, ip
 80088aa:	2a08      	cmp	r2, #8
 80088ac:	d10b      	bne.n	80088c6 <_printf_i+0x112>
 80088ae:	6823      	ldr	r3, [r4, #0]
 80088b0:	07db      	lsls	r3, r3, #31
 80088b2:	d508      	bpl.n	80088c6 <_printf_i+0x112>
 80088b4:	6923      	ldr	r3, [r4, #16]
 80088b6:	6862      	ldr	r2, [r4, #4]
 80088b8:	429a      	cmp	r2, r3
 80088ba:	bfde      	ittt	le
 80088bc:	2330      	movle	r3, #48	; 0x30
 80088be:	f805 3c01 	strble.w	r3, [r5, #-1]
 80088c2:	f105 35ff 	addle.w	r5, r5, #4294967295
 80088c6:	ebac 0305 	sub.w	r3, ip, r5
 80088ca:	6123      	str	r3, [r4, #16]
 80088cc:	f8cd 8000 	str.w	r8, [sp]
 80088d0:	463b      	mov	r3, r7
 80088d2:	aa03      	add	r2, sp, #12
 80088d4:	4621      	mov	r1, r4
 80088d6:	4630      	mov	r0, r6
 80088d8:	f7ff fef6 	bl	80086c8 <_printf_common>
 80088dc:	3001      	adds	r0, #1
 80088de:	d14d      	bne.n	800897c <_printf_i+0x1c8>
 80088e0:	f04f 30ff 	mov.w	r0, #4294967295
 80088e4:	b005      	add	sp, #20
 80088e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80088ea:	4839      	ldr	r0, [pc, #228]	; (80089d0 <_printf_i+0x21c>)
 80088ec:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80088f0:	6813      	ldr	r3, [r2, #0]
 80088f2:	6821      	ldr	r1, [r4, #0]
 80088f4:	1d1d      	adds	r5, r3, #4
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	6015      	str	r5, [r2, #0]
 80088fa:	060a      	lsls	r2, r1, #24
 80088fc:	d50b      	bpl.n	8008916 <_printf_i+0x162>
 80088fe:	07ca      	lsls	r2, r1, #31
 8008900:	bf44      	itt	mi
 8008902:	f041 0120 	orrmi.w	r1, r1, #32
 8008906:	6021      	strmi	r1, [r4, #0]
 8008908:	b91b      	cbnz	r3, 8008912 <_printf_i+0x15e>
 800890a:	6822      	ldr	r2, [r4, #0]
 800890c:	f022 0220 	bic.w	r2, r2, #32
 8008910:	6022      	str	r2, [r4, #0]
 8008912:	2210      	movs	r2, #16
 8008914:	e7b7      	b.n	8008886 <_printf_i+0xd2>
 8008916:	064d      	lsls	r5, r1, #25
 8008918:	bf48      	it	mi
 800891a:	b29b      	uxthmi	r3, r3
 800891c:	e7ef      	b.n	80088fe <_printf_i+0x14a>
 800891e:	4665      	mov	r5, ip
 8008920:	fbb3 f1f2 	udiv	r1, r3, r2
 8008924:	fb02 3311 	mls	r3, r2, r1, r3
 8008928:	5cc3      	ldrb	r3, [r0, r3]
 800892a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800892e:	460b      	mov	r3, r1
 8008930:	2900      	cmp	r1, #0
 8008932:	d1f5      	bne.n	8008920 <_printf_i+0x16c>
 8008934:	e7b9      	b.n	80088aa <_printf_i+0xf6>
 8008936:	6813      	ldr	r3, [r2, #0]
 8008938:	6825      	ldr	r5, [r4, #0]
 800893a:	6961      	ldr	r1, [r4, #20]
 800893c:	1d18      	adds	r0, r3, #4
 800893e:	6010      	str	r0, [r2, #0]
 8008940:	0628      	lsls	r0, r5, #24
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	d501      	bpl.n	800894a <_printf_i+0x196>
 8008946:	6019      	str	r1, [r3, #0]
 8008948:	e002      	b.n	8008950 <_printf_i+0x19c>
 800894a:	066a      	lsls	r2, r5, #25
 800894c:	d5fb      	bpl.n	8008946 <_printf_i+0x192>
 800894e:	8019      	strh	r1, [r3, #0]
 8008950:	2300      	movs	r3, #0
 8008952:	6123      	str	r3, [r4, #16]
 8008954:	4665      	mov	r5, ip
 8008956:	e7b9      	b.n	80088cc <_printf_i+0x118>
 8008958:	6813      	ldr	r3, [r2, #0]
 800895a:	1d19      	adds	r1, r3, #4
 800895c:	6011      	str	r1, [r2, #0]
 800895e:	681d      	ldr	r5, [r3, #0]
 8008960:	6862      	ldr	r2, [r4, #4]
 8008962:	2100      	movs	r1, #0
 8008964:	4628      	mov	r0, r5
 8008966:	f7f7 fc33 	bl	80001d0 <memchr>
 800896a:	b108      	cbz	r0, 8008970 <_printf_i+0x1bc>
 800896c:	1b40      	subs	r0, r0, r5
 800896e:	6060      	str	r0, [r4, #4]
 8008970:	6863      	ldr	r3, [r4, #4]
 8008972:	6123      	str	r3, [r4, #16]
 8008974:	2300      	movs	r3, #0
 8008976:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800897a:	e7a7      	b.n	80088cc <_printf_i+0x118>
 800897c:	6923      	ldr	r3, [r4, #16]
 800897e:	462a      	mov	r2, r5
 8008980:	4639      	mov	r1, r7
 8008982:	4630      	mov	r0, r6
 8008984:	47c0      	blx	r8
 8008986:	3001      	adds	r0, #1
 8008988:	d0aa      	beq.n	80088e0 <_printf_i+0x12c>
 800898a:	6823      	ldr	r3, [r4, #0]
 800898c:	079b      	lsls	r3, r3, #30
 800898e:	d413      	bmi.n	80089b8 <_printf_i+0x204>
 8008990:	68e0      	ldr	r0, [r4, #12]
 8008992:	9b03      	ldr	r3, [sp, #12]
 8008994:	4298      	cmp	r0, r3
 8008996:	bfb8      	it	lt
 8008998:	4618      	movlt	r0, r3
 800899a:	e7a3      	b.n	80088e4 <_printf_i+0x130>
 800899c:	2301      	movs	r3, #1
 800899e:	464a      	mov	r2, r9
 80089a0:	4639      	mov	r1, r7
 80089a2:	4630      	mov	r0, r6
 80089a4:	47c0      	blx	r8
 80089a6:	3001      	adds	r0, #1
 80089a8:	d09a      	beq.n	80088e0 <_printf_i+0x12c>
 80089aa:	3501      	adds	r5, #1
 80089ac:	68e3      	ldr	r3, [r4, #12]
 80089ae:	9a03      	ldr	r2, [sp, #12]
 80089b0:	1a9b      	subs	r3, r3, r2
 80089b2:	42ab      	cmp	r3, r5
 80089b4:	dcf2      	bgt.n	800899c <_printf_i+0x1e8>
 80089b6:	e7eb      	b.n	8008990 <_printf_i+0x1dc>
 80089b8:	2500      	movs	r5, #0
 80089ba:	f104 0919 	add.w	r9, r4, #25
 80089be:	e7f5      	b.n	80089ac <_printf_i+0x1f8>
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d1ac      	bne.n	800891e <_printf_i+0x16a>
 80089c4:	7803      	ldrb	r3, [r0, #0]
 80089c6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80089ca:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80089ce:	e76c      	b.n	80088aa <_printf_i+0xf6>
 80089d0:	08008f89 	.word	0x08008f89
 80089d4:	08008f9a 	.word	0x08008f9a

080089d8 <_sbrk_r>:
 80089d8:	b538      	push	{r3, r4, r5, lr}
 80089da:	4c06      	ldr	r4, [pc, #24]	; (80089f4 <_sbrk_r+0x1c>)
 80089dc:	2300      	movs	r3, #0
 80089de:	4605      	mov	r5, r0
 80089e0:	4608      	mov	r0, r1
 80089e2:	6023      	str	r3, [r4, #0]
 80089e4:	f7fe fff2 	bl	80079cc <_sbrk>
 80089e8:	1c43      	adds	r3, r0, #1
 80089ea:	d102      	bne.n	80089f2 <_sbrk_r+0x1a>
 80089ec:	6823      	ldr	r3, [r4, #0]
 80089ee:	b103      	cbz	r3, 80089f2 <_sbrk_r+0x1a>
 80089f0:	602b      	str	r3, [r5, #0]
 80089f2:	bd38      	pop	{r3, r4, r5, pc}
 80089f4:	20000e1c 	.word	0x20000e1c

080089f8 <__sread>:
 80089f8:	b510      	push	{r4, lr}
 80089fa:	460c      	mov	r4, r1
 80089fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a00:	f000 f896 	bl	8008b30 <_read_r>
 8008a04:	2800      	cmp	r0, #0
 8008a06:	bfab      	itete	ge
 8008a08:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008a0a:	89a3      	ldrhlt	r3, [r4, #12]
 8008a0c:	181b      	addge	r3, r3, r0
 8008a0e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008a12:	bfac      	ite	ge
 8008a14:	6563      	strge	r3, [r4, #84]	; 0x54
 8008a16:	81a3      	strhlt	r3, [r4, #12]
 8008a18:	bd10      	pop	{r4, pc}

08008a1a <__swrite>:
 8008a1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a1e:	461f      	mov	r7, r3
 8008a20:	898b      	ldrh	r3, [r1, #12]
 8008a22:	05db      	lsls	r3, r3, #23
 8008a24:	4605      	mov	r5, r0
 8008a26:	460c      	mov	r4, r1
 8008a28:	4616      	mov	r6, r2
 8008a2a:	d505      	bpl.n	8008a38 <__swrite+0x1e>
 8008a2c:	2302      	movs	r3, #2
 8008a2e:	2200      	movs	r2, #0
 8008a30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a34:	f000 f868 	bl	8008b08 <_lseek_r>
 8008a38:	89a3      	ldrh	r3, [r4, #12]
 8008a3a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008a3e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008a42:	81a3      	strh	r3, [r4, #12]
 8008a44:	4632      	mov	r2, r6
 8008a46:	463b      	mov	r3, r7
 8008a48:	4628      	mov	r0, r5
 8008a4a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008a4e:	f000 b817 	b.w	8008a80 <_write_r>

08008a52 <__sseek>:
 8008a52:	b510      	push	{r4, lr}
 8008a54:	460c      	mov	r4, r1
 8008a56:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a5a:	f000 f855 	bl	8008b08 <_lseek_r>
 8008a5e:	1c43      	adds	r3, r0, #1
 8008a60:	89a3      	ldrh	r3, [r4, #12]
 8008a62:	bf15      	itete	ne
 8008a64:	6560      	strne	r0, [r4, #84]	; 0x54
 8008a66:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008a6a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008a6e:	81a3      	strheq	r3, [r4, #12]
 8008a70:	bf18      	it	ne
 8008a72:	81a3      	strhne	r3, [r4, #12]
 8008a74:	bd10      	pop	{r4, pc}

08008a76 <__sclose>:
 8008a76:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a7a:	f000 b813 	b.w	8008aa4 <_close_r>
	...

08008a80 <_write_r>:
 8008a80:	b538      	push	{r3, r4, r5, lr}
 8008a82:	4c07      	ldr	r4, [pc, #28]	; (8008aa0 <_write_r+0x20>)
 8008a84:	4605      	mov	r5, r0
 8008a86:	4608      	mov	r0, r1
 8008a88:	4611      	mov	r1, r2
 8008a8a:	2200      	movs	r2, #0
 8008a8c:	6022      	str	r2, [r4, #0]
 8008a8e:	461a      	mov	r2, r3
 8008a90:	f7fe ff4b 	bl	800792a <_write>
 8008a94:	1c43      	adds	r3, r0, #1
 8008a96:	d102      	bne.n	8008a9e <_write_r+0x1e>
 8008a98:	6823      	ldr	r3, [r4, #0]
 8008a9a:	b103      	cbz	r3, 8008a9e <_write_r+0x1e>
 8008a9c:	602b      	str	r3, [r5, #0]
 8008a9e:	bd38      	pop	{r3, r4, r5, pc}
 8008aa0:	20000e1c 	.word	0x20000e1c

08008aa4 <_close_r>:
 8008aa4:	b538      	push	{r3, r4, r5, lr}
 8008aa6:	4c06      	ldr	r4, [pc, #24]	; (8008ac0 <_close_r+0x1c>)
 8008aa8:	2300      	movs	r3, #0
 8008aaa:	4605      	mov	r5, r0
 8008aac:	4608      	mov	r0, r1
 8008aae:	6023      	str	r3, [r4, #0]
 8008ab0:	f7fe ff57 	bl	8007962 <_close>
 8008ab4:	1c43      	adds	r3, r0, #1
 8008ab6:	d102      	bne.n	8008abe <_close_r+0x1a>
 8008ab8:	6823      	ldr	r3, [r4, #0]
 8008aba:	b103      	cbz	r3, 8008abe <_close_r+0x1a>
 8008abc:	602b      	str	r3, [r5, #0]
 8008abe:	bd38      	pop	{r3, r4, r5, pc}
 8008ac0:	20000e1c 	.word	0x20000e1c

08008ac4 <_fstat_r>:
 8008ac4:	b538      	push	{r3, r4, r5, lr}
 8008ac6:	4c07      	ldr	r4, [pc, #28]	; (8008ae4 <_fstat_r+0x20>)
 8008ac8:	2300      	movs	r3, #0
 8008aca:	4605      	mov	r5, r0
 8008acc:	4608      	mov	r0, r1
 8008ace:	4611      	mov	r1, r2
 8008ad0:	6023      	str	r3, [r4, #0]
 8008ad2:	f7fe ff52 	bl	800797a <_fstat>
 8008ad6:	1c43      	adds	r3, r0, #1
 8008ad8:	d102      	bne.n	8008ae0 <_fstat_r+0x1c>
 8008ada:	6823      	ldr	r3, [r4, #0]
 8008adc:	b103      	cbz	r3, 8008ae0 <_fstat_r+0x1c>
 8008ade:	602b      	str	r3, [r5, #0]
 8008ae0:	bd38      	pop	{r3, r4, r5, pc}
 8008ae2:	bf00      	nop
 8008ae4:	20000e1c 	.word	0x20000e1c

08008ae8 <_isatty_r>:
 8008ae8:	b538      	push	{r3, r4, r5, lr}
 8008aea:	4c06      	ldr	r4, [pc, #24]	; (8008b04 <_isatty_r+0x1c>)
 8008aec:	2300      	movs	r3, #0
 8008aee:	4605      	mov	r5, r0
 8008af0:	4608      	mov	r0, r1
 8008af2:	6023      	str	r3, [r4, #0]
 8008af4:	f7fe ff51 	bl	800799a <_isatty>
 8008af8:	1c43      	adds	r3, r0, #1
 8008afa:	d102      	bne.n	8008b02 <_isatty_r+0x1a>
 8008afc:	6823      	ldr	r3, [r4, #0]
 8008afe:	b103      	cbz	r3, 8008b02 <_isatty_r+0x1a>
 8008b00:	602b      	str	r3, [r5, #0]
 8008b02:	bd38      	pop	{r3, r4, r5, pc}
 8008b04:	20000e1c 	.word	0x20000e1c

08008b08 <_lseek_r>:
 8008b08:	b538      	push	{r3, r4, r5, lr}
 8008b0a:	4c07      	ldr	r4, [pc, #28]	; (8008b28 <_lseek_r+0x20>)
 8008b0c:	4605      	mov	r5, r0
 8008b0e:	4608      	mov	r0, r1
 8008b10:	4611      	mov	r1, r2
 8008b12:	2200      	movs	r2, #0
 8008b14:	6022      	str	r2, [r4, #0]
 8008b16:	461a      	mov	r2, r3
 8008b18:	f7fe ff4a 	bl	80079b0 <_lseek>
 8008b1c:	1c43      	adds	r3, r0, #1
 8008b1e:	d102      	bne.n	8008b26 <_lseek_r+0x1e>
 8008b20:	6823      	ldr	r3, [r4, #0]
 8008b22:	b103      	cbz	r3, 8008b26 <_lseek_r+0x1e>
 8008b24:	602b      	str	r3, [r5, #0]
 8008b26:	bd38      	pop	{r3, r4, r5, pc}
 8008b28:	20000e1c 	.word	0x20000e1c

08008b2c <__malloc_lock>:
 8008b2c:	4770      	bx	lr

08008b2e <__malloc_unlock>:
 8008b2e:	4770      	bx	lr

08008b30 <_read_r>:
 8008b30:	b538      	push	{r3, r4, r5, lr}
 8008b32:	4c07      	ldr	r4, [pc, #28]	; (8008b50 <_read_r+0x20>)
 8008b34:	4605      	mov	r5, r0
 8008b36:	4608      	mov	r0, r1
 8008b38:	4611      	mov	r1, r2
 8008b3a:	2200      	movs	r2, #0
 8008b3c:	6022      	str	r2, [r4, #0]
 8008b3e:	461a      	mov	r2, r3
 8008b40:	f7fe fed6 	bl	80078f0 <_read>
 8008b44:	1c43      	adds	r3, r0, #1
 8008b46:	d102      	bne.n	8008b4e <_read_r+0x1e>
 8008b48:	6823      	ldr	r3, [r4, #0]
 8008b4a:	b103      	cbz	r3, 8008b4e <_read_r+0x1e>
 8008b4c:	602b      	str	r3, [r5, #0]
 8008b4e:	bd38      	pop	{r3, r4, r5, pc}
 8008b50:	20000e1c 	.word	0x20000e1c

08008b54 <sqrt>:
 8008b54:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008b58:	ed2d 8b02 	vpush	{d8}
 8008b5c:	b08b      	sub	sp, #44	; 0x2c
 8008b5e:	ec55 4b10 	vmov	r4, r5, d0
 8008b62:	f000 f851 	bl	8008c08 <__ieee754_sqrt>
 8008b66:	4b26      	ldr	r3, [pc, #152]	; (8008c00 <sqrt+0xac>)
 8008b68:	eeb0 8a40 	vmov.f32	s16, s0
 8008b6c:	eef0 8a60 	vmov.f32	s17, s1
 8008b70:	f993 6000 	ldrsb.w	r6, [r3]
 8008b74:	1c73      	adds	r3, r6, #1
 8008b76:	d02a      	beq.n	8008bce <sqrt+0x7a>
 8008b78:	4622      	mov	r2, r4
 8008b7a:	462b      	mov	r3, r5
 8008b7c:	4620      	mov	r0, r4
 8008b7e:	4629      	mov	r1, r5
 8008b80:	f7f7 ffcc 	bl	8000b1c <__aeabi_dcmpun>
 8008b84:	4607      	mov	r7, r0
 8008b86:	bb10      	cbnz	r0, 8008bce <sqrt+0x7a>
 8008b88:	f04f 0800 	mov.w	r8, #0
 8008b8c:	f04f 0900 	mov.w	r9, #0
 8008b90:	4642      	mov	r2, r8
 8008b92:	464b      	mov	r3, r9
 8008b94:	4620      	mov	r0, r4
 8008b96:	4629      	mov	r1, r5
 8008b98:	f7f7 ff98 	bl	8000acc <__aeabi_dcmplt>
 8008b9c:	b1b8      	cbz	r0, 8008bce <sqrt+0x7a>
 8008b9e:	2301      	movs	r3, #1
 8008ba0:	9300      	str	r3, [sp, #0]
 8008ba2:	4b18      	ldr	r3, [pc, #96]	; (8008c04 <sqrt+0xb0>)
 8008ba4:	9301      	str	r3, [sp, #4]
 8008ba6:	9708      	str	r7, [sp, #32]
 8008ba8:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8008bac:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8008bb0:	b9b6      	cbnz	r6, 8008be0 <sqrt+0x8c>
 8008bb2:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8008bb6:	4668      	mov	r0, sp
 8008bb8:	f000 f8d6 	bl	8008d68 <matherr>
 8008bbc:	b1d0      	cbz	r0, 8008bf4 <sqrt+0xa0>
 8008bbe:	9b08      	ldr	r3, [sp, #32]
 8008bc0:	b11b      	cbz	r3, 8008bca <sqrt+0x76>
 8008bc2:	f7fe ff8f 	bl	8007ae4 <__errno>
 8008bc6:	9b08      	ldr	r3, [sp, #32]
 8008bc8:	6003      	str	r3, [r0, #0]
 8008bca:	ed9d 8b06 	vldr	d8, [sp, #24]
 8008bce:	eeb0 0a48 	vmov.f32	s0, s16
 8008bd2:	eef0 0a68 	vmov.f32	s1, s17
 8008bd6:	b00b      	add	sp, #44	; 0x2c
 8008bd8:	ecbd 8b02 	vpop	{d8}
 8008bdc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008be0:	4642      	mov	r2, r8
 8008be2:	464b      	mov	r3, r9
 8008be4:	4640      	mov	r0, r8
 8008be6:	4649      	mov	r1, r9
 8008be8:	f7f7 fe28 	bl	800083c <__aeabi_ddiv>
 8008bec:	2e02      	cmp	r6, #2
 8008bee:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8008bf2:	d1e0      	bne.n	8008bb6 <sqrt+0x62>
 8008bf4:	f7fe ff76 	bl	8007ae4 <__errno>
 8008bf8:	2321      	movs	r3, #33	; 0x21
 8008bfa:	6003      	str	r3, [r0, #0]
 8008bfc:	e7df      	b.n	8008bbe <sqrt+0x6a>
 8008bfe:	bf00      	nop
 8008c00:	200000c8 	.word	0x200000c8
 8008c04:	08008fab 	.word	0x08008fab

08008c08 <__ieee754_sqrt>:
 8008c08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c0c:	4955      	ldr	r1, [pc, #340]	; (8008d64 <__ieee754_sqrt+0x15c>)
 8008c0e:	ec55 4b10 	vmov	r4, r5, d0
 8008c12:	43a9      	bics	r1, r5
 8008c14:	462b      	mov	r3, r5
 8008c16:	462a      	mov	r2, r5
 8008c18:	d112      	bne.n	8008c40 <__ieee754_sqrt+0x38>
 8008c1a:	ee10 2a10 	vmov	r2, s0
 8008c1e:	ee10 0a10 	vmov	r0, s0
 8008c22:	4629      	mov	r1, r5
 8008c24:	f7f7 fce0 	bl	80005e8 <__aeabi_dmul>
 8008c28:	4602      	mov	r2, r0
 8008c2a:	460b      	mov	r3, r1
 8008c2c:	4620      	mov	r0, r4
 8008c2e:	4629      	mov	r1, r5
 8008c30:	f7f7 fb24 	bl	800027c <__adddf3>
 8008c34:	4604      	mov	r4, r0
 8008c36:	460d      	mov	r5, r1
 8008c38:	ec45 4b10 	vmov	d0, r4, r5
 8008c3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008c40:	2d00      	cmp	r5, #0
 8008c42:	ee10 0a10 	vmov	r0, s0
 8008c46:	4621      	mov	r1, r4
 8008c48:	dc0f      	bgt.n	8008c6a <__ieee754_sqrt+0x62>
 8008c4a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8008c4e:	4330      	orrs	r0, r6
 8008c50:	d0f2      	beq.n	8008c38 <__ieee754_sqrt+0x30>
 8008c52:	b155      	cbz	r5, 8008c6a <__ieee754_sqrt+0x62>
 8008c54:	ee10 2a10 	vmov	r2, s0
 8008c58:	4620      	mov	r0, r4
 8008c5a:	4629      	mov	r1, r5
 8008c5c:	f7f7 fb0c 	bl	8000278 <__aeabi_dsub>
 8008c60:	4602      	mov	r2, r0
 8008c62:	460b      	mov	r3, r1
 8008c64:	f7f7 fdea 	bl	800083c <__aeabi_ddiv>
 8008c68:	e7e4      	b.n	8008c34 <__ieee754_sqrt+0x2c>
 8008c6a:	151b      	asrs	r3, r3, #20
 8008c6c:	d073      	beq.n	8008d56 <__ieee754_sqrt+0x14e>
 8008c6e:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8008c72:	07dd      	lsls	r5, r3, #31
 8008c74:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8008c78:	bf48      	it	mi
 8008c7a:	0fc8      	lsrmi	r0, r1, #31
 8008c7c:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8008c80:	bf44      	itt	mi
 8008c82:	0049      	lslmi	r1, r1, #1
 8008c84:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 8008c88:	2500      	movs	r5, #0
 8008c8a:	1058      	asrs	r0, r3, #1
 8008c8c:	0fcb      	lsrs	r3, r1, #31
 8008c8e:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 8008c92:	0049      	lsls	r1, r1, #1
 8008c94:	2316      	movs	r3, #22
 8008c96:	462c      	mov	r4, r5
 8008c98:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8008c9c:	19a7      	adds	r7, r4, r6
 8008c9e:	4297      	cmp	r7, r2
 8008ca0:	bfde      	ittt	le
 8008ca2:	19bc      	addle	r4, r7, r6
 8008ca4:	1bd2      	suble	r2, r2, r7
 8008ca6:	19ad      	addle	r5, r5, r6
 8008ca8:	0fcf      	lsrs	r7, r1, #31
 8008caa:	3b01      	subs	r3, #1
 8008cac:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 8008cb0:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8008cb4:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8008cb8:	d1f0      	bne.n	8008c9c <__ieee754_sqrt+0x94>
 8008cba:	f04f 0c20 	mov.w	ip, #32
 8008cbe:	469e      	mov	lr, r3
 8008cc0:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8008cc4:	42a2      	cmp	r2, r4
 8008cc6:	eb06 070e 	add.w	r7, r6, lr
 8008cca:	dc02      	bgt.n	8008cd2 <__ieee754_sqrt+0xca>
 8008ccc:	d112      	bne.n	8008cf4 <__ieee754_sqrt+0xec>
 8008cce:	428f      	cmp	r7, r1
 8008cd0:	d810      	bhi.n	8008cf4 <__ieee754_sqrt+0xec>
 8008cd2:	2f00      	cmp	r7, #0
 8008cd4:	eb07 0e06 	add.w	lr, r7, r6
 8008cd8:	da42      	bge.n	8008d60 <__ieee754_sqrt+0x158>
 8008cda:	f1be 0f00 	cmp.w	lr, #0
 8008cde:	db3f      	blt.n	8008d60 <__ieee754_sqrt+0x158>
 8008ce0:	f104 0801 	add.w	r8, r4, #1
 8008ce4:	1b12      	subs	r2, r2, r4
 8008ce6:	428f      	cmp	r7, r1
 8008ce8:	bf88      	it	hi
 8008cea:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8008cee:	1bc9      	subs	r1, r1, r7
 8008cf0:	4433      	add	r3, r6
 8008cf2:	4644      	mov	r4, r8
 8008cf4:	0052      	lsls	r2, r2, #1
 8008cf6:	f1bc 0c01 	subs.w	ip, ip, #1
 8008cfa:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 8008cfe:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8008d02:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8008d06:	d1dd      	bne.n	8008cc4 <__ieee754_sqrt+0xbc>
 8008d08:	430a      	orrs	r2, r1
 8008d0a:	d006      	beq.n	8008d1a <__ieee754_sqrt+0x112>
 8008d0c:	1c5c      	adds	r4, r3, #1
 8008d0e:	bf13      	iteet	ne
 8008d10:	3301      	addne	r3, #1
 8008d12:	3501      	addeq	r5, #1
 8008d14:	4663      	moveq	r3, ip
 8008d16:	f023 0301 	bicne.w	r3, r3, #1
 8008d1a:	106a      	asrs	r2, r5, #1
 8008d1c:	085b      	lsrs	r3, r3, #1
 8008d1e:	07e9      	lsls	r1, r5, #31
 8008d20:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8008d24:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8008d28:	bf48      	it	mi
 8008d2a:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8008d2e:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 8008d32:	461c      	mov	r4, r3
 8008d34:	e780      	b.n	8008c38 <__ieee754_sqrt+0x30>
 8008d36:	0aca      	lsrs	r2, r1, #11
 8008d38:	3815      	subs	r0, #21
 8008d3a:	0549      	lsls	r1, r1, #21
 8008d3c:	2a00      	cmp	r2, #0
 8008d3e:	d0fa      	beq.n	8008d36 <__ieee754_sqrt+0x12e>
 8008d40:	02d6      	lsls	r6, r2, #11
 8008d42:	d50a      	bpl.n	8008d5a <__ieee754_sqrt+0x152>
 8008d44:	f1c3 0420 	rsb	r4, r3, #32
 8008d48:	fa21 f404 	lsr.w	r4, r1, r4
 8008d4c:	1e5d      	subs	r5, r3, #1
 8008d4e:	4099      	lsls	r1, r3
 8008d50:	4322      	orrs	r2, r4
 8008d52:	1b43      	subs	r3, r0, r5
 8008d54:	e78b      	b.n	8008c6e <__ieee754_sqrt+0x66>
 8008d56:	4618      	mov	r0, r3
 8008d58:	e7f0      	b.n	8008d3c <__ieee754_sqrt+0x134>
 8008d5a:	0052      	lsls	r2, r2, #1
 8008d5c:	3301      	adds	r3, #1
 8008d5e:	e7ef      	b.n	8008d40 <__ieee754_sqrt+0x138>
 8008d60:	46a0      	mov	r8, r4
 8008d62:	e7bf      	b.n	8008ce4 <__ieee754_sqrt+0xdc>
 8008d64:	7ff00000 	.word	0x7ff00000

08008d68 <matherr>:
 8008d68:	2000      	movs	r0, #0
 8008d6a:	4770      	bx	lr

08008d6c <_init>:
 8008d6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d6e:	bf00      	nop
 8008d70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008d72:	bc08      	pop	{r3}
 8008d74:	469e      	mov	lr, r3
 8008d76:	4770      	bx	lr

08008d78 <_fini>:
 8008d78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d7a:	bf00      	nop
 8008d7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008d7e:	bc08      	pop	{r3}
 8008d80:	469e      	mov	lr, r3
 8008d82:	4770      	bx	lr
